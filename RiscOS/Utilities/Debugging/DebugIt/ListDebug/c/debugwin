/* debugwin.c for !ListDebug */


#include "main.h"
#include "debugwin.h"

#include "alloc.h"



static char *buffstart;  /* address of first byte of buffer for queue */
static char *buffend;    /* address of byte beyond end of buffer for queue */

static char *head;       /* address of first string in queue */
static char *tail;       /* address of byte beyond last string in queue */
  /*
   * The buffer is treated as circular, and we ensure that:
   *       buffstart <= head, tail < buffend
   */

static int buffspare;    /* number of bytes free in the buffer */
  /*
   * The queue is empty iff:
   *     buffspare > 0  &&  head == tail
   */


static char *saveasbuffer = NULL;

static char *currsaveasptr;
static int currsaveasline;
static char currsaveaslinenumbuff[30];
static int currsaveaslineptr;
static char *currsaveasnextstr;



/*
 * Allocate size bytes space for the buffer for the queue.
 */

error * debugwin_alloc_queue (int size)
{
    ER (check_alloc ((void **) &buffstart, size));
    buffend = buffstart + size;

    return NULL;
}


/*
 * Space occupied by the queue is released.
 */

void debugwin_free_queue (void)
{
    free (buffstart);
    buffstart = NULL;

    return;
}


/*
 * Pointers and status variables are set to indicate a fresh, empty queue.
 */

void debugwin_init_queue (void)
{
    head = tail = buffstart;
    buffspare = buffend - buffstart;

    return;
}


/*
 * Removes first item from head of queue
 */

static void take_from_queue (void)
{
    int n;

    /* cannot remove anything from an empty queue */
    if (head == tail && buffspare > 0)
        error_exit (error_lookup ("BadQueue"));

    n = *head;
    head += n + 2;
    buffspare += n + 2;

    /* was the buffer exactly full here? */
    if (head == buffend)
        head = buffstart;
    else
    {
        /* is this followed by an unused gap at the end of the buffer? */
        n = *head;
        if (n == 255 && buffend - head < 257)
        {
            buffspare += (buffend - head);
            head = buffstart;
        }
    }

    return;
}


/*
 * Adds the debug message string s to the buffer - removing earlier
 *  messages to make space if necessary. n = strlen (s) on entry, and
 *  we know that 0 <= n <= 255.
 *
 * firstline and lastline are updated as necessary to reflect the changes.
 */

void debugwin_append_message (char *s, int n)
{
    /* ignore empty lines if requested to do so */
    if (ignoreempties && n == 0)
        return;

    if (n < 0 || n > 255)
        error_exit (error_lookup ("BadN"));

    /* remove messages from the head of the queue to make space */
    while (buffspare < n + 2)
    {
        take_from_queue ();
        firstline++;
    }

    /* check there is sufficient contiguous space at the end of the buffer */
    if (buffend - tail < n + 2)
    {
        /* no - so terminate */
        *tail = 255;
        buffspare -= (buffend - tail);
        tail = buffstart;

        /* may have to remove more messages from the queue head */
        while (buffspare < n + 2)
        {
            take_from_queue ();
            firstline++;
        }
    }

    /* add new message to end of queue */
    *tail = n;
    memcpy (tail + 1, s, n);
    tail += n + 2;
    *(tail - 1) = 0;      /* add terminator */
    if (tail == buffend)
        tail = buffstart;
    buffspare -= n + 2;
    lastline++;

    /* consistency check */
    {
        int numspare;

        if (head > tail)
            numspare = head - tail;
        else if (head < tail)
            numspare = (buffend - tail) + (head - buffstart);
        else if (firstline > lastline)
            numspare = buffend - buffstart;
        else
            numspare = 0;

        if (numspare != buffspare)
            error_exit (error_lookup ("BadBuff", head-buffstart,
                                       tail-buffstart, buffspare, numspare));
    }
    return;
}


/*
 * Returns a pointer to message number n in the queue in the buffer.
 *
 * firstline <= n <= lastline
 */

static int currline = -1;
static char *currs;

static char * get_message (int n)
{
    char *s = head;
    int lne = firstline;

    if (n < firstline || n > lastline)
        error_exit (error_lookup ("BadLine"));

    if (currline >= firstline && currline <= lastline && n >= currline)
    {
        s = currs;
        lne = currline;
    }

    while (lne < n)
    {
        s += (*s + 2);
        if (s == buffend || *s == 255 && buffend - s < 257)
             s = buffstart;
        lne++;            
    }

    currline = n;
    currs = s;

    return s + 1;
}


error * debugwin_redraw_rect (WimpRedrawWindowBlock *blk)
{
    int dx = blk->visible_area.xmin - blk->xscroll;
    int dy = blk->visible_area.ymax - blk->yscroll;

/*
    int wxmin = blk->redraw_area.xmin - dx;
    int wxmax = blk->redraw_area.xmax - dx;
*/

    int wymin = blk->redraw_area.ymin - dy;
    int wymax = blk->redraw_area.ymax - dy;

    int topline = (-(wymax - scaley))/linespace;
    int bottomline = (-wymin)/linespace;
/*
    int leftchar = wxmin/CHARX;
    int rightchar = (wxmax - scalex)/CHARX;
*/

    int lne  /*, chr */ ;

    /* return if it's an empty part of the window */
    if (topline > lastline)
        return NULL;

    /* no need to consider lines below the last line */
    if (bottomline > lastline)
        bottomline = lastline;

/*
    for (lne = topline; lne <= bottomline; lne++)
        for (chr = leftchar; chr <= rightchar; chr++)
        {
            char ch = 'A' + (lne + chr) % 26;

            EDG (ret, _swix (OS_Plot, I0|I1|I2, 4,
                                   chr * CHARX + dx,
                                (-lne) * CHARY + dy));
            EDG (ret, _swix (OS_WriteC, I0, (ch & 1) ? 'ƒ' : 'm'));
        }
*/

    /* redraw each exposed line */
    for (lne = topline; lne <= bottomline; lne++)
    {
        char *mess = get_message (lne);
        char s[300];

        
        if (numberlines)
        {
            sprintf (s, "Line %6d: %s", lne, mess);
            mess = s;
        }

        if (usesystemfont)
        {
            EDG (ret, _swix (OS_Plot, I0|I1|I2, 4,
                                      dx, (-lne) * linespace + dy));
            EDG (ret, _swix (OS_Write0, I0, mess));
        }
        else
        {
            int screeny = (-(lne + 1)) * linespace + dy + scaley;

            EDG (ret, _swix (Wimp_TextOp, I0|I1|I2|I3|I4|I5,
                              2,
                              mess,
                              -1, -1,
                              dx,
                              screeny + FUDGE));
        }
    }

  ret:
    return NULL;
}


/*
 * Save the contents of the queue to the given file.
 * Return TRUE iff successful.
 */

Bool debugwin_save_to_file (FILE *f)
{
    char *s = head;
    int lne = firstline;

    if (!f)
        return FALSE;

    /* treat empty queue as special case */
    if (head == tail && buffspare > 0)
    {
        fclose (f);
        return TRUE;
    }

    do
    {
        int res;

        if (numberlines)
            res = fprintf (f, "Line %6d: %s\n", lne, s + 1);
        else
            res = fprintf (f, "%s\n", s + 1);

        if (res < 0)
        {
            fclose (f);
            return FALSE;
        }

        s += (*s + 2);
        if (s == buffend || *s == 255 && buffend - s < 257)
             s = buffstart;
        lne++;            
    } while (s != tail);

    fclose (f);

    return TRUE;
}


/*
 * Fill next buffer for transmission during RAM transfer.
 * If *buff == 0, then this is the first call, and the buffer must be
 *  assigned.
 * Otherwise, *buff gives the buffer's address, and *size gives its size.
 * Note that each call - except the last - must fill the buffer up as far
 *  as *size requires (which may not be as much as was originally allocated).
 *
 * Returns TRUE unless the buffer could not be allocated.
 */

error * debugwin_save_to_buffer (char **buff, int *size)
{
    int buffsize = *size;
    Bool firstcall = (*buff == 0);

    /* first call has buffer address = 0 */
    if (firstcall)
    {
        if (check_alloc ((void **) buff, buffsize))
            return error_lookup ("NoMem");
        saveasbuffer = *buff;    /* remember so that we can de-allocate at
                                    end of transfer */

        currsaveasnextstr = head;

        if (numberlines)
        {
            currsaveasline = firstline;
            sprintf (currsaveaslinenumbuff, "Line %6d: ", currsaveasline);
            currsaveaslineptr = 0;
            currsaveasptr = (char *) -1;
        }
        else
            currsaveasptr = 0;

        /* special case - nothing to transfer */
        if (head == tail && buffspare > 0)
            firstcall = FALSE;
    }

    /* fill up buffer */
    *size = 0;
    while (*size < buffsize)
    {
        if ((int)currsaveasptr <= 0)
        {
            if (!firstcall && currsaveasnextstr == tail)
                return NULL;

            if ((int)currsaveasptr < 0)
            {
                char ch = currsaveaslinenumbuff[currsaveaslineptr];

                if (ch != 0)
                {
                    (*buff)[*size] = ch;
                    currsaveaslineptr++;
                    (*size)++;
                    continue;
                }
            }

            firstcall = FALSE;
            currsaveasptr = currsaveasnextstr + 1;
            currsaveasnextstr += (*currsaveasnextstr + 2);
            if (currsaveasnextstr == buffend ||
                        *currsaveasnextstr == 255 &&
                        buffend - currsaveasnextstr < 257)
                currsaveasnextstr = buffstart;
        }
        if (*currsaveasptr == 0)
        {
            (*buff)[*size] = '\n';

            if (numberlines)
            {
                currsaveasline++;
                sprintf (currsaveaslinenumbuff, "Line %6d: ",
                                                 currsaveasline);
                currsaveaslineptr = 0;
                currsaveasptr = (char *) -1;
            }
            else
                currsaveasptr = 0;
        }
        else
        {
            (*buff)[*size] = *currsaveasptr;
            currsaveasptr++;
        }

        (*size)++;
    }

    return NULL;
}


void debugwin_savecompleted (void)
{
    free (saveasbuffer);
    saveasbuffer = 0;

    return;
}
