/* main.c for !ListDebug */


#include "main.h"
#include "debugwin.h"


/* the toolbox id block */

static IdBlock idblk;
static WimpPollBlock pblock;


/* iconbar events */

#define  Event_Quit            1  /* User chooses "Quit" */
#define  Event_Clear           2  /* User chooses "Clear" */
#define  Event_IconClick       3  /* User clicks SEL on application icon */
#define  Event_BuffSize        8  /* User clicks "Set" on buffer size dbox */
#define  Event_SetBuffSize    11  /* dbox about to be shown */

#define  ID_BuffSize           0  /* ComponentID of numberrange gadget */


/* main window menu events and menu item ids */

#define  Event_Pause           6  /* User chooses "Pause" */
#define  Event_Lines           7  /* User chooses "Number lines" */
#define  Event_IgnoreEmpties   9  /* User chooses "Ignore empty lines" */
#define  Event_MyBuffSize     10  /* User chooses "Buffer size" */
#define  Event_SetMyBuffSize  12  /* dbox about to be shown */

#define  ID_MyBuffSize         0  /* ComponentID of numberrange gadget */

#define  DM_Pause              3
#define  DM_Lines              4


/* static data */

static int messages [] = {0};    /* all messages */
static int tbcodes  [] = {0};    /* all Toolbox events */
static int* pollword = NULL;     /* communication with DebugIt module */
static int taskhandle;           /* ours */

static Bool quit = FALSE;        /* set TRUE to terminate poll loop */

static ObjectId debugwin;        /* Debug window object identifier */
static Bool debugwinclosed;      /* TRUE iff window is closed */


int firstline = 1;
int lastline = 0;

int queuebuffsize = BUFF_SIZE;


int scalex, scaley;
int screenx, screeny;

int wimpversion;

Bool usesystemfont;
int linespace;

Bool paused = FALSE;
Bool numberlines = TRUE;
Bool ignoreempties = TRUE;



static Bool saveas_abouttobeshown
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId saveas = idblock->self_id;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, saveas_set_file_size (0, saveas, queuebuffsize));

  ret:
    return TRUE;
}


static Bool saveas_savetofile
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId saveas = idblock->self_id;
    char *fname = ((SaveAsSaveToFileEvent *)event) -> filename;
    FILE *f = fopen (fname, "w");
    Bool ok = debugwin_save_to_file (f);

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, saveas_file_save_completed (ok ? 1 : 0, saveas, fname));

  ret:
    return TRUE;
}


static Bool saveas_fillbuffer
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId saveas = idblock->self_id;
    SaveAsFillBufferEvent *e = (SaveAsFillBufferEvent *) event;
    char *buff = e->address;
    int size = e->size;
    error * err = debugwin_save_to_buffer (&buff, &size);

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    if (!err)
    {
        EDG (ret, saveas_buffer_filled (0, saveas, (void *) buff, size));
    }
    else
    {
        static char buff[1];

        /*
         * It would be nice to back out of the transfer here, but the
         *  Toolbox protocol does not permit this.
         * So I display the error message and transfer nothing.
         */
        error_box (err);
        EDG (ret, saveas_buffer_filled (0, saveas, (void *) buff, 0));
    }

  ret:
    return TRUE;
}


static Bool saveas_savecompleted
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);
    IGNORE(idblock);

    debugwin_savecompleted ();

    return TRUE;
}


/*
 * Determine stuff about the screen mode
 */

static error * examine_mode ()
{
    /* read XEigFactor, YEigFactor */
    ER ( _swix (OS_ReadModeVariable, I0|I1|O2, -1,  4, &scalex) );
    ER ( _swix (OS_ReadModeVariable, I0|I1|O2, -1,  5, &scaley) );

    /* read XWindLimit, YWindLimit */
    ER ( _swix (OS_ReadModeVariable, I0|I1|O2, -1, 11, &screenx) );
    ER ( _swix (OS_ReadModeVariable, I0|I1|O2, -1, 12, &screeny) );

    screenx = (screenx + 1) << scalex;
    screeny = (screeny + 1) << scaley;

    scalex = 1 << scalex;
    scaley = 1 << scaley;

    return NULL;
}


static Bool mode_change_handler (WimpMessage *message, void *handle)
{
    IGNORE (message);
    IGNORE (handle);

    examine_mode ();
    return TRUE;
}


/*
 * Called to reset window bounds and scroll offsets when the line spacing
 *  changes.
 *
 * This code is not quite correct, but is good enough for all practical
 *  purposes ... (famous last words)
 */

static error * rearrange_window_for_new_linespace
(
    int oldlinespace,
    int newlinespace
)
{
    BBox box;
    WimpGetWindowStateBlock state;
    int w;
    int exacttop, exactbottom;   /* of the visible area in work coords */
    int exactheight;
    int scroll = 0;
    int minlinespace, maxlinespace;
    int topline;

    if (oldlinespace > newlinespace)
    {
        minlinespace = newlinespace;
        maxlinespace = oldlinespace;
    }
    else
    {
        minlinespace = oldlinespace;
        maxlinespace = newlinespace;
    }

    ER (window_get_wimp_handle (0, debugwin, &w));
    state.window_handle = w;
    ER (wimp_get_window_state (&state));
    ER (window_get_extent (0, debugwin, &box));

    /* work out work area coordinates of the visible area, and its height */
    exacttop = state.yscroll;
    exactbottom = state.visible_area.ymin -
                          (state.visible_area.ymax - state.yscroll);
    exactheight = (exacttop - exactbottom);

    topline = (-(exacttop - scaley))/oldlinespace;

    /* ensure that the extent is large enough to cope with any scrolling that
       we might wish to do */
    box.ymax = -(firstline * minlinespace) + scaley;
    box.ymin = -((lastline + 2) * maxlinespace);
    {
        int lineattop = (topline > firstline) ? topline : firstline;
        int top = -(lineattop * maxlinespace);

        if (box.ymin > top - exactheight)
            box.ymin = top - exactheight;
    }
    ER (window_set_extent (0, debugwin, &box));


    {
        int offset = -((lastline + 1) * oldlinespace) -
                                             exactbottom - oldlinespace/2;

        /* if the last line is currently near the bottom of the window,
           scroll so that the new last line will also be there */
        if (offset >= 0 && offset <= oldlinespace)
            scroll = lastline * (newlinespace - oldlinespace);
        else
        /* alternatively ensure line at top of window stays there */
            scroll = topline * (newlinespace - oldlinespace);
    }

    /* perform the scroll before resetting the extent */
    if (scroll != 0)
    {
        state.yscroll -= scroll;
        ER (wimp_open_window ((WimpOpenWindowBlock *) &state));
    }

    /* reset window's extent */
    box.ymax = -(firstline * newlinespace) + scaley;
    box.ymin = -((lastline + 2) * newlinespace);
    {
        int lineattop = (topline > firstline) ? topline : firstline;
        int top = -(lineattop * newlinespace) + scaley;

        if (box.ymin > top - exactheight)
            box.ymin = top - exactheight;
    }
    ER (window_set_extent (0, debugwin, &box));

    return NULL;
}


/*
 * Determine stuff about the desktop font in use
 */

static error * examine_font ()
{
    usesystemfont = TRUE;

    /* UseSysFont check added by Neil Bingham (Thu 31st July 1997). */
    if (strcmp(message_lookup("UseSysFont"), "No") == 0)
    {
      /* Config'd to use of Outline Font.  Otherwise System Font will be used. */
      if (wimpversion >= 350)
      {
          int fonthandle;

          if (_swix (Wimp_ReadSysInfo, I0|O0, 8, &fonthandle) == 0)
              usesystemfont = (fonthandle == 0);
      }
    }
    /* End of NB's changes */
    linespace = usesystemfont ? CHARY : LINEWIDTH;

    return NULL;
}


static Bool font_change_handler (WimpMessage *message, void *handle)
{
    int prevlinespace = linespace;

    IGNORE (message);
    IGNORE (handle);

    EDG (ret, examine_font ());
    if (!debugwinclosed)
    {
        EDG (ret,
             rearrange_window_for_new_linespace (prevlinespace, linespace));
    }

  ret:
    return TRUE;
}


static Bool close_event_for_debug_window
(
    int code,                 /* event code [Wimp_ERedrawWindow] */
    WimpPollBlock *event,     /* Wimp Poll block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    IGNORE(handle);
    IGNORE(idblock);
    IGNORE(code);

    EDG (ret,
         wimp_close_window (&event->close_window_request.window_handle));
    debugwinclosed = TRUE;

  ret:
    return TRUE;
}


static Bool redraw_event_for_debug_window
(
    int code,                 /* event code [Wimp_ERedrawWindow] */
    WimpPollBlock *event,     /* Wimp Poll block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    int w = event->redraw_window_request.window_handle;
    WimpRedrawWindowBlock blk;
    Bool more;

    IGNORE(handle);
    IGNORE(idblock);
    IGNORE(code);

    /* set colours for text */
    if (usesystemfont)
    {
        EDG (ret, _swix (Wimp_SetColour, I0, 7));   /* fg colour for plot */
    }
    else
    {
        EDG (ret, _swix (Wimp_TextOp, I0|I1|I2, 0, 0, 0xffffff00));
    }

    blk.window_handle = w;
    EDG (ret, wimp_redraw_window (&blk, &more));

    while (more)
    {
        EDG (ret, debugwin_redraw_rect (&blk));
        EDG (ret, wimp_get_rectangle (&blk, &more));
    }

  ret:
    return TRUE;
}


/*
 * Rearranges the debug window's extent and scroll bars to accommodate:
 *    nadd extra lines at the bottom
 *    nsub fewer lines at the top
 */

static error *rearrange_window (int nadd, int nsub)
{
    BBox box;
    WimpGetWindowStateBlock state;
    int w;
    int exacttop, exactbottom;   /* of the visible area in work coords */
    int exactheight;
    int scroll = 0;

    ER (window_get_wimp_handle (0, debugwin, &w));
    state.window_handle = w;
    ER (wimp_get_window_state (&state));
    ER (window_get_extent (0, debugwin, &box));

    /* work out work area coordinates of the visible area, and its height */
    exacttop = state.yscroll;
    exactbottom = state.visible_area.ymin -
                          (state.visible_area.ymax - state.yscroll);
    exactheight = (exacttop - exactbottom);

    /* ensure that the extent is large enough to cope with any scrolling that
       we might wish to do */
    box.ymax = -(firstline * linespace) + scaley;
    box.ymin = -((lastline + nadd + 2) * linespace);
    {
        int newtop = -((firstline + nsub) * linespace);

        if (box.ymin > newtop - exactheight)
            box.ymin = newtop - exactheight;
    }
    /* just in case user has scrolled below all lines */
    if (box.ymin > exactbottom)
        box.ymin = exactbottom;
    ER (window_set_extent (0, debugwin, &box));


    /* if the last line is currently near the bottom of the window, scroll so
       that the new last line will also be there */
/*
    {
        int offset = -((lastline + 1) * linespace) -
                                             exactbottom - linespace/2;

        if (offset >= 0 && offset <= linespace)
            scroll = nadd * linespace;
    }
*/
    {
        int curroffset = -((lastline + 1) * linespace) -
                                                 exactbottom - linespace/2;
        int newoffset = -((lastline + nadd + 1) * linespace) -
                                                 exactbottom - linespace/2;

        if (curroffset >= 0 && newoffset < 0)
            scroll = nadd * linespace;
    }

    /* if the new position of the first line is wholly within the window,
       scroll so that it is at the top */
    {
        int offset = exacttop - scroll + ((firstline + nsub) * linespace);

        if (offset > 0)
            scroll += offset - scaley;
    }

    /* perform the scroll before resetting the extent */
    if (scroll != 0)
    {
        state.yscroll -= scroll;
        ER (wimp_open_window ((WimpOpenWindowBlock *) &state));
    }

    /* invalidate areas altered */
    {
        BBox invalid;

        invalid.xmin = box.xmin;
        invalid.xmax = box.xmax;

        if (nadd != 0)
        {
            invalid.ymax = -((lastline + 1) * linespace) + scaley;
            invalid.ymin = invalid.ymax - (nadd * linespace);

            ER (window_force_redraw (0, debugwin, &invalid));
        }
    }

    /* update variables describing extent of window in lines */
    lastline += nadd;
    firstline += nsub;

    /* reset window's extent */

    box.ymax = -(firstline * linespace) + scaley;
    box.ymin = -((lastline + 2) * linespace);
    if (box.ymax - box.ymin < exactheight)
        box.ymin = box.ymax - exactheight;
    /* just in case user has scrolled below all lines */
    if (box.ymin > exactbottom)
        box.ymin = exactbottom;
    ER (window_set_extent (0, debugwin, &box));

    return NULL;
}


static Bool get_debug_info
(
    int code,                 /* event code [Wimp_EPollWordNonZero] */
    WimpPollBlock *event,     /* Wimp Poll block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    char s[256];
    Bool more = TRUE;
    int oldfirstline = firstline;
    int oldlastline = lastline;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);
    IGNORE(idblock);

    while (more)
    {
        EDG (ret, _swix (DebugIt_GetString, I0|I1|O0, 0, s, &more));
        if (more)
            debugwin_append_message (s, more - 1);
    }

    if (!debugwinclosed)
    {
        int nadd = lastline - oldlastline;
        int nsub = firstline - oldfirstline;

        lastline = oldlastline;
        firstline = oldfirstline;

        EDG (ret, rearrange_window (nadd, nsub));
    }

    *pollword = 0;

  ret:
    return TRUE;
}


static Bool toggle_pause
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId menu = idblock->self_id;
    ComponentId item = idblock->self_component;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    paused = !paused;

    EDG (ret, menu_set_tick (0, menu, item, paused));

    /* toggle "pollword" events bit */
    {
        unsigned int mask;

        EDG (ret, event_get_mask (&mask));
        if (paused)
            mask &= ~Wimp_Poll_PollWord;
        else
            mask |= Wimp_Poll_PollWord;
        EDG (ret, event_set_mask (mask));
    }

  ret:
    return TRUE;
}


static Bool fillin_my_buff_size   /* fill in dbox field for my buffer size */
(
    int code,                 /* event code */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId dbox = idblock->self_id;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, numberrange_set_value (0, dbox, ID_MyBuffSize,
                                              queuebuffsize / 1024));

  ret:
    return TRUE;
}


static Bool set_my_buff_size   /* resets this app's buffer size */
(
    int code,                 /* event code */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId dbox = idblock->self_id;
    int buffsize;
    error *err;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, numberrange_get_value (0, dbox, ID_MyBuffSize, &buffsize));
    buffsize *= 1024;

    /* ensure sensible minimum size */
    if (buffsize < MIN_BUFF_SIZE)
        buffsize = MIN_BUFF_SIZE;

    /* first, clear the window */
    if (!debugwinclosed)
    {
        EDG (ret, rearrange_window (0, lastline - firstline + 1));
    }
    else
        firstline = lastline + 1;

    /* now free the queue */
    debugwin_free_queue ();

    /* allocate a new one */
    err = debugwin_alloc_queue (buffsize);
    if (err)
    {
        error_box (err);

        /* try to reinstate old queue */
        debugwin_alloc_queue (queuebuffsize);
        debugwin_init_queue ();

        return TRUE;
    }

    /* note new size */
    queuebuffsize = buffsize;

    /* and initialise it */
    debugwin_init_queue ();

  ret:
    return TRUE;
}


static Bool fillin_buff_size   /* fill in dbox field for DebugIt buffer */
(
    int code,                 /* event code */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId dbox = idblock->self_id;
    int buffsize;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, _swix (DebugIt_GetBufferSize, I0|O0, 0, &buffsize));
    EDG (ret, numberrange_set_value (0, dbox, ID_BuffSize,
                                              buffsize / 1024));

  ret:
    return TRUE;
}


static Bool set_buff_size   /* resets DebugIt module's buffer size */
(
    int code,                 /* event code */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId dbox = idblock->self_id;
    int buffsize;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    EDG (ret, numberrange_get_value (0, dbox, ID_BuffSize, &buffsize));
    buffsize *= 1024;

    EDG (ret, _swix (DebugIt_ResetBufferSize, I0|I1, 0, buffsize));

  ret:
    return TRUE;
}


static Bool toggle_ignore_empties
(
    int code,                 /* event code */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId menu = idblock->self_id;
    ComponentId item = idblock->self_component;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    ignoreempties = !ignoreempties;

    EDG (ret, menu_set_tick (0, menu, item, ignoreempties));

  ret:
    return TRUE;
}


static Bool toggle_line_numbering
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    ObjectId menu = idblock->self_id;
    ComponentId item = idblock->self_component;

    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    numberlines = !numberlines;

    EDG (ret, menu_set_tick (0, menu, item, numberlines));

    /* force redraw - entire window contents are now invalid */
    {
        BBox box;
        WimpGetWindowStateBlock state;
        int w;

        EDG (ret, window_get_wimp_handle (0, debugwin, &w));
        state.window_handle = w;
        EDG (ret, wimp_get_window_state (&state));
        box.ymax = state.yscroll;
        box.ymin = state.visible_area.ymin -
                      (state.visible_area.ymax - state.yscroll);
        box.xmin = state.xscroll;
        box.xmax = state.visible_area.xmax -
                      (state.visible_area.xmin - state.xscroll);
        EDG (ret, window_force_redraw (0, debugwin, &box));
    }

  ret:
    return TRUE;
}


static Bool clear_debug_window
(
    int code,                 /* event code [Event_Clear] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);
    IGNORE(idblock);

    if (!debugwinclosed)
    {
        EDG (ret, rearrange_window (0, lastline - firstline + 1));
    }
    else
        firstline = lastline + 1;

    debugwin_init_queue ();

  ret:
    return TRUE;
}


/*
 * Arranges the debug window's extent and scroll bars so that:
 *  - the lastline is "near" the bottom
 *  - or (if that would make the firstline below the top of the window) put
 *     the firstline at the top of the window
 */

static error *arrange_window (void)
{
    BBox box;
    WimpGetWindowStateBlock state;
    int w;
    int oldtop, oldbottom;   /* of the visible area in work coords */
    int newtop, newbottom;
    int height;
    int scroll = 0;

    ER (window_get_wimp_handle (0, debugwin, &w));
    state.window_handle = w;
    ER (wimp_get_window_state (&state));
    ER (window_get_extent (0, debugwin, &box));

    /* work out work area coordinates of the visible area, and its height */
    oldtop = state.yscroll;
    oldbottom = state.visible_area.ymin -
                          (state.visible_area.ymax - state.yscroll);

    height = (oldtop - oldbottom);

    /* work out work area coordinates where the visible area should be */

    /* first, try to place the lastline near the bottom of the window */
    newbottom = -(lastline + 2) * linespace;
    newtop = newbottom + height;

    /* next, ensure that firstline is not below the top of the window */
    if (newtop + (firstline * linespace) > 0)
    {
        newtop = -firstline * linespace + scaley;
        newbottom = newtop - height;
    }

    /* determine scroll distance required */
    scroll = oldtop - newtop;

    /* ensure that the extent is large enough to cope with scrolling */
    if (box.ymax < newtop)
        box.ymax = newtop;
    if (box.ymin > newbottom)
        box.ymin = newbottom;
    ER (window_set_extent (0, debugwin, &box));

    /* open the window on top of the stack and scroll */
    state.yscroll -= scroll;
    state.behind = -1;
    ER (wimp_open_window ((WimpOpenWindowBlock *) &state));

    /* reset window's extent */
    box.ymax = -(firstline * linespace) + scaley;
    box.ymin = -((lastline + 2) * linespace);
    if (box.ymax - box.ymin < height)
        box.ymin = box.ymax - height;
    ER (window_set_extent (0, debugwin, &box));

    return NULL;
}


static Bool open_debug_window
(
    int code,                 /* event code [Event_IconClick] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);
    IGNORE(idblock);

    if (debugwinclosed)
    {
        EDG (ret, arrange_window ());
        debugwinclosed = FALSE;
    }
    else
    {
        EDG (ret, toolbox_show_object (0, debugwin, 0, NULL, 0, -1));
    }

  ret:
    return TRUE;
}


static Bool toolbox_error
(
    int code,
    ToolboxEvent *event,
    IdBlock *idblock,
    void  *handle
)
{
    ToolboxErrorEvent *t = (ToolboxErrorEvent *) event;
    error e;

    IGNORE(code);
    IGNORE(handle);
    IGNORE(idblock);

    e.errnum = t->errnum;
    strcpy (e.errmess, t->errmess);

    error_box (&e);

    return TRUE;
}


static Bool proginfo_show
(
    int code,                 /* event code [ProgInfo_AboutToBeShown] */
    ToolboxEvent *event,      /* Toolbox event block */
    IdBlock *idblock,         /* Toolbox Id block */
    void  *handle             /* user handle [0] */
)
{
    IGNORE(handle);
    IGNORE(event);
    IGNORE(code);

    proginfo_set_version
    (
        0,                          /* flags */
        idblock->self_id,           /* object ID */
        message_lookup("Version")     /* version string */
    );

    return TRUE;
}


static Bool tbquit_handler
(
    int code,
    ToolboxEvent *event,
    IdBlock *idblock,
    void  *handle
)
{
    IGNORE(event);
    IGNORE(code);
    IGNORE(handle);
    IGNORE(idblock);

    quit = TRUE;
    return TRUE;
}


static Bool quit_handler (WimpMessage *message, void *handle)
{
    IGNORE (message);
    IGNORE (handle);

    quit = TRUE;
    return TRUE;
}


/*
 * Initialise the task (we use toolbox_initialise instead of wimp_initialise)
 * and register any events handlers.
 */

static error * app_init (void)
{
    /* determine screen parameters - updated after mode change, also */
    examine_mode ();

    /* initialise as a toolbox task */
    ER ( toolbox_initialise
         (
          /* IN */
             0,              /* flags */
             310,            /* earliest permissible WIMP version */
             messages,       /* list of interesting messages */
             tbcodes,        /* list of interesting Toolbox event codes */
             APPDIR,         /* name of directory containing resources */
             &mbl,           /* for the Messages file descriptor */
             &idblk,         /* address of toolbox id block */
          /* OUT */
             &wimpversion,   /* current Wimp version */
             &taskhandle,    /* task handle */
             NULL            /* sprite area */
         ) );

    /* determine whether to use system font in the window or not */
    examine_font ();

    /* allocate and initialise buffer for message queue */
    ER ( debugwin_alloc_queue (queuebuffsize));
    debugwin_init_queue ();

    /* initialise event lib */
    ER ( event_initialise (&idblk) );

    /* Register handler for toolbox error events */
    ER ( event_register_toolbox_handler
         (
             -1,
             Toolbox_Error,
             toolbox_error,
             NULL
         ) );

    /* register message and event handlers for iconbar actions */

    /* "Quit" message from Wimp */
    ER ( event_register_message_handler
         (
             Wimp_MQuit,     /* the Wimp Message */
             quit_handler,   /* the handler function for it */
             NULL            /* and a handle */
         ) );

    /* "Font Change" message from Wimp */
    if (wimpversion >= 350)
    {
        ER ( event_register_message_handler
             (
                 Wimp_MFontChanged,
                 font_change_handler,
                 NULL
             ) );
    }

    /* "Mode Change" message from Wimp */
    ER ( event_register_message_handler
         (
             Wimp_MModeChange,
             mode_change_handler,
             NULL
         ) );

    /* User chooses "Quit" entry from iconbar menu */
    ER ( event_register_toolbox_handler
         (
             -1,             /* for all objects */
             Event_Quit,     /* toolbox event code */
             tbquit_handler, /* the handler function for it */
             NULL            /* and a handle */
         ) );

    /* User chooses "Buffer size" entry from iconbar menu */
    ER ( event_register_toolbox_handler
         (
             -1,             /* for all objects */
             Event_BuffSize, /* toolbox event code */
             set_buff_size,  /* the handler function for it */
             NULL            /* and a handle */
         ) );

    /* "Buffer size" dbox about to be shown */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_SetBuffSize,
             fillin_buff_size,
             NULL
         ) );

    /* "ProgInfo" object is about to be shown */
    ER ( event_register_toolbox_handler
         (
             -1,
             ProgInfo_AboutToBeShown,
             proginfo_show,
             NULL
         ) );

    /* User SEL-clicks on application icon */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_IconClick,
             open_debug_window,
             NULL
         ) );

    /* User chooses "Clear" from main window menu */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_Clear,
             clear_debug_window,
             NULL
         ) );

    /* User chooses "Pause" from main window menu */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_Pause,
             toggle_pause,
             NULL
         ) );

    /* User chooses "Number lines" from main window menu */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_Lines,
             toggle_line_numbering,
             NULL
         ) );

    /* User chooses "Ignore empty lines" from main window menu */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_IgnoreEmpties,
             toggle_ignore_empties,
             NULL
         ) );

    /* User chooses "Buffer size" entry from main window menu */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_MyBuffSize,
             set_my_buff_size,
             NULL
         ) );

    /* "Buffer size" dbox about to be shown */
    ER ( event_register_toolbox_handler
         (
             -1,
             Event_SetMyBuffSize,
             fillin_my_buff_size,
             NULL
         ) );

    /* Various "Saveas" events */

    ER ( event_register_toolbox_handler
         (
             -1,
             SaveAs_AboutToBeShown,
             saveas_abouttobeshown,
             NULL
         ) );
    ER ( event_register_toolbox_handler
         (
             -1,
             SaveAs_SaveToFile,
             saveas_savetofile,
             NULL
         ) );
    ER ( event_register_toolbox_handler
         (
             -1,
             SaveAs_FillBuffer,
             saveas_fillbuffer,
             NULL
         ) );
    ER ( event_register_toolbox_handler
         (
             -1,
             SaveAs_SaveCompleted,
             saveas_savecompleted,
             NULL
         ) );

    /* register with DebugIt module */
    EE ( _swix (DebugIt_Register, I0|I1|O1, 0, taskhandle, &pollword) );

    /* pollword non-zero => data available in DebugIt module */
    ER ( event_register_wimp_handler
         (
             -1,
             Wimp_EPollWordNonZero,
             get_debug_info,
             NULL
         ) );

    /* create main window to display text retrieved from DebugIt module */
    ER ( toolbox_create_object (0, "DebugWin", &debugwin) );
    debugwinclosed = TRUE;

    /* redraw request for main window */
    ER ( event_register_wimp_handler
         (
             debugwin,
             Wimp_ERedrawWindow,
             redraw_event_for_debug_window,
             NULL
         ) );

    /* close request for main window */
    ER ( event_register_wimp_handler
         (
             debugwin,
             Wimp_ECloseWindow,
             close_event_for_debug_window,
             NULL
         ) );

    return NULL;
}


int main (int argc, char *argv[])
{
    int code;

    IGNORE(argc);
    IGNORE(argv);

    /* set up debug output if DEBUG is set */
    debug_file(APPDIR".logfile");

    EE ( app_init() );

    /* disable NULL events and KeyPress events */
    event_set_mask (Wimp_Poll_NullMask |
                    Wimp_Poll_KeyPressedMask |
                    Wimp_Poll_PollWord);

    while (!quit)
       ED ( event_poll
            (
                &code,              /* event code */
                &pblock,            /* Wimp poll block */
                pollword    /* address of poll word */
            ) );

    /* de-register with DebugIt module */
    EE ( _swix (DebugIt_DeRegister, I0|I1, 0, taskhandle) );

    /* free queue buffer */
    debugwin_free_queue ();

    exit (0);
}
