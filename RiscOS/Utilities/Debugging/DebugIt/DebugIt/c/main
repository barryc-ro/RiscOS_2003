/* main.c for DebugIt module */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "tboxlibs/Toolbox.h"

#include "Main.h"

/* A Boolean type is useful */

typedef int Bool;

/* relative numbers for SWIs supported by this module */

#define Register         0
#define DeRegister       1
#define WriteC           2
#define GetString        3
#define ResetBufferSize  4
#define GetBufferSize    5


/* error number base for this module */

#define  Error_Base  0x80e800


#define alt_poll_word 0x1   /* flag bit for DebugIt_Register */

static int poll_word;       /* poll word supplied to client upon request */
static int *pwp;            /* a pointer to the pollword to use          */
static int bit_to_set;      /* bit to set in the poll word */
 /*
  *   to set the pollword:       pwp = pwp | bit_to_set
  *   to clear the pollword:     pwp = pwp & ~bit_to_set
  */

static int task;            /* task handle of client - 0 if none */

static _kernel_oserror our_error;     /* our private error space */


static char dbuffer[256];
static int index;
 /*
  * Characters are stored temporarily in dbuffer as they are supplied by
  *  calls of DebugIt_WriteC. The current string is stored in:
  *          dbuffer[0] ... dbuffer[index-1]
  */


#define  QUEUE_BUFFER_SIZE 32*1024
#define  MIN_BUFFER_SIZE    1*1024

static int buffer_size = QUEUE_BUFFER_SIZE;

static char *head, *tail;
static char *buffstart, *buffend;
  /*
   * Debug messages are stored in a buffer:
   *   buffstart addresses the first byte of the buffer
   *   buffend addresses the byte beyond the last byte in the buffer
   *
   * The buffer is treated as circular:
   *   head addresses the first string (if any) in the buffer
   *   tail addresses the byte beyond the last string (if any) in the buffer
   *
   * When the buffer is empty - or exactly full - head == tail.
   *
   * We ensure that:
   *       buffstart <= head, tail < buffend
   */

static int buffspare;
  /*
   * This is equal to the number of unused bytes in the buffer less the size
   *  of the overflowstring*; so provided this value >= 0, there is always
   *  enough space to append the overflowstring*.  [* incl. terminator]
   *
   * The queue is empty iff:
   *     buffspare > 0  &&  head == tail
   */

static Bool justoverflowed;
  /*
   * TRUE when the immediately preceding debugging string was lost; under
   *  these circumstances, the overflowstring will have been stored instead.
   *
   * We ensure that:
   *        justoverflowed  =>  buffspare >= -(overflowspace+1)
   *    NOT justoverflowed  =>  buffspare >= 0
   */

static char *overflowstring = "*** ETC ***";
static int overflowspace;    /* initialised to strlen (overflowstring) */



/*
 * Space for the queue is allocated.
 */

static _kernel_oserror *alloc_queue (void)
{
    buffstart = malloc (buffer_size);
    if (buffstart == NULL)
    {
        our_error.errnum = Error_Base + 0;
        strcpy (our_error.errmess, "No room for queue buffer");
        return &our_error;
    }
    buffend = buffstart + buffer_size;

    return NULL;
}


/*
 * Space occupied by the queue is released.
 */

static void free_queue (void)
{
    free (buffstart);
    buffstart = NULL;

    return;
}


/*
 * Pointers and status variables are set to indicate a fresh, empty queue.
 */

static void init_queue (void)
{
    head = tail = buffstart;
    buffspare = buffer_size - (overflowspace + 1);
    justoverflowed = FALSE;

    return;
}


/*
 * On entry, n = strlen (s),   0 <= n <= 255.
 * If there is sufficient space, s is copied to the end of the queue.
 * If not, the overflowstring is appended instead - unless it is already
 *  the last item in the queue.
 */

static void add_to_queue (char *s, int n)
{
    if (buffspare < n + 1)
    {
        if (justoverflowed)
            return;

        s = overflowstring;
        n = overflowspace;
        justoverflowed = TRUE;
    }
    else
        justoverflowed = FALSE;

    *tail = n;
    if (buffend - tail > n + 1)
    {
        memcpy (tail + 1, s, n);
        tail += n + 1;
    }
    else
    {
        int n1 = (buffend - tail) - 1;
        int n2 = n - n1;

        memcpy (tail + 1, s, n1);
        memcpy (buffstart, s + n1, n2);
        tail = buffstart + n2;
    }
    buffspare -= n + 1;

    return;
}


/*
 * On entry, s addresses a buffer of 256 characters.
 * If the queue is empty, the result is -1.
 * If not, the string at the head of the queue is removed from the queue and
 *  copied to s; the result is strlen (s).
 */

static int take_from_queue (char *s)
{
    int n;

    if (head == tail && buffspare > 0)
        return -1;

    n = *head;
    if (buffend - head > n + 1)
    {
        memcpy (s, head + 1, n);
        head += n + 1;
    }
    else
    {
        int n1 = (buffend - head) - 1;
        int n2 = n - n1;

        memcpy (s, head + 1, n1);
        memcpy (s + n1, buffstart, n2);
        head = buffstart + n2;
    }
    s[n] = 0;
    buffspare += n + 1;

    return n;
}


static void finalisation ()
{
    free_queue ();

    return;
}


_kernel_oserror *debugit__module_init
(
    char *cmd_tail,
    int podule_Buffer,
    void *private_word
)
{
    IGNORE(private_word);
    IGNORE(podule_Buffer);
    IGNORE(cmd_tail);

    index = 0;      /* current buffer is empty, too */
    task = 0;       /* no client has registered yet */

    buffstart = NULL;      /* no queue buffer allocated yet */
    overflowspace = strlen (overflowstring);

    atexit (finalisation);   /* just in case ... */

    return NULL;
}


_kernel_oserror *debugit__service
(
    int ServiceNumber,
    _kernel_swi_regs *r,
    void *private_word
)
{
    IGNORE(private_word);

    /*  0x53 => Service_WimpCloseDown, with r2 = handle of dying task */
    if (ServiceNumber == 0x53 && r->r[2] == task)
    {
        free_queue ();
        task = 0;  /* deregister dying task */
    }

    return NULL;
}


_kernel_oserror *debugit__swi
(
    int swi_no,
    _kernel_swi_regs *r,
    void *pw
)
{
    IGNORE(pw);

    switch (swi_no)
    {

    case Register:
        if (task == 0)
        {
            _kernel_oserror *err = alloc_queue ();
              /* set up an empty queue */

            if (err)
                return err;

            init_queue ();
            index = 0;

            task = r->r[1];
            if (r->r[0] & alt_poll_word)
            {
                /* we have been asked to use a client specified poll word */
                bit_to_set = r->r[3];
                pwp = (int *) r->r[2];
            }
            else
            {
                bit_to_set = 0x1;
                pwp  = &poll_word;
                *pwp = 0;
                r->r[1] = (int) &poll_word;
            }
        }
        else
        {
            our_error.errnum = Error_Base + 1;
            strcpy (our_error.errmess,
                    "Client already registered");
            return &our_error;
        }
        break;

    case DeRegister:
        if (r->r[1] == task)
        {
            free_queue ();
            task = 0;
        }
        else
        {
            our_error.errnum = Error_Base + 2;
            strcpy (our_error.errmess,
                    "Attempt to de-register unknown client");
            return &our_error;
        }
        break;

    case ResetBufferSize:
        {
            int oldsize = buffer_size;
            int newsize = r->r[1];
            _kernel_oserror *err;

            /* force a minimum buffer size */
            if (newsize < MIN_BUFFER_SIZE)
                newsize = MIN_BUFFER_SIZE;

            /* free space occupied by current queue buffer */
            free_queue ();

            /* allocate space for new buffer */
            buffer_size = newsize;
            err = alloc_queue ();

            /* if there wasn't enough space, try old size again */
            if (err)
            {
                buffer_size = oldsize;
                alloc_queue ();
                init_queue ();
                index = 0;
                return err;
            }

            /* initialise */
            init_queue ();
            index = 0;
        }
        break;

    case GetBufferSize:
        r->r[0] = buffer_size;
        break;

    case WriteC:
        if (task == 0)
        {
            /* transparent debugging */
            return NULL;
        }

        if (r->r[0] >= 32 && index < 255 && r->r[0] < 256)
        {
            /* we must have an ordinary character so buffer it */
            dbuffer[index] = r->r[0];
            index++;
            return NULL;
        }

        /* we either have a control char or our buffer is full or both */
        dbuffer[index] = '\0';
        add_to_queue (dbuffer, index);
        index = 0;
        if (r->r[0] >= 32 && r->r[0] < 256)
        {
            dbuffer[index] = r->r[0];
            index++;
        }

        /* set poll word to non zero and return */
        *pwp = *pwp | bit_to_set;
        break;

    case GetString:
        if (task == 0)
        {
            our_error.errnum = Error_Base + 3;
            strcpy (our_error.errmess,
                    "No client is registered");
            return &our_error;
        }

        {
            int n = take_from_queue ((char *) r->r[1]);

            r->r[0] = n + 1;
        }
        break;
    }

    return NULL;
}
