                            DebugIt 
                            -------


History

  0.01  19-Sep-94  Matt Cloke's last version
  0.02  14-Jul-95  Small revisions by MFC
  0.03  18-Jul-95  Removed ability to register a call-back function, since
                    this is not implemented
  0.04  25-Oct-95  Removed section on C veneers, since these are no longer
                    supplied as part of this package
                   Add details of SWI numbers and errors
  0.05  07-Dec-95  New SWI DebugIt_ResetBufferSize
  0.06  08-Dec-95  New SWI DebugIt_GetBufferSize
                   Description of !ListDebug updated


Contents

         1  Introduction
         2  DebugItModule
             2.1  DebugIt_Register
             2.2  DebugIt_DeRegister
             2.3  DebugIt_WriteC
             2.4  DebugIt_GetString
             2.5  DebugIt_ResetBufferSize
             2.6  DebugIt_GetBufferSize
         3  !ListDebug   
         4  Future enhancements
             4.1  "Call-back" registration
             4.2  Better checking
             4.3  Operation under interrupt


1  Introduction  
---------------

DebugIt provides a means of debugging when tools such as HostFS or tube
debugging are unavailable. The way in which DebugIt works limits its use to
debugging applications and some modules.

DebugIt consists of two components:
 
    DebugIt       - a module that has a 'HostFS' interface
 
    !ListDebug    - an application that interacts with DebugIt (and within
                    this text will be referred to as the client of the
                    DebugIt module) to display the debugging data
                
                
2  DebugIt  
----------

This module implements a set of SWIs as follows; there are no *-commands.

2.1  DebugIt_Register   (&4ba80)
---------------------
  
  On Entry:
           r0 = flags
           r1 = task handle (as returned by Wimp_Initialise)
           
       If bit 0 of r0 is set then:
           
           r2 = pointer to a poll word that DebugIt should use
           r3 = the bit that has to be set within the poll word in the form
                  of a mask:  poll word |= r3
  On Exit:
           r0 = preserved
           r1 = address that the calling application should use as its poll
                  word if bit 0 of r0 was not set, otherwise preserved
              
  Notes:

    This SWI is called by an application that wishes to display debugging
    information that has been produced by other applications/modules. It
    should be called only once: an error is returned if another application
    is registered.

    Calls to DebugIt_WriteC are ignored unless an application has registered;
    this makes it safe to run an application that generates debugging data
    even when no client is running to display it.

    DebugIt looks at Service Call &53 (Service_WimpCloseDown) and
    automatically deregisters a task that dies, but it is, of course, good
    practice to deregister explicitly.

    The contents of r1 are not verified, so a non-Wimp task may interact with    the DebugIt module.

  Errors:


2.2  DebugIt_DeRegister   (&4ba81)
-----------------------
  
  On Entry:
           r0 = flags
           r1 = task handle
           
  On Exit:
           r0 - r1 preserved
           
  Notes:

    This SWI de-registers a task from the DebugIt module.

  Errors:


2.3  DebugIt_WriteC   (&4ba82)
-------------------
  
  On Entry:
           r0 = character
           
  On Exit:
           r0 preserved
           
  Notes:

    This SWI is used to generate debugging information. The DebugIt module
    buffers characters until either a control character is received, or the
    buffer is full.

    Any control character is replaced by a zero terminator, and the resultant
    string is added to a queue; the poll word is then updated to be non-zero.

    The buffer is 256 characters long including the zero terminator, and so
    long sequences of characters which do not include control characters will
    be split up into 255-byte strings.

  Errors:


2.4  DebugIt_GetString   (&4ba83)
----------------------
  
  On Entry:
           r0 = flags
           r1 = pointer to a 256 byte block
           
  On Exit:
           r0 = number of characters copied including the terminator
           
  Notes:

    This SWI is used by a client of DebugIt to get at the buffered debugging
    information. The string at the head of the queue is copied to the buffer
    pointed to by r1 and then removed from the queue.
    
    Zero is returned in r0 if there are no more strings in the queue.

  Errors:


2.5  DebugIt_ResetBufferSize   (&4ba84)
----------------------------

  On Entry:
           r0 = flags
           r1 = buffer size (0 => use minimum size)

  Notes:

    This call frees the existing buffer, and allocates a new one of the
    given size. The module is reset, and any buffered information is lost.


2.5  DebugIt_GetBufferSize   (&4ba84)
--------------------------

  On Entry:
           r0 = flags

  On Exit:
           r0 = buffer size

 
3  !ListDebug 
-------------

The DebugIt module provides a means for debugging information to be queued in
RMA ready for client programs to access and display it. !ListDebug is an
example client application.


At startup, !ListDebug places an icon on the icon bar.

A SELECT click on its icon opens the debug display window. All debugging
information written to the DebugIt module is displayed in this window.
 
A MENU click on its icon displays the following menu:

        ----------------
       |    ListDebug   |
        ---------------- 
       | Info        -> |   leads to a standard ProgInfo dialogue box
       | Buffer size -> |   see below
       | Quit           |   quits the application
        ----------------

The "Buffer size ->" entry leads to a dialogue box which may be used to set
the size of the buffer used by DebugIt for buffering debugging information.

When the dialogue box is first displayed, the value shown is the current
buffer size; updating this value and clicking "Set" will set a new buffer
size.

This may be required when debugging a module or application which generates
a large amount of debugging information between calls to Wimp_Poll: if you
see the message "*** ETC ***" in the output window, then debugging
information has been lost for this reason, and you should increase DebugIt's
buffer size.


The debug display window has the following menu:

     -----------------------
    |         Debug         |
     -----------------------
    | Save               -> |  leads to standard Save dialogue box
    | Clear                 |  clears window
    | Pause                 |  when ticked, no lines are fetched from DebugIt
    | Ignore empty lines    |  when ticked, empty lines are ignored
    | Number lines          |  when ticked, each line is numbered
    | Buffer size        -> |  see below
     -----------------------

The Save dialogue allows you to save the entire contents of the debug display
window as a text file.

The "Buffer size ->" entry leads to a dialogue box which may be used to set
the size of the buffer used for the debug display window.

When the dialogue box is first displayed, the value shown is the current
buffer size; updating this value and clicking "Set" will set a new buffer
size.

This buffer is used cyclically, so that when it is full, new information
fetched from the DebugIt module displaces old lines at the head of the
window. You may need to increase the buffer size if it is not large enough to
contain all of the information that you require at any one time.


4  Future enhancements
----------------------

4.1  "Call-back" registration
-----------------------------

Add the following option to DebugIt_Register:

   If bit 1 of r0 is set then:
       
       r2 = address of function to call
       r3 = address of private word to be passed in R12

4.2  Better checking
--------------------

DebugIt SWIs should check that the caller is the registered client before
returning information.

4.3  Operation under interrupt
------------------------------

The module should be made "safe" with respect to interrupts, so that it can
be called from an interrupt routine.
