/*******************************************************************
 * File:     area
 * Purpose:  Defines what an 'area' of memory is
 * Author:   Justin Fletcher
 * Date:     10 Oct 1999
 ******************************************************************/

#ifndef AREA_H
#define AREA_H

/* Area flags */
#define AF_UNINTERESTING (1) /* Area should only be displayed iff referenced */
#define AF_ENTITIES      (2) /* Area may have entities in it */

typedef unsigned int addr;

typedef struct area_s area_t;

typedef void (*describe_f)(area_t *parent,int private_data);

struct area_s {
  area_t *next;     /* Points to the next entry after this area */
  char *name;
  int  flags;
  addr start;
  addr length;
  area_t *children; /* Points to the children of this area */

  /* Now the generators */
  describe_f  describe;
  int         describe_private;
};

/*********************************************** <c> Gerph *********
 Function:     area_add
 Description:  An an area to a pool
 Parameters:   parent-> the parent to add to, or NULL for root
               start = start address
               length = length of area
               describe-> routine to describe the things within it
               descprivate_data = private_data value for describer
               flags = flags for this area
               name-> the name of the area
 Returns:      pointer to the entry created
 ******************************************************************/
area_t *area_add(area_t *parent,addr start,addr length,
                describe_f describe,int descprivate_data,int flags,
                char *name);

/*********************************************** <c> Gerph *********
 Function:     areas_dump
 Description:  Print out all the areas within an area
 Parameters:   area-> the area to list, or NULL for root
               indent = number of characters as indent
 Returns:      none
 ******************************************************************/
void areas_dump(area_t *parent,int indent);

/*********************************************** <c> Gerph *********
 Function:     areas_init
 Description:  setup the top level areas
 Parameters:   none
 Returns:      none
 ******************************************************************/
void areas_init(void);

/*********************************************** <c> Gerph *********
 Function:     areas_findinarea
 Description:  Find an address in a particular area
 Parameters:   area-> the area to search (or NULL if not found)
               find = address to find
 Returns:      pointer to area, or NULL if not found
 ******************************************************************/
area_t *areas_findinarea(area_t *area,addr find);

/*********************************************** <c> Gerph *********
 Function:     areas_find
 Description:  Find a particular address
 Parameters:   find = the address to find
 Returns:      none
 ******************************************************************/
void areas_find(addr find);

#endif
