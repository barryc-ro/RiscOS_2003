/*******************************************************************
 * File:     entity
 * Purpose:  Control over address entry points
 * Author:   Justin Fletcher
 * Date:     13 Oct 1999
 ******************************************************************/

#ifndef ENTITY_H
#define ENTITY_H

#include "area.h"

typedef struct entity_t entity_t;

struct entity_t {
  struct entity_t *next;
  char *name;
  addr address;
};

typedef struct entitygroup_t entitygroup_t;

struct entitygroup_t {
  struct entitygroup_t *next;
  struct entitygroup_t *children;
  struct entity_t *entities;
  char *eclass;
};

/*********************************************** <c> Gerph *********
 Function:     entity_addgroup
 Description:  Add a new grouping
 Parameters:   group-> the group to add to, or NULL to add to root
               name-> the name of the group
 Returns:      pointer to the group, or NULL if failed
 ******************************************************************/
entitygroup_t *entity_addgroup(entitygroup_t *group,char *name);

/*********************************************** <c> Gerph *********
 Function:     entity_addaddr
 Description:  Add an address to a grouping
 Parameters:   group-> the group to add the address to
               at = address to add
               name-> the name to assign it
 Returns:      none
 ******************************************************************/
void entity_addaddr(entitygroup_t *group,addr at,char *name);

/*********************************************** <c> Gerph *********
 Function:     entity_init
 Description:  Initialise the entity handling system
 Parameters:   none
 Returns:      none
 ******************************************************************/
void entity_init(void);

/*********************************************** <c> Gerph *********
 Function:     entity_within
 Description:  Find entities within a range and display them
 Parameters:   group-> the group to scan
               low = low point
               high = high point
               indent = amount to indent by (or -1 to just check)
 Returns:      0 if none found, 1 otherwise
 ******************************************************************/
int entity_within(entitygroup_t *group,addr low,addr high,int indent);

/*********************************************** <c> Gerph *********
 Function:     entity_dump
 Description:  Display all entities in a group
 Parameters:   group-> the group to dump
               indent = indent to use
 Returns:      none
 ******************************************************************/
void entity_dump(entitygroup_t *group,int indent);

#endif
