/*******************************************************************
 * File:     area
 * Purpose:  Describe areas
 * Author:   Justin Fletcher
 * Date:     10 Oct 1999
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "strutils.h"
#include "area.h"
#include "zeropage.h"
#include "da.h"
#include "rma.h"
#include "entity.h"

/* Define this to debug describe functions a little */
/* #define DEBUG_DESCRIBE */

area_t *areas=NULL;

/*********************************************** <c> Gerph *********
 Function:     area_add
 Description:  An an area to a pool
 Parameters:   parent-> the parent to add to, or NULL for root
               start = start address
               length = length of area
               describe-> routine to describe the things within it
               descprivate = private value for describer
               flags = flags for this area
               name-> the name of the area
 Returns:      pointer to the entry created
 ******************************************************************/
area_t *area_add(area_t *parent,addr start,addr length,
                describe_f describe,int descprivate,int flags,
                char *name)
{
  area_t *newp;
  area_t *last;
  area_t *next,*thisp;
  addr end=start+length;

  if (parent!=NULL)
  {
    if (start < parent->start)
    {
      printf("Area %s has start prior to parent %s\n",name,parent->name);
      exit(1);
    }
    if (end > parent->start+parent->length)
    {
      printf("Area %s has end after parent %s\n",name,parent->name);
      printf("  start=%x, length=%x\n",start,length);
      printf("  (%x > %x)\n",end,parent->start+parent->length);
      exit(1);
    }
  }

  newp=malloc(sizeof(area_t));
  newp->name=strdup(name);
  newp->describe=describe;
  newp->describe_private=descprivate;
  newp->start=start;
  newp->length=length;
  newp->flags=flags;
  newp->children=NULL;

  last=NULL; next=NULL;
  thisp=parent ? parent->children : areas;
  while (thisp)
  {
    next=thisp->next;
    if ( (start >= thisp->start) && (start<thisp->start+thisp->length) )
    {
      printf("Area %s has start within %s\n",name,thisp->name);
      exit(1);
    }
    if ( (end > thisp->start) && (end<thisp->start+thisp->length) )
    {
      printf("Area %s has end within %s\n",name,thisp->name);
      exit(1);
    }
    if ( (thisp->length!=0) &&
         (start <= thisp->start) && (end>thisp->start+thisp->length) )
    {
      printf("Area %s encloses %s\n",name,thisp->name);
      exit(1);
    }
    if (start<thisp->start)
      break;
    last=thisp; thisp=next;
  }

  newp->next=thisp;
  if (last==NULL)
  {
    if (parent)
      parent->children=newp;
    else
      areas=newp;
  }
  else last->next=newp;

  return newp;
}

/*********************************************** <c> Gerph *********
 Function:     areas_dump
 Description:  Print out all the areas within an area
 Parameters:   area-> the area to list, or NULL for root
               indent = number of characters as indent
 Returns:      none
 ******************************************************************/
void areas_dump(area_t *parent,int indent)
{
  area_t *thisp;
  if (parent==NULL)
  {
    /* printf("*** DUMP ROOT\n"); */
    thisp=areas;
  }
  else
  {
    /* printf("*** Dumping children of %s\n",parent->name); */
    thisp=parent->children;
  }

  while (thisp)
  {
    addr start,end;
    if ((thisp->flags & AF_UNINTERESTING) == 0)
    {
      int x=indent;
      while (x--)
        putchar(' ');
      start=thisp->start;
      end=thisp->start+thisp->length-1;
      if (end<start) end=start;
      printf("%-60s %8X-%8X\n",thisp->name,start,end);
    }
    if (thisp->children==NULL && thisp->describe!=NULL)
    {
#ifdef DEBUG_DESCRIBE
      printf("Calling describe for %s\n",thisp->name);
#endif
      thisp->describe(thisp,thisp->describe_private);
    }
    if (thisp->children)
    {
      if ((thisp->flags & AF_UNINTERESTING) == 0)
        areas_dump(thisp,indent+2);
      else
        areas_dump(thisp,indent);
    }
    thisp=thisp->next;
  }
}

/*********************************************** <c> Gerph *********
 Function:     areas_init
 Description:  setup the top level areas
 Parameters:   none
 Returns:      none
 ******************************************************************/
void areas_init(void)
{
  area_add(NULL,       0x0,    0x8000,zp_describe,NULL,0,"Zero page");
  area_add(NULL,    0x8000, 0x1bf8000,NULL,NULL,0,"Application space");
  area_add(NULL, 0x3200000,  0x600000,NULL,NULL,0,"IO space");
  area_add(NULL, 0x3800000,  0x400000,rma_describe,1,0,"ROM");

  /* Work out the size of the system heap */
  {
    addr end;
    addr start;
    if (_swix(OS_ReadSysInfo,_INR(0,2)|_OUT(2),6,0,16,&end))
      end=0x1c00000+16*1024;
    start=(end>>20)<<20;
    /* printf("SVC stk = %x - %x\n",start,end); */
    area_add(NULL,start,end-start,NULL,NULL,0,"Supervisor stack");
    /* Write stuff for svc stack decoding */
  }

  da_init();
}

/*********************************************** <c> Gerph *********
 Function:     areas_findinarea
 Description:  Find an address in a particular area
 Parameters:   area-> the area to search (or NULL if not found)
               find = address to find
 Returns:      pointer to area, or NULL if not found
 ******************************************************************/
area_t *areas_findinarea(area_t *area,addr find)
{
  if (area==NULL)
    area=areas;
  else
  {
    if (area->children==NULL && area->describe!=NULL)
    {
#ifdef DEBUG_DESCRIBE
      printf("Calling describe for %s\n",area->name);
#endif
      area->describe(area,area->describe_private);
    }
    area=area->children;
  }

  while (area)
  {
    if (area->start <= find && area->start+area->length > find)
      return area;
    area=area->next;
  }
  return NULL;
}

/*********************************************** <c> Gerph *********
 Function:     areas_find
 Description:  Find a particular address
 Parameters:   find = the address to find
 Returns:      none
 ******************************************************************/
void areas_find(addr find)
{
  area_t *area;
  int indent;
  printf("Address &%x\n",find);
  area=NULL;
  indent=2;
  do
  {
    area=areas_findinarea(area,find);
    if (area)
    {
      int x=indent;
      while (x--)
        putchar(' ');

      printf("%s, at &%x offset &%x (size &%x)\n",area->name,area->start,find-area->start,area->length);
      indent+=2;
      if (area->flags & AF_ENTITIES)
        entity_within(NULL,area->start,area->start+area->length,indent);
    }
  } while (area);
  if (indent==2)
  {
    printf("  Not found in areas list\n");
  }
}
