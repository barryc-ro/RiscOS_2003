/*******************************************************************
 * File:     entity
 * Purpose:  Control over address entry points
 * Author:   Justin Fletcher
 * Date:     13 Oct 1999
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "strutils.h"
#include "area.h"
#include "entity.h"
#include "vector.h"

/* Define this for more debug stuff  */
/* #define DEBUG */

static entitygroup_t *list=NULL;

/*********************************************** <c> Gerph *********
 Function:     entity_addgroup
 Description:  Add a new grouping
 Parameters:   group-> the group to add to, or NULL to add to root
               name-> the name of the group
 Returns:      pointer to the group, or NULL if failed
 ******************************************************************/
entitygroup_t *entity_addgroup(entitygroup_t *group,char *name)
{
  char *newname=strdup(name);
  entitygroup_t *grp;
  entitygroup_t **parent;
  if (newname==NULL)
    return NULL;
  if (group==NULL)
  {
    parent=&list;
    /* printf("Adding %s to root\n",name); */
  }
  else
  {
    parent=&group->children;
    /* printf("Adding %s to %s\n",name,group->class); */
  }
  grp=malloc(sizeof(entitygroup_t));
  if (grp==NULL)
  {
    free(newname);
    return NULL;
  }
  /* Find the end of the groups list */
  {
    entitygroup_t *last=NULL;
    entitygroup_t *thisp=*parent;
    while (thisp)
    { last=thisp; thisp=thisp->next; }
    grp->next=NULL;
    if (last==NULL) *parent=grp;
    else last->next=grp;
  }
  grp->children=NULL;
  grp->entities=NULL;
  grp->eclass=newname;
  return grp;
}

/*********************************************** <c> Gerph *********
 Function:     entity_addaddr
 Description:  Add an address to a grouping
 Parameters:   group-> the group to add the address to
               at = address to add
               name-> the name to assign it
 Returns:      none
 ******************************************************************/
void entity_addaddr(entitygroup_t *group,addr at,char *name)
{
  entity_t *ent;
  char *newname=strdup(name);
  if (newname==NULL)
    return;

  ent=malloc(sizeof(entity_t));
  if (ent==NULL)
  {
    free(newname);
    return;
  }

  /* Add to /end/ of list */
  {
    entity_t *last=NULL;
    entity_t *thisp=group->entities;
    while (thisp)
    { last=thisp; thisp=thisp->next; }
    if (last==NULL) group->entities=ent; else last->next=ent;
  }
  ent->next=NULL;
  ent->address=at;
  ent->name=newname;
}

/*********************************************** <c> Gerph *********
 Function:     entity_init
 Description:  Initialise the entity handling system
 Parameters:   none
 Returns:      none
 ******************************************************************/
void entity_init(void)
{
  vector_init();
}

/*********************************************** <c> Gerph *********
 Function:     entity_within
 Description:  Find entities within a range and display them
 Parameters:   group-> the group to scan
               low = low point
               high = high point
               indent = amount to indent by (or -1 to just check)
 Returns:      0 if none found, 1 otherwise
 ******************************************************************/
int entity_within(entitygroup_t *group,addr low,addr high,int indent)
{
  int found=0;
  if (group==NULL)
    group=list;
  else
    group=group->children;
  while (group)
  {
    /* Let's look at these entities first */
    entity_t *ent=group->entities;
    while (ent)
    {
      if ((ent->address >= low) && (ent->address < high))
      { /* We've found an address in the range */
        if (indent==-1)
          return 1; /* If it was just a check, say we found it */
        if (!(found & 1))
        {
          { int x=indent;
            while (x--) putchar(' '); }
          puts(group->eclass);
          found|=3;
        }
        { int x=indent+2;
          while (x--) putchar(' '); }
        printf("&%x (offset &%x): %s\n",ent->address,ent->address-low,ent->name);
      }
      ent=ent->next;
    }
    if (group->children)
    { /* Hmm... group has children... we'd better look after them too */
      if ((!(found & 1)) && entity_within(group,low,high,-1))
      {
        { int x=indent;
          while (x--) putchar(' '); }
        puts(group->eclass);
        found|=3;
      }
      entity_within(group,low,high,indent+2);
    }
    found=found & ~1;
    group=group->next;
  }
  return found & 2;
}

/*********************************************** <c> Gerph *********
 Function:     entity_dump
 Description:  Display all entities in a group
 Parameters:   group-> the group to dump
               indent = indent to use
 Returns:      none
 ******************************************************************/
void entity_dump(entitygroup_t *group,int indent)
{
  if (group==NULL)
  {
    group=list;
    /* printf("Showing root\n"); */
  }
  else
  {
    /* printf("Showing %s\n",group->eclass); */
    group=group->children;
  }

  while (group)
  {
    entity_t *ent=group->entities;
    { int x=indent;
      while (x--) putchar(' '); }
    puts(group->eclass);
    while (ent)
    {
      { int x=indent+2;
        while (x--) putchar(' '); }
      printf("%-60s &%x\n",ent->name,ent->address);
      ent=ent->next;
    }
    if (group->children)
    {
      entity_dump(group,indent+2);
    }
    group=group->next;
  }
}
