/*******************************************************************
 * File:     heap
 * Purpose:  Heap management
 * Author:   Justin Fletcher
 * Date:     10 Oct 1999
 ******************************************************************/

#include <stdio.h>
#include "area.h"

/*********************************************** <c> Gerph *********
 Function:     heap_add
 Description:  add a heap entry to an area
 Parameters:   parent-> the area to add it to
               ... details of area to add
 Returns:      pointer to area of data
 Note:         entries are added as 'uninteresting'
 ******************************************************************/
area_t *heap_add(area_t *parent,addr data,describe_f describe,
                 int descprivate,int flags,char *name)
{
  char namebuf[256];
  area_t *heap;
  int len;
  len=((int *)data)[-1];

  heap=area_add(parent,data-4,len,describe,descprivate,AF_UNINTERESTING,
                "Heap block");
  sprintf(namebuf,"%s heap block size",name);
  area_add(heap,data-4,4,NULL,NULL,AF_UNINTERESTING,namebuf); /* The header */
  return area_add(heap,data,len-4,NULL,NULL,flags,name);
}

#define INTAT(ptr) (*((int *)(ptr)))

/*********************************************** <c> Gerph *********
 Function:     heap_identify
 Description:  Identify if this is actually a heap area
 Parameters:   parent-> the area to check
 Returns:      0 if not, 1 if it probably is
 ******************************************************************/
int heap_identify(area_t *area)
{
  if (area->length<=16)
    return 0;
  return (INTAT(area->start)==0x70616548);
}

/*********************************************** <c> Gerph *********
 Function:     heap_addwholearea
 Description:  add a whole area worth of heap entries
 Parameters:   parent-> the parent of this area
 Returns:      none
 ******************************************************************/
void heap_addwholearea(area_t *parent)
{
  addr start=parent->start;
  addr length=parent->length;

  if (INTAT(start)!=0x70616548)
  {
    printf("Area at %x is not a Heap\n",start);
    return; /* it's not really a heap */
  }

  if ((INTAT(start+12)<0) || (INTAT(start+12)>length))
  {
    printf("Heap at %x has an invalid length\n",start);
    return;
  }

  {
    area_t *header;
    header=area_add(parent,start,16,NULL,NULL,0,"Heap header");
    area_add(header,start,4,NULL,NULL,AF_UNINTERESTING,"Magic word");
    area_add(header,start+4,4,NULL,NULL,AF_UNINTERESTING,"First free entry offset");
    area_add(header,start+8,4,NULL,NULL,AF_UNINTERESTING,"Base (end of used space)");
    area_add(header,start+12,4,NULL,NULL,AF_UNINTERESTING,"Maximum size of heap");
  }

  {
    area_t *heapblk;
    addr cur;
    addr heapend=INTAT(start+8);
    addr free=INTAT(start+4)+4;

    cur=16;
    do
    {
      unsigned int len;
      /* printf("Looking at heap block at %x: ",cur); */
      if (free==cur)
      {
        unsigned int link;
        link=INTAT(start+cur);
        len=INTAT(start+cur+4);
#ifdef DEBUG
        printf("Free %x\n",len);
#endif
        if (cur+len>heapend)
        {
          printf("Bad heap area (free length at &%x is invalid)\n",
                 cur+start);
          return;
        }
        if (cur+link>heapend)
        {
          printf("Bad heap area (free link at &%x is invalid)\n",
                 cur+start);
          return;
        }
        heapblk=area_add(parent,start+cur,len,NULL,NULL,AF_UNINTERESTING,"Free block");
        area_add(heapblk,start+cur,4,NULL,NULL,AF_UNINTERESTING,"Offset of next free");
        area_add(heapblk,start+cur+4,4,NULL,NULL,AF_UNINTERESTING,"Block size");
        area_add(heapblk,start+cur+8,len-8,NULL,NULL,0,"Free space");
        free+=link;
      }
      else
      {
        len=INTAT(start+cur);
#ifdef DEBUG
        printf("Used %x\n",len);
#endif
        if (cur+len>heapend)
        {
          printf("Bad heap area (used length at &%x is invalid)\n",
                 cur+start);
          return;
        }
        heapblk=area_add(parent,start+cur,len,NULL,NULL,AF_UNINTERESTING,"Heap block");
        area_add(heapblk,start+cur,4,NULL,NULL,AF_UNINTERESTING,"Block size");
        area_add(heapblk,start+cur+4,len-4,NULL,NULL,0,"Block data");
      }
      cur+=len;
    } while (cur!=heapend);
  }
}
