/*******************************************************************
 * File:     da
 * Purpose:  Dynamic area handling
 * Author:   Justin Fletcher
 * Date:     10 Oct 1999
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "area.h"
#include "rma.h"
#include "da.h"
#include "heap.h"

/* Define this to debug parts of this file */
/* #define DEBUG */

/*********************************************** <c> Gerph *********
 Function:     da_init
 Description:  Initialise the dynamic areas - add all known areas to
               the list (see OS_ChangeDynamicArea for list of numbers)
 Parameters:   none
 Returns:      none
 ******************************************************************/
void da_init(void)
{
  unsigned int area;
  _swi(OS_DynamicArea,_INR(0,1)|_OUT(1),3,-1,&area);
  while (area!=0xffffffff)
  {
    char namebuf[256];
    char *name;
    char *endofname;
    unsigned int flags;
    int access;
    addr size;
    addr start;
    addr max;
    _swi(OS_DynamicArea,_INR(0,1)|_OUTR(2,5)|_OUT(8),2,area,
         &size,&start,&flags,&max,&name);
    if (area>=0x100)
    {
      sprintf(namebuf,"Dynamic area '%s'",name);
      name=namebuf;
    }
    else
    {
      strcpy(namebuf,name);
      name=namebuf;
    }
    endofname=&name[strlen(namebuf)];
    access=flags & 15;
    switch (access)
    {
      case 0: strcpy(endofname," (read/write)"); break;
      case 1: strcpy(endofname," (read)"); break;
      case 2: strcpy(endofname," (inaccessible)"); break;
      case 3: strcpy(endofname," (mapped out)"); break;
      default:
        sprintf(endofname," (access %i)",access);
    }

    switch (area)
    {
      case 1: /* RMA */
        area_add(NULL,start,size,rma_describe,NULL,0,name);
        break;

      case 0: /* System heap */
        area_add(NULL,start,size,rma_addmodulechain,NULL,0,name);
        break;

      default:
        {
          int accessible=(access==0) || (access==1);
          if (area>=0x100)
            area_add(NULL,start,size,accessible ? da_describe : NULL,area,0,name);
          else
            area_add(NULL,start,size,NULL,area,0,name);
        }
    }

    if (max>size)
    {
      strcpy(endofname," (unmapped)");
      /* printf("With %x for %x\n",start,size); */
      /* printf("From %x for %x\n",start+size,max-size); */
      area_add(NULL,start+size,max-size,NULL,area,0,name);
    }
    _swi(OS_DynamicArea,_INR(0,1)|_OUT(1),3,area,&area);
  }
}

/*********************************************** <c> Gerph *********
 Function:     da_describe
 Description:  Describe a dynamic area in a little more detail
               possibly using guesswork as to its contents
 Parameters:   parent-> the dynamic area_t
               private_data-> our private word (the area number)
 Returns:      none
 ******************************************************************/
void da_describe(area_t *parent,int private_data)
{
  if (heap_identify(parent))
  {
#ifdef DEBUG
    printf("Describing dynamic area %s (%i)\n",parent->name,private_data);
#endif
    heap_addwholearea(parent);
    return;
  }
  /* Try adding sprites ? */
  /* Unknown dynamic area data type */
}
