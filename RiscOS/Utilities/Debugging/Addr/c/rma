/*******************************************************************
 * File:     rma
 * Purpose:  RMA area handling
 * Author:   Justin Fletcher
 * Date:     10 Oct 1999
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stddef.h>
#include "swis.h"
#include "area.h"
#include "heap.h"

/* Define this for some simple debug */
/* #define DEBUG */

/* Define this if you don't want any modules listed */
/* #define NOMODULES */

/*********************************************** <c> Gerph *********
 Function:     rma_describe
 Description:  Describe the RMA
 Parameters:   parent-> the RMA area
               private_data-> our private word
                         0 if we're /really/ describing RMA
                         1 if we're describing ROM and just need to add
                           its modules
 Returns:      none
 ******************************************************************/
void rma_describe(area_t *parent,int private_data)
{
#ifndef NOMODULES
  int num=0;
  int inst=0;

  addr parentstart=parent->start;
  addr parentend=parentstart+parent->length;

  do
  {
    int newnum,newinst;
    int *module,*wspace;
    char *postfix;
    if (_swix(OS_Module,_INR(0,2)|_OUTR(1,5),12,num,inst,
              &newnum,&newinst,&module,&wspace,&postfix))
      newnum=0;
    else
    {
      addr start=(addr)module;
      char *name=(char *)(start+module[4]);
      char namebuf[256];
      if ((inst==0) && (strcmp(postfix,"Base")==0))
        sprintf(namebuf,"Module %s",name);
      else
        sprintf(namebuf,"Module %s%%%s",name,postfix);
#ifdef DEBUG
      printf("%s %x + %x\n",namebuf,start,module[-1]);
#endif
      if ((start>= parentstart) && (start<parentend) && (inst==0))
        heap_add(parent,start,NULL,NULL,AF_ENTITIES,namebuf);

      /* Now check if the workspace is valid */
      if (private_data==0)
      {
        if (!_swix(OS_Heap,_INR(0,3),4,parentstart,wspace,0))
        { /* it's a heap block */
          strcat(namebuf," workspace");
          heap_add(parent,(addr)wspace,NULL,NULL,0,namebuf);
        }
      }
    }

    num=newnum; inst=newinst;
  } while (num!=0);
#endif
}

typedef struct {
  void *next;
  int  workspace;
  char postfix[1];
} modincarnations_t;

typedef struct {
  void *next;
  int  modulebase;
  int  hardwarebase;
  modincarnations_t *incarnationlist;
} modchain_t;

/*********************************************** <c> Gerph *********
 Function:     rma_addmodchainblock
 Description:  Add the description of the module chain block to an entry
 Parameters:   parent-> the area to add to
               private_data = a private value (not used)
 Returns:      none
 ******************************************************************/
void rma_addmodchainblock(area_t *parent,int private_data)
{
  int start=parent->start;
  area_add(parent,start+offsetof(modchain_t,next)        ,4,NULL,NULL,
           AF_UNINTERESTING, "Pointer to next module");
  area_add(parent,start+offsetof(modchain_t,modulebase)  ,4,NULL,NULL,
           AF_UNINTERESTING, "Pointer to module base");
  area_add(parent,start+offsetof(modchain_t,hardwarebase),4,NULL,NULL,
           AF_UNINTERESTING, "Pointer to hardware base");
  area_add(parent,start+offsetof(modchain_t,incarnationlist),4,NULL,NULL,
           AF_UNINTERESTING, "Pointer to incarnation list");
}

/*********************************************** <c> Gerph *********
 Function:     rma_addmodincarnationblock
 Description:  Add the description of the module incarnation block to
               an entry
 Parameters:   parent-> the area to add to
               private_data = a private value (not used)
 Returns:      none
 ******************************************************************/
void rma_addmodincarnationblock(area_t *parent,int private_data)
{
  int start=parent->start;
  modincarnations_t *inc=(modincarnations_t *)start;
  area_add(parent,start+offsetof(modincarnations_t,next),4,
           NULL,NULL,AF_UNINTERESTING, "Pointer to next incarnation");
  area_add(parent,start+offsetof(modincarnations_t,workspace),4,
           NULL,NULL,AF_UNINTERESTING, "Pointer to workspace");
  area_add(parent,start+offsetof(modincarnations_t,postfix),
           strlen(inc->postfix)+1,
           NULL,NULL,AF_UNINTERESTING, "Postfix string");
}

/*********************************************** <c> Gerph *********
 Function:     rma_addmodulechain
 Description:  Add entries from the module chain blocks
 Parameters:   parent-> area to add them to
               private_data = a private value (not used)
 Returns:      none
 ******************************************************************/
void rma_addmodulechain(area_t *parent,int private_data)
{
  char line[256];
  modchain_t *chain=(modchain_t *)*((int *)0x7d0); /* Icky */
  while (chain)
  {
    modincarnations_t *inc=chain->incarnationlist;
    int modulebase=chain->modulebase;
    char *modulename=(char *)(modulebase+*((int *)(modulebase+16)));
    sprintf(line,"ModChain: %s",modulename);
    area_add(parent,(int)chain,sizeof(modchain_t),rma_addmodchainblock,NULL,0,line);

#ifdef DEBUG
    if (chain->hardwarebase!=0)
      printf("Hardware base for %s : %x\n",modulename,chain->hardwarebase);
#endif

    while (inc)
    {
      char *postfix=inc->postfix;
      sprintf(line,"ModChain: %s incarnation %s",modulename,postfix);
      area_add(parent,(int)inc,8+strlen(postfix)+1,NULL,NULL,0,line);
      inc=inc->next;
    }
    chain=chain->next;
  }
}
