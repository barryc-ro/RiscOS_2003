/*
 * armdefsp.h -- ARMulator environment definitions.
 * Copyright (C) 1991-96 Advanced RISC Machines Limited. All rights reserved.
 *
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef armdefsp_h
#define armdefsp_h

#include "armdefs.h"

#ifndef NO_SARMSD
#include "pipeline.h"           /* for StrongARM */
#endif

/*
 * Useful support routines
 */

/*
 * Configure ARMulator state - processor type, memory model, os interface
 */
   
extern ARMul_Error ARMul_SelectProcessor(ARMul_State *state);

/*
 * Start up all "basic" models
 */
extern ARMul_Error ARMul_StartModels(ARMul_State *state);

/*
 * After initialising the memory model, set the read_clock function
 * appropriately
 */

extern void ARMul_SetReadClock(ARMul_State *state);

/*
 * Call to change status of "state->Exception"
 */

extern void ARMul_SetException(ARMul_State *state);

/*
 * Call to change value of "state->NtransSig"
 * if "new" is -1, then it is worked out from the mode value
 */
extern unsigned ARMul_SetNtrans(ARMul_State *state,int new);


/*
 * Function pointer interface to support functions
 */

typedef ARMword armul_DoProg(ARMul_State *state);
typedef ARMword armul_DoInstr(ARMul_State *state);
typedef ARMword armul_DoCycle(ARMul_State *state);

typedef ARMword armul_GetReg(ARMul_State *state, unsigned mode, unsigned reg) ;
typedef void armul_SetReg(ARMul_State *state, unsigned mode, unsigned reg, ARMword value) ;
typedef ARMword armul_GetPC(ARMul_State *state) ;
typedef void armul_SetPC(ARMul_State *state, ARMword value) ;
typedef ARMword armul_GetR15(ARMul_State *state) ;
typedef void armul_SetR15(ARMul_State *state, ARMword value) ;

typedef ARMword armul_GetCPSR(ARMul_State *state) ;
typedef void armul_SetCPSR(ARMul_State *state, ARMword value) ;
typedef ARMword armul_GetSPSR(ARMul_State *state, ARMword mode) ;
typedef void armul_SetSPSR(ARMul_State *state, ARMword mode, ARMword value) ;

typedef void armul_Abort(ARMul_State *state, ARMword address, ARMword word);

typedef struct {
  armul_DoCycle *do_cycle;
  armul_DoInstr *do_instr;
  armul_DoProg *do_prog;

  armul_GetReg *get_reg;
  armul_SetReg *set_reg;

  armul_GetPC *get_pc;
  armul_SetPC *set_pc;
  armul_GetR15 *get_r15;
  armul_SetR15 *set_r15;

  armul_GetCPSR *get_cpsr;
  armul_SetCPSR *set_cpsr;
  armul_GetSPSR *get_spsr;
  armul_SetSPSR *set_spsr;

  armul_Abort *abort;
} RDIInterface;


#define ARMul_Abort(state,addr,word) (state)->rdi.abort((state),(addr),(word))

/*
 * Internal ARMulator functions
 */

extern ARMword ARMul_ProcessThumbInstr(ARMul_State *,ARMword);

/*
 * Function that finds a toolconf
 */

void *ARMul_FindConfig(void *tconf,const char *confname);

/*
 * Basic ARMulator functions: (move to armbasic.h)
 */


/*
 * Definitions of things in the core interface
 *
 * Each ARMulator exports an Emulate26 and an Emulate32 function:
 */
typedef ARMword ARMul_Emulate(ARMul_State *state);
typedef struct {
  ARMul_Emulate *Emulate26;
  ARMul_Emulate *Emulate32;
  char handle[16];
} ARMulator;

/*
 * The hardware vector addresses
 */

#define ARMResetV ARMul_ResetV
#define ARMUndefinedInstrV ARMul_UndefinedInstrV
#define ARMSWIV ARMul_SWIV
#define ARMPrefetchAbortV ARMul_PrefetchAbortV
#define ARMDataAbortV ARMul_DataAbortV
#define ARMAddrExceptnV ARMul_AddrExceptnV
#define ARMIRQV ARMul_IRQV
#define ARMFIQV ARMul_FIQV

/*
 * State mode and bank constants
 */

#define ARM32BITMODE (state->Mode > 3)
#define ARM26BITMODE (state->Mode <= 3)
#define ARMMODE (state->Mode)
#define ARMul_MODEBITS 0x1fL
#define ARMul_MODE32BIT ARM32BITMODE
#define ARMul_MODE26BIT ARM26BITMODE

#define USERBANK 0
#define FIQBANK 1
#define IRQBANK 2
#define SVCBANK 3
#define ABORTBANK 4
#define UNDEFBANK 5
#define DUMMYBANK 6


/*
 * These two functions are provided for those implementing ARMulators.
 */
extern ARMword ARMul_SwitchMode(ARMul_State *state,ARMword oldmode,
                                ARMword newmode);
extern ARMword ARMul_ChangeMode(ARMul_State *state, ARMword newmode);
extern ARMword ARMul_ModeToBank(ARMul_State *state, ARMword mode);

#ifdef CODE16
#define INSTRUCTION16STATE (state->Instruction_set == INSTRUCTION16)
#define INSTRUCTIONSIZE (INSTRUCTION16STATE ? INSTRUCTION16SIZE : INSTRUCTION32SIZE)
#endif

/*
 * Event queue types
 */

typedef struct EventNode EventNode;

typedef struct UpcallNode UpcallNode;

/* Functions to invoke upcalls */
extern void ARMul_CallModeChange(ARMul_State *state,ARMword old);
extern void ARMul_CallTransChange(ARMul_State *state,unsigned old);
extern void ARMul_CallConfigChange(ARMul_State *state,ARMword old);
extern void ARMul_CallInterrupt(ARMul_State *state,unsigned int which);
extern void ARMul_CallRDILog(ARMul_State *state,unsigned int old);
extern int ARMul_UnknownRDIInfo(ARMul_State *state,unsigned type,
                                ARMword *arg1,ARMword *arg2);
extern void ARMul_Hourglass(ARMul_State *state,ARMword pc,ARMword instr);
extern void ARMul_CallExit(ARMul_State *state);

/* The actual ARMulator state */

struct ARMul_State {
   ARMword Reg[16] ;            /* the current register file */
   ARMword pc;                  /* saved register state */
   unsigned Processor ;         /* type of ARM we are emulating */
   enum ARMulator_Type {
     ARMulator_ARM,             /* Standard ARM ARMulator */
     ARMulator_StrongARM,       /* Digital StrongARMulator */
     ARMulator_StrongARM2       /* ARM's StrongARMulator */
   } ARMulator;                 /* Identifies the ARMulator in use */
   unsigned Instruction_set ;   /* 1=16 bits or 0=32, added for thumb */
   enum {
     STOP,                      /* stop */
     CHANGEMODE,                /* change mode */
     /* values above this are for "RUN" codes */
     ONCE,                      /* execute just one interation */
     RUN                        /* continuous execution */
   } Emulate;                   /* to start and stop emulation */
   UpcallNode *hourglass;       /* functions to call every instruction */
   unsigned EndCondition ;      /* reason for stopping */
   unsigned broken;               /* flag to set if the model hangs */
   unsigned ErrorCode ;         /* type of illegal instruction */
   ARMword RegBank[7][16] ;     /* all the registers */
   ARMword Cpsr ;               /* the current psr */
   ARMword Spsr[7] ;            /* the exception psr's */
   ARMword Flags;               /* condition flags */
   ARMword IFFlags;             /* interrupt flags - bit 0 FIQ disable, bit 1 IRQ.*/
   ARMword Bank ;               /* the current register bank */
   ARMword Mode ;               /* the current mode */

   unsigned long NumInstrs ;    /* the number of instructions executed */
   unsigned NextInstr ;
   unsigned MemReadDebug, MemWriteDebug;
   unsigned CanWatch;           /* set by the memory model if it can handle watchpoints */
   unsigned CallDebug ;         /* set to call the debugger */

   unsigned long StopHandle ;

   unsigned EventSet ;          /* the number of events in the queue */
   unsigned long Now ;          /* time to the nearest cycle */
   EventNode **EventPtr ;       /* the event list */
#define EVENTLISTSIZE 1024L

   /*
    * Exception is a speed thing used to encode various events. When you
    * alter any of the signals below call ARMul_SetException(), otherwise
    * the signal may not be acted upon.
    */
   unsigned Exception ;

   unsigned Debug ;             /* show instructions as they are executed */
   unsigned NresetSig;
   unsigned NirqSig;
   unsigned NfiqSig;
   unsigned abortSig ;
   unsigned NtransSig ;

   unsigned bigendSig ;
   unsigned prog32Sig ;
   unsigned data32Sig ;
   unsigned lateabtSig ;
   unsigned branchpredictSig;

   ARMword arm_config;          /* combination of above */
   ARMword last_bigendSig;      /* above last time the RDI talked to us */

   ARMword Vector ;             /* synthesize aborts in cycle modes */
   ARMword Aborted ;            /* sticky flag for aborts */
   ARMword Reseted ;            /* sticky flag for Reset */
   ARMword Inted, LastInted ;   /* sticky flags for interrupts */
   ARMword Base ;               /* extra hand for base writeback */
   ARMword AbortAddr ;          /* to keep track of Prefetch aborts */

   const struct Dbg_HostosInterface *hostif;

   /* handler nodes */
   UpcallNode *mode_change;
   UpcallNode *trans_change;
   UpcallNode *config_change;
   UpcallNode *interrupt;
   UpcallNode *exit;

   ARMul_CPInterface cp_bus;
   armul_CPInit *cp_init;
   void *cp_config;
   void *cp_sibling;
   ARMul_CPInterface CP[16];

   ARMul_MemInterface mem;
   armul_MemAccess *rdi_mem_access; /* for snooping into long pipelines */
   armul_MemInit *mem_init;
   void *mem_config;

   ARMul_OSInterface os;        /* O/S model */
   armul_OSInit *os_init;

   ARMword MemSize;             /* Amount of memory emulated by this model */

   ARMulator *core;             /* Core model */

   RDIInterface rdi;            /* Access to registers etc. */

   void *config;             /* handle onto config */

   struct fpedesc {
     ARMword base;
     ARMword regs;
     int version;
   } fpe;

   struct {
     UpcallNode *upcall;        /* Trace random events */
     void *mode,*intr;          /* handles for event trace functions */
   } trace_event;

   UpcallNode *rdi_log_upcall;  /* Function called when rdi_log changes */
   unsigned rdi_log;            /* RDI logging level */

   UpcallNode *rdi_info_upcall; /* Function called for unk RDI info calls */

   ARMul_Cycles cycles;         /* at last reset */

   union {                      /* processor specific */
     /* ARM7 only */
     struct {
       ARMword loaded, decoded; /* saved pipeline state */
       int last_prefetch;       /* result from last prefetch */
     } arm6,arm7;               /* identical */
     
     /* ARM8 only */
     struct {
       void *prefetch;          /* A handle for the prefetch unit to use */
       
       struct {
         ARMword early,late;
         ARMword new_late,new_early; /* value used for interlocking, to
                                      * prevent instructions interlocking on
                                      * themselves. */
         ARMword req1,req2;     /* registers required for bus or latch */
       } interlock;
       
       ARMword takenIcycles;    /* Icycles taken in an instruction */
       ARMword busCycles;       /* Free bus cycles during an instruction */

       struct {
         ARMword instr;         /* occasionally a prefetched instruction */
         ARMword pc;
       } prefetched;
     } arm8;
     
#ifndef NO_SARMSD
     /* StrongARM only */
     struct {
       pipeline_t pipeline[4];  /* model of pipeline */
       unsigned32 irq_pipe;     /* interrupt (irq/fiq) pipeline (shifting bits) */
       unsigned32 buffer_result;
       unsigned16 forwarding[2]; /* forwarding paths - EXECUTE, BUFFER */
       void (*call_every_cycle)(ARMul_State *); /* debug */
       
       int last_fetch;
     int CycleCounter;
     } sa1;
#endif
   } proc;
 };

/*
 * Abort macros
 */

#define ARMul_ABORTWORD 0xefffffff /* SWI -1 */
#ifdef CODE16
#define ARMul_PREFETCHABORT(instr,address) \
     do { instr = ARMul_ABORTWORD;        \
          if (state->AbortAddr == 1)      \
            state->AbortAddr = (address & (INSTRUCTION16STATE ? ~1L : ~3L));   \
        } while (0)
#else
#define ARMul_PREFETCHABORT(instr,address) \
     do { instr = ARMul_ABORTWORD; \
          if (state->AbortAddr == 1) \
            state->AbortAddr = (address & ~3L);   \
        } while (0)
#endif
#define ARMul_DATAABORT(address) state->abortSig = HIGH; \
                                 state->Aborted = ARMul_DataAbortV;


/*
 * Macro to cause things to give up if the memory system fails
 */
#define Hourglass() \
  (--hourglass_counter || ARMul_ModelBroken(state))


/*
 * function that finds a co-processor interface, and returns the init
 * function and it's config
 */

extern armul_CPInit *ARMul_FindCPInterface(ARMul_State *state,
                                           const char *name,
                                           void **wrconfig);


/*
 * shared lookup tables etc.
 */
extern void ARMul_EmulateInit(void);
extern unsigned ARMul_MultTable[32];
extern ARMword ARMul_ImmedTable[4096];
extern char ARMul_BitList[256];

/*
 * Shared macros for ARM things
 */

/*
 * Condition code values
 */

enum { EQ=0,  NE,  CS,  CC,  MI,  PL,  VS,  VC,
       HI,    LS,  GE,  LT,  GT,  LE,  AL,  NV };

/*
 * Macros to twiddle the PSR/PC
 */

#define NBITpos 31
#define ZBITpos 30
#define CBITpos 29
#define VBITpos 28
#define NBIT ((unsigned)1L << NBITpos)
#define ZBIT (1L << ZBITpos)
#define CBIT (1L << CBITpos)
#define VBIT (1L << VBITpos)
#define IBIT (1L << 7)
#define FBIT (1L << 6)
#define IFBITS (3L << 6)
#define R15IBIT (1L << 27)
#define R15FBIT (1L << 26)
#define R15IFBITS (3L << 26)

#define FLAG(n) (((state->Flags)>>(n))&1)
#define VFLAG FLAG(0)
#define CFLAG FLAG(1)
#define ZFLAG FLAG(2)
#define NFLAG FLAG(3)

#define SETFLAG(n) (state->Flags|=1<<(n))
#define SETV SETFLAG(0)
#define SETC SETFLAG(1)
#define SETZ SETFLAG(2)
#define SETN SETFLAG(3)

#define CLRFLAG(n) (state->Flags&=((~(1<<(n))) & 0xf))
#define CLEARV CLRFLAG(0)
#define CLEARC CLRFLAG(1)
#define CLEARZ CLRFLAG(2)
#define CLEARN CLRFLAG(3)
#define CLEARCV (state->Flags&=((~((1<<1)|(1<<0))) & 0xf))
#define CLEARNZ (state->Flags&=((~((1<<3)|(1<<2))) & 0xf))
#define CLEARNCV (state->Flags&=((~((1<<3)|(1<<1)|(1<<0))) & 0xf))

#define POS(i) ( (~(i)) >> 31 )
#define NEG(i) ( (i) >> 31 )

#define ASSIGNN(res) ((res) ? SETN : CLEARN)
#define ASSIGNZ(res) ((res) ? SETZ : CLEARZ)
#define ASSIGNC(res) ((res) ? SETC : CLEARC)
#define ASSIGNV(res) ((res) ? SETV : CLEARV)

#define IFLAG (state->IFFlags >> 1)
#define FFLAG (state->IFFlags & 1)
#define IFFLAGS state->IFFlags
#define ASSIGNINT(res) state->IFFlags = (((res) >> 6) & 3)
#define ASSIGNR15INT(res) state->IFFlags = (((res) >> 26) & 3) ;

#define CCBITS (NBIT | ZBIT | CBIT | VBIT)
#define INTBITS (0xc0L)
#define PCBITS (0xfffffffcL)
#define MODEBIT (0x10L)
#define MODEBITS (0x1fL)

/* R15/PC macros */
#define R15INTBITS (3L << 26)
#define R15PCBITS (0x03fffffcL)
#define R15PCMODEBITS (0x03ffffffL)
#define R15MODEBITS (0x3L)

#define PCR15DIFFERENCE32 (8)

#ifdef CODE16
#define SETINSTRUCTIONSET(n) (state->Instruction_set = (n))
#define PCBITS16 (0xfffffffeL)
#define PC16 (state->Reg[15] & PCBITS16)
#define PCADDRESSBITS(a) ((a) & (INSTRUCTION16STATE ? PCBITS16 : PCBITS))
#define PCM (PCADDRESSBITS(state->Reg[15]))
#define EISET (state->Instruction_set << CPSRINSTRUCTIONSETBITPOSN)
#define ISETBITS CPSRINSTRUCTIONSETBITS
#define PCR15DIFFERENCE16 (4)
#define PCR15DIFFERENCE (INSTRUCTION16STATE ? PCR15DIFFERENCE16 : PCR15DIFFERENCE32)
#else
#define PCR15DIFFERENCE PCR15DIFFERENCE32
#endif

#define PC (state->Reg[15] & PCMASK)
#define R15CCINTMODE (state->Reg[15] & (CCBITS | R15INTBITS | R15MODEBITS))
#define R15INT (state->Reg[15] & R15INTBITS)
#define R15INTPC (state->Reg[15] & (R15INTBITS | R15PCBITS))
#define R15INTPCMODE (state->Reg[15] & (R15INTBITS | R15PCBITS | R15MODEBITS))
#define R15INTMODE (state->Reg[15] & (R15INTBITS | R15MODEBITS))
#define R15PC (state->Reg[15] & R15PCBITS)
#define R15PCMODE (state->Reg[15] & (R15PCBITS | R15MODEBITS))
#define R15MODE (state->Reg[15] & R15MODEBITS)

#define ECC (state->Flags<<28)
#define EINT (IFFLAGS << 6)
#define ER15INT (IFFLAGS << 26)
#define EMODE (state->Mode)

#ifdef CODE16

#define CPSR (ECC | EINT | EISET | EMODE)

#define SETABORT(i,m) state->Cpsr = ECC | EINT | (i) | EISET | (m)

#define SETISET(d) d = ((d) & (CCBITS | INTBITS | MODEBITS)) | EISET

#else

#define CPSR (ECC | EINT | EMODE)

#define SETABORT(i,m) state->Cpsr = ECC | EINT | (i) | (m)

#endif

#define GETSPSR(bank) (bank>0?state->Spsr[bank]:CPSR)

/* Writes to cpsr and spsr using these macros don't need to do anything with
 * the thumb bit since all writes to cpsr and all reads from spsr are controlled.
 */

#ifdef CODE16
#define SETPSR(d,s) d = (((s) & (CCBITS | INTBITS | ISETBITS | MODEBITS)))
#define SETINTMODE(d,s) d = (((d) & CCBITS) | ((s) & (INTBITS | ISETBITS | MODEBITS)))
#define SETCC(d,s) d = (((d) & (INTBITS | ISETBITS | MODEBITS)) | ((s) & CCBITS))
#else
#define SETPSR(d,s) d = ((s) & (ARMword)(CCBITS | INTBITS | MODEBITS))
#define SETINTMODE(d,s) d = (((d) & CCBITS) | ((s) & (INTBITS | MODEBITS)))
#define SETCC(d,s) d = (((d) & (INTBITS | MODEBITS)) | ((s) & CCBITS))
#endif

#endif
