/* demon.h - Interface onto the demon O/S model for subordinate SWI handlers to
             use. */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef demon_h
#define demon_h

#include "armdefs.h"

typedef void *toolconf;

/*
 * Demon's SWI numbers
 */

/*
 * SWI numbers
 */

#define SWI_WriteC                 0x0
#define SWI_Write0                 0x2
#define SWI_ReadC                  0x4
#define SWI_CLI                    0x5
#define SWI_GetEnv                 0x10
#define SWI_Exit                   0x11
#define SWI_EnterOS                0x16

#define SWI_GetErrno               0x60
#define SWI_Clock                  0x61
#define SWI_Time                   0x63
#define SWI_Remove                 0x64
#define SWI_Rename                 0x65
#define SWI_Open                   0x66

#define SWI_Close                  0x68
#define SWI_Write                  0x69
#define SWI_Read                   0x6a
#define SWI_Seek                   0x6b
#define SWI_Flen                   0x6c

#define SWI_IsTTY                  0x6e
#define SWI_TmpNam                 0x6f
#define SWI_InstallHandler         0x70
#define SWI_GenerateError          0x71

#ifndef FOPEN_MAX               /* max # of open files. */
#define FOPEN_MAX 64
#endif
#define UNIQUETEMPS 256

typedef struct demon_state_str Demon_State;

/* A child of demon's provides these three functions. */
typedef struct demon_child_str Demon_Child;

/* When all these functions are called, state->os.data points to the Demon_State */
typedef Demon_Child *demon_ChildInit(Demon_State *state, void *config);
typedef void demon_ChildExit(Demon_Child *child);
typedef unsigned demon_HandleSWI(Demon_State *state,ARMword number,Demon_Child *child);

struct demon_child_str {
  demon_ChildInit *init;
  demon_ChildExit *exit;
  demon_HandleSWI *handle_swi;  /* swi handler - called *after* demon's */
  void *handle;                 /* a per-instantiation handle */
  Demon_Child *chain;           /* used for chaining by demon itself (leave alone!) */
  char name[16];                /* name of this extension */
};

extern Demon_Child *Demon_Children[];

struct demon_state_str {
  Demon_Child *child;           /* first child (head of a linked list) */
  ARMword ErrorP;               /* as returned by last_error_p */
  ARMword ErrorNo;              /* the "errno" value */
  char *command_line;           /* Command line passed from debugger */
  unsigned vector_catch;        /* VectorCatch passed from debugger */
  FILE *FileTable[FOPEN_MAX];   /* table of open file handles */
  char FileFlags[FOPEN_MAX];    /* ... and the mode of opening */
  char *tempnames[UNIQUETEMPS]; /* array of names of temporary files */
  unsigned long flags;          /* options set (below) */
  ARMul_State *state;           /* back to ARMulator's state */
  const struct Dbg_HostosInterface *hostif;
  toolconf config;              /* config database */
  struct {
    struct {
      ARMword svc,abt,undef;
      ARMword irq,fiq,user;
    } sp;                       /* Stack pointers */
    ARMword soft_vectors;       /* where the soft vectors start */
    ARMword cmd_line;           /* where the command line is placed */
    ARMword handlers;           /* addr/workspace for handlers */
    ARMword soft_vec_code;      /* default handlers */
  } map;
  int angel;                    /* whether we are in fact Angel */
};

/* Even if demon isn't the selected O/S, it's code for dealing with children
 * can still be used, and hence not duplicated. */

#define DemonFlag_RunningOnThumb  0x00001

/* Expects state->os.data to point to a pointer to a Demon_Child; or a struct
 * with such a pointer as the first element - e.g. a Demon_State. */

extern unsigned Demon_InitChildren(Demon_State *state);
extern void Demon_ExitChildren(Demon_State *state);
extern unsigned Demon_PassOnSWI(Demon_State *state, ARMword number);

#endif
