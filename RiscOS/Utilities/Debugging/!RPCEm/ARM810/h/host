#ifndef _host_LOADED
#define _host_LOADED 1

#include <stdio.h>
#include <stddef.h>     /* for xsyn.c (and more?) and offsetof test below */
#include <stdlib.h>     /* for EXIT_FAILURE test below */

#define BELL      '\a'
typedef void                  /* newline to fool the topcc tool */
             *VoidStar;
typedef const void
             *ConstVoidStar;
#define safe_tolower(ch)      tolower(ch)  /* see comment below */
#define safe_toupper(ch)      toupper(ch)  /* see comment below */

#  define COMPILING_ON_ACORN_KIT  1
#  define COMPILING_ON_RISC_OS  1
#  define COMPILING_ON_ARM      1  /* dying: unix/riscos/acorn suffice  */

typedef unsigned       int   unsigned32;
typedef          short int   int16;
typedef unsigned short int   unsigned16;
typedef   signed       char  int8;
typedef unsigned       char  unsigned8;

/* The following code defines the 'bool' type to be 'int' under C       */
/* and real 'bool' under C++.  It also avoids warnings such as          */
/* C++ keyword 'bool' used as identifier.  It can be overridden by      */
/* defining IMPLEMENT_BOOL_AS_ENUM or IMPLEMENT_BOOL_AS_INT.            */
#undef _bool

#  define _bool int
#  define _false 0
#  define _true 1

#ifdef _bool
#  ifdef __CC_NORCROFT
#    define bool _bool /* avoids "'bool' is reserved word" warning      */
#  else
    typedef _bool bool;
#  endif
#  define true _true
#  define false _false
#endif

#define YES   true
#define NO    false
#undef TRUE             /* some OSF headers define as 1                 */
#define TRUE  true
#undef FALSE            /* some OSF headers define as 1                 */
#define FALSE false

/* 'uint' conflicts with some Unixen sys/types.h, so we now don't define it */
typedef unsigned8  uint8;
typedef unsigned16 uint16;
typedef unsigned32 uint32;

typedef unsigned   Uint;
typedef unsigned8  Uint8;
typedef unsigned16 Uint16;
typedef unsigned32 Uint32;

/*
 * Rotate macros
 */
#define ROL_32(val, n) \
((((unsigned32)(val) << (n)) | ((unsigned32)(val) >> (32-(n)))) & 0xFFFFFFFFL)
#define ROR_32(val, n) \
((((unsigned32)(val) >> (n)) | ((unsigned32)(val) << (32-(n)))) & 0xFFFFFFFFL)

#  define FOPEN_WB     "wb"
#  define FOPEN_RB     "rb"
#  define FOPEN_RWB    "rb+"

#ifndef FILENAME_MAX
#  define FILENAME_MAX 256
#endif

#ifdef __CC_NORCROFT
#  ifndef COMPILING_ON_UNIX     /* suppress if maybe non-norcroft lib */
#    define LIBRARY_IS_NORCROFT 1
#  endif
#  ifdef LIBRARY_IS_ALIEN       /* unify with the 3 previous lines?   */
#    undef LIBRARY_IS_NORCROFT
#  endif
#endif

#ifdef LIBRARY_IS_NORCROFT
/*
 * Calls to all non-ansi functions are removable by macros here.
 */
#ifdef __cplusplus
extern "C" {
#endif
/* These routines have no floating point abilities.                     */
extern int _vfprintf(FILE *stream, const char *format, __va_list arg);
extern int _vsprintf(char *s, const char *format, __va_list arg);
extern int _fprintf(FILE *stream, const char *format, ...);
extern int _sprintf(char *s, const char *format, ...);
#ifdef __cplusplus
}
#endif
#else /* LIBRARY_IS_NORCROFT */
#  define _vfprintf vfprintf
#  define _vsprintf vsprintf
#  define _fprintf fprintf
#  define _sprintf sprintf
#endif /* LIBRARY_IS_NORCROFT */

#define EXIT_warn                0
#define EXIT_error               1
#define EXIT_fatal               1

/* For systems that do not define EXIT_SUCCESS and EXIT_FAILURE */
#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS           0
#endif
#ifndef EXIT_FAILURE
#  define EXIT_FAILURE           EXIT_error
#endif

#ifndef UPDATE_PROGRESS
#  define UPDATE_PROGRESS() ((void)0)
#endif

#ifndef IGNORE
#define IGNORE(x) (x = x)  /* Silence compiler warnings for unused arguments */
#endif

/* Define endian-ness of host */

#if defined(__acorn) || defined(__mvs) || defined(_WIN32) || \
  (defined(__alpha) && defined(__osf__))
#  define HOST_ENDIAN_LITTLE
#elif defined(__sparc) || defined(macintosh)
#  define HOST_ENDIAN_BIG
#else
#  define HOST_ENDIAN_UNKNOWN
#endif

#endif

/* end of host.h */
