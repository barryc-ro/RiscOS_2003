/* toolconf.c - module to hold a tool's configuration database. */
/* Copyright (C) Advanced RISC Machines Limited, 1995. All rights reserved. */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef toolconf_h
#define toolconf_h


#include "host.h"


#ifdef __cplusplus
extern "C" {
#endif


/* toolconf should be used for all toolkit configuration. A toolconf is opaque
but can be accessed by the functions in this header file. It can be read from
and written to a file in text format, but there are at present no functions to
turn it into a binary format for inclusion in another file (e.g. a project).

A toolconf file is intended to be user editable if required. There are some
#if and #endif commands which the user can use to force a different path through
the file. However, I don't know anything much about this - speak to Mike Williams.
In any case, this information is lost as the file is read - all that remains is
the resulting values.

A toolconf contains a load of (tag, value, toolconf) entries. toolconf is the 
child toolconf, generally NULL. Here is an example file:

ATLANTA
{ATLANTA
PARALLELPORT=1
EXTERNALDOWNLOAD=1
IMAGECMD=%F,1,HN62408,1,+00020000,=ffffffc0 -n -r=l -v -q
STARTUPCMD=c:\arm200\atlanta\demon\atlanta,1,HN62408,1,00000000,=0001ffc0 -n -v -r=l -q
}
NAME=fred

Everything in capitals looks awful but is easier for comparison (lower case would be better).

Here ATLANTA is the child toolconf, and it contains four options. The root toolconf contains
only (ATLANTA, NULL, child) and (NAME, fred, NULL).

*/


/* the toolconf type */
typedef void *toolconf;


/* A config database is a hash table indexed by option strings. There is
 * a single root - ToolConf_Base. However all the functions take the
 * database as the first argument.
 */

/* functions for adding to the config database. returns the database
 * handle. */
extern toolconf ToolConf_Add(toolconf hashv,const char *optstring);
/* any option in the config can have a child.
 * a child is a separate database for that option. To add a child call
 * AddChild() instead of Add() - it returns the child config database
 * rather than the parent. */
extern toolconf ToolConf_AddChild(toolconf,const char *optstring);

/* functions for extracting from the config database. The lookup and child
 * functions will search the parent for the tag if it's not found in the
 * child specified. Thus a child acts like a delta on the parent.
 */
extern char *ToolConf_Lookup(toolconf,const char *tag);
extern toolconf ToolConf_Child(toolconf,const char *tag);
extern toolconf ToolConf_Parent(toolconf);

/* These versions do *not* look into the parent */
extern char *ToolConf_FlatLookup(toolconf,const char *tag);
extern toolconf ToolConf_FlatChild(toolconf,const char *tag);

/* enumerate all the tags in a config. This does not list things in the
 * parent, only the child. Similarly NumberOfTags does not go to the parent.
 * Enumeration is stopped if the "proc" returns non-0.
 */
typedef int ToolConf_TagEnumProc(toolconf,
                                 const char *tag,const char *value,
                                 void *arg);
extern void ToolConf_EnumerateTags(toolconf,ToolConf_TagEnumProc *,void *arg);
extern unsigned int ToolConf_NumberOfTags(toolconf);

/* function to read a config file. toolname is, e.g., "armsd". path is
 * the argv[0] passed to the tool. returns the database handle.
 */
extern toolconf ToolConf_Read(toolconf,const char *path, const char *toolname);

extern bool ToolConf_Write(const toolconf hb, const char *pathname);

extern toolconf ToolConf_Base;     /* the root hashv */

/* A function to completely destroy the config database. This wipes out
 * the entire tree, so use with care! */
extern void ToolConf_Reset(toolconf);

/* ==== useful functions ==== */

/* case independent compare */
extern int ToolConf_Cmp(const char *s1,const char *s2);

/* take a string of form xMb/ykHz, etc., and return x*1024*1024/y*1000 etc. */
extern unsigned long ToolConf_Power(const char *s,int power_of_two);

/* take option (as returned from lookup), a flags word, a bitflag,
 * and add that bitflag to the flags word as a boolean.
 * set_or_clear specifies whether to set of clear the bit.
 * values for "set" (or clear if set_or_clear is FALSE) are:
 * TRUE/YES/ON/HIGH/HI/1, and for "clear" (...) are:
 * FALSE/NO/OFF/LOW/LO/0 
 */
extern unsigned long ToolConf_AddFlag(const char *option,unsigned long word,
                                      unsigned long flag,int set_or_clear);

/* ToolConf_DLookup_int: defaulted lookup of integer. looks up 'tag' and returns it's 
associated integer value if available, else 'default_value' */
extern int ToolConf_DLookupInt(toolconf hash, char *tag, int default_value);

/* ToolConf_UpdateInt: sets the integer value of 'tag', creating it if it
doesn't exist */
extern int ToolConf_UpdateInt(toolconf hash, char *tag, int value);

int ToolConf_DLookupChildInt(toolconf hash, char *parent, char *tag, int default_value);
int ToolConf_UpdateChildInt(toolconf hash, char *parent, char *tag, int value);

int ToolConf_UpdateChild(toolconf hash, char *parent, char *tag, char *value);
char *ToolConf_LookupChild(toolconf hash, char *parent, char *tag);

/* ToolConf_New: creates a new heap of the given size. If 'size' is -1, a default
size is used */
extern toolconf ToolConf_New(int size);

#ifdef __cplusplus
}
#endif


#endif
