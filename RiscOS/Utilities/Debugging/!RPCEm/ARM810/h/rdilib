/* rdilib.h - Common ARMulator RDI code
 * Copyright (C) 1996 Advanced RISC Machines Limited. All rights reserved.
 *
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef rdilib_h
#define rdilib_h

#include "armdefsp.h"
#include "multirdi.h"
#include "dbg_cp.h"
#include "dbg_conf.h"
#include "dbg_rdi.h"
#include "dbg_hif.h"

/* You supply your own RDI_open, but it can call: */
extern int ARMul_RDIInitFail(int exitcode);
extern void ARMul_RDIInit(ARMul_State *state, unsigned type);

/* returns TRUE if "virgin" */
extern int ARMul_RDIGetState(ARMul_State **state);

/* For the rest we supply: */
extern int ARMul_RDIClose(void);
extern int ARMul_RDIRead(ARMword source, void *dest, unsigned *nbytes);
extern int ARMul_RDIWrite(const void *source, ARMword dest, unsigned *nbytes);
extern int ARMul_RDICPURead(unsigned mode, unsigned long mask, ARMword *buffer);
extern int ARMul_RDICPUWrite(unsigned mode, unsigned long mask, ARMword const *buffer);
extern int ARMul_RDICPRead(unsigned CPnum, unsigned long mask, ARMword *buffer);
extern int ARMul_RDICPWrite(unsigned CPnum, unsigned long mask, ARMword const *buffer);
extern int ARMul_RDISetBreak(ARMword address, unsigned type, ARMword bound,
                             PointHandle *handle);
extern int ARMul_RDIClearBreak(PointHandle handle);
extern int ARMul_RDISetWatch(ARMword address, unsigned type, unsigned datatype,
                             ARMword bound, PointHandle *handle);
extern int ARMul_RDIClearWatch(PointHandle handle);
extern int ARMul_RDIExecute(PointHandle *handle);
extern int ARMul_RDIStep(unsigned ninstr, PointHandle *handle);
extern int ARMul_RDIInfo(unsigned type, ARMword *arg1, ARMword *arg2);

extern ARMword ARMul_Debug(ARMul_State *state, ARMword pc, ARMword instr);

#endif
