/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                                                                             *
*                                  MMUlator                                   *
*                                                                             *
*           Instruction accurate MMU/cache emulator for ARMulator             *
*                                                                             *
*                   (c) 1993-95 Advanced RISC Machines Ltd.                   *
*                                                                             *
* Authors: Michael Williams <mwilliam>                                        *
*          Clive Jones <cjones>                                               *
*                                                                             *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef armmmup_h
#define armmmup_h

#include "armdefs.h"
#include "debug.h"

/* Macros that can be set when compiling this file:
 *
 * BENCHMARKING - compile in code that keeps a real-time clock. Goes
 *              quite a bit slower, though.
 * INSTRTRACE - spits out a trace of loads of things which can be
 *              interpretted by another tool.
 * TRACEFILE - points to a file (named pipe) to dump the INSTRTRACE to. If
 *              not set, we use an internet domain socket instead.
 * PORT - port number for said internet domain socket.
 * mmuARM700 - build an ARM700 cache model.
 * mmuARM710 - build an ARM710 model (same as ARM700, but different chip I.D.)
 * mmuARM710a - build an ARM710a cache model
 * mmuARM600 - build an ARM600 cache model.
 * mmuARM610 - build an ARM610 model (same as ARM600, but different chip I.D.)
 * mmuARM3 - build an ARM3 model (not complete).
 * MCLK - a default speed (in Hz) for the memory clock (only useful with
 *              BENCHMARKING).
 * FCLK - a default speed (in Hz) for the processor clock.
 * DEFAULT_MEMORY_TYPE - no longer used.
 * VERBOSE_COUNT - keep a count of loads and stores.
 * COUNT_CACHE_MISSES - keep a count of cache misses.
 * COUNT_TRANSLATIONS - keep a count on the number of translation table walks.
 * TRACKMMUREGS - keep track of the values written into MMU registers.
 * DEBUG - enable console trace output (tracks all accesses).
 * DEBUGFUNCS - compile calls to functions that can dump some of MMUlators's
 *              state. (The functions themselves appear to have been lost.)
 * OS_HAS_ENSURE - signals that the armos.c model does nasty things with
 *              virtual memory, and so provides an ARMul_OSEnsure function
 *              which ensures that a page is mapped in (for RDI accesses).
 *              See vmos.c for scary detail.
 * NOIO - don't compile in code for mapping sections of physical memory as
 *              external I/O code. (Goes about 0.5% quicker. 8-)
 */

typedef void *toolconf;

#ifdef INSTRTRACE
#  include "armtrace.h"
#endif


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                           General purpose macros                            *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* G.P. "bits of word" macro - returns bits 'to-1..from' */
#define mmuBITS(var,from,to) (((var) << (32-(to))) >> (32-(to)+(from)))
#define BYTEinWORD(x) ((x) & 3)
#define WORDin2(x) mmuBITS(x,2,12)
#define SMALLin2(x) mmuBITS(x,10,12)
/* This macro gets the word from "array" with "address". Simply using       */
/* array[WORDin2(address)] implies to the C compiler that you wish to word  */
/* align "address" first. This dreadful hack uses the fact that the address */
/* is word aligned. */
#define GETWORDin2(array,address) \
  ( (ARMword *)(((unsigned8 *)(&(array)[0]))+((address)&0xffc)) )

#define GETHALFin2(array,address,reverse) \
  ( (unsigned16 *)(((char *)(&(array)[0]))+(((address)&0xffe)^((reverse)?2:0))) )

#define GETBYTEin2(array,address,reverse) \
  ( ((unsigned8 *)(&(array)[0]))+(((address)&0xfff)^((reverse)?3:0)) )

/* Similarly, GETSMALLin2 takes an address and returns the SmallLevel2 that
 * address is in for that vl2.
 * Equivalent to &(vl2->page.t.small[SMALLin2(address)])
 */

#define GETSMALLin2(vl2,address) \
  ((SmallLevel2 *)((unsigned8 *)((vl2)->page.t.small)+(address & 0xc00)))


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                                                                             *
*                                Memory model                                 *
*                                                                             *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                Macros defining the geometry and features of                 *
*                   the memory system, the cache, TLB etc.                    *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Macros defining the structure of the memory and for converting addresses
 * into array offsets in the structure */
#define LEVEL2SIZE (1024)
#define LEVEL1SIZE (256)
#define MEMSIZE (4096)

#define BYTEin2(x) ((x) & 0x0fff)
/* This would need three shifts, so a mask is used. */
#define BYTEin2R(x) (((x) & 0xffc) | (3-BYTEinWORD(x))) /* Reverse endian */

#define HALFin2(x) ((x) & 0x0ffe)
/* This would need three shifts, so a mask is used. */
#define HALFin2R(x) HALFin2((x)^2) /* Reverse endian */

#define LEVEL2in1(x) (((x)>>12)&0xff)
#define BLOCKin1(x) mmuBITS(x,10,20)

#define LEVEL1inMEM(x) ((x)>>20)

#define PROCESSORSPEED (mem->master_clock/mem->fdiv)
#define MEMORYSPEED (mem->master_clock/mem->mdiv)

/* Macros to deal with cache lines etc. */
#define CACHEBLOCKS (1<<LOGCACHEBLOCKS)
#define CACHEWORDS (1<<LOGCACHEWORDS)
#define CACHEBLOCKin2(mem,x) (((x)&0xfff)>>((mem)->cache.log_words+2))
#define WORDinLINE(mem,x) (((x)>>2)&((mem)->cache.words-1))


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                             Memory definitions                              *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Macros for handling timers. */
#define CLOCKWB(bitfield,addrs,memcyc,time,words,idx,max_words) \
  bitfield>>=1;                                      \
  if (bitfield & 1) {                                \
    addrs--;                                         \
  }                                                  \
  words--;                                           \
  idx=(idx==0) ? max_words-1 : idx-1;                \
  memcyc=time[idx]


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                              Type structures                                *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Pages of memory (4Kb) -- arranged as contiguous words */

/* A 1Kb level 2 */
typedef struct {
  ARMword word[LEVEL2SIZE/4];
} SmallLevel2;

typedef struct {
  union {
    ARMword word[LEVEL2SIZE];
    SmallLevel2 small[4];
  } t;
} Level2;



typedef struct memory_str Memory;


#define BAD_PHYS_ADDR ((ARMword)~0)

#if 0

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                              Physical memory                                *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Three layer structure */

typedef Level2 PhysLevel2;

/* These are an intermediate structure that contain a pointer to the actual */
/* physical memory below. References to physical memory in the model are    */
/* kept as (PhysLevel2Ptr *) rather than (PhysLevel2 *) so that when a      */
/* level2p is undummied all references to it (i.e. multiply mapped pages)   */
/* are effectively undummied. */

typedef struct {
  PhysLevel2 *page;
  ARMword address;              /* The actual physical address */
  /* AccessBlock access; */
} PhysLevel2Ptr;

typedef struct {
  PhysLevel2Ptr page[LEVEL1SIZE]; /* Pointers to the physical pages */
} PhysLevel1;

typedef struct {
  PhysLevel1 *level[MEMSIZE];   /* Pointers to the level */
  /* AccessBlockList *access[MEMSIZE]; */
} PhysMemory;
#endif


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                        Access macros for cache etc.                         *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Address -> Cache mapping is:          @@@ use 64bit words on 64bit hosts
 *   bits  0->2:     byte
 *   bits  2->7:     bits in cached? word
 *   bits  7->12:    word in the cached? word array
 *   bits  2->12:    words in the page */

#define FLAG_WORD_BITS 5                /* True for 32-bit architectures */
typedef ARMword flag_word;      /* A word of 1<<FLAG_WORD_BITS bits */

#define ISCACHED(ADDRESS,VP) \
  ((VP)->cached[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] & \
   (1l<<mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)))

/* @@@ These macros limit log_words to 5, i.e. 32 words per line. */
/* @@@ could be more on a 64-bit architecture */

/* Mark word as cached */
#define MARKCACHE(MEM,ADDRESS,VP) \
  ((VP)->cached[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] |=                     \
   (((MEM)->cache.word_mask)<<mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)))

#define MARKCACHEword(MEM,ADDRESS,VP) \
  ((VP)->cached[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] |=                     \
   (1l<<mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)))

/* Uncaching also involves clearing the words */
#define UNCACHE(MEM,ADDRESS,VP) \
{ ARMword *tmp=GETWORDin2((VP)->page.t.word,ADDRESS),word;                  \
  unsigned int i; for (i=0;i<(MEM)->cache.words;i++,tmp++) *tmp=0;          \
  word=~(((MEM)->cache.word_mask)<<(mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)));  \
  (VP)->dirty[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] &= word;                \
  (VP)->cached[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] &= word; }

#define ISDIRTY(MEM,ADDRESS,VP) \
   ((VP)->dirty[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] & \
    ((MEM)->cache.word_mask<<mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)))

#define MARKDIRTY(ADDRESS,VP) \
   ((VP)->dirty[mmuBITS(ADDRESS,FLAG_WORD_BITS+2,12)] |= \
    (1l<<mmuBITS(ADDRESS,2,FLAG_WORD_BITS+2)))


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                                Access flags                                 *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

typedef ARMword TFlags;         /* Access rights etc. */

/* allocated bits:
 *
 * 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
 * 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
 * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 * R S A A D D F F W R R R W . . . . . . . S P V D D D D U C B . .
 *     P P F F W R R D C B B . . . . . . . N L   N N N N       . .
 */

/* Read/Write permissions in bits 25..22 */
#define TFread                  0x00400000 /* Can read */
#define TFwrite                 0x00800000 /* Can write */
#define TFrw                    0x00c00000 /* Read and write */
#define TFfastr                 0x01000000 /* Can read via. fast path */
#define TFfastw                 0x02000000 /* Can write via. fast path */

/* General access permissions */
#define TFbuffer                0x00000004 /* Bufferable (as descriptor) */
#define TFcache                 0x00000008 /* Cacheable (as descriptor) */
/* position of 'update' bit affects MMU_UPDATEABLE below */
#define TFupdate                0x00000010 /* Updateable (as descriptor) */
#define TFdomain                0x000001e0 /* Domain number (as descriptor) */
#define TFdomain_get(X)         (((X)&TFdomain)>>5)
#define TFvalid                 0x00000200 /* TFlags are valid */
#define TFpagesize              0x00000c00 /* Size of page */
#define TFpagesize_small        0x00000000 /* Small (4Kb) page */
#define TFpagesize_large        0x00000400 /* Large (64Kb) page */
#define TFpagesize_sectn        0x00000800 /* Section (1Mb) */
#define TFsection               0x00000800 /* Set iff a section */
#define TFpagesize_get(X)       (((X)&TFpagesize)>>10)
#define TFpagesize_value(X)     (1l<<(TFpagesize_get(X)<<2l))
#define TFdummy                 0x00000001 /* Level2p is dummy */
#define TFhandler               0x00000002 /* Level2p has an access handler */
#define TFwriteback             0x00080000 /* Page is write-back */
#define TFrealbuff              0x00100000 /* Page can go through WB */
#define TFrealcache             0x00200000 /* Page can be cached */

/* Bits to shift an S.ap.df nibble by to get it into place in an access word */
#define TFaccess_index_shift (26)
/* These five/six bits also make up the index into the lookup array */
#define TFdomainflags           0x0c000000 /* Expanded domain access flags */
#define TFdomainflags_lo        0x04000000
#define TFdomainflags_hi        0x08000000
#define TFapflags               0x30000000 /* Access permission flags */
/* Spare bit here for S flag */
/* Spare bit here for R flag */
#define TFapflags_get_1100(X)   (((X)>>TFaccess_index_shift)&0xc)
/* Merge descriptor bits with lookup */
#define TFmergemask             0x00000fff

/* The lookup contains both modes, one per short word - shift by this much */
#define TFother_mode_shift (16)

/* Bits for creating the lookup table - fast bits are cleared after */
#define TFnone                  0x00000000
#define TFusrrw                 (TFfastr | TFfastw | TFwrite | TFread)
#define TFsvcrw                 (TFusrrw>>TFother_mode_shift)
#define TFarw                   (TFusrrw | TFsvcrw)
/* Other mode bits */
#define TForead                 (TFread>>TFother_mode_shift)
#define TFowrite                (TFwrite>>TFother_mode_shift)
#define TFofastr                (TFfastr>>TFother_mode_shift)
#define TFofastw                (TFfastw>>TFother_mode_shift)

#define TFthis_mode(bits)       ((bits)>>19<<19)
#define TFother_mode(bits)      ((bits)>>(19-TFother_mode_shift)<<19)


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                 The virtual memory/cache/Translation tree                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Cache data is held at the leaves of this tree. Pointers to the mapped     */
/* physical memory are held in it, and Translation data (TFlags, above) are  */
/* also kept. For optimal performance we keep several pointers to the cached */
/* data, one per access type (read/write). */

typedef struct cache_line CacheLine;
typedef struct cache_block CacheBlock;

/* VirtLevel2 contains only cached data, and zeroes for all other words. */
typedef struct {
  Level2 page;                  /* 4Kb page */
  flag_word cached[LEVEL2SIZE>>FLAG_WORD_BITS]; /* Cached flags (1bit/word) */
  flag_word dirty[LEVEL2SIZE>>FLAG_WORD_BITS];  /* Dirty flags (1bit/word) */
#ifdef LRU_SUPPORT
  SmallLevel2 *fast;            /* super_fast_path cache */
  CacheLine *cache_line[LEVEL2SIZE];    /* pointers to cache blocks (1/word) */
#endif
} VirtLevel2;

/* A VirtLevel1 contains pointers to 256 (*4Kb) physical pages, as defined   */
/* by the memory mapping, the 256 corresponding virtual pages (containing    */
/* the cached data), access flags for the 1024 subpages, and read and write  */
/* pointers, which duplicate the "cache" pointers, but may be NotFastAccess  */
/* if the page is not readable; writable; mapped in the TLB etc. */
typedef struct {
  ARMword phys_addr[LEVEL1SIZE];        /* The physical addresses */
  VirtLevel2 *cache[LEVEL1SIZE];        /* The cached page */
  TFlags access[LEVEL1SIZE*4];          /* Access */
  /* These pointers duplicate the "cache" pointers, but may be "NotFastAccess"
   * to indicate no access. */
  VirtLevel2 *read[LEVEL1SIZE*4];       /* Same, only 1Kb... */
  VirtLevel2 *write[LEVEL1SIZE*4];      /* ...and may be NotFastAccess */
} VirtLevel1;

/* The base of the tree contains 4096 pointers to the 1Mb level1 structures  */
typedef struct {
  VirtLevel1 *level[MEMSIZE];
} VirtMemory;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                          Shared memory structure                            *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* An entry in the cache - used for cache flushing/purging */
struct cache_line {
  VirtLevel2 *page;
#if 0
  PhysLevel2Ptr *phys;          /* pointer to the physical page (for dirty lines) */
#else
  ARMword phys_addr;            /* for dirty lines */
#endif
  ARMword address;              /* address of the block in VM */
#ifdef LRU_SUPPORT
  CacheBlock *block;            /* pointer to the block this is in */
  unsigned int entry;           /* and which one it is in that block */
  flag_word set,clear;          /* cached versions of set/clear flagwords */
#endif
};

struct cache_block {
  CacheLine *line;              /* cache entries - 1 for each line */
  flag_word counter;            /* used for LRU and round-robin replacement */
};

typedef struct {
  unsigned int fetching_line;   /* flag (value from 1->words) words+1 for
                                 * a read_cache_replace */
  enum {
    fetch_INTERNAL=0, fetch_OPC, fetch_DATA, fetch_NONE
    } fetch_type;               /* primarily for whether we've gone internal */

  CacheBlock *block;
  enum {
    CacheReplace_RNG,           /* Simple (Unix/ANSI) RNG */
    CacheReplace_ARM6RNG,       /* Has an ARM6 RNG (must be <=64 lpb) */
    CacheReplace_ARM7RNG,       /* Has an ARM7 RNG (must be <=4 lpb) */
    CacheReplace_ARM8RNG,       /* Has an ARM8 RNG */
    CacheReplace_LRU,           /* Least recently used */
    CacheReplace_RoundRobin,    /* Has a per-block round robin counter */
    CacheReplace_GblRndRobin    /* Has a *global* round robin counter */
  } replace;                    /* Cache replacement algorithm */
#define CACHE_WORK_WORDS 3
  unsigned32 work[CACHE_WORK_WORDS]; /* three words for the RNG to work with */
  unsigned32 seed[CACHE_WORK_WORDS]; /* and the seeding for them */
  struct {
    unsigned int base;
    unsigned int flag;
    unsigned int flush;         /* where to flush from (config) */
    flag_word valid;            /* list of valid values */
  } lock_down;                  /* variables for controlling lock down */
  unsigned int log_blocks,size,log_words; /* config */
  unsigned int blocks,words;    /* useful words */
  int log_size;                 /* can be -1 */
  unsigned int replace_ticks;   /* number of cycles it takes to start a
                                 * cache replacement */
  flag_word word_mask;
  flag_word interlock;          /* which cache blocks are interlocked on
                                 * the next cycle. */
  ARMword *dirty;               /* Where a cache can write dirty data for
                                 * writing after the line-fetch completes */
  CacheLine victim;             /* Victim data. If the "phys" is non-NULL,
                                 * then this, and the "dirty_data" block,
                                 * have data that needs to be written out */
  CacheLine *fetching;          /* Block being fetched into */
  ARMword *write;               /* Points to memory being fetched into */
  unsigned int purge;           /* Whether to purge this block when done */

#ifdef LRU_SUPPORT
  flag_word *lru_set;           /* bits to set in LRU word */
  flag_word *lru_clear;         /* bits to clear. */
#endif
} Cache;

typedef struct {
  VirtLevel1 *usr;              /* The TLB entries - USR mode */
  VirtLevel1 *svc;              /*                 - SVC modes */
  ARMword offset;               /* Offset in vl1 of the page (0..255) */
  ARMword pagesize;             /* In kilobytes */
  ARMword l1,l2;                /* actual entries read from memory (for debugging) */
  ARMword virt;
} TLBEntry;

/* TLB - used for selective and automatic junking of TLB entries */
typedef struct {
  TLBEntry *buffer;             /* The TLB entries */
  unsigned nexttodie;           /* The next to be freed */
  unsigned int size;            /* # entries in the TLB */
  struct {
    unsigned int base;
    unsigned int flag;
    unsigned int flush;
    flag_word valid;
  } lock_down;                  /* variables for controlling lock down */
} TLB;

/* Parts of the MMU held in the memory structure */
typedef struct {
  ARMword ttb;
  unsigned char dac[16];        /* Domain access control */
  ARMword control;              /* Control register */
  unsigned state;               /* State for error checks */
  ARMword control_hi,control_lo;
                                /* bits forced hi/lo in the control reg. */
  ARMword chip_id;              /* Contents of reg 0 */
  int arch;                     /* Architecture version */
  unsigned char RegWords[17];   /* Register words map */
  ARMword read[16];             /* read r0-r7 */
#ifdef TRACKMMUREGS
  ARMword write[16];            /* Keep a track on MMU writes */
#endif
} MMU;

typedef struct {
  unsigned int words,addrs;     /* words/addresses in the buffer */
  flag_word bitfield;           /* S/N bit flags */
  unsigned int max_words,max_addrs; /* config data */
  unsigned long *time;          /* static cyclic buffer for access timings */
  int idx_in,idx_out;           /* index into that array */
} WriteBuff;

typedef struct {
  /* We use a ticker to count when the next memory cycle will be.
   * This is decremented by "FCLK" every core cycle, and incremented
   * by "MCLK" every memory cycle. When it goes negative, we do a
   * memory cycle.
   */
  long next_mem_cycle;
  unsigned long fdiv,mdiv;      /* Clock divisors */
  unsigned int wb_cycle;        /* whether this is a write-buffer cycle */
  unsigned long refclkcfg,pllcfg,pllrange; /* PLL config */
  unsigned long control;        /* PLL control word */
  unsigned long conf_fclk,conf_mclk; /* configured fclk and mclk */
} Clock;


/* MMU/Cache properties */
#define MMU_Updateable_Prop         TFupdate /* Page tables can have updateable bit */

/* Swap does/doesn't go through WB */
#define MMU_BufferSWP_Prop        0x00000100

/* Implements a write-back cache */
#define Cache_WriteBack_Prop      0x00000200

/* Cache blocks are individually interlocked after any write */
#define Cache_BlockInterlock_Prop 0x00000400

/* The entire cache is interlocked for one cycle after a line fetch */
#define Cache_WBInterlock_Prop    0x00000800

/* Cache can be lock-down */
#define Cache_LockDown_Prop       0x00001000
#define Cache_LockDownFlush_Prop  0x00002000 /* lock down base sets flush base */

/* TLB can be lock-down */
#define TLB_LockDown_Prop         0x00004000
#define TLB_LockDownFlush_Prop    0x00008000 /* lock down base sets flush base */

/* Clocking arrangements */
#define MMU_PLLClock_Prop         0x00010000 /* Clock comes from a PLL */
#define MMU_ExternalSNA_Prop      0x00020000 /* whether sNa comes from P15/r15 */

/* Whether bad accesses to P15 bounce */
#define MMU_Undefined_Prop        0x00040000

/* Whether LRU is used on reads or writes, both or neither */
#define Cache_LRURead_Prop        0x00080000
#define Cache_LRUWrite_Prop       0x00100000

/* Whether external memory sees idle cycles */
#define MMU_IdleCycles_Prop       0x00200000

/* Whether we have a write-buffer */
#define MMU_WriteBuffer_Prop      0x00400000


/* Combination opaque memory type */
struct memory_str {
#ifdef LRU_SUPPORT
  VirtLevel2 *fast_l2;
#else
  SmallLevel2 *fast_l2;         /* Cached fast pointer */
#endif
#if 0
  PhysMemory *phys;             /* Pointer to physical memory struct */
#endif
  VirtMemory *virt;             /* Pointer to this mode virtual memory struct */
  unsigned bigendSig;           /* bigendian signal to core */
  ARMul_MemInterface child;     /* Thing that handles physical memory for us */
  unsigned long NumFcycles;     /* Fast cycle counter */
  flag_word prop;               /* MMU properties (see above) */
  /* 14 words to here */
  Clock clock;                  /* Clock/timing values */
  VirtMemory *othermode;        /* Pointer to "The other mode" */
                                /* "This mode" is on virt */
  unsigned abortSig;            /* abort flag */

  Cache cache;
  MMU mmu;
  TLB tlb;
  WriteBuff wb;
#if 0
  struct {
    unsigned int
      cache_replace,
      tlb_replace,
      wb_flush,
      wb_stall;
  } Counter;
#endif
  unsigned long size;           /* memory size */
  unsigned priv_mode;           /* boolean flag for whether we're in a priv'd mode */
  ARMul_State *state;           /* handle back onto ARMul_State */

  /* Co-processor bits - mainly used during initialisation */
  struct {
    ARMword flag;
    ARMul_CPInterface bus;
    armul_CPInit *init;
    toolconf config;
    void *sibling;
  } cp;

  /* Largest structures at the end */
  VirtMemory usr_mode;          /* Current memory map - these are */
  VirtMemory svc_mode;          /* a flat map if the MMU is disabled */
  VirtMemory raw_usr;           /* Actual memory map - reflects the state */
  VirtMemory raw_svc;           /* of the TLB/cache even if the MMU is off */

  int verbose_flag;
};

/* Macros for extracting the various memory pointers from the ARMul_State */

#define VIRTUAL(memory) ((memory)->virt)
#define SETVIRTUAL(memory,vm) ((memory)->virt=(vm))
#ifdef LRU_SUPPORT              /* no fastpath on LRU versions */
#  define SETFASTL2(mem,vl2,address,interlocked) \
  (((vl2)->fast=GETSMALLin2(vl2,address)), \
   (((mem)->fast_l2=(vl2))), \
   ((mem)->cache.interlock=(interlocked)))
#  define FASTL2(mem) ((mem)->fast_l2)
#else
#  define SETFASTL2(mem,vl2,address,interlocked) \
  (((mem)->fast_l2=GETSMALLin2(vl2,address)), \
   ((mem)->cache.interlock=(interlocked)))
#  define FASTL2(mem) ((mem)->fast_l2)
#endif

#define SETABORTING(state) SETVIRTUAL(state,Aborting)
#define ABORTING(state) (VIRTUAL(state)==Aborting)

/* Cache access macros */
#define Assoc(M,X) (((X)>>((M)->cache.log_words+2))&((M)->cache.blocks-1))
#define Entry(M,X) ((X)&((M)->cache.size-1))


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
*                          MMU Co-processor model:                            *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#define MMU_ID(mem) ((mem)->mmu.read[0])
#define MMU_FAULTSTATUS(mem) ((mem)->mmu.read[5])
#define MMU_FAULTADDR(mem) ((mem)->mmu.read[6])

#define FAULT(mem,status,domain,address) \
  (MMU_FAULTADDR(mem)=(address), \
   MMU_FAULTSTATUS(mem)=((domain)<<4)|(status))

#define ACCESS_FAULT(tf,mem,address) \
  ShowAccess(state,tf,TRUE);                         \
  FAULT(mem,((tf & TFdomainflags_lo) ?               \
             ((tf & TFsection) ? 0xd : 0xf) :        \
             ((tf & TFsection) ? 0x9 : 0xb)),        \
        TFdomain_get(tf),address)

#endif
