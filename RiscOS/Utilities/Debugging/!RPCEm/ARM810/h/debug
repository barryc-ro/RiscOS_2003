/* debug.h -- debugging macros
 *
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef __debug_h
#define __debug_h

#ifdef DEBUG
extern int MMU_debug;
#endif

/* Sort out various data collection macros */
#ifdef VERBOSE_COUNT
#  ifndef COUNT_CACHE_MISSES
#    define COUNT_CACHE_MISSES
#  endif
#  ifndef COUNT_TRANSLATIONS
#    define COUNT_TRANSLATIONS
#  endif
#endif

#if defined(DEBUGMACROS) || (defined DEBUG) || (defined ERROR)
#  define error0(F) fprintf(stderr,F)
#  define error1(F,A1) fprintf(stderr,F,A1)
#  define error2(F,A1,A2) fprintf(stderr,F,A1,A2)
#  define error3(F,A1,A2,A3) fprintf(stderr,F,A1,A2,A3)
#  define error4(F,A1,A2,A3,A4) fprintf(stderr,F,A1,A2,A3,A4)
#else
#  define error0(F)
#  define error1(F,A1)
#  define error2(F,A1,A2)
#  define error3(F,A1,A2,A3)
#  define error4(F,A1,A2,A3,A4)
#endif

#ifdef DEBUGMACROS
#  define MMU_debug 1
#endif

/* Debugging macro */
#if defined(DEBUGMACROS) || defined(DEBUG)
#  define FUNCTION(name) debug1("%s..",name)
#  define debug0(F) if (MMU_debug) printf(F)
#  define debug1(F,A1) if (MMU_debug) printf(F,A1)
#  define debug2(F,A1,A2) if (MMU_debug) printf(F,A1,A2)
#  define debug3(F,A1,A2,A3) if (MMU_debug) printf(F,A1,A2,A3)
#  define debug4(F,A1,A2,A3,A4) if (MMU_debug) printf(F,A1,A2,A3,A4)
#else
#  define FUNCTION(name)
#  define debug0(F)
#  define debug1(F,A1)
#  define debug2(F,A1,A2)
#  define debug3(F,A1,A2,A3)
#  define debug4(F,A1,A2,A3,A4)
#endif

#ifdef VERBOSE
#  define verbose(F) if (MMU_debug) puts(F)
#  define verbose0(F) if (MMU_debug) printf(F)
#  define verbose1(F,A1) if (MMU_debug) printf(F,A1)
#  define verbose2(F,A1,A2) if (MMU_debug) printf(F,A1,A2)
#  define verbose3(F,A1,A2,A3) if (MMU_debug) printf(F,A1,A2,A3)
#  define verbose4(F,A1,A2,A3,A4) if (MMU_debug) printf(F,A1,A2,A3,A4)
#else
#  define verbose(F)
#  define verbose0(F)
#  define verbose1(F,A1)
#  define verbose2(F,A1,A2)
#  define verbose3(F,A1,A2,A3)
#  define verbose4(F,A1,A2,A3,A4)
#endif

#ifdef REPORT
#  define report(X) fprintf(stderr,(X))
#  define report1(X,A1) fprintf(stderr,(X),(A1))
#  define report2(X,A1,A2) fprintf(stderr,(X),(A1),(A2))
#  define report3(X,A1,A2,A3) fprintf(stderr,(X),(A1),(A2),(A3))
#else
#  define report(X)
#  define report1(X,A)
#  define report2(X,A,B)
#  define report3(X,A,B,C)
#endif

#ifdef DEBUGFUNCTIONS

extern unsigned MemoryShow(ARMul_State *state);
extern int BytesInCache(ARMul_State *state);
extern void CheckCache(ARMul_State *state,ARMword iaddress);

#else
#  define CheckCache(X,Y)
#endif

#ifdef DEBUG
extern void ShowAccess(ARMul_State *state,TFlags s,int force);
extern ARMword LoadInstruction(ARMul_State *state,ARMword addr,ARMword inst);
#  define DEBUGDO(X) X
#else
#  define ShowAccess(X,Y,Z)
#  define LoadInstruction(X,Y,Z)
#  define DEBUGDO(X)
#endif

#endif
