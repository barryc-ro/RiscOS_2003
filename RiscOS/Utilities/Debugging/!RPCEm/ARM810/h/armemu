/***************************************************************************\
* armemu.h                                                                  *
* Version 1.30                                                              *
* ARMulator II macros.                                                      *
* Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.   *
* Written by Dave Jaggar.                                                   *
\***************************************************************************/

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/***************************************************************************\
*                               Shift Opcodes                               *
\***************************************************************************/

#define LSL 0
#define LSR 1
#define ASR 2
#define ROR 3

/***************************************************************************\
*               Macros to twiddle the status flags and mode                 *
\***************************************************************************/

#ifdef MODE32
#define PCMASK PCBITS
#define PCWRAP(pc) (pc)
#else
#define PCMASK R15PCBITS
#define PCWRAP(pc) ((pc) & R15PCBITS)
#endif

#define SETR15PSR(s) if (state->Mode == USER26MODE) { \
                        state->Flags=(((unsigned)(s))>>28); /*@@@*/\
                        } \
                     else { \
                        state->Reg[15]=R15PC | ((s) & (CCBITS | R15INTBITS | R15MODEBITS)); \
                        ARMul_R15Altered(state) ; \
                      }

#ifndef MODE32
#define VECTORS 0x20
#define LEGALADDR 0x03ffffff
#define VECTORACCESS(address) (address < VECTORS && ARMul_MODE26BIT && state->prog32Sig)
#define VECTORLOAD(address) (address < VECTORS && ARMul_MODE26BIT && \
                             state->prog32Sig && (state->Processor & ARM_VectorLoad_Prop))
#define ADDREXCEPT(address) (address > LEGALADDR && !state->data32Sig)
#endif

#ifdef CYCLEBASED
#define INTERNALABORT(aborted,address) \
  if (address < VECTORS) \
    aborted = ARMul_DataAbortV ; \
  else \
    aborted = ARMul_AddrExceptnV ; \
  state->NrwSig = LOW ; \
  state->doutenSig = LOW ;
#else
#  ifdef ARM8BASED
#    define CORE_EXCEPTION(address,fsr) \
  if (state->mem.x.arm8.core_exception) \
    state->mem.x.arm8.core_exception(state,address,fsr)
#  else
#    define CORE_EXCEPTION(address,fsr)
#  endif
#  define INTERNALABORT(aborted,address) \
  if (address < VECTORS) { \
    CORE_EXCEPTION(address,0); \
    aborted = ARMul_DataAbortV ; \
  } else \
    aborted = ARMul_AddrExceptnV ;
#  define ARM8INTERNALABORT(aborted,address) \
  if (address < VECTORS) { \
    if (state->mem.x.arm8.core_exception) \
      state->mem.x.arm8.core_exception(state,address,0); \
    aborted = ARMul_DataAbortV ; \
  } else \
    aborted = ARMul_AddrExceptnV ;
#endif

#ifdef ARM8BASED
#  define MEM_ACCESS(state) ((state)->mem.x.arm8.access)
#else
#  define MEM_ACCESS(state) ((state)->mem.x.basic.access)
#endif

#ifdef MODE32
#define TAKEABORT ARMul_Abort(state,ARMul_DataAbortV,address)
#else
#define TAKEABORT if (state->Aborted == ARMul_AddrExceptnV) \
                     ARMul_Abort(state,ARMul_AddrExceptnV,address); \
                  else \
                     ARMul_Abort(state,ARMul_DataAbortV,address)
#endif
#define CPTAKEABORT if (!state->Aborted) \
                       ARMul_Abort(state,ARMul_UndefinedInstrV,instr); \
                    else if (state->Aborted == ARMul_AddrExceptnV) \
                       ARMul_Abort(state,ARMul_AddrExceptnV,address); \
                    else \
                       ARMul_Abort(state,ARMul_DataAbortV,address)

#ifdef CYCLEBASED

#ifdef CODE16
#define MASKINSTRUCTION(data,addr) if (INSTRUCTION16STATE) {BUSTOHWORD((addr), (data));}
#else
#define MASKINSTRUCTION(data,addr)
#endif

#define PREFETCH(dest,addr) if (state->abortSig) {         \
                               ARMul_PREFETCHABORT(addr) ; \
                               dest = ARMul_ABORTWORD ;    \
                               }                           \
                            else {                         \
                               dest = state->datainBus;    \
                               MASKINSTRUCTION(dest,addr); \
                               }
#endif

/***************************************************************************\
*               Different ways to start the next instruction                *
\***************************************************************************/

#define SEQ 0
#define NORMAL 0                /* ARM8... */
#define NONSEQ 1
#define PREFETCHED 1            /* ARM8... */
#define PCINCED 2
#define PCINCEDSEQ PCINCED
#define PCINCEDNONSEQ (PCINCED | NONSEQ)
#define PRIMEPIPE 4
#define RESUME 8

#define NORMALCYCLE state->NextInstr = SEQ

#define ARM8BUSUSEDN
#define ARM8BUSUSEDINCPCS  /* a standard PC inc and an S cycle */\
                      state->proc.arm8.busCycles = 1
#define ARM8BUSUSEDINCPCN /* a standard PC inc and an N cycle */ \
                      state->proc.arm8.busCycles = 1
#define ARM8INCPC  /* a standard PC inc */

#ifdef ARM8BASED
/* On ARM8 the PC value is never incremented during an instr execution */
#define BUSUSEDN ARM8BUSUSEDN
#define BUSUSEDINCPCS ARM8BUSUSEDINCPCS
#define BUSUSEDINCPCN ARM8BUSUSEDINCPCN
#define INCPC ARM8INCPC
#else
#define BUSUSEDN state->NextInstr |= NONSEQ /* the next fetch will be an N cycle */
#define BUSUSEDINCPCS  /* a standard PC inc and an S cycle */\
                      state->Reg[15] += INSTRUCTIONSIZE ; \
                      state->NextInstr = (state->NextInstr & 0xff) | PCINCEDSEQ
#define BUSUSEDINCPCN /* a standard PC inc and an N cycle */ \
                      state->Reg[15] += INSTRUCTIONSIZE ;  \
                      state->NextInstr |= PCINCEDNONSEQ
#define INCPC  /* a standard PC inc */ \
              state->Reg[15] += INSTRUCTIONSIZE ; \
              state->NextInstr |= PCINCED

#endif

#ifdef CYCLEBASED
#ifdef CODE16
#define FLUSHPIPE state->NextInstr |= PRIMEPIPE ; \
                  state->addrBus = PCM ; \
                  NCYCLE
#else
#define FLUSHPIPE state->NextInstr |= PRIMEPIPE ; \
                  state->addrBus = PC ; \
                  NCYCLE
#endif
#else
#define FLUSHPIPE state->NextInstr |= PRIMEPIPE
#endif

/***************************************************************************\
*                          Cycle based emulation                            *
\***************************************************************************/

#ifdef CYCLEBASED
#define SINGLECYCLEINSTR SCYCLE ; \
                         state->addrBus = PCWRAP(pc + INSTRUCTIONSIZE * 3) | state->addr01Bus ;
#define OUTPUTCP(i,a,b) state->NcpiSig = i ; \
                        state->cpaSig = a ; \
                        state->cpbSig = b
#define NCYCLE state->seqSig = LOW ; \
               state->NmreqSig = LOW
#define SCYCLE state->seqSig = HIGH ; \
               state->NmreqSig = LOW
#define ICYCLE state->seqSig = LOW ; \
               state->NmreqSig = HIGH
#define CCYCLE state->seqSig = HIGH ; \
               state->NmreqSig = HIGH
#else
#define SINGLECYCLEINSTR
#define OUTPUTCP(i,a,b)
#define NCYCLE
#define SCYCLE
#define ICYCLE
#define CCYCLE
#define NEXTCYCLE(c)
#endif

#ifdef CYCLEBASED
#define ADDRBYTE  state->NbwSig = LOW;  state->mas0Sig = LOW
#define ADDRHWORD state->NbwSig = LOW;  state->mas0Sig = HIGH
#define ADDRWORD  state->NbwSig = HIGH; state->mas0Sig = LOW
#ifdef CODE16
#define ADDRINSTR if (INSTRUCTION16STATE) { ADDRHWORD; } else { ADDRWORD; }
#else
#define ADDRINSTR ADDRWORD
#endif
#endif

/***************************************************************************\
*                 States of the cycle based state machine                   *
\***************************************************************************/

#ifdef CYCLEBASED
#define NEWINSTR        0
#define DESTPC3         1
#define STR2            2
#define STRB2           3
#define STM3            4
#define UNDEF           5
#define LDCBUSY         6
#define LDC1            7
#define LDC2            8
#define STCBUSY         9
#define STC1            10
#define STC2            11
#define STC3            12
#define MCRBUSY         13
#define MCR1            14
#define MCR2            15
#define MRCBUSY         16
#define MRC1            17
#define CDPBUSY         18
#define CDP1            19
#define RESET1          20
#define RESET2          21
#define KILLNEXT        22
#define ABORT1          23
#define MSR2            24
#define NEXTISNEW       25
#define DESTPC1         26
#define DESTPC2         27
#define WRITEPC1        28
#define WRITEPC2        29
#define MUL             30
#define LDR2            31
#define LDR3            32
#define LDRB2           33
#define LDRB3           34
#define SWP2            35
#define SWP3            36
#define SWPB2           37
#define SWPB3           38
#define SWP4            39
#define LDM2            40
#define LDM3            41
#define LDM4            42
#define LDM5            43
#define LDM6            44
#define LDM7            45
#define STM2            46
#define STM4            47
#define LDC3            48
#define MRC2            49
#define MRC3            50
#define ANABORT         51
#define LDRSB2          52
#define LDRSB3          53
#define LDRH2           54
#define LDRH3           55
#define LDRSH2          56
#define LDRSH3          57
#define STRH2           58
#define STRH3           59
#endif

/***************************************************************************\
*                 Macros to extract parts of instructions                   *
\***************************************************************************/

#define DESTReg (BITS(12,15))
#define LHSReg (BITS(16,19))
#define RHSReg (BITS(0,3))

#define DEST (state->Reg[DESTReg])

#define LHS (state->Reg[LHSReg])

#define MULDESTReg (BITS(16,19))
#define MULLHSReg (BITS(0,3))
#define MULRHSReg (BITS(8,11))
#define MULACCReg (BITS(12,15))
/* And, for 64-bit results */
#define MULLOReg MULACCReg
#define MULHIReg MULDESTReg
#define MULsetbit (BIT(20))
#define MULaccbit (BIT(21))
#define MULsigbit (BIT(22))

#define DPImmRHS (ARMul_ImmedTable[BITS(0,11)])
#define DPSImmRHS temp = BITS(0,11) ; \
                  rhs = ARMul_ImmedTable[temp] ; \
                  if (temp > 255) /* there was a shift */ \
                     ASSIGNC( rhs >> 31) ;

#ifdef MODE32
#define DPRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                  : GetDPRegRHS(state, instr))
#define DPSRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                   : GetDPSRegRHS(state, instr))
#else
#define DPRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                  : GetDPRegRHS(state, instr))
#define DPSRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                   : GetDPSRegRHS(state, instr))
#endif

#ifdef ARM8BASED
#ifdef MODE32
#define AssignDPRegRHS(rhs) \
  do if (BITS(4,11)==0) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    (rhs)=GetDPRegRHS(state,instr);        \
  } while (0)
#define AssignDPSRegRHS(rhs) \
  do if (BITS(4,11)==0) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    (rhs)=GetDPSRegRHS(state,instr);       \
  } while (0)
#else
#define AssignDPRegRHS(rhs) \
  do if (BITS(0,11)<15) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    (rhs)=GetDPRegRHS(state,instr);        \
  } while (0)
#define AssignDPSRegRHS(rhs) \
  do if (BITS(0,11)<15) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    (rhs)=GetDPSRegRHS(state,instr);       \
  } while (0)
#endif
#else /* ARM8 */
#define AssignDPRegRHS(rhs) (rhs) = DPRegRHS
#define AssignDPSRegRHS(rhs) (rhs) = DPSRegRHS
#endif /* ARM8 */

#ifdef ARM8BASED
#define DoIcycles(num) state->proc.arm8.takenIcycles = (num)
#else
#define DoIcycles(num) ARMul_Icycles(state, (num), 0L)
#endif

#ifdef ARM8BASED
#define Interlock1(reg) state->proc.arm8.interlock.req1=1<<(reg)
#define Interlock2(reg1,reg2) state->proc.arm8.interlock.req1=(1<<(reg1)) | (1<<(reg2))
#define STMInterlock state->proc.arm8.interlock.req2=0x7fff;
#else
#define Interlock1(reg)
#define Interlock2(reg1,reg2)
#define STMInterlock
#endif

#define Bit22Interlock \
    if (BIT(22)) {               \
      Interlock1(LHSReg);        \
    } else {                     \
      Interlock2(LHSReg,RHSReg); \
    }

#define LSBase state->Reg[LHSReg]
#define LSImmRHS (BITS(0,11))

#ifdef MODE32
#define LSRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                  : GetLSRegRHS(state, instr))
#else
#define LSRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                  : GetLSRegRHS(state, instr))
#endif

#ifdef ARM8BASED
#ifdef MODE32
#define AssignLSRegRHS(rhs) \
  do if (BITS(4,11)==0) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    state->proc.arm8.interlock.req1=(1<<LHSReg);               \
    (rhs)=GetLSRegRHS(state,instr);        \
  } while (0)
#else
#define AssignLSRegRHS(rhs) \
  do if (BITS(0,11)<15) {                  \
    (rhs)=state->Reg[RHSReg];              \
    state->proc.arm8.interlock.req1=(1<<LHSReg) | (1<<RHSReg); \
  } else {                                 \
    state->proc.arm8.interlock.req1=(1<<LHSReg);               \
    (rhs)=GetLSRegRHS(state,instr);        \
  } while (0)
#endif
#endif /* ARM8 */

#define LSHwordRHS (BIT(22) ? ((BITS(8,11) << 4) | BITS(0,3)) : state->Reg[RHSReg])

#define LSByteRHS (BIT(22) ? ((BITS(8,11) << 4) | BITS(0,3)) : state->Reg[RHSReg])
#define UNDEF_HWORD if (BIT(22)) { UNDEF_LSRImm; } else { UNDEF_LSRReg; }


#ifdef MODE32
#define LSMBase state->Reg[LHSReg]
#else
#define LSMBase LHSReg==15?ECC|ER15INT|R15PC|EMODE:state->Reg[LHSReg]
#endif

#define LSMNumRegs ((ARMword)ARMul_BitList[BITS(0,7)] + \
                    (ARMword)ARMul_BitList[BITS(8,15)] )
#define LSMBaseFirst ((LHSReg == 0 && BIT(0)) || \
                      (BIT(LHSReg) && BITS(0,LHSReg-1) == 0))

#define SWAPSRC (state->Reg[RHSReg])

#define LSCOff (BITS(0,7) << 2)
#define CPNum BITS(8,11)

/***************************************************************************\
*                    Macro to rotate n right by b bits                      *
\***************************************************************************/

#define ROTATER(n,b) (((n)>>(b))|((n)<<(32-(b))))

/***************************************************************************\
*                 Macros to store results of instructions                   *
\***************************************************************************/

#define ADDCARRY(a,b,r)  ASSIGNC(r < a)
#define ADCCARRY(a,b,r)  ASSIGNC(((NEG(a) && NEG(b)) || \
                                      (NEG(a) && POS(r)) || \
                                      (NEG(b) && POS(r))))
#define ADDOVERFLOW(a,b,r) ASSIGNV( ((a ^ r) & (b ^ r)) >> 31 )
#define SUBCARRY(a,b,r)  ASSIGNC(a >= b)
#define SBCCARRY(a,b,r)  ASSIGNC(((NEG(a) && POS(b)) || \
                                      (NEG(a) && POS(r)) || \
                                      (POS(b) && POS(r))))
#define SUBOVERFLOW(a,b,r) ASSIGNV( ((a ^ b) & (a ^ r)) >> 31 ) ;

#define WRITEDEST(d) if (DESTReg==15) \
                        WriteR15(state, d) ; \
                     else \
                          DEST = d

#define WRITESDEST(d) if (DESTReg == 15) { \
                          WriteSR15(state, d, 0) ; \
                        } else { \
                          DEST = d ; \
                          ARMul_NegZero(state, d) ; \
                        }

#ifdef CODE16
#define WRITESDESTANDT(d) if (DESTReg == 15) \
                         WriteSR15(state, d, 1) ; \
                      else { \
                         DEST = d ; \
                         ARMul_NegZero(state, d) ; \
                         }

#endif

#define BYTETOBUS(data) ((data & 0xff) | \
                        ((data & 0xff) << 8) | \
                        ((data & 0xff) << 16) | \
                        ((data & 0xff) << 24))
#define BUSTOBYTE(address,data) \
           if (state->bigendSig) \
              temp = (data >> (((address ^ 3) & 3) << 3)) & 0xff ; \
           else \
              temp = (data >> ((address & 3) << 3)) & 0xff

#define HWORDTOBUS(data) (((data) & 0xffff) | (((data) & 0xffff) << 16))

#define BUSTOHWORD(address,data)                            \
         if ((((address) & 2) >> 1) ^ state->bigendSig)     \
           (data) = (data) >> 16;                           \
         else                                               \
           (data) &= 0x0000ffff;                            \
         if ((address) & 1)                                 \
           (data) = (((data) & 0xff) << 8) | ((data) >> 8);

#ifdef CYCLEBASED
#define LOADMULT(instr,address,wb) LoadMultSetup(state,instr,address,wb)
#define LOADSMULT(instr,address,wb) LoadMultSetup(state,instr,address,wb)
#ifdef CODE16
#define LOADSMULTANDT(instr,address,wb) LoadMultSetup(state,instr,address,wb)
#endif
#define STOREMULT(instr,address,wb) StoreMultSetup(state,instr,address,wb)
#define STORESMULT(instr,address,wb) StoreMultSetup(state,instr,address,wb)
#else
#define LOADMULT(instr,address,wb) LoadMult(state,instr,address,wb)
#define LOADSMULT(instr,address,wb) LoadSMult(state,instr,address,wb, 0)
#ifdef CODE16
#define LOADSMULTANDT(instr,address,wb) LoadSMult(state,instr,address,wb, 1)
#endif
#define STOREMULT(instr,address,wb) StoreMult(state,instr,address,wb)
#define STORESMULT(instr,address,wb) StoreSMult(state,instr,address,wb)
#endif

#define POSBRANCH ((instr & 0x7fffff) << 2)
#define NEGBRANCH (0xfc000000 | ((instr & 0xffffff) << 2))

/***************************************************************************\
*                      Stuff that is shared across modes                    *
\***************************************************************************/

/* functions exported by the four ARMulator builds. */
extern ARMword ARMul_6Emulate32(ARMul_State *state);
extern ARMword ARMul_8Emulate32(ARMul_State *state);
extern ARMword ARMul_6Emulate26(ARMul_State *state);
extern ARMword ARMul_8Emulate26(ARMul_State *state);

extern unsigned ARMul_MultTable[] ; /* Number of I cycles for a mult */
extern ARMword ARMul_ImmedTable[] ; /* immediate DP LHS values */
extern char ARMul_BitList[] ; /* number of bits in a byte table */
extern void ARMul_Abort26(ARMul_State *state, ARMword) ;
extern void ARMul_Abort32(ARMul_State *state, ARMword) ;
extern unsigned ARMul_NthReg(ARMword instr,unsigned number) ;
extern void ARMul_FixCPSR(ARMul_State *state, ARMword instr, ARMword rhs) ;
extern void ARMul_FixSPSR(ARMul_State *state, ARMword instr, ARMword rhs) ;
extern void ARMul_NegZero(ARMul_State *state, ARMword result) ;
extern void ARMul_CPSRAltered(ARMul_State *state) ;
extern void ARMul_R15Altered(ARMul_State *state) ;
extern unsigned ARMul_NthReg(ARMword instr, unsigned number) ;
extern void ARMul_LDC(ARMul_State *state,ARMword instr,ARMword address) ;
extern void ARMul_STC(ARMul_State *state,ARMword instr,ARMword address) ;
extern void ARMul_MCR(ARMul_State *state,ARMword instr, ARMword source) ;
extern ARMword ARMul_MRC(ARMul_State *state,ARMword instr) ;
extern void ARMul_CDP(ARMul_State *state,ARMword instr) ;
extern void ARMul_UndefInstr(ARMul_State *state,ARMword instr) ;
extern void ARMul_UnpredictableInstr(ARMul_State *state,ARMword instr) ;
#ifdef CYCLEBASED
extern void ARMul_UndefInstr(ARMul_State *state,ARMword instr) ;
extern unsigned CoProNextState(ARMul_State *state, unsigned ready, unsigned busy) ;
#endif
extern void ARMul_Align(ARMul_State *state, ARMword address, ARMword *data) ;
/*extern ARMword ARMul_Align(ARMul_State *state, ARMword address, ARMword data) ;*/

/***************************************************************************\
*                      Macros to scrutinize instructions                    *
\***************************************************************************/

#ifdef CYCLEBASED
#define UNDEF_Test \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_Test

#define UNDEF_Shift \
   if (BIT(7)) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Shift ; \
      }

#define UNDEF_MSRPC \
   if (RHSReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_MSRPC ; \
      }

#define UNDEF_MRSPC \
   if (DESTReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_MRSPC ; \
      }

#define UNDEF_MULPCDest \
   state->EndCondition = UNDEF_IllInstruction ; \
   state->ErrorCode = UNDEFNUM_MULPCDest

#define UNDEF_MULDestEQOp1 \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_MULDestEQOp1

#define UNDEF_LSRBPC \
   if (DESTReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBPC ; \
      }

#define UNDEF_LSRBaseEQOffWb \
   if (LHSReg == RHSReg) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBaseEQOffWb ; \
      }

#define UNDEF_LSRBaseEQDestWb \
   if (LHSReg == DESTReg) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBaseEQDestWb ; \
      }

#define UNDEF_LSRPCBaseWb \
   if (LHSReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRPCBaseWb ; \
      }

#define UNDEF_LSRPCOffWb \
   if (RHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRPCOffWb ; \
      }

#define UNDEF_LSRHPC \
   if (DESTReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRHPC ; \
      }

#define UNDEF_LSMNoRegs \
   if (!(instr & 0xffff)) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMNoRegs ; \
      }

#define UNDEF_LSMPCBase \
   if (LHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMPCBase ; \
      }

#define UNDEF_LSMUserBankWb \
   if (BIT(21)) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMUserBankWb ; \
      }

#define UNDEF_LSMBaseInListWb \
   if (BIT(21) && BIT(LHSReg)) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMBaseInListWb ; \
      }

#define UNDEF_SWPPC \
   if (DESTReg == 15 || LHSReg == 15 || RHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_SWPPC ; \
      }

#define UNDEF_CoProHS \
   ARMul_Abort(state,ARMul_UndefinedInstrV) ; \
   state->NextCycle = DESTPC1

#define UNDEF_MCRPC \
   state->EndCondition = UNDEF_IllInstruction ; \
   state->ErrorCode = UNDEFNUM_MCRPC

#define UNDEF_LSCPCBaseWb \
   if (BIT(21) && LHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSCPCBaseWb ; \
      }

#define UNDEF_UndefNotBounced \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_UndefNotBounced

#define UNDEF_IllegalMode \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_IllegalMode

#define UNDEF_Prog32SigChange \
   if (!state->Prog32Pin) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Prog32SigChange ; \
      }

#define UNDEF_Data32SigChange \
   if (!state->Data32Pin) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Data32SigChange ; \
      }

#define UNDEF_ReservedMult \
   state->EndCondition = UNDEF_BadInstruction; \
   state->ErrorCode = UNDEFNUM_ReservedMult

#define UNDEFNUM_Test                   1
#define UNDEFNUM_Shift                  2
#define UNDEFNUM_MSRPC                  10
#define UNDEFNUM_MRSPC                  11
#define UNDEFNUM_MULPCDest              20
#define UNDEFNUM_MULDestEQOp1           21
#define UNDEFNUM_ReservedMult           22
#define UNDEFNUM_LSRBPC                 30
#define UNDEFNUM_LSRBaseEQOffWb         31
#define UNDEFNUM_LSRBaseEQDestWb        32
#define UNDEFNUM_LSRPCBaseWb            33
#define UNDEFNUM_LSRPCOffWb             34
#define UNDEFNUM_LSRHPC                 35
#define UNDEFNUM_LSMNoRegs              50
#define UNDEFNUM_LSMPCBase              51
#define UNDEFNUM_LSMUserBankWb          52
#define UNDEFNUM_LSMBaseInListWb        53
#define UNDEFNUM_SWPPC                  70
#define UNDEFNUM_CoProHS                80
#define UNDEFNUM_MCRPC                  81
#define UNDEFNUM_LSCPCBaseWb            82
#define UNDEFNUM_UndefNotBounced        83
#define UNDEFNUM_IllegalMode            100
#define UNDEFNUM_Prog32SigChange        101
#define UNDEFNUM_Data32SigChange        102

#else

#define UNDEF_Test \
  if (state->Processor & ARM_Arch4_Prop) ARMul_UndefInstr(state,instr)
#define UNDEF_Shift
#define UNDEF_MSRPC
#define UNDEF_MRSPC
#define UNDEF_MULPCDest
#define UNDEF_MULDestEQOp1
#define UNDEF_LSRBPC
#define UNDEF_LSRBaseEQOffWb
#define UNDEF_LSRBaseEQDestWb
#define UNDEF_LSRPCBaseWb
#define UNDEF_LSRPCOffWb
#define UNDEF_LSRHPC
#define UNDEF_LSMNoRegs
#define UNDEF_LSMPCBase
#define UNDEF_LSMUserBankWb
#define UNDEF_LSMBaseInListWb
#define UNDEF_SWPPC
#define UNDEF_CoProHS
#define UNDEF_MCRPC
#define UNDEF_LSCPCBaseWb
#define UNDEF_UndefNotBounced
#define UNDEF_ShortInt
#define UNDEF_IllegalMode
#define UNDEF_Prog32SigChange
#define UNDEF_Data32SigChange
#define UNDEF_ReservedMult
#endif

#define UNDEF_LSRImm UNDEF_LSRBaseEQDestWb ; \
                     UNDEF_LSRPCBaseWb

#define UNDEF_LSRReg UNDEF_LSRBaseEQOffWb ; \
                     UNDEF_LSRBaseEQDestWb ; \
                     UNDEF_LSRPCBaseWb ; \
                     UNDEF_LSRPCOffWb
