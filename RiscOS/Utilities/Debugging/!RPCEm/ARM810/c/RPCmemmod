
/* RPCmemmod.c - memory model for interface to Risc PC emulator */

#include "armdefs.h"
#include "dbg_hif.h"


typedef void *toolconf;

typedef struct {
  int Ntrans;
  ARMul_State *state;          /* So we can generate interrupts */
  const Dbg_HostosInterface *hif; /* So we can print out characters */
} ModelState;

static void TransChangeHandler(void *handle,unsigned old,unsigned new)
{
  ModelState *s=(ModelState *)handle;
  
  s->Ntrans=new;
}

static armul_Error MemInit(ARMul_State *state,ARMul_MemInterface *interf,
                           ARMul_MemType type,toolconf config);

#define ModelName "RPCEm"

ARMul_MemStub RPCMemory = {
  (armul_MemInit *)MemInit,
  ModelName
  };


/*
 * Predeclare the memory access functions so that the initialise
 * function can fill them in
 */
static int MemAccess(void *,ARMword,ARMword *,ARMul_acc);
extern void free(void *);   /* ANSI definition of 'free' */


static armul_Error MemInit(ARMul_State *state,
                           ARMul_MemInterface *interf,
                           ARMul_MemType type,
                           toolconf config)
{
  ModelState *s;
  int i;
  
//  ARMul_PrettyPrint(state, ", User manual example");

  /* don't support ReadClock and ReadCycles */
  interf->read_clock=NULL;
  interf->read_cycles=NULL;
  
  /* We only support the ARM6/ARM7 memory interfaces so fault
   * everything else.
   */
  
  if (type!=ARMul_MemType_Basic && type!=ARMul_MemType_BasicCached) {
    return ARMul_RaiseError(state,ARMulErr_MemTypeUnhandled,ModelName);
  }
  
  /* Now allocate the state */
  
  s=(ModelState *)malloc(sizeof(ModelState));
  if (s==NULL) return ARMul_RaiseError(state,ARMulErr_OutOfMemory);
  
  /* and install the function to free it */
  ARMul_InstallExitHandler(state, free, (void *)s);
  
  s->state=state;    /* keep a handle onto the ARMulator state */

  a810_remember_state(state);

  s->hif=ARMul_HostIf(state);   /* and grab the handle onto the HostosInterface */
  
//  ARMul_PrettyPrint(state, ", 1Mb memory");
  
  /* Install the mode change handler
   * On a cached processor there is no 'Ntrans' signal, so we
   * treat it as always being HIGH.
   */
  if (type==ARMul_MemType_BasicCached) {
    s->Ntrans=1;
  } else {
    ARMul_InstallTransChangeHandler(state,
                                    TransChangeHandler,
                                    (void *)s);
  }
  
  /* We have to call "SetMemSize" so that the debug monitor knows where
   * to place the stack.        
   */
//  ARMul_SetMemSize(state, 8*PAGESIZE);
  
  interf->x.basic.access=MemAccess;
  interf->handle=(void *)s;
  
  return ARMulErr_NoError;
}

static int MemAccess(void *handle,
                     ARMword address,
                     ARMword *data,
                     ARMul_acc acc)
{
  ModelState *s=(ModelState *)handle;

  
  /* acc_MREQ is true if this is a memory cycle */
  if (acc_MREQ(acc))
  {
    if (acc_READ(acc))
    {
      switch (acc_WIDTH(acc))
      {
        case BITS_32:
          memory_load_word((unsigned int *)data,(unsigned int)address);
          break;
        case BITS_8:
          memory_load_byte((unsigned char *)data,(unsigned int)address);
          break;
        default:  /* do not understand this request */
          return -1;
      }
    }
    else /* write */
    {
      switch (acc_WIDTH(acc))
      {
        case BITS_32:
          memory_store_word((unsigned int)*data,(unsigned int)address);
          break;
        case BITS_8:
          memory_store_byte((unsigned int)(*data&0xff),(unsigned int)address);
          break;
        default:  /* do not understand this request */
          return -1;
      }
    }
  }

    /*
     * MemAccess is called for all ARM cycles, not just memory cycles,
     * and must keep count of these I and C cycles. We return 1, just
     * as we would for a memory cycle, as returning 0 indicates that the
     * memory is stalling the processor.
     */
  return 1;
}
