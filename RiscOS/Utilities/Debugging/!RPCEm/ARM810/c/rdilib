/* rdilib.c - Common ARMulator RDI code
 * Copyright (C) 1996 Advanced RISC Machines Limited. All rights reserved.
 *
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <string.h>
#include <ctype.h>
#include "armdefsp.h"
#include "rdilib.h"
#include "armemu.h"
#include "multirdi.h"
#include "dbg_cp.h"
#include "dbg_conf.h"
#include "dbg_rdi.h"
#include "dbg_hif.h"
#include "linklist.h"


/*&&&hack&&&*/
typedef struct Dbg_CoProDesc Dbg_CoProDesc;

/*
 * Declarations
 */

#define Watch_AnyRead (RDIWatch_ByteRead+RDIWatch_HalfRead+RDIWatch_WordRead)
#define Watch_AnyWrite (RDIWatch_ByteWrite+RDIWatch_HalfWrite+RDIWatch_WordWrite)

#ifdef RDI_VERBOSE
#define TracePrint(s) \
 if (state->rdi_log & RDILog_Verbose) ARMul_DebugPrint s
#else
#define TracePrint(s)
#endif

static unsigned BreaksSet ; /* The number of breakpoints set */

typedef struct BreakNode BreakNode;
typedef struct WatchNode WatchNode;

struct BreakNode {              /* A breakpoint list node */
   BreakNode *next ;
   ARMword address ;            /* The address of this breakpoint */
   unsigned type ;              /* The type of comparison */
   ARMword bound ;              /* The other address for a range */
   ARMword inst;                /* instruction loaded from memory */
   unsigned int index;          /* handle onto this node */
   };

struct WatchNode {              /* A watchpoint list node */
   WatchNode *next ;
   ARMword address ;            /* The address of this watchpoint */
   unsigned type ;              /* The type of comparison */
   unsigned datatype ;          /* The type of access to watch for */
   ARMword bound ;              /* The other address for a range */
   unsigned int index;          /* handle onto this node */
   };

static BreakNode *BreakList = NULL ;
static WatchNode *WatchList = NULL ;

static unsigned int BreakWatchIdx=0;

typedef_LIST_idx(BreakNode,BreakWatchIdx);
typedef_LIST_idx(WatchNode,BreakWatchIdx);

extern void ARMul_DebugPrint_i(const Dbg_HostosInterface *hostif,
                               const char *format, ...);

static ARMword rdi_log=0;
static ARMul_State *state=NULL;

/*
 * Function to allocate a new ARMul_State.
 */

int ARMul_RDIGetState(ARMul_State **pstate)
{
  if (state) {
    state->rdi_log=rdi_log;
    *pstate=state;
    return FALSE;
  }

  ARMul_EmulateInit();

  state=(ARMul_State *)calloc(1, sizeof(ARMul_State));
  state->EventPtr=(struct EventNode **)calloc(EVENTLISTSIZE,
                                              sizeof(struct EventNode *));
  state->rdi_log=rdi_log;
  *pstate=state;

  return TRUE;
}

static void RDIFreeState(void)
{
  /* free all memory associated with a given state */
  if (state) {
    ARMul_CallExit(state);
    free(state->EventPtr);
    free(state);
    state=NULL;
  }
}

int ARMul_RDIInitFail(int exitcode)
{
  RDIFreeState();
  return exitcode;
}

void ARMul_RDIInit(ARMul_State *state, unsigned type)
{
  if (type == 0) { /* cold start */
    state->CallDebug = state->MemReadDebug = state->MemWriteDebug = 0 ;
    BreaksSet = 0 ;
  }
}

/*
 * RDI_close
 */

int ARMul_RDIClose(void)
{
  TracePrint((state, "RDI_close\n"));
  RDIFreeState();
  return RDIError_NoError;
}

/*
 * RDI_read
 */

int ARMul_RDIRead(ARMword source, void *dest, unsigned *nbytes)
{
  unsigned i;
  char *memptr = (char *)dest;

  if (state->last_bigendSig!=state->bigendSig) {
    state->last_bigendSig=state->bigendSig;
    return state->bigendSig ? RDIError_BigEndian : RDIError_LittleEndian;
  }

  TracePrint((state, "RDI_read: source=%.8lx dest=%p nbytes=%.8x\n",
              source, dest, *nbytes));

  for (i=0 ; i < *nbytes ; i++)
    *memptr++ = (char)ARMul_ReadByte(state,source++);
  if (state->abortSig) {
    state->abortSig = LOW;
    return RDIError_DataAbort;
  }
  return RDIError_NoError;
}

/*
 * RDI_write
 */

int ARMul_RDIWrite(const void *source, ARMword dest, unsigned *nbytes)
{
  unsigned i;
  const char *memptr = source;

  if (state->last_bigendSig!=state->bigendSig) {
    state->last_bigendSig=state->bigendSig;
    return state->bigendSig ? RDIError_BigEndian : RDIError_LittleEndian;
  }

  TracePrint((state, "RDI_write: source=%p dest=%.8lx nbytes=%.8x\n",
              source, dest, *nbytes));

  for (i=0; i<*nbytes; i++)
    ARMul_WriteByte(state,(ARMword)dest++,(ARMword)*memptr++);
  if (state->abortSig) {
    state->abortSig = LOW;
    return(RDIError_DataAbort);
  }
  return(RDIError_NoError);
}

/*
 * RDI_CPUread
 */

int ARMul_RDICPURead(unsigned mode, unsigned long mask, ARMword *buffer)
{
  unsigned i , upto ;

  if (mode == RDIMode_Curr)
    mode = (unsigned)(ARMul_GetCPSR(state) & MODEBITS);

  for (upto = 0, i = 0; i < 15; i++)
    if (mask & (1L << i))
      buffer[upto++] = ARMul_GetReg(state,mode,i);

  if (mask & RDIReg_R15)
    buffer[upto++] = ARMul_GetR15(state);
  
  if (mask & RDIReg_PC)
    buffer[upto++] = ARMul_GetPC(state);
  
  if (mask & RDIReg_CPSR)
    buffer[upto++] = ARMul_GetCPSR(state);
  
  if (mask & RDIReg_SPSR)
    buffer[upto++] = ARMul_GetSPSR(state,mode);
  
  TracePrint((state, "RDI_CPUread: mode=%.8x mask=%.8lx", mode, mask));
#ifdef RDI_VERBOSE
  if (state->rdi_log & RDILog_Verbose) {
    for (upto = 0, i = 0; i <= 20; i++)
      if (mask & (1L << i)) {
        ARMul_DebugPrint(state, "%c%.8lx",upto%4==0?'\n':' ',buffer[upto]);
        upto++;
      }
    ARMul_DebugPrint(state, "\n");
  }
#endif
  
  return RDIError_NoError;
}

/*
 * RDI_CPUwrite
 */

int ARMul_RDICPUWrite(unsigned mode, unsigned long mask, ARMword const *buffer)
{
  int i, upto;
  
  TracePrint((state, "RDI_CPUwrite: mode=%.8x mask=%.8lx", mode, mask));
#ifdef RDI_VERBOSE
  if (state->rdi_log & RDILog_Verbose) {
    for (upto = 0, i = 0; i <= 20; i++)
      if (mask & (1L << i)) {
        ARMul_DebugPrint(state, "%c%.8lx",upto%4==0?'\n':' ',buffer[upto]);
        upto++;
      }
    ARMul_DebugPrint(state, "\n");
  }
#endif
  
  if (mode == RDIMode_Curr)
    mode = (unsigned)(ARMul_GetCPSR(state) & MODEBITS);
  
  for (upto = 0, i = 0; i < 15; i++)
    if (mask & (1L << i))
      ARMul_SetReg(state,mode,i,buffer[upto++]);
  
  if (mask & RDIReg_R15)
    ARMul_SetR15(state,buffer[upto++]);
  
  if (mask & RDIReg_PC)
    ARMul_SetPC(state,buffer[upto++]);
  
  if (mask & RDIReg_CPSR)
    ARMul_SetCPSR(state,buffer[upto++]);
  
  if (mask & RDIReg_SPSR)
    ARMul_SetSPSR(state,mode,buffer[upto++]);
  
  return RDIError_NoError;
}

/*
 * RDI_CPread
 */

int ARMul_RDICPRead(unsigned CPnum, unsigned long mask, ARMword *buffer)
{
  unsigned char const *rmap = ARMul_CPRegWords(state,CPnum);
  unsigned r;
  ARMword *p=buffer;

  if (rmap == NULL)
    return RDIError_UnknownCoPro;

  for (r = 0; r < rmap[0]; r++)
    if (mask & (1L << r)) {
      p=ARMul_CPRead(state,CPnum,r,p);
      if (p==NULL) return RDIError_UnknownCoPro;
    }

  return RDIError_NoError;
}

/*
 * RDI_CPwrite
 */

int ARMul_RDICPWrite(unsigned CPnum, unsigned long mask, ARMword const *buffer)
{
  unsigned char const *rmap = ARMul_CPRegWords(state,CPnum);
  unsigned r;
  const ARMword *p=buffer;

  if (rmap == NULL)
    return RDIError_UnknownCoPro;

  for (r = 0; r < rmap[0]; r++)
    if (mask & (1L << r)) {
      p=ARMul_CPWrite(state,CPnum,r,p);
      if (p==NULL) return RDIError_UnknownCoPro;
    }

  return RDIError_NoError;
}

static BreakNode *findbreaknode(unsigned int index)
{
  BreakNode *p;
  for (p=BreakList; p; p=p->next) {
    if (p->index==index)
      return p;
  }
  return NULL;
}

static void deletebreaknode(BreakNode **prevp)
{
  BreakNode *p = *prevp;
  *prevp = p->next;
  if (p->inst != 0xee000000)
    ARMul_WriteWord(state, p->address, p->inst);
  linklist_free(BreakNode,p);
  BreaksSet--;
  state->CallDebug--;
}

static int removebreak(ARMword address, unsigned type)
{
  BreakNode *p, **prevp = &BreakList;
  for (; (p = *prevp) != NULL; prevp = &p->next)
    if (p->address == address && p->type == type) {
      deletebreaknode(prevp);
      return TRUE;
    }
  return FALSE;
}

/* This routine installs a breakpoint into the breakpoint table */

static BreakNode *installbreak(ARMword address, unsigned type, ARMword bound)
{
  BreakNode *p = linklist_new(BreakNode);
  p->next = BreakList;
  BreakList = p;
  p->address = address;
  p->type = type;
  p->bound = bound;
  if (!(type & RDIPoint_16Bit) && state->fpe.regs!=0) {
    /* This is only done in order to prevent a FPE fetching ahead and
     * causing a breakpoint to be skipped
     */
    p->inst = ARMul_ReadWord(state, address);

    /*
     * okay, then, check for a floating-point instruction. we want to
     * avoid unnecessary writes in order to be as unintrusive as we
     * can
     */
    /* if ((cp_num==1 || cp_num==2) && (opcode==%1110 || opcode==%110x)) */
    if (((((p->inst >> 8)  & 0xf) == 0x1 || ((p->inst >> 8) & 0xf)  == 0x2)) &&
        ((((p->inst >> 24) & 0xf) == 0xe || ((p->inst >> 25) & 0x7) == 0x6)))
      ARMul_WriteWord(state, address, 0xee000000L);
    else
      p->inst=0xee000000;
  } else {
    p->inst=0xee000000;
  }
  return p;
}

/*
 * RDI_setbreak
 */

int ARMul_RDISetBreak(ARMword address, unsigned type, ARMword bound,
                      PointHandle *handle)
{ BreakNode *p;
  TracePrint((state, "RDI_setbreak: address=%.8lx type=%d bound=%.8lx\n",
             address, type, bound));

  removebreak(address, type);
  p = installbreak(address, type, bound);
  BreaksSet++;
  state->CallDebug++;
  *handle = (PointHandle)p->index;
  TracePrint((state, " returns %.8lx\n", *handle));
  return RDIError_NoError;
}

/*
 * RDI_clearbreak
 */

int ARMul_RDIClearBreak(PointHandle handle)
{ TracePrint((state, "RDI_clearbreak: address=%.8lx\n", handle));
  { BreakNode *p, *q = findbreaknode((unsigned int)handle),
             **prevp = &BreakList;
    for (; (p = *prevp) != NULL; prevp = &p->next)
      if (p == q) break;
    if (p == NULL) return RDIError_NoSuchPoint;
    deletebreaknode(prevp);
    return RDIError_NoError;
  }
}

/*
 * Internal functions for watchpoint table manipulation
 */

static WatchNode *findwatchnode(unsigned int index)
{
  WatchNode *p;
  for (p=WatchList; p; p=p->next) {
    if (p->index==index)
      return p;
  }
  return NULL;
}

static void deletewatchnode(WatchNode **prevp)
{ WatchNode *p = *prevp;
  if (p->datatype & Watch_AnyRead) state->MemReadDebug--;
  if (p->datatype & Watch_AnyWrite) state->MemWriteDebug--;
  *prevp = p->next;
  linklist_free(WatchNode,p);
}

static int removewatch(ARMword address, unsigned type)
{ WatchNode *p, **prevp = &WatchList;
  for (; (p = *prevp) != NULL; prevp = &p->next)
    if (p->address == address && p->type == type) { /* found a match */
       deletewatchnode(prevp);
       return TRUE;
    }
  return FALSE; /* never found a match */
}

static WatchNode *installwatch(ARMword address, unsigned type,
                               unsigned datatype, ARMword bound)
{ WatchNode *p = linklist_new(WatchNode);
  p->next = WatchList;
  WatchList = p;
  p->address = address;
  p->type = type;
  p->datatype = datatype;
  p->bound = bound;
  return p;
}

/*
 * RDI_setwatch
 */

int ARMul_RDISetWatch(ARMword address, unsigned type, unsigned datatype,
                      ARMword bound, PointHandle *handle)
{ WatchNode *p;
  TracePrint((state, "RDI_setwatch: address=%.8lx type=%d datatype=%d bound=%.8lx",
              address, type, datatype, bound));

  /* Check we can do this type of watchpoint */
  if ((datatype & state->CanWatch)==0)
    return RDIError_UnimplementedMessage;

  removewatch(address, type);
  p = installwatch(address, type, datatype, bound);
  if (datatype & Watch_AnyRead) state->MemReadDebug++;
  if (datatype & Watch_AnyWrite) state->MemWriteDebug++;
  *handle = (PointHandle)p->index;
  TracePrint((state, " returns %.8lx\n", *handle));
  return RDIError_NoError;
}

/*
 * RDI_clearwatch
 */

int ARMul_RDIClearWatch(PointHandle handle)
{ TracePrint((state, "RDI_clearwatch: address=%.8lx\n", handle));
  { WatchNode *p, *q = findwatchnode((unsigned int)handle),
             **prevp = &WatchList;
    for (; (p = *prevp) != NULL; prevp = &p->next)
      if (p == q) break;
    if (p == NULL) return RDIError_NoSuchPoint;
    deletewatchnode(prevp);
    return RDIError_NoError;
  }
}

/*
 * RDI_execute
 */

int ARMul_RDIExecute(PointHandle *handle)
{
  TracePrint((state, "RDI_execute\n"));
  if (state->rdi_log & RDILog_CallDebug) {
    state->CallDebug++;
    state->Debug = TRUE;
  }
  state->EndCondition = RDIError_NoError;
  state->StopHandle = RDINoPointHandle;
  ARMul_DoProg(state);
  *handle = state->StopHandle;
  state->Reg[15] -= PCR15DIFFERENCE; /* undo the pipeline */
  if (state->rdi_log & RDILog_CallDebug) {
    state->CallDebug--;
    state->Debug = FALSE;
  }
  return(state->EndCondition);
}

/*
 * RDI_step
 */

int ARMul_RDIStep(unsigned ninstr, PointHandle *handle)
{
  TracePrint((state, "RDI_step\n"));
  if (ninstr != 1) return RDIError_UnimplementedMessage;
  if (state->rdi_log & RDILog_CallDebug) {
    state->CallDebug++;
    state->Debug = TRUE;
  }
  state->EndCondition = RDIError_NoError;
  state->StopHandle = RDINoPointHandle;
  ARMul_DoInstr(state);
  *handle = state->StopHandle;
  state->Reg[15] -= PCR15DIFFERENCE; /* undo the pipeline */
  if (state->rdi_log & RDILog_CallDebug) {
    state->CallDebug--;
    state->Debug = FALSE;
  }
  return(state->EndCondition);
}

/*
 * RDI_info
 *
 * Many of these calls are now passed on to sub-modules which deal with
 * them for us.
 */

int ARMul_RDIInfo(unsigned type, ARMword *arg1, ARMword *arg2)
{
  switch (type) {
  case RDIInfo_Target:
  { ARMword arg1val;
    TracePrint((state, "RDI_Info_Target\n"));
    arg1val = 5;                      /* Emulator, speed 10**5 IPS */
#ifdef CODE16
    if (state->Processor & ARM_Code16_Prop)
      arg1val |= RDITarget_Code16;
#endif
    *arg1 = arg1val;
    *arg2 = 1298224434;

    /* allow models to add capabilities */
    ARMul_UnknownRDIInfo(state,type,arg1,arg2);

    return RDIError_NoError;
  }

  case RDIInfo_Points:
  { ARMword n = RDIPointCapability_Comparison | RDIPointCapability_Range |
                RDIPointCapability_Mask | RDIPointCapability_Status;
    TracePrint((state, "RDI_Info_Points\n"));
    *arg1 = n;

    /* allow models to add capabilities */
    ARMul_UnknownRDIInfo(state,type,arg1,arg2);

    /* Check watchpoint capability */
    state->CanWatch=(*arg1 >> 2) & (Watch_AnyRead | Watch_AnyWrite);

    return RDIError_NoError;
  }

  case RDIInfo_Step:
    TracePrint((state, "RDI_Info_Step\n"));
    *arg1 =  RDIStep_Single;
    return RDIError_NoError;

  case RDISignal_Stop:
    TracePrint((state, "RDISignal_Stop\n"));
    state->CallDebug++;
    state->EndCondition = RDIError_UserInterrupt;
    return RDIError_NoError;

  case RDIInfo_AckByteSex: {
    ARMword sex=(int)(*arg1);
    if (state->bigendSig) {
      if (sex==RDISex_Little) return RDIError_BigEndian;
    } else {
      if (sex==RDISex_Big) return RDIError_LittleEndian;
    }
  }
    state->last_bigendSig=state->bigendSig;
    return RDIError_NoError;

  case RDICycles: {
    const ARMul_Cycles *cycles;

    TracePrint((state, "RDI_Info_Cycles\n"));
    arg1[0] = 0;
    arg1[1] = state->NumInstrs;

    if ((cycles=ARMul_ReadCycles(state))==NULL) {
      arg1[2] = 0;
      arg1[3] = 0; /* state->NumScycles; */
      arg1[4] = 0;
      arg1[5] = 0; /* state->NumNcycles; */
      arg1[6] = 0;
      arg1[7] = 0; /* state->NumIcycles; */
      arg1[8] = 0;
      arg1[9] = 0; /* state->NumCcycles; */
      arg1[10] = 0;
      arg1[11] = 0; /* state->NumFcycles; */
    } else {
      arg1[2] = 0;
      arg1[3] = cycles->NumScycles - state->cycles.NumScycles;
      arg1[4] = 0;
      arg1[5] = cycles->NumNcycles - state->cycles.NumNcycles;
      arg1[6] = 0;
      arg1[7] = cycles->NumIcycles - state->cycles.NumIcycles;
      arg1[8] = 0;
      arg1[9] = cycles->NumCcycles - state->cycles.NumCcycles;
      arg1[10] = 0;
      arg1[11] = cycles->NumFcycles - state->cycles.NumFcycles;
    }      
  }
    return RDIError_NoError;

  case RDIInfo_DescribeCoPro:
  { int cpnum = *(int *)arg1;
    struct Dbg_CoProDesc *cpd = (struct Dbg_CoProDesc *)arg2;
    int i;
    unsigned char const *map = ARMul_CPRegWords(state,cpnum);
    if (map == NULL) return RDIError_UnknownCoPro;
//hack
//    for (i = 0; i < cpd->entries; i++) {
//      unsigned r, w = cpd->regdesc[i].nbytes / sizeof(ARMword);
//      for (r = cpd->regdesc[i].rmin; r <= cpd->regdesc[i].rmax; r++)
//        if (map[r+1] != w) return RDIError_BadCoProState;
//    }
    return RDIError_NoError;
  }

  case RDIInfo_RequestCoProDesc:
  { int cpnum = *(int *)arg1;
    struct Dbg_CoProDesc *cpd = (struct Dbg_CoProDesc *)arg2;
    int i = -1, lastw = -1, r;
    unsigned char const *map;
    if ((unsigned)cpnum >= 16) return RDIError_UnknownCoPro;
    map = ARMul_CPRegWords(state,cpnum);
    if (map == NULL) return RDIError_UnknownCoPro;
    for (r = 0; r < map[0]; r++) {
      int words = map[r+1];
//      if (words == lastw)
//hack
//        cpd->regdesc[i].rmax = r;
//      else {
//        if (++i >= cpd->entries) return RDIError_BufferFull;
//        cpd->regdesc[i].rmax = cpd->regdesc[i].rmin = r;
//       cpd->regdesc[i].nbytes = words * sizeof(ARMword);
//        cpd->regdesc[i].access = (words) ? Dbg_Access_Readable+Dbg_Access_Writable : 0;
//      }
    }
//    cpd->entries = i+1;
    return RDIError_NoError;
  }

  case RDIInfo_Log:
    *arg1 = (ARMword)ARMul_RDILog(state);
    return RDIError_NoError;

  case RDIInfo_SetLog: {
    unsigned int old = ARMul_RDILog(state);
    state->rdi_log = rdi_log = (int)*arg1;
    /* Pass on */
    ARMul_UnknownRDIInfo(state,type,arg1,arg2);
  }
    return RDIError_NoError;

  case RDIInfo_CoPro:
    return RDIError_NoError;

  case RDIPointStatus_Watch:
    { WatchNode *p, *handle = (WatchNode *)*arg1;
      for (p = WatchList; p != NULL; p = p->next)
        if (p == handle) {
          *arg1 = -1;
          *arg2 = 1;
          return RDIError_NoError;
        }
      return RDIError_NoSuchPoint;
    }

  case RDIPointStatus_Break:
    { BreakNode *p = findbreaknode((unsigned int)*arg1);
      if (p != NULL) {
        *arg1 = -1;
        *arg2 = 1;
        return RDIError_NoError;
      }
      return RDIError_NoSuchPoint;
    }

  case RDIRead_Clock: 
    if (state->mem.read_clock) {
      int us=state->mem.read_clock(state->mem.handle);
      *arg1=(us % 1000000)*1000;
      *arg2=us/1000000;
      return RDIError_NoError;
    } else {
      break;                    /* fall through to "unimplemented" */
    }
    
  default:
    if (type & RDIInfo_CapabilityRequest)
      switch (type & ~RDIInfo_CapabilityRequest) {
      case RDIInfo_Target:            case RDIInfo_Points:
      case RDIInfo_Step:
      case RDISignal_Stop:            case RDICycles:
      case RDIInfo_Log:
      case RDIInfo_DescribeCoPro:     case RDIInfo_RequestCoProDesc:
      case RDIInfo_CoPro:
      case RDIPointStatus_Watch:      case RDIPointStatus_Break:
        return RDIError_NoError;

      case RDIRead_Clock: 
        if (state->mem.read_clock)
          return RDIError_NoError;
        else
          break;

      default:
        break;
      }
    break;
  }

  /*
   * Allow extensions to handle unknown RDI codes - e.g. a profiling
   * block.
   */
  return ARMul_UnknownRDIInfo(state,type,arg1,arg2);
}

/*
 * The emulator calls this routine at the beginning of every cycle when the
 * CallDebug flag is set.  The second parameter passed is the address of the
 * currently executing instruction (i.e Program Counter - 8), the third
 * parameter is the instruction being executed.
 */

ARMword ARMul_Debug(ARMul_State *state, ARMword pc, ARMword instr)
{
  if (state->EndCondition == RDIError_UserInterrupt) {
    TracePrint((state, "User interrupt at %.8lx\n", pc));
    state->CallDebug--;
    state->Emulate = STOP;
  } else {
    BreakNode *p = BreakList;
    for (; p != NULL; p = p->next) {
      switch (p->type & ~RDIPoint_16Bit) {
      case RDIPoint_EQ: if (pc == p->address) break; continue;
      case RDIPoint_GT: if (pc >  p->address) break; continue;
      case RDIPoint_GE: if (pc >= p->address) break; continue;
      case RDIPoint_LT: if (pc <  p->address) break; continue;
      case RDIPoint_LE: if (pc <= p->address) break; continue;
      case RDIPoint_IN: if (p->address <= pc && pc < p->address+p->bound) break;
                        continue;
      case RDIPoint_OUT:if (p->address > pc || pc >= p->address+p->bound) break;
                        continue;
      case RDIPoint_MASK:if ((pc & p->bound) == p->address) break; continue;
      }
      /* found a match */
      TracePrint((state, "Breakpoint reached at %.8lx\n", pc));
      state->EndCondition = RDIError_BreakpointReached;
      state->Emulate = STOP;
      state->StopHandle = (PointHandle)p->index;
      break;
    }
  }

  return instr;
}

void ARMul_CheckWatch(ARMul_State *state, ARMword addr, int access)
{
  WatchNode *p;
  if (WatchList==NULL) return;
  for (p = WatchList; p != NULL; p = p->next)
    if (p->datatype & access) {
      switch (p->type) {
      case RDIPoint_EQ: if (addr == p->address) break; continue;
      case RDIPoint_GT: if (addr >  p->address) break; continue;
      case RDIPoint_GE: if (addr >= p->address) break; continue;
      case RDIPoint_LT: if (addr <  p->address) break; continue;
      case RDIPoint_LE: if (addr <= p->address) break; continue;
      case RDIPoint_IN: if (p->address <= addr && addr < p->address+p->bound) break;
                        continue;
      case RDIPoint_OUT:if (p->address > addr || addr >= p->address+p->bound) break;
                        continue;
      case RDIPoint_MASK:if ((addr & p->bound) == p->address) break; continue;
      }
      /* found a match */
      TracePrint((state, "Watchpoint at %.8lx accessed\n", addr));
      state->EndCondition = RDIError_WatchpointAccessed;
      state->Emulate = STOP;
      state->StopHandle = (PointHandle)p->index;
      return;
   }
}
