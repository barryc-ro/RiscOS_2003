/*
 * armrdi.c - Remote Debug Interface for ARMulator
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 *
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <string.h>
#include <ctype.h>
#include "armdefsp.h"
#include "rdilib.h"
#include "armsupp.h"
#include "armpu.h"
#include "armemu.h"
#include "multirdi.h"
#include "dbg_conf.h"
#include "dbg_rdi.h"
#include "dbg_hif.h"

extern void ARMul_DebugPrint_i(const Dbg_HostosInterface *hostif,
                               const char *format, ...);

typedef void *toolconf;

/*
 * RDI_open
 */

static ARMulator cores[] = {
  ARMul_6Emulate26, ARMul_6Emulate32, "ARM2",
  ARMul_6Emulate26, ARMul_6Emulate32, "ARM6", 
  ARMul_6Emulate26, ARMul_6Emulate32, "ARM7",
  ARMul_8Emulate26, ARMul_8Emulate32, "ARM8"
  };

int RDI_open(unsigned type, const Dbg_ConfigBlock *config,
                    const Dbg_HostosInterface *hostif,
                    struct Dbg_MCState *dbg_state)
/* Initialise everything */
{int virgin ;
 char *option;
 ARMul_Error err;
 ARMul_State *state;

 IGNORE(dbg_state);
 IGNORE(config);

 virgin=ARMul_RDIGetState(&state);

#ifdef RDI_VERBOSE
 if (state->rdi_log & RDILog_Verbose) {
    if (virgin)
       ARMul_DebugPrint_i(hostif, "RDI_open: type = %d\n",type) ;
    else
       ARMul_DebugPrint(state, "RDI_open: type = %d\n",type) ;
 }
#endif

 if (type & 1) { /* Warm start */
    ARMul_Reset(state);
    ARMul_RDIInit(state,1);
  } else {
    ARMul_MemType mem_type;
    toolconf child;

    if (virgin) {
       ARMul_InitState(state);

//hack
       state->hostif = 0;

       state->config=ARMul_ToolConf;

#if 0
#ifdef __WATCOMC__
       ARMul_PrettyPrint(state, "ARMulator 2.0 (Watcom)\n");
#elif defined(_MSC_VER)
       ARMul_PrettyPrint(state, "ARMulator 2.0 (MS)\n");
#elif defined(__GNUC__)
       ARMul_PrettyPrint(state, "ARMulator 2.0 (GNU C)\n");
#else
       ARMul_PrettyPrint(state, "ARMulator 2.0\n");
#endif
#else
       ARMul_PrettyPrint(state, "ARMulator 2.0\n");
#endif

       option=(void *)ToolConf_Lookup(state->config,"PROCESSOR");
       if (option==NULL) {
         return ARMul_RDIInitFail(ARMul_RaiseError(state,ARMulErr_NoProcessorType));
       }
       
       ARMul_PrettyPrint(state, "%s", option);

       /* Install the correct core model */
       option=(void *)ToolConf_Lookup(state->config,"CORE");
       if (option) {
         unsigned int i;
         for (i=0;i<sizeof(cores)/sizeof(cores[0]);i++) {
           if (ToolConf_Cmp(option,cores[i].handle)) {
             state->core=&cores[i];
             goto installed_core;
           }
         }
         return ARMul_RDIInitFail(ARMul_RaiseError(state,ARMulErr_NoSuchCore,
                                                   option));
       } else {
         return ARMul_RDIInitFail(ARMul_RaiseError(state,ARMulErr_NoCoreType));
       }
    
     installed_core:
       err=ARMul_SelectProcessor(state);
       if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);

         if (state->Processor & ARM_ARM8_Prop) {
           err=ARMul_8PUInit(state);
           if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);
         }
         ARMul_Reset(state);
       }

       option=(void *)ToolConf_Lookup(state->config,"BYTESEX");
       if (option) {
         if (toupper(option[0])=='L')
           ARMul_SetConfig(state,MMU_B,0); /*bigendSig=FALSE*/
         else if (safe_toupper(option[0])=='B')
           ARMul_SetConfig(state,MMU_B,MMU_B); /*bigendSig=TRUE*/
       }

    if (state->Processor & ARM_ARM8_Prop)
      mem_type=ARMul_MemType_ARM8;
    else if (state->Processor & ARM_Code16_Prop)
      mem_type=ARMul_MemType_Thumb;
    else if (state->Processor & ARM_Halfword_Prop)
      mem_type=ARMul_MemType_16Bit;
    else
      mem_type=ARMul_MemType_Basic;
    
    err=state->mem_init(state,
                        &state->mem,
                        mem_type,
                        state->mem_config);
    if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);

    ARMul_SetReadClock(state);

    err=state->cp_init(state, 16, &state->cp_bus,
                       state->cp_config, state->cp_sibling);
    if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);

    child=(void *)ToolConf_Child(state->config,"OS");
    if (child==NULL) child=state->config;

    if (state->os_init) {
      err=state->os_init(state,
                         &state->os,
                         child);
      if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);
    } else {
      ARMul_PrettyPrint(state,", No operating system");
    }

    err=ARMul_StartModels(state);
    if (err!=ARMulErr_NoError) return ARMul_RDIInitFail(err);

    ARMul_Reset(state) ;
    ARMul_RDIInit(state,0) ;
    }
 if (type & 2) { /* Reset the comms link */
    /* what comms link ? */
    }
 if (virgin && (type & 1) == 0) /* Cold start */
    ARMul_PrettyPrint(state, ", %s endian.\n",
                              state->bigendSig ? "Big" : "Little");

 
 option=(void *)ToolConf_Lookup(state->config,"BYTESEX");

 state->last_bigendSig=state->bigendSig;

 if (option==NULL || option[0]=='\0')
    return(state->bigendSig ? RDIError_BigEndian : RDIError_LittleEndian);
 else
    return(RDIError_NoError) ;
}


const struct RDIProcVec basic_rdi = {
    "BASIC",

    (rdi_open_proc *)RDI_open,
    (rdi_close_proc *)ARMul_RDIClose,
    (rdi_read_proc *)ARMul_RDIRead,
    (rdi_write_proc *)ARMul_RDIWrite,
    (rdi_CPUread_proc *)ARMul_RDICPURead,
    (rdi_CPUwrite_proc *)ARMul_RDICPUWrite,
    (rdi_CPread_proc *)ARMul_RDICPRead,
    (rdi_CPwrite_proc *)ARMul_RDICPWrite,
    (rdi_setbreak_proc *)ARMul_RDISetBreak,
    (rdi_clearbreak_proc *)ARMul_RDIClearBreak,
    (rdi_setwatch_proc *)ARMul_RDISetWatch,
    (rdi_clearwatch_proc *)ARMul_RDIClearWatch,
    (rdi_execute_proc *)ARMul_RDIExecute,
    (rdi_step_proc *)ARMul_RDIStep,
    (rdi_info_proc *)ARMul_RDIInfo,
    
    0, /*pointinq*/
    0, /*addconfig*/
    0, /*loadconfigdata*/
    0, /*selectconfig*/
    0, /*drivernames*/

    NULL,
};
