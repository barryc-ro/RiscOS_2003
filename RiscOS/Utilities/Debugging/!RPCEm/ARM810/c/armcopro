/***************************************************************************\
* armcopro.c                                                                *
* ARMulator II co-processor interface.                                      *
* Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.   *
* Written by Dave Jaggar.                                                   *
* Project started on 1st July 1991.                                         *
\***************************************************************************/

/* RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <assert.h>

#include "toolconf.h"
#include "armdefsp.h"
#include "armemu.h"             /* for CPNum */
#include "armcopro.h"

static void CoProExit(void *handle);

/*
 * Dummy Co-processors
 */

static unsigned NoCoPro3R(void *handle,unsigned,ARMword) ;
static unsigned NoCoPro4R(void *handle,unsigned,ARMword,ARMword) ;
static unsigned NoCoPro4W(void *handle,unsigned,ARMword,ARMword *) ;

static ARMul_Error NoneInit(ARMul_State *state,
                            unsigned num,
                            ARMul_CPInterface *interf,
                            void * config,
                            void *sibling)
{
  IGNORE(num); IGNORE(config); IGNORE(sibling); IGNORE(state);

  interf->handle=NULL;
  interf->ldc=NoCoPro4R;
  interf->stc=NoCoPro4W;
  interf->mrc=NoCoPro4W;
  interf->mcr=NoCoPro4R;
  interf->cdp=NoCoPro3R;
  interf->read=NULL;
  interf->write=NULL;
  interf->reg_words=NULL;

  return ARMulErr_NoError;
}

const ARMul_CPStub ARMul_NoCopro = { NoneInit, "None" };

extern ARMul_CPStub *ARMul_Coprocessors[];

/*
 * Install co-processor instruction handlers in this routine
 */

armul_CPInit *ARMul_FindCPInterface(ARMul_State *state,
                                    const char *option,
                                    void * *wrconfig)
{
  int i;
  void * config,*child;
  extern void * ARMul_ToolConfBase;
  
  IGNORE(state);
  
  if (option==NULL) option="NONE";
  
  if ((config=(void *)ToolConf_Child(ARMul_ToolConfBase,"COPROCESSORS"))==NULL)
    return NULL;
  
  child=ARMul_FindConfig(config,option);
  
  /* Install a coprocessor model */
  for (i=0;ARMul_Coprocessors[i];i++)
    if (ToolConf_Cmp(option,ARMul_Coprocessors[i]->name)) {
      *wrconfig=child ? child : config;
      return ARMul_Coprocessors[i]->init;
    }
  return NULL;
}

ARMword ARMul_CoProInit(ARMul_State *state,void *config)
{
  int i;
  ARMword mask=0;

  for (i=0;i<16;i++) {
    char buffer[16],*option;

    if (config) {
      sprintf(buffer,"CoProcessor[%d]",i);    
      option=(void *)ToolConf_Lookup(config,buffer);

      if (option) {
        armul_CPInit *init;
        void *child;
        
        init=ARMul_FindCPInterface(state,option,&child);
        if (init!=NULL) {
          ARMul_CoProAttach(state,i,init,child,NULL);
        mask|=1<<i;
        } else {
          ARMul_ConsolePrint(state,
                             "Warning: Coprocessor '%s' not found (ignored)\n",
                             option);
        }
      }
    } else {
      if (state->CP[i].handle==NULL) {
        ARMul_CoProAttach(state, i, NoneInit, NULL, NULL);  
      }
    }
  }
  /* No handlers below here */

  return mask;
}

/*
 * Install co-processor finalisation routines in this routine
 */

static void CoProExit(void *handle)
{
  ARMul_State *state=(ARMul_State *)handle;
  register unsigned i ;

 for (i = 0 ; i < 16 ; i++) {
    ARMul_CoProDetach(state, i);
  }
}

/***************************************************************************\
*              Routines to hook Co-processors into ARMulator                 *
\***************************************************************************/

ARMul_Error ARMul_CoProAttach(ARMul_State *state, unsigned number,
                              armul_CPInit *init,
                              void *conf,void *sibling)
{
  ARMword config=state->Processor;
  ARMul_CPInterface *state_cop=&state->CP[number];
  ARMul_Error err;

  if (state->CP[number].handle!=NULL)
    return ARMul_RaiseError(state,ARMulErr_CoProAttached);

  err=init(state,number,state_cop,conf,sibling);

  if (err!=ARMulErr_NoError) return err;

  if (state_cop->ldc == NULL || (config & ARM_NoLDCSTC_Prop))
    state_cop->ldc = NoCoPro4R;
  if (state_cop->stc == NULL || (config & ARM_NoLDCSTC_Prop))
    state_cop->stc = NoCoPro4W;
  if (state_cop->mrc == NULL)
    state_cop->mrc = NoCoPro4W;
  if (state_cop->mcr == NULL)
    state_cop->mcr = NoCoPro4R;
  if (state_cop->cdp == NULL)
    state_cop->cdp = NoCoPro3R;

  return ARMulErr_NoError;
}

void ARMul_CoProDetach(ARMul_State *state, unsigned number)
{
  state->CP[number].handle=NULL; /* force attachment */
  ARMul_CoProAttach(state, number, NoneInit, NULL, NULL);
  state->CP[number].read = NULL;
  state->CP[number].write = NULL;
  state->CP[number].handle=NULL;
}

/*
 * There is no CoPro around, so Undefined Instruction trap
 */

static unsigned NoCoPro3R(void *state,unsigned a,ARMword b)
{
  IGNORE(state); IGNORE(a); IGNORE(b);
  return(ARMul_CANT);
}

static unsigned NoCoPro4R(void *state, unsigned a,ARMword b,ARMword c)
{
  IGNORE(state); IGNORE(a); IGNORE(b); IGNORE(c);
  return(ARMul_CANT);
}

static unsigned NoCoPro4W(void *state, unsigned a,ARMword b,ARMword *c)
{
  IGNORE(state); IGNORE(a); IGNORE(b); IGNORE(c);
  return(ARMul_CANT);
}

/*
 * Standard ARM bus interface
 */

static unsigned CPBusLDC(void *handle,unsigned type,ARMword instr,
                         ARMword value)
{
  ARMul_CPInterface *cp=&((ARMul_State *)handle)->CP[CPNum];
  return cp->ldc(cp->handle,type,instr,value);
}

static unsigned CPBusSTC(void *handle,unsigned type,ARMword instr,
                         ARMword *value)
{
  ARMul_CPInterface *cp=&((ARMul_State *)handle)->CP[CPNum];
  return cp->stc(cp->handle,type,instr,value);
}

static unsigned CPBusMCR(void *handle,unsigned type,ARMword instr,
                         ARMword value)
{
  ARMul_CPInterface *cp=&((ARMul_State *)handle)->CP[CPNum];
  return cp->mcr(cp->handle,type,instr,value);
}

static unsigned CPBusMRC(void *handle,unsigned type,ARMword instr,
                         ARMword *value)
{
  ARMul_CPInterface *cp=&((ARMul_State *)handle)->CP[CPNum];
  return cp->mrc(cp->handle,type,instr,value);
}

static unsigned CPBusCDP(void *handle,unsigned type,ARMword instr)
{
  ARMul_CPInterface *cp=&((ARMul_State *)handle)->CP[CPNum];
  return cp->cdp(cp->handle,type,instr);
}

static unsigned CPBusRead(void *handle,unsigned reg,ARMword *value)
{
  IGNORE(handle); IGNORE(reg); IGNORE(value);
  assert(FALSE);
  return FALSE;
}

static unsigned CPBusWrite(void *handle,unsigned reg,ARMword const *value)
{
  IGNORE(handle); IGNORE(reg); IGNORE(value);
  assert(FALSE);
  return FALSE;
}

static ARMul_Error CPBusInit(ARMul_State *state,
                             unsigned num, /* should be 16 -> bus */
                             ARMul_CPInterface *interf,
                             void *config,
                             void *sibling)
{
  extern void *ARMul_ToolConfBase;
  void *listconfig;

  IGNORE(config); IGNORE(sibling);
  
  if ((listconfig=(void *)ToolConf_Child(ARMul_ToolConfBase,"COPROCESSORS"))==NULL) {
    return ARMul_RaiseError(state,ARMulErr_NoConfigCop);
  }

  if (num!=16) {
    return ARMul_RaiseError(state,ARMulErr_CoProIsBus,"CPBus");
  }

  interf->ldc=CPBusLDC;
  interf->stc=CPBusSTC;
  interf->mcr=CPBusMCR;
  interf->mrc=CPBusMRC;
  interf->cdp=CPBusCDP;
  interf->read=CPBusRead;
  interf->write=CPBusWrite;
  interf->reg_words=(unsigned char *)"";

  /* attach co-processors */
  if (ARMul_CoProInit(state,listconfig)==~0 ||
      /* finally put NoCoPro in for the rest */
      ARMul_CoProInit(state,NULL)==~0)
    return ARMulErr_InitFailCop; /* not raiseerror - error already raised */

  ARMul_InstallExitHandler(state,CoProExit,state);

  interf->handle=state;

  return ARMulErr_NoError;
}

ARMul_CPStub ARMul_CPBus = {
  CPBusInit,
  "ARMCoprocessorBus"
  };

/*
 * Set the new CP interface and return the old - must be called
 * before CP initialisation, otherwise it will have no effect
 */
armul_CPInit *ARMul_CoProBus(ARMul_State *state,
                             armul_CPInit *new_init,
                             void **new_config,
                             void *new_sibling,
                             void **old_config,
                             void **old_sibling)
{
  armul_CPInit *old_init=state->cp_init;
  *old_config=state->cp_config;
  *old_sibling=state->cp_sibling;

  state->cp_init=new_init;
  state->cp_config=new_config;
  state->cp_sibling=new_sibling;

  return old_init;
}
