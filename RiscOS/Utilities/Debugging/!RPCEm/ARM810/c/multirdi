/* multirdi.c - an RDI multiplexer for ARMulator. */
/* (c) 1996 Advanced RISC Machines Limited. All Rights Reserved. */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <stdlib.h>
#include <ctype.h>

#include "armdefsp.h"
#include "multirdi.h"

#include "dbg_cp.h"
#include "dbg_conf.h"
#include "dbg_rdi.h"
#include "dbg_hif.h"

#include "toolconf.h"

typedef void *toolconf;

/* List of ARMulator RDIs */
extern struct RDIProcVec const * const ARMul_RDIProcs[];

/* function to return an error string */
const char *ARMul_ErrorMessage(ARMul_Error);

toolconf ARMul_ToolConfBase=NULL;
toolconf ARMul_ToolConf=NULL;

static void add_names(toolconf tconf)
{
  char buffer[64];
  unsigned int i;
  extern ARMul_MemStub *ARMul_Memories[];
  extern ARMul_CPStub *ARMul_Coprocessors[];
  extern ARMul_OSStub *ARMul_OSs[];
  extern ARMul_ModelStub *ARMul_Models[];

  /* Before adding the file, we create a list of RDI's that we know about... */
  for (i=0;ARMul_RDIProcs[i];i++) {
    sprintf(buffer,"RDI_%.59s",ARMul_RDIProcs[i]->rditypename);
    ToolConf_Add(tconf,buffer);
  }

  /* ...a list of memories... */
  for (i=0;ARMul_Memories[i];i++) {
    sprintf(buffer,"MEMORY_%.56s",ARMul_Memories[i]->name);
    ToolConf_Add(tconf,buffer);
  }
    
  /* ...a list of coprocessors... */
  for (i=0;ARMul_Coprocessors[i];i++) {
    sprintf(buffer,"COPROCESSOR_%.56s",ARMul_Coprocessors[i]->name);
    ToolConf_Add(tconf,buffer);
  }
    
  /* ...a list of O/Ss... */
  for (i=0;ARMul_OSs[i];i++) {
    sprintf(buffer,"OSMODEL_%.60s",ARMul_OSs[i]->name);
    ToolConf_Add(tconf,buffer);
  }

  /* ...a list of basic models */
  for (i=0;ARMul_Models[i];i++) {
    sprintf(buffer,"MODEL_%.60s",ARMul_Models[i]->name);
    ToolConf_Add(tconf,buffer);
  }
}

char const **ARMul_Processors=NULL;

static int procidx;
static int enum_tags(toolconf hashv,const char *tag,const char *value,void *arg)
{
  char *copy;
  const char *p;
  size_t len=strlen(tag)+1;

  IGNORE(hashv); IGNORE(value); IGNORE(arg);
  
  ARMul_Processors[procidx]=copy=malloc(len);

  p=&tag[0];
  /* capitalise any leading word */
  while (*p && isalpha(*p)) {
    if (p[0]=='A' && p[1]=='R' && p[2]=='M') { /* ARM<n> */
      *copy++=*p++;
      *copy++=*p++;
      *copy++=*p++;
    } else if (p[0]=='S' && p[1]=='A') { /* SA<n> */
      *copy++=*p++;
      *copy++=*p++;
    } else if (p==tag) {
      *copy++=*p++;
    } else {                    /* lowercase anything else */
      *copy++=safe_tolower(*p); p++;
    }
  }

  while (*p && !isalpha(*p)) *copy++=*p++;

  if (*p=='A') { *copy++='a'; p++; } /* revision */

  strcpy(copy,p);               /* copy remaining string verbatim */

  procidx++;

  return 0;
}

static RDI_NameList name_list;

static int p_strcmp(const void *va,const void *vb)
{
  const char *a=*(const char * const *)va,*b=*(const char * const *)vb;
  /* Function that sorts processor names */
  const char *da,*db;
  char *la,*lb;
  int na,nb;

  if (ToolConf_Cmp(a,"DEFAULT")) return -1;

  for (da=a,db=b;!isdigit(*da) && *da && !isdigit(*db) && *db;da++,db++)
    if (*da != *db) return strcmp(a,b);

  /* if (!*da || !*db) return *da - *db; */

  if (!isdigit(*da) || !isdigit(*db)) return strcmp(a,b);

  /* sort on first digit of name next */
  if (*da != *db) return *da - *db;

  /* next sort on full number */
  na=strtol(da,&la,10);
  nb=strtol(db,&lb,10);

  if (na != nb) return na - nb;

  /* sort on any remaining letters */
  if (!la) return !(lb==NULL);
  if (!lb) return -1;

  return strcmp(la,lb);
}

static char const **build_processors(void)
{
  /* Merely probe at the config file to get a list of processors.
   * Then, importantly, free the config database so we can reinitialise
   * properly later.
   */
  unsigned int n;
  toolconf tconf,base;

  base=tconf=(void *)ToolConf_New(-1);
  if (tconf==NULL) return NULL;

  add_names(tconf);

  ToolConf_Read(tconf,NULL,"armluser"); /* ignore if fails */

  if (ToolConf_Read(tconf,NULL,"armul")==NULL) {
    ToolConf_Reset(base);
    return NULL;
  }

  if ((tconf=(void *)ToolConf_Child(tconf,"PROCESSORS"))==NULL) {
    ToolConf_Reset(base);
    return NULL;
  }

  n=ToolConf_NumberOfTags(tconf)+1;

  ARMul_Processors=(char const **)malloc(sizeof(char *)*n);
  if (ARMul_Processors==NULL) {
    ToolConf_Reset(base);
    return NULL;
  }

  procidx=0;
  ToolConf_EnumerateTags(tconf,enum_tags,NULL);

  qsort((void *)(&ARMul_Processors[0]),procidx,
        sizeof(ARMul_Processors[0]),
        p_strcmp);

  ARMul_Processors[procidx]="";

  name_list.itemmax=n-1;
  name_list.names=ARMul_Processors;

  ToolConf_Reset(base);

  return ARMul_Processors;
}

RDI_NameList const *ARMul_RDI_cpunames(void)
{
  if (ARMul_Processors==NULL) build_processors();
  if (ARMul_Processors==NULL) return NULL;
  return (const RDI_NameList *)&name_list;
}

static toolconf add_configblock(toolconf tconf,
                                const Dbg_ConfigBlock *config)
{
//hack
  return NULL;
}

#if 0
  char buffer[512];

  /* All the other bits come later */
  switch (config->bytesex) {
  default: /* do nothing */ break;
  case RDISex_Little:
    ToolConf_Add(tconf, "BYTESEX=LITTLE");
    break;
  case RDISex_Big:
    ToolConf_Add(tconf, "BYTESEX=BIG");
    break;
  }

  sprintf(buffer,"MEMORYSIZE=0x%08lx",
          config->memorysize ? config->memorysize : 0x80000000);
  ToolConf_Add(tconf, buffer);
  
  sprintf(buffer,"FPE=%.480s",(config->fpe) ? "YES" : "NO");
  ToolConf_Add(tconf, buffer);
  
  if (config->cpu_speed) {      /* cpu speed not the default */
    sprintf(buffer,"FCLK=%ld",config->cpu_speed);
    ToolConf_Add(tconf, buffer);
    sprintf(buffer,"MCLK=%ld",config->cpu_speed);
    ToolConf_Add(tconf, buffer);
  }
  
  sprintf(buffer,"SERIALPORT=%d",config->serialport);
  ToolConf_Add(tconf, buffer);
  
  sprintf(buffer,"SERIALLINESPEED=%d",config->seriallinespeed);
  ToolConf_Add(tconf, buffer);
  
  sprintf(buffer,"PARALLELPORT=%d",config->parallelport);
  ToolConf_Add(tconf, buffer);
  
  sprintf(buffer,"PARALLELLINESPEED=%d",config->parallellinespeed);
  ToolConf_Add(tconf, buffer);
  
  if (config->ethernettarget) {
    sprintf(buffer,"ETHERNETTARGET=%.480s",config->ethernettarget);
    ToolConf_Add(tconf, buffer);
  }

  sprintf(buffer,"RDITYPE=%d",config->rditype);
  ToolConf_Add(tconf, buffer);
    
  sprintf(buffer,"DRIVERTYPE=%d",config->drivertype);
  ToolConf_Add(tconf, buffer);
    
  if (config->configtoload) {
    sprintf(buffer,"CONFIGTOLOAD=%.480s",config->configtoload);
    ToolConf_Add(tconf, buffer);
  }
    
  if (config->memconfigtoload) {
    sprintf(buffer,"MEMCONFIGTOLOAD=%.480s",config->memconfigtoload);
    ToolConf_Add(tconf, buffer);
  }

  sprintf(buffer,"FLAGS=0x%x",config->flags);
  ToolConf_Add(tconf, buffer);

  return tconf;
}
#endif

static const struct RDIProcVec *current_rdi=NULL;

#ifndef HostEndian
unsigned int HostEndian=0;      /* global variable */
#endif

/* Open an RDI session.
 *
 * This function determines the processor type, then loads the config file and
 * finds out which RDI to use from it. Finally it initialises the RDI of the
 * chosen ARMulator.
 */

int ARMul_RDI_open(unsigned type, const Dbg_ConfigBlock *config,
                   const Dbg_HostosInterface *hostif,
                   struct Dbg_MCState *dbg_state)
{
  if (ARMul_ToolConfBase==NULL) {
    toolconf tconf;
    tconf=(void *)ToolConf_New(-1);
    if (tconf==NULL) {
      ARMul_ConsolePrint_i(hostif, "\
Error: ARMulator was unable to create a configuration database.\n");
      return ARMul_RaiseError(NULL,ARMulErr_OutOfMemory);
    }
    add_names(tconf);
//hack
//    if (config->processor &&
//        (ARMul_Processors!=NULL || build_processors())) {
//      char buffer[32];
//      sprintf(buffer,"PROCESSOR=%.28s",ARMul_Processors[config->processor]);
//      ToolConf_Add(tconf, buffer);
//    }
    add_configblock(tconf,config);
    if (ToolConf_Read(tconf,NULL,"armul")==NULL) {
      return ARMul_RaiseError(NULL,ARMulErr_NoConfigFile);
    }
    ARMul_ToolConfBase=tconf;
  }
  if (current_rdi==NULL) {
    const char *option, *procname;
    toolconf tconf;

#ifndef HostEndian
  {
    int i=0;
    /* Sort out host-endian problems? */
    *((unsigned char *)&i)=1;
    HostEndian=(i!=1);
  }
#endif
    
    /* build up the config database */
    tconf=ARMul_ToolConfBase;

    /* Find the processor name */
    procname=(void *)ToolConf_Lookup(tconf,"PROCESSOR");
    if (procname==NULL) procname="DEFAULT";
#if 0
 {
      ARMul_ConsolePrint_i(hostif, "\
Error: No 'Processor' configured - cannot continue.\n");
      return RDIError_UnableToInitialise;
    }
#endif

    /* Now lookup the configuration for that processor */
    tconf=(void *)ToolConf_Child(tconf,"PROCESSORS");
    if (tconf==NULL) {
      return ARMul_RaiseError(NULL,ARMulErr_NoConfigProc);
    }
    
    tconf=ARMul_FindConfig(tconf,procname);
    if (tconf==NULL) {
      return ARMul_RaiseError(NULL,ARMulErr_NoConfigTarget,procname);
    }

    /* Now we should be able to find out which RDI to use */
    option=(void *)ToolConf_Lookup(tconf,"ARMULATOR");
    if (option!=NULL) {
      unsigned int i;
      for (i=0;ARMul_RDIProcs[i];i++) {
        if (ToolConf_Cmp(ARMul_RDIProcs[i]->rditypename,option)) {
          /* Found the RDI we want */
          current_rdi=ARMul_RDIProcs[i];
          goto found_rdi_interface;
        }
      }
      return ARMul_RaiseError(NULL,ARMulErr_NoSuchARMulator,option);
    } else {
      return ARMul_RaiseError(NULL,ARMulErr_NoConfigARMulator,procname);
    }      
    
  found_rdi_interface:
    ARMul_ToolConf=tconf;
  }

  /* Now that we have identified the RDI interface we require, we initialise
   * it */

//  return current_rdi->open(type, config, hostif, dbg_state);
  return current_rdi->open(type,NULL,NULL,NULL);
}

int ARMul_RDI_close(void)
{
  int rv;

  if (current_rdi==NULL) return RDIError_NotInitialised;

  rv=current_rdi->close();
  current_rdi=NULL;

  ToolConf_Reset(ARMul_ToolConfBase);
  ARMul_ToolConfBase=NULL;

  return rv;
}

int ARMul_RDI_read(ARMword source, void *dest, unsigned *nbytes)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->read(source,dest,nbytes);
}

int ARMul_RDI_write(const void *source, ARMword dest, unsigned *nbytes)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->write(source,dest,nbytes);
}

int ARMul_RDI_CPUread(unsigned mode, unsigned long mask, ARMword *buffer)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->CPUread(mode,mask,buffer);
}

int ARMul_RDI_CPUwrite(unsigned mode, unsigned long mask, const ARMword *buffer)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->CPUwrite(mode,mask,buffer);
}

int ARMul_RDI_CPread(unsigned CPnum, unsigned long mask, ARMword *buffer)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->CPread(CPnum,mask,buffer);
}

int ARMul_RDI_CPwrite(unsigned CPnum, unsigned long mask, const ARMword *buffer)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->CPwrite(CPnum,mask,buffer);
}

int ARMul_RDI_setbreak(ARMword address, unsigned type, ARMword bound,
                       PointHandle *handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->setbreak(address,type,bound,handle);
}

int ARMul_RDI_clearbreak(PointHandle handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->clearbreak(handle);
}  

int ARMul_RDI_setwatch(ARMword address, unsigned type, unsigned datatype,
                       ARMword bound, PointHandle *handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->setwatch(address,type,datatype,bound,handle);
}

int ARMul_RDI_clearwatch(PointHandle handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->clearwatch(handle);
}  

int ARMul_RDI_execute(PointHandle *handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->execute(handle);
}  

int ARMul_RDI_step(unsigned ninstr,PointHandle *handle)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->step(ninstr,handle);
}  

int ARMul_RDI_info(unsigned type, ARMword *arg1, ARMword *arg2)
{
  return (current_rdi==NULL) ? RDIError_NotInitialised
                             : current_rdi->info(type,arg1,arg2);
}  

/*
 * This function is called to set an error message, which will be returned
 * on the next call of RDI_errmess
 *
 * @@@ This is very bad. It assumes that the debugger will ask for the text
 * corresponding to the error we just gave it. @@@
 */

static char errbuf[256]="";

ARMul_Error ARMul_RaiseError(ARMul_State *state,ARMul_Error errcode,...)
{
  const char *errmsg;
  va_list ap;

  IGNORE(state);

  errmsg=ARMul_ErrorMessage(errcode);
  if (errmsg==NULL) errmsg="";

  va_start(ap, errcode);
  vsprintf(errbuf, errmsg, ap);
  va_end(ap);

  return errcode;
}

int ARMul_RDI_errmess(char *buf, int buflen, int errnum)
{
  int n;

  IGNORE(errnum);

  n=strlen(errbuf);

  if (n>=buflen) n=buflen-1;
  memcpy(buf,errbuf,n);
  buf[n]=0;

  return n;
}

const struct RDIProcVec armul_rdi = {
  "ARMUL",
  
  (rdi_open_proc *)ARMul_RDI_open,
  (rdi_close_proc *)ARMul_RDI_close,
  (rdi_read_proc *)ARMul_RDI_read,
  (rdi_write_proc *)ARMul_RDI_write,
  (rdi_CPUread_proc *)ARMul_RDI_CPUread,
  (rdi_CPUwrite_proc *)ARMul_RDI_CPUwrite,
  (rdi_CPread_proc *)ARMul_RDI_CPread,
  (rdi_CPwrite_proc *)ARMul_RDI_CPwrite,
  (rdi_setbreak_proc *)ARMul_RDI_setbreak,
  (rdi_clearbreak_proc *)ARMul_RDI_clearbreak,
  (rdi_setwatch_proc *)ARMul_RDI_setwatch,
  (rdi_clearwatch_proc *)ARMul_RDI_clearwatch,
  (rdi_execute_proc *)ARMul_RDI_execute,
  (rdi_step_proc *)ARMul_RDI_step,
  (rdi_info_proc *)ARMul_RDI_info,
  
  0, /*pointinq*/
  0, /*addconfig*/
  0, /*loadconfigdata*/
  0, /*selectconfig*/
  0, /*drivernames*/
  
  ARMul_RDI_cpunames,
  ARMul_RDI_errmess
};
