/***************************************************************************\
* armsupp.c                                                                 *
* ARMulator II support code.                                                *
* Copyright (C) 1991 Advanced RISC Machines Limited.  All rights reserved.  *
* Written by Dave Jaggar.                                                   *
\***************************************************************************/

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include "armdefsp.h"
#include "armemu.h"
#include "toolconf.h"
#include "dbg_rdi.h"

#include "armsupp.h"

/*
 * Definitions for the emulator architecture
 */

unsigned ARMul_DoCoPro(ARMul_State *state) ;
static ARMword DoProg(ARMul_State *state);
static ARMword DoInstr(ARMul_State *state);

unsigned ARMul_MultTable[32] = {1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,
                                10,10,11,11,12,12,13,13,14,14,15,15,16,16,16} ;

/*
 * Definitions for the support routines
 */

static ARMword GetReg(ARMul_State *state, unsigned mode, unsigned reg) ;
static void SetReg(ARMul_State *state, unsigned mode, unsigned reg, ARMword value) ;
static ARMword GetPC(ARMul_State *state) ;
static void SetPC(ARMul_State *state, ARMword value) ;
static ARMword GetR15(ARMul_State *state) ;
static void SetR15(ARMul_State *state, ARMword value) ;

static ARMword GetCPSR(ARMul_State *state) ;
static void SetCPSR(ARMul_State *state, ARMword value) ;
static ARMword GetSPSR(ARMul_State *state, ARMword mode) ;
static void SetSPSR(ARMul_State *state, ARMword mode, ARMword value) ;

#ifdef CYCLEBASED
unsigned CoProNextState(ARMul_State *state, unsigned ready, unsigned busy) ;
#endif
unsigned IntPending(ARMul_State *state, ARMword instr);

static void Abort(ARMul_State *state, ARMword address, ARMword word);

static RDIInterface RDI_Interface = {
  NULL,
  DoInstr,
  DoProg,

  GetReg,
  SetReg,

  GetPC,
  SetPC,
  GetR15,
  SetR15,

  GetCPSR,
  SetCPSR,
  GetSPSR,
  SetSPSR,

  Abort
  };

/*
 * Returns a new instantiation of the ARMulator's state
 */

ARMul_State *ARMul_InitState(ARMul_State *state)
{
  state->ARMulator = ARMulator_ARM;
  state->rdi=RDI_Interface;

  state->Emulate = RUN ;
#ifdef CODE16
  SETINSTRUCTIONSET(INSTRUCTION32);
#endif

  state->Inted = 3 ;
  state->LastInted = 3 ;

  state->rdi_mem_access = NULL;  /* not needed on ARM6/ARM7/ARM8 */

  return state;
}

/*
 * Call this routine to set up the initial machine state or perform a RESET
 */

void ARMul_Reset(ARMul_State *state)
{state->NextInstr = 0 ;

#ifdef CODE16
 SETINSTRUCTIONSET(INSTRUCTION32);
#endif

 if (state->prog32Sig) {
    state->Reg[15] = 0 ;
    state->Cpsr = INTBITS | SVC32MODE ;
    }
 else {
    state->Reg[15] = 0 ;
    state->Cpsr = INTBITS | SVC26MODE ;
    }
 ARMul_CPSRAltered(state) ;
 state->Bank = SVCBANK ;
 FLUSHPIPE ;

 state->EndCondition = 0 ;
 state->broken = FALSE;
 state->ErrorCode = 0 ;

#ifdef CYCLEBASED
 state->NextCycle = DESTPC1 ;
 state->NmBus = ~state->Mode & MODEBITS ;
 state->NrwSig = LOW ;
 state->doutenSig = LOW ;
 ADDRWORD;
 state->NcpiSig = HIGH ;
 state->cpaSig = LOW ;
 state->cpbSig = LOW ;
 state->LSCActive = FALSE ;
#endif

 state->NresetSig = HIGH ;
 state->NfiqSig = HIGH ;
 state->NirqSig = HIGH ;
 ARMul_CallInterrupt(state,3);

 ARMul_SetNtrans(state,-1);
 state->abortSig = LOW ;
 state->AbortAddr = 1 ;

 state->NumInstrs = 0 ;

{
  const ARMul_Cycles *cycles;
  if ((cycles=ARMul_ReadCycles(state))!=NULL)
    state->cycles=*cycles;
}

 ARMul_SetException(state);

 /* Call exception upcalls */
 ARMul_CallInterrupt(state,3);
 ARMul_CallModeChange(state,state->Mode);
 ARMul_CallConfigChange(state,state->arm_config);
 ARMul_CallTransChange(state,state->NtransSig);
}

#ifdef CYCLEBASED

/***************************************************************************\
* Emulate the execution of one cycle.  Start the correct emulator           *
* (Emulate26 for a 26 bit ARM and Emulate32 for a 32 bit ARM), return the   *
* address of the instruction that is executed.                              *
\***************************************************************************/

ARMword ARMul_DoCycle(ARMul_State *state)
{ARMword pc ;

 state->Emulate = ONCE ;
 if (state->prog32Sig && ARMul_MODE32BIT)
    pc = state->core.Emulate26(state) ;
 else
    pc = state->core.Emulate32(state) ;
 return(pc) ;
 }

/***************************************************************************\
* Coprocessor fixup code, as cpa and cpb change too late for ARMulator      *
* to fully predict the next cycle                                           *
\***************************************************************************/

unsigned ARMul_DoCoPro(ARMul_State *state)
{if (state->NcpiSig == LOW) { /* there is a coprocessor handshake active */
    if ((state->cpaSig == LOW) && (state->cpbSig == LOW)) { /* Ready */
       state->addrBus = state->NextaddrBus | state->addr01Bus;
       state->NrwSig = state->NextNrwSig ;
       state->NopcSig = state->NextNopcSig ;
       state->NmreqSig = state->NextNmreqSig ;
       state->seqSig = state->NextseqSig ;
       return(TRUE) ;
       }
    else if ((state->cpaSig == LOW) && (state->cpbSig == HIGH)) { /* Busy, force I cycle */
       state->addrBus = state->PrevaddrBus & PCBITS ; /* Clear A[0,1] */
       state->NopcSig = HIGH ;
       state->NrwSig = LOW ;
       ICYCLE ;
       return(TRUE) ;
       }
    else if ((state->cpaSig == HIGH) && (state->cpbSig == HIGH)) { /* Bounce, force I cycle */
       state->addrBus = state->PrevaddrBus & PCBITS ; /* Clear A[0,1] */
       state->NopcSig = HIGH ;
       state->NrwSig = LOW ;
       ICYCLE ;
       return(TRUE) ;
       }
    else /* the illegal state */
       return(FALSE) ;
    }
 if (state->LSCActive) {
    if ((state->cpaSig == LOW) && (state->cpbSig == LOW)) { /* Inc */
       state->addrBus = state->PrevaddrBus + 4 ;
       state->NrwSig = state->PrevNrwSig ;
       state->NopcSig = HIGH ;
       SCYCLE ;
       return(TRUE) ;
       }
    else if (state->cpaSig != state->cpbSig) /* Illegal */
       return(FALSE) ;
    else { /* end of transfer cpa = cpb = HIGH */
       state->addrBus = state->NextaddrBus ;
       state->NrwSig = state->NextNrwSig ;
       state->NopcSig = state->NextNopcSig ;
       state->NmreqSig = state->NextNmreqSig ;
       state->seqSig = state->NextseqSig ;
       return(TRUE) ;
       }
    }
 return(TRUE) ;
 }

#else

/***************************************************************************\
* Emulate the execution of an entire program.  Start the correct emulator   *
* (Emulate26 for a 26 bit ARM and Emulate32 for a 32 bit ARM), return the   *
* address of the last instruction that is executed.                         *
\***************************************************************************/

static ARMword DoProg(ARMul_State *state)
{ARMword pc = 0 ;
 state->Emulate = RUN ;
 while (state->Emulate != STOP) {
    state->Emulate = RUN ;
    if (state->prog32Sig && ARMul_MODE32BIT)
      pc = state->core->Emulate32(state) ;
    else
      pc = state->core->Emulate26(state) ;
    }
 return(pc) ;
 }

/***************************************************************************\
* Emulate the execution of one instruction.  Start the correct emulator     *
* (Emulate26 for a 26 bit ARM and Emulate32 for a 32 bit ARM), return the   *
* address of the instruction that is executed.                              *
\***************************************************************************/

static ARMword DoInstr(ARMul_State *state)
{ ARMword pc = 0 ;

  state->Emulate = ONCE;
  do {
    if (state->prog32Sig && ARMul_MODE32BIT)
      pc = state->core->Emulate32(state) ;
    else
      pc = state->core->Emulate26(state) ;
  } while (state->NextInstr & PRIMEPIPE);
  return pc;
}

#endif

/***************************************************************************\
* This routine returns the value of a register from a mode.                 *
\***************************************************************************/

static ARMword GetReg(ARMul_State *state, unsigned mode, unsigned reg)
{
   if (mode != CURRENTMODE) {
     mode &= (unsigned)MODEBITS;
     if (mode != state->Mode && (!(state->Processor & ARM_System32_Prop) ||
                                 (!(mode == USER32MODE && state->Mode == SYSTEM32MODE) &&
                                  !(mode == SYSTEM32MODE && state->Mode == USER32MODE)))) {
       ARMword newbank = ARMul_ModeToBank(state,(ARMword)mode);
       if ((reg >= 13) || (newbank == FIQBANK && reg >= 8))
         return state->RegBank[newbank][reg];
       else if (reg >= 8 && ARMul_ModeToBank(state, state->Mode) == FIQBANK)
         return state->RegBank[USERBANK][reg];
     }
   }
   return(state->Reg[reg]) ;
}

/***************************************************************************\
* This routine sets the value of a register for a mode.                     *
\***************************************************************************/

static void SetReg(ARMul_State *state, unsigned mode,
                   unsigned reg, ARMword value)
{
  if (mode != CURRENTMODE) {
    mode &= (unsigned)MODEBITS;
    if (mode != state->Mode && (!(state->Processor & ARM_System32_Prop) ||
                                (!(mode == USER32MODE && state->Mode == SYSTEM32MODE) &&
                                 !(mode == SYSTEM32MODE && state->Mode == USER32MODE)))) {
      ARMword newbank = ARMul_ModeToBank(state,(ARMword)mode);
      if ((reg >= 13) || (newbank == FIQBANK && reg >= 8)) {
        state->RegBank[newbank][reg] = value;
        return;
      } else if (reg >= 8 && ARMul_ModeToBank(state, state->Mode) == FIQBANK) {
        state->RegBank[USERBANK][reg] = value;
        return;
      }
    }
  }
  state->Reg[reg] = value;
}

/***************************************************************************\
* This routine returns the value of the PC, mode independently.             *
\***************************************************************************/

static ARMword GetPC(ARMul_State *state)
{if (state->Mode > SVC26MODE)
    return(state->Reg[15]) ;
 else
    return(R15PC) ;
}

/***************************************************************************\
* This routine sets the value of the PC.                                    *
\***************************************************************************/

static void SetPC(ARMul_State *state, ARMword value)
{if (ARMul_MODE32BIT)
#ifdef CODE16
    state->Reg[15] = PCADDRESSBITS(value);
#else
    state->Reg[15] = value & PCBITS ;
#endif
 else
    state->Reg[15] = value & R15PCBITS ;
 FLUSHPIPE ;
#ifdef CYCLEBASED
#ifdef CODE16
 state->addrBus = PCM ;
#else
 state->addrBus = PC ;
#endif
 ADDRINSTR;
 state->NrwSig = LOW ;
 state->doutenSig = LOW ;
 NCYCLE ;
 state->NopcSig = LOW ;
 state->NextCycle = DESTPC2 ;
#endif
}

/***************************************************************************\
* This routine returns the value of register 15, mode independently.        *
\***************************************************************************/

static ARMword GetR15(ARMul_State *state)
{if (state->Mode > SVC26MODE)
   return(state->Reg[15]) ;
 else
    return(R15PC | ECC | ER15INT | EMODE) ;
}

/***************************************************************************\
* This routine sets the value of Register 15.                               *
\***************************************************************************/

static void SetR15(ARMul_State *state, ARMword value)
{
  if (ARMul_MODE32BIT) {
#ifdef CODE16
    state->Reg[15] = PCADDRESSBITS(value);
#else
    state->Reg[15] = value & PCBITS ;
#endif
  } else {
    state->Reg[15] = value ;
    ARMul_R15Altered(state) ;
    state->Reg[15] = value & PCBITS ;
  }
  FLUSHPIPE ;
#ifdef CYCLEBASED
  state->addrBus = GetPC(state) ;
  ADDRINSTR;
  state->NrwSig = LOW ;
  state->doutenSig = LOW ;
  NCYCLE ;
  state->NopcSig = LOW ;
  state->NextCycle = DESTPC2 ;
#endif
}

/*
 * This routine returns the value of the CPSR
 */

static ARMword GetCPSR(ARMul_State *state)
{
 return(CPSR) ;
 }

/*
 * This routine sets the value of the CPSR
 */

static void SetCPSR(ARMul_State *state, ARMword value)
{state->Cpsr = CPSR ;
#ifdef CODE16
   if (state->Processor & ARM_Code16_Prop)
     value = value | 0x00000010;  /* Bit 4 hardwired to 1 in thumb */
#endif
 SETPSR(state->Cpsr,value) ;
#ifdef CODE16
 if (state->Processor & ARM_Code16_Prop)
   SETINSTRUCTIONSET(CPSRINSTRUCTIONSET(value));
#endif
 ARMul_CPSRAltered(state) ;
 }

/*
 * This routine does all the nasty bits involved in a write to the CPSR,
 * including updating the register bank, given an MSR instruction.
 */

void ARMul_FixCPSR(ARMul_State *state, ARMword instr, ARMword rhs)
{state->Cpsr = CPSR ;
 if (state->Mode == USER32MODE || state->Mode == USER26MODE) { /* Only write flags in user mode */
    if (BIT(19)) {
       SETCC(state->Cpsr,rhs) ;
       }
    }
 else { /* Not a user mode */
#ifdef CODE16
   if (state->Processor & ARM_Code16_Prop) {
     rhs = rhs | 0x00000010;  /* Bit 4 hardwired to 1 in thumb */
     if (BIT(16))
       SETINSTRUCTIONSET(CPSRINSTRUCTIONSET(rhs));   }
#endif
    if (BITS(16,19)==9) SETPSR(state->Cpsr,rhs) ;
    else if (BIT(16)) SETINTMODE(state->Cpsr,rhs) ;
    else if (BIT(19)) SETCC(state->Cpsr,rhs) ;
    }
 ARMul_CPSRAltered(state) ;
 }

/*
 * Get an SPSR from the specified mode
 */

static ARMword GetSPSR(ARMul_State *state, ARMword mode)
{
  ARMword bank = ARMul_ModeToBank(state,mode);
  if (bank == DUMMYBANK)
    return(CPSR);
  return (GETSPSR(bank));
}

/*
 * This routine does a write to an SPSR
 */

static void SetSPSR(ARMul_State *state, ARMword mode, ARMword value)
{
  ARMword bank = ARMul_ModeToBank(state,mode);
  if (bank != USERBANK && bank !=DUMMYBANK) {
#ifdef CODE16
    if (state->Processor & ARM_Code16_Prop)
      value = value | 0x00000010;  /* Bit 4 hardwired to 1 in thumb */
#endif
    state->Spsr[bank] = value ;
  }
}

/*
 * This routine does a write to the current SPSR, given an MSR instruction
 */

void ARMul_FixSPSR(ARMul_State *state, ARMword instr, ARMword rhs)
{if (state->Bank != USERBANK && state->Bank !=DUMMYBANK) {
#ifdef CODE16
  if (state->Processor & ARM_Code16_Prop)
    rhs = rhs | 0x00000010;  /* Bit 4 hardwired to 1 in thumb */
#endif
    if (BITS(16,19)==9) SETPSR(state->Spsr[state->Bank],rhs) ;
    else if (BIT(16)) SETINTMODE(state->Spsr[state->Bank],rhs) ;
    else if (BIT(19)) SETCC(state->Spsr[state->Bank],rhs) ;
    }
}

/*
 * This routine updates the state of the emulator after the Cpsr has been
 * changed.  Both the processor flags and register bank are updated.
 */

void ARMul_CPSRAltered(ARMul_State *state)
{
  ARMword oldmode ;

 if (state->prog32Sig == LOW)
    state->Cpsr &= (CCBITS | INTBITS | R15MODEBITS) ;
 oldmode = state->Mode ;
 if (state->Mode != (state->Cpsr & MODEBITS)) {
    ARMul_ChangeMode(state,state->Cpsr & MODEBITS) ;
#ifdef CYCLEBASED
    state->NmBus = ~state->Mode & MODEBITS ;
#endif
    }

#ifdef CODE16
 SETISET(state->Cpsr);   /* reset instruction set bit in CPSR */
#endif

 ASSIGNINT(state->Cpsr & INTBITS) ;

 if ((oldmode & MODEBIT) != (state->Mode & MODEBIT))
    state->Emulate=CHANGEMODE ;
 if (state->Mode <= SVC26MODE)
   {
     state->Reg[15] = PC ;
   }

  state->Flags=state->Cpsr>>28;

  ARMul_SetException(state);
}

/*
 * This routine updates the state of the emulator after register 15 has
 * been changed.  Both the processor flags and register bank are updated.
 * This routine should only be called from a 26 bit mode.
 */

void ARMul_R15Altered(ARMul_State *state)
{
 if (state->Mode != R15MODE) {
    ARMul_ChangeMode(state,R15MODE) ;
#ifdef CYCLEBASED
    state->NmBus = ~state->Mode & MODEBITS ;
#endif
    }
 if (state->Mode > SVC26MODE)
    state->Emulate = CHANGEMODE ;
 ASSIGNR15INT(R15INT) ;
 state->Flags = state->Reg[15]>>28;
 state->Reg[15] = PC ;
 ARMul_SetException(state);
}

/*
 * Returns the register number of the nth register in a reg list.
 */

unsigned ARMul_NthReg(ARMword instr, unsigned number)
{unsigned bit, upto ;

 for (bit = 0, upto = 0 ; upto <= number ; bit++)
    if (BIT(bit)) upto++ ;
 return(bit - 1) ;
}

/*
 * Assigns the N and Z flags depending on the value of result
 */

void ARMul_NegZero(ARMul_State *state, ARMword result)
{
  if (NEG(result)) { SETN ; CLEARZ ; }
  else if (result == 0) { CLEARN ; SETZ ; }
  else { CLEARNZ ; } ;
}

/***************************************************************************\
* This function does the work of generating the addresses used in an        *
* LDC instruction.  The code here is always post-indexed, it's up to the    *
* caller to get the input address correct and to handle base register       *
* modification. It also handles the Busy-Waiting.                           *
\***************************************************************************/

void ARMul_LDC(ARMul_State *state,ARMword instr,ARMword address)
{unsigned cpab ;
 ARMword data ;
 armul_MemAccess *mem_access;
 void *mem_handle=state->mem.handle;
 armul_LDC *ldc=state->CP[CPNum].ldc;
 void *cp_handle=state->CP[CPNum].handle;
 int hourglass_counter=8192;

 if (state->Processor & ARM_ARM8_Prop) {
   mem_access=state->mem.x.arm8.access;
 } else {
   mem_access=state->mem.x.basic.access;
 }

 UNDEF_LSCPCBaseWb ;

  /* Check for ARM7 abort bug - effects LDC and STC */
  if ((state->Processor & ARM_SubPage_Prop) &&
      state->proc.arm7.last_prefetch==-1) {
    /* patch instruction in prefetch queue to be a SWI really */
    state->proc.arm7.decoded=0xef000000;
  }

 /* @@@ this is very broken */
 if (ADDREXCEPT(address)) {
   if (state->Processor & ARM_ARM8_Prop) {
     ARM8INTERNALABORT(state->Aborted,address) ;
   } else {
     INTERNALABORT(state->Aborted,address) ;
   }
 }

 cpab = ldc(cp_handle,ARMul_FIRST,instr,0) ;
 while (cpab == ARMul_BUSY) {
   while (mem_access(mem_handle,address,NULL,acc_Icycle)==0 &&
          Hourglass())
     ;
    if (IntPending(state,instr)) {
       cpab = ldc(cp_handle,ARMul_INTERRUPT,instr,0) ;
       return ;
       }
    else
       cpab = ldc(cp_handle,ARMul_BUSY,instr,0) ;
    }
 if (cpab == ARMul_CANT) {
    CPTAKEABORT ;
    return ;
    }
 cpab = ldc(cp_handle,ARMul_TRANSFER,instr,0) ;
 while (mem_access(mem_handle,address,&data,acc_LoadWordN)==0 &&
        Hourglass())
   ;
 if (state->Processor & ARM_ARM8_Prop) {
   ARM8BUSUSEDINCPCN;
 } else {
   BUSUSEDINCPCN ;
 }
 if (BIT(21))
    LSBase = state->Base ;
 cpab = (state->CP[CPNum].ldc)(state,ARMul_DATA,instr,data) ;
 while (cpab == ARMul_INC) {
    address += 4 ;
    while (mem_access(mem_handle,address,&data,acc_LoadWordN)==0 &&
           Hourglass())
      ;
    cpab = (state->CP[CPNum].ldc)(state,ARMul_DATA,instr,data) ;
    }
 if (state->abortSig || state->Aborted) {
    TAKEABORT ;
    }
 }

/***************************************************************************\
* This function does the work of generating the addresses used in an        *
* STC instruction.  The code here is always post-indexed, it's up to the    *
* caller to get the input address correct and to handle base register       *
* modification. It also handles the Busy-Waiting.                           *
\***************************************************************************/

void ARMul_STC(ARMul_State *state,ARMword instr,ARMword address)
{unsigned cpab ;
 ARMword data ;
 armul_MemAccess *mem_access;
 void *mem_handle=state->mem.handle;
 armul_STC *stc=state->CP[CPNum].stc;
 void *cp_handle=state->CP[CPNum].handle;
  int hourglass_counter=8192;

 if (state->Processor & ARM_ARM8_Prop) {
   mem_access=state->mem.x.arm8.access;
 } else {
   mem_access=state->mem.x.basic.access;
 }

 UNDEF_LSCPCBaseWb ;

  /* Check for ARM7 abort bug */
  if ((state->Processor & ARM_SubPage_Prop) &&
      state->proc.arm7.last_prefetch==-1) {
    /* patch instruction in prefetch queue to be a SWI really */
    state->proc.arm7.decoded=0xef000000;
  }

 /* @@@ This is very broken */
 if (ADDREXCEPT(address) || VECTORACCESS(address)) {
   if (state->Processor & ARM_ARM8_Prop) {
     ARM8INTERNALABORT(state->Aborted,address) ;
   } else {
     INTERNALABORT(state->Aborted,address) ;
   }
 }

 cpab = stc(cp_handle,ARMul_FIRST,instr,&data) ;
 while (cpab == ARMul_BUSY) {
   while (mem_access(mem_handle,address,NULL,acc_Icycle)==0 &&
          Hourglass())
     ;
    if (IntPending(state,instr)) {
       cpab = stc(cp_handle,ARMul_INTERRUPT,instr,0) ;
       return ;
       }
    else
       cpab = stc(cp_handle,ARMul_BUSY,instr,&data) ;
    }
 if (cpab == ARMul_CANT) {
    CPTAKEABORT ;
    return ;
    }
 if (ARM32BITMODE) {
   if (ADDREXCEPT(address) || VECTORACCESS(address)) {
     if (state->Processor & ARM_ARM8_Prop) {
       ARM8INTERNALABORT(state->Aborted,address) ;
     } else {
       INTERNALABORT(state->Aborted,address) ;
     }
   }
 }
 if (state->Processor & ARM_ARM8_Prop) {
   ARM8BUSUSEDINCPCN ;
 } else {
   BUSUSEDINCPCN ;
 }
 if (BIT(21))
    LSBase = state->Base ;
 cpab = (state->CP[CPNum].stc)(state,ARMul_DATA,instr,&data) ;
 while (mem_access(mem_handle,address,&data,acc_StoreWordN)==0 &&
        Hourglass())
   ;
 while (cpab == ARMul_INC) {
    address += 4 ;
    cpab = (state->CP[CPNum].stc)(state,ARMul_DATA,instr,&data) ;
    while (mem_access(mem_handle,address,&data,acc_StoreWordN)==0 &&
           Hourglass())
      ;
  }
 if (state->abortSig || state->Aborted) {
    TAKEABORT ;
    }
 }

/*
 * This function does the busy-waiting for an MCR instruction.
 */

void ARMul_MCR(ARMul_State *state,ARMword instr, ARMword source)
{unsigned cpab ;
 armul_MCR *mcr=state->CP[CPNum].mcr;
 void *cp_handle=state->CP[CPNum].handle;
  int hourglass_counter=8192;

#ifdef CYCLEBASED
 state->PrevaddrBus = state->addrBus ;
 state->NcpiSig = LOW ;
 state->LSCActive = FALSE ;
 state->NextaddrBus = GetNextPC(state) | state->addr01Bus ;
 state->NextNrwSig = HIGH ;
 state->NextNopcSig = HIGH ;
 state->NextNmreqSig = HIGH ; /* CCYCLE */
 state->NextseqSig = HIGH ;
 state->Temp = source ;
 state->LastCycle = MCR1 ;
 return ;
#else
 cpab = mcr(cp_handle,ARMul_FIRST,instr,source) ;
 while (cpab == ARMul_BUSY && Hourglass()) {
    ARMul_Icycles(state,1,0) ;
    if (IntPending(state,instr)) {
       cpab = mcr(cp_handle,ARMul_INTERRUPT,instr,0) ;
       return ;
       }
    else
       cpab = mcr(cp_handle,ARMul_BUSY,instr,source) ;
    }
 if (cpab == ARMul_CANT)
    ARMul_Abort(state,ARMul_UndefinedInstrV,instr);
 else {
   if (state->Processor & ARM_ARM8_Prop) {
     ARM8BUSUSEDINCPCN;
   } else {
     BUSUSEDINCPCN;
   }
    ARMul_Ccycles(state,1,0) ;
    }
#endif
 }

/*
 * This function does the busy-waiting for an MRC instruction.
 */

ARMword ARMul_MRC(ARMul_State *state,ARMword instr)
{unsigned cpab ;
 armul_MRC *mrc=state->cp_bus.mrc;
 void *cp_handle=state->cp_bus.handle;
 ARMword result = 0 ;
  int hourglass_counter=8192;

#ifdef CYCLEBASED
 state->PrevaddrBus = state->addrBus ;
 state->NcpiSig = LOW ;
 state->LSCActive = FALSE ;
 state->NextaddrBus = GetNextPC(state) | state->addr01Bus ;
 state->NextNrwSig = LOW ;
 state->NextNopcSig = HIGH ;
 state->NextNmreqSig = HIGH ; /* CCYCLE */
 state->NextseqSig = HIGH ;
 state->LastCycle = MRC1 ;
 return(0) ;
#else
 cpab = mrc(cp_handle,ARMul_FIRST,instr,&result) ;
 while (cpab == ARMul_BUSY && Hourglass()) {
    ARMul_Icycles(state,1,0) ;
    if (IntPending(state,instr)) {
       cpab = mrc(cp_handle,ARMul_INTERRUPT,instr,0) ;
       return(0) ;
       }
    else
       cpab = mrc(cp_handle,ARMul_BUSY,instr,&result) ;
    }
 if (cpab == ARMul_CANT) {
    ARMul_Abort(state,ARMul_UndefinedInstrV,instr);
    result = ECC ; /* Parent will destroy the flags otherwise */
    }
 else {
   if (state->Processor & ARM_ARM8_Prop) {
     ARM8BUSUSEDINCPCS ;
   } else {
     BUSUSEDINCPCS ;
   }
    ARMul_Ccycles(state,1,0) ;
    ARMul_Icycles(state,1,0) ;
    }
 return(result) ;
#endif
}

/*
 * This function does the busy-waiting for an CDP instruction.
 */

void ARMul_CDP(ARMul_State *state,ARMword instr)
{unsigned cpab ;
  int hourglass_counter=8192;

#ifdef CYCLEBASED
 state->PrevaddrBus = state->addrBus ;
 state->NcpiSig = LOW ;
 state->LSCActive = FALSE ;
 NCYCLE ;
 state->NextaddrBus = GetNextPC(state) | state->addr01Bus ;
 state->NextNrwSig = LOW ;
 state->NextNopcSig = LOW ;
 state->NextNmreqSig = LOW ; /* NCYCLE */
 state->NextseqSig = LOW ;
 state->LastCycle = CDP1 ;
 return ;
#else
 cpab = (state->cp_bus.cdp)(state,ARMul_FIRST,instr) ;
 while (cpab == ARMul_BUSY && Hourglass()) {
    ARMul_Icycles(state,1,0) ;
    if (IntPending(state,instr)) {
       cpab = (state->cp_bus.cdp)(state,ARMul_INTERRUPT,instr) ;
       return ;
       }
    else
       cpab = (state->cp_bus.cdp)(state,ARMul_BUSY,instr) ;
    }
 if (cpab == ARMul_CANT)
    ARMul_Abort(state,ARMul_UndefinedInstrV,instr);
 else {
   if (state->Processor & ARM_ARM8_Prop) {
     ARM8BUSUSEDN ;
   } else {
     BUSUSEDN ;
   }
  }
#endif
}

/*
 * This function handles Undefined instructions, as CP isntruction
 */

void ARMul_UndefInstr(ARMul_State *state,ARMword instr)
{
#ifdef CYCLEBASED
 state->PrevaddrBus = state->addrBus ;
 state->NcpiSig = LOW ;
 state->LSCActive = FALSE ;
 state->NextaddrBus = GetNextPC(state) ;
 state->NextNrwSig = LOW ;
 state->NextNopcSig = LOW ;
 state->NextNmreqSig = LOW ; /* NCYCLE */
 state->NextseqSig = LOW ;
 state->addr01Bus = 0 ;
 state->LastCycle = UNDEF ;
#else
 IGNORE(instr);
 ARMul_Abort(state,ARMul_UndefinedInstrV,instr);
#endif
}

/*
 * This function handles Unpredictable instructions (but not very well)
 */

void ARMul_UnpredictableInstr(ARMul_State *state,ARMword instr)
{
  ARMul_ConsolePrint(state,"\
Core: Warning: Instruction with opcode %lx has unpredictable effects under the\n\
      current circumstances (the instruction has been ignored)\n", instr);
}

#ifdef CYCLEBASED

/***************************************************************************\
* Monitor the CPA and CPB signals and decided which is the next state       *
* from the current one.                                                     *
\***************************************************************************/

unsigned CoProNextState(ARMul_State *state, unsigned ready, unsigned busy)
{
if (state->cpaSig) {
    if (state->cpbSig) { /* Undefined Instruction */
       state->NcpiSig = HIGH ;
       if (!IntPending(state))
          ARMul_Abort(state,ARMul_UndefinedInstrV) ;
       return(DESTPC1) ;
       }
    else { /* Illegal state */
       state->NcpiSig = HIGH ;
       UNDEF_CoProHS ;
       ARMul_Abort(state,ARMul_ResetV) ;
       return(DESTPC1) ;
       }
    }
 else {
    if (state->cpbSig) { /* Busy wait */
       if (IntPending(state))
          return(DESTPC1) ;
       else /* busy wait */
          return(busy) ;
       }
    else { /* Normal */
       state->NcpiSig = HIGH ;
       return(ready) ;
       }
    }
}

#endif

/*
 * Return TRUE if an interrupt is pending, FALSE otherwise.
 */

unsigned IntPending(ARMul_State *state,ARMword instr)
{
#ifdef CYCLEBASED
 if ((state->Inted & 3) < 3) {
    if (!(state->Inted & 1))
       ARMul_Abort(state,ARMul_FIQV,instr);
    else
       ARMul_Abort(state,ARMul_IRQV,instr);
    state->NcpiSig = HIGH ;
    NCYCLE ;
    return(TRUE) ;
    }
 return(FALSE) ;
#else
 if (state->Exception) { /* Any exceptions */
    if (state->NresetSig == LOW) {
       ARMul_Abort(state,ARMul_ResetV,instr);
       return(TRUE) ;
       }
    else if (!state->NfiqSig && !FFLAG) {
       ARMul_Abort(state,ARMul_FIQV,instr);
       return(TRUE) ;
       }
    else if (!state->NirqSig && !IFLAG) {
       ARMul_Abort(state,ARMul_IRQV,instr);
       return(TRUE) ;
       }
    }
 return(FALSE) ;
#endif
 }

/*
 * Align a word access to a non word boundary
 */

void ARMul_Align(ARMul_State *state, ARMword address, ARMword *datap)
{/* this code assumes the address is really unaligned,
    as a shift by 32 is undefined in C */
  IGNORE(state);
 address = (address & 3) << 3 ; /* get the word address */
 *datap=( ( *datap >> address) | (*datap << (32 - address)) ) ; /* rot right */
}

#ifdef CYCLEBASED

/*
 * This routine is returns the number of clock ticks since the last reset.
 */

char *ARMul_ErrorMess(ARMul_State *state,unsigned number)
{
 switch (number) {
    case UNDEFNUM_Test :
       return("TST,TEQ,CMP,CMN operation without P bit set") ;
    case UNDEFNUM_Shift :
       return("Register shift with bit 7 set in the opcode") ;
    case UNDEFNUM_MSRPC :
       return("MSR instruction transferring from the PC") ;
    case UNDEFNUM_MRSPC :
       return("MRS instruction transferring to the PC") ;
    case UNDEFNUM_MULPCDest :
       return("MUL with Rd=PC or MULL with any register=PC");
    case UNDEFNUM_MULDestEQOp1 :
       return("MUL with Rd=Rm or MULL with any of RdHi, RdLo, Rm the same");
    case UNDEFNUM_ReservedMult :
       return("Multiply instruction with reserved flags pattern");
    case UNDEFNUM_LSRBPC :
       return("Loading or Storing a byte to/from the PC is undefined") ;
    case UNDEFNUM_LSRBaseEQOffWb :
       return("Load or Store with writeback, same register used for the base and the offset") ;
    case UNDEFNUM_LSRBaseEQDestWb :
       return("Load or Store with writeback, same register used for the base and the destination") ;
    case UNDEFNUM_LSRPCBaseWb :
       return("Load or Store, PC relative with writeback") ;
    case UNDEFNUM_LSRPCOffWb :
       return("Load or Store, PC as the offset with writeback") ;
    case UNDEFNUM_LSRHPC :
       return("Loading or Storing a halfword to/from the PC is undefined") ;
    case UNDEFNUM_LSMNoRegs :
       return("No registers specified in the register list") ;
    case UNDEFNUM_LSMPCBase :
       return("Load or Store Multiple, PC relative") ;
    case UNDEFNUM_LSMUserBankWb :
       return("Load or Store Multiple, forced user bank with writeback") ;
    case UNDEFNUM_LSMBaseInListWb :
       return("Load or Store Multiple, base register in the register list") ;
    case UNDEFNUM_SWPPC :
       return("PC specified in a SWP instruction") ;
    case UNDEFNUM_CoProHS :
       return("Illegal Coprocessor Handshake") ;
    case UNDEFNUM_MCRPC :
       return("PC specified in an MCR instruction") ;
    case UNDEFNUM_LSCPCBaseWb :
       return("Load or Store Coprocessor, PC relative with writeback") ;
    case UNDEFNUM_UndefNotBounced :
       return("Undefined instruction not bounced") ;
    case UNDEFNUM_IllegalMode :
       return("Undefined processor mode entered") ;
    case UNDEFNUM_Prog32SigChange :
       return("Prog32 pulled low when processor in a 32 bit mode") ;
    case UNDEFNUM_Data32SigChange :
       return("Data32 pulled low when processor in a 32 bit mode") ;
    default :
       return("No Error") ;
    }
 }

#endif

/***************************************************************************\
* This routine causes an Abort to occur, including selecting the correct    *
* mode, register bank, and the saving of registers.  Call with the          *
* appropriate vector's memory address (0,4,8 ....)                          *
\***************************************************************************/

static void Abort(ARMul_State *state, ARMword vector, ARMword word)
{ARMword temp ;
#ifdef CODE16
 int old_instruction_size = INSTRUCTIONSIZE;
#define OLDINSTRUCTIONSIZE (old_instruction_size)
#else
#define OLDINSTRUCTIONSIZE (INSTRUCTION32SIZE)
#endif

 state->Aborted = FALSE ;

#ifdef CYCLEBASED
 state->addr01Bus = 0 ;
 state->NexecSig = 0 ;
#endif
 if (state->os.exception &&
     state->os.exception(state->os.handle,vector,GetPC(state)))
    return ;

 if (state->prog32Sig)
    if (ARMul_MODE26BIT)
       temp = R15PC ;
    else
       temp = state->Reg[15] ;
 else
    temp = R15PC | ECC | ER15INT | EMODE ;


 switch (vector) {
    case ARMul_ResetV : /* RESET */
       ARMul_RaiseEvent(state,CoreEvent_Reset,temp,0);
       state->Spsr[SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(INTBITS,state->prog32Sig?SVC32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp ;
       break ;

    case ARMul_UndefinedInstrV : /* Undefined Instruction */
       ARMul_RaiseEvent(state,CoreEvent_UndefinedInstr,temp,word);
       state->Spsr[state->prog32Sig?UNDEFBANK:SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?UNDEF32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;

    case ARMul_SWIV : /* Software Interrupt */
       ARMul_RaiseEvent(state,CoreEvent_SWI,temp,word);
       state->Spsr[SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?SVC32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;

    case ARMul_PrefetchAbortV : /* Prefetch Abort */
       ARMul_RaiseEvent(state,CoreEvent_PrefetchAbort,temp,word);
       state->AbortAddr = 1 ;
       state->Spsr[state->prog32Sig?ABORTBANK:SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?ABORT32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;

    case ARMul_DataAbortV : /* Data Abort */
       ARMul_RaiseEvent(state,CoreEvent_DataAbort,temp,word);
       state->Spsr[state->prog32Sig?ABORTBANK:SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?ABORT32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       if (state->Processor & ARM_ARM8_Prop) { /* PC hasn't incremented */
         state->Reg[14] = temp - OLDINSTRUCTIONSIZE + 4;
       } else {
         state->Reg[14] = temp - OLDINSTRUCTIONSIZE ; /* the PC must have been incremented */
       }
       break ;

    case ARMul_AddrExceptnV : /* Address Exception */
       ARMul_RaiseEvent(state,CoreEvent_AddrExceptn,temp,word);
       state->Spsr[SVCBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?SVC32MODE:SVC26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;

    case ARMul_IRQV : /* IRQ */
       ARMul_RaiseEvent(state,CoreEvent_IRQ,temp,word);
       state->Spsr[IRQBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(IBIT,state->prog32Sig?IRQ32MODE:IRQ26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;

    case ARMul_FIQV : /* FIQ */
       ARMul_RaiseEvent(state,CoreEvent_FIQ,temp,word);
       state->Spsr[FIQBANK] = CPSR ;
#ifdef CODE16
       SETINSTRUCTIONSET(INSTRUCTION32);   /* always arrive in ARM state */
#endif
       SETABORT(INTBITS,state->prog32Sig?FIQ32MODE:FIQ26MODE) ;
       ARMul_CPSRAltered(state) ;
       state->Reg[14] = temp - OLDINSTRUCTIONSIZE ;
       break ;
    }

 SetPC(state,vector) ;
#ifdef CYCLEBASED
 state->NextCycle = DESTPC2 ;
#endif
}


/*
 * Function to deal with interlock checks on ARM8
 * Returns a number of interlock cycles, and tells the pu about them
 */
int ARMul_8InterlockCycles(ARMul_State *state)
{
  /* Interlock checks */
  if (state->proc.arm8.interlock.early || state->proc.arm8.interlock.late) {
    int lock_cycles=0;
    ARMword req1=state->proc.arm8.interlock.req1;
    ARMword late=state->proc.arm8.interlock.late;
    ARMword lock1,lock2;
    
    /* possibly an interlock */
    lock1=(((req1>>16) | req1) & (state->proc.arm8.interlock.early | (late>>16)) |
           (req1 & late));
    
    if (lock1 & 0xffff) {
#if 0
      if (state->silly_flag) {
        int i;
        for (i=0;i<15;i++) {
          if ((req1>>16) & state->proc.arm8.interlock.early & (1<<i))
            printf("\nr%d needed late this cycle, not available til early next  ",i);
          if (req1 & state->proc.arm8.interlock.early & (1<<i))
            printf("\nr%d needed early this cycle, not available til early next  ",i);
          if (req1 & state->proc.arm8.interlock.late & (1<<i))
            printf("\nr%d needed early this cycle, not available til late this cycle  ",i);
          if (req1 & (state->proc.arm8.interlock.late>>16) & (1<<i))
            printf("\nr%d needed early this cycle, not available til late next cycle  ",i);
        }
      }
#endif
      
      /* take the cycle in interlock terms */
      late>>=16;
      
      if (req1 & late & 0xffff) {
        lock_cycles=2;
        late=0;         /* could skip around 2nd cycle check */
      } else {
        lock_cycles=1;
      }
    }
    
    /* second cycle interlock check */
    lock2=(state->proc.arm8.interlock.req2 & (late>>16));
    if (lock2 & 0xffff) {
#if 0
      if (state->silly_flag) {
        int i,req2=state->proc.arm8.interlock.req2;
        for (i=0;i<15;i++) {
          if (req2 & (state->proc.arm8.interlock.late>>16) & (1<<i))
            printf("\nr%d needed early next cycle, not available til late next  ",i);
        }
      }
#endif
      lock_cycles++;
      late>>=16;
    }
    
    if (lock_cycles) {
      state->proc.arm8.interlock.early=0;
      state->proc.arm8.interlock.late=late;
      ARMul_RaiseEvent(state,CoreEvent_Dependancy,state->pc-8,lock1 | lock2);
    }

    /* got the required registers now, thanks */
    state->proc.arm8.interlock.req1=state->proc.arm8.interlock.req2=0;

    return lock_cycles;
  } else
    return 0;
}
