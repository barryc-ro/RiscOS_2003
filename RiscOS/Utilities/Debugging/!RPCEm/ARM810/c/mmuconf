/* mmuconf.c - Configure the MMUlator */
/* Copyright (C) Advanced RISC Machines Limited, 1996. All rights reserved. */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <stdlib.h>
#include <time.h>
#include "armdefs.h"
#include "armmmuP.h"
#include "toolconf.h"

#ifdef LRU_SUPPORT
#  define ARMul_MMUConfigMemory ARMul_LRUConfigMemory
#endif

extern unsigned int ARMul_MMUConfigMemory(ARMul_State *state,Memory *mem,
                                          toolconf config);

static int power_of_two(unsigned long n)
{
  unsigned int i;
  unsigned int j;
  for (i=0,j=1;i<32;i++,j<<=1) if (n==j) return i;
  return -1;
}

/* Specific cache/TLB option flags */
static struct {
  char *option;
  unsigned long flag;
} MMUOption[] = {
  "HASUPDATEABLE",           MMU_Updateable_Prop,
  "BUFFEREDSWAP",            MMU_BufferSWP_Prop,
  "WRITEBACKCACHE",          Cache_WriteBack_Prop,
  "CACHEBLOCKINTERLOCK",     Cache_BlockInterlock_Prop,
  "CACHEWRITEBACKINTERLOCK", Cache_WBInterlock_Prop,
  "LOCKDOWNCACHE",           Cache_LockDown_Prop,
  "LOCKDOWNTLB",             TLB_LockDown_Prop,
  "PLLCLOCK",                MMU_PLLClock_Prop,
  "INVALIDP15ACCESSESUNDEFINED", MMU_Undefined_Prop,
  "IDLECYCLES",              MMU_IdleCycles_Prop,
  "HASWRITEBUFFER",          MMU_WriteBuffer_Prop,

#ifdef LRU_SUPPORT
  "LRUREAD",                 Cache_LRURead_Prop,
  "LRUWRITE",                Cache_LRUWrite_Prop,
#endif

  NULL, 0
  };


static int SetClockSpeed(Memory *mem,toolconf config)
{
  char *option;

  option=(void *)ToolConf_Lookup(config,"FCLK");
  mem->clock.conf_fclk=option ? ToolConf_Power(option,FALSE) : 40000000;

  option=(void *)ToolConf_Lookup(config,"MCCFG"); /* name comes from StrongARM */
  if (option) {
    long mccfg=strtol(option,NULL,0)+2;
    mem->clock.conf_mclk=mem->clock.conf_fclk/mccfg;
    mem->clock.conf_fclk=mem->clock.conf_mclk*mccfg; /* rounding */
  } else {
    mem->clock.conf_mclk=0;
  }

  if (mem->prop & MMU_PLLClock_Prop) {
    char *x;

    /* read PLL control variables */
    option=(void *)ToolConf_Lookup(config,"REFCLKCFG");
    mem->clock.refclkcfg=option ? strtol(option,&x,0) : 0;
    option=(void *)ToolConf_Lookup(config,"PLLCFG");
    mem->clock.pllcfg=option ? strtol(option,&x,0) : 0;
    option=(void *)ToolConf_Lookup(config,"PLLRANGE");
    mem->clock.pllrange=ToolConf_AddFlag(option,0,1,1);

    mem->clock.control=0;
  }

  option=(void *)ToolConf_Lookup(config,"SNA");
  if (option) {
    mem->prop|=MMU_ExternalSNA_Prop;
    /* set pll control - D=1, S=sNa, F0=1, F1=0, L=0 */
    mem->clock.control=ToolConf_AddFlag(option,5,2,2);
  }
  /* if not specified, sNa is assumed to come for P15 R15 bit 1 */

  return 0;
}

static flag_word BitRange(const char *string)
{
  /* Take a string like "0,4,12" and return (1<<0) | (1<<4) | (1<<12) */
  const char *p;
  int lo,hi;
  flag_word word=0;
  
  while (string[0]) {
    lo=strtol(string,(char **)&p,0);
    if (p==string) return word;
    if (lo<0) {                 /* -<n> */
      hi=-lo;
      lo=0;
      goto range;
    }
    switch (*p) {
    default:
      return word;
    case ';':
    case ',':
      p++;
    case '\0':
      word |= (1<<lo);
      break;
    case '-':
      string=p+1;
      hi=strtol(string,(char **)&p,0);
      if (p==string)            /* <n>- */
        hi=(1<<FLAG_WORD_BITS)-1;
    range:
      word |= mmuBITS(~0,lo,hi+1);
      break;
    }
    string=p;
  }
  return word;
}

unsigned int ARMul_MMUConfigMemory(ARMul_State *state,Memory *mem,
                                   toolconf config)
{
  /* Configure a "Memory" block */
  void *ptr[5];                 /* ptrs returned from malloc */
  unsigned int nptr=1;
  int log_cache_blocks,log_cache_words,log_cache_size;
  unsigned int i;
  char *x;
  char *option;
  int verbose=0;

  option=(void *)ToolConf_Lookup(config,"VERBOSE");
  if (option) verbose=ToolConf_AddFlag(option,0,1,TRUE);

  mem->verbose_flag=verbose;

  mem->prop=0;

  /* general properties */

  for (i=0;MMUOption[i].option!=NULL;i++) {
    char *option=(char *)ToolConf_Lookup(config,MMUOption[i].option);
    if (option)
      mem->prop=ToolConf_AddFlag(option,mem->prop,MMUOption[i].flag,TRUE);
  }


  /* cache properties */

  option=(void *)ToolConf_Lookup(config,"CACHEBLOCKS");
  if ((log_cache_blocks=option ? power_of_two(strtol(option,&x,0)) : 4)==-1) {
    ARMul_ConsolePrint(state,"MMU: Cache blocks must be a power of 2.\n");
    goto abort;
  }

  option=(void *)ToolConf_Lookup(config,"CACHEWORDS");
  if ((log_cache_words=option ? power_of_two(strtol(option,&x,0)) : 6)==-1) {
    ARMul_ConsolePrint(state,"MMU: Cache line-length must be a power of 2.\n");
    goto abort;
  }

  option=(void *)ToolConf_Lookup(config,"CACHEASSOCIATIVITY");
  mem->cache.size=option ? strtol(option,&x,0) : 64; /* lines in a block */
  log_cache_size=power_of_two(mem->cache.size);

  /* look for an absolute cache size */
  option=(void *)ToolConf_Lookup(config,"CACHESIZE");
  if (option) {
    int cache_size=ToolConf_Power(option,TRUE);
    /* splat cacheblocks */
    int i;
    unsigned long j;
    long n=cache_size/(mem->cache.size * (3<<log_cache_words));

    for (i=31,j=1<<31;i>=0;i--,j>>=1)
      if (n & j) {
        log_cache_blocks=i;
        break;
      }
  }

  /* cache - set parameters and allocate entries */
  mem->cache.log_blocks=log_cache_blocks; /* blocks in the cache */
  mem->cache.log_words=log_cache_words; /* words per line */
  mem->cache.log_size=log_cache_size; /* assoc or -1 if not */

  /* cache replacement things */
  option=(void *)ToolConf_Lookup(config,"REPLACETICKS");
  mem->cache.replace_ticks=option ? strtol(option,&x,0) : 1;

  option=(void *)ToolConf_Lookup(config,"CACHEWRITE");
  if (option) {
    if (ToolConf_Cmp(option,"WriteBack")) {
      mem->prop|=Cache_WriteBack_Prop;
    } else if (!ToolConf_Cmp(option,"WriteThrough")) { 
      ARMul_ConsolePrint(state,"MMU: Unrecognised cache-write strategy - '%s'\
 (assuming write-through).\n",
                       option);
    }
  }

  option=(void *)ToolConf_Lookup(config,"CACHETYPE");
  if (option) {
    if (ToolConf_Cmp(option,"ARM8")) {
      mem->prop|=Cache_BlockInterlock_Prop;
    } else if (!ToolConf_Cmp(option,"ARM6")) { 
      ARMul_ConsolePrint(state,"MMU: Unrecognised cache type - '%s'\
 (assuming ARM6).\n",
                       option);
      mem->prop|=Cache_WBInterlock_Prop;
    }
  }

  /* check: */
  if (mem->cache.log_words>FLAG_WORD_BITS) {    /* @@@ 32bit-ness */
    ARMul_ConsolePrint(state,"\
MMU: MMUlator cannot handle >32 words per line.\n");
    goto abort;
  }

  if ((mem->prop & Cache_WriteBack_Prop) && log_cache_size==-1) {
    ARMul_ConsolePrint(state,"\
MMU: Cache configured WriteBack, but not n-way associative with 'n' a power\n\
  of 2. IDC Clean operations will be UNDEFINED.\n");
  }

  /* derived: */
  mem->cache.blocks=1<<mem->cache.log_blocks;
  mem->cache.words=1<<mem->cache.log_words;
  if (mem->cache.words==1<<FLAG_WORD_BITS)      /* @@@ 32bit-ness */
    mem->cache.word_mask=~0;
  else
    mem->cache.word_mask=(1<<mem->cache.words)-1;

  /* allocate: */
  if ((mem->cache.block=(CacheBlock *)
       (ptr[nptr++]=calloc(mem->cache.blocks,sizeof(CacheBlock))))==NULL ||
      (mem->cache.dirty=(ARMword *)
       (ptr[nptr++]=malloc(mem->cache.words*sizeof(ARMword))))==NULL)
    goto abort;

  for (i=0;i<mem->cache.blocks;i++) {
    if ((mem->cache.block[i].line=(CacheLine *)calloc(mem->cache.size,sizeof(CacheLine)))
        == NULL)
      break;
    mem->cache.block[i].counter=0;
  }

  if (i!=mem->cache.blocks) {   /* failed an allocation */
    /* the ith block didn't allocate - free the rest*/
    while (--i) free(mem->cache.block[i].line);
    goto abort;
  }

  if (mem->prop & Cache_LockDown_Prop) {
    option=(void *)ToolConf_Lookup(config,"LOCKDOWNCACHEFLUSHBASE");
    if (option) {
      if (option[0]=='\0')      /* no value specified - use lockdown value */
        mem->prop|=Cache_LockDownFlush_Prop;
      else
        mem->cache.lock_down.flush=strtol(option,NULL,0);
    }
    option=(void *)ToolConf_Lookup(config,"LOCKDOWNCACHEVALID");
    mem->cache.lock_down.valid=(option ? ~0 : BitRange(option));
  }

  option=(void *)ToolConf_Lookup(config,"REPLACEMENT");
  if (option) {
    if (ToolConf_Cmp(option,"Random") ||
        ToolConf_Cmp(option,"PseudoRandom") ||
        ToolConf_Cmp(option,"RNG")) {
      int rng;
      option=(void *)ToolConf_Lookup(config,"RNG");
      rng=option ? strtol(option,&x,0) : 0;
      switch (rng) {
      case 6:
        if (mem->cache.size>64) {
          ARMul_ConsolePrint(state,"\
MMU: Warning: ARM6-style RNG is only good for upto 64-way set-associative caches.\n");
        }
        mem->cache.replace=CacheReplace_ARM6RNG;
        mem->cache.seed[0]=~0;
        mem->cache.seed[1]=1<<7;
        break;
      case 7:
        if (mem->cache.size>4) {
          ARMul_ConsolePrint(state,"\
MMU: Warning: ARM7-style RNG is only good for upto 4-way set-associative caches.\n");
        }
        mem->cache.replace=CacheReplace_ARM7RNG;
        mem->cache.seed[0]=0x1ffff;
        break;
      case 8:
        if (mem->cache.size>64) {
          ARMul_ConsolePrint(state,"\
MMU: Warning: ARM8-style RNG is only good for upto 64-way set-associative caches.\n");
        }
        mem->cache.replace=CacheReplace_ARM8RNG;
        mem->cache.seed[0]=0x1ffff;
        mem->cache.seed[1]=0;
        mem->cache.seed[2]=0;   /* cycle counter */
        break;
      default:
        /* defaults to a Unix RNG */
        mem->cache.replace=CacheReplace_RNG;
        srand(time(NULL));
        (void)rand();           /* throw away 1st value */
        break;
      }
#ifdef LRU_SUPPORT
    } else if (ToolConf_Cmp(option,"LRU") ||
               ToolConf_Cmp(option,"LeastRecentlyUsed")) {
      
      if ((FLAG_WORD_BITS==5 && mem->cache.size>6) ||
          (FLAG_WORD_BITS==6 && mem->cache.size>8)) {
          ARMul_ConsolePrint(state,"\
MMU: Error: LRU is only good for upto %d-way set-associative caches.\n\
   Defaulting to Unix style RNG instead.\n",
                            (FLAG_WORD_BITS==5) ? 6 : 8);
          mem->cache.replace=CacheReplace_RNG;
          srand(time(NULL));
          (void)rand();           /* throw away 1st value */
        } else {
          unsigned int i;
          unsigned int mask_size,set_mask,clr_mask;
          mem->cache.replace=CacheReplace_LRU;
          /* allocate the arrays of bits and things to use */
          mem->cache.lru_set=(flag_word *)malloc(mem->cache.size*
                                                 sizeof(flag_word));
          mem->cache.lru_clear=(flag_word *)malloc(mem->cache.size*
                                                   sizeof(flag_word));
          /* @@@ check for failed mallocs */

          mask_size=mem->cache.size-1;
          set_mask=(1<<mask_size)-1;

          for (i=0;i<mem->cache.size;i++) {
            unsigned int j;
            flag_word clr_bit;
            mem->cache.lru_set[i]=set_mask;
            clr_mask=0;
            if (i) {
              clr_bit=1<<(i-1);
              for (j=0;j<i;j++) {
                clr_mask|=clr_bit;
                clr_bit<<=mask_size;
              }
              clr_bit<<=mask_size+1;
            } else {
              clr_bit=1<<mask_size;
            }
            for (j=i+1;j<mem->cache.size;j++) {
              clr_mask|=clr_bit;
              clr_bit<<=mask_size;
            }
            mem->cache.lru_clear[i]=~clr_mask;
            for (j=0;j<mem->cache.blocks;j++) {
              mem->cache.block[j].line[i].block=&mem->cache.block[j];
              mem->cache.block[j].line[i].entry=i;
              mem->cache.block[j].line[i].set=set_mask;
              mem->cache.block[j].line[i].clear=~clr_mask;
            }
            set_mask<<=mask_size;
          }
        }
#endif
    } else if (ToolConf_Cmp(option,"RoundRobin")) {
      mem->cache.replace=CacheReplace_RoundRobin;
    } else if (ToolConf_Cmp(option,"GlobalRoundRobin")) {
      mem->cache.replace=CacheReplace_GblRndRobin;
      mem->cache.seed[0]=0;
    } else {
      ARMul_ConsolePrint(state,"\
MMU: Unrecognised cache-replacement strategy - '%s'\
 (assuming pseudo-random).\n",
                       option);
    }
  } 

  /* report: */
  ARMul_PrettyPrint(state,", %dkB %s cache",
                     mem->cache.words*mem->cache.blocks*mem->cache.size/256,
                     (mem->prop & Cache_WriteBack_Prop) ? "write-back"
                                                        : "write-through");

  if (verbose) {
    
    ARMul_PrettyPrint(state," [%d/%d/%d]",
                      mem->cache.words,mem->cache.blocks,mem->cache.size);
    if (mem->prop & Cache_LockDown_Prop)
      ARMul_PrettyPrint(state," lock-down");
    switch (mem->cache.replace) {
    case CacheReplace_RNG:
    case CacheReplace_ARM6RNG:
    case CacheReplace_ARM7RNG:
    case CacheReplace_ARM8RNG:
      ARMul_PrettyPrint(state," random replacement");
      break;
    case CacheReplace_LRU:
      ARMul_PrettyPrint(state," least-recently-used replacement");
      break;
    case CacheReplace_RoundRobin:
    case CacheReplace_GblRndRobin:
      ARMul_PrettyPrint(state," FIFO replacement");
      break;
    }
  }



  /* TLB */
  option=(void *)ToolConf_Lookup(config,"TLBSIZE");
  mem->tlb.size=option ? strtol(option,&x,0) : 32;

  /* allocate: */
  if ((mem->tlb.buffer=(TLBEntry *)
       (ptr[nptr++]=calloc(mem->tlb.size,sizeof(TLBEntry))))==NULL)
    goto abort;

  /* report: */
  ARMul_PrettyPrint(state,", TLB");

  if (verbose) {
    ARMul_PrettyPrint(state," [%d entries]",mem->tlb.size);
    if (mem->prop & TLB_LockDown_Prop)
      ARMul_PrettyPrint(state," lock-down");
  }

  if (mem->prop & TLB_LockDown_Prop) {
    option=(void *)ToolConf_Lookup(config,"LOCKDOWNTLBFLUSHBASE");
    if (option) {
      if (option[0]=='\0')      /* no value specified - use lockdown value */
        mem->prop|=TLB_LockDownFlush_Prop;
      else
        mem->tlb.lock_down.flush=strtol(option,NULL,0);
    }
    option=(void *)ToolConf_Lookup(config,"LOCKDOWNTLBVALID");
    mem->tlb.lock_down.valid=(option ? ~0 : BitRange(option));
  }


  /* Write buffer */
  if (mem->prop & MMU_WriteBuffer_Prop) {
    option=(void *)ToolConf_Lookup(config,"WRITEBUFFERWORDS");
    mem->wb.max_words=option ? strtol(option,&x,0) : 8;
    option=(void *)ToolConf_Lookup(config,"WRITEBUFFERADDRS");
    mem->wb.max_addrs=option ? strtol(option,&x,0) : 2;

    /* report: */
    ARMul_PrettyPrint(state,", Write-buffer");
    
    if (verbose) {
      ARMul_PrettyPrint(state," [%d addresses, %d data]",
                        mem->wb.max_addrs,mem->wb.max_words);
    }
  } else {
    mem->wb.max_addrs=mem->wb.max_words=0;
  }

  /* check: */
  if (mem->wb.max_words>(1<<FLAG_WORD_BITS)) { /* @@@ 32bitness */
    ARMul_ConsolePrint(state,"\
MMU: MMUlator cannot handle >32 words in the write buffer.\n");
    goto abort;
  } else if (mem->wb.max_words<mem->wb.max_addrs) {
    ARMul_ConsolePrint(state,"\
MMU: More addresses than words configured in write buffer.\n");
    goto abort;
  }
  
  /* allocate: */
  if ((mem->wb.time=(unsigned long *)
       (ptr[nptr++]=calloc(mem->wb.max_words,sizeof(unsigned long))))==NULL)
    goto abort;


  /* Properties */
  mem->mmu.control_lo=mem->mmu.control_hi=0;
  if (!ToolConf_Lookup(config,"HASRFLAG"))
    mem->mmu.control_lo|=MMU_R;
  if (!(mem->prop & MMU_WriteBuffer_Prop))
    mem->mmu.control_lo|=MMU_W;
  if (!(ARMul_Properties(state) & ARM_Abort7_Prop))
    mem->mmu.control_hi|=MMU_L;
  if (!ToolConf_Lookup(config,"HAS26BITCONFIG"))
    mem->mmu.control_hi|=MMU_P | MMU_D;
  if (!ToolConf_Lookup(config,"HASBRANCHPREDICTION"))
    mem->mmu.control_lo|=MMU_Z;

  mem->mmu.control_lo|=MMU_F | MMU_I;


{
  int arch,chip,revision;
  
  option=(void *)ToolConf_Lookup(config,"ARCHITECTURE");
  arch=option ? strtol(option,&x,0) : 3;
  option=(void *)ToolConf_Lookup(config,"CHIPNUMBER");
  chip=option ? strtol(option,&x,0) : 3;
  option=(void *)ToolConf_Lookup(config,"REVISION");
  revision=option ? strtol(option,&x,0) : 3;
  mem->mmu.chip_id=0x41000000 | ((arch-3)<<16) | (chip<<4) | revision;
  mem->mmu.arch=arch;

  if (verbose) {
    ARMul_PrettyPrint(state,", Architecture %d, Chip-ID 0x%08x",
                      mem->mmu.arch,mem->mmu.chip_id);
  }
}
  
  /* derived: */
#ifdef LRU_SUPPORT
  if (mem->cache.replace!=CacheReplace_LRU) {
    /* clear the config bits */
    mem->prop&=~(Cache_LRURead_Prop | Cache_LRUWrite_Prop);
  }
#endif

  if (SetClockSpeed(mem,config)) goto abort;

  return 0;                     /* okay */

 abort:
  while (--nptr) free(ptr[nptr]);
  return 1;                     /* an alloc failed */
}
