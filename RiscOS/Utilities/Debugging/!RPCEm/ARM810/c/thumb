/***************************************************************************\
* thumb.c                                                                  *
* Thumb instruction decoding.                                              *
* Look out for !! marking things requiring attention of some kind.         *
*                                                                          *
* General things to beware of:                                             *
* Always call CPSRAltered after a cpsr write.                              *
* Always read/write r15 through the appropriate routine/macro.             *
*                                                                          *
\***************************************************************************/

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/*&&&HACK&&&*/
#define CODE16

#include "armdefsp.h"
#include "armemu.h"

/* ----------------------------------------------------------------------- */

#define BIT_IS_SET(n) (instr & (1 << n))

#define OPCODE ((instr & 0xf800) >> 11)


#define SHF5_DEST  ((instr & 0x0007) << 12)
#define SHF5_LHS   ((instr & 0x0038) >> 3)
#define SHF5_SHIFT ((instr & 0x07c0) << 1)


#define ADDSUB3_OPCODE ((instr & 0x0600) >> 9)

#define ADDSUB3_LHS (((instr & 0x0007) << 12) | ((instr & 0x0038) << 13))
#define ADDSUB3_RHS ((instr & 0x01c0) >> 6)


#define MOV8_LHS ((instr & 0x0700) << 4)
#define MOV8_IMM  (instr & 0x00ff)
#define CMP8_LHS ((instr & 0x0700) << 8)
#define CMP8_IMM  (instr & 0x00ff)
#define ADD8_LHS (((instr & 0x0700) << 4) | ((instr & 0x0700) << 8))
#define ADD8_IMM  (instr & 0x00ff)
#define SUB8_LHS (((instr & 0x0700) << 4) | ((instr & 0x0700) << 8))
#define SUB8_IMM  (instr & 0x00ff)


#define DP_OPCODE ((instr & 0x07c0) >> 6)

#define DP_REG1 (((instr & 0x0007) << 16) | ((instr & 0x0007) << 12))
#define DP_REG2 ((instr & 0x0038) >> 3)

#define DP_NEG1 ((instr & 0x0007) << 12)
#define DP_NEG2 ((instr & 0x0038) << 13)

#define DP_SHIFT1 (((instr & 0x0007) << 12) | (instr & 0x0007))
#define DP_SHIFT2 ((instr & 0x0038) << 5)

#define MUL_LHS (((instr & 0x0007) << 16) | ((instr & 0x0007) << 8))
#define MUL_RHS ((instr & 0x0038) >> 3)

#define BX_DEST ((instr & 0x0078) >> 3)


#define LDRPC_DEST   ((instr & 0x0700) << 4)
#define LDRPC_OFFSET ((instr & 0x00ff) << 2)


#define LS_OPCODE ((instr & 0x0e00) >> 9)

#define LS_RO_REG    ((instr & 0x0007) << 12)
#define LS_RO_BASE   ((instr & 0x0038) << 13)
#define LS_RO_OFFSET ((instr & 0x01c0) >> 6)

#define LS_RB_REG    ((instr & 0x0007) << 12)
#define LS_RB_BASE   ((instr & 0x0038) << 13)
#define LSW_RB_OFFSET ((instr & 0x07c0) >> 4)
#define LSB_RB_OFFSET ((instr & 0x07c0) >> 6)

#define LSH_IMM_DEST   ((instr & 0x0007) << 12)
#define LSH_IMM_BASE   ((instr & 0x0038) << 13)
#define LSH_IMM_OFFSET (((instr & 0x0600) >> 1) | ((instr & 0x01c0) >> 5))


#define LSW_SP_REG       ((instr & 0x0700) << 4)
#define LSW_SP_OFFSET    ((instr & 0x00ff) << 2)


#define ADDSP_RD_DEST   ((instr & 0x0700) << 4)
#define ADDSP_RD_OFFSET  (instr & 0x00ff)

#define ADDSP_OFFSET  (instr & 0x007f)


#define PP_REGISTERS (instr &0x00ff)
#define PP_BASE      ((instr & 0x0700) << 8)


#define BCC_OPCODE ((instr & 0x0f00) >> 8)
#define SWI_NUMBER (instr & 0x00ff)


/* ----------------------------------------------------------------------- */

#ifdef CYCLEBASED
#define C16SINGLECYCLEINSTR \
  SCYCLE ; \
  state->addrBus = PCWRAP(state->Reg[15] - PCR15DIFFERENCE16 + INSTRUCTION16SIZE * 3) | state->addr01Bus ;
#else
#define C16SINGLECYCLEINSTR
#endif

/* Opcode dismantling */

#define C16BRANCH8  (((instr & 0x00ff) << 1) | (BIT_IS_SET(7)  ? 0xfffffe00 : 0))
#define C16BRANCH11 (((instr & 0x07ff) << 1) | (BIT_IS_SET(10) ? 0xfffff000 : 0))

#define C16WORD8 ((instr & 0x00ff) << 2)

#define C16BLOFFSETHI (((instr & 0x07ff) << 12) | (BIT_IS_SET(10) ? 0xff800000 : 0))
#define C16BLOFFSETLO ((instr & 0x07ff) << 1)

/* Register writes */

#define C16WritedestA(d) state->Reg[(instr & 0x0700) >> 8] = d


/* ----------------------------------------------------------------------- */
static ARMword func00000(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe1b00000 | SHF5_DEST | SHF5_LHS | SHF5_SHIFT);   /* movs rd, rs lsl offset5 */
}

static ARMword func00001(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe1b00020 | SHF5_DEST | SHF5_LHS | SHF5_SHIFT);   /* movs rd, rs lsr offset5 */
}

static ARMword func00010(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe1b00040 | SHF5_DEST | SHF5_LHS | SHF5_SHIFT);   /* movs rd, rs asr offset5 */
}

static ARMword func00011(ARMul_State *state, ARMword instr)
{
  static unsigned op[] = {
    0xe0900000,  /* ADD rd, rs, rs2 */
    0xe0500000,  /* SUB rd, rs, rs2 */
    0xe2900000,  /* ADD rd, rs, #imm3 */
    0xe2500000   /* SUB rd, rs, #imm3 */
    };

  IGNORE(state);
  return (op[ADDSUB3_OPCODE] | ADDSUB3_LHS | ADDSUB3_RHS);
}

static ARMword func00100(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe3b00000 | MOV8_LHS | MOV8_IMM);     /* MOV rd, #offset8 */
}

static ARMword func00101(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe3500000 | CMP8_LHS | CMP8_IMM);     /* CMP rd, #offset8 */
}

static ARMword func00110(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe2900000 | ADD8_LHS | ADD8_IMM);     /* ADD rd, #offset8 */
}

static ARMword func00111(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe2500000 | SUB8_LHS | SUB8_IMM);     /* SUB rd, #offset8 */
}

static ARMword func01000(ARMul_State *state, ARMword instr)
{                         /* dp instruction */
  switch (DP_OPCODE) {
  case 0x00: return (0xe0100000 | 0x00000000 | DP_REG1 | DP_REG2);     /* AND Rd, Rs */
  case 0x01: return (0xe0100000 | 0x00200000 | DP_REG1 | DP_REG2);     /* EOR Rd, Rs */
  case 0x02: return (0xe0100010 | 0x01a00000 | DP_SHIFT1 | DP_SHIFT2); /* LSL Rd, Rs */
  case 0x03: return (0xe0100030 | 0x01a00000 | DP_SHIFT1 | DP_SHIFT2); /* LSR Rd, Rs */
  case 0x04: return (0xe0100050 | 0x01a00000 | DP_SHIFT1 | DP_SHIFT2); /* ASR Rd, Rs */
  case 0x05: return (0xe0100000 | 0x00a00000 | DP_REG1 | DP_REG2);     /* ADC Rd, Rs */
  case 0x06: return (0xe0100000 | 0x00c00000 | DP_REG1 | DP_REG2);     /* SBC Rd, Rs */
  case 0x07: return (0xe0100070 | 0x01a00000 | DP_SHIFT1 | DP_SHIFT2); /* ROR Rd, Rs */
  case 0x08: return (0xe0100000 | 0x01000000 | DP_REG1 | DP_REG2);     /* TST Rd, Rs */
  case 0x09: return (0xe2100000 | 0x00600000 | DP_NEG1 | DP_NEG2);     /* NEG Rd, Rs */
  case 0x0a: return (0xe0100000 | 0x01400000 | DP_REG1 | DP_REG2);     /* CMP Rd, Rs */
  case 0x0b: return (0xe0100000 | 0x01600000 | DP_REG1 | DP_REG2);     /* CMN Rd, Rs */
  case 0x0c: return (0xe0100000 | 0x01800000 | DP_REG1 | DP_REG2);     /* ORR Rd, Rs */
  case 0x0d: return (0xe0100090 | MUL_LHS | MUL_RHS);                  /* MUL Rd, Rs */
  case 0x0e: return (0xe0100000 | 0x01c00000 | DP_REG1 | DP_REG2);     /* BIC Rd, Rs */
  case 0x0f: return (0xe0100000 | 0x01e00000 | DP_REG1 | DP_REG2);     /* MVN Rd, Rs */
  case 0x10: ARMul_UnpredictableInstr(state,instr); return (ARMword)-1;
  case 0x11: return (0xe0000008 | 0x00800000 | DP_REG1 | DP_REG2);     /* ADD Rd, Hs */
  case 0x12: return (0xe0088000 | 0x00800000 | DP_REG1 | DP_REG2);     /* ADD Hd, Rs */
  case 0x13: return (0xe0088008 | 0x00800000 | DP_REG1 | DP_REG2);     /* ADD Hd, Hs */
  case 0x14: ARMul_UnpredictableInstr(state,instr); return (ARMword)-1;
  case 0x15: return (0xe0100008 | 0x01400000 | DP_REG1 | DP_REG2);     /* CMP Rd, Hs */
  case 0x16: return (0xe0188000 | 0x01400000 | DP_REG1 | DP_REG2);     /* CMP Hd, Rs */
  case 0x17: return (0xe0188008 | 0x01400000 | DP_REG1 | DP_REG2);     /* CMP Hd, Hs */
  case 0x18: ARMul_UnpredictableInstr(state,instr); return (ARMword)-1;
  case 0x19: return (0xe0000008 | 0x01a00000 | DP_REG1 | DP_REG2);     /* MOV Rd, Hs */
  case 0x1a: return (0xe0088000 | 0x01a00000 | DP_REG1 | DP_REG2);     /* MOV Hd, Rs */
  case 0x1b: return (0xe0088008 | 0x01a00000 | DP_REG1 | DP_REG2);     /* MOV Hd, Hs */
  case 0x1c:                                                           /* BX rs/hs */
  case 0x1d: return (0xe12fff10 | BX_DEST);
  case 0x1e:
  case 0x1f:
  default: ARMul_UnpredictableInstr(state,instr); return (ARMword)-1;
  }
}

static ARMword func01001(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe59f0000 | LDRPC_DEST | LDRPC_OFFSET); /* LDR rd, [pc,#word8] note masked pc */
}

static ARMword func0101x(ARMul_State *state, ARMword instr)
{
  static unsigned op[] = {
    0xe7800000, /* STR  rs, [rb, ro] */
    0xe18000b0, /* STRH rs, [rb, ro] */
    0xe7c00000, /* STRB rs, [rb, ro] */
    0xe19000d0, /* LDSB rd, [rb, ro] */
    0xe7900000, /* LDR  rs, [rb, ro] */
    0xe19000b0, /* LDRH rd, [rb, ro] */
    0xe7d00000, /* LDRB rs, [rb, ro] */
    0xe19000f0  /* LDSH rd, [rb, ro] */
    };

  IGNORE(state);
  return (op[LS_OPCODE] | LS_RO_REG | LS_RO_BASE | LS_RO_OFFSET);
}

static ARMword func01100(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe5800000 | LS_RB_BASE | LS_RB_REG | LSW_RB_OFFSET);   /* STR rd, [rb,#word5] */
}

static ARMword func01101(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe5900000 | LS_RB_BASE | LS_RB_REG | LSW_RB_OFFSET);  /* LDR rd, [rb,#word5] */
}

static ARMword func01110(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe5c00000 | LS_RB_BASE | LS_RB_REG | LSB_RB_OFFSET);  /* STRB rd, [rb,#offset5] */
}

static ARMword func01111(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe5d00000 | LS_RB_BASE | LS_RB_REG | LSB_RB_OFFSET);  /* LDRB rd, [rb,#offset5] */
}

static ARMword func10000(ARMul_State *state, ARMword instr)
{                /* STRH rs, [rb, #imm5] */
  IGNORE(state);
  return (0xe1c000b0 | LSH_IMM_DEST | LSH_IMM_BASE | LSH_IMM_OFFSET);
}

static ARMword func10001(ARMul_State *state, ARMword instr)
{                /* LDRH rd, [rb, #imm5] */
  IGNORE(state);
  return (0xe1d000b0 | LSH_IMM_DEST | LSH_IMM_BASE | LSH_IMM_OFFSET);
}

static ARMword func10010(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe58d0000 | LSW_SP_REG | LSW_SP_OFFSET);     /* STR rd, [sp,#word8] */
}

static ARMword func10011(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe59d0000 | LSW_SP_REG | LSW_SP_OFFSET);    /* LDR rd, [sp,#word8] */
}

static ARMword func10100(ARMul_State *state, ARMword instr)
{
  /* ADD rd, pc, #word8 */
  C16SINGLECYCLEINSTR;
  C16WritedestA((state->Reg[15] & PCBITS) + C16WORD8); /* !! note mask of pc !! */
  return (ARMword)-1;
}

static ARMword func10101(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe28d0f00 | ADDSP_RD_DEST | ADDSP_RD_OFFSET);  /* ADD rd, sp, #word8 */
}

static ARMword func10110(ARMul_State *state, ARMword instr)
{
  switch ((instr & 0x0780) >> 7) {
  case 0x0:                                       /* ADD SP, mword8<<2 ... */
    return (0xe28ddf00 | ADDSP_OFFSET);           /* ADD sp, #word7 */
  case 0x1:                                       /* ADD SP, mword8<<2 ... */
    return (0xe24ddf00 | ADDSP_OFFSET);           /* SUB sp, #word7 */
  case 0x8:
  case 0x9:
    return (0xe92d0000 | PP_REGISTERS);           /* push */
  case 0xa:
  case 0xb:
    return (0xe92d4000 | PP_REGISTERS);           /* push with r14 */
  default:
    ARMul_UndefInstr(state,instr) ;
    return (ARMword)-1;
  }
}

static ARMword func10111(ARMul_State *state, ARMword instr)
{
  switch ((instr & 0x0700) >> 8) {
  case 4:
    return (0xe8bd0000 | PP_REGISTERS);         /* pop */
  case 5:
    return (0xe8bd8000 | PP_REGISTERS);         /* pop with r15 */
  default:
    ARMul_UndefInstr(state,instr) ;
    return (ARMword)-1;
  }
}

static ARMword func11000(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe8a00000 | PP_BASE | PP_REGISTERS);      /* STMIA rb!, rlist */
}

static ARMword func11001(ARMul_State *state, ARMword instr)
{
  IGNORE(state);
  return (0xe8b00000 | PP_BASE | PP_REGISTERS);      /* LDMIA rb!, rlist */
}


static const unsigned short psr_table[] = {
  /*
   * Each entry is for a particular PSR flags setting - BIT(n) of each entry
   * is set if that condition code (EQ ... NV) succeeds for that PSR setting.
   * AL fails on Thumb
   */
  0x16aa,0x2a6a,0x15a6,0x2966,
  0x26a9,0x2a69,0x26a5,0x2a65,
  0x2a9a,0x165a,0x2996,0x1556,
  0x2a99,0x2659,0x2a95,0x2655
};

static ARMword func1101x(ARMul_State *state, ARMword instr)
{
  /* Bcc offset8<<1 (mostly) */
  ARMword cc=BCC_OPCODE;        /* condition code flags */

  if ((psr_table[state->Flags] >> cc) & 1) {
    /* condition code passes */
    state->Reg[15] += C16BRANCH8;
    FLUSHPIPE ;
#ifdef CYCLEBASED
    state->NextCycle = DESTPC2 ;
    state->addr01Bus = 0 ;
#endif
  } else if (cc<AL) {
    /* CC simply failed */
    C16SINGLECYCLEINSTR;
  } else if (cc==NV) {
    return (0xef000000 | SWI_NUMBER);                       /* SWI n */
  } else {
    ARMul_UndefInstr(state,instr);
  }

  return (ARMword)-1; /* reserved */
}

static ARMword func11100(ARMul_State *state, ARMword instr)
{
  state->Reg[15] += C16BRANCH11;
  FLUSHPIPE ;
#ifdef CYCLEBASED
  state->NextCycle = DESTPC2 ;
  state->addr01Bus = 0 ;
#endif
  return (ARMword)-1;
}

static ARMword func11101(ARMul_State *state, ARMword instr)
{
  ARMul_UndefInstr(state,instr);
  return (ARMword)-1;
}

static ARMword func11110(ARMul_State *state, ARMword instr)
{
  C16SINGLECYCLEINSTR;              /* BL high */
  state->Reg[14] = state->Reg[15] + C16BLOFFSETHI;
  return (ARMword)-1;
}

static ARMword func11111(ARMul_State *state, ARMword instr)
{
  ARMword dest;
  C16SINGLECYCLEINSTR;              /* BL low */
  dest = state->Reg[14] + C16BLOFFSETLO;
  state->Reg[14] = state->Reg[15] - PCR15DIFFERENCE16 + INSTRUCTION16SIZE + 1; /* 1 shows thumb bl */
  state->Reg[15] = dest;
  FLUSHPIPE ;
#ifdef CYCLEBASED
  state->NextCycle = DESTPC2 ;
  state->addr01Bus = 0 ;
#endif
  return (ARMword)-1;
}

/***************************************************************************\
*              Main thumb decode                                           *
\***************************************************************************/

ARMword ARMul_ProcessThumbInstr(ARMul_State *state, ARMword instr)
{
#ifndef __hpux
  typedef ARMword DecodeFn(ARMul_State *,ARMword);
  static DecodeFn *decode[] = {
    func00000, func00001, func00010, func00011,
    func00100, func00101, func00110, func00111,
    func01000, func01001, func0101x, func0101x,
    func01100, func01101, func01110, func01111,
    func10000, func10001, func10010, func10011,
    func10100, func10101, func10110, func10111,
    func11000, func11001, func1101x, func1101x,
    func11100, func11101, func11110, func11111
};

/* printf("+++ %x %x\n", state->Reg[15]-8, instr);   */

   return decode[OPCODE](state, instr);
#else
   switch (OPCODE) {
     case 0:
       return func00000(state, instr);
     case 1:
       return func00001(state, instr);
     case 2:
       return func00010(state, instr);
     case 3:
       return func00011(state, instr);
     case 4:
       return func00100(state, instr);
     case 5:
       return func00101(state, instr);
     case 6:
       return func00110(state, instr);
     case 7:
       return func00111(state, instr);
     case 8:
       return func01000(state, instr);
     case 9:
       return func01001(state, instr);
     case 10:
     case 11:
       return func0101x(state, instr);
     case 12:
       return func01100(state, instr);
     case 13:
       return func01101(state, instr);
     case 14:
       return func01110(state, instr);
     case 15:
       return func01111(state, instr);
     case 16:
       return func10000(state, instr);
     case 17:
       return func10001(state, instr);
     case 18:
       return func10010(state, instr);
     case 19:
       return func10011(state, instr);
     case 20:
       return func10100(state, instr);
     case 21:
       return func10101(state, instr);
     case 22:
       return func10110(state, instr);
     case 23:
       return func10111(state, instr);
     case 24:
       return func11000(state, instr);
     case 25:
       return func11001(state, instr);
     case 26:
     case 27:
       return func1101x(state, instr);
     case 28:
       return func11100(state, instr);
     case 29:
       return func11101(state, instr);
     case 30:
       return func11110(state, instr);
     case 31:
       return func11111(state, instr);
     default:
       break;
   }
   return (ARMword)-1;
#endif
}

