########################################################################
#                                                                      #
# !RPCEm is copyright Acorn Computers Limited (ACL). It must not be    #
# distributed any further in whole or in part. This software should be #
# considered as beta quality and as such no warranty is made or        #
# implied as to its function or suitability. ACL can not be held       #
# responsible for any damage or inconvenience caused as a result of    #
# using this software. Armulator is copyright Advanced Risc Machines.  #
#                                                                      #
########################################################################

                !RPCEm, Risc PC Emulator
                
                0.04    5-Oct-1995
                
!RPCEm is an emulator for The Acorn Risc PC computer. This release
is based around ARM's armulator (part of the Toolkit), but it is
possible to build !RPCEm around any ARM cpu core. This release
requires RISC OS 3 (version 3.50 or later) and at least 10Mbytes
free memory to run effectively.

!RPCEm also requires the RISC OS toolbox made available by Acorn C/C++
or as standard on 3.60 and above.

GUI
---

At startup, !RPCEm places an icon on the icon bar. Adjust clicking
on this opens a config window (also accessible from the icon bar menu)
which allows a number of emulator settings to be viewed or modified:-

        Reset/POR       reset the emulation (pulls the reset pin low)
        Break           simulates the break key
        Multitasking    determines how often the emulator polls
        Video updates   controls how often the 'screen' is updated and
                        how often flyback irqs happen
        Tick rate       controls the frequency of the timer ticks (For
                        tick rate N, if N >0 then for every N cycles
                        in the core, there is one timer tick. For N <= 0
                        then are 2-N ticks for every core cycle). It is
                        possible to type normally at the keyboard if ticks
                        = -10. This is because RISC OS expects a key to
                        be held down for a while before it will register.
                        
Select clicking on the icon opens the 'screen' display. This window shows
what would appear on a monitor connected to the Risc PC. It also shows
the keyboard LEDs on the left and has a status line showing the core
cycle rate. Note that for an instruction based core, the cycle rate is
instructions (rather tahn clock cycles) per second.

Clicking in this window gives the emulator keyboard focus and 'connects'
the keyboard to the emulation.

Other info windows available from the iconbar menu are:-
        Memory - allowing individual bytes/words to be examined
        IO status - shows IRQ/ timer state
        
Although moving the desktop mouse moves the mouse in the emulation, the
mouse buttons are not connected to the emulation. This is because the
mouse rate may be different between the two worlds. As a result, the
keypad buttons 7,8,9 simulate left,middle & right button clicks. Future
versions may have a different UI.

Level of emulation
------------------

General - See the Risc PC TRM for details of the memory map. A one
bank, single SIMM (at 0x10000000) is emulated with a VRAM option.

VIDC    -       All palette registers are programmable (ie. border
                cursor & screen 0-255)
                Horizontal display start/end & cursor are programmable
                Vertical start/end & cursor/start end programmable
                bpp/hires (control register) understood
                Flyback sync generated
                No sound.
                
IOMD    -       IRQA/B/FIQ mask, status, clear
                Timer 0/Timer 1
                keyboard rx/tx
                IIC bus for RTC chip
                Video/ Cursor DMA
                No other DMA (though will read back what is written)
                ROM/RAM control ignored
                ID/Mouse/Version ports available
                
RTC     -       IIC bus/ CMOS from file
                Real time clock returns date/time on host, no alarm support.
                
IDE     -       Two devices with Read/Write/Init/Identify/Seek/Recal/Verify command set
                (Commands cannot be interleaved across devices, ie. one device
                is assumed active)
                Generates Irqs according to ATA spec.
                
FDC     -       One floppy drive with Read (currently no write), ReadID
                Specify, Seek, Recal, SDS,SIS command set.
                Simulated DMA for data transfer (via FIQ)
                Data rate check (as required by ADFS) for HD/QD discs
                Index pusle irqs
                
COMBO   -       IDE/FDC as above.
                Parallel output port - dumps to file parallel_out. Generates ACK int
                at a fixed delay after the strobe signal. ACK will always appear high
                as RISC OS expects ACK to go high before sending the next byte.
                No serial.
                
Keyboard-       PC keyboard emulation.
                LEDs/break key on GUI
                16 byte FIFO with overrun
                
mouse   -       X/Y/ mouse buttons are 7,8,9 on numeric key pad
                (avoids a UI headache!)

Command line switches
---------------------

-rom <fn>       Controls which ROM file to load (see below)
-gui            Enables GUI
-ramsize <n>    Specifies the amount of DRAM (in kbytes) to be
                given to the emulation. This appears as Bank 0
                of SIMM 0 in the Risc PC memory map. Default 4M -
                RISC OS requires a minimum of 2M if no VRAM.
-vramsize <n>   Specifies the amount of VRAM in kbytes. Default 0
-multi <n>      Controls the frequency of multitasking.
-CMOS <fn>      Provide a filename to be used for CMOS memory.
-bp             Enable branch prediction - only relevant for cores
                which have BP.
                
Important files
---------------

Inside !RPCEm you will find a number of files which affect the
behaviour of the emulation.

The requested ROM file is loaded into memory when !RPCEm starts up.
A power on reset is then carried out. ROM files are no different
from Risc PC ROM images except that the emulator is generally unable
to get through the POST since this carries out timed routines to
test VIDC functionality etc. It is also a good idea to turn off
or tone down delay loops.

The CMOS file is a standard RISC OS CMOS file which contains a copy
of the data stored in the Risc PC's battery backed CMOS. It is
identical in format to the file produced by !Configure. It should be
read/write as writing to the CMOS within the emulation will update the
file.

The 'disc' file is an image of an ADFS IDE disc. Again, by making it
read/write the emulator is able to update it when creating directories
for instance. This file is option and the emulator will function 
without it. A second disc (called 'disc2') will map to ADFS :5. So long
as !HForm is available it is possible to create an empty file in the 
host world (Eg. *create under RISC OS) and then initialise it inside
the emulation. Files should generally be a multiple of 128k long and
bigger than 16Meg. In future releases it might be possible to map 
emulator accesses directly to a real IDE device.

History
=======

0.03    First release made available to ARM.

0.04    Added clock support to RTC chip. Fixed video DMA problem (h/w
        scrolling). Added support for second IDE device & extended IDE
        command set - now possible to !HForm a disk. Added parallel 
        output port.
