#include "MMUv3.h"
#include "^.HW.memory.h"

extern unsigned int *ttb;
extern int memory_load_word (int*, int);

#if 0
unsigned int mmu_translate(unsigned int ad,unsigned int *trans)
{
  unsigned int fld = ttb[ad>>20];

  if ((fld & 3) == 2) {
    *trans = ((ad & 0xfffff) | (fld & 0x1ff00000u));  // **** 29 bits connected
    return 0;
  }
  if ((fld & 3) == 1) {
     // page!
     unsigned int pt;
     pt = (fld & 0x1ffffc00u) | ((ad>>10) & 0x3fc);  // **** only 29 bits connected
     if (pt >= 0x10000000 && pt <(0x10000000 +RAMSIZE)) pt = RAM[(pt&(RAMSIZE-1))/4];
     else if (pt < 0x02000000)  pt = ROM[(pt&(ROMSIZE-1))/4];
     else pt = -1;

     if ((pt & 3) == 2) {
       *trans = ((pt & 0x1ffff000u) | (ad & 0xfff));   // small page
       return 0;
     }
     if ((pt & 3) == 1) {
       *trans = ((pt & 0x1fff0000u) | (ad & 0xffff));   // large page
       return 0;
     }

  }

  return 1;
}
#else
unsigned int mmu_translate(unsigned int ad,unsigned int *trans)
{
#ifdef DIRECT_MMU
  unsigned int fld = ttb[ad>>20];
#else
  unsigned int fld;
  memory_load_word ((int*) &fld, (int) ttb + (ad>>20));
#endif

  if (ad == 0x00600000)
      fout("Whoop!");

  if ((fld & 3) == 2) {
    *trans = ((ad & 0xfffff) | (fld & 0x1ff00000u));  // **** 29 bits connected
    return 0;
  }
  if ((fld & 3) == 1) {
     // page!
     unsigned int pt;
     pt = (fld & 0x1ffffc00u) | ((ad>>10) & 0x3fc);  // **** only 29 bits connected
#ifdef DIRECT_MMU
     if (ADDRESS_OF(pt)) {
       pt = *(unsigned int *) ADDRESS_OF(pt);
#else
     if (memory_load_word ((int*) &pt, pt)) {
#endif
       if ((pt & 3) == 2) {
         *trans = ((pt & 0x1ffff000u) | (ad & 0xfff));   // small page
         return 0;
       }
       if ((pt & 3) == 1) {
         *trans = ((pt & 0x1fff0000u) | (ad & 0xffff));   // large page
         return 0;
       }
     }
  }

  return 1;
}
#endif
