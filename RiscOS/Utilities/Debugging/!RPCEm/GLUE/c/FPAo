#include "^.Armulator.armdefs.h"
#include "^.Armulator.armemu.h"
#include "FPA.h"

#undef NE
#undef ADDCARRY
#undef ADCCARRY
#undef SUBCARRY
#undef SBCCARRY

typedef struct FPAvalue
{
    ARMword sue;
    ARMword mhi;
    ARMword mlo;
} FPAvalue;

typedef struct FPAwork
{
    FPAvalue OP1;
    FPAvalue OP2;
    ARMword RNDexp;
    ARMword Rarith;
    ARMword Rfpsr;
} FPAwork;

#define StartMonadic ARMword OP1sue = w->OP1.sue, OP1mhi = w->OP1.mhi, OP1mlo = w->OP1.mlo, RNDexp, Rarith, Rfpsr = w->Rfpsr
#define StartDyadic ARMword OP1sue = w->OP1.sue, OP1mhi = w->OP1.mhi, OP1mlo = w->OP1.mlo, OP2sue = w->OP2.sue, OP2mhi = w->OP2.mhi, OP2mlo = w->OP2.mlo, RNDexp, Rarith, Rfpsr = w->Rfpsr
#define FinishArith w->OP1.sue = OP1sue; w->OP1.mhi = OP1mhi; w->OP1.mlo = OP1mlo; w->RNDexp = RNDexp; w->Rarith = Rarith; w->Rfpsr = Rfpsr

static const FPAvalue FPAConstTable[8] =
{
    { 0x00000000, 0x00000000, 0x00000000 }, /*  0   */
    { 0x00003FFF, 0x80000000, 0x00000000 }, /*  1   */
    { 0x00004000, 0x80000000, 0x00000000 }, /*  2   */
    { 0x00004000, 0xC0000000, 0x00000000 }, /*  3   */
    { 0x00004001, 0x80000000, 0x00000000 }, /*  4   */
    { 0x00004001, 0xA0000000, 0x00000000 }, /*  5   */
    { 0x00003FFE, 0x80000000, 0x00000000 }, /*  0.5 */
    { 0x00004002, 0xA0000000, 0x00000000 }, /* 10   */
};

typedef struct FPA_State
{
    FPAvalue Reg[8];
    ARMword fpsr;
    ARMword fpcr;
} FPA_State;

FPA_State FPA;

/* FPAvalue bits */
#define Sign     (1u<<31)
#define Uncommon (1u<<30)
#define ToExp_mask (0xFFFFFFFF - Sign - Uncommon)

/* Extended and Internal precision fields */

#define EIExp_len 15
#define EIExp_mask 0x7FFF
#define EIExp_bias 0x3FFF
#define EIUnits_bit (1u<<31)

/* FPSR bits */
#define SysID_pos  24
#define SysID_mask (0xFFu<<SysID_pos)
#define IXE (1u<<20)
#define UFE (1u<<19)
#define OFE (1u<<18)
#define DZE (1u<<17)
#define IOE (1u<<16)
#define AC (1u<<12)
#define EP (1u<<11)
#define SO (1u<<10)
#define NE (1u<<9)
#define ND (1u<<8)
#define IXC (1u<<4)
#define UFC (1u<<3)
#define OFC (1u<<2)
#define DZC (1u<<1)
#define IOC (1u<<0)

/* FPCR bits */
#define RU (1u<<31)
#define IE (1u<<28)
#define MO (1u<<27)
#define EO (1u<<26)
#define OP1_mask (15u<<20)
#define PR1_mask (1u<<19)
#define S1_mask (7u<<16)
#define OP2_mask (1u<<15)
#define DS_pos 12
#define DS_mask (7u<<DS_pos)
#define SB (1u<<11)
#define AB (1u<<10)
#define RE (1u<<9)
#define DA (1u<<8)
#define PR2_mask (1u<<7)
#define RM_pos 5
#define RM_mask (3u<<RM_pos)
#define OP3_mask (1u<<4)
#define S2_Ibit (1u<<3)
#define S2_mask (15)

/* Rounding mode values */
#define RM_Nearest (0u<<RM_pos)
#define RM_PlusInf (1u<<RM_pos)
#define RM_MinusInf (2u<<RM_pos)
#define RM_Zero (3u<<RM_pos)

#define AU_mask (OP1_mask | PR1_mask | S1_mask | OP2_mask | \
                 DS_mask | PR2_mask | RM_mask | OP3_mask | S2_mask)

/* Instruction bits */

#define size_S 0
#define size_D (1u<<15)
#define size_E (1u<<22)
#define size_P ((1u<<22)+(1u<<15))

/* The bit to indicate that the operation is monadic and not dyadic. */
#define DO_monadic (1u<<15)

/* The bit to indicate that this is a subtraction (SUF or RSF) rather than an
 * addition (ADF). */
#define SubNotAdd_bit (1u<<21)

/* The bit to indicate that this is a reverse subtraction (RSF) rather than
 * an addition or ordinary subtraction (ADF or SUF). */
#define RSF_bit (1u<<20)

/* The bit to indicate that this is a reverse division (RDF or FRD) rather
 * than a normal division (DVF or FDV). */
#define RevDiv_bit (1u<<20)

/* The bit to indicate that this is a "fast" multiplication or division (FML,
 * FDV or FRD), rather than the normal version (MUF, DVF or RDF). */
#define Fast_bit (1u<<23)

/* The bit to indicate that a move-type instruction (MVF, MNF or ABS) is an
 * MNF. */
#define MNF_bit (1u<<20)

/* The bit to indicate that a move-type instruction (MVF, MNF or ABS) is an
 * ABS. */
#define ABS_bit (1u<<21)


/* Macro to check pending exceptions. Placed at the top of all
 * instructions except RFC.
 */
#define CheckBounce if (FPA.fpcr & (SB|AB)) return ARMul_CANT

/* Synchronous bounce (unimplemented instruction etc). Set SB and
 * refuse instruction.
 */
#define SyncBounce do { FPA.fpcr |= SB; return ARMul_CANT; } while (0)

/* Arithmetic exceptions. Fill FPCR up with fields from instruction.
 * If emulating synchronous operation, also set SB and refuse the
 * instruction. Otherwise, set AB and accept the instruction. Next
 * FP instruction will bounce via CheckArith.
 */
#define PrepBounce do { FPA.fpcr &=~ (AU_mask | RE);                  \
                        FPA.fpcr |= (instr & AU_mask) | AB | IE;      \
                        if (FPA.fpsr & SO)                            \
                            SyncBounce;                               \
                        else                                          \
                            return ARMul_DONE;                        \
                      } while (0)

#define RoundBounce do { FPA.fpcr &=~ AU_mask;                         \
                         FPA.fpcr |= (instr & AU_mask) | AB | RE;      \
                         if (FPA.fpsr & SO)                            \
                             SyncBounce;                               \
                         else                                          \
                             return ARMul_DONE;                        \
                       } while (0)

#define Denorm(mhi,mlo,grs,sh) do {                     \
                       ARMword words, t1, t2;           \
                       t1 = sh >> 5;                    \
                       t2 = sh &~ (t1 << 5);            \
                       words = t1;                      \
                       t1 = 32-t2;                      \
                       grs = mlo << t1;                 \
                       mlo = (mlo >> t2) | (mhi << t1); \
                       mhi = (mhi >> t2);               \
                       if (words == 1 || words >= 3)    \
                       {                                \
                           grs = grs | (grs << 2);      \
                           grs = mlo | (grs >> 2);      \
                           mlo = mhi;                   \
                           mhi = 0;                     \
                       }                                \
                       if (words >= 2)                  \
                       {                                \
                           grs |= mlo;                  \
                           grs = grs | (grs << 2);      \
                           grs = mhi | (grs >> 2);      \
                           mlo = 0;                     \
                           mhi = 0;                     \
                       }                                \
                     } while (0)

#define POS(i) ( (~(i)) >> 31 )
#define NEG(i) ( (i) >> 31 )

#define ADDCARRY(a,b,r)  (r < a)
#define ADCCARRY(a,b,r)  (NEG(a) && NEG(b) || \
                          NEG(a) && POS(r) || \
                          NEG(b) && POS(r))
#define SUBCARRY(a,b,r)  (a >= b)
#define SBCCARRY(a,b,r)  (NEG(a) && POS(b) || \
                          NEG(a) && POS(r) || \
                          POS(b) && POS(r))

#define Split16(resh, resl, src) do { resh = src >> 16; resl = src &~ (resh << 16); } while (0)

#define Mul64(resh, resl, op1h, op1l, op2, add) do {       \
                       ARMword t1, t2, t3, t4, c;          \
                       Split16(t1, t2, op2);               \
                       t3 = op1h * t1 + add;               \
                       t1 = op1l * t1;                     \
                       resl = t2 * op1l;                   \
                       t4 = resl;                          \
                       resl = t4 + (t1 << 16);             \
                       c = ADDCARRY(t4, (t1 << 16), resl); \
                       t3 = t3 + (t1 >> 16) + c;           \
                       t2 = op1h * t2;                     \
                       t4 = resl;                          \
                       resl = t4 + (t2 << 16);             \
                       c = ADDCARRY(t4, (t2 << 16), resl); \
                       resh = t3 + (t2 >> 16) + c;         \
                     } while (0)


static void NormaliseOp(ARMword *mhip, ARMword *mlop, ARMword *RNDexpp)
{
    ARMword mhi = *mhip, mlo = *mlop, RNDexp = *RNDexpp;
    int shift;;

    if (mhi == 0)
    {
        mhi = mlo;
        mlo = 0;
        RNDexp -= 32;
    }
    shift = 0;
    if ((mhi >> 16) == 0) mhi <<= 16, shift += 16;
    if ((mhi >> 24) == 0) mhi <<=  8, shift +=  8;
    if ((mhi >> 28) == 0) mhi <<=  4, shift +=  4;
    if ((mhi >> 30) == 0) mhi <<=  2, shift +=  2;
    if ((mhi >> 31) == 0) mhi <<=  1, shift +=  1;

    *mhip = mhi | (mlo >> (32 - shift));
    *mlop = mlo << shift;
    *RNDexpp = RNDexp - shift;
}

static unsigned FPA_RFC(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    extern int listing;
    listing = 1;

    if (!state->NtransSig)
        SyncBounce;

    *value = FPA.fpcr;

    FPA.fpcr &=~ (SB|AB|DA);

    return ARMul_DONE;
}

static unsigned FPA_RFS(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    CheckBounce;

    *value = FPA.fpsr;

    return ARMul_DONE;
}

static unsigned FPA_FIX(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    SyncBounce;
}

static unsigned FPA_Compare(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    SyncBounce;
}

static unsigned FPA_FLT(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    SyncBounce;
}

static unsigned FPA_WFS(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    CheckBounce;

    FPA.fpsr = (FPA.fpsr & SysID_mask) | (value &~ SysID_mask);

    return ARMul_DONE;
}

static unsigned FPA_WFC(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    if (!state->NtransSig)
        SyncBounce;

    CheckBounce;

    FPA.fpcr = (FPA.fpcr &~ (SB|AB|DA)) | (value & (SB|AB|DA));

    return ARMul_DONE;
}

static void FPA_Move(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
    StartMonadic;

    RNDexp = OP1sue & ToExp_mask;
    OP1sue &= Sign;
    Rarith = 0;

    if (instr & MNF_bit)
        OP1sue ^= Sign;
    if (instr & ABS_bit)
        OP1sue &=~ Sign;

    FinishArith;
}

static void FPA_URD(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
}

static void FPA_NRM(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
}

static void FPA_AddSub(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
    StartDyadic;
    ARMword Rtmp, Rtmp2, temp, R14;

    if (instr & SubNotAdd_bit)
        OP2sue ^= Sign;

    if (instr & RSF_bit)
        OP2sue ^= Sign, OP1sue ^= Sign;

    Rarith = OP1sue << (32-EIExp_len);
    temp = OP2sue << (32-EIExp_len);
    Rtmp = Rarith - temp;
    R14 = OP1sue ^ OP2sue;
    OP1sue &= Sign;
    RNDexp = Rarith >> (32-EIExp_len);
    if (Rarith == temp)
    {
        Rtmp2 = 0;
    }
    else
    {
        if (Rarith < temp)
        {
            Rarith = -Rtmp >> (32-EIExp_len);
            RNDexp += Rarith;
            Denorm(OP1mhi, OP1mlo, Rtmp, Rarith);
            Rtmp2 = 0;
        }
        else
        {
            Rarith = Rtmp >> (32-EIExp_len);
            Denorm(OP2mhi, OP2mlo, Rtmp2, Rarith);
            Rtmp = 0;
        }
    }

    if (!(R14 & Sign))
    {
        ARMword carry;

        /* Magnitude addition */
        Rarith = Rtmp + Rtmp2; /* one of Rtmp, Rtmp2 is 0, so no carry */
        temp = OP1mlo;
        OP1mlo = temp + OP2mlo; carry = ADDCARRY(temp, OP2mlo, OP1mlo);
        temp = OP1mhi;
        OP1mhi = temp + OP2mhi + carry; carry = ADCCARRY(temp, OP2mhi, OP1mhi);
        if (carry)
        {
            RNDexp+=1;
            carry = OP1mhi & 1;
            OP1mhi = (1u << 31) | (OP1mhi >> 1);
            temp = carry;
            carry = OP1mlo & 1;
            OP1mlo = (temp << 31) | (OP1mlo >> 1);
            Rarith = Rarith | (Rarith << 1);
            Rarith = (carry << 31) | (Rarith >> 1);
        }
    }
    else
    {
        /* Magnitude subtraction */
        ARMword carry;

        Rarith = Rtmp - Rtmp2; carry = SUBCARRY(Rtmp, Rtmp2, Rarith);
        temp = OP1mlo;
        OP1mlo = temp - OP2mlo + carry - 1; carry = SBCCARRY(temp, OP2mlo, OP1mlo);
        temp = OP1mhi;
        OP1mhi = temp - OP2mhi + carry - 1; carry = SBCCARRY(temp, OP2mhi, OP1mhi);
        if (!carry)
        {
            /* Reverse sign, 2's complement mantissa */
            OP1sue ^= Sign;
            temp = Rarith;
            Rarith = 0 - temp; carry = SUBCARRY(0, temp, Rarith);
            temp = OP1mlo;
            OP1mlo = 0 - temp + carry - 1; carry = SBCCARRY(0, temp, OP1mlo);
            OP1mhi = 0 - OP1mhi + carry - 1;
        }

        if (!(OP1mhi & EIUnits_bit))
        {
            /* Need to normalise */
            carry = Rarith >> 31;
            Rarith <<= 1;
            temp = OP1mlo >> 31;
            OP1mlo = (OP1mlo << 1) + carry;
            OP1mhi = (OP1mhi << 1) + temp;
            RNDexp -= 1;

            /* Still not normalised? */
            if (!(OP1mhi & EIUnits_bit))
            {
                if ((OP1mhi | OP1mlo) != 0)
                {
                    NormaliseOp(&OP1mhi, &OP1mlo, &RNDexp);
                }
                else
                {
                    /* It's a zero! */
                    if ((instr & RM_mask) == RM_MinusInf)
                        OP1sue = Sign;
                    else
                        OP1sue = 0;
                    RNDexp = 0;
                }
            }
        }

    }

    FinishArith;
}

static void FPA_Mult(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
    StartDyadic;
    ARMword Rtmp, Rtmp2, temp, c, z;

    if (!(OP1mhi & OP2mhi & EIUnits_bit))
    {
        /* One of the operands is zero. */
        OP1sue = OP1sue ^ OP2sue;
        OP1sue &= Sign;
        OP1mhi = 0;
        OP1mlo = 0;
        RNDexp = 0;
        Rarith = 0;
        FinishArith;
        return;
    }

    Rtmp = OP1sue & ToExp_mask;
    Rtmp2 = OP2sue & ToExp_mask;
    OP1sue = OP1sue ^ OP2sue;
    OP1sue &= Sign;
    RNDexp = Rtmp + Rtmp2;
    RNDexp -= EIExp_bias - 1;

    if (!(instr & Fast_bit))
    {
        ARMword OP1sue, Rfpsr, Rins, R14;
        Split16(OP1sue, Rfpsr, OP1mhi);
        Mul64(OP1sue, Rfpsr, OP1sue, Rfpsr, OP2mhi, 0);
        Split16(Rins, R14, OP1mlo);
        Mul64(Rins, R14, Rins, R14, OP2mlo, 0);
        temp = Rfpsr;
        Rfpsr = temp + Rins; c = ADDCARRY(temp, Rins, Rfpsr);
        OP1sue += c;
        Rins = Rfpsr + R14; c = ADDCARRY(Rfpsr, R14, Rins);
        temp = Rfpsr;
        Rfpsr = temp + OP1sue + c; c = ADCCARRY(temp, OP1sue, Rfpsr);
        OP1sue += c;
        Rtmp = OP1mhi - OP1mlo; c = SUBCARRY(OP1mhi, OP1mlo, Rtmp); z = (Rtmp == 0);
        OP1mhi = 0;
        Rarith = 0;
        if (!c)
        {
            OP1mhi = ~OP1mhi;
            OP1mlo = OP2mhi - OP2mlo;
        }
        if (!z)
        {
            Rtmp2 = OP2mlo - OP2mhi; c = SUBCARRY(OP2mlo, OP2mhi, Rtmp2); z = (Rtmp2 == 0);
        }
        if (z)
            OP1mhi = 0;
        if (!c)
        {
            OP1mhi = ~OP1mhi;
            Rarith -= Rtmp;
        }
        Split16(OP2mhi, OP2mlo, Rtmp);
        Mul64(OP1mlo, Rarith, OP2mhi, OP2mlo, Rtmp2, Rarith);

        temp = Rarith;
        Rarith = Rins + temp; c = ADDCARRY(Rins, temp, Rarith);
        temp = OP1mlo
        OP1mlo = Rfpsr + temp + c; c = ADCCARRY(Rfpsr, temp, OP1mlo);
        temp = OP1mhi;
        OP1mhi = OP1sue + temp + c; c = ADCCARRY(OP1sue, temp, OP1mhi);

        R14 |= (R14 << 2);
        Rarith |= (R14 >> 2);

        if (!(OP1mhi & EIUnits_bit))
        {
            /* Need to normalise */
            c = Rarith >> 31;
            Rarith <<= 1;
            temp = OP1mlo >> 31;
            OP1mlo = (OP1mlo << 1) + c;
            OP1mhi = (OP1mhi << 1) + temp;
            RNDexp -= 1;
        }
    }
    else
    {
        Split16(OP2mlo, Rarith, OP2mhi);
        Mul64(OP1mhi, OP1mlo, OP2mlo, Rarith, OP1mhi, 0);
        Rarith = 0;
        if (!(OP1mhi & EIUnits_bit))
        {
            /* Need to normalise */
            c = OP1mlo >> 31;
            OP1mlo <<= 1;
            OP1mhi = (OP1mhi << 1) + c;
            RNDexp -= 1;
        }
    }

    FinishArith;
}

static unsigned FPA_Div(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
    StartDyadic;
    ARMword Rtmp, c;

    if ((OP1mhi & OP2mhi & EIUnits_bit) == 0)
    {
        /* An operand is zero. Careful... */
        if (!(instr & RevDiv_bit))
        {
            if ((OP2mhi | OP2mlo) == 0)
                PrepBounce;
        }
        else
        {
            if ((OP1mhi | OP1mlo) == 0)
                PrepBounce;
        }

        /* Divisor <> 0. Dividend must be 0, so result is zero */
        OP1sue = (OP1sue ^ OP2sue) & Sign;
        OP1mhi = 0;
        OP1mlo = 0;
        RNDexp = 0;
        Rarith = 0;
    }
    else
    {
        if (!(instr & RevDiv_bit))
        {
            Rtmp = OP1sue; OP1sue = OP2sue; OP2sue = Rtmp;
            Rtmp = OP1mhi; OP1mhi = OP2mhi; OP2mhi = Rtmp;
            Rtmp = OP1mlo; OP1mlo = OP2mlo; OP2mlo = Rtmp;
        }

        Rtmp = OP1sue & ToExp_mask
        Rtmp2 = OP2sue & ToExp_mask
        OP1sue = (OP1sue ^ OP2sue) & Sign;
        RNDexp = Rtmp2 - Rtmp + EIExp_bias;

        {
            ARMword OP1sue, OP2sue, Rfpsr, Rins, R14;
            Split16(OP1sue, Rfpsr, OP1mhi);
            Split16(Rins, R14, OP1mlo);
            Rarith = Recip_Table[(OP1sue >> 8) - 128];

            Rtmp = (1u<<23) - (OP1sue * Rarith + Rarith);
            Rarith = ((Rtmp * Rarith) >> 19) + 2;

            Rtmp = OP1mhi >> 13;
            Rtmp2 = Rtmp * Rarith + Rarith;
            Rtmp2 = (1u<<29) - Rtmp2;
            Split16(Rtmp, Rtmp2, Rtmp2);
            OP1mlo = Rtmp2 * Rarith;
            OP1mhi = Rtmp * Rarith;
            Rarith = OP1mhi + (OP1mlo >> 16);
            Rarith >>= 6;

            c = OP2mhi & 1;
            OP2mhi >>= 1;
            OP2sue = OP2mlo << 31;
            OP2mlo = (c << 31) | (OP2mlo >> 1);

            Rtmp = OP2mhi >> 15;
            Rtmp2 = Rarith * Rtmp;
            Rtmp2 = Rtmp2 >> 16;
            Rtmp = Rtmp2 * Rins;
            temp = OP2mlo;
            OP2mlo = temp - Rtmp; c = SUBCARRY(temp, Rtmp, OP2mlo);
            Rtmp = OP1sue * Rtmp2;
            OP2mhi = OP2mhi - Rtmp + c - 1;
            Rtmp = Rtmp2 * R14;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 16); c = SUBCARRY(temp, (Rtmp << 16), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 16) + c - 1; c = SBCCARRY(temp, (Rtmp >> 16), OP2mlo);
            Rtmp = Rtmp2 * Rfpsr;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 16); if (c) c = SUBCARRY(temp, (Rtmp << 16), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 16) + c - 1;
            OP1mhi = Rtmp2 << 16;

            Rtmp = OP2mhi >> 2;
            Rtmp2 = Rarith * Rtmp;
            Rtmp2 >>= 16;
            Rtmp = Rtmp2 * Rins;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 19); c = SUBCARRY(temp, (Rtmp << 19), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 13) + c - 1; c = SBCCARRY(temp, (Rtmp >> 13), OP2mlo);
            Rtmp = OP1sue * Rtmp2;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 19); if (c) c = SUBCARRY(temp, (Rtmp << 19), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 13) + c - 1;
            Rtmp = Rtmp2 * R14;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 3); c = SUBCARRY(temp, (Rtmp << 3), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 29) + c - 1; c = SBCCARRY(temp, (Rtmp >> 29), OP2mlo);
            Rtmp = Rtmp2 * Rfpsr;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 3); if (c) c = SUBCARRY(temp, (Rtmp << 3), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 29) + c - 1;
            OP2mhi <<= 26;
            OP2mhi |= OP2mlo >> 6;
            OP2mlo <<= 26;
            OP2mlo |= OP2sue >> 6;
            OP2sue <<= 26;
            OP1mhi += Rtmp << 3;

            if ((instr & Pr_mask) == Pr_Single)
                goto Div_Single;

            Rtmp = OP2mhi >> 16;
            Rtmp2 = Rarith * Rtmp;
            Rtmp2 >>= 16;
            Rtmp = Rtmp2 * Rins;
            temp = OP2mlo;
            OP2mlo = temp - Rtmp; c = SUBCARRY(temp, Rtmp, OP2mlo);
            Rtmp = OP1sue * Rtmp2;
            OP2mhi = OP2mhi - Rtmp + c - 1;
            Rtmp = Rtmp2 * R14;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 16); c = SUBCARRY(temp, (Rtmp << 16), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 16) + c - 1; c = SBCCARRY(temp, (Rtmp >> 16), OP2mlo);
            Rtmp = Rtmp2 * Rfpsr;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 16); if (c) c = SUBCARRY(temp, (Rtmp << 16), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 16) + c - 1;
            OP1mlo = Rtmp2 << 22;
            OP1mhi += Rtmp >> 10;

            Rtmp = OP2mhi >> 2;
            Rtmp2 = Rarith * Rtmp;
            Rtmp2 >>= 16;
            Rtmp = Rtmp2 * Rins;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 19); c = SUBCARRY(temp, (Rtmp << 19), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 13) + c - 1; c = SBCCARRY(temp, (Rtmp >> 13), OP2mlo);
            Rtmp = OP1sue * Rtmp2;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 19); if (c) c = SUBCARRY(temp, (Rtmp << 19), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 13) + c - 1;
            Rtmp = Rtmp2 * R14;
            temp = OP2sue;
            OP2sue = temp - (Rtmp << 3); c = SUBCARRY(temp, (Rtmp << 3), OP2sue);
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp >> 29) + c - 1; c = SBCCARRY(temp, (Rtmp >> 29), OP2mlo);
            Rtmp = Rtmp2 * Rfpsr;
            temp = OP2mlo;
            OP2mlo = temp - (Rtmp << 3); if (c) c = SUBCARRY(temp, (Rtmp << 3), OP2mlo);
            OP2mhi = OP2mhi - (Rtmp >> 29) + c - 1;
            OP2mhi <<= 26;
            OP2mhi |= OP2mlo >> 6;
            OP2mlo <<= 26;
            OP2mlo |= OP2sue >> 6;
            OP2sue <<= 26;
            temp = OP1mlo;
            OP1mlo = temp + (Rtmp << 9); c = ADDCARRY(temp, (Rtmp << 9), OP1mlo);
            OP1mhi += c;

            if (!(instr & Pr1_mask))
                goto Div_Double;
        }



    }

    FinishArith;

    return ARMul_DONE;
}

static unsigned FPA_RoundResult(ARMul_State *state, unsigned type, ARMword instr, FPAwork *w)
{
    ARMword dest = (instr & DS_mask) >> DS_pos;

    if (w->OP1.sue & Uncommon)
    {
        FPA.Reg[dest] = w->OP1;
        RoundBounce;
    }

    FPA.Reg[dest].sue = w->OP1.sue | w->RNDexp;
    FPA.Reg[dest].mhi = w->OP1.mhi;
    FPA.Reg[dest].mlo = w->OP1.mlo;

    return ARMul_DONE;
}

static unsigned FPA_LDC1(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    SyncBounce;
}

static unsigned FPA_STC1(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    SyncBounce;
}

static unsigned FPA_MCR1(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    ARMword op = (instr >> 21) & 7;

    switch (op)
    {
        case 0: return FPA_FLT(state, type, instr, value);
        case 1: return FPA_WFS(state, type, instr, value);
        case 2: return FPA_WFC(state, type, instr, value);
    }

    SyncBounce;
}

static unsigned FPA_MRC1(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    ARMword op = (instr >> 21) & 7;

    switch (op)
    {
        case 0: return FPA_FIX(state, type, instr, value);
        case 1: return FPA_RFS(state, type, instr, value);
        case 2: return FPA_RFC(state, type, instr, value);
        case 4:
        case 5:
        case 6:
        case 7: return FPA_Compare(state, type, instr, value);
    }

    SyncBounce;
}

static unsigned FPA_Monadic(ARMul_State *state, unsigned type, ARMword instr)
{
    ARMword op = (instr >> 20) & 15;
    FPAwork w;

    if (instr & S2_Ibit)
        w.OP1 = FPAConstTable[instr & 7];
    else
        w.OP1 = FPA.Reg[instr & 7];

    if (w.OP1.sue & Uncommon)
        PrepBounce;

    switch (op)
    {
        case  0:
        case  1:
        case  2: FPA_Move(state, type, instr, &w); break;
        case 14: FPA_URD(state, type, instr, &w);  break;
        case 15: FPA_NRM(state, type, instr, &w);  break;
        default: SyncBounce;
    }

    return FPA_RoundResult(state, type, instr, &w);
}

static unsigned FPA_Dyadic(ARMul_State *state, unsigned type, ARMword instr)
{
    ARMword op = (instr >> 20) & 15;
    FPAwork w;
    unsigned result;

    w.OP1 = FPA.Reg[(instr >> 16) & 7];

    if (instr & S2_Ibit)
        w.OP2 = FPAConstTable[instr & 7];
    else
        w.OP2 = FPA.Reg[instr & 7];

    if ((w.OP1.sue & Uncommon) || (w.OP2.sue & Uncommon))
        PrepBounce;

    switch (op)
    {
        case  0:
        case  2:
        case  3: FPA_AddSub(state, type, instr, &w); break;

        case  4:
        case  5:
        case 10: /* Div can bounce */
        case 11: result = FPA_Div(state, type, instr, &w);
                 if (result != ARMul_DONE)
                     return result;
                 break;

        case  1:
        case  9: FPA_Mult(state, type, instr, &w); break;

        default: SyncBounce;
    }

    return FPA_RoundResult(state, type, instr, &w);
}

static unsigned FPA_CDP1(ARMul_State *state, unsigned type, ARMword instr)
{
    CheckArith;

    if (instr & (DO_monadic))
        return FPA_Monadic(state, type, instr);
    else
        return FPA_Dyadic(state, type, instr);
}

static unsigned FPA_LFM(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    static ARMword regcount, wordcount;
    static ARMword reg;

    switch (type)
    {
        case ARMul_FIRST:
            CheckBounce;
            reg = (instr >> 12) & 7;
            regcount = ((instr >> 21) & 2) + ((instr >> 15) & 1);
            if (regcount == 0) regcount = 4;
            wordcount = 0;
            return ARMul_DONE;

        case ARMul_DATA:
        {
            ARMword *data = (ARMword *) &FPA.Reg[reg];
            if (wordcount == 0)
                value &= 0xC0007FFF; /* Only 17 bits in first word (81 total) */
            data[wordcount++] = value;
            if (wordcount == 3)
            {
                if (--regcount == 0)
                {
                    return ARMul_DONE;
                }
                else
                {
                    wordcount = 0;
                    if (reg++ == 8) reg = 0;
                }
            }
            return ARMul_INC;
        }

        default: return ARMul_DONE;
    }
}

static unsigned FPA_SFM(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    static ARMword regcount, wordcount;
    static ARMword reg;

    switch (type)
    {
        case ARMul_FIRST:
            CheckBounce;
            reg = (instr >> 12) & 7;
            regcount = ((instr >> 21) & 2) + ((instr >> 15) & 1);
            if (regcount == 0) regcount = 4;
            wordcount = 0;
            return ARMul_DONE;

        case ARMul_DATA:
        {
            const ARMword *data = (const ARMword *) &FPA.Reg[reg];
            *value = data[wordcount++];
            if (wordcount == 3)
            {
                if (--regcount == 0)
                {
                    return ARMul_DONE;
                }
                else
                {
                    wordcount = 0;
                    if (reg++ == 8) reg = 0;
                }
            }
            return ARMul_INC;
        }

        default: return ARMul_DONE;
    }
}

static unsigned FPA_MCR2(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
    SyncBounce;
}

static unsigned FPA_MRC2(ARMul_State *state, unsigned type, ARMword instr, ARMword *value)
{
    SyncBounce;
}

static unsigned FPA_CDP2(ARMul_State *state, unsigned type, ARMword instr)
{
    SyncBounce;
}


static unsigned FPA_Init(ARMul_State *state)
{
    FPA.fpcr = DA | SB | AB;
    FPA.fpsr = (FPA.fpsr &~ SysID_mask) | (0x81u << SysID_pos);

    return 0;
}

void FPA_Attach(ARMul_State *state)
{
    ARMul_CoProAttach(state, 1, FPA_Init, NULL,
                      FPA_LDC1, FPA_STC1, FPA_MRC1, FPA_MCR1, FPA_CDP1,
                      NULL, NULL, NULL);
    ARMul_CoProAttach(state, 2, NULL, NULL,
                      FPA_LFM, FPA_SFM, FPA_MRC2, FPA_MCR2, FPA_CDP2,
                      NULL, NULL, NULL);
}

#ifdef DEBUG
void dump_fp_regs(void)
{
    int i;
    fout("        FPCR=%8.8X FPSR=%8.8X", FPA.fpcr, FPA.fpsr);
    for (i=0; i<8; i++)
        fout(" F%d=%8.8X%8.8X%8.8X", i, FPA.Reg[i].sue, FPA.Reg[i].mhi, FPA.Reg[i].mlo);
    fout("\n");
}
#endif

