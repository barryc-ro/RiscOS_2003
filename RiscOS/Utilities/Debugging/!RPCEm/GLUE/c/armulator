#include "^.Armulator.armdefs.h"
#include "^.Armulator.armemu.h"
#include "FPA.h"
#include "kernel.h"
#include "string.h"
#include "stdarg.h"
#include <stdio.h>
#include "swis.h"

int listing = 0;

int MMUON;
unsigned int *ttb;      // mmu translation base
extern unsigned int *RAM,*ROM,RAMSIZE,ROMSIZE;
int reset;
void debug_state(int i);
static void replay_regs(void);

static ARMword CP15Reg[16] ;
static const unsigned char CP15RegWords[] = {8,1,1,1,1,1,1,1,1};

static unsigned CP15Init(ARMul_State *state)
{
  CP15Reg[1] = state->prog32Sig << 4 |
               state->data32Sig << 5 |
               state->lateabtSig << 6 |
               state->bigendSig << 7 ;
  return(TRUE) ;
}

static unsigned CP15MRC(ARMul_State *state, unsigned type, ARMword instr,ARMword *value)
{
  int reg = (int)BITS(16,19);
  int op2 = (int)BITS(5,7);

  if (reg == 0)
  {
    if (op2 != 7)
      *value =  0x41447000 ;
    else
      *value = 1; /* Magic "running on emulator" indication */
  }
  else
    *value = CP15Reg[reg] ;
  return(ARMul_DONE) ;
}

static unsigned CP15MCR(ARMul_State *state, unsigned type, ARMword instr, ARMword value)
{
  int reg = (int)(BITS(16,19) & 7) ;

  CP15Reg[reg] = value ;
  if (reg == 1) {
    state->prog32Sig =  (unsigned)((value >> 4) & 1) ;
    state->data32Sig =  (unsigned)((value >> 5) & 1) ;
    state->lateabtSig = (unsigned)((value >> 6) & 1) ;
    state->bigendSig =  (unsigned)((value >> 7) & 1) ;
    state->Emulate = TRUE ; /* force ARMulator to notice these now !*/
    MMUON = value & 1;
  }
  if (reg ==2) {
    value &=~ ((1<<14)-1);
    if (value >= 0x10000000) {
      value &= (RAMSIZE-1);
      ttb = &RAM[value/4];
    }
    else {
      value &= (ROMSIZE-1);
      ttb = &ROM[value/4];
    }
  }

  return(ARMul_DONE) ;
}


static unsigned CP15Read(ARMul_State *state, unsigned reg, ARMword *value)
{
  if (reg == 0)
    *value =  0x41447000 ;
  else if (reg < 8)
    *value = CP15Reg[reg] ;
  return(TRUE) ;
}

static unsigned CP15Write(ARMul_State *state, unsigned reg, ARMword const *valp)
{
  ARMword value = *valp;
  if (reg < 8)
     CP15Reg[reg] = value ;
  if (reg == 1) {
    state->prog32Sig =  (unsigned)((value >> 4) & 1) ;
    state->data32Sig =  (unsigned)((value >> 5) & 1) ;
    state->lateabtSig = (unsigned)((value >> 6) & 1) ;
    state->bigendSig =  (unsigned)((value >> 7) & 1) ;
    state->Emulate = TRUE ; /* force ARMulator to notice these now !*/
    MMUON = value & 1;

  }
  if (reg ==2) {
    if (value >= 0x10000000) {
      value &= (RAMSIZE -1);
      ttb = &RAM[((value&~((1<<14)-1)))/4];
    }
    else {
      value &= (ROMSIZE -1);
      ttb = &ROM[((value&~((1<<14)-1)))/4];
    }
  }

  return(TRUE) ;
}


void copro(ARMul_State *state)
{
    int i;

    for (i = 0 ; i < 16 ; i++) ARMul_CoProDetach(state, i) ;

    ARMul_CoProAttach(state, 15, CP15Init, NULL,
                      NULL, NULL, CP15MRC, CP15MCR,
                      NULL, CP15Read, CP15Write, CP15RegWords) ;

#if 1
    FPA_Attach(state);
#endif

    /* No handlers below here */

    for (i = 0 ; i < 16 ; i++) {
      /* Call all the initialisation routines */
      if (state->CPInit[i])
          (state->CPInit[i])(state) ;
    }
}

ARMul_State *glue_state;

int store_byte(unsigned int val,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) {
     //glue_state->abortSig = 1;
     return 1;
   }
   else ad =ad & 0x1fffffffu;

   memory_store_byte(val,ad);
   return 0;
}

int store_word(unsigned int data,unsigned int addr)
{
   #if 0
   if (addr == 0x01C02D84 && data == 0)
   {
       replay_regs();
       exit(1);
   }
   #endif
   if (MMUON && mmu_translate(addr,&addr)) {
     //glue_state->abortSig = 1;
     return 1;
   }
   else addr =addr & 0x1fffffffu;

   memory_store_word(data,addr);
   return 0;
}

int load_word(unsigned int *data,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) {
     //glue_state->abortSig = 1;
     return 1;
   }
   else ad =ad & 0x1fffffffu;

   return memory_load_word(data,ad);
}

int load_byte(unsigned char *byte,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) {
     //glue_state->abortSig = 1;
     return 1;
   }
   else ad =ad & 0x1fffffffu;

   return memory_load_byte(byte,ad);
}


ARMword Read (ARMword ad, int *fail)
{
   unsigned int v;

   //if (ad&3) fout("Read access to non-aligned address %x\n",ad);

   *fail = load_word(&v,ad);
   return (ARMword)v;

}

int glue_init(ARMul_State *state)
{
  glue_state = state;
  state->clearAborts = 1;
#ifdef DEBUG
  state->CallDebug = 1;
#endif
  return 0;
}

ARMword ReadB (ARMword ad)
{
   unsigned char byte;

   load_byte(&byte,ad);
   return (ARMword) byte;
}

void StoreB (ARMword ad,ARMword val)
{
   store_byte(val,ad);
}

int Store (ARMword ad,ARMword val)
{
   if (ad & 3) {
     int i;
     //fout("Access to non-aligned address %x\n",ad);
     ad =ad & ~3;
     for (i= ad&3; i<(ad&3+4) ;i++) {
     	  StoreB(ad + (i&3),val);
     	  val = val >>8;
     }
     return 0;
   }
   return store_word(val,ad);
}

extern ARMword ARMul_LoadInstrS(ARMul_State *state,ARMword address)
{
  int fail;
  ARMword temp;
  if (ARM26BITMODE) address &= 0x03fffffc;
  //printf("Loading instruction from address %x, mode is %d\n",address,ARMMODE);
  temp = Read(address, &fail);
  if (fail)
  {
      temp = ARMul_ABORTWORD;
      ARMul_PREFETCHABORT(address);
  }
  return temp;
}

extern ARMword ARMul_LoadInstrN(ARMul_State *state,ARMword address)
{
  return ARMul_LoadInstrS(state,address);
}

extern ARMword ARMul_LoadWordS(ARMul_State *state,ARMword address)
{
  return ARMul_ReadWord(state,address);
}

extern ARMword ARMul_LoadWordN(ARMul_State *state,ARMword address)
{
  return ARMul_ReadWord(state,address);
}

extern ARMword ARMul_LoadByte(ARMul_State *state,ARMword address)
{
  return ARMul_ReadByte(state,address);
}

extern void ARMul_StoreWordS(ARMul_State *state,ARMword address, ARMword data)
{
   int fail;
   fail = Store(address, data);
   if (fail)
   {
       ARMul_DATAABORT(address);
   }
}

extern void ARMul_StoreWordN(ARMul_State *state,ARMword address, ARMword data)
{
   ARMul_StoreWordS( state, address ,data);
}

extern void ARMul_StoreByte(ARMul_State *state,ARMword address, ARMword data)
{
   int fail;
   fail = store_byte(data, address);
   if (fail)
   {
       ARMul_DATAABORT(address);
   }
}

extern ARMword ARMul_SwapWord(ARMul_State *state,ARMword address, ARMword data)
{
  int fail, fail2;
  ARMword temp = Read(address, &fail);
  fail2 = Store( address, data);
  if (fail || fail2)
  {
    temp = ARMul_ABORTWORD;
    ARMul_DATAABORT(address);
  }
  return temp;
}

extern ARMword ARMul_SwapByte(ARMul_State *state,ARMword address, ARMword data)
{
  int fail, fail2;
  unsigned char temp;
  fail = load_byte(&temp, address);
  fail2 = store_byte(data, address);
  if (fail || fail2)
  {
    temp = ARMul_ABORTWORD;
    ARMul_DATAABORT(address);
  }
  return temp;
}

extern ARMword ARMul_ReadWord(ARMul_State *state,ARMword address)
{
  int fail;
  ARMword temp = Read(address, &fail);
  if (fail)
  {
      temp = ARMul_ABORTWORD;
      ARMul_DATAABORT(address);
  }
  return temp;
}

extern ARMword ARMul_ReadByte(ARMul_State *state,ARMword address)
{
  unsigned char temp;
  int fail;
  fail = load_byte(&temp, address);
  if (fail)
  {
      temp = ARMul_ABORTWORD;
      ARMul_DATAABORT(address);
  }
  return temp;
}

/*extern void ARMul_WriteWord(ARMul_State *state,ARMword address, ARMword data)
{
   Store (address,data);
}
extern void ARMul_WriteByte(ARMul_State *state,ARMword address, ARMword data)
{
   StoreB (address,data);
}*/

extern unsigned ARMul_OSHandleSWI(ARMul_State *state,ARMword number)
{
/*   if ((number &~ 0x20000) == 0x800000)
   {
       listing = 1;
       return 1;
   }*/
#if 0
   _kernel_swi_regs regs;

   number &= (0xffffff - 0x20000);
   if (number == 17) {
     state->Emulate = STOP;
     return 1;
   }
#endif
   //fout ("SWI %5x called\n",number);
   return 0;
}

extern unsigned ARMul_OSHandleBKPT(ARMul_State *state,ARMword number)
{
    switch (number)
    {
      case 0:
        fout("BKPT 0\n");
        listing = 1;
        return 1;
      case 1:
        fout("BKPT 1\n");
        listing = 0;
        return 1;
    }

    return 0;
}

extern unsigned ARMul_OSException(ARMul_State *state, ARMword vector, ARMword pc)
{
   return 0;
}


extern void ARMul_DebugPrint(ARMul_State *state, const char *format, ...)
{
  va_list list;
  va_start(list,format);
  vfprintf(stderr,format,list);
  va_end(list);
}

extern void ARMul_DebugPause(ARMul_State *state)
{}

extern void ARMul_ConsolePrint(ARMul_State *state, const char *format, ...)
{
  va_list list;
  va_start(list,format);
  vprintf(format,list);
}

void glue_predict_on(void *h)
{
   // unsupported by this cpu
}

void glue_reset_cpu(void)
{
   MMUON = 0;
   glue_state->NresetSig = 0;
   glue_state->Exception = 1;
}

void interrupt_cpu(int st)
{
  //return;
  if (st) glue_state->Exception = 1;
  glue_state->NirqSig = !st;
}

void fiq_cpu(int st)
{
  //return;
  if (st) glue_state->Exception = 1;
  glue_state->NfiqSig = !st;
}

void debug_state(int i)
{
  glue_state->Debug = i;
  glue_state->CallDebug = i;
}

int lastnm=0;
int lastaddr;
int lastrw = 0;
int lastbw = 1;
int nextdata,nextcr;

int get_reg(int r)
{
    return (int)ARMul_GetReg(glue_state, glue_state->Mode, r);
}

typedef struct regbuf
{
    ARMword instr;
    ARMword pc;
    ARMword reg[16];
    ARMword cpsr, spsr;
} regbuf;

#define REPLAYSIZE 50000

static regbuf *replaybuf;
static int replaybufpos;

static void save_regs(ARMul_State *state, ARMword pc, ARMword instr)
{
    int n, i;
    regbuf *ptr;

    if (!replaybuf)
    {
        replaybuf = calloc(REPLAYSIZE, sizeof (regbuf));
        if (!replaybuf) exit(1);
    }

    ptr = replaybuf + replaybufpos++;
    if (replaybufpos==REPLAYSIZE) replaybufpos = 0;

    ptr->instr = instr;
    ptr->pc = pc;

    for (i=0;i<16;i++)
        ptr->reg[i] = ARMul_GetReg(state, state->Mode, i);

    ptr->cpsr = ARMul_GetCPSR(state);
    ptr->spsr = ARMul_GetSPSR(state, state->Mode);
}

static void replay_regs(void)
{
    int n = replaybufpos;
    do
    {
        char *s;
        regbuf *p;
        p = replaybuf + n;

        s = (char *) _swi(Debugger_Disassemble, _INR(0,1)|_RETURN(1), p->instr, p->pc);
        fout("%8.8X %-26.26s", p->pc, s);

        fout(" R0=%8.8X R1=%8.8X R2=%8.8X R3=%8.8X", p->reg[0], p->reg[1], p->reg[2], p->reg[3]);
        fout(" R4=%8.8X R5=%8.8X R6=%8.8X R7=%8.8X", p->reg[4], p->reg[5], p->reg[6], p->reg[7]);
        fout(" R8=%8.8X R9=%8.8X R10=%8.8X R11=%8.8X", p->reg[8], p->reg[9], p->reg[10], p->reg[11]);
        fout(" R12=%8.8X R13=%8.8X R14=%8.8X PC=%8.8X", p->reg[12], p->reg[13], p->reg[14], p->reg[15]);
        fout(" CPSR=%8.8X SPSR=%8.8X\n", p->cpsr, p->spsr);

        if (++n == REPLAYSIZE)
            n = 0;
    }
    while (n != replaybufpos);
}

void dump_regs(ARMul_State *state, ARMword pc, ARMword instr)
{
    char *s;

    /*if ((instr & 0x0F000000) != 0x0B000000)
        return;*/

    s = (char *) _swi(Debugger_Disassemble, _INR(0,1)|_RETURN(1), instr, pc);
    fout("%8.8X %-26.26s", pc, s);
    fout(" R0=%8.8X R1=%8.8X R2=%8.8X R3=%8.8X", get_reg(0), get_reg(1), get_reg(2), get_reg(3));
    fout(" R4=%8.8X R5=%8.8X R6=%8.8X R7=%8.8X", get_reg(4), get_reg(5), get_reg(6), get_reg(7));
    fout(" R8=%8.8X R9=%8.8X R10=%8.8X R11=%8.8X", get_reg(8), get_reg(9), get_reg(10), get_reg(11));
    fout(" R12=%8.8X R13=%8.8X R14=%8.8X  PC=%8.8X", get_reg(12), get_reg(13), get_reg(14), get_pc());
    fout(" CPSR=%8.8X SPSR=%8.8X\n", get_cpsr(), ARMul_GetSPSR(state, state->Mode));
}

extern ARMword ARMul_Debug(ARMul_State *state, ARMword pc, ARMword instr)
{
   static long int udpos = 0;
   static int count;
   save_regs(state, pc, instr);
   if (pc <= 0x10)
   {
       static int zcount;
       if (pc == 0x00 && zcount++ || pc == 0x0C || pc == 0x10)
       {
           replay_regs();
           exit(0);
       }
   }
   if (listing)
       dump_regs(state, pc, instr);
   /*if ((get_cpsr() & 0x1F) == 8 || (ARMul_GetSPSR(state, state->Mode) & 0x1F) == 8)
   {
       replay_regs();
       exit(0);
   }*/
      /*  if (pc == 0x039B73D8)
        {
            dump_regs(state, pc, instr);
            listing=1;
        }*/
#if 0
      if (1)
      {
          //dump_regs(state, pc, instr);
          if ((instr & 0x0C000000) == 0x0C000000 && (instr & 0x0F000000) != 0x0F000000 &&
              ((instr & 0xF00) == 0x100 || (instr & 0xF00) == 0x200))
          {
              dump_regs(state, pc, instr);
              dump_fp_regs();
          }
      }
      else
      {
        if (pc == 0x03A6B11C)
        {
            dump_regs(state, pc, instr);
            listing=1;
        }
        /*if (pc < 0x14 && !(get_cpsr() & 0x0F))
        {
            listing = 1;
            dump_regs(state, pc, instr);
        }*/

        /*if (_swi(OS_Byte, _INR(0,1)|_RETURN(1), 121, 0x82))
            listing = 1;*/
      }
#endif

//#define LISTSWIS
#ifdef LISTSWIS
{
        int lr = get_reg(14);

        if (pc == 8)
        {
            char buffer[64];
            unsigned int swiinstr;
            int swino;

            load_word(&swiinstr, lr-4);
            swino = swiinstr&0x00FFFFFF;
            _swix(OS_SWINumberToString, _INR(0,2), swino, buffer, sizeof buffer);
            fout("SWI %s @ %8.8X\n", buffer, lr-4);
            dump_regs(state, pc, instr);
        }
}
#endif
    return instr;
}

void run_cpu(int runs,int tick)
{
   int t=tick;
   unsigned int pc;

   while (runs--) {
      pc = ARMul_DoInstr(glue_state);
      t--;
      if (t<=0) {
        IOMD_tick(1-t);
        t = tick;
      }
   }
}


/* get PC and control-reg routines */

int get_pc(void)
{
  extern ARMword ARMul_GetR15(ARMul_State *state);
  return (int)ARMul_GetR15(glue_state);
}

int get_cpsr(void)
{
  extern ARMword ARMul_GetCPSR(ARMul_State *state);
  return (int)ARMul_GetCPSR(glue_state);
}

int get_cr(void)
{
  return (int)CP15Reg[1];
}
