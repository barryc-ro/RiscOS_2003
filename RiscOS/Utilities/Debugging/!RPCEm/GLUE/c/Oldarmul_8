#include "^.Armul8.state.h"

armul8_state *glue_state;

int glue_init(armul8_state *state)
{
  glue_state = state;
  return 0;
}

void glue_predict_on(armul8_state *state)
{
  state->puint.predict_on = 1;

}

void interrupt_cpu(int st)
{
  glue_state->arm8_external.Irq = st;
}

int MMUON = 0;
static unsigned int *ttb;      // mmu translation base
extern unsigned int *RAM,*ROM,RAMSIZE,ROMSIZE;

void glue_reset(armul8_state *state)
{
  glue_state = state;   // in case it has changed
  MMUON = 0;
  state->puint.predict_on = 0;
  ttb =0;
}

void glue_reset_cpu(void)
{
  armul_reset(glue_state);
}

// CP15 implementation for emulations which do not have one

mmu_control(int reg,int val,armul8_state *state)
{
   switch(reg) {
     case 1:
       MMUON = val & 1;
       state->puint.predict_on = (val & (1<<11)) ? 1:0;
       if (((val >>4) & 3) != 3) fprintf(stderr,"Warning, attempt to set non 32 bit configuration\n");
       update_memory_gui();
       break;
     case 2:
       ttb = &RAM[((val&~((1<<14)-1))-0x10000000)/4];
       break;
   }
   return 0;
}

unsigned int mmu_translate(unsigned int ad,unsigned int *trans)
{
  unsigned int fld = ttb[ad>>20];

  if ((fld & 3) == 2) {
    *trans = ((ad & 0xfffff) | (fld & 0x1ff00000u));  // **** 29 bits connected
    return 0;
  }
  if ((fld & 3) == 1) {
     // page!
     unsigned int pt=0;
     pt = (fld & 0x1ffffc00u) | ((ad>>10) & 0x3fc);  // **** only 29 bits connected
     if (pt >= 0x10000000 && pt <(0x10000000 +RAMSIZE)) pt = RAM[(pt&(RAMSIZE-1))/4];
     else if (pt < 0x01000000)  pt = ROM[(pt&(ROMSIZE-1))/4];
     else pt = -1;
     *trans = ((pt & 0x1ffff000u) | (ad & 0xfff));	    // assumes small page

     return 0;
  }

  fout ("Couldn't translate address %x\n",ad);
  print_regs(glue_state,15);
  return 1;
}

int store_byte(unsigned int val,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) return 1;
   else ad =ad & 0x1fffffffu;

   return memory_store_byte(val,ad);
}

int store_word(unsigned int data,unsigned int addr)
{
   if (MMUON && mmu_translate(addr,&addr)) return 1;
   else addr =addr & 0x1fffffffu;

   return memory_store_word(data,addr);
}

int load_word(unsigned int *data,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) return 1;
   else ad =ad & 0x1fffffffu;

   return memory_load_word(data,ad);
}

int load_byte(unsigned char *byte,unsigned int ad)
{
   if (MMUON && mmu_translate(ad,&ad)) return 1;
   else ad =ad & 0x1fffffffu;

   return memory_load_byte(byte,ad);
}

void run_cpu(int runs,int tick)
{
   int t=tick;

   while (runs--) {
      fsequencer(glue_state);
      t--;
      if (t<=0) {
        IOMD_tick(1-t);
        t = tick;
      }
   }
}
