/***************************************************************************\
* armemu.h                                                                  *
* Version 1.30                                                              *
* ARMulator II macros.                                                      *
* Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.   *
* Written by Dave Jaggar.                                                   *
\***************************************************************************/

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/***************************************************************************\
*                           Condition code values                           *
\***************************************************************************/

#define EQ 0
#define NE 1
#define CS 2
#define CC 3
#define MI 4
#define PL 5
#define VS 6
#define VC 7
#define HI 8
#define LS 9
#define GE 10
#define LT 11
#define GT 12
#define LE 13
#define AL 14
#define NV 15

/***************************************************************************\
*                               Shift Opcodes                               *
\***************************************************************************/

#define LSL 0
#define LSR 1
#define ASR 2
#define ROR 3

/***************************************************************************\
*               Macros to twiddle the status flags and mode                 *
\***************************************************************************/

#define NBIT ((unsigned)1L << 31)
#define ZBIT (1L << 30)
#define CBIT (1L << 29)
#define VBIT (1L << 28)
#define IBIT (1L << 7)
#define FBIT (1L << 6)
#define IFBITS (3L << 6)
#define R15IBIT (1L << 27)
#define R15FBIT (1L << 26)
#define R15IFBITS (3L << 26)

#define POS(i) ( (~(i)) >> 31 )
#define NEG(i) ( (i) >> 31 )

#define NFLAG state->NFlag
#define SETN state->NFlag = 1
#define CLEARN state->NFlag = 0
#define ASSIGNN(res) state->NFlag = res

#define ZFLAG state->ZFlag
#define SETZ state->ZFlag = 1
#define CLEARZ state->ZFlag = 0
#define ASSIGNZ(res) state->ZFlag = res

#define CFLAG state->CFlag
#define SETC state->CFlag = 1
#define CLEARC state->CFlag = 0
#define ASSIGNC(res) state->CFlag = res

#define VFLAG state->VFlag
#define SETV state->VFlag = 1
#define CLEARV state->VFlag = 0
#define ASSIGNV(res) state->VFlag = res

#define IFLAG (state->IFFlags >> 1)
#define FFLAG (state->IFFlags & 1)
#define IFFLAGS state->IFFlags
#define ASSIGNINT(res) state->IFFlags = (((res) >> 6) & 3)
#define ASSIGNR15INT(res) state->IFFlags = (((res) >> 26) & 3) ;

#define CCBITS (0xf0000000L)
#define INTBITS (0xc0L)
#define PCBITS (0xfffffffcL)
#define MODEBIT (0x10L)
#define MODEBITS (0x1fL)
#define R15INTBITS (3L << 26)
#define R15PCBITS (0x03fffffcL)
#define R15PCMODEBITS (0x03ffffffL)
#define R15MODEBITS (0x3L)

#ifdef MODE32
#define PCMASK PCBITS
#define PCWRAP(pc) (pc)
#else
#define PCMASK R15PCBITS
#define PCWRAP(pc) ((pc) & R15PCBITS)
#endif
#define PC (state->Reg[15] & PCMASK)
#define R15CCINTMODE (state->Reg[15] & (CCBITS | R15INTBITS | R15MODEBITS))
#define R15INT (state->Reg[15] & R15INTBITS)
#define R15INTPC (state->Reg[15] & (R15INTBITS | R15PCBITS))
#define R15INTPCMODE (state->Reg[15] & (R15INTBITS | R15PCBITS | R15MODEBITS))
#define R15INTMODE (state->Reg[15] & (R15INTBITS | R15MODEBITS))
#define R15PC (state->Reg[15] & R15PCBITS)
#define R15PCMODE (state->Reg[15] & (R15PCBITS | R15MODEBITS))
#define R15MODE (state->Reg[15] & R15MODEBITS)

#define ECC ((NFLAG << 31) | (ZFLAG << 30) | (CFLAG << 29) | (VFLAG << 28))
#define EINT (IFFLAGS << 6)
#define ER15INT (IFFLAGS << 26)
#define EMODE (state->Mode)

#define CPSR (ECC | EINT | EMODE)

#define GETSPSR(bank) bank>0?state->Spsr[bank]:ECC | EINT | EMODE ;
#define SETPSR(d,s) d = (s) & (ARMword)(CCBITS | INTBITS | MODEBITS)
#define SETINTMODE(d,s) d = ((d) & CCBITS) | ((s) & (INTBITS | MODEBITS))
#define SETCC(d,s) d = ((d) & (INTBITS | MODEBITS)) | ((s) & CCBITS)
#define SETR15PSR(s) if (state->Mode == USER26MODE) { \
                        ASSIGNN((s & NBIT) != 0) ; \
                        ASSIGNZ((s & ZBIT) != 0) ; \
                        ASSIGNC((s & CBIT) != 0) ; \
                        ASSIGNV((s & VBIT) != 0) ; \
                        } \
                     else { \
                        state->Reg[15] = R15PC | (s) & (CCBITS | R15INTBITS | R15MODEBITS) ; \
                        ARMul_R15Altered(state) ; \
                        }

#define SETABORT(i,m) state->Cpsr = ECC | EINT | (i) | (m)

#ifndef MODE32
#define VECTORS 0x20
#define LEGALADDR 0x03ffffff

#if 0
#define VECTORACCESS(address) (address < VECTORS && ARMul_MODE26BIT && state->prog32Sig)
#else
#define VECTORACCESS(a) 0
#endif

#define ADDREXCEPT(address) (address > LEGALADDR && !state->data32Sig)
#endif

#ifdef CYCLEBASED
#define INTERNALABORT(address) if (address < VECTORS) \
                                  state->Aborted = ARMul_DataAbortV ; \
                               else \
                                  state->Aborted = ARMul_AddrExceptnV ; \
                               state->NrwSig = LOW ; \
                               state->doutenSig = LOW ;
#else
#define INTERNALABORT(address) if (address < VECTORS) \
                                  state->Aborted = ARMul_DataAbortV ; \
                               else \
                                  state->Aborted = ARMul_AddrExceptnV ;
#endif

#ifdef MODE32
#define TAKEABORT ARMul_Abort(state,ARMul_DataAbortV)
#else
#define TAKEABORT if (state->Aborted == ARMul_AddrExceptnV) \
                     ARMul_Abort(state,ARMul_AddrExceptnV) ; \
                  else \
                     ARMul_Abort(state,ARMul_DataAbortV)
#endif
#define CPTAKEABORT if (!state->Aborted) \
                       ARMul_Abort(state,ARMul_UndefinedInstrV) ; \
                    else if (state->Aborted == ARMul_AddrExceptnV) \
                       ARMul_Abort(state,ARMul_AddrExceptnV) ; \
                    else \
                       ARMul_Abort(state,ARMul_DataAbortV)

#ifdef CYCLEBASED
#define PREFETCH(dest,addr) if (state->abortSig) { \
                               ARMul_PREFETCHABORT(addr) ; \
                               dest = ARMul_ABORTWORD ; \
                               } \
                            else \
                               dest = state->datainBus
#endif

/***************************************************************************\
*               Different ways to start the next instruction                *
\***************************************************************************/

#define SEQ 0
#define NONSEQ 1
#define PCINCEDSEQ 2
#define PCINCEDNONSEQ 3
#define PRIMEPIPE 4
#define RESUME 8

#define NORMALCYCLE state->NextInstr = 0
#define BUSUSEDN state->NextInstr |= 1 /* the next fetch will be an N cycle */
#define BUSUSEDINCPCS state->Reg[15] += 4 ; /* a standard PC inc and an S cycle */ \
                      state->NextInstr = (state->NextInstr & 0xff) | 2
#define BUSUSEDINCPCN state->Reg[15] += 4 ; /* a standard PC inc and an N cycle */ \
                      state->NextInstr |= 3
#define INCPC state->Reg[15] += 4 ; /* a standard PC inc */ \
              state->NextInstr |= 2
#ifdef CYCLEBASED
#define FLUSHPIPE state->NextInstr |= PRIMEPIPE ; \
                  state->addrBus = PC ; \
                  NCYCLE
#else
#define FLUSHPIPE state->NextInstr |= PRIMEPIPE
#endif

/***************************************************************************\
*                          Cycle based emulation                            *
\***************************************************************************/

#ifdef CYCLEBASED
#define SINGLECYCLEINSTR SCYCLE ; \
                         state->addrBus = PCWRAP(pc + 12) | state->addr01Bus ;
#define OUTPUTCP(i,a,b) state->NcpiSig = i ; \
                        state->cpaSig = a ; \
                        state->cpbSig = b
#define NCYCLE state->seqSig = LOW ; \
               state->NmreqSig = LOW
#define SCYCLE state->seqSig = HIGH ; \
               state->NmreqSig = LOW
#define ICYCLE state->seqSig = LOW ; \
               state->NmreqSig = HIGH
#define CCYCLE state->seqSig = HIGH ; \
               state->NmreqSig = HIGH
#else
#define SINGLECYCLEINSTR
#define OUTPUTCP(i,a,b)
#define NCYCLE
#define SCYCLE
#define ICYCLE
#define CCYCLE
#define NEXTCYCLE(c)
#endif

/***************************************************************************\
*                 States of the cycle based state machine                   *
\***************************************************************************/

#ifdef CYCLEBASED
#define NEWINSTR        0
#define DESTPC3         1
#define STR2            2
#define STRB2           3
#define STM3            4
#define UNDEF           5
#define LDCBUSY         6
#define LDC1            7
#define LDC2            8
#define STCBUSY         9
#define STC1            10
#define STC2            11
#define STC3            12
#define MCRBUSY         13
#define MCR1            14
#define MCR2            15
#define MRCBUSY         16
#define MRC1            17
#define CDPBUSY         18
#define CDP1            19
#define RESET1          20
#define RESET2          21
#define KILLNEXT        22
#define ABORT1          23
#define MSR2            24
#define NEXTISNEW       25
#define DESTPC1         26
#define DESTPC2         27
#define WRITEPC1        28
#define WRITEPC2        29
#define MUL             30
#define LDR2            31
#define LDR3            32
#define LDRB2           33
#define LDRB3           34
#define SWP2            35
#define SWP3            36
#define SWPB2           37
#define SWPB3           38
#define SWP4            39
#define LDM2            40
#define LDM3            41
#define LDM4            42
#define LDM5            43
#define LDM6            44
#define LDM7            45
#define STM2            46
#define STM4            47
#define LDC3            48
#define MRC2            49
#define MRC3            50
#define ANABORT         51
#endif

/***************************************************************************\
*                 Macros to extract parts of instructions                   *
\***************************************************************************/

#define DESTReg (BITS(12,15))
#define LHSReg (BITS(16,19))
#define RHSReg (BITS(0,3))

#define DEST (state->Reg[DESTReg])

#define LHS (state->Reg[LHSReg])

#define MULDESTReg (BITS(16,19))
#define MULLHSReg (BITS(0,3))
#define MULRHSReg (BITS(8,11))
#define MULACCReg (BITS(12,15))
/* And, for 64-bit results */
#define MULLOReg MULACCReg
#define MULHIReg MULDESTReg
#define MULsetbit (BIT(20))
#define MULaccbit (BIT(21))
#define MULsigbit (BIT(22))

#define DPImmRHS (ARMul_ImmedTable[BITS(0,11)])
#define DPSImmRHS temp = BITS(0,11) ; \
                  rhs = ARMul_ImmedTable[temp] ; \
                  if (temp > 255) /* there was a shift */ \
                     ASSIGNC(rhs >> 31) ;

#ifdef MODE32
#define DPRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                  : GetDPRegRHS(state, instr))
#define DPSRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                   : GetDPSRegRHS(state, instr))
#else
#define DPRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                  : GetDPRegRHS(state, instr))
#define DPSRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                   : GetDPSRegRHS(state, instr))
#endif

#define LSBase state->Reg[LHSReg]
#define LSImmRHS (BITS(0,11))

#ifdef MODE32
#define LSRegRHS ((BITS(4,11)==0) ? state->Reg[RHSReg] \
                                  : GetLSRegRHS(state, instr))
#else
#define LSRegRHS ((BITS(0,11)<15) ? state->Reg[RHSReg] \
                                  : GetLSRegRHS(state, instr))
#endif

#ifdef CYCLEBASED
#define LSMBase LHSReg==15?ECC|ER15INT|R15PC|EMODE:state->Reg[LHSReg]
#else
#define LSMBase state->Reg[LHSReg]
#endif

#define LSMNumRegs ((ARMword)ARMul_BitList[BITS(0,7)] + \
                    (ARMword)ARMul_BitList[BITS(8,15)] )
#define LSMBaseFirst ((LHSReg == 0 && BIT(0)) || \
                      (BIT(LHSReg) && BITS(0,LHSReg-1) == 0))

#define SWAPSRC (state->Reg[RHSReg])

#define LSCOff (BITS(0,7) << 2)
#define CPNum BITS(8,11)

/***************************************************************************\
*                    Macro to rotate n right by b bits                      *
\***************************************************************************/

#define ROTATER(n,b) (((n)>>(b))|((n)<<(32-(b))))

/***************************************************************************\
*                 Macros to store results of instructions                   *
\***************************************************************************/

#define ADDCARRY(a,b,r)  ASSIGNC(r < a)
#define ADCCARRY(a,b,r)  ASSIGNC(NEG(a) && NEG(b) || \
                                 NEG(a) && POS(r) || \
                                 NEG(b) && POS(r))
#define ADDOVERFLOW(a,b,r) ASSIGNV( ((a ^ r) & (b ^ r)) >> 31 )
#define SUBCARRY(a,b,r)  ASSIGNC(a >= b)
#define SBCCARRY(a,b,r)  ASSIGNC(NEG(a) && POS(b) || \
                                 NEG(a) && POS(r) || \
                                 POS(b) && POS(r))
#define SUBOVERFLOW(a,b,r) ASSIGNV( ((a ^ b) & (a ^ r)) >> 31 ) ;

#define WRITEDEST(d) if (DESTReg==15) \
                        WriteR15(state, d) ; \
                     else \
                          DEST = d

#define WRITESDEST(d) if (DESTReg == 15) \
                         WriteSR15(state, d) ; \
                      else { \
                         DEST = d ; \
                         ARMul_NegZero(state, d) ; \
                         }

#define BYTETOBUS(data) ((data & 0xff) | \
                        ((data & 0xff) << 8) | \
                        ((data & 0xff) << 16) | \
                        ((data & 0xff) << 24))
#define BUSTOBYTE(address,data) \
           if (state->bigendSig) \
              temp = (data >> (((address ^ 3) & 3) << 3)) & 0xff ; \
           else \
              temp = (data >> ((address & 3) << 3)) & 0xff

#ifdef CYCLEBASED
#define LOADMULT(instr,address,wb) LoadMultSetup(state,instr,address,wb)
#define LOADSMULT(instr,address,wb) LoadMultSetup(state,instr,address,wb)
#define STOREMULT(instr,address,wb) StoreMultSetup(state,instr,address,wb)
#define STORESMULT(instr,address,wb) StoreMultSetup(state,instr,address,wb)
#else
#define LOADMULT(instr,address,wb) LoadMult(state,instr,address,wb)
#define LOADSMULT(instr,address,wb) LoadSMult(state,instr,address,wb)
#define STOREMULT(instr,address,wb) StoreMult(state,instr,address,wb)
#define STORESMULT(instr,address,wb) StoreSMult(state,instr,address,wb)
#endif

#define POSBRANCH ((instr & 0x7fffff) << 2)
#define NEGBRANCH (0xfc000000 | ((instr & 0xffffff) << 2))

/***************************************************************************\
*                          Values for Emulate                               *
\***************************************************************************/

#define STOP            0 /* stop */
#define CHANGEMODE      1 /* change mode */
#define ONCE            2 /* execute just one interation */
#define RUN             3 /* continuous execution */

/***************************************************************************\
*                      Stuff that is shared across modes                    *
\***************************************************************************/

extern ARMword ARMul_Emulate26(ARMul_State *state) ;
extern ARMword ARMul_Emulate32(ARMul_State *state) ;
extern unsigned ARMul_MultTable[] ; /* Number of I cycles for a mult */
extern ARMword ARMul_ImmedTable[] ; /* immediate DP LHS values */
extern char ARMul_BitList[] ; /* number of bits in a byte table */
extern void ARMul_Abort26(ARMul_State *state, ARMword) ;
extern void ARMul_Abort32(ARMul_State *state, ARMword) ;
extern unsigned ARMul_NthReg(ARMword instr,unsigned number) ;
extern void ARMul_FixCPSR(ARMul_State *state, ARMword instr, ARMword rhs) ;
extern void ARMul_FixSPSR(ARMul_State *state, ARMword instr, ARMword rhs) ;
extern void ARMul_NegZero(ARMul_State *state, ARMword result) ;
extern void ARMul_CPSRAltered(ARMul_State *state) ;
extern void ARMul_R15Altered(ARMul_State *state) ;
extern ARMword ARMul_SwitchMode(ARMul_State *state,ARMword oldmode, ARMword newmode) ;
extern unsigned ARMul_NthReg(ARMword instr, unsigned number) ;
extern void ARMul_LDC(ARMul_State *state,ARMword instr,ARMword address) ;
extern void ARMul_STC(ARMul_State *state,ARMword instr,ARMword address) ;
extern void ARMul_MCR(ARMul_State *state,ARMword instr, ARMword source) ;
extern ARMword ARMul_MRC(ARMul_State *state,ARMword instr) ;
extern void ARMul_CDP(ARMul_State *state,ARMword instr) ;
extern void ARMul_UndefInstr(ARMul_State *state,ARMword instr) ;
#ifdef CYCLEBASED
extern void ARMul_UndefInstr(ARMul_State *state,ARMword instr) ;
extern unsigned CoProNextState(ARMul_State *state, unsigned ready, unsigned busy) ;
#endif
extern unsigned IntPending(ARMul_State *state) ;
extern ARMword ARMul_Align(ARMul_State *state, ARMword address, ARMword data) ;
#define EVENTLISTSIZE 1024L

/***************************************************************************\
*                      Macros to scrutinize instructions                    *
\***************************************************************************/

#ifdef CYCLEBASED
#define UNDEF_Test \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_Test

#define UNDEF_Shift \
   if (BIT(7)) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Shift ; \
      }

#define UNDEF_MSRPC \
   if (RHSReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_MSRPC ; \
      }

#define UNDEF_MRSPC \
   if (DESTReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_MRSPC ; \
      }

#define UNDEF_MULPCDest \
   state->EndCondition = UNDEF_IllInstruction ; \
   state->ErrorCode = UNDEFNUM_MULPCDest

#define UNDEF_MULDestEQOp1 \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_MULDestEQOp1

#define UNDEF_LSRBPC \
   if (DESTReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBPC ; \
      }

#define UNDEF_LSRBaseEQOffWb \
   if (LHSReg == RHSReg) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBaseEQOffWb ; \
      }

#define UNDEF_LSRBaseEQDestWb \
   if (LHSReg == DESTReg) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRBaseEQDestWb ; \
      }

#define UNDEF_LSRPCBaseWb \
   if (LHSReg == 15) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRPCBaseWb ; \
      }

#define UNDEF_LSRPCOffWb \
   if (RHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSRPCOffWb ; \
      }

#define UNDEF_LSMNoRegs \
   if (!(instr & 0xffff)) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMNoRegs ; \
      }

#define UNDEF_LSMPCBase \
   if (LHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMPCBase ; \
      }

#define UNDEF_LSMUserBankWb \
   if (BIT(21)) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMUserBankWb ; \
      }

#define UNDEF_LSMBaseInListWb \
   if (BIT(21) && BIT(LHSReg)) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSMBaseInListWb ; \
      }

#define UNDEF_SWPPC \
   if (DESTReg == 15 || LHSReg == 15 || RHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_SWPPC ; \
      }

#define UNDEF_CoProHS \
   ARMul_Abort(state,ARMul_UndefinedInstrV) ; \
   state->NextCycle = DESTPC1

#define UNDEF_MCRPC \
   state->EndCondition = UNDEF_IllInstruction ; \
   state->ErrorCode = UNDEFNUM_MCRPC

#define UNDEF_LSCPCBaseWb \
   if (BIT(21) && LHSReg == 15) { \
      state->EndCondition = UNDEF_IllInstruction ; \
      state->ErrorCode = UNDEFNUM_LSCPCBaseWb ; \
      }

#define UNDEF_UndefNotBounced \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_UndefNotBounced

#define UNDEF_IllegalMode \
   state->EndCondition = UNDEF_BadInstruction ; \
   state->ErrorCode = UNDEFNUM_IllegalMode

#define UNDEF_Prog32SigChange \
   if (!state->Prog32Pin) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Prog32SigChange ; \
      }

#define UNDEF_Data32SigChange \
   if (!state->Data32Pin) { \
      state->EndCondition = UNDEF_BadInstruction ; \
      state->ErrorCode = UNDEFNUM_Data32SigChange ; \
      }

#define UNDEF_ReservedMult \
   state->EndCondition = UNDEF_BadInstruction; \
   state->ErrorCode = UNDEFNUM_ReservedMult

#define UNDEFNUM_Test                   1
#define UNDEFNUM_Shift                  2
#define UNDEFNUM_MSRPC                  10
#define UNDEFNUM_MRSPC                  11
#define UNDEFNUM_MULPCDest              20
#define UNDEFNUM_MULDestEQOp1           21
#define UNDEFNUM_ReservedMult           22
#define UNDEFNUM_LSRBPC                 30
#define UNDEFNUM_LSRBaseEQOffWb         31
#define UNDEFNUM_LSRBaseEQDestWb        32
#define UNDEFNUM_LSRPCBaseWb            33
#define UNDEFNUM_LSRPCOffWb             34
#define UNDEFNUM_LSMNoRegs              50
#define UNDEFNUM_LSMPCBase              51
#define UNDEFNUM_LSMUserBankWb          52
#define UNDEFNUM_LSMBaseInListWb        53
#define UNDEFNUM_SWPPC                  70
#define UNDEFNUM_CoProHS                80
#define UNDEFNUM_MCRPC                  81
#define UNDEFNUM_LSCPCBaseWb            82
#define UNDEFNUM_UndefNotBounced        83
#define UNDEFNUM_IllegalMode            100
#define UNDEFNUM_Prog32SigChange        101
#define UNDEFNUM_Data32SigChange        102

#else

#define UNDEF_Test
#define UNDEF_Shift
#define UNDEF_MSRPC
#define UNDEF_MRSPC
#define UNDEF_MULPCDest
#define UNDEF_MULDestEQOp1
#define UNDEF_LSRBPC
#define UNDEF_LSRBaseEQOffWb
#define UNDEF_LSRBaseEQDestWb
#define UNDEF_LSRPCBaseWb
#define UNDEF_LSRPCOffWb
#define UNDEF_LSMNoRegs
#define UNDEF_LSMPCBase
#define UNDEF_LSMUserBankWb
#define UNDEF_LSMBaseInListWb
#define UNDEF_SWPPC
#define UNDEF_CoProHS
#define UNDEF_MCRPC
#define UNDEF_LSCPCBaseWb
#define UNDEF_UndefNotBounced
#define UNDEF_ShortInt
#define UNDEF_IllegalMode
#define UNDEF_Prog32SigChange
#define UNDEF_Data32SigChange
#define UNDEF_ReservedMult
#endif

#define UNDEF_LSRImm UNDEF_LSRBaseEQDestWb ; \
                     UNDEF_LSRPCBaseWb

#define UNDEF_LSRReg UNDEF_LSRBaseEQOffWb ; \
                     UNDEF_LSRBaseEQDestWb ; \
                     UNDEF_LSRPCBaseWb ; \
                     UNDEF_LSRPCOffWb
