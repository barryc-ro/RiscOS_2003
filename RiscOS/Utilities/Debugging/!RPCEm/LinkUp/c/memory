/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Daniel R Ellis
* Project(s): LinkUpEm (<projectnumber>)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: <A short summary of the purpose and contents of the file.
*           Reference the Design document, etc. that this file implements>
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/

#include "memory.h"
#include "Bus.h"
#include "CommsASB.h"
#include "SystemAPB.h"
#include "utils.h"
#include "swis.h"
#include "wimp.h"
#include "stdlib.h"

// Boot ROM is 512 bytes.
unsigned int _ROM[128];
unsigned int* ROM = _ROM;
unsigned int *SDRAM[2];

// Dual port SRAM is 5120 bytes
unsigned int SRAMSIZE = 5120;
unsigned int _SRAM[1280];
unsigned int* SRAM = _SRAM;
extern char* SRAM_FILE, *ROM_FILE;

// Link up board has 32 M of RAM max.
unsigned int SDRAMSIZE = 8192 * 1024;
unsigned int RAMSIZE;

unsigned int ROMSIZE;

// This is needed for linking purposes.
unsigned int VRAMSIZE;


SDRAM_controller_registers sdram_registers;

#define ByteROM ((unsigned char*) ROM)
#define ByteSDRAM(SELECT) ((unsigned char*) SDRAM[SELECT])
#define ByteSRAM ((unsigned char*) SRAM)

// This is the state of the System Bus.
static BusState state;

static AbortOrNot SystemASB_clock (BusState* state);


/*
  Returns 0 on success, 1 otherwise.
 */
int initialise_memory_management(void *state)
{
  /* The memory is centred around 0x0fffffff so during accesses we need to
  identify whether we're accessing an odd or even bank */
  SDRAM[0] = dynalloc (SDRAMSIZE, "LinkUp DRAM1");
  if (SDRAM[0] == 0) {
    fout ("Failed to allocate dynamic area for DRAM1\n");
    exit (1);
  }
  SDRAM[1] = dynalloc (SDRAMSIZE, "LinkUp DRAM2");
  if (SDRAM[1] == 0) {
    fout ("Failed to allocate dynamic area for DRAM2\n");
    exit (1);
  }

//  ROMSIZE = file_size(ROM_FILE);
  RAMSIZE = SDRAMSIZE * 2;

  if (file_size (SRAM_FILE) != -1) {
    SRAM = file_load (SRAM_FILE);
  }

  ROMSIZE = file_size(ROM_FILE);
  if (ROMSIZE != -1) {
    _swix(Hourglass_On,0);
    if ((ROMSIZE == 0) || !(ROM = file_load(ROM_FILE))) {
      _swix(Hourglass_Off,0);
      _swix(Wimp_ReportError, _IN(0), "    Can't Load ROM");
      return 1;
    }
  }

    return SystemAPB_init () || CommsASB_init ();
}


int
memory_store_byte (unsigned int val, unsigned int ad)
{
    // Setup the bus
    state.address       = ad;
    state.data          = val;
    state.byte          = 1;
    state.write         = 1;

    // Clock the system ASB.
    return SystemASB_clock (&state);
}

int
memory_store_word (unsigned int val, unsigned int ad)
{
    // Setup the bus
    state.address       = ad;
    state.data          = val;
    state.byte          = 0;
    state.write         = 1;

    // Clock the system ASB.
    return SystemASB_clock (&state);
}

int
memory_load_byte (unsigned char* val, unsigned int ad)
{
    int ret;

    // Setup the bus
    state.address       = ad;
    state.byte          = 1;
    state.write         = 0;

    // Clock the system ASB.
    ret = SystemASB_clock (&state);

    // Only write back data if we succeeded.
    if (ret == DataSuccess) *val = state.data;

    return ret;
}

int
memory_load_word (unsigned int* val, unsigned int ad)
{
    int ret;

    // Setup the bus
    state.address       = ad;
    state.byte          = 0;
    state.write         = 0;

    // Clock the system ASB.
    ret = SystemASB_clock (&state);

    // Only write back data if we succeeded.
    if (ret == DataSuccess) *val = state.data;

    return ret;
}

static first_time = 1;


static AbortOrNot
SystemASB_clock (
    BusState* state
) {
    // Switch according to the top nybble
    switch (state->address & L7205_MEM_SEL) {
    case L7205_SRAM_ROM:
    case L7205_SRAM_PCCARD1:
    case L7205_SRAM_PCCARD2:
    case L7205_SRAM_PCCARD3:
        // For the moment we just want to jump straight to SRAM so we always
        // put this on the data lines regardless.
        // E3A0F206 : MOV     PC,#&60000000, i.e. move pc to sram.
        if (first_time = 0) {
            replay_regs ();
            exit (1);
        }
        state->data = 0xe3a0f206;
        first_time = 0;
        break;

    case L7205_ON_CHIP_SRAM1:
    case L7205_ON_CHIP_SRAM2:
        if ((state->address & 0xffff) > SDRAMSIZE) {
            replay_regs ();
            fout ("Illegal memory access\n");
            return DataAbort;
        }
        if (state->write)
        {
            if (state->byte)
            {
                BYTEACCESS(SRAM, state->address & 0xffff) =
                    state->data;
            } else {
                WORDACCESS(SRAM, state->address & 0xffff) =
                    state->data;
            }
        } else {
            state->data = MEMACCESS(SRAM,
                                    state->address & 0xffff,
                                    state->byte);
        }
        break;

    case L7205_COMMS_ASB_BRIDGE:
        return CommsASB_clock (state);
        break;

    case L7205_SYSTEM_APB_BRIDGE:
        return SystemAPB_clock (state);
        break;

    case L7205_RESERVED2:
    case L7205_RESERVED3:
    case L7205_RESERVED4:
        fout ("Attempt to %s from reserved address area %x\n",
            state->byte? "load": "store", state->address);
        return DataAbort;
        break;

    case L7205_SDRAM_INT_REGISTERS:
        // use the bottom 8 bits to address the registers - ignore the
        // byte assert.
        if (state->write) {
            WORDACCESS(&sdram_registers, state->address & 0xff) = state->data;
        } else {
            state->data = BYTEACCESS(   &sdram_registers,
                                        state->address & 0xff);
        }
        break;

    case L7205_SDRAM_MODE_REG:
        fout ("Acessing SDRAM mode register at %x\n", state->address);
//    replay_regs ();
        break;

    case L7205_SDRAM:
        {
            // Decode the ram bank select line.
            int ram_select = ((state->address & L7205_SDRAM_SELECT) != 0);

            // Calculate the offset into ram.
            int ram_index = state->address & (SDRAMSIZE - 1);

            if (state->write) {
                if (state->byte)
                {
                    BYTEACCESS(SDRAM[ram_select], ram_index) = state->data;
                } else {
                    WORDACCESS(SDRAM[ram_select], ram_index) = state->data;
                }
            } else {
                state->data = MEMACCESS(SDRAM[ram_select],
                                        ram_index,
                                        state->byte);
            }
        }
        break;

    default:
        // All cases are covered.
        abort ();
    }

    return DataSuccess;
}



void dump_memory (void) {
}

void db_memory(int v, void *state)
{}



/*****************************************************************************
* END OF FILE
*****************************************************************************/
