/* Interface to the Monochrome LCD of the L7205
 * Thu 27th July 2000 DR Ellis
 */

#include "MLCD.h"
#include "wimp.h"
#include "utils.h"
#include "HW.video.h"


MLCD mlcd;

int VIDEOENABLE = 1;
char byte_reverse[255];

static void update_video ()
{
    video_hen ((mlcd.pixels + 1) * 16);
    video_ven (mlcd.lines + 1);
    video_bpp (mlcd.bpp);
}

int
MLCD_init ()
{
    int i;
    fout ("Initialising MLCD\n");
    /* Pretend we've always reached the end of the line */
    mlcd.enable = 1;
    mlcd.eof = 1;
    mlcd.sram = 1;

    /* For the MLCD, these settings will always hold */
    video_border (0);
    video_hires (0);
    video_pptr (0);
    video_hst (0);
    video_vst (0);
    video_palette (0);
    video_palette (0xffffff00);

    /* quick and kludgy */
    for (i = 0; i < 255; ++i) {
        byte_reverse[i] =
            (i & 0x80) >> 7 |
            (i & 0x40) >> 5 |
            (i & 0x20) >> 3 |
            (i & 0x10) >> 1 |
            (i & 0x08) << 1 |
            (i & 0x04) << 3 |
            (i & 0x02) << 5 |
            (i & 0x01) << 7 ;
    }

    return 0;
}

#define BIT(DATA,B) ((DATA >> B) & 1)

AbortOrNot
MLCD_clock (
    BusState*   state
) {
    /* Check that the address is legal */
    if (state->address >= sizeof (mlcd))
    {
        fout ("Illegal memory access to MLCD %x\n", state->address);
        return DataAbort;
    }

    /* Act on the memory write */
    if (state->write)
    {
        WORDACCESS(&mlcd, state->address) = state->data;
        if (state->address == 0) update_video ();
        mlcd.eof = 1;
        mlcd_update ();
    } else {
        state->data = WORDACCESS(&mlcd, state->address);
    }

    return DataSuccess;
}

unsigned int
MLCD_translate (
    unsigned int    ch
) {
    if ((mlcd.MLCDTIMING0 & 1) == 0) return ch;
    return (byte_reverse[(ch & 0xff000000) >> 24] << 24) |
           (byte_reverse[(ch & 0x00ff0000) >> 16] << 16) |
           (byte_reverse[(ch & 0x0000ff00) >> 8 ] << 8 ) |
           (byte_reverse[(ch & 0x000000ff) >> 0 ] << 0 ) ;
}
