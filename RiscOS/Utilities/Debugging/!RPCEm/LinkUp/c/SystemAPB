/* Interface to the SystemAPB of the L7205
 * Tue 25th July 2000 DR Ellis
 */
#include "SystemAPB.h"
#include "utils.h"
#include "memory.h"
#include <stdio.h>
#include <string.h>

char Timer[0xff];

unsigned int GPIO[0xff];


Bus systemAPB;

int SystemAPB_init (void) {
    fout ("Initialising SystemAPB\n");
    memset (GPIO, 0, sizeof GPIO);
    return 0;
}

AbortOrNot
SystemAPB_clock (
    BusState*   state
) {
    systemAPB.state = *state;

    switch (state->address & L7205_SYSTEM_APB_BRIDGE_MASK) {
    case L7205_INT_BASE:        break;
    case L7205_RTC_BASE:        break;

    case L7205_TIMER_BASE:
        if (state->write)
        {
            Timer[state->address & 0xff] = state->data;
        } else {
            state->data = Timer[state->address & 0xff];
        }
        break;

    case L7205_KEYBOARD_BASE:   break;
    case L7205_GPIO_BASE:
        if (state->write)
        {
            GPIO[state->address & 0xff] = state->data;
        } else {
                state->data = GPIO[state->address & 0xff];
                if ((state->address & 0xff) == 0x80) state->data = 0xff;
        }
        break;
    case L7205_DC_BASE:         break;
    case L7205_SMIREG_BASE:     break;
    default:
        fout ("Unmapped SystemAPB access\n");
        return DataAbort;
        break;
    }

    /* Write data back to calling bus */
    state->data = systemAPB.state.data;

    WATCH_BUS(systemAPB);
    return DataSuccess;
}

void IOMD_tick (int num) {
}
