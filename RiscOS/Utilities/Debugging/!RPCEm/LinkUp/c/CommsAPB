/* Interface to the CommsAPB of the L7205
 * Tue 27th July 2000 DR Ellis
 */
#include "CommsAPB.h"
#include "MLCD.h"
#include "utils.h"
#include "memory.h"
#include <stdio.h>

char CLCDRegs[0x800];

int CommsAPB_init (void) {
    fout ("Initialising CommsAPB\n");
    return MLCD_init ();
}

BusState commsAPB;

AbortOrNot
CommsAPB_clock (
    BusState*   state
) {
    int ret;
    /* Copy accross the bus state and mask out irrelevant bits */
    commsAPB = *state;
    commsAPB.address &= L7205_COMMS_APB_ADDRESS_MASK;

    /* Pass on to the relevant function */
    switch (state->address & L7205_COMMS_APB_BRIDGE_MASK) {
    case L7205_SIB_BASE:            break;
    case L7205_SSP1_BASE:           break;
    case L7205_SPISLAVE:            break;
    case L7205_SSP2_BASE:           break;
    case L7205_UART1_BASE:          break;
    case L7205_UART2_BASE:          break;
    case L7205_IR_BASE:             break;
    case L7205_DMACTRL_BASE:        break;
    case L7205_MLCD_BASE:           ret = MLCD_clock (&commsAPB);   break;
    case L7205_CLCD_BASE:
        if (state->write)
            WORDACCESS(CLCDRegs, state->address & 0x7ff) = state->data;
        else
            state->data = WORDACCESS(CLCDRegs, state->address & 0x7ff);
        break;

    case L7205_MMC_BASE:            break;
    case L7205_USB_FUNCTION_BASE:   break;
    case L7205_SIC_BASE:            break;
    default:
        fout ("Unmapped CommsAPB access\n");
        return DataAbort;
        break;
    }

    /* Write data back to calling bus */
    state->data = commsAPB.data;

//    fout ("CommsAPB %s %x %x\n", state->write? "write": "read", state->address, state->data);
    return DataSuccess;
}
