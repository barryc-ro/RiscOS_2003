// GUI.c

#ifdef __acorn
#include "toolbox.h"
#include "window.h"
#include "saveas.h"
#include "iconbar.h"
#include "wimplib.h"
#include "event.h"
#include "swis.h"
#include "^.mlcd.h"
#endif

#include <stdio.h>
#include "utils.h"

#include "^.CommsAPB.h"
#include "^.CommsASB.h"
#include "^.memory.h"
#include "^.SystemAPB.h"

static _kernel_oserror* error_pointer;
#define ER(EXP) \
{if (error_pointer = (EXP)) \
    fout ("Error at line %d: %s\n", __LINE__, error_pointer->errmess);}

//#include "^.HW.hwstate.h"
extern unsigned int RAMSIZE;
extern int vidup;

#ifdef __acorn

int *keys_buffer;
int key_buffer_size;
volatile int *key_pos;

/*
 * This is an array which helps convert RISC OS key codes into PC-AT
 * keyboard codes as expected by the keyboard driver.
 */

static int key_array[128] =     {0x76,5,6,4,12,3,11,0x83,10,1,9,0x78,7,
                                0x7f,0x7e,0x7f,
                                14,0x16,0x1e,0x26,0x25,0x2e,0x36,0x3d,0x3e,0x46,0x45,0x4e,0x55,0x66,0x66,
                                0xe070,0xe06c,0xe07d,0x77,0xe04a,0x7c,0x7b,
                                0xd,0x15,0x1d,0x24,0x2d,0x2c,0x35,0x3c,0x43,0x44,0x4d,0x54,0x5b,0x5d,
                                0xe071,0xe069,0xe07a,0x6c,0x75,0x7d,0x7b,
                                0x14,0x1c,0x1b,0x23,0x2b,0x34,0x33,0x3b,0x42,0x4b,0x4c,0x52,0x5a,
                                0x6b,0x73,0x74,0x79,
                                0x12,0x61,0x1a,0x22,0x21,0x2a,0x32,0x31,0x3a,0x41,0x49,0x4a,0x59,
                                0xe075,0x69,0x72,0x7a,
                                0x58,0x11,0x29,0xe011,0xe014,
                                0xe06b,0xe072,0xe074,0x70,0x71,0xe05a
                                };
int last_key;

extern ToolboxEventHandler setup_save;
extern WimpMessageHandler video_mode_change;

extern int curmove,curchange;

// Added to make it compile...
int curmove = 0;
int curchange = 0;

int vidupdates = 10;
ObjectId status;
ObjectId memory;
ObjectId mlcdstatus = 0;
ObjectId busstatus = 0;
int wimpst;

int multi = 100;
int quit =0;
int mouse_state=7;

int quit_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  quit = 1;
  return Handled;
}

int display;
int leds[4];
int ledvalue=7;

void gui_set_leds(int value)
{
  ledvalue = value;
}

int fake;
int lose_caret(int event_code, WimpPollBlock *event, IdBlock *id_block,void *handle)
{
  if (keys_buffer) {
    fake = *key_pos;   // so that we get what's left
    key_pos = &fake;
    //fout ("Losing keys\n");
    _swix(0x84341,0);
  }
  return Handled;
}

int click_window(int event_code, WimpPollBlock *event, IdBlock *id_block,void *handle)
{
  wimp_set_caret_position(display,-1,0,0,1<<25,0);
  if (!keys_buffer || key_pos == &fake) {
    _swix(0x84340,_OUT(0)|_OUT(1)|_OUT(2),&keys_buffer,&key_buffer_size,&key_pos);
    //fout("Support: kb = %x, size = %d, &pos = %x\n",keys_buffer,key_buffer_size,key_pos);
    last_key =0;
  }
  return Handled;
}

int disp_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void* handle)
{
  if (handle) {
    display = 0;
    lose_caret(0,0,0,0);
    iconbar_set_sprite(0,id_block->ancestor_id,"!rpcem");
    event_deregister_wimp_handler(id_block->self_id,Wimp_EMouseClick,click_window,0);
  }
  else {
    int i;
    iconbar_set_sprite(0,id_block->ancestor_id,"!rpcem2");
    window_get_wimp_handle(0,id_block->self_id,&display);
    window_get_tool_bars(2,id_block->self_id,0,&status,0,0);
    for (i=2;i<5;i++) gadget_get_icon_list(0,status,i,&leds[i-2],8,0);
    window_get_wimp_handle(0,status,&wimpst);
    event_register_wimp_handler(id_block->self_id,Wimp_EMouseClick,click_window,0);
  }
  return Handled;
}

int break_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  ;//put_fifo(0xe1);
  ;//put_fifo(0x14);
  ;//put_fifo(0x77);
  ;//put_fifo(0xe1);
  ;//put_fifo(0xf0);
  ;//put_fifo(0x14);
  ;//put_fifo(0xf0);
  ;//put_fifo(0x77);
  return Handled;
}

int ticker=10;
int config_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  numberrange_set_value(0,id_block->self_id,1,multi);
  numberrange_set_value(0,id_block->self_id,5,RAMSIZE/1024);
  numberrange_set_value(0,id_block->self_id,9,vidupdates);
  numberrange_set_value(0,id_block->self_id,13,ticker);
  return Handled;
}

ObjectId ios;

int ios_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  ios = id_block->self_id;
  return Handled;
}

static int new_RAMSIZE;

int got_error (int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  wimp_report_error((_kernel_oserror*) &((ToolboxErrorEvent*) event)->errnum,0,0);
  return Handled;
}

int memdisp_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void* handle)
{
  if (handle) memory = 0;
  else {
    extern int MMUON;
    unsigned int flags;
    memory = id_block->self_id;
    gadget_get_flags(0,memory,4,&flags);
    if (MMUON) flags &= ~Gadget_Faded;
    else flags |= Gadget_Faded;
    gadget_set_flags(0,memory,4,flags);
  }

  return Handled;
}

void mlcd_update (void) {
    if (mlcdstatus) {
        char buf[10];
        ER(displayfield_set_value (0, mlcdstatus, 6,mlcd.enable?"Yes":"No"));
        ER(displayfield_set_value (0, mlcdstatus, 7, mlcd.sram?"Yes":"No"));
        ER(numberrange_set_value (0, mlcdstatus, 4, mlcd.lines + 1));
        ER(numberrange_set_value (0, mlcdstatus, 5, (mlcd.pixels + 1) * 16));
        sprintf (buf, "&%8x", mlcd.MLCDBASE);
        ER(displayfield_set_value (0, mlcdstatus, 9, buf));
    }
}

int mlcddisp_event (int event_code, ToolboxEvent *event, IdBlock *id_block,void* handle)
{
    fout ("Displaying MLCD window\n");
    mlcdstatus = id_block->self_id;
    mlcd_update ();

    return Handled;
}

Bus* busses[4] = {&systemASB, &systemAPB, &commsASB, &commsAPB};
Bus obusses[4];

void
busstate_update_field (
    int             value,
    unsigned int*   ovalue,
    ComponentId     cid
) {
    static char buf[9];
    if (value == *ovalue) return;
    *ovalue = value;
    if ((cid & 0xf0) == 0x30) sprintf (buf, "%d", value);
    else  sprintf (buf, "%08.X", value);
    ER(displayfield_set_value (0, busstatus, cid, buf));
}

void
busstate_update (void) {
    int i;
    for (i = 0; i < 4; ++i) {
        int write = busses[i]->state.write;
        int byte = busses[i]->state.byte;
        busstate_update_field ( busses[i]->state.address,
                                &(obusses[i].state.address),
                                0x10 + i);
        busstate_update_field ( busses[i]->state.data,
                                &(obusses[i].state.data),
                                0x20 + i);
        if (byte != obusses[i].state.byte) {
            obusses[i].state.byte = byte;
            /* Turn the button red or grey accordingly */
            ER(button_set_flags (0, busstatus, 0x50 + i,
                0x0f000000, byte? (11 << 24): (1 << 24)));
        }

        if (write != obusses[i].state.write) {
            obusses[i].state.write = write;
            /* Turn the button red or grey accordingly */
            ER(button_set_flags (0, busstatus, 0x40 + i,
                0x0f000000, write? (11 << 24): (1 << 24)));
        }

        busstate_update_field ( busses[i]->stats.clocks,
                                &(obusses[i].stats.clocks),
                                0x30 + i);
    }
}

int
busstate_reset (
    int             event_code,
    ToolboxEvent*   event,
    IdBlock*        id,
    void*           handle
) {
    int i = id->ancestor_component;
    busses[i]->stats.clocks = 0;
    obusses[i].state.address = -1;
    obusses[i].state.data = -1;
    ER(displayfield_set_value (0, busstatus, 0x10 + i, "-"));
    ER(displayfield_set_value (0, busstatus, 0x20 + i, "-"));

    return Handled;
}

int
busstate_watch (
    int             event_code,
    ToolboxEvent*   event,
    IdBlock*        id,
    void*           handle
) {
    static char buf[9];
    ER(writablefield_get_value (0, id->self_id, 2, buf, 9, 0));
    sscanf (buf, "%x", &busses[id->ancestor_component]->stats.mask);
    ER(writablefield_get_value (0, id->self_id, 3, buf, 9, 0));
    sscanf (buf, "%x", &busses[id->ancestor_component]->stats.value);

    return Handled;
}

int
busstate_clock (
    int             event_code,
    ToolboxEvent*   event,
    IdBlock*        id,
    void*           handle
) {
    static char buf[9];
    int byte, write;
    ComponentId cid = id->self_component;
    ComponentId acid = id->ancestor_component;
    writablefield_get_value (0, id->self_id, 2, buf, 9, 0);
    sscanf (buf, "%x", &busses[acid]->state.address);
    optionbutton_get_state (0, id->self_id, 6, &byte);
    optionbutton_get_state (0, id->self_id, 7, &write);
    if (write) {
        ER(writablefield_get_value (0, acid, 2, buf, 9, 0));
        sscanf (buf, "%x", &busses[acid]->state.address);
    }

    busses[acid]->state.byte = byte;
    busses[acid]->state.write = write;

    return Handled;
}

int
busstate_event (
    int             event_code,
    ToolboxEvent*   event,
    IdBlock*        id_block,
    void*           handle
) {
    switch (event_code) {
    case 0x500:
        busstatus = id_block->self_id;
        busstate_update ();
        break;
    case 0x501:
        busstatus = 0;
        break;
    }

    return Handled;
}

int
uart_load (WimpMessage *message,void *handle) {

    fout ("data loaded: %s\n", message->data.data_load.leaf_name);
    /* at some point make sure this is secure... */
    if (busstatus) {
        ER(displayfield_set_value (0, busstatus, 0x3c,
            message->data.data_load.leaf_name));
    }

    return Handled;
}


void update_memory_gui(void)
{
  extern int MMUON;
  unsigned int flags;
  if (!memory) return;

  gadget_get_flags(0,memory,4,&flags);
  if (MMUON) flags &= ~Gadget_Faded;
  else flags |= Gadget_Faded;
  gadget_set_flags(0,memory,4,flags);

}

int lookup_event (int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  char in[16],out[16];
  int log,byte;
  unsigned char bytev;
  unsigned int val,addr=0;

  ER(writablefield_get_value(0,id_block->self_id,1,in,16,0));
  ER(optionbutton_get_state(0,id_block->self_id,4,&log));
  ER(optionbutton_get_state(0,id_block->self_id,5,&byte));

  sscanf(in,"%x",&addr);

  if (byte) {
    load_byte(&bytev,addr);
    sprintf(out,"0x%02X",bytev);
  }
  else {
    load_word(&val,addr);
    sprintf(out,"0x%08X",val);
  }

  ER(displayfield_set_value(0,id_block->self_id,3,out));
  return Handled;
}

int update_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  numberrange_get_value(0,id_block->self_id,1,&multi);
  numberrange_get_value(0,id_block->self_id,5,&new_RAMSIZE);
  numberrange_get_value(0,id_block->self_id,9,&vidupdates);
  numberrange_get_value(0,id_block->self_id,13,&ticker);
  return Handled;
}

int freeze = 0;

int freeze_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  freeze = ((OptionButtonStateChangedEvent*) event)->new_state;
  return Handled;
}

int reset_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  glue_reset_cpu();
//  IOMD_reset(0);
  return Handled;
}

int por_event(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  glue_reset_cpu();
//  IOMD_reset(1);
  return Handled;
}

int quit_message(WimpMessage *message,void *handle)
{
  quit = 1;
  return Handled;
}

int __swi(OS_ReadMonotonicTime) ticks(void);

int redraw_window(int event_code, WimpPollBlock *event,IdBlock *id_block,void *v)
{
   int more;
   WimpRedrawWindowBlock block;

   block.window_handle = event->redraw_window_request.window_handle;

   wimp_redraw_window(&block,&more);
   while (more)
   {
      render_screen(&block);
//      if (!curmove) render_pointer(&block,0);
      wimp_get_rectangle (&block,&more);
   }

   /* claimed */

   return Handled;
}

void set_led(int win,int icon,int st)
{
   WimpSetIconStateBlock on = {0,0,0xaa000000u,0xff000000u};
   on.window_handle = win;
   on.icon_handle = icon;
   if (!st) on.EOR_word = 0x77000000u;
   wimp_set_icon_state(&on);
}

void update_screen(WimpRedrawWindowBlock *upd, int cursor)
{
  int more;
  upd->window_handle = display;
  if (cursor & 16) {
    wimp_force_redraw(display,upd->visible_area.xmin,upd->visible_area.ymin,
                        upd->visible_area.xmax,upd->visible_area.ymax);
    return;
  }
  if(wimp_update_window(upd,&more)) return;
  while (more)
  {
      render_screen(upd);
//      if (cursor & 2) render_pointer(upd,cursor & 4);
      if(wimp_get_rectangle (upd,&more)) break;
  }
}

int wimp_messages[] = {Wimp_MModeChange, Wimp_MDataLoad, 0};
int toolbox_events[] = {1,100,101,102,150,300,400,401,500,550,900,901,1001,0x400,SaveAs_AboutToBeShown,0x500, 0x501, 0x502, 0x503, 0x504,0};

int wimp_armul8(int fast)
{
  MessagesFD     messages;
  IdBlock        id_block;
  int lastt;
  int old_leds = 7;

  toolbox_initialise (0, 310, wimp_messages, toolbox_events, "<RPE$Dir>.LinkUp.GUI",
                        &messages, &id_block, 0, 0, 0);

  event_initialise (&id_block);

  event_set_mask (0);

  event_register_toolbox_handler(-1,1,quit_event,0);
  event_register_message_handler(Wimp_MQuit,quit_message,0);
//  event_register_message_handler(Wimp_MModeChange,video_mode_change,0);
  event_register_wimp_handler(-1,Wimp_ERedrawWindow,redraw_window,0);
  event_register_wimp_handler(-1,Wimp_ELoseCaret,lose_caret,0);
  event_register_toolbox_handler(-1,100,config_event,0);
  event_register_toolbox_handler(-1,101,reset_event,0);
  event_register_toolbox_handler(-1,102,por_event,0);
  event_register_toolbox_handler(-1,150,ios_event,0);
  event_register_toolbox_handler(-1,300,update_event,0);
  event_register_toolbox_handler(-1,400,disp_event,0);
  event_register_toolbox_handler(-1,401,disp_event,(void *)1);
  event_register_toolbox_handler(-1,500,freeze_event,0);
  event_register_toolbox_handler(-1,550,break_event,0);
  event_register_toolbox_handler(-1,1001,lookup_event,0);
  event_register_toolbox_handler(-1,SaveAs_AboutToBeShown,setup_save,0);
  event_register_toolbox_handler(-1,Toolbox_Error,got_error,0);
  event_register_toolbox_handler(-1,900,memdisp_event,0);
  event_register_toolbox_handler(-1,901,memdisp_event,(void *)1);
  event_register_toolbox_handler(-1,0x400, mlcddisp_event,0);
  event_register_toolbox_handler(-1,0x500, busstate_event,0);
  event_register_toolbox_handler(-1,0x501, busstate_event,0);
  event_register_toolbox_handler(-1,0x502, busstate_reset,0);
  event_register_toolbox_handler(-1,0x503, busstate_watch,0);
  event_register_toolbox_handler(-1,0x504, busstate_clock,0);
  event_register_message_handler(Wimp_MDataLoad, uart_load, 0);

  while(!quit) {
    int v = vidupdates;
    lastt = ticks();
    while (!quit && v--) {
       if (!quit && !freeze)
         run_cpu(multi,ticker);
       else {
         while (freeze && !quit) {
           event_poll_idle(0,0,ticks()+100,0);
//           printer_heartbeat();
         }
       }
       if (!quit) event_poll(0,0,0);
    }
    v = vidupdates;
//    flyback_irq();
//    printer_heartbeat();
//    if (ios) iomd_update_gui(ios);

    if (display && (vidup || curmove || curchange)) {
      WimpRedrawWindowBlock upd;
      WimpGetWindowStateBlock open;
      BBox box;

      if (vidup) {
        int n = screen_change(&box);
        if (n) {
          wimp_set_extent(display,&box);
          open.window_handle = display;
          wimp_get_window_state(&open);
          open.visible_area.xmax = open.visible_area.xmin +box.xmax;
          open.visible_area.ymin = open.visible_area.ymax +box.ymin;
          wimp_open_window((WimpOpenWindowBlock *)&open);
        }
        find_update_box(&upd.visible_area);
        update_screen(&upd,3);
      }
      if (curmove || curchange){
        if (curmove) {
//          get_pointer_pos(&upd.visible_area,1);   // old posn
          update_screen(&upd,1);
        }

//        get_pointer_pos(&upd.visible_area,0);
        update_screen(&upd,6);
      }
      //fout ("Screen changed and vidupdates zero\n");
      if (vidup) reset_update_box();
      vidup = 0;
      curmove = 0;
    }
    lastt = ticks() - lastt;
    if (!quit && status) {
      char buf[128];
      sprintf(buf,"%d Hz, pc=%8.8x, psr=%8.8x, cr=%8.8x",(v*multi*100)/lastt,get_pc(),get_cpsr(),get_cr());
      ER(displayfield_set_value(0,status,0,buf));
      if (old_leds != ledvalue) {
        set_led(wimpst,leds[2],ledvalue & 1);
        set_led(wimpst,leds[0],ledvalue & 2);
        set_led(wimpst,leds[1],ledvalue & 4);
        old_leds = ledvalue;
      }
      if (busstatus) busstate_update ();
    }
    if (!quit && keys_buffer && (last_key != *key_pos)) {
      int key = keys_buffer[last_key];
      int pck = key_array[key & 127];

      if (((key & 127) >= 0x37) && ((key & 127) <= 0x39)) {
#define KEY (key & 127)
#define DOWN (key & 256)

	if (KEY == 0x37) {
//	  mouse_state &= ~LEFT_MOUSE;
//	  if (!DOWN) mouse_state |= LEFT_MOUSE;
	}
	if (KEY == 0x38) {
//	  mouse_state &= ~MIDDLE_MOUSE;
//	  if (!DOWN) mouse_state |= MIDDLE_MOUSE;
	}
 	if (KEY == 0x39) {
//	  mouse_state &= ~RIGHT_MOUSE;
//	  if (!DOWN) mouse_state |= RIGHT_MOUSE;
	}
//        IOMD_mouse(mouse_state);
      } else {
        //fout ("Key = %x\n",key);
        if ((pck >> 8) == 0xe0) ;//put_fifo(0xe0);
        pck &= 255;
        if ((key & 127) < 0x70) {
          if (!(key & 256)) ;//put_fifo(0xf0);               // break;
          ;//put_fifo(pck);
        }
      }
      last_key++;
      if (last_key == key_buffer_size) last_key = 0;
    }

  }
  return (0);

}
#endif

