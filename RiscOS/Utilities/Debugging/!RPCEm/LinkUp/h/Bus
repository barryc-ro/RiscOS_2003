#if !defined(BUS_H) /* file used if not already included */
#define BUS_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Daniel R Ellis
* Project(s): LinUpEmulator (<projectnumber>)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: <A short summary of the purpose and contents of the file.
*           Reference the Design document, etc. that this file implements>
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/


/*****************************************************************************
* MACROS
*****************************************************************************/

/* This macro allows byte addressed word access through arbitrary pointers */
#define WORDACCESS(LOCATION,OFFSET) ((int*) (LOCATION))[(OFFSET)/sizeof (int)]

/* This macro allows byte addressed byte access through arbitrary pointers */
#define BYTEACCESS(LOCATION,OFFSET) ((char*) (LOCATION))[(OFFSET)]

/* Allow either word or byte access */
#define MEMACCESS(LOC,OFF,BYTE) (BYTE)?BYTEACCESS(LOC,OFF):WORDACCESS(LOC,OFF)


/*****************************************************************************
* New type definitions
*****************************************************************************/

/* This structure is for defining the state of the bus.  It can be read from
   and perhaps written to during a read operation.
   */
typedef struct {
    unsigned int    address;
    unsigned int    data;
    int             byte:1;      // If true then this is a byte operation.
    int             write:1;     // If true then this is a write operation
} BusState;

/* This is the return value from the bus calls.  It simulates asserting a
   data/prefetch abort on the processor.
   */
typedef enum {
    DataSuccess,
    DataAbort
} AbortOrNot;

#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
