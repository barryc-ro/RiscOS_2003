#include "stdio.h"
#include "utils.h"

#ifdef __acorn
#include "kernel.h"
#include <swis.h>
#endif

#include "string.h"
#include "stdlib.h"
#include "stdarg.h"

#ifdef __acorn
#include "wimp.h"
#include "wimplib.h"
#endif

#include "memory.h"

//#define DEBUGTA 1

extern char* ROM_FILE;

unsigned int *ROM;
unsigned int *RAM;
#define ByteROM ((unsigned char*) ROM)
#define ByteRAM ((unsigned char*) RAM)

unsigned int VIDEOSTART = 0xffffffffu;
unsigned int VIDEOEND = 0u;
unsigned int VIDEORESET = 0u;
unsigned int VIDEOINC = 0;
unsigned int DRAMVIDEO = 0;

extern unsigned int CURSTART;
extern int curchange;

unsigned int ROMSIZE;
unsigned int RAMSIZE=4096*1024;
unsigned int VRAMSIZE = 0;
#define VOFF (RAMSIZE/4)

// if POST adpater installed, then A23 is pulsed
#define TAPULSE (1<<23)


/*
  Returns 0 on success, 1 otherwise.
 */
int initialise_memory_management(void *state)
{
  int i;
  WimpSysInfo inf;
  ROMSIZE = file_size(ROM_FILE);

  _swix(Hourglass_On,0);
  if ((ROMSIZE == 0) || !(ROM = file_load(ROM_FILE))) {
    _swix(Hourglass_Off,0);
    _swix(Wimp_ReportError, _IN(0), "    Can't Load ROM");
    return 1;
  }

  for (i = 1; i<ROMSIZE; i = i*2);
  ROMSIZE = i;

  RAM = dynalloc(RAMSIZE+VRAMSIZE,VRAMSIZE? "Risc PC VRAM/DRAM":"Risc PC DRAM");
  if (!RAM) {
    _swix(Hourglass_Off,0);
    return 1;
  }

  for (i = 0; i<RAMSIZE/4;i++) RAM[i] = 0x0;

  printf("RAM at %x\n",(int) RAM);
#ifdef __acorn
  wimp_read_sys_info(5,&inf);
  printf("Task handle %x\n",inf.r0);
#endif
  _swix(Hourglass_Off,0);

  COMBO_init();
  return IOMD_init(1);
}

#define VIDOFF (DRAMVIDEO ? 16: VIDEOINC*256)

int memory_store_byte(unsigned int val,unsigned int ad)
{

   if (ad >= VIDEOSTART && ad < (VIDEOEND+VIDOFF)) video_writeb(ad-VIDEOSTART,val);
   else if (ad >= VIDEORESET && ad < VIDEOSTART) video_writeb(ad - VIDEORESET + VIDEOEND - VIDEOSTART +VIDOFF,val);

#if 0
   if ((ad <0x01000000) && (ad & TAPULSE)) return write_test_adapter(val);
#endif

   if (ad >= DRAM_START && ad < DRAM_END) {
     ByteRAM[(ad&(RAMSIZE-1))] = val;
     if ((ad >= CURSTART) && ad < (CURSTART+32768)) curchange = 1;
     return 0;
   }
   if (ad >= 0x02000000 && ad <(0x02000000 +VRAMSIZE)) {
     ByteRAM[RAMSIZE+(ad&(VRAMSIZE-1))] = val;
     if ((ad >= CURSTART) && ad < (CURSTART+32768)) curchange = 1;
     return 0;
   }
   //if (ad >= 0x03000000 && ad < 0x04000000) return IO_store(val,ad,1);
   if ((ad & 0xffff0000) == 0x03200000) {
     IOMDWriteByte(ad,val);
     return 0;
   }
   if ((ad & 0xffff0000) == 0x03010000) {
     COMBOWrite(ad,val,1);
     return 0;
   }
   if ((ad & 0xfffff000) == 0x0302a000) {
     floppy_dma_write(val,1);    // TC for floppy DMA
     return 0;
   }

   if ((ad & 0xf8000000) == 0x08000000) {
     EASIWrite(ad,val,1);
     return 0;
   }
   // shouldn't use byte writes to VIDC
   //else if ((addr & 0xffff0000) == 0x03400000) VIDCWriteByte(ad,val);

   //else fout("Byte Store to phys address %x = %02x\n",ad,val);

   return 0;
}

/*
 * store_word() stores data at address addr. Returns 0 on success, 1 otherwise.
 */
int memory_store_word(unsigned int data,unsigned int addr)
{
   if (addr >= VIDEOSTART && addr < (VIDEOEND+VIDOFF)) video_writew(addr- VIDEOSTART,data);
   else if (addr >= VIDEORESET && addr < VIDEOSTART) video_writew(addr - VIDEORESET + VIDEOEND - VIDEOSTART + VIDOFF,data);

#if 0
   if ((addr <0x01000000) && (addr & TAPULSE)) return write_test_adapter(data);
#endif
   if (addr >= DRAM_START && addr < DRAM_END) {
     RAM[(addr&(RAMSIZE-1))/4] = data;
     if ((addr >= CURSTART) && addr < (CURSTART+32768)) curchange = 1;
     return 0;
   }
   if (addr >= 0x02000000 && addr <(0x02000000 +VRAMSIZE)) {
     RAM[VOFF+(addr&(RAMSIZE-1))/4] = data;
     if ((addr >= CURSTART) && addr < (CURSTART+32768)) curchange = 1;
     return 0;
   }

   if ((addr & 0xffff0000) == 0x03200000) {
     IOMDWrite(addr,data);
     return 0;
   }
   if ((addr & 0xffff0000) == 0x03400000) {
     VIDCWrite(addr,data);
     return 0;
   }
   if ((addr & 0xffff0000) == 0x03010000) {
     COMBOWrite(addr,data,0);
     return 0;
   }
   if ((addr & 0xf8000000) ==  0x08000000) {
     EASIWrite(addr,data,0);
     return 0;
   }
   //if (MMUON) fout("leaving store word\n");

  return 0;
}



/*
 * load_word() loads data from address addr. Returns 0 on success, 1 otherwise.
 */
int memory_load_word(unsigned int *data,unsigned int ad)
{
#ifdef DEBUGTA
   read_test_adapter(0);
   if ((ad <0x01000000) && (ad & TAPULSE) &&  read_test_adapter(1)) {*data = 0xffffffffu; return 0;}
#endif
   if (ad <0x02000000) *data = ROM[(ad&(ROMSIZE-1))/4];
   else if (ad >= DRAM_START && ad < DRAM_END) *data = RAM[(ad&(RAMSIZE-1))/4];
   else if (ad >= 0x02000000 && ad <(0x02000000 +VRAMSIZE)) *data = RAM[VOFF+(ad&(RAMSIZE-1))/4];
   else if (((ad & 0xffff0000) == 0x03200000) || ((ad & 0xffff0000) == 0x03310000)) *data = IOMDRead(ad);
   else if ((ad & 0xffff0000) == 0x03400000) *data = VIDCRead(ad);
   else if ((ad & 0xffff0000) == 0x03010000) *data = COMBORead(ad,0);
   else if ((ad & 0xf8000000) == 0x08000000) *data = EASIRead(ad,0);
   else {
      *data = 0xffffffffu;
      fout("Access to phys address %x\n",ad);
   }

   return 0;
}


/*
 * load_byte() loads one byte from the given location with the offset given
 * in off from addr. Returns 0 on success otherwise 1 is returned.
 */
int memory_load_byte(unsigned char *byte,unsigned int  ad)
{

#ifdef DEBUGTA
   read_test_adapter(0);
   if ((ad <0x01000000) && (ad & TAPULSE) &&  read_test_adapter(1)) {*byte = 0xff; return 0;}
#endif
   if (ad <0x02000000) *byte = ByteROM[(ad&(ROMSIZE-1))];
   else if (ad >= DRAM_START && ad < DRAM_END) *byte = ByteRAM[(ad&(RAMSIZE-1))];
   else if (ad >= 0x02000000 && ad <(0x02000000 +RAMSIZE)) *byte = ByteRAM[RAMSIZE+(ad&(RAMSIZE-1))];
   else if (((ad & 0xfff00000) == 0x03200000) ||  ((ad & 0xffff0000) == 0x03310000)) *byte = IOMDReadByte(ad);
   else if ((ad & 0xffff0000) == 0x03010000) *byte = COMBORead(ad,1);
   else if ((ad & 0xf8000000) == 0x08000000) *byte = EASIRead(ad,1);
   else if ((ad & 0xfffff000) == 0x0302a000) *byte = floppy_dma_read(1);    // TC for floppy DMA
   else {
     *byte =  0xff;
     fout("Byte Access to phys address %x\n",ad);
   }
   return 0;
}

void dump_memory(void)
{}

db_memory(int v, void *state)
{}

