#include "stdio.h"
#include "stdlib.h"
#include "hwstate.h"
#include "swis.h"
#include "utils.h"

#define FLOPPY_INT(a) iomd_set_irq(IRQB,a ? 255:~16, a?16:0)

int lastdor;
int fstat = 128;
static int state;
int nextstate;
int waitval = -1,wait;

int rate;
int adfsrate[4] = {4,3,2,8};

int returns[16];
int retptr;
int max_ret;

int inputs[16];
int read;

int st0;
int track0;
int sec;

int secpertrack;
int log2sec;
int secsize;
int bad;
int dmaptr;

int change=1;
int miss,index;

unsigned char dma_buffer[1024];

int lastcmd=-1;
int present=0;

int load_dma(int cyl,int head, int sector)
{
  _kernel_swi_regs r;

  r.r[1] = 1;
  r.r[2] = secsize*(sector+secpertrack*(head+2*cyl));
  r.r[3] = (int) dma_buffer;
  r.r[4] = secsize;

  if (_kernel_swi(ADFS_DiscOp,&r,&r)) return 1;

  dmaptr = 0;
  sec = sector;
  iomd_set_irq(FIQ,255,1);
  return 0;
}

int check_disk(void)
{
  _kernel_swi_regs r;
  unsigned char buf[64];

#ifdef DEBUG_FDC
  fout ("Checking disk ");
#endif

  r.r[0] = (int) ":0";
  r.r[1] = (int) buf;

  if (_kernel_swi(ADFS_DescribeDisc,&r,&r)) {
#ifdef DEBUG_FDC
    fout ("Failed\n");
#endif
    return 1;
  }

  if (adfsrate[rate] != buf[3]) bad = 1;
  else bad = 0;

  secpertrack = buf[1];
  log2sec = buf[0];
  secsize = 1 << log2sec;

#ifdef DEBUG_FDC
  fout ("sectors %d, size %d, rate %d ADFS rate %d %s\n",secpertrack,secsize,rate,buf[3],bad? "BAD":"");
#endif
  return 0;
}

#define FDC_IDLE       0
#define FDC_RES        1
#define FDC_READIN     2
#define FDC_RECAL      3
#define FDC_SDS	       4
#define FDC_READID     5
#define FDC_READ       6
#define FDC_READEND    7
#define FDC_WAIT       8

void floppy_dor(int val)
{
  if ((val & 4) && !(lastdor & 4)) {
    // coming out of reset
    FLOPPY_INT(1);
  }
  lastdor = val;
  state = FDC_IDLE;
  st0 = 192;         // ready changed
}

void data_write(unsigned int val)
{
  switch(state) {
    // if idle, then data is the start of a command
    case FDC_IDLE:
      retptr = 0;
      if (val == 8) {
        fout("Sense int status\n");
        state = FDC_RES;
        fstat |= 64;              // allow reading
        max_ret = 2;
        if (lastdor & 3) returns[0] =0;   // only drive 0 goes ready
        else returns[0] = st0;
        returns[1] = 0;
      } else if (val == 0x13) {
        fout ("Setup FDC FIFO\n");
        read = 3;
        state = FDC_READIN;
        nextstate = FDC_IDLE;     // ie read and ignore
      } else if (val == 0x3) {
        fout ("FDC Specify\n");
        read = 2;
        state = FDC_READIN;
        nextstate = FDC_IDLE;     // ie read and ignore
      } else if (val == 0x7) {
        fout ("FDC recalibrate\n");
        state = FDC_RECAL;
        change = 0;
        track0 = 1;
      } else if (val == 0xf) {
        fout ("FDC seek\n");
        change = 0;
        read = 1;
        track0 = 1;
        state = FDC_READIN;
        nextstate = FDC_RECAL;
      } else if (val == 0x4) {
        fout ("Drive status?\n");
        state = FDC_SDS;
        if (lastcmd != 0x4a && lastcmd != 0x4) present = !check_disk();

      } else if (val == 0x4a) {
        state = FDC_READID;
        miss = 1;
        if (index) {
          sec = 0;
          index = 0;
        }
        if (sec >= secpertrack) sec = 0;
        if (lastcmd != 0x4a && lastcmd != 0x4) present = !check_disk();
        if (bad) {
          nextstate = FDC_READID;
          wait = 2;
          state = FDC_WAIT;
        }
      } else if (val == 0x46) {
#ifdef DEBUG_FDC
        fout ("READ DATA !!!\n");
#endif
        read = 7;
        retptr = 0;
        state = FDC_READIN;
        nextstate = FDC_READ;
      } else {
        fout ("Unknown fdc cmd %d\n",val);
      }
      lastcmd = val;
      break;

    case FDC_READIN:
      inputs[retptr++] = val;
      if (retptr == read) state = nextstate;
      break;

    case FDC_READ:
#ifdef DEBUG_FDC
      fout ("Reading from cyl %d, head %d (%d), sector %d (end = %d)\n",inputs[1],inputs[2],inputs[0] >> 2,inputs[3],inputs[5]);
#endif
      dmaptr = 0;
      //track0 = inputs[1] ? 0:1;
      if (!bad && !load_dma(inputs[1],inputs[2],inputs[3])) break;   // ie if error, irq straight away
      fout ("Wrong DRate etc.\n");

    case FDC_READID:
#ifdef DEBUG_FDC
      fout ("ReadID (sec = %d, head = %d)\n",sec,(val >> 2) & 1);
#endif
      FLOPPY_INT(1);
      state = FDC_RES;
      fstat |= 64;
      max_ret = 7;
      if (present && !bad) {
        returns[0] = 0;        // st0...2
        returns[1] = 0;
        returns[2] = 0;
      }
      else {
        returns[0] = 64;
        returns[1] = 5;
        returns[2] = 1;
      }
      returns[3] = 0;        // c,h,r,n
      returns[4] = ((val >> 2) & 1);
      returns[5] = sec++;
      returns[6] = log2sec - 7;
      if (sec >= secpertrack) {
        sec = 0;
        if (present && !bad) iomd_set_irq (IRQA,255, 4);
      }
      break;

    case FDC_RECAL:
      FLOPPY_INT(1);
      state = FDC_IDLE;
      st0 = 32;
      break;

    case FDC_SDS:
      state = FDC_RES;
      fstat |= 64;
      max_ret = 1;
      if (bad) returns[0] = 64;
      else returns[0] = 32 + (track0 ? 0:16);
      break;
    case FDC_WAIT:
      waitval = val;
      break;
  }

}

unsigned int data_read(void)
{
  switch(state) {
    case FDC_RES:
      retptr++;
      if (retptr == max_ret) {
        state = FDC_IDLE;
        fstat &= ~64;
      }
      //fout ("returning %d\n",returns[retptr-1]);
      return returns[retptr-1];
  }
  return 0;
}

char rates[4][5] = {"500","300","250","1000"};

void floppy_write(unsigned int addr,unsigned int val)
{
  FLOPPY_INT(0);  // deassert interrupt
  if (state == FDC_IDLE) fstat &= ~16;
  //fout("Writing floppy register %x with value %x\n",addr>>2,val);
  switch(addr) {
    case 0xfc8:
      floppy_dor(val);
      break;
    case 0xfd0:
    case 0xfdc:
      rate = val & 3;
      //fout ("Setting FDC rate to %sKbs\n",rates[rate]);
      break;
    case 0xfd4:
      data_write(val);
      break;
  }

}

void floppy_index(void)
{
  if (miss) {
    miss = 0;
    return;
  }
  if (present) iomd_set_irq (IRQA,255, 4);
  index = 1;
  if (state == FDC_WAIT) {
    wait--;
    if (!wait) state = nextstate;
    if (waitval >0 ) data_write(waitval);
  }
}

int tog;

void floppy_change(void)
{
  if (tog) present = 0;
  else present = !check_disk();
  tog = 1- tog;
  //iomd_set_irq(IRQB,255,16);
}

unsigned int floppy_read(unsigned int addr)
{
  int x=0;
  FLOPPY_INT(0);  // deassert interrupt
  //fout("Reading floppy register %x = ",addr>>2);
  if (state == FDC_IDLE) fstat &= ~16;

  switch(addr) {
    case 0xfc0:
      if (!track0) x= 16;
      break;
    case 0xfc4:
      x= 192;
      break;
    case 0xfcc:                     // Media type
      x = 128;
      break;
    case 0xfd0:
      x= fstat;
      break;
    case 0xfd4:
      x= data_read();
      break;
    case 0xfdc:
      //x= change ? 0:128;             // disk change
      x = 0;
      break;

  }

  //fout("%x\n",x);

  return x;
}

unsigned int floppy_dma_read(int tc)
{
  if (!tc) {
    iomd_set_irq(FIQ,255,1);
    if (dmaptr == secsize) {
      load_dma(inputs[1],inputs[2],++sec);
      fout ("FDC TC not reached, loading next sector\n");
    }
  } else {
    fout ("TC asserted\n");
    iomd_set_irq(FIQ,254,0);
    FLOPPY_INT(1);
    state = FDC_RES;
    fstat |= 64;
    fstat |= 16;  // busy
    max_ret = 7;
    retptr = 0;
    returns[0] = 0;        // st0...2
    returns[1] = 0;
    returns[2] = 0;
    returns[3] = inputs[1];        // c,h,r,n
    returns[4] = inputs[2];
    returns[5] = inputs[3]+1;
    returns[6] = log2sec-7;
  }
  if (dmaptr>(secsize -4)) fout("Reading byte %d\n",dmaptr);

  return dma_buffer[dmaptr++];
}

void floppy_dma_write(void)
{
}
