#include "stdio.h"
#include "stdlib.h"
#include "window.h"
#include "hwstate.h"
#include "utils.h"

#define CMOS_FILE "<rpe$dir>.CMOS"

extern unsigned int VIDEOSTART;
extern unsigned int VIDEOEND;
extern unsigned int VIDEORESET;
extern unsigned int VIDEOINC;
extern unsigned int DRAMVIDEO;
unsigned int VIDEOENABLE;
extern int Is7500;
extern int screen_size;

extern unsigned int CURSTART;
extern int curchange;

#define UPDATE_IRQ { interrupt_cpu (((iomd->irqsta & iomd->irqmska) || (iomd->irqstb & iomd->irqmskb)) ? 1:0);}
#define UPDATE_FIQ { fiq_cpu ((iomd->fiqst & iomd->fiqmsk) ? 1:0);}

static IOMD_state *iomd=0;

int IOMD_init(int por)
{
   if (iomd) free(iomd);

   iomd = (IOMD_state *) calloc(1,sizeof(IOMD_state));
   if (!iomd) return 1;

   if (por) {
     iomd->irqsta = 16;
   }

   iomd->mouse = 0x70;                  // all buttons up

   if (iic_init()) return 1;
   if (keyb_init()) return 1;
   return 0;
}

void IOMD_mouse(int btns)
{
   int t =0;

   if (btns & LEFT_MOUSE) t |= 0x40;
   if (btns & MIDDLE_MOUSE) t |= 0x20;
   if (btns & RIGHT_MOUSE) t |= 0x10;

   iomd->mouse = t;
}

IOMD_reset(int por)
{
   IOMD_init(por);
}


void write_timer(int tn,int off,int v)
{
  switch(off) {
    case 0:
      iomd->timer[tn].start = (iomd->timer[tn].start & 0xff00) | (v&255);
      break;
    case 4:
      iomd->timer[tn].start = (iomd->timer[tn].start & 0xff) | ((v<<8) & 0xff00);
      break;
    case 8:
      iomd->timer[tn].value = iomd->timer[tn].start;
      break;
    case 12:
      iomd->timer[tn].latch = iomd->timer[tn].value;
      break;
  }
}

read_timer(int tn,int off)
{

  switch(off) {
    case 0:
      return iomd->timer[tn].latch & 255;
    case 4:
      return (iomd->timer[tn].latch >> 8);
    case 8:
    case 12:
      break;
  }
  return 0;
}

int findex = 20;

void IOMD_tick(int num)
{
  int tn;
  ptick();
  for (tn=0;tn<2;tn++) {
    iomd->timer[tn].value-=num;
    if (iomd->timer[tn].value <= 0) {
      iomd->timer[tn].value = iomd->timer[tn].start;
      iomd->irqsta |= 32<<tn;
      if (tn ==0) {
         findex--;
         if (!findex) {
            findex = 20;
            floppy_index();
         }
      }
      UPDATE_IRQ
    }
  }
}

unsigned int IOMDRead(unsigned int adr)
{
  //fout("Access to (IOMD) phys address %x\n",adr);

  if (adr == 0x3310000) return (0x82 | iomd->mouse);    // monitor id bit/ mouse/ CMOS link

  switch(adr & 0xffff) {
    case 0:
      return iomd->IIC_BUS | 0x3c;  // 001111ii
    case 4:
      return keyboard_get_data();
    case 8:
      return keyboard_status();
    case 0x10: 	       // irqa status
      return iomd->irqsta;
    case 0x14:
      return iomd->irqsta & iomd->irqmska;
    case 0x18:
      return iomd->irqmska;
    case 0x20:
      return iomd->irqstb;
    case 0x24:
      return iomd->irqstb & iomd->irqmskb;
    case 0x28:
      return iomd->irqmskb;
    case 0x30:
      return iomd->fiqst;
    case 0x34:
      return iomd->fiqst & iomd->fiqmsk;
    case 0x38:
      return iomd->fiqmsk;
    case 0x40:
    case 0x44:
    case 0x48:
    case 0x4c:
      return(read_timer(0,adr&12));
    case 0x50:
    case 0x54:
    case 0x58:
    case 0x5c:
      return(read_timer(1,adr&12));
    case 0x94:
      return Is7500 ? 0x98 : 0xE7;
    case 0x98:
      return Is7500 ? 0x5b : 0xd4;
    case 0x9c:
      return 0x0200a003;    // IOMD version
    case 0xa0:
    case 0xa4:
      return peek(adr);
    default:
      return (iomd->registers[(adr >>2) & 127]);   // many register read back what was written
  }

}

extern ObjectId ios;

void IOMDWrite(unsigned int adr, unsigned int data)
{
  //int t;
  //fout("Write Access to (IOMD) phys address %x = %x\n",adr,data);

  iomd->registers[(adr >>2) & 127] = data;

  switch(adr & 0xffff) {
    case 0:
      iomd->IIC_BUS = iic_write(data & 3);
      break;
    case 4:
      keyboard_set_data(data);
      break;
    case 8:
      keyboard_control(data);
      break;
    case 0x14:
      if (data & 16) {
        //fout("Clearing POR condition\n");
      }
      iomd->irqsta &= ~data;
      UPDATE_IRQ
      break;
    case 0x18:
      iomd->irqmska = data;
      UPDATE_IRQ
      //if (ios) numberrange_set_value(0,ios,1,data);
      //if (data == 40) debug_state(1);
      //fout("setting IRQ mask A to %2x\n",data);
      break;
    case 0x24:
      iomd->irqstb &= ~data;
      if (!keyboard_fifo_empty()) iomd->irqstb |= 128;
      UPDATE_IRQ
      break;
    case 0x28:
      iomd->irqmskb = data;
      UPDATE_IRQ
      //if (ios) numberrange_set_value(0,ios,3,data);
      //fout("setting IRQ mask B to %2x\n",data);
      break;
    case 0x34:
      iomd->fiqst &= ~data;
      UPDATE_FIQ
      break;
    case 0x38:
      iomd->fiqmsk = data;
      UPDATE_FIQ
      break;
    case 0x40:
    case 0x44:
    case 0x48:
    case 0x4c:
      write_timer(0,adr&12,data);
      break;
    case 0x50:
    case 0x54:
    case 0x58:
    case 0x5c:
      write_timer(1,adr&12,data);
      break;
    case 0xa0:
    case 0xa4:
      fout("Writing mouse %s with %d\n",adr == 0x32000a0? "X":"Y",data);
      return;
    case 0x1c4:
      CURSTART = data;
      curchange = 1;
      break;
    case 0x1d0:
      fout ("Vidcur = %x\n",data);
      break;
    case 0x1d4:
      VIDEOEND = data;
      //fout ("Video ends at address %x\n",data);
      break;
    case 0x1d8:
      VIDEORESET = data;
      //fout ("Video starts at address %x\n",data);
      break;
    case 0x1dc:
      if (VIDEOSTART != data) video_scroll(data-VIDEOSTART);
      VIDEOSTART = data;
      //fout ("Vidinit = %x\n",data);
      break;
    case 0x1e0:
      VIDEOINC = data & 31;
      VIDEOENABLE = data & 32;
      DRAMVIDEO = data & 64;
      break;
    default:
      break;
  }
}


unsigned int IOMDReadByte(unsigned int adr)
{
   return (IOMDRead(adr) & 255);

}

void IOMDWriteByte(unsigned int adr, unsigned int val)
{
   IOMDWrite(adr,val);
}

void flyback_irq(void)
{
  iomd->irqsta |= 8;
  UPDATE_IRQ
}

void iomd_update_gui(ObjectId ios)
{
  numberrange_set_value(0,ios,1,iomd->irqmska);
  numberrange_set_value(0,ios,3,iomd->irqmskb);
  numberrange_set_value(0,ios,6,iomd->irqsta);
  numberrange_set_value(0,ios,11,iomd->irqstb);

  numberrange_set_value(0,ios,13,iomd->timer[0].latch);
  numberrange_set_value(0,ios,16,iomd->timer[0].value);
  numberrange_set_value(0,ios,23,iomd->timer[0].start);

  numberrange_set_value(0,ios,18,iomd->timer[1].latch);
  numberrange_set_value(0,ios,21,iomd->timer[1].value);
  numberrange_set_value(0,ios,25,iomd->timer[1].start);

}

void iomd_set_irq(int irq,int mask, int set)
{
  if (IRQA == irq) {
#ifdef DEBUG_IRQ
    if (iomd->irqsta != ((iomd->irqsta & mask) | set))
       fout ("IRQ A status changed to %x\n",(iomd->irqsta & mask) | set);
#endif
    iomd->irqsta = (iomd->irqsta & mask) | set;
    UPDATE_IRQ
  } else if (IRQB == irq) {
#ifdef DEBUG_IRQ
    if (iomd->irqstb != ((iomd->irqstb & mask) | set))
       fout ("IRQ B status changed to %x\n",(iomd->irqstb & mask) | set);
#endif
    iomd->irqstb = (iomd->irqstb & mask) | set;
    UPDATE_IRQ
  } else if (FIQ == irq) {
#ifdef DEBUG_IRQ
    if (iomd->fiqst != ((iomd->fiqst & mask) | set))
       fout ("FIQ status changed to %x\n",(iomd->fiqst & mask) | set);
#endif
    iomd->fiqst = (iomd->fiqst & mask) | set;
    UPDATE_FIQ
  }
}
