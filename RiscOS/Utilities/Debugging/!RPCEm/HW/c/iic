#include "hwstate.h"
#include "stdio.h"
#include "stdlib.h"
#include "utils.h"
#include "swis.h"

#define DBG_IIC

static IIC_state *iics=0;
extern char *CMOS_FILE;

#define RTC_MASK  1
#define RTC_24HRS 2

// frees & allocates state, so can cope with reseting

int iic_init(void)
{
  FILE *f;

  if (iics) free(iics);

  iics = (IIC_state *) calloc(1,sizeof(IIC_state));
  if (!iics) return 1;

  iics->master = 1;

  f = fopen(CMOS_FILE,"rb");
  if (!f) {
    fout ("Can't open CMOS!!!\n");
    return 1;
  }
  fread(iics->CMOS+48,1,192,f);
  fread(iics->CMOS,1,48,f);  // isn't this perverse? God knows why they did it this way, but they did...
  fclose(f);

  iics->rtc_state = RTC_24HRS;

  return 0;
}

void write_cmos(int val)
{
  FILE *f;
  if (iics->rtc_adr <16) {
    if (iics->rtc_adr == 0) iics->rtc_state = (iics->rtc_state & ~RTC_MASK) | ((val & 8) ? RTC_MASK :0);
    if (iics->rtc_adr == 4) iics->rtc_state = (iics->rtc_state & ~RTC_24HRS) | ((val & 128) ? 0: RTC_24HRS);
    iics->rtc_adr++;
    return;
  }
  //fout ("Writing CMOS address %d to value %d\n",iics->rtc_adr,val);
  iics->CMOS[iics->rtc_adr-16] = val;
  f = fopen(CMOS_FILE,"wb");
  if (f) {
    fwrite(iics->CMOS+48,1,192,f);
    fwrite(iics->CMOS,1,48,f);
    fclose(f);
  }
  iics->rtc_adr++;
}

#define IIC_UNDEF 0
#define IIC_IDLE  10
#define IIC_START 20
#define IIC_DEVICE_ACK 30
#define IIC_ACKED 40

#define IIC_WAIT_STOP  -1
#define IIC_WAIT_MACK  -2

#define IIC_READING 50
#define IIC_WRITING 60

int ack_iic(int dev)
{
   if (dev == 80) // rtc/CMOS
     return 1;
   return 0;
}

int read_iic(int dev)
{
   char time[8] = {1};
#define YEAR ( (time[0] % 16) + 10 * (time[0] /16) )
#define WEEKDAY (time[3]-1)
   if (dev == 80) {
     if (iics->rtc_adr>= 16)
       return iics->CMOS[((iics->rtc_adr++) -16)];    // CMOS
     _swix(7,_IN(0)|_IN(1),14,time);
     switch (iics->rtc_adr++) {
       case 2:
         return time[6];
       case 3:
         return time[5];
       case 4:
         if (iics->rtc_state & RTC_24HRS) return time[4];
         else {
           int t = (time[4] % 16) + 10 * (time[4] /16);
           if (time[4] == 0) return 128|0x12;   // 12 am
           if (time[4] == 0x12) return 128|0x52;  // 12 pm
           if (t < 12) return 128|(time[4]); // 0-11 am
           t -= 12;                      // 13 -23 => 1 - 11
           if (t>=10) t+=6;              // 10 => 0x10, 11 => 0x11
           return 0xc0 | t;
         }
       case 5:
         return time[2] | (((iics->rtc_state & RTC_MASK) ? 0 : YEAR & 3) << 6);
       case 6:
         return time[1] | (((iics->rtc_state & RTC_MASK) ? 0 : WEEKDAY & 7) << 5);
       default:
         return 0; // RTC in locs 0 - 15
     }
   }
   else return 255;

}

// iic_write returns the current state of the IIC_BUS

int iic_write(int val)
{
#define iic_clock (val & 2)
#define last_clock (iics->last_bus &2)
#define iic_data  (val & 1)
#define last_data (iics->last_bus &1)
#define START (iics->last_bus == 3 && val ==2)
#define STOP (iics->last_bus ==2 && val == 3)

   switch(iics->IIC_STATE) {
     case IIC_UNDEF:
       if (val == 3) iics->IIC_STATE = IIC_IDLE;
       break;
     case IIC_IDLE:
     // wait for start condition
       if (val == 2) {
         iics->IIC_STATE = IIC_START;
         iics->bit_count = 8;
         iics->IIC_DEVICE = 0;
       }
       break;
     case IIC_START:
     // clock data in on low to high transitions
       if (iics->master && STOP) {
         iics->IIC_STATE = IIC_IDLE;
         break;
       }
       if (iics->master && START) {
         iics->IIC_STATE = IIC_START;
         iics->bit_count = 8;
         iics->IIC_DEVICE = 0;
         break;
       }
       if (!last_clock && iic_clock) {
         iics->bit_count--;
         if (!iics->bit_count) {
           iics->readwrite = iic_data;
           iics->IIC_STATE = IIC_DEVICE_ACK;
         }
         else
           iics->IIC_DEVICE = (iics->IIC_DEVICE << 1) | iic_data;
       }
       break;
     case IIC_DEVICE_ACK:
     // if device exists, on high to low of clock, pull bus low
       if (last_clock && !iic_clock) {
#ifdef DBG_IIC
         fout ("IIC device %d, r/w = %s\n",iics->IIC_DEVICE, iics->readwrite ? "READ":"WRITE");
#endif
         if (ack_iic(iics->IIC_DEVICE)) {
#ifdef DBG_IIC
           fout ("Acking\n");
#endif
           iics->master = 0;  // take control of bus
           iics->sdata = 0;   // take data low
           iics->IIC_STATE = IIC_ACKED;
         } else iics->IIC_STATE = IIC_WAIT_STOP;
       }
       break;
#define WRITE_ADR  0
#define WRITE_DATA 1
#define WRITE_ACK  2
#define WRITE_COND 3
     case IIC_ACKED:
     // if master is zero, ie. we acked, wait for clock high to low
       if (!iics->master && last_clock && !iic_clock) {
         iics->bit_count = 8;
         if (iics->readwrite) {
           iics->IIC_STATE = IIC_READING;
           iics->data = read_iic(iics->IIC_DEVICE);
         }
         else {
       	   iics->master = 1;    // stop slave writing
           iics->IIC_STATE = IIC_WRITING;
           iics->write_state = WRITE_ADR;
           iics->data = 0;
       	 }
       }
       break;
     case IIC_WRITING:
       // clock in data
       if (iics->write_state == WRITE_ADR || iics->write_state == WRITE_DATA) {
         // could see a stop or start condition here...
         if (STOP) {
           iics->IIC_STATE = IIC_IDLE;
#ifdef DBG_IIC
           if (iics->write_state == WRITE_ADR || iics->bit_count != 8)
             fout("Whoops, IIC write saw stop condition with state %s, bit count at %d\n",(iics->write_state == WRITE_ADR) ?
             "WRITE_ADR":"WRITE_DATA",iics->bit_count);
#endif
           break;
         }
         if (START) {
           iics->bit_count = 8;
           iics->IIC_DEVICE = 0;
           iics->IIC_STATE = IIC_START;
           break;
         }
         if (!last_clock && iic_clock) {
           iics->bit_count--;
           iics->data = (iics->data << 1) | iic_data;
         }
         if (!iics->bit_count) {
           // put data in right place
           if (iics->write_state == WRITE_ADR) {
             iics->rtc_adr = iics->data;
#ifdef DBG_IIC
             fout("Setting RTC address to %d\n",iics->data);
#endif
           }
           else {
#ifdef DBG_IIC
             fout("Setting CMOS/RTC adr %d to %d\n",iics->rtc_adr,iics->data);
#endif
	     write_cmos(iics->data);
           }
           // ack data
           iics->write_state = WRITE_ACK;
         }
         break;
       }
       if (iics->write_state == WRITE_ACK) {
         if (last_clock && !iic_clock) {
#ifdef DBG_IIC
           fout ("Acking\n");
#endif
           iics->master = 0;  // take control of bus
           iics->sdata = 0;   // take data low
           iics->write_state = WRITE_COND;
         }
         break;
       }
       if (iics->write_state == WRITE_COND) {
         if (!iics->master && last_clock && !iic_clock) {
           iics->master = 1;
           // restart write, maybe get start/stop
           iics->write_state = WRITE_DATA;
           iics->bit_count = 8;
           iics->data = 0;
         }
       }
       break;
     case IIC_READING:
       if (!iic_clock) iics->sdata= ((iics->data >> (iics->bit_count-1)) & 1);
       if (!last_clock && iic_clock) iics->bit_count--;
       if (!iics->bit_count && !iic_clock) {
#ifdef DBG_IIC
         fout ("Sent byte %d to master\n",iics->data);
#endif
         iics->master = 1;
         iics->IIC_STATE = IIC_WAIT_MACK;
       }
       break;
     case IIC_WAIT_MACK:
       if (!last_clock && iic_clock) {
         if (iic_data) {
#ifdef DBG_IIC
            fout ("Master didn't ack, returning to wait\n");
#endif
            iics->IIC_STATE = IIC_WAIT_STOP;
         } else {
#ifdef DBG_IIC
           fout ("Master acked, sending next byte\n");
#endif
           iics->bit_count = 8;
           iics->master = 0;
           iics->IIC_STATE = IIC_READING;
           iics->data = read_iic(iics->IIC_DEVICE);
         }
       }
       break;
     case IIC_WAIT_STOP:
     // wait for low to high on data, with clock high
       if (iic_clock && !last_data && iic_data)
         iics->IIC_STATE = IIC_IDLE;
       break;


   }
   iics->last_bus = val & 3;

   if (iics->master)
     return (val);
   else
     return (iic_clock | iics->sdata);
}
