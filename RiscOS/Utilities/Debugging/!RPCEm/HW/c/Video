#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "kernel.h"
#include <swis.h>
#include "wimp.h"
#include "saveas.h"
#include "utils.h"
#include "memory.h"

static int hst,hen;
static int vst,ven;
static int bpp = 1;
static unsigned char *screen=0;
static unsigned int *screen_word=0;
static int printfb;

extern int VIDEOENABLE;

int border;
int vidup;
int curmove;

unsigned int CURSTART;
int curchange;
int curtop;
int hires;

unsigned int VIDCRead(unsigned int adr)
{
  fout("Access to VIDC) phys address %x\n",adr);
  return 0;
}

int BPP[] = {1,2,4,8,16,0,32,0};
int log2[] = {0,1,2,3,4,0,5,0};
int logbpp;
unsigned int palette[256],curpal[4];
unsigned int save_pal[16][2];

int pptr;
int palch,curpalch=1;

int cursorx,cursory;
int lastx=-1,lasty=-1;

int video_mode_change(void)
{
  palch = 1;
  curpalch = 1;
  return 1;
}

unsigned int VIDCWrite(unsigned int adr, unsigned int data)
{
  //fout("Write Access to VIDC %x\n",data);
  if ((data >>28) == 4) {
    // fout ("Setting border (BGR) to %06x\n",data & 0xffffff);
    border = data & 0xffffff;
    vidup =1;
  }
  if ((data >>28) >4 && (data >>28) <=7) {
    curpal[(data >>28)-4] = data << 8;     // use entries 1-3
    curpalch = 1;
  }

  if ((data >>28) == 0) {
    // fout ("Setting palette %d (BGR) to %06x\n",pptr,data & 0xffffff);
    palette[pptr++] = data << 8;
    if (pptr == 256) pptr =0;
    palch = 1;
  }
  if ((data >>28) == 12) hires = data & (1<<14);

  switch (data >> 24) {
    case 0x10:
      pptr = data & 255;
      break;
    case 0x83:
      hst = data & 0xffffff;
      break;
    case 0x84:
      hen = data & 0xffffff;
      break;
    case 0x86:
      cursorx = (data & 0x3fff) -1;    // (this is cx-17, but vst is vy-18)
      if (cursorx != lastx) {
         lastx = cursorx;
         curmove = 1;
      }
      break;
    case 0x93:
      vst = data & 0xffffff;
      break;
    case 0x94:
      ven = data & 0xffffff;
      break;
    case 0x96:
      curtop = (data & 0x1fff) ;
      break;
    case 0x97:    // use cursor end as sprites plotted from bottom
      cursory = (data & 0x1fff) ;
      if (cursory != lasty) {
         lasty = cursory;
         curmove = 1;
      }
      break;
    case 0xe0:
      bpp = BPP[(data>>5) & 7];
      logbpp = log2[(data>>5) & 7];
    case 0xf0:
      printfb = 1;
      break;
  }
  return 0;
}



int san = 0;
unsigned int *sad;
int newsc;

void remscr(void)
{
#ifdef __acorn
  _kernel_swi_regs regs;

  if (san) {
    regs.r[0] = 1;
    regs.r[1] = san;
    _kernel_swi(OS_DynamicArea,&regs,&regs);
  }
#endif
}

typedef struct {
  int flags;
  int x;
  int y;
  int log2bpp;
  int frame;
  int term;
} ModeSel;

ModeSel mode={1,32,32,0,-1,-1};

typedef struct {
  int next;
  char name[12];
  int width;
  int height;
  int fbit,lbit;
  int image;
  int mask;
  int mode;
} Sprite;

Sprite cursor = {0,"cursor",0,0,0,31,0,0,19};

int *ctrans;
int wid,hei,cbpp;
int screen_size;
int screen_width;

void new_screen(void)
{
  int size;
  _kernel_swi_regs regs;

  if (hen <= hst || ven <= vst) return;

  size = bpp * (hen-hst) * (ven -vst) /8;
  screen_size = size;
  screen_width = bpp * (hen-hst)/8;
  size += 512+512;   // a bit + a bit for pallette one day

#ifdef __acorn

  if (san) {
    regs.r[0] = 1;
    regs.r[1] = san;
    _kernel_swi(OS_DynamicArea,&regs,&regs);
  }

  regs.r[0] = 0;
  regs.r[1] = -1;
  regs.r[2] = size;
  regs.r[3] = -1;
  regs.r[4] = 128;
  regs.r[5] = size;
  regs.r[6] = 0;
  regs.r[7] = 0;
  regs.r[8] = (int) "Risc PC Screen";
  if (!_kernel_swi(OS_DynamicArea,&regs,&regs)) {
    if (!san) atexit(remscr);
    san = regs.r[1];
    sad = (unsigned int *) regs.r[3];
  }
  else return;

#else
  sad =  malloc(size));
#endif

  sad[0] = size;
  sad[2] = 16;
  _swix(OS_SpriteOp,_IN(0) | _IN(1),256+ 9,sad);

  mode.log2bpp = logbpp;
  regs.r[0] = 15+256;
  regs.r[1] = (int) sad;
  regs.r[2] = (int) "rpcscreen";
  regs.r[3] = 0;    // don't include palette
  regs.r[4] = hen-hst;
  regs.r[5] = ven-vst;
  regs.r[6] = (int) &mode;

  _kernel_swi(OS_SpriteOp,&regs,&regs);

  regs.r[0] = (int) &mode;
  regs.r[1] = (bpp>8) ? -1 : (int) palette;
  regs.r[2] = -1;
  regs.r[3] = -1;
  regs.r[4] = 0;
  regs.r[5] = 0;

  _kernel_swi(ColourTrans_SelectTable,&regs,&regs);

  if (ctrans) free (ctrans);
  ctrans = malloc(regs.r[4]);
  regs.r[4] = (int) ctrans;

  _kernel_swi(ColourTrans_SelectTable,&regs,&regs);

  wid = hen-hst;
  hei = ven-vst;
  cbpp = bpp;

  screen_word = (unsigned int *)(sad + sad[12]/4 +4);
  screen = (unsigned char *) screen_word;
  newsc = 1;
  palch = 0;
}

BBox update_box={0,0,0,0};
BBox EmptyBox = {65536,65536,0,0};
BBox BigBox = {0,0,65536,65536};

// scroll sprite by offset bytes
void video_scroll(int offset)
{
  if (!screen || ((offset>0)?offset:-offset) > screen_size) return;
  update_box = BigBox;
  if (offset>0)
    memcpy(screen,screen+offset,screen_size-offset);
  else
    memcpy(screen-offset,screen,screen_size+offset);
}

int screen_change(BBox *box)
{
  int n = newsc;

  box->xmin = 0;
  box->ymax = 0;

  box->xmax = 64 + 2*wid;
  box->ymin = -128 - 2*hei;

  newsc = 0;
  return n;
}

#define os_plot(a,b,c) _swix(OS_Plot,_IN(0) |_IN(1) |_IN(2),a,b,c)
void render_screen(WimpRedrawWindowBlock *block)
{
   _kernel_swi_regs regs;

   // draw border
   _swix(ColourTrans_SetGCOL,_IN(0) |_IN(3) |_IN(4),border<<8,128,0);

   if (!sad) {
     _swix(0x110,0);		// CLG
     return;
   } else {
     os_plot(68,block->visible_area.xmin-block->xscroll,block->visible_area.ymax-block->yscroll);
     os_plot(99,64+2*wid,-96);
     os_plot(99,-32,-32-2*hei);
     os_plot(99,-32-2*wid,32);
     os_plot(99,32,2*hei);
   }

   if (palch) {
     regs.r[0] = (int) &mode;
     regs.r[1] = (bpp>8) ? -1 : (int) palette;
     regs.r[2] = -1;
     regs.r[3] = -1;
     regs.r[4] = (int) ctrans;
     regs.r[5] = 0;

     _kernel_swi(ColourTrans_SelectTable,&regs,&regs);

   }

   regs.r[0] = 52+512;
   regs.r[1] = (int) sad;
   regs.r[2] = (int) (sad+4);
   regs.r[3] = 32 + block->visible_area.xmin - block->xscroll;
   regs.r[4] = -96 + block->visible_area.ymax - block->yscroll -2*hei;
   regs.r[5] = 0;
   regs.r[6] = 0;
   regs.r[7] = (int) ctrans;

  //fout ("About to render screen at %d,%d \n",regs.r[3],regs.r[4]);
  _kernel_swi(OS_SpriteOp,&regs,&regs);

}

void reset_update_box(void)
{
  update_box= EmptyBox;
}

int lcx,lcy;
int lhi,lwi;

void get_pointer_pos(BBox *box,int old)
{
   int nx,ny;
   nx = old? lcx : 32 + 2*(cursorx -hst);
   ny = old? lcy :-96 -2*(cursory -vst);
   box->xmin = nx;
   box->ymin = ny;
   box->xmax = nx+(old ? lwi : (hires ? 32:64));
   box->ymax = ny+2*(old ? lhi :(cursor.height+1));
}

unsigned int mask[1024];     // only allow 4k, unlikely to be bigger
int * curtrans;

void render_pointer(WimpRedrawWindowBlock *block,int old)
{
   _kernel_swi_regs regs;
   int nx,ny;

   if (curpalch) {
     curpalch = 0;
     regs.r[0] = 19;
     regs.r[1] = (int) curpal;
     regs.r[2] = -1;
     regs.r[3] = -1;
     regs.r[4] = 0;
     regs.r[5] = 0;

     _kernel_swi(ColourTrans_SelectTable,&regs,&regs);

     if (curtrans) free (curtrans);
     curtrans = malloc(regs.r[4]);
     regs.r[4] = (int) curtrans;

     _kernel_swi(ColourTrans_SelectTable,&regs,&regs);
   }

   if (curchange) {
     int x;
     unsigned int *image;
     curchange = 0;
     cursor.width = hires ? 0:1;
     cursor.height = cursory - curtop -1;
     cursor.image = (int) ADDRESS_OF(CURSTART) - ((int) &cursor);

     image = (unsigned int *) ADDRESS_OF(CURSTART);

     cursor.mask = ((int) &mask) - ((int) &cursor);
     // rebuild mask
     for (x=0;x < ((cursor.width+1)*(cursor.height+1));x++) {
       int t1 = image[x] & 0xaaaaaaaau;
       int t2 = image[x] & 0x55555555u;
       mask[x] = t1 | (t1 >> 1) | t2 | (t2 << 1);
     }
     //fout ("Cursor details: height %d, hires %s, data %x\n",cursor.height,hires? "Yes":"No",cursor.image);
   }
   if (!cursor.image) return;

   nx = 32 + 2*(cursorx -hst) + block->visible_area.xmin - block->xscroll;
   ny = -96 -2*(cursory -vst) + block->visible_area.ymax - block->yscroll;

   if (old && curmove) {
     lcx = nx -(block->visible_area.xmin - block->xscroll);
     lcy = ny -(block->visible_area.ymax - block->yscroll);
     lhi = cursory-curtop;
     lwi = hires ? 32:64;
     curmove = 0;
   }

   if (!VIDEOENABLE) return;

   regs.r[0] = 52+512;
   regs.r[1] = (int) &cursor;
   regs.r[2] = (int) &cursor;
   regs.r[3] = nx;
   regs.r[4] = ny;
   regs.r[5] = 8;
   regs.r[6] = 0;
   regs.r[7] = (int) curtrans;

  //fout ("About to render screen at %d,%d \n",regs.r[3],regs.r[4]);
  _kernel_swi(OS_SpriteOp,&regs,&regs);

}

void video_writeb(unsigned int ad,unsigned int val)
{
  //if (val) fout ("Writing (non-zero) byte (%x) to video = %2x\n",ad,val);
#if 0
  if (!screen) {
     _swix(OS_ReadDynamicArea,_IN(0)| _OUT(0),2,&screen);
     screen_word = (int *) screen;
  }
#endif

#ifdef DEBUG_VID
  if (printfb) {
     fout("Screen set to %d by %d in %d bpp\n",hen-hst,ven-vst,bpp);
     printfb = 0;
  }
#endif
  if ((hen-hst) != wid || (ven -vst) != hei || (cbpp != bpp)) new_screen();
  if (ad >= screen_size) return;

  vidup =1;
  if (screen) {
#if 1
    int x=(ad%screen_width);
    int y=ad/screen_width;
    if (update_box.xmin > x) update_box.xmin = x;
    if (update_box.xmax < x) update_box.xmax = x;
    if (update_box.ymin > y) update_box.ymin = y;
    if (update_box.ymax < y) update_box.ymax = y;
#endif
    screen[ad] = val;
  }
}

void video_writew(unsigned int ad,unsigned int val)
{

  //if (val) fout ("Writing (non-zero) word (%x) to video = %x\n",ad,val);
#if 0
  if (!screen) {
     _swix(OS_ReadDynamicArea,_IN(0)| _OUT(0),2,&screen);
     screen_word = (int *) screen;
  }
#endif

#ifdef DEBUG_VID
  if (printfb) {
     fout("Screen set to %d by %d in %d bpp\n",hen-hst,ven-vst,bpp);
     printfb = 0;
  }
#endif

  if ((hen-hst) != wid || (ven -vst) != hei || (cbpp != bpp)) new_screen();
  if (ad >= screen_size) return;

  vidup =1;
  if (screen_word) {
#if 1
    int x=(ad%screen_width);
    int y=ad/screen_width;
    if (update_box.xmin > x) update_box.xmin = x;
    if (update_box.xmax < x) update_box.xmax = x+3;   // it's a word
    if (update_box.ymin > y) update_box.ymin = y;
    if (update_box.ymax < y) update_box.ymax = y;
#endif
    screen_word[ad/4] = val;
  }
}

void find_update_box(BBox *upd)
{
   upd->xmin = 32 + 16*update_box.xmin/bpp;              // *2 for OS units
   upd->xmax = 40 + 16*(update_box.xmax+1)/bpp;
   upd->ymax = -96 - 2*update_box.ymin;
   upd->ymin = -96 - 2*update_box.ymax -2;		// going down...
}

int setup_save(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  //fout("Setting address of transfer to %x, length %d\n",(sad) ? &sad[1]:0,sad ? sad[3]-4:0);
  switch (id_block->parent_component) {
    case 0:
      saveas_set_data_address(0,id_block->self_id,(sad) ? &sad[1]:0,sad ? sad[3]-4:0,0,0);
      break;
    case 1:
    { int i;
      saveas_set_data_address(0,id_block->self_id,save_pal,16*2*4,0,0);
      for (i=0; i<16;i++) {
        save_pal[i][0] = palette[i];
        save_pal[i][1] = palette[i];
      }
      break;
    }
    case 2:
      saveas_set_data_address(0,id_block->self_id,RAM,RAMSIZE,0,0);
      break;
  }

  return 1;
}
