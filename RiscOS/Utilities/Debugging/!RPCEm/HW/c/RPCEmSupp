#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "string.h"

#define IGNORE(a) a=a
int claimed = 0;
extern void register_event(void);

static void claim_release(int claim, int pw)
{
    _kernel_swi_regs regs;

    regs.r[0] = 16;
    regs.r[1] = (int) register_event;
    regs.r[2] = (int) pw;
    _kernel_swi(claim ? OS_Claim : OS_Release,&regs,&regs);
}

static void add_remove(int add)
{
   _kernel_swi_regs regs;

   regs.r[0] = add ? 14:13;
   regs.r[1] = 10;                  /* mouse */

   _kernel_swi(OS_Byte,&regs,&regs);           

   regs.r[1] = 11;                  /* keyboard */

   _kernel_swi(OS_Byte,&regs,&regs);  
}

static void claim_free_events(int claim,int pw)
{
   if (claim) {
      claim_release(1,pw);
      add_remove(1);
   } else {     
      add_remove(0);
      claim_release(0,pw);
   }
}

main_initialise(void)
{
  return 0;
}

main_finalise(int a, int b,int pw)
{
  if (claimed) claim_free_events(0,pw);
  return 0;
}

#define BUFFSIZE 64
int buffer[BUFFSIZE];
int buffp;

main_swi(int num, _kernel_swi_regs *r, int pw)
{
   switch(num) {
     case 0:
       buffp = 0;
       if (!claimed) claim_free_events(1,pw);
       claimed = 1;
       r->r[0] = (int) buffer;
       r->r[1] = BUFFSIZE;
       r->r[2] = (int) &buffp;
       break;
     case 1:
       if (claimed) claim_free_events(0,pw);
       claimed = 0;
       break;
   }
   return 0;
}


extern int event_handler(_kernel_swi_regs *r,void *pw)
{                                                     
   IGNORE(pw);

   switch (r->r[0]) {
      case 10:
         break;
      case 11:
         buffer[buffp++] = (r->r[1] << 8) | r->r[2];
         if (buffp == BUFFSIZE) buffp = 0;
         break;
      default:
         break;
   }          

   return 1;
}
