#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "hwstate.h"
#include "utils.h"

IDE_state *ide;

int IDE_init(void)
{
  ide = (IDE_state *) calloc(1,sizeof(IDE_state));
  if (!ide) return 1;

  ide->status = 64;

  ide->disc[0] = fopen("<rpe$dir>.disc","rb+");
  if (!ide->disc[0]) ide->disc[0] = fopen("<rpe$dir>.disc","rb");    // Read only
  ide->disc[1] = fopen("<rpe$dir>.disc2","rb+");
  if (!ide->disc[1]) ide->disc[1] = fopen("<rpe$dir>.disc2","rb");    // Read only

  return 0;
}

void reset_ide(void)
{
  ide->status = 64;           // controller ready
  iomd_set_irq(IRQB,~2,0);    // deassert irq
  ide->heads[0] = 16;
  ide->sectors[0] = 16;          // defaults
  ide->heads[1] = 16;
  ide->sectors[1] = 16;          // defaults
}

#define HEAD        ((ide->regs[6]) & 15)
#define SECTOR      (ide->regs[3] -1)
#define CYLINDER    ((ide->regs[5]<<8)| ide->regs[4])
#define DEVICE      ((ide->regs[6]>>4) & 1)
#define NUM_SECTORS (ide->regs[2])
#define ADDR_MODE   (ide->regs[6] & 64)

void advance_sector(void)
{
  ide->regs[2]--;
  ide->regs[3]++;
  if (ide->regs[3] > ide->sectors[DEVICE]) {
    ide->regs[3] = 1;
    if (HEAD < (ide->heads[DEVICE] -1)) ide->regs[6] = HEAD+1 | (DEVICE << 4);
    else {
      ide->regs[6] = DEVICE << 4;
      ide->regs[4]++;
      if (ide->regs[4] == 256) {
        ide->regs[4] = 0;
        ide->regs[5]++;
      }
    }
  }
}

unsigned char *disc_buffer=NULL;
int dbuffer_size;
int dptr;

void read_ide(void)
{
  //fout("Reading IDE device %d, (addr mode %s) sector %d cylinder %d, head %d for %d sectors\n",
  //		DEVICE,ADDR_MODE ? "LBA":"CHS",SECTOR,CYLINDER,HEAD,NUM_SECTORS);

  ide->writing = 0;
  ide->rcount = 0;

  if (!disc_buffer) {
    disc_buffer = calloc(16384,1);
    if (!disc_buffer) {
      fout("Can't allocate disc buffer\n");
      return;
    }
    dbuffer_size = 16384;
  }

  ide->status |= 8;    // ready to transfer data;
  iomd_set_irq(IRQB,255,2);

  if (ide->disc[DEVICE]) {
    ide->reading = NUM_SECTORS*512;
    if (ide->reading > dbuffer_size) {
      free(disc_buffer);
      disc_buffer = calloc(ide->reading,1);
      if (!disc_buffer) {
        fout("Can't allocate disc buffer\n");
        return;
      }
      dbuffer_size = ide->reading;
    }
    clearerr(ide->disc[DEVICE]);
    fseek(ide->disc[DEVICE],512*(SECTOR+ide->sectors[DEVICE]*(HEAD+ide->heads[DEVICE]*CYLINDER)),SEEK_SET);

    fread(disc_buffer,NUM_SECTORS,512,ide->disc[DEVICE]);
    dptr = 0;
  }

}

void verify_ide(void)
{
  int i = NUM_SECTORS;
  while (--i) advance_sector();
  iomd_set_irq(IRQB,255,2);

}

void write_ide(void)
{
  //fout("Writing IDE device %d, (addr mode %s) sector %d cylinder %d, head %d for %d sectors\n",
  //		DEVICE,ADDR_MODE ? "LBA":"CHS",SECTOR,CYLINDER,HEAD,NUM_SECTORS);

  ide->status |= 8;    // ready to transfer data;
  ide->writing = 512*NUM_SECTORS;
  ide->wcount = 0;
}

unsigned char wbuf[516];  // just in case !!

void write_ide_hword(unsigned int v)
{
  wbuf[ide->wcount++] = v & 255;
  wbuf[ide->wcount++] = v>>8;
  ide->writing-=2;

  if (ide->disc[DEVICE] && ide->wcount >= 512) {
    //fdump (wbuf,512,"Writting sector to address %x\n",512*(SECTOR+16*HEAD+256*CYLINDER));
    clearerr(ide->disc[DEVICE]);
    fseek(ide->disc[DEVICE],512*(SECTOR+ide->sectors[DEVICE]*(HEAD+ide->heads[DEVICE]*CYLINDER)),SEEK_SET);
    fwrite(wbuf,1,512,ide->disc[DEVICE]);
    fflush(ide->disc[DEVICE]);
    iomd_set_irq(IRQB,255,2);
    advance_sector();
    if (!ide->writing) ide->status &= ~8;
    ide->wcount = 0;
  }
}

void init_device(void)
{
  //fout ("Device %d init, sectors %d, heads %d\n",DEVICE,NUM_SECTORS,HEAD);
  iomd_set_irq(IRQB,255,2);
  ide->sectors[DEVICE] = NUM_SECTORS;
  ide->heads[DEVICE] = 1+ HEAD;
}

void bswap_strcpy(char *a, char*b)
{
  int fl = 1;

  while (1) {
    if (fl) *(a+1) = *b;
    else *(a-1) = *b;

    if (!*b) return;

    fl = 1-fl;
    a++;
    b++;
  }
}

void identify_device(void)
{
  int i;
  short *ident;
  ide->writing = 0;
  ide->rcount = 0;

  ide->status |= 8;    // ready to transfer data;
  iomd_set_irq(IRQB,255,2);

  if (ide->disc[DEVICE]) {
    if (!disc_buffer) {
      disc_buffer = calloc(16384,1);
      if (!disc_buffer) {
        fout("Can't allocate disc buffer\n");
        return;
      }
      dbuffer_size = 16384;
    }

    dptr = 0;
    ide->reading = 512;  // one 'sector'
    // now fill in structure

    ident = (short *) disc_buffer;

    for (i=0; i<256; i++) ident[i] = 0;
    ident[0] = 64;    // fixed device;

    fseek(ide->disc[DEVICE],0,SEEK_END);
    i = ftell(ide->disc[DEVICE]);

    ident[1] = i/(512*16*16);

    ident[3] = 16;
    ident[6] = 16;
    bswap_strcpy(46+(char *)disc_buffer,"0.01");
    bswap_strcpy(54+(char *)disc_buffer,"Acorn Disc Image");

    ident[21] = 512;
  }
}

void seek_ide(void)
{
  ide->status |= 16;
  iomd_set_irq(IRQB,255,2);
}

void IDE_write(int addr,int val)
{
  ide->regs[(addr >> 2) & 7] = val;
  if ((addr) == 0x7dc) {
    iomd_set_irq(IRQB,~2,0);   // deassert irq
#ifdef DEBUG_IDE
    fout ("IDE command %x, Device %d\n",val,DEVICE);
#endif
    if (val == 0x20) read_ide();
    if (val == 0x30) write_ide();
    if (val == 0x40) verify_ide();
    if (val == 0x91) init_device();
    if (val == 0xEC) identify_device();
    if (val == 0x70 || val == 0x10) seek_ide();
   }
   if (((addr) == 0x7c0) && ide->writing) write_ide_hword(val >> 16);   // IO 16 bit writes have data in top bits
}

unsigned int IDE_read_data(void)
{
   int dat;
   ide->rcount++;
   if (ide->rcount == 256) {
     if (ide->reading > 2) iomd_set_irq(IRQB,255,2);
     //fout ("256 16 bit words read from IDE data port\n");
     advance_sector();
     ide->rcount = 0;
   }
   if (!disc_buffer) dat = 0;
   else dat = disc_buffer[dptr] | (disc_buffer[dptr+1] << 8);
   dptr += 2;
   ide->reading -= 2;
   if (!ide->reading) ide->status &= ~8;
   return dat;
}

unsigned int IDE_status(void)
{
   return ide->status;
}
