#include "stdlib.h"
#include "hwstate.h"
#include "utils.h"

#define KEYB_RESET 0
#define KEYB_IDLE 1
#define KEYB_WAIT 2
#define KEYB_TRANSMIT 3
#define KEYB_RECEIVE 4
#define KEYB_GETRATE 5
#define KEYB_SETLEDS 6

//mjs hack masks data to 8 bits only (for StrongARM emulator)
//all hacks marked with 'mjs' comment

Keyb_state *keyb;

int keyb_init(void)
{
  if (keyb) free(keyb);

  keyb = calloc(1,sizeof(Keyb_state));

  if (!keyb) return 1;
  keyb->FIFO[0] = -1;

  return 0;
}


int parity(int d)
{
  // yeh yeh, you can do it with EORs & shifts, but this is simpler :-)
  int i;
  int j=0;
  for (i =0 ; i<8;i++) j += ((d>>i) & 1);

  return 1-(j & 1);
}

int put_fifo(int val)
{
  int i;

  for (i=0; i< KEYBOARD_FIFO-1;i++) {
    if (keyb->FIFO[i] == -1) {
       keyb->FIFO[i] = val;
       keyb->FIFO[i+1] = -1;
       //fout ("Inserted code %02X into keyboard FIFO\n",val);
       iomd_set_irq(IRQB ,255, 128);
       keyb->status &= ~4;
       keyb->status |= (32 | 4*parity(keyb->FIFO[0]));
       return 0;
    }
  }
  fout ("Keyboard FIFO full\n");
  keyb->FIFO[KEYBOARD_FIFO-2] = 0; // overrun
  return 1;
}

int get_fifo(void)
{
  int i,j;
  i = keyb->FIFO[0];

  if (i== -1) return i;
  for (j=1;j<KEYBOARD_FIFO;j++) {
     if ((keyb->FIFO[j-1] = keyb->FIFO[j]) == -1) break;
  }
  keyb->status &= ~36;
  keyb->status |= 4*parity(keyb->FIFO[0]);
  if (keyb->FIFO[0] > 0) {
    keyb->status |= 32;
    iomd_set_irq(IRQB ,255, 128);
  } else iomd_set_irq (IRQB, ~128,0);       // deassert interrupt

  return i;
}

int keyboard_fifo_empty(void)
{
  return (keyb->FIFO[0] == -1);
}


unsigned int keyboard_get_data(void)
{
//mjs
// int next = get_fifo();
  int next = get_fifo() & 0xff;

  //fout("reading keyboard data %x\n",next);

  return next;

}

unsigned int keyboard_status(void)
{
  //fout("reading keyboard status\n");
  return keyb->status;

}

void keyboard_set_data(unsigned int data)
{
//mjs
data &= 0xff;

  //fout("sending keyboard data %2x\n",data);
  if (keyb->state == KEYB_IDLE) {
    // as ideal, immediately empty
    keyb->status |= 128;
    iomd_set_irq(IRQB, 255,64);
    if (data == 0xff) {
      keyb->FIFO[0] = -1;
      // reset keyboard, send back ack
      put_fifo(0xfa); // ACK
      put_fifo(0xaa);    // test completed
    }
    if (data == 0xf3) {
      // set type rate, send back ack
      put_fifo(0xfa); // ACK
      keyb->state = KEYB_GETRATE;
    }
    if (data == 0xed) {
      // set leds, send back ack
      put_fifo(0xfa); // ACK
      keyb->state = KEYB_SETLEDS;
      floppy_change();
    }
    return;
  }
  if (keyb->state == KEYB_GETRATE) {
    // as ideal, immediately empty
    keyb->status |= 128;
    iomd_set_irq(IRQB, 255,64);
    // ignore data, but ack
    put_fifo(0xfa); // ACK
    keyb->state = KEYB_IDLE;
    return;

  }
  if (keyb->state == KEYB_SETLEDS) {
    // as ideal, immediately empty
    keyb->status |= 128;
    iomd_set_irq(IRQB, 255,64);
    //fout("Leds data = %d\n",data);
    gui_set_leds(data);
    put_fifo(0xfa); // ACK
    keyb->state = KEYB_IDLE;
    return;

  }

}

void keyboard_control(unsigned int data)
{
  fout("setting keyboard ctrl %2x\n",data);
  switch(keyb->state) {
     case KEYB_RESET:
        if (data & 8) {
           // enabled
           keyb->state = KEYB_IDLE;
           keyb->status |= 128;
           iomd_set_irq(IRQB,255 , 64);
        }
        break;
     case KEYB_IDLE:
        keyb->status = data;
        //iomd_set_irq(IRQB,~(((!(data & 128)) ? 64 : 0) | ((!(data & 32)) ? 128 : 0)),0);
        break;
  }
}
