/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
\**************************************************************************/
#ifndef PU
#define PU

#include <stdio.h>

#define INSTR1 RRESP_INSTR1
#define INSTR2 RRESP_INSTR2
#define DEF    INSTR2+1
#define TBC    INSTR2+2

#define CYCLE_TIME        13.89
#define DEBUG_OPTION      0x00FF
#define DEBUG_LEVEL       0xFF00
#define DEBUG_LEVEL_SHIFT 0x8

/*--- the prediction state machine (psm) states --------------------------*/

#define   PPRE 0
#define   CORR 1
#define   FPRE 2
#define   CRET 3
#define   PRET 4
#define   CALC 5
#define     F0 6
#define    F0F 7
#define   DONE 8
#define NOSPEC 9
#define   IDLE 10
#define   CPRE 11

#define PDPE2  1
#define PDPE2F 2
#define PDPE2W 3
#define  FINN 4
#define  PDPE 8
#define  ADPE 9
#define  TDPE 10
#define  BDPE 11
#define CADAE 12
#define   CAE 13
#define CTDTE 14
#define   CTE 15
#define CTDBE 16
#define CADBE 17
#define   CBE 18
#define PDPEF 21
#define TDPEF 22
#define BDPEF 23
#define PDPEW 24
#define BDPEW 25
#define PE    26
#define CPE   27

/*--- useful definitions for indexing the fifo ---------------------------*/

#define FIFO_0_PCPLUS8  PUINT.fifo.PcPlus8[PUINT.fifo.read]
#define FIFO_1_PCPLUS8  PUINT.fifo.PcPlus8[(PUINT.fifo.read+1)&(FIFO_SIZE-1)]
#define FIFO_2_PCPLUS8  PUINT.fifo.PcPlus8[(PUINT.fifo.read+2)&(FIFO_SIZE-1)]
#define FIFO_0_INSTRUCT PUINT.fifo.Instruct[PUINT.fifo.read]
#define FIFO_1_INSTRUCT PUINT.fifo.Instruct[(PUINT.fifo.read+1)&(FIFO_SIZE-1)]
#define FIFO_2_INSTRUCT PUINT.fifo.Instruct[(PUINT.fifo.read+2)&(FIFO_SIZE-1)]
#define FIFO_0_BRANCH   PUINT.fifo.branch[PUINT.fifo.read]
#define FIFO_1_BRANCH   PUINT.fifo.branch[(PUINT.fifo.read+1)&(FIFO_SIZE-1)]
#define FIFO_2_BRANCH   PUINT.fifo.branch[(PUINT.fifo.read+2)&(FIFO_SIZE-1)]

#define FIFO_LAST1_BRANCH PUINT.fifo.branch[(PUINT.fifo.write+7)&(FIFO_SIZE-1)]
#define FIFO_LAST2_BRANCH PUINT.fifo.branch[(PUINT.fifo.write+6)&(FIFO_SIZE-1)]
#define FIFO_LAST1_INSTRUCT PUINT.fifo.Instruct[(PUINT.fifo.write+7)&(FIFO_SIZE-1)]
#define FIFO_LAST2_INSTRUCT PUINT.fifo.Instruct[(PUINT.fifo.write+6)&(FIFO_SIZE-1)]

#ifdef DB_PU /*************************************************************/
#define PU_DEBUG(l,s,a)  pu_debug(PUINT.debug_option,\
                                  PUINT.cycle_count,\
                                  PUINT.debug_file,\
                                  l,s,a)
#else /********************************************************************/
#define PU_DEBUG(l,s,a)
#endif /*******************************************************************/

/**************************************************\
*                                                  *
* pu.h: Routines to emulate the ARM8 prefetch unit *
*                                                  *
\**************************************************/

/* Routines to deal with changes in the prefetch unit on each phase.      */
/* "Early" changes are those that occur before any interblock delay -     */
/* i.e. that can be determined from the state of the inputs at the start  */
/* of the phase. "Late" changes are those that occur after any interblock */
/* delay - i.e. that should only be made after other blocks have          */
/* performed their "early" changes. An assumption of this model is that   */
/* there is only one interblock delay per phase: violations of this rule  */
/* are a bad idea in my view.                                             */

extern void armul8pu_earlyph1(armul8_state *state);
extern void armul8pu_lateph1(armul8_state *state);
extern void armul8pu_earlyph2(armul8_state *state);
extern void armul8pu_lateph2(armul8_state *state);
extern void armul8pu_init(armul8_state *state);

/* A "sneak preview" routine to determine whether the PU is about to      */
/* assert CancelE - used to avoid breakpointing on instructions that are  */
/* about to be cancelled.                                                 */

extern int armul8pu_notcancelling(armul8_state *state);

/* The debug routine.                                                     */

extern int  db_pu(int debug_option,armul8_state *state);

#endif
