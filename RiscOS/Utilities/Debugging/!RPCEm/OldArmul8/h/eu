/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

#ifndef EU
#define EU

/*****************************************\
*                                         *
* eu.h: routines to emulate the ARM8 core *
*                                         *
\*****************************************/

/* The initialisation routine - this initialises the internal state of    */
/* the core.                                                              */

extern void armul8core_init(armul8_state *state);

/* Routines to deal with changes in the core on each phase. "Early"       */
/* changes are those that occur before any interblock delay - i.e. that   */
/* can be determined from the state of the inputs at the start of the     */
/* phase. "Late" changes are those that occur after any interblock delay  */
/* - i.e. that should only be made after other blocks have performed      */
/* their "early" changes. An assumption of this model is that there is    */
/* only one interblock delay per phase: violations of this rule are a bad */
/* idea in my view.                                                       */

extern void armul8core_earlyph1(armul8_state *state);
extern void armul8core_lateph1(armul8_state *state);
extern void armul8core_earlyph2(armul8_state *state);
extern void armul8core_lateph2(armul8_state *state);

/**************************************************************************\
*                                                                          *
* Routines to gain information about selected parts of the core's internal *
* state.                                                                   *
*                                                                          *
* These routines should generally only be called at the end of a cycle -   *
* i.e. after a call to 'armul8core_lateph2' and before the subsequent call *
* to 'armul8core_earlyph1'. Calling them at other times may produce        *
* misleading information.                                                  *
*                                                                          *
\**************************************************************************/

/* To get information about the instruction executed in the cycle that    */
/* has just occurred: its address, the instruction itself and (in the bit */
/* mask 'status') whether it was interlocked, delayed by memory,          */
/* conditionally skipped, cancelled, lost, busy-waited and/or not being   */
/* executed because an exception entry sequence was being processed. Note */
/* that more than one of this list may apply - e.g. it is possible for an */
/* instruction to be both interlocked and busy-waited in a particular     */
/* cycle.                                                                 */
/*                                                                        */
/* N.B. The address returned is the actual address of the instruction -   */
/* i.e. not offset by 8 or any other amount.                              */
/*                                                                        */
/* Terminology notes:                                                     */
/*   * "interlocked" means that the execution of the instruction was      */
/*     delayed by a cycle because the correct value of one or more of its */
/*     source registers was not yet available.                            */
/*   * "delayed by memory" means that the execution of the instruction    */
/*     was delayed by a cycle because the memory system took an extra     */
/*     cycle for a memory access, and either the Core was interested in   */
/*     the results of that memory access or the Core was trying to        */
/*     produce a memory request and didn't have it accepted because the   */
/*     memory failed to confirm its response.                             */
/*   * "conditionally skipped" means that the instruction was not         */
/*     executed because the condition specified in the instruction was    */
/*     not satisfied.                                                     */
/*   * "cancelled" means that the instruction was not executed because it */
/*     was cancelled by the Prefetch Unit, via any of the NoFetch,        */
/*     CancelD and CancelE signals.                                       */
/*   * "lost" means that the instruction was not executed or not fully    */
/*     executed for some other reason. The reasons that exist for this at */
/*     the time of writing are:                                           */
/*     + A data abort caused by the last cycle of an instruction causes   */
/*       the next instruction to be "lost" after one cycle of execution;  */
/*     + A data abort caused by a cycle other than the last cycle of an   */
/*       instruction causes that instruction to be "lost";                */
/*     + Reset causes the instruction that is executing at the time to be */
/*       "lost".                                                          */
/*   * "busy-waited" means that a coprocessor has asked for execution of  */
/*     the instruction to be delayed via the CBusyWaitD/CBusyWaitE        */
/*     signals.                                                           */

extern void armul8core_lastinstr(armul8_state *state,
                                 unsigned32   *address,
                                 unsigned32   *instr,
                                 unsigned     *status);

/* Definitions of the bits in the variable 'status' returned by           */
/* 'armul8core_lastinstr'.                                                */

#define CORESTATUS_INTERLOCKED 0x01
#define CORESTATUS_DELAYED     0x02
#define CORESTATUS_SKIPPED     0x04
#define CORESTATUS_CANCELLED   0x08
#define CORESTATUS_LOST        0x10
#define CORESTATUS_BUSYWAITED  0x20
#define CORESTATUS_EXCEPTION   0x40

/* To get similar information about the instruction which will be         */
/* executed in the next cycle, except that in this case, we don't yet     */
/* know its status.                                                       */

extern void armul8core_nextinstr(armul8_state *state,
                                 unsigned32   *address,
                                 unsigned32   *instr);

/* To get information about a specified register for a specified mode.    */
/* The current value of the register is always returned. Flags are used   */
/* to indicate whether there are any known pending changes to the         */
/* register. There can be pending changes to the register contents from   */
/* any of the next four phases: the existence of such a pending change is */
/* indicated by a bit being set in the returned value 'changing' (bit 0   */
/* = next phase 1, bit 1 = next phase 2, bit 2 = phase 1 after that,      */
/* bit 3 = phase 2 after that).                                           */
/*                                                                        */
/* For the first two phases, the value to be written into the register    */
/* may be known at present. If so, the corresponding bit (i.e. bit 0 for  */
/* next phase 1, bit 1 for next phase 2) will be set in the returned      */
/* value 'known' and the appropriate one of 'newvalue1' and 'newvalue2'   */
/* will be set to the new value. Otherwise, the bit in 'known' is clear   */
/* and 'newvalue1' or 'newvalue2' has a meaningless value.                */
/*                                                                        */
/* The values to be written in the third and fourth phases are never      */
/* known at this stage.                                                   */
/*                                                                        */
/* Note that R15 values read via this routine will never have this sort   */
/* of 'pending' change registered for them. They will simply be the       */
/* address of the instruction to be executed in the next cycle plus 8,    */
/* with the PSR information included if we're currently in a 26-bit mode. */

extern void armul8core_reginfo(armul8_state *state,
                               int          regno,
                               int          mode,
                               unsigned32   *value,
                               unsigned     *changing,
                               unsigned     *known,
                               unsigned32   *newvalue1,
                               unsigned32   *newvalue2);

/* Bit masks to help with the use of the preceding routine.               */

#define REGINFO_NEXTPHASE1      0x1
#define REGINFO_NEXTPHASE2      0x2
#define REGINFO_FOLLOWINGPHASE1 0x4
#define REGINFO_FOLLOWINGPHASE2 0x8

/* The following routine gets information about the CPSR. Because the     */
/* CPSR may be about to change in the following phase 1, both an old      */
/* value and a new one are returned.                                      */

extern void armul8core_cpsrinfo(armul8_state *state,
                                unsigned32   *value,
                                unsigned32   *newvalue);

/* The following routine gets information about a given mode's SPSR. As   */
/* for 'armul8core_cpsrinfo', this may be about to change in the          */
/* following phase 1, and so both an old value and a new one are          */
/* returned.                                                              */
/*   The value returned from this routine indicates whether an SPSR       */
/* associated with the current mode exists. If the returned value is 0,   */
/* no SPSR exists and the rest of the information returned should be      */
/* disregarded. If it is non-zero, the SPSR exists and the rest of the    */
/* information returned is meaningful.                                    */

extern int armul8core_spsrinfo(armul8_state *state,
                               int          mode,
                               unsigned32   *value,
                               unsigned32   *newvalue);

/* To identify the first real cycle of an instruction, for purposes of    */
/* breakpoints. If this routine is called at the end of a cycle, it will  */
/* return TRUE and make '*address' contain the address of the next        */
/* instruction it will execute if the immediately ensuing cycle will be   */
/* the first real cycle (i.e. excluding NConfirm cycles, etc.) of that    */
/* instruction. Otherwise, it will return FALSE and the value of          */
/* '*address' will be undefined.                                          */

extern int armul8core_instrstart(armul8_state *state,
                                 unsigned32   *address);

#endif
