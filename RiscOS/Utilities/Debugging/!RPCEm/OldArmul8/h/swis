/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

#ifndef SWIS
#define SWIS


/* The validation suite used to use these SWI values;
SWI_WriteC            &000000
SWI_WriteS            &000004
SWI_Write0            &000005
SWI_Exit              &000006
SWI_EnterOS           &000007
SWI_WriteHex          &000008
SWI_WriteDec          &000009
SWI_IMB               &F00000
SWI_IMBRange          &F00001

For non-validation code the allocation of SWI numbers is as follows;
*/

#define SWI_WriteC                 0x0
#define SWI_Write0                 0x2
#define SWI_ReadC                  0x4
#define SWI_CLI                    0x5
#define SWI_GetEnv                 0x10
#define SWI_Exit                   0x11
#define SWI_EnterOS                0x16

#define SWI_GetErrno               0x60
#define SWI_Clock                  0x61
#define SWI_Time                   0x63
#define SWI_Remove                 0x64
#define SWI_Rename                 0x65
#define SWI_Open                   0x66

#define SWI_Close                  0x68
#define SWI_Write                  0x69
#define SWI_Read                   0x6a
#define SWI_Seek                   0x6b
#define SWI_Flen                   0x6c

#define SWI_IsTTY                  0x6e
#define SWI_TmpNam                 0x6f
#define SWI_InstallHandler         0x70
#define SWI_GenerateError          0x71

/* This requires that the validation SWI numbers for WriteS, Write0, Exit and
EnterOS are changed. */

/* some armulator constants */
#define ADDRSOFHANDLERS 0xad0L  /* address and workspace for installed handlers */
#define ADDRCMDLINE     0xf00L  /* address and workspace for installed handlers */
#define ADDRUSERSTACK   0x80000L        /* default user stack start */

/*************************************************************\
*                                                             *
* swis.h: SWI interception routines and structure definitions *
*                                                             *
\*************************************************************/

/* An outline of the way that the SWI interception mechanism works:       */
/*                                                                        */
/* * When a SWI is executed, its number is passed to this module for      */
/*   recognition. If unrecognised, the normal SWI exception entry         */
/*   sequence is obeyed. Otherwise:                                       */
/* * The PSR manipulations appropriate to a SWI entry sequence are done   */
/*   (to ensure that all memory transactions, etc., are done with the     */
/*   right privileges).                                                   */
/* * Enough no-op cycles are executed to ensure that all register values, */
/*   etc., have settled down and there are no more outstanding changes to */
/*   them waiting to occur.                                               */
/* * This module is called, with a data structure telling it that a new   */
/*   SWI has been encountered and telling it what the register values and */
/*   SPSR_svc value (i.e. the calling code's CPSR value) are.             */
/* * Zero or more times, this module may return a request asking for a    */
/*   memory load word, store word, load byte or store byte operation to   */
/*   be performed. Each time it does this, the Core will attempt to       */
/*   perform the requested operation, then call this module again with an */
/*   indication of its success or failure. (Note: this is not a very fast */
/*   mechanism, though considerably faster than e.g. emulating a software */
/*   routine to extract a string from memory. Its main advantage is       */
/*   free maintainence: provided the memory system can handle LDRs,       */
/*   LDRBs, STRs and STRBs correctly, it will support this mechanism. A   */
/*   faster approach which could be added in future would allow the SWI   */
/*   interceptor to interrogate and change the value of memory by direct  */
/*   calls to the memory system. This would however require the relevant  */
/*   memory system functions to be rewritten each time the memory system  */
/*   was changed.)                                                        */
/* * Before, after or during these requests, this module is allowed to    */
/*   change the register values and SPSR_svc value it was given by        */
/*   overwriting them with the values it wants to be used instead.        */
/* * Eventually, this module should return a request for the SWI handling */
/*   to be terminated. At this point, the Core will retrieve the register */
/*   and SPSR_svc values and use them to modify its internal data         */
/*   structures to reflect an appropriate return from exception, then     */
/*   execute enough no-op cycles to let everything settle down again.     */
/* * Finally, the SWI having finished executing as far as the Core is     */
/*   concerned, it will be recorded in the Executed Instruction Stream    */
/*   file.                                                                */
/* * As an alternative to asking for SWI handling to be terminated, the   */
/*   SWI handler can ask for the simulation to be halted. This will       */
/*   complete the instruction as above, halting the simulation at the     */
/*   end. (Completing the execution of the instruction before halting     */
/*   ensures that the world is in a consistent, inspectable and           */
/*   restartable state.)                                                  */
/*                                                                        */
/* Some unspecified number of cycles will be used by this process. (If    */
/* accurate cycle counts are wanted for the SWIs in a program, the only   */
/* real option is to emulate the proper SWI handler rather than using     */
/* this mechanism.)                                                       */

/* The main structure by which this code communicates with the Armul8     */
/* Core in eu.c.                                                          */

typedef struct Core_SWIs {

    unsigned32 SWINumber;       /* The number of the SWI concerned.       */
    unsigned   Status;          /* Tells the SWI handler what happened to */
                                /*  its last request (see below for       */
                                /*  possible values).                     */
    unsigned   Request;         /* Set by the SWI handler to request a    */
                                /*  memory transaction or the end of the  */
                                /*  SWI handling (see below for possible  */
                                /*  values).                              */
    unsigned32 Address;         /* Set by the SWI handler to specify the  */
                                /*  address of a memory transaction.      */
    unsigned32 Data;            /* Set by the SWI handler to specify the  */
                                /*  data for a store operation, or by the */
                                /*  Core to return the data for a load    */
                                /*  operation.                            */
    unsigned32 Spsr;            /* Tells the SWI handler what the value   */
                                /*  of SPSR_svc is (i.e. the calling      */
                                /*  program's CPSR); set by the SWI       */
                                /*  handler to change the calling         */
                                /*  program's CPSR when SWI handling      */
                                /*  terminates.                           */
    unsigned32 Regs[15];        /* Tells the SWI handler what the values  */
                                /*  of its registers are (i.e. R0-R12,    */
                                /*  R13_svc and R14_svc); set by the SWI  */
                                /*  handler to change the values of these */
                                /*  registers.                            */
  } Core_SWIs;

/* Note that access is not given to the CPSR and R15 because the SWI      */
/* interceptor is really a shortcut for an emulated SWI handler. The      */
/* state of R15 and the CPSR at the start of this code are easily         */
/* determined from the information that is given (i.e. R15 = 0x00000008,  */
/* CPSR = SPSR_svc with mode number changed to 10011 and the I bit forced */
/* to 1). Their state at any later point in the code is indeterminate,    */
/* and any changes to them will be overwritten by R14_svc and SPSR_svc    */
/* when the SWI handler returns.                                          */
/*                                                                        */
/* Access is not given to other modes' banked registers or SPSRs for the  */
/* sake of simplicity and because there doesn't seem to be any need to do */
/* so.                                                                    */

/* Possible values of the 'Status' field are:                             */
/*   * No previous request made - this is a new SWI.                      */
/*   * Previous request successful.                                       */
/*   * Previous request unsuccessful because of a memory system abort.    */

#define SWISTATUS_NEW   0
#define SWISTATUS_DONE  1
#define SWISTATUS_ABORT 2

/* Possible values for the 'Request' field are:                           */
/* (1) Ask for a word store of 'Data' at 'Address' (this address should   */
/*     be word-aligned, and it is unspecified what store operation will   */
/*     take place if it isn't);                                           */
/* (2) Ask for a word load of 'Data' from 'Address' (this address should  */
/*     be word-aligned, and it is unspecified what load operation will    */
/*     take place if it isn't);                                           */
/* (3) Ask for a byte store of the bottom byte of 'Data' at 'Address'.    */
/*     (The other three bytes of 'Data' are ignored.)                     */
/* (4) Ask for a byte load of the bottom byte of 'Data' from 'Address'.   */
/*     (The other three bytes of 'Data' are cleared to zeros.)            */
/* (5) Ask for the register values in 'Regs' and 'Spsr' to be written     */
/*     back to R0-R12, R13_svc, R14_svc and SPSR_svc, and then for the    */
/*     SWI to be returned from as though MOVS PC,R14 had been executed.   */
/* (6) As (5), except that the return is as though a MOV PC,R14 had been  */
/*     executed.                                                          */
/* (7) As (5), plus asking for the simulation to be halted.               */

#define SWIREQUEST_STR          0
#define SWIREQUEST_LDR          1
#define SWIREQUEST_STRB         2
#define SWIREQUEST_LDRB         3
#define SWIREQUEST_END          4
#define SWIREQUEST_NOCPSRUPDATE 5
#define SWIREQUEST_HALT         6

/* The initialisation routine - this allows the SWI interception routines */
/* to do any initialisation they want to.                                 */

extern void armul8swis_init(void);

/* Routine for the Core to ask whether a SWI number is recognised. Must   */
/* return TRUE if the SWI interceptor wants to handle the SWI, FALSE if   */
/* it doesn't. Must not do any processing of the SWI: this is done by     */
/* later calls to 'armul8swis_process'.                                   */

//extern unsigned armul8swis_recognise(unsigned32 swinumber,armul8_state *state);

/* Routine for the Core to return the result of the previous request for  */
/* this SWI (if any) and to ask for another request.                      */

extern void armul8swis_process(Core_SWIs *data, char *cmdline);

#endif
