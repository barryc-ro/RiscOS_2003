/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

#ifndef DEFS
#define DEFS

#include "host.h"

/******************************************\
*                                          *
* defs.h: basic definitions of types, etc. *
*                                          *
\******************************************/

#ifndef __STDC__
#define const /*Nothing*/
#endif

/* The following definitions should be modified and/or conditionally      */
/* compiled if necessary to ensure that they produce unsigned/signed      */
/* integer types of precisely the correct length.                         */

/* We did have "typedef unsigned long unsigned32;" here, but this is now  */
/* done by the "host.h" included file. That file doesn't yet do the       */
/* following definition, though, which may still need to be changed       */
/* depending on the host system.                                          */
/*   Similarly, all occurrences of the "signed32" type that was defined   */
/* here have been replaced with the "int32" type defined in "host.h".     */

#define UNSIGNED32_FMT "%08lX"

/***********************************\
*                                   *
* Macros for bit manipulation, etc. *
*                                   *
\***********************************/

/* Bit n of a word, in the original position. */

#define BIT(word,n) ((word)&(((unsigned32)1)<<(n)))

/* Bits m to n inclusive of a word, shifted down to low end. */

#define BITS(word,m,n) ((unsigned32)((word)<<(31-(n))) >> ((31-(n))+(m)))

/********************\
*                    *
* The ARM conditions *
*                    *
\********************/

#define COND_EQ 0x0
#define COND_NE 0x1
#define COND_CS 0x2
#define COND_CC 0x3
#define COND_MI 0x4
#define COND_PL 0x5
#define COND_VS 0x6
#define COND_VC 0x7
#define COND_HI 0x8
#define COND_LS 0x9
#define COND_GE 0xA
#define COND_LT 0xB
#define COND_GT 0xC
#define COND_LE 0xD
#define COND_AL 0xE
#define COND_NV 0xF

/*********************\
*                     *
* The ARM shift types *
*                     *
\*********************/

#define SHIFT_LSL     0
#define SHIFT_LSR     1
#define SHIFT_ASR     2
#define SHIFT_ROR_RRX 3

/************************\
*                        *
* The ARM ALU operations *
*                        *
\************************/

#define ALUOP_AND 0x0
#define ALUOP_EOR 0x1
#define ALUOP_SUB 0x2
#define ALUOP_RSB 0x3
#define ALUOP_ADD 0x4
#define ALUOP_ADC 0x5
#define ALUOP_SBC 0x6
#define ALUOP_RSC 0x7
#define ALUOP_TST 0x8
#define ALUOP_TEQ 0x9
#define ALUOP_CMP 0xA
#define ALUOP_CMN 0xB
#define ALUOP_ORR 0xC
#define ALUOP_MOV 0xD
#define ALUOP_BIC 0xE
#define ALUOP_MVN 0xF

/******************************************\
*                                          *
* Combinations of ALU operation with S bit *
*                                          *
\******************************************/

#define ALUOPS_AND  (ALUOP_AND << 1)
#define ALUOPS_EOR  (ALUOP_EOR << 1)
#define ALUOPS_SUB  (ALUOP_SUB << 1)
#define ALUOPS_RSB  (ALUOP_RSB << 1)
#define ALUOPS_ADD  (ALUOP_ADD << 1)
#define ALUOPS_ADC  (ALUOP_ADC << 1)
#define ALUOPS_SBC  (ALUOP_SBC << 1)
#define ALUOPS_RSC  (ALUOP_RSC << 1)
#define ALUOPS_CTL1 (ALUOP_TST << 1)
#define ALUOPS_CTL2 (ALUOP_TEQ << 1)
#define ALUOPS_CTL3 (ALUOP_CMP << 1)
#define ALUOPS_CTL4 (ALUOP_CMN << 1)
#define ALUOPS_ORR  (ALUOP_ORR << 1)
#define ALUOPS_MOV  (ALUOP_MOV << 1)
#define ALUOPS_BIC  (ALUOP_BIC << 1)
#define ALUOPS_MVN  (ALUOP_MVN << 1)
#define ALUOPS_ANDS ((ALUOP_AND << 1) + 1)
#define ALUOPS_EORS ((ALUOP_EOR << 1) + 1)
#define ALUOPS_SUBS ((ALUOP_SUB << 1) + 1)
#define ALUOPS_RSBS ((ALUOP_RSB << 1) + 1)
#define ALUOPS_ADDS ((ALUOP_ADD << 1) + 1)
#define ALUOPS_ADCS ((ALUOP_ADC << 1) + 1)
#define ALUOPS_SBCS ((ALUOP_SBC << 1) + 1)
#define ALUOPS_RSCS ((ALUOP_RSC << 1) + 1)
#define ALUOPS_TST  ((ALUOP_TST << 1) + 1)
#define ALUOPS_TEQ  ((ALUOP_TEQ << 1) + 1)
#define ALUOPS_CMP  ((ALUOP_CMP << 1) + 1)
#define ALUOPS_CMN  ((ALUOP_CMN << 1) + 1)
#define ALUOPS_ORRS ((ALUOP_ORR << 1) + 1)
#define ALUOPS_MOVS ((ALUOP_MOV << 1) + 1)
#define ALUOPS_BICS ((ALUOP_BIC << 1) + 1)
#define ALUOPS_MVNS ((ALUOP_MVN << 1) + 1)

/***************************\
*                           *
* The ARM exception vectors *
*                           *
\***************************/

#define VECTOR_RESET  0x00000000
#define VECTOR_UNDEF  0x00000004
#define VECTOR_SWI    0x00000008
#define VECTOR_PABORT 0x0000000C
#define VECTOR_DABORT 0x00000010
#define VECTOR_UNUSED 0x00000014
#define VECTOR_IRQ    0x00000018
#define VECTOR_FIQ    0x0000001C

/***************\
*               *
* The ARM modes *
*               *
\***************/

#define MODE_USER26   0x00
#define MODE_FIQ26    0x01
#define MODE_IRQ26    0x02
#define MODE_SVC26    0x03
#define MODE_USER32   0x10
#define MODE_FIQ32    0x11
#define MODE_IRQ32    0x12
#define MODE_SVC32    0x13
#define MODE_ABORT32  0x17
#define MODE_UNDEF32  0x1B
#define MODE_SYSTEM32 0x1F

/**************************************\
*                                      *
* Fields from general ARM instructions *
*                                      *
\**************************************/

#define IFIELD_RM(instr)    (BITS((instr),0,3))
#define IFIELD_RS(instr)    (BITS((instr),8,11))
#define IFIELD_RD(instr)    (BITS((instr),12,15))
#define IFIELD_RN(instr)    (BITS((instr),16,19))
#define IFIELD_COND(instr)  (BITS((instr),28,31))

/*******************************\
*                               *
* Bits from Branch instructions *
*                               *
\*******************************/

#define BRANCH_LBIT(instr)  (BIT((instr),24))
#define BRANCH_L_BIT        ((unsigned32) 0x01000000)

/***************************************************\
*                                                   *
* Bits and fields from data processing instructions *
*                                                   *
\***************************************************/

#define DP_SBIT(instr)      (BIT((instr),20))
#define DP_S_BIT            ((unsigned32) 0x00100000)
#define IFIELD_DPOPS(instr) (BITS((instr),20,24))
#define IFIELD_DPOP(instr)  (BITS((instr),21,24))
#define DP_IBIT(instr)      (BIT((instr),25))
#define DP_I_BIT            ((unsigned32) 0x02000000)

/********************************\
*                                *
* Bits from MRS/MSR instructions *
*                                *
\********************************/

#define PSRXFER_CTLBIT(instr) (BIT((instr),16))
#define PSRXFER_CTL_BIT       ((unsigned32) 0x00010000)
#define PSRXFER_FLGBIT(instr) (BIT((instr),19))
#define PSRXFER_FLG_BIT       ((unsigned32) 0x00080000)
#define PSRXFER_MSRBIT(instr) (BIT((instr),21))
#define PSRXFER_MSR_BIT       ((unsigned32) 0x00200000)
#define PSRXFER_SBIT(instr)   (BIT((instr),22))
#define PSRXFER_S_BIT         ((unsigned32) 0x00400000)

/*********************************\
*                                 *
* Bits from multiply instructions *
*                                 *
\*********************************/

#define MUL_SBIT(instr)     (BIT((instr),20))
#define MUL_S_BIT           ((unsigned32) 0x00100000)
#define MUL_ABIT(instr)     (BIT((instr),21))
#define MUL_A_BIT           ((unsigned32) 0x00200000)
#define MUL_UBIT(instr)     (BIT((instr),22))
#define MUL_U_BIT           ((unsigned32) 0x00400000)
#define MUL_LBIT(instr)     (BIT((instr),23))
#define MUL_L_BIT           ((unsigned32) 0x00800000)

/**************************************\
*                                      *
* Bits from data transfer instructions *
*                                      *
\**************************************/

/* There are four main categories of these instructions, based on where   */
/* they lie in the instruction space:                                     */
/*   H. SWP instructions and the new halfword/signed byte LDR/STRs (bits  */
/*      27:26 = 00)                                                       */
/*   W. The traditional LDR/STR instructions (bits 27:26 = 01).           */
/*   M. LDM/STM instructions (bits 27:26 = 10).                           */
/*   C. LDC/STC instructions (bits 27:26 = 11).                           */
/* Many bits are shared between at least two categories: these are        */
/* prefixed with just DT. Ones which are specific to a particular         */
/* category are prefixed with DTH, DTW, DTM or DTC as appropriate.        */

#define DTH_HBIT(instr)     (BIT((instr),5))     /* LDRH/STRH/LDRSB/LDRSH */
#define DTH_H_BIT           ((unsigned32) 0x00000020)
#define DTH_SBIT(instr)     (BIT((instr),6))     /* LDRH/STRH/LDRSB/LDRSH */
#define DTH_S_BIT           ((unsigned32) 0x00000040)
#define DT_LBIT(instr)      (BIT((instr),20))                  /* Not SWP */
#define DT_L_BIT            ((unsigned32) 0x00100000)
#define DT_WBIT(instr)      (BIT((instr),21))                  /* Not SWP */
#define DT_W_BIT            ((unsigned32) 0x00200000)
#define DT_BBIT(instr)      (BIT((instr),22))         /* LDR/STR/SWP only */
#define DT_B_BIT            ((unsigned32) 0x00400000)
#define DTH_IBIT(instr)     (BIT((instr),22))    /* LDRH/STRH/LDRSB/LDRSH */
#define DTH_I_BIT           ((unsigned32) 0x00400000)
#define DTM_SBIT(instr)     (BIT((instr),22))             /* LDM/STM only */
#define DTM_S_BIT           ((unsigned32) 0x00400000)
#define DTC_NBIT(instr)     (BIT((instr),22))             /* LDC/STC only */
#define DTC_N_BIT           ((unsigned32) 0x00400000)
#define DT_UBIT(instr)      (BIT((instr),23))                  /* Not SWP */
#define DT_U_BIT            ((unsigned32) 0x00800000)
#define DT_PBIT(instr)      (BIT((instr),24))                  /* Not SWP */
#define DT_P_BIT            ((unsigned32) 0x01000000)
#define DTW_IBIT(instr)     (BIT((instr),25))             /* LDR/STR only */
#define DTW_I_BIT           ((unsigned32) 0x02000000)

/* Also a bit to distinguish the H category and W category LDR/STRs from  */
/* each other.                                                            */

#define DT_WnotHBIT(instr)  (BIT((instr),26))
#define DT_WnotH_BIT        ((unsigned32) 0x04000000)

/***********************************************\
*                                               *
* Bits and fields from coprocessor instructions *
*                                               *
\***********************************************/

#define CP_RTnotDOBIT(instr)   (BIT((instr),4))
#define CP_RTnotDO_BIT         ((unsigned32) 0x00000010)
#define CP_MRCnotMCRBIT(instr) (BIT((instr),20))
#define CP_MRCnotMCR_BIT       ((unsigned32) 0x00100000)
#define CP_NUMBER(instr)       (BITS((instr),8,11))

/****************************************************\
*                                                    *
* Macros to test specific properties of instructions *
*                                                    *
\****************************************************/

/* Whether an instruction (which must be known to be a data processing    */
/* instruction) is a "comparison".                                        */

#define COMPARISON(instr) (BITS((instr),23,24) == 0x2)

/************************************\
*                                    *
* PSR and PC bit and field positions *
*                                    *
\************************************/

#define MODEBITS(psr) (BITS((psr),0,4))
#define MODE32(psr)   (BIT((psr),4))
#define MODE_BITS     ((unsigned32) 0x0000001F)
#define MODE26_BITS   ((unsigned32) 0x00000003)

#define MASKBITS(psr) (BITS((psr),6,7))
#define FBIT(psr)     (BIT((psr),6))
#define F_BIT         ((unsigned32) 0x00000040)
#define IBIT(psr)     (BIT((psr),7))
#define I_BIT         ((unsigned32) 0x00000080)
#define MASK_BITS     (F_BIT | I_BIT)
#define MASK26MOVE    20
#define MASK26_BITS   (MASK_BITS << MASK26MOVE)

#define FLAGBITS(psr) (BITS((psr),28,31))
#define VBIT(psr)     (BIT((psr),28))
#define V_BIT         ((unsigned32) 0x10000000)
#define CBIT(psr)     (BIT((psr),29))
#define C_BIT         ((unsigned32) 0x20000000)
#define ZBIT(psr)     (BIT((psr),30))
#define Z_BIT         ((unsigned32) 0x40000000)
#define NBIT(psr)     (BIT((psr),31))
#define N_BIT         ((unsigned32) 0x80000000)
#define FLAG_BITS     (V_BIT | C_BIT | Z_BIT | N_BIT)

#define CTL_BITS      (MODE_BITS | MASK_BITS)
#define PSR_BITS      (CTL_BITS | FLAG_BITS)
#define CTL26_BITS    (MODE26_BITS | MASK26_BITS)
#define PSR26_BITS    (CTL26_BITS | FLAG_BITS)

#define PC26_BITS     (~PSR26_BITS)
#define PC32_BITS     ((unsigned32) 0xFFFFFFFC)

#endif
