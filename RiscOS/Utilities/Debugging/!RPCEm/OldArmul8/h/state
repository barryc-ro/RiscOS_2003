/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
\**************************************************************************/

#ifndef STATE
#define STATE
#ifdef RISCOS_EMU
#include "armdefs.h"
#endif
#include "defs.h"
#include "cache_i.h"
#include "coproc_i.h"
#include "eu_i.h"
#include "extend_i.h"
#include "mmu_i.h"
#include "pu_i.h"
#include "armul8.h"

/**************************************************************************\
*                                                                          *
* state.h: definition of the main "state" data structure, including the    *
*   interfaces between blocks. Note that definitions relating to variables *
*   which are private to individual blocks are relegated to their own      *
*   private files.                                                         *
*                                                                          *
\**************************************************************************/


/************************************\
*                                    *
* The Core - Prefetch Unit interface *
*                                    *
\************************************/

typedef struct Core_PU {

    /* Signals from Core to PU */

    unsigned   ForcedPrefetch;  /* 1 bit:   stable ph1, changes ph2       */
    unsigned   AddressInUse;    /* 1 bit:   changes ph1, stable ph2       */
    unsigned   InstrAccepted;   /* 1 bit:   stable ph1, changes ph2       */
    unsigned   CFlags;          /* 4 bits:  stable ph1, changes ph2       */
                                /* (NB CFlags timing is not precisely     */
                                /* what the interface document says, but  */
                                /* it fits in better with how this        */
                                /* program will work.)                    */
    unsigned   NewInstr;        /* 1 bit:   stable ph1, changes ph2       */

    /* Signals from PU to Core */

    unsigned   InstructOnRdata; /* 1 bit:   stable ph1, changes ph2       */
    unsigned32 Instruct;        /* 32 bits: stable ph1, changes ph2       */
    unsigned   PAbort;          /* 1 bit:   stable ph1, changes ph2       */
    unsigned32 PcPlus8;         /* 30 bits: stable ph1, changes ph2       */
                                /* (NB bottom 2 bits of PcPlus8 are       */
                                /* always zero.)                          */
    unsigned   NoFetch;         /* 1 bit:   stable ph1, changes ph2       */
    unsigned   IgnoreBranch;    /* 1 bit:   stable ph1, changes ph2       */
    unsigned   CancelD;         /* 1 bit:   changes ph1, stable ph2       */
    unsigned   CancelE;         /* 1 bit:   changes ph1, stable ph2       */

  } Core_PU;

/*****************************************\
*                                         *
* The ARM8 (+ coprocs) - Memory interface *
*                                         *
\*****************************************/

typedef struct ARM8_Memory {

    /* Signals from ARM8 to Memory */

    unsigned   ARequest;        /* ? bits:  stable ph1, changes ph2       */
    unsigned32 VAddress;        /* 32 bits: changes phase 2               */
    unsigned32 Wdata;           /* 32 bits: changes both phases           */
    unsigned   Privileged;      /* 1 bit:   stable ph1, changes ph2       */
    unsigned   TwentySixBit;    /* 1 bit:   stable ph1, changes ph2       */
    unsigned   RRequestD;       /* ? bits:  stable ph1, changes ph2       */
    unsigned   NRRequestIC;     /* 1 bit:   stable ph1, changes ph2       */
    unsigned   NRRequestIP;     /* 1 bit:   stable ph1, changes ph2       */
                                /* There is a request for 2 instructions  */
                                /* if either NRRequestIC or NRRequestIP   */
                                /* is asserted (i.e. FALSE).              */

    /* Signals from Memory to ARM8 */

    unsigned   NConfirm;        /* ? bits:  stable ph1, changes ph2       */
    unsigned   AResponse;       /* ? bits:  changes ph1, stable ph2       */
    unsigned   DExhausted;      /* 1 bit:   changes ph1, stable ph2       */
    unsigned   IExhausted;      /* 1 bit:   changes ph1, stable ph2       */
    unsigned32 Rdata;           /* 32 bits: changes both phases           */
    unsigned   RResponse;       /* ? bits:  changes ph1, stable ph2       */

  } ARM8_Memory;

/* Values taken by the "ARequest" field. The allocated numbers are now    */
/* the correct encoding.                                                  */

#define AREQ_NONE        0x40  /* No operation                            */
#define AREQ_LOAD        0xC4  /* Read cache line into the DLB (normal)   */
#define AREQ_LOAD_M      0xCC  /* Read cache line into the DLB (with      */
                               /*  "more to come" hint)                   */
#define AREQ_LOAD_S      0xD4  /* Read cache line into the DLB (with      */
                               /*  sequentiality hint)                    */
#define AREQ_LOAD_SM     0xDC  /* Read cache line into the DLB (with      */
                               /*  sequentiality & "more to come" hints)  */
#define AREQ_LOAD_B      0xC0  /* Read cache line into the DLB (byte)     */
#define AREQ_LOAD_H      0xC2  /* Read cache line into the DLB (halfword) */
#define AREQ_LOAD_BX     0xC1  /* Read cache line into the DLB (byte swap)*/
#define AREQ_LOAD_X      0xC5  /* Read cache line into the DLB (swap)     */

#define AREQ_FETCH       0xE4  /* Read cache line into the ILB (normal)   */
#define AREQ_FETCH_S     0xF4  /* Read cache line into the ILB (with      */
                               /*  sequentiality hint)                    */
#define AREQ_SPEC        0xE6  /* "Speculative" version of AREQ_FETCH     */
#define AREQ_SPEC_S      0xF6  /* "Speculative" version of AREQ_FETCH_S   */
                               /* N.B. These last two are "speculative"   */
                               /* in the sense that they come from beyond */
                               /* a possibly mispredicted branch: the     */
                               /* memory system must refuse to accept     */
                               /* them if they would have undesirable     */
                               /* side effects, and may refuse to accept  */
                               /* them under any other circumstances.     */

#define AREQ_STORE       0x84  /* Store data at address (normal)          */
#define AREQ_STORE_M     0x8C  /* Store data at address (with "more to    */
                               /*  come" hint)                            */
#define AREQ_STORE_S     0x94  /* Store data at address (with             */
                               /*  sequentiality hint)                    */
#define AREQ_STORE_SM    0x9C  /* Store data at address (with             */
                               /*  sequentiality & "more to come" hints)  */
#define AREQ_STORE_B     0x80  /* Store data at address (byte)            */
#define AREQ_STORE_H     0x82  /* Store data at address (halfword)        */
#define AREQ_STORE_BX    0x81  /* Store data at address (byte swap)       */
#define AREQ_STORE_X     0x85  /* Store data at address (swap)            */

#define AREQ_CONTROL     0x60  /* Control operation via MCR: coproc 15    */
                               /*  supplies exact operation and response  */
                               /*  *must* be ARESP_DONE, possibly after   */
                               /*  some NConfirm cycles.                  */

/* Values taken by the "RRequestD" field. The allocated numbers are now   */
/* the correct encoding.                                                  */

#define RREQD_NONE       0 /* No operation                                */
#define RREQD_ONE        1 /* Return 1 data word from DLB                 */
#define RREQD_TWO        2 /* Return 2 data words from DLB                */

/* Values taken by the "AResponse" field. The allocated numbers are now   */
/* the correct encoding.                                                  */

#define ARESP_NOTDONE    0 /* No Access request was made, or the memory   */
                           /*  system has refused to accept a speculative */
                           /*  Access request.                            */
#define ARESP_ABORT      1 /* Abort.                                      */
#define ARESP_DONE       2 /* Successfully completed.                     */

/* Values taken by the "RResponse" field. The allocated numbers are now   */
/* the correct encoding.                                                  */

#define RRESP_NOTHING    0   /* No Return request was made, or the memory */
                             /*  system refused to accept the associated  */
                             /*  speculative Access request.              */
#define RRESP_DATA1      1   /* One data word will be returned            */
#define RRESP_DATA2      2   /* Two data words will be returned           */
#define RRESP_EXTABORT_D 3   /* (External) abort for data request         */
#define RRESP_INSTR1     5   /* One instruction will be returned          */
#define RRESP_INSTR2     6   /* Two instructions will be returned         */
#define RRESP_EXTABORT_I 7   /* (External) abort for instruction request  */

/*************************************\
*                                     *
* The ARM8 - External world interface *
*                                     *
\*************************************/

typedef struct ARM8_External {
    unsigned   BigEnd;
    unsigned   Fiq;
    unsigned   Irq;
    unsigned   Isync;
    unsigned   Reset;
  } ARM8_External;

/****************************************************\
*                                                    *
* The ARM8 - Extension (Multiply-Specific) interface *
*                                                    *
\****************************************************/

typedef struct ARM8_Extension {

    /* Core -> Extension signals */
    unsigned   MulEnable;    /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates that multiplier is to be       */
                             /*  enabled.                                 */
    unsigned   MulInit;      /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates that multiplier is to be       */
                             /*  initialised or re-initialised.           */
    unsigned   MulAcc;       /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates accumulate option is wanted.   */
    unsigned   MulSgn;       /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates signed multiply is wanted.     */
    unsigned   MulLong;      /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates a 64 bit result is wanted and  */
                             /*  accumulate value (if any) is 64 bits.    */
    unsigned   MulWrHigh;    /* 1 bit, changes phase 1, stable phase 2,   */
                             /*  requests output of high words of result. */
    unsigned   Interlocked;  /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  indicates core is expected to interlock  */
                             /*  next cycle. NB: Identical to the         */
                             /*  coprocessor interface 'Interlocked'      */
                             /*  variable below.                          */

    /* Extension -> Core signals */
    unsigned   MulTerm;      /* 1 bit, changes phase 1, stable phase 2,   */
                             /*  indicates current operation about to     */
                             /*  complete and output its results' low     */
                             /*  words.                                   */
    unsigned   MulC;         /* 1 bit, stable phase 1, changes phase 2,   */
                             /*  gives carry-in to final addition in      */
                             /*  Core's ALU.                              */

    /* Bi-directional A & B busses */
    unsigned32 ABus;         /* 32 bits, changes both phases, bus for     */
                             /*  sending operands to multiplier and       */
                             /*  results to Core.                         */
    unsigned32 BBus;         /* 32 bits, changes both phases, bus for     */
                             /*  sending operands to multiplier and       */
                             /*  results to Core.                         */
  } ARM8_Extension;

/***********************************\
*                                   *
* The ARM8 - Coprocessors interface *
*                                   *
\***********************************/

typedef struct ARM8_Coprocs {

    /* Core -> Coprocessors signals */
    unsigned32 CInstruct;     /* 26 bits, changes phase 1, stable phase   */
                              /*  2, gives the instruction entering the   */
                              /*  Decode stage when CEnterDecode=1 (top   */
                              /*  two bits are 11 for SWI, other non-     */
                              /*  coprocessor instruction or "nofetch     */
                              /*  instruction".                           */
    unsigned   CEnterDecode;  /* 1 bit, changes phase 1, stable phase 2,  */
                              /*  indicates an instruction has entered    */
                              /*  the Decode stage.                       */
    unsigned   CEnterExecute; /* 1 bit, changes phase 1, stable phase 2,  */
                              /*  indicates an instruction has entered    */
                              /*  the Execute stage.                      */
    unsigned   CExecute;      /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates whether the Execute stage     */
                              /*  instruction really should be executed.  */
    unsigned   Interlocked;   /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates core is expected to interlock */
                              /*  next cycle. NB: Identical to the        */
                              /*  multiplier interface 'Interlocked'      */
                              /*  variable above.                         */

    /* Coprocessors -> Core signals */
    unsigned   CBounceD;      /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates that instruction in the       */
                              /*  Decode stage must be bounced if it      */
                              /*  advances to the Execute stage.          */
    unsigned   CBounceE;      /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates that busy-waiting instruction */
                              /*  in the Execute stage must be bounced.   */
    unsigned   CBusyWaitD;    /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates that instruction in the       */
                              /*  Decode stage must be busy-waited if it  */
                              /*  advances to the Execute stage.          */
    unsigned   CBusyWaitE;    /* 1 bit, stable phase 1, changes phase 2,  */
                              /*  indicates that busy-waiting instruction */
                              /*  in the Execute stage must continue      */
                              /*  busy-waiting.                           */

    /* Bidirectional bus */
    unsigned32 CData;         /* 32 bits, changes phase 1, stable phase   */
                              /*  2, carries data for MCR and MRC (and    */
                              /*  STC).                                   */

  } ARM8_Coprocs;

/* The main "state" data structure itself */

typedef struct armul8_state {
    Core_PU             core_pu;
    ARM8_Memory         arm8_memory;
    ARM8_External       arm8_external;
    ARM8_Extension      arm8_extension;
    ARM8_Coprocs        arm8_coprocs;
    CacheInternalState  cacheint;
    CoprocInternalState coprocint;
    CoreInternalState   coreint;
    ExtendInternalState extendint;
    MMUInternalState    mmuint;
    PUInternalState     puint;
    Sim_Info_rec        *sim_info;  /* Backdoor to allow simulation-      */
                                    /* affecting instructions - e.g. a    */
                                    /* SWI to exit the simulation         */
#ifdef RISCOS_EMU
    ARMul_State         *arc_state;
#endif
  } armul8_state;

/* Some macros to help access the state pointed to by the variable        */
/* "state".                                                               */

/* For accessing the Core - PU interface */
#define CORE_PU state->core_pu

/* For accessing the ARM8 (+ coprocs) - Memory interface */
#define ARM8_MEM state->arm8_memory

/* For accessing the ARM8 - External world interface */
#define ARM8_EXT state->arm8_external

/* For accessing the ARM8 - Core Extension interface */
#define ARM8_EXTEND state->arm8_extension

/* For accessing the ARM8 - Coprocessors interface */
#define ARM8_COPROC state->arm8_coprocs

/* For accessing the PU internal state */
#define PUINT    state->puint
#endif
