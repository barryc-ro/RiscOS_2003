/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

#ifndef EU_I
#define EU_I

#include "swis.h"

/**************************************************************************\
*                                                                          *
*   eu_i.h: definition of the core's internal "state" data structure.      *
*                                                                          *
\**************************************************************************/

#define UNPREDICTABLE_MESSAGE_LIMIT 10

/* A data structure to buffer up 'unpredictable behaviour' messages.      */

typedef struct UnpredBuffer {

    int         counter;               /* Where we are in the arrays.     */
    unsigned32  instrs[UNPREDICTABLE_MESSAGE_LIMIT];
    int         reasons[UNPREDICTABLE_MESSAGE_LIMIT];
    unsigned32  extras[UNPREDICTABLE_MESSAGE_LIMIT];

  } UnpredBuffer;

/* Variables representing the ARM8 core's internal state - registers,     */
/* instruction pipeline, etc.                                             */
/*                                                                        */
/* Notes:                                                                 */
/* 1. The register bank is written to at the same time as the real ARM8's */
/*    register bank is. But note that it is generally read up to about a  */
/*    full cycle after the real ARM8 would read it: this is done to avoid */
/*    the need for forwarding. This means that load interlocks are the    */
/*    only data-hazard-related work we have to deal with.                 */
/* 2. The Core doesn't keep track of what happens to instruction RETURN   */
/*    requests that it has issued (i.e. forced prefetches): once it has   */
/*    issued the request, any further handling of it is the Prefetch      */
/*    Unit's responsibility. The "areqM" and "rreqM" fields are therefore */
/*    only for tracking the outstanding requests related to *data*.       */

typedef struct CoreInternalState {

    /* Miscellaneous state information.                                   */

    int         stateE;                /* The state of the core's Execute */
                                       /*  state machine.                 */
    int         newstateE;             /* The next value of the 'stateE'  */
                                       /*  field.                         */
    unsigned32  excaddress;            /* The exception address while in  */
                                       /*  an exception entry sequence.   */
                                       /*  (NB acts as a sort of substate */
                                       /*  field.)                        */
    unsigned32  newexcaddress;         /* The next value of the           */
                                       /*  'excaddress' field.            */
    unsigned    interlocked;           /* Set if the current cycle is     */
                                       /*  interlocked.                   */
    unsigned    newinterlocked;        /* The next value of the           */
                                       /*  'interlocked' field.           */
    unsigned    busywaited;            /* Set if the current cycle is     */
                                       /*  busy-waited by a coprocessor.  */
    unsigned    aborting;              /* Set to indicate that we're      */
                                       /*  getting a data abort.          */
    unsigned32  abusreg;               /* Register being read on to the A */
                                       /*  bus, or NOREADVAL.             */
    unsigned32  bbusreg;               /* Register being read on to the A */
                                       /*  bus, or NOREADVAL.             */
    unsigned    aluforwarda;           /* Whether early ALU forwarding    */
    unsigned    aluforwardb;           /*  was done to the A/B buses.     */
    unsigned32  intseqpt_base;         /* Where an interrupt is supposed  */
    unsigned    intseqpt_sub4;         /*  to return to, and whether it   */
                                       /*  is 4 too large (which it will  */
                                       /*  be if derived from a PcPlus8   */
                                       /*  value, but not if from a       */
                                       /*  forced prefetch address.       */
    unsigned32  newintseqpt_base;      /* Ditto, but the new values being */
    unsigned    newintseqpt_sub4;      /*  generated for when the current */
                                       /*  instruction/exception sequence */
                                       /*  completes.                     */
    unsigned    newinstr;              /* Whether an instruction is or is */
                                       /*  about to be in its first       */
                                       /*  Execute stage cycle.           */
    unsigned32  rdata1;                /* To hold Rdata values from late  */
    unsigned32  rdata2;                /*  one phase to early in the next */
                                       /*  phase.                         */
    unsigned32  abus;                  /* To hold ABus values from late   */
                                       /*  phase 1 to early in phase 2.   */
    unsigned32  bbus;                  /* To hold BBus values from late   */
                                       /*  phase 1 to early in phase 2.   */
    unsigned    mulc;                  /* To hold MulC values from late   */
                                       /*  phase 1 to early in phase 2.   */
    unsigned    carryhold;             /* To hold carry and zero flags    */
    unsigned    zerohold;              /*  between first and second write */
    unsigned    carryhold2;            /*  cycles of multiplication, plus */
    unsigned    zerohold2;             /*  second versions to deal with   */
                                       /*  pipeline advances correctly.   */
    unsigned32  shiftval;              /* To hold the shift amount for a  */
                                       /*  register-controlled shift from */
                                       /*  cycle that it is read to when  */
                                       /*  it is used.                    */
    unsigned32  feedback;              /* To hold intermediate value when */
                                       /*  ALU takes two cycles over a    */
                                       /*  calculation.                   */
    unsigned    enterdecode;           /* Whether instructions entered    */
    unsigned    enterexecute;          /*  the Decode and Execute stages  */
                                       /*  at the end of last cycle.      */

    /* Registers and PSRs.                                                */

    unsigned32  regs[30];              /* The register bank (see note 1). */
    unsigned32  psrs[6];               /* psrs[0] is the CPSR; others are */
                                       /*  the SPSRs.                     */

    /* Pipelined information.                                             */

    unsigned32  instrD;                /* Decode stage instruction.       */
    unsigned    abortedD;              /* Decode stage prefetch abort?    */
    unsigned32  pcplus8D;              /* Decode stage PC (+8 version).   */
    unsigned    cancelledD;            /* Decode stage instr. cancelled?  */
    unsigned    nobranchD;             /* Don't do branch part of Decode  */
                                       /*  stage instruction.             */
    unsigned32  instrE;                /* Execute stage instruction.      */
    unsigned    abortedE;              /* Execute stage prefetch abort?   */
    unsigned32  pcplus8E;              /* Execute stage PC (+8 version).  */
    unsigned    nobranchE;             /* Don't do branch part of Execute */
                                       /*  stage instruction.             */
    unsigned    areqE;                 /* Execute stage outstanding       */
                                       /*  ACCESS request from Core.      */
    unsigned    rreqE;                 /* Execute stage outstanding       */
                                       /*  RETURN request from Core (see  */
                                       /*  note 2).                       */
    unsigned32  writereg1E;            /* Execute stage 1st/only register */
                                       /*  to write from loaded data.     */
    unsigned32  writereg2E;            /* Execute stage 2nd register to   */
                                       /*  write from loaded data.        */
    unsigned32  writemodeE;            /* Mode for Execute stage writes.  */
    unsigned32  writeflagsE;           /* Flags for Execute stage writes  */
                                       /*  (see below for symbolic names) */
    unsigned32  aluwrite_regE;         /* Register to be written by the   */
                                       /*  Execute stage ALU write (15 =  */
                                       /*  no write).                     */
    unsigned32  aluwrite_modeE;        /* The mode for the Execute stage  */
                                       /*  ALU write.                     */
    unsigned32  aluwrite_valueE;       /* The value to be written by the  */
                                       /*  Execute stage ALU write.       */
    unsigned32  newcpsrE;              /* The Execute stage's new value   */
                                       /*  for the CPSR.                  */
    unsigned32  newspsrE;              /* The Execute stage's new value   */
                                       /*  for an SPSR.                   */
    unsigned32  newspsr_modeE;         /* Which SPSR is to receive the    */
                                       /*  Execute stage's new value.     */
    unsigned32  base_regE;             /* Which register is the current   */
    unsigned32  base_modeE;            /*  Execute stage base register,   */
    unsigned32  base_valueE;           /*  its mode, and what the         */
                                       /*  original value was, for base   */
                                       /*  register restoration after     */
                                       /*  data aborts.                   */
    unsigned32  pcplus8M;              /* Memory stage PC (+8 version).   */
    unsigned    areqM;                 /* Memory stage outstanding ACCESS */
                                       /*  request from Core.             */
    unsigned    rreqM;                 /* Memory stage outstanding RETURN */
                                       /*  request from Core (see note 2) */
    unsigned32  writereg1M;            /* Memory stage 1st/only register  */
                                       /*  to write from loaded data.     */
    unsigned32  writereg2M;            /* Memory stage 2nd register to    */
                                       /*  write from loaded data.        */
    unsigned32  writemodeM;            /* Mode for Memory stage writes.   */
    unsigned32  writeflagsM;           /* Flags for Memory stage writes.  */
                                       /*  (see below for symbolic names) */
    unsigned32  aluwrite_regM;         /* Register to be written by the   */
                                       /*  Memory stage ALU write (15 =   */
                                       /*  no write).                     */
    unsigned32  aluwrite_modeM;        /* The mode for the Memory stage   */
                                       /*  ALU write.                     */
    unsigned32  aluwrite_valueM;       /* The value to be written by the  */
                                       /*  Memory stage ALU write.        */
    unsigned32  newcpsrM;              /* The Memory stage's new value    */
                                       /*  for the CPSR.                  */
    unsigned32  newspsrM;              /* The Memory stage's new value    */
                                       /*  for an SPSR.                   */
    unsigned32  newspsr_modeM;         /* Which SPSR is to receive the    */
                                       /*  Memory stage's new value.      */
    unsigned32  base_regM;             /* Which register is the current   */
    unsigned32  base_modeM;            /*  Memory stage base register,    */
    unsigned32  base_valueM;           /*  its mode, and what the         */
                                       /*  original value was, for base   */
                                       /*  register restoration after     */
                                       /*  data aborts.                   */
    unsigned    storeM;                /* What value to put on Wdata in   */
                                       /*  Memory ph1. Symbolic names for */
                                       /*  the options appear below.      */
    unsigned32  storevalueM;           /* If so, the value to write.      */
    unsigned32  pcplus8W;              /* Write stage PC (+8 version).    */
    unsigned    areqW;                 /* Write stage outstanding ACCESS  */
                                       /*  request from Core.             */
    unsigned    rreqW;                 /* Write stage outstanding RETURN  */
                                       /*  request from Core (see note 2) */
    unsigned32  writereg1W;            /* Write stage 1st/only register   */
                                       /*  to write from loaded data.     */
    unsigned32  writereg2W;            /* Write stage 2nd register to     */
                                       /*  write from loaded data.        */
    unsigned32  writemodeW;            /* Mode for Write stage writes.    */
    unsigned32  writeflagsW;           /* Flags for Write stage writes.   */
                                       /*  (see below for symbolic names) */

    /* State information associated with "Multiple Access" instructions   */
    /* (i.e. LDMs and STMs).                                              */

    unsigned32  ma_reglist;            /* The remaining registers.        */
    int         ma_remove;             /* No. of registers 'update_penc'  */
                                       /*  is to advance by.              */
    /* In the following three fields, the value 16 is used to indicate    */
    /* "no register because end of list reached".                         */
    unsigned32  ma_reg1;               /* Registers waiting to be         */
    unsigned32  ma_reg2;               /*  transferred. Probably does not */
    unsigned32  ma_reg3;               /*  reflect hardware accurately.   */
    unsigned32  ma_reg4;
    unsigned    ma_more;               /* Whether there are any more      */
                                       /*  after 'reg4'.                  */
    unsigned32  ma_address;            /* The address which confirmed     */
                                       /*  responses have taken us up to. */
    unsigned32  ma_newaddress;         /* The address which the current   */
                                       /*  unconfirmed response will take */
                                       /*  us to.                         */
    unsigned    ma_doingR15;           /* Whether we're trying to load    */
                                       /*  load R15 this cycle.           */

    /* Latches to deal with the 1-cycle delay wanted for Isync = 1        */
    /* behaviour.                                                         */

    unsigned    fiq1;                  /* First set of latches.           */
    unsigned    irq1;
    unsigned    fiq2;                  /* Second set of latches.          */
    unsigned    irq2;

    /* Stuff to do with buffering up messages about UNPREDICTABLE         */
    /* behaviour. We need two buffers for these - one for instructions in */
    /* the Decode stage, one for instructions in the Execute stage. In    */
    /* order to move them from Decode to Execute quickly, we will use     */
    /* pointers to buffers.                                               */
    UnpredBuffer *newunpredbuffer, *unpredbuffer;
    UnpredBuffer unpredbuffer1, unpredbuffer2;

    /* Areas for information required by the 'armul8core_lastinstr' call. */
    unsigned32  lastinstr;
    unsigned32  lastpcplus8;
    int         laststate;
    unsigned    laststatus;

    /* Area to communicate with SWI interceptor.                          */
    Core_SWIs   core_swis;

  } CoreInternalState;

/* Definitions of the values of the "storeM" field.                       */

#define STORE_NOTHING  0
#define STORE_VALUE    1
#define STORE_BBUS     2

/* Definitions of the flags in the "writeflagsX" fields.                  */

#define WFLAG_BOFFSET  ((unsigned32) 0x3)  /* The byte offset of the load */
#define WFLAG_BYTE     ((unsigned32) 0x4)  /* Byte loaded, not word.      */
#define WFLAG_HALFWORD ((unsigned32) 0x8)  /* Halfword loaded, not word.  */
#define WFLAG_SIGNED   ((unsigned32) 0x10) /* Byte/halfword loaded is to  */
                                           /*  be treated as signed.      */
#define WFLAG_TOBBUS   ((unsigned32) 0x20) /* Value loaded in phase 1 to  */
                                           /*  be put on B bus for a      */
                                           /*  forced prefetch at the end */
                                           /*  of the cycle.              */
#define WFLAG_SETPSR   ((unsigned32) 0x40) /* Set CPSR from loaded value  */
                                           /*  in 26-bit mode or from     */
                                           /*  SPSR in 32-bit mode.       */
#define WFLAG_LATCH    ((unsigned32) 0x80) /* Load COREINT.rdata1 with    */
                                           /*  value from memory at end   */
                                           /*  of Memory cycle - normal   */
                                           /*  value is just whether a    */
                                           /*  register or PC value is    */
                                           /*  being loaded, but unusual  */
                                           /*  things are done with this  */
                                           /*  during SWP, to make aborts */
                                           /*  work correctly.            */

#endif
