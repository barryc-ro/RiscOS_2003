/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*/
#ifndef ARM_CACHE
#define ARM_CACHE

/* general type definitions                                                */

#ifdef __CACHE__

/* system include files                                                    */

/* local include files                                                     */
#include "defs.h"
#include "ram.h"

/* cache replacement schemes                                               */
#define LRU                    0 /* Least Recently Used replacement        */
#define FIFO                   1 /* Round robin replacement                */
#define GODS                   2 /* ? replacement                          */
#define RAND                   3 /* "Random" replacement                   */
#define CACHE_REPLACEMENT      RAND    /* default setting                  */

/* cache read schemes                                                      */
#define CACHE_SERIAL           0 /* TAG + DATA operates in serial mode     */
#define CACHE_PIPELINED_SERIAL 1 /* "early address" in parallel with read  */
#define CACHE_PARALLEL         2 /* TAG & DATA operates in parallel        */
#define CACHE_DYNAMIC_PAR_SER  3 /* switching between parallel & serial    */
#define CACHE_READ_SCHEME      CACHE_SERIAL  /* default setting            */

/* cache "same line access"                                                */
#define CACHE_ACCESS_INTERFACE 0 /* "same line access" interface detection */
#define CACHE_ONE_LINE_COMPARE 1 /* one same-line-address-comparator       */
#define CACHE_LINE_ACCESS      CACHE_ACCESS_INTERFACE  /* default setting  */

/* cache related definitions                                               */
#define CACHE_SIZE_IN_BYTES 16384 /* default cache size in bytes (S)       */
#define CACHE_ASSOCIATIVITY    4 /* default cache associativity (4-way) (A)*/
#define CACHE_LINE_LENGTH      4 /* default line length in 32 bit words (L)*/
#define CACHE_LINES   (CACHE_SIZE_IN_BYTES/(4*CACHE_LINE_LENGTH)) /* (N)   */
#define CACHE_LINES_IN_SET     (CACHE_LINES/CACHE_ASSOCIATIVITY)  /* (H)   */
#define CACHE_BLOCKS_PER_LINE  2 /* default number of blocks per line (B)  */
#define CACHE_TAG_BITS        21 /* default number of bits in TAG address  */
                                 /* calculated as : 32-2-Log2(L)-Log2(H)   */
#define CACHE_IDX_BITS         7 /* default number of bits in INDEX address*/
                                 /* calculated as: 32-tag-linepos-bytepos  */
#define CACHE_LINE_BITS        2 /* CACHE_ASSOCIATIVITY in binary!         */

#define CACHE_ILBS             4 /* default number of ILB's                */
#define CACHE_DLBS             4 /* default number of DLB's                */

/* Cache <-> RAM access times for cache misses                             */
#define CACHE_MISS             1 /* in CORE cycles                         */
#define CACHE_RAM_RANDOM       6 /* in CORE cycles                         */
#define CACHE_RAM_PAGE         2 /* in CORE cycles                         */
#define CACHE_RAM_PIPELINED    1 /* in CORE cycles when pipelined cache    */
#define CACHE_LINE_FETCH_TIME  (CACHE_MISS+CACHE_RAM_RANDOM+\
                                (CACHE_LINE_LENGTH-1)*CACHE_RAM_PAGE)
                                 /* have to add CACHE_RAM_PIPELINED if used*/

/* Data structure containing statistics on the cache during emulation      */
#define MSB                   32 /* word length!! 32 bits                  */
#define CACHE_TAG_ADDRESS(x)   (BITS(x, MSB-CACHE_TAG_BITS, MSB-1))
#define CACHE_IDX_ADDRESS(x)   (BITS(x, MSB-CACHE_TAG_BITS-CACHE_IDX_BITS, MSB-CACHE_TAG_BITS-1))
#define CACHE_LINE_POS(x)      (BITS(x, MSB-CACHE_TAG_BITS-CACHE_IDX_BITS-CACHE_LINE_BITS, MSB-CACHE_TAG_BITS-CACHE_IDX_BITS-1))

typedef struct _cache_stats {
  unsigned long requests;        /* total number of memory requests        */
  unsigned long hits;            /* total number of cache hits             */

} CacheStatistics;

/* The cache used for the emulation                                        */

/* Single level cache model                                                */

typedef struct _sl_tag {
  unsigned32 address;            /* tag addr consisting of CACHE_TAG_BITS  */
  unsigned char dirty[CACHE_BLOCKS_PER_LINE]; /* #dirty bits/cache line    */
  unsigned char valid[CACHE_BLOCKS_PER_LINE]; /* #valid bits/cache line    */
  unsigned char lru[CACHE_BLOCKS_PER_LINE];   /* LRU replacement info      */
} TagEntry;

typedef TagEntry Tag[CACHE_LINES_IN_SET];     /* one tag memory part       */

typedef unsigned32 Data[CACHE_LINES_IN_SET][CACHE_LINE_LENGTH];  /* the actual cache data!!   */
typedef unsigned32 Ilbs[CACHE_ILBS];          /* the cache ILB data!!      */
typedef unsigned32 Dlbs[CACHE_DLBS];          /* the cache DLB data!!      */

typedef struct _arm_cache_sl {
  Tag  cacheTags[CACHE_ASSOCIATIVITY];
  Data cacheData[CACHE_ASSOCIATIVITY];
  Ilbs cacheIlbs;
  Dlbs cacheDlbs;
} SingleLevelCache;

#else  /* __CACHE__ not defined                                            */

#ifdef LINT

extern void ca_initialise_cache();   /* initialises the ARM800 cache       */
extern int  ca_write_to_cache();     /* writes word to cache               */
extern int  ca_read_from_cache();    /* reads word from cache              */
extern int  ca_is_in_cache();        /* checks whether a word is cached    */
extern int  ca_line_replacement();   /* replace cache line using setting   */
extern int  ca_dlb_depth();          /* #items in DLB                      */
extern int  ca_ilb_depth();          /* #items in ILB                      */
extern int  cache_line_dirty();      /* returns first "clean" set in line  */
extern int  is_set_valid();          /* checks the validity of a given set */

#else  /* LINT not defined                                                 */

#ifdef RISCOS_EMU
extern void ca_initialise_cache(armul8_state *);
extern int  ca_write_to_cache(unsigned32, unsigned32, unsigned, unsigned, armul8_state *);
extern int  ca_read_from_cache(unsigned32 *, unsigned32, unsigned, unsigned, armul8_state *);
#else
extern void ca_initialise_cache(void);
extern int  ca_write_to_cache(unsigned32, unsigned32, unsigned, unsigned);
extern int  ca_read_from_cache(unsigned32 *, unsigned32, unsigned, unsigned);
#endif
//extern int  ca_is_in_cache(unsigned32);
extern int  ca_line_replacement(unsigned32, unsigned32); /* data, address  */
extern int  ca_dlb_depth(void);
extern int  ca_ilb_depth(void);
extern int  cache_line_dirty(unsigned32);
extern int  is_set_valid(int, unsigned32);

#endif /* LINT                                                             */

#endif /* __CACHE__                                                        */

#endif
