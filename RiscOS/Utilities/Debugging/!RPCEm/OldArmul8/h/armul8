/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              L Howarth                                           *
* Development started: 1st June 1994                                       *
* Version:             Pre-release                                         *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
 **************************************************************************

                                  armul8.h

        This file contains the user interface definitions user to
        run Armulator 8.
 
****************************************************************************/
#ifndef ARMUL8
#define ARMUL8
#include <stdio.h>
#ifndef MAX_LINE_SIZE
#define MAX_LINE_SIZE 1024
#endif

struct T_bp_list {

        struct T_bp_list *next;       /* Next structure in list */
        long int addr;                /* Addr of break point */

};

typedef struct T_bp_list T_Bp_List;

typedef struct Sim_Info_rec{

/* Simulator information data structure */

        int granularity;        /* Simulator step granularity  CYCLE | PHASE */
        int phase;              /* Simulator phase             PHASE1 | PHASE2*/
        int sim_comm;           /* Controls the simulator
                                EXIT    :Say goodbye and quit!
                                COMM    :Stop and go to command mode
                                RUN     :Just let the simulator run */

        int stop_at;            /* Step count to stop point */

        T_Bp_List *break_list;  /* Pointer to the head of the break pointer
                                 list */

        int vectors ;           /* Boolean switch to turn on vector output 
                                 VECT_ON | VECT_OFF */
        FILE *vect_file ;       /* File pointer to file to place vectors in */

                                /* Program command line opts used by SWI inter*/
        char cmdline[MAX_LINE_SIZE] ;   
        char cmdline2[MAX_LINE_SIZE] ;   /* the string read by the SWI emulator */
        char prog_name[MAX_LINE_SIZE] ;   /* name of last file to be loaded */
#ifdef GATHER_STATS
        unsigned int Total;
        unsigned int SWICycles;
        unsigned int Interlocked;
        unsigned int Delayed;
        unsigned int Skipped;
        unsigned int Cancelled;
        unsigned int Lost;
        unsigned int BusyWaited;
        unsigned int InstCount;
#endif

} Sim_Info_rec;

#define CYCLE   0       /* Step simulator on cycle basis */
#define PHASE   1       /*    "         "    phase   "   */
#define PHASE1  1       /* Clock Phase of the model */
#define PHASE2  2
#define EXIT   -2       /* Quit the simulator */
#define RUN     0       /* Let the simulator run to the next break point */
#define COMM    1       /* Return to the command mode */
#define STEP    2       /* Step the simulator */
#define VECT_ON 1       /* Turn vector output on */
#define VECT_OFF 0      /* Turn Vector output off */
#define NOW     0       /* Single step cycle phase */
#define BREAK_POINT 1   /* We have a break point */

/* Proto-type Data structure functions */

int set_granularity(int granularity,Sim_Info_rec *sim_info);
int get_granularity(Sim_Info_rec *sim_info);
int change_phase(int phase,Sim_Info_rec *sim_info);
int get_phase(Sim_Info_rec *sim_info);
int get_sim_state(Sim_Info_rec *sim_info);
int set_sim_state(int state,Sim_Info_rec *sim_info);
int set_stop(int no_sim_steps,Sim_Info_rec *sim_info);
int get_stop(Sim_Info_rec *sim_info);
int check_break_points(unsigned program_counter,Sim_Info_rec *sim_info);
void setbreakpoint(unsigned32 bp_addr,Sim_Info_rec *sim_info);
void listbreakpoints(Sim_Info_rec *sim_info);
void unsetbreakpoint(unsigned32 bp_addr,Sim_Info_rec *sim_info);
int set_vectors(int NEW_VAL,Sim_Info_rec *sim_info,char *filename);
int get_vectors(Sim_Info_rec *sim_info);

#endif
