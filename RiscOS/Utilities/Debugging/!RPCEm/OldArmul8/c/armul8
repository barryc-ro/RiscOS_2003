/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              L Howarth                                           *
* Development started: 1st June 1994                                       *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
 **************************************************************************

                                   armul8.c

        This file contains the top level view of Armulator 8. It consists
        of two main modules, a user interface and a sequencer. The user
        interface control all interaction between the user and armul8.
        The interface allows the user to look that the state of the
        various interfaces, set break points, single step instructions,
        etc, etc. The sequencer control the execution of armul8. It
        calls the various sub modules within armul8, checks break points,
        set up debug level etc.

****************************************************************************/

#include "state.h"
#include "armul8.h"
#include "user_if.h"
#include "armcache.h"
#include "cache.h"
#include "eu.h"
#include "pu.h"
#include "arm_mem.h"
#include "ram.h"
#include "multiplier.h"
#include "extend.h"
#include "utils.h"
#include "coproc.h"
#ifdef GATHER_STATS
#include "stats.h"
#endif
#include <stdio.h>
#include <string.h>


extern char *armul8_version;
char *armul8_version="ARMul 8 (RPC) ARM Ltd. (c) 1994, 1995, Acorn (c) 1995.";
static int reset = 0;
int stop = 0;

void armul_reset(armul8_state *state)
{
   reset = 8;
   glue_reset(state);
   ARM8_EXT.Reset = 1;
}


int main(int argc,char **argv)
{
  armul8_state  *state;
  Sim_Info_rec sim_rec, *sim_info;
  int exit_cond=0,i=0,step_count;
  unsigned32 address;
  int glue;

  sim_info=&sim_rec;
  state=calloc(sizeof(armul8_state),1);

  glue = emul_init(argc,argv,state);

  initialise_arm8(state,sim_info);

  if (glue & 1) wimp_armul8(glue & 2);

  if (glue & 2) while (!stop) fsequencer(state);

  while (get_sim_state(sim_info)!=EXIT)
  {
    /* Command line interpreter: Interprets the user instructions */

    if (get_sim_state(sim_info)==COMM) comm_int(state,sim_info);

    if (get_sim_state(sim_info) != EXIT)
    {
      /* Call each of the parts in turn */

      sequencer(state,sim_info);
      if (stop) set_sim_state(COMM,sim_info);

      /* Check whether we have completed the number of requested steps or not */

      if (get_sim_state(sim_info) == STEP)
      {
        set_stop(get_stop(sim_info)-1,sim_info);
        if (get_stop(sim_info)==NOW) set_sim_state(COMM,sim_info);
      }

      /* Check if a break point has occurred */

      if (armul8core_instrstart(state, &address)
          && check_break_points(address,sim_info))
      set_sim_state(COMM,sim_info);
    }
  }
}

/************************************************************************/
/* SEQUENCER: Call each of the parts in turn                            */
/************************************************************************/
int sequencer(armul8_state *state,Sim_Info_rec *sim_info)
{

  if (reset) {
    reset --;
    if (!reset) ARM8_EXT.Reset = 0;
  }
  if((get_granularity(sim_info)==CYCLE)||
     (get_phase(sim_info)==PHASE1 && get_granularity(sim_info)==PHASE)){
    arm800_memory_earlyph1(state);
    armul8coprocs_earlyph1(state);
    armul8core_earlyph1(state);
    armul8extend_earlyph1(state);
    armul8pu_earlyph1(state);
    //armul8utils_earlyph1(state);

    arm800_memory_lateph1(state);
    armul8coprocs_lateph1(state);
    armul8core_lateph1(state);
    armul8extend_lateph1(state);
    armul8pu_lateph1(state);
    //armul8utils_lateph1(state);
    if(get_granularity(sim_info)==PHASE)fprintf(stdout,"End of phase 1\n");
  }
  if((get_granularity(sim_info)==CYCLE)||
     (get_phase(sim_info)==PHASE2 && get_granularity(sim_info)==PHASE)){
    arm800_memory_earlyph2(state);
    armul8coprocs_earlyph2(state);
    armul8core_earlyph2(state);
    armul8extend_earlyph2(state);
    armul8pu_earlyph2(state);
    //armul8utils_earlyph2(state);

    arm800_memory_lateph2(state);
    armul8coprocs_lateph2(state);
    armul8core_lateph2(state);
    armul8extend_lateph2(state);
    armul8pu_lateph2(state);
    //armul8utils_lateph2(state);

#ifdef GATHER_STATS
    gather_stats(state, sim_info);
#endif

    if(get_vectors(sim_info)==VECT_ON)vector_out(state,sim_info->vect_file);

    if(get_granularity(sim_info)==PHASE)fprintf(stdout,"End of phase 2\n");
  }

  if(get_granularity(sim_info)==PHASE){
   if(get_phase(sim_info)==PHASE1)
     change_phase(PHASE2,sim_info);
   else
     change_phase(PHASE1,sim_info);
  }
  return(0);
}

int fsequencer(armul8_state *state)
{
    if (reset) {
      reset --;
      if (!reset) ARM8_EXT.Reset = 0;
    }
    arm800_memory_earlyph1(state);
    armul8coprocs_earlyph1(state);
    armul8core_earlyph1(state);
    armul8extend_earlyph1(state);
    armul8pu_earlyph1(state);

    arm800_memory_lateph1(state);
    armul8coprocs_lateph1(state);
    armul8core_lateph1(state);
    armul8extend_lateph1(state);
    armul8pu_lateph1(state);

    arm800_memory_earlyph2(state);
    armul8coprocs_earlyph2(state);
    armul8core_earlyph2(state);
    armul8extend_earlyph2(state);
    armul8pu_earlyph2(state);

    arm800_memory_lateph2(state);
    armul8coprocs_lateph2(state);
    armul8core_lateph2(state);
    armul8extend_lateph2(state);
    armul8pu_lateph2(state);
  return(0);
}


/************************************************************************/
/* INITIALISE THE SIMULATOR                                             */
/************************************************************************/

int initialise_arm8(armul8_state *state,Sim_Info_rec *sim_info)
{
  fprintf(stdout,"\n%s\n\n",armul8_version);
  state->sim_info = sim_info;

  initialise_cache(state);
  initialise_multiplier(state);
  if(initialise_memory_management(state)==1)
    fprintf(stderr,"ERROR: Memory system failed to initialise\n");
  armul8coprocs_init(state);
/*  armul8mmu_init(state); */
  armul8pu_init(state);
  armul8core_init(state);
  //armul8utils_init(state);
#ifdef GATHER_STATS
  init_stats(sim_info);
#endif
  sim_info->break_list=NULL;
  sim_info->vect_file=NULL;
  set_granularity(CYCLE,sim_info);
  change_phase(PHASE1,sim_info);
  set_sim_state(COMM,sim_info);
  set_stop(NOW,sim_info);
  sim_info->vectors=VECT_OFF;
  strcpy(sim_info->cmdline, "");
  return(0);
}

/************************************************************************/
/* Set the granularity of the simulator                                 */
/************************************************************************/

int set_granularity(int granularity,Sim_Info_rec *sim_info)
{
   sim_info->granularity=granularity;
   return(0);
}

/************************************************************************/
/* Get the current granularity of the simulator                         */
/************************************************************************/

int get_granularity(Sim_Info_rec *sim_info)
{
   return(sim_info->granularity);
}

/************************************************************************/
/* Switch the phase of the simulator                                    */
/************************************************************************/

int change_phase(int phase,Sim_Info_rec *sim_info)
{
   sim_info->phase=phase;
   return(0);
}

/************************************************************************/
/* Get the phase of the simulator                                       */
/************************************************************************/

int get_phase(Sim_Info_rec *sim_info)
{
   return(sim_info->phase);
}

/************************************************************************/
/* Get the current state of the simulator                               */
/************************************************************************/

int get_sim_state(Sim_Info_rec *sim_info)
{
   return(sim_info->sim_comm);
}

/************************************************************************/
/* Change the simulator state                                           */
/************************************************************************/

int set_sim_state(int state,Sim_Info_rec *sim_info)
{
   sim_info->sim_comm=state;
   return(0);
}

/************************************************************************/
/* Step the stop point ie in no_sim_steps from now!                     */
/************************************************************************/

int set_stop(int no_sim_steps,Sim_Info_rec *sim_info)
{
   sim_info->stop_at=no_sim_steps;
   return(0);
}

/************************************************************************/
/* Get the number of steps to the next stop point                       */
/************************************************************************/

int get_stop(Sim_Info_rec *sim_info)
{
   return(sim_info->stop_at);
}

/************************************************************************/
/* Check the break point list                                           */
/************************************************************************/

int check_break_points(unsigned program_counter,Sim_Info_rec *sim_info)
{
  T_Bp_List *ptr;

  for (ptr=sim_info->break_list; ptr!=NULL; ptr=ptr->next) {
    if(ptr->addr==program_counter){
      fprintf(stdout,"Break at address %X\n",ptr->addr);
      return(BREAK_POINT);
    }
  }
  return(0);
}

/************************************************************************/
/* setbreakpoint: Set up a break point                                  */
/************************************************************************/

void setbreakpoint(unsigned32 bp_addr,Sim_Info_rec *sim_info)
{
  T_Bp_List *ptr, *previous;

  previous=NULL;
  for (ptr=sim_info->break_list; ptr!=NULL; ptr=ptr->next) {
    if (ptr->addr == bp_addr) {
      fprintf(stdout,"Break point already exists at address 0x%08X\n",bp_addr);
      return;
    }
    previous=ptr;
  }
  if(previous!=NULL){
    previous->next             = (T_Bp_List *) malloc(sizeof(T_Bp_List));
    previous->next->next   = NULL;
    previous->next->addr       = bp_addr;
  }
  else{
    sim_info->break_list           = (T_Bp_List *) malloc(sizeof(T_Bp_List));
    sim_info->break_list->next = NULL;
    sim_info->break_list->addr     = bp_addr;
  }
  fprintf(stdout,"Break point added at address 0x%08X\n",bp_addr);

  return;
}

/************************************************************************/
/* listbreakpoints: List the current set of break points                */
/************************************************************************/

void listbreakpoints(Sim_Info_rec *sim_info)
{
 T_Bp_List *ptr;
 int       i=0;

 for (ptr=sim_info->break_list; ptr!=NULL; ptr=ptr->next) {
   i++;
   fprintf(stdout,"Break point %d at address %08X.\n",i,ptr->addr);
 }
 fprintf(stdout,"\n");
 return;
}

/************************************************************************/
/* unsetbreakpoint: Delete a break point from the break point list      */
/************************************************************************/

void unsetbreakpoint(unsigned32 bp_addr,Sim_Info_rec *sim_info)
{
  T_Bp_List *ptr, *previous;

  previous=NULL;
  for (ptr=sim_info->break_list; ptr!=NULL && ptr->addr!=bp_addr; ptr=ptr->next)
    previous=ptr;
  if(ptr==NULL)
    fprintf(stdout,"Break point at address 0x%08X not found.\n",bp_addr);
  else{
    if(ptr==sim_info->break_list)
      sim_info->break_list = ptr->next;
    else
      previous->next       = ptr->next;
    free(ptr);
  }
  return;
}

/************************************************************************/
/* set_vectors: Set the vector switch                                   */
/************************************************************************/

int set_vectors(int new_val,Sim_Info_rec *sim_info, char *filename)
{
  if(new_val==VECT_ON){
    if(strcmp(filename,"XXXXXX")!=0){
      if(sim_info->vect_file!=NULL){
        printf("Closing vector file.");
        fclose(sim_info->vect_file);
      }
      if((sim_info->vect_file=fopen(filename,"w"))==NULL){
        printf("Failed to open vector file %s.\n",filename);
        printf("Vector generation is now turned off.\n");
        sim_info->vectors=VECT_OFF;
      }
      else{
        printf("Opening vector file %s.\n",filename);
        sim_info->vectors=VECT_ON;
      }
    }
    else{
      if(sim_info->vect_file!=NULL){
        printf("Turn on vector tracing\n");
        sim_info->vectors=VECT_ON;
      }
      else{
        printf("Using default file name vectors.vtf\n");
        if((sim_info->vect_file=fopen(filename,"w"))==NULL){
          printf("Failed to open vector file vectors.vtf.\n");
          printf("Vector generation is now turned off.\n");
          sim_info->vectors=VECT_OFF;
        }
        else{
          sim_info->vectors=VECT_ON;
        }
      }
    }
  }
  else
    sim_info->vectors=VECT_OFF;
}

/************************************************************************/
/* get_vectors: Look at the vector switch                               */
/************************************************************************/

int get_vectors(Sim_Info_rec *sim_info)
{
  return(sim_info->vectors);
}
