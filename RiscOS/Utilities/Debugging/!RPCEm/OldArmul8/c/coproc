/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM emulator                                                 *
* ========================                                                 *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/


/******************************************************************\
*                                                                  *
* coproc.c: routines to emulate on-chip coprocessor(s) for the ARM *
*                                                                  *
\******************************************************************/

/* ARM8 Coprocessors for validation system                                */
/* ---------------------------------------                                */
/*                                                                        */
/* In the initial version of ARM8 only the MCR & MRC instructions will be */
/* implemented. All other instructions will bounce and cause the core to  */
/* enter the undefined instruction trap. The validation co-processors     */
/* implemented here bounce CDPs, STCs and LDCs and implement MRCs and     */
/* MCRs as straightforward coprocessor register accesses (with MRCs       */
/* always busy-waiting on their first execute cycle by asserting          */
/* CBusyWaitD while in Decode, as the simplest way to avoid bus clashes   */
/* on CData[]), with the following special features for specific          */
/* coprocessors:                                                          */
/*                                                                        */
/*  CP No.  Action                                                        */
/*    0     All MCRs and MRCs are bounced in Decode by asserting          */
/*            CBounceD.                                                   */
/*    1     All MCRs (and MRCs) are busy-waited for their first Execute   */
/*            cycle by asserting CBusyWaitD while they are in Decode,     */
/*            then allowed to execute.                                    */
/*    2     All MCRs and MRCs are busy-waited for their first Execute     */
/*            cycle by asserting CBusyWaitD while they are in Decode,     */
/*            then bounced at the end of this busy-wait cycle by          */
/*            asserting CBounceE.                                         */
/*    3     All MCRs and MRCs are busy-waited for their first Execute     */
/*            cycle by asserting CBusyWaitD while they are in Decode,     */
/*            then for their second Execute cycle by asserting            */
/*            CBusyWaitE, then allowed to execute.                        */
/*    4     All CDPs are busy-waited for N cycles by appropriate use of   */
/*            CBusyWaitD and CBusyWaitE before being bounced, where N is  */
/*            the value of coprocessor 4's register CRn.                  */

#include "defs.h"
#include "state.h"
#include "armul8.h"
#include "coproc.h"
#include "coproc_i.h"

int cp_debug_level=0;
extern void mmu_control(int i,int j,armul8_state *state);

#define COPROCINT state->coprocint

/***************************\
*                           *
* Coprocessor debug routine *
*                           *
\***************************/

int db_coproc(int level,armul8_state *state)
{
  if(level >3)
    return(1);
  else
    cp_debug_level = level;
  return(0);
}

/****************************\
*                            *
* The initialisation routine *
*                            *
\****************************/

void armul8coprocs_init(armul8_state *state)
{
  /* Initialise interface to accept everything.                           */
  ARM8_COPROC.CBusyWaitD   = FALSE;
  ARM8_COPROC.CBounceD     = FALSE;
  ARM8_COPROC.CBusyWaitE   = FALSE;
  ARM8_COPROC.CBounceE     = FALSE;

  /* Initialise internal state to indicate no valid coprocessor           */
  /* instructions in the pipeline.                                        */
  COPROCINT.citype_D = CITYPE_NONE;
  COPROCINT.citype_E = CITYPE_NONE;
  COPROCINT.ready_E  = FALSE;

  /* Set up little endianness in coprocessor 15 and the interface.        */
  COPROCINT.regs[15][1] = 0x00;
  ARM8_EXT.BigEnd       = FALSE;

  return;
}

/*****************************\
*                             *
* The "early" phase 1 routine *
*                             *
\*****************************/

void armul8coprocs_earlyph1(armul8_state *state)
{
  /* Drive CData[] for an MRC instruction which is about to finish its    */
  /* busy-waiting.                                                        */
  /*   Don't do this if this isn't a phase 1 of the NConfirm-stopped      */
  /* clock.                                                               */
  /*   Also don't do this if the ARM has decided it doesn't want the      */
  /* instruction executed after all.                                      */
  if ((COPROCINT.citype_E == CITYPE_MRC) && (COPROCINT.wait_E == 1)
      && COPROCINT.realcycle && COPROCINT.cexecute)
    ARM8_COPROC.CData = COPROCINT.regs
                          [CP_NUMBER(COPROCINT.cinstruct_E)]
                          [IFIELD_RN(COPROCINT.cinstruct_E)];
  //fout ("MRC cp no. %d value %x\n",CP_NUMBER(COPROCINT.cinstruct_E),IFIELD_RN(COPROCINT.cinstruct_E));
  return;
}

/****************************\
*                            *
* The "late" phase 1 routine *
*                            *
\****************************/

void armul8coprocs_lateph1(armul8_state *state)
{
  /* If this cycle is interlocked, remember the fact (necessary because   */
  /* ARM8_COPROC.Interlocked may change before we see it in phase 2).     */
  /*   Don't do this if this isn't a phase 1 of the NConfirm-stopped      */
  /* clock.                                                               */
  if (COPROCINT.realcycle)
    COPROCINT.interlocked = ARM8_COPROC.Interlocked;

#ifdef DB_COPROC
  if (cp_debug_level & 2)
  {
    fprintf(stdout,"\nCoproc interface at end of ph1.\n");
    fprintf(stdout,"  CEnterDecode : %d \t\t CEnterExecute : %d\n",
            ARM8_COPROC.CEnterDecode,ARM8_COPROC.CEnterExecute);
    fprintf(stdout,"  CExecute     : %d \t\t Interlocked   : %d\n",
            ARM8_COPROC.CExecute,ARM8_COPROC.Interlocked);
    fprintf(stdout,"  CBusyWaitD   : %d \t\t CBounceD      : %d\n",
            ARM8_COPROC.CBusyWaitD,ARM8_COPROC.CBounceD);
    fprintf(stdout,"  CBusyWaitE   : %d \t\t CBounceE      : %d\n",
            ARM8_COPROC.CBusyWaitE,ARM8_COPROC.CBounceE);
    fprintf(stdout,"  CInstruct    : %08lX \n",ARM8_COPROC.CInstruct);
    fprintf(stdout,"  CData        : %08lX \n",ARM8_COPROC.CData);
  }
#endif

  return;
}

/*****************************\
*                             *
* The "early" phase 2 routine *
*                             *
\*****************************/

void armul8coprocs_earlyph2(armul8_state *state)
{
  /* Inhibit all pipeline following and other state update if this isn't  */
  /* a real cycle of the NConfirm-stopped clock.                          */

  if (COPROCINT.realcycle)
  {

    /* We tackle the pipeline stages in reverse order:                    */

    /* The Execute stage instruction                                      */
    /* -----------------------------                                      */
    /* Order of processing:                                               */
    /* (1) If the instruction was marked ready for CExecute last cycle,   */
    /*     finish its execution if CExecute was actually asserted. (This  */
    /*     is effectively a sort of Write stage, but at least for this    */
    /*     simple a coprocessor, the separate Write stage is more trouble */
    /*     than it is worth.)                                             */
    /* (2) Advance new instruction into Execute if there is one; if not,  */
    /*     invalidate the old instruction if the ARM no longer wants it   */
    /*     executed.                                                      */
    /* (3) Drive CBusyWaitE and CBounceE according to this new            */
    /*     instruction.                                                   */

    /* First step: Deal with a "ready" instruction from last cycle.       */
    if (COPROCINT.ready_E)
    {
      /* If CExecute has been asserted, we need to do whatever this       */
      /* instruction requires.                                            */
      if (COPROCINT.cexecute)
      {
        switch (COPROCINT.citype_E)
        {
          case CITYPE_MCR:
            /* MCRs need to write the appropriate register.               */
            COPROCINT.regs
                [CP_NUMBER(COPROCINT.cinstruct_E)]
                [IFIELD_RN(COPROCINT.cinstruct_E)]
              = COPROCINT.cdata_E;
#ifdef DEBUG_CP
            fout ("MCR cp no. %d reg %d value %x\n",CP_NUMBER(COPROCINT.cinstruct_E),IFIELD_RN(COPROCINT.cinstruct_E),COPROCINT.cdata_E);
#endif
            if (CP_NUMBER(COPROCINT.cinstruct_E) == 15) mmu_control(IFIELD_RN(COPROCINT.cinstruct_E),COPROCINT.cdata_E,state);
            break;

          case CITYPE_NONE:
          case CITYPE_MRC:
            /* Do nothing.                                                */
            break;

          default:
            /* Other cases shouldn't get here.                            */
            fprintf(stdout,"COPROC: Internal error 01\n");
            if (get_sim_state(state->sim_info) != EXIT)
              set_sim_state(COMM,state->sim_info);
            break;
        }
      }
      /* And then we need to forget about this instruction - either       */
      /* because it has been fully executed, or because the Core hasn't   */
      /* asserted CExecute and so doesn't want the instruction executed.  */
      COPROCINT.citype_E = CITYPE_NONE;
      COPROCINT.ready_E  = FALSE;
    }

    /* Second step: advance the Decode stage instruction into the Execute */
    /* stage if requested; otherwise, invalidate an old instruction if    */
    /* CExecute isn't asserted.                                           */
    if (ARM8_COPROC.CEnterExecute)
    {
      COPROCINT.cinstruct_E = COPROCINT.cinstruct_D;
      COPROCINT.citype_E    = COPROCINT.citype_D;
      COPROCINT.wait_E      = COPROCINT.wait_D;
      COPROCINT.ready_E     = FALSE;

      /* This instruction is no longer in the Decode stage. (Probably no  */
      /* real point in doing this, but it does little harm.)              */
      COPROCINT.citype_D    = CITYPE_NONE;

      /* If the instruction is being bounced by the Decode stage, it is   */
      /* no longer valid. Note that it is OK to use CBounceD here,        */
      /* despite this being the phase in which it is changed, because the */
      /* code that changes it is later on in this routine.                */
      if (ARM8_COPROC.CBounceD)
        COPROCINT.citype_E = CITYPE_NONE;
    }
    else if (!COPROCINT.cexecute)
      COPROCINT.citype_E    = CITYPE_NONE;

    /* Third step: produce the CBusyWaitE and CBounceE responses. Start   */
    /* by setting up the standard responses - i.e. neither busy-waited    */
    /* nor bounced.                                                       */
    ARM8_COPROC.CBusyWaitE = FALSE;
    ARM8_COPROC.CBounceE   = FALSE;

    /* Then handle this new instruction. Priorities on this are:          */
    /*   1) If the Execute stage instruction is not a coprocessor         */
    /*      instruction, do nothing.                                      */
    /*   2) Otherwise, if we want this instruction to be busy-waited, we  */
    /*      need to assert CBusyWaitE, decrement its busy-wait count and  */
    /*      do nothing more with the instruction this cycle.              */
    /*   3) Otherwise, if we want the instruction to be bounced, we need  */
    /*      to assert CBounceE and abandon the instruction.               */
    /*   4) Otherwise, if the Core has interlocked the instruction, we    */
    /*      need do nothing with it this cycle.                           */
    /*   5) Otherwise, if we need to wait for the last busy-wait cycle,   */
    /*      do so.                                                        */
    /*   6) Otherwise, pick up the CData[] value and mark the instruction */
    /*      as ready for the CExecute decision.                           */

    /* First priority: do nothing with non-coprocessor instructions.      */
    if (COPROCINT.citype_E != CITYPE_NONE)
    {

      /* Second priority: busy-wait if wanted.                            */
      if (COPROCINT.wait_E > 1)
      {
        ARM8_COPROC.CBusyWaitE =  TRUE;
        COPROCINT.wait_E       -= 1;
      }

      /* Third priority: bounce if wanted - i.e. if it is for coprocessor */
      /* 2 or if it is anything other than MRC or MCR (though out of the  */
      /* others, only CDP should be possible at present).                 */
      else if ((CP_NUMBER(COPROCINT.cinstruct_E) == 2)
               || ((COPROCINT.citype_E != CITYPE_MRC)
                   && (COPROCINT.citype_E != CITYPE_MCR)))
      {
        ARM8_COPROC.CBounceE = TRUE;
        COPROCINT.citype_E   = CITYPE_NONE;
      }

      /* Fourth priority: do nothing if interlocked.                      */
      /* otherwise pick up CData[] and instruction is now ready for       */
      /* CExecute.                                                        */
      else if (!COPROCINT.interlocked)
      {
        /* Fifth priority: wait for the last busy-waited cycle to         */
        /* complete if there is one.                                      */
        if (COPROCINT.wait_E == 1)
          COPROCINT.wait_E = 0;

        /* Sixth priority: pick up CData[] and the instruction is now     */
        /* ready for CExecute.                                            */
        {
          COPROCINT.cdata_E = ARM8_COPROC.CData;
          COPROCINT.ready_E = TRUE;
        }
      }
    }

    /* The Decode stage instruction                                       */
    /* ----------------------------                                       */
    /* Order of processing:                                               */
    /* (1) Pick up and decode a new Decode stage instruction, if there is */
    /*     one.                                                           */
    /* (2) Drive the CBusyWaitD and CBounceD signals as appropriate, and  */
    /*     determine how long the instruction will busy-wait in the       */
    /*     Execute stage (if it will get there at all, that is!).         */

    /* First stage: pick up and decode a new Decode stage instruction if  */
    /* there is one.                                                      */
    if (ARM8_COPROC.CEnterDecode)
    {
      /* Get the instruction.                                             */
      COPROCINT.cinstruct_D = ARM8_COPROC.CInstruct;

      /* Decode the new instruction.                                      */
      if (BITS(COPROCINT.cinstruct_D,24,25) == 0x3)
        COPROCINT.citype_D = CITYPE_NONE;
      else
      {
        if (BIT(COPROCINT.cinstruct_D,25))
        {
          /* It's a CDP, MRC or MRC instruction */
          if (BIT(COPROCINT.cinstruct_D,4))
          {
            if (BIT(COPROCINT.cinstruct_D,20))
              COPROCINT.citype_D = CITYPE_MRC;
            else
              COPROCINT.citype_D = CITYPE_MCR;
          }
          else
            COPROCINT.citype_D = CITYPE_CDP;
        }
        else
        {
          /* It's an LDC or STC instruction */
          if (BIT(COPROCINT.cinstruct_D,20))
            COPROCINT.citype_D = CITYPE_LDC;
          else
            COPROCINT.citype_D = CITYPE_STC;
        }
      }
    }

    /* Second stage: Start by setting up the default behaviour of neither */
    /* busy-waiting nor bouncing the Decode stage instruction.            */

    ARM8_COPROC.CBounceD   = FALSE;
    ARM8_COPROC.CBusyWaitD = FALSE;
    COPROCINT.wait_D       = 0;

    /* Now split according to the type of the instruction. In each case,  */
    /* we may bounce immediately by setting CBounceD, or we may busy-wait */
    /* for N cycles by setting CBusyWaitD and making COPROCINT.wait_D     */
    /* equal to N.                                                        */

    switch (COPROCINT.citype_D)
    {
      case CITYPE_LDC:
      case CITYPE_STC:
        /* Bounce these regardless.                                       */
        ARM8_COPROC.CBounceD = TRUE;
        break;

      case CITYPE_CDP:
        /* If not for coprocessor 4, bounce it;                           */
        /* If for coprocessor 4 and register CRn is zero, bounce it;      */
        /* If for coprocessor 4 and register CRn is non-zero, busy-wait   */
        /* it for CRn cycles.                                             */
        if ((CP_NUMBER(COPROCINT.cinstruct_D) != 4)
            || (COPROCINT.regs[4][IFIELD_RN(COPROCINT.cinstruct_D)] == 0))
          ARM8_COPROC.CBounceD = TRUE;
        else
        {
          ARM8_COPROC.CBusyWaitD = TRUE;
          COPROCINT.wait_D =
            COPROCINT.regs[4][IFIELD_RN(COPROCINT.cinstruct_D)];
        }
        break;

      case CITYPE_MCR:
        /* Take appropriate special actions.                              */
        switch (CP_NUMBER(COPROCINT.cinstruct_D))
        {
          case 0: /* Bounce at once                                       */
            ARM8_COPROC.CBounceD = TRUE;
            break;

          case 1: /* Busy-wait 1 cycle, then Execute stage will execute   */
          case 2: /* Busy-wait 1 cycle, then Execute stage will bounce    */
            ARM8_COPROC.CBusyWaitD = TRUE;
            COPROCINT.wait_D = 1;
            break;

          case 3: /* Busy-wait 2 cycles, then Execute stage will execute  */
            ARM8_COPROC.CBusyWaitD = TRUE;
            COPROCINT.wait_D = 2;
            break;

          default: /* No special actions                                  */
            break;
        }
#ifdef DEBUG_CP
        fout ("MCR CP no %d\n",CP_NUMBER(COPROCINT.cinstruct_D));
#endif
        break;

      case CITYPE_MRC:
        /* Take appropriate special actions.                              */
        switch (CP_NUMBER(COPROCINT.cinstruct_D))
        {
          case 0: /* Bounce at once                                       */
            ARM8_COPROC.CBounceD = TRUE;
            break;

          case 1: /* Busy-wait 1 cycle, then Execute stage will execute   */
          case 2: /* Busy-wait 1 cycle, then Execute stage will bounce    */
            ARM8_COPROC.CBusyWaitD = TRUE;
            COPROCINT.wait_D = 1;
            break;

          case 3: /* Busy-wait 2 cycles, then Execute stage will execute  */
            ARM8_COPROC.CBusyWaitD = TRUE;
            COPROCINT.wait_D = 2;
            break;

          default: /* Must busy-wait, to avoid driving CData in Decode    */
            ARM8_COPROC.CBusyWaitD = TRUE;
            COPROCINT.wait_D = 1;
            break;
        }
        break;

      default:
        /* Do nothing.                                                    */
        break;
    }

    /* Update big-endian interface signal.                                */
    ARM8_EXT.BigEnd = BITS(COPROCINT.regs[15][1],7,7);
  }

#ifdef DB_COPROC
  /* Debug stuff.                                                         */
  if (cp_debug_level & 1)
  {
    fprintf(stdout,"Co_proc status:\n");

    fprintf(stdout,"  Decode:  %08lX ",COPROCINT.cinstruct_D);
    switch(COPROCINT.citype_D){
      case CITYPE_CDP:  fprintf(stdout,"(an active CDP),"); break;
      case CITYPE_STC:  fprintf(stdout,"(an active STC),"); break;
      case CITYPE_LDC:  fprintf(stdout,"(an active LDC),"); break;
      case CITYPE_MCR:  fprintf(stdout,"(an active MCR),"); break;
      case CITYPE_MRC:  fprintf(stdout,"(an active MRC),"); break;
      case CITYPE_NONE: fprintf(stdout,"(inactive),     "); break;
    }
    fprintf(stdout," to wait %d cycles\n",COPROCINT.wait_D);

    fprintf(stdout,"  Execute: %08lX ",COPROCINT.cinstruct_E);
    switch(COPROCINT.citype_E){
      case CITYPE_CDP:  fprintf(stdout,"(an active CDP),"); break;
      case CITYPE_STC:  fprintf(stdout,"(an active STC),"); break;
      case CITYPE_LDC:  fprintf(stdout,"(an active LDC),"); break;
      case CITYPE_MCR:  fprintf(stdout,"(an active MCR),"); break;
      case CITYPE_MRC:  fprintf(stdout,"(an active MRC),"); break;
      case CITYPE_NONE: fprintf(stdout,"(inactive),     "); break;
    }
    fprintf(stdout," to wait %d cycles",COPROCINT.wait_E);
    if (COPROCINT.ready_E)
      fprintf(stdout,", ready to complete with Cdata = %08lX",COPROCINT.cdata_E);
    fprintf(stdout,"\n");
  }
#endif

  return;
}

/****************************\
*                            *
* The "late" phase 2 routine *
*                            *
\****************************/

void armul8coprocs_lateph2(armul8_state *state)
{
  /* Determine whether the next cycle is "real".                          */
  COPROCINT.realcycle = !ARM8_MEM.NConfirm;

#ifdef DB_COPROC
  if (cp_debug_level & 1)
  {
    fprintf(stdout,"\nCoproc interface at end of ph2.\n");
    fprintf(stdout,"  CEnterDecode : %d \t\t CEnterExecute : %d\n",
            ARM8_COPROC.CEnterDecode,ARM8_COPROC.CEnterExecute);
    fprintf(stdout,"  CExecute     : %d \t\t Interlocked   : %d\n",
            ARM8_COPROC.CExecute,ARM8_COPROC.Interlocked);
    fprintf(stdout,"  CBusyWaitD   : %d \t\t CBounceD      : %d\n",
            ARM8_COPROC.CBusyWaitD,ARM8_COPROC.CBounceD);
    fprintf(stdout,"  CBusyWaitE   : %d \t\t CBounceE      : %d\n",
            ARM8_COPROC.CBusyWaitE,ARM8_COPROC.CBounceE);
    fprintf(stdout,"  CInstruct    : %08lX \n",ARM8_COPROC.CInstruct);
    fprintf(stdout,"  CData        : %08lX \n",ARM8_COPROC.CData);
  }
#endif

  /* Remember the CExecute value for 1 cycle from now. (Could probably be */
  /* done more efficiently than this - this is a late fix.)               */
  COPROCINT.cexecute = ARM8_COPROC.CExecute;

  return;
}
