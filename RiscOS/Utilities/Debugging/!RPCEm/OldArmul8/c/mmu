/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*/

#ifndef __ARM_MMU__
#define __ARM_MMU__
#endif

#ifdef DB_MMU
#include <stdio.h>
#define DPRINTF(x) ((void)fprintf x )
#else
#define DPRINTF(x)
#endif

#include "mmu.h"
#include "state.h"
#ifdef RISCOS_EMU
#include "armdefs.h"
#endif
#include "armcache.h"

/* For the old test suite Abort between 32 Kbytes and 32 Mbytes
   For the new test suite Abort between 8 Mbytes and 26 Mbytes */
#define TOPOFVECTORS 0x20

#define PU_SPEC_REJECT     0xffffffffU
#define LOWABORT           0xffffffffU
#define ALWAYSABORT        0xffffffffU
#define NONPRIVABORT_AREQ  0xffffffffU
#define NONPRIVABORT_RREQ  0xffffffffU
#define SWPABORT           0xffffffffU
#define HIGHABORT          0xffffffffU

/* definitions for testing the NConfirm signal, actually a data record     */
/* near the Tube address.                   +----------------------------+ */
#define STALL_CYCLES_ADDR  0x3000090     /* | # cycles to stall the ARM8 | */
#define INITIAL_ARESP_ADDR 0x3000094     /* | Provisional AResponse      | */
#define FINAL_ARESP_ADDR   0x3000098     /* | Correct AResponse          | */
#define INITIAL_RRESP_ADDR 0x300009c     /* | Provisional RResponse      | */
#define FINAL_RRESP_ADDR   0x30000a0     /* | Correct RResponse          | */
#define TRIGGER_ADDR       0x30000a4     /* | Trigger Address            | */
                                         /* +----------------------------+ */

#if 0

static int abort_status = 0, do_abort = 0 ;

void arm800_mmu_earlyph1( state )
  armul8_state *state;
{
  do_abort = 0;
  if ( do_abort ) {
    abort_status = ARM8_MEM.ARequest ;
    switch ( abort_status ) {
    case AREQ_STORE:
    case AREQ_STORE_M:
    case AREQ_STORE_S:
    case AREQ_STORE_SM:
    case AREQ_STORE_B:
    case AREQ_STORE_H:
    case AREQ_STORE_X:
    case AREQ_STORE_BX:
      ARM8_MEM.AResponse = ARESP_ABORT ;
      ARM8_MEM.DExhausted = 1;
      break;
    case AREQ_LOAD:
    case AREQ_LOAD_M:
    case AREQ_LOAD_S:
    case AREQ_LOAD_SM:
    case AREQ_LOAD_B:
    case AREQ_LOAD_H:
    case AREQ_LOAD_X:
    case AREQ_LOAD_BX:
      ARM8_MEM.AResponse = ARESP_ABORT ;
      ARM8_MEM.RResponse = RRESP_EXTABORT_D ;
      ARM8_MEM.DExhausted = 1;
      break;
    case AREQ_FETCH:
    case AREQ_FETCH_S:
      ARM8_MEM.AResponse = ARESP_ABORT ;
      ARM8_MEM.RResponse = RRESP_EXTABORT_I ;
      ARM8_MEM.IExhausted = 1;
      break;
    default:
      fprintf ( stderr, "memory:earlyp1- uncovered case 1\n" ) ;
    }
  } else
  arm800_cache_earlyph1 ( state ) ;
  return;
}

void arm800_mmu_lateph1( state )
  armul8_state *state;
{
    arm800_cache_lateph1 ( state ) ;
    return;
}

void arm800_mmu_earlyph2( state )
  armul8_state *state;
{
    arm800_cache_earlyph2 ( state ) ;
    return;
}

void arm800_mmu_lateph2( state )
  armul8_state *state;
{
    arm800_cache_lateph2 ( state ) ;
    return;
}

int db_mmu ( int value, armul8_state *state )
{
  return (0) ;
}


/* else if RISCOS_EMU is not defined */

#else

void CheckConfirmRecordUpdate(unsigned32, armul8_state*);

static int abort_status = 0, raiseNC = 0, provisional = 1, stallCycles = -1;
static int ireqC_status = 0, ireqP_status = 0, dreq_status = 0;
static int dLevel = 0;          /* internal debug level */
static unsigned32 confirmRecord[6] =
      {0x0bad0bad, 0x0bad0bad, 0x0bad0bad, 0x0bad0bad, 0x0bad0bad, 0x0bad0bad};

#ifdef ABORTS
/* Routine to transform the normal memory response into an abort via */
/* AResponse and return TRUE.                                        */
static unsigned generate_Aabort(armul8_state *state)
{
  abort_status = ARM8_MEM.ARequest;
  ARM8_MEM.ARequest = AREQ_NONE;
  arm800_cache_earlyph1( state );
  ARM8_MEM.AResponse = ARESP_ABORT;
  ARM8_MEM.ARequest = abort_status;
  return TRUE;
}

/* Routine to transform the normal memory response into an abort via */
/* RResponse and return TRUE.                                        */
static unsigned generate_Rabort(armul8_state *state)
{
  abort_status = ARM8_MEM.ARequest;
  ARM8_MEM.ARequest = AREQ_NONE;
  arm800_cache_earlyph1( state);

  switch (abort_status) {
    case AREQ_LOAD:
    case AREQ_LOAD_M:
    case AREQ_LOAD_S:
    case AREQ_LOAD_SM:
    case AREQ_LOAD_B:
    case AREQ_LOAD_H:
    case AREQ_LOAD_X:
    case AREQ_LOAD_BX:
      ARM8_MEM.RResponse = RRESP_EXTABORT_D;
      ARM8_MEM.DExhausted = 1;
      break;
    case AREQ_FETCH:
    case AREQ_FETCH_S:
    case AREQ_SPEC:
    case AREQ_SPEC_S:
      ARM8_MEM.RResponse = RRESP_EXTABORT_I;
      ARM8_MEM.IExhausted = 1;
      break;
    default:
      break; /* do nothing on AREQ_NONE, AREQ_STOREs or AREQ_CONTROLs */
  }

  ARM8_MEM.ARequest = abort_status;
  return TRUE;
}

/* Routine to transform the normal memory response into an abort via */
/* AResponse *and* RResponse, and return TRUE.                       */
static unsigned generate_ARabort(armul8_state *state)
{
  abort_status = ARM8_MEM.ARequest;
  ARM8_MEM.ARequest = AREQ_NONE;
  arm800_cache_earlyph1( state);
  ARM8_MEM.AResponse = ARESP_ABORT;

  switch (abort_status) {
    case AREQ_LOAD:
    case AREQ_LOAD_M:
    case AREQ_LOAD_S:
    case AREQ_LOAD_SM:
    case AREQ_LOAD_B:
    case AREQ_LOAD_H:
    case AREQ_LOAD_X:
    case AREQ_LOAD_BX:
      ARM8_MEM.RResponse = RRESP_EXTABORT_D;
      ARM8_MEM.DExhausted = 1;
      break;
    case AREQ_FETCH:
    case AREQ_FETCH_S:
    case AREQ_SPEC:
    case AREQ_SPEC_S:
      ARM8_MEM.RResponse = RRESP_EXTABORT_I;
      ARM8_MEM.IExhausted = 1;
      break;
    default:
      break; /* do nothing on AREQ_NONE, AREQ_STOREs or AREQ_CONTROLs */
  }

  ARM8_MEM.ARequest = abort_status;
  return TRUE;
}

/* Routine to reject a speculative prefetch and return TRUE */
static unsigned reject_speculative(armul8_state *state)
{
  /* Generate ARESP_NOTDONE and RRESP_NOTHING */
  abort_status = ARM8_MEM.ARequest;
  dreq_status = ARM8_MEM.RRequestD;
  ireqC_status = ARM8_MEM.NRRequestIC;
  ireqP_status = ARM8_MEM.NRRequestIP;
  ARM8_MEM.ARequest = AREQ_NONE;
  ARM8_MEM.RRequestD = RREQD_NONE;
  ARM8_MEM.NRRequestIC = 1;  /* no request for instructions */
  ARM8_MEM.NRRequestIP = 1;
  arm800_cache_earlyph1( state);
  ARM8_MEM.AResponse = ARESP_NOTDONE;
  ARM8_MEM.RResponse = RRESP_NOTHING;
  ARM8_MEM.IExhausted = 1;
  ARM8_MEM.ARequest = abort_status;
  ARM8_MEM.RRequestD = dreq_status;
  ARM8_MEM.NRRequestIC = ireqC_status;
  ARM8_MEM.NRRequestIP = ireqP_status;
  return TRUE;
}
#endif

void arm800_mmu_earlyph1(armul8_state *state)
{
  unsigned handled;

#ifdef ABORTS

/*
    ABORTS fall into three categories. Firstly, if an AREQUEST
    is made and the associated Address is in the abort space
    then ARESP_ABORT should be set. If the AREQUEST was a
    STR then any RRequest made in the same cycle was not associated
    with the ARequest, hence the RResponse is not relevent. If the
    Arequest was a load then the RResponse can (but need not)
    be set to RRESP_EXTABORT_D. Similarly if the RRequest was a
    fetch the RRESP can be set to RRESP_EXTABORT_I.

    NOTE: IT IS NOT ENVISAGED THE A RRESP_ABORT WOULD OCCUR
          WITHOUT AN ARESP_ABORT; ie reversed memory areas
          are at minimum limited to cache line bounaries.
 */

  /* Initialise a Boolean to tell us whether we have already handled  */
  /* this request.                                                    */
  handled = FALSE;

  /* If that hasn't handled the request, look out for aborts. For     */
  /* efficiency, we split into the ranges 0-LOWABORT (only vector     */
  /* aborts can occur), LOWABORT-HIGHABORT (lots of special cases can */
  /* occur) and HIGHABORT-0xFFFFFFFF (no aborts can occur).           */

      /* Look out for vector exceptions */
      if ((ARM8_MEM.VAddress < TOPOFVECTORS) && ARM8_MEM.TwentySixBit)
      {


        switch (ARM8_MEM.ARequest)
        {
          case AREQ_LOAD:
          case AREQ_LOAD_M:
          case AREQ_LOAD_S:
          case AREQ_LOAD_SM:
          case AREQ_LOAD_B:
          case AREQ_LOAD_H:
          case AREQ_LOAD_BX:
          case AREQ_LOAD_X:
          case AREQ_STORE:
          case AREQ_STORE_M:
          case AREQ_STORE_S:
          case AREQ_STORE_SM:
          case AREQ_STORE_B:
          case AREQ_STORE_H:
          case AREQ_STORE_BX:
          case AREQ_STORE_X:
#if ABORTON26
            handled = generate_ARabort(state);
#else
      fout("Warning, attempt to access exception vectors at %x\n",CORE_PU.PcPlus8);
#endif
            break;

          default:
            break; /* Don't abort prefetches, AREQ_CONTROLs and AREQ_NONEs */
        }

      }

  /* If this hasn't been handled either as a refused speculative request */
  /* nor as an abort, we now do the NConfirm processing to resolve it.   */

  if (!handled)
  {
    if ((((raiseNC || (ARM8_MEM.VAddress == confirmRecord[5]))
          && (stallCycles >= 0))
         && (ARM8_MEM.ARequest != AREQ_NONE)) ||
        (!provisional && raiseNC))
    {
      /* NConfirm action triggered */

      /* fprintf(stderr, "NConfirm address triggered!!\n"); */

      if (provisional && (stallCycles != 0))
      {
        /* fprintf(stderr, "provisional && (stallCycles != 0)\n"); */

        stallCycles = (int)confirmRecord[0] - 1;

        abort_status = ARM8_MEM.ARequest;
        /* ARM8_MEM.ARequest = AREQ_NONE; */

        arm800_cache_earlyph1(state);

        /* put out provisional AResponse */
        ARM8_MEM.AResponse = confirmRecord[1];

        /* put out provisional RResponse */
        ARM8_MEM.RResponse = confirmRecord[3];

        provisional = 0;
        raiseNC = 1;
      }
      else
      {
        stallCycles -= 1;

        /* fprintf(stderr, "# stall cycles left: %d\n", stallCycles); */

        if (stallCycles == 0)
        {
          /* execute original memory request */
          ARM8_MEM.ARequest = abort_status;

          /* arm800_cache_earlyph1( state); */

          /* set final AResponse and RResponse */
          ARM8_MEM.AResponse = confirmRecord[2];
          ARM8_MEM.RResponse = confirmRecord[4];

          provisional = -1;
          stallCycles = -1;
        }
        else
        {
          /* execute dummy call to cache */
          /* fprintf(stderr, "Executing WAIT cycle!!\n"); */
          if ((raiseNC == 0) && (provisional = 1))
          {
            /* fprintf(stderr, "Executing E-P1 Cache !!\n"); */
            arm800_cache_earlyph1( state);
            stallCycles = -1;
          }
        }
      }
    }
    else
    {
      if (provisional == -1)
      {
        /* set final AResponse and RResponse */
        ARM8_MEM.AResponse = confirmRecord[2];
        ARM8_MEM.RResponse = confirmRecord[4];

        /* safety measures to force new address when response = 1 word even */
        /* when not at the end of the cache line */

        if (ARM8_MEM.RResponse == RRESP_INSTR1)
          ARM8_MEM.IExhausted = 1;

        if (ARM8_MEM.RResponse == RRESP_DATA1)
          ARM8_MEM.DExhausted = 1;

        provisional = 1;
      }
      else
        arm800_cache_earlyph1( state);

      stallCycles %= 10;  /* to keep the value down at a reasonable level */
      stallCycles += 4;   /* introduce 1 cycle delay after 1 invocation  */
    }
  }
#endif
  return;
}

void arm800_mmu_lateph1( state )
  armul8_state *state;
{

  /* check for updating of the NConfirm data record here */
  CheckConfirmRecordUpdate(ARM8_MEM.VAddress, state);

  if (raiseNC && (stallCycles == ((int)confirmRecord[0] - 1))) {
    /* fprintf(stderr, "NConfirm = 1 L-P1\n"); */
    arm800_cache_lateph1( state);
  } else if (raiseNC && (stallCycles < ((int)confirmRecord[0] - 1))) {
    /* fprintf(stderr, "NConfirm = 1 L-P1 [inter]\n") */ ;
  } else if (provisional == 1) {
/*
    fprintf(stderr, "raiseNC = %d, stallCycles = %d, CR[0] = %u\n",
            raiseNC, stallCycles, confirmRecord[0]);
*/
    arm800_cache_lateph1( state);
  }

  return;
}

void arm800_mmu_earlyph2( state )
  armul8_state *state;
{

  if (raiseNC && (stallCycles == ((int)confirmRecord[0] - 1)) &&
      !provisional) {
    arm800_cache_earlyph2( state);
    ARM8_MEM.NConfirm = 1;
    /* fprintf(stderr, "NConfirm = 1 E-P2\n"); */
  } else if (provisional == 1) {
    arm800_cache_earlyph2( state);
  }

  return;
}

void arm800_mmu_lateph2( state )
  armul8_state *state;
{

  if (stallCycles == -1)
    raiseNC = 0;

  if (raiseNC)
    /* fprintf(stderr, "NConfirm = 1 L-P2\n"); */ ;
  else {
    /* ARM8_MEM.NConfirm = 0; */
/*
    if (stallCycles == -1)
      ARM8_MEM.ARequest = abort_status;
*/
    arm800_cache_lateph2( state);
  }

  return;
}

int db_mmu(level, state)
  int level;
  armul8_state *state;
{
  dLevel = level;

  return 0;
}

/*
 * This function should be called in late phase 1 to read the value on Wdata
 * and update the NConfirm record information. The address on VAddress should
 * still be valid at this time.
 */

void CheckConfirmRecordUpdate(addr, state)
  unsigned32 addr;
  armul8_state *state;
{
  switch (addr) {
  case STALL_CYCLES_ADDR:  confirmRecord[0] = ARM8_MEM.Wdata; break;
  case INITIAL_ARESP_ADDR: confirmRecord[1] = ARM8_MEM.Wdata; break;
  case FINAL_ARESP_ADDR:   confirmRecord[2] = ARM8_MEM.Wdata; break;
  case INITIAL_RRESP_ADDR: confirmRecord[3] = ARM8_MEM.Wdata; break;
  case FINAL_RRESP_ADDR:   confirmRecord[4] = ARM8_MEM.Wdata; break;
  case TRIGGER_ADDR:       confirmRecord[5] = ARM8_MEM.Wdata; break;
  default: ;
  }
  return;
}

/* if RISCOS_EMU is defined */


#endif

#undef __ARM_MMU__

/* EOF */
