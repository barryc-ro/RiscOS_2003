/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*/

#ifndef __CACHE__
#define __CACHE__
#endif

/* for switching between "never miss" and "real" cache model */
/* #define __CACHE_MODEL__ */

#include <stdio.h>
#include "state.h"
#include "armcache.h"

#ifdef RISCOS_EMU
#include "../armdefs.h"
#endif

static SingleLevelCache slCache;


/*
 * ca_write_to_cache() stores data at addr. Returns 0 on success, 1 otherwise.
 */
int ca_write_to_cache(unsigned32 data,unsigned32 addr,unsigned byteOp,unsigned bigEnd)
{
  int res = 0;

  unsigned32  wtmp;
  MemoryByte byte = 0x0;


  if (byteOp == 1) {

    byte = (MemoryByte)(data & 0x000000ff);

    if (bigEnd) { /* big endianess on */
      if (store_byte(byte, addr ^ 3)) { /* can't write to memory? */
	res = 1;
      }
    } else {
      if (store_byte(byte, addr)) { /* can't write to memory? */
	res = 1;
      }
    }
  } else if (byteOp == 2) {
    int bpos = 0;
    unsigned32 taddr = 0x0;
    unsigned32 wtmp2 = 0x0;
    unsigned32 wtmp3 = 0x0;
    wtmp = data;

    /* place byte in proper position within a word */
    bpos = BITS(addr, 0, 1);

    switch (bpos) {
    case 0:
      wtmp &= 0x0000ffff;
      taddr = addr;
      if (bigEnd)  /* big endianess */
        wtmp <<= 16;
      if (load_word(&wtmp2, taddr)) { /* can't write to memory? */
	res = 1;
      }
      wtmp2 &= 0xffff0000;
      break;
    case 2:
      wtmp &= 0xffff0000;
      taddr = addr & 0xfffffffc;
      if (bigEnd)  /* big endianess */
        wtmp >>= 16;
      if (load_word(&wtmp2, taddr)) { /* can't write to memory? */
	res = 1;
      }
      wtmp2 &= 0x0000ffff;
      break;
    default:
      break;
    }

    wtmp3 = wtmp | wtmp2;

    if (store_word(wtmp3, taddr)) { /* can't write to memory? */
      res = 1;
    }

  } else {
    if (store_word(data, addr)) { /* can't write to memory? */
      res = 1;
    }
  }

  return res;
}


/*
 * ca_read_from_cache() reads the word stored at addr and returns the value
 * in data. Stores the value in data and returns 0 on success. Otherwise
 * 1 is returned and data is set to 0x0BAD0BAD (arbitrarily chosen).
 */
int ca_read_from_cache(unsigned32 *data,unsigned32 addr,unsigned byteOp,unsigned bigEnd)
{
  int res = 1;

  unsigned32 wtmp;
  MemoryByte byte;
  unsigned bpos = 0;


  /* get the data from memory (ideal cache) */

  if (byteOp == 1) {

    res = 0;


      if (load_byte(&byte, addr)) { /* can't write to memory? */
	*data = 0xe6000010;
	res = 1;
      }

    /* OK - now calculate the depth of the line buffer */

    if (!res) {

      /* (addr/wordlength in bytes) mod cache line */

      /* place byte in proper position within a word */
      bpos = BITS(addr, 0, 1);
      *data = 0x0;
      wtmp = (unsigned32)byte;
      *data = (wtmp << (8*bpos));
    }
  } else if (byteOp == 2) {
    int bpos = 0;

    unsigned32 taddr = addr & 0xfffffffc;  /* read from word aligned addr */

    if (load_word(&wtmp, taddr)) { /* can't read from memory? */
      res = 1;
    }

    /* place byte in proper position within a word */
    bpos = BITS(addr, 0, 1);

    switch (bpos) {
    case 0:

        wtmp &= 0x0000ffff;
      break;
    case 2:

        wtmp &= 0xffff0000;
      break;
    default:
      break;
    }

    *data = wtmp;

  } else {

    if (load_word(data, addr)) { /* what? Something wrong? */

      *data = 0xe6000010;
      res = 1;

    } else {  /* OK - now calculate the depth of the line buffer */

      /* (addr/wordlength in bytes) mod cache line */

      res = 0;
    }
  }


  return res;
}

#if 0

/* ************************************************************************ */
/* ca_write_to_cache() stores data at addr. Returns 0 on success, 1         */
/* otherwise.                                                               */
/* ************************************************************************ */

int ca_write_to_cache ( data, addr, byteOp, bigEnd, state )
  unsigned32 data, addr;
  unsigned byteOp, bigEnd;
  armul8_state *state;
{
  int res = 0;

  if (bigEnd) {
    fprintf (stderr, "glue: big endian not supported\n" );
    exit (1);
  }
  ARMul_EnvokeEvent ( state->arc_state ) ;
  state->arc_state->NtransSig = !state->arm8_memory.Privileged ;
  state->arc_state->Now ++ ;
  if (byteOp == 1) {
    ARMul_StoreByte ( state->arc_state, addr, data ) ;
  } else {
    fprintf ( stderr, "##### write addr %x\n", addr );
    ARMul_StoreWordN ( state->arc_state, addr, data ) ;
  }
  if ( state->arc_state->Exception != 0 ) {
    if ( state->arc_state->NresetSig == 0 ) {
       /* ARM8_EXT.Reset = 1 ; */
    }
    if ( state->arc_state->NfiqSig == 0 ) {
       ARM8_EXT.Fiq = 1 ;
    }
    if ( state->arc_state->NirqSig == 0 ) {
       ARM8_EXT.Irq = 1 ;
    }
    if ( state->arc_state->NresetSig == 1 ) {
       ARM8_EXT.Reset = 0 ;
    }
    if ( state->arc_state->NfiqSig == 1 ) {
       ARM8_EXT.Fiq = 0 ;
    }
    if ( state->arc_state->NirqSig == 1 ) {
       ARM8_EXT.Irq = 0 ;
    }
  return res;
  }
}

/* ************************************************************************ */
/* ca_read_from_cache() reads the word stored at addr and returns the value */
/* in data. return 0 on success.                                            */
/* ************************************************************************ */

int ca_read_from_cache ( data, addr, byteOp, bigEnd, state )
  unsigned32 *data;
  unsigned32 addr;
  unsigned   byteOp, bigEnd;
  armul8_state *state;
{
  int res = 1;

  if (bigEnd) {
    fprintf (stderr, "glue: big endian not supported\n" );
    exit (1);
  }
  ARMul_EnvokeEvent ( state->arc_state ) ;
  state->arc_state->NtransSig = !state->arm8_memory.Privileged ;
  state->arc_state->Now ++ ;
  if (byteOp == 1) {
    *data = ARMul_LoadByte ( state->arc_state , addr ) ;
    res = 0 ;
  } else {
    fprintf ( stderr, "##### reading addr %x\n", addr );
    *data = ARMul_LoadWordN ( state->arc_state , addr ) ;
    res = 0 ;
  }
  if ( state->arc_state->Exception != 0 ) {
    if ( state->arc_state->NresetSig == 0 ) {
       /* ARM8_EXT.Reset = 1 ; */
    }
    if ( state->arc_state->NfiqSig == 0 ) {
       ARM8_EXT.Fiq = 1 ;
    }
    if ( state->arc_state->NirqSig == 0 ) {
       ARM8_EXT.Irq = 1 ;
    }
    if ( state->arc_state->NresetSig == 1 ) {
       ARM8_EXT.Reset = 0 ;
    }
    if ( state->arc_state->NfiqSig == 1 ) {
       ARM8_EXT.Fiq = 0 ;
    }
    if ( state->arc_state->NirqSig == 1 ) {
       ARM8_EXT.Irq = 0 ;
    }
  }
  return res;
}



#undef __CACHE__

#endif







