/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              L Howarth                                           *
* Development started: 1st June 1994                                       *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
 **************************************************************************
                                  user_if.c

        This file contains the user interface of Armulator 8. It consists
        of two main modules; a command intpreter, and a tube model ( for
        use with the validation suite). The user_if interface allows
        the user to load code, display to the screen the status of the
        core or any major interface, set break points and debug levels etc.

       V1.0    L G Howarth     31st May 1994
****************************************************************************/
#include "defs.h"
#include "armul8.h"
#include "state.h"
#include "user_if.h"
#include "pu.h"
#include "eu.h"
#include "disass.h"
#include "ram.h"
#include "coproc.h"
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include <swis.h>

#define  MAX_LINE_SIZE 1024

/* ************************************************************************ */
/* call back:procedure for disassembler - currently just returns buffer ptr */
/* ************************************************************************ */
char *callback (        dis_cb_type type,
                        int32 offset,
                        unsigned32 address,
                        int width,
                        void *cb_arg,
                        char *buffer    )
        {
        return (buffer);
        }
/* ************************************************************************ */
/* comm_int: function to interpret the user interface command line          */
/* ************************************************************************ */

int comm_int(armul8_state *state,Sim_Info_rec *sim_state)
{
  static int core_dbl=0;
        char textline [80];

  int value,reg_no,i,db_ret,tmp;
  long int reg_value,base_addr,  data_val;
  unsigned32 addr,instr,addr_val,bp_addr;
  char user_instr[MAX_LINE_SIZE],command[20],variable[20],str_value[20];
  char bp_addr_str[20];
  char *chr_ptr,file_name[100];
  char data_str[20], addr_str[20];

  while(get_sim_state(sim_state)==COMM){
    if(core_dbl&2){
      armul8core_nextinstr(state,&addr,&instr);
      fprintf(stdout,"PC = 0x%08X.\n",addr);
    }
    fprintf(stdout,"Armul8: ");
    while(fgets(user_instr,MAX_LINE_SIZE,stdin)==NULL);
    fflush(stdout);
    if((tmp=sscanf(user_instr,"%s",command))>=0){
      switch(user_instr[0]){

        case 'B':
        case 'b':
          if(strncasecmp(command,"break",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s",command)!=1){
              listbreakpoints(sim_state);
            }
            else if(sscanf(user_instr,"%*s %s",bp_addr_str)==1){
              bp_addr=strtol(bp_addr_str,(char **) NULL,0);
              if(bp_addr==0 && strncasecmp(bp_addr_str,"0x00000000",
                                           strlen(bp_addr_str))){
                fprintf(stdout,"Error setting break point at %s (%d).\n",
                        bp_addr_str,bp_addr);
              }
              else{
                setbreakpoint(bp_addr,sim_state);
              }
            }
            break;
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        case 'D' :
        case 'd' :
          if(strncasecmp(command,"debug",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s  %d",str_value,&value)==2){
              if(strcasecmp(str_value,"pu")==0){
#ifdef DBF_PU
                if((db_ret=db_pu(value,state))!=0)
                  fprintf(stderr,"Error setting PU debug to %d. Code(%d)\n",
                          value,db_ret);
#else
                fprintf(stderr,"Debug function not included. \n");
                fprintf(stderr,"Please recompile using DBF_PU.\n");
#endif
              }
              else if(strcasecmp(str_value,"mmu")==0){
#ifdef DBF_MMU
                if((db_ret=db_mmu(value,state))!=0)
                  fprintf(stderr,"Error setting MMU debug to %d. Code(%d)\n",
                          value,db_ret);
#else
                fprintf(stderr,"Debug function not included. \n");
                fprintf(stderr,"Please recompile using DBF_MMU.\n");
#endif
              }
              else if(strcasecmp(str_value,"cache")==0){
#ifdef DBF_CACHE
                if((db_ret=db_cache(value,state))!=0)
                  fprintf(stderr,"Error setting Cache debug to %d. Code(%d)\n",
                          value,db_ret);
#else
                fprintf(stderr,"Debug function not included. \n");
                fprintf(stderr,"Please recompile using DBF_CACHE.\n");
#endif
              }
              else if(strcasecmp(str_value,"extend")==0){
#ifdef DBF_EXTEND
                if((db_ret=db_multiplier(value,state))!=0)
                  fprintf(stderr,"Error setting Multiplier debug to %d. Code(%d)\n",
                          value,db_ret);
#else
                fprintf(stderr,"Debug function not included. \n");
                fprintf(stderr,"Please recompile using DBF_EXTEND.\n");
#endif
              }
              else if(strcasecmp(str_value,"core")==0){
#ifdef DBF_CORE
                core_dbl=db_core(value,state);
#else
                fprintf(stderr,"Debug function not included. \n");
                fprintf(stderr,"Please recompile using DBF_CORE.\n");
#endif
              }
              else if(strcasecmp(str_value,"coproc")==0)
                db_coproc(value,state);
	      else if(strcasecmp(str_value,"memory")==0)
                db_memory(value,state);

              else
                fprintf(stdout,"Module %s not known.\n",str_value);
            }
            else
              fprintf(stdout,"Debug level incorrectly specified.\n");
            break;
          }
          else if(strncasecmp(command,"dump",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s %s", addr_str, data_str)==2){
              addr_val=strtol(addr_str,(char **)NULL,0);
              data_val=strtol(data_str,(char **)NULL,0);
              dump_mem(addr_val,data_val);
              break;
            }
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        case 'G' :
        case 'g' :
          if(strncasecmp(command,"go",strlen(command))==0){
            char tempstring[MAX_LINE_SIZE];

            strcpy(tempstring,sim_state->prog_name);
            if (strlen(sim_state->cmdline) > 0) {     /* only add on if set */
              strcat(tempstring," ");
              strcat(tempstring,sim_state->cmdline);
              fprintf(stdout, "command line = \"%s\"\n",tempstring);
            }
            strcpy(sim_state->cmdline2,tempstring);
            set_sim_state(RUN,sim_state);
            break;
          }
          else if (strncasecmp(command,"getfile",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s %s",file_name,str_value)==2){
              base_addr=strtol(str_value,(char **) NULL,0);
              if(base_addr==0 && strncasecmp(str_value,"0x00000000",
                                             strlen(str_value)))
                fprintf(stdout,"Error evaluating base addr %s (%d).\n",
                        str_value,base_addr);
              getfile(file_name,base_addr);
              strcpy(sim_state->prog_name,file_name);
            }
            else
              fprintf(stdout,"Syntax error: No base addr given.\n");
            break;
          }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case '?' :  strcpy(command,"help");
        case 'H' :
        case 'h' :
          if(strncasecmp(command,"help",strlen(command))==0)
          {
            print_help();
            break;
          }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case 'L' :
        case 'l' :
          if(strncasecmp(command,"let",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s %*s %s",variable,str_value)==2){
              if(strncasecmp(variable,"granularity",strlen(variable))==0){
                value=strtol(str_value,(char **) NULL,0);
                if(value!=CYCLE && value!=PHASE){
                  value=CYCLE;
                  printf("Invalid granularity value. Defaulting to CYCLE.\n");
                }
                else
                  fprintf(stdout,"Granularity set to %d \n",value);
                set_granularity(value,sim_state);
                break;
              }
              else if(strncasecmp(variable,"$cmdline",strlen(variable))==0){
                char *start,*end;
                start=strchr(user_instr,'"');      /* first quote */
                end=strrchr(user_instr,'"');       /* last quote */
                if ((start != NULL) && (end !=NULL) && (start != end) && (end != start+1)) {
                  strcpy(sim_state->cmdline,start+1);
                  end=strrchr(sim_state->cmdline,'"');     /* last quote */
                  *end = '\0';
                }
                else
                  *(sim_state->cmdline)='\0';
                printf("$cmdline set to \"%s\"\n",sim_state->cmdline);
                break;
              }
              else{
                printf("Unknown variable\n");
                break;
              }
            }
          }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case 'P' :
        case 'p' :
          if(strncasecmp(command,"print",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s",str_value)==1){
              if(strcasecmp(str_value,"pu")==0)
                print_if_pu(state);
              else if(strcasecmp(str_value,"mem")==0)
                print_if_mem(state);
              else if(strcasecmp(str_value,"extern")==0)
                print_if_extern(state);
              else if(strcasecmp(str_value,"coproc")==0)
                print_if_coproc(state);
              else if(strcasecmp(str_value,"extend")==0)
                print_if_extend(state);
              else
                fprintf(stdout,"Interface %s not known.\n",str_value);
            }
            else
              fprintf(stdout,"Please specify interface %s.\n",str_value);
            break;
          }
          else if (strncasecmp(command,"poke",strlen(command))==0)
          {
            if (sscanf(user_instr,"%*s %s %s", addr_str, data_str)==2){
              addr_val=strtol(addr_str,(char **)NULL,0);
              data_val=strtol(data_str,(char **)NULL,0);
              if (Poke(addr_val, data_val)==0)
                fprintf (stdout,"\nMem [%08lX] <- %08lX\n\n", addr_val, data_val);
            }
            else
              fprintf(stderr,"syntax: poke <addr> <data>\n");
            break;
          }
          else if (strncasecmp(command,"peek",strlen(command))==0){
            if (sscanf(user_instr,"%*s %s", addr_str)==1){
              addr_val=strtoul(addr_str,(char **)NULL,0);
              if (Peek(addr_val, &data_val)==0)
                fprintf(stdout,"\nMem [%08lX] = %08lX\n\n", addr_val, data_val);
            }
            else
              fprintf(stderr,"syntax: peek <addr>\n");
            break;
          }
          else if (strncasecmp(command,"predict",strlen(command))==0){
            if (sscanf(user_instr,"%*s %s", variable)==1){
              if (strcasecmp(variable,"on")==0) {
                fprintf(stdout,"USER INTF: Turned on branch prediction\n");
                state->puint.predict_on=1;
              }
              else if (strcasecmp(variable,"off")==0) {
                fprintf(stdout,"USER INTF: Turned off branch prediction\n");
                state->puint.predict_on=0;
              }
              else
                fprintf(stderr,"Error: set predict to %s ?\n", variable);
            }
            else
              fprintf(stderr,"syntax: predict <on|off>\n");
            break;
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        case 'Q' :
        case 'q' :
          if(strncasecmp(command,"quit",strlen(command))==0){
            set_sim_state(EXIT,sim_state);
            fprintf(stdout,"Quitting.\n");
            break;
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        case 'R' :
        case 'r' :
          if(command[strlen(command)-1]==')'){
            chr_ptr=(char *)strchr(command,'(');
            *chr_ptr=0;
          }
          if(strncasecmp(command,"registers",strlen(command))==0){
            if ((sscanf(user_instr,"%s %*s %s",variable,str_value)==2)
                && (variable[0]=='R' || variable[0]=='r')){
              set_regs(state);
            }
            else if(sscanf(user_instr,"%s %s",variable,str_value)==1){
              print_regs(state,core_dbl);
            }
            else
              fprintf(stderr,"Syntax error on command line.\n");
            break;
          } else if(strncasecmp(command,"reset",strlen(command))==0){
            armul_reset(state);
            break;
	  }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case 'S' :
        case 's' :
          if(strncasecmp(command,"step",strlen(command))==0){
            if(sscanf(user_instr,"%*s %d",&value)==1)
              set_stop(value,sim_state);
            else
              set_stop(NOW+1,sim_state);
            set_sim_state(STEP,sim_state);
            break;
          }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case 'T' :
        case 't' :
          if(strncasecmp(command,"time",strlen(command))==0){
	    int time;
	    _swix(OS_ReadMonotonicTime ,_OUT(0) ,&time);
	    printf("Current time is %d cs\n",time);
            break;
          }
          fprintf(stderr,"Syntax error on command line.\n");
          break;

        case 'U' :
        case 'u' :
          if(strncasecmp(command,"unbreak",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s",bp_addr_str)==1){
              bp_addr=strtol(bp_addr_str,(char **) NULL,0);
              if(bp_addr==0 && strncasecmp(bp_addr_str, "0x00000000",
                                           strlen(bp_addr_str)))
                fprintf(stdout, "Error unsetting break point at %s (%d).\n",
                        bp_addr_str,bp_addr);
              else
                unsetbreakpoint(bp_addr,sim_state);
            }
            else
              fprintf(stdout,"Syntax error. No break point specified\n");
            break;
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        case 'V' :
        case 'v' :
          if(strncasecmp(command,"vectors",strlen(command))==0){
            if(sscanf(user_instr,"%*s %s %s",str_value,variable)==2){
              if(strncasecmp(str_value,"on",strlen(str_value))==0)
                set_vectors(VECT_ON,sim_state,variable);
              else if(strncasecmp(str_value,"off",strlen(str_value))==0)
                set_vectors(VECT_OFF,sim_state,"");
              else
                printf("Vector switch not recognised [on|off]\n");
            }
            else if(sscanf(user_instr,"%*s %s %s",str_value)==1){
              if(strncasecmp(str_value,"on",strlen(str_value))==0)
                set_vectors(VECT_ON,sim_state,"XXXXXX");
              else if(strncasecmp(str_value,"off",strlen(str_value))==0)
                set_vectors(VECT_OFF,sim_state,"");
              else
                printf("Vector switch not recognised [on|off]\n");
            }
            else
              printf("Syntax: vectors <on|off> [filename]\n");
            break;
          }
          fprintf(stdout,"Syntax error on command line.\n");
          break;

        default:
          fprintf(stderr,"Syntax error on command line.\n");
          break;
      }
    }
  }
  return(0);
}

/************************************************************************/
/* print_if_pu: Print the prefetch unit interface                       */
/************************************************************************/
int print_if_pu(armul8_state *state)
{
 fprintf(stdout,"\n\nCORE - PU Interface.\n\n");
 fprintf(stdout,"ForcedPrefetch  : %-8lX       AddressInUse : %-8lX\n",
                                CORE_PU.ForcedPrefetch,CORE_PU.AddressInUse);
 fprintf(stdout,"InstrAccepted   : %-8lX       CFlags       : %08lX\n",
                                CORE_PU.InstrAccepted,CORE_PU.CFlags);
 fprintf(stdout,"NewInstr        : %-8lX\n",
                                CORE_PU.NewInstr);
 fprintf(stdout,"InstructOnRdata : %-8lX       Instruct     : %08lX\n",
                                CORE_PU.InstructOnRdata,CORE_PU.Instruct);
 fprintf(stdout,"PAbort          : %-8lX       PcPlus8      : %08lX\n",
                                CORE_PU.PAbort,CORE_PU.PcPlus8);
 fprintf(stdout,"NoFetch         : %-8lX       IgnoreBranch : %-8lX\n",
                                CORE_PU.NoFetch,CORE_PU.IgnoreBranch);
 fprintf(stdout,"CancelD         : %-8lX       CancelE      : %-8lX\n\n",
                                CORE_PU.CancelD,CORE_PU.CancelE);
 return(0);
}

/************************************************************************/
/* print_if_extern: Print the External interface                        */
/************************************************************************/
int print_if_extern(armul8_state *state)
{
 fprintf(stdout,"\n\nExternal & Interupt Interface.\n\n");
 fprintf(stdout,"Reset : %-8lX    BigEnd : %-8lX\n",ARM8_EXT.Reset,ARM8_EXT.BigEnd);
 fprintf(stdout,"IRQ   : %-8lX    FIQ    : %-8lX\n",ARM8_EXT.Irq,ARM8_EXT.Fiq);
 fprintf(stdout,"Isync : %-8lX\n",ARM8_EXT.Isync);
 return(0);
}

/************************************************************************/
/* print_if_mem: Print the memory interface                             */
/************************************************************************/
int print_if_mem(armul8_state *state)
{
 char *cnvt_areq();
 char *cnvt_rreqd();
 char *cnvt_aresp();
 char *cnvt_rresp();

 fprintf(stdout,"\n\nARM8 - Memory Interface.\n\n");
 fprintf(stdout,"ARequest        : (%X) %-10s\n",ARM8_MEM.ARequest,
                                cnvt_areq(ARM8_MEM.ARequest));
 fprintf(stdout,"RRequestD       : (%X) %-10s\tNRRequestIC/P   : %u/%u\n",
                                ARM8_MEM.RRequestD,
                                cnvt_rreqd(ARM8_MEM.RRequestD),
                                ARM8_MEM.NRRequestIC,
                                ARM8_MEM.NRRequestIP);
 fprintf(stdout,"Privileged      : %-8X\t\tTwentySixBit    : %-8X \n",
                                ARM8_MEM.Privileged,ARM8_MEM.TwentySixBit);
 fprintf(stdout,"VAddress        : %08lX\t\tWdata           : %08lX \n",
                                ARM8_MEM.VAddress,ARM8_MEM.Wdata);
 fprintf(stdout,"AResponse       : (%X) %-10s\tNConfirm        : %-8X \n",
                                ARM8_MEM.AResponse,
                                cnvt_aresp(ARM8_MEM.AResponse),
                                ARM8_MEM.NConfirm);
 fprintf(stdout,"DExhausted      : %-8X\t\tIExhausted      : %-8X \n",
                                ARM8_MEM.DExhausted,ARM8_MEM.IExhausted);
 fprintf(stdout,"Rdata           : %08lX\t\tRResponse       : (%u) %-10s \n\n",
                                ARM8_MEM.Rdata,
                                ARM8_MEM.RResponse,
                                cnvt_rresp(ARM8_MEM.RResponse));
 return(0);
}

/************************************************************************/
/* print_if_coproc: Print co-proc interface                     */
/************************************************************************/
int print_if_coproc(armul8_state *state)
{
  fprintf(stdout,"\n\n ARM8- Coproc interface.\n\n");
  fprintf(stdout,"CInstruct     : %08X \t CEnterDecode : %d\n",
                                ARM8_COPROC.CInstruct,ARM8_COPROC.CEnterDecode);
  fprintf(stdout,"CBounceD      : %d \t\t CBusyWaitD   : %d\n",
                        ARM8_COPROC.CBounceD,ARM8_COPROC.CBusyWaitD);
  fprintf(stdout,"CEnterExecute : %d \t\t Interlocked  : %d\n",
                        ARM8_COPROC.CEnterExecute,ARM8_COPROC.Interlocked);
  fprintf(stdout,"CData         : %08lX \n",ARM8_COPROC.CData);
  fprintf(stdout,"CBounceE      : %d \t\t CBusyWaitE   : %d\n",
                        ARM8_COPROC.CBounceE,ARM8_COPROC.CBusyWaitE);
  fprintf(stdout,"CExecute      : %d \n\n",ARM8_COPROC.CExecute);
  return(0);
}

/************************************************************************/
/* print_if_extend: Print the extension interface                       */
/************************************************************************/
int print_if_extend(armul8_state *state)
{
 fprintf(stdout,"\n\nARM8 - Multiplier Interface.\n\n");
 fprintf(stdout,"Interlocked : %-8X\n",
                        ARM8_EXTEND.Interlocked);
 fprintf(stdout,"MulEnable   : %08lX       MulInit   : %08lX\n",
                        ARM8_EXTEND.MulEnable,ARM8_EXTEND.MulInit);
 fprintf(stdout,"MulAcc      : %08lX       MulLong   : %08lX\n",
                        ARM8_EXTEND.MulAcc,ARM8_EXTEND.MulLong);
 fprintf(stdout,"MulSgn      : %08lX       MulWrHigh : %08lX\n",
                        ARM8_EXTEND.MulSgn,ARM8_EXTEND.MulWrHigh);
 fprintf(stdout,"MulTerm     : %08lX       MulC      : %08lX\n",
                        ARM8_EXTEND.MulTerm,ARM8_EXTEND.MulC);
 fprintf(stdout,"ABus        : %08lX       BBus      : %08lX\n\n",
                        ARM8_EXTEND.ABus,ARM8_EXTEND.BBus);
 return(0);
}

/************************************************************************/
/* print_help: Print the help screen                                    */
/************************************************************************/
int print_help()
{
  fprintf(stdout,"\n\nARMul8 Help Facility.\n\n");
  fprintf(stdout,"getfile <filename> <base_addr> : loads a file at address base_addr\n");
  fprintf(stdout,"let pc = <addr>                : sets the pc to addr\n");
  fprintf(stdout,"go                             : start execution\n");
  fprintf(stdout,"registers                      : print out R0-R15\n");
  fprintf(stdout,"print <intf>                   : print that state of the interface <intf>\n");
  fprintf(stdout,"                                 intf   ::= pu | mem | coproc | extend\n");
  fprintf(stdout,"                                            | extern\n");
  fprintf(stdout,"                                 pu     ::= core to pu interface\n");
  fprintf(stdout,"                                 mem    ::= ARM8 to memory interface\n");
  fprintf(stdout,"                                 coproc ::= ARM8 to coprocessor interface\n");
  fprintf(stdout,"                                 extend ::= core to extend interface\n");
  fprintf(stdout,"                                 extern ::= ARM8 to external interface\n");
  fprintf(stdout,"step [n]                       : step n cycles, if n is omitted then step\n");
  fprintf(stdout,"                                 one cycle\n");
  fprintf(stdout,"break [addr]                   : set break point at address addr, if\n");
  fprintf(stdout,"                                 addr is omitted then a list of the\n");
  fprintf(stdout,"                                 current break points is given.\n");
  fprintf(stdout,"unbreak <addr>                 : unset break point at address addr\n");
  fprintf(stdout,"debug <module> <level>         : call module debug function\n");
  fprintf(stdout,"                                 module ::= pu | mmu | coproc | extend\n");
  fprintf(stdout,"                                            | cache\n");
  fprintf(stdout,"quit                           : quit the armul8 simulation \n");
  fprintf(stdout,"poke <addr> <data>             : poke data value into address \n" );
  fprintf(stdout,"peek <addr>                    : peek data value at address\n" );
  fprintf(stdout,"vectors <on|off> [filename]    : turn vector generation on/off. If\n");
  fprintf(stdout,"                                 filename is omitted, current vector\n");
  fprintf(stdout,"                                 file used, or default file if there\n");
  fprintf(stdout,"                                 is no current vector file\n");
  fprintf(stdout," \n");
  fprintf(stdout," \n");
  return(0);
}
/* ********************************************************************* */
/* two new procedures are added, Peek to look at a memory location and   */
/* poke to write into a memory location                                  */
/* ks $Date$
/* ********************************************************************* */

/* ********************************************************************* */
/* Poke:returns 0 for successful completion of storing data into address */
/* ********************************************************************* */
int Poke ( address, data )
     unsigned long address;
     unsigned long data;
{
  if ( store_word ( data, address ) != 0 )
    { printf ("fileio.Poke: write value %X to to address %X failed\n",
            data, address );
      return (1);
    }
  else
    return (0);
}

/* ********************************************************************* */
/* PEEK: returns 0 for when successfully returnng *data from address     */
/* ********************************************************************* */
int Peek ( address, data )
     unsigned long address;
     unsigned long *data;
{
  if ( load_word ( data, address ) != 0 )
    { printf ("user_if.Peek: reading from address %x failed\n",
              address );
      return (1);
    }
  else
  return (0);
}
/* ************************************************************************ */
/* set_regs: function to set register values (NOT IMPLEMENTED!!!!)          */
/* ************************************************************************ */

int set_regs(armul8_state *state)
{

  fprintf(stdout,"Hmmm..don't know how to do that!.\n");

/* This is how we were going to do it there is one tiny winy flaw;
   Its bollocks. Setting the regs at any stage is difficult due to
   the pipe line nature of ARM8. I say hard luck, let people was track
   whats going on themselves, but no I'm out voted again. As a result
   this functionality has been removed */

/*                      variable[strlen(variable)-1]=0;
                        strcpy(variable,(char *)strchr(variable,'(')+1);
                        reg_no=atoi(variable);
                        if(reg_no<0 || reg_no >14 ||
                           (reg_no==0 && (variable[0]!='0'||variable[1]!=0))){
                         fprintf(stderr,"Syntax error: Unknown reg %s \n",
                                                                    variable);
                         break;
                        }
                        else{
                          reg_value=strtol(str_value,(char **) NULL,0);
                          state->coreint.regs[reg_no]=reg_value;
                          fprintf(stdout,"Changed R%d to 0x%X.\n",
                                                        reg_no,reg_value);
                        } */
  return(0);
}
/* ************************************************************************ */
/* reg_ch_str: function to generate a string showing how the reg will change*/
/* ************************************************************************ */
int reg_ch_str(char *r_str,unsigned rstate,unsigned rnewknown,
               unsigned32 nval1,unsigned32 nval2)
{
  char tmp_str[20];
  int j;


    strcpy(r_str,"");
    if(rstate){
      for(j=3;j>=0;j--){
       if(rstate&(1<<j))
         strcat(r_str,"1");
       else
         strcat(r_str,"0");
      }
      if((rnewknown&1)&&(rstate&1)){
        sprintf(tmp_str," PH1 -> %08X",nval1);
        strcat(r_str,tmp_str);
      }
      if((rnewknown&2)&&(rstate&2)){
        sprintf(tmp_str," PH2 -> %08X",nval2);
        strcat(r_str,tmp_str);
      }
    }
    return(0);
}
/* ************************************************************************ */
/* int2bin: function to convert an integer to a binary rep string           */
/* ************************************************************************ */

char * int2bin(unsigned int value, int signal_size, char *r_str)
{
  char tempstr[MAX_LINE_SIZE];
  int mask=1;
  strcpy(r_str,"");
  strcpy(tempstr,"");


  while(value!=0){
   strcpy(tempstr,r_str);
   if(value&mask==1)
     sprintf(r_str,"%s%s","1",tempstr);
   else
     sprintf(r_str,"%s%s","0",tempstr);
   value=value>>1;
  }
  if(strlen(r_str)<signal_size){
    strcpy(tempstr,r_str);
    strncpy(r_str,"00000000000000000000000000000000",
                                                signal_size-strlen(tempstr));
    r_str[signal_size-strlen(tempstr)]=0;
    strcat(r_str,tempstr);
  }
  return(r_str);
}

/* ************************************************************************ */
/* eval_cpsr: function to decode the cpsr                                   */
/* ************************************************************************ */
char *eval_cpsr(char *ret_str, unsigned32 cpsrval)
{
  char tmp_str[5], very_tmp_str[MAX_LINE_SIZE];

  strcpy(ret_str,"");
  switch(MODEBITS(cpsrval)){
    case 0  : strcat(ret_str,"User26");break;
    case 1  : strcat(ret_str,"Fiq 26");break;
    case 2  : strcat(ret_str,"Irq 26");break;
    case 3  : strcat(ret_str,"Svc 26");break;
    case 16 : strcat(ret_str,"User32");break;
    case 17 : strcat(ret_str,"Fiq 32");break;
    case 18 : strcat(ret_str,"Irq 32");break;
    case 19 : strcat(ret_str,"Svc 32");break;
    case 23 : strcat(ret_str,"Abt 32");break;
    case 27 : strcat(ret_str,"Und 32");break;
    case 31 : strcat(ret_str,"Sys 32");break;
    default : strcat(ret_str,"UNKNOWN");
              sprintf(tmp_str," %s",int2bin(MODEBITS(cpsrval),5,very_tmp_str));
              strcat(ret_str,tmp_str);
              break;
  }
  strcat(ret_str,"\t FLGS: ");
  if(NBIT(cpsrval))strcat(ret_str,"N");
  else strcat(ret_str,"_");
  if(ZBIT(cpsrval))strcat(ret_str,"Z");
  else strcat(ret_str,"_");
  if(CBIT(cpsrval))strcat(ret_str,"C");
  else strcat(ret_str,"_");
  if(VBIT(cpsrval))strcat(ret_str,"V");
  else strcat(ret_str,"_");
  strcat(ret_str,"\t Int Dis: ");
  if(IBIT(cpsrval))strcat(ret_str,"I");
  else strcat(ret_str,"_");
  if(FBIT(cpsrval))strcat(ret_str,"F");
  else strcat(ret_str,"_");
  return(ret_str);
}


/* ************************************************************************ */
/* print_regs: function to print register/CPSR etc values                   */
/* ************************************************************************ */

int print_regs(armul8_state *state, int core_dbl)
{
  unsigned32 rval,nval1,nval2,cpsrval,cpsrnval,addr,instr;
  unsigned32 spsrval,spsrnval;
  unsigned   rstate, rnewknown,istate,tmp_rstate;
  char dis_inst[1024],instr_status[5],reg_change_str[20],tmp_str[20];
  int i;


  fprintf(stdout,"\n");
  armul8core_cpsrinfo(state,&cpsrval,&cpsrnval);



  if(core_dbl&8){
    for(i=0;i<14;i+=2){
      armul8core_reginfo(state,i,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
      reg_ch_str(reg_change_str,rstate,rnewknown,nval1, nval2);
      fprintf(stdout,"Reg[%2d] = %08lX %s\n",i,rval,reg_change_str);
      armul8core_reginfo(state,i+1,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
      reg_ch_str(reg_change_str,rstate,rnewknown,nval1, nval2);
      fprintf(stdout,"Reg[%2d] = %08lX %s\n",i+1,rval,reg_change_str);
    }
    armul8core_reginfo(state,14,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
    reg_ch_str(reg_change_str,rstate,rnewknown,nval1, nval2);
    fprintf(stdout,"Reg[14] = %08lX %s\n\n",rval,
                                                             reg_change_str);
  }
  else{
    for(i=0;i<14;i+=2){
      armul8core_reginfo(state,i,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
      fprintf(stdout,"Reg[%2d] = %08lX\t",i,rval);
      armul8core_reginfo(state,i+1,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
      fprintf(stdout,"Reg[%2d] = %08lX\n",i+1,rval);
    }
    armul8core_reginfo(state,14,MODEBITS(cpsrval),&rval,&rstate,
                                                   &rnewknown,&nval1,&nval2);
    fprintf(stdout,"Reg[14] = %08lX\n\n",rval);
  }

  fprintf(stdout,"CPSR MODE: %s\n",eval_cpsr(tmp_str,cpsrval));
  if(MODEBITS(cpsrval)!=MODE_USER32 && MODEBITS(cpsrval)!=MODE_USER26){
    armul8core_spsrinfo(state,MODEBITS(cpsrval),&spsrval,&spsrnval);
    fprintf(stdout,"SPSR MODE: %s\n",eval_cpsr(tmp_str,spsrval));
  }
  fprintf(stdout,"Completed Cycle: \n");
  armul8core_lastinstr(state,&addr,&instr,&istate);
  disass_32or26(instr,addr,dis_inst,NULL,callback,(MODEBITS(cpsrval))&8);

  /* The following tells us about the status of the instruction    */
  /* with some sort of priority order placed on the status bits by */
  /* overwriting lower priority information with higher priority   */
  /* information. (Some pairs of these bits can certainly occur    */
  /* together - e.g. busy-waited with interlocked.)                */

  strcpy(instr_status,"");
  if (istate & CORESTATUS_INTERLOCKED) strcpy(instr_status,"INTL");
  if (istate & CORESTATUS_BUSYWAITED)  strcpy(instr_status,"BUSY");
  if (istate & CORESTATUS_SKIPPED)     strcpy(instr_status,"SKIP");
  if (istate & CORESTATUS_CANCELLED)   strcpy(instr_status,"CAN");
  if (istate & CORESTATUS_EXCEPTION)   strcpy(instr_status,"EXCP");
  if (istate & CORESTATUS_LOST)        strcpy(instr_status,"LOST");
  if (istate & CORESTATUS_DELAYED)     strcpy(instr_status,"DLAY");
  fprintf(stdout,"Addr= %08lX  Opcode= %08lX %s\t%s",
                                        addr,instr,dis_inst,instr_status);

  fprintf(stdout,"\n");
  return(0);
}

/* ************************************************************************ */
/* cnvt_areq: function to convert integer values to AREQ strings            */
/* ************************************************************************ */

char *cnvt_areq(int num)
{
  static char str[20];

  sprintf(str, "UNKNOWN");

  switch (num) {
  case AREQ_NONE:
    sprintf(str, "NONE");
    break;
  case AREQ_LOAD:
    sprintf(str, "LOAD");
    break;
  case AREQ_LOAD_M:
    sprintf(str, "LOAD_M");
    break;
  case AREQ_LOAD_S:
    sprintf(str, "LOAD_S");
    break;
  case AREQ_LOAD_SM:
    sprintf(str, "LOAD_SM");
    break;
  case AREQ_LOAD_B:
    sprintf(str, "LOAD_B");
    break;
  case AREQ_LOAD_H:
    sprintf(str, "LOAD_H");
    break;
  case AREQ_LOAD_X:
    sprintf(str, "LOAD_X");
    break;
  case AREQ_LOAD_BX:
    sprintf(str, "LOAD_BX");
    break;
  case AREQ_FETCH:
    sprintf(str, "FETCH");
    break;
  case AREQ_FETCH_S:
    sprintf(str, "FETCH_S");
    break;
  case AREQ_SPEC:
    sprintf(str, "SPEC");
    break;
  case AREQ_SPEC_S:
    sprintf(str, "SPEC_S");
    break;
  case AREQ_STORE:
    sprintf(str, "STORE");
    break;
  case AREQ_STORE_M:
    sprintf(str, "STORE_M");
    break;
  case AREQ_STORE_S:
    sprintf(str, "STORE_S");
    break;
  case AREQ_STORE_SM:
    sprintf(str, "STORE_SM");
    break;
  case AREQ_STORE_B:
    sprintf(str, "STORE_B");
    break;
  case AREQ_STORE_H:
    sprintf(str, "STORE_H");
    break;
  case AREQ_STORE_X:
    sprintf(str, "STORE_X");
    break;
  case AREQ_STORE_BX:
    sprintf(str, "STORE_BX");
    break;
  case AREQ_CONTROL:
    sprintf(str, "CONTROL");
    break;
  default:
    sprintf(str, "UNKNOWN");
  }

  return str;
}

/* ************************************************************************ */
/* cnvt_rreqd: function to convert integer values to RREQD strings          */
/* ************************************************************************ */

char *cnvt_rreqd(int num)
{
  static char str[20];

  sprintf(str, "UNKNOWN");

  switch (num) {
  case RREQD_NONE:
    sprintf(str, "NONE");
    break;
  case RREQD_ONE:
    sprintf(str, "ONE");
    break;
  case RREQD_TWO:
    sprintf(str, "TWO");
    break;
  default:
    sprintf(str, "UNKNOWN");
  }

  return str;
}

/* ************************************************************************ */
/* cnvt_aresp: function to convert integer values to ARESP strings          */
/* ************************************************************************ */

char *cnvt_aresp(int num)
{
  static char str[20];

  sprintf(str, "UNKNOWN");

  switch (num) {
  case ARESP_NOTDONE:
    sprintf(str, "NOTDONE");
    break;
  case ARESP_ABORT:
    sprintf(str, "ABORT");
    break;
  case ARESP_DONE:
    sprintf(str, "DONE");
    break;
  default:
    sprintf(str, "UNKNOWN");
  }

  return str;
}

/* ************************************************************************ */
/* cnvt_rresp: function to convert integer values to RRESP strings            */
/* ************************************************************************ */

char *cnvt_rresp(int num)
{
  static char str[20];

  sprintf(str, "UNKNOWN");

  switch (num) {
  case RRESP_EXTABORT_D:
    sprintf(str, "EXTABORT_D");
    break;
  case RRESP_EXTABORT_I:
    sprintf(str, "EXTABORT_I");
    break;
  case RRESP_DATA1:
    sprintf(str, "DATA1");
    break;
  case RRESP_DATA2:
    sprintf(str, "DATA2");
    break;
  case RRESP_INSTR1:
    sprintf(str, "INSTR1");
    break;
  case RRESP_INSTR2:
    sprintf(str, "INSTR2");
    break;
  case RRESP_NOTHING:
    sprintf(str, "NOTHING");
    break;
  default:
    sprintf(str, "UNKNOWN");
  }

  return str;
}

/* ************************************************************************ */
/* dump_mem: function to print a range of memory locations                  */
/* ************************************************************************ */
int dump_mem (unsigned long address, int plus )

{
  unsigned long data;
  int i;

  fprintf(stdout,"Memory contains from: 0x%X \n",address);

  for(i=address;i<address+plus*4;i=i+4){
    if((i-address)/16.0 - (int) ((i-address)/16)==0)fprintf(stdout,"\n");
    if ( load_word ( &data, i ) != 0 )
     printf ("  UUUUUUUU");
    else
     printf ("  %08lX",data);
  }
  fprintf(stdout,"\n\n");
  return (0);
}

