/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              L G Howarth                                         *
* Development started: 20 June 1994                                        *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

/*********************************************************************\
*                                                                     *
*  eu_debug.c: routines to provide debug facilities on the ARM8 core  *
*                                                                     *
\*********************************************************************/
#include <stdio.h>
#include <time.h>
#include "state.h"
#include "eu.h"
#include "disass.h"


extern char *armul8_version;
int debug_level=0;

FILE *eis_log;
/*********************************************************************\
*                                                                     *
*  open_log: Open the file to record the executed instruction stream  *
*                                                                     *
\*********************************************************************/
FILE * open_log()
{
  time_t now;
  FILE *filehandle;

  now=time(NULL);
  if((filehandle=fopen("EIS:log","w"))==NULL)
    fprintf(stderr,"CORE: Error. Failed to open eis log\n");
  else{
    fprintf(filehandle,"Date: %s\n",ctime(&now));
    fprintf(filehandle,"Source: %s\n",armul8_version);
    fprintf(filehandle,"Cycle:     Addr:       Opcode:        Icount: \n");
  }
  return(filehandle);
}
/***********************************************************************\
*                                                                       *
*  empty_func: empty function:normally used to format output from disass*
*                                                                       *
\***********************************************************************/
char *empty_func(dis_cb_type type, int32 offset, unsigned32 address,
                     int width, void *cb_arg, char *buffer)
{
 return(buffer);
}

/*********************************************************************\
*                                                                     *
*  db_core: routine called from user interface to set debug level     *
*                                                                     *
\*********************************************************************/
int db_core(int set_debug,armul8_state *state)
{
  static int opened_log=0;

  if (set_debug==0)
  {
    fprintf(stdout,"CORE: Reset debug to level 0\n");
    debug_level = 0;
  }
  else if (set_debug>15)
  {
    fprintf(stdout,"CORE: Error. Debug level not known\n");
  }
  else
  {
    if (set_debug & 8)
    {
      fprintf(stdout,"CORE: Extended register reporting\n");
      debug_level |= 8;
    }
    if (set_debug & 4)
    {
      fprintf(stdout,"CORE: Miscellaneous debugging messages enabled\n");
      debug_level |= 4;
    }
    if (set_debug & 2)
    {
      fprintf(stdout,"CORE: PC trace reporting\n");
      debug_level |= 2;
    }
    if (set_debug & 1)
    {
      fprintf(stdout,"CORE: Turned on executed instruction stream trace\n");
      if (!opened_log)
      {
        if ((eis_log=open_log())==NULL)
        {
          fprintf(stderr,"Failed to open eis log file\n");
          return(debug_level);
        }
        opened_log=1;
      }
      debug_level |= 1;
    }
  }
  return(debug_level);
}

/*********************************************************************\
*                                                                     *
*  db_core_eis: routine to write the executed instr stream to a file  *
*                                                                     *
\*********************************************************************/

db_core_eis(armul8_state *state)
{
  static int time=1;
  int mode_bit=1;
  unsigned32 rval,nval1,nval2,cpsrval,cpsrnval,addr,instr;
  unsigned   rstate, rnewknown,istate;
  char dis_inst[1024],instr_status[5];
  int mode;
    /* NB: 5 characters in 'instr_status' to prevent terminating     */
    /* null from 'strcpy' overwriting something important.           */

  if(debug_level&1){
    armul8core_lastinstr(state,&addr,&instr,&istate);
    disass_32or26(instr,addr,dis_inst,NULL,empty_func,mode_bit);
    armul8core_cpsrinfo(state,&mode,&mode);
    /* The following tells us about the status of the instruction    */
    /* with some sort of priority order placed on the status bits by */
    /* overwriting lower priority information with higher priority   */
    /* information. (Some pairs of these bits can certainly occur    */
    /* together - e.g. busy-waited with interlocked.)                */
    strcpy(instr_status,"");
    if (istate & CORESTATUS_INTERLOCKED) strcpy(instr_status,"INTL");
    if (istate & CORESTATUS_BUSYWAITED)  strcpy(instr_status,"BUSY");
    if (istate & CORESTATUS_SKIPPED)     strcpy(instr_status,"SKIP");
    if (istate & CORESTATUS_CANCELLED)   strcpy(instr_status,"CAN");
    if (istate & CORESTATUS_EXCEPTION)   strcpy(instr_status,"EXCP");
    if (istate & CORESTATUS_LOST)        strcpy(instr_status,"LOST");
    if (istate & CORESTATUS_DELAYED)     strcpy(instr_status,"DLAY");

    fprintf(eis_log,"%-9d  0x%08X  0x%08X %4s  %-8d  (%02X/%1X) %s\n"
                ,PUINT.cycle_count,addr,instr,instr_status,time,mode&31,mode>>28,dis_inst);
    if (addr == 16) {
      fprintf(eis_log,"Data abort!!!\n");
      print_regs(state,1);
      db_core(0,state);
    }
    fflush(eis_log);
  }
  time++;
  return;
}

/********************************************************************\
*                                                                    *
*  db_core_msg0: routine to write a miscellaneous debugging message  *
*                                                                    *
\********************************************************************/

void db_core_msg0(char *string)
{
  if (debug_level & 4)
    printf(string);
  return;
}

/********************************************************************\
*                                                                    *
*  db_core_msg1: routine to write a miscellaneous debugging message  *
*    reporting one numeric value in hex.                             *
*                                                                    *
\********************************************************************/

void db_core_msg1(char *string, unsigned32 param)
{
  if (debug_level & 4)
    printf("%s 0x" UNSIGNED32_FMT, string, param);
  return;
}
