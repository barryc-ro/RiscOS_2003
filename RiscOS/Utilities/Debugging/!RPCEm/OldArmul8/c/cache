/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*/

#ifndef __ARMCACHE__
#define __ARMCACHE__
#endif

#ifdef DB_CACHE
#include <stdio.h>
#define DPRINTF(x) ((void)fprintf x )
#else
#define DPRINTF(x)
#endif

#include "cache.h"
#ifdef RISCOS_EMU
#include "../armdefs.h"
#endif
#include "armcache.h"

#define ca_is_in_cache(a) 0

static int dLevel = 0;           /* global internal debug level */

/* INTERNAL State variables for the CACHE interface                        */
static unsigned reqInstr, req2data, req1data, first, newAddress;
static unsigned32 rDataNextCyclePh2, rDataNextCyclePlusPh1, rData1, rData2;
static unsigned32 memAddr = 0xe6000010, memData = 0xe6000010,
                  ilbAddr = 0xe6000010, ilbData = 0xe6000010,
                  dlbAddr = 0xe6000010, dlbData = 0xe6000010,
                  lIlbAddr= 0xe6000010, lDlbAddr= 0xe6000010;
static unsigned rResponse, aResponse, confirm = 1, proceedPrevious, isByte;
static unsigned moreInfo, reqInstr1, changeData, changeInstr;
static unsigned instInProg = 0;
static int      dlbDepth = 0, ilbDepth = 0;

/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        AResponse
 *                        DExhausted
 *                        IExhausted
 *                        RResponse
 *
 */
void arm800_cache_earlyph1( state)
  armul8_state *state;
{
  void pDebug();

  if (dLevel == 10)
    fprintf(stderr, "arm800_cache_earlyph1 called\n");

  /* set I/D exhausted indicators */
  if (changeData) {

    /* (addr/wordlength in bytes) mod cache line */
    dlbDepth = (int)((dlbAddr/4) % 4);

#ifdef SBW
    dlbDepth = 3;
#endif

    if (dLevel >= 8)
      fprintf(stderr, "P1: Setting D-Ex DLB depth=%d, RD2=%u, RD1=%u\n",
              dlbDepth, req2data, req1data);

    if ((req2data && (dlbDepth >= 2)) ||
        (req1data && (dlbDepth >= 3)))
      ARM8_MEM.DExhausted = 0x1;
    else if (newAddress)
      ARM8_MEM.DExhausted = 0x0;
  }

  if (changeInstr) {

    /* (addr/wordlength in bytes) mod cache line */
    ilbDepth = (int)((ilbAddr/4) % 4);

#ifdef SBW
    ilbDepth = 3;
#endif

    if (dLevel >= 8)
      fprintf(stderr, "P1: Setting I_Ex, ILB depth=%d, I2=%d\n",
              ilbDepth, reqInstr);

    if ((reqInstr && (ilbDepth >= 2)) || first)
      ARM8_MEM.IExhausted = 0x1;
    else if (newAddress)
      ARM8_MEM.IExhausted = 0x0;
  }

  /* update RResponse[] */
  ARM8_MEM.RResponse = rResponse;

  /* update AResponse[] */
  ARM8_MEM.AResponse = aResponse;

  /* write RData[] onto bus - ignoring RPowerSave for now */
  if (!first) {
    if (dLevel >= 5)
      fprintf(stderr, "P1: writing %08lX to Rdata[]\n", rData1);

    ARM8_MEM.Rdata = rData1;
  } else if (first)
    ARM8_MEM.Rdata = 0xe6000010;

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        Confirm
 *
 */
void arm800_cache_lateph1( state)
  armul8_state *state;
{
  void pDebug();

  if (dLevel == 10)
    fprintf(stderr, "arm800_cache_lateph1 called\n");

  /* if moreinfo - read data (Wdata) */
  if (moreInfo) {
    memData = ARM8_MEM.Wdata;

    if (dLevel >= 9) {
      fprintf(stderr, "P1: reading data from Wdata[%08lX]\n", memData);
      fprintf(stderr, "P1: writing %08lX to %08lX\n", memData, memAddr);
    }

    switch (ca_is_in_cache(memAddr)) { /* Where to put the data */
    case 0: /* replace old data */
#ifdef RISCOS_EMU
      if (ca_write_to_cache(memData, memAddr, isByte, ARM8_EXT.BigEnd, state))
#else
      if (ca_write_to_cache(memData, memAddr, isByte, ARM8_EXT.BigEnd))
#endif
        {
        if (dLevel)
          fprintf(stderr, "Couldn't store %08lX at %08lX %s!\n",
                  memData,memAddr, (isByte ? "(BYTE)" : "(WORD)"));
        memData = 0xe6000010;
      }
      break;
    default: /* ?????? */
      break;
    }

    moreInfo = 0;
  }

  /* set RData[] value if appropriate */
  if (!first && (reqInstr1 || req2data || req1data)) {
    if (reqInstr1) {
/*
      if (!newAddress && ((ilbAddr/4) % 4 == 3))
        ilbAddr -= 0x0c;
      else
*/
        ilbAddr += 0x4;     /* next word */

      if (!reqInstr) {    /* don't do this next cycle */
        reqInstr1 = 0;
      }

      if (dLevel >= 8)
        fprintf(stderr, "P1: ILB Address = %08lX\n", ilbAddr);
    }

    if (req2data) {
      if (!newAddress && ((dlbAddr/4) % 4 == 3))
        dlbAddr -= 0x0c;
      else
        dlbAddr += 0x4;

      if (dLevel >= 8)
        fprintf(stderr, "P1: DLB Address = %08lX\n", dlbAddr);
    }

    /* where is the data */
    switch (ca_is_in_cache((reqInstr1 ? ilbAddr : dlbAddr))) {
    case 0: /* it's a hit! */

#ifdef RISCOS_EMU
      if (ca_read_from_cache((reqInstr1 ? &ilbData : &dlbData), (reqInstr1 ? ilbAddr : dlbAddr), 0, ARM8_EXT.BigEnd, state))
#else
      if (ca_read_from_cache((reqInstr1 ? &ilbData : &dlbData), (reqInstr1 ? ilbAddr : dlbAddr), 0, ARM8_EXT.BigEnd))
#endif
{
        if (dLevel)
          fprintf(stderr, "Address:%08lX not found %s!\n",
                  (reqInstr1 ? ilbAddr : dlbAddr),
                  (isByte ? "(BYTE)" : "(WORD)"));
        if (reqInstr1)
          ilbData = 0xe6000010;
        else
          dlbData = 0xe6000010;
      }
      break;
    default: /* ????? */
      break;
    }

    if (dLevel >= 9)
      fprintf(stderr, "P1: putting %08lX on Rdata[]\n",
                       (reqInstr1 ? ilbData : dlbData));

    rData1 = (reqInstr1 ? ilbData : dlbData);

  }

  if (dLevel >= 9)
    fprintf(stderr, "P1: Rdata = %08lX in next cycle\n", rData1);

  /* set Confirm[] result */
  confirm = 0x1;

  newAddress = 0;   /* no new address on VAddress[] */

  if (dLevel >= 4)
    pDebug(1, state);

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        Confirm
 *
 */
void arm800_cache_earlyph2( state)
  armul8_state *state;
{
  void pDebug();

  if (dLevel == 10)
    fprintf(stderr, "arm800_cache_earlyph2 called\n");

  /* write NConfirm[] results */
  ARM8_MEM.NConfirm = !confirm;

  /* write RData[] onto bus - ignoring RPowerSave for now */
  if (dLevel >= 8)
    fprintf(stderr, "P2: writing %08lX to Rdata[]\n", rData2);

  if (!first)
    ARM8_MEM.Rdata = rData2;
  else
    ARM8_MEM.Rdata = 0xe6000010;

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RResponse
 *                        DExhausted
 *                        IExhausted
 *                        AResponse
 *
 */
void arm800_cache_lateph2( state)
  armul8_state *state;
{
  void pDebug();

  if (dLevel == 10)
    fprintf(stderr, "arm800_cache_lateph2 called\n");

  if (instInProg)
    instInProg--;

  if (!ARM8_MEM.NConfirm) {
    isByte = 0;

    /* read ARequest[] & perform cache operations - if confirm is OK */

    switch(ARM8_MEM.ARequest) {

    /* All control operations are null in this implementation, so report */
    /* success.                                                          */
    case AREQ_CONTROL:
      aResponse = ARESP_DONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_CONTROL\n");

      break;

    /* NO operation requested -> no operation done! */
    case AREQ_NONE:
      aResponse = ARESP_NOTDONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_NONE\n");

      break;

    /* Read cache line(addr <-> VAddress) into DLB -> response = ? */
    case AREQ_LOAD:
    case AREQ_LOAD_M:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffc;  /* word aligned ! */
      newAddress = 1;

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* YES! */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
	  {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ????????? */
        break;
      }

      rData2 = dlbData;

      moreInfo = 0;

      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_LOAD)
          fprintf(stderr, "P2: ARequest = AREQ_LOAD\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_LOAD_M\n");
      }

      break;

    /* Load half word (addr <-> VAddress) into DLB -> response = ? */
    case AREQ_LOAD_H:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffc; /* word align! */
      newAddress = 1;

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* Hit after hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
	  {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ?? */
        break;
      }

      rData2 = dlbData;

      moreInfo = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_LOAD_H\n");

      break;

    /* Read cache line (sequential addr <-> VAddress) into DLB */
    case AREQ_LOAD_S:
    case AREQ_LOAD_SM:
      aResponse = ARESP_DONE;
      lDlbAddr = ARM8_MEM.VAddress & 0xfffffffc; /* word aligned ! */
      dlbAddr += 0x4;
      newAddress = 1;

#ifndef SBW
      if (dlbAddr != lDlbAddr)
        fprintf(stderr, "WARNING (CACHE): Load sequential address (%08lX) <> from the address calculated internally in the cache (%08lX)\n",
                lDlbAddr, dlbAddr);
#endif

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* OK */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
	  {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ???? */
        break;
      }

      moreInfo = 0;
      rData2 = dlbData;


      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_LOAD_S)
          fprintf(stderr, "P2: ARequest = AREQ_LOAD_S\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_LOAD_SM\n");
      }

      break;

    /* Read cache line(addr <-> VAddress) into DLB (byte) */
    case AREQ_LOAD_B:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffc; /* word aligned ! */
      newAddress = 1;
      isByte = 1;

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
	  {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ?? */
        break;
      }

      rData2 = dlbData;

      moreInfo = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_LOAD_B, Rdata2:%08lX\n", rData2);

      break;

    /* Read cache line(addr <-> VAddress) into DLB (swap) */
    case AREQ_LOAD_X:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffc; /* word align */
      newAddress = 1;

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* memAddr is in cache! */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
	  {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* what? */
        break;
      }

      rData2 = dlbData;

      moreInfo = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_LOAD_X\n");

      break;

    /* Read cache line(addr <-> VAddress) into DLB (byte swap) */
    case AREQ_LOAD_BX:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffc;  /* word aligned ! */
      newAddress = 1;
      isByte = 1;

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
{
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ? */
        break;
      }

      rData2 = dlbData;

      moreInfo = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_LOAD_BX\n");

      break;

    /* Read cache line(addr <-> VAddress) into ILB -> response = ? */
    case AREQ_FETCH:
    case AREQ_SPEC:
      aResponse = ARESP_DONE;
      ilbAddr = lIlbAddr = ARM8_MEM.VAddress;
      newAddress = 1;

      switch (ca_is_in_cache(ilbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd,state))
#else
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
#endif
          {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", ilbAddr);
          ilbData = 0xe6000010;
        }
        break;
      default: /* ? */
        break;
      }

      rData2 = ilbData;

      if (reqInstr1 && !newAddress)  /* avoid screwing up data just loaded */
        ilbAddr -= 0x4;

      moreInfo = 0;

      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_FETCH)
          fprintf(stderr, "P2: ARequest = AREQ_FETCH\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_SPEC\n");
      }

      break;

    /* Read cache line(addr <-> VAddress) into ILB (sequential) */
    case AREQ_FETCH_S:
    case AREQ_SPEC_S:
      aResponse = ARESP_DONE;
      ilbAddr = ARM8_MEM.VAddress;
      newAddress = 1;

/*
#ifdef DB_CACHE
      if (ilbAddr != lIlbAddr)
        fprintf(stderr, "WARNING (CACHE): Fetch sequential address (%08lX) <> from the address calculated internally in the cache (%08lX)\n",
                ilbAddr, lIlbAddr);
#endif
*/
      switch (ca_is_in_cache(ilbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
#endif
          {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", ilbAddr);
          ilbData = 0xe6000010;
        }
        break;
      default: /* */
        break;
      }

      rData2 = ilbData;

      if (reqInstr1 && !newAddress)    /* avoid screwing up data just loaded */
        ilbAddr -= 0x4;

      moreInfo = 0;

      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_FETCH_S)
          fprintf(stderr, "P2: ARequest = AREQ_FETCH_S\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_SPEC_S\n");
      }

      break;

    /* Store data at addr (VAddress) -> response = ? , moreInfo = 1 */
    case AREQ_STORE:
    case AREQ_STORE_M:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffc;  /* word aligned */
      moreInfo = 1;
      newAddress = 0;

      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_STORE)
          fprintf(stderr, "P2: ARequest = AREQ_STORE\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_STORE_M\n");
      }

      break;

    /* Store data at addr (VAddress) (byte), moreInfo = 1 */
    case AREQ_STORE_B:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress;  /* cheating here, just grab the addr */
      moreInfo = 1;
      newAddress = 0;
      isByte = 1;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_STORE_B\n");

      break;

    /* Store data at addr (VAddress) (swap), moreInfo = 1 */
    case AREQ_STORE_X:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffc;  /* word aligned */
      moreInfo = 1;
      newAddress = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_STORE_X\n");

      break;

    /* Store data at addr (VAddress) (byte swap), moreInfo = 1 */
    case AREQ_STORE_BX:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress;
      moreInfo = 1;
      newAddress = 0;
      isByte = 1;

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_STORE_BX\n");

      break;

    /* Store half word at addr (VAddress), moreInfo = 1 */
    case AREQ_STORE_H:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffe;
      moreInfo = 1;
      newAddress = 0;
      isByte = 2;   /* slightly misleading, but will ensure correct storage */

      if (dLevel >= 8)
        fprintf(stderr, "P2: ARequest = AREQ_STORE_H\n");

      break;

    /* Store sequential data starting at addr -> response = ?, moreinfo=1 */
    case AREQ_STORE_S:
    case AREQ_STORE_SM:
      aResponse = ARESP_DONE;
      memAddr += 0x4;
      moreInfo = 1;
      newAddress = 0;

#ifndef SBW
      if (memAddr != ARM8_MEM.VAddress)
        fprintf(stderr, "WARNING (CACHE): Store sequential address (%08lX) <> from the address calculated internally in the cache (%08lX)\n",
                ARM8_MEM.VAddress, memAddr);
#endif

      memAddr = ARM8_MEM.VAddress & 0xfffffffc;  /* word aligned */

      if (dLevel >= 8)
      {
        if (ARM8_MEM.ARequest == AREQ_STORE_S)
          fprintf(stderr, "P2: ARequest = AREQ_STORE_S\n");
        else
          fprintf(stderr, "P2: ARequest = AREQ_STORE_SM\n");
      }

      break;

    default:
      aResponse = ARESP_NOTDONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;   /* don't change the values on Rdata[] */

      if (dLevel >= 5)
        fprintf(stderr, "P2: ARequest = UNKNOWN(%u)\n", ARM8_MEM.ARequest);

      break;
    }


    /* read RRequest[] & perform cache operations - if confirm is OK */

    rResponse = RRESP_NOTHING; /* Default is that we return nothing */

    /* Set internal values */
    reqInstr = (!ARM8_MEM.NRRequestIC || !ARM8_MEM.NRRequestIP)
               && (ARM8_MEM.RRequestD == RREQD_NONE);

    if (dLevel >= 8)
      fprintf(stderr, "P2: NRRequestIC/P = %u/%u\n",
              ARM8_MEM.NRRequestIC, ARM8_MEM.NRRequestIP);

    /* if not first cycle & instruction requested then fetch next instruction */
    if (!first && reqInstr) {

      if (!newAddress && instInProg)  /* no new address so grab next inst */
        ilbAddr += 0x4;

      instInProg = 2;
      reqInstr1 = 1;
      changeInstr = 1;

      ilbDepth = (int)((ilbAddr/4) % 4);

#ifdef SBW
      ilbDepth = 3;
#endif

      /* set RResponse */
      if (ilbDepth < 3)
        rResponse = RRESP_INSTR2; /* 2 instruction words returned */
      else if (ilbDepth == 3) {
        rResponse = RRESP_INSTR1; /* 1 instruction word returned */
        reqInstr1 = 0;
        instInProg = 1;
      }

      if (dLevel >= 8)
        fprintf(stderr, "P2: ILB Address = %08lX\n", ilbAddr);

      switch (ca_is_in_cache(ilbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
#endif
          {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", ilbAddr);
          ilbData = 0xe6000010;
        } else
          rData2 = ilbData;
        break;
      default: /* what? */
        break;
      }

    } else if (first && reqInstr) {
      changeInstr = 1;
      reqInstr1 = 1;
      instInProg = 2;
    }

    /* Set internal values */
    switch (ARM8_MEM.RRequestD) {
    case RREQD_NONE:  /* no operation */
      req2data = req1data = 0;
      changeData = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: RRequestD = RREQD_NONE\n");

      break;

    case RREQD_ONE:  /* Return 1 word from DLB */
      req1data = 1;
      req2data = 0;

      changeInstr = 0;
      changeData = 1;

      if (reqInstr) {
        reqInstr = 0;
        reqInstr1 = 0;
      }

      if (dLevel >= 8)
        fprintf(stderr, "P2: RRequestD = RREQD_ONE\n");

      switch (ARM8_MEM.ARequest) {
      case AREQ_NONE:
        dlbAddr += 0x4; break;
      case AREQ_LOAD_S:
      case AREQ_LOAD_SM:
        break;
      default: /* must be an address on VAddress */
        dlbAddr = ARM8_MEM.VAddress & 0xfffffffc;
      }

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
          {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* ?? */
        break;
      }

      dlbDepth = (int)((dlbAddr/4) % 4);
      /* dlbDepth = 3; */

      rResponse = RRESP_DATA1; /* 1 data word returned */

      rData2 = dlbData;

      break;
    case RREQD_TWO:  /* Return 2 words from DLB */
      req2data = 1;
      req1data = 0;

      changeInstr = 0;
      changeData = 1;

      if (reqInstr) {
        reqInstr = 0;
        reqInstr1 = 0;
      }

      switch (ARM8_MEM.ARequest) {
      case AREQ_NONE:
        dlbAddr += 0x4; break;
      case AREQ_LOAD_S:
      case AREQ_LOAD_SM:
        break;
      default: /* must be an address on VAddress */
        dlbAddr = ARM8_MEM.VAddress & 0xfffffffc;
      }

      switch (ca_is_in_cache(dlbAddr)) {
      case 0: /* hit */
#ifdef RISCOS_EMU
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd, state))
#else
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
#endif
          {
          if (dLevel)
            fprintf(stderr, "Address:%08lX not found!\n", dlbAddr);
          dlbData = 0xe6000010;
        }
        break;
      default: /* */
        break;
      }

      dlbDepth = (int)((dlbAddr/4) % 4);

#ifdef SBW
      dlbDepth = 3;
#endif

      if (dlbDepth < 3)
        rResponse = RRESP_DATA2; /* 2 data words returned */
      else if (dlbDepth <= 3) {
        rResponse = RRESP_DATA1; /* 1 data word returned */
        req2data = 0;
        req1data = 1;
      }

      rData2 = dlbData;

      if (dLevel >= 8)
        fprintf(stderr, "P2: RRequestD = RREQD_TWO\n");

      break;
    default:
      req2data = req1data = 0;
      changeData = 0;

      if (dLevel >= 8)
        fprintf(stderr, "P2: RRequestD = UNKNOWN(%u)\n", ARM8_MEM.RRequestD);

      break;
    }

    if (dLevel >= 8) {
      fprintf(stderr, "P2: ILB depth = %d\n", ilbDepth);
      fprintf(stderr, "P2: DLB depth = %d\n", dlbDepth);
    }

    if (dLevel >= 5)
      fprintf(stderr, "P2: RResponse set to %u\n", rResponse);

    proceedPrevious = 0;

  } else {
    proceedPrevious = 1;

    if (dLevel >= 5)
      fprintf(stderr, "P2: NConfirm set to %u\n", !confirm);
  }

  if (first)
    first = 0;

  if (dLevel >= 9)
    fprintf(stderr, "P2: Rdata = %08lX in next cycle\n", rData2);

  if (dLevel >= 4)
    pDebug(2, state);

  return;
}

int db_cache(level, state)
  int level;
  armul8_state *state;
{
  dLevel = level;

  return 0;
}

void pDebug(phase, state)
  int phase;
  armul8_state *state;
{
  (void)fprintf(stderr, "    AReq ARes nRRIC/P RReD RRes IExh DExh CONF   VAdd     Wdat     RDat\n");
  if (phase == 1) {          /* print phase 1 variables */
    (void)fprintf(stderr, "P1:  %2u    %u/%u     %u    %u    %u    %u    %u    %u  %08lX %08lX %08lX\n",
          ARM8_MEM.ARequest, aResponse, ARM8_MEM.NRRequestIC, ARM8_MEM.NRRequestIP,
          ARM8_MEM.RRequestD, rResponse, ARM8_MEM.IExhausted,
          ARM8_MEM.DExhausted, !confirm, ARM8_MEM.VAddress, ARM8_MEM.Wdata,
          ARM8_MEM.Rdata);
    (void)fprintf(stderr, "    NAdd RIn2   ILBA     ILBD     DLBA     DLBD\n");
    (void)fprintf(stderr, "      %u    %u  %08lX %08lX %08lX %08lX\n",
          newAddress, reqInstr1, ilbAddr, ilbData, dlbAddr, dlbData);
  } else if (phase == 2) {   /* print phase 2 variables */
    (void)fprintf(stderr, "P2:   %u    %u/%u     %u    %u    %u    %u    %u    %u  %08lX %08lX %08lX\n",
          ARM8_MEM.ARequest, aResponse, ARM8_MEM.NRRequestIC, ARM8_MEM.NRRequestIP,
          ARM8_MEM.RRequestD, rResponse, ARM8_MEM.IExhausted,
          ARM8_MEM.DExhausted, !confirm, ARM8_MEM.VAddress, ARM8_MEM.Wdata,
          ARM8_MEM.Rdata);
    (void)fprintf(stderr, "    NAdd IInP RIn2   ILBA     ILBD     DLBA     DLBD\n");
    (void)fprintf(stderr, "      %u    %u    %u  %08lX %08lX %08lX %08lX\n",
          newAddress, instInProg, reqInstr1, ilbAddr, ilbData, dlbAddr, dlbData);
  } else {                   /* print everything!       */
    (void)fprintf(stderr, "P0: \n");
  }
}

void initialise_cache( state)
  armul8_state *state;
{
  /* set IExhausted to 1! */

  ARM8_MEM.IExhausted = 1;
  first = reqInstr = 0x1;             /* don't overwrite it in phase 1! */
  reqInstr1 = 0;
  rData1 = rData2 = 0xe6000010;
}

#undef __ARMCACHE__

/* EOF */



