/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/

/***********************************\
*                                   *
* swis.c: SWI interception routines *
*                                   *
\***********************************/

#include "stdio.h"
//#include <unistd.h>	/* hack to get SEEK_CUR defined! */
#include <errno.h>
#include <time.h>
#include "defs.h"
#include "swis.h"
#include "state.h"
#include "armul8.h"

#define EBADF 10
#define EMFILE 11

#define isatty_(f) _fisatty(f)

#ifdef macintosh
#define FIXCRLF(t,c) ((t & BINARY)?c:((c=='\n'||c=='\r')?(c ^ 7):c))
#else
#define FIXCRLF(t,c) c
#endif

#define BINARY 1
#define READOP 2
#define WRITEOP 4

#define BUFFERSIZE 4096
#ifndef FOPEN_MAX
#define FOPEN_MAX 64
#endif
#define UNIQUETEMPS 256


/************************************\
*                                    *
* The SWI number recognition routine *
*                                    *
\************************************/

unsigned armul8swis_recognise(unsigned32 SWINumber,armul8_state *state)
{
  extern int stop;
  fout("SWI %05x called from %x\n",SWINumber,CORE_PU.PcPlus8);
  if (SWINumber == 0xffffff) stop = 1;
  if (SWINumber == 0xfffffe) {

  }
  if (SWINumber == 0xfffffd) {

  }
#ifndef SWIS_EMULATION_ENABLED
  return FALSE;
#else
  return TRUE;			/* pretend to handle all SWI's for the moment */

  switch(SWINumber) {
    case SWI_WriteC:		return TRUE;
    case SWI_ReadC:		return TRUE;
    case SWI_Write0:		return TRUE;
    case SWI_GetEnv:		return TRUE;
    case SWI_Exit:		return TRUE;
    case SWI_EnterOS:		return TRUE;
    case SWI_GetErrno:		return TRUE;
    case SWI_Time:		return TRUE;
    case SWI_Clock:		return TRUE;
    case SWI_CLI:		return TRUE;
    case SWI_Open:		return TRUE;
    case SWI_IsTTY:		return TRUE;
    case SWI_InstallHandler:	return TRUE;
    case SWI_Remove:		return FALSE;
    case SWI_Rename:		return FALSE;
    case SWI_Close:		return FALSE;
    case SWI_Write:		return TRUE;
    case SWI_Read:		return FALSE;
    case SWI_Seek:		return FALSE;
    case SWI_Flen:		return FALSE;
    case SWI_TmpNam:		return FALSE;
    case SWI_GenerateError:	return FALSE;
    default:			return FALSE;
  }
  printf("armul8swis_recognise: We shouldn't be here!\n");
  return FALSE;
#endif
}


/*************************************\
*                                     *
* Individual SWI processing functions *
*                                     *
\*************************************/

/* fisrt globals relevant to all the handler functions */
static unsigned int CurrentSWIState;
static unsigned int ErrorNo;

/* now globals specific to individual functions */
static unsigned int Write0_address;

static char CLI_string[50];
static unsigned int CLI_char;
static unsigned int CLI_pointer2;
static char command[50];		/* should be long enough.... */

static char Open_string[50];
static unsigned int Open_char;
static unsigned int Open_pointer;

static char* fmode[] = {"r","rb","r+","r+b",
                        "w","wb","w+","w+b",
                        "a","ab","a+","a+b",
                        "r","r","r","r"} /* last 4 are illegal */ ;
static FILE *FileTable[FOPEN_MAX];
static char FileFlags[FOPEN_MAX];
static char *tempnames[UNIQUETEMPS];

/****************************\
*                            *
* The initialisation routine *
*                            *
\****************************/

void armul8swis_init()
{
unsigned int temp;

#ifndef SWIS_EMULATION_ENABLED
  return;
#else
  for (temp = 0 ; temp < FOPEN_MAX ; temp++)
    FileTable[temp] = NULL;
  for (temp = 0 ; temp < UNIQUETEMPS ; temp++)
    tempnames[temp] = NULL;
#endif
}

/******************\
*  Debug Routine   *
\******************/
void SWI_debug(Core_SWIs *data)
{
  switch (data->Request) {
    case SWIREQUEST_STR:
		printf("STR:  Address= %x Data= %x\n",data->Address,data->Data);
		break;
    case SWIREQUEST_LDR:
		printf("LDR:  Address= %x\n",data->Address);
		break;
    case SWIREQUEST_STRB:
		printf("STRB: Address= %x Data= %x\n",data->Address,data->Data);
		break;
    case SWIREQUEST_LDRB:
		printf("LDRB: Address= %x\n",data->Address);
		break;
    case SWIREQUEST_END:
		printf("END\n");
		break;
    case SWIREQUEST_HALT:
		printf("HALT\n");
		break;
    default:
		printf("woops!\n");
  }
}

/************************\
*  SWI_Write0 handler    *
\************************/
void Write0_handler(Core_SWIs *data)
{
unsigned int NextSWIState;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	Write0_address = data->Regs[0];
	data->Address = Write0_address;
	data->Request = SWIREQUEST_LDRB;
	NextSWIState = 1;
	break;
    case 1:
	if (data->Data == 0) {		/* look for null termination */
	  data->Request = SWIREQUEST_END;
	  NextSWIState = -1;		/* shouldn't see this... */
	} else {
	  fprintf(stdout,"%c",data->Data);
	  ErrorNo = errno;
	  data->Address = ++Write0_address;
	  data->Request = SWIREQUEST_LDRB;
	  NextSWIState = 1;
	}
	break;
    default:
	printf("Write0_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}

static char *GetEnv_pointer1;
static unsigned int GetEnv_pointer2;
/************************\
*  SWI_GetEnv handler    *
\************************/

void GetEnv_handler(Core_SWIs *data, char *cmdline)
{
unsigned int NextSWIState;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	/* first return highest available address */
	if (TRUE)
	  data->Regs[1] = 0x80000000;	/* was FFFFFFF0 */
	else
	  data->Regs[1] = ADDRUSERSTACK;

	GetEnv_pointer1 = cmdline;	/* address of string */
	/* printf("Current Env string : %s\n",GetEnv_pointer1); */
	GetEnv_pointer2 = ADDRCMDLINE;
	data->Regs[0] = ADDRCMDLINE;
	data->Address = GetEnv_pointer2;
	data->Data = *GetEnv_pointer1;
	/* SWI_debug(data); */
	/* printf("GetEnv char : 0x%x\n",data->Data); */
	data->Request = SWIREQUEST_STRB;
	NextSWIState = 1;		/* go into looping state */
	break;
    case 1:
	if (*GetEnv_pointer1 == 0) {	/* last byte we wrote */
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	} else {
	  GetEnv_pointer1++;
	  GetEnv_pointer2++;
	  data->Address = GetEnv_pointer2;
	  data->Data = *GetEnv_pointer1;
	  /* printf("GetEnv char : 0x%x\n",data->Data); */
	  data->Request = SWIREQUEST_STRB;
	  NextSWIState = 1;		/* keep going */
	}
	break;
    default:
	printf("GenEnv_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}

/************************\
*     SWI_CLI handler    *
\************************/
void CLI_handler(Core_SWIs *data)
{
unsigned int NextSWIState;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	CLI_char = 0;
	CLI_pointer2 = data->Regs[0];
	data->Address = CLI_pointer2;
	data->Request = SWIREQUEST_LDRB;
	SWI_debug(data);
	break;
    case 1:
	CLI_string[CLI_char] = data->Data;	/* save data read */
	if (data->Data == 0) {			/* last byte we read */
	  data->Regs[0] = (unsigned int) system(CLI_string);
	  ErrorNo = errno;
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	} else {
	  CLI_char++;
	  CLI_pointer2++;
	  data->Address = CLI_pointer2;
	  data->Request = SWIREQUEST_LDRB;
	  SWI_debug(data);
	  NextSWIState = 1;		/* keep going */
	}
	break;
    default:
	printf("CLI_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}

/************************\
*    SWI_Open handler    *
\************************/
void Open_handler(Core_SWIs *data)
{
unsigned int NextSWIState;
unsigned int type, temp;
FILE *fptr;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	Open_char = 0;
	Open_pointer = data->Regs[0];	/* pointer to file name */
	data->Address = Open_pointer;
	data->Request = SWIREQUEST_LDRB;
	NextSWIState = 1;
	break;
    case 1:
	Open_string[Open_char] = data->Data;	/* save data read */
	/* printf("filename char : 0x%x\n",data->Data); */
	if (data->Data == 0) {			/* last byte we read */
	  printf("trying to open file \"%s\"\n",Open_string);
	  type = data->Regs[1] & 15L;
	  printf("mode: %s\n",fmode[type]);
	  if (strcmp(Open_string, ":tt") == 0 && (type == 0 || type == 1))
	    fptr = stdin;			/* opening tty "r" */
	  else if (strcmp(Open_string, ":tt") == 0 && (type == 4 || type == 5))
	    fptr = stdout;			/* opening tty "w" */
	  else {
	    fptr = fopen(Open_string, fmode[type]);
	    printf("issueing fopen call\n");
	  }
	  ErrorNo = errno;
	  data->Regs[0] = 0;		/* open failed unless... */
	  if (fptr != NULL) {
  	    for (temp = 0 ; temp < FOPEN_MAX ; temp++)
    	      if (FileTable[temp] == NULL ||
		 (FileTable[temp] == fptr && (FileFlags[temp] & 1) == (type & 1))
		 ) {
      		FileTable[temp] = fptr;
      		FileFlags[temp] = type & 1; /* preserve the binary bit */
      		data->Regs[0] = (unsigned int)temp + 1;
	        printf("channel number allocated = %d\n",data->Regs[0]);
	        printf("file table entry = %d\n",temp);
      		break;
	      }
	    if (data->Regs[0] == 0)
	      ErrorNo = EMFILE;			/* too many open files */
	    else
	      ErrorNo = errno;
	  } else {
  	    ErrorNo = errno;
	    perror("file open failed\n");
	  }
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	} else {
	  Open_char++;
	  Open_pointer++;
	  data->Address = Open_pointer;
	  data->Request = SWIREQUEST_LDRB;
	  NextSWIState = 1;		/* keep going */
	}
	break;
    default:
	printf("Open_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}

static char buffer[BUFFERSIZE];	/* the read/write buffer */
static char *cptr;		/* pointer to the buffer */
static unsigned int addr, type, upto, size;
static unsigned int FileHandle;
static FILE *fptr;		/* a global to indicate file we are writing to */
/************************\
*    SWI_Write handler   *
\************************/
void Write_handler(Core_SWIs *data)
{
unsigned int NextSWIState;
unsigned int temp;
char ch;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	temp = data->Regs[0] ;
	FileHandle = data->Regs[0] ;
	if (temp == 0 || temp > FOPEN_MAX || FileTable[temp - 1] == 0) {
	  ErrorNo = EBADF;		/* the file handle is illegal */
	  data->Regs[0] = -1L;
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	} else {
	  temp--;
	  fptr = FileTable[temp];
	  type = FileFlags[temp];
	  addr = data->Regs[1];
	  size = (unsigned)data->Regs[2];
	  if (type & READOP)
	    fseek(fptr,0L,SEEK_CUR);	/* seek to the current pos. */
	  FileFlags[temp] = (type & BINARY) | WRITEOP;
	  if (size>0) {			/* actually wants some bytes */
	    if (size >= BUFFERSIZE)	/* work out how much to read from mem */
	      upto = BUFFERSIZE;	/* upto = number of bytes... */
	    else			/* ... to read this time */
	      upto = size;
	    data->Address = addr;
	    cptr = buffer;		/* start of FOR loop!!! */
	    NextSWIState = 1;
	    data->Request = SWIREQUEST_LDRB;
	  } else {		/* nothing to do */
	    NextSWIState = -1;
	    data->Request = SWIREQUEST_END;
	  }
	}
	break;
    case 1:
	ch = (char) data->Data;
	*cptr = FIXCRLF(type,ch);	/* save byte */
	addr++;				/* move pointer on a byte */
	if ( (cptr - buffer)<upto ) {	/* keep going */
	  cptr++;			/* move buffer pointer onwards */
	  data->Address = addr;		/* next byte address to read from */
	  data->Request = SWIREQUEST_LDRB;
	  NextSWIState = 1;
	  break;		/* BREAK OUT OF CASE SINCE MORE BYTES*/
	} else {			/* end of loop */
	  temp = (fptr == stderr || fptr == stdout)
	     ? fwrite(buffer,1,upto,stdout)	/* write to screen... */
	     : fwrite(buffer,1,upto,fptr);	/* or to a file */
	  /* if (fptr == stderr || fptr == stdout)
	    printf("bypassed fwrite call\n"); */
	  if (temp < upto) {			/* if number read<number asked for.. */
	    data->Regs[0] = (unsigned)(size - temp) ;
	    ErrorNo = errno ;
	    printf("less bytes received than asked for \n");
	  }
	  /* printf("\n%d bytes written to channel %d\n",temp, FileHandle); */
	  size -= upto ;
	}
	if (size>0) {		/* some more to do */
	  if (size >= BUFFERSIZE)	/* work out how much to read from mem */
	    upto = BUFFERSIZE;	/* upto = number of bytes... */
	  else			/* ... to read this time */
	    upto = size;
	  data->Address = addr;
	  cptr = buffer;	/* point back to start of buffer */
	  NextSWIState = 1;
	  data->Request = SWIREQUEST_LDRB;
	} else {
	  data->Regs[0] = 0;
	  ErrorNo = errno;
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	}
	break;
    default:
	printf("Write_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}

/************************\
*    SWI_Read handler    *
\************************/
void Read_handler(Core_SWIs *data)
{
unsigned int NextSWIState;
unsigned int temp;
char ch;

  switch(CurrentSWIState) {
			/* setup the various static variables in state 0 */
    case 0:				/* first time in */
	temp = data->Regs[0] ;
	FileHandle = data->Regs[0] ;
	if (temp == 0 || temp > FOPEN_MAX || FileTable[temp - 1] == 0) {
	  ErrorNo = EBADF;		/* the file handle is illegal */
	  data->Regs[0] = -1L;
	  NextSWIState = -1;
	  data->Request = SWIREQUEST_END;
	} else {
	  temp--;
	  fptr = FileTable[temp];
	  type = FileFlags[temp];
	  addr = data->Regs[1];
	  size = (unsigned)data->Regs[2];
	  printf("Trying to read from file %d, address = %x, length = %d\n",temp+1,addr,size);
	  if (type & WRITEOP)
	    fseek(fptr,0L,SEEK_CUR);	/* seek to the current pos. */
	  FileFlags[temp] = (type & BINARY) | READOP;

	  if (size>0) {			/* some bytes to read */
	    if (isatty_(fptr)) {	/* interactive channel */
	      upto = (size >= BUFFERSIZE)?BUFFERSIZE:size + 1;
	      if (fgets(buffer, upto, stdin) != 0)
                temp = strlen(buffer);
	      else
                temp = 0 ;
	      printf("read %d bytes from stdin\n",temp);
              upto-- ; /* 1 char used for terminating null */
            } else {
	      upto = (size>=BUFFERSIZE)?BUFFERSIZE:size ;
	      temp = fread(buffer,1,upto,fptr) ;
	      printf("read %d bytes from file\n",temp);
	    }
	    if (temp < upto) {
	      printf("the last read was not as much as was asked for\n");
	      data->Regs[0] = (size - temp);	/* not all bytes asked for were read.... */
	      ErrorNo = errno;
	    } else data->Regs[0] = 0;

/* if read failed to get enough bytes then flag the error in R0 */

	    cptr = buffer;
	    data->Data =*cptr;		/* read the first byte in buffer */
	    data->Address = addr;	/* address to write the buffer to */
	    data->Request = SWIREQUEST_STRB;
	    SWI_debug(data);
	    NextSWIState = 1;
	  } else {
	    data->Regs[0]=0;	/* no bytes asked for, so none not read.... */
	    data->Request = SWIREQUEST_END;
	    NextSWIState = -1;
	  }
	}
	break;

		/* in state 1 write it to the host, and go back to state 1 if more
		   to transfer. We enter the first time with upto = number of
		   bytes to write, and the first byte already written */
    case 1:
	if ( (cptr-buffer+1)==upto ) {	/* if last byte of buffer now written */
	  if (data->Regs[0] != 0) {	/* we didn't get everything we originally asked for */
	    printf("didn't read as much as was asked for, so exiting handler\n");
	    ErrorNo = errno;
	    NextSWIState = -1;	/* exit immediately with r0 = number not read */
	    data->Request = SWIREQUEST_END;
	  } else {			/* we did get everything we asked for */
	    printf("just read as much as was asked for into buffer\n");
	    size -= upto;			/* read 'upto' bytes so far */
	    if (size > 0) {		/* need to go around again */
	      if (isatty_(fptr)) {	/* interactive channel */
		upto = (size >= BUFFERSIZE)?BUFFERSIZE:size + 1 ;
		if (fgets(buffer, upto, stdin) != 0)
		  temp = strlen(buffer) ;
		else
		  temp = 0 ;
		printf("read a block from stdin\n");
		upto-- ; /* 1 char used for terminating null */
	      } else {
		upto = (size>=BUFFERSIZE)?BUFFERSIZE:size ;
		temp = fread(buffer,1,upto,fptr) ;
		printf("read %d bytes from file\n",temp);
	      }
	      if (temp < upto) {
		printf("the last read was not as much as was asked for\n");
	        data->Regs[0] = (size - temp);	/* not all bytes asked for were read.... */
	        ErrorNo = errno;
	      } else data->Regs[0] = 0;

	      cptr = buffer;		/* point to start of the buffer again */
	      data->Data = *cptr;		/* read the first byte in buffer */
	      addr++;
	      data->Address = addr;	/* address to write the buffer to */
	      data->Request = SWIREQUEST_STRB;
	      NextSWIState = 1;
	      SWI_debug(data);
	    }
          }	/* end of 'sucessful block read code */
	}	/* end of 'buffer copied' code */
	else {				/* more to write to host */
	  addr++;			/* point to next location to write to */
	  data->Address = addr;
	  cptr++;			/* point to next byte to copy over */
	  data->Data = *cptr;
	  data->Request = SWIREQUEST_STRB;
	  NextSWIState = 1;		/* keep going */
	  /* SWI_debug(data); */
	}
	break;
    default:
	printf("Read_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}


static unsigned int handlerp, oldr1, oldr2;
/**********************************\
*    SWI_InstallHandler handler    *
\**********************************/
void InstallHandler_handler(Core_SWIs *data)
{
unsigned int NextSWIState;

  switch(CurrentSWIState) {
    case 0:				/* first time in */
	handlerp = ADDRSOFHANDLERS + data->Regs[0] * 8;	/* r0=exception no. */
	printf("installing handler at 0x%x\n",handlerp);
	data->Address = handlerp;
	data->Request = SWIREQUEST_LDR;
	NextSWIState = 1;
	break;
    case 1:
	oldr1 = data->Data;
	data->Address = handlerp + 4;
	printf("installing handler at 0x%x\n",handlerp+4);
	data->Request = SWIREQUEST_LDR;
	NextSWIState = 2;
	break;
    case 2:
	oldr2 = data->Data;
	data->Address = handlerp;
	data->Data = data->Regs[1];
	data->Request = SWIREQUEST_STR;
	NextSWIState = 3;
	break;
    case 3:
	data->Address = handlerp + 4;
	data->Data = data->Regs[2];
	data->Request = SWIREQUEST_STR;
	NextSWIState = 4;
	break;
    case 4:
	NextSWIState = -1;
	data->Regs[1]=oldr1;
	data->Regs[2]=oldr2;
	data->Request = SWIREQUEST_END;
	break;
    default:
	printf("InstallHandler_handler: help!\n");
	printf("Entered default state\n");
	break;
  }
  CurrentSWIState = NextSWIState;
}
/****************************\
*                            *
* The SWI processing routine *
*                            *
\****************************/

void armul8swis_process(Core_SWIs *data, char *cmdline)
{
#ifndef SWIS_EMULATION_ENABLED
  data->Request = SWIREQUEST_HALT;
#else
unsigned int temp;
FILE *fptr;

  switch (data->Status) {
    case SWISTATUS_NEW:
		CurrentSWIState = 0;		/* reset the state flag */
		switch (data->SWINumber) {
		  /* process first stage of SWI */
		  case SWI_WriteC:
				fprintf(stdout,"%c",data->Regs[0]);
				ErrorNo = errno;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_ReadC:
				data->Regs[0] = getchar();
				ErrorNo = errno;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_Write0:	/* write out a null-terminated string */
				Write0_handler(data);
				break;
		  case SWI_GetEnv:	/* get $cmdline string */
				GetEnv_handler(data, cmdline);
				break;
		  case SWI_Exit:	/* stop the simulation */
				data->Request = SWIREQUEST_HALT;
				break;
		  case SWI_GetErrno:	/* read C library err. no. */
				data->Regs[0]=ErrorNo;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_EnterOS:	/* switch to CPSR 32 mode */
				data->Spsr = (data->Spsr && !0x1f) || 0x13;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_Time:	/* read the current unix time */
				data->Regs[0] = time(NULL);
				ErrorNo = errno;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_Clock:	/* read num. centi-seconds since start */
				data->Regs[0] =
			#ifdef CLOCKS_PER_SEC
				  (CLOCKS_PER_SEC >= 100)
				  ? (int) (clock() / (CLOCKS_PER_SEC / 100))
				  : (int) ((clock() * 100) / CLOCKS_PER_SEC) ;
			#else
				/* presume unix... clock() returns microseconds */
				(int) (clock() / 10000) ;
			#endif
				ErrorNo = errno ;
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_CLI:		/* Pass string to CLI */
				CLI_handler(data);
				break;
		  case SWI_Open:	/* open a file */
				Open_handler(data);
				break;
		  case SWI_InstallHandler:
				InstallHandler_handler(data);
				break;
		  case SWI_IsTTY:	/* is file interactive? */
				if (data->Regs[0] == 0 ||
				    data->Regs[0] > FOPEN_MAX ||
				    FileTable[data->Regs[0]-1] == 0
				   ) {
				  ErrorNo = EBADF;
				  data->Regs[0] = -1L;
				} else {
				  FILE *fptr;
				  printf("IsTTY? on channel %d\n",data->Regs[0]);
				  fptr = FileTable[data->Regs[0]-1];
				  data->Regs[0] = isatty_(fptr);
				  printf("IsTTY? result= %d\n",data->Regs[0]);
				  ErrorNo = errno;
				}
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_Write:	/* write bytes to a file */
				Write_handler(data);
				break;
		  case SWI_Close:	/* close a file */
				temp = data->Regs[0];
				printf("closing channel %d\n",temp);
				if (temp == 0 ||
				    temp > FOPEN_MAX ||
				    FileTable[temp - 1] == 0
				   ) {
				  ErrorNo = EBADF;
				  data->Regs[0] = -1L;
				  printf("error closing channel %d\n",temp);
				} else {
				  temp--;
				  fptr = FileTable[temp];
				  if (fptr == stdin || fptr == stdout)
				     data->Regs[0] = 0;
				  else
				     data->Regs[0] = fclose(fptr);
				  FileTable[temp] = NULL;
				  ErrorNo = errno;
				}
				data->Request = SWIREQUEST_END;
				break;
		  case SWI_Read:	/* read bytes from a file */
				Read_handler(data);
				break;
		  case SWI_Remove:	/* delete file name pointed to by R0 */
		  case SWI_Rename:	/* rename file R0 to R1 */
		  case SWI_Seek:	/* alter the file pointer */
		  case SWI_Flen:	/* return length of an open file */
		  case SWI_TmpNam:	/* return a temporary file name */
		  case SWI_GenerateError:	/* hmm.... */
		  default: printf("armul8swis_process: help!\n");
			   printf("SWI number 0x%x called without a handler.\n",data->SWINumber);
			   data->Request = SWIREQUEST_HALT;
			   break;
		}
		break;
    case SWISTATUS_DONE:		/* process intermediate stages */
		switch (data->SWINumber) {
		  case SWI_WriteC:
		  case SWI_ReadC:
		  case SWI_Exit:
		  case SWI_GetErrno:
		  case SWI_EnterOS:
		  case SWI_Clock:
		  case SWI_Time:
				printf("armul8swis_process: What are we doing here?\n");
				break;
		  case SWI_Write0:
				Write0_handler(data);
				break;
		  case SWI_GetEnv:
				GetEnv_handler(data, cmdline);
				break;
		  case SWI_CLI:
				CLI_handler(data);
				break;
		  case SWI_Open:
				Open_handler(data);
				break;
		  case SWI_InstallHandler:
				InstallHandler_handler(data);
				break;
		  case SWI_Write:
				Write_handler(data);
				break;
		  case SWI_Read:
				Read_handler(data);
				break;
		  case SWI_Remove:
		  case SWI_Rename:
		  case SWI_Close:
		  case SWI_Seek:
		  case SWI_Flen:
		  case SWI_IsTTY:
		  case SWI_TmpNam:
		  case SWI_GenerateError:
		  default: printf("armul8swis_process: help!");
		}
		break;
    case SWISTATUS_ABORT:
		printf("armul8swis_process: A memory access aborted, help!\n");
		data->Request = SWIREQUEST_HALT;
		break;
    default:
		printf("armul8swis_process: Didn't recognise status type\n");
		data->Request = SWIREQUEST_HALT;
		break;
  }
#endif
}
