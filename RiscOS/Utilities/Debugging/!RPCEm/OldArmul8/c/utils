/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              L G Howarth                                         *
* Development started: 17 June 1994                                        *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*                                                   
        utils.c: extra utilities associated with armul8  

  This file contains the `extra utilities' needed in ARMul8. These
  utilities are mainly rigged bits of code to trap writes to special
  memory locations etc. Four main functions (one for each half phase)
  may call a function for each of the utilities.             
*/

#include <stdio.h>
#include "defs.h"
#include "state.h"
#include "armul8.h"
#include "ram.h"

#define TUBE_ADDRESS 0x3000000
#define EVENT_FIQ    0x3000008
#define EVENT_IRQ    0x300000C
#define FIQ_CLEAR    0x3000010
#define IRQ_CLEAR    0x3000014
#define FIQ_STROBE   0x300001C
#define IRQ_STROBE   0x3000020
#define FSTROBE_OFF  0x3000024
#define ISTROBE_OFF  0x3000028
#define ISYNC_ON     0x3000030
#define ISYNC_OFF    0x3000034
#define CYCLE_ADDR   0x3000080
#define PREDICT_ADDR 0x3000084
#define ENDIAN_ADDR  0x3000085
#define RESET_ADDR   0x3000086

/* set to 1 for RESET debugging messages to be printed */
#define Reset_Debug  0

/* Tube Model variable declarations */
static int        cyc_state=0,cyc_count=0;
static unsigned   arequest=AREQ_NONE;
static unsigned32 vaddress;

/****************************************************************\
*                                                                *
*  tbox_lateph1: validation suite trick box specials             *
*                                                                *
\****************************************************************/

int tbox_lateph1(armul8_state *state)
{
  static char     out_str[1024],sent_chr,last_chr;
  static int      chr_count=0;
  static unsigned interrupt_count=0,new_fiq,new_irq;
  static unsigned fiq_regs[16]={0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000};
  static unsigned irq_regs[16]={0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000,
                                0x80000000,0x80000000,0x80000000,0x80000000};
  static unsigned fiq_strobe_event=0x80000000,irq_strobe_event=0x80000000,
                  fiq_strobe_period=0,        irq_strobe_period=0;

  static int      reset_state=0,reset_count=0,reset_period=0;
  int             i,int_reg_enable;

/* INTERRUPT SCHEDULING. There are 16 FIQ & IRQ registers. Independent for these
   registers is a single 31 bit counter which wraps around at 0x80000000 to
   0x0. (This could be smaller in the hardware without adversely affecting
   the functionality). The scheme is that when a schedule FIQ/IRQ request in x
   cycles is made, then x is added to the current 31 bit counter value
   (making adjustments if the value would be outside the counter range). The
   new value is then store in one of the 'free' FIQ/IRQ registers. A 'free'
   register is indicated by having the most significant bit set, hence
   only a 31 bit counter. In storing the value to a 'free' register then
   bit 31 is cleared and the register is 'active'. On each cycle the
   counter is compared with each 'active' register. If they are identical
   then a FIQ/IRQ is asserted and the most significant bit of the register is
   set returning it into the 'free' state.
 
   STROBE INTERRUPTS. The strobe interrupts work in a similar manner. There
   are four registers; two event registers and two period registers which
   hold the interval period of the strobe. When the counter equals
   the value held in the the event register the interrupt is triggered. The
   value of the period reg is then added to the count and stored in the
   event register. Again the MSbit of the event register indicates whether
   the interrupt is active or not.*/


  /* Maintain the cycle counter and check for scheduling the interrupts */

  interrupt_count = (interrupt_count+1) & 0x7FFFFFFF; /* Increment the counter   */
                                                      /* wrapping round mod 2^31 */

  /* We've now got ARequest, VAddress and Wdata, so are ready to perform the */
  /* required operation.                                                     */

  if(arequest==AREQ_STORE || arequest==AREQ_LOAD || arequest==AREQ_STORE_B){
    switch (vaddress){

      case TUBE_ADDRESS:                              /* TUBE MODEL */
        if(ARM8_MEM.AResponse==ARESP_DONE){
          last_chr=sent_chr;
          sent_chr=ARM8_MEM.Wdata>>24;
          if(sent_chr==10){
            out_str[chr_count] = 0;
            fprintf(stdout,"%s\n",out_str);
            chr_count=0;
          }
          else if (sent_chr==4){
            fprintf(stdout,"ARMul stopped CRTL D set to tube.\n");
            set_sim_state(COMM,state->sim_info);
          }
          else if(sent_chr==13){
            if(last_chr != 10){      /* Print if no line feed else do Nothing!*/
             out_str[chr_count] = 0;
             fprintf(stdout,"%s\n",out_str);
             chr_count=0;
            }
          }                          
          else{
            out_str[chr_count]=sent_chr;
            chr_count++;
            if(chr_count==1023){
              fprintf(stdout,"%s",out_str);
              chr_count=0;
            }
          }
        }
        break;

      case EVENT_FIQ:                                 /* FIQ on */
        /* New FIQ time is current interrupt count plus data, wrapped */
        /* round mod 2^31.                                            */
        new_fiq=(interrupt_count+ARM8_MEM.Wdata) & 0x7FFFFFFF;

        /* Store the new fiq time in the first available `free` register. */
        for(i=0;i<15;i++){
          int_reg_enable=(fiq_regs[i]>>31);
          if(int_reg_enable){
            fiq_regs[i]=new_fiq;
            i=17;
          }
          if(i==15)fprintf(stdout,"Failed to Schedule the Fiq\n");
        }   
        break;

      case EVENT_IRQ:                                 /* IRQ on */
        /* New IRQ time is current interrupt count plus data, wrapped */
        /* round mod 2^31.                                            */
        new_irq=(interrupt_count+ARM8_MEM.Wdata) & 0x7FFFFFFF;

        /* Store the new irq time in the first available `free` register. */
        for(i=0;i<15;i++){
          int_reg_enable=(irq_regs[i]>>31);
          if(int_reg_enable){
            irq_regs[i]=new_irq;
            i=16;
          }
          if(i==15)fprintf(stdout,"Failed to Schedule the Irq\n");
        }    
        break;

      case FIQ_CLEAR:                                 /* FIQ off */
        ARM8_EXT.Fiq = 0;
        break;

      case IRQ_CLEAR:                                 /* IRQ off */
        ARM8_EXT.Irq = 0;
        break;

      case FIQ_STROBE:                                /* FIQ strobe on */
        fiq_strobe_period=ARM8_MEM.Wdata;
        fiq_strobe_event=(interrupt_count+fiq_strobe_period) & 0x7FFFFFFF;
        fprintf(stdout,"Set up FIQ Strobe %d\n",ARM8_MEM.Wdata);
        break;

      case IRQ_STROBE:                                /* IRQ strobe on */
        irq_strobe_period=ARM8_MEM.Wdata;
        irq_strobe_event=(interrupt_count+irq_strobe_period) & 0x7FFFFFFF;
        fprintf(stdout,"Set up IRQ Strobe %d\n",ARM8_MEM.Wdata);
        break;

      case FSTROBE_OFF:                               /* FIQ strobe off */
        fiq_strobe_event=0x80000000;
        break;

      case ISTROBE_OFF:                               /* IRQ strobe off */
        irq_strobe_event=0x80000000;
        break;

      case ISYNC_ON:
        ARM8_EXT.Isync = 1;
        break;

      case ISYNC_OFF:
        ARM8_EXT.Isync = 0;
        break;

      case CYCLE_ADDR:                                /* Cycle counter */
        if(arequest==AREQ_STORE)
          cyc_state=1;
        else if(arequest==AREQ_LOAD)
          cyc_state=0;
        break;

      case PREDICT_ADDR:                              /* Predict on/off */
        if(ARM8_MEM.ARequest==AREQ_STORE)
          state->puint.predict_on=0;
        else if (ARM8_MEM.ARequest==AREQ_LOAD)
          state->puint.predict_on=1;
        break; /* turn prediction on/off */

      case ENDIAN_ADDR:                               /* Big/little endian */
        break; /* Unimplemented at present */

      case RESET_ADDR:                                /* Reset */
        if(ARM8_MEM.ARequest==AREQ_STORE_B){
          /* We have a byte write to reset address.
             If reset_state = 0 then schedule a reset in Wdata cycles,
               reset_state := 1
             If reset_state = 1 then set reset period to Wdata cycles - 1,
               reset_state := 0
          */
          if (reset_state == 0) {
            reset_count = ARM8_MEM.Wdata & 0xFF;
            if (Reset_Debug == 1){
              fprintf(stdout,"Scheduling reset for %d cycles\n",reset_count);
            }
            reset_state = 1;
          }
          else if (reset_state == 1) {
            reset_period = (ARM8_MEM.Wdata & 0xFF);
            if (Reset_Debug == 1) {
              fprintf(stdout,"Reset period %d cycles\n",reset_period);
            }
            reset_state = 0;
          }
        }
        else
          fprintf(stdout,"Non-byte write to Reset address\n");
        break;

      default:
        break;
    }
  }

  /* Deal with cycle counting */

  if(cyc_state){
    switch(cyc_state){
      case 1: cyc_count=ARM8_MEM.Wdata; cyc_state=2;
      case 2: cyc_count++; 
              store_word(cyc_count,CYCLE_ADDR);
              break;
    }
  }

/* CHECK IF WE NEED TO SET AN INTERRUPT */
                                                /* Check the FIQ Regs */

/* Implementation note: Here we should really check the value of the
   MSB of the register to see whether that register is active or not.
   However, if we implemented it this why then you would have one 
   comparison to check the MSB and the another comparison to check
   if the interrupt_count was equal to the stored value. Both checks
   could be done at once however. */

  for(i=0;i<15;i++)
    if(fiq_regs[i]==interrupt_count){
      ARM8_EXT.Fiq=1;
      fiq_regs[i]=fiq_regs[i]|0x80000000; /* set the top bit */
    }
/* Do exactly the same but for the IRQ registers */

  for(i=0;i<15;i++)
    if(irq_regs[i]==interrupt_count){
      ARM8_EXT.Irq=1;
      irq_regs[i]=irq_regs[i]|0x80000000; /* set the top bit */
    }

/* Check the strobe interrupts */

   if(fiq_strobe_event==interrupt_count ){
     ARM8_EXT.Fiq=1;
     fprintf(stdout,"Re-scheduled FIQ\n");
     fiq_strobe_event=(fiq_strobe_period+interrupt_count) & 0x7FFFFFFF;
   }
   if(irq_strobe_event==interrupt_count ){
     ARM8_EXT.Irq=1;
     fprintf(stdout,"Re-scheduled IRQ\n");
     irq_strobe_event=(irq_strobe_period+interrupt_count) & 0x7FFFFFFF;
   }

/* RESET scheduler.*/

/* First see if need to assert, or clear Reset */

  /* If performing reset then clear when reset_period reaches zero */
  if (ARM8_EXT.Reset == 1 && reset_period != 0) {
    reset_period--;
    if (reset_period == 0) ARM8_EXT.Reset = 0;
  }

  /* If there is a scheduled reset, then assert reset when reset_count = 0 */
  if (reset_count != 0) {
    reset_count--;
    if (reset_count == 0) {
      if (Reset_Debug == 1) fprintf(stdout,"Asserting Reset\n");
      ARM8_EXT.Reset = 1;
    }
  }   

  return(0);  
}

/****************************************************************\
*                                                                *
*  tbox_lateph2: validation suite trick box specials             *
*                                                                *
\****************************************************************/

int tbox_lateph2(armul8_state *state)
{
  /* Keep copies of ARequest and VAddress until we get Wdata in phase 1 */
  arequest = ARM8_MEM.ARequest;
  vaddress = ARM8_MEM.VAddress;
  return(0);     
}

/****************************************************************\
*                                                                *
*  armul8utils_earlyph1: extra utilities associated with armul8  *
*                                                                *
\****************************************************************/

armul8utils_earlyph1(armul8_state *state)
{
  /* call all EP1 utility functions */
  return(0);
}

/***************************************************************\
*                                                               *
*  armul8utils_lateph1: extra utilities associated with armul8  *
*                                                               *
\***************************************************************/

armul8utils_lateph1(armul8_state *state)
{
  int ret_value=0;
  /* call all LP1 utility functions */
  ret_value=tbox_lateph1(state);
  return(ret_value);
}

/****************************************************************\
*                                                                *
*  armul8utils_earlyph2: extra utilities associated with armul8  *
*                                                                *
\****************************************************************/

armul8utils_earlyph2(armul8_state *state)
{
  /* call all EP2 utility functions */
  return(0);
}

/****************************************************************\
*                                                                *
*  armul8utils_lateph2: extra utilities associated with armul8  *
*                                                                *
\****************************************************************/

armul8utils_lateph2(armul8_state *state)
{
  int ret_value=0;

  /* call all LP2 utility functions */
  ret_value=tbox_lateph2(state);
  return(ret_value);
}

/*************************************************************\
*                                                             *
*  armul8utils_init: initialisation code for extra utilities  *
*                                                             *
\*************************************************************/

armul8utils_init(armul8_state *state)
{
  ARM8_EXT.Fiq    = 0;
  ARM8_EXT.Irq    = 0;
  ARM8_EXT.Isync  = 1;
  ARM8_EXT.Reset  = 0;

  /* ARM8_EXT.BigEnd is the responsibility of the coprocessor and not */
  /* initialised here.                                                */
}
