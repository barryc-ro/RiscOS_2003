/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*/

#define __ARM8_MUL__

#ifdef DB_EXTEND
#include <stdio.h>
#define DPRINTF(x) ((void)fprintf x )
#else
#define DPRINTF(x) 
#endif

#include "multiplier.h"

/*
 * Notes:
 *
 * 1) The code below expects the timing of signals across the core
 *    extension interface to behave in a certain manner. The timing
 *    of these signals may well change in the future, but the current
 *    timing is as follows:
 *
 *    Interface signals:
 *
 *        Interlocked  Core -> Multiplier, Stable ph1 - changes ph2
 *                  Asserted if the next cycle is expected to interlock.
 *
 *        MulEnable Core -> Multiplier, stable ph1 - changes ph2
 *                  set before initialisation cycle & reset in last cycle
 *
 *        MulInit   Core -> Multiplier, stable ph1 - changes ph2
 *                  asserted during initialisation cycle
 *
 *        MulAcc    Core -> Multiplier, stable ph1 - changes ph2
 *                  asserted throughout the operation
 *
 *        MulLong   Core -> Multiplier, stable ph1 - changes ph2
 *                  asserted throughout the operation
 *
 *        MulSgn    Core -> Multiplier, stable ph1 - changes ph2
 *                  asserted throughout the operation
 *
 *        ABus      Core <-> Multiplier, stable ph1 - changes ph2
 *                  used for both reading operands and writing results
 *                  The multiplier samples the bus i ph1 and drives it
 *                  in ph2.
 *
 *        BBus      Core <-> Multiplier, stable ph1 - changes ph2
 *                  used for both reading operands and writing results.
 *                  The multiplier samples the bus i ph1 and drives it
 *                  in ph2.
 *
 *        MulTerm   Multiplier -> Core, changes ph1 - stable ph2
 *                  asserted in the last cycle but one to indicate the end
 *                  of the operation in progress.
 *
 *        MulC      Multiplier -> Core, stable ph1 - changes ph2
 *                  carry in to ALU
 *
 *        MulWrHigh Core -> Multiplier, changes ph1 - stable ph2
 *                  Signals the multiplier to write the high words
 *                  of the Carry-Save result
 *
 * 2) Besides the signals in the interface, the NConfirm[] signal is
 *    also used as a clock stopping signal.
 *
 *        NConfirm[] Memory -> Multiplier, stable ph1 - changes ph2
 */

/* define un-initialised bus value */
#define BUS_UNDEF 0x0bad0bad

/* enumerated type for FSM */
typedef enum {IDLE, INIT, MUL8, MUL16, MUL24, MUL32, WRITE} MulFsm;

/* local functions */
void arm8_multiply();
void print_info();
void print_internals();
MulFsm next_state();
char *current_state();

/* Debugging error messages */
static char *ErrorMsg[1] = {
"In state IDLE, MulEnable cannot be asserted without MulInit being \
asserted as well!"
};

/* internal FSM variables */
static unsigned NumOfCycles, Cin, tmp, DebugLevel = 0;
static unsigned terminating = 0;
static MulFsm MulState = IDLE;

/* internal DP variables */
static unsigned32 CS_Sum[2] = {BUS_UNDEF, BUS_UNDEF}, 
                  CS_Carry[2] = {BUS_UNDEF, BUS_UNDEF}, 
                  Accumulator[2] = {BUS_UNDEF, BUS_UNDEF}, 
                  IER = BUS_UNDEF, 
                  ICAND = BUS_UNDEF;

/*
 * initialise_multiplier() resets the state of the multiplier and the
 * interface signals controlled by the multiplier.
 */
void initialise_multiplier(state)
  armul8_state *state;
{
  /* first - initialise the internal state of the multiplier */
  MulState = IDLE;
  terminating = 0;

  /* next - initialise interface variables controlled by the multiplier */
  ARM8_EXTEND.MulTerm = 0;
  ARM8_EXTEND.MulC = 0;

  return;
}

void multiplier_earlyph1(state)
  armul8_state *state;
{
  return;
}

void multiplier_lateph1(state)
  armul8_state *state;
{

  /* 
   * Decide the next state of the multiplier based on the current state
   * and the controlling signals from the core.
   */

  if ((ARM8_EXTEND.Interlocked == 0) && !ARM8_MEM.NConfirm) {

    /* business as usual */

    switch (MulState) {

    case IDLE:
      IER = ICAND = Accumulator[1] = Accumulator[0] = BUS_UNDEF;
      CS_Sum[1] = CS_Sum[0] = CS_Carry[1] = CS_Carry[0] = BUS_UNDEF;
      ARM8_EXTEND.MulTerm = ARM8_EXTEND.MulC = 0;
      terminating = 0;

      /* check to see if previously interlocked */
      if (ARM8_EXTEND.MulEnable)
      {
        if (ARM8_EXTEND.MulInit)
          MulState = INIT;          /* initiate new operation */
        else                        /* undefined state transition! */
          (void)fprintf(stderr, "MUL: (P1) Illegal combination of input signals\n%s\n",
                  ErrorMsg[0]);
      }
      else
        MulState = IDLE;            /* no request from the core */
      break;

    case INIT:
      if (ARM8_EXTEND.MulEnable)
      {
        if (ARM8_EXTEND.MulInit)   
          MulState = INIT;          /* initiate new operation */
        else
          MulState = MUL8;          /* continue operation */
      }
      else
        MulState = IDLE;            /* operation skipped */
      break;

    case MUL8:
    case MUL16:
    case MUL24:
    case MUL32:
      if (terminating)
      {
        if (ARM8_EXTEND.MulLong) {
          MulState = WRITE;               /* wait for core to assert MulWrHigh */
          ARM8_EXTEND.MulTerm = 0;
        } else {
          MulState = IDLE;                /* back to idle state */
          ARM8_EXTEND.MulTerm = 0;
          terminating = 0;
        }
      }
      else
        MulState = next_state(MulState);  /* next state */
      break;
   
    case WRITE:
      MulState = IDLE;            /* default next state */
      ARM8_EXTEND.MulTerm = 0;
      terminating = 0;
      break;

    default:
      (void)fprintf(stderr, "MUL: (P1) Illegal state - FATAL error!!\n");
      MulState = IDLE;
    }

    /* read operands etc. from busses if in state INIT/MUL8 */
    if (MulState == INIT) {

      IER = ARM8_EXTEND.ABus;
      ICAND = ARM8_EXTEND.BBus;

      /* perform the early-termination detection */
      NumOfCycles = numOfCycles(IER, (int)ARM8_EXTEND.MulSgn, (int)ARM8_EXTEND.MulLong, 8);

    } else if (MulState == MUL8) {

      /* read Accumulator value if required */

      if (ARM8_EXTEND.MulAcc)
        Accumulator[0] = ARM8_EXTEND.BBus;
      else
        Accumulator[0] = 0x0;

      if (ARM8_EXTEND.MulAcc && ARM8_EXTEND.MulLong)
        Accumulator[1] = ARM8_EXTEND.ABus;
      else
        Accumulator[1] = 0x0;

      /* now perform the operation */
      arm8_multiply(IER, ICAND, Accumulator, ARM8_EXTEND.MulSgn, ARM8_EXTEND.MulLong, CS_Sum, CS_Carry, &Cin, &tmp);

    }

    /* Decide whether a multiply instruction is about to terminate. */
    if ((MulState != IDLE) && (MulState != WRITE)) {
      if (NumOfCycles == 0) {
        ARM8_EXTEND.MulTerm = 1;
        terminating = 1;
      } else
        NumOfCycles -= 1;
    }

  } /* else interlocked or NConfirmed, so no state update. */

  /* print info if debugging is turned on */
  if (DebugLevel)
    print_info(1, state);

  if (DebugLevel == 9)
    print_internals(1);

  return;
}

void multiplier_earlyph2(state)
  armul8_state *state;
{
  return;
}

void multiplier_lateph2(state)
  armul8_state *state;
{

  /* check to see whether the CS results should be driven onto the busses */
  if (terminating && !ARM8_EXTEND.MulWrHigh) { 

    /* drive low words of CS results + MulC */
    ARM8_EXTEND.ABus = CS_Sum[0];
    ARM8_EXTEND.BBus = CS_Carry[0];
    ARM8_EXTEND.MulC = Cin;

  } else if (terminating && ARM8_EXTEND.MulWrHigh) {

    /* drive high words of CS results + MulC */
    ARM8_EXTEND.ABus = CS_Sum[1];
    ARM8_EXTEND.BBus = CS_Carry[1];
    ARM8_EXTEND.MulC = 0x0;

  }

  /* print info if debugging is turned on */
  if (DebugLevel)
    print_info(2, state);

  if (DebugLevel == 9)
    print_internals(2);

  return;
}

/********************************************\
*                                            *
* The ARM8 multiplier emulation. The para-   *
* meters are:                                *
*                                            *
* Inputs:                                    *
*   ier   : the multiplier                   *
*   icand : the multiplicand                 *
*   acc   : the accumulator                  *
*   sign  : signed/unsigned operation        *
*   mull  : 32/64 bit result                 *
* Outputs:                                   *
*   res_s : 64 bit CS sum part of result     *
*   res_c : 64 bit CS carry part of result   *
*   cin   : the ALU carry-in bit             *
*   et    : the required # cycles in reality *
*                                            *
\********************************************/
void arm8_multiply(ier, icand, acc, signt, mull, res_s, res_c, cin, et)
  unsigned32 ier, icand, *acc; 
  unsigned32 signt, mull; 
  unsigned32 *res_s, *res_c; 
  unsigned32 *cin, *et;
{
  unsigned32 sum[2], carry[2], xd[2], yd[2], overflow = 0x0;

  sum[1] = sum[0] = 0x0;
  carry[1] = carry[0] = 0x0;
  xd[1] = xd[0] = 0x0;
  yd[1] = yd[0] = 0x0;

  *et = numOfCycles(ier, (signt ? 1 : 0), (mull ? 1 : 0), 8); 

  sum[0] = acc[0];
  carry[0] = acc[1];
  bmul_33x32(ier, icand, sum, carry, &overflow,(signt ? 1 : 0),(mull ? 1 : 0)); 

  *cin = overflow;
  /* overflow = waddcs(sum, carry, acc, xd, yd, (mull ? 1 : 0)); */

  res_s[1] = sum[1]; res_s[0] = sum[0];
  res_c[1] = carry[1]; res_c[0] = carry[0];
  /* *cin = ier & 0x00000001; */

/*
  if (*cin == 0x1) { 
    sum[1] = sum[0] = 0xffffffff;
    dwadd(sum, yd, res_c, &overflow);
  }
 */

  /* res_c[0] = (*cin == 0x1 ? yd[0] - 0x1 : yd[0]); */
  
}

/*
 * next_state() returns the next state of the multiplier FSM from the
 * current state. (Note, that the state currently is a global variable)
 */
MulFsm next_state(mstate)
  MulFsm mstate;
{
  MulFsm res = IDLE;

  switch (mstate) {
  case IDLE: res = INIT; break;
  case INIT: res = MUL8; break;
  case MUL8: res = MUL16; break;
  case MUL16: res = MUL24; break;
  case MUL24: res = MUL32; break;
  case MUL32: res = WRITE; break;
  case WRITE: res = IDLE; break;
  default: res = IDLE;
  }

  return res;
}

/*
 * current_state() returns the current state of the multiplier FSM as a string.
 */
char *current_state(mstate)
  MulFsm mstate;
{
  char *res = "IDLE ";

  switch (mstate) {
  case IDLE:  res = "IDLE "; break;
  case INIT:  res = "INIT "; break;
  case MUL8:  res = "MUL 8"; break;
  case MUL16: res = "MUL16"; break;
  case MUL24: res = "MUL24"; break;
  case MUL32: res = "MUL32"; break;
  case WRITE: res = "WRITE"; break;
  default: res = "IDLE ";
  }

  return res;
}

/*
 * db_multiplier() sets the internal level of debugging info to level.
 */
int db_multiplier(level, state)
  int level;
  armul8_state *state;
{
  DebugLevel = level;

  return 0;
}

/*
 * print_info() prints the interface plus state of the multiplier.
 */
void print_info(phase, state)
  int phase;
  armul8_state *state;
{
  (void)fprintf(stdout, "%s-State-ITL-E-I-L-A-S-MWH-MUL-T---ABUS-----BBUS---N----IER--\
---ICAND-----ACCUMULATOR--\n",
                (phase == 1 ? "P1" : "P2"));
  (void)fprintf(stdout, "   %5s  %u  %u %u %u %u %u  %u   %u  %u %08lX %08lX %u %08lX %08lX %08lX%08lX\n",
                current_state(MulState), 
                ARM8_EXTEND.Interlocked,
                ARM8_EXTEND.MulEnable,
                ARM8_EXTEND.MulInit,
                ARM8_EXTEND.MulLong,
                ARM8_EXTEND.MulAcc,
                ARM8_EXTEND.MulSgn,
                ARM8_EXTEND.MulWrHigh,
                ARM8_EXTEND.MulC,
                ARM8_EXTEND.MulTerm,
                ARM8_EXTEND.ABus,
                ARM8_EXTEND.BBus,
                NumOfCycles,
                IER,
                ICAND,
                Accumulator[1],
                Accumulator[0]);

  return;
}

/*
 * print_internals() prints the internal values of the multiplier.
 */
void print_internals(phase)
  int phase;
{
  (void)fprintf(stdout, "%s+LIL+---SH---+---SL---+---CH---+---CL---+\n",
                (phase == 1 ? "P1" : "P2"));
  (void)fprintf(stdout, "   %08lX %08lX %08lX %08lX\n",
                CS_Sum[1],
                CS_Sum[0],
                CS_Carry[1],
                CS_Carry[0]);

  return;
}

#undef __ARM8_MUL__

