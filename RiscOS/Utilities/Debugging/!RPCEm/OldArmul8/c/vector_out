/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              B Oldfield                                          *
* Development started: 1st June 1994                                       *
* Version:             Pre-release                                         *
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
 **************************************************************************/

#define FALSE 0
#define TRUE  1

#define MAX_LENGTH 32

#include "state.h"
#include <string.h>


/************************************************************************\
* The macros either print out the correctly formatted value (when the    *
* variable "initialised" is TRUE), or print out the actual name of the   *
* value (ie the pin name) if not initialised.                            *
* Its done like this so that we can keep just one list of pin names for  *
* both jobs - avoiding possible inconsistences if two lists were         *
* required.                                                              *
\************************************************************************/

#define out_1bit(val,str)  if (initialised) fprintf(vector_file," %d",val); else\
                      fprintf(vector_file,"#%s : d\n",str);
#define out_nbit(val,str)  if (initialised) fprintf(vector_file," %2d",val); else\
                      fprintf(vector_file,"#%s : 2d\n",str);
#define out_32bit(val,str) if (initialised) fprintf(vector_file," %08X",val); else\
                      fprintf(vector_file,"#%s : 08X\n",str);
/* nout_1bit inverts the sense of the signal before writing the vector  */
/* value                                                                */
#define nout_1bit(val,str) if (initialised) fprintf(vector_file," %1d",!val); else\
                      fprintf(vector_file,"#%s : d\n",str);

void vector_out(state,vector_file)
armul8_state *state;
FILE         *vector_file;
{
  static int initialised=0;
  int  i;
  char *ptr,name[MAX_LENGTH];

  /* first time this function gets called initialised is 0 and so loop  */
  /* executes twice, first time to print out pin names, second time for */
  /* the first vector values. For subsequent calls, initialised will be */
  /* 1 and so the loop only executes once - printing vector values.     */
  /* Again this is done like this so as to keep just on list of pin     */
  /* names.                                                             */
  for (i=initialised; i<2; i++){
    out_1bit(CORE_PU.ForcedPrefetch, "ForcedPrefetch");
    out_1bit(CORE_PU.AddressInUse,   "AddressInUse");
    out_1bit(CORE_PU.InstrAccepted,  "InstrAccepted");
/*    out_nbit(CORE_PU.CFlags,         "CFlags");    */
    out_1bit(CORE_PU.NewInstr,       "NewInstr");
    out_1bit(CORE_PU.InstructOnRdata,"InstructOnRdata");
    out_32bit(CORE_PU.Instruct,      "Instruct");
    out_1bit(CORE_PU.PAbort,         "PAbort");
    out_32bit(CORE_PU.PcPlus8,       "PcPlus8_");  /* wrong size */
    out_1bit(CORE_PU.NoFetch,        "NoFetch");
    out_1bit(CORE_PU.IgnoreBranch,   "IgnoreBranch");
    out_1bit(CORE_PU.CancelD,        "CancelD");
    out_1bit(CORE_PU.CancelE,        "CancelE");
    out_nbit(ARM8_MEM.ARequest,      "ARequest");
    out_32bit(ARM8_MEM.VAddress,     "VAddress");
    out_32bit(ARM8_MEM.Wdata,        "Wdata");
    out_1bit(ARM8_MEM.Privileged,    "Privileged");
    out_1bit(ARM8_MEM.TwentySixBit,  "TwentySixBit");
    out_nbit(ARM8_MEM.RRequestD,     "RRequestD");
    nout_1bit(ARM8_MEM.NRRequestIC,  "RRequestIC");
    nout_1bit(ARM8_MEM.NRRequestIP,  "RRequestIP");
    nout_1bit(ARM8_MEM.NConfirm,     "Confirm");
    out_nbit(ARM8_MEM.AResponse,     "AResponse");
    out_1bit(ARM8_MEM.DExhausted,    "DExhausted");
    out_1bit(ARM8_MEM.IExhausted,    "IExhausted");
    out_32bit(ARM8_MEM.Rdata,        "Rdata");
    out_nbit(ARM8_MEM.RResponse,     "RResponse");
    out_1bit(ARM8_EXT.BigEnd,        "BigEnd");
    nout_1bit(ARM8_EXT.Irq,          "NIrq");
    nout_1bit(ARM8_EXT.Fiq,          "NFiq");
    nout_1bit(ARM8_EXT.Reset,        "NReset");
/*
    out_nbit(PUINT.fifo.contents,    "contents");
    out_nbit(PUINT.alternate.fifo_read, "alternate_iadd");
    out_nbit(PUINT.alternate.fifo_write,"alternate_wadd");
    out_1bit(PUINT.predictf,            "predictf");
    out_1bit(PUINT.predict0,            "predict0");
    out_1bit(PUINT.predict1,            "predict1");
    out_1bit(PUINT.predict2,            "predict2");
    out_nbit(PUINT.fifo.read,           "read_iadd");
    out_nbit(PUINT.fifo.write,          "write_add");
    out_nbit(PUINT.psm,                 "psm_state_s");
    out_nbit(PUINT.bsmL,                "bsm_state_s"); */

    out_32bit(ARM8_COPROC.CInstruct,    "CInstruct_");   /* wrong size */
    out_1bit(ARM8_COPROC.CEnterDecode,  "CEnterDecode");
    out_1bit(ARM8_COPROC.CEnterExecute, "CEnterExecute");
    out_1bit(ARM8_COPROC.CExecute,      "CExecute");
    out_1bit(ARM8_COPROC.Interlocked,   "Interlock");
    out_1bit(ARM8_COPROC.CBounceD,      "CBounceD");
    out_1bit(ARM8_COPROC.CBounceE,      "CBounceE");
    out_1bit(ARM8_COPROC.CBusyWaitD,    "CBusyWaitD");
    out_1bit(ARM8_COPROC.CBusyWaitE,    "CBusyWaitE");
    out_32bit(ARM8_COPROC.CData,        "CData");
    if (initialised) fprintf(vector_file," : %d\n",PUINT.cycle_count);
    initialised = 1;
  }
}

