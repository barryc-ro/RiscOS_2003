/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$
* RCS $Revision$
* Checkin $Date$
*/


#ifndef __ARMCACHE__
#define __ARMCACHE__
#endif

#include "stdio.h"

#include "cache.h"
#include "armcache.h"

static int db=0;

/* INTERNAL State variables for the CACHE interface                        */
static unsigned reqInstr, req2data, req1data, first, newAddress;
static unsigned32  rData1, rData2;
static unsigned32 memAddr = 0xe6000010, memData = 0xe6000010,
                  ilbAddr = 0xe6000010, ilbData = 0xe6000010,
                  dlbAddr = 0xe6000010, dlbData = 0xe6000010,
                  lIlbAddr= 0xe6000010, lDlbAddr= 0xe6000010;
static unsigned rResponse, aResponse, confirm = 1, proceedPrevious, isByte;
static unsigned moreInfo, reqInstr1, changeData, changeInstr;
static unsigned instInProg = 0;
#ifdef DEPTH
static int      dlbDepth = 0, ilbDepth = 0;
#else
#define dlbDepth 0
#define ilbDepth 0
#endif

/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        AResponse
 *                        DExhausted
 *                        IExhausted
 *                        RResponse
 *
 */
void arm800_cache_earlyph1( state)
  armul8_state *state;
{

  /* set I/D exhausted indicators */
  if (changeData) {

    /* (addr/wordlength in bytes) mod cache line */
#ifdef DEPTH
    dlbDepth = (int)((dlbAddr/4) % 4);#else
#endif
    if ((req2data && (dlbDepth >= 2)) ||
        (req1data && (dlbDepth >= 3)))
      ARM8_MEM.DExhausted = 0x1;
    else if (newAddress)
      ARM8_MEM.DExhausted = 0x0;
  }

  if (changeInstr) {

    /* (addr/wordlength in bytes) mod cache line */
#ifdef DEPTH
    ilbDepth = (int)((ilbAddr/4) % 4);
#endif

    if ((reqInstr && (ilbDepth >= 2)) || first)
      ARM8_MEM.IExhausted = 0x1;
    else if (newAddress)
      ARM8_MEM.IExhausted = 0x0;
  }

  /* update RResponse[] */
  ARM8_MEM.RResponse = rResponse;

  /* update AResponse[] */
  ARM8_MEM.AResponse = aResponse;

  /* write RData[] onto bus - ignoring RPowerSave for now */
  if (!first)
    ARM8_MEM.Rdata = rData1;
  else
    ARM8_MEM.Rdata = 0xe6000010;

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        Confirm
 *
 */
void arm800_cache_lateph1( state)
  armul8_state *state;
{
  int flag = 0;

  /* if moreinfo - read data (Wdata) */
  if (moreInfo) {
    memData = ARM8_MEM.Wdata;

    if (ca_write_to_cache(memData, memAddr, isByte, ARM8_EXT.BigEnd))
        memData = 0xe6000010;

    moreInfo = 0;
  }

  /* set RData[] value if appropriate */
  if (!first && (reqInstr1 || req2data || req1data)) {
    if (reqInstr1) {
        ilbAddr += 0x4;     /* next word */

      if (!reqInstr) {    /* don't do this next cycle */
        flag = 1;
      }

    }

    if (req2data) {
      if (!newAddress && ((dlbAddr/4) % 4 == 3))
        dlbAddr -= 0x0c;
      else
        dlbAddr += 0x4;

      if (flag) {
        reqInstr1 = 0;
        flag = 0;
      }

    }

    if (!flag) {
      if (reqInstr1 || !req1data) {
        if (ca_read_from_cache((reqInstr1 ? &ilbData : &dlbData), (reqInstr1 ? ilbAddr : dlbAddr), 0, ARM8_EXT.BigEnd))
        {
          if (reqInstr1)
            ilbData = 0xe6000010;
          else
            dlbData = 0xe6000010;
        }
      }

      rData1 = (reqInstr1 ? ilbData : dlbData);

    }

  }
  /* set Confirm[] result */
  confirm = 0x1;

  newAddress = 0;   /* no new address on VAddress[] */

  if (flag)
     reqInstr1 = 0;
  return;
}

/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        Confirm
 *
 */
void arm800_cache_earlyph2( state)
  armul8_state *state;
{
  /* write NConfirm[] results */
  ARM8_MEM.NConfirm = !confirm;

  /* write RData[] onto bus - ignoring RPowerSave for now */

  if (!first)
    ARM8_MEM.Rdata = rData2;
  else
    ARM8_MEM.Rdata = 0xe6000010;

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RResponse
 *                        DExhausted
 *                        IExhausted
 *                        AResponse
 *
 */
void arm800_cache_lateph2( state)
  armul8_state *state;
{
  int fetched = 0;
  int loaded = 0;

  if (instInProg)
    instInProg--;

  if (!ARM8_MEM.NConfirm) {
    isByte = 0;

    /* read ARequest[] & perform cache operations - if confirm is OK */
    if (db) printf("ARequest = %x, RRequestD = %d\n",ARM8_MEM.ARequest,ARM8_MEM.RRequestD);

    switch(ARM8_MEM.ARequest) {

    /* All control operations are null in this implementation, so report */
    /* success.                                                          */
    case AREQ_CONTROL:
      aResponse = ARESP_DONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;

      break;

    /* NO operation requested -> no operation done! */
    case AREQ_NONE:
      aResponse = ARESP_NOTDONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;

      break;

    /* Read cache line(addr <-> VAddress) into DLB -> response = ? */
    case AREQ_LOAD:
      //loaded = 1;
    case AREQ_LOAD_M:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu;  /* word aligned ! */
      newAddress = 1;


      if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;

      rData2 = dlbData;

      moreInfo = 0;

      break;
    /* Load half word (addr <-> VAddress) into DLB -> response = ? */
    case AREQ_LOAD_H:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu; /* word align! */
      newAddress = 1;


      if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;


      rData2 = dlbData;

      moreInfo = 0;

      break;

    /* Read cache line (sequential addr <-> VAddress) into DLB */
    case AREQ_LOAD_S:
    case AREQ_LOAD_SM:
      aResponse = ARESP_DONE;
      lDlbAddr = ARM8_MEM.VAddress & 0xfffffffcu; /* word aligned ! */
      dlbAddr += 0x4;
      newAddress = 1;

#ifndef SBW
      if (dlbAddr != lDlbAddr) {
        fprintf(stderr, "WARNING (CACHE): Load sequential address (%08lX) <> from the address calculated internally in the cache (%08lX)\n",
                lDlbAddr, dlbAddr);
      }
#endif

#if 0
      if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;
#endif
      moreInfo = 0;
      rData2 = dlbData;

      break;
    /* Read cache line(addr <-> VAddress) into DLB (byte) */
    case AREQ_LOAD_B:
      //loaded = 1;
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress; /* word aligned ! */
      newAddress = 1;
      isByte = 1;

      if (ca_read_from_cache(&dlbData,dlbAddr , 1, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;

      rData2 = dlbData;

      moreInfo = 0;

      break;

    /* Read cache line(addr <-> VAddress) into DLB (swap) */
    case AREQ_LOAD_X:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu; /* word align */
      newAddress = 1;


      if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;

      rData2 = dlbData;

      moreInfo = 0;

      break;

    /* Read cache line(addr <-> VAddress) into DLB (byte swap) */
    case AREQ_LOAD_BX:
      aResponse = ARESP_DONE;
      dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu;  /* word aligned ! */
      newAddress = 1;
      isByte = 1;

      if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
          dlbData = 0xe6000010;

      rData2 = dlbData;

      moreInfo = 0;

      break;

    /* Read cache line(addr <-> VAddress) into ILB -> response = ? */
    case AREQ_FETCH:
    case AREQ_SPEC:
      aResponse = ARESP_DONE;
      ilbAddr = lIlbAddr = ARM8_MEM.VAddress;
      newAddress = 1;

      if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
          ilbData = 0xe6000010;

      rData2 = ilbData;

      if (reqInstr1 && !newAddress)  /* avoid screwing up data just loaded */
        ilbAddr -= 0x4;

      fetched = 1;
      moreInfo = 0;

      break;

    /* Read cache line(addr <-> VAddress) into ILB (sequential) */
    case AREQ_FETCH_S:
    case AREQ_SPEC_S:
      aResponse = ARESP_DONE;
      ilbAddr = ARM8_MEM.VAddress;
      newAddress = 1;


      if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
          ilbData = 0xe6000010;

      rData2 = ilbData;

      if (reqInstr1 && !newAddress)    /* avoid screwing up data just loaded */
        ilbAddr -= 0x4;

      moreInfo = 0;
      fetched = 1;
      break;

    /* Store data at addr (VAddress) -> response = ? , moreInfo = 1 */
    case AREQ_STORE:
    case AREQ_STORE_M:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffcu;  /* word aligned */
      moreInfo = 1;
      newAddress = 0;

      break;

    /* Store data at addr (VAddress) (byte), moreInfo = 1 */
    case AREQ_STORE_B:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress;  /* cheating here, just grab the addr */
      moreInfo = 1;
      newAddress = 0;
      isByte = 1;

      break;

    /* Store data at addr (VAddress) (swap), moreInfo = 1 */
    case AREQ_STORE_X:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffcu;  /* word aligned */
      moreInfo = 1;
      newAddress = 0;

      break;

    /* Store data at addr (VAddress) (byte swap), moreInfo = 1 */
    case AREQ_STORE_BX:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress;
      moreInfo = 1;
      newAddress = 0;
      isByte = 1;

      break;

    /* Store half word at addr (VAddress), moreInfo = 1 */
    case AREQ_STORE_H:
      aResponse = ARESP_DONE;
      memAddr = ARM8_MEM.VAddress & 0xfffffffeu;
      moreInfo = 1;
      newAddress = 0;
      isByte = 2;   /* slightly misleading, but will ensure correct storage */

      break;

    /* Store sequential data starting at addr -> response = ?, moreinfo=1 */
    case AREQ_STORE_S:
    case AREQ_STORE_SM:
      aResponse = ARESP_DONE;
      memAddr += 0x4;
      moreInfo = 1;
      newAddress = 0;

#ifndef SBW
      if (memAddr != ARM8_MEM.VAddress) {
        fprintf(stderr, "WARNING (CACHE): Store sequential address (%08lX) <> from the address calculated internally in the cache (%08lX)\n",
                ARM8_MEM.VAddress, memAddr);
      }
#endif

      memAddr = ARM8_MEM.VAddress & 0xfffffffcu;  /* word aligned */

      break;

    default:
      aResponse = ARESP_NOTDONE;
      moreInfo = 0;
      newAddress = 0;

      rData2 = rData1;   /* don't change the values on Rdata[] */

      break;
    }


    /* read RRequest[] & perform cache operations - if confirm is OK */

    rResponse = RRESP_NOTHING; /* Default is that we return nothing */

    /* Set internal values */
    reqInstr = (!ARM8_MEM.NRRequestIC || !ARM8_MEM.NRRequestIP)
               && (ARM8_MEM.RRequestD == RREQD_NONE);

    /* if not first cycle & instruction requested then fetch next instruction */
    if (!first && reqInstr) {

      if (!newAddress && instInProg)  /* no new address so grab next inst */
        ilbAddr += 0x4;

      instInProg = 2;
      reqInstr1 = 1;
      changeInstr = 1;
#ifdef DEPTH
      ilbDepth = (int)((ilbAddr/4) % 4);
#endif

      /* set RResponse */
      if (ilbDepth < 3)
        rResponse = RRESP_INSTR2; /* 2 instruction words returned */
      else if (ilbDepth == 3) {
        rResponse = RRESP_INSTR1; /* 1 instruction word returned */
        reqInstr1 = 0;
        instInProg = 1;
      }

      if (!fetched) {
        if (ca_read_from_cache(&ilbData, ilbAddr, 0, ARM8_EXT.BigEnd))
            ilbData = 0xe6000010;
        else
            rData2 = ilbData;
      }

    } else if (first && reqInstr) {
      changeInstr = 1;
      reqInstr1 = 1;
      instInProg = 2;
    }

    /* Set internal values */
    switch (ARM8_MEM.RRequestD) {
    case RREQD_NONE:  /* no operation */
      req2data = req1data = 0;
      changeData = 0;

      break;

    case RREQD_ONE:  /* Return 1 word from DLB */
      req1data = 1;
      req2data = 0;

      changeInstr = 0;
      changeData = 1;

      if (reqInstr) {
        reqInstr = 0;
        reqInstr1 = 0;
      }

      switch (ARM8_MEM.ARequest) {
      case AREQ_NONE:
        dlbAddr += 0x4; break;
      case AREQ_LOAD_S:
      case AREQ_LOAD_SM:
        break;
      default: /* must be an address on VAddress */
        dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu;
      }

      if (!loaded) {
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
            dlbData = 0xe6000010;
        rData2 = dlbData;

      }
      /* dlbDepth = 3; */

#ifdef DEPTH
      dlbDepth = (int)((dlbAddr/4) % 4);      dlbDepth = 0;
#endif
      rResponse = RRESP_DATA1; /* 1 data word returned */

      break;
    case RREQD_TWO:  /* Return 2 words from DLB */
      req2data = 1;
      req1data = 0;

      changeInstr = 0;
      changeData = 1;

      if (reqInstr) {
        reqInstr = 0;
        reqInstr1 = 0;
      }

      switch (ARM8_MEM.ARequest) {
      case AREQ_NONE:
        dlbAddr += 0x4; break;
      case AREQ_LOAD_S:
      case AREQ_LOAD_SM:
        break;
      default: /* must be an address on VAddress */
        dlbAddr = ARM8_MEM.VAddress & 0xfffffffcu;
      }

//      if (!loaded) {
        if (ca_read_from_cache(&dlbData, dlbAddr, 0, ARM8_EXT.BigEnd))
            dlbData = 0xe6000010;
        rData2 = dlbData;
//      }

#ifdef DEPTH
      dlbDepth = (int)((dlbAddr/4) % 4);
#endif

      if (dlbDepth < 3)
        rResponse = RRESP_DATA2; /* 2 data words returned */
      else if (dlbDepth <= 3) {
        rResponse = RRESP_DATA1; /* 1 data word returned */
        req2data = 0;
        req1data = 1;
      }

      break;
    default:
      req2data = req1data = 0;
      changeData = 0;

      break;
    }

    proceedPrevious = 0;

  } else {
    proceedPrevious = 1;

  }

  if (first)
    first = 0;

  return;
}

int db_cache(int level,armul8_state * state)
{
  db = level;
  return 0;
}


void initialise_cache( state)
  armul8_state *state;
{
  /* set IExhausted to 1! */

  ARM8_MEM.IExhausted = 1;
  first = reqInstr = 0x1;             /* don't overwrite it in phase 1! */
  reqInstr1 = 0;
  rData1 = rData2 = 0xe6000010;
}

#undef __ARMCACHE__

/* EOF */



