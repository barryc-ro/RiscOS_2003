#ifndef __ARMCACHE__
#define __ARMCACHE__
#endif


#include "cache.h"
#include "armcache.h"

unsigned int VAddress,ARequest,WData,RRequestD,NRRequestIC,NRRequestIP;
int wedid;   // we put something or took something;
unsigned int rd1,rd2;
int numdat;
/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        AResponse
 *                        DExhausted
 *                        IExhausted
 *                        RResponse
 *
 */
void arm800_cache_earlyph1(armul8_state *state)
{
  VAddress    = ARM8_MEM.VAddress;
  ARequest    = ARM8_MEM.ARequest;
  WData	      = ARM8_MEM.WData;
  RRequestD   = ARM8_MEM.RRequestD;
  NRRequestIC = ARM8_MEM.NRRequestIC;
  NRRequestIP = ARM8_MEM.NRRequestIP;

  switch (ARequest) {
    case AREQ_LOAD:
    case AREQ_LOAD_S:
    case AREQ_FETCH:
    case AREQ_FETCH_S:
    case AREQ_SPEC:
    case AREQ_SPEC_S:
      if (RRequestD) {
        wedid = 1;
        load_word(&rd1,VAddress);
        if (RRequestD == 2) {
          load_word(&rd2,VAddress+4);
    	  numdat =2;
    	}
    	else numdat = 1;
      }
      break;
    case AREQ_LOAD_B:


  }

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        Confirm
 *
 */
void arm800_cache_lateph1( armul8_state *state)
{

  ARM8_MEM.IExhausted = 1;
  ARM8_MEM.DExhausted = 1;

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        VAddress
 *                        Wdata
 *                        ARequest
 *                        RRequest
 *
 * Memory -> ARM8 signals:
 *                        RData
 *                        Confirm
 *
 */
void arm800_cache_earlyph2(armul8_state *state)
{

  return;
}

/*
 * ARM8 -> Memory signals:
 *                        RPowerSave
 *
 * Memory -> ARM8 signals:
 *                        RResponse
 *                        DExhausted
 *                        IExhausted
 *                        AResponse
 *
 */
void arm800_cache_lateph2(armul8_state *state)
{
  if (wedid) {
    ARM8_MEM.NConfirm = 0;
    wedid = 0;
  }

  return;
}

int db_cache(level, state)
  int level;
  armul8_state *state;
{

  return 0;
}

void pDebug(phase, state)
  int phase;
  armul8_state *state;
{

}

void initialise_cache( state)
  armul8_state *state;
{
  /* set IExhausted to 1! */

  ARM8_MEM.IExhausted = 1;
}

#undef __ARMCACHE__

/* EOF */



