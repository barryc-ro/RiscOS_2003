/**************************************************************************\
*                                                                          *
* ARMUL8 - an ARM8 emulator                                                *
* =========================                                                *
*                                                                          *
* Author:              D.J.Seal                                            *
* Development started: 12 January 1994                                     *
* Version:             Pre-release                                         *
*                                                                          *
* Copyright (C) Advanced RISC Machines Limited, 1994. All rights reserved. *
*                                                                          *
\**************************************************************************/
/*
* Revising $Author$  
* RCS $Revision$  
* Checkin $Date$
*/

#define __CSMUL__

#include "csmul.h"
#include <stdio.h>

/*
 * numOfCycles returns the number cycles required in a "real" multiplier
 * of the type in the ARM7DM. That is, the result lies in the interval
 * 1 <= n <= 4. Note, that the MLA(L) specific cycles aren't accounted for.
 *
 * Parameters: 
 *            ier:   the multiplier (32 bit number)
 *            sign:  signed/unsigned operation
 *            booth: the number of multiplier bits encoded per cycle (8 bits)
 */
unsigned32 numOfCycles(ier, sign, mlong, booth)
  unsigned32 ier;
  int sign, mlong, booth;
{
  unsigned res = 0x0;
  unsigned32 t1 = 0x0;
  unsigned32 t2 = 0x0;
  unsigned32 t3 = 0x0;
  unsigned blk00 = 0, blk01 = 0, blk10 = 0, blk11 = 0, blk20 = 0, blk21 = 0;

  t1 = BITS(ier, 8, 15);
  t2 = BITS(ier, 16, 23);
  t3 = (sign || !mlong ? (BIT1(ier, 31) << 8) | BITS(ier, 24, 31) : BITS(ier, 24, 31));

  if (t1 == 0x0) {
    blk00 = blk01 = 0x1;
  } else if (t1 == 0xff) {
    blk00 = blk01 = 0x0;
  } else {
    blk00 = 0x0; blk01 = 0x1;
  }

  if (t2 == 0x0) {
    blk10 = blk11 = 0x1;
  } else if (t2 == 0xff) {
    blk10 = blk11 = 0x0;
  } else {
    blk10 = 0x0; blk11 = 0x1;
  }

  if (t3 == 0x0) {
    blk20 = blk21 = 0x1;
  } else if (t3 == 0x1ff) {
    blk20 = blk21 = 0x0;
  } else {
    blk20 = 0x0; blk21 = 0x1;
  }

  /* evaluate early termination */
  if ((blk00 && blk10 && blk20) || !(blk01 || blk11 || blk21)) {
    res = 0x1;
  } else if ((blk10 && blk20) || !(blk11 || blk21)) {
    res = 0x2;
  } else if (blk20 || !blk21) {
    res = 0x3;
  } else {
    res = 0x4;
  }

  /* printf("ier:%08lX t1:%08lX t2:%08lX t3:%08lX res:%d\n", ier, t1, t2, t3, res); */
  
  return res;
}

/*
 * wadd() adds two 32 bits number and returns the sum and the carry out of
 * the MSB's. So this function emulates a CPA.
 *
 * Parameters:
 *            x, y: the input operands (32 bit numbers)
 *            s   : the sum output     (a 33 bit number [2 words])
 *            c   : the carry of the MSB (equals bit 33 in the sum result)
 *
 */
void wadd(x, y, s, c)
  unsigned32 x, y, *s, *c;
{
  int j;
  unsigned32 ct = 0x0;

  for (j = 0; j < WORD_LENGTH; j++) {
    
    *s += (BIT1(x, j) ^ BIT1(y, j) ^ ct) << j;
    ct = (BIT1(x, j) && BIT1(y, j)) || (ct && (BIT1(x, j) || BIT1(y, j)));
  }
  
  *c = ct;
}

/*
 * waddcs() implements a full 32 bits 3-2 adder (Carry-Save). It adds the
 * three inputs and returns the result in a Carry-Save representation.
 * Note, that the carry result is shifted one position to the left to
 * emulate the relationship between the sum and carry parts. The value 
 * returned by waddcs() is the MSB of the carry part.
 *
 * Parameters:
 *            x, y, z: the input operands (3 x 64 bits)
 *            s      : the sum part of the result (64 bits)
 *            c      : the carry part of the result (64 bits)
 *            mull   : this parameter is currently not used
 *
 */
unsigned32 waddcs(x, y, z, s, c, mull)
  unsigned32 *x, *y, *z, *s, *c, mull;
{
  int i, j;
  unsigned32 ct = 0x0, t1 = 0x0, t2 = 0x0;

  for (i = 0; i < 2; i++) {

    c[i] = ct;

    for (j = 0; j < WORD_LENGTH; j++) {
      
      s[i] += (BIT1(x[i], j) ^ BIT1(y[i], j) ^ BIT1(z[i], j)) << j;
      if (j > 0)
	c[i] += ((BIT1(x[i], j-1) && BIT1(y[i], j-1)) || 
	    (BIT1(z[i], j-1) && (BIT1(x[i], j-1) || BIT1(y[i], j-1)))) << j;
    }

    ct = ((BIT1(x[i], j-1) && BIT1(y[i], j-1)) || 
	    (BIT1(z[i], j-1) && (BIT1(x[i], j-1) || BIT1(y[i], j-1)))) << j;
    
  }
  
/*
  if (!mull) {
    t1 = ((s[1] == 0xffffffff) || (s[1] == 0x0)) ? 1 : 0;
    t2 = ((c[1] == 0xffffffff) || (c[1] == 0x0)) ? 1 : 0;
    if (t1 && t2 && (t1 == t2))
      ct = 0x0;
    else
      ct = 0x1;
  }
*/

  return ct;
}

/*
 * waddc() adds two 32 bit number and an input carry and returns the result
 * as a 32 bit sum word and a carry out. So it acts like a carry ripple
 * adder.
 *
 * Parameters:
 *            x, y: the two input operands (32 bits numbers)
 *            ci  : the carry input        (1 bit)
 *            s   : the sum result         (32 bits number)
 *            c   : the carry out          (1 bit)
 *
 */
void waddc(x, y, ci, s, c)
  unsigned32 x, y, ci, *s, *c;
{
  int j;
  unsigned32 ct = ci;

  for (j = 0; j < WORD_LENGTH; j++) {
    
    *s += (BIT1(x, j) ^ BIT1(y, j) ^ ct) << j;
    ct = (BIT1(x, j) && BIT1(y, j)) || (ct && (BIT1(x, j) || BIT1(y, j)));
  }
  
  *c = ct;
}

/*
 * dwadd() adds two 64 bit numbers and returns the sum (64 bits) and a carry
 * out (1 bit). This function emulates a carry ripple adder.
 *
 * Parameters:
 *            x, y: the input operands (2 64 bit numbers)
 *            s   : the sum result     (64 bits number)
 *            c   : the carry out      (1 bit)
 *
 */
void dwadd(x, y, s, c)
  unsigned32 *x, *y, *s, *c;
{
  unsigned32 cl = 0x0, ch = 0x0, sl = 0x0, sh = 0x0;
  void wadd();
  void waddc();

  wadd(x[0], y[0], &sl, &cl);

  waddc(x[1], y[1], cl, &sh, &ch);

  s[0] = sl;
  s[1] = sh;
  *c   = ch;  /* overflow */

  return;
}

/*
 * w2cmpl() performs a twos complement of its input operand. Returns the
 * twos complement.
 *
 * Parameters:
 *            x: input operand (32 bits number)
 *
 */
unsigned32 w2cmpl(x)
  unsigned32 x;
{
  unsigned32 res = 0x0;

  res = ~x;
  res += 1;

  return res;
}

/*
 * booth() takes three input operands, concatenates them to form a triplet
 * (a 3 bits number) and generates a Booth encoded digit. Returns the
 * Booth digit.
 *
 * Parameters:
 *            x: most significant bit of triplet
 *            y: Middle bit of triplet
 *            z: LSB of triplet
 *
 */
int booth(x, y, z)
  unsigned32 x, y, z;
{
  int digit = 0;
  unsigned32 t1 = 4*x + 2*y + z;

  switch (t1) {
  case 0: case 7: digit = 0; break;   /* triplet: 000 | 111 */
  case 1: case 2: digit = 1; break;   /* triplet: 001 | 010 */
  case 5: case 6: digit = -1; break;  /* triplet: 101 | 110 */
  case 3: digit = 2; break;           /* triplet: 011       */
  case 4: digit = -2; break;          /* triplet: 100       */
  }

  return digit;
}

/*
 * booth2() takes two input operands, concatenates them to form a triplet
 * (a 3 bits number) and generates a Booth encoded digit. Returns the
 * Booth digit.
 *
 * Parameters:
 *            x: most significant 2 bits of triplet
 *            y: LSB of triplet
 *
 */
int booth2(x, y)
  unsigned32 x, y;
{
  int digit = 0;
  unsigned32 t1 = (x << 1) + y;

  switch (t1) {
  case 0: case 7: digit = 0; break;   /* triplet: 000 | 111 */
  case 1: case 2: digit = 1; break;   /* triplet: 001 | 010 */
  case 5: case 6: digit = -1; break;  /* triplet: 101 | 110 */
  case 3: digit = 2; break;           /* triplet: 011       */
  case 4: digit = -2; break;          /* triplet: 100       */
  }

  return digit;
}

/*
 * bmul_33x32() performs a signed 32x32 bits multiplication using Booth 
 * encoding. The result is delivered on a Carry-Save form using either
 * the full result (64 bits) or a cut-off (32 bits) result. Note, that 
 * there isn't any overflow checking!
 *
 * Parameters:
 *            x, y  : the input operands (x=multiplier, y=multiplicand)
 *            res_s : the sum part of the result (64/32 bits)
 *            res_c : the carry part of the result (64/32 bits)
 *            oflow : contains the overflow bit, currently a meaningless value
 *            signOn: signed/unsigned multiplication (1=signed, 0=unsigned)
 *            lmul  : long(64 bits)/short (32 bits) result (1=long, 0=long)
 *
 */
void bmul_33x32(x, y, res_s, res_c, oflow, signOn, lmul)
  unsigned32 x, y, *res_s, *res_c, *oflow;
  int signOn;
  unsigned32 lmul;
{
  int i, j, n;
  int booth();
  unsigned32 A[66], SL[33], CL[33], R[33], D[33], S[33], C[33], M[34], MC;
  unsigned32 Sm[33], Cm[33];

  /* initialise temporary variables here, due to lint complaints */
  for (i = 0; i < 32; i++) {
    A[i] = (res_s[0] & (0x1 << i)) ? 0x1 : 0x0;
    R[i] = (x & (0x1 << i)) ? 0x1 : 0x0;
    D[i] = (y & (0x1 << i)) ? 0x1 : 0x0;
  }
  R[32] = (signOn || !lmul ? R[31] : 0);
  D[32] = (signOn || !lmul ? D[31] : 0);
  
  if (signOn && !lmul) {   /* 32 bit acc signed */
    for (i = 32; i < 66; i++) {
      A[i] = A[31];
    }
  } else if (signOn && lmul) {  /* 64 bit acc signed *?
    for (i = 0; i < 32; i++) {
      A[32+i] = (res_c[0] & (0x1 << i)) ? 0x1 : 0x0;
    }
    A[65] = A[64] = A[63];
  } else if (!signOn && !lmul) { /* 32 bit acc unsigned */
    for (i = 32; i < 66; i++) {
      A[i] = 0;
    }
  } else if (!signOn && lmul) {  /* 64 bit unsigned acc */
    for (i = 0; i < 32; i++) {
      A[32+i] = (res_c[0] & (0x1 << i)) ? 0x1 : 0x0;
    }
    A[65] = A[64] = 0;
  }

/*
  fprintf(stdout, "IER  : ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", R[i]);
  fprintf(stdout, "\n");

  fprintf(stdout, "ICAND: ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", D[i]);
  fprintf(stdout, "\n");

  fprintf(stdout, "ACC  : ");
  for (i = 65; i >= 0; i--)
    fprintf(stdout, "%lu", A[i]);
  fprintf(stdout, "\n");
*/

  /* the algorithm */
  SL[0] = A[0];
  for (i = 0; i < 33; i++)
    S[i] = A[i+1];
  *oflow = R[0];
  CL[0] = R[0] && !D[0];
  for (i = 0; i < 32; i++)
    C[i] = R[0] && !D[i+1];
  C[32] = R[0] && !D[32];

  for (i = 1; i <= 16; i++) {

    /* perform addition according to Booth digit */

    switch (booth(R[2*i], R[2*i-1], R[2*i-2])) {
    case  1: /* y shifted */
      for (j = 0; j < 33; j++)
        M[j] = D[j];
      M[33] = D[32];
      MC = 0;
      break;
    case  2: /* 2y shifted */
      for (j = 0; j < 33; j++)
        M[j+1] = D[j];
      M[0] = 0;
      MC = 0;
      break;
    case -2: /* 2y shifted */
      for (j = 0; j < 33; j++)
        M[j+1] = !D[j];
      M[0] = 1;
      MC = 1;
      break;
    case -1: /* y shifted */
      for (j = 0; j < 33; j++)
        M[j] = !D[j];
      M[33] = !D[32];
      MC = 1;
      break;
    default:
      for (j = 0; j < 34; j++)
        M[j] = 0;
      MC = 0;
      break;
    }

    CL[2*i-1] = MC;
    CL[2*i]   = (S[0] + C[0] + M[0]) / 2;
    SL[2*i-1] = (S[0] + C[0] + M[0]) % 2;

    Cm[0]     = (S[1] + C[1] + M[1]) / 2;
    SL[2*i]   = (S[1] + C[1] + M[1]) % 2;

    for (n = 0; n < 31; n++) {
      Cm[n+1] = (S[n+2] + C[n+2] + M[n+2]) / 2;
      Sm[n]   = (S[n+2] + C[n+2] + M[n+2]) % 2;
    }

    Sm[32]    = (A[32+2*i] + !C[32] + !M[33]) / 2;
    Sm[31]    = (A[32+2*i] + !C[32] + !M[33]) % 2;

    Cm[32]    = !A[33+2*i];

    for (j = 0; j < 33; j++) {
      S[j] = Sm[j];
      C[j] = Cm[j];
    }

  }

/*
  fprintf(stdout, "SH: ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", S[i]);
  fprintf(stdout, "\n");

  fprintf(stdout, "SL: ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", SL[i]);
  fprintf(stdout, "\n");

  fprintf(stdout, "CH: ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", C[i]);
  fprintf(stdout, "\n");

  fprintf(stdout, "CL: ");
  for (i = 32; i >= 0; i--)
    fprintf(stdout, "%lu", CL[i]);
  fprintf(stdout, "\n");
*/

  res_s[1] = res_s[0] = res_c[1] = res_c[0] = 0x0;
  for (i = 0; i < 32; i++) {
    res_s[0] |= (SL[i] << i);
    res_c[0] |= (CL[i] << i);
  }
  res_s[1] |= SL[32];
  res_c[1] |= CL[32];
  for (i = 1; i < 32; i++) {
    res_s[1] |= (S[i-1] << i);
    res_c[1] |= (C[i-1] << i);
  }

/*
  fprintf(stdout, "SH:%08lX SL:%08lX CH:%08lX CL:%08lX Cin:%u\n",
          res_s[1], res_s[0], res_c[1], res_c[0], *oflow);
*/
}

#undef __CSMUL__

