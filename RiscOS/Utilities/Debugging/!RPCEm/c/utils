#include "stdio.h"

#ifdef __acorn
#include "kernel.h"
#include <swis.h>
#endif

#include "string.h"
#include "stdlib.h"
#include "stdarg.h"

int das[16];
int dan;
extern char *DEBUG_FILE;

void remdyn(void)
{
#ifndef USE_MALLOC
  _kernel_swi_regs regs;
#endif
  for(dan--;dan>=0;dan--) {
#ifndef USE_MALLOC
    regs.r[0] = 1;
    regs.r[1] = das[dan];
    _kernel_swi(OS_DynamicArea,&regs,&regs);
#else
    free ((void *) das[dan]);
#endif
  }

}

void *dynalloc(int size, char *t)
{
#ifndef USE_MALLOC
   _kernel_swi_regs regs;

  regs.r[0] = 0;
  regs.r[1] = -1;
  regs.r[2] = size;
  regs.r[3] = -1;
  regs.r[4] = 128;
  regs.r[5] = size;
  regs.r[6] = 0;
  regs.r[7] = 0;
  regs.r[8] = (int) t;
  if (!_kernel_swi(OS_DynamicArea,&regs,&regs)) {
    if (!dan) atexit(remdyn);
    das[dan++] = regs.r[1];
    return (void *) regs.r[3];
  }
  return 0;
#else
  return (void *) (das[dan++] = (int) malloc(size));
#endif
}

/* portable implementation */

int file_size(char *f)
{
   FILE *fi;
   long int i;

   fi = fopen(f,"r");
   if (!fi) return -1;

   fseek(fi,0,SEEK_END);
   i = ftell(fi);
   fclose(fi);
   return i;

}

void *file_load(char *fn)
{
   void *p;
   int si = file_size(fn),i;
   FILE *f;

   for (i = 1; i<si; i = i*2);   /* round up to power of two */

   p = dynalloc(i,"RISC OS ROM");

   if (!p) return 0;

   f = fopen(fn,"rb");
   if (!f) {
     free(p);
     return 0;
   }

   fread(p,1,si,f);
   fclose(f);

   return p;
}

static FILE *foutfile;

void fout(char *p,...)
{
#ifdef DEBUG
#if 0
  FILE *f;
  va_list list;

  va_start(list,p);

  f = fopen(DEBUG_FILE,"a+");
  if (f) {
    vfprintf(f,p,list);
    fclose(f);
  }
  va_end(list);
#else
  va_list list;

  va_start(list,p);

  if (!foutfile)
    foutfile = fopen(DEBUG_FILE,"a+");
  if (foutfile) {
    vfprintf(foutfile,p,list);
  }
  va_end(list);
#endif
#endif
}

void fdump(unsigned char *p,int si,char *f)
{
#ifdef DEBUG
  FILE *fi;
  va_list list;
  int i;
  char buf[17];
  va_start(list,f);

  fi = fopen(DEBUG_FILE,"a+");
  if (f) {
    vfprintf(fi,f,list);
    buf[16] = 0;
    for (i = 0; i<si;i++) {
      if (!(i&15)) {
        fprintf(fi,"+ %03X ",i);
      }
      fprintf(fi,"%02X ",p[i]);
      buf[i&15] =p [i] > 31 ? p[i]:'*';
      if ((i&15) == 15) fprintf(fi,"%s\n",buf);
    }
    fclose(fi);
  }
  va_end(list);
#endif
}

long int get_fout_pos()
{
    return ftell(foutfile);
}

void set_fout_pos(long int pos)
{
    fseek(foutfile, pos, SEEK_SET);
}
