/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com)                    */
/* History: 0.00  - dd                                                  */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "GadgetDefs.h"
#include "EventMgr.h"
#include "VersionNum"

/*- --------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles                                                           */
ObjectId Main_WindowHandle;
ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;
ObjectId ProgInfo_WindowHandle;

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessagesFD message_block;              /* declare a message block for use with toolbox initialise */
IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise  */
int        current_wimp;               /* the current version of the wimp we are using            */
int        task_id;                    /* and our task handle                                     */
int        quit = 0;                   /* declare a flag to indicate when we should quit          */


/* This array tells toolbox initialise which wimp messages we want to know about                  */
static int wimp_messages[]  = {
                                Wimp_MDataLoad,
                                Wimp_MQuit,
                                Wimp_MPreQuit
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value        */
/* of 0 indicates we want all events.                                                             */
static int toolbox_events[] = {0};


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  NB_UNUSED(event_code);
  NB_UNUSED(event);
  NB_UNUSED(id_block);
  NB_UNUSED(handle);

  quit = 1;
  return(TRUE);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation, */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  char		*ver_string = NULL;

  /* Setup ProgInfo dialogue */
  if ((ver_string = malloc( strlen(Module_MajorVersion) + strlen(Module_Date) + 5)) == NULL)
  {
    nb_messagetrans_wimp_error(message_block, "NoMem");
  }
  else
  {
    sprintf(ver_string, "%s (%s)\n", Module_MajorVersion, Module_Date);

    nb_proginfo_setup(0, ProgInfo_WindowHandle, ver_string, 0);
    free(ver_string);
  }

  /* Unix filenames setup */
  menu_set_tick(0, Ibar_MenuHandle, IBarMenu_Filenames, 1);
  translate_filenames = TRUE;
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror               *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  NB_UNUSED(event_code);
  NB_UNUSED(handle);

  /* Deal with all events on the main window */
  if (strcmp(created_event->template_name, "main_win")==0)
  {
    /* Define handle for main_win */
    Main_WindowHandle = id_block->self_id;

    er = event_register_toolbox_handler (Main_WindowHandle, ActionButton_Selected,
                                         main_ab_clicked, NULL);
    error_check_exit(er);

    er = event_register_toolbox_handler (Main_WindowHandle, OptionButton_StateChanged,
                                         main_ob_clicked, NULL);
    error_check_exit(er);
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, menu_quit_event, quit_program, NULL);
    error_check(er);

    er = event_register_toolbox_handler(id_block->self_id, IBarMenu_Filenames, filenames_clicked,
                                        NULL);
    error_check(er);
  }

  /* Create handle for Proginfo */
  if (strcmp(created_event->template_name, "ProgInfo")==0)
  {
    ProgInfo_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    /* Run startup() function from here. */
    startup();
  }

  return (TRUE);
}



/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control(WimpMessage *message, void *handle)
{
  IGNORE (handle);

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      quit = 1;
    break;

    case Wimp_MDataLoad:
    {
      WimpDataLoadMessage *load_message = &message->data.data_load;
      ObjectId obj;
      ComponentId comp;
      window_wimp_to_toolbox(0, load_message->destination_window, load_message->destination_icon,
                             &obj, &comp);
      /* See if file landed on Main Window, or iconbar icon */
      if (obj == Main_WindowHandle)
      {
        main_something_dragged(comp, load_message->leaf_name);
      }
    }
    break;
  }
  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  IGNORE (event_code); IGNORE (id_block); IGNORE (handle);

  wimp_process_key(key_event->key_code);

  return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,       */
  /* we are initially only interested in an auto create event when we receive this we can then    */
  /* attach handlers for our window and menu.                                                     */
  er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_handlers,NULL);
  error_check_exit(er);

  /* We must register our Message handler for the Quit message. In this way we can be told to     */
  /* quit by the task manager                                                                     */
  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12 and lets     */
  /* them get through to the WIMP                                                                 */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  er = event_register_message_handler(Wimp_MDataLoad, message_control, NULL);
  error_check_exit(er);

  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that    */
  /* a parameter that we are not interested in (eg. in this case the sprite area) can be set to   */
  /* NULL.                                                                                        */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main (void)
{

  WimpPollBlock   block;
  int             code;
  _kernel_oserror *er;

#ifdef MEM_CHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_RedirectToFilename("adfs::4.$.mc");
#endif

  debug_initialise("LoadURL", "", "");
  debug_atexit();
  debug_output_device(DEBUGIT_OUTPUT);

  error_initialise(0, "DebugTest", ERRORS_TO_TBACK);

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  /* While we do not have our quit flag set call event poll */
  while(!quit)
  {
    er = event_poll(&code, &block, NULL);
    error_check(er);
  }

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit(0);
}
