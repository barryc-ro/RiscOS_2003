/************************************************************************/
/* File:                                                                */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  d                                                     */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "EventMgr.h"
#include "GadgetDefs.h"
#include "BrowserIF.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define Filename_Length		55
#define Sockets_Length		25
#define Level_Length		255
#define Trace_Length		255
#define TraceDev_Length		20

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

#define CloseURL "ncint:loadurl?remove="
#define FetcherURL "file:/"

int		translate_filenames;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* main_ab_clicked                                                      */
/*                                                                      */
/* Function is called when an actionbutton in the main window is clicked*/
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int main_ab_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  NB_UNUSED(event_code);
  NB_UNUSED(event);
  NB_UNUSED(id_block);
  NB_UNUSED(handle);

  if (id_block->self_component == MainWin_Open)
  {
    main_load_clicked();
  }
  else if (id_block->self_component == MainWin_Close)
  {
    main_close_clicked();
  }

  return(TRUE);
}


/************************************************************************/
/* main_ob_clicked                                                      */
/*                                                                      */
/* Function is called when an optionbutton in the main window is clicked*/
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int main_ob_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  int		state = 0;

  NB_UNUSED(event_code);
  NB_UNUSED(event);
  NB_UNUSED(id_block);
  NB_UNUSED(handle);

  optionbutton_get_state(0, Main_WindowHandle, MainWin_Target_Option, &state);

  if (state == 0)
  {
    /* Unselected */
    gadget_set_flags(0, Main_WindowHandle, MainWin_Target, Gadget_Faded);
  }
  else
  {
    gadget_set_flags(0, Main_WindowHandle, MainWin_Target, 0);
  }

  return(TRUE);
}


/************************************************************************/
/* main_something_dragged                                               */
/*                                                                      */
/* Function is called when the user draggs something to the main window.*/
/*                                                                      */
/* Parameters: Component item dragged to.                               */
/*             filename.                                                */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void main_something_dragged(ComponentId comp, char *name)
{
  char		*trans = NULL;
  int		 file_type;

  if (comp == MainWin_URL)
  {
    if (nb_file_exists(1, name, NULL, NULL) == NULL)
    {
      nb_file_get_filetype(1, name, NULL, &file_type);

      if ( (file_type == NB_FileType_HTML) || (file_type == NB_FileType_Text) )
      {
        if (translate_filenames == TRUE)
        {
          translate_filename(name, &trans);
          writablefield_set_value(0, Main_WindowHandle, comp, trans);
          free(trans);
        }
        else
        {
          writablefield_set_value(0, Main_WindowHandle, comp, name);
        }
      }
      else
      {
        nb_messagetrans_wimp_error(message_block, "BadFiletype");
      }
    }
    else
    {
      nb_messagetrans_wimp_error(message_block, "NotFile");
    }
  }
}


/************************************************************************/
/* main_close_clicked                                                   */
/*                                                                      */
/* Function is called when the user clicks the close button.  Will then */
/* send Fresco a close dialogue message.                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void main_close_clicked(void)
{
  char			*target = NULL;
  char			*url = NULL;
  int			 len = 0;
  int			 nbytes = 0;

  len = nb_writable_strlen(0, Main_WindowHandle, MainWin_Target);

  if (len == 0)
  {
    nb_messagetrans_wimp_error(message_block, "NoTarget");
  }
  else
  {
    if ( ((target = malloc(len+5)) == NULL) ||
         ((url =    malloc( (len+5) + strlen(CloseURL) +5)) == NULL)
       )
    {
      nb_messagetrans_wimp_error(message_block, "NoMem");
    }
    else
    {
      writablefield_get_value(0, Main_WindowHandle, MainWin_Target, target, (len+4), &nbytes);

      sprintf(url, "%s%s", CloseURL, target);

      dprintf(("", "URL to be closed: %s\n", url));
      dprintf(("", "Target:           %s\n", target));

      browserif_loadurl(url, true, target);

      free(target);
      free(url);
    }
  }
}


/************************************************************************/
/* main_load_clicked                                                    */
/*                                                                      */
/* Function is called when the user clicks on th load button.           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void main_load_clicked(void)
{
  int			 target_len = 0;
  int			 url_len = 0;
  int			 opt_state = 0;
  char			*target = NULL;
  char			*url = NULL;
  char			*command = NULL;
  int			 nbytes;

  dprintf(("", "main_load_clicked() entered\n"));

  target_len = nb_writable_strlen(0, Main_WindowHandle, MainWin_Target);
  url_len = nb_writable_strlen(0, Main_WindowHandle, MainWin_URL);
  optionbutton_get_state(0, Main_WindowHandle, MainWin_Target_Option, &opt_state);

  if ( (url_len == 0) ||
       ((opt_state == 1) && (target_len == 0))
     )
  {
    nb_messagetrans_wimp_error(message_block, "NoData");
  }
  else
  {
    dprintf(("", "Got data - malloc'ing\n"));
    if ( ((target = malloc(target_len+5)) == NULL) ||
         ((url = malloc(url_len+5)) == NULL) ||
         ((command = malloc( (url_len+5) + strlen(FetcherURL) )) == NULL)
       )
    {
      nb_messagetrans_wimp_error(message_block, "NoMem");
    }
    else
    {
      if (opt_state == 1)
        writablefield_get_value(0, Main_WindowHandle,MainWin_Target,target,(target_len+4),&nbytes);

      writablefield_get_value(0, Main_WindowHandle, MainWin_URL, url, (url_len+4), &nbytes);

      dprintf(("", "Retrieved data\n"));

      sprintf(command, "%s%s", FetcherURL, url);
      dprintf(("", "Command is: %s\n", command));

      if (opt_state == 1)
      {
        dprintf(("", "URL to be loaded: %s\n", command));
        dprintf(("", "Target:           %s\n", target));

        browserif_loadurl(command, true, target);
        nb_hourglass(0);
      }
      else
      {
        dprintf(("", "URL to be closed: %s\n", command));
        dprintf(("", "Target:           NO TARGET\n"));
        browserif_loadurl(command, false, NULL);
      }

      free(target);
      free(url);
      free(command);
    }
  }
}


/************************************************************************/
/* filenames_clicked                                                    */
/*                                                                      */
/* Function is called when the user clicks on the Unix filenames option */
/* on the iconbar menu.                                                 */
/*                                                                      */
/* Parameters: Toolbox event params.                                    */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
int filenames_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  int		state = 0;
  int		newstate = 0;

  dprintf(("", "translate_filenames (on entry): %d\n", translate_filenames));

  NB_UNUSED(event_code);
  NB_UNUSED(event);
  NB_UNUSED(id_block);
  NB_UNUSED(handle);

  menu_get_tick(0, Ibar_MenuHandle, IBarMenu_Filenames, &state);
  dprintf(("", "Ticked state: %d\n", state));

  if (state == 0)
  {
    /* Unticked */
    newstate = 1;
    translate_filenames = TRUE;
  }
  else
  {
    /* Ticked */
    newstate = 0;
    translate_filenames = FALSE;
  }

  menu_set_tick(0, Ibar_MenuHandle, IBarMenu_Filenames, newstate);

  dprintf(("", "translate_filenames: %d\n", translate_filenames));

  return(TRUE);
}


/************************************************************************/
/* translate_filename                                                   */
/*                                                                      */
/* Function translates RiscOS '.' directory separators into '/' chars,  */
/* and visversa.                                                        */
/*                                                                      */
/* Parameters: source    - source filename                              */
/*             unixified - destination filename.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void translate_filename(char *source, char **unixified)
{
  char		*ptr = NULL;
  int		 counter = 0;

  if ((ptr = malloc( strlen(source)+5)) == NULL)
  {
    nb_messagetrans_wimp_error(message_block, "NoMem");
  }
  else
  {
    for (counter = 0; counter < strlen(source); counter++)
    {
      switch (source[counter])
      {
        case('.'):	ptr[counter] = '/';			break;
        case('/'):	ptr[counter] = '.';			break;
        default:	ptr[counter] = source[counter];		break;
      }
    }
    ptr[counter] = '\0';

    *unixified = ptr;
  }
}
