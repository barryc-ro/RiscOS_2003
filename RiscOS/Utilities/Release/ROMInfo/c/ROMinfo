#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef __riscos
#include "swis.h"
#endif

/* Read word from (non-word-aligned) char *c */
#define GETWORD(c) (*(c) + (*((c)+1)<<8) + (*((c)+2)<<16) + (*((c)+3)<<3))

void getimage(char name[], char **image, int *ilen);
void readimage(char *image, int ilen);
void readexp(char *image, char *romtype);
void reados(char *image, int ilen);
char *modinfo(char *base, char *info, int *total_size);
char *memfind(char *mem, char *find);
void hourglass(int state);

int flag_csv = 0;
char q = 34;

int main(int argc, char *argv[])
{
  char *iptr;
  int ilen;
  static char id[] = "ROM information lister. V1.03. © Acorn 1996/1997.";
  int i;
  int ifirst =0; /* first none flag argument on command line */

  if (argc>=2)
  {
    /*
     * scan command line for flags
     */
    for (i=1; i<argc; i++)
    {
      if (!strcmp(argv[i],"-csv")||!strcmp(argv[i],"-csv"))
        flag_csv = 1;
      else if (*argv[i]!='-' && ifirst==0)
        ifirst=i;
    }

    if (ifirst>0)
    {
#ifdef __riscos
      hourglass(1);
#endif
      getimage(argv[ifirst], &iptr, &ilen);
      readimage(iptr, ilen);
#ifdef __riscos
      hourglass(0);
#endif
      return EXIT_SUCCESS;
    }
  }

  /*
   * bad parameters
   */
  fprintf(stderr, "%s\n\nGenerates a listing of the contents of an OS/Extension/Expansion ROM image.\n\n",id);
  fprintf(stderr, "Syntax:\tROMinfo <flags> <ROM image>\n\n");
  fprintf(stderr, "Flags:\n  -csv Output details in CSV format\n\n");
  exit(EXIT_FAILURE);
}

/*
 * toggle hourglass
 */
void
hourglass(int state)
{
  if (state)
    _swix(Hourglass_On,0);
  else
    _swix(Hourglass_Off,0);
}

void getimage(char name[], char **image, int *ilenptr)
{
  FILE *fptr;

  if ((fptr = fopen(name, "rb")) == NULL)
  {
    fprintf(stderr, "Can't open %s\n", name);
    exit(EXIT_FAILURE);
  }

  /* Find size of image */
  fseek(fptr, 0L, SEEK_END);
  *ilenptr = (size_t) ftell(fptr);
  fseek(fptr, 0L, SEEK_SET);

  /* Alloc & read entire image */
  if ((*image = malloc(*ilenptr)) == NULL)
  {
    fprintf(stderr, "Can't allocate %dK for image\n", (*ilenptr)/1024);
    exit(EXIT_FAILURE);
  }
  if (fread(*image, 1, *ilenptr, fptr) != *ilenptr)
  {
    fprintf(stderr, "Can't read %s\n", name);
    exit(EXIT_FAILURE);
  }

  fclose(fptr);
}


/*
 * Reads the image and prints blurb about image type etc.
 */
void readimage(char *image, int ilen)
{
  if (!flag_csv)
  {
    printf("Image size:     %dK\n", ilen/1024);
    printf("Image type:     ");
  }
  /* Look at header to determine image type */
  if (*image & 0x80)
  {
    printf("Non-conformant expansion card\n");
  }
  else if (*image == 0x10)
  {
    if (!flag_csv)
      printf("RISC OS\n");
    reados(image,ilen);
  }
  else if (*image & 0x38)
  {
    printf("Simple type &%X expansion card\n", (*image & 0x38) >> 3);
  }
  else if (*(image+3) + (*(image+4) << 8) == 0x87)
  {
    printf("Extension ROM\n");
    readexp(image, "Extn ROM  1");
  }
  else
  {
    printf("Expansion card\n");
    readexp(image, "Podule 1   ");
  }
}


/*
 * Reads an expansion/extension image header and prints blurb about it.
 */
void readexp(char *image, char *romtype)
{
  char *dptr;	/* Pointer into chunk directory, see PRM 4-127 */
  char *cptr;	/* Pointer at chunk (not necessarily word-aligned) */
  char info[256];
  int modno=0;
  int size=0;

  printf("Product type:   &%X\n", *(image+3) + (*(image+4) << 8));
  printf("Manufacturer:   &%X\n", *(image+5) + (*(image+6) << 8));
  printf("Country:        &%X\n", *(image+7));

  /* Check for presence of chunk directory */
  switch (*(image+1) & 3)
  {
  case 0:
  case 2:
    return;
  case 1:
    fprintf(stderr, "Invalid format: Can't have CD & !IS\n");
    exit(EXIT_FAILURE);
  }

  /* Enumerate chunks */
  dptr = image + 0x10;	/* First chunk = after ISP */
  while (*dptr)
  {
    cptr = image + *((int *) (dptr+4));

    switch (*dptr)
    {
    case 0x80:
      printf("Has loader\n");
      break;
    case 0x81:
      if (!(modno++))
        printf("\nNo. Position    Module Name             Description     Version Date             Size     Comment\n");
      printf("%3d %s %s\n", modno, romtype, modinfo(cptr, info, &size));
      break;
    case 0x82:
      printf("BBC ROM\n");
      break;
    case 0x83:
      printf("Sprite\n");
      break;
    case 0xa0:
      printf("UNIX loader\n");
      break;
    case 0xf0:
      dptr = cptr - 8;	/* link */
      break;
    case 0xf1:
      printf("Serial number:  %s\n", cptr);
      break;
    case 0xf2:
      printf("Date of manuf:  %s\n", cptr);
      break;
    case 0xf3:
      printf("Mod. status:    %s\n", cptr);
      break;
    case 0xf4:
      printf("Place of manuf: %s\n", cptr);
      break;
    case 0xf5:
      printf("Description:    %s\n", cptr);
      break;
    case 0xf6:
      printf("Part number:    %s\n", cptr);
      break;
    case 0xf7:
      printf("Ethernet ID:    %X:%X:%X:%X:%X:%X\n", *cptr, *(cptr+1), *(cptr+2),
             *(cptr+3), *(cptr+4), *(cptr+5));
      break;
    case 0xf8:
      printf("Serial number:  &%X\n", *((int *) cptr));
      break;
    case 0xff:
      /* Empty chunk */
      break;
    default:
      printf("Reserved chunk: &%X\n", *dptr);
    }
    dptr += 8;
  }
}


/*
 * Reads an os image header.
 * Returns pointer to the first module in image, or NULL if none.
 */
void reados(char *image,int rom_size)
{
  char *dptr, *p;
  char info[256];
  int modno = 0;
  int total_size = 0;

  /* Find the title string of the first module */
  p = memfind(image, "UtilityModule");

  /* Search backwards for the pointer to it at offset 0x10 from module base */
  dptr = (char *) (((int) p-0x14) & ~3 );	/* round down to word */
  while (*((int *) (dptr+0x10)) != p-dptr)
    dptr -= 4;

  /* Point to size field before module base */
  dptr -= 4;

  if (flag_csv)
  {
    printf("\n\"Number\",\"Module name\",\"Revision\",\"Size\"\n");

    while (*((int *) dptr) != 0)
    {
      printf("\"%d\",%s\n",++modno,modinfo(dptr+4, info,&total_size));
      dptr += *((int *) dptr);
    }
  }
  else
  {
    printf("\nNo. Position    Module Name             Description     Version Date             Size      Comment\n");

    while (*((int *) dptr) != 0)
    {
      printf("%3d System ROM  %s\n", ++modno, modinfo(dptr+4, info,&total_size));
      dptr += *((int *) dptr);
    }
    printf("Total ROM size %dk\n",rom_size/1024);
    printf("Space utilised %dk (%d%%)\n",total_size/1024,
    		  total_size*100/rom_size);
  }
}


/*
 * Fills supplied info buffer with description of module pointed to by base.
 * Note that base may not be word-aligned.
 */
char *modinfo(char *base, char *info, int *total_size)
{
  char *title, *desc, *ver, *p;
  int size;

  size = *(int*)(base-4);
  (*total_size)+=size;

  /* Remove tabs from description, version and date fields */
  title = (char *) (base + GETWORD(base+0x10));

  desc = (char *) (base + GETWORD(base+0x14));
  while ((p = strrchr(desc, '\t')) != NULL)
    *p = '\0';

  ver = desc + strlen(desc) + 1;
  if (*ver == '\0') ver++;

  if (!flag_csv)
  {
    sprintf(info, "%-24s%-16s%-8.4s%-15.13s  %7.2fk  %s", title, desc, ver, ver+5, ((float)size)/1024.0, ver+18);
  }
  else
  {
    p=ver;
    while (*p!='(')
      p++;
    *(p-1) = '\0';
    sprintf(info,"\"%s\",\"%s\",\"%.2f\"",title,ver,((float)size)/1024.0);
  }
  return info;
}


/*
 * Find an existing string in a block of memory. Returns pointer to string.
 */
char *memfind(char *mem, char *find)
{
  char *c = mem;

  do
  {
    while (*c != *find)
      c++;

    if (!(strcmp(c, find)))
      return c;

    c++;
  } while (1);
}
