/*
 * ROMinfo (ROMinfo.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#ifdef __riscos
#include "swis.h"
#endif

#include "VersionNum"

/* Read word from (non-word-aligned) char *c - used to be a macro - no longer */
static int GETWORD(const void *vp)
{
  /* Must force unsignedness to avoid sign extension of char when char is signed
   * as it is on Solaris.
   */
  const unsigned char *ucp = (const unsigned char *) vp;
  return ucp[0] | (ucp[1] << 8) | (ucp[2] << 16) | (ucp[3] << 24);
}

void getimage(unsigned char **image, int *ilenptr);
void readimage(int ilen);
void readexp(unsigned char *image, char *romtype);
void reados(int imageSize);
char *modinfo(unsigned char *base, char *info, int *total_size, int size);
void hourglass(int state);
fpos_t *findstr(char *find);
int findmem(char *match, void *data, size_t length, long *found_at);
int fsize(FILE *);
int findResourceFSBlockSize(void);
int fastFindResourceFSBlockSize(void);
int veryfastFindResourceFSBlockSize(void);

static int flag_csv = 0;
static int flag_loc = 0;
static int flag_ressize = 0;

FILE *imageFile;

/*
 * tidy things up before exit
 */
void
doexit(void)
{
  hourglass(0);
}

int main(int argc, char *argv[])
{
  int ilen;
  static char id[] = "ROM information lister version "
    Module_FullVersion " [" Module_Date "] © Pace Micro Technology plc. 1996-2000.";
  int i;
  int ifirst = 0; /* first none flag argument on command line */

  atexit(doexit);

  if (argc>=2)
  {
    /*
     * scan command line for flags
     */
    for (i=1; i<argc; i++)
    {
      if (!strcmp(argv[i],"-csv")||!strcmp(argv[i],"csv"))
      {
        flag_csv = 1;
      }
      else if (!strcmp(argv[i],"-ressize")||!strcmp(argv[i],"ressize"))
      {
        flag_ressize = 1;
      }
      else if (!strcmp(argv[i], "-loc")||!strcmp(argv[i], "loc"))
      {
        flag_loc = 1;
      }
      else if (*argv[i]!='-' && ifirst==0)
        ifirst=i;
    }

    puts(id);

    if (ifirst>0)
    {

      hourglass(1);

      /* Open ROM image file */
      if ((imageFile = fopen(argv[ifirst], "rb"))!=NULL) {
        /* Calculate size of image file */
        ilen = fsize(imageFile);

        readimage(ilen);

        /* Tidy up */
        fclose(imageFile);
      }
      else {
        printf("Cannot open image file.\n");
        return EXIT_FAILURE;
      }

      hourglass(0);

return EXIT_SUCCESS;
    }
  }

  /*
   * bad parameters
   */
  fputs(id, stderr);
  fputs("\n\nGenerates a listing of the contents of an OS/Extension/Expansion ROM image.\n\n"
        "Syntax:\tROMinfo [<flags>] <ROM image>\n\nFlags:\n"
        "  -csv       Output details in CSV format\n"
        "  -loc       Output start positions of module in ROM\n"
        "  -ressize   Output the size of the ResourceFS area.\n"
        "", stderr);
  exit(EXIT_FAILURE);
}


/*
 * toggle hourglass
 */
void
hourglass(int state)
{
#ifdef __riscos
  if (state)
    _swix(Hourglass_On,0);
  else
    _swix(Hourglass_Off,0);
#else
  (void) state;
#endif
}

void getimage_nbytes(unsigned char **image, int ilen)
{
  /*
   * Discard any earlier allocation (free(NULL) is permitted)
   */
  free(*image);

  /*
   * Alloc & read first ilen bytes of image
   */
  if ((*image = malloc(ilen)) == NULL)
  {
    fprintf(stderr, "Can't allocate %dK for image\n", (ilen)/1024);
    exit(EXIT_FAILURE);
  }
  if (fread(*image, 1, ilen, imageFile) != ilen)
  {
    fprintf(stderr, "Can't read image file\n");
    exit(EXIT_FAILURE);
  }
}

void getimage(unsigned char **image, int *ilenptr)
{

  /*
   * Find size of image
   */
  fseek(imageFile, 0L, SEEK_END);
  *ilenptr = (size_t) ftell(imageFile);
  rewind(imageFile);

  /*
   * Alloc & read entire image
   */
  getimage_nbytes(image, *ilenptr);

  /*
   * Close the file now - we no longer require it.
   */
  fclose(imageFile);
}


/*
 * Reads the image and prints blurb about image type etc.
 */
void readimage(int ilen) {
  unsigned char *image = 0;
  int header_size;
  long found_at;

  if (!flag_csv) {
    printf("Image size:    %d\n", ilen / 1024);
    printf("Image type:    ");
  }

  if (ilen > (1*1024*1024)) {
    header_size = 1*1024*1024;
  }
  else {
    header_size = ilen;
  }

  /* Check for extension ROMs first - these have a header (at the end!) so are easy to detect */
  fseek(imageFile, -8L, SEEK_END);
  getimage_nbytes(&image, 8);
  if (memcmp(image, "ExtnROM0", 8) == 0) {
    /* is an extension ROM */
    if (!flag_csv) {
      printf("Extension ROM\n");
    }
    getimage(&image, &ilen);
    readexp(image, "Extn ROM 1");
  }
  else {
    rewind(imageFile);
    getimage_nbytes(&image, header_size);
    rewind(imageFile);

    /* Look for a HAL descriptor table */
    if (findmem("OSIm", image, header_size, &found_at)) {
      if (!flag_csv) {
        printf("RISC OS (with HAL)\n");
      }
      reados(ilen);
    }
    else if (findmem("UtilityModule", image, header_size, &found_at)) {
      if (!flag_csv) {
        printf("RISC OS\n");
      }
      /* This fsetpos is useful - it means that findstr will locate the string
       * on its first comparison.
       */
      fseek(imageFile, found_at, SEEK_SET);
      reados(ilen);
    }
    else if (image[0] == 0x80) {
      printf("Non-conformant expansion card\n");
    }
    else {
      printf("Expansion card\n");
      getimage(&image, &ilen);
      readexp(image, "Podule 1");
    }
  }
}

/*
 * Reads an expansion/extension image header and prints blurb about it.
 */
void readexp(unsigned char *image, char *romtype)
{
  unsigned char *dptr; /* Pointer into chunk directory, see PRM 4-127 */
  unsigned char *cptr; /* Pointer at chunk (not necessarily word-aligned) */
  char info[256];
  int modno=0;
  int size=0;

  printf("Product type:   &%X\n", *(image+3) + (*(image+4) << 8));
  printf("Manufacturer:   &%X\n", *(image+5) + (*(image+6) << 8));
  printf("Country:        &%X\n", *(image+7));

  /* Check for presence of chunk directory */
  switch (*(image+1) & 3)
  {
  case 0:
  case 2:
    return;
  case 1:
    fprintf(stderr, "Invalid format: Can't have CD & !IS\n");
    exit(EXIT_FAILURE);
  }

  /* Enumerate chunks */
  dptr = image + 0x10; /* First chunk = after ISP */
  while (*dptr)
  {
    cptr = image + GETWORD(dptr + 4);

    switch (*dptr)
    {
    case 0x80:
      printf("Has loader\n");
      break;
    case 0x81:
      if (!(modno++))
        printf("\nNo. Position    Module Name             Description     Version Date             Size     Comment\n");
    printf("%3d %s %s\n", modno, romtype, modinfo(cptr, info, &size, 0));
      break;
    case 0x82:
      printf("BBC ROM\n");
      break;
    case 0x83:
      printf("Sprite\n");
      break;
    case 0xa0:
      printf("UNIX loader\n");
      break;
    case 0xf0:
      dptr = cptr - 8;	/* link */
      break;
    case 0xf1:
      printf("Serial number:  %s\n", cptr);
      break;
    case 0xf2:
      printf("Date of manuf:  %s\n", cptr);
      break;
    case 0xf3:
      printf("Mod. status:    %s\n", cptr);
      break;
    case 0xf4:
      printf("Place of manuf: %s\n", cptr);
      break;
    case 0xf5:
      printf("Description:    %s\n", cptr);
      break;
    case 0xf6:
      printf("Part number:    %s\n", cptr);
      break;
    case 0xf7:
      printf("Ethernet ID:    %X:%X:%X:%X:%X:%X\n", *cptr, *(cptr+1), *(cptr+2),
             *(cptr+3), *(cptr+4), *(cptr+5));
      break;
    case 0xf8:
      printf("Serial number:  &%X\n", *((int *) cptr));
      break;
    case 0xff:
      /* Empty chunk */
      break;
    default:
      printf("Reserved chunk: &%X\n", *dptr);
    }
    dptr += 8;
  }
}

/*
 * Reads an OS image file and prints out corresponding information
 */
void reados(int imageSize) {
  fpos_t *startPos;
  static unsigned char  *p, *dptr, *block;
  char info[256];
  unsigned char *psize;
  int offset = 0, size, modno = 0, totalsize = 0, resBlockSize = 0;
  long modOffset = 0;

  /*
   * Find the title string of the first module
   */
  startPos = findstr("UtilityModule");
  fsetpos(imageFile, startPos);

  if ((block = malloc(510)) != NULL)
  {
     /*
      * Grab data from file from start of title string back to (way) past
      * module header
      */
     fseek(imageFile, (497 * -1), SEEK_CUR);
     fread(block, 1, 510, imageFile);

     /*
      * Point p at 'U' in block of memory
      */
     p = (block + 497);

     dptr = (unsigned char *) (((int) p-0x14) & ~3);
     /*
      * Search back through block until p points at a position 0x10
      * back from module title i.e. the title block pointer in the
      * module header
      */
     for (;;) {
       const int offset = p - dptr;
       if (GETWORD(dptr + 0x10) != offset) {
         dptr -= 4;
         continue;
       }
       break;
     }

     /*
      * Set file pointer back to 'U' in file
      */
     fsetpos(imageFile, startPos);
     /*
      * Calculate offset of module size field from title block
      */
     offset = (p - dptr + 4);
     /*
      * Set file pointer to module size field
      */
     fseek(imageFile, -1L * (long) offset, SEEK_CUR);

     if (flag_csv) {
       printf("\n\"Number\",\"Module name\",\"Revision\",\"Size\"\n");

       if ((psize = malloc(4))!=NULL) {
         /*
          * Grab module size from file, file pointer now at module base
          * NOTE: size includes size of module + size of size field even
          * though it comes BEFORE the module base.
          */
         fread(psize, 1, 4, imageFile);
         size = GETWORD(psize);

         while (size != 0) {
           free(block);

           if ((block = malloc(size))!=NULL) {
             /*
              * Grab module from file to memory block, file pointer now at
              * next module size field
              */
             fread(block, 1, (size - 4), imageFile);
             printf("\"%d\",%s\n", ++modno, modinfo(block, info, &totalsize, size));
           }
           else {
             printf("Unable to allocate memory. 3\n");
           }

           /*
            * Read next size field
            */
           fread(psize, 1, 4, imageFile);
           size = GETWORD(psize);
         }

         free(psize);
       }
       else {
         printf("Unable to allocate memory. 2\n");
       }

     }  /* END OF FLAG_CSV */
     else
       if (flag_loc) {

         printf("\nNo. Position   Location ByteSize Module Name             Description\n");

         modOffset = ftell(imageFile);

         if ((psize = malloc(4))!=NULL)
         {
           fread(psize, 1, 4, imageFile);
           size = GETWORD(psize);

           while (size != 0) {
             free(block);

             if ((block = malloc(size))!=NULL) {
               fread(block, 1, (size - 4), imageFile);
               printf("%3d System ROM %8ld %s\n", ++modno, modOffset, modinfo(block, info, &totalsize, size));
             }
             else {
               printf("Unable to allocate memory. 3\n");
             }

             modOffset = ftell(imageFile);
             fread(psize, 1, 4, imageFile);
             size = GETWORD(psize);
           }

         printf("Total ROM size %dk\n", imageSize/1024);
         printf("Space utilised %dk (%d%%)\n",totalsize/1024, totalsize*100/imageSize);
         if (flag_ressize)
         {
           resBlockSize = veryfastFindResourceFSBlockSize();
           printf("ResourceFS block size %dk (%d%%)\n", resBlockSize, resBlockSize*100/imageSize);
         }
         free(psize);
         }
         else {
           printf("Unable to allocate memory. 2\n");
         }

       }  /* END OF FLAG_LOC */
     else {
       printf("\nNo. Position    Module Name             Description     Version Date             Size      Comment\n");

       if ((psize = malloc(4))!=NULL) {
         fread(psize, 1, 4, imageFile);
         size = GETWORD(psize);

         while (size != 0) {
           free(block);

           if ((block = malloc(size))!=NULL) {
             fread(block, 1, (size - 4), imageFile);
             printf("%3d System ROM  %s\n", ++modno, modinfo(block, info, &totalsize, size));
           }
           else {
             printf("Unable to allocate memory. 3\n");
           }

           fread(psize, 1, 4, imageFile);
           size = GETWORD(psize);
         }

       printf("Total ROM size %dk\n", imageSize/1024);
       printf("Space utilised %dk (%d%%)\n",totalsize/1024, totalsize*100/imageSize);
       if (flag_ressize)
       {
         resBlockSize = veryfastFindResourceFSBlockSize();
         printf("ResourceFS block size %dk (%d%%)\n", resBlockSize/1024, resBlockSize*100/imageSize);
       }
       free(psize);
       }
       else {
         printf("Unable to allocate memory. 2\n");
       }
     } /* END OF NO FLAG */
     free(block);
  }
  else {
    printf("Unable to allocate memory. 1\n");
  }
}


/*
 * Fills supplied info buffer with description of module pointed to by base.
 * Note that base may not be word-aligned.
 */
char *modinfo(unsigned char *base, char *info, int *total_size, int size)
{
  char *title, *desc, *ver, *p;
  unsigned char *hdr;

  (*total_size)+=size;

  /* Remove tabs from description, version and date fields */
  hdr = base + 0x10;
  title = (char *) (base + GETWORD(hdr));
  hdr = base + 0x14;
  desc = (char *) (base + GETWORD(hdr));
  while ((p = strrchr(desc, '\t')) != NULL)
    *p = '\0';

  ver = 1 + strchr(desc, '\0');
  if (*ver == '\0') ver++;

  if (flag_csv)
  {
    p=ver;
    while (*p!='(')
      p++;
    *(p-1) = '\0';
    sprintf(info,"\"%s\",\"%s\",\"%.2fk\"",title,ver,((float)size)/1024.0);
  }
  else if (flag_loc)
  {
    p=ver;
    while (*p != '(')
      p++;
    *(p-1) = '\0';
    sprintf(info, "%8d %-24s%-16s", size, title, desc);
  }
  else
  {
    size_t date_offset = 0;
    while (ver[5+date_offset] != '(' && ver[5+date_offset]) ++date_offset;
    if (!ver[5+date_offset]) date_offset = 0;
    sprintf(info, "%-24s%-16s%-8.4s%-15.13s  %7.2fk  %s",
      title, desc, ver, ver+5+date_offset, ((float)size)/1024.0, ver+18+date_offset);
  }
  return info;
}

/*
 * Find an existing string in a file, returns file position of 1st char
 * of string
 */
/*
 * This implementation is new in version 0.08 and supercedes the highly crap
 * "read N bytes, rewind N-1 bytes, read another N bytes" routine that
 * used to do this.
 *
 * Performance (on valhalla) when searching for UtilityModule in a
 * ROM image and the string is 32K into the image:
 *   old routine: 20 seconds      new routine: less than 1 second.
 */
fpos_t *findstr(char *find)
{
  static fpos_t filePos;
  char buffer[4*BUFSIZ];
  const size_t findlen = strlen(find) + 1;

  for (;;) {
    int i, imax, nbytes = fread(buffer, 1, sizeof(buffer), imageFile);

    if (nbytes >= 0) {
      if (nbytes < sizeof(buffer)) {
        memset(buffer + nbytes, '\0', sizeof(buffer) - nbytes);
      }

      imax = sizeof(buffer) - findlen;
      for (i = 0; i < imax; ++i) {
        if (buffer[i] == *find) {
          if (memcmp(buffer + i, find, findlen) == 0) {
            /* Got it! Rewind file to correct location and store position in filePos */
            fseek(imageFile, (long) i - (long) nbytes, SEEK_CUR);
            fgetpos(imageFile, &filePos);
            return &filePos;
          }
        }
      }

      /* In case the string overlies the buffer boundary, rewind to
       * cover the partial bit we just missed
       */
      fseek(imageFile, -(long) findlen, SEEK_CUR);
    }

    if ((nbytes + findlen) < sizeof(buffer)) {
      /* Did not find it! */
      fprintf(stderr, "Could not locate string '%s' in file!\n", find);
      exit(EXIT_FAILURE);
    }
  }
}

/* Finds a string of data in the given data[0..length-1].  String does NOT have be zero-terminated
 * to constitute a matched string
 */
int findmem(char *match, void *data, size_t length, long *found_at)
{
  const size_t match_length = strlen(match);
  char *cdata = (char *) data;
  char *edata = cdata + length - strlen(match);

  for (; cdata < edata; ++cdata) {
    if (*cdata == *match) { /* Speed improvement - avoid function call unless the first byte matches at least */
      if (memcmp(match, cdata, match_length) == 0) {
        *found_at = cdata - (char *) data;
        return 1;
      }
    }
  }

  return 0;
}

/*
 * Finds size of file, returns size in bytes
 */
int fsize(FILE *f)
{
  int length;
  /* Strictly speaking, undefined behaviour */
  fseek(f, 0L, SEEK_END);
  length = (int) ftell(f);
  rewind(f);
  return length;
}

/*
 * Calculates size of ResourceFS block placed after modules in ROM image
 * It does this by locating the file pointer before the checksum and
 * searching byte-by-byte until it finds something that is not 0xFF.  It
 * is excruciatingly slooow...  (Why can't I make the HDD spin the other
 * way *grin?*)
 */
int findResourceFSBlockSize() {
  long endOfModules, endOfResourceFS;
  int resourceFSSize = 0;

  /* Set file pointer back to end of modules */
  fseek(imageFile, -4, SEEK_CUR);

  endOfModules = ftell(imageFile);

  /* Jump to beginning of checksum at end of file (checksum 20B long)*/
  fseek(imageFile, -32, SEEK_END);

  /* Walk back through file to end of ResourceFS block */
  /* Should reverse the HDD here... */
  while (fgetc(imageFile) == 0xFF) {
    fseek(imageFile, -2, SEEK_CUR);
  }

  endOfResourceFS = ftell(imageFile);

  resourceFSSize = (int)(endOfResourceFS - endOfModules);

  return resourceFSSize;
}

/*
 * This one will be marginally faster than the first one but may be less
 * reliable as if there is an 0xFF between where the search overshoots (
 * as it undoubtably will) and the end of the ResourceFS block this will
 * get picked up as the end of the block instead.  I don't know how much
 * of a worry this is.  If accuracy is a problem then use the function above
 */
int fastFindResourceFSBlockSize() {
  long endOfModules, endOfResourceFS;
  int resourceFSSize = 0;

  /* Set file pointer back to end of modules */
  fseek(imageFile, -4, SEEK_CUR);

  endOfModules = ftell(imageFile);

  /* Jump to beginning of checksum at end of file (checksum 20B long)*/
  fseek(imageFile, -32, SEEK_END);

  /* Walk back through file to end of ResourceFS block */
  while (fgetc(imageFile) == 0xFF) {
    fseek(imageFile, -65, SEEK_CUR);
  }

  /* Undo overshoot */
  fseek(imageFile, 64, SEEK_CUR);

  /* Now scan more carefully now we know we are close */
  while (fgetc(imageFile) == 0xFF) {
    fseek(imageFile, -2, SEEK_CUR);
  }

  endOfResourceFS = ftell(imageFile);

  resourceFSSize = (int)(endOfResourceFS - endOfModules);

  return resourceFSSize;
}

/*
 * This one will be much faster than the first one but may be less
 * reliable as if there is an 0xFF between where the search overshoots (
 * as it undoubtably will) and the end of the ResourceFS block this will
 * get picked up as the end of the block instead.  I don't know how much
 * of a worry this is.  If accuracy is a problem then use the function above
 */
#define VFF_SIZE (16384)
extern void *_compile_time_assertion[-1+2*(    VFF_SIZE < 0x01000000   )];

int veryfastFindResourceFSBlockSize() {
  long endOfModules, endOfResourceFS;
  int resourceFSSize = 0;
  unsigned char buffer[VFF_SIZE];

  /* Set file pointer back to end of modules */
  fseek(imageFile, -4, SEEK_CUR);

  endOfModules = ftell(imageFile);

  /* Jump to beginning of checksum at end of file (checksum 20B long)*/
  fseek(imageFile, -32L, SEEK_END);

  /* Walk back through file to end of ResourceFS block */
  while (ftell(imageFile) >= VFF_SIZE) {
    unsigned long sum;
    int idx;
    fseek(imageFile, -VFF_SIZE, SEEK_CUR);
    fread(buffer, 1, VFF_SIZE, imageFile);
    fseek(imageFile, -VFF_SIZE, SEEK_CUR);
    for (sum = 0, idx = 0; idx < VFF_SIZE; ++idx) {
      sum += buffer[idx];
    }
    if (sum != (VFF_SIZE * 0xffl)) break;
  }

  if (ftell(imageFile) > VFF_SIZE) {
    /* Then we found the block */
    int idx;
    for (idx = VFF_SIZE-1; idx >=0 && buffer[idx] == 0xff; --idx) ;;
    endOfResourceFS = ftell(imageFile) + idx;
  }
  else {
    endOfResourceFS = 0;
  }

  if (endOfResourceFS < endOfModules) {
    resourceFSSize = 0;
  }
  else {
    resourceFSSize = (int)(endOfResourceFS - endOfModules);
  }

  return resourceFSSize;
}
