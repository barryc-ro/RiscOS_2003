/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

int
main(int argc, char *argv[])
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  char *env;
  char *value=NULL;
  char *canonicalised=NULL;
  int len;
  
  /* check args */
  if (argc!=2)
  {
    fprintf(stderr,"Canonicalise a pathname.\n");
    fprintf(stderr,"Usage: %s <environment variable>\n",argv[0]);
    goto exit_gracefully;
  }
  
  /* does it exist */
  if ((env=getenv(argv[1]))==NULL)
  {
    fprintf(stderr,"Cannot lookup '%s'.\n",argv[1]);
    goto exit_gracefully;
  }

  /* take a copy */  
  len = strlen(env)+1;
  if ((value=malloc(len))==NULL)
  {
    fprintf(stderr,"Memory allocation error.\n");
    goto exit_gracefully;
  }
  strcpy(value,env);
  
  /* create a buffer */
  if ((canonicalised=malloc(len*2))==NULL)
  {
    fprintf(stderr,"Memory allocation error.\n");
    goto exit_gracefully;
  }

  reg.r[0] = 37;		/* canonicalise */
  reg.r[1] = (int)value;
  reg.r[2] = (int)canonicalised;
  reg.r[3] = NULL;
  reg.r[4] = NULL;
  reg.r[5] = len*2;
  if ((err=_kernel_swi(OS_FSControl,&reg,&reg))!=NULL)
  {
    fprintf(stderr,"Error : %s (%x)\n",err->errmess,err->errnum);
    goto exit_gracefully;
  }

  /* set the environment variable back */
  if ((err=_kernel_setenv(argv[1],canonicalised))!=NULL)
  {
    fprintf(stderr,"Error : %s (%x)\n",err->errmess,err->errnum);
    goto exit_gracefully;
  }
  return 0;
  
exit_gracefully:
  if (value)
    free(value);
  if (canonicalised)
    free(canonicalised);
    
  return 1;
}
