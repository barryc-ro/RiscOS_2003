/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "wimp.h"
#include "toolbox.h"
#include "event.h"
#include "wimplib.h"
#include "gadgets.h"
#include "window.h"
#include "menu.h"
#include "proginfo.h"
#include "iconbar.h"

#include "resources.h"
#include "constants.h"
#include "msg.h"
#include "env.h"
#include "file.h"
#include "parse.h"
#include "build.h"

#define WimpVersion    350

static  WimpPollBlock  poll_block;
static  MessagesFD     messages;
static  IdBlock        id_block;

int  task_handle          = 0;  /* Wimp task handle */
int  iconbar_id           = 0;  /* object ids */
int  menu_iconbar_id      = 0;
int  menu_option_id 	  = 0;
int  menu_view_id 	  = 0;
int  window_options_id	  = 0;
int  window_build_id	  = 0;
int  proginfo_id	  = 0;
char *build_tree 	  = NULL;
char *default_env	  = NULL;
build_list_t *build_list  = NULL;
int  used_default_options = FALSE;

/* 
 * clean up before exit
 */
int
quit_all(void)
{
  build_free();
  
  if (build_tree)
    free(build_tree);
    
  if (default_env)
    free(default_env);
    
  debug db_file_init(NULL);
  exit(0);
  
  return (1);
}

/*
 *
 * Event handler to be called when toolbox event 1 is generated (by click on the
 * 'Quit' entry of the iconbar menu.
 */
int
event_quit(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  return(quit_all());
}

/*
 * Message handler to be called on receipt of a Quit or PreQuit message from the
 * Wimp.
 */
int
message_quit(WimpMessage *message, void *handle)
{
  message = message;
  handle = handle;

  return(quit_all());
}

/* 
 * set build tree
 */
void
set_build_tree(char *name)
{
  if (build_tree) {
    if (strlen(name)>strlen(build_tree)) { /* will it fit */
      free(build_tree);
    } else {
      strcpy(build_tree,name);
      debug db_printf("build_tree set to '%s'\n",build_tree);
      return;
    }
  }
  build_tree = strdup(name);
}

/*
 * Validate filetype of file then initiate a load and open the main window
 */
int
message_data_open(WimpMessage *message, void *handle)
{
  _kernel_oserror *err;
  WimpMessage msg;
  char *path;
  int  toolbox_object;
  int  component_id;
  handle=handle;

  if (message->hdr.sender == task_handle) 
    return 0;

  path = message->data.data_load_ack.leaf_name;

  ERR_CHECK(err,window_wimp_to_toolbox(0,
  	message->data.data_load_ack.destination_window,
  	message->data.data_load_ack.destination_icon,
  	&toolbox_object,&component_id));

  if (toolbox_object == window_build_id)
  {
    if (file_exists(path)==2)
    {
      set_build_tree(path);
      ERR_CHECK_RETURN(err,build_add_entry(path));
      ERR_CHECK_RETURN(err,build_populate(window_build_id,
        	BUILD_GADGET_TREE));
    }
  }
  
  /* 
   * acknowledge message
   */
  msg = *message;
  msg.hdr.your_ref = msg.hdr.my_ref;

  if (message->hdr.action_code == Wimp_MDataLoad)
    msg.hdr.action_code = Wimp_MDataLoadAck;

  wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0);

  return 1;
}


/* 
 * read in contents of defaults file
 */
int
read_defaults(void)
{
  FILE *fh=NULL;
  char buffer[BUFFER_SIZE];
  int  argc,i,j;
  char *argv[25];
  
  if ((fh=fopen(DEFAULTS_FILE,"r"))==NULL)
    return 0;
  
  while (!feof(fh)) {
    fgets(buffer,sizeof(buffer),fh);
    if (!feof(fh)) {
      chop_newline(buffer);
      debug db_printf("  %s\n",buffer);
      argc=parse_getargs(buffer,argv);
      if (argc>0) {
        if        (cstrcmp(argv[0],"bld")==0) {
          set_build_tree(argv[1]);
        } else if (cstrcmp(argv[0],"env")==0) {
          default_env = strdup(argv[1]);
        } else if (cstrcmp(argv[0],"opt")==0) {
          for (i=1; i<argc; i++) {
    	    for (j=0; j<(sizeof(options)/sizeof(option_t)); j++) {  
              options[j].def = 0;   	    
      	      if (strcmp(options[j].name,argv[i])==0) { 
      	        options[j].def = 1;
      	        break;
      	      }
      	    }
          }
        }
      }
    }
  }
  fclose(fh);
  
  return 0;
}

/* 
 * read in contents of build trees file
 */
int
read_builds(void)
{
  FILE *fh=NULL;
  char buffer[BUFFER_SIZE];
  
  if ((fh=fopen(BUILDS_FILE,"r"))==NULL)
    return 0;
    
  while (!feof(fh)) {
    fgets(buffer,sizeof(buffer),fh);
    if (!feof(fh)) {
      chop_newline(buffer);
      debug db_printf("  %s\n",buffer);
      build_add_entry(buffer);
    }
  }
  fclose(fh);
  
  return 0;
}
  
/* 
 * write the list of build directories to the defaults file
 */
int
write_builds(void)
{
  _kernel_oserror *err=NULL;
  FILE *fh=NULL;
  build_list_t *entry;

  switch (file_exists(CHOICES_DIR))
  {
    case 0 :
      if (mkdir(CHOICES_DIR,0)==0)
        break;
      /* else drop though to */
    case 1 :
      ERR_CHECK_RETURN(err,msg_error_construct("dir"));
      /* macro will exit */
  }

  if ((fh=fopen(BUILDS_FILE,"w"))==NULL) {
    ERR_CHECK_RETURN(err,msg_error_construct("def"));    
  }

  entry = build_list;
  while (entry) {
    fprintf(fh,"%s\n",entry->name);
    entry = entry->next;
  }
  fclose(fh);
  
  return 0;
}

/* 
 * save current options in a defaults file
 */
int 
write_defaults(void)
{
  _kernel_oserror *err=NULL;
  FILE *fh=NULL;
  int  i,state;
  char buffer[BUFFER_SIZE];
  
  switch (file_exists(CHOICES_DIR))
  {
    case 0 :
      if (mkdir(CHOICES_DIR,0)==0)
        break;
      /* else drop though to */
    case 1 :
      ERR_CHECK_RETURN(err,msg_error_construct("dir"));
      /* macro will exit */
  }
  
  if ((fh=fopen(DEFAULTS_FILE,"w"))==NULL) {
    ERR_CHECK_RETURN(err,msg_error_construct("def"));    
  }
  
  fprintf(fh,"opt");
  for (i=0; i<(sizeof(options)/sizeof(option_t)); i++) {  
    ERR_CHECK_RETURN(err,optionbutton_get_state(0,window_options_id,
  	options[i].id,&state));
    if (state)
      fprintf(fh," %s",options[i].name);
  }
  fprintf(fh,"\n");
  
  ERR_CHECK_RETURN(err,stringset_get_selected(0,window_options_id,
        	OPTIONS_GADGET_TREE,buffer,sizeof(buffer),&i));
  fprintf(fh,"bld %s\n",buffer);
  ERR_CHECK_RETURN(err,stringset_get_selected(0,window_options_id,
        	OPTIONS_GADGET_ENV,buffer,sizeof(buffer),&i));
  fprintf(fh,"env %s\n",buffer);
  fclose(fh);
    
  return 0;
}

/*
 * attach_other_handlers
 */
int 
attach_other_handlers(int event_code,ToolboxEvent *event,
			IdBlock *id_block, void *handle)
{
  _kernel_oserror *err = NULL;
  char template_name[25];
  int i;
  
  ERR_CHECK(err,toolbox_get_template_name(0,id_block->self_id,template_name,
      				     sizeof(template_name),&i));

  if (strcmp(template_name, ICONBAR_NAME) == 0) {
    iconbar_id = id_block->self_id;
  } else if (strcmp(template_name, MENU_ICONBAR_NAME) == 0) {
    menu_iconbar_id = id_block->self_id;
  } else if (strcmp(template_name, WINDOW_OPTIONS_NAME) == 0) {
    window_options_id = id_block->self_id;
  } else if (strcmp(template_name, PROGINFO_NAME) ==0) {
    proginfo_id = id_block->self_id;
  } else if (strcmp(template_name, MENU_OPTION_NAME) ==0) {
    menu_option_id = id_block->self_id;
  } else if (strcmp(template_name, MENU_VIEW_NAME) ==0) {
    menu_view_id = id_block->self_id;
  } else if (strcmp(template_name, WINDOW_BUILDS_NAME) ==0) {
    window_build_id = id_block->self_id;
  }
  return 0;
}

/*
 * Enter the correct version string into window
 */
int
proginfo_show(int event_code,ToolboxEvent *event,
    			    IdBlock *id_block, void *handle)
{
  proginfo_set_version(0,id_block->self_id,APP_VERSION);
  return 0;
}

/*
 * populate the windows with data prior to them being opened
 */
int 
window_show(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err=NULL;
  int i;
  
  if (id_block->self_id == window_options_id) {
    /* populate list of build trees */
    ERR_CHECK_RETURN(err,build_populate(window_options_id,OPTIONS_GADGET_TREE));

    /* sort out env menu and default value */
    if (build_tree) {
      ERR_CHECK_RETURN(err,
    	env_populate(window_options_id,OPTIONS_GADGET_ENV,default_env));
    }
    if (!used_default_options) {
      /* sort out default rom build options */
      for (i=0; i<(sizeof(options)/sizeof(option_t)); i++) {  
        if (options[i].def) {
          ERR_CHECK_RETURN(err,optionbutton_set_state(0,window_options_id,
      	          options[i].id,1));
      	} else {
          ERR_CHECK_RETURN(err,optionbutton_set_state(0,window_options_id,
      	          options[i].id,0));
      	}
      }
      
      used_default_options = TRUE;
    }
  } else if (id_block->self_id == window_build_id) {
    /* populate list of build trees */
    ERR_CHECK_RETURN(err,build_populate(window_build_id,BUILD_GADGET_TREE));
  }
  return 0;
}

/* 
 * populate string set prior to it being shown
 */
int
stringset_show(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err=NULL;

  if (id_block->self_id == window_options_id) {
    if (id_block->self_component == OPTIONS_GADGET_ENV) {
      /* check for build directory being selected */
      if (!build_tree) {
        ERR_CHECK_RETURN(err,msg_error_construct("bld"));
      }
      ERR_CHECK_RETURN(err,
    	env_populate(window_options_id,OPTIONS_GADGET_ENV,default_env));
    } else if (id_block->self_component == OPTIONS_GADGET_TREE) {
      ERR_CHECK_RETURN(err,
        build_populate(window_options_id,OPTIONS_GADGET_TREE));
    }
  }
  return 0;
}

/* 
 * deal with new stringset value
 */
int
stringset_changed(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err=NULL;
  char current[BUFFER_SIZE];
  int i;
  
  if (id_block->self_id == window_options_id)
  {
    if (id_block->self_component == OPTIONS_GADGET_TREE) {
      ERR_CHECK_RETURN(err,stringset_get_selected(0,window_options_id,
        	OPTIONS_GADGET_TREE,current,sizeof(current),&i));
      set_build_tree(current);
      
    } else if (id_block->self_component == OPTIONS_GADGET_ENV) {
      ERR_CHECK_RETURN(err,stringset_get_selected(0,window_options_id,
        	OPTIONS_GADGET_ENV,current,sizeof(current),&i));
      if (default_env)
        free(default_env);
      default_env=strdup(current);
      
      ERR_CHECK_RETURN(err,
    	env_source());
    }
  }
  return 0;
}

/* 
 * deal with button presses
 */
int action_click(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int i;
  
  if (id_block->self_id == window_options_id)
  {
    char cmd[BUFFER_SIZE];
    int state,gadget;

    switch (id_block->self_component)
    {
      case OPTIONS_GADGET_BUILD :
        if (getenv(BUILD_ENV)==NULL) {
          ERR_CHECK_RETURN(err,msg_error_construct("env"));
        }
        
        strcpy(cmd,BUILD_FILE);
        strcat(cmd," ");
        /* find out which radio button is clicked */
        ERR_CHECK_RETURN(err,radiobutton_get_state(0,window_options_id,
        	OPTIONS_GADGET_DONT,&state,&gadget));
        for (i=0; i<(sizeof(versioning)/sizeof(version_t)); i++) {
          if (gadget == versioning[i].id) {
            break;
          }
        }
        strcat(cmd,versioning[i].action);
        for (i=0; i<(sizeof(options)/sizeof(option_t)); i++) {
          ERR_CHECK_RETURN(err,optionbutton_get_state(0,window_options_id,
        	options[i].id,&state));
          if (state) {
            strcat(cmd," ");
            strcat(cmd,options[i].name);
          }
        }          
        debug db_printf("cmd = '%s'\n",cmd);
        reg.r[0] = (int)cmd;
        ERR_CHECK_RETURN(err,_kernel_swi(Wimp_StartTask,&reg,&reg));
        
        /* reset version number field to "don't" */
        ERR_CHECK_RETURN(err,radiobutton_set_state(0,window_options_id,
        	OPTIONS_GADGET_DONT,1));

        break;
    }
  } else if (id_block->self_id == window_build_id) {
    char current[BUFFER_SIZE];
    
    switch (id_block->self_component)
    {
      case BUILD_GADGET_REMOVE :
        ERR_CHECK_RETURN(err,stringset_get_selected(0,window_build_id,
        	BUILD_GADGET_TREE,current,sizeof(current),&i));
        ERR_CHECK_RETURN(err,build_remove_entry(current));
        ERR_CHECK_RETURN(err,build_populate(window_build_id,
        	BUILD_GADGET_TREE));
                break;
        
      case BUILD_GADGET_ADD :
        ERR_CHECK_RETURN(err,stringset_get_selected(0,window_build_id,
        	BUILD_GADGET_TREE,current,sizeof(current),&i));
        ERR_CHECK_RETURN(err,build_add_entry(current));
        ERR_CHECK_RETURN(err,build_populate(window_build_id,
        	BUILD_GADGET_TREE));
        break;
        
      case BUILD_GADGET_SAVE :
	write_builds();
        break;
    }
  }
  
  return 0;
}

/*
 * deal with clicks on the icon bar
 */
int 
iconbar_click(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  IconbarClickedEvent *click_block = (IconbarClickedEvent *) event;
  
  if (click_block->hdr.flags & Iconbar_Clicked_Select)
  {
    /* 
     * If no build directories defined, pop up build window
     */
    if (build_list)
      toolbox_show_object(0,window_options_id,0,NULL,iconbar_id,0);
    else
      toolbox_show_object(0,window_build_id,0,NULL,iconbar_id,0);    
  }
  return 0;
}

/*
 * deal with key presses
 */
int 
key_pressed(int event_code, WimpPollBlock *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err = NULL;
  WimpKeyPressedEvent *key_block = (WimpKeyPressedEvent *)event;
  
  ERR_CHECK_RETURN(err,wimp_process_key(key_block->key_code));
  
  return 0;
}

/*
 * deal with clicks on the menus
 */
int
menu_selection(int event_code,ToolboxEvent *event,
    		       IdBlock *id_block, void *handle)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  char cmd[1024];

  if (id_block->self_id == menu_iconbar_id) {
  } else if (id_block->self_id == menu_option_id) {
    switch (id_block->self_component)
    {
      case OPTIONMENU_SAVE :
        write_defaults();      
        break; 
    }
  } else if (id_block->self_id == menu_view_id) {
    char build_name[BUILD_NAME_SIZE];
    char *b=NULL;
    
    if ((b=getenv(BUILD_ENV))==NULL) {
      ERR_CHECK_RETURN(err,msg_error_construct("env"));
    }
    strncpy(build_name,b,sizeof(build_name));
    
    switch (id_block->self_component)
    {
      case VIEWMENU_COMPONENTS :
        sprintf(cmd,"Filer_Run %s.%s.%s",BUILDSYS_DIR,
        	COMPONENTS_DIR,build_name);
        reg.r[0] = (int)cmd;
        ERR_CHECK_RETURN(err,_kernel_swi(OS_CLI,&reg,&reg));
        break;
      case VIEWMENU_DATABASE :
        sprintf(cmd,"Filer_Run %s.%s",BUILDSYS_DIR,MODULEDB);
        reg.r[0] = (int)cmd;
        ERR_CHECK_RETURN(err,_kernel_swi(OS_CLI,&reg,&reg));      
        break;
    }
  }

  return (0);
}

/*
 * main initialisation
 */
int main()
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int toolbox_events = 0;
  int wimp_messages  = 0;
  int event_code;
  int quiting=FALSE;
  
  debug db_file_init(FILE_DEBUG);

  read_builds();
  read_defaults();

  ERR_GOTO(err,msg_open_messages(FILENAME_MESSAGES));

  event_initialise(&id_block);          /* initialise the event library. */
  event_set_mask(Wimp_Poll_NullMask); 	/* mask out un-required wimp events */

  ERR_GOTO(err,event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,
      attach_other_handlers,NULL));

  /* register ourselves with the Toolbox. */
  ERR_GOTO(err,toolbox_initialise(0, WimpVersion, &wimp_messages,
      &toolbox_events,APP_DIR,&messages,&id_block,0,0,0));

  /* Message handlers */
  ERR_GOTO(err,event_register_message_handler(Wimp_MQuit,
             message_quit,NULL));
  ERR_GOTO(err,event_register_message_handler(Wimp_MPreQuit,
             message_quit,NULL));
  ERR_GOTO(err,event_register_message_handler(Wimp_MDataLoad,
             message_data_open,NULL));

  /* Event handler */
  ERR_GOTO(err,event_register_wimp_handler(-1,Wimp_EKeyPressed,
  	     key_pressed,NULL));

  /* Menu event handlers */
  ERR_GOTO(err,event_register_toolbox_handler(-1,MENU_EVENT_QUIT,
             event_quit,NULL));
  ERR_GOTO(err,event_register_toolbox_handler(-1,Menu_Selection,
             menu_selection,NULL));

  /* Window event handlers */
  ERR_GOTO(err,event_register_toolbox_handler(-1,ProgInfo_AboutToBeShown,
      proginfo_show,NULL));
  ERR_GOTO(err,event_register_toolbox_handler(-1,Window_AboutToBeShown,
      window_show,NULL));

  /* Gadget event handlers */
  ERR_GOTO(err,event_register_toolbox_handler(-1,StringSet_AboutToBeShown,
      stringset_show,NULL));
  ERR_GOTO(err,event_register_toolbox_handler(-1,StringSet_ValueChanged,
      stringset_changed,NULL));
  ERR_GOTO(err,event_register_toolbox_handler(-1,ActionButton_Selected,
      action_click,NULL));
  ERR_GOTO(err,event_register_toolbox_handler(-1,Iconbar_Clicked,
      iconbar_click,NULL));

  toolbox_get_sys_info(3,&reg);  /* Obtain wimp task handle */
  task_handle = reg.r[0];

  _kernel_swi(OS_GetEnv,&reg,&reg);
  if (strstr((char*)reg.r[0],"-quit")) {
    quiting = TRUE;
  }

  ERR_GOTO(err,env_source());
  
  if (!quiting) {
    /* poll loop */
    while (TRUE) {
      event_poll (&event_code, &poll_block, 0);
    }
  }

exit_gracefully:
  if (err != NULL) {
    wimp_report_error(err,0,0);
  }

  return (0);
}
