/************************************************************************/
/* 			Copyright 1996 Online Media			*/
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Online Media. It may not be reproduced, used,	*/
/*  sold, or transferred to any third party without the prior written	*/
/*  consent of Online Media. All rights reserved.			*/
/*									*/
/************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"

#define MSG_SIZE 300

static char msg[MSG_SIZE];   /* String to hold translated message */
static int desc[5];      /* Message file descriptor */

static char *messages=NULL;

/*
 * msg_open_messages
 *
 * This function obtains the size of the message file, and allocates a block of
 * memory for it. The message file is then opened to initialise the file
 * descripter array. The file is then closed.
 */
_kernel_oserror *msg_open_messages(char *filename)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  reg.r[1] = (int)filename;          /* Obtain buffer size required */
  ERR_RETURN(err,_kernel_swi(MessageTrans_FileInfo, &reg, &reg));

  messages = (char*)malloc(reg.r[2]);  /* Allocate memory for messages */
  if (messages != NULL)
  {
    reg.r[0] = (int)desc;         /* Load the messages file */
    reg.r[1] = (int)filename;
    reg.r[2] = (int)messages;
    ERR_RETURN(err,_kernel_swi(MessageTrans_OpenFile, &reg, &reg));

    reg.r[0] = (int)desc;         /* Close the messages file */
    ERR_RETURN(err,_kernel_swi(MessageTrans_CloseFile, &reg, &reg));
    desc[4] = 1;  	     	      /* Indicate opened state */
  }
  return NULL;
}

/*
 * msg_lookup
 *
 * To perform a GSTrans lookup of a message token, performing parameter
 * substitution.
 */
char* msg_lookup(char *token)
{
  _kernel_swi_regs reg;

  if (desc[4] > 0)  /* Check to see if messages have been loaded */
  {
    reg.r[0] = (int)desc;
    reg.r[1] = (int)token;
    reg.r[2] = (int)msg;
    reg.r[3] = MSG_SIZE;
    reg.r[4] = 0;  /* Parameter substitution %0 */
    reg.r[5] = 0;  /* %1 */
    reg.r[6] = 0;  /* %2 */
    reg.r[7] = 0;  /* %3 */
    _kernel_swi(MessageTrans_GSLookup, &reg, &reg);
    return msg;
  }

  return token;
}

/*
 * msg_error_construct
 *
 * construct an error block from a given error token using the messages file
 */
_kernel_oserror *msg_error_construct(char *token)
{
  static _kernel_oserror err_block;

  strcpy(err_block.errmess, msg_lookup(token));
  err_block.errnum = 0;

  return &err_block;
}
