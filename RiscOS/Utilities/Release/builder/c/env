/************************************************************************/
/* 			Copyright 1996 Online Media			*/
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Online Media. It may not be reproduced, used,	*/
/*  sold, or transferred to any third party without the prior written	*/
/*  consent of Online Media. All rights reserved.			*/
/*									*/
/************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "gadgets.h"

#include "constants.h"

extern char build_name[];

/* 
 * Enumerate the env directory and present files as options in the stringset.
 * Set the current value depending on the value of the Build environment
 * variable.
 */
_kernel_oserror *
env_populate(char *path, int window, int gadget)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char buffer[96];
  char strings_available[1024];
  char *filename;
  char *b=NULL;
  
  strcpy(strings_available,"");
  
  reg.r[0] = 10;
  reg.r[1] = (int)path;
  reg.r[2] = (int)buffer;
  reg.r[3] = 1;
  reg.r[4] = 0;
  reg.r[5] = sizeof(buffer);
  reg.r[6] = NULL;
  do
  {
    ERR_RETURN(err,_kernel_swi(OS_GBPB,&reg,&reg));
    if (reg.r[4] != -1)
    {
      filename = buffer+20;
      if (strlen(strings_available)+strlen(filename)+1<
         		sizeof(strings_available))
      {      
        if (strlen(strings_available)>0)	/* more than one, add , */ 
          strcat(strings_available,",");
        strcat(strings_available,filename);
      }
    }
  } while (reg.r[4] != -1);
  
  ERR_RETURN(err,stringset_set_available(0,window,gadget,strings_available));
  if ((b=getenv(BUILD_ENV))!=NULL)
  {
    strcpy(build_name,b);
    if (strstr(strings_available,build_name)!=NULL)
    {
      ERR_RETURN(err,stringset_set_selected(0,window,gadget,build_name));
    }
  }
  else
  {
    strcpy(build_name,"");
    ERR_RETURN(err,stringset_set_selected(0,window,gadget,build_name));
  }
  return (NULL);
}

_kernel_oserror *
env_source(char *path, int window, int gadget)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  int i;
  char cmd[BUILD_NAME_SIZE];
  
  ERR_RETURN(err,stringset_get_selected(0,window,gadget,build_name,
  	BUILD_NAME_SIZE,&i));
  sprintf(cmd,"%s.%s",ENV_DIR,build_name);

  reg.r[0] = (int)cmd;
  ERR_RETURN(err,_kernel_swi(Wimp_StartTask,&reg,&reg));
  
  return (NULL);
}
