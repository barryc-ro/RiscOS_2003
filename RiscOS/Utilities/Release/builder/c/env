/************************************************************************/
/* 			Copyright 1996 Online Media			*/
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Online Media. It may not be reproduced, used,	*/
/*  sold, or transferred to any third party without the prior written	*/
/*  consent of Online Media. All rights reserved.			*/
/*									*/
/************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "gadgets.h"

#include "env.h"
#include "constants.h"

extern char *build_tree;
extern char *default_env;

/*
 * Enumerate the env directory and present files as options in the stringset.
 * Set the current value depending on the value of the Build environment
 * variable.
 */
_kernel_oserror *
env_populate(int window, int gadget, char *default_env)
{
  _kernel_oserror *err=NULL;
  char directory[BUFFER_SIZE];
  char subdirectory[BUFFER_SIZE];
  char strings_available[BUFFER_SIZE];

  sprintf(directory,"%s.%s",build_tree,ENV_DIR);
  strcpy(strings_available,"");
  strcpy(subdirectory,"");

  ERR_RETURN(err,env_recurse(directory,subdirectory,strings_available,window,gadget,default_env));

  ERR_RETURN(err,stringset_set_available(0,window,gadget,strings_available));
  if (default_env) {
    if (strstr(strings_available,default_env)!=NULL) {
      ERR_RETURN(err,stringset_set_selected(0,window,gadget,default_env));
    }
  } else {
    ERR_RETURN(err,stringset_set_selected(0,window,gadget,""));
  }
  return (NULL);
}

/*
 *
 *
 *
 *
 */
_kernel_oserror *
env_recurse(char *directory,
            char *subdirectory,
            char *strings_available,
            int window,
            int gadget,
            char *default_env)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char buffer[96];
  char *filename;
  int  dir_length;
  int  path_length;

  reg.r[0] = 10;
  reg.r[1] = (int)directory;
  reg.r[2] = (int)buffer;
  reg.r[3] = 1;
  reg.r[4] = 0;
  reg.r[5] = sizeof(buffer);
  reg.r[6] = NULL;
  do {
    ERR_RETURN(err,_kernel_swi(OS_GBPB,&reg,&reg));
    if (reg.r[3] > 0) /* If we read any items */
    {
      filename = buffer+20;
      if ((*(int *)(buffer + 16) & 2) != 0) /* Recurse into directories */
      {
        dir_length  = strlen(directory);
        path_length = strlen(subdirectory);
        strcat(directory, ".");
        strcat(directory, filename);
        if (strlen(subdirectory) != 0) strcat(subdirectory, ".");
        strcat(subdirectory, filename);

        ERR_RETURN(err,env_recurse(directory,subdirectory,strings_available,window,gadget,default_env));

        directory[dir_length]     = '\0';
        subdirectory[path_length] = '\0';
      }
      else
      {
        if ((*(int *)(buffer + 0) & 0x000FFF00) == 0x000FEB00) /* Skip non-Obey files */
        if (strcmp(filename, "!Common") != 0)                  /* Skip the !Common files */
        {
          char item[BUFFER_SIZE];

          /* Nested env files are prefixed by their parent directory name(s) in the menu listing */
          if (strlen(subdirectory) == 0)
          {
            strcpy(item,filename);
          }
          else
          {
            sprintf(item,"%s.%s",subdirectory,filename);
          }

          /* If we have room in our structure, add this item to our menu */
          if (strlen(strings_available)+strlen(item)+1<BUFFER_SIZE)
          {
            if (strlen(strings_available)>0)     /* more than one, add , */
            {
              strcat(strings_available,",");
            }
            strcat(strings_available,item);
          }

        }
      }
    }
  } while (reg.r[4] != -1);

  return (NULL);
}

_kernel_oserror *
env_source(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char cmd[BUFFER_SIZE];

  if (!default_env) {
    return (NULL);
  }

  sprintf(cmd,"%s.%s.%s",build_tree,ENV_DIR,default_env);

  reg.r[0] = (int)cmd;
  ERR_RETURN(err,_kernel_swi(Wimp_StartTask,&reg,&reg));

  return (NULL);
}
