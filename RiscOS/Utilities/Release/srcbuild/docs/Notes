
$Id$


srcbuild
========

This document is separated into a few sections - you will need to read ALL
of them if you are going to tamper with this application in any way.

* Portability

* Sub-processes, Execution Environment and Environment Variables

* Territories



Portability
===========

srcbuild has been made portable by abstracting all the OS-dependent work into
one file (riscos.c).  This file is switched on the pre-processor definition
RISCOS which should be set for RISC OS builds, cleared for UNIX builds.

All the routines that are in riscos.c (with the exception of the log file
management routines) are prefixed sb_ (an abbreviation for srcbuild).  This
includes routines such as sb_chdir (change working directory).  The
implementation is switched on the RISCOS macro.

Filenames must be constructed using sb_buildfilename.  This function is a
variadic function which takes an arbitrary number of strings as parameters
which are deemed to be components of filenames.  Usually they will be single
components (e.g. "Install") but they may be multi-level components (e.g.
"BuildSys/Logs") although such components should have been constructed using
sb_buildfilename earlier.  sb_buildfilename will ensure that the correct
directory separator is used in the pathnames.  The list of components MUST be
terminated by a NULL parameter (NOT a null string).  This can be easy to
forget and causes crashes if not done.

Similarly, _check_dir_v is a variadic function that will ensure that a
complete directory hierarchy exists.  It accumulates components *relative to
build_dir*, calling sb_mkdir() on the result as each component is added. 
Multi-level components may be present in the parameter list and are resplit
during accumulation to avoid difficulties.  The list is NULL terminated as
for sb_buildfilename.



Sub-processes, Execution Environment and Environment Variables
==============================================================

Sub-processes are kicked off with a call to sb_system.  As the name implies,
this simply calls the system() function under RISC OS.  However, because of
the desire to capture child process to log files (achieved with *SPOOL under
RISC OS), under UNIX it is necessary to spawn a child task and set up its
file descriptors to redirect output to the log file directly.

Furthermore, UNIX does not feature a single global environment (environment
variables such as those used with *Set under RISC OS).  Thus the
implementations of sb_setenv and sb_getenv for UNIX construct a hash table of
environment variables to which it refers.  sb_getenv will call getenv() to
find the value of a variable in the srcbuild process's environment and store
it in the hash table the first time it is accessed.  When srcbuild needs to
execute a sub-command (ie. system()), it forks a new child process and
constructs the argument list and environment list in a form suitable for
calling the execve system call and launches the program via execve.

Since the child process executes in an environment with the settings stored
in the hash table at the time at which srcbuild forked, srcbuild could
continue executing other commands in parallel until it needs the results of a
sub-command.  Anything calling sb_system (usually via amu_machinef) that
needs to guarantee that the command it just executed has completed, MUST call
sb_system_sync() to ensure that it has.  sb_system does not currently take
advantage of parallelisation.



Territories
===========

Under RISC OS, the International module on the build machine is used to
translate between territory numbers and names.  Obviously this cannot be done
on UNIX platforms - in fact, it causes problems on RISC OS build machines as
the build machine often needs to softload the latest International module so
that it has all the recently added territory information anyway.

To solve this, srcbuild will construct two sets of environment variables
which contain the information.  These are of the form TerritoryName$<number>
and TerritoryNumber$<name> and cover all the known territories as of
International version 1.60.  Thus this will include variables such as:

 TerritoryName$1          has value   UK
 TerritoryNumber$UK       has value   1
 TerritoryName$6          has value   France
 TerritoryNumber$France   has value   6

etc.  The set of territories known to International 1.60 is built into the
source code of srcbuild.  If you want to update it, run the BASIC program
(docs.MkDefaults) on a RISC OS machine with a later International module
loaded and patch the source code it generates into riscos.c.  However, an
easier way of adding information about a new territory is to alter the
LocaleList setting in the product's environment file.  Each locale may be
prefixed or suffixed with a numeric identity.  e.g.

Set LocaleList UK=1,98=Venezuela,Chile=99

srcbuild will insert these into the environment in addition to the built in
settings.



==END==
