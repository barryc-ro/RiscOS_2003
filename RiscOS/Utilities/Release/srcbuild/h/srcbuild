/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __srcbuild_h
#define __srcbuild_h

#include <stdarg.h>
#include <stdbool.h>
#include "VersionNum"

#define APP_VERSION Module_MajorVersion " (" Module_Date ") " Module_MinorVersion

#define ENV_BUILD_DIR   "Build$Dir"	/* directory containing build */
#define ENV_BUILD_NAME  "Build"		/* name of build */
#define ENV_IMAGE_SIZE  "ImageSize"	/* size of image to be created */
#define BUILDSYS_DIR    "BuildSys"	/* directory off build root */
#define SHADOW_DIR      "Shadow" 	/* srcbuild state information */
#define LOGS_DIR        "Logs"		/* log info */
#define SOURCE_DIR      "Sources" 	/* directory containing sources */
#define INSTALL_DIR     "Install"	/* directory for built modules */
#define IMAGES_DIR      "Images"		/* directory for final images */
#define COMPONENTS_DIR  "Components"	/* directory for component files */
#define MODULE_DB_FILE  "ModuleDB"	/* name of module database file */
#define ENV_LOCALE_LIST "LocaleList"    /* name of env var holding the comma-seperated list of lcoales */
#define ENV_NUM_LOCALE  "Build$LocaleListNumeric" /* A numeric variant of the locale list. */
#define ENV_LOCALE      "Locale"        /* The single locale as defined inthe env file. */

#define BUFFER_LEN	1024	/* used for reading in strings */

/*
 * Neils funky double macro thing
 */
#define ENUM_ENTRY(y) y
#define ARRAY_ENTRY(y) #y
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(HAL),x(DATA),x(UNDEF)

typedef enum {ALL_MODULE_TYPES(ENUM_ENTRY)} module_type_t;

typedef struct s_module_entry {
  char *name;
  char *path;
  char *output;
  char *filename;
  module_type_t type;
  char *switch_on;
  struct s_module_entry *next;
} module_entry_t;

typedef struct s_component_entry {
  char *name;
  char *options;
  char *switch_on;
  char *install;
  bool no_component_sources; /* If set then does not perform a ROM phase, even if ROM phase called. */
  bool install_after_rom;    /* If set then it does an install phase after the ROM phase */
  int  force_clean;
  module_type_t type;
  unsigned long int  position;
  int  size;
  struct s_component_entry *next;
  unsigned long int force_position;
} component_entry_t;

typedef struct s_error_entry {
  char *message;
  struct s_error_entry *next;
} error_entry_t;

typedef struct {
  char *product;
  char *descript;
  char *serial;
  char *status;
  char *manuf;
  char *part;
  char *date;
} podule_info_t;

typedef struct {
	int (*call)(void);
	char	*name;
	char	*help;
} action_t;

#define MAX_TERRITORIES 10
extern char* supported_territories[];
extern unsigned int num_of_territories;


#define TRUE  (1)
#define FALSE (0)

#define CHK_STR(x) (x==NULL?"(null)":x)
/*
 * prototypes
 */
int  read_component_database(char *filename);
void release_component(component_entry_t *entry);
void error(int fatal, char *format, ...);
void banner(char c);

module_entry_t *lookup_module(char *name);
component_entry_t *lookup_component(char *name);


#define DEBUG 1

/*
  For the Bethany project (and later) we are altering the order in which resources get stored within the messages module.
  Previously, it was held in the order Resources.<territory>.<Build>. Due to the requirement for multiple territories, this is now going to be represented as Resources.<build>.<numeric locale list>.<territory>
  These macros can be used to defined either the old or the new behaviour.
*/
#define RESDIR "<Build>.<Build$LocaleListNumeric>.%s"
#define RESBASEDIR "<Build>"

#endif
