/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __srcbuild_h
#define __srcbuild_h

#include <stdarg.h>

#define BUILD_DIR  "Build$Dir"		/* directory containing build */
#define BUILD_NAME "Build"		/* name of build */
#define BUILD_SYS  "BuildSys"		/* directory off build root */
#define SHADOW_DIR BUILD_SYS ".Shadow" 	/* srcbuild state information */
#define LOGS_DIR   BUILD_SYS ".Logs"	/* log info */
#define SOURCE_DIR "Src$Dir"		/* directory containing sources */
#define MODULE_DB  "ModuleDB"		/* name of module database file */
#define IMAGE_SIZE "ImageSize"		/* size of image to be created */

#define BUFFER_LEN	1024	/* used for reading in strings */

/* 
 * Neils funky double macro thing 
 */
#define ENUM_ENTRY(y) y
#define ARRAY_ENTRY(y) #y
#define ALL_MODULE_TYPES(x)  x(RES), x(ASM), x(C), x(EXP), x(BAS), x(UNDEF)

typedef enum {ALL_MODULE_TYPES(ENUM_ENTRY)} module_type_t;

typedef struct s_module_entry {
  char *name;
  char *path;
  char *output;
  char *filename;
  module_type_t type;
  char *switch_on;
  struct s_module_entry *next;
} module_entry_t;

typedef struct s_component_entry {
  char *name;
  char *options;
  char *switch_on;
  int  force_clean;
  module_type_t type;
  struct s_component_entry *next;
} component_entry_t;

typedef struct s_error_entry {
  char *message;
  struct s_error_entry *next;
} error_entry_t;

typedef struct {
  char *product;
  char *descript;
  char *serial;
  char *status;
  char *manuf;
  char *part;
  char *date;
} podule_info_t;

typedef struct {
	int (*call)(void);
	char	*name;
	char	*help;
} action_t;

#define TRUE  (1)
#define FALSE (0)

#define CHK_STR(x) (x==NULL?"(null)":x)
/* 
 * prototypes
 */
int  read_component_database(char *filename);
void release_component(component_entry_t *entry);
void error(int fatal, char *format, ...);
void banner(char c);

module_entry_t *lookup_module(char *name);
component_entry_t *lookup_component(char *name);

#endif
