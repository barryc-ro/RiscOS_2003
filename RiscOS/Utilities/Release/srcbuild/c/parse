/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "srcbuild.h"
#include "riscos.h"

/* Function to compare two strings case insensitively
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
int cstrcmp(const char *first, const char *second)
{
  for (;;) {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b) {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}



/*
 * identify newline in string and replace with 0
 */
void
chop_newline(char *str)
{
  str[strcspn(str, "\n")] = '\0';
}

/*
 * return string in a malloced block, leave pointing at next character
 * trashes the string in the process
 */
char *extract_word(char *str, char **word, int env_var)
{
  int len = 0;
  char *cp;
  char *var = NULL;
  int end_of_string = FALSE;

  if (*word)
    free(*word);
  *word = NULL;

  if (str == NULL) {
    /* Trap special case */
    return str;
  }

  while (*str && isspace(*str)) ++str; /* skip whitespace */

  cp = str;
  for (cp = str; *cp && !isspace(*cp); ++cp) {
    len++;
  }

  if (*cp == 0)
    end_of_string = TRUE;
  else
    *cp = 0;

  if (strlen(str) != 0) {
    if (env_var && ((var = sb_getenv(str)) != NULL)) { /* an extant environment variable! */
      *word = sb_strdup(var);
    }
    else {
      *word = sb_strdup(str);
    }
  }
  return (end_of_string == FALSE) ? (str + len + 1) : NULL;
}


/* Determine if a string is a number, and if so, return it in *val and return 1.
 * Otherwise if it is not a number, return 0.
 */
static int parse_is_digits(const char *s, unsigned long *val)
{
  char *e;
  *val = strtoul(s, &e, 0);
  return (*e == '\0');
}

/* Parse a single territory entry.  We allow a territory name ("UK") or an assignment
 * expression of form either "1=UK" or "UK=1", indicating that UK territory is territory
 * number 1.  Enter TerritoryName$1 and TerritoryNumber$UK into the environment.
 *
 * Also used by sb_init to prime the environment with the known territory list.
 */
char *parse_territory_entry(char *territory)
{
  char *sep;
  char *number;
  char varname[sizeof(TERR_NAME_PFX TERR_NUM_PFX "LongCountryName")];

  sep = strchr(territory, '=');
  if (sep) {
    unsigned long terr_num;

    *sep++ = '\0';
    if (parse_is_digits(territory, &terr_num)) {
      number = territory;
      territory = sep;
    }
    else if (parse_is_digits(sep, &terr_num)) {
      number = sep;
    }
    else {
      error(1, "Badly formed territory declaration: %s=%s", territory, sep);
    }

    sprintf(varname, "%s%ld", TERR_NAME_PFX, terr_num);
    sb_setenv(varname, territory);
    sprintf(varname, "%s%s", TERR_NUM_PFX, territory);
    sb_setenv(varname, number);
  }

  return territory;
}


/* This routine parses any territory line passed in and strips out
   If the line is invalid, it returns false, otherwise it returns true.
   A line is considered invalid if it is empty or contains whitespace.
*/
bool parse_territories(char* territory_line)
{
  char *territory = NULL;

  sb_printf("Parsing territory line %s\n", territory_line);

  if (strlen(territory_line) < 1)
  {
    /* Line must contain something */
    return (false);
  }

  territory = strtok(territory_line, ",");
  while (territory)
  {
    territory = parse_territory_entry(territory);
    sb_printf ("territory is %s\n", territory);
    supported_territories[num_of_territories++] = sb_strdup(territory);
    territory = strtok (NULL, ",");
    if (num_of_territories == MAX_TERRITORIES) {
      error(1, "Too many territories (maximum is %d)", MAX_TERRITORIES);
    }
  }

  sb_printf ("%d territor%s detected in the territories list.\n", num_of_territories, num_of_territories==1?"y":"ies");

  return (true);
}
