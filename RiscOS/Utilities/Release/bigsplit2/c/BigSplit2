#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "VersionNum"

/* Size of input lines.  Is this infinite enough? :-) */
#define MAXLINELEN 256
/* Where to patch the image */
#define IMAGESIZE_OFFSET 0x60
/* The default signature ("NCOS") */
#define SIGNATURE 0x534f434e
/* A fundamental constant of the CRC algorithm */
#define CRC_MAGIC 0xA001
/* I don't think you'll want to change this one */
#define CRC_TABLE_SIZE (1<<8)

#ifdef __riscos
typedef unsigned int uint32;
typedef unsigned int uint16;  /* Waste space, but a speed gain */
#else
#error Need to check types
#endif

char *progname="(BigSplit)";
/* CRC table to speed up CRC calculation */
static uint16 crc_table[CRC_TABLE_SIZE];

/* Keep a linked list of modules to mirror the real rom.  We keep a pointer
 * to the next module instead of the offset to the next module, though.  We
 * just store the module names.
 */
struct module {
  struct module *next;
  char *name;
};

/* Global info on where we are in the ROM, what the current checksum is,
 * etc. */
struct file_info {
  FILE *fi_f;
  uint32 fi_pos;	/* Position in ROM */
  uint32 fi_checksum;	/* Negative checksum */
  uint32 fi_imagesize;	/* Total image size */
  uint16 fi_crc16;	/* 16 bit crc */
  uint16 fi_crc[4];	/* 64 bit crc */
};

static int settype(char *file, int type) {
#ifdef __riscos
  char *cmd;
  cmd=malloc(strlen(file)+sizeof("settype  fff"));
  sprintf(cmd,"settype %s %.3x",file,type);
  system(cmd);
  return 0;
#else
#error settype not implemented on this system.  (Suggest rename)
#endif
}

#ifdef __riscos
#define CREATEFILE_DEFINED
static void createfile(char *file, uint32 length) {
  char *buffer;
  buffer=malloc(strlen(file)+17);
  if(!buffer) {
    fprintf(stderr,"%s: malloc failed for createfile\n",progname);
    exit(1);
  };
  sprintf(buffer,"create %s %.8x",file,length);
  if(system(buffer)) {
    fprintf(stderr,"%s: create failed\n",progname);
    exit(1);
  };
  free(buffer);
}
#else
#error createfile not implemented on this system.
#endif

static void make_crc_table() {
  int i,j;
  uint16 crc;
  for(i=0;i<CRC_TABLE_SIZE;i++) {
    crc=i;
    for(j=0;j<8;j++)
      crc=(crc>>1)^(crc&1?CRC_MAGIC:0);
    crc_table[i]=crc;
  };
}

/************************************************************************
* Write a byte (c) to the output file, and update the CRCs, checksums   *
* etc. Needs local variables wb_crc and wb_indx.  NOTE: Updating crc16
* must come before updating crc64, as c may depend on crc64... */
#define WRITE_BYTE(c,finfo,wb_crc,wb_indx) do {				\
  if(fputc((c)&0xff,(finfo)->fi_f)==EOF) {				\
    fprintf(stderr,"%s: fputc: %s\n",progname, strerror(errno));	\
    exit(1);								\
  };									\
  (wb_indx)=(finfo)->fi_pos&3;						\
  (finfo)->fi_checksum-=((c)&0xff)<<((wb_indx)*8);			\
  /* Update crc16 */							\
  (wb_crc)=(finfo)->fi_crc16^((c)&0xff);				\
  (finfo)->fi_crc16=((wb_crc)>>8)^crc_table[(wb_crc)&0xff];		\
  /* Update crc64 */							\
  (wb_crc)=(finfo)->fi_crc[wb_indx]^((c)&0xff);				\
  (finfo)->fi_crc[wb_indx]=((wb_crc)>>8)^crc_table[(wb_crc)&0xff];	\
  /* Update position */							\
  (finfo)->fi_pos++;							\
} while(0)
/***********************************************************************/

/* Write a word aligned word to the output file in little-endian byte
 * order. */
static void put_word(struct file_info *finfo, uint32 word) {
  int i;
  int c;
  uint16 wb_crc, wb_indx;
  /* Pad to a word boundary */
  while(finfo->fi_pos&3) {
    WRITE_BYTE(0xff,finfo,wb_crc, wb_indx);
  };
  for(i=0;i<4;i++) {
    c=(word>>(8*i))&0xff;
    WRITE_BYTE(c,finfo,wb_crc,wb_indx);
  };
}

/* Write a module to the output file preceded by the length (if not the
 * kernel),
 */
static void add_module(struct file_info *finfo, char *mod, int kernel) {
  int c;
  int modsize;
  uint16 wb_crc,wb_indx;
  FILE *in;

  in=fopen(mod,"r");
  if(!in) {
    fprintf(stderr,"%s: fopen(%s): %s\n",progname, mod, strerror(errno));
    exit(1);
  };
  if(fseek(in,0,SEEK_END)) {
    fprintf(stderr,"%s: fseek(%s,SEEK_END): %s\n",progname, mod,
            strerror(errno));
    exit(1);
  }
  modsize=4+(int)ftell(in);
  if(!kernel)
    put_word(finfo,(modsize+3)&~3);
  rewind(in);
  printf("Adding module at 0x%.8x: %s\n",finfo->fi_pos,mod);
  while((c=fgetc(in))!=EOF) {
    if(kernel&&finfo->fi_pos>=modsize-8)
      break;
    if(finfo->fi_pos<IMAGESIZE_OFFSET+4&&finfo->fi_pos>=IMAGESIZE_OFFSET) {
      c=(finfo->fi_imagesize>>((finfo->fi_pos-IMAGESIZE_OFFSET)*8))&0xff;
#ifdef DEBUG
      printf("Patching %.8x with %.2x\n",finfo->fi_pos,c);
#endif
    };
    WRITE_BYTE(c,finfo,wb_crc,wb_indx);
  };
  if(ferror(in)) {
    fprintf(stderr,"%s: fgetc(%s): %s\n",progname, mod, strerror(errno));
    exit(1);
  };
  fclose(in);
}

static char *getline(FILE *f) {
  static char buf[MAXLINELEN];
  int len;
  char *p;

  p=fgets(buf,sizeof(buf),f);
  if(!p) return NULL;
  if(p=strchr(buf,'\n'),p)
    *p=0;
  p=malloc(len=1+strlen(buf));
  memcpy(p,buf,len);
  return p;
}

static void read_splitfile(char *forbigsplit, struct module **modptr,
                           char **image, uint32 *imagesize) {
  FILE *splitfile;
  char *name, *size, *extra;

  splitfile=fopen(forbigsplit,"r");
  if(!splitfile) {
    fprintf(stderr,"%s: fopen(%s): %s\n",progname,forbigsplit,
            strerror(errno));
    exit(1);
  };
  
  /* Read the header lines */
  if(!(name=getline(splitfile),name)) {
    printf("%s: Could not get mosfile\n",progname);
    exit(1);
  };
  if(!(*image=getline(splitfile),*image)) {
    printf("%s: Could not get image\n",progname);
    exit(1);
  };
  if(!(size=getline(splitfile),size)) {
    printf("%s: Could not get size\n",progname);
    exit(1);
  };
  *imagesize=(uint32)strtoul(size,NULL,0);
  if(!(extra=getline(splitfile),extra)) {
    printf("%s: Could not get extra\n",progname);
    exit(1);
  };

  /* name=mosfile */
  for(;;) {
    /* Add the last name */
    *modptr=malloc(sizeof(struct module));
    (*modptr)->name=name;
    modptr=&(*modptr)->next;
    /* Get the next one */
    name=getline(splitfile);
    if(!name||!name[0]) {
      if(name) free(name);
      *modptr=NULL;
      break;
    };
  };

  /* Done */
  fclose(splitfile);
}

static void write_modules(struct module *modlist, struct file_info *finfo,
                          int maxsize) {
  int kernel=1;
  struct module *tmp;

  while(modlist) {
    add_module(finfo,modlist->name,kernel);
    kernel=0;
    /* Check for overflow after every module */
    if(finfo->fi_pos>maxsize) {
      fprintf(stderr,"%s: ROM image overflowed by %d bytes in %s\n",progname,
      		finfo->fi_pos-maxsize,modlist->name);
      exit(1);
    };
    free(modlist->name);
    tmp=modlist;
    modlist=tmp->next;
    free(tmp);
  };
  put_word(finfo,0); /* End module chain */
}

static void usage() {
  fprintf(stderr,"BigSplit2 " Module_MajorVersion " (" Module_Date ") "
	 Module_MinorVersion "\n");
  fprintf(stderr,"Usage: bigsplit2 [options] <Splitfile>\n");
  fprintf(stderr,"  -sigstr <string>   Set signature to 4 byte string\n");
  fprintf(stderr,"  -signum <number>   Set signature to integer\n");
  fprintf(stderr,"  -nosig             Do not output signature\n");
  exit(1);
}

int main(int argc,char **argv) {
  struct module *modlist;
  struct file_info finfo[1]={{NULL,0,0,0,0,{0,0,0,0}}};
  char *image;
  uint32 signature=SIGNATURE;
  int needsig=1;
  int endblock;
  int i;
  int wb_crc,wb_indx;

  progname=argv[0];
  make_crc_table();
  while(1) {
    if(argc<2) usage(); /* Make sure argv[1] exists */
  
    if(!strcmp(argv[1],"-sigstr")) {
      if(argc<4) usage();
      if(strlen(argv[2])!=4) {
        fprintf(stderr,"%s: Need 4 character string for -sigstr\n",progname);
        exit(1);
      };
      signature=0;
      for(i=0;i<4;i++) {
        signature|=(argv[2][i])<<(8*i);
      };
      needsig=1;
      argc-=2;
      argv+=2;
      continue;
    };
    if(!strcmp(argv[1],"-signum")) {
      char *p;
      if(argc<4) usage();
      signature=(uint32)strtoul(argv[2],&p,0);
      if(*p||!argv[2][0]) {
        fprintf(stderr,"%s: -signum needs an integer\n",progname);
        exit(1);
      };
      needsig=1;
      argc-=2;
      argv+=2;
      continue;
    };
    if(!strcmp(argv[1],"-nosig")) {
      needsig=0;
      argc--;
      argv++;
    };
    break;
  };
  if(argc!=2)
    usage();

  endblock=12+(needsig?4:0);
#ifdef DEBUG
  printf("endblock=%x\n",endblock);
#endif

  read_splitfile(argv[1], &modlist, &image, &finfo->fi_imagesize);

#ifdef CREATEFILE_DEFINED
  createfile(image,finfo->fi_imagesize);
  finfo->fi_f=fopen(image,"r+");
#else
  finfo->fi_f=fopen(image,"w");
#endif
  if(finfo->fi_f==NULL) {
    fprintf(stderr,"%s: Could not open image file %s\n",progname,image);
    exit(1);
  };

  write_modules(modlist, finfo, finfo->fi_imagesize-endblock);

  if(finfo->fi_pos>finfo->fi_imagesize-endblock) {
    printf("ROM overflowed by %i bytes\n",
           finfo->fi_pos-(finfo->fi_imagesize-endblock));
    exit(1);
  };
  printf("ROM image has %.2fk unused\n",
         ((double)(finfo->fi_imagesize-endblock-finfo->fi_pos))/1024);
  printf("Padding with 0xff\n");
  while(finfo->fi_pos<finfo->fi_imagesize-endblock)
    put_word(finfo,0xffffffff); /* Pad with 0xff */
#ifdef DEBUG
  printf("pos=%x\n",finfo->fi_pos);
#endif
  if(needsig) {
    /* Write signature */
    put_word(finfo,signature);
  };
  /* Write checksum */
  put_word(finfo,finfo->fi_checksum);
  /* Write CRC (64 bit) */
  for(i=0;i<8;i++)
    WRITE_BYTE(finfo->fi_crc[finfo->fi_pos&3],finfo,wb_crc,wb_indx);
  /* Done */
  if(fclose(finfo->fi_f)==-1) {
    printf("%s: Error closing image file: %s\n",progname,strerror(errno));
    exit(1);
  };

#ifdef DEBUG
  for(i=0;i<4;i++)
    printf("crc[%i]=%.4x\n",i,finfo->fi_crc[i]);
#endif
  settype(image, 0xfe5);
  printf("crc16=%.4x\n",finfo->fi_crc16); /* Value displayed by !Flash */
  return 0;
}
