/* 
 * File:     prog.c
 * Authors:  Jonathan Harris, John Farrell
 *
 * Copyright 1999 Pace Micro Technology plc.  All rights reserved.
 *
 * This material is the confidential trade secret and proprietary information
 * of Pace Micro Technology plc. It may not be reproduced, used sold, or
 * transferred to any third party without the prior written consent of
 * Pace Micro Technology plc.
 *
 * Purpose: 
 *
 * This program generates Cyclic Redundancy Checks (CRCs) and Checksums of a
 * single file.
 *
 * These algorithms are useful for detecting data corruption when transferring 
 * a file through a medium that could possibly introduce errors, for example 
 * a network, floppy disk, CD-ROM etc.
 *
 * The particular application that this program is designed for is releasing
 * software (for example binary ROM images) to customers and manufacturing 
 * sites and for archiving such releases in the Drawing Office.  One of its
 * goals, therefore, is to be compatible with a variety of industry-standard 
 * algorithms such as those used by EPROM programmers to verify that devices
 * have been correctly programmmed with the intended images.
 *
 * The following algorithms are supported:
 *
 *   CRC-32	A standard CRC algorithm using the generator polynomial
 *		(x^32 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11 + x^10 +
 *		 x^8 + x^7 + x^5 + x^4 + x^2 + x^1 + 1) with pre- and post-
 *		conditions of -1.
 *
 *		This is a standard algorithm defined in ITU-T V.42 and
 *		reportedly used by Ethernet, FDDI, PKZip and PNG (RFC2083).
 *
 *   CRC-16 	A standard CRC algorithm using the generator polynomial 
 *		(x^16 + x^15 + x^2 + 1) with pre- and post-conditions of 0.
 *
 *		This is an older and weaker algorithm than CRC-32.  It
 *		is used by the RISCOS SWI OS_CRC.  
 *
 *   BYTESUM-32	A simple 32-bit checksum calculated by summing the data
 *		bytes mod 2^32.
 *
 *		This is the algorithm used by the DATA I/O programmer in
 *		the Pace Cambridge hardware lab.
 *
 *   BYTESUM-16 A simple 16-bit checksum calculated by summing the data
 *		bytes mod 2^16.  It is just the bottom 16-bits of the 
 *		BYTESUM-32, but is reported separately for convenience.
 *
 *		This algorithm is often used in simple self-test software.
 *		
 *
 * For a detailed description of CRC algorithms, see the paper "A Painless
 * Guide to CRC Error Detection Algorithms" by Ross N. Williams, available at
 * ftp://ftp.rocksoft.com/clients/rocksoft/papers/crc_v3.txt and in the "doc"
 * directory of this programme.
 *
 * Sample CRC-32 code similar to that used in this program is contained in 
 * an appendix of RFC 2083.
 *
 * History:
 *
 * dd-mmm-1995 JHarris - Created. 
 * dd-mmm-1997 RBuckley - Imported to CVS from Spinner SrcFiler.
 * 10-Nov-1999 JFarrell - Extended to produce various other CRCs and checksums.
 */

#include "crc.h"

#define BUF_SIZ 8192


int main(int argc, char *argv[])
{
  FILE *fptr;
  U32 crc32, chk8=0, clen=0;
  U16 crc16;
  int read;
  U8 buf[BUF_SIZ];
  static char id[] = "CRC and checksum generator V2.00";
  
  if (argc!=2)
  {
    fprintf(stderr, "%s\n", id);
    fprintf(stderr, "Generates 16-bit and 32-bit CRCs and bytesums of a file.\n\n");
    fprintf(stderr, "Usage: %s <file>\n\n", argv[0]);
    exit(EXIT_FAILURE);
  }

  if ((fptr = fopen(argv[1], "rb")) == NULL)
  {
    fprintf(stderr, "Can't open %s\n", argv[1]);
    exit(EXIT_FAILURE);
  }

  make_tables();
  
  crc32 = 0xffffffff;   /* pre-condition for CRC-32 : bits all ones */
  crc16 = 0;		/* pre-condition for CRC-16 : zero */
  
  do
  {
    clen += (read = fread(buf, 1, BUF_SIZ, fptr));
    update_crc(buf, read, &crc32, &crc16, &chk8);
  } while (read == BUF_SIZ);

  crc32 ^= 0xffffffff;  /* post-condition for CRC-32 - one's complement */
  			/* post-condition for CRC-16 - none */

  printf("File:	      %s\n", argv[1]);
  printf("Size:       %d bytes\n", clen);
  printf("BYTESUM-16: %04x\n", chk8 & 0xffff);
  printf("BYTESUM-32: %08x\n", chk8);
  printf("CRC-16:     %04x\n", crc16);
  printf("CRC-32:     %08x\n", crc32);
  printf("\n");
  return EXIT_SUCCESS;
}
