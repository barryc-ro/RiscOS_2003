/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <time.h>

/* CLX headers */
#include "err.h"

/* Local header */
#include "memory.h"
#include "filereader.h"
#include "filewriter.h"
#include "romlinker.h"
#include "makeexprom.h"
#include "makeextrom.h"

/* Keep this structure in step with the arg_descriptors and the linker_characteristics! */
typedef struct {
  /* All members of this structure must be of type const char * */
  /* The mandatory arguments must be stored first */
  const char *format;
  const char *modulelist;
  /* The optional arguments must be stored second and the index of
   * the first optional argument inserted in the table of characteristics.
   */
  const char *size;
} args_structure;

/* This structure holds all the local state for a join job */
typedef struct {
  args_structure args;                      /* The CLI arguments */
  module_list *modules;                     /* The modules to go in the ROM */
  const char *image_filename;               /* Output image filename */
  unsigned long image_size;                 /* Size of the image */
  unsigned long extra_data_size;            /* Any extra data (e.g. ExtROM "header") */

  const char *product_code;                 /* data from srcbuild */
  const char *product_description;          /* data from srcbuild */
  const char *product_serial_number;        /* data from srcbuild */
  const char *product_status_bit;           /* data from srcbuild */
  const char *product_manufacturer;         /* data from srcbuild */
  const char *product_part_number;          /* data from srcbuild */
  const char *product_date;                 /* data from srcbuild */
  unsigned long product_code_id;            /* Numeric form of product_code */

  int module_count;                         /* Number of modules so far */
  unsigned long chunk_data_location;        /* Keeps a running count for the CD creation */

  char *module_cache_memory;                /* A dynamic block of memory holding a module */
  module_list *current;                     /* The last module to have been output */
  FILE *image;                              /* Output filehandle */
  unsigned long rom_position;               /* Where we are in the output ROM */
  unsigned long checksum;                   /* Only used for extension ROMs */
} makeexprom_state;

/* Return the makeexprom state structure */
static makeexprom_state *makeexprom_get_state(void)
{
  static makeexprom_state state;
  return &state;
}

static void makeexprom_init(void)
{
  makeexprom_state *const state = makeexprom_get_state();

  makeexprom_linker_characteristics.vals = &state->args.format;
  state->extra_data_size = 0ul;
  state->checksum = 0ul;
}

static void makeextrom_init(void)
{
  makeexprom_state *const state = makeexprom_get_state();

  makeextrom_linker_characteristics.vals = &state->args.format;
  state->extra_data_size = 16ul;
  state->checksum = 0ul;
}

/* Load in the module list file, taking into account our special headers */
static void makeexprom_read_module_list(makeexprom_state *state)
{
  FILE *f;
  char *image_size_string;

  f = fault_null(fopen(state->args.modulelist, "r"),
    "Unable to open module list file '%s'", state->args.modulelist);

  state->image_filename = readlinenonull(f);
  image_size_string = readlinenonull(f);

  state->product_code = readlinenonull(f);
  state->product_description = readlinenonull(f);
  state->product_serial_number = readlinenonull(f);
  state->product_status_bit = readlinenonull(f);
  state->product_manufacturer = readlinenonull(f);
  state->product_part_number = readlinenonull(f);
  state->product_date = readlinenonull(f);

  state->image_size = romlinker_strtoul(image_size_string, NULL, 0) * 1024UL;
  state->product_code_id = romlinker_strtoul(state->product_code, NULL, 0);

  romlinker_load_module_list(f, &state->modules);
  fclose(f);
}

static void makeexprom_write_byte(makeexprom_state *state, unsigned long c)
{
  int int_c = (int) (c & 0xFF);

  if (fputc(int_c, state->image) == EOF) {
    err_fail("fputc failed: %s", strerror(errno));
  }

  state->checksum += (c & 0xFFul) << (8ul * (state->rom_position++ & 3ul));
}

static void makeexprom_write_word(makeexprom_state *state, unsigned long word32)
{
  int i;

  while (state->rom_position & 3) {
    makeexprom_write_byte(state, 0xFF);
  }
  for (i = 0; i < 32; i += 8) {
    makeexprom_write_byte(state, (int) (word32 >> i));
  }
}

static void makeexprom_write_half_word(makeexprom_state *state, unsigned long word32)
{
  int i;

  for (i = 0; i < 16; i += 8) {
    makeexprom_write_byte(state, (int) (word32 >> i));
  }
}

static void makeexprom_write_three_bytes(makeexprom_state *state, unsigned long word32)
{
  int i;

  for (i = 0; i < 24; i += 8) {
    makeexprom_write_byte(state, (int) (word32 >> i));
  }
}

static void makeexprom_write_chunk_entry(makeexprom_state *state, chunk_entry_types t, unsigned long size, unsigned long location)
{
  makeexprom_write_byte(state, t);
  makeexprom_write_three_bytes(state, size);
  makeexprom_write_word(state, location);
}


/* Code for generating the string information in an expansion card.  If type is write_strings,
 * then it is assumed that the output image is ready to receive the strings.  If type is
 * count strings, then we just count how many bytes of ROM space would be required for the string
 * and update chunk_data_location appropriately, otherwise we write the chunk directory entry.
 * Nothing happens (and zero is returned) if the string would not be stored anyway because it is
 * an empty string.
 */
static int makeexprom_add_string(makeexprom_state *state, chunk_entry_types type, const char *s)
{
  if (*s) {
    switch (type) {
      case write_strings:
        while (*s) {
          makeexprom_write_byte(state, *s++);
        }
        makeexprom_write_byte(state, 0);
        break;
      default:
        makeexprom_write_chunk_entry(state, type, strlen(s) + 1ul, state->chunk_data_location);
        /*FALLTHROUGH*/
      case count_strings:
        state->chunk_data_location += strlen(s);
        ++state->chunk_data_location;
        break;
    }
    return 1;
  }
  else {
    return 0; /* This string does not go in the image */
  }
}

static module_list *makeexprom_start(void)
{
  makeexprom_state *const state = makeexprom_get_state();
  module_list *module;
  unsigned long largest_module = 0UL;
  int chunk_total = 0;
  unsigned long chunk_directory_size;

  makeexprom_read_module_list(state);
  state->current = state->modules;
  state->module_count = 0;
  state->rom_position = 0;

  /* Set up some defaults */
  if (!*state->product_manufacturer) {
    state->product_manufacturer = Strdup("Pace");
  }

  if (!*state->product_date) {
    char datebuffer[16];
    time_t t = time(NULL);
    struct tm *ts = gmtime(&t);

    strftime(datebuffer, sizeof(datebuffer), "%x", ts);
    state->product_date = Strdup(datebuffer);
  }

  if (state->extra_data_size == 16ul) {
    if (state->product_code_id != 0x87) {
      err_report("Extension ROMs must have a product ID of &87 - correcting it");
    }
    state->product_code_id = 0x87;
  }

  state->image = filewriter_image_open(state->image_filename, state->image_size);

  makeexprom_write_byte(state, 0);       /* Flag that this is an extended ECId */
  makeexprom_write_byte(state, 3);       /* set CD and IS bits */
  makeexprom_write_byte(state, 0);       /* mandatory zero bytes - reserved for future use */
  makeexprom_write_half_word(state, state->product_code_id);
  makeexprom_write_half_word(state, 0);  /* Pace manufacturer ID */
  makeexprom_write_byte(state, 0);       /* Country code for the UK */
  makeexprom_write_word(state, 0);       /* Interrupt status pointers (word 0) */
  makeexprom_write_word(state, 0);       /* Interrupt status pointers (word 1) */

  /* Firstly, *JUST* count the number of chunks we need and data space required for strings */
  state->chunk_data_location = state->rom_position;
  chunk_total += makeexprom_add_string(state, count_strings, state->product_description);
  chunk_total += makeexprom_add_string(state, count_strings, state->product_serial_number);
  chunk_total += makeexprom_add_string(state, count_strings, state->product_status_bit);
  chunk_total += makeexprom_add_string(state, count_strings, state->product_manufacturer);
  chunk_total += makeexprom_add_string(state, count_strings, state->product_part_number);
  chunk_total += makeexprom_add_string(state, count_strings, state->product_date);

  state->chunk_data_location = (state->chunk_data_location + 3) & ~3;

  /* Now add the files that we are inserting */
  for (module = state->modules; module; module = module->next) {
    const unsigned long rounded_size = (module->size + 3) & ~3;
    state->chunk_data_location += rounded_size;
    ++chunk_total;
    if (rounded_size > largest_module) {
      largest_module = rounded_size;
    }
  }

  chunk_directory_size = 8ul * chunk_total + 4ul;
  state->chunk_data_location = state->rom_position + chunk_directory_size;

  if (state->chunk_data_location + state->extra_data_size > state->image_size) {
    err_fail("ROM image overflow (%li bytes)",
      state->chunk_data_location + state->extra_data_size - state->image_size);
  }

  /* Now we are OK - we can generate the chunk directory */
  state->chunk_data_location = state->rom_position + chunk_directory_size;

  (void) makeexprom_add_string(state, product_description, state->product_description);
  (void) makeexprom_add_string(state, serial_number, state->product_serial_number);
  (void) makeexprom_add_string(state, modification_status, state->product_status_bit);
  (void) makeexprom_add_string(state, manuf_location, state->product_manufacturer);
  (void) makeexprom_add_string(state, part_number, state->product_part_number);
  (void) makeexprom_add_string(state, manuf_date, state->product_date);

  state->chunk_data_location = (state->chunk_data_location + 3) & ~3;

  /* Now add the files that we are inserting */
  for (module = state->modules; module; module = module->next) {
    const unsigned long rounded_size = (module->size + 3) & ~3;

    module->fixed_position = state->chunk_data_location;
    makeexprom_write_chunk_entry(state, module->type, module->size, module->fixed_position);
    state->chunk_data_location += rounded_size;
  }

  makeexprom_write_word(state, 0); /* terminate the chunk directory */

  (void) makeexprom_add_string(state, write_strings, state->product_description);
  (void) makeexprom_add_string(state, write_strings, state->product_serial_number);
  (void) makeexprom_add_string(state, write_strings, state->product_status_bit);
  (void) makeexprom_add_string(state, write_strings, state->product_manufacturer);
  (void) makeexprom_add_string(state, write_strings, state->product_part_number);
  (void) makeexprom_add_string(state, write_strings, state->product_date);

  while (state->rom_position & 3) {
    makeexprom_write_byte(state, 0);
  }

  /* Ensure that the cache is large enough to hold the largest module */
  state->module_cache_memory = safe_alloc(largest_module);

  return state->current;
}

static module_list *makeexprom_add_next_module(void)
{
  makeexprom_state *const state = makeexprom_get_state();
  module_list *current = state->current;
  unsigned long rounded_size;
  char *cp, *ep;

  current->memory_cache = state->module_cache_memory;
  fault_null(filereader_load_file(current->filename, current->size, current->memory_cache),
    "Unable to load module '%s'", current->filename);

  if (state->rom_position != current->fixed_position) {
    err_fail("Internal error: Current and pre-calculated ROM positions differ");
  }

  rounded_size = (current->size + 3) & ~3;
  while (current->size < rounded_size) {
    current->memory_cache[current->size++] = 0xFF;
  }

  if (verbose) {
    err_report("Adding at 0x%#08lx: %s", state->rom_position, current->filename);
  }

  cp = current->memory_cache;
  ep = cp + rounded_size;

  while (cp < ep) {
    makeexprom_write_byte(state, *cp++);
  }

  ++state->module_count;

  current->memory_cache = NULL;
  state->current = state->current->next;
  return state->current;
}

static void makeexprom_finish(void)
{
  makeexprom_state *const state = makeexprom_get_state();
  signed long space;
  unsigned long checksum;

  space = state->image_size - state->rom_position - state->extra_data_size;

  romlinker_report_rom_summary(state->image_size, state->rom_position + state->extra_data_size);

  while (space--) {
    makeexprom_write_byte(state, 0xFF);
  }

  checksum = state->checksum;                            /* Don't include image size! */
  if (state->extra_data_size == 16ul) {
    /* Assume extension ROM */
    makeexprom_write_word(state, state->image_size);     /* Image size */
    makeexprom_write_word(state, checksum);              /* 32-bit checksum */
    makeexprom_write_byte(state, 'E');                   /* 64-bit signature */
    makeexprom_write_byte(state, 'x');
    makeexprom_write_byte(state, 't');
    makeexprom_write_byte(state, 'n');
    makeexprom_write_byte(state, 'R');
    makeexprom_write_byte(state, 'O');
    makeexprom_write_byte(state, 'M');
    makeexprom_write_byte(state, '0');
  }

  if (state->rom_position != state->image_size) {
    err_fail("Internal error: image length inconsistency");
  }

  if (fclose(state->image) == EOF) {
    err_fail("Unable to write/close image file: %s", strerror(errno));
  }

  filewriter_mark_as_rom_image(state->image_filename);

  err_report("checksum=%.8lx\n", checksum);
}

/* Keep this structure in step with struct args and the linker_characteristics! */
static const char *arg_descriptors[] = {
  "format",
  "modules",
  /* Now the optional parameters */
  "size",
  "sigstr",
  "signum",
  /* And the terminator */
  NULL
};

linker_characteristics makeexprom_linker_characteristics = {
  "exprom",
  "Expansion card ROM image construction",
  arg_descriptors,
  NULL,                                 /* Filled in by makeexprom_init() */
  2,                                    /* number of mandatory parameters */

  /* Finally, the linker method table */
  makeexprom_init,
  makeexprom_start,
  makeexprom_add_next_module,
  makeexprom_finish
};

linker_characteristics makeextrom_linker_characteristics = {
  "extrom",
  "Extension ROM image construction",
  arg_descriptors,
  NULL,                                 /* Filled in by makeexprom_init() */
  2,                                    /* number of mandatory parameters */

  /* Finally, the linker method table */
  makeextrom_init,
  makeexprom_start,
  makeexprom_add_next_module,
  makeexprom_finish
};
