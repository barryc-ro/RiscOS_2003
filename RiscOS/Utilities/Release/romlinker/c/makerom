/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <errno.h>

/* CLX headers */
#include "bytesex.h"
#include "err.h"

/* Local headers */
#include "memory.h"
#include "filereader.h"
#include "filewriter.h"
#include "romlinker.h"
#include "makerom.h"

/* Keep this structure in step with the arg_descriptors and the linker_characteristics! */
typedef struct {
  /* All members of this structure must be of type const char * */
  /* The mandatory arguments must be stored first */
  const char *format;
  const char *image_filename;
  const char *image_size;
  /* The optional arguments must be stored second and the index of
   * the first optional argument inserted in the table of characteristics.
   */
  const char *sigstr;
  const char *signumstr;
} args_structure;

/* Some useful constants */
enum {
  imagesize_offset = 0x60,                  /* Where to patch the image size in */
  default_signature = 0x534F434E,           /* "NCOS" (in host byte order!) */
  crc_magic = 0xA001,                       /* CRC algorithm magic number */
  crc_table_size = 1<<8                     /* Do not change this one */
};

/* This structure holds all the local state for a join job */
typedef struct {
  args_structure args;                      /* The CLI arguments */
  module_list *modules;                     /* The module to go in the ROM */
  const char *image_filename;               /* Output image filename */
  unsigned long image_size;                 /* Size of the image */
  const char *extra_information;            /* extra information */
  const char *sigstr;                       /* ROM signature */

  int have_hal;                             /* This image has a HAL */
  int module_count;                         /* Number of modules so far */
  int module_chain_terminated;              /* Non-zero if the chain is terminated */

  char *module_cache_memory;                /* A dynamic block of memory holding a module */
  module_list *current;                     /* The last module to have been output */
  FILE *image;                              /* Output filehandle */
  unsigned long rom_position;               /* Where we are in the output ROM */
  unsigned long neg_checksum;               /* The negative checksum */
  unsigned long total_image_size;           /* Cumulative total */
  unsigned long signature;                  /* For end block */
  unsigned long crc_16;                     /* 16-bit CRC */
  unsigned long crc_64[4];                  /* 64-bit CRC */
  unsigned long crc_table[crc_table_size];  /* Speeds up CRC calculation */
} makerom_state;

/* Return the makerom state structure */
static makerom_state *makerom_get_state(void)
{
  static makerom_state state;
  return &state;
}

static void makerom_init(void)
{
  makerom_linker_characteristics.vals = &(makerom_get_state()->args.format);
}

static void makerom_init_crc_table(makerom_state *state)
{
  int i, j;
  unsigned int crc;

  for (i=0; i<crc_table_size; ++i) {
    crc = i;
    for (j=0; j < 8; ++j) {
      const unsigned int eor = (crc & 1) ? crc_magic : 0;
      crc = (crc >> 1) ^ eor;
    }
    state->crc_table[i] = crc;
  }
}

/* Load in the module list file, taking into account our special headers */
static void makerom_read_module_list(makerom_state *state)
{
  const char *hal;
  module_list **list;

  /* This will be the kernel in images that have no HAL */
  hal = fault_null_const(find_next_arg(), "No modules in ROM!");

  state->have_hal = (memcmp(hal, "HAL:", 4) == 0);
  if (state->have_hal) {
    hal += 4;
  }

  list = module_add_to_list(&state->modules, hal, unassigned_position);
  romlinker_load_module_list(list);
}

static void makerom_write_byte(makerom_state *state, unsigned long c)
{
  unsigned long index, crc;
  int int_c = (int) (c & 0xFF);

  c &= 0xFF;

  if (fputc(int_c, state->image) == EOF) {
    err_fail("fputc failed: %s", strerror(errno));
  }

  index = (state->rom_position++ & 3);
  /* Update total checksum */
  state->neg_checksum -= c << (index * 8UL);
  /* Update 16-bit checksum */
  crc = state->crc_16 ^ c;
  state->crc_16 = (crc >> 8UL) ^ state->crc_table[crc & 0xFF];
  /* Update 64-bit checksum */
  crc = state->crc_64[index] ^ c;
  state->crc_64[index] = (crc >> 8UL) ^ state->crc_table[crc & 0xFF];
}

static void makerom_write_word(makerom_state *state, unsigned long word32)
{
  int i;

  while (state->rom_position & 3) {
    makerom_write_byte(state, 0xFF);
  }
  for (i = 0; i < 32; i += 8) {
    makerom_write_byte(state, (int) (word32 >> i));
  }
}

static module_list *makerom_start(void)
{
  makerom_state *const state = makerom_get_state();
  module_list *module;
  unsigned long largest_module = 0UL;
  unsigned long total_size = 0UL;

  makerom_init_crc_table(state);
  makerom_read_module_list(state);
  state->current = state->modules;
  state->module_count = 0;
  state->module_chain_terminated = 0;
  state->rom_position = 0;
  state->neg_checksum = 0;
  state->extra_information = NULL;

  if (state->args.sigstr) {
    int i;
    if (strlen(state->args.sigstr) != 4) {
      err_fail("Illegal signature '%s' - must be four characters long", state->args.sigstr);
    }
    state->signature = 0;
    for (i = 0; i < 4; ++i) {
      state->signature |= (unsigned long) ((state->args.sigstr[i] & 0xFF) << (i*8));
    }
  }
  else if (state->args.signumstr) {
    char *nextc;
    state->signature = romlinker_strtoul(state->args.signumstr, &nextc, 0);
    if (!state->args.signumstr[0] || *nextc != '\0') {
      err_fail("Illegal signature number '%s'", state->args.signumstr);
    }
  }
  else {
    state->signature = 0xFFFFFFFFul;
  }

  for (module = state->modules; module; module = module->next) {
    const unsigned long rounded_size = (module->size + 3) & ~3;
    total_size += rounded_size;
    if (rounded_size > largest_module) {
      largest_module = rounded_size;
    }
  }

  /* Ensure that the cache is large enough to hold the largest module */
  state->module_cache_memory = safe_alloc(largest_module);

  /* Size of the image (in bytes) */
  state->image_size = romlinker_strtoul(state->args.image_size, NULL, 0);

  /* Open the image file ready for writing ... (creating RAM cache if possible) */
  state->image = filewriter_image_open(state->args.image_filename, state->image_size);

  return state->current;
}

static module_list *makerom_add_next_module(void)
{
  makerom_state *const state = makerom_get_state();
  module_list *current = state->current;
  unsigned long rounded_size;
  char *cp, *ep, *patchstart;
  int hal = 0, kernel = (state->module_count == 0);
  unsigned long module_size;

  current->memory_cache = state->module_cache_memory;
  fault_null(filereader_load_file(current->filename, current->size, current->memory_cache),
    "Unable to load module '%s'", current->filename);

  if (current->fixed_position != unassigned_position) {
    if (state->module_count > 1 && !state->module_chain_terminated) {
      makerom_write_word(state, 0); /* terminate ROM chain */
      state->module_chain_terminated = 1;
    }
    else if (state->module_count == 1) {
      /* Fixed position second component?  Must be the kernel after a HAL */
      kernel = 1;
    }

    if (state->rom_position > current->fixed_position) {
      err_fail("Component %s overlaps previous data", current->filename);
    }

    while (state->rom_position < current->fixed_position) {
      /* Pad to module position */
      makerom_write_byte(state, 0xFF);
    }
  }

  if (state->have_hal) {
    switch (state->module_count) {
      case 0: kernel = 0; hal = 1; break;
      case 1: kernel = 1; break;
      default: break;
    }
  }

  module_size = current->size + 4;
  rounded_size = (module_size + 3) & ~3;

  if (!kernel && !hal && (current->fixed_position == unassigned_position)) {
    /* Write the link word */
    makerom_write_word(state, rounded_size);
  }

  if (verbose) {
    err_report("Adding at 0x%#08lx: %s", state->rom_position, current->filename);
  }

  cp = current->memory_cache;
  ep = cp + current->size;
  /* patchstart may fall outside the range cp,ep but this does not matter, since
   * the pointer will never compare equal with any value in the range cp,ep.
   */
  patchstart = cp + imagesize_offset - state->rom_position;

  if (kernel) {
    ep -= 4;
  }

  while (cp < ep) {
    if (cp == patchstart) {
      makerom_write_byte(state, state->image_size >>  0);
      makerom_write_byte(state, state->image_size >>  8);
      makerom_write_byte(state, state->image_size >> 16);
      makerom_write_byte(state, state->image_size >> 24);
      cp += 4;
    }
    else {
      makerom_write_byte(state, *cp++);
    }
  }

  ++state->module_count;

  if (state->rom_position > state->image_size) {
    err_fail("ROM image overflowed by %ld bytes in %s",
      state->image_size - state->rom_position, current->filename);
  }

  current->memory_cache = NULL;
  state->current = state->current->next;
  return state->current;
}

static void makerom_finish(void)
{
  makerom_state *const state = makerom_get_state();
  signed long space;
  const unsigned long footer_length = 20UL;
  int i;

  if (!state->module_chain_terminated) {
    makerom_write_word(state, 0);
  }

  romlinker_report_rom_summary(state->image_size, state->rom_position + footer_length);

  space = state->image_size - state->rom_position - footer_length;
  while (space--) {
    makerom_write_byte(state, 0xFF);
  }

  makerom_write_word(state, 0x0);                   /* Write POST zero word */
  makerom_write_word(state, state->signature);      /* ROM signature */
  makerom_write_word(state, state->neg_checksum);   /* 16-bit checksum */
  for (i = 0; i < 8; ++i) {                         /* 64-bit checksum */
    makerom_write_byte(state, state->crc_64[i & 3]);/* XXX - this looks wrong? */
  }

  if (fclose(state->image) == EOF) {
    err_fail("Unable to write/close image file: %s", strerror(errno));
  }

  filewriter_mark_as_rom_image(state->args.image_filename);

  err_report("crc16=%.4lx\n", state->crc_16);
}

/* Keep this structure in step with struct args and the linker_characteristics! */
static const char *arg_descriptors[] = {
  "format",
  "imagename",
  "imagesize",
  /* Now the optional parameters */
  "sigstr",
  "signum",
  /* And the terminator */
  NULL
};

linker_characteristics makerom_linker_characteristics = {
  "rom",
  "Standard ROM image construction",
  arg_descriptors,
  NULL,                                 /* Filled in by makerom_init() */
  3,                                    /* number of mandatory parameters */

  /* Finally, the linker method table */
  makerom_init,
  makerom_start,
  makerom_add_next_module,
  makerom_finish
};
