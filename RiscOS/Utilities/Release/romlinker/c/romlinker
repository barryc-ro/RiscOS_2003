/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

/* C library extension header files */
#include "prgname.h"
#include "err.h"
#include "hash.h"

/* Generic ROM linker header files */
#include "memory.h"
#include "romlinker.h"
#include "filereader.h"

/* ROM linker implementation header files */
#include "makerom.h"
#include "makeextrom.h"
#include "makeexprom.h"

#include "VersionNum"

/* Local data */

static char progname[32];
static HashTable arghash;
static const char **remaining_args;
static int args_alloc, args_count;

static linker_characteristics *linker;
static linker_characteristics *linkers[] = {
  &makeexprom_linker_characteristics,
  &makeextrom_linker_characteristics,
  &makerom_linker_characteristics
};

/* Public data constants */
const unsigned long unassigned_position = -1UL;
const unsigned long unknown_size = -1UL;
int verbose = 0;

/* Public functions */

void romlinker_report_rom_summary(unsigned long size, unsigned long total)
{
  if (total > size) {
    err_fail("Image has overflowed by %li bytes!", total - size);
  }
  else {
    char floatstring[12];
    size -= total;
    sprintf(floatstring, "%.2f", ((double) size) / 1024);
    err_report("Image has %li bytes spare (%sK)", size, floatstring);
  }
}

unsigned long romlinker_strtoul(const char *s, char **end, int base)
{
  if (*s == '&') {
    base = 16;
    ++s;
  }
  return strtoul(s, end, base);
}

const char *find_parameter(const char *key)
{
  HashId id;
  return hash_lookup(arghash, key, &id) ? hash_value(arghash, id) : NULL;
}

const char *find_mandatory_parameter(const char *key)
{
  const char *param = find_parameter(key);
  if (!param) err_fail("missing mandatory parameter: '-%s'", key);
  return param;
}

const char *find_next_arg(void)
{
  return *remaining_args ? *remaining_args++ : NULL;
}

static const char **extend_array(const char **array, int *entries, int used)
{
  if (used == *entries) {
    *entries += 32;
    if ((array = realloc(array, sizeof(const char *) * *entries)) == NULL) {
      err_fail("unable to extend array - out of memory");
    }
  }

  return array;
}

static int load_args(const char *filename, const char ***argv)
{
  FILE *f;
  const char **args = NULL;
  int num_args = 0, max_args = 0;
  char buffer[BUFSIZ];

  f = fopen(filename, "r");
  if (!f) {
    err_fail("unable to open parameter file '%s'", filename);
  }

  while (fgets(buffer, sizeof(buffer), f)) {
    buffer[strcspn(buffer, "\n")] = '\0';
    args = extend_array(args, &max_args, num_args);
    args[num_args++] = Strdup(buffer);
  }

  fclose(f);
  *argv = args;
  return num_args;
}

static void add_other_arg(const char *arg)
{
  remaining_args = extend_array(remaining_args, &args_alloc, args_count);
  remaining_args[args_count++] = arg;
}

static void init_args(int argc, const char **argv)
{
  int i;

  for (i=0; i<argc; ++i) {
    HashId id;

    if (*argv[i] != '-') {
      add_other_arg(argv[i]);
    }
    else if (!*argv[i]) {
      /* Blank arg (without a leading option) */
      continue;
    }
    else if (strcmp(argv[i], "-via") == 0) {
      int new_argc;
      const char **new_argv = NULL;

      new_argc = load_args(fault_null_const(argv[++i], "missing value for -via"), &new_argv);
      init_args(new_argc, new_argv);
    }
    else if (hash_enter(arghash, argv[i]+1, &id)) {
      if (!argv[i+1] || argv[i+1][0] == '-' || !argv[i+1]) {
        hash_assoc(arghash, id, "1");
      }
      else {
        hash_assoc(arghash, id, argv[++i]);
      }
    }
    else {
      err_fail("Duplicate option: '%s'", argv[i]);
    }
  }
}

/* Extract the options into the linker's private data structure */
static void load_linker_args(const linker_characteristics *linker)
{
  size_t mandatory_count = linker->mandatory_args;
  const char **keys;
  const char **vals;

  for (keys = linker->args, vals = linker->vals; *keys; ++keys, ++vals) {
    if (mandatory_count) {
      --mandatory_count;
      *vals = find_mandatory_parameter(*keys);
    }
    else {
      *vals = find_parameter(*keys);
    }
  }
}

module_list **module_add_to_list(module_list **list, const char *name, unsigned long position)
{
  module_list *entry;
  const size_t namelen = strlen(name) + 1;
  const size_t memlen = sizeof(**list) + namelen;

  entry = *list = safe_alloc(memlen);
  memcpy(entry + 1, name, namelen);
  entry->next = NULL;
  entry->filename = (void *) (entry + 1);
  entry->fixed_position = position;
  entry->size = filereader_filesize(entry->filename);
  entry->type = filereader_file_type(entry->filename);
  entry->memory_cache = NULL;

  if (entry->size == unknown_size) {
    err_fail("cannot read file '%s'", entry->filename);
  }

  if (verbose >= 2) {
    static int counter = 0;
    err_report("%4d %#.6lx %s", ++counter, entry->size, entry->filename);
  }

  return &entry->next;
}

size_t romlinker_load_module_list(module_list **list)
{
  size_t module_count = 0;
  const char *filename;
  unsigned long position = unassigned_position;

  while ((filename = find_next_arg()) != NULL) {
    if (isdigit(filename[0])) {
      char *end;
      position = romlinker_strtoul(filename, &end, 0);
      if (*end && !isspace(*end)) {
        err_fail("Bad module file format after %d module(s) added: %s",
          module_count, filename);
      }
    }
    else if (filename[0]) {
      list = module_add_to_list(list, filename, position);
      position = unassigned_position;
      ++module_count;
    }
  }

  return module_count;
}

int main(int argc, const char *argv[])
{
  const char *romtype;
  const char *debuglevel;
  int i;

  err_init(program_name((char *)argv[0], progname, sizeof(progname)));
  err_report("version %s", Module_HelpVersion);

  arghash = fault_null(hash_cinew(256), "Unable to construct argument table");
  init_args(argc - 1, argv + 1);
  add_other_arg(NULL);
  romtype = find_parameter("format");

  for (i = 0, linker = NULL; romtype && i<sizeof(linkers)/sizeof(*linkers); ++i) {
    if (strcmp(linkers[i]->formatname, romtype) == 0) {
      linker = linkers[i];
    }
  }

  if (!romtype || !linker) {
    err_report("%s -format option; valid values are:", romtype?"unrecognised":"missing");
    err_report("");
    for (i = 0; i<sizeof(linkers)/sizeof(*linkers); ++i) {
      err_report("    %-16s %s", linkers[i]->formatname, linkers[i]->description);
    }
    err_fail("");
  }

  debuglevel = find_parameter("v");
  if (debuglevel) verbose = (int) romlinker_strtoul(debuglevel, NULL, 0);

  err_report("%s", linker->description);
  linker->init();
  load_linker_args(linker);
  if (linker->start()) {
    while (linker->add()) ;;
  }
  linker->finish();

  return 0;
}
