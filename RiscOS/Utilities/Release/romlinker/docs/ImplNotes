
$Id$


romlinker
=========

These notes relate to the implementation of romlinker.  See Notes for notes
on usage.


Portability
===========

The source code for romlinker is fully portable, provided that a suitable
implementation of the CLX library is provided.

romlinker does not process any filenames or pathnames, except to read them
and pass them to C library and CLX functions as opaque strings.  romlinker
does not care whether pathnames are fully-qualified or relative.

romlinker does not launch any sub-programs.

romlinker does not care about the endianness of the host - the target is
assumed to be little-endian.


General Information
===================

The romlinker input file format is generic to each type of image that can be
constructed, so there is generic code in romlinker.c to parse the
command-line parameters.  For each image type that is supported, there is a
structure which describes the routines which will be perform the work.  One
linker_characteristics structure exists for each image type, and includes the
short name (matched against the -format parameter), the long name (for
identifying the image type in output messages), a list of parameter names and
pointers for holding the values of those parameters, an indication of which
parameters are mandatory and which are optional, and a table of functions
which initialise a linker, start the linking process, add a component to the
image, and finalise the image.

The generic code simply builds a hash table containing all the options and a
list of non-option parameters.  Functions are provided for looking up
parameters and for reading the non-option parameters sequentially.

The generic code will choose which linker is required by matching -format and
then decompose the rest of the options based on the linker_characteristics. 
This way, each linker implementation can allow the generic code to do all its
option parsing for it to reduce the work they need to do themselves.

The linker's init() method is invoked to allow it to set up any static data
pointers, then the parameters are parsed into the characteristics data
structure.  The start() method is called, followed by as many add() calls as
required, then the finish() method is called.


Generic Functions
=================

Many generic functions are made available to the linker implementations for
reading/writing entire files into memory, fail-safe memory allocation, output
file buffering, file parsing.

For example, the start() method is responsible for opening the image file for
output.  When it makes that call it must specify the output image size too,
and the filewriter routine attempts to allocate a write buffer for the file
to optimise write speeds.


Expansion ROM/Extension ROM
===========================

Since the format of these is virtually identical, the two linkers share
nearly all of their code - only the init() method is different.


==END==
