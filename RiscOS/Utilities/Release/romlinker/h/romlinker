/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#ifndef romlinker_h_included
#define romlinker_h_included

#include <stdio.h>

/* Expansion card/extension ROM chunk entry types.  These are stored in the module list
 * to assist with the building of these types of image.
 */

typedef enum {
  /* The first two entries are pseudo entries used to calculate space requirements in
   * makeexprom.c.
   */
  write_strings = -2,
  count_strings = -1,
  /* anything else is the type ID and indicates the chunk directory entry should be written */
  riscos_loader = 0x80,
  riscos_module = 0x81,
  bbcrom_image = 0x82,
  riscos_sprite = 0x83,
  unix_loader = 0xA0,
  chunk_link = 0xF0,
  serial_number = 0xF1,
  manuf_date = 0xF2,
  modification_status = 0xF3,
  manuf_location = 0xF4,
  product_description = 0xF5,
  part_number = 0xF6,
  ethernet_id = 0xF7,
  pcb_revision = 0xF8,
  empty_chunk = 0xFF
} chunk_entry_types;


/* A type in which a list of modules can be stored in a linker-independent way */
typedef struct module_list module_list;
struct module_list {
  module_list       *next;
  const char        *filename;                      /* the component itself */
  unsigned long     fixed_position;                 /* -1 or fixed offset in image */
  unsigned long     size;                           /* size in bytes */
  char              *memory_cache;                  /* NULL, or pointer to memory copy */
  chunk_entry_types type;                           /* Component type - usually module */
};


/* A type in which each linker can record its characteristics so that the
 * main program can drive it.
 */
typedef struct {
  const char  *formatname;                          /* eg. "rom" */
  const char  *description;                         /* eg. "standard ROM build */
  const char  **args;                               /* NULL terminated arrays of keys */
  const char  **vals;                               /* get copies of the values */
  size_t      mandatory_args;                       /* First # args are mandatory */

  void        (*init)(void);                        /* Set-up static data */
  module_list *(*start)(void);                      /* Generate the header information */
  module_list *(*add)(void);                        /* Add the next module to the image */
  void        (*finish)(void);                      /* Complete the generation of the image */
} linker_characteristics;

/* This "variable" holds a constant value representing the concept of a module which
 * does not have an explicit position in the image assigned to it yet
 */
extern const unsigned long unassigned_position;

/* This "variable" holds a constant value representing an unknown size */
extern const unsigned long unknown_size;

/* This variable is non-zero if the verbose option was selected */
extern int verbose;

/* Look up a command-line parameter option - returns NULL if parameter was not
 * supplied, otherwise the value of the parameter.
 */
extern const char *find_parameter(const char *key);

/* Look up a command-line parameter option - does not return if the parameter was
 * not specified (ie. it was a mandatory parameter), otherwise the value of the
 * parameter is returned.
 */
extern const char *find_mandatory_parameter(const char *key);

/* Return the next non-option argument - returns NULL if there are no more parameters
 * to return
 */
extern const char *find_next_arg(void);

/* Load a standard module list file into a module_list data structure, returning a
 * count of the number of modules entered into the data structure
 */
extern size_t romlinker_load_module_list(FILE *f, module_list **list);


/* Add the specified module to the module list.  list is the address of the next
 * pointer at the tail of the module chain, name is the filename, position is either
 * the fixed position of the module or the value of unassigned_position.
 *
 * Returns the address of the next pointer in the newly allocated entry.
 * Aborts the program if memory allocation fails.
 */
extern module_list **module_add_to_list(module_list **list, const char *name, unsigned long position);


/* Convert a textual numeric string into an unsigned long.  Interface is identical
 * to "strtoul", except strings can be prefixed with '&' to indicate base 16 text
 * follows.
 */
extern unsigned long romlinker_strtoul(const char *s, char **end, int base);


/* Generate a report on the contents of the ROM image.  Does not return if the image
 * has overflowed (total > size).
 */
extern void romlinker_report_rom_summary(unsigned long size, unsigned long total);

#endif
