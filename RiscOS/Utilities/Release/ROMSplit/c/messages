/****************************************************************************

         File: messages.c
      Purpose: routines for error and message reporting
       Author: AJ Pirozek
      History: 08-Dec-1997: AP: created.

 ****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "toolbox.h"
#include "window.h"
#include "event.h"
#include "wimp.h"
#include "wimplib.h"

/* application defined header files */
#include "global.h"
#include "messages.h"

/****************************************************************************
    purpose: display an error message in a wimp error window
  variables: er - pointer to an error block
    returns:
 ****************************************************************************/
void we ( _kernel_oserror *er)
{
  if ( er !=NULL)
    wimp_report_error ( er, 0, APP_NAME, 0, 0, 0);
}

/****************************************************************************
    purpose: display an error message and then terminate the application
  variables: er - pointer to an error block
    returns:
 ****************************************************************************/
void wef ( _kernel_oserror *er)
{
  if ( er !=NULL)
  {
    wimp_report_error ( er, 0, APP_NAME, 0, 0, 0);
    exit ( 0);
  }
}

/****************************************************************************
    purpose: display a user error message and then terminate the application
  variables: msge - error message to display
    returns:
 ****************************************************************************/
void ref ( char *msge)
{
  _kernel_oserror e;

  strcpy ( e.errmess, msge);
  e.errnum = 1;
  wef ( &e);
}

/****************************************************************************
    purpose: display a user error message
  variables: msge - error message to display
    returns:
 ****************************************************************************/
void re ( char *msge)
{
  _kernel_oserror e;

  strcpy ( e.errmess, msge);
  e.errnum = 1;
  we ( &e);
}

/****************************************************************************
    purpose: lookup a string in the messages file
  variables: tag - label of string to be looked up
    returns: a pointer to the string or NULL if not found
 ****************************************************************************/
char *lookup_token ( char *tag)
{
  _kernel_swi_regs regs;
  regs.r[0] = (int) &messages;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if ( _kernel_swi ( MessageTrans_Lookup, &regs, &regs))
    return NULL;

  return (char *) regs.r[2];
}

/****************************************************************************
    purpose: handle toolbox generated errors
  variables: event_code - the event code
             event      - the toolbox event
             id_block   - the id block
             data       - any private data
    returns: TRUE
 ****************************************************************************/
int tbox_error_handler ( int      event_code, ToolboxEvent *event_block,
                         IdBlock *id_blk,     void         *data)
{
   /* Handles an error by raising it */

   we (( _kernel_oserror *) event_block->data.bytes);
   return TRUE;
}


