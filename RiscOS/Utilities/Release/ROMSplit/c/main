/******************************************************************************

      File: main.c
   Purpose: main program code
    Author: Andy Pirozek
   History: 08-Dec-1997: AP: created.

 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "swis.h"

#include "toolbox.h"
#include "window.h"
#include "menu.h"
#include "event.h"
#include "wimp.h"
#include "wimplib.h"
#include "gadgets.h"
#include "proginfo.h"
#include "iconbar.h"

#include "VersionNum"

/* library header files */
#include "global.h"
#include "messages.h"

#define APP_VERSION Module_FullVersion " (" Module_Date ") "

#define SPLIT_BYTE 0
#define SPLIT_WORD 1

#define STATE_WAIT  0
#define STATE_COPY  1
#define STATE_END   2
#define STATE_ABORT 3

static int quit =FALSE;
static int split =SPLIT_BYTE;
static int state =STATE_WAIT;
static int filelength;
static int copied;
static int pollops =1000;            /* poll ops */

static char msgebuf [ 512];
static char src_file [ 512];
static char dst_file [ 512];
static char rom_0 [ 512];
static char rom_1 [ 512];
static char rom_2 [ 512];
static char rom_3 [ 512];

static FILE *fi, *f0, *f1, *f2, *f3;
ObjectId    mainw, progress;
MessagesFD  messages;

#define WimpVersion    310
static  WimpPollBlock  poll_block;
static  IdBlock        id_block;

/****************************************************************************
    purpose: set a file's type
  variables: path - filename
             type - file type
    returns:
 ****************************************************************************/
void set_type ( char *path, int type)
{
  _kernel_swi_regs in, out;

  in.r [ 0] = 18;
  in.r [ 1] = ( int) path;
  in.r [ 2] = type;
  we ( _kernel_swi ( OS_File, &in, &out));
}

/****************************************************************************
    purpose: returns the length of a file
  variables: path - full path of file
    returns: int - size of file
 ****************************************************************************/
int filesize ( char *path)
{
  _kernel_swi_regs in,
                   out;

  in.r [ 0] = 17;
  in.r [ 1] = ( int) path;

  we ( _kernel_swi ( OS_File, &in, &out));
  return out.r [ 4];
}

/****************************************************************************
    purpose: deal with drags into this app
  variables: m    - wimpmessage block
             data - pointer to private data
    returns:
 ****************************************************************************/
int data_load ( WimpMessage *m, void *data)
{
  if ( state)
    return TRUE;

  strcpy ( src_file, m -> data.data_load.leaf_name);
  wef ( writablefield_set_value ( 0, mainw, 0x6, src_file));

  return TRUE;
}

/****************************************************************************
    purpose: draggable dragged from our app to filer
  variables: m    - wimpmessage block
             data - pointer to private data
    returns:
 ****************************************************************************/
int data_save ( WimpMessage *m, void *data)
{
  if ( state)
    return TRUE;

  strcpy ( dst_file, m -> data.data_load.leaf_name);
  wef ( writablefield_set_value ( 0, mainw, 0x8, dst_file));

  return TRUE;
}

/****************************************************************************
    purpose: handler for quit messages from the toolbox
  variables:
    returns: TRUE
 ****************************************************************************/
int quit_event( int      event_code, ToolboxEvent *event,
                IdBlock *id_block,   void         *data)
{
  IGNORE ( event_code);
  IGNORE ( event);
  IGNORE ( id_block);
  IGNORE ( data);

  quit =TRUE;
  return TRUE;
}

/****************************************************************************
    purpose: handler for quit messages from the wimp
  variables: message - the wimp message
             data    - any private data
    returns: TRUE
 ****************************************************************************/
int quit_message ( WimpMessage *message, void *data)
{
  IGNORE ( message);
  IGNORE ( data);

  quit =TRUE;
  return TRUE;
}

/****************************************************************************
    purpose: set the version number in the ProgInfo dialogue box
  variables: event_code - the event code
             event      - the toolbox event
             id_block   - the id block
             data       - any private data
    returns: TRUE
 ****************************************************************************/
int proginfo_show ( int      event_code, ToolboxEvent *event,
                    IdBlock *id_block,   void         *data)
{
  IGNORE ( data);
  IGNORE ( event);
  IGNORE ( event_code);

  proginfo_set_version ( 0, id_block -> self_id, APP_VERSION);
  return TRUE;
}

/****************************************************************************
    purpose: sends a message after the draggable has been dropped
  variables:
    returns: TRUE
 ****************************************************************************/
int send_msge ( int      event_code, ToolboxEvent *event,
                IdBlock *id_block,   void         *data)
{
  DraggableDragEndedEvent *de;
  WimpMessage wm;
  int th;

  de = ( DraggableDragEndedEvent *) event;
  wm.hdr.size =256;

  wm.hdr.size        = 256;
  wm.hdr.your_ref    = 0;
  wm.hdr.action_code =  Wimp_MDataSave;
  wm.data.data_save.destination_window = de -> window_handle;
  wm.data.data_save.destination_icon   = de -> icon_handle;
  wm.data.data_save.destination_x      = de -> x;
  wm.data.data_save.destination_y      = de -> y;
  wm.data.data_save.file_type          = 0xfe5;
  strcpy ( wm.data.data_save.leaf_name, "ROM");
  we ( wimp_send_message ( Wimp_EUserMessageRecorded, ( void *)&wm,
                           de ->window_handle, de ->icon_handle, &th));

  return TRUE;
}

/****************************************************************************
    purpose: open the main window
  variables:
    returns:
 ****************************************************************************/
int open_main ( int      event_code, ToolboxEvent *event,
                IdBlock *id_block,   void         *data)
{
  if ( state)
    return TRUE;

  we ( toolbox_show_object ( 0, mainw, Toolbox_ShowObject_Default, 0,0,0));
  return TRUE;
}

/****************************************************************************
    purpose: abort the split
  variables:
    returns:
 ****************************************************************************/
int abort_split ( int      event_code, ToolboxEvent *event,
                  IdBlock *id_block,   void         *data)
{
  if ( state)
    state =STATE_ABORT;

  return TRUE;
}

/****************************************************************************
    purpose: increase the number of operations during a winp poll
  variables:
    returns:
 ****************************************************************************/
int split_faster ( int      event_code, ToolboxEvent *event,
                   IdBlock *id_block,   void         *data)
{
  if ( state)
    pollops +=1000;

  return TRUE;
}

/****************************************************************************
    purpose: null event handler
  variables:
    returns: TRUE
 ****************************************************************************/
int null_event ( int      event_code, WimpPollBlock *event,
                 IdBlock *id_block,   void          *data)
{
  int n, byte, word;

  switch ( state)
  {
    case STATE_WAIT:
      return TRUE;

    case STATE_ABORT:
    case STATE_END:
      fclose ( fi);
      fclose ( f0);
      fclose ( f1);
      if ( split ==SPLIT_BYTE)
      {
        fclose ( f2);
        fclose ( f3);
        set_type ( rom_2, 0xfe5);
        set_type ( rom_3, 0xfe5);
      }
      set_type ( rom_0, 0xfe5);
      set_type ( rom_1, 0xfe5);
      we ( toolbox_hide_object ( 0, progress));
      we ( toolbox_show_object ( 0, mainw, Toolbox_ShowObject_Default, 0,0,0));
      state =STATE_WAIT;
      break;

    case STATE_COPY:
      switch ( split)
      {
        case SPLIT_BYTE:
          for ( n=0; n<=pollops; n++)
          {
            if ( fread ( &word, sizeof ( unsigned int), 1, fi))
            {
              copied +=4;
              byte =  ( word & 0xff);
              fwrite ( &byte, sizeof ( unsigned char), 1, f0);

              byte = (( word & 0xff00) >>8);
              fwrite ( &byte, sizeof ( unsigned char), 1, f1);

              byte = (( word & 0xff0000) >>16);
              fwrite ( &byte, sizeof ( unsigned char), 1, f2);

              byte = (( word & 0xff000000) >> 24);
              fwrite ( &byte, sizeof ( unsigned char), 1, f3);
            }
            else
            {
              state =STATE_END;
              return TRUE;
            }
          }
          we ( numberrange_set_value ( 0, progress, 1,
                                       ( copied *100) /filelength));
          break;

        case SPLIT_WORD:
          for ( n=0; n<=pollops; n++)
          {
            if ( fread ( &word, sizeof ( unsigned int), 1, fi))
            {
              copied +=4;
              byte =  ( word & 0xff);
              fwrite ( &byte, sizeof ( unsigned char), 1, f0);

              byte = (( word & 0xff00) >>8);
              fwrite ( &byte, sizeof ( unsigned char), 1, f0);

              byte = (( word & 0xff0000) >>16);
              fwrite ( &byte, sizeof ( unsigned char), 1, f1);

              byte = (( word & 0xff000000) >> 24);
              fwrite ( &byte, sizeof ( unsigned char), 1, f1);
            }
            else
            {
              state =STATE_END;
              return TRUE;
            }
          }
          we ( numberrange_set_value ( 0, progress, 1,
                                       ( copied *100) /filelength));
          break;
      }
  }

  return TRUE;
}

/****************************************************************************
    purpose: start splitting files
  variables:
    returns: TRUE
 ****************************************************************************/
int split_files ( int      event_code, ToolboxEvent *event,
                  IdBlock *id_block,   void         *data)
{
  ComponentId obj_on;

  state =STATE_WAIT;
  if (( src_file [ 0] ==NULL) || ( dst_file [ 0] ==NULL))
  {
    re ( "Filename(s) missing");
    return TRUE;
  }

  if (( filelength = filesize ( src_file)) <1)
  {
    re ( "Source file to short");
    return TRUE;
  }
  copied =0;

  if (( fi = fopen ( src_file, "rb")) ==NULL)
  {
    sprintf ( msgebuf, "bad src '%s'", src_file);
    re ( msgebuf);
    return TRUE;
  }

  sprintf ( rom_0, "%s_0", dst_file);
  sprintf ( rom_1, "%s_1", dst_file);
  sprintf ( rom_2, "%s_2", dst_file);
  sprintf ( rom_3, "%s_3", dst_file);

  if (( f0 = fopen ( rom_0, "wb")) ==NULL)
  {
    fclose ( fi);
    re ( "Couldn't open rom 0");
    return TRUE;
  }
  if (( f1 = fopen ( rom_1, "wb")) ==NULL)
  {
    fclose ( fi);
    fclose ( f0);
    re ( "Couldn't open rom 1");
    return TRUE;
  }

  wef ( radiobutton_get_state ( 0, mainw, 3, &split, &obj_on));

  /* byte wide */
  if ( split ==SPLIT_BYTE)
  {
    if (( f2 = fopen ( rom_2, "wb")) ==NULL)
    {
      fclose ( fi);
      fclose ( f0);
      fclose ( f1);
      re ( "Couldn't open rom 2");
      return TRUE;
    }
    if (( f3 = fopen ( rom_3, "wb")) ==NULL)
    {
      fclose ( fi);
      fclose ( f0);
      fclose ( f1);
      fclose ( f2);
      re ( "Couldn't open rom 3");
      return TRUE;
    }
  }
  we ( numberrange_set_value ( 0, progress, 1, 0));
  we ( toolbox_show_object ( 0, progress, Toolbox_ShowObject_Default, 0,0,0));
  we ( toolbox_hide_object ( 0, mainw));
  pollops =1000;
  state =STATE_COPY;

  return TRUE;
}


void split_image(char* input_file, char* output_file0, char* output_file1)
{
  FILE *fi, *f0, *f1;
  int byte, word;

  /* Open the input file */
  if (( fi = fopen (input_file, "rb")) ==NULL)
  {
    printf ("Error opening file %s\n", input_file);
    return;
  }

  /* Open the output files */
  if (( f0 = fopen (output_file0, "wb")) ==NULL)
  {
    fclose ( fi);
    printf ("Error opening file %s\n", output_file0);
    return;
  }
  if (( f1 = fopen (output_file1, "wb")) ==NULL)
  {
    fclose ( fi);
    fclose ( f0);
    printf ("Error opening file %s\n", output_file1);
    return;
  }

  /* Perform the split... */
  while (!feof(fi))
  {
  if ( fread ( &word, sizeof ( unsigned int), 1, fi))
  {
    byte =  ( word & 0xff);
    fwrite ( &byte, sizeof ( unsigned char), 1, f0);

    byte = (( word & 0xff00) >>8);
    fwrite ( &byte, sizeof ( unsigned char), 1, f0);

    byte = (( word & 0xff0000) >>16);
    fwrite ( &byte, sizeof ( unsigned char), 1, f1);

    byte = (( word & 0xff000000) >> 24);
    fwrite ( &byte, sizeof ( unsigned char), 1, f1);
  }
  }
    /* Close all the files */
    fclose(fi);
    fclose(f0);
    fclose(f1);

  return;
}


/****************************************************************************
    purpose: application main loop
  variables:
    returns:
 ****************************************************************************/
int main (int argc, char *argv[])
{
  int toolbox_events = 0,
      wimp_messages  = 0,
      event_code;
  int i;
  bool run_outside_desktop = false;
  char* input_file = NULL;
  char* output_file1 = NULL;
  char* output_file2 = NULL;


  /* See if we are being run from the command line, or as a wimp task.  The command line one
   * will have an argc of more than one
   */
  if (argc > 1)
  {
    /* Scan through the command-line arguments */
    for (i = 1; i <= argc; i++)
    {
      if (argv[i][0] == '-')             /* Is it a switch option? */
      {
        if (strcmp (argv[i], "-command") == 0)
        {
          run_outside_desktop = TRUE;
        }

        if (strcmp (argv[i], "-input_file") == 0)
        {
          i++;
          printf("input file is %s\n", argv[i]);
          input_file = malloc(strlen(argv[i])+1);
          strcpy (input_file, argv[i]);
        }

        if (strcmp (argv[i], "-output_file") == 0)
        {
          i++;
          printf("output file is %s\n", argv[i]);
          output_file1 = malloc(strlen(argv[i])+2);
          strcpy (output_file1, argv[i]);
          strcat (output_file1,"0");
          output_file2 = malloc(strlen(argv[i])+2);
          strcpy (output_file2, argv[i]);
          strcat (output_file2,"1");
        }
      } /* End if */
    } /* End for */

    if (run_outside_desktop && output_file1 != NULL)
    {
      printf ("We are running single-tasking.\n");
      printf ("The input files is %s\n", input_file);
      printf ("We are saving the split images to files %s and %s\n", output_file1, output_file2);
    }

    /* Now split the image. */
    split_image(input_file, output_file1, output_file2);

    if (input_file)
      free (input_file);
    if (output_file1)
      free (output_file1);
    if (output_file2)
      free (output_file2);
  }
  else /* We are running as part of the desktop */
  {
    /* register ourselves with the Toolbox. */
    wef ( toolbox_initialise ( 0, WimpVersion, &wimp_messages,
          &toolbox_events, "<ROMSplit$Dir>", &messages, &id_block, 0, 0, 0));

    /* initialise the event library */
    wef ( event_initialise ( &id_block));

    /* setup wimp to return NULL events and key pressed events */
    wef ( event_set_mask ( 0));
    /* register a toolbox error handler */
    wef ( event_register_toolbox_handler( -1, Toolbox_Error,
                                              tbox_error_handler, NULL));

    /* register handler for toolbox event 1, which is generated by the 'Quit'
       option on the iconbar menu.  Also register message handlers to quit
       properly when quit messages are received from the wimp.                */
    wef ( event_register_toolbox_handler( -1, 1, quit_event,0));
    wef ( event_register_toolbox_handler( -1, Iconbar_Clicked, open_main, 0));
    wef ( event_register_toolbox_handler ( -1, 0x10, split_files, NULL));
    wef ( event_register_toolbox_handler ( -1, 0x11, abort_split, NULL));
    wef ( event_register_toolbox_handler ( -1, 0x12, split_faster, NULL));

    /* register handlers for wimp quit messages */
    wef ( event_register_message_handler( Wimp_MQuit, quit_message, 0));
    wef ( event_register_message_handler( Wimp_MPreQuit, quit_message, 0));

    /* register handler for iconbar dialogue box */
    wef ( event_register_toolbox_handler( -1, ProgInfo_AboutToBeShown,
                                               proginfo_show, 0));

    /* null event handler */
    wef ( event_register_wimp_handler ( -1, Wimp_ENull, null_event, NULL));
    we ( toolbox_create_object  ( 0, "main", &mainw));
    we ( toolbox_create_object  ( 0, "progress", &progress));

    /* message handlers */
    wef ( event_register_message_handler( Wimp_MDataLoad, data_load, 0));
    wef ( event_register_message_handler( Wimp_MDataSaveAck, data_save, 0));
    wef ( event_register_message_handler( Wimp_EUserMessageRecorded,
                                          data_save, 0));
    wef ( event_register_toolbox_handler ( -1, Draggable_DragEnded, send_msge,
                                           NULL));

    src_file [ 0] =NULL;
    dst_file [ 0] =NULL;

    /* poll loop */
    while ( quit==FALSE)
      wef ( event_poll ( &event_code, &poll_block, 0));
  }
  return 0;
}

