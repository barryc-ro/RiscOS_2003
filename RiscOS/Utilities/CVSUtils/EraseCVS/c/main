/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include "constants.h"
#include "Interface/HighFSI.h"
#include "main.h"
#include "CmdLine.h"
#include "VersionNum"

ERROR_STRUCT( NOMEMORY, "NoStore" );
ERROR_STRUCT( NOTDIR,   "IsntDir" );

typedef struct {
  unsigned int load;
  unsigned int exec;
  unsigned int length;
  unsigned int attr;
  unsigned int type;
  char name[4];
} osgbpb_response;

#define WimpVersion    350

static  WimpPollBlock  poll_block;
MessagesFD             messages;
static  IdBlock        id_block;

int task_handle          = 0;      /* Wimp task handle */
int iconbar_id           = 0;      /* ID iconbar object */
int menu_iconbar_id      = 0;      /* ID of iconbar menu object */
int verbose              = FALSE;  /* Verbose operation */

/*
 */
_kernel_oserror *
error_lookup(_kernel_oserror *err, char *sub)
{
  return _swix(MessageTrans_ErrorLookup, _INR(0,7), err, 0, 0, 0, sub, 0, 0, 0);
}

/*
 * remove CVS directories and /cvstag files
 */

enum cvs_flags {
  flag_seen_cvs_dir = 1,
  flag_seen_cvstag = 2
};

static char dirname[BUFSIZ];
static char enumbuf[BUFSIZ];

static _kernel_oserror *delete_files(char *leafbuf, char *src, char *fulldir)
{
  _kernel_swi_regs r;

  r.r[0] = FSControl_Wipe;
  r.r[1] = (int) fulldir;
  r.r[2] = 0;
  r.r[3] = 3; /* flags: R F */

  strcpy(leafbuf, src);
  return _kernel_swi(OS_FSControl, &r, &r);
}

static _kernel_oserror *do_remove_cvs(char *eodir, char *nptr, char *eptr)
{
  char *ptr;
  int next;
  _kernel_oserror *err = NULL;
  int flags = 0;

  for (ptr = nptr, next = flags = 0; err == NULL && next != -1;) {
    char *p;
    int count;

    err = _swix(OS_GBPB, _INR(0,6)|_OUTR(3,4), OSGBPB_ReadDirEntriesInfo,
      dirname, enumbuf, sizeof(enumbuf)/32, next, sizeof(enumbuf), NULL,
      &count, &next);

    if (!err) {
      for (p = enumbuf; count-- > 0; ) {
        osgbpb_response *o = (osgbpb_response *) p;
        size_t namelen = strlen(o->name) + 1;
        if (count) {
#         define align_ptr(x) ((void *)((((int)(x))+3)&~3))
          p = align_ptr(o->name + namelen);
        }


        if (o->type == object_directory) {
          if (strcmp(o->name, "CVS") == 0) {
            flags |= flag_seen_cvs_dir;
          }
          else {
            if (ptr + namelen < eptr) {
              /* We only store it if we haven't run out of space! */
              memcpy(ptr, o->name, namelen);
              ptr += namelen;
            }
          }
        }
        else if (o->type == object_file && strcmp(o->name, "/cvstag") == 0) {
          flags |= flag_seen_cvstag;
        }
      }
    }
  }
  --ptr; /* point back at final terminating byte */

  /* Finished the enumeration now, so we can change the directory with
   * complete impunity and NOT have to re-enumerate it.
   *
   * Scan back through all the directory names and call this routine
   * recursively to process them.
   */

  *eodir++ = '.';

  while (!err && ptr-- > nptr) {
    size_t length = 0;

    while (*ptr && ptr >= nptr) {
      --ptr;
      ++length;
    }

    memcpy(eodir, ptr + 1, length + 2);
    err = do_remove_cvs(eodir + length, ptr + 1, eptr);
  }

  /* Do the "current" directory last to help the filing systems cache
   * directory data more efficiently
   */
  if (!err && flags & flag_seen_cvstag) {
    err = delete_files(eodir, "/cvstag", dirname);
  }
  if (!err && flags & flag_seen_cvs_dir) {
    if (verbose) printf("EraseCVS: %s\n", dirname);
    err = delete_files(eodir, "CVS", dirname);
  }

  eodir[-1] = '\0';

  return err;
}

_kernel_oserror *remove_cvs(char *dir)
{
  /* Allocate a 32K buffer for holding all the leafnames */
  static char names[8*BUFSIZ];
  if (!dir || !*dir) {
    dir = "@";
  }
  return do_remove_cvs(strchr(strcpy(dirname, dir), '\0'),
    names+1, names + sizeof(names) - 1);
}

/*
 * read catalogue info
 */
_kernel_oserror *
read_obj_type(char *path, int *type)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  reg.r[0] = 17;
  reg.r[1] = (int)path;
  ERR_GOTO(err,_kernel_swi(OS_File,&reg,&reg));
  *type = reg.r[0];

exit_gracefully:
  return (err);
}

/*
 * find out the object ids
 */
int
attach_other_handlers(int event_code,ToolboxEvent *event,
    			  IdBlock *id_block, void *handle)
{
  _kernel_oserror *err = NULL;
  char obj_name[50];
  int dummy;

  ERR_CHECK(err,toolbox_get_template_name(0,id_block->self_id,obj_name,
      				     sizeof(obj_name),&dummy));

  if (strcmp(obj_name, ICONBAR_NAME) == 0)
    iconbar_id = id_block->self_id;
  else if (strcmp(obj_name, MENU_ICONBAR_NAME) == 0)
    menu_iconbar_id = id_block->self_id;

  return 0;
}
/*
 * Event handler to be called when toolbox event 1 is generated (by click on the
 * 'Quit' entry of the iconbar menu.
 */
int
quit_event(int event_code, ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  exit(0);
  return(1);
}

/*
 * Message handler to be called on receipt of a Quit or PreQuit message from
 * the Wimp.
 */
int
quit_message(WimpMessage *message, void *handle)
{
  message = message;
  handle = handle;

  exit(0);
  return(1);
}

/*
 * message_data_open
 *
 */
int
message_data_open(WimpMessage *message, void *handle)
{
  _kernel_oserror *err = NULL;
  WimpMessage msg;
  int obj_type;
  int proceed = FALSE;

  handle=handle;

  if (message->hdr.sender == task_handle)
    goto exit_gracefully;

  msg = *message;
  msg.hdr.your_ref = msg.hdr.my_ref;

  ERR_GOTO(err,read_obj_type(message->data.data_load_ack.leaf_name,&obj_type));
  if (obj_type!=2)
  {
    ERR_GOTO(err,
       error_lookup(ERROR(NOTDIR),message->data.data_load_ack.leaf_name));
  }

  if (dir_on_nfs(message->data.data_load_ack.leaf_name) == TRUE)
  {
    if (delete_from_nfs() == TRUE)
      proceed = TRUE;
  }
  else
  {
    proceed = TRUE;
  }

  if (proceed == TRUE)
  {
    _swix(Hourglass_On,0);
    ERR_GOTO(err,remove_cvs(message->data.data_load_ack.leaf_name));
  }

  if (message->hdr.action_code == Wimp_MDataLoad)
    msg.hdr.action_code = Wimp_MDataLoadAck;

exit_gracefully:
  _swix(Hourglass_Off,0);
  wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0);
  if (err)
    wimp_report_error(err,0,0);

  return 1;
}

/*
 * Enter the correct version string into window
 */
int
initialise_proginfo(int event_code,ToolboxEvent *event,
    			    IdBlock *id_block, void *handle)
{
  proginfo_set_version(0,id_block->self_id, APP_VERSION);
  return 0;
}

/*
 * main
 */
int
main(int argc, char *argv[])
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int toolbox_events = 0;
  int wimp_messages  = 0;
  int event_code;

  /* See if we are being run from the command line, or as a wimp task.  The command line one
   * will have an argc of more than one
   */
  if (argc == 1)
  {
    event_initialise(&id_block);          /* initialise the event library. */
    event_set_mask(Wimp_Poll_NullMask); 	/* mask out un-required wimp events */

    ERR_GOTO(err,event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,
        attach_other_handlers,NULL));

    /* register ourselves with the Toolbox. */
    ERR_GOTO(err,toolbox_initialise(0, WimpVersion, &wimp_messages,
        &toolbox_events,"<EraseCVS$Dir>",&messages,&id_block,0,0,0));

    /* Message handlers */
    ERR_GOTO(err,event_register_message_handler(Wimp_MQuit,
               quit_message,0));
    ERR_GOTO(err,event_register_message_handler(Wimp_MPreQuit,
               quit_message,0));
    ERR_GOTO(err,event_register_message_handler(Wimp_MDataLoad,
               message_data_open,0));

    /* Menu event handlers */
    ERR_GOTO(err,event_register_toolbox_handler(-1,MENU_EVENT_QUIT,
               quit_event,0));

    /* Window event handlers */
    ERR_GOTO(err,event_register_toolbox_handler(-1,ProgInfo_AboutToBeShown,
        initialise_proginfo,NULL));

    toolbox_get_sys_info(3,&reg);  /* Obtain wimp task handle */
    task_handle = reg.r[0];

    /* poll loop */
    while (TRUE)
      event_poll (&event_code, &poll_block, 0);

   exit_gracefully:
    if (err)
      wimp_report_error(err,0,0);
  }
  else
  {
    erase_from_commandline(argc, argv);
  }

  return (0);
}
