#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>

#include "socklib.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "arpa/inet.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/errno.h"
#include "netdb.h"
#include "sys/select.h"

#include "VersionNum"


extern int bindresvport(int, struct sockaddr_in *);

static int s, errstream, acc;

static void close_socks(void)
{
        socketclose(s);
        socketclose(errstream);
}

static void finish(char *err, ...)
{
        va_list ap;

        va_start(ap, err);
        vfprintf(stderr, err, ap);
        va_end(ap);
        fprintf(stderr, "\n");
        exit(0);
}

enum {
        arg_user = 2,
        arg_host = 3,
        arg_cmd = 4,
        arg_first_arg = 5
};

static void write_details(int s, int errpt, char *user, int argc, char **argv)
{
        size_t amt = 2 * (1 + strlen(user)) + 16;
        int i, sz;
        char *buf, *ptr;

        for (i=0; i<argc; ++i) {
                amt += 1 + strlen(argv[i]);
        }

        buf = malloc(amt);
        if (!buf) {
                finish("malloc failed\n");
        }

	ptr = buf;
	ptr += sprintf(ptr, "%d", errpt) + 1;
	ptr += sprintf(ptr, "%s", user) + 1;
	ptr += sprintf(ptr, "%s", user) + 1;
	ptr += sprintf(ptr, argv[0]);
	for (sz = 1; sz < argc; ++sz) {
		ptr += sprintf(ptr, " %s", argv[sz]);
	}
	++ptr;
        if (send(s, buf, ptr - buf, 0) < 0) {
                finish("send: %s\n", _inet_err());
        }

	free(buf);
}


int main(int argc, char *argv[])
{
        fd_set f1,f2;
        int io, donezero=0;
        struct hostent *he;
        struct in_addr **ap;
        char writebuf[256];
        int pt, errpt, sz;
        struct sockaddr_in sin, tin;

        if (argc < arg_first_arg || strcmp(argv[1], "-l") != 0) {
                fprintf(stderr, "RISC OS rsh version " Module_MajorVersion " [" Module_Date "] "
                	Module_MinorVersion "\n");
                finish("Syntax: rsh -l <username> <host> <command> [<command args ...>]");
        }

        s = socket(AF_INET, SOCK_STREAM, 0);
        if (!s) finish("Unable to create socket");
        errstream = socket(AF_INET, SOCK_STREAM, 0);
        if (!errstream) {
                socketclose(s);
                finish("Unable to create socket (2)");
        }
        atexit(close_socks);
	io = 1; socketioctl(s, FIOSLEEPTW, &io);
	io = 1; socketioctl(errstream, FIOSLEEPTW, &io);

        memset(&tin, 0, sizeof(tin));
        memset(&sin, 0, sizeof(sin));

        tin.sin_family = sin.sin_family = AF_INET;
#ifndef COMPAT_INET4
	tin.sin_len = sin.sin_len = sizeof(sin);
#endif
        tin.sin_addr.s_addr = sin.sin_addr.s_addr = INADDR_ANY;
        tin.sin_port = sin.sin_port = htons(0);

        if (bindresvport(s, &sin) < 0) {
                finish("bind 1: %s\n", _inet_err());
        }

	if (bindresvport(errstream, &tin) < 0) {
                finish("bind 2: %s\n", _inet_err());
	}

        listen(errstream, 1);
	sz = sizeof(tin);
	if (getsockname(errstream, (struct sockaddr *)&tin, &sz) < 0) {
	        finish("getsockname: %s", _inet_err());
	}

	errpt = htons(tin.sin_port);
	he = gethostbyname(argv[arg_host]);
	if (!he) {
	        finish("%s: Can't find host name!", argv[arg_host]);
	}

	ap = (struct in_addr **)(he->h_addr_list);
	sin.sin_addr = **ap;
	sin.sin_port = htons(514);
	if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
	        finish("connect: %s", _inet_err());
	}

	write_details(s, errpt, argv[arg_user], argc - arg_cmd, argv + arg_cmd);

	sz = sizeof(sin);
	acc = accept(errstream, (struct sockaddr *)&sin, &sz);
	if (acc < 0) finish("accept: %s", _inet_err());
	socketclose(errstream);
	errstream = acc;

	FD_ZERO(&f1);
	FD_SET(errstream, &f1);
	FD_SET(s, &f1);

	setbuf(stdout, NULL);
	setbuf(stderr, NULL);

	for (;;) {
	        int sr;
	        f2 = f1;
	        sr = select(FD_SETSIZE, &f2, NULL, NULL, NULL);
	        if (sr < 0) finish("select: %s\n", _inet_err());
	        if (sr == 0) continue;
		if (FD_ISSET(s, &f2)) {
	                if (!donezero) {
				if (recv(s, writebuf, 1, 0) < 0) finish("recv: %s", _inet_err());
				donezero = 1;
				continue;
			}
		        pt = recv(s, writebuf, sizeof(writebuf), 0);
		        if (pt == -1) finish("recv: %s", _inet_err());
		        if (!pt) break;
	               	fwrite(writebuf, pt, 1, stdout);
	               	if (ferror(stdout)) break;
	        }
	        else {
	                if (!donezero) {
				if (recv(errstream, writebuf, 1, 0) < 0) finish("initial recv: %s", _inet_err());
				donezero = 1;
				continue;
			}
		        pt = recv(errstream, writebuf, sizeof(writebuf), 0);
		        if (pt == -1) finish("recv: %s", _inet_err());
		        if (!pt) break;
	               	fwrite(writebuf, pt, 1, stderr);
	               	if (ferror(stdout)) break;
	        }
	}
        return 0;
}
