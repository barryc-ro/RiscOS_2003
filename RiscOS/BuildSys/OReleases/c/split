/*
 * $Header$
 * $Source$
 *
 * Copyright (c) 1988 Acorn Computers Ltd., Cambridge, England
 *
 * $Desc$
 * $Log$
 * Revision 4.1.3.1  1996/11/05 19:04:05  nturton
 * Import from cleaned 370 CD
 *
 * Revision 1.4  90/07/18  11:26:21  aideen
 * Merged new/csplit.c with this file. (they differed by
 * only 2 lines). (See Bug 4268).
 * 
 * Revision 1.3  88/06/14  17:30:51  beta
 * Acorn Unix initial beta version
 * 
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

unsigned count = 1000;
int     fnumber;
char    fname[100];
char    *ifil;
char    *ofil;
FILE    *is;
FILE    *os;

/*
 *      split  - split a file into pieces (by lines)
 *      csplit - split a file into pieces (by characters)
 */

int main(int argc, char *argv[])
{
        register i, c, f;
        int iflg = 0;
        char *prog;
        int csplit = 0;         /* default - split by character = false */

        /* work out which flavour of splitting (line or character) */
        /* 1st strip any pathname */

        prog = strrchr(argv[0], '/');
        if (prog == NULL)
                prog = argv[0];
        else    prog++;

        if (strcmp(prog, "csplit") == 0)
                csplit = 1;     /* we're splitting by character */

        for(i=1; i<argc; i++)
                if(argv[i][0] == '-')
                        switch(argv[i][1]) {
                
                        case '\0':
                                iflg = 1;
                                continue;
                
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                                count = atoi(argv[i]+1);
                                if ((strchr(argv[i]+1, 'K') != NULL)
                                  || (strchr(argv[i]+1, 'k') != NULL))
                                    count = count * 1024;  
                                continue;
                        }
                else if(iflg)
                        ofil = argv[i];
                else {
                        ifil = argv[i];
                        iflg = 2;
                }
        if(iflg != 2)
                is = stdin;
        else
                if((is=fopen(ifil,"r")) == NULL) {
                        perror(ifil);
                        exit(1);
                }
        if(ofil == 0)
                ofil = "x";

loop:
        f = 1;
        for(i=0; i<count; i++)
        if (!csplit)

        do { /* keep reading characters 'til we reach the end-of-line */
                c = getc(is);
                if(c == EOF) {
                        if(f == 0)
                                fclose(os);
                        exit(0);
                }
                if(f) {
                        for(f=0; ofil[f]; f++)
                                fname[f] = ofil[f];
                        fname[f++] = fnumber/26 + 'a';
                        fname[f++] = fnumber%26 + 'a';
                        fname[f] = '\0';
                        fnumber++;
                        if((os=fopen(fname,"w")) == NULL) {
                                fprintf(stderr,"Cannot create output\n");
                                exit(1);
                        }
                        f = 0;
                }
                putc(c, os);
        } while(c != '\n');

        else { /* just read 1 character */
                c = getc(is);
                if(c == EOF) {
                        if(f == 0)
                                fclose(os);
                        exit(0);
                }
                if(f) {
                        for(f=0; ofil[f]; f++)
                                fname[f] = ofil[f];
                        fname[f++] = fnumber/26 + 'a';
                        fname[f++] = fnumber%26 + 'a';
                        fname[f] = '\0';
                        fnumber++;
                        if((os=fopen(fname,"w")) == NULL) {
                                fprintf(stderr,"Cannot create output\n");
                                exit(1);
                        }
                        f = 0;
                }
                putc(c, os);
        }

        fclose(os);
        goto loop;
}
