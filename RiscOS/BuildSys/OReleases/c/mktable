#include <stdlib.h>
#include <stdio.h>
#include <string.h>

char *progname;

typedef struct {
  FILE *fp;
  char path[255];
  char version[5];
} Versions;

int main(int argc, char *argv[])
{
  Versions list[3];
  FILE *output;
  int i;
  
  progname = argv[0];

  if (argc != 5) {
    fprintf(stderr,
	    "Usage: %s base-version-list previous-version-list current-version-list output-filename\n",
	    progname);
    exit(1);
  }

  for (i=0; i<3; i++)
    if ((list[i].fp = fopen(argv[i+1], "r")) == NULL) {
      fprintf(stderr, "%s: Couldn't open %s\n", progname, argv[i+1]);
      exit(1);
    }

  if ((output = fopen(argv[4], "w")) == NULL) {
    fprintf(stderr, "%s: Couldn't open %s\n", progname, argv[4]);
    exit(1);
  }

  while (fscanf(list[0].fp, "%s %s\n", list[0].path, list[0].version) != EOF) {
    fscanf(list[1].fp, "%s %s\n", list[1].path, list[1].version);
    fscanf(list[2].fp, "%s %s\n", list[2].path, list[2].version);
    if ((strcmp(list[0].path, list[1].path) == 0)
        && (strcmp(list[0].path, list[2].path) == 0))
      fprintf(output, "%s %s %s %s\n", list[0].path,
                                       list[0].version,
                                       list[1].version,
                                       list[2].version);
    else {
      fprintf(stderr, "%s: The version files must contain an identical list of paths.\n", progname);
      fprintf(stderr, "    An error occured near the entry %s.\n", list[0].path);
      fprintf(stderr, "    Add dummy entries (with version None) and retry.\n");
      exit(1);
    }
  }

  for (i=0; i<3; i++)
    fclose(list[i].fp);

  exit(0);
}
