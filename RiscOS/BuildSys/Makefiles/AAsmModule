# Makefile fragment for assembler modules targetted at ROMming, previously built
# using AAsm but now using objasm.
#
# $Id$
#
# This makefile provides the following phony targets:
#
#    rom     install_rom   resources     resources_common   resources-None
#    export  export_libs   export_hdrs   clean
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT        (the name of the component)
#
# RESFSDIR (opt)   (actual directory to export resources to)
# ROM_MODULE(opt)  (output filename - otherwise rm.${TARGET})
# ROM_OBJS (opt)   (component's object files for romming)
# ROM_LIBS (opt)   (libraries to link again ROM_OBJS to generate ROM_MODULE)
# DIRS     (opt)   (magic target to ensure object directories are present)
# HEADER1  (opt)   (leafname of file in hdr to copy to <export$dir> on export_hdrs)
# HEADER2  (opt)   (leafname of file in hdr to copy to <export$dir> on export_hdrs)
# EXP_HDR  (opt)   (directory for exported assembler interface headers)
#
#
# It relies on the following from the build system:
#
#
# INSTDIR          (installation directory for ROM_MODULE)
# RESDIR           (installation directory for resources - cf. RESFSDIR)
# <Export$Dir>     (export directory for assembler interface headers)
# CMDHELP          (optional, set to None to exclude syntax errors from Messages)
# PHASE            (export phase discriminator)
#
#
# It relies on the following generic tool macros from the Tools makefile
#
# CP + CPFLAGS     (copy, cp etc.)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# RM + WIPE        (deletions)
# ECHO
# LD               (linker)
#
#

TARGET     ?= ${COMPONENT}
ROM_MODULE ?= rm.${TARGET}
ROM_SOURCE ?= s.${TARGET}
ROM_OBJECT ?= o.${TARGET}
EXP_HDR    ?= <export$dir>
RESFSDIR   ?= ${RESDIR}.${COMPONENT}

#
# RISC OS ROM build rules:
#
rom: ${ROM_MODULE}
        @${ECHO} ${COMPONENT}: rom module built

install_rom: ${ROM_MODULE}
        ${CP} ${ROM_MODULE} ${INSTDIR}.${TARGET} ${CPFLAGS}
        @${ECHO} ${COMPONENT}: rom module installed

#
# Actually make the linked ROM target 
#
${ROM_MODULE}: ${ROM_OBJECT} ${DIRS}
        ${MKDIR} rm
        ${LD} -rmf -o $@ o.${TARGET}


${ROM_OBJECT}: ${ROM_SOURCE} ${DIRS}
        ${MKDIR} o
        ${AS} ${ASFLAGS} -o $@ ${ROM_SOURCE}

#
# Clean the module
#
clean:
        ${RM} ${ROM_MODULE}
        ${WIPE} o ${WFLAGS}
        @${ECHO} ${COMPONENT}: cleaned

#
# Export phases
#
export_hdrs: ${EXPORTS}
        @If "${HEADER1}"<>"" Then ${CP} hdr.${HEADER1} ${EXP_HDR}.${HEADER1} ${CPFLAGS}
        @If "${HEADER2}"<>"" Then ${CP} hdr.${HEADER2} ${EXP_HDR}.${HEADER2} ${CPFLAGS}
        @${ECHO} ${COMPONENT}: header export complete

export_libs:
        @${ECHO} ${COMPONENT}: library export complete

export: export_${PHASE}
        @|

#
# Resources
#

resources_common:
        ${MKDIR} ${RESFSDIR}
        ${TOKENCHECK} LocalRes:Messages
        ${CP} LocalRes:Messages ${RESFSDIR}.Messages ${CPFLAGS}
        
resources-None: resources_common
        @|

resources-: resources_common
        ${TOKENCHECK} LocalRes:CmdHelp
        ${CAT} LocalRes:CmdHelp { >> ${RESFSDIR}.Messages }
        
resources: resources-${CMDHELP}
        @${ECHO} ${COMPONENT}: resources copied to Messages module


EOFSTDMAKEFILE=$Id$
# EOF
