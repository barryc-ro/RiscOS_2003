# Makefile fragment for assembler modules targetted at ROMming, previously built
# using AAsm but now using objasm.
#
# $Id$
#
# This makefile provides the following phony targets:
#
#    rom     install_rom   resources     resources_common   resources-None
#    export  export_libs   export_hdrs   standalone         install
#    clean   debug
#
#
# This fragment uses the following macros set by the master makefile.
#
#
# COMPONENT        (the name of the component)
#
# RESFSDIR (opt)   (actual directory to export resources to)
# ROM_MODULE(opt)  (output filename - otherwise rm.${TARGET})
# ROM_OBJS (opt)   (component's object files for romming)
# ROM_LIBS (opt)   (libraries to link again ROM_OBJS to generate ROM_MODULE)
# DIRS     (opt)   (magic target to ensure object directories are present)
# HEADER1  (opt)   (leafname of file in hdr to copy to <export$dir> on export_hdrs)
# HEADER2  (opt)   (leafname of file in hdr to copy to <export$dir> on export_hdrs)
# EXP_HDR  (opt)   (directory for exported assembler interface headers)
#
#
# It relies on the following from the build system:
#
#
# INSTDIR          (installation directory for ROM_MODULE)
# RESDIR           (installation directory for resources - cf. RESFSDIR)
# <Export$Dir>     (export directory for assembler interface headers)
# CMDHELP          (optional, set to None to exclude syntax errors from Messages)
# PHASE            (export phase discriminator)
#
#
# It relies on the following generic tool macros from the Tools makefile
#
# CP + CPFLAGS     (copy, cp etc.)
# AS + ASFLAGS     (assembler)
# MKDIR            (cdir/mkdir -p)
# RM + WIPE        (deletions)
# ECHO
# LD               (linker)
#
#

TARGET     ?= ${COMPONENT}
ROM_MODULE ?= rm.${MACHINE}.${TARGET}
ROM_SOURCE ?= s.${TARGET}
ROM_OBJECT ?= o.${MACHINE}.${TARGET}
EXP_HDR    ?= <export$dir>
RESFSDIR   ?= ${RESDIR}.${TARGET}
RESAPPDIR  ?= ${RESDIR}.^.Apps.${APP}
C_EXP_HDR  ?= <cexport$dir>.Interface.h

SA_MODULE  ?= rm.${MACHINE}.${TARGET}SA
SA_OBJECT  ?= o.${MACHINE}.${TARGET}SA
MERGEDMDIR ?= o.${MACHINE}._Messages_
MERGEDMSGS ?= ${MERGEDMDIR}.${TARGET}
SA_FLAGS   ?= -PD "standalone SETL {TRUE}" -PD "MergedMsgs SETS \"${MERGEDMSGS}\""
SA_LIBS    ?= ${ROM_LIBS}

DBG_MODULE ?= rm.${MACHINE}.${TARGET}D
DBG_OBJECT ?= o.${MACHINE}.${TARGET}D
SA_DEBUG   ?= -PreDefine "debugging SETL {TRUE}"
DBG_LIBS   ?= ${ROM_LIBS}

TOKENS     ?= Hdr:Tokens

TOKENSOURCE ?= s.TokHelpSrc


#
# Exported headers
#

# Need these to stop complaints about the rules below
ASMCHEADER1 ?= _!_x_!_
ASMCHEADER2 ?= _!_x_!_
ASMCHEADER3 ?= _!_x_!_
CHEADER1    ?= _!_x_!_
CHEADER2    ?= _!_x_!_
CHEADER3    ?= _!_x_!_


#
# RISC OS ROM build rules:
#
rom: ${ROM_MODULE}
        @${ECHO} ${COMPONENT}: rom module built

install_rom: ${ROM_MODULE}
        ${CP} ${ROM_MODULE} ${INSTDIR}.${TARGET} ${CPFLAGS}
        @${ECHO} ${COMPONENT}: rom module installed

#
# Actually make the linked ROM target 
#
${ROM_MODULE}: ${ROM_OBJECT} ${ROM_LIBS} ${DIRS}
        ${MKDIR} rm.${MACHINE}
        ${LD} -rmf -o $@ ${ROM_OBJECT} ${ROM_LIBS}


${ROM_OBJECT}: ${ROM_SOURCE} ${TOKHELPSRC} ${DIRS}
        ${MKDIR} o.${MACHINE}
        ${AS} ${ASFLAGS} -o $@ ${ROM_SOURCE}

#
# Standalone builds
#
standalone: ${SA_MODULE}
        @${ECHO} ${COMPONENT}: standalone module built

${SA_MODULE}: ${SA_OBJECT} ${SA_LIBS} ${DIRS}
        ${MKDIR} rm.${MACHINE}
        ${LD} -rmf -o $@ ${SA_OBJECT} ${SA_LIBS}
        ${MODSQZ} -f ${MODSQZFLAGS} $@
        ${CHMOD} -R a+rx rm


${SA_OBJECT}: ${ROM_SOURCE} ${MERGEDMSGS} ${TOKHELPSRC} ${DIRS}
        ${MKDIR} o.${MACHINE}
        ${AS} ${ASFLAGS} -o $@ ${ROM_SOURCE} ${SA_FLAGS}

${MERGEDMSGS}${PRIVATEMSGS}:
        ${MKDIR} ${MERGEDMDIR}
        ${TOUCH} $@
        IfThere LocalRes:Messages Then ${CP} LocalRes:Messages $@ ${CPFLAGS}
        IfThere LocalRes:CmdHelp Then ${TOKENCHECK} LocalRes:CmdHelp
        IfThere LocalRes:CmdHelp Then ${CAT} LocalRes:CmdHelp { >> $@ }

install: ${SA_MODULE}
        ${CP} ${SA_MODULE} ${INSTDIR}.${TARGET} ${CPFLAGS}
        ${CHMOD} a=rx $@
        @${ECHO} ${COMPONENT}: standalone module installed

debug: ${DBG_MODULE}
        @${ECHO} ${COMPONENT}: standalone debug module built

${DBG_MODULE}: ${DBG_OBJECT} ${DBG_LIBS} ${DIRS}
        ${MKDIR} rm.${MACHINE}
        ${LD} -rmf -o $@ ${DBG_OBJECT} ${DBG_LIBS}

${DBG_OBJECT}: ${ROM_SOURCE} ${MERGEDMSGS} ${TOKHELPSRC} ${DIRS}
        ${MKDIR} o.${MACHINE}
        ${AS} ${ASFLAGS} -o $@ ${ROM_SOURCE} ${SA_FLAGS} ${SA_DEBUG}


#
# Clean the module
#
clean${CLEAN} ::
        @IfThere rm.${MACHINE} Then ${ECHO} ${WIPE} rm.${MACHINE} ${WFLAGS}
        @${WIPE} rm.${MACHINE} ${WFLAGS}
        @IfThere aif.${MACHINE} Then ${ECHO} ${WIPE} aif.${MACHINE} ${WFLAGS}
        @${WIPE} aif.${MACHINE} ${WFLAGS}
        @IfThere gpa.${MACHINE} Then ${ECHO} ${WIPE} gpa.${MACHINE} ${WFLAGS}
        @${WIPE} gpa.${MACHINE} ${WFLAGS}
        @IfThere o Then ${ECHO} ${WIPE} o ${WFLAGS}
        @${WIPE} o ${WFLAGS}
        @-${RM} ${TOKENSOURCE}
        @${ECHO} ${COMPONENT}: cleaned

#
# Export phases
#
export_hdrs: ${EXPORTS}
        @If "${HEADER1}"<>"" Then ${ECHO} ${CP} hdr.${HEADER1} ${EXP_HDR}.${HEADER1} ${CPFLAGS}
        @If "${HEADER1}"<>"" Then ${CP} hdr.${HEADER1} ${EXP_HDR}.${HEADER1} ${CPFLAGS}
        @If "${HEADER2}"<>"" Then ${ECHO} ${CP} hdr.${HEADER2} ${EXP_HDR}.${HEADER2} ${CPFLAGS}
        @If "${HEADER2}"<>"" Then ${CP} hdr.${HEADER2} ${EXP_HDR}.${HEADER2} ${CPFLAGS}
        @If "${HEADER3}"<>"" Then ${ECHO} ${CP} hdr.${HEADER3} ${EXP_HDR}.${HEADER3} ${CPFLAGS}
        @If "${HEADER3}"<>"" Then ${CP} hdr.${HEADER3} ${EXP_HDR}.${HEADER3} ${CPFLAGS}
        @${ECHO} ${COMPONENT}: header export complete

export_libs:
        @${ECHO} ${COMPONENT}: library export complete

export${EXPORT}: export_${PHASE}
        @|
        
export_:: export_libs export_hdrs
        @|

${C_EXP_HDR}.${ASMCHEADER1} :: hdr.${ASMCHEADER1}
        ${HDR2H} hdr.${ASMCHEADER1} $@

${C_EXP_HDR}.${ASMCHEADER2} :: hdr.${ASMCHEADER2}
        ${HDR2H} hdr.${ASMCHEADER2} $@

${C_EXP_HDR}.${ASMCHEADER3} :: hdr.${ASMCHEADER3}
        ${HDR2H} hdr.${ASMCHEADER3} $@

${C_EXP_HDR}.${CHEADER1} :: h.${CHEADER1}
        ${CP} h.${CHEADER1} $@ ${CPFLAGS}

${C_EXP_HDR}.${CHEADER2} :: h.${CHEADER2}
        ${CP} h.${CHEADER2} $@ ${CPFLAGS}

${C_EXP_HDR}.${CHEADER3} :: h.${CHEADER3}
        ${CP} h.${CHEADER3} $@ ${CPFLAGS}

#
# Resources
#

resources_common::
        ${MKDIR} ${RESFSDIR}
        ${TOKENCHECK} LocalRes:Messages
        ${CP} LocalRes:Messages ${RESFSDIR}.Messages ${CPFLAGS}
        
resources-None:: resources_common
        @|

resources-:: resources_common
        IfThere LocalRes:CmdHelp Then ${TOKENCHECK} LocalRes:CmdHelp
        IfThere LocalRes:CmdHelp Then ${CAT} LocalRes:CmdHelp { >> ${RESFSDIR}.Messages }
        
resources${RESOURCES} :: ${RESOURCEEXTRA} resources-${CMDHELP}
        @${ECHO} ${COMPONENT}: resources copied to Messages module
        
resources_res ::
        ${CP} LocalRes:Res ${RESFSDIR}.Res ${CPFLAGS}
        
resources_messages ::
        ${CP} LocalRes:Messages ${RESFSDIR}.Messages ${CPFLAGS}

resources_templates ::
        ${CP} LocalRes:Templates ${RESFSDIR}.Templates ${CPFLAGS}
        
resourcesno resourcesNo ::
        @${ECHO} ${COMPONENT}: no resources to export

#
# Build the help tokens
#
${TOKENSOURCE}: ${HELPSRC} ${TOKENS}
        ${TOKENISE} ${TOKENS} ${HELPSRC} $@

EOFSTDMAKEFILE=$Id$
# EOF
