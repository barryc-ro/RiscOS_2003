# Makefile fragment for C and C++ modules targetted at RAM.
#
# $Id$
#
# This fragment requires the following macros to be set
# by the component master makefile:
#
#
# COMPONENT        (the name of the component)
#
# RAM_MODULE       (local filename - defaults to rm.${COMPONENT})
# RAM_OBJS         (component's object files)
# RAM_LIBS         (libraries to link against RAM_OBJS to generate RAM_MODULE)
#
# CLIB             (the C library stubs for RAM modules)
#
# DIRS             (magic target to ensure object directories are present)
#
#
# It relies on the following from the build system:
#
# INSTDIR          (installation directory for RAM_MODULE)
#
#
# It relies on the following generic tool macros from the Tools makefile
#
# CP               (copy, cp etc.)
# CPFLAGS          (flags after the dest arg - for RISC OS builds)
#
# LD               (linker)
# LDFLAGS          (generic linker flags)
# LDRAMFLAGS       (flags for the link phase specific to RAM builds)
#
# MKDIR            (cdir/mkdir -p)
#
#
#

# Conditional macros - only define if macro is not yet set

RAM_MODULE .= rm.${COMPONENT}
RAM_OBJS   .= ${OBJS}
RAM_LIBS   .= ${LIBS}

#
# RISC OS ROM build rules:
#
all: ${RAM_MODULE}
        @echo ${COMPONENT}: ram module built

install: ${RAM_MODULE}
        ${CP} ${RAM_MODULE} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
        @echo ${COMPONENT}: ram module installed

#
# Actually make the linked RAM target 
#
${RAM_MODULE}: ${RAM_OBJS} ${RAM_LIBS} ${CLIB} ${DIRS} ${RAM_DEPEND}
        ${MKDIR} rm
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@ -rmf ${RAM_OBJS} ${RAM_LIBS} ${CLIB}
        ${MODSQZ} ${MODSQZFLAGS} $@


EOFSTDMAKFILE=$Id$
# EOF
