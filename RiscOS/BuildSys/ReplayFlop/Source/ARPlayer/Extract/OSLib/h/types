#ifndef types_H
#define types_H

typedef unsigned int bits, bytes;
typedef int bool;
typedef unsigned char byte;

#ifndef NULL
   #define NULL ((void *) 0)
#endif

#define FALSE ((bool) 0)
#define TRUE  ((bool) 1)

#define NONE ((bits) 0)
#define ALL  (~(bits) 0)

#define SKIP 0
   /*may be used as a "don't care" value for |int|, |... *|, |bits| etc*/

#define SIG_LIMIT 11 /*largest signal number + 1*/

#ifndef __swis_h
   #define _C (1U << 29)
   #define _Z (1U << 30)
   #define _N (1U << 31)
#endif

#define DEC_WIDTH      10 /*strlen ("2147483647")*/
#define SHORT_DEC_WIDTH 5 /*strlen ("32767")*/
#define LONG_DEC_WIDTH 10 /*strlen ("2147483657")*/

#define OCT_WIDTH      11 /*strlen ("37777777777")*/
#define SHORT_OCT_WIDTH 6 /*strlen ("177777")*/
#define LONG_OCT_WIDTH 11 /*strlen ("37777777777")*/

#define UNSIGNED_WIDTH      10 /*strlen ("4294967295")*/
#define SHORT_UNSIGNED_WIDTH 5 /*strlen ("65535")*/
#define LONG_UNSIGNED_WIDTH 10 /*strlen ("4294967295")*/

#define HEX_WIDTH       8 /*strlen ("FFFFFFFF")*/
#define SHORT_HEX_WIDTH 4 /*strlen ("FFFF")*/
#define LONG_HEX_WIDTH  8 /*strlen ("FFFFFFFF")*/

#define FLT_WIDTH   7 /*strlen ("0000001")*/
#define DBL_WIDTH  17 /*strlen ("00000000000000002")*/
#define LDBL_WIDTH 17 /*strlen ("00000000000000002")*/

#define FLT_EXP_WIDTH  2 /*strlen ("38")*/
#define DBL_EXP_WIDTH  3 /*strlen ("308")*/
#define LDBL_EXP_WIDTH 3 /*strlen ("308")*/

#define ERROR (-2)
#define WHETHER(c) ((c)? "TRUE": "FALSE")

#define MAX(a, b)      ((a) > (b)? (a): (b))
#define MIN(a, b)      ((a) < (b)? (a): (b))
#define MAXAB(a, b)    ((a) < (b)? (a) = (b): (a))
#define MINAB(a, b)    ((a) > (b)? (a) = (b): (a))
#define ABS(a)         ((a) >= 0? (a): -(a))
#define SGN(a)         ((a) > 0? 1: (a) < 0? -1: 0)
#define DIM(a, b)      ((a) > (b)? (a) - (b): 0)
#define SQR(a)         ((a)*(a))
#define RATIO(a, b)    ((2*(a) + (b))/(2*(b)))
#define BOOL(c)        ((c) != 0? TRUE: FALSE) /*better than !!c*/
#define UCHAR(i)       ("0123456789ABCDEF" [i])
#define LCHAR(i)       ("0123456789abcdef" [i])
#define BINEXP(n)      (1 << (n))
#define ISDIGIT(c)     ('0' <= (c) && (c) <= '9')
#define ISXDIGIT(c)    (('0' <= (c) && (c) <= '9') || \
      ('a' <= (c) && (c) <= 'f') || ('A' <= (c) && (c) <= 'F'))
#define DIGIT(c)       ((c) - '0')
#define XDIGIT(c)      ('0' <= (c) && (c) <= '9'? (c) - '0': \
      'a' <= (c) && (c) <= 'f'? (c) - 'a' + 10: (c) - 'A' + 10)
#define DBLEQ(a, b, e) (fabs ((a) - (b)) <= (e)*(fabs (a) + fabs (b)))

#define BIT(p, i) (((bits *) (p)) [(i) >> 5] &    1 << ((i) & 31))
#define SET(p, i) (((bits *) (p)) [(i) >> 5] |=   1 << ((i) & 31))
#define CLR(p, i) (((bits *) (p)) [(i) >> 5] &= ~(1 << ((i) & 31)))
   /* 5 is x such that 2^^x == CHAR_BIT*sizeof (bits)
      31 is CHAR_BIT*sizeof (bits) - 1*/

#define CLEAR(s)         ((s) [0] = '\0')
#define EMPTY(s)         ((s) [0] == '\0')
#define NCOPY(s1, s2, n) (sprintf (s1, "%.*s", n, s2), s1)

#define STR_(s) #s
#define STR(s)  STR_ (s)

#define COUNT(a) (sizeof (a)/sizeof *(a))

#define ALIGN(b) ((b) + 3 & ~3)

#define UNKNOWN 1
   /*may be used to declare arrays of unknown size*/

#define AS .
#define ASREF ->
   /*may be used for components of a union*/

#define _ ,
   /*may be used to separate arguments of a macro*/

#define WORD(ptr) \
      (((byte *) (ptr)) [0] | ((byte *) (ptr)) [1] << 8 | \
      ((byte *) (ptr)) [2] << 16 | ((byte *) (ptr)) [3] << 24)
   /*used to assemble an |int| at an unaligned character pointer*/

#define SHORT(ptr) \
      ((int) (((byte *) (ptr)) [0] << 16 | \
      ((byte *) (ptr)) [1] << 24) >> 16)
   /*used to assemble a |short| at an unaligned pointer*/

/*These may be used to suppress compiler warnings*/
#define NOT_USED(x) {x = x;}
#define UNSET(x)    {(void) &x;}

#endif
