#ifndef os_H
#define os_H

/* C header file for OS
 * written by DefMod (Oct 12 1993) on Mon Jan 24 17:19:14 1994
 * Copyright © Acorn Computers Ltd, 1993
 */

#ifndef types_H
   #include "types.h"
#endif

/*SWI names and SWI reason codes*/
#define Service_ReleaseFIQ 0xB
#define Service_ClaimFIQ 0xC
#define Service_Reset 0x27
#define Service_KeyHandler 0x44
#define Service_ModeChange 0x46
#define Service_ClaimFIQInBackground 0x47
#define Service_MemoryMoved 0x4E
#define Service_ModeExtension 0x50
#define Service_ModeTranslation 0x51
#define Service_ValidateAddress 0x6D
#define Service_ModeMonitorLeadTranslation 0x76
#define Service_ModeChanging 0x89
#define OS_WriteC 0x0
#define XOS_WriteC 0x20000
#define OS_WriteS 0x1
#define XOS_WriteS 0x20001
#define OS_Write0 0x2
#define XOS_Write0 0x20002
#define OS_NewLine 0x3
#define XOS_NewLine 0x20003
#define OS_ReadC 0x4
#define XOS_ReadC 0x20004
#define OS_CLI 0x5
#define XOS_CLI 0x20005
#define OS_Byte 0x6
#define XOS_Byte 0x20006
#define OS_Word 0x7
#define XOS_Word 0x20007
#define OS_File 0x8
#define XOS_File 0x20008
#define OS_Args 0x9
#define XOS_Args 0x20009
#define OS_BGet 0xA
#define XOS_BGet 0x2000A
#define OS_BPut 0xB
#define XOS_BPut 0x2000B
#define OS_GBPB 0xC
#define XOS_GBPB 0x2000C
#define OS_Find 0xD
#define XOS_Find 0x2000D
#define OS_ReadLine 0xE
#define XOS_ReadLine 0x2000E
#define OS_Control 0xF
#define XOS_Control 0x2000F
#define OS_GetEnv 0x10
#define XOS_GetEnv 0x20010
#define OS_Exit 0x11
#define XOS_Exit 0x20011
#define OS_SetEnv 0x12
#define XOS_SetEnv 0x20012
#define OS_IntOn 0x13
#define XOS_IntOn 0x20013
#define OS_IntOff 0x14
#define XOS_IntOff 0x20014
#define OS_CallBack 0x15
#define XOS_CallBack 0x20015
#define OS_EnterOS 0x16
#define XOS_EnterOS 0x20016
#define OS_BreakPt 0x17
#define XOS_BreakPt 0x20017
#define OS_BreakCtrl 0x18
#define XOS_BreakCtrl 0x20018
#define OS_UnusedSWI 0x19
#define XOS_UnusedSWI 0x20019
#define OS_UpdateMEMC 0x1A
#define XOS_UpdateMEMC 0x2001A
#define OS_SetCallBack 0x1B
#define XOS_SetCallBack 0x2001B
#define OS_Mouse 0x1C
#define XOS_Mouse 0x2001C
#define OS_Heap 0x1D
#define XOS_Heap 0x2001D
#define OS_Module 0x1E
#define XOS_Module 0x2001E
#define OS_Claim 0x1F
#define XOS_Claim 0x2001F
#define OS_Release 0x20
#define XOS_Release 0x20020
#define OS_ReadUnsigned 0x21
#define XOS_ReadUnsigned 0x20021
#define OS_GenerateEvent 0x22
#define XOS_GenerateEvent 0x20022
#define OS_ReadVarVal 0x23
#define XOS_ReadVarVal 0x20023
#define OS_SetVarVal 0x24
#define XOS_SetVarVal 0x20024
#define OS_GSInit 0x25
#define XOS_GSInit 0x20025
#define OS_GSRead 0x26
#define XOS_GSRead 0x20026
#define OS_GSTrans 0x27
#define XOS_GSTrans 0x20027
#define OS_BinaryToDecimal 0x28
#define XOS_BinaryToDecimal 0x20028
#define OS_FSControl 0x29
#define XOS_FSControl 0x20029
#define OS_ChangeDynamicArea 0x2A
#define XOS_ChangeDynamicArea 0x2002A
#define OS_GenerateError 0x2B
#define XOS_GenerateError 0x2002B
#define OS_ReadEscapeState 0x2C
#define XOS_ReadEscapeState 0x2002C
#define OS_EvaluateExpression 0x2D
#define XOS_EvaluateExpression 0x2002D
#define OS_SpriteOp 0x2E
#define XOS_SpriteOp 0x2002E
#define OS_ReadPalette 0x2F
#define XOS_ReadPalette 0x2002F
#define OS_ServiceCall 0x30
#define XOS_ServiceCall 0x20030
#define OS_ReadVduVariables 0x31
#define XOS_ReadVduVariables 0x20031
#define OS_ReadPoint 0x32
#define XOS_ReadPoint 0x20032
#define OS_UpCall 0x33
#define XOS_UpCall 0x20033
#define OS_CallAVector 0x34
#define XOS_CallAVector 0x20034
#define OS_ReadModeVariable 0x35
#define XOS_ReadModeVariable 0x20035
#define OS_RemoveCursors 0x36
#define XOS_RemoveCursors 0x20036
#define OS_RestoreCursors 0x37
#define XOS_RestoreCursors 0x20037
#define OS_SWINumberToString 0x38
#define XOS_SWINumberToString 0x20038
#define OS_SWINumberFromString 0x39
#define XOS_SWINumberFromString 0x20039
#define OS_ValidateAddress 0x3A
#define XOS_ValidateAddress 0x2003A
#define OS_CallAfter 0x3B
#define XOS_CallAfter 0x2003B
#define OS_CallEvery 0x3C
#define XOS_CallEvery 0x2003C
#define OS_RemoveTickerEvent 0x3D
#define XOS_RemoveTickerEvent 0x2003D
#define OS_InstallKeyHandler 0x3E
#define XOS_InstallKeyHandler 0x2003E
#define OS_CheckModeValid 0x3F
#define XOS_CheckModeValid 0x2003F
#define OS_ChangeEnvironment 0x40
#define XOS_ChangeEnvironment 0x20040
#define OS_ClaimScreenMemory 0x41
#define XOS_ClaimScreenMemory 0x20041
#define OS_ReadMonotonicTime 0x42
#define XOS_ReadMonotonicTime 0x20042
#define OS_SubstituteArgs 0x43
#define XOS_SubstituteArgs 0x20043
#define OS_PrettyPrint 0x44
#define XOS_PrettyPrint 0x20044
#define OS_Plot 0x45
#define XOS_Plot 0x20045
#define OS_WriteN 0x46
#define XOS_WriteN 0x20046
#define OS_AddToVector 0x47
#define XOS_AddToVector 0x20047
#define OS_WriteEnv 0x48
#define XOS_WriteEnv 0x20048
#define OS_ReadArgs 0x49
#define XOS_ReadArgs 0x20049
#define OS_ReadRAMFsLimits 0x4A
#define XOS_ReadRAMFsLimits 0x2004A
#define OS_ClaimDeviceVector 0x4B
#define XOS_ClaimDeviceVector 0x2004B
#define OS_ReleaseDeviceVector 0x4C
#define XOS_ReleaseDeviceVector 0x2004C
#define OS_DelinkApplication 0x4D
#define XOS_DelinkApplication 0x2004D
#define OS_RelinkApplication 0x4E
#define XOS_RelinkApplication 0x2004E
#define OS_HeapSort 0x4F
#define XOS_HeapSort 0x2004F
#define OS_ExitAndDie 0x50
#define XOS_ExitAndDie 0x20050
#define OS_ReadMemMapInfo 0x51
#define XOS_ReadMemMapInfo 0x20051
#define OS_ReadMemMapEntries 0x52
#define XOS_ReadMemMapEntries 0x20052
#define OS_SetMemMapEntries 0x53
#define XOS_SetMemMapEntries 0x20053
#define OS_AddCallBack 0x54
#define XOS_AddCallBack 0x20054
#define OS_ReadDefaultHandler 0x55
#define XOS_ReadDefaultHandler 0x20055
#define OS_SetECFOrigin 0x56
#define XOS_SetECFOrigin 0x20056
#define OS_SerialOp 0x57
#define XOS_SerialOp 0x20057
#define OS_ReadSysInfo 0x58
#define XOS_ReadSysInfo 0x20058
#define OS_Confirm 0x59
#define XOS_Confirm 0x20059
#define OS_ChangedBox 0x5A
#define XOS_ChangedBox 0x2005A
#define OS_CRC 0x5B
#define XOS_CRC 0x2005B
#define OS_ReadDynamicArea 0x5C
#define XOS_ReadDynamicArea 0x2005C
#define OS_PrintChar 0x5D
#define XOS_PrintChar 0x2005D
#define OS_ChangeRedirection 0x5E
#define XOS_ChangeRedirection 0x2005E
#define OS_RemoveCallBack 0x5F
#define XOS_RemoveCallBack 0x2005F
#define OS_FindMemMapEntries 0x60
#define XOS_FindMemMapEntries 0x20060
#define OS_SetColour 0x61
#define XOS_SetColour 0x20061
#define OS_ConvertStandardDateAndTime 0xC0
#define XOS_ConvertStandardDateAndTime 0x200C0
#define OS_ConvertDateAndTime 0xC1
#define XOS_ConvertDateAndTime 0x200C1
#define OS_ConvertHex1 0xD0
#define XOS_ConvertHex1 0x200D0
#define OS_ConvertHex2 0xD1
#define XOS_ConvertHex2 0x200D1
#define OS_ConvertHex4 0xD2
#define XOS_ConvertHex4 0x200D2
#define OS_ConvertHex6 0xD3
#define XOS_ConvertHex6 0x200D3
#define OS_ConvertHex8 0xD4
#define XOS_ConvertHex8 0x200D4
#define OS_ConvertCardinal1 0xD5
#define XOS_ConvertCardinal1 0x200D5
#define OS_ConvertCardinal2 0xD6
#define XOS_ConvertCardinal2 0x200D6
#define OS_ConvertCardinal3 0xD7
#define XOS_ConvertCardinal3 0x200D7
#define OS_ConvertCardinal4 0xD8
#define XOS_ConvertCardinal4 0x200D8
#define OS_ConvertInteger1 0xD9
#define XOS_ConvertInteger1 0x200D9
#define OS_ConvertInteger2 0xDA
#define XOS_ConvertInteger2 0x200DA
#define OS_ConvertInteger3 0xDB
#define XOS_ConvertInteger3 0x200DB
#define OS_ConvertInteger4 0xDC
#define XOS_ConvertInteger4 0x200DC
#define OS_ConvertBinary1 0xDD
#define XOS_ConvertBinary1 0x200DD
#define OS_ConvertBinary2 0xDE
#define XOS_ConvertBinary2 0x200DE
#define OS_ConvertBinary3 0xDF
#define XOS_ConvertBinary3 0x200DF
#define OS_ConvertBinary4 0xE0
#define XOS_ConvertBinary4 0x200E0
#define OS_ConvertSpacedCardinal1 0xE1
#define XOS_ConvertSpacedCardinal1 0x200E1
#define OS_ConvertSpacedCardinal2 0xE2
#define XOS_ConvertSpacedCardinal2 0x200E2
#define OS_ConvertSpacedCardinal3 0xE3
#define XOS_ConvertSpacedCardinal3 0x200E3
#define OS_ConvertSpacedCardinal4 0xE4
#define XOS_ConvertSpacedCardinal4 0x200E4
#define OS_ConvertSpacedInteger1 0xE5
#define XOS_ConvertSpacedInteger1 0x200E5
#define OS_ConvertSpacedInteger2 0xE6
#define XOS_ConvertSpacedInteger2 0x200E6
#define OS_ConvertSpacedInteger3 0xE7
#define XOS_ConvertSpacedInteger3 0x200E7
#define OS_ConvertSpacedInteger4 0xE8
#define XOS_ConvertSpacedInteger4 0x200E8
#define OS_ConvertFixedNetStation 0xE9
#define XOS_ConvertFixedNetStation 0x200E9
#define OS_ConvertNetStation 0xEA
#define XOS_ConvertNetStation 0x200EA
#define OS_ConvertFixedFileSize 0xEB
#define XOS_ConvertFixedFileSize 0x200EB
#define OS_ConvertFileSize 0xEC
#define XOS_ConvertFileSize 0x200EC
#define OS_WriteI 0x100
#define XOS_WriteI 0x20100
#define OS_Null 0x100
#define XOS_Null 0x20100
#define OS_CharToPrinter 0x101
#define XOS_CharToPrinter 0x20101
#define OS_PrinterOn 0x102
#define XOS_PrinterOn 0x20102
#define OS_PrinterOff 0x103
#define XOS_PrinterOff 0x20103
#define OS_SplitCursors 0x104
#define XOS_SplitCursors 0x20104
#define OS_JoinCursors 0x105
#define XOS_JoinCursors 0x20105
#define OS_VDUOn 0x106
#define XOS_VDUOn 0x20106
#define OS_Bell 0x107
#define XOS_Bell 0x20107
#define OS_Backspace 0x108
#define XOS_Backspace 0x20108
#define OS_Tab 0x109
#define XOS_Tab 0x20109
#define OS_Linefeed 0x10A
#define XOS_Linefeed 0x2010A
#define OS_VerticalTab 0x10B
#define XOS_VerticalTab 0x2010B
#define OS_ClS 0x10C
#define XOS_ClS 0x2010C
#define OS_Return 0x10D
#define XOS_Return 0x2010D
#define OS_PageModeOn 0x10E
#define XOS_PageModeOn 0x2010E
#define OS_PageModeOff 0x10F
#define XOS_PageModeOff 0x2010F
#define OS_ClG 0x110
#define XOS_ClG 0x20110
#define OS_SetTextColour 0x111
#define XOS_SetTextColour 0x20111
#define OS_SetGCOL 0x112
#define XOS_SetGCOL 0x20112
#define OS_SetPalette 0x113
#define XOS_SetPalette 0x20113
#define OS_ResetColours 0x114
#define XOS_ResetColours 0x20114
#define OS_VDUOff 0x115
#define XOS_VDUOff 0x20115
#define OS_Mode 0x116
#define XOS_Mode 0x20116
#define OS_Misc 0x117
#define XOS_Misc 0x20117
#define OS_SetGraphicsWindow 0x118
#define XOS_SetGraphicsWindow 0x20118
#define OS_ResetWindows 0x11A
#define XOS_ResetWindows 0x2011A
#define OS_Escape 0x11B
#define XOS_Escape 0x2011B
#define OS_SetTextWindow 0x11C
#define XOS_SetTextWindow 0x2011C
#define OS_SetGraphicsOrigin 0x11D
#define XOS_SetGraphicsOrigin 0x2011D
#define OS_HomeTextCursor 0x11E
#define XOS_HomeTextCursor 0x2011E
#define OS_SetTextCursor 0x11F
#define XOS_SetTextCursor 0x2011F
#define OS_Space 0x120
#define XOS_Space 0x20120
#define OS_Delete 0x17F
#define XOS_Delete 0x2017F

/*Structure and union declarations*/
typedef struct os_colour_pair os_colour_pair;
typedef struct os_palette os_palette;
typedef struct os_sprite_palette os_sprite_palette;
typedef struct os_bcd_time os_bcd_time;
typedef struct os_station_number os_station_number;
typedef struct os_box os_box;
typedef struct os_factors os_factors;
typedef struct os_change_box os_change_box;
typedef struct os_error os_error;
typedef struct os_time os_time;
typedef struct os_coord os_coord;
typedef struct os_trfm os_trfm;
typedef struct os_hom_trfm os_hom_trfm;
typedef struct os_pgm os_pgm;
typedef struct oswordmouseop_bbox oswordmouseop_bbox;
typedef struct os_register_block os_register_block;
typedef struct os_vdu_var_list os_vdu_var_list;
typedef struct os_gi os_gi;
typedef struct os_gs os_gs;
typedef struct os_mem_map_request os_mem_map_request;
typedef struct os_mem_map_request_list os_mem_map_request_list;

/*Type definitions*/
typedef int os_t;

typedef byte os_f;

typedef byte os_gcol;

typedef byte os_tint;

typedef byte os_action;

typedef bytes os_colour;

typedef int os_colour_number;

struct os_colour_pair
   {  os_colour on;
      os_colour off;
   };

struct os_palette
   {  os_colour (entries) [UNKNOWN];
   };

#define os_PALETTE(N) \
      struct \
         {  os_colour (entries) [N]; \
         }

#define os_SIZEOF_PALETTE(N) \
      ((N)*sizeof ((os_palette *) NULL)->entries)

struct os_sprite_palette
   {  os_colour_pair (entries) [UNKNOWN];
   };

#define os_SPRITE_PALETTE(N) \
      struct \
         {  os_colour_pair (entries) [N]; \
         }

#define os_SIZEOF_SPRITE_PALETTE(N) \
      ((N)*sizeof ((os_sprite_palette *) NULL)->entries)

struct os_bcd_time
   {  byte year;
      byte month;
      byte date;
      byte weekday;
      byte hour;
      byte minute;
      byte second;
   };

struct os_station_number
   {  int station;
      int net;
   };

struct os_box
   {  int x0;
      int y0;
      int x1;
      int y1;
   };

struct os_factors
   {  int xmul;
      int ymul;
      int xdiv;
      int ydiv;
   };

struct os_change_box
   {  int state;
      os_box box;
   };

struct os_error
   {  int errnum;
      char (errmess) [252];
   };

struct os_time
   {  byte (b) [5];
   };

struct os_coord
   {  int x;
      int y;
   };

struct os_trfm
   {  int ((entries) [3]) [2];
   };

struct os_hom_trfm
   {  int ((entries) [2]) [2];
   };

struct os_pgm
   {  os_coord (coords) [4];
   };

struct oswordmouseop_bbox
   {  byte (reserved) [3];
      byte reason_code;
      short x0;
      short y0;
      short x1;
      short y1;
   };

struct os_register_block
   {  int (registers) [16];
   };

struct os_vdu_var_list
   {  int (var) [UNKNOWN];
   };

#define os_VDU_VAR_LIST(N) \
      struct \
         {  int (var) [N]; \
         }

#define os_SIZEOF_VDU_VAR_LIST(N) \
      ((N)*sizeof ((os_vdu_var_list *) NULL)->var)

struct os_gi
   {  byte type;
      byte (i) [4];
   };

struct os_gs
   {  short len;
      char (s) [UNKNOWN];
   };

#define os_GS(N) \
      struct \
         {  short len; \
            char (s) [N]; \
         }

#define os_SIZEOF_GS(N) \
      (offsetof (os_gs, s) + (N)*sizeof ((os_gs *) NULL)->s)

struct os_mem_map_request
   {  int page_no;
      byte *(map);
      bits protection;
   };

struct os_mem_map_request_list
   {  os_mem_map_request (requests) [UNKNOWN];
   };

#define os_MEM_MAP_REQUEST_LIST(N) \
      struct \
         {  os_mem_map_request (requests) [N]; \
         }

#define os_SIZEOF_MEM_MAP_REQUEST_LIST(N) \
      ((N)*sizeof ((os_mem_map_request_list *) NULL)->requests)

/*Constant definitions*/
#define os_ERROR_LIMIT 252
#define os_RSHIFT 8
#define os_GSHIFT 16
#define os_BSHIFT 24
#define os_R ((bits) 0xFF00u)
#define os_G ((bits) 0xFF0000u)
#define os_B ((bits) 0xFF000000u)
#define os_COLOUR_RANGE 255
#define os_INCH 180
#define osbyte_VERSION ((byte) 0)
#define osbyte_USER_FLAG ((byte) 1)
#define osbyte_INPUT_STREAM ((byte) 2)
#define osbyte_OUTPUT_STREAMS ((byte) 3)
#define osbyte_INTERPRETATION_ARROWS ((byte) 4)
#define osbyte_PRINTER ((byte) 5)
#define osbyte_IGNORE_CHAR ((byte) 6)
#define osbyte_SERIAL_RECEIVE_RATE ((byte) 7)
#define osbyte_SERIAL_TRANSMIT_RATE ((byte) 8)
#define osbyte_FIRST_COLOUR_DURATION ((byte) 9)
#define osbyte_SECOND_COLOUR_DURATION ((byte) 10)
#define osbyte_KEYBOARD_DELAY ((byte) 11)
#define osbyte_KEYBOARD_RATE ((byte) 12)
#define osbyte_DISABLE_EVENT ((byte) 13)
#define osbyte_ENABLE_EVENT ((byte) 14)
#define osbyte_FLUSH_BUFFERS ((byte) 15)
#define osbyte_RESET_FUNCTION_KEYS ((byte) 18)
#define osbyte_AWAIT_VSYNC ((byte) 19)
#define osbyte_RESET_SYSTEM_FONT ((byte) 20)
#define osbyte_FLUSH_BUFFER ((byte) 21)
#define osbyte_RESET_SYSTEM_CHARS ((byte) 25)
#define osbyte_SELECT_POINTER ((byte) 106)
#define osbyte_COUNTRY_NUMBER ((byte) 70)
#define osbyte_OUTPUT_SCREEN_BANK ((byte) 112)
#define osbyte_DISPLAY_SCREEN_BANK ((byte) 113)
#define osbyte_SHADOW_STATE ((byte) 114)
#define osbyte_VDU_STATE ((byte) 117)
#define osbyte_UPDATE_KEYBOARD ((byte) 118)
#define osbyte_LOCK_REPEAT ((byte) 120)
#define osbyte_SCAN_KEYBOARD ((byte) 121)
#define osbyte_SCAN_KEYBOARD_LIMITED ((byte) 122)
#define osbyte_CLEAR_ESCAPE ((byte) 124)
#define osbyte_SET_ESCAPE ((byte) 125)
#define osbyte_ACKNOWLEDGE_ESCAPE ((byte) 126)
#define osbyte_EOF ((byte) 127)
#define osbyte_POINTER_POSITION ((byte) 128)
#define osbyte_BUFFER_STATE ((byte) 128)
#define osbyte_IN_KEY ((byte) 129)
#define osbyte_TEXT_CURSOR_POSITION ((byte) 134)
#define osbyte_SCREEN_CHAR ((byte) 135)
#define osbyte_BUFFER_INSERT ((byte) 138)
#define osbyte_OPT ((byte) 139)
#define osbyte_SERVICE_CALL ((byte) 143)
#define osbyte_TV ((byte) 144)
#define osbyte_BUFFER_REMOVE ((byte) 145)
#define osbyte_BUFFER_STATUS ((byte) 152)
#define osbyte_TYPE_CHAR ((byte) 153)
#define osbyte_SERIAL_STATE ((byte) 156)
#define osbyte_READ_VDU_VARIABLE ((byte) 160)
#define osbyte_READ_CMOS ((byte) 161)
#define osbyte_WRITE_CMOS ((byte) 162)
#define osbyte_GRAPHICS_INFO ((byte) 163)
#define osbyte_OUTPUT_CURSOR_POSITION ((byte) 165)
#define osbyte_VAR_VSYNC_COUNTER ((byte) 176)
#define osbyte_VAR_INPUT_STREAM ((byte) 177)
#define osbyte_VAR_KEYBOARD_SEMAPHORE ((byte) 178)
#define osbyte_VAR_SERIAL_INTERPRETATION ((byte) 181)
#define osbyte_VAR_IGNORE_STATE ((byte) 182)
#define osbyte_VAR_SERIAL_STATE ((byte) 192)
#define osbyte_VAR_FLASH_COUNTER ((byte) 193)
#define osbyte_VAR_SECOND_COLOUR_DURATION ((byte) 194)
#define osbyte_VAR_FIRST_COLOUR_DURATION ((byte) 195)
#define osbyte_VAR_KEYBOARD_DELAY ((byte) 196)
#define osbyte_VAR_KEYBOARD_RATE ((byte) 197)
#define osbyte_VAR_EXEC_HANDLE ((byte) 198)
#define osbyte_VAR_SPOOL_HANDLE ((byte) 199)
#define osbyte_VAR_RESET_EFFECTS ((byte) 200)
#define osbyte_VAR_KEYBOARD_DISABLE ((byte) 201)
#define osbyte_VAR_KEYBOARD_STATE ((byte) 202)
#define osbyte_VAR_SERIAL_THRESHOLD ((byte) 203)
#define osbyte_VAR_SERIAL_BUFFER_STATE ((byte) 204)
#define osbyte_VAR_BELL_CHANNEL ((byte) 211)
#define osbyte_VAR_BELL_VOLUME ((byte) 212)
#define osbyte_VAR_BELL_FREQUENCY ((byte) 213)
#define osbyte_VAR_BELL_DURATION ((byte) 214)
#define osbyte_VAR_PENDING_KEY_LENGTH ((byte) 216)
#define osbyte_VAR_PAGE_LENGTH ((byte) 217)
#define osbyte_VAR_VDU_QUEUE_LENGTH ((byte) 218)
#define osbyte_VAR_TAB_CHAR ((byte) 219)
#define osbyte_VAR_ESCAPE_CHAR ((byte) 220)
#define osbyte_VAR_INTERPRETATION_GROUP4 ((byte) 221)
#define osbyte_VAR_INTERPRETATION_GROUP5 ((byte) 222)
#define osbyte_VAR_INTERPRETATION_GROUP6 ((byte) 223)
#define osbyte_VAR_INTERPRETATION_GROUP7 ((byte) 224)
#define osbyte_VAR_INTERPRETATION_GROUP0 ((byte) 225)
#define osbyte_VAR_INTERPRETATION_GROUP1 ((byte) 226)
#define osbyte_VAR_INTERPRETATION_GROUP2 ((byte) 227)
#define osbyte_VAR_INTERPRETATION_GROUP3 ((byte) 228)
#define osbyte_VAR_ESCAPE_STATE ((byte) 229)
#define osbyte_VAR_ESCAPE_EFFECTS ((byte) 230)
#define osbyte_VAR_OUTPUT_STREAMS ((byte) 236)
#define osbyte_VAR_INTERPRETATION_ARROWS ((byte) 237)
#define osbyte_VAR_INTERPRETATION_KEYPAD ((byte) 238)
#define osbyte_VAR_COUNTRY_NUMBER ((byte) 240)
#define osbyte_VAR_USER_FLAG ((byte) 241)
#define osbyte_VAR_SERIAL_RATE ((byte) 242)
#define osbyte_VAR_PRINTER ((byte) 245)
#define osbyte_VAR_IGNORE_CHAR ((byte) 246)
#define osbyte_VAR_INTERPRETATION_BREAK ((byte) 247)
#define osbyte_VAR_OUTPUT_SCREEN_BANK ((byte) 250)
#define osbyte_VAR_DISPLAY_SCREEN_BANK ((byte) 251)
#define osbyte_VAR_LAST_RESET ((byte) 253)
#define osbyte_VAR_INTERPRETATION_SHIFTING ((byte) 254)
#define osbyte_VAR_BOOT_OPTION ((byte) 255)
#define osword_READ_LINE ((byte) 0)
#define osword_READ_TIME ((byte) 1)
#define osword_WRITE_TIME ((byte) 2)
#define osword_READ_INTERVAL_TIME ((byte) 3)
#define osword_WRITE_INTERVAL_TIME ((byte) 4)
#define osword_READ_GCOL ((byte) 9)
#define osword_READ_CHAR_DEFN ((byte) 10)
#define osword_READ_COLOUR ((byte) 11)
#define osword_WRITE_COLOUR ((byte) 12)
#define osword_READ_CURSOR_POSITION ((byte) 13)
#define osword_TIME_READ_OP ((byte) 14)
#define osword_TIME_WRITE_OP ((byte) 15)
#define osword_MOUSE_OP ((byte) 21)
#define osword_WRITE_SCREEN_BASE ((byte) 22)
#define os_VDU_NULL ((char) '\x00')
#define os_VDU_CHAR_TO_PRINTER ((char) '\x01')
#define os_VDU_PRINTER_ON ((char) '\x02')
#define os_VDU_PRINTER_OFF ((char) '\x03')
#define os_VDU_GRAPH_TEXT_OFF ((char) '\x04')
#define os_VDU_GRAPH_TEXT_ON ((char) '\x05')
#define os_VDU_SCREEN_ON ((char) '\x06')
#define os_VDU_BELL ((char) '\x07')
#define os_VDU_BACKSPACE ((char) '\x08')
#define os_VDU_TAB ((char) '\x09')
#define os_VDU_LINEFEED ((char) '\x0A')
#define os_VDU_VERTICAL_TAB ((char) '\x0B')
#define os_VDU_CLS ((char) '\x0C')
#define os_VDU_RETURN ((char) '\x0D')
#define os_VDU_PAGE_MODE_ON ((char) '\x0E')
#define os_VDU_PAGE_MODE_OFF ((char) '\x0F')
#define os_VDU_CLG ((char) '\x10')
#define os_VDU_SET_TEXT_COLOUR ((char) '\x11')
#define os_VDU_SET_GCOL ((char) '\x12')
#define os_VDU_SET_PALETTE ((char) '\x13')
#define os_VDU_RESET_COLOURS ((char) '\x14')
#define os_VDU_SCREEN_OFF ((char) '\x15')
#define os_VDU_MODE ((char) '\x16')
#define os_VDU_MISC ((char) '\x17')
#define os_VDU_SET_GRAPHICS_WINDOW ((char) '\x18')
#define os_VDU_PLOT ((char) '\x19')
#define os_VDU_RESET_WINDOWS ((char) '\x1A')
#define os_VDU_ESCAPE ((char) '\x1B')
#define os_VDU_SET_TEXT_WINDOW ((char) '\x1C')
#define os_VDU_SET_GRAPHICS_ORIGIN ((char) '\x1D')
#define os_VDU_HOME_TEXT_CURSOR ((char) '\x1E')
#define os_VDU_SET_TEXT_CURSOR ((char) '\x1F')
#define os_VDU_DELETE ((char) '\x7F')
#define os_MISC_INTERLACE ((char) '\x00')
#define os_MISC_CURSOR ((char) '\x01')
#define os_MISC_SET_ECF1 ((char) '\x02')
#define os_MISC_SET_ECF2 ((char) '\x03')
#define os_MISC_SET_ECF3 ((char) '\x04')
#define os_MISC_SET_ECF4 ((char) '\x05')
#define os_MISC_SET_DOT_STYLE ((char) '\x06')
#define os_MISC_SCROLL ((char) '\x07')
#define os_MISC_CLEAR_REGION ((char) '\x08')
#define os_MISC_SET_FLASH1 ((char) '\x09')
#define os_MISC_SET_FLASH2 ((char) '\x0A')
#define os_MISC_SET_BBCECF ((char) '\x0B')
#define os_MISC_SET_UNPACKED_ECF1 ((char) '\x0C')
#define os_MISC_SET_UNPACKED_ECF2 ((char) '\x0D')
#define os_MISC_SET_UNPACKED_ECF3 ((char) '\x0E')
#define os_MISC_SET_UNPACKED_ECF4 ((char) '\x0F')
#define os_MISC_SET_CURSOR_MOVEMENT ((char) '\x10')
#define os_MISC_MISC ((char) '\x11')
#define os_MISC_SET_TEXT_FG_TINT ((char) '\x00')
#define os_MISC_SET_TEXT_BG_TINT ((char) '\x01')
#define os_MISC_SET_GRAPHICS_FG_TINT ((char) '\x02')
#define os_MISC_SET_GRAPHICS_BG_TINT ((char) '\x03')
#define os_MISC_SET_ECF_INTERPRETATION ((char) '\x04')
#define os_MISC_INVERT_TEXT ((char) '\x05')
#define os_MISC_SET_ECF_ORIGIN ((char) '\x06')
#define os_MISC_SET_CHAR_SIZE ((char) '\x07')
#define os_ACTION_OVERWRITE ((os_action) 0)
#define os_ACTION_DISJOIN ((os_action) 1)
#define os_ACTION_CONJOIN ((os_action) 2)
#define os_ACTION_EXCLUSIVE_DISJOIN ((os_action) 3)
#define os_ACTION_INVERT ((os_action) 4)
#define os_ACTION_IDENTITY ((os_action) 5)
#define os_ACTION_CONJOIN_NEGATION ((os_action) 6)
#define os_ACTION_DISJOIN_NEGATION ((os_action) 7)
#define os_ACTION_USE_MASK ((os_action) 8)
#define os_ACTION_USE_ECF1 ((os_action) 16)
#define os_ACTION_USE_ECF2 ((os_action) 32)
#define os_ACTION_USE_ECF3 ((os_action) 48)
#define os_ACTION_USE_ECF4 ((os_action) 64)
#define os_ACTION_USE_GIANT_ECF ((os_action) 80)
#define os_GCOL_SET_FG ((os_gcol) 0)
#define os_GCOL_SET_BG ((os_gcol) 128)
#define os_PLOT_SOLID 0
#define os_PLOT_SOLID_EX_END 8
#define os_PLOT_DOTTED 16
#define os_PLOT_DOTTED_EX_END 24
#define os_PLOT_SOLID_EX_START 32
#define os_PLOT_SOLID_EX_BOTH 40
#define os_PLOT_DOTTED_EX_START 48
#define os_PLOT_DOTTED_EX_BOTH 56
#define os_PLOT_POINT 64
#define os_PLOT_HORIZONTAL_TO_NON_BG 72
#define os_PLOT_TRIANGLE 80
#define os_PLOT_RIGHT_TO_BG 88
#define os_PLOT_RECTANGLE 96
#define os_PLOT_HORIZONTAL_TO_FG 104
#define os_PLOT_PARALLELOGRAM 112
#define os_PLOT_RIGHT_TO_NON_FG 120
#define os_PLOT_FLOOD_TO_NON_BG 128
#define os_PLOT_FLOOD_TO_FG 136
#define os_PLOT_CIRCLE_OUTLINE 144
#define os_PLOT_CIRCLE 152
#define os_PLOT_ARC 160
#define os_PLOT_SEGMENT 168
#define os_PLOT_SECTOR 176
#define os_PLOT_BLOCK 184
#define os_PLOT_ELLIPSE_OUTLINE 192
#define os_PLOT_ELLIPSE 200
#define os_MOVE_BY 0
#define os_PLOT_BY 1
#define os_PLOT_INVERSE_BY 2
#define os_PLOT_BG_BY 3
#define os_MOVE_TO 4
#define os_PLOT_TO 5
#define os_PLOT_INVERSE_TO 6
#define os_PLOT_BG_TO 7
#define os_VARTYPE_STRING 0
#define os_VARTYPE_NUMBER 1
#define os_VARTYPE_MACRO 2
#define os_VARTYPE_EXPANDED 3
#define os_VARTYPE_CODE 16
#define os_RESET_SOFT 0
#define os_RESET_POWER_ON 1
#define os_RESET_HARD 2
#define os_MODEVAR_MODE_FLAGS 0
#define os_MODEVAR_RSCREEN 1
#define os_MODEVAR_BSCREEN 2
#define os_MODEVAR_NCOLOUR 3
#define os_MODEVAR_XEIG_FACTOR 4
#define os_MODEVAR_YEIG_FACTOR 5
#define os_MODEVAR_LINE_LENGTH 6
#define os_MODEVAR_SCREEN_SIZE 7
#define os_MODEVAR_YSHIFT_FACTOR 8
#define os_MODEVAR_LOG2_BPP 9
#define os_MODEVAR_LOG2_BPC 10
#define os_MODEVAR_XWIND_LIMIT 11
#define os_MODEVAR_YWIND_LIMIT 12
#define os_VDUVAR_GWL_COL 128
#define os_VDUVAR_GWB_ROW 129
#define os_VDUVAR_GWR_COL 130
#define os_VDUVAR_GWT_ROW 131
#define os_VDUVAR_TWL_COL 132
#define os_VDUVAR_TWB_ROW 133
#define os_VDUVAR_TWR_COL 134
#define os_VDUVAR_TWT_ROW 135
#define os_VDUVAR_ORGX 136
#define os_VDUVAR_ORGY 137
#define os_VDUVAR_GCSX 138
#define os_VDUVAR_GCSY 139
#define os_VDUVAR_OLDER_CSX 140
#define os_VDUVAR_OLDER_CSY 141
#define os_VDUVAR_OLD_CSX 142
#define os_VDUVAR_OLD_CSY 143
#define os_VDUVAR_GCS_IX 144
#define os_VDUVAR_GCS_IY 145
#define os_VDUVAR_NEW_PTX 146
#define os_VDUVAR_NEW_PTY 147
#define os_VDUVAR_SCREEN_START 148
#define os_VDUVAR_DISPLAY_START 149
#define os_VDUVAR_TOTAL_SCREEN_SIZE 150
#define os_VDUVAR_GPLFMD 151
#define os_VDUVAR_GPLBMD 152
#define os_VDUVAR_GFCOL 153
#define os_VDUVAR_GBCOL 154
#define os_VDUVAR_TFORE_COL 155
#define os_VDUVAR_TBACK_COL 156
#define os_VDUVAR_GF_TINT 157
#define os_VDUVAR_GB_TINT 158
#define os_VDUVAR_TF_TINT 159
#define os_VDUVAR_TB_TINT 160
#define os_VDUVAR_MAX_MODE 161
#define os_VDUVAR_GCHAR_SIZEX 162
#define os_VDUVAR_GCHAR_SIZEY 163
#define os_VDUVAR_GCHAR_SPACEX 164
#define os_VDUVAR_GCHAR_SPACEY 165
#define os_VDUVAR_HLINE_ADDR 166
#define os_VDUVAR_TCHAR_SIZEX 167
#define os_VDUVAR_TCHAR_SIZEY 168
#define os_VDUVAR_TCHAR_SPACEX 169
#define os_VDUVAR_TCHAR_SPACEY 170
#define os_VDUVAR_GCOL_ORA_EOR_ADDR 171
#define os_VDUVAR_VIDC_CLOCK_SPEED 172
#define os_VDUVAR_WINDOW_WIDTH 256
#define os_VDUVAR_WINDOW_HEIGHT 257
#define os_FOREGROUND ((bits) 0x0u)
#define os_BACKGROUND ((bits) 0x80u)
#define os_COLOUR_TRANSPARENT ((os_colour) -1)
#define os_COLOUR_RED ((os_colour) 65280)
#define os_COLOUR_GREEN ((os_colour) 16711680)
#define os_COLOUR_BLUE ((os_colour) -16777216)
#define os_COLOUR_CYAN ((os_colour) -65536)
#define os_COLOUR_MAGENTA ((os_colour) -16711936)
#define os_COLOUR_YELLOW ((os_colour) 16776960)
#define os_COLOUR_WHITE ((os_colour) -256)
#define os_COLOUR_VERY_LIGHT_GREY ((os_colour) -572662528)
#define os_COLOUR_LIGHT_GREY ((os_colour) -1145324800)
#define os_COLOUR_MID_LIGHT_GREY ((os_colour) -1717987072)
#define os_COLOUR_MID_DARK_GREY ((os_colour) 2004317952)
#define os_COLOUR_DARK_GREY ((os_colour) 1431655680)
#define os_COLOUR_VERY_DARK_GREY ((os_colour) 858993408)
#define os_COLOUR_BLACK ((os_colour) 0)
#define os_COLOUR_DARK_BLUE ((os_colour) -1723596800)
#define os_COLOUR_LIGHT_YELLOW ((os_colour) 15658496)
#define os_COLOUR_LIGHT_GREEN ((os_colour) 13369344)
#define os_COLOUR_LIGHT_RED ((os_colour) 56576)
#define os_COLOUR_CREAM ((os_colour) -1141969408)
#define os_COLOUR_DARK_GREEN ((os_colour) 8934656)
#define os_COLOUR_ORANGE ((os_colour) 12320512)
#define os_COLOUR_LIGHT_BLUE ((os_colour) -4521984)
#define os_DEVICE_PRINTER_BUSY 0
#define os_DEVICE_SERIAL_RINGING 1
#define os_DEVICE_PRINTER_ACKNOWLEDGE 2
#define os_DEVICE_VSYNC 3
#define os_DEVICE_POWER_ON 4
#define os_DEVICE_IOC_TIMER0 5
#define os_DEVICE_IOC_TIMER1 6
#define os_DEVICE_FIQ_DOWNGRADE 7
#define os_DEVICE_EXPANSION_FIQ_DOWNGRADE 8
#define os_DEVICE_SOUND_BUFFER 9
#define os_DEVICE_SERIAL_CONTROLLER 10
#define os_DEVICE_HARD_DISC_CONTROLLER 11
#define os_DEVICE_FLOPPY_DISC_CHANGED 12
#define os_DEVICE_EXPANSION_CARD 13
#define os_DEVICE_KEYBOARD_TX_EMPTY 14
#define os_DEVICE_KEYBOARD_RX_FULL 15
#define os_DEVICE_PRINTER 0
#define os_DEVICE_BATTERY_WARNING 1
#define os_DEVICE_FLOPPY_DISC_INDEX 2
#define os_DEVICE_IDE_DISC 11
#define os_ERROR_NUMBER_SHIFT 0
#define os_ERROR_NUMBER ((bits) 0xFFu)
#define os_ERROR_SOURCE_SHIFT 8
#define os_ERROR_SOURCE ((bits) 0xFFFF00u)
#define os_ERROR_CATEGORY_SHIFT 24
#define os_ERROR_CATEGORY ((bits) 0x7000000u)
#define os_CATEGORY_UNCLASSIFIED 0
#define os_CATEGORY_INFORMATION 1
#define os_CATEGORY_WARNING 2
#define os_CATEGORY_SYSTEM 3
#define os_GLOBAL_ESCAPE 1
#define os_GLOBAL_FATAL 2
#define os_GLOBAL_IS_AFIL 3
#define os_GLOBAL_ISNT_FIL 4
#define os_GLOBAL_IS_ADIR 5
#define os_GLOBAL_ISNT_DIR 6
#define os_GLOBAL_NO_FILE 7
#define os_GLOBAL_NO_DIR 8
#define os_GLOBAL_NO_ANY 9
#define os_GLOBAL_TYPS_BAD 10
#define os_GLOBAL_BAD_REN 11
#define os_GLOBAL_BAD_ACC 12
#define os_GLOBAL_OPN_FILS 13
#define os_GLOBAL_BAD_NAME 14
#define os_GLOBAL_LONG_NAM 15
#define os_GLOBAL_CHANNEL 16
#define os_GLOBAL_BAD_SWI 17
#define os_GLOBAL_MOD_IN_US 18
#define os_GLOBAL_STR_OFLO 19
#define os_GLOBAL_NUM_OFLO 20
#define os_GLOBAL_BUF_OFLO 21
#define os_GLOBAL_BAD_STN 22
#define os_GLOBAL_BAD_NET 23
#define os_GLOBAL_FULL_NET 24
#define os_GLOBAL_NO_ECO 25
#define os_GLOBAL_BAD_READ 26
#define os_GLOBAL_BAD_WRT 27
#define os_GLOBAL_DATA_LST 28
#define os_GLOBAL_BAD_FS_OP 29
#define os_GLOBAL_FS_NO_RD 30
#define os_GLOBAL_FS_NO_WRT 31
#define os_GLOBAL_FS_IN_USE 32
#define os_GLOBAL_BAD_ADDRESS 33
#define os_GLOBAL_NO_STORE 34
#define os_GLOBAL_RAM_LOADC 35
#define os_GLOBAL_DDS0 36
#define os_GLOBAL_DDS1 37
#define os_GLOBAL_DDS2 38
#define os_GLOBAL_DDS3 39
#define os_GLOBAL_CSDS 40
#define os_GLOBAL_LDS 41
#define os_GLOBAL_URDS 42
#define os_GLOBAL_DR 43
#define os_GLOBAL_APP 44
#define os_GLOBAL_EX_DT 45
#define os_GLOBAL_EX_LD_EX 46
#define os_GLOBAL_USE_DESK 47
#define os_GLOBAL_APP_QUIT 48
#define os_GLOBAL_NO_MEM 49
#define os_GLOBAL_BAD_HARD 50
#define os_GLOBAL_BAD_PARM 51
#define os_GLOBAL_NO_WIMP 52
#define os_ERROR_ESCAPE 17
#define os_ERROR_BAD_MODE 25
#define os_ERROR_IS_ADIRECTORY 168
#define os_ERROR_TYPES_DONT_MATCH 175
#define os_ERROR_BAD_RENAME 176
#define os_ERROR_BAD_COPY 177
#define os_ERROR_OUTSIDE_FILE 183
#define os_ERROR_ACCESS_VIOLATION 189
#define os_ERROR_TOO_MANY_OPEN_FILES 192
#define os_ERROR_NOT_OPEN_FOR_UPDATE 193
#define os_ERROR_FILE_OPEN 194
#define os_ERROR_OBJECT_LOCKED 195
#define os_ERROR_ALREADY_EXISTS 196
#define os_ERROR_BAD_FILE_NAME 204
#define os_ERROR_FILE_NOT_FOUND 214
#define os_ERROR_SYNTAX 220
#define os_ERROR_BAD_NO_PARMS 220
#define os_ERROR_TOO_MANY_PARMS 220
#define os_ERROR_CHANNEL 222
#define os_ERROR_END_OF_FILE 223
#define os_ERROR_BAD_FILING_SYSTEM_NAME 248
#define os_ERROR_UNKNOWN_FILING_SYSTEM 248
#define os_ERROR_BAD_KEY 251
#define os_ERROR_BAD_ADDRESS 252
#define os_ERROR_BAD_STRING 253
#define os_ERROR_BAD_ALIAS_STRING 253
#define os_ERROR_BAD_PARM_STRING 253
#define os_ERROR_WILD_CARDS 253
#define os_ERROR_BAD_COMMAND 254
#define os_ERROR_BAD_MAC_VAL 288
#define os_ERROR_BAD_VAR_NAM 289
#define os_ERROR_BAD_VAR_TYPE 290
#define os_ERROR_VAR_NO_ROOM 291
#define os_ERROR_VAR_CANT_FIND 292
#define os_ERROR_VAR_TOO_LONG 293
#define os_ERROR_REDIRECT_FAIL 320
#define os_ERROR_STACK_FULL 321
#define os_ERROR_BAD_HEX 352
#define os_ERROR_BAD_EXPR 353
#define os_ERROR_BAD_BRA 354
#define os_ERROR_STK_OFLO 355
#define os_ERROR_MISS_OPN 356
#define os_ERROR_MISS_OPR 357
#define os_ERROR_BAD_INT 358
#define os_ERROR_STR_OFLO 359
#define os_ERROR_BAD_ITM 360
#define os_ERROR_DIV_ZERO 361
#define os_ERROR_BAD_BASE 362
#define os_ERROR_BAD_NUMB 363
#define os_ERROR_NUMB_TOO_BIG 364
#define os_ERROR_BAD_CLAIM_NUM 417
#define os_ERROR_BAD_RELEASE 418
#define os_ERROR_BAD_DEV_NO 419
#define os_ERROR_BAD_DEV_VEC_REL 420
#define os_ERROR_BAD_ENV_NUMBER 432
#define os_ERROR_CANT_CANCEL_QUIT 433
#define os_ERROR_CH_DYNAM_CAO 448
#define os_ERROR_CH_DYNAM_NOT_ALL_MOVED 449
#define os_ERROR_APL_WSPACE_IN_USE 450
#define os_ERROR_RAM_FS_UNCHANGEABLE 451
#define os_ERROR_OSCLI_LONG_LINE 480
#define os_ERROR_OSCLI_TOO_HARD 481
#define os_ERROR_RC_EXC 482
#define os_ERROR_RC_NEGATIVE 482
#define os_ERROR_SYS_HEAP_FULL 483
#define os_ERROR_BUFF_OVERFLOW 484
#define os_ERROR_BAD_TIME 485
#define os_ERROR_NO_SUCH_SWI 486
#define os_ERROR_UNIMPLEMENTED 487
#define os_ERROR_OUT_OF_RANGE 488
#define os_ERROR_NO_OSCLI_SPECIALS 489
#define os_ERROR_BAD_PARAMETERS 490
#define os_ERROR_ARG_REPEATED 491
#define os_ERROR_BAD_READ_SYS_INFO 492
#define os_ERROR_CDAT_STACK_OVERFLOW 704
#define os_ERROR_CDAT_BUFFER_OVERFLOW 705
#define os_ERROR_CDAT_BAD_FIELD 706
#define os_READ_CONTROL_TERMINATED ((bits) 0x80000000u)
#define os_READ_BYTE ((bits) 0x40000000u)
#define os_READ_LIMITED ((bits) 0x20000000u)
#define os_DESTROY_VAR (-1)
#define os_GS_TERMINATE_ON_SPACE ((bits) 0x20000000u)
#define os_GS_RETAIN_STICK ((bits) 0x40000000u)
#define os_GS_RETAIN_DOUBLE_QUOTE ((bits) 0x80000000u)
#define os_NONEXISTENT_MODE (-1)
#define os_NOT_ENOUGH_MEMORY_FOR_MODE (-2)
#define os_NO_ALTERNATIVE_MODE (-2)
#define os_HANDLER_MEMORY_LIMIT 0
#define os_HANDLER_UNDEFINED_INSTRUCTION 1
#define os_HANDLER_PREFETCH_ABORT 2
#define os_HANDLER_DATA_ABORT 3
#define os_HANDLER_ADDRESS_EXCEPTION 4
#define os_HANDLER_OTHER_EXCEPTIONS 5
#define os_HANDLER_ERROR 6
#define os_HANDLER_CALL_BACK 7
#define os_HANDLER_BREAK_PT 8
#define os_HANDLER_ESCAPE 9
#define os_HANDLER_EVENT 10
#define os_HANDLER_EXIT 11
#define os_HANDLER_UNUSED_SWI 12
#define os_HANDLER_EXCEPTION_REGISTERS 13
#define os_HANDLER_ALLPICATION_SPACE 14
#define os_HANDLER_CAO 15
#define os_HANDLER_UPCALL 16
#define os_SORT_CARDINAL ((void *) 0)
#define os_SORT_INTEGER ((void *) 1)
#define os_SORT_CARDINAL_POINTER ((void *) 2)
#define os_SORT_INTEGER_POINTER ((void *) 3)
#define os_SORT_CI_STRING ((void *) 4)
#define os_SORT_STRING ((void *) 5)
#define os_SORT_GIVEN_WORKSPACE ((bits) 0x20000000u)
#define os_SORT_BUILD_ARRAY ((bits) 0x40000000u)
#define os_SORT_OBJECTS ((bits) 0x80000000u)
#define os_AREA_SYSTEM_HEAP 0
#define os_AREA_RMA 1
#define os_AREA_SCREEN_MEMORY 2
#define os_AREA_SYSTEM_SPRITES 3
#define os_AREA_FONT_CACHE 4
#define os_AREA_RAM_DISC 5
#define os_COLOUR_SET_FG ((bits) 0x0u)
#define os_COLOUR_SET_BG ((bits) 0x10u)
#define os_COLOUR_GIVEN_PATTERN ((bits) 0x20u)
#define os_HEX1_LIMIT 1
#define os_HEX2_LIMIT 2
#define os_HEX4_LIMIT 4
#define os_HEX6_LIMIT 6
#define os_HEX8_LIMIT 8
#define os_CARDINAL1_LIMIT 3
#define os_CARDINAL2_LIMIT 5
#define os_CARDINAL3_LIMIT 8
#define os_CARDINAL4_LIMIT 10
#define os_INTEGER1_LIMIT 4
#define os_INTEGER2_LIMIT 6
#define os_INTEGER3_LIMIT 8
#define os_INTEGER4_LIMIT 11
#define os_BINARY1_LIMIT 8
#define os_BINARY2_LIMIT 16
#define os_BINARY3_LIMIT 24
#define os_BINARY4_LIMIT 32
#define os_SPACED_CARDINAL1_LIMIT 3
#define os_SPACED_CARDINAL2_LIMIT 6
#define os_SPACED_CARDINAL3_LIMIT 10
#define os_SPACED_CARDINAL4_LIMIT 13
#define os_SPACED_INTEGER1_LIMIT 4
#define os_SPACED_INTEGER2_LIMIT 7
#define os_SPACED_INTEGER3_LIMIT 10
#define os_SPACED_INTEGER4_LIMIT 14
#define os_FIXED_NET_STATION_LIMIT 7
#define os_NET_STATION_LIMIT 7
#define os_FIXED_FILE_SIZE_LIMIT 11
#define os_FILE_SIZE_LIMIT 11

#ifdef __cplusplus
   extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Function:      service_release_fiq()
 *
 * Description:   Calls reason code 11 of SWI &30
 */

extern os_error *xservice_release_fiq (void);
extern void service_release_fiq (void);

/* -------------------------------------------------------------------------
 * Function:      service_claim_fiq()
 *
 * Description:   Calls reason code 12 of SWI &30
 */

extern os_error *xservice_claim_fiq (void);
extern void service_claim_fiq (void);

/* -------------------------------------------------------------------------
 * Function:      service_reset()
 *
 * Description:   Calls reason code 39 of SWI &30
 */

extern os_error *xservice_reset (void);
extern void service_reset (void);

/* -------------------------------------------------------------------------
 * Function:      service_key_handler()
 *
 * Description:   Calls reason code 68 of SWI &30
 */

extern os_error *xservice_key_handler (void);
extern void service_key_handler (void);

/* -------------------------------------------------------------------------
 * Function:      service_mode_change()
 *
 * Description:   Calls reason code 70 of SWI &30
 */

extern os_error *xservice_mode_change (void);
extern void service_mode_change (void);

/* -------------------------------------------------------------------------
 * Function:      service_claim_fiq_in_background()
 *
 * Description:   Calls reason code 71 of SWI &30
 */

extern os_error *xservice_claim_fiq_in_background (void);
extern void service_claim_fiq_in_background (void);

/* -------------------------------------------------------------------------
 * Function:      service_memory_moved()
 *
 * Description:   Calls reason code 78 of SWI &30
 */

extern os_error *xservice_memory_moved (void);
extern void service_memory_moved (void);

/* -------------------------------------------------------------------------
 * Function:      service_mode_extension()
 *
 * Description:   Calls reason code 80 of SWI &30
 */

extern os_error *xservice_mode_extension (void);
extern void service_mode_extension (void);

/* -------------------------------------------------------------------------
 * Function:      service_mode_translation()
 *
 * Description:   Calls reason code 81 of SWI &30
 */

extern os_error *xservice_mode_translation (void);
extern void service_mode_translation (void);

/* -------------------------------------------------------------------------
 * Function:      service_validate_address()
 *
 * Description:   Calls reason code 109 of SWI &30
 */

extern os_error *xservice_validate_address (void);
extern void service_validate_address (void);

/* -------------------------------------------------------------------------
 * Function:      service_mode_monitor_lead_translation()
 *
 * Description:   Calls reason code 118 of SWI &30
 */

extern os_error *xservice_mode_monitor_lead_translation (void);
extern void service_mode_monitor_lead_translation (void);

/* -------------------------------------------------------------------------
 * Function:      service_mode_changing()
 *
 * Description:   Calls reason code 137 of SWI &30
 */

extern os_error *xservice_mode_changing (void);
extern void service_mode_changing (void);

/* -------------------------------------------------------------------------
 * Function:      os_writec()
 *
 * Description:   Calls SWI &0
 *
 * Input:         c - value of R0 on entry
 */

extern os_error *xos_writec (char c);
extern void os_writec (char c);


/* -------------------------------------------------------------------------
 * Function:      os_write0()
 *
 * Description:   Calls SWI &2
 *
 * Input:         s - value of R0 on entry
 */

extern os_error *xos_write0 (char *(s));
extern void os_write0 (char *(s));

/* -------------------------------------------------------------------------
 * Function:      os_new_line()
 *
 * Description:   Calls SWI &3
 */

extern os_error *xos_new_line (void);
extern void os_new_line (void);

/* -------------------------------------------------------------------------
 * Function:      os_readc()
 *
 * Description:   Calls SWI &4
 *
 * Output:        c - value of R0 on exit
 *                psr - processor status register on exit
 *
 * Returns:       c (non-X version only)
 */

extern os_error *xos_readc (char *(c),
      bits *psr);
extern char os_readc (char *(c),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_cli()
 *
 * Description:   Calls SWI &5
 *
 * Input:         command - value of R0 on entry
 */

extern os_error *xos_cli (char *(command));
extern void os_cli (char *(command));

/* -------------------------------------------------------------------------
 * Function:      os_byte()
 *
 * Description:   Calls SWI &6
 *
 * Input:         reason_code - value of R0 on entry
 *                r1 - value of R1 on entry
 *                r2 - value of R2 on entry
 *
 * Output:        r1_out - value of R1 on exit
 *                r2_out - value of R2 on exit
 */

extern os_error *xos_byte (int reason_code,
      int r1,
      int r2,
      int *(r1_out),
      int *(r2_out));
extern void os_byte (int reason_code,
      int r1,
      int r2,
      int *(r1_out),
      int *(r2_out));

/* -------------------------------------------------------------------------
 * Function:      osbyte_read()
 *
 *
 * Input:         var - value of R0 on entry
 *
 * Output:        value - value of R1 on exit
 *
 * Returns:       value (non-X version only)
 */

extern os_error *xosbyte_read (int var,
      int *(value));
extern int osbyte_read (int var,
      int *(value));

/* -------------------------------------------------------------------------
 * Function:      osbyte_write()
 *
 *
 * Input:         var - value of R0 on entry
 *                value - value of R1 on entry
 */

extern os_error *xosbyte_write (int var,
      int value);
extern void osbyte_write (int var,
      int value);

/* -------------------------------------------------------------------------
 * Function:      os_word()
 *
 * Description:   Calls SWI &7
 *
 * Input:         reason_code - value of R0 on entry
 *                block - value of R1 on entry
 */

extern os_error *xos_word (int reason_code,
      byte *(block));
extern void os_word (int reason_code,
      byte *(block));

/* -------------------------------------------------------------------------
 * Function:      oswordmouseop_bound()
 *
 *
 * Input:         bbox - value of R1 on entry
 */

extern os_error *xoswordmouseop_bound (oswordmouseop_bbox *(bbox));
extern void oswordmouseop_bound (oswordmouseop_bbox *(bbox));



/* -------------------------------------------------------------------------
 * Function:      os_bget()
 *
 * Description:   Calls SWI &A
 *
 * Input:         file - value of R1 on entry
 *
 * Output:        c - value of R0 on exit
 *                psr - processor status register on exit
 *
 * Returns:       c (non-X version only)
 */

extern os_error *xos_bget (os_f file,
      char *(c),
      bits *psr);
extern char os_bget (os_f file,
      char *(c),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_bput()
 *
 * Description:   Calls SWI &B
 *
 * Input:         c - value of R0 on entry
 *                file - value of R1 on entry
 */

extern os_error *xos_bput (char c,
      os_f file);
extern void os_bput (char c,
      os_f file);



/* -------------------------------------------------------------------------
 * Function:      os_read_line()
 *
 * Description:   Calls SWI &E
 *
 * Input:         buffer - value of R0 on entry
 *                size - value of R1 on entry
 *                min_char - value of R2 on entry
 *                max_char - value of R3 on entry
 *
 * Output:        size_out - value of R1 on exit
 *                psr - processor status register on exit
 */

extern os_error *xos_read_line (byte *(buffer),
      int size,
      char min_char,
      char max_char,
      int *(size_out),
      bits *psr);
extern void os_read_line (byte *(buffer),
      int size,
      char min_char,
      char max_char,
      int *(size_out),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_control()
 *
 * Description:   Calls SWI &F
 *
 * Input:         error_handler - value of R0 on entry
 *                error_buffer - value of R1 on entry
 *                escape_handler - value of R2 on entry
 *                event_handler - value of R3 on entry
 *
 * Output:        old_error_handler - value of R0 on exit
 *                old_error_buffer - value of R1 on exit
 *                old_escape_handler - value of R2 on exit
 *                old_event_handler - value of R3 on exit
 */

extern os_error *xos_control (void *(error_handler),
      byte *(error_buffer),
      void *(escape_handler),
      void *(event_handler),
      void *(*(old_error_handler)),
      byte *(*(old_error_buffer)),
      void *(*(old_escape_handler)),
      void *(*(old_event_handler)));
extern void os_control (void *(error_handler),
      byte *(error_buffer),
      void *(escape_handler),
      void *(event_handler),
      void *(*(old_error_handler)),
      byte *(*(old_error_buffer)),
      void *(*(old_escape_handler)),
      void *(*(old_event_handler)));

/* -------------------------------------------------------------------------
 * Function:      os_get_env()
 *
 * Description:   Calls SWI &10
 *
 * Output:        command - value of R0 on exit
 *                ram_limit - value of R1 on exit
 *                start - value of R2 on exit
 *
 * Returns:       command (non-X version only)
 */

extern os_error *xos_get_env (char *(*(command)),
      byte *(*(ram_limit)),
      os_time *(*(start)));
extern char *os_get_env (char *(*(command)),
      byte *(*(ram_limit)),
      os_time *(*(start)));

/* -------------------------------------------------------------------------
 * Function:      os_exit()
 *
 * Description:   Calls SWI &11
 *
 * Input:         error - value of R0 on entry
 *                rc - value of R2 on entry
 */

extern os_error *xos_exit (os_error *(error),
      int rc);
extern void os_exit (os_error *(error),
      int rc);

/* -------------------------------------------------------------------------
 * Function:      os_set_env()
 *
 * Description:   Calls SWI &12
 *
 * Input:         exit_handler - value of R0 on entry
 *                ram_limit - value of R1 on entry
 *                undefined_instruction_handler - value of R4 on entry
 *                prefetch_abort_handler - value of R5 on entry
 *                data_abort_handler - value of R6 on entry
 *                address_xception_handler - value of R7 on entry
 *
 * Output:        old_exit_handler - value of R0 on exit
 *                old_ram_limit - value of R1 on exit
 *                old_undefined_instruction_handler - value of R4 on exit
 *                old_prefetch_abort_handler - value of R5 on exit
 *                old_data_abort_handler - value of R6 on exit
 *                old_address_xception_handler - value of R7 on exit
 */

extern os_error *xos_set_env (void *(exit_handler),
      byte *(ram_limit),
      void *(undefined_instruction_handler),
      void *(prefetch_abort_handler),
      void *(data_abort_handler),
      void *(address_xception_handler),
      void *(*(old_exit_handler)),
      byte *(*(old_ram_limit)),
      void *(*(old_undefined_instruction_handler)),
      void *(*(old_prefetch_abort_handler)),
      void *(*(old_data_abort_handler)),
      void *(*(old_address_xception_handler)));
extern void os_set_env (void *(exit_handler),
      byte *(ram_limit),
      void *(undefined_instruction_handler),
      void *(prefetch_abort_handler),
      void *(data_abort_handler),
      void *(address_xception_handler),
      void *(*(old_exit_handler)),
      byte *(*(old_ram_limit)),
      void *(*(old_undefined_instruction_handler)),
      void *(*(old_prefetch_abort_handler)),
      void *(*(old_data_abort_handler)),
      void *(*(old_address_xception_handler)));

/* -------------------------------------------------------------------------
 * Function:      os_int_on()
 *
 * Description:   Calls SWI &13
 */

extern os_error *xos_int_on (void);
extern void os_int_on (void);

/* -------------------------------------------------------------------------
 * Function:      os_int_off()
 *
 * Description:   Calls SWI &14
 */

extern os_error *xos_int_off (void);
extern void os_int_off (void);

/* -------------------------------------------------------------------------
 * Function:      os_call_back()
 *
 * Description:   Calls SWI &15
 *
 * Input:         register_block - value of R0 on entry
 *                call_back_handler - value of R1 on entry
 *
 * Output:        old_register_block - value of R0 on exit
 *                old_call_back_handler - value of R1 on exit
 */

extern os_error *xos_call_back (os_register_block *(register_block),
      void *(call_back_handler),
      os_register_block *(*(old_register_block)),
      void *(*(old_call_back_handler)));
extern void os_call_back (os_register_block *(register_block),
      void *(call_back_handler),
      os_register_block *(*(old_register_block)),
      void *(*(old_call_back_handler)));

/* -------------------------------------------------------------------------
 * Function:      os_enter_os()
 *
 * Description:   Calls SWI &16
 */

extern os_error *xos_enter_os (void);
extern void os_enter_os (void);

/* -------------------------------------------------------------------------
 * Function:      os_break_pt()
 *
 * Description:   Calls SWI &17
 */

extern os_error *xos_break_pt (void);
extern void os_break_pt (void);

/* -------------------------------------------------------------------------
 * Function:      os_break_ctrl()
 *
 * Description:   Calls SWI &18
 *
 * Input:         register_block - value of R0 on entry
 *                break_pt_handler - value of R1 on entry
 *
 * Output:        old_register_block - value of R0 on exit
 *                old_break_pt_handler - value of R1 on exit
 */

extern os_error *xos_break_ctrl (os_register_block *(register_block),
      void *(break_pt_handler),
      os_register_block *(*(old_register_block)),
      void *(*(old_break_pt_handler)));
extern void os_break_ctrl (os_register_block *(register_block),
      void *(break_pt_handler),
      os_register_block *(*(old_register_block)),
      void *(*(old_break_pt_handler)));

/* -------------------------------------------------------------------------
 * Function:      os_unused_swi()
 *
 * Description:   Calls SWI &19
 *
 * Input:         unused_swi_handler - value of R0 on entry
 *
 * Output:        old_unused_swi_handler - value of R0 on exit
 */

extern os_error *xos_unused_swi (void *(unused_swi_handler),
      void *(*(old_unused_swi_handler)));
extern void os_unused_swi (void *(unused_swi_handler),
      void *(*(old_unused_swi_handler)));

/* -------------------------------------------------------------------------
 * Function:      os_update_memc()
 *
 * Description:   Calls SWI &1A
 *
 * Input:         value - value of R0 on entry
 *                mask - value of R1 on entry
 *
 * Output:        old_value - value of R0 on exit
 *
 * Returns:       old_value (non-X version only)
 */

extern os_error *xos_update_memc (bits value,
      bits mask,
      bits *(old_value));
extern bits os_update_memc (bits value,
      bits mask,
      bits *(old_value));

/* -------------------------------------------------------------------------
 * Function:      os_set_call_back()
 *
 * Description:   Calls SWI &1B
 */

extern os_error *xos_set_call_back (void);
extern void os_set_call_back (void);

/* -------------------------------------------------------------------------
 * Function:      os_mouse()
 *
 * Description:   Calls SWI &1C
 *
 * Output:        x - value of R0 on exit
 *                y - value of R1 on exit
 *                buttons - value of R2 on exit
 *                time - value of R3 on exit
 */

extern os_error *xos_mouse (int *(x),
      int *(y),
      bits *(buttons),
      os_t *(time));
extern void os_mouse (int *(x),
      int *(y),
      bits *(buttons),
      os_t *(time));



/* -------------------------------------------------------------------------
 * Function:      os_claim()
 *
 * Description:   Calls SWI &1F
 *
 * Input:         vector - value of R0 on entry
 *                routine - value of R1 on entry
 *                handle - value of R2 on entry
 */

extern os_error *xos_claim (int vector,
      void *(routine),
      int handle);
extern void os_claim (int vector,
      void *(routine),
      int handle);

/* -------------------------------------------------------------------------
 * Function:      os_release()
 *
 * Description:   Calls SWI &20
 *
 * Input:         vector - value of R0 on entry
 *                routine - value of R1 on entry
 *                handle - value of R2 on entry
 */

extern os_error *xos_release (int vector,
      void *(routine),
      int handle);
extern void os_release (int vector,
      void *(routine),
      int handle);

/* -------------------------------------------------------------------------
 * Function:      os_read_unsigned()
 *
 * Description:   Calls SWI &21
 *
 * Input:         flags - value of R0 on entry
 *                number - value of R1 on entry
 *                limit - value of R2 on entry
 *
 * Output:        terminator - value of R1 on exit
 *                value - value of R2 on exit
 *
 * Returns:       value (non-X version only)
 */

extern os_error *xos_read_unsigned (bits flags,
      char *(number),
      int limit,
      char *(*(terminator)),
      int *(value));
extern int os_read_unsigned (bits flags,
      char *(number),
      int limit,
      char *(*(terminator)),
      int *(value));


/* -------------------------------------------------------------------------
 * Function:      os_read_var_val()
 *
 * Description:   Calls SWI &23
 *
 * Input:         var - value of R0 on entry
 *                value - value of R1 on entry
 *                len - value of R2 on entry
 *                context - value of R3 on entry
 *                var_type - value of R4 on entry
 *
 * Output:        len_out - value of R2 on exit
 *                context_out - value of R3 on exit
 *                var_type_out - value of R4 on exit
 *
 * Returns:       context_out (non-X version only)
 */

extern os_error *xos_read_var_val (char *(var),
      byte *(value),
      int len,
      int context,
      int var_type,
      int *(len_out),
      int *(context_out),
      int *(var_type_out));
extern int os_read_var_val (char *(var),
      byte *(value),
      int len,
      int context,
      int var_type,
      int *(len_out),
      int *(context_out),
      int *(var_type_out));

/* -------------------------------------------------------------------------
 * Function:      os_set_var_val()
 *
 * Description:   Calls SWI &24
 *
 * Input:         var - value of R0 on entry
 *                value - value of R1 on entry
 *                len - value of R2 on entry
 *                context - value of R3 on entry
 *                var_type - value of R4 on entry
 *
 * Output:        len_out - value of R2 on exit
 *                context_out - value of R3 on exit
 *                var_type_out - value of R4 on exit
 *
 * Returns:       context_out (non-X version only)
 */

extern os_error *xos_set_var_val (char *(var),
      byte *(value),
      int len,
      int context,
      int var_type,
      int *(len_out),
      int *(context_out),
      int *(var_type_out));
extern int os_set_var_val (char *(var),
      byte *(value),
      int len,
      int context,
      int var_type,
      int *(len_out),
      int *(context_out),
      int *(var_type_out));

/* -------------------------------------------------------------------------
 * Function:      os_gs_init()
 *
 * Description:   Calls SWI &25
 *
 * Input:         s - value of R0 on entry
 *                flags - value of R2 on entry
 *
 * Output:        context1 - value of R0 on exit
 *                context2 - value of R2 on exit
 */

extern os_error *xos_gs_init (char *(s),
      bits flags,
      byte *(*(context1)),
      byte *(*(context2)));
extern void os_gs_init (char *(s),
      bits flags,
      byte *(*(context1)),
      byte *(*(context2)));

/* -------------------------------------------------------------------------
 * Function:      os_gs_read()
 *
 * Description:   Calls SWI &26
 *
 * Input:         context1 - value of R0 on entry
 *                context2 - value of R2 on entry
 *
 * Output:        context1_out - value of R0 on exit
 *                c - value of R1 on exit
 *                context2_out - value of R2 on exit
 *                psr - processor status register on exit
 *
 * Returns:       c (non-X version only)
 */

extern os_error *xos_gs_read (byte *(context1),
      byte *(context2),
      byte *(*(context1_out)),
      char *(c),
      byte *(*(context2_out)),
      bits *psr);
extern char os_gs_read (byte *(context1),
      byte *(context2),
      byte *(*(context1_out)),
      char *(c),
      byte *(*(context2_out)),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_gs_trans()
 *
 * Description:   Calls SWI &27
 *
 * Input:         s - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 *
 * Output:        psr - processor status register on exit
 */

extern os_error *xos_gs_trans (char *(s),
      char *(output),
      int size,
      bits *psr);
extern void os_gs_trans (char *(s),
      char *(output),
      int size,
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_binary_to_decimal()
 *
 * Description:   Calls SWI &28
 *
 * Input:         i - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 *
 * Output:        len - value of R2 on exit
 */

extern os_error *xos_binary_to_decimal (int i,
      char *(output),
      int size,
      int *(len));
extern void os_binary_to_decimal (int i,
      char *(output),
      int size,
      int *(len));


/* -------------------------------------------------------------------------
 * Function:      os_change_dynamic_area()
 *
 * Description:   Calls SWI &2A
 *
 * Input:         area_type - value of R0 on entry
 *                change - value of R1 on entry
 *
 * Output:        change - value of R1 on exit
 */

extern os_error *xos_change_dynamic_area (int area_type,
      int change,
      int *(change));
extern void os_change_dynamic_area (int area_type,
      int change,
      int *(change));

/* -------------------------------------------------------------------------
 * Function:      os_generate_error()
 *
 * Description:   Calls SWI &2B
 *
 * Input:         error - value of R0 on entry
 */

extern os_error *xos_generate_error (os_error *(error));
extern void os_generate_error (os_error *(error));

/* -------------------------------------------------------------------------
 * Function:      os_read_escape_state()
 *
 * Description:   Calls SWI &2C
 *
 * Output:        psr - processor status register on exit
 *
 * Returns:       psr (non-X version only)
 */

extern os_error *xos_read_escape_state (bits *psr);
extern bits os_read_escape_state (bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_evaluate_expression()
 *
 * Description:   Calls SWI &2D
 *
 * Input:         expr - value of R0 on entry
 *                buffer - value of R1 on entry
 *                size - value of R2 on entry
 *
 * Output:        expr_is_string - value of R1 on exit
 *                int_value_or_str_size - value of R2 on exit
 */

extern os_error *xos_evaluate_expression (char *(expr),
      char *(buffer),
      int size,
      bool *(expr_is_string),
      int *(int_value_or_str_size));
extern void os_evaluate_expression (char *(expr),
      char *(buffer),
      int size,
      bool *(expr_is_string),
      int *(int_value_or_str_size));


/* -------------------------------------------------------------------------
 * Function:      os_read_palette()
 *
 * Description:   Calls SWI &2F
 *
 * Input:         gcol - value of R0 on entry
 *                colour_type - value of R1 on entry
 *
 * Output:        on - value of R2 on exit
 *                off - value of R3 on exit
 */

extern os_error *xos_read_palette (os_gcol gcol,
      int colour_type,
      os_colour *(on),
      os_colour *(off));
extern void os_read_palette (os_gcol gcol,
      int colour_type,
      os_colour *(on),
      os_colour *(off));


/* -------------------------------------------------------------------------
 * Function:      os_read_vdu_variables()
 *
 * Description:   Calls SWI &31
 *
 * Input:         var_list - value of R0 on entry
 *                value_list - value of R1 on entry
 */

extern os_error *xos_read_vdu_variables (os_vdu_var_list *(var_list),
      os_vdu_var_list *(value_list));
extern void os_read_vdu_variables (os_vdu_var_list *(var_list),
      os_vdu_var_list *(value_list));

/* -------------------------------------------------------------------------
 * Function:      os_read_point()
 *
 * Description:   Calls SWI &32
 *
 * Input:         x - value of R0 on entry
 *                y - value of R1 on entry
 *
 * Output:        gcol - value of R2 on exit
 *                tint - value of R3 on exit
 *                off_screen - value of R4 on exit
 */

extern os_error *xos_read_point (int x,
      int y,
      os_gcol *(gcol),
      os_tint *(tint),
      bool *(off_screen));
extern void os_read_point (int x,
      int y,
      os_gcol *(gcol),
      os_tint *(tint),
      bool *(off_screen));



/* -------------------------------------------------------------------------
 * Function:      os_read_mode_variable()
 *
 * Description:   Calls SWI &35
 *
 * Input:         mode - value of R0 on entry
 *                var - value of R1 on entry
 *
 * Output:        var_val - value of R2 on exit
 *                psr - processor status register on exit
 *
 * Returns:       var_val (non-X version only)
 */

extern os_error *xos_read_mode_variable (int mode,
      int var,
      int *(var_val),
      bits *psr);
extern int os_read_mode_variable (int mode,
      int var,
      int *(var_val),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_remove_cursors()
 *
 * Description:   Calls SWI &36
 */

extern os_error *xos_remove_cursors (void);
extern void os_remove_cursors (void);

/* -------------------------------------------------------------------------
 * Function:      os_restore_cursors()
 *
 * Description:   Calls SWI &37
 */

extern os_error *xos_restore_cursors (void);
extern void os_restore_cursors (void);

/* -------------------------------------------------------------------------
 * Function:      os_swi_number_to_string()
 *
 * Description:   Calls SWI &38
 *
 * Input:         swi - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 *
 * Output:        size_out - value of R2 on exit
 */

extern os_error *xos_swi_number_to_string (int swi,
      char *(output),
      int size,
      int *(size_out));
extern void os_swi_number_to_string (int swi,
      char *(output),
      int size,
      int *(size_out));

/* -------------------------------------------------------------------------
 * Function:      os_swi_number_from_string()
 *
 * Description:   Calls SWI &39
 *
 * Input:         swi_name - value of R1 on entry
 *
 * Output:        swi - value of R0 on exit
 *
 * Returns:       swi (non-X version only)
 */

extern os_error *xos_swi_number_from_string (char *(swi_name),
      int *(swi));
extern int os_swi_number_from_string (char *(swi_name),
      int *(swi));

/* -------------------------------------------------------------------------
 * Function:      os_validate_address()
 *
 * Description:   Calls SWI &3A
 *
 * Input:         min - value of R0 on entry
 *                max - value of R1 on entry
 *
 * Output:        psr - processor status register on exit
 *
 * Returns:       psr (non-X version only)
 */

extern os_error *xos_validate_address (byte *(min),
      byte *(max),
      bits *psr);
extern bits os_validate_address (byte *(min),
      byte *(max),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_call_after()
 *
 * Description:   Calls SWI &3B
 *
 * Input:         delay - value of R0 on entry
 *                asm - value of R1 on entry
 *                handle - value of R2 on entry
 */

extern os_error *xos_call_after (int delay,
      void *(asm),
      byte *(handle));
extern void os_call_after (int delay,
      void *(asm),
      byte *(handle));

/* -------------------------------------------------------------------------
 * Function:      os_call_every()
 *
 * Description:   Calls SWI &3C
 *
 * Input:         delay - value of R0 on entry
 *                asm - value of R1 on entry
 *                handle - value of R2 on entry
 */

extern os_error *xos_call_every (int delay,
      void *(asm),
      byte *(handle));
extern void os_call_every (int delay,
      void *(asm),
      byte *(handle));

/* -------------------------------------------------------------------------
 * Function:      os_remove_ticker_event()
 *
 * Description:   Calls SWI &3D
 *
 * Input:         asm - value of R0 on entry
 *                handle - value of R1 on entry
 */

extern os_error *xos_remove_ticker_event (void *(asm),
      byte *(handle));
extern void os_remove_ticker_event (void *(asm),
      byte *(handle));

/* -------------------------------------------------------------------------
 * Function:      os_install_key_handler()
 *
 * Description:   Calls SWI &3E
 */

extern os_error *xos_install_key_handler (void);
extern void os_install_key_handler (void);

/* -------------------------------------------------------------------------
 * Function:      os_check_mode_valid()
 *
 * Description:   Calls SWI &3F
 *
 * Input:         mode - value of R0 on entry
 *
 * Output:        mode_valid - value of R0 on exit
 *                alternative_mode - value of R1 on exit
 *                psr - processor status register on exit
 *
 * Returns:       psr (non-X version only)
 */

extern os_error *xos_check_mode_valid (int mode,
      int *(mode_valid),
      int *(alternative_mode),
      bits *psr);
extern bits os_check_mode_valid (int mode,
      int *(mode_valid),
      int *(alternative_mode),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_change_environment()
 *
 * Description:   Calls SWI &40
 *
 * Input:         handler_type - value of R0 on entry
 *                handler - value of R1 on entry
 *                handle - value of R2 on entry
 *                buffer - value of R3 on entry
 *
 * Output:        old_handler - value of R1 on exit
 *                old_handle - value of R2 on exit
 *                old_buffer - value of R3 on exit
 */

extern os_error *xos_change_environment (int handler_type,
      void *(handler),
      byte *(handle),
      byte *(buffer),
      void *(*(old_handler)),
      byte *(*(old_handle)),
      byte *(*(old_buffer)));
extern void os_change_environment (int handler_type,
      void *(handler),
      byte *(handle),
      byte *(buffer),
      void *(*(old_handler)),
      byte *(*(old_handle)),
      byte *(*(old_buffer)));

/* -------------------------------------------------------------------------
 * Function:      os_claim_screen_memory()
 *
 * Description:   Calls SWI &41
 *
 * Input:         size - value of R1 on entry
 *
 * Output:        size_out - value of R1 on exit
 *                start - value of R2 on exit
 *                psr - processor status register on exit
 */

extern os_error *xos_claim_screen_memory (int size,
      int *(size_out),
      byte *(*(start)),
      bits *psr);
extern void os_claim_screen_memory (int size,
      int *(size_out),
      byte *(*(start)),
      bits *psr);

/* -------------------------------------------------------------------------
 * Function:      os_release_screen_memory()
 *
 */

extern os_error *xos_release_screen_memory (void);
extern void os_release_screen_memory (void);

/* -------------------------------------------------------------------------
 * Function:      os_read_monotonic_time()
 *
 * Description:   Calls SWI &42
 *
 * Output:        time - value of R0 on exit
 *
 * Returns:       time (non-X version only)
 */

extern os_error *xos_read_monotonic_time (os_t *(time));
extern os_t os_read_monotonic_time (os_t *(time));

/* -------------------------------------------------------------------------
 * Function:      os_substitute_args()
 *
 * Description:   Calls SWI &43
 *
 * Input:         args - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 *                template - value of R3 on entry
 *                template_size - value of R4 on entry
 *
 * Output:        size_out - value of R2 on exit
 */

extern os_error *xos_substitute_args (char *(args),
      char *(output),
      int size,
      char *(template),
      int template_size,
      int *(size_out));
extern void os_substitute_args (char *(args),
      char *(output),
      int size,
      char *(template),
      int template_size,
      int *(size_out));

/* -------------------------------------------------------------------------
 * Function:      os_pretty_print()
 *
 * Description:   Calls SWI &44
 *
 * Input:         string - value of R0 on entry
 *                dictionary - value of R1 on entry
 *                special - value of R2 on entry
 */

extern os_error *xos_pretty_print (char *(string),
      byte *(dictionary),
      char *(special));
extern void os_pretty_print (char *(string),
      byte *(dictionary),
      char *(special));

/* -------------------------------------------------------------------------
 * Function:      os_plot()
 *
 * Description:   Calls SWI &45
 *
 * Input:         plot_code - value of R0 on entry
 *                x - value of R1 on entry
 *                y - value of R2 on entry
 */

extern os_error *xos_plot (int plot_code,
      int x,
      int y);
extern void os_plot (int plot_code,
      int x,
      int y);

/* -------------------------------------------------------------------------
 * Function:      os_writen()
 *
 * Description:   Calls SWI &46
 *
 * Input:         s - value of R0 on entry
 *                len - value of R1 on entry
 */

extern os_error *xos_writen (char *(s),
      int len);
extern void os_writen (char *(s),
      int len);

/* -------------------------------------------------------------------------
 * Function:      os_add_to_vector()
 *
 * Description:   Calls SWI &47
 *
 * Input:         vector - value of R0 on entry
 *                routine - value of R1 on entry
 *                handle - value of R2 on entry
 */

extern os_error *xos_add_to_vector (int vector,
      void *(routine),
      int handle);
extern void os_add_to_vector (int vector,
      void *(routine),
      int handle);

/* -------------------------------------------------------------------------
 * Function:      os_write_env()
 *
 * Description:   Calls SWI &48
 *
 * Input:         command - value of R0 on entry
 *                start - value of R1 on entry
 */

extern os_error *xos_write_env (char *(command),
      os_time *(start));
extern void os_write_env (char *(command),
      os_time *(start));

/* -------------------------------------------------------------------------
 * Function:      os_read_args()
 *
 * Description:   Calls SWI &49
 *
 * Input:         keywords - value of R0 on entry
 *                input - value of R1 on entry
 *                output - value of R2 on entry
 *                size - value of R3 on entry
 *
 * Output:        size_left - value of R3 on exit
 */

extern os_error *xos_read_args (char *(keywords),
      char *(input),
      byte *(output),
      int size,
      int *(size_left));
extern void os_read_args (char *(keywords),
      char *(input),
      byte *(output),
      int size,
      int *(size_left));

/* -------------------------------------------------------------------------
 * Function:      os_read_ram_fs_limits()
 *
 * Description:   Calls SWI &4A
 *
 * Output:        start - value of R0 on exit
 *                end - value of R1 on exit
 */

extern os_error *xos_read_ram_fs_limits (byte *(*(start)),
      byte *(*(end)));
extern void os_read_ram_fs_limits (byte *(*(start)),
      byte *(*(end)));

/* -------------------------------------------------------------------------
 * Function:      os_claim_device_vector()
 *
 * Description:   Calls SWI &4B
 *
 * Input:         device - value of R0 on entry
 *                driver - value of R1 on entry
 *                handle - value of R2 on entry
 *                status - value of R3 on entry
 *                mask - value of R4 on entry
 */

extern os_error *xos_claim_device_vector (int device,
      void *(driver),
      int handle,
      int *(status),
      bits mask);
extern void os_claim_device_vector (int device,
      void *(driver),
      int handle,
      int *(status),
      bits mask);

/* -------------------------------------------------------------------------
 * Function:      os_release_device_vector()
 *
 * Description:   Calls SWI &4C
 *
 * Input:         device - value of R0 on entry
 *                driver - value of R1 on entry
 *                handle - value of R2 on entry
 *                status - value of R3 on entry
 *                mask - value of R4 on entry
 */

extern os_error *xos_release_device_vector (int device,
      void *(driver),
      int handle,
      int *(status),
      bits mask);
extern void os_release_device_vector (int device,
      void *(driver),
      int handle,
      int *(status),
      bits mask);

/* -------------------------------------------------------------------------
 * Function:      os_delink_application()
 *
 * Description:   Calls SWI &4D
 *
 * Input:         buffer - value of R0 on entry
 *                size - value of R1 on entry
 *
 * Output:        size_out - value of R1 on exit
 */

extern os_error *xos_delink_application (byte *(buffer),
      int size,
      int *(size_out));
extern void os_delink_application (byte *(buffer),
      int size,
      int *(size_out));

/* -------------------------------------------------------------------------
 * Function:      os_relink_application()
 *
 * Description:   Calls SWI &4E
 *
 * Input:         buffer - value of R0 on entry
 */

extern os_error *xos_relink_application (byte *(buffer));
extern void os_relink_application (byte *(buffer));

/* -------------------------------------------------------------------------
 * Function:      os_heap_sort()
 *
 * Description:   Calls SWI &4F
 *
 * Input:         count - value of R0 on entry
 *                array - value of R1 on entry
 *                compare_fn - value of R2 on entry
 *                handle - value of R3 on entry
 *                objects - value of R4 on entry
 *                object_size - value of R5 on entry
 *                workspace - value of R6 on entry
 */

extern os_error *xos_heap_sort (int count,
      int *(array),
      void *(compare_fn),
      int handle,
      byte *(objects),
      int object_size,
      byte *(workspace));
extern void os_heap_sort (int count,
      int *(array),
      void *(compare_fn),
      int handle,
      byte *(objects),
      int object_size,
      byte *(workspace));

/* -------------------------------------------------------------------------
 * Function:      os_exit_and_die()
 *
 * Description:   Calls SWI &50
 *
 * Input:         error - value of R0 on entry
 *                rc - value of R2 on entry
 *                module_name - value of R3 on entry
 */

extern os_error *xos_exit_and_die (os_error *(error),
      int rc,
      char *(module_name));
extern void os_exit_and_die (os_error *(error),
      int rc,
      char *(module_name));

/* -------------------------------------------------------------------------
 * Function:      os_read_mem_map_info()
 *
 * Description:   Calls SWI &51
 *
 * Output:        page_size - value of R0 on exit
 *                page_count - value of R1 on exit
 */

extern os_error *xos_read_mem_map_info (int *(page_size),
      int *(page_count));
extern void os_read_mem_map_info (int *(page_size),
      int *(page_count));

/* -------------------------------------------------------------------------
 * Function:      os_read_mem_map_entries()
 *
 * Description:   Calls SWI &52
 *
 * Input:         request_list - value of R0 on entry
 */

extern os_error *xos_read_mem_map_entries (os_mem_map_request_list *(request_list));
extern void os_read_mem_map_entries (os_mem_map_request_list *(request_list));

/* -------------------------------------------------------------------------
 * Function:      os_set_mem_map_entries()
 *
 * Description:   Calls SWI &53
 *
 * Input:         request_list - value of R0 on entry
 */

extern os_error *xos_set_mem_map_entries (os_mem_map_request_list *(request_list));
extern void os_set_mem_map_entries (os_mem_map_request_list *(request_list));

/* -------------------------------------------------------------------------
 * Function:      os_add_call_back()
 *
 * Description:   Calls SWI &54
 *
 * Input:         call_back - value of R0 on entry
 *                handle - value of R1 on entry
 */

extern os_error *xos_add_call_back (void *(call_back),
      byte *(handle));
extern void os_add_call_back (void *(call_back),
      byte *(handle));

/* -------------------------------------------------------------------------
 * Function:      os_read_default_handler()
 *
 * Description:   Calls SWI &55
 *
 * Input:         handler_type - value of R0 on entry
 *
 * Output:        handler - value of R1 on exit
 *                handle - value of R2 on exit
 *                buffer - value of R3 on exit
 */

extern os_error *xos_read_default_handler (int handler_type,
      void *(*(handler)),
      byte *(*(handle)),
      byte *(*(buffer)));
extern void os_read_default_handler (int handler_type,
      void *(*(handler)),
      byte *(*(handle)),
      byte *(*(buffer)));

/* -------------------------------------------------------------------------
 * Function:      os_set_ecf_origin()
 *
 * Description:   Calls SWI &56
 *
 * Input:         x - value of R0 on entry
 *                y - value of R1 on entry
 */

extern os_error *xos_set_ecf_origin (int x,
      int y);
extern void os_set_ecf_origin (int x,
      int y);



/* -------------------------------------------------------------------------
 * Function:      os_confirm()
 *
 * Description:   Calls SWI &59
 */

extern os_error *xos_confirm (void);
extern void os_confirm (void);

/* -------------------------------------------------------------------------
 * Function:      os_changed_box()
 *
 * Description:   Calls SWI &5A
 *
 * Input:         state - value of R0 on entry
 *
 * Output:        old_state - value of R0 on exit
 *                change_box - value of R1 on exit
 */

extern os_error *xos_changed_box (int state,
      int *(old_state),
      os_change_box *(*(change_box)));
extern void os_changed_box (int state,
      int *(old_state),
      os_change_box *(*(change_box)));

/* -------------------------------------------------------------------------
 * Function:      os_crc()
 *
 * Description:   Calls SWI &5B
 */

extern os_error *xos_crc (void);
extern void os_crc (void);

/* -------------------------------------------------------------------------
 * Function:      os_read_dynamic_area()
 *
 * Description:   Calls SWI &5C
 *
 * Input:         area_type - value of R0 on entry
 *
 * Output:        size - value of R1 on exit
 *
 * Returns:       size (non-X version only)
 */

extern os_error *xos_read_dynamic_area (int area_type,
      int *(size));
extern int os_read_dynamic_area (int area_type,
      int *(size));

/* -------------------------------------------------------------------------
 * Function:      os_print_char()
 *
 * Description:   Calls SWI &5D
 *
 * Input:         c - value of R0 on entry
 */

extern os_error *xos_print_char (char c);
extern void os_print_char (char c);

/* -------------------------------------------------------------------------
 * Function:      os_change_redirection()
 *
 * Description:   Calls SWI &5E
 */

extern os_error *xos_change_redirection (void);
extern void os_change_redirection (void);

/* -------------------------------------------------------------------------
 * Function:      os_remove_call_back()
 *
 * Description:   Calls SWI &5F
 */

extern os_error *xos_remove_call_back (void);
extern void os_remove_call_back (void);

/* -------------------------------------------------------------------------
 * Function:      os_find_mem_map_entries()
 *
 * Description:   Calls SWI &60
 */

extern os_error *xos_find_mem_map_entries (void);
extern void os_find_mem_map_entries (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_colour()
 *
 * Description:   Calls SWI &61
 *
 * Input:         flags - value of R0 on entry
 *                colour - value of R1 on entry
 */

extern os_error *xos_set_colour (bits flags,
      os_colour colour);
extern void os_set_colour (bits flags,
      os_colour colour);

/* -------------------------------------------------------------------------
 * Function:      os_convert_standard_date_and_time()
 *
 * Description:   Calls SWI &C0
 *
 * Input:         time - value of R0 on entry
 *                buffer - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_standard_date_and_time (os_time *(time),
      char *(buffer),
      int size);
extern void os_convert_standard_date_and_time (os_time *(time),
      char *(buffer),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_date_and_time()
 *
 * Description:   Calls SWI &C1
 *
 * Input:         time - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_date_and_time (os_time *(time),
      char *(output),
      int size);
extern void os_convert_date_and_time (os_time *(time),
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_hex1()
 *
 * Description:   Calls SWI &D0
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_hex1 (int value,
      char *(output),
      int size);
extern void os_convert_hex1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_hex2()
 *
 * Description:   Calls SWI &D1
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_hex2 (int value,
      char *(output),
      int size);
extern void os_convert_hex2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_hex4()
 *
 * Description:   Calls SWI &D2
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_hex4 (int value,
      char *(output),
      int size);
extern void os_convert_hex4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_hex6()
 *
 * Description:   Calls SWI &D3
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_hex6 (int value,
      char *(output),
      int size);
extern void os_convert_hex6 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_hex8()
 *
 * Description:   Calls SWI &D4
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_hex8 (int value,
      char *(output),
      int size);
extern void os_convert_hex8 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_cardinal1()
 *
 * Description:   Calls SWI &D5
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_cardinal1 (int value,
      char *(output),
      int size);
extern void os_convert_cardinal1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_cardinal2()
 *
 * Description:   Calls SWI &D6
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_cardinal2 (int value,
      char *(output),
      int size);
extern void os_convert_cardinal2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_cardinal3()
 *
 * Description:   Calls SWI &D7
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_cardinal3 (int value,
      char *(output),
      int size);
extern void os_convert_cardinal3 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_cardinal4()
 *
 * Description:   Calls SWI &D8
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_cardinal4 (int value,
      char *(output),
      int size);
extern void os_convert_cardinal4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_integer1()
 *
 * Description:   Calls SWI &D9
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_integer1 (int value,
      char *(output),
      int size);
extern void os_convert_integer1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_integer2()
 *
 * Description:   Calls SWI &DA
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_integer2 (int value,
      char *(output),
      int size);
extern void os_convert_integer2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_integer3()
 *
 * Description:   Calls SWI &DB
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_integer3 (int value,
      char *(output),
      int size);
extern void os_convert_integer3 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_integer4()
 *
 * Description:   Calls SWI &DC
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_integer4 (int value,
      char *(output),
      int size);
extern void os_convert_integer4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_binary1()
 *
 * Description:   Calls SWI &DD
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_binary1 (int value,
      char *(output),
      int size);
extern void os_convert_binary1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_binary2()
 *
 * Description:   Calls SWI &DE
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_binary2 (int value,
      char *(output),
      int size);
extern void os_convert_binary2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_binary3()
 *
 * Description:   Calls SWI &DF
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_binary3 (int value,
      char *(output),
      int size);
extern void os_convert_binary3 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_binary4()
 *
 * Description:   Calls SWI &E0
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_binary4 (int value,
      char *(output),
      int size);
extern void os_convert_binary4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_cardinal1()
 *
 * Description:   Calls SWI &E1
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_cardinal1 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_cardinal1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_cardinal2()
 *
 * Description:   Calls SWI &E2
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_cardinal2 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_cardinal2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_cardinal3()
 *
 * Description:   Calls SWI &E3
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_cardinal3 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_cardinal3 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_cardinal4()
 *
 * Description:   Calls SWI &E4
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_cardinal4 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_cardinal4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_integer1()
 *
 * Description:   Calls SWI &E5
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_integer1 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_integer1 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_integer2()
 *
 * Description:   Calls SWI &E6
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_integer2 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_integer2 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_integer3()
 *
 * Description:   Calls SWI &E7
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_integer3 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_integer3 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_spaced_integer4()
 *
 * Description:   Calls SWI &E8
 *
 * Input:         value - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_spaced_integer4 (int value,
      char *(output),
      int size);
extern void os_convert_spaced_integer4 (int value,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_fixed_net_station()
 *
 * Description:   Calls SWI &E9
 *
 * Input:         station_number - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_fixed_net_station (os_station_number *(station_number),
      char *(output),
      int size);
extern void os_convert_fixed_net_station (os_station_number *(station_number),
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_net_station()
 *
 * Description:   Calls SWI &EA
 *
 * Input:         station_number - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_net_station (os_station_number *(station_number),
      char *(output),
      int size);
extern void os_convert_net_station (os_station_number *(station_number),
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_fixed_file_size()
 *
 * Description:   Calls SWI &EB
 *
 * Input:         size - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_fixed_file_size (int size,
      char *(output),
      int size);
extern void os_convert_fixed_file_size (int size,
      char *(output),
      int size);

/* -------------------------------------------------------------------------
 * Function:      os_convert_file_size()
 *
 * Description:   Calls SWI &EC
 *
 * Input:         size - value of R0 on entry
 *                output - value of R1 on entry
 *                size - value of R2 on entry
 */

extern os_error *xos_convert_file_size (int size,
      char *(output),
      int size);
extern void os_convert_file_size (int size,
      char *(output),
      int size);


/* -------------------------------------------------------------------------
 * Function:      os_null()
 *
 * Description:   Calls SWI &100
 */

extern os_error *xos_null (void);
extern void os_null (void);

/* -------------------------------------------------------------------------
 * Function:      os_char_to_printer()
 *
 * Description:   Calls SWI &101
 */

extern os_error *xos_char_to_printer (void);
extern void os_char_to_printer (void);

/* -------------------------------------------------------------------------
 * Function:      os_printer_on()
 *
 * Description:   Calls SWI &102
 */

extern os_error *xos_printer_on (void);
extern void os_printer_on (void);

/* -------------------------------------------------------------------------
 * Function:      os_printer_off()
 *
 * Description:   Calls SWI &103
 */

extern os_error *xos_printer_off (void);
extern void os_printer_off (void);

/* -------------------------------------------------------------------------
 * Function:      os_split_cursors()
 *
 * Description:   Calls SWI &104
 */

extern os_error *xos_split_cursors (void);
extern void os_split_cursors (void);

/* -------------------------------------------------------------------------
 * Function:      os_join_cursors()
 *
 * Description:   Calls SWI &105
 */

extern os_error *xos_join_cursors (void);
extern void os_join_cursors (void);

/* -------------------------------------------------------------------------
 * Function:      os_vdu_on()
 *
 * Description:   Calls SWI &106
 */

extern os_error *xos_vdu_on (void);
extern void os_vdu_on (void);

/* -------------------------------------------------------------------------
 * Function:      os_bell()
 *
 * Description:   Calls SWI &107
 */

extern os_error *xos_bell (void);
extern void os_bell (void);

/* -------------------------------------------------------------------------
 * Function:      os_backspace()
 *
 * Description:   Calls SWI &108
 */

extern os_error *xos_backspace (void);
extern void os_backspace (void);

/* -------------------------------------------------------------------------
 * Function:      os_tab()
 *
 * Description:   Calls SWI &109
 */

extern os_error *xos_tab (void);
extern void os_tab (void);

/* -------------------------------------------------------------------------
 * Function:      os_linefeed()
 *
 * Description:   Calls SWI &10A
 */

extern os_error *xos_linefeed (void);
extern void os_linefeed (void);

/* -------------------------------------------------------------------------
 * Function:      os_vertical_tab()
 *
 * Description:   Calls SWI &10B
 */

extern os_error *xos_vertical_tab (void);
extern void os_vertical_tab (void);

/* -------------------------------------------------------------------------
 * Function:      os_cls()
 *
 * Description:   Calls SWI &10C
 */

extern os_error *xos_cls (void);
extern void os_cls (void);

/* -------------------------------------------------------------------------
 * Function:      os_return()
 *
 * Description:   Calls SWI &10D
 */

extern os_error *xos_return (void);
extern void os_return (void);

/* -------------------------------------------------------------------------
 * Function:      os_page_mode_on()
 *
 * Description:   Calls SWI &10E
 */

extern os_error *xos_page_mode_on (void);
extern void os_page_mode_on (void);

/* -------------------------------------------------------------------------
 * Function:      os_page_mode_off()
 *
 * Description:   Calls SWI &10F
 */

extern os_error *xos_page_mode_off (void);
extern void os_page_mode_off (void);

/* -------------------------------------------------------------------------
 * Function:      os_clg()
 *
 * Description:   Calls SWI &110
 */

extern os_error *xos_clg (void);
extern void os_clg (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_text_colour()
 *
 * Description:   Calls SWI &111
 */

extern os_error *xos_set_text_colour (void);
extern void os_set_text_colour (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_gcol()
 *
 * Description:   Calls SWI &112
 */

extern os_error *xos_set_gcol (void);
extern void os_set_gcol (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_palette()
 *
 * Description:   Calls SWI &113
 */

extern os_error *xos_set_palette (void);
extern void os_set_palette (void);

/* -------------------------------------------------------------------------
 * Function:      os_reset_colours()
 *
 * Description:   Calls SWI &114
 */

extern os_error *xos_reset_colours (void);
extern void os_reset_colours (void);

/* -------------------------------------------------------------------------
 * Function:      os_vdu_off()
 *
 * Description:   Calls SWI &115
 */

extern os_error *xos_vdu_off (void);
extern void os_vdu_off (void);

/* -------------------------------------------------------------------------
 * Function:      os_mode()
 *
 * Description:   Calls SWI &116
 */

extern os_error *xos_mode (void);
extern void os_mode (void);

/* -------------------------------------------------------------------------
 * Function:      os_misc()
 *
 * Description:   Calls SWI &117
 */

extern os_error *xos_misc (void);
extern void os_misc (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_graphics_window()
 *
 * Description:   Calls SWI &118
 */

extern os_error *xos_set_graphics_window (void);
extern void os_set_graphics_window (void);

/* -------------------------------------------------------------------------
 * Function:      os_reset_windows()
 *
 * Description:   Calls SWI &11A
 */

extern os_error *xos_reset_windows (void);
extern void os_reset_windows (void);

/* -------------------------------------------------------------------------
 * Function:      os_escape()
 *
 * Description:   Calls SWI &11B
 */

extern os_error *xos_escape (void);
extern void os_escape (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_text_window()
 *
 * Description:   Calls SWI &11C
 */

extern os_error *xos_set_text_window (void);
extern void os_set_text_window (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_graphics_origin()
 *
 * Description:   Calls SWI &11D
 */

extern os_error *xos_set_graphics_origin (void);
extern void os_set_graphics_origin (void);

/* -------------------------------------------------------------------------
 * Function:      os_home_text_cursor()
 *
 * Description:   Calls SWI &11E
 */

extern os_error *xos_home_text_cursor (void);
extern void os_home_text_cursor (void);

/* -------------------------------------------------------------------------
 * Function:      os_set_text_cursor()
 *
 * Description:   Calls SWI &11F
 */

extern os_error *xos_set_text_cursor (void);
extern void os_set_text_cursor (void);

/* -------------------------------------------------------------------------
 * Function:      os_space()
 *
 * Description:   Calls SWI &120
 */

extern os_error *xos_space (void);
extern void os_space (void);

/* -------------------------------------------------------------------------
 * Function:      os_delete()
 *
 * Description:   Calls SWI &17F
 */

extern os_error *xos_delete (void);
extern void os_delete (void);

#ifdef __cplusplus
   }
#endif

#endif
