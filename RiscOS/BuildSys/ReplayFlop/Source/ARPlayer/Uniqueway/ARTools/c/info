/* > info.c

 * © SJ Middleton, 1993

 * This file contains code to display an info window about a movie.
 * No longer gives the ability to edit the details.

 */

#include "dboxes.h"
#include "dboxinc.h"
#include "msgs.h"
#include "werr.h"
#include "wimpt.h"
#include "wimpx.h"
#include "win.h"

#include <stdio.h>
#include <string.h>

#include "macros.h"
#include "strfn.h"
#include "wmisc.h"

#include "arvid.h"
#include "arutils.h"

#include "display.h"

#define OK_FIELD            0
#define CANCEL_FIELD        1

#define CHUNK_INFO_FIELD    7

#define MOVIE_FIELD         8
#define DATE_FIELD          9
#define AUTHOR_FIELD        10

#define SPRITE_DROP_FIELD   17

#define AUDIO_FIELD             16
#define VIDEO_TYPE_FIELD        18
#define VIDEO_COPYRIGHT_FIELD   14

#define SIZE_FIELD          19
#define VIDEO_FIELD         20

#define SOUNDTRACK_FIELD    22

#define SOUND_INFO_FIELD    26

#define DISPLAY_IDENT       "info"

#define NONE        msgs_lookup("none")
#define INFO_TITLE  msgs_lookup("Tinfo")
#define MONO        msgs_lookup("mono")
#define STEREO_LR   msgs_lookup("stereo")
#define STEREO_RL   msgs_lookup("stereor")
#define NCHANS      msgs_lookup("nchans")
#define HAS_KEYS            msgs_lookup("Minfo0")
#define NO_KEYS             msgs_lookup("Minfo1")
#define SOUND_INFO_FORMAT   msgs_lookup("Minfo2")
#define TYPE1_FORMAT        msgs_lookup("Minfo3")

/* --------------------------------------------------------------------------------------- */

static void set_audio_fields(const display_str *dp);

static void notify_fn(int val, void *handle)
{
    display_str *dp = handle;
    dp->info_soundtrack = val;
    set_audio_fields(dp);
}

static dbox_incstr  track_inc =
{
    1, 0,
    1, 100,
    0, 0, notify_fn
};

static char *audio_channels_string(char *buffer, armovie_soundstr *sp)
{
    switch (sp->channels)
    {
        case 1:
            strcpy(buffer, MONO);
            break;
        case 2:
            strcpy(buffer, sp->sflags & armovie_ReversedStereo ? STEREO_RL : STEREO_LR);
            break;
        default:
            sprintf(buffer, NCHANS, sp->channels);
            break;
    }
    return buffer;
}

static void set_audio_fields(const display_str *dp)
{
    dbox        d = dp->info;
    armovie_hdr *hdr = dp->hdr;
    if (hdr && hdr->sound)
    {
        char                buffer[16];
        armovie_soundstr    *sp = &hdr->sound[dp->info_soundtrack-1];

        if (sp->format)
            dbox_setfieldf(d, SOUND_INFO_FIELD, SOUND_INFO_FORMAT,
                sp->format,
                audio_channels_string(buffer, sp),
                sp->rate,
                sp->rate < 256 ? "µs" : "Hz");
        else
            dbox_setfield(d, SOUND_INFO_FIELD, "");

        switch (sp->format)
        {
            case replay_StandardAudio:
                dbox_setfieldf(d, AUDIO_FIELD, TYPE1_FORMAT,
                    sp->precision, msgs_lookup(sp->filename));
                break;

            case replay_IndirectAudio:
            {
                arsnd_info info;
                arsnd_readinfo(sp->filename, &info, TRUE);
                dbox_setfield(d, AUDIO_FIELD, info.description);
                arsnd_freeinfo(&info);
                break;
            }

            default:
                dbox_setfield(d, AUDIO_FIELD, "");
                break;
        }
    }
    else
    {
        dbox_setfield(d, AUDIO_FIELD, NONE);
        dbox_setfield(d, SOUND_INFO_FIELD, "");
    }

    dbox_setnumeric(d, SOUNDTRACK_FIELD, dp->info_soundtrack);
}

/*
 * Setup the window fields according to the movie header details
 */

static void set_fields(const display_str *dp)
{
    dbox        d = dp->info;
    armovie_hdr *hdr = dp->hdr;

    win_settitle(dbox_syshandle(d), dp->filename ? dp->filename : INFO_TITLE);

    dbox_setfield(d, MOVIE_FIELD, hdr && hdr->name ? hdr->name : "");
    dbox_setfield(d, DATE_FIELD, hdr && hdr->date ? hdr->date : "");
    dbox_setfield(d, AUTHOR_FIELD, hdr && hdr->author ? hdr->author : "");

    if (hdr && hdr->video_format)
    {
        dbox_setfieldf(d, VIDEO_TYPE_FIELD, "Type %d: %s %s",
            hdr->video_format,
            strsafe(dp->arinfo.description));

        dbox_setfield(d, VIDEO_COPYRIGHT_FIELD, (char *)strsafe(dp->arinfo.author));

        dbox_setfieldf(d, SIZE_FIELD, "%dx%d", hdr->xsize, hdr->ysize);

        dbox_setfieldf(d, VIDEO_FIELD, "%dbpp %s %gHz, %s",
            hdr->bpp, arvid_colourspace(hdr->flags),
            hdr->fps, hdr->key_frame_offset > 0 ? HAS_KEYS : NO_KEYS);
    }
    else
    {
        dbox_setfield(d, VIDEO_TYPE_FIELD, NONE);
        dbox_setfield(d, VIDEO_COPYRIGHT_FIELD, "");
        dbox_setfield(d, SIZE_FIELD, "");
        dbox_setfield(d, VIDEO_FIELD, "");
    }

    track_inc.max = dp->nsoundtracks ? dp->nsoundtracks : 1;
    set_audio_fields(dp);

    if (hdr)
        dbox_setfieldf(d, CHUNK_INFO_FIELD,
            "%d chunks x %d fpc = %g s",
            hdr->nchunks,
            hdr->frames_per_chunk,
            (double)dp->length/100);
    else
        dbox_setfield(d, CHUNK_INFO_FIELD, NONE);

    dbox_fadestate(d, OK_FIELD, hdr == NULL);
}

/* --------------------------------------------------------------------------------------- */


/*
 * Handle user events. 
 */

static void display_events(dbox d, void *handle)
{
    display_str *dp = handle;
    dbox_field action = dbox_get(d);
    switch (action)
    {
        case dbox_CLOSE:
            info_dispose(dp);
            break;

        default:
            dboxinc_processinc(d, SOUNDTRACK_FIELD, action, &track_inc, dp);
            break;
    }
}

/*
 * Open an info window from the given movie display
 */

void info_open(display_str *dp)
{
    if (dp->info)
        bring_to_front(dbox_syshandle(dp->info));

    else if ((dp->info = dbox_new(DISPLAY_IDENT)) != NULL)
    {
        set_fields(dp);

        dbox_eventhandler(dp->info, display_events, dp);

        dbox_showstatic(dp->info);
    }
}

/*
 * Dispose of the info window belonging to the given display.
 * Free the new sprite held (if any).
 */

void info_dispose(display_str *dp)
{
    if (dp->info)
    {
        dbox_dispose(&dp->info);
        dp->info = NULL;
    }
}

/*
 * If a new movie has been dropped into the display window
 * then update the text shown.
 */

void info_update(display_str *dp)
{
    if (dp->info)
        set_fields(dp);
}

void info_popup(display_str *dp)
{
    if (dp->info == NULL)
    {
        if ((dp->info = dbox_new(DISPLAY_IDENT)) != NULL)
        {
            dbox_field action;
            set_fields(dp);

            dbox_show(dp->info);

            do
            {
                action = dbox_fillin(dp->info);
                if (action != dbox_CLOSE)
                    dboxinc_processinc(dp->info, SOUNDTRACK_FIELD, action, &track_inc, dp);
            }
            while (action != dbox_CLOSE);

            info_dispose(dp);
        }
    }
}

/* eof info.c */
