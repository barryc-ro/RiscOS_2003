/* > play.c

 * © SJ Middleton, 1993

 * This file contains the routines that control movie playback.
 * This comes in two sorts.

 * - sound only playback. See ARLib for all the code to do this. This just kicks
 *   it off and handles updates of the timebar and the play button when it finishes.

 * - video playback. Builds a command line and passes it to Player. Updates
 *   everything necessary afterwards according to the system variables setup by Player
 */

#include "alarm.h"
#include "msgs.h"
#include "pane.h"
#include "res_spr.h"
#include "screenmode.h"
#include "swis.h"
#include "visdelay.h"
#include "werr.h"
#include "wimpx.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "macros.h"
#include "memalloc.h"
#include "strfn.h"
#include "sys.h"
#include "wmisc.h"

#include "artools.h"
#include "display.h"
#include "arsound.h"
#include "replaytype.h"

#define BAD_SOUNDTRACK      msgs_lookup("play0")
#define ERROR_STRING        msgs_lookup("play1")
#define NO_STEP_FORMAT      msgs_lookup("play2")
#define INVALID_TRAJECTORY_FILE msgs_lookup("play3")
#define INVALID_SHAPE_FILE      msgs_lookup("play4")

#define START_PLAYER        msgs_lookup("play5")
#define MEM_NEEDED          128*1024

#define GRANULARITY         4

#define PIXEL_PRECISION     12

#define NSPRITES            4

static int  pending_pause_at = -1;

/* -------------------------------------------------------------------------------- */

static void play_updatefn(void *handle);
static int play_createsprites(int xoffset[], int yoffset[], int state);
static void play_disposesprites(void);
static int play_timebarpaintcode(display_str *dp, wimp_box *box);

/* -------------------------------------------------------------------------------- */

/*
 * Separate alarm function set up during sound-only playback to handle
 * updating of the timebar.
 */

static void play_alarm(int called_at, void *handle)
{
    display_str *dp = handle;
    int         t, ref = armovie_getpos(&t, NULL);

    if (ref == dp->ref_playing)
    {
        dp->current_frame = (int)(t*dp->hdr->fps/100.0 + 0.5);
        tools_refreshtime(dp);
        alarm_set(alarm_timenow() + GRANULARITY, play_alarm, dp);

        if (pending_pause_at != -1 && dp->current_frame >= pending_pause_at)
        {
            arsound_setmute(arsound_readmute() | arsound_Pause);
            pending_pause_at = -1;
        }
    }
    UNUSED(called_at);
}

/* -------------------------------------------------------------------------------- */

/*
 * Handle playback events from ARLib.
 * If our movie stops for any reason then unpress the play button.
 */

static void play_events(int reference, armovie_returncode code, void *handle)
{
    display_str *dp = handle;

    if (code <= armovie_Aborted && reference == dp->ref_playing)
    {
        play_alarm(0, dp);

        dp->state = play_Stopped;
        tools_refreshplay(dp);
        tools_refreshpause(dp);
        tools_timemode(dp, time_Decimal);
    }
}

/* -------------------------------------------------------------------------------- */

static int get_time(int frame, display_str *dp)
{
    return (int) (frame/dp->hdr->fps*100 + 0.5);
}

/*
 * Kick off movie playback, either by calling ARLib, in which case we exit and
 * movie plays. Functions above handle things for then on.
 * or by building a command-line from tall the option setup and calling Player
 * then tidying up afterwards.
 */

static void play_movie(display_str *dp, artool_playstr *play, BOOL step, BOOL big)
{
    armovie_hdr     *hdr = dp->hdr;
    artool_flag     f;

    f = play->flags;

/* If at end of movie reset to start */
    if (dp->current_frame >= hdr->nframes)
    {
        dp->current_frame = 0;
        tools_refreshtime(dp);
    }

/* check whether to multi-task or not */
    if (hdr->video_format == 0 || (f & artool_Video) == 0)
    {
        armovie_playflag flags;

        if (step && (hdr->sound->sflags & armovie_Seekable) == 0)
        {
            werr(0, NO_STEP_FORMAT);
            return;
        }

/* store reference in case we start another playback from another ARTools window */
        dp->ref_playing = alarm_timenow();

        flags = arplay_PlayChunk;
        if (!step && (f & artool_Loop) != 0)
        {
            flags |= arplay_Loop | arplay_LoopFromStart;
            if (f & artool_LoopForever)
                flags |= arplay_LoopIndefinite;
        }

        if (!dp->sound_on)
            flags |= arplay_StartMute;
        if (dp->state == play_Paused)
            flags |= arplay_StartPause;

        if (armovie_playsound(dp->filename,
            get_time(dp->current_frame, dp),
            step ? get_time(dp->current_frame+1, dp) - 1 : -1, 
            play->loop_for, flags, play->soundtrack,
            dp->ref_playing) != NULL)
        {
            armovie_eventhandler(play_events, dp);

            artoolsetup_setupdatefn(play_updatefn, dp);

            if (step)
                dp->current_frame++;
            else
            {
                play_alarm(0, dp);
                tools_timemode(dp, time_Seconds);
            }
        }
        else
            dp->state = play_Stopped;       /* error */
    }
    else
    {
        BOOL    grab_screen = TRUE,
                update_buttons = FALSE;
        int     n = 0;
        char    buffer_name[256],
                buffer[512];

        visdelay_begin();

        if (step)
            f &= ~(artool_ChangeMode | artool_Trajectory | artool_Shape | artool_Loop | artool_RateAdjust);

/* build command line for Player in two buffers
 * one gets passed in directly.
 * The other via the ExtraArgs variable.
 */
        sprintf(buffer_name, "/%s -noerror", dp->filename);

        buffer[0] = '\0';
        if (big)
        {
            strcat(buffer_name, " -big");
            grab_screen = FALSE;
        }

        if (dp->state == play_Paused)
            strcat(buffer_name, " -paused");

        if (step)
            n += sprintf(buffer + n, " -startat %d -playfor 0", get_time(dp->current_frame + 1, dp));

        else if (dp->current_frame)
            n += sprintf(buffer + n, " -startat %d", get_time(dp->current_frame, dp));

/* If the traj file exists in the traj directory then give full path, else as user entered */
        if (f & artool_Trajectory && play->trajectory_file)
        {
            char *s;
            if (get_trajectory_file(play->trajectory_file, &s))
            {
                n += sprintf(buffer + n, " -follow %s", s);
                if (play->trajectory_rate != 0)
                    n += sprintf(buffer + n, ",%d", play->trajectory_rate);
                free(s);
            }
            else
                werr(0, INVALID_TRAJECTORY_FILE, play->trajectory_file);

            grab_screen = FALSE;
        }

/* If the shape file exists in the shape directory then give full path, else as user entered */
        if (f & artool_Shape && play->shape_file)
        {
            char *s;
            if (get_shape_file(play->shape_file, &s))
            {
                n += sprintf(buffer + n, " -shape %s", s);
                free(s);
            }
            else
                werr(0, INVALID_SHAPE_FILE, play->shape_file);

            grab_screen = FALSE;
        }

        if (f & artool_ChangeMode)
        {
            n += sprintf(buffer + n, " -mode %s", play->mode);
            grab_screen = FALSE;
        }

/* If we are playing in the desktop */
        if ((f & artool_ChangeMode) == 0 && !big && getenv(ARMOVIE_MODE) == NULL)
        {
            display_moveonscreen(dp->window);
            n += display_positions(dp, buffer + n);

/* setup the button positions and handler code */
            if (dp->tools_open)
            {
                int xarray[NSPRITES], yarray[NSPRITES], code;
                n += tool_buttonpositions(dp, buffer + n, xarray, yarray);

                code = play_createsprites(xarray, yarray,
                            (dp->state == play_Paused ? arsound_Pause : 0) |
                            (dp->sound_on ? 0 : arsound_Mute));

                if (code)
                    n += sprintf(buffer + n, " -mouse %d", code);

                if ((options.flags & option_WindowButtons) == 0)
                    n += sprintf(buffer + n, " -noadjust -nomenu");

                update_buttons = TRUE;
            }

/* setup the code to paint the timebar */
            if (!step)
            {
                wimp_box box;
                if (tool_barposition(dp, &box))
                {
                    int code = play_timebarpaintcode(dp, &box);
                    if (code)
                        n += sprintf(buffer + n, " -paint %d", code);
                }
            }
        }
    
        if (f & artool_Loop)
        {
            n += sprintf(buffer + n, " -loop");
            if ((f & artool_LoopForever) == 0)
                n += sprintf(buffer + n, " %d", play->loop_for);
        }

/* check we actually are going to play a valid soundtrack
 * (important as Player makes a mess otherwise)
 */
        if (step)
            n += sprintf(buffer + n, " -quiet");
        else if (hdr->nsoundtracks)
        {
            if (play->soundtrack > hdr->nsoundtracks)
                werr(0, BAD_SOUNDTRACK, play->soundtrack);

            else if (play->soundtrack != 1)
                n += sprintf(buffer + n, " -track %d", play->soundtrack);
        }

        if (!dp->sound_on)
            n += sprintf(buffer + n, " -mute");

        if (f & artool_RateAdjust)
            n += sprintf(buffer + n, " -speed %g", (double)play->rate_change/RATE_UNIT);

        if (f & artool_ExtraArgs && play->extra_args != NULL)
            n += sprintf(buffer + n, " %s", play->extra_args);

        if (grab_screen)
            strcat(buffer_name, " -leave");

/* set tool bar buttons to correct states */
        if (update_buttons)
        {
            tools_refreshplay(dp);
            tools_refreshpause(dp);
            if (!step)
                tools_timemode(dp, time_Faded);
        }

/* Free memory - will reallocate this area when playback finishes */
        spr_area_Reinit(dp->spranchor);

/* set system variables */
        setenv(ARMOVIE_ARGS, buffer, 0);
        setenv(ARMOVIE_POSITION, 0, 0);
        setenv(ARMOVIE_ERROR, 0, 0);
        setenv(ARMOVIE_SOUNDSTATE, 0, 0);

        setenv("ARPlayer$CommandLine1", buffer_name, 0);
        setenv("ARPlayer$CommandLine2", buffer, 0);

        if (!step)
            visdelay_end();

/* Call Player */
        if (setup_nextslot(MEM_NEEDED, START_PLAYER) &&
            os_err(wimp_starttask(buffer_name)) == NULL)
        {
            char *s;
            wimp_openstr o;
            wimp_redrawstr r;

/* get final position - must be before grabbing sprite off screen */
            if (step)
                dp->current_frame++;
            else
            {
                s = getenv(ARMOVIE_TIME);
                if (s)
                {
                    dp->current_frame = (int)(strtoul(s, NULL, 10)/100.0 * hdr->fps + 0.5);
                    if (dp->current_frame > dp->nframes)
                        dp->current_frame = dp->nframes;
                }
            }

/* Grab sprite off screen afterwards - or load helpful sprite if not possible */
            if (!grab_screen || !display_grabsprite(dp, (spr_box *)&r.box))
                display_loadsprite(dp);
            else
            {
                r.w = -1;
                no_err(wimp_force_redraw(&r));
            }

/* reopen just in case there has been any change in sizes or whatever */
            o = window_state(dp->window);
            pane_check_open(&o);

/* check for error */
            s = getenv(ARMOVIE_ERROR);
            if (s && strcmpi(s, "escape") != 0)
                werr(0, ERROR_STRING, s);

/* get sound state at end of playing */
            s = getenv(ARMOVIE_SOUNDSTATE);
            if (s)
            {
                dp->sound_on = s[0] == '1';
                cond_set_bit(dp->sound_on, options.flags, option_Sound);
                tools_refreshsound(dp);
            }
        }
        else
            display_loadsprite(dp);

        dp->state = play_Stopped;

        play_disposesprites();

        if (!step)
            tools_timemode(dp, time_Decimal);

        if (step)
            visdelay_end();
    }

    tools_refreshtime(dp);
    tools_refreshplay(dp);
    tools_refreshpause(dp);
    tools_clearstop(dp);
}

/* -------------------------------------------------------------------------------- */

/*
 * External functions
 * Called from the similarly named buttons in the Tools window
 * or from equivalent places.
 */

void play_stop(display_str *dp)
{
    if (dp->state == play_Stopped)
    {
        dp->current_frame = 0;
        display_loadsprite(dp);
        tools_refreshtime(dp);
    }
    else
    {
        armovie_stopsound();
        pending_pause_at = -1;

        dp->state = play_Stopped;
        tools_refreshplay(dp);
        tools_refreshpause(dp);
        tools_timemode(dp, time_Decimal);
    }
}

void play_start(display_str *dp, BOOL big)
{
    if (dp && dp->filename && dp->state == play_Stopped)
    {
        if (dp->hdr->video_format || !big)
        {
            artool_playstr  play;
            memset(&play, 0, sizeof(play));

            copy_playstr(&dp->play, &play);
            artoolsetup_readoptions(&play);

            dp->state = play_Playing;
            play_movie(dp, &play, FALSE, big);

            dispose_playstr(&play);
        }
    }
}

void play_pause(display_str *dp)
{
    if (dp->filename) switch (dp->state)
    {
        case play_Stopped:
        {
            artool_playstr  play;
            memset(&play, 0, sizeof(play));

            copy_playstr(&dp->play, &play);
            artoolsetup_readoptions(&play);

            dp->state = play_Paused;
            if (dp->hdr->video_format == 0 || (play.flags & artool_Video) == 0)
            {
                tools_refreshpause(dp);
                tools_refreshplay(dp);
                play_movie(dp, &play, FALSE, FALSE);
            }
            else
                play_movie(dp, &play, FALSE, FALSE);

            dispose_playstr(&play);
            break;
        }

        case play_Playing:
            dp->state = play_Paused;
            arsound_setmute(arsound_readmute() | arsound_Pause);
            tools_refreshpause(dp);
            break;

        case play_Paused:
            dp->state = play_Playing;
            pending_pause_at = -1;
            arsound_setmute(arsound_readmute() &~ arsound_Pause);
            tools_refreshpause(dp);
            break;
    }
}

/*
 * Called from tools.c when the timebar is moved
 * Only has meaning for video.
 */

void play_seek(display_str *dp)
{
    artool_playstr  play;
    memset(&play, 0, sizeof(play));

    copy_playstr(&dp->play, &play);
    artoolsetup_readoptions(&play);

    if (dp->filename && dp->hdr->video_format && (play.flags & artool_Video) != 0)
    {
        if (dp->current_frame)
            dp->current_frame--;
        play_movie(dp, &play, TRUE, FALSE);
    }

    dispose_playstr(&play);
}

void play_step(display_str *dp, int by)
{
    if (dp->filename == NULL)
        return;

    switch (dp->state)
    {
        case play_Stopped:
        {
            artool_playstr  play;
            memset(&play, 0, sizeof(play));

            copy_playstr(&dp->play, &play);
            artoolsetup_readoptions(&play);

            play_movie(dp, &play, TRUE, FALSE);

            dispose_playstr(&play);
            break;
        }

        case play_Playing:
            dp->state = play_Paused;
            arsound_setmute(arsound_readmute() | arsound_Pause);
            tools_refreshpause(dp);
            break;

        case play_Paused:
            if (pending_pause_at != -1)
                pending_pause_at++;
            else
            {
                arsound_setmute(arsound_readmute() &~ arsound_Pause);
                if (dp->current_frame + 1 >= dp->nframes)
                    pending_pause_at = 1;
                else
                    pending_pause_at = dp->current_frame + 1;
            }
            break;
    }
    UNUSED(by);
}

/*
 * Call ARLib to toggle mute bit whilst playing sound-only
 */

void play_togglemute(display_str *dp)
{
    dp->sound_on = !dp->sound_on;
    cond_set_bit(dp->sound_on, options.flags, option_Sound);
    tools_refreshsound(dp);
    if (dp->state != play_Stopped)
        arsound_setmute((arsound_readmute() &~ arsound_Mute) | (dp->sound_on ? 0 : arsound_Mute));
}

/* -------------------------------------------------------------------------------- */

static void play_updatefn(void *handle)
{
    display_str *dp = handle;
    if (dp->state == play_Playing)
    {
        play_stop(dp);
        play_start(dp, FALSE);
    }
}

/* -------------------------------------------------------------------------------- */

static os_error *spr_ChangeSpriteMode(spr_area srcarea, const char *srcname, spr_area dstarea, int xoffset)
{
    os_error        *e;
    sprite_info     info;
    sprite_ptr      dst_sptr;
    sprite_state    state;

    sprite_factors  factors;
    char            pixtrans[256];

/* get bit offset of left edge of button from the next lowest word boundary */
    int bit_offset = ((xoffset >> screen_Vars.xeig) << screen_Vars.log2bpp) & 31;
    int pixel_offset = bit_offset >> screen_Vars.log2bpp;

/* create new sprite in current mode/palette */
    if ((e = _swix(Wimp_ReadPixTrans, _IN(0)|_IN(1)|_IN(2)|_IN(6)|_IN(7),
            0x100, spr_area_Ptr(srcarea), srcname, &factors, pixtrans)) != NULL)
        return e;

    if ((e = spr_ReturnInfo_named(srcarea, srcname, &info)) != NULL ||
        (e = spr_CreateSprite(dstarea, srcname, sprite_nopalette,
            info.width*factors.xmag/factors.xdiv + pixel_offset,
            info.height*factors.ymag/factors.ydiv,
            spr_CurrentScreenMode(), &dst_sptr)) != NULL)
        return e;

/* plot button sprite into new sprite at the pixel offset for easier plotting by module */
    if ((e = spr_SwitchOutputToSprite(dst_sptr, &state, NULL)) == NULL)
    {
        e = spr_PutSpriteScaled_named(srcarea, srcname, pixel_offset << screen_Vars.xeig, 0, 0, NULL, pixtrans);

        spr_RestoreState(&state);

/* massage sprite header to fill in start position of actual important bit of sprite */
        ((sprite_header *)dst_sptr)->lbit = bit_offset;
    }
    return e;
}

static char *sprite_names[] =
{
    "pause",
    "exit",
    "single",
    "loud",

    "ppause",
    "pexit",
    "psingle",
    "mute"
};

#define Replay_RegisterSprites      0x48B00
#define Replay_DeRegisterSprites    0x48B01
#define Replay_TimebarPaintAddress  0x48B02
#define Replay_Version              0x48B03

static int play_createsprites(int xoffset[], int yoffset[], int state)
{
    int         i;
    int         address[NSPRITES*2];
    int         code = 0;
    spr_area    new = spr_area_Init(f_alloc, f_free, "current mode sprites");

    if (new == NULL)
        return 0;

    for (i = 0; i < NSPRITES; i++)
    {
        if (os_err(spr_ChangeSpriteMode(resspr_Anchor(), sprite_names[i], new, xoffset[i])) != NULL ||
            os_err(spr_ChangeSpriteMode(resspr_Anchor(), sprite_names[i + NSPRITES], new, xoffset[i])) != NULL)
        {
            spr_area_Dispose(&new);
            return 0;
        }

/* calculate offset from screen base address of button top left */
        if (yoffset[i] == -1)
            address[i] = -1;
        else
            address[i] = screen_BitAddress(xoffset[i], yoffset[i]) >> 3;
        address[i + NSPRITES] = address[i];
    }

    if (os_err(_swix(Replay_RegisterSprites, _IN(0)|_IN(1)|_IN(2)|_IN(3) | _OUT(0),
            spr_area_Ptr(new), address, sprite_names, state,
            &code)) != NULL)
        code = 0;

    spr_area_Dispose(&new);

    return code;
}

static void play_disposesprites(void)
{
    os_err(_swix(Replay_DeRegisterSprites, 0));
}

/* -------------------------------------------------------------------------------- */

static int play_timebarpaintcode(display_str *dp, wimp_box *box)
{
    int code, fg_col, bg_col;

    _swix(ColourTrans_ReturnColourNumber, _IN(0) | _OUT(0), TIMEBAR_COLOUR, &fg_col);
    _swix(ColourTrans_ReturnColourNumber, _IN(0) | _OUT(0), TIMEBAR_BG_COLOUR, &bg_col);

    if (os_err(_swix(Replay_TimebarPaintAddress, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5) | _OUT(0),
            (box->x1 << PIXEL_PRECISION) / dp->nframes,
            screen_BitAddress(box->x0, box->y0) >> 3,
            box->y1, fg_col, bg_col, screen_Vars.log2bpp,
            &code)) != NULL)
        code = 0;
    return code;
}

/* -------------------------------------------------------------------------------- */

/*
 * This function attempts to ensure that 'mem_needed' is available in the next slot.
 * If there is not enough memory around it uses the msg passed in along with oom_err().
 * Returns succcess.
 */

BOOL setup_nextslot(int mem_needed, const char *msg)
{
    BOOL    ok_to_play = FALSE;
    int     next, free;

    os_err(_swix(Wimp_SlotSize, _IN(0)|_IN(1) | _OUT(1)|_OUT(2), -1, -1, &next, &free));
    if (free < mem_needed)
        oom_err(msg, mem_needed);
    else if (next < mem_needed)
        ok_to_play = os_err(_swix(Wimp_SlotSize, _IN(0)|_IN(1), -1, mem_needed)) == NULL;
    else
        ok_to_play = TRUE;

    return ok_to_play;
}

/* -------------------------------------------------------------------------------- */

/* eof play.c */
