/* > screenmode.h

 * © SJ Middleton, 1993

 * Many other files rely on this file. It provides a global structure
 * screen_Vars with details of the current mode as well as facilities
 * for reading and writing oaletes and setting colours.

 * The various calls use ColourTrans or FontManager as necessary to
 * get their work done.

 * some calls take a mode as an integer. This should really be a
 * mode_specifier union but unions are such a pain to deal with.
 * So mode_xeig(int mode) for example could take a mode number,
 * a sprite type, or a pointer to a mode_selector.

 */

#ifndef __screenmode_h
# define __screenmode_h

#ifndef __os_h      /* For os_error * */
# include "os.h"
#endif


/*
 * This is how the info on the current mode is returned to us
 */

typedef struct
{
    int index, value;
} mode_varpair;

typedef struct
{
    unsigned format : 8;    /* = 0x01 */
    unsigned flags  : 24;   /* currently unused */
    int xres,           /* in pixels */
        yres,           /* in pixels */
        depth,          /* log2bpp currently: 0-5 */
        frame_rate;     /* in Hz */
/*  mode_varpair array[]  two words - index,value
    int terminator;        -1
 */
} mode_selector;


/*
 * This is a general mode_specifier. More normally we pass these around
 * as int's because it is so much easier.
 */

typedef union
{
    int             mode,
                    spritetype;
    mode_selector   *specifier;
} mode_specifier;

/*
 * Read bunch of vdu variables on current mode
 */

typedef struct
{
    int npixels, nlines,        /* read from VDU variables */
        log2bpp,
        xeig, yeig,
        linelength,

        oswidth, osheight,      /* calculated from above */
        bpp,
        dx, dy,

        spritetype,
        spritemode;             /* pass to CreateSprite */
} mode_infostr;

extern mode_infostr screen_Vars;        /* cached everytime you call screen_CurrentInfo() */

extern mode_infostr screen_CurrentInfo(void);

/*
 * Change mode
 * uses vdu if OS_ScreenMode not available
 */

extern os_error *mode_Select(mode_specifier mode);

/*
 * Get info on current mode
 * Could return with either a mode number or specifier
 * uses os_byte if OS_ScreenMode not available
 */

extern mode_specifier screen_ReturnSpecifier(void);

/*
 * Find standard mode number for given resolution
 * else return -1.
 */

extern int mode_EquivalentMode(int bpp, int xeig, int yeig);

/*
 * Enumerate available screen modes
 */

typedef struct
{
    int             entry_size;
    mode_selector   selector;
} mode_enumeratestr;

extern BOOL mode_Enumerate(mode_enumeratestr *blk, int *context, int *size);
extern int mode_CountEntries(int *size);


/*
 * Discover what type of mode specifier we actually have
 * if passed to some ColourTrans swis it could also be a sprite area ptr.
 */

typedef enum
{
    mode_IsModeNumber,
    mode_IsSpriteType,
    mode_IsSpecifier
} mode_type;

extern mode_type mode_Type(int mode);
extern mode_type mode_String(mode_specifier mode, char *buffer);


/*
 * Read the given mode variable fir the given mode.
 * Returns TRUE if OK, FALSE if mode or variable invalid.
 */

extern BOOL mode_var(int mode, int var, int *val);

/*
 * These calls will return the correct calls for modes and sprite types
 * on RISCOS 3.1 and 3.X
 * Can also pass -1 for the current mode.
 */

extern int mode_xeig(int mode);     /* eigen factor 0,1,2 */
extern int mode_yeig(int mode);
extern int mode_xppi(int mode);     /* ppi - 45 or 90 usually */
extern int mode_yppi(int mode);
extern int mode_bpp(int mode);      /* bpp 1,2,4,8,16,32 */


/*
 * Read and write screen palette - as in spr_ReadPalette, AddPalette
 * Uses ColourTrans, and mallocs space for the palette.
 */

extern os_error *screen_WritePalette(void *palette);
extern os_error *screen_ReadPalette(void **pbuffer, int *size_out);

/*
 * Read the default palette for a given mode.
 */

extern os_error *mode_ReadDefaultPalette(int mode, void **pbuffer, int *size_out);

/*
 * More calls to ColourTrans for setting colours in the current screen mode
 * These are the preferred calls - shouldn't need to use any others.
 */

extern os_error *screen_SetFGCol(int paletteword);
extern os_error *screen_SetBGCol(int paletteword);
extern os_error *screen_SetOppFGCol(int paletteword);
extern os_error *screen_SetOppBGCol(int paletteword);
extern os_error *screen_SetFontColours(int font, int background, int foreground, BOOL anti_alias);

/* returns address on screen of the given OS coordinate in bits */

extern int screen_BitAddress(int osx, int osy);

/* These are just included in case there are any old files around. */

#ifdef screenmode_internal

extern BOOL wimpt_checkmode(void);
extern int wimpt_bpp(void);
extern int wimpt_dx(void);
extern int wimpt_dy(void);
extern int wimpt_mode(void);

#endif

#endif

/* eof screenmode.h */
