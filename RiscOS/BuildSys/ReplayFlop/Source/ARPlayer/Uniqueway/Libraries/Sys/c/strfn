/* > strfn.c

 * © SJ Middleton, 1992

 * Some useful string functions extra to <string.h>

 */

#include "swis.h"

#include <ctype.h>
#include <limits.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include "strfn.h"

/* --------------------------------------------------------------------- */

/* compare and search functions */

int strncmpi(const char *s1, const char *s2, size_t n)
{
    if (s1 && s2)
    {
        int i;
        for (i = 0; i < n; i++)
        {
            int c1 = *s1++,
                c2 = *s2++;
            c1 = toupper(c1);
            c2 = toupper(c2);
            if (c1 != c2)
                return c1 - c2;
            else if (c1 == '\0')
                return 0;
        }
    }
    return 0;
}

int strcmpi(const char *s1, const char *s2)
{
    return strncmpi(s1, s2, UINT_MAX);
}

char *strstri(const char *s1, const char *s2)
{
    if (s1 && s2)
    {
        int i,
            s2n = strlen(s2),
            last_pos = strlen(s1) - s2n;

        for (i = 0; i <= last_pos; i++, s1++)
            if (strncmpi(s1, s2, s2n) == 0)
                return (char *)s1;
    }
    return NULL;
}

/* --------------------------------------------------------------------- */

/* whole string functions */

char *strdup(const char *s)
{
    char *s1 = NULL;
    if (s)
    {
        s1 = malloc(strlen(s) + 1);
        if (s1)
            strcpy(s1, s);
    }
    return s1;
}

char *strdup_gstrans(const char *s)
{
    char *s1 = NULL;
    if (s)
    {
        s1 = malloc(512);
        if (s1)
        {
            if (_swix(OS_GSTrans, _IN(0)|_IN(1)|_IN(2),
                    s, s1, 512) != NULL)
                strncpy(s1, s, 512);
            s1 = realloc(s1, strlen(s1)+1);
        }
    }
    return s1;
}

char *strrplc(char **ps, const char *txt)
{
    char *s = NULL;
    if (txt == NULL || txt[0] == '\0')
    {
        free(*ps);
        *ps = NULL;
    }
    else if ((s = realloc(*ps, strlen(txt) + 1)) != NULL)
    {
        strcpy(s, txt);
        *ps = s;
    }
    return s;
}

char *strupr(char *s1)
{
    if (s1)
    {
        char *s = s1;
        int c;
        while ((c = *s) != '\0')
            *s++ = toupper(c);
    }
    return s1;
}

char *strlwr(char *s1)
{
    if (s1)
    {
        char *s = s1;
        int c;
        while ((c = *s) != '\0')
            *s++ = tolower(c);
    }
    return s1;
}

/* --------------------------------------------------------------------- */

char *strcatx(char **s1, const char *s2)
{
    char *new = NULL;
    if (*s1 == NULL)
        new = *s1 = strdup(s2);
    else
    {
        if (s2 == NULL)
            s2 = "";
    
        if ((new = realloc(*s1, strlen(*s1) + strlen(s2) + 1)) != NULL)
        {
            *s1 = new;
            strcat(new, s2);
        }
    }
    return new;
}

char *stradd(const char *s1, const char *s2)
{
    char *s;

    if (s1 == NULL)
        s1 = "";
    if (s2 == NULL)
        s2 = "";

    if ((s = malloc(strlen(s1) + strlen(s2) + 1)) != NULL)
    {
        strcpy(s, s1);
        strcat(s, s2);
    }

    return s;
}

char *strextend(char **ps, int by)
{
    char *s = *ps;
    char *s1 = realloc(s, (s ? strlen(s) : 0) + 1 + by);
    if (s1)
        *ps = s1;
    return s1;
}

/* --------------------------------------------------------------------- */

/* BASIC style string functions */

char *strmid(const char *s1, size_t from, size_t len)
{
    char *s = NULL;
    if (s1)
    {
        int s1len = strlen(s1);
        if (from < s1len)
        {
            if (len > s1len)
                len = s1len;
            if ((s = malloc(len + 1)) != NULL)
            {
                memcpy(s, s1 + from, len);
                s[len] = '\0';
            }
        }
    }
    return s;
}

char *strleft(const char *s1, size_t len)
{
    return strmid(s1, 0, len);
}

char *strright(const char *s1, size_t len)
{
    char *s = NULL;
    if (s1)
    {
        int len1 = strlen(s1) - len;
        s = strmid(s1, len1 < 0 ? 0 : len1, len);
    }
    return s;
}

/* --------------------------------------------------------------------- */

const char *strsafe(const char *s)
{
    return s ? s : "";
}

int strempty(const char *s)
{
    return s == NULL || s[0] == '\0';
}

/* --------------------------------------------------------------------- */

char *strcombine(char **base, ...)
{
    int     len = base && *base ? strlen(*base) + 1 : 1;
    char    *arg, *s;
    va_list ap;

    va_start(ap, base);
    do
    {
        arg = va_arg(ap, char *);
        if (arg)
            len += strlen(arg);
    }
    while (arg != NULL);
    va_end(ap);

    if ((s = realloc(base ? *base : NULL, len)) != NULL)
    {
        if (base)
            *base = s;
        else
            s[0] = '\0';

        va_start(ap, base);
        do
        {
            arg = va_arg(ap, char *);
            if (arg)
                strcat(s, arg);
        }
        while (arg != NULL);
        va_end(ap);
    }

    return s;
}

/* --------------------------------------------------------------------- */

/* eof strfn.c */
