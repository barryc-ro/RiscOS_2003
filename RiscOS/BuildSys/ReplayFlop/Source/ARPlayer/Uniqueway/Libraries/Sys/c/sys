/* > c.sys

 *
 * © SJ Middleton, 1991
 *

 */

#include "swis.h"
#include "osreasons.h"

#include <string.h>

#include "sys.h"

/*
 * Read bytes from any alignment and return as an integer.
 */

int get_bytes(const void *a, int nbytes)
{
    char    buffer[4];
    int     i, 
            pos_nbytes = nbytes < 0 ? - nbytes : nbytes,
            *ib = (int *)buffer;

    *ib = 0;

    for (i = 0; i < pos_nbytes; i++)
        buffer[nbytes < 0 ? -nbytes-i-1 : i] = ((char *)a)[i];

    return *ib;
}

/*
 * Write bytes from an integer to any alignment.
 */

void put_bytes(void *a, int val, int nbytes)
{
    char    buffer[4];
    int     i, 
            pos_nbytes = nbytes < 0 ? - nbytes : nbytes,
            *ib = (int *)buffer;

    *ib = val;

    for (i = 0; i < pos_nbytes; i++)
        ((char *)a)[nbytes < 0 ? -nbytes-i-1 : i] = buffer[i];
}

/*
 * Return val limited to be >= min and <= max.
 */

int circular_val(int val, int min, int max)
{
    if (val < min)
        return max;
    else if (val > max)
        return min;
    else
        return val;
}

/*
 * Transfer upto 'maxlen' characters from 'in' to 'out'.
 * change any characters < 32 to spaces and strip off trailing spaces.
 * if 'in' == NULL then assume in == out
 */

void read_string_spaces(char *out, const char *in, int maxlen)
{
    const char *p = in == NULL ? (const char *)out : in;
    int         i, last_char = -1;
    for (i = 0; i < maxlen; i++)
    {
        int c = p[i];
        if (c < 32)
            c = ' ';
        else if (c > 32)
            last_char = i;
        out[i] = c;
    }
    out[last_char + 1] = '\0';
}

/*
 * Transfer up to 'maxlen' characters from 'in' to 'out' and pad from the last char 
 * to 'maxlen' with spaces.
 * if 'in' == NULL then assume in == out
 */

void write_string_spaces(char *out, const char *in, int maxlen)
{
    int len;

    if (in != NULL)
    {
        len = strlen(in);
        strncpy(out, in, maxlen);
    }
    else
        len = strlen(out);

    if (len < maxlen)
        memset(&out[len], ' ', maxlen - len);
}

os_error *setenv(const char *varname, const char *val, int type)
{
    return (os_error *)_swix(OS_SetVarVal, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4),
                    varname, val, val ? strlen(val) : -1, 0, type);
}

/* eof c.sys */
