/* > h.OSreasons

 *
 * © SJ Middleton, 1990
 *

 */

#ifndef __osreasons_h
# define __osreasons_h

#ifndef __os_h
# include "os.h"
#endif

/* ------------------------------ OS Byte --------------------------------------------- */
    
#define osbyte_Set      0
#define osbyte_Read     0xff

typedef enum
{
    osbyte_CursorKeyStatus              =    0x04,
    osbyte_WriteDurationFirstFlash      =    0x09,
    osbyte_WriteDurationSecondFlash,
    osbyte_SetKbdDelay,
    osbyte_SetKbdRepeat,                
    osbyte_EnableEvent,
    osbyte_DisableEvent,
    osbyte_WaitVSync                    =    0x13,
    osbyte_RWAlphOrKeybNum              =    0x47,
    osbyte_SelectPointer                =    0x6A,
    osbyte_WriteVDUBank                 =    0x70,
    osbyte_WriteDisplayBank,
    osbyte_UpdateLEDs                   =    0x76,
    osbyte_LockKbdRpt                   =    0x78,
    osbyte_KbdScan,
    osbyte_KbdScanFrom16,
    osbyte_ClearEscape                  =    0x7C,
    osbyte_ScanForKey                   =    0x81,
    osbyte_ReadScrModeAndChar           =    0x87,
    osbyte_ReadCMOS                     =    0xA1,
    osbyte_WriteCMOS,
    osbyte_RWKbdStatus                  =    0xCA,
    osbyte_InterpretFromC0              =    0xDD,
    osbyte_InterpretFromD0,
    osbyte_InterpretFromE0,
    osbyte_InterpretFromF0,
    osbyte_InterpretFnKey,
    osbyte_InterpretShFnKey,
    osbyte_InterpretCtlFnKey,
    osbyte_InterpretShCtlFnKey,
    osbyte_EnableEscape,
    osbyte_KeypadInterpretation         =    0xee,
    osbyte_KeypadShiftEffect            =    0xfe
} osbyte_reason;

enum    /* r1 for osbyte_EnableEscape */
{
    EscapeEnable = 0,
    EscapeDisable
};

enum    /* r1 for osbyte_CursorKeyStatus */
{
    CursorKeys_Edit = 0,
    CursorKeys_Ascii,
    CursorKeys_FnKey
};

enum    /* r1 for Buffer Code Interpret osbytes */
{
    Interpret_Ignore,        /* Code is ignored */
    Interpret_FnString,        /* Code generates function key string (Alias$Key) */
    Interpret_NULL            /* Code generates 0 followed by code */
                            /* Else code generates r1 + code MOD 16 */
};

/* r1 for osbyte_SelectPointer also give pointer number or 0 for pointer off */

#define Pointer_Link    0
#define    Pointer_Unlink    0x80

enum    /* r1 for osbyte_RWKbdStatus */
{
    KBStat_PendingAlt    = 0x01,
    KBStat_ScrollLock    = 0x02,
    KBStat_NoNumLock    = 0x04,
    KBStat_ShiftEngaged    = 0x08,
    KBStat_NoCapsLock    = 0x10,
    KBStat_NoShiftLock    = 0x20,
    KBStat_CtrlEngaged    = 0x40,
    KBStat_ShiftEnable    = 0x80
};

/* ----------------------------- OS Word ---------------------------------------------- */

typedef enum
{
    osword_WritePalette                =    0x0C,
    osword_ReadCMOSClock            =    0x0E,
    osword_Mouse                    =    0x15
} osword_reason;

typedef enum
{
    osword_ReadCMOSClock_String        =    0,
    osword_ReadCMOSClock_BCD,
    osword_ReadCMOSClock_ConvertBCDtoString,
    osword_ReadCMOSClock_5Byte
} osword_ReadCMOSClock_reason;

enum    /* reason codes for osword_Mouse */
{
    Mouse_DefinePointer,        /* use sprite call in preference */
    Mouse_BoundingBox,          /* signed 16bit - left, bottom, right, top */
    Mouse_Multipliers,          /* signed 8bit  - X mult, Y mult */
    Mouse_SetPosition,          /* signed 16bit - X, Y - mouse position */
    Mouse_ReadUnbuffered,       /* signed 16bit - X, Y - mouse position */
    Mouse_SetPointerPos,        /* signed 16bit - X, Y - pointer position */
    Mouse_ReadPointerPos        /* signed 16bit - X, Y - pointer position */
};

/* -------------------------------- Other SWI reasons ---------------------------------- */

typedef enum
{
    OSDynamicArea_Heap            =    0,
    OSDynamicArea_RMA,
    OSDynamicArea_Screen,     
    OSDynamicArea_Sprites,
    OSDynamicArea_Application    =     14,
    OSDynamicArea_CAO
} OSDynamicArea_t;

/* Bits returned in r2 of OS_Mouse */

#define mouse_Left        0x04
#define mouse_Centre    0x02
#define mouse_Right        0x01

/* -------------------------------- VDU reasons ---------------------------------------- */

typedef enum     /* VDU 23 reasons codes */
{
    bbcm_SetInterlaceAndCursor = 0,
    bbcm_CursorState,
    bbcm_Pattern1,
    bbcm_Pattern2,
    bbcm_Pattern3,
    bbcm_Pattern4,
    bbcm_DashStyle,
    bbcm_TextScroll,
    bbcm_TextClear,
    bbcm_SetFirstFlash,
    bbcm_SetSecondFlash,
    bbcm_MasterPatterns,
    bbcm_SimplePattern1,
    bbcm_SimplePattern2,
    bbcm_SimplePattern3,
    bbcm_SimplePattern4,
    bbcm_CursorMovement,
    bbcm_Tint
} bbc_vdumultiple;

enum    /* VDU bbcm_CursorState */
{
    CursorDisappear = 0,
    CursorAppear,
    CursorSteady,
    CursorFlash
};

enum    /* VDU bbc_Tint */
{
    tint_TextFG    = 0,
    tint_TextBG,
    tint_GraphFG,
    tint_GraphBG
};

enum    /* VDU 18 gcol parameters */
{
    gcol_Set = 0,
    gcol_OR,
    gcol_AND,
    gcol_EOR,
    gcol_Invert,
    gcol_NoChange,
    gcol_ANDNOT,
    gcol_ORNOT,

    gcol_BGTransparent = 8,

    gcol_ColourPattern = 16,        /* * pattern number (1-4) */
    gcol_GiantPattern = 80
};

/* -------------------------------------------------------------------------------------- */

/* Extern declarations */

extern os_error *fx0(osbyte_reason code);
extern os_error *fx1(osbyte_reason code, int r1);
extern os_error *fx(osbyte_reason code, int r1, int r2);

extern int kbd_keydown(int internal_keynum);

#endif

/* eof h.OSreasons */

