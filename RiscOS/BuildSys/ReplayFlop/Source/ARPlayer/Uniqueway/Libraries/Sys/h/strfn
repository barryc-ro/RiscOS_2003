/* > strfn.h

 * © SJ Middleton, 1992

 */

#ifndef __strfn_h
# define __strfn_h

#ifndef __size_t
#define __size_t 1
typedef unsigned int size_t;   /* from <stddef.h> */
#endif

/*
 * As strstr but case insensitive.
 */

extern char *strstri(const char *s1, const char *s2);

/*
 * As strncmp but case insensitive.
 */

extern int strncmpi(const char *s1, const char *s2, size_t n);

/*
 * As strcmp but case insensitive.
 */

extern int strcmpi(const char *s1, const char *s2);

/*
 * These to pass each character in the string through tolower()
 * or toupper() as appropriate.
 * return NULL if given NULL.
 */

extern char *strlwr(char *s1);
extern char *strupr(char *s1);

/*
 * malloc's enough space for string and copies it in.
 * returns NULL if not enough space.
 */

extern char *strdup(const char *s);

/*
 * malloc's enough space for gstrans version string and translates it in.
 * returns NULL if not enough space.
 * returns copy of original string if there is an error.
 */

extern char *strdup_gstrans(const char *s);

/*
 * reallocs space at *ps and copies in txt
 */ 

extern char *strrplc(char **ps, const char *txt);


/*
 * mallocs enough space for the two strings concatenated.
 * returns this pointer having joined the two strings.
 */

extern char *stradd(const char *s1, const char *s2);

/*
 * Reallocs *s1 with enough space for s2 and then joins on
 * s2 to the end of *s1.
 * If no room then s1 is untouched.
 * returns new pointer (also written back) if successful.
 * returns null if not successful.
 */

extern char *strcatx(char **s1, const char *s2);

/*
 * Reallocates malloc string at *ps to have 'by' extra bytes in it.
 */

extern char *strextend(char **ps, int by);


/* BASIC style string functions.
 * malloc space and return parts of strings.
 * will behave sensibly when given NULL string ptrs.
 * indices from 0 always.
 */

extern char *strmid(const char *s1, size_t from, size_t len);
extern char *strleft(const char *s1, size_t len);
extern char *strright(const char *s1, size_t len);

/*
 * Just returns s or ""
 */

extern const char *strsafe(const char *s);

/*
 * Returns 1 if s == NULL || s[0] == '\0'
 */

extern int strempty(const char *s);

/*
 * list if strins terminated by a NULL.
 */

extern char *strcombine(char **base, ...);

#endif

/* eof strfn.h */
