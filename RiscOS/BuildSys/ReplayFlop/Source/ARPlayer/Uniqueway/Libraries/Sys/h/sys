/* > h.sys

 *
 * © SJ Middleton, 1991
 *

 */

#ifndef __sys_h
# define __sys_h

#ifndef __os_h
# include "os.h"
#endif

/*
 * Read bytes from any alignment and return as an integer.
 * If nbytes < 0 assumes LSB first. 
 * if nbytes > 0 assumes MSB first.
 */

extern int get_bytes(const void *a, int nbytes);

/*
 * Write bytes from an integer to any alignment.
 * If nbytes < 0 assumes LSB first. 
 * if nbytes > 0 assumes MSB first.
 */

extern void put_bytes(void *a, int val, int nbytes);

/*
 * Return val limited to be >= min and <= max.
 */

extern int circular_val(int val, int min, int max);

/*
 * Transfer upto 'maxlen' characters from 'in' to 'out'.
 * change any characters < 32 to spaces and strip off trailing spaces.
 * if 'in' == NULL then assume in == out
 */


extern void read_string_spaces(char *out, const char *in, int maxlen);

/*
 * Transfer up to 'maxlen' characters from 'in' to 'out' and pad from the last char 
 * to 'maxlen' with spaces.
 * if 'in' == NULL then assume in == out
 */

extern void write_string_spaces(char *out, const char *in, int maxlen);

/*
 * Enable/disable escape condition generation.
 */

extern void enable_escape(BOOL enable);
                              
/*
 * Use instead of _kernel_escape_seen(). Will not be cleared until enable_escape(FALSE) is called.
 */

extern BOOL seen_escape(void);

extern os_error *setenv(const char *varname, const char *val, int type);

#endif

/* eof h.sys */
