; > bbcasm.s

; SJ Middleton, 1992 from bbc.h by Acorn
; bits of bbc.c that I use regularly, recoded in assembeler for speed
; plus a few other useful functions.

                        GET     asm:ListOpts
                        GET     asm:Macros
                        GET     asm:System

                        GET     asm:Macros2
                        GET     asm:CRegs

                        GET     asm:Proc

; -------------------------------------------------------------------------------------- ;

bbc_ScreenMode      *   22
bbc_DefGraphColour  *   18
bbc_ClearGraph      *   16

bbc_SolidBoth       *   &00
bbc_SolidExFinal    *   &08
bbc_RectangleFill   *   &60

bbc_DrawRelFore     *   1
bbc_MoveCursorAbs   *   4
bbc_DrawAbsFore     *   5

; -------------------------------------------------------------------------------------- ;

bbc_get         Declare
                SWI     XOS_ReadC
                ORRCS   a1, a1, #&100
                EXITS

bbc_vduw        Declare
                SWI     XOS_WriteC
                MOVVC   a1, a1, LSR #8
                SWIVC   XOS_WriteC
                MOVVC   a1, #0
                EXITS

bbc_vdu         Declare
                SWI     XOS_WriteC
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = mode
; EXIT  os_error *

bbc_mode        Declare
                SWI     XOS_WriteI + bbc_ScreenMode
                SWIVC   XOS_WriteC
                MOVVC   a1, #0
                EXITS


; ENTRY a1 = mode.
;       a2 = varno.
; EXIT  value

bbc_modevar     Declare
                SWI     XOS_ReadModeVariable
                MOV     a1, a3
                EXITS

; ENTRY a1 = mode.
;       a2 = varno.
;       a3 -> output location
; EXIT  error or NULL

bbc_modevar_err Declare
                MOV     ip, a3
                SWI     XOS_ReadModeVariable
                STRVC   a3, [ip]
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = var
; EXIT  value                      

bbc_vduvar      Declare
                MOV     a2, #-1
                Push    "a1,a2"
                MOV     a1, sp
                SUB     sp, sp, #4
                MOV     a2, sp
                SWI     XOS_ReadVduVariables
                LDR     a1, [sp]
                ADD     sp, sp, #12
                EXITS

; ENTRY a1 = var list *
;       a2 = output list *
; EXIT  os_error *

bbc_vduvars     Declare
                SWI     XOS_ReadVduVariables
                MOVVC   r0, #0
                EXITS

; os_error *bbc_clg(void)

bbc_clg         Declare
                SWI     XOS_WriteI + bbc_ClearGraph
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = action
;       a2 = colour
; EXIT  os_error *                 

bbc_gcol        Declare
                MOV     a3, #bbc_DefGraphColour
                ORR     a3, a3, a1, LSL #8
                ORR     a3, a3, a2, LSL #16
                Push    "a3"
                MOV     a1, sp
                MOV     a2, #3
                SWI     XOS_WriteN
                ADD     sp, sp, #4
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = plot code
;       a2 = x
;       a3 = y
; EXIT  os_error *              

bbc_plot        Declare
                SWI     XOS_Plot
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = x
;       a2 = y
; EXIT  os_error *

bbc_move        Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #bbc_SolidBoth + bbc_MoveCursorAbs
                SWI     XOS_Plot
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = x
;       a2 = y
; EXIT  os_error *

bbc_moveby      Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #bbc_SolidBoth
                SWI     XOS_Plot
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = x
;       a2 = y
; EXIT  os_error *
                                  
bbc_draw        Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #bbc_SolidBoth + bbc_DrawAbsFore
                SWI     XOS_Plot
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = x
;       a2 = y
; EXIT  os_error *
                                
bbc_drawby      Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #bbc_SolidBoth + bbc_DrawRelFore
                SWI     XOS_Plot
                MOVVC   a1, #0
                EXITS

; ENTRY a1 = x
;       a2 = y
;       a3 = w
;       a4 = h
; EXIT  os_error *                

bbc_rectangle   Declare "v1,v2"
                MOV     v1, a3                  ; v1 = w
                MOV     v2, a4                  ; v2 = h
                BL      bbc_move
                CMP     a1, #0
                EXITS   NE

                MOV     a1, #bbc_SolidExFinal + bbc_DrawRelFore
                MOV     a2, #0
                MOV     a3, v2
                SWI     XOS_Plot
                EXITS   VS

                MOV     a1, #bbc_SolidExFinal + bbc_DrawRelFore
                MOV     a2, v1
                MOV     a3, #0
                SWI     XOS_Plot
                EXITS   VS

                MOV     a1, #bbc_SolidExFinal + bbc_DrawRelFore
                MOV     a2, #0
                RSB     a3, v2, #0
                SWI     XOS_Plot
                EXITS   VS

                MOV     a1, #bbc_SolidExFinal + bbc_DrawRelFore
                RSB     a2, v1, #0
                MOV     a3, #0
                SWI     XOS_Plot
                MOVVC   a1, #0

                EXITS

; ENTRY a1 = x
;       a2 = y
;       a3 = w
;       a4 = h
; EXIT  os_error *

bbc_rectanglefill       Declare "v1,v2"
                MOV     v1, a3                  ; v1 = w
                MOV     v2, a4                  ; v2 = h
                BL      bbc_move
                CMP     a1, #0
                EXITS   NE

                MOV     a1, #bbc_RectangleFill + bbc_DrawRelFore
                MOV     a2, v1
                MOV     a3, v2
                SWI     XOS_Plot

                MOVVC   a1, #0
                EXITS

; ENTRY a1 = timeout
; EXIT  a2 = ascii code or -1
                                
bbc_inkey       Declare
                AND     a3, a1, #&FF
                MOV     a2, a1, ASR #8
                AND     a2, a2, #&FF
                MOV     a1, #&81
                SWI     XOS_Byte
                CMP     a3, #&FF
                MOVEQ   a1, #-1
                MOVNE   a1, a2
                EXITS


; -------------------------------------------------------------------------------------- ;

; os_error *bbc_cursor(int c)

bbc_cursor      Declare
                MOV     a1, a1, LSL #16
                ORR     a1, a1, #1 :SHL: 8
                ORR     a1, a1, #23
                MOV     a2, #0
                MOV     a3, #0
                STMFD   sp!, {a1,a2,a3}
                MOV     a1, sp
                MOV     a2, #10
                SWI     XOS_WriteN
                ADD     sp, sp, #12
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; IN:   a1 = (char *)ptr
;       a2 = length
; OUT:  os_error *

printn          Declare
                SWI     XOS_WriteN
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; IN:   a1 = x
;       a2 = y
;       a3 = (char *)ptr
;       a4 = length
; OUT:  os_error *

printn_at       Declare
                MOV     ip, a3
                MOV     a3, a2    
                MOV     a2, a1
                MOV     a1, #4
                SWI     XOS_Plot
                EXITS   VS

                MOV     a1, ip
                MOV     a2, a4
                SWI     XOS_WriteN
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; IN:   a1 = (char *)ptr
; OUT:  os_error *

prints          Declare
                SWI     XOS_Write0
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; IN:   a1 = x
;       a2 = y
;       a3 = (char *)ptr
; OUT:  os_error *

prints_at       Declare
                MOV     ip, a3
                MOV     a3, a2    
                MOV     a2, a1
                MOV     a1, #4
                SWI     XOS_Plot
                EXITS   VS

                MOV     a1, ip
                SWI     XOS_Write0
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; os_error * sprite__op(os_regset *r)

sprite__op      Declare "v1-v6"
                MOV     ip, a1
                LDMIA   ip, {a1-a4,v1-v6}
                SWI     XOS_SpriteOp
                STMIA   ip, {a1-a4,v1-v6}
                MOVVC   a1, #0
                EXITS

; -------------------------------------------------------------------------------------- ;

; os_error * os_byte(int a, int *x, int *y)

os_byte         Declare
                MOV     a4, a2
                MOV     ip, a3
                LDR     a2, [a2]
                LDR     a3, [a3]
                SWI     XOS_Byte
                EXITS   VS
                TEQ     a4, #0
                STRNE   a2, [a4]
                TEQ     ip, #0
                STRNE   a3, [ip]
                MOV     a1, #0
                EXITS


; os_error * os_word(int wordcode, void *p)

os_word         Declare
                SWI     XOS_Word
                MOVVC   a1, #0
                EXITS


; os_error * os_gbpb(os_gbpbstr *p)

os_gbpb         Declare "v1-v6"
                MOV     ip, a1
                LDMIA   ip, {a1-a4,v1-v6}
                SWI     XOS_GBPB
                STMIA   ip, {a1-a4,v1-v6}
                MOVVC   a1, #0
                EXITS

; os_error * os_file(os_filestr *p)

os_file         Declare "v1-v6"
                MOV     ip, a1
                LDMIA   ip, {a1-a4,v1-v6}
                SWI     XOS_File
                STMIA   ip, {a1-a4,v1-v6}
                MOVVC   a1, #0
                EXITS

; os_error * os_args(os_regset *p)

os_args         Declare "v1-v6"
                MOV     ip, a1
                LDMIA   ip, {a1-a4,v1-v6}
                SWI     XOS_Args
                STMIA   ip, {a1-a4,v1-v6}
                MOVVC   a1, #0
                EXITS

; os_error *os_find(os_regset*);

os_find         Declare "v1-v6"
                MOV     ip, a1
                LDMIA   ip, {a1-a4,v1-v6}
                SWI     XOS_Find
                STMIA   ip, {a1-a4,v1-v6}
                MOVVC   a1, #0
                EXITS

; os_error * os_cli(char * command)

os_cli          Declare
                SWI     XOS_CLI
                MOVVC   a1, #0
                EXITS

; void os_read_var_val(char *name, char *buf /*out*/, int bufsize)

os_read_var_val Declare "v1"
                MOV     ip, a2
                MOV     a4, #0
                MOV     v1, #3
                SWI     XOS_ReadVarVal
                MOVVS   a3, #0
                MOV     a1, #0
                STR     a1, [ip, a3]
                EXITS


                END

eof bbcasm.s
