/* > filescan.c

 * © SJ Middleton, 1993

 * Two routines for batch processing of files.
 * - file_scandir() recursively scans a directory in filing system returned order
 * - batch_scandir() takes a text file with the pathnames to use in it.

 */

#include "swis.h"
#include "werr.h"

#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "filereason.h"
#include "filetypes.h"
#include "strfn.h"
#include "sys.h"

#define BUFFER_SIZE 1024

BOOL file_scandirfor(const char *root, const char *wildcard, BOOL recurse, file_scanfn scanfn, void *handle)
{
    BOOL    success = FALSE;
    int     *buffer = malloc(BUFFER_SIZE);
    char    *s_path = stradd(root, ".");

    if (buffer && s_path)
    {
        os_regset   r;

        r.r[0] = OSGBPB_ReadDirEntriesFiletype;
        r.r[1] = (int) root;
        r.r[2] = (int) buffer;
        r.r[4] = 0;
        r.r[5] = BUFFER_SIZE;
        r.r[6] = (int) wildcard;

        success = TRUE;
        do
        {
            r.r[3] = 1000;
            if (os_err(os_swix(OS_GBPB, &r)) != NULL)
                success = FALSE;
            else
            {
                int i, *p = buffer;
                for (i = 0; i < r.r[3] && success; i++)
                {
                    char *s = stradd(s_path, (char *)&p[6]);
                    if (scanfn(s, p[5], p[2], handle) == 0)
                        success = FALSE;
    
                    else if (recurse && (p[5] == filetype_Directory || p[5] == filetype_Application))
                        success = file_scandirfor(s, wildcard, recurse, scanfn, handle);
    
                    p += 6 + strlen((char *)&p[6])/4 + 1;
                    free(s);
                }
            }
        }
        while (r.r[4] != -1 && success);
    }
    else
        oom_err("", BUFFER_SIZE);

    free(buffer);
    free(s_path);

    return success;
}

BOOL file_scandir(const char *root, BOOL recurse, file_scanfn scanfn, void *handle)
{
    return file_scandirfor(root, NULL, recurse, scanfn, handle);
}

BOOL file_scanfor(const char *root, const char *wildcard, file_scanfn scanfn, void *handle)
{
    return file_scandirfor(root, wildcard, FALSE, scanfn, handle);
}

BOOL batch_scandir(const char *batchfile, file_scanfn scanfn, void *handle)
{
    BOOL        success = FALSE;
    filehandle  f;
    if (os_err(file_open(fopt_Read, batchfile, &f)) == NULL)
    {
        BOOL    stop = FALSE;
        char    *s = NULL;

        do
        {
            if (os_err(file_readline(f, &s)) != NULL)
                stop = TRUE;
            else if (s == NULL)
            {
                stop = TRUE;
                success = TRUE;
            }
            else switch (s[0])
            {
                case '\0':
                case '#':
                case ' ':
                    break;

                default:
                {
                    int filetype,
                        size = file_size(s, &filetype);
                    if (scanfn(s, filetype, size, handle) == 0)
                        stop = TRUE;
                    break;
                }
            }
        }
        while (!stop);

        free(s);
        file_close(f);
    }
    return success;
}

/* eof filescan.c */
