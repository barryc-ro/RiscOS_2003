/* > opt.h

 * © SJ Middleton, 1992

 * Generalised options file save library.
 * For saving a set of options from a program in a textual form in a generalised way.

 */

#ifndef __opt_h
# define __opt_h

#ifndef __os_h
# include "os.h"
#endif

#ifndef __stdio_h
# include <stdio.h>
#endif

#ifndef offsetof
#define offsetof(type, member) \
    ((size_t)((char *)&(((___type type *)0)->member) - (char *)0))
#endif

#ifndef sizeoff
#define sizeoff(type, member) sizeof(((___type type *)0)->member)
#endif

typedef struct optfile__str *optfile;          /* an option file handle */

typedef enum
{
    opt_EndOfList,                      /* marks end of list */
    opt_UByte,                          /* 1 byte  */
    opt_UShort,                         /* 2 bytes */
    opt_ULong,                          /* 4 bytes */
    opt_SByte,                          /* 1 byte  */
    opt_SShort,                         /* 2 bytes */
    opt_SLong,                          /* 4 bytes */
    opt_String,                         /* n_elements bytes */
    opt_Char,                           /* 1 byte  */
    opt_MallocString,                   /* 4 bytes */           /* pointer to mallcoed block, should always be zero or a valid pointer */
    opt_HexLong,                        /* 4 bytes */
    opt_FlagField,                      /* part of 4 bytes - byte 0 of n_elements is bitstart, byte 1 is bits wide */
    opt_Double,
    opt_Timecode
} opt_type;

/*
 * For Flag fields, either 
 * only one bit is set in which case 
 *      if the tag exists the bit is set 
 *      if the tag does not exist the bit is clear.
 * a field in which case the tag is followed by the numeric (decimal) value of the field
 */


typedef struct
{ 
    const char *tag;                    /* will start line, must not contain any spaces */
    const char *comment;                /* will be prefixed by # */
    const char *postfix;                /* added to end of line */
    opt_type    type;                   /* as above */
    int         n_elements;             /* number of elements to read or length of a string buffer */
    int         start_offset;           /* offset into options structure */
} opt_line_t;

/* ------------------------------- opt_extrafn_t -------------------------------------------------
 *
 * Use:         On writing options file, when the opt_lines are finished this function is 
 *              called so that the application can write out any other data it wishes.
 *              And similarly on reading
 * Parameters:  FILE *f -- the file to write out the data to (at the current position)
 *              void *options -- the options pointer originally passed in.
 * Return:      <0 if an error occurs, >= 0 otherwise.
 */

typedef int (*opt_extrafn_t)(FILE *f, void *options);

/* ------------------------------- opt_save -------------------------------------------------------
 *
 * Use:         Save an options block in a textual format.
 * Parameters:  const char *filename -- full path name to save to.
 *              const char *title -- title to write out on top line.
 *              const opt_line_t *opt_types -- the description of the options to be saved to the file.
 *              void *options -- pointer to the start of the data area from which to read the options.
 *              opt_extrafn_t fn -- function to be called after the listed options are saved.
 * Returns:     os_error * or NULL.
 */

extern int opt_save(const char *filename, const char *title, const opt_line_t *opt_types, void *options, opt_extrafn_t xtrafn);

/* ------------------------------- opt_load -------------------------------------------------------
 *
 * Use:         Load a textual options file saved by the opt_save function.
 *
 * Parameters:  const char *filename -- full path name to load from.
 *              const char *title -- title to compare top line with, if no match then file is not read
                                        but no error is given.
 *              const opt_line_t *opt_types -- the description of the options contained within the file.
 *              void *options -- pointer to the start of the data area into which to write the loaded options.
 *              opt_extrafn_t fn -- function to be called to read any special format data
 * Returns:     os_error * or NULL.
 */

extern int opt_load(const char *filename, const char *title, const opt_line_t *opt_types, void *options, opt_extrafn_t xtrafn);

/* Advanced options for saving multi-part and repeated option groups */

extern optfile opt_open(const char *filename, const char *options, const char *title);
extern void opt_close(optfile of);
extern int opt_write(optfile of, int type, const opt_line_t *opt_types, void *base);
extern int opt_read(optfile of, const opt_line_t *opt_types, void *base);
extern int opt_nextsection(optfile of);

#endif

/* eof opt.h */
