/* > fileract.c

 * © SJ Middleton, 1993

 */

#include "werr.h"
#include "wimpx.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "osreasons.h"
#include "strfn.h"

#include "fileract.h"

os_error *fileract_init(wimp_t *task)
{
    return wimp_starttask_rp("%Filer_Action", task);
}

os_error *fileract_senddir(wimp_t task, const char *dir)
{
    return os_swi2(XFilerAction_SendSelectedDirectory, task, (int)dir);
}

os_error *fileract_sendfile(wimp_t task, const char *file)
{
    return os_swi2(XFilerAction_SendSelectedFile, task, (int)file);
}

os_error *fileract_start(wimp_t task, fileract_reason reason, fileract_option options, void *data)
{
    os_regset   r;
    int         length = 0;
    switch (reason)
    {
        case fileract_Copy:
        case fileract_Move:
        case fileract_CopyDelete:
        case fileract_CopyLocal:
        case fileract_Find:
            length = strlen(data) + 1;
            break;

        case fileract_SetAccess:
        case fileract_SetType:
            length = 4;
            break;

        case fileract_Stamp:
        case fileract_Delete:
        case fileract_Count:
            break;
    }

    if (options == -1)
    {
        static char remap[] =
        {
            0,
            fileract_Force,
            fileract_Confirm,
            fileract_Force | fileract_Confirm,
            fileract_Verbose,
            fileract_Verbose | fileract_Force,
            fileract_Verbose | fileract_Confirm,
            fileract_Verbose | fileract_Confirm | fileract_Force,
            fileract_Newer,
            fileract_Newer | fileract_Force,
            fileract_Newer | fileract_Confirm,
            fileract_Newer | fileract_Force | fileract_Confirm,
            fileract_Newer | fileract_Verbose,
            fileract_Newer | fileract_Verbose | fileract_Force,
            fileract_Newer | fileract_Verbose | fileract_Confirm,
            fileract_Newer | fileract_Verbose | fileract_Confirm | fileract_Force
        };
        int r1 = 198, r2;
        os_byte(osbyte_ReadCMOS, &r1, &r2);
        options = remap[r2 >> 4];
    }

    r.r[0] = task;
    r.r[1] = reason;
    r.r[2] = options;
    r.r[3] = (int) data;
    r.r[4] = length;
    return os_swix(FilerAction_SendStartOperation, &r);
}

static char *file_getdir(const char *path, char **pdir)
{
    char *leaf = file_leaf(path, NULL);
    *pdir = strleft(path, strlen(path) - strlen(leaf) - 1);
    return leaf;
}

BOOL fileract_rename(const char *path_from, const char *path_to)
{
    BOOL    success;
    char    *dir_from, *dir_to,
            *leaf_from = file_getdir(path_from, &dir_from),
            *leaf_to = file_getdir(path_to, &dir_to);
    wimp_t  task;

/* if changing name then rename in the source directory */
    if (strcmpi(leaf_from, leaf_to) == 0)
        leaf_from = leaf_to;
    else
    {
        char *s = stradd(dir_from, ".");
        strcatx(&s, leaf_to);
        if (rename(path_from, s) == 0)
            leaf_from = leaf_to;
        free(s);
    }

/* start filer_action going */
    success = os_err(fileract_init(&task)) == NULL &&
                os_err(fileract_senddir(task, dir_from)) == NULL &&
                os_err(fileract_sendfile(task, leaf_from)) == NULL;

    if (leaf_from == leaf_to)
        success = os_err(fileract_start(task, fileract_Move, -1, dir_to)) == NULL;
    else
        success = os_err(fileract_start(task, fileract_CopyLocal, -1, (void *)path_to)) == NULL;

    free(dir_from);
    free(dir_to);

    return success;
}

wimp_t fileract_sourcefile(const char *path_from)
{
    BOOL    success;
    char    *dir_from,
            *leaf_from = file_getdir(path_from, &dir_from);
    wimp_t  task;

/* start filer_action going */
    success = os_err(fileract_init(&task)) == NULL &&
                os_err(fileract_senddir(task, dir_from)) == NULL &&
                os_err(fileract_sendfile(task, leaf_from)) == NULL;

    free(dir_from);

    return success ? task : 0;
}

BOOL fileract_copy(const char *path_from, const char *path_to)
{
    BOOL    success = FALSE;
    wimp_t  task;

    if ((task = fileract_sourcefile(path_from)) != 0)
        success = os_err(fileract_start(task, fileract_CopyLocal, -1, (void *)path_to)) == NULL;

    return success;
}

BOOL fileract_delete(const char *path, fileract_option options)
{
    BOOL    success = FALSE;
    wimp_t  task;

    if ((task = fileract_sourcefile(path)) != 0)
        success = os_err(fileract_start(task, fileract_Delete, options, NULL)) == NULL;

    return success;
}

BOOL fileract_Interactive(void)
{
    int r1 = 28, r2;
    os_byte(osbyte_ReadCMOS, &r1, &r2);
    return (r2 & (1<<2)) == 0;
}

/* eof fileract.c */
