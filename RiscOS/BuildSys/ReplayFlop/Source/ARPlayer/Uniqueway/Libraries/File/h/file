/* > file.h

 * © SJ Middleton, 1993

 * A large number of RISCOS file handling functions. Many are just veneers to
 * OS_GBPB, OS_Find et al. but some are a little more complex.

 */

#ifndef __file_h
# define __file_h

#ifndef __os_h
# include "os.h"
#endif

/* Some basic types needed */

#ifndef __size_t
#  define __size_t 1
typedef unsigned int size_t;   /* others (e.g. <stdio.h>) define */
   /* the unsigned integral type of the result of the sizeof operator. */
#endif

#ifndef __filehandle_t
typedef unsigned int filehandle;
#define __filehandle_t 1
#endif

/* Flags for opening files with */

typedef enum
{
    fopt_Read           = 0x4f,
    fopt_Write          = 0x8f,
    fopt_Update         = 0xcf,
    fopt_ReadNoError    = 0x47,
    fopt_UpdateNoError  = 0xc7
} file_opt;

/* ============================================================================== */

/* Protoypes from file.c and fileasm.s
 *
 * Common parameters
 * -- filehandle f
 *  A file previously opened by file_open(). A standard RISC OS (not C) filehandle.
 * -- void *data
 *  Address of data to be written to file, or a block of memory to read data into.
 * -- size_t nbytes
 *  Amount of data to be read or written.
 *
 * Almost all functions return standard error ptr or NULL for success.
 */


/* -------------------------------------------------------------------------------
 * Description: Read from given position/current position in file.
 * Parameters:  unsigned int fileptr -- offset into file in bytes to start from.
 * Notes:       No error is given if not enough bytes could be read.
 */

extern os_error *file_readfrom(filehandle f, void *data, size_t nbytes, unsigned int fileptr);
extern os_error *file_read(filehandle f, void *data, size_t nbytes);


/* -------------------------------------------------------------------------------
 * Description: Read from given current position in file and check how much was read.
 * Parameters:  size_t *nbytes -- gives number of bytes to be read.
 * Notes:       *nbytes is updated with the number of bytes that actually were read.
 */

extern os_error *file_readcheck(filehandle f, void *data, size_t *nbytes);


/* -------------------------------------------------------------------------------
 * Description: Read from given current position in file until next newline character.
 * Parameters:  char **lptr -- *lptr is realloced with a string giving the characters read
 * Notes:       The terminating newline character is read but not added to the string.
 */

extern os_error *file_readline(filehandle f, char **lptr);


/* -------------------------------------------------------------------------------
 * Description: Read from given current position in file until next newline character.
 * Parameters:  char *buffer -- buffer to read characters into.
 *              int bufsize -- size of buffer (won't be exceeded)/
 * Notes:       The terminating newline character is read but not added to the string.
 */

extern os_error *file_readlinebuffer(filehandle f, char *buffer, int bufsize);


/* -------------------------------------------------------------------------------
 * Description: Write data to given position/current position in file.
 * Parameters:  unsigned int fileptr -- offset into file in bytes to start from.
 * Notes:       file_writef takes a standard format string as fprintf();
 */

extern os_error *file_writeat(filehandle f, void *data, size_t nbytes, unsigned int fileptr);
extern os_error *file_write(filehandle f, void *data, size_t nbytes);
#pragma -v1
extern os_error *file_writef(filehandle f, const char *fmt, ...);
#pragma -v0


/* -------------------------------------------------------------------------------
 * Description: Close a file
 * Notes:       Checkclose will only close the file if *phandle != 0, and it will set
 *              *phandle to 0 afterwards.
 */

extern os_error *file_close(filehandle handle);
extern os_error *file_checkclose(filehandle *phandle);


/* -------------------------------------------------------------------------------
 * Description: Open a file
 * Parameters:  file_opt opts -- see top of file for details.
 *              filehandle *handle -- address of variable to write handle into.
 */

extern os_error *file_open(file_opt opts, const char *filename, filehandle *handle);


/* -------------------------------------------------------------------------------
 * Description: Read or write a single byte.
 * Notes:       *byte_read == -1 if at the end of the file.
 */

extern os_error *file_bget(filehandle f, int *byte_read);
extern os_error *file_bput(filehandle f, int byte);


/* -------------------------------------------------------------------------------
 * Description: Set or read the file position pointer
 */

extern os_error *file_setpos(filehandle f, int pos);
extern os_error *file_getpos(filehandle f, int *pos);


/* -------------------------------------------------------------------------------
 * Description: Convert the filehandle to a pathname
 * Parameters:  char **filename -- address of variable to store ptr in.
 * Notes:       *filename = malloc(space for filename).
 */

extern os_error *file_handletoname(filehandle f, char **filename);


/* -------------------------------------------------------------------------------
 * Description: Set or read the file extent.
 */

extern os_error *file_setextent(filehandle f, int extent);
extern os_error *file_getextent(filehandle f, int *extent);


/* -------------------------------------------------------------------------------
 * Description: Return whether file ptr is at end of file or not.
 */

extern int file_eof(filehandle f);


/* -------------------------------------------------------------------------------
 * Description: Save a block of memory to a file
 */

extern os_error *file_save(const char *filename, void *addr, int nbytes, int filetype);


/* -------------------------------------------------------------------------------
 * Description: Load a file into a block of memory.
 * Notes:       Remember to allocate space for it first.
 */

extern os_error *file_load(const char *filename, void *addr);


/* -------------------------------------------------------------------------------
 * Description: Create an empty file on disc.
 */

extern os_error *file_create(const char *filename, int extent, int filetype);


/* ============================================================================== */

/* Prototypes from file2.c */

/* -------------------------------------------------------------------------------
 * Description: Given a filetype return the type name
 * Returns:     ptr to a static buffer containing the contents of File$Type_XXX or &XXX
 * Notes:       Remember to copy string out to preserve.
 */

extern char *file_typename(int filetype);


/* -------------------------------------------------------------------------------
 * Description: Given a filesize return a string
 * Returns:     ptr to a static buffer containing the size as XXXM XXXK or XXXbytes
 * Notes:       Remember to copy string out to preserve.
 */

extern const char *filesize_string(int val);


/* -------------------------------------------------------------------------------
 * Description: Given a lad address return the filetype
 * Returns:     the filetype or filetype_LoadExec (0x3000) if untyped.
 */

extern int filetype(unsigned load);


/* -------------------------------------------------------------------------------
 * Description: Read the size and filetype of a file
 * Parameters:  int *filetype -- address to write filetype or NULL to ignore.
 * Returns:     the size of the file or -1 if doesn't exist.
 * Notes:       directory/application returns positive size and appropriate filetype.
 */

extern int file_size(const char *filename, int *filetype);


/* -------------------------------------------------------------------------------
 * Description: Set the filetype of a file
 */

extern os_error *file_settype(const char *filename, int filetype);
      

/* -------------------------------------------------------------------------------
 * Description: Find the leaf name of a given file
 * Parameters:  const char *path -- any path name.
 *              char *leaf -- if not null then writes out the leaf name to this buffer
 * Returns:     pointer to the start of the leaf within the original path string.
 * Notes:       If no '.' or ':' found in the string then returns start of string.
 */

extern char *file_leaf(const char *path, char *leaf);


/* -------------------------------------------------------------------------------
 * Description: Create a directory
 * Notes:       can use straight string of fprintf style format string.
 */

extern os_error *cdir(const char *dirname);
#pragma -s1
extern os_error *cdirf(const char *dirname, ...);
#pragma -s0


/* -------------------------------------------------------------------------------
 * Description: Move srcfile to dstfile
 * Notes:       Tries a rename, if that fails then does a copy delete
 */

extern os_error *file_move(const char *srcfile, const char *dstfile);

/* -------------------------------------------------------------------------------
 * Description: Copy srcfile to dstfile
 * Notes:       Has recursive and force bits set.
 */


extern os_error *file_copy(const char *srcfile, const char *dstfile);

/* -------------------------------------------------------------------------------
 * Description: wipe given file/dir
 */

extern os_error *file_wipe(const char *filename, BOOL force, BOOL recurse);

/* ============================================================================== */
/*
 * Description: Set disc name (upto 10 chars) for disc containing given object
 */

extern os_error *file_namedisc(const char *disc_obj, const char *discname);


/* ============================================================================== */
/*
 * Description: Read free space and disc size for disc containing given object.
 * Notes:       RISCOS 2 code disabled but can be set up to work for freespace on
 *              ADFS, SCSIFS, RAMFS.
 */

extern os_error *file_readfreespace(const char *disc_obj, int *freespace, int *discsize);


/* ============================================================================== */

/* From filecanon.c */

/* -------------------------------------------------------------------------------
 * Description: Canonicalise file path
 * Parameters:  const char *filename -- original filename
 *              const char *def_path -- extra path to look down for file or NULL
 *              *path_out -- address to write out malloced canonicalised path.
 */

extern os_error *file_canonicalise(const char *filename, const char *def_path, char **path_out);


/* ============================================================================== */

/* From filescan.c */

/* -------------------------------------------------------------------------------
 * Description: Functon to call with each disc object found
 * Parameters:  const char *filename -- filename of this object
 *              int filetype -- filetype of this object
 *              int size -- size of this opject
 *              void *handle -- context handle passed into scandir
 * Returns:     Returns 1 if OK, or 0 to stop scanning (and scandir will return failure).
 */

typedef int (*file_scanfn)(const char *filename, int filetype, int size, void *handle);

/* -------------------------------------------------------------------------------
 * Description: Scan a directory processing each file in turn.

 * Parameters:  const char *root -- the root directory within which to scan.
 *              const char *wildcard -- wildcard to pass to the OS_GBPB call.
 *              BOOL recurse -- do we automatically enter each new directory as it is found.
 *              file_scanfn scacfn -- function to call for each file found.
 *              void *handle -- context handle to use with each function call.
 * Returns:     success or failure as returned from scanfn or failure if any errors found.
 * Notes:       A few different versions with different default settings.
 */

extern BOOL file_scandirfor(const char *root, const char *wildcard, BOOL recurse, file_scanfn scanfn, void *handle);
extern BOOL file_scandir(const char *root, BOOL recurse, file_scanfn scanfn, void *handle);
extern BOOL file_scanfor(const char *root, const char *wildcard, file_scanfn scanfn, void *handle);

/* -------------------------------------------------------------------------------
 * Description: Scan a file giving a list fof filenames processing each file in turn.

 * Parameters:  const char *batchfile -- the file containing the filenames.
 *              file_scanfn scacfn -- function to call for each file found.
 *              void *handle -- context handle to use with each function call.
 * Returns:     success or failure as returned from scanfn or failure if any errors found.
 * Notes:       File should just have <filename>\n<filename>\n until the end of the file.
 */

extern BOOL batch_scandir(const char *batchfile, file_scanfn scanfn, void *handle);

#endif

/* eof file.h */
