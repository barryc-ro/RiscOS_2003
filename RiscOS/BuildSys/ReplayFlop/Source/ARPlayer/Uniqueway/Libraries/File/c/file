/* > file.h

 * © SJ Middleton, 1992

 */

#include "os.h"
#include "swis.h"

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include "filereason.h" 

#include "file.h"

os_error *file_writef(filehandle f, const char *fmt, ...)
{
    char    buffer[256];
    va_list ap;
    int     nwritten;

    va_start(ap, fmt);
    nwritten = vsprintf(buffer, fmt, ap);
    va_end(ap);

    return file_write(f, buffer, nwritten); 
}

os_error *file_handletoname(filehandle f, char **filename)
{
    os_regset r;
    os_error *e;
    r.r[0] = OSArgs_ReadPath;
    r.r[1] = f;
    r.r[2] = 0;
    r.r[5] = 0;
    if ((e = os_swix(OS_Args, &r)) == NULL)
    {
        char *name = malloc(1 - r.r[5]);
        if (name)
        {
            r.r[1] = f;
            r.r[2] = (int) name;
            r.r[5] = 1 - r.r[5];
            if ((e = os_swix(OS_Args, &r)) == NULL)
                *filename = name;
            else
                free(name);
        }
    }
    return e;
}

os_error *file_readlinebuffer(filehandle f, char *buffer, int bufsize)
{
    os_error *e;
    int i = 0, byte;
    do
    {
        e = file_bget(f, &byte);
        buffer[i++] = byte;
    }
    while (e == NULL && byte != '\n' && byte != -1 && i < bufsize);
    buffer[--i] = '\0';
    return e;
}

/*
 * Read bytes from current position until a new line character is reached.
 * The newline is read from the file but then overwritten by a null.
 * space is allocated with malloc and written out to *lptr.
 * if *lptr != NULL then the space is realloced.
 */

os_error *file_readline(filehandle f, char **lptr)
{
    os_error    *e;
    int         byte, start, end;

    if ((e = file_getpos(f, &start)) != NULL)
        return e;

    do
        e = file_bget(f, &byte);
    while (e == NULL && byte != '\n' && byte != -1);

    if (e == NULL && lptr)
    {
        if ((e = file_getpos(f, &end)) == NULL)
        {
            char *p = realloc(*lptr, end - start);
            if (p)
            {
                e = file_readfrom(f, p, end - start, start);
                p[end - start - 1] = '\0';
            }
            *lptr = p;
        }
    }
    return e;
}


/* eof file.h */
