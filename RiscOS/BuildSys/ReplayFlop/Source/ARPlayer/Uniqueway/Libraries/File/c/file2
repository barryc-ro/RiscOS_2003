/* > c.file2

 *
 * © SJ Middleton, 1991
 *

 */

#include "os.h"
#include "swis.h"

#include <ctype.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "filereason.h"

#define filetype_LoadExec   0x3000

const char *filesize_string(int val)
{
    static char buffer[12];
    if (val > 9999*1024)
        sprintf(buffer, "%dM", val/(1024*1024));
    else if (val > 9999)
        sprintf(buffer,"%dk", val/1024);
    else
        sprintf(buffer, "%d bytes", val);
    return buffer;
}

char *file_typename(int filetype)
{
    static char varname[16];
    char        *name;
    sprintf(varname, "File$Type_%03x", filetype);
    if ((name = getenv(varname)) != NULL)
        strcpy(varname, name);
    else
        sprintf(varname, "&%03x", filetype);
    return varname;
}

int filetype(unsigned load)
{
    if ((load & 0xfff00000) == 0xfff00000)
        return (load & 0x000fff00) >> 8;
    else
        return filetype_LoadExec;
}

int file_size(const char *filename, int *ftype)
{
    int              type = -1, size = -1;
    os_filestr       file;

    if (filename == NULL)
        return -1;

    file.action = OSFile_ReadWithTypeNoPath;
    file.name = (char *) filename;
    if (os_file(&file) == NULL)
    {
        file_infostr *info = (file_infostr *)&file;
        if (info->type != objecttype_Nothing)
        {
            type = info->filetype;
            size = info->length;
        }
    }
#ifdef RISCOS200
    else
    {
        file.action = OSFile_ReadInfo;
        if (os_file(&file) == NULL)
        {
            file_infostr *info = (file_infostr *)&file;
            switch (info->type)
            {
                case objecttype_File + objecttype_Directory:
                case objecttype_File:
                    type = filetype(info->load_addr);
                    size = info->length;
                    break;

                case objecttype_Directory:
                    type = filename[0] == '!' ? filetype_Application : filetype_Directory;
                    size = info->length;
                    break;

                case objecttype_Nothing:
                    break;
            } 

        }
    }
#endif
    if (ftype != 0)
        *ftype = type;

    return size;
}


os_error *file_settype(const char *filename, int filetype)
{
    return os_swi3(os_X|OS_File, OSFile_SetType, (int) filename, filetype);
}

os_error *file_copy(const char *srcfile, const char *dstfile)
{
    return os_swi4(os_X|OS_FSControl, FSControl_Copy, (int) srcfile, (int) dstfile, CWMask_Recursive|CWMask_Force);
}

#define err_BadRename       176
#define err_AlreadyExists   196
#define err_NotSameDisc     159

os_error *file_move(const char *src, const char *dst)
{
    os_error *e;
    e = os_swi3(os_X|OS_FSControl, FSControl_Rename, (int) src, (int) dst);
    if (e) switch (e->errnum & 0xff)
    {
        case err_AlreadyExists:
            if ((e = os_swi2(os_X|OS_File, OSFile_Delete, (int) dst)) == NULL)
                e = os_swi3(os_X|OS_FSControl, FSControl_Rename, (int) src, (int) dst);
            break;

        case err_BadRename:
        case err_NotSameDisc:
            e = os_swi4(os_X|OS_FSControl, FSControl_Copy, (int) src, (int) dst, CWMask_DeleteAfter | CWMask_Force);
            break;
    }
    return e;
}

/*
 * This function should find the leafname of any path.
 * It will return a pointer to the start of the leaf in the original buffer.
 * If leaf != NULL it will write out the leafname to the given buffer.
 */

char *file_leaf(const char *path, char *leaf)
{
    const char *last_sep = strrchr(path, '.'), 
               *leafptr = path;

    if (last_sep)
        leafptr = last_sep + 1;
    else
    {
        last_sep = strrchr(path, ':');
        if (last_sep)
            leafptr = last_sep + 1;
        else
            leafptr = path;
    }

    if (leaf)
        strcpy(leaf, leafptr);

    return (char *)leafptr;
}

os_error *cdir(const char *dirname)
{
    return os_swi6(os_X|OS_File, OSFile_CreateDir, (int)dirname, 0, 0, 0, 0);
}

os_error *cdirf(const char *dirname, ...)
{
    char    buffer[256];
    va_list ap;

    va_start(ap, dirname);
    vsprintf(buffer, dirname, ap);
    va_end(ap);

    return cdir(buffer);
}

os_error *file_wipe(const char *filename, BOOL force, BOOL recurse)
{
    return _swix(OS_FSControl, _IN(0)|_IN(1)|_IN(3),
            FSControl_Wipe, filename,
            (force ? CWMask_Force : 0) | (recurse ? CWMask_Recursive : 0));
}

/* eof c.file2 */

