/* > iconmenu.c

 * © SJ Middleton, 1993

 */

#include "event.h"
#include "help.h"
#include "msgs.h"
#include "wimpx.h"
#include "wimpt.h"
#include "werr.h"

#include <stdio.h>
#include <string.h>

#include "macros.h"

#include "iconmenu.h"

static int menu_up = -1;
static char help_string[12];        /* tag for help handler */

static char *textof(const icon_menu_str *ip)
{
    if (ip->text == NULL)
    {
        char text[32];
        sprintf(text, "M%s", ip->tag);
        return msgs_lookup(text);
    }
    return ip->text;
}

/*
 * entry is from 0, buffer must be large enough
 */

void iconmenu_extractstring(char *buffer, const char *s, int entry)
{
    if (entry >= 0)
    {
        int i, c;
    
        for (i = 0; i < entry; i++)
            if ((s = strpbrk(s, "|,")) != NULL)
                s++;
    
        for (c = *s++; c != '|' && c != ',' && c != '\0'; c = *s++)
            *buffer++ = c;
    }
    *buffer = '\0';
}

/*
 * entry is from 0, buffer must be large enough
 */

void iconmenu_extractentry(char *buffer, const icon_menu_str *ip, int entry)
{
    iconmenu_extractstring(buffer, textof(ip), entry);
}


/*
 * decode the menu hit, put the text of the entry into the buffer (if non-null)
 * and return the menu number

 * Correct for Wimp_DecodeMenus strange habit of adding a <cr> to the end of the string. 
 */

int iconmenu_extracthit(icon_menu_str *icon_menus, char *buffer, char *hit)
{
    if (menu_up != -1 && hit[0] != 0)
    {
        icon_menu_str   *ip = &icon_menus[menu_up];
        ip->selection = hit[0] - 1;
        if (buffer)
        {
            wimp_eventstr *e = wimpt_last_event();
            if (e->e == wimp_EMENU)
            {
                if (os_err(wimp_decode_menu(menu_syshandle(ip->m), e->data.menu, buffer)) == NULL)
                {
                    char *cr = strchr(buffer, 13);
                    if (cr)
                        *cr = '\0';
                }
            }
            else
                buffer[0] = '\0';
        }
    }
    return menu_up;
}

menu iconmenu_make(icon_menu_str *icon_menus)
{
    int             i = -1;
    icon_menu_str   *ip = NULL;
    if (event_is_menu_being_recreated())
    {
        if (menu_up != -1)
        {
            i = menu_up;
            ip = &icon_menus[i];
        }
    }
    else
    {
        wimp_eventstr   *e = wimpt_last_event();
        wimp_i          icon = e->e == wimp_EBUT ? e->data.but.m.i : -1;

        for (i = 0, ip = icon_menus; ip->tag != NULL; i++, ip++)
            if (icon == ip->menu_field || icon == ip->display_field)
                break;
    }

    if (ip && ip->tag)
    {
        int     entry;
        for (entry = 0; entry < ip->nentries; entry++)
            menu_setflags(ip->m, entry+1, ip->selection == entry, ip->mask & (1<<entry));

        sprintf(help_string, "H%s", ip->tag);
        help_register_handler(help_simplehandler, help_string);

        menu_up = i;

        return ip->m;
    }
    menu_up = -1;
    return 0;
}

BOOL iconmenu_setup(icon_menu_str *icon_menus)
{
    icon_menu_str *ip = icon_menus;
    for (; ip->tag != NULL; ip++)
    {
        char *s, title[12];
        sprintf(title, "T%s", ip->tag);

        ip->nentries = 1;
        ip->selection = -1;
        s = textof(ip);
        while (s != NULL)
        {
            s = strpbrk(s, ",|");
            if (s)
            {
                s++;
                ip->nentries++;
            }
        }

        if ((ip->m = menu_new(msgs_lookup(title), textof(ip))) == NULL)
            return FALSE;
    }

    return TRUE;
}

void iconmenu_dispose(icon_menu_str *icon_menus)
{
    icon_menu_str *ip = icon_menus;
    for (; ip->tag != NULL; ip++)
    {
        menu_dispose(&ip->m, FALSE);
        ip->m = NULL;
    }
}

/* eof iconmenu.c */
