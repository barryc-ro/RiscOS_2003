/* > wimpx.h

 * Purpose: C interface to RISC OS Wimp routines.

 * Prototypes from wimp.c

 */

#ifndef __wimpx_h
# define __wimpx_h

#ifndef __wimp_h
# include "wimp.h"
#endif

# ifndef __os_h
# include "os.h"
# endif

os_error *wimp_initialise(int * v);
/* Close & delete all windows, return wimp version number. */

os_error *wimp_taskinit(char *name, int *version /*inout*/, wimp_t *t /*out*/);
/* Name is the name of the program. */
/* Used instead of wimp_initialise. Returns your task handle. */
/* Version should be at least 200 on entry, and will return the
   current wimp version number. */

os_error *wimp_create_wind(wimp_wind *, wimp_w *);
/* define (but not display) window, return window handle */

os_error *wimp_create_icon(wimp_icreate *, wimp_i *result);
/* add icon definition to that of window, return icon handle */

os_error *wimp_delete_wind(wimp_w);

os_error *wimp_delete_icon(wimp_w, wimp_i);

os_error *wimp_open_wind(wimp_openstr *);
/* make window appear on screen */

os_error *wimp_close_wind(wimp_w);
/* Remove from active list the window with handle in integer argument. */

os_error *wimp_poll(wimp_emask mask, wimp_eventstr *result);
/* Poll next event from the WIMP */

void wimp_save_fp_state_on_poll(void) ;
/* Activates saving of floating point state on calls to wimp_poll
 * and wimp_pollidle; this is needed if you do any floating point at
 * all, as other programs may corrupt the FP status word, which is
 * effectively a global in your program
 */

void wimp_corrupt_fp_state_on_poll(void) ;
/* Disables saving of floating point state on calls to wimp_poll
 * and wimp_pollidle; use only if you never use FP at all
 */

os_error *wimp_redraw_wind(wimp_redrawstr*, BOOL* /*out*/);
/* Draw window outline and icons. Return FALSE if there's nothing to draw. */

os_error *wimp_update_wind(wimp_redrawstr*, BOOL* /*out*/);
/* Return visible portion of window. Return FALSE if nothing to redraw. */

os_error *wimp_get_rectangle(wimp_redrawstr*, BOOL*);
/* return next rectangle in list, or FALSE if done. */

os_error *wimp_get_wind_state(wimp_w, wimp_wstate * result);
/* read current window state */

os_error *wimp_get_wind_info(wimp_winfo * result);
/* On entry result->w gives the window in question. Space for any
icons must follow *result. */

os_error *wimp_get_wind_infonoicons(wimp_winfo * result);
/* On entry result->w gives the window in question. */

os_error *wimp_set_icon_state(wimp_w, wimp_i,
  wimp_iconflags value, wimp_iconflags mask);
/* Set icon's flags as (old_state & ~mask) ^ value */

os_error *wimp_get_icon_info(wimp_w, wimp_i, wimp_icon * result);
/* Get current state of icon */

os_error *wimp_get_point_info(wimp_mousestr * result);
/* Give info regarding the state of the mouse */

os_error *wimp_drag_box(wimp_dragstr *);
/* start the wimp dragging a box */

os_error *wimp_force_redraw(wimp_redrawstr * r);
/* Mark an area of the screen as invalid.
If r->wimp_w == -1 then use screen coordinates. Only the first
five fields of r are valid. */

os_error *wimp_set_caret_pos(wimp_caretstr *);
/* set pos./size of text caret */

os_error *wimp_get_caret_pos(wimp_caretstr *);
/* get pos./size of text caret */

os_error *wimp_create_menu(wimp_menustr *m, int x, int y);
/* 'pop up' menu structure. Set m==(wimp_menustr*)-1 to clear the
menu tree. */

os_error *wimp_decode_menu(wimp_menustr *, void *, void *);

os_error *wimp_which_icon(wimp_which_block *, wimp_i * results);
/* The results appear in an array, terminated by a (wimp_i) -1. */

os_error *wimp_set_extent(wimp_redrawstr *);
/* Alter extent of a window's work area - only handle and 1st set of
4 coordinates are looked at. */

os_error *wimp_set_point_shape(wimp_pshapestr *);
/* set pointer shape on screen */

os_error *wimp_open_template(char * name);
/* opens named file to allow load_template to
read a template from the file. */

os_error *wimp_close_template(void);
/* close currently open template file */

os_error *wimp_load_template(wimp_template *);
/* load a window template from open file into buffer */

os_error *wimp_processkey(int chcode);
/* Hand back to the wimp a key that you do not understand. */

os_error *wimp_closedown(void);

os_error *wimp_taskclose(wimp_t);
/* Calls closedown in the multi-tasking form. */

os_error *wimp_starttask(char *clicmd);
/* Start a new wimp task, with the given CLI command. */

os_error *wimp_getwindowoutline(wimp_redrawstr *r);
/* set r->w on entry. On exit, r->box will be the screen coordinates
of the window, including border, title, scroll bars. */

os_error *wimp_pollidle(wimp_emask mask, wimp_eventstr *result, int earliest);
/* Like wimp_poll, but do not return before earliest return time.
This is a value produced by OS_ReadMonotonicTime. */

os_error *wimp_ploticon(wimp_icon*);
/* Called only within update or redraw loop. Just does the plotting,
this need not be a real icon attached to a window. */

os_error *wimp_setmode(int mode);
/* Set the screen mode. Palette colours are maintained, if possible. */

os_error *wimp_readpalette(wimp_palettestr*);

os_error *wimp_setpalette(wimp_palettestr*);
/* The bytes.gcol values of each field of the palettestr are ignored,
only the absolute colours are taken into account. */

os_error *wimp_setcolour(int colour);
/* bits 0..3 = wimp colour (translate for current mode)
        4..6 = gcol action
        7    = foreground/background.
*/

os_error *wimp_spriteop(int reason_code, char *name) ;
/* call SWI Wimp_SpriteOp */
os_error *wimp_spriteop_full(os_regset *) ;
/* call SWI Wimp_SpriteOp allowing full information to be passed */

void *wimp_baseofsprites(void);
/* Returns a sprite_area*. This may be moved about by mergespritefile. */

os_error *wimp_blockcopy(wimp_w, wimp_box *source, int x, int y);
/* Copy the source box (defined in window coords) to the given destination
(in window coords). Invalidate any portions of the destination that cannot be
updated using on-screen copy. */

os_error *wimp_reporterror(os_error*, wimp_errflags, char *name);
/* Produces an error window. Uses sprite called "error" in the wimp sprite
pool. name should be the program name, appearing after "error in " at the
head of the dialogue box. */

os_error *wimp_sendmessage(wimp_etype code, wimp_msgstr* msg, wimp_t dest);
/* dest can also be 0, in which case the message is sent to every task in
turn, including the sender. msg can also be any other wimp_eventdata* value.
*/

os_error *wimp_sendwmessage(
  wimp_etype code, wimp_msgstr *msg, wimp_w w, wimp_i i);
/* Send a message to the owner of a specific window/icon. msg can also be
any other wimp_eventdata* value. */

os_error *wimp_create_submenu(wimp_menustr *sub, int x, int y);
/* sub can also be a wimp_w, in which case it is opened by the wimp
as a dialogue box. */

os_error *wimp_slotsize(int *currentslot /*inout*/,
                        int *nextslot /*inout*/,
                        int *freepool /*out*/);
/* currentslot/nextslot==-1 -> just read setting. */

os_error *wimp_transferblock(
  wimp_t sourcetask,
  char *sourcebuf,
  wimp_t desttask,
  char *destbuf,
  int buflen);
/* Transfer memory between domains. */

os_error *wimp_setfontcolours(int foreground, int background);
/* Set font manager colours. The wimp handles how many shades etc. to use. */

#if 0
os_error *wimp_readpixtrans(sprite_area *area, sprite_id *id,
                         sprite_factors *factors, sprite_pixtrans *pixtrans);
/* Tells you how the WIMP will plot a sprite when asked to PutSpriteScaled */
#endif

os_error *wimp_commandwindow(wimp_commandwind commandwindow);

/* Open a text window for normal VDU 4-type output
   Note:  the tag types correspond to the 4 kinds of call to
   SWI wimp_CommandWindow shown in the Programmer's Ref Manual.
   Title is only required if tag == wimp_command_TITLE.
   It is the application's responsibility to set the tag correctly.
 */

os_error *wimp_addmessages(wimp_msgaction *list);
os_error *wimp_removemessages(wimp_msgaction *list);
os_error *wimp_starttask_rp(const char *clicmd, wimp_t *newtask);

#endif

/* eof wimpx.h */
