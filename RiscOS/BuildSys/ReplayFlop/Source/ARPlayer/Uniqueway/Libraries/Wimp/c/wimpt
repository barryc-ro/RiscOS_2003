/* Title  > c.wimpt
 * Purpose: provides low-level Wimp functionality
 * Version: 0.1

 * Change Log:
 *      SJM:    add wimpt_wimpmsgs() to say what msgs should be received. Also a list of default messages
 *              and changed wimpt_init() to use this pointer and set the current wimp version.
 *              function wimpt_whichversion() to find which version we are running on.
 *              function  that gives line and file of error and doesn't exit.
 *              Redid signal handler to avoid calling library functions.
 *              removed calls to event_getmask() that were unnecessary.
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h> 
#include <string.h>
#include <signal.h>

#include "os.h"
#include "bbc.h"
#include "wimpx.h"
#include "werr.h"
#include "alarm.h"
#include "msgs.h"
#include "win.h"
#include "swis.h"
#include "wmisc.h"

#include "wimpt.h"

#define WIN_ERROR   msgs_lookup("Ewimpt0:Error initialising window table (0)")
#define FATAL_ERROR msgs_lookup("Ewimpt1:%s has suffered a fatal internal error (type=%i) and must exit immediately")

static int wimpt__fake_waiting = 0;
static wimp_eventstr wimpt__fake_event;
static wimp_eventstr wimpt__last_event;

os_error * wimpt_poll(wimp_emask mask, wimp_eventstr * result)
{
  if (wimpt__fake_waiting != 0) {
    *result = wimpt__fake_event;
    wimpt__fake_waiting = 0;
    wimpt__last_event = wimpt__fake_event;
    return(0);
  } else {
    os_error *r;
    int next_alarm_time;
    if (alarm_next(&next_alarm_time) != 0 && ((mask & wimp_EMNULL))!=0)
    {
      r = wimp_pollidle(mask & ~wimp_EMNULL, result, next_alarm_time);
    }
    else
    {
      r = wimp_poll(mask, result);
    }
    wimpt__last_event = *result;
    return(r);
  }
}

void wimpt_fake_event(wimp_eventstr * e)
{
  if (wimpt__fake_waiting == 0) {
    wimpt__fake_waiting = 1;
    wimpt__fake_event = *e;
  } else {
  }
}

wimp_eventstr *wimpt_last_event(void)
{
  return &wimpt__last_event;
}

int wimpt_last_event_was_a_key(void)
{
  return(wimpt__last_event.e == wimp_EKEY);
}


void wimpt_forceredraw()
{
  wimp_redrawstr r;
  r.w = (wimp_w) -1;
  r.box.x0 = 0;
  r.box.y0 = 0;
  r.box.x1 = (1 + bbc_vduvar(bbc_XWindLimit)) *
             (1 << bbc_vduvar(bbc_XEigFactor));
  r.box.y1 = (1 + bbc_vduvar(bbc_YWindLimit)) *
             (1 << bbc_vduvar(bbc_YEigFactor));
  (void) wimp_force_redraw(&r);
}

static wimp_t wimpt__task = 0;

static void wimpt__exit(void)
{
  os_err(wimp_taskclose(wimpt__task));
}

static char *programname = "";

char *wimpt_programname(void)
  {return programname;}
void wimpt_reporterror(os_error *e, wimp_errflags f)
  {wimp_reporterror(e,f,programname);}

os_error *wimpt_complain(os_error *e)
{
    return os__err(e);
}

typedef void SignalHandler(int);
static SignalHandler *oldhandler;

static void escape_handler(int sig)
{
  sig = sig; /* avoid compiler warning */
  (void) signal(SIGINT, &escape_handler);
}

static os_error sig_errmsg;
static char     *sig_numspot;
static BOOL     wimpt__dopostmortem = FALSE;

static void handler(int signal)
{
    *sig_numspot = signal + '0';
    wimp_reporterror(&sig_errmsg, 0, programname);
    if (wimpt__dopostmortem) switch (signal)
    {
        case SIGFPE:
        case SIGILL:
        case SIGSEGV:
            return;
    }
    exit(EXIT_FAILURE);
}

static int wimpversion = 0;
static wimp_msgaction def_wimpmsglist[] = 
{
    wimp_MDATASAVE,
    wimp_MDATASAVEOK,
    wimp_MDATALOAD,
    wimp_MDATALOADOK,
    wimp_MMENUWARN,
    wimp_MMODECHANGE,
    wimp_MHELPREQUEST,
    wimp_MDATAOPEN,
    wimp_SAVEDESK,
    wimp_MMenuClosed,
    0
};

static wimp_msgaction *wimpmsglist = def_wimpmsglist;

void wimpt_postmortem(BOOL doit)
{
    wimpt__dopostmortem = doit;
}

void wimpt_wimpversion(int version)
{
  wimpversion = version;
}

void wimpt_wimpmsgs(wimp_msgaction msg_list[])
{
  wimpmsglist = msg_list;
}

int wimpt_init(char *progname)
{
    werr__registerprogramname(progname);
    
    sig_errmsg.errnum = 0;
    sprintf(sig_errmsg.errmess, FATAL_ERROR, progname, 9);
    sig_numspot = strchr(sig_errmsg.errmess, '9');
    
    oldhandler = signal(SIGABRT, &handler);
    oldhandler = signal(SIGFPE, &handler);
    oldhandler = signal(SIGILL, &handler);
    oldhandler = signal(SIGINT, &escape_handler);
    oldhandler = signal(SIGSEGV, &handler);
    oldhandler = signal(SIGTERM, &handler);
    
    programname = progname;
    if (wimpversion == 0) wimpversion = 200;
    
    {             
        static char task[] = "TASK";
        os_regset r;           
        r.r[0] = wimpversion;
        r.r[1] = *(int *)task;
        r.r[2] = (int) programname;
        r.r[3] = (int) wimpmsglist;
        if (os_err(os_swix(Wimp_Initialise, &r))) exit(0);
        wimpversion = r.r[0];
        wimpt__task = r.r[1];
    }
/*
    if (os_err(wimp_taskinit(programname, &wimpversion, &wimpt__task)) != 0) exit(0);
*/
    wimpt_checkmode();
    atexit(wimpt__exit);
    if (!win_init()) werr(TRUE, WIN_ERROR);
    return wimpversion;
}

wimp_t wimpt_task(void)
{
    return wimpt__task;
}

void wimpt_noerr(os_error *e)
{
    no__err(e);
}

int wimpt_currentversion(void)
{
    return wimpversion;
}

/* end */
