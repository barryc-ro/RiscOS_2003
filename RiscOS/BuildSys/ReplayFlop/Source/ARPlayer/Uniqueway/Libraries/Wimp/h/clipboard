/* > clipboard.h

 * © SJ Middleton, 1993

 */

#ifndef __clipboard_h
# define __clipboard_h

#ifndef __memalloc_h
# include "memalloc.h"
#endif

#ifndef __xfersend_h
# include "xfersend.h"
#endif

#define Message_ClaimEntity         15
#define Message_DataRequest         16
#define Message_Dragging            17
#define Message_DragClaim           18

/*
 * Message block for ClaimEntity has only flags word
 */

#define claimentity_CaretSelection      0x03
#define claimentity_Clipboard           0x04

/*
 * Message block for DataRequest
 */

typedef struct
{
    wimp_w      w;      /* window in which save occurs. */
    wimp_i      i;      /* icon or internal handle */
    int         x;      /* position within that window of destination of save. */
    int         y;
    int         flags;
    int         filetype[1];
/* followed by list of filetypes, -1 terminated */
} wimp_msgdatarequest;

#define datarequest_Clipboard       0x04

/*
 * Message block for Dragging
 */

typedef struct
{
    wimp_w      w;      /* window in which save occurs. */
    wimp_i      i;      /* icon or internal handle */
    int         x;      /* position within that window of destination of save. */
    int         y;
    int         flags;
    wimp_box    box;    /* bounding box of data in 1/72000", if x0 > x1 then ignore */
    int         filetype[1];
/* followed by list of filetypes, -1 terminated */
} wimp_msgdragging;

#define dragging_SendingSelection   0x02
#define dragging_SendingClipboard   0x04
#define dragging_DeleteSource       0x08
#define dragging_DoNotClaim         0x10

/*
 * Message block for DragClaim
 * flags word
 * list of filetypes
 * -1
 */

#define dragclaim_PointerShapeChanged   0x01
#define dragclaim_RemoveDragBox         0x02
#define dragclaim_DeleteSource          0x08


/* -------------------------------------------------------------------------------
 * Description: Create a clipboard with the given data.
 * Parameters:  const void *data -- if non-NULL then data is copied into clipboard.
 * Returns:     ptr to clipboard area if created successfully else NULL.
 * Notes:       Sends ClaimEntity.
 */

extern void *clipboard_Create(int filetype, const void *data, int size);


/* -------------------------------------------------------------------------------
 * Description: Get rid of clipboard contents
 * Notes:       If we have clipnoard then fress memory and unsets flag
 */

extern void clipboard_Destroy(void);

/* -------------------------------------------------------------------------------
 * Description: Return clipboard ptr and size.
 * Parameters:  int *psize -- if not NULL then write out clipboard size.
 * Returns:     ptr to clipboard data.
 */

extern void *clipboard_Data(int *psize);

/* -------------------------------------------------------------------------------
 * Description: Is clipboard held by this application
 * Returns:     Well, is it ?
 */

extern BOOL clipboard_Local(void);

/* -------------------------------------------------------------------------------
 * Description: find if the clipboard contains one of a filetype list.
 * Parameters:  const int *filetype_list -- list of filetypes or NULL.
 * Returns:     available filetype that best matches or -1.
 */

extern int clipboard_Contains(const int *filetype_list);


/* -------------------------------------------------------------------------------
 * Description: Send a DataRequest message
 * Parameters:  const int *filetype_list -- list of filetypes or NULL.
 *              const wimp_msgdatasave *datasave -- w,i,x,y fields only for where to send it
 * Returns:     TRUE if clipboard is local.
 * Notes:       If there is a reply it will be sent directly to the window datasave->w.
 */

extern BOOL clipboard_Paste(const int *filetype_list, const wimp_msgdatasave *datasave);


/* -------------------------------------------------------------------------------
 * Description: Initialise clipboard
 * Notes:       Adds event processor and enables appropriate messages.
 */

extern void clipboard_Init(void);


/* -------------------------------------------------------------------------------
 * Description: Register memory functions for clipboard to use.
 * Notes:       See memalloc.h for details. Defaults to c_alloc.
 */

extern void clipboard_RegisterMemFns(mem_allocfn alloc_fn, mem_freefn free_fn);

typedef struct
{
    int                 filetype,
                        estsize;
    xfersend_saveproc   save;
    xfersend_sendproc   send;
} clipboard_itemstr;

typedef void (*clipboard_destroyfn)(void *data);

extern void *clipboard_CreateList(const clipboard_itemstr *list, clipboard_destroyfn destroyfn, const void *data, int size, void *handle);

#endif

/* eof clipboard.h */
