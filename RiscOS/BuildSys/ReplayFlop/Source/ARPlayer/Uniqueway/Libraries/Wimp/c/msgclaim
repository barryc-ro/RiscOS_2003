/* > msgclaim.c

 * © SJ Middleton, 1993

 */

#include "win.h"

#include <stdlib.h>

#include "msgclaim.h"

typedef struct msgclaim__str
{
    wimp_msgaction  action;
    wimp_t          task;
    msgclaim_fn     fn;
    void            *handle;
};

static BOOL dispatcher(wimp_eventstr *e, void *handle)
{
    msgclaim c = handle;
    switch (e->e)
    {
        case wimp_ESEND:
        case wimp_ESENDWANTACK:
        {
            wimp_msgstr *mp = &e->data.msg;
            if ((c->action == msgclaim_ANY || mp->hdr.action == c->action) &&
                (c->task == msgclaim_ANY || c->task == mp->hdr.task))
            {
                if (c->fn(c, e, c->handle))
                    return TRUE;
            }
            break;
        }
    }
    return FALSE;
}

void msgclaim_remove(msgclaim *pc)
{
    msgclaim c = *pc;
    if (c)
    {
        win_remove_unknown_event_processor(dispatcher, c);
        free(c);
        *pc = NULL;
    }
}

msgclaim msgclaim_add(wimp_msgaction action, wimp_t t, msgclaim_fn fn, void *handle)
{
    msgclaim c = calloc(sizeof(struct msgclaim__str), 1);
    if (c)
    {
        c->action = action;
        c->task = t;
        c->fn = fn;
        c->handle = handle;
        win_add_unknown_event_processor(dispatcher, c);
    }
    return c;
}

/* eof msgclaim.c */
