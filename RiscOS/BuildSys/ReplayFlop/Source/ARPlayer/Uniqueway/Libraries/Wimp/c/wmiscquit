/* > wmiscquit.c

 * © SJ MIddleton, 1992

 */

#include "akbd.h"
#include "wimpx.h"
#include "werr.h"
#include "win.h"

#include "macros.h"

#include <stdio.h>
#include <stdlib.h>

#include "wmisc.h"

/*
 * When a PREQUIT is received then
 *  if we have restarted a closedown sequence 
 *   clear the flag in case it gets aborted.
 *  else
 *   if there is no do_we_halt function or it returns TRUE then acknowledge the PREQUIT message.
 *    if there is no do_we_resume function or it returns TRUE then restart closedown.
 *  
 */

static win_unknown_event_processor do_we_halt, do_we_resume;
static void *quit_context;

static BOOL prequit_events(wimp_eventstr *e, void *handle)
{
    if ((e->e == wimp_ESEND || e->e == wimp_ESENDWANTACK) && 
        e->data.msg.hdr.action == wimp_MPREQUIT)
    {
        static BOOL restarted_quit = FALSE;
        wimp_msgstr *mp = &e->data.msg;

        if (restarted_quit)
            restarted_quit = FALSE;

        else if (!do_we_halt || do_we_halt(e, quit_context))
        {
            BOOL    quit_only_self = mp->hdr.size > sizeof(wimp_msghdr) && (mp->data.words[0] & 1) != 0;
            wimp_t  prequittask = mp->hdr.task;

            mp->hdr.your_ref = mp->hdr.my_ref;
            mp->hdr.size = sizeof(wimp_msghdr);
            no_err(wimp_sendmessage(wimp_EACK, mp, prequittask));

            if (!do_we_resume || do_we_resume(e, quit_context))
            {
                wmisc_flushevents();
                if (!quit_only_self)
                {
                    restarted_quit = TRUE;
                    no_err(wimp_get_caret_pos(&e->data.key.c));
                    e->data.key.chcode = akbd_Sh + akbd_Ctl + akbd_Fn12;
                    no_err(wimp_sendmessage(wimp_EKEY, (wimp_msgstr *)&e->data.key, prequittask));
                }
                else
                    exit(EXIT_SUCCESS);
            }

        }
        return TRUE;
    }
    return FALSE;
    UNUSED(handle);
}

static wimp_msgaction msg_list[] =
{
   wimp_MPREQUIT,
   0
};

void wmisc_installquithandler(win_unknown_event_processor halt_fn, 
                        win_unknown_event_processor resume_fn, 
                        void *handle)
{
    do_we_halt = halt_fn;
    do_we_resume = resume_fn;
    quit_context = handle;
    win_add_unknown_event_processor(prequit_events, NULL);
    no_err(wimp_addmessages(msg_list));
}

/* eof wmiscquit.c */
