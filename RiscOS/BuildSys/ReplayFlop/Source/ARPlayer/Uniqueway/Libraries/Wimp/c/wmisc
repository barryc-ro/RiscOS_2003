/* > c.wmisc

 *
 * © SJ Middleton, 1990
 *

 */

#include "dbox.h"
#include "help.h"
#include "msgs.h"
#include "res.h"
#include "screenmode.h"
#include "werr.h"
#include "wimpx.h"
#include "wimpt.h"
#include "win.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "macros.h"
#include "wmisc.h"

#define PROG_INFO_IDENT         "progInfo"

#define VERSION_FIELD           4
#define LICENCE_FIELD           11

void wmisc_popup_info_licence(int version_number, const char *date, const char *licence)
{
    dbox  d;

    if ((d = dbox_new(PROG_INFO_IDENT)) != NULL)
    {
        char b[64], month[12], day[12], year[12];
        sscanf(date, "%11s %11s %11s", month, day, year);
        sprintf(b, "%d.%02d (%02d-%s-%s)", version_number / 100, version_number % 100, atoi(day), month, year+2);
        dbox_setfield(d, VERSION_FIELD, b);
        if (licence)
            dbox_setfield(d, LICENCE_FIELD, (char *)licence);

        dbox_show(d);

        dbox_fillin(d);

        dbox_dispose(&d);
    }
}

void wmisc_popup_info(int version_number, const char *date)
{
    wmisc_popup_info_licence(version_number, date, NULL);
}

wimp_openstr window_state(wimp_w w)
{
    wimp_wstate state;
    if (w == -1)
        memset(&state, 0, sizeof(state));
    else
        no_err(wimp_get_wind_state(w, &state));
    return state.o;
}

void force_redraw_window(wimp_w w)
{
    wimp_redrawstr r;
    r.w = w;
    r.box.y0 = r.box.x0 = -0x4000;
    r.box.y1 = r.box.x1 = 0x4000;
    no_err(wimp_force_redraw(&r));
}

void put_window(wimp_w w, wimp_w behind)
{
    if (w != -1)
    {
        wimp_openstr o = window_state(w);
        o.behind = behind;
        no_err(wimp_open_wind(&o));
    }
}

void bring_to_front(wimp_w w)
{
    put_window(w, -1);
}

void wmisc_drag_window(wimp_mousestr *mp)
{
    if (mp->bbits & (wimp_BDRAGLEFT | wimp_BDRAGRIGHT))
    {
        wimp_dragstr drag;
        drag.window = mp->w;
        drag.type = wimp_MOVE_WIND;
        drag.box = window_state(mp->w).box;
        no_err(wimp_drag_box(&drag));
    }
}

static BOOL wmisc_events(wimp_eventstr *e, void *handle)
{
    switch (e->e)
    {
        case wimp_ESEND:
        case wimp_ESENDWANTACK:
            switch (e->data.msg.hdr.action)
            {                                                   
                case wimp_MHELPREQUEST:
                    return help_process(e);

                case wimp_MMODECHANGE:
                    (void) screen_CurrentInfo();
                    break;

                case wimp_SAVEDESK:             
                {
                    char buf[256];
                    res_findname(NULL, buf);
                    if (os_err(file_writef(e->data.msg.data.savedesk.filehandle, "/%s\n", buf)) != NULL)
                    {
                        e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
                        no_err(wimp_sendmessage(wimp_EACK, &e->data.msg, e->data.msg.hdr.task));
                    }
                    return TRUE;
                }
            }
            break;
    }
    return FALSE;
    UNUSED(handle);
}

BOOL wmisc_iconize(wimp_eventstr *e, const char *sprite, const char *title)
{
    if ((e->e == wimp_ESEND || e->e == wimp_ESENDWANTACK) && e->data.msg.hdr.action == wimp_MWindowInfo)
    {
        wimp_msgwindowinfo *mp = (wimp_msgwindowinfo *)e->data.msg.data.chars;
        mp->reserved = 0;
        strcpy(mp->spritename, sprite);
        strncpy(mp->title, title, 19);
        mp->title[19] = '\0';
        e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
        e->data.msg.hdr.size = sizeof(wimp_msghdr) + sizeof(wimp_msgwindowinfo);
        wimp_sendmessage(wimp_ESEND, &e->data.msg, e->data.msg.hdr.task);
        return TRUE;
    }               
    return FALSE;
}


void wmisc_init(void)
{
    win_add_unknown_event_processor(wmisc_events, 0);
}

BOOL wmisc_helprequest(wimp_i icon_handle)
{
    wimp_eventstr *e = wimpt_last_event();
    return (e->e == wimp_ESEND || e->e == wimp_ESENDWANTACK) &&
              e->data.msg.hdr.action == wimp_MHELPREQUEST &&
              e->data.msg.data.helprequest.m.i == icon_handle;
}

int wmisc_ReadPaletteCol(int wimp_col)
{
    wimp_palettestr pal;
    no_err(wimp_readpalette(&pal));
    return wimp_col < 20 ? pal.c[wimp_col].word &~ 0xff : -1;
}

/* eof c.wmisc */

