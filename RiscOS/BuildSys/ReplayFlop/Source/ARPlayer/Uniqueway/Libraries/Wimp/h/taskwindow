/* taskwindow.h

 *

 */

#ifndef __taskwindow_h
# define __taskwindow_h

#ifndef __wimp_h
# include "wimp.h"
#endif

#ifndef TaskWindow_TaskInfo
#define TaskWindow_TaskInfo 0x43380
#endif

enum
{
    TaskWindow_Input    = 0x808c0,
    TaskWindow_Output,
    TaskWindow_Ego,
    TaskWindow_Morio,
    TaskWindow_Morite,
    TaskWindow_NewTask,
    TaskWindow_Suspend,
    TaskWindow_Resume
};

typedef struct taskwindow__str *taskwindow;
typedef void (*taskwindow_eventfn)(taskwindow t, const char *data, int nbytes, void *handle);

#define TaskWindow_SafeCLLen    (180)   /* leaving room for the flags and stuff */

typedef enum
{
    taskwindow_Ctrl     = 0x01,     /* allow control characters through */
    taskwindow_Display  = 0x02,     /* open display immediately */
    taskwindow_Quit     = 0x04      /* quit when finished */
} taskwindow_flag;

#pragma -v1
extern taskwindow taskwindow_new(taskwindow_flag flags, int wimpslot, const char *name, const char *fmt, ...);
#pragma -v0

extern taskwindow taskwindow_dispose(taskwindow *pt);
extern char *taskwindow_cmdline(taskwindow t);

extern void taskwindow_eventhandler(taskwindow t, taskwindow_eventfn fn, void *handle);
extern void taskwindow_sendinput(taskwindow t, const char *data);

extern void taskwindow_suspend(taskwindow t);
extern void taskwindow_resume(taskwindow t);
extern void taskwindow_kill(taskwindow t);

extern wimp_t taskwindow_syshandle(taskwindow t);

extern void taskwindow_sendinput_ramxfer(taskwindow t, const char *input);

#endif

/* eof taskwindow.h */
