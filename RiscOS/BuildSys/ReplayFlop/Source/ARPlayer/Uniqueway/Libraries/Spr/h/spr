/* > spr.h

 * © SJ Middleton, 1993

 * New interface to OS_SpriteOp with the following features

 * - No support for user sprite areas
 * - two sets of routines for most functions
 *      spr_xxx_named(area, name, ...)
 *      spr_xxx(ptr, ...)
 * - routines that require the sprite area take a
 *      new sprite area ptr that contains mem_alloc functions and
 *      will do their own memory manipulation.
 * - routines that do not require the sprite area do not take
 *      it as a paramater
 * - transparent support for new sprite formats in 3.X and 3.1
 * - transparent calls to ColourTrans where necessary
 * - support for squashed sprite files
 * - lack of memory or null ptrs returned as os_error blocks

 * There are many common features to the calls which will be documented here
 * rather than at every call.

 * Parameters:
 *
 *  -- spr_area anchor
 * is what spr_area_Init returns. It is a malloced data pointer containing the
 * anchor for the actual sprite area.
 *
 * -- const char *filename
 * Is always a sprite file, except for with Load/Merge Squash, where it can be
 * a Sprite or Squash file (fi;letype irrelevant).
 *
 * -- sprite_ptr sptr
 * is a pointer to a sprite. ieit is the same as a sprite_header *.
 *
 * -- const char *name
 * Name of a sprite, lower case and <= 12 characters, null-terminated.

 * Returns:
 * -- os_error *
 * most functions return a ptr to standard error block. This will either be an error
 * returned by RISC OS or due to there being not enough memory to extend a sprite area
 * or a null pointer being pased as an anchor.

 * In general most operations will work on new and old sprite types on 3.1 and 3.X.
 * The call will first try a straight call to the OS and if that fails with a Bad MODE
 * error or similar then the operation will be completed by hand. Any calls that won't
 * work on both platforms for old and new sprites willbe mentioned.

 * screen_Vars must be up to date for some of these calls to work. do make sure you call
 * (void)screen_CurrentInfo() after mode chanes and before doing anything important.

 */

#ifndef __spr_h
# define __spr_h

#ifndef __memalloc_h
# include "memalloc.h"
#endif 

#ifndef __os_h
# include "os.h"
#endif

#ifndef filetype_Sprite
# define filetype_Sprite    0xFF9
#endif

typedef enum
{
    sprite_nopalette  = 0,
    sprite_haspalette = 1
} sprite_palflag;

typedef struct
{
    int xmag, ymag,
        xdiv, ydiv;
} sprite_factors;

typedef struct /* Format of a sprite area control block */
{
    int size;
    int number;
    int sproff;
    int freeoff;
} sprite_area;

typedef struct /* Format of a sprite header */
{
    int  next;      /*  Offset to next sprite                */
    char name[12];  /*  Sprite name                          */
    int  width;     /*  Width in words-1      (0..639)       */
    int  height;    /*  Height in scanlines-1 (0..255/511)   */
    int  lbit;      /*  First bit used (left end of row)     */
    int  rbit;      /*  Last bit used (right end of row)     */
    int  image;     /*  Offset to sprite image               */
    int  mask;      /*  Offset to transparency mask          */
    int  mode;      /*  Mode sprite was defined in           */
                    /*  Palette data optionally follows here */
                    /*  in memory                            */
} sprite_header;

typedef void *sprite_ptr;

typedef struct
{
    int width;
    int height;
    int mask;
    int mode;
} sprite_info;

typedef struct
{
    int r[4];
} sprite_state;

typedef char sprite_pixtrans;

typedef struct spr__area *spr_area;

typedef struct
{
    int x, y;
} spr_coord;

typedef struct
{
    spr_coord corner[2];
} spr_box;

typedef struct
{
    spr_coord corner[4];
} spr_destination;

typedef struct
{
    int         transformation[4];
    spr_coord   translation;
} spr_matrix;

typedef enum
{
    spr_TransformMatrix,
    spr_TransformDestination
} spr_transmattype;

typedef struct
{
    spr_transmattype    tag;
    union
    {
        spr_matrix      matrix;
        spr_destination destination;
    }   data;
} spr_transmat;


/* New format sprite header */

enum
{
    sprite_OldFormat,
    sprite_1bpp,
    sprite_2bpp,
    sprite_4bpp,
    sprite_8bpp,
    sprite_16bpp,
    sprite_32bpp,
    sprite_32bppCMYK,       /* not supported in RISCOS 3.X */
    sprite_24bpp            /* not supported in RISCOS 3.X */
};

#define sprite_Xppi 0x00000002
#define sprite_Yppi 0x00004000
#define sprite_BPP  0x08000000

#define sprite_typeword(bpp,x,y)    ((bpp)*sprite_BPP + (x)*sprite_Xppi + (y)*sprite_Yppi + 1)

#define OS_UNITS_PER_INCH   180

#define COLTRANS_GUARDWORD  0x33324b2E      /* 32K. */

/*
 * Some functions (only where specifically mentioned) support this as a spr_area
 * For functions that don't then use spr_Ptr() first.
 */

#define wimp_spriteanchor   ((spr_area)1)

/* ====================================================================================== */

/* Perform operation on a whole sprite area */

/* Squash routines in spr_squash.c
 * Icons routines in spr_icons.c
 */

/* -------------------------------------------------------------------------------
 * Description: Create a new sprite area.
 * Parameters:  mem_allocfn alloc --    See memalloc.h for details of these functions.
 *              mem_freefn free --      They will be used to create, extend and eventually
                                        destroy the area.
 *              const char *area_name -- useful for reference when debugging. Ptr to name
 *                                      is stored so should be a literal or static.
 * Returns:     malloced handle for sprite area.
 * Notes:       area must be disposed of when finished with.
 */

extern spr_area spr_area_Init(mem_allocfn alloc, mem_freefn free, const char *area_name);


/* -------------------------------------------------------------------------------
 * Description: Reinitialise a sprite area
 * Notes:       Delete all sprites within and shrink the area or leave it at its
 *              previous extent, depending on which call is used.
 */

extern os_error *spr_area_Reinit(spr_area anchor);
extern os_error *spr_area_Reinit_noshrink(spr_area anchor);


/* -------------------------------------------------------------------------------
 * Description: Dispose of a sprite area
 * Notes:       frees the memory allocated and zeroes the pointer passed in.
 */

extern void spr_area_Dispose(spr_area *panchor);

/* -------------------------------------------------------------------------------
 * Description: Save a sprite file
 * Notes:       Optionally saving as a squash file
 */

extern os_error *spr_area_Save(spr_area anchor, const char *filename);
extern os_error *spr_area_SaveSquash(spr_area anchor, const char *filename);

/* -------------------------------------------------------------------------------
 * Description: Load a sprite file into an area, overwriting what was there before
 * Notes:       LoadSquash reverts to Load id the file is not squashed.
 *              LoadIcons will add a mode suffix ("22","23" etc.) onto the filename
 *              and try and load that. If it fails it will just load from the basic
 *              filename
 */

extern os_error *spr_area_Load(spr_area anchor, const char *filename);
extern os_error *spr_area_LoadSquash(spr_area anchor, const char *filename);
extern os_error *spr_area_LoadIcons(spr_area anchor, const char *filename);

/* -------------------------------------------------------------------------------
 * Description: Load a sprite file into an area, merging the sprites with the original contents
 * Notes:       Effects of MergeSquash and MergeIcons as for LoadXXXX (see above)
 */

extern os_error *spr_area_Merge(spr_area anchor, const char *filename);
extern os_error *spr_area_MergeSquash(spr_area anchor, const char *filename);
extern os_error *spr_area_MergeIcons(spr_area anchor, const char *filename);

/* -------------------------------------------------------------------------------
 * Description: Given a sprite area anchor, return a ptr to the actual area.
 * Returns:     The returned pointer can be used in OS_SpriteOp calls.
 * Notes:       Remember sprite area could move if it s using f_alloc, f_free.
 */

extern sprite_area *spr_area_Ptr(spr_area anchor);

/* -------------------------------------------------------------------------------
 * Description: Given a sprite are anchor, return address of ptr to the actual area.
 * Notes:       Be very careful what you do with this ptr !
 */

extern sprite_area **spr_area_Anchor(spr_area anchor);

/* ====================================================================================== */


/* enumerate sprites */

/* -------------------------------------------------------------------------------
 * Description: Return the name of the n'th sprite in the area.
 * Parameters:  char *buffer -- must be at least 13 characters long, name
 *                              will be written out here
 *              int n -- index of sprite, counting from 1
 */

extern os_error *spr_ReturnName(spr_area anchor, char *buffer, int n);

/* -------------------------------------------------------------------------------
 * Description: Return ptr to first sprite in area
 * Returns:     ptr to sprite or NULL if anchor was NULL or area had no sprites in it.
 */

extern sprite_ptr spr_area_FirstSprite(spr_area anchor);


/* ====================================================================================== */

/* Functions to help with importing sprites by RAM transfer */

/* -------------------------------------------------------------------------------
 * Description: Buffer function to pass to xferrecv_doimport().
 * Parameters:  as detailed in xferrecv.h
 * Returns:     TRUE if new memory was successfully allocated
 * Notes:       extends sprite area space and writes out ptr to free space and
 *              amout available to *buffer and *size.
 */

extern BOOL spr_area_ImportProcessor(char **buffer, int *size, void *handle);


/* -------------------------------------------------------------------------------
 * Description: Initialise a sprite area ready for use with xferrecv_doimport 
 * Parameters:  char **buf -- ptr to variable to store start of available buffer
 *              int estsize -- size as returned from xferrecv_checkimport().
 * Notes:       After getting a DATASAVE, initialise a sprite area and call this
 *              function. It will set the sprite area size to estsize+4
 *              (destroying anything in it) and write out the address of the
 *              second word in *buf. This should be passed to xferrecv_doimport().
 *              pass to the anchor as the handle in doimport().
 */

extern os_error *spr_area_ImportInit(spr_area anchor, char **buf, int estsize);

/* ====================================================================================== */

/* Create, copy, delete and rename sprite */

/* -------------------------------------------------------------------------------
 * Description: Create a sprite and return pointer to it
 * Parameters:  int width, height -- size in pixels
 *              int mode -- old style mode number or new style sprite type
 *              sprite_ptr *sptr -- if not NULL then a ptr to the created sprite will be written here
 * Returns:
 * Notes:       If creating a > 8 bit sprite then palflag is forced to 'nopalette'
 */

extern os_error *spr_CreateSprite(spr_area anchor, const char *name, sprite_palflag palflag, int width, int height, int mode, sprite_ptr *sptr /* out */);

/* -------------------------------------------------------------------------------
 * Description: Grab a sprite off the screen
 * Parameters:  spr_box *box -- the coordinates to be grabbed (inclusive).
 * Returns:
 * Notes:       If creating a > 8 bit sprite then palflag is forced to 'nopalette'
 */

extern os_error *spr_GetSprite(spr_area anchor, const char *name, sprite_palflag palflag, const spr_box *box);

/* -------------------------------------------------------------------------------
 * Description: Make a copy of a sprite with a new name in the same area
 */

extern os_error *spr_CopySprite(spr_area anchor, const char *name, const char *newname);

/* -------------------------------------------------------------------------------
 * Description: Delete a given sprite, referenced by name or pointer
 * Notes:       Shrinks area afterwards.
 */

extern os_error *spr_DeleteSprite(spr_area anchor, sprite_ptr sptr);
extern os_error *spr_DeleteSprite_named(spr_area anchor, const char *name);

/* -------------------------------------------------------------------------------
 * Description: Rename a sprite, referenced by name or pointer
 */

extern os_error *spr_Rename(spr_area anchor, sprite_ptr sptr, const char *newname);
extern os_error *spr_Rename_named(spr_area anchor, const char *oldname, const char *newname);


/* -------------------------------------------------------------------------------
 * Description: Make a copy of a sprite in another area, referenced by name
 * Notes:       Overwrites same named copy in area2, new area must have been initialised.
 *              supports wimp_spriteanchor
 */

extern os_error *spr_CopySpriteToArea(spr_area anchor_from, const char *name, spr_area anchor_to);

/* -------------------------------------------------------------------------------
 * Description: Read a sprite from a given filename, open file or memory area.
 * Parameters:  unsigned int file -- open file handle
 *              const char *filename -- file holding sprite
 *              int offset -- file offset within file
 *              int length -- size of sprite to load
 * Notes:       This should be JUST the sprite. NOT the sprite area header.
 *              Number of sprites in area is recalculated afterwards.
 */

extern os_error *spr_ReadSprite(spr_area anchor, unsigned int file, int offset, int length);
extern os_error *spr_ReadSpriteFromFile(spr_area anchor, const char *filename, int offset, int length);
extern os_error *spr_ReadSpriteFromMem(spr_area anchor, void *data, int length);

/* -------------------------------------------------------------------------------
 * Description: Save one sprite from an area
 * Notes:       Writes out sprite area and then the sprite.
 */

extern os_error *spr_SaveSprite(sprite_ptr sptr, const char *filename);
extern os_error *spr_SaveSprite_named(spr_area anchor, const char *sprname, const char *filename);

/* ====================================================================================== */
/*
 * Description: Generate translation tables using Colourtrans_GenerateTable
 *
 * Parameters:  int def_palette -- only used if sprite has no palette, in which case
 *                              if 1 use default palette for sprite's mode,
 *                              if 0 use current screen palette.
 *              int dest_mode -- mode number or sprite type, -1 for current.
 *              void *dest_palette -- wimp_paletteword[] or -1 for current.
 *              void **pbuffer -- anchor for translation table.
 *
 * Notes:       *pbuffer should be NULL or a valid malloc heap ptr as it will be
 *              passed to realloc() by this call. If it is NULL on exit and no error
 *              was given then no translation table is needed.
 */

extern os_error *spr_GenerateTableForModePal(sprite_ptr sptr, int def_palette, int dest_mode, void *dest_palette, void **pbuffer);
extern os_error *spr_GenerateTableForModePal_named(spr_area anchor, const char *name, int def_palette, int dest_mode, void *dest_palette, void **pbuffer);

extern os_error *spr_GenerateTableForMode(sprite_ptr sptr, int dest_mode, void *dest_palette, void **pbuffer);
extern os_error *spr_GenerateTableForMode_named(spr_area anchor, const char *name, int dest_mode, void *dest_palette, void **pbuffer);

extern os_error *spr_GenerateTable(sprite_ptr sptr, void **pbuffer);
extern os_error *spr_GenerateTable_named(spr_area anchor, const char *name, void **pbuffer);

/* ====================================================================================== */

/* Manipulate palette and mask */

/* -------------------------------------------------------------------------------
 * Description: Read palette out of sprite using ColourTrans
 * Parameters:  void **pbuffer -- address to store palette pointer in.
 * Notes:       Space for palette is malloced and the pointer stored at *pbuffer.
 *              NB not the same as GenerateTable.
 *              Palette is BBGGRR00 words, no flashng colours
 */

extern os_error *spr_ReadPalette(sprite_ptr sptr, void **pbuffer);
extern os_error *spr_ReadPalette_named(spr_area anchor, const char *name, void **pbuffer);

/* -------------------------------------------------------------------------------
 * Description: Attach the given palette to a sprite
 * Parameters:  void *palette -- palette as returned by ReadPalette (above)
 * Notes:       area will be resized to give space for palette.
 *              If palette == NULL then call does nothing, but no error is given.
 */

extern os_error *spr_AddPalette(spr_area anchor, const char *name, void *palette);

/* -------------------------------------------------------------------------------
 * Description: Add a greyscale palette to a sprite
 * Notes:       Just creates a linear greyscale palette and attaches it to the
 *              sprite using AddPalette (above).
 */

extern os_error *spr_AddGreyPalette(spr_area anchor, const char *name);

/* -------------------------------------------------------------------------------
 * Description: Remove palette from a sprite, referenced buy name or ptr.
 * Notes:       Shrinks the area afterwards
 */

extern os_error *spr_RemovePalette(spr_area anchor, sprite_ptr sptr);
extern os_error *spr_RemovePalette_named(spr_area anchor, const char *name);


/* -------------------------------------------------------------------------------
 * Description: Add a mask to sprite.
 * Notes:       If new style sprite then 1bpp mask is created.
 */

extern os_error *spr_CreateMask(spr_area anchor, const char *name);


/* -------------------------------------------------------------------------------
 * Description: Remove mask from sprite, referenced buy name or ptr.
 * Notes:       Shrinks the area afterwards
 */

extern os_error *spr_RemoveMask(spr_area anchor, sprite_ptr sptr);
extern os_error *spr_RemoveMask_named(spr_area anchor, const char *name);

/* ====================================================================================== */

/* Put the sprite on the screen */

/* -------------------------------------------------------------------------------
 * Description: Plot sprite at given position, using raw kernel sprite op.
 * Parameters:  int x, y -- OS coordinates of bottom left of sprite.
 *              int plot_action -- usual GCOL action.
 */

extern os_error *spr_PutSprite(sprite_ptr sptr, int x, int y, int plot_action);
extern os_error *spr_PutSprite_named(spr_area anchor, const char *name, int x, int y, int plot_action);


/* -------------------------------------------------------------------------------
 * Description: Plot sprite at given position performing scaling and colour translation
 * Parameters:  int x, y -- OS coordinates of bottom left of sprite.
 *              int plot_action -- usual GCOL action.
 *              const sprite_factors *factors -- scaling factors.
 *              const void *pixtrans -- colour translation table.
 */

extern os_error *spr_PutSpriteScaled(sprite_ptr sptr, int x, int y, int plot_action, const sprite_factors *factors, const void *pixtrans);
extern os_error *spr_PutSpriteScaled_named(spr_area anchor, const char *name, int x, int y, int plot_action, const sprite_factors *factors, const void *pixtrans);

/* -------------------------------------------------------------------------------
 * Description: Plot sprite with a transformation
 * Parameters:  spr_box *src -- area within sprite to plot, can be NULL or whole sprite
 *              int plot_action -- usual GCOL action.
 *              spr_transmat *transmat -- translation matrix, position is encoded in here also
 *              const void *pixtrans -- colour translation table.
 * Notes:       transmat can be a rectangle warp or a rotation+translation.
 */

extern os_error *spr_PutSpriteTransformed(sprite_ptr sptr, const spr_box *src, int plot_action,
                                        const spr_transmat *transmat, const void *pixtrans);
extern os_error *spr_PutSpriteTransformed_named(spr_area anchor, const char *name, const spr_box *src, int plot_action,
                                        const spr_transmat *transmat, const void *pixtrans);

/* ====================================================================================== */

/* switch screen output into the sprite */

/* -------------------------------------------------------------------------------
 * Description: Switch VDU output to sprite
 * Parameters:  sprite_state *state -- saved state for this call is written out here
 *              int *savearea -- full saved context written here if non-null (not usually needed)
 * Notes:
 */

extern os_error *spr_SwitchOutputToSprite(sprite_ptr sptr, sprite_state *state, int *savearea);
extern os_error *spr_SwitchOutputToSprite_named(spr_area anchor, const char *name, sprite_state *state, int *savearea);

/* -------------------------------------------------------------------------------
 * Description: Switch VDU output back to previous context
 * Parameters:  const sprite_state *state -- saved state written by SwitchOutput
 */

extern os_error *spr_RestoreState(const sprite_state *state);

/* ====================================================================================== */

/* return address of, information on and about sprite */


/* -------------------------------------------------------------------------------
 * Description: Lookup sprite name and return pointer
 * Notes:       Optionally can return error (if you think it might be necessary)
 *              supports wimp_spriteanchor;
 */

extern sprite_ptr spr_Ptr(spr_area anchor, const char *name);
extern os_error *spr_Ptr_error(spr_area anchor, const char *name, sprite_ptr *sptr);


/* -------------------------------------------------------------------------------
 * Description: Return info on given sprite, referenced by name or ptr
 * Parameters:  sprite_info *info -- ptr to info block to be filled in.
 * Notes:       support wimp_spriteanchor
 */

extern os_error *spr_ReturnInfo(sprite_ptr sptr, sprite_info *info);
extern os_error *spr_ReturnInfo_named(spr_area anchor, const char *name, sprite_info *info);


/* -------------------------------------------------------------------------------
 * Description: Return size in bytes a sprite of given type and dimensions would be
 *              or of a mask.
 * Parameters:  int x, y -- sprite dimensions in pixels
 *              int mode -- sprite mode or type
 * Returns:     size in bytes
 * Notes:       doesn't include left-hand wastage - so don't use for calculating size
 *              od a sprite grabbed of the screen.
 */

extern int spr_sizeof_mask(int x, int y, int mode);
extern int spr_sizeof(int x, int y, int mode);


/* -------------------------------------------------------------------------------
 * Description: Return pointer to image data or mask data of given sprite
 * Returns:     Returns NULL if given NULL
 */

extern void *spr_DataPtr(sprite_ptr sptr);
extern void *spr_MaskPtr(sprite_ptr sptr);


/* -------------------------------------------------------------------------------
 * Description: Convert sprite specification into a sprite mode number (if it can)
 * Returns:     Mode number or -1. 
 */

extern int spr_EquivalentMode(int bpp, int xppi, int yppi);

/* -------------------------------------------------------------------------------
 * Description: Given a number of bits per pixel, return the relevant type number.
 */

extern int spr_bpptype(int bpp);

/* -------------------------------------------------------------------------------
 * Description: Given any sprite mode or type, give the simplest possible description
 * Notes:       if <= 8 bpp then gives standard MODE number (<=21) else sprite type
 */

extern int spr_CanonicaliseType(int mode);

extern int spr_CanonicaliseSprite(sprite_ptr sptr);

/* -------------------------------------------------------------------------------
 * Description: Returns correct value to create a sprite in the current screen mode.
 */

extern int spr_CurrentScreenMode(void);

/* ====================================================================================== */

/*
 * These two routines calculate the scaling factors necessary to plot the whole of one sprite
 * within another, and the offset within that sprite to use for it to be centered.
 * Returns: TRUE if the input sprite didn't need to be scaled down.
 */


/* -------------------------------------------------------------------------------
 * Description: Calculate the scaling factors and offset to plot one sprite within another
 * Parameters:  sptr_in -- the sprite to be plotted
 *              sptr_out -- the sprite into which it will be plotted
 *              factors -- the sprite factors necessary to ensure all of the input is displayed
 *              offset -- the offset to the plot position to ensure the sptr_in is centered within sptr_out.
 * Returns:     TRUE if sptr_in has to be scaled down to plot.
 * Notes:       GetScaling_info does same job but with extracted info blocks.
 */

extern BOOL spr_GetScaling(sprite_ptr sptr_in, sprite_ptr sptr_out, sprite_factors *factors, spr_coord *coord);
extern BOOL spr_GetScaling_info(sprite_info *ip_in, sprite_info *ip_out, sprite_factors *factors, spr_coord *coord);

/* ====================================================================================== */

/* -------------------------------------------------------------------------------
 * Description: Set the pointer shape from the given sprite
 * Parameters:  int apx, apy -- hot spot within pointer, in OS coords.
 */

extern os_error *spr_SetPointer(spr_area anchor, const char *name, int apx, int apy);

/* -------------------------------------------------------------------------------
 * Description: Reset the pointer
 */

extern void spr_ResetPointer(void);

#endif

/* eof spr.h */
