/* > spr_disp.h

 * © SJ Middleton, 1993

 * A set of routines to make displaying a sprite in a window easier.

 */

#ifndef __spr_disp_h
# define __spr_disp_h

#ifndef __wimp_h
# include "wimp.h"
#endif

#ifndef __spr_h
# include "spr.h"
#endif

typedef struct sprdisplay *sprdisplay;      /* handle for the window */

/* -------------------------------------------------------------------------------
 * Description: Open a display window on a given sprite.
 * Parameters:  spr_area sprarea -- the sprite area to use
 *              const char 8sprname -- the name of the sprite to display
 * Returns:     a handle to use in all other calls.
 * Notes:       This creates and opens the window.
 */

extern sprdisplay sprdisplay_open(spr_area sprarea, const char *sprname);


/* -------------------------------------------------------------------------------
 * Description: Dispose of a display window
 * Parameters:  sprdisplay *sdp -- ptr to a displah handle returned by open
 * Notes:       Sets ptr to zero when window has been disposed of.
 */

extern void sprdisplay_dispose(sprdisplay *psdp);


/* -------------------------------------------------------------------------------
 * Description: Register event handler for window
 * Parameters:  sprdisplay_event_handler handler -- handler function
 *              void *handle -- context for handler function
 * Notes:       This will be called whenever the window gets an event
 *              Function should return TRUE if it has dealt with the function
 *              or FALSE to let sprdisplay have a go.
 */

typedef BOOL (*sprdisplay_event_handler)(wimp_eventstr *e, void *handle);

extern void sprdisplay_eventhandler(sprdisplay sdp, sprdisplay_event_handler handler, void *handle);


/* -------------------------------------------------------------------------------
 * Description: Return system handle for display window
 * Returns:     the window handle.
 */

extern wimp_w sprdisplay_syshandle(sprdisplay sdp);

/* -------------------------------------------------------------------------------
 * Description: Set the zoom factor.
 * Parameters:  int zoom_mul, zoom_div -- zoom ratio
 * Notes:       This defines the size of a window in terms of a multiple of the
 *              size of the sprite displayed. This call causes the window extent
 *              to be updated and the window to be redrawn.
 */

extern void sprdisplay_setzoom(sprdisplay sdp, int zoom_mul, int zoom_div);

/* -------------------------------------------------------------------------------
 * Description: Set the displayed size of the window.
 * Parameters:  int xsize, ysize -- the size of the window in OS coords.
 * Notes:       Sets the window to be the given size. The sprite will be scaled to fit
 *              within this window size.
 */

extern void sprdisplay_setsize(sprdisplay sdp, int xsize, int ysize);


/* -------------------------------------------------------------------------------
 * Description: Update the display with a new sprite
 * Parameters:  as for open
 * Notes:       This can be a new spritename or new sprite area and sprite.
 *              It causes a complete refresh except that the zoom factors or size remain the same.
 */

extern void sprdisplay_update(sprdisplay sdp, spr_area sprarea, const char *sprname);


/* -------------------------------------------------------------------------------
 * Description: Cause the display to be redrawn.
 * Parameters:  BOOL fast -- If TRUE then the sprite is assumed to be the correct
                    resolution and palette for the current screen and the kernel
                    sprite plotting is used.
 * Notes:       Causes a Wimp_UpdateWindow to be performed. Fastest way of getting
 *              the screen to update. Especially if fast = TRUE.
 *              Even if fast = FALSE, if the sprite factors and pixtrans say no
 *              translation/scaling is needed then fast plotting will be used.
 */

extern void sprdisplay_localredraw(sprdisplay sdp, BOOL fast);
extern void sprdisplay_localredrawarea(sprdisplay sdp, spr_box *box, BOOL fast);

/* -------------------------------------------------------------------------------
 * Description: A redraw function
 * Parameters:  spr_coord *lwa -- logical work area origin for window
 *              wimp_redrawstr *rp -- redraw structure straight from wimp_eventstr.
 *              void *handle -- context ptr passed in.
 * Notes:       This function will be called on every time round the redraw loop
 *              AFTER the sprite has been plotted.
 */

typedef void (*sprdisplay_redraw_handler)(spr_coord *lwa, wimp_redrawstr *rp, void *handle);


/* -------------------------------------------------------------------------------
 * Description: Register a redraw handler
 * Parameters:  sprdisplay_redraw_handler handler -- redraw function
 *              void *handle -- context for handler function
 *              Don;t forget to unregister the function (fn == 0) when it's not needed anymore.
 */

extern void sprdisplay_redrawhandler(sprdisplay sdp, sprdisplay_redraw_handler fn, void *handle);


/* -------------------------------------------------------------------------------
 * Description: Update screen mode dependant cached parameters
 * Notes:       Call on wimp_MMODECHANGE
 */

extern void sprdisplay_modechange(sprdisplay sdp);


#endif

/* eof spr_disp.h */
