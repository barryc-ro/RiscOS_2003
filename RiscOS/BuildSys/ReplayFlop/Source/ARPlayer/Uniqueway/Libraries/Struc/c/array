/* > array.c

 * © SJ Middleton, 1992

 */

#include "msgs.h"
#include "werr.h"

#include <stdlib.h>
#include <string.h>

#include "macros.h"

#include "array.h"

struct array__str
{
    int         n;
    size_t      elem_size;
    void        *data;
    mem_allocfn alloc;
    mem_freefn  free;
};

#define PTR(v,a)    ((char *)(v)->data + (a)*(v)->elem_size)

#define BAD_EXTEND  msgs_lookup("Earray0:Bad array extend (%d)")
#define BAD_DELETE  msgs_lookup("Earray1:Bad array delete (%d)")
#define BAD_PTR     msgs_lookup("Earray2:Bad array entry (%d)")

static BOOL check_at(array a, int at)
{
    return at >= 0 && at <= a->n;
}

array array_new(int initial_n, size_t elem_size, mem_allocfn allocfn, mem_freefn freefn)
{
    array lp = calloc(sizeof(struct array__str), 1);
    if (lp)
    {
        lp->n = initial_n;
        lp->elem_size = elem_size;
        lp->alloc = allocfn;
        lp->free = freefn;
        if (!allocfn(&lp->data, elem_size*initial_n))
            array_dispose(&lp);
    }
    return lp;
}

BOOL array_extend(array v, int n)
{
    int new_n = v->n + n;

    if (new_n < 0)
        werr(0, BAD_EXTEND, n);

    if (v->alloc(&v->data, new_n*v->elem_size))
    {
        v->n = new_n;
        return TRUE;
    }
    return FALSE;
}

BOOL array_insert(array v, int at, int n)
{
    int old_n = v->n;
    if (check_at(v, at) && array_extend(v, n))
    {
        if (old_n != at)
            memmove(PTR(v,at+n), PTR(v,at), (old_n - at)*v->elem_size);
        return TRUE;
    }
    return FALSE;
}

void array_delete(array v, int at, int n)
{
    if (at + n > v->n)
        werr(0, BAD_DELETE, at+n);
    else if (check_at(v, at))
    {
        int new_n = v->n - n;
        if (new_n != at)
            memmove(PTR(v,at), PTR(v,at+n), (new_n - at)*v->elem_size);
        array_extend(v, -n);
    }
}

void array_dispose(array *pv)
{
    array v = *pv;
    if (v)
    {
        v->free(&v->data);
        free(v);
        *pv = NULL;
    }
}

int array_size(array v)
{
    return v->n;
}

void *array_ptr(array v, int entry)
{
    if (entry >= 0 && entry < v->n)
        return PTR(v, entry);
    werr(0, BAD_PTR, entry);
    return NULL;
}

void array_sort(array v, int (*comp_fn)(const void *o1, const void *o2))
{
    qsort(PTR(v, 0), v->n, v->elem_size, comp_fn);
}

int array_search(array v, const void *key, int (*comp_fn)(const void *o1, const void *o2))
{
    void *r = v->n == 0 ? NULL : bsearch(key, PTR(v, 0), v->n, v->elem_size, comp_fn);
    return r == NULL ? -1 : (((char *)r - (char *)PTR(v, 0)) / v->elem_size);
}

/* eof array.c */
