/* > arinfo.h

 * © SJ Middleton, 1993

 * This file contains functions to scan the ARMovie directory for decompressors.
 * It then reads the various info files and builds up an array of info.
 * There is also a simpler interface to it where you just give the decompress
 * type and it reads the info for that type directly.

 */

#ifndef __arinfo_h
# define __arinfo_h

/*
 * Dimension info from DecompX.Info file
 * ie what is the decompressor capable of in sizes and
 * what are its limitations in terms of pixel granularity.
 */

typedef struct
{
    int inc,                    /* dimension must be a multiple of this */
        min, max;               /* limits on dimension */
} arinfo_dimstr;

/*
 * Flags word for what files are available
 */

typedef enum
{
    arinfo_Code         = 0x00000001,       /* 1=DecompX.Decompress present */
    arinfo_RunImage     = 0x00000002,       /* 1=DecompX.!RunImage present */
    arinfo_Temporal     = 0x00000004,       /* must present previous frame to decompressor code */
    arinfo_Compress     = 0x00000008,       /* 1=DecompX.Compress present */
    arinfo_HalfWordCode = 0x00000010,       /* 1=DecompX.DecompresH present */
    arinfo_BatchComp    = 0x00000020        /* 1=DecompX.BatchComp present */
} arinfo_flag;

/*
 * Main info structure
 * contains all the info on the decompressor
 */

typedef struct
{
    int     format;             /* video format number */
    char    *description;       /* malloced */
    char    *author;            /* malloced */
    int     bpp;                /* to calculate size of a frame - if 0 then variable */
    arinfo_dimstr   x, y;       /* see above */
    arinfo_flag     flags;      /* see above */
    int     colourspaces;       /* bit mask of colourspaces available (see ReplayType.h) */
} arinfo_str;

/* --------------------------------------------------------------------------- */
/* Prototypes */

/* From arinfo.c */

/* Internal functions for benefit of arinfo2.c */

extern arinfo_flag arinfo__check_code(const char *filename);
extern void arinfo__check_info(const char *filename, arinfo_str *ip);


/* ---------------------------------------------------------------------------
 * Description: Load info for a video compression type.
 * Parameters:  int format -- the compression identifier
 *              arinfo_str *ip -- where to write out the info read.
 * Returns:     1 for success, 0 for failure.
 * Notes:       This directly accesses the ARMovie directory to read the info.
 */

extern int arinfo_loadinfo(int format, arinfo_str *ip);


/* ---------------------------------------------------------------------------
 * Description: Free any memory used by fields in the arinfo_str
 * Parameters:  arinfo_str *ip -- ptr to a structure filled in by arinfo_loadinfo
 * Notes:       frees the memory malloced for the strings by arinfo_loadinfo.
 */

extern void arinfo_freeinfo(arinfo_str *ip);


/* From arinfo2.c */

/* ---------------------------------------------------------------------------
 * Description: Scan the ARMovie directory and build an array of video types.
 * Returns:     number of decompressor directories.
 * Notes:       Must call before using the following functions, or some of thos in arvid.c
 *              Not necessary to call before using loadinfo.
 *              Decompressors will be sorted into numerical order.
 */

extern int arinfo_init(void);


/* ---------------------------------------------------------------------------
 * Description: Return info about a compressor indexed by position in table/menu.
 * Parameters:  int index -- position in array counting from 0
 * Returns:     pointer to the info element in array.
 * Notes:       Use arinfo_formattoindex() to get required index number.
 */

extern arinfo_str *arinfo_info(int index);


/* ---------------------------------------------------------------------------
 * Description: Return array index of a given decompression type.
 * Parameters:  int format -- video format type
 * Returns:     index into array to pass to arinfo_info
 */

extern int arinfo_formattoindex(int format);


/* ---------------------------------------------------------------------------
 * Description: Iterate a function over compressors that match the given flags
 * Returns:     value of index that stopped on.
 */

typedef int (*arinfo_iteratefn)(arinfo_str *ip, int index, int count, void *handle);

extern int arinfo_iterate(arinfo_flag match_mask, arinfo_flag match_val, arinfo_iteratefn fn, void *handle);

/* ---------------------------------------------------------------------------
 * Description: Returns the mask word for the decompressors matching the flags
 * Returns:     mask word
 * Notes:       use to setup iconmenu mask fields correctly.
 */

extern int arinfo_makemask(arinfo_flag match_mask, arinfo_flag match_val);
extern int arinfo_compressionmask(void);    /* flags arinfo_Compress, arinfo_Compress) */


/* ---------------------------------------------------------------------------
 * Description: Builds a menu string of decompressor names that match the given flags
 * Returns:     ptr to a string (malloced).
 * Notes:
 */

extern char *arinfo_makemenu(arinfo_flag match_mask, arinfo_flag match_val);
extern char *arinfo_decompressormenu(void);     /* flags 0, 0 */


/* ---------------------------------------------------------------------------
 * Description: Find the decompressor index, matching only those with the given flag field
 * Returns:     index into decompressor array
 */

extern int arinfo_findindex(arinfo_flag match_mask, arinfo_flag match_val, int subindex);


/* ---------------------------------------------------------------------------
 * Description: Find the decompressor index, matching only those with the given flag field
 * Returns:     index into subset of decompressor array
 */

extern int arinfo_findsubindex(arinfo_flag match_mask, arinfo_flag match_val, int index);


#endif

/* eof arinfo.h */
