/* > h.saveas

 * from ROLib saveas with additions.

 */

#ifndef __saveas_h
# define __saveas_h

#ifndef __xfersend_h
# include "xfersend.h"
#endif

#ifndef __dbox_h
# include "dbox.h"
#endif

/* ----------------------------- saveas -------------------------------------
 * Description:   Displays a dialogue box, for the user to export application
 *                data.
 *
 * Parameters:    int filetype -- type of file to save to
 *                char *name -- suggested file name
 *                int estsize -- estimated size of the file
 *                xfersend_saveproc -- caller-supplied function for saving
 *                                     application data to a file
 *                xfersend_sendproc -- caller-supplied function for RAM
 *                                     data transfer (if application is able
 *                                     to do this)
 *                xfersend_printproc -- caller-supplied function for printing
 *                                      application data, if "save icon" is
 *                                      dragged onto printer application
 *                void *handle -- handle to be passed to handler functions
 * Returns:       TRUE if data exported successfully.
 * Other Info:    This function displays a dialogue box with the following
 *                fields:
 *                     i) a sprite icon appropriate to the given file type
 *                    ii) the suggested filename
 *                   iii) an OK button
 *                (Note: a template called "xfer_send" must be in the
 *                application's templates file to use this function, set up
 *                as in the !Edit, !Draw and !Paint applications)
 *                Xfersend deals with the complexities of message-passing
 *                protocols to achieve the data transfer. Refer to the
 *                typedefs in xfersend.h for an explanation of what the
 *                three caller-supplied functions should do.
 *                If you pass 0 as the xfersend_sendproc, then no in-core
 *                data transfer will be attempted
 *                If you pass 0 as the xfersend_printproc, then the file
 *                format for printing is assumed to be the same as for saving
 *                The estimated file size is not essential, but may improve
 *                performance.
 *
 */
  
extern BOOL saveas(int filetype, char *name, int estsize,
            xfersend_saveproc, xfersend_sendproc, xfersend_printproc,
            void *handle);


/* ----------------------- saveas_read_leafname_during_send -----------------
 * Description:   Gets the "leaf" of the file name in the "filename" field
 *                of the "xfer-send" dialogue box.
 *
 * Parameters:    char *name -- buffer to put file name in
 *                int length -- size in bytes of supplied buffer
 * Returns:       void.
 * Other Info:    none.
 *
 */

extern void saveas_read_leafname_during_send(char *name, int length);

/* icon numbers to use along width saveas_syshandle() */ 

#define saveas_SAVE_FIELD       0
#define saveas_CANCEL_FIELD     1
#define saveas_NAME_FIELD       2
#define saveas_SPRITE_FIELD     3
#define saveas_SELECTION_FIELD  4

/*
 * terminate list of icons with -1 in the icon_number field.
 */

typedef struct
{
    int icon_number,            /* icon number in template */
        bit_value,              /* value to enter when selected */
        bit_mask,               /* mask to use */
        dependant_on;           /* if != -1 then fade unless this icon is set */
} saveas_icons;

extern void dboxautoicons_init(dbox d, saveas_icons icons[], int flags);
extern BOOL dboxautoicons_processaction(dbox d, dbox_field action, saveas_icons icons[], int *ptflags);

/* should return new estimated size */

typedef int (*saveas_notify)(int flags, void *handle);

extern BOOL saveas_extended(const char *ident, int filetype, char *leafname, int estsize,
        xfersend_saveproc saveproc, xfersend_sendproc sendproc, xfersend_printproc printproc, 
        saveas_icons icons[], int flags, saveas_notify fn,
        void *handle);

extern void saveas_changefiletype(int filetype);
extern void saveas_changefilename(const char *filename);
extern void saveas_setstatic(BOOL showstatic);
extern void saveas_seticon(const char *spritename);
extern void saveas_fadeselection(void);

/*
 * New static saveas functions
 */

typedef struct saveas_box *saveas_box;

extern void *saveas_syshandle(saveas_box s);
extern BOOL saveas_selectionstate(saveas_box s);

extern BOOL saveas_processrawevents(dbox d, wimp_eventstr *e, saveas_box s);
extern BOOL saveas_processevents(dbox d, dbox_field action, saveas_box s, BOOL *pclose);
extern void saveas_dispose(saveas_box *ps);
extern saveas_box saveas_new(const char *ident, int filetype, char *leafname, int estsize,
        xfersend_saveproc saveproc, xfersend_sendproc sendproc, xfersend_printproc printproc, 
        void *handle);

extern void saveas_defaultevents(dbox d, void *handle);
extern BOOL saveas_defaultrawevents(dbox d, void *event, void *handle);


#endif


/* eof saveas.h */
