/* > dboxquery.c

 * © SJ Middleton, 1992

 * New more flexible version of the dboxquery module from RiscOSLib

 */

#include "dbox.h"
#include "msgs.h"
#include "wimpx.h"

#include <stdarg.h>
#include <stdio.h>

#include "dboxquery.h"

#define MSG1_FIELD  0
#define MSG2_FIELD  2
#define MSG3_FIELD  3

#define TEXT_FIELD  1

#define QUERY_IDENT "query"

#define SAVE    msgs_lookup("save:Save")
#define DISCARD msgs_lookup("discard:Discard")
#define CANCEL  msgs_lookup("cancel:Cancel")
#define NO      msgs_lookup("no:No")
#define YES     msgs_lookup("yes:Yes")

static dbox query_d = NULL;

static void do_setfield(dbox_field f, const char *msg)
{
    if (msg)
    {
        wimp_set_icon_state(dbox_syshandle(query_d), f, 0, wimp_IDELETED);
        dbox_setfield(query_d, f, (char *)msg);
    }
    else
        wimp_set_icon_state(dbox_syshandle(query_d), f, wimp_IDELETED, wimp_IDELETED);
}

static dbox_field dboxquery_general(const char *msg1, const char *msg2, const char *msg3, const char *text)
{
    dbox_field  answer = dbox_CLOSE;

    if (query_d == NULL)
        query_d = dbox_new(QUERY_IDENT);

    if (query_d && text)
    {
        wimp_caretstr cs, cs2;

        dbox_setfield(query_d, TEXT_FIELD, (char *)text);

        do_setfield(MSG1_FIELD, msg1);
        do_setfield(MSG2_FIELD, msg2);
        do_setfield(MSG3_FIELD, msg3);

        dbox_show(query_d);

/* save caret position and grab caret */
        wimp_get_caret_pos(&cs);
        dbox_setcaret(query_d, -1);

        answer = dbox_fillin(query_d);

/* restore caret position if not moved */
        wimp_get_caret_pos(&cs2);
        if (cs2.w == dbox_syshandle(query_d))
            wimp_set_caret_pos(&cs);

        dbox_hide(query_d);
    }

    return answer;
}

dboxquery_REPLY dboxquery(const char *question)
{
    switch (dboxquery_general(NO, YES, 0, question))
    {
        case MSG1_FIELD:
            return dboxquery_NO;
        case MSG2_FIELD:
            return dboxquery_YES;
    }

    return dboxquery_CANCEL;

}

dboxquery_REPLY dboxqueryf(const char *question, ...)
{
    char    buffer[256];
    va_list ap;

    va_start(ap, question);
    vsprintf(buffer, question, ap);
    va_end(ap);

    return dboxquery(buffer);
}

dboxclose_Reply dboxclosef(const char *question, ...)
{
    char    buffer[256];
    va_list ap;

    va_start(ap, question);
    vsprintf(buffer, question, ap);
    va_end(ap);

    switch (dboxquery_general(SAVE, DISCARD, CANCEL, buffer))
    {
        case MSG1_FIELD:
            return dboxclose_Save;
        case MSG2_FIELD:
            return dboxclose_Discard;
        case MSG3_FIELD:
            return dboxclose_Cancel;
    }

    return dboxclose_CancelEscape;
}

dboxclose_Reply dboxquitf(const char *question, ...)
{
    char    buffer[256];
    va_list ap;

    va_start(ap, question);
    vsprintf(buffer, question, ap);
    va_end(ap);

    switch (dboxquery_general(CANCEL, DISCARD, 0, buffer))
    {
        case MSG1_FIELD:
            return dboxclose_Cancel;
        case MSG2_FIELD:
            return dboxclose_Discard;
    }

    return dboxclose_CancelEscape;
}

dbox3way_Reply dbox3wayf(const char *msg1, const char *msg2, const char *msg3, const char *question, ...)
{
    char    buffer[256];
    va_list ap;

    va_start(ap, question);
    vsprintf(buffer, question, ap);
    va_end(ap);

    switch (dboxquery_general(msg1, msg2, msg3, buffer))
    {
        case MSG1_FIELD:
            return dbox3way_Answer1;
        case MSG2_FIELD:
            return dbox3way_Answer2;
        case MSG3_FIELD:
            return dbox3way_Answer3;
    }

    return dbox3way_CancelEscape;
}


/* eof dboxquery.c */
