/* Title: > c.dbox
 * Purpose: System-independent dialog boxes.
 * History: 5-Feb-90: IDJ:  split off dbox_fillin_loop, to allow calling from dbox_fillin
 *                          and dbox_fillin_fixedcaret - the latter function doesn't move
 *                          caret to end of first writeable icon. Users of dbox_fillin
 *                          won't see any difference
 *         18-Feb-91: SJM:  added support for keyboard selection of radio/selection icons
 *                          and a few other bits and bobs.
 *          20-Jul-92: SJM: cleaned up the various additions I'd made.
 *          Nov-93:SJM:     removed many non-style guide compliant additions and added
 *                          a flush events before deleteing window to get round wimp bug.
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <ctype.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <limits.h>

#include "werr.h"
#include "os.h"
#include "akbd.h"
#include "wimpx.h"
#include "wimpt.h"
#include "win.h"
#include "menu.h"
#include "event.h"
#include "dbox.h"
#include "res.h"
#include "template.h"
#include "alarm.h"
#include "msgs.h"

#include "coords.h"
#include "help.h"
#include "swis.h"

#include "icons.h"
#include "wmisc.h"

#define DBOX_ERROR  msgs_lookup("Edbox0:Error creating dialogue box (%d).")

static void select_field(dbox d, dbox_field field);
static void dbox__setcaret(dbox d, dbox_field field);

static BOOL last_event_was_onoff = FALSE;

#define WRITE_TYPE_CHAR         'W'
#define WRITE_TYPE_PATH         'P'
#define WRITE_TYPE_START        'T'    
#define TYPE_NUMERIC            'N'

#define osbyte_WaitVSync        0x13
#define osbyte_SelectPointer    0x6A
#define osbyte_LockKbdRpt       0x78
#define osbyte_KbdScanFrom16    0x7a

typedef struct dbox__str {
  struct dbox__str *next;  /* if user wants to link dboxes into a list */
  wimp_w w;                /* only used in live dialog boxes */
  int posatcaret;          /* Every time it is shown, it appears "near" the
                            * caret. 
                            */
  int showing;
  wimp_caretstr caretstr;   /* save between fillin's. */
  dbox_handler_proc eventproc;
  void *eventprochandle;
  dbox_raw_handler_proc raweventproc;
  void *raweventprochandle;
  
  dbox_field field;     /* button last pressed */
  int fieldwaiting;     /* a button waiting to be picked up */
  int eventdepth;       /* for delaying disposal */
  int disposepending;

  template *t;

} dbox__str;
/* Abstraction: a dbox is really a dbox__str*. */

/* -------- Miscellaneous. -------- */

static dbox dbox__fromtemplate(template *from)
{
    dbox d;
    if ((d = calloc(sizeof(dbox__str), 1)) != NULL)
    {
        if ((d->t = template_copy(from)) != NULL)
        {
            char *p = d->t->name;
            while (*p >= ' ') p++;
            *p = '\0';
        }
        else
        {
            free(d);
            d = NULL;
        }
    }
    return d;
}

static void dbox__dispose(dbox d)
{
    if (d->t->workspacesize != 0)
        free(d->t->workspace);
    free(d->t);
    free(d);
}

static void dbox__dodispose(dbox d)
{
    win_register_event_handler(d->w, 0, 0);
    event_attachmenu(d->w, 0, 0, 0);
    if (d->showing)
        win_activedec();

/* fix dialogue box deletion bug */
    if (wimpt_last_event()->e == wimp_EBUT && wimpt_currentversion() < 320)
        wmisc_flushevents();

    no_err(wimp_delete_wind(d->w));
    dbox__dispose(d);
}

/* -------- Finding Icons. -------- */

/* useful icon flag masks, for searching for specific icon types */
#define BUTTON_IFLAGS (15 * wimp_IBTYPE)
#define WRITABLE_IFLAGS (wimp_BWRITABLE * wimp_IBTYPE)
#define WRITABLE2_IFLAGS (14 * wimp_IBTYPE)
#define CLICK_IFLAGS (wimp_BCLICKDEBOUNCE * wimp_IBTYPE)
#define AUTO_IFLAGS (wimp_BCLICKAUTO * wimp_IBTYPE)
#define RELEASE_IFLAGS (wimp_BSELREL * wimp_IBTYPE)
#define ONOFF_IFLAGS (wimp_BSELDOUBLE * wimp_IBTYPE)
#define ONOFF2_IFLAGS (wimp_BCLICKSEL * wimp_IBTYPE)
#define MENU_IFLAGS (wimp_BSELNOTIFY * wimp_IBTYPE)

/* -------- Icons and Fields. -------- */

static wimp_i dbox__fieldtoicon(dbox_field f)
{
  return(f);
}

static wimp_icon *dbox__iconhandletoptr(dbox d, wimp_i i)
{
  return i == -1 ? NULL : (((wimp_icon*) (&d->t->window + 1)) + i);
}

static wimp_icon *dbox__fieldtoiconptr(dbox d, dbox_field f)
{
  return(dbox__iconhandletoptr(d, dbox__fieldtoicon(f)));
}

static wimp_iconflags dbox__ibutflags(wimp_icon *i)
{
  return i == NULL ? 0 : (i->flags & BUTTON_IFLAGS);
}

static dbox_fieldtype dbox__iconfieldtype(wimp_icon *i)
{
  switch (dbox__ibutflags(i)) {
  case AUTO_IFLAGS:
  case RELEASE_IFLAGS:
  case CLICK_IFLAGS:
  case MENU_IFLAGS:
  case (wimp_BCLICKDRAGDOUBLE * wimp_IBTYPE):
    return(dbox_FACTION);
  case ONOFF_IFLAGS:
  case ONOFF2_IFLAGS:
    return(dbox_FONOFF);
  case WRITABLE_IFLAGS:
  case WRITABLE2_IFLAGS:
    return(dbox_FINPUT);
  default:
    return(dbox_FOUTPUT);
  };
}

/*
 * WARNING: This modifies the actual original window template.
 */
                  
void dbox_savepos(dbox d)
{
  wimp_wind  *wp;
  wimp_wstate  state;

  wp = template_syshandle(d->t->name);
  wimpt_noerr(wimp_get_wind_state(d->w, &state));
  wp->box = state.o.box;
  wp->scx = state.o.x;
  wp->scy = state.o.y;
}

/*
 * Check icon is not faded OR deleted
 */

static BOOL dbox__iconfadestate(dbox d, dbox_field f)
{
  if (f != dbox_CLOSE)
  {
     wimp_icon info;
     wimpt_noerr(wimp_get_icon_info(d->w, dbox__fieldtoicon(f), &info));
     return (info.flags & (wimp_INOSELECT | wimp_IDELETED)) != 0;
  }
  return FALSE;
}

#if 0
static BOOL dbox__validstring_contains(const wimp_icon *ip, int command_char, int find)
{
  char *s = icon_validstring(ip, command_char);
  if (s)
  {            
    int c;
    do
    {
      c = *s++;
      if (toupper(c) == find)
        return TRUE;
    } 
    while (c != 0 && c != ';');
  }
  return FALSE;
}
#endif

static int dbox__min(int a, int b) {if (a<b) {return(a);} else {return(b);};}

void dbox_fadefield (dbox d, dbox_field f)
{
  /* set shaded bit in iconflags */
  wimpt_noerr(wimp_set_icon_state (d->w, dbox__fieldtoicon(f),
                                   wimp_INOSELECT, wimp_INOSELECT));
    {
      wimp_caretstr cs;
      wimpt_noerr(wimp_get_caret_pos(&cs));
      if (cs.w == d->w && cs.i == f)
        dbox__setcaret(d, -1);
    }
}

void  dbox_unfadefield (dbox d, dbox_field f)
{
  /* unset shaded bit in iconflags */
  wimpt_noerr(wimp_set_icon_state(d->w, dbox__fieldtoicon(f), 
                                  0, wimp_INOSELECT));
}


void dbox_setfield(dbox d, dbox_field f, const char *value)
{
  wimp_icon *i = dbox__fieldtoiconptr(d, f);
  if ((i->flags & wimp_ITEXT) == 0)
  {
    /* Allowed, has no effect */
  }
  else
  {
    wimp_caretstr caret ;
    if ((i->flags & wimp_INDIRECT) != 0) {
      (void) memcpy(i->data.indirecttext.buffer, value,
        dbox__min(i->data.indirecttext.bufflen - 1,
                  strlen(value) + 1));
      i->data.indirecttext.buffer[i->data.indirecttext.bufflen-1] = 0;
    }
    else
    {
      (void) memcpy(&i->data.text[0], value, 12);
      i->data.text[11] = 0;
    };

    /* prod it, to cause redraw */
    wimpt_noerr(wimp_set_icon_state(d->w, dbox__fieldtoicon(f), 0, 0));

    /* ensure that the caret moves correctly if it's in this icon */

    wimpt_noerr(wimp_get_caret_pos(&caret)) ;

    if (caret.w == d->w && caret.i == dbox__fieldtoicon(f))
    {
     int l = strlen((i->flags & wimp_INDIRECT) != 0 ?
                       i->data.indirecttext.buffer : i->data.text) ;
#if FALSE
     if (caret.index > l) 
     {  
      caret.index = l ;
      caret.height = caret.x = caret.y = -1 ;   /* calc from index */
      wimpt_noerr(wimp_set_caret_pos(&caret)) ;
     }
#else
     if (caret.index > l) caret.index = l ;
     caret.height = caret.x = caret.y = -1 ;   /* calc from index */
     wimp_set_caret_pos(&caret);
#endif
    }

  };
}

void dbox_getfield(dbox d, dbox_field f, char *buffer, int size)
{
  wimp_icon *i = dbox__fieldtoiconptr(d, f);
  int j = 0;
  char *from;
  if ((i->flags & wimp_ITEXT) == 0) {
    /* Allowed, returns "". */
  } else {
    if ((i->flags & wimp_INDIRECT) != 0) {
      while (i->data.indirecttext.buffer[j] >= 32) {j++;};
      from = i->data.indirecttext.buffer;
    } else {
      while (i->data.text[j] >= 32 && j < 11) {j++;};
      from = &i->data.text[0];
    };
    if (j > size) {j = size;};
    (void) memcpy(buffer, from, j);
  };
  buffer[j] = 0;
}

void dbox_setnumeric(dbox d, dbox_field f, int n)
{
  char a[20];
  wimp_icon *i = dbox__fieldtoiconptr(d, f);
  dbox_fieldtype ftype = dbox__iconfieldtype(i);
  switch (ftype) {
  case dbox_FONOFF:
  case dbox_FACTION:
      if (n)
        wimpt_noerr(wimp_set_icon_state(d->w, dbox__fieldtoicon(f),
          wimp_ISELECTED, wimp_ISELECTED));
      else
        wimpt_noerr(wimp_set_icon_state(d->w, dbox__fieldtoicon(f),
          0, wimp_ISELECTED));
      break;
  default:
      sprintf(a, "%i", n);
      dbox_setfield((dbox) d, f, a);
  };
}

int dbox_getnumeric(dbox d, dbox_field f)
{
  char a[20];
  int n;
  wimp_icon *iptr = dbox__fieldtoiconptr(d, f);
  wimp_icon icon;

  switch (dbox__iconfieldtype(iptr))
  {
    case dbox_FONOFF:
    case dbox_FACTION:
      wimpt_noerr(wimp_get_icon_info(d->w, dbox__fieldtoicon(f), &icon));
      n = (icon.flags & wimp_ISELECTED) != 0;
      break;

    default:
      dbox_getfield((dbox) d, f, a, 20);
      n = (int)strtol(a, NULL, 10);
      break;
  };
  return(n);
}

/*
 * Lock the auto-repeat to prevent buttons being hit twice.
 */


static void lock_repeat(void)
{
  int r1 = 0, r2 = 0;
  os_byte(osbyte_LockKbdRpt, &r1, &r2);
}

/* -------- Arrival of events from DBoxes. -------- */

dbox_field dbox_get(dbox d)
{
  d->fieldwaiting = 0;
  return(d->field);
}

dbox_field dbox_read(dbox d)
{
  return (d->field);
}

void dbox_eventhandler(dbox d, dbox_handler_proc handler, void* handle)
{
  d->eventproc = handler;
  d->eventprochandle = handle;
}

void dbox_raw_eventhandler(dbox d, dbox_raw_handler_proc handler, void *handle)
{
  d->raweventproc = handler;
  d->raweventprochandle = handle;
}

/* -------- Processing Wimp Events. -------- */


static void dbox__buttonclick(dbox d, dbox_field f, BOOL from_mouse)
{
 if (!dbox__iconfadestate(d, f))
 {
  wimp_icon *ip = dbox__fieldtoiconptr(d, f);
  if (f != -1)
  {
    switch (dbox__iconfieldtype(ip))
    {
      case dbox_FACTION:
        last_event_was_onoff = FALSE;
        if (!from_mouse)
            icon_slab(d->w, f, TRUE);
        break;

      case dbox_FONOFF:
      case dbox_FINPUT:
        last_event_was_onoff = TRUE;
        break;

      default:
        return;
    }
  }

  d->field = f;
  d->fieldwaiting = 1;
  if (d->eventproc != 0) 
  {
    d->eventdepth++;
    d->eventproc((dbox) d, d->eventprochandle);
    d->eventdepth--;
    if (d->disposepending && d->eventdepth == 0) 
      dbox__dodispose(d);
  };

  if (f != -1 && !last_event_was_onoff && (!d->disposepending || d->eventdepth != 0))
  {
    if (!from_mouse)
    {
        wmisc_flushevents();
        icon_slab(d->w, f, FALSE);
    }
  }
 }
}

static BOOL dbox__hitbutton(dbox d, int button)
/* A button is an action button or an on/off switch. "button" counts only
such interesting buttons, button==0 -> the first one in the DBox. Find the
right icon. If an action, do it. If on/off, flip it. If button is too big, do
nothing. */
{
  wimp_icon *i;
  int j = 0; /* counts icons */
  dbox_fieldtype f;
  BOOL icon_found = FALSE;

  for (j=0; j<d->t->window.nicons; j++) {
    i = dbox__iconhandletoptr(d, j);
    f = dbox__iconfieldtype(i);
    if (f == dbox_FACTION) {
      if (button == 0) {
        /* this is the right one */
        if (f == dbox_FACTION) {
          lock_repeat();
          dbox__buttonclick(d, j, FALSE);
        };
        icon_found = TRUE;
        break;
      } else {
        /* right sort, but not this one. keep going. */
        button--;
      };
    } else {
      /* not the right sort of icon: keep going. */
    };
  };

  return icon_found;
}

static void dbox__setcaret(dbox d, dbox_field field)
{
  wimp_caretstr   cs;

  if (dbox__iconfadestate(d, field))
    field = -1;

  cs.w = d->w;
  cs.i = field;
  cs.height = -1;
  cs.x = cs.y = -0x4000;

  if (field != -1)
  {
    char a[256];
    dbox_getfield(d, field, a, 255);
    cs.index = strlen(a);
  }

  wimp_set_caret_pos(&cs);
}

void dbox_setcaret(dbox d, dbox_field field)
{
  select_field(d, field);
}

static int esg_of(const wimp_icon *ip)
{
  return (ip->flags & wimp_IESG*15) >> ESG_SHIFT;
}

static void select_field(dbox d, dbox_field field)
{
  if (field >= d->t->window.nicons || field < -1)
    field = -1;

  dbox__setcaret(d, field);
}

/* ------------------------------------------------------------------------------------ */

/*
 * Match characters as follows.
 * a-z, A-Z are matched against action buttons.
 * ctrl(a)-ctrl(z) are matched against onoff buttons.
 */

#define ctrl(a) ((a) - 'a' + 1)

#define toplain(c)  (c + 'A' - ctrl('a'))

dbox_field dbox_matchchar(dbox d, int ch)
{
  BOOL    is_ctrl;
  int     c;
  wimp_i  i;

  if ((is_ctrl = iscntrl(ch)) != FALSE)
    c = toplain(ch);
  else
    c = toupper(ch);

  for (i = 0; i < d->t->window.nicons; i++)
  {
    wimp_icon       *ip = dbox__iconhandletoptr(d, i);
    dbox_fieldtype  type = dbox__iconfieldtype(ip);

    if ((type == dbox_FACTION && !is_ctrl) || (type == dbox_FONOFF && is_ctrl))
    {
      char *ptr = ip->flags & wimp_INDIRECT ? ip->data.indirecttext.buffer : ip->data.text;
      while (TRUE)
      {
        int cc = *ptr++;
        if (cc == c)
          return dbox__iconfadestate(d, i) ? -1 : i;
        else if (cc < ' ' || isupper(cc))
          break;
      }
    }
  }
  return -1;
}

void dbox_exclusiveselect(dbox d, dbox_field f)
{
  if (f != -1)
  {
    wimp_icon *ip = dbox__fieldtoiconptr(d, f);
    int type = dbox__iconfieldtype(ip);
    if (type == dbox_FONOFF || type == dbox_FACTION)
    {
      int esg = esg_of(ip);
      if (esg == 0)
        wimpt_noerr(wimp_set_icon_state(d->w, f, wimp_ISELECTED, 0));

      else
      {
        wimp_which_block    block;
        wimp_i              i, icons[24];

        block.window = d->w;
        block.bit_mask = wimp_ISELECTED | (wimp_IESG*15);
        block.bit_set = wimp_ISELECTED | (wimp_IESG*esg);
        wimpt_noerr(wimp_which_icon(&block, icons));

        for (i = 0; icons[i] != -1; i++)
          wimpt_noerr(wimp_set_icon_state(d->w, icons[i], 0, wimp_ISELECTED));

        wimpt_noerr(wimp_set_icon_state(d->w, dbox__fieldtoicon(f), wimp_ISELECTED, wimp_ISELECTED));
      }
    }
  }
}

/*
 * This function is called when we activate a button with an alphabetic character.
 */

static void do_buttonclick(dbox d, dbox_field f)
{
  if (f != -1)
  {
    wimp_icon *ip = dbox__fieldtoiconptr(d, f);
    switch (dbox__iconfieldtype(ip))
    {
      case dbox_FACTION:
        dbox__buttonclick(d, f, FALSE);
        break;
      case dbox_FONOFF:
        dbox_exclusiveselect(d, f);
        dbox__buttonclick(d, f, FALSE);
        break;
    }
  }
}

/*
 * Return the action field that has the R6 validation string if any
 * If none has then use the first action icon that has ESG 15.
 */

static dbox_field find_default_action(dbox d)
{
  dbox_field f, def_action = -1, def_action1 = -1;
  for (f = 0; f < d->t->window.nicons; f++)
  {
    wimp_icon   *ip = dbox__fieldtoiconptr(d, f);
    char        *border_ptr;
    if (dbox__iconfieldtype(ip) == dbox_FACTION)
    {
      if (def_action == -1 && (border_ptr = icon_validstring(ip, 'R')) != NULL && border_ptr[0] == '6')
        def_action = f;
      if (def_action1 == -1 && esg_of(ip) == 15)
        def_action1 = f;
    }
  }

  if (def_action == -1)
    def_action = def_action1;

  return def_action == -1 || dbox__iconfadestate(d, def_action) ? -1 : def_action;
}

static dbox_field find_writeable(dbox d, dbox_field from)
{
  dbox_field f;
  for (f = from; f < d->t->window.nicons; f++)
  {
     wimp_icon info;
     wimpt_noerr(wimp_get_icon_info(d->w, dbox__fieldtoicon(f), &info));
     if ((info.flags & (wimp_INOSELECT | wimp_IDELETED)) == 0 &&
        dbox__iconfieldtype(&info) == dbox_FINPUT)
        return f;
  }
  return -1;
}

/* ------------------------------------------------------------------------------------------------ */

static void dbox__wimp_event_handler(wimp_eventstr *e, void *handle)
{
  dbox d = (dbox) handle;
  wimp_caretstr c;
  wimp_icon *i;

  if (d->raweventproc != 0) {
    BOOL done;
    d->eventdepth++;
    done = (d->raweventproc)(d, (void*) e, d->raweventprochandle);
    d->eventdepth--;
    if (d->disposepending && d->eventdepth == 0) {
      dbox__dodispose(d);
      return;
    } else if (done) { /* this event has been processed. */
      return;
    };
  };

  switch (e->e) {
  case wimp_ECLOSE:
      dbox__buttonclick(d, dbox_CLOSE, TRUE); /* special button code */
      break;
  case wimp_EOPEN:
      wimpt_noerr(wimp_open_wind(&e->data.o));
      break;
  case wimp_EBUT:
      if ((wimp_BMID & e->data.but.m.bbits) != 0) {
        /* ignore it. */
        /* It will already have been intercepted (by Events) if there's
        a menu, otherwise we're not interested anyway. */
      } else if (e->data.but.m.i != (wimp_i) -1) {
        i = dbox__iconhandletoptr(d, e->data.but.m.i);

        switch (dbox__iconfieldtype(i))
        {
          case dbox_FINPUT:
            switch (e->data.but.m.bbits)
            {
              case wimp_BCLICKLEFT:
                dbox__buttonclick(d, e->data.but.m.i, TRUE);
                break;
            }
            break;

          case dbox_FACTION:                               
          case dbox_FONOFF:
            dbox__buttonclick(d, e->data.but.m.i, TRUE);
            break;
        };
      };
      break;
  case wimp_EKEY:
      wimpt_noerr(wimp_get_caret_pos(&c));
      switch (e->data.key.chcode) {
      case akbd_Fn+1:
      case akbd_Fn+2:
      case akbd_Fn+3:
      case akbd_Fn+4:
      case akbd_Fn+5:
      case akbd_Fn+6:
      case akbd_Fn+7:
      case akbd_Fn+8:
      case akbd_Fn+9:
          /* if fnkey matches icon number, do action, else pass it on
           * as a hotkey stroke
           */
          if (!dbox__hitbutton(d, e->data.key.chcode - (akbd_Fn+1)))
            wimp_processkey(e->data.key.chcode);
          break;

      case akbd_Sh | akbd_Fn+1:
      case akbd_Sh | akbd_Fn+2:
      case akbd_Sh | akbd_Fn+3:
      case akbd_Sh | akbd_Fn+4:
      case akbd_Sh | akbd_Fn+5:
      case akbd_Sh | akbd_Fn+6:
      case akbd_Sh | akbd_Fn+7:
      case akbd_Sh | akbd_Fn+8:
      case akbd_Sh | akbd_Fn+9:
          if (!dbox__hitbutton(d, e->data.key.chcode - (akbd_Sh | akbd_Fn+1)))
            wimp_processkey(e->data.key.chcode);
          break;

      case akbd_Fn10:
      case akbd_Fn11:
          if (!dbox__hitbutton(d, e->data.key.chcode - akbd_Fn10 + 9))
            wimp_processkey(e->data.key.chcode);
          break;

      case akbd_Sh | akbd_Fn10:
      case akbd_Sh | akbd_Fn11:
          if (!dbox__hitbutton(d, e->data.key.chcode - (akbd_Fn10 | akbd_Sh) + 9))
            wimp_processkey(e->data.key.chcode);
          break;

      case 13: /* return key */
#if 0
          if (find_next_field(d, d->current + 1, match_Writeable) == -1)
#endif
          {
             dbox_field def = find_default_action(d);
             if (def != -1)
             {
               lock_repeat();
               dbox__buttonclick(d, def, FALSE);
             }
             else
               dbox__buttonclick(d, e->data.key.c.i, FALSE);
          }
#if 0
          else
             moveto_next_match(d, match_Writeable);
#endif
          break;
      case 27: /* ESC key */
          dbox__buttonclick(d, dbox_CLOSE, FALSE);
          break;

      default:
        {
          dbox_field field;
          if ((field = dbox_matchchar(d, e->data.key.chcode)) != -1)
          {
            lock_repeat();
            do_buttonclick(d, field);
          }
          else
            wimp_processkey(e->data.key.chcode);
        }
      };
      break;

  case wimp_ESEND:
  case wimp_ESENDWANTACK:
        switch (e->data.msg.hdr.action)
        {
          case wimp_MHELPREQUEST:
          {
            char buffer[16];
            sprintf(buffer, "H%s", d->t->name);
            help_reply(icon_generatehelp(d->w, e->data.msg.data.helprequest.m.i, buffer));
            break;
          }
        }
        break;

  default:
      /* do nothing */
      break;
  }
}

/* -------- New and Dispose. -------- */

dbox dbox_new_fromtemplate(void *tmpl)
{
  dbox d = dbox__fromtemplate(tmpl);
  if (d == 0) {
    werr(0, DBOX_ERROR, 1);
    return 0;
  };
  d->next = 0;
  d->posatcaret = (wimp_WTRESPASS & d->t->window.flags) != 0;
  d->t->window.flags &= ~wimp_WTRESPASS;
  { os_error *er;
    wimp_eventstr *e = wimpt_last_event();
    if ((e->e == wimp_ESEND || e->e == wimp_ESENDWANTACK) &&
        e->data.msg.hdr.action == wimp_MMENUWARN)
      d->t->window.colours[wimp_WCTITLEHI] = wcol_TitleBG;
    er = wimp_create_wind(&d->t->window, &d->w);
    if (er != 0) {
      werr(FALSE, &er->errmess[0]);
      dbox__dispose(d);
      return 0;
    };
  };
  d->eventproc = 0;
  d->raweventproc = 0;
  d->disposepending = 0;
  d->eventdepth = 0;
  d->fieldwaiting = 0;
  d->field = 0;
  d->showing = 0;
  win_register_event_handler(d->w, dbox__wimp_event_handler, d);

  return d;
}

dbox dbox_new(const char *name)
{
 return dbox_new_fromtemplate(template_find((char *)name));
}

static wimp_w dbox__submenu = 0;

/* This is complicated by the following case: if the show is as a result
of a submenu message (e.g. that was the last message received) then we
open the dbox as a submenu rather than as a standalone window. */

static void dbox__doshow(dbox d, BOOL isstatic, wimp_openstr *op)
{
  wimp_mousestr m;
  wimp_caretstr c;
  wimp_openstr o;
  wimp_wstate s;
  wimp_eventstr *e;

  if (d->showing) return;
  d->showing = TRUE;
  win_activeinc();

  e = wimpt_last_event();
  if (e->e == wimp_ESEND && e->data.msg.hdr.action == wimp_MMENUWARN) {
    /* this is a dbox that is actually part of the menu tree. */
    dbox__submenu = d->w; /* there's only ever one. */
    wimp_create_submenu(
      (wimp_menustr*) d->w,
      e->data.msg.data.words[1],
      e->data.msg.data.words[2]);
  } else {
    if (op)
      o = *op;
    else
    {
      o.box = d->t->window.box;
      if (d->posatcaret) {
        /* move to near the caret. */
        if (wimpt_last_event_was_a_key()) {
          wimpt_noerr(wimp_get_caret_pos(&c));
          if (c.w != (wimp_w) -1) {
            wimpt_noerr(wimp_get_wind_state(c.w, &s));
            c.x = c.x + (s.o.box.x0 - s.o.x);
            c.y = c.y + (s.o.box.y1 - s.o.y);
          };
          m.x = c.x + 100; /* a little to the right */
          m.y = c.y - 120; /* a little down */
        } else {
          wimpt_noerr(wimp_get_point_info(&m));
          m.x -= 48; /* try to be a bit into it. */
          m.y += 48;
        };
        {
          int height = (o.box.y1 - o.box.y0);
          o.box.y0 = m.y - height;
          if (o.box.y0 <= 96)
            o.box.y0 = 96;
          o.box.x1 = m.x + (o.box.x1 - o.box.x0);
          o.box.y1 = o.box.y0 + height;
          o.box.x0 = m.x;
        }
      };
      o.x = d->t->window.scx;
      o.y = d->t->window.scy;
      o.behind = (wimp_w) -1;
    }

    o.w = d->w;

    if (isstatic) {
      wimpt_noerr(wimp_open_wind(&o));
    } else {
      dbox__submenu = d->w; /* there's only ever one. */
      wimp_create_menu((wimp_menustr*) d->w, o.box.x0, o.box.y1);
    };

  };
}

void dbox_show(dbox d) {
  dbox__doshow(d, FALSE, NULL);
}

void dbox_showstatic(dbox d) {
  dbox__doshow(d, TRUE, NULL);
}

void dbox_showstaticat(dbox d, void *op) {
  dbox__doshow(d, TRUE, op);
}

void dbox_registershow(dbox d, void *o)
{
  if (!d->showing)
  {
    wimp_openstr *op = o;
    d->t->window.scx = op->x;
    d->t->window.scx = op->y;
    d->t->window.box = op->box;
    d->showing = TRUE;
    win_activeinc();
  }
}

void dbox_hide(dbox d)
{
  if (! d->showing) {
  } else {
    d->showing = FALSE;
    win_activedec();
    if (d->w == dbox__submenu) {
      wimp_wstate ws;
      wimpt_noerr(wimp_get_wind_state(d->w, &ws));
      dbox__submenu = 0;
      if ((ws.flags & wimp_WOPEN) == 0) {
        /* The dbox has been closed: presumably by the wimp. */
        /* Thus, there is nothing more to do. */
      } else {
        /* The dbox was closed without the menu tree knowing about it. */
        event_clear_current_menu();
        /* That will cause the menu system to close the dbox. */
      };
    } else {
      wimpt_noerr(wimp_close_wind(d->w));
    };
  };
}

void dbox_dispose(dbox *dd)
{
  dbox d = *dd;
  if (d->showing) dbox_hide(d);
  if (d->eventdepth != 0) {
    d->disposepending = 1;
  } else {
    dbox__dodispose(d);
  };
}

/* -------- Event processing. -------- */

/* We cheerfully allow the caret to go elsewhere, but we intercept any
keystroke events and divert them to the dbox. This allows e.g. find commands
to see where in the text they've got to so far. dboxes with no fill-in fields
do not even try to get the caret. */

static dbox_field dbox_fillin_loop(dbox d)
{
  wimp_eventstr e;
  int harmless;
  dbox_field result;
  wimp_wstate ws;

  while (1) {
    int null_at;
    if (alarm_next(&null_at) && (event_getmask() & wimp_EMNULL) != 0)
    {
        wimpt_complain(wimp_pollidle(event_getmask() & ~wimp_EMNULL, &e, null_at));
    }
    else 
    {
        wimpt_complain(wimp_poll(event_getmask(), &e));
    }

    if (d->w == dbox__submenu) {
      wimpt_noerr(wimp_get_wind_state(d->w, &ws));
      if ((ws.flags & wimp_WOPEN) == 0) {
        wimpt_fake_event(&e); /* stuff it back in the queue */
        if (e.e == wimp_EREDRAW) event_process();
        return dbox_CLOSE;
      };
    };

    switch (e.e) {
    case wimp_ENULL:
    case wimp_EREDRAW:
    case wimp_EPTRENTER:
    case wimp_EPTRLEAVE:
    case wimp_ESCROLL:
    case wimp_EOPEN:
    case wimp_EMENU:
    case wimp_ELOSECARET:
    case wimp_EGAINCARET:
    case wimp_EUSERDRAG:
        harmless = TRUE;
        break;
    case wimp_ECLOSE:
        harmless = e.data.o.w == d->w;
        break;
    case wimp_EKEY:
        /* Intercept all key events. */
        if (e.data.key.c.w != d->w) {
          e.data.key.c.w = d->w;
          e.data.key.c.i = (wimp_i) -1;
        };
        harmless = 1;
        break;
    case wimp_EBUT:
        if (e.data.but.m.w == d->w)
          harmless = TRUE;
        else if (e.data.but.m.w <= 0)
          harmless = FALSE;
        else
        {
          wimp_wstate state;
          wimpt_noerr(wimp_get_wind_state(e.data.but.m.w, &state));
          harmless = (state.flags & wimp_WPANE) != 0;
        }  
        break;
    case wimp_ESEND:
    case wimp_ESENDWANTACK:
    case wimp_EACK:
        harmless = TRUE;
        if (e.data.msg.hdr.action == wimp_MPREQUIT) harmless = FALSE;
        break;
    default:
        harmless = 0;
    };
    if (harmless) {

      wimpt_fake_event(&e);
      event_process();
    } 
    else {
      wimpt_fake_event(&e); /* stuff it back in the queue */
      result = dbox_CLOSE;
      break;
    };
    /* And keep going round until he presses a button. */
    if (d -> fieldwaiting) {result = dbox_get((dbox) d); break;};
  }; /* loop */

  return(result);
}

dbox_field dbox_fillin(dbox d)
{
  dbox_field f = find_writeable(d, 0);

  if (f != -1)
      select_field(d, f);

  return dbox_fillin_loop(d);
}

dbox_field dbox_fillin_fixedcaret(dbox d)
{
   return dbox_fillin_loop(d);
}

   

dbox_field dbox_popup(const char *name, const char *message)
{
  dbox_field result;
  dbox d = dbox_new(name);
  dbox_setfield(d, 1, message);
  dbox_show(d);
  result = dbox_fillin(d);
  dbox_dispose(&d);
  return(result);
}

BOOL dbox_persist(void) {
  wimp_mousestr m;
  wimpt_noerr(wimp_get_point_info(&m));
  return (m.bbits & wimp_BRIGHT) != 0 || last_event_was_onoff || akbd_pollsh();
}
 

/* -------- System Hook. -------- */

int dbox_syshandle(dbox d)
{
  return(d->w);
}

/* -------- Initialisation. -------- */

void dbox_init(void)
{
  if (template_loaded() == FALSE)
    werr(TRUE, DBOX_ERROR, 0);
}

/* end */
