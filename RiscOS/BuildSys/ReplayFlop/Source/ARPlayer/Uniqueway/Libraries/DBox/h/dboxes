/* > h.dboxes 

 */

#ifndef __dboxes_h
# define __dboxes_h
 
#ifndef __dbox_h
# include "dbox.h"
#endif

#ifndef __wimp_h
# include "wimp.h"
#endif

#ifndef __time_h
# include <time.h>
#endif

/* From dboxes.c */

extern BOOL got_caret(dbox d);
extern BOOL dboxes_gotcaret(dbox d, dbox_field *f);
extern BOOL set_validstring(dbox d, dbox_field field, const char *str);
extern BOOL lastkey_or_button(int key, dbox_field field);
extern void fake_buttonpress(const wimp_w w, wimp_i i);
extern void fillin_icon(const wimp_box *bp);
extern BOOL icon_needs_redraw(const wimp_redrawstr *rp, wimp_i i, wimp_box *outbox);

/* From dboxes2.c */

/*
 * Given an ESG number returns the icon number of the first field
 * selected. Returns -1 if no field selected
 */

extern dbox_field find_which_selected(dbox d, int esg);
#define dbox_whichselected(d,esg) find_which_selected(d,esg)

/*
 * uses localtime and the given format string (see <time.h>) to
 * construct a time and then dbox_setfield().
 */

extern void dboxes_settimefield(dbox d, dbox_field f, const char *fmt, time_t t);
#define dbox_settimefield(d,f,fmt,t) dboxes_settimefield(d, f, fmt, t);

/*
 * Does sprintf(buffer, fmt, ...) folloed by dbox_setfield(,,buffer);
 * max buffer size of 256 characters
 */

extern void dboxes_setfieldf(dbox d, dbox_field f, const char *fmt, ...);
#define dbox_setfieldf dboxes_setfieldf

/*
 * Does dbox_fadefield() or dbox_unfadefield()
 * depending on the state of 'fade'
 */

extern void set_fade_state(dbox d, dbox_field field, BOOL fade);
#define dbox_fadestate(d,f,fade) set_fade_state(d,f,fade)

/*
 * Reads the length of the data in the field. Reallocates the
 * string pointed to by *s_out (usong realloc()) and copies the
 * data into the new string.
 * Returns pointer to the new string.
 */

extern char *dbox_getxfield(dbox d, dbox_field f, char **s_out);

/*
 * Deletes or undeletes a block of icons, ensuring redraw at the same time.
 * Loses caret if necessary.
 */

extern void dbox_deleteblock(dbox d, dbox_field from, dbox_field to, BOOL deleted);

/*
 * Toggles a fields characteristics between writeable and display.
 * Affects the button type, the background colour and border type.
 * Also loses the caret if necessary.
 */

extern void dbox_setwriteable(dbox d, dbox_field f, BOOL writeable);

/*
 * Returns TRUE if caret is in this dbox
 */

extern BOOL dbox_gotcaret(dbox d);

/*
 * As dbox_setnumeric/getnumeric but useing double values.
 * set uses sprintf(%g), get uses strtod()
 */

extern double dbox_getdouble(dbox d, dbox_field f);
extern void dbox_setdouble(dbox d, dbox_field f, double val);

#endif

/* eof h.dboxes */
