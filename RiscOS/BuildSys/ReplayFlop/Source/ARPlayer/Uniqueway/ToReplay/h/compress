/* > compress.h

 * © SJ Middleton, 1993

 */

#ifndef __compress_h
# define __compress_h

#ifndef __armovie_h
# include "armovie.h"
#endif

#ifndef __spr_h
# include "spr.h"
#endif

#ifndef __array_h
# include "array.h"
#endif

#ifndef __opt_h
# include "opt.h"
#endif

#define APP_TITLE           "AREncode"
#define VERSION_NUMBER      61

#define LATENCY_UNIT        100

#define FILES_PER_DIR       77
#define FILES_PER_IMAGEDIR  77

#define WORKROOT_DIRVAR     APP_TITLE"$WorkDir"
#define WORKROOT_DIR        "<"APP_TITLE"$WorkDir>"

enum
{
    fixby_Quality,
    fixby_Size,
    fixby_Bandwidth
};

typedef enum
{
    differ_FixBy            = 0x0000000f,
    differ_LimitARM2        = 0x00000010,
    differ_FastMatch        = 0x00000020,
    differ_DoubleBuffers    = 0x00000040,
    differ_KeyFrames        = 0x00000080
} differ_flag;

typedef struct
{
    differ_flag opts;

    int quality;

    int frame_size;     /* bytes */

    int data_rate,      /* K/s */
        latency;        /* cs */
} differ_options;

typedef enum
{
    compress_SingleTask     = 0x00000001,
    compress_StartAt        = 0x00000002,
    compress_UseIndex       = 0x00000004,
    compress_JoinKeyFrames  = 0x00000008,
    compress_ARMovieSound   = 0x00000010,
    compress_Batch          = 0x00000020,
    compress_CompressAudio  = 0x00000040,
    compress_DeleteFiles    = 0x00000080
} compress_flag;

typedef struct
{
    char    name[11];
    char    position;
} filter_entry;

typedef struct
{
    differ_options  differ;

    compress_flag   flags;

    int     compressor;         /* replay format type */

    char    screen_mode[32];    /* if in single-tasking mode */
    int     start_at;           /* frames */

    int     frames_per_chunk,
            frame_rate_divisor;

    int     index;

    array   filters;
} compress_options;

/*
typedef enum
{
    track_CompressADPCM = 0x01
} track_flag;
 */

typedef struct
{
    armovie_soundstr    *sound;
    int                 ntracks;
    char                *filename;
/*  track_flag          flags; */
} sound_trackstr;

typedef struct
{
    int     video_format;
    int     frames_per_chunk;
    double  fps;
} inuse_str;

typedef struct
{
    compress_options    o;

    char    *input_file,    /* as dropped by the user */
            *work_dir,
            *output_file;

    char    *input_leaf;                /* points within input_file */

    int     input_filetype;                                 

    armovie_hdr *hdr;           /* file as loaded */

    array       srcfile;
    int         nsoundtracks;

    spr_area    sprite;

    inuse_str   inuse;
} compress_str;


typedef struct
{
    compress_flag   flags;      /* only use keys, use index and compress audio */
    char        *input_leaf;
    char        *work_dir;
    int         index;

    array       srcfile;

    BOOL        open_saveas;    /* shall we open saveas window when join is completed */

    char        *joined_file;   /* location we are joining to */

    compress_str    *compress;  /* link back to caller */
} join_str;

/* From compress.c */

extern void compress_dispose(void);
extern void compress_open(compress_str *cp);
extern BOOL is_compress_open(void);
extern BOOL is_compress_available(const compress_str *cp);
extern void compress_init(void);
extern void compress_readoptions(compress_str *cp);

/* From calldiffer.c */

extern const char *index_string(const compress_str *cp);
extern void calldiffer_join(const char *filename, join_str *jp);
extern BOOL calldiffer_start(compress_str *cp);
extern BOOL calldiffer_restart(compress_str *cp);
extern BOOL calldiffer_busy(void);

extern BOOL calljoiner_start(compress_str *cp, const char *output_file);

extern BOOL has_differ_started(const compress_str *cp);
extern BOOL is_differ_continuable(const compress_str *cp);
extern BOOL can_join(const compress_str *cp);

/* From cvtwin.c */

extern void cvt_popup(compress_str *cp);

extern BOOL cvtwin_saveas(compress_str *cp);
extern BOOL cvtwin_saveandjoin(compress_str *cp);
extern void cvtwin_saveas_dispose(compress_str *cp);
extern void cvtwin_joined(compress_str *cp, const char *joined_file);

extern BOOL unsaved_movie_exists(void);
extern void delete_files(const char *root);

/* From hdrwin.c */

extern void hdr_open(compress_str *cp);
extern void hdr_refresh(const compress_str *cp);
extern void hdr_dispose(void);
extern BOOL is_hdr_open(void);
extern BOOL batch_process(compress_str *cp);
extern void hdr_readoptions(compress_str *cp);

extern void cvt_import(compress_str *cp);
extern void cvt_load(compress_str *cp, const char *filename);
extern void cvt_scan(compress_str *cp);

/* From prefs.c */

extern void preferences_save(compress_options *cp);
extern void preferences_load(compress_options *cp);

extern BOOL state_write(compress_str *cp);
extern BOOL state_read(compress_str *cp);

/* From main.c */

extern BOOL check_import(compress_str *cp);

/* From tracks.c */

extern void tracks_open(compress_str *cp);
extern void tracks_dispose(void);
extern BOOL is_tracks_open(void);
extern void tracks_refresh(compress_str *cp);

/* track manipulation routines */

#define NSRCFILES(a)        (array_size(a))
#define SRCFILE_PTR(a,n)    ((sound_trackstr *)array_ptr((a), (n)))

extern void srcfile_deleteall(array src);
extern int srcfile_delete(array src, int entry);
extern BOOL srcfile_insert(array src, int entry, int n);
extern int srcfile_copy(array src, int entry, const char *filename,
                        const armovie_soundstr *sound, int ntracks);
extern BOOL srcfile_scanforcompression(array src);

extern int tracks_read(optfile of, array srcfile);
extern void tracks_write(optfile of, int code, array srcfile);

/* Filter control */

extern void filters_init(void);
extern BOOL is_filters_open(void);
extern void filters_dispose(void);
extern void filters_open(compress_str *cp);
extern BOOL is_filters_available(void);
extern void filters_refresh(compress_str *cp);
extern void filters_deleteall(array filters);

extern void filters_write(optfile of, int code, array filters);
extern void filters_read(optfile of, array filters);

#endif

/* eof compress.h */
