/* > c.main

 *
 * © SJ Middleton, 1993

 * AREncode - takes uncompressed ARMovies and pass them through Differ & Joiner

 */


#include "baricon.h"
#include "dbox.h"
#include "dboxquery.h"
#include "event.h"
#include "fileract.h"
#include "filereason.h"
#include "flex.h"
#include "heap.h"
#include "help.h"
#include "menu.h"
#include "msgs.h"
#include "os.h"
#include "res.h"
#include "res_spr.h"
#include "saveas.h"
#include "strfn.h"
#include "swis.h"
#include "tasksum.h"
#include "template.h"
#include "visdelay.h"
#include "werr.h"
#include "wimpx.h"
#include "wimpt.h"
#include "win.h"
#include "xferrecv.h"

#include <locale.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"
#include "macros.h"
#include "wmisc.h"

#include "compress.h"

#define TASK_TITLE              msgs_lookup("taskname")

#define ICONBAR

#define NOT_WHILST_UNSAVED      msgs_lookup("main0")
#define NOT_WHILST_TASKING      msgs_lookup("main1")
#define CANT_QUIT_WITH_TASKS    msgs_lookup("main3")
#define UNSAVED_FILE            msgs_lookup("main4")

#define filetype_Directory      0x1000

/* -------------------------------------------------------------------------------------- */

static BOOL check_quit(compress_str *cp);

/* -------------------------------------------------------------------------------------- */

static compress_options default_cvtoptions =
{
    {
        fixby_Bandwidth | differ_LimitARM2 | differ_KeyFrames,
        7,
        5800,
        150,
        40
    },
    compress_SingleTask | compress_JoinKeyFrames | compress_ARMovieSound | compress_DeleteFiles,
    1,      /* compressor */
    "36",   /* screen mode */
    0,      /* start at */
    25,     /* frames per chunk */
    1,      /* fsr */
    1       /* index */
};

static compress_str cvtblk = { 0 };

/*
static join_str joinblk =
{
    compress_KeyFrames
};
 */

static wimp_i  toreplay_icon;

/* -------------------------------------------------------------------------------------- */

#define ICON_MENU_PREFIX        "IMENU"
#define ICONBAR_MENU            msgs_lookup("imenu")
#define ICON_HELP               msgs_lookup("ICON")

static void iconbar_loadproc(wimp_eventstr *e, void *handle)
{
    compress_str *cp = handle;
    char *filename;
    int estsize,
        filetype = xferrecv_checkinsert(&filename);
    if (filetype == filetype_ARMovie || filetype == filetype_Directory)
    {
        if (check_import(cp))
        {
            cvt_load(cp, filename);
            xferrecv_insertfileok();
        }
    }
    else if (xferrecv_checkimport(&estsize) == filetype_ARMovie)
    {
        if (check_import(cp))
            cvt_import(cp);
    }
    else if (wmisc_helprequest(toreplay_icon))
        help_reply(ICON_HELP);

    UNUSED(handle);
    UNUSED(e);
}

/* -------------------------------------------------------------------------------------- */

enum
{
    mmenu_Info = 1,
    mmenu_SaveOptions,
    mmenu_Quit
};

static menu mmenu;

static void mmenuproc(void *handle, char *hit)
{
    switch (hit[0])
    {
        case mmenu_Info:
            if (wimpt_last_event()->e != wimp_EMENU)
                wmisc_popup_info(VERSION_NUMBER, __DATE__);
            break;

        case mmenu_SaveOptions:
            hdr_readoptions(&cvtblk);
            compress_readoptions(&cvtblk);
            preferences_save(&cvtblk.o);
            break;

        case mmenu_Quit:
            if (check_quit(&cvtblk))
            {
                wmisc_flushevents();
                wmisc_losecaret();
                exit(EXIT_SUCCESS);
            }
            break;
    }
    UNUSED(handle);
}


static menu makemenus(void *handle)
{                
    help_register_handler(help_simplehandler, ICON_MENU_PREFIX);
    return mmenu;
    UNUSED(handle);
}


static BOOL init_iconbar_menu(void)
{
    if ((mmenu = menu_new(APP_TITLE, ICONBAR_MENU)) == NULL)
        return FALSE;

    if (!event_attachmenumaker(win_ICONBAR, makemenus, mmenuproc, 0))
        return FALSE;

    return TRUE;
}

/* -------------------------------------------------------------------------------------- */

static void iconclick(wimp_i icon)
{                               
    wimp_eventstr *e = wimpt_last_event();
    if (e->e == wimp_EBUT && e->data.but.m.bbits & wimp_BRIGHT)
        compress_open(&cvtblk);
    else
        hdr_open(&cvtblk);
    UNUSED(icon);
}

static BOOL unknown_events(wimp_eventstr *e, void *handle)
{
    return help_process(e);
    UNUSED(handle);
}

/* -------------------------------------------------------------------------------------- */

BOOL check_import(compress_str *cp)
{
    if (calldiffer_busy())
    {
        werr(0, NOT_WHILST_TASKING);
        return FALSE;
    }

    return TRUE;
    UNUSED(cp);
}

/* -------------------------------------------------------------------------------------- */

/* exit checks */

static BOOL differ_busy, unsaved_movie;

static BOOL check_halt(wimp_eventstr *e, void *handle)
{
    differ_busy = calldiffer_busy();
    unsaved_movie = unsaved_movie_exists();

    return differ_busy || unsaved_movie;
    UNUSED(e);
    UNUSED(handle);
}

#if 0


static BOOL delete_all, preserve_all;
static char *files_to_delete;

#define DELETE_IDENT    "querydel"

#define NAME_FIELD          4
#define CANCEL_FIELD        2
#define DELETE_FIELD        3
#define PRESERVE_FIELD      6
#define DELETE_ALL_FIELD    1
#define PRESERVE_ALL_FIELD  0

/*
 * Return TRUE to continue with delete scan
 * Return FALSE to abort scan.
 */

static int work_scanfn(const char *filename, int filetype, int size, void *handle)
{
    dbox d = handle;
    if (filetype == filetype_Directory)
    {
        BOOL delete_this = FALSE;
        char *leaf = file_leaf(filename, NULL);

        if (preserve_all)
            skip();
        else if (delete_all)
            delete_this = TRUE;
        else
        {
            dbox_field action;
            dbox_setfield(d, NAME_FIELD, leaf);
    
            action = dbox_fillin(d);
            switch (action)
            {
                case dbox_CLOSE:
                case CANCEL_FIELD:
                    return FALSE;
    
                case DELETE_FIELD:
                    delete_this = TRUE;
                    break;
    
                case PRESERVE_FIELD:
                    break;
    
                case PRESERVE_ALL_FIELD:
                    preserve_all = TRUE;
                    break;
    
                case DELETE_ALL_FIELD:
                    delete_this = TRUE;
                    delete_all = TRUE;
                    break;
            }
        }
        if (delete_this)
        {
            if (files_to_delete)
            {
                strcatx(&files_to_delete, " ");
                strcatx(&files_to_delete, leaf);
            }
            else
                files_to_delete = strdup(filename);
        }
    }
    return TRUE;
    UNUSED(size);
    UNUSED(handle);
}

static BOOL check_delete(compress_str *cp)
{
    BOOL    continue_exit = FALSE;
    dbox    d;
    if ((d = dbox_new(DELETE_IDENT)) != NULL)
    {
        wimp_caretstr cs, cs2;

        dbox_show(d);

        wimp_get_caret_pos(&cs);
        dbox_setcaret(d, -1);

        delete_all = preserve_all = FALSE;
        files_to_delete = NULL;
        continue_exit = file_scandir(cp->workroot_dir, FALSE, work_scanfn, d);

        if (files_to_delete && continue_exit)
        {
            char *s = strtok(files_to_delete, " ");
            if (s)
            {
                wimp_t task = fileract_sourcefile(s);

                if (task) while ((s = strtok(NULL, " ")) != NULL)
                    os_err(fileract_sendfile(task, s));

                os_err(fileract_start(task, fileract_Delete, fileract_Verbose, NULL));
            }
        }
        free(files_to_delete);

        wimp_get_caret_pos(&cs2);
        if (cs2.w == dbox_syshandle(d))
            wimp_set_caret_pos(&cs);

        dbox_dispose(&d);
    }
    return continue_exit;
}

#endif

/*
 * Return TRUE if we want to resume the exit procedure
 * Return FALSE to abort exit and continue running program.
 */

static BOOL check_resume(wimp_eventstr *e, void *handle)
{
    compress_str *cp = handle;
    if (differ_busy)
    {
        werr(0, CANT_QUIT_WITH_TASKS);
        return FALSE;
    }

    if (unsaved_movie) switch (dboxclosef(UNSAVED_FILE))
    {
        case dboxclose_Save:
            break;

        case dboxclose_Discard:
            cvtwin_saveas_dispose(cp);
            break;

        default:
            return FALSE;
    }

    return TRUE;
    UNUSED(e);
}

static BOOL check_quit(compress_str *cp)
{
    return !check_halt(NULL, cp) || check_resume(NULL, cp);
}

/* -------------------------------------------------------------------------------------- */

static wimp_msgaction wimpmsgs[] =
{
  wimp_MDATASAVE,
  wimp_MDATASAVEOK,
  wimp_MDATALOAD,
  wimp_MDATALOADOK,
  wimp_MRAMFETCH,
  wimp_MRAMTRANSMIT,
  wimp_MMENUWARN,
  wimp_MMODECHANGE,
  wimp_MHELPREQUEST,
  wimp_MDATAOPEN,
  wimp_SAVEDESK,
  wimp_MCLOSETASK,
  0
};

static void cleanup(void)
{
    _swix(Hourglass_Smash, 0);
    remove(WORKROOT_DIR);
}

static BOOL main_initialise(int argc, char *argv[])
{
    setlocale(LC_ALL, "");
    setbuf(stderr, NULL);

    /* RISC_OSlib initialisation */

    visdelay_init();
    visdelay_begin();
    atexit(cleanup);

    res_init(APP_TITLE);            /* Resources */
    msgs_init();

    wimpt_wimpmsgs(wimpmsgs);
    wimpt_wimpversion(310);
    wimpt_postmortem(argc > 1 && strcmp(argv[1], "-p") == 0);
    if (wimpt_init(TASK_TITLE) > 320)         /* Main Wimp initialisation */
        werr__registersprite("!"APP_TITLE, (void *)1);

    visdelay_init();

    resspr_Init();                  /* Some application sprites */
    template_init();                /* Templates */
    dbox_init();                    /* Dialogue boxes */
    flex_Init(TASK_TITLE);
    heap_init(TRUE);

    wmisc_init();

    compress_init();
    filters_init();     /* must be before prefs load */ 

    cvtblk.o = default_cvtoptions;
    cvtblk.o.filters = array_new(0, sizeof(filter_entry), h_alloc, h_free);

    preferences_load(&cvtblk.o);

    cvtblk.sprite = spr_area_Init(f_alloc, f_free, "default sprite");
    cvtblk.srcfile = array_new(0, sizeof(sound_trackstr), h_alloc, h_free);

/* Set up the icon on the icon bar, and declare its event handlers */
    toreplay_icon = baricon(wimp_spriteanchor, "!"APP_TITLE, iconclick);

    win_register_event_handler(win_ICONBARLOAD, iconbar_loadproc, &cvtblk);

    init_iconbar_menu();

    wmisc_installquithandler(check_halt, check_resume, &cvtblk);

    win_add_unknown_event_processor(unknown_events, NULL);

    tasksum_registermemfns(f_alloc, f_free);

    visdelay_end();

    return TRUE;
}

/******************************* MAIN PROGRAM ********************************/

/*--- Main entry point. ---*/

int main(int argc, char *argv[])
{
    if (main_initialise(argc, argv))
    {
        while (TRUE)
            event_process();
    }
    UNUSED(argc);
    UNUSED(argv);
}

/* eof c.main */
