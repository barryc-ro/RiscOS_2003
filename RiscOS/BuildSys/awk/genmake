# genmake:
#
# Notes:
#    Only the 1st 4 fields of each Component line are used by this script
#
BEGIN {
    i = 1
}

{
    if (index($0, "#") == 0)              # Only process non-comment lines
    {
        if (NF >= 3) {                    # legal entries have three or more fields
            Name[i]   = $1
            Type[i]   = $2
            Source[i] = $3
            if (NF == 3)
                Install[i] = ""
            else
                Install[i] = $4
            i++
        }
        if (index($1, "Messages") != 0)
            MsgDir = $3
    }
}

END {
    printf("# System Makefile\n\n")

    printf("CD      = dir\n")
    printf("MKDIR   = cdir\n")
    printf("SYSDIR  = <build$dir>.BuildSys\n")
    printf("SRCDIR  = <src$dir>\n")
    printf("INSTDIR = <install$dir>\n")
    printf("MSGDIR  = ${SRCDIR}.%s\n", MsgDir)
    printf("RESDIR  = ${MSGDIR}.Resources.<Locale>.<System>.Resources\n")
    printf("MAKE    = @amu ${MFLAGS} RESDIR=${RESDIR}\n")
    printf("\n")

    ncomp = i-1

    printf("BUILD =")
    for (i=ncomp; i>0; i--)
        if ((Install[i] != "") && (index(Name[i], "ROMImage") == 0))
            printf(" \\\n %s", Name[i])
    printf("\n\n")

    printf("EXPORT =")
    for (i=ncomp; i>0; i--)
        if (index(Type[i], "EXP") != 0)
            printf(" \\\n %s", Name[i])
    printf("\n\n")

    printf("RESOURCE =")
    for (i=ncomp; i>0; i--)
        if (index(Type[i], "RES") != 0)
            printf(" \\\n %s", Name[i])
    printf("\n\n")

    printf("#\n")
    printf("# Build rules:\n")
    printf("#\n")

    printf("clean: ${BUILD}\n")
    printf("        @echo clean: Complete\n\n")

    printf("export: ${BUILD} ${EXPORT} dirs\n")
    printf("        @echo export: Complete\n\n")

    printf("resources: ${BUILD} ${RESOURCE} dirs\n")
    printf("        @echo resources: Complete\n\n")

    printf("# rom build\n")
    printf("rom: ${BUILD} dirs\n")
    printf("        @echo rom: Complete\n\n")

    printf("install_rom: ROMImage\n")
    printf("        @echo install_rom: Complete\n\n")

    printf("# disc build\n")
    printf("all: ${BUILD}\n")
    printf("        @echo all: Complete\n\n")

    printf("install: ${BUILD}\n")
    printf("        @echo install: Complete\n\n")

    printf("dirs:\n")
    printf("        set Resource$Dir ${MSGDIR}.Resources.<Locale>.<System>\n")
    printf("        ${MKDIR} <install$dir>\n")
    printf("        ${MKDIR} <build$dir>.Export\n")
    printf("        ${MKDIR} <build$dir>.Export.Hdr\n")
    printf("        ${MKDIR} <build$dir>.Export.Hdr.Global\n")
    printf("        ${MKDIR} <build$dir>.Export.Hdr.Interface\n")
    printf("        ${MKDIR} <build$dir>.Export.Hdr.Interface2\n")
    printf("        ${MKDIR} <build$dir>.Export.Lib\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources.${LOCALE}\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources.${LOCALE}.${SYSTEM}\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources.${LOCALE}.${SYSTEM}.Resources\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources.${LOCALE}.${SYSTEM}.Resources2\n")
    printf("        ${MKDIR} ${MSGDIR}.Resources.${LOCALE}.${SYSTEM}.Apps")
    printf("\n")

    printf("#\n")
    printf("# Component rules:\n")
    printf("#\n\n")

    for (i=1; i<=ncomp; i++)
    {
        if (index(Name[i], "ROMImage") == 1)
            printf("ROMImage: ${BUILD}\n")
        else
            printf("%s:\n", Name[i])
        printf("        @echo $@ ...\n")

        ndirs = split(Install[i], dirs, ".")

        for (j=1; j<=ndirs; j++)
        {
            printf("        @${MKDIR} ${INSTDIR}")
            for (k=1; k<=j; k++)
                printf(".%s", dirs[k])
            printf("\n")
        }

        if (index(Name[i], "ROMImage") == 1)
            printf("        @${CD} ${SYSDIR}.%s\n", Source[i])
        else
            printf("        @${CD} ${SRCDIR}.%s\n", Source[i])
        if (Install[i] == "")
            printf("        ${MAKE}\n")
        else
            printf("        ${MAKE} INSTDIR=${INSTDIR}.%s\n", Install[i])
        printf("\n")
    }
}
