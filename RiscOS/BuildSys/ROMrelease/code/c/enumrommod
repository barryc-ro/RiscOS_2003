
/* enumrommod.c - enumerate system ROM modules, via OS_Module 20
                  and nefarious backtracing  */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define MaxBackTraceWords 16*1024

typedef unsigned int uint32;

typedef struct
{
  uint32   start;
  uint32   init;
  uint32   final;
  uint32   service;
  uint32   title;
  uint32   help;
} mod_t;


static mod_t *backtrace_modulestart(char *nameptr)
{
  mod_t  *mp = NULL;
  int    i;
  uint32 off,p0,x,*p;

  p0 = ((uint32)nameptr) & 0xfffffffc;
  x  = 16 + (((uint32)nameptr) & 3);

  p = (uint32 *)p0;
  i = 0;
  do
  {
    off = *--p;
//printf("%8.8x %8.8x %8.8x\n",(uint32)p,off,p0 - ((uint32)p) + x);
    i++;
  } while ((off != p0 - ((uint32)p) + x) && (i < MaxBackTraceWords));

  if (i < MaxBackTraceWords) mp = (mod_t *)(p-4);

  return mp;
}

int main(void)
{
  int             modnum,section,version;
  char            *modname,*hstring;
  char            desc[64],ver[64],comm[64];
  mod_t           *mp = NULL;
  _kernel_oserror *e;

  printf("No.  Position    Module Title            Module Desc.      Ver. Date          Comment\n\n");

  modnum  = 0;
  section = -1;
  do
  {
    e = _swix(OS_Module,_INR(0,2)|_OUTR(1,3)|_OUT(6),20,modnum,section,
              &modnum,&section,&modname,&version);
    if (e || (section != -1)) break;
    mp = backtrace_modulestart(modname);
    if (!mp)
    {
      fprintf(stderr,"couldn't find start of module\n");
      exit(1);
    }
    hstring = (((char *)mp)+mp->help);
    comm[0] = '\0';
    sscanf(hstring,"%[^\t]\t%[^\t]\t%[^\t]",desc,ver,comm);
    printf("%3d System ROM   %-24s%-18s%6s %s\n",modnum,modname,desc,
           ver,comm);
  } while (1);
    

  return 0;
}
