
/* romcrc.c */

/* print out Samsung-style CRC's for the 8x4MBit, 8-bit wide EPROMs that make
   up the 2x16MBit, 16-bit wide target ROMs for manufacture */

/* also print out DATAI/O-style checksums, which are just the full 32-bit
   versions of the Samsung 16-bit sums */

#include <stdio.h>
#include <stdlib.h>

#include "swis.h"

#define PartNo_1 "1203,261-01"
#define PartNo_2 "1203,262-01"

#define OS_xid   0xa7
#define OS_name  "RISC OS 3.71"


/* read directly from RISC OS ROM we are running on */
#define ROMstart 0x3800000


static unsigned char *rom = (unsigned char *)ROMstart;


static char *crc(unsigned char *rom, int addr, int words)
{
  int i, sum;
  static char hexy[64];

  for (sum=0,i=addr; i<addr+words*4; i+=4) sum += rom[i];

  sprintf(hexy,"   %4.4X  %8.8X",sum & 0xffff,sum);
  return hexy;
}

int main(void)
{
  int             os_id;
  _kernel_oserror *eblock;

  _swix(OS_Byte,_INR(0,2)|_OUT(1),129,0,255,&os_id);
  if (os_id != OS_xid)
  {
    printf("This is not " OS_name "\n"
           "(identifier from OS_Byte 129 is 0x%2.2x, should be 0x%2.2x)\n",os_id,OS_xid);
//    exit(1);
  }

  eblock =_swix(OS_Byte,_INR(0,1),0,0);
  printf("%s\n\n",eblock->errmess);

  printf("                         Samsung  DATA I/O\n");
  printf(PartNo_1 " ROM1-A CRC:  %s\n",crc(rom,0,512*1024));
  printf(PartNo_1 " ROM1-B CRC:  %s\n",crc(rom,1,512*1024));
  printf(PartNo_1 " ROM1-C CRC:  %s\n",crc(rom,2048*1024,512*1024));
  printf(PartNo_1 " ROM1-D CRC:  %s\n",crc(rom,2048*1024+1,512*1024));

  printf("\n\n");

  printf(PartNo_2 " ROM2-A CRC:  %s\n",crc(rom,2,512*1024));
  printf(PartNo_2 " ROM2-B CRC:  %s\n",crc(rom,3,512*1024));
  printf(PartNo_2 " ROM2-C CRC:  %s\n",crc(rom,2048*1024+2,512*1024));
  printf(PartNo_2 " ROM2-D CRC:  %s\n",crc(rom,2048*1024+3,512*1024));

  return 0;
}
