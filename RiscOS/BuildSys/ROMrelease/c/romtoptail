
/* romtoptail.c */

/* print out 'top and tail' bit patterns for the 8x4MBit, 8-bit wide EPROMs that make
   up the 2x16MBit, 16-bit wide target ROMs for manufacture */

#include <stdio.h>
#include <stdlib.h>

#include "swis.h"

/* read directly from RISC OS ROM we are running on */
#define ROMstart 0x3800000


static unsigned char *rom = (unsigned char *)ROMstart;


static char *title1   = "1203,191-01\n"
                        "          Bits    15      8             7      0\n"
                        "Address\n";
static char *title1AB = "         1203,191-01 ROM1-B   1203,191-01 ROM1-A\n";
static char *title1CD = "         1203,191-01 ROM1-D   1203,191-01 ROM1-C\n";


static char *title2   = "1203,192-01\n"
                        "          Bits    15      8             7      0\n"
                        "Address\n";
static char *title2AB = "         1203,192-01 ROM2-B   1203,192-01 ROM2-A\n";
static char *title2CD = "         1203,192-01 ROM2-D   1203,192-01 ROM2-C\n";


static char *binstr8(int b, char *buf)
{
  int i,m;

  for (i=0,m=128; i<8; i++,m=m>>1)
  {
    if (b & m) buf[i] = '1'; else buf[i] = '0';
  }

  return buf;
}


static void printbits(unsigned char *rom, int addr, int n)
{
  static char buf0[8],buf1[8];
  int   i,j,d;

  if (n < 0) d = -1; else d = 1;
  n = abs(n);

  for (j=0,i=addr; j<n; j++,i+=4)
  {
    if (d == 1)
      printf("%1d                  7      0             7      0\n",j);
    else
    {
      if (n-j-1)
        printf("n-%1d                7      0             7      0\n",n-j-1);
      else
        printf("n                  7      0             7      0\n");
    }
    printf("                   %8.8s             %8.8s\n",binstr8(rom[i+1],buf0),binstr8(rom[i+0],buf1));
  }
}


int main(void)
{
  int             os_id;
  _kernel_oserror *eblock;

  _swix(OS_Byte,_INR(0,2)|_OUT(1),129,0,255,&os_id);
  if (os_id != 0xA7)
  {
    printf("This is not RISC OS 3.70\n"
           "(identifier from OS_Byte 129 is &%2.2x, should be &A7)\n",os_id);
//    exit(1);
  }

  eblock =_swix(OS_Byte,_INR(0,1),0,0);
  printf("%s\n\n",eblock->errmess);

  printf("%s",title1);
  printf("%s",title1AB);
  printbits(rom,0,5);
  printf("\n");
  printf("%s",title1CD);
  printbits(rom,4*1024*1024-5*4,-5);

  printf("\n\n");

  printf("%s",title2);
  printf("%s",title2AB);
  printbits(rom,2,5);
  printf("\n");
  printf("%s",title2CD);
  printbits(rom,4*1024*1024-5*4+2,-5);

  return 0;
}
