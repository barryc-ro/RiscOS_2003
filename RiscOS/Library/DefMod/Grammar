file: ws decl_SERIES_OPTION;

decl: title_decl | author_decl | needs_decl | const_decl | type_decl |
      swi_decl;

title_decl: TITLE ID DESCRIPTION_OPTION;

author_decl: AUTHOR DESCRIPTION;

needs_decl: NEEDS needs_LIST;

needs: ID;

const_decl: CONST const_defn_LIST;

const_defn: ID EQUALS type COLON const DESCRIPTION_OPTION;

const: NUM | ID;

type_decl: TYPE type_defn_LIST;

type_defn: ID DESCRIPTION_OPTION | ID EQUALS type DESCRIPTION_OPTION;

type: INT | SHORT | BYTE | CHAR | BITS | BYTES | BOOL | REF type |
      STRING | ASM | DATA | STRUCT OPEN typed_var_LIST ellipsis_OPTION
      CLOSE | UNION OPEN toided_var_LIST CLOSE | SUB const BUS type |
      ID;

toid: type | VOID;

typed_var: type COLON ID DESCRIPTION_OPTION;

toided_var: toid COLON ID DESCRIPTION_OPTION;

swi_decl: SWI swi_defn_LIST;

swi_defn: ID EQUALS swi;

swi: OPEN number_part condition_part_OPTION CLOSE;

number_part: NUMBER NUM description_OPTION;

condition_part: entry_part | entry_part exit_part | entry_part
                absent_part | exit_part | absent_part;

entry_part: COMMA ENTRY OPEN entry_condition_LIST CLOSE;

exit_part: COMMA EXIT OPEN exit_condition_LIST CLOSE;

absent_part: COMMA ABSENT;

entry_condition: REG CONTAINS typed_var | REG REFERENCES typed_var |
                 REG CONSTANT NUM description_OPTION |
                 REG DISJOINS typed_var | REG CONJOINS typed_var |
                 REG ADDS typed_var | REG EXCLUSIVELY_DISJOINS typed_var
                 | FLAGS;

exit_condition: REG pling_OPTION CONTAINS typed_var |
                REG pling_OPTION REFERENCES typed_var | REG CORRUPTED |
                REG PLING | FLAGS pling_OPTION;

description: DESCRIPTION | STAR;

ws: ws_item_SEQUENCE_OPTION;

nl: '\n' | '\r';

space: spacechar | nl;

ws_item: space | comment;

comment: '/' '/' commentchar_SEQUENCE_OPTION nl;

TITLE:  t i t l e   ws;
AUTHOR: a u t h o r ws;
NEEDS:  n e e d s   ws;
CONST:  c o n s t   ws;
TYPE:   t y p e     ws;
SWI:    s w i       ws;

NUMBER: n u m b e r ws;
ENTRY:  e n t r y   ws;
EXIT:   e x i t     ws;
ABSENT: a b s e n t ws;

FLAGS:  f l a g s   ws;

CONTAINS:             '='     ws;
REFERENCES:           '-' '>' ws;
CONSTANT:             '#'     ws;
DISJOINS:             '|'     ws;
CONJOINS:             '&'     ws;
ADDS:                 '+'     ws;
EXCLUSIVELY_DISJOINS: '^'     ws;
CORRUPTED:            '?'     ws;
STAR:                 '*'     ws;
PLING:                '!'     ws;

INT:   '.' i n t     ws;
SHORT: '.' s h o r t ws;
BYTE:  '.' b y t e   ws;
CHAR:  '.' c h a r   ws;
BITS:  '.' b i t s   ws;
BYTES: '.' b y t e s ws;
BOOL:  '.' b o o l   ws;
VOID:  '.' v o i d   ws;

STRING: '.' s t r i n g ws;
ASM:    '.' a s m       ws;
DATA:   '.' d a t a     ws;

STRUCT:   '.' s t r u c t ws;
UNION:    '.' u n i o n   ws;
REF:      '.' r e f       ws;
ELLIPSIS: '.' '.' '.'     ws;

SEMICOLON: ';' ws;
COMMA:     ',' ws;
EQUALS:    '=' ws;
OPEN:      '(' ws;
CLOSE:     ')' ws;
COLON:     ':' ws;
SUB:       '[' ws;
BUS:       ']' ws;

ID: id_start id_cont_SEQUENCE_OPTION ws;

NUM: num ws;

REG: r digit ws;

DESCRIPTION: '"' wordchar_SEQUENCE word_SEQUENCE_OPTION '"' ws;
word: space_SEQUENCE wordchar_SEQUENCE;
wordchar: simplechar | '\\' | '\'';

letter: a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p |
        q | r | s | t | u | v | w | x | y | z;
bit: '0' | '1';
digit: bit | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
hexit: digit | a | b | c | d | e | f;

id_start: letter;

id_cont: letter | digit | '_';

num: dec_num | hex_num | bin_num | char_num;

dec_num: digit_SEQUENCE | '-' digit_SEQUENCE;

hex_num: '0' x hexit_SEQUENCE | '&' hexit_SEQUENCE;

bin_num: '0' b bit_SEQUENCE | '%' bit_SEQUENCE;

char_num: '\'' numchars '\'';

numchars: numchar | numchar numchar | numchar numchar numchar |
          numchar numchar numchar numchar;

numchar: simplechar | compoundchar | spacechar | '"';
commentchar: simplechar | spacechar | '\\' | '"' | '\'';
spacechar: ' ' | '\xA0' | '\t';
simplechar: letter | digit | '!' | '#' | '$' | '%' | '&' | '(' | ')' |
            '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' |
            '>' | '?' | '@' | '[' | ']' | '^' | '_' | '`' | ' | '|' |
            '}' ';} | '~' | /*å*/ '\x8C' | /*ç*/ '\x8D' | /*é*/ '\x8E' |
            /*è*/ '\x8F' | /*ê*/ '\x90' | /*ë*/ '\x91' | /*í*/ '\x92' |
            /*ì*/ '\x93' | /*î*/ '\x94' | /*ï*/ '\x95' | /*ñ*/ '\x96' |
            /*ó*/ '\x97' | /*ò*/ '\x98' | /*ô*/ '\x99' | /*ú*/ '\x9C' |
            /*ù*/ '\x9D' | /*°*/ '\xA1' | /*¢*/ '\xA2' | /*£*/ '\xA3' |
            /*§*/ '\xA4' | /*•*/ '\xA5' | /*¶*/ '\xA6' | /*ß*/ '\xA7' |
            /*®*/ '\xA8' | /*©*/ '\xA9' | /*™*/ '\xAA' | /*´*/ '\xAB' |
            /*¨*/ '\xAC' | /*≠*/ '\xAD' | /*Æ*/ '\xAE' | /*Ø*/ '\xAF' |
            /*∞*/ '\xB0' | /*±*/ '\xB1' | /*π*/ '\xB9' | /*≤*/ '\xB2' |
            /*≥*/ '\xB3' | /*¥*/ '\xB4' | /*µ*/ '\xB5' | /*∂*/ '\xB6' |
            /*∑*/ '\xB7' | /*∏*/ '\xB8' | /*∫*/ '\xBA' | /*ª*/ '\xBB' |
            /*º*/ '\xBC' | /*Ω*/ '\xBD' | /*æ*/ '\xBE' | /*ø*/ '\xBF' |
            /*◊*/ '\xD7' | /*˜*/ '\xF7';

compoundchar: '\\' escapedchar | '\\' x hexit hexit;

escapedchar: '\'' | '"' | '\\' | n | '0';
