                              A P C S to SWI
                              = = = = == ===

History
-------
1 Jul 1992 JRC Started

5 Jul 1992 JRC Added Handling of _FLAGS arguments, handling of constant
      arguments, handling of SWI's that corrupt random registers.

6 Jul 1992 JRC Changed the way reason codes are handled, implemented them.

7 Jul 1992 JRC Save LR over calls, in case we are in SVC mode.

10 July 1992 JRC Added type conversion notes

             JRC Handling of _BLOCK arguments. (If there is no EXIT
      clause, and the last ENTRY argument is of the form |Rx -> .Struct
      ...| then the _BLOCK bit will be set in the constructed
      interface.)

24th Oct 1994 JRC Updated for release.

Notation
--------
   Let i be the number of registers provided on input, and let the registers
be I0, ..., I(i - 1); let o be the number of results required, and let the
registers be O0, ..., O(o - 1); let c be the number of registers corrupted,
and let the registers be C0, ..., C(c - 1); let k be the number of registers
to be loaded with constants, and let the registers be K0, ..., K(k - 1).
Also, let f be 1 if flags are to be supplied on output, 0 if not.

   Recall that on entry

      Arg0 is in R0
      Arg1 is in R1
      Arg2 is in R2
      Arg3 is in R3
      Arg(i) is at |[SP, #4*(i - 4)]|

         RI0, ..., RI(i - 1) must be copied from Arg0, ..., Arg(i - 1).
      RK0, ..., RK(k - 1) must be set to their values.

and on exit

         V set => set R to error block pointer and clear V.

         V clear => RO0, ..., RO(o - 1) must be copied to (the
      addresses) Arg(i), ..., Arg(i + o - 1); if flags are required,
      they must be written to (the address) Arg(i + o); R must be
cleared.

   Let R0, ..., R9 be the registers as seen by the SWI end: let R, A0, ...,
A3, SP, IP be the registers as seen by A P C S:

        ;SWI bindings
        R0      RN      0
        R1      RN      1
        R2      RN      2
        R3      RN      3
        R4      RN      4
        R5      RN      5
        R6      RN      6
        R7      RN      7
        R8      RN      8
        R9      RN      9

        ;A P C S bindings
        R       RN      0       ;result
        A0      RN      0       ;argument 0
        A1      RN      1       ;argument 1
        A2      RN      2       ;argument 2
        A3      RN      3       ;argument 3
        V0      RN      4
        V1      RN      5
        V2      RN      6
        V3      RN      7
        V4      RN      8
        V5      RN      9

        ;common bindings - preserved across SWI call
        SL      RN      10      ;stack limit
        FP      RN      11      ;frame pointer
        IP      RN      12      ;workspace
        SP      RN      13      ;stack pointer
        LR      RN      14      ;not preserved in SVC mode
        PC      RN      15

Definitions
-----------
   Calculate which variable registers V will have to be preserved by this
whole function: these are the ones that A P C S requires to be preserved
which we will be using ourselves, or which the SWI corrupts:

      V = {4 <= r < 10: ?x: r == Ix || r = Ox || r == Cx || r = Kx}.

   Also calculate which registers A are going to have to be saved over the
call, because they contains addresses to be used for output. These are those
of Arg(i), ..., Arg(i + o + f - 1) which are passed in R0, ..., R3:

      A = {0 <= r < 4: i <= r < i + ((o + f)/\4 - i)\/0}

Input
-----
   Very easy:

        ;keep current SP safe - it points at the tail of the argument list
        MOV     IP, SP
        ;save registers that need it over the call (SP -= 4*|V|)
        STMFD   SP!, {V}
        ;save registers that contain output addresses (SP -= 4*|A|)
        STMFD   SP!, {A}
        ;load registers for SWI that are in the argument tail
        LDM     IP, {I4, ..., I(i - 1)}
        ;load registers for SWI that are in registers already
        MOV     I3, A3
        MOV     I2, A2
        MOV     I1, A1
        MOV     I0, A0
        ;set up constants
        MOV     K(k - 1), whatever
        ...
        MOV     K0, whatever

   (In fact, |STMFD SP!, {V, A}| will do rather than the two instructions
above.)

   After all this

      SP + 4|A| + 4|V| -> saved arguments (as set up by A P C S)
      SP + 4|A|        -> saved variables
      SP               -> saved output addresses

   There are two modes in which this is done. First, if i <= 4, we do not
need IP before the SWI is called, so we can use it to save LR in. After the
SWI, LR is corrupted anyway, so we can use it as we see fit. Second, if i >
4, we stack LR along with V, A.

   In the first case, on exit we have to do |MOVS PC, IP|. In the second, we
just add |PC| to the list of registers to be restored on return.

Call the SWI
---- --- ---

        ;do the call
        SWI     (swi)

Output
------
   Harder, though V set is easy:

        ;do error return
        BVS     exit

   If V is clear:
                   { [SP, #4*x]                           (i + x < 4)
      Arg(i + x) = {
                   { [SP, #4|V| + 4|A| + 4*((i + x) - 4)] (otherwise)

   Initially, assume only that i >= 4:

        ;get address for first argument
        LDR     IP, [SP, #4*|V| + 4|A| + 4*(i - 4)]
        STR     O0, [IP]

        (... repeat for other arguments ...)

        ;get address for last argument
        LDR     IP, [SP, #4*|V| + 4|A| + 4*((i + o - 1) - 4)]
        STR     O(o - 1), [IP]
        ;if flags are required, do them too
        LDR     IP, [SP, #4*|V| + 4|A| + 4*((i + o) - 4)]
        STR     PC, [IP]

  In fact, it may be the case that i + o + f - 1 < 4. In this case, we have
to replace any

        LDR     IP, [SP, #4*|A| + 4|S| + 4*((i + x) - 4)]
        STR     O(x), [IP]

sequences for which i + x < 4 by sequences that go

        LDR     IP, [SP, #4*x]
        STR     O(x), [IP]

where |[SP, #4*x]| is the value that R(i + x) had on entry to the code, as
stacked at the beginning.

   If any of the output addresses were in registers that have been
preserved, we do not need to reload them from memory.

Return
------
   Restore everthing to it initial state:

        MOV     R, #0
  exit
        ;skip over saved output addresses
        ADD     SP, SP, 4|A|
        ;restore saved variables
        LDMFD   SP!, {V}
        MOV     PC, LR

   A piece of cake ...

Type conversion for C
---- ---------- --- -

   To convert (CVT) a type from the DefMod form to the C form,

      .Int              int
      .Short            short
      .Byte             unsigned char
      .Char             char
      .Bits             unsigned int
      .String           char *
      .Asm              void *
      .Data             void *

      .Ref <type>       CVT (<type>) *
      .Struct (<type>, ...}
                        struct {CVT (<type>), ...}
      .Union (<type>, ...}
                        union {CVT (<type>), ...}
      [<const>] <type>  [VALUE (<const>)] CVT (<type>)
      <ID>              Convert_To_Extern (<ID>)

and in writing prototypes

      Rx = <type>       use <type> on input, <type> * on output
      Rx -> <type>      use <type> * on input, <type> ** on output
      Rx # <num>        disappears completely
      Rx | <type>       use <type>
      Rx?               disappears
      FLAGS             unsigned * (output only)
