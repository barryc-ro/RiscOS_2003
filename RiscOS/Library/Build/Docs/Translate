Translate
=========

Translate does a find and replace on user interface resources to allow 
automatic internationalisation.  You require:

* Template UI file.
* Translated text (a Mappings file).
* Output location.

If we take an example app !App, it will have a template Messages file stored at
!App.Translate.<UserIF>.UK.Messages in the following format:

----- Begin -----

Hello:´´TAG_HELLOªª
One:´´TAG_NUMBER_ONEªª

------ End ------


There will then be mappings file for English and French.  The English file 
(!App.Translate.<UserIF>.UK.Mappings):

----- Begin -----

TAG_HELLO:Hello
TAG_NUMBER_ONE:One

------ End ------

The French file (!App.Translate.<UserIF>.France.Mappings):

----- Begin -----

TAG_HELLO:Bonjour
TAG_NUMBER_ONE:Un

------ End ------


Translate uses a new system variable setup by !Common; TransRes$Path which will
be set to Translate.<UserIF>.<Locale>.,Translate.<UserIF>.UK.  This allows for 
a customised Template file for any country with defaulting back to UK.  To 
translate the above use:

translate -marko "´´" -markc "ªª" -htmlo "êê" -htmlc "ëë" 
          -m TranslateRes:Mappings -i TranslateRes:Messages -o <output_file>

Throwback (-throwback) and Verbose (-v) operations are supported.

The <output_file> should be the appropriate location inside Internat for ROM
builds, and Targets.!App.Resources for RAM builds.


Notes
-----

The markers used by Translate can be configured.  Anything found within
-marko and -markc will be simply substituted.  Anything within -htmlo and
-htmlc will be run through an HTML escaper before being substituted.  This 
allows for automatic translation of HTML UI files.  Characters such as '&'
are reserved in HTML.  Ampersand should be &amp; in HTML.  &#<ascii_value>;
is also legal and that is what Translate does, with '&' becoming &#38;

Usage
-----

Translate should be called as part of the resources phase in a Makefile.
It should not be used to generate files to be kept in !App.Resources and then
checked into CVS.  For an app using Translate to build its textual resources
the only files that should be in the Resources directory are Res, Templates
graphics files or other files that are not translated.

Arguments
---------

  Utility to produce translations of components from supplied data.
  Options:  -throwback   : Enable throwback reporting of errors.
            -v           : Verbose output.
            -marko       : Opening marker.
            -markc       : Closing marker.
            -htmlo       : HTML opening marker.
            -htmlc       : HTML closing marker.
            -m           : Mappings file.
            -i           : Input file.
            -o           : Output file.
  Usage: translate {-throwback -v} -o <mark> -c <mark> -htmlo <mark> -htmlc <mark>
                   -t <filename> -m <filename> -s <filename>


Markers
-------

For easy reference, the character codes for the markers are:

        ´  - ALT 171
        ª  - ALT 187
        ê  - ALT 144
        ë  - ALT 145
