#! /usr/local/bin/perl
#
# $Id$
#
#############################################################################
#
# This script filters the module database file to contain only those components
# required by a particular product.  Do NOT commit the filtered output to CVS -
# or all the non-included components will be lost!
#
#
# Usage: $thisfile <components> <moduledb> <bbe components> <bbe moduledb>
#

my $script = $0;
$script  =~ s/^.*[\/:]//;
$version_file     = "VersionNum";
$usage = "Usage: $script ".
  "<components file> <module database> <bbe components> <bbe module database>\n" .
  "\nFilters the first pair of parameters into the second pair of parameters\n".
  "such that only the relevant entries are present in both files.\n";

#############################################################################

my ($component_file, $moduledb, $bbe_components, $bbe_moduledb) = @ARGV;
die($usage) unless $bbe_moduledb;

# Start by reading in the ModuleDB and Components files.
my %database = &read_db($moduledb);
my %components = &read_components($component_file);

# Open all the files we need to process
open(BBECOMP, '>'.$bbe_components) or failed("Unable to open $bbe_components");
open(BBEMDB, '>'.$bbe_moduledb) or failed("Unable to open $bbe_moduledb");
open(COMP, '<'.$component_file) or failed("Unable to open $component_file");
open(MDB, '<'.$moduledb) or failed("Unable to open $moduledb");

$component_file  =~ s/^.*[\/:]//;
print BBEMDB "#\n# ** ModuleDB filtered by component file $component_file **\n#\n";

while (<MDB>) {
  if (/^\W/) {
    print BBEMDB;
    next;
  }
  if (/^(\S+)\s/) {
    print BBEMDB if ($components{$1} && $database{$1} ne 'EXP');
    next;
  }
  
  die("Internal error: $_\n");
}

while (<COMP>) {
  if (/^\W/) {
    print BBECOMP;
    next;
  }
  if (/^(\S+)\s/) {
    print BBECOMP if ($components{$1} && $database{$1} ne 'EXP');
    next;
  }
  
  die("Internal error: $_\n");
}

exit 0;

#############################################################################
# Read the components file to find the required module database entries
#
sub read_components {
  my $file = $_[0];
  my %result;
  
  open(FILE,"<$file") || &failed("cannot open $file");
  
  while (<FILE>) {
    if (/^(\w\S+)\s/) {
      my ($c,$line) = ($1, $_);
      chomp($line);
      next unless ($database{$c});
      next if ($database{$c} eq 'EXP');
      next if ($line =~ /-type\s+EXP/);
      $result{$c} = $line;
    }
  }

  return %result;
}

#############################################################################
# Read the components file to find the required module database entries
#
sub read_db {
  my $file = $_[0];
  my %result;
  
  open(FILE,"<$file") || &failed("cannot open $file");
  
  while (<FILE>) {
    if (/^(\w\S+)\s+(\S+)/) {
      $result{$1} = $2;
    }
  }

  return %result;
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  printf(STDERR "$script: $_[0] failed: $!\n");
  exit 1;
};

