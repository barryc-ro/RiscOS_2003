#! /usr/local/bin/perl

#############################################################################

# This script extracts version numbers from the VersionNum file and
# assigns them to variables.

$script = $0;
$script  =~ s/^.*[\/:]//;
$usage = "Usage: $script <major var> [<full var> [<date var> [<minor var>]]]\n";
$version_file     = "VersionNum";
#############################################################################

($varmajor,$varfull,$vardate,$varminor) = @ARGV;
die($usage) unless $varmajor;
($major,$full,$date,$minor)=&read_file($version_file);

system("set $varmajor \"$major\"") if $varmajor && $major;
system("set $varfull \"$full\"") if $varfull && $full;
system("set $vardate \"$date\"") if $vardate && $date;
system("set $varminor \"$minor\"") if $varminor && $minor;


exit 0;

#############################################################################
# Read the version number file to retrieve the current major version number.
#
sub read_file {
  my $file = $_[0];
  my $line,$major,$date,$full,$minor;
  
  # first line contains the interesting stuff
  open(FILE,"<$file") || &failed("cannot open $file");
  $line = <FILE>;
  
  chomp($line);
  $line =~ m|^.*\((.*)\).*$|;			# extract the bits
  $major = $1;
  
  if ($major eq "") {
    die("$script: cannot find major version number, has the file been messed with ?\n");
  }
  
  while (<FILE>) {
    chomp;
    if (/\S*\s+Module\_Date\s+\"(.*)\"\s*\Z/) {
      $date=$1;
    }
    elsif (/Module\_FullVersion\s+\"(\S+)\"\s*\Z/) {
      $full=$1;
    }
    elsif (/Module\_MinorVersion\s+\"(\S+)\"\s*\Z/) {
      $minor=$1;
    }
  }
  
  return ($major,$full,$date,$minor);
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  printf(STDERR "$script: $_[0] failed: $!\n");
  exit 1;
};

