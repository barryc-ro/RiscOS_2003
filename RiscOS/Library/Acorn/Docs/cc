cc
==

Norcroft C compiler.  Sources in Tools/Sources/cc.
See Acorn C/C++ Manual for further documentation.

Contents:
  Changes since cc 5.06
    New warnings and suppressing them
  Changes in cc 5.11
  Changes in cc 5.12
  List of all pragmas
  List of debug flags
  List of all feature flags
  List of all warning suppression flags
  List of all error suppression flags


Changes since version 5.06 are just the addition
of new warnings and warning suppression flags:

-Ws   suppression of "module has init to static data"
-Wr   suppression _swix format warnings
-Wc   suppression of "use of reserved C++ keyword" warnings
-Wb   suppression of unknown pragma warnings
-Wg   suppression of non-const format parameter warnings
        (..printf, ..scanf, _swix)

The compiler now knows (with #pragma -v4 in swis.h) about _swi
and _swix and will check that the correct number of parameters
have been supplied and that they are of suitable types.

The compiler now identifies *which* function parameter it is 
grumbling about when it has a complaint about one of them.


Changes in version 5.11 of the compiler:

-Ws is assumed and ignored, but not faulted.

-ccversion <version * 100> option is supported.  eg. --ccversion 512
will abort compilation if you aren't using version 5.12 or later.

A new macro __CC_NORCROFT_VERSION with a numeric value equal to the
version number * 100 is predefined.


Changes in version 5.12 of the compiler:

Signed shift right following a bitwise AND with a constant used to do
a logical shift, not arithmetic.  This is now fixed.  (C standard says
that the LSR/ASR choice is implementation defined - and our manual
defines it as ASR)


Full set of active pragmas:

The following comes from cfe/pp.c and maps the long pragma names to
the short versions.  The digit is the value to use with the short
versions to effect the same thing.  (ie. #pragma -v4 is the same
as #pragma check_swix_formats).  Do not use -v3 as it is for
internal use only (by the compiler's own source code).


    { "warn_implicit_fn_decls",     'a', 1},
    { "check_memory_accesses",      'c', 1},
    { "warn_deprecated",            'd', 1},
    { "continue_after_hash_error",  'e', 1},
    { "include_only_once",          'i', 1},
    { "optimise_crossjump",         'j', 1},
    { "optimise_multiple_loads",    'm', 1},
    { "profile",                    'p', 1},
    { "profile_statements",         'p', 2},
    { "check_stack",                's', 0},
    { "force_top_level",            't', 1},
    { "check_printf_formats",       'v', 1},
    { "check_scanf_formats",        'v', 2},
    { "__compiler_msg_format_check",'v', 3},
    { "check_swix_formats",         'v', 4},
    { "side_effects",               'y', 0},
    { "optimise_cse",               'z', 1}



Debug flags are used with -zq<option>.  Some options are
counted in that repeating them increases the debug level.
Such options are marked with <n> in the list below.  It
is expected that very few people will need to know these
(only people modifying the compiler itself, probably).
Options can be combined in a single flag, eg. -zqvvcka

Option       Meaning

-zqa         AETREE
-zqb         binder
-zqc  <n>    common sub-expression eliminator
-zqd         debug data
-zqf         filename processing
-zqg         code generator
-zqh         register spilling
-zqi         file activity
-zqk  <n>    local code generator
-zql         lexer
-zqm         map storage
-zqo         object code constructor
-zqp         pre-processor
-zqq         DEBUG_Q ??
-zqr         register allocation
-zqs         syntax analysis
-zqt         type checker
-zqu         storage
-zqw         storage (2)
-zqx         DEBUG_X ??
-zqy         loop analysis
-zqz  <n>    disable SIGINT signal handler (allows backtraces)


List of all feature flags:  (* = documented in Acorn C/C++ manual)

Option       Meaning

-fa          Check for certain data flow anomalies. (*)
-fb	     Verbose
-fc	     Limited pcc option (*)
-fd          Unused.
-fe          Check 6-char case-insensitive external symbols unique (*)
-ff          Don't embed function names (cf. -fn) (*)
-fg          Unused
-fh          Require pre-declaration of external objects (*)
-fi          Retain #include "..." statements in listing output (*)
-fj          Return #include <...> statements in listing output (*)
-fk          Use K&R include search rules (*)
-fl          Don't use link register
-fm          Emit warning for unused preprocessor symbols (*)
-fn          Embed function names (cf. -ff) (*)
-fo          Warn about old-style functions
-fp          Report on explicit casts of integers to pointer (*)
-fq          Allow counted strings
-fr          Let longjmp() corrupt register variables
-fs          Annotate
-ft          Unused
-fu          Unexpanded listing (*)
-fv          Report on all unused declarations including standard headers (*)
-fw          Allow string literals to be writable (*)
-fx          Unused
-fy          Unused
-fz          Inline calls kill link register.


List of all warning suppression flags: (* = documented in Acorn C/C++ manual)

Option       Meaning

-Wa          "Use of = in a conditional context" (*)
-Wb          Unknown pragma
-Wc          Use of C++ keyword
-Wd          Deprecated declaration foo() - give arg types (*)
-We          Unused
-Wf          Inventing "extern int foo()" (*)
-Wg          'format' arg to printf/scanf/_swixs etc. is variable
-Wh - -Wm    Unused
-Wn          Implicit narrowing cast (*)
-Wo          Unused
-Wp          non-ANSI #include <...> (*)
-Wq          Unused
-Wr          (_swix) Format requires x parameters, but y given
-Ws          Module has init. to static data
-Wt          Unused
-Wu          Unused
-Wv          Implicit return in non-void context (*)
-Ww - -Wz    Unused


List of all error suppression flags:

(* = documented in Acorn C/C++ manual)
(! = documented in manual, but not actually implemented in the compiler)

Option       Meaning

-Ea          Unused
-Eb          Unused
-Ec          Implicit cast (*)
-Ed          Unused
-Ee          Unused
-Ef          Unclean casts (eg. short to pointer) (!)
-Eg          Unused
-Eh          Unused
-Ei          Suppress syntax checking for #if (!)
-Ej          Unused
-Ek          Unused
-El          Unused
-Em          Same as -Epz -fq
-En          Unused
-Eo          Unused
-Ep          Junk at end of preprocessor line (*)
-Eq - Ey     Unused
-Ez          Zero-length array (*)


--sbrodie, 26/07/1999
