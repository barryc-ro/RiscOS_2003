cc
==

Norcroft C compiler.  Sources in Tools/Sources/cc.
See Acorn C/C++ Manual for further documentation.

Contents:
  Changes since cc 5.06
    New warnings and suppressing them
  List of all pragmas
  List of debug flags


Changes since version 5.06 are just the addition
of new warnings and warning suppression flags:

-Ws   suppression of "module has init to static data"
-Wr   suppression _swix format warnings
-Wc   suppression of "use of reserved C++ keyword" warnings
-Wb   suppression of unknown pragma warnings
-Wg   suppression of non-const format parameter warnings
        (..printf, ..scanf, _swix)

The compiler now knows (with #pragma -v4 in swis.h) about _swi
and _swix and will check that the correct number of parameters
have been supplied and that they are of suitable types.

The compiler now identifies *which* function parameter it is 
grumbling about when it has a complaint about one of them.



Full set of active pragmas:

The following comes from cfe/pp.c and maps the long pragma names to
the short versions.  The digit is the value to use with the short
versions to effect the same thing.  (ie. #pragma -v4 is the same
as #pragma check_swix_formats).  Do not use -v3 as it is for
internal use only (by the compiler's own source code).


    { "warn_implicit_fn_decls",     'a', 1},
    { "check_memory_accesses",      'c', 1},
    { "warn_deprecated",            'd', 1},
    { "continue_after_hash_error",  'e', 1},
    { "include_only_once",          'i', 1},
    { "optimise_crossjump",         'j', 1},
    { "optimise_multiple_loads",    'm', 1},
    { "profile",                    'p', 1},
    { "profile_statements",         'p', 2},
    { "check_stack",                's', 0},
    { "force_top_level",            't', 1},
    { "check_printf_formats",       'v', 1},
    { "check_scanf_formats",        'v', 2},
    { "__compiler_msg_format_check",'v', 3},
    { "check_swix_formats",         'v', 4},
    { "side_effects",               'y', 0},
    { "optimise_cse",               'z', 1}



Debug flags are used with -zq<option>.  Some options are
counted in that repeating them increases the debug level.
Such options are marked with <n> in the list below.  It
is expected that very few people will need to know these
(only people modifying the compiler itself, probably).
Options can be combined in a single flag, eg. -zqvvcka

Option       Meaning

-zqa         AETREE
-zqb         binder
-zqc  <n>    common sub-expression eliminator
-zqd         debug data
-zqf         filename processing
-zqg         code generator
-zqh         register spilling
-zqi         file activity
-zqk  <n>    local code generator
-zql         lexer
-zqm         map storage
-zqo         object code constructor
-zqp         pre-processor
-zqq         DEBUG_Q ??
-zqr         register allocation
-zqs         syntax analysis
-zqt         type checker
-zqu         storage
-zqw         storage (2)
-zqx         DEBUG_X ??
-zqy         loop analysis
-zqz  <n>    disable SIGINT signal handler (allows backtraces)


--sbrodie, 30/11/1998
