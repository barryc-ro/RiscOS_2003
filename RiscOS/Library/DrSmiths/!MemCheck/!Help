		MemCheck 1.28 (Mon 15 Jun 1998)
		



Contents

	
	Introduction
	Installation
	Building a project
	Example project
	Notes on MemCheck operation
	Restrictions
	!MemCheck.!Boot
	Other things



Introduction

	
	Overview
	จจจจจจจจ
		The !MemCheck directory contains a C library that
		provides full checking of all memory accesses from
		within programs compiled with the Acorn C compiler,
		version 4 or later.
		
		MemCheck automatically keeps track of areas of memory
		which are safe to read or write to, such as memory
		returned from malloc, parts of the stack which aren't
		used for stack-frame house-keeping, static data and 
		zero-init data. 
		
		Any attempt to read or write to memory which isn't in
		any of these areas will result in diagnostics, about the
		address accessed and the offending source instruction,
		being sent to stderr.
		
		MemCheck will also allow the program to register areas
		of memory which are to be considered safe to access (eg
		memory claimed from the RMA or claimed with a memory
		allocator other than malloc(), such as flex or Mem).
		
		MemCheck allows access permissions of blocks of memory
		to be set, so that (for example) attempts to write to
		a block are faulted, but reads are allowed.
		
		MemCheck optionally intercepts ANSI str/mem functions,
		and checks the pointer arguments refer to safe memory.
		
		MemCheck requires each source file to be recompiled with
		the compiler front-end tool 'MemCheck.CC', the final
		executable to be linked with the MemCheck library, and a
		single call to MemCheck_Init() to be made at the start
		of main(). See below for the details
	
	
	Using debugging information
	จจจจจจจจจจจจจจจจจจจจจจจจจจจ
		If a program is compiled and linked with debugging
		information, MemCheck will automatically use this
		information to give full information on the source
		instruction which caused an illegal read or write. It
		will also open a throwback window for the offending
		source line if the program is running in the desktop. 
		
	Speed
	จจจจจ
		Because every read or write to memory is checked,
		programs built with MemCheck will run more slowly than
		normal. This effect gets worse for large programs which
		typically use many malloc blocks. 
		
		There is support for turning off checking of memory
		reads and/or writes at run-time, which can be used to
		make trusted parts of a program run at nearly normal
		speed.
		
	C compiler Compatibility
	จจจจจจจจจจจจจจจจจจจจจจจจ
		MemCheck relies on a special feature of the Acorn C
		compiler version 4 or later. It will not work with other
		compilers. 
	
	Normal and MemCheck builds
	จจจจจจจจจจจจจจจจจจจจจจจจจจ
		To allow normal and memory-checking verions of a project
		to be easily built from the same source files, the
		MemCheck header file will macro-out all MemCheck
		function calls *unless* compilation is with
		'MemCheck.CC'.
	
	Compatibility
	จจจจจจจจจจจจจ
		MemCheck will work with both normal applications and 
		RISC OS modules written in C.
		
		MemCheck also works with programs running under DDT.





Installation

	
	MemCheck uses an internal altered version of the 'stdio.h'
	header file. To avoid copyright problems, this altered version
	is not distributed with MemCheck, but is generated from your
	own copy, using the command-line program '!MemCheck.!MakeStdIO'.
	
	To generate this file:
	
	1)	Ensure the Filer has seen the '!MemCheck' directory.
	
	2)	Double-click on '!MemCheck.!MakeStdIO'. This will make 
		an altered copy of your 'stdio.h' header file, and save
		it inside the !MemCheck directory. This header file is
		used instead of the normal one when building MemCheck
		projects - see later.
	
	Note that !MakeStdIO runs in a task window. If it can't find
	'C:h.stdio', you will be asked to enter the filename (eg by
	shift-dragging the file into the taskwindow).
	
	Also note that your original 'stdio.h' header is left completely
	unchanged by '!MemCheck.!MakeStdIO'.





Building a project

	
	Summary
	จจจจจจจ
		To make a MemCheck version of a project:
		
		1)	Ensure that the !MemCheck application-directory has been
			seen by the Filer.
		
		2)	Add #include "MemCheck:MemCheck.h" to the source file
			containing main().
		
		3)	At the start of main(), call MemCheck_Init(). If you
			wish to have str/mem functions checked, also call
			MemCheck_InterceptSCLStringFunctions().
		
		4)	Recompile all source code, prefixing the call to your
			compiler with MemCheck.CC. 
		
		5)	Link with the MemCheck library.
		
		
		For example, if a source file is normally compiled with:
		
			cc -c -o o.foo c.foo
		
		- then recompile with:
		
			MemCheck.CC cc -c -o o.foo c.foo
		
		Note that the 'cc' is still included.
		
		There are two versions of the MemCheck library. If you
		are using Acorn C version 5 or later, link with
		MemCheck:o.MC. If you are using Acorn C version 4, link
		with MemCheck:o.MC_4.
		
		The reason for having these two versions of the MemCheck
		library is that the names of some Shared C Library
		symbols changed between Acorn C version 4 and Acorn C
		version 5.
		
		Also, compiling and linking with debugging (cc -g, link
		-d) enables MemCheck to give source-file information
		about offending instructions.
		
		
	MemCheck.CC
	จจจจจจจจจจจ
		
		MemCheck.CC is a tool which simply calls 'cc' (or
		whatever is its first argument) with various extra
		flags.
		
		To conditionally call MemCheck.CC from a makefile, use
		'$(MemCheckCC) cc' instead of 'cc' in the makefile, and
		set the macro $(MemCheckCC) to 'MemCheck.CC' when a
		MemCheck build is required. Otherwise, the macro will
		reduce to nothing, and cc will be called normally.
		
		The example project described below uses this method.
	
	
	Problems with using MemCheck's version of <stdio.h>
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		
		There seems to be a small problem with Acorn cc's
		treatment of the '-J' option, used by 'MemCheck.CC' to
		force use of MemCheck's altered version of stdio.h.
		
		If the ANSI header files are in your <C$Path>, or are
		otherwise accessible to cc via the '-I' option, (which
		isn't really necessary because the compiler has internal
		pre-compiled versions), cc seems to prefer to use these
		rather than any files accessible via the -J option.
		
		Essentially, this means that you should move the ANSI
		header files away from you normal include path, so that
		they don't interfere with inclusion of MemCheck's
		altered stdio.h.
		
		You should leave kernel.h and swis.h though, because the
		compiler doesn't have internal versions of these.
		
		Note that MemCheck's altered version of stdio.h merely
		makes the getc() and putc() macros into function calls
		(to fgetc() and fputc()), to prevent direct access to
		a FILE block that will be faulted by MemCheck.
		
		Thus you don't have to move the ANSI header files away 
		from your normal include path if you program doesn't use
		getc or putc.
	
	
	Use with C modules
	จจจจจจจจจจจจจจจจจจ
		To make a MemCheck version of a C module (built using
		Acorn's CMHG tool), you should follow the steps
		described above, except that you should link with
		'MemCheck:o.MC_M'.
		
		You can include source-level debugging information in a
		module by linking with 'MemCheck.DDTModLink link' rather
		than 'link' only, for example with:
		
			memcheck.ddtmodlink link -rmf -o MyModule o.foo o.bar C:o.stubs
		
		This will allow MemCheck to give source-file information
		when outputing diagnostics. Note that MemCheck.DDTModLink
		requires that the Utiltities directory supplied with Dr
		Smith's is added to your Run$Path.
		
		See !MemCheck.Examples.Module.!Mod_MC.Makefile for an
		example of this. 
		
		If MemCheck decides to terminate the module (for example
		after a write error), it will call exit(1), instead of
		abort() which can crash the machine if called from
		within a module.
		
		Note that MemCheck will attempt to write all diagnostics
		to stderr, which is not particularly useful from within
		a module. It is recommended that you call
		MemCheck_RedirectToFilename( tmpnam()) or similar in
		your module initialisation code. 
		
		CMHG 5.00 can call IRQ handlers with a badly defined
		stack (the stack is not terminated with returnFP=0), so
		it may be necessary to turn off MemCheck checking in IRQ
		handlers. Later versions of CMHG fix this, but the
		_kernel_swi_regs block passed to the handler is not in
		the visible stack, so needs to be registered with
		MemCheck_RegisterMiscBlock().


Example project

	
	'!MemCheck.Test.' contains a simple C program which repeatedly
	mallocs, frees and reallocs blocks of memory, and reads and
	writes to undefined bits of memory.
	
	The project has three separate builds, each in an
	application-subdirectory of '!MemCheck.Test':
	
	'!MemCheck.Test.!Normal'
		Normal build which quits with a	corrupt heap.
	
	'!MemCheck.Test.!MemCheck'	
		Compiled and linked for use with MemCheck, and with
		debugging information. The illegal memory accesses are
		detected by MemCheck, and the program is aborted when
		the first illegal write is attempted.
	
	'!MemCheck.Test.!MC_4' is for use by those with version 4 of
	Acorn's development tools. It works with C version 4, and the
	stubs library supplied with C version 4, but requires a more
	fully-featured linker than the link version 4, such as the
	freeware DRLink.
	
	Double-clicking on an application-subdirectory rebuilds that
	build of the program using Makatic. Alternatively, if you don't
	want to use Makatic, run the makefile in the
	application-subdirectory with Acorn's AMU tool.
	
	Note that the compiler will warn about some (but not all) of the
	errors in the code - these are delibarately there to test
	MemCheck.
	
	Run each of the versions by double-clicking on the 'RunProg'
	TaskObey file within the build application-subdirectory.




Notes on MemCheck operation

	
	Documentation of MemCheck functions
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		The information below doesn't go into the full details
		of each MemCheck function.
		
		For these details, see the comments in
		'!MemCheck.h.MemCheck', or use the StrongHelp manual
		'!MemCheck.MemCheck'.
	
	Calling MemCheck_Init()
	จจจจจจจจจจจจจจจจจจจจจจจ
		This should be done as soon as possible after the
		program starts up. 
		
		In particular, it is essential to call MemCheck_Init()
		before any calls to memory-allocators such as malloc,
		otherwise MemCheck will fault accesses to these blocks
		of memory. Also, attempts to free/realloc malloc blocks
		will fail (with something like a 'bad user block'
		error).
		
		MemCheck_Init() should be called before any other
		MemCheck functions.
	
	MemCheck_RegisterArgs()
	จจจจจจจจจจจจจจจจจจจจจจจ
		This function should be called after MemCheck_Init(). 
		
		If your program uses the 'arg' and 'argv' parameters
		passed to main(), you should call this function, 
		passing 'argc' and 'argv', otherwise MemCheck will fault
		any accesses to argv[].
		
		MemCheck will treat the strings referred to by 'argv' as
		read-only.
	
	MemCheck_InterceptSCLStringFunctions()
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		This should be called after MemCheck_Init(). 
		
		This makes MemCheck intercept and check all calls to
		strcpy, strncpy, strcat, strncat, memcpy, memmove and
		memset, and ensures that the arguments point to known
		blocks with appropriate read/write access setings.
		
		MemCheck also checks that the blocks are large enough
		to acomodate any copied data etc.
		
		For relevent functions, MemCheck also checks that ranges
		don't overlap. Note that if the blocks do overlap,
		MemCheck gives a warning, but allows the program to
		continue with the call. Hence MemCheck won't prevent
		such a faulty call from crashing the program.
		
	MemCheck output
	จจจจจจจจจจจจจจจ
		By default, MemCheck sends all diagnostics to stderr.
		This can be changed at run-time using the functions
		MemCheck_RedirectToStream(),
		MemCheck_RedirectToFilename() and
		MemCheck_RedirectToFilenamef(). Note that using an
		unbuffered stream will ensure that the diagnostics are
		saved to a file even if the program crashes immediately
		afterwards.
		
		The function MemCheck_Printf() can be used in exactly
		the same way as printf(), except that it outputs to
		wherever MemCheck diagnostics are going.
	
	Logging	of malloc functions
	จจจจจจจจจจจจจจจจจจจจจจจจจจจ
		If the program calls MemCheck_SetStoreMallocFunctions(),
		MemCheck will store information about the
		function-nesting whenever malloc, calloc or realloc are
		used.
		
		This information is then used when printing diagnostics,
		to give a backtrace for when the call to malloc was
		made. This is useful if your program uses a central
		error-checking wrapper for malloc.
		
		Naturally, this entails a size overhead on every malloc
		block.
	
	Use with shifting-heap memory managers
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		If your program uses Acorn's flex routines (or similar),
		you will need to tell MemCheck about each flex block
		that is allocated or freed, using
		MemCheck_RegisterFlexBlock() and
		MemCheck_UnRegisterFlexBlock().
		
		In addition, you will need to inform MemCheck whenever a
		flex block is resized, by calling
		MemCheck_ResizeFlexBlock().
		
		Note that Acorn's flex library uses memmove in a way
		which causes MemCheck to report an error when 
		MemCheck_InterceptSCLStringFunctions() is being used.
		
		To avoid this problem, you should temporarily turn of
		all MemCheck checking while the flex functions are being
		called, using code like:
		
		void	MemCheck_Flex__Alloc( flex_ptr anchor, int n)
			{
			MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 0);
			flex_alloc( anchor, n);
			MemCheck_RegisterFlexBlock(anchor, n);
			MemCheck_RestoreChecking( oldchecking);
			}
		
		The 'MemCheck:Flex.h' header and 'MemCheck:o.Flex'
		library provides this funcionality automatically. To
		use, put '#include "MemCheck:Flex.h"' after your
		'#include "flex.h"', link with 'MemCheck:o.MCFlex', and
		all flex calls will be automatically replaced by 
		wrapper functions when compilation is with MemCheck.CC.
		Note that this library has been written for use with
		Acorn's stand-alone version of flex.
				
		In '!MemCheck.o.Sources.Flex' is the source for
		this library, which you could modify to use with (for
		example) RISC_OSLib's flex.
		
		The program inside '!MemCheck.TestFlex.' is an example
		of how to use this library. Note that this example
		assumes that your flex header and library are
		'C:flexlib.flex.h' and 'C:flexlib.o.flexlib'.e version of
		flex.
		
	
	Read/write access to memory
	จจจจจจจจจจจจจจจจจจจจจจจจจจจ
		For each block of memory known to MemCheck, you can
		specify whether the block is readable and/or writable,
		using the functions MemCheck_SetBlockReadable() and
		MemCheck_SetBlockWritable().
		
		You can also set the default access permissions for
		subsequently-created blocks, using
		MemCheck_SetDefaultMallocAccess() etc. 
		
		This is useful when using a library which hasn't been
		compiled with memory-checking, but which allocates
		memory for internal usage which you shouldn't be writing
		to:
		
		MemCheck_SetDefaultMallocWriteAccess( 0);
		<call library functions>
		MemCheck_SetDefaultMallocWriteAccess( 1);
		<...>
		
		- this will mean that any attempts to write to the
		library's data from your code will be faulted by
		MemCheck.
		
	Diagnostics
	จจจจจจจจจจจ
		For each illegal read or write, MemCheck outputs the
		addresses that was illegally accessed, the size being
		accessed (byte, half-word, word etc) and gives the
		address of the offending instruction. 
		
		It then lists all known blocks of memory. There are four
		types of memory blocks:
		
			Malloc blocks	Claimed by your program calling
					malloc/calloc.
					
			Misc blocks	Registered by your program using
					MemCheck_RegisterMiscBlock().
					
					There will also be a few Misc
					blocks at the start of the list
					which correspond to various
					special areas of memory.
					
					These include: zero-init and
					static data areas, the FILE
					structs stdio, stderr and stdin
					(currently 40 bytes each), and
					the argv[] strings passed to
					MemCheck_RegisterArgs.
			
			Flex blocks	Registered by your program using
					MemCheck_RegisterFlexBlock().
			
			Stack chunks
		
		
		MemCheck will also give a simple backtrace. Note that
		the backtrace will include some internal MemCheck
		functions.
		
		If any malloc blocks were claimed after a call to
		MemCheck_StoreMallocFunctions, a list of the addresses
		of all active functions when these malloc blocks were
		claimed is displayed for each malloc block. The function
		name is	also displayed if it is embedded in the code (cc
		-ff turns this off).
		
		See the test program output to see what this looks like.
		
		If debugging information is present, MemCheck will
		attempt to find and display the source file, line and
		column of the offending instruction, and will also
		attempt to start a throwback session for these lines.
		
		When using Throwback, MemCheck will prefix all
		incomplete filenames with '<!RunImage>.^.', where
		<!RunImage> is the filename of the executable, which
		will give the correct filename if the executable is in
		the project directory.
		
		If this isn't the case, you will have to compile with
		complete pathnames to make use of the throwback, rather
		than use the CSD or Acorn's prefix directory.
		
		
		Compiling with complete pathnames
		จ จ จ จ จ จ จ จ จ จ จ จ จ จ จ จ จ
			To do this, simply pass the complete pathname
			of each source file to cc, rather than using an
			implicit CSD. For example:
			
			cc ... ADFS::4.$.Progs.Foo.c.main
			
			You can use system variables to do this when
			using general rules in a makefile. For example,
			if the project directory is <Foo$Dir>, and the 
			makefile is run with the CSD set, one can still
			include full filename information using:
			
			.c.o:
				cc -o $@ <Foo$Dir>.$<
			
			instead of:
			
			.c.o:
				cc -o $@ $<
			
			Note that <Foo$Dir> will also have to be set
			when these filenames are used with throwback at
			runtime.
	
	
	Terminating after memory errors
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		If an illegal read is made, the program is allowed to
		continue. After an attempt to do an illegal write
		however, MemCheck will call abort(). The function
		MemCheck_SetQuitting() can be used to change this
		behaviour from within your program. It may be useful to
		quit on read errors as well as write errors when first
		adding MemCheck checking to a project, as there can be
		large amounts of diagnostics produced.
		
		Note that an attempt to read or write to zero bytes of
		memory (eg with memcpy) will result in a diagnostic, but
		won't cause MemCheck to abort the program, irrespective
		of any calls to MemCheck_SetQuitting().
	
	
	Using MemCheck with DDT
	จจจจจจจจจจจจจจจจจจจจจจจ
		If a MemCheck program is run under DDT, you can make DDT
		catch any memory errors, enabling you to immediately
		examine function parameters etc.
		
		To do this, simply set a breakpoint on the function
		'MemCheck_DDTTrap' (ie type 'MemCheck_DDTTrap' in DDT's
		break-point dialog box, and then click on the
		'Procedure' button).
		
		MemCheck_DDTTrap is simply an empty function in the 
		MemCheck library, which is compiled with cc -g and
		which MemCheck calls immediately after reporting any
		memory-violation.
	
	
	Controlling memory checking
	จจจจจจจจจจจจจจจจจจจจจจจจจจจ
		To stop memory-checking at run-time, call
		'MemCheck_SetChecking( checkreads, checkwrites)' where
		'checkreads' and  'checkwrites' should be 0 or non-zero
		to turn checking off or on respectively. This will
		remove most of the slow-down from memory-checking. 
		
		For example, if a function is known to make no illegal
		writes, but you would like to check reads, use
		'MemCheck_SetChecking( 1, 0);' before calling the
		function.
		
		In addition, you can stop the compiler from inserting
		branches to MemCheck's checking code by putting
		'#pragma -c0' in the source code. Note that this won't
		stop MemCheck from checking calls to strcpy() etc, which
		are checked using a different mechanism.
	
	MemCheck names
	จจจจจจจจจจจจจจ
		All MemCheck function names start with 'MemCheck_'; all
		names with this prefix should be regarded as being
		reserved for the MemCheck system.
	
	Warning
	จจจจจจจ
		If you forget to link a program with the MemCheck
		library, and also forget to call MemCheck_Init(), the
		program will link and run without memory checking, which
		can be slightly confusing.
	
	Finding memory-leaks
	จจจจจจจจจจจจจจจจจจจจ
		A simple way of detecting memory leaks is to call
		MemCheck_OutputBlocksInfo() just before you program
		finishes (eg with atexit()). This will display all
		un-freed blocks.
		
		It is particularly helpful if you call
		MemCheck_StoreMallocFunctions() at the start of your
		program so that MemCheck displays the functions active
		when each malloc-block was claimed.
	
	Hyper-text documentation of MemCheck_ functions
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		There are rather a lot of functions for controlling the
		behaviour of the MemCheck system, all prototyped in the
		file 'MemCheck:MemCheck.h'.
		
		This header file contains comments on each MemCheck
		function. 
		
		This information is also available as fully
		cross-referenced hyper-text pages in the StrongHelp
		manual 'MemCheck.MemCheck' for use with the freeware
		StrongHelp program, and in HTML form inside the
		StrongHelp directory '!MemCheck.HTMLHelp', for use with
		a WWW brouser.
	
	Running debug applications without DDT
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		If you compile and link with debugging information, the
		resulting executable will be filetyped as 'DebImage' by
		link, and so will start DDT when run.
		
		To avoid starting DDT, simply settype the !RunImage to
		filetype 'absolute'.
	
	Using MemCheck_InterceptSCLStringFunctions() with libraries
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		MemCheck_InterceptSCLStringFunctions() will cause all
		calls to (for example) strcpy() to be intercepted, even
		if from within a library that wasn't compiled with
		MemCheck.CC .
		
		This can lead to MemCheck faulting calls from within the
		library if, for example, the library copies an internal
		static string (which MemCheck won't know is safe memory
		to read).
		
		To add to the confusion, Acorn's compiler sometimes
		replaces strcpy() with memcpy() if it knows how long the
		source string is.
		
		So, if you are getting diagnostics about memcpy reading
		unknown memory, check whether you are using a library
		that calls memcpy() or strcpy().
		
	Problems with the compiler
	จจจจจจจจจจจจจจจจจจจจจจจจจจ
		There is a bug in Acorn's compiler which can cause an
		internal inconsistancy error when cc -zpc1 (as used by
		MemCheck.CC) is used with constructs like:
		
			 *(int*)"SQSH"
			 
		A workaround for this sort of thing is to write out the
		numerical value explicitly.
	
	Other functions checked by MemCheck
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		MemCheck intercepts calls to the Shared C Library
		functions getenv(), _kernel_swi() and
		_kernel_last_oserror(). This is done so that MemCheck
		will treat any buffers returned by these functions as
		readable.
		
		MemCheck stores just one buffer for each of the above
		functions. For example, if _kernel_swi returns an error,
		MemCheck will register the _kernel_oserror as readable.
		If a subsequent call to _kernel_swi also returns an
		error, the first _kernel_oserror block will be
		unregistered, and the new _kernel_oserror block
		registered in its place.
		
		The function MemCheck_SetOSBuffersLifetime() can be used
		to alter this behaviour slightly to make it more strict.


Restrictions

	
	MemCheck will find many types of illegal memory access, but
	there are case when bad accesses will go undetected:
	
	Limited stack protection
	จจจจจจจจจจจจจจจจจจจจจจจจ
		MemCheck knows about the top 4 words in each stack
		frame, which are used by the runtime system to maintain
		the stack, so should prevent a program corrupting the
		stack structure. However, MemCheck will not detect
		overwriting of variables which are on the stack, because
		it doesn't know where each variable starts and ends.
		
		For example:
		
		void	Foo()
		{
		int	array1[ 10];
		int	array2[ 3];
		...
		}
		
		Here, if the compiler puts array1 just above array2 in
		stack memory, there will be no way for MemCheck to know
		that array2[5] is illegal.
		
		In addition, if there are extra words on the stack above
		array1, then reading or writing just beyond array1[9]
		may not be detected.
	
	
	Limited array bounds-checking
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		Accessing  one or two words beyond the bounds of a
		malloc-ed block will always be detected by MemCheck.
		This enables MemCheck to catch most common array
		mistakes.
		
		However, an address more than two words beyond a malloc
		block may be in the next malloc block, so be treated as
		ok.
		
		To improve on this, the compiler would have to pass the
		base of any array being accessed, as well as the actual
		address, to memory-checking code, which could then check
		they were in the same block. Current Acorn compilers
		don't do this.
	
	Stubs
	จจจจจ
		MemCheck will only work with programs which are linked
		with Shared C Library stubs - it won't work with the
		stand-alone 'ansilib' supplied with Acorn C. 




!MemCHeck.!Boot


	When seen by the Filer, the '!MemCheck' application directory
	affects the following system variables:
	
	Run$Path	('MemCheck:Bin.' is added)
	MemCheck$Dir
	MemCheck$Path
	
	(C$Path is not changed)




Other things


	The file '!MemCheck.History' contains a history of the
	development of MemCheck.
	
	All the MemCheck files are Copyright ฉ 1995-1996 Julian Smith,
	for Warm Silence Software, all rights reserved.
