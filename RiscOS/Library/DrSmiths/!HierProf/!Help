
		HierProf 4.21 (Thu 14 May 1998)
		



Contents

	
	Introduction
	Adding profiling to projects
	Adding profiling to C source code with HierProf_ProfileAllFunctions()
	Adding profiling to C source code with HierProf.CC
	Adding profiling to existing AOF files with HierProf.ConvertAOF
	The HierProf library
	Loading and analysing HierProf data
	How HierProf.CC works
	How HierProf.ConvertAOF works
	Manual control of profiling in C programs
	Timing overheads and restrictions
	Using HierProf.CC with C++
	!HierProf.!Boot
	Other things





Introduction

	
	The !HierProf application-directory contains various tools which
	allow you to build profiled versions of programs running under
	RISC OS.
	
	The profiling output is a full hierachical listing of the time
	spent in each function, so you get told how much time was spent
	in function X as percentages of the amount of time spent in all
	other functions that indirectly or directly called X.
	
	For example, here is part of the profiling output from one of
	the programs in the '!HierProf.Examples' directory:
	
	1   Outermost loop                                               
	2    `--  99.71% main                                            
	3         85.97%  `--  86.22% FunctionC                          
	4          2.81%        2.82%  |--   3.27% NullFunction          
	5         17.67%       17.72%  |--  20.56% FunctionA             
	6          5.31%        5.33%  |     6.18%  `--  30.07% FunctionD
	7         23.66%       23.73%  `--  27.53% FunctionB             
	
	The '--' indicate direct calls, to help you to follow the
	tree-structure of the function calls.
	
	More detailed numerical information is also given for each
	'nesting' of function calls: number of calls, total time,
	average time, minimum time, maximum time, and standard deviation
	time. In addition, exact machine-readable values are also
	output.
	
	By default, the profiling output is sent to stderr when the
	program finishes, using atexit(). There are functions to send 
	the output to temporary files etc instead.
	
	The timing information is displayed in ms or us (micro-seconds)
	as appropriate. Exact timings are also added in crude form for
	use with custom analysis programs. There is a function provided
	which can be used to load this data from a HierProf output file
	into a structure. This is to allow one to perform custom
	analysis of the data. See below for the details.
	
	See the file '!HierProf.History' if you want to see the changes
	made since the last version of HierProf.
	
	
	Tool names
	จจจจจจจจจจ
		HierProf provides various 'tools' - RISC OS programs
		which run from the CLI, in the same way that Acorn's cc
		and link do.
		
		To ensure that HierProf's tools don't clash with any
		existing commands, HierProf tools uses a slightly
		unusual method of adding the tools to your Run$Path.
		
		For example, to run HierProf's 'ConvertAOF' tool, you
		should actually use: 'HierProf.ConvertAOF ...'. The
		'HierProf.' prefix guarantees that HierProf tools will
		never clash with any other tools (as long as no one ever
		writes a tool called 'hierprof', of course).
		
		This is done by having all the HierProf tools in the
		directory '!HierProf.Bin.HierProf.', and making
		'!HierProf.!Boot' add the '!HierProf.Bin.' directory to
		Run$Path.





Adding profiling to a project


	There are three methods provided by HierProf for adding
	profiling to a project.
	
	All three methods require the final executable to be linked with
	one of the HierProf libraries (see later) but provide different
	ways of adding the appropriate calls (to the HierProf library)
	to the project.
	
	The first method works at run-time, and is probably the simplest
	to use. The other methods are for use at build-time using
	command-line tools provided by HierProf.
	
	Methods 1 and 3 don't affect the optimisation of existing
	functions - they merely add simple wrapper functions which call
	HierProf timing functions before and after. This means that they
	add a slightly larger overhead to the time a function takes to
	complete, but the timings will be closer to the unprofiled
	performance.
	
	Because it modifies source code prior to compilation, method 2
	will sometimes affect the optimisations that CC will make during
	compilation. On the other hand, there will be less overhead
	associated with the calls to HierProf timing functions (see
	later).
	
	
	
	1. HierProf_ProfileAllFunctions()
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		This is the recommended way of profiling code.
		
		If your program calls this function, HierProf will
		search through the executable at runtime and alter the
		code so that all functions are subsequently profiled.
		
		Note that this method of adding profiling will ignore
		all functions which don't have their function-names
		embedded in the code (eg C functions compiled with Acorn
		CC's -ff option, and also C functions which are simple
		enough not to require any stack). Such functions have to
		be made known to HierProf individually.
	
	
	2. HierProf.CC - a C preprocessor
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		'HierProf.CC' is a tool which preprocesses the C source
		code to add calls to the HierProf library at the start
		and end of each  function.
		
		It is very straightforward to use but its use is
		deprecated - see later for the details.
	
	
	3. HierProf.ConvertAOF - an AOF converter
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		'HierProf.ConvertAOF' is a tool which adds HierProf
		library calls to ARM Object Format (AOF) files, as
		produced by most RISC OS C compilers and assemblers. 
		
		This enables you, for example, to add profiling to
		libraries for which you don't have source code.
		
		This system is a little more restricted than HierProf.CC
		- it  can only add profiling to functions with external
		linkage (this means, for example, that 'static' C
		functions are ignored).
		
		HierProf.ConvertAOF is intended for use with code for
		which source isn't available, and which doesn't contain
		embedded function names.
		
		See later for details on using 'HierProf.ConvertAOF'.




Adding profiling to a project - details


	Adding profiling to C source code with
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
	HierProf_ProfileAllFunctions()
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
	
		1)	Ensure that the '!HierProf'
			application-directory has
			been seen by the Filer.
		
		2)	Add '#include "HierProf:HierProf.h" to the
			source file that contains main().
		
		3)	Add a call to HierProf_ProfileAllFunctions() to
			the start of main().
		
		4)	Recompile main()'s source file with:
			'cc -DHierProf_PROFILE ...'.
		
		5)	Link with 'HierProf:o.HP' for 100Hz timing
			using the Shared C Library's clock() function,
			or link with 'HierProf:o.HP_T1' for 2MHz
			timing using IOC's timer1.
		
		The function HierProf_ProfileFunction() can be used to
		profile individual functions which
		HierProf_ProfileAllFunctions() misses because they don't
		have their names embedded in the code.
		
		Note that a few very simple functions are ignored by
		because the first instruction refers to PC. HierProf
		will tell you if this happens.
		
		You can call HierProf_IgnoreFunctions() with a
		space-separated list of wild-carded function-names 
		which a subsequent call to
		HierProf_ProfileAllFunctions() will ignore.



	Adding profiling to C source code with HierProf.CC
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
	
		To make a profiled version of a C project, do the
		following:
		
		
		1)	Ensure that the '!HierProf'
			application-directory has
			been seen by the Filer.
		
		2)	Compile each C source file by calling
			'HierProf.CC' rather than your normal compiler,
			passing the full call to your compiler as the
			arguments to HierProf.CC.
		
		3)	Link with 'HierProf:o.HP' for 100Hz timing
			using the Shared C Library's clock() function.
			
			Or, link with 'HierProf:o.HP_T1' for 2MHz
			timing using IOC's timer1.
		
		
		For example, if you normally build with:
		
			cc -c -I,C: -o o.main c.main
			link -o !RunImage o.main C:o.Stubs
		
		then to include function profiling, do:
		
			HierProf.CC cc -c -I,C: -o o.main c.main
			link -o !RunImage o.main HierProf:o.HP C:o.Stubs
		
		(Desktop C users should use HierProf:o.HP_4)
		
		Note that 'cc' is still included as the first parameter
		to HierProf.CC . This is to allow the use of HierProf.CC
		with compilers which aren't called 'cc'.
	
	
	
	Restrictions when using HierProf.CC
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
	
		HierProf.CC has a small restriction compared to a normal 
		C compiler - it will only process one .c file in the 
		command line parameters, so you will have to compile 
		multiple .c files individually.
	
		You should ensure that the C source code will compile ok
		without HierProcCC, because HierProf.CC will not be 
		particularly helpful if it can't parse the C source.
	
		HierProf.CC can fail to correctly parse C source code
		which omits white space between a ')' and any of '{',
		'"'.
		For example: 
			if (x=0){ printf( "\n");}
		and:
			Foo( (void*)"abcdef");
	
	Problems with using HierProf.CC
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		HierProf.CC can fail to correctly parse C source code
		which omits white space between a ')' and a '{'.
		Because HierProf.CC adds code to the C source, it
		significantly interferes with the optimisation that the
		compiler can do. It also causes problems if function
		names are generated using macros.
		
		For these reasons, use of HierProf.CC is not recommended
		- it is much better to use
		HierProf_ProfileAllFunctions().





	Adding profiling to existing AOF files with HierProf.ConvertAOF
	จจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจจ
		
		
		To make profiled versions of existing AOF files, simply
		run the HierProf.ConvertAOF tool on the AOF file using:
		
			HierProf.ConvertAOF <AOF infile> <AOF outfile>
		
		For example, if your AOF files are o.Foo o.Bar, and you
		normally link with:
		
			link -o !RunImage o.Foo o.Bar C:o.Stubs
		
		then to include function profiling, do:
			
			HierProf.ConvertAOF o.Foo o.Foo
			HierProf.ConvertAOF o.Bar o.Bar
			link -o !RunImage o.Foo o.Bar HierProf:o.HP C:o.Stubs
		
		
		Note that HierProf.ConvertAOF is actually a simple Obey
		script which calls 'link' and 'objasm' (and the special
		HierProf._AOF tool). If these tools aren't present, you
		won't be able to use HierProf.ConvertAOF.
		
		HierProf.ConvertAOF uses flags appropriate for Acorn's
		versions of these tools, so will probably need
		modification to work with other products.
		
		
		Converting Stubs
		จ จ จ จ จ จ จ จ 
		
			The file 'C:o.stubs', which one normally links
			with to make the C functions in the Shared C
			Library available to a C program, is a standard
			AOF file. It is possible to make a HierProf
			version of Stubs in the same way as for any
			other AOF file.
			
			The only thing to be careful of is that some
			functions in stubs are special (eg involved in
			setting up the C runtime environment etc), so
			should not be altered to call the HierProf
			library.
			
			HierProf.ConvertAOF accepts a list of
			wild-carded function-names to be ignored. These
			names should be simply added to the end of the
			call to HierProf.ConvertAOF.
			
			Most of the special Stubs functions start with a
			'_', and there are also the functions 'clock'
			'TrapHandler', 'UncaughtTrapHandler',
			'EventHandler', names with '$' and
			'UnhandledEventHandler' which I suspect would
			cause problems if they were interfered with.
			
			Thus to make a new HierProf-using stubs, use (in
			one long command line):
			
			Hierprof.ConvertAOF <Stubs filename> 
				<New HierProf Stubs filename> _* *$*
				clock TrapHandler UncaughtTrapHandler 
				EventHandler UnhandledEventHandler
			
			Note that this will ignore all the _kernel_*
			functions.
			
			Please note also that, while this seems to work 
			fine, I have only done a small amount of testing
			of a profiled Stubs.
			
			
		
		Converting existing libraries
		จ จ จ จ จ จ จ จ จ จ จ จ จ จ จ
		
			If you wish to add HierProf calls to an existing
			library created with Acorn's LibFile or similar, 
			you will have to extract the individual AOF
			files with LibFile, run HierProf.ConvertAOF on
			each AOF file, and then use LibFile again to put
			all the new AOF files in a library again.
			
			There is a tool called 'HierProf.ConvertALF'
			which  automates this. It is a simple Obey file 
			which uses LibFile to extract the individual AOF
			files from the library (storing them in 
			'<Wimp$ScrapDir>.HierProf.'), runs 
			'HierProf.ConvertAOF' on each of the AOF files, 
			and then makes a new library using LibFile.
			
			The main limitation is that
			'HierProf.ConvertALF' will only be able to
			extract and deal with the individual AOF files
			if they have names such as 'o.Foo', 'o.Bar' etc.
			While this is true of many libraries, some (for
			example DeskLib), use a complete pathname.
	
	
	
	
	Examples
	จจจจจจจจ
	
		The '!HierProf.Test.Simple' directory contains an
		example project which demonstrates how to use HierProf.
		
		There are various different builds of the project, each
		in a separate application-directory with a makefile 
		created using Makatic.
		
		The different builds of the project can be re-built
		either by running the '!Run' file within each build
		application-directory (which uses Makatic and the
		template makefile), or simply by running the existing
		makefile with Acorn's AMU tool.




The HierProf libraries


	As mentioned earlier, any program which uses the HierProf system
	needs to be linked with the HierProf library which provides
	functions which do the actual timing and housekeeping needed.
	
	There are two different versions of the library:
	
	HierProf:o.HP		Uses 100Hz ANSI C clock() for timing.
	HierProf:o.HP_T1	Uses 2MHz IOC timer.
	
	Any of these libraries can be used with any of the three methods
	of adding profiling described earlier.
	
	Note that HierProf uses 32 bit values to measure time, which
	will overflow after about 35 minutes when using the IOC
	timer1-based HierProf library.
	
	
	Note that users of Acorn's Desktop C should use the libraries
	ending with '4' - this is because Desktop C has a version
	of C:o.stubs which uses some old unsupported symbols.




Loading and analysing HierProf data

	
	The header file 'HierProf:Data.h' and C library
	'HierProf:o.Data.HPData' can be used to load all timing
	information from a HierProf output file for analysis by your
	own program.
	
	The header file provides a few structures and a function
	'HierProf_LoadData' which loads all data from a file into an
	easy-to-use form.
	
	See the example program in '!HierProf.Test.Data.' to see how to 
	use this library. This example loads the profiling data from the 
	example HierProf program in '!HierProf.Test.Simple.'.




Manual control of profiling in C programs


	You can manually profile any region of code inside a C function
	by adding pairs of the macros 'HierProf_Start( "any text")' and
	'HierProf_Stop()' lines (with no terminating semicolons) around
	the code you want profiled.
	
	These macros will be removed unless compilation is with
	HierProf.CC, or with 'HierProf_PROFILE' defined and the HierProf
	header file #included.
	
	You can also make HierProf.CC ignore a function by putting
	'HierProf_DontProfile()' immediately after the opening '{' of
	the function.
	
	For example:
	
	int FunctionWeDontWantToProfile( int x)
	{
	HierProf_DontProfile()
	...
	}
	
	
	There are various functions which can be used to control where 
	profiling information is sent to, in 'HierProf:HierProf.h'.





Timing overheads and restrictions

	
	Program slow-down
	จจจจจจจจจจจจจจจจจ
		As you may have been thinking, two function calls per
		profile block is going to give a hefty time overhead.
		
		On my 25MHz A5000, this overhead is around 0.15 ms.
		Hence programs using HierProf will run rather slowly.
	
	
	Timing correction
	จจจจจจจจจจจจจจจจจ
		HierProf meausures how long is spent in its start/stop
		functions, and uses this information to correct the 
		timing information.
		
		HierProf also attempts to correct for the time spent 
		inside clock() or the timer1-reading functions. This 
		correction is updated periodically as the program runs 
		in case the environment changes, and the most recent 
		correction (in micro-secs) is displayed after the
		profiling statistics.
		
		This correction is only significant when using 
		HierProf:o.HP_T1, because the time taken to read
		clock() is much less than clock()'s 10ms resolution.
		
		Note that this correction can result in some functions 
		having a negative minimum time, because the timing
		functions sometimes work faster than average.
		
		This is mainly a problem when running taskwindows, which
		can be preemted. If the profiled program is interrupted 
		inside HierProf's correction loop, this can result in 
		HierProf over-correcting, giving large negative 
		time-measurements.
		
		The only time left uncorrected is that spent in the code
		which calls HierProf timing functions before and after 
		each function. In code compiled with HierProf.CC, this
		overhead is 3-4us. Run-time addition of profiling 
		calls with HierProf_ProfileAllFunctions() is slightly
		less efficient, with an overhead of 8-9us.
		
		NB These last two timings are simply the average time
		HierProf gave for a null C function, running on a 25MHz
		A5000 in mode 31.
	
	
	There is no restriction on how many different functions or
	blocks are profiled (actually, there is a maximum of 65536...).
	
	A maximum of 62 nested function levels are handled - higher 
	nestings are ignored. HierProf will also ignore all but the 
	first recursive call to a recursive function (including mutually
	recursive functions).
	
	To avoid name-clashes, the HierProf system only uses names
	starting with 'HierProf_'. Hence code used with the HierProf
	system should regard this prefix as reserved.





Using HierProf_ProfileAllFunctions with C++


	HierProf will unmangle embedded C++ function names as generated
	by Acorn C++.





Using HierProf.CC with C++


	HierProf.CC semi-works with C++ code and Acorn's C++ compiler
	5.06, but this hasn't been tested very much. 
	
	Only class-method names are noticed by the source parser, so
	'SomeClass::dosomething(...)' will appear as 'dosomething' in
	the profile output. Similarly, parameter types are ignored.
	
	Owing to the way HierProf.CC works though, methods with the same
	names in different classes will still be individually profiled, 
	even though they have the same name in the output.
	
	Converted C++ files are put into '<Wimp$ScrapDir>.HierProf.c++.'
	- Acorn C++ 5.06 doesn't cope very well with files inside .c
	directories.
	
	Because of a bug in Acorn C++ 5.06, HierProf has to use the
	leafname of the input file as the temporary leafname when the
	input file is in a c++ directory - C++ 5.06 seems to ignore any
	-o directive, and always uses the input source leafname as the
	output leafname. This will result in
	'<Wimp$ScrapDir>.HierProf.c++.' filling up with old converted
	files.





!HierProf.!Boot


	When seen by the Filer, the '!HierProf' application directory
	affects the following system variables:
	
	Run$Path	('HierProf:Bin.' is added)
	HierProf$Dir
	HierProf$Path
	
	(C$Path is not changed)
	
	Also, the directories <Wimp$ScrapDir>.HierProf.c/c++/o/s are
	created.





Other things


	The file '!HierProf.Files' contains a fairly detailed
	description of all the files in the '!HierProf' directory.
	
	All the HierProf files are Copyright ฉ 1995-1996 Julian Smith,
	for Warm Silence Software, all rights reserved.
