#include <stdio.h>
#include <time.h>

#ifdef MODULE
	#include "CMHGHead.h"
#endif

#ifdef RUNTIME_PROFILING
	#include "HierProf:HierProf.h"
#endif


#define ITS 5000
#define ITS2 100
#define ITS3 2


static int	FunctionD( int x)
{
if ( x==0)	return 4;
return 3;
}

static int	FunctionA( int x)
{
int	i;
for ( i=0; i<ITS3; i++)	{
	x += 1;
	FunctionD( x);
	}
return x;
}


static int	FunctionB( int x)
{
int	i;
for ( i=0; i<ITS2; i++)	x += 1;
return x;
}


static void	NullFunction( void)
{
}


static void FunctionC( void)
{
int	i, ii;
clock_t	t, t_a, t_b, t_null;

t = clock();
for ( i=0; i<ITS; i++)	NullFunction();
t_null = clock() - t;

t = clock();
for ( i=0; i<ITS; i++)	ii = FunctionA(0);
t_a = clock() - t;

t = clock();
for ( i=0; i<ITS; i++)	ii = FunctionB(0);
t_b = clock() - t;

printf( "Function name          Time for %i iterations (s)\n", ITS);
printf( "---------------------------------------------\n");
#ifdef MODULE
	/* Have to be carefull not to use floating point in module version.	*/
	printf( "NullFunction                   %i\n", t_null);
	printf( "FunctionA                      %i\n", t_a);
	printf( "FunctionB                      %i\n", t_b);
#else
	printf( "NullFunction                   %g\n", (double) t_null / CLOCKS_PER_SEC);
	printf( "FunctionA                      %g\n", (double) t_a    / CLOCKS_PER_SEC);
	printf( "FunctionB                      %g\n", (double) t_b    / CLOCKS_PER_SEC);
#endif

printf( "\n\n");

}



int	main( void)
{
#ifdef RUNTIME_PROFILING
	HierProf_ProfileAllFunctions();
	HierProf_ProfileFunction( FunctionD);
	HierProf_ProfileFunction( FunctionB);
	HierProf_ProfileFunction( NullFunction);
#endif

printf( "HierProf test program started\n\n");

FunctionC();


printf( "Finished\n");


/* Profile data will be automatically be written to stderr when this program exits.	*/

return 0;
}



#ifdef MODULE
	_kernel_oserror *Initialise( char *cmd_tail, int podule_base, void *pw)
	{
		main();
		//HierProf_OutputToFilenamef( "<Wimp$ScrapDir>.hpmodout");
		HierProf_OutputToUniqueFile();
		HierProf_OutputNow();
		HierProf_DontOutput();
		printf( "Profile data has been written to a file in <Wimp$ScrapDir>\n");
		return NULL;
		(void) cmd_tail;
		(void) podule_base;
		(void) pw;
	}

	_kernel_oserror *Finalise( int fatal, int podule, void *pw)
	{
		return NULL;
		(void) fatal;
		(void) podule;
		(void) pw;
	}
#endif


