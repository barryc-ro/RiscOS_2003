TITLE ColourPicker;

NEEDS OS, Wimp;

CONST
   //Error numbers
   Error_ColourPickerUninit     = .Bits: &20D00,
   Error_ColourPickerBadModel   = .Bits: &20D01,
   Error_ColourPickerBadHandle  = .Bits: &20D02,
   Error_ColourPickerBadFlags   = .Bits: &20D03,
   Error_ColourPickerInUse      = .Bits: &20D04,
   Error_ColourPickerModelInUse = .Bits: &20D05,
   Error_ColourPickerBadReason  = .Bits: &20D06;

CONST
   //Flag bits for ColourPicker_Dialogue
   ColourPicker_DialogueOffersTransparent = .Bits:    %1,
   ColourPicker_DialogueTransparent       = .Bits:   %10,
   ColourPicker_DialogueType              = .Bits: %1100,
   ColourPicker_DialogueTypeShift         = .Int: 2,
   ColourPicker_DialogueTypeNever         = .Bits: 0,
   ColourPicker_DialogueTypeClick         = .Bits: 1,
   ColourPicker_DialogueTypeClickDrag     = .Bits: 2,
   ColourPicker_DialogueIgnoreHelp        = .Bits: %10000;

CONST
   //for ColourPicker_OpenDialogue
   ColourPicker_OpenTransient = .Bits: %1,
   ColourPicker_OpenSubMenu   = .Bits: %10, //only relevant if Transient
   ColourPicker_OpenToolbox   = .Bits: %10; //only relevant if Permanent

CONST
   //for ColourPicker_UpdateDialogue
   ColourPicker_UpdateOffersTransparent = .Bits: %1,
   ColourPicker_UpdateTransparent       = .Bits: %10,
   ColourPicker_UpdateType              = .Bits: %100,
   ColourPicker_UpdateVisible           = .Bits: %1000,
   ColourPicker_UpdateScroll            = .Bits: %10000,
   ColourPicker_UpdateTitle             = .Bits: %100000,
   ColourPicker_UpdateColour            = .Bits: %1000000,
   ColourPicker_UpdateModel             = .Bits: %10000000,
   ColourPicker_UpdateIgnoreHelp        = .Bits: %100000000;

CONST
   //for the various messages
   ColourPicker_ColourTransparent = .Bits: %1,
   ColourPicker_ColourDragging    = .Bits: %10;

CONST
   //Colour model entry numbers
   ColourPicker_EntryDialogueStarting  = .Int: 0,
   ColourPicker_EntryDialogueFinishing = .Int: 1,
   ColourPicker_EntryRedrawArea        = .Int: 2,
   ColourPicker_EntryUpdateArea        = .Int: 3,
   ColourPicker_EntryReadValues        = .Int: 4,
   ColourPicker_EntrySetValues         = .Int: 5,
   ColourPicker_EntryProcessEvent      = .Int: 6,
   ColourPicker_EntrySetColour         = .Int: 7,
   //more here ...
   ColourPicker_EntryLimit             = .Int: 8;

TYPE
   ColourPicker_D,

   ColourPicker_Colour =
   .Struct
   (  OS_Colour: colour,
      .Int: size, //of the 'info' array
      .Int: info ...
   ),

   ColourPicker_Dialogue =
   .Struct
   (  .Bits: flags,
      .Ref .String: title,
      OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      OS_Colour: colour,
      .Int: size, //of the 'info' array
      .Int: info ...
   ),

   ColourPicker_Model =
   .Struct
   (  .Bits: flags,
      .Ref .String: name,
      .Ref .String: description,
      .Int: info_size,
      OS_Coord: pane_size,
      [ColourPicker_EntryLimit] .Ref .Asm: entries
   );

CONST
   //Colour model numbers (for 'size')
   ColourPicker_ModelSizeRGB  = .Int: 16,
   ColourPicker_ModelSizeCMYK = .Int: 20,
   ColourPicker_ModelSizeHSV  = .Int: 16;

CONST
   //Colour model numbers (for 'info + 0')
   ColourPicker_ModelRGB  = .Int: 0,
   ColourPicker_ModelCMYK = .Int: 1,
   ColourPicker_ModelHSV  = .Int: 2;

CONST
   //WIMP message numbers
   Message_ColourPickerColourChoice         = .Bits: &47700,
   Message_ColourPickerColourChanged        = .Bits: &47701,
   Message_ColourPickerCloseDialogueRequest = .Bits: &47702,
   Message_ColourPickerOpenParentRequest    = .Bits: &47703;

TYPE
   //Types for message blocks
   ColourPicker_MessageColourChoice =
      .Struct
      (  ColourPicker_D: d,
         .Bits: flags,
         OS_Colour: colour,
         .Int: size, //of the 'info' array (in BYTES!)
         .Int: info ...
      ),

   ColourPicker_MessageColourChanged =
      .Struct
      (  ColourPicker_D: d,
         .Bits: flags,
         OS_Colour: colour,
         .Int: size, //of the 'info' array
         .Int: info ...
      ),

   ColourPicker_MessageOpenParentRequest =
      .Struct
      (  ColourPicker_D: d
      ),

   ColourPicker_MessageCloseDialogueRequest =
      .Struct
      (  ColourPicker_D: d
      );

SWI
   ColourPicker_RegisterModel =
   (  NUMBER &47700 "For internal use only",
      ENTRY
      (  R0 = .Int: model_no,
         R1 -> ColourPicker_Model: model,
         R2 -> .Data: workspace
   )  ),

   ColourPicker_DeregisterModel =
   (  NUMBER &47701 "For internal use only",
      ENTRY
      (  R0 = .Int: model_no
   )  ),

   ColourPicker_OpenDialogue =
   (  NUMBER &47702 "Creates and opens a colour picker dialogue",
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> ColourPicker_Dialogue: dialogue
      ),
      EXIT
      (  R0! = ColourPicker_D: d,
         R1 = Wimp_W: w
   )  ),

   ColourPicker_CloseDialogue =
   (  NUMBER &47703 "Closes a colour picker dialogue which is in
            progress",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = ColourPicker_D: d
   )  ),

   ColourPicker_UpdateDialogue =
   (  NUMBER &47704 "Updates some or all of the contents of a colour
            picker dialogue",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = ColourPicker_D: d,
         R2 -> ColourPicker_Dialogue: dialogue
   )  ),

   ColourPicker_ReadDialogue =
   (  NUMBER &47705 "Reads the current state of a colour picker dialogue
            without changing it",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = ColourPicker_D: d,
         R2 = .Ref ColourPicker_Dialogue: dialogue
      ),
      EXIT
      (  R1 = Wimp_W: w,
         R2 = .Int: size
   )  ),

   ColourPicker_SetColour =
   (  NUMBER &47706 "Reserved for future expansion",
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> ColourPicker_Colour: colour
   )  ),

   ColourPicker_HelpReply =
   (  NUMBER &47707 "Makes a colour picker respond to a
            Message_HelpRequest with its own help text",
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> Wimp_Message: help_request
   )  ),

   ColourPicker_ModelSWI = (NUMBER &47708 "For internal use only",
         ABSENT),

   ColourPickerModelSWI_ColourChanged =
   (  NUMBER &47708,
      ENTRY
      (  R0 # 0 "Informs the front end to send a message to the client,
               if required",
         R1 -> ColourPicker_Colour: colour
   )  ),

   //Cause the Picker to send a message to the application. if required.
   ColourPickerModelSWI_ColourChangedByDragging =
   (  NUMBER &47708,
      ENTRY
      (  R0 # 1 "Informs the front end to send a dragging message to the
               client, if required",
         R1 -> ColourPicker_Colour: colour
   )  ),

   ColourPickerModelSWI_ClaimEvent =
   (  NUMBER &47708,
      ENTRY
      (  R0 # 2 "Informs the front end that the back end wants an event
               type",
         R1 = .Int: event,
         R2 -> ColourPicker_Colour: colour
   )  ),

   ColourPickerModelSWI_ReleaseEvent =
   (  NUMBER &47708,
      ENTRY
      (  R0 # 3 "Informs the front end that the back end no longer wants an
            event type",
         R1 = .Int: event,
         R2 -> ColourPicker_Colour: colour
   )  ),

   ColourPickerModelSWI_ProcessKey =
   (  NUMBER &47708,
      ENTRY
      (  R0 # 4 "Passes an unhandled key press on to the front end",
         R1 = .Int: c,
         R2 -> ColourPicker_Colour: colour
   )  );

SWI
   Service_ColourPickerLoaded =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # &93 "For internal use only",
         R2 -> .Asm: loaded_service,
         R3 -> .Data: workspace
   )  )
