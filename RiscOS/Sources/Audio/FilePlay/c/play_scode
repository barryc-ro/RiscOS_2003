/* > play_scode.c

 */

#include <stdlib.h>
#include <time.h>

#include "play_scode.h"


// define this to allocate buffer ourself rather than letting module handle it
//#define ALLOC_PLAYBACK_BUFFER

/* function prototypes for the entry points into the sound code */

typedef void (*arstopfn)(void);
typedef void (*ardatafn)(void *data, int size);
typedef void (*arplayfn)(int sndratio, replay_sound_poll *poll);

/* -------------------------------------------------------------------------------- */

/* call stop entry only if actually playing */

static void soundcode_stop(replay_sound_code_info *info)
{
    if (info->flags & replay_SOUND_CODE_PLAYING)
    {
    	((arstopfn)(int)&info->code.stop_entry)();

    	info->flags &= ~replay_SOUND_CODE_PLAYING;
    }
}

/* -------------------------------------------------------------------------------- */

/*
 * The replay code needs to go into a timing loop before being used.
 */

static clock_t soundcode_start_timing(replay_sound_code_info *info)
{
    clock_t timing_start = 0;
    if (info->flags & replay_SOUND_CODE_NEEDS_TIMING)
    {
    	/* start timing */
    	((arplayfn)(int)&info->code.play_entry)(replay_SOUND_CODE_PLAY_TIMING, &info->poll);
    	info->flags |= replay_SOUND_CODE_PLAYING;

        timing_start = clock();
    }
    return timing_start;
}

static void soundcode_finish_timing(replay_sound_code_info *info, clock_t timing_start)
{
    if (timing_start)
    {
	/* wait for a second to elapse - if NoTiming bit isn't set */
        if ((info->code.interface_flags & replay_SOUND_CODE_NO_TIMING) == 0)
            while (clock() - timing_start < CLK_TCK)
                ;

	/* call stop - don't clear flag as it will be set anyway */
	soundcode_stop(info);

	/* clear flag if the timing was known to have happened */
        if ((info->code.interface_flags & replay_SOUND_CODE_SOUND_SYSTEM_OFF) == 0)
            info->flags &= ~replay_SOUND_CODE_NEEDS_TIMING;
    }
}

/* -------------------------------------------------------------------------------- */

#ifdef ALLOC_PLAYBACK_BUFFER
static void *playback_buffer = NULL;
#endif

/* -------------------------------------------------------------------------------- */

/*
 * Stop playback and free all buffers.
 */

void soundcode_stop_playback(playback_handle *data)
{
    if (data->playback_info)
    {
        /* stop playback */
        soundcode_stop(data->playback_info);

        /* shutdown the module routines */
        xreplaysoundcode_detach_loader(0, data->playback_info);

        /* this marks the code as unused but doesn't necessarily free it */
        xreplaysoundcode_unload(0, data->playback_info);
        data->playback_info = NULL;
    }

    /* close the sound file is open */
    if (data->playback_id)
    {
        xsoundfile_close(0, data->playback_id);
        data->playback_id = NULL;
    }

#ifdef ALLOC_PLAYBACK_BUFFER
    free(playback_buffer);
    playback_buffer = NULL;
#endif
}

/* -------------------------------------------------------------------------------- */

/*
 * See if one of the hardware buffers is empty
 * Returns non-zero if something is empty, returns 3 if both are empty.
 */

int soundcode_is_buffer_empty(playback_handle *data)
{
    if (data->playback_info)
        return (data->playback_info->code.buffer[0]->empty ? 1 : 0) +
               (data->playback_info->code.buffer[1]->empty ? 2 : 0);
    return 0;
}

/*
 * Give a buffer off data to the sound code (ensure it is no bigger than the size
 * originally passed in to start_playback).
 */

void soundcode_give_data(void *buffer, int size, playback_handle *data)
{
    if (data->playback_info)
    	((ardatafn)(int)&data->playback_info->code.data_entry)(buffer, size);
}

/* -------------------------------------------------------------------------------- */

/*
 * Initial start_playback, loads code and starts timing
 */

os_error *soundcode_start_playback1(const char *sound_file, int n_channels,
                                    int bufsize, playback_handle *data)
{
    os_error *e = NULL;

    /* kill off if anything already playing */
    if (data->playback_info)
        soundcode_stop_playback(data);

    /* load the sound code */
    e = xreplaysoundcode_load(0, replay_SOUND_TYPE_STANDARD, sound_file, n_channels,
                              &data->playback_info);

    if (!e)
    {
        /* start timing and allocate buffers */
        data->playback_timing_start = soundcode_start_timing(data->playback_info);

        /* should probably give an error if the malloc fails */
        bufsize = ((bufsize + 3) &~ 3) + sizeof(replay_sound_buffer);

#ifdef ALLOC_PLAYBACK_BUFFER
        playback_buffer = malloc(2*bufsize);
        if (playback_buffer == NULL)
            e = (os_error *)"    Out of memory for playback buffer";    /* nasty way to return error but you get the idea */
#endif
    }

#ifdef ALLOC_PLAYBACK_BUFFER
    if (!e)
    	e = xreplaysoundcode_attach_buffers(0, data->playback_info, playback_buffer, 0, 0, bufsize, SKIP);
#else
    if (!e)
    	e = xreplaysoundcode_attach_buffers(0, data->playback_info, NULL, 0, 0, bufsize, SKIP);
#endif
    if (e)
    	soundcode_stop_playback(data);

    return e;
}

/*
 * Finish start_playback, finish timing
 */

void soundcode_start_playback2(int sample_rate, playback_handle *data)
{
    replay_sound_code_info *info = data->playback_info;
    if (info)
    {
        /* finish timing - this will wait for a second if necessary */
    	soundcode_finish_timing(info, data->playback_timing_start);

    	/* setup actual playback */
    	info->poll.global_flags = 0;        /* holds pause and mute */

    	info->poll.frequency_frac = 0;
    	info->poll.frequency_int = sample_rate;

    	info->poll.quality = replay_SOUND_CODE_QUALITY_HIGH;

    	info->poll.stereo_flags = 0;        /* holds stereo reversed */

    	((arplayfn)(int)&info->code.play_entry)(replay_SOUND_CODE_PLAY_PLAY, &info->poll);

    	/* set flag as won't be set if haven't timed */
    	info->flags |= replay_SOUND_CODE_PLAYING;
    }
}

os_error *soundcode_play_soundfile(const char *filename, int bufsize,
                                   playback_handle *data)
{
    os_error *e;
    soundfile_format play_fmt;

    /* kill off if anything already playing */
    if (data->playback_info)
        soundcode_stop_playback(data);

    /* open the soundfile */
    e = xsoundfile_open(soundfile_OPEN_TYPE_FILE_NAME, filename,
            &play_fmt, &data->playback_id, SKIP);

    /* load the appropriate sound code for this sound type */
    if (!e)
        e = xreplaysoundcode_load(replay_SOUND_CODE_LOAD_FROM_SOUND_FILE, 0,
                                  (char *)&play_fmt, 0, &data->playback_info);

    /* do the timing */
    if (!e)
    {
        data->playback_timing_start = soundcode_start_timing(data->playback_info);
    	soundcode_finish_timing(data->playback_info, data->playback_timing_start);
    }

    /* cause buffers to be allocated, interrupt routines to be setup and everything basically */
    if (!e)
        e = xreplaysoundcode_init_sound_file(0, data->playback_info,
                                             (byte *)data->playback_id, bufsize,
                                             1<<10);

    /* actually start file playing */
    if (!e)
    {
    	((arplayfn)(int)&data->playback_info->code.play_entry)(replay_SOUND_CODE_PLAY_PLAY, &data->playback_info->poll);
    	data->playback_info->flags |= replay_SOUND_CODE_PLAYING;
    }

    /* if there were any errors then clean up */
    if (e)
        soundcode_stop_playback(data);

    return e;
}

/* -------------------------------------------------------------------------------- */

/* eof start_play.c */
