/* main.c
 * (C) Acorn NC 1997
 *
 * Author: Jonathan Larmour
 * Date:   12/3/97
 *
 * History:
 *
 * 12/3/97  JIFL    Coding complete
 *
 * This is the main source file for the FilePlay module for the Acorn NC 1.RCA
 * project
 */

/* SYSTEM INCLUDES */

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#include "kernel.h"

/* LOCAL INCLUDES */
#include "play_scode.h"
#include "utils.h"


/* CONSTANTS */

/* buffer setting info */
#define DEFAULT_BUFFER_SIZE     (16*1024)
#define MIN_BUFFER_SIZE         128 /* if user sets to lower than this, we force
                                     * to default instead */

/* possible commands */
#define SOUNDPLAY_COMMAND       0

/* error codes */
#define SP_ERR_BAD_SWI          0x1E6 /* same as system error */

/* swi info */
#define SWI_SOUNDPLAY_PLAY      0
#define SWI_SOUNDPLAY_STOP      1
#define SWI_SOUNDPLAY_CONTROL   2
#define SWI_SOUNDPLAY_STATUS    3

/* reason codes for SWI_SOUNDPLAY_STATUS */
#define SWI_STATUS_REASON_STATUS 0
#define SWI_STATUS_REASON_FILE   1
#define SWI_STATUS_REASON_BUFFSIZE 2


/* GLOBALS */

static int file_playing=FALSE;
static int buffer_size = DEFAULT_BUFFER_SIZE;
static char file_name[512];

static playback_handle sound_playback_data; /* handle for sound player */
static _kernel_oserror sp_error; /* for returning error codes */

/* FUNCTION PROTOTYPES */


/* FUNCTIONS */

static _kernel_oserror *start_playing(const char *file_name)
{
    _kernel_oserror *err=NULL;

    memset(&sound_playback_data, 0, sizeof(sound_playback_data));
    err = (_kernel_oserror *)soundcode_play_soundfile(file_name, buffer_size,
                                                      &sound_playback_data);
    if (!err)
        file_playing = TRUE;

    return err;
} /* start_playing */


static void stop_playing(void)
{
    soundcode_stop_playback(&sound_playback_data);
    file_playing = FALSE;

} /* stop_playing */


/* check whether the file is still playing */
static void update_state(void)
{
  if (file_playing && (soundcode_is_buffer_empty(&sound_playback_data) == 3))
    stop_playing();

} /* update_state */


static void show_status(void)
{
  printf("Status:        ");
  if (file_playing)
    printf("Playing\n");
  else
    printf("Quiet\n");

  printf("File:          ");
  if (file_playing)
    printf("%s\n", &file_name[0]);
  else
    printf("None\n");

  printf("Buffer size:   %d bytes\n", buffer_size);
} /* show_status */


static void munge_arg_string(char *arg_string, char **argv)
{
  int i=1;
  char *s = arg_string;

  while ((*s >= ' ') || (*s == '\t'))
  {
    switch (*s)
    {
      case '\t':
      case '\n':
      case ' ':
                *s='\0';
                break;
      default:
        if ((s == arg_string) || (*(s-1) == '\0'))
        {
          argv[i++] = s;
        } /* if */
        break;
    }
    s++;
  } /* while */
  *s='\0';
} /* munge_arg_string */


_kernel_oserror *cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
  char *argv[6]; /* can only have 5 arguments */
  char arg_string_copy[512];
  int i;
  int start=FALSE;
  int stop=FALSE;
  int status=TRUE;
  _kernel_oserror *err;

  update_state();

  /* copy arg_string */
  for (i=0; i<512; i++)
  {
    if ((arg_string[i] >= ' ') || (arg_string[i]=='\t'))
      arg_string_copy[i] = arg_string[i];
    else
      break;
  } /* for */
  arg_string_copy[i] = '\0';

  munge_arg_string(&arg_string_copy[0], &argv[0]);

  switch (cmd_no)
  {
    case SOUNDPLAY_COMMAND:

         /* process arguments */
         for (i=1; i <= argc; i++)
         {
           if (*argv[i] == '-')
           {
             switch (tolower(*(argv[i] + 1)))
             {
               case 'b':
                 if (i < argc)
                   buffer_size=atoi(argv[++i]);
                   if (buffer_size < MIN_BUFFER_SIZE)
                     buffer_size=DEFAULT_BUFFER_SIZE; /* just in case */
                   status=FALSE;
                 break;
               case 'f':
                 if (i < argc)
                 {
                   /* I _would_ do a strncpy, but that causes a crash. C bug? */
                   int j;

                   i++;
                   for (j=0; j<sizeof(file_name); j++)
                   {
                     file_name[j] = argv[i][j];
                     if (file_name[j] == '\0')
                       break;
                   } /* for */
                   file_name[j] = '\0';
                   start = TRUE;
                 }
                 break;
               case 's':
                 stop = TRUE;
                 break;
               default:
                 break;
             } /* switch */
           } /* if */
         } /* for */

         /* act on arguments */
         if (start==TRUE)
         {
           if (file_playing)
             stop_playing();
           err=start_playing(file_name);
           if (err)
             return err;
         } /* if */
         else if (stop == TRUE)
         {
           stop_playing();
         } /* else if */
         else
         {
           if (status==TRUE)
             show_status();
         } /* else if */
         break;

    default:
           break;
  } /* switch */

  return NULL;
} /* cmd_handler */

_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *private_word)
{
  int i;
  _kernel_oserror *err;

  update_state();

  switch (swi_no)
  {
    case SWI_SOUNDPLAY_PLAY:
                             if (!r->r[1])
                               break;

                             if (file_playing)
                               stop_playing();

                             for (i=0; i<sizeof(file_name); i++)
                             {
                               file_name[i] = ((char *)r->r[1])[i];
                               if (file_name[i] == '\0')
                                 break;
                             } /* for */
                             file_name[i] = '\0';

                             err=start_playing(&file_name[0]);
                             if (err)
                               return err;
                             break;

    case SWI_SOUNDPLAY_STOP:
                             if (file_playing)
                               stop_playing();
                             break;

    case SWI_SOUNDPLAY_CONTROL:
                                if (r->r[0] == 0) /* reason == set buffer size */
                                {
                                  buffer_size = r->r[1];
                                  if (buffer_size < MIN_BUFFER_SIZE)
                                    buffer_size = DEFAULT_BUFFER_SIZE;
                                } /* if */
                                break;

    case SWI_SOUNDPLAY_STATUS:
                               switch (r->r[0])
                               {
                                 case SWI_STATUS_REASON_STATUS:
                                    r->r[0] = file_playing ? 1 : 0;
                                    break;

                                 case SWI_STATUS_REASON_FILE:
                                    if (file_playing)
                                    {
                                      r->r[0] = (int) &file_name[0];
                                    } /* if */
                                    else
                                    {
                                      r->r[0] = 0; /* no file name */
                                    } /* else */
                                    break;

                                 case SWI_STATUS_REASON_BUFFSIZE:
                                    r->r[0] = buffer_size;
                                    break;

                                 default:
                                          break;
                               } /* switch */
                               break;

    default:
             sp_error.errnum = SP_ERR_BAD_SWI;
             sprintf(sp_error.errmess, "Bad SWI number &%08x", swi_no);
             return(&sp_error);
  } /* switch */

  return NULL;
} /* swi_handler */

_kernel_oserror *sp_final(int fatal, int podule, void *pw)
{
  if (file_playing)
    stop_playing();

  return NULL;
} /* sp_final */

