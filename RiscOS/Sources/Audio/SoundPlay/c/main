/* main.c */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "os.h"
#include "wimp.h"

#include "soundfile.h"

#include "play_scode.h"
#include "utils.h"

// --------------------------------------------------------------------------------------------

#define MASK            wimp_MASK_NULL
#define POLL_DELAY      100

#define device_SOUND    6

// --------------------------------------------------------------------------------------------

#define message_OPEN_URL    0x4AF80

typedef union
{
    char url[236];
    struct
    {
        int tag;
        char *url;
    } indirect;
} wimp_message_open_url;

// --------------------------------------------------------------------------------------------

static wimp_t task;
static int buffer_size = 16*1024;
static bool file_playing = FALSE;
static bool quit_on_finish = FALSE;
static char file_to_play[256];
static int msg_ref = -1;

static int message_list[] =
{
    message_DATA_OPEN,
    message_DEVICE_CLAIM,
    message_DEVICE_IN_USE,
    message_OPEN_URL,
    message_PREQUIT,
    message_QUIT
};

// --------------------------------------------------------------------------------------------

static void start_playing(const char *file_name)
{
    os_error *e = soundcode_play_soundfile(file_name, buffer_size);
    if (e)
        wimp_report_error(e, 0, "SoundPlay");
    else
        file_playing = TRUE;
}

static void stop_playing(void)
{
    soundcode_stop_playback();
    file_playing = FALSE;

    if (quit_on_finish)
        exit(EXIT_SUCCESS);
}

// --------------------------------------------------------------------------------------------

// send a device claim on the sound system

static void claim_sound_system(bool recorded)
{
    wimp_message msg;

    msg.data.device.major = device_SOUND;
    msg.data.device.minor = 0;
    strcpy(msg.data.device.info, "SoundPlay");

    msg.size = 5*4 + 2*4 + ((strlen(msg.data.device.info)+1+3)&~3);
    msg.action = message_DEVICE_CLAIM;
    msg.your_ref = 0;
    wimp_send_message(recorded ? wimp_USER_MESSAGE_RECORDED : wimp_USER_MESSAGE, &msg, 0);
    msg_ref = msg.my_ref;
}

static void handle_data_open(wimp_message *msg)
{
    switch (msg->data.data_xfer.file_type)
    {
        case osfile_TYPE_ARMSAMP:
        case osfile_TYPE_AIFF:
        case osfile_TYPE_WAVEFORM:
        case osfile_TYPE_STSAMPLE:
        case osfile_TYPE_SOUNDLIB:
        case osfile_TYPE_AUDIOWORKS:
        case 0xF96:

            // copy file name
            strcpy(file_to_play, msg->data.data_xfer.file_name);

            // acknowledge data open
            msg->action = message_DATA_LOAD_ACK;
            msg->your_ref = msg->my_ref;
            wimp_send_message(wimp_USER_MESSAGE, msg, msg->sender);

            claim_sound_system(TRUE);

            break;
    }
}

// --------------------------------------------------------------------------------------------

static void cleanup(void)
{
    soundcode_stop_playback();
}

int main(int argc, char *argv[])
{
    int i;

    atexit(cleanup);

    task = (wimp_t)_swi(Wimp_Initialise, _INR(0,3)|_RETURN(1), 310, 0x4B534154, "SoundPlay", message_list);

    for (i = 1; i < argc; i++)
    {
        char *s = argv[i];
        if (*s == '-') switch (tolower(s[1]))
        {
            case 'b':   // set buffer size
                if (i != argc -1)
                    buffer_size = atoi(argv[++i]);
                break;

            case 'f':   // start playing file
                if (i != argc -1)
                    start_playing(argv[++i]);
                break;

            case 's':   // stop anything playing currently
                claim_sound_system(FALSE);
                exit(EXIT_SUCCESS);

            case 'q':   // quit when sound finishes
                quit_on_finish = TRUE;
                break;
        }
        else
        {
            start_playing(s);
        }
    }

    for (;;)
    {
        wimp_block block;
        int event;

        if (file_playing)
            event = _swi(Wimp_PollIdle, _INR(0,2) | _RETURN(0), MASK &~ wimp_MASK_NULL, &block, POLL_DELAY);
        else
            event = _swi(Wimp_Poll, _INR(0,1) | _RETURN(0), MASK, &block);

        switch (event)
        {
            case wimp_NULL_REASON_CODE:
                if (file_playing && soundcode_is_buffer_empty() == 3)
                    stop_playing();
                break;

            case wimp_USER_MESSAGE:
            case wimp_USER_MESSAGE_RECORDED:
                switch (block.message.action)
                {
                    case message_QUIT:
                        exit(EXIT_SUCCESS);

                    case message_PREQUIT:
                        if (file_playing)
                            stop_playing();
                        break;

                    case message_DATA_OPEN:
                        handle_data_open(&block.message);
                        break;

                    // someone want the sound system, give it to them
                    case message_DEVICE_CLAIM:
                        if (block.message.data.device.major == device_SOUND)
                            stop_playing();
                        break;

                    // someone is using the sound system and won't let it go
                    // cancel play
                    case message_DEVICE_IN_USE:
                        if (block.message.your_ref == msg_ref)
                            file_to_play[0] = 0;
                        break;

                    case message_OPEN_URL:
                    {
                        wimp_message_open_url *open = (wimp_message_open_url *)&block.message.data;
                        char *s = open->indirect.tag ? open->url : open->indirect.url;
                        if (strncmpi(s, "soundplaystop:", sizeof("soundplaystop:") - 1) == 0)
                        {
                            stop_playing();

                            block.message.your_ref = block.message.my_ref;
                            wimp_send_message(wimp_USER_MESSAGE_ACKNOWLEDGE, &block.message, block.message.sender);
                        }
                        break;
                    }
                }
                break;

            case wimp_USER_MESSAGE_ACKNOWLEDGE:
                // if our claim bounced then we can start playing safely
                if (block.message.action == message_DEVICE_CLAIM &&
                    block.message.my_ref == msg_ref &&
                    file_to_play[0]);
                {
                    start_playing(file_to_play);
                }
                break;
        }
    }

    return EXIT_SUCCESS;
}

/* eof main.c */
