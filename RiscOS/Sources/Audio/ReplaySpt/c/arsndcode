/* > arsndcode.c

 * © SJ Middleton, 1994

 * CHANGE LOG:
 *  05/10/93:   changed root for sound code to ARMovie$SoundDir
 *  08/11/93:   call alloc_nextiscalled() before allocating sound buffers
 *  16/11/93:   change starttiming to use new ARTools$Clockrate variable
 *  25/11/93:   change ARTools use to use arsnd_varval() (see arsnd.c)
 *  03/12/93:   use ARMovie$Dir if ARMovie$SoundDir not available
 *  10/12/93:   changed getsoundcode() to cope with Type 2 audio. Use getsoundcode_str() now instead.
 *              change claimsoundbuffers. changed error messages slightly.
 *  23/01/94:   fill in new arsound_hdr details for new scheme.
 *              new interface to timing.
 *              removed cache code since new sound players can stay loaded
 *  01/03/94:   new bit in polladdr flags, timing is not done if sound system disabled.
 *  xx/04/94:   only claim device when using internal sound system.
 *  07/09/94:   claimsoundbuffers() now correctly returns FALSE when failed, also removed
 *              releasesoundbuffers() as not necessary and reportedly causes problems. (ILP)
 *  18/12/94:   reorganised error handling system, changed many of the function prototypes.
 */

#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "osfile.h"

#include "msgs.h"
#include "utils.h"
#include "main.h"
#include "play.h"

#include "soundfile.h"
#include "soundplay.h"

#define MAX_FILES   2

/* ------------------------------------------------------------------------------------------------- */

#if 0

#define MATCH_STRING	    "MOVINGLINE"
#define MATCH_STRING_SIZE   (sizeof(MATCH_STRING)-1)

static int get_buffer_size(void)
{
    char *sound_dir;
    int len, sound_output_size;

    /* If using MovingLine then fix to 8 bit buffers */
    sound_output_size = 16;
    sound_dir = getenv("ARMovie$SoundDir");
    len = sound_dir ? strlen(sound_dir) : 0;

    if (len >= MATCH_STRING_SIZE)
    {
    	char leaf[sizeof(MATCH_STRING)];

    	strcpy(leaf, &sound_dir[len - MATCH_STRING_SIZE]);

    	if (strcmp(strupr(leaf), MATCH_STRING) == 0)
    	    sound_output_size = 8;
    }

    return sound_output_size;
}

#endif

/* ------------------------------------------------------------------------------------------------- */

//#define FILE_NAME_SIZE  256

static soundcode_context *soundcode__base = NULL;

/* ------------------------------------------------------------------------------------------------- */

os_error *attach_buffers(soundcode_context *sc, byte *buffer, int file_bufsize, int build_bufsize, int hw_bufsize, byte **buffer_out)
{
    replay_sound_buffer *bpA, *bpB;
    int rounded_file_bufsize;

    if (sc->in_use)
        return make_err(error_REPLAY_ALREADY_PLAYING, NULL);

    rounded_file_bufsize = (file_bufsize + 3) &~ 3;

    // allocate the buffer ourself if necessary
    if (buffer == NULL)
    {
        int total_size = rounded_file_bufsize + build_bufsize + 2*hw_bufsize;
        os_error *e = soundbuffer_alloc(total_size);
        if (e) return e;
        buffer = soundbuffer_ptr();
    }

    sc->file_buffer = buffer;
    sc->file_buffer_size = file_bufsize;
    sc->file_buffer_used = 0;

    if (build_bufsize)
    {
    	sc->build_buffer = buffer + rounded_file_bufsize;
    	sc->build_buffer_size = build_bufsize;
    }
    else
    {
    	sc->build_buffer = buffer;
    	sc->build_buffer_size = rounded_file_bufsize;
    }
    sc->build_buffer_used = 0;

    sc->hw_buffer_size = hw_bufsize - sizeof(replay_sound_buffer);

    bpA = sc->info.code.buffer[0] = (replay_sound_buffer *)(buffer + rounded_file_bufsize + build_bufsize);
    bpB = sc->info.code.buffer[1] = (replay_sound_buffer *)((char *)bpA + hw_bufsize);

    bpA->count = bpB->count = hw_bufsize - sizeof(replay_sound_buffer);
    bpA->empty = bpB->empty = 1;            /* empty buffer */
    bpA->start = bpB->start = NULL;         /* mark that givedata hasn't been called on this buffer yet */

    if (buffer_out)
        *buffer_out = buffer;

    return NULL;
}

/* ------------------------------------------------------------------------------------------------- */

static soundcode_context *search_for_file_name(char *file_name)
{
    soundcode_context *sc;
    for (sc = soundcode__base; sc; sc = sc->next)
        if (strcmpi(file_name, sc->file_name) == 0)
            break;
    return sc;
}

static os_error *unload_sound_code(soundcode_context *sc)
{
    if (sc)
    {
    	/* remove from chain */
    	ll_unlink((struct ll_header **)&soundcode__base, (struct ll_header *)sc);

        // prevent being reused
        sc->id = 0;

    	free(sc);
    }

    return NULL;
}

static void limit_num_code_files(int max_files)
{
    soundcode_context *sc = soundcode__base;
    int num_codes = 0;

    while (sc)
    {
    	soundcode_context *next = sc->next;

    	if (sc->usage == 0 && num_codes >= max_files)
    	    unload_sound_code(sc);
    	else
    	    num_codes++;

    	sc = next;
    }
}

/* ------------------------------------------------------------------------------------------------- */

/*
 * Construct the channels suffx for the code file name
 */

static char *chan_string(int nchannels)
{
    static char s[4];
    s[0] = '\0';
    if (nchannels > 1 && nchannels < 10)
        sprintf(s, "x%d", nchannels);
    return s;
}

#define SOUND_VAR_1    "ARMovie$SoundDir"
#define SOUND_VAR_2    "ReplaySupport$SoundDir"
#define SOUND_PATH_FMT "<%s>.%s"

static os_error *get_file_name(int sound_type, char *sound_name, int n_channels, char *buffer_expanded, int bufsize)
{
    os_error *e = NULL;
    char buffer[sizeof(SOUND_PATH_FMT)-1 + sizeof(SOUND_VAR_2)-1 + 10 + sizeof(".Playx2")-1 + 1];

    sprintf(buffer, SOUND_PATH_FMT, getenv(SOUND_VAR_1) ? SOUND_VAR_1 : SOUND_VAR_2, sound_name);

    switch (sound_type)
    {
        case replay_SOUND_TYPE_STANDARD:
            strcat(buffer, chan_string(n_channels));
            break;

        case replay_SOUND_TYPE_INDIRECTED:
    	    strcat(buffer, ".Play");
            strcat(buffer, chan_string(n_channels));
            break;

        default:
            e = make_err(error_REPLAY_BAD_SOUND_TYPE, NULL, sound_type);
            break;
    }

    // gstrans the file name so we can recognise the same name told differently
    // and not get confused when the ARMovie$SoundDir changes
    if (!e)
    {
        int used;
//        e = xos_gs_trans(buffer, buffer_expanded, bufsize | os_GS_RETAIN_STICK | os_GS_RETAIN_DOUBLE_QUOTE, &used, NULL);
        e = (os_error *)_swix(OS_GSTrans, _INR(0,2) | _OUT(2), buffer, buffer_expanded, bufsize | os_GS_RETAIN_STICK | os_GS_RETAIN_DOUBLE_QUOTE, &used);
        if (!e) buffer_expanded[used] = 0;  // i'm not sure that gstrans terminates the string
    }

    return e;
}

static os_error *load_sound_code(char *file_name, soundcode_context **sc_out)
{
    os_error *e;
    int obj_type, size, file_name_size;
    soundcode_context *sc;

    /* get file size and existence */
    size = 0;
//    e = xosfile_read_no_path((char *)file_name, &obj_type, SKIP, SKIP, &size, SKIP);
    e = (os_error *)_swix(OS_File, _INR(0,1) | _OUT(0) | _OUT(4), OSFile_ReadNoPath, file_name, &obj_type, &size);
    if (!e && obj_type != 1)
    	e = make_err(error_REPLAY_NO_SOUND_DRIVER, NULL, file_name);

    /* allocate space in module area for sound code */
    sc = NULL;
    file_name_size = strlen(file_name)+1;
    size += sizeof(soundcode_context) - sizeof(replay_sound_code) + file_name_size;
    if (!e && (sc = malloc(size)) == NULL)
    	e = make_oomerr(4, size);

    /* initialise space and load sound code */
    if (!e)
    {
        memset(sc, 0, offsetof(soundcode_context, info.code));

        // set id so we know it's really in use
        sc->id = SOUNDCODE_ID;

    	sc->info.flags = replay_SOUND_CODE_NEEDS_TIMING;

        /* set up value here to keep Sound16 drivers happy */
    	sc->info.poll.frequency_int = 16*1024;

//        e = xosfile_load_stamped_no_path((char *)file_name, (byte *)&sc->info.code, SKIP, SKIP, SKIP, SKIP, SKIP);
        e = (os_error *)_swix(OS_File, _INR(0,3), OSFile_LoadStampedNoPath, file_name, &sc->info.code, 0);
    }

    /* Copy (previously GSTransed) filename onto end of block */
    if (!e)
    {
        sc->file_name = (char *)sc + size - file_name_size;
        memcpy(sc->file_name, file_name, file_name_size);
    }

    if (!e)
    {
        if (sc_out)
    	    *sc_out = sc;

    	play_set_default_state(sc);

        /* add to chain */
    	ll_link((struct ll_header **)&soundcode__base, (struct ll_header *)sc);
    }
    else    /* if failure then get rid of sound code */
    	unload_sound_code(sc);

    return e;
}

static os_error *check_load_sound_code(int sound_type, char *sound_file, int n_channels, soundcode_context **psc)
{
    char buffer[256];
    os_error *e;

    e = get_file_name(sound_type, sound_file, n_channels, buffer, sizeof(buffer));
    if (!e)
    {
        soundcode_context *sc = search_for_file_name(buffer);
        if (!sc)
        {
            e = load_sound_code(buffer, &sc);

    	    // if loading new sound file, setup channels and check for too many loaded
	    if (!e)
	    {
	        sc->n_channels = n_channels;
	        limit_num_code_files(MAX_FILES);
	    }
        }

    	if (!e)
        {
            *psc = sc;
            sc->usage++;
	}
    }
    return e;
}

/* ------------------------------------------------------------------------------------------------- */

os_error *sound_code_control(os_register_block *r, void *pw)
{
    os_error *e = NULL;
    bits flags = r->registers[0];
    int reason = flags & 0xff;

    BORDER(os_COLOUR_YELLOW);

    if (reason == ReplaySoundCode_Load)
    {
        soundcode_context *sc;
        char sound_file[12], *sound_file_p;
        int sound_type;
        int n_channels;

        bits buf_flags = 0;
        int n_bits_hw = 0;

        if (flags & replay_SOUND_CODE_LOAD_FROM_SOUND_FILE)
        {
            soundfile_format *fmt = (soundfile_format *)r->registers[2];
            buf_flags = get_sound_file(fmt, sound_file, &n_bits_hw);
            sound_type = replay_SOUND_TYPE_STANDARD;
            sound_file_p = sound_file;
            n_channels = fmt->n_channels;
        }
        else
        {
            sound_type = r->registers[1];
            sound_file_p = (char *)r->registers[2];
            n_channels = r->registers[3];
        }

        e = check_load_sound_code(sound_type, sound_file_p, n_channels, &sc);
        if (!e && sc)
        {
            /* Fix for ANC-00398: flags weren't being cleared before sc was reused */
            sc->info.flags &= ~(replay_SOUND_CODE_USE_TO16 | replay_SOUND_CODE_CONVERT_IN_PLACE);
            sc->info.flags |= buf_flags;
            sc->sf.n_bits_hw = n_bits_hw;

            r->registers[0] = (int)&sc->info;
        }
    }
    else
    {
 	soundcode_context *sc;

    	if (r->registers[1] == 0 || (sc = SOUNDCODE_CONTEXT(r->registers[1]))->id != SOUNDCODE_ID)
    	    e = make_err(error_REPLAY_NO_SOUND_CODE, NULL, r->registers[1]);
        else
    	{
            switch (reason)
            {
                case ReplaySoundCode_Unload:
        	    // if unloading sound file just check to see if we need to strip some down
        	    if (r->registers[1])
        	    {
                        sc->usage--;
                        limit_num_code_files(MAX_FILES);
                    }
                    else
                        limit_num_code_files(0);
                    break;

                case ReplaySoundCode_AttachBuffers:
            	    e = attach_buffers(sc, (byte *)r->registers[2], r->registers[3], r->registers[4], r->registers[5], (byte **)&r->registers[2]);
                    break;

                case ReplaySoundCode_DetachBuffers:
            	    e = NULL;
                    break;

                case ReplaySoundCode_AttachSoundFile:
            	    e = attach_soundfile_loader(flags, sc, (soundfile_format*)r->registers[2], (os_f)r->registers[3], pw);
                    break;

                case ReplaySoundCode_AttachReplay:
            	    e = attach_replay_loader(flags, sc, (replay_header *)r->registers[2], r->registers[3], (os_f)r->registers[4], pw);
                    break;

                case ReplaySoundCode_DetachLoader:
            	    e = detach_loader(flags, sc, pw);
                    break;

                case ReplaySoundCode_SetState:
            	    e = play_set_state(flags, sc, r->registers[2], r->registers[3], r->registers[4]);
                    break;

                case ReplaySoundCode_GetState:
            	    e = play_get_state(flags, sc, &r->registers[0], &r->registers[1]);
                    break;

                case ReplaySoundCode_SetAction:
            	    e = play_set_action(flags, sc, r->registers[2], r->registers[3]);
                    break;

                case ReplaySoundCode_InitSoundFile:
            	    e = soundfile_play_init_2(sc, (soundfile_id)r->registers[2], r->registers[3], r->registers[4], pw);
                    break;
            }
        }
    }

    BORDER(os_COLOUR_BLACK);

    return e;
}

/* ------------------------------------------------------------------------------------------------- */

void arsndcode_debug_output(void)
{
    soundcode_context *sc;
    printf("Replay sound drivers loaded\n");
    for (sc = soundcode__base; sc; sc = sc->next)
        printf(" %s (%d)\n", sc->file_name, sc->usage);
}

/* ------------------------------------------------------------------------------------------------- */

/* eof arsndcode.c */
