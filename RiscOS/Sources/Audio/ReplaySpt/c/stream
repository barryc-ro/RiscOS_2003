/* > stream.c

 * © SJ Middleton. 1995

stream_io

The idea of the stream io interface is that it generalises an interface away from
being specifically tied to a file. This will mean that data can fed from memory
or from a pipe. This leads to limitations in theoperations that can be performed
but will give performance improvements in file scanning, amomgst other things.

For this implementation we are only concerned with input from a stream

*/

#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "osfind.h"
#include "osargs.h"
#include "osgbpb.h"
#include "macros.h"

#include "utils.h"
#include "msgs.h"

#include "replay.h"
#include "stream.h"

#define BUFFER_SIZE 1024

os_error *stream_open(bits flags, void *data, stream_context *stream)
{
    os_error    *e = NULL;
    bool        alloc_buffer = FALSE;

    stream->flags = flags;

    memset(stream, 0, sizeof(*stream));

    switch (flags & stream_OPEN_TYPE)
    {
        case stream_OPEN_TYPE_FILE_NAME:
//            stream->file_name = strdup(data);
//            e = xosfind_openin(osfind_NO_PATH | osfind_ERROR_IF_ABSENT | osfind_ERROR_IF_DIR,
//                    data, NULL, &stream->file_handle);
            e = (os_error *)_swix(OS_Find, _INR(0,1) | _OUT(0),
                OSFind_Openin | osfind_NO_PATH | osfind_ERROR_IF_ABSENT | osfind_ERROR_IF_DIR,
                data, (int *) /* stupid OSLib */ &stream->file_handle);
            alloc_buffer = TRUE;
            break;

        case stream_OPEN_TYPE_FILE_HANDLE:
            stream->file_handle = *(os_f *)data;
            alloc_buffer = TRUE;
            break;

        case stream_OPEN_TYPE_BUFFER:
            stream->buffer = (void *)((int *)data)[0];
            stream->buffer_size = ((int *)data)[1];
            break;
    }

    if (!e && alloc_buffer)
    {
        int unread;

        stream->buffer_size = BUFFER_SIZE;
        if ((stream->buffer = malloc(BUFFER_SIZE)) == NULL)
            e = make_oomerr(6, BUFFER_SIZE);

//        if (!e) e = xosgbpb_read(stream->file_handle, stream->buffer, stream->buffer_size, &unread);
        if (!e) e = (os_error *)_swix(OS_GBPB, _INR(0,3)|_OUT(3), OSGBPB_Read,
            stream->file_handle, stream->buffer, stream->buffer_size, &unread);
        if (!e) stream->buffer_size -= unread;
    }

    return e;
}

os_error *stream_close(stream_id stream)
{
    os_error *e = NULL;
    switch (stream->flags & stream_OPEN_TYPE)
    {
        case stream_OPEN_TYPE_FILE_NAME:
            free(stream->buffer);

//            free(stream->file_name);
            if (stream->file_handle)
                e = (os_error *)_swix(OS_Find, _INR(0,1), OSFind_Close, stream->file_handle);
//                e = xosfind_close(stream->file_handle);
            break;

        case stream_OPEN_TYPE_FILE_HANDLE:
            free(stream->buffer);
            break;

        case stream_OPEN_TYPE_BUFFER:
            break;
    }
    memset(stream, 0, sizeof(stream_context));
    return e;
}

os_error *stream_set_pos(stream_id stream, int pos)
{
    stream->current_pos = pos;
    return NULL;
}

os_error *stream_get_pos(stream_id stream, int *pos)
{
    *pos = stream->current_pos;
    return NULL;
}

os_error *stream_bget(stream_id stream, int *data)
{
    char val;
    os_error *e;

    e = stream_read(stream, &val, 1, NULL);
    if (!e) *data = val;

    return e;
}

os_error *stream_read(stream_id stream, void *buffer, int nbytes, int *unread_out)
{
    os_error *e = NULL;
    int unread = nbytes;
    switch (stream->flags & stream_OPEN_TYPE)
    {
        case stream_OPEN_TYPE_FILE_NAME:
        case stream_OPEN_TYPE_FILE_HANDLE:
            if (stream->current_pos + nbytes <= stream->buffer_size)
            {
                memcpy(buffer, (char *)stream->buffer + stream->current_pos, nbytes);
                unread = 0;
            }
            else
                e = (os_error *)_swix(OS_GBPB, _INR(0,4)|_OUT(3), OSGBPB_ReadAt,
                    stream->file_handle, buffer, nbytes, stream->current_pos, &unread);
//                e = xosgbpb_read_at(stream->file_handle, buffer, nbytes, stream->current_pos, &unread);
            break;

        case stream_OPEN_TYPE_BUFFER:
        {
            int left = stream->buffer_size - stream->current_pos;
            int read = MIN(left, nbytes);
            memcpy(buffer, (char *)stream->buffer + stream->current_pos, read);
            unread = nbytes - read;
            break;
        }
    }

    stream->current_pos += nbytes - unread;

    if (unread_out)
        *unread_out = unread;
    else if (!e && unread != 0)
        e = make_err(error_REPLAY_OUT_OF_DATA, NULL, nbytes, stream->current_pos, unread, stream->buffer_size);

    return e;
}


/*
 * Stream clients will use just the following three calls.
 *
 * Main limitation is that you can only move forwards through a stream,
 * never backwards.


os_error *stream_bget(stream_id id, int *c)
os_error *stream_read(stream_id id, void *buffer, int nbytes, int *nbytes_read)
os_error *stream_set_pos(stream_id id, int offset)
os_error *stream_get_pos(stream_id id, int *offset)

 */

/*
The initial purpose of this is to allow the SoundFile module to have a 1K
buffer of data from the start of the file that its code and the extension
modules can read from without repeated disc accesses. Note that there probably
wouldn't actually be repeated disc access as the data would be held in ADFS
file buffers but the SWIs still take time.

It would also allow us to feed data to the module from a file wholly held
in memory, or from a data stream being fed from elsewhere.

*/

/* eof stream.c */
