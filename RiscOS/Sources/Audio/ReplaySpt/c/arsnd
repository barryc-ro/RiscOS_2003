/* > arsnd.c

 * © SJ Middleton, 1993

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "replay.h"

#include "utils.h"
#include "main.h"

#define FOR_CODEC_INFO          msgs_lookup("sInf")
#define NO_ROOM	    	    	msgs_lookup("NoRoom")
#define NO_INFO                 msgs_lookup("BadTyp")

/* ---------------------------------------------------------------------------------------- */

os_error *read_sound_codec_info(bits flags, int sound_type, const char *sound_name, replay_sound_codec_info *input_info, int input_info_size, int *size_out)
{
    os_error *e;
    char buffer[128];
    replay_sound_codec_info info, *ip;
    stream_context stream;

    char *strings, **pstrings;
    int string_size;

    /* Info files only defined for type 2 (indirected) audio */
    if (sound_type != replay_SOUND_TYPE_INDIRECTED)
    	return make_err(error_REPLAY_BAD_SOUND_TYPE, NULL, sound_type);

    /* initialise variables and stuff */
    ip = &info;
    memset(&info, 0, sizeof(info));
    ip->size = sizeof(replay_sound_codec_info);

    sprintf(buffer, "<ARMovie$SoundDir>.%s.Info", sound_name);
    e = stream_open(stream_OPEN_TYPE_FILE_NAME, buffer, &stream);

    strings = NULL;
    string_size = 0;
    pstrings = input_info && input_info_size ? &strings : NULL;

    /* read out the textual data */
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* description */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->description_offset);
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* copyright */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->author_offset);

    /* only do rest if supplied an input buffer */
    if (input_info && input_info_size)
    {
        if (!e) e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
        if (!e)
        {
            if (strtoul(buffer, NULL, 10))
            	ip->flags |= replay_SOUND_CODEC_SEEKABLE;
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
        }
        if (!e)
        {
            ip->buffer_size_multiplier = (int)strtoul(buffer, NULL, 10);
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
        }
        if (!e)
        {
            if (strtoul(buffer, NULL, 10))
            	ip->flags |= replay_SOUND_CODEC_VARIABLE_SIZE;
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
        }
        if (!e)
        {
            ip->max_sample_size = read_fraction(buffer, replay_SOUND_CODEC_MAX_SIZE_SHIFT);
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
        }

    	if (e && e->errnum == error_REPLAY_OUT_OF_DATA)
    	    e = NULL;

        if (!e)
        {
            ip->per_channel_overhead = (int)strtoul(buffer, NULL, 10);

            /* check if there is enough space to write out to */
            if (input_info_size < sizeof(replay_sound_codec_info) + string_size)
                e = make_err(error_REPLAY_NO_ROOM, NULL, FOR_CODEC_INFO);
            else
            {
                if (flags & replay_RETURN_TEXT)
                {
                    ip->description_offset += sizeof(replay_sound_codec_info);
                    ip->author_offset += sizeof(replay_sound_codec_info);
                    memcpy(input_info+1, strings, string_size);
                }
                memcpy(input_info, ip, sizeof(replay_sound_codec_info));
            }
        }
    }

    /* write out size needed */
    if (size_out)
        *size_out = sizeof(replay_sound_codec_info) + string_size;

    /* clean up temporary use */
    free(strings);
    stream_close(&stream);

    return e;
}

/* ---------------------------------------------------------------------------------------- */

//* eof arinfo.c */
