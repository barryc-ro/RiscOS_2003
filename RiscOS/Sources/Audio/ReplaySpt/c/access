/* > arsnd.c

 * © SJ Middleton, 1993

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "replay.h"

#include "utils.h"
#include "main.h"

/* ---------------------------------------------------------------------------------------- */

#ifdef NO_ACCESS

static int dummy;

#else

not finished yet

#define ACCESS_FILE_1 "<ARMovie$Dir>.MovingLine.Access"
#define ACCESS_FILE_2 "<ARMovie$Dir>.Access"

static void decode_access_info(replay_access_info *info, const char *s)
{
    if (s)
    {
        info->method = (int)strtoul(s, &s, 10);
        if (*s == ',')
            info->latency = read_fraction(s+1, replay_ACCESS_LATENCY_SHIFT);
    }
}

static void find_sub_path(replay_access_info *info, const char *details, const char *match)
{
    decode_access_info(info, details);

    while (details)
    {
        char *path = strtok(NULL, " \n\r");

        details = strtok(NULL, " \n\r");

        if (details && strncmpi(path, match, strlen(path)) == 0)
            decode_access_info(info, details);
    }
}

os_error *read_access_info(bits flags, const char *filename, replay_access_info *input_info, int input_info_size, int *size_out)
{
    os_error *e = NULL;
    char buffer[128];
    replay_access_info info;
    stream_context stream;
    bool old_style;
    char *colon;

    /* write out size needed */
    if (size_out)
        *size_out = sizeof(replay_access_info);

    // check anywhere to put data
    if (input_info == NULL || input_info_size == 0)
        return NULL;

    /* initialise variables and stuff */
    info.sizeof_info = sizeof(info);
    info.flags = 0;
    info.method = 0;
    info.latency = (28 << replay_ACCESS_LATENCY_SHIFT)/100;

    memset(&stream, 0, sizeof(stream));
    old_style = FALSE;

    // check for cached variables
    colon = strchr(filename, ':');
    sprintf(buffer, "ARMovie$Access%*s", colon ? colon-filename : 256, filename);
    s = getenv(buffer);
    if (s)
    {
        find_sub_path(&info, strtok(buffer, " \n\r"), &filename[slen+1]);
    }
    else
    {
        e = stream_open(stream_OPEN_TYPE_FILE_NAME, ACCESS_FILE_1, &stream);
        if (e)
        {
            e = stream_open(stream_OPEN_TYPE_FILE_NAME, ACCESS_FILE_2, &stream);
            old_style = TRUE;
        }

        while (!e)
        {
            char *path = NULL, *details;

            /* read out a line */
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));

            /* tokenize at space boundary */
            if (!e)
                path = strtok(buffer, " \n\r");

            if (path)
            {
                int slen = strlen(path);
                if (strncmpi(filename, path, slen) == 0)
                {
                    details = strtok(NULL, " \n\r");

                    if (old_style)
                    {
                        decode_access_info(&info, details);
                        break;
                    }
                    else if (filename[slen] == ':')
                    {
                        find_sub_path(&info, details, &filename[slen+1]);
                    }
                }
            }
        }

    	/* clean up temporary use */
        stream_close(&stream);

    }

    /* write out info */
    memcpy(input_info, &info, MIN(input_info_size, sizeof(replay_access_info)));

    return e;
}

#endif

/* ---------------------------------------------------------------------------------------- */

/* eof access.c */
