/* > play.c

 * © SJ Middleton, 1994

 */

#include <limits.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "kernel.h"

#include "macros.h"
#include "osgbpb.h"
#include "replay.h"
#include "soundfile.h"

#include "msgs.h"
#include "main.h"
#include "play.h"
#include "utils.h"
#include "soundplay.h"

typedef struct
{
    int offset, size;
} chunk_info;

#define TICKER_DURATION	10

#define MINIMUM_BYTES_PLAYABLE  256     /* arbitrary number below which we don't call the replay sound code */

/* ----------------------------------------------------------------------------------------- */

extern os_error *call_to16_handler(const void *in, void *out, int nbytes, soundfile_format *fmt, int *out_used);

/* ----------------------------------------------------------------------------------------- */

static os_error *get_data(soundcode_context *sc, int chunk_start, int max_chunk_size)
{
    os_error *e = NULL;
    int current_chunk = sc->current_chunk;
    os_f file_handle = (os_f)sc->stream_handle;

    int size, unread;

    int start_offset, end_offset;

    // start_offset is within chunk
    start_offset = current_chunk == sc->start_chunk ? sc->start_chunk_byte_offset : 0;

    // end_offset is within chunk
    end_offset = max_chunk_size;
    if (current_chunk == sc->end_chunk && end_offset > sc->end_chunk_byte_offset)
    	end_offset = sc->end_chunk_byte_offset;

    if (end_offset > sc->file_buffer_size)
    	end_offset = sc->file_buffer_size;

    sc->file_buffer_used = 0;

    size = end_offset - start_offset;
    if (size > 0)
    {
    	/* read data and check for missing at end of file */
//    	e = xosgbpb_read_at(file_handle, sc->file_buffer,
//            size, chunk_start + start_offset, &unread);
    	e = (os_error *)_swix(OS_GBPB, _INR(0,4) | _OUT(3),
    	    OSGBPB_ReadAt, file_handle, sc->file_buffer,
            size, chunk_start + start_offset, &unread);

    	if (!e)
    	    sc->file_buffer_used = size - unread;
    }

    /* increment chunk number even if there is an error for safety */
    sc->current_chunk = current_chunk + 1;

#ifndef NDEBUG
    tracker_writef(debugw, "start %d size %d unread %d\n",
    	chunk_start + start_offset, size, unread);
#endif

    return e;
}

static os_error *load_replay_chunk_buffer(soundcode_context *sc)
{
    os_error *e = NULL;
    chunk_info *chunk_list = &((chunk_info *)sc->loader_data_ptr)[sc->current_chunk];

    e = get_data(sc, chunk_list->offset, chunk_list->size);

    return e;
}

static os_error *load_stream_buffer(soundcode_context *sc)
{
    os_error *e = NULL;
    soundfile_format *fmt = (soundfile_format *)sc->loader_data_ptr;

    int chunk_start = sc->current_chunk*sc->file_buffer_size;

    // strictly speaking we should limit the chunk sze to the file_buffer_size
    // but that gets done for safety anyway within get_data()
    e = get_data(sc, fmt->data_offset + chunk_start, fmt->data_length - chunk_start);

    /* check for conversion */
    sc->build_buffer_used = 0;
    if (!e && sc->file_buffer_used && fmt->to16_handler && sc->info.flags & replay_SOUND_CODE_USE_TO16)
    	e = call_to16_handler(sc->file_buffer, sc->build_buffer, sc->file_buffer_used, fmt,
    	    	&sc->build_buffer_used);
    return e;
}

#if 0
static os_error *(*user_load_fn)(void *file_buffer, int *buffer_size, void *handle);

static os_error *load_user_buffer(soundcode_context *sc)
{
    os_error *e;
    int size = sc->file_buffer_size;

    e = (sc->loader_data[0])(sc->file_buffer, &size, (void *)sc->loader_data[1]);

    sc->file_buffer_used = e ? 0 : size;

    sc->current_chunk++;

    return e;
}
#endif

/* ----------------------------------------------------------------------------------------- */

static void action_pause(soundcode_context *sc)
{
    sc->info.poll.global_flags |= replay_POLL_PAUSE;
}

/* ----------------------------------------------------------------------------------------- */

static soundcode_context *sound_playing = NULL;
static bool call_back_active = FALSE;

/*
 * On the callback, fill the hardware buffers and is there is an error stop playback.
 * filling the hw buffers may well of course involve filling the other buffers first.
 */

typedef void (*ardatafn)(void *data, int size);

int ticker_call_back(os_register_block *r, void *pw)
{
    soundcode_context *sc = sound_playing;
    os_error *e = NULL;

    int disabled = FALSE;

    /* enable irqs and set semaphore */
    if (sc->enable_irqs)
    {
        disabled = _kernel_irqs_disabled();
        if (disabled) _kernel_irqs_on();
    }

    BORDER(os_COLOUR_RED);

    /* load data and pass to hw buffers */
    if (sc->load_data_fn && sc->file_buffer)
        e = sc->load_data_fn(sc);

    if (!e && sc->info.code.buffer[0])
    {
        void *buffer;
        int used;
        if (sc->build_buffer_used)
        {
            buffer = sc->build_buffer;
            used = sc->build_buffer_used;
        }
        else
        {
            buffer = sc->file_buffer;
            used = sc->file_buffer_used;
        }

        BORDER(os_COLOUR_MID_LIGHT_GREY);

        /* ensure we don't overrun the hw buffer */
        if (used > sc->hw_buffer_size)
            used = sc->hw_buffer_size;

#ifndef NDEBUG
    tracker_writef(debugw, "givedata @%p %d (file used %d build used %d)\n",
    	buffer, used, sc->file_buffer_used, sc->build_buffer_used);
#endif

        if (used > MINIMUM_BYTES_PLAYABLE)
    	    ((ardatafn)(int)&sc->info.code.data_entry)(buffer, used);
    }

    /* set flag for front end if had an error */
    if (e)
    {
    	sc->info.flags |= replay_SOUND_CODE_HAD_ERROR;
        sc->info.error = e;
    }

    /* disable irqs (if necessary) and clear semaphore */
    if (disabled) _kernel_irqs_off();

    call_back_active = FALSE;

    BORDER(os_COLOUR_BLUE);

    return 1;	/* return with MOVS pc, lr */
    NOT_USED(pw);
    NOT_USED(r);
}

/*
 * On the ticker event, if one of the buffers is empty then schedule a callback.
 */

int ticker_event(os_register_block *r, void *pw)
{
    soundcode_context *sc = sound_playing;

/*    BORDER(OS_COLOUR_WHITE); */

    if (sc->info.flags & (replay_SOUND_CODE_HAD_ERROR | replay_SOUND_CODE_STOPPED))
    	return 1;

    if (!call_back_active)
    {
    	bool empty1 = sc->info.code.buffer[0]->empty;
    	bool empty2 = sc->info.code.buffer[1]->empty;
    	bool maybe_finished = FALSE;

    	if (sc->current_chunk > sc->end_chunk)   	/* loaded all chunks */
    	{
    	    /* loop back to beginning if at end */
    	    if (sc->n_times_left > 1)
    	    {
    	        sc->n_times_left--;
    	    	sc->current_chunk = 0;

    	    	// disable the initial offset
    	    	sc->start_chunk = -1;
    	    }
    	    else
    	    	maybe_finished = TRUE;
    	}

    	if (maybe_finished)
    	{
    	    if (empty1 && empty2) 	    	    	    	/* if both empty */
    	    	sc->info.flags |= replay_SOUND_CODE_STOPPED;
        }
    	else
    	{
    	    if (empty1 || empty2)   	    	    	    	/* if either empty */
//    	    	if (xos_add_call_back((void *)(int)ticker_call_back_veneer, pw) == NULL)
    	    	if (_swix(OS_AddCallBack, _INR(0,1), (void *)(int)ticker_call_back_veneer, pw) == NULL)
    	    	    call_back_active = TRUE;
    	}
    }

    if ((unsigned)sc->start_sample + (unsigned)sc->info.code.samples_played_int >= sc->pending_action_sample)
    {
        if (sc->pending_action)
            sc->pending_action(sc);
        sc->pending_action_sample = UINT_MAX;
    }

/*    BORDER(os_COLOUR_BLACK); */

    return 1;	/* return with MOVS pc, lr */
    NOT_USED(r);
}

static void preload_buffers(soundcode_context *sc)
{
    sc->current_chunk = sc->start_chunk;

    sc->n_times_left = sc->n_times_to_play;

    sc->info.code.samples_played_int = 0;
    sc->info.code.samples_played_frac = 0;

    if (sc->current_chunk < sc->n_chunks || --sc->n_times_left > 0)
        ticker_call_back(NULL, NULL);
}

/* ----------------------------------------------------------------------------------------- */

os_error *attach_replay_loader(bits flags, soundcode_context *sc, replay_header *hdr, int sound_track, os_f file_handle, void *pw)
{
    os_error *e = NULL;
    chunk_info *chunk_list;

    if (sound_playing)
        e = make_err(error_REPLAY_ALREADY_PLAYING, NULL);

    sound_playing = sc;
    sc->in_use = TRUE;

    /* allocate space for a cutdown chunk list */
    chunk_list = NULL;

    if (!e)
    {
    	int size = hdr->n_chunks*sizeof(chunk_info);
    	if ((chunk_list = malloc(size)) == NULL)
    	    e = make_oomerr(5, size);
    }

    /* Build a cutdown chunk list for just this track */
    if (!e)
    {
    	int i, track, samples_per_chunk;
    	replay_sound_track *sound;
    	chunk_info *chunk_pair = chunk_list;
    	replay_catalogue_chunk *chunk = BASE_CATALOGUE_CHUNK(hdr);

    	for (i = 0; i < hdr->n_chunks; i++, chunk_pair++, chunk = NEXT_CATALOGUE_CHUNK(chunk, hdr->sizeof_catalogue_chunk))
    	{
    	    chunk_pair->offset = chunk->video_offset;
    	    chunk_pair->offset += chunk->video_size;
    	    for (track = 0; track < sound_track; track++)
    	    	chunk_pair->offset += chunk->sound_size[track];

    	    chunk_pair->size = chunk->sound_size[sound_track];
    	}

    	sound = &((replay_sound_track *)(hdr+1))[sound_track];
    	samples_per_chunk = muldiv(sound->sample_rate, hdr->frames_per_chunk, hdr->frame_rate);
#if replay_SAMPLE_RATE_SHIFT != replay_FRAME_RATE_SHIFT
# error  frame rate don't match
#endif

    	sc->info.flags &= ~(replay_SOUND_CODE_STOPPED | replay_SOUND_CODE_HAD_ERROR);

    	sc->loader_data_ptr = chunk_list;
        sc->load_data_fn = load_replay_chunk_buffer;

    	sc->stream_handle = file_handle;
    	sc->n_chunks = hdr->n_chunks;

    	// get start and end stuff
    	sc->start_chunk = sc->start_sample / samples_per_chunk;
    	if (sound->flags & replay_SOUND_SEEKABLE)
    	{
    	    sc->start_chunk_byte_offset = (sc->start_sample % samples_per_chunk)*sound->n_channels*sound->n_bits/8;
    	}
    	else
    	{
    	    sc->start_sample = sc->start_chunk*samples_per_chunk;
    	    sc->start_chunk_byte_offset = 0;
    	}

    	sc->end_chunk = sc->end_sample == -1 ? hdr->n_chunks-1 : sc->end_sample / samples_per_chunk;
    	if (sound->flags & replay_SOUND_SEEKABLE)
    	{
    	    sc->end_chunk_byte_offset = sc->end_sample == -1 ?
    	        sc->file_buffer_size :
    	        (sc->end_sample % samples_per_chunk)*sound->n_channels*sound->n_bits/8;
    	}
    	else
    	{
    	    sc->end_sample = sc->end_chunk*samples_per_chunk;
    	    sc->end_chunk_byte_offset = sc->file_buffer_size;
    	}

        sc->enable_irqs = (flags & 0x10000) == 0;

        preload_buffers(sc);

        /* set up the ticker */
//        e = xos_call_every(TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
        e = (os_error *)_swix(OS_CallEvery, _INR(0,2), TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
    }

    if (e)
    	detach_loader(flags, sc, pw);

    return e;
}

/* ----------------------------------------------------------------------------------------- */

os_error *attach_soundfile_loader(bits flags, soundcode_context *sc, soundfile_format *input_fmt, os_f file_handle, void *pw)
{
    os_error *e = NULL;
    soundfile_format *fmt;
    int samples_per_chunk;

    if (sound_playing)
        e = make_err(error_REPLAY_ALREADY_PLAYING, NULL);

    sound_playing = sc;
    sc->in_use = TRUE;

    fmt = NULL;
    if (!e && (fmt = malloc(sizeof(soundfile_format))) == NULL)
        e = make_oomerr(5, sizeof(soundfile_format));

    samples_per_chunk = 0;
    if (!e)
    {
        *fmt = *input_fmt;
        sc->loader_data_ptr = fmt;
        sc->load_data_fn = load_stream_buffer;

        samples_per_chunk = muldiv(sc->file_buffer_size, 8 << soundfile_SAMPLE_MAX_SIZE_SHIFT, fmt->sample_max_size*fmt->n_channels);

    	sc->info.flags &= ~(replay_SOUND_CODE_STOPPED | replay_SOUND_CODE_HAD_ERROR);

    	sc->n_chunks = (input_fmt->n_samples-1)/samples_per_chunk + 1;
    	sc->stream_handle = file_handle;

    	sc->start_chunk = sc->start_sample / samples_per_chunk;
    	sc->start_chunk_byte_offset = (sc->start_sample % samples_per_chunk)*fmt->n_channels*fmt->n_bits/8;
        sc->start_chunk_byte_offset -= sc->start_chunk_byte_offset % fmt->block_align;

    	if (sc->end_sample == -1)
    	{
    	    sc->end_chunk = sc->n_chunks-1;
    	    sc->end_chunk_byte_offset = sc->file_buffer_size;
    	}
    	else
    	{
    	    sc->end_chunk = sc->end_sample / samples_per_chunk;
    	    sc->end_chunk_byte_offset = (sc->end_sample % samples_per_chunk)*fmt->n_channels*fmt->n_bits/8;
            sc->end_chunk_byte_offset -= sc->end_chunk_byte_offset % fmt->block_align;
        }

        sc->enable_irqs = (flags & 0x10000) == 0;

#ifndef NDEBUG
    	tracker_writef(debugw, "samples_per_chunk %d n samples %d n chunks %d n times %d\n",
    	    samples_per_chunk, input_fmt->n_samples, sc->n_chunks, sc->n_times_to_play);
    	tracker_writef(debugw, "start %d/%d end %d/%d\n",
    	    sc->start_chunk, sc->start_chunk_byte_offset,
    	    sc->end_chunk, sc->end_chunk_byte_offset);
#endif
        preload_buffers(sc);

        /* set up the ticker */
//        e = xos_call_every(TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
        e = (os_error *)_swix(OS_CallEvery, _INR(0,2), TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
    }

    if (e)
    	detach_loader(flags, sc, pw);

    return e;
}

/* ----------------------------------------------------------------------------------------- */

#if 0
os_error *attach_user_loader(bits flags, soundcode_context *sc, user_load_fn user_fn, void *user_handle, int n_chunks, void *pw)
{
    os_error *e = NULL;
    soundfile_format *fmt;
    int samples_per_chunk;

    if (sound_playing)
        e = make_err(error_REPLAY_ALREADY_PLAYING, NULL);

    samples_per_chunk = 0;
    if (!e)
    {
        sc->load_data_fn = load_user_buffer;
        sc->loader_data[0] = (int)user_fn;
        sc->loader_data[1] = (int)user_handle;
        sc->n_chunks = n_chunks;

    	sc->info.flags &= ~(replay_SOUND_CODE_STOPPED | replay_SOUND_CODE_HAD_ERROR);

    	sc->start_chunk = 0;
    	sc->start_chunk_byte_offset = 0;
    	sc->end_chunk = sc->n_chunks-1;
    	sc->end_chunk_byte_offset = sc->file_buffer_size;

        sc->enable_irqs = (flags & 0x10000) == 0;

        preload_buffers(sc);

        /* set up the ticker */
//        e = xos_call_every(TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
        e = (os_error *)_swix(OS_CallEvery, _INR(0,2), TICKER_DURATION, (void *)(int)ticker_event_veneer, pw);
    }

    if (e)
    	detach_loader(flags, sc, pw);

    return e;
}
#endif

/* ----------------------------------------------------------------------------------------- */

os_error *detach_loader(bits flags, soundcode_context *sc, void *pw)
{
    os_error *e = NULL;

    if (sc->in_use)
    {
        sc->in_use = FALSE;
        sound_playing = NULL;

        if (call_back_active)
        {
//    	    xos_remove_call_back((void *)(int)ticker_call_back_veneer, pw);
    	    _swix(OS_RemoveCallBack, _INR(0,1), (void *)(int)ticker_call_back_veneer, pw);
            call_back_active = FALSE;
        }
//        xos_remove_ticker_event((void *)(int)ticker_event_veneer, pw);
 	_swix(OS_RemoveTickerEvent, _INR(0,1), (void *)(int)ticker_event_veneer, pw);
    }

    free((void *)sc->loader_data_ptr);
    sc->loader_data_ptr = 0;

    play_set_default_state(sc);

    if (sc->info.code.buffer[0])
    {
        sc->file_buffer = sc->build_buffer = NULL;
        sc->info.code.buffer[0] = sc->info.code.buffer[1] = NULL;

        soundbuffer_alloc(0);
    }

    return e;
    NOT_USED(flags);
}

/* ----------------------------------------------------------------------------------------- */

// setup here any default values that are non-zero

void play_set_default_state(soundcode_context *sc)
{
    sc->start_sample = 0;
    sc->end_sample = -1;
    sc->n_times_to_play = 1;
    sc->pending_action_sample = UINT_MAX;
}

os_error *play_set_state(bits flags, soundcode_context *sc, int start_sample, int end_sample, int n_times_to_play)
{
    sc->start_sample = MAX(0, start_sample);
    sc->end_sample = end_sample;
    sc->n_times_to_play = n_times_to_play;

    return NULL;
    NOT_USED(flags);
}

/* ----------------------------------------------------------------------------------------- */

os_error *play_get_state(bits flags, soundcode_context *sc, int *current_sample, int *times_played)
{
    if (current_sample)
    {
        int played = sc->info.code.samples_played_int;
        if (played < 0)
            played -= INT_MIN;
    	*current_sample = sc->start_sample + played;
    }
    if (times_played)
    	*times_played = sc->n_times_to_play - sc->n_times_left;

    return NULL;
    NOT_USED(flags);
}

/* ----------------------------------------------------------------------------------------- */

os_error *play_set_action(bits flags, soundcode_context *sc, int reason, int at_sample)
{
    switch (reason)
    {
        case replay_SOUND_CODE_ACTION_PAUSE:
            sc->pending_action = action_pause;
            break;

    	default:
    	    return NULL;
    }

    sc->pending_action_sample = at_sample;

    return NULL;
}

/* ----------------------------------------------------------------------------------------- */

#ifndef NDEBUG
void play_debug_output(void)
{
    soundcode_context *sc = sound_playing;
    if (sc)
    {
    	int i;

        printf("Play info\n");
        printf("Next %p Prev %p\n", sc->next, sc->prev);
        printf("Flags %08x Usage %d N channels %d\n", sc->info.flags, sc->usage, sc->n_channels);
        printf("File name '%s'\n", sc->file_name);
        printf("Loader data %p %x %x %x %x\n", sc->loader_data_ptr, sc->loader_data[0], sc->loader_data[1], sc->loader_data[2], sc->loader_data[3]);
    	printf("File  buffer %p size %d used %d\n", sc->file_buffer, sc->file_buffer_size, sc->file_buffer_used);
    	printf("Build buffer %p size %d used %d\n", sc->build_buffer, sc->build_buffer_size, sc->build_buffer_used);
    	printf("Hware start %p count %d empty %d\n", sc->info.code.buffer[0]->start, sc->info.code.buffer[0]->count, sc->info.code.buffer[0]->empty);
    	printf("Hware start %p count %d empty %d\n", sc->info.code.buffer[1]->start, sc->info.code.buffer[1]->count, sc->info.code.buffer[1]->empty);
    	printf("Poll flags %x chunk_time %d freq %d (.%x) quality %d stereo flags %x\n",
    	    sc->info.poll.global_flags, sc->info.poll.chunk_time, sc->info.poll.frequency_int, sc->info.poll.frequency_frac, sc->info.poll.quality, sc->info.poll.stereo_flags);
    	printf("Code @ %p, flags %x samples played %d\n", &sc->info.code, sc->info.code.interface_flags, sc->info.code.samples_played_int);
        printf("State %d mode %d datain %d dataout %d\n", sc->info.code.code[16], sc->info.code.code[17], sc->info.code.code[18], sc->info.code.code[19]);

    	if (sc->load_data_fn == load_replay_chunk_buffer) for (i = 0; i < sc->n_chunks; i++)
    	{
    	    chunk_info *ci = &((chunk_info *)sc->loader_data_ptr)[i];
    	    printf("Chunk %d: %d (%d)\n", i, ci->offset, ci->size);
    	}
    }
}

#endif

/* ----------------------------------------------------------------------------------------- */

/* eof play.c */
