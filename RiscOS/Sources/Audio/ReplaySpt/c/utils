/* > utils.c

 * © SJ Middleton, 1992

 */

#include <ctype.h>
#include <limits.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "msgs.h"

#include "stream.h"
#include "utils.h"

os_error *file_readlinebuffer(stream_id stream, char *buffer, int bufsize)
{
    os_error *e;
    int data;
    int i = 0;
    do
    {
        e = stream_bget(stream, &data);
        buffer[i++] = data;
    }
    while (e == NULL && data != '\n' && i < bufsize);
    buffer[--i] = '\0';
    return e;
}

/* --------------------------------------------------------------------- */

char *strdup(const char *s)
{
    char *s1 = NULL;
    if (s)
    {
        s1 = malloc(strlen(s) + 1);
        if (s1)
            strcpy(s1, s);
    }
    return s1;
}

/* compare and search functions */

int strncmpi(const char *s1, const char *s2, size_t n)
{
    if (s1 && s2)
    {
        int i;
        for (i = 0; i < n; i++)
        {
            int c1 = *s1++,
                c2 = *s2++;
            c1 = toupper(c1);
            c2 = toupper(c2);
            if (c1 != c2)
                return c1 - c2;
            else if (c1 == '\0')
                return 0;
        }
    }
    return 0;
}

int strcmpi(const char *s1, const char *s2)
{
    return strncmpi(s1, s2, UINT_MAX);
}

char *strstri(const char *s1, const char *s2)
{
    if (s1 && s2)
    {
        int i,
            s2n = strlen(s2),
            last_pos = strlen(s1) - s2n;

        for (i = 0; i <= last_pos; i++, s1++)
            if (strncmpi(s1, s2, s2n) == 0)
                return (char *)s1;
    }
    return NULL;
}

/* --------------------------------------------------------------------- */

char *strupr(char *s1)
{
    if (s1)
    {
        char *s = s1;
        int c;
        while ((c = *s) != '\0')
            *s++ = toupper(c);
    }
    return s1;
}

/* --------------------------------------------------------------------- */

/* count number of occurrences of a character */

int strcount(const char *s, int c)
{
    int count = 0;
    do
    {
        s = strchr(s, c);
        if (s)
        {
             count++;
             s++;
        }
    }
    while (s != NULL);
    return count;
}

/* --------------------------------------------------------------------- */

#define GRANULARITY 256

os_error *check_extent(char **pstrings, int *pstring_size, int len)
{
    os_error *e = NULL;

    if (pstrings)
    {
    	int original_size, new_size;

    	original_size = *pstring_size;
    	new_size = original_size + len;

    	original_size = (original_size + (GRANULARITY-1)) &~ (GRANULARITY-1);
    	new_size = (new_size + (GRANULARITY-1)) &~ (GRANULARITY-1);

    	if (original_size != new_size)
    	{
    	    char *new_strings = malloc(new_size);
    	    if (new_strings == NULL)
    	    	e = make_oomerr(7, new_size);
    	    else
    	    {
    	        if (*pstrings)
    	    	    memcpy(new_strings, *pstrings, *pstring_size);
    	    	*pstrings = new_strings;
    	    }
    	}
    }

    *pstring_size += len;

    return e;
}

/*
 * return the length and copy to end of header.
 * Can't use realloc() due to apparent bug in 3.1
 */

os_error *check_string(const char *buffer, char **pstrings, int *pstring_size, int *poffset)
{
    os_error *e;
    int offset = *pstring_size;

    e = check_extent(pstrings, pstring_size, strlen(buffer)+1);

    if (!e && pstrings)
    {
    	strcpy(*pstrings + offset, buffer);
        *poffset = offset;
    }

    return e;
}

int read_fraction(const char *s1, int precision)
{
    char *s;
    int val;

    val = (int)strtoul(s1, &s, 10) << precision;
    if (*s == '.')
    {
    	int c, divisor;
    	int max_divisor = 10 << precision;

        for (divisor = 10; divisor < max_divisor; divisor *= 10)
        {
            c = *(++s);
            if (!isdigit(c))
           	break;

            val += ((c - '0') << precision) / divisor;
        }
    }

    return val;
}

/* --------------------------------------------------------------------- */

void ll_unlink(struct ll_header **base, struct ll_header *hdr)
{
    if (hdr->prev)
    	hdr->prev->next = hdr->next;
    else if (*base == hdr)
    	*base = hdr->next;

    if (hdr->next)
    	hdr->next->prev = hdr->prev;
}

void ll_link(struct ll_header **pbase, struct ll_header *hdr)
{
    struct ll_header *base = *pbase;
    hdr->next = base;
    if (base)
    	base->prev = hdr;
    *pbase = hdr;
}

// -----------------------------------------------------------------------------------

#ifndef NDEBUG

tracker_w debugw = 0;

os_error *tracker_writef(tracker_w w, const char *fmt, ...)
{
    va_list ap;
    char buffer[256];

    va_start(ap, fmt);
    vsprintf(buffer, fmt, ap);
    va_end(ap);

    return xtracker_writes(w, buffer);
}

#endif

/* --------------------------------------------------------------------- */

/* eof utils.c */
