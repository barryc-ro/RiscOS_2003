/* > arinfo.c

 * © SJ Middleton, 1993

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "replay.h"

#include "utils.h"
#include "main.h"

#define TEMPORAL_STRING         "TEMPORAL"

/* must define these in uppercase */

/*
#define COLOURSPACE_YUV         "YUV 5,5,5"
#define COLOURSPACE_RGB         "RGB 5,5,5"
#define COLOURSPACE_YUV24       "YUV 8,8,8"
#define COLOURSPACE_RGB24       "RGB 8,8,8"
#define COLOURSPACE_PALETTE     "8"
 */

/* ---------------------------------------------------------------------------------------- */

bool read_video_codec_info_cached(int video_type, const char *video_name, replay_video_codec_info *info)
{
    char var[24];
    char *s;
    sprintf(var, "ARMovie$Decom%d", video_type);
    if (video_type == replay_VIDEO_TYPE_INDIRECTED && video_name)
        strcat(var, video_name);
    strcat(var, "Info");

    memset(info, 0, sizeof(*info));
    info->size = sizeof(*info);

    s = getenv(var);
    if (s)
    {
//        info->flags = s[0] == '1' ? replay_VIDEO_CODEC_HAS_RUNIMAGE : 0;
        info->flags = s[1] == '1' ? 0 : replay_VIDEO_CODEC_TEMPORAL;
        sscanf(s+2, "%d,%d,%d", &info->bits_per_pixel, &info->x.inc, &info->y.inc);

        if (info->flags & replay_VIDEO_CODEC_TEMPORAL)
            info->bits_per_pixel = 0;

        // armovie stores inc - 1
        info->x.inc++;
        info->y.inc++;

        return TRUE;
    }

    return FALSE;
}

os_error *read_video_codec_info(bits flags, int video_type, const char *video_name, replay_video_codec_info *input_info, int input_info_size, int *size_out)
{
    os_error *e;
    char buffer[128];
    replay_video_codec_info info, *ip;
    stream_context stream;

    char *strings = NULL, **pstrings;
    int string_size = 0;

    int *colour_space_offset_array = NULL;
    int colour_space_offset_array_size = 0;
    int colour_spaces_offset = 0;

    /* initialise variables and stuff */

    ip = &info;
    memset(&info, 0, sizeof(info));
    ip->size = sizeof(replay_video_codec_info);

    if (video_type == 1)
    	strcpy(buffer, "<ARMovie$Dir>.MovingLine.Info");
    else if (video_type == 15)
    	sprintf(buffer, "<ARMovie$Dir>.Decomp15.%s.Info", video_name);
    else
    	sprintf(buffer, "<ARMovie$Dir>.Decomp%d.Info", video_type);

    e = stream_open(stream_OPEN_TYPE_FILE_NAME, buffer, &stream);

    pstrings = input_info && input_info_size ? &strings : NULL;

    /* read out the textual data */
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* description */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->description_offset);
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* copyright */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->author_offset);

#ifndef SMALL_VERSION
    if (!e)
        e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
    if (!e)
    {
        ip->bits_per_pixel = (int)strtoul(buffer, NULL, 10);
        e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
    }
    if (!e)
    {
        sscanf(buffer, "%d;%d;%d", &ip->x.inc, &ip->x.min, &ip->x.max);
        e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
    }
    if (!e)
    {
        sscanf(buffer, "%d;%d;%d", &ip->y.inc, &ip->y.min, &ip->y.max);
        e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
    }
    if (!e)
    {
        if (strstr(strupr(buffer), TEMPORAL_STRING))
            ip->flags |= replay_VIDEO_CODEC_TEMPORAL;
        e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
    }

    if (!e)
    {
    	// count colour spaces
    	ip->n_colour_spaces = strcount(buffer, ';') + 1;
    	if (flags & replay_RETURN_TEXT)
    	{
    	    colour_space_offset_array_size = ip->n_colour_spaces*sizeof(int);

    	    // add string to string block
    	    if (!e)
    	        e = check_string(buffer, pstrings, &string_size, &colour_spaces_offset);
    	}
    }
#endif

    if (e && e->errnum == error_REPLAY_OUT_OF_DATA)
    	e = NULL;

    /* only do rest if supplied an input buffer */
    if (!e && input_info && input_info_size)
    {
#ifndef SMALL_VERSION
        if (colour_space_offset_array_size && flags & replay_RETURN_TEXT)
        {
            // allocate temp space
            if ((colour_space_offset_array = malloc(colour_space_offset_array_size)) == NULL)
        	e = make_oomerr(3, colour_space_offset_array_size);

       	    // decode the colour space info
       	    if (!e)
       	    {
                char *s = strtok(*pstrings + colour_spaces_offset, ";");
                int i = 0;
                if (s) do
                {
       	    	    s += strspn(s, " ");
               	    colour_space_offset_array[i++] = s - *pstrings;
                }
                while ((s = strtok(NULL, ";")) != NULL);
       	    }
        }
#endif
        if (!e)
        {
            /* check if there is enough space to write out to */
            if (input_info_size < sizeof(replay_video_codec_info) + colour_space_offset_array_size + string_size)
                e = make_err(error_REPLAY_NO_ROOM, NULL, msgs_lookup("O3"));
            else
            {
                if (flags & replay_RETURN_TEXT)
                {
    	    	    int i;
    	    	    int offset = sizeof(replay_video_codec_info) + colour_space_offset_array_size;

#ifndef SMALL_VERSION
    	    	    /* adjust colour space string ptrs and copy to output */
    	    	    if (colour_space_offset_array)
    	    	    {
    	    	    	for (i = 0; i < ip->n_colour_spaces; i++)
    	    	    	    colour_space_offset_array[i] += offset;
    	    	    	memcpy(input_info+1, colour_space_offset_array, colour_space_offset_array_size);
    	    	    }
#endif
    	    	    /* adjust text ptrs and copy to output */
                    ip->description_offset += offset;
                    ip->author_offset += offset;
    	    	    if (string_size)
                    	memcpy((char *)(input_info+1) + colour_space_offset_array_size, strings, string_size);
                }
                memcpy(input_info, ip, sizeof(replay_video_codec_info));
            }
        }
    }

    /* write out size needed */
    if (size_out)
        *size_out = sizeof(replay_video_codec_info) + colour_space_offset_array_size + string_size;

    /* clean up temporary use */
    free(strings);
    free(colour_space_offset_array);
    stream_close(&stream);

    return e;
}

/* ---------------------------------------------------------------------------------------- */

//* eof arinfo.c */
