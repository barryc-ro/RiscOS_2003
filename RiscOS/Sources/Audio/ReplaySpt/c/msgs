/* > msgs.c

 * © SJ Middleton, 1995

 * Module based message and error handling

 */

#include <stdarg.h>
#include <stdio.h>

#include "swis.h"

#include "replay.h"

#include "msgs.h"

/*
static messagetrans_control_block msgs_cb;

char *msgs_lookup(const char *msg_token)
{
    char *result;
    os_error *e;
    e = xmessagetrans_lookup(&msgs_cb, (char *)msg_token, NULL, 0, NULL, NULL, NULL, NULL, &result, SKIP);
    if (e)
    	return e->errmess;
    return result;
}
*/

os_error *make_err(int errnum, const char *fmt_token, ...)
{
    va_list ap;
    os_error error;
    char tag[32];

    error.errnum = errnum;

    va_start(ap, fmt_token);

    if (fmt_token == NULL)
    {
        sprintf(tag, "E%02x", errnum & 0x3f);
        fmt_token = msgs_lookup(tag);
    }

    vsprintf(error.errmess, fmt_token, ap);
    va_end(ap);

//    return xmessagetrans_copy_error(&error, NULL);
    return (os_error *)_swix(MessageTrans_CopyError, _IN(0), &error);
}

/*
#define os_ERROR(N) 	    	struct { bits errnum; char errmess[N]; }
#define ERR_BLOCK(num, tag) 	os_ERROR(sizeof(#tag)) err__##tag = { num, #tag }
#define ERR_PTR(tag)	    	((os_error *)&err_##tag)
 */

/*
"Out of memory allocating %0 bytes for %1"
#define ERRTAG_OOM  "OOM"
static os_ERROR(sizeof(ERRTAG_OOM)) err__oom = { 0, ERRTAG_OOM };
static ERR_BLOCK(0, OOM);
 */


os_error *make_oomerr(int code, int nbytes)
{
    char tag[8];
    sprintf(tag, "O%d", code);
    return make_err(error_REPLAY_NO_MEM, NULL, nbytes, msgs_lookup(tag));
}

/*
os_error *msgs_init(const char *msgs_file)
{
    return xmessagetrans_open_file(&msgs_cb, (char *)msgs_file, NULL);
}

os_error *msgs_close(void)
{
    return xmessagetrans_close_file(&msgs_cb);
}
*/
/* eof errors.c */
