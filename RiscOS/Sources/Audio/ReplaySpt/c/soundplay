/* > soundplay.c

 * © SJ Middleton, 1995

 */

#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"
#include "kernel.h"

#include "osmodule.h"
#include "replay.h"
#include "soundfile.h"

#include "msgs.h"
#include "play.h"
#include "soundplay.h"
#include "utils.h"

// ---------------------------------------------------------------------------------------------------

#define SOUND_DA_LIMIT	(2*1024*1024)

static byte *sound_buffer = NULL;
static os_dynamic_area_no sound_da = 0;
static int sound_buffer_size = 0;

byte *soundbuffer_ptr(void)
{
    return sound_buffer;
}

os_error *soundbuffer_free(void)
{
    os_error *e = NULL;
    if (sound_da > 0)
//    	e = xosdynamicarea_delete(sound_da);
        e = (os_error *)_swix(OS_DynamicArea, _INR(0,1), OSDynamicArea_Delete, sound_da);
    else if (sound_da == (os_dynamic_area_no)-1)
    	e = soundbuffer_alloc(0);
    return e;
}

#define MoveMemoryErrors_Val	0x1C0
#define MoveMemoryErrors_Mask	0x003

os_error *soundbuffer_alloc(int new_size)
{
    os_error *e;

    if (sound_da == 0)
    {
#if 1
    	e = (os_error *)_swix(OS_DynamicArea, _INR(0,8) | _OUT(1) | _OUT(3), OSDynamicArea_Create,
    	    osdynamicarea_ALLOCATE_AREA, 0,
    	    osdynamicarea_ALLOCATE_BASE,
    	    0x80,   	    // not draggable
      	    SOUND_DA_LIMIT,
      	    NULL, NULL,     // handler, workspace
      	    msgs_lookup("sbuf"),
      	    &sound_da, &sound_buffer);
#else
    	e = xosdynamicarea_create(osdynamicarea_ALLOCATE_AREA, 0,
    	    osdynamicarea_ALLOCATE_BASE,
    	    0x80,   	    // not draggable
      	    SOUND_DA_LIMIT,
      	    NULL, NULL,     // handler, workspace
      	    msgs_lookup("sbuf"),
      	    &sound_da, &sound_buffer, SKIP);
#endif
    	if (e && e->errnum == error_NO_SUCH_SWI)
      	    sound_da = (os_dynamic_area_no)-1;
    }

    if (sound_da != (os_dynamic_area_no)-1)
    {
        int bytes_moved;
//    	e = xos_change_dynamic_area(sound_da, new_size - sound_buffer_size, &bytes_moved);
    	e = (os_error *)_swix(OS_ChangeDynamicArea, _INR(0,1) | _OUT(1), sound_da, new_size - sound_buffer_size, &bytes_moved);
    	if (!e) sound_buffer_size += new_size > sound_buffer_size ? bytes_moved : -bytes_moved;
    }
    else
    {
    	_kernel_swi_regs r;

    	r.r[0] = sound_buffer == 0 ? OSModule_Alloc :
    	    	new_size == 0 ? OSModule_Free :
    	    	OSModule_Realloc;
    	r.r[2] = (int)sound_buffer;
    	r.r[3] = new_size - sound_buffer_size;
    	e = (os_error *)_kernel_swi(OS_Module, &r, &r);

    	if (!e)
    	{
    	    if (new_size)
    	    	sound_buffer = (byte *)r.r[2];
    	    else
    	    	sound_buffer = NULL;

    	    sound_buffer_size = new_size;
    	}
    }

    return e;
}

// ---------------------------------------------------------------------------------------------------

bits get_sound_file(const soundfile_format *fmt, char *sound_file, int *hw_bits)
{
    char *file = "S16";
    bool useto16 = FALSE;
    bool inplace = FALSE;

    int data_format = fmt->flags & soundfile_UNSUPPORTED_DATA_FORMAT ? soundfile_UNKNOWN_FORMAT : fmt->data_format;

    *hw_bits = 16;

    if (fmt->n_channels > 1 && fmt->channel_interleave != 1)
    {
        useto16 = TRUE;
        inplace = fmt->channel_interleave == 2 &&
            ((data_format == soundfile_16_BIT_LINEAR) || (data_format == soundfile_16_BIT_LINEAR_BIG_ENDIAN));
    }
    else switch (data_format)
    {
        case soundfile_8BIT_LINEAR:
            if (fmt->flags & soundfile_DATA_IS_UNSIGNED)
                file = "U8";
            else
                file = "S8";
    	    *hw_bits = 8;
            break;

        case soundfile_8BIT_VIDC:
            file = "E8";
    	    *hw_bits = 8;
            break;

        case soundfile_8BIT_MU_LAW:
        case soundfile_8BIT_ALAW:
        case soundfile_12_BIT_LINEAR:
            useto16 = TRUE;
            break;

        case soundfile_16_BIT_LINEAR:
        case soundfile_16_BIT_LINEAR_BIG_ENDIAN:
            useto16 = inplace = TRUE;
            break;

        default:
            useto16 = TRUE;
            break;
    }

    strcpy(sound_file, "Sound");
    strcat(sound_file, file);

    return (useto16 ? replay_SOUND_CODE_USE_TO16 : 0) |
    	(inplace ? replay_SOUND_CODE_CONVERT_IN_PLACE : 0);
}

// ---------------------------------------------------------------------------------------------------
// modifiers:

// swap stereo bool
// rate adjust 16.16
// buffer size (sec or kb)

// start and end sample
// n loops

// initial pause
// initial mute

os_error *soundfile_play_init_2(soundcode_context *sc, soundfile_id id, int bufsize, int rate_adjust, void *pw)
{
    os_error *e;

    int file_blocks, samples_per_block,
        file_bufsize, build_bufsize, hw_bufsize, total_size;

    soundfile_format *fmt;
    soundfile_stream *stream;

//    e = xsoundfilemiscop_return_handles(0, id, &fmt, &stream);
    e = (os_error *)_swix(SoundFile_MiscOp, _INR(0,1) | _OUTR(0,1), SoundFileMiscOp_ReturnHandles, id, &fmt, &stream);

    // limit the file buffer size to the size of data available
//    if (bufsize > fmt->data_length)
//        bufsize = fmt->data_length;

    // align file buffer size to the block size
    file_blocks = bufsize / fmt->block_align;
    file_bufsize = file_blocks*fmt->block_align;

    samples_per_block = muldiv(fmt->block_align, 8 << soundfile_SAMPLE_MAX_SIZE_SHIFT, fmt->sample_max_size);

    // see if we need a build buffer
    if ((sc->info.flags & (replay_SOUND_CODE_USE_TO16|replay_SOUND_CODE_CONVERT_IN_PLACE)) ==
    	replay_SOUND_CODE_USE_TO16)
    	build_bufsize = (file_blocks*samples_per_block*2 + 3) &~ 3;
    else
    	build_bufsize = 0;

    // get space needed to give to driver
    hw_bufsize = (file_blocks*samples_per_block*sc->sf.n_bits_hw/8 + 3 + 12) &~ 3;

    // allocate the memory
//    total_size = ((file_bufsize+3)&~3) + build_bufsize + 2*hw_bufsize;
//    e = soundbuffer_alloc(total_size);

    // must pass in unrounded file_bufsize to ensure data is loaded correctly
    // module will round up as necessary
//    if (!e) e = xreplaysoundcode_attach_buffers(0, &sc->info, sound_buffer, file_bufsize, build_bufsize, hw_bufsize);
    if (!e)
        e = attach_buffers(sc, NULL, file_bufsize, build_bufsize, hw_bufsize, SKIP);

//    if (!e)	e = xreplaysoundcode_attach_sound_file(0, &sc->info, (byte *)fmt, stream->file_handle);
    if (!e)
    	e = attach_soundfile_loader(0, sc, fmt, stream->file_handle, pw);

    if (!e)
    {
    	/* setup actual playback */
    	sc->info.poll.global_flags = 0; // flags & INIT_FLAGS;

    	sc->info.poll.frequency_frac = (muldiv(fmt->sample_rate, rate_adjust, 1) << 4) & 0x00ffffff;
    	sc->info.poll.frequency_int = muldiv(fmt->sample_rate, rate_adjust, 1<<20);

    	sc->info.poll.quality = replay_SOUND_CODE_QUALITY_HIGH;
    	sc->info.poll.stereo_flags = fmt->flags & soundfile_STEREO_REVERSED ?
    	    replay_SOUND_CODE_STEREO_REVERSED : 0;
    }
    return e;
}

// ---------------------------------------------------------------------------------------------------

// soundplay.c
