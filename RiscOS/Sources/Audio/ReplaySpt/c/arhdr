/* > arhdr.c

 * © SJ Middleton, 1994

 * Routines for decoding an ARMovie file header.

 * CHANGE LOG:
 *  25/03/93:   fixed bug in freehdr, multiply freed the first soundtrack's chunks.
 *              setting UnsignedSound now sets LinearSound also (as everything else assumed !).
 *  02/04/93:   ADPCM sound now is set to 4 bits if it isn't already.
 *  05/04/93:   new field nframes if not read from header then calculated.
 *              (even|odd)_chunksize now int.
 *  04/11/93:   nframe in header not adopted so now just calculated - accurate figure can be got from arinfo().bpp and last chunksize
 *  07/12/93:   lift maximum number of soundtracks and shrink hdr->sound after reading tracks in (possibly to zero).
 *  10/12/93:   use strtoul rather than atoi. Implement sound format 2. Reorganised header reading slightly.
 *  13/12/93:   added seekable flag when ADPCM detected.
 *  23/01/94:   read sndmul from Info file, changed rate to double.
 *              fillin leafname[] field for type 1 audio.
 *  08/02/94:   fix it so that it will say n_sound_tracks == 0 now (it would always have given at least 1 before).
 *  21/02/94:   added scanhdrto and readhdrto fns for use by AREncode.
 *  16/08/94:   added timecode field, changed colourspace scheme a little.
 *  21/09/94:   added support for indirected filename (MPEG form).
 *  18/12/94:   reorgainsed error handling system, changed many of the function prototypes.
 *  09/03/95:   rebuild into module. Major changes.
 *  13/5/96:    added scan for FETCHER on catalogue line, and indirected video on video line
 *  24/6/96:    if fetcher present then catalogue_offset is not valid so shouldn't load.
 */

#include <ctype.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "replay.h"

#include "arline.h"
#include "main.h"
#include "msgs.h"
#include "stream.h"
#include "utils.h"

#define OOM_FOR_SOUND_STRUCTS   0
#define OOM_FOR_PALETTE_DATA    1
#define OOM_FOR_HEADER          2
#define FOR_PALETTE_DATA        msgs_lookup("O1")
#define FOR_HEADER              msgs_lookup("O2")
#define FOR_SPRITE          	msgs_lookup("spr")
#define FOR_VIDEO    	    	msgs_lookup("vid")
#define FOR_SOUND  	    	msgs_lookup("snd")

#define ERR_NOT_MOVIE_FILE      error_REPLAY_BAD_FILE
#define ERR_NO_ROOM  	    	error_REPLAY_NO_ROOM
#define ERR_NO_CHUNK_SIZE  	error_REPLAY_NO_CHUNK_SIZE
#define ERR_BAD_SOUND_TRACK	error_REPLAY_BAD_SOUND_TRACK

/* ---------------------------------------------------------------------------------------- */

#define ARMOVIE_IDENT       "ARMOVIE"
#define REVERSED_IDENT      "REVER"
#define LINEAR_IDENT        "LIN"
#define UNSIGNED_IDENT      "UNSIGN"
#define ADPCM_IDENT         "ADPCM"
#define YUV_IDENT           "YUV"
#define PALETTE_IDENT       "PALETTE"
#define TIMECODE_IDENT      "TIMECODE"
#define MPEG_IDENT          "MPEG"
#define FETCHER_IDENT       "FETCHER"

static os_error *decode_soundline(bits flags, replay_header *hdr, int line, char *buffer, replay_sound_track **psound_track)
{
    os_error *e = NULL;
    char *p = strtok(buffer, "|");

    do
    {
        int track = p == (char *)buffer ? 1 : (int) strtoul(p, &p, 10);

    	if (track <= 0 || track > hdr->n_sound_tracks)
    	    e = make_err(ERR_BAD_SOUND_TRACK, NULL, track);

    	else if (psound_track)
    	{
            replay_sound_track *sp = &(*psound_track)[track-1];

            switch (line)
            {
                case arline_SoundType:
                    sp->type = (int) strtoul(p, &p, 10);
                    if (sp->type == replay_SOUND_TYPE_INDIRECTED)
                    {
                        int i = 0;

                        p += strspn(p, " ");
                        while (*p && !isspace(*p) && i < sizeof(sp->sound_file)-1)
                            sp->sound_file[i++] = *p++;
                        sp->sound_file[i] = '\0';

                        sp->snd_mul = 16;
                        if (flags & replay_CHECK_SOUND_INFO)
                        {
    	                    replay_sound_codec_info info;
    	                    e = read_sound_codec_info(0, replay_SOUND_TYPE_INDIRECTED, sp->sound_file, &info, sizeof(info), NULL);
                            if (!e)
                            {
    	                        sp->snd_mul = info.buffer_size_multiplier;
    	                        if (info.flags & replay_SOUND_CODEC_SEEKABLE)
    	                            sp->flags |= replay_SOUND_SEEKABLE;
    	                    }
                        }
                    }
                    break;

                case arline_SoundRate:
                    sp->sample_rate = read_fraction(p, replay_SAMPLE_RATE_SHIFT);
                    if (sp->sample_rate < (256<<replay_SAMPLE_RATE_SHIFT))
            	    {
                    	sp->sample_period = sp->sample_rate >> replay_SAMPLE_RATE_SHIFT;
    	    	    	if (sp->sample_period)
                    	    sp->sample_rate = muldiv(1000000u, 1 << replay_SAMPLE_RATE_SHIFT, sp->sample_period);
                    }
                    break;

                case arline_SoundChannels:
                    sp->n_channels = (int) strtoul(p, &p, 10);
                    if (strstr(strupr(p), REVERSED_IDENT))
                        sp->flags |= replay_STEREO_REVERSED;
                    break;

                case arline_SoundPrecision:
                    sp->n_bits = (int) strtoul(p, &p, 10);
                    if (sp->type == replay_SOUND_TYPE_STANDARD)
                    {
                        int ch;
                        strupr(p);
                        if (sp->n_bits == 4 || strstr(p, ADPCM_IDENT))
                        {
                            ch = 'A';
                            sp->snd_mul = 16;
                        }
                        else
                        {
                            sp->flags |= replay_SOUND_SEEKABLE;
                            sp->snd_mul = sp->n_bits;
                            if (sp->n_bits == 16 || strstr(p, LINEAR_IDENT) != NULL)
                                ch = strstr(p, UNSIGNED_IDENT) ? 'U' : 'S';
                            else
                                ch = 'E';
                        }
                        sprintf(sp->sound_file, "Sound%c%d", ch, sp->n_bits);
                    }
                    break;
            }
        }
    }
    while (!e && (p = strtok(NULL, "|")) != NULL);

    return e;
}

/* ---------------------------------------------------------------------------------------- */
/*
static void skip_space(char **ptr)
{
    *ptr += strspn(*ptr, " ");
}
 */

/*
 * load and decode the movie header
 */

static os_error *scan_hdr(bits flags, stream_id stream, replay_header *hdr, char **pstrings, int *pstring_size, replay_sound_track **psound_track)
{
    os_error	*e = NULL;
    int     	i, last_line;
    char    	buffer[128];

    hdr->sizeof_header = sizeof(replay_header);
    hdr->sizeof_sound_track = sizeof(replay_sound_track);

    if (flags & replay_RELOCATE_OFFSETS)
        hdr->flags = replay_HEADER_RELOCATED_OFFSETS;

    /* read each header line one by one */
    last_line = arline_KeyFrameOffset;
    for (i = 0; !e && i <= last_line; i++)
    {
        char *ptr;
        int  pos;

    	/* get current position in file and read the next line */
        e = stream_get_pos(stream, &pos);
        if (!e) e = file_readlinebuffer(stream, buffer, sizeof(buffer));

        if (!e)
        {
    	    // often use the first integer on the line so read it here
    	    // and init ptr to end of value
            int val = (int) strtoul(buffer, &ptr, 10);

            switch (i)
            {
                case arline_Ident:
                    if (strncmp(strupr(buffer), ARMOVIE_IDENT, sizeof(ARMOVIE_IDENT)-1) != 0)
                        e = make_err(ERR_NOT_MOVIE_FILE, NULL);
                    break;

                case arline_Name:
                    e = check_string(buffer, pstrings, pstring_size, &hdr->text.description.offset);
                    break;
                case arline_Date:
                    e = check_string(buffer, pstrings, pstring_size, &hdr->text.date.offset);
                    break;
                case arline_Author:
                    e = check_string(buffer, pstrings, pstring_size, &hdr->text.author.offset);
                    break;

                case arline_VideoType:
                    hdr->video.type = val;
                    if (val == 0)
                        last_line = arline_SpriteSize;

                    if (val == replay_VIDEO_TYPE_INDIRECTED || val == replay_VIDEO_TYPE_MPEG)
                    {
                        char *s = ptr;
                        if (val == replay_VIDEO_TYPE_MPEG)
                        {
                            s = strstri(s, MPEG_IDENT);
                            if (s) s += sizeof(MPEG_IDENT)-1;
                        }

                        if (s)
                        {
                            // skip leading space
                            while (*s == ' ') s++;

                            // find next space
                            ptr = strchr(s, ' ');

                            // set to null so we can copy this string and inc ptr for next section
                            if (ptr)
                                *ptr++ = 0;

                            e = check_string(s, pstrings, pstring_size, &hdr->video.indirected_filename.offset);
                        }
                    }

                    // look for paraemter list
                    if (ptr && (ptr = strchr(ptr, '[')) != NULL)
                    {
                        int n_params = 0;
                        int rounded_size = (*pstring_size + 3) &~ 3;

                        // word-align then leave space for n params
                        if (pstrings)
                            hdr->video_params.offset = rounded_size;
    	    	    	e = check_extent(pstrings, pstring_size, rounded_size+4 - *pstring_size);

                        if (!e && (ptr = strtok(ptr+1, "] ,")) != NULL) do
                        {
    	    	    	    int type, len;
    	    	    	    int offset = *pstring_size;

    	    	    	    if (isdigit(*ptr))
    	    	    	    {
    	    	    	    	type = replay_VIDEO_PARAM_INT;
    	    	    	    	len = 4+4;
    	    	    	    }
    	    	    	    else
    	    	    	    {
    	    	    	    	type = replay_VIDEO_PARAM_STRING;
    	    	    	    	len = 4+((strlen(ptr) + 1 + 3) &~ 3);
    	    	    	    }

    	    	    	    e = check_extent(pstrings, pstring_size, len);
    	    	    	    if (!e && pstrings)
    	    		    {
    	    		        int *param = (int *)(*pstrings + offset);
            	    	    	param[0] = type;
            	    	    	if (type == replay_VIDEO_PARAM_INT)
    	    	    	    	    param[1] = atoi(ptr);
    	    	    	    	else
            	    	    	    strncpy((char *)&param[1], ptr, len-4);
    	    	    	    }

                            n_params++;
                        }
                        while (!e && (ptr = strtok(NULL, "] ,")) != NULL);

                        if (pstrings)
                            *(int *)(*pstrings + hdr->video_params.offset) = n_params;
                    }
                    break;

                case arline_XSize:
                    hdr->video.size.x = val;
                    break;

                case arline_YSize:
                    hdr->video.size.y = val;
                    break;

                case arline_PixelDepth:
            	{
            	    char *space = "RGB";

                    hdr->video.bits_per_pixel = val;

                    strupr(buffer);
                    if ((ptr = strstr(buffer, PALETTE_IDENT)) != NULL)
                        hdr->file_info.palette_offset = (int)strtoul(ptr + sizeof(PALETTE_IDENT)-1, NULL, 10);

                    if (strstr(buffer, YUV_IDENT))
                    	space = "YUV";
    	    	    else
    	    	    {
    	    	        char *open = strchr(buffer, '[');
    	    	        if (open)
    	    	            space = strtok(open+1, "]");
                    }
                    e = check_string(space, pstrings, pstring_size, &hdr->video.colour_space.offset);
                    break;
                }

                case arline_FrameRate:
                    hdr->frame_rate = read_fraction(buffer, replay_FRAME_RATE_SHIFT);

                    strupr(buffer);
                    hdr->base_timecode = hdr->start_timecode = -1;
                    if ((ptr = strstr(buffer, TIMECODE_IDENT)) != NULL)
                    {
                        int hh, mm, ss, ff;

                        hdr->base_timecode = hdr->frame_rate >> replay_FRAME_RATE_SHIFT;

                        ptr += sizeof(TIMECODE_IDENT)-1;

                        hh = (int)strtoul(ptr, &ptr, 10);   /* skip whitespace and read hours */
                        mm = -1, ss = -1, ff = -1;

                        sscanf(ptr, ":%d:%d:%d/%d", &mm, &ss, &ff, &hdr->base_timecode);
                        if (ff != -1)
                            hdr->start_timecode = ((hh*60 + mm)*60 + ss)*hdr->base_timecode + ff;
                    }
                    break;

                case arline_SoundType:
                    hdr->n_sound_tracks = (val == 0 ? 0 : 1) + strcount(buffer, '|');
    	    	    hdr->sizeof_catalogue_chunk = replay_SIZEOF_CATALOGUE_CHUNK(hdr->n_sound_tracks);

    	    	    if (hdr->n_sound_tracks && psound_track)
    	    	    {
    	    	    	int size = hdr->n_sound_tracks*sizeof(replay_sound_track);
    	    	        if ((*psound_track = calloc(size, 1)) == NULL)
    	    	    	    e = make_oomerr(OOM_FOR_SOUND_STRUCTS, size);
    	    	    	if (!e)
                    	    e = decode_soundline(flags, hdr, i, buffer, psound_track);
                    }
                    break;

                case arline_SoundRate:
                case arline_SoundChannels:
                case arline_SoundPrecision:
                    if (psound_track && *psound_track)
                    	e = decode_soundline(flags, hdr, i, buffer, psound_track);
                    break;

                case arline_FramesPerChunk:
                    hdr->frames_per_chunk = val;
                    break;
                case arline_NChunks:
                    hdr->n_chunks = val + 1;
                    hdr->n_frames = hdr->n_chunks*hdr->frames_per_chunk;
                    break;

                case arline_EvenChunkSize:
                    hdr->max_even_chunk_size = val;
                    break;
                case arline_OddChunkSize:
                    hdr->max_odd_chunk_size = val;
                    break;

                case arline_CatalogueOffset:
                    hdr->file_info.catalogue_offset = val;
                    if ((ptr = strstri(buffer, FETCHER_IDENT)) != NULL)
                    {
                        ptr += sizeof(FETCHER_IDENT);
                        while (*ptr == ' ') ptr++;
                        e = check_string(ptr, pstrings, pstring_size, &hdr->fetcher_name.offset);
                    }
                    break;

                case arline_SpriteOffset:
                    hdr->file_info.sprite_offset = val;
                    break;
                case arline_SpriteSize:
                    hdr->file_info.sprite_size = val;
            	    stream_get_pos(stream, &hdr->file_info.header_end_offset);
                    break;
                case arline_KeyFrameOffset:
                    if (pos <= hdr->file_info.sprite_offset &&
                        (hdr->fetcher_name.offset != 0 && pos <= hdr->file_info.catalogue_offset))
            	    {
                        hdr->file_info.key_frame_offset = val;
            	    	stream_get_pos(stream, &hdr->file_info.header_end_offset);
            	    }
                    break;
            }
        }
    }

    if (hdr->file_info.key_frame_offset == 0)
        hdr->file_info.key_frame_offset = -1;

    return e;
}

/* ---------------------------------------------------------------------------------------- */

static os_error *read_catalogue(stream_id stream, replay_header *hdr, replay_sound_track *sound, replay_catalogue_chunk *catalogue)
{
    os_error *e;
    int chunk;
    replay_catalogue_chunk *cp;

    e = stream_set_pos(stream, hdr->file_info.catalogue_offset);

    for (chunk = 0, cp = catalogue;
    	    !e && chunk < hdr->n_chunks;
    	    chunk++, cp = NEXT_CATALOGUE_CHUNK(cp, hdr->sizeof_catalogue_chunk))
    {
        char	buffer[256], *s;
        int     offset = 0, size = 0;

        s = buffer;
        e = file_readlinebuffer(stream, buffer, sizeof(buffer));

    	/* decode video offset */
    	if (!e)
    	{
            offset = (int) strtoul(s, &s, 10);
    	    if ((s = strchr(s, ',')) == NULL)
            	e = make_err(ERR_NO_CHUNK_SIZE, NULL, FOR_VIDEO, chunk);
        }

    	/* decode video chunk size and move ptr to start of sound chunk size */
        if (!e)
        {
            size = (int) strtoul(s+1, &s, 10);
    	    if (hdr->n_sound_tracks != 0 && (s = strchr(s, ';')) == NULL)
            	e = make_err(ERR_NO_CHUNK_SIZE, NULL, FOR_SOUND, chunk);
        }

        if (!e)
        {
       	    /* write into video chunk list */
            cp->video_offset = offset;
            cp->video_size = size;
        }

    	/* loop through the sound chunk sizes */
        if (!e && s != NULL && strtoul(++s, NULL, 10) != 0)
        {
            char *s1 = strtok(s, "|");
            do
            {
                int track = s1 == s ? 1 : (int) strtoul(s1, &s1, 10);
                replay_sound_track *sp = NULL;

    	    	/* check track number is in range previously established */
                if (track <= 0 || track > hdr->n_sound_tracks)
                    e = make_err(ERR_BAD_SOUND_TRACK, NULL, track);

    	    	/* check info on this track had been filled in */
                if (!e && sound)
                {
                    sp = &sound[track-1];
                    if (sp->type == 0)
                        e = make_err(ERR_BAD_SOUND_TRACK, NULL, track);
                }

    	    	/* read offset and size and update max size */
                if (!e)
                {
    	    	    int size = (int) strtoul(s1, NULL, 10);

                    cp->sound_size[track-1] = size;

                    /* update max chunk size in sound_track info if being used */
                    if (sp && sp->max_chunk_size < size)
                    	sp->max_chunk_size = size;
                }
            }
            while (!e && (s1 = strtok(NULL, "|")) != NULL);
        }
    }

    /* find size of catalogue data */
    if (!e)
    {
        e = stream_get_pos(stream, &hdr->file_info.catalogue_size);
    	hdr->file_info.catalogue_size -= hdr->file_info.catalogue_offset;
    }

    return e;
}

/* ---------------------------------------------------------------------------------------- */

static os_error *read_palette(stream_id stream, unsigned int flags, const replay_header *hdr, void *data)
{
    os_error *e = NULL;

#ifndef SMALL_VERSION
    if (flags & replay_4BYTE_PALETTE)
    {
        char *raw, *rawp;
        unsigned *datap;
        int i;

        raw = (char *)malloc(3*256);
        if (raw == NULL)
            e = make_oomerr(OOM_FOR_PALETTE_DATA, 3*256);

        if (!e) e = stream_set_pos(stream, hdr->file_info.palette_offset);
        if (!e) e = stream_read(stream, data, 3*256, NULL);
        if (!e) for (i = 0, rawp = raw, datap = (unsigned *)data; i < 256; i++)
        {
            int val = *rawp++ << 8;
            val |= *rawp++ << 16;
            val |= *rawp++ << 24;
            *datap++ = val;
        }

        free(raw);
    }
    else
    {
        e = stream_set_pos(stream, hdr->file_info.palette_offset);
        if (!e) e = stream_read(stream, data, 3*256, NULL);
    }
#endif

    return e;
}

/* ---------------------------------------------------------------------------------------- */

static const replay_catalogue_chunk *last_chunk(const replay_header *hdr, const replay_catalogue_chunk *catalogue)
{
    return NTH_CATALOGUE_CHUNK(catalogue, hdr->n_chunks-1, hdr->sizeof_catalogue_chunk);
}

/*
 * video_name passed in here as the heade hasn't been fixed up yet.
 * Note could be null if no space was allocated for strings
 */

static os_error *get_num_frames(replay_header *hdr, const char *video_name, const replay_catalogue_chunk *catalogue)
{
    replay_video_codec_info info;
    os_error *e;

    if (hdr->video.type == 0 || catalogue == NULL)
        return NULL;

    e = NULL;
    if (!read_video_codec_info_cached(hdr->video.type, video_name, &info))
        e = read_video_codec_info(0, hdr->video.type, video_name, &info, sizeof(info), NULL);

    if (!e)
    {
        int frame_size = info.bits_per_pixel*hdr->video.size.x*hdr->video.size.y;
        if (frame_size)
        {
            int chunk_size = last_chunk(hdr, catalogue)->video_size;
            hdr->n_frames = (hdr->n_chunks-1)*hdr->frames_per_chunk + chunk_size/(frame_size/8);
        }
    }

    return e;
}

#if 0
static os_error *get_num_frames_sound(replay_sound_track *track, const replay_catalogue_chunk *catalogue)
{
    os_error *e = NULL;
    int chunk_size;
    int samples;

    chunk_size = last_chunk(hdr, catalogue)->sound_size[0];

    samples = ((chunk_size/track->n_channels - info.per_channel_overhead) << replay_SOUND_CODEC_MAX_SIZE_SHIFT) * 8 /
  	        (info.max_sample_size ? info.max_sample_size : 8 << replay_SOUND_CODEC_MAX_SIZE_SHIFT);

//    else if (track->n_bits)
//    	samples = chunk_size*8/(track->n_channels*track->n_bits);

//    if (!e && track->sample_rate)
//        hdr->n_frames = (hdr->n_chunks-1)*hdr->frames_per_chunk + samples*hdr->frame_rate/track->sample_rate; /* >> (replay_FRAME_RATE_SHIFT - replay_SAMPLE_RATE_SHIFT)) */

#if replay_FRAME_RATE_SHIFT - replay_SAMPLE_RATE_SHIFT != 0
# error "shifts don't match"
#endif

    return e;
}
#endif

/* ---------------------------------------------------------------------------------------- */

/*
 * This is the main SWI to decode information about an ARMovie file
 */

os_error *read_file_header(replay__input *i)
{
    os_error *e = NULL;

    unsigned int            flags = i->flags;
    stream_context          stream;

    replay_header   	    *hdr;
    int                     header_size;

    int                     catalogue_size;

    char                    *strings;
    int	                    string_size;

    replay_sound_track 	    *sound_track;
    int                     sound_track_size;

    int                     sprite_size, palette_size;

    /* open stream */
    e = stream_open(flags & replay_OPEN_TYPE, i->filename, &stream);

    /* if no header space given then allocate some for now */
    hdr = NULL;
    if (!e)
    {
        if (i->header_buffer && i->header_buffer_size >= sizeof(replay_header))
    	{
            hdr = i->header_buffer;
            memset(hdr, 0, sizeof(replay_header));
        }
        else
        {
            hdr = calloc(sizeof(replay_header), 1);
            if (hdr == NULL)
            	e = make_oomerr(OOM_FOR_HEADER, sizeof(replay_header));
        }
    }

    /* scan the header */
    string_size = 0;
    strings = NULL;
    sound_track = NULL;
    if (!e)
    	e = scan_hdr(flags, &stream, hdr,
    	        i->header_buffer && (flags & replay_RETURN_TEXT) != 0 ? &strings : NULL, &string_size,
    	        i->header_buffer && (flags & replay_RETURN_SOUND_TRACKS) != 0 ? &sound_track : NULL);

    /* either word align string size or set to zero if not wanted */
    if (flags & replay_RETURN_TEXT)
    	string_size = (string_size + 3) &~ 3;
    else
    	string_size = 0;

    /* catalogue is only valid if fetchers not in use */
    catalogue_size = flags & replay_RETURN_CATALOGUE && hdr->fetcher_name.offset == 0 ? hdr->n_chunks*hdr->sizeof_catalogue_chunk : 0;
    sound_track_size = flags & replay_RETURN_SOUND_TRACKS ? hdr->n_sound_tracks*sizeof(replay_sound_track) : 0;
    header_size = sizeof(replay_header) + string_size + catalogue_size + sound_track_size;

    /* read header details */
    if (!e && i->header_buffer && i->header_buffer_size)
    {
        char *out = (char *)i->header_buffer;
        replay_catalogue_chunk *catalogue = NULL;

    	if (i->header_buffer_size < header_size)
    	    e = make_err(ERR_NO_ROOM, NULL, FOR_HEADER);

    	/* read catalogue if wanted */
    	if (!e && catalogue_size)
    	{
            catalogue = (replay_catalogue_chunk *)(out + sizeof(replay_header) + sound_track_size);
            e = read_catalogue(&stream, hdr, sound_track, catalogue);
 	    if (!e)
 	        hdr->catalogue_chunks.offset = flags & replay_RELOCATE_OFFSETS ?
    	    	    (int)catalogue : sizeof(replay_header) + sound_track_size;
        }

        /* calculate the real number of frames if appropriate */
        if (!e)
        {
            if (hdr->video.type)
            {
                if ((flags & replay_CHECK_VIDEO_INFO) != 0)
    	            e = get_num_frames(hdr, strings ? strings + hdr->video.indirected_filename.offset : NULL, catalogue);
    	    }
//            else if (hdr->n_sound_tracks)
//    	        e = get_num_frames_sound(sound_track, catalogue);
    	}

    	if (!e)
    	{
    	    /* write out sound track info */
    	    if (sound_track_size)
    	    {
    	    	memcpy(out + sizeof(replay_header), sound_track, sound_track_size);
    	    	hdr->sound_tracks.offset = flags & replay_RELOCATE_OFFSETS ?
    	    	    (int)(out + sizeof(replay_header)) : sizeof(replay_header);
            }

    	    /* copy string data and fix up offset pointers */
    	    if (string_size)
    	    {
    	    	int offset = sizeof(replay_header) + sound_track_size + catalogue_size;
    	    	memcpy(out + offset, strings, string_size);

                if (flags & replay_RELOCATE_OFFSETS)
                    offset += (int)out;

    	    	hdr->text.description.offset += offset;
    	    	hdr->text.date.offset += offset;
    	    	hdr->text.author.offset += offset;
    	    	if (hdr->video.indirected_filename.offset)
    	    	    hdr->video.indirected_filename.offset += offset;
    	    	hdr->video.colour_space.offset += offset;
    	    	if (hdr->video_params.offset)
    	    	    hdr->video_params.offset += offset;
    	    }

    	    /* copy back the main header info */
    	    if ((replay_header *)out != hdr)
            	memcpy(out, hdr, sizeof(replay_header));
        }
    }

    /* read the sprite if wanted */
    sprite_size = hdr->file_info.sprite_size - (flags & replay_RETURN_SPRITE ? 12 : 0);

    if (!e && i->sprite_buffer && i->sprite_buffer_size)
    {
    	if (i->sprite_buffer_size < sprite_size)
    	    e = make_err(ERR_NO_ROOM, NULL, FOR_SPRITE);
    	if (!e)
    	    e = stream_set_pos(&stream, hdr->file_info.sprite_offset + (flags & replay_RETURN_SPRITE ? 12 : 0));
    	if (!e)
    	    e = stream_read(&stream, (void *)i->sprite_buffer, sprite_size, NULL);
    }

    /* read the palette if wanted */
    palette_size = hdr->file_info.palette_offset == 0 ? 0 : flags & replay_4BYTE_PALETTE ? 4*256 : 3*256;

    if (!e && hdr->file_info.palette_offset && i->palette_buffer && i->palette_buffer_size)
    {
    	if (i->palette_buffer_size < palette_size)
    	    e = make_err(ERR_NO_ROOM, NULL, FOR_PALETTE_DATA);
    	if (!e)
    	    e = read_palette(&stream, flags, hdr, i->palette_buffer);
    }

    /* write out the actual amount of space needed */
    i->header_buffer_size = header_size;
    i->sprite_buffer_size = sprite_size;
    i->palette_buffer_size = palette_size;

    /* free temp header if allocated */
    if (hdr != i->header_buffer)
    	free(hdr);

    free(sound_track);
    free(strings);

    stream_close(&stream);

    return e;
}

/* ---------------------------------------------------------------------------------------- */

/* eof arhdr.c */
