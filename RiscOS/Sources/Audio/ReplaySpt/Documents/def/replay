TITLE Replay;

AUTHOR "Simon Middleton";

NEEDS OS,OSSpriteOp;

// ----------------------------------------------------------------------------

CONST
  Error_ReplayBase          = .Bits: 0x80DA20 "32 errors",   // 32 above the base allocated for soundfile
  Error_ReplayBadFile       = .Bits: 0x80DA21 "File does not appear to be a Replay file",
  Error_ReplayNoRoom        = .Bits: 0x80DA22 "Supplied buffer is too small",
  Error_ReplayNoChunkSize   = .Bits: 0x80DA23 "Corrupt chunk catalogue - no size specified",
  Error_ReplayBadSoundTrack = .Bits: 0x80DA24 "Sound track number in catalogue not defined in header",
  Error_ReplayBadSoundType  = .Bits: 0x80DA25 "Unknown sound type (0-2)",
  Error_ReplayNoSoundDriver = .Bits: 0x80DA26 "Sound driver file not found",
  Error_ReplayAlreadyPlaying = .Bits: 0x80DA27 "A sound is already playing",
  Error_ReplayOutOfData     = .Bits: 0x80DA28 "Less data in file than expected",
  Error_ReplayNoSoundCode   = .Bits: 0x80DA29 "Null or previously freed soundcode ptr supplied",
  Error_ReplayNoMem         = .Bits: 0x80DA2A "Out of memory";

CONST
  Replay_FileType           = .Bits: 0xAE7;

// ----------------------------------------------------------------------------

TYPE
  Replay_SoundTrackFlags = .Bits,
  Replay_SoundTrackType  = .Int,
  Replay_HeaderFlags = .Bits,
  Replay_VideoType = .Int;

TYPE
  Replay_CatalogueChunk = .Struct
  (
     .Int: video_offset,
     .Int: video_size,
     .Int: sound_size ...
  );

CONST
  // Sound track info
  Replay_StereoReversed     = Replay_SoundTrackFlags: 0x00000001,
  Replay_SoundSeekable      = Replay_SoundTrackFlags: 0x00000002,

  // Sound types
  Replay_SoundTypeNone      = Replay_SoundTrackType: 0,
  Replay_SoundTypeStandard  = Replay_SoundTrackType: 1,
  Replay_SoundTypeIndirected = Replay_SoundTrackType: 2,

  Replay_SampleRateShift    = .Int: 10;

TYPE
  Replay_SoundTrack = .Struct
  (
     Replay_SoundTrackFlags: flags,
     Replay_SoundTrackType:  type,
     .Int:  sample_rate,
     .Byte: n_channels,
     .Byte: n_bits,
     .Byte: sample_period,
     .Byte: snd_mul,
     .Int:  max_chunk_size,     // only filled in if catalogue read
     [11] .Char: sound_file
  );

CONST
  Replay_HeaderRelocatedOffsets  = Replay_HeaderFlags: 0x01;

CONST
  Replay_VideoTypeNone          = Replay_VideoType: 0,  // no video
  Replay_VideoTypeMovingLines   = Replay_VideoType: 1,  // compressed video
  Replay_VideoType_15bit        = Replay_VideoType: 2,  // 16 bpp
  Replay_VideoType_15bit_211    = Replay_VideoType: 3,  // 10 bpp
  Replay_VideoType_8bit         = Replay_VideoType: 4,  // 8 bpp paletted
  Replay_VideoType_15bit_420    = Replay_VideoType: 5,  // 8 bpp
  Replay_VideoType_15bit_16y1uv = Replay_VideoType: 6,  // 6 bpp
  Replay_VideoTypeMovingBlocks  = Replay_VideoType: 7,  // compressed video
  Replay_VideoType_24bit        = Replay_VideoType: 8,  // 24 bpp
  Replay_VideoType_24bit_211    = Replay_VideoType: 9,  // 16 bpp
  Replay_VideoType_24bit_420    = Replay_VideoType: 10, // 12 bpp
  Replay_VideoType_24bit_16y1uv = Replay_VideoType: 11, // 9 bpp
  Replay_VideoTypeMPEG          = Replay_VideoType: 12, // pointer to separate MPEG file
  Replay_VideoTypeMPEGData      = Replay_VideoType: 13, // MPEG data in armovie file
  Replay_VideoTypeUltimotion    = Replay_VideoType: 14, // IBM codec
  Replay_VideoTypeIndirected    = Replay_VideoType: 15, // named video type
  Replay_VideoTypeMovingBlocksHQ = Replay_VideoType: 17, // compressed

  Replay_VideoTypeEidosBase     = Replay_VideoType: 100,
  Replay_VideoTypeEscape        = Replay_VideoType: 102,

  Replay_VideoTypeIrlamBase     = Replay_VideoType: 200,
  Replay_VideoTypeIrlamRTC1     = Replay_VideoType: 201, // Irlam compressed video
  Replay_VideoTypeIrlamMJPEG    = Replay_VideoType: 202,

  Replay_VideoTypeWildVisionBase = Replay_VideoType: 300,

  Replay_VideoTypeAspexBase     = Replay_VideoType: 400,

  Replay_VideoTypeIotaBase      = Replay_VideoType: 500,
  Replay_VideoTypeIotaAceFilm   = Replay_VideoType: 500,

  Replay_VideoTypeWarmSilenceBase = Replay_VideoType: 600,
  Replay_VideoTypeWarmSilenceAVICram8   = Replay_VideoType: 600,
  Replay_VideoTypeWarmSilenceAVICram16  = Replay_VideoType: 601,
  Replay_VideoTypeWarmSilenceCVID       = Replay_VideoType: 602,
  Replay_VideoTypeWarmSilenceQT_RPZA    = Replay_VideoType: 603,
  Replay_VideoTypeWarmSilenceQT_SMC     = Replay_VideoType: 604,
  Replay_VideoTypeWarmSilenceAVIUltimotion   = Replay_VideoType: 605,
  Replay_VideoTypeWarmSilenceAVI_RGB8   = Replay_VideoType: 606,
  Replay_VideoTypeWarmSilenceAVI_RLE8   = Replay_VideoType: 607,
  Replay_VideoTypeWarmSilenceAVI_RGB24  = Replay_VideoType: 608,
  Replay_VideoTypeWarmSilenceQT_RLE8    = Replay_VideoType: 609,
  Replay_VideoTypeWarmSilenceFLIC       = Replay_VideoType: 610,
  Replay_VideoTypeWarmSilenceQT_RLE4    = Replay_VideoType: 613,
  Replay_VideoTypeWarmSilenceQT_RLE16   = Replay_VideoType: 614,
  Replay_VideoTypeWarmSilenceQT_RLE24   = Replay_VideoType: 615,
  Replay_VideoTypeWarmSilenceDL         = Replay_VideoType: 622,
  Replay_VideoTypeWarmSilenceANM        = Replay_VideoType: 623,
  Replay_VideoTypeWarmSilenceQT_VR      = Replay_VideoType: 630,
  Replay_VideoTypeWarmSilenceUnknown    = Replay_VideoType: 699,

  Replay_VideoTypeSmallBase             = Replay_VideoType: 800,

  Replay_VideoTypeHBPBase               = Replay_VideoType: 800,
  Replay_VideoTypeHBPLinePack           = Replay_VideoType: 800,
  Replay_VideoTypeHBPMovie16To3         = Replay_VideoType: 802;

CONST
  Replay_HdrLineIdent           = .Int: 0,
  Replay_HdrLineName            = .Int: 1,
  Replay_HdrLineDate            = .Int: 2,
  Replay_HdrLineAuthor          = .Int: 3,
  Replay_HdrLineVideoType       = .Int: 4,
  Replay_HdrLineXSize           = .Int: 5,
  Replay_HdrLineYSize           = .Int: 6,
  Replay_HdrLinePixelDepth      = .Int: 7,
  Replay_HdrLineFrameRate       = .Int: 8,
  Replay_HdrLineSoundType       = .Int: 9,
  Replay_HdrLineSoundRate       = .Int: 10,
  Replay_HdrLineSoundChannels   = .Int: 11,
  Replay_HdrLineSoundPrecision  = .Int: 12,
  Replay_HdrLineFramesPerChunk  = .Int: 13,
  Replay_HdrLineNChunks         = .Int: 14,
  Replay_HdrLineEvenChunkSize   = .Int: 15,
  Replay_HdrLineOddChunkSize    = .Int: 16,
  Replay_HdrLineCatalogueOffset = .Int: 17,
  Replay_HdrLineSpriteOffset    = .Int: 18,
  Replay_HdrLineSpriteSize      = .Int: 19,
  Replay_HdrLineKeyFrameOffset  = .Int: 20;

CONST
  Replay_FrameRateShift         = .Int: 10;

TYPE
  Replay_VideoParamType         = .Int;

CONST
  Replay_VideoParamInt          = Replay_VideoParamType: 0,
  Replay_VideoParamString       = Replay_VideoParamType: 1;

TYPE
  Replay_HeaderOffset = .Union ( .Int: offset, .Ref .Data: ptr );

TYPE
  Replay_Header = .Struct
  (
     .Int: sizeof_header,
     Replay_HeaderFlags: flags,

     .Struct
     (
       Replay_HeaderOffset: description,
       Replay_HeaderOffset: date,
       Replay_HeaderOffset: author
     ): text,

     .Struct
     (
       Replay_VideoType: type,
       Replay_HeaderOffset: indirected_filename,
       Replay_HeaderOffset: colour_space,

       OS_Coord: size,
       .Int: bits_per_pixel
     ): video,

     .Int: frames_per_chunk,
     .Int: n_chunks,
     .Int: sizeof_catalogue_chunk,

     .Int: n_frames,
     .Int: frame_rate,

     .Int: start_timecode,
     .Int: base_timecode,

     .Struct
     (
      .Int: catalogue_offset,    // file offset of catalogue info
      .Int: catalogue_size,      // space used by catalogue in file (only filled in if catalogue is read)
      .Int: sprite_offset,       // file offset of sprite
      .Int: sprite_size,         // space used by sprite in file
      .Int: key_frame_offset,    // file offset of key frame data
      .Int: palette_offset,      // file offset of palette data
      .Int: header_end_offset    // file offset of end of text header
     ): file_info,

     .Int: max_even_chunk_size,
     .Int: max_odd_chunk_size,

     .Int: n_sound_tracks,
     .Int: sizeof_sound_track,

     Replay_HeaderOffset: video_params,
     Replay_HeaderOffset: catalogue_chunks,
     Replay_HeaderOffset: sound_tracks,

     Replay_HeaderOffset: fetcher_name

     // sound track array
     // catalogue chunk array
     // strings (including video param block)
  );

// ----------------------------------------------------------------------------

SWI Replay_RegisterSprites =
  (  NUMBER 0x48B00 "Register button sprites",
     ENTRY
     (
        R0 -> osspriteop_area: area,
        R1 -> .Int: button_offsets,
        R2 -> .Ref .String: sprite_names,
        R3 = Replay_PollFlags: initial_state
     ),
     EXIT
     (
        R0! = .Ref .Asm: routine
  )  );

SWI Replay_DeRegisterSprites =
  (  NUMBER 0x48B01 "Deregister button sprites"
  );

SWI Replay_TimebarPaintAddress =
  (  NUMBER 0x48B02 "Get time bar paint routine",
     ENTRY
     (
        R0 = .Int: PixelsPerFrame,
        R1 = .Ref .Byte: TimebarAddress,
        R2 = .Int: TimebarHeight,
        R3 = OS_ColourNumber: FGColour,
        R4 = OS_ColourNumber: BGColour,
        R5 = .Int: Log2BPP
     ),
     EXIT
     (
        R0! = .Ref .Asm: PaintRoutine
  )  );

TYPE
  Replay_TimebarPaintInfo = .Struct
  (
     .Int: pixels_per_frame,
     .Int: timebar_address,
     .Int: timebar_height,
     .Int: fg_colour,
     .Int: bg_colour,
     .Int: log2bpp,
     .Int: max_pixels
  );

SWI Replay_TimebarPaintAddressExtended =
  (  NUMBER 0x48B02 "Get time bar paint routine",
     ENTRY
     (  R0 # -1,
        R1 -> Replay_TimebarPaintInfo: info
     ),
     EXIT
     (
        R0! = .Ref .Asm: PaintRoutine
  )  );

SWI Replay_Version =
  (  NUMBER 0x48B03 "Read ARMovie version number",
     EXIT
     (  R0! = .Int: version
  )  );

// ----------------------------------------------------------------------------

TYPE Replay_ReadFileHeaderFlags = .Bits;

CONST // For all three read SWIs
  Replay_OpenType            = .Bits: %11,
  Replay_OpenTypeFileName    = .Bits: %00,
  Replay_OpenTypeFileHandle  = .Bits: %01,
  Replay_OpenTypeBuffer      = .Bits: %10;

CONST
  Replay_ReturnText             = Replay_ReadFileHeaderFlags: 0x00000010,
  Replay_ReturnSoundTracks      = Replay_ReadFileHeaderFlags: 0x00000020,
  Replay_ReturnCatalogue        = Replay_ReadFileHeaderFlags: 0x00000040,
  Replay_ReturnSprite           = Replay_ReadFileHeaderFlags: 0x00000080, // Else sprite area
  Replay_4BytePalette           = Replay_ReadFileHeaderFlags: 0x00000100, // Else 3 bytes per palette
  Replay_CheckVideoInfo         = Replay_ReadFileHeaderFlags: 0x00000200,
  Replay_CheckSoundInfo         = Replay_ReadFileHeaderFlags: 0x00000400,
  Replay_RelocateOffsets        = Replay_ReadFileHeaderFlags: 0x00000800;

SWI Replay_ReadFileHeader =
  (  NUMBER 0x48B04 "Decode info about an ARMovie file",
     ENTRY
     (  R0 = Replay_ReadFileHeaderFlags: flags,
        R1 -> .String: filename,
        R2 = .Ref Replay_Header: header_buffer,
        R3 = .Int: header_buffer_size,
        R4 = .Ref .Data: sprite_buffer,
        R5 = .Int: sprite_buffer_size,
        R6 = .Ref .Data: palette_buffer,
        R7 = .Int: palette_buffer_size
     ),
     EXIT
     (
        R3! = .Int: header_size_needed,
        R5 = .Int: sprite_size_needed,
        R7 = .Int: palette_size_needed
  )  );

// ----------------------------------------------------------------------------

TYPE Replay_VideoCodecFlags = .Bits;

CONST
  Replay_VideoCodecTemporal   = Replay_VideoCodecFlags: %00000001;
//  Replay_VideoCodecDecompress = .Replay_VideoCodecFlags: %00000010,
//  Replay_VideoCodecDecompresh = .Replay_VideoCodecFlags: %00000100,
//  Replay_VideoCodecDecomp24   = .Replay_VideoCodecFlags: %00001000,
//  Replay_VideoCodecRunImage   = .Replay_VideoCodecFlags: %00010000,
//  Replay_VideoCodecBatchComp  = .Replay_VideoCodecFlags: %00100000;

TYPE
  Replay_VideoCodecDim = .Struct
  (
    .Int: inc,
    .Int: min,
    .Int: max
  ),
  Replay_VideoCodecInfo = .Struct
  (
    Replay_VideoCodecFlags: flags,
    .Int: size,
    .Int: description_offset,
    .Int: author_offset,
    .Int: bits_per_pixel,
    Replay_VideoCodecDim: x,
    Replay_VideoCodecDim: y,
    .Int: n_colour_spaces
    // colour space ptr array
    // text and colour space strings
  ),
  Replay_VideoCodec = .Struct
  (
    .Int: patch_table_offset,
    .Int: init_entry,
    .Int: decompress_entry,
    .Data: code ...
  );

TYPE Replay_ReadVideoCodecInfoFlags = .Bits;

CONST Replay_ReadVideoCodecInfoNew = Replay_ReadVideoCodecInfoFlags: 0x100 "New form of call used";

SWI Replay_ReadVideoCodecInfo =
  (  NUMBER 0x48B05 "Read video codec Info file",
     ENTRY
     (  R0 = Replay_ReadVideoCodecInfoFlags: flags,
        R1 = .Int: video_type,
        R2 = .Ref Replay_VideoCodecInfo: info_buffer,
        R3 = .Int: info_buffer_size
     ),
     EXIT
     (
        R3! = .Int: info_size_needed
  )  );

SWI Replay_ReadVideoCodecInfoNew =
  (  NUMBER 0x48B05 "Read video codec Info file (new form)",
     ENTRY
     (  R0 # 0x100,
        R0 | Replay_ReadVideoCodecInfoFlags: flags,
        R1 = .Int: video_type,
        R2 -> .String: video_name,
        R3 = .Ref Replay_VideoCodecInfo: info_buffer,
        R4 = .Int: info_buffer_size
     ),
     EXIT
     (
        R4! = .Int: info_size_needed
  )  );

// ----------------------------------------------------------------------------

TYPE Replay_SoundCodecFlags         = .Bits;
TYPE Replay_ReadSoundCodecInfoFlags = .Bits;

CONST
  Replay_SoundCodecSeekable     = Replay_SoundCodecFlags: %00000001,
  Replay_SoundCodecVariableSize = Replay_SoundCodecFlags: %00000010,
  Replay_SoundCodecMaxSizeShift = .Int: 10;

TYPE
  Replay_SoundCodecInfo = .Struct
  (
    Replay_SoundCodecFlags: flags,
    .Int: size,
    .Int: description_offset,
    .Int: author_offset,
    .Int: buffer_size_multiplier,
    .Int: max_sample_size,
    .Int: per_channel_overhead
  );

SWI Replay_ReadSoundCodecInfo =
  (  NUMBER 0x48B06 "Read sound codec Info file",
     ENTRY
     (  R0 = Replay_ReadSoundCodecInfoFlags: flags,
        R1 = .Int: sound_type,
        R2 -> .String: sound_name,
        R3 = .Ref Replay_SoundCodecInfo: info_buffer,
        R4 = .Int: info_buffer_size
     ),
     EXIT
     (
        R4! = .Int: info_size_needed
  )  );

// ----------------------------------------------------------------------------

TYPE
  Replay_PollFlags                  = .Bits,
  Replay_SoundCodePlayReason        = .Int "Passed in R1 in calls to play_entry",
  Replay_SoundCodeQuality           = .Byte,
  Replay_SoundCodeStereoFlags       = .Byte,
  Replay_SoundCodeInterfaceFlags    = .Bits,
  Replay_SoundCodeInfoFlags         = .Bits,
  Replay_SoundCodeAction            = .Int;

CONST
  // kept in Poll.global_flags
  Replay_PollPause      = Replay_PollFlags: %00000001,
  Replay_PollMute       = Replay_PollFlags: %00000010,
  Replay_PollExit       = Replay_PollFlags: %00000100,
  Replay_PollStep       = Replay_PollFlags: %00001000,
  Replay_PollCapture    = Replay_PollFlags: %00010000,
  Replay_PollInvisible  = Replay_PollFlags: %00100000,
  Replay_PollEndLoop    = Replay_PollFlags: %01000000,
  Replay_PollNoPaint    = Replay_PollFlags: %10000000,

  // returned in SoundCode.interface_flags
  Replay_SoundCodeNoTiming       = Replay_SoundCodeInterfaceFlags: %00000001,
  Replay_SoundCodeQualityCosts   = Replay_SoundCodeInterfaceFlags: %00000010,
  Replay_SoundCodeSoundSystemOff = Replay_SoundCodeInterfaceFlags: %00000100,

  // as used in quality byte
  Replay_SoundCodeQualityLow     = Replay_SoundCodeQuality: 1,
  Replay_SoundCodeQualityHigh    = Replay_SoundCodeQuality: 4,

  // Poll.stereo_flags
  Replay_SoundCodeStereoReversed = Replay_SoundCodeStereoFlags: 0x01,

  // passed to Play entry
  Replay_SoundCodePlayTiming     = Replay_SoundCodePlayReason: 1,
  Replay_SoundCodePlayPlay       = Replay_SoundCodePlayReason: 2,

  // kept in SoundCodeInfo.flags
  Replay_SoundCodePlaying        = Replay_SoundCodeInfoFlags: 0x01,
  Replay_SoundCodeNeedsTiming    = Replay_SoundCodeInfoFlags: 0x02,
  Replay_SoundCodeUseTo16        = Replay_SoundCodeInfoFlags: 0x04,
  Replay_SoundCodeConvertInPlace = Replay_SoundCodeInfoFlags: 0x08,
  Replay_SoundCodeHadError       = Replay_SoundCodeInfoFlags: 0x00010000,
  Replay_SoundCodeStopped        = Replay_SoundCodeInfoFlags: 0x00020000,

  // SetAction reasons
  Replay_SoundCodeActionPause    = Replay_SoundCodeAction: 0;

TYPE
  Replay_SoundPoll = .Struct
  (
     Replay_PollFlags: global_flags,
     .Int:  chunk_time,
     .Int:  frequency_int,
     .Int:  frequency_frac,
     Replay_SoundCodeQuality: quality,
     Replay_SoundCodeStereoFlags: stereo_flags,
     [2] .Byte: reserved_b,
     [11] .Int:  reserved_i
  ),
  Replay_SoundBuffer = .Struct
  (
     .Int: count,
     .Int: empty,
     .Ref .Data: start
  ),
  Replay_SoundCode = .Struct
  (
     .Int: play_entry,
     .Int: stop_entry,
     .Int: data_entry,
     Replay_SoundCodeInterfaceFlags: interface_flags,
     [2] .Ref Replay_SoundBuffer: buffer,
     [3] .Int: reserved,
     .Int: samples_played_int,
     .Int: samples_played_frac,
     .Data: code ...
  ),
  Replay_SoundCodeInfo = .Struct
  (
     Replay_SoundCodeInfoFlags: flags,
     .Ref OS_Error: error,

     Replay_SoundPoll: poll,
     Replay_SoundCode: code
  );

TYPE
  Replay_SoundCodeLoadFlags = .Bits;

CONST
 Replay_SoundCodeLoadFromSoundFile = Replay_SoundCodeLoadFlags: 0x100 "sound_name is actually a soundfile_format *";

SWI
  ReplaySoundCode_Load =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 0 "Load, or find a cached, sound playback code file",
        R0 | Replay_SoundCodeLoadFlags: flags,
        R1 = Replay_SoundTrackType: sound_type,
        R2 -> .String: sound_name,
        R3 = .Int: n_channels
     ),
     EXIT
     (  R0! -> Replay_SoundCodeInfo: info
  )  ),
  ReplaySoundCode_Unload =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 1 "Mark sound playback code as unused",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info
  )  ),
  ReplaySoundCode_AttachBuffers =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 2 "Attach buffers to playback code, buffer == NULL and module will allocate",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 = .Ref .Data: buffer,
        R3 = .Int: file_buffer_size,
        R4 = .Int: build_buffer_size,
        R5 = .Int: hw_buffer_size
     ),
     EXIT
     (  R2 = .Ref .Data: buffer_out
  )  ),
  ReplaySoundCode_DetachBuffers =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 3 "Detach buffers from playback code",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info
  )  ),
  ReplaySoundCode_AttachSoundFile =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 4 "Setup a SoundFile for playback",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 -> .Data: soundfile_format,
        R3 = OS_f: file_handle
  )  ),
  ReplaySoundCode_AttachReplay =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 5 "Setup a Replay file for playback",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 -> Replay_Header: hdr,
        R3 = .Int: sound_track,
        R4 = OS_f: file_handle
  )  ),
  ReplaySoundCode_DetachLoader =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 6 "Remove any installed sound file",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info
  )  ),
  ReplaySoundCode_SetState =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 7 "Get the current playback state",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 = .Int: start_sample,
        R3 = .Int: end_sample,
        R4 = .Int: n_times_to_play
  )  ),
  ReplaySoundCode_GetState =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 8 "Set the state in which to start playback",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info
     ),
     EXIT
     (  R0! = .Int: current_sample,
        R1 = .Int: n_times_played
  )  ),
  ReplaySoundCode_SetAction =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 9 "Set an action to occur at a given point",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 = Replay_SoundCodeAction: action,
        R3 = .Int: at_sample
  )  ),
  ReplaySoundCode_InitSoundFile =
  (  NUMBER 0x48B07,
     ENTRY
     (  R0 # 10 "Do initialisation for a SoundFile",
        R0 | .Bits: flags,
        R1 -> Replay_SoundCodeInfo: info,
        R2 -> .Data: sound_file_id,
        R3 = .Int: buf_size,
        R4 = .Int: rate_adjust
  )  );

// ----------------------------------------------------------------------------

TYPE
  Replay_AccessFlags          = .Bits,
  Replay_ReadAccessInfoFlags  = .Bits;

TYPE Replay_AccessInfo = .Struct
  (
     .Int: sizeof_info,
     Replay_AccessFlags: flags,

     .Int: method,
     .Int: latency
  );

CONST Replay_AccessLatencyShift = .Int: 16;

SWI Replay_ReadAccessInfo =
  (  NUMBER 0x48B08 "Read media access info file for the given file name",
     ENTRY
     (  R0 = Replay_ReadAccessInfoFlags: flags,
        R1 -> .String: file_name,
        R2 = .Ref Replay_AccessInfo: info,
        R3 = .Int: sizeof_info
     ),
     EXIT
     (  R3! = .Int: sizeof_info_needed
  )  );

// ----------------------------------------------------------------------------

TYPE Replay_ColourMapFlags        = .Bits;

CONST
  Replay_ColourMapNoTranslation   = .Ref .Data: -1,
  Replay_ColourMapDuplicateShorts = .Ref .Data: -2,

  Replay_ColourMapInterpolate     = Replay_ColourMapFlags: 0x01,

  Replay_ColourMapRMA             = .Int: -1;

TYPE Replay_ColourMapInfo = .Struct
  (
    Replay_ColourMapFlags: flags,

    .Byte: n_bits,
    .Byte: mag,
    .Byte: index,
    .Byte: usage,

    [12] .Char: src_colour_space,

    .Int: n_colours,
    .Ref .Byte: src_palette,
    .Ref .Byte: dst_palette,

    .Ref .Data: data,
    .Int: area_number,
    .Int: area_size
  );

// ----------------------------------------------------------------------------

TYPE
  Replay_CallBackRoutineInfo = .Struct
  (
    .Int: x_eig,    	// var 4,5
    .Int: y_eig,    	// var 4,5
    .Int: n_colours,	// 1,3,15,63,255,65536,-1
    .Ref .Data: screen_base,	// display base
    .Int: row_bytes,	// var 6
    .Int: screen_rows, 	// x wind limit + 1
    .Int: mag_y,    	// 1,2,4
    OS_Coord: movie_size,
    .Int: frame_rate	// fps*100
  )

// ----------------------------------------------------------------------------
