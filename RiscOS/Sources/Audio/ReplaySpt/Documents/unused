
/* ---------------------------------------------------------------------------------------- */

#if 0

/*
 * This function handles requests from the sound file module
 * It is called via an irq veneer. It may be called from a call back.
 */

int s_events(os_register_block *r, void *pw)
{
    soundfile_format *fmt = (soundfile_format *)r->registers[11];

    switch (r->registers[0] & 0xff)
    {
        case soundfile_EXTENSION_LOAD_DATA:
            break;

        case soundfile_EXTENSION_TO16:
            break;

        case soundfile_EXTENSION_DISPOSE:
            free((void *)fmt->format_specific_data[0]);
            fmt->format_specific_data[0] = 0;
            break;
    }

    return 1;
}

static os_error *fillin_soundfile_format(soundfile_format *fmt, const replay_header *hdr, int track_num, void *pw)
{
    os_error *e = NULL;
    const replay_sound_track *track = &((const replay_sound_track *)(hdr+1))[track_num];

    fmt->flags = soundfile_USE_LOAD_DATA | soundfile_USE_DISPOSE |
                    (track->flags & replay_REVERSED_STEREO ? soundfile_REVERSED_STEREO : 0);
    fmt->n_bits = track->n_bits;
    fmt->n_channels = track->n_channels;
    fmt->sample_rate = track->sample_rate;
    fmt->sample_period = track->sample_period;

    switch (track->type)
    {
        case replay_SOUND_TYPE_STANDARD:
            switch (track->sound_file[5])
            {
                case 'E':
                    fmt->data_format = soundfile_8BIT_VIDC;
                    break;

                case 'U':
                    fmt->flags |= soundfile_DATA_IS_UNSIGNED;
                    /* deliberate fall-through */
                case 'S':
                    fmt->data_format = track->n_bits == 8 ? soundfile_8BIT_LINEAR : soundfile_16_BIT_LINEAR;
                    break;
            }

            fmt->max_n_bits = fmt->n_bits;
            fmt->per_channel_overhead = 0;
            break;

        case replay_SOUND_TYPE_INDIRECTED:
            /* this bit should really load up the appropriate sound info file to get the details
             * or maybe the module should scan the directory on startup */
            if (strcmpi(track->sound_file, "ADPCM") == 0)
            {
                fmt->max_n_bits = 4;
                fmt->per_channel_overhead = 4;
                fmt->flags |= soundfile_USE_TO16;
            }
            break;
    }

    fmt->event_handler = (void *)(int)s_events_veneer;
    fmt->event_handler_r12 = (byte *)pw;

    fmt->format_specific_data[0] = (int)hdr;
    strcpy(fmt->format_name, "Acorn Replay");

    return e;
}

/* ---------------------------------------------------------------------------------------- */

/*
On entry:
 r0 = flags
 r2 = filehandle
 r3 ->OS_GBPB info block
 r4 ->1024 bytes from start of file
 r5 ->buffer for details
On exit:
If recognised
 r1 = 0 (claim)
 r5 filled in with details of file type

 * This lot isn't right as far as file handles and buffers go (and file position)

 */

void s_sound_file_identify(os_register_block *r, void *pw)
{
    osgbpb_info_stamped *file_info;
    const char          *file_data;
    os_register_block   swi_r;
    os_error *e;
    replay_header *hdr;

    /* we are only interested in the general case of identifying
    if ((r->registers[0] & 0xff) != soundfile_IDENTIFY_UNKNOWN)
        return;
     */

    /* is it ARMovie file type? */
    file_info = (osgbpb_info_stamped *)r->registers[3];
    if (file_info->file_type != osfile_TYPE_ARMOVIE)
        return;

    /* get size needed */
    swi_r.registers[0] = replay_OPEN_TYPE_FILE_HANDLE | replay_RETURN_SOUND_TRACKS | replay_RETURN_CATALOGUE;
    swi_r.registers[1] = (int)&r->registers[2];
    swi_r.registers[3] = 0;
    swi_r.registers[5] = 0;
    swi_r.registers[7] = 0;
    e = read_file_header(&swi_r);

    /* allocate space */
    hdr = NULL;
    if (!e && (hdr = malloc(swi_r.registers[3])) == NULL)
        e = make_oomerr(FOR_HEADER, swi_r.registers[3]);

    /* read out info */
    if (!e)
    {
        swi_r.registers[0] = replay_OPEN_TYPE_FILE_HANDLE | replay_RETURN_SOUND_TRACKS | replay_RETURN_CATALOGUE;
        swi_r.registers[1] = (int)&r->registers[2];
        swi_r.registers[3] = (int)hdr;
        swi_r.registers[5] = 0;
        swi_r.registers[7] = 0;
        e = read_file_header(&swi_r);
    }

    /* convert to soundfile format info */
    if (!e)
        e = fillin_soundfile_format((soundfile_format *)r->registers[5], hdr, 0, pw);
    else
        free(hdr);

    r->registers[0] = (int)e;
    r->registers[1] = 0;        /* claim service as it should be an ARMovie file */
}

#endif
