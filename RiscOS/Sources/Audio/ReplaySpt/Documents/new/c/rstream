/* > rstream.c

 * © SJ Middleton, 1995

 */

#include "rstream.h"

replay_catalogue_chunk *get_catalogue_chunk(replay_header *hdr, int chunk_num)
{
    char *chunk_base;

    if (chunk_num >= hdr->n_chunks)
    	return NULL;

    chunk_base = (char *)((replay_sound_track *)(hdr + 1) + hdr->n_sound_tracks);

    return (replay_catalogue_chunk *)(chunk_base + chunk_num*replay_SIZEOF_CATALOGUE_CHUNK(hdr->n_sound_tracks));
}

#if 0
int rstream_bytesavailable(rstream *r)
{
    

 NTH_CATALOGUE_CHUNK(cp,n,n_tracks)   

    return r->chunk >= r->n_chunks ? 0 : r->chunks[r->chunk].sound_size[r->sound_track] - r->offset;
}

bool rstream_eof(rstream *r)
{
    return r->chunk >= r->n_chunks;
}

os_error *rstream_seek(rstream *r)
{
    return r->chunk >= r->n_chunks ? NULL : file_setpos(r->f, (*r->chunks)[r->chunk].offset + r->offset);
}

void rstream_seek(rstream *r, int sample_offset)
{
    int chunk_size = ...
    r->chunk = sample_offset / chunk_size;
    r->offset = (sample_offset % chunk_size)*sp->n_bits;
}

static os_error *rstream__read(rstream *r, void *buffer, int max_bytes, int *bytes_read)
{
    replay_catalogue_chunk *chunk;

    if (max_bytes == 0)
        return NULL;

    chunk = &r->chunks[r->chunk];
    e = stream_read(r->id, buffer, max_bytes, bytes_read);
    if (!e)
    {
        r->offset += *bytes_read;
        if (r->offset == chunk->sound_size[r->sound_track])
        {
            if (++r->chunk < r->n_chunks)
                e = stream_set_pos(r->id, r->chunks[r->chunk].offset);

            r->offset = 0;
        }
    }

    return e;
}

os_error *rstream_read(rstream *r, void *buffer, int nbytes, int *unread)
{
    int bytes_read = 0;
    rstream_seek(r);
    do
    {
        int bytes_in_chunk = rstream_bytesavailable(r),
            todo = lowest(bytes_in_chunk, nbytes), done;

        done = rstream__read(r, (char *)buffer + bytes_read, todo);

        nbytes -= done;
        bytes_read += done;

        if (todo != done)
            break;
    }
    while (nbytes > 0 && !rstream_eof(r));

    return bytes_read;
}

#endif

/* eof rstream.c */
