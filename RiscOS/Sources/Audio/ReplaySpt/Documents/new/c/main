/* Title:   main.c
 * Purpose: main module of ReplaySupport module
 * Author:  SJM
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os:os.h"
#include "os:resourcefs.h"
#include "os:soundfile.h"

#include "rpspt_cmhg.h"
#include "main.h"
#include "msgs.h"
#include "resources.h"
#include "soundplay.h"
#include "utils.h"

#define VERSION_NUMBER	27   	/* keep up to data with modhdr */

/* ++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++ */

os_error *Replay_final (int fatal, int podule, void *pw)
{
    os_error *e = NULL;

    e = soundbuffer_free();
    if (!e) e = msgs_close();
    if (!e) e = de_register_resources();

#ifndef NDEBUG
    xtracker_close(debugw);
#endif

    return e;

    NOT_USED(fatal);
    NOT_USED(podule);
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

os_error *Replay_init(char *cmd_tail, int podule_base, void *pw)
{
    os_error *e = NULL;

#ifndef NDEBUG
    xtracker_open("ReplaySupport", 100, 1000, tracker_OPEN_LFTO_CRLF, &debugw);
#endif

    e = register_resources();
    if (!e) e = msgs_init("Resources:$.Resources.ReplaySupport.Messages");

    return e;

    NOT_USED(cmd_tail);
    NOT_USED(podule_base);
    NOT_USED(pw);
}

/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

void Replay_services(int service_number, os_register_block *r, void *pw)
{
    switch (service_number)
    {
/*
        case Service_SoundFileIdentify:
            s_sound_file_identify(r, pw);
            break;
 */
    	case Service_ResourceFSStarting:
    	    re_register_resources(r->registers[2], r->registers[3]);
    	    break;
    }
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

os_error *Replay_SWI_handler(int swi_no, os_register_block *r, void *pw)
{
    os_error *e = NULL;

    switch (swi_no)
    {
        case Replay_RegisterSprites - Replay_00:
            e = RegisterSprites(r);
            break;

        case Replay_DeRegisterSprites - Replay_00:
            e = DeRegisterSprites();
            break;

        case Replay_TimebarPaintAddress - Replay_00:
        {
            int new_call = r->registers[0] == -1;
            r->registers[0] = TimebarPaintAddress(new_call ? (void *)r->registers[1] : (void *)r, new_call);
            break;
        }

    	case Replay_Version - Replay_00:
    	{
    	    char buffer[256];
    	    e = ReplayGetVersion(&r->registers[0], buffer, sizeof(buffer));
    	    break;
    	}

        case Replay_ReadFileHeader - Replay_00:
            e = read_file_header((replay__input *)r);
            break;

        case Replay_ReadVideoCodecInfo - Replay_00:
            e = read_video_codec_info(r->registers[0], r->registers[1], (replay_video_codec_info *)r->registers[2], r->registers[3], &r->registers[3]);
            break;

        case Replay_ReadSoundCodecInfo - Replay_00:
            e = read_sound_codec_info(r->registers[0], r->registers[1], (const char *)r->registers[2], (replay_sound_codec_info *)r->registers[3], r->registers[4], &r->registers[4]);
            break;

        case Replay_SoundCode - Replay_00:
            e = sound_code_control(r, pw);
            break;

#ifndef NO_ACCESS
        case Replay_ReadAccessInfo - Replay_00:
            e = read_access_info(r->registers[0], (char *)r->registers[1], (replay_access_info *)r->registers[2], r->registers[3], &r->registers[3]);
            break;
#endif
    }

    return e;

    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

#ifndef NDEBUG
extern void arsndcode_debug_output(void);
extern void play_debug_output(void);
#endif

os_error *Replay_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    os_error *e = NULL;

    switch (cmd_no)
    {
    	case CMD_ReplayCheckVer:
    	{
    	    char buffer[256];
    	    e = ReplayCheckVer_Code(arg_string, argc, buffer, sizeof(buffer));
    	    break;
    	}

    	case CMD_ReplaySupportInfo:
#ifndef NDEBUG
    	    play_debug_output();
#endif
            arsndcode_debug_output();
    	    break;
    }

    return e;
    NOT_USED(argc);
    NOT_USED(pw);
}

/* ----------------------------------------------------------------------- */

/* eof main.c */

