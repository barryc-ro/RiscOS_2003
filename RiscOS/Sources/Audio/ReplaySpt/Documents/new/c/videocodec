/* > videocodec.c

 * © SJ Middleton, 1995

 */

typedef struct
{
    unsigned word;
    char dst_shift;
    char src1_shift;
    char src2_shift;
    char base_shift;
} video_codec_patch_instr;

static video_codec_patch_instr instructions[] =
{
    { 0xe1a00000, 12, 0, 255, 255 }, // MOV rd,rs
    { 0xe1800800, 12, 0, 16, 255 },  // ORR rd,rs,rs,LSL #16
    { 0xe7900100, 12, 0, 255, 16 },  // LDR rd, [rb, rs, ASL #2]
    { 0xe7900080, 12, 0, 255, 16 },  // LDR rd, [rb, rs, ASL #1]
    { 0xe7D00000, 12, 0, 255, 16 },  // LDRB rd, [rb, rs]
    { 0xe7D00080, 12, 0, 255, 16 }   // LDRB rd, [rb, rs, ASL #1]
};


void replay_video_codec_make_string(char *cli, int video_type, int format)
{
static char *leaf_names[] =
{
    "Decompress",   // 1 pixel  per word output
    "DecompresH",   // 2 pixels
    "DecompresB",   // 4 pixels
    "Dec21",	    // 21 bit output + colourspace suffix
    "Dec24" 	    // 24 bit output + colourspace suffix
};
    if (video_type == 1)
    	strcpy(cli, "<ARMovie$Dir>.MovingLine.");
    else
    	sprintf(cli, "<ARMovie$Dir>.Decomp%d.", video_type);
    strcat(cli, leaf_names[format]);
}

typedef struct replay_video_codec_context
{
    // link to next bit of code
    struct replay_video_codec_context *next;

    // data to tell whether this is the same code or not
    char *file_name;	// points to after the code itself
    int patch_word;

    int use;	    	// count of how many times it has been claimed

    bool in_use;    	// between an initialisation and finalisation call

    // the codec itself
    replay_video_codec codec;
} replay_video_codec_context;

/* eof videocodec.c */
