/* > colourmap.c

 * © SJ Middleton, 1995

 */

#include "os:replay.h"

#include <stdio.h>
#include <string.h>

#include "strfn.h"

void replay_colour_map_make_string(char *cli, const replay_colour_map_info *info)
{
    int n;
    n = sprintf(cli, "<ARMovie$Dir>.MovingLine.ColourMap.%s%d m%d n%d",
    	info->src_colour_space, info->n_bits, info->mag, info->n_cols);

    if (info->src_palette)
    	n += sprintf(cli, " s%d", (int)info->src_palette);

    if (info->flags & replay_COLOUR_MAP_INTERPOLATE)
    	n += sprintf(cli, " interp");
}

void replay_colour_map_decode_variable(const char *var, replay_colour_map_info *info)
{
    char *s1 = strdup(var);
    char *s = s1;

    info->data = (void *)strtoul(var, &s, 10);

    s++;
    if (strncmpi(s, "RMA", 3) == 0)
    	info->area_number = replay_COLOUR_MAP_RMA;
    else
    	info->area_number = (int)strtoul(s, &s, 10);

    s++;
    info->area_size = (int)strtoul(s, &s, 10);

    if ((s = strtok(s, " ")) != NULL) do
    {
        int c = *s++;
        switch (tolower(c))
        {
            case 'd':
            	info->dst_palette = (char *)atoi(s);
            	break;
            case 'm':
            	info->mag = (char)atoi(s);
            	break;
            case 'n':
            	info->n_cols = (char)atoi(s);
            	break;
            case 's':
            	info->src_palette = (char *)atoi(s);
            	break;
    	    case '\'':
    	    {
    	    	char *end = strchr(s, '\'');
    	    	if (end) *end = 0;
    	    	strcpy(info->src_colour_space, s);
    	    	break;
    	    }
    	    case '1':
    	    	info->usage = strlen(s)+1;
    	    	break;
        }
    }
    while ((s = strtok(NULL, " ") != NULL);

    return s1;
}

void replay_colour_map_claim(const char *var)
{
    char s[256];
    strcpy(s, getenv(var));
    strcat(s, s[strlen(s)-1] == '\'' ? " 1" : "1");
    xos_set_var_val(var, s, strlen(s), 0, os_VARTYPE_LITERAL_STRING, SKIP, SKIP);
}

void replay_colour_map_release(const char *var)
{
    char *s = getenv(var);
    xos_set_var_val(var, s, strlen(s)-1, 0, os_VARTYPE_LITERAL_STRING, SKIP, SKIP);
}

#define COLOUR_MAP_VAR	"ARMovie$ColourMap%d"

int replay_colour_map_scan(replay_colour_map_info *info)
{
    int index;
    int n = atoi(strsafe(getenv("ARMovie$ColourMapMax")));
    for (index = 0; index <= n; index++)
    {
        char var[sizeof(COLOUR_MAP_VAR)];
        char *s;

        sprintf(var, COLOUR_MAP_VAR, index);
    	s = getenv(var);
    	if (s)
    	{
    	    replay_colour_map_info index_info;

    	    replay_colour_map_decode_variable(s, &index_info);

    	    if (info->mag == index_info.mag &&
    	    	info->n_cols == index_info.n_cols &&
    	    	info->flags == index_info.flags &&
    	    	strcmpi(info->src_colour_space, index_info.src_colour_space) == 0 &&
    	    	(info->src_palette == index_info.src_palette ||
    	    	    memcmp(info->src_palette, index_info.src_palette, 3<<info->n_bits) == 0))
    	    {
    	    	*info = index_info;
    	    	info->index = index;
    	    	return index;
    	    }
    	}
    }
    return -1;
}

/* eof colourmap.c */
