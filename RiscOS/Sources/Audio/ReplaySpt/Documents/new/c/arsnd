/* > arsnd.c

 * © SJ Middleton, 1993

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os:replay.h"

#include "utils.h"
#include "main.h"

#define FOR_CODEC_INFO          msgs_lookup("sInf")

/* ---------------------------------------------------------------------------------------- */

/*
 * Cache variable
 *
 * ARMovie$SoundInfo <sound dir> <E8> <U8> <S8> <S16> <A4>
 *
 */

static char *sound_1_names[] = { "E8", "U8", "S8", "S16", "A4" };

static os_error *search_sound_names(stream_context *stream, const char *sound_name, replay_sound_codec_info *ip)
{
    os_error *e = NULL;
    int i, n;
    char var[256];

    if (stream)
    {
    	strcpy(var, getenv("ARMovie$SoundDir"));
    	n = strlen(var);
    }

    for (i = 0; !e && i < 5; i++)
    {
        char buffer[32], *s = buffer;
    	if (stream)
    	{
            e = file_readlinebuffer(stream, buffer, sizeof(buffer));
            if (!e)
            {
                var[n] = ' ';
                n += strcpy_ctrl(var+n+1, buffer, sizeof(var)-n-1) + 1;
            }
        }
        else
    	    s = strtok(NULL, " ");

    	if (!e)
    	{
    	    if (strcmp(&sound_name[5], sound_1_names[i]) == 0)
    	    {
            	ip->flags = i == 4 ? 0 : replay_SOUND_CODEC_SEEKABLE;
            	ip->buffer_size_multiplier = atoi(s);
            	ip->max_sample_size = atoi(&sound_name[6]);
            }
     	}
    }

    if (stream && i == 5)
        _kernel_setenv("ARMovie$SoundInfo", var);

    return e;
}

bool read_sound_codec_info_cached(int sound_type, const char *sound_name, replay_sound_codec_info *ip)
{
    bool handled = FALSE;
    switch (sound_type)
    {
        case replay_SOUND_TYPE_STANDARD:
    	{
    	    char *sinfo = strdup(getenv("ARMovie$SoundInfo"));
    	    if (sinfo)
    	    {
    	    	char *sdir = strdup(getenv("ARMovie$SoundDir"));
    	    	char *s;

    	    	// check whether we are dealing with the right sound dir
    	    	s = strtok(sinfo, " ");
    	    	if (strcmpi(s, sdir) == 0)
    	    	{
    	    	    search_sound_names(NULL, sound_name, ip);
    	    	    handled = TRUE;
    	    	}

    	    	free(sdir);
    	    	free(sinfo);
    	    }
    	    break;
    	}
    }
    return handled;
}

os_error *read_sound_codec_info(bits flags, int sound_type, const char *sound_name, replay_sound_codec_info *input_info, int input_info_size, int *size_out)
{
    os_error *e;
    char buffer[128];
    replay_sound_codec_info info, *ip;
    stream_context stream;

    char *strings, **pstrings;
    int string_size;

    /* Info files only defined for type 2 (indirected) audio
    if (sound_type != replay_SOUND_TYPE_INDIRECTED)
   	return make_err(error_REPLAY_BAD_SOUND_TYPE, NULL, sound_type);
     */

    /* initialise variables and stuff */
    ip = &info;
    memset(&info, 0, sizeof(info));
    ip->size = sizeof(replay_sound_codec_info);

    strcpy(buffer, "<ARMovie$SoundDir>.");
    switch (sound_type)
    {
        case replay_SOUND_TYPE_STANDARD:
    	    strcat(buffer, "SoundInfo");
    	    break;

        case replay_SOUND_TYPE_INDIRECTED:
            strcat(buffer, sound_name);
            strcat(buffer, ".Info");
    	    break;

    	default:
   	    return make_err(error_REPLAY_BAD_SOUND_TYPE, NULL, sound_type);
    }

    e = stream_open(stream_OPEN_TYPE_FILE_NAME, buffer, &stream);

    strings = NULL;
    string_size = 0;
    pstrings = input_info && input_info_size ? &strings : NULL;

    /* read out the textual data */
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* description */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->description_offset);
    if (!e)
    	e = file_readlinebuffer(&stream, buffer, sizeof(buffer));	    /* copyright */
    if (!e && flags & replay_RETURN_TEXT)
    	e = check_string(buffer, pstrings, &string_size, &ip->author_offset);

    /* only do rest if supplied an input buffer */
    if (!e && input_info && input_info_size)
    {
    	if (sound_type == replay_SOUND_TYPE_STANDARD)
    	{
    	    e = search_sound_names(&stream, sound_name, ip);
    	}
    	else
    	{
            e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
            if (!e)
            {
                if (strtoul(buffer, NULL, 10))
                    ip->flags |= replay_SOUND_CODEC_SEEKABLE;
                e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
            }
            if (!e)
            {
                ip->buffer_size_multiplier = (int)strtoul(buffer, NULL, 10);
                e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
            }
            if (!e)
            {
                if (strtoul(buffer, NULL, 10))
                    ip->flags |= replay_SOUND_CODEC_VARIABLE_SIZE;
                e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
            }
            if (!e)
            {
                ip->max_sample_size = read_fraction(buffer, replay_SOUND_CODEC_MAX_SIZE_SHIFT);
                e = file_readlinebuffer(&stream, buffer, sizeof(buffer));
            }

            if (!e)
                ip->per_channel_overhead = (int)strtoul(buffer, NULL, 10);

            if (e && e->errnum == error_REPLAY_OUT_OF_DATA)
        	e = NULL;
        }

        /* check if there is enough space to write out to */
        if (!e)
        {
            if (input_info_size < sizeof(replay_sound_codec_info) + string_size)
                e = make_err(error_REPLAY_NO_ROOM, NULL, FOR_CODEC_INFO);
            else
            {
                if (flags & replay_RETURN_TEXT)
                {
                    ip->description_offset += sizeof(replay_sound_codec_info);
                    ip->author_offset += sizeof(replay_sound_codec_info);
                    memcpy(input_info+1, strings, string_size);
                }
                memcpy(input_info, ip, sizeof(replay_sound_codec_info));
            }
        }
    }

    /* write out size needed */
    if (size_out)
        *size_out = sizeof(replay_sound_codec_info) + string_size;

    /* clean up temporary use */
    free(strings);
    stream_close(&stream);

    return e;
}

/* ---------------------------------------------------------------------------------------- */

//* eof arinfo.c */
