; > video.s

; © SJ Middleton, 1995

; wrappers for calls to Replay video decompressors


		GET	os:hdr.replay

		GET	asm:ListOpt
		GET	asm:Macros
		GET	asm:Proc

; a1 = x
; a2 = y
; a3 -> codec block
; a4 -> params

; extern os_error *replay_video_codec_init(int x, int y, replay_video_codec *codec, void *params);

		EXPORT	replay_video_codec_init

replay_video_codec_init
		Entry	"r4-r11"

		MOV	ip, a3
		LDR	a3, %ft00

		MOV	lr, pc					; return address
		ADD	pc, ip, #Replay_VideoCodec_init_entry	; call function

		MOV	a1, #0

		EXITS

00		=	"PARM"

; a1 = x
; a2 = y
; a3 -> codec block

; extern os_error *replay_video_codec_final(int x, int y, replay_video_codec *codec);

		EXPORT	replay_video_codec_final

replay_video_codec_final
		Entry	"r4-r11"

		MOV	ip, a3
		LDR	a3, %ft00

		MOV	lr, pc					; return address
		ADD	pc, ip, #Replay_VideoCodec_init_entry	; call function

		MOV	a1, #0

		EXITS

00		=	"SHUT"

; r0 -> src
; r1 -> dst
; r2 -> prv
; r3 -> lookup
; [sp,#0] -> codec block

; extern os_error *replay_video_codec_decompress(void *src, void *dst, void *prv, void *table, replay_video_codec *codec, void **new_src);

		EXPORT	replay_video_codec_decompress

replay_video_codec_decompress
		Entry	"r4-r11"

		LDR	ip, [sp, #9*4]

		MOV	v1, pc						; return address
		ADD	pc, ip, #Replay_VideoCodec_decompress_entry	; call function

		LDR	ip, [sp, #10*4]
		CMP	ip, #0
		STRNE	a1, [ip]

		MOV	a1, #0

		EXITS

		END

eof video.s
