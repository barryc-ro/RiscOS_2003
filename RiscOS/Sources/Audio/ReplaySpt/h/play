/* > play.h

 * © SJ Middleton, 1995

 */

#ifndef __play_h
# define __play_h

#ifndef replay_H
# include "replay.h"
#endif

#ifndef soundfile_H
# include "soundfile.h"
#endif

typedef struct soundcode_context soundcode_context;

typedef os_error *(*load_fn)(soundcode_context *sc);

#define SOUNDCODE_ID    'SCOD'

struct soundcode_context
{
    struct soundcode_context *prev, *next;
    int id;
    char *file_name;	    /* held at end of block */

    // data passed in by set_state
    int n_times_to_play;
    int start_sample;
    int end_sample;

    // context info
    int n_times_left;
    int start_chunk, start_chunk_byte_offset;
    int end_chunk, end_chunk_byte_offset;

    int stream_handle;

    int n_chunks;
    int current_chunk;

    char usage;
    char n_channels;
    char enable_irqs;
    char in_use;

    // queued functions
    unsigned pending_action_sample;
    void (*pending_action)(struct soundcode_context *);

    // buffer info
    byte *file_buffer;
    int file_buffer_size;
    int file_buffer_used;

    byte *build_buffer;
    int build_buffer_size;
    int build_buffer_used;

    int hw_buffer_size;

    // info for higher level play calls
    struct
    {
        int n_bits_hw;
    } sf;

    // depends on stream or chunk
    load_fn load_data_fn;
    void *loader_data_ptr;
    int loader_data[4];

    replay_sound_code_info info;
};

#define SOUNDCODE_CONTEXT(r) ((soundcode_context *)((char *)(r) - offsetof(soundcode_context, info)))

#ifdef NDEBUG
# define BORDER(col)
#else
# if 0
   // VIDC 20
#  define BORDER(col)    do { *(int *)(0x03500000) = ((col)>>8) | 0x40000000; } while (0)
# else
   // VIDC 1a
#  define BORDER(col)    do { *(int *)(0x03400000) = ((col)>>8) | 0x40000000; } while (0)
# endif
#endif

// from arsndcode.c

extern os_error *attach_buffers(soundcode_context *sc, byte *buffer, int file_bufsize, int build_bufsize, int hw_bufsize, byte **buffer_out);

// from play.c

extern os_error *attach_replay_loader(bits flags, soundcode_context *sp, replay_header *hdr, int sound_track, os_f file_handle, void *pw);
extern os_error *attach_soundfile_loader(bits flags, soundcode_context *sc, soundfile_format *input_fmt, os_f file_handle, void *pw);

extern os_error *detach_loader(bits flags, soundcode_context *sc, void *pw);

extern os_error *play_set_state(bits flags, soundcode_context *sp, int start_sample, int end_sample, int n_times_to_play);
extern os_error *play_get_state(bits flags, soundcode_context *sc, int *current_sample, int *times_played);

extern os_error *play_set_action(bits flags, soundcode_context *sc, int reason, int at_sample);

extern void play_set_default_state(soundcode_context *sc);
extern void play_debug_output(void);

#endif

/* eof play.h */
