/* > main.h

 * © SJ Middleton, 1995

 */

#ifndef __main_h
# define __main_h

#ifndef replay_H
# include "replay.h"
#endif

/* From rpspt.s */

extern int TimebarPaintAddress(void *block, bool new_call);

extern os_error *RegisterSprites(os_register_block *r);
extern os_error *DeRegisterSprites(void);

extern os_error *ReplayCheckVer_Code(const char *cmd_tail, int nparams, void *ws, int ws_size);
extern os_error *ReplayGetVersion(int *version, void *ws, int ws_size);

/* From rpspt.c */

#if 0
extern os_error *Replay_final (int fatal, int podule, void *pw);
extern os_error *Replay_init(char *cmd_tail, int podule_base, void *pw);
extern os_error *Replay_SWI_handler(int swi_no, os_register_block *r, void *pw);
extern os_error *Replay_commands(char *arg_string, int argc, int cmd_no, void *pw);
extern void Replay_services(int service_number, os_register_block *r, void *pw);
#endif

/* From arhdr.c */

typedef struct
{
      bits flags;
      char *filename;
      replay_header *header_buffer;
      int header_buffer_size;
      byte *sprite_buffer;
      int sprite_buffer_size;
      byte *palette_buffer;
      int palette_buffer_size;
      int r[3];
} replay__input;

extern os_error *read_file_header (replay__input *i);

/* From arinfo.c */

extern os_error *read_video_codec_info(bits flags, int video_type, const char *video_name, replay_video_codec_info *input_info, int input_info_size, int *size_out);
extern bool read_video_codec_info_cached(int video_type, const char *video_name, replay_video_codec_info *info);

/* From arsnd.c */

extern os_error *read_sound_codec_info(bits flags, int sound_type, const char *sound_name, replay_sound_codec_info *input_info, int input_info_size, int *size_out);

/* From arsndcode.c */

extern os_error *sound_code_control(os_register_block *r, void *pw);

/* From access.c */

extern os_error *read_access_info(bits flags, const char *filename, replay_access_info *input_info, int input_info_size, int *size_out);

/* From play.c */
#if 0
extern int ticker_call_back(os_register_block *r, void *pw);
extern int ticker_event(os_register_block *r, void *pw);
#endif

/* From cmhg header */

extern void ticker_event_veneer(void);
extern void ticker_call_back_veneer(void);

#define NEXT_CATALOGUE_CHUNK(cp,size)    ((replay_catalogue_chunk *)((char *)(cp) + (size)))
#define NTH_CATALOGUE_CHUNK(cp,n,size)   ((replay_catalogue_chunk *)((char *)(cp) + (n)*(size)))

#define BASE_CATALOGUE_CHUNK(hdr)  	 ((replay_catalogue_chunk *)\
    ((hdr)->flags & replay_HEADER_RELOCATED_OFFSETS ? \
     (hdr)->catalogue_chunks.ptr : \
     (byte *)(hdr) + (hdr)->catalogue_chunks.offset))

#endif

/* eof main.h */
