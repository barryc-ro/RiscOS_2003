#ifndef replay_H
#define replay_H

/* C header file for Replay
 * written by DefMod (Aug 30 1995) on Mon Jun 24 12:35:25 1996
 * Simon Middleton
 */

#ifndef types_H
#include "OS:types.h"
#endif

#ifndef os_H
#include "OS:os.h"
#endif

#ifndef osspriteop_H
#include "OS:osspriteop.h"
#endif

/**********************************
 * SWI names and SWI reason codes *
 **********************************/
#undef  Replay_RegisterSprites
#define Replay_RegisterSprites                  0x48B00
#undef  XReplay_RegisterSprites
#define XReplay_RegisterSprites                 0x68B00
#undef  Replay_DeRegisterSprites
#define Replay_DeRegisterSprites                0x48B01
#undef  XReplay_DeRegisterSprites
#define XReplay_DeRegisterSprites               0x68B01
#undef  Replay_TimebarPaintAddress
#define Replay_TimebarPaintAddress              0x48B02
#undef  XReplay_TimebarPaintAddress
#define XReplay_TimebarPaintAddress             0x68B02
#undef  Replay_TimebarPaintAddressExtended
#define Replay_TimebarPaintAddressExtended      0x48B02
#undef  XReplay_TimebarPaintAddressExtended
#define XReplay_TimebarPaintAddressExtended     0x68B02
#undef  Replay_Version
#define Replay_Version                          0x48B03
#undef  XReplay_Version
#define XReplay_Version                         0x68B03
#undef  Replay_ReadFileHeader
#define Replay_ReadFileHeader                   0x48B04
#undef  XReplay_ReadFileHeader
#define XReplay_ReadFileHeader                  0x68B04
#undef  Replay_ReadVideoCodecInfo
#define Replay_ReadVideoCodecInfo               0x48B05
#undef  XReplay_ReadVideoCodecInfo
#define XReplay_ReadVideoCodecInfo              0x68B05
#undef  Replay_ReadVideoCodecInfoNew
#define Replay_ReadVideoCodecInfoNew            0x48B05
#undef  XReplay_ReadVideoCodecInfoNew
#define XReplay_ReadVideoCodecInfoNew           0x68B05
#undef  Replay_ReadSoundCodecInfo
#define Replay_ReadSoundCodecInfo               0x48B06
#undef  XReplay_ReadSoundCodecInfo
#define XReplay_ReadSoundCodecInfo              0x68B06
#undef  ReplaySoundCode_Load
#define ReplaySoundCode_Load                    0x0
#undef  ReplaySoundCode_Unload
#define ReplaySoundCode_Unload                  0x1
#undef  ReplaySoundCode_AttachBuffers
#define ReplaySoundCode_AttachBuffers           0x2
#undef  ReplaySoundCode_DetachBuffers
#define ReplaySoundCode_DetachBuffers           0x3
#undef  ReplaySoundCode_AttachSoundFile
#define ReplaySoundCode_AttachSoundFile         0x4
#undef  ReplaySoundCode_AttachReplay
#define ReplaySoundCode_AttachReplay            0x5
#undef  ReplaySoundCode_DetachLoader
#define ReplaySoundCode_DetachLoader            0x6
#undef  ReplaySoundCode_SetState
#define ReplaySoundCode_SetState                0x7
#undef  ReplaySoundCode_GetState
#define ReplaySoundCode_GetState                0x8
#undef  ReplaySoundCode_SetAction
#define ReplaySoundCode_SetAction               0x9
#undef  ReplaySoundCode_InitSoundFile
#define ReplaySoundCode_InitSoundFile           0xA
#undef  Replay_ReadAccessInfo
#define Replay_ReadAccessInfo                   0x48B08
#undef  XReplay_ReadAccessInfo
#define XReplay_ReadAccessInfo                  0x68B08

/************************************
 * Structure and union declarations *
 ************************************/
typedef struct replay_catalogue_chunk           replay_catalogue_chunk;
typedef struct replay_sound_track               replay_sound_track;
typedef union  replay_header_offset             replay_header_offset;
typedef struct replay_header                    replay_header;
typedef struct replay_timebar_paint_info        replay_timebar_paint_info;
typedef struct replay_video_codec_dim           replay_video_codec_dim;
typedef struct replay_video_codec_info          replay_video_codec_info;
typedef struct replay_video_codec               replay_video_codec;
typedef struct replay_sound_codec_info          replay_sound_codec_info;
typedef struct replay_sound_poll                replay_sound_poll;
typedef struct replay_sound_buffer              replay_sound_buffer;
typedef struct replay_sound_code                replay_sound_code;
typedef struct replay_sound_code_info           replay_sound_code_info;
typedef struct replay_access_info               replay_access_info;
typedef struct replay_colour_map_info           replay_colour_map_info;
typedef struct replay_call_back_routine_info    replay_call_back_routine_info;

/********************
 * Type definitions *
 ********************/
typedef bits replay_sound_track_flags;

typedef int replay_sound_track_type;

typedef bits replay_header_flags;

typedef int replay_video_type;

struct replay_catalogue_chunk
   {  int video_offset;
      int video_size;
      int sound_size [UNKNOWN];
   };

#define replay_CATALOGUE_CHUNK(N) \
   struct \
      {  int video_offset; \
         int video_size; \
         int sound_size [N]; \
      }

#define replay_SIZEOF_CATALOGUE_CHUNK(N) \
   (offsetof (replay_catalogue_chunk, sound_size) + \
         (N)*sizeof ((replay_catalogue_chunk *) NULL)->sound_size)

struct replay_sound_track
   {  replay_sound_track_flags flags;
      replay_sound_track_type type;
      int sample_rate;
      byte n_channels;
      byte n_bits;
      byte sample_period;
      byte snd_mul;
      int max_chunk_size;
      char sound_file [11];
   };

typedef int replay_video_param_type;

union replay_header_offset
   {  int offset;
      byte *ptr;
   };

struct replay_header
   {  int sizeof_header;
      replay_header_flags flags;
      struct
      {  replay_header_offset description;
         replay_header_offset date;
         replay_header_offset author;
      }
      text;
      struct
      {  replay_video_type type;
         replay_header_offset indirected_filename;
         replay_header_offset colour_space;
         os_coord size;
         int bits_per_pixel;
      }
      video;
      int frames_per_chunk;
      int n_chunks;
      int sizeof_catalogue_chunk;
      int n_frames;
      int frame_rate;
      int start_timecode;
      int base_timecode;
      struct
      {  int catalogue_offset;
         int catalogue_size;
         int sprite_offset;
         int sprite_size;
         int key_frame_offset;
         int palette_offset;
         int header_end_offset;
      }
      file_info;
      int max_even_chunk_size;
      int max_odd_chunk_size;
      int n_sound_tracks;
      int sizeof_sound_track;
      replay_header_offset video_params;
      replay_header_offset catalogue_chunks;
      replay_header_offset sound_tracks;
      replay_header_offset fetcher_name;
   };

struct replay_timebar_paint_info
   {  int pixels_per_frame;
      int timebar_address;
      int timebar_height;
      int fg_colour;
      int bg_colour;
      int log2bpp;
      int max_pixels;
   };

typedef bits replay_read_file_header_flags;

typedef bits replay_video_codec_flags;

struct replay_video_codec_dim
   {  int inc;
      int min;
      int max;
   };

struct replay_video_codec_info
   {  replay_video_codec_flags flags;
      int size;
      int description_offset;
      int author_offset;
      int bits_per_pixel;
      replay_video_codec_dim x;
      replay_video_codec_dim y;
      int n_colour_spaces;
   };

struct replay_video_codec
   {  int patch_table_offset;
      int init_entry;
      int decompress_entry;
      byte code [UNKNOWN];
   };

typedef bits replay_read_video_codec_info_flags;

typedef bits replay_sound_codec_flags;

typedef bits replay_read_sound_codec_info_flags;

struct replay_sound_codec_info
   {  replay_sound_codec_flags flags;
      int size;
      int description_offset;
      int author_offset;
      int buffer_size_multiplier;
      int max_sample_size;
      int per_channel_overhead;
   };

typedef bits replay_poll_flags;

typedef int replay_sound_code_play_reason;
      /*Passed in R1 in calls to play_entry*/

typedef byte replay_sound_code_quality;

typedef byte replay_sound_code_stereo_flags;

typedef bits replay_sound_code_interface_flags;

typedef bits replay_sound_code_info_flags;

typedef int replay_sound_code_action;

struct replay_sound_poll
   {  replay_poll_flags global_flags;
      int chunk_time;
      int frequency_int;
      int frequency_frac;
      replay_sound_code_quality quality;
      replay_sound_code_stereo_flags stereo_flags;
      byte reserved_b [2];
      int reserved_i [11];
   };

struct replay_sound_buffer
   {  int count;
      int empty;
      byte *start;
   };

struct replay_sound_code
   {  int play_entry;
      int stop_entry;
      int data_entry;
      replay_sound_code_interface_flags interface_flags;
      replay_sound_buffer *buffer [2];
      int reserved [3];
      int samples_played_int;
      int samples_played_frac;
      byte code [UNKNOWN];
   };

struct replay_sound_code_info
   {  replay_sound_code_info_flags flags;
      os_error *error;
      replay_sound_poll poll;
      replay_sound_code code;
   };

typedef bits replay_sound_code_load_flags;

typedef bits replay_access_flags;

typedef bits replay_read_access_info_flags;

struct replay_access_info
   {  int sizeof_info;
      replay_access_flags flags;
      int method;
      int latency;
   };

typedef bits replay_colour_map_flags;

struct replay_colour_map_info
   {  replay_colour_map_flags flags;
      byte n_bits;
      byte mag;
      byte index;
      byte usage;
      char src_colour_space [12];
      int n_colours;
      byte *src_palette;
      byte *dst_palette;
      byte *data;
      int area_number;
      int area_size;
   };

struct replay_call_back_routine_info
   {  int x_eig;
      int y_eig;
      int n_colours;
      byte *screen_base;
      int row_bytes;
      int screen_rows;
      int mag_y;
      os_coord movie_size;
      int frame_rate;
   };

/************************
 * Constant definitions *
 ************************/
#define error_REPLAY_BASE                       0x80DA20u
      /*32 errors*/
#define error_REPLAY_BAD_FILE                   0x80DA21u
      /*File does not appear to be a Replay file*/
#define error_REPLAY_NO_ROOM                    0x80DA22u
      /*Supplied buffer is too small*/
#define error_REPLAY_NO_CHUNK_SIZE              0x80DA23u
      /*Corrupt chunk catalogue - no size specified*/
#define error_REPLAY_BAD_SOUND_TRACK            0x80DA24u
      /*Sound track number in catalogue not defined in header*/
#define error_REPLAY_BAD_SOUND_TYPE             0x80DA25u
      /*Unknown sound type (0-2)*/
#define error_REPLAY_NO_SOUND_DRIVER            0x80DA26u
      /*Sound driver file not found*/
#define error_REPLAY_ALREADY_PLAYING            0x80DA27u
      /*A sound is already playing*/
#define error_REPLAY_OUT_OF_DATA                0x80DA28u
      /*Less data in file than expected*/
#define error_REPLAY_NO_SOUND_CODE              0x80DA29u
      /*Null or previously freed soundcode ptr supplied*/
#define error_REPLAY_NO_MEM                     0x80DA2Au
      /*Out of memory*/
#define replay_FILE_TYPE                        0xAE7u
#define replay_STEREO_REVERSED                  ((replay_sound_track_flags) 0x1u)
#define replay_SOUND_SEEKABLE                   ((replay_sound_track_flags) 0x2u)
#define replay_SOUND_TYPE_NONE                  ((replay_sound_track_type) 0x0u)
#define replay_SOUND_TYPE_STANDARD              ((replay_sound_track_type) 0x1u)
#define replay_SOUND_TYPE_INDIRECTED            ((replay_sound_track_type) 0x2u)
#define replay_SAMPLE_RATE_SHIFT                10
#define replay_HEADER_RELOCATED_OFFSETS         ((replay_header_flags) 0x1u)
#define replay_VIDEO_TYPE_NONE                  ((replay_video_type) 0x0u)
#define replay_VIDEO_TYPE_MOVING_LINES          ((replay_video_type) 0x1u)
#define replay_VIDEO_TYPE_15BIT                 ((replay_video_type) 0x2u)
#define replay_VIDEO_TYPE_15BIT_211             ((replay_video_type) 0x3u)
#define replay_VIDEO_TYPE_8BIT                  ((replay_video_type) 0x4u)
#define replay_VIDEO_TYPE_15BIT_420             ((replay_video_type) 0x5u)
#define replay_VIDEO_TYPE_15BIT_16Y1UV          ((replay_video_type) 0x6u)
#define replay_VIDEO_TYPE_MOVING_BLOCKS         ((replay_video_type) 0x7u)
#define replay_VIDEO_TYPE_24BIT                 ((replay_video_type) 0x8u)
#define replay_VIDEO_TYPE_24BIT_211             ((replay_video_type) 0x9u)
#define replay_VIDEO_TYPE_24BIT_420             ((replay_video_type) 0xAu)
#define replay_VIDEO_TYPE_24BIT_16Y1UV          ((replay_video_type) 0xBu)
#define replay_VIDEO_TYPE_MPEG                  ((replay_video_type) 0xCu)
#define replay_VIDEO_TYPE_MPEG_DATA             ((replay_video_type) 0xDu)
#define replay_VIDEO_TYPE_ULTIMOTION            ((replay_video_type) 0xEu)
#define replay_VIDEO_TYPE_INDIRECTED            ((replay_video_type) 0xFu)
#define replay_VIDEO_TYPE_MOVING_BLOCKS_HQ      ((replay_video_type) 0x11u)
#define replay_VIDEO_TYPE_EIDOS_BASE            ((replay_video_type) 0x64u)
#define replay_VIDEO_TYPE_ESCAPE                ((replay_video_type) 0x66u)
#define replay_VIDEO_TYPE_IRLAM_BASE            ((replay_video_type) 0xC8u)
#define replay_VIDEO_TYPE_IRLAM_RTC1            ((replay_video_type) 0xC9u)
#define replay_VIDEO_TYPE_IRLAM_MJPEG           ((replay_video_type) 0xCAu)
#define replay_VIDEO_TYPE_WILD_VISION_BASE      ((replay_video_type) 0x12Cu)
#define replay_VIDEO_TYPE_ASPEX_BASE            ((replay_video_type) 0x190u)
#define replay_VIDEO_TYPE_IOTA_BASE             ((replay_video_type) 0x1F4u)
#define replay_VIDEO_TYPE_IOTA_ACE_FILM         ((replay_video_type) 0x1F4u)
#define replay_VIDEO_TYPE_WARM_SILENCE_BASE     ((replay_video_type) 0x258u)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_CRAM8 ((replay_video_type) 0x258u)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_CRAM16 ((replay_video_type) 0x259u)
#define replay_VIDEO_TYPE_WARM_SILENCE_CVID     ((replay_video_type) 0x25Au)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_RPZA  ((replay_video_type) 0x25Bu)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_SMC   ((replay_video_type) 0x25Cu)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_ULTIMOTION ((replay_video_type) 0x25Du)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_RGB8 ((replay_video_type) 0x25Eu)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_RLE8 ((replay_video_type) 0x25Fu)
#define replay_VIDEO_TYPE_WARM_SILENCE_AVI_RGB24 ((replay_video_type) 0x260u)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_RLE8  ((replay_video_type) 0x261u)
#define replay_VIDEO_TYPE_WARM_SILENCE_FLIC     ((replay_video_type) 0x262u)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_RLE4  ((replay_video_type) 0x265u)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_RLE16 ((replay_video_type) 0x266u)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_RLE24 ((replay_video_type) 0x267u)
#define replay_VIDEO_TYPE_WARM_SILENCE_DL       ((replay_video_type) 0x26Eu)
#define replay_VIDEO_TYPE_WARM_SILENCE_ANM      ((replay_video_type) 0x26Fu)
#define replay_VIDEO_TYPE_WARM_SILENCE_QT_VR    ((replay_video_type) 0x276u)
#define replay_VIDEO_TYPE_WARM_SILENCE_UNKNOWN  ((replay_video_type) 0x2BBu)
#define replay_VIDEO_TYPE_SMALL_BASE            ((replay_video_type) 0x320u)
#define replay_VIDEO_TYPE_HBP_BASE              ((replay_video_type) 0x320u)
#define replay_VIDEO_TYPE_HBP_LINE_PACK         ((replay_video_type) 0x320u)
#define replay_VIDEO_TYPE_HBP_MOVIE16_TO3       ((replay_video_type) 0x322u)
#define replay_HDR_LINE_IDENT                   0
#define replay_HDR_LINE_NAME                    1
#define replay_HDR_LINE_DATE                    2
#define replay_HDR_LINE_AUTHOR                  3
#define replay_HDR_LINE_VIDEO_TYPE              4
#define replay_HDR_LINE_XSIZE                   5
#define replay_HDR_LINE_YSIZE                   6
#define replay_HDR_LINE_PIXEL_DEPTH             7
#define replay_HDR_LINE_FRAME_RATE              8
#define replay_HDR_LINE_SOUND_TYPE              9
#define replay_HDR_LINE_SOUND_RATE              10
#define replay_HDR_LINE_SOUND_CHANNELS          11
#define replay_HDR_LINE_SOUND_PRECISION         12
#define replay_HDR_LINE_FRAMES_PER_CHUNK        13
#define replay_HDR_LINE_NCHUNKS                 14
#define replay_HDR_LINE_EVEN_CHUNK_SIZE         15
#define replay_HDR_LINE_ODD_CHUNK_SIZE          16
#define replay_HDR_LINE_CATALOGUE_OFFSET        17
#define replay_HDR_LINE_SPRITE_OFFSET           18
#define replay_HDR_LINE_SPRITE_SIZE             19
#define replay_HDR_LINE_KEY_FRAME_OFFSET        20
#define replay_FRAME_RATE_SHIFT                 10
#define replay_VIDEO_PARAM_INT                  ((replay_video_param_type) 0x0u)
#define replay_VIDEO_PARAM_STRING               ((replay_video_param_type) 0x1u)
#define replay_OPEN_TYPE                        0x3u
#define replay_OPEN_TYPE_FILE_NAME              0x0u
#define replay_OPEN_TYPE_FILE_HANDLE            0x1u
#define replay_OPEN_TYPE_BUFFER                 0x2u
#define replay_RETURN_TEXT                      ((replay_read_file_header_flags) 0x10u)
#define replay_RETURN_SOUND_TRACKS              ((replay_read_file_header_flags) 0x20u)
#define replay_RETURN_CATALOGUE                 ((replay_read_file_header_flags) 0x40u)
#define replay_RETURN_SPRITE                    ((replay_read_file_header_flags) 0x80u)
#define replay_4BYTE_PALETTE                    ((replay_read_file_header_flags) 0x100u)
#define replay_CHECK_VIDEO_INFO                 ((replay_read_file_header_flags) 0x200u)
#define replay_CHECK_SOUND_INFO                 ((replay_read_file_header_flags) 0x400u)
#define replay_RELOCATE_OFFSETS                 ((replay_read_file_header_flags) 0x800u)
#define replay_VIDEO_CODEC_TEMPORAL             ((replay_video_codec_flags) 0x1u)
#define replay_READ_VIDEO_CODEC_INFO_NEW        ((replay_read_video_codec_info_flags) 0x100u)
      /*New form of call used*/
#define replay_SOUND_CODEC_SEEKABLE             ((replay_sound_codec_flags) 0x1u)
#define replay_SOUND_CODEC_VARIABLE_SIZE        ((replay_sound_codec_flags) 0x2u)
#define replay_SOUND_CODEC_MAX_SIZE_SHIFT       10
#define replay_POLL_PAUSE                       ((replay_poll_flags) 0x1u)
#define replay_POLL_MUTE                        ((replay_poll_flags) 0x2u)
#define replay_POLL_EXIT                        ((replay_poll_flags) 0x4u)
#define replay_POLL_STEP                        ((replay_poll_flags) 0x8u)
#define replay_POLL_CAPTURE                     ((replay_poll_flags) 0x10u)
#define replay_POLL_INVISIBLE                   ((replay_poll_flags) 0x20u)
#define replay_POLL_END_LOOP                    ((replay_poll_flags) 0x40u)
#define replay_POLL_NO_PAINT                    ((replay_poll_flags) 0x80u)
#define replay_SOUND_CODE_NO_TIMING             ((replay_sound_code_interface_flags) 0x1u)
#define replay_SOUND_CODE_QUALITY_COSTS         ((replay_sound_code_interface_flags) 0x2u)
#define replay_SOUND_CODE_SOUND_SYSTEM_OFF      ((replay_sound_code_interface_flags) 0x4u)
#define replay_SOUND_CODE_QUALITY_LOW           ((replay_sound_code_quality) 0x1u)
#define replay_SOUND_CODE_QUALITY_HIGH          ((replay_sound_code_quality) 0x4u)
#define replay_SOUND_CODE_STEREO_REVERSED       ((replay_sound_code_stereo_flags) 0x1u)
#define replay_SOUND_CODE_PLAY_TIMING           ((replay_sound_code_play_reason) 0x1u)
#define replay_SOUND_CODE_PLAY_PLAY             ((replay_sound_code_play_reason) 0x2u)
#define replay_SOUND_CODE_PLAYING               ((replay_sound_code_info_flags) 0x1u)
#define replay_SOUND_CODE_NEEDS_TIMING          ((replay_sound_code_info_flags) 0x2u)
#define replay_SOUND_CODE_USE_TO16              ((replay_sound_code_info_flags) 0x4u)
#define replay_SOUND_CODE_CONVERT_IN_PLACE      ((replay_sound_code_info_flags) 0x8u)
#define replay_SOUND_CODE_HAD_ERROR             ((replay_sound_code_info_flags) 0x10000u)
#define replay_SOUND_CODE_STOPPED               ((replay_sound_code_info_flags) 0x20000u)
#define replay_SOUND_CODE_ACTION_PAUSE          ((replay_sound_code_action) 0x0u)
#define replay_SOUND_CODE_LOAD_FROM_SOUND_FILE  ((replay_sound_code_load_flags) 0x100u)
      /*sound_name is actually a soundfile_format **/
#define replay_ACCESS_LATENCY_SHIFT             16
#define replay_COLOUR_MAP_NO_TRANSLATION        ((byte *) 0xFFFFFFFFu)
#define replay_COLOUR_MAP_DUPLICATE_SHORTS      ((byte *) 0xFFFFFFFEu)
#define replay_COLOUR_MAP_INTERPOLATE           ((replay_colour_map_flags) 0x1u)
#define replay_COLOUR_MAP_RMA                   (-1)

/*************************
 * Function declarations *
 *************************/

#ifdef __cplusplus
   extern "C" {
#endif

/* ------------------------------------------------------------------------
 * Function:      replay_register_sprites()
 *
 * Description:   Register button sprites
 *
 * Input:         area - value of R0 on entry
 *                button_offsets - value of R1 on entry
 *                sprite_names - value of R2 on entry
 *                initial_state - value of R3 on entry
 *
 * Output:        routine - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B00.
 */

extern os_error *xreplay_register_sprites (osspriteop_area const *area,
      int const *button_offsets,
      char *const *sprite_names,
      replay_poll_flags initial_state,
      void **routine);
__swi (0x48B00) void *replay_register_sprites (osspriteop_area const *area,
      int const *button_offsets,
      char *const *sprite_names,
      replay_poll_flags initial_state);

/* ------------------------------------------------------------------------
 * Function:      replay_de_register_sprites()
 *
 * Description:   Deregister button sprites
 *
 * Other notes:   Calls SWI 0x48B01.
 */

extern os_error *xreplay_de_register_sprites (void);
__swi (0x48B01) void replay_de_register_sprites (void);

/* ------------------------------------------------------------------------
 * Function:      replay_timebar_paint_address()
 *
 * Description:   Get time bar paint routine
 *
 * Input:         PixelsPerFrame - value of R0 on entry
 *                TimebarAddress - value of R1 on entry
 *                TimebarHeight - value of R2 on entry
 *                FGColour - value of R3 on entry
 *                BGColour - value of R4 on entry
 *                Log2BPP - value of R5 on entry
 *
 * Output:        PaintRoutine - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B02.
 */

extern os_error *xreplay_timebar_paint_address (int PixelsPerFrame,
      byte *TimebarAddress,
      int TimebarHeight,
      os_colour_number FGColour,
      os_colour_number BGColour,
      int Log2BPP,
      void **PaintRoutine);
extern void *replay_timebar_paint_address (int PixelsPerFrame,
      byte *TimebarAddress,
      int TimebarHeight,
      os_colour_number FGColour,
      os_colour_number BGColour,
      int Log2BPP);

/* ------------------------------------------------------------------------
 * Function:      replay_timebar_paint_address_extended()
 *
 * Description:   Get time bar paint routine
 *
 * Input:         info - value of R1 on entry
 *
 * Output:        PaintRoutine - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B02 with R0 = 0xFFFFFFFF.
 */

extern os_error *xreplay_timebar_paint_address_extended (replay_timebar_paint_info const *info,
      void **PaintRoutine);
extern void *replay_timebar_paint_address_extended (replay_timebar_paint_info const *info);

/* ------------------------------------------------------------------------
 * Function:      replay_version()
 *
 * Description:   Read ARMovie version number
 *
 * Output:        version - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B03.
 */

extern os_error *xreplay_version (int *version);
__swi (0x48B03) int replay_version (void);

/* ------------------------------------------------------------------------
 * Function:      replay_read_file_header()
 *
 * Description:   Decode info about an ARMovie file
 *
 * Input:         flags - value of R0 on entry
 *                filename - value of R1 on entry
 *                header_buffer - value of R2 on entry
 *                header_buffer_size - value of R3 on entry
 *                sprite_buffer - value of R4 on entry
 *                sprite_buffer_size - value of R5 on entry
 *                palette_buffer - value of R6 on entry
 *                palette_buffer_size - value of R7 on entry
 *
 * Output:        header_size_needed - value of R3 on exit (X version only)
 *                sprite_size_needed - value of R5 on exit
 *                palette_size_needed - value of R7 on exit
 *
 * Returns:       R3 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B04.
 */

extern os_error *xreplay_read_file_header (replay_read_file_header_flags flags,
      char const *filename,
      replay_header *header_buffer,
      int header_buffer_size,
      byte *sprite_buffer,
      int sprite_buffer_size,
      byte *palette_buffer,
      int palette_buffer_size,
      int *header_size_needed,
      int *sprite_size_needed,
      int *palette_size_needed);
extern int replay_read_file_header (replay_read_file_header_flags flags,
      char const *filename,
      replay_header *header_buffer,
      int header_buffer_size,
      byte *sprite_buffer,
      int sprite_buffer_size,
      byte *palette_buffer,
      int palette_buffer_size,
      int *sprite_size_needed,
      int *palette_size_needed);

/* ------------------------------------------------------------------------
 * Function:      replay_read_video_codec_info()
 *
 * Description:   Read video codec Info file
 *
 * Input:         flags - value of R0 on entry
 *                video_type - value of R1 on entry
 *                info_buffer - value of R2 on entry
 *                info_buffer_size - value of R3 on entry
 *
 * Output:        info_size_needed - value of R3 on exit (X version only)
 *
 * Returns:       R3 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B05.
 */

extern os_error *xreplay_read_video_codec_info (replay_read_video_codec_info_flags flags,
      int video_type,
      replay_video_codec_info *info_buffer,
      int info_buffer_size,
      int *info_size_needed);
extern int replay_read_video_codec_info (replay_read_video_codec_info_flags flags,
      int video_type,
      replay_video_codec_info *info_buffer,
      int info_buffer_size);

/* ------------------------------------------------------------------------
 * Function:      replay_read_video_codec_info_new()
 *
 * Description:   Read video codec Info file (new form)
 *
 * Input:         flags - value of R0 on entry
 *                video_type - value of R1 on entry
 *                video_name - value of R2 on entry
 *                info_buffer - value of R3 on entry
 *                info_buffer_size - value of R4 on entry
 *
 * Output:        info_size_needed - value of R4 on exit (X version only)
 *
 * Returns:       R4 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B05 with R0 |= 0x100.
 */

extern os_error *xreplay_read_video_codec_info_new (replay_read_video_codec_info_flags flags,
      int video_type,
      char const *video_name,
      replay_video_codec_info *info_buffer,
      int info_buffer_size,
      int *info_size_needed);
extern int replay_read_video_codec_info_new (replay_read_video_codec_info_flags flags,
      int video_type,
      char const *video_name,
      replay_video_codec_info *info_buffer,
      int info_buffer_size);

/* ------------------------------------------------------------------------
 * Function:      replay_read_sound_codec_info()
 *
 * Description:   Read sound codec Info file
 *
 * Input:         flags - value of R0 on entry
 *                sound_type - value of R1 on entry
 *                sound_name - value of R2 on entry
 *                info_buffer - value of R3 on entry
 *                info_buffer_size - value of R4 on entry
 *
 * Output:        info_size_needed - value of R4 on exit (X version only)
 *
 * Returns:       R4 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B06.
 */

extern os_error *xreplay_read_sound_codec_info (replay_read_sound_codec_info_flags flags,
      int sound_type,
      char const *sound_name,
      replay_sound_codec_info *info_buffer,
      int info_buffer_size,
      int *info_size_needed);
extern int replay_read_sound_codec_info (replay_read_sound_codec_info_flags flags,
      int sound_type,
      char const *sound_name,
      replay_sound_codec_info *info_buffer,
      int info_buffer_size);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_load()
 *
 * Description:   Load, or find a cached, sound playback code file
 *
 * Input:         flags - value of R0 on entry
 *                sound_type - value of R1 on entry
 *                sound_name - value of R2 on entry
 *                n_channels - value of R3 on entry
 *
 * Output:        info - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x0.
 */

extern os_error *xreplaysoundcode_load (replay_sound_code_load_flags flags,
      replay_sound_track_type sound_type,
      char const *sound_name,
      int n_channels,
      replay_sound_code_info **info);
extern replay_sound_code_info *replaysoundcode_load (replay_sound_code_load_flags flags,
      replay_sound_track_type sound_type,
      char const *sound_name,
      int n_channels);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_unload()
 *
 * Description:   Mark sound playback code as unused
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x1.
 */

extern os_error *xreplaysoundcode_unload (bits flags,
      replay_sound_code_info const *info);
extern void replaysoundcode_unload (bits flags,
      replay_sound_code_info const *info);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_attach_buffers()
 *
 * Description:   Attach buffers to playback code, buffer == NULL and
 *                module will allocate
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                buffer - value of R2 on entry
 *                file_buffer_size - value of R3 on entry
 *                build_buffer_size - value of R4 on entry
 *                hw_buffer_size - value of R5 on entry
 *
 * Output:        buffer_out - value of R2 on exit
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x2.
 */

extern os_error *xreplaysoundcode_attach_buffers (bits flags,
      replay_sound_code_info const *info,
      byte *buffer,
      int file_buffer_size,
      int build_buffer_size,
      int hw_buffer_size,
      byte **buffer_out);
extern void replaysoundcode_attach_buffers (bits flags,
      replay_sound_code_info const *info,
      byte *buffer,
      int file_buffer_size,
      int build_buffer_size,
      int hw_buffer_size,
      byte **buffer_out);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_detach_buffers()
 *
 * Description:   Detach buffers from playback code
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x3.
 */

extern os_error *xreplaysoundcode_detach_buffers (bits flags,
      replay_sound_code_info const *info);
extern void replaysoundcode_detach_buffers (bits flags,
      replay_sound_code_info const *info);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_attach_sound_file()
 *
 * Description:   Setup a SoundFile for playback
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                soundfile_format - value of R2 on entry
 *                file_handle - value of R3 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x4.
 */

extern os_error *xreplaysoundcode_attach_sound_file (bits flags,
      replay_sound_code_info const *info,
      byte const *soundfile_format,
      os_f file_handle);
extern void replaysoundcode_attach_sound_file (bits flags,
      replay_sound_code_info const *info,
      byte const *soundfile_format,
      os_f file_handle);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_attach_replay()
 *
 * Description:   Setup a Replay file for playback
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                hdr - value of R2 on entry
 *                sound_track - value of R3 on entry
 *                file_handle - value of R4 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x5.
 */

extern os_error *xreplaysoundcode_attach_replay (bits flags,
      replay_sound_code_info const *info,
      replay_header const *hdr,
      int sound_track,
      os_f file_handle);
extern void replaysoundcode_attach_replay (bits flags,
      replay_sound_code_info const *info,
      replay_header const *hdr,
      int sound_track,
      os_f file_handle);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_detach_loader()
 *
 * Description:   Remove any installed sound file
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x6.
 */

extern os_error *xreplaysoundcode_detach_loader (bits flags,
      replay_sound_code_info const *info);
extern void replaysoundcode_detach_loader (bits flags,
      replay_sound_code_info const *info);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_set_state()
 *
 * Description:   Get the current playback state
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                start_sample - value of R2 on entry
 *                end_sample - value of R3 on entry
 *                n_times_to_play - value of R4 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x7.
 */

extern os_error *xreplaysoundcode_set_state (bits flags,
      replay_sound_code_info const *info,
      int start_sample,
      int end_sample,
      int n_times_to_play);
extern void replaysoundcode_set_state (bits flags,
      replay_sound_code_info const *info,
      int start_sample,
      int end_sample,
      int n_times_to_play);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_get_state()
 *
 * Description:   Set the state in which to start playback
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *
 * Output:        current_sample - value of R0 on exit (X version only)
 *                n_times_played - value of R1 on exit
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x8.
 */

extern os_error *xreplaysoundcode_get_state (bits flags,
      replay_sound_code_info const *info,
      int *current_sample,
      int *n_times_played);
extern int replaysoundcode_get_state (bits flags,
      replay_sound_code_info const *info,
      int *n_times_played);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_set_action()
 *
 * Description:   Set an action to occur at a given point
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                action - value of R2 on entry
 *                at_sample - value of R3 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0x9.
 */

extern os_error *xreplaysoundcode_set_action (bits flags,
      replay_sound_code_info const *info,
      replay_sound_code_action action,
      int at_sample);
extern void replaysoundcode_set_action (bits flags,
      replay_sound_code_info const *info,
      replay_sound_code_action action,
      int at_sample);

/* ------------------------------------------------------------------------
 * Function:      replaysoundcode_init_sound_file()
 *
 * Description:   Do initialisation for a SoundFile
 *
 * Input:         flags - value of R0 on entry
 *                info - value of R1 on entry
 *                sound_file_id - value of R2 on entry
 *                buf_size - value of R3 on entry
 *                rate_adjust - value of R4 on entry
 *
 * Other notes:   Calls SWI 0x48B07 with R0 |= 0xA.
 */

extern os_error *xreplaysoundcode_init_sound_file (bits flags,
      replay_sound_code_info const *info,
      byte const *sound_file_id,
      int buf_size,
      int rate_adjust);
extern void replaysoundcode_init_sound_file (bits flags,
      replay_sound_code_info const *info,
      byte const *sound_file_id,
      int buf_size,
      int rate_adjust);

/* ------------------------------------------------------------------------
 * Function:      replay_read_access_info()
 *
 * Description:   Read media access info file for the given file name
 *
 * Input:         flags - value of R0 on entry
 *                file_name - value of R1 on entry
 *                info - value of R2 on entry
 *                sizeof_info - value of R3 on entry
 *
 * Output:        sizeof_info_needed - value of R3 on exit (X version only)
 *
 * Returns:       R3 (non-X version only)
 *
 * Other notes:   Calls SWI 0x48B08.
 */

extern os_error *xreplay_read_access_info (replay_read_access_info_flags flags,
      char const *file_name,
      replay_access_info *info,
      int sizeof_info,
      int *sizeof_info_needed);
extern int replay_read_access_info (replay_read_access_info_flags flags,
      char const *file_name,
      replay_access_info *info,
      int sizeof_info);

#ifdef __cplusplus
   }
#endif

#endif
