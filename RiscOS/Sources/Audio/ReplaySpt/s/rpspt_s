; > asm.replayspt

; © SJ Middleton, 1994

; module header for ReplaySupport module

			GET	hdr:ListOpts
			GET	hdr:Macros
			GET	hdr:System
			GET     hdr:APCS.<APCS>

			GET	hdr:ModHand
			GET	hdr:Proc
			GET     hdr:Sprite

;			GET	hdr:NewDebug1
;Debugging		SETL	False

ErrorNumber_NoSuchSWI	*	&1E6

; ------------------------------------------------------------------------------

		MACRO
$var		bit	$n
$var		*	1 :SHL: $n
		MEND

wp		RN	12

; ------------------------------------------------------------------------------

; sprites recognised

SprPause	*	0
SprExit		*	1
SprSingle	*	2
SprMute		*	3

NSprites	*	4

; sprite info structure

		^ 0
sprAddress	#	4		; actual address of sprite header
sprOffset	#	4		; offset in bytes from screen start (rounded down to words)

SpriteInfoSize		*	:INDEX:@
SpriteInfoSizeShift	*	3

	ASSERT	SpriteInfoSize = 1 :SHL: SpriteInfoSizeShift

; Timebar info

pixel_precision	*	12

; ------------------------------------------------------------------------------
; Global Workspace

		^ 0, r12

; Button variables
OldState	#	4				; Player Mouse interface old state buttons
SpriteInfo	#	NSprites*SpriteInfoSize*2
ButtonSprites	#	4
Semaphore       #       1
reserved	#       3

; Timebar variables
; these 7 must stay in this order !!!
PixelsPerFrame	#	4		; (bar_width << pixel_precision) / n_frames
TimebarAddress	#	4		; offset from screen base
TimebarHeight	#	4		; in lines
FGColour	#	4
BGColour	#	4
ScreenBPP	#	4
MaxPixels	#	4

LastPixel	#	4		; last pixel almost painted

WorkspaceSize	*	:INDEX:@

 ! 0, "Workspace size ":CC::STR:WorkspaceSize

		AREA	|ASM$$CODE|,CODE,READONLY

; ===================================================================================================

; INPUT
;  r0 -> sprite area with button sprites suitably preprocessed
;  r1 -> array of offset in bytes from screen base (8)
;  r2 -> array of sprite names (8)
;  r3 = initial button state word
; OUTPUT
;  VC, r0 -> address of update routine
;  VS, r0 -> error

; extern os_error *RegisterSprites(os_register_block *r)

		EXPORT	RegisterSprites

RegisterSprites
                FunctionEntry "v1-fp"

                StaticBaseFromSL r11
                ADRVar  r12, r11, Workspace

		MOV	r11, r0			; r11 -> register block
		LDMIA	r11, {r0-r4}

		MOV	r10, r0			; r10 -> original sprites
		MOV	r9, r1			; r9 -> offset array
		MOV	r8, r2			; r8 -> sprite names

		STR	r3, OldState

		BL	DeRegisterSprites	; just in case
                Return  "v1-fp",, VS

; claim space for sprites
		MOV     r0, #ModHandReason_Claim
		LDR	r3, [r10]		; get size of area
		SWI     XOS_Module
                Return  "v1-fp",, VS

; save ptr
		STR	r2, ButtonSprites

; copy sprites into new home in the RMA
10		LDR	r0, [r10], #4		; copy sprites
		STR	r0, [r2], #4
		SUBS	r3, r3, #4
		BGT	%bt10

; cache the addresses of the sprites
		ADR	r3, SpriteInfo
		MOV	r5, #NSprites*2

		MOV	r0, #SpriteReason_SelectSprite + 256
		LDR	r1, ButtonSprites

20		LDR     r2, [r8], #4
		SWI	XOS_SpriteOp
                Return  "v1-fp",, VS

		LDR	r4, [r9], #4
		BIC	r4, r4, #3
		STMIA	r3!, {r2,r4}

		SUBS	r5, r5, #1
		BGT	%bt20

; setup ptr to routine for foreground
                StaticBaseFromSP r14
                ADRVar  r0, r14, Trampoline_Mouse
		STR	r0, [r11]

		MOV	r0, #0
                Return  "v1-fp"

; INPUT
;  none
; OUTPUT
;  VS, r0 -> error

; extern os_error *DeRegisterSprites(void)

		EXPORT	DeRegisterSprites

DeRegisterSprites
                FunctionEntry
                StaticBaseFromSP r14 ; sl will be corrupt if we're being called from RegisterSprites
                ADRVar  r12, r14, Workspace

		LDR	r2, ButtonSprites
		CMP	r2, #0
		MOVEQ	r0, #0
                Return  ,, EQ

		MOV     r0, #ModHandReason_Free
		SWI     XOS_Module
		MOVVC	r0, #0
		STRVC	r0, ButtonSprites
                Return


; ===============================================================================

; Input
; r3 row bytes
; r4 base screen address
; r9 sprite hdr ptr

; Work
; r0,r1,r2 scrap
; r5  sprite data
; r6  work screen adress
; r7  left mask
; r8  right mask
; r10 sprite width
; r11 sprite height

		MACRO
$L		PlotSprite

$L		LDR	r5, [r9, #spImage]
		ADD	r5, r9, r5		; r5 -> sprite data

		ADR	r0, masks
		LDR	r7, [r9, #spLBit]
		LDR	r7, [r0, r7, LSL #2]	; r7 = left mask
		LDR	r8, [r9, #spRBit]
		ADD	r8, r8, #1
		LDR	r8, [r0, r8, LSL #2]	; r8 = right mask

		LDR	r10, [r9, #spWidth]	; r10 = width
		LDR	r11, [r9, #spHeight]	; r11 = height

; check for single word
		CMP	r10, #0
		BNE	%ft20

; special case when only one word involved

		BIC	r2, r7, r8		; setup mask

15
		LDR	r0, [r4]		; read screen
		LDR	r1, [r5], #4		; read sprite
		AND	r0, r0, r2
		BIC	r1, r1, r2
		ORR	r0, r0, r1
		STR	r0, [r4], r3		; store screen
		SUBS	r11, r11, #1		; decrement line count
		BGE	%bt15

		B	%ft99

20 ; general case
		MOV	r6, r4			; setup screen ptr
		LDR	r10, [r9, #spWidth]	; r10 = width

21 ; first word
		LDR	r0, [r6]		; r0 = screen data
		LDR	r1, [r5], #4		; r1 = sprite data
		AND	r0, r0, r7
		BIC	r1, r1, r7
		ORR	r0, r0, r1		; combine with l mask
		STR	r0, [r6], #4
		SUBS	r10, r10, #1
		BEQ	%ft40			; is next word the last ?

30 ; main loop
		LDR	r1, [r5], #4		; r1 = sprite data
		STR	r1, [r6], #4
		SUBS	r10, r10, #1
		BGT	%bt30

40 ; last word
		LDR	r0, [r6]		; r0 = screen data
		LDR	r1, [r5], #4		; r1 = sprite data
		BIC	r0, r0, r8
		AND	r1, r1, r8
		ORR	r0, r0, r1		; combine with l mask
		STR	r0, [r6], #4

   ; check end of line
		ADD	r4, r4, r3		; add row bytes to screen address
		SUBS	r11, r11, #1		; decrement line count
		BGE	%bt20

99
		MEND


; Player interface values

;     r0: address of state bits word:
;     r1: mouse x
;     r2: mouse y
;     r3: mouse buttons
;     r4: mouse button which changed (bit set for each button which changed)
;     r5: points to struc
;     r6: points to button data structure:
;         4 words per button being: left x, bottom y, right x, top y
;         buttons ordered: pause, exit, capture, single frame advance,
;                          ffwd, half speed, quiet, loud, mute
;     r7..r12: nothing
;    r13: RISC OS Irq stack
;    r14: return address
;    flags need not be preserved - Player ignores them

; r0 state bits

bPaused		bit 0
bMuted		bit 1
bExiting	bit 2
bSingle		bit 3
bCapture	bit 4	; true if capture class exit (bit 2 true too)
bInvisible	bit 5	; true if playing invisible frames (i.e. don't change screen)
bEndLoop	bit 6	; true if end of loop

	^ 0
oNX		# 4
oNY		# 4
oNColours	# 4
oScreenBase	# 4
oRowBytes	# 4
oNRows		# 4
oVertRatio	# 4
oMovieX 	# 4
oMovieY		# 4
oFPS		# 4

		ALIGN	16

PlayerMouseInterface Entry

;		LDR	wp, WorkspaceAddr

		LDRB	r7, Semaphore		; check for reentry
		CMP	r7, #0
		EXIT	NE

		MOV	r7, #1
		STRB    r7, Semaphore		; mark entered

		LDR	r0, [r0]		; load state word

		LDR	r7, OldState
		EOR	r7, r7, r0		; r7 has bits that have changed
		STR	r0, OldState		; r0 has current state of bits

		MOV	r8, #bPaused
		TST	r7, r8
		MOVNE	r1, #SprPause
		BLNE	UpdateSprite

		MOV	r8, #bMuted
		TST	r7, r8
		MOVNE	r1, #SprMute
		BLNE	UpdateSprite

		MOV	r8, #bSingle
		TST	r7, r8
		MOVNE	r1, #SprSingle
		BLNE	UpdateSprite

		MOV	r8, #bExiting
		TST	r7, r8
		MOVNE	r1, #SprExit
		BLNE	UpdateSprite

		MOV	r7, #0
		STRB    r7, Semaphore		; mark exited

		EXIT


; r0 = current state
; r1 = sprite number
; r8 = bit to check

UpdateSprite	Entry	"r0-r7"

; find pushed versions if bit is set
		TST	r0, r8
		ADDNE	r1, r1, #NSprites

; find our button info
		ADR	r0, SpriteInfo
		ADD	r0, r0, r1, LSL #SpriteInfoSizeShift

; setup values for PlotSprite, checking that button is on screen
		LDR	r4, [r0, #sprOffset]	; offset from screen base
		CMP	r4, #0
		EXIT	LT

		LDR	r2, [r5, #oScreenBase]
		ADD	r4, r4, r2

		LDR	r3, [r5, #oRowBytes]	; r3 = row bytes
		LDR	r9, [r0, #sprAddress]	; sprite header address

		PlotSprite

		EXIT

; ===============================================================================

masks		DCD	&00000000
		DCD	&00000001
		DCD	&00000003
		DCD	&00000007
		DCD	&0000000f
		DCD	&0000001f
		DCD	&0000003f
		DCD	&0000007f
		DCD	&000000ff
		DCD	&000001ff
		DCD	&000003ff
		DCD	&000007ff
		DCD	&00000fff
		DCD	&00001fff
		DCD	&00003fff
		DCD	&00007fff
		DCD	&0000ffff
		DCD	&0001ffff
		DCD	&0003ffff
		DCD	&0007ffff
		DCD	&000fffff
		DCD	&001fffff
		DCD	&003fffff
		DCD	&007fffff
		DCD	&00ffffff
		DCD	&01ffffff
		DCD	&03ffffff
		DCD	&07ffffff
		DCD	&0fffffff
		DCD	&1fffffff
		DCD	&3fffffff
		DCD	&7fffffff
		DCD	&ffffffff

; ===============================================================================

; CreateTrampolines

; Needed in order to compensate for the lack of any sort of handle passed from
; Player to the toolbar paint and mouse handler routines - they need to access
; Workspace, but we have nowhere to get the static data relocation offset from

; extern void CreateTrampolines(void);

                EXPORT  CreateTrampolines

CreateTrampolines
                FunctionEntry

                StaticBaseFromSL ip

                ADRVar  a2,ip,Trampoline_Mouse  ; preserve for SynchroniseCodeAreas call
                MOV     a3,a2                   ; a3 points to base of each trampoline in turn
                SUB     a1,a2,#WorkspaceSize+8  ; a1->Workspace, compensate for PC advancement in ADR
                SUB     a1,a3,a1                ; offset to be subtracted from PC to locate Workspace
                LDR     lr,ADRR12_template
                ORR     a1,a1,lr                ; a1 now holds ADR R12,Workspace
                MOV     lr,#&00FFFFFF           ; useful constant for building B instructions
                ADR     a4,PlayerMouseInterface-8-4 ; compensate for advanced value in PC when
                SUB     a4,a4,a3                    ; executed, and offset of a3 behind instruction
                AND     a4,lr,a4,ASR#2
                ORR     a4,a4,#B_template       ; a4 now holds B PlayerMouseInterface
                STMIA   a3!,{a1,a4}             ; store the two instructions in Trampoline_Mouse

                ADD     a1,a1,#8                ; ADR must now subtract 8 bytes *more* from PC
                ADR     a4,TimebarPaint4-8-4
                SUB     a4,a4,a3
                AND     a4,lr,a4,ASR#2
                ORR     a4,a4,#B_template
                STMIA   a3!,{a1,a4}

                ADD     a1,a1,#8                ; ADR must now subtract 8 bytes *more* from PC
                ADR     a4,TimebarPaint8-8-4
                SUB     a4,a4,a3
                AND     a4,lr,a4,ASR#2
                ORR     a4,a4,#B_template
                STMIA   a3!,{a1,a4}

                ADD     a1,a1,#8                ; ADR must now subtract 8 bytes *more* from PC
                ADR     a4,TimebarPaint16-8-4
                SUB     a4,a4,a3
                AND     a4,lr,a4,ASR#2
                ORR     a4,a4,#B_template
                STMIA   a3!,{a1,a4}

                ADD     a1,a1,#8                ; ADR must now subtract 8 bytes *more* from PC
                ADR     a4,TimebarPaint32-8-4
                SUB     a4,a4,a3
                AND     a4,lr,a4,ASR#2
                ORR     a4,a4,#B_template
                STMIA   a3!,{a1,a4}

                MOV     a1,#1
                SUB     a3,a3,#1                ; r2 points to *inclusive* top address to synchronise
                SWI     XOS_SynchroniseCodeAreas

                Return

ADRR12_template &       &E24FC000
B_template      *       &EA000000

; ===============================================================================

; SWI

; INPUT
; r0 -> data
; r1 = 1 if new call, 0 if old call

; offsets in words
; +0 = PixelsPerFrame - (bar_width << pixel_precision) / n_frames
; +1 = TimebarAddress - offset from screen base
; +2 = TimebarHeight  - in lines
; +3 = FGColour
; +4 = BGColour
; +5 = log2bpp for routine wanted

; new call only
; +6 = MaxPixels

; OUTPUT
; r0 = 0 or -> timebar paint routine

; extern int TimebarPaintAddress(os_register_block *block)

		EXPORT	TimebarPaintAddress
TimebarPaintAddress
                FunctionEntry "v1-v3,sl,fp"

                StaticBaseFromSL r14
                ADRVar  r12, r14, Workspace
		MOVS	r11, r1			; r11 = new_call

		LDMIA	r0, {r0-r6}

 [ {FALSE}
	Debug	"r0 ",r0
	Debug	"r1 ",r1
	Debug	"r2 ",r2
	Debug	"r3 ",r3
	Debug	"r4 ",r4
	Debug	"r5 ",r5
	Debug	"r6 ",r6
 ]
		MOVEQ	r6, #-1			; set MaxPixels to maximum if old style call

		ADR	r10, PixelsPerFrame
		STMIA	r10, {r0-r6}

;		STR	r0, PixelsPerFrame
;		STR	r1, TimebarAddress
;		STR	r2, TimebarHeight
;		STR	r3, FGColour
;		STR	r4, BGColour
;		STR	r6, MaxPixels

		MOV	r0, #0
		STR	r0, LastPixel

		CMP	r5, #2
                ADRVar  r0, r14, Trampoline_TimebarPaint4, EQ
		CMP	r5, #3
                ADRVar  r0, r14, Trampoline_TimebarPaint8, EQ
		CMP	r5, #4
                ADRVar  r0, r14, Trampoline_TimebarPaint16, EQ
		CMP	r5, #5
                ADRVar  r0, r14, Trampoline_TimebarPaint32, EQ

                Return  "v1-v3,sl,fp"

;	InsertNewDebugRoutines

; Time bar painting support routines

;   Player will call a supplied routine after painting each frame. The value
;   supplied is checked to see if it is a valid decimal number (VALx$>0) or
;   it is treated as a position independent file which is loaded into memory
;   by Player at some quad word aligned address (determined at run time). The
;   routine is called immediately after a frame has been painted; the CPU is
;   in interrupt mode and the routine is entered with a BL. The registers
;   contain:
;
;     r0: points to: screen structure (see above)
;     r1: movie base address on screen
;     r2: frame number of just painted frame
;     r3..r12: nothing
;    r13: RISC OS Irq stack
;    r14: return address
;
;   If interrupts are to be reenabled, the routine need not worry about being
;   called recursively - Player is in a semaphored area which will not be
;   reentered until this thread terminates. Returning as soon as possible is
;   advised - playing a movie can be quite short of processor time... Note that
;   the routine is only called when a frame is actually painted and this does
;   not happen if processor time is running short.

TimebarPaint4	ROUT

;		LDR	wp, WorkspaceAddr

		; see if frame needs painting
		LDR	r5, PixelsPerFrame
		MUL	r8, r5, r2
		MOV	r8, r8, LSR #pixel_precision

		; limit pixel
		LDR	r9, MaxPixels
		CMP	r8, r9
		MOVHI	r8, r9

		LDR	r9, LastPixel
		CMP	r8, r9
		MOVEQ	pc, r14

		STR	r8, LastPixel

		MOVLT	r10, r8
		MOVLT	r8, r9
		MOVLT	r9, r10
		LDRLT	r6, BGColour

		LDRGT	r6, FGColour

		; get base address of timebar
		LDR	r10, TimebarAddress
		LDR	r3, [r0, #oScreenBase]
		ADD	r10, r10, r3
		ADD	r10, r10, r9, ASR #1	; add in next pixel to plot

		LDR	r11, [r0, #oRowBytes]

30		MOV	r5, r10

		LDR	r4, TimebarHeight

31		LDRB	r3, [r5]
		TST	r9, #1            	; even pixel is in low nybble
		BICEQ	r3, r3, #&0f
		ORREQ	r3, r3, r6
		BICNE	r3, r3, #&f0
		ORRNE	r3, r3, r6, LSL #4
		STRB	r3, [r5], r11

		SUBS	r4, r4, #1
		BGT	%bt31

		TST	r9, #1
		ADDNE	r10, r10, #1         	; increment base address

		ADD	r9, r9, #1           	; check for having caught up
		CMP	r9, r8
		BLT	%bt30

		MOV	pc, r14


TimebarPaint8	ROUT

;		LDR	wp, WorkspaceAddr

		; see if frame needs painting
		LDR	r5, PixelsPerFrame
		MUL	r8, r5, r2
		MOV	r8, r8, LSR #pixel_precision

		; limit pixel
		LDR	r9, MaxPixels
		CMP	r8, r9
		MOVHI	r8, r9

		LDR	r9, LastPixel
		CMP	r8, r9
		MOVEQ	pc, r14

		STR	r8, LastPixel

		MOVLT	r10, r8
		MOVLT	r8, r9
		MOVLT	r9, r10
		LDRLT	r6, BGColour

		LDRGT	r6, FGColour

		; get base address of timebar
		LDR	r10, TimebarAddress
		LDR	r3, [r0, #oScreenBase]
		ADD	r10, r10, r3
		ADD	r10, r10, r9		; add in next pixel to plot

		LDR	r11, [r0, #oRowBytes]

30		MOV	r5, r10
		LDR	r4, TimebarHeight

31		STRB	r6, [r5], r11

		SUBS	r4, r4, #1
		BGT	%bt31

		ADD	r10, r10, #1
		ADD	r9, r9, #1           	; check for having caught up
		CMP	r9, r8
		BLT	%bt30

		MOV	pc, r14


TimebarPaint16	ROUT

;		LDR	wp, WorkspaceAddr

		; see if frame needs painting
		LDR	r5, PixelsPerFrame
		MUL	r8, r5, r2
		MOV	r8, r8, LSR #pixel_precision

		; limit pixel
		LDR	r9, MaxPixels
		CMP	r8, r9
		MOVHI	r8, r9

		LDR	r9, LastPixel
		CMP	r8, r9
		MOVEQ	pc, r14

		STR	r8, LastPixel

		MOVLT	r10, r8
		MOVLT	r8, r9
		MOVLT	r9, r10
		LDRLT	r6, BGColour

		LDRGT	r6, FGColour

		MOV	r7, r6, LSR #8

		; get base address of timebar
		LDR	r10, TimebarAddress
		LDR	r3, [r0, #oScreenBase]
		ADD	r10, r10, r3
		ADD	r10, r10, r9, ASL #1	; add in next pixel to plot

		LDR	r11, [r0, #oRowBytes]
		SUB	r11, r11, #1

		; get colour

30		MOV	r5, r10
		LDR	r4, TimebarHeight

31		STRB	r6, [r5], #1
		STRB	r7, [r5], r11

		SUBS	r4, r4, #1
		BGT	%bt31

		ADD	r10, r10, #2
		ADD	r9, r9, #1           	; check for having caught up
		CMP	r9, r8
		BLT	%bt30

		MOV	pc, r14


TimebarPaint32	ROUT

;		LDR	wp, WorkspaceAddr

		; see if frame needs painting
		LDR	r5, PixelsPerFrame
		MUL	r8, r5, r2
		MOV	r8, r8, LSR #pixel_precision

		; limit pixel
		LDR	r9, MaxPixels
		CMP	r8, r9
		MOVHI	r8, r9

		LDR	r9, LastPixel
		CMP	r8, r9
		MOVEQ	pc, r14

		STR	r8, LastPixel

		MOVLT	r10, r8
		MOVLT	r8, r9
		MOVLT	r9, r10
		LDRLT	r6, BGColour

		LDRGT	r6, FGColour

		; get base address of timebar
		LDR	r10, TimebarAddress
		LDR	r3, [r0, #oScreenBase]
		ADD	r10, r10, r3
		ADD	r10, r10, r9, ASL #2	; add in next pixel to plot

		LDR	r11, [r0, #oRowBytes]

30		MOV	r5, r10
		LDR	r4, TimebarHeight

31		STR	r6, [r5], r11

		SUBS	r4, r4, #1
		BGT	%bt31

		ADD	r10, r10, #4
		ADD	r9, r9, #1           	; check for having caught up
		CMP	r9, r8
		BLT	%bt30

		MOV	pc, r14

; ===============================================================================

; OUT:
;     r0 = 0, contents of first argument = ARMovie version
; or  r0 -> error

; extern os_error *ReplayGetVersion(int *version, void *ws, int ws_size);

		EXPORT	ReplayGetVersion
ReplayGetVersion
                FunctionEntry "v1-v2"

		MOV	r5, r0

		ADR	r0, ReplayVersionVar
;		ADR	r1, ARMovieVersion
;		MOV	r2, #?ARMovieVersion
		MOV	r3, #0
		MOV	r4, #0
		SWI	XOS_ReadVarVal
                Return  "v1-v2",, VS

		BL	ReadVersion	; get ARMovie version
                Return  "v1-v2",, VS

		CMP	r5, #0
		STR	r0, [r5]
		MOV	r0, #0
                Return

; ===============================================================================

; Commands

; r0 -> command tail
; r1 = no. parameters

; extern os_error *ReplayCheckVer_Code(const char *cmd_tail, int nparams, void *ws, int ws_size);

		EXPORT	ReplayCheckVer_Code

ReplayCheckVer_Code
                FunctionEntry "v1-v6,sl,fp"
		MOV	r11, r0		; r11 -> command line

		ADR	r0, ReplayVersionVar
		MOV	r1, r2
		MOV	r2, r3
;		ADR	r1, ARMovieVersion
;		MOV	r2, #?ARMovieVersion
		MOV	r3, #0
		MOV	r4, #0
		SWI	XOS_ReadVarVal
                Return  "v1-v6,sl,fp",, VS

		BL	ReadVersion	; get ARMovie version
                Return  "v1-v6,sl,fp",, VS
		MOV	r10, r0		; r10 = ARMovie version

		MOV	r1, r11		; get requested version
		BL	ReadVersion
                Return  "v1-v6,sl,fp",, VS

		CMP	r10, r0		; if OK then exit
		MOVGE	r0, #0
                Return  "v1-v6,sl,fp",, GE

		MOV	r0, r1		; else call OSCLI with remainder of line
		SWI	XOS_CLI

		MOVVC	r0, #0
                Return  "v1-v6,sl,fp"   ; return any error from OSCLI

ReplayVersionVar =	"ARMovie$Version", 0
		ALIGN

; ===============================================================================

; IN
;      r1 -> version string
; OUT
;  VS, r0 -> error
;  VC, r1 -> end of version string
;      r0 = value

ReadVersion
		Entry	"r2,r3"

		MOV	r0, #10		; return first part of version
		SWI	XOS_ReadUnsigned
		EXIT	VS

		MOV	lr, #100
		MUL	r0, r2, lr	; r0 = version*100

		LDRB	r3, [r1]	; if terminator is not a dot then return
		CMP	r3, #"."        ; this always clears V
                EXIT    NE

		ADD	r1, r1, #1	; inc over .
		MOV	r3, r0		; move value into r3

		MOV	r0, #10
		SWI	XOS_ReadUnsigned	; return second part of version
		ADDVC	r0, r3, r2	; add on second bit of version
		EXIT

; ===============================================================================

                LocalVar Workspace
                LocalVar Trampoline_Mouse
                LocalVar Trampoline_TimebarPaint4
                LocalVar Trampoline_TimebarPaint8
                LocalVar Trampoline_TimebarPaint16
                LocalVar Trampoline_TimebarPaint32

		AREA	|ASM$$DATA|,DATA

                =       "WSPC"
Workspace	%	WorkspaceSize
; Trampoline_Mouse must follow immediately
Trampoline_Mouse                %       2*4     ; These are actually code generated
Trampoline_TimebarPaint4        %       2*4     ; during module initialisation -
Trampoline_TimebarPaint8        %       2*4     ; two instructions each:
Trampoline_TimebarPaint16       %       2*4     ;   ADR     R12,Workspace
Trampoline_TimebarPaint32       %       2*4     ;   B       appropriate_code
Trampoline_End                  %       0

		END

eof asm.replayspt
