/*---------------------------------------------------------------------------*
 * File:    swi.c                                                            *
 * Purpose: SoundTfr swi handler                                             *
 * Author:  Timothy Roddis                                                   *
 * History: 30-Sep-97: TGR: created                                          *
 *          22-Jan-98: RML: Added SoundTfr_Control SWI                       *
 *          17-Jun-98: RML: Added flag to SoundTfr_ToFile to write WAV files *
 *          06-Jul-98: RML: Added SoundTfr_FileInfo SWI                      *
 *          08-Jul-98: RML: Changed format of To/FromFile SWIs. Split SWI    *
 *                          handler into subroutines for simplicity.         *
 *---------------------------------------------------------------------------*/

/* ANSI headers */
#include <stdlib.h>
#include <string.h>
#include <time.h>

/* RISC OS headers */
#include "kernel.h"
#include "swis.h"

/* commonlib headers */
#include "defines.h"
#include "swiextra.h"
#include "debug.h"
#include "msgs.h"

/* SoundCtrl headers */
#include "SoundCtrl.h"

/* local headers */
#include "module.h"
#include "error.h"
#include "global.h"
#include "tfr.h"
#include "callback.h"
#include "wav.h"

static char static_encoding_size[] = { 1, 1, 2, 1, 0, 0, 2, 0 };

static _kernel_oserror *create_area (Global_ChannelInfo *, size_t size);
static _kernel_oserror *change_area (Global_ChannelInfo *, size_t size);
static _kernel_oserror *tofromfile_swi_handler(_kernel_swi_regs *r, int swi_no, void *pw);
static _kernel_oserror *control_swi_handler(_kernel_swi_regs *r);
static _kernel_oserror *fileinfo_swi_handler(_kernel_swi_regs *r);
static _kernel_oserror *status_swi_handler(_kernel_swi_regs *r);


/*---------------------------------------------------------------------------*
 * swi_handler                                                               *
 *                                                                           *
 * Standard cmhg SWI handling function                                       *
 *---------------------------------------------------------------------------*/

_kernel_oserror *swi_handler (int swi_no, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *e = NULL;

  IGNORE (pw);

  DEBUG debug_output ("s", Module_Title": handling SWI no. %d (0x%x)\n", swi_no, swi_no+SoundTfr_00);

  /* Check the access key here for all SWIs that require it, this saves duplication later on */

  switch (swi_no + SoundTfr_00)
  {
      case SoundTfr_FromFile:
      case SoundTfr_ToFile:
          e = tofromfile_swi_handler(r, swi_no, pw);
          break;
  
      case SoundTfr_Control:
          e = control_swi_handler(r);
          break;
              
      case SoundTfr_FileInfo:
          e = fileinfo_swi_handler(r);
          break;
          
      case SoundTfr_Status:
          e = status_swi_handler(r);
          break;
  }
  
  return e;
}


/*---------------------------------------------------------------------------*
 * tofromfile_swi_handler                                                    *
 *                                                                           *
 * Code for the SoundTfr_ToFile and SoundTfr_FromFile SWIs                   *
 *---------------------------------------------------------------------------*/

static _kernel_oserror *tofromfile_swi_handler(_kernel_swi_regs *r, int swi_no, void *pw)
{
  _kernel_oserror   *e;
  unsigned int       file_size;
  unsigned int       buffer_size;
  int                fileptr;
  int                enc_size;
  int                i;
  Global_ChannelNos  chan;
  unsigned int       xchan; /* the SoundCtrl channel number */
  unsigned int       flags;
  Bool               decode;
  Bool               not_claimed;
  char              *filename;
  int                encoding_type;
  int                sample_rate;
  int                left_channel;
  int                right_channel;
  int                capture_length = 0;
  int                channels;
  int               *descriptor;
  static const struct _tfr_routs {
    VoidFunc *start,
             *proc,
             *end;
  } tfr_routs[Global_NoChannels] = {
    {
      tfr_play_start,
      tfr_play_proc,
      tfr_play_end
    },
    {
      tfr_capture_start,
      tfr_capture_proc,
      tfr_capture_end
    }
  };

  if (swi_no + SoundTfr_00 == SoundTfr_FromFile) {
    chan   = Global_Channel_Play;
    decode = TRUE;
  } else {
    chan   = Global_Channel_Capture;
    decode = FALSE;
  }

  /* Extract all the data we want from the entry registers */
  flags = r->r[0];
  xchan = r->r[1];
  filename = (char*)r->r[2];
  descriptor = (int*)r->r[3];
  left_channel = r->r[4];
  right_channel = r->r[5];
  if (descriptor)
  {
      channels = descriptor[0] & TfrFlag_Stereo ? 2:1;
      encoding_type = descriptor[1];
      sample_rate = descriptor[2];
      capture_length = descriptor[3];
  }
  
  /* If we're playing a sample */
  if (decode)
  {
      if (flags & TfrFlag_WavHeader)
      {
          /* If it's a wav file, read the header */
          if (wav_read_header(filename, &fileptr, &encoding_type, &sample_rate, &channels, &capture_length))
               return msgs_make_error(Error_BadWavFile, filename);
      }
      else
      {
          /* If not a WAV file, find size of file */
          e = _swix(OS_File, _INR(0,1)|_OUT(4), 5, filename, &capture_length);
          if (e) return e;
      }
  }
  
  /* If we're recording a WAV file... */
  if ((!decode) && (flags & TfrFlag_WavHeader))
  {
      /* ...Check encoding type */
      if ( (encoding_type != EncodingType_LinearUnsigned)
        && (encoding_type != EncodingType_LinearLittleEndian) )
      {
          return msgs_make_error(Error_BadEncodingType);
      }
  }

  /* Try and claim the play/capture channel and error if not possible */
  _swix (SoundCtrl_Claim, I0|I1|I2|O0, 0, global_rsrc[chan], 0, &not_claimed);

  if (not_claimed) {
    global_channels[chan].key = 240875;
    DEBUG debug_output ("s1", Module_Title": claiming playback channel\n");

    e = _swix (SoundCtrl_Claim, I0|I1|I2, 0, global_rsrc[chan], global_channels[chan].key);

    if (e) return e;
  }
  
  /* If recording, set the source for the sample */
  if (!decode) {
    e = _swix (SoundCtrl_SetSource, I0|I1|I2|I3|I4,
               0, xchan, global_channels[chan].key, left_channel, right_channel);

    if (e) goto clearup0;
  }

  e = _swix (SoundCtrl_SetCodec, I0|I1|I2|I3|I4,
            channels==2 ? 1:0, xchan, global_channels[chan].key, encoding_type, sample_rate<<10);

  if (e) goto clearup0;

  /* At this point we know that SoundCtrl is familiar with the codec in question */
  if ((unsigned int) (encoding_type) < 7) {
    enc_size = static_encoding_size[encoding_type] * channels;
  } else {
    enc_size = 0;
  }

  /* Unknown encoding behaviour */
  if (enc_size == 0) enc_size = 4; /* Be pessimistic */

  buffer_size = (enc_size * sample_rate * Global_BufferDuration / Global_NoBuffers
                                                                + Global_MinBufferSize)
              & ~(Global_MinBufferSize - 1);

  DEBUG debug_output ("s1", Module_Title": chosen %dk (%x) as individual buffer size(enc_size = %d, rate %d)\n",
                      buffer_size/1024, buffer_size, enc_size, sample_rate);

  if (global_channels[chan].dynamic_area == -1) {
    e = create_area (&(global_channels[chan]), Global_NoBuffers * buffer_size);
  }
  else {
    e = change_area (&(global_channels[chan]), Global_NoBuffers * buffer_size);
  }
  if (e) goto clearup0;

  DEBUG debug_output ("s1", Module_Title": dynamic area no. %x play buffer @%08p\n",
                      global_channels[chan].dynamic_area, global_channels[chan].buffer[0].addr);

  /* If ToFile, create the file which the data will be streamed to. */
  if (!decode)
  {
      int file_size = capture_length;
      
      if (flags & TfrFlag_WavHeader) file_size+=wav_return_header_size();

      e = _swix (OS_File, I0|I1|I2|I4|I5,
                 OS_File_CreateTyped,
                 filename,
                 (flags & TfrFlag_WavHeader) ? FileType_Wav : FileType_Raw, 
                 0,
                 file_size);
  }

  /* Open the file we're playing from/recording to */
  e = _swix (OS_Find, I0|I1|I2|O0,
             decode ? OS_Find_OpenRead : OS_Find_CreateReadWrite,
             filename, NULL, &(global_channels[chan].handle));

  if (e) goto clearup1;

  /* Is it a WAV file we're writing to/from? */
  if (flags & TfrFlag_WavHeader)
  {
      if (decode)
      {
          /* From file, so skip the WAV header */
          int fhandle = global_channels[chan].handle;
          if (wav_read_header(0, &fhandle, 0, 0, 0, 0))
          {
              return msgs_make_error(Error_BadWavFile, filename);
          }              
      }
      else
      {
          /* To file, so write the WAV header */
          if (wav_write_header(global_channels[chan].handle,
                               capture_length,
                               channels,
                               sample_rate,
                               encoding_type == EncodingType_LinearUnsigned ? 8:16))
          {
              return msgs_make_error(Error_WriteFailed);
          }
      }
  }

  /* Couldn't open the file? */
  if (!global_channels[chan].handle) {
    return msgs_make_error (Error_FileOpen, filename);
  }

  /* If playback, find the size of the file we're playing back */
  if (decode) {
    e = _swix (OS_Args, I0|I1|O2, OS_Args_ReadExtent, global_channels[chan].handle, &file_size);
    if (e) goto clearup2;
  }

  DEBUG debug_output ("s1", Module_Title": about to call routine @%08p\n", &callback_play_from_c);

  global_channels[chan].next = 0; /* start at first buffer */

  if (decode) {

    /* Fill all the playback buffers before we start */

    for (i = 0; i < Global_NoBuffers; i++) {
      callback_play_from_c (*(unsigned int *)pw);
    }
  }

  /* Store details of the number of bytes we want */
  global_channels[chan].bytes_wanted = capture_length;
  global_channels[chan].bytes_output = 0;
  global_channels[chan].status = 1;
  global_channels[chan].flags = flags;
  global_channels[chan].xchan = xchan;

  e = _swix (SoundCtrl_Transfer, I0|I1|I2|I3|I4|I5|I6|I7|I8,
             (decode ? SoundCtrl_Transfer_Write : 0)
             | SoundCtrl_Transfer_Circular | SoundCtrl_Transfer_Callback,
             xchan,
             global_channels[chan].key,
             global_channels[chan].buffer,
             decode ? file_size : capture_length,
             Global_NoBuffers * buffer_size,
             buffer_size,
             tfr_routs + chan,
             *(unsigned int *)pw);
             
  /* Return 'handle' in r[1]  */
  r->r[1] = chan;

  if (!e) return NULL;

  clearup2:
    _swix (OS_Find, I0|I1, OS_Find_Close, global_channels[chan].handle);

  clearup1:
    _swix (OS_DynamicArea, I0|I1, OS_DynamicArea_Remove, global_channels[chan].dynamic_area);

    global_channels[chan].buffer[0].addr  =  0;
    global_channels[chan].dynamic_area    = -1;

  clearup0:
    _swix (SoundCtrl_Release, I0|I1|I2, 0, global_rsrc[chan], global_channels[chan].key);

    global_channels[chan].key = 0;

    return e;
}


/*---------------------------------------------------------------------------*
 * control_swi_handker                                                       *
 *                                                                           *
 * Code for the SoundTfr_Control SWI                                         *
 *---------------------------------------------------------------------------*/

static _kernel_oserror *control_swi_handler(_kernel_swi_regs *r)
{
    _kernel_oserror *e = NULL;
    int              chan = r->r[1];

    switch (r->r[0])
    {
        case Control_Suspend:
            e = _swix(SoundCtrl_SuspendTransfer, _INR(0,2),
                      0,
                      global_channels[chan].xchan,
                      global_channels[chan].key);
            break;

        case Control_Resume:
            e = _swix(SoundCtrl_ResumeTransfer, _INR(0,2),
                      0,
                      global_channels[chan].xchan,
                      global_channels[chan].key);
            break;

        case Control_Terminate:
            /* Change the bytes wanted to be the bytes we've got */
            global_channels[chan].bytes_wanted = global_channels[chan].bytes_output;
            
            /* Now, we've got to re-write the WAV file header because of new size */
            if (global_channels[chan].flags & TfrFlag_WavHeader)
                wav_rewrite_header(global_channels[chan].handle, global_channels[chan].bytes_output);

            /* Terminate the transfer */
            e = _swix(SoundCtrl_TerminateTransfer, _INR(0,2),
                      0,
                      global_channels[chan].xchan,
                      global_channels[chan].key);
            break;
    }
    
    return e;
}


/*---------------------------------------------------------------------------*
 * fileinfo_swi_handler                                                      *
 *                                                                           *
 * Code for the SoundTfr_FileInfo SWI                                        *
 *---------------------------------------------------------------------------*/

static _kernel_oserror *fileinfo_swi_handler(_kernel_swi_regs *r)
{
    int fileptr;
    int type;
    int rate;
    int channels;
    int length;
    int time;
    
    if (wav_read_header((char*)r->r[1], &fileptr, &type, &rate, &channels, &length))
        return msgs_make_error (Error_BadWavFile, r->r[1]);

    /* Mono or stereo? */
    if (channels == 2)
        r->r[0] = 1;
    else
        r->r[0] = 0;

    /* Sample rate and length (in bytes) */
    r->r[1] = rate;
    r->r[4] = length;
    
    /* Calculate length of sample in seconds */
    time = (length * 100) / (rate * channels);
    if (type == EncodingType_LinearLittleEndian) time = time / 2;
    r->r[3] = time;

    /* Bits per sample */
    if (type == EncodingType_LinearLittleEndian)
        r->r[2] = 16;
    else
        r->r[2] = 8;
        
    return NULL;
}    


/*---------------------------------------------------------------------------*
 * status_swi_handler                                                        *
 *                                                                           *
 * Code for the SoundTfr_Status SWI                                          *
 *---------------------------------------------------------------------------*/

static _kernel_oserror *status_swi_handler(_kernel_swi_regs *r)
{
    int chan = r->r[1];

    r->r[0] = global_channels[chan].status;
    r->r[1] = global_channels[chan].bytes_wanted;
    r->r[2] = global_channels[chan].bytes_output;

    return NULL;
}


/*---------------------------------------------------------------------------*
 * create_area                                                               *
 *                                                                           *
 * Grab memory to store buffers for a given CODEC channel.                   *
 *                                                                           *
 * In: channel -> Global_ChannelInfo structure for the chosen channel.       *
 *     size = memory required.                                               *
 *---------------------------------------------------------------------------*/

_kernel_oserror *create_area (Global_ChannelInfo *channel, size_t size)
{
  _kernel_oserror *e;
  int              i;

  DEBUG debug_output ("s1", Module_Title": creating dynamic area size %08x/%08x\n", size,
                      (Global_MaxEncodingSize * Global_MaxRate * Global_BufferDuration
                                                                         + Global_MinBufferSize)
                      & ~(Global_MinBufferSize - 1));

  e = _swix (OS_DynamicArea, I0|I1|I2|I3|I4|I5|I6|I7|I8|O1|O3,
             OS_DynamicArea_Create,
             -1,
             size,
             -1,
             OS_DynamicArea_NotDraggableFlag,
             Global_NoBuffers *
             ((Global_MaxEncodingSize * Global_MaxRate * Global_BufferDuration
                                                       / Global_NoBuffers + Global_MinBufferSize)
             & ~(Global_MinBufferSize - 1)),
             0, // no dynamic area handler routine
             0, //*(unsigned int *)pw,
             Module_Title,
             &(channel->dynamic_area),
             &(channel->buffer[0].addr));

  if (e) return e;

  DEBUG debug_output ("s1", Module_Title": created dynamic area size %08x @%08p\n", size, channel->buffer[0].addr);

  if (size/Global_NoBuffers < Global_MinBufferSize) {

    /* If we couldn't get any space, remove the area */

    _swix (OS_DynamicArea, I0|I1, OS_DynamicArea_Remove, channel->dynamic_area);

    channel->buffer[0].addr  =  0;
    channel->dynamic_area    = -1;

    return msgs_make_error (Error_NoMem);
  } else {

    /* Initialise scatter list */

    channel->buffer[0].length = size / Global_NoBuffers;

    for (i = 1; i < Global_NoBuffers; i++) {

      channel->buffer[i].addr   = (char *) (channel->buffer[i-1].addr) + size / Global_NoBuffers;
      channel->buffer[i].length = size / Global_NoBuffers;
    }
  }
  
  return NULL;
}


/*---------------------------------------------------------------------------*
 * change_area                                                               *
 *                                                                           *
 * Change the amount of memory assigned to a CODEC channel.                  *
 *                                                                           *
 * In: channel -> Global_ChannelInfo structure for the chosen channel.       *
 *     size = memory required.                                               *
 *---------------------------------------------------------------------------*/

_kernel_oserror *change_area (Global_ChannelInfo *channel, size_t new_size)
{
  _kernel_oserror *e;
  int              i;
  size_t           init_size;
  char            *addr;

  e = _swix (OS_DynamicArea, I0|I1|O2|O3,
             OS_DynamicArea_Info,
             channel->dynamic_area,
             &init_size,
             &addr);

  if (e) return e;

  DEBUG debug_output ("s1", Module_Title": change dynamic area from %dkB to %dkB (difference %dkB)\n",
                      init_size, new_size, (int) new_size - (int) init_size);


  if (init_size == new_size) return NULL;

  /* This will return an error if area cannot be grown by size required */

  e = _swix (OS_ChangeDynamicArea, I0|I1,
             channel->dynamic_area,
             (int) new_size - (int) init_size);

  if (e) return e;

  /* The area should be at least new_size now */

  channel->buffer[0].addr    =  addr;
  channel->buffer[0].length  =  new_size / Global_NoBuffers;

  for (i = 1; i < Global_NoBuffers; i++) {
    channel->buffer[i].addr   = (char *) (channel->buffer[i-1].addr) + new_size / Global_NoBuffers;
    channel->buffer[i].length = new_size / Global_NoBuffers;
  }
  
  return NULL;
}
