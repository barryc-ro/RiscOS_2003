/* File:    main.c
 * Purpose: SoundCtrl module initialisation and finalisation entry points
 * Author:  Timothy Roddis
 * History: 22-Aug-9: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <locale.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Commonlib headers */

#include "defines.h"
#include "dbmalloc.h"
#include "debug.h"
#include "msgs.h"
#include "swiextra.h"

/* Local headers */

#include "SoundCtrl.h"

#include "module.h"
#include "global.h"

/* Initialise modules.
 *
 * on entry:
 *    cmd_tail is the command tail (ignored)
 *    podule_base  (ignored)
 *    pw is the private word (ignored)
 *
 * on exit:
 *    module has successfully initialised or else and error block is returned
 */

_kernel_oserror *main_initialise (const char *cmd_tail, int podule_base, void *pw) {

   _kernel_oserror     *e;
   int i;
#ifndef ROM
    extern int messages_file(void);
#endif

   DEBUG debug_set_var_names (Module_Title"$Debug", Module_Title"$HexDump");

   DEBUG debug_output ("i", Module_Title": INITIALISING\n");

   IGNORE (cmd_tail);
   IGNORE (podule_base);
   IGNORE (pw);

#ifdef ROM
   external messages file?
#endif

//   global_pw = *(unsigned int *)pw;

#ifndef ROM
   if ((e = _swix (ResourceFS_RegisterFiles, I0, messages_file())) != NULL) {
//     DEBUG debug_output ("i", "Error in registering files: %d, \"%s\"\n", e->errnum, e->errmess);
     return e; // Could be made NULL to protect module against future inability to kill it
   }
#endif

   msgs_open_file("Resources:Resources."Module_Title".Messages");

   for (i=0; i<Global_NoChannels; i++) {
      global_channels[i].dynamic_area = -1;
   }
   DEBUG debug_output ("i", Module_Title": INITIALISATION COMPLETE\n");

   return NULL;
}

_kernel_oserror *main_finalise (int fatal, int podule_base, void *pw) {

//   _kernel_oserror     *e;
    int i;
#ifndef ROM
    extern int       messages_file(void);
#endif

   DEBUG debug_output ("i", Module_Title": FINALISING\n");

   IGNORE (fatal);
   IGNORE (podule_base);
   IGNORE (pw);

   for (i=0; i<Global_NoChannels; i++) {
     if (global_channels[i].key) {
       _swix (SoundCtrl_Release, I0|I1|I2, 0, global_rsrc[i], global_channels[i].key);
     }
     if (global_channels[i].handle) {
       _swix (OS_Find, I0|I1, OS_Find_Close, global_channels[i].handle);
     }
     if (global_channels[i].dynamic_area != -1) {
       _swix (OS_DynamicArea, I0|I1, OS_DynamicArea_Remove, global_channels[i].dynamic_area);
     }
     /*? terminate transfer */
   }
   msgs_close_file();

//   dbmalloc_chkheap();

#ifndef ROM
   _swix (ResourceFS_DeregisterFiles, I0, messages_file());

//   DEBUG if (e) debug_output ("i", "CDFSDriver: error deregistering: %d, \"%s\"\n", e->errnum, e->errmess);

#endif

   DEBUG debug_output ("i", Module_Title": FINALISATION COMPLETE\n");

   return NULL;
}

