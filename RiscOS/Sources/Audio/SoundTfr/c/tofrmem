/* in swi_handler */

    case SoundTfr_FromMemory:
    case SoundTfr_ToMemory:
    {
        Global_ChannelNos  chan;
        Bool               decode;
        Bool               not_claimed;
        unsigned int       xchan; /* the SoundCtrl channel number */
        int                i;
        static const struct _tfr_routs
        {
          VoidFunc *start,
                   *proc,
                   *end;
        } tfr_routs[Global_NoChannels] =
        {
            {tfr_memory_play_start, tfr_memory_play_proc, tfr_memory_play_end},
            {tfr_memory_capture_start, tfr_memory_capture_proc, tfr_memory_capture_end}
        };

        if (swi_no + SoundTfr_00 == SoundTfr_FromMemory)
        {
            chan   = Global_Channel_Play;
            decode = TRUE;
        }
        else
        {
            chan   = Global_Channel_Capture;
            decode = FALSE;
        }

        xchan = r->r[1];
        
        /* Claim the resource */
        _swix (SoundCtrl_Claim, I0|I1|I2|O0, 0, global_rsrc[chan], 0, &not_claimed);
        if (not_claimed)
        {
            global_channels[chan].key = 240875;
            e = _swix (SoundCtrl_Claim, I0|I1|I2, 0, global_rsrc[chan], global_channels[chan].key);
            if (e) return e;
        }
        
        /* Set source (if recording) */
        if (!decode)
        {
            e = _swix (SoundCtrl_SetSource, I0|I1|I2|I3|I4, 0, xchan, global_channels[chan].key, r->r[5], r->r[6]);
            if (e) goto memory_clearup0;
        }

        /* Set codec */     
        e = _swix (SoundCtrl_SetCodec, I0|I1|I2|I3|I4, r->r[0], xchan, global_channels[chan].key, r->r[3], r->r[4]<<10);
        if (e) goto memory_clearup0;

        /* Store details of the number of bytes we want */
        global_channels[chan].bytes_wanted = r->r[7];
        global_channels[chan].bytes_output = 0;
        
        /* We've only got buffer in our scatter list */
        for (i = 1; i < Global_NoBuffers; i++)
        {
            global_channels[chan].buffer[i].addr   = (char*)r->r[2];
            global_channels[chan].buffer[i].length = r->r[7];
        }
        
        /* Begin transfer */
        e = _swix (SoundCtrl_Transfer, I0|I1|I2|I3|I4|I5|I6|I7|I8,
                   (decode ? SoundCtrl_Transfer_Write : 0)
                   | SoundCtrl_Transfer_Circular | SoundCtrl_Transfer_Callback,
                   xchan,
                   global_channels[chan].key,
                   global_channels[chan].buffer,
                   r->r[7],
                   r->r[7],
                   Global_BytesBetweenCall,
                   tfr_routs + chan,
                   *(unsigned int *)pw);

        /* Return 'handle' in r[0] */
        r->r[1] = chan;
                   
        if (!e) return NULL;        

        memory_clearup0:
            _swix (SoundCtrl_Release, I0|I1|I2, 0, global_rsrc[chan], global_channels[chan].key);
            global_channels[chan].key = 0;
            return e;

      break;
    }    
