/*---------------------------------------------------------------------------*
 * File:    c.wav                                                            *
 * Purpose: Write/read WAV files                                             *
 * Author:  Richard Leggett                                                  *
 * History: 17-Jun-98: RML: Created                                          *
 *---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "swis.h"
#include "wav.h"

#define WaveTag   "WAVE"
#define RiffTag   "RIFF"
#define FormatTag "fmt "
#define DataTag   "data"

#define WAVE_FORMAT_PCM 0x0001

#define GBPB_Write 2
#define GBPB_Read  4
#define Find_Open  0x4b
#define Find_Close 0


typedef struct
{
    char riff_tag[4];
    int  length;
    char wave_tag[4];
} wav_header;

typedef struct
{
    char      format_tag[4];
    int       length;
    short int category;
    short int nchannels;
    int       samples_per_sec;
    int       av_bytes_per_sec;
    short int block_alignments;
    short int bits_per_sample;
} wav_format_pcm;

typedef struct
{
    char format_tag[4];
    int  length;
} wav_data_hdr;


/*---------------------------------------------------------------------------*
 * read_wav_header                                                           *
 *                                                                           *
 * Try and decode a WAV file header                                          *
 *---------------------------------------------------------------------------*/

int wav_read_header(char *fname, int *fileptr, int *type, int *rate, int *channels, int *length)
{
    wav_header      hdr;
    wav_format_pcm  format;
    wav_data_hdr    data_hdr;
    int             handle;

    if (fname != 0)
    {
        /* If a filename was specified, then open the file, otherwise use the file
           handle passed in 'fileptr' */
        if (_swix(OS_Find, _INR(0,2)|_OUT(0), Find_Open, fname, 0, fileptr)) return 1;
    }
        
    handle = *fileptr;

    if (_swix(OS_GBPB, _INR(0,3), GBPB_Read, handle, &hdr, sizeof(wav_header))) return 1;
    if (_swix(OS_GBPB, _INR(0,3), GBPB_Read, handle, &format, sizeof(wav_format_pcm))) return 1;
    
    if (strncmp(hdr.wave_tag, WaveTag, 4) !=0) return 1;    
    if (strncmp(hdr.riff_tag, RiffTag, 4) !=0) return 1;
    if (strncmp(format.format_tag, FormatTag, 4) !=0) return 1;

    if (format.category != WAVE_FORMAT_PCM) return 1;

    if (_swix(OS_GBPB, _INR(0,3), GBPB_Read, handle, &data_hdr, sizeof(wav_data_hdr))) return 1;
    
    if (strncmp(data_hdr.format_tag, DataTag, 4) !=0) return 1;

    /* If we opened the file, then close it */
    if (fname != 0) _swix(OS_Find, _INR(0,1), Find_Close, handle);
    
    /* Fill in return variables */
    if (type)
    {
        if (format.bits_per_sample == 16) *type = EncodingType_LinearLittleEndian;
        else if (format.bits_per_sample == 8) *type = EncodingType_LinearUnsigned;
        else return 1;
    }
    if (rate)
    {
        *rate = format.samples_per_sec;
    }
    if (channels)
    {
        *channels = format.nchannels;
    }
    if (length)
    {
        *length = data_hdr.length;
    }

    return 0;
}


/*---------------------------------------------------------------------------*
 * return_wav_header_size                                                    *
 *                                                                           *
 * Return the size of a WAV file header                                      *
 *---------------------------------------------------------------------------*/

int wav_return_header_size(void)
{
    return sizeof(wav_header) + sizeof(wav_format_pcm) + sizeof(wav_data_hdr);
}


/*---------------------------------------------------------------------------*
 * write_wav_header                                                          *
 *                                                                           *
 * Output a WAV file header                                                  *
 *---------------------------------------------------------------------------*/

int wav_write_header(unsigned int handle, int size, int channels, int sample_rate, int bits)
{
    _kernel_oserror *e;
    wav_header       hdr;
    wav_format_pcm   format;
    wav_data_hdr     data_hdr;
    
    if (bits==8)
    {
        format.block_alignments = 1 * channels;
        format.av_bytes_per_sec = 1 * sample_rate;
    }
    else if (bits==16)
    {
        format.block_alignments = 2 * channels;
        format.av_bytes_per_sec = 2 * sample_rate;
    }
    else
    {
        return 1;
    }

    strncpy(hdr.riff_tag, RiffTag, 4);
    strncpy(hdr.wave_tag, WaveTag, 4);
    strncpy(format.format_tag, FormatTag, 4);
    strncpy(data_hdr.format_tag, DataTag, 4);
    
    hdr.length = sizeof(wav_header) + sizeof(wav_format_pcm)
                 + sizeof(wav_data_hdr) + size - 8;
    format.length = 16;
    format.category = WAVE_FORMAT_PCM;
    format.nchannels = channels;
    format.samples_per_sec = sample_rate;
    format.bits_per_sample = bits;
    data_hdr.length = size;
    
    e = _swix(OS_GBPB, _INR(0,3), GBPB_Write, handle, &hdr, sizeof(wav_header));
    if (e) return 1;
    e = _swix(OS_GBPB, _INR(0,3), GBPB_Write, handle, &format, sizeof(wav_format_pcm));
    if (e) return 1;
    e = _swix(OS_GBPB, _INR(0,3), GBPB_Write, handle, &data_hdr, sizeof(wav_data_hdr));
    if (e) return 1;
  
    return 0;
}


/*---------------------------------------------------------------------------*
 * wav_rewrite_header                                                        *
 *                                                                           *
 * Re-write the sample size part of the WAV header.                          *
 *                                                                           *
 * In: handle = file handle of open sample file.                             *
 *     size = new size of sample data (in bytes)                             *
 *---------------------------------------------------------------------------*/

void wav_rewrite_header(unsigned int handle, int size)
{
    int current_ptr;
    int new_ptr;
    
    /* Store the current file pointer */
    if (_swix(OS_Args, _INR(0,1)|_OUT(2), 0, handle, &current_ptr)) return;

    /* Point to the data size word of the WAV header */    
    new_ptr = sizeof(wav_header) + sizeof(wav_format_pcm) + 4;
    if (_swix(OS_Args, _INR(0,2), 1, handle, new_ptr)) return;

    /* Write the new size */
    _swix(OS_GBPB, _INR(0,3), GBPB_Write, handle, &size, sizeof(int));

    /* Point file pointer back to the original position */
    _swix(OS_Args, _INR(0,2), 1, handle, current_ptr);
}
