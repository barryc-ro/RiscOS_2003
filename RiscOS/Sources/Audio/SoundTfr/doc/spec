WARNING: as at 24/10/97 the module will not tidy up at the end and merely
transfers the whole of the last buffer. In fact it should keep a count of how
much has been transfered so far, so that it knows when the last transfers are
etc. This would also help in the implementation of calls to find out how much
has been done and so on.


SoundTfr_FromFile

On entry:
   R0  =  flags,
             bit 0: set => stereo, clear => mono
   R1  =  channel number
   R2  =  filename to read
   R3  =  encoding type (see SoundCtrl)
   R4  =  sample rate

SoundTfr_ToFile
   R0  =  flags,
             bit 0: set => stereo, clear => mono
   R1  =  channel number
   R2  =  filename to write
   R3  =  encoding type (see SoundCtrl)
   R4  =  sample rate
   R5  =  source channel (left)
   R6  =  source channel (right)
   R7  =  capture length (in bytes)

Should the buffer size, no. of buffers etc. vary with the sample rate?

Should the SWIs check that they still have the resource and reregister
if possible when they have not (eg. after RMReinit SoundCtrl and
forced release)?

SWIs to set buffer size and number of buffers for each channel?

Do I need a terminate transfer in case the module is killed (to stop it
calling old module space). Sounds a bit necessary!

What about pause, continue?

What about enquire length, set pos?

The latter will require some thought, but should be possible.

What about a CD -> sound card digital transfer?

Freeing the dynamic area after each transfer may be more sociable.

The client should provide the access key, so that it knows what the
access key will be for suspend, resume & terminate or else SoundTfr
should provide calls to do these things.


