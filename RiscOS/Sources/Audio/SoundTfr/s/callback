; File:    s.callback
; Purpose: asm functions to actually write data out to disc
; Author:  Timothy Roddis
; History: 02-Oct-97: TGR: created
;          22-Jan-98: RML: corrected bug which meant that at the end of a
;                          transfer, the whole of the last buffer was
;                          transferred, rather than the exact number of
;                          bytes remaining.
;          09-Jul-98: RML: Channel_bytes_wanted and Channel_bytes_output
;                          are now updated for playback as well as record.
;                          This allows us to keep track of progress.

                AREA   |TfrAsm|,CODE,READONLY

                GET    hdr.CVars
                GET    hdr.global
                
                GET    hdr:ListOpts
                GET    hdr:Macros
                GET    Hdr:System
                GET    hdr:HighFSI

                GET    hdr.SoundCtrl
 
                ImportVar global_channels
                
                EXPORT    |callback_play_from_c|
                EXPORT    |callback_play|
                EXPORT    |callback_capture|
                EXPORT    |callback_play_end|
                EXPORT    |callback_capture_end|

       
       GBLA shift
       GBLA ispower


		MACRO
$label	        IRQOff	$reg

$label	        MOV	$reg, pc
		TST	$reg, #I_bit
		TEQEQP	$reg, #I_bit
		MEND

		MACRO
$label	SetPSR	$reg

$label	        TEQP	$reg, #0
		MEND
		
       MACRO
$label FindBitPos $value

       LCLA bitpos

bitpos SETA 0
$label SETA -1

       WHILE bitpos<32
         IF 1:SHL:bitpos=$value
$label     SETA bitpos
         ENDIF
bitpos   SETA bitpos+1
       WEND

       MEND

shift   FindBitPos (Global_BufferInfo_Size)
ispower FindBitPos (Global_NoBuffers) ; is number of buffers a power of two?

callback_play_from_c
                MOV    r12, r0

callback_play ROUT

                STMFD  sp!, {r0-r6, lr}
                
;                MOV    r0,#'R'
;                SWI    &40102
                
                StaticBaseFromWP r1, r12
                ADRVar r0, r1, global_channels
                LDR    r5, [r0, #Channel_play+Channel_next] ; r5 := index number of last buffer processed
                ADD    r1, r0, #Channel_play+Channel_buffer ; r1 := ptr to scatter list sort of thing
 IF shift<>-1
                ADD    r2, r1, r5, LSL #shift
 ELSE
                MOV    r2, #(Global_BufferInfo_Size)
                MUL    r2, r5, r2
 ENDIF
; increment last buffer number here: if the OS_GBPB fails then b*gger it

                ADD    r5, r5, #1
 IF ispower<>-1 :LAND: ispower<8
                AND    r5, r5, #Global_NoBuffers-1
 ELSE
                CMP    r5, #Global_NoBuffers
                MOVEQ  r5, #0
 ENDIF          
                STR    r5, [r0, #Channel_play+Channel_next]
                
                LDR    r3, [r2, #Buffer_length]
                LDR    r2, [r2, #Buffer_addr]
                LDR    r1, [r0, #Channel_play+Channel_handle]

                ; Update Channel_bytes_output to sat how many bytes we've sent DMAd
                LDR    r5, [r0, #Channel_play+Channel_bytes_output]
                LDR    r6, [r0, #Channel_play+Channel_bytes_wanted]
                SUB    r6, r6, r5
                CMP    r6, r3
                ADDLT  r5, r5, r6
                ADDGE  r5, r5, r3
                STR    r5, [r0, #Channel_play+Channel_bytes_output]
                
                ; Read the data with OSGBPB
                MOV    r0, #OSGBPB_ReadFromPTR
                SWI    XOS_GBPB ; shouldn't actually return errors apart from handle illegal
                
                MOVCS  r0, #0 ; close file: last byte transferred
                SWICS  XOS_Find
                

                LDMFD  sp!, {r0-r6, pc}

callback_capture ROUT
                STMFD  sp!, {r0-r6, lr}

;                MOV    r0,#'W'
;                SWI    &40102

                StaticBaseFromWP r1, r12
                ADRVar r0, r1, global_channels
                

                LDR    r5, [r0, #Channel_capture+Channel_next] ; r5 := index number of last buffer processed
                ADD    r1, r0, #Channel_capture+Channel_buffer ; r1 := ptr to scatter list sort of thing
 IF shift<>-1
                ADD    r2, r1, r5, LSL #shift
 ELSE
                MOV    r2, #(Global_BufferInfo_Size)
                MUL    r2, r5, r2
 ENDIF
; increment last buffer number here: if the OS_GBPB fails then b*gger it

                ADD    r5, r5, #1
 IF ispower<>-1 :LAND: ispower<8
                AND    r5, r5, #Global_NoBuffers-1
 ELSE
                CMP    r5, #Global_NoBuffers
                MOVEQ  r5, #0
 ENDIF          
                STR    r5, [r0, #Channel_capture+Channel_next]

                ; Setup r1-r3 for OS_GBPB
                LDR    r3, [r2, #Buffer_length]
                LDR    r2, [r2, #Buffer_addr]
                LDR    r1, [r0, #Channel_capture+Channel_handle]
                
                ; Update Channel_bytes_output before actually outputting the bytes
                LDR    r5, [r0, #Channel_capture+Channel_bytes_output]
                LDR    r6, [r0, #Channel_capture+Channel_bytes_wanted]
                SUB    r6, r6, r5                                         ; bytes remaining to be written
                CMP    r6, r3                                             ; is this less than the block size?               ;
                MOVLT  r3, r6                                             ; if so, use this value
                ADD    r5, r5, r3                                         ; regardless, update bytes_output
                STR    r5, [r0, #Channel_capture+Channel_bytes_output]

                ; Write the new data to the file with OS_GBPB
                MOV    r0, #OSGBPB_WriteAtPTR
                SWI    XOS_GBPB ; shouldn't actually return errors apart from handle illegal
                MOVCS  r0, #0 ; close file: last byte transferred
                SWICS  XOS_Find


; terminate transfer?                

                LDMFD  sp!, {r0-r6, pc}

callback_capture_end ROUT

                STMFD  sp!, {r0-r2, lr}
                
;                MOV    r0,#'R'
;                SWI    &40102
                
                BL     callback_capture

                StaticBaseFromWP r1, r12
                ADRVar r2, r1, global_channels

                LDR    r1, [r2, #Channel_capture+Channel_handle]

;                ADR    r0, callback_close_file
;                SWI    XOS_AddCallBack

;                IRQOff r2

                MOV    r0, #0 ; close file: last byte transferred
                SWI    XOS_Find
                
;                SetPSR r2

                STR    r0, [r2, #Channel_capture+Channel_handle]

                ; Update pollword to indicate we've finished
                MOV    r0, #0
                STR    r0, [r2, #Channel_capture+Channel_status]

                MOV    r2, #9
                MOV    r1, #SoundCtrl_Res_Capture
                MOV    r0, #0
                SWI    XSoundCtrl_Release

                LDMFD  sp!, {r0-r2, pc}
                
callback_play_end ROUT

                STMFD  sp!, {r0-r2, lr}
                
;                MOV    r0,#'R'
;                SWI    &40102
                
                StaticBaseFromWP r1, r12
                ADRVar r2, r1, global_channels

                LDR    r1, [r2, #Channel_play+Channel_handle]

;                ADR    r0, callback_close_file
;                SWI    XOS_AddCallBack

;                IRQOff r2

                MOV    r0, #0 ; close file: last byte transferred
                SWI    XOS_Find
                
;                SetPSR    r2
                
                STR    r0, [r2, #Channel_play+Channel_handle]

                ; Update pollword to indicate we've finished
                MOV    r0, #0
                STR    r0, [r2, #Channel_play+Channel_status]

                MOV    r2, #9
                MOV    r1, #SoundCtrl_Res_Playback
                MOV    r0, #0
                SWI    XSoundCtrl_Release

                LDMFD  sp!, {r0-r2, pc}

;callback_close_file ; OS_CallAfter calls with interrupts disabled and I 
                    ; get the feeling it doesn't appreciate them being
                    ; re-enabled under its feet. Hence this.

;                STMFD sp!, {r0, r1, lr}

;                MOV r0, #0
;                MOV r1, r12
;                SWI XOS_Find
                
;                LDMFD sp!, {r0, r1, pc}
                
                END
