; File:    s.tfr
; Purpose: asm functions supporting DMA transfer
; Author:  Timothy Roddis
; History: 01-Oct-97: TGR: created

;                GET    Hdr:ListOpts
;                GET    Hdr:Macros
                GET    hdr:ListOpts
                GET    hdr:Macros
                GET    hdr:System
;                GET    Hdr:SWIs
                GET    hdr.global 

                AREA   |TfrAsm|,CODE,READONLY

                IMPORT |callback_play|
                IMPORT |callback_capture|
                IMPORT |callback_play_end|
                IMPORT |callback_capture_end|

                
                EXPORT |tfr_play_start|
                EXPORT |tfr_capture_start|
                EXPORT |tfr_play_proc|
                EXPORT |tfr_capture_proc|
                EXPORT |tfr_play_end|
                EXPORT |tfr_capture_end|

                
                EXPORT |tfr_memory_play_start|
                EXPORT |tfr_memory_capture_start|
                EXPORT |tfr_memory_play_proc|
                EXPORT |tfr_memory_capture_proc|
                EXPORT |tfr_memory_play_end|
                EXPORT |tfr_memory_capture_end|


               GBLL    DelayedClose
DelayedClose   SETL    False         

tfr_play_start ROUT


tfr_capture_start ROUT

                MOVS   pc, lr

tfr_play_proc ROUT
                STMFD  sp!, {r1, r8, r9, lr}

; see page 1-128 of PRM RISC OS 3 for explanation of following
                MOV    r9, pc                 ; maybe in IRQ mode so ...
                ORR    r8, r9, #SVC_mode      ; force
                TEQP   r8, #0                 ; SVC mode
                MOV    r0, r0                 ;
                STMFD  sp!, {lr}              ; preserve R14_svc

                ADR    r0, callback_play
                MOV    r1, r12
                SWI    XOS_AddCallBack

;                MOV     r0, #'T'
;                SWI     &40102

                LDMFD  sp!, {lr}              ; restore R14_svc
                TEQP   r9, #0                 ; restore mode
                MOV    r0, r0                 ;

                MOV    r0, #0
                LDMFD  sp!, {r1, r8, r9, pc}^

tfr_capture_proc ROUT
                STMFD  sp!, {r1, r8, r9, lr}
                MOV    r9, pc                 ; maybe in IRQ mode so ...
                ORR    r8, r9, #SVC_mode      ; force
                TEQP   r8, #0                 ; SVC mode
                MOV    r0, r0                 ;
                STMFD  sp!, {lr}              ; preserve R14_svc

                ADR    r0, callback_capture
                MOV    r1, r12
                SWI    OS_AddCallBack

;                MOV    r0, #"T"
;                SWI    &40102

                LDMFD  sp!, {lr}              ; restore R14_svc
                TEQP   r9, #0                 ; restore mode
                MOV    r0, r0                 ;

                MOV    r0, #0
                LDMFD  sp!, {r1, r8, r9, pc}^

tfr_capture_end ROUT

                STMFD  sp!, {r1, r2, r8, r9, lr}
                MOV    r9, pc                 ; maybe in IRQ mode so ...
                ORR    r8, r9, #SVC_mode      ; force
                TEQP   r8, #0                 ; SVC mode
                MOV    r0, r0                 ;
                STMFD  sp!, {lr}              ; preserve R14_svc

 [ DelayedClose
                MOV    r0, #Global_BufferDuration*200 ; delay to stop it
                ADR    r1, tfr_capture_end2       ; closing the file
                MOV    r2, r12                        ; prematurely
                SWI    OS_CallAfter
 |
                ADR    r0, callback_capture_end
                MOV    r1, r12
                SWI    OS_AddCallBack
 ]

;                MOV    r0, #"E"
;                SWI    &40102

                LDMFD  sp!, {lr}              ; restore R14_svc
                TEQP   r9, #0                 ; restore mode
                MOV    r0, r0                 ;

                MOV    r0, #0
                LDMFD  sp!, {r1, r2, r8, r9, pc}^

tfr_play_end ROUT

                STMFD  sp!, {r1, r2, r8, r9, lr}
                MOV    r9, pc                 ; maybe in IRQ mode so ...
                ORR    r8, r9, #SVC_mode      ; force
                TEQP   r8, #0                 ; SVC mode
                MOV    r0, r0                 ;
                STMFD  sp!, {lr}              ; preserve R14_svc

 [ DelayedClose
                MOV    r0, #Global_BufferDuration*200
                ADR    r1, tfr_play_end2
                MOV    r2, r12
                SWI    OS_CallAfter
 |
                ADR    r0, callback_play_end
                MOV    r1, r12
                SWI    OS_AddCallBack
 ]
;                MOV    r0, #"E"
;                SWI    &40102

                LDMFD  sp!, {lr}              ; restore R14_svc
                TEQP   r9, #0                 ; restore mode
                MOV    r0, r0                 ;

                MOV    r0, #0
                LDMFD  sp!, {r1, r2, r8, r9, pc}^

 [ DelayedClose

; these routines are essentially a way of calling the callback_
; routines with interrupts disabled, which seems to cause some
; problems

tfr_capture_end2 ROUT

                STMFD sp!, {r0-r1, lr}

                ADR    r0, callback_capture_end
                MOV    r1, r12
                SWI    OS_AddCallBack
                
                LDMFD  sp!, {r0-r1, pc}

tfr_play_end2 ROUT
                STMFD sp!, {r0-r1, lr}

                ADR    r0, callback_play_end
                MOV    r1, r12
                SWI    OS_AddCallBack
                
                LDMFD  sp!, {r0-r1, pc}
 ]


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

tfr_memory_play_start ROUT

tfr_memory_capture_start ROUT

tfr_memory_play_end ROUT

tfr_memory_capture_end ROUT

tfr_memory_play_proc ROUT

                MOVS   pc, lr

tfr_memory_capture_proc ROUT

                MOVS   pc, lr






                END
;
