    case  SoundCtrl_SetVolume:
      switch (r->r[1]) { // switch upon sound channel
         unsigned int lvolume, rvolume;

         case SoundCtrl_Master:
         {
           *SS_IndAddr = SSInd_MasterVolume;

           if (r->r[0] & SoundCtrl_Vol_LeftMuteFlag) {
              lvolume = convert_vol_fixd2hw ((macro_to_fixed(-46.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              r->r[3]);
           } else {
             lvolume = SSInd_MuteFlag;
           }
           if (r->r[0] & SoundCtrl_Vol_RightMuteFlag) {
             rvolume = convert_vol_fixd2hw ((macro_to_fixed(-46.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             r->r[4]);
           } else {
             rvolume = SSInd_MuteFlag;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }

         case SoundCtrl_Line:
         case SoundCtrl_CD:
         case SoundCtrl_Synth:
         case SoundCtrl_Vid:
         {
           if      (r->r[1] == SoundCtrl_Line)  *SS_IndAddr = SSInd_LineVolume;

           else if (r->r[1] == SoundCtrl_CD)    *SS_IndAddr = SSInd_CDVolume;

           else if (r->r[1] == SoundCtrl_Synth) *SS_IndAddr = SSInd_SynthVolume;

           else     /* must be Vid */           *SS_IndAddr = SSInd_VidVolume;


           if (r->r[0] & SoundCtrl_Vol_LeftMuteFlag) {
              lvolume = convert_vol_fixd2hw ((macro_to_fixed(-46.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              r->r[3]);
           } else {
             lvolume = SSInd_MuteFlag;
           }
           if (r->r[0] & SoundCtrl_Vol_RightMuteFlag) {
             rvolume = convert_vol_fixd2hw ((macro_to_fixed(-46.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             r->r[4]);
           } else {
             rvolume = SSInd_MuteFlag;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }
         case SoundCtrl_Mic:
         case SoundCtrl_PhoneIn:
         {
           if      (r->r[1] == SoundCtrl_Line)  *SS_IndAddr = SSInd_MicVolume;

           else     /* must be PhoneIn */       *SS_IndAddr = SSInd_PhoneInVolume;



           if (r->r[0] & SoundCtrl_Vol_LeftMuteFlag) {
              lvolume = convert_vol_fixd2hw ((macro_to_fixed(-45.0),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 3.0),
                                              r->r[3]);
           } else {
             lvolume = SSInd_MuteFlag;
           }
           if (r->r[0] & SoundCtrl_Vol_RightMuteFlag) {
             rvolume = convert_vol_fixd2hw ((macro_to_fixed(-45.0),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 3.0),
                                             r->r[4]);
           } else {
             rvolume = SSInd_MuteFlag;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }
         case SoundCtrl_Playback:
         case SoundCtrl_FM:
         case SoundCtrl_IIS0:
         case SoundCtrl_IIS1:
         {
           if      (r->r[1] == SoundCtrl_Playback)  *SS_IndAddr = SSInd_PlaybackVolume;

           else if (r->r[1] == SoundCtrl_FM)        *SS_IndAddr = SSInd_FMVolume;

           else if (r->r[1] == SoundCtrl_IIS0)      *SS_IndAddr = SSInd_IIS0Volume;

           else     /* must be IIS1 */              *SS_IndAddr = SSInd_IIS1Volume;


           if (r->r[0] & SoundCtrl_Vol_LeftMuteFlag) {
              lvolume = convert_vol_fixd2hw ((macro_to_fixed(-94.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              r->r[3]);
           } else {
             lvolume = SSInd_MuteFlag;
           }
           if (r->r[0] & SoundCtrl_Vol_RightMuteFlag) {
             rvolume = convert_vol_fixd2hw ((macro_to_fixed(-94.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             r->r[4]);
           } else {
             rvolume = SSInd_MuteFlag;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }
         case SoundCtrl_Capture:
         {
           *SS_IndAddr = SSInd_MasterVolume;

           if (lvolume != 0x80000000) {
              lvolume = convert_vol_fixd2hw ((macro_to_fixed(  0.0),
                                              macro_to_fixed( 22.5),
                                              macro_to_fixed(  1.5),
                                              r->r[3]);
           } else {
             lvolume = SSInd_AutoGainCtrl;
           }
           if (rvolume != 0x80000000) {
             rvolume = convert_vol_fixd2hw ((macro_to_fixed(  0.0),
                                             macro_to_fixed( 22.5),
                                             macro_to_fixed(  1.5),
                                             r->r[4]);
           } else {
             rvolume = SSInd_AutoGainCtrl;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }
      }
      break;

                    /**********************************************************/

    case  SoundCtrl_GetVolume:
      switch (r->r[1]) { // switch upon sound channel
         unsigned int lvolume, rvolume;

          case SoundCtrl_Master:
         {
           *SS_IndAddr = SSInd_MasterVolume;
           rvolume     = *SSIndData;
           lvolume     = rvolume >> 8;
           rvolume    &= 0xff;

           if (~lvolume & SSInd_MuteFlag;) {
              r->r[3] = convert_vol_hw2fixd ((macro_to_fixed(-46.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              lvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_LeftMuteFlag;
           }
           if (~rvolume & SSInd_MuteFlag) {
             r->r[4] = convert_vol_hw2fixd ((macro_to_fixed(-46.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             rvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_RightMuteFlag;
           }
           break;
         }

         case SoundCtrl_Line:
         case SoundCtrl_CD:
         case SoundCtrl_Synth:
         case SoundCtrl_Vid:
         {
           if      (r->r[1] == SoundCtrl_Line)  *SS_IndAddr = SSInd_LineVolume;

           else if (r->r[1] == SoundCtrl_CD)    *SS_IndAddr = SSInd_CDVolume;

           else if (r->r[1] == SoundCtrl_Synth) *SS_IndAddr = SSInd_SynthVolume;

           else     /* must be Vid */           *SS_IndAddr = SSInd_VidVolume;


           rvolume     = *SSIndData;
           lvolume     = rvolume >> 8;
           rvolume    &= 0xff;

           r->r[0] = 0;

           if (~lvolume & SSInd_MuteFlag) {
              r->r[3] = convert_vol_hw2fixd ((macro_to_fixed(-46.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              lvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_LeftMuteFlag;
           }
           if (~rvolume & SSInd_MuteFlag) {
             r->r[4] = convert_vol_hw2fixd ((macro_to_fixed(-46.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             rvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_RightMuteFlag;
           }

           *SS_IndData = (lvolume << 8) | rvolume;
           break;
         }
         case SoundCtrl_Mic:
         case SoundCtrl_PhoneIn:
         {
           if      (r->r[1] == SoundCtrl_Line)  *SS_IndAddr = SSInd_MicVolume;

           else     /* must be PhoneIn */       *SS_IndAddr = SSInd_PhoneInVolume;

           rvolume     = *SSIndData;
           lvolume     = rvolume >> 8;
           rvolume    &= 0xff;

           r->r[0] = 0;

           if (~lvolume & SSInd_MuteFlag) {
              r->r[3] = convert_vol_hw2fixd ((macro_to_fixed(-45.0),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 3.0),
                                              lvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_LeftMuteFlag;
           }
           if (~rvolume & SSInd_MuteFlag) {
             r->r[4] = convert_vol_hw2fixd ((macro_to_fixed(-45.0),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 3.0),
                                             rvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_RightMuteFlag;
           }

           break;
         }
         case SoundCtrl_Playback:
         case SoundCtrl_FM:
         case SoundCtrl_IIS0:
         case SoundCtrl_IIS1:
         {
           if      (r->r[1] == SoundCtrl_Playback)  *SS_IndAddr = SSInd_PlaybackVolume;

           else if (r->r[1] == SoundCtrl_FM)        *SS_IndAddr = SSInd_FMVolume;

           else if (r->r[1] == SoundCtrl_IIS0)      *SS_IndAddr = SSInd_IIS0Volume;

           else     /* must be IIS1 */              *SS_IndAddr = SSInd_IIS1Volume;


           rvolume     = *SSIndData;
           lvolume     = rvolume >> 8;
           rvolume    &= 0xff;

           r->r[0] = 0;

           if (~lvolume & SSInd_MuteFlag) {
              r->r[3] = convert_vol_hw2fixd ((macro_to_fixed(-94.5),
                                              macro_to_fixed(  0.0),
                                              macro_to_fixed(- 1.5),
                                              lvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_LeftMuteFlag;
           }
           if (~rvolume & SSInd_MuteFlag) {
             r->r[4] = convert_vol_hw2fixd ((macro_to_fixed(-94.5),
                                             macro_to_fixed(  0.0),
                                             macro_to_fixed(- 1.5),
                                             rvolume);
           } else {
             r->r[0] |= SoundCtrl_Vol_RightMuteFlag;
           }
           break;
         }
         case SoundCtrl_Capture:
         {
           *SS_IndAddr = SSInd_MasterVolume;

           rvolume     = *SSIndData;
           lvolume     = rvolume >> 8;
           rvolume    &= 0xff;

           r->r[0] = 0;

           if (~lvolume & SSInd_AutoGainCtrl) {
              r->r[3] = convert_vol_hw2fixd ((macro_to_fixed(  0.0),
                                              macro_to_fixed( 22.5),
                                              macro_to_fixed(  1.5),
                                              lvolume);
           } else {
             r->r[3] = 0x80000000;
           }
           if (~rvolume & SSInd_AutoGainCtrl) {
             r->r[4] = convert_vol_hw2fixd ((macro_to_fixed(  0.0),
                                             macro_to_fixed( 22.5),
                                             macro_to_fixed(  1.5),
                                             rvolume);
           } else {
             r->r[4] = 0x80000000;
           }
           break;
         }
      }
      break;
