; File:    s.tfr
; Purpose: To handle the DMA transfer low-level
; Author:  Timothy Roddis
; History: 09-Sep-97: TGR: created

   TTL DMA Transfer > s.dmatfr

   AREA |DMATfr|,CODE,READONLY

                GET    hdr:ListOpts
                GET    hdr:Macros
                GET    hdr:System

                GET    hdr.CVars
                GET    hdr.globals
                GET    hdr.SS
                GET    hdr.DMATfr
             
                ImportVar global_dma
                ImportVar global_keys
             
                EXPORT |dmatfr_start|
                EXPORT |dmatfr_completed|
                EXPORT |dmatfr_enable|
                EXPORT |dmatfr_disable|
                EXPORT |dmatfr_dmasync|

HostFS_WriteC * 0x40102

                MACRO
$label          output_savr14svc $char
          
                STMFD  sp!, {r0, r8, r9}

                MOV    r9, pc                 ; maybe in IRQ mode so ...
                ORR    r8, r9, #SVC_mode      ; force
                TEQP   r8, #0                 ; SVC mode
                MOV    r0, r0                 ;
                STMFD  sp!, {lr}              ; preserve R14_svc
                
                MOV    r0, #$char
                SWI    HostFS_WriteC
                
                LDMFD  sp!, {lr}              ; restore R14_svc
                TEQP   r9, #0                 ; restore mode
                MOV    r0, r0                 ;

                LDMFD  sp!, {r0, r8, r9}
       
                MEND

 [ {TRUE}
; dmatfr_enable
;
; on entry:
;   r11 is handle for channel / transfer
;   r12 is workspace pointer

                ASSERT  SS_PEN = SS_CEN
                ASSERT  SS_PIO = SS_CIO

dmatfr_enable ROUT

                STMFD   sp!, {r0,r1, lr}
                
;                output_savr14svc 'E'

                ; first of all, enable playback, disable PIO mode
                LDR     r0, =AD1816_SSBase
                CMP     r11, #DMATfr_ChannelPlay

                LDREQB  r1, [r0, #SS_PlayCfg]
                LDRNEB  r1, [r0, #SS_CaptureCfg]

                BIC     r1, r1, #SS_PIO
                ORR     r1, r1, #SS_PEN
                
                STREQB  r1, [r0, #SS_PlayCfg]
                STRNEB  r1, [r0, #SS_CaptureCfg]
                
                LDMFD   sp!,{r0,r1, pc}^

dmatfr_disable ROUT

;                MOVS    pc, lr
                STMFD   sp!, {r0,r1, lr}
                
;                MOV     r0, #'D'
;                SWI     HostFS_WriteC

                LDR     r0, =AD1816_SSBase
                CMP     r11, #DMATfr_ChannelPlay

                LDREQB  r1, [r0, #SS_PlayCfg]
                LDRNEB  r1, [r0, #SS_CaptureCfg]

                ORR     r1, r1, #SS_PIO
                BIC     r1, r1, #SS_PEN

                STREQB  r1, [r0, #SS_PlayCfg]
                STRNEB  r1, [r0, #SS_CaptureCfg]

                LDMFD   sp!,{r0,r1, pc}^
                
 |

; this is for use the the EASI BUS TEST CARD ...
 
 
rdycntr * &3243000
dmatrig * &3242000
dmaclr  * &3242400
 
dmatfr_enable ROUT
  STMFD r13!, {r0, r14}
  MOV   r0, #0
  LDR   r14, =dmatrig
  STRB  r0, [r14]
  LDR   r14, =dmaclr
  STRB  r0, [r14]
  MOV   r0, #15
  LDR   r14, =rdycntr
  STRB  r0, [r14]
  MOV   r0, #0
  LDR   r14, =dmatrig
  STRB  r0, [r14]
  LDMFD r13!, {r0, pc}^

dmatfr_disable ROUT
  STMFD r13!, {r0, r14}
  MOV   r0, #0
  LDR   r14, =dmatrig
  STRB  r0, [r14]
  LDR   r14, =dmaclr
  STRB  r0, [r14]
  LDMFD r13!, {r0, pc}^

 ]
; dmatfr_start - a DMA transfer will start shortly
; dma_completed - a DMA transfer has completed
;
; on entry:
;   r11 is handle for channel / transfer
;   r12 is workspace pointer

dmatfr_start ROUT

                STMFD   sp!, {r0, r1, r12, lr}

                StaticBaseFromWP r1, r12
                ADRVar  r0, r1, global_dma
                CMP     r11, #DMATfr_ChannelCapture
                ADDEQ   r0, r0, #ChanCapture
                LDR     r12, [r0, #ChanCallR12]
                LDR     r0, [r0, #ChanCallback_Start] ; 
                CMP     r0, #0
                MOVNE   lr, pc
                MOVNE   pc, r0

                LDMFD   sp!, {r0, r1, r12, pc}^



; dma_completed - a DMA transfer has completed
;
; on entry:
;   r0  is 0 (V clear) or -> err block (V set)
;   r11 is handle for channel / transfer
;   r12 is workspace pointer

dmatfr_completed ROUT

                STMFD   sp!, {r0, r1, r12, lr}

                StaticBaseFromWP r1, r12
                ADRVar  r0, r1, global_dma
                CMP     r11, #DMATfr_ChannelCapture
                ADDEQ   r0, r0, #ChanCapture
                MOV     r12, #0
                STR     r12, [r0, #ChanTag] ; zero tag
                LDR     r12, [r0, #ChanCallR12]
                LDR     r0, [r0, #ChanCallback_End] ; 
                CMP     r0, #0
                MOVNE   lr, pc
                MOVNE   pc, r0

                LDMFD   sp!, {r0, r1, r12, pc}^
  
; dma_sync - process last bytes of transfer
;
; on entry:
;   r11 is handle for channel / transfer
;   r12 is workspace pointer


dmatfr_dmasync ROUT

                STMFD   sp!, {r1, r12, lr}

;                output_savr14svc 'S'

                StaticBaseFromWP r1, r12
                ADRVar  r0, r1, global_dma
                CMP     r11, #DMATfr_ChannelCapture
                ADDEQ   r0, r0, #ChanCapture
                LDR     r12, [r0, #ChanCallR12]
                LDR     r0, [r0, #ChanCallback_Proc] ; 
                CMP     r0, #0
                MOVNE   lr, pc
                MOVNE   pc, r0

                LDMFD   sp!, {r1, r12, pc}^

 
                END
