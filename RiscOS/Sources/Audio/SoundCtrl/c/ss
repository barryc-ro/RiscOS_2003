/* ANSI headers */

#include <stdlib.h>

/* Commonlib headers */

#include "defines.h"
#include "debug.h"
#include "msgs.h"

/* Local headers */

#include "module.h"
#include "errors.h"

#include "ss.h"
#include "delay.h"

const char PNP_LFSRKey[32] = {
  0x6a, 0xb5, 0xda, 0xed, 0xf6, 0xfb, 0x7d, 0xbe,
  0xdf, 0x6f, 0x37, 0x1b, 0x0d, 0x86, 0xc3, 0x61,
  0xb0, 0x58, 0x2c, 0x16, 0x8b, 0x45, 0xa2, 0xd1,
  0xe8, 0x74, 0x3a, 0x9d, 0xce, 0xe7, 0x73, 0x39
};

_kernel_oserror *ss_init_pnp (void) {

  unsigned int i, csn;
  Bool flag;

  /* Unmarkedcomments are copies of those made by Jon Healy in a BASIC example program from
   * which the initialisation sequence is taken. In fact I don't understand all of it,
   * but I include it here for completeness - TGR */

  /* The first section ansures that the card is in a newly reset state regardless of
   * previous configuration/non-configuration. */
  /* The second section actually configures the card to be CSN 1, with attributes as
   * expected elsewhere in this module. */

  /*----------------------------------------------------------------------------*/

  /* Clear LFSR */

  *PNP_Addr  = 0;
  *PNP_Addr  = 0;

  /* Send LFSR key */

  for (i=0; i < sizeof PNP_LFSRKey / sizeof (char); i++) {
    *PNP_Addr = PNP_LFSRKey[i];
  }

  /* Wake CSN=1 if already configured */

  *PNP_Addr  = PNP_Wake;
  *PNP_Write = AD1816_CSN; /* This would be 0 on a usual 'first call'.
                              Here we cater for the possiblity that we have already
                              configured the card but need to reset it. - TGR */

  /* Reset already configure card */

  *PNP_Addr  = PNP_CfgCtrl;
  *PNP_Write = PNP_CfgCtrl_Reset | PNP_CfgCtrl_WaitForKey | PNP_CfgCtrl_ResetCSN;

  /*----------------------------------------------------------------------------*/

  /* Clear LFSR */

  *PNP_Addr = 0;
  *PNP_Addr = 0;

  /* Send LFSR key */

  for (i=0; i < sizeof PNP_LFSRKey / sizeof (char); i++) {
    *PNP_Addr = PNP_LFSRKey[i];
  }

  /* Reset already configure card */

  *PNP_Addr  = PNP_Wake;
  *PNP_Write = 0;

  /* Set read port */

  *PNP_Addr  = PNP_SetReadPort;
  *PNP_Write = PNP_ConvertToISA (PNP_ReadOffset)>>2;

  /* Send Isolate Command */

  *PNP_Addr = PNP_Isolate;

  /* possible delay */

  /* Read Isolation Sequence */

  flag = FALSE;

  for (i=0; i < 72 /*&& !flag*/; i++) {
    unsigned int a,b;

    /* possible delay here */

    a = *PNP_Read;
    b = *PNP_Read;

    if (a == PNP_Isolation_Sequence (0) && b == PNP_Isolation_Sequence (1)) {
      flag = TRUE;
    }
  }

  /* Has a card been detected? - TGR */

  if (!flag) {
    DEBUG debug_output ("i", Module_Title": hardware not found\n");

    return msgs_make_error (Error_HWNotFound);
  }

  /* Set CSN */

  *PNP_Addr  = PNP_CSN;
  *PNP_Write = AD1816_CSN;

  csn = *PNP_Read;

  DEBUG debug_output ("i", Module_Title": CSN = %d\n", csn);

  /* Put card into config mode */

  *PNP_Addr  = PNP_Wake;
  *PNP_Write = AD1816_CSN;

  /* Set first logical device number (Codec/Synth) */

  *PNP_Addr  = PNP_LogDev;
  *PNP_Write = AD1816_LogDev_Codec;

  /* SB Pro Address */

  *PNP_Addr  = IO_DescHi(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_SBBase) >> 8;

  *PNP_Addr  = IO_DescLo(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_SBBase) & 0xff;

  /* Adlib (FM) Address */

  *PNP_Addr  = IO_DescHi(1);
  *PNP_Write = PNP_ConvertToISA (AD1816_AdlibBase) >> 8;

  *PNP_Addr  = IO_DescLo(1);
  *PNP_Write = PNP_ConvertToISA (AD1816_AdlibBase) & 0xff;

  /* Codec addr */

  *PNP_Addr  = IO_DescHi(2);
  *PNP_Write = PNP_ConvertToISA (AD1816_SSBase) >> 8;

  *PNP_Addr  = IO_DescLo(2);
  *PNP_Write = PNP_ConvertToISA (AD1816_SSBase) & 0xff;

  /* Codec/SBPro IRQ */

  *PNP_Addr  = IRQ_ReqDesc(0);
  *PNP_Write = AD1816_IRQ;

  *PNP_Addr  = IRQ_TypeDesc(0);
  *PNP_Write = AD1816_IRQType;

  /* DMA Channel (playback) */

  *PNP_Addr  = DMA_ChanDesc(0);
  *PNP_Write = AD1816_DMA_Playback;

  /* DMA Channel (record) */

  *PNP_Addr  = DMA_ChanDesc(1);
  *PNP_Write = AD1816_DMA_Capture;

  /* Turn on the locaical device */

  *PNP_Addr  = PNP_Activate;
  *PNP_Write = PNP_Activate_Activate;

  *PNP_Addr  = PNP_LogDev;
  *PNP_Write = AD1816_LogDev_MIDI;

  *PNP_Addr  = IO_DescHi(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_MIDIBase) >> 8;

  *PNP_Addr  = IO_DescLo(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_MIDIBase) & 0xff;

  *PNP_Addr  = IRQ_ReqDesc(0);
  *PNP_Write = MIDI_IRQ;

  *PNP_Addr  = IRQ_TypeDesc(0);
  *PNP_Write = MIDI_IRQType;

  *PNP_Addr  = PNP_Activate;
  *PNP_Write = PNP_Activate_Activate;

  *PNP_Addr  = PNP_LogDev;
  *PNP_Write = AD1816_LogDev_GamePort;

  *PNP_Addr  = IO_DescHi(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_GameBase) >> 8;

  *PNP_Addr  = IO_DescLo(0);
  *PNP_Write = PNP_ConvertToISA (AD1816_GameBase) & 0xff;

  *PNP_Addr  = PNP_Activate;
  *PNP_Write = PNP_Activate_Activate;

  *PNP_Addr  = PNP_CfgCtrl;
  *PNP_Write = PNP_CfgCtrl_WaitForKey;

  delay_loop (PNP_DelayTime);

  *SS_IndAddr = SSInd_ChipCfg;
  SS_Write16(SS_IndData,
    SS_Read16(SS_IndData) & ~SSInd_CDE | SSInd_WSE | SSInd_CNP | (SSInd_IISF1 * SSInd_IIS_IIS));

  *SS_IndAddr = SSInd_HWVol;
  SS_Write16(SS_IndData, 0);

  *SS_IndAddr = SSInd_MasterVol;
  SS_Write16(SS_IndData, 0);

  *SS_IndAddr = SSInd_IIS1Vol;
  SS_Write16(SS_IndData, 0);

  return NULL;
}
