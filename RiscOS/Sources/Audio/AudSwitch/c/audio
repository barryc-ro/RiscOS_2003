/*
 * audio.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "audio.h"
#include "NVRAM.h"
#include "PortMan.h"
#include "Standby.h"

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

int iac_state=IAC_DISABLED;

int tvmode_iac_audio;
int iacmode_tv_audio,iacmode_iac_audio;

int  get_tv_audio(void)
{
  int state;

  _swix(PortMan_AccessBit,_INR(0,1) | _OUT(0),0,"AUDIOMIX", &state);

  state=(state & 1)==1 ? AUDIO_DISABLED : AUDIO_ENABLED;
  dprintf(("","getting tv audio (%d)\n",state));
  return(state);
}

void set_tv_audio(int state)
{
  int newstate;
  dprintf(("","setting tv audio to %d\n",state));

  newstate=(state==AUDIO_ENABLED ? PORTMAN_FLAG_SET : PORTMAN_FLAG_CLEAR);
  _swix(PortMan_AccessBit,_INR(0,1),newstate,"AUDIOMIX");
}

void set_iac_audio(int state)
{
  dprintf(("","setting iac audio to %d\n",state));
  if (state==AUDIO_ENABLED)
    _swix(Sound_Enable,_IN(0),2);
  else if (state==AUDIO_DISABLED)
    _swix(Sound_Enable,_IN(0),1);
}

int  get_iac_audio(void)
{
 int result;
 _swix(Sound_Enable,_IN(0) | _OUT(0), 0,&result);
 if (result==2)
   result=AUDIO_ENABLED;
 else
   result=AUDIO_DISABLED;
 return(result);
}


/* audio_audiomix
 * processes the AudioSwitch_AudioMix swi call
 * -1=get 0=disabled, 1=enabled
 */
int audio_audiomix(int set_state)
{
  int result=set_state;
  dprintf(("","audiomix in [%d]->",set_state));
  dprintf(("","iac.tv=%d, iac.iac=%d, tv.iac=%d\n",iacmode_tv_audio, iacmode_iac_audio, tvmode_iac_audio));
  switch (set_state)
  {
  case AUDIO_GET :
    result=get_tv_audio();
    break;
  case AUDIO_ENABLED : case AUDIO_DISABLED :
    if (iac_state==IAC_ENABLED)
    {
      iacmode_tv_audio=set_state;
      set_tv_audio(set_state);
    } /* if (iac_state==IAC_ENABLED) */
    else
    {
      /* tvmode_tv_audio=set_state;
       * This means that tv audio could potentially be disabled in tvmode by the iac device
       * Should this be allowed?
       */
      result=-1;  /* disallow any changes to tv sound in tv mode */
    } /* if (iac_state==IAC_ENABLED) else */

    break;
  default :
    result=-1; /* invalid state passed, return error */
    break;
  } /* switch (set_state) */

  dprintf(("","audiomix out[%d]->",result));
  dprintf(("","iac.tv=%d, iac.iac=%d, tv.iac=%d\n", iacmode_tv_audio, iacmode_iac_audio, tvmode_iac_audio));


  return(result);
}

/* audio_iacaudio
 * processes the AudioSwitch_IACAudio swi call
 * -1=get 0=disabled, 1=enabled
 */
int audio_iacaudio(int set_state)
{
  int result=set_state;
  switch (set_state)
  {
  case AUDIO_GET :
    result=tvmode_iac_audio;
    break;
  case AUDIO_ENABLED : case AUDIO_DISABLED :
    tvmode_iac_audio=set_state;
    /* if currently in tv mode then change sound state immediately also */
    if (iac_state==IAC_DISABLED)
      set_iac_audio(set_state);
    break;
  default :
    result=-1; /* invalid value passed */
  } /* switch (set_state) */
  return(result);
}

/* audio_start
 * Sets the default values for the audio states on initialisation
 */
void audio_start(void)
{
  int state;

  /* read default values saved in NVRAM */
  _swix(NVRAM_Read,_INR(0,2) | _OUT(0),"IACAudioInTV",0,0,&tvmode_iac_audio);

  _swix(NVRAM_Read,_INR(0,2) | _OUT(0),"TVAudioInIAC",0,0,&iacmode_tv_audio);

  iacmode_iac_audio=AUDIO_ENABLED; /* default for iac audio on in iac mode */

  dprintf(("","audio start"));
  dprintf(("","iac.tv=%d, iac.iac=%d, tv.iac=%d\n", iacmode_tv_audio, iacmode_iac_audio, tvmode_iac_audio));


  set_tv_audio(AUDIO_ENABLED);
  set_iac_audio(tvmode_iac_audio);

  /* Get current state
   * If enabled the set audio settings to be default value
   */

  _swix(Standby_State,_OUT(0), &state);
  if (state & STANDBY_SHUTDOWN_FLAG)
    iac_state=IAC_DISABLED;
  else
  {
    iac_state=IAC_ENABLED;
    audio_internet_enabled();
  } /* if (state & STANDBY_SHUTDOWN_FLAG) else */

}

/* audio_internet_enabled
 * called when the internet card is enabled
 */

void audio_internet_enabled(void)
{
  dprintf(("","enable->"));
  dprintf(("","iac.tv=%d, iac.iac=%d, tv.iac=%d\n",iacmode_tv_audio, iacmode_iac_audio,tvmode_iac_audio));

  set_tv_audio(iacmode_tv_audio);
  set_iac_audio(iacmode_iac_audio);

  iac_state=IAC_ENABLED;
}

/* audio_internet_disabled
 * called when the internet card is disabled
 */

void audio_internet_disabled(void)
{
  iacmode_tv_audio=get_tv_audio();
  iacmode_iac_audio=get_iac_audio();
  dprintf(("","disable->"));
  dprintf(("","iac.tv=%d, iac.iac=%d, tv.iac=%d\n",iacmode_tv_audio, iacmode_iac_audio, tvmode_iac_audio));

  set_tv_audio(AUDIO_ENABLED);
  set_iac_audio(tvmode_iac_audio);

  iac_state=IAC_DISABLED;
}


/* end of audio.c */
