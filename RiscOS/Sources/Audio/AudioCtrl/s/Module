; => Module

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date      Vn.   Who   Description
; ----      ----  ---   -----------
; 19-Jun-95 0.00  amg   Created (... well hacked out from PortableA4 - thanks tmd!)
; 07-May-96 0.00  amg   And re-hacked to start off AudioManager
; 11-Jun-96 0.01  amg   Allow Linearhandler_register/activate to register no current active handler

        TTL     The Audio Control module

        SUBT    Main code

;******************************************************************************

;------------------------------------------------------------------------------

; Structure of areas within the workspace

			! 	0,"*** Using a definition for despatch table size"
DefNumberOfEntries		*	512	; 2 words - address first, R0 second

			^	0
StoreAddress		#	4
StoreR0			#	4
SizeOfEntryBlock	*	:INDEX: @

			!	0,"Size of each entry in despatch table: " :CC: :STR: SizeOfEntryBlock :CC: " bytes"

;------------------------------------------------------------------------------

; The actual module workspace

                      ^       0, wp   ; Store

MsgTransBlk           #       16      ; for MessageTrans calls
DespatchTable         #       4	      ; address of despatch table
OriginalHandlerAddress #      4       ; the linear handler we've displaced
OriginalHandlerR0     #       4       ; the R0 for the linear handler we've displaced
CurrentHandlerAddress #	      4       ; address of current handler
CurrentHandlerR0      #       4       ; R0 for current handler
SavedR1R4             #       16      ; R1-R4 calling linear handler
NumberOfEntries       #	      4       ; number of entries in despatch table
SampleRate            #       4       ; current sample rate

                      AlignSpace
TotalRAMRequired      *       :INDEX: @

		      ! 0,"Module workspace: &" :CC: :STR: TotalRAMRequired :CC: " bytes"

		      ASSERT (CurrentHandlerR0 - CurrentHandlerAddress) = 4 ; must be adjacent

;******************************************************************************

; Errors (the ASSERT checks for too many errors declared)

        ^               ErrorBase_AudioManager

        AddError        GoGetAnUpgrade, "Err8bitsound"     	; &0080FA00
	AddError	NiceTry, "ErrReasonCode"	        ; &0080FA01
	AddError	StoreFull, "ErrStoreFull"               ; &0080FA02
	AddError	Exists, "ErrExists"                     ; &0080FA03
	AddError	LHNotFound, "ErrLHNotFound"             ; &0080FA04
	AddError	SRBadIndex, "ErrBadRate"		; &0080FA05

        ASSERT          @ <= (ErrorBase_AudioManager + ?ErrorBase_AudioManager)

;******************************************************************************

; Resources

MessageFile     DCB     "AudioControl:Messages",0
Path            DCB     "AudioControl$Path",0
DefPath         DCB     "Resources:$.Resources.AudioCtrl.",0

;******************************************************************************

        SUBT    Module entry stuff
        OPT     OptPage

	MakeErrorBlock	GoGetAnUpgrade

HelpString
        =       "AudioControl", 9, Module_HelpVersion, 0
        ALIGN

        SUBT    Initialisation code
        OPT     OptPage


ModuleFlags
      [ No32bitCode
        &       0
      |
        &       ModuleFlag_32bit
      ]


InitModule ENTRY

        [ debug
        InsertTMLInitialisation 1
        EXIT    VS
        ]

	; I want to give an error and exit if 16 bit sound not present, BUT
	; this requires contact with our messages, but I don't want to claim
	; my memory yet. Use a stack frame. Be VERY careful about the sequence
	; of things here!

; initialise Path variable if null

        addr    R0,Path
        MOV     R2,#-1
        MOV     R3,#0
        MOV     R4,#VarType_Expanded
        SWI     XOS_ReadVarVal                  ; returns R2=0 if doesn't exist

        CMPS    R2,#0                           ; if null, set it
        addr    R0,Path,EQ
        addr    R1,DefPath,EQ
        MOVEQ   R2,#?DefPath
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal

	MOV	r0, #0
	SWI	XSound_Mode
	EXIT	VS
	MOV	R1, R0

        [       standalonemessages
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_RegisterFiles
        ]

;	! 0,"************************************* Fudging 16 bit test"
;	MOV	R1, #1

	CMP	R1, #0
	BNE	%FT09				; branch if we have 16 bit sound

; open messages file

	SUB	R13, R13, #16			; create a stack frame
	MOV	R0, R13
        addr    R1,MessageFile
        MOV     R2,#0                           ; no buffer supplied
        SWI     XMessageTrans_OpenFile
	ADDVS	R13, R13, #16			; if it went wrong repair the stack, and out
        EXIT    VS

	ADR	R0, ErrorBlock_GoGetAnUpgrade
	MOV	R4, #0
	MOV	R1, R13
	MOV	R2, #0
	MOV	R5, #0
	MOV	R6, #0
	MOV	R7, #0
	SWI 	XMessageTrans_ErrorLookup	; get the error looked up

	MOV	R1, R0

        MOV	R0, R13				; close the messages
        SWI     XMessageTrans_CloseFile
	ADD	R13, R13, #16			; free the stack frame

        [       standalonemessages
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles	; tidy up resourcefs, if it's our problem
        ]

 	MOVVC	R0, R1				; keep the error from resourcefs, or move in the 16bit error
        SETV
	EXIT					; and out (PHEW!)

09
	; we have 16 bit hardware... so now set up a normal environment

	LDR	r2, [r12]
	TEQ	r2, #0
	BEQ	%FT11

	; however it's possible the size may have to change, so start over

	MOV	r3, r12				; save private word
	MOV	r12, r2
	LDR	r2, DespatchTable
	TEQ	r2, #0
	MOVNE	r0, #ModHandReason_Free	        ; free the despatch table
	SWINE	XOS_Module
	MOV	r2, r12
	MOV	r0, #ModHandReason_Free         ; and the main space
	SWI	XOS_Module
	MOV	r12, r3				; put private word back in r12
11
        MOV     r0, #ModHandReason_Claim
	LDR	r3, TotalRAMRequiredW
        SWI     XOS_Module
        EXIT    VS
        STR     r2, [r12]                       ; claim main workspace
        MOV     wp, r2

; initialise workspace areas

        MOV     R0, #0                          ; init to zero
        LDR     R1, TotalRAMRequiredW           ; R1 -> last word of workspace
	SUB     R1, R1, #4
        ADD     R1, R12, R1
01
        STR     R0, [R1], #-4                   ; zero it and move back
        CMP     R1, R12                         ; check whether we've got to the start
        BHS     %BT01                           ; and go round until R1 is < R12

; open the messages file

	wsaddr	R0, MsgTransBlk			; now really open the messages file
        addr    R1,MessageFile
        MOV     R2,#0                           ; no buffer supplied
        SWI     XMessageTrans_OpenFile
        EXIT    VS

; and set up non-zero contents

	MOV	R0,#-1
	STR	R0, CurrentHandlerR0		; 0 in CurrentHandlerAddress is ok

	MOV	R0, #DefNumberOfEntries
	STR	R0, NumberOfEntries

; claim the despatch table too

	MOV	R0, #ModHandReason_Claim
	LDR	R14, NumberOfEntries
	MOV	R4, #SizeOfEntryBlock
	MUL	R3, R4, R14
	SWI	XOS_Module
	EXIT	VS
	STR	R2, DespatchTable

; and zero the despatch table
	LDR	R0, NumberOfEntries
	MOV	R1, #0				; could be optimised, but that'd either make
	MOV	R3, #-1                         ; the routine dependent on a multiple of n
02                                              ; or more complicated in dealing with the
	STMIA	R2!, {R1,R3}                    ; remainder
	SUBS	R0, R0, #1
	BNE	%BT02

	ASSERT	SizeOfEntryBlock = 8		; change this if the block alters size

	; establish ourselves as the preferred sound16 linear handler, and remember
	; who we usurped

	; Need to be cautious about displacing ourselves (the R12 will be junk!)
	MOV	R0, #1
	ADRL	R1, MyLinearHandler
	MOV	R2, R12
	SWI	Sound_LinearHandler

	ADRL	R14, MyLinearHandler
	TEQ	R14, R1
	MOVEQ	R1, #0
	MOVEQ	R2, #-1
	STR	R1, OriginalHandlerAddress
	STR	R2, OriginalHandlerR0

	; find the current sample rate
	MOV	R0, #1
	SWI	Sound_SampleRate
	STR	R2, SampleRate

	CLRV
        EXIT

TotalRAMRequiredW				; can't load this directly,
	DCD	TotalRAMRequired                ; and this method avoids any
                                                ; potential problems

KillModule ENTRY
        LDR     wp, [r12]

	; detach ourselves from SoundDMA
	MOV	R0, #1
	LDR	R1, OriginalHandlerAddress
	LDR	R2, OriginalHandlerR0
	SWI	XSound_LinearHandler

	; close message file

        wsaddr  R0,MsgTransBlk
        SWI     XMessageTrans_CloseFile

        [       standalonemessages
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
        ]

	LDR	R2, DespatchTable		; dispose of despatch table
	TEQ	R2, #0
	MOVNE	R0, #ModHandReason_Free
	SWINE	XOS_Module

        MOV     R0, #ModHandReason_Free         ; and then the workspace
	MOV	R2, R12
	SWI	XOS_Module

        CLRV
        EXIT

ServiceEntry ROUT
        [       standalonemessages
        TEQNE   R1,#Service_ResourceFSStarting
        MOVNE   pc, lr
        |
	MOV	pc, lr
        ]

        LDR     wp, [r12]

        [       standalonemessages
        Push    "r0-r3,lr"
        ADRL    r0, ResourceFSFiles
        MOV     lr, pc
        MOV     pc, r2
        Pull    "r0-r3,pc"
        ]

SWIEntry ROUT
        LDR     wp, [ r12 ]
        [ debug
        DREG    R11,"SWI "
        DREG    R0, "R0  "
        DREG    R1, "R1  "
        DREG    R2, "R2  "
        ]

        CMP     r11, #( EndOfJumpTable - JumpTable ) / 4
        ADDCC   pc, pc, r11, LSL #2
        B       UnknownSWI

JumpTable
        B       LinearHandler				; &4d080
        B       SampleRateSWI			        ; &4d081
EndOfJumpTable

        ASSERT  (EndOfJumpTable - JumpTable) / 4 = AudioManagerSWICheckValue - MySWIChunkBase

UnknownSWI
        Push    "r4,lr"
        ADR     r0, ErrorBlock_ModuleBadSWI
        ADR     r4, ModuleTitle
        BL      ErrorLookup1Parm
        Pull    "r4,pc"

        MakeErrorBlock ModuleBadSWI
	MakeErrorBlock NiceTry
	MakeErrorBlock StoreFull
	MakeErrorBlock Exists
	MakeErrorBlock LHNotFound

LinearHandler
	ENTRY "R3-R7"

	ASSERT LH_LastReason = 3
	ASSERT ReturnCurrent = 0
	ASSERT RegisterMakeCurrent = 1
	ASSERT SelectCurrent = 2
	ASSERT RemoveHandler = 3

        [ debug
        DREG R0,"Linear handler reason "
        ]

	; Control of linear handler registry
	; R0 b0-15 are reason code, b16-31 are flags - none yet

	; R0 = 0 Return current active handler
	; In :
	; Out: R0 preserved, R1 = address or 0, R2 = [R0] or -1

	; R0 = 1 Register & Make Current
	; In : R1 = ptr, R2 = handle (may be 0/-1 from version 0.01)
	; Out: R0 preserved, R1 = old ptr, R2 = old handle

	; R0 = 2 Select current handler (can be null)
	; In : R1 = ptr/0
	; Out: R0,R1 preserved unless error

	; R0 = 3 remove a handler
	; In : R1 = ptr
	; Out: R0,R1 preserved unless error

	MOV	R14, R0, LSL #16	; put reason code into R14 and junk flags

	CMP	R14, #LH_LastReason :SHL: 16
	BHI	lh_badreason

	TEQ	R14, #RemoveHandler :SHL: 16
	BEQ	lh_removehandler

	CMP	R14, #RegisterMakeCurrent :SHL: 16
	BEQ	lh_registermakecurrent	; this'll need changing when someone makes
	BHI	lh_selectcurrent        ; more reason codes :-)
	BCC	lh_returncurrent

	; *** we *will* have branched by here
lh_badreason
	ADR	R0, ErrorBlock_NiceTry
	BL	ErrorLookupNoParms
	EXIT

lh_removehandler
	BL	lh_init
	BL	lh_find
	TEQ	R7, #0
	BEQ	lh_notfound

	; check whether it's also the current handler
	TEQ	R6, R1			; R6 set up by lh_init
	MOVEQ	R3, #0
	MOVEQ	R14, #-1
	STREQ	R3, CurrentHandlerAddress
	STREQ	R14, CurrentHandlerR0

	; R7 = ptr to this entry in table
	; R5 = end of table
30
	SUB	R5, R5, #SizeOfEntryBlock	; move back
	TEQ	R5, R7				; arrived at this one
	BEQ	%FT31

	LDMIA	R5, {R3, R4}			; get the content
	TEQ	R3, #0                          ; beyond end of list
	BEQ	%BT30                           ; go round again

	; got a valid entry - use it to overwrite the one being removed
	MOV	R6, #0
	MOV	R14, #-1
	STMIA	R5, {R6, R14}			; zap the end entry
	STMIA	R7, {R3, R4}                    ; and put it over the removed one
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14
31
	; last entry - just zap it
	MOV	R3, #0
	MOV	R4, #-1
	STMIA	R7, {R3-R4}
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14

lh_registermakecurrent
        ; version 0.01 enhancement - include SoundDMA behaviour of registering 0/-1
        TEQ     R1, #0
        MOVEQ   R2, #-1
        BEQ     %FT30

	BL	lh_init
	BL	lh_find
	TEQ	R7, #0
	BNE	lh_exists

	; try to place it in the store (and don't make it current until we succeed)
	LDR	R4, DespatchTable		; get back to that start
31
	LDR	R3, [R4]
	TEQ	R3, #0				; empty entry
	STMEQIA	R4, {R1-R2}
	BEQ	%FT30                           ; so take it

	ADD	R4, R4, #SizeOfEntryBlock	; move up
	TEQ	R4, R5				; end of table ?
	BNE	%BT31				; no, so around again

	; store is full
	ADR	R0, ErrorBlock_StoreFull
	BL	ErrorLookupNoParms
	EXIT

lh_exists
	ADR	R0, ErrorBlock_Exists
	BL	ErrorLookupNoParms
	EXIT

30
	; found a slot, so can now make it the current handler
	LDR	R3, CurrentHandlerAddress
	LDR	R4, CurrentHandlerR0
	ADR	R5, CurrentHandlerAddress
	STMIA	R5, {R1-R2}			; atomic update
	MOV	R1, R3
	MOV	R2, R4				; put the return values in place
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14


lh_selectcurrent
	TEQ	R1, #0				; no current handler
        BNE     %FT40

	MOV	R3, #-1
	STR	R1, CurrentHandlerAddress
	STR	R3, CurrentHandlerR0            ; do it
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14
40
	BL	lh_init
	BL	lh_find
	TEQ	R7, #0
	BEQ	lh_notfound

        ; do this atomically
	LDMIA	R7, {R3, R4}
	ADR	R7, CurrentHandlerAddress
	STMIA	R7, {R3, R4}

        CMP     PC,PC
        EXIT    EQ
        PullEnv
	MOVS    PC,R14

lh_notfound
	ADR	R0, ErrorBlock_LHNotFound
	BL	ErrorLookupNoParms
	EXIT

lh_returncurrent
	LDR	R1, CurrentHandlerAddress
	LDR	R2, CurrentHandlerR0

        [ debug
        DREG    R1,"rc, exiting with "
        ]

        CMP     PC,PC
        EXIT    EQ
        PullEnv
	MOVS    PC,R14

lh_find
	; In: R4 = table start
	;     R5 = table end
	;     R1 = ptr to find
	;
	; Out: R7 = 0 or ptr to table, R3 corrupt

	MOV	R7, #0				; set up failure indication
20
	LDR	R3, [R4, #StoreAddress]         ; get an address
	TEQ	R3, #0
	MOVEQ	R15, R14                        ; out if end of list

	TEQ	R3, R1
	MOVEQ	R7, R4
	MOVEQ	R15, R14                        ; out if matched, with R7 set

	ADD	R4, R4, #SizeOfEntryBlock
	TEQ	R4, R5                          ; out if end of store
	MOVEQ	R15, R14
	B	%BT20

lh_init
	; set up for find, remove etc
	; R4 = table start
	; R5 = table end
	; R6 = current handler addr
	; R3, R7 for temp use

	LDR	R4, DespatchTable
	LDR	R6, NumberOfEntries
	MOV	R7, #SizeOfEntryBlock
	MLA	R5, R6, R7, R4
	LDR	R6, CurrentHandlerAddress
	MOV	R15, R14

;******************************************************************************

SampleRateSWI ENTRY
	ASSERT SR_LastReason = 3
	ASSERT ReadNumberOfRates = 0
	ASSERT ReadCurrentIndexRate = 1
	ASSERT SelectCurrent = 2
	ASSERT RemoveHandler = 3

	; Control of sample rate
	; R0 b0-15 are reason code, b16-31 are flags - none yet

	; **** There is only rate, which is system-wide, consequently
	;      although I deal here with SoundDMA-like SWIs they always
	;      return a single rate - the current setting of SoundDMA.
	;      The setting is read at initialisation, and on every linear
	;      handler call (it's passed through in R4). Linear handlers
	;      hanging off me are expected to watch this rate themselves.

	; R0 = 0 Read number of available rates (= 1)
	; In :
	; Out: R0 preserved, R1 = #rates (1)

	; R0 = 1 Read current index & rate
	; Out: R0 preserved, R1 = index (1), R2 = rate

	; R0 = 2 Read sample rate for index
	; In : R1 = 1
	; Out: R0,R1 preserved, R2 = rate

	; R0 = 3 Set sample rate for handler
	; In : R1 = index (1), R2 = handler
	; Out: R0 preserved, R1/R2 = old value (same index!)

	MOV	R14, R0, LSL #16	; put reason code into R14 and junk flags

	CMP	R14, #SR_LastReason :SHL: 16
	BHI	lh_badreason

	TEQ	R14, #SetSampleRate :SHL: 16
	BEQ	sr_setsamplerate

	CMP	R14, #ReadCurrentIndexRate :SHL: 16
	BEQ	sr_readcurrentindexrate		; this'll need changing when someone makes
	BHI	sr_readsamplerateforindex       ; more reason codes :-)

	; and fall through for readnumberofrates (0)
	MOV	R1, #1
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14

sr_readcurrentindexrate ; reason code 1
	BL	sr_check_handler		; real handler address ?
	EXIT	VS

	MOV	R1, #1
	LDR	R2, SampleRate                  ; return universal sample rate
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14

sr_readsamplerateforindex ; reason code 2
	CMP	R1, #1
	BNE	sr_badindex                     ; valid index ?
	LDR	R2, SampleRate                  ; return universal sample rate
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14

sr_setsamplerate ; reason code 3
	CMP	R1, #1
	BNE	sr_badindex                     ; valid index

	MOV	R1, R2
	BL	sr_check_handler                ; valid handler ?
	EXIT	VS

	MOV	R1, #1
	LDR	R2, SampleRate                  ; return the sample rate
	CMP     PC,PC
	EXIT    EQ
	PullEnv
	MOVS    PC,R14

sr_check_handler
	; see if the handler in R1 is kosher
	; return R0/VS if not
	STMFD	R13!,{R3-R7,R14}
	BL	lh_init
	BL	lh_find
	CMP	R7, #0				; flags: nCv and Z/z
	LDMNEFD	R13!,{R3-R7,R15}       	 	; return with VC
	ADR	R0, ErrorBlock_LHNotFound
	BL	ErrorLookupNoParms
	LDMFD	R13!,{R3-R7,R15}		; return with VS and R0->error

sr_badindex
	ADR	R0, ErrorBlock_SRBadIndex
	BL	ErrorLookupNoParms
	EXIT

	MakeErrorBlock SRBadIndex

SWINameTable
ModuleTitle ; Share the string
        =       "AudioControl", 0
        =       "LinearHandler", 0
        =       "SampleRate", 0
        =       0
        ALIGN

;******************************************************************************

MyLinearHandler

	; R0 - my handle (my R12 in fact)
	; R1 - points to quadword-aligned DMA buffer
	; R2 - points to word beyond the buffer
	; R3 - flags
	;      bits 0-2:  0 - data in buffer must be overwritten
	;                 1 - non-zero data in buffer, converted from 8bit
	;                 2 - buffer is zero, handler may just return
	;                 3+  reserved
        ;      bits 3-7: not described in PRM!
	;      bits 8-31: reserved
	; R4 - sample rate for playback
	;
	; My outbound interface is much the same, except that bit 31 of R3
	; is used to indicate to a handler that it's NOT the current one,
	; ie that it's not being called to fill the buffer but just to
	; allow it to perform any timekeeping/tracking
	;
	; R0-R10 can be corrupted, R11-R13 must be preserved
	;
	; Ints may be enabled. Entry in IRQ or SVC mode - must preserve it

	; Sequence of events here:
	; 1. Despatch to current handler
	; 2. Despatch to all the others
	; 3. If there's no current handler decide whether we have to do anything
	; 4. Back to SoundDMA

	; My register usage:
	; R11 - base of where I've stashed R1-R4
	; R12 - my workspace
	; R14 - temp use
	; R0-R10 - temp use since each handler can trash them

	STMFD	R13!,{R11,R12,R14}		; save for SoundDMA

	MOV	R12, R0				; get my workspace into position

	STR	R4, SampleRate			; update the current sample rate

	ADR	R11, SavedR1R4
	ORR	R3, R3, #&80000000		; put on the 'do nothing bit for future calls'
	STMIA	R11, {R1-R4}			; save the common registers (R0 different for each)
	BIC	R3, R3, #&80000000	        ; but we don't need it now

	; despatch to current handler first
	LDR	R5, CurrentHandlerAddress
	LDR	R0, CurrentHandlerR0

        [ debugag
        DREG    R5,"<mn ",cc
        ]

	TEQ	R5, #0
	ADRNE	R14, return_currentcall
	MOVNE	R15, R5
return_currentcall

        [ debugag
        DLINE   ">"
        ]

	; now to all other handlers, remembering to skip the current one
	; registers:
	; R5 - current pointer into despatchtable
	; R6 - address after despatchtable
	; R7 - current handler address
	; R8 - this handler address

	ASSERT	SizeOfEntryBlock = 8
	ASSERT	StoreR0 = 4
	ASSERT	StoreAddress = 0		; make sure my definitions are still right!

	LDR	R5, DespatchTable
	LDR	R7, NumberOfEntries		; number of entries in table
	MOV	R14, #SizeOfEntryBlock  	; size of each
	MLA	R6, R7, R14, R5                 ; get total size, and turn into end address
	LDR	R7, CurrentHandlerAddress

02
	TEQ	R5, R6
	BEQ	%FT01		; reached end of store

	; now to call each one, remembering that it can trash my registers :-(

	LDR	R8, [R5], #4		; address for this handler
	LDR	R0, [R5], #4		; R0 for this handler

	TEQ	R8, #0
	BEQ	%FT01			; reached an unused entry

	TEQ	R8, R7
	BEQ	%BT02			; it's the current handler - skip it

        [ debugag
        DREG    R8,"<b31 ",cc
        ]

	STMFD	R13!, {R5-R7}		; save my R5-R7 'cos the linear handler can corrupt them
	LDMIA	R11, {R1-R4}		; reload R1-R4 for handler call
	ADR	R14, return_noncurrentcall
	MOV	R15, R8
return_noncurrentcall
        [ debugag
        DLINE   ">"
        ]
	LDMFD	R13!, {R5-R7}		; reload my R5-R7
	B	%BT02			; and around again

01
	; done calling - now to see if we've anything to do cos there's no current
	; handler

	TEQ	R7, #0
	LDMNEFD	R13!, {R11, R12, R15}	; there was a current handler, thus we can return

	; only situation where we must munge the buffer is R3 0:2 = 0
	ANDS	R14, R3, #7
	LDMNEFD	R13!, {R11, R12, R15}	; b0:2 is non-zero - return

        [ debugag
        DLINE "*01"
        ]

	; alright - can't avoid it any longer - we get to zap the buffer.
	LDMFD	R11, {R1-R4}	; R1 is where to start, R2 is where to finish

	MOV	R0, #0
	MOV	R3, #0
	MOV	R4, #0
	MOV	R5, #0
	MOV	R6, #0
	MOV	R7, #0
	MOV	R8, #0
	MOV	R9, #0

	; soundbuffer is 4K long - do 256 bytes in a loop - 16 loops

03
	STMIA	R1!,{R0,R3-R9}	; 8 registers -  32 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers -  64 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers -  96 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers - 128 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers - 160 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers - 192 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers - 224 bytes
	STMIA	R1!,{R0,R3-R9}	; 8 registers - 256 bytes
	CMP	R1, R2
	BLT	%BT03

	LDMFD	R13!,{R11,R12,PC}		; back to SoundDMA



;******************************************************************************

ErrorLookupNoParms      ENTRY   "R1-R7"
;
; Entry:
;    R0 -> error block with tokenised message
;
; Exit:
;    R0 -> error block with real message
;    V set

        MOV     R4,#0                           ; no parameter 0
	B	ErrorLookupContinue
	; that branch is needed - ALTENTRY generates a STMFD

ErrorLookup1Parm        ALTENTRY
;
; Entry:
;    R0 -> error block with tokenised message
;    R4 -> parameter to substitute into error
;
; Exit:
;    R0 -> error block with real message
;    V set

ErrorLookupContinue

        wsaddr  R1,MsgTransBlk
        MOV     R2,#0                           ; use internal buffer
        MOV     R5,#0                           ; no parameter 1
        MOV     R6,#0                           ; no parameter 2
        MOV     R7,#0                           ; no parameter 3
        SWI     XMessageTrans_ErrorLookup
        EXIT

;******************************************************************************


        END
