AudioControl module API
=======================

History
-------

05/05/96 amg 0.00  Created
05/05/96 amg 0.01  Updates after reading by sp/sbp
13/05/96 amg 0.02  Add SWI and error details
03/06/96 amg 0.03  Change name to Audio Control - found an
                   unregistered user of Audio Manager
11/06/96 amg 0.04  Allow 0/-1 in R1/R2 on Register/Activate
                   reason code of LinearHandler

Introduction
------------

AudioControl represents the first steps towards enhancing the sound
system to handle multiple simultaneous sound sources. Whilst one
only one handler will be active at a time in this design the
potential is there for future improvements.

A new API is provided for linear handlers to use instead of
registering directly with SoundDMA. The same facilities are
available.

There are some consequences to bear in mind for an environment
where there are multiple linear handlers registered. The first is
that all registered sources will be called at the sample rate, but
only the currently active one needs to transfer any data - the others
are called so that they can remain in step (particularly important
for coded streams such as ADPCM when it's not possible to start at an
arbitrary point in the stream). The second is that, in this initial
implementation, a fixed system-wide sample rate will be in use - an
error will be given if any linear handler attempts to select the
wrong rate.

In the future it is likely that AudioControl will be extended to direct
a linear handler to fill a buffer owned by AudioControl. AudioControl
will then perform some processing on this buffer before filling the
SoundDMA itself. This is intended for future implementation, but it
does mean that linear handlers must not make assumptions about the
address of the buffer they are given to write into.

Linear Handler entry
--------------------

The entry conditions for a linear handler are based upon those 
defined for SoundDMA - there is one change, which is indicated.

R0 - parameter passed in R2 when registering with AudioControl
R1 - pointer to quadword aligned buffer
R2 - pointer to word immediately after buffer
R3 - bits 0-2: Initial buffer content
               0 data in buffer is invalid, overwrite it
               1 was 8bit ulaw data, and is non-zero
               2 buffer data is all zero - return if
                 handler would generate silent output
               3-7 reserved
     bits 3-7: ambiguous in PRM - need to check sources (reserved)
     bits 8-30: reserved
NEW  bit 31: set if handler called is not current (ie don't
     write to the buffer)
R4 - sample rate for playback (in 1/1024Hz)

R0-R10 may be corrupted, and R11-R13 must be preserved. Return using
R14.

The handler may enable interrupts. A handler may be called in either
SVC or IRQ mode - it must preserve the mode on exit.

The currently active handler will be called first. Others may be called
in any order.

SWI interface
-------------

A linear handler using AudioControl should use these calls in
preference to those provided by SoundDMA - in particular it must be
noted that registering directly with SoundDMA will deregister
AudioControl.

This is acceptable for a handler which doesn't know about multiple
sound sources (since it should be well-mannered enough to reinstate
the original handler - AudioControl - when it shuts down).

AudioControl_LinearHandler (SWI &4D080)
---------------------------------------

This SWI provides control for the registration, removal and
activation of linear handlers.

Bits 0-15 of R0 hold a reason code.

R0 = 0 : Return currently active linear handler
     1 : Register (and activate) a linear handler
     2 : Select active linear handler
     3 : Remove a linear handler

Bits 16-31 of R0 are reserved for flags. None are defined yet.


On entry     

R0 = 0 : Return currently active linear handler

On exit

R0 preserved
R1 pointer to current active handler, or 0
R2 parameter passed in R0 to current active handler, or -1


On entry

R0 = 1 : Register (and activate) or a linear handler 
R1 = pointer to handler code
R2 = parameter to pass in R0 when calling handler code

R1 may be 0, and R2 -1, to deactivate the active handler.

On exit

R0 preserved
R1 pointer of previously active handler, or 0
R2 parameter for previously active handler, or -1

An error will be given if AudioControl cannot register any more
handlers.


On entry

R0 = 2 : Select active linear handler
R1 = pointer to handler code, or 0 for none

On exit

R0, R1 preserved, unless R1 was not a known pointer - an error
will be returned instead. R1=0 can be used to deselect the
currently active handler ie muting it.


On Entry

R0 = 3 : Remove a linear handler
R1 = pointer to handler code

On exit

R0, R1 preserved, unless R1 was not a known pointer - an error will
be returned instead.


AudioControl_SampleRate (SWI &4D081)
------------------------------------

Bits 0-15 are reason code, bits 16-31 are flags. 

R0 = 0 : Reads number of available sample rates
     1 : Reads current sample rate index and rate for given handler
     2 : Reads sample rate corresponding to given index
     3 : Sets the current sample rate index for given handler
     
Note: this call is intended to resemble Sound_SampleRate, aside from
extensions to facilitate different sample rates for each handler.
This is NOT implemented in this version, and an error will be given
for an attempt to set something other than the system sample rate.
(When reading the available rates only the system sample rate will
be returned).

On entry

R0 = 0 : Reads the number of available sample rates

On exit

R0 preserved
R1 = number of available sample rates


On entry

R0 = 1 : Reads current sample rate index and rate for given handler
R1 = pointer to handler code

On exit

R0 preserved
R1 = sample rate index
R2 = sample rate in 1/1024Hz

An error will be raised for an unknown pointer.


On entry

R0 = 2 : Reads sample rate corresponding to given index
R1 = sample rate index

On exit

R0 preserved
R1 preserved
R2 = sample rate corresponding to that index, in 1/1024Hz


On entry 

R0 = 3 : Sets the current sample rate index for given handler
R1 = new sample rate index
R2 = pointer to handler code

On exit

R0 preserved
R1 previous sample rate index
R2 previous sample rate in 1/1024 Hz

An error will be raised for an unknown pointer or a sample rate which
is not attainable.         

Errors
======

The following errors, and their associated English rendition have
been defined.

&0080FA00 Err8bitsound:16 bit sound hardware is not fitted in this computer
        1 ErrReasonCode:Unknown reason code passed to AudioControl SWI
        2 ErrStoreFull:You must deregister a linear handler first
        3 ErrExists:This linear handler is already registered
        4 ErrLHNotFound:This linear handler is not registered
        5 ErrBadRate:Invalid sample rate index
                                   
Code Size/Memory Usage
======================

Module workspace is &3C bytes, not expected to rise beyond &100 bytes.

Handler table is currently 512 entries, occupying 4K.

Code size is approx 2K, not expected to exceed 4K.

Assumptions
===========

1) The module is presently built with space for 512 handlers, which
occupies 4K of memory. Changing this is a trival assemble-time change.

2) The system-wide sample rate is taken by Audio Manager to be the
current sample rate in use by SoundDMA. This requires that SoundDMA
has been initialised before AudioControl.

3) Oversampling is presently configured by a CMOS bit. No requirement
to change this is seen.

4) Presently it is left to a linear handler how it wishes to handle
8 bit data passed to it as 16 bit samples. In a multiple handler
world it might be desirable to introduce a system-wide setting via
another CMOS bit. It is assumed this is not needed at this time.

