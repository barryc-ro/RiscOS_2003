SoundOut Design Document
************************

1.0 Overview & Technical background

This module essentially provides glue between the Operating System's DeviceFS
and the ShareSound module. Some sound data conversion is necessary.

2.0 Upward Interface

The driver provides driver functionality to DeviceFS. After registering,
SoundFS will be called

2.1 DeviceFS_Register
=====================

Entry:
  r0  =  flags:
           8 (character device (in the absence of block support)
              not duplex,
              supports IOCtls)
  r1  -> device list, as given below
  r2  -> driver entry point 
  r3  =  unused in this version of SoundFS
  r4  =  pw
  r5  =  0 (no special field support in this version)
  r6  =  0 (maximum number of RX devices)
  r7  =  -1? (maximum number of TX devices) (unlimited?)
  
Exit:
  r0  =  device driver's handle  
  
The device list is as follows:

  + 0  =  32 (offset to device name)
  + 4  =  flags, 3 (buffered, created 'SoundOut:')
  + 8  =  0 (no RX functionality in this release)
  +12  =  0 (ditto)
  +16  = 
  +20  =  buffer size to be determined by experimentation
  +24  =  0 (reserved)
  +28  =  0 (no more devices)
  +32 ... device name
  
  
2.2 DeviceDriver_Entry 14 - IOCtl
=================================

Entry:
  r0 = 14 (reason code)
  r1 = file handle
  r2 = stream handle
  r3 -> ioctl parameter block as passed in r2 of OS_Args call
  
Exit:
  r0-r3 preserved

This call is dispatched to the underlying device driver whenever the
OS_Arg IOCtl swi is called or the SWI DeviceFS_CallDevice (14) is called.


3.0 Sound Processing
====================

Resampling and (in future) format conversion is done by a middle-end. This
needs it's own buffers (using BufferManager) and processes data on
SharedSound callbacks (see below) and/or DeviceDriver entry.

Its own buffers are created using the following SWI:

3.1 Buffer_Register
===================

Entry:
  r0  =  flags: 1 (buffer is never dormant)
  r1  -> start     \_ obtained fom OS_DynamicArea
  r2  -> after end /
  r3  =  -1 (buffer manager to determine buffer handle)
Exit:
  r0  =  buffer handle  
  
A buffer is first claimed using OS_DynamicArea before making this call.

The buffer never becomes dormant because it is assumed that the SharedSound
routine will be requested data while ever the buffer exists. When the
relevant DeviceFS 'file' is closed the buffer will be removed using
Buffer_Deregister & OS_DynamicArea.

#3.1 Buffer_Create
#=================
#
#Entry:
#  r0  =  flags: 1 (buffer is never dormant)
#  r1  =  buffer size to be determined by experimentation
#  r2  =  -1 (buffer manager to determine buffer handle)
#Exit:
#  r0  =  buffer handle  
#  
#The buffer never becomes dormant because it is assumed that the SharedSound
#routine will be requested data while ever the buffer exists. When the
#relevant DevicefsFS 'file' is closed the buffer will be removed using
#Buffer_Remove.

           

4.0 Downward Interface
======================

The downward interface is handled by the Shared Sound module as specified in
the Shared Sound Software Functional Specification, document reference
2107,746. The SharedSound module provides immediate, interrupt-style calls
and callback-style calls as well as a third type (process handler) which is
not used by the SoundFS module. There are trade offs between interrupt
handlers and callbacks. Callbacks may not go off at all for extended periods
of time, so it has been suggested to me that all code should normally be
handled by an interrupt (immediate) callback. Currently this does so in
interrupt mode as no significant processing is done on the data and the
callback is fast. However, should it become necessary to do more processing
the code will need to be executed with interrupts enabled. There are already
semaphores in the code which can be compiled in.

5.0 Architecture
================

The source is split into 4 files, in a modula fashion, and assembled using
ObjAsm.

  error    - includes the error handling function
  module   - has the conventional module entry points, initialisation code
             etc.       
  fs       - has the DeviceFS entry points and code to handle them
  txbuffer - contains the SharedSound callback with
             processing, copying, blanking routines
  
There are also header files in directory 'a' containing various bits and
pieces:

  debuga   - some debugging macros which work okay with ObjAsm
  defs+ws  - definitions, compile-time flags and workspace layout
  error    - error related matters
  fs       - datastructures for use in s.fs
  ResFiles - resource files
  swiextra - SWI related definitions
  version  - version number
  
Registering with DeviceFS is done at initialisation, as is claiming the main
workspace.
Futher memory claims (for the datastructures in a.fs) is done on DeviceFS
stream initialisation (in s.fs). Registering with SharedSound is done on
stream creation. There may then be some delay before valid data is received,
during this period the receiving buffer is filled with zeroes. Should at any
time the module run out of data, the buffer is again filled with zeroes.
