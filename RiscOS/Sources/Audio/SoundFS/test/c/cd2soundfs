/* ANSI headers */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Common lib headers */

#include "swiextra.h"

#include "cdmisc.h"

#ifndef SharedSound_SampleRate
#define SharedSound_SampleRate 0x4b446
#endif

#define FRAMES 200
#define SECTORSIZE 2352
#define BUFFERSIZE ((FRAMES) * (SECTORSIZE))
#define MAXPATHLENGTH 2048
#define DELAY         1 // In CLOCKS_PER_SEC
#define RATE          44100

typedef struct ioctl_block {
  unsigned int reason   : 16; /* ioctl reason code */
  unsigned int group    : 8;  /* ioctl group code */
  unsigned int reserved : 6;  /* should be zero */
  unsigned int read     : 1;  /* read flag */
  unsigned int write    : 1;  /* write flag */
  unsigned int data;          /* actual data */
} Ioctl;

void raise_error (_kernel_oserror *e) {

//_swix (Wimp_ReportError,_IN(0)|_IN(1)|_IN(2), e, 2, "cd2file");

  fprintf (stderr, "Error: %08x:%s\n", e->errnum, e->errmess);
}

int main (void) {

  void             *buffer;
  unsigned int      drive;
  unsigned int      sequence_no;
  unsigned int      track;
  unsigned int      track_rel;
  unsigned int      todo;
  unsigned int      addr;
  unsigned int      handle;
  unsigned int      doing;
  unsigned int      track_start, track_end;
  char             *tocbuffer;
  char             *filename;
  size_t            tocsize;
  _kernel_oserror  *e;
  Ioctl            ioctl_blk = {0, 0, 0, 0, 0, 0};
  CDMgr_ReadTOC_Ptr tochdr;
  CDMgr_ReadTOC_TrackInfoPtr trkinfo;

  e = _swix (SharedSound_SampleRate, I0|I1, 0, RATE<<10);

  if (e) {
    raise_error (e);
    exit(1);
  }

  printf ("Drive no: ");

  scanf ("%d", &drive);

  e = _swix (CDMgr_DriveOp, I0|I1|O0,
            CDMgr_DriveOp_GetSequenceNumber,
            drive,
            &sequence_no);

  if (e) {
    raise_error (e);
    exit (1);
  }

  e = _swix (CDMgr_ReadTOC, I0|I1|I2|I3|I4|I5|O3,
               CDMgr_ReadTOCFlags_ReturnTrackInfo,
             drive,
             sequence_no,
             0, 0, 0,
             tocsize);

   if (e) {
    raise_error (e);
    exit (1);
  }

  tocbuffer = malloc (tocsize);

  if (!tocbuffer) {
    e = (_kernel_oserror *)"    Malloc failed";
    exit(1);
  }

  e = _swix (CDMgr_ReadTOC, I0|I1|I2|I3|I4|I5|O3|O4,
             CDMgr_ReadTOCFlags_ReturnTrackInfo,
             drive,
             sequence_no,
             tocbuffer,
             0, 0,
             &tochdr,
             &trkinfo);

  if (e) {
    goto clearup1;
  }

  do {

    printf ("Tracks number from %d to %d, which do you want to sample?\n"
            "(Enter -1 for all tracks): ",
            tochdr->first_track,
            tochdr->last_track);

    scanf ("%d", &track);

  } while (track != -1 && (track < tochdr->first_track || track > tochdr->last_track));

  track_rel = track - tochdr->first_track;

  if (trkinfo[track_rel].audio_mode & CDMgr_AudioModeFlags_Data) {

    e = (_kernel_oserror *)"    Data track";
    goto clearup1;
  }

  buffer = malloc (BUFFERSIZE);

  if (!buffer) {
    e = (_kernel_oserror *)"    Malloc failed";
    goto clearup1;
  }

//  printf ("Filename to save to: ");

//  scanf ("%s", filename);

  filename = "Audio:";

  e = _swix (OS_Find, I0|I1|I2|O0,
             OS_Find_CreateReadWrite, filename, 0, &handle);

  if (e) {
    goto clearup2;
  }

  if (!handle) {
    e = (_kernel_oserror *)"    Unable to open file";
    goto clearup2;
  }

  ioctl_blk.reason   = 1;
  ioctl_blk.group    = 0xff;
  ioctl_blk.write    = 1;
  ioctl_blk.data     = 1;

  e = _swix (OS_Args, I0|I1|I2, OS_Args_Ioctl, handle, &ioctl_blk);

  if (e) goto clearup3;

  if (track != -1) {
    track_start = trkinfo[track_rel  ].address;
    track_end   = trkinfo[track_rel+1].address - 1;
  } else {
    track_start = trkinfo[0].address;
    track_end   = trkinfo[tochdr->last_track+1-tochdr->first_track].address - 1;
  }

  todo = track_end - track_start;
  addr = track_start;

  while (todo > 0) {

    unsigned int  not_done;
    unsigned int  flags;
    void         *start;

    doing = todo < FRAMES ? todo : FRAMES;

    e = _swix (CDMgr_ReadData, I0|I1|I2|I3|I4|I5,
               CDMgr_ReadData_Raw,
               drive,
               sequence_no,
               buffer,
               addr,
               doing
               );

    if (!e) {

      not_done = BUFFERSIZE;
      start    = buffer;

      do {
        e = _swix (OS_GBPB, I0|I1|I2|I3|O2|O3|_OUT(_FLAGS),
                   OS_GBPB_WriteCurrentPos,
                   handle,
                   start,
                   not_done,
                   &start,
                   &not_done,
                   &flags
                   );
      } while (flags & _C);
    }
    if (e) break;

    todo -= doing;

    addr += FRAMES;
  }

  clearup3:
    _swix (OS_Find, I0|I1|I2|O0,
           OS_Find_Close, handle);

  clearup2:
    free (buffer);
  clearup1:
    free (tocbuffer);

  if (e) raise_error (e);

}
