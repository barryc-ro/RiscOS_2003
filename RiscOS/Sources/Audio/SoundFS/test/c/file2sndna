/* Not designed to work very well (no pre-loading of data) */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <time.h>

/* From commonlib .. */

#include "defines.h"
#include "swiextra.h"

#define DURATION (10)
#define VOLUME   (4095) /* 0 - 32767 (16383 is loud) */
#define FILENAMELENGTH 256

#define dprintf if (FALSE) ; else printf

typedef struct ioctl_block {
  unsigned int reason   : 16; /* ioctl reason code */
  unsigned int group    : 8;  /* ioctl group code */
  unsigned int reserved : 6;  /* should be zero */
  unsigned int read     : 1;  /* read flag */
  unsigned int write    : 1;  /* write flag */
  unsigned int data;          /* actual data */
} Ioctl;

typedef struct sample {
  signed int left:16;
  signed int right:16;

} Sample;

#ifndef SharedSound_SampleRate
#define SharedSound_SampleRate 0x4b446
#endif

int main (int argc, char *argv[]) {

  unsigned int     rate = 44100;
  unsigned int     bps  = sizeof (Sample); // bytes per sample
  unsigned int     nos,
                   out_handle,
                   flags;
  char             filename[FILENAMELENGTH];
//  signed short     left, right;
  clock_t          stopat;
  _kernel_oserror *e;
  Ioctl            ioctl_blk = {0, 0, 0, 0, 0, 0};
  Sample          *block;
  FILE            *in_handle;

  /* Initial calculations */

  e = _swix (SharedSound_SampleRate, I0|I1|O1, 0, (rate)<<10, &rate);

  if (e) {
    fprintf (stderr, "%s: error setting sample rate, \"%s\"\n", argv[0], e->errmess);
  }

  printf ("Rate is: %d\n", rate>>10);

  printf ("Input filename: ");

  scanf  ("%s", filename);

  nos   = 512;
  block =   malloc (nos * bps);

  if (!block) {
    fprintf (stderr, "%s: Unable to claim memory\n", argv[0]);
    exit (1);
  }

  dprintf ("Claimed memory @%08p\n", block);

  e = _swix (OS_Find, I0|I1|O0,
            OS_Find_OpenReadWrite|OS_Find_NoPath, "Audio:",
            &out_handle);

  if (e || !out_handle) {
    fprintf (stderr, "%s: Unable to open Audio\n", argv[0]);
    goto clearup1;
  }

  if ((in_handle = fopen (filename, "rb")) == 0) {
    fprintf (stderr, "%s: Unable to open \"%s\"\n", argv[0], filename);
    goto clearup1;
  }
  dprintf ("Opened Audio stream, handle = %d, \"%s\", in handle @%08p\n",
           out_handle, filename, in_handle);

  ioctl_blk.reason   = 1;
  ioctl_blk.group    = 0xff;
  ioctl_blk.write    = 1;
  ioctl_blk.data     = 1;

  e = _swix (OS_Args, I0|I1|I2, OS_Args_Ioctl, out_handle, &ioctl_blk);

  if (e) goto clearup1;

  dprintf ("Done ioctl\n");

  stopat = clock() + DURATION * CLOCKS_PER_SEC;
  {
    clock_t    taken;
    int        its = 0;
    size_t     not_done;// = nos*bps;
    size_t     to_do;
    Sample    *start;//    = block;
    clock_t    tstart;

  tstart = clock();

  while (!feof(in_handle)) {

    start    = block;

    to_do = fread (start, bps, nos, in_handle);

    if (ferror (in_handle)) {
      perror (argv[0]);
      exit (1);
    }

    not_done = to_do * bps;

    if (e) break;

    flags = 0;

    do {

      e = _swix (OS_GBPB, I0|I1|I2|I3|O2|O3|_OUT(_FLAGS),
                 OS_GBPB_WriteCurrentPos,
                 out_handle,
                 start,
                 not_done,
                 &start,
                 &not_done,
                 &flags);
     its += 1;

//      dprintf ("Start %08p, remaining %08x (C %08x)\n", start, not_done, flags & _C);

//      dprintf ("Done block of %d samples, remaining %08x\n", to_do, not_done);

    } while (flags & _C);
  }

  taken = clock() - tstart;
  dprintf ("%d iterations, taking an average of %e\n", its, (double) taken / its / CLOCKS_PER_SEC);
  }

  clearup1:

    dprintf ("Clearing up\n");

    _swix (OS_Find, I0|I1, OS_Find_Close, out_handle);
    fclose(in_handle);

    dprintf ("Closed file\n");

    free (block);

    if (e) {
      fprintf (stderr, "%s\n", e->errmess);
      exit(e->errnum);
    }
    exit (0);
}



