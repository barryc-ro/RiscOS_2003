/*
 * AudioDeviceDriver Test Application
 * using the toolbox and TPlusLib.
 *
 * Tony Howat 15/4/99
 *
 * Version : 0.01
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "kernel.h"
#include "swis.h"

#include "event.h"

#include "toolbox.h"
#include "wimplib.h"
#include "window.h"
#include "gadgets.h"
#include "iconbar.h"
#include "proginfo.h"
#include "tpluslib:tplus.h"
#include "tpluslib:alarm.h"

#include "defines.h"
#include "swiextra.h"

#define VERSION  "0.01"

#define QUIT  0x99
#define PLAY  0x1
#define PAUSE 0x2
#define STOP  0x3
#define cFILE 0x1
#define cRATE 0x2
#define cLOOP 0x8
#define cBAR  0x9

#ifndef SharedSound_SampleRate
#define SharedSound_SampleRate 0x4b446
#endif

int message_list [] = {0};
int event_list   [] = {0};

/* objectid of our main window */
ObjectId win=NULL;

MessagesFD    mfd;

IdBlock       id_blk;
WimpPollBlock poll_block;

/* sound vars */

typedef struct ioctl_block {
  unsigned int reason   : 16; /* ioctl reason code */
  unsigned int group    : 8;  /* ioctl group code */
  unsigned int reserved : 6;  /* should be zero */
  unsigned int read     : 1;  /* read flag */
  unsigned int write    : 1;  /* write flag */
  unsigned int data;          /* actual data */
} Ioctl;

typedef struct sample {
  signed int left:16;
  signed int right:16;

} Sample;

unsigned int     rate = 44100;
unsigned int     bps  = sizeof (Sample);
unsigned int     nos, out_handle=NULL , flags;
Sample          *block;
FILE            *in_handle=NULL;
int        its = 0,length=0,onepc=0;
size_t     not_done;// = nos*bps;
size_t     to_do;
Sample    *start;//    = block;
int paused=0;

void DBM(char *format, ...)
{
  va_list argp;

  va_start(argp,format);
  vfprintf(stderr,format,argp);
  va_end(argp);
}

void fillup(int Time, void *handle);

/* --- Good-bye! --- */

int wimp_quit (WimpMessage *message, void *h) {
  /* nothing to tidy up */
  exit(0);
  return(0); /* Keep the compiler happy */
}

int menu_quit(int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  exit(0);
  return(0); /* Keep the compiler happy */
}

/* just fill in the version number when our program info box is displayed */

int proginfo_show(int event_code, ToolboxEvent  *event, IdBlock *id_block,
                   void  *handle)
{
  proginfo_set_version(0,id_block->self_id,"V" VERSION " ("__DATE__")");
  return 1;
}

int window_hidden (int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  toolbox_delete_object(0,win);
  win=NULL;
  return(0); /* Keep the compiler happy */
}

/* --- the toolbox wants us to report an error --- */

int error_handler (int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  raise_error ((_kernel_oserror *)event_block->data.bytes);
  return 1;
}

int audiotest_stop (int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  if(out_handle)
  {
    _swix (OS_Find, I0|I1, OS_Find_Close, out_handle);
    out_handle=NULL;
  }

  if(in_handle)
  {
   fclose(in_handle);
   in_handle=NULL;
  }

  if(block)
  {
    free (block);
    block = NULL;
  }

  alarm_removeall(0);

  return 1;
}
int audiotest_pause (int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  if(!paused)
    alarm_removeall(0);
  else
  {
    if(in_handle)
      alarm_set(alarm_timenow()+1,fillup,0);
  }

  paused=!paused;

  return 1;
}

int audiotest_play (int event_code, ToolboxEvent *event_block,
                   IdBlock *id_blk, void *h)
{
  char ssb[17], filename[512];
  int nrate=0;
  _kernel_oserror *e;
  Ioctl            ioctl_blk = {0, 0, 0, 0, 0, 0};

  DBM("Entered audiotest_play()");
  DBM("win=0x%x",(int)win);

  writablefield_get_value(0,win,cRATE,ssb,16,NULL);
  DBM("Read rate as %s",ssb);
  nrate=atoi(ssb);
  if(nrate>=8000 && nrate<50000)
    rate=nrate;
  else
  {
    sprintf(ssb,"%i",rate);
    writablefield_set_value(0,win,cRATE,ssb);
  }

  displayfield_get_value(0,win,cFILE,filename,512,NULL);

  //DBM("Filename %s",filename);
  fprintf(stderr,"Filename %s",filename);

  e = _swix (SharedSound_SampleRate, I0|I1|O1, 0, (rate)<<10, &rate);

  DBM("Set sample rate");

  if (e) {
    werr (FALSE,"Error setting sample rate, \"%s\"", e->errmess);
  }

  nos   = 2048;
  block =   malloc (nos * bps);

  if (!block) {
    werr (FALSE,"Unable to claim memory");
    exit (1);
  }

  DBM("Audio: opening");

  e = _swix (OS_Find, I0|I1|O0,
            OS_Find_OpenReadWrite|OS_Find_NoPath, "Audio:",
            &out_handle);

  if (e || !out_handle) {
    fprintf (stderr, "Unable to open Audio");
    goto clearup1;
  }

  if ((in_handle = fopen (filename, "rb")) == 0) {
    fprintf (stderr, "Unable to open \"%s\"\n", filename);
    goto clearup1;
  }
  DBM ("Opened Audio stream, handle = %d, \"%s\", in handle @%08p\n",
           out_handle, filename, in_handle);

  /* set up slider */
  fseek(in_handle,0,SEEK_END);
  length=(int)ftell(in_handle);
  fseek(in_handle,0,SEEK_SET);
  //slider_set_bounds(7,win,cBAR,100,0,1);
  slider_set_value(0,win,cBAR,0);

  onepc=(int)((float)length/(float)100);

  ioctl_blk.reason   = 1;
  ioctl_blk.group    = 0xff;
  ioctl_blk.write    = 1;
  ioctl_blk.data     = 1;

  e = _swix (OS_Args, I0|I1|I2, OS_Args_Ioctl, out_handle, &ioctl_blk);


  start    = block;

  not_done = to_do * bps;

  DBM("Alarm set");
  alarm_set(alarm_timenow(),fillup,(void *)id_blk->self_id);
  return 1;

  clearup1:
    DBM("Clearing up");

    _swix (OS_Find, I0|I1, OS_Find_Close, out_handle);
    out_handle=NULL;
    fclose(in_handle);
    in_handle=NULL;

    DBM("Closed file");

    free (block);

    if (e) {
      werr (FALSE, "%s\n", e->errmess);
      exit(e->errnum);
    }
    return 1;  
}

void exithandler(void)
{
  _swix (OS_Find, I0|I1, OS_Find_Close, out_handle);
  fclose(in_handle);
}

void fillup(int Time, void *handle)
{
  _kernel_oserror *e;

  DBM("fillup entered");

  if(feof(in_handle))
  {
    int bstate;
    optionbutton_get_state(0,win,cLOOP,&bstate);
    audiotest_stop(NULL,NULL,NULL,NULL);
    if(bstate)
      audiotest_play(NULL,NULL,NULL,NULL);
    return;
  }

  start=block;

  to_do = fread (start, bps, nos, in_handle);

  if (ferror (in_handle)) {
    werr(FALSE,"ferror on in_handle");
    exit (1);
  }

  not_done=to_do*bps;
  flags=0;

  do {

    e = _swix (OS_GBPB, I0|I1|I2|I3|O2|O3|_OUT(_FLAGS),
               OS_GBPB_WriteCurrentPos,
               out_handle,
               start,
               not_done,
               &start,
               &not_done,
               &flags);
   its += 1;

      //DBM ("Start %08p, remaining %08x (C %08x)\n", start, not_done, flags & _C);

      //DBM ("Done block of %d samples, remaining %08x\n", to_do, not_done);

  } while (flags & _C);

  //displayfield_set_value(0,id,0,ctime(&t));

  slider_set_value(0,win,cBAR,(int)ftell(in_handle)/onepc);
  fprintf(stderr,"%i\n",(int)ftell(in_handle)/onepc);
  //fprintf(stderr,"%i %i\n",length,ftell(in_handle)); 

  /* set another alarm for ourselves */
  alarm_set(alarm_timenow()+2,fillup,0);
}


int file_loader(WimpMessage *message, void *handle)
{
  WimpMessage msg;

  msg = *message;

  if(!win)
  {
    msg.hdr.your_ref = msg.hdr.my_ref;
  
    if (message->hdr.action_code == Wimp_MDataLoad)
        msg.hdr.action_code = Wimp_MDataLoadAck;
    wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0); 
    toolbox_create_object(0,"Window",&win);
    toolbox_show_object(0, win, 0, 0, 0, 0);
    displayfield_set_value(0,win,cFILE,msg.data.data_load_ack.leaf_name);
  } else {
    werr(FALSE,"Close the existing AudioTest window before dragging another file");
  }  
  
  return 1;
}

/* --- Initialise toolbox resources --- */
static void initialise (void)
{
  _kernel_oserror *e;

  if ((e = toolbox_initialise (0, 310, message_list, event_list,
       "<AudioTest$Dir>", &mfd, &id_blk, NULL, NULL, NULL)) != NULL) {
     raise_error (e);
     exit (1); /* Fatal */
  }

  event_initialise (&id_blk); /* this leaves us our id */
  event_set_mask (1+256);

  /* - register event handlers - */

  /* these two are self explanatory */
  event_register_toolbox_handler(-1, Toolbox_Error, error_handler, NULL);
  event_register_toolbox_handler(-1, Window_HasBeenHidden, window_hidden, NULL);
  event_register_message_handler(Wimp_MQuit, wimp_quit, NULL);
  event_register_message_handler(Wimp_MDataLoad,file_loader,0);
  event_register_toolbox_handler(-1, QUIT, menu_quit, NULL);
  event_register_toolbox_handler(-1, PLAY, audiotest_play, NULL);
  event_register_toolbox_handler(-1, PAUSE, audiotest_pause, NULL);
  event_register_toolbox_handler(-1, STOP, audiotest_stop, NULL);

  event_register_toolbox_handler(-1, ProgInfo_AboutToBeShown,proginfo_show,0);

  atexit(exithandler);

  alarm_init();
}

/* --- main routine --- */

int main (void)
{
   int event_code;

   initialise();

   /* Poll loop - never catches anything because we rely on
      registered handlers */

   while (1)
      alarm_event_poll(&event_code, &poll_block, NULL);
}
