#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "toolbox.h"
#include "wimplib.h"
#include "event.h"

#include "tplus.h"

extern MessagesFD mfd;

void msgs_flookup (char *token, char *buffer, int buffer_size, char *par1, char *par2, char *par3, char *par4, char **new_buffer, int *new_buffer_size);
char *msgs_lookup(char *token);

void raise_error (_kernel_oserror *e)
{
  _kernel_swi_regs regs;

  if(!e)
    return;

  /* Generate the error */
  regs.r[0] = (int) e;
  regs.r[1] = 16;
  regs.r[2] = (int)msgs_lookup("_TaskName");

  _kernel_swi (Wimp_ReportError, &regs, &regs);
}

void msgs_flookup (char *token, char *buffer, int buffer_size, char *par1, char *par2, char *par3, char *par4, char **new_buffer, int *new_buffer_size) {

   /* Looks up token and passes back appropriate message */

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;

   regs.r[0] = (int)  &mfd;
   regs.r[1] = (int)  token;
   regs.r[2] = (int)  buffer;
   regs.r[3] =        buffer_size;
   regs.r[4] = (int)  par1;
   regs.r[5] = (int)  par2;
   regs.r[6] = (int)  par3;
   regs.r[7] = (int)  par4;

   if ((e = _kernel_swi (MessageTrans_Lookup, &regs, &regs)) != NULL)
      raise_error (e);

   if (new_buffer) {
      *new_buffer      = (char *) regs.r[2];
   }
   if (new_buffer_size) {
      *new_buffer_size = regs.r[3];
   }
}

char *_msgbufs[10]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
static int  _msgbuf=0;

char *msgs_lookup(char *token)
{
  char *strng;
  int omb;
  char *x;
  int len=1;
  msgs_flookup(token, 0, 0, 0, 0, 0, 0, &strng, 0);
  if(strng==NULL)
    return(token);

  if(_msgbufs[_msgbuf]!=NULL)
    free(_msgbufs[_msgbuf]);

  x=strng;
  while(!iscntrl(*x)) {
    ++x; ++len;
  }

  _msgbufs[_msgbuf]=malloc(strlen(strng)+1);
  if(_msgbufs[_msgbuf]==NULL)
    return token;

  strcpy(_msgbufs[_msgbuf],strng);

  omb=_msgbuf;
  ++_msgbuf;
  if(_msgbuf==10)
    _msgbuf=0;

  x=_msgbufs[omb];

  while(!iscntrl(*x))
    ++x;

  *x='\0';

  return _msgbufs[omb];
}

void werr(int fatal, char* format, ...)
{
  _kernel_swi_regs regs;
  va_list va;
  _kernel_oserror e;

  e.errnum = 0;
  va_start(va, format);
  vsprintf(&e.errmess[0], format, va);
  va_end(va);

  /* Generate the error */
  regs.r[0] = (int) &e;
  regs.r[1] = 16;
  regs.r[2] = (int)msgs_lookup("_TaskName");

  _kernel_swi (Wimp_ReportError, &regs, &regs);

  if(fatal)
    exit(1);
}
