; > veneers.s

; © SJ Middleton, 1995

		GET	os:hdr.macros
		GET	hdr.soundfile

		AREA	|Veneers$$CODE|,CODE,READONLY

 [ {FALSE}

; sound_linearhandler enters here

; r0 = data value passed to SWI
; r1 -> buffer for sound data
; r2 -> end of buffer
; r3 = flags
; r4 = sample frequency << 10

; IRQ or SVC mode, interrupts undefined
; can corrupt r0-r10
; preserve r11,r12,r13

		^ 0
o_vol_l		#	4
o_vol_r		#	4
o_step		#	4
o_phase		#	4
o_data		#	4
o_fn		#	4

		EXPORT	linear_handler_veneer1

linear_handler_veneer1
		STMFD	sp!, {r12,lr}

		MOVS	lr, pc
		LDR	pc, [r0, #o_fn]

		LDMFD	sp!, {r12,pc}^

 ]

; r0 = soundfile_format
; r1 = address of handler
; r2 = r12 for handler

; extern os_error *call_dispose_handler(soundfile_format *fmt, void *handler, byte *r12)

		EXPORT	call_dispose_handler
call_dispose_handler
		STMFD	sp!, {r1-r12,lr}

		MOV	r12, r2

		ClrV
		MOVS	lr, pc
		MOV	pc, r1

		MOVVC	r0, #0

		LDMFD	sp!, {r1-r12,pc}^


; r0 = in
; r1 = out
; r2 = nbytes
; r3 = soundfile_format
; [sp, #0] -> used out

; extern os_error *call_to16_handler(const void *in, void *out, int nbytes, soundfile_format *fmt)

		EXPORT	call_to16_handler
call_to16_handler
		STMFD	sp!, {r1-r12,lr}

    	    	LDR 	r12, [r3, #SoundFile_Format_handler_r12]

		ClrV
		MOVS	lr, pc
		LDR	pc, [r3, #SoundFile_Format_to16_handler]
		MOVVC	r0, #0

    	    	LDR 	r3, [sp, #4*13]	; address of out variable
    	    	CMP 	r3, #0
    	    	LDRNE 	r2, [sp, #0]	; original out value
    	    	SUBNE 	r1, r1, r2  	; n bytes written out
    	    	STRNE 	r1, [r3]

		LDMFD	sp!, {r1-r12,pc}^

		END

eof veneers.s
