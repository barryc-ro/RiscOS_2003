; > s.ur16to16

		GET	hdr:ListOpts
		GET	hdr:Macros
                GET     hdr:APCS.<APCS>
		GET	hdr:System

		MACRO
$l		SwapEnd	$reg, $mask, $tmp
$l		AND	$tmp, $reg, $mask
		AND	$reg, $mask, $reg, LSR #8
		ORR	$reg, $reg, $tmp, LSL #8
		EOR	$reg, $reg, r10
		MEND

; r0 -> input data (word-aligned)
; r1 -> output data (word-aligned)
; r2 = number of bytes
; r14 = return address

; update r0 and r1 on output
; preserve all other registers

		AREA	|snd$$ASM|,CODE,READONLY

		IMPORT	check_interleave

		EXPORT	snd_UR16To16
		EXPORT	snd_R16To16

snd_R16To16
                FunctionEntry "a1-a2,a4,v1-v6,sl,fp"
		MOV	r10, #0
		B	To16

snd_UR16To16
                FunctionEntry "a1-a2,a4,v1-v6,sl,fp"

		MOV	r10, #&8000
		ORR	r10, r10, r10, LSL #16

To16
		MOV	r7, #&ff
		ORR	r7, r7, r7, LSL #16

		MOV	r8, r2, ASR #1		; total samples

		; do in blocks of 16

00		CMP	r8, #8
		BLT	%ft90

		LDMIA	r0!, {r3-r6}
		SwapEnd	r3, r7, lr
		SwapEnd	r4, r7, lr
		SwapEnd	r5, r7, lr
		SwapEnd	r6, r7, lr
		STMIA	r1!, {r3-r6}

		SUBS	r8, r8, #8
		BGT	%bt00

		B	check_interleave

; finish off 1 by 1

90		LDRB	r3, [r0], #1
		LDRB	r4, [r0], #1
		STRB	r4, [r1], #1
		EOR	r3, r3, r10, LSR #8
		STRB	r3, [r1], #1

		SUBS	r8, r8, #1
		BGT	%bt90

		B	check_interleave

		END

eof s.ur16to16
