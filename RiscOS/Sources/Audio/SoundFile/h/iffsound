/* > iffsound.h

 * © SJ Middleton, 1992

 * Header information for AIFF, 8SVX and .WAV sound files

 */

#ifndef __iffsound_h
# define __iffsound_h

#ifndef __stream_h
# include "stream.h"
#endif

/* -------------------------------------------------------------------------------------------------- */

#define MakeID(a,b,c,d)	((a) | ((b) << 8) | ((c) << 16) | ((d) << 24))

/* group types */

/* IFF */

#define ID_FORM		MakeID('F','O','R','M')
#define ID_CAT		MakeID('C','A','T',' ')
#define ID_LIST		MakeID('L','I','S','T')
#define ID_PROP		MakeID('P','R','O','P')

/* RIFF */

#define ID_RIFF		MakeID('R','I','F','F')

/* ------------------------------------------------------------------------------------------ */

/* AIFF files */

#define ID_AIFF     MakeID('A','I','F','F')
#define ID_AIFC     MakeID('A','I','F','C')

#define ID_COMM     MakeID('C','O','M','M')
#define ID_INST     MakeID('I','N','S','T')
#define ID_SSND     MakeID('S','S','N','D')
#define ID_FVER     MakeID('F','V','E','R')
#define ID_SAXL     MakeID('S','A','X','L')

typedef struct
{
    char    numChannels[2],
            numSampleFrames[4],
            sampleSize[2],
            sampleRate[10];
} AIFFCommonChunk;

typedef struct
{
    unsigned long   offset,
                    blockSize;
/*  char            soundData[] */
} AIFFSoundDataHdr;

typedef struct
{
    unsigned long timestamp;        /* identifies version as shown below */
} AIFFVersion;

#define AIFCVersion1    0xA2805140

typedef struct
{
    char    numChannels[2],
            numSampleFrames[4],
            sampleSize[2],          /* number of bits in a sample point */
            sampleRate[10],         /* IEEE extended precision number in sample frames per second */
            compressionType[4];     /* as shown below */
/*  pstring compressionName; */
} AIFCCommonChunk;

#define aCmpNone    MakeID('N','O','N','E')
#define aCmpACE2    MakeID('A','C','E','2')
#define aCmpACE8    MakeID('A','C','E','8')
#define aCmpMAC3    MakeID('M','A','C','3')
#define aCmpMAC6    MakeID('M','A','C','6')

/* ------------------------------------------------------------------------------------------ */
/* 8SVX files */

#define ID_8SVX     MakeID('8','S','V','X')

#define ID_VHDR     MakeID('V','H','D','R')
#define ID_BODY     MakeID('B','O','D','Y')
#define ID_NAME     MakeID('N','A','M','E')
#define ID_ANNO     MakeID('A','N','N','O')

#define sCmpNone        0
#define sCmpFibDelta    1

typedef struct
{
    unsigned long   oneShotHiSamples,
                    repeatHiSamples,
                    samplesPerHiCycle;
    unsigned short  samplesPerSec;
    char            ctOctaves,
                    sCompression;
    long            volume;
} Voice8Header;

/* ------------------------------------------------------------------------------------------ */
/* .WAV files */

#define ID_WAVE MakeID('W','A','V','E')

#define ID_wavl MakeID('w','a','v','l')     /* list type */
#define ID_adtl MakeID('a','d','t','l')     /* list type */

#define ID_fmt  MakeID('f','m','t',' ')     /* chunk types */
#define ID_data MakeID('d','a','t','a')
#define ID_fact MakeID('f','a','c','t')
#define ID_slnt MakeID('s','l','n','t')
#define ID_cue  MakeID('c','u','e',' ')
#define ID_plst MakeID('p','l','s','t')
#define ID_labl MakeID('l','a','b','l')
#define ID_note MakeID('n','o','t','e')
#define ID_ltxt MakeID('l','t','x','t')
#define ID_file MakeID('f','i','l','e')

typedef struct                      /* used for WAVE_FORMAT_PCM only */
{
    short       FormatTag,
                Channels;
    long int    SamplesPerSec,      /* real sample rate */
                AvgBytesPerSec;     /* for buffer estimation */
    short       BlockAlign;         /* data block size */

    short       BitsPerSample;
} WaveFmtChunk;

typedef struct                      /* used for all other wave types only */
{
    short       FormatTag,
                Channels;
    long int    SamplesPerSec,      /* real sample rate */
                AvgBytesPerSec;     /* for buffer estimation */
    short       BlockAlign;         /* data block size */

    short       BitsPerSample;      /* for format = 0x001 */
    short       Size;               /* The count in bytes of the size of extra info */
} WaveFmtExChunk;

typedef struct                      /* used for all other wave types only */
{
    short       FormatTag,
                Channels;
    long int    SamplesPerSec,      /* real sample rate */
                AvgBytesPerSec;     /* for buffer estimation */
    short       BlockAlign;         /* data block size */

    short       BitsPerSample;      /* for format = 0x001 */
    short       Size;               /* The count in bytes of the size of extra info */

    short       SamplesPerBlock;
    short       NumCoef;

    short       Coef[1];
} ADPCMWaveFormat;

typedef struct
{
    short iCoef1;
    short iCoef2;
} ADPCMCoefSet;

#define WAVE_FORMAT_UNKNOWN         (0x0000)
#define WAVE_FORMAT_PCM             (0x0001)
#define WAVE_FORMAT_ADPCM           (0x0002)
#define WAVE_FORMAT_IBM_CVSD        (0x0005)
#define WAVE_FORMAT_ALAW            (0x0006)
#define WAVE_FORMAT_MULAW           (0x0007)
#define WAVE_FORMAT_OKI_ADPCM       (0x0010)
#define WAVE_FORMAT_DVI_ADPCM       (0x0011)
#define WAVE_FORMAT_DIGISTD         (0x0015)
#define WAVE_FORMAT_DIGIFIX         (0x0016)
#define WAVE_FORMAT_YAMAHA_ADPCM    (0x0020)

#define IBM_FORMAT_MULAW    0x0101
#define IBM_FORMAT_ALAW     0x0102
#define IBM_FORMAT_ADPCM    0x0103

/*
 * data is packed little-endian, interleaved by samples,
 * block alignment is by sample frames.
 * samples are stored in whole numbers of bytes only left-justified.

 * 1-8 bits are unsigned
 * 9+ bits are signed
 */

typedef struct
{
    long int    Samples;            /* nsamples of silence to insert */
} WaveSilenceChunk;

typedef struct
{
    long int    FileSize;           /* total number of samples in file */
} WaveFactChunk;

typedef struct
{
    long int    Name,           /* each record must have a unique name */
                Position;       /* sample position of cue within play order */
    char        Chunk[4];       /* chunk ID if chunk containing cue point */
    long int    ChunkStart,     /* byte offset of chunk from start of data section of 'wavl' chunk */
                BlockStart,     /* byte offset of block from start of data section of 'wavl' chunk */
                SampleOffset;   /* sample offset from start of block */
} WaveCuePoint;

typedef struct
{
    long int        CuePoints;
/*  WaveCuePoint    data[]; */
} WaveCueChunk;

typedef struct
{
    long int    Name,       /* cue point name as specified above */
                Length,     /* length of section in samples */
                Loop;       /* number of times to play section */
} WavePlaySegment;

typedef struct
{
    long int        Segments;
/*  WavePlaySegment data[]; */
} WavePlaylistChunk;

typedef struct
{
    long int    Name;               /* a cue point name */
/*  char        string[] */         /* label to attach to cue point */
} WaveLabelChunk;

typedef struct
{
    long int    Name,               /* a cue point name */
                SampleLength,
                Purpose;
    short       Country,
                Language,
                Dialect,
                CodePage;
/*  char        data[] */
} WaveLabeltextChunk;

typedef struct
{
    long int    Name,
                MediaType;
/*  char        data[] */
} WaveFileChunk;

/* ------------------------------------------------------------------------------------------ */

typedef os_error *(*iff_fn)(stream_id stream, int type, int id, int size, void *handle);

extern os_error *iff_process_level(stream_id stream, bool RIFFnIFF, int level_size, iff_fn procfn, void *handle);

#define IFF_ABORT_SCAN	((os_error *)-1)

/* -------------------------------------------------------------------------------------------------- */

#endif

/* eof iffsound.h */
