#ifndef soundfile_H
#define soundfile_H

/* C header file for SoundFile
 * written by DefMod (Aug 30 1995) on Mon May 13 15:49:10 1996
 * Simon Middleton, Uniqueway Ltd.
 */

#ifndef types_H
#include "types.h"
#endif

#ifndef os_H
#include "os.h"
#endif

#ifndef osgbpb_H
#include "osgbpb.h"
#endif

/**********************************
 * SWI names and SWI reason codes *
 **********************************/
#undef  SoundFile_Open
#define SoundFile_Open                          0x4AEC0
#undef  XSoundFile_Open
#define XSoundFile_Open                         0x6AEC0
#undef  SoundFile_Close
#define SoundFile_Close                         0x4AEC1
#undef  XSoundFile_Close
#define XSoundFile_Close                        0x6AEC1
#undef  SoundFile_ReadData
#define SoundFile_ReadData                      0x4AEC2
#undef  XSoundFile_ReadData
#define XSoundFile_ReadData                     0x6AEC2
#undef  SoundFile_MiscOp
#define SoundFile_MiscOp                        0x4AEC3
#undef  XSoundFile_MiscOp
#define XSoundFile_MiscOp                       0x6AEC3
#undef  SoundFileMiscOp_ReturnTable
#define SoundFileMiscOp_ReturnTable             0x0
#undef  SoundFileMiscOp_ReturnHandles
#define SoundFileMiscOp_ReturnHandles           0x1
#undef  Service_SoundFileIdentify
#define Service_SoundFileIdentify               0x80380

/************************************
 * Structure and union declarations *
 ************************************/
typedef struct soundfile_id_                    *soundfile_id;
typedef struct soundfile_format                 soundfile_format;
typedef struct soundfile_wave_format_chunk      soundfile_wave_format_chunk;
typedef struct soundfile_stream                 soundfile_stream;
typedef struct soundfile_open_handle_info       soundfile_open_handle_info;
typedef struct soundfile_open_buffer_info       soundfile_open_buffer_info;

/********************
 * Type definitions *
 ********************/
typedef bits soundfile_format_flags;

struct soundfile_format
   {  soundfile_format_flags flags;
      int source;
      byte n_bits;
      byte n_channels;
      byte sample_period;
      byte channel_interleave;
      int data_format;
      int sample_rate;
      int n_samples;
      int data_offset;
      int data_length;
      int block_align;
      int min_chunk_size;
      int sample_max_size;
      int info_offset;
      byte *handler_r12;
      void *load_data_handler;
      void *to16_handler;
      void *dispose_handler;
      int reserved [8];
      int format_specific_data [8];
      char format_name [24];
      char compression_name [24];
      char comment [80];
   };

struct soundfile_wave_format_chunk
   {  short format_tag;
      short n_channels;
      int samples_per_sec;
      int avg_bytes_per_sec;
      short block_align;
      short bits_per_sample;
      short size;
      byte extra_data [UNKNOWN];
   };

typedef bits soundfile_open_flags;

struct soundfile_stream
   {  soundfile_open_flags flags;
      int current_pos;
      byte *buffer;
      int buffer_size;
      os_f file_handle;
      byte reserved [3];
      char *file_name;
   };

struct soundfile_open_handle_info
   {  os_f handle;
      byte reserved [3];
      osgbpb_info_stamped info;
   };

struct soundfile_open_buffer_info
   {  byte *data;
      int size;
      osgbpb_info_stamped info;
   };

typedef bits soundfile_close_flags;

typedef bits soundfile_read_data_flags;

typedef bits soundfile_misc_op_flags;

typedef bits soundfile_service_identify_flags;

/************************
 * Constant definitions *
 ************************/
#define soundfile_UNKNOWN_FORMAT                (-1)
#define soundfile_8BIT_LINEAR                   0
#define soundfile_8BIT_VIDC                     1
#define soundfile_8BIT_MU_LAW                   2
#define soundfile_8BIT_ALAW                     3
#define soundfile_12_BIT_LINEAR                 4
#define soundfile_16_BIT_LINEAR                 5
#define soundfile_16_BIT_LINEAR_BIG_ENDIAN      6
#define soundfile_DATA_IS_UNSIGNED              ((soundfile_format_flags) 0x1u)
#define soundfile_STEREO_REVERSED               ((soundfile_format_flags) 0x2u)
#define soundfile_UNSUPPORTED_DATA_FORMAT       ((soundfile_format_flags) 0x4u)
#define soundfile_SAMPLE_RATE_SHIFT             10
#define soundfile_SAMPLE_MAX_SIZE_SHIFT         16
#define error_SOUND_FILE_BASE                   0x80DA00u
#define error_SOUND_FILE_UNKNOWN                0x80DA00u
#define error_SOUND_FILE_UNSUPPORTED_COMPRESSION 0x80DA01u
#define error_SOUND_FILE_INVALID_HANDLE         0x80DA02u
#define error_SOUND_FILE_BAD_IFF                0x80DA03u
#define error_SOUND_FILE_NO_INFO                0x80DA04u
#define error_SOUND_FILE_NO_DATA                0x80DA05u
#define error_SOUND_FILE_BAD_VOC                0x80DA06u
#define error_SOUND_FILE_BAD_AUDIOWORKS         0x80DA07u
#define error_SOUND_FILE_OUT_OF_DATA            0x80DA08u
#define error_SOUND_FILE_CANT_KILL              0x80DA09u
#define osfile_TYPE_ARMSAMP                     0xD3Cu
#define osfile_TYPE_AIFF                        0xFC2u
#define osfile_TYPE_WAVEFORM                    0xFB1u
#define osfile_TYPE_STSAMPLE                    0xCB5u
#define osfile_TYPE_SOUNDLIB                    0xC47u
#define osfile_TYPE_AUDIOWORKS                  0xBD6u
#define osfile_TYPE_DATAVOX                     0x108u
#define soundfile_TYPE_VOC                      0x20434F56u
#define soundfile_TYPE_AU                       0x20205541u
#define soundfile_TYPE_8SVX                     0x58565338u
#define soundfile_TYPE_PSION_S3A                0x6F697350u
#define soundfile_OPEN_TYPE                     ((soundfile_open_flags) 0x3u)
#define soundfile_OPEN_TYPE_FILE_NAME           0
#define soundfile_OPEN_TYPE_FILE_HANDLE         1
#define soundfile_OPEN_TYPE_BUFFER              2
#define soundfile_OPEN_SET_FORMAT               ((soundfile_open_flags) 0x4u)
#define soundfile_OPEN_IDENTIFY_ONLY            ((soundfile_open_flags) 0x8u)
#define soundfile_READ_DATA_AS16_BIT            ((soundfile_read_data_flags) 0x1u)

/*************************
 * Function declarations *
 *************************/

#ifdef __cplusplus
   extern "C" {
#endif

/* ------------------------------------------------------------------------
 * Function:      soundfile_open()
 *
 * Description:   Try to identify or explicitly set the format of a sound
 *                file
 *
 * Input:         flags - value of R0 on entry
 *                filename - value of R1 on entry
 *                format - value of R2 on entry
 *
 * Output:        id - value of R0 on exit (X version only)
 *                stream - value of R1 on exit
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x4AEC0.
 */

extern os_error *xsoundfile_open (soundfile_open_flags flags,
      char const *filename,
      soundfile_format *format,
      soundfile_id *id,
      soundfile_stream **stream);
extern soundfile_id soundfile_open (soundfile_open_flags flags,
      char const *filename,
      soundfile_format *format,
      soundfile_stream **stream);

/* ------------------------------------------------------------------------
 * Function:      soundfile_close()
 *
 * Description:   Close a sound file
 *
 * Input:         flags - value of R0 on entry
 *                id - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x4AEC1.
 */

extern os_error *xsoundfile_close (soundfile_close_flags flags,
      soundfile_id id);
__swi (0x4AEC1) void soundfile_close (soundfile_close_flags flags,
      soundfile_id id);

/* ------------------------------------------------------------------------
 * Function:      soundfile_read_data()
 *
 * Description:   Read sound data, optionally translating to 16bit linear
 *
 * Input:         flags - value of R0 on entry
 *                id - value of R1 on entry
 *                buffer - value of R2 on entry
 *                n_samples - value of R3 on entry
 *                sample_index - value of R4 on entry
 *
 * Output:        updated_buffer - value of R2 on exit
 *                updated_n_samples - value of R3 on exit
 *                updated_sample_index - value of R4 on exit
 *
 * Other notes:   Calls SWI 0x4AEC2.
 */

extern os_error *xsoundfile_read_data (soundfile_read_data_flags flags,
      soundfile_id id,
      byte *buffer,
      int n_samples,
      int sample_index,
      byte **updated_buffer,
      int *updated_n_samples,
      int *updated_sample_index);
extern void soundfile_read_data (soundfile_read_data_flags flags,
      soundfile_id id,
      byte *buffer,
      int n_samples,
      int sample_index,
      byte **updated_buffer,
      int *updated_n_samples,
      int *updated_sample_index);

/* ------------------------------------------------------------------------
 * Function:      soundfilemiscop_return_table()
 *
 * Description:   Return pointer to a sample lookup table
 *
 * Input:         flags - value of R0 on entry
 *                data_format - value of R1 on entry
 *
 * Output:        table - value of R0 on exit
 *
 * Other notes:   Calls SWI 0x4AEC3 with R0 |= 0x0.
 */

extern os_error *xsoundfilemiscop_return_table (soundfile_misc_op_flags flags,
      int data_format,
      short **table);
extern void soundfilemiscop_return_table (soundfile_misc_op_flags flags,
      int data_format,
      short **table);

/* ------------------------------------------------------------------------
 * Function:      soundfilemiscop_return_handles()
 *
 * Description:   Convert ID to handles
 *
 * Input:         flags - value of R0 on entry
 *                id - value of R1 on entry
 *
 * Output:        format - value of R0 on exit
 *                stream - value of R1 on exit
 *
 * Other notes:   Calls SWI 0x4AEC3 with R0 |= 0x1.
 */

extern os_error *xsoundfilemiscop_return_handles (soundfile_misc_op_flags flags,
      soundfile_id id,
      soundfile_format **format,
      soundfile_stream **stream);
extern void soundfilemiscop_return_handles (soundfile_misc_op_flags flags,
      soundfile_id id,
      soundfile_format **format,
      soundfile_stream **stream);

/* ------------------------------------------------------------------------
 * Function:      service_sound_file_identify()
 *
 * Description:   Attempting to load unknown sound file type
 *
 * Input:         flags - value of R0 on entry
 *                stream - value of R2 on entry
 *                info - value of R3 on entry
 *                format - value of R4 on entry
 *
 * Output:        e_return - value of R0 on exit
 *                unclaimed - value of R1 on exit (X version only)
 *
 * Returns:       R1 (non-X version only)
 *
 * Other notes:   Calls SWI 0x30 with R1 = 0x80380.
 */

extern os_error *xservice_sound_file_identify (soundfile_service_identify_flags flags,
      soundfile_stream const *stream,
      osgbpb_info_stamped const *info,
      soundfile_format const *format,
      os_error **e_return,
      bool *unclaimed);
extern bool service_sound_file_identify (soundfile_service_identify_flags flags,
      soundfile_stream const *stream,
      osgbpb_info_stamped const *info,
      soundfile_format const *format,
      os_error **e_return);

#ifdef __cplusplus
   }
#endif

#endif
