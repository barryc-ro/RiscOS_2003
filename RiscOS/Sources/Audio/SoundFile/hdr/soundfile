;Assembler header file for SoundFile
;written by DefMod (Jun 30 1995) on Mon May 13 15:49:08 1996
;Simon Middleton, Uniqueway Ltd.

        [       :LNOT: :DEF: Get_Types
        GBLS    Get_Types
        ]
        [       :LNOT: :DEF: Types_Hdr
Get_Types                       SETS    "GET OS:Hdr.Types"
        |
Get_Types                       SETS    ""
        ]
        $Get_Types

        [       :LNOT: :DEF: Get_OS
        GBLS    Get_OS
        ]
        [       :LNOT: :DEF: OS_Hdr
Get_OS                          SETS    "GET OS:Hdr.OS"
        |
Get_OS                          SETS    ""
        ]
        $Get_OS

        [       :LNOT: :DEF: Get_OSGBPB
        GBLS    Get_OSGBPB
        ]
        [       :LNOT: :DEF: OSGBPB_Hdr
Get_OSGBPB                      SETS    "GET OS:Hdr.OSGBPB"
        |
Get_OSGBPB                      SETS    ""
        ]
        $Get_OSGBPB

        [       :LNOT: :DEF: SoundFile_Hdr
        GBLS    SoundFile_Hdr

;Symbols for constants
SoundFile_UnknownFormat         *       -1
SoundFile_8BitLinear            *       0
SoundFile_8BitVIDC              *       1
SoundFile_8BitMuLaw             *       2
SoundFile_8BitALaw              *       3
SoundFile_12BitLinear           *       4
SoundFile_16BitLinear           *       5
SoundFile_16BitLinearBigEndian  *       6
SoundFile_DataIsUnsigned        *       &1
SoundFile_StereoReversed        *       &2
SoundFile_UnsupportedDataFormat *       &4
SoundFile_SampleRateShift       *       10
SoundFile_SampleMaxSizeShift    *       16
Error_SoundFileBase             *       &80DA00
Error_SoundFileUnknown          *       &80DA00
Error_SoundFileUnsupportedCompression *       &80DA01
Error_SoundFileInvalidHandle    *       &80DA02
Error_SoundFileBadIFF           *       &80DA03
Error_SoundFileNoInfo           *       &80DA04
Error_SoundFileNoData           *       &80DA05
Error_SoundFileBadVOC           *       &80DA06
Error_SoundFileBadAudioworks    *       &80DA07
Error_SoundFileOutOfData        *       &80DA08
Error_SoundFileCantKill         *       &80DA09
osfile_TypeArmsamp              *       &D3C
osfile_TypeAIFF                 *       &FC2
osfile_TypeWaveform             *       &FB1
osfile_TypeStsample             *       &CB5
osfile_TypeSoundlib             *       &C47
osfile_TypeAudioworks           *       &BD6
osfile_TypeDatavox              *       &108
soundfile_TypeVOC               *       &20434F56
soundfile_TypeAU                *       &20205541
soundfile_Type_8SVX             *       &58565338
soundfile_TypePsionS3a          *       &6F697350
SoundFile_OpenType              *       &3
SoundFile_OpenTypeFileName      *       0
SoundFile_OpenTypeFileHandle    *       1
SoundFile_OpenTypeBuffer        *       2
SoundFile_OpenSetFormat         *       &4
SoundFile_OpenIdentifyOnly      *       &8
SoundFile_ReadDataAs16Bit       *       &1

;Symbols for structure offsets and sizes
SoundFile_FormatFlags           *       Bits

SoundFile_ID                    *       4 ;abstract type
                                ^       0
SoundFile_Format_flags          #       SoundFile_FormatFlags
SoundFile_Format_source         #       Int
SoundFile_Format_n_bits         #       Byte
SoundFile_Format_n_channels     #       Byte
SoundFile_Format_sample_period  #       Byte
SoundFile_Format_channel_interleave #       Byte
SoundFile_Format_data_format    #       Int
SoundFile_Format_sample_rate    #       Int
SoundFile_Format_n_samples      #       Int
SoundFile_Format_data_offset    #       Int
SoundFile_Format_data_length    #       Int
SoundFile_Format_block_align    #       Int
SoundFile_Format_min_chunk_size #       Int
SoundFile_Format_sample_max_size #       Int
SoundFile_Format_info_offset    #       Int
SoundFile_Format_handler_r12    #       Ptr
SoundFile_Format_load_data_handler #       Ptr
SoundFile_Format_to16_handler   #       Ptr
SoundFile_Format_dispose_handler #       Ptr
SoundFile_Format_reserved       #       8*Int
SoundFile_Format_format_specific_data #       8*Int
SoundFile_Format_format_name    #       24*Char
SoundFile_Format_compression_name #       24*Char
SoundFile_Format_comment        #       80*Char
SoundFile_Format                *       @

                                ^       0
SoundFile_WaveFormatChunk_format_tag #       Short
SoundFile_WaveFormatChunk_n_channels #       Short
SoundFile_WaveFormatChunk_samples_per_sec #       Int
SoundFile_WaveFormatChunk_avg_bytes_per_sec #       Int
SoundFile_WaveFormatChunk_block_align #       Short
SoundFile_WaveFormatChunk_bits_per_sample #       Short
SoundFile_WaveFormatChunk_size  #       Short
SoundFile_WaveFormatChunk_extra_data #       Skip
SoundFile_WaveFormatChunk       *       @

SoundFile_OpenFlags             *       Bits

                                ^       0
SoundFile_Stream_flags          #       SoundFile_OpenFlags
SoundFile_Stream_current_pos    #       Int
SoundFile_Stream_buffer         #       Ptr
SoundFile_Stream_buffer_size    #       Int
SoundFile_Stream_file_handle    #       OS_F
SoundFile_Stream_reserved       #       3*Byte
SoundFile_Stream_file_name      #       Ptr
SoundFile_Stream                *       @

                                ^       0
SoundFile_OpenHandleInfo_handle #       OS_F
SoundFile_OpenHandleInfo_reserved #       3*Byte
SoundFile_OpenHandleInfo_info   #       OSGBPB_InfoStamped
SoundFile_OpenHandleInfo        *       @

                                ^       0
SoundFile_OpenBufferInfo_data   #       Ptr
SoundFile_OpenBufferInfo_size   #       Int
SoundFile_OpenBufferInfo_info   #       OSGBPB_InfoStamped
SoundFile_OpenBufferInfo        *       @

SoundFile_CloseFlags            *       Bits

SoundFile_ReadDataFlags         *       Bits

SoundFile_MiscOpFlags           *       Bits

SoundFile_ServiceIdentifyFlags  *       Bits


;Symbols for SWI's and SWI reason codes
XSoundFile_Open                 *       &6AEC0
SoundFile_Open                  *       &4AEC0
   ;Entry
   ;  R0 = flags (SoundFile_OpenFlags)
   ;  R1 -> filename (String)
   ;  R2 = format (pointer to SoundFile_Format)
   ;Exit
   ;  R0 = id (SoundFile_ID)
   ;  R1 -> stream (SoundFile_Stream)

XSoundFile_Close                *       &6AEC1
SoundFile_Close                 *       &4AEC1
   ;Entry
   ;  R0 = flags (SoundFile_CloseFlags)
   ;  R1 = id (SoundFile_ID)

XSoundFile_ReadData             *       &6AEC2
SoundFile_ReadData              *       &4AEC2
   ;Entry
   ;  R0 = flags (SoundFile_ReadDataFlags)
   ;  R1 = id (SoundFile_ID)
   ;  R2 = buffer (pointer to data)
   ;  R3 = n_samples (Int)
   ;  R4 = sample_index (Int)
   ;Exit
   ;  R2 = updated_buffer (pointer to data)
   ;  R3 = updated_n_samples (Int)
   ;  R4 = updated_sample_index (Int)

XSoundFile_MiscOp               *       &6AEC3
SoundFile_MiscOp                *       &4AEC3

SoundFileMiscOp_ReturnTable     *       &0
   ;Entry
   ;  R0 = &0 :OR: flags (SoundFile_MiscOpFlags)
   ;  R1 = data_format (Int)
   ;Exit
   ;  R0 -> table (Short)

SoundFileMiscOp_ReturnHandles   *       &1
   ;Entry
   ;  R0 = &1 :OR: flags (SoundFile_MiscOpFlags)
   ;  R1 = id (SoundFile_ID)
   ;Exit
   ;  R0 -> format (SoundFile_Format)
   ;  R1 -> stream (SoundFile_Stream)

Service_SoundFileIdentify       *       &80380
   ;Entry
   ;  R0 = flags (SoundFile_ServiceIdentifyFlags)
   ;  R1 = &80380
   ;  R2 -> stream (SoundFile_Stream)
   ;  R3 -> info (OSGBPB_InfoStamped)
   ;  R4 -> format (SoundFile_Format)
   ;Exit
   ;  R0 -> e_return (OS_Error)
   ;  R1 = unclaimed (Bool)

        ]
        END
