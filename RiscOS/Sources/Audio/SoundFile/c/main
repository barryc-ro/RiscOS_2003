/* Title:   main.c
 * Purpose: main module of SoundFile module
 * Author:  SJM
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "os.h"
#include "osmodule.h"
#include "resourcefs.h"

#include "modhdr.h"
#include "resources.h"
#include "msgs.h"

#include "sf.h"

#define VERSION_NUMBER	Module_VersionNumber  	/* keep up to data with modhdr */

#if ROM
#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43

static bool tinysupport_used = FALSE;
#endif

/* ++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++ */

_kernel_oserror *soundfile_final (int fatal, int podule, void *pw)
{
    os_error *e;

    e = sf_can_kill();
    if (!e) e = msgs_close();
    if (!e) e = de_register_resources();

#if ROM
    if (!e && tinysupport_used)
        _swix(TinySupport_Die, 0);
#endif

    return (_kernel_oserror *)e;

    NOT_USED(fatal);
    NOT_USED(podule);
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

_kernel_oserror *soundfile_init(const char *cmd_tail, int podule_base, void *pw)
{
    os_error *e;

    e = register_resources();
    if (!e)
    {
        e = msgs_init("Resources:$.Resources.SoundFile.Messages");
        if (e) de_register_resources();
    }

#if ROM
    if (!e) tinysupport_used = _swix(TinySupport_Share, _IN(0), pw) == NULL;
#endif
    return (_kernel_oserror *)e;

    NOT_USED(cmd_tail);
    NOT_USED(podule_base);
    NOT_USED(pw);
}

/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

void soundfile_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    switch (service_number)
    {
    	case Service_ResourceFSStarting:
    	    re_register_resources(r->r[2], r->r[3]);
    	    break;
    }
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

_kernel_oserror *soundfile_swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    os_error *e = NULL;

    switch (swi_no)
    {
    	case SoundFile_Open - SoundFile_00:
    	    e = sf_open((bits)r->r[0], (void *)r->r[1], (soundfile_format *)r->r[2], (sf_context **)&r->r[0], (soundfile_stream **)&r->r[1]);
    	    break;

    	case SoundFile_Close - SoundFile_00:
    	    e = sf_close((bits)r->r[0], (sf_context *)r->r[1]);
    	    break;

    	case SoundFile_ReadData - SoundFile_00:
    	    e = sf_read_data((bits)r->r[0], (sf_context *)r->r[1], (byte **)&r->r[2], &r->r[3], &r->r[4]);
    	    break;

    	case SoundFile_MiscOp - SoundFile_00:
    	    switch (r->r[0] & 0xff)
    	    {
    	        case SoundFileMiscOp_ReturnTable:
    	            r->r[0] = (int)sf_misc_op_return_table(r->r[1]);
                    break;

    	        case SoundFileMiscOp_ReturnHandles:
    	        {
    	            sf_context *id = (sf_context *)r->r[1];
    	            if (id)
    	            {
    	                r->r[0] = (int)&id->format;
    	                r->r[1] = (int)&id->stream;
    	            }
    	            break;
    	        }

    	        default:
    	            goto error;
            }
    	    break;

        default:
            goto error;
    }

    return (_kernel_oserror *)e;

error:
    return (_kernel_oserror *)make_err(error_NO_SUCH_SWI, msgs_lookup("ERR9"), SoundFile_00 + swi_no, r->r[0] & 0xff);

    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

_kernel_oserror *soundfile_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    os_error *e = NULL;

    switch (cmd_no)
    {
        case CMD_SoundFileInfo:
        {
            int i;
            sf_context *sf;
            soundfile_format format, *fmt;

            e = sf_open(0, arg_string, &format, &sf, NULL);

            fmt = &format;
            printf("Flags        &%x\n", format.flags);
            printf("Source       &%x\n", format.source);
            printf("NBits         %d\n", format.n_bits);
            printf("NChannels     %d\n", format.n_channels);
            printf("Data format   %d\n", format.data_format);
            printf("Sample rate   %d +%d/%d Hz\n",
                format.sample_rate >> soundfile_SAMPLE_RATE_SHIFT,
                format.sample_rate & ((1 << soundfile_SAMPLE_RATE_SHIFT)-1),
                1 << soundfile_SAMPLE_RATE_SHIFT);
            printf("Sample period %d µs\n", format.sample_period);
            printf("Data offset   %d bytes\n", format.data_offset);
            printf("Data length   %d bytes\n", format.data_length);
            printf("              %d samples\n", format.n_samples);
            printf("Block align   %d bytes\n", format.block_align);
            printf("Min chunk     %d bytes\n", format.min_chunk_size);
            printf("Max sample    %d +%d/%d bits\n",
                format.sample_max_size >> soundfile_SAMPLE_MAX_SIZE_SHIFT,
                format.sample_max_size & ((1 << soundfile_SAMPLE_MAX_SIZE_SHIFT)-1),
                1 << soundfile_SAMPLE_MAX_SIZE_SHIFT);
            printf("Chan i/leave  %d samples\n", format.channel_interleave);
            printf("Info offset   %d bytes\n", format.info_offset);
            printf("Name         '%s'\n", format.format_name);
            printf("Compression  '%s'\n", format.compression_name);
            printf("Comment      '%s'\n", format.comment);
#ifndef NDEBUG
            printf("Data handler @%p\n", format.load_data_handler);
            printf("To16 handler @%p\n", format.to16_handler);
            printf("Free handler @%p\n", format.dispose_handler);
            printf("Handler r12  &%p\n", format.handler_r12);
#endif
	    for (i = 0; i < 8; i++)
               	printf("Format data  &%x\n", format.format_specific_data[i]);

            sf_close(0, sf);
            break;
        }

        case CMD_SoundFileForceClose:
            e = sf_close_all();
            break;
    }

    return (_kernel_oserror *)e;
    NOT_USED(argc);
    NOT_USED(pw);
}

/* ----------------------------------------------------------------------- */

/* eof main.c */
