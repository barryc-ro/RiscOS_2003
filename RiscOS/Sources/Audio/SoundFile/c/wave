/* > wave.c

 * © SJ Middleton, 1992

 * Routines for decoding information about a WAVE file.

 */

#include "macros.h"

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "iffsound.h"
#include "identify.h"

#define NO_SOUND_DATA   msgs_lookup("ERR4")
#define NO_SOUND_INFO   msgs_lookup("ERR5")

static os_error *iffsound_processchunk2(stream_id stream, int chunk_type, int chunk_id, int chunk_size, void *handle)
{
    soundfile_format    *fmt = (soundfile_format *)handle;
    os_error	        *e = NULL;

#if 0
{ int pos;
stream_get_pos(stream, &pos);
printf("WAVE: type %c%c%c%c id %c%c%c%c offset %d size %d\n",
    chunk_type, chunk_type >> 8, chunk_type >> 16, chunk_type >> 24,
    chunk_id, chunk_id >> 8, chunk_id >> 16, chunk_id >> 24,
    pos, chunk_size);
}
#endif
    switch (chunk_id)
    {
        case ID_WAVE:
            return iff_process_level(stream, TRUE, chunk_size, iffsound_processchunk2, handle);

        case ID_fmt:
        {
            WaveFmtExChunk wave;

    	    e = stream_get_pos(stream, &fmt->info_offset);
       	    if (!e)
       	    	e = stream_read(stream, &wave, MIN(sizeof(wave), chunk_size), NULL);
    	    if (!e)
    	    {
    	        fmt->n_channels = wave.Channels;
                fmt->sample_rate = (int)wave.SamplesPerSec << soundfile_SAMPLE_RATE_SHIFT;
                fmt->block_align = wave.BlockAlign;
                fmt->n_bits = wave.BitsPerSample;
            }

            if (!e) switch (wave.FormatTag)
            {
                case WAVE_FORMAT_PCM:
                    if (wave.BitsPerSample <= 8)
                    {
                        fmt->data_format = soundfile_8BIT_LINEAR;
                        fmt->flags |= soundfile_DATA_IS_UNSIGNED;
                    }
                    else
                    {
                        fmt->data_format = soundfile_16_BIT_LINEAR;
                    }
                    break;

                case WAVE_FORMAT_MULAW:
                case IBM_FORMAT_MULAW:
                    fmt->data_format = soundfile_8BIT_MU_LAW;
                    break;

                case WAVE_FORMAT_ALAW:
                case IBM_FORMAT_ALAW:
                    fmt->data_format = soundfile_8BIT_ALAW;
                    break;

                default:
                    fmt->data_format = wave.FormatTag;
                    fmt->sample_max_size = wave.BitsPerSample << soundfile_SAMPLE_MAX_SIZE_SHIFT;
                    fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;
                    break;
            }

            break;
        }

    	case ID_fact:
    	{
    	    WaveFactChunk fact;
    	    e = stream_read(stream, &fact, sizeof(fact), NULL);
    	    if (!e) fmt->n_samples = (int)fact.FileSize;
    	    break;
    	}

        case ID_data:
            e = stream_get_pos(stream, &fmt->data_offset);
            fmt->data_length = chunk_size;
            if (!e) e = IFF_ABORT_SCAN;
            break;
    }
    return e;
    NOT_USED(chunk_type);
}

static os_error *wave_scan_file(stream_id stream, soundfile_format *fmt)
{
    os_error *e = iff_process_level(stream, TRUE, 0, iffsound_processchunk2, fmt);

    fmt->source = osfile_TYPE_WAVEFORM;
    strcpy(fmt->format_name, "Wave");

    return e;
}

os_error *wave_identify(stream_id stream, osgbpb_info_stamped *file_info, soundfile_format *fmt)
{
    os_error *e = NULL;

    if (file_info->file_type == osfile_TYPE_WAVEFORM)
        e = wave_scan_file(stream, fmt);
    else
    {
        int words[3];
        e = stream_read(stream, words, sizeof(words), NULL);
        if (!e && (words[0] == ID_RIFF && words[2] == ID_WAVE))
        {
            e = stream_set_pos(stream, 0);
            if (!e) e = wave_scan_file(stream, fmt);
        }
    }

    return e;
}

/* eof wave.c */
