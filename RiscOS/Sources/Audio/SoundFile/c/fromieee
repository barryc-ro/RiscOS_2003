/* > fromieee.c

 * C O N V E R T   F R O M   I E E E   E X T E N D E D
 */

#include <limits.h>

#include "utils.h"

/*
 * Copyright (C) 1988-1991 Apple Computer, Inc.
 * All rights reserved.
 *
 * Machine-independent I/O routines for IEEE floating-point numbers.
 *
 * NaN's and infinities are converted to HUGE_VAL or HUGE, which
 * happens to be infinity on IEEE machines.  Unfortunately, it is
 * impossible to preserve NaN's in a machine-independent way.
 * Infinities are, however, preserved on IEEE machines.
 *
 * These routines have been tested on the following machines:
 *    Apple Macintosh, MPW 3.1 C compiler
 *    Apple Macintosh, THINK C compiler
 *    Silicon Graphics IRIS, MIPS compiler
 *    Cray X/MP and Y/MP
 *    Digital Equipment VAX
 *
 *
 * Implemented by Malcolm Slaney and Ken Turkowski.
 *
 * Malcolm Slaney contributions during 1988-1990 include big- and little-
 * endian file I/O, conversion to and from Motorola's extended 80-bit
 * floating-point format, and conversions to and from IEEE single-
 * precision floating-point format.
 *
 * In 1991, Ken Turkowski implemented the conversions to and from
 * IEEE double-precision format, added more precision to the extended
 * conversions, and accommodated conversions involving +/- infinity,
 * NaN's, and denormalized numbers.
 */

static unsigned shift(unsigned val, int shift_val)
{
    if (shift_val > 0)
    	return val << shift_val;
    if (shift_val < 0)
    	return val >> (-shift_val);
    return val;
}

/****************************************************************
 * Extended precision IEEE floating-point conversion routine.
 ****************************************************************/

int ConvertFromIeeeExtended(char *bytes, int precision)
{
    int	    val;
    int     expon;
    unsigned hiMant, loMant;

    expon = get_bytes(bytes, -2) &~ 0x8000;
    hiMant = get_bytes(bytes+2, -4);
    loMant = get_bytes(bytes+6, -4);

    if (expon == 0 && hiMant == 0 && loMant == 0)
    {
        val = 0;
    }
    else
    {
        if (expon == 0x7FFF) /* Infinity or NaN */
      	{
            val = INT_MAX;
        }
        else
        {
            expon -= 16383;

            expon -= 31;
    	    val  = shift(hiMant, expon + precision);

            expon -= 32;
    	    val += shift(loMant, expon);
        }
    }

    if (bytes[0] & 0x80)
        return -val;
    else
        return val;
}

/* eof fromieee.c */
