/* > aiff.c

 * © SJ Middleton, 1992

 * Routines for decoding information about an AIFF file.

 */

#include <stdio.h>
#include <string.h>

#include "macros.h"

#include "iffsound.h"
#include "utils.h"

#include "identify.h"

static os_error *iffsound_processchunk(stream_id id, int chunk_type, int chunk_id, int chunk_size, void *handle)
{
    soundfile_format *fmt = handle;
    os_error        *e = NULL;

    switch (chunk_id)
    {
        /* AIFF chunks */
        case ID_AIFF:
        case ID_AIFC:
            return iff_process_level(id, FALSE, chunk_size, iffsound_processchunk, handle);

        case ID_COMM:
        {
            AIFCCommonChunk common;

    	    memset(&common, 0, sizeof(common));
            e = stream_read(id, &common, MIN(sizeof(common), chunk_size), NULL);

            if (!e)
            {
                fmt->n_channels = get_bytes(common.numChannels, -sizeof(common.numChannels));
                fmt->n_bits = get_bytes(common.sampleSize, -sizeof(common.sampleSize));
                fmt->sample_rate = ConvertFromIeeeExtended(common.sampleRate, soundfile_SAMPLE_RATE_SHIFT);

                fmt->n_samples = get_bytes(common.numSampleFrames, -sizeof(common.numSampleFrames));

    	    	fmt->data_format = get_bytes(common.compressionType, -sizeof(common.compressionType));
    	    	if (fmt->data_format == aCmpNone || fmt->data_format == 0)
    	    	{
                    if (fmt->n_bits <= 8)
                    {
                    	fmt->data_format = soundfile_8BIT_LINEAR;
                    }
                    else if (fmt->n_bits <= 16)
                    {
                    	fmt->data_format = soundfile_16_BIT_LINEAR_BIG_ENDIAN;
                    }
                    else
                    	fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;
                }
                else
                    fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;
            }
            break;
        }

    	case ID_ANNO:
            if (fmt->comment[0] == 0)
    	    {
    	        int len = MIN(sizeof(fmt->comment)-1, chunk_size);
    	        e = stream_read(id, fmt->comment, len, NULL);
    	        fmt->comment[len] = 0;
    	    }
    	    break;

        case ID_SSND:
            e = stream_get_pos(id, &fmt->data_offset);
            if (!e)
            {
                fmt->data_offset += sizeof(AIFFSoundDataHdr);
                e = IFF_ABORT_SCAN;
            }
            break;

        /* 8SVX chunks */
        case ID_8SVX:
            break;
    }

    return e;
    NOT_USED(chunk_type);
}

static os_error *aiff_scan_file(stream_id stream, soundfile_format *fmt)
{
    os_error *e;

    fmt->source = osfile_TYPE_AIFF;
    strcpy(fmt->format_name, "AIFF");

    e = iff_process_level(stream, FALSE, 0, iffsound_processchunk, fmt);

    return e;
}

os_error *aiff_identify(stream_id stream, osgbpb_info_stamped *info, soundfile_format *fmt)
{
    os_error *e = NULL;

    if (info->file_type == osfile_TYPE_AIFF)
    	e = aiff_scan_file(stream, fmt);
    else
    {
    	int data[3];
    	e = stream_read(stream, data, sizeof(data), NULL);
    	if (!e && data[0] == ID_FORM && data[2] == ID_AIFF)
    	{
    	    e = stream_set_pos(stream, 0);
    	    if (!e) e = aiff_scan_file(stream, fmt);
        }
    }

    return e;
}

/* eof aiff.c */
