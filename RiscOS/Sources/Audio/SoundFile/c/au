/* > au.c

 * © SJ Middleton, 1992

 * Routines for decoding information about a AU file.

 */

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "macros.h"

#include "msgs.h"
#include "utils.h"

#include "identify.h"

//#define AU_IDENT    ('.' + ('s'<<8) + ('n'<<16) + ('d'<<24))
#define SUN_MAGIC 	0x2e736e64		/* Really '.snd' */
#define SUN_INV_MAGIC	0x646e732e		/* '.snd' upside-down */
#define DEC_MAGIC	0x2e736400		/* Really '\0ds.' (for DEC) */
#define DEC_INV_MAGIC	0x0064732e		/* '\0ds.' upside-down */

#define SND_FORMAT_UNSPECIFIED  0       /* unspecified format */
#define SND_FORMAT_MULAW_8      1       /* 8-bit mu-law samples*/
#define SND_FORMAT_LINEAR_8     2       /* 8-bit linear samples*/
#define SND_FORMAT_LINEAR_16    3       /* 16-bit linear samples*/
#define SND_FORMAT_LINEAR_24    4       /* 24-bit linear samples*/
#define SND_FORMAT_LINEAR_32    5       /* 32-bit linear samples*/
#define SND_FORMAT_FLOAT        6       /* floating-point samples*/
#define SND_FORMAT_DOUBLE       7       /* double-precision float samples*/
#define SND_FORMAT_INDIRECT     8       /* fragmented sampled data*/
#define SND_FORMAT_NESTED       9       /* ? */
#define SND_FORMAT_DSP_CORE     10      /* DSP program*/
#define SND_FORMAT_DSP_DATA_8   11      /*   8-bit fixed-point samples*/
#define SND_FORMAT_DSP_DATA_16  12      /*  16-bit fixed-point samples*/
#define SND_FORMAT_DSP_DATA_24  13      /*  24-bit fixed-point samples*/
#define SND_FORMAT_DSP_DATA_32  14      /*  32-bit fixed-point samples*/
#define SND_FORMAT_DISPLAY      16                  /* non-audio display data*/
#define SND_FORMAT_MULAW_SQUELCH 17                 /* ? */
#define SND_FORMAT_EMPHASIZED   18                  /* 16-bit linear with emphasis*/
#define SND_FORMAT_COMPRESSED   19                  /* 16-bit linear with compression*/
#define SND_FORMAT_COMPRESSED_EMPHASIZED    20      /* A combination of the two above*/
#define SND_FORMAT_DSP_COMMANDS             21      /* Music Kit DSP commands*/
#define SND_FORMAT_DSP_COMMANDS_SAMPLES     22      /* ? */
#define SND_FORMAT_ADPCM_G721       23
#define SND_FORMAT_ADPCM_G722       24
#define SND_FORMAT_ADPCM_G723_3     25
#define SND_FORMAT_ADPCM_G723_5     26
#define SND_FORMAT_ALAW_8           27

typedef struct {
    int magic;               /* magic number SND_MAGIC */
    int dataLocation;        /* offset or pointer to the data */
    int dataSize;            /* number of bytes of data */
    int dataFormat;          /* the data format code */
    int samplingRate;        /* the sampling rate */
    int channelCount;        /* the number of channels */
    char info[4];            /* optional text information */
} SNDSoundStruct;

os_error *au_identify(stream_id stream, osgbpb_info_stamped *file_info, soundfile_format *fmt)
{
    os_error *e;
    SNDSoundStruct snd;

    e = stream_read(stream, &snd, sizeof(snd), NULL);

    if (!e && (snd.magic == SUN_INV_MAGIC || snd.magic == DEC_INV_MAGIC))
    {
        int format;

        fmt->source = soundfile_TYPE_AU;
        fmt->sample_rate = get_bytes(&snd.samplingRate, -4) << soundfile_SAMPLE_RATE_SHIFT;
        fmt->flags = 0;

        format = get_bytes(&snd.dataFormat, -4);

        switch (format)
        {
            case SND_FORMAT_MULAW_8:
                fmt->n_bits = 8;
                fmt->data_format = soundfile_8BIT_MU_LAW;
                break;

            case SND_FORMAT_ALAW_8:
                fmt->n_bits = 8;
                fmt->data_format = soundfile_8BIT_ALAW;
                break;

            case SND_FORMAT_LINEAR_8:
                fmt->n_bits = 8;
                fmt->data_format = soundfile_8BIT_LINEAR;
                break;

            case SND_FORMAT_LINEAR_16:
                fmt->n_bits = 16;
                fmt->data_format = soundfile_16_BIT_LINEAR_BIG_ENDIAN;
                break;

            default:
            	fmt->data_format = format;
            	fmt->flags = soundfile_UNSUPPORTED_DATA_FORMAT;
                break;
        }

        fmt->n_channels = get_bytes(&snd.channelCount, -4);
        fmt->data_offset = get_bytes(&snd.dataLocation, -4);
        fmt->data_length = get_bytes(&snd.dataSize, -4);

        // patch to cope with files with no (or -ve) data size included
        if (fmt->data_length <= 0)
            fmt->data_length = file_info->size - fmt->data_offset;

        strcpy(fmt->format_name, "Sun/NeXT AU");

        {
            int i, comment_length = fmt->data_offset - offsetof(SNDSoundStruct, info);
            if (comment_length > 0)
            {
                if (comment_length > sizeof(fmt->comment)-1)
                    comment_length = sizeof(fmt->comment)-1;

                stream_set_pos(stream, offsetof(SNDSoundStruct, info));
                stream_read(stream, fmt->comment, comment_length, NULL);

                for (i = 0; i <= comment_length && fmt->comment[i] >= ' '; i++)
                    /* do nothing */;
                fmt->comment[i] = 0;
            }
        }
    }

    return e;
    NOT_USED(file_info);
}

/* eof au.c */
