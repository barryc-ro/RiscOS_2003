/* > iff.c

 * © SJ Middleton, 1992

 * Routines for parsing an IFF file.

 */

#include "msgs.h"

#include <stdlib.h>

#include "iffsound.h"
#include "sf.h"
#include "utils.h"

#define RoundToShort(a)	(((a)+1)&~1)

#define BAD_IFF	    	msgs_lookup("ERR3")

/*
 * This level could be a FORM, CAT or a chunk type.
 * Do the same processing whatever.
 */

os_error *iff_process_level(stream_id stream, bool RIFFnIFF, int level_size, iff_fn procfn, void *handle)
{
    os_error *e = NULL;

    int level_start, level_end,
	start, size = 0;

    e = stream_get_pos(stream, &level_start);	/* record current position */

    level_end = level_start + level_size;

    while (!e)
    {
	int id;
	char bytes[8];

	e = stream_read(stream, bytes, 8, NULL);    /* read form header */
	if (!e) e = stream_get_pos(stream, &start);

    	if (!e)
    	{
    	    id = *(int *)&bytes[0];

	    switch (id)
	    {
		case ID_RIFF:
		case ID_FORM:
		case ID_CAT:
		case ID_LIST:
	    	    size = get_bytes(bytes+4, RIFFnIFF ? 4 : -4);
	            e = stream_read(stream, bytes, 4, NULL);
		    if (!e) e = procfn(stream, id, *(int *)&bytes[0], size-4, handle);
		    break;

		default:
		    if (level_start == 0)
		    	e = make_err(error_SOUND_FILE_BAD_IFF, BAD_IFF);
		    else
		    {
	    	    	size = get_bytes(bytes+4, RIFFnIFF ? 4 : -4);
		    	e = procfn(stream, 0, id, size, handle);
		    }
		    break;
	    }
        }

    	if (!e)
    	{
	    start += size;
	    if (start >= level_end)
	    	break;

	    start = RoundToShort(start);
	    e = stream_set_pos(stream, start);
        }
    }

    if (e == IFF_ABORT_SCAN)
        e = NULL;

    return e;
}

/* eof iff.c */
