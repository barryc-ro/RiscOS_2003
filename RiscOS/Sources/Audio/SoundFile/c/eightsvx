/* > eightsvx.c

 * © SJ Middleton, 1995

 * Routines for decoding information about an eightsvx file.

 */

#include <stdio.h>
#include <string.h>

#include "macros.h"

#include "iffsound.h"
#include "utils.h"

#include "identify.h"

static os_error *iffsound_processchunk(stream_id id, int chunk_type, int chunk_id, int chunk_size, void *handle)
{
    soundfile_format *fmt = handle;
    os_error        *e = NULL;

    switch (chunk_id)
    {
        /* eightsvx chunks */
        case ID_8SVX:
            return iff_process_level(id, FALSE, chunk_size, iffsound_processchunk, handle);

        case ID_VHDR:
        {
            Voice8Header hdr;

            e = stream_read(id, &hdr, sizeof(hdr), NULL);

            if (!e)
            {
                fmt->n_channels = 1;
                fmt->n_bits = 8;
                fmt->sample_rate = get_bytes(&hdr.samplesPerSec, -sizeof(hdr.samplesPerSec)) << soundfile_SAMPLE_RATE_SHIFT;

    	    	if (hdr.sCompression == sCmpNone)
    	    	    fmt->data_format = soundfile_8BIT_LINEAR;
    	    	else
    	    	{
    	    	    fmt->data_format = hdr.sCompression;
    	    	    fmt->flags = soundfile_UNSUPPORTED_DATA_FORMAT;
    	    	}
            }
            break;
        }

    	case ID_NAME:
    	case ID_ANNO:
            if (fmt->comment[0] == 0)
    	    {
    	        int len = MIN(sizeof(fmt->comment)-1, chunk_size);
    	        e = stream_read(id, fmt->comment, len, NULL);
    	        fmt->comment[len] = 0;
    	    }
    	    break;

        case ID_BODY:
            e = stream_get_pos(id, &fmt->data_offset);
            if (!e)
            {
                fmt->n_samples = fmt->data_length = chunk_size;
                e = IFF_ABORT_SCAN;
            }
            break;
    }

    return e;
    NOT_USED(chunk_type);
}

os_error *eightsvx_identify(stream_id stream, osgbpb_info_stamped *info, soundfile_format *fmt)
{
    os_error *e;
    int data[3];

    e = stream_read(stream, data, sizeof(data), NULL);
    if (!e && data[0] == ID_FORM && data[2] == ID_8SVX)
    {
    	e = stream_set_pos(stream, 0);
    	if (!e)
    	{
    	    fmt->source = soundfile_TYPE_8SVX;
    	    strcpy(fmt->format_name, "IFF 8SVX");
    	    e = iff_process_level(stream, FALSE, 0, iffsound_processchunk, fmt);
        }
    }

    return e;
    NOT_USED(info);
}

/* eof eightsvx.c */
