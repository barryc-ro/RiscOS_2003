/* > readdata.c

 * © SJ Middleton, 1995

 */

#include "macros.h"

#include <stdlib.h>

#include "msgs.h"
#include "sf.h"

#define FILE_BUFFER_SIZE    (8*1024)

extern os_error *call_to16_handler(const void *in, void *out, int nbytes, soundfile_format *fmt, int *nbytes_written);

/* ----------------------------------------------------------------------------------------- */

os_error *sf_read_data(bits flags, sf_context *sf, byte **buffer_addr, int *nbytes_addr, int *index_addr)
{
    os_error *e;

    soundfile_format *fmt = &sf->format;

    byte *buffer = *buffer_addr;
    int nbytes_toread = *nbytes_addr;
    int index = *index_addr;

    int byte_index, nbytes;

    e = sf_check(sf);
    if (!e)
    {
        // do the initial seek

    	byte_index = samples_to_bits(fmt, index) >> 3;   // index*fmt->n_channels*fmt->sample_max_size*8) >> soundfile_SAMPLE_MAX_SIZE_SHIFT;
    	byte_index = (byte_index / fmt->block_align) * fmt->block_align;

    	if (nbytes_toread > fmt->data_length - byte_index)
    	    nbytes_toread = fmt->data_length - byte_index;

    	nbytes_toread = (nbytes_toread / fmt->block_align) * fmt->block_align;

    	e = stream_set_pos(&sf->stream, fmt->data_offset + byte_index);
    }

    nbytes = nbytes_toread;
    if (!e)
    {
    	if (flags & soundfile_READ_DATA_AS16_BIT)
        {
    	    void *file_buffer;
    	    if ((file_buffer = malloc(FILE_BUFFER_SIZE)) == NULL)
    	    	e = make_oomerr(msgs_lookup("O3"), FILE_BUFFER_SIZE);

    	    while (!e && nbytes > 0)
    	    {
    	        int unread, bytes_converted;
    	    	int use = MIN(nbytes, FILE_BUFFER_SIZE);
        	e = stream_read(&sf->stream, file_buffer, use, &unread);
    	    	if (!e)
    	    	    e = call_to16_handler(file_buffer, buffer, use - unread, fmt, &bytes_converted);
    	    	if (!e)
    	    	    buffer += bytes_converted;

    	    	nbytes -= use;
    	    }

    	    free(file_buffer);
    	}
    	else
    	{
            int unread;
            e = stream_read(&sf->stream, buffer, nbytes, &unread);
            if (!e)
            {
                int read = nbytes - unread;
                buffer += read;
                nbytes -= read;
            }
    	}
    }

    index += bytes_to_samples(fmt, nbytes_toread - nbytes);
//    index += ((nbytes_toread - nbytes) << soundfile_SAMPLE_MAX_SIZE_SHIFT)/(fmt->n_channels*fmt->sample_max_size*8);

    *buffer_addr = buffer;
    *nbytes_addr -= nbytes_toread - nbytes;
    *index_addr = index;

    return e;
}

/* ----------------------------------------------------------------------------------------- */

/* eof readdata.c */
