/* > open.c

 * © SJ Middleton, 1995

 */

#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "msgs.h"
#include "sf.h"
#include "utils.h"
#include "identify.h"

#define FOR_STRUCTS	msgs_lookup("O0")

/* -------------------------------------------------------------------------------------------------- */

static soundfile_identify_function   loaders[] =
{
    aiff_identify,
    armadeus_identify,
    au_identify,
    audioworks_identify,
    eightsvx_identify,
    iota_identify,
    psion_identify,
    stsample_identify,
    voc_identify,
    wave_identify
};

#define N_LOADERS   (sizeof(loaders)/sizeof(loaders[0]))

static os_error *identify_file(sf_context *sf)
{
    os_error *e = NULL;
    soundfile_format *fmt = &sf->format;
    int i;

    /* Try and identify the file internally */
    for (i = 0; !e && i < N_LOADERS; i++)
    {
	e = stream_set_pos(&sf->stream, 0);

	if (!e)
	    e = loaders[i](&sf->stream, &sf->file_info, fmt);

	/* The format was known */
	if (!e && fmt->source != 0)
	{
	    /* If the compression type was unknown then try a service call */
	    if (fmt->flags & soundfile_UNSUPPORTED_DATA_FORMAT)
	    {
		bool unclaimed;
		os_error *e_return;
                e = (os_error *)_swix(OS_ServiceCall, _INR(0,4) | _OUTR(0,1), 0, Service_SoundFileIdentify,
		    &sf->stream, &sf->file_info, &sf->format,
		    &e_return, &unclaimed);

//		e = xservice_sound_file_identify(0,
//		    &sf->stream, &sf->file_info, &sf->format,
//		    &e_return, &unclaimed);

		/* we can return an error from this service call in r0 */
		if (!e)
		{
		    if (unclaimed)
			e = make_err(error_SOUND_FILE_UNSUPPORTED_COMPRESSION, msgs_lookup("ERR1"), fmt->data_format, fmt->format_name);
		    else
			e = e_return;
		}
	    }
	    break;
	}
    }

    /* If not identified then do the service call */
    if (!e && fmt->source == 0)
    {
	bool unclaimed;
	os_error *e_return;
        e = (os_error *)_swix(OS_ServiceCall, _INR(0,4) | _OUTR(0,1), 0, Service_SoundFileIdentify,
            &sf->stream, &sf->file_info, &sf->format,
	    &e_return, &unclaimed);

//	e = xservice_sound_file_identify(0,
//	    &sf->stream, &sf->file_info, &sf->format,
//	    &e_return, &unclaimed);

	/* we can return an error from this service call in r0 */
	if (!e && !unclaimed)
	    e = e_return;
    }

    /* If still not identified then return an error */
    if (!e && fmt->source == 0)
	e = make_err(error_SOUND_FILE_UNKNOWN, msgs_lookup("ERR0"));

    return e;
}

static os_error *check_details(sf_context *sf)
{
    os_error *e = NULL;
    soundfile_format *fmt = &sf->format;

    // if we are setting nbits for an internal format then set sample_max_size the same
    if (fmt->n_bits == 0 && (fmt->flags & soundfile_UNSUPPORTED_DATA_FORMAT) == 0)
    {
        static char n_bits_table[] = { 8, 8, 8, 8, 12, 16, 16 };
    	fmt->n_bits = n_bits_table[fmt->data_format];
    	fmt->sample_max_size = fmt->n_bits << soundfile_SAMPLE_MAX_SIZE_SHIFT;
    }

    // if sample max size not specified then assume it is rounded up to nearest bytes from nbits
    if (fmt->sample_max_size == 0)
    	fmt->sample_max_size = ((fmt->n_bits + 7)/8) << (soundfile_SAMPLE_MAX_SIZE_SHIFT+3);

    /* fill out the structure if necessary and check for important stuff being there */
    if (fmt->sample_rate == 0)
    {
	if (fmt->sample_period == 0)
	    e = make_err(error_SOUND_FILE_NO_INFO, msgs_lookup("ERR5"), fmt->format_name);
	else
	    fmt->sample_rate = (1000000u<<soundfile_SAMPLE_RATE_SHIFT)/fmt->sample_period;
    }

    if (!e && fmt->n_samples == 0)
    {
	if (fmt->data_length == 0)
	    e = make_err(error_SOUND_FILE_NO_DATA, msgs_lookup("ERR4"), fmt->format_name);
	else
	    fmt->n_samples = bytes_to_samples(fmt, fmt->data_length);
    }

    if (!e)
    {
	if (fmt->data_length == 0)
	    fmt->data_length = samples_to_bits(fmt, fmt->n_samples) >> 3;

	if (fmt->channel_interleave == 0)
	    fmt->channel_interleave = 1;

	if (fmt->block_align == 0)
	{
    	    static char align[] = { 1, 8, 4, 8, 2, 8, 4, 8 };
	    int nbits = samples_to_bits(fmt, fmt->channel_interleave);
   	    fmt->block_align = (align[nbits & 7] * nbits) >> 3;
        }

	//if (fmt->data_load_handler == 0)
	//    fmt->data_load_handler = (void *)default_data_load;

	if (fmt->to16_handler == 0)
	    fmt->to16_handler = (void *)get_to16_handler(fmt);
    }

    return e;
}

/* -------------------------------------------------------------------------------------------------- */

static sf_context *sf_base = NULL;

os_error *sf_open(bits flags, const void *data, soundfile_format *format_out, sf_context **sf_out, soundfile_stream **stream_out)
{
    os_error *e = NULL;
    sf_context *sf;

    // can't set format on an external data format
    if ((flags & soundfile_OPEN_SET_FORMAT) != 0 &&
         format_out &&
        (format_out->flags & soundfile_UNSUPPORTED_DATA_FORMAT) != 0)
    {
        flags &= ~soundfile_OPEN_SET_FORMAT;
    }

    if ((sf = (sf_context *)calloc(sizeof(sf_context), 1)) == NULL)
	e = make_oomerr(FOR_STRUCTS, sizeof(sf_context));

    /* open the stream */
    if (!e)
    {
	sf->id = CONTEXT_ID;	/* must go in first */
	e = stream_open(flags & soundfile_OPEN_TYPE, data, &sf->stream);
    }

    /* pull the file info from somewhere */
    if (!e) switch (flags & soundfile_OPEN_TYPE)
    {
	case soundfile_OPEN_TYPE_FILE_NAME:
#if 1
	    e = (os_error *)_swix(OS_File, _INR(0,1) | _OUT(0)|_OUTR(2,6),
	        OSFile_ReadStampedNoPath, data,
		&sf->file_info.obj_type,
		&sf->file_info.load_addr,
		&sf->file_info.exec_addr,
		&sf->file_info.size,
		&sf->file_info.attr,
		&sf->file_info.file_type);
#else
	    e = xosfile_read_stamped_no_path((char *)data,
		&sf->file_info.obj_type,
		&sf->file_info.load_addr,
		&sf->file_info.exec_addr,
		&sf->file_info.size,
		&sf->file_info.attr,
		&sf->file_info.file_type);
#endif
	    break;

	case soundfile_OPEN_TYPE_FILE_HANDLE:
	    memcpy(&sf->file_info, &((soundfile_open_handle_info *)data)->info, osgbpb_SIZEOF_INFO_STAMPED(0));
	    break;

	case soundfile_OPEN_TYPE_BUFFER:
	    memcpy(&sf->file_info, &((soundfile_open_buffer_info *)data)->info, osgbpb_SIZEOF_INFO_STAMPED(0));
	    break;
    }

    if (!e)
    {
	if (format_out && (flags & soundfile_OPEN_SET_FORMAT) != 0)
	{
/*
	    if (format_out->flags & soundfile_UNSUPPORTED_DATA_FORMAT)
	    {
		e = xservice_sound_file_identify(0,
		    &sf->stream, &sf->file_info, &sf->format,
		    NULL, NULL);

		sf->format.sample_period = format_out->sample_period;
		sf->format.sample_rate = format_out->sample_rate;
	    }
	    else
 */
	    	sf->format = *format_out;
    	}
	else
	    e = identify_file(sf);
    }

    if (!e)
	e = check_details(sf);

    /* write back data anyway in case it is of use */
    if (format_out)
	*format_out = sf->format;

    /* add to chain or tidy up */
    if (!e && (flags & soundfile_OPEN_IDENTIFY_ONLY) == 0)
    {
    	if (sf_out)
	    *sf_out = sf;
	if (stream_out)
	    *stream_out = &sf->stream;

	ll_link((struct ll_header **)&sf_base, (struct ll_header *)sf);
    }
    else if (sf)
	sf_close(0, sf);

    return e;
}

extern os_error *call_dispose_handler(soundfile_format *fmt, void *handler, byte *r12);

os_error *sf_close(bits flags, sf_context *sf)
{
    os_error *e = sf_check(sf);

    if (!e)
    {
	ll_unlink((struct ll_header **)&sf_base, (struct ll_header *)sf);

	if (sf->format.dispose_handler)
	    e = call_dispose_handler(&sf->format, sf->format.dispose_handler, sf->format.handler_r12);
    }

    if (!e)
	e = stream_close(&sf->stream);

    if (!e) free(sf);

    return e;
    NOT_USED(flags);
}

os_error *sf_can_kill(void)
{
    return sf_base ? make_err(error_SOUND_FILE_CANT_KILL, msgs_lookup("ERR8")) : NULL;
}

os_error *sf_close_all(void)
{
    os_error *e = NULL;
    while (!e && sf_base)
	e = sf_close(0, sf_base);
    return e;
}

os_error *sf_check(sf_context *sf)
{
    if (sf->id != CONTEXT_ID)
	return make_err(error_SOUND_FILE_INVALID_HANDLE, msgs_lookup("ERR2"), sf);
    return NULL;
}

// --------------------------------------------------------------------------------

int bytes_to_samples(const soundfile_format *fmt, int nbytes)
{
    return muldiv(nbytes, 1 << (soundfile_SAMPLE_MAX_SIZE_SHIFT + 3), fmt->n_channels*fmt->sample_max_size);
}

int samples_to_bits(const soundfile_format *fmt, int nsamples)
{
    return muldiv(nsamples * fmt->n_channels, fmt->sample_max_size, 1 << soundfile_SAMPLE_MAX_SIZE_SHIFT);
}

// --------------------------------------------------------------------------------

/* eof open.c */
