/* > audioworks.c

 * © SJ Middleton, 1992

 * Routines for decoding information about a AudioWorks file.

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "macros.h"

#include "objfile.h"
#include "identify.h"

/* ------------------------------------------------------------------------------ */

#define SND_ID      objfile_MakeObjID('S','N','D','_')
#define SND_HEAD    objfile_MakeObjID('H','E','A','D')
#define SND_INFO    objfile_MakeObjID('I','N','F','O')
#define SND_CHAN    objfile_MakeObjID('C','H','A','N')

#define BAD_FILE    msgs_lookup("AUD0")
#define BAD_CHUNK   msgs_lookup("AUD2")

#define audiowrk_VIDC	    0
#define audiowrk_Unsigned   1
#define audiowrk_Signed	    2
#define audiowrk_5Law	    3
#define audiowrk_ALaw	    4

#define audiowrk_Interleaved    0x01  /* 1 = channels interleaved, 0 = separate */

typedef struct
{
    int     rate;       /* in Hz */
    char    format;     /* as above */
    char    nbits;      /* multiple of 4 */
    char    nchannels;
    char    compression;
    char    flags;
} audiowrk_infostr;

static os_error *audioworks_scan(stream_id id, objfile_chunk *entry, void *handle)
{
    soundfile_format *fmt = handle;
    os_error *e = NULL;

    if (entry->major_id != SND_ID)
        e = make_err(error_SOUND_FILE_BAD_AUDIOWORKS, BAD_FILE, BAD_CHUNK, entry->major_id);

    if (!e) switch (entry->minor_id)
    {
        case SND_HEAD:
        {
            audiowrk_infostr info;
            e = stream_read(id, &info, sizeof(info), NULL);

            if (!e && info.nchannels > 1 && (info.flags & audiowrk_Interleaved) == 0)
                e = make_err(error_SOUND_FILE_BAD_AUDIOWORKS, BAD_FILE, msgs_lookup("AUD3"));

            if (!e)
            {
                int compound_format;

                fmt->sample_rate = info.rate << soundfile_SAMPLE_RATE_SHIFT;
                fmt->n_channels = info.nchannels;
                fmt->n_bits = info.nbits;
                fmt->sample_max_size = info.nbits << soundfile_SAMPLE_MAX_SIZE_SHIFT;
    	    	fmt->channel_interleave = info.nchannels == 1 ? 1 : 8;

                compound_format = info.format | (info.compression << 8);

    	    	fmt->data_format = soundfile_UNKNOWN_FORMAT;
                switch (compound_format)
                {
                    case audiowrk_VIDC:
                        if (info.nbits == 8)
                            fmt->data_format = soundfile_8BIT_VIDC;
                        break;

                    case audiowrk_Unsigned:
                        fmt->flags = soundfile_DATA_IS_UNSIGNED;
    	    	    	/* deliberate fall-through */
                    case audiowrk_Signed:
                        switch (info.nbits)
                        {
                            case 16:
                                fmt->data_format = soundfile_16_BIT_LINEAR_BIG_ENDIAN;
                                break;
                            case 12:
                                fmt->data_format = soundfile_12_BIT_LINEAR;
                                break;
                            case 8:
                                fmt->data_format = soundfile_8BIT_LINEAR;
                                break;
                        }
                        break;

                    case audiowrk_ALaw:
                        if (info.nbits == 8)
                            fmt->data_format = soundfile_8BIT_ALAW;
                        break;

                    case audiowrk_5Law:
    	    	    	break;
                }

    	    	if (fmt->data_format == soundfile_UNKNOWN_FORMAT)
    	    	{
                    fmt->data_format = compound_format | (info.nbits << 16);
                    fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;
                }
            }
            break;
        }

        case SND_INFO:
            e = stream_read(id, fmt->comment, MIN(sizeof(fmt->comment), entry->size), NULL);
            break;

        case SND_CHAN:
            fmt->data_offset = entry->offset + 1;
            fmt->data_length = entry->size - 1;
            break;
    }

    if (!e && fmt->data_format && fmt->data_offset)
    	e = objfile_ABORT_SCAN;

    return e;
}

os_error *audioworks_identify(stream_id id, osgbpb_info_stamped *info, soundfile_format *fmt)
{
    os_error *e = NULL;
    if (info->file_type == osfile_TYPE_AUDIOWORKS)
    {
        fmt->source = osfile_TYPE_AUDIOWORKS;
        strcpy(fmt->format_name, "Audioworks");
    	e = objfile_scan_file(id, audioworks_scan, fmt);
    }
    return e;
}

/* eof audioworks.c */
