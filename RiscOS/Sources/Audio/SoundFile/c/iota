/* > iota.c

 * © SJ Middleton, 1992

 * Routines for decoding information about a iota file.

 */

#include "msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "objfile.h"
#include "identify.h"

/* ------------------------------------------------------------------------------ */

typedef struct
{
    int id;
    int size;
} iota_chunk_header;

typedef struct
{
    int offset;	    	// from chunk start to sample data in bytes
    int length;	    	// in samples
    int rate;	    	// Hz
    int reserved;
} soundlib_sample_header;

typedef struct
{
    int n_samples;  	// ie number of headers following
    soundlib_sample_header sample[1];
} soundlib_header;


#define SND_WAV1    objfile_MakeObjID('W','A','V','1')
#define SND_WAV2    objfile_MakeObjID('W','A','V','2')
#define SND_NAM1    objfile_MakeObjID('N','A','M','1')

os_error *iota_identify(stream_id id, osgbpb_info_stamped *info, soundfile_format *fmt)
{
    os_error *e = NULL;
    if (info->file_type == osfile_TYPE_SOUNDLIB)
    {
	iota_chunk_header hdr;
	int pos = 0;

        fmt->source = osfile_TYPE_SOUNDLIB;
        strcpy(fmt->format_name, "Iota SoundLib");

	do
	{
            e = stream_read(id, &hdr, sizeof(hdr), NULL);
            if (!e) switch (hdr.id)
            {
                case SND_NAM1:
                {
                    int len;
                    e = stream_read(id, &len, sizeof(len), NULL);
                    if (!e)
                    {
                        len = (len & 0xffff) - 4;
                        if (len > sizeof(fmt->comment))
                            len = sizeof(fmt->comment);
                    	e = stream_read(id, fmt->comment, len, NULL);
                    }
                    break;
                }

                case SND_WAV1:
                case SND_WAV2:
                {
                    soundlib_header shdr;
                    soundlib_sample_header *sample;
                    e = stream_read(id, &shdr, sizeof(shdr), NULL);
                    if (!e)
                    {
    	    	    	if (hdr.id == SND_WAV2)
    	    	    	{
                            fmt->n_bits = 4;
                            fmt->sample_max_size = 4 << soundfile_SAMPLE_MAX_SIZE_SHIFT;
    	    	    	    fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;
                        }
                        else
    	    	    	{
                            fmt->n_bits = 8;
                            fmt->data_format = soundfile_8BIT_VIDC;
                        }

    	    	    	sample = &shdr.sample[0];
                        fmt->n_channels = 1;
                        fmt->sample_rate = sample->rate << soundfile_SAMPLE_RATE_SHIFT;
                        fmt->n_samples = sample->length;
                        fmt->data_offset = pos + sizeof(iota_chunk_header) + sample->offset;
    	    	    	fmt->info_offset = pos + sizeof(iota_chunk_header);
                    }
                    break;
                }
            }

	    // move to next chunk
    	    if (!e)
    	    {
    	    	pos += hdr.size;
    	    	e = stream_set_pos(id, pos);
    	    }
        }
        while (!e && pos < info->size && (fmt->data_offset == 0 || fmt->comment[0] == 0));
    }
    return e;
}

/* eof iota.c */
