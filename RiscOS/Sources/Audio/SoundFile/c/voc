/* > voc.c

 * Creative Voice VOC format

 */

#include <string.h>

#include "msgs.h"

#include "identify.h"

#define VOC_IDENT           "Creative Voice File\x1A"
#define VOC_VERSION         0x010A
#define VOC_CHECKSUM(vers)  (~(vers) + 0x1234)

#define VOC_SAMPLERATE(f)   (256 - ((f) < 256 ? (f) : (1000000/(f))))
#define VOC_XSAMPLERATE(f)  (65536 - ((f) < 256 ? 256*(f) : (256000000/(f))))
#define VOC_HDRSIZE         26

enum
{
    voc_Mono,
    voc_Stereo
};

typedef struct
{
    char            ident[20];      /* as above (no null terminator) */
    unsigned short  data_offset;    /* bytes from start of file */
    unsigned short  version_number; /* low byte minor, high byte major */
    unsigned short  check;          /* 2's complement of version + 0x1234 */
} voc_hdr;

typedef enum
{
    voc_8bit,
    voc_4bit,
    voc_2pt6bit,
    voc_2bit,
    voc_MultiDAC = voc_2bit     /* + number of channels */
} voc_compressiontype;

typedef enum
{
    voc_Terminator,     /* NONE;NONE */
    voc_SoundData,      /* 2+length of data; 00:sample rate, 01:compression type, 02+:data */
    voc_SoundContinue,  /* length of data; data */
    voc_Silence,        /* 3; 00-01:length of silence-1, 02:sample_rate */
    voc_Marker,         /* 2; 00-01:marker number */
    voc_ASCII,          /* length of string; null-terminated string */
    voc_Repeat,         /* 2; 00-01:count */
    voc_EndRepeat,      /* 0; NONE */
    voc_ExtendedHeader  /* 4; 00-01:sample rate, 02:compression type, 03:mode */
} voc_datatype;

#define BAD_VERSION     msgs_lookup("VOC0")
#define BAD_CHECKSUM    msgs_lookup("VOC1")

static os_error *scan_voc(stream_id stream, const voc_hdr *hdr, soundfile_format *fmt)
{
    os_error *e;
    bool finished = FALSE;

    e = stream_set_pos(stream, hdr->data_offset);

    while (!e && !finished)
    {
        int length, pos;
        int code;
        char data[4];

        length = 0;
        e = stream_bget(stream, &code);
        if (!e && code > 0)
        {
            e = stream_read(stream, data, 3, NULL);
            if (!e)
            {
                data[3] = 0;
                length = *(int *)data;
                stream_get_pos(stream, &pos);
            }
        }

        if (!e) switch (code)
        {
            case -1:
            case voc_Terminator:
                finished = TRUE;
                break;

            case voc_SoundData:
                fmt->data_length = length - 3;
                fmt->data_offset = pos + 3;

                if (fmt->sample_rate == 0)
                {
                    e = stream_read(stream, data, 2, NULL);
                    if (!e)
                    {
                    	fmt->sample_period = 256 - data[0];
                    	fmt->data_format = data[1];
                    	fmt->n_channels = 1;
                    }
                }
                /* abort scan once we've reached the data as we don't need other info */
                finished = TRUE;
                break;

            case voc_SoundContinue:
            case voc_Silence:
            case voc_Marker:
            case voc_ASCII:
            case voc_Repeat:
            case voc_EndRepeat:
                break;

            case voc_ExtendedHeader:
                e = stream_read(stream, data, 4, NULL);
                if (!e)
                {
                    fmt->sample_rate = (256000000/(65536 - *(unsigned short *)data)) << soundfile_SAMPLE_RATE_SHIFT;
                    fmt->data_format = data[2];
                    fmt->n_channels = data[3] + 1;
                }
                break;
        }

        if (!e && !finished)
            e = stream_set_pos(stream, pos + length);
    }

    return e;
}

os_error *voc_identify(stream_id stream, osgbpb_info_stamped *file_info, soundfile_format *fmt)
{
    os_error  *e = NULL;
    voc_hdr   hdr;

    e = stream_read(stream, &hdr, VOC_HDRSIZE, NULL);

    if (!e && memcmp(hdr.ident, VOC_IDENT, sizeof(hdr.ident)) == 0)
    {
        fmt->source = soundfile_TYPE_VOC;

        if (hdr.version_number != VOC_VERSION)
            e = make_err(error_SOUND_FILE_BAD_VOC, BAD_VERSION, hdr.version_number);
        else if (hdr.check != VOC_CHECKSUM(VOC_VERSION))
            e = make_err(error_SOUND_FILE_BAD_VOC, BAD_CHECKSUM, hdr.check);
        else
            e = scan_voc(stream, &hdr, fmt);

        if (!e)
        {
            if (fmt->data_format == voc_8bit)
            {
                fmt->data_format = soundfile_8BIT_LINEAR;
                fmt->flags |= soundfile_DATA_IS_UNSIGNED;
                fmt->n_bits = 8;
            }
            else
                fmt->flags |= soundfile_UNSUPPORTED_DATA_FORMAT;

            strcpy(fmt->format_name, VOC_IDENT);
            fmt->format_name[sizeof(VOC_IDENT)-2] = 0;
        }
    }
    return e;
    NOT_USED(file_info);
}

/* eof voc.c */
