TITLE SoundFile;

AUTHOR "Simon Middleton, Uniqueway Ltd.";

NEEDS OS,OSGBPB;

// ----------------------------------------------------------------------------

TYPE
  SoundFile_FormatFlags     = .Bits;

CONST
  SoundFile_UnknownFormat   = .Int: -1,
  SoundFile_8BitLinear      = .Int: 0,
  SoundFile_8BitVIDC        = .Int: 1,
  SoundFile_8BitMuLaw       = .Int: 2,
  SoundFile_8BitALaw        = .Int: 3,
  SoundFile_12BitLinear     = .Int: 4,
  SoundFile_16BitLinear     = .Int: 5,
  SoundFile_16BitLinearBigEndian
                            = .Int: 6,

  SoundFile_DataIsUnsigned  = SoundFile_FormatFlags: 0x00000001,
  SoundFile_StereoReversed  = SoundFile_FormatFlags: 0x00000002,
  SoundFile_UnsupportedDataFormat
                            = SoundFile_FormatFlags: 0x00000004,

  SoundFile_SampleRateShift     = .Int: 10,
  SoundFile_SampleMaxSizeShift  = .Int: 16,

  Error_SoundFileBase           = .Bits: 0x80DA00,    // 64 errors
  Error_SoundFileUnknown        = .Bits: 0x80DA00,
  Error_SoundFileUnsupportedCompression
                                = .Bits: 0x80DA01,   // for any type
  Error_SoundFileInvalidHandle  = .Bits: 0x80DA02,
  Error_SoundFileBadIFF         = .Bits: 0x80DA03,
  Error_SoundFileNoInfo         = .Bits: 0x80DA04,
  Error_SoundFileNoData         = .Bits: 0x80DA05,
  Error_SoundFileBadVOC         = .Bits: 0x80DA06,
  Error_SoundFileBadAudioworks  = .Bits: 0x80DA07,
  Error_SoundFileOutOfData      = .Bits: 0x80DA08,
  Error_SoundFileCantKill       = .Bits: 0x80DA09,

  osfile_TypeArmsamp            = .Bits: 0xD3C,
  osfile_TypeAIFF               = .Bits: 0xFC2,
  osfile_TypeWaveform           = .Bits: 0xFB1,
//  osfile_TypeSample             = .Bits: 0xDAF,
//  osfile_TypeHndata             = .Bits: 0xDAD,
  osfile_TypeStsample           = .Bits: 0xCB5,
  osfile_TypeSoundlib           = .Bits: 0xC47,
  osfile_TypeAudioworks         = .Bits: 0xBD6,
  osfile_TypeDatavox            = .Bits: 0x108,

  soundfile_TypeVOC             = .Bits: 0x20434F56,
  soundfile_TypeAU              = .Bits: 0x20205541,
  soundfile_Type_8SVX           = .Bits: 0x58565338,
  soundfile_TypePsionS3a	= .Bits: 'Psio';

TYPE
  SoundFile_ID;

// ----------------------------------------------------------------------------

TYPE
  SoundFile_Format = .Struct
  (
    SoundFile_FormatFlags:  flags,
    .Int:   source,

    .Byte:  n_bits,
    .Byte:  n_channels,
    .Byte:  sample_period,
    .Byte:  channel_interleave,    // in samples

    .Int:   data_format,

    .Int:   sample_rate,
    .Int:   n_samples,

    .Int:   data_offset,
    .Int:   data_length,

    .Int:   block_align,
    .Int:   min_chunk_size,
    .Int:   sample_max_size,

    .Int:   info_offset,

    .Ref .Data: handler_r12,
    .Ref .Asm:  load_data_handler,
    .Ref .Asm:  to16_handler,
    .Ref .Asm:  dispose_handler,

    [8] .Int: reserved,

    [8] .Int: format_specific_data,

    [24] .Char: format_name,
    [24] .Char: compression_name,
    [80] .Char: comment
  ),
  SoundFile_WaveFormatChunk = .Struct
  (
    .Short:     format_tag,
    .Short:     n_channels,
    .Int:       samples_per_sec,
    .Int:       avg_bytes_per_sec,
    .Short:     block_align,

    .Short:     bits_per_sample,
    .Short:     size,
    .Data:      extra_data ...
  );


// ----------------------------------------------------------------------------

TYPE SoundFile_OpenFlags  = .Bits;

TYPE
  SoundFile_Stream = .Struct
  (
     SoundFile_OpenFlags: flags,
     .Int: current_pos,
     .Ref .Data: buffer,
     .Int: buffer_size,
     OS_F: file_handle,
     [3] .Byte: reserved,
     .Ref .String: file_name
  );

CONST
  SoundFile_OpenType            = SoundFile_OpenFlags: %00000011,
  SoundFile_OpenTypeFileName    = .Int: 0,
  SoundFile_OpenTypeFileHandle  = .Int: 1,
  SoundFile_OpenTypeBuffer      = .Int: 2,

  SoundFile_OpenSetFormat       = SoundFile_OpenFlags: %00000100,
  SoundFile_OpenIdentifyOnly    = SoundFile_OpenFlags: %00001000;

TYPE
  SoundFile_OpenHandleInfo = .Struct
  (
    OS_F: handle,
    [3] .Byte: reserved,
    OSGBPB_InfoStamped: info
  ),
  SoundFile_OpenBufferInfo = .Struct
  (
    .Ref .Data: data,
    .Int: size,
    OSGBPB_InfoStamped: info
  );

SWI SoundFile_Open =
  (  NUMBER 0x4AEC0 "Try to identify or explicitly set the format of a sound file",
     ENTRY
     (  R0 = SoundFile_OpenFlags: flags,
        R1 -> .String: filename,
        R2 = .Ref SoundFile_Format: format
     ),
     EXIT
     (  R0! = SoundFile_ID: id,
        R1 -> SoundFile_Stream: stream
  )  );

// ----------------------------------------------------------------------------

TYPE SoundFile_CloseFlags = .Bits;

SWI SoundFile_Close =
  (  NUMBER 0x4AEC1 "Close a sound file",
     ENTRY
     (
        R0 = SoundFile_CloseFlags: flags,
        R1 = SoundFile_ID: id
  )  );

// ----------------------------------------------------------------------------

TYPE SoundFile_ReadDataFlags  = .Bits;

CONST
  SoundFile_ReadDataAs16Bit   = SoundFile_ReadDataFlags: %00000001;

SWI SoundFile_ReadData =
  (  NUMBER 0x4AEC2 "Read sound data, optionally translating to 16bit linear",
     ENTRY
     (  R0 = SoundFile_ReadDataFlags: flags,
        R1 = SoundFile_ID: id,
        R2 = .Ref .Data: buffer,
        R3 = .Int: n_samples,
        R4 = .Int: sample_index
     ),
     EXIT
     (  R2 = .Ref .Data: updated_buffer,
        R3 = .Int: updated_n_samples,
        R4 = .Int: updated_sample_index
  )  );

// ----------------------------------------------------------------------------

TYPE SoundFile_MiscOpFlags = .Bits;

SWI SoundFile_MiscOp = ( NUMBER 0x4AEC3 *, ABSENT );

SWI SoundFileMiscOp_ReturnTable =
  (  NUMBER 0x4AEC3,
     ENTRY
     (  R0 # 0 "Return pointer to a sample lookup table",
        R0 | SoundFile_MiscOpFlags: flags,
        R1 = .Int: data_format
     ),
     EXIT
     (  R0 -> .Short: table
  )  );


SWI SoundFileMiscOp_ReturnHandles =
  (  NUMBER 0x4AEC3,
     ENTRY
     (  R0 # 1 "Convert ID to handles",
        R0 | SoundFile_MiscOpFlags: flags,
        R1 = SoundFile_ID: id
     ),
     EXIT
     (  R0 -> SoundFile_Format: format,
        R1 -> SoundFile_Stream: stream
  )  );

// ----------------------------------------------------------------------------

TYPE SoundFile_ServiceIdentifyFlags = .Bits;

SWI Service_SoundFileIdentify =
  (  NUMBER 0x30,
     ENTRY
     (  R0 = SoundFile_ServiceIdentifyFlags: flags,
        R1 # 0x80380 "Attempting to load unknown sound file type",
        R2 -> SoundFile_Stream: stream,
        R3 -> OSGBPB_InfoStamped: info,
        R4 -> SoundFile_Format: format
     ),
     EXIT
     (  R0 -> OS_Error: e_return,
        R1! = .Bool: unclaimed
     )
  )

// ----------------------------------------------------------------------------
