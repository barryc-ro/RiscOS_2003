/* Module C interface */
/* SoundFX            */
/*
 * (C) Acorn NC 1997
 *
 * Author: Alberto Bonamico
 * Date:   14/3/97
 *
 * History:
 *
 * 14/3/97  AB    Coding complete
 *
 * This is the main source file for the SoundFX module for the Acorn NC 1.RCA
 * project
 */

/* SYSTEM INCLUDES */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "nvram.h"

/* MACROS         */

#define IGNORE(p) (p=p)

/* CONSTANTS      */

#define MAX       50
#define MAX_LEN   128
#define MAX_ESA   11
#define FILE_LINE 128

#define PLAYING   1
#define DELETING  1
#define UPDATING  1

/* Strings        */
#ifndef DEBUG
#define MAPFILE         "Resources:$.Resources.SoundFX.EventMap\0"
#define PATH            "Resources:$.Resources.SoundFX.Sounds.\0"
#define SYSVAR          "SoundFXSounds$Path\0"
#else
#define MAPFILE         "$.Build.sources.audio.soundfx.resources.rca.EventMap\0"
#define PATH            "$.Build.sources.audio.soundfx.resources.rca.Sounds.\0"
#define SYSVAR          "SoundFXSounds$Path\0"
#endif

#define FILEPLAY        "fileplay -file \0"
#define FILESTOP        "fileplay -stop\0"
#define NEW             "New (event,file) added\0"
#define DELETED         "Event found and deleted\0"

/* reason codes for SoundFX SWI calls */

#define FX_VERSION 0
#define FX_PLAY    1
#define FX_STOP    2
#define FX_EVENT   3

/* reason codes for SoundFX line commands */

#define FXPLAY              0
#define FXTRIGGER           1
#define FXSTOP              2
#define FXEVENT             3
#define FXREMOVEEVENT       4
#define FXEVENTCLEARALL     5
#define FXLIST              6

/* reason codes for lookup procedure       */

#define LOOKUP_EVENT        0
#define LOOKUP_FILE         1
#define LOOKUP_OVERRIDE     2
#define LOOKUP_DELETE       3
#define LOOKUP_DEL_ALL      5
#define LOOKUP_LIST         6

/* global flags */

#define FLAGS_CALLBACK_SET	(1<<0)

/* GLOBALS             */

static _kernel_oserror SoundFX_error = { 0x4ef40, "SoundFX: Unknown SWI\n" };
static _kernel_oserror SoundFX_file_not_found = { 0x4ef40, "SoundFX: error while opening MAPFILE\n" };

static int  VERSION_NUMBER = 001;
static char buffer[FILE_LINE];
static int Flags = 0;

struct event_table {
       char event[MAX_ESA];
       char file[MAX_LEN];
    } ev_tab[MAX];

/* FUNCTION PROTOTYPES */

int SoundFXPlay(char* string, void *pw);
int SoundFXTrigger(char* string, void *pw);
int SoundFXStop(void *pw);
int SoundFXList(void);
int SoundFXEvent(char* string);
int SoundFXRemoveEvent(char* string);
int SoundFXEventClearAll(void);
char *lookup(int field, char* event);
void soundfx_play_entry(void);


/* FUNCTIONS    */

_kernel_oserror *SoundFX_swi(int swi_no, _kernel_swi_regs *in,  void *private_word)
{
 char r2_buffer[80];

 IGNORE(private_word);

 switch ( swi_no )
   {
   case FX_VERSION : /* SoundFX_Version , SYS 0x4ef40 */
          {
           in->r[0] = VERSION_NUMBER;
           in->r[1] = 0;
            return NULL;
          }
   case FX_PLAY : /* SoundFX_Play , SYS 0x4ef41 */
          {
           if ( in->r[0] == 0) /* r1 is an event */
            {
            sprintf(r2_buffer, "0x%08X", in->r[1]);
            SoundFXTrigger(r2_buffer, private_word);
              return NULL;
            }

           if ( in->r[0] == 1) /* r1 is a filename */
            {
            SoundFXPlay((char *) in->r[1], private_word);
              return NULL;
            }
          }
   case FX_STOP : /* SoundFX_Stop , SYS 0x4ef42 */
          {
           SoundFXStop(private_word);
           return NULL;
          }
   case FX_EVENT : /* SoundFX_Event , SYS 0x4ef43 */
          {
          switch ( in->r[0] )
           {
           case 0 :
            {
            if ( in->r[2] == -1 )
               {
                 lookup( LOOKUP_DEL_ALL, NULL); /* r0=0 && r2=-1 -> delete all event mappings */
                 return NULL;
               }

            sprintf(r2_buffer, "0x%08X %s", in->r[2], (char *)in->r[1]);
            SoundFXEvent(r2_buffer);
            return NULL;
            }
           case 1 :
                {
                sprintf(r2_buffer, "0x%08X", in->r[2]);
                SoundFXRemoveEvent(r2_buffer);
                return NULL;
                }
           } /* switch */
          } /* case FX_EVENT */
   default : return &SoundFX_error;
   } /* switch */
}

_kernel_oserror *SoundFX_init(char* cmd_tail, int podule_base, void *pw)
{
  int len = 0;
  FILE *map;
  _kernel_oserror *err = NULL;
  int format=0,i=0,j=0;
  char ch,*event_no,*event_name;

  IGNORE(podule_base);
  IGNORE(pw);

  len = strlen (PATH);

  err = _swix (OS_SetVarVal,_IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4), SYSVAR, PATH, len, 0, 4);

  if ( ( map=fopen(MAPFILE,"r") ) == NULL )
     return &SoundFX_file_not_found;

  fscanf(map,"%s %d\n",buffer,&format);

  while( !feof(map) )
  {
  ch = fgetc(map);
  if ( ch == '#' ) fgets(buffer,FILE_LINE,map);
  if ( ch == '0' )
     {
     event_no = ev_tab[i].event;
     fgets(buffer,FILE_LINE,map);

     event_no[0] = ch;

     for (j = 1; j < MAX_ESA-1;j++)
      {
      event_no[j] = buffer[j-1];
      }
     event_no[MAX_ESA-1] = '\0';

     event_name = ev_tab[i].file;

     j=10;
     while( buffer[j] != NULL )
      {
      event_name[j-10] = buffer[j];
      j++;
      }

     event_name[j-11] = '\0';
     strcpy(ev_tab[i].file,event_name);
     i++;
     }
   }

 fclose(map);
 return NULL;
}

_kernel_oserror *SoundFX_commands(char *argv, int argc, int cmd_no, void *pw)
{

IGNORE(argc);
IGNORE(pw);

switch ( cmd_no )
   {
   case FXPLAY :
          {
           SoundFXPlay(argv,pw);
           break;
          }
   case FXTRIGGER :
          {
           SoundFXTrigger(argv,pw);
           break;
          }
   case FXSTOP :
          {
           SoundFXStop(pw);
           break;
          }
   case FXEVENT :
          {
           SoundFXEvent(argv);
           break;
          }
   case FXREMOVEEVENT :
          {
           SoundFXRemoveEvent(argv);
           break;
          }
   case FXEVENTCLEARALL :
          {
           SoundFXEventClearAll();
           break;
          }
   case FXLIST :
          {
           lookup(LOOKUP_LIST,NULL);
           break;
          }
   }
return NULL;
}

_kernel_oserror *soundfx_play_handler(_kernel_swi_regs *r, void *pw)
{
  _swix (OS_CLI,_IN(0),buffer);
  Flags &= ~FLAGS_CALLBACK_SET;
  return NULL;
}

void SetCallBack(void *pw)
{
  if (!(Flags & FLAGS_CALLBACK_SET))
  {
    _swix( OS_AddCallBack, _INR(0,1), soundfx_play_entry, pw );
    Flags |= FLAGS_CALLBACK_SET;
  }
}

int SoundFXOn( void )
{
  int state, e;
  _kernel_oserror *err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), "BrowserBeepStatus", &state, 0, &e );
  return ((err == NULL) && (e > 0)) ? state : 0;
}

int SoundFXPlay(char* file, void *pw)
{
 if ( SoundFXOn() )
 {
   char *event,path[80];
   
   if ( (event = lookup(LOOKUP_FILE,file)) != NULL )
   {
   strcpy(path,PATH);
   strcat(path,event);
   
   strcpy(buffer,FILEPLAY);
   strcat(buffer,path);
   
   SetCallBack(pw);
   return PLAYING;
   }
 }
 return NULL;
}

int SoundFXTrigger(char* event, void *pw)
{
 if ( SoundFXOn() )
 {
   char *e=event;
   char path[80],*file;
   int i=0;
   
   while (e[i] >= ' ' || e[i] == '\t')
   {
   e[i]=event[i];
   i++;
   }
   e[i]='\0';
   
   if ( (file = lookup(LOOKUP_EVENT,event)) != NULL )
    {
    strcpy(path,PATH);
    strcat(path,file);
    strcpy(buffer,FILEPLAY);
    strcat(buffer,path);
    SetCallBack(pw);
    return PLAYING;
    }
 }
 return NULL;
}

int SoundFXStop(void *pw)
{
 if ( SoundFXOn() )
 {
   strcpy(buffer,FILESTOP);
   SetCallBack(pw);
 }
 return NULL;
}

int SoundFXEvent(char* event)
{
  lookup(LOOKUP_OVERRIDE,event);
  return UPDATING;
}

int SoundFXRemoveEvent(char* event)
{
  if ( lookup(LOOKUP_DELETE,event) != NULL)
     return DELETING;
  else
     return NULL;
}

int SoundFXEventClearAll()
{
if ( lookup( LOOKUP_DEL_ALL, NULL) != NULL )
   return DELETING;
else
   return NULL;
}


char *lookup(int field, char* event)
{

char *file=event;
char *event_num=event;
int i=0,ref=0,j=0;

if (field == LOOKUP_EVENT)
 {
 while (event_num[i] >= ' ' || event_num[i] == '\t')
 {
 event_num[i]=event[i];
 i++;
 }
 event_num[i]='\0';

 for (i=0;i<MAX;i++)
     {
     if ( strcmp(ev_tab[i].file,"")==0) break;
     if ( strcmp(ev_tab[i].event,event_num)==0 )
        return ev_tab[i].file;
     }
  }

if (field == LOOKUP_FILE)
 {
 while (file[i] >= ' ' || file[i] == '\t')
 {
 file[i]=event[i];
 i++;
 }
 file[i]='\0';

 for (i=0;i<MAX;i++)
     {
     if ( strcmp(ev_tab[i].file,"")==0)
       return NULL;

     if ( strcmp(ev_tab[i].file,file)==0 )
        return ev_tab[i].file;
     }
 }

if (field == LOOKUP_OVERRIDE)
 {
  while (event_num[i] > ' ')
   {
   event_num[i]=event[i];
   i++;
   }
   event_num[i]='\0';
   ref = ++i;

   for (i=0;i<MAX;i++)
     {
     if ( strcmp(ev_tab[i].event,event_num)==0 ) /* event already in the table -> update */
       {
         j = ref;
        while (event_num[j] >= ' ')
         {
         file[j-ref]=event[j];
         j++;
         }
         file[j-ref]='\0';
        strcpy(ev_tab[i].file,file);

        return ev_tab[i].file;
       }
     else /* event was not yet in the table -> insert new event-file */
     if ( strcmp(ev_tab[i].file,"")==0 || strcmp(ev_tab[i].file,"empty")==0 )
        {
        strcpy(ev_tab[i].event,event_num);

          j = ref;
         while (event_num[j] >= ' ')
          {
          file[j-ref]=event[j];
          j++;
          }
          file[j-ref]='\0';

        strcpy(ev_tab[i].file,file);
        return NEW;
      }
     }
 }

if (field==LOOKUP_DELETE)
 {
 while (event_num[i] >= ' ' || event_num[i] == '\t')
 {
 event_num[i]=event[i];
 i++;
 }
 event_num[i]='\0';

 for (i=0;i<MAX;i++)
     {
     if ( strcmp(ev_tab[i].file,"")==0) return NULL;
     if ( strcmp(ev_tab[i].event,event_num)==0 )
        {
        strcpy(ev_tab[i].event,"empty\0");
        strcpy(ev_tab[i].file,"empty\0");
        return DELETED;
        }
     }
  }

if (field==LOOKUP_DEL_ALL)
 {
 for (i=0;i<MAX;i++)
     {
     strcpy(ev_tab[i].event,"");
     strcpy(ev_tab[i].file,"");
     }
 return DELETED;
 }

if (field==LOOKUP_LIST)
 {
 for (i=0;i<MAX;i++)
     {
     if (strcmp(ev_tab[i].file,"")==0) return NULL;
     if (strcmp(ev_tab[i].file,"empty")!=0)
        printf("Event number: %s -+- File name: %s\n",ev_tab[i].event,ev_tab[i].file);
     }
 }

return NULL;
}
