DEFPROCMemory
LOCAL er$
er$="Memory"
PRINT "PROCMemory"
[OPT I%


.memoryStartVal% EQUD memoryStart%

\----

.startMem%

    STMDB R13!,{R14}

    LDR R3,memoryStartVal%

    MOV R0,#6
    SWI "XOS_Module"

    STR R2,[R12]

    MOVVS R3,#0     \  Flag an error - and dont's start module
    BVS   startMemX%

    MOV R10,R12     \ Use R10 as tempory private word pointer, for sound installation
    MOV R12,R2
    STR R3,[R12,#work_memSize%]
    STR R10,[R12,#work_privateWord%]

.startMemX%

    LDMIA R13!,{PC}

\ -------------------------------- Workspace routines ------------------------

.initWorkspace%

    STMDB R13!,{R14}

    MOV   R0,#0
    STR   R0,[R12,#work_currentDriver%] \ No driver installed yet

    STR   R0,[R12,#work_SampleFrequency%]
    STR   R0,[R12,#work_SamplePeriod%]

    STR   R0,[R12,#work_SoundActive%]   \ No sound currently active

    STR   R0,[R12,#work_ControlWord%]   \ Control word for Replay

    STR   R0,[R12,#work_ImmediateHandlers%]
    STR   R0,[R12,#work_CallBackHandlers%]
    STR   R0,[R12,#work_ProcessHandlers%]

    \ .. Initialise handler table by setting handler_Address% entries to 0

    ADD   R0,R12,#work_handlerTable%   \ Position of table
    MOV   R1,#handlerMax%              \ Number in table
    MOV   R2,#0

.initWorkHandlerTableLoop%

    STR   R2,[R0,#handler_Address%]    \ Store 0 in handler_Address%
    ADD   R0,R0,#handlerTableLen%      \ Increment to next table entry
    SUBS  R1,R1,#1                     \ Decrement count
    BNE   initWorkHandlerTableLoop%    \ Branch to start of loop


    \ .. Initialise driver table by setting driver_Address% entries to 0

    ADD   R0,R12,#work_driverTable%    \ Position of table
    MOV   R1,#driverMax%               \ Number in table
    MOV   R2,#0

.initWorkDriverTableLoop%

    STR   R2,[R0,#driver_Address%]     \ Store 0 in handler_Address%
    ADD   R0,R0,#driverTableLen%       \ Increment to next table entry
    SUBS  R1,R1,#1                     \ Decrement count
    BNE   initWorkDriverTableLoop%     \ Branch to start of loop

    MOV   R0,#0
    STR   R0,[R12,#work_callBack_Active%]
    STR   R0,[R12,#work_callBack_Count%]
    STR   R0,[R12,#work_CallBack_BufferFullCount%]
    STR   R0,[R12,#work_CallBack_CurrentSoundBuffer%]
    STR   R0,[R12,#work_CallBack_CurrentOutBuffer%]

    MOV   R0,#defaultNumCallBackBuffers%
    STR   R0,[R12,#work_CallBack_numCallBackBuffers%]

    LDMIA R13!,{PC}
]
ENDPROC
