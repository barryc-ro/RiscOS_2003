   10DEFPROCLinear
   20LOCAL er$
   30er$="Linear"
   40PRINT "PROCLinear"
   50[OPT I%
   60
   70\ ------------------------- Linear driver --------------------------
   80
   90\ ---------
  100.installLinearDriver%      \ Set up the registers and table for
  110                           \ Sound_LinearHandler and call installDriver
  120    STMDB R13!,{R14}
  130
  140    ADD   R0,R12,#work_DriverEntryTable%  \ Get table address
  150
  160    ADR   R1,linearDriverInstall%           \ Install entry
  170    STR   R1,[R0,#driverEntry_Install%]
  180
  190    ADR   R1,linearDriverRemove%            \ Remove entry
  200    STR   R1,[R0,#driverEntry_Remove%]
  210
  220    ADR   R1,linearDriverSampleRate%        \ Sample rate entry
  230    STR   R1,[R0,#driverEntry_SampleRate%]
  240
  250    MOV   R1,#0                             \ No volume entry
  260    STR   R1,[R0,#driverEntry_Volume%]
  270
  280    MOV   R1,#0
  290    STR   R1,[R0,#driverEntry_Mixer%]       \ No mixer entry
  300
  310
  320    LDR   R1,[R12,#work_privateWord%]       \ Parameter
  330
  340    MOV   R2,#0                             \ Flags
  350
  360    ADR   R3,linearDriverName%              \ Driver name
  370
  380]
  390IF debug% THEN
  400[OPT I%
  410    SWI "XOS_WriteS"
  420    EQUS "Install linear driver....."+CHR$(0):ALIGN
  430    SWI "XOS_NewLine"
  440    SWI "XOS_WriteS"
  450    EQUS " Table = "+CHR$(0):ALIGN
  460    MOV  R10,R0
  470    BL   printR10
  480    SWI "XOS_WriteS"
  490    EQUS " Parameter = "+CHR$(0):ALIGN
  500    MOV  R10,R1
  510    BL   printR10
  520    SWI "XOS_WriteS"
  530    EQUS " Flags = "+CHR$(0):ALIGN
  540    MOV  R10,R2
  550    BL   printR10
  560    SWI "XOS_WriteS"
  570    EQUS " Name = "+CHR$(0):ALIGN
  580    MOV  R10,R3
  590    BL   printR10
  600]
  610ENDIF
  620[OPT I%
  630
  640    BL    installDriver%
  650
  660    LDMIA R13!,{PC}^
  670
  680\ ------
  690
  700.linearDriverInstall%   \ Install driver using Sound_LinearHandler
  710                        \ R0  = Handler address
  720                        \ R1  = Parameter to pass
  730                        \ R12 = parameter for driver
  740                        \ R14 already on stack
  750    STMDB R13!,{R1-R12}
  760
  770    MOV   R5,R0                   \ Temorary store R0 and R1
  780    MOV   R6,R1
  790
  800    MOV   R0,#0                   \ Get current handler to see if already installed
  810    SWI   XSound_LinearHandler%
  820
  830    CMP   R1,R5                   \ Same handler?
  840    CMPEQ R2,R6                   \ Same parameter?
  850
  860    BEQ   linearDriverInstallExit% \ Jump out 'cos already there
  870
  880    \ Now install new driver
  890
  900    MOV   R0,#1                   \ Function code install
  910    MOV   R1,R5                   \ Address
  920    MOV   R2,R6                   \ Parameter
  930    SWI   XSound_LinearHandler%
  940
  950    MOV   R0,R5                   \ Restore R0 if successful
  960    MOVVS R0,#0                   \ Or 0 if error
  970
  980.linearDriverInstallExit%
  990
 1000    LDMIA R13!,{R1-R12,PC}^
 1010
 1020\ -----------
 1030
 1040.linearDriverRemove%  \ Remove driver using Sound_LinearHandler
 1050                      \ R14 already on stack
 1060
 1070    STMDB R13!,{R0-R2}
 1080
 1090    \ To remove handler set new handler to 0
 1100
 1110    MOV   R0,#1       \ Function code install
 1120    MOV   R1,#0       \ Null handler
 1130    MOV   R2,#0
 1140    SWI   XSound_LinearHandler%
 1150
 1160    LDMIA R13!,{R0-R2,PC}^
 1170
 1180\ -----------
 1190
 1200.linearDriverSampleRate%  \ Choose rate and/or return current rate
 1210                          \ R0 = 0 to read
 1220                          \    > 0 to set to R0 = frequency
 1230                          \ On exit:
 1240                          \ R0 = current frequency
 1250    STMDB R13!,{R1-R12}
 1260
 1270    CMP   R0,#0
 1280    BEQ   linearDriverSampleRateRead%
 1290
 1300    \ Set the rate to R0
 1310
 1320    \ Find the nearest
 1330
 1340     MOV   R4,R0              \ R4 = rate required
 1350
 1360     MOV   R0,#0              \ Read number of rates available
 1370     SWI   Sound_SampleRate%  \ R1 = number of rates available
 1380
 1390     MOV   R5,R1              \ R5 = Upper limit
 1400
 1410.linearDriverSampleRateLoop%
 1420
 1430     MOV   R0,#2              \ Convert from index to rate
 1440     SWI   Sound_SampleRate%  \ R2 = rate
 1450     CMP   R2,R4
 1460     BLT   linearDriverSampleRateClosest%  \ Best rate is between R1 and R5
 1470
 1480     CMP   R1,#1              \ Are there any more rates
 1490     MOVNE R5,R1              \ Change upper limit
 1500     MOVNE R6,R2              \ Store upper rate
 1510     SUBNE R1,R1,#1           \ decrement index
 1520     BNE   linearDriverSampleRateLoop%  \ Try again
 1530
 1540.linearDriverSampleRateClosest%   \ Check for nearest between R1 and R5
 1550
 1560     CMP   R1,R5                      \ No range to check
 1570     BEQ   linearDriverSampleRateSet%
 1580
 1590     \ R2 = lower rate, R1 = index
 1600     \ R6 = upper rate, R5 = index
 1610
 1620     SUB   R2,R4,R2
 1630     SUB   R6,R6,R4
 1640
 1650     CMP   R2,R6       \ Who is nearest
 1660     MOVGT R1,R5       \ If nearest to R6 then set index to R5
 1670
 1680.linearDriverSampleRateSet%
 1690
 1700     \ Chosen index is R1
 1710
 1720     MOV   R0,#3              \ Select rate from index in R1
 1730     SWI   Sound_SampleRate%
 1740
 1750.linearDriverSampleRateRead%
 1760
 1770    MOV   R0,#1
 1780    SWI   Sound_SampleRate%  \ Frequency returned in R2
 1790
 1800    MOV   R0,R2               \ Return it in R0
 1810
 1820    LDMIA R13!,{R1-R12,PC}^
 1830
 1840\ -----------
 1850
 1860.linearDriverName% EQUS "Sound Linear Handler"
 1870                   EQUB 0
 1880                   ALIGN
 1890]
 1900ENDPROC
