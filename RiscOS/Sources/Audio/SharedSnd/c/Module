   10DEFPROCModule
   20LOCAL er$
   30er$="Module"
   40PRINT "PROCModule"
   50[OPT I%
   60
   70.module%     \ Module header
   80
   90   EQUD  0  \ Not an application
  100   EQUD  initCode%-module%
  110   EQUD  finalCode%-module%
  120   EQUD  0  \  No service calls
  130   EQUD  title%-module%
  140   EQUD  help%-module%
  150   EQUD  commandTable%-module%
  160.swiBaseNum%
  170   EQUD  swiBase% \ SWI Base number
  180   EQUD  swiHandler%-module%
  190   EQUD  swiTable%-module%  \ SWI Decode table
  200   EQUD  0  \ SWI Decode code
  210
  220.copyr% EQUS copyRight$
  230.title% EQUS title$+CHR$(0):ALIGN
  240.help%  EQUS "Shared Sound"+CHR$(9)+version$+date$+CHR$(0):ALIGN
  250
  260\
  270.initCode%
  280
  290   STMDB R13!,{R0-R12,R14}
  300
  310   BL    startMem%               \ Get memory
  320   BVS   initMemError%
  330
  340   \ R10 = private word
  350   \ R12 = memory pointer [R10]
  360
  370   BL    initWorkspace%          \ Initialise workspace
  380
  390]
  400IF doCBAI% THEN
  410[OPT I%
  420
  430   BL    InstallCBAI%
  440
  450]
  460ENDIF
  470[OPT I%
  480
  490   BL    installDefaultDriver%   \ Preferably Sound_LinearHandler or ChannelHandler
  500
  510   LDMIA R13!,{R0-R12,PC}^
  520\
  530
  540.initMemError%
  550   LDMIA R13!,{R0-R12,R14}
  560   ADR   R0,initMemErrMesg%
  570   ORRS  PC,R14,#Overflow_Flag
  580\
  590.initMemErrMesg%
  600    EQUD  &1E6
  610    EQUS  "Not enough memory for "+title$
  620    EQUB  0
  630    ALIGN
  640\
  650
  660\ -------------------------------------------------
  670
  680.finalCode%
  690
  700   STMDB R13!,{R0-R12,R14}
  710
  720   LDR   R12,[R12]          \ Get work area
  730
  740]
  750IF doCBAI% THEN
  760[OPT I%
  770
  780   BL    RemoveCBAI%
  790
  800]
  810ENDIF
  820[OPT I%
  830
  840   BL    releaseDriver%
  850
  860   LDMIA R13!,{R0-R12,PC}^
  870\
  880\ -------------------------------------------------
  890
  900.serviceCode%      \ Not used
  910
  920   MOV   PC,R14
  930
  940
  950\ -----------------  * Comands
  960
  970.commandTable%
  980   EQUD 0   \ No more commands
  990
 1000\ -----------------  SWI'S
 1010
 1020.swiTable%
 1030    EQUS swiName$
 1040    EQUB 0
 1050    EQUS "InstallHandler"
 1060    EQUB 0
 1070    EQUS "RemoveHandler"
 1080    EQUB 0
 1090    EQUS "HandlerInfo"
 1100    EQUB 0
 1110    EQUS "HandlerVolume"
 1120    EQUB 0
 1130    EQUS "HandlerSampleType"
 1140    EQUB 0
 1150    EQUS "HandlerPause"
 1160    EQUB 0
 1170    EQUS "SampleRate"
 1180    EQUB 0
 1190    EQUS "InstallDriver"
 1200    EQUB 0
 1210    EQUS "RemoveDriver"
 1220    EQUB 0
 1230    EQUS "DriverInfo"
 1240    EQUB 0
 1250    EQUS "DriverVolume"
 1260    EQUB 0
 1270    EQUS "DriverMixer"
 1280    EQUB 0
 1290    EQUS "CheckDriver"
 1300    EQUB 0
 1310    EQUS "ControlWord"
 1320    EQUB 0
 1330    EQUS "HandlerType"
 1340    EQUB 0
 1350
 1360]
 1370IF debug1% THEN
 1380[OPT I%
 1390
 1400    EQUS "Test"
 1410    EQUB 0
 1420    EQUS "Info"
 1430    EQUB 0
 1440]
 1450ENDIF
 1460[OPT I%
 1470
 1480    EQUB 0
 1490    ALIGN
 1500
 1510\
 1520.swiHandler%
 1530
 1540    MOV   R10,R12
 1550    LDR   R12,[R12]    \ R12 = pointer to RMA data block
 1560    CMP   R11,#(EndOfJumpTable% - jumpTable%)/4
 1570    ADDCC PC,PC,R11,LSL #2
 1580    B     UnknownSWIerror%
 1590
 1600.jumpTable%
 1610
 1620    B     swiInstallHandler%          ;  OK
 1630    B     swiRemoveHandler%           ;  OK
 1640
 1650    B     swiHandlerInfo%             ;  OK
 1660    B     swiHandlerVolume%           ;  OK
 1670
 1680    B     swiHandlerSampleType%       ;  not in this version
 1690    B     swiHandlerPause%            ;  not in this version
 1700
 1710    B     swiSampleRate%              ;  OK
 1720
 1730    B     swiInstallDriver%           ;  OK
 1740    B     swiRemoveDriver%            ;  OK
 1750    B     swiDriverInfo%              ;  OK
 1760    B     swiDriverVolume%            ;  OK
 1770    B     swiDriverMixer%             ;  OK
 1780    B     driverCheck%                ;
 1790    B     swiControlWord%             ;
 1800
 1810    B     swiHandlerType%             ;
 1820
 1830]
 1840IF debug1% THEN
 1850[OPT I%
 1860
 1870    B     swiTest%                    ;  For debugging only
 1880    B     swiInfo%                    ;  For debugging only
 1890
 1900]
 1910ENDIF
 1920[OPT I%
 1930
 1940.EndOfJumpTable%
 1950.UnknownSWIerror%
 1960    ADR   R0,errMesg%
 1970    ORRS  PC,R14,#Overflow_Flag
 1980.errMesg%
 1990    EQUD  &1E6
 2000    EQUS  "Unknown module operation"
 2010    EQUB  0
 2020    ALIGN
 2030
 2040]
 2050ENDPROC
 2060
