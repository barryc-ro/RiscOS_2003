DEFPROCModule
LOCAL er$
er$="Module"
PRINT "PROCModule"
[OPT I%

.module%     \ Module header

   EQUD  0  \ Not an application
   EQUD  initCode%-module%
   EQUD  finalCode%-module%
   EQUD  0  \  No service calls
   EQUD  title%-module%
   EQUD  help%-module%
   EQUD  commandTable%-module%
.swiBaseNum%
   EQUD  swiBase% \ SWI Base number
   EQUD  swiHandler%-module%
   EQUD  swiTable%-module%  \ SWI Decode table
   EQUD  0  \ SWI Decode code
   EQUD  0  \ No messages file
   EQUD  flagsword%-module%

.copyr% EQUS copyRight$
.title% EQUS title$+CHR$(0):ALIGN
.help%  EQUS "Shared Sound"+CHR$(9)+FNget_srccommit_version+CHR$(0):ALIGN
.flagsword% EQUD 1               \ 32-bit compatible

\
.initCode%

   STMDB R13!,{R0-R12,R14}

   BL    startMem%               \ Get memory
   BVS   initMemError%

   \ R10 = private word
   \ R12 = memory pointer [R10]

   BL    initWorkspace%          \ Initialise workspace

]
IF doCBAI% THEN
[OPT I%

   BL    InstallCBAI%

]
ENDIF
[OPT I%

   BL    installDefaultDriver%   \ Preferably Sound_LinearHandler or ChannelHandler

   CMP   R0,#0                   \ Clear V
   LDMIA R13!,{R0-R12,PC}
\

.initMemError%
   LDMIA R13!,{R0-R12,R14}
   ADR   R0,initMemErrMesg%
   CMP   R0,#&80000000
   CMNVC R0,#&80000000           \ Set V
   MOV   PC,R14
\
.initMemErrMesg%
    EQUD  &1E6
    EQUS  "Not enough memory for "+title$
    EQUB  0
    ALIGN
\

\ -------------------------------------------------

.finalCode%

   STMDB R13!,{R0-R12,R14}

   LDR   R12,[R12]          \ Get work area

]
IF doCBAI% THEN
[OPT I%

   BL    RemoveCBAI%

]
ENDIF
[OPT I%

   BL    releaseDriver%

   CMP   R0,#0              \ Clear V
   LDMIA R13!,{R0-R12,PC}
\
\ -------------------------------------------------

.serviceCode%      \ Not used

   MOV   PC,R14


\ -----------------  * Comands

.commandTable%
   EQUD 0   \ No more commands

\ -----------------  SWI'S

.swiTable%
    EQUS swiName$
    EQUB 0
    EQUS "InstallHandler"
    EQUB 0
    EQUS "RemoveHandler"
    EQUB 0
    EQUS "HandlerInfo"
    EQUB 0
    EQUS "HandlerVolume"
    EQUB 0
    EQUS "HandlerSampleType"
    EQUB 0
    EQUS "HandlerPause"
    EQUB 0
    EQUS "SampleRate"
    EQUB 0
    EQUS "InstallDriver"
    EQUB 0
    EQUS "RemoveDriver"
    EQUB 0
    EQUS "DriverInfo"
    EQUB 0
    EQUS "DriverVolume"
    EQUB 0
    EQUS "DriverMixer"
    EQUB 0
    EQUS "CheckDriver"
    EQUB 0
    EQUS "ControlWord"
    EQUB 0
    EQUS "HandlerType"
    EQUB 0

]
IF debug1% THEN
[OPT I%

    EQUS "Test"
    EQUB 0
    EQUS "Info"
    EQUB 0
]
ENDIF
[OPT I%

    EQUB 0
    ALIGN

\
.swiHandler%

    MOV   R10,R12
    LDR   R12,[R12]    \ R12 = pointer to RMA data block
    CMP   R11,#(EndOfJumpTable% - jumpTable%)/4
    ADDCC PC,PC,R11,LSL #2
    B     UnknownSWIerror%

.jumpTable%

    B     swiInstallHandler%          ;  OK
    B     swiRemoveHandler%           ;  OK

    B     swiHandlerInfo%             ;  OK
    B     swiHandlerVolume%           ;  OK

    B     swiHandlerSampleType%       ;  not in this version
    B     swiHandlerPause%            ;  not in this version

    B     swiSampleRate%              ;  OK

    B     swiInstallDriver%           ;  OK
    B     swiRemoveDriver%            ;  OK
    B     swiDriverInfo%              ;  OK
    B     swiDriverVolume%            ;  OK
    B     swiDriverMixer%             ;  OK
    B     driverCheck%                ;
    B     swiControlWord%             ;

    B     swiHandlerType%             ;

]
IF debug1% THEN
[OPT I%

    B     swiTest%                    ;  For debugging only
    B     swiInfo%                    ;  For debugging only

]
ENDIF
[OPT I%

.EndOfJumpTable%
.UnknownSWIerror%
    ADR   R0,errMesg%
    CMP   R0,#&80000000
    CMNVC R0,#&80000000       \ Set V
    MOV   PC,R14
.errMesg%
    EQUD  &1E6
    EQUS  "Unknown module operation"
    EQUB  0
    ALIGN

]
ENDPROC

