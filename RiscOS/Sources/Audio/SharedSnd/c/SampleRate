   10DEFPROCSampleRate
   20LOCAL er$
   30er$="Sample Rate"
   40PRINT "PROCSampleRate"
   50[OPT I%
   60
   70\ ------------------------------- Sample rate routines ----------------------
   80
   90.newRate%  \ Used from handler routine to sort out details
  100           \ R0 = New frequency
  110
  120   STMDB R13!,{R0-R12,R14}
  130
  140   \ Need new sample period in R1
  150
  160    LDR   R6,rateConst%
  170    MOV   R2,R0
  180    BL    clockCalc%
  190
  200    MOV   R1,R3   \ Return sample period in R1
  210
  220
  230\   LDR   R3,rateConst%   \ R3.R2
  240\   MOV   R2,#0
  250\   MOV   R4,R0    \ DIV frequency
  260\
  270\   BL    div      \ R3 = Sample period
  280\
  290\   MOV   R1,R3
  300
  310   BL    newSampleRateSet%
  320
  330   LDMIA R13!,{R0-R12,PC}
  340
  350
  360
  370\ ------------------
  380
  390
  400
  410.newSampleRate% \ The sample rate has changed,  sort it out
  420                \ On entry R0 = 0 to read, >0 to set new rate = R0
  430
  440   STMDB R13!,{R0-R12,R14}
  450
  460]
  470IF debug% THEN
  480[OPT I%
  490    SWI "XOS_WriteS"
  500    EQUS "New sample rate"+CHR$(0):ALIGN
  510    SWI "XOS_NewLine"
  520]
  530ENDIF
  540[OPT I%
  550
  560   BL    sampleRate%  \ Returns R0 = frequency, R1 = period
  570
  580   LDR   R2,[R12,#work_SampleFrequency%] \ Has the rate changed?
  590   CMP   R0,R2
  600   BEQ   newSampleRateExit%  \ Nothing to do
  610
  620   BL    stopSound%        \ Stop play and wait for fill to finish
  630
  640   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
  650   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
  660
  670   \     then calculate the fractional step for each handler
  680
  690   ADD   R1,R12,#work_handlerTable%   \ Get handler table
  700
  710   MOV   R6,#handlerMax%              \ Count
  720
  730.newSampleRateLoop%
  740
  750   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
  760   CMP   R0,#0
  770   BEQ   newSampleRateNext%
  780
  790   LDR   R0,[R1,#handler_SampleFrequency%]
  800   CMP   R0,#0
  810   BEQ   newSampleRateNext%                    \ No rate stored
  820
  830   BL    sampleRateFraction%
  840
  850   STR   R0,[R1,#handler_Fraction%]
  860
  870.newSampleRateNext%
  880
  890   ADD   R1,R1,#handlerTableLen%
  900   SUBS  R6,R6,#1
  910   BNE   newSampleRateLoop%
  920
  930   BL    startSound%       \ Start sound again
  940
  950.newSampleRateExit%
  960
  970    LDMIA R13!,{R0-R12,PC}
  980
  990\ ---------
 1000
 1010.newSampleRateSet%
 1020
 1030    STMDB R13!,{R14}
 1040
 1050   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
 1060   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
 1070
 1080   \     then calculate the fractional step for each handler
 1090
 1100   ADD   R1,R12,#work_handlerTable%   \ Get handler table
 1110
 1120   MOV   R6,#handlerMax%              \ Count
 1130
 1140.newSampleRateSetLoop%
 1150
 1160   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
 1170   CMP   R0,#0
 1180   BEQ   newSampleRateSetNext%
 1190
 1200   LDR   R0,[R1,#handler_SampleFrequency%]
 1210   CMP   R0,#0
 1220   BEQ   newSampleRateSetNext%                    \ No rate stored
 1230
 1240   BL    sampleRateFraction%
 1250
 1260   STR   R0,[R1,#handler_Fraction%]
 1270
 1280.newSampleRateSetNext%
 1290
 1300   ADD   R1,R1,#handlerTableLen%
 1310   SUBS  R6,R6,#1
 1320   BNE   newSampleRateSetLoop%
 1330
 1340   LDMIA R13!,{PC}
 1350
 1360
 1370\ ---------
 1380
 1390.sampleRate%        \ Set or read sample rate
 1400
 1410                    \ On entry:
 1420                    \ R0 = 0 to read
 1430                    \    > 0 for sample frequency required
 1440                    \ On exit:
 1450                    \ R0 = current frequency      (provided by driver)
 1460                    \ R1 = current sample period  (calculated by shared sound)
 1470
 1480    STMDB R13!,{R2-R12,R14}
 1490
 1500    BL    driverSampleRate%                \ Get current rate from driver
 1510    CMP   R0,#0                            \ Failed if 0
 1520    BEQ   sampleRateExit%
 1530
 1540    \ R0  will return sample frequency.....
 1550
 1560    \ Now calculate sample period
 1570
 1580\    LDR   R3,rateConst%   \ R3.R2
 1590\    MOV   R2,#0
 1600\    MOV   R4,R0    \ DIV frequency
 1610\
 1620\    BL    div
 1630
 1640    LDR   R6,rateConst%
 1650    MOV   R2,R0
 1660    BL    clockCalc%
 1670
 1680    MOV   R1,R3   \ Return sample period in R1
 1690
 1700.sampleRateExit%
 1710
 1720    LDMIA R13!,{R2-R12,PC}
 1730
 1740\----------
 1750
 1760.sampleRateFraction%    \ Get the fractional step required for given rate and current rate
 1770                        \ On entry:
 1780                        \   R0 = Frequency required
 1790                        \ On exit:
 1800                        \   R0 = Fraction in 8.24
 1810    STMDB R13!,{R1-R12,R14}
 1820
 1830    LDR   R2,[R12,#work_SampleFrequency%]    \ Current frequency
 1840    MOV   R6,R0                              \ Frequency required
 1850
 1860    BL    clockCalc%       \ Returns fraction in R3
 1870
 1880    MOV   R0,R3            \ Return in R0
 1890
 1900    LDMIA R13!,{R1-R12,PC}
 1910
 1920\ ------------------
 1930
 1940.rateConst%   EQUD &3D090000
 1950\
 1960
 1970.clockCalc% \ Calculate  fraction count
 1980            \ Pass rate in R6, actual rate in R2
 1990  STMDB R13!,{R14}
 2000
 2010  MOV R9,R2      \ Store actual rate
 2020  MOV R4,R2      \ actual rate ready for next calculation
 2030
 2040  MOV R2,#0      \ Calculate whole part
 2050  MOV R3,R6
 2060  \ R4=actual rate
 2070  BL div
 2080  MOV R10,R3
 2090                \ Calculate fraction
 2100                \ R2 = Remainder from above
 2110  MOV R3,#0
 2120  \ R4=actual rate
 2130  MOV R4,R9
 2140  BL div
 2150
 2160  MOV R3,R3,LSR #8 \ 24 Bit fraction
 2170  ADD R3,R3,R10,LSL #24 \ 8 Bit whole part
 2180
 2190  LDMIA R13!,{PC}^
 2200\
 2210.div \ Divide R3.R2 by R4 , R3 = result, R2 = remainder
 2220  MOV R5,#32 \ Number of bits in divisor
 2230.dloop
 2240  MOVS  R3,R3,LSL #1
 2250  MOV   R2,R2,LSL #1
 2260  ORRCS R2,R2,#1
 2270  CMPS  R2,R4
 2280  BCC   dnext
 2290  SBC   R2,R2,R4
 2300  ADD   R3,R3,#1
 2310.dnext
 2320  SUBS  R5,R5,#1
 2330  BNE dloop
 2340  MOV PC,R14
 2350\
 2360]
 2370ENDPROC
