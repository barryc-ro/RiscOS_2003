	GBLL	debug
	GBLL	CBAIDisableInt

XOS_SWINumberFromString	*	&20039

; The process involves receiving a 'fill this buffer' instruction
; from a driver.
; The fill code then fills and mixes any available data from
; any immediate handlers whith each handler doing it's own mixing.
; Then any call back streams are called to give any available data
; with the fill code mixing it.
; Finally, call back streams are called to make sure that the call
; back buffer is full.
; At the end of each call back call process handlers can be called.
; The same handler code for each stage can be used with flags to
; indicate which type of handler is being processed ans with the
; data pointers set appropriately.

debug		SETL {FALSE}
CBAIDisableInt	SETL {TRUE}

 ;-------------------------- Sound Handler Code ------------------------

stopSound
	; Make sure nothing is happening

	STMDB	sp!,{r0,lr}

	MOV	r0,#1
	STR	r0,[ws,#work_SoundPause]    ; Pause flag for handler routine

	; Now wait until no sound is happening

stopSoundLoop


	LDR	r0,[ws,#work_SoundActive]   ; This will be set to 0 at then end of a fill
	CMP	r0,#0
	BNE	stopSoundLoop

	LDMIA	sp!,{r0,pc}

 ; -----------

startSound
	; Set handler going again

	STMDB	sp!,{r0,lr}

	MOV	r0,#0
	STR	r0,[ws,#work_SoundPause]  ; Clear the pause flag

	; Should check that there is a current driver and that it is active...

	LDMIA	sp!,{r0,pc}
 ; -------------------------------

getFillR0
	ADR	r0,fill
	MOV	pc,lr

 ; ----

fill
	; Main fill call for output driver
	; Can be called by a 16 or 8 bit driver
	; It needs to collect and mix data into the final buffer
	; converting the data if necessary.
	; On entry:
	;    r0 = parameter, this should be the SharedSound ws value
	;    r1 = base of buffer
	;    r2 = end of buffer
	;    r3 = flags
	;    r4 = sample frequency or period
	; Added:
	;    r5 = sample period

	STMDB	sp!,{r0-r11,ws,lr}

	LDR	ws,[r0]

	LDR	r0,[ws,#work_SoundPause]     ; Are we in pause state
	CMP	r0,#1
	BEQ	fillExit

	MOV	r0,#1
	STR	r0,[ws,#work_SoundActive]    ; Flag active

	; If there is data in the buffer then this is shown in r3
	MOV	r5,r4
	LDR	r4,[ws,#work_SampleFrequency]         ; Put current rate into r4
	CMP	r4,r5

	BLNE	rateChange                             ; Set a call back to change values

	LDR	r5,[ws,#work_SamplePeriod]            ; Use old values for now

	; First call any immediate handlers

	LDR	r6,[ws,#work_ImmediateHandlers]
	CMP	r6,#0
	MOVNE	r6,#handlerType_Immediate
	BLNE	handler

	; Now get any callBack buffers and mix in
	LDR	r6,[ws,#work_CallBackHandlers]
	CMP	r6,#0
	BEQ	fillExit

	BL	addCallBackBuffer

	; Finally initiate any callbacks required

	BL	callBackHandlerProcess


fillExit
	; Do we need to pass the buffer on to SoundDriver for record?
	LDR	r0,[ws,#work_RecordOn]
	CMP	r0,#0
	BEQ	fillQuit

	; Send to record

	; r0 = Parameter
	; r1 = Base
	; r2 = End
	; r3 = Handler number
	; r4 = Sample frequency
	LDR	r0,[ws,#work_RecordHandlerParameter]
	LDR	r3,[ws,#work_RecordHandle]

	LDR	r9,[ws,#work_RecordHandlerAddress]
	CMP	r9,#0
	BEQ	fillQuit

	MOV	lr,pc   ; Return address
	MOV	pc,r9    ; Call handler

fillQuit
	MOV	r0,#0
	STR	r0,[ws,#work_SoundActive]    ; Flag finished

	LDMIA	sp!,{r0-r11,ws,pc}

 ; ------------------

rateChange
	; Issue a call back to change the rate values
	STMDB	sp!,{r0,r1,lr}

 [ doCallBack
	ADR	r0,rateChangeCallBack
	LDR	r1,[ws,#work_privateWord]

	; Change here from RJW; we may well be in IRQ mode here, so
	; can't call SWIs directly. Instead jump to SVC mode and
	; protect SVC_R14 first.
	STMFD	R13!,{R8,R9}

	TEQ	PC,PC
	MRSEQ	R9,CPSR		; If in 32-bit mode, R9 = CPSR
	MOVNE	R9,PC		; If in 26-bit mode, R9 = PC+PSR
	ORR	R8,R9,#3	; Preserves 32-bitness
	MSREQ	CPSR_c,R8
	TEQNEP	R8,#0
	MOV	R0,R0
	STMFD	R13!,{R14}

	SWI	XOS_AddCallBack

	LDMFD	R13!,{R14}
	TEQ	PC,PC
	MSREQ	CPSR_c,R9
	TEQNEP	R9,#0
	MOV	R0,R0
	LDMFD	R13!,{R8,R9}


	LDMIA	sp!,{r0,r1,pc}
 |
	MOV	r0,r5   ; New frequency
	BL	newRate

	LDMIA	sp!,{r0,r1,pc}
 ]


 ; ---------


 [ doCallBack


rateChangeCallBack


	STMDB	sp!,{r0-r11,ws,lr}

	LDR	ws,[ws]         ; Get workspace pointer

	; First get current sample frequency and sample period
	; This is provided by the SampleRate routine
	MOV	r0,#0          ; Function code read
	BL	newSampleRate

	LDMIA	sp!,{r0-r11,ws,pc}

 ]


 ; ---------------- Handler stuff ---------------

handler
	; Dummy fill code
	; Used to pass on control to chain of handlers
	; The flags indicate which handlers to call
	; There are three types - immediate, callback and process
	; On entry:
	;    r0 = parameter, this should be the SharedSound ws value
	;    r1 = base of buffer
	;    r2 = end of buffer
	;    r3 = flags
	;    r4 = sample frequency
	;    r5 = sample period
	;    r6 = Handler type

	; Added by SharedSound before calling handlers

	;    r6 = fraction step
	;    r7 = LR Volume

	STMDB	sp!,{r0-r2,r4-r11,ws,lr}

	; Now call each handler in turn, if they match the flag type

	MOV	r11,r6 ; Handler type

	ADD	r8,ws,#work_handlerTable       ; Address of table
	MOV	r9,#handlerMax                  ; Handler count

handlerLoop
	LDR	r10,[r8,#handler_Type]
	CMP	r10,r11
	BNE	handlerNext

	LDR	r10,[r8,#handler_Address]        ; Does this slot contain a handler?
	CMP	r10,#0
	BEQ	handlerNext

	STMDB	sp!,{r1,r2,r4,r5,r8,r9,r11,ws}      ; Will need these preserved

	LDR	r0,[r8,#handler_Parameter]
	LDR	r6,[r8,#handler_Fraction]
	LDR	r7,[r8,#handler_VolumeScaled]
	ADR	r8,FILLCODE_table_start

	; Set those extra flags
	CMN	r7,#0		; If volume != 0xFFFFFFFF
	ORRNE	r3,r3,#1<<30	; then set bit 30
	CMP	r7,#0		; If volume == 0x00000000
	ORREQ	r3,r3,#1<<31	; then set bit 31

	MOV	lr,pc
	MOV	pc,r10                            ; Jump to address
handlerReturn
	BIC	r3,r3,#3<<30	; Clear the volume indicator bits
	LDMIA	sp!,{r1,r2,r4,r5,r8,r9,r11,ws}      ; Will need these preserved

handlerNext
	ADD	r8,r8,#handlerTableLen
	SUBS	r9,r9,#1
	BNE	handlerLoop

handlerExit

	LDMIA	sp!,{r0-r2,r4-r11,ws,pc}

 ; ------------------- Call Back Handler routines

work_CallBack_BufferVal
	DCD	work_CallBack_Buffer

 ; ----

addCallBackBuffer
	; Get pointer to call back buffer if it exists
	; On entry:
 	;    r1 = base of buffer
	;    r2 = end of buffer
	;    r3 = flags
	;    r4 = sample frequency
	;    r5 = sample period
	; On exit:
	;    call back data mixed in if there is some

	STMDB	sp!,{r0-r11,ws,lr}

	SUB	r6,r2,r1
	LDR	r7,[ws,#work_CallBack_BufferSize]

	CMP	r6,r7

	; If the buffer size has changed then need to make changes...
	STR	r6,[ws,#work_CallBack_BufferSize]

	LDR	r5,[ws,#work_CallBack_BufferFullCount]  ; Are there any full buffers?
	CMP	r5,#0
	BGT	addCallBackBuffer_OK

	; Need to flag an overrun
	LDR	r5,[ws,#work_callBack_Active]  ; Is the old call back active?
	CMP	r5,#1

	; If there are no full buffers and the call back is active then we have overrun
	LDREQ	r7,[ws,#work_callBack_Count]   ; If so then increment count and return
	ADDEQ	r7,r7,#1
	STREQ	r7,[ws,#work_callBack_Count]

	; Need to do a volume shift on the buffer to effectivly mix an empty buffer
	; into the existing data
	; This avoids volume fluctuations

	; r1 = Start of SoundDMA buffer
	; r2 = End of SoundDMA buffer
	; r6 = Length

addCallBackBuffer_VolumeShiftLoop
	LDMIA	r1,{r3-r6}

	MACRO
	acbb_vsl	$work1,$work2,$getReg
	; Shift volumes
 [ 0 = 1
	; Old dumb way.
	MOV	$work1,$getReg,LSL #16          ; Put right into work1
	EOR	$getReg,$getReg,$work1,LSR #16  ; and left in getReg

	MOV	$work1,$work1,ASR #1     ; DIV 2

	MOV	$getReg,$getReg,ASR #1   ; DIV 2

	;TST	$getReg,#1<<15           ; Remove any low bit
	;EORNE	$getReg,$getReg,#1<<15
	BIC	$getReg,$getReg,#1<<15

	ADD	$getReg,$getReg,$work1,LSR #16
 |
	; New shiny way
	MOV	$getReg,$getReg,ASR#1
	; Now getReg is perfect except possibly for bit 15 that should be the same as
	; bit 14. Form a word of differences between bits.
	EOR	$work1,$getReg,$getReg,LSL#1
	AND	$work1,$work1,#1<<15
	EOR	$getReg,$getReg,$work1
 ]

	MEND

	acbb_vsl	R11,R12,R3
	acbb_vsl	R11,R12,R4
	acbb_vsl	R11,R12,R5
	acbb_vsl	R11,R12,R6

	STMIA	r1!,{r3-r6}

	CMP	r1,r2
	BLT	addCallBackBuffer_VolumeShiftLoop

	B     addCallBackBuffer_Exit   ; No data available

addCallBackBuffer_OK
	; There are buffers available so use one of these

	; r1 = Start of SoundDMA buffer
	; r2 = End of SoundDMA buffer
	; r6 = Length

	LDR	r5,work_CallBack_BufferVal
	ADD	r5,r5,ws
	;	Align
	ADD	r5,r5,#63
	BIC	r5,r5,#63
	LDR	r7,[ws,#work_CallBack_CurrentSoundBuffer]
	MLA	r0,r6,r7,r5                                    ; Buffer position

	; r0 = Source buffer
	; r1 = DMA buffer
	; r2 = DMA buffer end
	; r3 = Fill flags

	; Copy across (mixing??)

	TST	r3,#1
	BNE	addCallBackBuffer_Mix

	; No mixing

addCallBackBuffer_Loop
	LDMIA	r0!,{r3-r6}
	STMIA	r1!,{r3-r6}

	CMP	r1,r2
	BLT	addCallBackBuffer_Loop

	B	addCallBackBuffer_Final

addCallBackBuffer_Mix
	STMDB	sp!,{ws}

	MVN	r12,#0
	MOV	r12,r12,LSL#16

addCallBackBufferMix_Loop
	LDMIA	r0!,{r3-r6}
	LDMIA	r1,{r7-r10}

	MACRO
	acbbm_l	$work1,$work2,$getReg,$mixReg

 [ 0 = 1
	; Old dumb way
	MOV	$work1,$getReg,LSL #16          ; Put right into work1
	EOR	$getReg,$getReg,$work1,LSR #16  ; and left in getReg

	MOV	$work1,$work1,ASR #1     ; DIV 2

	MOV	$getReg,$getReg,ASR #1   ; DIV 2

	;TST	$getReg,#1<<15           ; Remove any low bit
	;EORNE	$getReg,$getReg,#1<<15
	BIC	$getReg,$getReg,#1<<15

	MOV	$work2,$mixReg,LSL #16          ; Put right into work2
	EOR	$mixReg,$mixReg,$work2,LSR #16  ; and left in mixReg

	MOV	$work2,$work2,ASR #1     ; DIV 2

	MOV	$mixReg,$mixReg,ASR #1   ; DIV 2

	;TST	$mixReg,#1<<15           ; Remove any low bit
	;EORNE	$mixReg,$mixReg,#1<<15
	BIC	$mixReg,$mixReg,#1<<15

	; Now mix
	ADD	$getReg,$getReg,$mixReg
	ADD	$work1,$work1,$work2

	ADD	$getReg,$getReg,$work1,LSR #16
 |
	; New shiny way
	; getReg = abcdefgh
	; mixReg = ijklmnop
	; target = qrstuvwx
	; work2 = 0xFFFF0000
	AND	$work1,$work2,$getReg,ASR#1		; work1 = (abcD0000)>>>1
	MOV	$getReg,$getReg,LSL#16			; getReg=  efgh00000
	MOV	$getReg,$getReg,ASR#1			; getReg= (efgh00000)>>>1

	ADD	$work1,$work1,$mixReg,ASR#1		; work1 = qrstXXXX
	MOV	$mixReg,$mixReg,LSL#16			; work2 = mnop0000
	ADD	$getReg,$getReg,$mixReg,ASR#1		; getReg= uvwxXXXX
	AND	$work1,$work1,$work2			; work1 = qrst0000
	ORR	$getReg,$work1,$getReg,LSR#16		; work1 = qrstuvwx
 ]

	MEND

	acbbm_l	R11,R12,R3,R7
	acbbm_l	R11,R12,R4,R8
	acbbm_l	R11,R12,R5,R9
	acbbm_l	R11,R12,R6,R10

	STMIA	r1!,{r3-r6}

	CMP	r1,r2
	BLT	addCallBackBufferMix_Loop

	LDMIA	sp!,{ws}

addCallBackBuffer_Final
	; Increment current SoundDMA buffer

	LDR	r7,[ws,#work_CallBack_CurrentSoundBuffer]
	LDR	r8,[ws,#work_CallBack_numCallBackBuffers]
	ADD	r7,r7,#1
	CMP	r7,r8
	MOVGE	r7,#0
	STR	r7,[ws,#work_CallBack_CurrentSoundBuffer]

	; Decrement full count
	LDR	r8,[ws,#work_CallBack_BufferFullCount]
	SUBS	r8,r8,#1
	MOVLT	r8,#0
	STR	r8,[ws,#work_CallBack_BufferFullCount]

addCallBackBuffer_Exit
	LDMIA	sp!,{r0-r11,ws,pc}

 ; -------------------------------

callBackHandlerProcess

	; On entry:
	;    r1 = base of buffer
	;    r2 = end of buffer
	;    r3 = flags
	;    r4 = sample frequency
	;    r5 = sample period

	STMDB	sp!,{r0-r11,ws,lr}

	SUB	r6,r2,r1
	STR	r6,[ws,#work_CallBack_BufferSize]
	STR	r3,[ws,#work_CallBack_Flags]
	STR	r4,[ws,#work_CallBack_SampleFrequency]
	STR	r5,[ws,#work_CallBack_SamplePeriod]

	LDR	r5,[ws,#work_callBack_Active]  ; Set the call back active flag
	CMP	r5,#1
	BEQ	callBackHandlerProcess_Exit

	MOV	r5,#1
	STR	r5,[ws,#work_callBack_Active]  ; Set the call back active flag

	; Set up new call back

 [ doCBAI

	; Either by CBAI

	LDR	r0,[ws,#work_CBAIActive]
	CMP	r0,#1

	ADREQ	r0,CBAIRoutine
	STREQ	r0,[ws,#work_PollWord]
	BEQ	callBackHandlerProcess_Exit

	; Or by old style Call backs

 ]

	ADR	r0,doHandlerCallBack
	LDR	r1,[ws,#work_privateWord]

	TEQ	PC,PC
	MRSEQ	R9,CPSR		; If we are in 32-bit mode. R9 = CPSR
	MOVNE	R9,PC		; If we are in 26-bit mode, R9 = PC+PSR
	ORR	r8,r9,#SVC_Mode	; Preserved 32-bitness
	MSREQ	CPSR_c,R8
	TEQNEP	r8,#0
	MOV	r0,r0
	STMFD	sp!,{lr}

	SWI	XOS_AddCallBack

	LDMFD	sp!,{lr}
	TEQ	PC,PC
	MSREQ	CPSR_c,R9
	TEQNEP	R9,#0
	MOV	r0,r0

callBackHandlerProcess_Exit
	LDMIA	sp!,{r0-r11,ws,pc}

 ; -------



 ; ---------------

doHandlerCallBack
	; Called by call back system
	; Needs to call the handler with the right parameters
	STMDB	sp!,{r0-r11,ws,lr}

	LDR	ws,[ws]

 [ debug
; If you uncomment this, uncomment the switch to SVC mode in CBAIRoutine% too
;       SWI     XOS_WriteS
;	=	"Handler call back",0:ALIGN
;	SWI	XOS_NewLine
 ]

	; From the start and end get the length and offset into the buffer
	; by the current OutBuffer value

	LDR	r10,[ws,#work_CallBack_BufferSize]
	LDR	r0,[ws,#work_privateWord]
	LDR	r3,[ws,#work_CallBack_Flags]
	LDR	r4,[ws,#work_CallBack_SampleFrequency]
	LDR	r5,[ws,#work_CallBack_SamplePeriod]

doHandlerCallBack_Loop
	;	r10 = Buffer length

	LDR	r2,work_CallBack_BufferVal
	ADD	r2,r2,ws
	;	Align
	ADD	r2,r2,#63
	BIC	r2,r2,#63

	LDR	r7,[ws,#work_CallBack_CurrentOutBuffer]
	MLA	r1,r10,r7,r2                              ; Buffer address

	ADD	r2,r1,r10

	MOV	r3,#0                           ; Buffer invalid

	LDR	r8,[ws,#work_CallBackHandlers]
	CMP	r8,#0
	MOVNE	r6,#handlerType_CallBack
	BLNE	handler

	LDR	r8,[ws,#work_ProcessHandlers]
	CMP	r8,#0
	MOVNE	r6,#handlerType_Process
	BLNE	handler

 [  :LNOT:  CBAIDisableInt

	TEQ	PC,PC
	MRSEQ	R8,CPSR
	MOVNE	R8,PC
	ORREQ	r9,r8,#I32flag
	ORRNE	r9,r8,#Iflag
	MSREQ	CPSR_c,R9
	TEQNEP	r9,#0                  ; interrupts -> disabled
 ]
	; increment full count
	; Increment out buffer
	LDR	r7,[ws,#work_CallBack_CurrentOutBuffer]
	LDR	r9,[ws,#work_CallBack_numCallBackBuffers]
	ADD	r7,r7,#1
	CMP	r7,r9
	MOVGE	r7,#0
	STR	r7,[ws,#work_CallBack_CurrentOutBuffer]

	LDR	r7,[ws,#work_CallBack_BufferFullCount]
	ADD	r7,r7,#1
	CMP	r7,r9
	MOVGT	r7,r9
	STR	r7,[ws,#work_CallBack_BufferFullCount]

 [  :LNOT:  CBAIDisableInt
	TEQ	PC,PC
	MSREQ	CPSR_c,R8
	TEQNEP	r8,#0                  ; Interrupts reenabled
 ]

	; Check for full count = max
	; Loop round if not

	CMP	r7,r9
	BLT	doHandlerCallBack_Loop

	; Otherwise we have filled all the buffers and can return

 [  :LNOT:  CBAIDisableInt
	TEQ	PC,PC
	MRSEQ	R8,CPSR
	MOVNE	R8,PC
	ORREQ	r9,r8,#I32flag
	ORRNE	r9,r8,#Iflag
	MSREQ	CPSR_c,R9
	TEQNEP	r9,#0                 ; interrupts -> disabled
 ]

	MOV	r5,#0
	STR	r5,[ws,#work_callBack_Active]  ; Call back completed

 [  :LNOT:  CBAIDisableInt

	TEQ	PC,PC
	MSREQ	CPSR_c,R8
	TEQNEP	r8,#0                  ; Interrupts reenabled
 ]

	LDMIA	sp!,{r0-r11,ws,pc}

 ; ---------------

clearCallBackBuffer
	; Initialise the call back buffer to 0


	STMDB	sp!,{r0-r11,ws,lr}

	MOV	r0,#0
	MOV	r1,#0
	MOV	r2,#0
	MOV	r3,#0

	LDR	r4,work_CallBack_BufferVal
	ADD	r4,r4,ws

	;EVALAlign
	ADD   r4,r4,#63
	BIC	r4,r4,#63

	ADD   r5,r4,#callBackBufferLen

clearCallBackBuffer_Loop
	STMIA	r4!,{r0-r3}
	CMP	r4,r5
	BLT	clearCallBackBuffer_Loop

	LDMIA	sp!,{r0-r11,ws,pc}


 ; ---------------

setHandlerType
	; Set the corresponding bit for this handler's number & type
	; On entry:
	;    r0 = Handler number
	;    r4 = Type
	STMDB	sp!,{r0-r4,lr}

	MOV	r1,#1
	MOV	r0,r1,LSL r0          ; As a bit

	CMP	r4,#handlerType_Immediate
	LDREQ	r1,[ws,#work_ImmediateHandlers]
	ORREQ	r1,r1,r0
	STREQ	r1,[ws,#work_ImmediateHandlers]

	CMP	r4,#handlerType_CallBack
	LDREQ	r1,[ws,#work_CallBackHandlers]
	ORREQ	r1,r1,r0
	STREQ	r1,[ws,#work_CallBackHandlers]

	CMP	r4,#handlerType_Process
	LDREQ	r1,[ws,#work_ProcessHandlers]
	ORREQ	r1,r1,r0
	STREQ	r1,[ws,#work_ProcessHandlers]

	LDMIA	sp!,{r0-r4,pc}

 ; ---------

clearHandlerType
	; Clear the corresponding bit for this handler's number & type
	; On entry:
	;    r0 = Handler number
	;    r4 = Type
	STMDB	sp!,{r0-r4,lr}

	MOV	r1,#1
	MOV	r0,r1,LSL r0          ; As a bit

	CMP	r4,#handlerType_Immediate
	LDREQ	r1,[ws,#work_ImmediateHandlers]
	BICEQ	r1,r1,r0
	STREQ	r1,[ws,#work_ImmediateHandlers]

	CMP	r4,#handlerType_CallBack
	LDREQ	r1,[ws,#work_CallBackHandlers]
	BICEQ	r1,r1,r0
	STREQ	r1,[ws,#work_CallBackHandlers]

	CMP	r4,#handlerType_Process
	LDREQ	r1,[ws,#work_ProcessHandlers]
	BICEQ	r1,r1,r0
	STREQ	r1,[ws,#work_ProcessHandlers]

	LDMIA	sp!,{r0-r4,pc}


 ; -------------------- CBAI -----------------

 [ doCBAI

InstallCBAI
	; Install the CBAI stuff if module exists

	STMDB sp!,{r0-r11,ws,lr}

	MOV	r0,#0
	STR	r0,[ws,#work_PollWord]

	MOV	r0,#0
	ADR	r1,CBAIString
	SWI	XOS_SWINumberFromString

	MOVVC	r0,#1
	MOVVS	r0,#0
	STR	r0,[ws,#work_CBAIActive]

	ADDVC	r0,ws,#work_PollWord
	MOVVC	r1,#&100000       ; Scheduling class
	LDRVC	r2,[ws,#work_privateWord]
	SWIVC	XCBAI_RegisterPollWord

	LDMIA	sp!,{r0-r11,ws,pc}

 ; -----------------

CBAIString
	=	"CBAI_RegisterPollWord"
	DCB	0
	ALIGN

 ; -----------------

RemoveCBAI
	; De-register the CBAI pollword
	STMDB sp!,{r0-r11,ws,lr}

	LDR	r0,[ws,#work_CBAIActive]
	CMP	r0,#1

	ADDEQ	r0,ws,#work_PollWord
	SWIEQ	XCBAI_DeregisterPollWord

	MOV	r0,#0
	STR	r0,[ws,#work_CBAIActive]

	LDMIA	sp!,{r0-r11,ws,pc}

 ; -----------------

CBAIRoutine
	; Call back routine to call call back addresses

	STMDB sp!,{r0-r11,ws}

	;TEQ	PC,PC
	;MRSEQ	R9,CPSR
	;MOVNE	R9,PC
	;ORR	r8,r9,#SVC_Mode
	;MSREQ	CPSR_c,R8
	;TEQNEP	r8,#0
	;MOV 	r0,r0
	;STMFD	sp!,{R9,lr}

 [ CBAIDisableInt

	TEQ	PC,PC
	MRSEQ	R8,CPSR
	MOVNE	r8,pc
	ORREQ	r9,r8,#I32flag
	ORRNE	r9,r8,#Iflag
	MSREQ	CPSR_c,R9
	TEQNEP	r9,#0                  ; interrupts -> disabled
 ]

	BL	doHandlerCallBack

 [ CBAIDisableInt

	TEQ	PC,PC
	MSREQ	CPSR_c,R8
	TEQNEP	r8,#0                  ; Interrupts reenabled
 ]

	;LDMFD	sp!,{R9,lr}
	;TEQ	PC,PC
	;MSREQ	CPSR_c,R9
	;TEQNEP	r9,#0
	;MOV	r0,r0

	LDMIA	R13!,{r0-r12,PC}

 ; -----------------
 ]

;;

	END
