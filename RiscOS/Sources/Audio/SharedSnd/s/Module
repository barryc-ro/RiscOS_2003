XOS_AddCallBack		*	&20054
XOS_RemoveCallBack	*	&2005F
XOS_ServiceCall		*	&20030

	IMPORT	|__RelocCode|

module
	; Module header
	DCD	0				; Not an application
	DCD	initCode	- MODULE_START
	DCD	finalCode	- MODULE_START
	DCD	serviceCode	- MODULE_START
	DCD	title		- MODULE_START
	DCD	help		- MODULE_START
	DCD	commandTable	- MODULE_START
swiBaseNum
	DCD	swiBase				; SWI Base number
	DCD	swiHandler	- MODULE_START
	DCD	swiTable	- MODULE_START	; SWI Decode table
	DCD	0				; SWI Decode code

copyr
	= copyRightS
title
	= titleS,0
	ALIGN
help
	= "Shared Sound",9,Module_HelpVersion,variantS,0
	ALIGN

initCode
	STMDB	sp!,{r0-r11,ws,lr}

	BL	__RelocCode

	BL	startMem               ; Get memory
	BVS	initMemError

	; r10 = private word
	; ws = memory pointer [r10]

	BL    initWorkspace          ; Initialise workspace

 [ doCBAI
	BL    InstallCBAI
 ]

	BL	installDefaultDriver   ; Preferably Sound_LinearHandler or ChannelHandler

	; notify TaskManager that the acknowledgements have changed
	LDR	r1,Service_TaskManagerAcknowledgementsVal
	MOV	r2,#0		; MUST be zero to notify of change
	SWI	XOS_ServiceCall ; ignore if it failed

	ADR	R0,send_service_sound_start
	MOV	R1,#0
	SWI	XOS_AddCallBack

	CMP	R0,#0			 ; Clear V
	LDMIA	sp!,{r0-r11,ws,pc}

initMemError
	LDMIA	sp!,{r0-r11,ws,lr}
	ADR	r0,initMemErrMesg
	CMP	R0,#&80000000
	CMNVC	R0,#&80000000		; Set V
	MOV	PC,R14
initMemErrMesg

	DCD  &1E6
	= "Not enough memory for ",titleS,0
	ALIGN

send_service_sound_start
	STMFD	r13!,{r0-r8,r14}
	MOV	r1,#Service_Sound			; Service_Sound
	MOV	r0,#Service_Sound_SharedSoundAlive	; SharedSound starting
	SWI	XOS_ServiceCall				; Ignore any errors
	TEQ	PC,PC
	LDMEQFD	r13!,{r0-r8,PC}
	LDMFD	r13!,{r0-r8,PC}^

 ; -------------------------------------------------

finalCode
	STMDB	sp!,{r0-r11,ws,lr}

	LDR	ws,[ws]          ; Get work area

	MOV	r1,#Service_Sound			; Service_Sound
	MOV	r0,#Service_Sound_SharedSoundDying	; SharedSound dying
	SWI	XOS_ServiceCall	 			; Ignore any errors

	ADR	r0,send_service_sound_start
	MOV	r1,#0
	SWI	XOS_RemoveCallBack


 [ doCBAI
	BL	RemoveCBAI
 ]
	BL	releaseDriver

	; notify TaskManager that the acknowledgements have changed
	LDR	r1,Service_TaskManagerAcknowledgementsVal
	MOV	r2,#0 ; MUST be zero to notify of change
	SWI	XOS_ServiceCall ; ignore if it failed

	ADR     r0,serviceCode_Sound_Callback
	MOV     r1,r12
	SWI     XOS_RemoveCallBack

 [ doCallBack
	ADRL	r0,rateChangeCallBack
	LDR	r1,[ws,#work_privateWord]
	SWI     XOS_RemoveCallBack
 ]

	ADRL	r0,doHandlerCallBack
	LDR	r1,[ws,#work_privateWord]
	SWI     XOS_RemoveCallBack

	CMP	R0,#0			; Clear V
	LDMIA	sp!,{r0-r11,ws,pc}
 ;
 ; -------------------------------------------------

 ; Service numbers, incorporating Ursula service numbers
UrsulaService
	DCD	0 ; flags
	DCD	serviceCode_UrsulaEntry - MODULE_START	; the entry point

	DCD	Service_Sound
Service_TaskManagerAcknowledgementsVal
	DCD	Service_TaskManagerAcknowledgements
Service_SoundDriverVal
	DCD	Service_SoundDriver
	DCD	0 ; table terminator
	DCD	UrsulaService 		- MODULE_START	; the entry point

serviceCode
	; Sound driver call recognised
	; TaskManager acknowledgements recognised
	NOP
serviceCode_UrsulaEntry
	STMDB sp!,{lr}

	TEQ	R1,#Service_Sound
	BEQ	serviceCode_Sound

	LDR	lr,Service_SoundDriverVal
	TEQ	r1,lr
	BEQ	serviceCode_SoundDriver

	LDR	lr,Service_TaskManagerAcknowledgementsVal
	TEQ	r1,lr
	BEQ	serviceCode_TaskManagerAcknowledgements

	LDMIA	sp!,{pc}

; SoundDMA has reinitialised, so we need to stick our
; LinearHandler in place
serviceCode_Sound
	STMFD   R13!,{R0-R3}
	LDR     R12,[R12]
	LDR     R14,[R12,# work_currentDriver]

	; linear handler goes through level 1
	TEQ     R0,#Service_Sound_Level0Alive
	TEQEQ   R14,#2 ; linear handler
	BEQ     serviceCode_Sound_Reinit

	; log handler goes through level 2 (I *assume*)
	;TEQ     R0,#Service_Sound_Level1Alive
	;TEQEQ   R14,#1 ; log handler

	LDMNEFD R13!,{R0-R3,PC}

serviceCode_Sound_Reinit
	ADR     r0,serviceCode_Sound_Callback
	MOV     r1,r12
	SWI     XOS_AddCallBack

	LDMFD   R13!,{R0-R3,PC}

serviceCode_Sound_Callback
	STMFD   R13!,{R0-R3,R14}
	BL      installDefaultDriver
	LDMFD   R13!,{R0-R3,PC}

 ; Ensure that we place messages in the acknowledgements window
serviceCode_TaskManagerAcknowledgements

	STMDB	sp!,{r0-r3}
	TEQ	r2,#0
	LDMEQIA	sp!,{r0-r3,pc}
	MOV	r3,r2
	MOV	r0,#&2000

	ADR	r1,title+&100
	SUB	r1,r1,#&100    ; Long ADR ;-(

	ADR	r2,acknowledgement
	MOV	lr,pc
	MOV	pc,r3
	NOP
	LDMIA sp!,{r0-r3,pc}

; the message to appear in the window
acknowledgement

	= ackS,0
	ALIGN

serviceCode_SoundDriver
	STMDB	sp!,{r0-r11,ws}      ; lr already stacked

	LDR	ws,[ws]          ; Get work area

	CMP	r0,#Service_SoundDriver_Start
	BEQ	serviceCode_SoundDriverStart

	CMP	r0,#Service_SoundDriver_End
	BEQ	serviceCode_SoundDriverEnd

	LDMIA	sp!,{r0-r11,ws,pc}

serviceCode_SoundDriverStart
	; install into Sound Driver

	BL	get_SoundDriverStart_R0
	;ADR   r0,SoundDriverStart
	MOV	r1,ws

	; Change here from RJW; we may well be in IRQ mode here, so
	; can't call SWIs directly. Instead jump to SVC mode and
	; protect SVC_R14 first.
	STMFD	R13!,{R8,R9}

	TEQ	PC,PC
	MRSEQ	R9,CPSR		; If in 32-bit mode, R9 = CPSR
	MOVNE	R9,PC		; If in 26-bit mode, R9 = PC+PSR
	ORR	R8,R9,#3	; Preserves 32-bitness
	MSREQ	CPSR_c,R8
	TEQNEP	R8,#0
	MOV	R0,R0
	STMFD	R13!,{R14}

	SWI	XOS_AddCallBack

	LDMFD	R13!,{R14}
	TEQ	PC,PC
	MSREQ	CPSR_c,R9
	TEQNEP	R9,#0
	MOV	R0,R0
	LDMFD	R13!,{R8,R9}

	LDMIA	sp!,{r0-r11,ws,pc}

 ; ----

serviceCode_SoundDriverEnd
	;  Remove from Sound Driver

	BL	SoundDriverRemove

	LDMIA sp!,{r0-r11,ws,pc}

	; -----------------  * Comands

commandTable

	DCD 0   ; No more commands

 ; -----------------  SWI'S

swiTable

	= swiNameS,0
	= "InstallHandler",0
	= "RemoveHandler",0
	= "HandlerInfo",0
	= "HandlerVolume",0
	= "HandlerSampleType",0
	= "HandlerPause",0
	= "SampleRate",0
	= "InstallDriver",0
	= "RemoveDriver",0
	= "DriverInfo",0
	= "DriverVolume",0
	= "DriverMixer",0
	= "CheckDriver",0
	= "ControlWord",0
	= "HandlerType",0
 [ debug1
	= "Test",0
	= "Info",0
 ]
	DCB 0
	ALIGN

swiHandler
	MOV	r10,ws
	LDR	ws,[ws]    ; ws = pointer to RMA data block
	CMP	r11,#(EndOfJumpTable - jumpTable)/4
	ADDCC	pc,pc,r11,LSL #2
	B	UnknownSWIerror
jumpTable
	B	swiInstallHandler          ;  OK
	B	swiRemoveHandler           ;  OK
	B	swiHandlerInfo             ;  OK
	B	swiHandlerVolume           ;  OK
	B	swiHandlerSampleType       ;  not in this version
	B	swiHandlerPause            ;  not in this version
	B	swiSampleRate              ;  OK
	B	swiInstallDriver           ;  OK
	B	swiRemoveDriver            ;  OK
	B	swiDriverInfo              ;  OK
	B	swiDriverVolume            ;  OK
	B	swiDriverMixer             ;  OK
	B	driverCheck                ;
	B	swiControlWord             ;
	B	swiHandlerType             ;
 [ debug1
	B	swiTest                    ;  For debugging only
	B	swiInfo                    ;  For debugging only
 ]

EndOfJumpTable

UnknownSWIerror
	ADR	r0,errMesg
	CMP	R0,#&80000000
	CMNVC	R0,#&80000000		; Set V
	MOV	PC,R14
errMesg

	DCD	&1E6
	= "Unknown SharedSound SWI",0
	ALIGN

	END
