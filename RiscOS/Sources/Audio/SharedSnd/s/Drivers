; The driver will typically be the 16 bit DMA handler with all parameters
; set as required, or the log driver for 8 bit support.
; If it is the 8 bit driver then there is some conversion required to set the
; parameters correctly.
; This is indicated by passing a call address in the driver block which would
; otherwise be 0.
;

	GBLL	debug
debug	SETL {FALSE}

 ; -------------------------------- Driver routines ---------------------------

 [ doDMI
PowerWAVEString
	= "PowerWAVE_LinearHandler"
	DCB 0
	ALIGN
 ]

installDefaultDriver
	;  The default driver will either be (in order of preference)
 	;      Sound_LinearHandler
 	;   or Sound_ChannelHandler

 	;  This routine looks to see what is available and installs
 	;  the appropriate driver.

	STMDB	sp!,{lr}

 [ doDMI :LAND: ( :LNOT: forceLog)

	; See if the DMI is loaded and if so install SharedSound into it's linear handler
	MOV	R0,#0
	ADR	R1,PowerWAVEString
	SWI	XOS_SWINumberFromString
	BVS	installDefaultDriver_NoDMI

	MOV	R0,#3
	STR	R0,[R12,#work_currentDriver]

	BL	installDMIDriver

	LDMIA	R13!,{PC}

installDefaultDriver_NoDMI

 ]
	; First see if Sound_LinearHandler exists

	; This rely's on the fact that the old SoundDMA module will respond to all
	; SWI's outside it's range with a 0
	; but the 16 bit SoundDMA will respond with a 1 if 16 bit is on

	MOV	r0,#0

 [ :LNOT: forceLog

	SWI	Sound_Mode    ;  Check configured for 16 Bit support
 ]

 [ debug
	SWI	XOS_WriteS
	= "Sound mode = ",0
	ALIGN
	MOV	r10,r0
	BL	printr10
 ]

	CMP	r0,#0          ; r0 = 1 If 16 bit support is on

	MOVEQ	r1,#1  ; Log
	MOVNE	r1,#2  ; Linear

	STR	r1,[ws,#work_currentDriver]

 [ doLog
	BNE	installDefaultDriverNotLog	; 32 bit change
	BL	installLogDriver
	LDMIA	sp!,{pc}
 ]

installDefaultDriverNotLog
	BL	installLinearDriver

	LDMIA	sp!,{pc}

 ; -----------

installDriver
	; Install driver
	;  r0 = Pointer to driver table
	;  r1 = parameter to pass driver in ws when called
	;  r2 = flags
	;  r3 = Driver name
	STMDB	sp!,{r0-r6,lr}

	BL	releaseDriver			; release the currently active driver

	ADD	r6,ws,#work_driverTable		; Get pointer to driver table

	STR	r0,[r6,#driver_Address]		; Table address
	STR	r1,[r6,#driver_Parameter]	; Driver ws parameter
	STR	r2,[r6,#driver_Flags]
	STR	r3,[r6,#driver_Name]

	MVN	r0,#0				; Initialise driver vol to LR = &FFFFFFFF
	STR	r0,[r6,#driver_Volume]

	BL	driverInitialise		; Initialise this driver

	LDR	r0,[r6,#driver_Volume]
	MOV	r1,r6				; Driver table
	BL	driverVolume			; Initialise driver volume

	LDMIA	sp!,{r0-r6,pc}

; RJW: Following routine unused?
; even if it was used, surely it should load r0-r6,lr? Check.
;installDriverError
;
;	LDMIA	sp!,{r0-r5,lr}
;	ADR	r0,installDriverErrMesg
;	ORRS	pc,lr,#Overflow_Flag
;installDriverErrMesg
;
;	DCD	&1E6
;	= "Cannot install driver"
;	DCB	0
;	ALIGN

 ; -----------

driverInitialise
	; Initialise a new driver
	;  r0 = driver table slot
	;  Return with r0 = 0 if failed

	STMDB	sp!,{r1-r11,ws,lr}

	ADD	r6,ws,#work_driverTable		; driver Table slot

	LDR	r0,[r6,#driver_Address]
	LDR	r2,[r0,#driverEntry_Install]	; r2 = Call address

	BL	clearCallBackBuffer

	BL	getFillR0
	;ADR	r0,fill   \ Main fill call address

	LDR	r1,[ws,#work_privateWord]	; r1 = parameter
	STMDB	sp!,{ws}			; Stack ws
	LDR	ws,[r6,#driver_Parameter]	; Called with ws = parameter
	STMDB	sp!,{pc}			; Put return address on the stack
	MOV	pc,r2				; And call driver install entry
	MOV	r0,r0
	LDMIA	sp!,{ws}			; Retrieve ws

	CMP	r0,#0				; = 0 if install failed

	MOVNE	r0,#0
	BLNE	newSampleRate			; Get rate and set up sample period &
						; fractions

	BL	startSound                   ; Make sure that sound is active

	LDMIA	sp!,{r1-r11,ws,pc}

	; ------------

driverCheck
	; Call initialise to make sure that the current driver is still active

	STMDB	sp!,{r0-r11,ws,lr}

	ADD	r6,ws,#work_driverTable		; driver Table slot
	LDR	r0,[r6,#driver_Address]

	CMP	r0,#0				; Is there a driver installed?
	BEQ	driverCheckExit

	LDR	r2,[r0,#driverEntry_Install]	; r2 = Call address

	BL	getFillR0
	;ADR	r0,fill				; r0 = Handler address
	LDR	r1,[ws,#work_privateWord]	; r1 = parameter
	STMDB	sp!,{ws}			; Stack ws
	LDR	ws,[r6,#driver_Parameter]	; Called with ws = parameter
	STMDB	sp!,{pc}			; Put return address on the stack
	MOV	pc,r2				; And call driver install entry
	MOV	r0,r0
	LDMIA	sp!,{ws}			; Retrieve ws

	MOV	r0,#0
	STR	r0,[ws,#work_SoundPause]	; Clear the pause flag

driverCheckExit
	CMP	PC,PC			; Clears V flag and checks processor mode
	LDMEQIA	sp!,{r0-r11,ws,pc}	; 32 bit exit
	LDMIA	sp!,{r0-r11,ws,pc}^	; 26 bit exit


	;-------------

releaseDriver
	STMDB	sp!,{r0-r11,ws,lr}

	BL	stopSound

	ADD	r0,ws,#work_driverTable		; driver Table slot
	LDR	r1,[r0,#driver_Address]

	CMP	r1,#0
	BEQ	releaseDriverExit

	LDR	r1,[r1,#driverEntry_Remove]
	STMDB	sp!,{ws}			; Stack ws
	LDR	ws,[r0,#driver_Parameter]	; Get driver's ws
	STMDB	sp!,{pc}			; Stack return address
	MOV	pc,r1				; Call driver, no other parameters
	MOV	r0,r0
	LDMIA	sp!,{ws}			; Retrieve ws

releaseDriverExit
	LDMIA	sp!,{r0-r11,ws,pc}

	; ----------------

driverSampleRate
	; Call driver sample rate entry
	; On entry:
	;  r0 = 0 to read
	;     > 0 for sample frequency required
	; On exit:
	;  r0 = current frequency
	STMDB	sp!,{lr}

	; Get or set current frequency
	ADD	r1,ws,#work_driverTable		; driver Table slot
	LDR	r2,[r1,#driver_Address]

	CMP	r2,#0				; Return 0 for failed
	MOVEQ	r0,#0
	BEQ	driverSampleRateExit

	LDR	r2,[r1,#driver_Address]
	LDR	r2,[r2,#driverEntry_SampleRate]
	STMDB	sp!,{ws}			; Stack ws
	LDR	ws,[r1,#driver_Parameter]	; Get driver's ws
	STMDB	sp!,{pc}			; Stack return address
	MOV	pc,r2				; Call driver, no other parameters
	MOV	r0,r0
	LDMIA	sp!,{ws}			; Retrieve ws

	; r0 = current frequency

driverSampleRateExit


	LDMIA	sp!,{pc}


 ; ----------

driverVolume
	; Set the new volume for a driver
	; On entry:
	;   r0 = new LR volume
	;   r1 = driver table
	; On exit:
	;   r0 = volume scaling required by handler to achieve this volume
	;   So if driver cannot scale volume then r0 = entry value and handler
	;   will have to do all the work
	;   If driver can scale then typically it will return &FFFFFFFF to
	;   tell handler not to scale volume at all
	STMDB	sp!,{r1-r11,ws,lr}

	; Get or set current volume
	ADD	r1,ws,#work_driverTable    ; driver Table slot
	LDR	r2,[r1,#driver_Address]

	CMP	r2,#0
	BEQ	driverVolumeExit

	LDR	r2,[r2,#driverEntry_Volume]     ; There may not be an entry
	CMP	r2,#0
	STR	r0,[r1,#driver_Volume]          ; Store it
	BEQ	driverVolumeStore               ; Return with r0 as set

	STMDB	sp!,{r1,ws}                       ; Stack ws
	LDR	ws,[r1,#driver_Parameter]      ; Get driver's ws
	STMDB	sp!,{pc}                        ; Stack return address
	MOV	pc,r2                            ; Call driver, no other parameters
	MOV	r0,r0
	LDMIA	sp!,{r1,ws}                       ; Retrieve ws

driverVolumeStore


 [ debug
	SWI	XOS_WriteS
	= "Store scaled driver volume: ",0
	ALIGN
	MOV	r10,r0
	BL	printr10
 ]

	;  r0 = actual volume

	STR	r0,[r1,#driver_VolumeScaled]    ; The volume to use when scaling handlers

driverVolumeExit
	LDMIA	sp!,{r1-r11,ws,pc}


	; -----------

driverMixer
	; Call driver's mixer entry
	; On entry:
	;    r0 = Function code,  0 = read,  1 = set
	;    r1 = mixer number
	;    r2 = value if to set
	;    r3 = driver pointer
	; On exit:
	;    r1 = number of mixers
	;    r2 = current value
	;    r3 = mixer name

	STMDB	sp!,{r4-r11,ws,lr}

	CMP	r3,#0
	BEQ	driverMixerExit

	LDR	r4,[r3,#driver_Address]
	LDR	r4,[r4,#driverEntry_Volume]	; There may not be an entry
	CMP	r4,#0
	BEQ	driverMixerExit			; No mixer entry

	STMDB	sp!,{ws}			; Stack ws
	LDR	ws,[r1,#driver_Parameter]	; Get driver's ws
	STMDB	sp!,{pc}			; Stack return address
	MOV	pc,r4				; Call driver, no other parameters
	MOV	r0,r0
	LDMIA	sp!,{ws}			; Retrieve ws

driverMixerExit
	LDMIA	sp!,{r4-r11,ws,pc}

	END
