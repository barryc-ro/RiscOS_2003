 ; ------------------------- Linear driver --------------------------

 ; ---------
installLinearDriver
	; Set up the registers and table for
	; Sound_LinearHandler and call installDriver
	STMDB	sp!,{lr}

	ADD	r0,ws,#work_DriverEntryTable	; Get table address

	ADR	r1,linearDriverInstall		; Install entry
	STR	r1,[r0,#driverEntry_Install]

	ADR	r1,linearDriverRemove		; Remove entry
	STR	r1,[r0,#driverEntry_Remove]

	ADR	r1,linearDriverSampleRate	; Sample rate entry
	STR	r1,[r0,#driverEntry_SampleRate]

	MOV	r1,#0				; No volume entry
	STR	r1,[r0,#driverEntry_Volume]

	MOV	r1,#0
	STR	r1,[r0,#driverEntry_Mixer]	; No mixer entry


	LDR	r1,[ws,#work_privateWord]	; Parameter

	MOV	r2,#0				; Flags

	ADR	r3,linearDriverName		; Driver name

 [ debug
	SWI	XOS_WriteS
	= "Install linear driver.....",0
	ALIGN
	SWI	XOS_NewLine

	SWI	XOS_WriteS
	= " Table = ",0
	ALIGN
	MOV	r10,r0
	BL	printr10

	SWI	XOS_WriteS
	= " Parameter = ",0
	ALIGN
	MOV	r10,r1
	BL	printr10

	SWI	XOS_WriteS
	= " Flags = ",0
	ALIGN
	MOV	r10,r2
	BL	printr10

	SWI	XOS_WriteS
	= " Name = ",0
	ALIGN
	MOV	r10,r3
	BL	printr10
 ]

	BL	installDriver

	LDMIA	sp!,{pc}

 ; ------

linearDriverInstall
	; Install driver using Sound_LinearHandler
	;  r0  = Handler address
	;  r1  = Parameter to pass
	;  ws = parameter for driver
	;  lr already on stack
	STMDB	sp!,{r1-r11,ws}

	MOV	r5,r0                   ; Temorary store r0 and r1
	MOV	r6,r1

	MOV	r0,#0                   ; Get current handler to see if already installed
	SWI	XSound_LinearHandler

	CMP	r1,r5                   ; Same handler?
	CMPEQ	r2,r6                   ; Same parameter?

	BEQ	linearDriverInstallExit ; Jump out 'cos already there

	; Now install new driver

	MOV	r0,#1                   ; Function code install
	MOV	r1,r5                   ; Address
	MOV	r2,r6                   ; Parameter
	SWI	XSound_LinearHandler

	MOV	r0,r5                   ; Restore r0 if successful
	MOVVS	r0,#0                   ; Or 0 if error

linearDriverInstallExit


	LDMIA	sp!,{r1-r11,ws,pc}

 ; -----------

linearDriverRemove
	; Remove driver using Sound_LinearHandler
	; lr already on stack
 	STMDB	sp!,{r0-r2}

	; To remove handler set new handler to 0
	MOV	r0,#1       ; Function code install
	MOV	r1,#0       ; Null handler
	MOV	r2,#0
	SWI	XSound_LinearHandler

	LDMIA	sp!,{r0-r2,pc}

 ; -----------

linearDriverSampleRate
	; Choose rate and/or return current rate
	;  r0 = 0 to read
	;     > 0 to set to r0 = frequency
	; On exit:
	;  r0 = current frequency
	STMDB	sp!,{r1-r11,ws}

	CMP	r0,#0
	BEQ	linearDriverSampleRateRead
	; Set the rate to r0
	; Find the nearest
	MOV	r4,r0              ; r4 = rate required

	MOV	r0,#0              ; Read number of rates available
	SWI	Sound_SampleRate  ; r1 = number of rates available

	MOV	r5,r1              ; r5 = Upper limit

linearDriverSampleRateLoop
	MOV	r0,#2              ; Convert from index to rate
	SWI	Sound_SampleRate  ; r2 = rate
	CMP	r2,r4
	BLT	linearDriverSampleRateClosest  ; Best rate is between r1 and r5

	CMP	r1,#1              ; Are there any more rates
	MOVNE	r5,r1              ; Change upper limit
	MOVNE	r6,r2              ; Store upper rate
	SUBNE	r1,r1,#1           ; decrement index
	BNE	linearDriverSampleRateLoop  ; Try again

linearDriverSampleRateClosest
	; Check for nearest between r1 and r5

	CMP	r1,r5                      ; No range to check
	BEQ	linearDriverSampleRateSet

	; r2 = lower rate, r1 = index
	; r6 = upper rate, r5 = index

	SUB	r2,r4,r2
	SUB	r6,r6,r4

	CMP	r2,r6       ; Who is nearest
	MOVGT	r1,r5       ; If nearest to r6 then set index to r5

linearDriverSampleRateSet
	; Chosen index is r1
 	MOV	r0,#3              ; Select rate from index in r1
	SWI	Sound_SampleRate

linearDriverSampleRateRead
	MOV	r0,#1
	SWI	Sound_SampleRate  ; Frequency returned in r2

	MOV	r0,r2               ; Return it in r0

	LDMIA	sp!,{r1-r11,ws,pc}

 ; -----------

linearDriverName
	= "Sound Linear Handler",0
	ALIGN
	END
