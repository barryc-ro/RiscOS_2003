debug SETL {FALSE}

 ; -------------------------------- Volume routines ------------------------


scaleAllHandlerVolumes
	; Set the actual volumes for all handlers
	; typically called after driver volume has changed
	; should also be called when System volume has changed
	STMDB	sp!,{r0-r11,ws,lr}

	ADD	r0,ws,#work_handlerTable   ; Get handler table
	MOV	r6,#handlerMax              ; Count

scaleAllHandlerVolumesLoop
	LDR	r1,[r0,#handler_Address]    ; Is there a driver here?
	CMP	r1,#0
	BLNE	scaleHandlerVolume

	ADD	r0,r0,#handlerTableLen
	SUBS	r6,r6,#1
	BNE	scaleAllHandlerVolumesLoop

	LDMIA	sp!,{r0-r11,ws,pc}

 ; ----------

scaleHandlerVolume
	; Using all available volume info
	; set up the real volume for the handler
	; as passed to fill routine
	; On entry r0 = handler table
	STMDB	sp!,{r0-r5,lr}

	LDR	r4,[r0,#handler_Volume]

	; Scale according to r0 = Driver volume (if driver cannot use it)
	;                    r4 = Handler volume
	MOV	r5,r0         ; Store handler address

	; Get the driver scaled volume
	ADD	r0,ws,#work_driverTable
	LDR	r1,[r0,#driver_Address]
	CMP	r1,#0                        ; Check driver exists
	BEQ	scaleHandlerVolumeStore     ; Don't change volume if no driver

	LDR	r0,[r0,#driver_VolumeScaled]   ; Driver scaled volume
 [ debug
	SWI	XOS_WriteS
	= "Driver volume = ",0
	ALIGN
	MOV	r10,r0
	BL	printr10
 ]

	MOV	r1,#0
	SUB	r1,r1,#1
	CMP	r0,r1                   ; No driver scaling required

	BEQ	scaleHandlerVolumeStore

	;     r0 = LR, r4 = LR, Scale accordingly....

	MOV	r1,r0,LSR #16  ; r1 = L1
	MOV	r0,r0,LSL #16
	MOV	r0,r0,LSR #16  ; r0 = r1

	MOV	r3,r4,LSR #16  ; r3 = L2
	MOV	r4,r4,LSL #16
	MOV	r4,r4,LSR #16  ; r4 = r2

	MUL	r2,r0,r4
	MOV	r2,r2,LSR #16  ; r2 = R

	MUL	r0,r1,r3
	MOV	r0,r0,LSR #16  ; r0 = L

	ADD	r4,r2,r0,LSL #16 ; r4 = LLRR

scaleHandlerVolumeStore


 [ debug
	SWI	XOS_WriteS
	= "Scaled volume = ",0
	ALIGN
	MOV	r10,r4
	BL	printr10
 ]
	STR	r4,[r5,#handler_VolumeScaled]

	LDMIA	sp!,{r0-r5,pc}

	END
