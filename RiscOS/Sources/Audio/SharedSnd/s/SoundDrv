	GBLL debug
debug	SETL {FALSE}

 ; -------------------------------- Sound driver routines ------------------------

get_SoundDriverStart_R0

	ADR	r0,SoundDriverStart
	MOV	pc,lr

 ; -----

SoundDriverStart
	; Start the SharedSound SoundDriver
	; ws = Driver block
	STMDB	sp!,{r0-r11,ws,lr}

	MOV	r0,#0
	STR	r0,[ws,#work_RecordOn]

	ADR	r0,SoundDriverCallTable
	MOV	r1,ws

	MOV	r2,#0
	ADR	r3,SoundDriverName

                ;    r0 = Call table address
                ;    r1 = ws Parameter
                ;    r2 = Flags
                ;    r3 = Name

	SWI	SoundDriver_Install

                ;    r0 = Driver number
                ;    r1 = Address to call with data
                ;    r2 = ws Parameter

	STR	r0,[ws,#work_RecordHandle]  ; Driver number from SoundDriver
	STR	r1,[ws,#work_RecordHandlerAddress]
	STR	r2,[ws,#work_RecordHandlerParameter]

	LDMIA	sp!,{r0-r11,ws,pc}

 ;-----------

SoundDriverRemove
	; ws = Driver block

	STMDB	sp!,{r0-r11,ws,lr}

	LDR	r0,[ws,#work_RecordHandle]  ; Driver number

	SWI	SoundDriver_Remove

	LDMIA	sp!,{r0-r11,ws,pc}

 ; -----------------------

SoundDriverName
	= "SharedSound",0
	ALIGN

 ; --------------

SoundDriverCallTable
	B	SoundDriver_Start
	B	SoundDriver_Stop
	B	SoundDriver_Pause
	B	SoundDriver_Volume
	B	SoundDriver_Device
	B	SoundDriver_SampleRate
	B	SoundDriver_SampleType
	B	SoundDriver_Gain

 ; ----------

SoundDriver_Start
	STMDB	sp!,{r0-r11,ws,lr}

	MOV	r0,#1
	STR	r0,[ws,#work_RecordOn]

	LDMIA	sp!,{r0-r11,ws,pc}

 ; -------

SoundDriver_Stop
	STMDB	sp!,{r0-r11,ws,lr}

	MOV	r0,#0
	STR	r0,[ws,#work_RecordOn]

	LDMIA	sp!,{r0-r11,ws,pc}

 ; -------

SoundDriver_Pause
	STMDB	sp!,{r0-r11,ws,lr}


	LDMIA	sp!,{r0-r11,ws,pc}

 ; -------

SoundDriver_Volume
	; Read or write current input volume
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write
	;    r1 = Left Volume
	;    r2 = Right volume
	; On exit:
	;    r1 = Left volume
	;    r2 = Right volume

	STMDB	sp!,{r0,r3-r11,ws,lr}

	MOV	r1,#&FF
	MOV	r2,#&FF

	LDMIA	sp!,{r0,r3-r11,ws,pc}

 ; -------

SoundDriver_Device
	; Read or write device
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	; If r0 = 0,1 Then
	;    r1 = Left Device number
	;    r2 = Right Device number
	; If r0 = 2 Then
	;    r1 = Address of left device table
	;    r2 = Address of right device table
	STMDB	sp!,{r0,r3-r11,ws,lr}

	CMP	r0,#2
	ADREQ	r1,deviceTable
	ADREQ	r2,deviceTable
	BEQ	SoundDriver_Device_Exit

	MOV	r1,#0  ; Only one device
	MOV	r2,#0

SoundDriver_Device_Exit
	LDMIA	sp!,{r0,r3-r11,ws,pc}

 ; -------

deviceTable
	DCD	1

	= "Main Output",0
	ALIGN

 ; -------

SoundDriver_SampleRate
	; Get rate
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Test
	;    r1 = Rate
	; On exit:
	;    r1 = Nearest rate
	STMDB	sp!,{r0,r2-r11,ws,lr}

	CMP	r0,#0
	BEQ	SoundDriver_SampleRate_Read

	CMP	r0,#1
	BEQ	SoundDriver_SampleRate_Write

	CMP	r0,#2
	BNE	SoundDriver_SampleRate_Read

	; Test involves setting the new one and then resetting to the old
	LDR	r2,[ws,#work_SampleFrequency]

	MOV	r0,r1
	BL	newSampleRate

	LDR	r1,[ws,#work_SampleFrequency]  ; Nearest available

	MOV	r0,r2
	BL	newSampleRate

	B	SoundDriver_SampleRate_Exit

SoundDriver_SampleRate_Write

	MOV	r0,r1
	BL	newSampleRate

SoundDriver_SampleRate_Read

	LDR	r1,[ws,#work_SampleFrequency]

SoundDriver_SampleRate_Exit

	LDMIA	sp!,{r0,r2-r11,ws,pc}



 ; --------

SoundDriver_SampleType
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	;  If r0 = 0,1 then
	;    r1 = Sample channels
	;    r2 = Sample data type
	;  if r0 = 2 then
	;    r1 = -1 to read number of types
	;       = Value from 0 to n to get name of type
	; On exit:
	;  IF r0 = 0,1 then
	;    r1 = Current channels
	;    r2 = Current Sample data type
	;  if r0 = 2 then
	;    r1 = Pointer to type table
	STMDB	sp!,{r0,r3-r11,ws,lr}

	CMP	r0,#2   ; Info
	ADREQ	r1,typeTable
	BEQ	SoundDriver_SampleType_Exit

	; Cannot change channels or type
	MOV	r1,#2
	MOV	r2,#0

SoundDriver_SampleType_Exit


	LDMIA	sp!,{r0,r3-r11,ws,pc}

 ; -------

typeTable
	DCD	2               ; Channels

	DCD	1               ; Types
	= "Linear 16 bit",0
	ALIGN

 ; -------

SoundDriver_Gain

	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	;    r1 = Device number
	;    r2 = Left Gain flag
	;    r3 = Right gain flag
	; On exit:
	;  If r0= 0,1 then
	;    r2,r3 = current flags
	;  If r0 = 2  then
	;    r2,r3 > 0 if gain available on this device (value - db's gain)

	STMDB	sp!,{r0,r1,r4-r11,ws,lr}

	; No gain available
	MOV	r2,#0
	MOV	r3,#0

	LDMIA sp!,{r0,r1,r4-r11,ws,pc}

	END
