/* soundtypes.h */

typedef int32 fsamp_M;
typedef int32 diff_M;

#define LEFT 0
#define RIGHT 1

typedef union { fsamp_M d[2]; struct { fsamp_M l, r; } p; } fsamp_S;
typedef union { diff_M  d[2]; struct { diff_M  l, r; } p; } diff_S;

/*
 * Type for an iDCT coefficient (+ve fixed point fraction 0 < f < 1);
 * 16-bits is adequate, given that sign information is held separately
 * (yielding an extra bit of precision) and has the merit that 2 can
 * be held in a single word and picked up in either order with cunning
 * in the addressing (assumes the ARM's word rotation on LDR at
 * address 2 mod 4).
 */
typedef uint16 coeff_t;

/*
 * Define storage type for a window coefficient (excluding sign which
 * is known separately), as a fixed point quantity using WBITS bits
 * for the fractional part.  Note that since coefficient values go up
 * to just over 1.1, we can only use shorts if WBITS is strictly less
 * than 16.  The effective resolution is WBITS + 1 (since the sign
 * info is effectively another bit), i.e. if WBITS = 15 then we have
 * potentially 96dB S/N.
 */
#if WBITS < 16
typedef unsigned short windowc;		/* nb signs factored out now */
#define GET_2WC(w,a,b) do { a = *(int32 *)(w); b = (uint32)(a) >> 16; a ^= (b) << 16; } while (0)
#else
typedef int32 windowc;
#define GET_2WC(w,a,b) do { a = (w)[0]; b = (w)[1]; } while (0)
#endif


/* EOF soundtypes.h */
