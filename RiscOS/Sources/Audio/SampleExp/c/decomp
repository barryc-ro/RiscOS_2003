#include "kernel.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "mpa.h"
#include "fxptparams.h"
#include "soundtypes.h"
#include "frame.h"
#include "tables.h"
#include "bits.h"
#include "decode.h"
#include "generate.h"

static int decode_buffer (uint32 *inbuff, int inwords, int16 *outbuff)
{
    int bit_alloc[SBLIMIT+1];
    unsigned char scales[3][SBLIMIT];
    fsamp_M fsamps[3][SBLIMIT];
    int nsamp, toskip, nfd;
    FrameInfo fi;
    short *sampout;

    sampout = outbuff;

    fi.alloc = NULL;
    if (inbuff[0] != 0xACB11B02)
    	return -1;
    nsamp = inbuff[1];
    if (nsamp < 32)
	return -2;			/* too short! */

    set_bits_source (inbuff+2, inwords-2);

    nfd = 0;
    toskip = 481;			/* deal with lag through encoding process */
    for (;;)
    {
	int i, nsf;
	if (!get_header (&fi))
	    return -(3+nfd*256);
	nfd++;
	nsf = get_bitalloc (bit_alloc, &fi);
	get_scales (bit_alloc, nsf, scales, &fi);
	memset (fsamps, 0, sizeof(fsamps));
	for (i = 0; i < SCALE_BLOCK; ++i)
	{
	    int j;
	    get_samples (bit_alloc, scales[i>>2], fsamps);
	    for (j = 0; j < 3; ++j)
	    {
		short xsamp[32];
		generate_mono (fsamps[j], nsamp < 32 ? xsamp : sampout, 1);
		if (toskip > 0)
		{
		    int tomove = 32 - toskip;
		    if (tomove > 0)
		    {
			memmove (sampout, sampout + toskip, tomove * sizeof(*sampout));
			sampout += tomove;  nsamp -= tomove;
		    }
		    toskip -= 32;
		}
		else
		{
		    if (nsamp < 32)
			memmove (sampout, xsamp, nsamp * sizeof(*sampout));
		    nsamp -= 32;  sampout += 32;
		    if (nsamp <= 0)
			return nfd;
		}
	    }
	}
	/* Deal with any spare bits at end of frame */
	skip_ancilliary_data (&fi);
    }
}

_kernel_oserror *SampleExpander_swihandler (int swino, _kernel_swi_regs *r, void *pw)
{
    if (swino == 0)
    {
     	int rv = decode_buffer ((uint32 *)r->r[0], r->r[1], (int16 *)r->r[2]);
     	if (rv == -1)
	    /* Disgusting hack for an error block, for now */
	    return (_kernel_oserror *)"\321\332\221\000Compressed sample too short";
        else if (rv == -2)
     	    return (_kernel_oserror *)"\322\332\221\000Compressed sample header error";
	else if ((rv <<24>>24)== -3)
	{
	    static _kernel_oserror e;
	    e.errnum = 0000221332323;
	    sprintf (e.errmess, "Compressed sample format error (frame %d)", (-rv)>>8);
	    /* Disgusting hack for an error block, for now */
	    return &e;
	}
	if (rv > 0)
	    r->r[1] = rv;
    }
    else
    {
 	return (_kernel_oserror *)"\324\332\221\000Invalid SWI call";
    }
    return NULL;
}
