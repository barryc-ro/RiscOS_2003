/* bits.c */
#include "mpa.h"
#include "bits.h"
#include "use_asm.h"

#define EBITS 32			/* FIXED */
typedef struct
{
    int      bitoffset;		/* # bits not yet read in current element */
    uint32 *bcur;		/* -> current element in buffer */
    uint32 *buf_lim;		/* -> end of buffer */
    int      buf_size;		/* size of buffer (in uint32s) */
    uint32 *buf;		/* bit stream buffer base */
    int      eobs;		/* all bits in stream have been read */
} bitstream;

bitstream the_bs;
/* open the device to read the bit stream from it */

/* Define the whole of the source data via a single pointer/length pair */
void set_bits_source (uint32 *ptr, unsigned int nwords)
{
    bitstream *bs = &the_bs;
    bs->buf = (uint32 *)ptr;
    bs->buf_size = nwords;
    bs->buf_lim = bs->buf + nwords;	/* all data is in buffer */
    bs->bcur = bs->buf; 		/* at start of buffer */
    bs->bitoffset = EBITS;		/* have processed no bits from *bcur */
    bs->eobs = 0;
}


#if 1
uint32 getbits (int toget)
{
    int bitx;
    uint32 *bcur;
    bitstream *bs = &the_bs;
    
    /* Assumes max value of toget <= EBITS, so can always fetch in 2 loads */
    bitx = bs->bitoffset;
    bcur = bs->bcur;
    if (toget <= bitx)
    {
	uint32 tmp = *bcur & ~(~0 << bitx);
	uint32 val;
	bitx -= toget;
	val = tmp >> bitx;
	bs->bitoffset = bitx;
	return val;
    }
    else if (bitx != 0)
    {
	uint32 val;
	val  = *bcur++ << (32-bitx) >> (32-toget);
	bitx += EBITS - toget;
	val |= *bcur >> bitx;
	bs->bcur = bcur;
	bs->bitoffset = bitx;
	return val;
    }
    else
    {
	uint32 val;
	bitx += EBITS - toget;
	val = *++bcur >> bitx;
	bs->bcur = bcur;
	bs->bitoffset = bitx;
	return val;
    }
}
#endif

uint32 bitposition ()
{
    bitstream *bs = &the_bs;
    uint32 r = ((char *)bs->bcur - (char *)bs->buf) * 8 + EBITS - bs->bitoffset;
#ifdef DIAG
    fprintf (stderr, "bitposition -> 0x%08x = %u\n", r, r);
#endif
    return r;
}

/* EOF bits.c */
