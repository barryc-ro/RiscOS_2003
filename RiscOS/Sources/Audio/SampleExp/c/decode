#if 0
#define DECODEDIAGS 1
#endif

#include <stdio.h>
#include "mpa.h"
#include "fxptparams.h"
#include "soundtypes.h"
#include "frame.h"
#include "tables.h"
#include "bits.h"
#include "decode.h"

static const unsigned char mx[64] = 
{
#define MX(n) (((n)/3) << 2 | ((n) % 3))
    MX( 0), MX( 1), MX( 2), MX( 3), MX( 4), MX( 5), MX( 6), MX( 7),
    MX( 8), MX( 9), MX(10), MX(11), MX(12), MX(13), MX(14), MX(15),
    MX(16), MX(17), MX(18), MX(19), MX(20), MX(21), MX(22), MX(23),
    MX(24), MX(25), MX(26), MX(27), MX(28), MX(29), MX(30), MX(31),
    MX(32), MX(33), MX(34), MX(35), MX(36), MX(37), MX(38), MX(39),
    MX(40), MX(41), MX(42), MX(43), MX(44), MX(45), MX(46), MX(47),
    MX(48), MX(49), MX(50), MX(51), MX(52), MX(53), MX(54), MX(55),
    MX(56), MX(57), MX(58), MX(59), MX(60), MX(61), MX(62), MX(63)
};

const unsigned char pos_to_band[32] = 
{
     0, 31,  1, 30,  3, 28,  2, 29,    7, 24,  6, 25,  4, 27,  5, 26,
    15, 16, 14, 17, 12, 19, 13, 18,    8, 23,  9, 22, 11, 20, 10, 21
};
const unsigned char band_to_pos[32] =
{
     0,  2,  6,  4, 12, 14, 10,  8,   24, 26, 30, 28, 20, 22, 18, 16,
    17, 19, 23, 21, 29, 31, 27, 25,    9, 11, 15, 13,  5,  7,  3,  1 
};

int get_header (FrameInfo *fi)
{
    /*
     * Check for minimal number of bits for header; we obviously need more
     * really, but this is OK for now.
     */
    uint32 h = getbits (32);
    int srate;
    uint32 bitrate;
    if ((h & 0xFFFF00F3) != 
	(0xFFF00000 |			/* Sync word required */
	 1<<19 |			/* nominally ISO/IEC 11172-3 compliant! */
	 (4-2)<<17 |			/* layer always = II */
	 1<<16 |			/* error protection always off */
					/* bits 15:12 - bitrate variable */
					/* bits 11:10 - nominal sample rate variable */
					/* bit 9 - padding variable */
					/* bit 8 - private bit not defined */
	 MODE_MONO<<6 |			/* mode always mono */
	 				/* (c)-bit don't care */
	 				/* copy/orig bit don't care */
	 0<<1))				/* no preemphasis */
	return 0;			/* not acceptable format */
    srate = sample_rate[FR_SAMPRATE_X(h)];
    fi->header = h;
    /* Layer II mono only */
    fi->startpos = bitposition () - 32;	/* to allow for ancilliary data at end */
    bitrate = L2_bitrate[FR_BITRATE_X(h)-1];
    set_alloc_table (fi, srate, bitrate);
    /* Work out how many bits this frame occupies */
    fi->totalbits = ((bitrate * 1152 / srate) / 8 + FR_PADDING(h)) * 8;
    fi->jsbound = fi->sblimit;
    return 1;				/* header decoded OK */
}

/* Handle any bits between end of coded data and start of next frame */
void skip_ancilliary_data (FrameInfo *fi)
{
    uint32 curpos = bitposition ();
    uint32 endpos = fi->startpos + fi->totalbits;
    while (curpos + 32 <= endpos)
    {
	(void) getbits (32);	/* just throw away for now! */
	curpos += 32;
    }
    if (curpos < endpos)
	(void) getbits (endpos - curpos);
}


int get_bitalloc (int *bit_alloc, FrameInfo *fi)
{
    int band;
    int sblimit = fi->sblimit;
    int jsbound = fi->jsbound;
    al_table *alloc = fi->alloc;
    const unsigned char *bp;
    int *ball;
    int nsf;

#if defined(DECODEDIAGS)
    if (diags)
	fprintf (stderr, "decode_bitalloc: pos %u sblimit %d jsbound %d\n", 
		 bitposition(), sblimit, jsbound);
#endif
    bp = band_to_pos;
    ball = bit_alloc;
    nsf = 0;
    for (band = 0; band < jsbound; ++band)
    {
	sb_alloc *ap = alloc->al[band];
	int nbit = ap[0].bits + 1;
	const int bandpos = *bp++;
	int b = getbits (nbit);
	if (b)
	{
	    BITALL ba;
	    ba.a = ap[b];
	    ba.a.bandpos = bandpos;  ba.a.js = 0;
	    *ball++ = ba.i;
	    ++nsf;
#if defined(DECODEDIAGS)
	    if (diags)
		fprintf (stderr, "s: bits %d b %d band %d pos %d\n", nbit, b, band, bandpos);
#endif
	}
    }
    for (band = jsbound; band < sblimit; ++band)
    {
	const sb_alloc *const ap = alloc->al[band];
	const int nbit = ap[0].bits + 1;
	const int b = getbits (nbit);
	const int bandpos = *bp++;
	if (b)
	{
	    BITALL ba;
	    ba.a = ap[b];
	    ba.a.bandpos = bandpos;
	    ba.a.js = 1;
	    *ball++ = ba.i;
	    nsf += 2;
#if defined(DECODEDIAGS)
	    if (diags)
		fprintf (stderr, "js: bits %d b %d band %d pos %d\n", nbit, b, band, bandpos);
#endif
	}
    }
    *ball++ = -1;			/* terminate the list */
    return nsf;
}

void get_scales (int *bit_alloc, int nsf, unsigned char scale_index[3][SBLIMIT],
		 FrameInfo *fi)
{
    int *ball;
    unsigned char scfsi[3*SBLIMIT];
    unsigned char *sia, *limit;
    BITALL ba;

    ball = (int *)bit_alloc;
    sia = scfsi;
    while ((ba.i = *ball++) != -1)
    {
	const int bandpos = ba.a.bandpos;
	const int sim = getbits (2);
	*sia++ = bandpos << 3 | sim;
    }
    limit = sia;
    sia = scfsi;
    while (sia < limit)
    {
	const int s = *sia++;
	const int bandpos = s >> 3;
	unsigned char * const sip = &scale_index[0][bandpos];
	int bits;
	switch (s & 3)
	{
	  case 0:		    /* all three scale factors transmitted */
	    bits = getbits (18);
	    break;

	  case 1:		    /* scale factor 1 & 3 transmitted, 2 = 1 */
	    bits = getbits (12);
	    bits = bits | (bits & 0xFC0) << 6;
	    break;

	  case 3:		    /* scale factor 1 & 2 transmitted, 3 = 2 */
	    bits = getbits (12);
	    bits = bits << 6 | (bits & 0x3F);
	    break;

	  case 2:		    /* only one scale factor transmitted, for all 3 */
	    bits = getbits (6);
	    bits = bits | bits << 6 | bits << 12;
	    break;
	}
	sip[0*SBLIMIT] = mx[bits >> 12];
	sip[1*SBLIMIT] = mx[bits >> 6 & 0x3F];
	sip[2*SBLIMIT] = mx[bits & 0x3F];
#if defined(DECODEDIAGS)
	if (diags)
	    fprintf (stderr, "sfmx (%x %x %x)\n", sip[0*SBLIMIT], sip[1*SBLIMIT], sip[2*SBLIMIT]);
#endif
    }
}

typedef struct { int cm1, d; } dqfr;
#define ONE (1 << MBITS)
#define DC(exp,fru,frl) { (int32) ((double)ONE * ((fru)-(frl)) / (frl)), \
			  (exp) >= FBITS ? 0 : 1 << (FBITS+1-(exp))  }
#define DCR(n) DC(n, 1 << (n), (1 << (n)) - 1)
const static dqfr dqtab[3+14] = 
{ 
/* First 3 entries are for the special grouped sample sets */
    DC (2,4,3),
    DC (2,8,5),
    DC (2,16,9),
/* Remaining constants are used for non-grouped sample values */
    DCR (3),
    DCR (4),
    DCR (5),
    DCR (6),
    DCR (7),
    DCR (8),
    DCR (9),
    DCR (10),
    DCR (11),
    DCR (12),
    DCR (13),
    DCR (14),
    DCR (15),
    DCR (16),
};
#define CR2_1 1.25992104989487
#define CR2_2 1.58740105196820
#define CR2_1_M1 ((int32)((CR2_1 - 1.0) * ONE))
#define CR2_2_M1 ((int32)((CR2_2 - 1.0) * ONE))


#pragma -z0
void get_samples (int *bit_alloc, unsigned char scale_index[SBLIMIT],
		  int32 fraction[3][SBLIMIT])
{
    BITALL ba;
    while ((ba.i = *bit_alloc++) != -1)
    {
	/* Yes, go read them in */
	int32 *frp = &fraction[0][ba.a.bandpos];
	int m = scale_index[ba.a.bandpos];
	const int b = ba.a.bits + 1;
	int32 samp0, samp1, samp2;
	int rsh;
	/* check for grouping in subband */
	if (!ba.a.group)
	{
	    /* No grouping */
	    const dqfr *dqp;
	    int32 cm1, d;
	    dqp = &dqtab[3+ba.a.quant];
	    /* No grouping */
	    samp0 = getbits (b*2);
	    samp2 = getbits (b) << (FBITS + 1 - b);
	    samp1 = (samp0 & (~(~0 << b))) << (FBITS + 1 - b);
	    samp0 = samp0 >> b << (FBITS + 1 - b);
	    cm1 = dqp->cm1;		/* all 'C' values are 1.n: get 0.n from entry */
	    d = dqp->d - (1 << FBITS); /* do 2's complement at same time */
	    samp0 += d;  samp0 += cm1 * samp0 >> MBITS;
	    samp1 += d;  samp1 += cm1 * samp1 >> MBITS;
	    samp2 += d;  samp2 += cm1 * samp2 >> MBITS;
	}
	else 
	{
	    /*
	     * 3-element arithmetic grouping for bit_alloc = 3, 5, 9
	     * (bits = 5,7,10).  We use hand-crafted code for these
	     * cases: looks lengthy but compiler gets it right, and
	     * it's a lot quicker than using div, mod etc.
	     */
	    if (b == 5)
	    {
		/*
		 * Simplest case, 3 x 3-valued samples (0..2) each
		 * representing -2/3, 0 or +2/3.
		 */
		unsigned int c = getbits (5);
		int32 v = (int32)((1 << FBITS) * (2.0/3) + 0.5);
		samp2 = -v;
		if (c >= 2*3*3) { samp2 = v; c -= 2*3*3; }
		if (c >= 1*3*3) { samp2 = 0; c -= 1*3*3; }
		samp1 = -v;
		if (c >= 2*3) { samp1 = v; c -= 2*3; }
		if (c >= 1*3) { samp1 = 0; c -= 1*3; }
		samp0 = c * v; 
		samp0 -= v;
	    }
	    else if (b == 7)
	    {
		/*
		 * Values 0..4, 0..4, 0..4 treated as merged base 5.
		 * Values 0..4 represent: { -4/5, -2/5, 0, 2/5, 4/5 }
		 */
		unsigned int c = getbits (7);
		int32 v = (int32)((1 << FBITS) * 2.0/5 + 0.5);
		samp2 = - (v * 2);
		if (c >= 2*5*5) { samp2 += v * 2; c -= 2*5*5; }
		if (c >= 2*5*5) { samp2 += v * 2; c -= 2*5*5; }
		if (c >= 1*5*5) { samp2 += v;     c -= 1*5*5; }
		samp1 = - (v * 2);
		if (c >= 2*5) { samp1 += v * 2; c -= 2*5; }
		if (c >= 2*5) { samp1 += v * 2; c -= 2*5; }
		if (c >= 1*5) { samp1 += v;     c -= 1*5; }
		samp0 = c * v;
		samp0 -= v * 2;
	    }
	    else
	    {
		/*
		 * Values 0..8, 0..8, 0..8 treated as merged base 9.
		 * Values 0..8 represent:
		 *   {-8/9 -6/9 -4/9 -2/9 0 +2/9  +4/9 +6/9 +8/9}
		 */
		unsigned int c = getbits (10);
		int32 v = (int32)((1 << FBITS) * 2.0/9 + 0.5);
		samp2 = -(v * 4);
		if (c >= 4*9*9) { samp2 += v * 4; c -= 4*9*9; }
		if (c >= 4*9*9) { samp2 += v * 4; c -= 4*9*9; }
		if (c >= 2*9*9) { samp2 += v * 2; c -= 2*9*9; }
		if (c >= 1*9*9) { samp2 += v * 1; c -= 1*9*9; }
		samp1 = -(v * 4);
		if (c >= 4*9) { samp1 += v * 4; c -= 4*9; }
		if (c >= 4*9) { samp1 += v * 4; c -= 4*9; }
		if (c >= 2*9) { samp1 += v * 2; c -= 2*9; }
		if (c >= 1*9) { samp1 += v * 1; c -= 1*9; }
		samp0 = c * v;
		samp0 -= v * 4;
	    }
	}
	rsh = ((m >> 2) + (FBITS > 15 ? FBITS - 15 : 0));
	if ((m & 3) == 0)
	{
	    samp0 <<= 1;
	    samp1 <<= 1;
	    samp2 <<= 1;
	}
	else
	{
	    int c;
	    if ((m & 3) == 1)
		c = CR2_2_M1;
	    else
		c = CR2_1_M1;
	    samp0 += (samp0 * c) >> MBITS;
	    samp1 += (samp1 * c) >> MBITS;
	    samp2 += (samp2 * c) >> MBITS;
	}
	frp[SBLIMIT*0] = samp0 >> rsh;
	frp[SBLIMIT*1] = samp1 >> rsh;
	frp[SBLIMIT*2] = samp2 >> rsh;
#if defined(DECODEDIAGS)
	if (diags)
	    if (frp[SBLIMIT*0] >=32768 || frp[SBLIMIT*0] < -32768 ||
		frp[SBLIMIT*1] >=32768 || frp[SBLIMIT*1] < -32768 ||
		frp[SBLIMIT*2] >=32768 || frp[SBLIMIT*2] < -32768)
	    {
		fprintf (stderr, "obtain_mono overflow (band %d) (%d %d %d) ba %08x\n", 
			 pos_to_band[ba.a.bandpos], frp[SBLIMIT*0], 
			 frp[SBLIMIT*1], frp[SBLIMIT*2], ba.i);
	    }
#endif
    }
}
#pragma -z1


/* EOF decode.c */


