; > asm.modhdr

; © SJ Middleton, 1995

; module header

                        GET     hdr:ListOpts
                        GET     hdr:Macros
                        GET     hdr:Proc
                        GET     hdr:ModHand

			GET	os:hdr.types
			GET	os:hdr.os
			GET	os:hdr.osmodule

			GET	hdr:soundfile

			GET	hdr.msadpcm

                        GET     "VersionASM"

        IMPORT  msadpcm_to16
        IMPORT  msadpcm_dispose

; ==============================================================================

; MODULE HEADER

        AREA    |!!!Module$$Header|, CODE, READONLY

Module_BaseAddr
        DCD     0
        DCD     MSadpcm_Init    -Module_BaseAddr
        DCD     MSadpcm_Die     -Module_BaseAddr
        DCD     MSadpcm_Service -Module_BaseAddr
        DCD     MSadpcm_Title   -Module_BaseAddr
        DCD     MSadpcm_HelpStr -Module_BaseAddr
        DCD     MSadpcm_HC_Table-Module_BaseAddr
	DCD	0               ; SWI chunk
	DCD	MSadpcm_SWIEntry -Module_BaseAddr
	DCD	MSadpcm_NameTable -Module_BaseAddr
        DCD     0               ; SWI decoding code
        DCD     0               ; messages file
        DCD     MSadpcm_ModuleFlags-Module_BaseAddr

MSadpcm_Title
        =       "SoundFileExtMSADPCM", 0

MSadpcm_HelpStr
        =       "SFExtMSADPCM", 9
        =       Module_HelpVersion, 0
        ALIGN

MSadpcm_ModuleFlags
        &       ModuleFlag_32bit

; ------------------------------------------------------------------------------

		^ 0, r12
NumClaims	# 4

WorkspaceSize	* :INDEX:@


; ------------------------------------------------------------------------------

MSadpcm_HC_Table 	* Module_BaseAddr       ; set table entry to zero

; ------------------------------------------------------------------------------
;
;       MSadpcm_Init - Initialisation entry point
;
; r10 = environment ptr (ie command tail)
; r11 = IO base or instantiation number
; r12 = private word pointer
; r13 = supervisor stack
; preserve r7-r11, r13, mode, flags
; SVC mode, IRQs and FIQs are enabled

MSadpcm_Init		Entry

			MOV	r3, #WorkspaceSize
			MOV	r0, #OSModule_Alloc
			SWI	XOS_Module
			EXIT	VS

			STR	r2, [r12]
			MOV	r12, r2

			MOV	r0, #0
			STR	r0, NumClaims
 [ Debugging
	DebugOpen "ram:$.msadpcm"
 ]
			EXIT

; ------------------------------------------------------------------------------
;
;       MSadpcm_Die - Die entry
;
; preserve r7-r11, r13, mode
; SVC mode, IRQs indeterminate, FIQs enabled

MSadpcm_Die		LDR	r12, [r12]
 [ Debugging
	DebugClose
 ]
			LDR	r0, NumClaims
			CMP	r0, #0
			MOVEQ	pc, lr

			ADR	r0, ErrorCantExit
			CMP     r0, #&80000000 ;
			CMNVC   r0, #&80000000 ; set V
			MOV     pc, lr

ErrorCantExit		DCD	0
			DCB	"Cannot kill MSADPCM module whilst it is in use", 0
			ALIGN

; ------------------------------------------------------------------------------
;
;       MSadpcm_Service - Main entry point for services
;
; in:   r1 = service reason code
; SVC or IRQ mode, IRQs indeterminate, FIQs enabled

; Ursula format

UServTab
		DCD	0
		DCD	UService - Module_BaseAddr
		DCD	Service_SoundFileIdentify
		DCD	0

		DCD	UServTab - Module_BaseAddr
MSadpcm_Service
		MOV	r0, r0
		Entry
		LDR	lr, =Service_SoundFileIdentify
		TEQ	r1, lr
                EXIT    NE
                B       After_UService_ALTENTRY
UService
                ALTENTRY
After_UService_ALTENTRY

; Service_SoundFileIdentify
; r0 = flags (stream type)
; r2 -> stream data
; r3 -> file info
; r4 -> soundfile_format


		; see if wave file
		LDR	lr, [r4, #SoundFile_Format_source]
		EOR	lr, lr, #osfile_TypeWaveform :AND: &ff
		EORS	lr, lr, #osfile_TypeWaveform :AND::NOT: &ff
                EXIT    NE

		; see if ms adpcm format (type 2)
		LDR	lr, [r4, #SoundFile_Format_data_format]
		CMP	lr, #2
                EXIT    NE

		; see if nbits == 4
		LDRB	lr, [r4, #SoundFile_Format_n_bits]
		CMP	lr, #4
                EXIT    NE

                Push    "r2,r3,r5-r8"
Proc_RegList    SETS    "r2,r3,r5-r8" ; reflect that more registers are now stacked

		LDR	r12, [r12]

; read out the extra data (assume that info_offset is within the buffer)

; ADPCMWaveFormat data

;     	    	^ 0
; oFormatTag   		#   2
; oChannels    		#   2
; oSamplesPerSec	#   4
; oAvgBytesPerSec	#   4
;
; oBlockAlign  		#   2
; oBitsPerSample	#   2
;
; oSize	    		#   2
; oSamplesPerBlock 	#   2
;
; oNumCoef    		#   2
; oCoefficients   	#   0

		; get buffer pointer and size of buffer
		LDR	r5, [r2, #SoundFile_Stream_buffer]
		LDR	r6, [r2, #SoundFile_Stream_buffer_size]

		; increment to where the wave info data is held
		; r5 -> WaveFormat info
		LDR	lr, [r4, #SoundFile_Format_info_offset]
		ADD	r5, r5, lr

		; r8 samples per block
		LDRB	r8, [r5, #SoundFile_WaveFormatChunk_extra_data]
		LDRB	lr, [r5, #SoundFile_WaveFormatChunk_extra_data+1]
		ORR	r8, r8, lr, LSL #8
		STR	r8, [r4, #ADPCM_NumSamples]

		; get num coefficients
		; r7 = num coefficients
		LDRB	r7, [r5, #SoundFile_WaveFormatChunk_extra_data+2]
		LDRB	lr, [r5, #SoundFile_WaveFormatChunk_extra_data+3]
		ORR	r7, r7, lr, LSL #8
		STR	r7, [r4, #ADPCM_NumCoefficients]

		; calculate max bits per sample
		; block_align*8/samples_per_block
    	    	LDR 	r0, [r4, #SoundFile_Format_block_align]
    	    	MOV	r0, r0, LSL #3+SoundFile_SampleMaxSizeShift
    	    	DivRem	r2, r0, r8, lr
    	    	STR 	r2, [r4, #SoundFile_Format_sample_max_size]

		; get size of extra data
		MOV	r3, r7, LSL #3	; 8 bytes per coefficient set

		; allocate memory for extra data
		; r2 -> extra data space
		MOV	r0, #OSModule_Alloc
		SWI	XOS_Module
		BVS	%ft99

		; save start of extra data
		STR	r2, [r4, #ADPCM_CoefficientData]

		; copy and expand coefficient data
		ADD	r0, r5, #SoundFile_WaveFormatChunk_extra_data+4	; in
		MOV	r1, r2						; out
		MOV	r2, r7						; n

20		LDRB	r3, [r0], #1
		LDRB	lr, [r0], #1
		ORR	r3, r3, lr, LSL #8
		MOV	r3, r3, LSL #16
		MOV	r3, r3, ASR #16

		LDRB	r8, [r0], #1
	    	LDRB	lr, [r0], #1
		ORR	r8, r8, lr, LSL #8
		MOV	r8, r8, LSL #16
		MOV	r8, r8, ASR #16

 [ Debugging
	Debug	"Coef A: ", r3
	Debug	"Coef B: ", r8
 ]
		STMIA	r1!, {r3,r8}
		SUBS	r2, r2, #1
		BGT	%bt20

		; store handler functions and r12
                ADR     r0, msadpcm_to16
		STR	r0, [r4, #SoundFile_Format_to16_handler]

                ADR     r0, msadpcm_dispose
		STR	r0, [r4, #SoundFile_Format_dispose_handler]

		STR	r12, [r4, #SoundFile_Format_handler_r12]

		; copy out compression type name
		ADR	r0, compression_name
		ADD	r1, r4, #SoundFile_Format_compression_name
30		LDRB	r2, [r0], #1
		STRB	r2, [r1], #1
		CMP	r2, #0
		BNE	%bt30


		; increment count of MS ADPCM files open
		LDR	r0, NumClaims
		ADD	r0, r0, #1
		STR	r0, NumClaims

		MOV	r0, #0		; no error

99		MOV	r1, #0		; claim service

                EXIT

; ------------------------------------------------------------------------------

compression_name
    	    	DCB	"Microsoft ADPCM", 0
	    	ALIGN

; ------------------------------------------------------------------------------
; SWI entry points

; r11 = SWI number modulo 64
; r12 = wp
; SVC mode, IRQs indeterminate, FIQs enabled

MSadpcm_SWIEntry * Module_BaseAddr

; ------------------------------------------------------------------------------
; SWI name table

MSadpcm_NameTable * Module_BaseAddr

; ===============================================================================

 [ Debugging
 		InsertNewDebugRoutines
 ]

		END
eof
