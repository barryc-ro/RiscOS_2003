; > msadpcmasm.s

; Algorithm by Microsoft
; Coding by SJMiddleton

		GET	os:hdr.types
		GET	os:hdr.os
		GET	os:hdr.osmodule

		GET	hdr:soundfile

		GET	hdr.proc

;    	    	GET 	asm:NewDebug1

		GET	hdr.msadpcm

  [ Debugging
	InsertNewDebugImports
  ]
; Register usage

In		RN	0	; source of 4 bit samples
Out		RN	1	; dest of 16 bit samples
ChannelNumber	RN  	2
SFFormat	RN      3
EndOfInput	RN	4

ErrorInput	RN	5   	; 2 nybbles

Coef1		RN	6	; 8.8 numbers signed
Coef2		RN      7
Samp1		RN      8
Samp2		RN      9
ErrorDelta	RN	10	; 4 bit value
Delta		RN	11	; 4 bit value
NumSamples	RN	12	; num left to do

tmp		RN	14

PredSamp	RN	SFFormat

MSADPCM_CSCALE      	* 8
MSADPCM_PSCALE      	* 8
MSADPCM_DELTA4_MIN  	* 16

; typedef struct adpcmblockheader_tag {
;	BYTE			bPredictor[nChannels];
;	int			iDelta[nChannels];
;	int			iSamp1[nChannels];
;	int			iSamp2[nChannels];
; } ADPCMBLOCKHEADER;

; 1st sample = High Nybble
; 2nd sample = Low Nybble

    	    	MACRO
$l    	    	RdShort	$val, $ix, $offset, $signed
$l		LDRB	$val, [$ix, #$offset]
		LDRB	tmp, [$ix, #$offset + 1]
		ORR	$val, $val, tmp, LSL #8
 [ "$signed" = "signed"
    	    	MOV 	$val, $val, LSL #16
    	    	MOV 	$val, $val, ASR #16
 ]
    	    	MEND

    	    	MACRO
$l  	    	WrShort	$val, $ix, $inc
$l    	    	STRB	$val, [$ix], #1
;		DebugData1 $val
    	    	MOV 	tmp, $val, LSR #8
    	    	STRB	tmp, [$ix], #$inc - 1
;		DebugData1 tmp
   	    	MEND

; offsets in the SoundFile_Format block

; r0 -> In
; r1 -> Out
; r2 = ChannelNumber (if stereo)
; r3 -> SoundFile_Format

; updates r0,r1
; preserves r2,r3,r4
; corrupts all other registers

    	    	MACRO
$l		msadpcm__decode	$nchannels
$l    	    	Entry	"r3"

 [ $nchannels = 2
    	    	ADD 	In, In, ChannelNumber
 ]
		; initialise
    	    	LDR	NumSamples, [SFFormat, #ADPCM_NumSamples]

		; load base of coefficients and max num
		LDR	Coef1, [SFFormat, #ADPCM_CoefficientData]
    	    	LDR	tmp, [SFFormat, #ADPCM_NumCoefficients]

		; get predictor and check within range
		LDRB	Coef2, [In]		; Coef2 = Predictor
;	Debug	"Pred:  ", Coef2
		CMP	Coef2, tmp
		SUBGE	Coef2, tmp, #1
;		EXITS	GE

		; load coefficients for this predictor (stored as sign extended word pairs)
   	    	ADD 	Coef1, Coef1, Coef2, LSL #3
		LDMIA	Coef1, {Coef1, Coef2}

;	Debug	"Coef 1: ", Coef1
;	Debug	"Coef 2: ", Coef2
		; Load Delta and Samps from start of input
 [ $nchannels = 1
    	    	RdShort Delta, In, 1
    	    	RdShort Samp1, In, 3, signed
    	    	RdShort Samp2, In, 5, signed
    	    	ADD 	In, In, #7
 ]
 [ $nchannels = 2
    	    	RdShort Delta, In, 2
    	    	RdShort Samp1, In, 6, signed
    	    	RdShort Samp2, In, 10, signed
    	    	ADD 	In, In, #14

    	    	SUB 	In, In, ChannelNumber
    	    	ADD 	Out, Out, ChannelNumber, LSL #1
 ]
;	Debug	"Delta:  ", Delta
;	Debug	"Samp1:  ", Samp1
;	Debug	"Samp2:  ", Samp2
		; write out the first two stored samples
 [ $nchannels = 1
    	    	WrShort	Samp2, Out, 2
    	    	WrShort	Samp1, Out, 2
 ]
 [ $nchannels = 2
    	    	WrShort	Samp2, Out, 4
    	    	WrShort	Samp1, Out, 4
 ]
		SUB	NumSamples, NumSamples, #2

10
		; Get the 4 bit signed error delta.
		;  (iErrorDelta = GETNIBBLE)
 [ $nchannels = 1
		TST	NumSamples, #1
		MOVNE	ErrorDelta, ErrorInput, LSL #28
		LDREQB	ErrorInput, [In], #1
		MOVEQ	ErrorDelta, ErrorInput, LSL #24
		MOV	ErrorDelta, ErrorDelta, ASR #28
 ]
 [ $nchannels = 2
		LDRB	ErrorInput, [In], #1
    	    	TST 	ChannelNumber, #1
		MOVEQ	ErrorDelta, ErrorInput, LSL #28
		MOVNE	ErrorDelta, ErrorInput, LSL #24
		MOV	ErrorDelta, ErrorDelta, ASR #28
 ]

		; see if we've exhausted the input available
		; we will actually have loaded an invalid sample but that should
		; be safe, we won't use it though (new in 0.04)
		CMP	In, EndOfInput
		EXITS	GT

		; Predict the next sample from the previous two samples.
		;  lPredSamp =  ((iSamp1 * iCoef1) + (iSamp2 *iCoef2)) / FIXED_POINT_COEF_BASE
		MUL	PredSamp, Samp1, Coef1

		MUL	tmp, Samp2, Coef2

		ADD	PredSamp, PredSamp, tmp
		MOV	PredSamp, PredSamp, ASR # MSADPCM_CSCALE

		; Add the 'error in prediction' to the predicted next sample and prevent over/underflow errors.
		;  (lNewSamp =  lPredSample + (iDelta * iErrorDelta)
		MLA	PredSamp, ErrorDelta, Delta, PredSamp

		;  if lNewSample too large, make it the maximum allowable size.
		;  if lNewSample too small, make it the minimum allowable size.
    	    	MOV 	tmp, #32768
    	    	SUB 	tmp, tmp, #1
		CMP	PredSamp, tmp
		MOVGE	PredSamp, tmp
		CMN	PredSamp, tmp
		MVNLT	PredSamp, tmp


		; Output the new sample.
		;  OUTPUT( lNewSamp )
    	    	WrShort	PredSamp, Out, $nchannels*2

		; Update the record of previous samples.
		;  iSamp2 = iSamp1;
		;  iSamp1 = lNewSample.
		MOV	Samp2, Samp1
		MOV	Samp1, PredSamp


		; Adjust the quantization step size used to calculate the 'error in prediction'.
		;  iDelta = iDelta * AdaptionTable[ iErrorDelta] / FIXED_POINT_ADAPTION_BASE
    	    	AND 	ErrorDelta, ErrorDelta, #15
    	    	ADR 	tmp, adaption_table
		LDR	ErrorDelta, [tmp, ErrorDelta, LSL #2]
		MUL	tmp, Delta, ErrorDelta
		MOV	Delta, tmp, ASR # MSADPCM_PSCALE

;	DebugData4	Delta

		; if iDelta too small, make it the minimum allowable size.
		CMP	Delta, # MSADPCM_DELTA4_MIN
		MOVLT	Delta, # MSADPCM_DELTA4_MIN


		SUBS	NumSamples, NumSamples, #1
		BGT	%bt10

		EXITS

    	    	MEND

; --------------------------------------------------------------------------

    	    	AREA	|msadpcm$$Code|,CODE,READONLY

adaption_table	DCD 	230, 230, 230, 230, 307, 409, 512, 614
                DCD 	768, 614, 512, 409, 307, 230, 230, 230

msadpcm_decode_stereo
		msadpcm__decode	2
msadpcm_decode_mono
		msadpcm__decode	1

; --------------------------------------------------------------------------

; r0 -> In
; r1 -> Out
; r2 = n bytes
; r3 -> soundfile_format
; r12 = ws ptr

; update r0, r1
; can corrupt all other registers

		EXPORT	msadpcm_to16

msadpcm_to16	Entry

		; r4 -> end of input data (defind in vars above also)
		ADD	r4, r0, r2

		; check how many channels
		LDRB	lr, [r3, #SoundFile_Format_n_channels]
		CMP	lr, #1
		BNE	%ft50

;	Debug	"End: ", r4
		; do mono loop
10

;	Debug	"In:  ", r0
;	Debug	"Out: ", r1
;	Debug	"fmt: ", r3
		BL	msadpcm_decode_mono
		CMP	r0, r4
		BLT	%bt10

		EXITS

		; do stereo loop

50
		Push	"r0,r1"
		MOV 	r2, #0
    	    	BL  	msadpcm_decode_stereo

		Pull	"r0,r1"
    	    	MOV 	r2, #1
    	    	BL  	msadpcm_decode_stereo

		CMP	r0, r4
		BLT	%bt50

		EXITS

; --------------------------------------------------------------------------

; r0 = soundfile_format
; r12 = ws ptr

; can corrupt all registers

		EXPORT	msadpcm_dispose

msadpcm_dispose	Entry

		; save soundfile format ptr
    	    	MOV 	r4, r0

		; free the extra space claimed for adpcm coefficicents
    	    	MOV 	r0, #OSModule_Free
    	    	LDR 	r2, [r4, #ADPCM_CoefficientData]
    	    	SWI 	XOS_Module
    	    	EXIT	VS

		; zero ptr
    	    	MOV 	r0, #0
    	    	STR 	r0, [r4, #ADPCM_CoefficientData]

		; decrement usage count
		LDR	r0, [r12, #0]
		SUB	r0, r0, #1
		STR	r0, [r12, #0]

    	    	EXITS

; --------------------------------------------------------------------------

		END

eof msadpcmasm.s
