; ->EntryFile

;*************************************************************************
;*************************************************************************

; This part deals with the FSEntry_File part of FileSwitch

; It contains:

;             LoadFile
;             ReadCatalogue
;             SaveFile       - is now in 'Error'

;*************************************************************************
;*************************************************************************

;*************************************************************************
LoadFile
;*************************************************************************

; on entry:
; R0 = 255
; R1 -> pointer to pathname
; R2 = address to load file
; R6 -> pointer to special field if present

; on exit:
; R0 is corrupted
; R2 = load address
; R3 = execution address
; R4 = file length
; R5 = file attributes
; R6 = pointer to name for printing *OPT 1 info


; R9 -> disc buffer

 log_on

 Debug " Load "

 STASH R2

 [ RISC_OS = 2
;********************
; Find out if CDFSFiler requested spritedata (A540)
;********************

 addr R0, SpriteDataPathName

 MOV R2, #?SpriteDataPathName

 BL CompareStrings     ; returns 'eq' or 'ne'

 BEQ %FT03
 ]

;********************



 MOV R0, R1

;*************************
; Dir: ( pathname$, RETURN pointer to block of object info, 0 if not found,
;                   RETURN R2 = 1 if a file, 2 if a directory )
;                   RETURN R3 -> start of disc buffer
;                   RETURN R4 = drive number
 MOV R1, #0 ; Looking for a file
 BL Dir
;*************************

 MOV R8, R4

; TEQ R2, #FILE
; ADRNEL R0, NotFound
; BNE Error

 MOV R9, R3

 GRAB R2

;**************
; Find file name in path ( last leaf )
;**************


; MOV R3, R0    ; R3 -> last '.'

;01

; LDRB R14, [ R0 ], #1
; TEQ R14, #"."
; MOVEQ R3, R0
; TEQ R14, #0
; BNE %BT01


; MOV R0, R3

;**************

; STR R0, temp3                        ; temp3 -> file name

 STR R1, temp2                        ; R1 -> entry details

 LDR R4, [ R1, #LENGTHOFFSET ]

 MOV R5, #myblocksize
 DivRem R7, R4, R5, R14      ; r7 = r4 DIV r5


;***************
; Work out actual lba start offset - for different size logical blocks
;***************

; R3 = start LBA
; R5 = block size

 MOV R4, #myblocksize

 LDR R5, [ R9, #BLOCKSIZEOFFSETINABUFFER ]

 DivRem R6, R4, R5, R14           ; R6 = log. sec size / lbsize

 LDR R5, [ R1, #LBASTARTOFFSET ]
 MOV R5, R5, LSR #8               ; remove objecttype crap

;------------------------------------------------------
; Make sure that don't try to divide by 0 or locks up !
;------------------------------------------------------

 TEQ        r6, #0

 [ RISC_OS=2
 ADREQL     r0, InternalError
 BEQ        Error
 |
            MOVEQ       r0, #ERROR_INTERNALERROR
            BEQ         Error
 ]
;------------------------------------------------------


 DivRem R3, R5, R6, R14           ; R3 = start LBA / R6

 STR R3, temp1                    ; temp1 = STart LBA

 MOV R6, R2                       ; R6 -> start of load address

 MOV R2, R7                 ; Load less than or equal number of blocks


; number_of_bytes - ( ( number_of_bytes DIV blocksize ) * blocksize )

; ( ABOVE function ) this gives the number of bytes left in the last block

; ADD R7, R12, #INDEX:sparecontrolblock
 MOV R0, R8
 BL PreConvertDriveNumberToDeviceID
 BVS Error

 LDRB R0, [ R9, #DISCMODEOFFSETINABUFFER ]
 BL ChangeDiscMode         ; R0 = mode, R7 -> control block


 MOV R0, #0
 MOV R1, R3
 MOV R3, R6

 MOV R4, #myblocksize

 CMP R2, #0
 SWIGT XCD_ReadData

 BVS Error

; Load in the remaining bytes from the last block

                                 ; R2 = NUMBER_OF_BYTES DIV BLOCKSIZE

; LDR R1, [ R9, #BLOCKSIZEOFFSETINABUFFER ]
 MOV R1, #myblocksize

 MUL R3, R1, R2                  ; R3 = number of bytes loaded so far


 LDR R14, temp2
 LDR R4, [ R14, #LENGTHOFFSET ]   ; R4 = number_of_bytes

 SUBS R4, R4, R3                 ; No more bytes to load ?
                                 ;
 BLE %FT02                       ; [ all done ]


                      ; Load last block into temp buffer

                      ; then transfer correct number of bytes to their mem

 ; WORK OUT POSITION TO PUT BYTES AT

 ; R6 = start address of load

 ; R4 = number of bytes left to load

 ; R3 = number of bytes loaded so far

 ; R2 = number of blocks loaded so far



                               ; = position to dump rest of data

              
                               ; R3 = position to copy to


 ADD R3, R3, R6

 LDR R1, temp1                 ; start LBA + 
 ADD R1, R1, R2                ; number of blocks = last block

 MOV R0, #0

 MOV R2, #1

 ;   OK       WRONG       OK      OK           WRONG
 ; R0 = 0, R1 = block, R2 = 1, R3 -> place, R4 = number bytes


 SWI XCD_ReadData

 BVS Error

                           ; exit neatly

02

 GRABALL
 LDR R6, temp2
; LDR R2, [ R6, #LOADADDRESSOFFSET ]
; LDR R3, [ R6, #EXECUTIONADDRESSOFFSET ]
; LDR R4, [ R6, #LENGTHOFFSET ]

 LDMIB R6, { R2, R3, R4 }

 LDRB R5, [ R6, #FILEATTRIBUTESOFFSET ]

; LDR R6, temp3
 ADD R6, R6, #OBJECTNAMEOFFSET

 BICS PC, R14, #Overflow_Flag  ; explicitly Clear the overflow flag




 [ RISC_OS = 2

;------ Someone wanted to load the sprite for the filer

03

; R0 = 255
; R1 -> pointer to pathname
; R2 = address to load file
; R6 -> pointer to special field if present

 Debug " Give filesprite "

 GRAB R2

 ADRL R1,StartOfSpriteData
; LDR R3,=EndOfSpriteData-StartOfSpriteData
 LDR R3, spritelength
 BL CopyMemory

; R2=load address
; R3=execution address
; R4=length
; R5=file attributes
; R6=full file name

 GRABALL

; LDR R2, spriteloadaddress
; LDR R3, spriteexecuteaddress
; LDR R4, spritelength
 ADR R2, spriteloadaddress
 LDMIA R2, { R2, R3, R4 }
 MOV R5, #RLRL
 MOV R6, R1

 BICS PC, R14, #Overflow_Flag

 ]


;*************************************************************************
ReadCatalogue ROUT
;*************************************************************************

; entry: R0 = 5
;        R1 = pointer to pathname ( null terminated )
;        R6 = pointer to special field if present, else 0

; exit:  R0 = 0 if not found, 1 if file, 2 if directory
;        R2 = load address
;        R3 = execution address
;        R4 = file length
;        R5 = file attributes
 log_on

 Debug " Find the file "


 [ RISC_OS = 2
;********************
; Find out if CDFSFiler requested spritedata
;********************

 addr R0, SpriteDataPathName

 MOV R2, #?SpriteDataPathName

 BL CompareStrings     ; returns 'eq' or 'ne'

 ADREQ R1, FalseSpriteData
 BEQ %FT02
 ]

;********************


 MOV R0, R1

 Debug " Before DIR "
;***********************
; Dir: ( pathname$, RETURN pointer to block of object info, 0 if not found,
;                   RETURN R2 = 1 if a file, 2 if a directory )
;                   RETURN R3 -> start of disc buffer
;                   RETURN R4 = drive number
 MOV R1, #2    ; Don't care what I find
 BL Dir
;***********************

 Debug " After DIR "

;************
; Object not found ( so tell fileswitch )
;************

 TEQ R2, #NOTFOUND              ; If not found then tell FS
 GRABALL EQ                     ;
 MOVEQ R0, #0                   ;
 BICEQS PC, R14, #Overflow_Flag ;

;************
; Was object a directory ? ( so get information from 'TempArea' )
;************

 Debug " FOUND "

 TEQ R2, #DIRECTORY
 ADDEQ R1, R12, #:INDEX:TempArea
 STREQB R2, [ R1, #OBJECTTYPEOFFSET ]

;************
; Save pointer to block of information
;************

02

 STR R1, temp1
 GRABALL
 LDR R1, temp1

;************
; Tell fileswitch about object
;************

 LDRB R0, [ R1, #OBJECTTYPEOFFSET ]
; LDR R2, [ R1, #LOADADDRESSOFFSET ]
; LDR R3, [ R1, #EXECUTIONADDRESSOFFSET ]
; LDR R4, [ R1, #LENGTHOFFSET ]
 LDMIB R1, { R2, R3, R4 }
 LDRB R5, [ R1, #FILEATTRIBUTESOFFSET ]

 BICS PC, R14, #Overflow_Flag   ; Explicitly clear the overflow flag




 [ RISC_OS = 2
;**************
; This structure is built in the same way as a file.
;**************

FalseSpriteData

 DCD FILE                      ; object type = FILE
spriteloadaddress
 DCD SPRITELOADADDRESS         ; load address
spriteexecuteaddress
 DCD SPRITEEXECUTIONADDRESS    ; execution address
spritelength
 DCD EndOfSpriteData - StartOfSpriteData ; Length
 DCD 0
 DCB 0
 DCB RLRL

 ALIGN

 ]

 [ RISC_OS > 2
;**********************************************************************************************
; FUNCTION: ReadBlockSize
;
; on entry:
;          r0 =  10
;          r1 -> filename
;          r6 -> special field, or 0
; on exit:
;          r2 = natural block size of file
;
; see page 4-30 of RISC OS 3 PRMs
;**********************************************************************************************
ReadBlockSize

; Just make sure that the file exists, if it does then the natural size is 2048 bytes.
       MOV       r0, r1
       MOV       r1, #0
       BL        Dir
       GRABALL
       MOV       r2, #2048
       BICS      pc, r14, #Overflow_Flag

 ]

;**********************************************************************************************


 LTORG

 END

