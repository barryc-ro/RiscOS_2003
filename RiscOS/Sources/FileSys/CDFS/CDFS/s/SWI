
; CDFS SWI commands in here are:

; CDFS_ConvertDriveToDevice 0
; CDFS_SetBufferSize        1
; CDFS_GetBufferSize        2
; CDFS_SetNumberOfDrives    3
; CDFS_GetNumberOfDrives    4
; CDFS_GiveFileType         5
; CDFS_DescribeDisc         6
; CDFS_WhereIsFile          7
; CDFS_Truncation           8

; Tables in here:
; IBMExtensions
; ArchyFileTypes
;                 DO NOT USE GRABALL OR STASHALL !!!!!!!!!

;                 HANDLE YOUR OWN ERRORS


; SWI process -

; 1. Load R12 with w/s pointer

; 2. Save all registers at start of stack

; 3. Check that SWI is a valid number ( in the range 0 to x ( < 64 ) )

; 4. Branch to proc to control that part

; 5. Terminate the proc with BICS PC, R14, #Overflow_Flag or ORRVSS PC, R14,

 [ RISC_OS=2
switoobig DCD &1E6
            = "Unknown CDFS operation", 0
 ALIGN
 ]


;*********************************************************************
CDFSSWIentry
;*********************************************************************

 LDR R12, [ R12 ]

; TURN IRQS ON

 MVN R10, #I_bit    ; R10 can safely be corrupted
 TSTP R10, PC

; SWI_STASHALL

;**************************************************************************
;                          Check SWI Number
;**************************************************************************


 CMP R11, #( EndSWIJumpTable - StartSWIJumpTable ) / 4

 [ RISC_OS=2
 addr R0, switoobig, GT
 ORRGTS PC, R14, #Overflow_Flag
 |
        STASH     "r1-r3, r14", GT
        addr      r0, switoobig_tag, GT
        ADRGT     r1, message_block
        MOVGT     r2, #0
        SWIGT     XMessageTrans_ErrorLookup
        GRAB      "r1-r3, r14", GT
        ORRGTS    pc, r14, #Overflow_Flag
 ]

;***************************************************************************
;                    Jump table for each SWI ( very fast ) !!
;***************************************************************************

 STASH "R0 - R9, R14"

 Debug " SWI SWI "

 LDR R14, [ PC, R11, LSL #2 ]    ; R14 corrupted !!!!!!!!!!!
 ADD PC, PC, R14                 ;


StartSWIJumpTable

 DCD CDFS_ConvertDriveToDevice - StartSWIJumpTable - 4
 DCD CDFS_SetBufferSize - StartSWIJumpTable - 4
 DCD CDFS_GetBufferSize - StartSWIJumpTable - 4
 DCD CDFS_SetNumberOfDrives - StartSWIJumpTable - 4
 DCD CDFS_GetNumberOfDrives - StartSWIJumpTable - 4
 DCD CDFS_GiveFileType - StartSWIJumpTable - 4
 DCD CDFS_DescribeDisc - StartSWIJumpTable - 4
 DCD CDFS_WhereIsFile - StartSWIJumpTable - 4
 DCD CDFS_Truncation - StartSWIJumpTable - 4

EndSWIJumpTable


;***************************************************************************
;***************************************************************************
;***************************************************************************
;***************************************************************************

;**************************************************************************
;                          Do CDFS_ConvertDriveToDevice
;**************************************************************************

CDFS_ConvertDriveToDevice


; on entry:
;          R0 = drive number

; on exit:
;         R0, R2 - R10 preserved
;         R1 = composite device id ( b0..b2 = device,b3..b4=card,b5..b7=LUN)
;            + drivetype ( b8 .. b15 )
;            ( b16 .. b30 RESERVED )
;         If error, for some reason, then R1 = &ffffffff ( -1 )


;****************
; First check to see if R0 >= number of drives in my list
;****************

 Debug " Convert drive "

 LDRB R1, numberofdrives

 CMP R0, R1

 BLGE AnotherDriveHasBeenAdded    ; RETURNS V set if error

 GRAB "R0 - R9, R14", VS          ; Error from drive search
 MOVVS R1, #-1                    ;
 BICVSS PC, R14, #Overflow_Flag   ;

 LDRB R1, numberofdrives

 CMP R0, #0                       ; R0 > 0 and < numberofdrives ?
 RSBHSS R14, R0, R1               ;
 GRAB "R0 - R9, R14", LO          ;
 MOVLO R1, #-1                    ;
 BICLOS PC, R14, #Overflow_Flag   ;

;****************
; Give the composite device id to Leonardo
;****************

 LDR R14, =:INDEX:ListOfDrivesAttached
 ADD R14, R14, R12

 LDRB R1, [ R0, R14 ]

 LDR R14, =:INDEX:DriveTypes
 ADD R14, R14, R12
 LDRB R2, [ R0, R14 ]
 ORR R1, R1, R2, ASL #8

; STR R1, swi_verytemporary
 MOV R10, R1

; SWI_GRABALL

 Debug " End convert "

 GRAB "R0 - R9, R14"

; LDR R1, swi_verytemporary
 MOV R1, R10

 BICS PC, R14, #Overflow_Flag

;**************************************************************************
CDFS_SetBufferSize   ROUT ; R0 = bit number
;**************************************************************************

 MOV R4, R0

;**************
; Get byte currently in CMOS RAM
;**************

 MOV R0, #161                ; Reason code              FOR GET

 MOV R1, #HARDRAMLOCATION    ; Cmos RAM location

 SWI XOS_Byte                ; R2 = contents of location

; BVS SWI_Error


;************
; Mix byte in CMOS with number
;************

 BIC R2, R2, #BITSUSEDBYBUFFER

 ORR R2, R2, R4, ASL #BUFFERSHIFT


;************
; Store mixed byte back into CMOS
;************

 MOV R0, #162                ;  (reason code )          FOR PUT

 MOV R1, #HARDRAMLOCATION

                             ; R2 = number
 SWI XOS_Byte

; BVS SWI_Error



; SWI_GRABALL
 GRAB "R0 - R9, R14"

 BICS PC, R14, #Overflow_Flag

;**************************************************************************
CDFS_GetBufferSize   ROUT ; RETURNS R0 = bit number
;**************************************************************************

;**************
; Get byte currently in CMOS RAM
;**************

 MOV R0, #161                ; Reason code              FOR GET

 MOV R1, #HARDRAMLOCATION    ; Cmos RAM location

 SWI XOS_Byte                ; R2 = contents of location

; BVS SWI_Error


;**************
; Extract the buffer value from the CMOS byte
;**************

 AND R2, R2, #BITSUSEDBYBUFFER

 MOV R2, R2, ASR #BUFFERSHIFT


; STR R2, swi_verytemporary
 MOV R10, R2

; SWI_GRABALL

 GRAB "R0 - R9, R14"

; LDR R0, swi_verytemporary
 MOV R0, R10

 BICS PC, R14, #Overflow_Flag

;**************************************************************************
CDFS_SetNumberOfDrives  ROUT  ; R0 = number of drives
;**************************************************************************

 MOV R4, R0

;**************
; Get byte currently in CMOS RAM
;**************

 MOV R0, #161                ; Reason code              FOR GET

 MOV R1, #HARDRAMLOCATION    ; Cmos RAM location

 SWI XOS_Byte                ; R2 = contents of location

; BVS SWI_Error


;************
; Mix byte in CMOS with number
;************

 BIC R2, R2, #BITSUSEDBYDRIVENUMBER
 ORR R2, R2, R4

;************
; Store mixed byte back into CMOS
;************

 MOV R0, #162                ;  (reason code )          FOR PUT

 MOV R1, #HARDRAMLOCATION

                             ; R2 = number
 SWI XOS_Byte

; BVS SWI_Error



; SWI_GRABALL

 GRAB "R0 - R9, R14"

 BICS PC, R14, #Overflow_Flag

;**************************************************************************
CDFS_GetNumberOfDrives  ROUT ; RETURNS R0 = number of drives
;**************************************************************************

;**************
; Get byte currently in CMOS RAM
;**************

 MOV R0, #161                ; Reason code              FOR GET

 MOV R1, #HARDRAMLOCATION    ; Cmos RAM location

 SWI XOS_Byte                ; RETURNS R2 = contents of location

; BVS SWI_Error


;************
; Mix byte in CMOS with number
;************

; AND R2, R2, #BITSUSEDBYDRIVENUMBER

; STR R2, swi_verytemporary

 AND R10, R2, #BITSUSEDBYDRIVENUMBER

; SWI_GRABALL
 GRAB "R0 - R9, R14"

; LDR R0, swi_verytemporary
 MOV R0, R10

 BICS PC, R14, #Overflow_Flag


;**************************************************************************
CDFS_GiveFileType ROUT   ; R0 -> filename, RETURNS R1 = file type or 0
;**************************************************************************

; on entry:
;          R0 -> filename ( not necc. word aligned )
; on exit:
;          R1 = file type for name ( 0 if none found ) ( 0 TO &FFF )

 STASH R0 - R3

;********************
; First look to see if the path to read optional info from has been set up
;********************

 ADR R0, RedirectedFileTypes

 LDR R1, =:INDEX:SWI_buffer
 ADD R1, R1, R12

 MOV R11, R1

 MOV R2, #LENGTHOFDISCNAME + ( MAXLENGTHOFNAME + 1 ) * MAXNUMBEROFPATHS + 4

 MOV R3, #0

 SWI XOS_ReadVarVal         ; system variable set ?
                            ;
 GRAB R0 - R3

 BVS no_extensions          ; [ no ]


;********************   *********************    *********************
; Read file extensions from a file instead of the mem table
;********************   *********************    *********************

; Find extension ( after dot )

 MOV R8, R0

find_that_dot

 LDRB R1, [ R8 ], #1
 TEQ R1, #DOT
 TEQNE R1, #0

 BNE find_that_dot

 TEQ R1, #0                         ; No dot
 LDRNEB R1, [ R8 ]                  ; A dot but nothing follows it
 TEQNE R1, #0                       ;
; SWI_GRABALL EQ                     ;
 GRAB "R0 - R9, R14", EQ
 MOVEQ R1, #0                       ;
 BICEQS PC, R14, #Overflow_Flag     ;


; R6 = file type number of current name
; R7 = number of lines done
; R8 -> extension name, ie TXT
; R9 = file handle
; R10 = finish ( TRUE / FALSE )
; R11 -> SWI_buffer

                ; Look through all of file for extensions

;*****
; Copy '<CDFSFilefdgfjsa>' into SWI_buffer

 MOV R14, #"<"
 MOV R0, R11
 STRB R14, [ R0 ], #1

 ADR R1, RedirectedFileTypes

08

 LDRB R14, [ R1 ], #1
 TEQ R14, #0
 STRNEB R14, [ R0 ], #1
 BNE %BT08

 MOV R14, #">"
 STRB R14, [ R0 ], #1
 MOV R14, #0
 STRB R14, [ R0 ], #1

 Debug "Hi "

;*****

 MOV R0, #&40 + 2_1100          ; OPENIN ( no writing to file necc. )
 MOV R1, R11
 MOV R2, #0

 SWI XOS_Find                   ; Path is crap ?
                                ;
 BVS no_extensions              ; [ yes ]
                                ; RETURNS R0 = file handle ( or 0 if VS )

 Debug " Good handle "

 MOV R9, R0

 MOV R10, #FALSE
 MOV R7, #1

; ******************** Validate file extension **********************

;*******************
REPEAT_start_checks
;*******************

; R2 -> place to put next char
; R3 -> last place to put char

 MOV R2, #namebufferexe
 ADD R2, R11, R2

 ADD R3, R2, #5

05

 MOV R1, R9             ;
 SWI XOS_BGet           ; RETURNS R0 = byte got from file

; BVS SWI_Error

 STRB R0, [ R2 ], #1

 TEQ R0, #SPACE
 TEQNE R2, R3
 BNE %BT05

 Debug " Go byte "

 TEQ R2, R3
 BEQ %FT01

 MOV R3, #0
 STRB R3, [ R2, #-1 ]

; ******************** Validate file type **********************


; R2 -> place to put next char
; R3 -> last place to put char

 ADD R2, R11, #numberbufferexe

 ADD R3, R2, #7

06

 MOV R1, R9             ;
 SWI XOS_BGet           ; RETURNS R0 = byte got from file

; BVS SWI_Error

 STRB R0, [ R2 ], #1

 TEQ R0, #&A
 TEQNE R2, R3
 BNE %BT06


 TEQ R2, R3
 BEQ %FT01

 MOV R3, #0
 STRB R3, [ R2, #-1 ]

 Debug " File type "

 LDR R0, =10+(1:SHL:29)          ; Get number from string in number buffer
 ADD R1, R11, #numberbufferexe   ;
 MOV R2, #&1000                  ;
 SWI XOS_ReadUnsigned            ; RETURNS R2 = number


 MOV R6, R2

; Compare namebuffer & entryname passed in


 MOV R0, R8
 ADD R1, R11, #namebufferexe


; R0 -> entryname
; R1 -> namebuffer
; R2 = byte from entry name
; R3 = byte from name buffer
; R4 = temp
; R14 = counter

 MOV R14, #0

07

 LDRB R2, [ R0, R14 ]
 LDRB R3, [ R1, R14 ]


; STASH "R0, R14"
; MOV R0, R3
; SWI XOS_WriteC
; GRAB "R0, R14"

 ADD R14, R14, #1

 TEQ R2, #0
 TEQEQ R3, #0
; STREQ R6, swi_verytemporary      ;
 MOVEQ R10, R6
 MOVEQ R0, #0                     ; Close file if found
 MOVEQ R1, R9                     ;
 SWIEQ XOS_Find                   ;
; SWI_GRABALL EQ                   ;
 GRAB "R0 - R9, R14", EQ
; LDREQ R1, swi_verytemporary      ;
 MOVEQ R1, R10
 BICEQS PC, R14, #Overflow_Flag   ;

 TEQ R2, R3
 BEQ %BT07

end_mems      ; R4 = TRUE / FALSE  name same


 ADD R7, R7, #1        ; line = line + 1


 MOV R0, #5                           ; EOF
 MOV R1, R9                           ;
 SWI XOS_Args                         ; RETURNS R2 = 0 if not EOF, else EOF

 TEQVC R2, #0
 BEQ REPEAT_start_checks

;********************   ;********************    ;********************
; close file
;********************   ;********************    ;********************

 MOV R0, #0
; MOV R1, R9
 SWI XOS_Find

; SWI_GRABALL
 GRAB "R0 - R9, R14"
 MOV R1, #0
 BICS PC, R14, #Overflow_Flag

;********************   ;********************    ;********************

01

 MOV R0, #0              ; Close file then carry on with the internal extens
 MOV R1, R9              ;
 SWI XOS_Find            ;

no_extensions

 ; 1/ Find if there is a dot in the name

 MOV R3, R0

find_me_the_dot                    ; Look for the dot
 LDRB R1, [ R3 ], #1               ;
 TEQ R1, #0                        ; No dot found in the name
; SWI_GRABALL EQ                    ;
 GRAB "R0 - R9, R14", EQ
 MOVEQ R1, #0                      ;
 BICEQS PC, R14, #Overflow_Flag    ;
 TEQ R1, #"."                      ;
 BNE find_me_the_dot               ;

 MOV R7, R3

find_me_the_end                    ; Find end of name passed in
 LDRB R1, [ R7 ], #1               ;
 TEQ R1, #0                        ;
 BNE find_me_the_end               ;

 ADD R6, R3, #3

 CMP R7, R6                        ; Last char might have been the dot
; SWI_GRABALL LE                    ;
 GRAB "R0 - R9, R14", LE
 MOVLE R1, #0                      ;
 BICLES PC, R14, #Overflow_Flag    ;

 ADR R4, IBMExtensions
 MOV R6, #0

 SUB R7, R7, #1

repeat_search_for_extension

 LDRB R1, [ R4 ]                   ; Reached end of list
 TEQ R1, #0                        ;
; SWI_GRABALL EQ                    ;
 GRAB "R0 - R9, R14", EQ
 MOVEQ R1, #0                      ;
 BICEQS PC, R14, #Overflow_Flag    ;

 MOV R5, R3

compare_extension_with_name        ; Compare the names with the one passed
                                   ; in
 LDRB R2, [ R5 ], #1               ; part from name passed in

 UpperCase R2, R14           ; characters 'a - z' converted to upper case


 LDRB R1, [ R4 ], #1               ; part from list of names
 TEQ R1, #0                        ; different
 TEQEQ R2, #0                      ;
 BEQ same                          ;
 TEQ R2, R1                        ; same
 BNE different                     ;
 TEQ R5, R7                        ;
 BNE compare_extension_with_name

same

 ADR R0, ArchyFileTypes         ; Load corresponding Archy file type
 LDR R1, [ R0, R6, ASL #2 ]      ;

; STR R1, swi_verytemporary           ;
 MOV R10, R1
; SWI_GRABALL                         ;
 GRAB "R0 - R9, R14"
; LDR R1, swi_verytemporary           ; Matched
 MOV R1, R10
 BICS PC, R14, #Overflow_Flag        ;


different

 TEQ R1, #0                        ; Move to next entry in list
 LDRNEB R1, [ R4 ], #1             ;
 BNE different                     ;

 ADD R6, R6, #1                    ; Not found
                                   ;
 B repeat_search_for_extension     ;


RedirectedFileTypes = "CDFSNewFileTypePath$File", 0

 ALIGN

;**************************************************************************
IBMExtensions
;**************************************************************************


 ; Must be of length 4 chars ( fill with zeroes if nec. )

 = "DOC", 0    ; 0
 = "TXT", 0    ; 1
 = "BAT", 0    ; 2
 = "EXE", 0    ; 3
 = "BIN", 0    ; 4
 = "TIF", 0    ; 5
 = "COM", 0    ; 6

               ; Insert more extensions here ( don't forget to add matching
               ;                              Archy file type below )

 [ Module_Version >= 220
 = "PCD", 0    ; 7
 ]

 = 0

 ALIGN

;**************************************************************************
ArchyFileTypes
;**************************************************************************

 DCD &FFF      ; text       0
 DCD &FFF      ; text       1
 DCD &FDA      ; MSDOSbat   2
 DCD &FD9      ; MSDOSexe   3
 DCD &FFD      ; Data       4
 DCD &FF0      ; TIFF       5
 DCD &FD8      ; MSDOScom   6

               ; Add Archy file types here

 [ Module_Version >= 220
 DCD &be8      ; PhotoCD
 ]

 DCD 0


;**************************************************************************
CDFS_DescribeDisc ROUT
;**************************************************************************
; on entry:
;          R0 = drive number
;          R1 -> 64 byte block

; on exit:
;         nowt


; R9 -> 64 byte block


; 0. Is block word aligned ?

 TST R1, #3
; GRAB "R0 - R9, R14", NE
; ADRNEL R0, InvalidParameter
; ORRNES PC, R14, #Overflow_Flag
 BNE swiinvalidparameter

 MOV R9, R1


; Kludge any error to return

 LDR R14, stackreturn
 STASH R14
 ADR R14, return_here
 STASHALL


 BL TestKnowDisc             ; R0 = drive, RETURNS R1->buf, RETURNS R2 =disc

return_here

 STRVS R0, swi_verytemporary
 STRVC R1, swi_verytemporary
 GRABALL
 LDRVC R1, swi_verytemporary
 GRAB R14
 STR R14, stackreturn

 GRAB "R0 - R9, R14", VS
 LDRVS R0, swi_verytemporary
 ORRVSS PC, R14, #Overflow_Flag

; 4. Enter details into block

 ;a. Size of disc ( 1 word )

 LDR R14, [ R1, #SIZEOFDISCOFFSETINABUFFER ]

 STR R14, [ R9, #SIZEOFDISCOFFSETFORDESCRIBE ]

 ;b. Block size ( 1 word )

 LDR R14, [ R1, #BLOCKSIZEOFFSETINABUFFER ]

 STR R14, [ R9, #BLOCKSIZEOFFSETFORDESCRIBE ]

 ;c. Block number of root directory ( 1 word )

 LDR R14, [ R1, #LBAOFMAINDIROFFSETINABUFFER ]

 STR R14, [ R9, #STARTLBAOFFSETFORDESCRIBE ]

 ;d. Disc name ( up to 32 bytes )

 ADD R8, R1, #DISCNAMEOFFSETINABUFFER
 ADD R7, R9, #DISCNAMEOFFSETFORDESCRIBE
 ADD R6, R7, #LENGTHOFDISCNAME

01


 LDRB R5, [ R8 ], #1
 TEQ R5, #SPACE
 MOVEQ R5, #0
 STRB R5, [ R7 ], #1

 CMP R7, R6
 BLE %BT01

 ;e. Boot option ( 1 byte )

 MOV R5, #0
 STRB R5, [ R9, #BOOTOPTIONOFFSETFORDESCRIBE ]

 GRAB "R0 - R9, R14"

; Not grabbing the correct return registers first time around

 BICS PC, R14, #Overflow_Flag

;**************************************************************************
CDFS_WhereIsFile  ; R0 -> pathname RETURNS R1 = block number or -1
                  ; RETURNS R2 = length in bytes of file
;**************************************************************************
;*********************
; Dir: ( pathname$, RETURN pointer to block of object info, 0 if not found,
;                   RETURN R2 = 1 if a file, 2 if a directory )
;                   RETURN R3 -> start of disc buffer
;                   RETURN R4 = drive number

; Kludge any error to return

 ADR R14, here
 STASHALL

 CLV

 MOV R1, #2 ; Don't care what I find
 BL Dir
;*********************

here
 BVS     error_here

 TEQ R2, #FILE                     ; A file ?

 STREQ     R1, swi_verytemporary

 GRABALL

 GRAB "R0 - R9, R14"
 LDREQ R10, swi_verytemporary
 LDREQ R2, [ R10, #LENGTHOFFSET ]
 LDREQ R1, [ R10, #LBASTARTOFFSET ]
 MOVEQ R1, R1, LSR #8
 MOVNE R1, #-1
 BICS PC, R14, #Overflow_Flag

error_here

 STR     R0, swi_verytemporary
 GRABALL
 GRAB    "R0-R9,R14"
 LDR     R0, swi_verytemporary
 ORRS    PC, R14, #Overflow_Flag
;**************************************************************************
CDFS_Truncation
;**************************************************************************

; on entry:
;          r0=0 THEN read current truncation type
;                    on exit:
;                            r1=current value
;               ELSE
;          r0=1
;               set truncation type
;               r1=0 then truncate from right  (default for risc os 2.00)
;               r1=1 then truncate from left
;               r1=2 then no truncation        (default for risc os 3.00 > )
;               r1=-1 then use default for os version

 TEQ R0, #0
 GRAB "R0-R9,R14",EQ
 LDREQB R1, truncation
 BICEQS PC, R14, #Overflow_Flag ; doesn't hurt

 TEQ R0, #1

 BNE swiinvalidparameter

; check for risc os 3, if so then allow r1=0 to 2 else r1=0 to 1

 LDRB R14, os_version
 SUB R14, R14, #1      ; OK AT THE MOMENT

 CMP R1, #-1            ; Use default truncation for risc os version
 ANDEQ R1, R14, #2_10      ; r14=1 or 2 convert to 0 or 2

 CMP R1, #0
 RSBHSS R3, R1, R14
 BLO swiinvalidparameter

 STRB R1, truncation

 GRABS "R0 - R9, PC"

swiinvalidparameter
 GRAB "R0-R9,R14"

 [ RISC_OS=2
 addr R0, InvalidParameter
 ORRS PC, R14, #Overflow_Flag
 |
            STASH      "r1-r4, r14"
            addr       r0, invalidparameter_tag
            ADR        r1, message_block
            MOV        r2, #0
            SWI        XMessageTrans_ErrorLookup
            GRAB       "r1-r4, r14"
            ORRS       pc, r14, #Overflow_Flag
 ]

;**************************************************************************

 LTORG

 END
