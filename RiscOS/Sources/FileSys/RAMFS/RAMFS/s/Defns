; >Defns


        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}

        GBLL    NewFs
NewFs   SETL    T

; if this is true then we use new filecore
	GBLL	BigDir
BigDir	SETL	T


        GBLL    FileCache
FileCache SETL T

bit0    bit 0
bit1    bit 1
bit2    bit 2
bit3    bit 3
bit4    bit 4
bit5    bit 5
bit6    bit 6
bit7    bit 7
bit8    bit 8
bit9    bit 9
bit10   bit 10
bit11   bit 11
bit12   bit 12
bit13   bit 13
bit14   bit 14
bit15   bit 15
bit16   bit 16
bit17   bit 17
bit18   bit 18
bit19   bit 19
bit20   bit 20
bit21   bit 21
bit22   bit 22
bit23   bit 23
bit24   bit 24
bit25   bit 25
bit26   bit 26
bit27   bit 27
bit28   bit 28
bit29   bit 29
bit30   bit 30
bit31   bit 31

K       * 1024
M       * K*K
CR      * 13
LF      * 10

;Cpu

PsrMask         * &FC000003
;FBitNo          * 26
;IBitNo          * 27
;VBitNo          * 28
;CBitNo          * 29
;ZBitNo          * 30
;NBitNo          * 31

;Register allocation

SB      RN 12

SzOldFs         * &200
SzNewFloppyFs   * &400
TrksPerSide     * 80

UnusedOp        * ReadTrkOp

AltDefectBit    bit 4   ;use alternative defect map, winnies only
ScatterBit      bit 5
NoEscape        bit 6
NoTimeOut       bit 7
Atomic          * NoEscape :OR: NoTimeOut
BackBitNo       * 8
BackgroundOp    bit BackBitNo
OpMask          * 2_1111 ;ops 0-15

DiscBits        * 2_111 :SHL: (32-3)    ;In all disc addresses

RamFSId        * 23      ;magic filing system number

 [ T
RamFSSwiBase    * Module_SWISystemBase + Module_SWIChunkSize * RamFSSWI

                ^ RamFSSwiBase :OR bit17
XRamFS_DiscOp   # 1
                # 1
XRamFS_Drives   # 1
XRamFS_FreeSpace # 1
 ]
        END
