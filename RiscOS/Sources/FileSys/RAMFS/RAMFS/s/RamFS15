; >RamFS15

 LTORG

; =============
; LowLevelEntry
; =============

;entry
; R1  reason
; R2  disc address top 3 bits drive
; R3  RAM ptr
; R4  length
; R5  -> disc rec
; R6  -> defect list
; R12 -> private word

LowLevelEntry ROUT
 getSB
 Push    "R0,R1,R5,R6,LR"     ;changing this affects mount Adfs20
 [ Debug3
 DREG  R1,",",cc
 DREG  R2,",",cc
 DREG  R3,",",cc
 DREG  R4,",",cc
 DREG  R5,",",cc
 DREG  R6," ",cc
 DLINE "*>LowLevel"
 ]


 ASSERT :INDEX: BufferStart = 0
 ASSERT :INDEX: BufferSize = 4
 LDMIA  SB, {R5,LR}

 ADDS   R6, R2, R4      ;end disc add
 SUBNE  R6, R6, #1
 CMPCCS R6, LR

 ANDCC  LR, R1, #OpMask ;Only Disc Op bits
 CMPCCS LR, #UnusedOp
 MOVCS  R0, #BadParmsErr
 BCS    %FT95

 TEQS   R4, #0
 BEQ    %FT90

 TSTS   R1, #ScatterBit
 ADDEQ  R0, SB, #:INDEX: ScatterPair
 STMEQIA R0, {R3,R4}
 MOVEQ  R3, R0

 ASSERT ReadSecsOp>VerifyOp
 ASSERT WriteSecsOp>ReadSecsOp
 CMPS   LR, #ReadSecsOp
 BEQ    Read
 BLO    Verify

;Write
 ADD    R1, R5, R2
10
 LDMIA  R3, {R0,R6}
 CMPS   R6, R4
 MOVLS  R2, R6
 MOVHI  R2, R4
 BL     BlockMove       ;(R0-R2)
 ADD    R0, R0, R2
 ADD    R1, R1, R2
 SUBS   R6, R6, R2
 STMIA  R3, {R0,R6}
 ADDEQ  R3, R3, #4*2
 SUBS   R4, R4, R2
 BNE    %BT10
 SUB    R2, R1, R5
 B      %FT40

Verify
 MOV    R5, R2
20
 LDMIA  R3, {R1,R6}
 CMPS   R6, R4
 MOVLS  R2, R6
 MOVHI  R2, R4
 ADD    R5, R5, R2
 ADD    R1, R1, R2
 SUBS   R6, R6, R2
 STMIA  R3, {R1,R6}
 ADDEQ  R3, R3, #4*2
 SUBS   R4, R4, R2
 BNE    %BT20
 MOV    R2, R5

Read
 ADD    R0, R5, R2
30
 LDMIA  R3, {R1,R6}
 CMPS   R6, R4
 MOVLS  R2, R6
 MOVHI  R2, R4
 BL     BlockMove       ;(R0-R2)
 ADD    R0, R0, R2
 ADD    R1, R1, R2
 SUBS   R6, R6, R2
 STMIA  R3, {R1,R6}
 ADDEQ  R3, R3, #4*2
 SUBS   R4, R4, R2
 BNE    %BT30
 SUB    R2, R0, R5
40
 LDR    R1, [SP, #4]
 TSTS   R1, #ScatterBit
 LDREQ  R3, ScatterPair
 MOV    R4, #0
90
 BL     ClearV
95
 STRVS  R0, [SP]
 [ Debug3
	BVC	%FT01
 DREG  R0," ",cc
01
	BVS	%FT01
 DLINE  "         ",cc
01
 DREG   R1," ",cc
 DREG   R2," ",cc
 DREG   R3," ",cc
 DREG   R4," ",cc
 DLINE  "*<LowLevel"
 ]
 Pull   "R0,R1,R5,R6,PC"




 MACRO
 Misc   $str
 ASSERT Misc_$str=(.-MiscTable) :SHR: 2
 B      Do$str
 MEND

; =========
; MiscEntry
; =========

MiscEntry ROUT
 [ Debug4
 DREG   R0,", ",cc
 DREG   R1,", ",cc
 DREG   R2,", ",cc
 DREG   R3,", ",cc
 DREG   R4,", ",cc
 DREG   R5," ",cc
 DLINE  "*>Misc"
 ]
 Push   "LR"
 getSB
 CMPS   R0, #Misc_Unused
 BLO    %FT10
 MOV    R0, #BadParmsErr
 BL     SetV
 B      %FT90
10
 MOV    LR, PC
 ADD    PC, PC, R0, LSL #2
 B      %FT90
MiscTable
 Misc   Mount
 Misc   PollChanged
 Misc   LockDrive
 Misc   UnlockDrive
 Misc   PollPeriod

90
 [ Debug4
 DREG	R0, ", ",cc
 DREG	R1, ", ",cc
 DREG	R2, ", ",cc
 DREG	R3, ", ",cc
 DREG	R4, ", ",cc
 DREG	R5, " ",cc
 DLINE	"<*Misc"
 ]
 Pull   "PC"


; =======
; DoMount
; =======

;entry
; R1 drive
; R2 disc address
; R3 -> buffer
; R4 length
; R5 -> disc rec to fill in for floppies

;exit R0,V internal error

DoMount ROUT
 Push   "R0-R2,LR"

  [ BigDir
 Push 	"R0, R1"
 SWI    XOS_ReadRAMFsLimits     ;(->R0,R1)
 SUB    R1, R1, R0              ;RAM disc size
 STR	R0, BufferStart
 STR	R1, BufferSize
 Pull	"R0, R1"
  ]


 LDR    R0, BufferStart
 MOV    R1, R3
 ADD    R0, R0, R2
 MOV    R2, R4
 BL     BlockMove

 [ BigDir
; when we have big discs, we have a problem - the disc size
; field hasn't been filled in.  we copy SkeletonDiscRec instead
 ADR	R0, SkeletonDiscRec
 MOV    R1, R5
 MOV    R2, #DiscRecSig2
 BL     BlockMove
 LDR	r0, BufferSize
 STR	r0, [r5, #DiscSize]
 |
 LDR    R0, BufferStart
 ADD    R0, R0, #ZoneHead
 MOV    R1, R5
 MOV    R2, #DiscRecSig
 BL     BlockMove
 ]

 CLRV
 Pull   "R0-R2,PC"


DoPollChanged
 MOV    R3, #Drv_NotChanged :OR: Drv_EmptyWorks :OR: Drv_ChangedWorks
DoLockDrive
DoUnlockDrive
 MOV    PC, LR

DoPollPeriod
 MOV    R5, #0
 MOV    PC, LR

        END
