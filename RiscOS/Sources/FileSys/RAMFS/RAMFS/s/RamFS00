; >RamFS00

        TTL     "Declarations and workspace allocation"

; Disc Record

        ^ 0
; 
SectorSize      # 1     ;log2 sector size
SecsPerTrk      # 1
Heads           # 1     ;1 for old adfs floppy format
Density         # 1     ;1/2/4 single double quad

;only those above needed for low level drivers

LinkBits        # 1
BitSize         # 1     ;log2 bytes for each bit in map, 0 for old format
RAskew          # 1     ;track to track sector skew for random access
                        ;file allocation
BootOpt         # 1     ;boot option for this disc

                # 1
Zones           # 1     ;# zones in map
ZoneSpare       # 2     ;# bits in zones after 0 which are not map bits
        ASSERT  (ZoneSpare :MOD: 4)=2
RootDir         aw 4
DiscSize        aw 4

DiscStruc       # 0     ;above entries (except BootOpt) define disc structure

DiscId          aw 2
DiscName        # 10
DiscRecSig      # 0     ;above entries form signature of disc

DiscFlags       # 1
FloppyFlag      bit 0
NeedNewIdFlag   bit 1
AltMapFlag      bit 5


;entries below must be valid even when disc rec is not in use
Priority        # 1     ;0 DISC REC UNUSED 
                        ;1 to # floppies -> floppy priority level
                        ;&FF good winnie
DiscsDrv        # 1     ;0-7 => drive in, 8 => not in drive, OR DISC REC UNUSED
DiscUsage       # 1     ;tasks using this disc, if >0 disc cant be forgotten
SzDiscRec       # 0

;default last word of disc record
;DiscFlags      0  FLOPPIES NEED NeedNewIdFlag SET INITIALLY
;Priority       0
;DiscsDrv       8
;DiscUsage      0
DefDiscRecEnd   * &00080000



       [ NewFs
; New map

                ^ 0
ZoneCheck       # 1
FreeLink        # 2     ;15 bit free space start link
CrossCheck      # 1     ;EORing this byte for all zones should yield &FF

DummyLenBit     bit 31  ;always set

ZoneDiscRecSz   * 60    ;reserve additional bytes
                ASSERT ZoneDiscRecSz>=SzDiscRec

ZoneHead        # ZoneDiscRecSz

Zone0Bits       * ZoneDiscRecSz*8

;zones are followed in RAM by table of one byte of flags per zone

ZoneValid       bit 0
ZoneCompacted   bit 1

        ]

; Dir entry
                ^ 0
NameLen         * 10
DirObName       # NameLen
DirLoad         # 4
DirExec         # 4
DirLen          # 4
DirIndDiscAdd   # 3
OldDirObSeq     # 1

OldDirEntrySz   * {VAR}
        ASSERT  OldDirEntrySz=26

NewDirAtts      * OldDirObSeq
ReadBit         * 1
WriteBit        * 2
IntLockedBit    * 4     ;the locked bit is held in bit 2 internally
ExtLockedBit    * 8     ;but is returned in bit 3 externally
DirBit          * 8
NewDirEntrySz   * {VAR}


; Directory Start
                ^ 0
StartMasSeq     # 1
StartHugo       # 4
DirFirstEntry   # 0

; Old Directory End
                ^ 0
                # -1
DirCheckByte    # 0     ;RETRO DEFINITION was reserved

                # -4
EndHugo         # 0

                # -1
EndMasSeq       # 0

                # -14   ;reserved

DirTitleSz      * 19
                # -DirTitleSz
OldDirTitle     # 0

                # -3
OldDirParent    # 0

                # -NameLen
OldDirName      # 0

                # -1
OldDirLastMark  # 0     ;dummy last entry marker

; New Directory End
                ^ 0
                # -1
        ASSERT  DirCheckByte=@

                # -4
        ASSERT  EndHugo=@

                # -1
        ASSERT  EndMasSeq=@

                # -NameLen
NewDirName      # 0

                # -DirTitleSz
NewDirTitle     # 0

                # -3
NewDirParent    # 0

                # -1    ;reserved
                # -1    ;reserved

                # -1
NewDirLastMark  # 0     ;dummy last entry marker

OldDirSize      * &500
NewDirSize      * &800

OldDirTabSz     * (OldDirSize-DirFirstEntry+OldDirLastMark)
NewDirTabSz     * (NewDirSize-DirFirstEntry+NewDirLastMark)
                ASSERT  OldDirTabSz :MOD: OldDirEntrySz = 0
                ASSERT  NewDirTabSz :MOD: NewDirEntrySz = 0
OldDirEntries   * OldDirTabSz / OldDirEntrySz
NewDirEntries   * NewDirTabSz / NewDirEntrySz

        ASSERT  OldDirEntries=47
        ASSERT  NewDirEntries=77

;Filing system control reason codes

FscAddFs        * 12
FscSelectFs     * 14
FscRemoveFs     * 16
FscAdd2ndFs     * 17
FscReadFileType * 18


;MAIN WORKSPACE ALLOCATION

        ^ 0, SB

BufferStart     a4 4    ;THESE TWO MUST BE FIRST
BufferSize      a4 4

ScatterPair     a4 8
FileCorePrivate a4 4
message_file_block  a4    16      ; File handle for MessageTrans
message_file_open   a4    4       ; Opened message file flag

WorkSize        a4 0

        END
