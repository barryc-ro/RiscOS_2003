; >RamFS50

 TTL    "Initialisation and FS star commands"

SkeletonDiscRec ;those marked * need filling in
        =  10   ;  sector size 2^10     R2
        =  1    ;  sectors per track
        =  1    ;  heads
        =  0    ;  density

;        * link bits            R3
;        * bit size
;  0       RA skew
;  0       boot opt

; = 0                            R4
; = 1      zones
; = 0,0  * zone spare

        &  &203 ;  root dir             R5
; & 0      disc size            R6

        =  0,0  ;* id                   R7-R9
        =  "RamDisc0",0,0
        ASSERT  .-SkeletonDiscRec = DiscRecSig - 3*4

RamFSString     = "RAM",0
 ALIGN

FSCreateBlock
        =       NoBigBuf,0,0
        =       RamFSId
        &       RamFSString     - org
        &       RamFSBootText   - org
        &       LowLevelEntry   - org
        &       MiscEntry       - org

EmptyDefectList
        &       bit29

; >>>>>>>>>
; InitEntry
; >>>>>>>>>

InitEntry ROUT
        Push    "R0-R11,SB,LR"

        baddr   LR, SkeletonDiscRec
        LDMIA   LR, {R2,R5,R7-R9}

        SWI     XOS_ReadRAMFsLimits     ;(->R0,R1)
        SUB     R6, R1, R0              ;RAM disc size
        Push    "R0,R2-R9"

        MOV     R9, #0                  ;error flag
        MOV     R10,#1                  ;init flag
        MOV     R11,R12

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #:INDEX: WorkSize
        SWI     XOS_Module              ;claim workspace
        Pull    "R4"                    ;-> RAM disc start
        BVS     %FT95
        MOV     SB, R2

; OSS Flag that the message file is closed.

        MOV     r0, #0
        STR     r0, message_file_open

        CMPS    R6, #8*K                ;Only initialise if at least 8K of RAM disc
        BCC     %FT60                   ; OSS Moved error handle code out of line - flags problem

        MOV     R0, #7
05
        MOV     R1, R6, LSR R0
        RSBS    R1, R1, #(SzNewFloppyFs - ZoneHead - ZoneDiscRecSz)*8
        CMPHIS  R1, #16
        ADDLO   R0, R0, #1
        BLO     %BT05
        ADD     R1, R1, #ZoneHead*8
        MOV     R1, R1, LSL #16
        ORR     R1, R1, #1 :SHL: 8      ;or in zones
        STR     R1, [SP, #ZoneSpare-2]
        CMPS    R0, #8
        MOV     R0, R0, LSL #8
        ORRLS   R0, R0, #15
        ORRHI   R0, R0, #13
        STR     R0, [SP, #LinkBits]     ;also BitSize, RA skew, BootOpt

        ASSERT  :INDEX: BufferStart=0
        ASSERT  :INDEX: BufferSize=4
        STMIA   SB, {R4,R6}
        MOV     R0, R4
        MOV     R1, SP
        MOV     R2, #0
        baddr   R3, EmptyDefectList
        SWI     XFileCore_FloppyStructure     ;(R0-R3->R0,V)

        baddr   R0, FSCreateBlock,VC
        baddr   R1, org,VC
        MOVVC   R2, R11
        MOVVC   R3, #1                  ;1 floppy, 0 winnies, default drive 0, dir
        MOVVC   R4, #0                  ;dir cache size
        MOVVC   R5, #0                  ;File cache buffers
        MOVVC   R6, #0                  ;winnie sizes
        SWIVC   XFileCore_Create      ;(R0-R6->R0-R2,V)
        BVS     %FT85
        STR     R0, FileCorePrivate

        STR     SB, [R11]

        ADD     SP, SP, #DiscRecSig
        Pull    "R0-R11,SB,PC",,^


; OSS Error handling code for "Ram Disc too small"

60
        baddr   R0, SizeErrErrBlk
        MOV     r1, #0                  ; No %0
        BL      copy_error_one          ; Always sets the V bit
        B       %FT85

 LTORG

FullTitle
        Text    "FileCore%RAM"

RAMdiscName
        DCB     "RAM::RamDisc0",0
        ALIGN

; >>>>>>>>
; DieEntry
; >>>>>>>>

DieEntry 
        Push    "R0-R11,SB,LR"
        SUB     SP, SP, #DiscRecSig
        getSB

; Dismount the disk so filer windows close

        MOV     R1, #Service_DiscDismounted
        ADR     R2, RAMdiscName                 ; Disc to dismount
        SWI     XOS_ServiceCall                 ; Dismount RAM

        MOV     R10,#0
        MOV     R0, #ModHandReason_Delete
        baddr   R1, FullTitle
        SWI     XOS_Module
85

; OSS Close the Messages file if it is open, and then flag it as closed.
; OK so even if it is closed I flag it as closed, but this is hardly speed
; critical code.

        MOVVS   r9, r0                          ; Hang onto any earlier error
        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
        MOV     r0, #0
        STR     r0, message_file_open

        MOV     R0, #ModHandReason_Free
        MOV     R2, SB
        SWI     XOS_Module          ;Free workspace
 [ Dev
        wrhex   R0, VS
        mess    VS,"Heap error",NL
 ]
95
        MOVVS   R9, R0
 [ Dev
        wrhex   R10,VS
        wrhex   R0, VS
        mess    VS,"Error",NL
 ]

        ADD     SP, SP, #DiscRecSig
        MOVS    R0, R9
        MOVNES  R10,R10         ;only error on init
        Pull    "R0-R11,SB,PC",EQ,^

        BL      SetV
        ADD     SP, SP, #4
        Pull    "R1-R11,SB,PC"

 [ F

; >>>>>>>>>>>>
; ServiceEntry
; >>>>>>>>>>>>

ServiceEntry ROUT
        Push    "R0-R3,R5,SB,LR"
 getSB

        TEQS    R1, #Service_Reset
        BNE     %FT90

90
        Pull    "R0-R3,R5,SB,PC",,^
 ]

DoSwiRetryDiscOp ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_DiscOp
        Pull    "R8,PC"

DoSwiDrives ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_Drives
        Pull    "R8,PC"

DoSwiFreeSpace ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_FreeSpace
        Pull    "R8,PC"

DoSwiDescribeDisc ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_DescribeDisc
        Pull    "R8,PC"

; >>>>>>>>
; SwiEntry
; >>>>>>>>

SwiEntry ROUT
        Push    "SB,LR"
        CLRPSR  I_bit, LR        ;re-enable interrupts
        getSB
        CMPS    R11,#FirstUnusedSwi
        BHS     BadSwi
        MOV     LR, PC
        ADD     PC, PC, R11,LSL #2
        B       %FT10
05
        B       DoSwiRetryDiscOp
        B       BadSwi
        B       DoSwiDrives
        B       DoSwiFreeSpace

        B       BadSwi
        B       DoSwiDescribeDisc

FirstUnusedSwi  * (.-%BT05)/4
10
        Pull    "SB,PC"
BadSwi
        ;  Bad SWI
        Push    r1
        ADR     r0, ErrorBlock_ModuleBadSWI
        baddr   r1, RamFSTitle
        BL      copy_error_one
        Pull    r1
        B       %BT10

        MakeInternatErrorBlock  ModuleBadSWI,,BadSWI

SwiNames ROUT
        =  "RamFS",0
        =  "DiscOp",0
        =  "NOP",0
        =  "Drives",0
        =  "FreeSpace",0
        =  "NOP",0
        =  "DescribeDisc",0
        =  0
        ALIGN

FsCom   bit     (31-24)

 MACRO
        ComEntry  $Com,$MinArgs,$MaxArgs,$GsTransBits,$HiBits
        ASSERT  $MinArgs<=$MaxArgs
Com$Com DCB     "$Com",0
 ALIGN
        DCD     Do$Com          - org
        =       $MinArgs
        =       $GsTransBits
        =       $MaxArgs
        =       $HiBits
        DCD     Syn$Com         - org
        DCD     Help$Com        - org
 MEND

ComTab                                          ;general star commands
        ComEntry  Ram,           0,0,0,International_Help:SHR:24

        =       0
 ALIGN

; >>>>>
; DoRam
; >>>>>

DoRam
        Push    "LR"
        MOV     R0, #FscSelectFs
        baddr   R1, RamFSString
        SWI     XOS_FSControl
        Pull    "PC"

        END
