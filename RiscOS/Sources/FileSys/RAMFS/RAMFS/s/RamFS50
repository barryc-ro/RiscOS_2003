; >RamFS50

 TTL    "Initialisation and FS star commands"

 [ BigDir

; the disc record here will be much more complete
SkeletonDiscRec		;fields marked * need filling in
	=  	10	; sector size 2^10
	=  	1	; sectors per track (this is a RAM disc, after all)
	=  	1	; heads
	=  	0	; density
	=  	0	; * LinkBits
	=  	0	; * BitSize
	=  	0	; skew
	=  	0	; lowsector
	=  	0	; * nzones
	=  	0,0	; * ZoneSpare
	DCD 	0	; * RootDir
	DCD 	0	; * DiscSize
	DCD 	0,0,0	; disc cycle id + disc name
	DCD 	0	; DiscType
	DCD 	0	; DiscSize2
	DCD 	0	; ShareSize,BigFlag,Zones2,Reserved
	DCD 	1   	; DiscVersion
	DCD 	2048 	; RootSize

	ASSERT	.-SkeletonDiscRec = DiscRecSig2
 |

SkeletonDiscRec ;those marked * need filling in
        =  10   ;  sector size 2^10     R2
        =  1    ;  sectors per track
        =  1    ;  heads
        =  0    ;  density

;        * link bits            R3
;        * bit size
;  0       RA skew
;  0       boot opt

; = 0                            R4
; = 1      zones
; = 0,0  * zone spare

        &  &203 ;  root dir             R5
; & 0      disc size            R6

        =  0,0  ;* id                   R7-R9
        =  "RamDisc0",0,0
        ASSERT  .-SkeletonDiscRec = DiscRecSig - 3*4
 ]

FullTitle
        Text    "FileCore%RAM"

RAMdiscName
        DCB     "RAM::RamDisc0",0

RamFSString     = "RAM",0
 ALIGN

FSCreateBlock
        =       NoBigBuf,0,0
        =       RamFSId
        &       RamFSString     - org
        &       RamFSBootText   - org
        &       LowLevelEntry   - org
        &       MiscEntry       - org

EmptyDefectList
        &       bit29


 [ BigDir
InitRAMDisc ROUT
	Push	"R0-R11,LR"
	ADRL	r0, RAMDisc_DismountStr
	SWI	XOS_CLI

        SWI     XOS_ReadRAMFsLimits     ;(->R0,R1)

	SUBS	r6, r1, r0
	BEQ	%FT85

	MOV	r1, #4096
	MOV	r2, #0
10
	STR	r2, [r0], #4
	SUBS	r1, r1, #4
	BNE	%BT10

	SUB	sp, sp, #DiscRecSig2

	ADRL	R0, SkeletonDiscRec	; source

	MOV	R1, SP			; dest
	MOV	R2, #DiscRecSig2	; length

20
	LDR	R3, [R0], #4
	STR	R3, [R1], #4
	SUBS	R2, R2, #4
	BNE	%BT20

	STR	R6, [SP, #DiscSize]	;store away the size

	MOV	r5, SP
	BL	InitDiscRec		; fill in the disc record fields which need calculation

	MOV	r1, #WriteTrkOp
	ORR	r1, r1, r5, LSL #6
	MOV	r2, #0
	MOV	r3, #0
	MOV	r4, #1024
	LDR	r8, FileCorePrivate
	SWI	XFileCore_DiscOp

	BVS	%FT75

	MOV	r0, #&CF
	ADRL	r1, RAMDisc_RAMdisc0Name	; name ptr
	SWI	XOS_Find		; find it

	BVS	%FT75			; failed to do so

	MOV	R3, R0

	MOV	r0, sp
	ADRL	r1, RAMDisc_EmptyBBList		; no bad block list
	ADRL	r2, RAMDisc_JustDiscName	; disc name

	SWI	XFileCore_LayoutStructure

	MOV	r0, #0
	MOV	r1, r3
	SWI	XOS_Find

	ADRL	r0, RAMDisc_DismountStr
	SWI	XOS_CLI

	ADRL	r0, RAMDisc_MountStr
	SWI	XOS_CLI

75
	ADD	sp, sp, #DiscRecSig2

85
	STRVS	r0, [sp]
	Pull	"R0-R11,PC"


RAMDisc_EmptyBBList
	DCD	-1
RAMDisc_JustDiscName
	DCB	"RamDisc0",0
	ALIGN
RAMDisc_RAMdisc0Name
        DCB     "RAM::0",0
        ALIGN
RAMDisc_DismountStr
	DCB	"RAM:Dismount :0",0
RAMDisc_MountStr
	DCB	"RAM:mount :0",0
	ALIGN

; >>>>>>>>>>>
; InitDiscRec
; >>>>>>>>>>>

; this routine generates the values in the disc record to suit the
; chosen size of the RAM disc.  We need to work out the values, and
; place them in a disc record

; in:
;
;    r5 -> disc record

; out:
;
;   disc record fields filled in: zones, zonespare, LinkBits and bitsize

; here's some definitions used by this routine:

Min_LinkBits	*	13	; minimum allowed LinkBits (with 1024 byte zones)
Max_LinkBits	*	19	; maximum allowed LinkBits (unlikely!)
Min_BitSize	*	7	; minimum allowed bitsize
Max_BitSize	*	12	; max allowed bitsize
Min_ZoneSpare	*	32	; min allowed zonespare
Max_ZoneSpare	*	64	; max allowed zonespare
Min_Zones	*	1	; min allowed zones
Max_Zones	*	16	; max allowed zones

; internal register allocation:

; r5 -> disc record

; r0 = current bitsize
; r1 = current zonespare
; r2 = current zones
; r3 = current LinkBits
; r4 = map allocation bits required to cover disc
; r6 = number of bits in a zone
; r7 = number of allocation bits in the map
; r8 = ids per zone


InitDiscRec	ROUT
	Push	"R0-R11,LR"

	MOV	r0, #Min_BitSize	; init BitSize

10	; loop on BitSize
	LDR	r4, [r5, #DiscSize]
	MOV	r4, r4, LSR r0		; map bits for disc

	MOV	r1, #Min_ZoneSpare	; init ZoneSpare
20	; loop on zonespare

	LDR	lr, [r5, #SectorSize]
	MOV	r6, #8
	MOV	r6, r6, LSL lr		; bits in a zone
	SUB	r6, r6, r1		; minus sparebits

	; choose number of zones to suit

	MOV	r2, #Min_Zones		; minimum of one zone
	SUB	r7, r6, #Zone0Bits	; bits in zone 0

30	; loop for zones
	CMP	r7, r4			; do we have enough allocation bits yet?
	BHS	%FT35			; if we do, then accept this number of zones

	ADD	r7, r7, r6		; more map bits
	ADD	r2, r2, #1		; and another zone
	CMPS	r2, #Max_Zones
	BLS	%BT30			; still ok

	; here when too many zones; try a higher BitSize

	B	%FT80

35
	; now we have to choose LinkBits.  we want LinkBits to be
	; the smallest it can be for the disc.

	MOV	r3, #Min_LinkBits		; minimum value of LinkBits

40	; loop for LinkBits

	Push	"R0, R1, R2"
	MOV	r0, r6			; allocation bits in a zone
	ADD	r1, r3, #1		; LinkBits+1
	DivRem	r8, r0, r1, r2
	Pull	"R0, R1, R2"

	; check that LinkBits is enough for total possible ids
	MOV	r9, #1			; work out 1<<LinkBits
	MOV	r9, r9, LSL r3		;

	MUL	lr, r8, r2		; total ids needed
	CMPS	lr, r9			; LinkBits too small?
	BHI	%FT60			; yes!

	; we're nearly there.  now work out if the last zone
	; can be handled correctly.

	SUBS	lr, r7, r4
	BEQ	%FT50

	CMPS	lr, r3			; must be at least LinkBits+1 bits
	BLE	%FT60

	; check also that we're not too close to the start of the zone

	SUB	lr, r7, r6		; get the start of the zone

	SUB	lr, r4, lr		;
	CMPS	lr, r3
	BLE	%FT60


50	; we've found a result - fill in the disc record!

	; first, store the things we know about

	STRB	r3,[r5, #LinkBits]
	MOV	r1, r1, LSL #16
	ORR	r1, r1, r2, LSL #8

	STR	r1, [r5, #ZoneSpare-2]

	STRB	r0, [r5, #BitSize]

	LDR	lr, [r5, #DiscVersion]

	MOVS	lr, lr

	BEQ	%FT01			; do we have long filenames?

	; here when long filenames

	; the root dir's ID is the first available ID in the middle
	; zone of the map


	MOVS	r2, r2, LSR #1		; zones/2

	MULNE	lr, r2, r8		; *idsperzone
	MOVEQ	lr, #3			; if if zones/2=0, then only one zone, so the id is 3 (0,1,2 reserved)

	MOV	lr, lr, LSL #8		; construct full indirect disc address
	ORR	lr, lr, #1		; with sharing offset of 1

	B	%FT02

01
	; here when not long filenames

	; root dir is &2nn where nn is ((zones<<1)+1)

	MOV	lr, r2, LSL #1
	ADD	lr, lr, #1
	ADD	lr, lr, #&200

02

	STR	lr, [r5, #RootDir]	; root dir disc addr


	B	%FT90

; other fields in the disc record are fixed-value

60	; NEXT LinkBits
	ADD	r3, r3, #1
	CMPS	r3, #Max_LinkBits
	BLS	%BT40

70	; NEXT zonespare
	ADD	r1, r1, #1
	CMPS	r1, #Max_ZoneSpare
	BLS	%BT20


80	; NEXT BitSize
	ADD	r0, r0, #1
	CMPS	r0, #Max_BitSize	; is it too much?
	BLS	%BT10			; back around

90
	Pull	"R0-R11,PC"

 ]

; >>>>>>>>>
; InitEntry
; >>>>>>>>>


InitEntry ROUT
        Push    "R0-R11,SB,LR"

 [ Debug3
	DLINE	"RAMFS Init"
 ]


        SWI     XOS_ReadRAMFsLimits     ;(->R0,R1)
        SUB     R6, R1, R0              ;RAM disc size

 [ BigDir
	Push	"R0"
 |
        ADRL    LR, SkeletonDiscRec
        LDMIA   LR, {R2,R5,R7-R9}
        Push    "R0,R2-R9"
 ]

        MOV     R9, #0                  ;error flag
        MOV     R10,#1                  ;init flag
        MOV     R11,R12

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #:INDEX: WorkSize
        SWI     XOS_Module              ;claim workspace
        Pull    "R4"                    ;-> RAM disc start
        BVS     %FT95
        MOV     SB, R2

; OSS Flag that the message file is closed.

        MOV     r0, #0
        STR     r0, message_file_open

        CMPS    R6, #8*K                ;Only initialise if at least 8K of RAM disc
        BCC     %FT60                   ; OSS Moved error handle code out of line - flags problem

 [ BigDir
        ASSERT  :INDEX: BufferStart=0
        ASSERT  :INDEX: BufferSize=4
        STMIA   SB, {R4,R6}

	STR	R11, MyPrivate

        STR     SB, [R11]

        baddr   R0, FSCreateBlock
        baddr   R1, org
        LDR	r2, MyPrivate
        MOV	R3, #1                  ;1 floppy, 0 winnies, default drive 0, dir
        MOV	R4, #65536              ;dir cache size
        MOV	R5, #0                  ;File cache buffers
        MOV	R6, #0                  ;winnie sizes
        SWI	XFileCore_Create      ;(R0-R6->R0-R2,V)
        BVS     %FT85			; filecore_create failed

        STR     R0, FileCorePrivate

	BL	InitRAMDisc		; just in case the Kernel hasn't done it

 |
        MOV     R0, #7
05
        MOV     R1, R6, LSR R0
        RSBS    R1, R1, #(SzNewFloppyFs - ZoneHead - ZoneDiscRecSz)*8
        CMPHIS  R1, #16
        ADDLO   R0, R0, #1
        BLO     %BT05
        ADD     R1, R1, #ZoneHead*8
        MOV     R1, R1, LSL #16
        ORR     R1, R1, #1 :SHL: 8      ;or in zones
        STR     R1, [SP, #ZoneSpare-2]
        CMPS    R0, #8
        MOV     R0, R0, LSL #8
        ORRLS   R0, R0, #15
        ORRHI   R0, R0, #13
        STR     R0, [SP, #LinkBits]     ;also BitSize, RA skew, BootOpt

        ASSERT  :INDEX: BufferStart=0
        ASSERT  :INDEX: BufferSize=4
        STMIA   SB, {R4,R6}
        MOV     R0, R4
        MOV     R1, SP
        MOV     R2, #0
        baddr   R3, EmptyDefectList
        SWI     XFileCore_FloppyStructure     ;(R0-R3->R0,V)

        baddr   R0, FSCreateBlock,VC
        baddr   R1, org,VC
        MOVVC   R2, R11
        MOVVC   R3, #1                  ;1 floppy, 0 winnies, default drive 0, dir
        MOVVC   R4, #0                  ;dir cache size
        MOVVC   R5, #0                  ;File cache buffers
        MOVVC   R6, #0                  ;winnie sizes
        SWIVC   XFileCore_Create      ;(R0-R6->R0-R2,V)
        BVS     %FT85
        STR     R0, FileCorePrivate

        STR     SB, [R11]
        ADD     SP, SP, #DiscRecSig

 ]

        CLRV
        Pull    "R0-R11,SB,PC"

; OSS Error handling code for "Ram Disc too small"

60
        baddr   R0, SizeErrErrBlk
        MOV     r1, #0                  ; No %0
        BL      copy_error_one          ; Always sets the V bit
        B       %FT85

 LTORG

; >>>>>>>>
; DieEntry
; >>>>>>>>


DieEntry
        Push    "R0-R11,SB,LR"

 [ Debug3
	DLINE	"RAMFS Die"
 ]
 [ BigDir
 |
        SUB     SP, SP, #DiscRecSig
 ]
        getSB

; Dismount the disk so filer windows close

        MOV     R1, #Service_DiscDismounted
        ADRL    R2, RAMdiscName                 ; Disc to dismount
        SWI     XOS_ServiceCall                 ; Dismount RAM

        MOV     R10,#0
 [ BigDir
75
  	MOVVS	R9, R0				; hang on to any earlier error
 ]

 [ Debug3
	DLINE	"Killing parent"
 ]

        MOV     R0, #ModHandReason_Delete
        baddr   R1, FullTitle
        SWI     XOS_Module
 [ Debug3
	DLINE	"killed parent"
	DebugError	"Kill filecore: "
 ]

85

; OSS Close the Messages file if it is open, and then flag it as closed.
; OK so even if it is closed I flag it as closed, but this is hardly speed
; critical code.

        MOVVS   r9, r0                          ; Hang onto any earlier error
        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
        MOV     r0, #0
        STR     r0, message_file_open

        MOV     R0, #ModHandReason_Free
        MOV     R2, SB
        SWI     XOS_Module          ;Free workspace
 [ Dev
        wrhex   R0, VS
        mess    VS,"Heap error",NL
 ]
95
        MOVVS   R9, R0
 [ Dev
        wrhex   R10,VS
        wrhex   R0, VS
        mess    VS,"Error",NL
 ]

 [ BigDir
 |
        ADD     SP, SP, #DiscRecSig
 ]
        ADDS    R0, R9, #0      ;clear V
        MOVNES  R10,R10         ;only error on init
        Pull    "R0-R11,SB,PC",EQ

        BL      SetV
        ADD     SP, SP, #4
        Pull    "R1-R11,SB,PC"


 [ F

; >>>>>>>>>>>>
; ServiceEntry
; >>>>>>>>>>>>

ServiceEntry ROUT
        Push    "R0-R3,R5,SB,LR"
 getSB

        TEQS    R1, #Service_Reset
        BNE     %FT90

90
        Pull    "R0-R3,R5,SB,PC"
 ]

DoSwiRetryDiscOp ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_DiscOp
        Pull    "R8,PC"

DoSwiDrives ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_Drives
        Pull    "R8,PC"

DoSwiFreeSpace ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_FreeSpace
        Pull    "R8,PC"

DoSwiDescribeDisc ROUT
        Push    "R8,LR"
        LDR     R8, FileCorePrivate
        SWI     XFileCore_DescribeDisc
        Pull    "R8,PC"

; >>>>>>>>
; SwiEntry
; >>>>>>>>

SwiEntry ROUT
        Push    "SB,LR"
        CLRPSR  I_bit, LR        ;re-enable interrupts
        getSB
        CMPS    R11,#FirstUnusedSwi
        BHS     BadSwi
        MOV     LR, PC
        ADD     PC, PC, R11,LSL #2
        B       %FT10
05
        B       DoSwiRetryDiscOp
        B       BadSwi
        B       DoSwiDrives
        B       DoSwiFreeSpace

        B       BadSwi
        B       DoSwiDescribeDisc

FirstUnusedSwi  * (.-%BT05)/4
10
        Pull    "SB,PC"
BadSwi
        ;  Bad SWI
        Push    r1
        ADRL    r0, ErrorBlock_ModuleBadSWI
        baddr   r1, RamFSTitle
        BL      copy_error_one
        Pull    r1
        B       %BT10

        MakeInternatErrorBlock  ModuleBadSWI,,BadSWI

SwiNames ROUT
        =  "RamFS",0
        =  "DiscOp",0
        =  "NOP",0
        =  "Drives",0
        =  "FreeSpace",0
        =  "NOP",0
        =  "DescribeDisc",0
        =  0
        ALIGN

FsCom   bit     (31-24)

 MACRO
        ComEntry  $Com,$MinArgs,$MaxArgs,$GsTransBits,$HiBits
        ASSERT  $MinArgs<=$MaxArgs
Com$Com DCB     "$Com",0
 ALIGN
        DCD     Do$Com          - org
        =       $MinArgs
        =       $GsTransBits
        =       $MaxArgs
        =       $HiBits
        DCD     Syn$Com         - org
        DCD     Help$Com        - org
 MEND

ComTab                                          ;general star commands
        ComEntry  Ram,           0,0,0,International_Help:SHR:24

        =       0
 ALIGN

; >>>>>
; DoRam
; >>>>>

DoRam
        Push    "LR"
        MOV     R0, #FscSelectFs
        baddr   R1, RamFSString
        SWI     XOS_FSControl
        Pull    "PC"


        END
