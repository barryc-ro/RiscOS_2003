; >MyMacros

        MACRO
        Border  $r,$g,$b,$cond
        Push    "R0,R1",$cond
        LDR$cond R0, =VIDC
        MOV$cond R1, #bit30
        ORR$cond R1, R1, #$g * 16 + $r
        ORR$cond R1, R1, #$b * 256
        STR$cond R1, [R0]
        Pull    "R0,R1",$cond
        MEND


        MACRO
        nop
        MOV     R0,R0
        MEND


;do an operation with 16 bit width const as an 8 bit width if possible
        MACRO
$lab    Try8    $op,$dreg,$sreg,$const
        LCLA    bit
        LCLA    bits8
        WHILE   ($const:MOD:(1:SHL:(bit+2))=0) :LAND: bit<24
bit     SETA    bit+2
        WEND
        ASSERT  $const :SHR: bit < &10000
bits8   SETA    $const :AND: ( &FF :SHL: bit )
$lab    $op     $dreg,$sreg,#bits8
        [ $const<>bits8
bits8   SETA    $const :AND: ( &FF :SHL: ( bit+8 ) )
        $op     $dreg,$dreg,#bits8
        ]
        MEND


;put address of $dest in $reg
        MACRO
$lab    myaddr  $reg,$dest,$cond
        ASSERT  $reg<>PC
        ASSERT  ($dest-{PC}-8)<&10000
$lab    ADD$cond $reg,PC,#($dest-{PC}-8) :AND: &FF
        ADD$cond $reg,$reg,#($dest-{PC}-4) :AND: &FF00
        MEND


        GBLA    boff
        MACRO
$lab    baddr   $reg,$dest,$cond
        ASSERT  $reg<>PC
boff    SETA    {PC}+8-($dest)
        ASSERT  boff<&10000
$lab    Try8    SUB$cond,$reg,PC,(boff)
        MEND


;put absolute address of $sboff in $reg
        MACRO
$lab    sbaddr  $reg,$sboff,$cond
$lab    Try8    ADD$cond,$reg,SB,(:INDEX:$sboff)
        MEND


        MACRO
$l      Text    $str
$l      =       "$str",0
        ALIGN
        MEND


        MACRO
$lab    aw      $size           ;allocate word aligned
        ASSERT  {VAR} :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    a4      $size           ;allocate word aligned register relative
        ASSERT  (:INDEX: {VAR}) :MOD: 4=0
$lab    #       $size
        MEND


        MACRO
$lab    bit     $bitnum
$lab    *       1 :SHL: $bitnum
        MEND


        MACRO
        getSB
        LDR     SB, [SB]
        MEND


        MACRO
        Align16 $base
        ASSERT  (.-$base) :MOD: 4 = 0
        WHILE   (.-$base) :MOD: 16 <> 0
        MOV     R0, R0
        WEND
        MEND


;FOLLOWING MACROS ONLY FOR DEBUG


        MACRO
        mess    $cond,$s1,$s2,$s3,$s4,$s5
 [ {FALSE}
        B$cond  %F11
        BAL     %F21
11
        Push    "R0,R1,LR"
        BL      Mess1

        [ :LNOT: IrqDebug
        BNE     %FT15           ;skip if IRQ thread
        ]

        SWI     OS_WriteS
 [ "$s1"="NL"
 = CR,LF
 |
 = "$s1"
 ]
 [ "$s2"=""
 |
  [ "$s2"="NL"
  = CR,LF
  |
  = "$s2"
  ]
  [ "$s3"=""
  |
   [ "$s3"="NL"
   = CR,LF
   |
   = "$s3"
   ]
   [ "$s4"=""
   |
    [ "$s4"="NL"
    = CR,LF
    |
    = "$s4"
    ]
    [ "$s5"=""
    |
     [ "$s5"="NL"
     = CR,LF
     |
     = "$s5"
     ]
    ]
   ]
  ]
 ]
        =       0
        ALIGN
        [ SpoolOff
        BL      SpoolOn
        ]
        Pull    "LR"
15
        RestPSR R0              ;restore PSR
        nop                     ;delay in case mode change
        Pull    "R0,R1,LR"
21
 ]
        MEND

        MACRO
        wrhex   $reg,$cond
        Push    "R0-R3,LR",$cond
        MOV$cond R2,$reg
        BL$cond PHEX
        Pull    "R0-R3,LR",$cond
        MEND


        MACRO
$l      SetBorder  $reg1,$reg2,$red,$green,$blue,$cond
$l      LDR$cond   $reg1,=VIDC
        LDR$cond   $reg2,=&40000000+ $red + $green *16 + $blue *256
        STR$cond   $reg2,[$reg1]
        MEND


        MACRO
        regdump
        mess    ,"R0       R1       R2       R3       R4       R5       R6       R7",NL
        wrhex   R0
        wrhex   R1
        wrhex   R2
        wrhex   R3
        wrhex   R4
        wrhex   R5
        wrhex   R6
        wrhex   R7
        mess    ,NL,"R8       R9       R10      R11      R12      R13      R14      R15",NL
        wrhex   R8
        wrhex   R9
        wrhex   R10
        wrhex   R11
        wrhex   R12
        wrhex   R13
        wrhex   R14
        wrhex   R15
        mess    ,NL
        MEND

        END
