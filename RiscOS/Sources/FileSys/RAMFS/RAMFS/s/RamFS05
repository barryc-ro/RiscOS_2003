;> RamFS05

 [ Dev
PHEX
 MOV    R3, LR
 BIC    R0, R3, #3
 ORR    R0, R0, #SVC_mode
 TEQP   PC, R0          ;go to SVC mode preserving flags
 Push   "LR"
 [ SpoolOff
 BL     SpoolOff
 ]
 MOV    R1, #32-4
PHLOOP
 MOV    R0, R2, LSR R1
 AND    R0, R0, #&F
 CMPS   R0, #10
 ADDCC  R0, R0, #"0"
 ADDCS  R0, R0, #"A"-10
 SWI    OS_WriteC
 SUBS   R1, R1, #4
 BPL    PHLOOP
 MOV    R0, #" "
 SWI    OS_WriteC
 [ SpoolOff
 BL     SpoolOn
 ]
 Pull   "LR"
 MOVS   PC, R3

 [ SpoolOff
SpoolOff
 Push   "R0-R2,LR"
 MOV    R0, #3
 MOV    R1, #&10
 MOV    R2, #&EF
 SWI    OS_Byte
 Pull   "R0-R2,PC",,^

SpoolOn
 Push   "R0-R2,LR"
 MOV    R0, #3
 MOV    R1, #0
 MOV    R2, #&EF
 SWI    OS_Byte
 Pull   "R0-R2,PC",,^
 ]

Mess1                   ;R0,R1,LR stacked
 MOV    R0, PC          ;save PSR
 MOV    R1, LR          ;save link
 [ :LNOT: IrqDebug
 MOV    LR, #IRQsema
 LDR    LR, [LR]
 TEQS   LR, #0
 MOVNE  PC, R1          ;skip if IRQ thread, return NE
 ]

 BIC    LR, R0, #3
 ORR    LR, LR, #SVC_mode :OR: Z_bit
 TEQP   PC, LR          ;go to supervisor mode, preserve FI, set EQ
 nop                    ;delay for mode change
 Push    "LR"
 [ SpoolOff
 BL      SpoolOff
 ]
 MOV    PC, R1

 ]

; ======
; ClearV
; ======

ClearV
 BICS   PC, LR, #V_bit

; ====
; SetV
; ====

SetV
 ORRS   PC, LR, #V_bit


; ========
; SetVOnR0
; ========

SetVOnR0
 CMPS   R0, #0
 BICEQS PC, LR, #V_bit
 ORRNES PC, LR, #V_bit


; ======
; Divide
; ======

; entry: R0=Numerator, R1=Denominator
; exit:  R0=Result, R1=Remainder

Divide  ROUT
 Push   "R2,LR"

 MOV    LR,R1           ;temp = den
 CMPS   LR,R0,LSR #1    ;shift temp left unless it would be > num
10
 MOVLS  LR,LR,LSL #1
 CMPLS  LR,R0,LSR #1
 BLS    %BT10
 MOV    R2,#0           ;init result
20
 CMPS   R0,LR           ;if subtraction possible
 SUBCS  R0,R0,LR        ; do it
 ADC    R2,R2,R2        ;shift bit into result
 MOV    LR,LR,LSR #1    ;move temp right
 CMPS   LR,R1           ;loop if not done
 BHS    %BT20

 MOV    R1,R0           ;mod
 MOV    R0,R2           ;div

 Pull   "R2,PC",,^


; =========
; BlockMove
; =========

; entry: R0=source start, R1=dest start, R2=length
; can't cope with overlapping source and dest

BlockMove ROUT
 [ Debug9
 mess   ,"*source |dest    |length  - enter BlockMove",NL
 wrhex  R0
 wrhex  R1
 wrhex  R2
 mess   ,NL
 ]

 Push   "R0-R12,LR"
 TEQS   R2, #0
 Pull   "R0-R12,PC",EQ,^
05                      ;bytes at a time until source aligned
 TSTNE  R0, #2_11
 LDRNEB LR, [R0],#1
 STRNEB LR, [R1],#1
 SUBNES R2, R2, #1
 BNE    %BT05

 ANDS   LR, R1, #2_11   ;dest mis-alignment
 BEQ    %FT30           ;same alignment

;mis-aligned move

 CMP    R2, #10*4        ;enough left to worth being clever ?
 BLO    %FT40           ;if not
 SUB    r2, r2, #10*4

 LDR    R3, [R0], #4    ;get a word from source
10
 STRB   R3, [R1], #1    ;put bytes to dest until aligned
 MOV    R3, R3, LSR #8
 TSTS   R1, #2_11
 BNE    %BT10
 MOV    LR, LR, LSL #3  ;# bits left in R3
 RSB    R12,LR,#32      ;# bits free in R3
15
 LDMIA  R0!,{R4-R11}    ;load 8 words
                        ;do 8 word shift, spare bits in R3
 ORR    R3, R3, R4, LSL LR
 MOV    R4, R4, LSR R12

 ORR    R4, R4, R5, LSL LR
 MOV    R5, R5, LSR R12

 ORR    R5, R5, R6, LSL LR
 MOV    R6, R6, LSR R12

 ORR    R6, R6, R7, LSL LR
 MOV    R7, R7, LSR R12

 ORR    R7, R7, R8, LSL LR
 MOV    R8, R8, LSR R12

 ORR    R8, R8, R9, LSL LR
 MOV    R9, R9, LSR R12

 ORR    R9, R9, R10,LSL LR
 MOV    R10,R10,LSR R12

 ORR    R10,R10,R11,LSL LR
 STMIA  R1!,{R3-R10}
 MOV    R3, R11,LSR R12

 SUBS   R2, R2, #8*4
 BPL    %BT15
 ADD    R2, R2, #9*4
20                              ;write out spare bytes from shift
 STRB   R3, [R1], #1
 MOV    R3, R3, LSR #8
 SUBS   LR, LR, #8
 BNE    %BT20
 B      %FT40           ;do any bytes left

;aligned move

25
 LDMIA  R0!,{R3-R12, LR}    ;move 11 aligned words at a time
 STMIA  R1!,{R3-R12, LR}
 LDMIA  R0!,{R3-R12, LR}    ;move 11 aligned words at a time
 STMIA  R1!,{R3-R12, LR}
30
 SUBS   R2, R2, #22*4
 BPL    %BT25
 ADDS   R2, R2, #(22*4)-(3*4)
35
 LDMCSIA R0!, {R3-R5}
 STMCSIA R1!, {R3-R5}
 SUBCSS R2, R2, #3*4
 BCS    %BT35
 ADD    R2, R2, #3*4
40                              ;move any odd bytes left
 SUBS   R2, R2, #1
 LDRPLB LR, [R0],#1
 STRPLB LR, [R1],#1
 BPL    %BT40
 Pull   "R0-R12,PC",,^


 [ F

; =======
; ZeroRam
; =======

; Clear a block of RAM to 0

; entry: R0=start, R1=length

ZeroRam ROUT

 [ Debug9
 mess   ,"*start   |length  - enter ZeroRam",NL
 wrhex  R0
 wrhex  R1
 mess   ,NL
 ]

 Push   "R0-R12,LR"
 TEQS   R1, #0
 BEQ    %FT95
 MOV    R2, #0
10                              ;byte at a time until aligned
 TSTS   R0, #2_11
 STRNEB R2, [R0],#1
 SUBNES R1, R1, #1
 BNE    %BT10

 SUBS   R1, R1, #12*4   ;enough to be worth being clever
 BLO    %FT30           ; if not
 MOV    R3, #0
 MOV    R4, #0
 MOV    R5, #0
 MOV    R6, #0
 MOV    R7, #0
 MOV    R8, #0
 MOV    R9, #0
 MOV    R10,#0
 MOV    R11,#0
 MOV    R12,#0
 MOV    LR, #0
20
 STMIA  R0!,{R2-R12,LR}
 SUBS   R1, R1, #12*4
 BPL    %BT20
30
 ADD    R1, R1, #12*4
40
 SUBS   R1, R1, #1
 STRPLB R2,[R0],#1
 BPL    %BT40
95
 [ Debug9
 mess   ,"*leave ZeroRam",NL
 ]
 Pull   "R0-R12,PC",,^

 ]

        END
