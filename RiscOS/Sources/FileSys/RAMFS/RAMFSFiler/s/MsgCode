
; Message file handling code.


; OSS Routine to lookup the menu structure. The menu items are indirect,
; which means we have pointers into the RMA representation of the file.

; Note this routine must only be called when RAMFS Filer is the current Wimp
; task ie. NOT in service call handlers. The service call handlers have to
; flag that the re-cache should be done, so that this is spotted on the next
; Wimp_Poll.

rom_menustart
m_ramfs         Menu    MTitle
mo_fl_free      Item    MFree
mo_fl_quit      Item    MQuit
                DCB     0               ; terminator
                ALIGN

; Can't tell whether our menu is up or not, so close whatever the current
; menu is in case it is ours. So sometimes we close someone else's menu.
; Sad, but better than a machine stiffage.

; Must use ripple through error (VC) all the way to ensure the flag that
; says whether the file is valid or not gets set at the end.

copy_menus ENTRY "r1-r3"
 [ debug
        DLINE   "Re-making menu tree"
 ]
        MOV     r1, #-1                 ; Close menu tree.
        SWI     XWimp_CreateMenu
        BLVC    open_message_file       ; Get file open if necessary.
        ADRVC   r0, message_file_block
        ADRVC   r1, rom_menustart
        ADRVC   r2, ram_menustart
        MOVVC   r3, #ram_menuend-ram_menustart
        SWIVC   XMessageTrans_MakeMenus ; Get the new menu data

; If we get an error, flag that the file is valid/invalid so we can refuse
; to display the menu if the file is invalid (we got an error).

        MOVVC   r1, #0                  ; Not invalid
        MOVVS   r1, #1                  ; Invalid
        STR     r1, message_file_invalid

 [ debug
        EXIT    VC
        ADD     r1, r0, #4
        DSTRING r1, "Make Menus failed"
 ]
        EXIT


; Routine to lookup a string with no substituted parameters.

; In    r1 -> token
;       r2 -> buffer
;       r3 = buffer size
; Out   r0 corrupt if VC, else r0 -> error block if VS
;       r3 = size of string excluding terminator

lookup_nopars ENTRY "r4-r7"
        BL      open_message_file               ; Open file if necessary
        EXIT    VS

        ADR     r0, message_file_block
        MOV     r4, #0                          ; No %0
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_Lookup
        EXIT


; OSS Translate an error block, with one substituted parameter.

; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute

; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one ENTRY "r2-r7"
        MOV     r4, r1                          ; Move input %0

        CMP     wp, #0
        BLE     copy_error_one_stack            ; No workspace - open on stack

        BL      open_message_file               ; Ensure file is open
        EXIT    VS                              ; Return the error

        ADR     r1, message_file_block          ; Messages file handle
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        EXIT


; This must be a start-up type error, as we have no workspace. So we open
; the file on the stack, do the lookup, and then close the file again.

copy_error_one_stack ROUT
        BL      open_message_file_stack         ; Open the file
        EXIT    VS                              ; Return the error

        MOV     r1, sp                          ; Messages file handl on stack
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        BL      close_message_file_stack        ; Close the file

        SETV
        EXIT


message_filename
        DCB     "Resources:$.Resources.RAMFSFiler.Messages", 0
        ALIGN


; OSS Open the messages file if it is closed, using workspace.

open_message_file ENTRY "r0-r2"
        LDR     r1 , message_file_open
        TEQ     r1, #0                          ; Check the open flag
        EXIT    NE                              ; Return - it is open

        ADR     r0, message_file_block          ; Messages file handle
        ADR     r1, message_filename            ; Messages filename
        MOV     r2, #0                          ; Buffer in RMA/access direct
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]                        ; Return the error
        EXIT    VS

 [ debug
        DLINE   "Opened RAMFS Filer messages file"
 ]

        MOV     r1, #1
        STR     r1, message_file_open           ; Flag the file as open
        EXIT


; OSS Close the messages file if it is open, using workspace.

close_message_file ENTRY "r0"
        LDR     r0, message_file_open           ; Check open flag
        CMP     r0, #0                          ; clears V
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile         ; Close if open
        SUBS    r0, r0, r0                      ; R0=0; clear V
        STR     r0, message_file_open           ; Update open flag
        EXIT                                    ; Ignore errors


; Carve the message file block off the stack, open the Messages file,
; and exit with the open file block on the stack unless there was an error.
; Preserves r0 (token to be looked up) unless error. Trashes R1, R2, R6, R7.

open_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR
        MOV     r6, r0                  ; Save token/error block
        SUB     sp, sp, #16             ; Carve message file handle off stack

        MOV     r0, sp                  ; File handle on stack
        ADR     r1, message_filename    ; Filename
        MOV     r2, #0                  ; Direct access/buffer in RMA
        SWI     XMessageTrans_OpenFile  ; Open the file

        ADDVS   sp, sp, #16             ; Error - put stack back
        MOVVC   r0, r6                  ; Not error - restore token block
        MOV     pc, r7                  ; Return


; Close the message file block on the stack, restore the stack, and return.
; Preserves R0 (error block). Trashes R6 and R7 and flags.

close_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR (and V bit)
        MOV     r6, r0                  ; Save translated error block

        MOV     r0, sp                  ; Message file block is on stack
        SWI     XMessageTrans_CloseFile ; Close the file (ignore error)

        ADD     sp, sp, #16             ; Put stack back
        MOV     r0, r6                  ; Restore translated error
        MOV     pc, r7                  ; Return

        END
