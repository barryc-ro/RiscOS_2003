CSFS 3/4/97

(1) Now on dismount close all open files on the relevant mountname. Extended
fmap structure (h.fx) to hold file switch handle. NB means recompiling files
which reference this structure.

(2) Removed MAXDEPTH limit on nesting, added levelstack() functions in c.cat.

(3) c.serx combined servicegetdir() and serviceopendir().

(4) Some argument in the past about while(level>0) in c.update. Explanation
is that the update function is using the fpos[] etc. fixed stack, as are the
functions it calls. So stack gets overwritten with bad values.

(5) Bug fixed call of makedir() in c.update.

(6) Hacked syncdir() in c.update so that if the directory was not previously
cached, it is not getted twice - 'check' variable denotes that the directory
should be got and compared to what is cached.

(7) unlocked files in losearc() c.arcs - otherwise scrap files not removed on
dismount.



CSFS 2/4/97

(1) Apply fix to c.service - not using stringptr() on opensession()
parameters.


CSFS 31/3/97

(1) Testing with FSBash.

(2) Fine tuned path parsing to point at either directory name in root or sub
archive. So now get correct error message if you try to copy into CSFS:$

(3) Question: If a file is open on a mountname, and the name is dismounted,
what should happen? Auto close or as with deleting an open file, raise an
error?

(4) Pruned s.allerrs.

(5) Reinstated ShutDown() c.sfs (removed (1) 27/3/97. Gives Bad Params error on shutdown.)


CSFS 28/3/97

(1) Removed limits on filename lengths. 
    Constant MNLEN removed. 
    Added c.xstr variable length string manager. 
    Removed limits on various other strings, hostname, mountname, password, 
     username, mountpath. 
    Very large scale hacking of sources.

(2) Remaining limits are (in h.str) 
      MAXDEPTH (32)  - max level of file/dir nesting.
      NAMELEN  (256) - max length of any path or filename

(3) Note fix (2) 27/3/97 added a bug, result was scrap files left open,
"File is already open" error. The bug is in c.fx - fsmapn and fmapn
index from 1 and not from 0, to allow 0 to indicate closed. Line
should be fsmapn=fmapn=1 and not 0.

(4) losearc() in c.arcs does not free flex'd arc[acn].hdr memory.
Repeated mount/dismount's would leak memory.

(5) Information_Word in h.consts was not compatible with (1) 27/3/97



CSFS 27/3/97

(1) Removed RISC OS 2 style file switch code.
    NB c.virt is no longer needed.
    NB cmhg file has been changed.

(2) Removed the limitation on the max number of files which can be open at
the same time.




CSFS 21/3/97
(1) Used your updated c.* Added new h.flex

(2) c.update, updatedir(), reverted to while(level>0)

(3) weeded out unused functions in c.fs (and put those which only the discm
module uses in c.disc). 

(4) Resolved *update problems with non-absolute path names. Added
fs_canonicalise() to c.fs, used it in updates() in c.update. Fine tuned path
parsing in c.sfs, makepathsub().




CSFS 19/3/97

(1) Added s.usermode - I don't have headers so done hacked version

(2) Changed getint() in c.serx

(3) Added file_type=filetype(arc[acn].hdr[fn].load); to servicegetfile() in
c.serx. Note used function in c.fs which returns 'correct' type including
code files. Dubious advantage.

(4) Added usermode_donothing(); to runsession in c.service

(5) c.arcs added check of user name to gethostpath(), this function is only
used by c.mount to check for duplicate mounts.

(6) added fs_lock() and used it to lock all files which must not be auto
removed by CacheFS. added code to unlock scrap files when necessary, e.g.
when overwritten locally (*save) or when updated.

(7) completed update() command to latest spec.





CSFS 18/3/97

(1) Now support load/exec TSV files
(2) Now use spec protocol for passing file attributes on get/put
(3) Now use spec protocol for ending sessions.
(4) Added code to loadarcfile() in c.link to spot if a files attributes have
changed when actually get'd and issue upcall. Code might also be used to flag
errors on block loads where the length has changed.
(5) Fixed resolved address not being passed to transport.
(6) Fixed seviceopendir() line - if(ind>=0) arc[acn].hdr[ind].dirn=0;


CSFS 13/3/97

>CSFSServices : there is always +1 more than the actual number of
>mounts.

Fixed.

>CSFS_Services SWI does not seem to be implemented.

Fixed.

>RMRe. CSFS : I think you should send out the upcall (directory
>contents changed) after the mounts have been removed. At the moment, the
>filer window still contains entries, resulting in an error if you try to
>use them.

Now do a Filer_Close CSFS:$ on finalise - this will close any filers
which are open deeper.



CSFS 12/3/97

(1) Implemented # comments in TSV files.

(2) I've been going on about files losing their types - same point applies
to attributes. How do we upload a file with say r permission. Yes you could
use the attributes of the source file for the put - however because of the
behaviour of CacheFS, that is not necessarily a free variable.
(unless you choose to ignore the lock attribute).



CSFS 10/3/97

(1) The update command is actually set up as a filing system command, like
mount and dismount are - unless CSFS is current it must be invoked with
CSFS:Update. Maybe a good idea, maybe a bad one.

(2) Mount command now properly implemented with name address resolution.
So for the sake of argument this works;
CSFS:Mount -service disc -name mydir -path ADFS::HardDisc4.$.Projects.CSFS.Test1 

(3) CSFSServices and swi command now implemented - the spec. for the latter
probably has some typos in.

(4) New discm module which supports copy command (not used). Proper
capabilities/requirements flags.

(5) Loads more error messages etc. etc.

(6) If a service does not implement rename, then a copy+delete is done.

(7) some work on update command - like to hear your comments on preceding
points before finishing it.

(8) -writecache implemented.

(9) Disc version is not much fun for adding files because files lose their
types now. I suppose a fix would be to type stuff in the scrap directory and
then preserve types over the get/put operations.



CSFS 7/3/97

(1) Discm test disc services module

(2) On the subject of what is passed in the TSV file.

I have implemented the spec. like format below

     name filetype length attributes objecttype timestamp

This won't cope with code files, i.e. files with no filetype.
To do that you need load and exec addresses in addition.
cf. PRM 2-43

(3) It seems there is a problem with typing. I save a text file 'bob'
locally this has it's type set to TEXT. On the remote it is saved as 'bob'.
If you ever go back, it will be a data file, no extension... You could
probably provide a service that mapped filetypes to extensions and use that.

There is an old Acorn format for tar files, in these a text file is stored
with the name "filename,fff". In SparkFS, the comma and filetype never
appear to the user. You could do the same with extensions, but possibly the
extension thing is now too ingrained in Acorn users - i.e. they want to see
index/html

Possibly the converse service, a way of mapping extensions to types,
someone saves "bob/txt" and CSFS auto sets the type to TEXT.

(4) This fragment of Basic will get a TSV file out of the discm module

SYS&5E980,2,0,&AABBCCDD,"ADFS::Harddisc4.$.Projects.CSFS.Test1","ADFS::Harddisc4.$.Projects.CSFS.Test1","usrname","password","xx"

(5) The inet name resolution is not implemented.
