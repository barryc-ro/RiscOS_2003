CSFS 20/3/97

(1) Couple of bugfixes

CSFS 19/3/97

(1) Added s.usermode - I don't have headers so done hacked version

(2) Changed getint() in c.serx

(3) Added file_type=filetype(arc[acn].hdr[fn].load); to servicegetfile() in
c.serx. Note used function in c.fs which returns 'correct' type including
code files. Dubious advantage.

(4) Added usermode_donothing(); to runsession in c.service

(5) c.arcs added check of user name to gethostpath(), this function is only
used by c.mount to check for duplicate mounts.

(6) added fs_lock() and used it to lock all files which must not be auto
removed by CacheFS. added code to unlock scrap files when necessary, e.g.
when overwritten locally (*save) or when updated.

(7) completed update() command to latest spec.





CSFS 18/3/97

(1) Now support load/exec TSV files
(2) Now use spec protocol for passing file attributes on get/put
(3) Now use spec protocol for ending sessions.
(4) Added code to loadarcfile() in c.link to spot if a files attributes have
changed when actually get'd and issue upcall. Code might also be used to flag
errors on block loads where the length has changed.
(5) Fixed resolved address not being passed to transport.
(6) Fixed seviceopendir() line - if(ind>=0) arc[acn].hdr[ind].dirn=0;


CSFS 13/3/97

>CSFSServices : there is always +1 more than the actual number of
>mounts.

Fixed.

>CSFS_Services SWI does not seem to be implemented.

Fixed.

>RMRe. CSFS : I think you should send out the upcall (directory
>contents changed) after the mounts have been removed. At the moment, the
>filer window still contains entries, resulting in an error if you try to
>use them.

Now do a Filer_Close CSFS:$ on finalise - this will close any filers
which are open deeper.



CSFS 12/3/97

(1) Implemented # comments in TSV files.

(2) I've been going on about files losing their types - same point applies
to attributes. How do we upload a file with say r permission. Yes you could
use the attributes of the source file for the put - however because of the
behaviour of CacheFS, that is not necessarily a free variable.
(unless you choose to ignore the lock attribute).



CSFS 10/3/97

(1) The update command is actually set up as a filing system command, like
mount and dismount are - unless CSFS is current it must be invoked with
CSFS:Update. Maybe a good idea, maybe a bad one.

(2) Mount command now properly implemented with name address resolution.
So for the sake of argument this works;
CSFS:Mount -service disc -name mydir -path ADFS::HardDisc4.$.Projects.CSFS.Test1

(3) CSFSServices and swi command now implemented - the spec. for the latter
probably has some typos in.

(4) New discm module which supports copy command (not used). Proper
capabilities/requirements flags.

(5) Loads more error messages etc. etc.

(6) If a service does not implement rename, then a copy+delete is done.

(7) some work on update command - like to hear your comments on preceding
points before finishing it.

(8) -writecache implemented.

(9) Disc version is not much fun for adding files because files lose their
types now. I suppose a fix would be to type stuff in the scrap directory and
then preserve types over the get/put operations.



CSFS 7/3/97

(1) Discm test disc services module

(2) On the subject of what is passed in the TSV file.

I have implemented the spec. like format below

     name filetype length attributes objecttype timestamp

This won't cope with code files, i.e. files with no filetype.
To do that you need load and exec addresses in addition.
cf. PRM 2-43

(3) It seems there is a problem with typing. I save a text file 'bob'
locally this has it's type set to TEXT. On the remote it is saved as 'bob'.
If you ever go back, it will be a data file, no extension... You could
probably provide a service that mapped filetypes to extensions and use that.

There is an old Acorn format for tar files, in these a text file is stored
with the name "filename,fff". In SparkFS, the comma and filetype never
appear to the user. You could do the same with extensions, but possibly the
extension thing is now too ingrained in Acorn users - i.e. they want to see
index/html

Possibly the converse service, a way of mapping extensions to types,
someone saves "bob/txt" and CSFS auto sets the type to TEXT.

(4) This fragment of Basic will get a TSV file out of the discm module

SYS&5E980,2,0,&AABBCCDD,"ADFS::Harddisc4.$.Projects.CSFS.Test1","ADFS::Harddisc4.$.Projects.CSFS.Test1","usrname","password","xx"

(5) The inet name resolution is not implemented.
