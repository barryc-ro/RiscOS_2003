;----------------------------------------------------------------------
;    Filename    : s.usermode
;    Author      : K.Ruttle
;    Date        : Fri 10th February 1995
;    Description : Enters usermode and does a null swi to flush all
;                  callbacks.
;    Modification history:
;
;----------------------------------------------------------------------


OS_SetCallBack       * &00001b
OS_ChangeEnvironment * &000040
OS_Byte              * &000006
OS_EnterOS           * &000016


XOS_MASK   * &00020000 ; mask to make a swi a RISC OS V-error SWI

XOS_SetCallBack * OS_SetCallBack :OR: XOS_MASK
XOS_EnterOS     * OS_EnterOS   :OR: XOS_MASK
XOS_Byte        * OS_Byte :OR: XOS_MASK
XOS_ChangeEnvironment * OS_ChangeEnvironment :OR: XOS_MASK


CallBackHandler * 7




        EXPORT  usermode_donothing
        ^       0

        AREA    netasm,PIC,CODE,REL

        ALIGN


; This callback handler simple defers the callback until later
;
defer_callback
        SWI XOS_SetCallBack             ; Defer callback
        MOV r14, r12                    ; Register block
        LDMIA r14, {r0-r14}^            ; Loads USR r13,r14
        MOV r0, r0                      ; NOOP after accessing user
                                        ; registers before accessing banked
                                        ; register.
        LDR r14, [r14, #15*4]           ; Loads user PC into SVC r14
        MOVS pc, r14                    ; Drop back to USR mode



; os_error *usermode_donothing();
usermode_donothing ROUT

        STMFD sp!,{r0-r3,lr}
        SUB sp, sp, #&40                ; Make space on stack for reg dump

        ; Update callback handler atomically in case an event occurs
        ; between reading the old handler and writing the new handler
        ;
        MOV r0, #CallBackHandler
        ADR r1, defer_callback
        MOV r2, sp                      ; R12 in defer_callback = reg ptr
        MOV r3, sp                      ; Reg save area on stack
        SWI XOS_ChangeEnvironment
        STMFD sp!,{r1-r3}                   ; Save old handler

        ; Now execute a SWI in user mode to trigger callbacks
        TEQP pc, #0                     ; To user mode
        MOV r0, #0
        MOV r1, #1
        SWI XOS_Byte                    ; Read OS version
        SWI XOS_EnterOS                 ; Back to SVC mode

        ; Restore old callback handler
        MOV r0, #CallBackHandler
        LDMFD sp!,{r1-r3}
        SWI XOS_ChangeEnvironment

        ADD sp, sp, #&40
        LDMFD sp!,{r0-r3,pc}^

        END

