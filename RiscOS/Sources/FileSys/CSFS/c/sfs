/*->c.sfs */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"
#include "h.etc"
#include "h.allerrs"
#include "h.arcs"
#include "h.dir"
#include "h.cat"
#include "h.fs"
#include "h.sff"
#include "h.link"
#include "h.mem"
#include "h.fx"
#include "h.scrap"
#include "h.service"
#include "h.xstr"



#include "h.sfs"


char arcname[NAMELEN];   /* real name of archive */
char arcpath[NAMELEN];   /* path inside  archive */



/* takes the dirname and special fields, and turns them into full paths */
/* returned in arcname and arcpath                                      */
/* if lib set relative to lib else relative to csd                      */


static char * skipitem(char * p)
{
 while(1)
 {
  if(!*p)       break;
  if(*p++=='.') break;
 }
 return(p);
}


static char * getitem(char * p,char * result)
{
 int    c;
 char * q;

 if(p)
 {
  q=result;
  while(1)
  {
   c=*q=*p++;
   if(c<' ' || c=='.')
   {
    *q=0;
    return(result);
   }
   q++;
  }
 }

 return(NULL);
}



/* return arcname - the mount name                */
/*        arcpath - the path after the mount name */


static _kernel_oserror * makepathsub(char * dirname,char * spec,
                                                    int contents,int * acn)
{
 _kernel_oserror * err;

 err=NULL;

/* printf("dirname=%s spec=%d\n",dirname,spec); */

 if(!cstrncmp(dirname,"CSFS:",5))
 {
  dirname+=4;
 }

 if(*dirname==':') /* we expect $ */
 {
  dirname++;
 }

 if(*dirname!='$') return(&mb_sfserr_BadFileName);

 /* arcname is name of archive     */
 /* arcpath is path inside archive */

 dirname=skipitem(dirname); /* skip $ */
 getitem(dirname,arcname);  /* arcname=$.stuff */
 dirname=skipitem(dirname);
 strcpy(arcpath,dirname);   /* arcpath=$.stuff.stuff */

 if(!*arcpath && !contents)
 {
  strcpy(arcpath,arcname);
  *arcname=0;
 }

 err=gethandle(arcname,acn);


/* printf("path=%s\n",arcpath);
   printf("name=%s\n",arcname); */

 return(err);

 USE(spec);
}



_kernel_oserror *  makepath(char * dirname,char * spec,int contents,int * acn)
{
 return(makepathsub(dirname,spec,contents,acn));
}


static _kernel_oserror *  formpath(FSEntry_Func_Parameter * parm,
                                                 int contents,int * acn)
{
 return(makepath(parm->first_parameter.name_1,
                 parm->sixth_parameter.special_field_1,contents,acn));
}



static _kernel_oserror *  formpath2(FSEntry_Func_Parameter * parm,
                                                  int contents,int * acn)
{
 return(makepath(parm->second_parameter.name_2,
                 parm->special_field_2,contents,acn));
}



/*****************************************************************************/

/* 14 */

static _kernel_oserror * ReadDirectoryEntriesSub(int acn,
                                                 FSEntry_Func_Parameter *parm)
{
 _kernel_oserror * err;
 int dir;
 int n;
 int i;
 int p;

 char * dest;
 int    nobjects;
 int    start;
 int    size;
 char * limit;
 int    nwrite;
 int    len;
 int    len1;
 int    next;

 dest=parm->second_parameter.destination_address;
 nobjects=parm->third_parameter.read_number;
 start=parm->read_offset;
 size=parm->buffer_length;
 limit=dest+size;
 nwrite=0;
 next=-1;

 err=finddir(acn,arcpath,&dir,&n);
 if(!err && dir>=0)
 {
  p=dir;

  for(i=0;i<n;i++)
  {
   if(i>=start)
   {
    len1=strlen(stringptr(arc[acn].hdr[i+p].name))+1;
    len=len1;
    next=i;
    if((limit-dest)<len) break;
    strcpy(dest,stringptr(arc[acn].hdr[i+p].name));

#ifdef DODEBUG
    deb("read %s",dest);
#endif

    dest+=len1;
    nwrite++;
    next++;
    if(nwrite>=nobjects) break;
   }
   if(arc[acn].hdr[i+p].dirn>=0) p+=noindir(acn,i+p);
  }

  if(i>=n) next=-1;

#ifdef DODEBUG
  deb("next=%d nwrite=%d",next,nwrite);
#endif

  parm->read_offset=next;
  parm->third_parameter.read_number=nwrite;
 }
 return(err);
}


_kernel_oserror * ReadDirectoryEntries(FSEntry_Func_Parameter * parm)
{
 _kernel_oserror * err;
 int               acn;

 err=formpath(parm,1,&acn);
 if(!err) err=ReadDirectoryEntriesSub(acn,parm);
 return(err);
}





/* 15 */

static _kernel_oserror * ReadDirectoriesAndInformationSub(int acn,
                                              FSEntry_Func_Parameter * parm)
{
 _kernel_oserror * err;
 int dir;
 int n;
 int i;
 int p;

 char * dest;
 int    nobjects;
 int    start;
 int    size;
 char * limit;
 int    nwrite;
 int    nread;
 int    next;
 int    len;
 int    len1;

 dest=parm->second_parameter.destination_address;
 nobjects=parm->third_parameter.read_number;
 start=parm->read_offset;
 size=parm->buffer_length;

 limit=dest+size;
 nwrite=0;
 nread=next=-1;

#ifdef DODEBUG
 deb("start=%d",start);
#endif

 err=finddir(acn,arcpath,&dir,&n);
 if(!err && dir>=0)
 {
  p=dir;

  for(i=0;i<n;i++)
  {
   if(i>=start)
   {
    len1=strlen(stringptr(arc[acn].hdr[i+p].name))+1;
    len1=(len1+0x3) & (~0x3);
    len=len1+0x14;

    next=i;

    if((limit-dest)<len) break;

    *((int*)dest)=arc[acn].hdr[i+p].load;
    dest+=4;
    *((int*)dest)=arc[acn].hdr[i+p].exec;
    dest+=4;
    *((int*)dest)=arc[acn].hdr[i+p].length;
    dest+=4;
    *((int*)dest)=arc[acn].hdr[i+p].acc;
    dest+=4;
    *((int*)dest)=(arc[acn].hdr[i+p].dirn>=0 ||arc[acn].hdr[i+p].dirn==-2)+1;
    dest+=4;
    strcpy(dest,stringptr(arc[acn].hdr[i+p].name));
    dest+=len1;

#ifdef DODEBUG
    deb("readname %s",arc[acn].hdr[i+p].name);
#endif

    nwrite++;
    next++;

    if(nwrite>=nobjects) break;
   }
   if(arc[acn].hdr[i+p].dirn>=0) p+=noindir(acn,i+p);
  }

  if(i>=n) next=-1;
 }

 parm->read_offset=next;
 parm->third_parameter.read_number=nwrite;

 return(err);
}



_kernel_oserror * ReadDirectoriesAndInformation(FSEntry_Func_Parameter *parm)
{
 _kernel_oserror * err;
 int               acn;

 err=formpath(parm,1,&acn);
 if(!err) err=ReadDirectoriesAndInformationSub(acn,parm);

 return(err);
}






/* 19 */

_kernel_oserror * 
           ReadDirectoryEntriesAndInformation(FSEntry_Func_Parameter * parm)
{
 _kernel_oserror * err;
 int acn;
 int dir;
 int n;
 int i;
 int p;

 char * dest;
 int    nobjects;
 int    start;
 int    size;
 char * limit;
 int    nwrite;
 int    len;
 int    len1;
 int    next;

 dest=parm->second_parameter.destination_address;
 nobjects=parm->third_parameter.read_number;
 start=parm->read_offset;
 size=parm->buffer_length;
 limit=dest+size;
 nwrite=0;
 next=-1;

 err=formpath(parm,1,&acn);
 if(!err)
 {
  {
   err=finddir(acn,arcpath,&dir,&n);
   if(!err && dir>=0)
   {
    p=dir;

    for(i=0;i<n;i++)
    {
     if(i>=start)
     {
      len1=strlen(stringptr(arc[acn].hdr[i+p].name))+1;
      len1=(len1+0x3) & (~0x3);
      len=len1+29;
      next=i;

      if((limit-dest)<len) break;

      *((int*)dest)=arc[acn].hdr[i+p].load;
      dest+=4;
      *((int*)dest)=arc[acn].hdr[i+p].exec;
      dest+=4;
      *((int*)dest)=arc[acn].hdr[i+p].length;
      dest+=4;
      *((int*)dest)=arc[acn].hdr[i+p].acc;
      dest+=4;
      *((int*)dest)=(arc[acn].hdr[i+p].dirn>=0 ||arc[acn].hdr[i+p].dirn==-2)+1;
      dest+=4;
      *((int*)dest)=0;
      dest+=4;

      writetime(dest,arc[acn].hdr[i+p].load,arc[acn].hdr[i+p].exec);
      dest+=5;

      strcpy(dest,stringptr(arc[acn].hdr[i+p].name));
      dest+=len1;

      nwrite++;
      next++;

      if(nwrite>=nobjects) break;
     }
     if(arc[acn].hdr[i+p].dirn>=0) p+=noindir(acn,i+p);
    }

    if(i>=n) next=-1;

    parm->read_offset=next;
    parm->third_parameter.read_number=nwrite;
   }
  }
 }
 return(err);
}






/*****************************************************************************/

/* rename object1 to object2 */




_kernel_oserror * RenameObject(FSEntry_Func_Parameter * parm)
{
 _kernel_oserror * err;
 int         acn1;
 int         acn2;
 int         fn1;
 int         fn2;
 int         ow;
 int         ind;
 int         size;
 YesNoAnswer result;

 result=Yes;

 err=formpath(parm,0,&acn1);

 if(!err)
 {
  {
   err=findpath(acn1,arcpath,&fn1,0);
   if(fn1<-1)  err=&mb_sfserr_FileNotFound;  /* Not found */
   else
   if(fn1==-1) err=&mb_sfserr_Locked;  /* should flag $ locked */

   if(!err)  
   {
    err=deleteable(acn1,fn1);
    if(!err) err=formpath2(parm,0,&acn2);
    if(!err)
    {
     if(!err)
     {
      err=findins(acn2,arcpath,&fn2,&ow,&ind); /* $ OK because ow */
      if(!err)
      {
       if(acn1!=acn2) result=Yes;
       else
       {
        if(ow && fn2!=fn1) err=&mb_sfserr_AlreadyExists; /* Already exists */
        else
        {
         if(arc[acn1].ro) err=&mb_sfserr_ReadOnlyArc;      /* ro */
         else
         {
          if(arc[acn1].hdr[fn1].fshandle) err=&mb_sfserr_FileOpen;
          else
          if(arc[acn1].hdr[fn1].acc & LOCK) err=&mb_sfserr_Locked; /* Locked */
          else
          {
           /* do the rename                       */
           /* consists of moving an object in cat */

           if(arc[acn1].hdr[fn1].dirn>=0) size=noindir(acn1,fn1)+1;
           else                           size=1;

           if(fn2>fn1 && fn2<(fn1+size)) result=Yes;
           else
           {
            err=renamex(acn1,fn1,fn2,ind,size,leaf(arcpath));
            if(!err) result=No;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }

 parm->first_parameter.rename_invalid=result;

 return(err);
}


/*****************************************************************************/

/* might be useful */

_kernel_oserror * ShutDown(FSEntry_Func_Parameter * parm)
{
 parm=parm;

 return(NULL);
}



/*****************************************************************************/


extern int callback_handler(_kernel_swi_regs * r,void * pw);
extern int callback_entry(_kernel_swi_regs * r,void * pw);


int callback_handler(_kernel_swi_regs * r,void * pw)
{
 _kernel_swi_regs   rx;

 memset(&rx,0,sizeof(_kernel_swi_regs));
 rx.r[1]=Service_CSFSStarting;
 _kernel_swi(OS_ServiceCall,&rx,&rx);

 return(1);

 USE(r);
 USE(pw);
}



/*****************************************************************************/


static void filerclose(void)
{
 oscli("Filer_CloseDir CSFS:$");
}


/* lose memory etc. */

void CSFSFinalise(void)
{
 filerclose();
 scrapfinit();
 memfinish();
}



int privateword;

/* claim memory chunk */

_kernel_oserror * CSFSInitialise(void * pw)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;

 privateword=(int)pw;

 err=meminit();

 if(!err)
 {
  err=arcsinit();
  if(!err) err=fxinit();
  if(!err) err=initservice();
  if(!err) scrapinit();
  if(!err)
  {
   rx.r[0]=(int)callback_entry;
   rx.r[1]=(int)privateword;
   _kernel_swi(OS_AddCallBack,&rx,&rx);
  }
  if(!err) err=xstringstart();
  if(!err) err=levelstackinit();
 }
 return(err);
}

