/*->c.fs */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>


#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.str"

#include "h.fs"


/*****************************************************************************/


int cstrcmp(char * first,char * second)
{
 int f;
 int s;

 while(1)
 {
  f=toupper(*first++);
  s=toupper(*second++);
  if(f!=s || !f) return(f-s);
 }
}




_kernel_oserror * transpath(char * src,char * dest)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=(int)src;
 rx.r[1]=(int)dest;
 rx.r[2]=NAMELEN;

 err=_kernel_swi(OS_GSTrans,&rx,&rx);

 return(err);
}




/*****************************************************************************/
/* returns 0 ==does not exist  1==file 2==dir */


int fexists(char * name)
{
 int code;

 _kernel_osfile_block fiblock;

 code=_kernel_osfile(17,name,&fiblock);  /* don't use path */

 return(code);
}



_kernel_oserror * stat(char * name,fstat * f)
{
 _kernel_oserror  *  err;
 _kernel_swi_regs    rx;

 rx.r[0]=5;
 rx.r[1]=(int)name;

 err=_kernel_swi(OS_File,&rx,&rx);
 if(err) return(err);


 f->object=rx.r[0];
 f->length=rx.r[4];
 f->load=rx.r[2];
 f->exec=rx.r[3];
 f->acc=rx.r[5];

 f->type=filetype(f->load);

 return(NULL);
}


int filetype(int load)
{
 if((load & 0xFFF00000)==0xFFF00000)
           return((load >> 8) & 0xFFF);
 else return(-1);
}



void getdeftime(fstat * stat,int type)
{
 _kernel_swi_regs rx;
 char            pblk[32];

 stat->length=0;
 stat->acc=DEFATT;
 stat->load=0xFFF00000;
 stat->load|=type<<8;

 pblk[0]=3;

 rx.r[0]=14;
 rx.r[1]=(int)pblk;

 _kernel_swi(OS_Word,&rx,&rx);

 stat->exec=*(int *)pblk;
 stat->load|=pblk[4];
}



void writetime(char * where,int load,int exec)
{
 if((load  & 0xFFF00000)==0xFFF00000)
 {
  *((int*)where)=exec;
  *(where+4)=load & 0xFF;
 }
 else memset(where,0,5);
}



void writets(char * string,char * format,int lo,int hi)
{
 char pblk[32];
 _kernel_swi_regs    rx;

 *(int *)pblk=lo;
 pblk[4]=hi;

 rx.r[0]=(int)pblk;
 rx.r[1]=(int)string;
 rx.r[2]=64;
 rx.r[3]=(int)format;

 _kernel_swi(OS_ConvertDateAndTime,&rx,&rx);
}



void writetimedate(char * string,int lo,int hi)
{
 writets(string,"%24:%MI:%SE %DY-%M3-%YR%0",lo,hi);
}



void writetypest(char * string,int type)
{
 _kernel_swi_regs    rx;
 int i;

 rx.r[0]=18;
 rx.r[2]=type;
 _kernel_swi(OS_FSControl,&rx,&rx);
 string[0]=rx.r[2];
 string[1]=rx.r[2]>>8;
 string[2]=rx.r[2]>>16;
 string[3]=rx.r[2]>>24;
 string[4]=rx.r[3];
 string[5]=rx.r[3]>>8;
 string[6]=rx.r[3]>>16;
 string[7]=rx.r[3]>>24;
 for(i=0;i<8;i++) if(string[i]<=32) break;
 string[i]=0;
}



void writens(char * string,int val)
{
 _kernel_swi_regs    rx;

 rx.r[0]=val;
 rx.r[1]=(int)string;
 rx.r[2]=12;

 _kernel_swi(OS_ConvertFixedFileSize,&rx,&rx);
}



char * leaf(char * filename)
{ char * p;

  p=strrchr(filename,'.');
  if(!p) p=filename; else p+=1;
  return(p);
}





_kernel_oserror * oscli(char * string)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=(int)string;

 err=_kernel_swi(OS_CLI,&rx,&rx);

 return(err);
}



_kernel_oserror * open(char * name,int mode,int * fh)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 if(mode=='r') rx.r[0]=0x4F;
 else
 if(mode=='w') rx.r[0]=0x8F;
 else
 if(mode=='u') rx.r[0]=0xCF;

 rx.r[1]=(int)name;

 err=_kernel_swi(OS_Find,&rx,&rx);

 *fh=rx.r[0];

 return(err);
}



_kernel_oserror * close(int fh)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=0;
 rx.r[1]=fh;

 err=_kernel_swi(OS_Find,&rx,&rx);

 return(err);
}





_kernel_oserror * read(int fh,void * b,int n)
{
 _kernel_swi_regs rx;

 rx.r[0]=4;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;

/* deb("SYS\"OS_GBPB\",4,fh,%d,%d",(int)b,n); */

 return(_kernel_swi(OS_GBPB,&rx,&rx));
}





_kernel_oserror * readat(int fh,void * b,int n,int at)
{
 _kernel_swi_regs rx;

 rx.r[0]=3;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;
 rx.r[4]=at;

 return(_kernel_swi(OS_GBPB,&rx,&rx));
}



_kernel_oserror * write(int fh,void * b,int n)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 if(!n) return(NULL);

 rx.r[0]=2;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;

 err=_kernel_swi(OS_GBPB,&rx,&rx);

 return(err);
}





_kernel_oserror * writeat(int fh,void * b,int n,int at)
{
 _kernel_swi_regs rx;

 if(!n) return(NULL);

 rx.r[0]=1;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;
 rx.r[4]=at;

 return(_kernel_swi(OS_GBPB,&rx,&rx));
}



_kernel_oserror * seek(int fh,int posn)
{
 _kernel_swi_regs rx;

 rx.r[0]=1;
 rx.r[1]=fh;
 rx.r[2]=posn;

 return(_kernel_swi(OS_Args,&rx,&rx));
}


_kernel_oserror * setfileextent(int fh,int ex)
{
 _kernel_swi_regs rx;

 rx.r[0]=3;
 rx.r[1]=fh;
 rx.r[2]=ex;

 return(_kernel_swi(OS_Args,&rx,&rx));
}



_kernel_oserror * getfilename(int fh,char * name,int len)
{
 _kernel_swi_regs rx;

 rx.r[0]=7;
 rx.r[1]=fh;
 rx.r[2]=(int)name;
 rx.r[3]=0;
 rx.r[4]=0;
 rx.r[5]=len;

 return(_kernel_swi(OS_Args,&rx,&rx));
}


_kernel_oserror * saveblock(char *name,int type,char * start,int len)
{
 _kernel_swi_regs rx;

 rx.r[0]=10;
 rx.r[1]=(int)name;
 rx.r[2]=type;
 rx.r[4]=(int)start;
 rx.r[5]=(int)(start+len);

 return(_kernel_swi(OS_File,&rx,&rx));
}


_kernel_oserror * loadblock(char *name,char * start)
{
 _kernel_swi_regs rx;

 rx.r[0]=16;
 rx.r[1]=(int)name;
 rx.r[2]=(int)start;
 rx.r[3]=0;

 return(_kernel_swi(OS_File,&rx,&rx));
}




_kernel_oserror * delete(char * name)
{
 _kernel_swi_regs rx;

 rx.r[0]=6;
 rx.r[1]=(int)name;

 return(_kernel_swi(OS_File,&rx,&rx));
}





_kernel_oserror * fs_cdir(char * name)
{
 _kernel_swi_regs rx;

 rx.r[0]=8;
 rx.r[1]=(int)name;
 rx.r[2]=0;

 return(_kernel_swi(OS_File,&rx,&rx));
}



_kernel_oserror * fs_wipe(char * name)
{
 _kernel_swi_regs  rx;

 rx.r[0]=27;
 rx.r[1]=(int)name;
 rx.r[2]=0;
 rx.r[3]=(1<<1)|(1<<0); /* recursive + force */

 return(_kernel_swi(OS_FSControl,&rx,&rx));
}




_kernel_oserror * fs_create(char * name,int length,int type)
{
 _kernel_swi_regs rx;

 rx.r[0]=0xB;
 rx.r[1]=(int)name;
 if(type==-1) type=0xFFD;
 rx.r[2]=type;
 rx.r[3]=0;
 rx.r[4]=0;
 rx.r[5]=length;
 return(_kernel_swi(OS_File,&rx,&rx));
}




_kernel_oserror * fs_lock(char * name,int bits)
{
 _kernel_swi_regs rx;

 rx.r[0]=4;
 rx.r[1]=(int)name;
 rx.r[5]=bits;

 return(_kernel_swi(OS_File,&rx,&rx));
}



_kernel_oserror * fs_unlockall(char * name)
{
_kernel_swi_regs  rx;

 rx.r[0]=24;
 rx.r[1]=(int)name;
 rx.r[2]=(int)"RW";

 return(_kernel_swi(OS_FSControl,&rx,&rx));
}




static int  dirposn;

void startscan(void)
{
 dirposn=0;
}


/* PRM page 877 */
/* note that you can read nothing, but you have to continue */
/* search is only over when dirposn==-1                     */


_kernel_oserror * nextitem(char * dirname,fstat * f,char * wild,int * eof)
{
 char              buff[64];
 _kernel_oserror * err;
 _kernel_swi_regs  rx;

 err=NULL;
 *eof=0;

 while(1)
 {
  if(dirposn==-1)
  {
   *eof=1;
   return(err);
  }

  rx.r[0]=10;
  rx.r[1]=(int)dirname;
  rx.r[2]=(int)buff;
  rx.r[3]=1;
  rx.r[4]=dirposn;
  rx.r[5]=64;
  rx.r[6]=(int)wild;

  err=_kernel_swi(OS_GBPB,&rx,&rx);
  if(err) break;

  dirposn=rx.r[4];

  if(rx.r[3]) break;
 }

 if(!err)
 {
  f->load  =(* (int *)(buff+0x0));
  f->exec  =(* (int *)(buff+0x4));
  f->length=(* (int *)(buff+0x8));
  f->acc   =(* (int *)(buff+0xC));
  f->object=(* (int *)(buff+0x10));
  strcpy(f->name,buff+0x14);
  f->type=filetype(f->load);
 }

 return(err);
}



static int dodebug=0;

void deb(char * format, ...)
{
 va_list args;
 char v[256];
 int  n;

 if(dodebug)
 {
  va_start(args, format);
  n=vsprintf(v, format, args);

  _kernel_oswrch(4);
  _kernel_oswrch(30);

  printf("deb:%s\n",v);

  _kernel_oswrch(5);

  va_end(args);
 }
}





