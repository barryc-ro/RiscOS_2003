/*->c.xstr  */


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <ctype.h>
#include <time.h>
#include <locale.h>

#include "kernel.h"
#include "swis.h"





#include "h.flex"



#include "h.xstr"


/*****************************************************************************/
/* x string manager */



#define STRCHUNK     0x400
#define STRMAPCHUNK  0x100





typedef struct string
{
 int offset;
 int maxlen;
 int curlen;
} string;


static char   * stringspace;
static int      stringsize;

static string * stringmap;
static int      nostrings;



char * stringptr(int s)
{
 int offset;
 offset=stringmap[s].offset;
 return(stringspace+offset);
}




_kernel_oserror * mkstring(int len,int * s)
{
 _kernel_oserror * err;

 err=flex_chunk((flex_ptr)&stringmap,(nostrings+1)*sizeof(string),STRMAPCHUNK);
 if(!err)
 {
  stringmap[nostrings++].offset=stringsize;

  stringmap[nostrings-1].curlen=len;
  len++;
  len=(len+0x3)&(~0x3);
  stringmap[nostrings-1].maxlen=len;

  stringsize+=len;

  err=flex_chunk((flex_ptr)&stringspace,stringsize,STRCHUNK);
 }

 *s=(nostrings-1);
 return(err);
}



static _kernel_oserror * chklen(int s,int newlen)
{
 _kernel_oserror * err;
 int               len;
 int               offset;
 int               delta;

 err=NULL;

 offset=stringmap[s].offset;
 len=stringmap[s].maxlen;

 if(newlen!=len)
 {
  delta=newlen-len;

  stringmap[s].maxlen+=delta;

  if(delta>0)
  {
   err=flex_chunk((flex_ptr)&stringspace,stringsize+delta,STRCHUNK);
  }

  if(!err)
  {
   memmove(stringspace+offset+len+delta,stringspace+offset+len,
                                       stringsize-offset-len);

   while(++s<nostrings)
   {
    if(stringmap[s].offset>=0) stringmap[s].offset+=delta;
   }

   if(delta<0)err=flex_chunk((flex_ptr)&stringspace,stringsize+delta,STRCHUNK);
   stringsize+=delta;
  }
 }

 return(err);
}



static _kernel_oserror * chktruelen(int s,int len)
{
 len++;
 len=(len+0x3)&(~0x3);
 return(chklen(s,len));
}





_kernel_oserror * rmstring(int s)
{
 _kernel_oserror * err;
 int               len;
 int               offset;

 err=NULL;

 if(s)
 {
  offset=stringmap[s].offset;
  len=stringmap[s].maxlen;

  if(s==(nostrings-1))
  {
   while(1)
   {
    nostrings--;
    s--;

    if(s<0) break;
    if(stringmap[s].offset>=0) break;
   }
  }
  else
  if(s<(nostrings-1))
  {
   /* shift memory from the end of this string to end of table down by len */
   memmove(stringspace+offset,stringspace+offset+len,stringsize-offset-len);
   stringmap[s].offset=-1;
   while(++s<nostrings)
   {
    if(stringmap[s].offset>=0) stringmap[s].offset-=len;
   }
  }

  stringsize-=len;

  err=flex_chunk((flex_ptr)&stringspace,stringsize,STRCHUNK);
  if(!err) err=flex_chunk((flex_ptr)&stringmap,
                             nostrings*sizeof(string),STRMAPCHUNK);
 }

/* printf("nostrings=%d",nostrings); */

 return(err);
}



/*
_kernel_oserror * rmstringr(int * s)
{
 _kernel_oserror * err;

 err=rmstring(*s);
 *s=0;

 return(err);
}
*/


/* create a new string */

_kernel_oserror * createstring(char * p,int * s)
{
 _kernel_oserror * err;

 err=mkstring(strlen(p),s);
 if(!err) strcpy(stringptr(*s),p);

 return(err);
}


/*

_kernel_oserror * createstringr(char ** p,int * s)
{
 _kernel_oserror * err;

 err=mkstring(strlen(*p),s);
 strcpy(stringptr(*s),*p);

 return(err);
}

*/


_kernel_oserror * assignstring(int s,char * p)
{
 _kernel_oserror * err;
 int               len;
 char            * q;

 len=strlen(p);
 err=chktruelen(s,len);
 if(!err)
 {
  q=stringptr(s);
  strcpy(q,p);
  stringmap[s].curlen=len;
 }

 return(err);
}





/* creates a string and then copies a string into it */

_kernel_oserror * dupstring(int s1,int * d1)
{
 _kernel_oserror * err;
 char            * p;
 char            * q;
 int               s2;
 int               len;

 len=stringmap[s1].curlen;

 err=mkstring(len,&s2);
 if(!err)
 {
  p=stringptr(s1);
  q=stringptr(s2);
  memcpy(q,p,len+1);
  stringmap[s2].curlen=len;

  *d1=s2;
 }

 return(err);
}









/* called once boots string table */

_kernel_oserror * xstringstart(void)
{
 _kernel_oserror * err;
 int               s;

 err=flex_alloc((flex_ptr)&stringspace,0);
 if(!err) err=flex_alloc((flex_ptr)&stringmap,0);

 stringsize=0;
 nostrings=0;
 mkstring(0,&s);  /* by creating 1 dummy string, we can use 0 as */
                  /* signifying the null string */

 return(err);
}



