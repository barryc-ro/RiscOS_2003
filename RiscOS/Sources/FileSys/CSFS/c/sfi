/*->c.sfi */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"
#include "h.csfserr"
#include "h.fs"
#include "h.arcs"
#include "h.arcf"
#include "h.dir"

#include "h.sfs"
#include "h.sff"
#include "h.fx"

#include "h.sfi"


/*****************************************************************************/


static void
setopenparms(int handle,FSEntry_Open_Parameter * parm,int r,int w)
{
  int info=0;

  parm->open_result.handle=handle;

  if(fsmap[fmap[handle].file].cat.isdir)
    info|=InformationWord_ObjectIsDirectory;
  if(r)
    info|=InformationWord_ReadPermitted;
  if(w)
    info|=InformationWord_WritePermitted;

  parm->open_result.information_word=info;
  parm->open_result.buffer_size=DEFBSIZE;
  parm->open_result.file_extent=fsmap[fmap[handle].file].cat.length;
  parm->open_result.allocated_space=fsmap[fmap[handle].file].cat.alloc;
}



_kernel_oserror *
OpenUpdate(int acn,FSEntry_Open_Parameter *parm)
{
  _kernel_oserror * err;
  _kernel_oserror * err_read;
  _kernel_oserror * err_write;
  int               fn;
  int               handle;
  int               r;
  int               w;

  debug_printf(db,"(6) OpenUpdate (%d)",parm->open_definition.handle);

  err=findpath(acn,arcpath,&fn,0);

  if(!err && fn>=0)
  {
    if(fn>=0)
    {
      err_write=writeable(acn,fn);
      err_read=readable(acn,fn);

      r=(!err_read) && ((!err_write) || err_write==geterror(err_Access));
      w=(!err_write) && ((!err_read) || err_read==geterror(err_Access));

      if(r || w)
      {
        handle=parm->open_definition.handle;
        if(!err)
          err=getnewfilehandle(acn,fn,0,&handle);
        if(!err)
          setopenparms(handle,parm,r,w);
      }
      else if(err_write)
        err=err_write;
      else
        err=err_read;

    }
    else
      parm->open_result.handle=0;
  }

  return(err);
}



_kernel_oserror *
OpenRead(int acn,FSEntry_Open_Parameter *parm)
{
  _kernel_oserror * err;
  int               fn;
  int               handle;

  debug_printf(db,"(6) OpenRead (%d)",parm->open_definition.handle);

  err=findpath(acn,arcpath,&fn,0);
  if(!err && fn>=0)
  {
    if(fn>=0)
    {
      err=readable(acn,fn);
      if(!err)
      {
        handle=parm->open_definition.handle;
        err=getnewfilehandle(acn,fn,0,&handle);
        if(!err)
          setopenparms(handle,parm,1,0);
      }
    }
    else
      parm->open_result.handle=0;
  }
  return(err);
}



_kernel_oserror *
OpenCreateUpdate(int acn,FSEntry_Open_Parameter *parm)
{
  _kernel_oserror * err;
  int               fn;
  int               ow;
  int               ind;
  int               handle;
  char            * tempname;
  fstat             stat;

  debug_printf(db,"(6) OpenCreateUpdate (%d)",parm->open_definition.handle);

  err=findins(acn,arcpath,&fn,&ow,&ind);
  if(!err)
  {
   if(fn>=0)
   {
    /* if !ow, have to create a file first */

    if(!ow)
    {
      getdeftime(&stat,DATA);
      tempname=leaf(arcpath);
      err=createfile(acn,tempname,fn,ow,ind,&stat);
    }
    else
      err=writeable(acn,fn);

    if(!err)
    {
      handle=parm->open_definition.handle;
      err=getnewfilehandle(acn,fn,1,&handle);
      if(!err)
        setopenparms(handle,parm,1,1);
    }
   }
   else
     parm->open_result.handle=0;
  }
  return(err);
}


/****************************************************************************/


_kernel_oserror *
CloseFile(FSEntry_Close_Parameter *parm)
{
  int handle;
  int fs;

  debug_printf(db,"(6) CloseFile (%d)",parm->handle);
  handle=parm->handle;
  fs=fmap[handle].file;

  /* arrghhh! only if file modded */

  if(fsmap[fs].cat.modded)
  {
    fsmap[fs].cat.load=(int)parm->info.load_exec.load_address;
    fsmap[fs].cat.exec=(int)parm->info.load_exec.execute_address;
  }

  return (closefilehandle(handle));
}


/*****************************************************************************/


_kernel_oserror *
GetBytes(FSEntry_GetBytes_Parameter *parm)
{
  _kernel_oserror * err;

/*   debug_printf(db,"(6) GetBytes"); */

  err=getbytes(parm->getbytes_definition.handle,
              parm->getbytes_definition.destination_start,
              parm->getbytes_definition.bytes_to_read,
              parm->getbytes_definition.file_offset_to_get_data_from);

  return(err);
}

/*****************************************************************************/


_kernel_oserror *
PutBytes(FSEntry_PutBytes_Parameter *parm)
{
  _kernel_oserror * err;

/*   debug_printf(db,"(6) PutBytes"); */

  err=putbytes(parm->handle,
              parm->source_start,
              parm->bytes_to_write,
              parm->file_offset_to_put_data_to);

 return(err);
}

/*****************************************************************************/

_kernel_oserror *
ReadSequentialFilePointer(FSEntry_Args_Parameter * parm)
{
/*   debug_printf(db,"(6) ReadSequentialFilePointer"); */

  parm->arg.sequential_pointer=fmap[parm->handle].pointer;

  return(NULL);
}

_kernel_oserror *
WriteSequentialFilePointer(FSEntry_Args_Parameter * parm)
{
  _kernel_oserror * err;

/*   debug_printf(db,"(6) WriteSequentialFilePointer"); */

  err=validextent(parm->handle,parm->arg.sequential_pointer,0);
  if(!err)
  {
    fmap[parm->handle].pointer=parm->arg.sequential_pointer;
  }

  return(err);
}

_kernel_oserror *
ReadFileExtent(FSEntry_Args_Parameter * parm)
{
/*   debug_printf(db,"(6) ReadFileExtent"); */

  parm->arg.extent=fsmap[fmap[parm->handle].file].cat.length;

  return(NULL);
}

_kernel_oserror *
WriteFileExtent(FSEntry_Args_Parameter * parm)
{
  _kernel_oserror * err;
  int fs;
  int extent;
  int handle;

  handle=parm->handle;
  fs=fmap[handle].file;
  extent=parm->arg.extent;

/*   debug_printf(db,"(6) WriteFileExtent"); */

  err=validextent(handle,extent,1);

  if(!err)
  {
    if(fmap[handle].pointer>extent)
      fmap[handle].pointer=extent;
  }

  return(err);
}

_kernel_oserror *
ReadSizeAllocatedToFile(FSEntry_Args_Parameter * parm)
{
/*   debug_printf(db,"(6) ReadSizeAllocatedToFile"); */

  parm->arg.extent=fsmap[fmap[parm->handle].file].cat.alloc;

  return(NULL);
}



_kernel_oserror *
EOFCheck(FSEntry_Args_Parameter * parm)
{
  int handle;

/*   debug_printf(db,"(6) EOFCheck"); */
  handle=parm->handle;

  if(fsmap[fmap[handle].file].cat.length==fmap[handle].pointer)
    parm->arg.EOF_Has_Been_Reached=Yes;
  else
    parm->arg.EOF_Has_Been_Reached=No;

  return(NULL);
}



_kernel_oserror *
FlushFileBuffer(FSEntry_Args_Parameter * parm)
{
  int handle;

  handle=parm->handle;

  parm->arg.info.load_exec.load_address=
                             (char*)fsmap[fmap[handle].file].cat.load;
  parm->arg.info.load_exec.execute_address=
                             (char*)fsmap[fmap[handle].file].cat.exec;

  return(NULL);
}


_kernel_oserror *
EnsureFileSize(FSEntry_Args_Parameter * parm)
{
  _kernel_oserror * err;

/*   debug_printf(db,"(7) EnsureFileSize"); */

  err=validextent(parm->handle,parm->arg.extent,0);
  if(!err)
    parm->arg.extent=fsmap[fmap[parm->handle].file].cat.length;

  return(err);
}



#define ZLEN 256

_kernel_oserror *
WriteZerosToFile(FSEntry_Args_Parameter * parm)
{
  _kernel_oserror * err;
  int               times;
  int               rem;
  int               i;
  int               offset;
  char              temp[ZLEN];

  offset=parm->arg.write_zeros.start;

/*   debug_printf(db,"(7) WriteZerosToFile"); */

  err=validextent(parm->handle,offset+parm->arg.write_zeros.number,0);
  if(!err)
  {
    memset(temp,0,ZLEN);

    times=parm->arg.write_zeros.number/ZLEN;
    rem=parm->arg.write_zeros.number%ZLEN;

    for(i=0;i<times;i++)
    {
      putbytes(parm->handle,temp,ZLEN,offset);
      offset+=ZLEN;
    }

    if(rem)
      putbytes(parm->handle,temp,rem,offset);
  }

  return(err);
}


_kernel_oserror *
ReadFileDateStamp(FSEntry_Args_Parameter * parm)
{
  int handle;

  handle=parm->handle;

  parm->arg.info.load_exec.load_address=
                               (char*)fsmap[fmap[handle].file].cat.load;
  parm->arg.info.load_exec.execute_address=
                               (char*)fsmap[fmap[handle].file].cat.exec;

  return(NULL);
}


