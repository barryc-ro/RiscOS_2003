/*->c.open */


#include <stdio.h>
#include <stdlib.h>


#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.str"
#include "h.csfserr"
#include "h.fs"
#include "h.mem"
#include "h.sfs"
#include "h.arcs"
#include "h.sff"
#include "h.sfi"



static _kernel_oserror *  formpath(FSEntry_Open_Parameter * parm,
                                                 int contents,int * acn)
{
 return(makepath(parm->open_definition.filename,
                 parm->open_definition.special.special_field,contents,acn));
}





_kernel_oserror *fsentry_open(FSEntry_Open_Parameter *parm)
{
 _kernel_oserror *err;
 int              acn;

#ifdef DODEBUG
 deb("open reason=%d ",parm->open_definition.reason);
#endif

 err=memcheck();
 if(!err)
 {
  err=formpath(parm,0,&acn);
  if(!err)
  {
   {
    switch(parm->open_definition.reason)
    {
     case       FSEntry_Open_Reason_Update:
                                        err=OpenUpdate(acn,parm);
                                        break;

     case     FSEntry_Open_Reason_OpenRead:
                                        err=OpenRead(acn,parm);
                                        break;

     case FSEntry_Open_Reason_CreateUpdate:
                                        err=OpenCreateUpdate(acn,parm);
                                        break;

                                default:
                                        err=geterror(err_BadParameters);
                                        break;
    }
   }
  }
 }
 return(err);
}



