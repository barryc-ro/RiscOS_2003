/*->c.mem */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>

#include "kernel.h"
#include "swis.h"
#include "consts.h"
#include "etc.h"
#include "csfserr.h"

#include "flex.h"

#include "mem.h"

/*****************************************************************************/

#define SPHEADS 44
#define SPBLOCK 32
#define CBLOCK  16

static int pagechunk;
static int nchunks;

static void 
getpagesize(void)
{
  _kernel_swi_regs rx;

  _kernel_swi(OS_ReadMemMapInfo, &rx, &rx);

  /* return r0 page size in bytes, r1 no of pages */

  pagechunk = rx.r[0];
  nchunks = rx.r[1];
}

/************************************************************************/
/* dynamic memory areas */

static int dynamicnumber;

_kernel_oserror *
dynamicrenumber(_kernel_swi_regs * rx)
{

  if (rx->r[2] == dynamicnumber)
    dynamicnumber = rx->r[3];

  return (NULL);
}

static _kernel_oserror *
trashdynamic(void)
{
  _kernel_oserror *err;
  _kernel_swi_regs rx;

  rx.r[0] = 1;
  rx.r[1] = dynamicnumber;

  err = _kernel_swi(OS_DynamicArea, &rx, &rx);

  return (err);
}

static _kernel_oserror *
createdynamic(void)
{
  _kernel_oserror *err;
  _kernel_swi_regs rx;

  rx.r[0] = 0;
  rx.r[1] = -1;
  rx.r[2] = 0;
  rx.r[3] = -1;
  rx.r[4] = (1 << 7);
  rx.r[5] = -1;
  rx.r[6] = 0;
  rx.r[7] = 0;
  rx.r[8] = (int) "CSFS";

  err = _kernel_swi(OS_DynamicArea, &rx, &rx);

  dynamicnumber = rx.r[1];

  return (err);
}

static _kernel_oserror *
finddynamic(int **p)
{
  _kernel_oserror *err;
  _kernel_swi_regs rx;

  rx.r[0] = 2;
  rx.r[1] = dynamicnumber;

  err = _kernel_swi(OS_DynamicArea, &rx, &rx);

  *p = (int *) rx.r[3];

  return (err);
}

static _kernel_oserror *
setdynamicsize(int *p, int size)
{
  _kernel_oserror *err;
  _kernel_swi_regs rx;
  int oldsize;
  int change;

  rx.r[0] = 2;
  rx.r[1] = dynamicnumber;

  err = _kernel_swi(OS_DynamicArea, &rx, &rx);

  oldsize = rx.r[2];

  oldsize = (oldsize + (pagechunk - 1)) / pagechunk;
  size = (size + (pagechunk - 1)) / pagechunk;

  change = (size - oldsize) * pagechunk;

  rx.r[0] = dynamicnumber;
  rx.r[1] = change;

  err = _kernel_swi(OS_ChangeDynamicArea, &rx, &rx);
  
  return (err);

  p = p;
}

static int 
dynamicsize(int *p)
{
  _kernel_oserror *err;
  _kernel_swi_regs rx;
  int size;

  rx.r[0] = 2;
  rx.r[1] = dynamicnumber;

  err = _kernel_swi(OS_DynamicArea, &rx, &rx);

  size = rx.r[2];

  return (size);

  p = p;
}

/****************************************************************************/

static int memmin;		/* max memory */
static int memmax;		/* min memory */
static int *sploc;

void 
memfinish(void)
{
  trashdynamic();
}

_kernel_oserror *
meminit(void)
{
  _kernel_oserror *err;

  getpagesize();

  memmin = 0;
  memmax = 0x40000;
  err = createdynamic();
  if (!err)
  {
    err = finddynamic(&sploc);
    if (!err)
    {
      flex_init((char *) sploc, 0);
    }
  }

  return (err);
}

/* called whenever we re-enter the FS to see if our memory is OK */

_kernel_oserror *
memcheck(void)
{
  _kernel_oserror *err;
  int *p;

  err = finddynamic(&p);
  if (!err)
  {
    if (p != sploc)
    {
      if (!flex_reloc((char *) p))
	err = geterror(err_MemoryCorrupt);
      sploc = p;
    }
  }
  else
    err = NULL;

  return (err);
}

int 
memextend(int n)
{
  _kernel_oserror *err;
  int *p;
  int size;

  err = finddynamic(&p);
  if (!err)
  {
    size = flex_max() + n;
    if (size > memmax)
      return (0);
    err = setdynamicsize(p, size);
    if (err)
      return (0);
    else
    {
      flex_newmax((char *) p, dynamicsize(p));
      return (1);
    }
  }
  else
    return (0);
}

void 
memcontract(void)
{
  _kernel_oserror *err;
  int max;
  int inuse;
  int *p;

  max = flex_max();
  inuse = flex_inuse();
  if (inuse < memmin)
    inuse = memmin;

  if (((max - inuse) > pagechunk) || inuse > max)
  {
    err = finddynamic(&p);
    if (!err)
    {
      setdynamicsize(p, inuse);
      if (!err)
      {
	flex_newmax((char *) p, dynamicsize(p));
      }
    }
  }
}

