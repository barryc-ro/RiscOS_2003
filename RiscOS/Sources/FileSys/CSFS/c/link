/*->c.link */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"
#include "h.xstr"

#include "h.str"
#include "h.etc"
#include "h.scrap"
#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.cat"
#include "h.fx"

#include "h.mount"


#include "h.serx"
#include "h.link"




/*****************************************************************************/



/*
 * this routine is called twice, once with dest set and a bad fs and once
 * with dest NULL and a good fs potential bug, is to assume you have a
 * good fs, when dest is set
 */
_kernel_oserror *
loadarcfile(int acn, int fn, int fs, char *dest)
{
  _kernel_oserror * err=NULL;
  char            * scrap_filename;
  int               sh;
  heads             hdr;
  int               changed;
  int               changedlength;
  int               sn;

  debug_printf(db,"(7) loadarcfile (%d)",fs);

  changed=changedlength=0;

  /*
   * if we don't have a scrap file, create it
   */
  if(!arc[acn].hdr[fn].sn)
  {
    err=sc_create(&sn);
    arc[acn].hdr[fn].sn=sn;
    if(!dest)
      fsmap[fs].cat.sn=sn;
  }

  /*
   * see if scrap file exists
   */
  scrap_filename=sc_name(arc[acn].hdr[fn].sn);
  if(!fexists(scrap_filename,NULL))
  {
    /*
     * fetch file
     */
    hdr=arc[acn].hdr[fn];
    err=servicegetfile(acn,fn,0,NULL);
    if(!err)
    {
      changedlength=(arc[acn].hdr[fn].length!=hdr.length);
      changed=arc[acn].hdr[fn].load!=hdr.load ||
              arc[acn].hdr[fn].exec!=hdr.exec ||
              arc[acn].hdr[fn].acc!=hdr.acc   || changedlength;
    }
  }

  /*
   * remove scrap file in case of error
   */
  if(err)
    removesn(acn,fn);
  else
  {
    /*
     * signal world that things have changed
     */
    if(changed)
      updatefileupcall(acn,fn);

    scrap_filename=sc_name(arc[acn].hdr[fn].sn);

    if(dest)
    {
      err=loadblock(scrap_filename,dest);
    }
    else
    {
      int attrib=0;
      fexists(scrap_filename,&attrib); /* find attributes */
      if (attrib & LOCK)
      {
        err = fs_lock(scrap_filename, DEFATT);
        fsmap[fs].cat.was_locked = 1;
      }
      else
        fsmap[fs].cat.was_locked = 0;
        

      if(!err)
      {
        err=open(scrap_filename,'u',&sh);
        if (!err)
        {
          fsmap[fs].cat.state=OPENDISC; /* change state */
          fsmap[fs].cat.sh=sh;	      /* note scrap handle */
        }
      }
    }
  }

  return(err);
}

/*
 * copy contents of stat structure to header array
 */
static _kernel_oserror *
stattohdr(int acn, int fn, fstat *stat, char * name)
{
  _kernel_oserror * err=NULL;
  int               s;
  heads           * hdr;

  hdr=&arc[acn].hdr[fn];

  hdr->load=stat->load;
  hdr->exec=stat->exec;
  hdr->acc =stat->acc;
  hdr->length=stat->length;
  hdr->dirn=DNFILE;
  hdr->fshandle=0;

  if(name)
  {
    s=hdr->name;
    if(s<=0)
    {
       err=createstring(name,&s);
       if(!err)
         arc[acn].hdr[fn].name=s; /* NB hdr-> probably moved now */
    }
    else
      err=assignstring(s,name);
  }

  return(err);
}




_kernel_oserror *
savearcfile(int acn, fstat *stat, char * name, int ins,
           int ind,int ow,int fs,char * ostart)
{
  _kernel_oserror * err=NULL;
  int               sn;

  debug_printf(db,"(7) savearcfile");

  if(ostart)
  {
    if(ow)
      sn=arc[acn].hdr[ins].sn;
    else
      err=sc_create(&sn);
  }
  else
  {
    if(ow)           /* don't think this can ever happen */
      if(arc[acn].hdr[ins].sn!=fsmap[fs].cat.sn)
        sc_remove(arc[acn].hdr[ins].sn,NULL);
    sn=fsmap[fs].cat.sn;
  }


  if(!err)
  {
    if(ostart)
    {
      fs_lock(sc_name(sn),DEFATT);
      saveblock(sc_name(sn),DATA,ostart,stat->length);
    }

    /* else the file already exists */
  }

  if(!err)
  {
    if(!ow)
      err=insentry(acn,ins,ind,1);

    err=stattohdr(acn,ins,stat,name);
    arc[acn].hdr[ins].fshandle=fs;
    arc[acn].hdr[ins].sn=sn;

    if(!err)
    {
      if(!arc[acn].writecache)
      {
        debug_printf(db,"(7) putting file on server");
        err=serviceputfile(acn,ins,0,NULL);
      }
      else
      {
        debug_printf(db,"(7)  not putting file on server, writecached");
        arc[acn].hdr[ins].writecache=1;
        fs_lock(sc_name(arc[acn].hdr[ins].sn),DEFATT|LOCK);
      }
    }
  }

  return(err);
}

/*
 */
_kernel_oserror *
createfilex(int acn,fstat * stat, char * name,int ins,int ind,int ow)
{
  _kernel_oserror * err=NULL;
  int               sn;

  debug_printf(db,"(7) createfilex %s",name);

  if(!ow || !arc[acn].hdr[ins].sn)
    err=sc_create(&sn);
  else
  {
    sn=arc[acn].hdr[ins].sn;
    fs_lock(sc_name(sn),DEFATT);
  }

  err=fs_create(sc_name(sn),stat->length,DATA);

  if(!err)
  {
    if(!ow)
      err=insentry(acn,ins,ind,1);
    err=stattohdr(acn,ins,stat,name);
    arc[acn].hdr[ins].sn=sn;
    if(!err)
    {
      if(!arc[acn].writecache)
      {
        if(arc[acn].hdr[ins].load!=0xdeaddead&&
           arc[acn].hdr[ins].exec!=0xdeaddead)
        {
          debug_printf(db,"(7) create file on server");
          err=serviceputfile(acn,ins,0,NULL);
        }
      }
      else
      {
        debug_printf(db,"(7) not creating on server mount writecached");
        arc[acn].hdr[ins].writecache=1;
      }
    }
  }

  return(err);
}


_kernel_oserror * createdirx(int acn,fstat * stat,char * name,
                                                  int ins,int ind,int ow)
{
 _kernel_oserror * err;

 err=NULL;

 if(!ow) err=insentry(acn,ins,ind,1);
 err=stattohdr(acn,ins,stat,name);
 if(!err)
 {
  arc[acn].hdr[ins].dirn=0;

  if(!arc[acn].writecache) err=servicemkdir(acn,ins);
  else                     arc[acn].hdr[ins].writecache=1;
 }

 return(err);
}





/* update given catalogue entry */

_kernel_oserror * updatecat(int acn,int fn,fstat * fx)
{
 _kernel_oserror * err=NULL;
 settype_info      type;

 type.old=filetype(arc[acn].hdr[fn].load);
 type.new=filetype(fx->load);

 if (!arc[acn].writecache)
   if (type.new!=type.old && type.old!=-1 && type.new!=-1)
     err=serviceupdate(acn,fn,&type);

 if(!err)
 {
  arc[acn].hdr[fn].load=fx->load;
  arc[acn].hdr[fn].exec=fx->exec;
  arc[acn].hdr[fn].acc=fx->acc;
 }

 return(err);
}





_kernel_oserror * deletefilex(int acn,int fn)
{
 _kernel_oserror * err;
 char            * p;

 err=NULL;

 if(arc[acn].hdr[fn].sn)
 {
  p=sc_name(arc[acn].hdr[fn].sn);
  if(fexists(p,NULL))
  {
   fs_lock(p,DEFATT);
   err=delete(p);
  }

  if(!err)
  {
   err=sc_remove(arc[acn].hdr[fn].sn,NULL);
   arc[acn].hdr[fn].sn=0;
  }
 }

 if(!err)
 {
  if(!arc[acn].writecache) err=servicedelete(acn,fn);
  else                     arc[acn].hdr[fn].writecache=1;
 }

 if(!err)
 {
  rmstring(arc[acn].hdr[fn].name);
  rementry(&arc[acn],fn,1);
 }

 return(err);
}




_kernel_oserror *
renamex(int acn,int fn1,int fn2,int ind,int size,char * name)
{
  _kernel_oserror * err;
  int               i;
  int               s;

  /* problem here is renaming a file from one directory to another, whilst
     its position in the archive does not change.
     e.g. !MyApp() !Run => !MyApp(!Run). */

  err=insentry(acn,fn2,ind,size);
  if(fn2<=fn1) fn1+=size;

  for(i=0;i<size;i++)
    arc[acn].hdr[fn2+i]=arc[acn].hdr[fn1+i];

  err=createstring(name,&s);
  if(!err)
    arc[acn].hdr[fn2].name=s;

  /*
   * only rename on server is not writecached
   */
  if(!arc[acn].writecache)
    err=servicerename(acn,fn1,fn2);

  if(!err)
  {
    rmstring(arc[acn].hdr[fn1].name);
    rementry(&arc[acn],fn1,size);
    if(fn2>fn1)
      fn2-=size;
  }
  else
  {
    rmstring(arc[acn].hdr[fn2].name);
    rementry(&arc[acn],fn2,size);
  }

  return(err);
}





/* load archive cat into arcs structure */

_kernel_oserror * loadarchive(int arcn)
{
 _kernel_oserror * err;

 err=serviceload(arcn);

 return(err);
}

_kernel_oserror *
diropen(int acn, int ind)
{
  if(ind>-1 && arc[acn].hdr[ind].dirn==DFLAT)
    return(serviceopendir(acn,ind));

  return (NULL);
}


