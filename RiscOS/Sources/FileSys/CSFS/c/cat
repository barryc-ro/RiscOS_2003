/*->c.cat */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"

#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.fx"




#include "h.cat"


/*****************************************************************************/


int posn[32];
int lno[32];
int fpos[32];



/* return the parent of this dir */
/* or -1 if none                 */

int parentof(archive * arc,int child)
{
 int i,pn,ln,level,in,n;

 if(!child) return(-1);

 pn=0;
 level=1;
 ln=arc->fmain;
 in=0;
 n=0;

 while(level)
 {
  for(i=in;i<ln;i++)
  {
   if(n==child)
   {
    if(level>1) return(pn);
    else        return(-1);
   }
   else
   if(n>child)  return(-1);


   if(arc->hdr[n].dirn>=0)
   {
    posn[level]=pn;
    lno[level]=ln;
    fpos[level]=i;
    pn=n;
    i=0;
    in=0;
    ln=arc->hdr[pn].dirn+1;
    level++;
   }
   n++;
  }

  level--;
  if(level)
  {
   pn=posn[level];
   ln=lno[level];
   in=fpos[level]+1;
  }
 }
 return(-1);
}







/* returns the number of files in this directory                   */
/* which means the total number including those in sub directories */
/* but does not count the directory as an entry                    */

int noindir(int acn,int posn)
{
 int p,i,n,x;

 n=0;
 p=posn;
 for(i=0;i<arc[acn].hdr[posn].dirn;i++)
 {
  n++;
  p++;
  if(arc[acn].hdr[p].dirn>=0)
  {
   x=noindir(acn,p);
   p+=x;
   n+=x;
  }
 }
 return(n);
}



/****************************************************************************/


_kernel_oserror * setnofiles(int acn,int n)
{
 _kernel_oserror * err;

/* printf("setnofiles %d %d\n",acn,n); */

 n=(n+MINENTRY)*sizeof(heads);

 if(!arc[acn].hdr) err=flex_alloc((flex_ptr)&arc[acn].hdr,n);
 else              err=flex_extend((flex_ptr)&arc[acn].hdr,n);

/* if(err) printf("setnofiles err\n"); */

 return(err);
}



_kernel_oserror * insentry(int acn,int fn,int ind,int size)
{
 _kernel_oserror * err;
 int i;

/* printf("ins %d %d %d %d\n",acn,fn,ind,size); */

 err=setnofiles(acn,arc[acn].nofiles+size);

 if(!err)
 {
  if(ind<0) arc[acn].fmain++;
  else      arc[acn].hdr[ind].dirn++;

  arc[acn].nofiles+=size;
  for(i=arc[acn].nofiles-1;i>=(fn+size);i--) 
  {
   arc[acn].hdr[i]=arc[acn].hdr[i-size];
  }
  memset(&arc[acn].hdr[fn],0,sizeof(heads)*size);
 }

 return(err);
}




void rementry(archive * arc,int fn,int size)
{
 int n;
 int i;

 n=parentof(arc,fn);

 if(n<0) arc->fmain--;
 else    arc->hdr[n].dirn--;

 arc->nofiles-=size;
 for(i=fn;i<arc->nofiles;i++) arc->hdr[i]=arc->hdr[i+size];
}




