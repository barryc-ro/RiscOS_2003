/*->c.serx */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"
#include "h.xstr"

#include "h.str"
#include "h.etc"
#include "h.scrap"
#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.cat"
#include "h.fx"
#include "h.dir"

#include "h.csfs"

#include "h.link"
#include "h.serx"
#include "h.service"



static _kernel_oserror * getint(char ** pp,int * lop,int * hip)
{
 char * p;
 int    lo;
 int    hi;
 int    c;

 p=*pp;

 if(*p)
 {
  lo=hi=0;

  while(1)
  {
   c=toupper(*p++);
   if(c=='X')
     lo=0;
   else
   {
     if(c<' ') break;

     if(c>='0' && c<='9') c=c-'0';
     else
     if(c>='A' && c<='F') c=10+c-'A';
     else break;

     hi=(hi<<4)|((lo>>28) & 0xF);
     lo=(lo<<4)|c;
   }
  }
  *pp=p;
  if(lop) *lop=lo;
  if(hip) *hip=hi;
 }

 return(NULL);
}









static _kernel_oserror * getstat(fstat * f,char ** pp,char ** name,int * nlen)
{
 _kernel_oserror * err;
 char            * p;


 err=NULL;

 *name=0;
 memset(f,0,sizeof(fstat));
 p=*pp;

 while(*p)
 {
  if(*p=='#')
  {
   while(*p++>=' ');
  }
  else
  {
   *name=p;
   while(1)
   {
    if(*p++<=' ')
    {
     *(p-1)=0;
     *nlen=p-(*name);
     break;
    }                                                                              }

   err=getint(&p,&f->length,NULL);
   err=getint(&p,&f->acc,NULL);
   err=getint(&p,&f->object,NULL);
   err=getint(&p,&f->load,NULL);
   err=getint(&p,&f->exec,NULL);

   break;
  }
 }

 *pp=p;

 return(err);
}




#define HCHUNK (16*sizeof(heads))



typedef _kernel_oserror * (*insertfn)(int acn,int ind,int fn,heads ** base);



static _kernel_oserror * serviceopendirsub(int acn,int ind,int * fnp,
                                                heads ** base,insertfn insfn)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               sh;
 fstat             f;
 fstat             f1;
 char            * buffer;
 char            * p;
 int               session;
 int               fn;
 int               n;
 int               m;
 char            * name;
 int               nlen;
 int               s;

 err=filepath(arcpath,acn,ind);

 debug_printf(db,"(7) serviceopendirsub %s",arcpath);

 if(!err)
 {
  err=sc_create(&sh);
  if(!err)
  {
   err=opensession(acn,CSFS_GET,arcpath,sc_name(sh),&session,NULL);
   if(!err)
   {
    err=runsession(acn,session,NULL);
    err=closesession(acn,session,err);

    if(!err)
    {
     err=stat(sc_name(sh),&f1);
     if(!err && f1.object)
     {
      err=flex_alloc((flex_ptr)&buffer,f1.length+1);
      if(!err)
      {
       err=loadblock(sc_name(sh),buffer);
       if(!err)
       {
        buffer[f1.length]=0;
        fn=*fnp;
        n=0;
        while(n<f1.length)
        {
         p=buffer+n;
         err=getstat(&f,&p,&name,&nlen);
         n=p-buffer;
         m=name-buffer;

         if(err) break;
         if(!f.object) break;

         err=insfn(acn,ind,fn,base);
         if(err) break;

         err=mkstring(nlen,&s);
         if(err) break;

         strcpy(stringptr(s),buffer+m);
         (*base)[fn].name=s;

         (*base)[fn].dirn=(f.object==1)?DNFILE:DFLAT;
         (*base)[fn].load=f.load;
         (*base)[fn].exec=f.exec;
         (*base)[fn].acc =f.acc;
         (*base)[fn].length=f.length;

         fn++;
        }
        *fnp=fn;

       }
       flex_free((flex_ptr)&buffer);
      }
     }
    }
    delete(sc_name(sh));
   }
   err=sc_remove(sh,err);
  }
 }

 return(err);
}





/*
 * get the contents of directory specified by ind and fill into a temp
 * buffer.
 */

static _kernel_oserror * getdirfn(int acn,int ind,int fn,heads ** base)
{
 _kernel_oserror * err;
 if(!*base) err=flex_alloc((flex_ptr)base,HCHUNK);
 else       err=flex_chunk((flex_ptr)base,sizeof(heads)*(fn+1),HCHUNK);
 if(!err)   memset((*base)+fn,0,sizeof(heads));
 return(err);
 USE(acn);
 USE(ind);
}


_kernel_oserror * servicegetdir(int acn,int ind,heads ** hdr,int * size)
{
 *hdr=NULL;
 *size=0;
 return(serviceopendirsub(acn,ind,size,hdr,getdirfn));
}


/*
 * get the contents of directory specified by ind and insert entries into
 * the main file header structure.
 */


static _kernel_oserror * opendirfn(int acn,int ind,int fn,heads ** base)
{
 return(insentry(acn,fn,ind,1));
 USE(base);
}


_kernel_oserror * serviceopendir(int acn,int ind)
{
 _kernel_oserror * err;

 int fn;
 if(ind>=0) arc[acn].hdr[ind].dirn=0;
 fn=ind+1;                    /* nb is OK for fmain == -1 */
 err=serviceopendirsub(acn,ind,&fn,&arc[acn].hdr,opendirfn);

 if(ind>=0 && err) arc[acn].hdr[ind].dirn=DFLAT;

 return(err);
}





_kernel_oserror * serviceload(int acn)
{
 _kernel_oserror * err;
 err=serviceopendir(acn,-1);
 return(err);
}





_kernel_oserror *
servicegetfile(int acn,int fn, unsigned int total, unsigned int *sofar)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               session;
 csfs_info         file_info;
 int 		   size;

 err=filepath(arcpath,acn,fn);

 debug_printf(db,"(7) get file %s",arcpath);

 if(!err)
 {
  file_info.load_addr = arc[acn].hdr[fn].load;
  file_info.exec_addr = arc[acn].hdr[fn].exec;
  file_info.file_attr = arc[acn].hdr[fn].acc;
  err=opensession(acn,CSFS_GET,arcpath,sc_name(arc[acn].hdr[fn].sn),
                                               &session,(void*)&file_info);
  if(!err)
  {
    switch (total)
    {
      case 0 :
        err=runsession(acn,session,&size);
        break;
      default :
        err=runsession_progress(acn,session,total,sofar,&size);
    }
    debug_printf(db,"(7) file size now %d",size);
    arc[acn].hdr[fn].length = size;
    err=closesession(acn,session,err);
  }
 }

 return(err);
}



_kernel_oserror *
serviceputfile(int acn,int fn,unsigned int total, unsigned int *sofar)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               session;
 csfs_info         file_info;

 err=filepath(arcpath,acn,fn);

 debug_printf(db,"(7) put file %s",arcpath);

 if(!err)
 {
  file_info.load_addr = arc[acn].hdr[fn].load;
  file_info.exec_addr = arc[acn].hdr[fn].exec;
  file_info.file_attr = arc[acn].hdr[fn].acc;
  err=opensession(acn,CSFS_PUT,arcpath,sc_name(arc[acn].hdr[fn].sn),
                                       &session,(void*)&file_info);
  if(!err)
  {
    switch (total)
    {
      case 0 :
        err=runsession(acn,session,NULL);
        break;
      default :
        err=runsession_progress(acn,session,total,sofar,NULL);
    }
    err=closesession(acn,session,err);
  }
 }
 debug_printf(db,"(7) put file complete");

 return(err);
}


_kernel_oserror * servicemkdir(int acn,int fn)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               session;

 err=filepath(arcpath,acn,fn);

 debug_printf(db,"(7) servicemkfile %s",arcpath);

 if(!err)
 {
  err=opensession(acn,CSFS_MKDIR,arcpath,sc_name(arc[acn].hdr[fn].sn),
                                                        &session,NULL);
  if(!err)
  {
   err=runsession(acn,session,NULL);
   err=closesession(acn,session,err);
  }
 }

 return(err);
}



_kernel_oserror * serviceupdate(int acn,int fn,settype_info * type)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               session;

 err=filepath(arcpath,acn,fn);

 debug_printf(db,"(7) serviceupdate %s",arcpath);

 if(!err)
 {
  err=opensession(acn,CSFS_SETTYPE,arcpath,NULL,&session,(void*)type);
  if(!err)
  {
   err=runsession(acn,session,NULL);
   err=closesession(acn,session,err);
  }
 }

 return(err);
}



_kernel_oserror * servicedelete(int acn,int fn)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];
 int               session;

 err=filepath(arcpath,acn,fn);

 debug_printf(db,"(7) servicedelete %s",arcpath);

 if(!err)
 {
   if (arc[acn].hdr[fn].dirn==DNFILE)
   {
     csfs_info file_info;
     /*
      * need more file info for a file delete
      */
     file_info.load_addr = arc[acn].hdr[fn].load;
     file_info.exec_addr = arc[acn].hdr[fn].exec;
     file_info.file_attr = arc[acn].hdr[fn].acc;

     err=opensession(acn,CSFS_DELETE,arcpath,NULL,&session,(void*)&file_info);
   }
   else
     err=opensession(acn,CSFS_RMDIR, arcpath,NULL,&session,NULL);

   if(!err)
   {
     err=runsession(acn,session,NULL);
     err=closesession(acn,session,err);
   }
 }

 return(err);
}



_kernel_oserror * servicerename(int acn,int fn1,int fn2)
{
 _kernel_oserror * err;
 char              oldname[NAMELEN];
 char              newname[NAMELEN];
 int               session;
 int               features;
 csfs_info         file_info;

          err=filepath(oldname,acn,fn1);
 if(!err) err=filepath(newname,acn,fn2);

 debug_printf(db,"(7) servicerename %s",arcpath);

 file_info.load_addr = arc[acn].hdr[fn1].load;
 file_info.exec_addr = arc[acn].hdr[fn1].exec;
 file_info.file_attr = arc[acn].hdr[fn1].acc;

 if(!err)
 {
  features=servicefeatures(acn);
  if(!(features & CSFS_RENAMESUPPORTED) &&
      (features & CSFS_COPYSUPPORTED) &&
      (features & CSFS_DELETESUPPORTED))
  {

   err=opensession(acn,CSFS_COPY,oldname,newname,&session,(void*)&file_info);
   if(!err)
   {
    err=runsession(acn,session,NULL);
    err=closesession(acn,session,err);
   }

   if(!err)
   {
    err=opensession(acn,CSFS_DELETE,oldname,NULL,&session,(void*)&file_info);
    if(!err)
    {
     err=runsession(acn,session,NULL);
     err=closesession(acn,session,err);
    }
   }
  }
  else
  {
   err=opensession(acn,CSFS_RENAME,oldname,newname,&session,(void*)&file_info);
   if(!err)
   {
    err=runsession(acn,session,NULL);
    err=closesession(acn,session,err);
   }
  }
 }

 return(err);
}


