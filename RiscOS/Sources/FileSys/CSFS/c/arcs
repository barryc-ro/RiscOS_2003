/*->c.arcs */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"
#include "h.etc"
#include "h.scrap"
#include "h.xstr"

#include "h.fs"
#include "h.sfs"
#include "h.fx"
#include "h.cat"
#include "h.link"




#include "h.arcs"


/*****************************************************************************/

archive * arc;
int       maxarc;


#define ARCCHUNK (8*sizeof(archive))


static void initbuffer(int i)
{
 memset(&arc[i],0,sizeof(archive));
 arc[i].inuse=1;
}



_kernel_oserror * arcsinit(void)
{
 _kernel_oserror * err;

 err=flex_alloc((flex_ptr)&arc,ARCCHUNK);
 if(!err)
 {
  initbuffer(ROOTN);
  arc[ROOTN].ro=1;
  maxarc++;
 }

 return(err);
}



_kernel_oserror * getarchandle(int * arcn)
{
 _kernel_oserror * err;
 int               i;

 for(i=0;i<maxarc;i++)
 {
  if(!arc[i].inuse)
  {
   *arcn=i;
   initbuffer(i);
   return(NULL);
  }
 }

 err=flex_chunk((flex_ptr)&arc,(maxarc+1)*sizeof(archive),ARCCHUNK);
 if(!err)
 {
  *arcn=maxarc;
  initbuffer(maxarc);
  maxarc++;
 }

 return(err);
}




_kernel_oserror * gethandle(char * name,int * arcn)
{
 _kernel_oserror * err;
 int               i;

 err=NULL;

/* printf("gethandle path %s\n",name); */

 *arcn=-1;

 if(!*name) *arcn=0;
 else
 {
  for(i=0;i<maxarc;i++)
  {
   if(arc[i].inuse)
   {
   /* printf("name %s %s \n",arc[i].name,name); */

    if(!cstrcmp(stringptr(arc[i].name),name))
    {
     *arcn=i;
    /* printf("found\n"); */
    }
   }
  }
 }

 if(*arcn<0) err=&mb_sfserr_FileNotFound;  /* Not found */

 return(err);
}





_kernel_oserror * gethostpath(char * host,unsigned long address,
                              char * path,char * user,int service,int * arcn)
{
 int               i;

 *arcn=-1;

 for(i=0;i<maxarc;i++)
 {
  if(arc[i].inuse)
  {
   if(!cstrcmp(stringptr(arc[i].hostname),host) || address==arc[i].address)
   {
    if(!strcmp(stringptr(arc[i].mountpath),path))
    {
     if(!strcmp(stringptr(arc[i].user),user))
     {
      if(service==arc[i].service)
      {
       *arcn=i;
       break;
      }
     }
    }
   }
  }
 }
 return(NULL);
}




_kernel_oserror * losearc(int acn)
{
 int i;

 for(i=0;i<arc[acn].nofiles;i++)
 {
  if(arc[acn].hdr[i].dirn==DNFILE &&
     arc[acn].hdr[i].sn)
  {
   fs_lock(sc_name(arc[acn].hdr[i].sn),DEFATT);
   delete(sc_name(arc[acn].hdr[i].sn));
   sc_remove(arc[acn].hdr[i].sn,NULL);
  }

  rmstring(arc[acn].hdr[i].name);
 }

 if(arc[acn].hdr) flex_free((flex_ptr)&arc[acn].hdr);

 rmstring(arc[acn].name);
 rmstring(arc[acn].hostname);
 rmstring(arc[acn].mountpath);
 rmstring(arc[acn].user);
 rmstring(arc[acn].pass);

 arc[acn].inuse=0;

 return(NULL);
}


