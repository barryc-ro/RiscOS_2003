/*->c.dir */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"

#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.cat"
#include "h.link"

#include "h.dir"


/*****************************************************************************/


/*
 * match:
 *  pattern matcher.  Takes a string and a pattern possibly containing
 *  the wildcard characters '*' and '?'.  Returns true if the pattern
 *  matches the string, false otherwise.
 * by: Jeff Damens, CUCCA
 *
 * Input: a string and a wildcard pattern.
 * Returns: 1 if match, 0 if no match.
 */


int match(char * pattern,char * string)
{
 char *psave,*ssave;           /* back up pointers for failure */
 psave = ssave = NULL;
 while(1)
 {
  for (; toupper(*pattern)==toupper(*string); pattern++,string++)
                                               /* skip first */
       if (*string == '\0') return(1);     /* end of strings, succeed */

       if (*string != '\0' && *pattern == '#')
       {
           pattern++;                  /* '#', let it match */
           string++;
       }
       else
       if (*pattern == '*')
       {   /* '*' ... */
           psave = ++pattern;          /* remember where we saw it */
           ssave = string;             /* let it match 0 chars */
       }
       else
       if (ssave != NULL && *ssave != '\0')
       {                               /* if not at end  */
                                       /* ...have seen a star */
           string = ++ssave;           /* skip 1 char from string */
           pattern = psave;            /* and back up pattern */

       }
       else
       {
           return(0);                  /* otherwise just fail */
       }
 }
}




static char obje[32][MNLEN];


static _kernel_oserror * parsepath(char * path,int * maxlevel)
{
 char * p;
 int    level;
 int    i;

 level=0;
 i=0;
 p=path;

 while(*p==':') p++;
 while(*p=='$') p++;
 while(*p=='.') p++;

 if(*p) level++;

 while(*p!=0)
 {
  if(*p=='.')
  {
   obje[level][i]=0;
   level++;
   i=0;
   p++;
  }
  else
   obje[level][i++]=*p++;
/*  if(i==16)    return(1); */
 }

 obje[level][i]=0;
 *maxlevel=level;

 return(NULL);
}



_kernel_oserror * findpath(int acn,char * path,int * dir,int start)
{
 int i;
 int pn;
 int ln;
 int in;
 int level;
 int n;
 int matched;
 int maxlevel;
 _kernel_oserror * err;


 err=parsepath(path,&maxlevel);
 if(err) return(err);

 if(maxlevel==0)   /* $ */
 {
  if(start>0) *dir=-2;
  else        *dir=-1;
  return(NULL);
 }

 level=1;
 pn=0;
 ln=arc[acn].fmain;
 in=0;
 n=0;

 while(level)
 {
  for(i=in;i<ln;i++)
  {
   matched=match(obje[level],arc[acn].hdr[n].name);

 /*
  deb("matched=%d obje=%s name=%s",matched,obje[level],arc[acn].hdr[n].name);
  */

   if(matched && level==maxlevel)
   {
    if(n>=start)
    {
     *dir=n;
     return(NULL);
    }
   }

   if((arc[acn].hdr[n].dirn>=0 || arc[acn].hdr[n].dirn==-2)
       && matched && level<maxlevel)
   {
    err=diropen(acn,n);
    if(err) return(err);

    posn[level]=pn;
    lno[level]=ln;
    fpos[level]=i;
    pn=n;
    i=0;
    in=0;
    ln=arc[acn].hdr[pn].dirn+1;
    level++;
    n++;
   }
   else
   if(arc[acn].hdr[n].dirn>=0)
   {
    n+=noindir(acn,n)+1;
   }
   else
    n++;
  }
  level--;
  if(level)
  {
   pn=posn[level];
   ln=lno[level];
   in=fpos[level]+1;
  }
 }

 *dir=-2;
 return(NULL);
}




/* find the directory in the archive */
/* return int offset of first file in dir in * dir */
/* return number of entries in n                   */

_kernel_oserror * finddir(int acn,char * path,int * dir,int * n)
{
 _kernel_oserror * err;


 err=findpath(acn,path,dir,0);

 if(!err)
 {
  if(*dir==-1)
  {
   *dir=0;
   *n=arc[acn].fmain;
  }
  else
  while(*dir>=0)
  {
   if(arc[acn].hdr[*dir].dirn>=0 || arc[acn].hdr[*dir].dirn==-2)
   {
    err=diropen(acn,*dir);
    if(err) break;

    *n=arc[acn].hdr[*dir].dirn;
    *dir=*dir+1;
    return(NULL);
   }
   findpath(acn,path,dir,*dir+1);
  }
 }

 return(err);
}



/* find the point in the archive to insert the object at */

_kernel_oserror * findins(int acn,char * path,int * ins,int * ow,int * ind)
{
 int i;
 int pn;
 int ln;
 int in;
 int level;
 int n;
 int matched;
 int maxlevel;
 _kernel_oserror * err;

 err=parsepath(path,&maxlevel);
 if(err) return(err);

 deb("findins path=%s",path);

 if(maxlevel==0)   /* $ */
 {
  *ow=1;
  *ins=-1;
  *ind=-1;
  return(NULL);
 }

 level=1;
 pn=-1;
 ln=arc[acn].fmain;
 in=0;
 n=0;

 while(level)
 {
  for(i=in;i<ln;i++)
  {
   if(level==maxlevel) /* can assume no wildcards */
   {
    matched=cstrcmp(obje[level],arc[acn].hdr[n].name);
    if(matched<=0)
    {
     *ow=!matched;
     *ins=n;
     *ind=pn;
     return(err);
    }
   }

   matched=match(obje[level],arc[acn].hdr[n].name);

   if((arc[acn].hdr[n].dirn>=0 || arc[acn].hdr[n].dirn==-2)
       && matched && level<maxlevel)
   {
    err=diropen(acn,n);
    if(err) return(err);

    posn[level]=pn;
    lno[level]=ln;
    fpos[level]=i;
    pn=n;
    i=0;
    in=0;
    ln=arc[acn].hdr[pn].dirn+1;
    level++;
    n++;
   }
   else
   if(arc[acn].hdr[n].dirn>=0)
   {
    n+=noindir(acn,n)+1;
   }
   else
    n++;
  }
                      /* insert at end of dir */
  if(level==maxlevel)
  {
   *ow=0;
   *ins=n;
   *ind=pn;
   return(err);
  }

  level--;
  if(level)
  {
   pn=posn[level];
   ln=lno[level];
   in=fpos[level]+1;
  }
 }
 err=&mb_sfserr_FileNotFound;
 return(err);
}




static _kernel_oserror * filepath1(char * arcpath,int acn,int ins)
{
 int    pn;
 int    level;
 int    ln;
 int    in;
 int    n;
 int    i;
 char * p;

 pn=0;
 level=1;
 ln=arc[acn].fmain;
 in=0;
 n=0;

/*  printf("CSFS: filepath1 starting with %s\n",arcpath); */

 p=arcpath+strlen(arcpath); /* point to end of current string */

 while(level)
 {
  for(i=in;i<ln;i++)
  {
/*    printf("CSFS:   searching %s\n",arc[acn].hdr[n].name); */
   if(arc[acn].hdr[n].dirn>=0)
   {
/*     printf("CSFS:    got a directory %d\n",n); */
    posn[level]=pn;
    lno[level]=ln;
    fpos[level]=i;
    pn=n;
    i=0;
    in=0;
    ln=arc[acn].hdr[pn].dirn+1;
    level++;
    posn[level]=pn;
   }
   if(n==ins) break;
   n++;
  }

  if(n==ins && i<ln) break;

  level--;
  if(level)
  {
   pn=posn[level];
   ln=lno[level];
   in=fpos[level]+1;
  }
 }

/*  printf("CSFS:    level = %d\n",level); */
 for(i=2;i<=level;i++)
 {
  strcpy(p,arc[acn].hdr[posn[i]].name);
  p+=strlen(arc[acn].hdr[posn[i]].name);
  *p++='.';
 }

 if(arc[acn].hdr[n].dirn==DNFILE || arc[acn].hdr[n].dirn==DFLAT)
   strcpy(p,arc[acn].hdr[ins].name);
 else
   *(p-1)=0;

/*  printf("CSFS: path=%s acn=%d ins=%d\n",arcpath,acn,ins); */

 return(NULL);
}



_kernel_oserror * filepath(char * arcpath,int acn,int ins)
{
 strcpy(arcpath,arc[acn].mountpath);
 if(ins>=0)
 {
  strcat(arcpath,".");
  return(filepath1(arcpath,acn,ins));
 }
 else
  return(NULL);
}


_kernel_oserror * filepathc(char * arcpath,int acn,int ins)
{
 strcpy(arcpath,"CSFS:$");
 if(ins>=0)
 {
  strcat(arcpath,".");
  return(filepath1(arcpath,acn,ins));
 }
 else
  return(NULL);
}



