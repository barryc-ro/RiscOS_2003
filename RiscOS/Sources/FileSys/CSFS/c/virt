/*->c.virt */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>


#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"

#include "h.str"

#include "h.fs"
#include "h.sfs"
#include "h.arcs"

#include "h.virt"



/*****************************************************************************/


int textwidth(void)
{
 _kernel_swi_regs rx;
 int input[2];
 int output[2];

 input[0]=0x100;
 input[1]=-1;

 rx.r[0]=(int)input;
 rx.r[1]=(int)output;

 _kernel_swi(OS_ReadVduVariables,&rx,&rx);

 return(output[0]);
}


#define VCHUNK 0x400

static char *  vblock;
static int     vabend;
static int     vptr;


void writevf(char * format, ...)
{
 va_list args;
 char v[256];
 int  n;


 if(!vabend)
 {
  va_start(args, format);
  n=vsprintf(v, format, args);

  if(!flex_chunk((flex_ptr)&vblock,n+vptr,VCHUNK))
  {
   memcpy(vblock+vptr,v,n);
   vptr+=n;
  }
  va_end(args);
 }
}




void startv(void)
{
 if(!flex_alloc((flex_ptr)&vblock,VCHUNK))
 {
  vptr=0;
  vabend=0;
 }
 else
  vabend=1;
}




void endv(void)
{
 int i;

 if(!vabend)
 {
  for(i=0;i<vptr;i++) _kernel_oswrch(vblock[i]);
 }
 if(vblock) flex_free((flex_ptr)&vblock);
}


