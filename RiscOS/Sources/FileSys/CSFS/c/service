/*->c.service */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"
#include "h.csfserr"
#include "h.xstr"
#include "h.str"
#include "h.etc"
#include "h.csfs"

#include "h.scrap"
#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.cat"
#include "h.fx"


#include "h.mount"
#include "h.service"

#include "usermode.h"


/*****************************************************************************/


typedef struct servicestr
{
 int features;
 int swino;


} servicestr;




static char * sname;
static int    snamelen;


static servicestr * services;
static int          servicen;




static _kernel_oserror * addsname(char * name)
{
 _kernel_oserror * err;
 int               len;
 char            * p;

 err=NULL;


 p=sname;
 while((p-sname)<snamelen)
 {
  len=strlen(p)+1;
  if(!cstrcmp(p,name)) break;
  p+=len;
 }

 if((p-sname)>=snamelen)
 {
  len=strlen(name)+1;

  err=flex_extend((flex_ptr)&sname,snamelen+len+1);
  if(!err)
  {
   strcpy(sname+snamelen,name);
   snamelen+=len;
   *(sname+snamelen)=0;
  }
 }

 return(err);
}





static _kernel_oserror * remsname(char * name)
{
 _kernel_oserror * err;
 char            * p;
 int               len;

 err=NULL;

 p=sname;
 while((p-sname)<snamelen)
 {
  len=strlen(p)+1;

  if(!cstrcmp(p,name))
  {
   memcpy(p,p+len,(sname+snamelen)-(p+len));
   snamelen-=len;
   err=flex_extend((flex_ptr)&sname,snamelen+1);
   *(sname+snamelen)=0;
   return(err);
  }
  p+=len;
 }

 return(err);
}




_kernel_oserror * findservice(int * service,int * bits,char * servicename)
{
 char            * p;
 int               len;
 int               n;

 n=0;
 p=sname;
 while((p-sname)<snamelen)
 {
  len=strlen(p)+1;
  if(!cstrcmp(p,servicename))
  {
   *service=n;
   if(bits) *bits=services[n].features;
   return(NULL);
  }
  p+=len;
  n++;
 }
 return(geterror(err_NoService));
}




/*

CSFS_Register (&4E981)

Register a transport service with CSFS.


On entry
        R0 = Flags (must be 0)
        R1 = Pointer to null terminated service name
        R2 = number of SWI performing transport service functions
        R3 = Service features mask
               Bit     Meaning when set
               0         Requires server name
               1         Requires mount path
               2         Requires username/password
               3         Get transport function supported
               4         Put transport function supported
               5         Rename transport function supported
               6         Copy transport function supported
               7         Delete transport function supported
               8-31      Reserved (must be 0)
On exit
        All registers preserved

Using the features mask in R3 allows CSFS to request the correct information
from the user. For example,  if the underlying transport does not require a
username and password pair, there is no need to supply them  as part of the
mount command.



*/



_kernel_oserror * regswi(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 err=flex_extend((flex_ptr)&services,(servicen+1)*sizeof(servicestr));
 if(!err)
 {
  err=addsname((char*)r->r[1]);
  if(!err)
  {
   services[servicen].swino=r->r[2];
   services[servicen].features=r->r[3];
   servicen++;

  }
 }

 return(err);
}



/*

CSFS_DeRegister (&4E982)

De-register a previously registered transport service with CSFS. This should
only ever be called from a  transport module as it is being killed. Therefore
CSFS should close any open transport sessions associated  with this service
before returning from the SWI.


On entry
        R0 = Flags (must be 0)
        R1 = Pointer to null terminated service name
On exit
        All registers preserved


*/



_kernel_oserror * deregswi(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 int               sn;
 int               i;

 err=findservice(&sn,NULL,(char*)r->r[1]);
 if(!err)
 {
  for(i=0;i<maxarc;i++)
  {
   if(arc[i].service==sn) dismounti(i);
  }

  remsname((char*)r->r[1]);
  memcpy(services+sn,services+sn+1,(servicen-(sn+1))*sizeof(servicestr));
  servicen--;

  for(i=0;i<maxarc;i++)
  {
   if(arc[i].service>=sn) arc[i].service--;
  }
 }

 return(err);
}



/*

CSFS_Services (SWI &4E980)

Enumerate the transport services currently registered with CSFS.


On entry
        R0 = Flags (must be 0)
        R1 = Service number (0 for first call)
On exit
        R2 = Number of registered services
        R3 = Pointer to 0 terminated service name
        R4 = Service features mask
        R5 = Number of active mounts for this service

Repeated calls of this SWI will enumerate all services currently registered
with CSFS. The first call should  specify a service number of 0. If no
services are currently registered, the value 0 will be returned in R3. If
there are services registered, R3 will contain the number of services and the
information relating to the  first service. Calling this SWI for R3-1 times
will allow a full enumeration of all services.


*/



_kernel_oserror * serviceswi(_kernel_swi_regs * r)
{
 char            * p;
 int               len;
 int               n;
 int               sum;
 int               i;

 p=sname;
 n=0;
 sum=-1;
 while((p-sname)<snamelen)
 {
  if(n==r->r[1])
  {
   sum=0;
   for(i=0;i<maxarc;i++)
   {
    if(arc[i].inuse && arc[i].service==n && i!=ROOTN) sum++;
   }
   break;
  }

  len=strlen(p)+1;
  p+=len;
  n++;
 }

 r->r[2]=servicen;
 r->r[3]=(sum<0)?(int)sname:(int)p;
 r->r[4]=(sum<0)?0:services[n].features;
 r->r[5]=sum;

 return(NULL);
}




/*

 CSFSServices

     Service   Features   Active mounts
  eg FTP       0xFF       1

*/



_kernel_oserror * servicescommand(char * args[],int argc)
{
 char            * p;
 int               len;
 int               n;
 int               sum;
 int               i;

 printf("Service   Features    Active mounts\n");

 p=sname;
 n=0;
 while((p-sname)<snamelen)
 {
  sum=0;
  for(i=0;i<maxarc;i++)
  {
   if(arc[i].inuse && arc[i].service==n && i!=ROOTN) sum++;
  }
  len=strlen(p)+1;

  printf("%-10s0x%-10x%d\n",p,services[n].features,sum);

  p+=len;
  n++;
 }

 return(NULL);
 USE(argc);
 USE(args);
}



int servicefeatures(int acn)
{
 return(services[arc[acn].service].features);
}



_kernel_oserror * opensession(int acn,int code,char * remote,char * local,
                                                int * session,void * data)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;
 int               service;
 int               features;

 err=NULL;
 service=arc[acn].service;
 features=services[service].features;

 switch(code)
 {
  case     CSFS_GET:
                    if(!(features & CSFS_GETSUPPORTED))
                              err=geterror(err_NoGet);
                    break;

  case     CSFS_PUT:
                    if(!(features & CSFS_PUTSUPPORTED))
                              err=geterror(err_NoPut);
                    break;

  case  CSFS_RENAME:
                    if(!(features & CSFS_RENAMESUPPORTED))
                              err=geterror(err_NoRename);
                    break;

  case    CSFS_COPY:
                    if(!(features & CSFS_COPYSUPPORTED))
                              err=geterror(err_NoCopy);
                    break;

  case   CSFS_DELETE:
                     if(!(features & CSFS_DELETESUPPORTED))
                              err=geterror(err_NoDelete);
                     break;

  case    CSFS_MKDIR:
                     if(!(features & CSFS_MKDIRSUPPORTED))
                              err=geterror(err_NoMKDir);
                     break;

  case    CSFS_RMDIR:
                     if(!(features & CSFS_RMDIRSUPPORTED))
                              err=geterror(err_NoRMDir);
                     break;

  case    CSFS_SETTYPE:
                     if(!(features & CSFS_SETTYPESUPPORTED))
                              err=geterror(err_NoSetType);
                     break;
 }

 if(!err)
 {
  rx.r[0]=code;
  rx.r[1]=1;
  rx.r[2]=(int)(&arc[acn].address);
  rx.r[3]=(int)stringptr(arc[acn].mountpath);
  rx.r[4]=(int)remote;
  rx.r[5]=(int)stringptr(arc[acn].user);
  rx.r[6]=(int)stringptr(arc[acn].pass);
  rx.r[7]=(int)local;
  rx.r[8]=(int)data;

  err=_kernel_swi(services[service].swino,&rx,&rx);

  *session=rx.r[0];
 }
 CHK_ERR(err);
 return(err);
}


/*

On entry
        R0 = 1
        R1 = Flags (must be 0)
        R2 = Session handle
On exit
        R0 = Status
               -1 = Progressing
               0  = Ok, completed
               >0 = Errors to be defined
        R1 = Preserved
        R2 = Preserved
        R3 = Pointer to a structure containing a session
             specific set of data.

  Turn hourglass on for duration of session

*/

_kernel_oserror *runsession(int acn,int session)
{
 _kernel_oserror    *err;
 _kernel_swi_regs   rx;
 int                escstate;

 _kernel_swi(Hourglass_On,&rx,&rx);

 rx.r[0]=229;
 rx.r[1]=0;
 rx.r[2]=0;
 err=_kernel_swi(OS_Byte,&rx,&rx);
 if(!err)
 {
  escstate=rx.r[1];

  while(1)
  {
   rx.r[0]=CSFS_STATUS;
   rx.r[1]=0;
   rx.r[2]=session;
   err=_kernel_swi(services[arc[acn].service].swino,&rx,&rx);
   if(err) break;

   if(rx.r[0]>=0) break; /* over */
   usermode_donothing();

   rx.r[0]=126;
   err=_kernel_swi(OS_Byte,&rx,&rx);
   if(err) break;

   if(rx.r[1]==255) err=geterror(err_Escape);
   if(err) break;
  }

  rx.r[0]=229;
  rx.r[1]=escstate;
  rx.r[2]=0;
  _kernel_swi(OS_Byte,&rx,&rx);
 }

 _kernel_swi(Hourglass_Off,&rx,&rx);

 return(err);
}

/*
 * same as function above but perform calculations for %age progress and
 * dispatch the ProgressUI UpCall
 */
_kernel_oserror *
runsession_progress(int acn,int session,unsigned int total,unsigned int *sofar)
{
 _kernel_oserror    *err;
 _kernel_swi_regs   rx;
 int                escstate;
 progress_info	    *file;
 int percentage     =0;
 int last_percentage=0;


 _kernel_swi(Hourglass_On,&rx,&rx);

 /*
  * initialise progress UI
  */
 if (*sofar==0)
   _swix(OS_UpCall, _INR(0,1), UpCall_ProgressUI, 0);

 rx.r[0]=229;
 rx.r[1]=0;
 rx.r[2]=0;
 err=_kernel_swi(OS_Byte,&rx,&rx);
 if(!err)
 {
  escstate=rx.r[1];

  while(1)
  {
   rx.r[0]=CSFS_STATUS;
   rx.r[1]=0;
   rx.r[2]=session;
   err=_kernel_swi(services[arc[acn].service].swino,&rx,&rx);
   if(err) break;

   /*
    * obtain progress info
    */
   if (rx.r[3])
   {
     file = (progress_info*)rx.r[3];
     /*
      * calculate progress %age and update the UI
      */
     percentage = (total==0)?100:(((*sofar)+file->sofar)*100)/total;
     if (percentage>last_percentage)
     {
       last_percentage = percentage;
       _swix(OS_UpCall, _INR(0,1), UpCall_ProgressUI, percentage);
     }
   }

   if(rx.r[0]>=0) break; /* over */
   usermode_donothing();

   rx.r[0]=126;
   err=_kernel_swi(OS_Byte,&rx,&rx);
   if(err) break;

   if(rx.r[1]==255) err=geterror(err_Escape);
   if(err) break;
  }

  rx.r[0]=229;
  rx.r[1]=escstate;
  rx.r[2]=0;
  _kernel_swi(OS_Byte,&rx,&rx);
 }
 if (sofar)
   *sofar+=file->total;
 _kernel_swi(Hourglass_Off,&rx,&rx);

 return(err);
}

/*

On entry
        R0 = 0
        R1 = Flags (must be 0)
        R2 = Session handle
On exit

*/


_kernel_oserror * closesession(int acn,int session,_kernel_oserror * err)
{
 _kernel_oserror * err1;
 _kernel_swi_regs  rx;

/*  printf("CSFS: --   closesession\n"); */

 rx.r[0]=CSFS_CLOSE;
 rx.r[1]=0;
 rx.r[2]=session;

 err1=_kernel_swi(services[arc[acn].service].swino,&rx,&rx);

 return(err?err:err1);
}





_kernel_oserror * initservice(void)
{
 _kernel_oserror * err;

 err=flex_alloc((flex_ptr)&sname,0);
 snamelen=0;

 if(!err) err=flex_alloc((flex_ptr)&services,0);
 servicen=0;

 return(err);
}



