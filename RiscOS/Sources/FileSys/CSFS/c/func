/*->c.func */


#include <stdio.h>
#include <stdlib.h>


#include "kernel.h"
#include "swis.h"


#include "Consts.h"
#include "AllErrs.h"
#include "RMInfo.h"
#include "Statics.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.str"

#include "h.mem"
#include "h.sfs"






_kernel_oserror *fsentry_func(FSEntry_Func_Parameter * parm)
{
 _kernel_oserror *err;

#ifdef DODEBUG
 deb("func reason=%d ",parm->reason);
#endif

 err=memcheck();

 if(!err)

 switch(parm->reason)
 {

#ifdef OLDFS
        case FSEntry_Func_Reason_SetCurrentDirectory:
                err=SetCurrentDirectory(parm);
                break;

        case FSEntry_Func_Reason_SetLibraryDirectory:
                err=SetLibraryDirectory(parm);
                break;

        case FSEntry_Func_Reason_CatalogueDirectory:
                err=CatalogueDirectory(parm);
                break;

        case FSEntry_Func_Reason_ExamineCurrentDirectory:
                err=ExamineDirectory(parm);
                break;

        case FSEntry_Func_Reason_CatalogueLibraryDirectory:
                err=CatalogueLibraryDirectory(parm);
                break;

        case FSEntry_Func_Reason_ExamineLibraryDirectory:
                err=ExamineLibraryDirectory(parm);
                break;

        case FSEntry_Func_Reason_ExamineObjects:
                err=ExamineObjects(parm);
                break;

        case FSEntry_Func_Reason_SetFilingSystemOptions:
                err=SetFilingSystemOptions(parm);
                break;
#endif


        case FSEntry_Func_Reason_RenameObject:
                err=RenameObject(parm);
                break;

#ifdef OLDFS

        case FSEntry_Func_Reason_AccessObjects:
                err=AccessObjects(parm);
                break;

        case FSEntry_Func_Reason_BootFilingSystem:
                err=BootFilingSystem(parm);
                break;

        case FSEntry_Func_Reason_ReadNameAndBootOptionOfDisc:
                err=ReadNameAndBootOptionOfDisc(parm);
                break;

        case FSEntry_Func_Reason_ReadCurrentDirectoryNameAndPrivilegeByte:
                err=ReadCurrentDirectoryNameAndPrivilegeByte(parm);
                break;

        case FSEntry_Func_Reason_ReadLibraryDirectoryNameAndPrivilegeByte:
                err=ReadLibraryDirectoryNameAndPrivilegeByte(parm);
                break;

#endif

        case FSEntry_Func_Reason_ReadDirectoryEntries:
                err=ReadDirectoryEntries(parm);
                break;

        case FSEntry_Func_Reason_ReadDirectoriesAndInformation:
                err=ReadDirectoriesAndInformation(parm);
                break;



#ifdef OLDFS

        case FSEntry_Func_Reason_ShutDown:
                err=ShutDown(parm);
                break;


        case FSEntry_Func_Reason_PrintStartUpBanner:
                err=PrintStartUpBanner(parm);
                break;

        case FSEntry_Func_Reason_SetDirectoryContexts:
                err=SetDirectoryContexts(parm);
                break;

#endif

        case FSEntry_Func_Reason_ReadDirectoryEntriesAndInformation:
                err=ReadDirectoryEntriesAndInformation(parm);
                break;

#ifdef OLDFS
        case FSEntry_Func_Reason_OutputFullInformationOnObjects:
                err=OutputFullInformationOnObjects(parm);
                break;
#endif

        default:
                err = &mb_nfserr_BadParameters;
                break;
 }

 return(err);
}


