/*->c.scrap */


#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "h.etc"
#include "h.str"
#include "h.allerrs"
#include "h.fs"


#include "h.flex"


#include "h.scrap"




#define SCRAPCHUNK (0x20*sizeof(int))


/* holds 1 if object is in use */

static unsigned int * scrapmap;
static int            scrapn;


static char * scrappath="<CSFS$Scrap>.CSFS";



/* scrap name is <Progname$Scrap>.Progname<instance>.<dir>.<dir>.file */
/* stored as 5 bits per filename and dir name */


char * sc_name(int sh)
{
 static char name[256];
 int    mask;
 int    shift;
 int    len;

 strcpy(name,scrappath);
 strcat(name,".");
 len=strlen(name);

 mask=0x1F;
 shift=25;

 while(shift>=0)
 {
  if((sh>>shift)&mask) 
  {
   sprintf(name+len,"%c%02d.",shift?'D':'F',(sh>>shift)&mask);
   len+=4;
  }
  shift-=5;
 }

 if(name[len-1]=='.') name[len-1]=0;

 return(name);
}




/* scan scrap map for unused handles */
/* else extend                       */

_kernel_oserror * sc_create(int * shp)
{
 _kernel_oserror * err;
 int        i;
 int        sh;

 err=NULL;

 sh=scrapn; /* compiler */

 for(i=0;i<scrapn;i++)
 {
  if((!(scrapmap[i>>5] & (1<<(i & 0x1F)))) && (i & 0x1F))
  {
   /* found an unused file handle */
   sh=i;
   break;
  }
 }

 if(i>=scrapn)
 {
  /* extend */

  err=flex_chunk((flex_ptr)&scrapmap,((scrapn+2)/32+1)*sizeof(int),SCRAPCHUNK);
  if(!err)
  {
   sh=scrapn++;
   if(!(sh & 0x1F))
   {
    err=fs_cdir(sc_name(sh));
    if(!err)
    {
     scrapmap[sh>>5]|=(1<<(sh & 0x1F));
     sh=scrapn++;
    }
   }
  }
 }

 if(!err)
 {
  scrapmap[sh>>5]|=(1<<(sh & 0x1F));
  *shp=sh;
 }
 return(err);
}


/* kill handle, then scan end of map pruning empty directories */

_kernel_oserror * sc_remove(int sh,_kernel_oserror * err)
{

 if(scrapmap[sh>>5] & (1<<(sh & 0x1F))) scrapmap[sh>>5]^=(1<<(sh & 0x1F));

 if(sh==(scrapn-1))
 {
  while(scrapn)
  {
   sh=scrapn-1;

   if(!(sh & 0x1F))
   {
    /* remove directory */
    delete(sc_name(sh));
    scrapn--;
   }
   else
   {
    if(scrapmap[sh>>5] & (1<<(sh & 0x1F))) break;
    else                                   scrapn--;
   }
  }
 }

 return(err);
}





/* scrpname is a short string to form into a scrap directory name */
/* tskname  is the name to appear in taskname$scrap               */
/* in general tskname may not be the same as wimpt_programname()  */


_kernel_oserror * scrapinit(void)
{
 _kernel_oserror * err;

 scrapn=0;

 err=NULL;

 if(!getenv("CSFS$Scrap")) 
                          err=oscli("SetMacro CSFS$Scrap <Wimp$ScrapDir>");
 if(!err)                 err=flex_alloc((flex_ptr)&scrapmap,SCRAPCHUNK);
 if(!err)
 {
  fs_unlockall(scrappath);
  fs_wipe(scrappath);
 }

 return(err);
}



/* attempt to trash all scrap files in sight */


_kernel_oserror * scrapfinit(void)
{
 _kernel_oserror * err;

 err=fs_unlockall(sc_name(0));
 err=fs_wipe(sc_name(0));

 return(err);
}




/* OS_Module 1-245 */





