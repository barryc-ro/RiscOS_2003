/*->c.arcf */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "kernel.h"
#include "swis.h"

#include "Consts.h"
#include "RMInfo.h"
#include "veneers.h"
#include "Interface.h"
#include "fsentries.h"
#include "ModuleWrap.h"


#include "h.flex"
#include "h.csfserr"
#include "h.str"

#include "h.fs"
#include "h.sfs"
#include "h.arcs"
#include "h.cat"
#include "h.link"
#include "h.xstr"
#include "h.csfs"
#include "h.service"

#include "h.arcf"


/*****************************************************************************/



/* take the file and load it into memory */

_kernel_oserror * loadfile(int acn,int fn,char * address)
{
 _kernel_oserror * err;
 err=loadarcfile(acn,fn,0,address);

#ifdef DODEBUG
 if(err) deb("load file error");
#endif
 return(err);
}






_kernel_oserror * createfile(int acn,char * filepath,int ins,int ow,int ind,
                                                                 fstat * stat)
{
 _kernel_oserror * err;

 if(arc[acn].ro)                         err=geterror(err_ReadOnlyArc);
 else
 if(ow && arc[acn].hdr[ins].fshandle)    err=geterror(err_FileOpen);
 else
 if(ow && (arc[acn].hdr[ins].dirn>=0 ||
           arc[acn].hdr[ins].dirn==-2))  err=geterror(err_TypesDontMatch);
 else
 if(!(servicefeatures(acn) & CSFS_PUTSUPPORTED))
                                         err=geterror(err_NoPut);
 else
 {
#ifdef DEBUG
  debug_printf("CSFS: create file %s\n",filepath);
  debug_printf("CSFS:   load 0x%08x\n",arc[acn].hdr[ins].load);
  debug_printf("CSFS:   exec 0x%08x\n",arc[acn].hdr[ins].exec);
#endif
  err=createfilex(acn,stat,leaf(filepath),ins,ind,ow);
 }
 return(err);
}





/* only called if the directory does not exist! */

_kernel_oserror * createdir(int acn,char * filepath,int ins,int ow,int ind)
{
 _kernel_oserror * err;
 fstat             stat;

 err=NULL;

 if(arc[acn].ro) err=geterror(err_ReadOnlyArc);
 else
 if(ow && (arc[acn].hdr[ins].dirn<0 ||
           arc[acn].hdr[ins].dirn==-2)) err=geterror(err_TypesDontMatch);
 else
 if(!(servicefeatures(acn) & CSFS_MKDIRSUPPORTED))
                                        err=geterror(err_NoMKDir);
 else
 if(!ow)
 {
  getdeftime(&stat,0xFFD);
  err=createdirx(acn,&stat,leaf(filepath),ins,ind,ow);
 }

 return(err);
}



/* for sphagetti type reasons, this is passed the file name, not path */


_kernel_oserror * savefile(int acn,char * name,int ins,int ow,int ind,
                                                   fstat * stat,char * start)
{
 _kernel_oserror * err;

 err=NULL;

 if(arc[acn].ro) err=geterror(err_ReadOnlyArc);
 else
 if(ow && arc[acn].hdr[ins].fshandle)   err=geterror(err_FileOpen);
 else
 if(ow && (arc[acn].hdr[ins].dirn>=0 ||
           arc[acn].hdr[ins].dirn==-2)) err=geterror(err_TypesDontMatch);
 else
 if(!(servicefeatures(acn) & CSFS_PUTSUPPORTED)) err=geterror(err_NoPut);
 else
 {
  err=savearcfile(acn,stat,name,ins,ind,ow,0,start);
 }

 return(err);
}



_kernel_oserror * deletefile(int acn,int fn)
{
 _kernel_oserror * err;

 if(arc[acn].ro)               err=geterror(err_ReadOnlyArc);
 else
 if(arc[acn].hdr[fn].fshandle) err=geterror(err_FileOpen);
 else
 if(arc[acn].hdr[fn].dirn>0)   err=geterror(err_DirNotEmpty);
 else
                               err=deletefilex(acn,fn);
 return(err);
}

