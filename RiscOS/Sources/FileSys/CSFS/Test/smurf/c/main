/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Enumerate CSFS services
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "inetlib.h"
#include "netdb.h"
#include "constants.h"
#include "csfs.h"
#include "error.h"

#define VERSION "0.02 (15 May 1997)"

char *progname;
char pwd[1024];

static void _getline(char *prompt, char *line, int size);
static cmd_ret_t read_line(FILE *fptr, char *buffer, int size);
static int _getargs(char *line, char **argv);
int caseless_strcmp(char *a, char *b);

static cmd_ret_t _services  (int, char**);
static cmd_ret_t _mounts    (int, char**);
static cmd_ret_t _modules   (int, char**);
static cmd_ret_t _help	    (int, char**);
static cmd_ret_t _quit      (int, char**);
static cmd_ret_t _mount     (int, char**);
static cmd_ret_t _dismount  (int, char**);
static cmd_ret_t _refresh   (int, char**);
static cmd_ret_t _update    (int, char**);
static cmd_ret_t _release   (int, char**);
static cmd_ret_t _run       (int, char**);
static cmd_ret_t _echo      (int, char**);
static cmd_ret_t _create    (int, char**);
static cmd_ret_t _ifthere   (int, char**);
static cmd_ret_t _version   (int, char**);
static cmd_ret_t _wait      (int, char**);

static const cmd_t cmd_tbl[] = {
 _services,  "services", "services","enumerate csfs transport services",
 _mounts,    "mounts",   "mounts","enumerate current mounts",
 _mount,     "mount",    "mount <mount spec>","perform csfs mount",
 _dismount,  "dismount", "dismount <mount name>","dismount csfs mount",
 _refresh,   "refresh",  "refresh [<path>]","refresh directory contents",
 _update,    "update",   "update [-upload] [<path>]",
 	     		 "update client/server files",
 _release,   "release",  "release <path>","release locked files",
 _modules,   "modules",  "modules","enumerate modules important to CSFS",
 _echo,      "echo",     "echo [<params>]","echo <params> to screen",
 _create,    "create",   "create <filename> <size>","create an alphabet file",
 _ifthere,   "ifthere",  "ifthere <present text> <not present text>",
 	     		 "look to see if a file is present",
 _run,       "run",      "run <script>","run a test script",
 _help,	     "help",     "help [command]","display help on selected keyword",
 _version,   "version",  "version","display version information",
 _quit,	     "quit",     "quit","quit application",
 _wait,	     "wait",	 "wait <time>","wait specified number of secconds",
 0,0,0,0
};

char *modules[] = {"CSFS","WebFTP","HTTP","DISCM","ProgressUI",0};

/*
 * send string to the command line interrpreter
 */
void
oscli(char *cmd)
{
  _kernel_oserror *err;
  err=_swix(OS_CLI,_IN(0),cmd);
  if (err)
    error_generate(err);
}

/*
 * wait a number of seconds
 */
static cmd_ret_t
_wait(int argc, char **argv)
{
  _kernel_swi_regs reg;
  int time_end;
  if (argc!=2)
    return _SYNTAX;

  printf("\nwaiting %d seconds\n",atoi(argv[1]));

  _kernel_swi(OS_ReadMonotonicTime,&reg,&reg);

  time_end = reg.r[0]+(atoi(argv[1])*100);
  do
  {
    _kernel_swi(OS_ReadMonotonicTime,&reg,&reg);
  } while (reg.r[0]<time_end);

  return _CONT;
}

/*
 * echo to screen
 */
static cmd_ret_t
_echo(int argc, char **argv)
{
  int i;

  if (argc>1)
  {
    for (i=1; i<argc; i++)
      printf("%s ",argv[i]);
    printf("\n");
  }

  return _CONT;
}

/*
 * display program version info
 */
static cmd_ret_t
_version(int argc, char **argv)
{
  printf("\n%s (version %s)\n",progname,VERSION);

  return _CONT;
}

/*
 */
static cmd_ret_t
_services(int argc, char **argv)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int num,i=0;
  int num_mounts = 0;
  char buffer[96];

  printf("\nEnumerate the services registered with CSFS\n");
  printf("-------------------------------------------\n\n");
  printf("Testing swi CSFS_Services\n");

  printf("Name      Features    Active mounts\n");
  reg.r[0] = 0;
  do
  {
    reg.r[1] = i;
    ERR_GOTO(err,_kernel_swi(CSFS_Services,&reg,&reg));
    num = reg.r[2];
    printf("%-10s0x%-10x%d\n",(char*)reg.r[3],reg.r[4],reg.r[5]);
    num_mounts+=reg.r[5];
    i++;
  } while (i<num);

  printf("\nTesting the *command *CSFSServices\n");
  oscli("CSFSServices");

  printf("\n\nThese listings should be the match\n");

  printf("\nEnumerating the mounts in root directory\n");
  printf("----------------------------------------\n\n");

  reg.r[0] = 10;
  reg.r[1] = (int)"CSFS:$";
  reg.r[2] = (int)buffer;
  reg.r[3] = 1;
  reg.r[4] = 0;
  reg.r[5] = sizeof(buffer);
  reg.r[6] = NULL;
  i=0;
  do
  {
    ERR_GOTO(err,_kernel_swi(OS_GBPB,&reg,&reg));
    if (reg.r[4] != -1)
    {
      printf("Found %s\n",buffer+20);
      i++;
    }
  } while (reg.r[4] != -1);

  if (i==num_mounts)
    printf("Correct match in number of mounts\n");
  else
    printf("Conflict counted %d mounts, swi told us %d existed\n\n",i,num_mounts);

exit_gracefully:
  if (err)
    error_generate(err);

  return (_CONT);
}

/*
 * check for presence of a file
 */
static cmd_ret_t
_ifthere (int argc, char **argv)
{
  FILE *fptr;
  char *filename;
  char *present;
  char *notpresent;

  if (argc!=4)
    return _SYNTAX;

  filename   = argv[1];
  present    = argv[2];
  notpresent = argv[3];

  fptr = fopen(filename, "r");
  if (fptr)
  {
    fclose(fptr);
    printf("%s\n",present);
  }
  else
    printf("%s\n",notpresent);

  return _CONT;
}


/*
 * create an alphabet file
 */
static cmd_ret_t
_create (int argc, char **argv)
{
  _kernel_swi_regs reg;
  FILE *fptr;
  char *filename;
  int size;
  int i;
  int ch;

  if (argc!=3)
    return _SYNTAX;

  filename = argv[1];
  size = atoi(argv[2]);

  if ((fptr = fopen(filename, "a")) == NULL)
    error_generate(error_construct(ERROR_CREATE,filename));
  else
  {
    ch='a';
    for (i=0; i<size; i++)
    {
      fputc(ch,fptr);
      ch++;
      if (ch>'z')
        ch='a';
    }
    fclose(fptr);
    reg.r[0] = 24;
    reg.r[1] = (int)filename;
    reg.r[2] = (int)"RW/RW";
    _kernel_swi(OS_FSControl,&reg,&reg);
  }

  return _CONT;
}

/*
 * enumerate current mounts
 */
static cmd_ret_t
_mounts (int argc, char **argv)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  char buffer[96];
  int i;

  printf("\nEnumerating the mounts in root directory\n");
  printf("----------------------------------------\n\n");

  reg.r[0] = 10;
  reg.r[1] = (int)"CSFS:$";
  reg.r[2] = (int)buffer;
  reg.r[3] = 1;
  reg.r[4] = 0;
  reg.r[5] = sizeof(buffer);
  reg.r[6] = NULL;
  i=0;
  do
  {
    ERR_GOTO(err,_kernel_swi(OS_GBPB,&reg,&reg));
    if (reg.r[4] != -1)
    {
      printf("Found %s\n",buffer+20);
      i++;
    }
  } while (reg.r[4] != -1);

  printf("\nCounted %d mount%s\n\n",i,i>1?"s":"");

exit_gracefully:
  if (err)
    error_generate(err);

  return _CONT;
}
/*
 * check modules of interest to CSFS
 */
static cmd_ret_t
_modules(int argc, char **argv)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int module = 0;
  char *ptr;
  int found;

  printf("\nSummary of modules important to CSFS\n");
  printf("------------------------------------\n\n");
  printf("Module          Location   Version\n");

  while (modules[module])
  {
    found = 0;

    /*
     * now check ROM
     */
    reg.r[0] = 20;   /* enumerate ROM modules */
    reg.r[1] = 0;
    reg.r[2] = -1;
    do
    {
      err = _kernel_swi(OS_Module, &reg, &reg);
      if (!err)
      {
        if (!strcmp((char*)reg.r[3],modules[module]))
        {
          int rom_version  = 0;
          rom_version  = (reg.r[6]>>8  & 0xF);
          rom_version += (reg.r[6]>>12 & 0xF)*10;
          rom_version += (reg.r[6]>>16 & 0xF)*100;
          rom_version += (reg.r[6]>>20 & 0xF)*1000;
          rom_version += (reg.r[6]>>24 & 0xF)*10000;
          rom_version += (reg.r[6]>>28 & 0xF)*100000;
          printf("%-15s %-10s %d.%d\n",modules[module],
          	     "ROM",rom_version/100,rom_version%100);
          found = 1;
        }
      }
    } while (!err);

    if (!found)
    {
      /*
       * first check RAM for module
       */
      reg.r[0] = 18;                               /* lookup module name */
      reg.r[1] = (int)modules[module];
      err = _kernel_swi(OS_Module, &reg, &reg);
      if (!err)    	       	               /* if module is in ram */
      {
        ptr = (char*)reg.r[3];  /* look at start address */
        if (*(ptr+0x14)!=0)     /* existance of help string */
        {
          ptr+=*(ptr+0x14);            /* offset to the help string */
          while (*ptr!=9 && *ptr!=0)   /* skip tabs */
            ptr++;
          if (*ptr)   		     /* not the end of line */
          {
            char version[8];
            int i=0;
            ptr++;
            while (*ptr!=' ')
            {
              if (*ptr!=' ' && *ptr!=9)
                version[i++]=*ptr;
              ptr++;
            }
            version[i] = 0;

            printf("%-15s %-10s %s\n",modules[module],"RAM",version);
            found = 1;
          }
        }
      }

    }

    module++;
  }
  printf("\n");
  return _CONT;
}

/*
 * obtain current directory
 */
void
get_pwd(char *buffer, int size)
{
  _kernel_swi_regs reg;

  reg.r[0]=37;
  reg.r[1]=(int)"@";
  reg.r[2]=(int)buffer;
  reg.r[3]=(int)0;
  reg.r[4]=(int)0;
  reg.r[5]=size;

  _kernel_swi(OS_FSControl,&reg,&reg);
}

/*
 * implement the release command
 */
static cmd_ret_t
_release(int argc, char **argv)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char *path;

  if (argc == 1)
  {
    get_pwd(pwd,sizeof(pwd));
    path = pwd;
  }
  else
    path = argv[1];

  printf("\nRelease directory %s\n\n",path);
  fflush(stdout);

  reg.r[0] = 0;
  reg.r[1] = (int)path;
  err = _kernel_swi(CSFS_Release,&reg,&reg);

  if (err)
    error_generate(err);

  return _CONT;
}
/*
 * implement the update command
 */
static cmd_ret_t
_update(int argc, char **argv)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  int first_arg = -1;
  int upload = 0;
  int i;
  char *path;

  for (i=1; i<argc; i++)
  {
    if (caseless_strcmp(argv[i],"-upload")==0)
      upload = 1;
    else if (*argv[i]!='-')             /* non-option */
    {
      first_arg = i;
      break;
    }
  }

  if ((upload && (argc == 2)) || (!upload && (argc == 1)))
  {
    get_pwd(pwd,sizeof(pwd));
    path = pwd;
  }
  else
    path = argv[first_arg];

  printf("\nupdate directory %s (%s)\n\n",path,upload?"upload":"no-upload");
  fflush(stdout);
  reg.r[0] =  0;
  reg.r[0] |= upload?1<<0:0;
  reg.r[1] = (int)path;
  err = _kernel_swi(CSFS_Update,&reg,&reg);

  if (err)
    error_generate(err);

  return _CONT;
}
/*
 * implement the refresh command
 */
static cmd_ret_t
_refresh(int argc, char **argv)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char *path;

  if (argc == 1)
  {
    get_pwd(pwd,sizeof(pwd));
    path = pwd;
  }
  else
    path = argv[1];

  printf("\nrefresh directory %s\n\n",path);
  fflush(stdout);

  reg.r[0] = 0;
  reg.r[1] = (int)path;
  err = _kernel_swi(CSFS_Refresh,&reg,&reg);

  if (err)
    error_generate(err);

  return _CONT;
}

/*
 * implement the mount command
 */
static cmd_ret_t
_mount(int argc, char **argv)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  int i;
  int writecache=0;
  char *service=NULL,*name=NULL,*host=NULL,*path=NULL,*user=NULL,*passwd=NULL;
  host_info host_spec = {0,0};
  char *p;
  struct hostent *  xhost;

  if (argc<2)
    return (_SYNTAX);

  for (i=1; i<argc; i++)
  {
    if (caseless_strcmp(argv[i],"-service")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      service = argv[i];
    }
    else if (caseless_strcmp(argv[i],"-name")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      name = argv[i];
    }
    else if (caseless_strcmp(argv[i],"-writecache")==0)
    {
      writecache = 1;
    }
    else if (caseless_strcmp(argv[i],"-host")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      host = argv[i];
      if ((p=strchr(host,':'))!=0)
      {
        *p++=0;
        if (*p)
        {
          if (sscanf(p,"%d",&(host_spec.port))!=1)
          {
            error_generate(error_construct(ERROR_PORT,p));
            return _CONT;
          }
        }
      }
      if ((xhost=gethostbyname(host))==NULL)
      {
        error_generate(error_construct(ERROR_RESOLVE,host));
        return _CONT;
      }
      memcpy((char*)&host_spec.addr,xhost->h_addr,4);
      host_spec.addr=htonl(host_spec.addr);
    }
    else if (caseless_strcmp(argv[i],"-path")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      path = argv[i];
    }
    else if (caseless_strcmp(argv[i],"-user")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      user = argv[i];
    }
    else if (caseless_strcmp(argv[i],"-passwd")==0)
    {
      if (++i>=argc)
        return (_SYNTAX);
      passwd = argv[i];
    }
  }

  printf("\nmount ");
  if (service)
    printf("-service %s ",service);
  if (name)
    printf("-name %s ",name);
  if (host)
  {
    printf("-host %s",host);
    if (host_spec.port)
      printf(":%d ",host_spec.port);
    else
      printf(" ");
  }
  if (path)
    printf("-path %s ",path);
  if (user)
    printf("-user %s ",user);
  if (passwd)
    printf("-passwd %s ",passwd);
  if (writecache)
    printf("-writecache");
  printf("\n\n");

  fflush(stdout);
  reg.r[0] =  0;
  reg.r[0] |= writecache?1<<0:0;
  reg.r[1] = (int)service;
  reg.r[0] |= 1<<2;
  reg.r[2] = (int)&host_spec;
  reg.r[3] = (int)path;
  reg.r[4] = (int)name;
  reg.r[5] = (int)user;
  reg.r[6] = (int)passwd;
  err = _kernel_swi(CSFS_Mount,&reg,&reg);

  if (err)
    error_generate(err);

  return _CONT;
}

/*
 * implement the dismount command
 */
static cmd_ret_t
_dismount(int argc, char **argv)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char *path;

  if (argc != 2)
    return (_SYNTAX);

  path = argv[1];

  printf("\ndismount directory %s\n\n",path);
  fflush(stdout);

  reg.r[0] = 0;
  reg.r[1] = (int)path;
  err = _kernel_swi(CSFS_Dismount,&reg,&reg);

  if (err)
    error_generate(err);

  return _CONT;
}

/*
 * run test script
 */
static cmd_ret_t
_run (int argc, char **argv)
{
  _kernel_oserror *err=NULL;
  FILE *fptr;
  char cmd_line[256];
  cmd_ret_t ret = _CONT;
  int	margc;
  char	*margv[20];
  const cmd_t	*cmd;

  if (argc!=2)       /* do we have a script to run */
    return (_SYNTAX);

  if ((fptr = fopen(argv[1], "r")) == NULL)
  {
    ERR_GOTO(err,error_construct(ERROR_NOFILE,argv[1]));
  }
  printf("\nRunning script %s\n\n",argv[1]);
  /*
   * read file and parse commands
   */
  while (ret != _QUIT)
  {
    do
    {
      if (read_line(fptr,cmd_line, sizeof(cmd_line))==_QUIT)
        goto exit_gracefully;
    } while (cmd_line[0] == '|' || strlen(cmd_line)==1);

    margc = _getargs(cmd_line, margv);

    for (cmd = &cmd_tbl[0]; cmd->call; cmd++)
    {
      if (caseless_strcmp(margv[0], cmd->name) != 0)
  	continue;
      else if ((ret=(*(cmd->call))(margc, margv)) == _QUIT)
        break;
      else if (ret == _SYNTAX)
      {
        error_generate(error_construct(ERROR_SYNTAX,cmd->syntax));
        break;
      }
      else if (ret == _CONT)
        break;
    }
    if (cmd->call == 0)
    {
      if (*margv[0]=='*')
      {
        char cli_line[256];
        int i;
	strcpy(cli_line,"");
	for (i=0; i<margc; i++)
	{
	  strcat(cli_line,margv[i]);
	  strcat(cli_line," ");
	}
        oscli(cli_line);
      }
      else
        error_generate(error_construct(ERROR_UNKNOWN,margv[0]));
    }
  }

exit_gracefully:
  if (fptr)
    fclose (fptr);
  if (err)
    error_generate(err);

  return _CONT;
}

/*
 * implement the help command
 */
static cmd_ret_t
_help (int argc, char **argv)
{
  const cmd_t *cmd;

  if (argc==1)
    printf("\n   %s (version %s)\n\n",progname,VERSION);

  for (cmd = &cmd_tbl[0]; cmd->call; cmd++)
  {
    if (argc == 1 || strcmp(argv[1], cmd->name) == 0)
    {
      printf("   %-15s %s\n", cmd->name, cmd->help);
      if (argc != 1) printf("   syntax : %s\n", cmd->syntax);
    }
  }
  printf("\n");
  return _CONT;
}

/*
 * implement the quit command
 */
static cmd_ret_t
_quit (int argc, char **argv)
{
  return _QUIT;
}

/*
 * read a line of text in from the specified file and remove any newlines
 */
static cmd_ret_t
read_line(FILE *fptr, char *buffer, int size)
{
  int i;

  if (fgets(buffer, size, fptr)==NULL)
    return (_QUIT);

  i=strlen(buffer);
  while (i>0 && buffer[i]!='\n') i--;

  if (i>0)
    buffer[i] = 0;

  return (_CONT);
}
/*
 * parse the command line to extract arguments in form argc and argv
 */
static int
_getargs(char *line, char **argv)
{
  int  argc = 0;
  char *cp;

  cp = line;
  while (*cp != '\0')
  {
    while (*cp == ' ')
      cp++;
    if (*cp == '\0')
      break;

    argv[argc++] = cp;
    while (*cp != '\0' && *cp != ' ')
      cp++;
    if (*cp == 0)
      break;
    *cp++ = '\0';
  }
  *cp++ = '\0';

  return (argc);
}

/*
 * display the command prompt and read a command line from console
 */
static void
_getline(char *prompt, char *line, int size)
{
  _kernel_swi_regs reg;

  printf("%s>",prompt);

  reg.r[0] = (int)line | 1U<<31;
  reg.r[1] = size;
  reg.r[2] = 0;
  reg.r[3] = 255;
  reg.r[4] = 0;
  _kernel_swi(OS_ReadLine,&reg,&reg);
  line[reg.r[1]] = 0; /* terminate */
}

/*
 * compare two strings caselessly
 */
int
caseless_strcmp(char *a, char *b)
{
  int d;

  while (*a || *b)
  {
    d = tolower( *(a++) ) - tolower( *(b++) );
    if (d) return d;
  }
  return 0;
}


int
main(int argc, char *argv[])
{
  int	margc;
  char	*margv[20];
  const cmd_t	*cmd;
  char	command_line[256];
  cmd_ret_t ret = _CONT;

  progname = argv[0];

  if (argc==2)
    _run(argc,argv);
  else
  {
    while (ret != _QUIT)
    {
      _getline(progname,command_line, sizeof(command_line));
      if (*command_line)
      {
        margc = _getargs(command_line, margv);

        for (cmd = &cmd_tbl[0]; cmd->call; cmd++)
        {
          if (caseless_strcmp(margv[0], cmd->name) != 0)
    	  continue;
          else if ((ret=(*(cmd->call))(margc, margv)) == _QUIT)
    	  break;
          else if (ret == _SYNTAX)
          {
    	  printf("   syntax: %s\n", cmd->syntax);
    	  break;
          }
          else if (ret == _CONT)
            break;
        }
        if (cmd->call == 0)
        {
          if (*margv[0]=='*')
          {
            char cli_line[256];
            int i;
       	    strcpy(cli_line,"");
            for (i=0; i<margc; i++)
    	    {
    	      strcat(cli_line,margv[i]);
    	      strcat(cli_line," ");
    	    }
            oscli(cli_line);
          }
          else
            error_generate(error_construct(ERROR_UNKNOWN,margv[0]));
        }
      }
    }
  }

  return 0;
}
