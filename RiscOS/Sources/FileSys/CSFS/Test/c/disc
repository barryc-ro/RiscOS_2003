/*->c.disc */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "h.str"
#include "h.etc"
#include "h.fs"


#include "h.csfs"



#include "h.disc"





static _kernel_oserror * discstamp(char * name,heads * hdr)
{
 _kernel_oserror  *  err;
 _kernel_swi_regs    rx;

 rx.r[0]=1;
 rx.r[1]=(int)name;
 rx.r[2]=hdr->load;
 rx.r[3]=hdr->exec;
 rx.r[4]=0;
 rx.r[5]=hdr->acc;

 err=_kernel_swi(OS_File,&rx,&rx);

 return(err);
}




#ifdef NEVER







_kernel_oserror * discopendir(int acn,int ind)
{
 _kernel_oserror * err;
 int               fn;
 char            * p;
 fstat             f;
 int               eof;
 int               object;
 char              arcpath[NAMELEN];


 err=NULL;

 if(ind<0)
 {
  strcpy(arcpath,arc[acn].mountpath);
 }
 else
 {
  arc[acn].hdr[ind].dirn=0;
  err=filepath(arcpath,acn,ind);
 }

/* printf("disc open arcpath=%s\n",arcpath); */


 object=fexists(arcpath);
 if(object!=2) err=&mb_sfserr_CatNotFound;


 p=arcpath+strlen(arcpath);
 fn=ind+1;                    /* nb is OK for fmain == -1 */
 startscan();

 if(!err)
 {
  while(1)
  {
   err=nextitem(arcpath,&f,NULL,&eof);
   if(err || eof) break;

   err=insentry(acn,fn,ind,1);
   if(err) break;

  /* printf("fname=%s\n",f.name); */

   if(f.object)
   {
    strcpy(arc[acn].hdr[fn].name,f.name);
    arc[acn].hdr[fn].dirn=(f.object==1)?DNFILE:DFLAT;
    arc[acn].hdr[fn].load=f.load;
    arc[acn].hdr[fn].exec=f.exec;
    arc[acn].hdr[fn].acc =f.acc;
    arc[acn].hdr[fn].length=f.length;
   }
   if(err) break;
   fn++;
  }
 }
 return(err);
}






_kernel_oserror * discupdate(int acn,int fn)
{
 _kernel_oserror * err;
 char              arcpath[NAMELEN];

 err=filepath(arcpath,acn,fn);
 err=discstamp(arcpath,&arc[acn].hdr[fn]);

 return(err);
}

#endif






static int  dirposn;

static void startscan(void)
{
 dirposn=0;
}


/* PRM page 877 */
/* note that you can read nothing, but you have to continue */
/* search is only over when dirposn==-1                     */


static _kernel_oserror * nextitem(char * dirname,fstat * f,char * name,
                                         char * wild,int * eof)
{
 char              buff[64];
 _kernel_oserror * err;
 _kernel_swi_regs  rx;

 err=NULL;
 *eof=0;

 while(1)
 {
  if(dirposn==-1)
  {
   *eof=1;
   return(err);
  }

  rx.r[0]=10;
  rx.r[1]=(int)dirname;
  rx.r[2]=(int)buff;
  rx.r[3]=1;
  rx.r[4]=dirposn;
  rx.r[5]=64;
  rx.r[6]=(int)wild;

  err=_kernel_swi(OS_GBPB,&rx,&rx);
  if(err) break;

  dirposn=rx.r[4];

  if(rx.r[3]) break;
 }

 if(!err)
 {
  f->load  =(* (int *)(buff+0x0));
  f->exec  =(* (int *)(buff+0x4));
  f->length=(* (int *)(buff+0x8));
  f->acc   =(* (int *)(buff+0xC));
  f->object=(* (int *)(buff+0x10));
  strcpy(name,(buff+0x14));
  f->type=filetype(f->load);
 }

 return(err);
}












#define CHUNK 0x4000

static char buffer[CHUNK];


static _kernel_oserror * disccopylo(char * source,char * dest)
{
 _kernel_oserror * err;
 int               sfh;
 int               dfh;
 int               length;
 int               chunk;
 fstat             f;


 stat(source,&f);

 err=open(source,'r',&sfh);
 if(!err)
 {
  err=open(dest,'w',&dfh);
  if(!err)
  {
   if(!err)
   {
    length=f.length;

    while(length)
    {
     chunk=MIN(length,CHUNK);
     read(sfh,buffer,chunk);
     write(dfh,buffer,chunk);
     length-=chunk;
    }
   }
   err=close(dfh);
  }
  err=close(sfh);
 }

 return(err);
}




/*


On entry
        R0 = 2
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote filename
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
        R7 = Pointer to null terminated local file
On exit
        R0 = session handle

Status return values
        R3 = Pointer to the data contained in the following structure
        struct status_get_data
        {
          int total_data;    total number of bytes to transfer
          int trans_data;    number of bytes transfered so far
          int load_addr;     file load address 
          int exec_addr;     file exec address 
          int file_attrib;   file attributes 
        }


*/




static int getblock[5];



static void makepath(char * path,_kernel_swi_regs * r)
{
 strcpy(path,(char*)r->r[3]);
 if(*((char*)r->r[4]))
 {
  strcat(path,".");
  strcat(path,(char*)r->r[4]);
 }
}



static void makepath2(char * path,_kernel_swi_regs * r)
{
 strcpy(path,(char*)r->r[3]);
 if(*((char*)r->r[7]))
 {
  strcat(path,".");
  strcat(path,(char*)r->r[7]);
 }
}





static _kernel_oserror * discgetfile(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 fstat             f;
 int               eof;
 int               fh;
 char              temp[128];
 char              name[128];
 char              path[256];


 makepath(path,r);

 err=stat(path,&f);
 if(f.object==2)
 {
  startscan();

  err=open((char*)r->r[7],'w',&fh);
  if(!err && fh)
  {
   sprintf(temp,"# version 1\n");
   write(fh,temp,strlen(temp));

   while(1)
   {
    err=nextitem(path,&f,name,NULL,&eof);
    if(err || eof) break;

    if(f.object)
    {
     sprintf(temp,"%s\t0x%08x\t0x%08x\t0x%08x\t0x%08x\t0x%08x\n",
                   name,
                   f.length,
                   f.acc,
                   f.object,
                   f.load,
                   f.exec);

     write(fh,temp,strlen(temp));
    }
    if(err) break;
   }
   close(fh);
  }
 }
 else
 {
  getblock[0]=f.length;
  getblock[1]=f.length;
  getblock[2]=f.load;
  getblock[3]=f.exec;
  getblock[4]=f.acc;

  err=disccopylo(path,(char*)r->r[7]);
 }

 r->r[0]=2;

 return(err);
}




/*

On entry
        R0 = 3
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote filename
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
        R7 = Pointer to null terminated local file
        R8 = Pointer to the following structure
        struct put_data
        {
          int load_addr;     file load address 
          int exec_addr;     file exec address 
          int file_attrib;   file attributes 
        }
On exit
        R0 = session handle

Status return values
        R3 = Pointer to the data contained in the following structure
        struct status_get_data
        {
          int total_data;    total number of bytes to transfer
          int trans_data;    number of bytes transfered so far
        }


*/


static _kernel_oserror * discputfile(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 heads             hdr;
 char              path[256];

 makepath(path,r);

 err=disccopylo((char*)r->r[7],path);

 r->r[0]=1;

 hdr.load=((int*)r->r[8])[0];
 hdr.exec=((int*)r->r[8])[1];
 hdr.acc=((int*)r->r[8])[2];
 discstamp(path,&hdr);

 return(err);
}




static _kernel_oserror * fs_settype(char * filename,int type)
{
 char string[132]; 
 sprintf(string,"settype %s %X",filename,type);
 return(oscli(string));
}



static _kernel_oserror * disctype(_kernel_swi_regs * r)
{
 char              path[256];

 makepath(path,r);

 r->r[0]=1;

 return(fs_settype(path,((int*)r->r[8])[1]));
}






/*

On entry
        R0 = 6
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote filename to delete
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
On exit
        R0 = session handle

*/



static _kernel_oserror * discdelete(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              path[256];

 makepath(path,r);

 err=delete(path);

 r->r[0]=1;

 return(err);
}



/*


This call removed the specified directory


On entry
        R0 = 8
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote directory name to remove
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
On exit
        R0 = session handle


*/

static _kernel_oserror * discddir(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              path[256];

 makepath(path,r);

 err=delete(path);

 r->r[0]=1;

 return(err);
}




/*

On entry
        R0 = 7
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote directory name to make
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
On exit
        R0 = session handle

*/


static _kernel_oserror * discmkdir(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              path[256];

 makepath(path,r);

 err=fs_cdir(path);

 r->r[0]=1;

 return(err);
}





static _kernel_oserror * fs_rename(char * old,char * new)
{
 _kernel_swi_regs rx;

 rx.r[0]=25;
 rx.r[1]=(int)old;
 rx.r[2]=(int)new;

 return(_kernel_swi(OS_FSControl,&rx,&rx));
}



/*

On entry
        R0 = 4
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote filename
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
        R7 = Pointer to null terminated new remote filename
On exit
        R0 = session handle

*/



static _kernel_oserror * discrename(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              path[256];
 char              path2[256];

 makepath(path,r);
 makepath2(path2,r);

 err=fs_rename(path,path2);

 r->r[0]=1;

 return(err);
}


/*

On entry
        R0 = 5
        R1 = Flags (must be 0)
        R2 = Byte coded host IP address (AA.BB.CC.DD => 0xAABBCCDD)
        R3 = Pointer to null terminated mount path
        R4 = Pointer to null terminated remote filename to copy
        R5 = Pointer to null terminated user name
        R6 = Pointer to null terminated password
        R7 = Pointer to null terminated new remote filename
On exit
        R0 = session handle


*/



static _kernel_oserror * disccopy(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              path[256];
 char              path2[256];

 makepath(path,r);
 makepath2(path2,r);

 err=disccopylo(path,path2);

 r->r[0]=1;

 return(err);
}




static _kernel_oserror * discstat(_kernel_swi_regs * r)
{

 if(r->r[2]==2) r->r[3]=(int)getblock;

 r->r[0]=0;

 return(NULL);
}



_kernel_oserror * disctransport(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 err=NULL;

 switch(r->r[0])
 {
  case  CSFS_CLOSE:         /* close */
                   break;

  case CSFS_STATUS:         /* status */
                   err=discstat(r);
                   break;
  

  case    CSFS_GET:
                   err=discgetfile(r);
                   break;

  case    CSFS_PUT:
                   err=discputfile(r);
                   break;

  case CSFS_RENAME:
                   err=discrename(r);
                   break;

  case   CSFS_COPY:
                   err=disccopy(r);
                   break;

  case CSFS_DELETE:
                   err=discdelete(r);
                   break;

  case  CSFS_MKDIR:
                   err=discmkdir(r);
                   break;

  case  CSFS_RMDIR:
                   err=discddir(r);
                   break;

  case CSFS_SETTYPE:
                    err=disctype(r);
                    break;

 }

 return(err);
}

