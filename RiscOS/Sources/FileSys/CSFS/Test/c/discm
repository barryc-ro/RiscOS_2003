/*->c.discm */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "h.consts"

#include "h.csfs"

#include "h.etc"

#include "h.disc"
#include "h.discm"



#define DISCSWI  0x5E980





_kernel_oserror *disc_swi(int swi_number,_kernel_swi_regs *r,
                                                       void *private_word)
{
 _kernel_oserror * err;

 err=NULL;

 switch(swi_number)
 {
   case  0:
           err=disctransport(r);
           break;

 }

 return(err);
 USE(private_word);
 USE(r);
}





/* This is the finalisation code for DummyFS */

static void disc_finalise(void)
{
 _kernel_swi_regs r;

 r.r[0]=0;
 r.r[1]=(int)"Disc";
 _kernel_swi(CSFS_DeRegister,&r,&r);
}



static _kernel_oserror *disc_reg(void)
{
 _kernel_swi_regs r;

 r.r[0]=0;
 r.r[1]=(int)"Disc";
 r.r[2]=DISCSWI;
 r.r[3]=CSFS_NEEDMOUNTPATH|                                                             CSFS_GETSUPPORTED|
        CSFS_PUTSUPPORTED| 
        CSFS_RENAMESUPPORTED|
        CSFS_COPYSUPPORTED|
        CSFS_DELETESUPPORTED|
        CSFS_MKDIRSUPPORTED|
        CSFS_RMDIRSUPPORTED;

 return(_kernel_swi(CSFS_Register,&r,&r));
}



_kernel_oserror *disc_initialise(char *cmd_tail,int podule_base,
                                                   void *private_word)
{
 _kernel_oserror * err;

 err=NULL;

 disc_reg();

 atexit(disc_finalise);

 return(err);

 USE(cmd_tail);
 USE(podule_base);
 USE(private_word);
}





void disc_service(int service_number,_kernel_swi_regs *r,
                                                  void *private_word)
{


 switch(service_number)
 {

  case Service_CSFSStarting:
                            disc_reg();
                            break;
 }

 USE(r);
 USE(private_word);

}






#define MAXARG 16



static char buffer[256];


_kernel_oserror *disc_command(char *arg_string,int argc,int cmd_no,
                                                  void *private_word)
{
 _kernel_oserror *err=NULL;
 char * args[MAXARG];
 char * temptr=buffer;
 int    i;
 int    whitespace;


 argc=argc;
 private_word=private_word;

 for(;temptr-buffer<256 && *arg_string>=' ';arg_string++)
 {
  *(temptr++)=*arg_string;
 }

 *temptr='\0';

 arg_string=buffer;
 temptr=buffer;
 whitespace=1;
 i=0;

 while(1)
 {
  if(whitespace)
  {
   if(*temptr==0) break;
   else
   if(*temptr!=32)
   {
    args[i++]=temptr;
    whitespace=0;
   }
  }
  else
  {
   if(*temptr==0) break;
   else
   if(*temptr==32) 
   {
    whitespace=1;
    *temptr=0;
   }
  }
  temptr++;
 }



 switch(cmd_no)
 {
  case 0:
         break;

 }

 return(err);
}

