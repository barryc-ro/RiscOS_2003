/*->h.fx */



typedef struct fh
{
 int  state;
 int  length;
 int  acc;
 int  load;
 int  exec;
 int  alloc;
 int  isdir;
 int  modded;   	/* file changed ?             */
 int  open;     	/* times opened               */
 int  sn;       	/* scrap file number          */
 int  sh;       	/* scrap file handle          */
 int  was_locked:1;	/* flag to indicate needs locking on closure */
} fh;


/* values of 'state' */

#define OPENUNUSED 0
#define OPENPEND   1
#define OPENDISC   2




typedef struct filestr
{
 fh cat;
} filestr;



typedef struct filehandle
{
 int file;      /* number of the file structure for this handle */
 int pointer;   /* this is the pointer for this file handle     */
 int fshandle;  /* real, fileswitch handle for file             */
} filehandle;



#define DEFBSIZE 512


extern filestr    *   fsmap; /* maps file structure number to cat+data */
extern filehandle *   fmap;  /* maps file handles to file structures */





extern _kernel_oserror * getnewfilehandle(int acn,int fn,int new,int * fh);
extern _kernel_oserror * closefilehandle(int fh);
extern _kernel_oserror * getbytes(int fh,char * dest,int n,int offset);
extern _kernel_oserror * putbytes(int fh,char * src,int n,int offset);
extern _kernel_oserror * validextent(int fh,int extent,int write);


extern void updatefsmap(int acn,int fn);

extern _kernel_oserror * closeallfiles(int acn);


extern _kernel_oserror * fxinit(void);


