
Test plan for CacheFS
---------------------

Basically there are five parts to this:

    1.  Test module init/die and command handling
    2.  Test all normal filing system functions
    3.  Test dynamic uncaching of files and cache rearrangement
    4.  Test direct memory access functions
    5.  Benchmarks

To break this down further:

    1a  Check for register corruption in Init/Die/Service
    1b  Registration and deregistration as a filing system
    1c  Creation / deletion of dynamic area

    2a  OS_File (all reason codes)
    2b  OS_Find (open/close files)
    2c  OS_GBPB, and GetByte/PutByte
    2d  OS_Args
    2e  FSFunc

    3a  Correct maintenance of the LRU chain
    3b  Claiming and releasing memory when required
    3c  Freeing space within the cache
    3d  Expanding a file's allocated space
    3e  Basher that tests continual file creation of different sizes

        We must check that the cache and the pointers within open file
        handles remain consistent after the cache has been rearranged
        due to one or more files being deleted, or the allocated space
        for a file being increased or decreased.

    4a  Check that anchor pointers and sizes remain correct
    
    5a  Test speed of file copying compared to RAMFS
    
        Also check whether it makes much difference whether we use
        buffering for writing to files or not.

Breakdown of filing system operations:

    2a  OS_File 0  Save file
                1  Write catalogue info
                2  Write load address
                3  Write exec address
                4  Write attributes
                5  Read info using File$Path
                6  Delete
                7  Create file
                8  Create directory
                9  Write date/time stamp of file
               10  Save file with datestamp
               11  Create file with datestamp
               12  Load file using path string
               13  Read info using path string
               14  Load file using path variable
               15  Read info using path variable
               16  Load file without path
               17  Read info without path
               18  Set filetype
               20  Read info using File$Path
               21  Read info using path string
               22  Read info using path variable
               23  Read info without path
               24  Read natural block size
              255  Load file using File$Path

    2b  OS_Find 0  Close file(s)
              &4x  open for reading
              &8x  create for read/write
              &Cx  open for read/write

    2c  OS_BGet
        OS_BPut
        OS_GBPB 1  Write bytes at given pointer
                2  Write bytes at current file pointer
                3  Read bytes at given pointer
                4  Read bytes at current file pointer
                5  Read name and boot option of disc
                6  Read current dirname and privilege byte
                7  Read library name and privilege byte
                8  Read entries from current directory
                9  Read entries from specified directory
               10  Read entries and file info from specified dir
               11  Read entries and full filetype info from dir
               12  Read entries and filetype info from directory

    2d  OS_Args 0  Read pointer/FS number
                1  Write pointer
                2  Read extent
                3  Write extent
                4  Read allocated size
                5  Read EOF status
                6  Reserve space
                7  Get canonicalised name
                8  Inform of changed image stamp
              254  Read info on file handle
              255  Ensure file/files

    2e  FSEntry_Func (called from FileSwitch)
                0  Set current dir               * = not called
                1  Set library                   *
                2  Catalogue dir                 *
                3  Examine dir                   *
                4  Catalogue library             *
                5  Examine library               *
                6  Examine objects               *
                7  Set FS options
                8  Rename object
                9  Access object(s)              *
               10  Boot FS
               11  Read name and boot option
               12  Read dirname and privilege    *
               13  Read library and privilege    *
               14  Read dir entries
               15  Read dir entries and info
               16  Shutdown
               17  Print startup banner
               18  Set dir contexts              *
               19  Read dir entries and info
               20  Print full info               *
               23  Canonicalise special field    *
               24  Resolve wildcard              *
               25  Read defect list
               26  Add defect
               27  Read boot option
               28  Write boot option
               29  Read used space map
               30  Read free space
               31  Name image
               32  Stamp image
               33  Get usage of offset
               34  Notification of changed dir

