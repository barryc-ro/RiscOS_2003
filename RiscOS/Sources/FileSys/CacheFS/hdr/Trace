;> Hdr.Trace

Trace_SWIChunk      *   &40B80       ; Graham Bartram SWI chunk - it's safe enough!

XTrace_Open         *   &60B80
XTrace_Close        *   &60B81
XTrace_Write        *   &60B82
XTrace_Flush        *   &60B83

;       TraceO  "Pipe:Trace"            ; open file for trace output
;       TraceO                          ; close trace output
;       Trace   S,"string"              ; sends "string"
;       Trace   D,R0                    ; sends R0 in decimal
;       Trace   X,R0                    ; sends R0 in hex
;       Trace   C,R0                    ; sends R0 as a character string
;       Trace   S,"string",D,R0,X,R1    ; sends "string", then R0 in decimal

TRACEBUFFSIZE   *       516             ; actually 512 bytes for the buffer itself

        GBLL    TRACE
TRACE   SETL    {FALSE}

        MACRO
$label  Adr     $reg,$addr,$cc
      [ TRACE
$label  ADR$cc.L $reg,$addr
      |
$label  ADR$cc  $reg,$addr
      ]
        MEND

        MACRO
$label  Ldr     $reg,$addr,$cc
      [ TRACE
$label  ADR$cc.L $reg,$addr
        LDR$cc   $reg,[$reg]
      |
$label  LDR$cc  $reg,$addr
      ]
        MEND

        MACRO
$label  LdrB    $reg,$addr,$cc
      [ TRACE
$label  ADR$cc.L $reg,$addr
        LDR$cc.B $reg,[$reg]
      |
$label  LDR$cc.B $reg,$addr
      ]
        MEND

        MACRO
$label  Str     $reg,$addr,$cc
      [ TRACE
      [ $reg = R14
$label  STMFD   SP!,{R0}
        ADR$cc.L R0,$addr
        STR$cc   $reg,[R0]
        LDMFD   SP!,{R0}
      |
$label  STMFD   SP!,{R14}
        ADR$cc.L R14,$addr
        STR$cc   $reg,[R14]
        LDMFD   SP!,{R14}
      ]
      |
$label  STR$cc  $reg,$addr
      ]
        MEND

        MACRO
$label  TraceO  $filename
$label
      [ TRACE
        STMFD   SP!,{R0,R1,LR}
        MOV     R1,PC
      [ "$filename"<>""
        ADR     R0,%FT01
        SWI     XTrace_Open
        B       %FT02
01
        DCB     "$filename",0
        ALIGN
02
      |
        SWI     XTrace_Close
      ]
        TEQP    R1,#0
        MOV     R0,R0                   ; avoid banked register warning
        LDMFD   SP!,{R0,R1,LR}
      ]
        MEND

        MACRO
$label  TraceIf $cc,$v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
$label
      [ TRACE
        B$cc    %FT56
        B       %FT57
56
        Trace   $v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
57
      ]
        MEND

        MACRO
$label  Trace   $v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
$label
      [ TRACE
        STMFD   SP!,{R0-R12,LR}
        MOV     R12,PC
        STR     R12,[SP,#-TRACEBUFFSIZE]!
        ADD     R12,SP,#4               ; R12 -> buffer for creating trace output
        TraceX  "S",$v1
        TraceX  $t2,$v2,space
        TraceX  $t3,$v3,space
        TraceX  $t4,$v4,space
        TraceX  $t5,$v5,space
        TraceX  $t6,$v6,space
        TraceX  $t7,$v7,space
        TraceX  $t8,$v8,space
        TraceX  $t9,$v9,space
        MOV     R0,#&0A                 ; stick linefeed on the end
        STRB    R0,[R12],#1
        MOV     R0,#&0
        STRB    R0,[R12]
        ADD     R0,SP,#4
        SWI     XTrace_Write
        LDR     R12,[SP],#TRACEBUFFSIZE
        TEQP    R12,#0                  ; restore flags
        MOV     R0,R0                   ; avoid banked register warning
        LDMFD   SP!,{R0-R12,LR}
      ]
        MEND

        MACRO
        TraceX  $type,$value,$space
      [ "$type"<>""
      [ "$space"<>""
        MOV     R14,#' '
        STRB    R14,[R12],#1
      ]
      [ "$type"="S"
        ADR     R0,%FT10
05      LDRB    R14,[R0],#1
        CMP     R14,#0
        STRNEB  R14,[R12],#1
        BNE     %BT05
        B       %FT15
10
        DCB     "$value", 0
        ALIGN
15
      |

; get appropriate register value in R0

      [ $value = R0
        LDR     R0,[SP,#TRACEBUFFSIZE+0*4]
      |
      [ $value = R1
        LDR     R0,[SP,#TRACEBUFFSIZE+1*4]
      |
      [ $value = R2
        LDR     R0,[SP,#TRACEBUFFSIZE+2*4]
      |
      [ $value = R12
        LDR     R0,[SP,#TRACEBUFFSIZE+12*4]
      |
      [ $value = R13
        ADD     R0,SP,#TRACEBUFFSIZE+14*4
      |
      [ $value = R14
        LDR     R0,[SP,#TRACEBUFFSIZE+13*4]
      |
        MOV     R0,$value
      ]
      ]
      ]
      ]
      ]
      ]

; C => character string, X => hex, D => decimal

      [ "$type"="C"
        MOV     R14,#""""
        STRB    R14,[R12],#1
05      LDRB    R14,[R0],#1
        CMP     R14,#0
        STRNEB  R14,[R12],#1
        BNE     %BT05
        MOV     R14,#""""
        STRB    R14,[R12],#1
      |
        MOV     R1,R12
        MOV     R2,#16
      [ "$type"="X"
        SWI     XOS_ConvertHex8
      |
      [ "$type"="D"
        SWI     XOS_ConvertInteger4
      |
        ERROR   1,"Invalid type '$type' in Trace macro"
      ]
      ]
        MOV     R12,R1
      ]
      ]
      ]
        MEND

        END
