<html>
<head>
  <title>
    CacheFS Software Functional Specification
  </title>
</head>

<body BGCOLOR="#ffffff">


<center>
<img src="./pics/nclogo.gif">
  <h1>
    CacheFS Software Functional Specification 
  </h1>
</center>

<p>
<hr>

<blockquote>
  <pre>
    Distribution: COMPANY CONFIDENTIAL

    Project:      NC Model 1
    Issue:        0.09
    Author(s):    Neil Raine
    Date:         03-May-96
    Last Issue:   0.08
  </pre>
</blockquote>
<hr>

<h2> Contents. </h2>
<ul>
  <li> <a href="#history">      History </a>
  <li> <a href="#outstanding">  Outstanding issues </a>
  <li> <a href="#overview">     Overview </a>
  <li> <a href="#technical">    Technical background </a>
  <li> <a href="#acceptance"> 	Acceptance test </a>
  <li> <a href="#test"> 	Development test strategy </a>
  <li> <a href="#organisation"> Product organisation </a>
  <li> <a href="#enhancements"> Future enhancements </a>
</ul>

<hr>

<h2> <a name="history"> History </a> </h2>

<PRE>
        0.01 NRaine 19-Apr-96 Created.
        0.02 NRaine 22-Apr-96 Discussion of background processing issues.
        0.03 NRaine 22-Apr-96 Background data access disallowed.
        0.04 NRaine 23-Apr-96 Alternative free pool introduced.
        0.05 NRaine 26-Apr-96 Locked files shouldn't be deleted.
        0.06 NRaine 29-Apr-96 Create/delete directory stuff.
        0.07 NRaine 29-Apr-96 Improve cache deletion policy.
        0.08 NRaine 29-Apr-96 Restrictions on open files.
        0.09 SMC    03-May-96 Changed to HTML format.
</PRE>

<HR>

<h2> <a name="outstanding"> Outstanding issues </a> </h2>

<P> Are there any outstanding issues?

<HR>

<h2> <a name="overview"> Overview </a> </h2>

<P> The CacheFS module provides a filing system, called CacheFS, with the
prefix "Cache:", which registers itself in the normal way with
FileSwitch.

<P> As much of the available free memory as possible is used to cache
files in a dynamic area, with the least recently used files being
automatically deleted if more memory is required:

<P><UL>
    <LI> Because a new file is to be loaded into CacheFS <BR>
    or
    <LI> because some other dynamic area (or the RMA etc) requires
         the memory, in which case CacheFS's file cache will be
         automatically shrunk.
</UL>

<HR>

<h2> <a name="technical"> Technical background </a> </h2>

<P><H3> Free space handling </H3>

<P> Rather than use the free pool area itself, I think it would be better
if CacheFS created its own dynamic area, and the kernel's dynamic area
handler code was changed so that it called the handler for the CacheFS
dynamic area with a new reason code to find out how much memory could
be freed up.  It could then use OS_ChangeDynamicArea to shrink the
CacheFS area, at which point the dynamic area handler would be
notified in the normal way, and the relevant files deleted to make
room for some memory to be released.

<P> Note that in general CacheFS cannot release ALL of its memory, since
files which are locked or open cannot be deleted.  It must therefore
work out how many whole pages can be released.

<P> There are some issues concerning how the Wimp will interact with all
this, since it calls OS_ReadDynamicArea to find out how much free
space is available.  It may be that this call will have to be altered
to return the 'virtual' free space as well as the actual free pool
size, so that the Wimp doesn't return an error if you try to allocate
more application memory than is available in the actual free pool.

<P> If some other application calls Wimp_ClaimFreeMemory, there is also an
issue of whether the actual free pool should be returned, or it should
first be grown to a certain minimum size by grabbing memory from
CacheFS.  On the other hand, it may be possible to outlaw this call,
and to alter any relevant applications to use some other mechanism.

<P> It's also possible that other applications may assume that dynamic
area 6 (the free pool) can be used as scratch space - if
OS_ReadDynamicArea (6) returns the amount that COULD go into the free
pool, it's possible that an application could unwittingly write data
off the end of the free pool.

<P> Because of this, it may be better to leave OS_ReadDynamicArea(6)
alone, and change Wimp_SlotSize instead to return the virtual free
space available.  The Wimp would need to call some new kernel-level
routine to find out this value, however.

<P><H3> Cache deletion policy </H3>

<P> Basically the least-recently used files that are not locked and not
open are deleted, where any kind of access counts (except when a file
simply appears in a directory enumeration list).

<P> This is not quite true: since files vary in size, it is possible for
CacheFS to find that once it has deleted enough files to satisfy the
memory request, it is possible to reinstate some of the files that it
had previously deleted.

<P> For example, if the following files exist in the cache (least-recently
used at the top):

<P><UL>
        File1   45k <BR>
        File2   45k <BR>
        File3  100k
</UL>

<P> and CacheFS needs to free up 110k of memory, it will first mark all 3
files for deletion (since the first 2 together will not satisfy the
request), and will then find that it can reinstate File2, since that
still means that 145k will be freed.  Note that it reinstates File2
rather than File1, since it is the more recently-used of the two.

<P> Since CacheFS always relinquishes its memory when asked to do so, it
must be advantageous to keep hold of as many files as possible (as
long as this method doesn't impose too much of an overhead on the
deletion process).

<P><H3> Recaching files </H3>

<P> It is envisaged that applications using CacheFS to store copies of
remotely-loaded data will deal with the issues of loading the file if
it isn't cached already, and making a note of the cached filename once
it has been saved into CacheFS.

<P> In this way CacheFS can be used just like ADFS, to store files locally
for later re-use.  However, since CacheFS is a RAM filing system, you
can see that using it like ADFS is not ideal, since you will typically
end up with two copies of a file in memory at once - one inside
CacheFS, and the other buffered in the application's own workspace.

<P> Also, since any call within the system which causes memory to be taken
from the free pool could cause the deletion of one or more files from
CacheFS, if an application wants to load a previously-cached file into
a block of its own memory, it may find that it performs the following:

<P><OL>
    <LI> Read CacheFS file info to determine whether it still exists, and
         if so how big it is.
    <LI> Allocate a block of memory for it.
    <LI> Load the file into the block.
</OL>

<P> Since step (2) could cause the file to be deleted, you could end up
with an error at step (3), as the file no longer exists!  Note that
this could only happen if there was not enough memory for the file at
all, since all other files would be deleted first (this one would be
the most recently used).

<P> Ideally, when caching files, you only want to keep one copy of the
data in memory, so to avoid the above problem, applications should
cache data directly into a CacheFS file, and then access the data
directly from CacheFS's memory (see below).

<P> Alternatively, the application should cache the object by loading it
into its own workspace directly, and then save the result into CacheFS
just before using it - WITHOUT first reloading the data from CacheFS.

<P> This way, if there is no room to store the data within CacheFS, it can
still be accessed as long as there is enough memory to load one copy
of the data.  Note that the application has to be able to check for an
error at step 3, not just step 2.  In fact step 2 can be avoided if a
note of the data size is made along with the filename.

<P> Note also that when saving data into CacheFS, an out-of-memory error
could be returned.  This error should not be reported to the user - it
simply means that the data cannot be cached, but since the application
already has a copy in memory somewhere, it can still use it this time
around.  It's best for CacheFS to return an error, since if the data
is being written using OS_GBPB, you need to give up and close the
file.

<P><H3> Accessing file data directly within CacheFS's workspace </H3>

<P> The internal file handle of a file (which can be obtained by calling
OS_FSControl 21 on the open file handle) points to a block of memory,
the first word of which points to the start of the file data.  This
address is kept up-to-date (ie. it's updated if other files are
deleted, causing the file data to move), so that it can be treated as
an anchor pointer.

<P> Since open files cannot be deleted, the file data must remain valid as
long as the file remains open.

<P> To make it easier to plot sprites directly from memory, the word
before the file data itself also contains the length of the file plus
4.  To plot a sprite from the file, use a sprite area pointer of &lt;file
address&gt; - 4.

<P> Note that the correct OS_GBPB calls should be used to write data to a
file if it could change the length of the file.

<P><H3> Background processing issues </H3>

<P> Basically, IRQ routines must not be allowed to access CacheFS file
data directly, since they could be invoked while CacheFS is busy
copying file data around, in which case all hell would break loose!

<P> It is not worth disabling interrupts while CacheFS is copying data -
instead, callbacks should be used if a background process wants to
access CacheFS.  This way, the legal filing system calls can be used
as well as the direct access method.

<P><H3> Filing system calls implemented </H3>

<P> The underlying filing system will only deal with full pathnames, but
in any case FileSwitch converts relative filenames to absolute ones
before handing them on to the filing system.

<P> Similarly the various calls to load or save a named file, or read
its catalogue info, using the various path options, are converted by
FileSwitch automatically before the underlying filing system sees
them, so they all work OK.

<P> Wildcards (* and #) are supported.

<P> Calls which increase the size of a file can cause other files to be
automatically deleted to make room.  However, open files (not
necessarily the same one whose size was being altered) will not be
discarded.  This means that if you want a file to be discardable, you
must not keep it open, but instead only open it when required.

<P> If a file is accessed that has been implicitly discarded by the
system, it is dealt with by CacheFS exactly as for the case where the
file didn't exist anyway.  I don't think there's any advantage in
distinguishing the two cases, and it makes it easier to implement.

<P> The full set of access permissions is implemented, ie. read, write and
lock.  Locking a file also ensures that a file cannot be automatically
deleted by CacheFS.  This may be a better alternative than opening the
file, especially as there's a limit of 256 open files imposed by
FileSwitch.

<P> The various filing system entry points that set the current directory
and library etc. are only called on RISC OS 2, so I will not provide
them.  On RISC OS 3, FileSwitch does all this stuff itself.

<P> Reading and writing the defect list is not supported!

<P> The filing system does its own buffering (in fact it can access the
data directly anyway), thus avoiding FileSwitch having to copy the
data all over again.

<P> OS_GBPB 11 and 12 (enumerate directory entries with full info and a
bit more) are not supported - OS_GBPB 10 instead.

<P><H3> Restrictions on open files </H3>

<P> FileCore-based filing systems do not allow certain operations on open
files:

<P> Disallowed if open for reading or writing:

<P><UL>
        Rename file (but rename of the parent directory is OK) <BR>
        Opening again for writing <BR>
        Delete file <BR>
        Save file (over the top of the existing one) <BR>
</UL>

<P> Disallowed if open for writing:

<P><UL>
        OS_File operations to load the file directly <BR>
        Opening again for reading or writing <BR>
</UL>

<P> In case certain applications are relying on this behaviour, CacheFS
will also have these restrictions.

<P><H3> Subdirectories </H3>

<P> The filing system supports hierarchical directories, with any number
of files in a directory.

<P> I anticipate that it will actually be more useful (as well as easier
to implement within CacheFS) if the structure internally is simply a
list of the existing files with their full pathnames, and the
enumerate directory calls are 'faked' so that the files appear to
reside within a hierarchical structure.

<P> To get the best of both worlds, CacheFS appears to work with both the
explicit and implicit directory creation models.

<P> This means that if you create a file in a directory that doesn't
exist, the directory appears to be automatically created, and will be
automatically deleted when all files in that directory are deleted.

<P> Conversely, if you create a directory explicitly, this will only take
effect if the directory didn't exist already (and no files in it had
yet been created either).  Once the directory has been explicitly
created, it will not disappear until it is explicitly deleted (and
there are no more files in it).  Note that the *Wipe command will
delete the directory contents explicitly before deleting the
directory, so this will work OK.

<P> An explicitly-created directory can have its filetype, datestamp and
attributes (eg. lock) altered, but an implicit directory always has
access bits of 0 (the default for a directory), is of filetype &amp;FFD
(data) and takes its datestamp from the first file in the directory.

<P> If an explicitly-created directory is not locked, it is possible that
CacheFS itself may decide to delete it to make room for something
else.  This may not have any immediately-noticed effects, if there are
also files in the directory, but later on it may mean that the
directory subsequently disappears when the last file is deleted from
it.

<P> I anticipate that most programs will not bother with explicit
directory creation, but it could be a useful back-compatibility
feature.

<P> The most likely use of subdirectories will be to ensure unique
filenames (ie. an application will create files within its own
directory), so as long as the directory enumeration stuff works as
expected (eg. so you can delete a whole directory), everything will be
fine.

<HR>

<h2> <a name="acceptance"> Acceptance test </a> </h2>

To be determined.

<HR>

<h2> <a name="test"> Development test strategy </a> </h2>

To be determined.

<HR>

<h2> <a name="organisation"> Product organisation </a> </h2>

The CacheFS sources will form part of the NC model 1 ROM build.

<HR>

<h2> <a name="enhancements"> Future enhancements </a> </h2>

<P> None planned at present.

</body>
</html>