
Bugs found in FileSwitch so far
===============================

For unbuffered files:

    OS_Find &8x on an existing file doesn't set the extent to 0
        
            It also calls the underlying filing system with the same
            reason code as it does for OS_Find &Cx, so it's not
            possible for the filing system to work round this (except
            by using buffered files!).
            
    OS_Args 3 (set file extent) is allowed on a read-only file
    
            FileSwitch should return "Not open for update", but it
            only checks this for buffered files.
            
            This bug is nevertheless easy to fix within CacheFS.

For buffered files:

    OS_Args 6 sets the file's size, as well as the allocated space
    
            According to the documentation, this call should not
            affect the file's extent (which it doesn't), but what it
            doesn't mention is that the file's size (as in OS_File 5)
            must be set to indicate the allocated space, so that if
            you call OS_GBPB(3) later on, it is able to read from
            parts of the file which aren't yet within the extent, but
            which are within the allocated space.
            
                eg.  SYS "OS_Find",&8C,"Cache:$.File" TO h%
                     SYS "OS_Args",3,h%,&1000
                     SYS "OS_GBPB",3,buffer%,&1000
                     CLOSE #h%
            
            The sequence of calls made by FileSwitch to the filing
            system are:
            
                     FSEntry_Open
                     FSEntry_Args 7 (ensure space)
                     FSEntry_Args 8 (write zeroes)
                     FSEntry_GetBytes (read data)
                     FSEntry_Args 3 (write file extent)   
                     FSEntry_Close
                     
            Note that because the file is buffered, FSEntry_Args 3 is
            not called until the handle is closed, but unfortunately
            before this, the FSEntry_GetBytes call assumes that
            it will be able to read data beyond the current extent,
            since the file's "size" is set by the ensure space call.

            The fix is that when dealing with buffered files, the
            filing system's FSEntry_GetBytes routine MUST NOT check
            that the offset and size are within the file's extent, but
            instead assume that FileSwitch knows what it is doing.

    OS_GBPB 3 (read from PTR) doesn't always set R4 to new fileptr
    
            If you read from beyond the end of the file, R4 is left
            unaltered, instead of being set to the new fileptr.

Other problems:

    OS_GBPB 8 (old enumerate directory entries call)
    
            After the last entry is read, this returns with R3=0, R4 =
            offset of next entry, but it should return with R4 = -1. 
            It does this despite the fact that the underlying filing
            system has returned with R4 = -1.


Summary
-------

If CacheFS is unbuffered, which would be the most efficient solution,
the following incompatibilities with FileCore-based filing systems
would exist:

        1) OS_Find &8C doesn't zero existing file's extent
        2) File size equals file extent even when open for writing
        3) OS_GBPB 4 sets R4 = file ptr on exit

If CacheFS is buffered, the following incompatibilities would exist:

        1) File size equals file extent even when open for writing

