
Format of data within the CacheFS pool
======================================

We need SOME links into the list of files, so these need to be
relocated when files are uncached or grown/shrunk.  Its actually
simplest to have these in the file headers (eg. LRU forward and
backward links), and in open file handle blocks, since we can fairly
easily relocate them all when data is copied up or down.
       
Note that while a file is open, it is not on the LRU chain.

In this description, (*) denotes an entry that is auto-relocated when
the cache moves.

At the start of the cache is an array of file header pointers, which
are arranged in ascending alphabetical order of full name (with case
ignored).  This automatically means that directory entries are
arranged in order, which in turn means that file name lookup can use
binary chop, and directory enumeration only needs to compare each name
with the preceding one (rather than all the others).

Following the list of file pointers (and a space for hysteresis), the
cache consists of a series of file entries of the form:

        Offset to next entry (also indicates file grow space)
        Offset to file data (ie. size of header)
        Address of next entry in LRU chain         (*)
        Address of previous entry in LRU chain     (*)
        Load address of file
        Exec address of file
        Size of file (ie. extent)
        Attribute word of file
        Number of open file handles
        Number of open writable file handles (0 or 1)
        Full filename, zero-padded to a word boundary
        Offset back to start of header block
        Size of data + 4 (for direct OS_SpriteOp calls)
        <file data - word-aligned at start and zero-padded at end>

Format of other data (in RMA)
=============================

Note that allocating anything in here could cause the file cache to be
altered, by deleting one or more files.  This could get interesting if
(for example) we're opening a file handle.  In addition to relocating
the open file handle pointers, there's a one-entry relocation word
which is used for stashing the current file header pointer while (eg.)
allocating memory in the RMA.

Format of open file descriptors:

        Address of file data                       (*)
        Link to next
        Access flags (read and/or write etc.)
        Current file offset

Various operations cause a file to be moved to the tail of the LRU
chain, including closing the file (if the last open handle is closed -
otherwise the file can't be deleted anyway).


The root object
===============

To improve performance, the root 'directory' is cached, containing the
FULL pathnames of all files within CacheFS.

This arrangement decreases the time taken to:

   1) Access a file given its name
   2) Perform directory enumeration.
   
The root directory is contained within a file, and consists of a
series of file pointers, maintained in alphabetical order.  This
allows use of a binary chop search mechanism, which speeds up filename
matching when there are a lot of files in the system.


Directory enumeration
=====================

This is unfortunately not quite as simple as it seems!

Since the caller can make several calls to enumerate the files in a
directory, an offset is passed back out, which is used on the next
call to resume enumeration.

Unfortunately, it is possible for the list of files to be altered in
between, for example by deleting a file, which means that the offset 
may become invalid for the next call, unless special care is taken
within the directory enumeration code.

Strictly speaking we want the directory enumeration to return
the list of files as they were when the first call was made to
enumerate the directory (ie. with offset = 0).

This means we need to build a separate list block in the RMA for each
active enumeration, containing the list of file pointers for the
directory contents when the enumeration started.

This block can be deleted when:

        a) The directory enumeration terminates
   or   b) All files in the directory are deleted.
   or   c) When CacheFS is killed off or re-initialised.

In theory a large number of enumeration blocks could be active, which
would be unfortunate if it led to significant memory leakage, but this
is unavoidable with the semantics of the directory enumeration call. 
Under normal circumstances, directory enumeration will proceed to
completion, so blocks like this should not be left around for too
long.

A cunning ruse which allows multiple concurrent directory enumerations
to proceed would be to 'tag' each enumeration by generating an
'offset' for the next file which consists of a 16-bit identifier for
the enumeration, and a 16-bit offset within the enumeration block.

Of course, the pointers within each enumeration block would have to be
dynamically relocated (and possibly set to null) as files are moved
around in the cache.

