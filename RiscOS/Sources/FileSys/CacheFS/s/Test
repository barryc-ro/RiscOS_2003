
; Test routines for CacheFS
; Mainly checks that everything is consistent, and traces the contents of the cache

; First checks the size of the cache and the dynamic area
; Then checks that all file headers are correct, noting the free list (if any)
; Then checks that the LRU chain is consistent
; Then checks that all file handles are consistent with the file headers

      [ TRACE

TraceCache  ENTRY  "R0-R11"

        SavePSR r1
        Push    r1
; Check size of cache and dynamic area

        LDR     R1, CacheFSFileData
        LDR     R2, CacheFSFileSize
        LDR     R3, CacheFSAreaSize

        TST     R1, #3
        TSTEQ   R2, #3
        TSTEQ   R3, #3
        BNE     %FT01

        CMP     R1, R2
        BLS     %FT02
01
        TraceIf EQ, "*** BARF: CacheFS data file/area size",X,R1,X,R2,X,R3
        BEQ     %FT95

; Go through file header list, watching out for the free chain as well

02
        ADD     R2, R1, R2                      ; R2 -> end of files
        LDR     R3, CacheFSFreeNext             ; R3 -> next free area

        CMP     R3, #0
        TraceIf NE, "*** BARF: free space list non-null",X,R3
        BNE     %FT95

        B       %FT50

03
        BL      validfileheader                 ; check that R1 is valid
        STRVS   R0,[SP,#4]!
        EXIT    VS

        CMP     R3, #1                          ; LO => no more free blocks
        CMPHS   R1, R3
        LDRLO   R14, [R1, #CacheFile_Offset]
        ADDLO   R1, R1, R14
        BLO     %FT50

        ; Validate this free block

        TraceIf NE,"*** BARF: File has skipped free list",X,R1,X,R3
        BNE     %FT95

        LDMIA   R3, {R4, R5}                    ; R4 = size, R5 = next

        TST     R4, #3
        TSTEQ   R5, #3
        BNE     %FT04

        CMP     R4, #0
        BLE     %FT04

        ADD     R1, R3, R4
        CMP     R1, R2                          ; it's allowed to point to the end
        BLNE    validfileheader                 ; else check that there's a file following
        BVS     %FT04

        CMP     R5, #0                          ; have we reached the end of the free list
        MOVEQ   R3, #0
        BEQ     %FT05

        CMP     R5, R3                          ; else check that the next one's further on
        MOVHI   R3, R5
        BHI     %FT05
04
        Trace   "*** BARF: Invalid free block",X,R3,S,"size",X,R4,S,"next",X,R5
        B       %FT95
05

50      CMP     R1, R2
        BLO     %BT03

        ; Check that we reached the end of the free list

        CMP     R3, #0
        TraceIf NE, "*** BARF: remaining free list",X,R3
        BNE     %FT95

        ; Now check the open file handles

        MOV     R7, #0                                  ; count memory allocated to open files

        LDR     R2, CacheFSHandles
        B       %FT65

60      LDR     R1, [R2, #CacheHandle_Data]
        LDR     R14, [R1, #CacheFile_Offback]
        ADD     R1, R1, R14

        BL      validfileheader
        TraceIf VS,"***       internal file handle was",X,R2
        STRVS   R0,[SP,#4]!
        EXIT    VS

        LDR     R14, [R1, #CacheFile_Count]
        CMP     R14, #0
        TraceIf LE, "*** BARF: File not marked open",X,R1
        BLE     %FT95

        LDR     R14, [R1, #CacheFile_Data]
        ADD     R1, R1, R14

        LDR     R5, [R2, #CacheHandle_Next]             ; check for any OTHER file handle pointing here
        B       %FT63

62      LDR     R14, [R5, #CacheHandle_Data]
        TEQ     R14, R1
        BEQ     %FT64
        LDR     R5, [R5, #CacheHandle_Next]
63      CMP     R5, #0
        BNE     %BT62

64      LDR     R14, [R1, #CacheFile_Offback]
        ADD     R1, R1, R14

        CMP     R5, #0
        LDREQ   R14, [R1, #CacheFile_Offset]
        ADDEQ   R7, R7, R14                             ; update memory count

        LDR     R2, [R2, #CacheHandle_Next]
65      CMP     R2, #0
        BNE     %BT60

        ; Now check the LRU chain

        ADR     R1, CacheFSHead
        MOV     R5, R1

70      LDR     R2, [R1, #CacheFile_Next]
        LDR     R14, [R2, #CacheFile_Previous]

        TEQ     R2, #0
        TEQNE   R14, #0
        TraceIf EQ, "*** BARF: LRU link incorrect",X,R1,X,R2
        BEQ     %FT95

        TEQ     R14, R1
        TraceIf NE, "*** BARF: LRU link incorrect",X,R1,X,R2
        BNE     %FT95

        MOV     R9, R1
        MOV     R1, R2
        CMP     R1, R5
        BLNE    validfileheader
        TraceIf VS,"***       LRU previous link was",X,R9
        STRVS   R0, [SP,#4]!
        EXIT    VS

        CMP     R1, R5
        BEQ     %FT75

        LDR     R14, [R1, #CacheFile_Offset]
        ADD     R7, R7, R14

        LDR     R14, CacheFSFileSize                            ; check for out of memory now, in case we end up looping
        CMP     R7, R14
        TraceIf HI,"*** BARF: LRU chain looping",X,R7,X,R14
        BHI     %FT95

        B       %BT70

75      LDR     R14, CacheFSFileSize
        CMP     R7, R14
        TraceIf NE,"*** BARF: LRU chain lost",X,R7,X,R14
        BNE     %FT95

; Finally check that the root object is present and correct

        LDR     R1, CacheFSRoot
        CMP     R1, #0
        BNE     %FT76

        LDR     R14, CacheFSFileSize
        CMP     R14, #0
        TraceIf NE, "*** BARF: no root object present"
        BNE     %FT95
        B       %FT90

76      BL      validfileheader
        BVS     %FT95

        LDR     R2, [R1, #CacheFile_Data]
        ADD     R2, R1, R2                              ; R2 -> file pointers
        LDR     R3, [R1, #CacheFile_Size]
        TST     R3, #3
        TraceIf NE, "*** BARF: Wrong root data size",X,R3
        BNE     %FT95

        ADD     R3, R2, R3                              ; R3 -> end of file pointers

        MOV     R4, R2

        CMP     R2, R3
        BHS     %FT90

        ; first check that the file header pointers are valid

77      LDR     R1, [R2], #4
        BL      validfileheader
        BVS     %FT95

        CMP     R2, R3
        BLO     %BT77

        ; now check that they're in the correct order

        MOV     R2, R4

        LDR     R1, [R2], #4
        CMP     R2, R3
        BHS     %FT90

78      ADD     R10, R1, #CacheFile_Name
        LDR     R1, [R2], #4
        ADD     R11, R1, #CacheFile_Name
        Push    "R10,R11"
        BL      compare_filenames_test
        Pull    "R10,R11"
        TraceIf GE, "*** BARF: filenames in wrong order",C,R10,C,R11
        BGE     %FT95

        CMP     R2, R3
        BLO     %BT78

; All OK - return with V clear, and other flags preserved

90
        Pull    lr
        BIC     lr, lr, #V_bit
        RestPSR lr,,f
        EXIT

; Knackered - return with R0 -> error, V set, other flags preserved

95      ADR     R0, errblock_knackered
        LDR     r1, [SP], #4
        STR     R0, [SP]
        ORR     r1, r1, #V_bit
        RestPSR r1,,f
        EXIT

errblock_knackered
        DCD     1
        DCB     "Cache corrupt", 0
        ALIGN

; *****************************************************************************

; Check that a given pointer references a valid file address,
; and that its contents are appropriate.

validfileheader  ENTRY  "R2-R9"

        ; First check that it's word-aligned and in the correct address range

        TST     R1, #3
        BNE     %FT10

        LDR     R2, CacheFSFileData
        LDR     R3, CacheFSFileSize
        ADD     R3, R2, R3

        CMP     R1, R2
        BLO     %FT10
        CMP     R1, R3
        BLO     %FT20
10
        Trace   "*** BARF: Invalid file header address",X,R1
        B       %FT95

20
        ; Now try to find it in the list

        LDR     R4, CacheFSFreeNext
        CMP     R4, #0
        TraceIf NE, "*** BARF: free space list non-null",X,R4
        BNE     %FT95

03
        TST     R2, #3
        BNE     %BT10
        CMP     R2, R1
        BHI     %BT10
        BEQ     %FT60                           ; we've found it!

        CMP     R4, #1
        CMPHS   R2, R4
        LDRLO   R14, [R2, #CacheFile_Offset]
        ADDLO   R2, R2, R14
        BLO     %BT03

        ; Validate this free block

        TraceIf NE,"*** BARF: File has skipped free list",X,R1,X,R2,X,R4
        BNE     %FT95

        LDMIA   R4, {R5, R6}                    ; R5 = size, R6 = next

        TST     R5, #3
        TSTEQ   R6, #3
        BNE     %FT04

        CMP     R5, #0
        BLE     %FT04

        ADD     R2, R4, R5
        CMP     R2, R3                          ; it's allowed to point to the end
        BHI     %FT04

        CMP     R6, #0                          ; have we reached the end of the free list
        MOVEQ   R4, #0
        BEQ     %BT03

        CMP     R6, R4                          ; else check that the next one's further on
        MOVHI   R4, R6
        BHI     %BT03
04
        Trace   "*** BARF: Invalid free block",X,R3,S,"size",X,R4,S,"next",X,R5
        B       %FT95

        ; Now check the header info
        ; Basically the data offset must correspond with the end of the filename
        ; Then check that the backward pointers work

60      LDMIA   R1, {R2-R8}                     ; offset, data, next, prev, load, exec, size

        LDR     R14, = &80000003
        TST     R2, R14                          ; these must all be word-aligned (and positive)
        TSTEQ   R3, R14
        TSTEQ   R4, R14
        TSTEQ   R5, R14
        BNE     %FT90

        ADD     R14, R3, R8                     ; R14 = data offset + data size
        CMP     R14, R2                         ; compare with space used by file
        TraceIf HI, "*** BARF: file",X,R1,S,"data+size > offset",X,R3,X,R8,X,R2
        BHI     %FT95

        ADD     R9, R1, #CacheFile_Name
21      LDRB    R14,[R9],#1
        CMP     R14,#32
        BHI     %BT21

        TEQ     R14,#0
        BNE     %FT90                           ; must be zero-terminated

        ADD     R9,R9,#3
        BIC     R9,R9,#3                        ; round up to word boundary

        ADD     R9, R9, #8                      ; skip offback and sizeplus

        SUB     R14, R9, R1                     ; R14 = offset to end of filename

        CMP     R14, R3                         ; check data offset points to end of filename
        ADDNE   R9, R9, #4
        ADDNE   R14, R14, #4                    ; (also allow for a 4-byte gap, due to rename not being able to delete a 4-byte block)
        CMPNE   R14, R3
        BNE     %FT90

        LDR     R7,[R9,#CacheFile_Offback]      ; check offback goes back to start
        ADDS    R7, R14, R7
        BNE     %FT90

        LDR     R7, [R9, #CacheFile_SizePlus]   ; check sizeplus is file size + 4
        SUB     R14, R7, #4
        CMP     R14, R8
        TraceIf NE, "*** BARF: Bad sizeplus value for file",X,R1,X,R7,X,R8
        BNE     %FT95

        SUB     R14, R2, R3                     ; space available for file data
        CMP     R8, R14
        BGT     %FT90

        EXIT

90
        Trace   "*** BARF: Invalid file header",X,R1
95
        ADR     R0, errblock_badfileheader
        SETV
        EXIT

errblock_badfileheader
        DCD     1
        DCB     "Invalid file header pointer", 0
        ALIGN

        LTORG

;......................................................................

; In    R10 -> filename1
;       R11 -> filename2
; Out   LT,EQ,GT as for R10 cmp R11
; NB:   Comparisons are case-insensitive (both strings forced to be upper case)
;       Dots in the filename are equivalent to CHR$(1), ie. less than any other code except terminator

compare_filenames_test ENTRY "R1,R2"

10      LDRB    R1, [R10], #1
        LDRB    R2, [R11], #1
        uk_UpperCase R1, R14
        uk_UpperCase R2, R14
        CMP     R1, #"."
        MOVEQ   R1, #1
        CMP     R2, #"."
        MOVEQ   R2, #1

        CMP     R1, R2
        EXIT    NE

        CMP     R1, #0
        BNE     %BT10

        EXIT

; *****************************************************************************

TraceCache_and_R1  ENTRY

        BL      validfileheader
        BLVC    TraceCache

        EXIT

      ]

        END
