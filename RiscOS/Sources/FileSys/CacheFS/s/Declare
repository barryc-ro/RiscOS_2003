; s.Declare

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Proc
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:LowFSi
        GET     Hdr:NewErrors
        GET     Hdr:Variables
        GET     Hdr:Wimp
        GET     Hdr:UpCall
        GET     Hdr:MsgTrans
        GET     VersionASM
        GET     Hdr:Trace

        GBLL    DEBUGVERSION
        GBLL    STRACE
        GBLA    LIMITAREASIZE
        GBLL    USEMESSAGES
;       GBLA    International_Help
        GBLL    RELOADCACHE
        GBLA    ROOTSPACE

DEBUGVERSION            SETL    {FALSE}

      [ DEBUGVERSION
TRACE                   SETL    {TRUE}
STRACE                  SETL    TRACE :LAND: {TRUE}
LIMITAREASIZE           SETA    -1                      ; don't let CacheFS area get bigger than this
USEMESSAGES             SETL    {TRUE}
;International_Help      SETA    0
RELOADCACHE             SETL    {FALSE}                 ; implement Load/SaveCache commands
ROOTSPACE               SETA    4 * 4                   ; hysteresis of 4 files (stress test)
      |
TRACE                   SETL    {FALSE}
STRACE                  SETL    {FALSE}
LIMITAREASIZE           SETA    -1
USEMESSAGES             SETL    {TRUE}
;International_Help      SETA    0
RELOADCACHE             SETL    {FALSE}
ROOTSPACE               SETA    128 * 4                 ; hysteresis of 128 files
      ]

MAXFILENAME     *       512             ; for buffering pathnames on the stack
BUFFERSIZE      *       0 ; 512         ; set to 0 if we use unbuffered files
ENUMSHIFT       *       21              ; allow 1024 concurrent enumerations, with up to 222,000 files in a directory

; NOTE: FileSwitch bugs:
;
; If unbuffered:        OS_Find &8C doesn't zero the extent of the file if it existed already
; If buffered:          Need to separate file size and extent to cope with FSEntry_GetBytes

              ASSERT    ( BUFFERSIZE = (BUFFERSIZE :AND: -BUFFERSIZE) )         ; must be a power of 2
              ASSERT    ( BUFFERSIZE :AND: 31 ) = 0                             ; must be a multiple of 32


        GET     s.MyMacros


; Extra allocations for CacheFS

fsnumber_cachefs   *   118

; Marker bits for renaming files

rename_attribute        *       1 :SHL: 28
renamed_attribute       *       1 :SHL: 29
rename_attributes       *       ( rename_attribute + renamed_attribute )

AreaFlags_Shrinkable    *       1 :SHL: 9       ; new bit for auto-shrinkable areas

dyn_PreGrow     *       0               ; reason codes for dynamic area handler
dyn_PostGrow    *       1
dyn_PreShrink   *       2
dyn_PostShrink  *       3
dyn_TestShrink  *       4               ; new reason code


object_directory_implicit  *  3                 ; internal code for implicit directories


; SWI chunk for CacheFS is &4CFC0

ErrorBase_CacheFS * &00010000 + ( fsnumber_cachefs :SHL: 8 )

ErrorNumber_NoRoom      *       &1A     ; cf. ADFS "Disc full" error number
ErrorNumber_DirNotEmpty *       &B4

        AddCacheError  FileOpen,         "M01"
        AddCacheError  FileNotFound,     "M02"
        AddCacheError  Channel,          "M03"
        AddCacheError  NoRoom,           "M05"
        AddCacheError  OutsideFile,      "M08"
        AddCacheError  ObjectLocked,     "M08"
        AddCacheError  DirNotEmpty,      "M10"
        AddCacheError  NotOpenForUpdate, "M11"
        AddCacheError  IsAFile,          "M12"
        AddCacheError  BadAddress,       "M13"
        AddCacheError  AccessViolation,  "M14"

        AddFSError     CacheFS_, NotSupported, Cache, fsnumber_cachefs


TAB     *       9
LF      *       10
FF      *       12
CR      *       13

; File header format

                       ^ 0
CacheFile_Offset       # 4              ; offset to next one
CacheFile_Data         # 4              ; offset to file data
CacheFile_Next         # 4              ; address of next file in LRU chain
CacheFile_Previous     # 4              ; address of previous file in LRU chain
CacheFile_Load         # 4              ; load address
CacheFile_Exec         # 4              ; exec address
CacheFile_Size         # 4              ; size of file
CacheFile_Attr         # 4              ; file attributes
CacheFile_Count        # 4              ; number of open file handles
CacheFile_WriteCount   # 4              ; number of open writable file handles (max 1)
CacheFile_Name         # 0              ; null terminated file name

                       ^ -12
CacheFile_Padding      # 4              ; last 4 bytes of pathname buffer
CacheFile_Offback      # 4              ; offset back to start of file header
CacheFile_SizePlus     # 4              ; file data size plus 4
CacheFile_TheData      # 0

        ASSERT  CacheFile_Next >= 8     ; don't overwrite this when putting file block on free list
        ASSERT  CacheFile_Previous = CacheFile_Next + 4


; Internal file handle block format

                       ^ 0
CacheHandle_Data       # 4
CacheHandle_Next       # 4
CacheHandle_Flags      # 4              ; open for reading and/or writing
CacheHandle_FilePtr    # 4
CacheHandle_Size       # 0


; Enumeration block format

                       ^ 0
CacheEnum_Link         # 4              ; link to other enumeration block lists
CacheEnum_Identifier   # 4              ; unique ID for this enumeration
CacheEnum_Next         # 4              ; link to next block in chain
CacheEnum_NextFile     # 4              ; offset to next file to return
CacheEnum_Files        # 4 * 32         ; leave space for 32 files at a time
CacheEnum_Size         # 0              ; stop when [CacheEnum_NextFile] gets to here


; Main workspace contents

                  ^     0, R12

CacheFSFileData   #     4               ; start of file data
CacheFSFileSize   #     4               ; space used within CacheFS area
CacheFSAreaSize   #     4               ; current size of CacheFS area
CacheFSMaxSize    #     4               ; max size of CacheFS area
CacheFSAreaNumber #     4               ; dynamic area number
CacheFSHandles    #     4               ; list of open file handle blocks
RelocateHandle    #     4               ; temporary pointer that gets relocated
CacheFSNext       #     4               ; head of LRU chain
CacheFSPrevious   #     4               ; tail of LRU chain
CacheFSFreeNext   #     4               ; linked list of free blocks (in order)
CacheFSRoot       #     4               ; pointer to root directory
CacheFSRootLock   #     4               ; non-zero => don't delete root object
CacheFSInsertAt   #     4               ; inserting at this address
CacheFSInsertBy   #     4               ; inserting this many bytes
CacheFSEnums      #     4               ; list of enumeration blocks
CacheFSNextID     #     4               ; next ID to use for enumeration block
      [ USEMESSAGES
MessageFile_Block #     16
MessageFile_Open  #     4
      ]

CacheFS_WorkspaceSize * :INDEX: @

CacheFS_LoadSize      * :INDEX: CacheFSInsertAt

                  ^     :INDEX:CacheFSNext - :INDEX:CacheFile_Next, R12
CacheFSHead       #     0               ; base node for two-way LRU chain

        END

