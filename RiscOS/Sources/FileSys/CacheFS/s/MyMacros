; > s.MyMacros


        MACRO
$label  Internat_lf  $tag, $string
$label
      [ International_Help=0
        DCB     "$string", 13, 10
        ; don't terminate in this case, so we can re-use the syntax line
      |
        DCB     "$tag", 0
      ]
        MEND


        MACRO
$label  Internat  $tag, $string
$label
      [ International_Help=0
        DCB     "$string", 0
      |
        DCB     "$tag", 0
      ]
        MEND
        MACRO
$label  STrace  $v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
$label
      [ STRACE
        Trace   $v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
      ]
        MEND

        MACRO
$label  STraceIf $cc,$v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
$label
      [ STRACE
        TraceIf  $cc,$v1,$t2,$v2,$t3,$v3,$t4,$v4,$t5,$v5,$t6,$v6,$t7,$v7,$t8,$v8,$t9,$v9
      ]
        MEND


        MACRO
        VerifyAll $ccc
      [ TRACE
        Push    "R0,R12,LR,PC"
        CLRPSR  V_bit,R14,,R12
        STR     R12,[SP,#12]
        BL$ccc  TraceCache
        LDR     R12,[SP,#12]
        STRVS   R0,[SP]
        RestPSR R12,VC,f                ; restore flags if no error from verify
        Pull    "R0,R12,LR"
        ADD     SP, SP, #4
      [ ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "R0") :LOR: ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "r0")
        STRVS   R0,[SP, #Proc_RegOffset]
      ]
        EXIT    VS
      ]
        MEND

        MACRO
        Verify  $ccc
      [ TRACE
        Push    "R0,R12,LR,PC"
        CLRPSR  V_bit,R14,,R12
        STR     R12,[SP,#12]
        BL$ccc  TraceCache_and_R1
        LDR     R12,[SP,#12]
        STRVS   R0,[SP]
        RestPSR R12,VC,f                ; restore flags if no error from verify
        Pull    "R0,R12,LR"
        ADD     SP, SP, #4
      [ ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "R0") :LOR: ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "r0")
        STRVS   R0,[SP, #Proc_RegOffset]
      ]
        EXIT    VS
      ]
        MEND

        MACRO
        AddCacheError $e, $m
        AddError  CacheFS_$e, $m, ErrorBase_CacheFS + ErrorNumber_$e
        MEND

        MACRO
        SetTheError $cc
      [ USEMESSAGES
        BL$cc   CopyError
      |
        SETV    $cc
      ]
        MEND

; Return an error after a set number of goes

        MACRO
$lab    BarfOn  $count
$lab    B       %FT02
01
        DCD     $count
02
        Push    "R14"
        LDR     R14,%BT01
        SUBS    R14, R14, #1
        MOVEQ   R14, #$count
        STR     R14, %BT01
        ADREQL  R0, ErrorBlock_CacheFS_NoRoom
        SetTheError EQ
        Pull    "R14"
        EXIT    VS
        MEND


        MACRO
$lab    Assert  $reg, $cc, $value, $message
$lab
      [ TRACE
        CMP     $reg, $value
        B$cc    %FT01
        Trace   "*** ASSERT: $message"
        ADR     R0, %FT02
        SETV
      [ ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "R0") :LOR: ((("$Proc_RegList" :CC: "xxx") :LEFT: 2) = "r0")
        STRVS   R0,[SP,#Proc_RegOffset]
      ]
        EXIT

02
        DCD     1
        DCB     "Assert failed: $message", 0
        ALIGN
01
      ]
        MEND

        END
