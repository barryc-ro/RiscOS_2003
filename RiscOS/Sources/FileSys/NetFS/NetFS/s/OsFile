        SUBT   ==> &.Arthur.NetFS.OsFile

File    ROUT
        ;       R0 => Function code
        ;       R1 => Name
        ;       R2 => Load address
        ;       R3 => Exec address  | Flag for load @ R2 or load @ file address
        ;       R4 => Start address | Size of CDir (or zero for not given)
        ;       R5 => End address   | Attributes
        ;       R6 => Pointer to special field
        ;       R0 <= Object's type 1 => file, 0 => not found
        ;       R2 <= Object's load address
        ;       R3 <= Object's exec address
        ;       R4 <= Object's length
        ;       R5 <= Object's attributes
        ;       R6 <= Object's name for monitor messages

        LDR     wp, [ r12 ]
        Push    "r0-r5, lr"
        [       Debug
        DREG    r0, "OS_File function code is &"
        ]
        BL      UseNameToSetTemporary
        BVS     FileBadExit
        BL      ClearFSOpFlags
        [       Debug
        DLINE   "Flags cleared"
        ]
        ADRL    r14, ReportName
        MOV     r8, #0
        STRB    r8, [ r14 ]
        MOV     r8, sp                                  ; Keep r8 pointing at the input and output registers
        ANDS    r0, r0, #&FFFFFF00
        BNE     FileGoodExit
        [       Debug
        DLINE   "Argument checked"
        ]
        LDR     r0, [ r8, #0 ]
        TEQ     r0, #&FF
        BEQ     OsFileLoad
        CMP     r0, #OsFileMax
        ADDLE   pc, pc, r0, LSL #2
        B       FileGoodExit
OsFileJumpTable
        B       OsFileSave                              ; 0
        B       OsFileWriteArgs                         ; 1
        B       OsFileWriteArgs                         ; 2
        B       OsFileWriteArgs                         ; 3
        B       OsFileWriteArgs                         ; 4
        B       OsFileReadCat                           ; 5
        B       OsFileDelete                            ; 6
        B       OsFileCreate                            ; 7
        B       OsFileCDir                              ; 8
        B       GetInfoWithoutLength                    ; 9
        [       :LNOT: OldOs
        B       ReadBlockSize                           ; 10
        ]

OsFileMax * ( ( . - OsFileJumpTable ) / 4 ) - 1

        [       :LNOT: OldOs
ReadBlockSize
        ; R1 => Name (ignored)
        ; R2 <= Natural block size
        LDR     r2, =&400
        STR     r2, [ r8, #8 ]                          ; Exit value of R2
        CLRV
        B       FileGoodExit
        ]       ; OldOs

GetInfoWithoutLength
        ;       R1 => Name
        ;       R6 => Special field
        ;       R0 <= Type
        ;       R2 <= Load
        ;       R3 <= Exec
        ;       R5 <= Attributes
        MOV     r11, r1                                 ; Pointer to name supplied
        MOV     r0, r11
        ADR     r1, CommandBuffer
        MOV     r2, #4                                  ; The argument to 'ReadObjectInfo', Get type and attributes
        STRB    r2, [ r1 ]
        MOV     r2, #1
        BL      CopyObjectNameInDoingTranslation
        LDRB    r0, [ r1, #1 ]                          ; First character of name
        TEQ     r0, #13                                 ; Is the name null ??
        BEQ     LieAboutIt
        MOV     r0, #FileServer_ReadObjectInfo
        BL      DoFSOp
        BVS     FileBadExit
        LDRB    r0, [ r1 ]
        STR     r0, [ r8, #0 ]                          ; Object type
        LDRB    r1, [ r1, #1 ]
        BL      ConvertProtectionFromFS                 ; R5 has Arthur format protection
        STRB    r5, [ r8, #20 ]
        TEQ     r0, #1
        BNE     FileGoodExit
 
        MOV     r0, r11
        ADR     r1, CommandBuffer
        MOV     r2, #2                                  ; The argument to 'ReadObjectInfo', Get load and exec
        STRB    r2, [ r1 ]
        MOV     r2, #1
        BL      CopyObjectNameInDoingTranslation
        MOV     r0, #FileServer_ReadObjectInfo
        BL      DoFSOp
        BVS     FileBadExit

        ADD     r2, r1, #1                              ; Move the buffer down one byte so we are word aligned
        MOV     r4, #0
20
        LDRB    r0, [ r2, r4 ]
        STRB    r0, [ r1, r4 ]
        INC     r4
        CMP     r4, #&20                                ; Use fixed size rather than r3 so the return from OsFile works
        BLE     %20
        LDMIA   r1, { r2, r3 }                          ; <load addr>, <execute addr>
        ADD     r1, r8, #8
        STMIA   r1, { r2, r3 }                          ; <load addr>, <execute addr>
        B       FileGoodExit

OsFileLoad ROUT                                         ; 255
        ;       R1 => Name
        ;       R2 => Load address
        ;       R3 => Flag for load @ R2 or load @ file address
        ;       R0 <= Object's type 1 => file (fact)
        ;       R2 <= File's load address
        ;       R3 <= File's exec address
        ;       R4 <= File's length
        ;       R5 <= File's attributes
        BL      DoLoadByGBPB                            ; Returns if unable, goes bang by itself if needed
        MOV     r0, r1
        ADR     r1, CommandBuffer
        MOV     r2, #0
        BL      CopyObjectNameInDoingTranslation
        BVS     FileBadExit
        MOV     r0, #FileServer_LoadFile
        BL      DoFSOp                                  ; R0 returns with the index of the name
        BVS     FileBadExit
        ADRL    r2, ReportName
30
        LDRB    r3, [ r1, r0 ]
        INC     r0
        STRB    r3, [ r2 ], #1
        CMP     r3, #" "
        BGT     %30

        LDRB    r0, [ r8, #12 ]                         ; Flag byte for load address
        LDR     r4, [ r1 ]                              ; Returned load address
        MOV     r3, r4
        TEQ     r0, #load_at_given                      ; Should we use the address in the file
        LDREQ   r3, [ r8, #8 ]                          ; Supplied load address
        STR     r4, [ r8, #8 ]                          ; Outgoing load address

        LDR     r4, [ r1, #4 ]
        STR     r4, [ r8, #12 ]                         ; Outgoing exec address

        LDR     r4, [ r1, #8 ]
        AND     r4, r4, #&00FFFFFF
        Push    r1
        MOV     r0, #NetFS_StartLoad
        MOV     r1, r4
        BL      DoUpCall
        Pull    r1
        BVS     FileBadExit
        STR     r4, [ r8, #16 ]                         ; Outgoing length
 
        LDR     r2, [ r1, #12 ]                         ; File server date ( 16 bits )
        MOV     r2, r2, LSL #16                         ; Move it to the top and zero the bottom
        LDRB    r1, [ r1, #11 ]                         ; R1 has FS format protection
        BL      ConvertProtectionFromFS                 ; R5 has RISC OS format protection
        ORR     r5, r5, r2, LSR #8                      ; Add in the date at the right place
        STR     r5, [ r8, #20 ]                         ; Outgoing access rights
        TEQ     r4, #0                                  ; Is this a zero length Load ??
        BEQ     ZeroLengthLoad

NextSection
        MOV     r0, #NetFS_PartLoad
        LDR     r1, [ r8, #16 ]                         ; The actual file length
        SUB     r1, r1, r4
        BL      DoUpCall
        BVS     FileBadExit
        STR     r4, LoadOrSaveLength
        LDRB    r0, CurrentAuxiliaryPort
        LDR     r1, Temporary
        ADD     r1, r1, #Context_Station
        LDMIA   r1, { r1, r2 }
        SWI     XEconet_CreateReceive
        BVS     FileBadExit
        BL      WaitForFSReply
        BVS     FileBadExit
        LDR     r1, LoadOrSaveLength
        SUBS    r4, r1, r6                              ; Calculate remaining data to transfer
        ADD     r3, r5, r6                              ; Calculate next transfer address
        BNE     NextSection
ZeroLengthLoad
        LDRB    r0, CurrentReplyPort
        LDR     r1, Temporary
        ADD     r1, r1, #Context_Station
        LDMIA   r1, { r1, r2 }
        ADR     r3, CommandBuffer
        MOV     r4, #?CommandBuffer
        SWI     XEconet_CreateReceive
        BLVC    WaitForFSReply
        BVS     FileBadExit
CheckLastReturn
        ADR     r0, CommandBuffer                       ; Check return code
        BL      ConvertFSError
        BVC     GoodLoad
FileBadExit                                             ; Not always assured of V set
        LDR     r14, [ r8, #0 ]                         ; Original reason code
        STR     r0, [ sp ]
        TEQ     r14, #fsfile_Load
        MOVEQ   r0, #NetFS_FinishLoad
        BEQ     %63
        TEQ     r14, #fsfile_Save
        MOVEQ   r0, #NetFS_FinishSave
        BEQ     %63
        TEQ     r14, #fsfile_Create
        MOVEQ   r0, #NetFS_FinishCreate
63
        BLEQ    DoUpCall
        BL      ReleasePorts
        SETV
        Pull    "r0-r5, pc"

OsFileSave ROUT                                         ; 0
OsFileCreate                                            ; 7
        [       Debug :LAND: False
        CMP     r5, #&00001000
        MOVGT   r5, r5, LSL #10
        BLE     %52
        DREG    r5, "Size changed to &"
52
        ]
        SUB     r5, r5, r4                              ; Calculate the length
        CMP     r5, #&01000000                          ; Does this excede the 24 bit limit?
        BHS     ExitSaveTooBig
        Push    "r0, r1"
        TEQ     r0, #fsfile_Create                      ; Create ?
        MOVNE   r0, #NetFS_StartSave
        MOVEQ   r0, #NetFS_StartCreate
        MOV     r1, r5                                  ; Send length for hourglass
        BL      DoUpCall
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, r1"
        BVS     FileBadExit
        LDR     r14, Temporary
        LDR     r14, [ r14, #Context_Threshold ]
        CMP     r5, r14                                 ; See if this is above the required threshold
        BLHI    DoSaveByGBPB                            ; Returns if unable, goes bang by itself if needed
        ;       R1 => Name
        ;       R2 => Load address
        ;       R3 => Exec address
        ;       R4 => Start address
        ;       R5 => Length
        Push    "r5, r9-r11"
        MOV     r0, r1                                  ; Name
        ADR     r1, CommandBuffer
        STMIA   r1, { r2, r3, r5 }                      ; Install load and exec addresses, and the length
        MOV     r10, r4                                 ; Start address
        MOV     r11, r5                                 ; Size
        MOV     r2, #11                                 ; Dest
        BL      CopyObjectNameInDoingTranslation
        BVS     SaveBadExit
        LDRB    r0, [ r8, #0 ]                          ; The original R0 determines Save or Create
        TEQ     r0, #fsfile_Create                      ; Create ??
        MOV     r0, #FileServer_SaveFile
        MOVEQ   r0, #FileServer_CreateFile
        BL      DoFSOp
        BVS     SaveBadExit
        ADRL    r4, ReportName
        TEQ     r0, #0                                  ; Test if the name was sent back or not
        STREQB  r0, [ r4, #0 ]                          ; No it wasn't
        BEQ     %30                                     ; So skip the copying
20
        LDRB    r2, [ r1, r0 ]
        STRB    r2, [ r4 ], #1
        INC     r0
        CMP     r2, #" "
        BGT     %20
30
        LDRB    r2, [ r8, #0 ]                          ; The original R0 determines Save or Create
        TEQ     r2, #fsfile_Create                      ; Create ??
        MOVEQ   r0, #0
        STREQB  r0, CommandBuffer + 1                   ; Fake clean return
        BEQ     %80                                     ; Avoid data transfer section
        LDRB    r0, [ r1, #0 ]                          ; Data port
        STRB    r0, CurrentFSPort
        LDRB    r2, [ r1, #1 ]                          ; Low byte of block size
        LDRB    r0, [ r1, #2 ]                          ; High byte of block size
        ORR     r9, r2, r0, LSL #8                      ; Join them together
        TEQ     r11, #0                                 ; Zero length save ??
        BEQ     WaitForSaveAck
SaveNextBlock
        MOV     r0, #NetFS_PartSave
        LDR     r1, [ sp, #8 ]                          ; The actual file length
        SUB     r1, r1, r11
        BL      DoUpCall
        BVS     FileBadExit
        CMP     r11, r9                                 ; Is there more remaining data than a buffer full??
        MOVGT   r5, r9
        MOVLE   r5, r11
        SUB     r11, r11, r5                            ; Length for next time
        MOV     r4, r10
        ADD     r10, r10, r5                            ; Calculate next start address
        MOV     r0, #0
        LDRB    r1, CurrentFSPort
        LDR     r2, Temporary
        ADD     r2, r2, #Context_Station
        LDMIA   r2, { r2, r3 }
        LDR     r6, FSTransmitCount
        LDR     r7, FSTransmitDelay
        SWI     XEconet_DoTransmit
        BVS     SaveBadExit
        TEQ     r0, #Status_Transmitted
        BEQ     WaitForSaveAck
        BL      ConvertStatusToError
SaveBadExit
        Pull    "r5, r9-r11"
        B       FileBadExit
 
WaitForSaveAck
        TEQ     r11, #0                                 ; Is this the last one ??
        LDREQB  r0, CurrentReplyPort
        LDRNEB  r0, CurrentAuxiliaryPort
        LDR     r1, Temporary
        ADD     r1, r1, #Context_Station
        LDMIA   r1, { r1, r2 }
        ADR     r3, CommandBuffer
        MOV     r4, #?CommandBuffer
        SWI     XEconet_CreateReceive
        BVS     SaveBadExit
        BL      WaitForFSReply
        BVS     SaveBadExit
        TEQ     r11, #0                                 ; Is this the last one ??
        BNE     SaveNextBlock
80
        Pull    "r5, r9-r11"
        B       CheckLastReturn

ExitSaveTooBig
        Pull    "r0-r5, lr"
        ADRL    r0, ErrorFileServerOnly24Bit
        [       UseMsgTrans
        B       MakeError
        |
        ORRS    pc, lr, #VFlag
        ]

OsFileWriteArgsActionTable
        DCB     7                                       ; Do all
        DCB     1                                       ; Do load only
        DCB     2                                       ; Do exec only
        DCB     4                                       ; Do attributes only
        ALIGN

OsFileWriteArgs ROUT                                    ; 1, 2, 3, 4
        ;       R0 => Function code
        ;       R1 => Name
        ;       R2 => Load address
        ;       R3 => Exec address
        ;       R5 => Attributes

        ADR     r7, OsFileWriteArgsActionTable - 1
        LDRB    r7, [ r7, r0 ]                          ; Bitset of ops to do
        MOV     r6, r1                                  ; Name
        ADR     r1, CommandBuffer
        STRB    r0, [ r1, #0 ]
        MOV     r4, r2                                  ; Load address
        MOV     r2, #1                                  ; Offset in command buffer
        TST     r7, #BitZero                            ; Load address ??
        MOV     r0, r4                                  ; Load address
        BLNE    StoreWord
        TST     r7, #BitOne                             ; Exec address ??
        MOV     r0, r3
        BLNE    StoreWord
        TST     r7, #BitTwo                             ; Attributes ??
        BEQ     %60
        MOV     r0, #0
        TST     r5, #BitZero
        ORRNE   r0, r0, #BitTwo
        TST     r5, #BitOne
        ORRNE   r0, r0, #BitThree
        TST     r5, #BitThree
        ORRNE   r0, r0, #BitFour
        TST     r5, #BitFour
        ORRNE   r0, r0, #BitZero
        TST     r5, #BitFive
        ORRNE   r0, r0, #BitOne
        STRB    r0, [ r1, r2 ]
        INC     r2
60
        MOV     r0, r6                                  ; Name
        BL      CopyObjectNameInDoingTranslation
        MOVVC   r0, #FileServer_SetObjectAttributes
        BLVC    DoFSOp
        BVS     FileBadExit
        B       FileGoodExit

StoreWord       ROUT                                    ; Copy r0 into [ r1, r2 ]
        MOV     r4, #3
10
        STRB    r0, [ r1, r2 ]
        INC     r2
        MOV     r0, r0, ASR #8
        DECS    r4
        BPL     %10
        MOV     pc, lr

OsFileReadCat   ROUT                                    ; OS_File 5
        ;       R1 => Name                              ; Already de-canonicalised
        ;       R0 <= Object's type
        ;       R2 <= Object's load address
        ;       R3 <= Object's exec address
        ;       R4 <= Object's length
        ;       R5 <= Object's attributes
        ;       R8 <= Ownership
        [       Debug
        DSTRING r1, "ReadCatalogInfo of "
        ]
        MOV     r0, r1                                  ; Pointer to name supplied
        ADRL    r1, CommandBuffer + 3                   ; Carefully aligned for word alignment later
        [       Files24Bit :LAND: Files32Bit
        LD      r7, Temporary
        LDRB    r7, [ r7, #Context_Flags ]
        TST     r7, #Context_Flags_32Bit
        MOVEQ   r2, #5                                  ; The argument to 'ReadObjectInfo'
        MOVNE   r2, #8                                  ; The argument to 'ReadObjectInfo(Extended)'
        |
        [       Files24Bit
        MOV     r2, #5                                  ; The argument to 'ReadObjectInfo'
        ]
        [       Files32Bit
        MOV     r2, #8                                  ; The argument to 'ReadObjectInfo(Extended)'
        ]
        ]
        STRB    r2, [ r1 ]
        MOV     r2, #1                                  ; Offset for name to start at
        BL      CopyObjectNameInDoingTranslation
        LDRB    r5, [ r1, #1 ]                          ; First character of name
        MOV     r0, #FileServer_ReadObjectInfo
        BL      DoFSOp
        BVS     CheckForSpecialCase
        LDRB    r0, [ r1 ], #1                          ; The returned type byte
        TEQ     r0, #0
        TEQEQ   r5, #"^"                                ; If we had to use "^.DirName"
        BEQ     LieAboutIt
        STR     r0, [ r8, #0 ]                          ; Object type
        [       Files24Bit :LAND: Files32Bit
        TST     r7, #Context_Flags_32Bit
        BNE     Return32BitResult
        [       Debug
        DLINE   "Result is 24 bit"
        ]
        LDMIA   r1, { r2, r3, r4, r6 }                  ; <load addr>, <execute addr>, <size + attr>, <date + acc>
        MOV     r1, r4, LSR #24                         ; R1 has FS format protection
        BL      ConvertProtectionFromFS                 ; R5 has RISC OS format protection
        MOV     r6, r6, LSL #16                         ; Move date to top, clear bottom
        ORR     r5, r5, r6, LSR #8                      ; Add date in at right place
        AND     r4, r4, #&00FFFFFF                      ; Only returned as 24 bits
        LDRB    r6, CommandBuffer + 18                  ; Pick up the ownership byte
        B       ReturnAttributes
Return32BitResult
        [       Debug
        DLINE   "Result is 32 bit"
        ]
        LDMIA   r1, { r2, r3, r4, r6 }                  ; <load addr>, <execute addr>, <size>, <attr + date + acc>
        AND     r1, r6, #&000000FF                      ; R1 has FS format protection
        [       Debug
        BREG    r1, "FS protection = &"
        ]
        BL      ConvertProtectionFromFS                 ; R5 has RISC OS format protection
        AND     r6, r6, #&FFFFFF00                      ; Clear out the attribute information
        AND     r6, r6, #&00FFFFFF                      ; Clear out the access information
        [       Debug
        DREG    r6, "FS date = &"
        ]
        ORR     r5, r5, r6                              ; Add date in at right place
        LDRB    r6, CommandBuffer + 19                  ; Pick up the ownership byte
        |
        [       Files24Bit
        LDMIA   r1, { r2, r3, r4, r6 }                  ; <load addr>, <execute addr>, <size + attr>, <date + acc>
        MOV     r1, r4, LSR #24                         ; R1 has FS format protection
        BL      ConvertProtectionFromFS                 ; R5 has RISC OS format protection
        MOV     r6, r6, LSL #16                         ; Move date to top, clear bottom
        ORR     r5, r5, r6, LSR #8                      ; Add date in at right place
        AND     r4, r4, #&00FFFFFF                      ; Only returned as 24 bits
        LDRB    r6, CommandBuffer + 18                  ; Pick up the ownership byte
        ]
        [       Files32Bit
        LDMIA   r1, { r2, r3, r4, r6 }                  ; <load addr>, <execute addr>, <size>, <attr + date + acc>
        AND     r1, r6, #&000000FF                      ; R1 has FS format protection
        BL      ConvertProtectionFromFS                 ; R5 has RISC OS format protection
        AND     r6, r6, #&FFFFFF00                      ; Clear out the attribute information
        AND     r6, r6, #&00FFFFFF                      ; Clear out the access information
        ORR     r5, r5, r6                              ; Add date in at right place
        LDRB    r6, CommandBuffer + 19                  ; Pick up the ownership byte
        ]
        ]
ReturnAttributes
        ADD     r0, r8, #8                              ; Pointer to return registers in stack
        STMIA   r0, { r2, r3, r4, r5 }                  ; Update the return registers
        MOV     r8, r6                                  ; Ownership byte
        [       Debug
        BREG    r8, "Ownership byte is &"
        ]
        B       FileGoodExit

CheckForSpecialCase
        TEQ     r5, #"^"                                ; If we had to use "^.DirName"
        [       Debug
        DREG    r5, "First character is ",,Char
        ]
        LDREQ   r14, [ r0 ]
        [       Debug
        BNE     %26
        DREG    r14, "Error number is &"
26
        ]
        LDREQ   r2, =ErrorNumber_BadNetFSFilename
        TEQEQ   r14, r2
        BNE     FileBadExit
LieAboutIt
        MOV     r0, #2                                  ; Directory
        STR     r0, [ r8 ]
        MOV     r2, #0                                  ; Load address
        MOV     r3, #0                                  ; Exec address
        MOV     r4, #0                                  ; Length
        MOV     r5, #1                                  ; Owner read access
        MOV     r6, #0                                  ; We are the owner
        B       ReturnAttributes

OsFileDelete    ROUT                                    ; 6
        ;       R1 => Name
        ;       R0 <= Object's type
        [       :LNOT: OldOs
        BL      RemoveCachedDirectory
        BVS     FileBadExit
        ]
        MOV     r0, r1                                  ; Pointer to name supplied
        ADR     r1, CommandBuffer
        MOV     r2, #0
        BL      CopyObjectNameInDoingTranslation
        MOV     r0, #FileServer_DeleteObject
        BL      DoFSOp
        BVS     OSFileDeleteError                       ; Check for a Not found error
        LDRB    r0, [ r1, #11 ]                         ; Get the attribute byte (FS format)
        [       Debug
        BREG    r0, "Delete returns attribute = &"
        ]
        TST     r0, #BitFive                            ; Check the 'Is a directory' bit
        MOVEQ   r0, #object_file                        ; Directory bit not set, so it is a file
        MOVNE   r0, #object_directory                   ; Directory bit set, so it is a directory
OSFileDeleteGoodExit
        STR     r0, [ sp, #0 ]                          ; Store the returned type
        B       FileGoodExit

OSFileDeleteError
        LDRB    r1, [ r0, #0 ]                          ; Is the error 'Not found' ??
        TEQ     r1, #ErrorNumber_FileNotFound :AND: &FF
        MOVEQ   r0, #object_nothing                     ; Yes, so return with R0 as the type
        BEQ     OSFileDeleteGoodExit
        B       FileBadExit                             ; Not 'Not found' so report

CDirSizeTable
        DCB     0, 10, 20
        DCB     29, 39, 49, 59, 69, 79
        DCB     88, 98, 108, 118, 128, 138, 148
        DCB     157, 167, 177, 187, 197, 207
        DCB     216, 226, 236, 246
CDirSizeTableEnd
        ALIGN

OsFileCDir      ROUT                                    ; 8
        ;       R1 => Name
        ;       R4 => Size (or zero for not given)
        MOV     r7, r1
        MOV     r8, #2                                  ; Default number of sectors
        TEQ     r4, #0                                  ; Was there an input parameter ??
        BEQ     %30
        MOV     r8, #0                                  ; Minimum number of sectors (-1)
        ADR     r6, CDirSizeTable
        ADR     r3, CDirSizeTableEnd
20
        TEQ     r3, r6
        BEQ     %30
        LDRB    r5, [ r6 ], #1
        CMP     r5, r4
        ADDLE   r8, r8, #1                              ; Increment sector count if not there yet
        BLE     %20
30                                                      ; R7 is the name, R8 is the number of sectors
        MOV     r0, r7
        ADR     r1, CommandBuffer
        MOV     r2, #4
        STRB    r2, [ r1, #0 ]
        MOV     r2, #1
        BL      CopyObjectNameInDoingTranslation
        MOV     r0, #FileServer_ReadObjectInfo
        BL      DoFSOp
        BVS     FileBadExit
        LDRB    r0, [ r1, #0 ]                          ; Get the returned object type
        CMP     r0, #1                                  ; Is it a file ?
        BGT     FileGoodExit
        BLT     %40                                     ; So do the operation
        ADR     r0, ErrorNetFSTypesDontMatch
        [       UseMsgTrans
        BL      MakeError
        B       FileBadExit

ErrorNetFSTypesDontMatch
        DCD     ErrorNumber_NetFSTypesDontMatch
        DCB     "TypsBad", 0
        ALIGN
        |       ; UseMsgTrans
        SETV
        B       FileBadExit

        Err     NetFSTypesDontMatch
        ALIGN
        ]       ; UseMsgTrans

40
        STRB    r8, [ r1, #0 ]                          ; The size to use, in sectors
        MOV     r2, #1
        MOV     r0, r7
        BL      CopyObjectNameInDoingTranslation
        MOV     r0, #FileServer_CreateDirectory
        BL      DoFSOp
        MOVVC   r0, #4                                  ; Set access to none
        STRVC   r0, [ r1, #0 ]
        MOVVC   r2, #2
        MOVVC   r0, r7
        BLVC    CopyObjectNameInDoingTranslation
        MOVVC   r0, #FileServer_SetObjectAttributes
        BLVC    DoFSOp
        BVS     FileBadExit
        B       FileGoodExit


DoLoadByGBPB    ROUT ; Returns if unable, goes bang by itself if needed
        ;       R1 => Name, might not be the same as original incoming R1
        ;       R2 => Load address
        ;       R3 => Flag for load @ R2 or load @ file address
        ;       R8 => Pointer into the stack for incoming and outgoing registers R0-R5
        ;       R0 <= Object's type 1 => file, 0 => not found
        ;       R2 <= Object's load address
        ;       R3 <= Object's exec address
        ;       R4 <= Object's length
        ;       R5 <= Object's attributes
        ;       R6 <= Object's name for monitor messages

        Push    lr
        MOV     r0, #fsopen_ReadOnly
        BL      NastyOpen                               ; Preserves R8
        ; ********************  Errors ?? ********************
        ;       R0 => Mode of open
        ;       R1 => Pointer to name
        ;       R2 => FileSwitch External handle
        ;
        ;       R0 <= Bit 30 set if we have Read.  Bit 31 set if we have Write.
        ;       R1 <= Handle, zero for not found
        ;       R2 <= Buffer size to use (&400)
        ;       R3 <= File's extent
        ;       R6 <= File's attributes (FS format for internal use)
        ;       R7 <= filename as seen by the file server (entry R1)
        MOVS    r11, r1                                 ; Keep handle, set Z if zero, clears N since it's an address 
        MOV     r1, r7                                  ; Get the supplied value of R1
        Pull    pc, LE                                  ; Return and do the load the easy way, or go bang some other way
        INC     sp, 4                                   ; Get rid of return address
        Push    "r8, r11"
        ADR     lr, ReadCatReturn
        MOV     r1, r7
        Push    "r0-r5, lr"
        MOV     r8, sp                                  ; Keep r8 pointing at the input and output registers
        B       OsFileReadCat
ReadCatReturn
        Pull    "r8, r11"
        BVS     GBPBLoadBadExit
        ADD     r6, r8, #8                              ; Point at incoming R2 and R3
        LDMIA   r6, { r6, r7 }                          ; R6 might be the actual load address
        ANDS    r7, r7, #&FF                            ; Zero means use given value
        LDR     r0, [ r8, #0 ]                          ; Get the old R.C. so it is still OK at the end
        STMIA   r8, { r0-r5 }
        MOVEQ   r2, r6
        MOV     r1, r11                                 ; Handle
        MOV     r5, r4                                  ; Size of file
        MOV     r4, #0                                  ; Start pointer
        Push    r1
        MOV     r0, #NetFS_StartLoad
        MOV     r1, r5
        BL      DoUpCall
        Pull    r1
        BVS     FileBadExit
GBPBLoadLoop
        LDR     r14, [ r8, #16 ]                        ; The actual file length
        SUB     r14, r14, r5
        STR     r14, LoadOrSaveAddress
        TEQ     r5, #0
        BEQ     GBPBLoadFinished
        LDR     r14, Temporary
        LDR     r14, [ r14, #Context_BlockSize ]
        CMP     r5, r14
        MOVLO   r3, r5
        MOVHS   r3, r14
        SUB     r5, r5, r3
        BL      NastyGetBuffer
        [       Debug
        DREG    r1, "Handle   = &"
        DREG    r2, "Address  = &"
        DREG    r3, "NOT Rx'd = &"
        DREG    r4, "Pointer  = &"
        ]
        BVS     GBPBLoadBadExit
        LDR     r14, Temporary
        LDR     r14, [ r14, #Context_BlockSize ]
        ADD     r2, r2, r14
        ADD     r4, r4, r14
        Push    "r0-r3, lr"
        MOV     r3, #7
NastyWaitLoop
        MOV     r0, #19
        SWI     XOS_Byte
        DECS    r3
        BNE     NastyWaitLoop
        Pull    "r0-r3, lr"
        B       GBPBLoadLoop

GBPBLoadFinished
        BL      NastyClose
        BVS     FileBadExit

GoodLoad
        LDR     r14, [ r8, #0 ]                         ; Original reason code
        TEQ     r14, #fsfile_Load
        MOVEQ   r0, #NetFS_FinishLoad
        TEQ     r14, #fsfile_Save
        MOVEQ   r0, #NetFS_FinishSave
        MOVNE   r0, #NetFS_FinishCreate
        BL      DoUpCall
        BVS     FileBadExit
        MOV     r0, #1                                  ; Type must be a file
        STR     r0, [ r8, #0 ]                          ; Object type
FileGoodExit
        CLRV
        Pull    "r0, r1"
        ADRL    r6, ReportName
        LDRB    r2, [ r6 ]
        TEQ     r2, #0                                  ; No name ??
        MOVEQ   r6, r1                                  ; Use incoming name
        [       Debug
        DREG    r0, "Exit from OS_File, type = &"
        DSTRING r1, "R1 ==> "
        LDMIA   sp, { r2-r5 }
        DREG    r2, "R2 = &", cc
        DREG    r3, "  R3 = &"
        DREG    r4, "R4 = &", cc
        DREG    r5, "  R5 = &"
        DSTRING r6, "Report name "
        ]
        BL      ReleasePorts
        Pull    "r2-r5, pc"

GBPBLoadBadExit
        MOV     r10, r0                                 ; Error
        MOV     r1, r11                                 ; Handle
        BL      NastyClose
        MOV     r0, r10
        B       FileBadExit

DoSaveByGBPB ROUT ; Returns if unable, goes bang by itself if needed
        ;       R1 => Name
        ;       R2 => Load address
        ;       R3 => Exec address
        ;       R4 => Start address
        ;       R5 => Length
        ;       R6 <= Object's name for monitor messages

        Push    "r5, lr"
        MOV     r0, #fsopen_CreateUpdate
        BL      NastyOpen                               ; Preserves R8
        ;       R0 => Mode of open
        ;       R1 => Pointer to name
        ;       R2 => FileSwitch External handle
        ;
        ;       R0 <= Bit 30 set if we have Read.  Bit 31 set if we have Write.
        ;       R1 <= Handle, zero for not found
        ;       R2 <= Buffer size to use (&400)
        ;       R3 <= File's extent
        ;       R6 <= File's attributes (FS format for internal use)
        ;       R7 <= filename as seen by the file server (entry R1)
        Pull    "r5, lr"                                ; Length
        BVC     GoAhead                                 ; No error, so off we go
        LDRB    r1, [ r0, #0 ]
        TEQ     r1, #&64                                ; Look at the error number
        TEQNE   r1, #&C0                                ; These two are special
        BNE     FileBadExit
        LDMIA   r8, { r0-r4 }                           ; Reload supplied regs
        MOV     r1, r7                                  ; Except the filename, use the normalised one
        MOV     pc, lr                                  ; Return and do it the easy way

GoAhead
        MOV     r9, r5                                  ; Hold onto the length
        MOVS    r11, r1                                 ; Keep handle
        MOV     r4, #0                                  ; Start pointer
        LDRB    r0, [ r8 ]                              ; The original R0 determines Save or Create
        TEQ     r0, #fsfile_Create                      ; Create ??
        BEQ     GBPBCreate
        LDR     r2, [ r8, #16 ]                         ; Start address
GBPBSaveLoop
        SUB     r14, r9, r5
        STR     r14, LoadOrSaveAddress
        TEQ     r5, #0
        BEQ     GBPBSaveFinished
        LDR     r14, Temporary
        LDR     r14, [ r14, #Context_BlockSize ]
        CMP     r5, r14
        MOVLO   r3, r5
        MOVHS   r3, r14
        SUB     r5, r5, r3
        BL      NastyPutBuffer
        BVS     GBPBSaveBadExit
        LDR     r14, Temporary
        LDR     r14, [ r14, #Context_BlockSize ]
        ADD     r2, r2, r14
        ADD     r4, r4, r14
        B       GBPBSaveLoop

GBPBCreate
        MOV     r1, r11
        MOV     r4, #0                                  ; Pointer value
GBPBCreateLoop
        SUBS    r3, r5, r4                              ; How far is left to go in the file
        Push    "r0, r1"
        MOV     r0, #NetFS_PartCreate
        SUB     r1, r9, r3
        BL      DoUpCall
        STRVS   r0, [ sp ]
        Pull    "r0, r1"
        BVS     FileBadExit
        BEQ     GBPBCreateFinished
        CMP     r3, #CreateSize
        MOVLO   r2, r5
        ADDHS   r2, r4, #CreateSize
        MOV     r4, r2
        MOV     r0, #fsargs_SetPTR
        BL      NastyArgs
        [       Debug
        DLINE   "NastyArgs returns"
        ]
        BVS     GBPBSaveBadExit
        B       GBPBCreateLoop

GBPBSaveFinished
GBPBCreateFinished
        ADR     r1, CommandBuffer
        MOV     r0, #1
        STRB    r0, [ r1 ]
        MOV     r2, #1
        LDR     r0, [ r8, #8 ]                          ; Load address
        BL      StoreWord
        LDR     r0, [ r8, #12 ]                         ; Exec address
        BL      StoreWord
        STRB    r6, [ r1, r2 ]
        INC     r2
        MOV     r0, r7                                  ; Normalised name
        BL      CopyObjectNameInDoingTranslation
        MOV     r0, #FileServer_SetObjectAttributes
        BL      DoFSOp
        BVS     GBPBSaveBadExit
        MOV     r1, r11                                 ; Handle
        BL      NastyClose
        BVS     FileBadExit
        B       GoodLoad

GBPBSaveBadExit
        MOV     r10, r0                                 ; Error
        MOV     r1, r11                                 ; Handle
        BL      NastyClose
        MOV     r0, r10
        B       FileBadExit

DoUpCall
        Push    "r9, lr"
        MOV     r9, #EconetV
        SWI     XOS_CallAVector
        Pull    "r9, pc"

        LTORG

        END
