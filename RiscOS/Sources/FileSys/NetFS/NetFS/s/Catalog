        SUBT    Catalog for Arthur.  File => &.Arthur.NetFS.Catalog

        [       OldOs
CatalogLibrary
        BL      SetFSOpLIBFlag
        ]
Catalog         ROUT                                    ; Entry conditions;
        ;       LR on stack
        ;       R1 points to the name
        ;       R6 is the special field
        [       :LNOT: OldOs
        MOV     r9, r1                                  ; Save the original name for the output listing
        ]
        BL      UseNameToSetTemporary
        MOVVC   r11, r1                                 ; Save the normalised directory name
        BLVC    CatalogHeader
        BVS     ExitCatalog
        MOV     r9, #19                                 ; The width of each entry, not including a one space gap
        BL      HowManyCollumns                         ; Returns it in R9
        BVS     ExitCatalog
        SUB     r8, r9, #1                              ; The current collumn number
        MOV     r7, #0                                  ; The object we are up to
CatalogLoop
        CMP     r7, #&100
        BHS     CatalogFinished
        MOV     r0, r11
        ADR     r1, CommandBuffer
        MOV     r2, #3                                  ; The argument to examine (Object name and access only)
        STRB    r2, [ r1, #0 ]
        STRB    r7, [ r1, #1 ]                          ; Entry point in the directory
        MOV     r2, #(?CommandBuffer - 5) / 18          ; The number of entries to ask for
        STRB    r2, [ r1, #2 ]
        MOV     r2, #3                                  ; The index into the command buffer
        BL      CopyPathNameInDoingTranslation
        MOV     r0, #FileServer_Examine
        BL      DoFSOp
        BVS     ExitCatalog
        LDRB    r6, [ r1, #0 ]                          ; The number actually examined
        TEQ     r6, #0
        BEQ     CatalogFinished
        ADD     r7, r7, r6                              ; Add this on for next time
        ADD     r0, r1, #2                              ; First name
CatalogOutputLoop
        DECS    r6                                      ; No more records in this bunch
        BMI     CatalogLoop
        INC     r8
        CMP     r8, r9
        BEQ     NewLineInCatalog
        SWI     XOS_WriteI + " "
        B       PrintCatalogItem

NewLineInCatalog
        MOV     r8, #0
        SWI     XOS_NewLine
PrintCatalogItem
        MOVVC   r1, #0
        STRVCB  r1, [ r0, #10 ]                         ; Terminate the filename
        SWIVC   XOS_Write0                              ; Print it
        BVS     ExitCatalog
        SWI     XOS_WriteS                              ; Separate the access string
        DCB     "   ", 0
        ALIGN
        STRVCB  r1, [ r0, #6 ]                          ; Terminate the access string
        SWIVC   XOS_Write0                              ; Print it
        BVS     ExitCatalog
        INC     r0
        B       CatalogOutputLoop

CatalogFinished
        SWI     XOS_NewLine
ExitCatalog
        Pull    pc

        [       OldOs
ExamineLibrary
        BL      SetFSOpLIBFlag
        ]
Examine
        [       :LNOT: OldOs
        MOV     r9, r1                                  ; Save the original name for the output listing
        ]
        BL      UseNameToSetTemporary
        MOVVC   r11, r1                                 ; Save the normalised directory name
        BLVC    CatalogHeader
        Pull    pc, VS
        DEC     sp, FrameSize                           ; Space to get names into
        MOV     r9, #62
        BLVC    HowManyCollumns
        BVS     ExitExamine
        SUB     r8, r9, #1                              ; The current collumn number
        MOV     r7, #0                                  ; The object we are up to
ExamineLoop
        [       Files32Bit
        CMP     r7, #&10000
        BHS     ExamineFinished
        ADR     r1, CommandBuffer
        STR     r7, [ r1, #0 ]
        MOV     r14, #((?CommandBuffer%-6)/36)
        STRB    r14, [ r1, #2 ]
        MOV     r2, #3
        MOV     r0, r11
        BL      CopyPathNameInDoingTranslation
        MOV     r0, #FileServer_ExamineExtended
        BL      DoFSOp
        BVS     ExitExamine
        [       Debug
        BREG    r3, "Size of returned packet is &"
        ]
        LDRB    r6, [ r1, #0 ]
        TEQ     r6, #0                                  ; Number returned
        BEQ     ExamineFinished
        ADD     r7, r7, r6                              ; Add this on for next time
        MOV     r5, sp                                  ; Source buffer
   ;     BL      ConvertExamineOutput
        !       0, "Code in *Examine to use the new 32 bit interface no finished"
        BVS     ExitExamine
        B       ExamineLoop
        |
        CMP     r7, #&100
        BHS     ExamineFinished
        MOV     r0, #fsfunc_CatalogObjects
        MOV     r1, r11
        MOV     r2, sp
        MOV     r3, #13
        MOV     r4, r7
        MOV     r5, #FrameSize
        Push    "r6-r11"
        MOV     r8, #27
        MOV     r9, #0
        BL      Enumerate
        Pull    "r6-r11"
        BVS     ExitExamine
        MOVS    r6, r3                                  ; Number of entries returned
        CMPNE   r4, #-1                                 ; New entry point
        BEQ     ExamineFinished
        ADD     r7, r7, r6                              ; Add this on for next time
        MOV     r5, sp                                  ; Source buffer
        BL      ConvertExamineOutput
        BVS     ExitExamine
        B       ExamineLoop
        ]

ExamineFinished
        SWI     XOS_NewLine
ExitExamine
        INC     sp, FrameSize
        Pull    pc

ConvertExamineOutput
        Push    lr
ExamineOutputLoop
        DECS    r6                                      ; No more records in this bunch
        Pull    pc, MI
        INC     r8
        CMP     r8, r9
        BEQ     NewLineInExamine
        TEQ     r8, #0
        BEQ     PrintExamineItem
        SWI     XOS_WriteI + " "
        B       PrintExamineItem

NewLineInExamine
        MOV     r8, #0
        SWI     XOS_NewLine
PrintExamineItem
        Pull    pc, VS
        MOV     r0, #" "
        ADR     r1, TemporaryBuffer
        MOV     r2, #?TemporaryBuffer
ClearLoop                                               ; Write spaces into the entire string
        DECS    r2
        STRB    r0, [ r1, r2 ]
        BNE     ClearLoop
        MOV     r4, #29                                 ; Index of start of name
NameLoop
        LDRB    r0, [ r5, r4 ]
        TEQ     r0, #0
        BEQ     EndOfName
        STRB    r0, [ r1 ], #1
        INC     r4
        B       NameLoop

EndOfName
        ADD     r4, r4, #4
        BIC     r4, r4, #3                              ; Now the index of the next record
        ADRL    r1, TemporaryBuffer + 13
        LDR     r3, [ r5, #16 ]                         ; The type
        TEQ     r3, #2                                  ; Is it a directory
        BNE     AccessAFile
        MOV     r3, #"D"
        STRB    r3, [ r1 ], #1
        BL      PutDownNormalAccess
        B       DoADirectory

AccessAFile
        BL      PutDownNormalAccess
        LDR     r3, [ r5, #0 ]                          ; Load address
        LDR     r0, [ r5, #4 ]                          ; Exec address
        STMIA   r5, { r0, r3 }                          ; Put them back in the order wrong
        TEQ     r3, #0
        CMNEQ   r0, #1                                  ; &FFFFFFFF
        TEQNE   r3, r0                                  ; Check for load=exec
        BEQ     DoLoadAndExec
        CMN     r3, #&00100000                          ; Check for load < &FFF00000
        BLO     DoLoadAndExec
        LDR     r2, [ r5, #4 ]                          ; Load address
        LSR     r2, 8
        MOV     r0, #FSControl_ReadFileType
        SWI     XOS_FSControl
        Pull    pc, VS
        MOV     r0, sp                                  ; End marker
        Push    "r2, r3"                                ; Results in two registers
        ADRL    r1, TemporaryBuffer + 20                ; Output offset to type name
        MOV     r2, sp                                  ; Pointer to result string
TypeNameLoop
        LDRB    r3, [ r2 ], #1
        STRB    r3, [ r1 ], #1
        TEQ     r0, r2                                  ; At the end yet?
        BNE     TypeNameLoop
        INC     sp, 8                                   ; Restore stack
        BL      AddSpace
        [       OldOs
        BLVC    AddSpace
        ]
        Pull    pc, VS
        MOV     r0, r5                                  ; The date in the file's load and exec
        B       DoConvertDate

DoADirectory
        [       UseMsgTrans
        ADR     r1, Token_Directory
        ADRL    r2, TemporaryBuffer + 20
        MOV     r3, #10
        BL      MessageTransGSLookup0
        ADD     r1, r2, r3                              ; Compute the address of the trailing zero
        |
        ADRL    r1, TemporaryBuffer + 20
        BL      AddString
        DCB     "Directory", 0
        ALIGN
        ]
        Pull    pc, VS
        BL      AddSpace                                ; Overwrites the trailing zero
        ADD     r0, r5, #24                             ; The date from the directory's SIN
DoConvertDate
        [       UseMsgTrans
        Push    r0                                      ; Save data (time) pointer
        ADR     r1, Token_DateFormat
        ADRL    r2, BigTextBuffer
        MOV     r3, #?BigTextBuffer
        BL      MessageTransGSLookup0
        Pull    "lr, pc", VS                            ; Trash R0 off the stack
        Pull    r0                                      ; The time and date
        ADRL    r1, TemporaryBuffer + 30
        MOV     r2, #?TemporaryBuffer - 30
        ADRL    r3, BigTextBuffer                       ; The format to use
        SWI     XOS_ConvertDateAndTime
        |
        MOV     r2, #?TemporaryBuffer - 30
        SWI     XOS_ConvertStandardDateAndTime
        ]
        B       DoLength

DoLoadAndExec
        [       UseMsgTrans
        Push    "r4, r5"
        DEC     sp, 20                                  ; Frame to textualise the addresses in
        LDR     r0, [ r5, #4 ]                          ; Load address
        ADD     r1, sp, #0
        MOV     r2, #9
        SWI     XOS_ConvertHex8
        LDRVC   r0, [ r5, #0 ]                          ; Exec address
        ADDVC   r1, sp, #10
        MOVVC   r2, #9
        SWIVC   XOS_ConvertHex8
        ADRVC   r1, Token_LoadExecFormat
        ADRVCL  r2, TemporaryBuffer + 20
        MOVVC   r3, #?TemporaryBuffer - 20
        ADDVC   r4, sp, #0
        ADDVC   r5, sp, #10
        BLVC     MessageTransGSLookup2
        INC     sp, 20
        Pull    "r4, r5"
        ADD     r1, r2, r3                              ; Compute the address of the trailing zero
        |
        LDR     r0, [ r5, #4 ]                          ; Load address
        ADRL    r1, TemporaryBuffer + 30
        MOV     r2, #?TemporaryBuffer - 30
        SWI     XOS_ConvertHex8
        BLVC    AddSpace
        LDRVC   r0, [ r5, #0 ]                          ; Exec address
        SWIVC   XOS_ConvertHex8
        ]
DoLength
        BLVC    AddSpace
        LDRVC   r0, [ r5, #8 ]
        ADRVCL  r1, TemporaryBuffer + 51
        MOVVC   r2, #?TemporaryBuffer - 51
        SWIVC   XOS_ConvertFixedFileSize
        ADRVC   r0, TemporaryBuffer
        SWIVC   XOS_Write0
        Pull    pc, VS
        ADD     r5, r5, r4                              ; The address of the next record
        B       ExamineOutputLoop

        [       UseMsgTrans
Token_DateFormat
        DCB     "ExDt", 0
Token_LoadExecFormat
        DCB     "ExLdEx", 0
Token_Directory
        DCB     "Dr", 0
        ALIGN
        |
OwnerAccesString
        DCB     "Owner", 10, 13, 0
PublicAccessString
        DCB     "Public", 10, 13, 0
OptionString
        DCB     "    Option ", 0
OptTable
        DCB     "Off) ", 10, 13, 0
        DCB     "Load)", 10, 13, 0
        DCB     "Run) ", 10, 13, 0
        DCB     "Exec)", 10, 13, 0
        ALIGN

CatalogHeader
        Push    lr
        ADR     r1, CommandBuffer                       ; R1 = Control Block address
        MOV     r0, #6                                  ; read access/cycle/dir. name of dir.
        STRB    r0, [ r1, #0 ]                          ; put ARG into Control Block
        MOV     r2, #1
        MOV     r0, r11
        BL      CopyPathNameInDoingTranslation
        MOV     r0, #FileServer_ReadObjectInfo
        BL      DoFSOp
        Pull    pc, VS
        LDRB    r10, [ r1, #13 ]                        ; Fetch directory access (owner/public)
        MOV     r0, #0
        STRB    r0, [ r1, #13 ]                         ; Terminate dir.name
        ADD     r0, r1, #3
        SWI     XOS_Write0                              ; print returned directory name
        Pull    pc, VS
        SWI     XOS_WriteS
        DCB     "          ", 0
        Pull    pc, VS
        TEQ     r10, #0                                 ; Print "Owner" or "Public" depending on R10
        ADREQ   r0, OwnerAccesString
        ADRNE   r0, PublicAccessString
        SWI     XOS_Write0
        LDRVC   r3, Temporary                           ; Pointer to the context we're displaying
        ADDVC   r0, r3, #Context_DiscName
        SWIVC   XOS_Write0                              ; print disc name & space fill to col.20
        ADRVC   r0, OptionString
        SWIVC   XOS_Write0
        LDRVCB  r3, [ r3, #Context_BootOption ]
        ANDVC   r0, r3, #2_1111
        ADRVC   r1, TextBuffer
        MOVVC   r2, #?TextBuffer
        SWIVC   XOS_ConvertCardinal1
        SWIVC   XOS_Write0
        Pull    pc, VS
        SWI     XOS_WriteS
        DCB     " (", 0
        ALIGN
        AND     r3, r3, #2_11
        ADRVCL  r0, OptTable
        ADDVC   r0, r0, r3, ASL #3
        SWIVC   XOS_Write0
        Pull    pc, VS
        SWI     XOS_WriteS
        DCB     "Dir. ", 0
        ALIGN
        LDRVC   r3, Temporary                           ; Pointer to the context we're displaying
        ADDVC   r0, r3, #Context_DirectoryName
        SWIVC   XOS_Write0
        Pull    pc, VS
        SWI     XOS_WriteS
        DCB     "     Lib. ", 0
        ALIGN
        ADDVC   r0, r3, #Context_LibraryName
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine                             ; Finish with a new line
        Pull    pc
        ]       ; UseMsgTrans

        [       UseMsgTrans
Token_Public
        DCB     "Public", 0
Token_Owner
        DCB     "Owner", 0
        ALIGN

CatalogHeader
        Push    lr
        ADR     r1, CommandBuffer                       ; R1 = Control Block address
        MOV     r0, #6                                  ; read access/cycle/dir. name of dir.
        STRB    r0, [ r1, #0 ]                          ; put ARG into Control Block
        MOV     r2, #1
        MOV     r0, r11
        BL      CopyPathNameInDoingTranslation
        MOV     r0, #FileServer_ReadObjectInfo
        [       Debug
        DREG    r2, "FileServer_ReadObjectInfo with &", cc
        DLINE   " bytes", cc
        ]
        BL      DoFSOp
        Pull    pc, VS
        [       Debug
        DLINE   " returns OK."
        ]
        LDRB    r0, [ r1, #13 ]                         ; Fetch directory access (owner/public)
        TEQ     r0, #0                                  ; Print "Owner" or "Public" depending on R10
        [       Debug
        ADREQL  r1, Token_Owner
        ADRNEL  r1, Token_Public
        |
        ADREQ   r1, Token_Owner
        ADRNE   r1, Token_Public
        ]
        ADR     r2, TextBuffer
        MOV     r3, #?TextBuffer
        BL      MessageTransGSLookup0
        Pull    pc, VS
        [       Debug
        DLINE   "First MessageTrans_GSLookup returns OK."
        ]
        ADR     r1, CommandBuffer
        LDR     r14, NetColon
        STR     r14, [ r1 ], #4
        MOV     r2, #0
        MOV     r0, r9                                  ; The original (canonical) name
        BL      CopyNameIn
        ADR     r4, CommandBuffer
        LDR     r0, Current
        LDRB    r0, [ r0, #Context_BootOption ]
        AND     r0, r0, #2_00000011
        ADR     r1, Token_DisplayDir0                   ; Base of a table of Tokens
        ADD     r1, r1, r0, LSL #3
        BL      PrintBuffers
        MOVVC   r0, #FSControl_ReadDir
        ADRVC   r1, CommandBuffer + :LEN: "Net:"
        MOVVC   r2, #Dir_Current
        ADRVCL  r3, FilingSystemName
        MOVVC   r5, #?CommandBuffer - 1 - :LEN: "Net:"
        SWIVC   XOS_FSControl
        TEQ     r1, #0                                  ; See if there is a Current Directory
        ADR     r4, NetColon
        ADREQ   r1, Token_DisplayCSDU                   ; If not use Net:"Unset"
        LDRNE   r14, [ r4 ]                             ; If it is set
        SUBNE   r4, r1, #:LEN: "Net:"                   ; Prefix with "Net:"
        STRNE   r14, [ r4 ]
        ADRNE   r1, Token_DisplayCSD
        BLVC    PrintBuffers
        MOVVC   r0, #FSControl_ReadDir
        ADRVC   r1, CommandBuffer + :LEN: "Net:"
        MOVVC   r2, #Dir_Library
        ADRVCL  r3, FilingSystemName
        MOVVC   r5, #?CommandBuffer - 1 - :LEN: "Net:"
        SWIVC   XOS_FSControl
        TEQ     r1, #0                                  ; See if there is a Library
        ADR     r4, NetColon
        ADREQ   r1, Token_DisplayLibU                   ; If not use Net:"Unset"
        LDRNE   r14, [ r4 ]                             ; If it is set
        SUBNE   r4, r1, #:LEN: "Net:"                   ; Prefix with "Net:"
        STRNE   r14, [ r4 ]
        ADRNE   r1, Token_DisplayLib
        BLVC    PrintBuffers
        Pull    pc

        ALIGN
Token_DisplayDir0
        DCB     "DDS0", 0                               ; Dir. %0 Option 00 (Off) %1
        ALIGN
Token_DisplayDir1
        DCB     "DDS1", 0                               ; Dir. %0 Option 01 (Load) %1
        ALIGN
Token_DisplayDir2
        DCB     "DDS2", 0                               ; Dir. %0 Option 02 (Run) %1
        ALIGN
Token_DisplayDir3
        DCB     "DDS3", 0                               ; Dir. %0 Option 03 (Exec) %1

Token_DisplayCSD
        DCB     "CSDS", 0                               ; CSD  %0
Token_DisplayCSDU
        DCB     "CSDSU", 0                              ; CSD  %0"Unset"
Token_DisplayLib
        DCB     "LDS", 0                                ; Lib. %0
Token_DisplayLibU
        DCB     "LDSU",0                                ; Lib. %0"Unset"
        ALIGN

NetColon
        DCB     "Net:", 0                               ; Evil, loaded as a word
        ALIGN

PrintBuffers
        Push    lr
        ADR     r2, TemporaryBuffer
        MOV     r3, #?TemporaryBuffer
        ADR     r5, TextBuffer
        [       Debug
        DSTRING r1, "GSLookup on token ", cc
        DSTRING r4, " with ", cc
        DSTRING r5, " and "
        DREG    r2, "In to a buffer at &"
        ]
        BL      MessageTransGSLookup2
        [       Debug
        BVS     %65
        DREG    r2, "Returns buffer at &", cc
        DREG    r3, ", the used length is &"
65
        ]
        MOVVC   r0, r2                                  ; The passed buffer
        MOVVC   r1, r3                                  ; Length of the resultant string
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        Pull    pc
        ]

HowManyCollumns ROUT
        MOV     r0, #VduExt_WindowWidth
        MOV     r1, #-1
        Push    "r0, r1, lr"
        MOV     r0, sp                                  ; Incoming block
        MOV     r1, sp                                  ; Outgoing block
        SWI     XOS_ReadVduVariables
        Pull    "r1, r2, lr"                            ; Width in R1
        MOVVS   pc, lr
        MOV     r0, r9
        MOV     r9, #1
        SUBS    r1, r1, r0                              ; Is the record wider than the field
        BLE     CollumnExit
        INC     r1, 1
        INC     r0, 1                                   ; Account for the space character between collumns
CollumnLoop
        SUBS    r1, r1, r0
        BLE     CollumnExit
        INC     r9
        B       CollumnLoop
CollumnExit
        BICS    pc, lr, #VFlag

AddSpace
        MOV     r0, #" "
        STRB    r0, [ r1 ], #1
        MOV     pc, lr

PutDownNormalAccess
        Push    lr
        ADR     r0, AccessString
        LDRB    r2, [ r5, #12 ]
        BIC     r2, r2, #BitSeven                       ; Public locked bit
        MOV     r14, #4                                 ; Number of bit to start with
AccessLoop
        MOVS    r3, r2, LSR r14                         ; Put relevant bit in carry
        LDRB    r3, [ r0 ], #1
        STRCSB  r3, [ r1 ], #1
        DECS    r14
        MOVEQ   r3, #"/"
        STREQB  r3, [ r1 ], #1
        MOVEQ   r14, #8
        TEQ     r14, #4
        BNE     AccessLoop
        Pull    pc

AccessString
        DCB     "LPWRlewr"                              ; Bit order 32107654
        ALIGN

TheLongestDateInTheWorld
        DCD     MaxLengthDateLo
        DCD     MaxLengthDateHi

FindWidth
        Push    "r1, lr"
        DEC     sp, BufferSize
        ADR     r0, TheLongestDateInTheWorld
        MOV     r1, sp
        MOV     r2, #BufferSize                         ; What a big date that would be!
        SWI     XOS_ConvertStandardDateAndTime
        INC     sp, BufferSize
        Pull    "r1, pc", VS
        SUB     r10, r1, r0                             ; Work out how long this format is
        CMP     r10, #17                                ; Length of 8Hex Space 8Hex
        MOVLT   r10, #17                                ; R10 holds width of Time/Date or Load/Exec field
        ADD     r9, r10, #42                            ; The width of each entry,
        ADD     r10, r10, #30                           ; R10 is now the collum at the start of the length, clears V
        Pull    "r1, pc"

        LTORG

        [       OldOs
DoMultipleFileInfo ROUT
        ;       R1 => Argument list
        ;       R6 => Special field
        MOV     r11, r1                                 ; Preserve the original name
        MOV     r2, #0                                  ; Count the length of the name into R2
10
        LDRB    r0, [ r1, r2 ]
        INC     r2
        TEQ     r0, #0
        BNE     %10
        MOV     r3, #0                                  ; Count the length of the special field into R3
        TEQ     r6, #0
        BEQ     %30                                     ; Special field is zero length
20
        LDRB    r0, [ r6, r3 ]
        INC     r3
        TEQ     r0, #0
        BNE     %20
        INC     r3                                      ; Account for the # between the "Net" and the special field
30
        ADD     r2, r2, r3                              ; Total size of the new complete name
        INC     r2, 4 + 2 + 3                           ; Account for "Net:", the terminator(s) and rounding
        BIC     r2, r2, #3                              ; up to a word length
        MOV     r3, sp
        SUB     sp, sp, r2
        Push    r3                                      ; The old stack pointer, makes the restoration easy
        ADD     r2, sp, #4                              ; Point to the stack frame
        ADRL    r3, FilingSystemName
40
        LDRB    r0, [ r3 ], #1
        TEQ     r0, #0
        STRNEB  r0, [ r2 ], #1
        BNE     %40
        TEQ     r6, #0
        BEQ     %60
        MOV     r0, #"#"
50
        STRB    r0, [ r2 ], #1
        LDRB    r0, [ r6 ], #1
        TEQ     r0, #0
        BNE     %50
60
        MOV     r0, #":"
70
        STRB    r0, [ r2 ], #1
        LDRB    r0, [ r1 ], #1
        TEQ     r0, #0
        BNE     %70
        STRB    r0, [ r2 ], #1                          ; Copy in the final terminator
        ADD     r1, sp, #4                              ; Point at the fab new name
80
        DEC     r2
        LDRB    r0, [ r2 ]
        STRB    r0, [ r2, #1 ]                          ; Move it along one byte
        TEQ     r0, #":"
        ADDEQ   r2, r2, #1                              ; Move past this
        TEQNE   r0, #"."
        BNE     %80
        MOV     r14, #0
        STRB    r14, [ r2 ], #1                         ; R2 now points at the leaf name
        TEQ     r0, #"."
        ADDEQ   r2, r2, #1
        MOV     r6, r2
        ; Now check for the existance of wildcards in the leafname
        MOV     r2, r6                                  ; The leafname pointer
WildCardCheckLoop
        LDRB    r0, [ r2 ], #1
        TEQ     r0, #0                                  ; Is it the terminator (the end)?
        MOVEQ   r1, r11                                 ; Yes, get ready for SingleFileInfo
        MOVEQ   r7, #0
        BEQ     SingleFileInfo
        TEQ     r0, #"#"
        TEQNE   r0, #"*"
        BNE     WildCardCheckLoop                       ; Still no wildcards
        DEC     sp, FrameSize
        BL      FindWidth
        BVS     ExitMultipleInfo
        MOV     r9, #1                                  ; One collumn
        MOV     r8, #-1                                 ; First collumn
        MOV     r7, #0                                  ; Start from the first name
MultipleInfoLoop
        MOV     r0, #OSGBPB_ReadDirEntriesCatInfo
        MOV     r2, sp
        MOV     r3, #100
        MOV     r4, r7                                  ; Entry number
        MOV     r5, #FrameSize
        SWI     XOS_GBPB
        BVS     ExitMultipleInfo
        MOV     r7, r4
        TEQ     r3, #0
        BEQ     NoMatchesInThisLot
        MOV     r5, sp                                  ; Base of returned data
        Push    "r1, r6"
        MOV     r6, r3                                  ; Number of records in this bunch
        BL      ConvertExamineOutput
        Pull    "r1, r6"
        BVS     ExitMultipleInfo

NoMatchesInThisLot
        CMP     r7, #-1
        BNE     MultipleInfoLoop
        SWI     XOS_NewLine
        ]       ; OldOs

ExitMultipleInfo
        INC     sp, FrameSize
        LDR     sp, [ sp ]
        Pull     pc


DoSingleFileInfo ROUT                                   ; Implementation of *FileInfo
        ;       R1 => Argument list
        Push    sp
        MOV     r7, pc
        BL      UseNameToSetTemporary
SingleFileInfo
        DEC     sp, FrameSize
        MOV     r0, r1                                  ; Argument list
        ADR     r1, CommandBuffer
        LDR     r2, =&6F666E49                          ; "Info"
        STR     r2, [ r1 ]
        LDR     r2, =&20                                ; " "
        STR     r2, [ r1, #4 ]
        MOV     r2, #5
        BL      CopyObjectNameInDoingTranslation
        BVS     ExitMultipleInfo
        MOV     r0, #FileServer_DecodeCommand
        BL      DoFSOp
        BVS     ExitMultipleInfo
        MOV     r0, r1                                  ; Point at the returned text
        MOV     r2, #0
FindTheEnd
        LDRB    r1, [ r0, r2 ]
        EORS    r1, r1, #&80                            ; Is this the terminator returned by a file server
        STREQB  r1, [ r0, r2 ]
        INC     r2
        BNE     FindTheEnd
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        B       ExitMultipleInfo

        LTORG

        END
