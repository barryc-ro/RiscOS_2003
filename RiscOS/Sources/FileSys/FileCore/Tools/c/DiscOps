/*
        Basic DiscOp interface routines
*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "typedefs.h"
#include "EMaps.h"
#include "DiscOps.h"


int discop_to_use = ADFS_DiscOp;

_kernel_oserror *adfs_discop_read
(
        void ** const destination,
        disc_record const * const discrec,
        direct_disc_address * const source_start,
        unsigned int * const source_len
)
{
        _kernel_swi_regs r;
        _kernel_oserror *err;

        r.r[0] = 0;
        r.r[1] = 0x11 | ((int)discrec << 6);
/*        r.r[1] = 1;*/
        r.r[2] = *(int *)source_start;
        r.r[3] = (int)*destination;
        r.r[4] = (int)*source_len;
        r.r[5] = 0;
        r.r[6] = 0;
        r.r[7] = 0;
        r.r[8] = 0;
        r.r[9] = 0;
/*
        printf( "Reading (op %d, SWI %#x) to &%08X from disc address &%08X, length &%08X >>", r.r[1], discop_to_use, r.r[3], r.r[2], r.r[4] );
        (void)getchar();
        printf( "\n" );
*/
        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );

/*if ( err ) printf( "%s\n", err->errmess );*/

        *source_start = *(direct_disc_address *)&r.r[2];
        *destination = (void *)r.r[3];
        *source_len = (unsigned int)r.r[4];

        return err;
}

_kernel_oserror *adfs_discop_write
(
        void ** const source,
        disc_record const * const discrec,
        direct_disc_address * const destination,
        unsigned int * const source_len
)
{
        _kernel_swi_regs r;
        _kernel_oserror *err;

        r.r[0] = 0;
        r.r[1] = 0x12 | ((int)discrec << 6);
/*        r.r[1] = 2;*/
        r.r[2] = *(int *)destination;
        r.r[3] = (int)*source;
        r.r[4] = (int)*source_len;
        r.r[5] = 0;
        r.r[6] = 0;
        r.r[7] = 0;
        r.r[8] = 0;
        r.r[9] = 0;
/*
        printf( "Writing (op %d, SWI %#x) to &%08X from disc address &%08X, length &%08X >>", r.r[1], discop_to_use, r.r[3], r.r[2], r.r[4] );
        (void)getchar();
        printf( "\n" );
*/
        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );

/*if ( err ) printf( "%s\n", err->errmess );*/

        *destination = *(direct_disc_address *)&r.r[2];
        *source = (void *)r.r[3];
        *source_len = (unsigned int)r.r[4];

        return err;
}

disc_record floppy_boot_record =
{
        10, /* SectorSize */
        5, /* SecsPerTrk */
        1, /* Heads */
        2, /* Density */
        0, /* LinkBits */
        0, /* BitSize */
        0, /* RAskew */
        0, /* BootOptions */
        0, /* reserved */
        0, /* Zones */
        0, /* ZoneSpare */
        {0,0}, /* RootDir */
        640*1024, /* DiscSize */
        0, /* DiscId */
        {0,0,0,0,0,0,0,0,0,0}, /* DiscName */
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* unused */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, /* unused */
        {   0,   0,   0,0x20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 000 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 010 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 020 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 030 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 040 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 050 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 060 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 070 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 080 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 090 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0a0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0f0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 100 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 110 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 120 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 130 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 140 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 150 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 160 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 170 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 180 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 190 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1a0 */
            0,   0,   0,0x16,0x0d,0x0c,0xa9,0x0a,0x80,0x00,0xff,0x03,0x00,0x00,0x00,0x00, /* 1b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0} /* 1f0 */
};

disc_record winnie_boot_record =
{
        8, /* SectorSize */
        32, /* SecsPerTrk */
        1, /* Heads */
        0, /* Density */
        0, /* LinkBits */
        0, /* BitSize */
        0, /* RAskew */
        0, /* BootOptions */
        0, /* reserved */
        0, /* Zones */
        0, /* ZoneSpare */
        {0,0}, /* RootDir */
        640*1024, /* DiscSize */
        0, /* DiscId */
        {0,0,0,0,0,0,0,0,0,0}, /* DiscName */
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* unused */
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, /* unused */
        {   0,   0,   0,0x20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 000 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 010 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 020 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 030 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 040 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 050 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 060 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 070 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 080 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 090 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0a0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 0f0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 100 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 110 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 120 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 130 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 140 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 150 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 160 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 170 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 180 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 190 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1a0 */
            0,   0,   0,0x16,0x0d,0x0c,0xa9,0x0a,0x80,0x00,0xff,0x03,0x00,0x00,0x00,0x00, /* 1b0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1c0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1d0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, /* 1e0 */
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0} /* 1f0 */
};

_kernel_oserror *read_disc_record
(
        char const * const disc_specifier,
        disc_record * const discrec
)
{
        direct_disc_address a;
        unsigned int dummy = 0x400;
        char dummy_area[ 0x400 ];
        char *dummyp = dummy_area;
        _kernel_oserror *err;
        _kernel_swi_regs r;

        a.disc_number = disc_specifier[1]-'0';

        if ( a.disc_number < 4 )
        {
                /*
                        Boot floppy
                */
                a.byte_offset = 0;

                err = adfs_discop_read( (void **)&dummyp, &floppy_boot_record, &a, &dummy );

                if ( !err )
                        memcpy( discrec, &dummy_area[4], 64);
        }
        else
        {
                /*
                        Boot winnie
                */
                a.byte_offset = 0xc00 + 0x200 - 0x200;
                dummyp = &discrec->bad_block_list[0];
                dummy = 512;

                err = adfs_discop_read( (void **)&dummyp, &winnie_boot_record, &a, &dummy );

                if ( !err )
                {
/*printf( "1st half of read succeeded\n" );
{int i,j;for(i=0;i<512;i+=16){for(j=0;j<16;j++)printf(" %02x",((char *)discrec)[i+j]);printf("\n");}}*/
                        memcpy( discrec, &discrec->bad_block_list[ 0x200 - 64 ], 64);
/*{int i,j;for(i=0;i<512;i+=16){for(j=0;j<16;j++)printf(" %02x",((char *)discrec)[i+j]);printf("\n");}}*/

                        discrec->root_directory.indirect.disc_number = a.disc_number;

                        /*
                                Specify the winnie
                        */
                        r.r[1] = 0x1f | ((int)discrec<<6);
                        r.r[2] = a.disc_number << (32-3);
                        err = _kernel_swi( XOS_Bit | discop_to_use, &r, &r );
                        if ( !err || err )      /* ie ignore error */
                        {
/*printf( "Specify worked\n" );*/
                                a = map_start( discrec );
                                dummyp = dummy_area;
                                dummy = 0x400;
                                err = adfs_discop_read( (void **)&dummyp, discrec, &a, &dummy );

                                if ( !err )
                                {
                                        memcpy( discrec, &dummy_area[4], 64);
                                }
                        }
                }
        }

        if ( !err )
        {
                discrec->root_directory.indirect.disc_number = a.disc_number;
                *(int *)&discrec->bad_block_list = 0x20000000;
        }

        return err;
}
