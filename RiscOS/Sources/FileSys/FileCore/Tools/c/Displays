/*
        Routines to perform various display functions
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "typedefs.h"
#include "EMaps.h"
#include "Displays.h"

void display_disc_record
(
        disc_record *discrec
)
{
        printf( "log2_sector_size %d\n", discrec->log2_sector_size );
        printf( "sectors_per_track %d\n", discrec->sectors_per_track );
        printf( "heads %d\n", discrec->heads );
        printf( "density %d\n", discrec->density );
        printf( "fragment_id_length %d\n", discrec->fragment_id_length );
        printf( "log2_bytes_per_map_bit %d\n", discrec->log2_bytes_per_map_bit );
        printf( "sector_skew %d\n", discrec->sector_skew );
        printf( "boot_option %d\n", discrec->boot_option );
        printf( "zones_in_map %d\n", discrec->zones_in_map );
        printf( "zone_spare %d\n", discrec->zone_spare );
        printf( "root_directory &%X\n", *(int *)&discrec->root_directory );
        printf( "disc_size %d\n", discrec->disc_size );
        printf( "disc_id %d\n", discrec->disc_id );
        printf( "disc_name %10s\n", discrec->disc_name );
}

static YesNoAnswer display_free_fragment_for_map_as_map
(
        void *param,
        disc_record const * const discrec,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        param = param;

        printf( "(% 8X,% 8X) ",
                map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset,
                bit_length<<discrec->log2_bytes_per_map_bit );

        return No;
}

void display_map_as_map
(
        void const * const map,
        disc_record const * const discrec
)
{
        do_zone_walk( 0,
                NULL, NULL,
                (unused_function)display_free_fragment_for_map_as_map, NULL,
                NULL, NULL,
                NULL, NULL,
                (all_done_function)printf, "\n",
                discrec, map );
}

static void pre_zone_for_map_completely
(
        void *param,
        disc_record const *discrec,
        unsigned int zone
)
{
        param = param;
        discrec = discrec;

        printf( "Zone %d\n", zone );
}

static YesNoAnswer display_free_fragment_for_map_completely
(
        void *param,
        disc_record const * const discrec,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        param = param;
        bit_length = bit_length;

        printf( "% 8X -    free    - ", map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset );

        return No;
}

static YesNoAnswer display_alloced_fragment_for_map_completely
(
        void *param,
        disc_record const * const discrec,
        unsigned int zone,
        unsigned int fragment_id,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        param = param;
        bit_length = bit_length;

        printf( "% 8X - (% 8X) - ",
                map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset,
                fragment_id );

        return No;
}

static void post_zone_for_map_completely
(
        void *param,
        disc_record const * const discrec,
        unsigned int zone,
        unsigned int bit_offset
)
{
        param = param;
        zone = zone;

        printf( "% 8X\n", map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset );
}

void display_map_completly
(
        void const * const map,
        disc_record const * const discrec
)
{
        do_zone_walk( 0,
                (pre_zone_function)pre_zone_for_map_completely, NULL,
                (unused_function)display_free_fragment_for_map_completely, NULL,
                (alloced_function)display_alloced_fragment_for_map_completely, NULL,
                (post_zone_function)post_zone_for_map_completely, NULL,
                (all_done_function)printf, "\n",
                discrec, map );
}

static YesNoAnswer display_bad_block_if_bad
(
        void *param,
        disc_record const * const discrec,
        unsigned int zone,
        unsigned int fragment_id,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        param = param;

        if ( fragment_id == 1 )
                printf( "% 8X,% 8X\n",
                        map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset,
                        bit_length << discrec->log2_bytes_per_map_bit );

        return No;
}

void display_map_bad_blocks
(
        void const * const map,
        disc_record const * const discrec
)
{
        do_zone_walk( 0,
                (pre_zone_function)pre_zone_for_map_completely, NULL,
                NULL, NULL,
                (alloced_function)display_bad_block_if_bad, NULL,
                NULL, NULL,
                (all_done_function)printf, "\n",
                discrec, map );
}

static YesNoAnswer display_fragment_if_matches
(
        void *param,
        disc_record const * const discrec,
        unsigned int zone,
        unsigned int fragment_id,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        if ( fragment_id == (int)param )
                printf( "% 8X (%d bits),% 8X (%d bits)\n",
                        map_bit_offset_to_disc_address( discrec, bit_offset ).byte_offset, bit_offset,
                        bit_length << discrec->log2_bytes_per_map_bit, bit_length );

        return No;
}

void diplay_objects_fragments
(
        unsigned int object_id,
        disc_record const *discrec,
        void const *map
)
{
        do_zone_walk( 0,
                NULL, NULL,
                NULL, NULL,
                (alloced_function)display_fragment_if_matches, (void *)object_id,
                NULL, NULL,
                (all_done_function)printf, "\n",
                discrec, map );
}


int query
(
        char const * const str
)
{
        _kernel_swi_regs r;

        printf( "%s ?", str );

        if ( !_kernel_swi( XOS_Bit | OS_Confirm, &r, &r ) && r.r[0] == 'y' )
        {
                printf( "...Yes\n" );

                return Yes;
        }

        printf( "...No\n" );

        return No;
}
