/*
        Main for FixADisc
*/

#include <stdio.h>
#include <stdlib.h>
#include "typedefs.h"
#include "EMaps.h"
#include "EObjects.h"
#include "Dirs.h"
#include "Displays.h"
#include "kernel.h"
#include "swis.h"
#include "discops.h"

int main( int argc, char **argv )
{
        int disc;
        char disc_identifier[ 20 ];
        disc_record discrec;
        void *map;
/*
REDUNDENT:
        unsigned int zone;
*/
        int print_free_space = No;
        int print_disc_record = No;
        int print_whole_map = No;
        int print_bad_areas = No;
/*
REDUNDENT:
        int check_map_checkbytes = No;
*/
        int i;
        _kernel_oserror *err;

        /*
                Determine options
        */
        if ( argc == 2 )
        {
                for ( i = 0; argv[1][i]; i++ )
                {
                        switch ( argv[1][i] )
                        {
                        case 'f':
                        case 'F':
                                print_free_space = Yes;
                                break;

                        case 'r':
                        case 'R':
                                print_disc_record = Yes;
                                break;

                        case 'm':
                        case 'M':
                                print_whole_map = Yes;
                                break;

                        case 'b':
                        case 'B':
                                print_bad_areas = Yes;
                                break;

/*
REDUNDENT:
                        case 'c':
                        case 'C':
                                check_map_checkbytes = Yes;
                                break;
*/

                        case 'a':
                        case 'A':
                                discop_to_use = ADFS_DiscOp;
                                break;

                        case 's':
                        case 'S':
                                discop_to_use = SCSIFS_DiscOp;
                                break;

                        default:
                                break;
                        }
                }
        }
        else
        {
                printf( "%s <options>\n", argv[0] );
                printf( "where options is a string of:\n" );
                printf( "f - print free space map\n" );
                printf( "r - print disc record\n" );
                printf( "m - print whole map\n" );
                printf( "b - print bad areas of disc\n" );
/*
REDUNDENT:
                printf( "c - check map check bytes\n" );
*/
                printf( "a - check ADFS discs\n" );
                printf( "s - check SCSIFS discs\n" );
                printf( "This program, like all irritating thrown together programs\n" );
                printf( "falls short of expectations by not actually fixing your disc\n" );
                printf( "but, it does tell you in excrutiating detail exactly what's wrong!\n" );
                exit(0);
        }

        /*
                For each disc
        */
        for ( disc = 0; disc < 8; disc++ )
        {
                /*
                        Construct identifier string
                */
                sprintf( disc_identifier, ":%d", disc );

                /*
                        Get the disc record for this disc - skip if didn't get it
                */
                if ( (err=read_disc_record( disc_identifier, &discrec ))!=NULL )
                {
                        printf( ":%d skipped due to a %s error\n", disc, err->errmess );
                        continue;
                }

                /*
                        Frig the disc number because FileCore gives us such a crap value.
                */
                discrec.root_directory.direct.disc_number = disc;

                printf( "Disc %s\n", disc_identifier );

                /*
                        If displaying the disc record then do so
                */
                if ( print_disc_record )
                        display_disc_record( &discrec );

                /*
                        Read (and fix) the disc's map
                */
                read_map( &map, &discrec );

/*
                if ( disc == 0 || disc != 0 )
                {
                        unsigned char root_directory[ 0x800 ];
                        void *root_directoryp = root_directory;
                        unsigned int from_where = 0;
                        unsigned int quantity = 0x800;
                        int i,j;

                        if ( read_object_bytes( &root_directoryp, *(indirect_disc_address *)&discrec.root_directory, &from_where, &quantity, &discrec, map ) )
                        {
                                printf( "Reading root directory failed\n" );
                        }
                        else
                        {
                                printf( "Root directory now read\n" );
                                for ( i = 0; i < 0x800; i+=16 )
                                {
                                        printf( "% 8X  ", i );
                                        for ( j = 0; j < 16; j++ )
                                        {
                                                printf( " %02X", root_directory[i+j] );
                                        }

                                        printf( "  " );
                                        for ( j = 0; j < 16; j++ )
                                        {
                                                if ( root_directory[i+j] >= ' ' && root_directory[i+j] <= '~' )
                                                {
                                                        printf( "%c", root_directory[i+j] );
                                                }
                                                else
                                                {
                                                        printf( "." );
                                                }
                                        }

                                        printf( "\n" );
                                }
                        }

                        recurse_directory_display( "$", discrec.root_directory.indirect, &discrec, map );
                }
*/

                /*
                        1st stage directory tree wander.
                        This stage:
                        *  Identifies objects
                        *  Fixes directories
                        *  Counts references to objects
                        *  (should) Reattaches detached objects
                        *  Warns about under usages and over usages
                */
                accum_and_display_directory_stats( &discrec, map );

/*
REDUNDENT:
                if ( check_map_checkbytes )
                {
                        for ( zone = 0; zone < discrec.zones_in_map; zone++ )
                        {
                                printf( "Zone %d ", zone );

                                if ( check_zone_valid( map, &discrec, zone ) )
                                {
                                        printf( "good\n" );
                                }
                                else
                                {
                                        printf( "bad\n" );
                                }
                        }

                        if ( crosscheck_map_valid( map, &discrec ) )
                        {
                                printf( "Whole map self consistent\n" );
                        }
                        else
                        {
                                printf( "Whole map inconsistent with self\n" );
                        }
                }
*/

                if ( print_free_space )
                        display_map_as_map( map, &discrec );

                if ( print_whole_map )
                        display_map_completly( map, &discrec );

                if ( print_bad_areas )
                        display_map_bad_blocks( map, &discrec );

                free( map );
        }

        return 0;
}
