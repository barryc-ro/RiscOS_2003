/*
        Routines to access E format disc objects
*/

#include <stdio.h>
#include <stdlib.h>
#include "typedefs.h"
#include "DiscOps.h"
#include "EObjects.h"
#include "EMaps.h"

typedef struct find_frag_info
{
        unsigned int frid_to_find;
        unsigned int found_frag_start;
        unsigned int found_frag_length;
        unsigned int bits_left_to_skip;
        unsigned int orig_bit_offset;
}       find_frag_info;


static YesNoAnswer check_for_one_we_want
(
        find_frag_info *param,
        disc_record const * const discrec,
        unsigned int zone,
        unsigned int fragment_id,
        unsigned int bit_offset,
        unsigned int bit_length
)
{
        zone = zone;

        if ( fragment_id == param->frid_to_find )
        {
                /*
                        Fragment of required object
                */
                if ( param->bits_left_to_skip >= bit_length )
                {
                        /*
                                Havn't reached required position yet
                        */
                        param->bits_left_to_skip -= bit_length;
                }
                else
                {
                        /*
                                This fragment contains required postion
                        */
                        param->found_frag_start = bit_offset;
                        param->found_frag_length = bit_length;

                        return Yes;
                }
        }

        return No;
}

static void didnt_find_fragment
(
        find_frag_info *param
)
{
        printf( "Total disaster: Object %d, offset %d not found\n", param->frid_to_find, param->orig_bit_offset );

        exit(0);
}

void find_fragment
(
        unsigned int * const found_frag_start,
        unsigned int * const found_frag_length,
        unsigned int * const offset_in_frag,
        disc_record const * const discrec,
        void const * const map,
        indirect_disc_address const fragment_to_find,
        unsigned int const bit_offset_in_object
)
{
        find_frag_info search_param;

        search_param.frid_to_find = fragment_to_find.fragment_id;
        search_param.bits_left_to_skip = bit_offset_in_object;
        search_param.orig_bit_offset = bit_offset_in_object;

        do_zone_walk( indirect_disc_address_to_zone( discrec, fragment_to_find ),
                NULL, NULL,
                NULL, NULL,
                (alloced_function)check_for_one_we_want, &search_param,
                NULL, NULL,
                (all_done_function)didnt_find_fragment, &search_param,
                discrec, map );

        *found_frag_start = search_param.found_frag_start;
        *found_frag_length = search_param.found_frag_length;
        *offset_in_frag = search_param.bits_left_to_skip;

        return;
}

void find_file_fragment
(
        direct_disc_address * const where,
        unsigned int * const bytes_left_in_fragment,
        disc_record const * const discrec,
        void const * const map,
        indirect_disc_address const object_to_find,
        unsigned int const byte_offset_in_object
)
{
        unsigned int bit_offset;
        unsigned int correction;
        unsigned int found_frag_start;
        unsigned int found_frag_length;
        unsigned int offset_in_frag;

        /*
                Correction to offset into object is sector offset converted to bytes
        */
        if ( object_to_find.sector_offset )
                correction = (object_to_find.sector_offset-1) << discrec->log2_sector_size;
        else
                correction = 0;

        /*
                bit offset into object is byte offset plus correction divided down
        */
        correction += byte_offset_in_object;
        bit_offset = correction >> discrec->log2_bytes_per_map_bit;

        /*
                Correction to resultant disc address is remainder of division
        */
        correction -= bit_offset << discrec->log2_bytes_per_map_bit;

        /*
                Find the relevant fragment
        */
        find_fragment( &found_frag_start, &found_frag_length, &offset_in_frag,
                        discrec, map, object_to_find, bit_offset );

        /*
                Convert bit offset to disc address and add correction
        */
        *where = map_bit_offset_to_disc_address( discrec, found_frag_start+offset_in_frag );
        where->byte_offset += correction;

        /*
                Evaluate bytes left in fragment
        */
        *bytes_left_in_fragment = ((found_frag_length - offset_in_frag)<<discrec->log2_bytes_per_map_bit) - correction;
}

_kernel_oserror *read_object_bytes
(
        void ** const to_where,
        indirect_disc_address const what,
        unsigned int * const from_where,
        unsigned int * const how_much_left,
        disc_record const * const discrec,
        void const * const map
)
{
        direct_disc_address where_on_disc;
        unsigned int bytes_left_in_fragment;
        unsigned int desired_transfer_size;
        unsigned int amount_left;
        _kernel_oserror *err = NULL;

        while( !err && *how_much_left > 0 )
        {
                find_file_fragment( &where_on_disc, &bytes_left_in_fragment, discrec, map, what, *from_where );

                if ( bytes_left_in_fragment > *how_much_left )
                {
                        desired_transfer_size = *how_much_left;
                }
                else
                {
                        desired_transfer_size = bytes_left_in_fragment;
                }

                amount_left = desired_transfer_size;

                err = adfs_discop_read( to_where, discrec, &where_on_disc, &amount_left );

                /*
                        Update rovers.
                */
                *how_much_left -= desired_transfer_size - amount_left;
                *from_where += desired_transfer_size - amount_left;
                *to_where = (void *)((int)*to_where + desired_transfer_size - amount_left);
        }

        return err;
}

_kernel_oserror *write_object_bytes
(
        void ** const to_where,
        indirect_disc_address const what,
        unsigned int * const from_where,
        unsigned int * const how_much_left,
        disc_record const * const discrec,
        void const * const map
)
{
        direct_disc_address where_on_disc;
        unsigned int bytes_left_in_fragment;
        unsigned int desired_transfer_size;
        unsigned int amount_left;
        _kernel_oserror *err = NULL;

        while( !err && *how_much_left > 0 )
        {
                find_file_fragment( &where_on_disc, &bytes_left_in_fragment, discrec, map, what, *from_where );

                if ( bytes_left_in_fragment > *how_much_left )
                {
                        desired_transfer_size = *how_much_left;
                }
                else
                {
                        desired_transfer_size = bytes_left_in_fragment;
                }

                amount_left = desired_transfer_size;

                err = adfs_discop_write( to_where, discrec, &where_on_disc, &amount_left );

                /*
                        Update rovers.
                */
                *how_much_left -= desired_transfer_size - amount_left;
                *from_where += desired_transfer_size - amount_left;
                *to_where = (void *)((int)*to_where + desired_transfer_size - amount_left);
        }

        return err;
}
