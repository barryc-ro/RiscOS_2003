#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "tester.h"
#include "logger.h"
#include "version.h"
#include "mymalloc.h"

char **path_roots;
int number_of_paths;
int problems;
int gotfull = No;
int nest_probability = 0x200;

char random_data_area[ 50000 ];
char random_write_result[ 50000 ];

void pout_error( _kernel_oserror *err )
{
        if ( (err->errnum & FileError_Mask) == Error_Full )
        {
                gotfull = Yes;
        }
        else
        {
                problems++;
        }
        logprintf( "error number %x: %s ", err->errnum, err->errmess );
}

void check_regs_unchanged( _kernel_swi_regs *oldr, _kernel_swi_regs *newr, int mask )
{
        int i;

        for ( i = 0;
                mask;
                i++, (mask = mask >> 1) )
        {
                if ( (mask & 1) &&
                        oldr->r[i] != newr->r[i] )
                {
                        problems++;
                        logprintf( "r%d changed from %x to %x ", i, oldr->r[i], newr->r[i] );
                }
        }
}

/*
        mask controls what is checked:
        Bit     info
        0       object type
        1       load address
        2       exec address
        3       file length
        4       attributes
        5       file type
        6       date stamp
*/
void check_catalogue_info( char *name, int type, int load, int exec, int length, int attributes, int mask )
{
        _kernel_oserror *err;
        _kernel_swi_regs r;

        r.r[0] = 17;
        r.r[1] = (int)name;
        err = _kernel_swi( XOS_Bit | OS_File, &r, &r );
        if ( err )
        {
                problems++;
                pout_error( err );
        }
        else
        {
                if ( (mask & 1) &&
                        ((type == 0 && r.r[0] != 0) ||
                         (type == 1 && r.r[0] != 1 && r.r[0] != 3) ||
                         (type == 2 && r.r[0] != 2)) )
                {
                        problems++;
                        logprintf( "object type is %d, but expected %d ", r.r[0], type );
                }
                if ( (mask & 2) &&
                        r.r[2] != load &&
                        (r.r[2] & 0xfff00000) != 0xfff00000 )
                {
                        problems++;
                        logprintf( "load address is %#x, but expected %#x ", r.r[2], load );
                }
                if ( (mask & 4) &&
                        r.r[3] != exec &&
                        (r.r[2] & 0xfff00000) != 0xfff00000 )
                {
                        problems++;
                        logprintf( "execute address is %#x, but expected %#x ", r.r[3], exec );
                }
                if ( (mask & 8) &&
                        r.r[4] != length )
                {
                        problems++;
                        logprintf( "length is %d, but expected %d ", r.r[4], length );
                }
                if ( (mask & 16) &&
                        ((r.r[0] == 1 && (r.r[5] & 0xfffffff7) != (attributes & 0xfffffff7)) ||
                         (r.r[0] == 2 && (r.r[5] & 0xfffffff4) != (attributes & 0xfffffff4))) )
                {
                        /*
                                Mismatched attributes are only a problem if wr are wrong on a file
                        */
                        if ( r.r[0] == 1 && (r.r[5] & 0x00000003) != (attributes & 0x00000003) )
                        {
                                problems++;
                        }

                        logprintf( "attributes are %#x, but expected %#x ", r.r[5], attributes );
                }
                if ( (mask & 32) &&
                        (r.r[2] & 0xfff00) != (load & 0xfff00) )
                {
                        problems++;
                        logprintf( "file type is %#x, but expected %#x ", (r.r[2]>>8) & 0xfff, (load>>8) & 0xfff );
                }
                if ( mask & 64 )
                {
                        unsigned nh1;
                        unsigned nl1;
                        unsigned nh2;
                        unsigned nl2;

                        nh1 = load & 0xff;
                        nl1 = exec;
                        nh1 = (nh1 << 12) | (nl1 >> 20);           /* separate off the top 20 bits into nh */
                        nl1 = (nl1 & 0xfffff) | ((nh1%100)<<20);   /* place the low 20 bits plus the remainder of the high 20 bits in nl */
                        nh1 = ((nh1/100)<<20) + (nl1/100);         /* divide nh and shift back to top bits, and divide nl */
                        nl1 = (nl1%100);                          /* get the remainder and scale to 1/1000000 ths of a second */
                        nh2 = r.r[2] & 0xff;
                        nl2 = r.r[3];
                        nh2 = (nh2 << 12) | (nl2 >> 20);           /* separate off the top 20 bits into nh */
                        nl2 = (nl2 & 0xfffff) | ((nh2%100)<<20);   /* place the low 20 bits plus the remainder of the high 20 bits in nl */
                        nh2 = ((nh2/100)<<20) + (nl2/100);         /* divide nh and shift back to top bits, and divide nl */
                        nl2 = (nl2%100);                           /* get the remainder */

                        if ( nh1 != nh2 )
                        {
                                problems++;
                                logprintf( "date stamp is %#02x%08x, but expected %#02x%08x ", r.r[2] & 0xff, r.r[3], load & 0xff, exec );
                        }
                }
        }
}

void check_openfiles( void )
{
        int i;
        _kernel_oserror *err;
        _kernel_swi_regs r;

        for ( i = 0; i < NumberOfOpenFiles; i++ )
        {
                if ( open_files[i].file )
                {
                        r.r[0] = 0;
                        r.r[1] = open_files[i].file;
                        err = _kernel_swi( XOS_Bit | OS_Args, &r, &r );

                        if ( err )
                        {
                                pout_error( err );
                                logprintf( "whilst checking open files on file %d\n", open_files[i].file );
                        }
                }
        }
}

int main( int argc, char *argv[] )
{
        int i = 0;
        char *name;
        int temp;
        int *file;
        char *from;
        char *to;
        char *attribs;
        _kernel_swi_regs r;
        char *dummy;
        int delcount = 0;
        int whichswitch;

        if ( argc < 4 )
        {
                printf( "%s <log file> <log file size> <test dir>[ <test dir>]*\n", argv[0] );
                printf( "Will bash those directories until one of the discs gets full\n" );
                printf( "The results will be placed in the log file, wrapping\n" );
                printf( "as soon as the specified size is reached. A 'END' string\n" );
                printf( "indicates the log file's end\n" );
                return 0;
        }

        path_roots = &argv[3];
        number_of_paths = argc-3;

        if ( !logger_start( argv[1], strtol( argv[2], &dummy, 0 )))
        {
                printf( "Logging failed to start\n" );
                return 1;
        }

        logprintf( "%s\n", version );

        while( 1 )
        {
                problems = 0;

                check_openfiles();

                logprintf( "%d) ", i );

                whichswitch = delcount ? (delcount--, 0) : (myrand() * 49) / 0x1000;
                switch( whichswitch )
                {
                case 0: /* delete object */
                        name = random_closed_object();
                        if ( name )
                        {
                                os_file6( name );
                                myfree( name );
                        }
                        break;

                case 1: /* create file load + execute */
                        name = new_random_path();
                        if ( name )
                        {
                                temp = (myrand() ^ (myrand()<<8));
                                os_file7( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        temp,
                                        temp + myrand() );
                                myfree( name );
                        }
                        break;

                case 2: /* create directory with default number of entries */
                        name = new_random_path();
                        if ( name )
                        {
                                os_file8( name, 0 );
                                myfree( name );
                        }
                        break;

                case 3:
                        name = random_object();
                        if ( name )
                        {
                                os_file1( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        random_attributes() );
                                myfree( name );
                        }
                        break;

                case 4:
                        name = random_object();
                        if ( name )
                        {
                                os_file2( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20) );
                                myfree( name );
                        }
                        break;

                case 5:
                        name = random_object();
                        if ( name )
                        {
                                os_file3( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20) );
                                myfree( name );
                        }
                        break;

                case 6:
                        name = random_object();
                        if ( name )
                        {
                                os_file4( name,
                                        random_attributes() );
                                myfree( name );
                        }
                        break;

                case 7:
                        name = random_file();
                        if ( name )
                        {
                                os_file9( name );
                                myfree( name );
                        }
                        break;

                case 8:
                        name = random_file();
                        if ( name )
                        {
                                os_file18( name,
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 9:
                        name = new_random_path();
                        if ( name )
                        {
                                os_file0( name,
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() | (myrand()<<12) ^ (myrand() << 20),
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 10:
                        name = new_random_path();
                        if ( name )
                        {
                                os_file10( name,
                                        myrand(),
                                        myrand() );
                                myfree( name );
                        }
                        break;

                case 11:
                        name = new_random_path();
                        if ( name )
                        {
                                temp = (myrand() ^ (myrand()<<8));
                                os_file11( name,
                                        myrand(),
                                        temp,
                                        temp + myrand() );
                                myfree( name );
                        }
                        break;

                case 12:
                        name = random_object();
                        if ( name )
                        {
                                os_file17( name );
                                myfree( name );
                        }
                        break;

                case 13:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_file16( name );
                                myfree( name );
                        }
                        break;

                case 14:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol0( name );
                                myfree( name );
                        }
                        break;

                case 15:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol1( name );
                                myfree( name );
                        }
                        break;

                case 16:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol5( name );
                                myfree( name );
                        }
                        break;

                case 17:
                        name = random_directory();
                        if ( name )
                        {
                                os_fscontrol6( name );
                                myfree( name );
                        }
                        break;

                case 18:
                        os_fscontrol7();
                        break;

                case 19:
                        os_fscontrol8();
                        break;

                case 20:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args0( file );
                        }
                        break;

                case 21:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args1( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 22:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args2( file );
                        }
                        break;

                case 23:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args3( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 24:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args4( file );
                        }
                        break;

                case 25:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args5( file );
                        }
                        break;

                case 26:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args6( file, myrand() * 2 ^ myrand() );
                        }
                        break;

                case 27:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_args255( file );
                        }
                        break;

                case 28:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_bget( file );
                        }
                        break;

                case 29:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_bput( file, (char)(myrand() & 0xff) );
                        }
                        break;

                case 30:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb2( file, myrand());
                        }
                        break;

                case 31:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb1( file, myrand(), myrand() );
                        }
                        break;

                case 32:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb4( file, myrand() );
                        }
                        break;

                case 33:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_gbpb3( file, myrand(), myrand() );
                        }
                        break;

                case 34:
                        os_gbpb5();
                        break;

                case 35:
                        os_gbpb6();
                        break;

                case 36:
                        os_gbpb7();
                        break;

                case 37:
                        os_gbpb8( myrand() & 0x3f );
                        break;

                case 38:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb9( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 39:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb10( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 40:
                        name = random_directory();
                        if ( name )
                        {
                                os_gbpb11( name, myrand() & 0x3f );
                                myfree( name );
                        }
                        break;

                case 41:
                        file = random_open_file();
                        if ( file && *file )
                        {
                                os_findclose( file );
                                *file = 0;
                        }
                        break;

                case 42:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findin( name );
                                myfree( name );
                        }
                        break;

                case 43:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findout( name );
                                myfree( name );
                        }
                        break;

                case 44:
                        name = random_closed_file();
                        if ( name )
                        {
                                os_findup( name );
                                myfree( name );
                        }
                        break;

                case 45:
                        name = random_object();
                        if ( name )
                        {
                                os_fscontrol9( name );
                                myfree( name );
                        }
                        break;

                case 46:
                        name = random_object();
                        if ( name )
                        {
                                attribs = random_attribs();
                                if ( attribs )
                                {
                                        os_fscontrol24( name, attribs );
                                        myfree( attribs );
                                }
                                myfree( name );
                        }
                        break;

                case 47:
                        from = random_object();
                        if ( from )
                        {
                                to = new_random_path();
                                if ( to )
                                {
                                        os_fscontrol25( from, to );
                                        myfree( to );
                                }
                                myfree( from );
                        }
                        break;

                case 48:
                        name = random_object();
                        if ( name )
                        {
                                os_fscontrol32( name );
                                myfree( name );
                        }
                        break;

                }

                if ( problems )
                        break;

                if ( gotfull )
                {
                        gotfull = No;
                        delcount = 100 + myrand()>>4;
                }

                i++;
        }

        logprintf( "current open files are:\nHandle  Name\n" );

        for ( i = 0;
                i < NumberOfOpenFiles;
                i++ )
        {
                if ( open_files[ i ].file )
                {
                        logprintf( "%-8d%s\n", open_files[ i ].file, open_files[ i ].name );

                        r.r[0] = 0;
                        r.r[1] = open_files[ i ].file;

                        _kernel_swi( XOS_Bit | OS_Find, &r, &r );
                }
        }

        logger_stop();

        return 0;
}
