#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Tester.h"
#include "logger.h"
#include "mymalloc.h"

OpenFile open_files[ NumberOfOpenFiles ];
int memory_budget = 0;

#define RANDOM_NAME_LENGTH 50
#define RANDOM_DIR_SIZE 256

static char validchars[] =
{
"zxcvbnm,as"
"dfghjkl;]q"
"wertyuiop["
"_123456789"
"0-`ZXCVBNM"
"ASDFGHJKL+"
"}QWERTYUIO"
"P{!?'()=~" };

int myrand( void )
{
        return rand() & 0xfff;
}

int exists( char *name )
{
        _kernel_swi_regs r;

        r.r[0] = 17;
        r.r[1] = (int)name;

        if ( _kernel_swi( XOS_Bit | OS_File, &r, &r ))
                return 0;
        else
                return r.r[0] != 0;
}

char *random_filename( void )
{
        int i;
        int len = 1 + (myrand() * RANDOM_NAME_LENGTH) / 0x1000;
        char *res = mymalloc( len + 1 );

        for ( i = 0;
                i < len;
                i++ )
                res[i] = validchars[ (myrand() * 79) / 0x1000 ];

        res[len] = '\0';

        return res;
}

int random_attributes( void )
{
        return rand() & 0x3b;
}

char *random_path_root( void )
{
        return path_roots[ myrand() * number_of_paths / 0xfff ];
}

/*
        Find a random specific object in a directory
        If x_type is 0 then any object matches
*/
char *random_x_in_directory( char *in_dir, int x_type )
{
        char *tt;
        char dirbuffer[ 5000 ];
        _kernel_swi_regs r;
        char *rover;
        int countdown;
        int entsleft;
        int totthings;
        int i;

        r.r[0] = 10;
        r.r[1] = (int)in_dir;
        r.r[2] = (int)dirbuffer;
        r.r[3] = 5000;
        r.r[4] = 0;
        r.r[5] = 5000;
        r.r[6] = (int)"*";

        if ( _kernel_swi( XOS_Bit | OS_GBPB, &r, &r ) )
        {
                return NULL;
        }

        entsleft = r.r[3];

        /*
                Count how many things of the given type we've got
        */
        rover = dirbuffer;
        totthings = 0;
        for ( i = 0; i < entsleft; i++ )
        {
                if ( x_type == 0 || *(int *)&rover[16] == x_type )
                        totthings++;

                /*
                        Step onto the next entry
                */
                rover += 20 + strlen( &rover[ 20 ] ) + 1;
                rover = (char *)((((int)rover + 3) / 4) * 4);
        }

        /*
                If none there return NULL
        */
        if ( totthings == 0 )
                return NULL;

        /*
                Choose which one we're gooing to return
        */
        countdown = (totthings * myrand()) / 0x1000;

        /*
                Find it
        */
        rover = dirbuffer;
        for ( i = 0; i < entsleft; i++ )
        {
                if ( (x_type == 0 || *(int *)&rover[16] == x_type) && countdown-- == 0 )
                {
                        tt = mymalloc( strlen( &rover[20] )+1 );
                        strcpy( tt, &rover[20] );
                        return tt;
                }

                /*
                        Step onto the next entry
                */
                rover += 20 + strlen( &rover[ 20 ] ) + 1;
                rover = (char *)((((int)rover + 3) / 4) * 4);
        }

        /*
                If we're here, then we've got problems!
        */
        return NULL;
}

/*
        Find a random directory from those that exist
*/
char *random_directory( void )
{
        char *rpr;
        char *ac;
        char *randleaf;
        char *tm;
        _kernel_swi_regs r;

        /*
                Start the ball rolling
        */
        rpr = random_path_root();
        ac = mymalloc( strlen( rpr ) + 1 );
        strcpy( ac, rpr );

        if ( !exists( ac ) )
        {
                /*
                        *CDIR the directory
                */
                r.r[0] = 8;
                if ( _kernel_swi( XOS_Bit | OS_File, &r, &r ) )
                {
                        free( ac );
                        return NULL;
                }
        }


        while( myrand() > nest_probability )
        {
                randleaf = random_x_in_directory( ac, 2 );

                if ( !randleaf )
                        return ac;

                /*
                        tack the new dir onto the end of ac
                */
                tm = mymalloc( strlen( ac ) + 1 + strlen( randleaf ) + 1 );
                sprintf( tm, "%s.%s", ac, randleaf );
                myfree( ac );
                myfree( randleaf );
                ac = tm;
        }

        return ac;
}

char *random_x( int x_type )
{
        char *ac = random_directory();
        char *tm;
        char *randleaf;

        if ( !ac )
                return NULL;

        randleaf = random_x_in_directory( ac, x_type );
        if ( randleaf == NULL )
        {
                myfree( ac );
                return NULL;
        }

        tm = mymalloc( strlen( ac ) + 1 + strlen( randleaf ) + 1 );
        sprintf( tm, "%s.%s", ac, randleaf );
        myfree( ac );
        myfree( randleaf );

        return tm;
}

char *random_file( void )
{
        return random_x( 1 );
}

char *random_object( void )
{
        return random_x( 0 );
}

char *new_random_path( void )
{
        char *tm = random_directory();
        char *tm2;
        char *name;

        if ( tm == NULL )
        {
                /*
                        re-create the root directory (oops!)
                */
                os_file8( random_path_root(), 0 );
                return new_random_path();
        }

        tm2 = random_filename();

        name = mymalloc( strlen( tm ) + 1 + strlen( tm2 ) + 1 );

        sprintf( name, "%s.%s", tm, tm2 );

        myfree( tm );
        myfree( tm2 );

        if ( exists( name ))
        {
                myfree( name );
                return new_random_path();
        }

        return name;
}

OpenFile *random_open( void )
{
        int open_file_number = (myrand() * NumberOfOpenFiles) / 0x1000;

        return &open_files[ open_file_number ];
}

void close_open( OpenFile *f )
{
        _kernel_swi_regs r;

        r.r[0] = 0;
        r.r[1] = f->file;

        _kernel_swi( XOS_Bit | OS_Find, &r, &r );

        f->file = 0;
        memory_budget -= strlen( f->name ) + 1;
        myfree( f->name );
}

int *random_closed( void )
{
        OpenFile *f = random_open();

        if ( f->file != 0 )
        {
                close_open( f );
        }

        return &f->file;
}

void ensure_closed( char *name )
{
        int i;
        char *leafend = strrchr( name, '.' );
        char *test_leafend;

        if ( leafend == NULL )
                leafend = name;

        for ( i = 0;
                i < NumberOfOpenFiles;
                i++ )
        {
                if ( open_files[ i ].file )
                {
                        test_leafend = strrchr( open_files[ i ].name, '.' );
                        if ( test_leafend == NULL )
                                test_leafend = open_files[ i ].name;

                        if ( strcmp( leafend, test_leafend ) == 0 )
                        {
                                close_open( &open_files[ i ] );
                        }
                }
        }
}

int *random_open_file( void )
{
        OpenFile *f = random_open();

        if ( f->file == 0 )
        {
                _kernel_swi_regs r;
                _kernel_oserror *err;

                f->name = random_file();

                if ( !f->name )
                        return NULL;

                ensure_closed( f->name );

                r.r[0] = 0xcf;
                r.r[1] = (int)f->name;

                err = _kernel_swi( XOS_Bit | OS_Find, &r, &r );

                if ( !err )
                {
                        f->file = r.r[0];
                        logprintf( "\nFile %d is \"%s\"\n", f->file, f->name );
                }
                else
                {
                        logprintf( "%s failed to open due to %s (%#x)\n", f->name, err->errmess, err->errnum );
                        myfree( f->name );
                        return NULL;
                }

                memory_budget += strlen( f->name ) + 1;
        }

        return &f->file;
}

char *random_closed_file( void )
{
        char *name;

        name = random_file();

        if ( name )
        {
                ensure_closed( name );
        }

        return name;
}

char *random_closed_object( void )
{
        char *name;

        name = random_object();

        if ( name )
        {
                ensure_closed( name );
        }

        return name;
}

char *random_attribs( void )
{
        char *result = mymalloc( 20 );
        int ctrl = myrand();

        result[0] = '\0';

        if ( result )
        {
                if ( ctrl & 1 )
                {
                        strcat( result, "l" );
                }
                if ( ctrl & 2 )
                {
                        strcat( result, "r" );
                }
                if ( ctrl & 4 )
                {
                        strcat( result, "w" );
                }
                if ( ctrl & 8 )
                {
                        strcat( result, "/" );
                        if ( ctrl & 16 )
                        {
                                strcat( result, "r" );
                        }
                        if ( ctrl & 32 )
                        {
                                strcat( result, "w" );
                        }
                }
        }

        return result;
}
