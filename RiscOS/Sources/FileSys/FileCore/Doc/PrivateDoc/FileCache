>FileCache

===============
DATA STRUCTURES
===============

1) Buffers
A set of N 1K buffers, each of which may be considered as 4*256 byte or 2*512
byte sub buffers where appropriate.
Each 1K buffer is in one of five states, these are in increasing priority
 0. empty
 1. used read ahead buffer and monotically increasing read access
 2. buffer that is not in use by background and not awaiting sequential read
 3. buffer that is not in use by background and is awaiting sequential read
 4. buffer in use for read ahead
 5. buffer in use for write behind
If a buffer is being considered as several sub buffers the priority of the
buffer is the highest priority sub buffer.

2) Allocation chains
Each of the five buffer types has its own allocation chain, these are organised
as doubly linked lists with a least recently used ordering

3) Buffer info
Associated with each buffer the following information

                ^ 0

BufFlags        # 4     ;these 4 are in common with extended FCB
BufFileOff      # 4
NextInFile      # 4
PrevInFile      # 4

BufFcb          # 4
YoungerBuf      # 4
OlderBuf        # 4
                # 4
BufferData      # 1*K   ;data itself

BufScale        * 5
                ASSERT @ :SHL: BufScale = 1*K



Flags 
  bit 8i+j 0 <= i <= 3, 2 <= j <= 7
  refer to the ith 256 byte sub buffer and priority j-2
   bits     priority
   00000100        0
   00001000        1
   00010000        2
   00100000        3
   01000000        4
   10000000        5


Sub buffer

 0  1  2  3

 0  8 16 24 clear
 1  9 17 25 clear
 2 10 18 26 clear
 3 11 19 27 set <=> used monotonic read ahead buffer
 4 12 20 28 set <=> valid buffer not of special type
 5 13 21 29 set <=> awaiting sequential read
 6 14 22 30 set <=> read ahead buffer
 7 15 23 31 set <=> write behind buffer

                ^ 0
EmptyChain      # 1
MonotonicChain  # 1
NormalChain     # 1
AwaitsSeqChain  # 1
ReadAheadChain  # 1
WriteBehindChain # 1

EmptyBuf        bit EmptyChain+2
UsedMonotonic   bit MonotonicChain+2
NormalBuf       bit NormalChain+2
AwaitsSeqRead   bit AwaitsSeqChain+2
ReadAhead       bit ReadAheadChain+2
WriteBehind     bit WriteBehindChain+2

AllocFlags      * EmptyBuf :OR: UsedMonotonic :OR: NormalBuf :OR:AwaitsSeqRead :OR: ReadAhead :OR: WriteBehind
                ASSERT AllocFlags=2_11111100

4) File control blocks
In addition to the old info

FcbNext         aw 4    ;link to next FCB
FcbExtHandle    # 1     ;external handle, internal handle=address of FCB
FcbFlags        # 1     ;must only be modified with FileCache claimed
FcbName         # 10
FcbLength       aw 4    ;ASSUME LOWEST BYTE ZERO TO USE AS NAME TERMINATOR 
FcbIndDiscAdd   aw 4
FcbDir          aw 4    ;dir containing file
FcbExtent       aw 4

; Flags
; b0 set if file has read access
; b1 set if file has write access
; b3 set if dir
; b4 set if EXT needs ensuring

The additional information below is needed

new flags
FcbFloppyBitNo  * 2
FcbFloppyFlag   bit FcbFloppyBitNo
Monotonic       bit 5   ;set <=> all read access above HWM
SequentialBitNo * 6
Sequential      bit SequentialBitNo     ;set <=> reading sequentially 
DataLost        bit 7


ReadAheadBufs   # 1
                # 3
LastReadEnd     # 4
AccessHWM       # 4


5) Background process control block

Both floppies and winnies have values of following

                ^ 0
ProcessEndPtr   # 4
Process         # 1
Inactive        bit 0
                ASSERT ReadAhead   = bit 6
                ASSERT WriteBehind = bit 7
ProcessDirect   # 1    ;0/&FF if process includes a direct transfer
                # 2
OldLength       # 4
ProcessFragEnd  # 4
ProcessStartPtr # 4     ;DO NOT REORDER THESE
ProcessRamAdjust # 4
ProcessStartOff # 4
ProcessEndOff   # 4
ProcessFcb      # 4
ProcessError    # 4
ProcessStatus   # 4
ProcessPairs    # 0

These blocks provide the interface with any low level driver process in the
background

            R -4
LOWBLK  0 A L  4
        8 A L  C      
       10 A L 14
       18 A L 1C
       20 A L 24
       28 A L 2C
       30 A L 34
       38 A L 3C
       40 A L 44
       48 A L 4C
       50 A L 54
       58 A L 5C
       60 A L 64
       68 A L 6C
       70 A L 74
       78 A L 7C
       80 E

A L are the address length pairs which low level drivers modify
R   is the result word. This should be initialised with bit 31 set when the
    process ends this bit is cleared and a non zero value of R => error
E   is a rogue value of -1 informing the drivers to loop back to the start of
    the table

6) Misc workspace

STANDARD INITIALISATION

FileCacheValid          # 1     ;valid <=> 0
                = 1
Interlocks              # 1
                = 0
WinnieLock              bit 0   ;DONT CHANGE THESE TWO MAKES LSR #30 TRICK WORK
FloppyLock              bit 1

FileCacheLock           bit 2
DirCacheLock            bit 3
TimerLock               bit 4
FiqOwnership            # 1
                = 0
BackgroundFiqLock       # 1     ;set to &FF to stop attempts to claim FIQ
                = 0

LockedDrive             # 1     ;Must be in same word for atomic write
                = &FF
LockedDisc              # 1
                = &FF
ModifyDisc              # 1
                = &FF
                        # 1     ;Not free for other use
                = &FF


FloppyWriteBehindDrive  # 1     ;Must be in same word for atomic write
                = &FF
FloppyWriteBehindDisc   # 1
                = &FF
                        # 2     ;Not free for other use
                = 0,0

FloppyWriteBehindLeft   aw 4
                & 0

NON STANDARD

MaxFileBuffers          # 1
UnclaimedFileBuffers    # 1
                        # 1
                        # 1

FloppyProcessBlk        aw 4
WinnieProcessBlk        aw 4

FileBufsStart           aw 4
FileBufsEnd             aw 4

TickerState             # 4     ;bottom 16 bits period, top 16 bits counter


                ASSERT  YoungerBuf = OlderBuf + 4
ChainRootSz     *       2*4              ;older and younger link
BufChainsRoot           * @-OlderBuf
                        aw 6*ChainRootSz ;roots of buffer allocation lists


