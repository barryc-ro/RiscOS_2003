;>ScsiFs05

 [ Dev
PHEX
 [ :LNOT: IrqDebug
 MOV    R3, #IRQsema
 LDR    R3, [R3]
 TEQS   R3, #0
 MOVNES PC, LR          ;return if IRQ thread
 ]
 MOV    R3, LR
 ASSERT SVC_mode=3
 ORR    R0, LR, #SVC_mode
 TEQP   PC, R0          ;go to SVC mode preserving flags
 nop
 Push   "LR"
 [ SpoolOff
 BL     SpoolOff
 ]
 MOV    R1, #32-4
PHLOOP
 MOV    R0, R2, LSR R1
 AND    R0, R0, #&F
 CMPS   R0, #10
 ADDCC  R0, R0, #"0"
 ADDCS  R0, R0, #"A"-10
 SWI    OS_WriteC
 SUBS   R1, R1, #4
 BPL    PHLOOP
 MOV    R0, #" "
 SWI    OS_WriteC
 [ SpoolOff
 BL     SpoolOn
 ]
 Pull   "LR"
 MOVS   PC, R3


 [ SpoolOff
SpoolOff
 Push   "R0-R2,LR"
 MOV    R0, #3
 MOV    R1, #&10
 MOV    R2, #&EF
 SWI    OS_Byte
 Pull   "R0-R2,PC",,^

SpoolOn
 Push   "R0-R2,LR"
 MOV    R0, #3
 MOV    R1, #0
 MOV    R2, #&EF
 SWI    OS_Byte
 Pull   "R0-R2,PC",,^
 ]

Mess1                   ;R0,R1,LR stacked
 MOV    R0, PC          ;save PSR
 MOV    R1, LR          ;save link
 [ :LNOT: IrqDebug
 MOV    LR, #IRQsema
 LDR    LR, [LR]
 TEQS   LR, #0
 MOVNE  PC, R1          ;skip if IRQ thread, return NE
 ]
 BIC    LR, R0, #3
 ORR    LR, LR, #SVC_mode :OR: Z_bit
 TEQP   PC, LR          ;go to supervisor mode, preserve FI, set EQ
 nop                    ;delay for mode change
 Push    "LR"
 [ SpoolOff
 BL      SpoolOff
 ]
 MOV    PC, R1

TubeWrHexWord ROUT
 MOV    R3, LR
 MOV    R1, #32-4
05
 MOV    R0, R2, LSR R1
 AND    R0, R0, #&F
 CMPS   R0, #10
 ADDCC  R0, R0, #"0"
 ADDCS  R0, R0, #"A"-10
 BL     TubeChar        ;(R0)
 SUBS   R1, R1, #4
 BPL    %BT05
 MOV    R0, #" "
 BL     TubeChar        ;(R0)
 MOVS   PC, R3

           ^ 0, R1
R1_status  # 4
R1_data    # 4
TubeAddress * &3340000 + (0*&4000)      ;podule 0

TubeChar ROUT
 Push   "R1,LR"
 LDR    R1, =TubeAddress
10
 LDRB   LR, R1_status
 TSTS   LR, #&40
 BEQ    %BT10
 STRB   R0, R1_data
 Pull   "R1,PC",,^
 ]

; ====
; SetV
; ====

SetV
 ORRS   PC, LR, #V_bit


; ========
; SetVOnR0
; ========

SetVOnR0
 CMPS   R0, #0
 BICEQS PC, LR, #V_bit
 ORRNES PC, LR, #V_bit


; ======
; Divide
; ======

; entry: R0=Numerator, R1=Denominator
; exit:  R0=Result, R1=Remainder

Divide  ROUT
 Push   "R2,LR"

 MOV    LR, R1          ;temp = den
 CMPS   LR, R0, LSR #1  ;shift temp left unless it would be > num
10
 MOVLS  LR, LR, LSL #1
 CMPLS  LR, R0, LSR #1
 BLS    %BT10
 MOV    R2, #0          ;init result
20
 CMPS   R0, LR          ;if subtraction possible
 SUBCS  R0, R0, LR      ; do it
 ADC    R2, R2, R2      ;shift bit into result
 MOV    LR, LR, LSR #1  ;move temp right
 CMPS   LR, R1          ;loop if not done
 BHS    %BT20

 MOV    R1, R0          ;mod
 MOV    R0, R2          ;div

 Pull   "R2,PC",,^


; =============
; ReadCMOSflags
; =============

;read the CMOS byte containing number of drives, default drive & dir/no dir bit

; exit R0,V result
;  R2 = full byte
;  R4 = number of drives
;  R5 = default drive
 [ FloppySupport
;  R3 = number of removable media drives (floppies)
;  R4 = number of fixed media drives (winnies)
 ]
ReadCMOSflags ROUT
 Push   "R1,LR"
 MOV    R0, #OsbyteReadCMOS
 MOV    R1, #CMOSflags
 SWI    XOS_Byte                ;(R0-R2->R0-R2,V)
 MOVVS  R2, #2_01000001         ;default NoDir, one drive
 BVS    %FT95
 [ FloppySupport
 MOV    R3, R2, LSR #6
 ]
 AND    R4, R2, #2_00000111
 CMPS   R4, #4
 MOVHI  R4, #1
 AND    R5, R2, #2_00111000
 MOV    R5, R5, LSR #3
 [ FloppySupport
 |
 CMPS   R5, R4
 MOVHS  R5, #0
 ADD    R5, R5, #4
 ]
95
 Pull   "R1,PC"

; ===============
; ReadMapSizeCMOS
; ===============

; exit R0,V if error, R6 map size bytes

ReadMapSizeCMOS ROUT
 Push   "R1-R3,LR"
 MOV    R0, #OsbyteReadCMOS
 MOV    R3, #3*8
 MOV    R6, #0
10
 MOV    R1, #MapSizeCMOS
 ADD    R1, R1, R3, LSR #3
 SWI    XOS_Byte        ;(R0-R2->R0-R2,V)
 BVS    %FT95
 ORR    R6, R6, R2, LSL R3
 SUBS   R3, R3, #8
 BPL    %BT10
 [ Debug2
 wrhex  R6
 mess   ,"MAP SIZES",NL
 ]
95
 Pull   "R1-R3,PC",,^


; ============
; ReadFileCMOS
; ============

; exit R0,V result
;  R5 = extra file buffers in K

ReadFileCMOS ROUT
 Push   "R1,R2,R4,LR"
 MOV    R0, #OsbyteReadCMOS
 MOV    R1, #FileCMOS
 SWI    XOS_Byte        ;(R0-R2->R0-R2,V)
 MOVVC  R5, R2
 TEQS   R5, #1
 BLEQ   DefaultCacheSize   ;->R4
 MOVEQ  R5, R4, LSR #10
 MOVVS  R5, #0
 Pull   "R1,R2,R4,PC"


; ===========
; ReadDirCMOS
; ===========

; exit R0,V result
;  R4 = dir cache size in bytes

ReadDirCMOS
 Push   "R1,R2,LR"
 MOV    R0, #OsbyteReadCMOS
 MOV    R1, #DirCMOS
 SWI    XOS_Byte        ;(R0-R2->R0-R2,V)
 MOVVS  R2, #0
 MOVS   R4, R2, LSL #10
 BLEQ   DefaultCacheSize   ;->R4
 Pull   "R1,R2,PC"


; ================
; DefaultCacheSize
; ================

; exit R4 default size

DefaultCacheSize ROUT
 Push   "R0-R3,R5-R7,LR"
 MOV    R0, #0
 MOV    R1, #0
 MOV    R2, #0
 MOV    R3, #0
 Push   "R0-R3"
 Pull   "R4-R7"         ;R0-R7 now zero
 SWI    XOS_SetEnv      ;returns RAM size in R2
 MOV    R4, R2, LSR #8
 CMPS   R4, #255*1024
 MOVHI  R4, #255*1024
 Pull   "R0-R3,R5-R7,PC",,^


; ==========
; SkipSpaces
; ==========

; entry R1 -> char
; exit
;  R0 char
;  R1 -> char after first non space char
;  C set <=> terminator

SkipSpaces ROUT
 Push   "LR"
10
 LDRB   R0, [R1], #1
 TEQS   R0, #" "
 BEQ    %BT10
 CMPS   R0, #DeleteChar
 RSBNES LR, R0, #" "-1
 Pull   "PC"


; =============
; ParseAnyDrive
; =============

;doesn't check if drive is allowed by configure

ParseAnyDrive ROUT
 Push   "LR"

; Entry: R1-> string
; Exit:  R1-> first char after
 [ FloppySupport
;  good => R0 drive number, V=0
 |
;  good => R0 drive number-4, V=0
 ]
;  bad  => R0 -> error, V=1

 BL     SkipSpaces      ;(R1->R0,R1,C)
 BCS    %FT10           ;reject nul string
 LDRB   LR, [R1]
 CMPS   LR, #DeleteChar
 RSBNES LR, LR, #" "    ;check terminated
 BCC    %FT10           ;not terminated

 CMPS   R0, #"a"
 SUBHS  R0, R0, #"a"-"A"
 CMPS   R0, #"A"
 SUBHS  R0, R0, #"A"-"0"
 [ FloppySupport
 SUBS   R0, R0, #"0"
 RSBCSS LR, R0, #7
 |
 SUBS   R0, R0, #"4"
 RSBCSS LR, R0, #3
 ]
 Pull   "PC",CS
10
 baddr  R0, BadDriveErrBlk
 BL     SetV
 Pull   "PC"


; =====
; WrDec
; =====

; write a space followed by a zero supressed decimal number

; entry R0 number

; exit if error V set, R0 result

WrDec   ROUT
 Push   "R0,R1,LR"
 MOV    R1, #10
 BL     Divide          ;(R0,R1->R0,R1)
 TEQS   R0, #0
 BEQ    %FT10
 BL     WrDec           ;(R0->R0,V)
 B      %FT20
10
 MOV    R0, #" "
 SWI    XOS_WriteC      ;(R0->R0,V)
20
 ADDVC  R0,R1,#"0"
 SWIVC  XOS_WriteC      ;(R0->R0,V)
95
 STRVS  R0,[SP]
 Pull   "R0,R1,PC"


 LNK    s.ScsiFs15 
