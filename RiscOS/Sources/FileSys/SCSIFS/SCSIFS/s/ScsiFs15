;>ScsiFs15

 LTORG

; =============
; LowLevelEntry
; =============

;entry
; R1  reason
; R2  disc address top 3 bits drive
; R3  RAM ptr
; R4  length
; R5  -> disc record
; R6  -> defect list or NIL during Mount
; R12 -> private word

LowLevelEntry ROUT      ;entry point for FileCore
 getSB
LowLevelOp              ;internal entry point
 Push   "R0-R8,R9,LR"
 [ Debug3
 wrhex  R1
 wrhex  R2
 wrhex  R3
 wrhex  R4
 wrhex  R5
 wrhex  R6
 mess   ,"*>LowLevel",NL
 ]

 [ Debug3
 mess   , "LowLevelEntry/LowLevelOp - "
 ]

 CMPS   R4, #0                  ;IF 0 length
 BICEQ  R7, R1, #NoTimeOut :OR: NoEscape :OR: ScatterBit :OR: AltDefectBit
 CMPEQS R7, #Param3Op           ;AND verify, read/write secs, not background
 Pull    "R0-R8,R9,PC",LO,^     ;THEN nothing to do

 [ FloppySupport
 TST    R2, #bit31
 BEQ    %FT10
 ]
 TEQS   R6, #NIL
 BEQ    %FT10                   ;if mount

 LDRB   R7, [R5,#Zones]         ;Here we check that the winnie map size held in
 LDRB   R8, [R5,#SectorSize]    ;CMOS is up to date
 MOV    R8, R7, LSL R8
 MOVS   R8, R8, LSR #8
 MOVEQ  R8, #2
 sbaddr R7, MapSizes-4          ;N.B. R2 LSR #(32-3) gives winnie drive number 4..7
 LDRB   LR, [R7,R2, LSR #(32-3)]
 TEQS   LR, R8
 BLNE   UpdateMapSize           ;(R2,R7,R8) if not we update it

10
 sbaddr R7, BlockSizes-4        ;if not examined drive yet 

 LDRB   R8, [R7,R2, LSR #(32-3)]
 CMPS   R8, #0                  ;V=0
 BLEQ   Examine                 ;(R2,R7->R0,R8,V) then do it now
 BVS    LowError

 ANDS   R5, R1, #OpMask
 CMPS   R5, #RestoreOp+1        ;moan if bad reason code
 LDRCCB R0, Winnies
;>>> RSBCCS R0, R0, R2, LSR #29     ;     or if bad drive
 [ FloppySupport
;>>>what about highest floppy number?
 ]
 BCS    BadParameters

 AND    R0, R1, #ScatterBit :OR: NoEscape :OR: NoTimeOut :OR: BackgroundOp
 MOV    R0, R0, LSL #CTL_cnvt
 EOR    R0, R0, R2, LSR #29
 mapDrvToDevLo R0, R0           ;map drive onto device
 CMPS   R5, #Param1Op
 BHS    %FT20
                                ;convert byte disc address to block address
 BIC    LR, R2, #DiscBits
 MOV    R7, LR, LSR R8          ;block number
 TEQS   LR, R7, LSL R8
 BNE    BadParameters

20
 ADD    PC, PC, R5, LSL #2      ;dispatch on reason
 NOP

 B      VerifyCase
 B      ReadSecsCase
 B      WriteSecsCase
 B      ReadTrackCase           ;may be read ids ?
 B      WriteTrackCase          ;whatever needed for formatting
 B      SeekCase
 B      RestoreCase

VerifyCase
 [ Debug3
 mess   , "Verify", NL
 ]
 MOV    R1, #&2F                ;VERIFY command
 B      OpCommon

ReadSecsCase
 [ Debug3
 mess   , "ReadSectors", NL
 ]
 ORR    R0, R0, #CTL_TXREAD
 MOV    R1, #&28                ;READ extended command
 B      OpCommon

WriteSecsCase
 [ Debug3
 mess   , "WriteSectors", NL
 ]
 ORR    R0, R0, #CTL_TXWRITE
 MOV    R1, #&2A                ;WRITE extended command
 B      OpCommon

ReadTrackCase
 [ Debug3
 mess   , "ReadTrack !!NOT SUPPORTED - NOP !!", NL
 ]
 B      DoNOP

WriteTrackCase
 [ Debug3
 mess   , "WriteTrack !!NOT SUPPORTED - NOP!!", NL
 ]
 B      DoNOP

SeekCase
 [ MediaLocking
 MOV    R1, R0
 BL     UnLockMedia
 ]
 [ SeekIsNOP
 [ Debug3
 mess   , "Seek !!NOT SUPPORTED - NOP !!", NL
 ]
 B      DoNOP
 |
 [ Debug3
 mess   , "Seek", NL
 ]
 MOV    R1, #&2B                ;SEEK command
 MOV    R4, #0                  ;Ensure cdb[7]..cdb[8] are zero
 B      OpCommon
 ]

RestoreCase
 [ Debug3
 mess   , "Restore !!NOT SUPPORTED - NOP !!", NL
 ]
 B      DoNOP

;
; Build a SCSI CDB and the registers needed for the SWI SCSI_Op
; on the stack
;
; On entry
;   R0  composite of deviceID & flags (remapping already applied)
;   R1  bytes 0..1 of required CDB
;   R2  disc address top 3 bits drive
;   R3  RAM ptr
;   R4  length
;   R7  disc address expressed as block number
;   R8  Log2BlockSize
;                       
; The UseSpecialScatterBlk switch when ON means that the Driver is not relied upon
; to source data for sector writes.  This is done by expanding a single RAMBlk
; write into a ScatterBlock write, where the first entry in the scatter list is
; the original write, and the second is a section of RAM (starting at address 0)
; large enough to make the total transfer precisely equal to the size of the
; transfer indicated in the CDB.  The total size of the transfer (R4) is also
; adjusted appropriately.
;

 [ UseSpecialScatterBlk
ScatterFlag % 4                         ;Are we converting a save to use scatterblk ?
ScatterData % 4                         ;New Length (=Old Length rounded up to next block)
WriteScatBlk  DCD  0,0,0,0,0,0          ;Here is the scatter special block
 ]

OpCommon
 MOV    R5, #0                          ;Default timeout
 [ UseSpecialScatterBlk
 STR    R5, ScatterFlag                 ;Default: dont use scatter method
 ]
 SUB StkPtr,StkPtr,#12                  ;Largest CBD is 12 bytes

 MOV R2,StkPtr                          ;->CDB built on stack
 Push "R2,R3,R4,R9"

 RevBytes R7, R5,R6                     ;Change sex of disc block address

;
; The given Xfer length is in bytes, the CDB needs length in blocks, if the
; byte length is not a whole number of blocks, round up the CDB block count
; and rely on SCSIdriver sinking/sourcing the excess.
; NOTE: this note only applies if the UseSpecialScatterBlk switch is OFF
;              
 MOV R5, R4, LSR R8                     ;Xfer length in blocks (was in bytes)
 TEQ R4, R5, LSL R8
 ADDNE  R5, R5, #1                      ;Inc if Xfer length not a whole number
 [ UseSpecialScatterBlk
 BEQ DontNeedScatBlk                    ;If the length was a whole number fine ...

 AND R9, R0, #CTL_TXWRITE :OR: CTL_TXREAD
 CMP R9, #CTL_TXWRITE
 BNE DontNeedScatBlk                    ;If we arent writing fine ...
 TST R0, #CTL_SCATTER
 [ Debug3                               ;Oh dear already using a scatter pointer ...
 BEQ NotAppropriate1
 SWI OS_WriteS                          ;So we cant make things easy for the Driver
 = "Having to save a nasty block slowly, as scatter list already used"
 SWI OS_NewLine
NotAppropriate1
 ]
 BNE DontNeedScatBlk

 [ Debug3
 SWI OS_WriteS
 = "Tranferring to a scatter block ..."
 SWI OS_NewLine
 ]

 Push "R5"                                            
 MOV R9, #1                             ;Note that the scatterblock is required
 STR R9, ScatterFlag
 ORR R0, R0, #CTL_SCATTER               ;Save the transfer to a Scatter pointer
 ADR R9, WriteScatBlk                   
 STR R3, [R9, #0]                       
 STR R4, [R9, #4]
 MOV R5, #0
 STR R5, [R9, #8]                       ;Second Block starts at address 0 and can
                                        ; be up to 2^Log2BlockSize -1 long, so
                                        ; this better be RAM !!!
 Pull "R5"
 Push "R5"                              ;Take the rounded up no. of blocks
 MOV R5, R5, LSL R8                     ;Convert this into bytes
 STR R5, ScatterData                    ;Save this new Total Length
 SUB R5, R5, R4                         ;And take off the original length
 STR R5, [R9, #12]                      ;This is the length of the dummy block
 Pull "R5"

DontNeedScatBlk
 ]

 [ CheckXferLen
;
; Block count fields in CDB's are 16 bit, ie max 65535.
;
; If the byte count given by filecore, converted to a block count exceeds this,
; put 65535 in the CDB. Filecore will see that not all of the data has been
; transfered and call us again for the residue.
; This condition will probably never arise, since it represents 16/32/64 Mbyte
; (for 256/512/1024 byte blocks).
;
 CMP R5,#&10000
 MOVHS R5,#&FF00
 ORRHS R5,R5,#&00FF
 ]

 MOV R3,R5,LSR #8
 MOV R3,R3,LSL #24                      ;MSB in CDB[7] {R3 bits 24..31}
 AND R5,R5,#&FF                         ;LSB in CDB[8] {R4 bits  0..7 }

 ORR R1,R1,R7,LSL #16                   ;Add sex changed block address
 ORR R3,R3,R7,LSR #16                   ; to CDB

 STMIA R2,{R1,R3,R5}                    ;Copy 12bytes of CDB onto stack

;R0,R1
;R2,R3,R4,R9 stacked
;R5 must be remade 0

 MOV R1,#10
 Pull "R2,R3,R4,R9"

 [ UseSpecialScatterBlk
 LDR R5, ScatterFlag                    ;Are we using the special ScatterBlock ?
 CMP R5, #0
 ADRNE R3, WriteScatBlk                 ;Yes ! Better make RAMptr point to it,
 LDRNE R4, ScatterData                  ;and use the rounded up total length
 ]

 MOV R5, #0

 TSTS   R0, #CTL_BACKGROUND
 LDRNE  R6, WinnieCallAfter             ;Callback address
 LDRNE  R7, FileCorePrivate             ; & wsptr (if needed)

 MOV    R8, R12                         ;AccessKey

 [ RetryIfBusy
 MOV    R9,#60                          ;Retry on timeout for 60 seconds
30
 Push   "R0-R4"                         ;Stack incase we need to retry
 SWI    XSCSI_Op
 [ IgnoreRecoveredError
 BLVS   CheckRecovered                  ;If error is 'Recovered error' clear
                                        ; V and pretend it never happened
 ]
 ADDVC  StkPtr,StkPtr,#20               ;OK, so ditch stacked R0-R4
 BVC    %FT35                           ; and continue
 BL     CheckRetry
 Pull   "R0-R4",VC                      ;Retry with stacked R0-R4
 BVC    %BT30
 ADDVS  StkPtr,StkPtr,#20               ;Ditch stacked R0-R4
 ORRVS  R0, R0, #ExternalErrorBit       ; before reporting error
35
 |
 SWI    XSCSI_Op
 [ IgnoreRecoveredError
 BLVS   CheckRecovered                  ;If error is 'Recovered error' clear
                                        ; V and pretend it never happened
 ]
 ORRVS  R0, R0, #ExternalErrorBit
 ]
 ADD StkPtr,StkPtr,#12                  ;Discard the stacked CBD
                      
 MOVVC  R0, #0
 [ ProperScatter
 LDMIB  SP, {R1-R2,R6-R7}
 SUB    R7, R7, R4                      ;Amount Xfered
 ADD    R2, R2, R7                      ;Inc. disc address by amount transfered
 STMIA  SP, {R0,R1-R2,R3-R4}
 |
 LDMIB  SP, {R1-R3,R7}
 SUB    R7, R7, R4                      ;Amount Xfered
 ADD    R2, R2, R7                      ;Inc. disc address by amount transfered
 ADD    R3, R3, R7  ;>>>done by driver??;Inc. RAM address by amount transfered
 STMIA  SP, {R0,R1-R3,R4}
 ]
 
LowError
 STRVS  R0, [SP]
 [ Debug3
 wrhex  R0,VS
 mess   VC,"         "
 wrhex  R1
 wrhex  R2
 wrhex  R3
 wrhex  R4
 mess   ,"*<LowLevel",NL,NL
 ]
DoNOP
 Pull   "R0-R8,R9,PC"

BadParameters
 MOV    R0, #BadParmsErr
 BL     SetV
 B      LowError

UpdateMapSize
 Push   "R0-R2,LR"
 STRB   R8, [R7,R2, LSR #(32-3)]
 MOV    R0, #OsbyteWriteCMOS
 MOV    R1, R2, LSR #(32-3)
 [ Debug2
 wrhex  R1
 wrhex  R8
 mess   ,"oldsize drive newsize",NL
 ]
 ADD    R1, R1, #MapSizeCMOS-4
 MOV    R2, R8
 SWI    XOS_Byte    ;(R0-R2->R0-R2,V)
 Pull   "R0-R2,PC",,^

 [ IgnoreRecoveredError
;
; CheckRecovered
; ==============
; On entry
;   R0 -> error & VS
;
; Clear V_bit if the error is RecoveredError
;
CheckRecovered
 Push   "R0,R1"
 LDR    R0,[R0]                         ;Error number
 LDR    R1,=ErrorNumber_SCSI_RecoveredError
 CMP    R0,R1                           ;If RecoveredError
 Pull   "R0,R1"
 BICEQS PC,LR,#V_bit                    ; pretend it never happened
 ORRS   PC,LR,#V_bit                    ; else keep the error
 ]

;
; CheckRetry
; ==========
;
; On entry
;   R0 -> error
;
; On exit
;   VC means retry
;   VS means report error
; 
CheckRetry
 ORR    LR,LR,#V_bit
 Push   "R0,R1,LR"
 LDR    R0,[R0]                         ;Error number
 LDR    R1,=ErrorNumber_SCSI_Busy
 CMP    R0,R1                           ;If NOT("Target status - busy" or
 LDRNE  R1,=ErrorNumber_SCSI_CC_NotReady
 CMPNE  R0,R1                           ;       "Target error - Not ready"
 LDRNE  R1,=ErrorNumber_SCSI_Timeout
 CMPNE  R0,R1                           ;       "Timeout"
 LDRNE  R1,=ErrorNumber_SCSI_Died
 CMPNE  R0,R1                           ;       "Unexpected disconnection"
                                        ;      )
 Pull   "R0,R1,PC",NE,^                 ; return indicating report error

 CMP    R9,#0                           ;Retry counter hit zero
 Pull   "R0,R1,PC",EQ,^                 ; return indicating report error
;
; Counter is non-zero
;
 SUB    R9,R9,#1
 BL     WaitOneSecond
 Pull   "R0,R1,LR",AL                   ;Return indicating do-a-retry
 BIC    PC,LR,#V_bit


;
; WaitOneSecond (give or take a bit)
; =============
;
WaitOneSecond
 Push "R0,R1,LR"
 SWI XOS_ReadMonotonicTime
 ADD R1,R0,#100
Wait_10
 SWI XOS_ReadMonotonicTime
 CMP R0,R1
 BLO Wait_10
 Pull "R0,R1,PC",AL,^


 [ FloppySupport
; =============
; DoPollChanged
; =============

;entry
; R1 drive 0-3
; R2 sequence number

;exit
; R2 new sequence number
; R3 status bits
;   b0 not changed
;   b1 maybe changed
;   b2 changed
;   b3 empty
;   b6 empty works
;   b7 changed works

DoPollChanged ROUT
 Push   "R0,R1,R4-R9,LR"
 [ Debug4
 mess   ,"*Enter PollChanged",NL
 ]
; MOV    R3, #Drv_NotChanged
; Pull   "R0,R1,R4-R9,PC",,^

; address drive record

 DrvRecPtr R4,R1
 LDRB   R5, [R4,#DrvFlags]
 LDR    R6, [R4,#DrvSequenceNum]

 BIC    R0, R5, #LostUnitAtn
 STRB   R0, [R4,#DrvFlags]

 BL TestUnitReady
 ORRNE  R0, R5, #LostUnitAtn
 STRNEB R0, [R4,#DrvFlags]
 TSTEQS R5, #LostUnitAtn
 BNE    %FT10


;here if not changed
 MOV    R3, #Drv_Changed
 TEQS   R2, R6
 MOVEQ  R3, #Drv_NotChanged
 MOV    R2, R6                   ;Returned as the new drive sequence number
 B      %FT20

;
10
 ADD   R2, R6, #1
 STR   R2, [R4,#DrvSequenceNum]
 BL TestUnitReady
 ORRNE  R0, R5, #LostUnitAtn
 STRNEB R0, [R4,#DrvFlags]

;18
 MOVEQ  R3, #Drv_Changed
 MOVNE  R3, #Drv_Empty
20

 [ Debug4
 ASSERT Drv_Empty   > Drv_Changed
 ASSERT Drv_Changed > Drv_NotChanged
 CMP    R3, #Drv_Changed
 mess   LT,"Not Chamged",NL
 mess   EQ,"*Changed"   ,NL
 mess   GT,"*Empty"     ,NL
 ]
 ORR    R3, R3, #Drv_ChangedWorks :OR: Drv_EmptyWorks
 Pull   "R0,R1,R4-R9,PC",,^
 
;
; This issues ControlErrors, if device not reserved or reserved by us, this
; should succeed. If reserved by another user it will fail.
; It is left in the state that floppies require.
;
TestUnitReady
95
 Push   "R0-R5,R8,LR"
 [ Debug4
 mess   , "TestUnitReady"
 ]
 mapDrvToDevLo R1, R1
 MOV    R0, #4                  ;RC for ControlErrors
 MOV    R2, #1                  ;Auto Request-Sense, Return Unit-Attention
 MOV    R8, R12
 SWI    XSCSI_Control

 MOVVC  R0, R1
 ADRVC  R2, CDB_TestUnitReady

 MOVVC  R1, #6          ;CDB len
 MOVVC  R3, #0          ;
 MOVVC  R4, #0
 MOVVC  R5, #0
 MOVVC  R8, R12         ;AccessKey
 SWIVC  XSCSI_Op
 [ Debug4
 mess   VC,"*Ready",NL
 mess   VS,"*Not Ready",NL
 ]
 Pull   "R0-R5,R8,LR"
 ORRVCS PC, LR, #Z_bit
 BICS   PC, LR, #Z_bit

CDB_TestUnitReady
 DCB    &00             ;TEST UNIT READY
 DCB    0               ;LUN & reserved
 DCB    0               ;Reserved
 DCB    0               ;Reserved
 DCB    0               ;Reserved
 DCB    0               ;Vendor Unique=0 (b7..b6),Reserved=0 (b5..b2),
 ALIGN 


 ]

 LNK    s.ScsiFs20
