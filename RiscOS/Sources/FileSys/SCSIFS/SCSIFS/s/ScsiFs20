;>ScsiFs20

 MACRO
 Misc   $str
 ASSERT Misc_$str=(.-MiscTable) :SHR: 2
 B      Do$str
 MEND


; =========
; MiscEntry
; =========

MiscEntry ROUT
 [ Debug4
 wrhex  R0
 wrhex  R1
 wrhex  R2
 wrhex  R3
 wrhex  R4
 wrhex  R5
 mess   ,"*>Misc",NL
 ]
 Push   "LR"
 getSB
 [ FloppySupport
 CMPS   R0, #Misc_Unused
 BLO    %FT10
 MOV    R0, #BadParmsErr
 BL     SetV
 B      %FT90
10
 MOV    LR, PC
 ADD    PC, PC, R0, LSL #2
 B      %FT90
MiscTable
 Misc   Mount
 Misc   PollChanged
 Misc   LockDrive
 Misc   UnlockDrive
 Misc   PollPeriod
 |
 TEQS   R0, #Misc_Mount
 MOVNE  R0, #BadParmsErr
 BLNE   SetV
 BNE    %FT90

 BL     DoMount
 ]
90
 [ Debug4
 wrhex  R0
 wrhex  R1
 wrhex  R2
 wrhex  R3
 wrhex  R4
 wrhex  R5
 mess   ,"*<Misc"
 mess   ,NL
 ]
 Pull   "LR"
 BICVCS PC, LR, #V_bit
 ORRVSS PC, LR, #V_bit

; =======
; DoMount
; =======

;entry
; R1 drive
; R2 disc address
; R3 -> buffer
; R4 length
; ( R5 -> disc rec to fill in for floppies )

;exit R0,V internal error

DoMount ROUT
 Push   "R1-R4,R6,LR"
 [ FloppySupport
 TSTS   R2, #bit31
 BEQ    %FT20                   ;Floppy
 ]
;read in the boot block as requested, will probably trigger Examine

 MOV    R6, #NIL                ;no defect list - empty for SCSI discs anyway
 MOV    R1, #ReadSecsOp :OR: NoEscape
 BL     LowLevelOp              ;(R1-R6->R0-R4,V)
 Pull   "R1-R4,R6,PC"


 [ FloppySupport
20
;Read from DefectListDiscAdd &C00, size SzDefectList &200
;
;
 [ Debug4
 mess   ,"Mount-floppy, reading bootblock"
 mess   ,NL
 ]
 AND    R2, R2, #DiscBits
 ORR    R2, R2, #DefectListDiscAdd
;>>>Assume buffer in R3 is big enough
 MOV    R4, #SzDefectList
 MOV    R1, #ReadSecsOp :OR: NoEscape
 MOV    R6, #NIL                ;no defect list - empty for SCSI discs anyway
 BL     LowLevelOp              ;(R1-R6->R0-R4,V)
 BVS    %FT95
;check defect list
;LDR    R0, [SP, #8]            ;Recover buffer address
;MOV    R1, #SzDefectList
;BL     CheckSum                ;(R0,R1->R0-R2,V)
;MOVVS  R0,BadDefectListErr  ;>>>twiddle external bit?
;BVS    %FT95

;read disc structure from defect list
 LDMIA  SP, {R0,R1,R2}          ;Recover drive no, disc address, buffer address
 ADD    R2, R2, #DefectStruc
 LDMIA  R2,{R1-R4,LR}
 ASSERT RootDir=3*4
 ORR    R4, R4, R0, LSL #(32-3)
 STMIA  R5, {R1-R4,LR}

 [ Debug4
 mess   ,"Mount-floppy, reading map"
 mess   ,NL
 ]

;read the free space map (old map)
;read in the boot block as requested, will probably trigger Examine
 LDMIA  SP, {R1-R4}

 MOV    R6, #NIL                ;no defect list - empty for SCSI discs anyway
 MOV    R1, #ReadSecsOp :OR: NoEscape
 BL     LowLevelOp              ;(R1-R6->R0-R4,V)
 [ Debug4
 mess   ,"Mount-floppy, finished"
 mess   ,NL
 ]
95
 Pull   "R1-R4,R6,PC"
 ]

; =======
; Examine
; =======

;do any initialisation required for drive including reading block size

;entry 
; R2 drive (4 to 7) in top 3 bits
; R7 -> BlockSizes-4 (see ScsiFs15)

;exit
; R0, V set if error
; R8 log to base 2 of block size, also stored in correct entry in BlockSizes

Examine
 Push   "R0,R9,LR"
;
; Issue SCSI_Initialise (R0=DetermineDevice) which returns device type
; and block size.
;
; The device type must be 0 (Direct-access) and the block size 256,512 or 1024.
; FileCore can handle block sizes of 256,512 or 1024 bytes.
;
 [ Debug3
 mess   , "Examine - doing DetermineDevice", NL
 ]

 Push   "R1,R2"
 SUB    StkPtr,StkPtr,#16
 MOV    R0,#2                           ;DetermineDevice
 MOV    R1,R2,LSR #(32-3)
 mapDrvToDevLo R1,R1                    ;map drive onto devices
 MOV    R2,StkPtr
 [ RetryIfBusy
 MOV    R9,#60                          ;Retry on timeout for 60 seconds
78
 Push   "R0-R2"                         ;Stack incase we retry
 SWI    XSCSI_Initialise
 ADDVC  StkPtr,StkPtr,#12               ;Command OK, ditch stacked R0-R2
 BVC    %FT79
 BL     CheckRetry
 Pull   "R0-R2",VC                      ;Retry with stacked R0-R2
 BVC    %BT78
 ADDVS  StkPtr,StkPtr,#28               ;Balance stack, before
 Pull   "R1,R2",VS
 BVS    %FT95                           ; reporting error
79
 |
 SWI    XSCSI_Initialise
 ADDVS  StkPtr,StkPtr,#16               ;Balance stack, before
 Pull   "R1,R2",VS
 BVS    %FT95                           ; reporting error
 ]
 LDRB   R0,[StkPtr,#0]                  ;Device type
 CMP    R0,#DevDirectAccess             ;
 [ OpticalMemorySupport
 CMPNE  R0,#DevOpticalMemory
 ]
 BNE    %FT96                           ;Error - 'Not a winnie'

 LDR    R0,[StkPtr,#12]                 ;Block (sector) size
 CMP    R0,#256
 CMPNE  R0,#512
 CMPNE  R0,#1024
 BNE    %FT97                           ;Error - Not 256/512/1024 byte sectors

 ADD    StkPtr,StkPtr,#16               ;Finished with stacked data

 Push   "R0,R3"
 BL     ReserveDevice
 STRVS  R0, [SP]
 Pull   "R0,R3"
 Pull   "R1,R2"

 BVS    %FT95


;assuming R0 has block size = 2^n , the following code will convert it to the
;log to base two ie n as needed elsewhere

 MOV    R8, #0
80
 MOVS   R0, R0, LSR #1
 ADDNE  R8, R8, #1
 BNE    %BT80
 STRB   R8, [R7, R2, LSR #(32-3)]       ;save result in BlockSize table

95                                      ;error exit
 ORRVS  R0, R0, #ExternalErrorBit
 STRVS  R0, [SP]
 Pull   "R0,R9,PC"


96                              ;Return error - NotWinnie
 ADD    StkPtr,StkPtr,#16
 Pull   "R1,R2"
 ADR    R0,err_NotWinnie
 BL     SetV
 B      %BT95

97                              ;Return error - BadBlockSize
 ADD    StkPtr,StkPtr,#16
 Pull   "R1,R2"
 ADR    R0,err_BadBlockSize
 BL     SetV
 B      %BT95

err_NotWinnie
 DCD 42                         ;>>>>Proper number
 DCB "Bad SCSI device type",0
 ALIGN

err_BadBlockSize
 DCD 43                         ;>>>>Proper number
 DCB "Bad block size, must be 256/512/1024",0
 ALIGN


 [ FloppySupport

; ===========
; DoLockDrive
; ===========

;entry
; R1 drive 0..3
;
; Only called for a floppy drive

DoLockDrive
 Push   "R1,LR"
 mapDrvToDevLo R1, R1
 BL     LockMedia
 Pull   "R1,PC",,^


; =============
; DoUnlockDrive
; =============

;entry
; R1 drive 0..3
;
; Only called for a floppy drive

DoUnlockDrive
 Push   "R1,LR"
 mapDrvToDevLo R1, R1
 BL     UnLockMedia
 Pull   "R1,PC",,^


DiscString
 = "disc",0
 ALIGN


; ============
; DoPollPeriod
; ============

;entry
; R1 drive (floppy only??)

;exit
; R5 minimum polling period (in centi-seconds), or -1 if disc changed doesn't work
; R6 -> media type string eg 'disc'

DoPollPeriod
 Push   "LR"
 MOV    R5, #PollPeriod
 baddr  R6, DiscString
 Pull   "PC",,^

 ]

;
; On entry
;   R1 = Scsi deviceID
; 
DoDismount
 Push   "R0-R5,LR"

 ASSERT (Dismount_end - Dismount_start) = 16
 ADR    R2, Dismount_start
 LDMIA  R2, {R2,R3,R4,R5}       ;Copy string onto stack (known to be 16 bytes)
 STMDB  SP!,{R2,R3,R4,R5}       ;
 mapDevToDrvLo R1, R1           ;map device onto drives
 ADD    R0, R1, #"0"
 STRB   R0, [SP,#14]
 MOV    R0, SP
 SWI    XOS_CLI
 ADD    SP, SP, #(Dismount_end - Dismount_start)

 sbaddr R2, BlockSizes-4        ;Zero the BlockSize table entry, to force
 MOVVC  R0, #0                  ; an Examine and re-initialise of the 
 STRVCB R0, [R2,R1]             ; ScsiDriver on next ScsiFs access
 mapDrvToDevLo R1, R1           ;map drive onto device
 MOVVC  R0, #2                  ;RC for ReleaseDevice
 MOVVC  R8, R12                 ;Access Key
 SWIVC  XSCSI_Reserve

 STRVS  R0, [SP]
 Pull   "R0-R5,PC"


Dismount_start
 DCB    "SCSI:DISMOUNT x", 0
Dismount_end



;
; On entry
;   R1 = Scsi deviceID
; 
ReserveDevice ROUT
 Push   LR
 MOV    R0, #0                  ;RC for ClaimDevice
 ADR    R2, DoDismount          ;Adr } Used by ScsiDriver to request us to
 MOV    R3, R12                 ;R12 } Dismount & ReleaseDevice
 MOV    R8, R12                 ;Good value for the access key
 SWI    XSCSI_Reserve
 [ FloppySupport
 BVS    %FT95

 MOV    R0, #4                  ;RC for ControlErrors
 TST    R1, #4
 MOVNE  R2, #1                  ;Floppy - Auto Request-Sense, Return Unit-Attention
 MOVEQ  R2, #2                  ;Winnie - Auto Request-Sense, Ignore Unit-Attention
 SWI    XSCSI_Control
 [ MediaLocking
 TST    R1, #4
 BLEQ   LockMedia               ;Lock winnies in place
 ]
 |
 MOVVC  R0, #4                  ;RC for ControlErrors
 MOVVC  R2, #2                  ;Auto Request-Sense, Ignore Unit-Attention
 SWIVC  XSCSI_Control
 [ MediaLocking
 BLVC LockMedia
 ]
 ]
95
 Pull   PC


 [ MediaLocking
;
; On entry
;   R1 = Scsi deviceID
; 
LockMedia
 [ Debug3
 mess   , "Locking media", NL
 ]
 Push   "R0-R5,R8,LR"
 ADR    R2, CDB_LockMedia
LocMed_10
 AND    R0, R1, #&FF    ;DeviceID
 MOV    R1, #6          ;CDB length
 MOV    R3, #0
 MOV    R4, #0
 MOV    R5, #0
 MOV    R8, R12         ;AccessKey
 SWI    XSCSI_Op
 Pull   "R0-R5,R8,LR"
 BICS   PC, LR, #V_bit


;
; On entry
;   R1 = Scsi deviceID
; 
UnLockMedia
 [ Debug3
 mess   , "Unlocking media", NL
 ]
 Push   "R0-R5,R8,LR"
 AND    R1, R1, #&FF            ;Incase any high order bits are set
 [ Remap
 sbaddr  R5, BlockSizes
 |
 sbaddr  R5, BlockSizes-4
 ]
 MOV    R4, #0
 STRB   R4, [R5,R1]

 ADR    R2, CDB_UnLockMedia
 B      LocMed_10


CDB_LockMedia
 DCB    &1E             ;PREVENT/ALLOW MEDIA REMOVAL
 DCB    0               ;LUN & reserved
 DCB    0
 DCB    0
 DCB    1               ;Reserved=0 (b7..b1), Prevent removal=1 (b0)
 DCB    0               ;Vendor Unique=0 (b7..b6),Reserved=0 (b5..b2),
 ALIGN                  ; Flag=0 (b1),Link=0 (b0)

CDB_UnLockMedia
 DCB    &1E             ;PREVENT/ALLOW MEDIA REMOVAL
 DCB    0               ;LUN & reserved
 DCB    0
 DCB    0
 DCB    0               ;Reserved=0 (b7..b1), Prevent removal=0 (b0)
 DCB    0               ;Vendor Unique=0 (b7..b6),Reserved=0 (b5..b2),
 ALIGN                  ; Flag=0 (b1),Link=0 (b0)
 ]

 LNK    TokenHelp
