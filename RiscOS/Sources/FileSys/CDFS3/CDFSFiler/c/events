/* File:    events.c
 * Purpose: To handle GUI events
 * Author:  Timothy Roddis
 * History: 11-Mar-96: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Toolbox headers */

#include "toolbox.h"
#include "iconbar.h"
#include "menu.h"
#include "gadgets.h"
#include "event.h"
#include "wimp.h"

/* commonlib headers */

#include "defines.h"
#include "dbmalloc.h"
#include "debug.h"
#include "msgs.h"

#include "cdswis.h"
#include "shareswis.h"

/* Local headers */

#include "main.h"
#include "gui.h"
#include "aux.h"
#include "task.h"
#include "events.h"

static char command_string[OS_CommandString_MaxLength];

int find_drive_from_iconbar_id (unsigned int ancestor_id);

/* toolbox event handlers:
 *
 * on entry:
 *    event_code is the toolbox event code
 *    event is toolbox event block
 *    id_block is a pointer to the id block (which actually is a static declared in task.c)
 *    handle is a handle for an object or NULL (as in these cases)
 *
 * on exit: a return value of non-zero indicates the event has been claimed
 */

static int handle_sharedbox_actionshare (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                 void *handle) {

   char            *buffer_w, *buffer_d;
   int              size;
   _kernel_oserror *e;

   IGNORE (handle);
   IGNORE (event);
   IGNORE (event_code);

   DEBUG debug_output ("e", "CDFiler: trying to share CD-ROM\n");

   /* get sizes of writable and display: pick max and allocated that */

   displayfield_get_value (0, id_block->self_id, ShareDbox_DisplayField_DiscName, NULL, 0, &size);

   if ((buffer_d = malloc (size)) == NULL) {
      aux_raise_error (msgs_make_error (Error_MemAlloc));
      return 1;
   }
   displayfield_get_value (0, id_block->self_id, ShareDbox_DisplayField_DiscName,
                           buffer_d, size, &size);

   writablefield_get_value(0, id_block->self_id, ShareDbox_Writable_ShareAs,      NULL, 0, &size);

   if ((buffer_w = malloc (size)) == NULL) {
      e = msgs_make_error (Error_MemAlloc);
      goto free1;
   }
   writablefield_get_value(0, id_block->self_id, ShareDbox_Writable_ShareAs,
                           buffer_w, size, &size);

   e = _swix (ShareFS_CreateShare, I0|I1|I2, ShareFS_EnumerateSharesFlags_CDROM, buffer_w,
              buffer_d);

      free (buffer_w);
   free1:
      free (buffer_d);

      if (e) aux_raise_error (e);

      return 1;
}


static int handle_sharedbox_tobehidden (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                 void *handle) {

   _kernel_oserror *e;

   IGNORE (handle);
   IGNORE (event);
   IGNORE (event_code);

   if (((e = event_deregister_toolbox_handler (id_block->self_id, ShareDbox_AboutToBeHidden,
                                               handle_sharedbox_tobehidden, NULL)) != NULL)
   ||  ((e = event_deregister_toolbox_handler (id_block->self_id, ShareDbox_ActionButton_Share,
                                               handle_sharedbox_actionshare, NULL)) != NULL)) {

      aux_raise_error (e);
   }
   if ((e = toolbox_delete_object (0, id_block->self_id)) != NULL) {
      aux_raise_error (e);
   }
   return 1;
}

int events_handle_toolbox_error (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                 void *handle) {

   IGNORE(handle);
   IGNORE(id_block);
   IGNORE(event_code);

   aux_raise_error ((_kernel_oserror *) &(event->data));

   return 1;
}


int events_handle_menu_selection (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                  void *handle) {

   unsigned int     drive;
   _kernel_oserror *e;

   IGNORE(handle);
   IGNORE(event);
   IGNORE(event_code);

   drive = find_drive_from_iconbar_id (id_block->ancestor_id);

   if (drive == -1) {
      debug_display ("Internal inconcistency in CDFSFiler");
      return 0;
   }

   /* If the parent is the ancestor this is the iconbar menu */

   if (id_block->parent_id == id_block->ancestor_id) {
      if (id_block->self_component == IconbarMenu_Dismount) {

         sprintf (command_string, "%s%cDismount %c%d", CDFS_FileSystemName,
                  FS_NameAndDiscSpecSeparator, FS_NameAndDiscSpecSeparator,
                  drive);

         if (drive != -1) {
            int __swi (Hourglass_Off) hour_off(void);

            _swix (Hourglass_On, 0);

            e = _swix (OS_CLI, I0, command_string);

            hour_off();

            if (e) {
               aux_raise_error (e);
            }
         }
      }
   } else { /* otherwise it's the share menu */
      if (id_block->self_component == ShareMenu_Unshare) {

         char *object_name;

         object_name = aux_find_enumeration (aux_canonicalise_drive (drive, TRUE));

         DEBUG debug_output ("e", "CDFiler: drive canonicalises to \"%s\" - object name \"%s\" @0x%p\n", aux_canonicalise_drive (drive, FALSE), object_name, object_name);

         e = _swix (ShareFS_StopShare, I0|I1, 0, object_name);

         if (e) {
            aux_raise_error (e);
         } else {
            menu_set_fade (0, id_block->self_id, ShareMenu_Unshare, TRUE);
            menu_set_fade (0, id_block->self_id, ShareMenu_Share,   FALSE);
         }
      } else {

         ObjectId  share_dbox_id;
         char     *pathname, *ptr;

         pathname = aux_canonicalise_drive (drive, TRUE);

         if ((e = toolbox_create_object (0, "ShareDbox", &share_dbox_id)) != NULL) {
            aux_raise_error (e);
            return 1;
         }

         if (((e = event_register_toolbox_handler (share_dbox_id, ShareDbox_AboutToBeHidden,
                                                   handle_sharedbox_tobehidden, NULL)) != NULL)
         || ((e = event_register_toolbox_handler (share_dbox_id, ShareDbox_ActionButton_Share,
                                                  handle_sharedbox_actionshare, NULL)) != NULL)
         || ((e = displayfield_set_value (0, share_dbox_id, ShareDbox_DisplayField_DiscName,
                                          pathname)) != NULL)) {

            toolbox_delete_object (0, share_dbox_id);
            aux_raise_error (e);
            return 1;
         }
         /* Hacky bit - writing into another functions static buffer... */

         pathname += CDFS_FileSystemName_Length + 2;

         ptr = strchr (pathname, FS_DirectorySeparator);

         if (ptr) *ptr = 0;

         if (((e = writablefield_set_value (0, share_dbox_id, ShareDbox_Writable_ShareAs,
                                      pathname)) != NULL)
         ||  ((e = toolbox_show_object (Toolbox_ShowObject_AsMenu, share_dbox_id, Toolbox_ShowObject_Default, 0,
                                       id_block->self_id, id_block->self_component)) != NULL)) {
            toolbox_delete_object (0, share_dbox_id);
            aux_raise_error (e);
            return 1;
         }
      }
   }
   return 1;
}

int events_handle_iconbar_clicked (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                   void *handle) {
   unsigned int     drive;
   _kernel_oserror *e;
   int __swi (Hourglass_Off) hour_off(void);

   IGNORE(handle);
   IGNORE(event);
   IGNORE(event_code);

   /* deduce which drive this is associated with */

   drive = find_drive_from_iconbar_id (id_block->self_id);

   DEBUG {if (drive == -1) {
      debug_display ("Internal inconcistency in CDFSFiler");
      return 0;
   }}
   _swix (Hourglass_On, 0);

#if TRUE
   {
      char *drive_name;

      drive_name = aux_canonicalise_drive (drive, TRUE);

      if (!drive_name) return 1;

      hour_off();

      sprintf (command_string, "Filer_OpenDir %s", drive_name);

      e = _swix (OS_CLI, I0, command_string);
   }
#else
   {  Doesn't work, event 'though the filer task id should be set or 0 (broadcast)
      static WimpMessage wimp_message;

      wimp_message.hdr.size        = 32;
      wimp_message.hdr.your_ref    = 0;
      wimp_message.hdr.action_code = Message_FilerOpenDir;
      wimp_message.data.words[0]   = CDFS_FSNumber;
      wimp_message.data.words[1]   = 0;

      sprintf (wimp_message.data.bytes + 8, FS_NameAndDiscSpecSeparatorString "%d", drive);

      e = _swix (Wimp_SendMessage, I0|I1|I2, Wimp_EUserMessage, &wimp_message,
                 global_filer_task_handle);
   }
#endif

     hour_off();

      if (e) aux_raise_error (e);

      return 1;
}

int events_handle_menu_tobeshown (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                  void *handle) {

//   char            *help_string, *version_no;
   char            drivename[CDFS_UncanonicalisedNameMaxLength];
//   int             *code_ptr, minor_ver, major_ver;
   unsigned int     drive, status;
   char            *discname;
   _kernel_oserror *e;

   IGNORE (event_code);
   IGNORE (event);
   IGNORE (handle);

   drive = find_drive_from_iconbar_id (id_block->ancestor_id);

   DEBUG {if (drive == -1) {
      debug_display ("Internal inconcistency in CDFSFiler");
      return 0;
   }}
   if (id_block->parent_id == id_block->ancestor_id) {
      sprintf (drivename,
       CDFS_FileSystemName FS_NameAndDiscSpecSeparatorString FS_NameAndDiscSpecSeparatorString "%d",
       drive);

      menu_set_title (0, id_block->self_id, drivename);

      /* is sharefs up? if not grey the share icon on the iconbar and return */

#if FALSE
      e = _swix (OS_Module, I0|I1|O3, OS_Module_LookUpName, "ShareFS", &code_ptr);

      if (!e) {

         help_string = (char *) code_ptr + code_ptr[OS_ModuleHdr_HelpStringOffsetOffset];

         version_no = strchr (help_string, ASCII_HT);

         DEBUG debug_output ("e", "CDFiler: version no. of ShareFS is at start of \"%s\"\n", version_no);

         sscanf (version_no, "%d.%d", &major_ver, &minor_ver);
      } else {
         minor_ver = major_ver = 0;
      }
      menu_set_fade (0, id_block->self_id, IconbarMenu_Share, (major_ver * 100 + minor_ver < 200));
#else
      e = _swix (Freeway_Status, I0|O1, 0, &status);

      discname = e ? NULL : aux_canonicalise_drive (drive, FALSE);

      DEBUG debug_output ("e", "CDFiler: discname %s, status %d\n", discname ? discname : "<NULL>", status);

      menu_set_fade (0, id_block->self_id, IconbarMenu_Share,
                     !discname || !status  /* If no freeway, or freeway idle, or audio disc */
                    );
#endif
   } else { /* otherwise it's the share menu */

      Bool  shared;
      char *object_name;

      shared = (Bool) aux_find_enumeration(object_name = aux_canonicalise_drive (drive, TRUE));

      DEBUG debug_output ("e", "CDFiler: %sshared\n", shared?"":"not ");

      menu_set_fade (0, id_block->self_id, ShareMenu_Unshare, !object_name || !shared);
      menu_set_fade (0, id_block->self_id, ShareMenu_Share,   !object_name ||  shared);
   }
   return 1;
}



int events_handle_iconmenu_size_submenu (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                         void *handle) {

   unsigned int        drive, sequence_no, size;
   unsigned int        start_time;
   unsigned int        current_time;
   unsigned int        timeout;
   static ObjectId     size_dbox_id = 0;
   char                sizebuffer[20]; /* Plenty - ints can only go to 10 digits */
   char               *warning_message = NULL;
   _kernel_oserror    *e;
   CDMgr_ReadTOC_Ptr   toc_buffer;
   Bool                carry_on;
   int __swi (Hourglass_Off) hour_off(void);


   IGNORE(event_code);
   IGNORE(event);
   IGNORE(handle);

   DEBUG debug_output ("e", "CDFiler: size about to be shown\n");

   drive = find_drive_from_iconbar_id (id_block->ancestor_id);

   if (drive == -1) {
      debug_display ("Internal inconcistency in CDFSFiler");
      return 0; /* Not claimed */
   }

   if ((e = _swix (CDMgr_DriveOp, I0|I1|O0, CDMgr_DriveOp_BusyTimeOut,
                   drive, &timeout)) != NULL) {
      aux_raise_error (e);
      return 1;
   }
   _swix (Hourglass_On, 0);

   if ((e = _swix (OS_ReadMonotonicTime, _OUT(0), &start_time)) != NULL) {
      hour_off();
      aux_raise_error (e);
      return 1;
   }
   do {
      carry_on = FALSE;
      if ((e = _swix (CDMgr_DriveOp, I0|I1|O0, CDMgr_DriveOp_GetSequenceNumber, drive, &sequence_no)) != NULL) {

         if (e && ((e->errnum & OS_ErrorNumberBitMask) == CDMgr_Error_BecomingReady)) {
            if ((e = _swix (OS_ReadMonotonicTime, _OUT(0), &current_time)) != NULL) {
               hour_off();
               aux_raise_error (e);
               return 1;
            }
            carry_on = (current_time - start_time <= timeout);

            _swix (Hourglass_Percentage, I0, (current_time - start_time) * 100 / timeout);
         }
      }
   } while (carry_on);

   DEBUG if (e) debug_output ("e", "CDFiler: error number is 0x%x\n", e->errnum);

   if (e) {
      if ((e->errnum & OS_ErrorNumberBitMask) == CDMgr_Error_NotPresent) {
         warning_message = msgs_lookup ("Empty");
         goto display;
      } else {
          hour_off();
          aux_raise_error (e);
          return 1;
      }
   }
   e = _swix (CDMgr_ReadTOC, I0|I1|I2|I3|I4|I5|O3 , 0, drive, sequence_no, 0, 0, 0, &size);

   if (e
   || ((e = ((toc_buffer=malloc (size)) == NULL)?msgs_make_error (Error_MemAlloc):NULL) != NULL)) {
      hour_off();
      aux_raise_error (e);
      return 1;
   }

   e = _swix (CDMgr_ReadTOC, I0|I1|I2|I3|I4|I5 , 0, drive, sequence_no, toc_buffer, 0, 0);

   if (e) {
      hour_off();

      if (e) aux_raise_error (e);

      free (toc_buffer);

      return 1;
   }
   e = _swix (OS_ConvertFileSize, I0|I1|I2, toc_buffer->disc_size * ISO9660_LogicalSectorSize,
              sizebuffer, 20);

   free (toc_buffer);

   if (e) {
      hour_off();

      aux_raise_error (e);

      return 1;
   }

 display:

  hour_off();

  if (!size_dbox_id) {
     e = toolbox_create_object (0, "Size", &size_dbox_id);

     if (e) {
        aux_raise_error (e);
        return 1;
     }
  }
  e = displayfield_set_value (0, size_dbox_id, Size_DisplayField_Size,
                              warning_message ? warning_message : sizebuffer);
   if (e) {
      aux_raise_error (e);
      return 1;
   }
   e = toolbox_show_object (Toolbox_ShowObject_AsSubMenu, size_dbox_id,
                            Toolbox_ShowObject_TopLeft, &(((MenuSubMenuEvent *) event)->pos),
                            id_block->self_id, id_block->self_component);
   return 1;
}


int events_handle_wimp_quit (WimpMessage *message, void *handle) {

   IGNORE(message);
   IGNORE(handle);

   global_task_handle = 0;
   return 1;
}

int find_drive_from_iconbar_id (unsigned int iconbar_id) {

   IconbarIconPtr   icon_ptr = task_iconbar_icons;
   unsigned int     i;

   for (i = task_no_iconbar_icons - 1; i+1 && icon_ptr; i--) {
      if (icon_ptr->object_id == iconbar_id) {
         return i;
      }
      icon_ptr = icon_ptr->next;
   }
   return -1; /* failed to find it */
}

