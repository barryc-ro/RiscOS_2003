/* File:    task.c
 * Purpose: Perform wimp task related operations of CDFSFiler
 * Author:  Timothy Roddis
 * History: 06-Mar-96: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Toolbox headers */

#include "toolbox.h"
#include "iconbar.h"
#include "menu.h"
#include "event.h"
#include "wimp.h"

/* commonlib headers */

#include "defines.h"
#include "dbmalloc.h"
#include "debug.h"
#include "msgs.h"

/* */

#include "cdswis.h"

/* Local headers */

#include "main.h"
#include "gui.h"
#include "aux.h"
#include "task.h"
#include "events.h"

#ifndef ROM
    extern int messages_file(void);
    extern int res_file(void);
#endif


MessagesFD      task_mfd;
IdBlock         task_idb;
WimpPollBlock   task_poll_block;
IconbarIconPtr  task_iconbar_icons = NULL;
unsigned int    task_no_iconbar_icons = 0;

static int messages[] = {
   Wimp_MQuit,
   0
};

static int toolbox_events[] = {
   Iconbar_Clicked,
   Menu_AboutToBeShown,
   Menu_Selection,
   Toolbox_Error,
   ShareDbox_AboutToBeHidden,
   ShareDbox_ActionButton_Share,
   IconMenu_Size_SubMenu,
   0
};


/* Prototypes */

_kernel_oserror *rmensure (char *module_name, char *file_name, char *module_version);
void create_iconbar_icons (unsigned no_to_create);
void delete_iconbar_icons (unsigned no_to_delete, Bool free_mem_only);



/* Initialise task.
 *
 * on exit: returns error if task initialisation was not successful
 */

static _kernel_oserror *task_init (void) {

   _kernel_oserror *e;

   e = _swix (Wimp_SlotSize, I0|I1, Task_WimpSlotSize, -1);

   if (e) return e;

   /* RMEnsure the menu, iconbar, window modules */

   /* Next line added 'cause someone's screwed up the toolbox depency chains */

   if ((e = rmensure ("Toolbox", "Toolbox.Toolbox", "1.09")) != NULL) return e;

   if ((e = rmensure ("Window",  "Toolbox.Window",  "1.26")) != NULL) return e;
   if ((e = rmensure ("Iconbar", "Toolbox.Iconbar", "1.09")) != NULL) return e;
   if ((e = rmensure ("Menu",    "Toolbox.Menu",    "0.23")) != NULL) return e;

#ifndef ROM
   if ((e = _swix (ResourceFS_RegisterFiles, I0, messages_file())) != NULL) return e;
   if ((e = _swix (ResourceFS_RegisterFiles, I0, res_file()))      != NULL) return e;
#endif

   DEBUG debug_output ("t", "CDFiler: TASK INITIALISING\n");

   /* Toolbox initialise calls wimp initialise for us and also loads certain resources in the
    * given diretory.
    */

   if ((e = toolbox_initialise (0, Wimp_LastKnownVersion, messages, toolbox_events,
                                CDFiler_ResourcesDirectory, &task_mfd, &task_idb, NULL,
                                &global_task_handle, NULL)) != NULL) {

      DEBUG debug_output ("t", "CDFiler: error initialising: 0x%x - \"%s\"\n", e->errnum,
                          e->errmess);

      return e; /* Fatal */
   }
   DEBUG debug_output ("t", "CDFiler: after toolbox_intialise, task handle is 0x%x\n", global_task_handle);


   _kernel_oscli ("IconSprites " CDFiler_ResourcesDirectory ".!Sprites22");

   event_initialise (&task_idb);

   msgs_set_file_descriptor ((MsgsFD *)&task_mfd);

   e = event_register_message_handler(    Wimp_MQuit,          events_handle_wimp_quit,       NULL);

   if (e) aux_raise_error (e);

   e = event_register_toolbox_handler(-1, Iconbar_Clicked,     events_handle_iconbar_clicked, NULL);

   if (e) aux_raise_error (e);

   e = event_register_toolbox_handler(-1, Menu_Selection,      events_handle_menu_selection,  NULL);

   if (e) aux_raise_error (e);

   e = event_register_toolbox_handler(-1, Menu_AboutToBeShown, events_handle_menu_tobeshown,  NULL);

   if (e) aux_raise_error (e);

   e = event_register_toolbox_handler(-1, Toolbox_Error,       events_handle_toolbox_error,   NULL);

   if (e) aux_raise_error (e);

   e = event_register_toolbox_handler(-1, IconMenu_Size_SubMenu, events_handle_iconmenu_size_submenu,  NULL);

   if (e) aux_raise_error (e);

   e = event_set_mask (Wimp_Poll_KeyPressedMask);

   DEBUG debug_output ("t", "CDFiler: end of task initialisation\n");

   return NULL;
}

_kernel_oserror *task_start (void) {

   unsigned int     max_drive;
   unsigned int     earliest;
   int              event_code;
   _kernel_oserror *e;

   e = task_init ();

   if (e) goto end;

   while (global_task_handle > 0) {

      DEBUG debug_output ("t", "CDFiler: in poll loop: ");

      max_drive = -1;

      /* call function to enumerate drives and dynamically add icons */

      _swix (CDMgr_DriveOp, I0|O0, CDMgr_DriveOp_EnumerateDrives, &max_drive);

      DEBUG debug_output ("t", "max drive %d, icons %d\n", max_drive, task_no_iconbar_icons);

      if (max_drive+1 > task_no_iconbar_icons) {
         create_iconbar_icons (max_drive + 1 - task_no_iconbar_icons);
      } else if (max_drive+1 < task_no_iconbar_icons) {
         delete_iconbar_icons (task_no_iconbar_icons - max_drive - 1, FALSE);
      }
      if ((e = _swix (OS_ReadMonotonicTime, O0, &earliest)) != NULL) aux_raise_error (e);

      earliest += CDFiler_PollDelay;

      e = event_poll_idle (&event_code, &task_poll_block, earliest, NULL);

      if (e) aux_raise_error (e);

      DEBUG debug_output ("t", "CDFiler: task handle is 0x%x\n", global_task_handle);
   }
   if (task_no_iconbar_icons) delete_iconbar_icons (task_no_iconbar_icons, FALSE);

   e = NULL;

   end:

#ifndef ROM
   _swix (ResourceFS_DeregisterFiles, I0, messages_file());
   _swix (ResourceFS_DeregisterFiles, I0, res_file());
#endif

   return e;
}

void task_quit (void) {

   int task_handle = global_task_handle; /* <- This is some magic (1) */

   DEBUG debug_output ("t", "CDFiler: task finalising\n");

   /* We rely on the toolbox module to catch the task closing down stuff and delete
      objects. (We can't do it here, our task might not be paged in.) */

   if (task_no_iconbar_icons) {
      delete_iconbar_icons (task_no_iconbar_icons, TRUE);
   }

   global_task_handle = 0; /* <- This is some magic (2) */

   _swix (Wimp_CloseDown, I0|I1, task_handle, *(int *)"TASK");

#ifndef ROM
   _swix (ResourceFS_DeregisterFiles, I0, messages_file());
   _swix (ResourceFS_DeregisterFiles, I0, res_file());
#endif
}

/* RMEnsures a module
 * Taken from IDJ's Aquarius common code
 *
 * on entry:
 *    module_name contains the name of the required module
 *    filename is the location of the toolbox modules
 *    module_version is the version number of the toolbox module required
 *
 * on exit: module is now in RMA or else an error has been returned
 */

_kernel_oserror *rmensure (char *module_name, char *file_name, char *module_version)
{
#ifndef ROM
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    char command[256];

    /*
     * see if the module is there at all!
     */

    sprintf (command, "*RMEnsure %s %s *RMLoad System:modules.%s", module_name,
                                module_version, file_name);

    regs.r[0] = (int)command;
    if ((e = _kernel_swi (OS_CLI, &regs, &regs)) != NULL)
        return e;

    sprintf (command, "*RMEnsure %s %s", module_name, module_version);

    regs.r[0] = (int)command;
    if ((e = _kernel_swi (OS_CLI, &regs, &regs)) != NULL)
        return e;
#else
    IGNORE(module_name);
    IGNORE(file_name);
    IGNORE(module_version);
#endif

    return NULL;
}

/* This creates the relevant no. of icons
 *
 * on entry:
 *    no_to_create - no of drives without icons on the iconbar
 *
 *    task_iconbar_icons is an extern pointer to the iconbar list. The most recent iconbar
 *       icon, which will be the rightmost on the iconbar, is the first in the list.
 *    task_no_iconbar_icons is another extern: the number of CDFSFiler icons currently on
 *    the iconbar.
 *
 * on exit:
 *    the two externs above have been updated to reflect the new status of the iconbar
 */


void create_iconbar_icons (unsigned int no_to_create) {

   unsigned int     i;
   char             text[12]; /* Enough for a colon, a number and a terminator*/
   _kernel_oserror *e;
   IconbarIconPtr   icon_ptr;

   DEBUG debug_output ("c", "CDFiler: creating %d new icon%s on the iconbar\n", no_to_create, (no_to_create-1)?"s":"");

   for (i=0; i<no_to_create; i++) {
      if ((e = _swix (OS_Module, I0|I3|O2, OS_Module_Claim, sizeof (IconbarIconRec), &icon_ptr)) != NULL) {
         aux_raise_error (e);
         return;
      }
      icon_ptr->next     = task_iconbar_icons;
      task_iconbar_icons = icon_ptr;

      e = toolbox_create_object (0, "Iconbar", &(icon_ptr->object_id));

      if (e) {
         _swix (OS_Module, I0|I2, OS_Module_Free, icon_ptr);
         aux_raise_error (e);
         break;
      }
      sprintf (text, ":%d", task_no_iconbar_icons+++i);

      iconbar_set_text (0, icon_ptr->object_id, text);

      e = toolbox_show_object (0, icon_ptr->object_id, 0, NULL, 0, -1);
   }
}

/* This delete the relevant no. of icons
 *
 * on entry:
 *    no_to_delete - no of icons on the iconbar without drives
 *
 *    task_iconbar_icons is an extern pointer to the iconbar list. The most recent iconbar
 *       icon, which will be the rightmost on the iconbar, is the first in the list.
 *    task_no_iconbar_icons is another extern: the number of CDFSFiler icons currently on
 *    the iconbar.
 *
 * on exit:
 *    the two externs above have been updated to reflect the new status of the iconbar
 */

void delete_iconbar_icons (unsigned int no_to_delete, Bool free_mem_only) {

   unsigned int     i;
   _kernel_oserror *e;
   IconbarIconPtr   icon_ptr;

   DEBUG debug_output ("c", "CDFiler: deleting %d icon%s from the iconbar\n", no_to_delete, (no_to_delete-1)?"s":"");

   for (i = 0; i<no_to_delete; i++) {

      icon_ptr = task_iconbar_icons;

      if (icon_ptr == NULL) break;

      if (!free_mem_only) {
         e = toolbox_hide_object (0, icon_ptr->object_id);

         if (e) aux_raise_error (e);

         e = toolbox_delete_object (0, icon_ptr->object_id);

         if (e) aux_raise_error (e);
      }
      task_iconbar_icons = icon_ptr->next;

      if ((e = _swix (OS_Module, I0|I2, OS_Module_Free, icon_ptr)) != NULL) {
         aux_raise_error (e);
         exit(1);
      }
      task_no_iconbar_icons--;
   }
}
