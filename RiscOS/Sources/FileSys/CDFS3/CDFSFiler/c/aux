/* File:    aux.c
 * Purpose: Auxiliary routines for CDFSFiler
 * Author:  Timothy Roddis
 * History: 18-Mar-96: TGR: created
 */

/* ANSI headers */

#include <stdio.h>
#include <string.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* commonlib headers */

#include "tgrlib/defines.h"
#include "tgrlib/debug.h"
#include "tgrlib/msgs.h"

/*  */

#include "shareswis.h"

/* local headers */

#include "main.h"
#include "aux.h"
#include "task.h"

char *aux_find_enumeration (char *pathname) {

   unsigned int next_ref = 0;
   char *share_path, *object_name;

   if (!pathname) return pathname;

   DEBUG debug_output ("a", "CDFiler: seraching for \"%s\"\n", pathname);

   do {

      if (_swix (ShareFS_EnumerateShares,
             I0|I4|O1|O2|O4, ShareFS_EnumerateSharesFlags_CDROM,
             next_ref, &object_name, &share_path, &next_ref)) break;

      if (next_ref == -1) break;

      DEBUG debug_output ("a", "CDFiler: object \"%s\", path \"%s\", next ref is %d\n",
                          object_name, share_path, next_ref);

      if (!strcmp (share_path, pathname)) return object_name;

   } while (TRUE);

   return NULL;
}

/* Canonicalise a drive name
 *
 * on entry:
 *    drive is the drive number for which the discname is required
 *    buffer is a pointer to a char * to point at the static internal discname buffer
 *
 * on exit:
 *    buffer is updated to point at a canonicalise discname or else an error is returned
 *
 * NOT RE-ENTRANT * NOT RE-ENTRANT * NOT RE-ENTRANT * NOT RE-ENTRANT * NOT RE-ENTRANT *
 */

char *aux_canonicalise_drive (unsigned int drive, BOOL raise_error) {

   char             drivename[CDFS_UncanonicalisedNameMaxLength];
   static char      buffer[FS_MaxPathnameLength];
   _kernel_oserror *e;

   sprintf (drivename,
    CDFS_FileSystemName FS_NameAndDiscSpecSeparatorString FS_NameAndDiscSpecSeparatorString "%d",
            drive);

   e = _swix (OS_FSControl, I0|I1|I2|I3|I4|I5, OS_FSControl_Canonicalise,
              drivename, buffer, 0, 0, FS_MaxPathnameLength);

   if (e) {
      if (raise_error) aux_raise_error (e);
      return NULL;
   }
   return buffer;

}

/* This simply calls Wimp_ReportError with the given error block
 *
 * on entry: e is a pointer to an error block (not NULL)
 */

void aux_raise_error (_kernel_oserror *e) {

      /* Given an error block, raise the error */

      _kernel_swi_regs regs;
      char *strng;

      DEBUG debug_output ("t", "CDFiler: trying to report an error\n");

      strng = msgs_lookup ("_TaskName");

      regs.r[0] = (int) e;
      regs.r[1] =       16;
      regs.r[2] = (int) strng;

      _kernel_swi (Wimp_ReportError, &regs, &regs);
}

