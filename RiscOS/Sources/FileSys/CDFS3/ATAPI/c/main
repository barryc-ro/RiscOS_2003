/* main.c for ATAPI module */


#include "main.h"
#include "resources.h"
#include "register.h"



int **privword;    /* the address of this module's private word */



/*
 * Returns NULL if initialisation succeeds, otherwise a pointer to an
 *  appropriate error block.
 *
 * On entry, pw addresses the word that addresses a block of RMA in which the
 *  module's statics have been placed.
 *
 */

Error * main_initialise (char *cmdtail, int podule, void *pw)
{
    IGNORE (cmdtail);
    IGNORE (podule);

    /* note the private word address for future reference */
    privword = (int **) pw;

#ifdef TINYSTUBS

    /* statics must be (re)initialised here if necessary */

#endif

   DEBUG debug_set_var_names ("ATAPI$Debug", "ATAPI$HexDump");

    /* register Messages file with ResourceFS */
    ER (_swix (ResourceFS_RegisterFiles, I0, resources));

    /* open messages file */
    ER (msgs_open_file (APPDIR".Messages"));

    /* set error base for driver-specific errors */
    msgs_set_error_base (ERROR_BASE);

    /* see what ATAPI drives are out there, if any */
    ER (register_scan_for_drives (&drivelist));

    return NULL;
}


/*
 * Returns NULL if ready to be killed, otherwise a suitable error is
 *  returned.
 *
 * 'fatal' is FALSE if this is a temporary closedown - as a result of a call
 *  of RMTidy, for example - in which case the module will be relocated and
 *  subsequently reinitialised.
 */

Error * main_finalise (Bool fatal, int podule, void *pw)
{
    IGNORE (fatal);    /* behaviour is the same even if resurrection is
                          imminent */
    IGNORE (podule);
    IGNORE (pw);

    /* deregister all drives with CDManager */
    register_deregister ();

    /* close messages file - ignore errors */
    msgs_close_file ();

    /* deregister Messages file from ResourceFS - ignore errors */
    _swix (ResourceFS_DeregisterFiles, I0, resources);

    return NULL;
}


/*
 * Service call handler: set r->r[1] = 0 to claim the service call.
 *
 * This module responds to:
 *     Service_CDNewDrivePoll       (issued by CDManager)
 *     Service_CountATAPIDevices    (issued by dummy CDFSSoftATAPI)
 */

void main_service_call (int number, _kernel_swi_regs *r, void *pw)
{
    IGNORE (pw);

    switch (number)
    {
    case Service_CDNewDrivePoll:
        if (r->r[0] & ALL_DRIVES)
            register_all_drives ();
        else
            register_new_drives ();
        break;

    case Service_CountATAPIDevices:
        register_count_atapi_devices ((char *) r->r[2], (int *) &r->r[0]);
        break;
    }


    return;
}
