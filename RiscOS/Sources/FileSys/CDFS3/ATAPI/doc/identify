Notes on device presence and identification algorithm
-----------------------------------------------------

The algorithm is as follows:

 For each device (0, 1) on each interface (Motherboard, ...) do:

  1) Wait for BSY = 0   (repeated read of Status register)

  2) Select device      (write to Drive/Head Select register)

  3) Wait for BSY = 0   (repeated read of Status register)

  4) Issue ATA Identify Device command (&EC):  (write to Command register)

    4a) If this executes successfully, the device is not an ATAPI drive,
        and is most likely to be a disc drive.

    4b) If this times out, then the device does not exist (or is sick). This
        can arise with device 1 where device 0 follows the 'first method' for
        dealing with its non-existent slave (see note (2)).

    4c) If this command aborts, proceed with step (5).

  5) Issue ATAPI Identify Device command (&A1):  (write to Command register)

    5a) If this executes successfully, the drive is an ATAPI drive.

    5b) If this times out, something unusual is happening: no ATA or ATAPI
        device should abort &EC but time out on &A1. There must be something
        wrong with the hardware.

    5c) If this command aborts, the most likely explanation is that the
        device does not exist. This can arise with device 1 where device 0
        follows the 'second method' for dealing with its non-existent slave
        (see note (2)).


Notes:

1)  The bus is locked before looking at each device, and released at the
    end.

2)  The ATA-2 (and ATA-3) specification describes in para 9.7 how device 0
    should behave in the absence of device 1. There are two possibilities:

    'First method':
       Any command issued to device 1 is ignored, and reading its Status
       register always returns 0x00.

    'Second method':
       With specific exceptions (INITIALIZE DEVICE PARAMETERS, EXECUTE DEVICE
       DIAGNOSTICS), any command issued to device 1 is aborted.

    The ATA specification recommends the 'first method'.

    The ATAPI specification (para 6.5) also describes how an ATAPI drive
    should behave under these circumstances, and this seems to be similar to
    the 'second method' above.

3)  This algorithm assumes that the devices are fully-initialised before
    device detection takes place; in particular, we assume that any device
    is ready to respond to the given commands.

    An ATA device should always accept the ATA Identify Command, and abort
    the ATAPI Identify Command.

    An ATAPI device should always accept the ATAPI Identify Command but abort
    the ATA Identify Command.

4)  No use is made of the state of the DRDY flag in the Status register,
    because we cannot make assumptions about its state.

    In an ATA device, this bit indicates that the device is ready to accept
    an ATA command, and - as far as I can tell - should always be 1 when
    BSY = 0, except - possibly - during initialisation following reset.

    If DRDY = 0, an ATA device should abort any command issued to it, so it
    is possible that an unready ATA device may be interpreted as non-existent
    by the algorithm above; since we are interested only in ATAPI devices,
    this does not matter.

    In an ATAPI device, the DRDY flag is set to 0 after a reset to prevent
    any ATA driver from recognising the device as an ATA device; but the
    state of the flag does not affect the way in which the device responds
    to commands.

5)  After reset, an ATAPI device should set its Byte Count registers to the
    special value &eb14 - the so-called 'ATAPI signature'. The algorithm
    cannot make use of this property because no assumptions can be made about
    the current state of the device when the algorithm is executed.

    It's also worth noting that when values are written to the Byte Count
    registers, it seems that both devices accept them: so no reliance can be
    placed on a value read from these registers except during the processing
    of a single command. (In other words, the values in these registers are
    only 'stable' so long as the bus is locked.)

6)  Presumably an even simpler algorithm that misses out step 4 should also
    work - in other words, just issue an ATAPI Identify Device command and
    say the device is ATAPI iff this executes successfully. This is probably
    ok, but I've erred on the side of caution in case some older ATA devices
    do not correctly fault this command (and so might be disturbed by it).

7)  It would be nice if we could avoid the 'time out' option in the
    algorithm. This might be possible if we had access to the values of
    DRDY and the Byte Count registers immediately after initialisation is
    complete.

    The algorithm would be modified somewhere along the following lines:

    Step (4) would take place only if DRDY = 1.

    Step (5) would take place only if DRDY = 0 and the Byte Count registers
    contained the ATAPI signature.

    We would assume that DRDY = 0 and no ATAPI signature meant a non-existent
    device.

