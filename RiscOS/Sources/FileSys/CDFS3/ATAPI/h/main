/* main.h for ATAPI module */


/* debugging options */

#define  debugging     0
#define  DBMALLOC      0

/* Hardware? */

#ifdef PHOEBE_HARDWARE
#  define  Phoebe        1
#else
#  define  Phoebe        0
#endif

/*
 * The following option, when selected, "watches" the IDE bus during the
 *  execution of individual commands; for details, see the conditonal code
 *  in atapi.c.
 *
 * SETTLE_DOWN is a parameter which determines the minimum watch period for
 *  each phase.
 *
 * The main use of this option is to investigate the behaviour of a new
 *  ATAPI drive.
 */

#define  WATCH             0
#define  SETTLE_DOWN     100   /* number of reads of the ATAPI registers */


/*
 * Standard trace options: include the given string in the system variable
 *  Debug$Debug to cause output to be produced.
 */

#define  T_ENTRY      "AE"   /* trace calls of driver entry point */
#define  T_ERROR      "AF"   /* trace calls of atapi_get_error (..) */
#define  T_IDENTIFY   "AI"   /* trace overall drive identification */
#define  T_IDENTDET   "AJ"   /* trace details of drive identification */
#define  T_LOCK       "AL"   /* trace calls to atapi_(un)lock_bus (..) */
#define  T_PACKET     "AP"   /* trace calls to atapi_packet_command (..) */
#define  T_RESET      "AR"   /* trace calls to atapi_soft_reset (..) */
#define  T_EXIT       "AX"   /* trace returns to CDManager */


/* include standard C definitions */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <ctype.h>

#include "swis.h"
#include "kernel.h"


/* include application definitions */

#include "defines.h"
#include "debug.h"
#include "msgs.h"
#include "dbmalloc.h"
#include "driverops.h"
#include "atapiops.h"
#include "drives.h"


/* directory containing resource files */

#define APPDIR "Resources:$.Resources.ATAPI"


#define  INTERFACE_TYPE  "ATAPI"

#define  C_DRIVER                  0
#define  VERSION_UNDERSTOOD      300

/* 'Supported' bits */

#define  SUPPORTED_COREAUDIO          BIT(0)
#define  SUPPORTED_VOLUME             BIT(1)
#define  SUPPORTED_AUDIOSCAN          BIT(2)
#define  SUPPORTED_MULTISESSION       BIT(3)
#define  SUPPORTED_EJECT              BIT(4)
#define  SUPPORTED_AUDIOREAD          BIT(5)
#define  SUPPORTED_FORM2              BIT(6)
#define  SUPPORTED_CONTINUOUS         BIT(7)
#define  SUPPORTED_RAWREAD            BIT(8)
#define  SUPPORTED_LOCK               BIT(9)
#define  SUPPORTED_SEEK               BIT(10)
#define  SUPPORTED_SUBCHANNEL         BIT(11)
#define  SUPPORTED_STEREOVOLUME       BIT(12)


/* Each IDE bus (hardware interface) is represented by an IDEBusRec */

typedef struct {
    char *commregs;           /* address of ATAPI Command Block Registers */
    char *ctrlregs;           /* address of ATAPI Control Block Registers */
    char *description;        /* physical location: eg "Motherboard" */
} IDEBusRec, *IDEBusPtr;


/* Each ATAPI device is represented by a DriveRec */

typedef struct _drive_rec {
    struct _drive_rec *next;  /* DriveRecs are held in a list */
    DriveInfoRec dib;         /* For registration */
    DriveFeatures *features;  /* Various features the drive has */
    Bool registered:1;        /* TRUE iff drive has been registered */
    unsigned int interface:1; /* 0 - A, 1 - B */
    int device:1;             /* 0 (Master) or 1 (Slave) */
    Bool noIRQafterCMD:1;     /* TRUE unless Interrupt DRQ type device */
    Bool pendingdiscchange:1; /* TRUE when pending "Disc changed" error */
    char *commregs;           /* address of ATAPI Command Block Registers */
    char *ctrlregs;           /* address of ATAPI Control Block Registers */
} DriveRec, *DrivePtr;

extern DrivePtr drivelist;   /* addresses list of known drives */


/* Module allocation base */

#define  ERROR_BASE  0x80e200    /* shared with CDManager */


/* these are the standard CDManager errors */

#define  ERR_DISCCHANGED       (0)
#define  ERR_DRIVEEMPTY        (1)
#define  ERR_DRIVEBUSY         (2)
#define  ERR_DRIVEPROBLEM      (3)    /* use +128 instead */
#define  ERR_BADOPCODE         (4)
#define  ERR_BADADDR           (5)
#define  ERR_WRONGMODE         (6)
#define  ERR_DRAWERLOCKED      (7)
#define  ERR_NOAUDIOOP         (8)
#define  ERR_BUFFERTOOSMALL    (9)


/* these are other errors that may arise */

#define  ERR_UNEXPECTED      (128)
#define  ERR_LOCKTIMEOUT     (129)
#define  ERR_TIMEOUT         (130)
#define  ERR_REQSENSE        (131)
#define  ERR_BADATACODE      (132)
#define  ERR_ATATIMEOUT      (133)
#define  ERR_ATAERROR        (134)

#define  ERR_NOMEM           (255)  /* during initialisation */



#define  Service_CountATAPIDevices    0xb6


/* external variables in main */

extern int **privword;    /* the address of this module's private word */


/* external functions in main */

extern Error * main_initialise (char *cmdtail, int podule, void *pw);
extern Error * main_finalise (Bool fatal, int podule, void *pw);
extern void main_service_call (int number, _kernel_swi_regs *r, void *pw);
