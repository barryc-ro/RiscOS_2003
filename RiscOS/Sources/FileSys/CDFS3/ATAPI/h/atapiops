/* atapiops.h for ATAPI module */


/*
 * ATAPI command and control registers, and their content.
 *
 * Only the registers and fields needed by this driver are defined.
 */

/* offsets from start address of control block registers */

#define  CTRLREG_ALTSTATUS       24   /* alternate status register (R) */


/* offsets from start address of command block registers */

#define  COMMREG_DATA             0   /*  data register (R/W) [- - b2 b1] */
/*
 * Warning - the effect of writing to the data register depends on the
 *  machine architecture ("byte-steered podule" versus "AT space") and in the
 *  former case the mapping for *writing* is [b2 b1 - -]. So it's
 *  different on an A5000 from a RISC PC. Some drivers put the bytes
 *  in top and bottom just to make sure.
 */

#define  COMMREG_ERROR            4   /* error register        (R) */
#define  COMMREG_FEATURES         4   /* features register     (W) */
#define  COMMREG_COUNTLOW        16   /* ls of byte count    (R/W) */
#define  COMMREG_COUNTHIGH       20   /* ms of byte count    (R/W) */
#define  COMMREG_DRIVESELECT     24   /* drive select register (W) */
#define  COMMREG_STATUS          28   /* status register       (R) */
#define  COMMREG_COMMAND         28   /* ATA command register  (W) */

/* status and alternate status registers */

#define  SF_CHECK       BIT(0)  /* error occurred */
#define  SF_DRQ         BIT(3)  /* data request (ready to transfer data) */
#define  SF_DRDY        BIT(6)  /* device ready (ATA protocol only) */
#define  SF_BSY         BIT(7)  /* device busy */

/* error register */

#define  ER_SENSE_SHFT  4       /* top 4 bits are sense key data */

/* drive select register */

#define  DS_DRIVE_SHFT  4                  /* for drive number (0 or 1) */
#define  DS_ALWAYS      BIT(7) | BIT(5)    /* must be set */


/* these values identify data transfer direction */

#define  TR_NONE        0
#define  TR_READ        1     /* from device to host */
#define  TR_WRITE       3     /* from host to device */

/* these are CD-ROM sector sizes in bytes */

#define  RAW_SECTOR_SIZE              2352
#define  MODE1_DATA_SIZE              2048
#define  MODE2_DATA_SIZE              2336
#define  MODE2_FORM1_DATA_SIZE        2048
#define  MODE2_FORM2_DATA_SIZE        2328


/* ATA operation codes */

/*
 * This ATA command is used during device identification only: ATAPI devices
 *  will abort it.
 */

#define  ATA_IDENTIFY_DEVICE    0xec


/*
 * These are the ATA commands which are used by this driver, and which every
 *  every ATAPI device must support.
 */

#define  ATAPI_SOFT_RESET       0x08
#define  ATAPI_PACKET_COMMAND   0xa0
#define  ATAPI_IDENTIFY_DEVICE  0xa1


/*
 * These two bytes are the 'ATAPI signature' which should be found in the
 *  count registers after hardware or software reset.
 */

#define  ATAPI_SIG_HIGH         0xeb
#define  ATAPI_SIG_LOW          0x14


/* 512 bytes are returned by the ATAPI_IDENTIFY_DEVICE command */

#define  MAX_MODEL_ID      40 /* the ATAPI Identify Device command returns
                                 up to 40 characters, and the INQUIRY command
                                 returns an 8-char Vendor and 16-char Product
                                 Identification */

#define  MAX_FIRMWARE_REV   8 /* the ATAPI Identify Device command allows 8
                                 bytes for this field, whereas the INQUIRY
                                 command returns just 4 bytes */

typedef struct {
  /* configuration bytes */
    int rsvd1:5;
    int cmddrqtype:2;
    Bool removable:1;
    int devicetype:5;
    Bool rsvd2:1;
    int protocol:2;
    int rsvd3:16;

    char rsvd[42];
    char firmware[MAX_FIRMWARE_REV];
    char model[MAX_MODEL_ID];
    char rsvd5[418];
} IdentifyDeviceRec, *IdentifyDevicePtr;


/* possible values for cmddrqtype field */

#define  MICROPROCESSOR_DRQ    0
#define  INTERRUPT_DRQ         1
#define  ACCELERATED_DRQ       2



#define  CPKT_SIZE   12     /* size of an ATAPI command packet */


/* ATAPI Packet Command operation codes */

/*
 * Each ATAPI operation code is followed by a definition of its command
 *  packet, and of any associated constants. Definitions of the relevant
 *  parts of any blocks returned are also given.
 */

/*
 * Common field names:
 *
 *  len              -  allocation length in bytes < 256
 *  len1, len0       -  allocation length in bytes < 65536  (len0 is ls)
 *  lba3, lba2, lba1, lba0
 *                   -  logical block address (four bytes, lba0 is ls)
 *  num1, num0       -  logical block count < 65536  (num0 is ls)
 *  num2, num1, num0 -  logical block count (three bytes, num0 is ls)
 */

/* possible values for 'control' bits */
#define  ATAPI_CONTROL_PREEMPHASIS        0x01
#define  ATAPI_CONTROL_ALLOWCOPY          0x02
#define  ATAPI_CONTROL_DATATRACK          0x04

/* possible values for 'audiostatus' fields */
#define  ATAPI_AUDIOSTATUS_INVALID        0x00
#define  ATAPI_AUDIOSTATUS_PLAYING        0x11
#define  ATAPI_AUDIOSTATUS_PAUSED         0x12
#define  ATAPI_AUDIOSTATUS_COMPLETED      0x13
#define  ATAPI_AUDIOSTATUS_STOPPED        0x14
#define  ATAPI_AUDIOSTATUS_NONE           0x15


#define  ATAPI_INQUIRY         0x12

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char len;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} InquiryCpktRec, *InquiryCpktPtr;

typedef struct {
    char rsvd1[8];
    char vendor[8];
    char model[16];
    char firmware[4];
} InquiryBuffRec, *InquiryBuffPtr;


#define  ATAPI_MODESELECT      0x55

typedef struct {
    char opcode;
    char flags;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char len1;
    char len0;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} ModeSelectCpktRec, *ModeSelectCpktPtr;

/* value for flags field */
#define  MODESELECT_FLAGS       0x10   /* don't save page */


#define  ATAPI_MODESENSE       0x5a

typedef struct {
    char opcode;
    char rsvd1;
    char page;    /* always read current values (top two bits zero) */
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char len1;
    char len0;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} ModeSenseCpktRec, *ModeSenseCpktPtr;

/* values for page field */
#define  MODESENSE_ERROR_PAGE         0x01
#define  MODESENSE_PARAMS_PAGE        0x0d
#define  MODESENSE_AUDIO_PAGE         0x0e
#define  MODESENSE_CAPABILITIES_PAGE  0x2a

/* mode parameter header */
typedef struct {
    char len1;
    char len0;
    char rsvd[6];
} ModeBuffHdrRec, *ModeBuffHdrPtr;

/* read error recovery parameters page */
typedef struct {
    ModeBuffHdrRec hdr;
    char page;    /* ignore bit 7 - the "Parameters Savable" bit */
    char len;
    char flags;
    char retry;
    char rsvd[4];
} ModeErrorPageRec, *ModeErrorPagePtr;

/* bits for flags field */
#define  MODE_ERROR_RC         0x10   /* read continuous */

/* CD-ROM parameters page */
typedef struct {
    ModeBuffHdrRec hdr;
    char page;    /* ignore bit 7 - the "Parameters Savable" bit */
    char len;
    char rsvd1;
    char inactive;   /* bottom nybble */
    char rsvd2[4];
} ModeParamsPageRec, *ModeParamsPagePtr;

/* inactivity time multiplier mask */
#define  MODE_PARAMS_INACTIVE_MASK   0x0f

/* Audio control page (nb only interested in volume for two channels) */
typedef struct {
    ModeBuffHdrRec hdr;
    char page;    /* ignore bit 7 - the "Parameters Savable" bit */
    char len;
    char flags;
    char rsvd1[6];
    char leftvol;
    char rsvd2;
    char rightvol;
    char rsvd3[4];
} ModeAudioPageRec, *ModeAudioPagePtr;

/* CD-ROM Capabilities and Mechanical Status Page */
typedef struct {
    ModeBuffHdrRec hdr;
    char page;    /* ignore bit 7 - the "Parameters Savable" bit */
    char len;
    char rsvd1[2];
    char flags1;
    char flags2;
    char flags3;
    char flags4;
    char maxspeed1;   /* in KBytes/second */
    char maxspeed0;
    char rsvd2;
    char vollevels;
    char buffsize1;   /* in KBytes */
    char buffsize2;
    char currspeed1;  /* in KBytes/second */
    char currspeed0;
    char rsvd3[4];
} ModeCapabilitiesPageRec, *ModeCapabilitiesPagePtr;

/* minimum speed is always audio speed */
#define  CDROM_MIN_SPEED      176

/* bits for flags1 field */
#define  MODE_CAPABILITIES_MULTISESSION      0x40
#define  MODE_CAPABILITIES_MODE2FORM2        0x20
#define  MODE_CAPABILITIES_MODE2FORM1        0x10
#define  MODE_CAPABILITIES_AUDIOPLAY         0x01

/* bits for flags2 field */
#define  MODE_CAPABILITIES_AUDIOREAD         0x01

/* bits for flags3 field */
#define  MODE_CAPABILITIES_EJECT             0x08
#define  MODE_CAPABILITIES_LOCKED            0x02
#define  MODE_CAPABILITIES_LOCKABLE          0x01

/* bits for flags4 field */
#define  MODE_CAPABILITIES_SEPARATEVOLUMES   0x01


#define  ATAPI_PAUSERESUME     0x4b

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char flags;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} PauseResumeCpktRec, *PauseResumeCpktPtr;

/* bits for flags field */
#define  PAUSERESUME_RESUME    0x01


#define  ATAPI_PLAYAUDIOMSF    0x47

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char smin;
    char ssec;
    char sfrm;
    char emin;
    char esec;
    char efrm;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} PlayAudioMSFCpktRec, *PlayAudioMSFCpktPtr;


#define  ATAPI_LOCKUNLOCK      0x1e

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char flags;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} LockUnlockCpktRec, *LockUnlockCpktPtr;

/* bits for flags field */
#define  LOCKUNLOCK_LOCK       0x01


#define  ATAPI_READ12          0xa8

typedef struct {
    char opcode;
    char rsvd1;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char num3;
    char num2;
    char num1;
    char num0;
    char rsvd10;
    char rsvd11;
} Read12CpktRec, *Read12CpktPtr;


#define  ATAPI_READCAPACITY    0x25

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} ReadCapacityCpktRec, *ReadCapacityCpktPtr;

typedef struct {
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char rsvd[4];
} ReadCapacityBuffRec, *ReadCapacityBuffPtr;


#define  ATAPI_READCD          0xbe

typedef struct {
    char opcode;
    char type;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char num2;
    char num1;
    char num0;
    char flags;
    char rsvd10;   /* no sub-channel data required */
    char rsvd11;
} ReadCDCpktRec, *ReadCDCpktPtr;

/* shift for 3-bit expected sector type sub-field inside type field ... */
#define  READCD_SECTORTYPE_SHFT      2

/* ... and possible values */
#define  READCD_TYPE_ANY             0
#define  READCD_TYPE_AUDIO           1
#define  READCD_TYPE_MODE1           2
#define  READCD_TYPE_MODE2           3
#define  READCD_TYPE_MODE2_FORM1     4
#define  READCD_TYPE_MODE2_FORM2     5

/* bits for flags field */
#define  READCD_FLAGS_SYNCH        0x80
#define  READCD_FLAGS_SUBHEADER    0x40
#define  READCD_FLAGS_HEADER       0x20
#define  READCD_FLAGS_USERDATA     0x10
#define  READCD_FLAGS_EDCECC       0x08


#define  ATAPI_READHEADER      0x44

typedef struct {
    char opcode;
    char rsvd1;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char rsvd6;
    char len1;
    char len0;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} ReadHeaderCpktRec, *ReadHeaderCpktPtr;

typedef struct {
    char mode;
    char rsvd[3];
    char lba3;
    char lba2;
    char lba1;
    char lba0;
} ReadHeaderBuffRec, *ReadHeaderBuffPtr;


#define  ATAPI_READSUBCHANNEL  0x42

typedef struct {
    char opcode;
    char rsvd1;
    char flags;
    char format;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char len1;
    char len0;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} ReadSubChannelCpktRec, *ReadSubChannelCpktPtr;

/* value for flags field */
#define  READSUBCHANNEL_SUBQ     0x40    /* return sub-channel Q */

/* value for format field */
#define  READSUBCHANNEL_CURRENT  0x01    /* return current position value */

typedef struct {
    char rsvd1;
    char audiostatus;
    char len1;
    char len0;
} ReadSubChannelHdrRec, *ReadSubChannelHdrPtr;

typedef struct {
    char rsvd1;    /* 0x01 => Current Position Format */
    char control;  /* bottom nybble only */
    char track;
    char index;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char rellba3;
    char rellba2;
    char rellba1;
    char rellba0;
} ReadSubChannelCurrPosRec, *ReadSubChannelCurrPosPtr;

typedef struct {
    ReadSubChannelHdrRec hdr;
    ReadSubChannelCurrPosRec info;
} ReadSubChannelBuffRec, *ReadSubChannelBuffPtr;


#define  ATAPI_READTOC         0x43

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char from;   /* first track to return information for */
    char len1;
    char len0;
    char format;
    char rsvd10;
    char rsvd11;
} ReadTocCpktRec, *ReadTocCpktPtr;

/* values for format field */
#define  READTOC_TYPE0         0x00
#define  READTOC_TYPE1         0x40
#define  READTOC_TYPE2         0x80


#define  ATAPI_REQUESTSENSE    0x03

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char len;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} RequestSenseCpktRec, *RequestSenseCpktPtr;

/*
 * The following record is really 18 bytes long.
 *   Use          offsetof (RequestSenseBuffRec, dummy)
 *     instead of   sizeof (RequestSenseBuffRec)
 * when specifying the buffer length to atapi_packet_command (..).
 */
typedef struct {
    char errorcode;   /* ignore top bit */
    char rsvd1;
    char sensekey;    /* bottom nybble */
    char rsvd2[9];
    char asc;         /* additional sense code */
    char ascq;        /* additional sense code qualifier */
    char rsvd3[4];
    char dummy;
} RequestSenseBuffRec, *RequestSenseBuffPtr;

/* mask for error code field */
#define  REQUESTSENSE_ERRORCODE_MASK   0x7f

/* values for error code field */
#define  REQUESTSENSE_NORMALERROR      0x70

/* mask for sensekey field */
#define  REQUESTSENSE_SENSEKEY_MASK    0x0f

/* values for sense key field */
#define  SENSEKEY_NOSENSE         0x0
#define  SENSEKEY_RECOVERED       0x1
#define  SENSEKEY_NOTREADY        0x2
#define  SENSEKEY_MEDIUMERROR     0x3
#define  SENSEKEY_HARDWAREERROR   0x4
#define  SENSEKEY_ILLEGALREQUEST  0x5
#define  SENSEKEY_UNITATTENTION   0x6
#define  SENSEKEY_DATAPROTECT     0x7
#define  SENSEKEY_ABORTEDCOMMAND  0xb
#define  SENSEKEY_MISCOMPARE      0xe

/* values for additional sense code field */
#define  ASC_NOTREADY             0x04
#define  ASC_OUTOFRANGE           0x21
#define  ASC_INVALIDFIELD         0x24
#define  ASC_DISCCHANGED          0x28
#define  ASC_RESET                0x29
#define  ASC_DRIVEEMPTY           0x3a
#define  ASC_LOCKED               0x53
#define  ASC_TOCUNOBTAINABLE      0x57
#define  ASC_ILLEGALMODE          0x64
#define  ASC_PLAYABORTED          0xb9

/* values for additional sense code qualifier field */
#define  ASCQ_BECOMINGREADY       0x01   /* for ASC_NOTREADY */
#define  ASCQ_DRAWERLOCKED        0x02   /* for ASC_LOCKED   */


#define  ATAPI_SCAN            0xba

typedef struct {
    char opcode;
    char flags;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;   /* always LBA format */
    char rsvd10;
    char rsvd11;
} ScanCpktRec, *ScanCpktPtr;

/* bits for flags field */
#define  SCAN_BACKWARDS        0x10


#define  ATAPI_SEEK            0x2b

typedef struct {
    char opcode;
    char rsvd1;
    char lba3;
    char lba2;
    char lba1;
    char lba0;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} SeekCpktRec, *SeekCpktPtr;


#define  ATAPI_SETSPEED        0xbb

typedef struct {
    char opcode;
    char rsvd1;
    char speed1;   /* in Kbytes/second */
    char speed0;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} SetSpeedCpktRec, *SetSpeedCpktPtr;


#define  ATAPI_STOPPLAYSCAN    0x4e

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} StopPlayScanCpktRec, *StopPlayScanCpktPtr;


#define  ATAPI_STARTSTOPUNIT   0x1b

typedef struct {
    char opcode;
    char flags1;
    char rsvd2;
    char rsvd3;
    char flags2;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} StartStopUnitCpktRec, *StartStopUnitCpktPtr;

/* bits for flags1 field */
#define  STARTSTOPUNIT_IMMEDIATE   0x01

/* bits for flags2 field */
#define  STARTSTOPUNIT_START       0x01
#define  STARTSTOPUNIT_LOADEJECT   0x02


#define  ATAPI_TESTUNITREADY   0x00

typedef struct {
    char opcode;
    char rsvd1;
    char rsvd2;
    char rsvd3;
    char rsvd4;
    char rsvd5;
    char rsvd6;
    char rsvd7;
    char rsvd8;
    char rsvd9;
    char rsvd10;
    char rsvd11;
} TestUnitReadyCpktRec, *TestUnitReadyCpktPtr;


