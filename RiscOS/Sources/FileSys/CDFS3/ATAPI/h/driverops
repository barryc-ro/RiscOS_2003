/* driverops.h for ATAPI and CDManager module */


/*
 * Driver Information Block structure: this is the structure that is passed
 *  from the driver to CDManager at registration time.
 */

typedef Error *(*DriveHandler) (int, int, void *);

typedef struct {
    char *majoraddress;      /* eg "Motherboard" */
    char *interfacetype;     /* always "ATAPI" for this driver */
    char *minoraddress;      /* device number: "0" (Master) or "1" (Slave) */
    char *model;             /* eg "SONY CD-ROM CDU76E-S" */
    char *firmware;          /* eg "1.0c" */
} PhysDescRec, *PhysDescPtr;

typedef struct {
    DriveHandler function;           /* pointer to the C entry function */
    int driveid;                     /* internal drive identification */
    unsigned flags;                  /* Zero for C */
    int **pw;                        /* The module's private word address */
    int version;
    unsigned supported;
    int timeout;
    PhysDescRec descr;
} DriveInfoRec, *DriveInfoPtr;


/*
 * This is the service call that causes a driver to register its drives.
 */

#define  Service_CDNewDrivePoll  0xb3

#define  ALL_DRIVES                 1
#define  NEW_DRIVES                 0


/*
 * Each driver operation code is followed by a definition of its parameter
 *  block, and of any associated constants.
 *
 * Conventions:
 *    addr  -  physical sector address
 *    buff  -  address of buffer
 *    len   -  length of buffer in bytes
 */

#define  OP_READTOC            0

typedef struct {
    char *buff;
    int len;
} ReadTocRec, *ReadTocPtr;

typedef struct {
    char len1;
    char len0;
    char firstsession;
    char lastsession;
} ReadToc2HdrRec, *ReadToc2HdrPtr;

#define  TRACK_DESCRIPTOR_SIZE  11

/*
 * Offsets of fields in each 11-byte track descriptor record:
 *  this is not defined as a structure because it's size is
 *  not a multiple of 4.
 */

#define  READTOC_TD_SESSION       0
#define  READTOC_TD_ADRCTRL       1
#define  READTOC_TD_TNO           2
#define  READTOC_TD_POINT         3
#define  READTOC_TD_MIN           4
#define  READTOC_TD_SEC           5
#define  READTOC_TD_FRM           6
#define  READTOC_TD_ZERO          7
#define  READTOC_TD_PMIN          8
#define  READTOC_TD_PSEC          9
#define  READTOC_TD_PFRM         10

/* masks for ADRCTRL field */

#define  READTOC_ADR_MASK      0xf0   /* top nybble */
#define  READTOC_CTRL_MASK     0x0f   /* bottom nybble */
#define  READTOC_DATA_FLAG     0x04   /* data bit in CTRL nybble */

/* ADR value for "standard" track descriptors */

#define  READTOC_TD_NORMAL     0x10


#define  OP_READCD             1

typedef struct {
    union {
      struct {                      /* on entry */
        int rsvd1:2;
        int type:3;
        int rsvd2:26;
        Bool rawread:1;
      } flags;
      int count;                    /* on exit */
    } u;
    int addr;
    int numsectors;
    char *buff;
} ReadCDRec, *ReadCDPtr;

#define  READ_TYPE_ANY              0
#define  READ_TYPE_AUDIO            1
#define  READ_TYPE_MODE1            2
#define  READ_TYPE_MODE2            3
#define  READ_TYPE_MODE2FORM1       4
#define  READ_TYPE_MODE2FORM2       5
#define  READ_TYPE_ISO9660    0x10000


#define  OP_READ2048           2

typedef struct {
    int count;                      /* exit only */
    int addr;
    int numsectors;
    char *buff;
} Read2048Rec, *Read2048Ptr;


#define  OP_GIVESECTORDATAMODE 3

typedef struct {
    union {
        int addr;                   /* on entry */
        int mode;                   /* on exit  */
    } u;
} GiveSectorDataModeRec, *GiveSectorDataModePtr;


#define  OP_ADDRESS            4

typedef struct {                    /* exit only */
    struct {
        int rsvd1:8;
        int audiomode:4;
        int rsvd2:4;
        int track:8;
        int index:8;
    } info;
    int addr;
    int reladdr;
} AddressRec, *AddressPtr;

/* bits in the 'audiomode' field */
#define  AUDIOMODE_DATA_TRACK    0x2


#define  OP_READDISCSIZE       5

typedef struct {
    int size;                       /* exit only */
} ReadDiscSizeRec, *ReadDiscSizePtr;


#define  OP_DRIVESTATUS        6

#define  STATUS_GOOD           0
#define  STATUS_EMPTY          1
#define  STATUS_READYING       2
#define  STATUS_NOTREADY       3


#define  OP_GETDRIVESPEED      7

typedef struct {                    /* exit only */
    int currspeed;
    int minspeed;
    int maxspeed;
} GetDriveSpeedRec, *GetDriveSpeedPtr;


#define  OP_SETDRIVESPEED      8

typedef struct {
    int speed;
} SetDriveSpeedRec, *SetDriveSpeedPtr;


#define  OP_OPENDRAWER         9


#define  OP_CLOSEDRAWER       10


#define  OP_GETLOCKEDSTATUS   11

typedef struct {
    Bool locked;                    /* exit only */
} GetLockedStatusRec, *GetLockedStatusPtr;


#define  OP_LOCKDRIVE         12


#define  OP_UNLOCKDRIVE       13


#define  OP_SEEK              14

typedef struct {
    int addr;
} SeekRec, *SeekPtr;


#define  OP_GETVOLUME         15
#define  OP_SETVOLUME         16

typedef struct {
    int left;
    int right;
} VolumeRec, *VolumePtr;


#define  OP_PLAY              17

typedef struct {
    int startaddr;
    int stopaddr;
} PlayRec, *PlayPtr;

#define  PLAY_FROM_CURRENT_POS  (-1)


#define  OP_STOP              18


#define  OP_PAUSE             19


#define  OP_RESUME            20


#define  OP_AUDIOSCANFORWARD  21
#define  OP_AUDIOSCANREVERSE  22

typedef struct {
    int addr;
} AudioScanRec, *AudioScanPtr;


#define  OP_AUDIOSTATUS       23

typedef struct {
    int status;                     /* exit only */
} AudioStatusRec, *AudioStatusPtr;

#define  AUDIO_NONE       0
#define  AUDIO_PLAYING    1
#define  AUDIO_PAUSED     2


#define  OP_CALLDEVICEDRIVER  24

typedef struct {
    union {                         /* on entry */
      struct {
        int transfer:2;
        Bool otheratapi:1;
        unsigned rsvd:29;
      } flags;
      int count;                    /* on exit */
    } u;
    char *buff;
    int len;
    union {
      char *cpkt;                   /* if !otheratapi */
      int ATAcode;                  /* if otheratapi  */
    } v;
    int cpktlen;
} CallDeviceDriverRec, *CallDeviceDriverPtr;

#define OP_SETRELIABILITY     25

typedef struct _reliability_rec {
   unsigned int reliability;
} ReliabilityRec, *ReliabilityPtr;

#define RELIABILITY_CONTINUOUS (1U<<31)
