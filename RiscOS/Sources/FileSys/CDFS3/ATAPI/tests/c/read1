/* read1:  initial CD read test and performance measurement */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <ctype.h>

#include "swis.h"
#include "kernel.h"

typedef int Bool;
#define TRUE  1
#define FALSE 0

#define BIT(n) (((unsigned int) 1) << (n))

#define I0 _IN(0)
#define I1 _IN(1)
#define I2 _IN(2)
#define I3 _IN(3)
#define I4 _IN(4)
#define I5 _IN(5)
#define I6 _IN(6)
#define I7 _IN(7)
#define I8 _IN(8)
#define I9 _IN(9)

#define O0 _OUT(0)
#define O1 _OUT(1)
#define O2 _OUT(2)
#define O3 _OUT(3)
#define O4 _OUT(4)
#define O5 _OUT(5)
#define O6 _OUT(6)
#define O7 _OUT(7)
#define O8 _OUT(8)
#define O9 _OUT(9)



#define  CDMgr_CallDriver  0x4b77f
#define  CDMgr_PollDrives  0x4b77e


#define  ANY         0
#define  AUDIO       1
#define  MODE1       2
#define  MODE2       3
#define  MODE2FORM1  4
#define  MODE2FORM2  5


static int read_sectors (int from, int num, int type, Bool raw, char *buff)
{
    int pblk[4];
    int res;

    pblk[0] = type << 2;
    if (raw)
        pblk[0] |= BIT(31);
    pblk[1] = from;
    pblk[2] = num;
    pblk[3] = (int) buff;

    _swix (CDMgr_CallDriver, I0|I1|I2|I3|O0, 0, 0, 1, (char *) pblk, &res);
    if (res != 0)
        printf ("R0 -> %d on return from ReadCD\n", * (int *)res);

    return pblk[0];
}


int main ()
{
    int i;
    char *buff;
    int sector;
    int t1, t2;
    int n;

    _swix (CDMgr_PollDrives, I0, 0);

    buff = malloc (32*2352);

    sector = 16;

    _swix (OS_ReadMonotonicTime, O0, &t1);
    for (i = 0; i < 2048; i++)
    {
        n = read_sectors (sector, 1, MODE1, FALSE, buff);
        if (n != 2048)
            printf ("Expected 2048 bytes, found %d from sector %d\n", n, sector);
        sector += 1;
    }
    _swix (OS_ReadMonotonicTime, O0, &t2);

    printf ("Time taken = %d centiseconds; transfer rate = %dKb/s\n",
             t2 - t1, (2048*2*100)/(t2 - t1));

    return 0;
}
