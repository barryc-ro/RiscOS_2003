/* main.c for CDManager module */


#include "main.h"
#include "resources.h"
#include "swicode.h"



char swiinfo [] = {
SWI_INFO_VERSION,
SWI_INFO_GETSUPPORTED,
SWI_INFO_READTOC,
SWI_INFO_DRIVEOP,
SWI_INFO_READDATA,
SWI_INFO_AUDIOOP,
SWI_INFO_CONVERTBLOCKTOMSF,
SWI_INFO_CONVERTMSFTOBLOCK,
SWI_INFO_MISCOP,
SWI_INFO_CALLDEVICEDRIVER,
SWI_INFO_REGISTRATION
};



/*
 * Returns NULL if initialisation succeeds, otherwise a pointer to an
 *  appropriate error block.
 *
 * On entry, pw addresses the word that addresses a block of RMA in which the
 *  module's statics have been placed.
 *
 */

Error * main_initialise (char *cmdtail, int podule, void *pw)
{
    IGNORE (cmdtail);
    IGNORE (podule);
    IGNORE (pw);

#ifdef TINYSTUBS      /* statics must be (re)initialised here if necessary */

    /* no drives registered so far */
    drivelist = NULL;
    currdrive = NULL;

#endif

    /* register Messages file with ResourceFS */
    ER (_swix (ResourceFS_RegisterFiles, I0, resources));

    /* open messages file */
    ER (msgs_open_file (APPDIR".Messages"));

    /* set error base for CDManager */
    msgs_set_error_base (ERROR_BASE);

    return NULL;
}


/*
 * Returns NULL if ready to be killed, otherwise a suitable error is
 *  returned.
 *
 * 'fatal' is FALSE if this is a temporary closedown - as a result of a call
 *  of RMTidy, for example - in which case the module will be relocated and
 *  subsequently reinitialised.
 */

Error * main_finalise (Bool fatal, int podule, void *pw)
{
    IGNORE (fatal);    /* behaviour is the same even if resurrection is
                          imminent */
    IGNORE (podule);
    IGNORE (pw);

    /* close messages file - ignore errors */
    msgs_close_file ();

    /* deregister Messages file from ResourceFS - ignore errors */
    _swix (ResourceFS_DeregisterFiles, I0, resources);

    return NULL;
}


/*
 * Outputs string avoiding stdout - since this does not work well with
 *  TinyStubs.
 */

static void out_string (char *s)
{
    _swix (OS_Write0, I0, s);

    return;
}


/*
 * Called from main_commands (..) to list information about the given drive
 */

static Error * list_info (DrivePtr drive)
{
    char s[80];
    char *format;

    format = msgs_lookup ("InfoFormat");

    sprintf (s, format,
                drive->drivenum,
                drive->dib->descr.model,
                drive->dib->descr.firmware,
                drive->dib->descr.majoraddress,
                drive->dib->descr.interfacetype,
                drive->dib->descr.minoraddress);
    strcat (s, "\r\n");
    out_string (s);

    return NULL;
}


/*
 * Called - either directly or indirectly from main_commands(..) - to unlock
 *  logical drive 'drivenum'.
 */

static Error * unlock_drive (int drivenum)
{
    return _swix (SWI_BASE + SWI_DRIVEOP, I0|I1, RC_UNLOCKDRIVE, drivenum);
}


/*
 * This function is called to process a command.
 *
 * On entry:
 *
 *    args addresses the remainder of the command line, terminated by a
 *     control character (ie do not assume zero termination); this string
 *     must not be overwritten.
 *
 *    argc is a count of the number of arguments: an argument is a sequence
 *     of characters terminated by a space outside of " ... ".
 *
 *    comm is the command's number; this module implements these commands:
 *
 *        CDDevices                    -   0
 *        CDUnlock [<logical drive>]   -   1
 */

Error * main_commands (char *args, int argc, int comm, void *pw)
{
    DrivePtr drive;
    char *str;

    switch (comm)
    {
    case 0:  /* CDDevices */

        if (!drivelist)
        {
            str = msgs_lookup ("NoDrives");
            out_string (str);
            out_string ("\r\n");
        }
        else
        {
            /* output header line */
            str = msgs_lookup ("InfoHdr");
            out_string (str);
            out_string ("\r\n");

            /* output info line for each registered drive */
            drive = drivelist;
            while (drive)
            {
                list_info (drive);
                drive = drive->next;
            }
        }

        return NULL;

    case 1:  /* CDUnlock [<logical drive>] */
        if (argc == 0)   /* try to unlock every drive */
        {
            drive = drivelist;
            while (drive)
            {
                Error *err = unlock_drive (drive->drivenum);

                if (err)
                {
                    char s[20];

                    str = msgs_lookup ("Drive");
                    sprintf (s, str, drive->drivenum);
                    out_string (s);
                    out_string (err->errmess);
                    out_string ("\r\n");
                }

                drive = drive->next;
            }

            return NULL;
        }

        /* otherwise, argc must equal 1 */
        {
            int drivenum = 0;

            while (*args > 32)
            {
                if (*args >= '0' && *args <= '9')
                    drivenum = drivenum * 10 + (*args - '0');
                else
                    return msgs_make_error (ERR_BADSYNTAX);
                args++;
            }

            return unlock_drive (drivenum);
        }
    }

    return NULL;
}


/*
 * This function is called to implement a SWI.
 *
 * On entry:
 *
 *    swinum is a value between 0 and 63 which identifies the SWI.
 *
 *    r->r[0] ... r->r[9] are the values of the registers R0 to R9 when the
 *     SWI was called.
 *
 * On exit:
 *
 *    r->r[0] ... r->r[9] must be set to the values to be returned to the
 *     caller in the corresponding registers.
 *
 * The result is NULL (no error) or the address of an error block.
 */

Error * main_swis (int swinum, _kernel_swi_regs *r, void *pw)
{
    DrivePtr drive;
    char info;
    char rc = 0;
    Error *err;

    IGNORE (pw);

DEBUG debug_output (T_SWIENTRY,
      "CDMgr SWI %d called: R0 = &%x, R1 = %d, R2 = %d\n",
      swinum, r->r[0], r->r[1], r->r[2]);


#if ATAPITESTVERSION
    /* get these out of the way first of all */
    switch (swinum)
    {
    case SWI_POLLDRIVES:
        return swicode_polldrives (r->r[0]);

    case SWI_CALLDRIVER:
        return swicode_calldriver (r->r[0], r->r[1], r->r[2],
                                    (int *) r->r[3]);
    }
#endif


DEBUG debug_output (T_DECODE, "SWI %d ", swinum);

    /* return error if SWI number is out of range */
    if (swinum > SWI_MAX)
    {

DEBUG debug_output (T_DECODE, "- out of range\n");

        return msgs_make_error (ERR_BADSWI + PROG_ERR, swinum + SWI_BASE);
    }

    /* lookup info about SWI register structure */
    info = swiinfo [swinum];

    /* check any reason code is in range */
    {
        char maxrc = info & INFO_MAX_RC;

        if (maxrc > 0)
        {
            rc = r->r[0] & SWI_RC_MASK;

DEBUG debug_output (T_DECODE, "reason code %d ", rc);

            if (rc > maxrc)
            {

DEBUG debug_output (T_DECODE, "is out of range\n");

                return msgs_make_error (ERR_BADRC + PROG_ERR, rc,
                                                      swinum + SWI_BASE);
            }
        }
    }

DEBUG debug_output (T_DECODE, "%s%s\n",
            info & INFO_HAS_DISC ? "has disc and " : "",
            info & INFO_HAS_DRIVE ? "has drive" : "");

    /* check any drive number is in range */
    if ((info & INFO_HAS_DRIVE) &&               /* there's one exception! */
        !(swinum == SWI_DRIVEOP && rc == RC_ENUMERATEDRIVES))
    {
        drive = swicode_lookup_drive (r->r[1]);

        if (!drive)
            return msgs_make_error (ERR_DRIVENOTKNOWN + PROG_ERR);

        /* check any sequence number is valid */
        if (info & INFO_HAS_DISC)
        {
            if (r->r[2] != drive->seq)
                return msgs_make_error (ERR_DISCCHANGED);
        }
    }


    /*
     * Execute the operation.
     *
     * If the "Disc changed" error is returned, increment the sequence
     *  number associated with the drive, and, if the operation did not
     *  require a specific disc, try again.
     */

  reissue:
    err = swicode_execute (drive, swinum, rc, r);

    if (err)
    {
        char errnum = err->errnum;   /* just the bottom byte */

        if (errnum == ERR_DISCCHANGED)
        {
            update_seq (drive);

            if (!(info & INFO_HAS_DISC))
            {

DEBUG debug_output (T_SWIDETAILS,
      "Retrying operation after 'Disc changed' error\n");

                goto reissue;
            }
        }

        /* supply errors in the range 0 to 127 with text */
        if (errnum < 128)
            err = msgs_make_error (errnum + PROG_ERR);
    }


    return err;
}
