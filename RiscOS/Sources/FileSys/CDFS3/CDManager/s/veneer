
        AREA |C$$code|, CODE, READONLY


        EXPORT  asm_call_driver


; This is the veneer code which CDManager calls to enter a driver; it is
;  called as:
;
;     Error * asm_call_driver (
;       DriverInfoPtr dib,
;       int opcode,
;       int *params
;     );
;


; Driver Information Block Header

DIB_Entry        *  0
DIB_DriveId      *  4
DIB_Flags        *  8
DIB_Special      * 12


; On entry, the following registers are set up:
;
;   a1 = address of driver information block
;   a2 = opcode
;   a3 = params - the address of the parameter block
;

        ALIGN

asm_call_driver

    LDR     ip, [a1, #DIB_Flags]    ; choose appropriate veneer
    MOVS    ip, ip
    BEQ     C_Call


; Veneer to call Assembler driver

A_Call

    MOV     a4, a1
    LDR     a1, [a4, #DIB_DriveId] ; R0 = driveid
    LDR     ip, [a4, #DIB_Special] ; R12 = r12
    LDR     pc, [a4, #DIB_Entry]


; Veneer to call C driver

C_Call

    STMFD   sp!, {v1, v2, lr}      ; other regs preserved by caller or driver

; Set up relocation offsets for driver module

    SUB     sl, sl, #540           ; sl now addresses base of supervsr stack

    LDMIA   sl, {v1, v2}           ; preserve reloc offsets for this module

    LDR     ip, [a1, #DIB_Special] ; ip = address of driver private word
    LDR     ip, [ip]               ; ip = address of driver workspace

    LDMIB   ip, {ip, lr}           ; load driver reloc offsets to ip, lr
    STMIA   sl, {ip, lr}           ; and store at base of supervisor stack

    ADD     sl, sl, #540           ; restore value of sl

    MOV     ip, a1
    LDR     a1, [ip, #DIB_DriveId] ; a1 = driveid; other params already set

    MOV     lr, pc                 ; Call driver C function
    LDR     pc, [ip, #DIB_Entry]

    SUB     sl, sl, #540           ; restore reloc offsets for this module
    STMIA   sl, {v1, v2}
    ADD     sl, sl, #540

    [ {CONFIG}=26
    LDMFD   sp!, {v1, v2, pc}^     ; restore and return
    |
    LDMFD   sp!, {v1, v2, pc}      ; restore and return
    ]

    END
