/* main.h for CDManager module */


/*
 * Set this option to 1 only if you wish to create a version of the module
 *  which includes the SWIs CDMgr_PollDrives and CDMgr_CallDriver; these
 *  are used to test the ATAPI driver.
 */

#define  ATAPITESTVERSION   0


/* debugging options */

#define  debugging     0
#define  DBMALLOC      0


/*
 * Standard trace options: include the given string in the system variable
 *  Debug$Debug to cause output to be produced.
 */

#define  T_REGISTER      "MR"   /* trace calls of CDMgr_Registration */
#define  T_DECODE        "MD"   /* trace SWI "decoding" */
#define  T_SWIENTRY      "ME"   /* trace SWI calls */
#define  T_SWIDETAILS    "MF"   /* trace individual entry and exit details */


/* include standard C definitions */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <ctype.h>

#include "swis.h"
#include "kernel.h"


/* include application definitions */

#include "defines.h"
#include "debug.h"
#include "msgs.h"
#include "dbmalloc.h"
#include "driverops.h"



/*
 * Each DriveRec contains information about a registered logical drive.
 */

typedef struct _driverec {
    struct _driverec *next;
    int drivenum;
    DriveInfoPtr dib;
    unsigned int flags;
    int seq;
    int TOCsize;         /* 0 => this and following fields are invalid */
    char firsttrack;
    char lasttrack;
    char firstsession;
    char lastsession;
} DriveRec, *DrivePtr;

#define DRIVEFLAGS_CONTINUOUS (1U<<31)

/*
 * The drive records for each registered logical drive are linked together
 *  in a list addressed by 'drivelist'. They are held in increasing order of
 *  logical drive number ('drivenum' field) so that it is easy to find the
 *  first available logical number when registering a new drive.
 *
 * 'currdrive' is either NULL or addresses the most-recently referenced
 *  DriveRec; this is used to speed up the translation from logical drive
 *  number to DriveRec.
 */

extern DrivePtr drivelist;
extern DrivePtr currdrive;


/* Module allocation bases */

#define  SWI_BASE    0x04b740
#define  ERROR_BASE  0x80e200


/* offset of a module's help string offset */
#define  HELP_STRING_OFFSET    0x14


/* these are the standard CDManager errors */

#define  ERR_DISCCHANGED       (0)
#define  ERR_DRIVEEMPTY        (1)
#define  ERR_DRIVEBUSY         (2)
#define  ERR_DRIVEPROBLEM      (3)
#define  ERR_BADOPCODE         (4)
#define  ERR_BADADDR           (5)
#define  ERR_WRONGMODE         (6)
#define  ERR_DRAWERLOCKED      (7)
#define  ERR_NOAUDIOOP         (8)
#define  ERR_BUFFERTOOSMALL    (9)
#define  ERR_DRIVENOTKNOWN     (10)
#define  ERR_TRACKOUTOFRANGE   (11)
#define  ERR_VALUEOUTOFRANGE   (12)
#define  ERR_BADTIMECODE       (13)
#define  ERR_BADDRIVER         (14)


#define  ERR_BADSWI            (255)
#define  ERR_BADRC             (254)
#define  ERR_NOMEM             (253)
#define  ERR_BADSYNTAX         (252)


/* directory containing resource files */

#define APPDIR "Resources:$.Resources.CDManager"


/* SWIs defined here */

#define  SWI_VERSION            0
#define  SWI_GETSUPPORTED       1
#define  SWI_READTOC            2
#define  SWI_DRIVEOP            3
#define  SWI_READDATA           4
#define  SWI_AUDIOOP            5
#define  SWI_CONVERTBLOCKTOMSF  6
#define  SWI_CONVERTMSFTOBLOCK  7
#define  SWI_MISCOP             8
#define  SWI_CALLDEVICEDRIVER   9
#define  SWI_REGISTRATION      10

#define  SWI_MAX               10

#if ATAPITESTVERSION
#define  SWI_POLLDRIVES        62
#define  SWI_CALLDRIVER        63
#endif


/* Reason codes for CDMgr_DriveOp */

#define  RC_GETSEQUENCENUMBER   0
#define  RC_GETPHYSICALLOCATION 1
#define  RC_DRIVESTATUS         2
#define  RC_GETDRIVESPEED       3
#define  RC_SETDRIVESPEED       4
#define  RC_GETVOLUME           5
#define  RC_SETVOLUME           6
#define  RC_OPENDRAWER          7
#define  RC_CLOSEDRAWER         8
#define  RC_GETLOCKEDSTATUS     9
#define  RC_LOCKDRIVE          10
#define  RC_UNLOCKDRIVE        11
#define  RC_ENUMERATEDRIVES    12
#define  RC_BUSYTIMEOUT        13

#define  RC_DRIVEOP_MAX        13


/* Reason codes for CDMgr_ReadData */

#define  RC_READUSERDATA        0
#define  RC_READRAWDATA         1

#define  RC_READDATA_MAX        1


/* Reason codes for CDMgr_AudioOp */

#define  RC_PLAYFROMADDRESS     0
#define  RC_PLAYTRACKS          1
#define  RC_STOP                2
#define  RC_PAUSE               3
#define  RC_RESUME              4
#define  RC_AUDIOSCANFORWARD    5
#define  RC_AUDIOSCANREVERSE    6
#define  RC_AUDIOSTATUS         7

#define  RC_AUDIOOP_MAX         7


/* Reason codes for CDMgr_MiscOp */

#define  RC_WHICHDISC           0
#define  RC_GIVESECTORDATAMODE  1
#define  RC_SEEK                2
#define  RC_ADDRESS             3

#define  RC_MISCOP_MAX          3


#define  SWI_RC_MASK         0xff


/*
 * The swiinfo table has one byte per SWI containing the number of reason
 *  codes, and flags indicating whether R2 is a sequence number and/or R1
 *  is a drive number.
 *
 *  Bits 0 to 4 give the maximum reason code for the SWI (so zero means that
 *   the SWI has no reason codes). The reason code will be in the bottom
 *   byte of R0 on entry.
 *  Bit 5 is reserved.
 *  Bit 6 is set if R1 contains a drive number on entry.
 *  Bit 7 is set if R2 contains a sequence number on entry.
 */

extern char swiinfo [];

#define  INFO_MAX_RC          0x1f
#define  INFO_HAS_DRIVE       0x40
#define  INFO_HAS_DISC        0x80
#define  INFO_HAS_BOTH        0xc0

/* These are the values for the swiinfo[] bytes */

#define  SWI_INFO_VERSION               0
#define  SWI_INFO_GETSUPPORTED          INFO_HAS_DRIVE
#define  SWI_INFO_READTOC               INFO_HAS_BOTH
#define  SWI_INFO_DRIVEOP               INFO_HAS_DRIVE + RC_DRIVEOP_MAX
#define  SWI_INFO_READDATA              INFO_HAS_BOTH + RC_READDATA_MAX
#define  SWI_INFO_AUDIOOP               INFO_HAS_BOTH + RC_AUDIOOP_MAX
#define  SWI_INFO_CONVERTBLOCKTOMSF     0
#define  SWI_INFO_CONVERTMSFTOBLOCK     0
#define  SWI_INFO_MISCOP                INFO_HAS_BOTH + RC_MISCOP_MAX
#define  SWI_INFO_CALLDEVICEDRIVER      INFO_HAS_DRIVE
#define  SWI_INFO_REGISTRATION          0


/* description of CDMgr_ReadTOC SWI buffer and flags */

#define  READTOC_TRACKS_FLAG       BIT(31)
#define  READTOC_SESSIONS_FLAG     BIT(30)

typedef struct {
    int discsize;
    int disctype;
    int firsttrack;
    int lasttrack;
    int firstsession;
    int lastsession;
} ReadTocBuffHdrRec, *ReadTocBuffHdrPtr;

typedef struct {
    int startaddr;
    int audiomode;
} ReadTocBuffTrackRec, *ReadTocBuffTrackPtr;

typedef struct {
    int firsttrack;
} ReadTocBuffSessionRec, *ReadTocBuffSessionPtr;

/* macro to convert BCD to binary */

#define  bcd_to_bin(x)   ((((x) >> 4) * 10) + ((x) & 0xf))


/* flag for CDMgr_DriveOp, GetDriveSpeed and SetDriveSpeed */

#define  DRIVESPEED_RAW_FLAG       BIT(31)

/* macros to convert between percentage and raw drive speed formats */

#define  raw_to_percent(s, max)  (((s) * 100 + (max) / 2) / (max))
#define  percent_to_raw(p, max)  (((p) * (max) + 50) / 100)


/* flag for CDMgr_DriveOp, SetVolume */

#define  VOLUME_STEREO_FLAG        BIT(31)


/* For Read calls */

#define  READ_CONTINUOUS_FLAG      BIT(31)

/* special value for CDMgr_AudioOp, PlayFromAddress and PlayTracks */

#define  PLAY_DEFAULT              (-1)


/* flags for CDMgr_ConvertBlockToMSF and CDMgr_ConvertMSFToBlock */

#define  CONVERT_TIMECODE_FORMAT   BIT(31)
#define  EXTENDED_TIMECODE_FORMAT  BIT(2)

/* macros to convert to/from TimeCode format */

#define  to_timecode(h, m, s, f) (((h)<<26)+((m)<<20)+((s)<<14)+((f)<<3)+2);
#define  from_timecode(t) (((((t)>>26)&0x3f)*60 + (((t)>>20)&0x3f))*60 +    \
                           (((t)>>14)&0x3f))*75 + (((t)>>3)&0x7ff)


/* macros to initialise and update sequence number for a drive */

#define  init_seq(drive)    (drive)->seq = 0; (drive)->TOCsize = 0;/*; (drive)->flags = 0*/
#define  update_seq(drive)  (drive)->seq++; (drive)->TOCsize = 0


/* external functions in main */

extern Error * main_initialise (char *cmdtail, int podule, void *pw);
extern Error * main_finalise (Bool fatal, int podule, void *pw);
extern Error * main_swis (int swinum, _kernel_swi_regs *r, void *pw);
