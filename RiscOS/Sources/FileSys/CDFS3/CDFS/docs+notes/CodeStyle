File:    CodeStyle
Purpose: C Coding Style
Author:  Timothy Roddis
History:  05-Apr-94: SHunt
          25-Oct-95: TGR: created from MChallis modified copy of SHunt's
                          document
          29-Nov-95: TGR: clarifications and corrections incorporated

Files
-----

All files begin with a header in the following format:

/* File:    header.h
 * Purpose: A header file
 * Author:  C Coder
 * History: 01-Jan-00: CRC: created
 */

or:

; File:    ass.s
; Purpose: Donkey work
; Author:  A Hacker
; History: 01-Jan-00: ACH: created


Header files
------------

Each C source file has a header file with the same name.  This
contains all externally-visible typedefs, structs, unions, #defines
and extern procedure declarations.  Typedefs, structs, unions and
#defines that are private are in the C file.

Naming conventions
------------------

Functions:
    lowercase letters, most word breaks marked with underscores, the first
    word is usually a verb.
Variable names:
    lowercase letters and underscores, with  uppercase letters occasionally
    used where an abbreviation is wanted, eg. "componentID". The first word
    of a variable name should usually not be a verb.
Struct and union tags:
    as for variable names
Typedefs and enum tags:
    mixed case starting with a capital letter.  Word breaks marked
    with embedded capitals.
#defines:
    capital followed by mixed case letters, fundamental word breaks
    marked with underscores and all word breaks marked by capitalisation.
Macros:
    capital M followed by underscore followed by a name as for functions

All extern procedure names start with the name of the C file that they
are defined in, followed by an underscore and the rest of the name.
Static procedures are not named thus, they are given whatever names I
fancy. 

Indentation and layout
----------------------

I use 3 spaces of indentation per level, and opening curly brackets occupy
the same line as the statement preceding them:

int fact (int n)
{
   if (n > 2) {
      return n * fact (n - 1);
   } else {
      return n;
   }
}


Case labels occupy the next indentation level from the "switch" keyword:-

    switch (n) {
       case 1:
       {
           blah ();
           break;
       }
       case 3:
       {
           blahblah ();
           break;
       }
    }

I surround binary operators with whitespace, except for "dot" and
"arrow". I put a space before the round brackets of a function
definition or call but I don't put a space before the square brackets
of an array selection.

Structs
-------

typedef struct {
    int a;
    char b[SIZE];
} SomeStrangelyNamedRec, *SomeStrangelyNamedPtr;

The "Rec" suffix is just to denote a record. The "Ptr" suffix is
just to reduce the number of asterisks in the code.

If the struct needs to refer to itself I use:-

typedef struct _some_strangely_named_rec {
    int a;
    char b[SIZE];
    struct _some_strangely_named_rec *next;
} SomeStrangelyNamedRec, *SomeStrangelyNamedPtr;


Comments
--------

One block comment at the start of each source file.  One comment
at the start of each function saying what it does.  Comments within
functions are either aligned with the current indentation level,
or else just hang on the right of a line of code.

The comment will ideally describe each parameter, the result, any
required entry conditions and the exit conditions.
