/* File:    fname.c
 * Purpose: Filename functions for CDFS
 * Author:  Timothy Roddis
 * History: 16-Oct-95: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Commonlib headers */

#include "dbmalloc.h"
#include "debug.h"
#include "defines.h"

/* Local headers */

#include "main.h"
#include "fname.h"

/* Space, ' ' and fullstop, '.' are treated differently and hence do not appear in the following */

static char fname_fs_illegal_chars[] = {':','*','#','$','&','@','^','%','\\','\"', '<', '>', 0x7f};

static int typemap_extension_to_filetype (char *ext, unsigned int len);


/* Returns the first component in string pathname (delimited by '.' or '\0')
 * This makes extensive use of library routines
 *
 * ENTRY:
 *     pathname is the source string (a pathname tail)
 *     component is a buffer, length max_length
 *
 * EXIT:
 *     component contains a component string which will have been truncated if it exceeded
 *      max_length (guaranteed properly terminated, though).
 *     returns no. of characters from beginning of pathname given to the delimiter or zero
 *      for failure
 *
 * The documentation for strcspn is not very good. In particular observed behaviour is that
 * if the character(s) do not occur in the string, the 'segment length' is the same as strlen
 * of that string.
 *   If the full string would have overrun the buffer, the amount by which it would have
 * overrun is returned.
 *
 */

int fname_get_path_component (char *component, char *pathname, int max_length) {

   int index;

   index = strcspn (pathname, FS_DirectoryDelimiterString);

   if (!max_length) return index;

   index = MIN (max_length - 1, index);

   if (!index) return 0;

   strncpy (component, pathname, index);

   component[index] = '\0'; /* Just to make sure it's terminated */

   return index;
}

/* filename conversion routine
 *
 * on entry:
 *    fsname is the buffer to put the fileswitch compatible name
 *    isoname is the ISO 9660 discname
 *    len
 *    associated indicates that this file is an associated file (if set)
 *    pling indicates that this file is a RISC OS ! (special) file is set
 *
 * This function assumes that you have already defined space for fsname and that this space
 * is big enough to hold the full length of the filename. It is suggested that the area
 * reserved for fsname should be:
 *    length of the isoname string (including terminator) + (associated) ? 1 : 0
 */

int fname_conv (char *fsname, char *isoname, int len, Bool associated, Bool pling) {


   int   i    = 0,
         type = FS_FileType_NotFound,
         index = 0;

   /* First deal with special, pling files & applications */

   if (isoname[0] == CDFS_MapCharToPling && pling) {
      fsname[i++] = '!';
   }
   while (i < len && isoname[i] && isoname[i] != ISO9660_DirRec_Separator2) {

      if (isoname[i] == ISO9660_DirRec_Separator1) index = i + 1;

      fsname[i] = fname_map(isoname[i]);
      i++;
   }
   if (index) {
      if (isoname[index] == ISO9660_DirRec_Separator2 || index == len) {
         fsname[index - 1] = '\0';
      } else {
         type = typemap_extension_to_filetype (isoname + index, len - index);
      }
   }
   if (i < len && isoname[i] == ISO9660_DirRec_Separator2 && (isoname[i+1] != '1')) {
      while (i <= len && isoname[i]) {
         fsname[i] = isoname[i];
         i++;
      }
   }
   if (associated) fsname[i++] = '!';

   fsname[i] = '\0';

   return type;
}

/* Maps characters in an ISO 9660 style filename to a RISC OS style filename
 * NB: Many characters are illegal in ISO 9660, but that hasn't actually
 * stopped anyone using them.
 *
 * on entry:
 *    takes the raw character from the CD-ROM
 * on exit:
 *    returns a filings system safe character
 */

char fname_map (char isochar) {


   int  i;

   if (isochar == ISO9660_DirRec_Separator1)
      return CDFS_MapSeparator1ToChar;

   if (isochar == ' ')
      return CDFS_MapSpaceToChar;

   for (i=0; i<sizeof fname_fs_illegal_chars;i++) {
      if (isochar == fname_fs_illegal_chars[i])
         return CDFS_MapIllegalToChar;
   }
   return isochar;
}


/* Coverts an ISO 9660 style discname (length 32, padded with spaces) to a FileSwitch
 * compatible one.
 *
 * ON ENTRY:
 *    buffer: destination buffer for fileswitchified discname (canonical)
 *    iso_discname: the discname in iso9660 format
 *    buffer_len: the length of the buffer supplied, must be greater than 3
 * ON EXIT:
 *    returns the number of bytes the buffer was overrun by or zero for success
 */

int fname_discname_conv (char *buffer, char *iso_discname, int buffer_len) {

   int end,j,max_pos;

   for (end = ISO9660_PVD_VolumeIdentifierLength-1; end != -1 && iso_discname[end] <= ' '; end--) ;

   /* length of string is end + 1 _without_ terminator */

   if (end == -1 || buffer_len <= 3) {
      *buffer = 0; /* Signals faulty disc or short buffer */
      return -1;
   }
   max_pos = MIN (end, buffer_len-1); /* Maximum (filled) position in buffer is at offset buffer_len - 1 */

   if (iso_discname[0] != ' ' && isdigit(iso_discname[0])
       && (iso_discname[1] == ' ' || isdigit(iso_discname[1]) && iso_discname[2] == ' ') ) {

      DEBUG debug_output ("n", "CDFS: numeric discname", iso_discname);

      *buffer = CDFS_PrefixToNumericalDiscname;
      buffer[1] = iso_discname[0];
      if (iso_discname[1] != ' ') {
         buffer[2] = iso_discname[1];
         if (iso_discname[2] != ' ') {
            buffer[3] = iso_discname[2];
         } else {
            buffer[3] = 0;
         }
      } else {
         buffer[2] = 0;
      }
      max_pos++;
      DEBUG debug_output ("n", " -> \"%s\"\n", buffer);
   } else {
      for (j = max_pos; j != -1 ; j--) {
         buffer[j] = fname_map(iso_discname[j]);
      }
      if (buffer_len > max_pos + 1) buffer[max_pos + 1] = 0;
   }
   return (end>=buffer_len?end+1-buffer_len:0);
}

/* This function has exactly the same syntax & semantics as strcmp except with one subtle
 * difference: this is case insensitive.
 *
 * ENTRY: cs, ct are the strings to be compared
 * EXIT:  0 if string cs is the same as ct (case insensitive), else not nought
 *
 */

int fname_strcmp (char *cs, char *ct) {

   int diff;

   do {
      diff = toupper(*cs) - toupper(*ct);
      if (diff) return diff;
   } while (*ct++ && *cs++);

   return 0;
}

static int typemap_extension_to_filetype (char *ext, unsigned int len) {

   int              i;
   unsigned int     filetype;
   char             extension[4], *ptr;
   _kernel_oserror *e;
   static struct _bleurgh {
      char *string;
      int filetype;
   } mappings[] = {
      "DOC", 0xfff,
      "TXT", 0xfff,
      "TIF", 0xff0,
      "BAT", 0xfda,
      "EXE", 0xfd9,
      "COM", 0xfd8,
      "WAV", 0xfb1,
      "AVI", 0xfb2,
      "HTM", 0xfaf,
      "CSV", 0xdfe,
      "JPG", 0xc85,
      "MPG", 0xbf8,
      "PCD", 0xbe8,
      "BMP", 0x69c,
      "GIF", 0x695,
      NULL, FS_FileType_NotFound
   };
   if (len>3) len = 3;

   strncpy (extension, ext, len);

   extension[len] = 0;

   ptr = strrchr(extension, ISO9660_DirRec_Separator2);

   if (!ptr) ptr = extension + len;

   *ptr='\0';

   DEBUG debug_output ("n1", "CDFS: extension is \"%s\"\n", extension);

   e = _swix (TypeMap_ExtensionToType, I0|I1|I2|O1, 0, extension, 0, &filetype);

   if (!e) return filetype;

   for (i = 0; mappings[i].string; i++) {
      if (!strcmp (extension,mappings[i].string)) return mappings[i].filetype;
   }
   return FS_FileType_NotFound;
}

