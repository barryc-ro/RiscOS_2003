/* File:    cdfs.c
 * Purpose: CDFS module entry points (except SWIs and * commands)
 * Author:  Timothy Roddis
 * History: 16-Oct-95: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <locale.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Commonlib headers */

#include "dbmalloc.h"
#include "debug.h"

/* Local CDFS headers */

#include "main.h"
#include "cdfs.h"
#include "filesys.h"
#include "direc.h"
#include "msgs.h"
#include "cache.h"
#include "xfer.h"

extern void fsveneer_open(void), fsveneer_close(void), fsveneer_get_bytes(void),
            fsveneer_file(void), fsveneer_func(void);
extern void *Image__RO_Base; /* Pointer to base of module */

static return_parms[6]; /* See implementation note on veneers */


/* Declares filing system to FileSwitch, returnes error block if unsuccessful */

static _kernel_oserror *declare_filing_system (void *pw) {

   FS_InformationBlock  information_block;

   information_block.information_word   = FS_IW_ExtraFilingSystemWord
                                        | FS_IW_ImageFilingSystem
                                        | FS_IW_FilingSystemIsReadOnly
                                        | (FS_IW_MaxNumberOfFilesOpen * 0)
                                        | (FS_IW_FilingSystemNumber * CDFS_FSNumber);

   information_block.extra_info_word    = 0;

   /* FileSwitch strings - offsets in bytes */

   information_block.startup_text       =
   information_block.filing_system_name = CDFS_FileSystemName - (char *) Image__RO_Base;

   DEBUG debug_output ("d", "CDFS: info word is 0x%x, extra word is 0x%x\n", information_block.information_word, information_block.extra_info_word);

   /* FileSwitch entry points - offsets in bytes, hence char * subtractions */

   information_block.fsentry_put_bytes = 0; /* read only */
   information_block.fsentry_gbpb      = 0; /* buffered */
   information_block.fsentry_args      = 0; /* nothing here to support */
   information_block.fsentry_open      = (char *)(int)fsveneer_open      - (char *) Image__RO_Base;
   information_block.fsentry_close     = (char *)(int)fsveneer_close     - (char *) Image__RO_Base;
   information_block.fsentry_get_bytes = (char *)(int)fsveneer_get_bytes - (char *) Image__RO_Base;
   information_block.fsentry_file      = (char *)(int)fsveneer_file      - (char *) Image__RO_Base;
   information_block.fsentry_func      = (char *)(int)fsveneer_func      - (char *) Image__RO_Base;

   return _swix (OS_FSControl, I0|I1|I2|I3, OS_FSControl_AddFileSystem, Image__RO_Base,
              (char *) &information_block - (char *) Image__RO_Base,
              pw);
}

/* Initialise modules.
 *
 * on entry:
 *    cmd_tail is the command tail (ignored)
 *    podule_base is god knowns what (ignored)
 *    pw is the private word (ignored)
 *
 * on exit:
 *    module has successfully initialised or else and error block is returned
 */

_kernel_oserror *cdfs_initialise (char *cmd_tail, int podule_base, void *pw) {

   _kernel_oserror     *e;
#ifndef ROM
    extern int messages_file(void);
#endif

   DEBUG debug_set_var_names ("CDFS$Debug", "CDFS$HexDump");

   DEBUG debug_output ("d", "CDFS: INITIALISING, module base @0x%x\n", Image__RO_Base);

   IGNORE (cmd_tail);
   IGNORE (podule_base);

#ifdef ROM
   external messages file?
#endif

#ifndef ROM
   if ((e = _swix (ResourceFS_RegisterFiles, I0, messages_file())) != NULL) return e;
#endif

   msgs_open_file("Resources:Resources.CDFS.Messages");

   if ((e = declare_filing_system(pw)) != NULL) return e;

   /* This ensures that the toupper/tolower calls work in an international-friendly way */

   setlocale (LC_CTYPE, "ISO8859-1");

   DEBUG debug_output ("d", "CDFS: INITIALISATION COMPLETE\n");

   return e;
}

_kernel_oserror *cdfs_finalise (int fatal, int podule_base, void *pw) {

   _kernel_oserror     *e;
#ifndef ROM
    extern int       messages_file(void);
#endif

   DEBUG debug_output ("d", "CDFS: FINALISING\n");

   IGNORE (fatal);
   IGNORE (podule_base);
   IGNORE (pw);

   e = _swix (OS_FSControl, I0|I1, OS_FSControl_RemoveFileSystem, CDFS_FileSystemName);

   cache_dismount_all();

   cache_free_memory();

   msgs_close_file();

   dbmalloc_chkheap();

#ifndef ROM
   _swi (ResourceFS_DeregisterFiles, I0, messages_file());
#endif

   return e;
}

void cdfs_service_handler (int service_number, _kernel_swi_regs *r, void *pw) {

   IGNORE (r);

   if (service_number == Service_FSRedeclare) {
      declare_filing_system (pw);
   }
}

/* The EntryFunc functions all have the characteristics described in the accompanying
 * implemenation note 'veneers'.
 */

/* Open a file:
 *
 * on entry:
 *    access_reqd is either read or update (write is illegal to CD-ROMs)
 *    pathname is the path of the file
 *    fs_handle is the FileSwitch handle
 *
 * on exit:
 *    returns parms 0 through 4 correspond to r0-r4
 *       0 - file info word:
 *              0x40000000 - object is a file
 *              0x60000000 - object is a directory
 *       1 - CDFS' handle (or 0 for failure)
 *       2 - buffer size
 *       3 - extent
 *       4 - space allocated to file
 *
 * 4 is a bit of a nonsense value anyway, so it is simply
 *    (extent + logical block size) & (0xffffffffU ^ (logical block size-1))
 */


EntryFunc cdfs_open_file         (unsigned int reason, char *pathname, unsigned int fs_handle) {

   unsigned int  file_handle;
   DiscInfoPtr   disc_info;
   DirInfoPtr    dir_info;

   DualBlock dual_block = {NULL, NULL};

   dual_block.return_parms = return_parms;

   if ((dir_info = malloc (sizeof(DirInfoRec))) == NULL) {
      return_parms[1]  = 0;
      return dual_block;
   }
   DEBUG debug_output ("d", "CDFS: opening file \"%s\" for %d\n", pathname, reason);

   filesys_open_file (&disc_info, dir_info, &file_handle, pathname, fs_handle);

   switch (dir_info->object_type) {

      case FS_ObjectType_File:
         return_parms[0] = FS_OpenFile_IW_ReadPermitted;
         break;
      case FS_ObjectType_Directory:
         return_parms[0] = FS_OpenFile_IW_ReadPermitted
                         | FS_OpenFile_IW_DirectoryObject;
         break;
   }
   return_parms[1] = file_handle;
   return_parms[2] = ISO9660_LogicalSectorSize;
   return_parms[3] = dir_info->size;
   return_parms[4] = (dir_info->size + disc_info->logical_block_size)
                   & ~(disc_info->logical_block_size - 1);

   DEBUG debug_dump ("d", return_parms, 20);

   free (dir_info);

   return dual_block;
}

EntryFunc cdfs_get_bytes         (FileOpenPtr cdfs_handle, SectorBuffer *buffer,
                                  size_t size, unsigned int offset) {

   DualBlock dual_block = {NULL, NULL};

   DEBUG debug_output ("d", "CDFS: putting 0x%x bytes @0x%p from file, disc addr 0x%x + 0x%x\n", size, buffer, cdfs_handle->file_start_addr, offset);

   if (!size) return dual_block;

   dual_block.e = xfer_get_blocks (&(cdfs_handle->disc_info), cdfs_handle->file_start_addr,
                                   size, offset, (char *) buffer);

   return dual_block;
}

/* Close a file.
 *
 * on entry:
 *    cdfs_handle is our own internal handle
 */

EntryFunc cdfs_close_file        (FileOpenPtr cdfs_handle) {
   DualBlock dual_block = {NULL, NULL};

   DEBUG debug_output ("d", "CDFS: closing file\n");

   filesys_close_file (cdfs_handle);

   return dual_block;
}

/* This object reads catalogue information. It implements FSEntry_File 5.
 *
 * on entry:
 *    pathname contains the directory's pathname
 * on exit:
 *    return parameters 0 though 4 correspond to r0, r2-r5
 *       0 - object type
 *       1 - load address
 *       2 - execute address
 *       3 - file length
 *       4 - file attributes
 */

EntryFunc cdfs_read_cat          (char *pathname) {

   DiscInfoPtr  disc_info;
   DirInfoPtr   dir_info;
   DualBlock dual_block = {NULL, NULL};

   if ((dir_info = malloc (sizeof (DirInfoRec))) == NULL) {
      dual_block.e = msgs_make_error (Error_MemAlloc);
      return dual_block;
   }
   DEBUG debug_output ("d", "CDFS: reading catalogue pathname: \"%s\" \n", pathname);

   dual_block.return_parms = return_parms;

   if ((dual_block.e = direc_find_object_on_discs (&disc_info, dir_info, pathname)) != NULL) {
      goto free1;
   }

   if ((return_parms[0] = dir_info->object_type) != FS_ObjectType_NotFound) {
      return_parms[1] = dir_info->load_addr;
      return_parms[2] = dir_info->exec_addr;
      return_parms[3] = dir_info->size;
      return_parms[4] = dir_info->attribs;
   }
 free1:
   free (dir_info);
   return dual_block;
}

/* This loads a file into memory.
 *
 * on entry:
 *    pathname is the pathname of the file to load
 *    address is where in memory to load the file
 *
 * on exit:
 *    return parms 0 through 4 correspond to r2-r6
 *       0 - load address
 *       1 - exec address
 *       2 - extent
 *       3 - attributes
 *       4 - leafname
 */

EntryFunc cdfs_load_file         (char *pathname, void *address) {

   char        *tail;
   DiscInfoPtr  disc_info;
   DirInfoPtr   dir_info;
   DualBlock    dual_block = {NULL, NULL};

   dual_block.return_parms = return_parms;

   DEBUG debug_output ("d", "CDFS: loading file \"%s\" @0x%p\n", pathname, address);

   if ((dir_info = malloc (sizeof (DirInfoRec))) == NULL) {
      dual_block.e = msgs_make_error (Error_MemAlloc);
      return dual_block;
   }
   if ((dual_block.e = direc_find_object_on_discs (&disc_info, dir_info, pathname)) != NULL) {
      goto free1;
   }
   if (dir_info->flags & CDFS_DirInfoFlags_Interleaved)  {
      dual_block.e = msgs_make_error (Error_Interleaved);
      goto free1;
   }
   if (dir_info->object_type == FS_ObjectType_NotFound) {
      dual_block.e = msgs_make_error (Error_ObjectNotFound);
      goto free1;
   }
   if (!dir_info->size) { /* Optimisation */
      goto free1;
   }
   if ((dual_block.e = xfer_get_blocks (&disc_info, dir_info->disc_addr, dir_info->size, 0,
                                        address)) != NULL) {

      goto free1;
   }
   return_parms[0] = dir_info->load_addr;
   return_parms[1] = dir_info->exec_addr;
   return_parms[2] = dir_info->size;
   return_parms[3] = dir_info->attribs;

   tail = strrchr (pathname, FS_DirectorySeparator);

   return_parms[4] = (int) (tail ? tail+1 : pathname);

   free1:
      free (dir_info);
      return dual_block;
}

/* This reads directory information. It corresponds exactly to the FSEntry_Func calls
 * 14, 15 and 19.
 *
 * on entry:
 *    reason code is 14,15 or 19 to reflect which particular Func call it was
 *    pathname contains the directory's pathname
 *    buffer is a pointer to a buffer to contain the relevant information records
 *    no is the number of objects to be copied
 *    offset is the offset into the directoy returned by the last call or 0 to
 *     start
 *    buffer_size is the size of the buffer into which the relevant info records will
 *     be copied
 * on exit:
 *    return parameters 0, 1 correspond to r3 and r4:
 *       0 - number of names read
 *       1 - offset of next item in directory or -1 if at end
 */

EntryFunc cdfs_read_dir          (unsigned int reason_code, char *pathname, void *buffer,
                                  unsigned int no, unsigned int offset,
                                  size_t buffer_size) {
   unsigned int  new_offset = offset;
   unsigned int  record_size = 0;
   unsigned int  no_read;
   int  buffer_remaining = buffer_size;
   char         *ptr;
   DiscInfoPtr   disc_info;
   DirInfoPtr    dir_info;
   DirInfoPtr    obj_info;
   DualBlock     dual_block = {NULL, NULL};

   if ((dir_info = malloc (2 * sizeof (DirInfoRec))) == NULL) {
      dual_block.e = msgs_make_error (Error_MemAlloc);
      return dual_block;
   }
   obj_info = dir_info + 1;

   DEBUG debug_output ("d", "CDFS: reading directory info (%d) for %d objects in \"%s\" starting with offset 0x%x\n", reason_code, no, pathname, offset);

   dual_block.return_parms = return_parms;

   if ((dual_block.e = direc_find_object_on_discs (&disc_info, dir_info, pathname)) != NULL) {
      goto free1;
   }
   if (dir_info->object_type == FS_ObjectType_NotFound) {
      DEBUG debug_output ("d", "CDFS: object not found\n");

      goto free1;
   }
   DEBUG debug_output ("d", "CDFS: object directory at 0x%x\n", dir_info->disc_addr);
   /* We now have the correct directory */

   if (reason_code == 14) {

      int     carry;
      _kernel_swi_regs regs;

      regs.r[0] = (int) buffer;
      regs.r[1] = (int) buffer + buffer_size;

      _kernel_swi_c (OS_ValidateAddress, &regs, &regs, &carry);

      if (carry) {
         return_parms[0] = 0;
         return_parms[1] = offset;

         DEBUG debug_output ("d", "CDFS: address not valid\n");
         goto free1;
      }
   }
   no_read = 0;
   ptr     = buffer;

   while (no_read != no && buffer_remaining > 0) {

      DEBUG debug_output ("d1", "CDFS: read %d/%d, buffer remaining 0x%x\n", no_read, no, buffer_remaining);

      if ((dual_block.e = direc_find_object_at_offset (obj_info, &disc_info, dir_info->disc_addr
      ,                                                dir_info->size, &new_offset)) != NULL) {
         goto free1;
      }
      if (obj_info->object_type == FS_ObjectType_NotFound) {

         return_parms[0] = no_read;
         return_parms[1] = -1;  /* At end of directory */

         goto free1;
      }

      switch (reason_code) {
         case 14: /* read directories */
            record_size = strlen (obj_info->name) + 1;
            if (record_size > buffer_remaining) {
               return_parms[0] = no_read;
               return_parms[1] = offset;

               goto free1;
            }
            strcpy (ptr, obj_info->name);

            DEBUG debug_dump ("d1", ptr, record_size);

            ptr              += record_size;
            buffer_remaining -= record_size;

            break;
         case 15: /* read directory entries and information */
         {
            FSEntry_Func15_Ptr record = (FSEntry_Func15_Ptr) ptr;

            record_size = strlen (obj_info->name) + 1 + 5 * sizeof(int);

            if (record_size > buffer_remaining) {
               return_parms[0] = no_read;
               return_parms[1] = offset;

               goto free1;
            }
            record->object_type = obj_info->object_type;
            record->load_addr   = obj_info->load_addr;
            record->exec_addr   = obj_info->exec_addr;
            record->length      = obj_info->size;
            record->attribs     = obj_info->attribs;

            strcpy (record->name, obj_info->name);

            record_size = (record_size + 3) & ~3; /* Word align */

            DEBUG debug_dump ("d1", ptr, record_size);

            ptr              += record_size;
            buffer_remaining -= record_size;

            break;
         }
         case 19: /* read directory entries and information */
         {
            FSEntry_Func19_Ptr record = (FSEntry_Func19_Ptr) ptr;

            record_size = strlen (obj_info->name) + 1 + 6 * sizeof(int) + 1 * sizeof (OS_UTC);

            if (record_size > buffer_remaining) {
               return_parms[0] = no_read;
               return_parms[1] = offset;

               goto free1;
            }
            record->object_type          = obj_info->object_type;
            record->load_addr            = obj_info->load_addr;
            record->exec_addr            = obj_info->exec_addr;
            record->length               = obj_info->size;
            record->attribs              = obj_info->attribs;
            record->system_internal_name = obj_info->disc_addr;

            strcpy (record->name, obj_info->name);

            if ((obj_info->load_addr & FS_LoadAddr_DateStampBitMask)
                                                          == FS_LoadAddr_DateStampIndicator) {

               (record->utc)[4] = obj_info->load_addr & FS_LoadAddr_UTCBitMask;

               * (unsigned int *) record->utc = obj_info->exec_addr; /* Should be word aligned */

            } else {
               memset (record->utc, 0, sizeof (OS_UTC));
            }
            record_size = (record_size + 3) & ~3; /* Word align */

            DEBUG debug_dump ("d1", ptr, record_size);

            ptr              += record_size;
            buffer_remaining -= record_size;

            break;
         }
      }

      /* Only here to we know that we have both successfully read an entry AND copied it in */
      ++no_read;
      offset = new_offset;
   }
   return_parms[0] = no_read;
   return_parms[1] = offset;

   free1:

      DEBUG debug_dump ("d1", buffer, buffer_size);
      free (dir_info);
      return dual_block;
}

EntryFunc cdfs_shutdown          (void) {
   DualBlock dual_block = {NULL, NULL};

   DEBUG debug_output ("d", "CDFS: shutting down\n");

   dual_block.e = cache_dismount_all();

   return dual_block;
}

/* This function corresponds to FSEntry_Func 23.
 *
 * on entry:
 *    disc_identifier is the discname or number to canonicalise
 *    buffer is the buffer in which to put the canonicalised name or zero to indicate that
 *     the required size of the buffer should be returned
 *    buffer_size is the size of the buffer or anything if the above is zero
 * on exit:
 *    return parameters 0, 1 correspond to r2, r4 (the calling veneer zeroes the
 *                                                                       special discname fields)
 *       0 - canonical discname or zero (if none)
 *       1 - overflow of buffer
 */

EntryFunc cdfs_canonicalise      (char *disc_identifier, char *buffer, unsigned int buffer_size) {

   DualBlock   dual_block = {NULL, NULL};

   if (!buffer) buffer_size = 0;

   dual_block.return_parms = return_parms;

   DEBUG debug_output ("d", "CDFS: entry pt. canonicalise discname \"%s\" into buffer @0x%x [%d]\n",disc_identifier?disc_identifier:"NULL",buffer, buffer_size);

   if ((dual_block.e = filesys_canonicalise (&buffer, &buffer_size,
                                             disc_identifier)) != NULL) {
      return dual_block;
   }
   DEBUG debug_output ("d", "CDFS: buffer size / overflow is %d\n", buffer_size);

   return_parms[1] = buffer_size;
   return_parms[0] = (unsigned int) buffer;

   DEBUG {if (buffer) debug_dump ("d1", buffer, buffer_size);}

   /* The discname in buffer is not necessarily nul-terminated */

   return dual_block;
}


/* ERROR CONDITION ENTRY POINTS */


/* The veneer has detected a FSEntry_File call which can't be handled by CDFS
 * on entry:
 *    r0 - r5 are the register values!
 */

EntryFunc cdfs_file_range        (int r0, int r1, int r2, int r3, int r4, int r5) {

   DualBlock dual_block = {NULL, NULL};
   DEBUG debug_output ("d", "CDFS: FSEntry_File call not supported regs r0 - r6 (hex): %x %x %x %x %x %x\n", r0, r1, r2, r3, r4, r5);

   switch (r0) {

      case FSEntry_File_Save:
      case FSEntry_File_WriteCatInfo:
      case FSEntry_File_WriteLoadAddr:
      case FSEntry_File_WriteExecAddr:
      case FSEntry_File_WriteAttribs:
      case FSEntry_File_DeleteObject:
      case FSEntry_File_CreateObject:
      case FSEntry_File_CreateDirectory:

         dual_block.e = msgs_make_error (Error_ReadOnly);
         break;

      default:
         dual_block.e = msgs_make_error (Error_UnSupported);
   }
   return dual_block;
}

/* The veneer has detected a FSEntry_Func call which can't be handled by CDFS
 * on entry:
 *    r0 - r7 are the register values!
 */

EntryFunc cdfs_func_range        (int r0, int r1, int r2, int r3, int r4, int r5, int r6, int r7) {

   DualBlock dual_block = {NULL, NULL};
   DEBUG debug_output ("d", "CDFS: FSEntry_Func call not supported regs r0 - r7 (hex): %x %x %x %x %x %x %x %x\n", r0, r1, r2, r3, r4, r5, r6, r7);

   switch (r0) {

      case FSEntry_Func_SetFSOptions:
      case FSEntry_Func_RenameObject:
      case FSEntry_Func_SetAccessRights:
      case FSEntry_Func_AddDefect:
      case FSEntry_Func_WriteBootOption:
      case FSEntry_Func_NameImage:
      case FSEntry_Func_StampImage:

         dual_block.e =msgs_make_error (Error_ReadOnly);
         break;

      default:
         dual_block.e =msgs_make_error (Error_UnSupported);
   }
   return dual_block;
}
