/* File:    aux.c
 * Purpose: Auxiliary routines
 * Author:  Timothy Roddis
 * History: 15-Feb-96: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* commonlib headers */

#include "debug.h"
#include "dbmalloc.h"
#include "msgs.h"

/* Local headers */

#include "main.h"
#include "filesys.h"
#include "direc.h"
#include "cache.h"
#include "aux.h"

/* This is an auxiliary function which finds the disc required from a given argument
 *
 * on entry:
 *    arg_string contains the text for at most one argument or NULL
 *    disc_info is the usual updateable pointer to a disc information record pointer
 * on exit:
 *    returns a pointer to an error block if couldn't complete successfully else NULL
 * returns: {MemAlloc, DiscNotFound, DiscNotPresent, TooManyFiles, MultiMatchedDiscName.}
 *
 * Assumptions: arg_string will have had any leading and trailing whitespace stripped off and
 * will be a valid, one argument string
 */

_kernel_oserror *aux_find_disc_from_argument (DiscInfoPtr *disc_info, char *arg_string) {

   int              drv_no;
   char            *ptr;
   _kernel_oserror *e;

   DEBUG debug_output ("a", "CDFS: disc: \"%s\"\n", arg_string?arg_string:"NULL");

   if (!*arg_string) arg_string = NULL;

   if (!arg_string) {
      drv_no = global_current_drive;

      e = filesys_retrieve_disc_info_for_drive (disc_info, drv_no);

      DEBUG debug_output ("a1", "CDFS: disc for drive %d info @0x%x\n", drv_no, *disc_info);
   } else {
      if (!strchr(arg_string, FS_NameAndDiscSpecSeparator)) {
         ptr = malloc (strlen(arg_string) + 2);

         if (ptr) {

            ptr[0] = FS_NameAndDiscSpecSeparator;
            strcpy (ptr + 1, arg_string);
         } else {
            return msgs_make_error (Error_MemAlloc);
         }
      } else {
         ptr = arg_string;
      }
      e = aux_find_object_from_argument (disc_info, NULL, ptr);

      if (ptr != arg_string) free (ptr);
   }
   return e;
}

/* This is an auxiliary function which finds the object required from a given argument
 *
 * on entry:
 *    arg_string contains the text for at most one argument or NULL
 *    disc_info is the usual updateable pointer to a disc information record pointer
 *    dir_info is a pointer to an uninitialised directory record info block or
 *     NULL in which case only the disc information will be looked up
 * on exit:
 *    returns a pointer to an error block if couldn't complete successfully else NULL
 *
 * Assumptions: arg_string will have had any leading and trailing whitespace stripped off and
 * will be a valid, one argument string
 */

_kernel_oserror *aux_find_object_from_argument (DiscInfoPtr *disc_info, DirInfoPtr dir_info,
                                                char *arg_string) {

   int              size;
   char            *buffer;
   char            *ptr;
   _kernel_oserror *e;

   DEBUG debug_output ("a", "CDFS: object: \"%s\"\n", arg_string?arg_string:"NULL");

   /* canonicalise it */
   e = _swix (OS_FSControl, I0|I1|I3|I4|I5|O5, OS_FSControl_Canonicalise,
               arg_string, 0, 0, 0, /* Out = */ &size);

   if (e) return e;

   size = 1 - size;

   DEBUG debug_output ("a", "CDFS: size needed %d (0x%x)\n", size, size);

   if ((buffer = malloc (size)) == NULL) return msgs_make_error (Error_MemAlloc);

   e = _swix (OS_FSControl, I0|I1|I2|I3|I4|I5, OS_FSControl_Canonicalise,
               arg_string, buffer, 0, 0, size);

   if (e) goto free_1;

   if (strncmp (buffer, CDFS_FileSystemName, CDFS_FileSystemName_Length)) {
      return msgs_make_error (Error_NotCDFSObject);
   }
   if (!dir_info) {

      ptr = strchr (buffer, FS_DirectorySeparator);

      if (ptr) *ptr = 0;
   }
   ptr = strchr (buffer, FS_NameAndDiscSpecSeparator);

   if (!ptr) ptr = buffer;

   if (ptr != buffer) ptr += 1;

   DEBUG debug_output ("a", "CDFS: action on \"%s\" [0x%p] using \"%s\" [0x%p] as name\n", buffer, buffer, ptr, ptr);

   if (dir_info == NULL) {
      e = filesys_find_disc_by_name (disc_info, ptr + 1);

      if (!e && !*disc_info) {
         e = msgs_make_error (Error_DiscNotFound);
      }
   } else {
      e = direc_find_object_on_discs (disc_info, dir_info, ptr);

      if (!e && dir_info->object_type == FS_ObjectType_NotFound) {
         e = msgs_make_error (Error_ObjectNotFound);
      }
   }
   DEBUG debug_output ("a", "CDFS: disc info @0x%x\n", *disc_info);

   free_1:
      free (buffer);
      return e;
}

extern _kernel_oserror *aux_process_cdmgr_error (_kernel_oserror *error) {

   DEBUG debug_output ("a", "CDFS: processing error 0x%x - \"%s\"\n", error->errnum,
                       error->errmess);

   switch (error->errnum & OS_ErrorNumberBitMask) {
      case CDMgr_Error_DriveNotKnown:
         return msgs_make_error (Error_DriveNotKnown);
      case CDMgr_Error_NotPresent:
         return msgs_make_error (Error_DriveEmpty);
      case CDMgr_Error_WrongSectorMode:
         return msgs_make_error (Error_Mode2Form2);
      default:
         return error;
   }
}
