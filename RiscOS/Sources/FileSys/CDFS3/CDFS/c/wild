/* File:    wild.c
 * Purpose: Wild card testing (case insensitive)
 * Author:  Mike Challis
 * History: 21-Feb-96: TGR: adapted for CDFS (made case insensitive)
 */

/* ANSI headers */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

/* commonlib headers */

#include "tgrlib/defines.h"

/* local headers */

#include "wild.h"

/*
 * Used to communicate between wild_match (..) and its support function
 *  match_fixed (..).
 */

static char *w, *c;


/*
 * This is a support function for wild_match (..).
 *
 * Matches the strings w and c character by character until:
 *
 *  (a) An asterisk is found in w:
 *          Result TRUE with *w = '*', *c = next char to match
 *
 *  (b) Both strings terminate:
 *          Result TRUE with *w = *c = 0
 *
 *  (c) A mismatch is found:
 *          Result FALSE with *w != *c
 *                            (one or other - but not both - may be zero)
 */

static Bool match_fixed (void)
{
    while (TRUE)
    {
        if (*w == '*')
            return TRUE;

        if (*c == 0)
            return (*w == 0);

        if (toupper(*c) != toupper(*w) && *w != '#')
            return FALSE;

        c++;
        w++;
    }
}


/*
 * Returns TRUE iff 'name' matches the wild-carded string 'wild'.
 *
 * 'wild' may contain:
 *      *  -  to match zero or more characters
 *      #  -  to match exactly one character
 *
 * This code is a transliteration of FileSwitch assembler.
 *
 * Perhaps surprisingly, only one level of backtrack is ever required.
 */

Bool wild_match (char *wild, char *name)
{
    char *pw, *pc;

    w = wild;
    c = name;

    pc = pw = 0; /* To appease the compiler pc is set to 0 here */

    while (TRUE)
    {
        if (match_fixed ())
        {
            while (*w == '*')  /* ignore redundant '*'s */
                w++;

            if (*w == 0)
                return TRUE;

            pw = w;            /* in case of backtrack */
        }
        else     /* no match - so backtrack if possible */
        {
            if (pw == 0)       /* no backtrack */
                return FALSE;

            w = pw;
            c = pc;
        }

        /* find first character match after '*' */
        while (TRUE)
        {
            if (*c == 0)
                return FALSE;

            if (*w == '#' || toupper(*c) == toupper(*w))
                break;

            c++;
        }

        pc = c + 1;    /* start one further on after backtrack */
    }
}
