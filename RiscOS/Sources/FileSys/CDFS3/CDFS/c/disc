/* File:    disc.c
 * Purpose: Disc access with exception handling wrappers
 * Author:  Timothy Roddis
 * History: 13-Dec-95: TGR: created
 */


/* ANSI headers */

#include <stdlib.h>
#include <string.h>


/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Commonlib headers */

#include "defines.h"
#include "debug.h"

/* Local headers */

#include "main.h"
#include "disc.h"
#include "cache.h"
#include "filesys.h"

/* I don't really know where this should have gone, so it eneded up here
 * ENTRY: sector buffers points to a large enough buffer to hold all the data
 * EXIT:  buffer filled
 *
 * This routine handles all the abnormal status conditions etc. associated with reading
 * sectors from disc.
 *
 */

_kernel_oserror *disc_read_sectors (DiscInfoPtr *disc_info, SectorBuffer *sector_buffers,
                                     int sector_addr, int no_sectors, int data_mode) {

   _kernel_oserror *e         = NULL;
   Bool             validated = FALSE;

   /* The control flow of the following is rather complicated ...
    * On entry !validated is FALSE and e is NULL */

   do {

      DEBUG debug_output ("z", "CDFS: reading disc, error state: 0x%x - \"%s\"\n", e?e->errnum:0, e?e->errmess:"none");

      /* The following if block will be executed the first time 'round if the disc is
         not in the drive and subsequently if there is an error in e */

      if (!validated && (*disc_info)->sequence_no == -1 || e) {

         DiscInfoRec      old_disc_info = **disc_info;
         DiscInfoPtr      new_disc_info;

         /* try to find the disc in the cache */

         e = filesys_retrieve_disc_info_for_drive (&new_disc_info, (*disc_info)->drive_no);

         /* The returned NULL absolutely should not happen */

         if (e || new_disc_info == NULL
          || new_disc_info->whichdisc != old_disc_info.whichdisc
          || strcmp(new_disc_info->name, old_disc_info.name)) {
            if ((e = filesys_find_disc (&new_disc_info, old_disc_info.name,
                                        old_disc_info.drive_no)) != NULL) return e;
         }
         validated = TRUE;
      }
      e = _swix (CDMgr_ReadData, I0|I1|I2|I3|I4|I5|I6, CDMgr_ReadData_User,
                 (*disc_info)->drive_no, (*disc_info)->sequence_no,
                 sector_buffers, sector_addr, no_sectors, data_mode);



      if (e) switch (e->errnum & OS_ErrorNumberBitMask) {

         case CDMgr_Error_MediaChanged: /* Ageing the drive will be taken care of if
                                         * we call filesys_retrieve_disc_info_for_drive */
         case CDMgr_Error_NotResponding:
         case CDMgr_Error_BecomingReady:
         {
            if (validated) return e;
            break;
         }
         case CDMgr_Error_DriveNotKnown:
            if (validated) return msgs_make_error (Error_DriveNotKnown);
            break;
         case CDMgr_Error_NotPresent:
            if (validated) return msgs_make_error (Error_DriveEmpty);
            break;
         case CDMgr_Error_WrongSectorMode:
           e = msgs_make_error (Error_Mode2Form2);
         default:
            return e;
      }
   } while (!validated && e);

   DEBUG debug_output ("z", "CDFS: exiting disc_read_sectors %svalidated, error %s\n", validated?"":"not ", e?e->errmess:"NULL");

   return e;
}

