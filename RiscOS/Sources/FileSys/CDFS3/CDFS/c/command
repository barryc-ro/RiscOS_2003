/* File:    command.c
 * Purpose: To handle command line functionality
 * Author:  Timothy Roddis
 * History: 02-Feb-96: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* commonlib headers */

#include "debug.h"
#include "dbmalloc.h"
#include "msgs.h"

/* Local headers */

#include "main.h"
#include "command.h"
#include "filesys.h"
#include "cache.h"
#include "direc.h"
#include "aux.h"

/* This handles the RISC OS CLI aspects of CDFS.
 *
 * on entry:
 *    argc is the argument count
 *    arg_string is the atring containing (white space delimited) arguments
 *    pw is the private word of the module
 * on exit:
 *    returns a pointer to an error block if it couldn't complete successfully else NULL
 */


_kernel_oserror *command_handler (char *arg_string, int argc, int cmd_no, void *pw) {

   int i;
   char *cmd_tail;
   _kernel_oserror *e;

   IGNORE(pw);

   /* arg_string doesn't appear to have to be NUL terminated */

   if (argc) {
      DEBUG debug_output ("g", "CDFS: no of arguments = %d\n", argc);
      if (arg_string == (char *) 1 || !*arg_string) {
         cmd_tail = NULL;
      } else {
         for (i=0; arg_string[i] >= ' '; i++) ;
         if ((cmd_tail = malloc (i+1)) == NULL) return msgs_make_error (Error_MemAlloc);
         for (i=0; arg_string[i] >= ' '; i++) cmd_tail[i] = arg_string[i];
         cmd_tail[i] = 0;
      }
   } else {
      cmd_tail = NULL;
   }
   switch (cmd_no) {
      case CDFS_Command_CDFS:
         e = _swix(OS_FSControl,I0|I1, OS_FSControl_SelectFS, CDFS_FileSystemName);
         break;
      case CDFS_Command_Bye:
          e = cache_dismount_all ();
          break;
      case CDFS_Command_Dismount:
      {
         DiscInfoPtr disc_info;

         if ((e = aux_find_disc_from_argument (&disc_info, argc?cmd_tail:NULL)) != NULL) break;

         e = filesys_dismount_disc (disc_info);

         break;
      }
      case CDFS_Command_Drive:
      {
         unsigned int drive;

         if ((e = _swix (OS_ReadUnsigned, I0|I1|O2, 10 | OS_ReadUnsignedFlags_CheckTerminator,
                         cmd_tail, &drive)) != NULL) break;

         global_current_drive = drive;

         break;
      }
      case CDFS_Command_Mount:
      {
         char        *buffer,
                     *ptr;
         int          len;
         DiscInfoPtr  disc_info;
         DirInfoPtr   dir_info;

         if ((e = aux_find_disc_from_argument (&disc_info, argc?cmd_tail:NULL)) != NULL) break;

         len = strlen (disc_info->name);

         if ((buffer = malloc (CDFS_FileSystemName_Length + len + FS_Library_Length + 6)) == NULL) {

            e = msgs_make_error (Error_MemAlloc);
            break;
         }
         /* Make up string "CDFS::<discname>.$ */


         strcpy (buffer, CDFS_FileSystemName); /* 'CDFS' */

         buffer[CDFS_FileSystemName_Length    ] = FS_NameAndDiscSpecSeparator;    /* : */
         buffer[CDFS_FileSystemName_Length + 1] = FS_NameAndDiscSpecSeparator;    /* : */

         strcpy (buffer + CDFS_FileSystemName_Length + 2, disc_info->name);       /* <discname> */

         buffer[CDFS_FileSystemName_Length + 2 + len] = FS_DirectorySeparator;      /* '.' */
         buffer[CDFS_FileSystemName_Length + 3 + len] = FS_RootDirectoryIdentifier; /* '$' */
         buffer[CDFS_FileSystemName_Length + 4 + len] = 0;

         e = _swix (OS_FSControl, I0|I1, OS_FSControl_SetCurrentDir, buffer);

         if (e) goto free_m1;

         e = _swix (OS_FSControl, I0, OS_FSControl_UnsetUserRoot);

         if (e) goto free_m1;

         /* Add ".Library" to above string */

         buffer[CDFS_FileSystemName_Length + 4 + len] = FS_DirectorySeparator;

         strcpy (buffer + CDFS_FileSystemName_Length + 5 + len, FS_Library);

         ptr = buffer + CDFS_FileSystemName_Length + 1;

         if ((dir_info = malloc (sizeof (DirInfoRec))) == NULL) {
            e = msgs_make_error (Error_MemAlloc);
            goto free_m1;
         }
         if ((e = direc_find_object_on_discs (&disc_info, dir_info, ptr)) != NULL) {
            goto free_m2;
         }
         if (dir_info->object_type == FS_ObjectType_Directory) {
            e = _swix (OS_FSControl, I0|I1, OS_FSControl_SetLibrary, buffer);
         }
         free_m2:
            free (dir_info);
         free_m1:
            free (buffer);

         break;
      }
      case CDFS_Configure_Buffers:
      {
         char         cmos_byte,
                      text[32];
         unsigned int size;

         if (arg_string == (char *)1) {
             size = cache_read_cmos();

             DEBUG debug_output ("g", "CDFS: number of buffers %d\n", size);

             if (size == 1) size=0; /* Embroidery for beginners */

             /* Convert from number of buffers to kilobytes */

             size = size * ISO9660_LogicalSectorSize / 1024;

             sprintf (text, msgs_lookup("Sts"), size);

             e = _swix (OS_Write0, I0, text);

             if (!e) e = _swix (OS_NewLine, 0);
         } else {
            cmos_byte = CDFS_CMOS_Default;

            if ((e = _swix (OS_ReadUnsigned, I0|I1|I2|O2, 10 | OS_ReadUnsignedFlags_RestrictRangeR2,
                            cmd_tail, 1 << (CDFS_CMOS_RangeMax - CDFS_CMOS_RangeCorrection),
                            &size)) != NULL) break;

            DEBUG debug_output ("g", "CDFS: buffer size requested %d\n", size);

            if (!size) {
               cmos_byte = CDFS_CMOS_Zero;
            } else if (size < 1 << (CDFS_CMOS_RangeMin - CDFS_CMOS_RangeCorrection)) {
               cmos_byte = CDFS_CMOS_RangeMin;
            } else if (size < 1 << (CDFS_CMOS_RangeMax - CDFS_CMOS_RangeCorrection)) {
               for (cmos_byte = CDFS_CMOS_RangeMax; (size << 2) <= (1 << cmos_byte); cmos_byte--);
            }
            e = _swix (OS_Byte, I0|I1|I2, OS_Byte_WriteCMOSRAM, CMOS_CDFSLocation, cmos_byte);
         }
         break;
      }
      default:
         e = NULL;
         break;
   }
   if (cmd_tail) free (cmd_tail);
   return e;
}
