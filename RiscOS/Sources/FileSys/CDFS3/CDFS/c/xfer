/* File:    xfer.c
 * Purpose: Handle data transfer from CD-ROMs
 * Author:  Timothy Roddis
 * History: 14-Feb-95: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <string.h>

/* RISC OS headers */

#include "kernel.h"

/* commonlib headers */

#include "debug.h"
#include "msgs.h"

/* local headers */

#include "main.h"
#include "xfer.h"
#include "disc.h"


/* This routine fetches blocks of data from the disc.
 *
 * on entry:
 *    disc_info is the usual updatable pointer to a disc information block pointer
 *    disc_addr is the logical block address of the file's start
 *    offset    is the offset into that file
 *    size      is the amount to be copied
 *    address   is the place to put the data
 *
 * on exit:
 *    the data has been copied in or else an error has been returned
 *
 * This routine does not need any of the above values to be sector aligned. It will
 * do an optimal job on those that are, however.
 */

_kernel_oserror *xfer_get_blocks (DiscInfoPtr *disc_info, unsigned int disc_addr,
                                  unsigned int size, unsigned int offset, char *address) {

   unsigned int    start_sector,
                   end_sector,
                   start_rem,
                   end_rem,
                   tmp,
                   n;
   _kernel_oserror *e = NULL;
   SectorBuffer    *sector_buffer = NULL;

   tmp = (*disc_info)->logical_block_size;

   for (n = 0; tmp != 0 && tmp != 1; n++) {
      tmp = tmp >> 1;
   }
   DEBUG debug_output ("x1","CDFS: reading from lba 0x%x, offset 0x%x, size 0x%x\n",disc_addr, offset, size);

   /* n is now the shift associated with the logical block size (9 for 512, 10 for 1024 etc.) */

   /* It's done like this so that if disc sizes are upped, the code can cope */

   /* Starting sector */

   start_sector = (disc_addr + (offset>>n)) / (ISO9660_LogicalSectorSize>>n);

   /* Bytes into first sector to start at */

   start_rem    = ((disc_addr << n) + offset) & (ISO9660_LogicalSectorSize - 1);

   /* Ending sector */

   end_sector   = (disc_addr + ((offset + size)>>n)) / (ISO9660_LogicalSectorSize>>n);

   /* Bytes in the end sector to copy */

   end_rem      = ((disc_addr << n) + offset + size ) & (ISO9660_LogicalSectorSize - 1);

   if (start_rem || end_rem) { /* Not fully sector aligned */
      if ((sector_buffer = malloc (sizeof (SectorBuffer))) == NULL) {
         return msgs_make_error (Error_MemAlloc);
      }
   }
   /* If it doesn't start on a sector, read the first sector in which the data occurs
    * into a buffer */

   if (start_rem) {
      DEBUG debug_output ("x1", "CDFS: first fractional sector @0x%x, start_rem is 0x%x\n",start_sector, start_rem);

      e = disc_read_sectors (disc_info, sector_buffer,
                              start_sector++, 1, CDMgr_DataMode_Mode1OrMode2Form1);
      if (e) goto free1;

      memcpy (address, (char *) sector_buffer + start_rem,
              MIN(ISO9660_LogicalSectorSize - start_rem, size));

      address += (ISO9660_LogicalSectorSize - start_rem);
   }

   /* read the aligned sectors */

   if (end_sector > start_sector) {

      DEBUG debug_output ("x1", "CDFS: %d full sectors from 0x%x\n", end_sector-start_sector,
                          start_sector);

      e = disc_read_sectors (disc_info, (SectorBuffer *)address,
                              start_sector, end_sector - start_sector,
                              CDMgr_DataMode_Mode1OrMode2Form1);
      if (e) goto free1;
   }
   if (end_sector >= start_sector) {
      /* If it doesn't end on a sector, read the last sector in which data occurs into the
       * sector buffer */

      if (end_rem) {

         DEBUG debug_output ("x1", "CDFS: last fractional sector @0x%x, end_rem is 0x%x\n", end_sector, end_rem);

         address += (end_sector - start_sector) * ISO9660_LogicalSectorSize;

         e = disc_read_sectors (disc_info, sector_buffer,
                                 end_sector, 1, CDMgr_DataMode_Mode1OrMode2Form1);
         if (e) goto free1;

         memcpy (address, (char *) sector_buffer, end_rem);
      }
   }
   free1:

      if (sector_buffer) free (sector_buffer);
      return e;
}
