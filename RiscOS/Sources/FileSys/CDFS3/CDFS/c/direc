/* File:    direc.c
 * Purpose: Directory level filing system functions
 * Author:  Timothy Roddis
 * History: 23-Jan-95: TGR: created
 */

/* ANSI headers */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>

/* RISC OS headers */

#include "kernel.h"
#include "swis.h"

/* Commonlib headers */

#include "tgrlib/defines.h"
#include "tgrlib/msgs.h"
#include "tgrlib/debug.h"
#include "tgrlib/dbmalloc.h"

/* Local headers */

#include "main.h"
#include "fname.h"
#include "cache.h"
#include "disc.h"
#include "filesys.h"
#include "direc.h"

/* This function traverses the directory structure (if necessary) looking for a file
 *
 *  on entry:
 *     disc_info is a pointer to a locaton where a pointer to a disc information record is stored
 *        it may be updated to reflect that there is a new disc information record for a disc of
 *        this name
 *     dir_info is a pointer to directory entry information record which has been allocted by the
 *        _caller_
 *     pathname is just what it says
 *  on exit:
 *     disc_info may have been updated and/or the function returns an error or NULL
 *
 */

_kernel_oserror *direc_find_object_on_discs (DiscInfoPtr *disc_info, DirInfoPtr dir_info,
                                             char *pathname) {

   int              offset;
   char             path_component[CDFS_MaxFileNameComponentLength],
                   *ptr = pathname;
   _kernel_oserror *e;

   DEBUG debug_output ("e", "CDFS: attempting to find object \"%s\"\n", pathname);

   /* The pathname should have already been canonicalised */

   /* We don't need to strip off any leading 'CDFS:', but there is a ':' to be removed */

   if (*ptr++ != FS_NameAndDiscSpecSeparator) {
         DEBUG debug_output ("e", "CDFS: couldn't find leading colon\n");

         dir_info->object_type = FS_ObjectType_NotFound;
         return NULL;
   }
   /* Path component = discname (initially) ... */

   if ((offset = fname_get_path_component (path_component, ptr, ISO9660_PVD_VolumeIdentifierLength)) == 0) {
      DEBUG debug_output ("e", "CDFS: failed to get discname component of path\n");

      dir_info->object_type = FS_ObjectType_NotFound;
      return NULL;
   }

   DEBUG debug_output ("e", "CDFS: \"%s\" -> \"%s\" [%d]\n", ptr, path_component, offset);

   ptr += offset; /* :discname.$....
                   *          ^You are here */

  if ((e = filesys_find_disc_by_name (disc_info, path_component)) != NULL) {
     return e;
  }
   /* If we get down here then the right disc is in drive, drive_no, and the DriveInfo
    * block is all filled in
    */

   /* SHORTCUT ALERT: Look in the root directory for the root directory record */

   e = direc_find_object (dir_info, disc_info,
                          (*disc_info)->root_dir_addr, (*disc_info)->root_dir_size, "");
   if (e) return e;

   DEBUG debug_output ("e", "CDFS: %s\n", (dir_info->object_type == FS_ObjectType_Directory)?"dir":(dir_info->object_type == FS_ObjectType_File)?"file":"not found");

   if (!*ptr++) return NULL; /* Shouldn't happen */

   /* :discname.$...
    *           ^You are here */

   if (*ptr ==  FS_RootDirectoryIdentifier) {
      ptr += 1;
      if (!*ptr) return NULL;
   }

   /* :discname.$.component
    *            ^You are here */

/*   offset = fname_get_path_component (path_component, ptr, CDFS_MaxFileNameComponentLength);
*/
   while (*ptr
    && (dir_info->object_type == FS_ObjectType_Directory)
    && ((offset = fname_get_path_component (path_component, ++ptr,
                                            CDFS_MaxFileNameComponentLength)) != 0)) {

      DEBUG debug_output ("e", "CDFS: \"%s\" from \"%s\"\n", path_component?path_component:"NULL",
                          ptr?ptr:"NULL");

      ptr += offset;

      e = direc_find_object (dir_info, disc_info, dir_info->disc_addr, dir_info->size,
                             path_component);
      if (e) return e;

   }
   if (*ptr == FS_DirectorySeparator && dir_info->object_type != FS_ObjectType_Directory) {
     dir_info->object_type = 0;
   }

   DEBUG debug_output ("e","CDFS: end of direc_find_object_on_disc\n");

   return NULL;
}

/* This function finds an object name in a directory, the object name should be terminated
   by a NUL char, not a '.' */

_kernel_oserror *direc_find_object (DirInfoPtr dir_info, DiscInfoPtr *disc_info,
                                    int dir_addr, int dir_len, char *obj_name) {

   unsigned int     tmp, n, rec_length, flags, name_len, sys_use_offset;
   int              case_sensitive;
   int              sector_addr;
   int              sector_rem;
   unsigned int     max_dir_rec_length;

   Bool             associated, pling = FALSE;
   char            *ptr, *fsname = dir_info->name;
   _kernel_oserror *e;

   DEBUG debug_output ("e", "CDFS: finding object \"%s\" in a directory sector @0x%x, length 0x%x\n",
                       obj_name, dir_addr, dir_len);

   /* Calculate the shift associated with the logical block size (eg. 9 for 512, 10 for 1024) */

   tmp = (*disc_info)->logical_block_size;

   for (n = 0; tmp != 0 && tmp != 1; n++) {
      tmp = tmp >> 1;
   }
   /* Two pass system, first case sensitive, to give the impressions firstly that this _is_ a case
      sensitive system and will pick the prefered of two apparently similar names, and secondly
      that this system is case insensitive and doesn't care what case you give it */

   for (case_sensitive = 1; case_sensitive >= 0; case_sensitive--) {

      sector_addr = dir_addr / (ISO9660_LogicalSectorSize>>n);
      sector_rem  = (dir_addr << n) & (ISO9660_LogicalSectorSize - 1);

      DEBUG debug_output ("e1", "CDFS: logical block size 0x%x, lba 0x%x, sector 0x%x\n", (*disc_info)->logical_block_size, dir_addr, sector_addr);

      if (sector_rem) return msgs_make_error (Error_BadFormat);

      /* sector_rem now means sectors remaining */

      sector_rem = ((dir_len + ISO9660_LogicalSectorSize - 1) & ~(ISO9660_LogicalSectorSize - 1))
                   / ISO9660_LogicalSectorSize;

      while (sector_rem--) {

         max_dir_rec_length = ISO9660_LogicalSectorSize;

         e = cache_read_dir_sector((SectorBuffer **)&ptr, disc_info, sector_addr++);
         if (e) return e;

         while (TRUE) {

            rec_length = * (ptr + ISO9660_DirRec_RecordLenOffset);

            if (!rec_length) break; /* NOT FOUND */

            if (rec_length < ISO9660_DirRec_MinLength
            || ((name_len = * (ptr + ISO9660_DirRec_FileIdentLenOffset)) == 0)) {
               return msgs_make_error (Error_BadFormat);
            }
            sys_use_offset = name_len + ISO9660_DirRec_FileIdentOffset + (name_len + 1) % 2;
            /* See if it's an ISOFORM entry */
            if (rec_length - sys_use_offset >= ISOFORM_SysUseLength) {
               unsigned int attribs;
               char *sys_area = ptr + sys_use_offset;

               if (!strncmp (sys_area, ISOFORM_SysUse_Archimedes, ISOFORM_SysUse_ArchimedesLength)) {

                  M_loadword_littleendian(attribs, sys_area + ISOFORM_SysUse_FileAttribOffset);

                  pling = attribs & ISOFORM_SysUseAttribs_PlingFile;
               }
            }
            flags = * (ptr + ((*disc_info)->type & CDFS_DiscTypeFlags_HiSierra
                              ? HiSierra_DirRec_FlagsOffset
                              : ISO9660_DirRec_FlagsOffset));

            associated = flags & ISO9660_DirRec_Flags_AssociatedFile;

            fname_conv (fsname, ptr+ISO9660_DirRec_FileIdentOffset, name_len, associated, pling);

            if ((*fsname < ' ' && (*fsname == *obj_name))
            || (case_sensitive ? !strcmp (obj_name, fsname) : !fname_strcmp(obj_name, fsname))) {

               DEBUG debug_output ("e2", "CDFS: found the object\n");
               e = direc_get_directory_record((*disc_info)->type,
                                               dir_info, ptr,
                                               max_dir_rec_length);
               return e;

            }
            ptr                 +=  rec_length;
            max_dir_rec_length  -=  rec_length;

            if (!max_dir_rec_length) break; /* End of sector */
         }
         DEBUG debug_output ("e2", "CDFS: %d sectors remaining\n", sector_rem);
      }
   }
   dir_info->object_type  =  FS_ObjectType_NotFound;

   return NULL;
}

/* The following function finds the requested object at an offset.
 *
 * on entry:
 *    dir_info is a pointer to a dir info record to store objects info
 *    disc_info is the usual pointer to a disc info pointer
 *    dir_addr is the directory's logical block address
 *    dir_len is the length of the directory in bytes
 *    offset is the offset of the first object to read.
 * on exit:
 *    the block dir_info points to contains the requested object information or
 *     else has object type set to not found
 *    disc_info may have been updated to refelct a new location for the disc's information
 *     record
 *    offset has been updated with the new offset into the directory or contains the same
 *     value (directory has been exhausted)
 *
 */

_kernel_oserror *direc_find_object_at_offset (DirInfoPtr dir_info, DiscInfoPtr *disc_info,
                                              int dir_addr, int dir_len, unsigned int *offset) {

   unsigned int     tmp, n;
   unsigned int     starting_sector,
                    sectors_done;
   int              size;
   size_t           displace; /* offset (displacement) within sector */
   char            *buffer;
   _kernel_oserror *e;

   DEBUG debug_output ("e3", "CDFS: finding object at offset 0x%x in a directory sector @0x%x, length 0x%x\n", *offset, dir_addr, dir_len);

   /* Calculate the shift associated with the logical block size (eg. 9 for 512, 10 for 1024) */

   tmp = (*disc_info)->logical_block_size;

   for (n = 0; tmp != 0 && tmp != 1; n++) {
      tmp = tmp >> 1;
   }
   sectors_done = *offset / ISO9660_LogicalSectorSize;

   starting_sector = dir_addr / (ISO9660_LogicalSectorSize>>n);

   if ((dir_addr << n) & (ISO9660_LogicalSectorSize - 1)) return msgs_make_error (Error_BadFormat);

   /* sector_rem now means sectors remaining */

   size = ((dir_len + ISO9660_LogicalSectorSize - 1) & ~(ISO9660_LogicalSectorSize - 1))
        / ISO9660_LogicalSectorSize;


   displace = *offset & (ISO9660_LogicalSectorSize - 1); /* mask off starting displacement */

   while (sectors_done < size) {

      e = cache_read_dir_sector((SectorBuffer **)&buffer, disc_info, starting_sector+sectors_done);
      if (e) return e;

      do {
         if ((e = direc_get_directory_record ((*disc_info)->type,
                                              dir_info,
                                              buffer + displace,
                                              ISO9660_LogicalSectorSize - displace)) != NULL) {
            return e;
         }
         displace +=  dir_info->dir_rec_length;

         if (!dir_info->dir_rec_length || displace > ISO9660_LogicalSectorSize) break;

         if (dir_info->name[0] >= ' ') {

            *offset = sectors_done * ISO9660_LogicalSectorSize + displace;
            return NULL;
         }
      } while (dir_info->name[0] < ' ');

      sectors_done++;
      displace = 0;
      DEBUG debug_output ("e3", "CDFS: sector %d of a %d sector directory\n", sectors_done, size);
   }
   dir_info->object_type  =  FS_ObjectType_NotFound;

   return NULL;
}


/* This routine looks at the location given it in memory and attempts to decode that as
 * a directory record.
 *
 * on entry:
 *    disc_type - the type if disc as stored in the disc information record
 *    logical_block_size
 *    dir_info - this is where the (previously unset) dir_info block is
 *               initialised
 *    ptr - the pointer to the start of the directory record
 *    max_length - this is used for bounds checking to make sure that values
 *                 are not taken from beyond the sector buffer
 * on exit:
 *    an error is returned or else NULL in which case dir_info has been updated
 *
 * This function is quite a careful one. It is called in such a way as to allow
 * even small overshoots in the buffer and although it may return nonsense data if
 * invalid data is passed in, no other adverse effects should be allowed.
 */


_kernel_oserror *direc_get_directory_record (int disc_type,
                                             DirInfoPtr dir_info, char *ptr,
                                             unsigned int max_length) {

   int              type,
                    sys_use_offset,
                    sys_use_len,
                    name_len,
                    ear_len,
                    extent,
                    extent_addr;
   short            attrib;
   _kernel_oserror *e;
   Bool             associated,
                    pling          = FALSE,
                    hisi,
                    isoform        = FALSE;
   ISO9660_Date    *iso_date;

   hisi = disc_type & CDFS_DiscTypeFlags_HiSierra;

   dir_info->object_type = FS_ObjectType_NotFound;

   DEBUG debug_output ("e9", "CDFS: entering get_directory_record (%s)\n", hisi?"High Sierra":"ISO");

   /* An ISO9660 Directory Record Structure can not be defined because the Norcroft
      compiler would pad out the words to word boundaries */

   dir_info->dir_rec_length = * (ptr + ISO9660_DirRec_RecordLenOffset);
   dir_info->dir_rec_ptr    = ptr;

   if (!dir_info->dir_rec_length) {
      return NULL;
   }
   if (dir_info->dir_rec_length < ISO9660_DirRec_MinLength
    || dir_info->dir_rec_length > max_length
    || ((name_len = * (ptr + ISO9660_DirRec_FileIdentLenOffset)) == 0)) {
         return msgs_make_error (Error_BadFormat);
   }
   dir_info->flags          = * (ptr + (hisi
                                          ? HiSierra_DirRec_FlagsOffset
                                          : ISO9660_DirRec_FlagsOffset));
   DEBUG debug_dump ("e9", ptr, dir_info->dir_rec_length ? dir_info->dir_rec_length : 34);

   if (hisi) {
      sys_use_offset = 0; /* To appease the compiler */
      sys_use_len    = 0;
   } else {
      sys_use_offset = name_len + ISO9660_DirRec_FileIdentOffset + (name_len + 1) % 2;

      sys_use_len = dir_info->dir_rec_length - sys_use_offset;
   }
   /* Look at CDFS internal disc type and use that to look at system information */

   if (disc_type & CDFS_DiscTypeFlags_CDI && sys_use_len >= CDI_SysUseLength) {

      /* Look in CDI system use area */

      M_loadshort_bigendian(attrib, (ptr + sys_use_offset + CDI_SysUse_AttributesOffset));

      /* There is no signature */

      dir_info->flags |= ((attrib & CDI_SysUseAttribs_Directory)
            ? ISO9660_DirRec_Flags_Directory
            : 0);

      DEBUG debug_output ("e9", "CDFS: dir info flags are 0x%x\n", dir_info->flags);

   }
   if (sys_use_len >= ISOFORM_SysUseLength) { /* See if it's an ISOFORM entry */

      char *sys_area = ptr + sys_use_offset;

      if (!strncmp (sys_area, ISOFORM_SysUse_Archimedes, ISOFORM_SysUse_ArchimedesLength)) {

         isoform = TRUE;

         M_loadword_littleendian(dir_info->load_addr, sys_area + ISOFORM_SysUse_LoadAddrOffset);
         M_loadword_littleendian(dir_info->exec_addr, sys_area + ISOFORM_SysUse_ExecAddrOffset);
         M_loadword_littleendian(dir_info->attribs,   sys_area + ISOFORM_SysUse_FileAttribOffset);

         DEBUG debug_output ("e9", "CDFS: ARC disc: load adress is 0x%x\n", dir_info->load_addr);

         pling = dir_info->attribs & ISOFORM_SysUseAttribs_PlingFile;

         dir_info->attribs &= 0xff;
      }
   }
   if (!isoform) { /* Not ISOFORM - get the date from the datestamp and translate */

      int   adjustment;
      char *stndrd_time, savngs_time, curr_time;
      struct _time_ordinals {
         unsigned int centiseconds;
         unsigned int seconds;
         unsigned int minutes;
         unsigned int hours;
         unsigned int days;
         unsigned int months;
         unsigned int years;
      }      os_time;
      OS_UTC utc;

      dir_info->attribs = FS_Attribs_OwnerRead
                        | FS_Attribs_PublicRead;

      iso_date = (ISO9660_Date *) (ptr + ISO9660_DirRec_DateOffset);

      _swix (Territory_ReadTimeZones, I0|O0|O1, -1, &stndrd_time, &savngs_time);
      _swix (Territory_ReadCurrentTimeZone, O0|O1, &curr_time, &adjustment);

      adjustment = adjustment / (60 * 100); /* in minutes */

      os_time.centiseconds = 0;
      os_time.seconds      = iso_date->seconds;
      os_time.minutes      = iso_date->minutes + (adjustment % 60);
      os_time.hours        = iso_date->hours   + (adjustment / 60);
      os_time.days         = iso_date->days;
      os_time.months       = iso_date->months;
      os_time.years        = iso_date->years + ISO9660_StartYearOffset;

      DEBUG debug_output ("e9", "CDFS: before trying to convert time\n");

      DEBUG debug_dump ("e9", &os_time, sizeof (struct _time_ordinals));
      if ((e = _swix (Territory_ConvertOrdinalsToTime,
                      _IN(0)|_IN(1)|_IN(2), -1, utc, &os_time)) != NULL) {
        return e;
      }
      DEBUG debug_output ("e9", "CDFS: after trying to convert time\n");

      dir_info->load_addr = FS_LoadAddr_DateStampIndicator | utc[4];
      M_loadword_littleendian (dir_info->exec_addr, utc);
   }
   ear_len        = * (ptr + ISO9660_DirRec_EARLenOffset);

   M_loadword_bigendian(extent_addr, (ptr+ISO9660_DirRec_ExtentAddrOffset));
   M_loadword_bigendian(extent,      (ptr+ISO9660_DirRec_DataLenOffset));

   dir_info->disc_addr = extent_addr + ear_len; /* LBA */
   dir_info->size      = extent;/*      - ear_len * logical_block_size; */

   dir_info->object_type    = dir_info->flags & ISO9660_DirRec_Flags_Directory
                               ? FS_ObjectType_Directory
                               : FS_ObjectType_File;
   associated               = dir_info->flags & ISO9660_DirRec_Flags_AssociatedFile;

   if (name_len == 1 && ptr[ISO9660_DirRec_FileIdentOffset] < ' ') {
      *(dir_info->name) = ptr[ISO9660_DirRec_FileIdentOffset];
      type = FS_FileType_Data;
   } else {
      type = fname_conv (dir_info->name, ptr+ISO9660_DirRec_FileIdentOffset,
                         name_len, associated, pling);
   }
   dir_info->flags |= (!hisi && * (ptr + ISO9660_DirRec_InterleaveGapOffset))
                         ? CDFS_DirInfoFlags_Interleaved
                         : 0;

   if (!isoform) {
      if (type != FS_FileType_NotFound) {
         dir_info->load_addr |= type<<FS_LoadAddr_FileTypeShift;
      } else {
         dir_info->load_addr |= FS_FileType_Data<<FS_LoadAddr_FileTypeShift;
      }
   }

   DEBUG debug_output ("e9", "CDFS: directory record %8x %8x (%8x @%8x [+%8x] ->) %8x %8x %1s %-32s\n",
                       dir_info->load_addr, dir_info->exec_addr, extent, extent_addr, ear_len,
                       dir_info->disc_addr, dir_info->size,
                       (dir_info->object_type == FS_ObjectType_Directory) ? "D" : " ",
                       (*dir_info->name == 0)?".":(*dir_info->name == 1)?"..":dir_info->name);


   return NULL;
}
