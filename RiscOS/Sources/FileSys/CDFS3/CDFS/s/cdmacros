        TTL     MACRO definitions required for CDFS > s.cdmacros
        ; -------------------------------------------------------------------
        ; Taken from DOSFS sources
        ;
        ; 29/1/96: TGR: Incorporated into CDFS 3
        ; -------------------------------------------------------------------


        ; -------------------------------------------------------------------
        ; The "ERRBLK" constructs a RISC OS style error block. The error
        ; number is taken from the variable "next_errnum". This is
        ; automatically updated ready for the next error definition.
        ; We are allocated (as a filing system) a maximum of 256 error
        ; numbers by RISC OS.
        ;
        ; next error number to be allocated
                GBLA    next_errnum
next_errnum     SETA    &00000000

        MACRO
$label  ERRBLK  $text
$label
num_$label      *       next_errnum     ; internal error number
        &       (num_$label :OR: (&00010000 :OR: (fs_number :SHL: 8)))
        =       "$text",null
        ALIGN

next_errnum     SETA    (next_errnum + &00000001)
        ASSERT  (next_errnum < &0100)  ; error number limit
        MEND

; **************************************************
; *** CLRV - Clear overflow flag - will set nzCv ***
; **************************************************
        MACRO
$label  CLRV    $cond
$label  CMP$cond pc, #0
        MEND

; **************************************************
; ***  SETV - Set overflow flag - will set NzcV  ***
; **************************************************
        MACRO
$label  SETV    $cond
$label  CMP$cond pc, #&80000000
        MEND


        ; -------------------------------------------------------------------
        ; Generate a suitable bit mask manifest.
        MACRO
$label  bit     $shift
$label  *       (1 :SHL: $shift)
        MEND

        ; -------------------------------------------------------------------
        ; Call the given C routine (returns with V set if (a1 == -1) return).
        ; r12 = private word pointer.
        ; a1,a2,a3,a4,av,v1,v2,v3 available as parameters.
        ; Requires the label "not_enough_stack" to be defined for the
        ; filing system.
        ; The location "sl_offset" should contain the label "_Lib$Reloc$Off".
        ; The location "_errptr" should contain the label "_syserr".
free_stack      *       &00000400       ; 1K minimum stack size
        MACRO
$label  Ccall   $address,$pushnumber,$pushstack
$label
        STMFD   sp!,{sl,fp,lr}          ; preserve entry state
        MOV     sl,sp,LSR #20           ; sl = MByte boundary below sp
        MOV     sl,sl,LSL #20           ; sl = real stack limit
        SUB     fp,sp,sl                ; fp = number of free bytes
        CMP     fp,#free_stack          ; minimum size of stack
        LDMCCFD sp!,{sl,fp,lr}          ; recover entry registers
        BCC     CD_not_enough_stack     ; and complain to the user
        LDMIA   sl,{v4,v5}              ; stack-frame description
        LDR     r12,[r12]               ; load private word contents
        LDMIB   r12,{r11,r12}           ; load stack-frame description
        STMIA   sl,{r11,r12}            ; and store at stack-limit
        ADRL    lr,sl_offset
        LDR     lr,[lr,#&00]            ; size of stack overflow buffer
        ADD     sl,sl,lr                ; add on stack overflow buffer
        MOV     fp,#&00000000           ; no frame-pointer
        ; stack items if the user has requested so
        [       ("$pushnumber" <> "")
        [       ("$pushstack" <> "") :LAND: ($pushnumber <> 0)
        STMFD   sp!,{$pushstack}
        ]
        ]
        BL      $address
        ; recover stack items if the user pushed any
        [       ("$pushnumber" <> "")
        [       ("$pushstack" <> "") :LAND: ($pushnumber <> 0)
        ADD     sp,sp,#($pushnumber * 4)
        ]
        ]
        ; -- This code should NOT update the PSR ----------------------------
        ADRL    lr,sl_offset
        LDR     lr,[lr,#&00]            ; stack overflow buffer
        SUB     sl,sl,lr                ; recover true stack-limit
        STMIA   sl,{v4,v5}              ; and restore stack-limit contents
        LDMFD   sp!,{sl,fp,lr}          ; recover entry state
        ; -------------------------------------------------------------------
        CMP     r0,#0                   ; (non-zero for error)
        BNE     %FT00                   ; error    = V set
        ; no error = V clear
        MOV     R0,R1                   ; put the 'register block' pointer in R0
        CLRV
        B       %FT01
00      ; error = V set
        SETV
01      ; exit with V reflecting error state
        MEND

        ; -------------------------------------------------------------------
        ; Place in register $a the maximum or minimum value of register $a
        ; and register $b.

        MACRO
$label  max     $a,$b
$label
        CMP     $a,$b
        MOVLT   $a,$b
        MEND

        MACRO
$label  min     $a,$b
$label
        CMP     $a,$b
        MOVGT   $a,$b
        MEND

        ; -------------------------------------------------------------------
        ; Allocate a fixed amount of object space, and place the given text
        ; into it.

        MACRO
$label  FixDCB  $n,$string
        ASSERT  ((:LEN: "$string") < $n)        ; complain if string too long
$label  =       "$string"                       ; place string into memory
        %       ($n - (:LEN: "$string"))        ; and zero the remainder
        MEND

        ; -------------------------------------------------------------------
        END
