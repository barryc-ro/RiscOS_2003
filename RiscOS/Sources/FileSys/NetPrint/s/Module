; > &.Arthur.NetPrint.Module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
	GET	Hdr:Machine.<Machine>
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Econet
        GET     Hdr:LowFSi
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:Debug
        GET     Hdr:NewErrors
        GET     Hdr:Tokens
        GET     Hdr:MsgTrans
        GET     Hdr:Hourglass
        GET     Hdr:Territory
        GET     Hdr:Symbols
        GET     Hdr:Proc
        GET     Hdr:HostFS

	GET	VersionASM

	GBLL	ReleaseVersion
ReleaseVersion SETL True

; OSS 5.51 Added to new Acorn sources to permit building of RISC OS 2 NetPrint once more.

        [       :LNOT: UseMsgTrans
        MACRO
        Err     $name
        ALIGN
Error$name
        DCD     ErrorNumber_$name
        DCB     ErrorString_$name
        DCB     0
        ALIGN
        MEND
        ]

; OSS 5.51 If building for RISC OS 3.1 or RISC OS 2 then don't want international help.

        [       UseInterHelp
NetPrint_Inter_Help     *       International_Help
        |
NetPrint_Inter_Help     *       0
        ]

ModuleBase ROUT
        DCD     0                                       ; Start
        DCD     InitCode - ModuleBase                   ; Initialisation
        DCD     DieCode - ModuleBase                    ; Die
        DCD     Service - ModuleBase                    ; Service
        DCD     ModuleTitle - ModuleBase                ; Title
        DCD     Help - ModuleBase                       ; Help String
        DCD     Commands - ModuleBase                   ; Combined Help/* command table
        DCD     Module_SWISystemBase + ( NetPrintSWI * Module_SWIChunkSize )
        DCD     SWICode - ModuleBase                    ; Offset of code to handle SWIs
        DCD     SWINames - ModuleBase                   ; Offset of a table of SWI names
        DCD     0                                       ; Terminate
 [ NetPrint_Inter_Help <> 0
        DCD     MessageFileName - ModuleBase
 |
        DCD     0
 ]

PSNameSize      * 6                                     ; A constant

        GBLS    ModuleName
ModuleName      SETS "NetPrint"

        ; ****************************

                GBLL    Debug
                GBLL    OSSDebug
                GBLL    DuplicateDebug
Debug           SETL    ( :LNOT: ReleaseVersion ) :LAND: False
OSSDebug        SETL    ( :LNOT: ReleaseVersion ) :LAND: False
DuplicateDebug  SETL    ( :LNOT: ReleaseVersion ) :LAND: False
Host_Debug      SETL    (Debug :LOR: OSSDebug :LOR: DuplicateDebug) :LAND: False

        ; ****************************

InitData ; Is interleaved with the store definitions
        ^ 0, wp                                         ; Main data area
        Byte    Data, 0
        Word    FirstLink
        DCD     NIL
        Word
        Byte    CurrentStation
        DCD     0
        Word
        Byte    CurrentNetwork
        DCD     0
        Word    CurrentName, 2                          ; 8 byte name/number block
        DCD     0, 0
        Word    TransmitCount
        DCD     250
        Word    TransmitDelay
        DCD     10
        Word    MachinePeekCount
        DCD     40
        Word    MachinePeekDelay
        DCD     5
        Word    ReceiveDelay
        DCD     2500
        Word    BroadcastDelay
        DCD     500
        [       UseMsgTrans
        Word    MessageBlockAddress
        DCD     0
        ]
        Word    Mode
        DCD     -1                                      ; -ve means no mode, 0 means name, +ve means number
EndOfInitData

        Word    RxBuffer                                ; To get the reply from the PS

        Word    TempStation                             ; Just some scratchpad workspace
        Word    TempNet
        Word    TempPSName, 2

NumberOfBuffers * 7
        Word    BroadcastHandles, NumberOfBuffers
        Byte    BroadcastBuffers, ( 8 * NumberOfBuffers )
        Word    StatusHandles, NumberOfBuffers
        Byte    StatusBuffers, ( (3+PSNameSize+1) * NumberOfBuffers )
        Word    ExpiryTime
        [       UseMsgTrans
        Word    MessageBlock, 4
        ]

        Byte    StatusBuffer, 60
        [       :LNOT: UseMsgTrans
        Overlap StatusBuffer, ErrorBuffer
        ]
        Byte    StationNumberBuffer, 8
        Byte    TemporaryBuffer, 256                    ; A buffer for cataloging
        Byte    TextBuffer, 48
        Byte    DataSize, 0

        ^ 0, r8                                         ; To associate R8 with the following data block
        Word    FCB_Identifier
        Word    Link                                    ; Link to next workspace (instantiation)
        Word    Handle                                  ; For FileSwitch
        Word    LastAckTime                             ; OSS 5.46: Monotonic time of last pkt ack
        Byte    ReplyPort                               ; OSS: Either &D1 (old) or &D0 (new)
        Byte    Features                                ; OSS: What features are in use
        Byte    InstanceRxBufferD0, 2                   ; OSS 5.49: increased to 2 bytes
        Byte    TxStuff, 0
        Word    Flag                                    ; Bottom bit is sequence number
        Word    DataPort                                ; &D1 once talking to the printer server
        Word    Station
        Word    Network
        Word    Buffer                                  ; Pointer to DataBuffer
        Word    FileExt                                 ; Current offset pointer into DataBuffer
        Word    Count                                   ; Used by low-level Econet primitives
        Word    Delay
        Word    BufferSize
        Byte    InstanceRxBuffer, 8
        Byte    RecordSize, 0                           ; Without the buffer

SmallBufferSize * 76
Identifier      * &7472504E                             ; "NPrt"

; OSS SJ Research: defines for the features bits in the connect protocol.
; Bits 3 to 6 are reserved currently.

Feature_NewReplyPort    *       (1 :SHL: 0)             ; Use reply port &D0 not &D1
Feature_CompressedData  *       (1 :SHL: 1)             ; Compressed data (not implemented)
Feature_DataPort        *       (1 :SHL: 2)             ; Use data port given by server
Feature_Extension       *       (1 :SHL: 7)             ; Extension packet (not implemented)

Help
        DCB     ModuleName
        DCB     9, "$Module_MajorVersion ($Module_Date)"
      [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
      ]
        DCB     0

        ALIGN

InitCode        ROUT
        Push    lr
        LDR     r2, [ r12 ]
        TEQ     r2, #0
        MOVNE   wp, r2
        BNE     SoftStart
        MOV     r0, #Port_PrinterServerData
        SWI     XEconet_ClaimPort
        MOVVC   r0, #Port_PrinterServerInquiryReply
        SWIVC   XEconet_ClaimPort
        MOVVC   r0, #Port_PrinterServerDataReply
        SWIVC   XEconet_ClaimPort
        BVS     PortClaimError
        [       Debug
        DLINE   "Ports claimed"
        ]
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #( :INDEX: DataSize )               ; Just claim major workspace
        SWI     XOS_Module                              ; This will return R2
        STRVC   r2, [ r12 ]                             ; Remember major workspace
        MOV     wp, r2                                  ; Set up workspace pointer
        ADRVC   r0, BootPrinterName
        SWIVC   XOS_CLI
        Pull    pc, VS                                  ; Return error

SoftStart
        [       Debug
        DLINE   "Space claimed, Name booted"
        ]
        ADR     r0, Data
        ADR     r1, InitData
        ADR     r4, EndOfInitData
InitLoop
        LDR     r3, [ r1 ], #4
        STR     r3, [ r0 ], #4
        TEQ     r1, r4
        BNE     InitLoop

        MOV     r0, #ReadCMOS                           ; Now read in the configured state
        MOV     r1, #NetPSIDCMOS
        SWI     XOS_Byte
        Pull    pc, VS                                  ; Return error
        MOVS    r3, r2                                  ; Check flag for numeric or textual, and save
        BEQ     StoredConfigurationIsAName
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        Pull    pc, VS                                  ; Return error
        ST      r3, CurrentStation
        ST      r2, CurrentNetwork
        ST      sp, Mode                                ; +ve means number
        B       StartAsAFilingSystem

StoredConfigurationIsAName
        ADR     r10, CurrentName                        ; Destination
        BL      ReadConfiguredName
        Pull    pc, VS                                  ; Return error
        MOV     r14, #0
        ST      r14, Mode                               ; 0 means name
StartAsAFilingSystem
        [       Debug
        DLINE   "Space initialised, CMOS read"
        ]
        MOV     r0, #FSControl_AddFS
        ADR     r1, ModuleBase
        LDR     r2, =( InfoBlock - ModuleBase )
        MOV     r3, wp                                  ; Address of our private workspace
        SWI     XOS_FSControl
        Pull    pc                                      ; Return, maybe with error

BootPrinterName
        DCB     "Set PrinterType$4 ", ModuleName, ":", 13
        ALIGN

PortClaimError                                          ; Entered with V set
        LDR     r14, [ r0 ]                             ; Get error number
        LDR     r3, =ErrorNumber_NoSuchSWI
        TEQ     r14, r3                                 ; This is the error we expect
        [       UseMsgTrans
        Pull    pc, NE
        ADR     r0, ErrorNoEconet
        MOV     r1, #0                                  ; No need for message block, this is global
        MOV     r2, #0                                  ; Use it where it lies
        SWI     XMessageTrans_ErrorLookup
        Pull    pc

ErrorNoEconet
        DCD     ErrorNumber_NoEconet
        DCB     "NoEco", 0
        ALIGN
        |
        ADREQ   r0, ErrorNoEconet                       ; So translate to this one
        Pull    pc

        Err     NoEconet
        ]

ServiceTable
        DCD     0
        DCD     ServiceMain - ModuleBase
        DCD     Service_FSRedeclare
        DCD     Service_ReAllocatePorts
        DCD     0

        DCD     ServiceTable - ModuleBase
Service ROUT
        MOV     r0, r0
        TEQ     r1, #Service_FSRedeclare
        TEQNE   r1, #Service_ReAllocatePorts
        MOVNE   pc, lr
ServiceMain
        TEQ     r1, #Service_FSRedeclare
        BEQ     DoReDeclare
DoReAllocatePorts
        Push    "r0, lr"
        MOV     r0, #Port_PrinterServerData
        SWI     XEconet_ClaimPort                       ; No way to return the error
        MOV     r0, #Port_PrinterServerInquiryReply
        SWI     XEconet_ClaimPort                       ; No way to return the error
        MOV     r0, #Port_PrinterServerDataReply
        SWI     XEconet_ClaimPort                       ; No way to return the error
        Pull    "r0, pc"

DoReDeclare
        Push    "r0-r3, lr"
        MOV     r0, #FSControl_AddFS
        ADR     r1, ModuleBase
        LDR     r2, =( InfoBlock - ModuleBase )
        LDR     r3, [ r12 ]                             ; The address of my private workspace
        SWI     XOS_FSControl                           ; No way to return the error
        Pull    "r0-r3, pc"

DieCode ROUT
        LDR     wp, [ r12 ]
        Push    "r7-r11, lr"                            ; Save registers corrupted in internal routines!
        BL      ShutDown
        MOV     r0, #FSControl_RemoveFS
        ADR     r1, ModuleTitle
        SWI     XOS_FSControl
        [       UseMsgTrans
        [       Debug
        DREG    r0, "Closing message file &"
        ]
        LD      r0, MessageBlockAddress                 ; Is it open?
        MOV     r1, #0
        ST      r1, MessageBlockAddress                 ; Mark it as closed
        TEQ     r0, #0
        SWINE   XMessageTrans_CloseFile                 ; Close it if it was open
        ]       ; UseMsgTrans
        MOV     r0, #Port_PrinterServerData
        SWI     XEconet_ReleasePort
        MOV     r0, #Port_PrinterServerInquiryReply
        SWI     XEconet_ReleasePort
        MOV     r0, #Port_PrinterServerDataReply
        SWI     XEconet_ReleasePort
        CLRV                                            ; Ignore any errors for
        Pull    "r7 - r11, pc"

ReadConfiguredName
        ; => R10 points at destination for name
        Push    "r0-r2, r10, lr"
        MOV     r0, #ReadCMOS
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        BVS     ExitReadName
        CMP     r2, #" "
        MOVLE   r2, #0
        STRB    r2, [ r10 ], #1
        BLE     FinishedReadingName
        MOV     r1, #PSNameCMOS - 1
ReadConfiguredLoop
        INC     r1
        CMP     r1, #PSNameCMOS + PSNameSize - 1        ; One already read
        BGE     TerminateConfiguredName
        SWI     XOS_Byte
        BVS     ExitReadName
        CMP     r2, #" "
        MOVLE   r2, #0
        STRB    r2, [ r10 ], #1
        BGT     ReadConfiguredLoop
TerminateConfiguredName
        MOV     r2, #0
        STRB    r2, [ r10 ], #1
FinishedReadingName
        CLRV
ExitReadName
        STRVS   r0, [ sp ]
        Pull    "r0-r2, r10, pc"

BroadcastForNames ROUT
        Push    "r0-r8, lr"
        [       Debug
        DLINE   "BroadcastForNames"
        ]
        MOV     r8, #-1
        MOV     r0, #NIL
        ADR     r1, BroadcastHandles
        ADR     r2, StatusHandles
10
        STR     r0, [ r1 ], #4
        STR     r0, [ r2 ], #4
        INC     r8
        TEQ     r8, #( NumberOfBuffers - 1 )
        BNE     %10                                     ; To count round the create loop
        MOV     r1, #0                                  ; Any station
        MOV     r2, #0                                  ; Any net
        MOV     r4, #8                                  ; Buffer size is 8
20
        MOV     r0, #Port_PrinterServerInquiryReply
        ADR     r3, BroadcastBuffers
        ADD     r3, r3, r8, LSL #3                      ; Buffer size is 8
        STMIA   r3, { r1, r2 }                          ; Zero the reception area
        SWI     XEconet_CreateReceive
        BVS     ExitFromBroadcast
        [       Debug
        DREG    r0, "CreateReceive returns &"
        ]
        ADR     r3, BroadcastHandles
        ADD     r3, r3, r8, LSL #2                      ; Make up to words
        STR     r0, [ r3 ]
        [       Debug
        DREG    r3, "Stored at &"
        ]
        DECS    r8
        BPL     %20
        ; Now do the broadcast
        MOV     r0, #0                                  ; Control
        MOV     r1, #Port_PrinterServerInquiry
        ADR     r4, NameBroadcastData
        BL      DoBroadcast
        Pull    "r0-r8, pc", VC                         ; Return if OK
ExitFromBroadcast
        INC     sp, 4                                   ; Trash the original R0
        BL      AbandonReceptions                       ; Preserving R0
        SETV
        Pull    "r1-r8, pc"

NameBroadcastData
        DCB     "PRINT ", 6, 0
        ALIGN

        [       UseMsgTrans
MessageTransGSLookup1
        Push    "r5, r6, lr"
        MOV     r5, #0
        MOV     r6, #0
        BL      MessageTransGSLookup3
        Pull    "r5, r6, pc"

MessageTransGSLookup3
        Push    "r7, lr"
        LD      r0, MessageBlockAddress
        CMP     r0, #0                                  ; Clears V
        BNE     DoGSLookup
        Push    "r1, r2"
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r0, MessageBlock
        STRVC   r0, MessageBlockAddress
        Pull    "r1, r2"
DoGSLookup
        MOV     r7, #0
        SWIVC   XMessageTrans_GSLookup
        Pull    "r7, pc"

MakeErrorWithModuleName
        Push    "r4, lr"
        ADR     r4, ModuleTitle
        BL      MessageTransErrorLookup1
        Pull    "r4, pc"

MessageTransErrorLookup
        Push    "r4, lr"
        MOV     r4, #0
        BL      MessageTransErrorLookup1
        Pull    "r4, pc"

MessageTransErrorLookup1
        Push    "r5, lr"
        MOV     r5, #0
        BL      MessageTransErrorLookup2
        Pull    "r5, pc"

MessageTransErrorLookup2
        Push    "r6, lr"
        MOV     r6, #0
        BL      MessageTransErrorLookup3
        Pull    "r6, pc"

MessageTransErrorLookup3
        Push    "r1-r3, r7, lr"
        LD      r1, MessageBlockAddress
        CMP     r1, #0                                  ; Clears V
        BNE     DoErrorLookup
        MOV     r7, r0
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r1, MessageBlock
        STRVC   r1, MessageBlockAddress
        MOV     r0, r7                                  ; Preserve R0 even in the error case
DoErrorLookup
        MOV     r2, #0
        MOV     r3, #0
        MOV     r7, #0
        [       Debug
        DREG    r4, "Lookup: %0 is at &", cc
        DSTRING r4, " ==> "
        DREG    r5, "Lookup: %1 is at &", cc
        DSTRING r5, " ==> "
        DREG    r6, "Lookup: %2 is at &", cc
        DSTRING r6, " ==> "
        ]
        SWIVC   XMessageTrans_ErrorLookup
        Pull    "r1-r3, r7, pc"

MessageFileName
        DCB     "Resources:$.Resources.NetPrint.Messages", 0
        ALIGN
        ]       ; UseMsgTrans

        LTORG

        GET     s.Interface
        GET     s.Commands
        GET     s.FileSystem

        [    Debug :LOR: OSSDebug :LOR: DuplicateDebug
        InsertDebugRoutines
        ]

        END
