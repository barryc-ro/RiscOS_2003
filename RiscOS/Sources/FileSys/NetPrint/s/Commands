        TTL     ==> &.Arthur.NetPrint.Commands

Commands
        =       "SetPS",0
        ALIGN
        &       SetPScode - ModuleBase
        InfoWord 1, 0, NetPrint_Inter_Help
        &       BadSetPSSyn - ModuleBase
        &       HelpSetPS - ModuleBase

        =       "PS",0
        ALIGN
        &       PScode - ModuleBase
        InfoWord 1, 0, NetPrint_Inter_Help
        &       BadPSSyn - ModuleBase
        &       HelpPS - ModuleBase

        =       "ListPS",0
        ALIGN
        &       ListPScode - ModuleBase
        InfoWord 1, 0, NetPrint_Inter_Help
        &       BadListPSSyn - ModuleBase
        &       HelpListPS - ModuleBase

        =       "PS",0
        ALIGN
        &       ConfigurePS - ModuleBase
        InfoWord 1, 1, Status_Keyword_Flag :OR: NetPrint_Inter_Help
        &       SyntaxOfConfigurePS - ModuleBase
        &       HelpForConfigurePS - ModuleBase

        &       0 ; Table terminator
        ALIGN


        GET s.HelpTokens


SetPScode ROUT
        ; R0 points to parameter after command
        ; Trash R1 to R6
        LDR     wp, [ r12 ]
        Push    lr
        BL      GSTransName
        Pull    pc, VS
        BEQ     SetByNumber
SetByName
        MOV     r0, r1
        BL      SetPSName
        Pull    pc

GSTransName
        Push    "r0-r2, lr"
        ADR     r1, TemporaryBuffer                     ; Buffer to translate into
        MOV     r2, #Eight + BitTwentyNine              ; Space as terminator
        SWI     XOS_GSTrans
        BVS     ExitGSTransName
        LDRCS   r0, [ sp, #0 ]                          ; Restore initial name pointer
        BCS     ValidatedNameTooBig
        MOV     r0, #13                                 ; Terminator
        STRB    r0, [ r1, r2 ]                          ; Terminate GSTrans'd string
        LDRB    r0, [ r1 ]
        STR     r1, [ sp, #4 ]                          ; R1 on exit points at string
        BL      NameOrNumber
ExitGSTransName
        STRVS   r0, [ sp, #0 ]
        Pull    "r0-r2, pc"

PScode ROUT
        ; R0 points to parameter after command
        ; Trash R1 to R6
        LDR     wp, [ r12 ]
        Push    lr
        BL      GSTransName
        Pull    pc, VS
        BNE     BindByName
SetByNumber
        SWI     XEconet_ReadStationNumber               ; Returns R3.R2
        Pull    pc, VS                                  ; Return because of error
        LD      r0, CurrentStation
        TEQ     r0, #0
        BNE     OKToSetNumber                           ; Since it is already
        CMP     r2, #-1
        CMPNE   r3, #-1
        BNE     OKToSetNumber                           ; Since both parts are given
        ADRL    r0, ErrorUnableToDefault
        [       UseMsgTrans
        BL      MessageTransErrorLookup
        |
        SETV
        ]
        Pull    pc                                      ; Return because of error

OKToSetNumber
        MOV     r0, r2                                  ; The given station
        CMP     r0, #-1                                 ; Was it not given ?
        LDREQB  r0, CurrentStation                      ; Yes
        MOV     r1, r3                                  ; The given network
        CMP     r1, #-1                                 ; Was it not given ?
        LDREQB  r1, CurrentNetwork                      ; Yes
        BL      SetPSNumber
        Pull    pc

BindByName
        MOV     r0, r1                                  ; Address of string argument
        LDRB    r1, [ r0 ]                              ; Check for a null name
        CMP     r1, #" "                                ; Is the first character a terminator
        Pull    lr, LS                                  ; Yes so report current stuff
        BLS     PrintCurrentServerNameAndStatus
        BL      BindPSName                              ; Returns bound name in R10+R11
        Push    "r10, r11"                              ; Save the name for later
        BLVC    SetPSNumber                             ; Set the result of a successful bind
        Pull    "r10, r11"                              ; Get the name back
        ADRVC   r14, CurrentName                        ; Store the name as well
        STMVCIA r14, { r10, r11 }                       ; Easy when a string fits in two registers
        Pull    pc                                      ; Exit with accumulated error state

PrintStr
        =       "PRINT ", 1
        =       0
        ALIGN

ListPScode      ROUT
        LDR     wp, [ r12 ]
        TEQ     r1, #0                                  ; The number of parameters
        BNE     Examine
Catalog
        ; This will just print a list of all the printer
        ; numbers and names, in 16 character columns
        Push    "lr"
        MOV     r0, #0                                  ; Format: Names and numbers
        ADR     r1, TemporaryBuffer
        MOV     r2, #?TemporaryBuffer
        LDR     r3, BroadcastDelay
        SWI     XNetPrint_ListServers
        Pull    pc, VS
        [       Debug
        DREG    r0, "SWI XNetPrint_ListServers returns &", cc
        DREG    r3, " entries and a status of &"
        ]
        MOVS    r8, r0                                  ; Number returned
        BEQ     ExitFromCataloging                      ; None, so exit
        ADR     r7, TemporaryBuffer                     ; Start of received data entries
CatalogLoop
        [       Debug
        DREG    r7, "Displaying record at &"
        ]
        ADR     r1, TextBuffer
        MOV     r2, #8
        LDRB    r3, [ r7 ], #1
        LDRB    r4, [ r7 ], #1
        Push    "r3, r4"                                ; Put returned station address in consecutive words
        MOV     r0, sp
        SWI     XOS_ConvertFixedNetStation
        INC     sp, 8
        BVS     ExitFromCataloging
        MOV     r0, #" "
        STRB    r0, [ r1 ], #1
        MOV     r3, #8
SoftSpaceLoop
        LDRB    r0, [ r7 ], #1
        TEQ     r0, #0                                  ; Is this the end of the name?
        MOVEQ   r0, #" "                                ; If yes, then substitute a Space
        SUBEQ   r7, r7, #1                              ; Move back if it is the terminator
        STRB    r0, [ r1 ], #1
        DECS    r3
        BNE     SoftSpaceLoop
        STRB    r3, [ r1 ]                              ; Terminate the string
        ADR     r0, TextBuffer
        MOV     r1, #0
HardSpaceLoop
        LDRB    r2, [ r0, r1 ]
        CMP     r2, #" "
        MOVEQ   r2, #31
        STREQB  r2, [ r0, r1 ]
        INC     r1
        BGE     HardSpaceLoop
        SWI     XOS_PrettyPrint
        BVS     ExitFromCataloging
        INC     r7                                      ; Move to the next record
        DECS    r8
        BNE     CatalogLoop
ExitFromCataloging
        SWIVC   XOS_NewLine
        Pull    pc

Examine
        Push    lr
        MOV     r0, #2                                  ; Format: Names, numbers, and status
        ADR     r1, TemporaryBuffer
        MOV     r2, #?TemporaryBuffer
        LDR     r3, BroadcastDelay
        SWI     XNetPrint_ListServers
        Pull    pc, VS
        [       Debug
        DREG    r0, "SWI XNetPrint_ListServers returns &", cc
        DREG    r3, " entries and a status of &"
        ]
        MOVS    r8, r0                                  ; Number returned
        BEQ     ExitFromCataloging                      ; None, so exit
        ADR     r7, TemporaryBuffer                     ; Start of received data entries
ExamineLoop
        [       Debug
        DREG    r7, "Displaying record at &"
        ]
        ADR     r1, TextBuffer
        MOV     r2, #?TextBuffer - 3                    ; Two spaces added manually
        LDRB    r3, [ r7 ], #1
        LDRB    r4, [ r7 ], #4                          ; Skip status for a moment
        SUB     r6, r7, #3                              ; Keep the address of the status
        Push    "r3, r4"                                ; Put returned station address in consecutive words
        MOV     r0, sp
        SWI     XOS_ConvertFixedNetStation
        INC     sp, 8
        BVS     ExitFromCataloging
        MOV     r0, #" "
        STRB    r0, [ r1 ], #1
        MOV     r3, #8
SoftSpaceLoop2
        LDRB    r0, [ r7 ], #1
        TEQ     r0, #0                                  ; Is this the end of the name?
        MOVEQ   r0, #" "                                ; If yes, then substitute a Space
        SUBEQ   r7, r7, #1                              ; Move back if it is the terminator
        STRB    r0, [ r1 ], #1
        DEC     r2                                      ; Adjust space
        DECS    r3
        BNE     SoftSpaceLoop2
        MOV     r0, r6                                  ; The address of the status
        SWI     XNetPrint_ConvertStatusToString
        ADRVC   r0, TextBuffer
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     ExitFromCataloging
        INC     r7                                      ; Move to the next record
        DECS    r8
        BNE     ExamineLoop
        B       ExitFromCataloging

PrintCurrentServerNameAndStatus ROUT
        [       UseMsgTrans
        Push    lr
        LD      r14, CurrentStation
        TEQ     r14, #0
        BNE     FullHeader
        ADR     r1, Token_PSName
        MOV     r5, #0
        MOV     r6, #0
PrintHeader
        ADR     r4, CurrentName
        BL      LookupAndPrint
        SWIVC   XOS_NewLine
        Pull    pc

LookupAndPrint ROUT
        Push    "lr"                                    ; 5.45 OSS: removed R7 from Push
        ADR     r2, TemporaryBuffer
        MOV     r3, #?TemporaryBuffer
        BL      MessageTransGSLookup3
        ADDVC   r4, r2, r3                              ; Compute the address of the terminator
        ADRVC   r0, TemporaryBuffer
        MOVVC   r1, #0                                  ; Use MOS dictionary
        SWIVC   XOS_PrettyPrint
        Pull    "pc"

FullHeader
        BL      GetStatus                               ; Into R0
        ADRVC   r1, StatusBuffer
        MOVVC   r2, #?StatusBuffer
        BLVC    AddStatus                               ; Given in R0
        ADRVC   r0, CurrentStation
        ADRVC   r1, StationNumberBuffer
        MOVVC   r2, #?StationNumberBuffer
        SWIVC   XOS_ConvertNetStation
        Pull    pc, VS
        ADRL    r1, Token_PSFullHeader
        ADR     r5, StationNumberBuffer
        ADR     r6, StatusBuffer
        B       PrintHeader

GetGivenStatus ROUT
        Push    "r0, r1, r2, lr"                        ; Make stack frame for reception into 'R0'
        B       %50

GetStatus
        Push    "r0, r1, r2, lr"                        ; Make stack frame for reception into 'R0'
        ADR     r1, CurrentStation
50
        MOV     r0, #Port_PrinterServerInquiryReply
        LDMIA   r1, { r1, r2 }                          ; Station and Net
        MOV     r3, sp
        MOV     r4, #4
        SWI     XEconet_CreateReceive
        BVS     ExitFromGetStatus
        [       Debug
        DREG    r0, "GetStatus Rx handle is &"
        ]
        MOV     r10, r0                                 ; Handle
        MOV     r0, #0
        MOV     r3, r2                                  ; Net
        MOV     r2, r1                                  ; Station
        MOV     r1, #Port_PrinterServerInquiry
        ADRL    r4, PrintStr
        MOV     r5, #8
        ADR     r6, TransmitCount
        LDMIA   r6, { r6, r7 }
        BL      DoTransmit
        BLVS    AbandonR10
        BVS     ExitFromGetStatus

20
        BL      WaitForReception
ExitFromGetStatus
        STRVS   r0, [ sp ]
        Pull    "r0-r2, pc"
        |       ; UseMsgTrans
        MOV     r11, lr
        ADR     r1, TemporaryBuffer
        MOV     r2, #80
        BL      AddString
        DCB     "Printer = '", 0
        ALIGN
        MOVVS   pc, r11
        LDRB    r0, CurrentName
        TEQ     r0, #0                                  ; Is the name valid?
        ADRNE   r0, CurrentName
        BLNE    CopyString                              ; If it is copy it out
        MOVVS   pc, r11
        BL      AddString
        DCB     "'", 0
        ALIGN
        MOVVS   pc, r11
        LD      r14, CurrentStation
        TEQ     r14, #0
        BEQ     EndOfHeader
        MOV     r0, #60
        BL      TabToPosition
        MOVVS   pc, r11
        BL      AddString
        DCB     "Station = ", 0
        ALIGN
        ADRVC   r0, CurrentStation
        SWIVC   XOS_ConvertNetStation
        MOVVC   r0, #40
        BLVC    TabToPosition
        MOVVS   pc, r11
        BL      AddString
        DCB     "Status  = ", 0
        ALIGN
        BLVC    GetStatus                               ; Into R0
        BLVC    AddStatus                               ; Given in R0
EndOfHeader
        MOVVS   pc, r11
        BL      AddString
        DCB     10, 13, 10, 0
        ALIGN
        ADRVC   r0, TemporaryBuffer
        SWIVC   XOS_Write0
        MOV     pc, r11

GetGivenStatus ROUT
        Push    "r0, r1, r2, lr"                        ; Make stack frame for reception into 'R0'
        B       %50

GetStatus
        Push    "r0, r1, r2, lr"                        ; Make stack frame for reception into 'R0'
        ADR     r1, CurrentStation
50
        MOV     r0, #Port_PrinterServerInquiryReply
        LDMIA   r1, { r1, r2 }                          ; Station and Net
        MOV     r3, sp
        MOV     r4, #4
        SWI     XEconet_CreateReceive
        BVS     ExitFromGetStatus
        [       Debug
        DREG    r0, "GetStatus Rx handle is &"
        ]
        MOV     r10, r0                                 ; Handle
        MOV     r0, #0
        MOV     r3, r2                                  ; Net
        MOV     r2, r1                                  ; Station
        MOV     r1, #Port_PrinterServerInquiry
        ADRL    r4, PrintStr
        MOV     r5, #8
        ADR     r6, TransmitCount
        LDMIA   r6, { r6, r7 }
        BL      DoTransmit
        BLVS    AbandonR10
        BVS     ExitFromGetStatus

20
        BL      WaitForReception
ExitFromGetStatus
        STRVS   r0, [ sp ]
        Pull    "r0-r2, pc"
        ]       ; UseMsgTrans

AddString       ROUT
        Push    "r1, r3"
        BIC     lr, lr, #ARM_CC_Mask                    ; Remove PSR
10
        DECS    r2
        BEQ     %50
        LDRB    r0, [ lr ], #1
        STRB    r0, [ r1 ], #1
        TEQ     r0, #0
        BNE     %10
        DEC     r1                                      ; Point back at the zero
        INC     r2
        INC     lr, 3                                   ; Get to the right word boundary
        B       %30

CopyString
        Push    "r1, r3"
20
        DECS    r2
        BEQ     %50
        LDRB    r3, [ r0 ], #1
        CMP     r3, #" "
        MOVLS   r3, #0
        STRB    r3, [ r1 ], #1
        BHI     %20
        DEC     r1                                      ; Point back at the zero
        INC     r2
30
        Pull    "r0, r3"
        BIC     pc, lr, #3                              ; Implicit

TabToPosition                                           ; Position is given in R0 and is exit value of R2
        Push    "r1, r3"
        MOV     r3, #" "
40
        CMP     r2, r0
        BLS     %60
        STRB    r3, [ r1 ], #1
        DECS    r2
        BNE     %40
50
        Pull    "r1, r3"
        ADR     r0, ErrorBufferOverflow
        [       UseMsgTrans
        BIC     lr, lr, #3                              ; Implicit
        B       MessageTransErrorLookup
        |
        SETV
        BIC     pc, lr, #3                              ; Implicit
        ]

ErrorBufferOverflow
        DCD     ErrorNumber_CDATBufferOverflow
        DCB     "BufOFlo", 0
        ALIGN

60
        MOV     r3, #0
        STRB    r3, [ r1 ]
        B       %30

        LTORG

ConfigurePS     ROUT
        Push    lr
        LDR     wp, [ r12 ]
        CMP     r0, #1
        BGT     %60                                     ; Configure
        BEQ     %02                                     ; Print status

        [       UseMsgTrans
01
        ADRL    r1, SyntaxOnlyOfConfigurePS
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        BL      LookupAndPrint
        SWIVC   XOS_NewLine
        B       %95

02      ; Print the current seting of *Con. PS
        MOV     r0, #ReadCMOS
        MOV     r1, #NetPSIDCMOS
        SWI     XOS_Byte
        BVS     %95
        TEQ     r2, #0                                  ; Check flag for Numeric or Textual
        BEQ     %20                                     ; Text
        MOV     r3, r2                                  ; Save station number
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        BVS     %95
        MOV     r1, r3
        Push    "r1, r2"
        MOV     r0, sp
        ADR     r1, TempPSName
        MOV     r2, #?TempPSName
        SWI     XOS_ConvertNetStation
        INC     sp, 8
        ADR     r1, Token_PSNumber
        B       %50                                     ; Now print it out

20
        ADR     r4, TempPSName
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        BVS     %95
        STRB    r2, [ r4 ], #1
        TEQ     r2, #0
        BEQ     %40
        MOV     r1, #PSNameCMOS
30
        SWI     XOS_Byte
        BVS     %95
        STRB    r2, [ r4 ], #1
        TEQ     r2, #0
        BEQ     %40
        INC     r1
        TEQ     r1, #PSNameCMOS + 5
        BNE     %30
        MOV     r2, #0
        STRB    r2, [ r4 ]
40
        ADR     r1, Token_PSName
50
        ADR     r4, TempPSName
        MOV     r5, #0
        MOV     r6, #0
        BL      LookupAndPrint
        B       %95

Token_PSName
        DCB     "PSName", 0
Token_PSNumber
        DCB     "PSNumb", 0
Token_PSFullHeader
        DCB     "PSHead", 0
        ALIGN
        |       ; UseMsgTrans
01
        ADRL    r0, SyntaxOnlyOfConfigurePS
        MOV     r1, #0                                  ; Use MOS dictionary
        SWI     XOS_PrettyPrint
        SWIVC   XOS_NewLine
        B       %95

02      ; Print the current seting of *Con. PS
        ADR     r1, TemporaryBuffer
        MOV     r3, #30
        BL      AddString
        =       "Printer server ", 0
        ALIGN
        MOV     r4, r1
        MOVVC   r0, #ReadCMOS
        MOVVC   r1, #NetPSIDCMOS
        SWIVC   XOS_Byte
        BVS     %95
        TEQ     r2, #0                                  ; Check flag for Numeric or Textual
        BEQ     %20                                     ; Text
        MOV     r3, r2                                  ; Save station number
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        BVS     %95
        MOV     r1, r3
        Push    "r1, r2"
        MOV     r0, sp
        MOV     r1, r4
        MOV     r2, #10
        SWI     XOS_ConvertNetStation
        INC     sp, 8
        B       %50

20
        MOV     r2, #"'"
        STRB    r2, [ r4 ], #1
        MOV     r1, #NetPSIDCMOS + 1
        SWI     XOS_Byte
        BVS     %95
        TEQ     r2, #0
        BEQ     %40
        STRB    r2, [ r4 ], #1
        MOV     r1, #PSNameCMOS
30
        SWI     XOS_Byte
        BVS     %95
        TEQ     r2, #0
        BEQ     %40
        STRB    r2, [ r4 ], #1
        INC     r1
        TEQ     r1, #PSNameCMOS + 5
        BNE     %30
40
        MOV     r2, #"'"
        STRB    r2, [ r4 ], #1
        MOV     r1, r4
50
        ADR     r0, TemporaryBuffer
        MOV     r1, #0                                  ; Use MOS dictionary
        SWI     XOS_PrettyPrint
        SWIVC   XOS_NewLine
        B       %95
        ]       ; UseMsgTrans

60      ; Configure
        MOV     r1, r0
61
        LDRB    r0, [ r1 ], #1
        TEQ     r0, #" "
        BEQ     %61
        DEC     r1
        BL      NameOrNumber
        BNE     %70                                     ; Named printer server
        SWI     XEconet_ReadStationNumber               ; R3.R2
        BVS     %95
        MOV     r4, r2                                  ; Save the station number
        MOV     r0, #ReadCMOS
        MOV     r1, #NetPSIDCMOS
        SWI     XOS_Byte
        BVS     %95
        TEQ     r2, #0
        BNE     %68                                     ; Was numeric
        CMP     r4, #-1
        BEQ     %67                                     ; Station number always required
        CMP     r3, #-1
        BNE     %68
        SWI     XEconet_ReadLocalStationAndNet
        BVS     %95
        TEQ     r1, #0                                  ; Test the net number
        MOVEQ   r3, #0                                  ; Allow station number only with no bridges
        BEQ     %68
67
        ADR     r0, ErrorUnableToDefault
        [       UseMsgTrans
        BL      MessageTransErrorLookup
        B       %95

ErrorUnableToDefault
        DCD     ErrorNumber_UnableToDefault
        DCB     "FullNet", 0
        ALIGN
        |
        SETV
        B       %95

        Err     UnableToDefault
        ]

68
        MOV     r0, #WriteCMOS
        MOV     r1, #NetPSIDCMOS
        MOVS    r2, r4
        SWIPL   XOS_Byte
        BVS     %95
        MOV     r1, #NetPSIDCMOS + 1
        MOVS    r2, r3
        SWIPL   XOS_Byte
        B       %95

70
        CMP     r0, #" "
        BLT     %01
        MOV     r2, #0
75
        LDRB    r0, [ r1, r2 ]
        INC     r2
        CMP     r0, #" "
        BGT     %75
        CMP     r2, #7
        BGT     %90
        MOV     r4, r1
        MOV     r0, #WriteCMOS
        MOV     r1, #NetPSIDCMOS
        MOV     r2, #0
        SWI     XOS_Byte
        BVS     %95
        MOV     r1, #NetPSIDCMOS + 1
        LDRB    r2, [ r4 ], #1
        SWI     XOS_Byte
        BVS     %95
        MOV     r1, #PSNameCMOS - 1
        MOV     r3, #0
80
        LDRB    r2, [ r4, r3 ]
        INC     r1
        INC     r3
        CMP     r2, #" "
        BLE     %85
        SWI     XOS_Byte
        BVS     %95
        B       %80

85
        CMP     r3, #6
        BGE     %95
        MOV     r2, #0
        SWI     XOS_Byte
        B       %95

90
        MOV     r0, #2
        SETV
95
        Pull    pc

ValidateReadAddress
        Push    lr
        [       Debug
        DREG    r0, "Validating read addresses &", cc
        DREG    r1, " to &"
        ]
        SWI     XOS_ValidateAddress
        Pull    pc, VS
        ADRCS   Error, ErrorCoreNotReadable
        B       ValidateExit

        [       UseMsgTrans
ErrorCoreNotReadable
        DCD     ErrorNumber_CoreNotReadable
        DCB     "BadRead", 0
        ALIGN

ErrorCoreNotWriteable
        DCD     ErrorNumber_CoreNotWriteable
        DCB     "BadWrt", 0
        ALIGN
        |       ; UseMsgTrans
        Err     CoreNotReadable
        Err     CoreNotWriteable
        ]       ; UseMsgTrans

ValidateWriteAddress
        Push    lr
        [       Debug
        DREG    r0, "Validating write addresses &", cc
        DREG    r1, " to &"
        ]
        SWI     XOS_ValidateAddress
        Pull    pc, VS
        ADRCS   Error, ErrorCoreNotWriteable
ValidateExit
        [       UseMsgTrans
        BLCS    MessageTransErrorLookup
        |
        SETV    CS
        ]
        Pull    pc

        LTORG

        END
