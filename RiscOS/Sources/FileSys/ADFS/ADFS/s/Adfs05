;> Adfs05
; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; LVR - Lawrence Rust, Cambridge Beacon
;
;
; 08-Mar-91  11:29  LVR
; Merge winchester and floppy driver code
;
; 11-Mar-91  14:58  CDP
; ReadNewCMOS now returns IDE bits with ST506 bits in R4.
;
; 09-Apr-91  17:00  CDP
; ParseAnyDrive (used by configure etc.) internationalised.
;
; 17-Sep-91  10:19  LVR
; Re-included debug code to screen if Dev AND Debug
;
; 16-Dec-91  09:49  LVR
; Set Host_Debug to False
;
;*End of change record*

; +++++++++++++++++++++++ For Tube work: ++++++++++++++++++++++++++++++++++++++

        GBLS     GetAroundBleedingAAsmYetAgain
GetAroundBleedingAAsmYetAgain SETS "; No debug required"
 [ Dev
  [ Debug
GetAroundBleedingAAsmYetAgain SETS " GET Hdr:Debug"
  |
GetAroundBleedingAAsmYetAgain SETS " ! 0, ""No debug required"""
  ]
 ]
$GetAroundBleedingAAsmYetAgain

 [ Dev 
  [ Debug
; Set to true for debugging through the tube
Host_Debug SETL T

; Set to true to robustify debugging in IRQ mode
Debug_MaybeIRQ SETL T
  ]
 ]

        GBLS     Host_Inclusion
Host_Inclusion SETS ""
 [ Dev
  [ Debug
   [ Host_Debug
Host_Inclusion SETS " GET Hdr:HostFS"
   |
Host_Inclusion SETS " ! 0, ""Host debug excluded"""
   ]
  ]
 ]
$Host_Inclusion

 [ Dev
  [ Debug
        InsertDebugRoutines
  ]
 ]
; Example tube debug calls:
;
;       DSTRING r1, "Failed on reading:",cc
;       DLINE   "Identifying a disc",cc
;       DREG    R0, "Rin:",cc

 [ Dev
PHEX
 [ :LNOT: IrqDebug
        MOV     R3, #IRQsema
        LDR     R3, [R3]
        TEQS    R3, #0
        MOVNES  PC, LR          ;return if IRQ thread
 ]
        MOV     R3, LR
        ASSERT  SVC_mode=3
        ORR     R0, LR, #SVC_mode
        TEQP    PC, R0          ;go to SVC mode preserving flags
        nop
        Push    "LR"
 [ SpoolOff
        BL      SpoolOff
 ]
        MOV     R1, #32-4
PHLOOP
        MOV     R0, R2, LSR R1
        AND     R0, R0, #&F
        CMPS    R0, #10
        ADDCC   R0, R0, #"0"
        ADDCS   R0, R0, #"A"-10
        SWI     OS_WriteC
        SUBS    R1, R1, #4
        BPL     PHLOOP
        MOV     R0, #" "
        SWI     OS_WriteC
 [ SpoolOff
        BL      SpoolOn
 ]
        Pull    "LR"
        MOVS    PC, R3


 [ SpoolOff
SpoolOff
        Push    "R0-R2,LR"
        MOV     R0, #3
        MOV     R1, #&10
        MOV     R2, #&EF
        SWI     OS_Byte
        Pull    "R0-R2,PC",,^

SpoolOn
        Push    "R0-R2,LR"
        MOV     R0, #3
        MOV     R1, #0
        MOV     R2, #&EF
        SWI     OS_Byte
        Pull    "R0-R2,PC",,^
 ]

Mess1                   ;R0,R1,LR stacked
        MOV     R0, PC          ;save PSR
        MOV     R1, LR          ;save link
 [ :LNOT: IrqDebug
        MOV     LR, #IRQsema
        LDR     LR, [LR]
        TEQS    LR, #0
        MOVNE   PC, R1          ;skip if IRQ thread, return NE
 ]
        BIC     LR, R0, #3
        ORR     LR, LR, #SVC_mode :OR: Z_bit
        TEQP    PC, LR          ;go to supervisor mode, preserve FI, set EQ
        nop                     ;delay for mode change
        Push     "LR"
 [ SpoolOff
        BL       SpoolOff
 ]
        MOV     PC, R1

TubeWrHexWord ROUT
        MOV     R3, LR
        MOV     R1, #32-4
05
        MOV     R0, R2, LSR R1
        AND     R0, R0, #&F
        CMPS    R0, #10
        ADDCC   R0, R0, #"0"
        ADDCS   R0, R0, #"A"-10
        BL      TubeChar        ;(R0)
        SUBS    R1, R1, #4
        BPL     %BT05
        MOV     R0, #" "
        BL      TubeChar        ;(R0)
        MOVS    PC, R3

           ^ 0, R1
R1_status  # 4
R1_data    # 4
TubeAddress * &3340000 + (0*&4000)      ;podule 0

TubeChar ROUT
        Push    "R1,LR"
        LDR     R1, =TubeAddress
10
        LDRB    LR, R1_status
        TSTS    LR, #&40
        BEQ     %BT10
        STRB    R0, R1_data
        Pull    "R1,PC",,^
 ]

; ======
; ClearV
; ======

ClearV
        BICS    PC, LR, #V_bit

; ====
; SetV
; ====

SetV
        ORRS    PC, LR, #V_bit


; ========
; SetVOnR0
; ========

SetVOnR0
        CMPS    R0, #0
        BICEQS  PC, LR, #V_bit
        ORRNES  PC, LR, #V_bit


; ======
; Divide
; ======

; entry: R0=Numerator, R1=Denominator
; exit:  R0=Result, R1=Remainder

Divide  ROUT
        Push    "R2,LR"

        MOV     LR, R1          ;temp = den
        CMPS    LR, R0, LSR #1  ;shift temp left unless it would be > num
10
        MOVLS   LR, LR, LSL #1
        CMPLS   LR, R0, LSR #1
        BLS     %BT10
        MOV     R2, #0          ;init result
20
        CMPS    R0, LR          ;if subtraction possible
        SUBCS   R0, R0, LR      ; do it
        ADC     R2, R2, R2      ;shift bit into result
        MOV     LR, LR, LSR #1  ;move temp right
        CMPS    LR, R1          ;loop if not done
        BHS     %BT20

        MOV     R1, R0          ;mod
        MOV     R0, R2          ;div

        Pull    "R2,PC",,^


; =========
; BlockMove
; =========

; entry: R0=source start, R1=dest start, R2=length

BlockMove ROUT
 [ Debug9
        mess    ,"*source |dest    |length  - enter BlockMove",NL
        wrhex   R0
        wrhex   R1
        wrhex   R2
        mess    ,NL
 ]

 [ T
  [ fix_8
;Non overlapping, word aligned, whole words only
        Push    "R0-R2,LR"
10
        SUBS    R2, R2, #4
        LDRHS   LR, [R0], #4
        STRHS   LR, [R1], #4
        BHS     %BT10
        Pull    "R0-R2,PC",,^
  |
;Non overlapping, word aligned, whole words only
        Push    "R0-R3,LR"
        ADD     R3, R0, R2      ;source end
10
        CMPS    R0, R3
        LDRLO   LR, [R0], #4
        STRLO   LR, [R1], #4
        BLO     %BT10
        Pull    "R0-R3,PC",,^
  ]
 |

        Push    "R0-R12,LR"

        TEQS    R2, #0
        BEQ     %FT95
        CMPS    R1, R0
        BHI     %FT50           ;upwards move
05                              ;bytes at a time until source aligned
        TSTNE   R0, #2_11
        LDRNEB  LR, [R0],#1
        STRNEB  LR, [R1],#1
        SUBNES  R2, R2, #1
        BNE     %BT05

        ANDS    LR, R1, #2_11   ;dest mis-alignment
        BEQ     %FT30           ;same alignment

;downwards mis-aligned move

        SUBS    R2, R2, #9*4    ;enough left to worth being clever ?
        BLO     %FT35           ;if not

        LDR     R3, [R0],#4     ;get a word from source
10
        STRB    R3, [R1], #1    ;put bytes to dest until aligned
        MOV     R3, R3, LSR #8
        TSTS    R1, #2_11
        BNE     %BT10
        MOV     LR, LR, LSL #3  ;# bits left in R3
        RSB     R12,LR, #32     ;# bits free in R3
15
        LDMIA   R0!,{R4-R11}    ;load 8 words
                        ;do 8 word shift, spare bits in R3
        ORR     R3, R3, R4, LSL LR
        MOV     R4, R4, LSR R12

        ORR     R4, R4, R5, LSL LR
        MOV     R5, R5, LSR R12

        ORR     R5, R5, R6, LSL LR
        MOV     R6, R6, LSR R12

        ORR     R6, R6, R7, LSL LR
        MOV     R7, R7, LSR R12

        ORR     R7, R7, R8,LSL LR
        MOV     R8, R8, LSR R12

        ORR     R8, R8, R9, LSL LR
        MOV     R9, R9, LSR R12

        ORR     R9, R9, R10,LSL LR
        MOV     R10,R10,LSR R12

        ORR     R10,R10,R11,LSL LR
        STMIA   R1!,{R3-R10}
        MOV     R3,R11,LSR R12

        SUBS    R2, R2, #8*4
        BPL     %BT15
        ADD     R2, R2, #8*4
20                              ;write out spare bytes from shift
        STRB    R3, [R1], #1
        MOV     R3, R3, LSR #8
        SUBS    LR, LR, #8
        BNE     %BT20
        B       %FT40           ;do any bytes left

;downwards aligned move
25
        LDMIA   R0!,{R3-R11}    ;move 9 aligned words at a time
        STMIA   R1!,{R3-R11}
30
        SUBS    R2, R2, #9*4
        BPL     %BT25
35
        ADD     R2, R2, #9*4
40                              ;move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0],#1
        STRPLB  LR, [R1],#1
        BPL     %BT40
        Pull    "R0-R12,PC",,^

; upwards move
50
        ADD     R0, R0, R2      ;source end
        ADD     R1, R1, R2      ;dest end
55                              ;bytes at a time until source aligned
        TSTNES  R0, #2_11
        LDRNEB  LR, [R0,#-1]!
        STRNEB  LR, [R1,#-1]!
        SUBNES  R2, R2, #1
        BNE     %BT55

        ANDS    LR, R1, #2_11   ;dest mis-alignment
        BEQ     %FT80           ;same alignment

;upwards mis-aligned move

        SUBS    R2, R2, #9*4    ;enough left to worth being clever ?
        BLO     %FT85           ;if not

        LDR     R11,[R0,#-4]!   ;get a word from source
60
        MOV     R10,R11,LSR #24
        STRB    R10,[R1,#-1]!   ;put bytes to dest until aligned
        MOV     R11,R11,LSL #8
        TSTS    R1, #2_11
        BNE     %BT60
        MOV     LR, LR, LSL #3  ;# bits free in R11
        RSB     R12,LR, #32     ;# bits left in R11
65
        LDMDB   R0!,{R3-R10}    ;load 8 words
                         ;do 8 word shift, spare bits in R11
        ORR     R11,R11,R10,LSR R12
        MOV     R10,R10,LSL LR

        ORR     R10,R10,R9,LSR R12
        MOV     R9, R9, LSL LR

        ORR     R9, R9, R8,LSR R12
        MOV     R8, R8, LSL LR

        ORR     R8, R8, R7,LSR R12
        MOV     R7, R7, LSL LR

        ORR     R7, R7, R6,LSR R12
        MOV     R6, R6, LSL LR

        ORR     R6, R6, R5,LSR R12
        MOV     R5, R5, LSL LR

        ORR     R5, R5, R4,LSR R12
        MOV     R4, R4, LSL LR

        ORR     R4, R4, R3, LSR R12
        STMDB   R1!,{R4-R11}
        MOV     R11,R3,LSL LR

        SUBS    R2, R2, #8*4
        BPL     %BT65
        ADD     R2, R2, #8*4
70                              ;write out spare bytes from shift
        MOV     LR, R11,LSR #24
        STRB    LR, [R1,#-1]!
        MOV     R11,R11,LSL #8
        SUBS    R12,R12,#8
        BNE     %BT70
        B       %FT90           ;do any bytes left

;upwards aligned move
75
        LDMDB   R0!,{R3-R11}    ;move 9 aligned words at a time
        STMDB   R1!,{R3-R11}
80
        SUBS    R2, R2, #9*4
        BPL     %BT75
85
        ADD     R2, R2, #9*4
90                              ;move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0,#-1]!
        STRPLB  LR, [R1,#-1]!
        BPL     %BT90
95
        Pull    "R0-R12,PC",,^
 ]

; ===========
; CheckEscape
; ===========

; The floppy FIQ routine NotDrq, and winnie drivers don't use this routine

; exit: No Escape => Z=0
;          Escape => Z=1, R0=EscapeErr

CheckEscape
        Push    "R1,LR"
        LDR     R1, =ESC_Status
        LDRB    R1, [R1]
        EOR     R1, R1, #EscapeBit
        TSTS    R1, #EscapeBit
        MOVEQ   R0, #IntEscapeErr
        Pull    "R1,PC"

; ===========
; ReadOldCMOS
; ===========

; read the CMOS byte containing default drive & dir/no dir bit

; exit R0,V result
;  R2 = full byte
;  R5 = default drive

ReadOldCMOS
        Push    "R1,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #StartCMOS
        SWI     XOS_Byte                ;(R0-R2->R0-R2,V)
        MOVVS   R2, #2_01000000         ;default NoDir, Drive 0
        AND     R5, R2, #2_00000111
        Pull    "R1,PC"

; ============
; ReadNewCMOS0
; ============

; read the CMOS byte containing # floppies & # winnies

; exit R0,V result
;  R2 = full byte
;  R3 = # floppies
;  R4 = b2..b0 # ST506 winnies
;       b4..b3 # IDE winnies

ReadNewCMOS0
        Push    "R1,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #NewCMOS0
        SWI     XOS_Byte                ;special case when workspace not set up
        MOVVS   R2, #2_00000001         ;default 1 floppy
        AND     R3, R2, #2_00000111     ;mask to get # floppies
        AND     R4, R2, #2_11111000     ;mask to get # ST506/IDE winnies
 [ fix_7
        MOV     R4, R4, LSR #3          ;use the right register, stupid!
 |
        MOV     R4, R2, LSR #3
 ]
 [ Top16Write
        BIC     R4, R4, #7              ; ST506=0
 ]
        BVS     %FT95
        CMPS    R3, #4                  ;if >4 floppies CMOS corrupt
        MOVHI   R3, #1                  ;assume 1 floppy
        AND     R1,R4,#2_00000111       ;mask to get # ST506 winnies
        CMPS    R1,#MaxWinnies          ;if >2 ST506 winnies CMOS corrupt
        BICHI   R4,R4,#2_00000111       ;...assume 0 ST506 drives
        MOV     R1,R4,LSR #3            ;get # IDE drives
        CMPS    R1,#WinIDEMaxDrives     ;if >2 IDE drives CMOS corrupt
        BICHI   R4,R4,#2_00011000       ;...assume 0 IDE drives
95
        Pull    "R1,PC"


; ==================
; ReadWinnieSizeCMOS
; ==================

; exit R0,V if error, R6 winnie size bytes

ReadWinnieSizeCMOS ROUT
        Push    "R1-R3,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R3, #3*8
        MOV     R6, #0
10
        MOV     R1, #WinniSizeCMOS
        ADD     R1, R1, R3, LSR #3
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        BVS     %FT95
        ORR     R6, R6, R2, LSL R3
        SUBS    R3, R3, #8
        BPL     %BT10
 [ Debug2
        wrhex   R6
        mess    ,"WINNIE SIZES",NL
 ]
95
        Pull    "R1-R3,PC",,^


; ========
; ReadStep
; ========

; exit R0,V result, R5=step delay bits

ReadStep
        Push    "R1,R2,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #StepDelayCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVC   R5, R2
 [ FDC1772              ;default 3ms step rate
        MOVVS   R5, #&FF
 |
        MOVVS   R5, #0
 ]
        Pull    "R1,R2,PC"


; =================
; ReadFileCacheCMOS
; =================

; exit R0,V result
;  R5 = extra file buffers in K

ReadFileCacheCMOS
        Push    "R1,R2,R4,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #FileCacheCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVC   R5, R2
        TEQS    R5, #1
        BLEQ    DefaultCacheSize   ;->R4
        MOVEQ   R5, R4, LSR #10
        MOVVS   R5, #0
        Pull    "R1,R2,R4,PC"


; ================
; ReadDirCacheCMOS
; ================

; exit R0,V result
;  R4 = dir cache size in bytes

ReadDirCacheCMOS
        Push    "R1,R2,LR"
        MOV     R0, #OsbyteReadCMOS
        MOV     R1, #ADFSDirCacheCMOS
        SWI     XOS_Byte        ;(R0-R2->R0-R2,V)
        MOVVS   R2, #0
        MOVS    R4, R2, LSL #10
        BLEQ    DefaultCacheSize   ;->R4
        Pull    "R1,R2,PC"


; ================
; DefaultCacheSize
; ================

; exit R4 default size

DefaultCacheSize ROUT
        Push    "R0-R3,R5-R7,LR"
        MOV     R0, #0
        MOV     R1, #0
        MOV     R2, #0
        MOV     R3, #0
        Push    "R0-R3"
        Pull    "R4-R7"         ;R0-R7 now zero
        SWI     XOS_SetEnv      ;returns RAM size in R2
 [ FileCache
        CMP     R2, #1024*1024
        MOVLS   R4, R2, LSR #9
        MOVHI   R4, R2, LSR #8
 |
        MOV     R4, R2, LSR #7
 ]
        CMPS    R4, #255*1024
        MOVHI   R4, #255*1024
        Pull    "R0-R3,R5-R7,PC",,^


; ==========
; SkipSpaces
; ==========

; entry R1 -> char
; exit
;  R0 char
;  R1 -> char after first non space char
;  C set <=> terminator

SkipSpaces ROUT
        Push    "LR"
10
        LDRB    R0, [R1], #1
        TEQS    R0, #" "
        BEQ     %BT10
        CMPS    R0, #DeleteChar
        RSBNES  LR, R0, #" "-1
        Pull    "PC"


; =============
; ParseAnyDrive
; =============

;doesn't check if drive is allowed by configure

ParseAnyDrive ROUT
        Push    "LR"

; Entry: R1-> string
; Exit:  R1-> first char after
;  good => R0 drive number, V=0
;  bad  => R0 -> error, V=1

        BL      SkipSpaces      ;(R1->R0,R1,C)
        BCS     %FT10           ;reject nul string
        LDRB    LR, [R1]
        CMPS    LR, #DeleteChar
        RSBNES  LR, LR, #" "    ;check terminated
        BCC     %FT10           ;not terminated

        CMPS    R0, #"a"
        SUBHS   R0, R0, #"a"-"A"
        CMPS    R0, #"A"
        SUBHS   R0, R0, #"A"-"0"
        SUBS    R0, R0, #"0"
        RSBCSS  LR, R0, #7
        Pull    "PC",CS
10
        baddr   R0, BadDriveErrBlk
        BL      copy_error      ; (R0->R0)
        BL      SetV
        Pull    "PC"


; =====
; WrDec
; =====

; write a space followed by a zero supressed decimal number

; entry R0 number

; exit if error V set, R0 result

WrDec   ROUT
        Push    "R0,R1,LR"
        MOV     R1, #10
        BL      Divide          ;(R0,R1->R0,R1)
        TEQS    R0, #0
        BEQ     %FT10
        BL      WrDec           ;(R0->R0,V)
        B       %FT20
10
        MOV     R0, #" "
        SWI     XOS_WriteC      ;(R0->R0,V)
20
        ADDVC   R0,R1,#"0"
        SWIVC   XOS_WriteC      ;(R0->R0,V)
95
        STRVS   R0,[SP]
        Pull    "R0,R1,PC"


; ============
; ReadTimeDate
; ============

; exit R7 time lo word, R8 time high byte

ReadTimeDate
        Push    "R0,R1,LR"
        MOV     R0, #OswordReadClock
        SUB     SP, SP, #8      ;space for param block
        MOV     R1, SP
        MOV     LR, #3
        STRB    LR, [R1]
        SWI     XOS_Word
        LDRVC   R7, [R1]
        LDRVCB  R8, [R1,#4]
        MOVVS   R7, #0
        MOVVS   R8, #0
        ADD     SP, SP, #8
 [ Debug9
        wrhex   R8
        wrhex   R7
        mess    ,"date stamp",NL
 ]
        Pull    "R0,R1,PC",,^

; =======
; IntoSVC
; =======

; exit:
;       SVC mode
;       r3 = entry mode in mode bits
;       SVC_lr stacked onto SVC stack
;
IntoSVC ROUT
        MOV     r3, lr                  ; (from) lr
        ASSERT  SVC_mode=3
        ORR     lr, r3, #SVC_mode       ; r3 = SVC
        TEQP    pc, lr
        nop
        Push    "lr"                    ; SVC stack
        MOV     pc, r3                  ; return

; ========
; OutOfSVC
; ========

; entry:
;       r3 = mode to return to in mode bits
;       SVC_lr on SVC stack
;
; exit:
;       r3 restored to pre-IntoSVC state
;       SVC_lr pulled from SVC stack
;       mode as specified in r3
;       
OutOfSVC ROUT
        ASSERT  SVC_mode=3
        AND     r3, r3, #SVC_mode
        BIC     lr, lr, #SVC_mode       ; clear all mode bits
        ORR     r3, r3, lr              ; (from) mode in r3 with return address
        Pull    "lr"                    ; SVC stack
        MOVS    pc, r3                  ; return

        END
