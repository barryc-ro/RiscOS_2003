        SUBT    Declarations of IDE statics -> StaticsIDE

; All symbols in this file must be relative to SB.
; No new ^ is allowed.
;
; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; SBP - Simon Proven
;
;
; 11-Jan-91  12:00  CDP
; File created.
;
; 27-Mar-91  10:35  CDP
; WinIDEPowerSetupActive added.
;
; 09-Jan-92  16:57  CDP
; Added WinIDEDriveInitFlags and WinIDEMountDataPtr.
;
; 09-Mar-92  17:05  CDP
; Removed WinIDEDriveInitFlags and WinIDEMountDataPtr (mount changed again).
;
; 02-Apr-92  16:18  CDP
; Added WinIDEDriveSecsPerTrk, WinIDEDriveHeads, WinIDEDriveInitFlags.
;
; 23-Aug-1994 14:32 SBP
; Added WinIDELBAFlags
;
;*End of change record*

;*********************************************************************

WinIDEStaticsStart      #       0

WinIDEDrives            #       1       ; number of IDE drives found

WinLogicalDrive         #       1       ; drive passed by FileCore

WinIDEOpDone            #       1       ; 0 => op in progress

WinIDEIRQDevNo          #       1       ; device number for claim/release
                                        ; or 0 if no device

WinHaveTickerV          #       1       ; !0 => TickerV claimed

WinIDEIRQFlag           #       1       ; !0 => in IRQ routine

; Next byte says what sort of code has been copied into RAM by the IDE
; driver (it holds the opcode itself). This must be distinct from the
; ST506 variable WinnieRamOp as the ST506 driver can use
; MEMC1A-specific code and we cannot.

WinIDERAMOp             #       1       ; type of code in RAM


; Next byte is zero when no IDE command is running. This is used
; to lock out the ticker routine used to setup the standby mode
; of the drives (when configured). It is incremented when the
; low-level entry is called and again when a background op is
; successfully started. It is decremented on the way out of the
; low-level entry and by the background callback routine.

WinIDECommandActive     #       1       ; 0 = no command active


; Values used during the processing of the current IDE op

WinIDEDriveNum          #       1       ; IDE drive (0/1)
WinIDESecsPerTrk        #       1       ; sectors per track
WinIDEHeads             #       1       ; heads on current drive
 [ IDEFixedLowSector
 |
WinIDEStartSec          #       1       ; lowest-numbered sector
 ]
WinIDEPrecomp           #       1       ; value for precomp/features reg
WinIDECommandCode       #       1       ; command code for this op

WinIDECompletion        #       1       ; completion code of op

 [ IDEAllowTrackWrap
 |
WinIDEAdrSector         #       1       ; start sector on current track
                                        ; numbered from 0
 ]

;*********************************************************************

; Drive state as given by WinIDEDriveState... (reset/spinning etc.)

WinIDEDriveState        #       WinIDEMaxDrives


; Drive power state, initialised from CMOS RAM and changed by SWI.
;    0 => autospindown not enabled
;   !0 => autospindown is n*5 seconds

WinIDEPowerState        #       WinIDEMaxDrives


; Drive parameters (heads and sectors per track)

WinIDEDriveSecsPerTrk   #       WinIDEMaxDrives
WinIDEDriveHeads        #       WinIDEMaxDrives
WinIDEDriveInitFlags    #       WinIDEMaxDrives
WinIDEDriveLBAFlags	#	WinIDEMaxDrives		; CHS/LBA mode selection by drive


; Next var is !0 when the CallEvery routine to do the drive power
; setup is still installed. It is cleared to 0 when the callback
; to remove the ticker event has been removed

WinIDEPowerSetupActive  #       1

;*********************************************************************

; Parameter block for transfer
; Values are stored here before being copied to the controller.

WinIDEParms             #       0
WinIDEParmPrecomp       #       1
WinIDEParmSecCount      #       1
WinIDEParmSecNumber     #       1
WinIDEParmLBA0to7	*	WinIDEParmSecNumber
WinIDEParmCylLo         #       1
WinIDEParmLBA8to15	*	WinIDEParmCylLo
WinIDEParmCylHi         #       1
WinIDEParmLBA16to23	*	WinIDEParmCylHi
WinIDEParmDrvHead       #       1
WinIDEParmDrvLBA24to27	*	WinIDEParmDrvHead

;*********************************************************************

                        AlignSpace      4,0

; Logical (FileCore) disc address

WinIDEDiscAddress       a4      4       ; disc address of current xfer
 [ BigDisc
WinIDESectorOffset	a4	4	; sector offset within sector of current transfer
 ]

WinIDEFileCoreOp        a4      4       ; op passed by FileCore

WinIDEDiscSize          a4      4       ; disc size in bytes (bottom 32 bits)
WinIDEDiscSize2          a4      4      ; disc size in bytes (top 32 bits)
WinIDEBlockSize         a4      4       ; bytes to use from next sector
WinIDELumpSize          a4      4       ; bytes to move by one command
WinIDESaveLumpSize      a4      4       ; not decremented by each sector


; Transfer buffer and lengths

WinIDEScatterPtr        a4      4       ; pointer to scatter list
WinIDEFakeScatterList   a4      8       ; for when none is passed
WinIDETransferLimit     a4      4       ; overall limit on transfer

WinIDETmpScatterPtr     a4      4       ; pointer to current entry in s list
WinIDETmpScatterEntry   a4      8       ; copy of current entry in s list

WinIDECallbackPtr       a4      4       ; called from IRQ/timer

WinIDEErrorNo           a4      4
WinIDEErrorAddr         a4      4

;*********************************************************************

; Now the bytes (1 per logical drive) to determine which driver should
; be called to handle requests for each logical drive number.
; &00 => IDE drive 0
; &01 => IDE drive 1
; &08 => ST506 drive 0 - bit3 set so shift into position will set carry
; &09 => ST506 drive 1
; &FF => not known

                ASSERT  MaxWinnies = 2
                ASSERT  WinIDEMaxDrives = 2
WinDriveTypes   a4      4

;*********************************************************************

; Timer stuff

WinTickCount            a4      4       ; decremented every centisecond
WinTickCallAddress      a4      4       ; if !0, called when count==0

;*********************************************************************

; Hardware details

DefaultIDE      *       CnTbase + (&1F0 * 4)


; Initialise data in module to describe the motherboard IDE
; NOTE: the interrupt stuff is the same as for the motherboard
; ST506 - it will not be possible to have both ST506 and IDE
; on the motherboard.

                ALIGN
DefaultIDEHardware
                &       DefaultIDE
                &       IoChip + IoIrqBStatus
                &       WinnieBits
                &       IoChip + IoIrqBMask
                &       WinnieBits


; Allocate space relative to SB to save details when we have
; determined them after checking for podule IDE.
; If no podule IDE, the data from DefaultIDEHardware (above)
; will be copied into these variables.

WinIDEHardware  a4      0
WinIDEPtr       a4      4               ; address of current IDE hardware
WinIDEPollPtr   a4      4               ; address of interrupt status
WinIDEPollBits  a4      4               ; AND with status, NE => IRQ
WinIDEIRQPtr    a4      4               ; address of interrupt mask
WinIDEIRQBits   a4      4               ; OR into mask enables IRQ
WinIDEReadPtr   a4      4               ; -> data read routine
WinIDEWritePtr  a4      4               ; -> data write routine

;*********************************************************************

WinIDEStaticsEnd        #       0
WinIDEStaticsSize       *       WinIDEStaticsEnd - WinIDEStaticsStart
        !       0,"IDE statics ":CC::STR:WinIDEStaticsSize


;*********************************************************************

 [ IDEFixedLowSector
 |

; Dummy disc record for reading IDE discs

        ALIGN
        ASSERT  WinIDEBytesPerSector = 512
WinIDETestDiscRec
        =       9                       ; 2^9 = 512 bytes/sector
        =       17                      ; sectors per track
        =       1                       ; heads=1 => no side interleave
        =       2                       ; double density
        &       0
        =       1                       ; lowest-numbered sector on track
        =       0
        =       0
        =       0
        &       L_Root                  ; disc address of root
        &       20*1024*1024            ; disc size in bytes
 ]

;*********************************************************************

        END
