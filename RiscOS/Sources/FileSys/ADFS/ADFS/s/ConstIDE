        SUBT    Constant definitions for IDE driver -> ConstIDE

; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; SBP - Simon Proven
;
;
; 11-Jan-91  11:45  CDP
; File created.
;
; 08-Apr-91  17:20  CDP
; Added WinIDEMaxSectorsPerTransfer to make it easier to adjust the
; maximum transfer size to get around problems with some manufacturers'
; firmware.
; IDEUseRAMCode removed and code dependent on it made permanent.
; As needed to change bits or'ed in during drive/head selection to please
; various manufacturers, replaced literals with constant IDEDrvHeadMagicBits.
;
; 02-Apr-92  16:18  CDP
; WinIDETimeoutSpinup, WinIDETimeoutTransfer, WinIDETimeoutMisc changed from
; 15 to 30 seconds to allow for slower drives (RP-2001).
;
; 24-Aug-1994 SBP
; Added WinIDEUseLBA to allow selection of CHS or LBA addressing by examining
; the boot block.  WinIDEFileCoreOpFormat - code of Format operation.
; BootBlockAddr added to check if we are reading the boot block
;
;*End of change record*

;*********************************************************************

; Assembler flags
;
; IDEAllowTrackWrap, if enabled, causes ops to transfer up to
; WinIDEMaxSectorsPerTransfer sectors at once, not just the number to the
; end of the current track. The drive does the head/cylinder incrementing
; itself. This IS faster.
;
; IDEResetOnInit, if enabled, causes the drive to be reset when
; the module initialises. This should not be necessary unless
; something bad happened before and it adds a long delay before the
; drives can be used.
;
; IDEResetOnError, if enabled, causes the drive to be reset when
; an error occurs. This would be a good thing but for the fact that
; a drive can take 30 seconds to recover from reset.
;
; IDEFixedLowSector, if enabled, causes an immediate value to be
; used for the lowest-numbered sector on a track, rather than
; reading it from the disc record. This seems to be necessary to
; stop existing programs falling over.
;
; IDETrustDrive, if enabled, causes the physical address at the end of
; a transfer to be read from the drive's registers. If disabled, the
; new address is calculated from the amount transferred. Given the
; number of manufacturers whose drives do not update the registers
; correctly (e.g. Seagate, Quantum), it is probably safest to keep
; this disabled.

                        GBLL    IDEAllowTrackWrap
                        GBLL    IDEResetOnInit
                        GBLL    IDEResetOnError
                        GBLL    IDEFixedLowSector
                        GBLL    IDETrustDrive

IDEAllowTrackWrap       SETL    T
IDEResetOnInit          SETL    F
IDEResetOnError         SETL    T
IDEFixedLowSector       SETL    T
IDETrustDrive           SETL    F

;*********************************************************************

; Service calls used by ADFS to talk to ST506/IDE podules.
; ADFS defines WinnieService - this should be same as that
; allocated in $.Hdr.Services

        ASSERT  WinnieService = Service_ADFSPodule

; IDE uses Service_ADFSPoduleIDE

;*********************************************************************

WinIDEMaxDrives *       2


; IDE registers - addressed using register "IDE".
; All registers are byte wide apart from data register.

IDE     RN      11

                ^       0,IDE
; Command block registers

IDERegCmdBase   #       0
IDERegData      #       4
IDERegPrecomp   #       4               ; write only
IDERegError     *       IDERegPrecomp   ; read only
IDERegSecCount  #       4               ; read/write
IDERegSecNumber #       4               ; read/write
IDERegLBA0to7   *	IDERegSecNumber
IDERegCylLo     #       4               ; read/write
IDERegLBA8to15	*	IDERegCylLo
IDERegCylHi     #       4               ; read/write
IDERegLBA16to23	*	IDERegCylHi
IDERegDrvHead   #       4               ; read/write
IDERegDrvLBA24to27	*	IDERegDrvHead
IDERegCommand   #       4               ; write only
IDERegStatus    *       IDERegCommand   ; read only

; Bits which must be ORRed into the drive/head select bits

IDEDrvHeadMagicBits     *       2_10100000
IDEDrvLBA24to27MagicBits *	2_11100000

; Stuff for choosing CHS or LBA addressing

WinIDEFileCoreOpFormat	*	4
BootEnd			*	&E00


                ^       ((&3F0 - &1F0) * 4),IDE
; Control block registers

IDERegCtlBase   #       0
IDERegCtlUnused #       6 * 4
IDERegAltStatus #       4               ; read only
IDERegDigOutput *       IDERegAltStatus ; write only
IDERegDriveAddr #       4               ; read only


IDEDriveShift   *       4               ; bit number in RegDrvHead


; Bits in status register

IDEStatusBSY    *       bit7            ; 1 => controller is busy
IDEStatusDRDY   *       bit6            ; 1 => drive is ready
IDEStatusWFT    *       bit5            ; 1 => write fault
IDEStatusDSC    *       bit4            ; 1 => drive seek complete
IDEStatusDRQ    *       bit3            ; 1 => data request
IDEStatusCORR   *       bit2            ; 1 => corrected data
IDEStatusIDX    *       bit1            ; 1 => disc index
IDEStatusERR    *       bit0            ; 1 => some error, err reg is valid
IDEStatusErrorBits      *       IDEStatusBSY:OR:IDEStatusWFT:OR:IDEStatusERR


; Bits in error register

IDEErrorBBK     *       bit7            ; 1 => bad block mark encountered
IDEErrorUNC     *       bit6            ; 1 => uncorrectable data
IDEErrorIDNF    *       bit4            ; 1 => sector id not found
IDEErrorABRT    *       bit2            ; 1 => command aborted
IDEErrorNTK0    *       bit1            ; 1 => track 0 not found
IDEErrorNDAM    *       bit0            ; 1 => no data address mark


; IDE commands

IDECmdOptNoRetry        *       bit0    ; setting this bit suppresses retries
                                        ; on ops ReadSecs, WriteSecs, Verify

IDECmdRestore   *       2_00010000      ; restore to cylinder 0 (recalibrate)
IDECmdReadSecs  *       2_00100000      ; read sectors
IDECmdWriteSecs *       2_00110000      ; write sectors
 [ EngineeringMode
IDECmdVerify    *       2_01000000      ; verify (with ECC correction)
IDECmdVerifyEng *       2_01000000:OR:IDECmdOptNoRetry ; verify (engineering mode (no ECC))
 |
  [ version="2.70"
IDECmdVerify    *       2_01000000      ; verify sectors with retry for soak test
  |
IDECmdVerify    *       2_01000000:OR:IDECmdOptNoRetry ; verify sectors
  ]
 ]
IDECmdFormatTrk *       2_01010000      ; format track
IDECmdSeek      *       2_01110000      ; seek track
IDECmdDiagnose  *       2_10010000      ; execute diagnostics
IDECmdInitParms *       2_10010001      ; initialise drive parameters
IDECmdIdle      *       2_11100011      ; enter idle mode
IDECmdStandby   *       2_11100010      ; enter standby mode
IDECmdCheckPower *      2_11100101      ; check power mode

; IDE drive parameters

WinIDEBytesPerSector    *       512     ; bytes per sector
 [ IDEFixedLowSector
WinIDELowSector         *       1       ; lowest-numbered sector
 ]


; WinIDEMaxSectorsPerTransfer is a limit on the number of sectors that
; can be requested for any transfer. This *should* be 256 according to
; the CAM spec. but several drive manufacturers (Seagate, Sony etc.) have
; firmware bugs that causes this to fail. Most manufacturers seem to
; handle 255 ok.

WinIDEMaxSectorsPerTransfer     *       255

;*********************************************************************

; Error numbers (0 < n < MaxDiscErr)
; =============
;
; I have attempted to map as many as possible onto the error numbers
; returned by the ST506 driver. The error codes for these are shown
; in brackets.

WinIDEErrABRT           *       &02     ; (IVC) command aborted by controller
WinIDEErrWFT            *       &07     ; (WFL) write fault
WinIDEErrCmdNotRdy      *       &08     ; (NRY) drive not ready
WinIDEErrNTK0           *       &09     ; (NSC) track 0 not found
WinIDEErrUNC            *       &13     ; (DFE) uncorrected data error
WinIDEErrIDNF           *       &16     ; (TOV) sector id field not found
WinIDEErrBBK            *       &17     ; (NIA) bad block mark detected
WinIDEErrNDAM           *       &18     ; (NDA) no data address mark


; Errors which cannot be mapped onto the error codes returned
; by the ST506 controller.

WinIDEErrNoDRQ          *       &20     ; no DRQ when expected
WinIDEErrCmdBusy        *       &21     ; drive busy when commanded
WinIDEErrBusy           *       &22     ; drive busy on command completion
WinIDEErrTimeout        *       &23     ; controller did not respond
WinIDEErrUnknown        *       &24     ; unknown code in error reg

;*********************************************************************

; Hardware-dependent fields in the boot block addressed from the
; register pointing to the defect list.


WinIDENeedsInit *       ParkDiscAdd - 1 ; !0 => drive needs init before use
WinIDEUseLBA	*	ParkDiscAdd - 2 ; !0 => drive accessed using LBA addressing

;*********************************************************************

; Timeouts in centiseconds - most set large enough to allow for drive
; spinning up after autospindown. Could change this in future to be
; short when drive known to be spinning.

WinIDETimeoutSpinup     *       &1800   ; ~60 seconds spinup
WinIDETimeoutIdle       *       &1800   ; ~60 seconds recovery from idle cmd
WinIDETimeoutTransfer   *       &1800   ; ~60 seconds data transfer ops
WinIDETimeoutMisc       *       &1800   ; ~60 seconds seek, restore etc.

WinIDETimeoutUser       *       10*100  ; 10 seconds user ops

;*********************************************************************

; States of IDE drives to control spinup and parameter initialisation
; (stored in WinIDEDriveState variables)

WinIDEDriveStateReset           *       0       ; has been reset
WinIDEDriveStateIdled           *       1       ; rcvd idle cmd
WinIDEDriveStateSpinning        *       2       ; needs parm init
WinIDEDriveStateActive          *       3       ; ready for access

;*********************************************************************

; Data direction stuff

WinIDEDirectionRead     *       bit24
WinIDEDirectionWrite    *       bit25
WinIDEDirectionNone     *       0
WinIDEDirectionMask     *       bit24 :OR: bit25

;*********************************************************************

; Bit in podule interrupt status that tells OS that podule is
; interrupting

WinIDEPodIRQRequest     *       bit0

;*********************************************************************

        END
