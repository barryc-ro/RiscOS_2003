        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}
        GBLL    true
true    SETL    {TRUE}
        GBLL    false
false   SETL    {FALSE}

CnTbase         * C710          ; Base address of 82C710 = PC/AT I/O 000H

bit0    bit 0
bit1    bit 1
bit2    bit 2
bit3    bit 3
bit4    bit 4
bit5    bit 5
bit6    bit 6
bit7    bit 7
bit8    bit 8
bit9    bit 9
bit10   bit 10
bit11   bit 11
bit12   bit 12
bit13   bit 13
bit14   bit 14
bit15   bit 15
bit16   bit 16
bit17   bit 17
bit18   bit 18
bit19   bit 19
bit20   bit 20
bit21   bit 21
bit22   bit 22
bit23   bit 23
bit24   bit 24
bit25   bit 25
bit26   bit 26
bit27   bit 27
bit28   bit 28
bit29   bit 29
bit30   bit 30
bit31   bit 31

EscapeBit       bit 6           ;escape if this bit set in ESC_Status

; BigDisc - if true then use sector addressing, false use byte

	GBLL	BigDisc
BigDisc	SETL	{TRUE}

 [ BigDisc
BigBit * BigDiscSupport
 |
BigBit * 0
 ]

; Hardware addresses

BerlinFlpAddr	* &32000000	;Blah blah blah

        [ FDC1772
FdcAddress      * &03310000
        |
FdcAddress      * &03290000     ;C Watters says medium access is closer to spec
        ]
FdcStatus       * 0
        [ FDC1772
FdcMotorOnBit   bit 7
        |
NotReadyBit     bit 7
        ]
WProtBit        bit 6  ;write protect
RecTypeBit      bit 5  ;record type
WFaultBit       bit 5  ;write fault
RnfBit          bit 4  ;record not found
CrcBit          bit 3  ;crc error
LostBit         bit 2  ;lost data
Track0Bit       bit 2
BusyBit         bit 0
FdcCommand      * FdcStatus
 [ FDC1772
FdcReadSec       * &88  ;no 15/30 ms delay
FdcWriteSec      * &AA  ;no 15/30 ms delay no pre comp
FdcReadTrk       * &E8  ;no 15/30 ms delay
FdcReadAddress   * &C8  ;no 15/30 mS delay
FdcWriteTrk      * &FE  ;15/30 ms delay, no pre comp
FdcSeek          * &18  ;no verify
FdcRestore       * &08  ;no verify
FdcStepIn        * &58  ;update, but no verify
FdcStepOut       * &78  ;update, but no verify
FdcStepInVerify  * &5C  ;update, but no verify
FdcStepOutVerify * &7C  ;update, but no verify
 |
FdcReadSec       * &80  ;no 15/30 ms delay
FdcWriteSec      * &A0  ;no 15/30 ms delay
FdcReadTrk       * &E4  ;15/30 ms delay
FdcReadAddress   * &C0  ;no 15/30 mS delay
FdcWriteTrk      * &F4  ;15/30 ms delay
FdcSeek          * &10  ;no verify
FdcRestore       * &00  ;no verify
FdcStepIn        * &50  ;update, but no verify
FdcStepOut       * &70  ;update, but no verify
FdcStepInVerify  * &54  ;update, but no verify
FdcStepOutVerify * &74  ;update, but no verify
 ]
FdcAbort         * &D0  ;abort current command
NotType1Bit      bit 7
Delay15or30msBit bit 2
VerifyBit        bit 2
SettleBit        bit 2
        [ FDC1772
NotPrecompBit    bit 1
PrecompTrk * 80/2
        ]
FdcStepBits      * &03
FdcTrack        * 4
FdcSector       * 8
FdcData         * 12

 [ fix_2
                        ;centi seconds between upcalls when disc changed works
PollPeriodShort * 10    ; if drive has disc changed reset line
PollPeriodLong  * 100   ; if disc changed reset by step
 |
PollPeriod      * 10    ;centi seconds between upcalls when disc changed works
 ]
FloppyEraseDelay * 1200 ;in micro secs
MaxWinnies       * 2

IoChip          * &03200000     ;IO controller
IoControl       * 0
        [ A1
ReadyBit         bit 2
DiscChangedBit   bit 4
        |
NotDiscChangedBit bit 4
        ]

;IRQA
FiqDowngradeBit bit 7

;IRQB
IoIrqBStatus    * &20
IoIrqBMask      * &28
PIRQ    bit 5           ;podule IRQ

IoFiqStatus     * &30
IoDrqBitNo       * 0
IoDrqBit         bit IoDrqBitNo
IoFloppyIrqBit   bit 1

FiqRequest      * &34

FiqMask         * &38
FdcFiqMaskBits   * &03
Timer0Period    * 20000

SharedLatch     * &03350018
FdcResetBit     bit 3
HeadSelectBit3  bit 7
Single          * 1
Double          * 2
Quad            * 4
        [ A1
DensityBits     * &02
SingleBits      * &02
DoubleBits      * &00
        |
DensityBits     * &07
SingleBits      * &06
DoubleBits      * &05
QuadBits        * &00
        ]

        [ A1
DiscLatch       * &03350040
        |
DiscLatch       * &03360000
        ]
Drive0          bit 0
Drive1          bit 1
Drive2          bit 2
Drive3          bit 3
DriveBits       * Drive0 :OR: Drive1 :OR: Drive2 :OR: Drive3
SideBit         bit 4
MotorBit        bit 5
InUseBit        bit 6
MotorBits       * MotorBit :OR: InUseBit
NotResetDiscChangedBit bit 7

K       * 1024
M       * K*K

;Cpu

PsrMask         * &FC000003
NZCV            * N_bit :OR: Z_bit :OR: C_bit :OR: V_bit

FiqVector        * &1C
FiqVectorMaxCode * &FC       ;last word allowed for FIQ code

BalOpHi         * &EA000000

;Register allocation

SB      RN 12

LF      * 10
CR      * 13
DeleteChar      * 127

TrksPerSide     * 80

;Disc Operation Reason Codes
;                ^ 0
;
;Param4Op        # 0
;VerifyOp        # 1     ;0
;ReadSecsOp      # 1     ;1
;WriteSecsOp     # 1     ;2
;
;Param3Op        # 0
;ReadTrkOp       # 1     ;3 read id for winnie
;WriteTrkOp      # 1     ;4
;
;Param2Op        # 0
;FirstHeadMoveOp # 0
;SeekOp          # 1     ;5
;
;Param1Op        # 0
;RestoreOp       # 1     ;6
;StepInOp        # 1     ;7 floppy only
;StepOutOp       # 1     ;8 floppy only
StepInVerifyOp  * 9     ;9 floppy only
StepOutVerifyOp * &A    ;A floppy only

UnusedFloppyOp  * &B
 [ fix_6
ReadSecsBackOp * ReadTrkOp
WriteSecsBackOp * &B     ;B (only used internally)
 ]
;SpecifyOp       # 1     ;F winnie only
;                ASSERT @=&10

        ASSERT EscapeBit=&40
AltDefectBit    bit 4   ;use alternative defect map, winnies only
ScatterBit      bit 5
NoEscape        bit 6
NoTimeOut       bit 7
Atomic          * NoEscape :OR: NoTimeOut
BackBitNo       * 8
BackgroundOp    bit BackBitNo
OpMask          * 2_1111 ;ops 0-15

DiscBits        * 2_111 :SHL: (32-3)    ;In all disc addresses

AdfsFsId        * 8     ;magic filing system number


; service reason codes

WinnieService           * &10800

; osbyte numbers

OsbyteReadCMOS          * &A1
OsbyteWriteCMOS         * &A2
OsbyteReadResetType     * &FD

; osword numbers
OswordReadClock * 14

; CMOS allocation

; old CMOS byte, StartCMOS in system

;bit 6 is NoDirBit


        ^       NewADFSCMOS
NewCMOS0 # 1
; b0-b2 # floppies 0 to 4
; b3-b5 # winnies 0 to 2 with this hardware
; b6-b7 unused
StepDelayCMOS    # 1
; bits 2i,2i+1 are step rate bits for floppy i (i=0,1,2,3)
 [ FileCache
FileCacheCMOS    # 1    ;number of additional file cache buffers
 ]
 ASSERT ADFSDirCacheCMOS = &C7

AdfsSwiBase     * Module_SWISystemBase + Module_SWIChunkSize * ADFSSWI

        END
