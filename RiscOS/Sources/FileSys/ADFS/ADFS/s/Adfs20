; >Adfs20
;
; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
; LVR - Lawrence Rust, Cambridge Beacon
;
; 21-Mar-91  09:09  LVR
; 82710 drivers always use 1 second poll period
;
; 04-Apr-91  16:15  CDP
; Removed Debug20-dependent debug (IDE).
;
;
;*End of change record*

 LTORG

; =============
; LowLevelEntry
; =============

;entry
; R1  reason
 [ BigDisc
; R2  sector disc address top 3 bits drive
 |
; R2  byte disc address top 3 bits drive
 ]
; R3  RAM ptr
; R4  length
; R5  -> disc rec
; R6  -> defect list
; R12 -> private word

LowLevelEntry ROUT
 CMPS   R4, #0                  ;IF 0 length
 BICEQ  R0, R1, #NoTimeOut :OR: NoEscape :OR: ScatterBit :OR: AltDefectBit
 CMPEQS R0, #Param3Op           ;AND verify, read/write secs, not background
 MOVLOS PC, LR                  ;THEN nothing to do

 getSB
 Push   "LR"

 [ Debug3

 DREG  R1," ",cc
 DREG  R2," ",cc
 DREG  R3," ",cc
 DREG  R4," ",cc
 DREG  R5," ",cc
 DREG  R6," ",cc
 DLINE "*>LowLevel"
 ]
 TSTS   R2, #bit31              ; Drives 0..3?
 [ BigDisc
	BNE	%FT01
	Push	"R10"			; get some workspace
	LDRB	LR, [R5, #SectorSize]	; get the sector size
	BIC	R10, R2, #DiscBits	; sector offset
	AND	R2, R2, #DiscBits	; drive
	ORR	R2, R2, R10, LSL LR	; combine back as a byte offset addr
	BL	FlpLowLevel		; FlpLowLevel still uses byte addresses; just munge addrs to work
	LDRB	LR, [R5, #SectorSize]	; get the sector size back again
	BIC	R10, R2, #DiscBits	; convert disc addr back
	AND	R2, R2, #DiscBits	;
	ORR	R2, R2, R10, LSR LR	;
	Pull	"R10"
	B	%FT02
01
	BL	WinLowLevel	; winnie code has been changed to handle BigDisc properly
02
 |
 	BLEQ	FlpLowLevel	; Yes then do floppy operation
 	BLNE	WinLowLevel	; Else winchester
 ]

 [ Debug3

 DREG  R0," ",cc
 DREG  R1," ",cc
 DREG  R2," ",cc
 DREG  R3," ",cc
 DREG  R4," ",cc
 DLINE "*<LowLevel"
 ]
 Pull   "PC"

 MACRO
 Misc   $str
 ASSERT Misc_$str=(.-MiscTable) :SHR: 2
 B      Do$str
 MEND

; =========
; MiscEntry
; =========

MiscEntry ROUT
        Push    "LR"
        getSB
 [ Debug4 :LOR: Debug10f

        DREG    R0," ",cc
        DREG    R1," ",cc
        DREG    R2," ",cc
        DREG    R3," ",cc
        DREG    R4," ",cc
        DREG    R5," ",cc
        DLINE   "*>Misc"
 ]

        CMPS    R0, #Misc_Unused
        BLO     %FT10
        MOV     R0, #BadParmsErr
        BL      SetV
        B       %FT90
10
        MOV     LR, PC
        ADD     PC, PC, R0, LSL #2
        B       %FT90
MiscTable
        Misc    Mount
        Misc    PollChanged
        Misc    LockDrive
        Misc    UnlockDrive
        Misc    PollPeriod
        Misc    Eject
        Misc    ReadInfo           ; this is done by FileCore
        Misc    DriveStatus

90
 [ Debug4

        DREG    R0," ",cc
        DREG    R1," ",cc
        DREG    R2," ",cc
        DREG    R3," ",cc
        DREG    R4," ",cc
        DREG    R5," ",cc
        DLINE   "*<Misc"
 ]
        Pull    "LR"
        BICVCS  PC, LR, #V_bit
        ORRVSS  PC, LR, #V_bit


; =======
; DoMount
; =======

;entry
; R1 drive
; R2 disc address
; R3 -> buffer
; R4 length
; R5 -> disc rec to fill in for floppies

;exit R0,V internal error

DoMount ROUT
 [ Debug4
 DREG   r2, "Misc mount address:"
 ]
 TSTS   R2, #bit31                      ; Drives 0..3?
 BEQ    FlpMount                        ; Yes then jump, mount floppy
 B      WinMount                        ; Else mount winchester


DiscString
 = "disc",0
 ALIGN

; ============
; DoEject - Eject the drive in r1 if on A500 (or drive 0 if top bit set).
; ============
 [ A1
DoEject ROUT
        MOVS    pc, lr
 |
DoEject ENTRY "r0-r4"
        TST     r1, #(1 :SHL: 31)               ; Eject preferred drive,
        MOVNE   r1, #0                          ; which is zero.

        MOV     r3, pc
        ORR     r0, r3, #(I_bit :OR: F_bit)
        TEQP    r0, #0                          ; Disable IRQs and FIQs

        LDRB    r4, DiscLatchCopy               ; Read soft copy
        BIC     r2, r4, #&80                    ; Pull eject line low
        MOV     r0, #1
        BIC     r1, r2, r0, LSL r1              ; Clear bit for drive

        LDR     r2, =DiscLatch
        STRB    r1, [r2]                        ; Twiddle the lines.
        STRB    r1, [r2]                        ; Do it enough times
        STRB    r1, [r2]                        ; to be certain (1 fails,
        STRB    r1, [r2]                        ; 2 is OK on Turbo+ARM3).
        STRB    r1, [r2]                        ; Each one is 0.5uS, so
        STRB    r1, [r2]                        ; 8 of them is 4uS which
        STRB    r1, [r2]                        ; really ought to be
        STRB    r1, [r2]                        ; enough.

        STRB    r4, [r2]                        ; Restore soft copy

        TEQP    r3, #0                          ; Restore IRQ and FIQ status
        NOP                                     ; EXIT uses r13 (ARM2as)
        EXITS
 ]

; ==========
; DoReadInfo
; ==========

; this miscop is handled entirely by filecore

DoReadInfo ROUT
        Push    "lr"
        MOV     R0, #BadParmsErr
        BL      SetV
        Pull    "pc"

; =============
; DoDriveStatus
; =============

DoDriveStatus ROUT
        Push    "lr"
        TSTS    r1, #4
        LDRNEB  r2, WinIDECommandActive
        MOVEQ   r2, #0
        Pull    "pc",,^

; ============
; DoPollPeriod
; ============
DoPollPeriod ROUT
 [ fix_2
        Push    "R1,R2,LR"

        LDR     LR, MachineID
        TEQS    LR, #MachHas82710       ; 82710 controller?
        MOVEQ   R5, #PollPeriodLong     ; Yes then always poll slowly
        BEQ     %FT30

        MOV     R5, #3
        LDRB    R1, Floppies
        sbaddr  R2, DrvRecs+DrvFlags
        B       %FT20
10
        LDRB    LR, [R2], #SzDrvRec
        TST     LR, #Drv_ChangedWorks   ;RCM>>> Arn't these bits always
        TSTNE   LR, #Drv_EmptyWorks     ;       set the same
        MOVEQ   R5, #0
        TST     LR, #ResetChangedByWrite
        BICEQ   R5, R5, #2
20
        SUBS    R1, R1, #1
        BPL     %BT10

; R5 is 3 = Drive has a 'disc changed reset' line so poll quickly
;       1 = 'Disc changed' reset by step, so poll slowly cos DBell prefers it
;       0 = No disc changed line, so don't poll

        CMP     R5, #1
        MOVGT   R5, #PollPeriodShort
        MOVEQ   R5, #PollPeriodLong
        MOVLT   R5, #-1                 ;Infinite
30
        baddr   R6, DiscString
        Pull    "R1,R2,PC",,^
 |
        Push    "R1,R2,LR"
        MOV     R5, #PollPeriod
        LDRB    R1, Floppies
        sbaddr  R2, DrvRecs+DrvFlags
        B       %FT20
10
        LDRB    LR, [R2], #SzDrvRec                     ;RCM>>> equivalant to
        ASSERT  Drv_ChangedWorks = bit7 ; ==> NOT Zero  ; LDRB   LR, [R2], #SzDrvRec
        ASSERT  Drv_EmptyWorks   = bit6 ; ==> Carry     ; TST    LR, #Drv_ChangedWorks
        MOVS    LR, LR, LSR #7                          ; TSTNE  LR, #Drv_EmptyWorks
        MOVLS   R5, #-1 ; Test C=0 or Z=1               ; MOVEQ  R5, #-1
20
        SUBS    R1, R1, #1
        BPL     %BT10
        baddr   R6, DiscString
        Pull    "R1,R2,PC",,^
 ]


 END
