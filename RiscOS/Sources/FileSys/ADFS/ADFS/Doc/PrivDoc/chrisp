
>Thanks for the sources. Obviously I have not been working on them as
>recently as you have so please forgive any mistakes in the following. I
>imagine you enjoy other people grovelling through your code about as much as
>I do.

I'm actually quite glad of your input - I'd rather have someone
else find faults in my code than release something substandard.

Here's my intial reactions to some of your comments.  I haven't
dealt with them all yet.

>ADFS13 around line 905
>   Original code appears, mistakenly, to have called Unlock if Lock failed.
>   New code does same but calls Lock again. Shouldn't it be changed so that
>   it never calls Unlock or Lock to avoid problems if an IRQ occurs?
>   Original code also used AdjustStatus which ORRs in the drive number.
>   Should this do likewise?

WinIDECallBackBg seems to unlock the controller before doing the
callback, in case FileCore calls the low level entry point.  I
suppose, if we have failed to lock the controller in the first
place, we should not unlock it at any point.  This will also
require some state to be carried into WinIDECallBackBg to stop
it unlocking the controller.

>ADFS14 around line 308
>   Isn't this comparison meaningless? You are effectively comparing a 32 bit
>   quantity with 2^32. Is this code still to be worked on as part of
>   DiscSize2 changes?

It won't be meaningless once DiscSize2 support is in.  It is
simply there to prevent incorrect values being generated for
the transfer length with DiscSize2 is supported properly.

>ADFS14 around line 339
>   Clearly, the code assembled here with BigDisc set FALSE is not the same
>   as before you made changes. Was this intentional? Could you avoid the
>   additional branches by changing SetPhysAddress to preserve flags and using
>   conditional instructions?

Yes, that would be sensible. ... DONE

>ADFS14 around line 832
>   WinIDEStartTransferInIRQ not needed?

Not any more, it was in an old version. ... DONE

>ADFS14 around line 1459
>   Branch unnecessary if make next instruction conditional.

Right. ... DONE

>ADFS14 around line 1761
>   Does AAsm now cope properly with local labels > 99?

I don't know - I never knew there was a problem.

>ADFS14 around line 1763
>   This code is never executed and I think you want it to be (should it be
>   before the branch?). Looks like the effect is that no timers count down
>   after the first HD IRQ.

Yes, this code is executed on every IRQ routine exit within
ADFS normally.  This would explain one problem I had where
a command failed to time out.

... DONE

>ADFS14 around line 1855
>   Branch unnecessary if make next instructions conditional but there are
>   quite a few...

... DONE

>ADFS14 around line 2007
>   WinIDEAdjustStatus corrupts R5 immediately i.e. it does not use the value
>   you load before calling it.

Yes, this was an old idea which I've now thrown away.  The R5
value should not be loaded any more.

... DONE

>ADFS14 around line 2087
>   Corrupts R1 (needed at line 2128, I think). Code as CMPS R2,#BootEnd >> 9?

I spotted that one myself when trying to fix LBA support.

>ADFS14 around line 2106
>   You haven't removed the disc bits from the address as the old code did -
>   did you want to?

Again, that was a mistake I've spotted, with these two fixed,
LBA support appears to work.

>I've really only looked through for differences between 2.91 and the latest
>version. I haven't checked that everything hangs together OK but just
>flagged things that stand out. I hope it's of *some* help!

You've spotted a number of thing which I've missed - ta.  I'm
going to incorporate most of the changes today.  The one
change I'm not going to do right now is the controller locking
one.

--Simon

