Access:*Access changes the attributes of all objects matching the wildcarded specification.|MAttributes:|ML(ock)|I|ILock object against deletion|MR(ead)|I|IRead permission|MW(rite)|I|IWrite permission|M/R,/W,/RW|IPublic read and write permission|MSyntax: *Access <object> [<attributes>]
Cat:*Cat lists all the objects in a directory (default is current directory).|MSyntax: *Cat [<directory>]
CDir:*CDir creates a directory of given name (and size on Net only).|MSyntax: *CDir <directory> [<size in entries>]
Copy:*Copy copies one or more objects that match the given wildcarded specification between directories. Options are taken from the system variable Copy$Options  and those given to the command.|MOptions: (use ~ to force off,eg. ~C)|MA(ccess)|IForce destination access to same as source {on}|MC(onfirm)|IPrompt for confirmation of each copy {on}|MD(elete)|IDelete the source object after copy {off}|MF(orce)|I|IForce overwriting of existing objects {off}|ML(ook)|I|ILook at destination before loading source file {off}|MN(ewer)|I|ICopy only if source is more recent than destination {off}|MP(rompt)|IPrompt for the disc to be changed as needed in copy {off}|MQ(uick)|I|IUse application workspace to speed file transfer {off}|MR(ecurse)|ICopy subdirectories and contents {off}|MS(tamp)|I|IRestamp datestamped files after copying {off}|MsT(ructure)|ICopy only the directory structure {off}|MV(erbose)|IPrint information on each object copied {on}|MSyntax: *Copy <source spec> <destination spec> [<options>]
Count:*Count adds up the size of one or more files that match the given wildcarded specification. Options are taken from the system variable Count$Options  and those given to the command.|MOptions: (use ~ to force off,eg. ~R)|MC(onfirm)|IPrompt for confirmation of each count {off}|MR(ecurse)|ICount subdirectories and contents {on}|MV(erbose)|IPrint information on each file counted {off}|MSyntax: *Count <file spec> [<options>]
Dir:*Dir selects a directory as the current directory (default is user root directory).|MSyntax: *Dir [<directory>]
EnumDir:*EnumDir creates a file of filenames from a directory that match the supplied wildcarded specification (default is *).|MSyntax: *EnumDir <directory> <output file> [<pattern>]
Ex:*Ex lists all the objects in a directory together with their file information (default is current directory).|MSyntax: *Ex [<directory>]
FileInfo:*FileInfo yields the full file information of an object.|MSyntax: *FileInfo <object>
Info:*Info lists the file information of all objects matching the given wildcarded specification.|MSyntax: *Info <object>
LCat:*LCat lists all the objects in a subdirectory relative to  the library (default is current library).|MSyntax: *LCat [<directory>]
LEx:*LEx lists all the objects in a subdirectory of the library together with their file information (default is current library).|MSyntax: *LEx [<directory>]
Lib:*Lib selects a directory as the current library (default is filing system dependent).|MSyntax: *Lib [<directory>]
Rename:*Rename changes the name of an object. It cannot be used to move objects between filing systems or between discs on the same filing system; *Copy with the D(elete) option must be used instead.|MSyntax: *Rename <object> <new name>
Run:*Run loads and executes the named file, passing optional parameters to it.|MSyntax: *Run <filename> [<parameters>]
SetType:*SetType sets the file type of the named file to the given textual file type or hexadecimal number. If the file is not already datestamped then it is also stamped with the current time and date.|M"*Show File$Type*" displays currently known file types.|MSyntax: *SetType <filename> <file type>
Shut:*Shut closes all open files on all filing systems.|MSyntax: *Shut
ShutDown:*ShutDown closes all open files on all filing systems, logs off file servers and causes hard discs to be parked.|MSyntax: *ShutDown
Stamp:*Stamp sets the datestamp on a file to the current time and date. If the file is not already datestamped then it is given file type Data (&FFD).|MSyntax: *Stamp <filename>
Up:*Up moves the current directory up the directory structure by the specified number of levels.|MSyntax: *Up [<levels>]
Wipe:*Wipe deletes one or more objects that match the given wildcard specification. Options are taken from the system variable Wipe$Options  and those given to the command.|MOptions: (use ~ to force off,eg. ~V)|MC(onfirm)|IPrompt for confirmation of each deletion {on}|MF(orce)|I|IForce deletion of locked objects {off}|MR(ecurse)|IDelete subdirectories and contents {off}|MV(erbose)|IPrint information on each object deleted {on}|MSee also *Delete.|MSyntax: *Wipe <file spec> [<options>]
Back:*Back swaps the current and previous directories.|MSyntax: *Back
URD:*URD selects a directory as the user root directory (default restores the URD to & or $ as appropriate).|MSyntax: *URD [<directory>]
NoDir:*NoDir unsets the currently selected directory on the temporary filing system.|MSyntax: *NoDir
NoURD:*NoURD unsets the user root directory on the temporary filing system.|MSyntax: *NoURD
NoLib:*NoLib unsets the library directory on the temporary filing system.|MSyntax: *NoLib
FileSystem:*Configure FileSystem sets the default filing system.|MSyntax: *Configure FileSystem <fs name>|<fs number>
Truncate:*Configure Truncate sets whether filenames should be truncated when too long.|MSyntax: *Configure Truncate on|off
