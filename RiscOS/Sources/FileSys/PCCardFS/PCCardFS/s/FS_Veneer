
;*****************************************************************************************
;***                                                                                   ***
;***  FS_Veneer.s                                                                      ***
;***                                                                                   ***
;***  Application:   PCCardFS Module                                                   ***
;***  Version:       0.01                                                              ***
;***                                                                                   ***
;***  By:            Neil Critchell, Acorn Computers Ltd.                              ***
;***  Date:          25th October 1993                                                 ***
;***                                                                                   ***
;***                                                                                   ***
;***  Purpose:       Contains the Filing System entry point's veneer routines.         ***
;***                                                                                   ***
;***                                                                                   ***
;***  History:       0.01 25th October 1993 - Original version                         ***
;***                                                                                   ***
;***                                                                                   ***
;*****************************************************************************************



;*****************************************************************************************
;***    Veneers:                                                                       ***
;***        PCCardFS_DiscOp                             (DiscOp functions)             ***
;***        PCCardFS_MiscOp                             (MiscOp functions)             ***
;*****************************************************************************************





;*****************************************************************************************
;***    Define Registers                                                               ***
;*****************************************************************************************

r0      RN      0
a1      RN      0
r1      RN      1
a2      RN      1
r2      RN      2
a3      RN      2
r3      RN      3
a4      RN      3

r4      RN      4
v1      RN      4
r5      RN      5
v2      RN      5
r6      RN      6
v3      RN      6
r7      RN      7
v4      RN      7
r8      RN      8
v5      RN      8
r9      RN      9
v6      RN      9

r10     RN     10
r11     RN     11
r12     RN     12
r13     RN     13

sl      RN     10
fp      RN     11
ip      RN     12
sp      RN     13
lr      RN     14
pc      RN     15




;*****************************************************************************************
;***    Define Aera infromation                                                        ***
;*****************************************************************************************


        AREA |C$$code|, CODE, READONLY





;*****************************************************************************************
;***    Define Constants                                                               ***
;*****************************************************************************************


ModRelocOffset  *       0              ; subject to deferred relocation
SomeOffset      *       0
V_Bit           *       &10000000
SVC_Mode        *       3




;*****************************************************************************************
;***    Exprorted Values                                                               ***
;*****************************************************************************************

        EXPORT  Image_Base

        EXPORT  PCCardFS_DiscOpVeneer
        EXPORT  PCCardFS_MiscOpVeneer



;*****************************************************************************************
;***    Improrted Values                                                               ***
;*****************************************************************************************

        IMPORT  |Image$$RO$$Base|                       ; module's base value

        IMPORT  PCCardFS_DiscOp
        IMPORT  PCCardFS_MiscOp








;*****************************************************************************************
;*****************************************************************************************
;***                                                                                   ***
;***            Veneer Code Starts here                                                ***
;***                                                                                   ***
;*****************************************************************************************
;*****************************************************************************************



;*****************************************************************************************
;***                                                                                   ***
;***  PCCardFS_DiscOpVeneer                                                            ***
;***                                                                                   ***
;***  _kernel_oserror PCCardFS_DiscOp(_kernel_swi_regs *r)                             ***
;***                                                                                   ***
;***  The veneer code used to allow DiscOp calls to be implmented in 'C'. The Veneer   ***
;***  sets up the various parameters needed and sets R12 to the private word, so that  ***
;***  modules static data can be reached.                                              ***
;***  The veneer will then call the 'C' Function 'PCCardFS_DiscOp' as specified above. ***
;***  On return from the 'C' function registers r0 - r9 are, set to the return vaules, ***
;***  and V is set if an error was returned, al other registers are restored.          ***
;***                                                                                   ***
;***  On Entry:                                                                        ***
;***    R0 - R9 Various parameters                                                     ***
;***    R12     Pointer to private word (I hope)                                       ***
;***    R13     Pointer to full decending stack (again I hope)                         ***
;***    R14     Return address                                                         ***
;***                                                                                   ***
;***  On Exit:                                                                         ***
;***    R0 - R9 Returned parameters                                                    ***
;***    V Clear Function sucessful                                                     ***
;***    V Set   Function returned an error.                                            ***
;***            R0 = Error                                                             ***
;***                 R0 >= 255, FileCore error No.                                     ***
;***                 Bit 30 set, R0 & 0x3FFFFFFF is pointer to error block             ***
;***                 Bit 31 set, Disc error (see PRMs)                                 ***
;***                                                                                   ***
;***    Preserved:                                                                     ***
;***       R10 - R13, N, Z & V flags                                                   ***
;*****************************************************************************************

PCCardFS_DiscOpVeneer

        STMFD   sp!, {r0-r9, sl, fp, r12, lr}   ; create args in store; save lr etc;

        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20                 ; SP_LWM

        MOV     a1, sp                          ; 'r', put into a1(r0) for input parameter

        LDMIA   sl, {v1, v2}                    ; save old reloc modifiers over fn call

        LDR     r12, [r12]                      ; -> static data
        LDMIB   r12, {fp, r12}                  ; new relocation modifiers
        STMIA   sl,  {fp, r12}                  ; set by module init

        ADD     sl, sl, #540                    ; C stack limit stuff
        MOV     fp, #0                          ; halt C backtrace here!



        BL      PCCardFS_DiscOp                 ; finally call the function



        SUB     sl, sl, #540                    ; C stack limit stuff

        STMIA   sl, {v1, v2}                    ; restore old reloc modifiers

        CMP     r0, #0                          ; check return from PCCardFS_DiscOp function
        STRNE   r0, [sp]                        ; if error, store new r0 on stack
                                                ; (NB. will be pulled of stack as r0)
        
        LDMFD   sp!, {r0-r9, sl, fp, r12, lr}   ; restore (pos modified) regs

        BICEQS  pc, lr, #V_Bit                  ; V clear if return value was 0
        ORRS    pc, lr, #V_Bit                  ; & V set







;*****************************************************************************************
;***                                                                                   ***
;***  PCCardFS_MiscOpVeneer                                                            ***
;***                                                                                   ***
;***  _kernel_oserror PCCardFS_MiscOp(_kernel_swi_regs *r)                             ***
;***                                                                                   ***
;***  The veneer code used to allow MiscOp calls to be implmented in 'C'. The Veneer   ***
;***  sets up the various parameters needed and sets R12 to the private word, so that  ***
;***  modules static data can be reached.                                              ***
;***  The veneer will then call the 'C' Function 'PCCardFS_MiscOp' as specified above. ***
;***  On return from the 'C' function registers r0 - r9 are, set to the return vaules, ***
;***  and V is set if an error was returned, al other registers are restored.          ***
;***                                                                                   ***
;***  On Entry:                                                                        ***
;***    R0 - R9 Various parameters                                                     ***
;***    R12     Pointer to private word (I hope)                                       ***
;***    R13     Pointer to full decending stack (again I hope)                         ***
;***    R14     Return address                                                         ***
;***                                                                                   ***
;***  On Exit:                                                                         ***
;***    R0 - R9 Returned parameters                                                    ***
;***    V Clear Function sucessful                                                     ***
;***    V Set   Function returned an error.                                            ***
;***            R0 = Error                                                             ***
;***                 R0 >= 255, FileCore error No.                                     ***
;***                 Bit 30 set, R0 & 0x3FFFFFFF is pointer to error block             ***
;***                 Bit 31 set, Disc error (see PRMs)                                 ***
;***                                                                                   ***
;***    Preserved:                                                                     ***
;***       R10 - R13, N, Z & V flags                                                   ***
;*****************************************************************************************

PCCardFS_MiscOpVeneer

        STMFD   sp!, {r0-r9, sl, fp, r12, lr}   ; create args in store; save lr etc;

        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20                 ; SP_LWM

        MOV     a1, sp                          ; 'r', put into a1(r0) for input parameter

        LDMIA   sl, {v1, v2}                    ; save old reloc modifiers over fn call

        LDR     r12, [r12]                      ; -> static data
        LDMIB   r12, {fp, r12}                  ; new relocation modifiers
        STMIA   sl,  {fp, r12}                  ; set by module init

        ADD     sl, sl, #540                    ; C stack limit stuff
        MOV     fp, #0                          ; halt C backtrace here!



        BL      PCCardFS_MiscOp                 ; finally call the function



        SUB     sl, sl, #540                    ; C stack limit stuff

        STMIA   sl, {v1, v2}                    ; restore old reloc modifiers

        CMP     r0, #0                          ; check return from PCCardFS_MiscOp function
        STRNE   r0, [sp]                        ; if error, store new r0 on stack
                                                ; (NB. will be pulled of stack as r0)
        
        LDMFD   sp!, {r0-r9, sl, fp, r12, lr}   ; restore (pos modified) regs

        BICEQS  pc, lr, #V_Bit                  ; V clear if return value was 0
        ORRS    pc, lr, #V_Bit                  ; & V set










;*****************************************************************************************
;***    Define Data Area                                                               ***
;*****************************************************************************************

        AREA    Code_Description, DATA, REL

Image_Base
        DCD     |Image$$RO$$Base|



        END

