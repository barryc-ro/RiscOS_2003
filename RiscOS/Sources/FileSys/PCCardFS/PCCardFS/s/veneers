


(Not used by this code as is, but veneers modifed for own usage)




; s.veneers - Interface veneers between modules written in C and RISC OS
; Copyright (C) Acorn Computers Ltd., 1989.

r0      RN      0
a1      RN      0
r1      RN      1
a2      RN      1
r2      RN      2
a3      RN      2
r3      RN      3
a4      RN      3

r4      RN      4
v1      RN      4
r5      RN      5
v2      RN      5
r6      RN      6
v3      RN      6
r7      RN      7
v4      RN      7
r8      RN      8
v5      RN      8
r9      RN      9
v6      RN      9

r10     RN     10
r11     RN     11
r12     RN     12
r13     RN     13

sl      RN     10
fp      RN     11
ip      RN     12
sp      RN     13
lr      RN     14
pc      RN     15

        AREA |C$$code|, CODE, READONLY

ModRelocOffset  *       0              ; subject to deferred relocation
SomeOffset      *       0
V_Bit           *       &10000000
SVC_Mode        *       3


        EXPORT  start_code_veneer
        EXPORT  initialise_lib_veneer
        EXPORT  initialise_user_veneer
        EXPORT  initialise_end_veneer
        EXPORT  finalise_lib_veneer
        EXPORT  service_call_veneer
        EXPORT  cmd_handler_veneer
        EXPORT  swi_handler_veneer
        EXPORT  swi_decode_veneer
        EXPORT  irq_entry_veneer
        EXPORT  irq_common_head_veneer
        EXPORT  irq_common_tail_veneer

start_code_veneer
        DCD     start_code_start
        DCD     start_code_end  - start_code_start
        DCD     start_code_call - start_code_start
        DCD     -1

start_code_start
start_code_call
        B       .+8
start_code_end


initialise_lib_veneer
        DCD     initialise_lib_start
        DCD     initialise_lib_end  - initialise_lib_start
        DCD     initialise_lib_call - initialise_lib_start
        DCD     -1

initialise_lib_start
        STMFD   sp!, {r7-r11, lr}
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        STMFD   sp!, {v1, v2}           ; which doesn't obey APCS...
; It is vital that the next MOV a1,... precedes the BL; CMHG assumes so.
        MOV     a1, #1                  ; request data copying (multiple
initialise_lib_call                     ; instantiation) by default to
        BL      .+8                     ; _clib_initialisemodule
initialise_lib_end


initialise_user_veneer
        DCD     initialise_user_start
        DCD     initialise_user_end  - initialise_user_start
        DCD     initialise_user_call - initialise_user_start
        DCD     %F01 - initialise_user_start
        DCD     -1

; _kernel_oserror *user_init(char *cmd_tail, int podule_base, void *priv_word);
initialise_user_start
        MOV     a3, a1                  ; private word pointer (from
                                        ; _clib_initialisemodule)
        ADD     a1, sp, #(10-7+2)*4     ; R10 = command tail
        LDMIA   a1, {a1, a2}            ; R11 = podule base
initialise_user_call
        BL      .+8
01      SUB     sl, sl, #0000
        LDMFD   sp!, {v1, v2}           ; restore old reloc modifiers
        STMIA   sl, {v1, v2}            ; saved across the fn call...
        LDMFD   sp!, {r7-r11, lr}
        CMPS    r0, #0
        BICEQS  pc, lr, #V_Bit
        ORRS    pc, lr, #V_Bit
initialise_user_end


initialise_end_veneer
        DCD     initialise_end_start
        DCD     initialise_end_end  - initialise_end_start
        DCD     -1
        DCD     -1

initialise_end_start
01      SUB     sl, sl, #0000
        LDMFD   sp!, {v1, v2}           ; restore old reloc modifiers
        STMIA   sl, {v1, v2}            ; saved across the fn call...
        LDMFD   sp!, {r7-r11, lr}
        BICS    pc, lr, #V_Bit
initialise_end_end


finalise_lib_veneer
        DCD     finalise_lib_start
        DCD     finalise_lib_end  - finalise_lib_start
        DCD     finalise_lib_call - finalise_lib_start
        DCD     %F01 - finalise_lib_start
        DCD     %F02 - finalise_lib_start
        DCD     -1

finalise_lib_start
        STMFD   sp!, {r7-r11, lr}
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     r0, r12                 ; make life easy for _clib_finalise
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!
finalise_lib_call
        BL      .+8                     ; to _clib_finalisemodule
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r7-r11, pc}^
finalise_lib_end


service_call_veneer
        DCD     service_call_start
        DCD     service_call_end  - service_call_start
        DCD     service_call_call - service_call_start
        DCD     %F01 - service_call_start
        DCD     %F02 - service_call_start
        DCD     -1

; void sc_handler(int service_no, _kernel_swi_regs *r, void *priv_word);
service_call_start
        STMFD   sp!, {r0-r9, sl, fp, lr}  ; create args in store; save lr;
        MOV     a1, r1                  ; service call number
        MOV     a2, sp                  ; regset *
        MOV     v3, pc
        BIC     a4, v3, #SVC_Mode
        TEQP    a4, #SVC_Mode           ; to SVC mode, preserving int'rupt enbl
        MOV     fp, #0                  ; halt C backtrace here!
        MOV     v4, lr                  ; save r14_SWI (lest entry mode = IRQ)
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a3, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000

service_call_call
        BL      .+8

        MOV     lr, v4                  ; retrieve SWI r14
        TEQP    v3, #0                  ; back to entry mode
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r0-r9, sl, fp, pc}^
service_call_end


cmd_handler_veneer
        DCD     cmd_handler_start
        DCD     cmd_handler_end  - cmd_handler_start
        DCD     cmd_handler_call - cmd_handler_start
        DCD     %F01 - cmd_handler_start
        DCD     %F02 - cmd_handler_start
        DCD     -1

; _kernel_oserror *cmd_handler(char *arg_str, int argc, int cmd_no, void *pw);
cmd_handler_start
        STMFD   sp!, {r0, sl, fp, lr}
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a4, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; (set by module init)
01      ADD     sl, sl, #0000           ; relocated by abs(sl_lib_offset) (< 0)
        MOV     fp, #0                  ; halt C backtrace here!

cmd_handler_call
        BL      .+8                     ; a dummy call

02      SUB     sl, sl, #0000
        STMIA   sl,  {v1, v2}           ; restore old reloc modifiers
        LDMFD   sp!, {r1, sl, fp, lr}

        CMP     r1, r0
        CMPNE   r0, #0
        BICEQS  pc, lr, #V_Bit
        ORRS    pc, lr, #V_Bit
cmd_handler_end


swi_handler_veneer
        DCD     swi_handler_start
        DCD     swi_handler_end  - swi_handler_start
        DCD     swi_handler_call - swi_handler_start
        DCD     %F01 - swi_handler_start
        DCD     %F02 - swi_handler_start
        DCD     -1

; _kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw);
swi_handler_start
        STMFD   sp!, {r0-r9, lr}        ; create args in store; save lr;
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        MOV     a1, r11                 ; swi_no
        MOV     a2, sp                  ; 'r'
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a3, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

swi_handler_call
        BL      .+8

02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        MOVS    r12, a1
        LDMFD   sp!, {r0-r9, lr}        ; restore (pos modified) regs
        BICEQS  pc, lr, #V_Bit          ; V clear if return value was 0
        MOV     r0, r12                 ; return value (error pointer) => r0
        ORRS    pc, lr, #V_Bit          ; & V set
swi_handler_end


swi_decode_veneer
        DCD     swi_decode_start
        DCD     swi_decode_end  - swi_decode_start
        DCD     swi_decode_call - swi_decode_start
        DCD     %F01 - swi_decode_start
        DCD     %F02 - swi_decode_start
        DCD     -1

; void swi_decode(int register[4], void *private_word);
swi_decode_start
        STMFD   sp!, {r0-r3, r7-r11, lr} ; create args in store; save lr;
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        MOV     a1, sp                  ; 'r'
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a2, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

swi_decode_call
        BL      .+8

02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r0-r3, r7-r11, pc} ; restore (pos modified) regs
swi_decode_end

irq_entry_veneer
        DCD     irq_entry_start
        DCD     irq_entry_end  - irq_entry_start
        DCD     -1
        DCD     -1

irq_entry_start
        STMFD   sp!, {r0-r9, sl, fp, lr}
        MOV     r2, #0
        B       .+8
irq_entry_end


irq_common_head_veneer
        DCD     irq_common_head_start
        DCD     irq_common_head_end  - irq_common_head_start
        DCD     %F02 - irq_common_head_start
        DCD     %F01 - irq_common_head_start
        DCD     -1

; int irq_handler(_kernel_swi_regs *r, void *private_word);
irq_common_head_start
        MOV     a1, sp                  ; input register set (possible args)
        MOV     v3, pc
        BIC     r3, v3, #SVC_Mode
        TEQP    r3, #SVC_Mode           ; to SVC mode, preserving int'rupt enbl

        MOV     fp, #0                  ; halt C backtrace here!
        MOV     v4, lr                  ; remember SWI r14
        MOV     sl, sp, LSR #20
        MOV     sl, sl, ASL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a2, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000

        MOV     lr, pc
02      ADD     lr, lr, #irq_common_head_end-.-4 ; relocated by cg_irq_handlers
                                        ; (ADR preserving PSR bits)
        ADD     pc, pc, r2              ; despatch...
        B       .+8                     ; dummy, marking start of tail...
irq_common_head_end

        ; then   B       irq_handler_0           ; corrupts r0-r3, r12
        ;        B       irq_handler_1           ; corrupts r0-r3, r12
        ; .....

irq_common_tail_veneer
        DCD     irq_common_tail_start
        DCD     irq_common_tail_end  - irq_common_tail_start
        DCD     -1
        DCD     %F02 - irq_common_tail_start
        DCD     -1

irq_common_tail_start
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        MOV     lr, v4                  ; restore SWI r14
        TEQP    v3, #0                  ; back to entry mode
        CMPS    r0, #0
        LDMEQFD sp!, {r0-r9, sl, fp, lr, pc}^ ; Yes
        LDMNEFD sp!, {r0-r9, sl, fp, pc}^     ; No, pass it on
irq_common_tail_end

        END

