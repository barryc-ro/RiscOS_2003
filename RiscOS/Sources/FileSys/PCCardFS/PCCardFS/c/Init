/*****************************************************************************************/
/***                                                                                   ***/
/***  Init.c                                                                           ***/
/***                                                                                   ***/
/***  Application:   PCCardFS Module                                                   ***/
/***  Version:       0.01                                                              ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          25th October 1993                                                 ***/
/***                                                                                   ***/
/***  Purpose:       Contains the code to initialise the module and also kill the      ***/
/***                 module when requested to do so.                                   ***/
/***                                                                                   ***/
/***  History:       0.01 25th October 1993 - Original version                         ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCCardFS_Initialisation()                                                      ***/
/***    PCCardFS_Termination()                                                         ***/
/***    Initialise_Variables()                                                         ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "Init.h"
#include "Resources.h"
#include "Error.h"
#include "Misc.h"
#include "FS_Veneer.h"

#include "Debug.h"


/*****************************************************************************************/
/***                                                                                   ***/
/***  PCCardFS_Initialise(cmd_tail, podule_base, pw)                                   ***/
/***                                                                                   ***/
/***  This function will install and initialise the PCCardFS module. It is called by   ***/
/***  the OS when the module is startted.                                              ***/
/***  The cmd_tail, podule_base and private_word will all be ignored. The code will    ***/
/***  perform the following:-                                                          ***/
/***    1) Register an exit routine, which is called when the module quits.            ***/
/***    2) Initialise all fixed variables.                                             ***/
/***    3) Attempt to initialise the resource messages.                                ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    NULL pointer, if installed succesfully.                                        ***/
/***    ErrorBlock, if an error occured.                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *PCCardFS_Initialise(char *cmd_tail, int podule_base, void *pw)
    {
    _kernel_oserror             *error = NULL;

    #if Debug == TRUE
        Set_DebugVar_Name("pccardfsdebug");
        DebugMessage("cK","*****           Initialising PCCardFS           ****\n\n");
    #endif


    /*************************************************************************************/
    /**   The following code will always be executed.                                   **/
    /*************************************************************************************/
    atexit(&PCCardFS_Terminate);                        /* register exit routine         */
    Private_Word = pw;

    error = InitialiseWorkspace();                      /* Claim and initialise workspace */
    if (error == NULL) InitialiseVariables();           /* Initialise fixed variables     */
    if (error == NULL) error = InitialiseResources();
    if (error == NULL) error = Initialise_FilingSystem();

    if(error) PCCardFS_Terminate();
    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  PCCardFS_Terminate()                                                             ***/
/***                                                                                   ***/
/***  This function will be called whenever the module is about to be terminated. It   ***/
/***  wil ensure that the module exits cleanly. It performs the following:-            ***/
/***                                                                                   ***/
/***    1) Release any calimed RMA Space                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
void PCCardFS_Terminate(void)
    {
    _kernel_swi_regs            callregs;

    /*************************************************************************************/
    /***        Release Workspace Memory                                               ***/
    /*************************************************************************************/
    if (Workspace != NULL) {
        callregs.r[0] = FREE_RMA_SPACE;
        callregs.r[2] = (int)Workspace;
        _kernel_swi(OS_Module, &callregs, &callregs);
        #if Debug == TRUE
            DebugMessage("cK","Released claimed memory for workspace\n");
        #endif
    }

    /*************************************************************************************/
    /***        Remove the PCCardFS filing system                                      ***/
    /*************************************************************************************/
    Remove_FilingSystem();
    #if Debug == TRUE
        DebugMessage("cK","Removed Installation of PCCardFS\n");
    #endif


    /*************************************************************************************/
    /***        Close the messages file                                                ***/
    /*************************************************************************************/
    callregs.r[0] = (int)Message_FileDescriptor;
    _kernel_swi(MessageTrans_CloseFile, &callregs, &callregs);


    #if Debug == TRUE
        DebugMessage("cK","*****          Terminating PCCardFS          ****\n\n");
    #endif
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  InitialiseWorkspace()                                                            ***/
/***                                                                                   ***/
/***  Will claim and initialise modules workspace areas. Pointers to the various       ***/
/***  workspace sections are also initialised.                                         ***/
/***                                                                                   ***/
/***    Areas:                                                                         ***/
/***            DriverRegistrationArea                                                 ***/
/***                    - DriverRoutineAddress            0 (ie. not installed)        ***/
/***  Return Value:                                                                    ***/
/***    NULL - Workspace claimed and initialised.                                      ***/
/***    Otherwise - pointer to errorblock.                                             ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *InitialiseWorkspace(void)
    {
    _kernel_oserror             *error = NULL;
    _kernel_swi_regs             callregs;

    #if Debug == TRUE
        DebugMessage("cK","Initialising workspace\n");
    #endif

    callregs.r[0] = CLAIM_RMA_SPACE;
    callregs.r[3] = WorkSpaceSize;
    if (_kernel_swi(OS_Module, &callregs, &callregs) != NULL) error = SetError(ERROR__NO_RMA);
    else {
        Workspace = (MEMORY_PTR)callregs.r[2];
        #if Debug == TRUE
            DebugMessage("cK","Claimed \"Workspace\" memory of &%4X bytes ", WorkSpaceSize);
            DebugMessage("cK","at address &%8X\n", (int)Workspace);
        #endif
    }

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  InitialiseVariables()                                                            ***/
/***                                                                                   ***/
/***  Will set default values to specific variables.                                   ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
void InitialiseVariables(void)
    {
    char        loop = 0;

    Rand_Number = (int)&InitialiseVariables + (rand() & 0x00F70FFF);

    Emptyness = 0;  /* All drives are empty initially */

    for(loop=0; loop < MAX_DRIVES; loop++) Sequence[loop] = 0;

    /*************************************************************************************/
    /***        Initialise the FS Header information                                   ***/
    /*************************************************************************************/
    FS_Header.Flags_and_FS_Number = (PCCardFS_FS_NUMBER << FS_NUMBER_SHIFT)
        | (HARD_DISC_USES_FIQ           << HARD_DISC_USES_FIQ__SHIFT)
        | (FLOPPY_USES_FIQ              << FLOPPY_USES_FIQ__SHIFT)
        | (USE_SCRATCH_SPACE_ONLY       << USE_SCRATCH_SPACE_ONLY__SHIFT)
        | (HD_SUPPORTS_MOUNT            << HD_SUPPORTS_MOUNT__SHIFT)
        | (HD_SUPPORTS_POLL             << HD_SUPPORTS_POLL__SHIFT)
        | (FLOPPY_SUPPORTS_POWER_EJECT  << FLOPPY_SUPPORTS_POWER_EJECT__SHIFT)
        | (HD_SUPPORTS_POWER_EJECT      << HD_SUPPORTS_POWER_EJECT__SHIFT)
        ;

    FS_Header.Title             = (int)FILING_SYSTEM_NAME - Image_Base;
    FS_Header.Boot_Text         = (int)FS_BOOT_STRING - Image_Base;
    FS_Header.DiscOp_Routines   = (int)&PCCardFS_DiscOpVeneer - Image_Base;
    FS_Header.MiscOp_Routines   = (int)&PCCardFS_MiscOpVeneer - Image_Base;

    #if Debug == TRUE
        DebugMessage("cK","Initialised the Filing System Block\n");
        #if Verbose == TRUE
            DebugMessage("cK","    Flags and FS No. = &%8X\n", FS_Header.Flags_and_FS_Number);
            if ((FS_Header.Flags_and_FS_Number & (HARD_DISC_USES_FIQ << HARD_DISC_USES_FIQ__SHIFT)) != 0)
                DebugMessage("cK","       - Hard Disc uses FIQs\n");
            if ((FS_Header.Flags_and_FS_Number & (FLOPPY_USES_FIQ << FLOPPY_USES_FIQ__SHIFT)) != 0)
                DebugMessage("cK","       - Floppy Disc uses FIQs\n");
            if ((FS_Header.Flags_and_FS_Number & (USE_SCRATCH_SPACE_ONLY << USE_SCRATCH_SPACE_ONLY__SHIFT)) != 0)
                DebugMessage("cK","       - Should use Scartch Space only\n");
            if ((FS_Header.Flags_and_FS_Number & (HD_SUPPORTS_MOUNT << HD_SUPPORTS_MOUNT__SHIFT)) != 0)
                DebugMessage("cK","       - Hard Disc supports Mounts\n");
            if ((FS_Header.Flags_and_FS_Number & (HD_SUPPORTS_POLL << HD_SUPPORTS_POLL__SHIFT)) != 0)
                DebugMessage("cK","       - Hard Disc supports Poll Change\n");
            if ((FS_Header.Flags_and_FS_Number & (FLOPPY_SUPPORTS_POWER_EJECT << FLOPPY_SUPPORTS_POWER_EJECT__SHIFT)) != 0)
                DebugMessage("cK","       - Floppy Discs support Power Eject\n");
            if ((FS_Header.Flags_and_FS_Number & (HD_SUPPORTS_POWER_EJECT << HD_SUPPORTS_POWER_EJECT__SHIFT)) != 0)
                DebugMessage("cK","       - Hard Discs support Power Eject\n");

            DebugMessage("cK","       - Filing System Number is %d\n", (FS_Header.Flags_and_FS_Number >> FS_NUMBER_SHIFT) & 0xFF);
            DebugMessage("cK","    Offset from module base, to Filing System Tile   = %d\n", FS_Header.Title);
            DebugMessage("cK","    Offset from module base, to Filing Boot Text     = %d\n", FS_Header.Boot_Text);
            DebugMessage("cK","    Offset from module base, to DiscOp entry routine = %d\n", FS_Header.DiscOp_Routines);
            DebugMessage("cK","    Offset from module base, to MiscOp entry routine = %d\n", FS_Header.MiscOp_Routines);
        #endif
        DebugMessage("cK","\n");
    #endif
}
