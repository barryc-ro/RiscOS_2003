/*****************************************************************************************/
/***                                                                                   ***/
/***  Swi.c                                                                            ***/
/***                                                                                   ***/
/***  Application:   PCCardFS Module                                                   ***/
/***  Version:       0.001                                                             ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          25th October 1993                                                 ***/
/***                                                                                   ***/
/***  Purpose:       Contains the code which parses the SWI calls.                     ***/
/***                                                                                   ***/
/***  History:       0.01 25th October 1993 - Original version                         ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCCardFS_SwiHanlder()                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "Swi.h"
#include "Error.h"
#include "MiscOp.h"

#include "Debug.h"


/*****************************************************************************************/
/***                                                                                   ***/
/***  PCCardFS_SwiHandler(SWI_number, regs, pw)                                        ***/
/***                                                                                   ***/
/***  This function will parse the swi passed, and call the necissary routines to      ***/
/***  perform the requested action. Note that this function will not perform any       ***/
/***  actions unless the resouceses are loaded for this module.                        ***/
/***                                                                                   ***/
/***  SWIs:                                                                            ***/
/***     0      - PCCardFS_DiscOp                                                      ***/
/***     1      - PCCardFS_Version                                                     ***/
/***     2      - PCCardFS_Drives                                                      ***/
/***     3      - PCCardFS_FreeSpace                                                   ***/
/***     5      - PCCardFS_DescribeDisc                                                ***/
/***     9      - PCCardFS_MiscOp                                                      ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    NULL pointer, if SWI was succesfully.                                          ***/
/***    ErrorBlock, if an error occured.                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *PCCardFS_SwiHandler(int SWI_number, _kernel_swi_regs *regs, void *pw)
    {
    PCCardFS_ErrorCode          error = NO_ERROR;
    int                         dummy;

    if (SWI_number == SWI__PCCARDFS__VERSION) error = SWI__PCCardFS_Version(regs); /* Always works regardless of resource status */
    else {
        /*********************************************************************************/
        /***        Decode each SWI supportted and pass to relevant routine.           ***/
        /*********************************************************************************/
        if (Resources_Loaded) {
            switch(SWI_number) {
                case SWI__PCCARDFS__DISCOP:
                    error = SWI__PCCardFS_DiscOp(regs);
                    break;

                case SWI__PCCARDFS__VERSION:
                    error = SWI__PCCardFS_Version(regs);
                    break;

                case SWI__PCCARDFS__DRIVES:
                    error = SWI__PCCardFS_Drives(regs);
                    break;

                case SWI__PCCARDFS__FREESPACE:
                    error = SWI__PCCardFS_FreeSpace(regs);
                    break;

                case SWI__PCCARDFS__DESCRIBEDISC:
                    break;

                case SWI__PCCARDFS__MISCOP:
                    dummy = PCCardFS_MiscOp(regs);
                    break;

                default:
                    error = ERROR__SWI_UNKNOWN;
                    break;
            }
        }
        else error = ERROR__NOT_READY;
    }

    return(SetError(error));
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_Version(regs)                                                      ***/
/***                                                                                   ***/
/***  Returns the PCCardFS's version number.                                           ***/
/***                                                                                   ***/
/***    On Entry:                                                                      ***/
/***       None.                                                                       ***/
/***                                                                                   ***/
/***    On Exit:                                                                       ***/
/***       R0 = Software Version Number (ie. *100 << 8)                                ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
PCCardFS_ErrorCode SWI__PCCardFS_Version(_kernel_swi_regs *reg)
    {

    #if Debug == TRUE
        DebugMessage("cK", "\n\n********       SWI PCCardFS_Version (&47541)  Entry       ********\n");
    #endif

    reg ->r[0] = (int) PCCARDFS_VERSION;

    #if Debug == TRUE
        DebugMessage("cK", "\n    SWI &47541, Exit:\n");
        DebugMessage("cK", "       R0 = &%8X    (PCCardFS version number)\n", reg ->r[0]);
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(NO_ERROR);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_DiscOp(regs)                                                       ***/
/***                                                                                   ***/
/***  Handles the PCCardFS_DiscOp SWI.                                                 ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Set R8 to PCCardFS's instance private word. (stored earlier)                   ***/
/***    Call 'FileCore_DiscOp'                                                         ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
PCCardFS_ErrorCode SWI__PCCardFS_DiscOp(_kernel_swi_regs *reg)
    {
    PCCardFS_ErrorCode  error = NO_ERROR;
    int                 temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n********       SWI PCCardFS_DiscOp (&47540)  Entry        ********\n");
        DebugMessage("cK", "       R1  = &%8X    (reason code & option flags)\n", reg ->r[1]);
        DebugMessage("cK", "       R2  = &%8X    (disc address)\n", reg ->r[2]);
        DebugMessage("cK", "       R3  = &%8X    (pointer to transfer buffer)\n", reg ->r[3]);
        DebugMessage("cK", "       R4  = &%8X    (length, in bytes)\n", reg ->r[4]);
        if ((reg ->r[1] & 0x0F) == 9) DebugMessage("cK", "       R6  = &%8X    (cache handle)\n", reg ->r[6]);
    #endif

    /*********************************************************************************/
    /***    Set R8 to 'instance private word' of PCCardFS                          ***/
    /*********************************************************************************/

    temp_r8 = reg ->r[8];
    reg ->r[8] = PCCardFS_InstancePrivateWord;


    /*********************************************************************************/
    /***    Call the 'FileCore_DiscOp' SWI                                         ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "   Calling ""FileCore_DiscOp"" SWI\n\n");
    #endif
    if (_kernel_swi(FileCore_DiscOp, reg, reg) != NULL) {
        KernErrorBlock = *((_kernel_oserror *)reg ->r[0]);
        error = ERROR__FILECORE_ERROR;
    }
    reg ->r[8] = temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n");
        DebugMessage("cK", "\n    SWI &47540, Exit:\n");
        DebugMessage("cK", "       R2 = &%8X    (disc address of next byte to be trasnfered)\n", reg ->r[2]);
        DebugMessage("cK", "       R3 = &%8X    (pointer to next buffer location)\n", reg ->r[3]);
        DebugMessage("cK", "       R4 = &%8X    (byte not transferred)\n", reg ->r[4]);
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_Drives(regs)                                                       ***/
/***                                                                                   ***/
/***  Handles the PCCardFS_Drives SWI.                                                 ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Set R8 to PCCardFS's instance private word. (stored earlier)                   ***/
/***    Call 'FileCore_Drives'                                                         ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
PCCardFS_ErrorCode SWI__PCCardFS_Drives(_kernel_swi_regs *reg)
    {
    PCCardFS_ErrorCode  error = NO_ERROR;
    int                 temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n********       SWI PCCardFS_Drives (&47542)  Entry        ********\n");
    #endif

    /*********************************************************************************/
    /***    Set R8 to 'instance private word' of PCCardFS                          ***/
    /*********************************************************************************/
    temp_r8 = reg ->r[8];
    reg ->r[8] = PCCardFS_InstancePrivateWord;

    /*********************************************************************************/
    /***    Call the 'FileCore_Drives' SWI                                         ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "   Calling ""FileCore_Drives"" SWI\n\n");
    #endif
    if (_kernel_swi(FileCore_Drives, reg, reg) != NULL) {
        error = ERROR__FILECORE_ERROR;
        KernErrorBlock = *((_kernel_oserror *)reg ->r[0]);
    }
    reg ->r[8] = temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n");
        DebugMessage("cK", "\n    SWI &47542, Exit:\n");
        DebugMessage("cK", "       R0 = &%8X    (default drive)\n", reg ->r[2]);
        DebugMessage("cK", "       R1 = &%8X    (number of FDDs)\n", reg ->r[3]);
        DebugMessage("cK", "       R2 = &%8X    (number of HDDs)\n", reg ->r[4]);
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_FreeSpace(regs)                                                    ***/
/***                                                                                   ***/
/***  Handles the PCCardFS_FreeSpace SWI.                                              ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Set R8 to PCCardFS's instance private word. (stored earlier)                   ***/
/***    Call 'FileCore_FreeSpace'                                                      ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
PCCardFS_ErrorCode SWI__PCCardFS_FreeSpace(_kernel_swi_regs *reg)
    {
    PCCardFS_ErrorCode  error = NO_ERROR;
    int                 temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n********       SWI PCCardFS_FreeSpace (&47543)  Entry        ********\n");
    #endif

    /*********************************************************************************/
    /***    Set R8 to 'instance private word' of PCCardFS                          ***/
    /*********************************************************************************/
    temp_r8 = reg ->r[8];
    reg ->r[8] = PCCardFS_InstancePrivateWord;


    /*********************************************************************************/
    /***    Call the 'FileCore_FreeSpace' SWI                                      ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "   Calling ""FileCore_FreeSpace"" SWI\n\n");
    #endif
    if (_kernel_swi(FileCore_FreeSpace, reg, reg) != NULL) {
        error = ERROR__FILECORE_ERROR;
        KernErrorBlock = *((_kernel_oserror *)reg ->r[0]);
    }
    reg ->r[8] = temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n");
        DebugMessage("cK", "\n    SWI &47543, Exit:\n");
        DebugMessage("cK", "       R0 = &%8X    (total free space)\n", reg ->r[2]);
        DebugMessage("cK", "       R1 = &%8X    (largest available space)\n", reg ->r[3]);
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_DescribeDisc(regs)                                                 ***/
/***                                                                                   ***/
/***  Handles the PCCardFS_DescribeDisc SWI.                                           ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Set R8 to PCCardFS's instance private word. (stored earlier)                   ***/
/***    Call 'FileCore_DescribeDisc                                                    ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
PCCardFS_ErrorCode SWI__PCCardFS_DescribeDisc(_kernel_swi_regs *reg)
    {
    PCCardFS_ErrorCode  error = NO_ERROR;
    int                 temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n********       SWI PCCardFS_DescribeDisc(&47545)  Entry        ********\n");
        DebugMessage("cK", "\n\n");
    #endif

    /*********************************************************************************/
    /***    Set R8 to 'instance private word' of PCCardFS                          ***/
    /*********************************************************************************/
    temp_r8 = reg ->r[8];
    reg ->r[8] = PCCardFS_InstancePrivateWord;


    /*********************************************************************************/
    /***    Call the 'FileCore_DescribeDisc' SWI                                   ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "   Calling ""FileCore_DescribeDisc"" SWI\n\n");
    #endif
    if (_kernel_swi(FileCore_DescribeDisc, reg, reg) != NULL) {
        error = ERROR__FILECORE_ERROR;
        KernErrorBlock = *((_kernel_oserror *)reg ->r[0]);
    }
    reg ->r[8] = temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n\n");
        DebugMessage("cK", "\n    SWI &47545, Exit:\n");
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  SWI__PCCardFS_MiscOp(regs)                                                       ***/
/***                                                                                   ***/
/***  Handles the PCCardFS_MiscOp SWI.                                                 ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Set R8 to PCCardFS's instance private word. (stored earlier)                   ***/
/***    Call 'FileCore_MiscOp'                                                         ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NO_ERROR, if succesfully.                                                      ***/
/***    PCMCIA Error Code, if an error occured.                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/

PCCardFS_ErrorCode SWI__PCCardFS_MiscOp(_kernel_swi_regs *reg)
    {
    PCCardFS_ErrorCode  error = NO_ERROR;
    int                 temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "n\n********       SWI PCCardFS_MiscOp(&47549)  Entry        ********\n");
    #endif

    /*********************************************************************************/
    /***    Set R8 to 'instance private word' of PCCardFS                          ***/
    /*********************************************************************************/
    temp_r8 = reg ->r[8];
    reg ->r[8] = PCCardFS_InstancePrivateWord;

    /*********************************************************************************/
    /***    Call the 'FileCore_MiscOp' SWI                                         ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "   Calling ""FileCore_MiscOp"" SWI\n\n");
    #endif
    if (_kernel_swi(FileCore_MiscOp, reg, reg) != NULL) {
        error = ERROR__FILECORE_ERROR;
        KernErrorBlock = *((_kernel_oserror *)reg ->r[0]);
    }
    reg ->r[8] = temp_r8;

    #if Debug == TRUE
        DebugMessage("cK", "\n    SWI &47549, Exit:\n");
        DebugMessage("cK", "\n******************************************************************\n");
    #endif

    return(error);
}
