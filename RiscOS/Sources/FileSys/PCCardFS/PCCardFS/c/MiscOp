/*****************************************************************************************/
/***                                                                                   ***/
/***  MiscOp.c                                                                         ***/
/***                                                                                   ***/
/***  Application:   PCCardFS Code Module                                              ***/
/***  Version:       0.001                                                             ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          25th October 1993                                                 ***/
/***                                                                                   ***/
/***  Purpose:       Contains routines to handle the Filing System 'MiscOp' calls to   ***/
/***                 perform low level accesses.                                       ***/
/***                                                                                   ***/
/***  History:       0.01 25th October 1993 - Original version                         ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCCardFS_MiscOp(reg)                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "MiscOp.h"
#include "Error.h"
#include "Misc.h"

#include "Debug.h"


/*****************************************************************************************/
/***                                                                                   ***/
/***  PCCardFS_MiscOp(reg)                                                             ***/
/***                                                                                   ***/
/***  This function is called by FileCore to perform a low level access to a PCCArdFS  ***/
/***  drive.                                                                           ***/
/***  Performs:                                                                        ***/
/***    1) Check Reason code                                                           ***/
/***    2) call routine to handle request                                              ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    0, Succesful.                                                                  ***/
/***    1 - 255, FileCore Error Number (see PRMs)                                      ***/
/***    > 255, bit 30 clear, Pointer to error block                                    ***/
/***    > 255, bit 31 set, Disc Error (see PRMs)                                       ***/
/***                                                                                   ***/
/*****************************************************************************************/
int PCCardFS_MiscOp(_kernel_swi_regs *reg)
    {
    int                 error = 0;

    #if Debug == TRUE
        DebugMessage("cK", "\n    ++++++++        PCCardFS MiscOp handler called          ++++++++\n");
    #endif

    switch(reg ->r[0] & 0x0F) {
        case MISCOP__MOUNT:
            error = MiscOp__Mount(reg);
            break;

        case MISCOP__POLL_CHANGED:
            MiscOp__PollChanged(reg);
            break;

        case MISCOP__LOCK:
            MiscOp__Lock(reg);
            break;

        case MISCOP__UNLOCK:
            MiscOp__UnLock(reg);
            break;

        default:
            #if Debug == TRUE
                DebugMessage("cK", "       MiscOp %d. (Not supported!)\n", reg ->r[0]);
            #endif
            break;
    }

    #if Debug == TRUE
        DebugMessage("cK", "   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
    #endif

    return(error);
}


/*****************************************************************************************/
/***                                                                                   ***/
/***  MiscOp__Mount(reg)                                                               ***/
/***                                                                                   ***/
/***  This function will return the required disc-record information and read the      ***/
/***  requested data. As is required by FileCore.                                      ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    1) Finds out the type of the partition. If DOS, then fiddle the disc record so ***/
/***       that it looks like a DOS floppy. Hopefully, this will fool DosFS into working */
/***    2) Set the disc record information.                                            ***/
/***            - Log2SectorSize = 10 (ie. 1024 bytes/sec)                             ***/
/***            - Sectors per track = 1                                                ***/
/***            - Heads = 1                                                            ***/
/***            - Density = 0  (ie. Hard Disc, not floppy)                             ***/
/***            - Low sector = 0, bit 6 = 0, bit 7 = 0                                 ***/
/***            - Root dir disc address = 515 (I don't know why)                       ***/
/***    3) Read the requested data. Erm, except it doesn't.                            ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    0, Function sucessful                                                          ***/
/***    !0, FileCore error.                                                            ***/
/***                                                                                   ***/
/*****************************************************************************************/
int MiscOp__Mount(_kernel_swi_regs *reg)
    {
    char               *disc_record;
    int                 error = 0;                      /* ie. no error                  */
    _kernel_swi_regs    regblock;

    #if Debug == TRUE
        DebugMessage("cK", "       Mount   (MiscOp 0)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = %9d    (drive)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address to read from)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes to read)\n", reg ->r[4]);
        DebugMessage("cK", "           R5  = &%8X    (pointer to disc record)\n", reg ->r[5]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
    #endif

    /*******************************************/
    /** Check the card drive is allocated     **/
    /*******************************************/
    regblock.r[0] = 0; /* Reason code for check partition presence */
    regblock.r[1] = (reg ->r[2] >> 29) & 0x07;
    _kernel_swi(PCMCIA_FSOp, &regblock, &regblock);

    if(regblock.r[2] == PARTITION_STATUS__DRIVEEMPTY) {
        Emptyness = Emptyness & !(1 << ((reg ->r[2] >> 29) & 0x07));
        return(ERROR__FILECORE__DRIVE_UNKNOWN);
    }
    disc_record = (char *) reg ->r[5];

    /********************************************************************/
    /*** Find out whether the partition is a DOS one by reading the   ***/
    /*** first three bytes. EBxx90 or E9xxxx means it _is_ DOS format ***/
    /********************************************************************/
/* we can (naughtily) use the disc record space as a buffer in which to store these
   bytes, as the following code overwrites this area. */
    regblock.r[0] = 1; /* Read Raw, no-scatter, common memory */
    regblock.r[1] = (reg ->r[2] >> 29) & 0x07; /* Card drive */
    regblock.r[2] = 0;
    regblock.r[3] = reg ->r[5]; /* Naughty! */
    regblock.r[4] = 4; /* neater than three... */
    _kernel_swi(PCMCIA_Read, &regblock, &regblock);

    if((*disc_record == 0xe9) || ((*disc_record == 0xeb) && (*(disc_record+2) == 0x90))) {
        /*********************************************************************************/
        /***    Fill in "Disc Record" information for a DOS format partition           ***/
        /*********************************************************************************/
        #if Debug == TRUE
            DebugMessage("cK", "Good golly, it's a DOS disc!");
        #endif
        *(disc_record + LOG_SECTOR_SIZE__DR_OFFSET)   = DOS_LOG_SECTOR_SIZE;
        *(disc_record + SECTORS_PER_TRACK__DR_OFFSET) = DOS_SECTORS_PER_TRACK;
        *(disc_record + HEADS__DR_OFFSET)             = DOS_HEADS;
        *(disc_record + DENSITY__DR_OFFSET)           = DOS_DENSITY;
        *(disc_record + LOW_SECTOR__DR_OFFSET)        = DOS_LOW_SECTOR;
        *(int *)(disc_record + ROOT_DIR__DR_OFFSET)   = DOS_ROOT_DIR;
    }
    else
    {
        /*********************************************************************************/
        /***    Fill in "Disc Record" information for an PCCardFS format partition     ***/
        /*********************************************************************************/
        *(disc_record + LOG_SECTOR_SIZE__DR_OFFSET)   = LOG_SECTOR_SIZE;
        *(disc_record + SECTORS_PER_TRACK__DR_OFFSET) = SECTORS_PER_TRACK;
        *(disc_record + HEADS__DR_OFFSET)             = HEADS;
        *(disc_record + DENSITY__DR_OFFSET)           = DENSITY;
        *(disc_record + LOW_SECTOR__DR_OFFSET)        = LOW_SECTOR;
        *(int *)(disc_record + ROOT_DIR__DR_OFFSET)   = ROOT_DIR;
    }

    /**********************************************************/
    /** Find the partition information from the Support Code **/
    /**********************************************************/
    regblock.r[0] = 0;  /* Reason code for partition info in PCMCIA_FSOp */
    regblock.r[1] = (reg ->r[2] >> 29) & 0x07;
    _kernel_swi(PCMCIA_FSOp, &regblock, &regblock);

    *(int *)(disc_record + DISC_SIZE__DR_OFFSET)  = regblock.r[1];


    #if Debug == TRUE
        DebugMessage("cK", "       Filled 'Disc Record' information\n");
        DebugMessage("cK", "           - Log2 of sector size = %d\n", *(disc_record + LOG_SECTOR_SIZE__DR_OFFSET));
        DebugMessage("cK", "           - Sectors per track = %d\n", *(disc_record + SECTORS_PER_TRACK__DR_OFFSET));
        DebugMessage("cK", "           - No. of Heads = %d\n", *(disc_record + HEADS__DR_OFFSET));
        DebugMessage("cK", "           - Density = %d\n", *(disc_record + DENSITY__DR_OFFSET));
        DebugMessage("cK", "           - Low Sector = %d\n", *(disc_record + LOW_SECTOR__DR_OFFSET));
        DebugMessage("cK", "           - Root dir, disc address = &%8X\n\n", *(int *)(disc_record + ROOT_DIR__DR_OFFSET));
        DebugMessage("cK", "           - Partition Length = &%8X\n\n", *(int *)(disc_record + DISC_SIZE__DR_OFFSET));
    #endif

    /*********************************************************************************/
    /***    Check if there is any data to be transferred                           ***/
    /*********************************************************************************/
    if (reg ->r[4] != 0) error = ERROR__FILECORE__DRIVE_EMPTY;

    #if Debug == TRUE
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           R1  = %9d    (drive)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address to read from)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes to read)\n", reg ->r[4]);
        DebugMessage("cK", "           R5  = &%8X    (pointer to disc record)\n", reg ->r[5]);
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  MiscOp__PollChanged(reg)                                                         ***/
/***                                                                                   ***/
/***  This function will return the changed status of the card.                        ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***      Reads sequence code off the partition & compares it against the last known.  ***/
/***                                                                                   ***/
/*****************************************************************************************/
void MiscOp__PollChanged(_kernel_swi_regs *reg)
    {
    _kernel_swi_regs    regblock;

    #if Debug == TRUE
        DebugMessage("cK", "       Poll Changed   (MiscOp 1)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = %9d    (drive)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (sequence number)\n", reg ->r[2]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
        DebugMessage("cK", "Sequence[] = &%8X\n", Sequence[reg ->r[1]]);
        DebugMessage("cK", "\n");
    #endif

    /*******************************************/
    /** Check the card drive is allocated     **/
    /*******************************************/
    regblock.r[0] = 0; /* Reason code for check partition presence */
    regblock.r[1] = reg ->r[1];
    _kernel_swi(PCMCIA_FSOp, &regblock, &regblock);

    if((Emptyness & (1 << reg ->r[1])) == 0) { /* The drive was empty last */
        #if Debug == TRUE
            DebugMessage("cK", "             Drive was last seen empty\n");
        #endif
        if(regblock.r[2] == PARTITION_STATUS__DRIVEEMPTY) {
            reg ->r[3] = 8+64; /* Ie still empty & empty works */
            #if Debug == TRUE
                DebugMessage("cK", "             Drive is still empty\n");
            #endif
        }
        else
        {
            reg ->r[3] = 4+128; /* Ie changed (now not empty) */
            Emptyness=Emptyness | (1 << reg->r[1]);       /** mark it as non-empty **/
            Sequence[reg ->r[1]]++;
            reg->r[2] = Sequence[reg->r[1]];
            #if Debug == TRUE
                DebugMessage("cK", "             Drive is not empty any more\n");
            #endif
        }
    }
    else /* Ie the drive wasn't empty last time we looked */
    {
        #if Debug == TRUE
            DebugMessage("cK", "             Drive was last seen occupied\n");
        #endif
        if(regblock.r[2] == PARTITION_STATUS__DRIVEEMPTY) { /* It's gone!!!!!! */
            Emptyness = Emptyness & !(1 << reg->r[1]); /** clear the 'presence bit' **/
            Sequence[reg->r[1]]++;
            reg ->r[2] = Sequence[reg->r[1]];
            reg ->r[3] = 8+64; /* Empty + Empty works */
            Emptyness = Emptyness & !(1 << ((reg ->r[2] >> 29) & 0x07));
            #if Debug == TRUE
                DebugMessage("cK", "             Drive has become empty\n");
            #endif
        }
        else
        {
            /** read the sequence to check it is still the same card **/
            if(reg->r[2] != Sequence[reg ->r[1]]) {
                reg ->r[3] = 4+128; /** changed! **/
                reg ->r[2] = Sequence[reg ->r[1]];
            }
            /** else return unchanged **/
            else reg ->r[3] = 0; /* ie unchanged */
            #if Debug == TRUE
                DebugMessage("cK", "             Drive is still occupied\n");
            #endif
         /*   reg->r[3]=0; /** TEST FOR BUG REMOVE TEMPORARY **/
        }
    }

    #if Debug == TRUE
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           R2  = &%8X    (sequence number)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (results flag)\n", reg ->r[3]);
        if ((reg ->r[3] & (1 << 0)) != 0) DebugMessage("cK", "                   - not changed\n");
        if ((reg ->r[3] & (1 << 1)) != 0) DebugMessage("cK", "                   - maybe changed\n");
        if ((reg ->r[3] & (1 << 2)) != 0) DebugMessage("cK", "                   - changed\n");
        if ((reg ->r[3] & (1 << 3)) != 0) DebugMessage("cK", "                   - empty\n");
        if ((reg ->r[3] & (1 << 4)) != 0) DebugMessage("cK", "                   - ready\n");
        if ((reg ->r[3] & (1 << 5)) != 0) DebugMessage("cK", "                   - drive is 40 track\n");
        if ((reg ->r[3] & (1 << 6)) != 0) DebugMessage("cK", "                   - empty works\n");
        if ((reg ->r[3] & (1 << 7)) != 0) DebugMessage("cK", "                   - changed works\n");
        if ((reg ->r[3] & (1 << 8)) != 0) DebugMessage("cK", "                   - disc in drive is high density\n");
        if ((reg ->r[3] & (1 << 9)) != 0) DebugMessage("cK", "                   - density sensing works\n");
        if ((reg ->r[3] & (1 << 10)) != 0) DebugMessage("cK", "                   - ready works\n");
   #endif
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  MiscOp__Lock(reg)                                                                ***/
/***                                                                                   ***/
/***  This function is called by filecore to lock a drive. PCMCIA cards can not be     ***/
/***  locked (at present!), and thus this call is simply ignored.                      ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Nothing                                                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
void MiscOp__Lock(_kernel_swi_regs *reg)
    {
    #if Debug == TRUE
        DebugMessage("cK", "       Lock   (MiscOp 2)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = %9d    (drive)\n", reg ->r[1]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
    #endif

    /*********************************************************************************/
    /***    Do Nothing                                                             ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "       -- Ignored\n");
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           None\n", reg ->r[2]);
    #endif
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  MiscOp__UnLock(reg)                                                              ***/
/***                                                                                   ***/
/***  This function is called by filecore to unlock a drive. PCMCIA cards can not be   ***/
/***  locked (at present!), and thus this call is simply ignored.                      ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    Nothing                                                                        ***/
/***                                                                                   ***/
/*****************************************************************************************/
void MiscOp__UnLock(_kernel_swi_regs *reg)
    {
    #if Debug == TRUE
        DebugMessage("cK", "       UnLock   (MiscOp 3)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = %9d    (drive)\n", reg ->r[1]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
    #endif

    /*********************************************************************************/
    /***    Do Nothing                                                             ***/
    /*********************************************************************************/
    #if Debug == TRUE
        DebugMessage("cK", "       -- Ignored\n");
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           None\n", reg ->r[2]);
    #endif
}
