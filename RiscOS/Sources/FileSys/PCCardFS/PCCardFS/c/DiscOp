/*****************************************************************************************/
/***                                                                                   ***/
/***  DiscOp.c                                                                         ***/
/***                                                                                   ***/
/***  Application:   PCCardFS Code Module                                              ***/
/***  Version:       0.001                                                             ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          25th October 1993                                                 ***/
/***                                                                                   ***/
/***  Purpose:       Contains routines to handle the Filing System 'DiscOp' calls to   ***/
/***                 perform low level accesses.                                       ***/
/***                                                                                   ***/
/***  History:       0.01 25th October 1993 - Original version                         ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCCardFS_DiscOp()                                                              ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "DiscOp.h"
#include "Error.h"
#include "Misc.h"

#include "Debug.h"



/*****************************************************************************************/
/***                                                                                   ***/
/***  PCCardFS_DiscOp(reg)                                                             ***/
/***                                                                                   ***/
/***  This function is called by FileCore to perform a low level access to a PCCArdFS  ***/
/***  drive.                                                                           ***/
/***  Performs:                                                                        ***/
/***    1) Check that the disc address is for a present carddrive. If not, error       ***/
/***    2) Check Reason code                                                           ***/
/***    3) call routine to handle request                                              ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    0, Succesful.                                                                  ***/
/***    1 - 255, FileCore Error Number (see PRMs)                                      ***/
/***    > 255, bit 30 clear, Pointer to error block                                    ***/
/***    > 255, bit 31 set, Disc Error (see PRMs)                                       ***/
/***                                                                                   ***/
/*****************************************************************************************/
int PCCardFS_DiscOp(_kernel_swi_regs *reg)
    {
    int                 error = 0;

    #if Debug == TRUE
        DebugMessage("cK", "\n    ++++++++        PCCardFS DiscOp handler called          ++++++++\n");
    #endif

    switch(reg ->r[1] & 0x0F) {
        case DISCOP__VERIFY:
            /** Do nothing really, but we pretend the 'disc' is OK **/
            reg ->r[2] = reg ->r[2] + reg ->r[4];
            reg ->r[4] = 0;
            break;

        case DISCOP__READ_SECTORS:
            error = DiscOp__ReadSectors(reg);
            break;

        case DISCOP__WRITE_SECTORS:
            error = DiscOp__WriteSectors(reg);
            break;

        case DISCOP__SEEK:
            /** Do nothing, but we must accept it **/
            break;

        case DISCOP__RESTORE:
            /** Do nothing, but we must accept this too **/
            break;

        default:
            error = ERROR__FILECORE__DRIVE_EMPTY;
            #if Debug == TRUE
                DebugMessage("cK", "       DiscOp %d. (Not supported!)\n", reg ->r[1] & 0x0F);
            #endif
            break;
    }
    #if Debug == TRUE
        DebugMessage("cK", "   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  DiscOp__ReadSectors(reg)                                                         ***/
/***                                                                                   ***/
/***  This function will attempt to read the sector data requested. This is achived by ***/
/***  calling the PCMCIA_Manager SWI's to perform the actual read.                     ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    1) Checks for the actual data to be read.                                      ***/
/***    2) Call PCMCIA_Read SWI to read requested sectors.                             ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    0, Function sucessful                                                          ***/
/***    !0, FileCore error.                                                            ***/
/***                                                                                   ***/
/*****************************************************************************************/
int DiscOp__ReadSectors(_kernel_swi_regs *reg)
    {
    int                 error = 0;                      /* ie. no error                  */
    _kernel_swi_regs    pcmcia;
    _kernel_swi_regs    regblock;

    #if Debug == TRUE
        DebugMessage("cK", "       Read Sectors   (DiscOp 1)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = &%8X    (reason code, option bits)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address to read from)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes to read)\n", reg ->r[4]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
        DebugMessage("cK", "\n");
    #endif

    /*******************************************/
    /** Check the card drive is allocated     **/
    /*******************************************/
    regblock.r[0] = 0; /* Reason code for check partition info **/
    regblock.r[1] = (reg ->r[2] >> 29) & 0x07; /** carddrive in question **/
    _kernel_swi(PCMCIA_FSOp, &regblock, &regblock);

    if(regblock.r[1] == 0) return(ERROR__FILECORE__DRIVE_EMPTY);

    /*********************************************************************************/
    /***    Call the PCMCIA_Read SWI to read the data.                             ***/
    /*********************************************************************************/
    pcmcia.r[0] = 1;                                /* Use read type 'Raw'           */
    pcmcia.r[1] = ((reg ->r[2] >> 29) & 0x07);      /* ie. card X                    */
    pcmcia.r[2] = reg ->r[2] & 0x1FFFFFFF;          /* byte address (ie. same as disc address) */
    pcmcia.r[3] = reg ->r[3];                       /* buffer to write data to       */
    pcmcia.r[4] = reg ->r[4];                       /* bytes to read                 */
    if(_kernel_swi(PCMCIA_Read, &pcmcia, &pcmcia) == NULL) {
        reg ->r[2] += reg ->r[4];                   /* next disc address to read     */
        reg ->r[3] += reg ->r[4];                   /* next buffer address           */
        reg ->r[4] = pcmcia.r[4];                   /* bytes not transfered          */
    }
    else
    {
        error = pcmcia.r[0];                        /* point to error message */
        #if Debug == TRUE
            DebugMessage("cK", ">Error returned from PCMCIA_Read\n");
        #endif
    }

    #if Debug == TRUE
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           R1  = &%8X    (should be preserved)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address of next byte to read)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address of next location)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes not read)\n", reg ->r[4]);
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  DiscOp__WriteSectors(reg)                                                        ***/
/***                                                                                   ***/
/***  This function will attempt to write the sector data requested. This is achieved  ***/
/***  by calling the PCMCIA_SupportCode SWI's to perform the actual write.             ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    1) Checks for the actual data to be write.                                     ***/
/***    2) Call PCMCIA_Write SWI to write requested sectors.                           ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    0, Function sucessful                                                          ***/
/***    !0, FileCore error.                                                            ***/
/***                                                                                   ***/
/*****************************************************************************************/
int DiscOp__WriteSectors(_kernel_swi_regs *reg)
    {
    int                 error = 0;                      /* ie. no error                  */
    int                 bytes_left, next_disc_address, bytes_to_write;
    int                *scatter_list_pointer;
    _kernel_swi_regs    pcmcia;
    _kernel_swi_regs    regblock;

    #if Debug == TRUE
        DebugMessage("cK", "       Write Sectors   (DiscOp 2)\n\n");
        DebugMessage("cK", "       On Entry:\n");
        DebugMessage("cK", "           R1  = &%8X    (reason code, option bits)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address to write to)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes to write)\n", reg ->r[4]);
        DebugMessage("cK", "           R8  = &%8X    (PCCardFS instance private word)\n", reg ->r[8]);
        DebugMessage("cK", "\n");
    #endif

    /*******************************************/
    /** Check the card drive is allocated     **/
    /*******************************************/
    regblock.r[0] = 0; /* Reason code for check partition info */
    regblock.r[1] = (reg ->r[2] >> 29) & 0x07; /** Carddrive **/
    _kernel_swi(PCMCIA_FSOp, &regblock, &regblock);

    if(regblock.r[1] == 0) return(ERROR__FILECORE__DRIVE_EMPTY);


    /*** Update the sequence number 'cos summats gonna change... ****/


    /*********************************************************************************/
    /***    Call the PCMCIA_Write SWI to write the data.                           ***/
    /*********************************************************************************/
    if ((reg ->r[1] & 0x20) != 0) {
        #if Debug == TRUE
            DebugMessage("cK", "       Using Scatter List Transfer\n");
        #endif
        /*****************************************************************************/
        /***    use scatter list information in transfer.                          ***/
        /*****************************************************************************/
        next_disc_address = reg ->r[2] & 0x1FFFFFFF;    /* keeps track of disc address   */
        bytes_left = reg ->r[4];                        /* bytes to read                 */
        scatter_list_pointer = (int *) reg ->r[3];      /* pointer to scatter list       */

        do {
            pcmcia.r[0] = 1;
            pcmcia.r[1] = (reg ->r[2] >> 29) & 0x07;        /* ie. card X                    */
            pcmcia.r[2] = next_disc_address;                /* byte address (ie. same as disc address) */
            pcmcia.r[3] = *(scatter_list_pointer + 0);      /* buffer to write data from     */
            pcmcia.r[4] = *(scatter_list_pointer + 1);      /* bytes to write                */
            if(pcmcia.r[4] > bytes_left) {
                pcmcia.r[4] = bytes_left;
            }
            bytes_to_write = pcmcia.r[4];

            if (_kernel_swi(PCMCIA_Write, &pcmcia, &pcmcia) != NULL) {
                error = pcmcia.r[0];                        /* point to error message */
                #if Debug == TRUE
                    DebugMessage("cK", ">Error returned from PCMCIA_Write\n");
                #endif
            }
            next_disc_address = pcmcia.r[3];
            bytes_left -= (bytes_to_write - pcmcia.r[4]);

            if ((error != 0) && (bytes_left != 0)) scatter_list_pointer +=2;
        } while((bytes_left !=0) && (error == 0));
        reg ->r[2] = next_disc_address;                 /* next write position           */
        *(scatter_list_pointer + 0) = *(scatter_list_pointer + 0) + (bytes_to_write - pcmcia.r[4]);
        *(scatter_list_pointer + 1) = *(scatter_list_pointer + 1) - (bytes_to_write - pcmcia.r[4]);
        reg ->r[3] = (int) scatter_list_pointer;        /* last scatter list entry point */
        reg ->r[4] = bytes_left;
    }
    else
    {
        /*****************************************************************************/
        /***    Normal transfer                                                    ***/
        /*****************************************************************************/
        pcmcia.r[0] = 1;
        pcmcia.r[1] = (reg ->r[2] >> 29) & 0x07;        /* ie. card X                    */
        pcmcia.r[2] = reg ->r[2] & 0x1FFFFFFF;          /* byte address (ie. same as disc address) */
        pcmcia.r[3] = reg ->r[3];                       /* buffer to write data from     */
        pcmcia.r[4] = reg ->r[4];                       /* bytes to write                */
        if (_kernel_swi(PCMCIA_Write, &pcmcia, &pcmcia) == NULL) {
            reg ->r[2] += (reg ->r[4] - pcmcia.r[4]);    /* next disc address to write    */
            reg ->r[3] = pcmcia.r[3];                   /* next buffer address           */
            reg ->r[4] = pcmcia.r[4];                   /* bytes not transfered          */
        }
        else
        {
            error = pcmcia.r[0];                        /* point to error message */
            #if Debug == TRUE
                DebugMessage("cK", ">Error returned from PCMCIA_Write\n");
            #endif
        }
    }

    #if Debug == TRUE
        DebugMessage("cK", "       On Exit:\n");
        DebugMessage("cK", "           R1  = &%8X    (should be preserved)\n", reg ->r[1]);
        DebugMessage("cK", "           R2  = &%8X    (disc address of next byte to write)\n", reg ->r[2]);
        DebugMessage("cK", "           R3  = &%8X    (buffer's address of next location)\n", reg ->r[3]);
        DebugMessage("cK", "           R4  = &%8X    (bytes not written)\n", reg ->r[4]);
    #endif

    return(error);
}
