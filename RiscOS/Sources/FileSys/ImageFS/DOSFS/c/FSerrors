/*> c.FSerrors <*/
/*---------------------------------------------------------------------------*/
/* Error strings and handler functions            Copyright (c) 1989 JGSmith */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "h.ASCII"
#include "h.DOSFSctl"
#include "h.debug"
#include "h.FSerrors"
#if 1 /* SMC_FIX_RO_5593 */
  #include "h.MsgTrans"
#endif

/*-------------------------------------------------------------------------*/

_kernel_oserror *_syserr ;      /* global error pointer */

/*---------------------------------------------------------------------------*/

#if 1 /* SMC_FIX_RO_5593 */
/* The following is used to construct MessageTrans tokens for errors. */
#define ERROR_FMT "ERR%2.2X"
#else
static errentry errlist[] = {
         {0x00,NO, "Filing system operation not supported"},
         {0x01,YES,"File \"%s\" not found"},
         {0x02,YES,"Directory \"%s\" not found"},
         {0x03,YES,"Object \"%s\" not a file"},
         {0x04,YES,"File \"%s\" already open"},
         {0x05,NO, "C heap exhausted"},
         {0x06,NO, "Failed to load DOS FAT sectors"},
         {0x07,YES,"\"%s\" contains wild cards"},
         {0x08,YES,"Failed to save \"%s\""},
         {0x09,NO, "Name translation failed"},
         {0x0A,NO, "Image read failed"},
         {0x0B,NO, "Image write failed"},
         {0x0C,NO, "Cluster chain is not consistent"},
         {0x0D,NO, "Feature not yet implemented"},
         {0x0E,NO, "Disc full"},
         {0x0F,NO, "Transfer request is not sector multiple"},
         {0x10,NO, "DOS disc does NOT have 512byte sectors"},
         {0x11,NO, "DOS image not formatted"},
         {0x12,NO, "Winchester image does NOT contain a bootable partition"},
         {0x13,NO, "Winchester bootable partition is NOT MSDOS"},
         {0x14,NO, "Already exists"},
         {0x15,NO, "Types don't match"},
         {0x16,YES,"Failed to create directory \"%s\""},
         {0x17,YES,"Directory \"%s\" not empty"},
         {0x18,NO, "EOF"},
         {0x19,NO, "Directory full"},
         {0x1A,NO, "Failed to ensure file length"},
         {0x1B,NO, "DOS BOOT block contains invalid information"},
         {0x1C,NO, "Invalid MSDOS extension character given"},
         {0x1D,NO, "MSDOS extension given longer than 3 characters"},
         {0x1E,NO, "Image type not supported (invalid magic number)"},
         {0x1F,NO, "MS-DOS discs do not have boot options"},
         {0x20,NO, "Desired format cannot be supported"},
         {0x21,YES,"Invalid name \"%s\" (cannot translate to MS-DOS name)"},
         {0x22,NO ,"Invalid drive specifier"},
         {0x22,NO ,"Unknown keyboard read error"},
         {0x23,NO ,"CLUSTER in use"},

         {0x00,NO, "<end of error message list>"},
                            } ; /* errlist[] */
#endif

_kernel_oserror  _gerror = {0} ; /* static error structure */
_kernel_oserror *_syserr ;       /* static pointer to the error structure */

/*---------------------------------------------------------------------------*/
/* global_error:
 * Return a RISC OS error block pointer for the given error number.
 */
_kernel_oserror *global_error(int number)
{
 /* return a pointer to the "_kernel_oserror" block for error "number" */
#if 1 /* SMC_FIX_RO_5593 */
 char token[8];
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
#endif
 _gerror.errnum = ext_err(number) ;
#if 1 /* SMC_FIX_RO_5593 */
 /* lookup Messages file for error text */
 sprintf(token, ERROR_FMT, number);
 if ((err = msgtrans_lookup(token, &buf, &bufsz, 0, 0, 0, 0)) != NULL)
  return err;
#else
 sprintf(&(_gerror.errmess[0]),errlist[number].errtext) ;
#endif
 tracef2("DOSFS: global_error: &%08X \"%s\"\n",_gerror.errnum,_gerror.errmess);
 return(_syserr) ;
}

/*---------------------------------------------------------------------------*/
/* global_errorP:
 * Return a RISC OS error block pointer for the given error number. The
 * passed parameter is placed into the error message.
 */

_kernel_oserror *global_errorP(int number,char *par1)
{
 /* return a pointer to the "_kernel_oserror" block for error "number" */
#if 1 /* SMC_FIX_RO_5593 */
 char token[8];
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
#endif
 _gerror.errnum = ext_err(number) ;
#if 1 /* SMC_FIX_RO_5593 */
 /* lookup Messages file for error text */
 sprintf(token, ERROR_FMT, number);
 if ((err = msgtrans_lookup(token, &buf, &bufsz, par1, 0, 0, 0)) != NULL)
  return err;
#else
 sprintf(&(_gerror.errmess[0]),errlist[number].errtext,par1) ;
#endif
 tracef2("DOSFS: global_errorP: &%08X \"%s\"\n",_syserr->errnum,_syserr->errmess) ;
 return(_syserr) ;
}

/*---------------------------------------------------------------------------*/

void global_error0(int number)
{
 /* place error number and message into "_syserr" */
 global_error(number) ;
 return ;
}

/*---------------------------------------------------------------------------*/
#if 0 /* not used at the moment */
int exported_error_number(int number)
{
 return(ext_err(errlist[number].errnum)) ;
}
#endif
/*---------------------------------------------------------------------------*/

void global_error1(int number,char *par1)
{
 /* place error number and message into "_syserr" */
#if 1 /* SMC_FIX_RO_5593 */
 global_errorP(number, par1);
#else
 _gerror.errnum = ext_err(errlist[number].errnum) ;
 sprintf(&(_gerror.errmess[0]),errlist[number].errtext,par1) ;
 tracef2("DOSFS: global_error1: &%08X \"%s\"\n",_syserr->errnum,_syserr->errmess) ;
#endif
 return ;
}

/*---------------------------------------------------------------------------*/

void global_errorX(_kernel_oserror *errptr)
{
 _gerror.errnum = errptr->errnum ;
 sprintf(&(_gerror.errmess[0]),errptr->errmess) ;
 return ;
}

/*---------------------------------------------------------------------------*/

_kernel_oserror *global_errorT(int number,char *token,char *par1,char *par2)
{
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
 _gerror.errnum = ext_err(number) ;
 /* lookup Messages file for error text */
 if ((err = msgtrans_lookup(token, &buf, &bufsz, par1, par2, 0, 0)) != NULL)
  return err;
 tracef2("DOSFS: global_errorT: &%08X \"%s\"\n",_syserr->errnum,_syserr->errmess) ;
 return(_syserr) ;
} 
/*> EOF c.FSerrors <*/
