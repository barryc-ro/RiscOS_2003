/*> c.DOSnaming <*/
/*---------------------------------------------------------------------------*/
/* MSDOS to RISCOS name conversion                Copyright (c) 1989 JGSmith */
/*---------------------------------------------------------------------------*/
/* RISC OS name:
 *      [$.]<path>
 * RISC OS path:
 *      <filename (max. 10 chars)>[.<path element>]
 *
 * DOS name:
 *      [\]<path>
 * DOS path:
 *      <filename (max. 8 chars)>[.<extension (max. 3 chars)>[\<path element>]
 */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <signal.h>

#include "kernel.h"
#include "h.ASCII"
#include "h.debug"
#include "h.ADFSshape"
#include "h.DOSshape"
#include "h.TIMEconv"
#include "h.DOSnaming"
#include "h.wcompare"
#include "h.FSerrors"
#if 1 /* SMC_TRUNCATE */
 #include "h.DOSFS"
#endif

/*---------------------------------------------------------------------------*/
/* validate that the given character appears in the string */

int validchar(char *string,char init)
{
  if (init >= 128) return -1;    /* Allow top bit set characters */

  while (*string != NULL)
  {
    if (*string == init)
      return -1;
    string++;
  }

  return 0;
}

/*---------------------------------------------------------------------------*/
/* Map certain characters between filing systems */

static char mapchar(char cchr,char *fromlist,char *tolist)
{
  while (*fromlist != NULL)
  {
    if (cchr == *fromlist)
      return *tolist;
    fromlist++;
    tolist++;
  }
  return cchr;
}

/*-------------------------------------------------------------------------*/

static int chr_pos(char *text,char marker)
{
 int index ;

 /* return the character position of the passed character (or 0 if none) */
 for (index = 0; (text[index] != NULL); index++)
  if (text[index] == marker)
   return(index) ;

 return(0) ;
}

/*-------------------------------------------------------------------------*/
/* return a string containing the text before the given character */

char *before(char *newptr,char *text,char marker,int npad)
{
 int cpos = chr_pos(text,marker) ;
 if (cpos == 0)
  cpos = strlen(text) ;

 strncpy(newptr,text,cpos) ;
 if (npad == 0)
  newptr[cpos] = NULL ;

 return(newptr) ;
}

/*-------------------------------------------------------------------------*/
/* return a string containing the text after the given character */

char *after(char *newptr,char *text,char marker,int npad)
{
 int cpos = chr_pos(text,marker) ;

 if (cpos != 0)
  {
   int len = strlen(text) ;
   if (npad == 0)
    strcpy(newptr,&text[cpos + 1]) ;
   else
    strncpy(newptr,&(text[cpos + 1]),(len - (cpos + 1))) ;
  }
 else
  if (npad == 0)
   strcpy(newptr,"") ;

 return(newptr) ;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* Check that the given DOS names are identical */

int namematch(char *wcname,char *fname)
{
 char string1[DOSnamesize] ;
 char string2[DOSnamesize] ;

 /* Code assumes characters upto (and including) "file_sep" will always fit
  * in RISC OS names.
  */
 before(string1,fname,file_sep,0) ;
 before(string2,wcname,file_sep,0) ;
 if (wild_card_compare(string1,string2,DOSwcmult,DOSwcsing) == TRUE)
  {
   /* "string1" is the full (non-wildcarded) filename we have matched with */
   /* "string2" is the original (wildcarded) filename we were given on entry */
#if 0 /* SMC_FIX */
   if (strpbrk(wcname,string1) == NULL)
    {
     tracef0("namematch: no extension present\n") ;
     if (strpbrk(fname,string1) != NULL)
      return(FALSE) ; /* extension present in full filename */
     else
      return(TRUE) ; /* no extension present - filenames matched */
    }
#endif

   after(string1,fname,file_sep,0) ;
   after(string2,wcname,file_sep,0) ;

#if 0 /* SMC_FIX */
   /* deal with truncated DOS names on RISC OS */
   string2[strlen(string2) + 1] = '\0' ;
   string2[strlen(string2)] = wcmult ;
#endif

   if (wild_card_compare(string1,string2,DOSwcmult,DOSwcsing) == TRUE)
    return(TRUE) ;
  }

 return(FALSE) ;
}

/*---------------------------------------------------------------------------*/
/* convertRISCOStoDOS:
 * translate a standard RISC OS name into a MS-DOS one.
 * **** we should really include code to check the "dest" buffer limits ****
 */
char *convertRISCOStoDOS(char *source,char *dest)
{
 char      *csptr = source ;
 char      *cdptr = dest ;
 int        loop ;
 int        filesepseen = FALSE ; /* if we have seen the file seperator */
 char      *cptr ;      /* string pointer */
 char       lchr ;      /* last character seen */
 int        point = 0 ; /* position where file extension started */

 if ((source == NULL) || (*source == NULL))
  {
   tracef0("DOSFS: convertRISCOStoDOS: NULL name\n") ;
   *dest = NULL ;
   return(dest) ;
  }

 tracef1("DOSFS: convertRISCOStoDOS: \"%s\"",source) ;

 lchr = '\0' ; /* no last character */
 cptr = csptr;
 do {
   /* Ensure that "/" characters do not appear at the start or end of the name
    * and that "//" sequences are trapped.
    */
   if ((*cptr == '/' && (lchr == '\0' || lchr == *cptr || lchr == '.')) || ((lchr == '/') && ((*cptr == '\0') || (*cptr == '.'))))
    return_error1(char *,err_invalidname,source) ;

   lchr = *cptr++ ; /* remember this character */
 } while (lchr);

 if (*csptr == '$')             /* ROOT directory specifier */
  {
   csptr++ ;
   if (*csptr == '.')           /* RISC OS directory seperator */
    {
     *cdptr++ = dir_sep ;       /* MSDOS directory seperator */
     csptr++ ;
    }
   else
    if (*csptr == NULL)
     *cdptr++ = dir_sep ;
    else
     *cdptr++ = '$' ;
  }

 for (loop = 0;;)       /* convert the remainder of the pathname */
  {
   if (*csptr == NULL)  /* end of the source pathname */
    {
     *cdptr = NULL ;    /* terminate the destination pathname */
     break ;
    }

   switch (*csptr)
    {
     case '.' : /* RISC OS to directory seperator */
                *cdptr++ = dir_sep ;
                csptr++ ;
                loop = 0 ;
                filesepseen = FALSE ; /* for this leafname */
                break ;

     case '/' : /* convert to file seperator */
                if (filesepseen)
                 return_error1(char *,err_invalidname,source);
                *cdptr++ = file_sep ;
                csptr++ ;
                loop++ ;
                point = loop ;
                filesepseen = TRUE ;
                break ;

     default  : /* perform standard name mapping */
                if (filesepseen)
                 {
                  char c = *csptr++;
                  /* should never need to truncate the extension */
                  if ((loop - point) >= extsize)
                   return_error1(char *,err_invalidname,source) ;
                  if (islower(c))
                   c = toupper(c);
                  *cdptr++ = mapchar(c,ROmapping,DOSmapping) ;
                 }
                else
                 {
                  if (loop < RISCOStruncate)    /* characters left */
                   {
                    char c = *csptr;
                    if (islower(c))
                     c = toupper(c) ;
                    *cdptr++ = mapchar(c,ROmapping,DOSmapping) ;
                   }
#if 1 /* SMC_TRUNCATE */
                  else
                   {
                    if (!(module_flags & TRUNCATE_NAMES))
                     return_errorT(char *, err_nametoolong, tok_nametoolong, source, namsizestr);
                   }
#endif
                  csptr++ ;      /* step over this DOS character */
                 }
                loop++ ;
                break ;
    }
  }

 tracef1(" converted to \"%s\"\n",dest) ;

 for (cptr = dest; *cptr; cptr++)
  if (!validchar(valchars,*cptr))
   return_error1(char *,err_invalidname,source);

 return(dest) ;
}

/*-------------------------------------------------------------------------*/
/* convertDOStoRISCOS:
 */
char *convertDOStoRISCOS(char *source,char *dest)
{
 char *csptr = source ;
 char *cdptr = dest ;
 int   loop ;

 tracef1("DOSFS: convertDOStoRISCOS: \"%s\" ",source) ;

 if (*csptr == dir_sep)
  *cdptr++ = '$' ;

 for (loop = 0;;)
  {
   if (*csptr == NULL)  /* end of the source pathname */
    {
     *cdptr = NULL ;    /* terminate filename */
     break ;            /* the for loop */
    }

   switch (*csptr)
    {
     case file_sep : /* convert the character to "/" */
                     *cdptr++ = '/' ;
                     csptr++ ;
                     loop++ ;
                     break ;

     case dir_sep  : /* convert to RISC OS directory seperator */
                     *cdptr++ = '.' ;
                     loop = 0 ;
                     csptr++ ;
                     break ;

     default       : /* perform standard name mapping */
                     /* we never truncate here, it's up to the outside world */
                     *cdptr++ = mapchar(*csptr,DOSmapping,ROmapping) ;
                     csptr++ ;
                     loop++ ;
                     break ;
    }
  }

 tracef1("converted to \"%s\"\n",dest) ;
 return(dest) ;
}

/*---------------------------------------------------------------------------*/
/*> EOF c.DOSnaming <*/
