/*> c.debug <*/
/*-------------------------------------------------------------------------*/
/* Debug control and output functions          Copyright (c) 1990, JGSmith */
/*-------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "h.debug"

#if TRACE

static int trace_state = 1 ;    /* trace enabling flag */

/*-------------------------------------------------------------------------*/
/* trace_on: enable debugging output */

void trace_on(void)
{
 trace_state = 1 ;
 return ;
}

/*-------------------------------------------------------------------------*/
/* trace_off: disable debugging output */

void trace_off(void)
{
 trace_state = 0 ;
 return ;
}
#endif /* TRACE */

#if WRITEF
/*-------------------------------------------------------------------------*/
/* writef: multiple argument output (varargs) */

int writef(char *format,...)
{
  __va_list args ;
  int       length = 0 ;

#if TRACE
  if (trace_state == 1) {
#endif

#if TUBE
    _kernel_oscli("HostVDU") ;
#else
#ifdef TRACEFILE
    {
      FILE *traceout;
      traceout = fopen(TRACEFILE, "a");
      if (traceout == NULL)
        return 0;
#endif
#endif

      va_start(args,format) ;
#ifdef TRACEFILE
      length = vfprintf(traceout,format,args) ;
#else
      length = vfprintf(stdout,format,args) ;
#endif
      va_end(args) ;

#if TUBE
      _kernel_oscli("TubeVDU") ;
#else
#ifdef TRACEFILE
      fclose(traceout);
    }
#endif
#endif

#if TRACE
  }
#endif

  return(length) ;
}
#endif /* WRITEF */


#if TRACE_MEM
#undef malloc
#undef free

struct mement {
  void *addr;
  int size;
  char *file;
  int line;
};

static struct mement *memtrace = NULL;
static int memtsize = 0;
static int memtused = 0;

void *_my_malloc(char *file, int line, int size)
{
  int next;
  char *addr;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr == NULL)
      break;
  if (next == memtused) {
    if (next == memtsize) {
      memtsize += 64;
      memtrace = (struct mement *)realloc(memtrace, memtsize * sizeof(struct mement));
      if (memtrace == NULL) {
        writef("malloc: out of store\n");
        return NULL;
      }
    }
    memtused++;
  }
  addr = malloc(size);
  if (addr != NULL) {
    memtrace[next].addr = addr;
    memtrace[next].size = size;
    memtrace[next].file = file;
    memtrace[next].line = line;
    writef("malloc: allocated %d bytes at 0x%x from %s line %d\n", size, addr, file, line);
  } else
    writef("malloc: failed in %s at line %d\n", file, line);
  return addr;
}
  
void _my_free(void *addr)
{
  int next;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr == addr) {
      free(addr);
      memtrace[next].addr = NULL;
      writef("free: freed %d bytes at 0x%x allocated from %s line %d\n", memtrace[next].size,
              addr, memtrace[next].file, memtrace[next].line);
    }
}

void show_mem_trace(void)
{
  int next;
  for (next = 0; next < memtused; next++)
    if (memtrace[next].addr != NULL) {
      writef("show_mem_trace: at 0x%x, size %d allocated from %s line %d\n",
              memtrace[next].addr, memtrace[next].size, memtrace[next].file, memtrace[next].line);
      free(memtrace[next].addr);
    }
  free(memtrace);
  memtrace = NULL;
  memtsize = memtused = 0;
}
#endif /* TRACE_MEM */

#if TRACE_SWIS
#undef _kernel_swi

_kernel_oserror *_my_kernel_swi(char *file, int line, int swi, _kernel_swi_regs *rin, _kernel_swi_regs *rout)
{
  writef("(&%X: &%X,&%X,&%X,&%X,&%X) ",
         swi,rin->r[0],rin->r[1],rin->r[2],rin->r[3],rin->r[4]);
  return _kernel_swi(swi, rin, rout);
}
#endif
/*-------------------------------------------------------------------------*/
/*> EOF c.debug <*/
