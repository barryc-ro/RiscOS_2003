/*> h.FSerrors <*/
/*---------------------------------------------------------------------------*/
/* Error MACROs and allocations                   Copyright (c) 1989 JGSmith */
/*---------------------------------------------------------------------------*/

#ifndef __h_FSerrors
#define __h_FSerrors

/*---------------------------------------------------------------------------*/

#include "kernel.h"     /* for error block structure definition */

/*---------------------------------------------------------------------------*/

#define FS_errflag  (0x00010000)       /* Filing System error */
#define FS_number   (43)               /* DOSFS */
#define err_mask    (0xFF)
#define ext_err(v)  (((v) & err_mask) | FS_errflag | (FS_number << 8))

#if 1 /* SMC_FIX */
typedef enum {NO,YES} takesparm ; /* does error message require parameter */

typedef struct {
                unsigned int  errnum ;
                takesparm     pars ;
                char         *errtext ;
               } errentry ;
#endif

/* a reference symbol for each of the error messages */

/* The following are DOSFS specific error messages. */
/* 0x00, 0x01, 0x02 used in s.DOSFSctl */
#define err_notfile           (0x03) /* Uses Global message "IsntFil" */
#define err_fatloadfailed     (0x04)
#define err_heapexhausted     (0x05) /* Uses Global message "NoMem" */
#define err_namereadfailed    (0x06)
#define err_readfailed        (0x07)
#define err_writefailed       (0x08)
#define err_clusterchain      (0x09)
#define err_notDOSimage       (0x0A)
#define err_EOF               (0x0B)
#define err_invalidname       (0x0C)
#define err_invalidchar       (0x0D)
#define err_toolong           (0x0E)
#define err_nobootoption      (0x0F)
#define err_badformat         (0x10)
#define err_keyboardread      (0x11)
#define err_clusterinuse      (0x12)
#define err_badswi            (0x13) /* Uses Global message "BadSWI" */
#define err_buftoosmall       (0x14) /* Uses Global message "BufOFlo" */

/* The following have been matched with FileCore error messages. */
#define err_baddrive          (0xAC)
#define err_dirfull           (0xB3)
#define err_notempty          (0xB4)
#define err_fileopen          (0xC2)
#define err_filelocked        (0xC3)
#define err_alreadyexists     (0xC4)
#define err_badtypes          (0xC5) /* Uses Global message "TypsBad" */
#define err_discfull          (0xC6)
#define err_nametoolong       (0xCC) /* Uses Global message "LongNam" */
#define err_objectnotfound    (0xD6) /* Uses Global message "NoAny" */
/* 0xD8 used in s.DOSFSctl */
#define err_wildcardedname    (0xFD)

/*---------------------------------------------------------------------------*/
/* GLOBAL error reporting */

/* "t" == return type */
/* "n" == internal error number */
/* "p" == optional parameter */
/* "e" == standard error pointer */
#define return_error0(t,n)      { global_error0(n) ; return((t)-1) ; }
#define return_error1(t,n,p)    { global_error1((n),(p)) ; return((t)-1) ; }
#define return_errorX(t,e)      { global_errorX((_kernel_oserror *)(e)) ; return((t)-1) ; }
#define return_errorT(t,n,s,p1,p2)  { global_errorT((n),(s),(p1),(p2)) ; return((t)-1) ; }

extern _kernel_oserror  _gerror ;    /* actual static error area */
extern _kernel_oserror *_syserr ;    /* return pointer */

extern _kernel_oserror *global_error(int number) ; /* error number 0..255 */
extern _kernel_oserror *global_errorP(int number,char *par) ;
extern _kernel_oserror *global_errorT(int number, char *token, char *par1, char *par2) ;
extern void global_error0(int number) ;
extern void global_error1(int number,char *par1) ;
extern void global_errorX(_kernel_oserror *error_pointer) ;

/* Message tokens for Global errors. */
#define tok_heapexhausted       "NoMem"
#define tok_buftoosmall         "BufOFlo"
#define tok_badswi              "BadSWI"
#define tok_notfile             "IsntFil"
#define tok_badtypes            "TypsBad"
#define tok_nametoolong         "LongNam"
#define tok_objectnotfound      "NoAny"

/*---------------------------------------------------------------------------*/

#endif /* __h_FSerrors */

/*---------------------------------------------------------------------------*/
/*> EOF h.FSerrors <*/
