/*> h.ADFSshape <*/
/*-------------------------------------------------------------------------*/
/* ADFS logical formats                         Copyright (c) 1989 JGSmith */
/*                                                                         */
/* NOTE: due to the way the ARM C compiler generates shorts (i.e. word     */
/*       aligned), to generate the correct byte-aligned structures we will */
/*       either use bit-fields or split the short into a LO and HI byte    */
/*       pair, depending on the exact requirements                         */
/*-------------------------------------------------------------------------*/

#ifndef __h_ADFSshape
#define __h_ADFSshape

/*-------------------------------------------------------------------------*/
/* ADFS drive numbering:
 *  Floppies are drives 0..3
 *  Winchesters are drive 4..7
 */

#define floppy(d)       (((d) <= 3) ? (((d) >= 0) ? TRUE : FALSE) : FALSE)
#define wini(d)         (!floppy(d))    /* winchester is NOT floppy */

/*-------------------------------------------------------------------------*/
/* ADFS winchester shape information */

#define ADFSboot (0x0C00) /* ADFS boot block address */
#define dtsize   (0x01B0) /* ADFS defect table size */

#define maxdefects (dtsize / sizeof(int))
#define end_defect (1 << 29) /* end of ADFS defect list marker */

/*-------------------------------------------------------------------------*/
/* floppy access formats */
#define Lformat (1)     /* 1 head (surface orientated) */
#define Dformat (2)     /* 2 heads (track (cylinder) orientated) */

/*-------------------------------------------------------------------------*/
/* standard ADFS disc information record (both floppy and winchester) */
typedef struct {
                byte dr_log2secsize ;
                byte dr_secstrk ;
                byte dr_heads ;
                byte dr_floppy_density ;
                byte dr_idwidth ;
                byte dr_log2alloc ;
                byte dr_trackskew ;
                byte dr_bootopt ;
                byte dr_tracklow ; /* lowest sector number on track (lo6bits only) */
                byte dr_zones ;
                /* shorts are aligned (so use chars and special code) */
                byte dr_nonmapbits ;
                byte dr_nonmapbitsHI ;
                word dr_rootSIN ;
                word dr_discsize ;
                /* shorts are aligned (so use chars and special code) */
                byte dr_discID ;   /* set to a random # when formatted */
                byte dr_discIDHI ;
                byte dr_discname[0x0A] ; /* NOT in boot block */
                byte dr_unused2[0x0002] ;
                byte dr_drive ;
                byte dr_unused3[0x001C] ;
                byte dr_csum ;
               } ADFS_drecord ;

/* standard ADFS winchester boot block */
typedef struct {
                word         bb_defectlist[maxdefects] ; /* DEFECT list */
                word         bb_hwparams[4] ;            /* HW parameters */
                ADFS_drecord bb_discrec ;                /* disc desc. */
               } ADFS_bblock ;

/* data structure when using ADFS low-level SWIs */
typedef struct {
                ADFS_drecord ad_drec ;
                ADFS_bblock  ad_bblock ;
               } ADFSaccess ;

#define bootsize    (sizeof(ADFS_bblock))  /* ADFS boot block size */
#define discrecsize (sizeof(ADFS_drecord)) /* ADFS disc record size */

/*-------------------------------------------------------------------------*/

#define oldmapadd    (0x0000)
#define oldmapsize   (0x0200)
#define dirsize      (0x0800)

#define ADFSderr     (0x0108C7) /* general ADFS disc transfer error  */

#define maxverifybad (16)       /* maximum number of retries attempted */

#define oldLWM       (0x0E00)

#define defrootadd   (0x0400)   /* default ROOT directory address */

#define log2ssize    (8)    /* ADFS winchesters ALWAYS have 256 byte secs */

#define freelink   (1)
#define crosscheck (3)

/*-------------------------------------------------------------------------*/
/* disc information accessing macros */

#define log2secsize(drec) ((drec)->dr_log2secsize)
#define bytespersec(drec) (1 << log2secsize(drec))
#define secspertrk(drec)  ((drec)->dr_secstrk)
#define tracklow(drec)    ((drec)->dr_tracklow & 0x3F)
#define sequence(drec)    ((((drec)->dr_tracklow) & 0x40) >> 6)
#define doublestep(drec)  ((drec)->dr_tracklow >> 7)
#define heads(drec)       ((drec)->dr_heads)
#define secspercyl(drec)  (secspertrk(drec) * heads(drec))
#define log2alloc(drec)   ((drec)->dr_log2alloc)
#define nonmapbits(drec)  ((drec)->dr_nonmapbits|((drec)->dr_nonmapbitsHI<<8))
#define discID(drec)      ((drec)->dr_discID | ((drec)->dr_discIDHI << 8))
#define discsize(drec)    ((drec)->dr_discsize)
#define cylsize(drec)     (bytespersec(drec)*secspertrk(drec)*heads(drec))
#define cyls(drec)        (discsize(drec) / cylsize(drec))
#define trackskew(drec)  ((drec)->dr_trackskew)

/* construct the disc record nonmapbits field */
#define put_nonmapbits(drec,v) {                                           \
                                (drec)->dr_nonmapbits=(v & 0xFF) ;         \
                                (drec)->dr_nonmapbitsHI=((v >> 8) & 0xFF) ;\
                               }

/* construct the disc accessing flags */
#define put_tracklow(drec,v)   {                                           \
                                (drec)->dr_tracklow &= ~0x3F ;             \
                                (drec)->dr_tracklow |= ((v) & 0x3F) ;      \
                               }
#define put_sequence(drec,v)   {                                           \
                                (drec)->dr_tracklow &= ~0x40 ;             \
                                (drec)->dr_tracklow |= ((v) << 6) ;        \
                               }
#define put_doublestep(drec,v) {                                           \
                                (drec)->dr_tracklow &= ~0x80 ;             \
                                (drec)->dr_tracklow |= ((v) << 7) ;        \
                               }

/* construct the disc ID field */
#define put_discID(drec,v) {                                               \
                            (drec)->dr_discID = (v & 0xFF) ;               \
                            (drec)->dr_discIDHI = ((v >> 8) & 0xFF) ;      \
                           }

/* translate between byte addresses and cylinder counts */
#define tcyls(a,dr) (a / cylsize(dr))
#define taddr(c,dr) (c * cylsize(dr))

/* extract low current cylinder and pre-compensation cylinder information */
#define get_lowc(bp) (bp->bb_hwparams[2] & 0x0000FFFF)
#define get_prec(bp) (bp->bb_hwparams[2] >> 16)

/* make low current cylinder and pre-compensation cylinder HW information */
#define put_lowpre(bp,l,p) { bp->bb_hwparams[2] = (l | (p << 16)) ; }

/* extract parking cylinder information */
#define get_park(bp) (tcyls(bp->bb_hwparams[3],(&(bp->bb_discrec))))

/* directory magic number */
#define hmagic (('H' <<  0) | ('u' << 8) | ('g' << 16) | ('o' << 24))

/*-------------------------------------------------------------------------*/
/* ADFS physical operations */
typedef enum {
              ADFSverify,               /* verify track */
              ADFSread,                 /* read bytes */
              ADFSwrite,                /* write bytes */
              ADFSrdid,                 /* read floppy track or hard ids */
              ADFSwtrack,               /* write track */
              ADFSseek,                 /* seek track */
              ADFSrestore,              /* restore */
              ADFSstepin,               /* step in (floppy only) */
              ADFSstepout,              /* step out (floppy only) */
              ADFSspecify = 15          /* specify disc shape (hard only) */
             } ADFSops ;

typedef enum {
              ADFSopOK,         /* successful completion */
              ADFSdiscerr,      /* general ADFS disc error */
              ADFSnotalltrans,  /* not all the data has been transferred */
              ADFSsyserr,       /* C system error during operation */
              ADFSnodisc,       /* Drive Empty */
              ADFSwriteprotect, /* Disc write protected */
              ADFSinterrupted   /* ADFS operation interrupted (ESCAPE) */
             } ADFSstates ;

/* Explicit error numbers returned by ADFS */
#define ADFSerr_escape          (0x00010811)
#define ADFSerr_writeprotect    (0x000108C9)
#define ADFSerr_nodisc          (0x000108D3)

/*-------------------------------------------------------------------------*/
 /* ADFS time stamping:
  *
  * load address: = &FFFtttdd
  * exec address: = &dddddddd
  * dddddddddd is the (5byte) centisecond time from 00:00:00 on 1st Jan 1900
  */

#define ADFStimestamp (0xFFF00000)  /* file has a time stamp and file type */
#define ADFStypemask  (0x000FFF00)  /* file type mask */
#define ADFStypeshift (8)

/*-------------------------------------------------------------------------*/
/* Generic IO accessing */

typedef volatile unsigned char *const port ;  /* byte wide IO location */
typedef volatile unsigned int  *const wport ; /* word wide IO location */

/* IOC layout */
#define IOC             ((port)0x03200000)

#define IOC_ctrl        (IOC[0x00])
#define IOC_ser_data    (IOC[0x04])

#define IOC_irqA_stat   (IOC[0x10])
#define IOC_irqA_req    (IOC[0x14])
#define IOC_irqA_clr    (IOC[0x14])
#define IOC_irqA_mask   (IOC[0x18])

#define IOC_irqB_stat   (IOC[0x20])
#define IOC_irqB_req    (IOC[0x24])
#define IOC_irqB_mask   (IOC[0x28])

#define IOC_fiq_stat    (IOC[0x30])
#define IOC_fiq_req     (IOC[0x34])
#define IOC_fiq_mask    (IOC[0x38])

#define IOC_t0_clow     (IOC[0x40])
#define IOC_t0_chigh    (IOC[0x44])
#define IOC_t0_llow     (IOC[0x40])
#define IOC_t0_lhigh    (IOC[0x44])
#define IOC_t0_go       (IOC[0x48])
#define IOC_t0_latch    (IOC[0x4C])

#define IOC_t1_clow     (IOC[0x50])
#define IOC_t1_chigh    (IOC[0x54])
#define IOC_t1_llow     (IOC[0x50])
#define IOC_t1_lhigh    (IOC[0x54])
#define IOC_t1_go       (IOC[0x58])
#define IOC_t1_latch    (IOC[0x5C])

#define IOC_t2_clow     (IOC[0x60])
#define IOC_t2_chigh    (IOC[0x64])
#define IOC_t2_llow     (IOC[0x60])
#define IOC_t2_lhigh    (IOC[0x64])
#define IOC_t2_go       (IOC[0x68])
#define IOC_t2_latch    (IOC[0x6C])

#define IOC_t3_clow     (IOC[0x70])
#define IOC_t3_chigh    (IOC[0x74])
#define IOC_t3_llow     (IOC[0x70])
#define IOC_t3_lhigh    (IOC[0x74])
#define IOC_t3_go       (IOC[0x78])
#define IOC_t3_latch    (IOC[0x7C])

#define IOC_t_clow(n)   (IOC[0x40+(n<<4)])
#define IOC_t_chigh(n)  (IOC[0x44+(n<<4)])
#define IOC_t_llow(n)   (IOC[0x40+(n<<4)])
#define IOC_t_lhigh(n)  (IOC[0x44+(n<<4)])
#define IOC_t_go(n)     (IOC[0x48+(n<<4)])
#define IOC_t_latch(n)  (IOC[0x4C+(n<<4)])


/* floppy disc controller: */

#ifdef A500
/* A500s have 1793 */
# define FDC_latch       (*(port)0x03360000)
# define FDC_base        ((port)0x03290000)
#else
/* Archimedes have 1772 */
# define FDC_latch       (*(port)0x03350040)
# define FDC_base        ((port)0x03310000)
# define discchanged     (0x10)
#endif /* A500 */

/* floppy latch bits (negated) */
#define FDC_sel_0       0xFE            /* select drive 0 */
#define FDC_sel_1       0xFD            /* select drive 1 */
#define FDC_sel_2       0xFB            /* select drive 2 */
#define FDC_sel_3       0xF7            /* select drive 3 */
#define FDC_selside     0xEF            /* select head */
#define FDC_motoron     0xDF            /* motor on */
#define FDC_inuse       0xBF            /* drive in use */
#define FDC_reset       0x7F            /* disc changed and reset */
#define FDC_unset       0xFF            /* no flags set */
/* eg FDC_latch = (FDC_inuse & FDC_motoron & FDC_reset) ; */

/* 1772 registers */
#define FDC_ctrl        (FDC_base[0x00]) /* WRITE */
#define FDC_stat        (FDC_base[0x00]) /* READ */
#define FDC_track       (FDC_base[0x04])
#define FDC_sector      (FDC_base[0x08])
#define FDC_data        (FDC_base[0x0C])

#ifdef A500
# define IOC_disc_changed()     (IOC_ctrl & 0x04)
#else  /* A500 */
# define IOC_disc_changed()     (IOC_irqB_stat & discchanged)
#endif /* A500 */

/*-------------------------------------------------------------------------*/

#endif /* __h_ADFSshape */

/*-------------------------------------------------------------------------*/
/*> EOF h.ADFSshape <*/
