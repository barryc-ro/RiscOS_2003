/*> h.debug <*/
/*---------------------------------------------------------------------------*/
/* Debugging control and output functions         Copyright (c) 1990 JGSmith */
/*---------------------------------------------------------------------------*/

#ifndef __h_debug
#define __h_debug

/*---------------------------------------------------------------------------*/

#ifndef NO_DIR_CACHE
#define USE_DIR_CACHE 1
#else
#define USE_DIR_CACHE 0
#endif

#ifndef TUBE
#ifdef TRACEFILE
#define TUBE 0
#else
#define TUBE 1
#endif
#endif

#ifndef TRACE
#define   TRACE 0
#endif

#ifndef WRITE
#define WRITE 0
#endif

#ifndef TRACE_MEM
#define   TRACE_MEM 0
#endif

#ifndef TRACE_SWIS
#define   TRACE_SWIS 0
#endif

#if     TRACE || WRITE || TRACE_MEM || TRACE_SWIS
extern    writef(char *,...);
#define   WRITEF 1
#else
#define   WRITEF 0
#endif

#if     TRACE
/* Since we wish to use MACROs (so that debugging can be removed quickly)
 * we must have a fixed number of parameters. This means the MACRO must
 * be tied directly to the number of parameters we wish to display.
 */
#define   tracef0(s) writef(s) ;
#define   tracef1(s,a) writef(s,a) ;
#define   tracef2(s,a,b) writef(s,a,b) ;
#define   tracef3(s,a,b,c) writef(s,a,b,c) ;
#define   tracef4(s,a,b,c,d) writef(s,a,b,c,d) ;
#define   tracef5(s,a,b,c,d,e) writef(s,a,b,c,d,e) ;
#define   tracef6(s,a,b,c,d,e,f) writef(s,a,b,c,d,e,f) ;
#define   tracef7(s,a,b,c,d,e,f,g) writef(s,a,b,c,d,e,f,g) ;
#define   tracef8(s,a,b,c,d,e,f,g,h) writef(s,a,b,c,d,e,f,g,h) ;
void      trace_on(void) ;
void      trace_off(void) ;
#else
#define   tracef0(s) ;
#define   tracef1(s,a) ;
#define   tracef2(s,a,b) ;
#define   tracef3(s,a,b,c) ;
#define   tracef4(s,a,b,c,d) ;
#define   tracef5(s,a,b,c,d,e) ;
#define   tracef6(s,a,b,c,d,e,f) ;
#define   tracef7(s,a,b,c,d,e,f,g) ;
#define   tracef8(s,a,b,c,d,e,f,g,h) ;
#define   trace_on(void) ;
#define   trace_off(void) ;
#endif

#if     WRITE
/* Since we wish to use MACROs (so that debugging can be removed quickly)
 * we must have a fixed number of parameters. This means the MACRO must
 * be tied directly to the number of parameters we wish to display.
 */
#define   writef0(s) writef(s) ;
#define   writef1(s,a) writef(s,a) ;
#define   writef2(s,a,b) writef(s,a,b) ;
#define   writef3(s,a,b,c) writef(s,a,b,c) ;
#define   writef4(s,a,b,c,d) writef(s,a,b,c,d) ;
#define   writef5(s,a,b,c,d,e) writef(s,a,b,c,d,e) ;
#define   writef6(s,a,b,c,d,e,f) writef(s,a,b,c,d,e,f) ;
#define   writef7(s,a,b,c,d,e,f,g) writef(s,a,b,c,d,e,f,g) ;
#define   writef8(s,a,b,c,d,e,f,g,h) tracef(s,a,b,c,d,e,f,g,h) ;
#else
#define   writef0(s) ;
#define   writef1(s,a) ;
#define   writef2(s,a,b) ;
#define   writef3(s,a,b,c) ;
#define   writef4(s,a,b,c,d) ;
#define   writef5(s,a,b,c,d,e) ;
#define   writef6(s,a,b,c,d,e,f) ;
#define   writef7(s,a,b,c,d,e,f,g) ;
#define   writef8(s,a,b,c,d,e,f,g,h) ;
#endif

#if           TRACE_MEM
extern void     *_my_malloc(char *file, int line, int size);
extern void     _my_free(void *addr);
extern void     show_mem_trace(void);
#define         malloc(size)           _my_malloc(__FILE__, __LINE__, (size))
#define         free(addr)             _my_free(addr)
#else
#define         show_mem_trace()
#endif

#if     TRACE_SWIS
extern    _kernel_oserror *_my_kernel_swi(char *file, int line, int swi, _kernel_swi_regs *rin, _kernel_swi_regs *rout);
#define   _kernel_swi(swi, rin, rout) _my_kernel_swi(__FILE__, __LINE__, (swi), (rin), (rout))
#endif
/*---------------------------------------------------------------------------*/

#endif /* __h_debug */

/*---------------------------------------------------------------------------*/
/*> EOF h.debug <*/
