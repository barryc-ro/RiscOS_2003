PERIPHERAL_BASE * &80000000
PERIPHERAL_SIZE * &00600000
APB_BASE        * &90000000
APB_SIZE        * &00008000

TIMER_BASE      * &90003000

INT_BASE        * &90001000
IRQLStatus      * &080  ; also &000
IRQHStatus      * &084
IRQLRawStatus   * &090  ; also &004
IRQHRawStatus   * &094
IRQLEnable      * &0A0  ; also &008
IRQHEnable      * &0A4
IRQLEnableSet   * &0A0  ; also &008
IRQHEnableSet   * &0A4
IRQLEnableClear * &0B0  ; also &00C
IRQHEnableClear * &0B4

TIMER1LOAD      * &000 ; R/W
TIMER1VALUE     * &004 ; R
TIMER1CONTROL   * &008 ; R/W
TIMER1CLEAR     * &00C ;   W
TIMER2LOAD      * &020 ; R/W
TIMER2VALUE     * &024 ; R
TIMER2CONTROL   * &028 ; R/W
TIMER2CLEAR     * &02C ;   W

DC_BASE         * &90006000
PMPCON          * &000

MLCD_BASE       * &80048000

MLCDCON         * &000
MPALLSW         * &004
MPALMSW         * &008
MLCDBASE        * &00C
MLCDCAR         * &010
MLCDID          * &014
MLCDTIMING0     * &018
MLCDTIMING1     * &01C

CLCD_BASE       * &80049000

SIB_BASE        * &80040000
MCCR            * &000
MCDR0           * &008
MCDR1           * &00C
MCDR2           * &010
MCSR            * &018

KEYBOARD_BASE   * &90004000
KBDR            * &000
KBDMR           * &004
KBSBSR          * &008
KBKSR           * &010

GPIO_BASE       * &90005000
PADR            * &000
PADDR           * &004
PASBSR          * &008
PAEENR          * &00C
PAESNR          * &010
PAECLR          * &014
PAIMR           * &018
PAINT           * &01C
PEDR            * &080
PEDDR           * &084
PESBSR          * &088
PEEENR          * &08C
PEESNR          * &090
PEECLR          * &094
PEIMR           * &098
PEINT           * &09C

SMIREG_BASE     * &90007000
IOCFG1          * &000
IOCFG2          * &004
IOCFG3          * &008
IOCFG4          * &00C
IOCFG5          * &010
IOSR            * &014

UART1_BASE      * &80044000
UART2_BASE      * &80045000

UARTDR          * &000      ; UART data register
RXSTAT          * &004      ; Receive status register
H_UBRLCR        * &008      ; High byte of UART bit rate and line control reg
M_UBRLCR        * &00C      ; Mid byte of UART bit rate and line control reg
L_UBRLCR        * &010      ; Low byte of UART bit rate and line control reg
UARTCON         * &014      ; UART control register
UARTFLG         * &018      ; UART flag register
UARTINTSTAT     * &01C      ; UART interrupt status register
UARTINTCLR      * &01C      ; UART interrupt clear register
UARTINTMASK     * &020      ; UART interrupt mask register

; RXSTAT
FRAME           * 2_00000001
PARITY          * 2_00000010
OVERRUN         * 2_00000100

; H_UBRLCR
BREAK           * 2_00000001
PRTEN           * 2_00000010
EVENPRT         * 2_00000100
XSTOP           * 2_00001000
FIFOEN          * 2_00010000
WORDLEN0        * 2_00100000
WORDLEN1        * 2_01000000

; UARTCON
UARTEN          * 2_00000001    ; Enable/disable all UART operations
UTXDIS          * 2_00000010    ; Disable transmit
URXDIS          * 2_00000100    ; Disable receive
DMAONERR        * 2_00001000    ; Mask rxDmaRq when RXERRINT asserted
UTXFDIS         * 2_00010000    ; Disable transmit FIFO
URXFDIS         * 2_00100000    ; Disable receive FIFO
UHBRE0          * 2_01000000    ; 0= /16 clock 1= /4 clock
UHBRE1          * 2_10000000    ; 2= 921.5kbps 3= reserved

; UARTFLG
nCTS            * 2_00000001
nDDR            * 2_00000010
nDCD            * 2_00000100
UBUSY           * 2_00001000
URXFE           * 2_00010000
UTXFF           * 2_00100000

; UARTINTSTAT/UARTINTMASK
TXINT           * 2_00000001    ; Transmit interrupt
RXINT           * 2_00000010    ; Receive Interrupt
RXERRINT        * 2_00000100    ; Receive error in DMAONERR-mode interrupt
MSINT           * 2_00001000    ; Modem status interrupt
UDINT           * 2_00010000    ; UART disabled interrupt (start bit detected)
UTXEINT         * 2_00100000    ; UART transmit FIFO interrupt
URXTINT         * 2_01000000    ; UART receive FIFO time-out interrupt

UART_Crystal16  * (3686400 << 4)

DMACTRL_BASE    * &80047000
DMA_EN          * &000  ; Enable
DMA_TERM        * &004  ; Terminate
DMA_BZ          * &008  ; Busy
DMA_UR          * &00C  ; Underrun
DMA_ISR         * &010  ; Interrupt Status
DMA_ICR         * &014  ; Interrupt Clear
DMA_IER         * &018  ; Interrupt Enable
DMA_SBR         * &01C  ; Synchronizers Bypass
DMA_RCM1        * &020  ; Request to Channel Mapping 1
DMA_RCM2        * &024  ; Request to Channel Mapping 2
DMA_C0NBA       * &100  ; Next Buffer Address
DMA_C0NTC       * &104  ; Next Transfer Count
DMA_C0SBA       * &108  ; Scratch-pad Base Address
DMA_C0STC       * &10C  ; Scratch-pad Transfer Count
DMA_C0CBA       * &110  ; Current Buffer Address
DMA_C0CTC       * &114  ; Current Transfer Count
DMA_C0PA        * &118  ; Peripheral Address
DMA_C0CTL       * &11C  ; Control
DMA_C1NBA       * &120
DMA_C1NTC       * &124
DMA_C1SBA       * &128
DMA_C1STC       * &12C
DMA_C1CBA       * &130
DMA_C1CTC       * &134
DMA_C1PA        * &138
DMA_C1CTL       * &13C
DMA_C2NBA       * &140
DMA_C2NTC       * &144
DMA_C2SBA       * &148
DMA_C2STC       * &14C
DMA_C2CBA       * &150
DMA_C2CTC       * &154
DMA_C2PA        * &158
DMA_C2CTL       * &15C
DMA_C3NBA       * &160
DMA_C3NTC       * &164
DMA_C3SBA       * &168
DMA_C3STC       * &16C
DMA_C3CBA       * &170
DMA_C3CTC       * &174
DMA_C3PA        * &178
DMA_C3CTL       * &17C
DMA_C4NBA       * &180
DMA_C4NTC       * &184
DMA_C4SBA       * &188
DMA_C4STC       * &18C
DMA_C4CBA       * &190
DMA_C4CTC       * &194
DMA_C4PA        * &198
DMA_C4CTL       * &19C
DMA_C5NBA       * &1A0
DMA_C5NTC       * &1A4
DMA_C5SBA       * &1A8
DMA_C5STC       * &1AC
DMA_C5CBA       * &1B0
DMA_C5CTC       * &1B4
DMA_C5PA        * &1B8
DMA_C5CTL       * &1BC
DMA_C6NBA       * &1C0
DMA_C6NTC       * &1C4
DMA_C6SBA       * &1C8
DMA_C6STC       * &1CC
DMA_C6CBA       * &1D0
DMA_C6CTC       * &1D4
DMA_C6PA        * &1D8
DMA_C6CTL       * &1DC
DMA_C7NBA       * &1E0
DMA_C7NTC       * &1E4
DMA_C7SBA       * &1E8
DMA_C7STC       * &1EC
DMA_C7CBA       * &1F0
DMA_C7CTC       * &1F4
DMA_C7PA        * &1F8
DMA_C7CTL       * &1FC


SYSTEM_BASE     * &80050000

SYS_CONFIG_CURRENT * &000
SYS_CONFIG_NEXT  * &004
SYS_CONFIG_RUN   * &00C
SYS_CONFIG_COMM  * &010
SYS_CONFIG_SDRAM * &014
PICEN   * &10
SYS_CLOCK_ENABLE * &030
SYS_CLOCK_ESYNC  * &034
SYS_CLOCK_SELECT * &038
SYS_STATUS       * &040
SYS_STAT_CLR     * &044
SYS_RESET_REMAP  * &048

SYN_EN          * 1
B18M_EN         * 2
C3M6_EN         * 4
BUART_EN        * 8
C18MU_EN        * 16
FIR_EN          * 32
MIRM_EN         * 64
UARTM_EN        * 128
SIBADC_EN       * 256
ALTD_EN         * 512
CLCLK_EN        * 1024

SDRAMREG_BASE   * &D0000000
SDRAMCFG        * &000
SDRAMRFSH       * &004
SDRAMWBFT       * &008

SDRAMMODE_BASE  * &E0000000

L1121_BASE      * &14000000
DACCR           * &040
DACDR           * &044

AUX_REG_BASE    * &1A000000
AUX_DIAG        * 2
AUX_RTS         * 4
AUX_DTR         * 8
AUX_COL12       * 16
AUX_COL12_DIS   * 32
AUX_COL13       * 64
AUX_COL13_DIS   * 128

MLCD_Width   * 320
MLCD_Height  * 240
MLCD_Refresh * 75
MLCD_Contrast * &70

VFP          * 240-MLCD_Height

SRAM_BASE       * &60000000
SRAM_SIZE       * 5120
SDRAM_BASE      * &F0000000
SDRAM2_BASE     * &F1000000

ScreenBase * SDRAM_BASE

 [ ScreenBase >= SRAM_BASE :LAND: ScreenBase < SRAM_BASE +16384
MLCD_SRAM * 2
 |
MLCD_SRAM * 0
 ]

PLL     * 147
CAS     * 2

 [ PLL = 129
PLLCLKRAW * 129024000
CLCLK     * PLLCLKRAW / 2 ; 64512000
BCLK      * PLLCLKRAW / 4 ; 32256000
SYNCLK18M * PLLCLKRAW / 7 ; 18432000
MIRCLK    * SYNCLK18M     ; 18432000
 |
PLLCLKRAW * 147456000
CLCLK     * PLLCLKRAW / 2 ; 73728000
BCLK      * PLLCLKRAW / 4 ; 36864000
CLK18M    * BCLK / 2      ; 18432000
MIRCLK    * CLK18M        ; 18432000
 ]
SIBCLK    * MIRCLK / 2    ;  9216000


PIXPRE  * (BCLK*4)/(MLCD_Refresh*((MLCD_Width*MLCD_Height)+MLCD_Height/2)) - 1

        MACRO
        BUZ     $on
        LDR     R3, =TIMER_BASE
        LDR     R0, [R3, #TIMER1CONTROL]
       [ "$on" = "toggle"
        EOR     R0, R0, #&100
       |
        [ "$on" = "on"
        BIC     R0, R0, #&100
        |
        ORR     R0, R0, #&100
        ]
       ]
        STR     R0, [R3, #TIMER1CONTROL]
        MEND

        MACRO
        DIAG    $on
        MOV     R3, #&1A000000
        [ "$on" = "on"
        MOV     R0, #0
        |
        MOV     R0, #2
        ]
        STRB    R0, [R3]
        MEND


        END
