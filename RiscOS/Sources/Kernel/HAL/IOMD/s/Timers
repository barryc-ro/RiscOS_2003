        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_TimerReadCountdown

        EXPORT  HAL_CounterRate
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_CounterDelay

HAL_Timers
        MOV     a1, #2                  ; 2 timers
        MOV     pc, lr

HAL_TimerDevice
        ADD     a1, a1, #5              ; devices 5 and 6
        MOV     pc, lr

HAL_CounterRate
HAL_TimerGranularity
        LDR     a1, =2000000            ; 2MHz
        MOV     pc, lr

HAL_TimerMaxPeriod
        MOV     a1, #&10000             ; 16-bit counter
        MOV     pc, lr

HAL_TimerSetPeriod
        LDR     a4, IOMDa
        SUB     a2, a2, #1              ; count down from period-1 (&FFFF if period 0)
        ASSERT  Timer1LL-Timer0LL = 16
        ADD     a4, a4, a1, LSL #4
        STRB    a2, [a4, #Timer0LL]
        MOV     a3, a2, LSR #8
        STRB    a3, [a4, #Timer0LH]
        STRB    a3, [a4, #Timer0GO]

        MOV     a2, a2, LSL #16         ; a2 = actual period programmed (1-&10000)
        MOV     a2, a2, LSR #16
        ADD     a2, a2, #1

        ADR     a4, TimerPeriods
        STR     a2, [a4, a1, LSL #2]

        MOV     pc, lr

HAL_TimerPeriod
        ADR     a4, TimerPeriods
        LDR     a1, [a4, a1, LSL #2]
        MOV     pc, lr

HAL_CounterRead
        MOV     a1, #0
        ; Fall through

HAL_TimerReadCountdown
        LDR     a4, IOMDa

        MRS     ip, CPSR                ; interrupts off for latching
        ORR     a2, ip, #I32_bit

        ASSERT  Timer1LL-Timer0LL = 16
        ADD     a4, a4, a1, LSL #4

        MSR     CPSR_c, a2
        STRB    a4, [a4, #Timer0LR]
        LDRB    a1, [a4, #Timer0CL]
        LDRB    a2, [a4, #Timer0CH]
        MSR     CPSR_c, ip

        ORR     a1, a1, a2, LSL #8
        MOV     pc, lr

HAL_CounterPeriod
        LDR     a1, TimerPeriods + 0
        MOV     pc, lr

; If they want n ticks, wait until we've seen n+1 transitions of the clock.
HAL_CounterDelay
        LDR     a4, IOMDa

        MOV     a1, a1, LSL #1          ; convert to 0.5us ticks

        STRB    a1, [a4, #Timer0LR]     ; read counter
        LDRB    a2, [a4, #Timer0CL]

10      STRB    a1, [a4, #Timer0LR]
        LDRB    a3, [a4, #Timer0CL]     ; read counter
        SUBS    ip, a2, a3              ; ip = difference in 0.5us ticks
        ADDLO   ip, a2, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        MOVLO   pc, lr
        STRB    a1, [a4, #Timer0LR]
        LDRB    a2, [a4, #Timer0CL]     ; read counter
        SUBS    ip, a3, a2              ; ip = difference in 0.5us ticks
        ADDLO   ip, a3, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        BHS     %BT10
        MOV     pc, lr

        END
