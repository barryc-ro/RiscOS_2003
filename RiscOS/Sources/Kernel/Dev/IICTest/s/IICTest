; > s.IICTest

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

                    GBLL  med_00001_debug
med_00001_debug     SETL  {FALSE}

AssemblingArthur SETL  {TRUE}

                GBLL    Module
Module          SETL    {FALSE}

                GBLL   ChecksumCMOS
ChecksumCMOS    SETL  {TRUE}

                GBLL    CacheCMOSRAM                            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600" :LAND: {TRUE}      ; (Space only allocated on ARM600 versions)

        GBLL    ProtectStationID        ; if TRUE, disallow OSBYTE &A2,0,n
ProtectStationID SETL {TRUE}

                GBLL    TestHarness
TestHarness     SETL    {TRUE}

        GET     Hdr:ModHand
        GET     Hdr:Proc
        GET     Hdr:CMOS
        GET     ^.^.hdr.PublicWS
        GET     ^.^.hdr.KernelWS

        ! 0, "NVRAMSize at ":CC::STR:(NVRamSize)

        LEADR   Module_LoadAddr

TAB     *       9

; Module workspace allocation

        ^ 0, R12

i2cWorkSpace    #       256
corruption_test #       4
NVSize          #       1
RTCFlag         #       1
NVBase          #       1

IIC_WorkspaceSize * :INDEX: @

; **************** Module code starts here **********************

Module_BaseAddr

        DCD     0
        DCD     IIC_Init    -Module_BaseAddr
        DCD     IIC_Die     -Module_BaseAddr
        DCD     IIC_Service -Module_BaseAddr
        DCD     IIC_Title   -Module_BaseAddr
        DCD     IIC_HelpStr -Module_BaseAddr
        DCD     IIC_HC_Table-Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0 ; Code to manually decode swi name (not needed)

IIC_Title
        DCB     "IICTest",0
IIC_HelpStr
        =       "IICTest"
        =       TAB, TAB
        =       "0.01 (06 Mar 1997)", 0
        ALIGN

; *****************************************************************************

IIC_HC_Table * Module_BaseAddr

IIC_Service * Module_BaseAddr

IIC_Init
        ENTRY

        LDR     r2, [r12]               ; Hard or soft init ?
        TEQ     r2, #0
        BNE     %FT00

; Hard init

        LDR     r3, =IIC_WorkspaceSize
        TEQ     r3, #0
        BEQ     %FT00
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        LDMVSIA sp!, {pc}

        STR     r2, [r12]

00      MOV     r12, r2

        LDR     R0, =&5C5C5C5C
        STR     R0, corruption_test

 [ CacheCMOSRAM
        BL      InitCMOSCache
 ]
        BL      ClaimByteV
        
        EXIT

IIC_Die ENTRY
        TEQ     r12, #0
        LDRNE   r12, [r12]

        BL      ReleaseByteV

        EXITS

; *****************************************************************************

; ByteV handling routines.

ClaimByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Claim
        EXIT

ReleaseByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Release
        EXIT

ByteVHandler
        Push    "r0,r1"
        TEQ     r0, #&A2
        BEQ     OsbyteA2
        TEQ     r0, #&A1
        Pull    "r0,r1",NE
        MOVNES  pc, lr
        ; If &A1 then drop through to...

; *****************************************************************************

; OS_Byte &A1 and &A2 handlers pulled from s.PMF.osbyte. We declare our own
; MyOsbyte macro to exit our handler by claiming the ByteV call.

        MACRO
        MyOsbyte $cond
        Pull    "r0,r1,pc",$cond,^
        MEND

; Read CMOS RAM
OsbyteA1    ; R1 = address , R2 = result
        CLRPSR  I_bit, R0       ; this may take some time
        MOV     R0, R1
        BL      Read            ; Read CMOS ram at address <R0>
        MOV     R2, R0          ; Result in R0, return in R2
        MyOsbyte

; Write CMOS RAM
OsbyteA2 
        CLRPSR  I_bit, R0       ; this may take some time
        [ E2ROMSupport
        MOVS	R0, R1
        |
        ANDS    R0, R1, #&FF    ; only look at bottom byte
        ]
        [ ProtectStationID
        MyOsbyte EQ
        ]

        ; This bit is conditioned out to make life easier...
        ;
        [ {FALSE}
        ; Protect machine address CMOS (if not corrupt)
        ASSERT  EtherCheckCMOS = EtherAddrCMOS+6
        CMP     r0, #EtherAddrCMOS
        BLT     %FT10
        CMP     r0, #EtherCheckCMOS
        BGT     %FT10
        Push    "r0,r1"
        BL      GetMachineAddressCMOS
        Pull    "r0,r1"
        MyOsbyte EQ             ; don't allow write if address is valid
10
        ]
 
        MOV     R1, R2
        BL      Write      
        MOV     R1, R0          ; R1 is supposed to be preserved
        MyOsbyte

; *****************************************************************************

; Include the i2cutils source file from the Kernel sources.

        GET     ^.^.s.PMF.i2cutils

        END
