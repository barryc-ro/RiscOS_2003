; > GetAll

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

; amg 7/12/96 Renaissance
; Forcibly ensure that options only intended for one class of platform
; stay there. Generally this involves combining switches with the STB
; switch. The exception is processor architectural stuff. 7500FE is
; included always, and StrongARM has an independed switch.
;
; When you want to migrate features from one platform to another you'll
; find that every occurence of feature switches has been qualified with
; the appropriate sense of the STB switch. This is to remind you to think
; about what you're about to do! Check whether the code actually will work
; at all on something that is or is not a STB class product.
;
; Using the STB switch this aggressively also help ensure that there's
; no unexpected code crossover in the initial merge.

;whether compiling to run on (Risc PC) emulator
                GBLL    RunningOnEmul
RunningOnEmul   SETL    {FALSE} :LAND: STB


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; we can only build for medusa-ish h/w
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        ASSERT CPU_Type  = "ARM600"
        ASSERT IO_Type   = "IOMD"
        ASSERT VIDC_Type = "VIDC20"
        ASSERT MEMC_Type = "IOMD"
        ASSERT MEMM_Type = "ARM600"

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; essential global variables
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GET   Version
                GBLS  VersionNo
VersionNo       SETS  "$VString ($Date)"

                [ STB
; SystemName moved to Machine.* header files.
                |
                GBLS  SystemName
SystemName      SETS  "RISC OS" ; ", p.k.a. Arthur a.k.a. Richard III"
                ]

                GBLS  MosTitle
MosTitle        SETS  "$SystemName $VersionNo"

                GBLL  AddTubeBashers
AddTubeBashers  SETL  {FALSE}

Tube_Normal     *       1
Tube_Simulator  *       2

                GBLA    TubeType
TubeType        SETA    Tube_Simulator

UserMemStart    * &8000


AssemblingArthur SETL  {TRUE}
      ASSERT AssemblingArthur   ;must be defined TRUE (some conditional code removed)
; defined in hdr.system to allow conditionals in macros

                GBLL    DoingVdu
DoingVdu        SETL    {FALSE}         ; so can get KeyWS!
                GBLL    Module
Module          SETL    {FALSE}

                GBLL    IncludeTestSrc  ; whether test code is included
IncludeTestSrc  SETL    {FALSE}


 [ RunningOnEmul
IncludeTestSrc  SETL    {FALSE} :LAND: :LNOT: STB
 ]

;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    {TRUE} :LAND: :LNOT: STB


                GBLL    DoInitialiseMode
DoInitialiseMode SETL   {TRUE} :LAND: STB


                   GBLL  Select16BitSound 
                   GBLL  Japanese16BitSound
  [ STB
Select16BitSound   SETL  {FALSE}            ; STBs and pre-IOMD systems don't have this link
Japanese16BitSound SETL  {TRUE}
  |
Select16BitSound   SETL  {TRUE}
Japanese16BitSound SETL  {TRUE}
  ]


                GBLL   ChecksumCMOS
ChecksumCMOS    SETL   {TRUE}

                GBLL   SqueezeMods             ; whether squeezed modules are allowed
SqueezeMods     SETL   {TRUE}


;mjs WARNING:
;  Setting this {TRUE} slows the whole OS down significantly (eg. when booting directories),
;  and is suspected to sometimes cause phantom unexpected errors because of flooding the
;  global MessageTrans buffers.
;  The English errors will rarely if ever be seen by the user. If a project really thinks the
;  world will stop spinning on seeing an English error, a scheme where the errors are
;  internationalised _once_ into (say) a SysHeap block should probably be used (this was not
;  considered worthwhile for Ursula).
;
                GBLL    InternationaliseCommonSilentErrors
InternationaliseCommonSilentErrors SETL {FALSE}


                GBLL    AlwaysClearRAM          ; If true, clear RAM on every break/reset
AlwaysClearRAM  SETL    {TRUE}

                GBLL    LCDInvert
LCDInvert       SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE} :LAND: :LNOT: STB

                GBLL    MakeModeSelectorsForModeNumbers
MakeModeSelectorsForModeNumbers SETL   {FALSE}    ; not actually needed after all

                GBLL    IgnoreVRAM              ; if true, don't add VRAM to the RAM list (+ don't use for screen)
IgnoreVRAM      SETL    {FALSE}

                GBLL    ShrinkableDAs           ; if true, support Shrinkable Dynamic Areas (eg. CacheFS)
ShrinkableDAs   SETL    {TRUE}

                GBLL    StrongARM
                GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    SALDMIBbroken           ;whether LDMIB Rn,{Reg list including Rn} cannot be reliably restarted after abort
                                                ;(broken up to revision 3 SA110 at least)
                GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)

                GBLL    RescueVRAM              ;whether to run process that rescues VRAM pages that are not in use for the screen
                                                ;and sorts them into the bottom of the free pool - implements use of VRAM as a last resort
                                                ;(maybe useful on Risc PC, important on Phoebe where VRAM is slower than SDRAM)

                ;mjs
                ;Chocolate flavours implemented for Ursula, but they are generally useful performance enhancements
                ;(not all Ursula performance improvements are flagged with Chocolate - eg. simple changes such as slicker SWI
                ;despatch and wider SWI hashing)
                ;
                ;disabled at run time if not StrongARM
                GBLL    ChocolateScreen         ;whether to implement crazy chocolate flavour screen (section mapped and cacheable) on SA
                GBLL    ChocolateAMB            ;whether to implement crazy chocolate flavour AMBControl (lazy task swapping) on SA
                                                ;if LDMIBbroken is TRUE, ChocolateAMB is not forced FALSE, but the kernel does suspend
                                                ;chocolate task swapping at run time (allows use with fixed SA, or use with apps
                                                ;cleaned of LDMIBs or whatever)
                ;any ARM
                GBLL    ChocolateSysHeap        ;whether to save cost of SysHeap block claim/release for common cases (eg. callback blocks)
                                                ;also reduces SysHeap stress by using fewer blocks in total
                GBLL    ChocolateOSMod          ;whether to reduce SysHeap stress in module handling
                GBLL    ChocolateSysVars        ;whether to do performance improvements in system variable handling
                GBLL    ChocolateOscli          ;whether to do performance improvements in Oscli command stuff


                GBLL    ARM810support           ;StrongARM must also be true for this to be useful
                GBLL    ARM810cleanflushbroken  ;whether single MCR for IDC clean+flush broken (a la StrongARM!)
                GBLL    ARM810fastclock         ;whether to attempt to use fast clock (false means bus clock)
                GBLL    ARM810usePLL            ;whether to use PLL for fast clock (else RefClk pin)
                GBLL    ARM810_POST             ;whether to run POST for ARM810 (StrongARM_POST must also be true)

StrongARM              SETL {TRUE}
SAcleanflushbroken     SETL {TRUE}  :LAND: StrongARM
SASTMhatbroken         SETL {TRUE}  :LAND: StrongARM
SALDMIBbroken          SETL {TRUE}  :LAND: StrongARM
StrongARM_POST         SETL {TRUE}  :LAND: StrongARM

RescueVRAM             SETL {TRUE}

ChocolateScreen        SETL {TRUE}  :LAND: StrongARM
ChocolateAMB           SETL {TRUE}  :LAND: StrongARM
;
ChocolateSysHeap       SETL {TRUE}
ChocolateOSMod         SETL {TRUE}
ChocolateSysVars       SETL {TRUE}
ChocolateOscli         SETL {TRUE}
  [ ChocolateSysHeap
                       GBLA  MaxChocolateCBBlocks  ;max quick CallBack blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateSVBlocks  ;max quick Software Vector blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateTKBlocks  ;max quick Ticker blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateMRBlocks  ;max module ROM blocks before ordinary heap nodes are used (reduces total no. nodes in SysHeap)
                       GBLA  MaxChocolateMABlocks  ;max module Active blocks before ordinary heap nodes are used
                       GBLA  MaxChocolateMSBlocks  ;max module SWI Hash blocks before ordinary heap nodes are used
MaxChocolateCBBlocks   SETA   32
MaxChocolateSVBlocks   SETA  128
MaxChocolateTKBlocks   SETA   32
MaxChocolateMRBlocks   SETA  150 
MaxChocolateMABlocks   SETA  150
MaxChocolateMSBlocks   SETA  150
  ]

ARM810support          SETL {FALSE} :LAND: StrongARM
ARM810cleanflushbroken SETL {TRUE}  :LAND: ARM810support
ARM810fastclock        SETL {FALSE} :LAND: ARM810support
ARM810usePLL           SETL {TRUE}  :LAND: ARM810fastclock
ARM810_POST            SETL {FALSE} :LAND: ARM810support

                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}


                     GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace      SETL    {FALSE}
                     GBLL    mjsSysHeapNodesTrace     ;for statistics gathering on some SysHeap nodes only
mjsSysHeapNodesTrace SETL    {FALSE}

 [ StrongARM
 ! 0," ______________________________________________________"
 ! 0,"|                                                      |"
 ! 0,"| Building a StrongARM capable kernel for this machine |"
 ! 0,"|______________________________________________________|"
 ]

                GBLL    CheckProtectionLink     ; if true, disallow CMOS RAM changes if link in protected position
CheckProtectionLink SETL {TRUE}                 ; NB affects Delete/Copy/R/T and 0-9/.

                GBLL    RMTidyDoesNowt          ; if true, RMTidy does nothing
RMTidyDoesNowt  SETL    {TRUE}                  ; should really be "machine has FSLock in ROM"

                GBLL    DebugROMInit
DebugROMInit    SETL    {FALSE}

                GBLL    DebugROMErrors
DebugROMErrors  SETL    {FALSE}

                GBLL    DebugHeaps              ; initialise claimed and freed blocks
DebugHeaps      SETL    {FALSE}                 ; (may slow things down unacceptably)

; ChangeDynamicArea and related options

        GBLL    DebugCDA
DebugCDA SETL {FALSE}

        GBLL    DebugCDA2
DebugCDA2 SETL {FALSE}


                GBLL    StorkPowerSave  ;True => power saving for Stork AND A4
StorkPowerSave  SETL    MorrisSupport   ;False=> older A4 code only

                GBLL    LCDSupport      ;Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE} :LAND: :LNOT: STB
                                        ;(First intro'd for Stork)

                GBLL    FixR9CorruptionInExtensionSWI   ; whether R9 corruption by ExtensionSWI handler is fixed
FixR9CorruptionInExtensionSWI   SETL    {FALSE}         ; currently FALSE as CC's !SpellMod (possibly others) rely on it being broken

                GBLL    InterlacedPointer
InterlacedPointer SETL {TRUE} :LAND: STB                ; enable code to do proper interlaced pointer

                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS    SETL    {TRUE} :LAND: STB

                GBLL    UseHClk
UseHClk         SETL    {TRUE} :LAND: STB       ; Use HClk when driving TVs.

              [ DebugHeaps
                ! 0, "*** WARNING *** Heap debugging assembled in"
              ]

                GBLS    GetMessages
GetMessages     SETS    "GET s.MsgCode"

                GBLL    DebugForcedReset        ; debug forced hard resets
DebugForcedReset SETL   {FALSE}

                GBLA    ConfiguredLang
ConfiguredLang  SETA    10                      ; default configured language

                GBLA    FirstUnpluggableModule
FirstUnpluggableModule SETA 8                   ; Podule, FileSwitch, ResourceFS, Messages, MessageTrans,
                                                ; TerritoryManager, UKTerritory

 [ DebugForcedReset
Reset_CannotResetFlag           * 1
Reset_SysHeapCorrupt            * 2
Reset_WrongCamMapAddress        * 3
Reset_WrongNumberOfPages        * 4
Reset_CamMapCorrupt             * 5
Reset_VectorChainCorrupt        * 6
Reset_TickNodesCorrupt          * 7
Reset_DeviceVectorCorrupt       * 8
Reset_PoduleOrCallBackCorrupt   * 9
 ]

; Flags for RISC OS Blue changes
;
                        GBLL    AssembleA1KeyHandler
AssembleA1KeyHandler    SETL    {FALSE}
                        GBLL    AssembleKEYV
AssembleKEYV            SETL    {TRUE}          ; Use KEYV.
                        GBLL    AssemblePointerV
AssemblePointerV        SETL    {TRUE}          ; Use PointerV.
                        GBLL    PollMouse
PollMouse               SETL    {FALSE}         ; Poll mouse.

                    GBLS  GetUnsqueeze
 [ SqueezeMods
GetUnsqueeze        SETS  "GET s.Unsqueeze"
 |
GetUnsqueeze        SETS  ""
 ]
                    GBLS  GetPublicWS
                    GBLS  GetWorkspace
                    GBLS  GetKernelMEMC
                    GBLS  GetPalette
                    GBLS  GetMemInfo

GetPublicWS         SETS  "GET Hdr:PublicWS"
GetWorkspace        SETS  "GET Hdr:KernelWS"
GetKernelMEMC       SETS  "GET s.ARM600"
GetMemInfo          SETS  "GET s.MemInfo"

 [ VIDC_Type = "VIDC20"
GetPalette          SETS  "GET s.Vdu.VduPal20"
 |
 ]


                    GBLS    GetRS423
GetRS423            SETS  ""

                    GBLS  GetKbdDrA1
 [ Keyboard_Type = "A1A500"
GetKbdDrA1          SETS  "GET s.PMF.KbdDrA1"
 |
GetKbdDrA1          SETS  ""
 ]

                    GBLS  GetKbdRes
 [ Keyboard_Type = "PC"
GetKbdRes           SETS  "GET s.KbdResPC"
 |
GetKbdRes           SETS  "GET s.KbdResA1"
 ]

                    GBLS  GetKey2
 [ AssembleA1KeyHandler
GetKey2             SETS  "GET s.PMF.Key2"
 |
GetKey2             SETS  ""
 ]

;flood fill routine params
smallest_rma_size   * (48*1024)                  ; define the low threshold for rma use
largest_rma_size    * (128*1024)                 ; and the ceiling for rma use


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now get the headers
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GET     Hdr:CMOS
        GET     Hdr:Heap
        $GetPublicWS
        $GetWorkspace
        GET     Hdr:Services
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:NewErrors
        GET     Hdr:Proc
        GET     Hdr:Sprite
        GET     Hdr:KeyWS
        GET     Hdr:RS423
        GET     Hdr:ModHand
        GET     Hdr:Variables
        GET     Hdr:EnvNumbers
        GET     Hdr:UpCall
        GET     Hdr:Sound
        GET     Hdr:Pointer
        GET     Hdr:Podule
        GET     Hdr:VduExt
;        GET     Hdr:Fox
        GET     Hdr:Buffer
        GET     Hdr:Font
        GET     Hdr:DevNos
;        GET     Hdr:IOEB
        GET     Hdr:Territory
        GET     Hdr:Portable
        GET     Hdr:MsgTrans
        GET     Hdr:PaletteV
        GET     Hdr:Wimp
        GET     Hdr:ColourTran
        GET     Hdr:Debug
        GET     s.PMF.DEF          ; Common with 6502 code in the keyboard
        Protocol

; now the main parts of the MOS

        GET     s.Copro15ops ; some macros

        GET     s.Kernel
        GET     s.NewIRQs
        GET     s.Oscli
        GET     s.SysComms
        GET     s.HeapMan
        GET     s.ModHand
        $GetUnsqueeze
        GET     s.ArthurSWIs
        GET     s.ChangeDyn
        GET     s.Arthur2
        GET     s.Utility
        GET     s.MoreComms
        GET     s.Convrsions
        GET     s.MoreSWIs
        GET     s.ExtraSWIs
        GET     s.HeapSort
        GET     s.Arthur3
        GET     s.SWINaming
        GET     s.TickEvents
        $GetKbdRes
        GET     s.NewReset
        $GetMessages
        GET     s.Middle
        GET     s.Super1
        $GetKernelMEMC
        $GetMemInfo
        ! 0, "Main kernel size = &" :CC: :STR: (.-ROM)
StartOfVduDriver
        GET     s.vdu.VduDriver
        GET     s.vdu.VduSWIs
        GET     s.vdu.VduPalette
        $GetPalette
        GET     s.vdu.VduPlot
        GET     s.vdu.VduGrafA
        GET     s.vdu.VduGrafB
        GET     s.vdu.VduGrafC
        GET     s.vdu.VduGrafD
        GET     s.vdu.VduGrafE
        GET     s.vdu.VduGrafF
        GET     s.vdu.VduGrafG
        GET     s.vdu.VduGrafH
        GET     s.vdu.VduGrafI
        GET     s.vdu.VduGrafJ
        GET     s.vdu.VduGrafK
        GET     s.vdu.VduGrafL
        GET     s.vdu.VduWrch
        GET     s.vdu.Vdu23
        GET     s.vdu.VduPointer
        GET     s.vdu.Vdu5
        GET     s.vdu.VduCurSoft
        GET     s.vdu.VduTTX

        GBLS    GiveMeBfontAnyDay
        [ BleedinDaveBell
GiveMeBfontAnyDay SETS "GET s.vdu.VduFontL1"
        |
GiveMeBfontAnyDay SETS "GET s.vdu.VduFont"
        ]

        $GiveMeBfontAnyDay

        ! 0, "Vdu drivers size = &" :CC: :STR: (.-StartOfVduDriver)

StartOfPMF
        GET     s.PMF.osinit
        GET     s.PMF.oseven
        GET     s.PMF.osbyte
        GET     s.PMF.osword
        GET     s.PMF.realtime
        GET     s.PMF.convdate
        $GetRS423
        GET     s.PMF.i2cutils
        GET     s.PMF.oswrch
        GET     s.PMF.buffer
        $GetKbdDrA1
        GET     s.PMF.key
        $GetKey2
        GET     s.PMF.mouse
        ALIGN

StartOfAMB_beforealign
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
StartOfAMB
        GET     s.AMBControl.AMB
        DCB     "GROT"                  ;spare words marker
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch

EndOfKernel
        &       0                       ; for patching by BigSplit et al

        ! 0, "PMF section size = &" :CC: :STR: (StartOfAMB_beforealign - StartOfPMF)
        ! 0, "AMB section (4k aligned) starts at ":CC::STR:(StartOfAMB)
        ! 0, "AMB section size (4k aligned) = &" :CC: :STR: (EndOfKernel - StartOfAMB)


        END
