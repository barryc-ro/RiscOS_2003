; > $.Source.VduPointer

; *****************************************************************************
;
;       DoPointerStuff - Entry point for OSWORD nn
;
; in:   R1 -> control block
;       [R1, #0] : Reason code
;
;       Reason code 0 - Define pointer size, shape and active point
;
;       [R1, #1] : Shape number (1..4)
;       [R1, #2] : Width (w) in bytes (0..8)
;       [R1, #3] : Height (h) in pixels (0..32)
;       [R1, #4] : ActiveX in pixels from left (0..w*4-1)
;       [R1, #5] : ActiveY in pixels from top (0..h-1)
;       [R1, #6..9] : Pointer (P) to data
;       [P, #0..w*h-1] : Data bytes in rows from top to bottom,
;       left to right in each row.
;
;       Reason code 1 - Define mouse coordinate bounding box
;
;       [R1, #1..2] : left      ; all treated as
;       [R1, #3..4] : bottom    ; signed 16-bit values,
;       [R1, #5..6] : right     ; relative to screen origin at the time
;       [R1, #7..8] : top       ; the command is issued
;
;       If (left > right) or (bottom > top) then the command is ignored
;       An infinite box can be obtained by setting
;       left=&8000, right=&7FFF, bottom=&8000, top=&7FFF
;
;       If the current mouse position is outside the box, it is moved to
;       the nearest point inside the box
;
;       The mouse buffer is NOT flushed - any buffered coords will be moved
;       inside the bounding box when they are read.
;
;       Reason code 2 - Define mouse multipliers
;
;       [R1, #1] : X multiplier         ; both treated as
;       [R1, #2] : Y multiplier         ; signed 8-bit values
;
;       Reason code 3 - Set mouse position
;
;       [R1, #1..2] : X position        ; both treated as
;       [R1, #3..4] : Y position        ; signed 16-bit values
;       The mouse buffer is flushed
;
;       Reason code 4 - Read mouse position (not buffered)
;
;       out: [R1, #1..2] : X position   ; both treated as
;            [R1, #3..4] : Y position   ; signed 16-bit values
;
;       Reason code 5 - Set pointer position
;
;       [R1, #1..2] : X position        ; both treated as
;       [R1, #3..4] : Y position        ; signed 16-bit values
;
;       Reason code 6 - Read pointer position
;
;       out: [R1, #1..2] : X position   ; both treated as
;            [R1, #3..4] : Y position   ; signed 16-bit values
;

DoPointerStuff ROUT
        LDRB    R0, [R1, #0]

; *****Change made by DJS & SKS
; Original code was:
;        CMP     R0, #1
;        BCC     DoDefinePointer
;        BEQ     DoMouseBox
;        CMP     R0, #3
;        BCC     SetMouseMult
;        BEQ     SetMousePosn
;        CMP     R0, #5
;        BCC     ReadMousePosn
;        BEQ     SetPointerPosn
;        CMP     R0, #7
;        BCC     ReadPointerPosn
;        MOV     PC, R14

        CMP     R0, #7

        [       Module

        ADDCC   PC, PC, R0, LSL #2
        MOV     PC, R14                 ; ***** WHY NO ERROR????????
        B       DoDefinePointer
        B       DoMouseBox
        B       SetMouseMult
        B       SetMousePosn
        B       ReadMousePosn
        B       SetPointerPosn
        B       ReadPointerPosn

        |

        LDRCC   PC, [PC, R0, LSL #2]
        MOV     PC, R14                 ; ***** WHY NO ERROR????????
        DCD     DoDefinePointer
        DCD     DoMouseBox
        DCD     SetMouseMult
        DCD     SetMousePosn
        DCD     ReadMousePosn
        DCD     SetPointerPosn
        DCD     ReadPointerPosn

        ]

; *****End of change made by DJS & SKS

; *****************************************************************************

 [ LCDSupport
DoDefinePointer ;Only copies the pointer defn into the defn buffer. OSByte 6A now copies the defn into the 'current' buffer -WT
        Push    "R1-R6, R14"

;wait for vsync moved to osbyte &6A
; [ Fix8
;        CLRPSR  I_bit, R0                       ; could take some time
; ]
;        MOV     R0, #19                         ; wait for vsync, so we change
;        SWI     XOS_Byte                        ; cleanly (ignore errors)

        LDMFD   R13, {R1}                       ; get back pointer to block

        LDRB    R6, [R1, #1]                    ; shape number
        SUB     R6, R6, #1
        CMP     R6, #4                          ; now in range 0..3 ?
        BCS     %FT10                           ; bad shape number

        ADD     WsPtr, WsPtr, R6                ; point to table entries

        LDRB    R0, [R1, #2]                    ; R0 = width
        LDRB    R2, [R1, #3]                    ; R2 = height
        LDRB    R3, [R1, #4]                    ; R3 = ActiveX
        LDRB    R4, [R1, #5]                    ; R4 = ActiveY

        CMP     R2, #0                          ; C=1 if EQ
        STREQB  R2, [WsPtr, #PointerHeights]
        BEQ     %FT10

        CMP     R0, #0                          ; C=1 if EQ
        STREQB  R0, [WsPtr, #PointerHeights]
        CMPNE   R0, #8+1
        BCS     %FT10                           ; bad width

        CMP     R2, #32+1                       ; C=1 => bad height
        CMPCC   R3, R0, LSL #2                  ; ActiveX >= (width * 4) ?
        CMPCC   R4, R2                          ; ActiveY >= height

        BCS     %FT10                           ; bad definition

        STRB    R2, [WsPtr, #PointerHeights]
        STRB    R3, [WsPtr, #PointerActiveXs]
        STRB    R4, [WsPtr, #PointerActiveYs]

        ADD     R4, R1, #6
        LDW     R1, R4, R3, R5                  ; load word from
                                                ; unknown alignment
; Now R1 -> user's data

        LDR     R3, =CursorData                 ; &100 per shape, 8 copies (4 current + 4 pointer definitions)
        ADD     R3, R3, #&400                   ; Skip the 'current' copies
        ADD     R3, R3, R6, LSL #8              ; R3 -> place to dump pointer definition
20
        ADD     R4, R3, R0                      ; terminating R3 for this row
30
        LDRB    R5, [R1], #1
40
        STRB    R5, [R3], #1                    ; store to 1st copy
        CMP     R3, R4                          ; still within user data
        BCC     %BT30                           ; for this row ?

; now fill up rest of row

        MOV     R5, #0
        TST     R3, #7                          ; are we on a multiple of 8
        BNE     %BT40                           ; no, then store 0

        SUBS    R2, R2, #1                      ; done all rows ?
        BNE     %BT20                           ; no, then loop

        ;Check whether the pointer we've just updated is the current one & if so, call OSByte 6A to update the current buffers.
        LDRB    R1, [WsPtr, #PointerShapeNumber]
        AND     R5, R1, #&7F                    ; Clear bit 7 from the ptrshapenumber - it is irrelevant atm.
        ADD     R6, R6, #1                      ; Get R6 back to range 1-4
        CMP     R5, R6
        BNE     %FT10                           ; Phewee, we don't have to do the OSByte
        MOV     R0, #106
        SWI     XOS_Byte                        ; Do the Byte Man!

10
        Pull    "R1-R6,PC"
 |                              ;BELOW MUST BE UNINDENTED BY 4CHARS TO WORK AGAIN!!!!!!!
    DoDefinePointer
            Push    "R1-R6, R14"
     [ Fix8
            CLRPSR  I_bit, R0                       ; could take some time
     ]
            MOV     R0, #19                         ; wait for vsync, so we change
            SWI     XOS_Byte                        ; cleanly (ignore errors)

            LDMFD   R13, {R1}                       ; get back pointer to block

            LDRB    R6, [R1, #1]                    ; shape number
            SUB     R6, R6, #1
            CMP     R6, #4                          ; now in range 0..3 ?
            BCS     %FT10                           ; bad shape number

            ADD     WsPtr, WsPtr, R6                ; point to table entries

            LDRB    R0, [R1, #2]                    ; R0 = width
            LDRB    R2, [R1, #3]                    ; R2 = height
            LDRB    R3, [R1, #4]                    ; R3 = ActiveX
            LDRB    R4, [R1, #5]                    ; R4 = ActiveY

            CMP     R2, #0                          ; C=1 if EQ
            STREQB  R2, [WsPtr, #PointerHeights]
            BEQ     %FT10

            CMP     R0, #0                          ; C=1 if EQ
            STREQB  R0, [WsPtr, #PointerHeights]
            CMPNE   R0, #8+1
            BCS     %FT10                           ; bad width

            CMP     R2, #32+1                       ; C=1 => bad height
            CMPCC   R3, R0, LSL #2                  ; ActiveX >= (width * 4) ?
            CMPCC   R4, R2                          ; ActiveY >= height

            BCS     %FT10                           ; bad definition

            STRB    R2, [WsPtr, #PointerHeights]
            STRB    R3, [WsPtr, #PointerActiveXs]
            STRB    R4, [WsPtr, #PointerActiveYs]

            ADD     R4, R1, #6
            LDW     R1, R4, R3, R5                  ; load word from
                                                    ; unknown alignment
    ; Now R1 -> user's data

            LDR     R3, =CursorData                 ; &200 per shape, so
            ADD     R3, R3, R6, LSL #9              ; R3 -> first copy
            ADD     R6, R3, #&F8                    ; R6 -> second copy
    20
            ADD     R4, R3, R0                      ; terminating R3 for this row
    30
            LDRB    R5, [R1], #1
    40
            STRB    R5, [R3], #1                    ; store to 1st copy
            STRB    R5, [R6], #1                    ; store to 2nd copy
            CMP     R3, R4                          ; still within user data
            BCC     %BT30                           ; for this row ?

    ; now fill up rest of row

            MOV     R5, #0
            TST     R3, #7                          ; are we on a multiple of 8
            BNE     %BT40                           ; no, then store 0

            SUBS    R2, R2, #1                      ; done all rows ?
            BNE     %BT20                           ; no, then loop

    10
            Pull    "R1-R6,PC"
 ]

; *****************************************************************************
;
;       SetMouseRectangle - Called on mode change to set appropriate mouse
;                           rectangle and mouse position
;
; in:   WsPtr -> VDWS
;

SetMouseRectangle ROUT
        Push    R14

        ASSERT  DisplayYWindLimit = DisplayXWindLimit +4
        ASSERT  DisplayXEigFactor = DisplayXWindLimit +8
        ASSERT  DisplayYEigFactor = DisplayXWindLimit +12

        ADD     R2, WsPtr, #DisplayXWindLimit
        LDMIA   R2, {R2-R5}

        ADD     R2, R2, #1              ; XWindLimit+1
        MOV     R2, R2, LSL R4          ; (XWindLimit+1) << XEigFactor
        SUB     R4, R2, #1              ; ((XWindLimit+1) << XEigFactor)-1
        MOV     R2, R2, LSR #1          ; centre x of window

        ADD     R3, R3, #1              ; YWindLimit+1
        MOV     R3, R3, LSL R5          ; (YWindLimit+1) << YEigFactor
        SUB     R5, R3, #1              ; ((YWindLimit+1) << YEigFactor)-1
        MOV     R3, R3, LSR #1          ; centre y of window

        BL      SetMousePosnRegs

        MOV     R2, #0                  ; left = 0
        MOV     R3, #0                  ; bottom = 0

        Push    "R1-R6"
        B       DoMouseBoxRegs


DoMouseBox ROUT
        Push    "R1-R6, R14"

        LDRB    R2, [R1, #1]            ; R2 = left
        LDRB    R0, [R1, #2]
        ORR     R2, R2, R0, LSL #8

        LDRB    R3, [R1, #3]            ; R3 = bottom
        LDRB    R0, [R1, #4]
        ORR     R3, R3, R0, LSL #8

        LDRB    R4, [R1, #5]            ; R4 = right
        LDRB    R0, [R1, #6]
        ORR     R4, R4, R0, LSL #8

        LDRB    R5, [R1, #7]            ; R5 = top
        LDRB    R0, [R1, #8]
        ORR     R5, R5, R0, LSL #8

DoMouseBoxRegs

; now add on graphics origin

        LDR     R0, [WsPtr, #OrgX]
        ADD     R2, R2, R0
        ADD     R4, R4, R0
        LDR     R0, [WsPtr, #OrgY]
        ADD     R3, R3, R0
        ADD     R5, R5, R0

; now sign extend all coords

        MOV     R2, R2, LSL #16
        MOV     R2, R2, ASR #16
        MOV     R3, R3, LSL #16
        MOV     R3, R3, ASR #16
        MOV     R4, R4, LSL #16
        MOV     R4, R4, ASR #16
        MOV     R5, R5, LSL #16
        MOV     R5, R5, ASR #16

; now check right >= left and top >= bottom

        CMP     R4, R2
        CMPGE   R5, R3
        BLT     %FT10                   ; bad definition

; everything seems OK, so disable IRQs while we update vars

        MOV     R14, PC
        ORR     R0, R14, #I_bit
        TEQP    R0, #0

        Push    R11
        MOV     R11, #KeyWorkSpace

        ADR     R0, MouseBounds
        STMIA   R0, {R2-R5}

; check mouse position is within box

        LDR     R0, MouseX
        CMP     R0, R2                  ; if X < left
        STRLT   R2, MouseX              ; then X := left
        CMP     R4, R0                  ; if right < X
        STRLT   R4, MouseX              ; then X := right

        LDR     R0, MouseY
        CMP     R0, R3                  ; if Y < bottom
        STRLT   R3, MouseY              ; then Y := bottom
        CMP     R5, R0                  ; if top < Y
        STRLT   R5, MouseY              ; then Y := top

        Pull    R11

;        BL      FlushMouse              ; flush mouse buffer no longer done

; *****Change made by DJS and SKS
; Bug fix. Original code was:
;        TEQP    R14, #0                 ; restore old IRQ state
;10
;        Pull    "R1-R6, PC"
; This is making use of a nonsense value of R14. It also looks as if this
; can be made shorter:

10
        Pull    "R1-R6, PC",,^          ;Return, restoring old IRQ state

; *****************************************************************************
;
;       UpdatePointer - Called on vsync to update pointer position
;
; in:   WsPtr (R12) -> VduDriverWorkSpace
;

 [ LCDSupport                   ;Assumes/Includes VIDC20 support & IOMD
UpdatePointer ROUT
        MOV     R11, #KeyWorkSpace
        MOV     R10, #VIDC

        LDRB    R5, [WsPtr, #PointerShapeNumber]
        TST     R5, #&80                ; pointer unlinked if bit 7 set

        LDREQ   R6, MouseX
        STREQ   R6, [WsPtr, #PointerX]
        LDREQ   R6, MouseY
        STREQ   R6, [WsPtr, #PointerY]

        ANDS    R5, R5, #&7F            ; clear bit 7 and set Z if 0 ie off
        SUBNE   R5, R5, #1
        ADDNE   R6, WsPtr, R5           ; R6 is WsPtr + index

        LDRNEB  R0, [R6, #PointerHeights]
        TEQNE   R0, #0                  ; if shape 0 or height 0
        BNE     %FT07
05

; don't display pointer

        MOV     R1, #0                  ; Y := 0
        MOV     R2, #0                  ; height := 0
        MOV     R4, #0                  ; LAG offset := 0
        B       %FT10

07
        LDR     R2, [WsPtr, #PointerXEigFactor]
        LDR     R3, [WsPtr, #PointerX]
        MOV     R3, R3, ASR R2

        LDRB    R2, [R6, #PointerActiveXs]
        SUB     R3, R3, R2              ; subtract off active point coord

        CMP     R3, #-31                ; if LHS < -31, ie RHS < 0
        BLT     %BT05                   ; then remove pointer completely (fixes MED-00523)

        LDR     R1, [WsPtr, #CursorFudgeFactor]
        ADDS    R3, R3, R1              ; X := X + CursFudgeFactor
        MOVLT   R3, #0                  ; if < 0 then make =0

        CMP     R3, #16*1024            ; if >= limit then make =limit-1
        MOVGE   R3, #16*1024
        SUBGE   R3, R3, #1

        ORR     R3, R3, #HorizCursorStart

 [ {FALSE} ; debug horiz pointer programming
        Push    "r0,lr"
        MOV     r0, r3
        BL      TubeDumpR0
        BL      TubeNewl
        Pull    "r0,lr"
 ]

        STR     R3, [R10]

; now process Y

        LDR     R1, [WsPtr, #PointerY]
        LDR     R2, [WsPtr, #DisplayYEigFactor]

        LDR     R3, [WsPtr, #DisplayYWindLimit]
                                        ; Total height of screen in pixels-1
        SUB     R1, R3, R1, ASR R2      ; convert Y to pixels and invert

        LDRB    R2, [R6, #PointerActiveYs]
        SUB     R1, R1, R2

        MOV     R2, #0                  ; height
        MOV     R4, #0                  ; LAG offset from CursorData

        ADD     R5, R3, #1              ; Total vertical pixels

        ADDS    R3, R1, R0              ; R3 = Y + PointerHeight(shape)
        MOVLE   R1, #0                  ; if <= 0 then off, ie Y=0, height=0
        BLE     %FT10

        CMP     R1, R5                  ; Y >= TotalHeight
        MOVGE   R1, #0                  ; then off
        BGE     %FT10

        CMP     R3, R5                  ; Y + PointerHeight > TotalHeight
        RSBGT   R2, R1, R5              ; then height=TotalHeight-Y
        BGT     %FT10

        CMP     R1, #0                  ; Y >=0
        MOVGE   R2, R0                  ; then height=PointerHeight
        BGE     %FT10

        TST     R1, #1                  ; Y odd ?
        ADDNE   R4, R4, #&200           ; then use 2nd pair of copies (ie the ones that start at line 1)

        ADD     R2, R1, R0              ; height = PointerHeight+Y

        RSB     R1, R1, #0              ; Y := -Y
        BIC     R1, R1, #1              ; Y := (-Y AND NOT 1)
        ADD     R4, R4, R1, LSL #3      ; add on offset into shape
        MOV     R1, #0                  ; Y := 0
10

        ;Rightio, it's time to muck about if we're on a dual-panel LCD...
        Push    "r5,r14"
        MOV     r14, #0
        LDRB    r14, [r14, #LCD_Active]
        TST     r14, #&80
        MOVEQ   r14, #CursorSinglePanel ; Not a dual-panel, so no mucking about to do.
        BEQ     %FT12

        ;OTOH, it _is_ a dual panel, so best do some umming and ahhing. Um ah. :-)
        MOV     R5, R5, LSR #1          ; R5 is half the number of displayed rasters
        CMP     R5, R1
        MOVLT   R14, #CursorBottomPanel ; Pointer starts below the split, so it's in the bottom panel
        SUBLT   R1, R1, R5              ; Subtract the 1/2 panel offset
        BLT     %FT12

        ADD     R14, R1, R2             ; Get the 'y' of the bottom of the pointer
        CMP     R5, R14                 ; See if the pointer straddles the panels
        MOVGE   R14, #CursorTopPanel    ; Nope, it's entirely in the top panel
        BGE     %FT12

        TST     R1, #1                  ; Is the cursor on an odd Y?
        ADDNE   R4, R4, #&200           ; If so, then point to the odd-aligned pair of images
        SUB     R14, R1, R5             ; R14(Y) = Y-1/2 panel (ie Y is now < 0)
        RSB     R14, R14, #0            ; Y := -Y
        BIC     R14, R14, #1            ; Y := (-Y AND NOT 1)
        ADD     R4, R4, R14, LSL #3     ; add on offset into shape
        RSB     R2, R14, #32            ; R2 is now the height of the pointer block which belongs in the bottom panel
        SUBNE   R2, R2, #1              ; Knock another off if we're using the odd-aligned images (dunno why...)

        MOV     R14, #CursorStraddle    ; It straddles the paddles, so special programming of VCSR & VCER required later...

12
        Push    "r1, r14"
        MOV     r0, #0
        LDR     r0, [r0, #DRAMPhysAddrA]
        LDR     r1, =DRAMOffset_CursorChunk + (CursorData - CursorChunkAddress)
        ADD     r0, r0, r1

        ADD     r0, r0, r4
        MOV     r1, #MEMCDAG_CInit
        BL      SetDAG
        Pull    "r1, r14"

        CMP     R14, #CursorStraddle
        BEQ     %FT13                   ;It's a cursor straddly thingy, so we've to muck the VCSR & VCER up...

        LDR     R3, [WsPtr, #VertAdjust] ; get display start value
        ADD     R1, R1, R3              ; and add on

        ORR     R3, R1, #VertiCursorStart
        ORR     R14, R3, R14            ; Set the 'special' LCD bits
        STR     R14, [R10]

        ADD     R1, R1, R2              ; add height

        ORR     R3, R1, #VertiCursorEnd
        STR     R3, [R10]

        Pull    "r5,r14"
        MOV     PC, R14

13
        LDR     R3, [WsPtr, #VertAdjust] ; get display start value
        ADD     R1, R1, R3              ; and add on

        ORR     R3, R1, #VertiCursorEnd
        ORR     R5, R3, R14             ; Set the 'straddle' LCD bits
        STR     R5, [R10]

;        LDR     R3, [WsPtr, #VertAdjust] ; get display start value
;        ADD     R2, R2, R3               ; R2 is pointerheight+vertadjust
        ORR     R3, R2, #VertiCursorStart
        ORR     R14, R3, R14            ; Set the 'straddle' LCD bits
        STR     R14, [R10]

        Pull    "r5,r14"
        MOV     PC, R14

 |                              ;BELOW MUST BE UNINDENTED BY 4CHARS TO WORK AGAIN!!!!!!!
    UpdatePointer ROUT
            MOV     R11, #KeyWorkSpace
            MOV     R10, #VIDC

            LDRB    R5, [WsPtr, #PointerShapeNumber]
            TST     R5, #&80                ; pointer unlinked if bit 7 set

            LDREQ   R6, MouseX
            STREQ   R6, [WsPtr, #PointerX]
            LDREQ   R6, MouseY
            STREQ   R6, [WsPtr, #PointerY]

            ANDS    R5, R5, #&7F            ; clear bit 7 and set Z if 0 ie off
            SUBNE   R5, R5, #1
            ADDNE   R6, WsPtr, R5           ; R6 is WsPtr + index

            LDRNEB  R0, [R6, #PointerHeights]
            TEQNE   R0, #0                  ; if shape 0 or height 0
            BNE     %FT07
    05

    ; don't display pointer

            MOV     R1, #0                  ; Y := 0
            MOV     R2, #0                  ; height := 0
            MOV     R4, #0                  ; LAG offset := 0
            B       %FT10

    07
     [ VIDC_Type = "VIDC20"

            LDR     R2, [WsPtr, #PointerXEigFactor]
            LDR     R3, [WsPtr, #PointerX]
            MOV     R3, R3, ASR R2

            LDRB    R2, [R6, #PointerActiveXs]
            SUB     R3, R3, R2              ; subtract off active point coord

            CMP     R3, #-31                ; if LHS < -31, ie RHS < 0
            BLT     %BT05                   ; then remove pointer completely (fixes MED-00523)

            LDR     R1, [WsPtr, #CursorFudgeFactor]
            ADDS    R3, R3, R1              ; X := X + CursFudgeFactor
            MOVLT   R3, #0                  ; if < 0 then make =0

            CMP     R3, #16*1024            ; if >= limit then make =limit-1
            MOVGE   R3, #16*1024
            SUBGE   R3, R3, #1

            ORR     R3, R3, #HorizCursorStart
     |
            LDR     R1, [WsPtr, #CursorFudgeFactor]
            LDRB    R2, [R6, #PointerActiveXs]
            SUB     R1, R1, R2

            LDR     R2, [WsPtr, #PointerXEigFactor]
            LDR     R3, [WsPtr, #PointerX]
            MOV     R3, R3, ASR R2

            LDR     R4, [WsPtr, #DisplayModeFlags]
            TST     R4, #Flag_HiResMono     ; if not hi-res-mono
            MOVEQ   R3, R3, LSL #2          ; then multiply by 4

            ADD     R3, R3, R1, LSL #2      ; X := X + (CursFudgeFactor-ActiveX)<<2

            CMP     R3, #0                  ; if < 0 then make =0
            MOVLT   R3, #0

            CMP     R3, #8*1024             ; if >= limit then make =limit-1
            MOVGE   R3, #8*1024
            SUBGE   R3, R3, #1

            MOV     R3, R3, LSL #11
            ORR     R3, R3, #HorizCursorStart
     ]

     [ {FALSE} ; debug horiz pointer programming
            Push    "r0,lr"
            MOV     r0, r3
            BL      TubeDumpR0
            BL      TubeNewl
            Pull    "r0,lr"
     ]

            STR     R3, [R10]

    ; now process Y

            LDR     R1, [WsPtr, #PointerY]
            LDR     R2, [WsPtr, #DisplayYEigFactor]

            LDR     R3, [WsPtr, #DisplayYWindLimit]
                                            ; Total height of screen in pixels-1
            SUB     R1, R3, R1, ASR R2      ; convert Y to pixels and invert

            LDRB    R2, [R6, #PointerActiveYs]
            SUB     R1, R1, R2

            MOV     R2, #0                  ; height
            MOV     R4, R5, LSL #9          ; LAG offset from CursorData

            ADD     R5, R3, #1              ; Total vertical pixels

            ADDS    R3, R1, R0              ; R3 = Y + PointerHeight(shape)
            MOVLE   R1, #0                  ; if <= 0 then off, ie Y=0, height=0
            BLE     %FT10

            CMP     R1, R5                  ; Y >= TotalHeight
            MOVGE   R1, #0                  ; then off
            BGE     %FT10

            CMP     R3, R5                  ; Y + PointerHeight > TotalHeight
            RSBGT   R2, R1, R5              ; then height=TotalHeight-Y
            BGT     %FT10

            CMP     R1, #0                  ; Y >=0
            MOVGE   R2, R0                  ; then height=PointerHeight
            BGE     %FT10

            TST     R1, #1                  ; Y odd ?
            ADDNE   R4, R4, #&100           ; then use 2nd copy

            ADD     R2, R1, R0              ; height = PointerHeight+Y

            RSB     R1, R1, #0              ; Y := -Y
            BIC     R1, R1, #1              ; Y := (-Y AND NOT 1)
            ADD     R4, R4, R1, LSL #3      ; add on offset into shape
            MOV     R1, #0                  ; Y := 0
    10
            Push    "r1, r14"
     [ MEMC_Type = "IOMD"
            MOV     r0, #0
            LDR     r0, [r0, #DRAMPhysAddrA]
            LDR     r1, =DRAMOffset_CursorChunk + (CursorData - CursorChunkAddress)
            ADD     r0, r0, r1
     |
            LDR     r0, =PhysCursorStartAdr
     ]
            ADD     r0, r0, r4
            MOV     r1, #MEMCDAG_CInit
            BL      SetDAG
            Pull    "r1, r14"

     [ VIDC_Type <> "VIDC20"
            MOV     R1, R1, LSL #14         ; shift up
     ]
            LDR     R3, [WsPtr, #VertAdjust] ; get display start value
            ADD     R1, R1, R3              ; and add on

            ORR     R3, R1, #VertiCursorStart
            STR     R3, [R10]

     [ VIDC_Type = "VIDC20"
            ADD     R1, R1, R2              ; add height
     |
            ADD     R1, R1, R2, LSL #14     ; add height
     ]
            ORR     R3, R1, #VertiCursorEnd
            STR     R3, [R10]

            MOV     PC, R14
 ]

        LTORG

; *****************************************************************************

SetMouseMult ROUT
        Push    "R11,R14"
        MOV     R11, #KeyWorkSpace

        LDRB    R0, [R1, #1]
        MOV     R0, R0, LSL #24         ; sign extend to 32 bits
        MOV     R0, R0, ASR #24
        STR     R0, MouseXMult

        LDRB    R0, [R1, #2]
        MOV     R0, R0, LSL #24         ; sign extend to 32 bits
        MOV     R0, R0, ASR #24
        STR     R0, MouseYMult

        Pull    "R11,PC"

; *****************************************************************************
;
;       GetCoordPair - get pair of 2-byte coords from R1+1..R1+4
;       adds on graphics origin and sign extends to 32 bits
;       and puts X into R2, Y into R3
;

GetCoordPair ROUT
        LDRB    R0, [R1, #1]            ; get X coordinate
        LDRB    R2, [R1, #2]
        ORR     R0, R0, R2, LSL #8

        LDR     R2, [WsPtr, #OrgX]      ; add on origin
        ADD     R0, R0, R2

        MOV     R0, R0, LSL #16         ; sign extend 16 to 32
        MOV     R2, R0, ASR #16

        LDRB    R0, [R1, #3]            ; get Y coordinate
        LDRB    R3, [R1, #4]
        ORR     R0, R0, R3, LSL #8

        LDR     R3, [WsPtr, #OrgY]      ; add on origin
        ADD     R0, R0, R3

        MOV     R0, R0, LSL #16         ; sign extend 16 to 32
        MOV     R3, R0, ASR #16

        MOV     PC, R14

; *****************************************************************************

SetMousePosn ROUT
        Push    "R2, R3, R11, R14"
        MOV     R11, #KeyWorkSpace

        BL      GetCoordPair

; now check point is within bounding box

        LDR     R0, MouseBoundLCol
        CMP     R2, R0
        LDRGE   R0, MouseBoundRCol
        CMPGE   R0, R2
        LDRGE   R0, MouseBoundBRow
        CMPGE   R3, R0
        LDRGE   R0, MouseBoundTRow
        CMPGE   R0, R3

        BLGE    SetMousePosnRegs

        Pull    "R2, R3, R11, PC"

SetMousePosnRegs
        MOV     R11, #KeyWorkSpace
        STR     R2, MouseX
        STR     R3, MouseY
        B       FlushMouse

; *****************************************************************************
;
;       StoreCoordPair - Stores X,Y coords in R2,R3 in R1+1..R1+4
;       subtracts graphics origin

StoreCoordPair ROUT

        LDR     R0, [WsPtr, #OrgX]      ; subtract off origin
        SUB     R2, R2, R0

        STRB    R2, [R1, #1]            ; store lo-byte of X
        MOV     R2, R2, LSR #8
        STRB    R2, [R1, #2]            ; store hi-byte of X

        LDR     R0, [WsPtr, #OrgY]      ; subtract off origin
        SUB     R3, R3, R0

        STRB    R3, [R1, #3]            ; store lo-byte of Y
        MOV     R3, R3, LSR #8
        STRB    R3, [R1, #4]            ; store hi-byte of Y

        MOV     PC, R14

; *****************************************************************************

ReadMousePosn ROUT
 [ AssemblePointerV :LAND: {TRUE}
        Push    "r0-r3, r9-r11, lr"
        BL      PollPointer             ; update mouse position on a read
        LDR     r1, [sp, #1*4]          ; reload pointer to buffer
        MOV     R11, #KeyWorkSpace

        LDR     R2, MouseX              ; get mouse X
        LDR     R3, MouseY              ; get mouse Y
        BL      StoreCoordPair
        Pull    "r0-r3, r9-r11, pc"

 |
        Push    "R2, R3, R11, R14"
        MOV     R11, #KeyWorkSpace

        LDR     R2, MouseX              ; get mouse X
        LDR     R3, MouseY              ; get mouse Y
        BL      StoreCoordPair

        Pull    "R2, R3, R11, PC"
 ]

; *****************************************************************************

SetPointerPosn ROUT
        Push    "R2, R3, R14"

        BL      GetCoordPair

        STR     R2, [WsPtr, #PointerX]
        STR     R3, [WsPtr, #PointerY]

        Pull    "R2, R3, PC"

; *****************************************************************************

ReadPointerPosn ROUT
        Push    "R2, R3, R14"

        LDR     R2, [WsPtr, #PointerX]
        LDR     R3, [WsPtr, #PointerY]
        BL      StoreCoordPair

        Pull    "R2, R3, PC"

; *****************************************************************************
;
;       FlushMouse - Flush mouse buffer
;
; out:  All registers preserved

FlushMouse ROUT
        Push    "R0-R2, R14"
        MOV     R0, #21
        MOV     R1, #Buff_Mouse
        SWI     XOS_Byte
        Pull    "R0-R2, PC"

        END
