; > s.service

; routines hanging on (kernel direct equiv. of) memory service calls


;Service_MemoryMoved
;
;  if there is a mapped-in node then recheck which and how many pages it owns
;
;  I believe it should only be necessary to
;    1) reset node's idea of Npages to agree with no. of pages in app space
;    2) find the page numbers for new pages, if Npages has increased
;  ie. I believe it is not necessary to recheck page numbers for whole node
;
AMBsrv_memorymoved
        Push   "R3-R6,R12,LR"

        MOV     R12,#AMBControl_ws
        LDR     R12,[R12]
        CMP     R12,#0
        Pull    "R3-R6,R12,PC",EQ,^        ;AMBControl not initialised yet!

        LDR     R4,AMBMappedInNode
        CMP     R4,#0
        Pull    "R3-R6,R12,PC",EQ,^        ;done if nothing mapped in

        LDR     R3,[R4,#AMBNode_Npages]

        LDR     R6,=AppSpaceDANode
        LDR     R6,[R6,#DANode_Size]
        SUB     R6,R6,#ApplicationStart
        MOV     R6,R6,LSR #Log2PageSize

        CMP     R6,R3
        STRNE   R6,[R4,#AMBNode_Npages]    ;update Npages
        Pull    "R3-R6,R12,PC",LE,^        ;done if Npages same, or shrink

        MOV     R5,#ApplicationStart
        ADD     R5,R5,R3,LSL #Log2PageSize ;first logical address to find
        ADD     R4,R4,#AMBNode_pages
        ADD     R4,R4,R3,LSL #2            ;first page number word to use
        SUB     R3,R6,R3                   ;no. of pages to find (grow number)
        BL      AMB_FindMemMapEntries
        Pull    "R3-R6,R12,PC",,^


;Service_PagesSafe
;  entry: R2 =  no. pages involved,
;         R3 -> page block describing state before
;         R4 -> page block describing state after
;
; action: fix-up page numbers in page lists of nodes as necessary
;
AMBsrv_pagessafe
        Push   "R0-R1,R5-R10,R12,LR"

        MOV     R12,#AMBControl_ws
        LDR     R12,[R12]
        CMP     R12,#0
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;AMBControl not initialised yet!

        LDR    R0,AMBNtasks
        CMP    R0,#0
        Pull   "R0-R1,R5-R10,R12,PC",EQ,^  ;no nodes to check

;speed-up - list of pages tends to span a narrow range of page numbers, so
;            use min,max limits to skip search
        MOV    R9,#&7FFFFFFF
        MOV    R10,#0
        MOV    R0,R3
        MOV    R1,R2
00
        LDR    R5,[R0],#12
        CMP    R9,R5
        MOVGT  R9,R5         ;remember minimum 'before' page no. in R9
        CMP    R10,R5
        MOVLT  R10,R5        ;remember maximum 'before' page no. in R10  
        SUBS   R1,R1,#1
        BNE    %BT00

        ADR    R0,AMBAnchorNode
        MOV    R1,R0
        Push   "R0,R1"
        B      %FT03
01
;check pages for this node
        LDR    R5,[R0,#AMBNode_Npages]
        CMP    R5,#0
        BEQ    %FT04         ;skip if node has zero pages
        ADD    R6,R0,#AMBNode_pages
        Push   "R0,R1"
02
;for each page in node
        LDR     R7,[R6]      ;page no. from node
        CMP     R7,R9
        BLT     %FT13        ;not in list ( < 'before' min)
        CMP     R7,R10
        BGT     %FT13        ;not in list ( > 'before' max)
;oh dear! search of before,after lists required
        MOV     LR,R2
        MOV     R0,R3
        MOV     R1,R4
11
        LDR     R8,[R0],#12  ;next page from before list
        CMP     R8,R7        ;matches node page?
        BEQ     %FT12
        ADD     R1,R1,#12    ;step the after list
        SUBS    LR,LR,#1
        BNE     %BT11
        B       %FT13        ;done pages in node,not matched
12
        LDR     R8,[R1]      ;fetch new page number from after list
        STR     R8,[R6]      ;store it for node
13
        ADD    R6,R6,#4      ;next page in node
        SUBS   R5,R5,#1        
        BNE    %BT02
03
        Pull   "R0,R1"
04
;next node
        LDR    R0,[R0,#AMBNode_next]
        CMP    R0,R1                 ;done if back at anchor node
        BNE    %BT01
        Pull    "R0-R1,R5-R10,R12,PC",,^

    END

