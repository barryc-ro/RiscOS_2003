
; > s.Options

AMBMagicNodeID     * &4E424D41        ;"AMBN"

AMBInitialMaxNodes * 256
AMBGrowMaxNodes    * 64               ;not used now AMBControl is in kernel


;Bin pages by physical address, for quick mapping from page number to
;physical address. Bin entry holds physical address of first page in bin.
;Bin size must be no bigger than minimum physical RAM fragment to be found
;in machine. eg. 512k size gives 128 pages in a bin, so shift of 7 and
;mask of &7F. Max practical bin size is 1M (mask must be immediate constant).
;
AMBPhysBinShift    * 7
AMBPhysBinMask     * &7F


ApplicationStart  * (32*1024)
PageSize          * (4*1024)
Log2PageSize      * 12             ;for shifts

AbsMaxAppSize     * (28*1024*1024)                   ;28 Mb application space limit for RISC OS
AbsMaxAppPages    * (AbsMaxAppSize:SHR:Log2PageSize) ;and same limit expressed in Pages

  [ ChocolateAMB
AMBMIRegWords      * (AbsMaxAppPages+31) :SHR: 5     ;no. of words for AMBMappedInRegister
                                                     ;convenient to set this at fixed max size
                                                     ;(only 896 bytes for 28Mb AppSpace)
  ]

;maximum logical space size cleaned by range strategy
;
;Cleaning a sufficiently small space by range will be quicker, because of the fixed
;memory reading cost for a full DC clean. A sufficiently large space will be better handled
;by full clean, because of the huge number of clean/flush line instructions for the range
;case. We use a threshold to switch between the two schemes. The value of the threshold
;depends on memory speed, core speed etc. but is not particularly critical.
;
AMB_ARMA_CleanRange_thresh        * 256*1024 ;must be whole no. pages
;
AMB_ARMA_CleanSparseRange_thresh  * 256*1024 ;must be whole no. pages

;whether to check handles given to AMBControl - not very useful when in kernel
;
                    GBLL    ValidateAMBHandles
ValidateAMBHandles  SETL    {FALSE}


;performance enhancements introduced for Ursula OS
;
; ChocolateAMB       - if {FALSE}, disables all AMBControl crazy chocolate flavour enhancements
;                      (defined in kernel GetAll, since other parts of kernel need hooks if true)
;
; AMB_LazyMapIn      - if {TRUE}, individual pages of a swapped-in task are only mapped in when
;                      necessary (happens via abort mechanism). This typically makes the swapping
;                      cost much lower and much less sensitive to large slot size. The worst case
;                      swapping cost is still good (abort mechanism cost is very small).
;
; AMB_StickyLastNode - if {TRUE}, the last deallocated node (the node itself, not the AppSpace
;                      pages) is retained, with page list. If the next allocate occurs
;                      without any intervening FreePool mangling, the page list is reused to save
;                      work. This is handy especially because the FreePool L2PT area is uncached.
;
; AMB_LimpidFreePool - if {TRUE}, the FreePool is normally assumed to be crystal clear (pages inactive),
;                      so that cache flushing is not required on mapping out from the FreePool. This
;                      requires a call to AMBControl from the Wimp to maintain FreePool status, if
;                      Wimp_ClaimFreeMemory is still supported.
;
; AMB_ChocTrace      - if {TRUE}, keep trace info for some enhanced code calls and data (probably development only)

                    GBLL    AMB_LazyMapIn
                    GBLL    AMB_StickyLastNode
                    GBLL    AMB_LimpidFreePool
                    GBLL    AMB_ChocTrace

AMB_LazyMapIn       SETL    {TRUE}  :LAND: ChocolateAMB
AMB_StickyLastNode  SETL    {FALSE} :LAND: ChocolateAMB   ;NOT implemented yet
AMB_LimpidFreePool  SETL    {FALSE} :LAND: ChocolateAMB   ;NOT implemented yet
AMB_ChocTrace       SETL    {TRUE}  :LAND: ChocolateAMB

       END
