; > $.Source.PMF.Mouse

; Mouse driving code

; Author:       Steve Cormie
; Started:      24-Feb-93

; Change history:
;
; Date          Who     Description
; ----          ---     -----------
; 24-Feb-93     SMC     Created.

; *****************************************************************************
;
;        Mouse initialisation
;
MouseInit
        Push    "lr"
        MOV     r11, #KeyWorkSpace


        MOV     r0, #MouseStepCMOS      ; setup mouse multipliers from CMOS
        BL      Read
        MOV     r0, r0, LSL #24         ; sign extend it
        MOVS    r0, r0, ASR #24
        MOVEQ   r0, #1                  ; if would be zero, set to 1
        STR     r0, MouseXMult
        STR     r0, MouseYMult

        MOV     r0, #0
        STRB    r0, MouseButtons

        MOV     r0, #MouseCMOS
        BL      Read
        STRB    r0, MouseType

        Pull    "pc"

; *****************************************************************************
;
;       MouseButtonChange - Called by keyboard handler when mouse button change
;
; in:   R0 = state of buttons (bit0=R, bit1=C, bit2=L)
;       R11 -> KeyWorkSpace
;

MouseButtonChange ROUT
        Push    "R0-R5, R12, R14"

        VDWS    WsPtr
        STRB    R0, MouseButtons        ; save it for ReadMouse calls
        MOV     R3, R0

        LDR     R1, MouseX
        LDR     R0, [WsPtr, #OrgX]
        SUB     R1, R1, R0              ; mouse X

        LDR     R2, MouseY
        LDR     R0, [WsPtr, #OrgY]
        SUB     R2, R2, R0              ; mouse Y

        MOV     R4, #0
        LDR     R4, [R4, #MetroGnome]   ; use monotonic variable now

        MOV     R0, #Event_Mouse
        BL      OSEVEN
        MOV     WsPtr, #IOC

; Use buffer manager's 'block insert' function


; TMD 26-Feb-93: Fix bug - if X is negative, Y would be inserted in the buffer as -1

        LDR     R0, MouseX              ; 16 bits, sign-extended to 32 bits
        MOV     R0, R0, LSL #16
        LDR     R1, MouseY              ; ditto
        MOV     R1, R1, LSL #16
        ORR     R0, R1, R0, LSR #16     ; combine, having knocked off the troublesome bits

        ORR     R1, R3, R4, LSL #8      ; R1 = Combined 8bit buttons and 24 LSB's of time
        MOV     R2, R4, LSR #24         ; R2 = MSB of time
        SUB     SP, SP, #3*4            ; Create local mouse data buffer
        STMIA   SP, {R0,R1,R2}          ; Write mouse data to buffer

        MOV     R3, #9                  ; Mouse packet size
        MOV     R2, SP                  ; R2-> block to insert
        MOV     R1, #(Buff_Mouse:OR:(1:SHL:31)) ; Block insert to mouse buffer
        Push    "R10,R12"
        MOV     R10, #INSV              ; Insert
        BL      GoVec2                  ; Call the vector in R10
        Pull    "R10,R12"
        ADD     SP, SP, #3*4            ; Destroy mouse data buffer
10
        Pull    "R0-R5, R12, PC"


; *****************************************************************************
;
;       Read mouse position
;

ReadMouse ROUT
        Push    "R4-R6,R10-R12"
        MOV     R11, #KeyWorkSpace

        SUB     SP, SP, #3*4            ; Create 9 byte local mouse data buffer
        MOV     R3, #9                  ; Mouse packet size
        MOV     R2, SP                  ; R2-> buffer for data
        MOV     R1, #(Buff_Mouse:OR:(1:SHL:31)) ; Block remove from mouse buffer
        CLRV                            ; Remove not examine
        Push    "R10,R12"
        MOV     R10, #REMV
        BL      GoVec2                  ; Call the vector in R10
        Pull    "R10,R12"

        LDMCCIA SP, {R4,R5,R6}
        ADD     SP, SP, #3*4            ; Destroy mouse data buffer
        BCS     %FT10                   ; Jump if no buffered data

        MOV     R0, R4, LSL #16
        MOV     R0, R0, ASR #16         ; R0 = sign extended x coord
        MOV     R1, R4, ASR #16         ; R1 = sign extended y coord
        AND     R2, R5, #&FF            ; R2 = button state
        MOV     R3, R5, LSR #8          ; R3 = 3 low order bytes of time
        ORR     R3, R3, R6, LSL #24     ; R3 = time

; code inserted here 12-Aug-88 to force position read from buffer to be inside
; CURRENT bounding box; this removes the need to flush buffer when changing
; the bounding box.

        ADR     R4, MouseBounds
        LDMIA   R4, {R4-R6,R10}         ; R4=LCol; R5=BRow; R6=RCol; R10=TRow;
        CMP     R0, R4
        MOVLT   R0, R4
        CMP     R0, R6
        MOVGT   R0, R6
        CMP     R1, R5
        MOVLT   R1, R5
        CMP     R1, R10
        MOVGT   R1, R10

        [ MouseBufferFix
        B       %FT20                   ; correct for origin after clipping
        |
        Pull    "R4-R6,R10-R12,PC"
        ]

10
        LDRB    R2, MouseButtons

        MOV     R3, #0
        LDR     R3, [R3, #MetroGnome]           ; use monotonic variable now

        LDR     R0, MouseX
        LDR     R1, MouseY
20
        VDWS    WsPtr

        LDR     R4, [WsPtr, #OrgX]
        SUB     R0, R0, R4

        LDR     R4, [WsPtr, #OrgY]
        SUB     R1, R1, R4

        Pull    "R4-R6,R10-R12,PC"

; *****************************************************************************
;
;       ProcessMouseXY - Called to update mouse position.
;
;       in:     r2  = signed 32-bit X movement
;               r3  = signed 32-bit Y movement
;               r11 ->KeyWorkSpace
;       out:    r2,r3 corrupted
;
ProcessMouseXY
        Push    "r4,lr"

; process X movement
        CMP     r2, #0
        BEQ     %FT10

        MOV     r2, r2, LSL #16         ; move delta X to top 16 bits

        LDR     r4, MouseXMult
        MUL     r2, r4, r2

        LDR     r4, MouseX
        ADD     r2, r2, r4, LSL #16     ; add signed value in top 16 bits
        MOV     r2, r2, ASR #16         ; sign extend to 32 bits

        LDR     r4, MouseBoundLCol      ; bound to bounding box
        CMP     r2, r4
        MOVLT   r2, r4
        LDR     r4, MouseBoundRCol
        CMP     r4, r2
        MOVLT   r2, r4
        STR     r2, MouseX

10
; process Y movement
        CMP     r3, #0
        Pull    "r4,pc",EQ

        MOV     r3, r3, LSL #16         ; move delta Y to top 16 bits

        LDR     r4, MouseYMult
        MUL     r3, r4, r3

        LDR     r4, MouseY
        ADD     r3, r3, r4, LSL #16     ; add signed value in top 16 bits
        MOV     r3, r3, ASR #16         ; sign extend to 32 bits

        LDR     r4, MouseBoundBRow      ; bound to bounding box
        CMP     r3, r4
        MOVLT   r3, r4
        LDR     r4, MouseBoundTRow
        CMP     r4, r3
        MOVLT   r3, r4
        STR     r3, MouseY

        Pull    "r4,pc"

 [ AssemblePointerV

; *****************************************************************************
;
;       PollPointer - Called on VSync to get mouse changes.
;
;       out:    corrupts r0-r3,r9-r11
;
PollPointer
        Push    "r12,lr"
        MOV     r11, #KeyWorkSpace

        MOV     r0, #0                  ; Request pointer state.
        LDRB    r1, MouseType
        MOV     r2, #0                  ; Default to no movement.
        MOV     r3, #0
        MOV     r9, pc                  ; Save current PSR.
        TEQP    pc, #SVC_mode + I_bit   ; Call PointerV in SVC mode, no IRQs.
        MOV     r10, #PointerV          ; Call PointerV to get movements & button states
        Push    "lr"                    ; Save SVC lr.
        BL      CallVector
        Pull    "lr"                    ; Restore SVC lr.
        TEQP    r9, #0
        NOP
        BL	ProcessMouseXY

        Pull    "r12,pc"


; *****************************************************************************
;
;       PointerSWI - Handle SWI OS_Pointer calls (read/set pointer type).
;
PointerSWI
        MOV     r11, #KeyWorkSpace
        TEQ     r0, #0
        LDREQB  r0, MouseType
        BEQ     SLVK


        TEQ     r0, #1
        BNE     %FT10

        Push    "r0,r10,r12,lr"
        STRB    r1, MouseType
        MOV     r0, #2
        MOV     r10, #PointerV
        BL      CallVector
        Pull    "r0,r10,r12,lr"
        B       SLVK

10
        ADRL    r0, ErrorBlock_BadParameters
        BL      TranslateError
        B       SLVK_SetV
 ]

        END
