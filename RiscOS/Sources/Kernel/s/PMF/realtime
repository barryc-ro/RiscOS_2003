; > $.Source.PMF.realtime

; *****************************************************************************
;
;       RTCToRealTime - Set RealTime from actual RTC
;
; in:   R12 -> BYTEWS
; out:  all registers preserved
;

        [ {FALSE}
Construct5Byte ROUT
        Push    R14
        B       Construct5ByteEntry
        ]

RTCToRealTime ROUT
        Push    "R0-R9, R14"
        BL      ReadTime                ; R0 := hours, R1 := minutes
                                        ; R2 := days, R3 := months
                                        ; R5 := year(lo), R6 := year(hi)
                                        ; R7 := seconds, R8 := centiseconds
        BL      ConvertTo5Byte
        BL      Store5ByteInRealTime
        Pull    "R0-R9, PC"

        [ {FALSE}                       ; not used
RegToRealTime ROUT
        Push    "R0-R9, R14"
        BL      ConvertTo5Byte
        BL      Store5ByteInRealTime
        Pull    "R0-R9, PC"
        ]

ConvertTo5Byte ROUT
        Push    R14

        MOV     R4, R5                  ; R4 := year MOD 100
        MOV     R5, R6                  ; R5 := year DIV 100
        MOV     R6, R7                  ; R6 := seconds
        MOV     R7, R8                  ; R7 := centiseconds

Construct5ByteEntry
        MOV     R9, #24
        SUB     R2, R2, #1              ; decrement day (day=1 => nowt to add)
        MLA     R0, R9, R2, R0          ; R0 = hours + day*24
        MOV     R9, #60
        MLA     R1, R0, R9, R1          ; R1 = mins + hours*60
        MLA     R6, R1, R9, R6          ; R6 = secs + mins*60
        MOV     R9, #100
        MLA     R7, R6, R9, R7          ; R7 = centisecs + secs*100

        ADR     R0, STMonths-4          ; Point to table (month = 1..12)
        LDR     R1, [R0, R3, LSL #2]    ; get word of offset
        ADD     R7, R7, R1              ; add to total

; if not had leap day in this year yet, then exclude this year from the
; leap day calculations

        CMP     R3, #3                  ; if month >= 3
        SBCS    R0, R4, #0              ; then R0,R1 = R4,R5
        MOVCC   R0, #99                 ; else R0,R1 = R4,R5 -1
        SBC     R1, R5, #0

; want (yl+100*yh) DIV 4 - (yl+100*yh) DIV 100 + (yl+100*yh) DIV 400
; = (yl DIV 4)+ (25*yh) - yh + (yh DIV 4)
; = (yl >> 2) + 24*yh + (yh >> 2)

        MOV     R0, R0, LSR #2          ; yl >> 2
        ADD     R0, R0, R1, LSR #2      ; + yh >> 2
        ADD     R0, R0, R1, LSL #4      ; + yh * 16
        ADD     R0, R0, R1, LSL #3      ; + yh * 8

; now subtract off the number of leap days in first 1900 years = 460

        SUBS    R0, R0, #460
        BCC     BadYear                 ; before 1900, so bad
        CMP     R0, #86                 ; if more than 86 days, then it's
        BCS     BadYear                 ; after 2248, so bad

        LDR     R9, =ticksperday        ; multiply by ticksperday and add to
        MLA     R7, R9, R0, R7          ; total (no overflow possible as this
                                        ; can never be more than 85+31 days)

; now add on (year-1900)*ticksperyear

        SUBS    R5, R5, #19             ; subtract off 1900
        BCC     BadYear
        MOV     R9, #100
        MLA     R4, R9, R5, R4          ; R4 = year-1900

        LDR     R0, =ticksperyear       ; lo word of amount to add on
        MOV     R1, #0                  ; hi word of amount to add on
        MOV     R8, #0                  ; hi word of result
10
        MOVS    R4, R4, LSR #1
        BCC     %FT15

        ADDS    R7, R7, R0              ; if bit set then add on amount
        ADCS    R8, R8, R1
        BCS     BadYear                 ; overflow => bad time value
15
        ADDS    R0, R0, R0              ; shift up amount
        ADCS    R1, R1, R1
        TEQ     R4, #0                  ; if still bits to add in
        BNE     %BT10                   ; then loop

        CMP     R8, #&100               ; R8 must only be a byte
        Pull    PC, CC

BadYear
        MOV     R7, #-1
        MOV     R8, #-1
        Pull    PC


Store5ByteInRealTime
        Push    R14
        PHPSEI                          ; disable IRQs for this bit
        STR     R7, RealTime +0
        STRB    R8, RealTime +4

        [ :LNOT: AssemblingArthur :LAND: :LNOT: Module
; for now, also put into normal time

        LDRB    R0, TimerState
        TEQ     R0, #5

        ADREQ   R3, TimerAlpha +0
        ADRNE   R3, TimerBeta +0

        STR     R7, [R3]
        STRB    R8, [R3, #4]
        ]
        PLP

        Pull    PC

; *****************************************************************************

tickspersecond  * 100
ticksperminute  * tickspersecond * 60
ticksperhour    * ticksperminute * 60
ticksperday     * ticksperhour   * 24
ticksperyear    * ticksperday    * 365  ; &BBF81E00

STMonths
        &       &00000000       ; Jan
        &       &0FF6EA00       ; Feb
        &       &1E625200       ; Mar
        &       &2E593C00       ; Apr
        &       &3DCC5000       ; May
        &       &4DC33A00       ; Jun
        &       &5D364E00       ; Jul
        &       &6D2D3800       ; Aug
        &       &7D242200       ; Sep
        &       &8C973600       ; Oct
        &       &9C8E2000       ; Nov
        &       &AC013400       ; Dec
        &       &F0000000       ; terminator, must be less than this (+1)

        [ {FALSE}
; *****************************************************************************
;
;       DecodeAcornTime - Convert from 5-byte cs representation to
;                         "01:23:45 on 01-Jan-1988<0D>" format
;
; in:   R1 -> block
;       [R1, #1..5] = 5-byte centisecond representation
;
; out:  [R1, #0..23] = string representation
;

OsWord0EEpsilon
DecodeAcornTime ROUT
        ADD     R0, R1, #1              ; R0 -> 5 bytes of centiseconds
        MOV     R2, #24
        ADR     R3, AcornTimeFormat
        B       OsWord0EDandT           ; needs to be recoded if re-included

AcornTimeFormat
        =       "%24:%mi:%se on %dy-%m3-%ce%yr", 0
        ALIGN

        LTORG

; *****************************************************************************
;
;       EncodeAcornTime - Convert string representation (as above) into
;                         5-byte centisecond value
;
; in:   R1 -> block
;       [R1, #1..24] = string representation
;
; out:  [R1, #0..4] = 5 byte cs representation
;

OsWord0EZeta
EncodeAcornTime ROUT
        Push    "R7-R10"

; Firstly, the months (into R3)

        LDRB    R0, [R1, #16]           ; Get first char and lowercase it
        ORR     R0, R0, #&20
        LDRB    R2, [R1, #16+1]         ; And the second
        ORR     R2, R2, #&20
        LDRB    R3, [R1, #16+2]         ; And the third
        ORR     R3, R3, #&20
        ORR     R0, R0, R2, LSL #8      ; Make a word of the chars
        ORR     R0, R0, R3, LSL #16     ; eg. 0naj, 0bef etc.

        MOV     R3, #0
        ADRL    R2, MonthNameTable
10      ADD     R3, R3, #1
        CMP     R3, #13
        BCS     BadEncodeTime
        LDR     R4, [R2], #4            ; Test month name against list
        TEQ     R4, R0
        BNE     %BT10

; Ok, suss the years

        MOV     R10, #20                ; Read pair from hundreds/thousands
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R5, R0

        MOV     R10, #20+2              ; And from tens/years
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R4, R0

; The days, please

        MOV     R10, #13                ; Read pair from days field
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R2, R0

; Then the seconds

        MOV     R10, #7                 ; Read pair from seconds field
        BL      GetPair
        CMPCC   R0, #60                 ; 00..59 valid
        BCS     BadEncodeTime
        MOV     R6, R0

; Now the minutes

        MOV     R10, #4                 ; Read pair from minutes field
        BL      GetPair
        CMPCC   R0, #60                 ; 00..59 valid
        BCS     BadEncodeTime
        MOV     R9, R0                  ; Can't disturb R1 yet !

; Lastly the hours

        MOV     R10, #1                 ; Read pair from hours field
        BL      GetPair
        CMPCC   R0, #24                 ; 00..23 valid
        BCS     BadEncodeTime

        MOV     R10, R1
        MOV     R1, R9                  ; Get minutes back
        MOV     R7, #0                  ; Centiseconds = 0
        BL      Construct5Byte          ; Has R0-R7 parameters; R7,R8 on exit
EncodeExit
        STRB    R7, [R10, #0]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #1]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #2]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #3]
        STRB    R8, [R10, #4]

        Pull    "R7-R10"
        B       OsWord0Eend


BadEncodeTime
        MOV     R8, #-1                 ; Set date to out-of-bounds value
        MOV     R7, #-1                 ; (This would be a command file)
        MOV     R10, R1
        B       EncodeExit

; *****************************************************************************
;
;       GetPair - Get a pair of decimal digits
;
; in:   [R1,R10], [R1,R10+1] contain digits
;
; out:  C=0 => R0 = 10*msdigit + lsdigit
;       C=1 => invalid pair of digits
;

GetPair ROUT
        Push    "R2, R10, R14"

        LDRB    R2, [R10, R1]!          ; Get msdigit and convert to decimal
        SUB     R2, R2, #"0"
        CMP     R2, #10                 ; Keep CState for exit

        LDRB    R0, [R10, #1]           ; Get lsdigit and convert to decimal
        SUB     R0, R0, #"0"
        CMPCC   R0, #10

        ADD     R2, R2, R2, LSL #2      ; Multiply msdigit by 5
        ADD     R0, R0, R2, LSL #1      ; complete mult by 10 and add

        Pull    "R2, R10, PC"
        ]

        LTORG

        END
