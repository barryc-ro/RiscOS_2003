; > $.Source.PMF.ConvDate

        MACRO
        CDATT   $mnemonic, $stackoffset, $digits
        ASSERT  (:LEN: "$mnemonic") = 2
        ASSERT  ((CDAT$mnemonic-(CDATBranch+8)) :AND: &FFFFFC03) = 0
        ASSERT  ($stackoffset >=0) :LAND: ($stackoffset < 64)
        LCLA    digits
        [       "$digits"=""
digits  SETA    2
        |
digits  SETA    $digits
        ]
        ASSERT  (digits >= 1) :LAND: (digits <= 3)

        DCB     digits :OR: ($stackoffset :SHL: 2)
        DCB     (CDAT$mnemonic-(CDATBranch+8)) :SHR: 2
        =       "$mnemonic"
        MEND

; *****************************************************************************
;
;       ConvertStandardDateAndTime - Convert from 5-byte cs representation to
;                                    format specified in <SYS$DateFormat>
;
; in:   R0 -> time block
;       [R0, #0..4] = 5-byte centisecond representation
;       R1 -> buffer to accept conversion
;       R2 = size of buffer
;
; out:  V=0 => successful conversion
;       R0 = input value of R1
;       R1 = updated pointer to buffer
;       R2 = updated size of buffer
;
;       V=1 => failed conversion
;       R0 -> error block
;       R1 = input value of R1
;       R2 = input value of R2
;


ConvertStandardDateAndTime ROUT
      [ {TRUE}                          ; KJB 980908 - International version just calls TerrMgr (as documented in PRM!)
        Push    "R3,R14"

        MOV     R3,R2                   ; Territory SWI wants things one register up.
        MOV     R2,R1
        MOV     R1,R0
        MOV     R0,#-1                  ; Use configured territory.
        SWI     XTerritory_ConvertStandardDateAndTime
        Pull    "R3,R14"
        ORRVS   R14, R14, #V_bit        ; set V in R14 for exit
        ExitSWIHandler
      |
        BIC     R10, R13, #&00FF
        BIC     R10, R10, #&7F00        ; R10 -> assumed start of stack
        SUB     R10, R13, R10           ; R10 := free space on stack
        CMP     R10, #&200              ; to be on the safe side
        BCS     %FT10

; not enough stack for operation

        ADR     R0, ErrorBlock_CDATStackOverflow
      [ International
        Push    "lr"
        BL      TranslateError
        Pull    "lr"
      ]
        SWI     XOS_GenerateError
        ORR     R14, R14, #V_bit
        ExitSWIHandler

        MakeErrorBlock CDATStackOverflow

10
        SUB     R13, R13, #&100         ; room for reading <SYS$DateFormat>
        Push    "R0-R4, R14"
        ADR     R0, DateFormatVarName   ; R0 -> "SYS$DateFormat"
        ADD     R1, R13, #6*4           ; R1 -> buffer for string
        MOV     R2, #255                ; R2 = maximum length of string
        MOV     R3, #0                  ; not wild carding
        MOV     R4, #VarType_Expanded   ; convert to string
        SWI     XOS_ReadVarVal
        BVS     %FT30
        MOV     R0, #0
        STRB    R0, [R1, R2]            ; terminate string with zero
        MOV     R3, R1                  ; R3 -> format string
        Pull    "R0-R2"
        SWI     XOS_ConvertDateAndTime
        Pull    "R3,R4, R14"
20
        ADD     R13, R13, #&100
        ORRVS   R14, R14, #V_bit
        ExitSWIHandler

; format specifier not found

30
        ADD     R13, R13, #4            ; throw away stacked R0
        Pull    "R1-R4, R14"
        B       %BT20

DateFormatVarName
        =       "SYS$DateFormat",0
        ALIGN
      ]

; *****************************************************************************
;
;       ConvertDateAndTime - Convert from 5-byte cs representation to
;                            format specified by user
;
; in:   R0 -> time block
;       [R0, #0..4] = 5-byte centisecond representation
;       R1 -> buffer to accept conversion
;       R2 = size of buffer
;       R3 -> format string
;
; out:  V=0 => successful conversion
;       R0 = input value of R1
;       R1 = updated pointer to buffer
;       R2 = updated size of buffer
;
;       V=1 => failed conversion
;       R0 -> error block
;       R1 = input value of R1
;       R2 = input value of R2
;

ConvertDateAndTime ROUT

      [ {TRUE}                          ; International vesion just calls territory manager.
        Push    "R4,R14"


        MOV     R4,R3                   ; Territory SWI wants things one register up.
        MOV     R3,R2
        MOV     R2,R1
        MOV     R1,R0
        MOV     R0,#-1                  ; Use configured territory.
        SWI     XTerritory_ConvertDateAndTime
        Pull    "R4,R14"
        ORRVS   R14, R14, #V_bit        ; set V in R14 for exit
        ExitSWIHandler

      |
        Push    "R1-R11, R14"

        LDRB    R4, [R0, #0]            ; read the 5 byte value to convert
        LDRB    R5, [R0, #1]
        ORR     R4, R4, R5, LSL #8
        LDRB    R5, [R0, #2]
        ORR     R4, R4, R5, LSL #16
        LDRB    R5, [R0, #3]
        ORR     R4, R4, R5, LSL #24     ; R4 contains bottom 4 bytes
        LDRB    R5, [R0, #4]            ; R5 contains 5th byte

        MOV     R6, R4, LSR #8
        ORR     R6, R6, R5, LSL #24     ; R6 := centiseconds DIV 256
        LDR     R7, =ticksperday/256    ; (ticksperday is a multiple of 256)
        DivRem  R8, R6, R7, R9          ; R8 = number of days since 1900
        AND     R4, R4, #&FF            ; R4 := centiseconds MOD 256
        ORR     R6, R4, R6, LSL #8      ; R6 := centiseconds today

; first work out bits from R6

        LDR     R7, =ticksperhour
        DivRem  R4, R6, R7, R9          ; R4 := hours
        LDR     R7, =ticksperminute
        DivRem  R5, R6, R7, R9          ; R5 := minutes
        LDR     R7, =tickspersecond
        DivRem  R10, R6, R7, R9         ; R10 := seconds
                                        ; R6 := centiseconds
        Push    "R4,R5,R6,R10"

; now work out bits from R8

        ADD     R11, R8, #1             ; R11 := fudged copy of days since 1900
        MOV     R5, #7
        DivRem  R6, R11, R5, R7         ; R11 := days MOD 7 (ie day of week)
        ADD     R11, R11, #1            ; make in range 1..7

        MOV     R5, #00                 ; units of years = 00
        MOV     R4, #19                 ; hundreds of years = 19
10
        MOV     R6, #0                  ; 0 if not a leap year
        TST     R5, #3                  ; if not divis by 4 then not leap year
        BNE     %FT30
        TEQ     R5, #0                  ; elif not divis by 100 then leap
        BNE     %FT20
        TST     R4, #3                  ; elif not divis by 400 then not leap
        BNE     %FT30
20
        MOV     R6, #1                  ; 1 if leap year
30
        LDR     R7, =365                ; normally take off 365 days per year
        ADD     R7, R7, R6              ; extra day if leap year

        SUBS    R8, R8, R7              ; try taking off 365 or 366 days
        BCC     %FT40                   ; [failed the subtract]
        ADD     R5, R5, #1              ; increment year if successful
        CMP     R5, #100
        MOVEQ   R5, #0
        ADDEQ   R4, R4, #1
        B       %BT10

40
        ADD     R8, R8, R7              ; add back on if we couldn't do it
                                        ; R8 is day of year (0..365)
        Push    "R4,R5"                 ; push yearhi, yearlo

        ADD     R7, R8, #1              ; R7 = day number in range 1-366
        Push    "R7, R11"               ; push d-o-y, d-o-w

; now compute week number

        SUBS    R7, R11, #2             ; dow (Sun=-1, Mon=0,... ,Sat=5)
        ADDCC   R7, R7, #7              ; dow (Mon=0,... ,Sun=6)
        SUB     R7, R8, R7              ; day-of-year no. of start of week

        ADD     R7, R7, #6              ; work out week number as if
                                        ; 1st part week is week 0
        MOV     R10, #7
        DivRem  R11, R7, R10, R9        ; R11 = week number (0..53)
                                        ; R7 (remainder) indicates dayofweek
                                        ; of start of year (Mon=6,Tue=5..Sun=0)
        CMP     R7, #3                  ; if year starts on Mon..Thu
        ADDCS   R11, R11, #1            ; then 1st part week is week 1

        TEQ     R7, #4                  ; if a Wednesday
        TEQEQ   R6, #1                  ; in a leap year
        TEQNE   R7, #3                  ; or a Thursday in any year
        MOVEQ   R9, #53                 ; then allow 53 weeks in year
        MOVNE   R9, #52                 ; else only 52 weeks
        CMP     R11, R9                 ; if more than this
        MOVHI   R11, #1                 ; then week 1 of next year

        TEQ     R11, #0                 ; if not week 0
        BNE     %FT45                   ; then finished

        CMP     R7, #1                  ; HI => Fri, EQ => Sat, CC => Sun
        ADC     R11, R11, #52           ; Fri => 53, Sun => 52, Sat => dunno
        BNE     %FT45

; 1st day of year is Saturday
; if previous year was leap, then is week 53, else is week 52

        SUBS    R5, R5, #1              ; decrement year
        MOVCC   R5, #99
        SUBCC   R4, R4, #1

        TST     R5, #3                  ; if not divis by 4 then not leap year
        BNE     %FT42
        TEQ     R5, #0                  ; elif not divis by 100 then leap
        BNE     %FT45
        TST     R4, #3                  ; elif not divis by 400 then not leap
42
        MOVNE   R11, #52                ; not leap, so must be week 52
45
        Push    "R11"                   ; push weekno

        ADRL    R7, MonthLengths+1      ; R7 -> Jan(31) (Feb is stored as 29)
        EOR     R6, R6, #1              ; R6 = 1 <=> not a leap year
        MOV     R9, #1                  ; month number (1 = Jan)
50
        LDRB    R10, [R7], #1           ; get next month
        CMP     R9, #2                  ; if we're trying for Feb
        SUBEQ   R10, R10, R6            ; and not leap then subtract a day
        SUBS    R8, R8, R10             ; subtract off month value
        ADDCS   R9, R9, #1              ; if successful month +:= 1
        BCS     %BT50

        ADD     R8, R8, R10             ; add the month back on if we failed
        ADD     R8, R8, #1              ; day of month in range 1..31

        Push    "R8,R9"                 ; push d-o-m, month
CDATMainLoop
        SUBS    R2, R2, #1              ; decrement buffer size
        BCC     CDATBufferError         ; error: buffer too small
        LDRB    R0, [R3], #1            ; get byte from format string
        TEQ     R0, #"%"                ; is it a escape sequence ?
        BEQ     %FT65                   ; yes, then do specially
        STRB    R0, [R1], #1            ; no, then store in output buffer
        TEQ     R0, #0                  ; end of format string ?
        BNE     CDATMainLoop            ; no, then loop

; end of format string, so finish

        SUB     R1, R1, #1              ; make R1 point to 0 byte

        ADD     R13, R13, #11*4         ; junk dom,month,woy,doy
                                        ; junk dow,yearhi,yearlo,hours
                                        ; junk mins,secs,centisecs

        Pull    "R0,R3"                 ; R0 := input R1; junk input R2
        Pull    "R3-R11, R14"           ; restore other registers
        ExitSWIHandler                  ; and exit

; come here if run out of buffer space for string

CDATBufferError
        ADR     R0, ErrorBlock_CDATBufferOverflow ; point R0 to error block
CDATError
        ADD     R13, R13, #11*4         ; junk dom,month,woy,doy
                                        ; junk dow,yearhi,yearlo,hours
                                        ; junk mins,secs,centisecs
        Pull    "R1-R11,R14"            ; restore all registers apart from R0
        ORR     R14, R14, #V_bit        ; set V in R14 for exit
        ExitSWIHandler

        MakeErrorBlock CDATBufferOverflow

        MakeErrorBlock CDATBadField

; process "%" escape sequences

65
        LDRB    R0, [R3], #1            ; get next character
        TEQ     R0, #"0"                ; if char = "0"
        MOVEQ   R0, #0                  ; convert to <0>
        TEQNE   R0, #"%"                ; or if char = "%", store "%"
        STREQB  R0, [R1], #1            ; store <0> or "%"
        BEQ     CDATMainLoop            ; and loop

        UpperCase R0, R5                ; convert character to upper case
        EORS    R7, R0, #"Z"            ; zero if we have "Z" specifier
        BNE     %FT67                   ; not "Z"

        LDRB    R0, [R3], #1            ; is "Z", so get another char
        UpperCase R0, R5                ; convert character to upper case
67
        TEQ     R0, #0                  ; are they a wally!
        BEQ     CDATFieldError          ; yes, then bomb out (avoid data abort)

        LDRB    R4, [R3], #1            ; get next char
        UpperCase R4, R5                ; and convert that to upper case

        ORR     R0, R0, R4, LSL #8      ; 2 chars in bottom two bytes

        ADR     R4, CDATEscTab          ; point to table
        ADR     R5, CDATEscTabEnd       ; end of table
70
        TEQ     R4, R5                  ; are we at end of table
CDATFieldError
        ADREQ   R0, ErrorBlock_CDATBadField
        BEQ     CDATError               ; yes, then invalid escape sequence
        LDR     R6, [R4], #4            ; chars in top two bytes
        EOR     R6, R6, R0, LSL #16     ; if match, then must be < 1:SHL:16
        CMP     R6, #(1 :SHL: 16)
        BCS     %BT70                   ; no match, so loop

; found mnemonic match

        AND     R0, R6, #&03            ; R0 = number of digits to print
        AND     R4, R6, #&FC            ; R4 = stack offset
        LDR     R4, [R13, R4]           ; R4 = data item
        MOV     R6, R6, LSR #8          ; R6 = code offset in words
CDATBranch
        ADD     PC, PC, R6, LSL #2      ; go to routine

CDATEscTab
        CDATT   DY, 0
        CDATT   ST, 0
        CDATT   MN, 1
        CDATT   MO, 1
        CDATT   M3, 1
        CDATT   WK, 2
        CDATT   DN, 3, 3
        CDATT   WN, 4, 1
        CDATT   W3, 4, 1
        CDATT   WE, 4, 1
        CDATT   CE, 5
        CDATT   YR, 6
        CDATT   24, 7
        CDATT   12, 7
        CDATT   AM, 7
        CDATT   PM, 7
        CDATT   MI, 8
        CDATT   CS, 9
        CDATT   SE, 10
CDATEscTabEnd

; routine to print R0 digits of the number held in R4,
; R7=0 <=> suppress leading zeroes

CDATDY
CDATMN
CDATWK
CDATDN
CDATWN
CDATCE
CDATYR
CDAT24
CDATMI
CDATCS
CDATSE
CDATDecR4 ROUT
        ADD     R2, R2, #1              ; undo initial subtract
        ADR     R6, PowersOfTen
10
        MOV     R5, #0
        TEQ     R0, #1                  ; if on last digit
        MOVEQ   R7, #1                  ; definitely don't suppress
20
        LDRB    R8, [R6, R0]            ; get power of ten to subtract
        SUBS    R4, R4, R8              ; subtract value
        ADDCS   R5, R5, #1
        BCS     %BT20
        ADD     R4, R4, R8              ; undo failed subract

        ORRS    R7, R7, R5              ; Z => suppress it
        BEQ     %FT30                   ; [suppressing]

        ORR     R5, R5, #"0"            ; convert to ASCII digit
        SUBS    R2, R2, #1              ; one less space in buffer
        BCC     CDATBufferError
        STRB    R5, [R1], #1            ; store character
30
        SUBS    R0, R0, #1              ; next digit
        BNE     %BT10                   ; [another digit to do]
        B       CDATMainLoop

PowersOfTen
        =       0, 1, 10, 100
        ALIGN

; Hours in 12 hour format

CDAT12
        CMP     R4, #12                 ; if in range 12..23
        SUBCS   R4, R4, #12             ; then make in range 00..11
        TEQ     R4, #0                  ; if 00
        MOVEQ   R4, #12                 ; then make 12
        B       CDATDecR4

; AM or PM indication

CDATAM
CDATPM
        CMP     R4, #12                 ; if earlier than 12 o'clock
        ADRCC   R4, CDATamstr           ; then am
        ADRCS   R4, CDATpmstr           ; else pm
CDATdostr
        LDRB    R0, [R4], #1            ; get byte from string
        TEQ     R0, #0                  ; if zero, then end of string
        BEQ     CDATMainLoop            ; so loop
CDATdostrloop
        STRB    R0, [R1], #1            ; we know there's room for one char
CDATdostr2
        LDRB    R0, [R4], #1            ; get byte from string
        TEQ     R0, #0                  ; if zero, then end of string
        BEQ     CDATMainLoop            ; so loop
        SUBS    R2, R2, #1              ; dec R2 for next char
        BCS     CDATdostrloop           ; OK to do another char
        B       CDATBufferError         ; ran out of buffer space

CDATST
        TEQ     R4, #1
        TEQNE   R4, #21
        TEQNE   R4, #31
        ADREQ   R4, CDATststr
        BEQ     CDATdostr
        TEQ     R4, #2
        TEQNE   R4, #22
        ADREQ   R4, CDATndstr
        BEQ     CDATdostr
        TEQ     R4, #3
        TEQNE   R4, #23
        ADREQ   R4, CDATrdstr
        ADRNE   R4, CDATthstr
        B       CDATdostr

CDATW3
        ADRL    R0, DayNameTable-4      ; Sun is 1
        B       CDATdo3
CDATM3
        ADRL    R0, MonthNameTable-4    ; Jan is month 1
CDATdo3
        ADD     R4, R0, R4, LSL #2      ; point to short month name
        LDRB    R0, [R4], #1            ; get 1st char of month
        BIC     R0, R0, #&20            ; upper case
        STRB    R0, [R1], #1            ; and store
        B       CDATdostr2              ; then do rest

CDATWE
        ADD     R4, R4, #12             ; skip months
CDATMO
        ADR     R0, LongMonthTable-1    ; Jan is month 1
        LDRB    R4, [R0, R4]            ; get offset to month string
        ADD     R4, R0, R4              ; point to start of string
        B       CDATdostr

CDATamstr
        =       "am", 0
CDATpmstr
        =       "pm", 0
CDATststr
        =       "st", 0
CDATndstr
        =       "nd", 0
CDATrdstr
        =       "rd", 0
CDATthstr
        =       "th", 0

LongMonthTable
        =       LongJan-(LongMonthTable-1)
        =       LongFeb-(LongMonthTable-1)
        =       LongMar-(LongMonthTable-1)
        =       LongApr-(LongMonthTable-1)
        =       LongMay-(LongMonthTable-1)
        =       LongJun-(LongMonthTable-1)
        =       LongJul-(LongMonthTable-1)
        =       LongAug-(LongMonthTable-1)
        =       LongSep-(LongMonthTable-1)
        =       LongOct-(LongMonthTable-1)
        =       LongNov-(LongMonthTable-1)
        =       LongDec-(LongMonthTable-1)
        =       LongSun-(LongMonthTable-1)
        =       LongMon-(LongMonthTable-1)
        =       LongTue-(LongMonthTable-1)
        =       LongWed-(LongMonthTable-1)
        =       LongThu-(LongMonthTable-1)
        =       LongFri-(LongMonthTable-1)
        =       LongSat-(LongMonthTable-1)

LongJan =       "January", 0
LongFeb =       "February", 0
LongMar =       "March", 0
LongApr =       "April", 0
LongMay =       "May", 0
LongJun =       "June", 0
LongJul =       "July", 0
LongAug =       "August", 0
LongSep =       "September", 0
LongOct =       "October", 0
LongNov =       "November", 0
LongDec =       "December", 0
LongSun =       "Sunday", 0
LongMon =       "Monday", 0
LongTue =       "Tuesday", 0
LongWed =       "Wednesday", 0
LongThu =       "Thursday", 0
LongFri =       "Friday", 0
LongSat =       "Saturday", 0

        ALIGN
      ]
        LTORG

        END
