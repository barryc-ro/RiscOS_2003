/* >c.Modem

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    21 Apr 97       BAR     Initial writing
1.01    08 May 97       BAR     Now logs its status

Will perform a modem test 
*/

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "Modem.h"
#include "display.h"
#include "support.h"
#include "Msgs.h"


 /* 
 send an ATZ                     (reset)
 wait for OK
 
 do rom checksum, use ATI2 ... does and compares checksum :  OK or ERROR
 
 send ATH1                       (On Line / Off Hook)
 wait for ok
 send ATH0                       (Off Line / On Hook)
 wait for ok
 */


/*
 * buffer handles
 */
static int  iInputBuffer1, iOutputBuffer1;
static int  iSpeed = 38400;
static int  iStatus = 258;
static int  iCarrierSpeed = 28800;
static char strFormat[] = "n.1.8";
static int  swi_error = 0;

static char *psd[] = {"n.1.8","n.1.7","n.1.6","n.1.5","n.2.8","n.2.7",
       	    	         "n.2.6","n.1.5.5","o.1.8","o.1.7","o.1.6","o.1.5",
       	    	         "o.1.8","o.2.7","o.2.6","o.2.5","n.1.8","n.1.7",
       	    	         "n.1.6","n.1.5","n.2.8","n.2.7","n.2.6","n.1.5.5",
       	    	         "e.1.8","e.1.7","e.1.6","e.1.5","e.1.8","e.2.7",
       	    	         "e.2.6","e.2.5","n.1.8","n.1.7","n.1.6","n.1.5",
       	    	         "n.2.8","n.2.7","n.2.6","n.1.5.5","1.1.8","1.1.7",
                         "1.1.6","1.1.5","1.1.8","1.2.7","1.2.6","1.2.5",
                         "n.1.8","n.1.7","n.1.6","n.1.5","n.2.8","n.2.7",
                         "n.2.6","n.2.5","0.1.8","0.1.7","0.1.6","0.1.5",
                         "0.1.8","0.2.7","0.2.6","0.2.5"};

static int baud_rate[] = {9600,75,150,300,1200,2400,4800,9600,19200,50,110,134,
       	   		   600,1800,3600,7200,38400,57600,115200};

void Modem_Test(int test_mode)
{
        int status=FALSE;

        display_status(MODEM,RUNNING);

        status=initialise_serial();
        if (status==TRUE){
                /* initilised the serial comms to modem  */
                status=modem_checksum();
                if ((status==TRUE) && (test_mode==MODE_USER)){
                        /* do the connection subtest */
                        status=line_ok();
                }
        }
        display_status(MODEM,status);
        log_status(MODEM,status);
}

int modem_checksum()
/* Check the modem Checksum is ok.
 */
{
        int flagTestOK = FALSE;
        int rtn = FAILED;
        
        flush_buffer(iInputBuffer1);
        transmit(iOutputBuffer1,"ATZ",CR);
        flagTestOK = wait_for_ok(TIMEOUT,flagTestOK,iInputBuffer1);
        if (flagTestOK==TRUE){
                /* reset ok ... ask to check its checksum */
                flush_buffer(iInputBuffer1);
                /* Ask modem to cal. checksum and rtn OK or ERROR */
                transmit(iOutputBuffer1,"ATI2",CR);
                modem_wait(100);
                flagTestOK = wait_for_ok(TIMEOUT,flagTestOK,iInputBuffer1);
                if (flagTestOK==TRUE){
                        rtn=PASSED;
                }else{
                        rtn=FAILED;
                }
        }else{
                /* failed to reset ... fail it */
                rtn=FAILED;
        }
        display_sub_test_status(MODEMROMCHECK,rtn);
        return rtn;
}

int line_ok()
/* Check that we can hear the dial tone 
 */
{
        int flagTestOK = FALSE;
        int rtn=FAILED;
        int online=FAILED;
        int offline=FAILED;

        transmit(iOutputBuffer1,"ATH1",CR);
        flagTestOK = wait_for_ok_or_nodialtone(TIMEOUT,flagTestOK,iInputBuffer1);
        if (flagTestOK==TRUE){
                online=PASSED;
        }else{
                online=FAILED;
        }
        /* OFF LINE TEST */
        transmit(iOutputBuffer1,"ATH0",CR);
        flagTestOK = wait_for_ok(TIMEOUT,flagTestOK,iInputBuffer1);
        if (flagTestOK==TRUE){
                offline=PASSED;
        }else{
                offline=FAILED;
        }
        if ((online==PASSED) && (offline==PASSED)){
                rtn=PASSED;
        }else{
                rtn=FAILED;
        }
        display_sub_test_status(MODEMLINECHECK,rtn);
        return rtn;
}

int
wait_for_ok_or_nodialtone(int iTimeLimit, int flagTestOK, int iCmdBuf)
{
        t_timer timer;      	  /* timeout timer */
        int flagTimedOut = FALSE;
        int abort=FALSE;
        int rtn=FALSE;

        /* wait for OK or No Dail Tone Or to time out, latter to rtn false else rtn true. */
        timer_reset(&timer);
        while ((flagTimedOut != TRUE) && (abort==FALSE)){
                /* while we're waiting ... check in buffer */
                if (receive_command(iCmdBuf)==ok) {
                        /* we got an OK response */
                        rtn=TRUE;
                        abort=TRUE;
                }
                if (receive_command(iCmdBuf)==no_dialtone){
                        /* we got a no dial tone response */
                        rtn=FALSE;
                        abort=TRUE;
                        debug display_info(modem_test_msg[01]);
                }
        }
        if (flagTimedOut == TRUE){
                /* we timed out ... */
                rtn=FALSE;
        }
        return rtn;
}

/*
 * clear everything out of the given buffer
 */
void
flush_buffer(int iBuffer)
{
  _kernel_swi_regs reg;

  while (examine_buffer(iBuffer)==0)
  {
    reg.r[0] = 21;                      /* flush buffer */
    reg.r[1] = iBuffer;
    _kernel_swi(OS_Byte, &reg, &reg);
    modem_wait(10);
  }
}

/*
 * insert characters in the serial output buffer followed by a newline
 * character.
 */
void
transmit(int iBuffer, char *strCommand, char chTerminate)
{
  if (strCommand!=NULL)
  {
    //printf("tx:'%s'\n",strCommand);
    while (*strCommand != NULL)
    {
      if (!put_char(iBuffer,*strCommand++)) return;   /* exit if problem */
    }
    if (chTerminate != 0) put_char(iBuffer,chTerminate);
  }
}

/*
 * Wait for the modem to say OK
 * iTimeLimit    Time limit to wait for
 * y             Line to use for reporting error on
 * iCmdBuf       Buffer to look for retned commands
 * flagTestOK    Indicates current status of test; passed in order to preserve, if needed.
 */

int
wait_for_ok(int iTimeLimit, int flagTestOK, int iCmdBuf)
{
        t_timer timer;      	  /* timeout timer */
        int flagTimedOut = FALSE;

        /* wait for OK */
        timer_reset(&timer);
        while ((receive_command(iCmdBuf)!=ok) && (flagTimedOut != TRUE)){
                if (timer_read(&timer)>iTimeLimit){
                        /* Timed out */
                        flagTestOK = FALSE;
                        flagTimedOut = TRUE;
                        debug display_info(modem_test_msg[00]);
                }
        }
        return flagTestOK;
}

/*
 * returns the current timer setting in centiseconds
 */
long
timer_read ( t_timer *the_timer)
{
  _kernel_swi_regs reg;

  _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
  return (long) reg.r[0] -  *the_timer;
}

/*
 * resets the given timer.
 */
void
timer_reset ( t_timer *the_timer )
{
        _kernel_swi_regs reg;
      
        _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
        *the_timer = (long) reg.r[0];
}

/*
 * compare two strings caselessly
 */
int caseless_strcmp(char *a, char *b, int len)
{
        int d;
        while ( (*a || *b) && len)
        {
                d = toupper( *(a++) ) - toupper( *(b++) );
                if (d) return d;
                len--;
        }
        return 0;
}

/*
 * return state of c flag, 1 = buffer empty, 0 = bytes present.
 */
int
examine_buffer(int iBuffer)
{
  int iCarry;
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  reg.r[0] = 152;                     /* Examine buffer state */
  reg.r[1] = iBuffer;
  err = _kernel_swi_c(OS_Byte, &reg, &reg, &iCarry);
  if (err)
    return (1);

  return (iCarry);
}

/*
 * get a terminated string from an input buffer, returns 1 if string read,
 * 0 if timeout.
 */
int
get_modem_response(int iBuffer, char *strBuffer, int size)
{
  t_timer timer;      	  /* timeout timer */
  int i=0;
  int ch;

  timer_reset(&timer);
  do
  {
    ch = get_char(iBuffer);

    if (ch>-1)
      if (ch!=10 && ch !=13) strBuffer[i++] = (char)ch;

    strBuffer[i] = 0;
    if (timer_read(&timer) > TIMEOUT)
      return (0);

  } while (ch!=10 && ch!=13 && i<size);

  return (i?1:0);
}


/*
 * check for any data in the input buffer, if data present, extract it.
 */
t_modem_resp
receive_command(int iBuffer)
{
  char strBuffer[BUFFER_SIZE];
  int iThisCarrierSpeed;

  if (!examine_buffer(iBuffer))   /* Examine input buffer */
  {
    if (get_modem_response(iBuffer,strBuffer,sizeof(strBuffer)))
    {
      if (caseless_strcmp(strBuffer,"connect",7) ==0)
      {
        debug printf("RX Cmd '%s'\n",strBuffer);
        return (connect);
      }
      else if (caseless_strcmp(strBuffer,"protocol",8) == 0)
      {
        debug printf("RX Cmd '%s'\n",strBuffer);
        if (caseless_strcmp(strBuffer+strlen("protocol: "),"none",4) == 0)
          return (protocol_err);
        else if (caseless_strcmp(strBuffer+strlen("protocol: "),"lap-m",5) == 0)
          return (protocol_lapm);
        else if (caseless_strcmp(strBuffer+strlen("protocol: "),"alt",4) == 0)
          return (protocol_alt);
        else
          return (protocol_err);
      }
      else if (caseless_strcmp(strBuffer,"carrier",7) == 0)
      {
        debug printf("RX Cmd '%s'\n",strBuffer);
        iThisCarrierSpeed = atoi(strBuffer + strlen("carrier "));
        if (iThisCarrierSpeed < iCarrierSpeed)
          return (carrier_slow);
        else
          return (carrier_ok);
      }
      else if (caseless_strcmp(strBuffer,"no carrier",10) == 0)
        return (no_carrier);
      else if (caseless_strcmp(strBuffer,"no answer",9) == 0)
        return (no_answer);
      else if (caseless_strcmp(strBuffer,"no dialtone",10) == 0)
        return (no_dialtone);
      else if (caseless_strcmp(strBuffer,"busy",4) == 0)
        return (busy);
      else if (caseless_strcmp(strBuffer,"ring",4) == 0)
        return (ring);
      else if (caseless_strcmp(strBuffer,"ok",2) == 0)
        return (ok);
      else if (strcmp(strBuffer,TRANSFER0) == 0)
	return (transferred);
      else if (caseless_strcmp(strBuffer,"at",2) == 0) /* ignore echos */
      {
        debug printf("RX Cmd at:'%s'\n",strBuffer);
      }
      else
      {
        debug printf("RX Cmd rx:'%s'\n",strBuffer);
      }
    }
  }
  return (nothing);
}


/*
 * place given buffer in output buffer and perform timeout checks.
 * Return TRUE if success, FALSE otherwise.
 */
int
put_char(int iBuffer, char ch)
{
  _kernel_swi_regs reg;
  int     iCarry;                /* carry flag returned from SWI */
  t_timer out_timer;      	  /* timeout timer for output buffer */

  timer_reset(&out_timer);

  reg.r[0] = 138;                 /* Insert byte into buffer */
  reg.r[1] = iBuffer;
  reg.r[2] = (int)ch;
  do
  {
    _kernel_swi_c(OS_Byte, &reg, &reg, &iCarry);
    if (iCarry == 1 && timer_read(&out_timer) >= TIMEOUT)
      return (FALSE);
  } while (iCarry == 1);

  return (TRUE);
}

/*
 * remove character from input buffer, character if one present, -1 otherwise
 */
int
get_char(int iBuffer)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  int iCarry;

  reg.r[0] = 145;                      /* Get byte from buffer */
  reg.r[1] = iBuffer;
  err = _kernel_swi_c(OS_Byte, &reg, &reg, &iCarry);
  if (err != NULL)
  {
    error_generate(err);
    return (-1);
  }
  if (iCarry == 0)
    return (reg.r[2]);

  return (-1);
}

/* 
 * waits for given number of centiseconds
 */
void modem_wait(long time)
{
        t_timer timer;

        if (time>0){
                timer_reset(&timer);
                while (timer_read(&timer) < time) ;
        }
}


/*
 * set up default baud rates, handshaking etc and initialise the internal
 * serial port, modem card 0 and modem card 1
 */
int
initialise_serial(void)
{

        _kernel_oserror *err = NULL;
        _kernel_swi_regs reg;
        int iInitSerialOK = TRUE;

        /* Setup the internal serial port */
        err = _kernel_swi(UART0_GetBufferHandles, &reg, &reg);
        if (err !=0)
        {
                return ERROR_INIT_SERIAL_BUFFERS;
        }
        iInputBuffer1 = reg.r[0];
        iOutputBuffer1= reg.r[1];
              
        reg.r[0] = RxBaud;
        reg.r[1] = conv_baud_serialop(iSpeed);
        err = _kernel_swi(UART0_SerialOp, &reg, &reg);
        if (err !=0)
        {
                return ERROR_INIT_SERIAL_RXSPEED;
        }
      
        reg.r[0] = TxBaud;
        reg.r[1] = conv_baud_serialop(iSpeed);
        err = _kernel_swi(UART0_SerialOp, &reg, &reg);
        if (err !=0)
        {
                return ERROR_INIT_SERIAL_TXSPEED;
        }

        reg.r[0] = SerialStatus;
        reg.r[1] = iStatus;
        reg.r[2] = 0;
        err = _kernel_swi(UART0_SerialOp, &reg, &reg);
        if (err !=0)
        {
                return ERROR_INIT_SERIAL_STATUS;
        }
      
        reg.r[0] = DataFormat;
        reg.r[1] = conv_psd_serialop(strFormat);
        err = _kernel_swi(UART0_SerialOp, &reg, &reg);
        if (err !=0)
        {
                return ERROR_INIT_SERIAL_DATA;
        }
        return iInitSerialOK;
}

/*
 * convert a numeric baud rate value to a OS_SerialOp index
 */
int
conv_baud_serialop(int baud)
{
  int i=0;

  while (i<MAX_BAUD)
  {
    if (baud_rate[i]==baud) return (i);
    i++;
  }

  return (0);
}


/*
 * convert the data format string expressed as <p.s.d> to the lowest
 * OS_SerialOp 1 representation. Return -1 if unsuccessful.
 */
int
conv_psd_serialop (char *formatstr)
{
  int i = 0;
  int serialopval = -1;           /* -1 is "illegal string" */

  do
  {
    if (strcmp(psd[i], formatstr) == 0 ) serialopval = i;
    i++;
  } while ( (i < 64) && (serialopval == -1) );

  return (serialopval);
}


/*
 * capture unknown error message
 */
void
error_generate(_kernel_oserror *err)
{
        /* if debug available then show error on screen */
        debug printf("ERROR %s (0x%x)\n",err->errmess,err->errnum);
        swi_error=ERROR_GET_CHAR_SWI_FAILED;
}
