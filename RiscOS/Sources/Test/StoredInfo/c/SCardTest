/* >c.SCardTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    17 Apr 97       BAR     Initial writing
1.01    08 May 97       BAR     Remove un-neccessary check of err, don't use
                                make_error_numb func. Only ask for smart
                                card when in user mode. Func. 
                                smartcard_test now passed test_mode.
                                Ensure cursors are restored after removing
                                them.
1.02    16 May 97       BAR     Fix smart card test, switch usermode on at
                                start to ensure card can be 'seen' when
                                inserted add wait for card to be reported as
                                ok once inserted. Change error number base
                                references to pinpoint which SWI call
                                failed.

Will perform the Smart Card Test
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "SCardTest.h"
#include "display.h"
#include "support.h"
#include "usermode.h"
#include "scinter.h"
#include "Msgs.h"

#define BOOL unsigned int
/* BCD_END is any character with a binary value > 9 */
/* bear this in mind for non ASCII character values */
/* this marks the current end of the shift register */
#define BCD_END '#'

/*
 * wait until the SCInterface module is not busy or an error has occurred
 * do a twiddler whilst waiting for completion
 */
static int
_check_interface_status(void)
{
        _kernel_swi_regs reg;
        int status;
        int error;

        _kernel_swi(OS_RemoveCursors,&reg,&reg);
        do
        {
                _kernel_swi(SCInterface_Status, &reg, &reg);
                status = reg.r[0];
                error = reg.r[1];

                if (status==StatusError)
                      /* abandon the loop */
                      break;
                /* Ensure that the call backs get set off */
                usermode_donothing();
        } while (status==StatusBusy);
        _kernel_swi(OS_RestoreCursors,&reg,&reg);
        return (status==StatusError)?error:0;
}

/* this reverses The working register and converts BCD to ASCII */
static void conv_bcd(unsigned char *string, unsigned int out_len)
{
        unsigned int i;
        unsigned int n = 0;
        unsigned char c_tmp;

        /* get length of register and convert to ASCII */
        /* we add '0' - so beware on non ASCII systems */
        while (string[n] != BCD_END)
                string[n++] += '0';

        /* reverse bytes */
        for (i = 0; i < n / 2; i++)
        {
                c_tmp = string[i];
                string[i] = string[n - i - 1];
                string[n - i - 1] = c_tmp;
        }

        for (i = 0; i < n; i++)
                string[out_len - i - 1] = string[n - i - 1];

        while (i < out_len)
                string[out_len - i++ - 1] = '0';

        /* NULL terminate at end */
        string[out_len] = '\0';
}

/* BCD multiply the shift register by 2 */
static void mult_2(unsigned char *bcd)
{
        unsigned char carry = 0;

        while (*bcd != BCD_END)
        {
                /* multiply first BCD digit by 2 and add any previous carry */
                if ((*bcd = *bcd * 2 + carry) > 9)
                {
                        /* overflow - so set carry */
                        *bcd -= 10;
                        carry = 1;
                }
                else
                        carry = FALSE;

                /* advance to next digit */
                bcd++;
        }

        /* any residual carry increases register length */
        if (carry)
        {
                *bcd++ = 1;
                *bcd = BCD_END;
        }
}

/* Increment BCD shift register by 1 */
static void add_1(unsigned char *bcd)
{
        while (TRUE)
        {
                /* if we get to the end it must be a carry */
                /* or the first time we've needed to add 1 */
                if (*bcd == BCD_END)
                {
                        *bcd++ = 1;
                        *bcd = BCD_END;
                        break;
                }
                else if ((*bcd += 1) < 10)
                        break; /* finished */
                else
                        *bcd++ -= 10; /* carry one to next digit */
        }
}

void smartcard_test(int test_mode)
{
        int status = FAILED;
	_kernel_oserror *err = NULL;
	int rtn_code;
        unsigned char buffer[16];
        char out_buff[16];

        display_status(SMARTCARD,RUNNING);
        if (test_mode==MODE_USER){
                display_info(scard_test_msg[00]);
                wait_for_cont();
                clear_info();
        }

        usermode_donothing();
        do{
                status=_check_interface_status();
                /* Wait for smart card to be seen */
        }while (status!=SC_SUCCESS);

        if (status==SC_SUCCESS){
                /* Looks like we've seen the smart card */
                err = _swix( SCInterface_Read, _INR(0,6)|_OUT(0),1,(int)SERIAL_FILENAME,0,(int)buffer,8,(int)NULL,0, &rtn_code);

                if (rtn_code==SC_SUCCESS){
                        /* We got a 'success' code
                         * now wait for completion
                         */
                        if ((status=_check_interface_status())!=0){
/*                              printf("\nError number 0x%x\n",scard_status); */
                                /* we got some morm of error, convert to one of my error codes */
                                status=BAD_SCardTest_Base3 | status;
                        }else{
                                /*
                                 * display on screen
                                 */
                                btos(buffer, 8, out_buff, sizeof(out_buff));
                                display_sub_test(SCARDSERIAL,out_buff);
/*                              printf("\nOutput string : %s\n",out_buff);    */
                                status=PASSED;
                        }
                }else{
                        /* we didn't get a success code */
                        /* return code given, make an error number to match */
                        /* number of form 0x1xx Where xx is the return code */
                        /* given by the smart card SFS. */
                        status=BAD_SCardTest_Base2 | rtn_code;
                }
        }else{
                status=BAD_SCardTest_Base1 | status;
        }        
        display_status(SMARTCARD,status);
        log_status(SMARTCARD,status);
}

/* actual API call */
void btos(unsigned char *bits, unsigned int bytes, char *string,
                                        unsigned int out_len)
{
  unsigned int i, j;
  BOOL found_1 = FALSE;
  unsigned char curr_byte;
  unsigned char mask;

  /* place END sentinel at start of string */
  string[0] = BCD_END;

  for (i = 0; i < bytes; i++)
  {
    /* take bytes, highest first */
    curr_byte = bits[i];

    for (j = 0, mask = 0x80; j < 8; j++, mask /= 2)
    {
      /* after the first binary 1, we BCD *2 each time */
      if (found_1)
        mult_2((unsigned char *)string);

      /* take bits, highest first and check */
      /* if the current bit is 1, add 1 to register */
      if (curr_byte & mask)
      {
        add_1((unsigned char *)string);
        found_1 = TRUE;
      }
    }
  }

  /* post-process string */
  conv_bcd((unsigned char *)string, out_len);
}
