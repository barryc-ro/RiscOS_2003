/* >c.FaultCodes

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    25 Mar 97       BAR     Initial writing
1.01    01 May 97       BAR     Add check for value of numbers returned from
                                NVRAM_Read SWI. If not >=0 then it is an
                                error. Change code segmwnt to use CODEERROR
                                as the tag to look up a new message string
                                indicating that there was a problem.

Will read the logged fault codes and display them.
*/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "FaultCodes.h"
#include "display.h"
#include "support.h"
#include "storedinfo.h"
#include "nvram.h"


void FaultCodes(void)
{
        char str[80];
        int cnt;
        int index;
        int stop;
        time_t wclock;
        int onclock;
        float onclockhrs;
        time_t sec1970;
        time_t sec_this_year = 0;
        int code=CODE1;
        int err_no=0;
	_kernel_oserror *err = NULL;

        int fc_state=FAILED;
        int wc_state=FAILED;
        int oc_state=FAILED;

        display_status(LOGGEDCODES,RUNNING);
        /* get the fault codes index*/
        err = _swix( NVRAM_Read, _IN(0)|_IN(1)|_IN(2),"FaultCodeIndex",&index, 0);
        if ((err==NULL) && (index >=0)){
                /* swi call was ok */
                /* get the fault codes */
                /* Declare a few more variables - saves on space like this :-) */
        	fault_code *pw = storedinfo_faultsbuffer;
        	int size;
                
                err = _swix( NVRAM_Read, _IN(0)|_IN(1)|_IN(2)|_OUT(0),"FaultCodes", pw , STOREDINFO_FAULTS_SIZE, &size);
                if ((err==NULL) && (size==256)){
                        /* swi call was ok */
                        /* Process the fault codes */
                        
                        if (index !=0){
                                stop=index;
                        }else{
                                stop=4;
                        }
                        cnt=index;
                        do{
                                if (cnt>=4){
                                        cnt=0;
                                }
                                if (pw[cnt].text[0]==0){
                                        sprintf(str,"%08X No Text",pw[cnt].code);
                                }else{
                                        sprintf(str,"%08X %c%c%c%c",pw[cnt].code,pw[cnt].text[0],pw[cnt].text[1],pw[cnt].text[2],pw[cnt].text[3]);
                                }
                                display_sub_test(code,str);
                                code++;
                                cnt++;
                        }while(cnt!=stop);
                        fc_state=PASSED;
                }else{
                        err_no=BAD_NVRAM_READ_CODES+select_err_no(size);
                        display_sub_test_status(CODEERROR,err_no);
                        fc_state=FAILED;
                }
                        
        }else{
                err_no=BAD_NVRAM_READ_INDEX+select_err_no(index);
                display_sub_test_status(CODEERROR,err_no);
                fc_state=FAILED;
        }

        /* get the warranty clock from NV-RAM */
        err = _swix( NVRAM_Read, _IN(0)|_IN(1)|_IN(2),"WarrantyClock",&wclock, 0);
        if ((err==NULL) && (wclock>=0)){
        	time_t sec_to_day;

                /* swi call was ok */
                /* get the warranty clock information */
                /* This is the number of Days since 1 jan 1997. */
                /* Multiply by 86400 (secs per day). */
                /* Add this to number of secs since 01 Jan 1970 */
                /* Convert to 'real' time */
                sec_this_year = wclock*86400;
                sec1970 = storedinfo_secsto1997();
                sec_to_day = sec1970+sec_this_year;
                display_sub_test(WARRANTY,ctime(&sec_to_day));
                wc_state=PASSED;
        }else{
                err_no=BAD_NVRAM_READ_WARRANTY+select_err_no(wclock);
                display_sub_test_status(WARRANTY,err_no);
                wc_state=FAILED;
        }

        /* get the hours on  from NV-RAM */
        err = _swix( NVRAM_Read, _IN(0)|_IN(1)|_IN(2),"MinutesInOperation",&onclock, 0);
        if ((err==NULL) && (onclock>=0)){
                /* swi call was ok */
                /* We cot the numner of minuites the unit has been on ! */
                /* divide by 60 to get the hours  */
                onclockhrs=(float)onclock/60;
                sprintf(str,"%6.1f",onclockhrs);
                display_sub_test(ONTIME,str);
                oc_state=PASSED;
        }else{
                err_no=BAD_NVRAM_READ_ONCLOCK+select_err_no(onclock);
                display_sub_test_status(ONTIME,err_no);
                oc_state=FAILED;
        }

        /* Thsts it, check overall status and disply */
        if ((fc_state==PASSED) && (wc_state==PASSED) && (oc_state==PASSED)){
                display_status(LOGGEDCODES,COMPLETED);
                log_status(LOGGEDCODES,PASSED);
        }else{
                display_status(LOGGEDCODES,FAILED);
                log_status(LOGGEDCODES,FAILED);
        }
}

int select_err_no(int look_up)
/* use look_up to look up a suitable error code to be given to the user.
   These are the values that could be retuned by the NVRAM_Read SWI call.
 */
{
        int rtn;
        switch(look_up){
                case -1:
                        rtn=BAD_NVRAM_READ_NEG1;
                        break;
                case -2:
                        rtn=BAD_NVRAM_READ_NEG2;
                        break;
                case -3:
                        rtn=BAD_NVRAM_READ_NEG3;
                        break;
                case -4:
                        rtn=BAD_NVRAM_READ_NEG4;
                        break;
                default:
                        rtn=BAD_NVRAM_READ_UNK;
                        break;
        }
        return rtn;
}
