/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "storedinfo.h"
#include "UserDiag.h"
#include "Support.h"


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	storedinfo_finalise( pw );
	
	return NULL;
	
	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
	return storedinfo_initialise( pw );
	
	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	switch ( cmd_no )
	{
		case 0:
			user_diag_test( MODE_USER );
			break;

		case 1:
			user_diag_test( MODE_LIFE );
			break;
	}

	return NULL;

	NOT_USED( arg_string );
	NOT_USED( argc );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
	switch ( service_no )
	{
		case Service_Standby:
			storedinfo_standby( r, pw );
			break;

		case Service_ErrorStarting:
			storedinfo_errorstarting( r );
			break;
	}
}
