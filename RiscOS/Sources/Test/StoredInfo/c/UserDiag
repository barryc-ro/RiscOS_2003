/* >c.UserDiag

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    18 Apr 97       BAR     Initial writing
1.01    28 Apr 97       BAR     Added code to show the Licence information.
1.02    02 May 97       BAR     Added VDU 4 to enable text cursor.
1.03    08 May 97       BAR     Initilise the display line variables.
                                Only do licence info in user mode.
                                Wait 10 secs at end of test - life only
1.04    16 May 97       BAR     Restore DRAM Test
1.05    20 May 97       BAR     Add call to define block_char.
1.06    21 May 97       BAR     Ensure licence text is in 'text' colour.

Will perform the user diagnostic testing !!!
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "UserDiag.h"
#include "display.h"
#include "support.h"
#include "ROMCheck.h"
#include "DRAMTest.h"
#include "NVRAMTest.h"
#include "FaultCodes.h"
#include "system.h"
#include "Modem.h"
#include "InputTest.h"
#include "Sound.h"
#include "SCardTest.h"
#include "msgs.h"


void user_diag_test(int test_mode)
/* Do the user diagnostic test !! */
/* test_mode tells us we are either USER ot LIFE */
{
        int cycle_count=0;
        int cycle_limit=0;
        int failed_count=0;
        int red_led_state;
        int green_led_state;
        int overall_status=FAILED;

        /* Humm lets do some intiliseation */
        /* Do a VDU 5 to enable the graphics cursor */
        _kernel_oswrch(5);
        define_block_char();

        set_forground_colour(COLOUR_TEXT);
        set_background_colour(COLOUR_BLACK);
        clear_whole_screen();

        /* note the led status for restoring to at the end */
        red_led_state=get_led_state(LED_RED);
        green_led_state=get_led_state(LED_GREEN);
        display_status_led(test_mode,RUNNING);

        if (test_mode==MODE_USER){
                /* user mode set cycle_limit */
                cycle_limit=1;
                /* Display licence information */
                show_licence_info();
        }

        display_mode(test_mode);
        clear_res_store(0,test_mode);

        do{
                cycle_count++;
                if  (test_mode==MODE_LIFE){
                        /* Life mode - show counter */
                        display_cycle_count(cycle_count,failed_count);
                        clear_output();
                }
                reset_display_line_vars();
                ROM_Checksum();
                dram_test(test_mode);
                nv_ram_checksum();
                FaultCodes();
                system_test();
                Modem_Test(test_mode);
                Input_Test(test_mode);
                sound_test(test_mode);
                smartcard_test(test_mode);

                failed_count=check_logged_status(failed_count,cycle_count);
                clear_res_store(cycle_count,test_mode);
                if  (test_mode==MODE_LIFE){
                        /* Wait 10 secs just for the hell of it */
                        wait(10);
                }

        }while (cycle_count!=cycle_limit);

        /* We'll only ever get here if in user mode ! */
        if (failed_count==0){
                overall_status=PASSED;
        }
        /* Set the LED's to reflect the status */
        display_status_led(test_mode,overall_status);

        /* wait for the user to respond */
        wait_for_cont();

        /* restore the led status */
        set_led_state(LED_RED,red_led_state);
        set_led_state(LED_GREEN,green_led_state);

        /* time to exit */
        exit_routines();
}

void exit_routines()
/* Necessary routines needed to exit nicely */
{
        _kernel_swi_regs reg;

        /* Restore default colours */
        _kernel_oswrch(20);

        /* Restore default character set */
        _kernel_osbyte(25,0,0);

        /* Force a screen re-draw */
        reg.r[0] = -1;
        reg.r[1] = 0;
        reg.r[2] = 0;
        reg.r[3] = 2400;
        reg.r[4] = 3200;
        _kernel_swi(Wimp_ForceRedraw, &reg, &reg);
}

void show_licence_info(void)
/* Show to the user the licence information */
{
        int i;

        set_forground_colour(COLOUR_TEXT);
        /* Show the licence info in two chunks. */
        for (i=0; i<=MAX_LICENCE_MSG1; i++){
                printf("%s\n",licence_info_msg[i]);
        }
        wait_for_cont();
        clear_whole_screen();

        set_forground_colour(COLOUR_TEXT);
        for (i=MAX_LICENCE_MSG1+1; i<=MAX_LICENCE_MSG2; i++){
                printf("%s\n",licence_info_msg[i]);
        }
        wait_for_cont();
        clear_whole_screen();
}

void reset_display_line_vars(void)
/* (Re)Set the display line variables */
{
        test_status_line=1;
        subtest_status_line=0;
        info_line=INFO_START;
        instruct_line=0;
}
