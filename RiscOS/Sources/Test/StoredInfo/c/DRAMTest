/* >c.DRAMTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    03 Apr 97       BAR     Initial writing
1.01    16 May 97       BAR     Change print out to display address in 8
                                digits caps hex. DRAM Size in decimal.
                                Number of failures 6 caps hex.
1.02    20 May 97       BAR     Reinstate True & False Hier. tests.
1.03    21 May 97       BAR     Set colour to 'text' when showing info
                                messages. Add a check to see if the upper
                                limit is larger than the lower limit and
                                that they are different !
1.04    05 Jun 97       BAR     Updated to use 'SAFE' screen cordinates.
1.05    17 Jun 97       BAR     Updated to claim the memory to be tested and
                                to free said memory.
1.06    23 Jun 97       BAR     Fix bug when claiming memory - didn't pass
                                pointer to area name in the correct
                                register.

Will perform the DRAM Test !!????
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "dramtest.h"
#include "display.h"
#include "support.h"
#include "msgs.h"
#include "MemSrcNCOS.h"


_dynam_area_info dynam_area_info;

void dram_test(int test_mode)
{
        int status = FAILED;
        int size;
        int lower_mem;
        int upper_mem;
        char str[80];
        int inc = -1;
        int cyc = -1;
        int thire = -1;
        int fhire = -1;
        int rem_ok=FALSE;

        display_status(DRAM,RUNNING);

        /* Find out the size, lower and upper memry limits */
        size=find_memory_size(DRAM_AREA);
        upper_mem=find_test_stop();
        lower_mem=find_test_start();

        if (upper_mem > lower_mem){
                /* Upper memory higher than lower !!! */
                /* we can test that */

                /* Claim the memory for the use offfff */
                dynam_area_info.reqd_size=upper_mem-lower_mem;
                create_dynam_area();

/* printf("\nok ... %d",dynam_area_info.area_ok); */
/* printf("\nnumb ... %d",dynam_area_info.area_numb); */
/* printf("\nstart ... %d",dynam_area_info.area_start); */
/* printf("\nend ... %d",dynam_area_info.area_end); */
/* printf("\nsize ... %d",dynam_area_info.size); */
/* WaitForOKKey(); */
                if (dynam_area_info.area_ok==TRUE){
                        /* we claimed the area ok */

                        /* Make a string showing size, lower and upper limits */
                        sprintf(str,"%s %d %s : %s%08X : %s%08X",dram_test_msg[00],size,general_msg[1],dram_test_msg[01],lower_mem,dram_test_msg[02],upper_mem);
                        /* Show size, lower and upper limits */
                        set_forground_colour(COLOUR_TEXT);
                        display_info(str);
                
                        if (test_mode==MODE_USER){
                                /* Only do 2 phases */
                                display_info(dram_test_msg[03]);
                
                                /* Do phase 1  */
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                inc=DRAMTest_IncPattern(dynam_area_info.area_start,dynam_area_info.area_end);
                                clear_line(info_line);
                
                                /* Do phase 2 */
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                cyc=DRAMTest_Cyclic(dynam_area_info.area_start,dynam_area_info.area_end);
                                clear_line(info_line);
                
                                /* Now report the results */
                                if ((inc==0) && (cyc==0)){
                                        status=PASSED;
                                }else{
                                        /* otherwise it failed */
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);
                
                                        /* show how many failures there were. */
                                        sprintf(str,"%s%06X %s",dram_test_msg[05],inc+cyc,dram_test_msg[06]);
                                        display_info(str);
                                }
                        }else{
                                /* Do all 4 phases */
                                display_info(dram_test_msg[04]);
                
                                /* Do phase 1  */
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                inc=DRAMTest_IncPattern(dynam_area_info.area_start,dynam_area_info.area_end);
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                clear_line(info_line);
                
                                /* Do phase 2 */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                cyc=DRAMTest_Cyclic(dynam_area_info.area_start,dynam_area_info.area_end);
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                clear_line(info_line);
                
                                /* Do phase 3 */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                thire=DRAMTest_TrueHire(dynam_area_info.area_start,dynam_area_info.area_end);
                                /* Because the next bit prints out it's '.'s on the screen
                                   ensure we are day to spalt the next line. */
                                clear_line(info_line);
                
                                /* Do phase 4 */
                                tab(SCRN_SAFELEFTMARGIN,info_line);
                                fhire=DRAMTest_FalseHire(dynam_area_info.area_start,dynam_area_info.area_end);
                                clear_line(info_line);
                
                                /* Now report the results */
                                if ((inc==0) && (cyc==0) && (thire==0) && (fhire==0)){
                                        status=PASSED;
                                }else{
                                        /* otherwise it failed */
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_TrueHire,thire);
                                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_FalseHire,fhire);
                
                                        /* show how many failures there were. */
                                        sprintf(str,"%s%06X %s",dram_test_msg[05],inc+cyc+thire+fhire,dram_test_msg[06]);
                                        display_info(str);
                                }
                        }
                        /* free up the memory used */
                        rem_ok=remove_dynam_area(dynam_area_info.area_numb);
                        if (rem_ok==FALSE){
                                /* we failed to free up the area !!!! */
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,BAD_DRAMTest_DynamRemove);
                        }
                }else{
                        /* failed to claim the memory */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,BAD_DRAMTest_DynamCreate);
                }
        }else{
                /* Upper memory wasn't higher than lower memory */
                /* check to see that lower is lower than upper and that they are different */
                if (upper_mem==lower_mem){
                        /* They are the same !!! */
                        /* Can't test that !! */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,BAD_DRAMTest_SizeEqual);
                }
                if (upper_mem<lower_mem){
                        /* Upper is less than lower !!! */
                        /* Can't test that !! */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,BAD_DRAMTest_SizeLess);
                }
        }
        display_status(DRAM,status);
        log_status(DRAM,status);
        clear_info();
}

int find_test_start(void)
/* Find the start of free memory which I can test.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        start = reg.r[3];
        return start;
}

int find_test_stop(void)
/* Find the end of free memory which I'm testing.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        int size;
        int end;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        size  = reg.r[2];
        start = reg.r[3];
        end = start+size;
        return end;
}

void create_dynam_area(void)
/* _dynam_area_info * dynam_area_info) */
/* Create a dynamic area of the size, reqd_size.
 */
{
        _kernel_oserror *err = NULL;
        _kernel_swi_regs reg;
        
        reg.r[0] = 0;
        reg.r[1] = -1;
        reg.r[2] = dynam_area_info.reqd_size;
        reg.r[3] = -1;
        reg.r[4] = 0x22;
        reg.r[5] = dynam_area_info.reqd_size;
        reg.r[6] = 0;
        reg.r[7] = 0;
        reg.r[8] = (int)"DRAM Test";
        err = _kernel_swi(OS_DynamicArea, &reg, &reg);
        if (err!=0){
                /* error generated ... */
/* printf("error ... %s (0x%x)   ",err->errmess,err->errnum); */
/* WaitForOKKey(); */
                dynam_area_info.area_ok=FALSE;
                dynam_area_info.area_numb=0;
                dynam_area_info.area_start=0;
                dynam_area_info.area_end=0;
                dynam_area_info.size=0;
        }else{
                if (reg.r[5]==dynam_area_info.reqd_size){
                        /* We got what we asked for */
                        /* Area created ok ... */
/* printf("does this get shown ?????????"); */
/* WaitForOKKey(); */
                        dynam_area_info.area_ok=TRUE;
                        dynam_area_info.area_numb=reg.r[1];
                        dynam_area_info.area_start=reg.r[3];
                        dynam_area_info.area_end=reg.r[3]+reg.r[5];
                        dynam_area_info.size=reg.r[5];
/* printf("\nok ... %d",dynam_area_info.area_ok); */
/* printf("\nnumb ... %d",dynam_area_info.area_numb); */
/* printf("\nstart ... %d",dynam_area_info.area_start); */
/* printf("\nend ... %d",dynam_area_info.area_end); */
/* printf("\nsize ... %d",dynam_area_info.size); */
/* WaitForOKKey(); */

                }else{
/* printf("didn't get what we asked for"); */
/* WaitForOKKey(); */
                        /* we didn't get what we asked for */
                        dynam_area_info.area_ok=FALSE;
                        dynam_area_info.area_numb=0;
                        dynam_area_info.area_start=0;
                        dynam_area_info.area_end=0;
                        dynam_area_info.size=0;
                }
        }
}

int remove_dynam_area(int area_numb)
/* Remove a previously created dynamic area, specified by area_numb
 */
{
        _kernel_oserror *err = NULL;
        _kernel_swi_regs reg;
        reg.r[0] = 1;
        reg.r[1] = area_numb;
        err = _kernel_swi(OS_DynamicArea, &reg, &reg);
        /* Return false if err!=0, else return true */
        return (err!=0) ? FALSE : TRUE;
}
