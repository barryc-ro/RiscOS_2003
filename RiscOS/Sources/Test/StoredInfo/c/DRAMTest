#/* >c.DRAMTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    03 Apr 97       BAR     Initial writing

Will perform the DRAM Test !!????
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "dramtest.h"
#include "display.h"
#include "support.h"
#include "msgs.h"
#include "MemSrcNCOS.h"

void dram_test(int test_mode)
{
        int status = FAILED;
        int size;
        int lower_mem;
        int upper_mem;
        char str[80];
        int inc = -1;
        int cyc = -1;
        int thire = -1;
        int fhire = -1;

        display_status(DRAM,RUNNING);

        size=find_memory_size(DRAM_AREA);
        /* show memory size */
        sprintf(str,"%s%x%s",dram_test_msg[00],size,general_msg[1]);
        display_info(str);

        lower_mem=find_test_start();
        /* show lower limit */
        sprintf(str,"%s&%x",dram_test_msg[01],lower_mem);
        display_info(str);

        upper_mem=find_test_stop();
        /* show upper limit */
        sprintf(str,"%s&%x",dram_test_msg[02],upper_mem);
        display_info(str);

        if (test_mode==MODE_USER){
                display_info(dram_test_msg[03]);
                inc=DRAMTest_IncPattern(lower_mem,upper_mem);
                cyc=DRAMTest_Cyclic(lower_mem,upper_mem);

                if ((inc==0) && (cyc==0)){
                        status=PASSED;
                }else{
                        /* otherwise it failed */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);

                        /* show how many failures there were. */
                        sprintf(str,"%s%x %s",dram_test_msg[05],inc+cyc,dram_test_msg[06]);
                        display_info(str);
                }
        }else{
                display_info(dram_test_msg[04]);
                inc=DRAMTest_IncPattern(lower_mem,upper_mem);
                cyc=DRAMTest_Cyclic(lower_mem,upper_mem);
                thire=DRAMTest_TrueHire(lower_mem,upper_mem);
                fhire=DRAMTest_FalseHire(lower_mem,upper_mem);
                if ((inc==0) && (cyc==0) && (thire==0) && (fhire==0)){
                        status=PASSED;
                }else{
                        /* otherwise it failed */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_TrueHire,thire);
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_FalseHire,fhire);

                        /* show how many failures there were. */
                        sprintf(str,"%s%x %s",dram_test_msg[05],inc+cyc+thire+fhire,dram_test_msg[06]);
                        display_info(str);
                }
        }
        display_status(DRAM,status);
        log_status(DRAM,status);
        clear_info();
}

int find_test_start(void)
/* Find the start of free memory which I can test.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        start = reg.r[3];
        return start;
}

int find_test_stop(void)
/* Find the end of free memory which I'm testing.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        int size;
        int end;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        size  = reg.r[2];
        start = reg.r[3];
        end = start+size;
        return end;
}
