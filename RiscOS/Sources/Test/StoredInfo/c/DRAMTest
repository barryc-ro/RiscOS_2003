#/* >c.DRAMTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    03 Apr 97       BAR     Initial writing
1.01    16 May 97       BAR     Change print out to display address in 8
                                digits caps hex. DRAM Size in decimal.
                                Number of failures 6 caps hex.
1.02    20 May 97       BAR     Reinstate True & False Hier. tests.
1.03    21 May 97       BAR     Set colour to 'text' when showing info
                                messages. Add a check to see if the upper
                                limit is larger than the lower limit and
                                that they are different !

Will perform the DRAM Test !!????
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "dramtest.h"
#include "display.h"
#include "support.h"
#include "msgs.h"
#include "MemSrcNCOS.h"

void dram_test(int test_mode)
{
        int status = FAILED;
        int size;
        int lower_mem;
        int upper_mem;
        char str[80];
        int inc = -1;
        int cyc = -1;
        int thire = -1;
        int fhire = -1;

        display_status(DRAM,RUNNING);

        /* Find out the size, lower and upper memry limits */
        size=find_memory_size(DRAM_AREA);
        upper_mem=find_test_stop();
        lower_mem=find_test_start();

        if (upper_mem > lower_mem){
                /* Upper memory higher than lower !!! */
                /* we can test that */

                /* Make a string showing size, lower and upper limits */
                sprintf(str,"%s %d %s : %s%08X : %s%08X",dram_test_msg[00],size,general_msg[1],dram_test_msg[01],lower_mem,dram_test_msg[02],upper_mem);
                /* Show size, lower and upper limits */
                set_forground_colour(COLOUR_TEXT);
                display_info(str);
        
                if (test_mode==MODE_USER){
                        /* Only do 2 phases */
                        display_info(dram_test_msg[03]);
        
                        /* Do phase 1  */
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        tab(0,info_line);
                        inc=DRAMTest_IncPattern(lower_mem,upper_mem);
                        clear_line(info_line);
        
                        /* Do phase 2 */
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        tab(0,info_line);
                        cyc=DRAMTest_Cyclic(lower_mem,upper_mem);
                        clear_line(info_line);
        
                        /* Now report the results */
                        if ((inc==0) && (cyc==0)){
                                status=PASSED;
                        }else{
                                /* otherwise it failed */
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);
        
                                /* show how many failures there were. */
                                sprintf(str,"%s%06X %s",dram_test_msg[05],inc+cyc,dram_test_msg[06]);
                                display_info(str);
                        }
                }else{
                        /* Do all 4 phases */
                        display_info(dram_test_msg[04]);
        
                        /* Do phase 1  */
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        tab(0,info_line);
                        inc=DRAMTest_IncPattern(lower_mem,upper_mem);
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        clear_line(info_line);
        
                        /* Do phase 2 */
                        tab(0,info_line);
                        cyc=DRAMTest_Cyclic(lower_mem,upper_mem);
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        clear_line(info_line);
        
                        /* Do phase 3 */
                        tab(0,info_line);
                        thire=DRAMTest_TrueHire(lower_mem,upper_mem);
                        /* Because the next bit prints out it's '.'s on the screen
                           ensure we are day to spalt the next line. */
                        clear_line(info_line);
        
                        /* Do phase 4 */
                        tab(0,info_line);
                        fhire=DRAMTest_FalseHire(lower_mem,upper_mem);
                        clear_line(info_line);
        
                        /* Now report the results */
                        if ((inc==0) && (cyc==0) && (thire==0) && (fhire==0)){
                                status=PASSED;
                        }else{
                                /* otherwise it failed */
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_IncPattern,inc);
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_Cyclic,cyc);
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_TrueHire,thire);
                                status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_FalseHire,fhire);
        
                                /* show how many failures there were. */
                                sprintf(str,"%s%06X %s",dram_test_msg[05],inc+cyc+thire+fhire,dram_test_msg[06]);
                                display_info(str);
                        }
                }
        }else{
                /* Upper memory wasn't higher than lower memory */
                /* check to see that lower is lower than upper and that they are different */
                if (upper_mem==lower_mem){
                        /* They are the same !!! */
                        /* Can't test that !! */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,1);
                }
                if (upper_mem<lower_mem){
                        /* Upper is less than lower !!! */
                        /* Can't test that !! */
                        status = make_error_no(status,BAD_DRAMTest_Base,BAD_DRAMTest_SizeCheck,2);
                }
        }
        display_status(DRAM,status);
        log_status(DRAM,status);
        clear_info();
}

int find_test_start(void)
/* Find the start of free memory which I can test.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        start = reg.r[3];
        return start;
}

int find_test_stop(void)
/* Find the end of free memory which I'm testing.
   use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
 */
{
        int start;
        int size;
        int end;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        size  = reg.r[2];
        start = reg.r[3];
        end = start+size;
        return end;
}
