/* >c.InputTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    25 Mar 97       BAR     Initial writing

Will perform the user input tests
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "InputTest.h"
#include "display.h"
#include "support.h"
#include "msgs.h"

void Input_Test(int test_mode)
{
        int status=FALSE;

        display_status(USERINPUT,RUNNING);

        if (test_mode==MODE_USER){
                /* Ok in user mode, ask the user to press a few keys !! */
                status=ask_get_ok_key(USER_WAIT_TIME);
                if (status==GOOD_KEY){
                        /* well user pressed the GOOD key in time */
                        /* Lets just do a few more  */
                        status=ask_get_numb_key();
                }
        }else{
                /* Ok in life cycle mode, ask user to press ok key. */
                status=ask_get_ok_key(LIFE_WAIT_TIME);
                if (status==INPUT_TIMED_OUT){
                        status=COMPLETED;
                }
        }
        display_status(USERINPUT,status);
        log_status(USERINPUT,status);
        clear_info();
}

int ask_get_ok_key(int wait_time)
/* Ask the user to press the OK key */
/* Wait a specified time and if not pressed abort */
{
        char str[80];
        int rtn=CONT;
        int key = FALSE;
        int wrong_input=0;

        do{
                /* Tell the user to press the 'OK' button */
                display_info(input_test_msg[00]);
                sprintf(str,"%s %d %s",input_test_msg[01],wait_time,input_test_msg[02]);
                display_info(str);
        
                key = get_yn_responce_timed(wait_time*100);
                if (key!=TRUE){
                        /* Well the user didn't press the GOOD key or we Timed out */
                        /* Determin which is the case */
                        if (key==CONT){
                                /* we timed out - assume I/P and/or handset fault */
                                rtn=INPUT_TIMED_OUT;
                        }else{
                                display_info(input_test_msg[05]);
                                wrong_input++;
                                if (wrong_input >=2){
                                        rtn=INPUT_WRONG_KEY;
                                }else{
                                        rtn=CONT;
                                }
                        }
                }else{
                        rtn=key;
                }
        }while(rtn==CONT);
        return rtn;
}

int ask_get_numb_key(void)
{
        char str[80];
        int numb = 0;
        int rtn;
        int numbkey;

        display_info(input_test_msg[03]);
        display_info(input_test_msg[04]);
        numb=0;
        sprintf(str,"->");
        do{
                numbkey=get_key_abortable((48+numb),GOOD_KEY);
                if (numbkey==TRUE){
                        sprintf(str,"%s %d",str,(48+numb));
                        numb++;
                }else{
                        sprintf(str,"%s, %s",str,input_test_msg[06]);
                }
                dec_info_line();
                display_info(str);
        }while((numbkey!=GOOD_KEY) && (numb<10));
        if ((numb==10) && (numbkey!=GOOD_KEY)){
                /* well we got all 10 keys ok ! */
                rtn=PASSED;
        }else{
                /* well we didn't get all 10 keys */
                rtn=INPUT_NUMB_FAILED;
        }
        return rtn;
}
