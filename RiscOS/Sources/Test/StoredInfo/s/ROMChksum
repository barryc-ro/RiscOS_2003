
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        $GetIO

        EXPORT  ud_ROM_checksum

        AREA    |ROMChksum$$code|,REL,CODE,READONLY

        ALIGN

	GBLL	DEBUG
DEBUG	SETL	{TRUE}

;
; Calculate ROM checksum : display status and calculated checksum.
;

        ALIGN

ud_ROM_START    *       &03800000               ; Start of ROM - now mapped out of the way.

ud_RomTest
ud_ROM_checksum
         Push  "r1-r11, lr"
         MOV    r1, #&00                    ; initialise accumulator
         ADRL	r0, ud_ROM_START            ; initialise pointer
         LDR    r2, [r0, #ROMSizeOffset]    ; initialise endstop
                                            ; ROMSizeOffset has the offset from
                                            ; the start of the ROM to the
                                            ; word that holds the ROM Length.
         ADD    r2, r2, r0                  ; - must be at least 8 words
         SUB    r2, r2, #(10 * 4)           ; below the real endpoint

loop1    LDMIA  r0!, {r4 - r11}             ;LOAD r4 TO r11 WITH THE CONTENTS
                                            ;OF LOCATIONS POINTED TO BY r0
                                            ;WHICH IS INCREMEMTED AUTOMATICALLY
                                            ;TO POINT TO THE NEXT LOCATION
01
         ADD    r1, r1,          r4         ;ADD r4  TO CHECKSUM
         ADD    r1, r1,          r5         ;ADD r5  TO CHECKSUM
         ADD    r1, r1,          r6         ;ADD r6  TO CHECKSUM
         ADD    r1, r1,          r7         ;ADD r7  TO CHECKSUM
         ADD    r1, r1,          r8         ;ADD r8  TO CHECKSUM
         ADD    r1, r1,          r9         ;ADD r9  TO CHECKSUM
         ADD    r1, r1,          r10        ;ADD r10 TO CHECKSUM
         ADD    r1, r1,          r11        ;ADD r11 TO CHECKSUM
02
        ASSERT ((%02 - %01) = 32)       ; else r2 won't count down correctly

         CMPS   r0, r2
         BCC    loop1                       ;loop until pointer reaches endstop

         LDMIA  r0!, {r4 - r9}             ; get last 6 words (miss last 2 in ROM)
03
         ADD    r1, r1,          r4         ;ADD r4  TO CHECKSUM
         ADD    r1, r1,          r5         ;ADD r5  TO CHECKSUM
         ADD    r1, r1,          r6         ;ADD r6  TO CHECKSUM
         ADD    r1, r1,          r7         ;ADD r7  TO CHECKSUM
         ADD    r1, r1,          r8         ;ADD r8  TO CHECKSUM
         ADD    r1, r1,          r9         ;ADD r9  TO CHECKSUM
04
        ASSERT  (((%04 - %03) + (2*4)) =  32) ; Change this if you like -
                                            ; but be careful to count nearly
                                            ; to the top in eights, then add
                                            ; add in the last few words.

         MOVS   r0,r1                       ; should be zero if all OK

                                            ;return with zero flag set on OK
                                            ;and the calculated sum in r0.
         Pull    "r1-r11,pc",,^             ; Return to caller.

        END
