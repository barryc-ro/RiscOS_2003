#include <swis.h>
#include <string.h>
#include <standby.h>
#include <stdio.h>
#include "support.h"


void standby_on(void)
{
   _kernel_swi_regs reg;

  reg.r[0]=0;

  _kernel_swi(Standby_Online,&reg,&reg);
}

void set_screen_mode(void)
{
   _kernel_swi_regs reg;

  reg.r[0]=0; //reason code
  reg.r[1]=9; //mode

  _kernel_swi(OS_ScreenMode,&reg,&reg);
}

void menu(void)
{
  set_screen_mode();

  printf("   IAC Test Software");
  printf("\n   -----------------");
  printf("\n\n  1 - Functional Test");
  printf("\n  2 - SOAK Test");
  printf("\n  3 - BABT Test");
  printf("\n  4 - EMC");
  printf("\n  5 - Exit");

  flush_keyboard();
}


void run(char *path, char *message)
{
 if (_kernel_system(path,0) < 0)
 {
   printf("\n %s not found\n",message);
   printf("press any key to continue");
   get();

 }
   menu();
}

int get(void)
//returns a numerical key value
{
        _kernel_swi_regs regs;

        int iCarry;

        do{
                regs.r[0] = 145;
                regs.r[1] = 0;
                _kernel_swi_c(OS_Byte, &regs, &regs, &iCarry);
                if (iCarry == 0) return (regs.r[2] - 48);
        }while (1);
}

void flush_keyboard(void)
// Flush the keyboard buffer

{
        _kernel_osbyte(21,0,0);
}


/*
 * Function   : off
 * Description: switches off the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *off(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RemoveCursors, &reg, &reg);
}


/*
 * Function   : on
 * Description: switches on the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *on(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RestoreCursors, &reg, &reg);
}
