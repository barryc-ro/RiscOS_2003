#include <swis.h>

void set_screen_mode(void)
{
   _kernel_swi_regs reg;

  reg.r[0]=0; //reason code
  reg.r[1]=9; //mode

  _kernel_swi(OS_ScreenMode,&reg,&reg);
}

int get(void)
//returns a numerical key value
{
        _kernel_swi_regs regs;

        int iCarry;

        do{
                regs.r[0] = 145;
                regs.r[1] = 0;
                _kernel_swi_c(OS_Byte, &regs, &regs, &iCarry);
                if (iCarry == 0) return (regs.r[2] - 48);
        }while (1);
}

void flush_keyboard(void)
// Flush the keyboard buffer

{
        _kernel_osbyte(21,0,0);
}


/*
 * Function   : off
 * Description: switches off the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *off(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RemoveCursors, &reg, &reg);
}


/*
 * Function   : on
 * Description: switches on the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *on(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RestoreCursors, &reg, &reg);
}
