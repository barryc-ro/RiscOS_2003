/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * construct riscos error structures and display them
 *
 * Modification History
 *---------------------
 * 0.02 13 Nov 96 BAR   Added function error_report
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "screen.h"
#include "support.h"

extern int flagDebugging;

char *strErrorMessage[] = {
    "Cannot allocate required memory.",
    "Problem reading defaults file",
    "Cannot open results file",
    "Cannot power up UUT",
    "Testing halted during dialup",
    "No 'AT' response from UUT",
    "UUT interface not detected",
    "Problem sending data to UUT",
    "Testing halted during TTS phase",
    "'No dialtone' returned from modem",
    "'No carrier' returned from modem",
    "'Busy' returned from modem",
    "Mismatched modem connection",
    "Timeout closing connection",
    "Timeout opening connection",
    "Timeout transferring data",
    "Protocol error encountered",
    "Carrier speed error",
    "'No answer' returned from modem"};

/*
 * create and populate an error structure
 */
_kernel_oserror *
error_construct(int iErrorNum)
{
  static _kernel_oserror err;

  err.errnum = iErrorNum+1;
  strncpy(err.errmess, strErrorMessage[iErrorNum],252);
  return (&err);
}

/*
 * create and populate an error structure
 */
void
error_generate(_kernel_oserror *err)
{
  _kernel_swi_regs reg;
  char strLine[80];
  int i;
  int width;

  /* Find the number of text columns in this mode */
  reg.r[0] = -1;
  reg.r[1] = 1;
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);
  width = reg.r[2];

  sprintf(strLine,"%s\n",err->errmess);
  debug sprintf(strLine,"%s (0x%x)\n",err->errmess,err->errnum);
  if (strlen(strLine)>(width-2))
  {
    i = width-2;
    while ((strLine[i] != ' ') && (i>=0)) i--;
    strLine[i] = 0;
    screen_printf(COL_RED,"%s\n",strLine);
    screen_printf(COL_RED,"%s\n",strLine+i+1);
  }
  else
  {
    screen_printf(COL_RED,"%s\n",strLine);
  }
}

/*
 * report and populate an error structure
 */
int
error_report(_kernel_oserror *err, int flag)
{
        char strLine[80];
        int i;
        int width;
        int err_line = 18;

        /* Find the number of text columns in this mode */
        width = screen_width();

        sprintf(strLine,"%s (0x%x)\n",err->errmess,err->errnum);
        debug sprintf(strLine,"%s (0x%x)\n",err->errmess,err->errnum);
        screen_tab(0,err_line);
        if (strlen(strLine)>(width-2))
        {
                i = width-2;
                while ((strLine[i] != ' ') && (i>=0)) i--;
                strLine[i] = 0;
                screen_printf(COL_RED,"%s",strLine);
                err_line++;
                screen_tab(0,err_line);
                screen_printf(COL_RED,"%s",strLine+i+1);
        }
        else
        {
                screen_printf(COL_RED,"%s",strLine);
        }
        flag = FALSE;
        get_space_bar();
        while (err_line >=18){
                screen_clear_line(err_line);
                err_line--;
        }
        return flag;
}
