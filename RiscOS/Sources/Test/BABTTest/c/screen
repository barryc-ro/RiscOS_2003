/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * provides routines for manipulating mode 7 text.
 *
 * Modification History
 *---------------------
 * 0.02 13 Nov 96 BAR   Added functions screen_width, screen_clear_line,
 *                      screen_display_subresult. Changed title colours to
 *                      Blue on Green. Changed screen_init to retrn int
 *                      handle error locallay
 * 0.03 01 Dec 97 RLT	Modified screen printing routines to not print
 *			strings in colour as Daytona only has a monochrome
 *			LCD.
 * 0.04 02 Dec 97 RLT	Fixed screen_clear_line to not overwrite memory with
 *			spaces if columns in screen is more than 80.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "screen.h"
#include "constants.h"
#include "error.h"
#include "support.h"

/*
 * tab to the x and y coords supplied
 */
void
screen_tab(int x, int y)
{
        _kernel_swi_regs reg;

        _kernel_swi(OS_WriteI+31,&reg,&reg);
        _kernel_swi(OS_WriteI+x,&reg,&reg);
        _kernel_swi(OS_WriteI+y,&reg,&reg);
}

/*
 * create a text window on the screen into which screen output goes
 */
void
screen_window(int x, int y, int width, int height)
{
        _kernel_swi_regs reg;

        _kernel_swi(OS_WriteI+28,&reg,&reg);
        _kernel_swi(OS_WriteI+x,&reg,&reg);
        _kernel_swi(OS_WriteI+y+height,&reg,&reg);
        _kernel_swi(OS_WriteI+x+width,&reg,&reg);
        _kernel_swi(OS_WriteI+y,&reg,&reg);
}

/*
 * change mode to mode 7 and display title centrally at the top
 */
int
screen_init(char *strTitle)
{
        int iScreenWidth;
        int iIgnore = TRUE;
        _kernel_swi_regs reg;

        reg.r[0] = -1;
        reg.r[1] = 2;
        _kernel_swi (OS_ReadModeVariable, &reg, &reg);
        for (iScreenWidth = 0; iScreenWidth <= reg.r[2]; iScreenWidth++)
            screen_clear_line (iScreenWidth);

        iScreenWidth = screen_width ();
        screen_tab((iScreenWidth - strlen (strTitle)) / 2, 0);
        printf("%s\n",strTitle);

        iIgnore = FALSE;
        screen_tab(iScreenWidth,2);

        return iIgnore;
}

/*
 * display the string in the required colour.
 */
void
screen_printf(int col, char *format, ...)
{
        char strBuffer[80];
        va_list list;

        va_start (list, format);
        vsprintf(strBuffer, format, list);
        va_end(list);

/*         printf("%c%s",col,strBuffer); */
	printf ("%s", strBuffer);
}

/*
 * write the string at the centre of the screen, independant of screen mode
 */
void
screen_centre_printf(int col, int y, char *format, ...)
{
        char strBuffer[80];
        va_list list;
        int iScrnWidth;

        va_start (list, format);
        vsprintf(strBuffer, format, list);
        va_end(list);

        iScrnWidth = screen_width();

        screen_tab((iScrnWidth-strlen(strBuffer))/2,y);

/*         printf("%c%s",col,strBuffer); */
	printf ("%s", strBuffer);
}

/*
 * Determin the screen wodth
 */
int
screen_width(void)
{
        _kernel_swi_regs reg;

        /* Find the number of text columns in this mode */
        reg.r[0] = -1;
        reg.r[1] = 1;
        _kernel_swi(OS_ReadModeVariable, &reg, &reg);
        return reg.r[2];
}

/*
 * Clear a line of text.
 */
void
screen_clear_line(int y)
{
        int iScrnWidth = 0;
        int icnt = 0;
        char strLine[80];

        iScrnWidth = screen_width();

        if (iScrnWidth >= 80)				/* ensure that memory is not overwritten */
            iScrnWidth = 79;				/* if there are more than 80 columns */

        for (icnt=0;icnt<=iScrnWidth;icnt++)
        {
                strLine[icnt] = 32;
        }
        strLine[icnt] = '\0';
        screen_tab(0,y);
        printf("%s",strLine);
}

/*
 * Print status of a sub-test.
 *
 * 'y' specifies the line to use & clear.
 */
int
screen_display_subresult(int y, char *test, int state, int passcnt)
{
        screen_tab(0,y);
        if (state == TRUE){
                screen_printf(COL_GREEN ,"PASSED  %s",test);
                passcnt++;
        }else{
                screen_printf(COL_RED   ,"FAILED  %s",test);
                get_space_bar();
        }
        return (passcnt);
}
