/*************************************************/
/* File   : MakeNCimg.c                          */
/*                                               */
/* Purpose: Compress a file with the zlib stream */
/*          interface and optionally add a       */
/*          header containing general info on    */
/*          what the file is and CRC details.    */
/*          Info on zlib is at:                  */
/*                                               */
/*    http://www.cdrom.com/pub/infozip/zlib/     */
/*                                               */
/*  Author: A.D.Hodgkinson, K.J.Bracey for       */
/*          original zdeflate; A.D.Hodgkinson    */
/*          for this variant.                    */
/*                                               */
/* History: 29/01/1999: Created from zdeflate.   */
/*************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "zlib/zlib.h"

/* Local definitions */

#define KeyBuf_Size 35   /* Helps to ensure stuff fits in NCRmgr's list displays */
#define InBuf_Size  8192
#define OutBuf_Size 8192

/* Structures */

typedef union five_byte_time
{
  char bytes[5];
  int  words[2];

} five_byte_time;

/* Static function prototypes */

static _kernel_oserror * read_32bit_rounded_crc (FILE * stream, unsigned int * crc);
static void              write_entry            (FILE * stream, const char * name, const char * value);
static void              exit_with_error        (int err, FILE * in, FILE * out);

/*************************************************/
/* main()                                        */
/*                                               */
/* Compress a given file in a streaming fashion  */
/* using zlib with the maximum compression       */
/* settings. Optionally add a header file with   */
/* more information on the file contents.        */
/*                                               */
/* Command line syntax:                          */
/*                                               */
/*   MakeNCimg <infile> <outfile>                */
/*************************************************/

int main(int argc, char * argv[])
{
  z_stream      stream;

  FILE        * infile;
  FILE        * outfile;

  int           resc;
  char          keybuf [KeyBuf_Size];

  static Byte   inbuf  [InBuf_Size];
  static Byte   outbuf [OutBuf_Size];

  unsigned int  flags;
  unsigned int  crc;

  int           error;
  long int      insize, outsize;
  long int      crcpos, datapos;
  size_t        read,   written;

  /* Check we have enough arguments */

  if (argc != 3)
  {
    fprintf(stderr, "Syntax: MakeNCimg <infile> <outfile>\n");
    exit(EXIT_FAILURE);
  }

  /* Open the files */

  infile = fopen(argv[1], "rb");

  if (!infile)
  {
    perror(argv[1]);
    exit(EXIT_FAILURE);
  }

  outfile = fopen(argv[2], "wb");

  if (!outfile)
  {
    perror(argv[2]);
    exit(EXIT_FAILURE);
  }

  /* Ask what to build */

  do
  {
    printf("\nWhat do you want to create?\n\n"
           "1) Simple compressed image (for NCUpgrade)\n"
           "2) Annotated image (for production line)\n");

    if (
         _swix(OS_ReadC,
               _OUT(0) | _OUT(_FLAGS),

               &resc,
               &flags)

         || (flags & _C)
       )
    {
      fprintf(stderr, "OS_ReadC failed\n");
      exit(EXIT_FAILURE);
    }
  }
  while (resc != '1' && resc != '2');

  /* If we got '2', need to do all the header stuff now; */
  /* otherwise, just report the choice and drop through  */
  /* to the compression routine.                         */

  if (resc == '1')
  {
    printf("\n1: Simple image, e.g. for NCUpgrade\n");

    crcpos  = 0;
    datapos = 0;
  }
  else
  {
    unsigned int   load, exec;

    five_byte_time utc;

    char           crcs    [10]; /* Eight digit hex number plus terminator */
    char           offered [sizeof(keybuf)];

    printf("\n2: Annotated image, e.g. for NCRmgr\n");

    if (fputs("RPKG\n", outfile) == EOF)
    {
      perror("Writing RPKG header");
      exit(EXIT_FAILURE);
    }

    printf("\nMore details are needed for an annotated image.\n"
           "If you don't want to supply a value for any of the\n"
           "following fields, just press Return at the prompt.\n\n"
           "All values are limited to %d characters.\n\n",
           sizeof(keybuf) - 1);

    /* Descriptive name for the image */

    printf("Enter a descriptive name for this image\n:");

    if (
         _swix(OS_ReadLine,
               _INR(0,3) | _OUT(1) | _OUT(_FLAGS),

               ((unsigned int) keybuf) | (1u<<31), /* Bit 31 set -> Echo chars going into buffer only */
               sizeof(keybuf) - 1,
               32,
               255,

               &read,
               &flags)

          || (flags & _C)
        )
    {
      fprintf(stderr, "OS_ReadLine failed\n");
      exit(EXIT_FAILURE);
    }
    else keybuf[read] = '\0';

    write_entry(outfile, "a Name:\n", keybuf);

    /* Version number string, "Major.MinorMinor" */

    printf("\nEnter a version for this image (e.g. '2.01')\n:");

    if (
         _swix(OS_ReadLine,
               _INR(0,3) | _OUT(1) | _OUT(_FLAGS),

               ((unsigned int) keybuf) | (1u<<31), /* Bit 31 set -> Echo chars going into buffer only */
               sizeof(keybuf) - 1,
               32,
               255,

               &read,
               &flags)

          || (flags & _C)
        )
    {
      fprintf(stderr, "OS_ReadLine failed\n");
      exit(EXIT_FAILURE);
    }
    else keybuf[read] = '\0';

    write_entry(outfile, "b Version:\n", keybuf);

    /* Build date string, "dd/mm/ccyy hh:mm". This is a bit tricky as we want */
    /* to get clever here and offer a default based on the timestamp.         */

    if (
         !_swix(OS_File,
                _INR(0,1) | _OUTR(2,3),

                17,
                argv[1],

                &load,
                &exec)

         && ((load & 0xfff00000) == 0xfff00000)
       )
    {
      /* Assemble a 5-byte UTC time for the Territory Manager */

      utc.words[0] = exec;
      utc.bytes[4] = load & 0xff;

      if (
           _swix(Territory_ConvertDateAndTime,
                 _INR(0,4),

                 -1, /* Territory number; -1 = use current territory */
                 utc.bytes,
                 offered,
                 sizeof(offered),
                 "%DY/%MN/%CE%YR %24:%MI")
         )
         *offered = '\0';
    }
    else *offered = '\0';

    /* Now generate our build date offering */

    if (*offered != '\0')
    {
      printf("\nEnter a build date (e.g. '12/01/1999 14:54'), or press\n"
             "Return for default value of '%s'\n:",
             offered);
    }
    else printf("\nEnter a build date (e.g. '12/01/1999 14:54')\n:");

    if (
         _swix(OS_ReadLine,
               _INR(0,3) | _OUT(1) | _OUT(_FLAGS),

               ((unsigned int) keybuf) | (1u<<31), /* Bit 31 set -> Echo chars going into buffer only */
               sizeof(keybuf) - 1,
               32,
               255,

               &read,
               &flags)

          || (flags & _C)
        )
    {
      fprintf(stderr, "OS_ReadLine failed\n");
      exit(EXIT_FAILURE);
    }
    else keybuf[read] = '\0';

    /* Was the proposed build date asked for? */

    if (*keybuf == '\0') strcpy(keybuf, offered);

    write_entry(outfile, "c Build Date:\n", keybuf);

    /* Build master. Some people may not want to give their names ;-) so */
    /* can just give a company name instead, or even leave blank. Needs  */
    /* to be kept short to fit in NCRmgr's display!                      */

    printf("\nEnter a build master (keep short), or press Return\n"
           "for a default value of 'E-14 Ltd.'\n:");

    if (
         _swix(OS_ReadLine,
               _INR(0,3) | _OUT(1) | _OUT(_FLAGS),

               ((unsigned int) keybuf) | (1u<<31), /* Bit 31 set -> Echo chars going into buffer only */
               sizeof(keybuf) - 1,
               32,
               255,

               &read,
               &flags)

          || (flags & _C)
        )
    {
      fprintf(stderr, "OS_ReadLine failed\n");
      exit(EXIT_FAILURE);
    }
    else keybuf[read] = '\0';

    /* Was the proposed build master asked for? */

    if (*keybuf == '\0')
    {
      strncpy(keybuf, "E-14 Ltd.", sizeof(keybuf));
      keybuf[sizeof(keybuf) - 1] = '\0';
    }

    write_entry(outfile, "d Build Master:\n", keybuf);

    /* CRC check the input file */

    if (read_32bit_rounded_crc(infile, &crc))
    {
      fprintf(stderr, "Error trying to read input file for CRC");
      exit(EXIT_FAILURE);
    }

    sprintf(crcs, "%08X", crc);
    write_entry(outfile, "e 32-bit CRC pre:\n", crcs);

    /* Seek the input file back to the start, ready for compression */

    rewind(infile);

    /* Now need to give ourselves *space* for CRC post compression. It's */
    /* hacky to pad with spaces and record the file pointer, but this is */
    /* a great deal easier than trying to extend the file in the middle  */
    /* later on, when we know what the CRC value is.                     */

    write_entry(outfile, "f 8-bit CRC post:\n", "        " /* 8 spaces */);

    /* ftell sets crcpos to just after the value-terminating LF, so */
    /* subtract nine to get to the value start                      */

    crcpos = ftell(outfile) - 9;

    /* Output the final Data header */

    if (fputs("0 Data:\n", outfile) == EOF)
      perror("Writing Data header"), exit(EXIT_FAILURE);

    datapos = ftell(outfile);
  }

  /* Now the most interesting bit! */

  printf("\nCompressing");

  /* Set up basic stream info */

  stream.zalloc = Z_NULL;
  stream.zfree  = Z_NULL;
  stream.opaque = Z_NULL;

  /* Initialise the deflate engine */

  error = deflateInit(&stream, Z_BEST_COMPRESSION);
  if (error) exit_with_error(error, infile, outfile);

  /* Main deflate loop */

  crc = 0;

  do
  {
    /* Read a chunk */

    read = fread(inbuf,
                 sizeof(Byte),
                 sizeof(inbuf) /  sizeof(Byte),
                 infile);

    printf(".");

    stream.next_in  = inbuf;
    stream.avail_in = (uInt) (read * sizeof(Byte));

    /* Compressor loop */

    do
    {
      stream.next_out  = outbuf;
      stream.avail_out = (uInt) sizeof(outbuf);

      /* If we've read nothing, we're at the end of the input stream so */
      /* start telling deflate to finish up with Z_FINISH rather than   */
      /* Z_NO_FLUSH                                                     */

      error = deflate(&stream, read ? Z_NO_FLUSH : Z_FINISH);
      if (error && error != Z_STREAM_END) exit_with_error(error, infile, outfile);

      /* CRC check the block */

      crc = (unsigned int) crc32(crc, outbuf, (sizeof(outbuf) / sizeof(Byte)) - stream.avail_out);

      /* Write out the compressed data */

      written = fwrite(outbuf,
                       sizeof(Byte),
                       (sizeof(outbuf) / sizeof(Byte)) - stream.avail_out,
                       outfile);
    }
    while (stream.avail_in > 0 && !error);
  }
  while (error != Z_STREAM_END);

  /* If required, wind back and write out the compressed data CRC */


  if (resc == '2')
  {
    char crcs [10];

    sprintf(crcs, "%08X", crc);

    if (
         fseek(outfile, crcpos, SEEK_SET) ||
         fputs(crcs, outfile) == EOF      ||
         fseek(outfile, 0, SEEK_END)
       )
    {
      perror("Seeking back to write CRC");
      exit(EXIT_FAILURE);
    }
  }

  /* Close the output files and exit */

  insize  = ftell(infile);
  outsize = ftell(outfile);

  fclose(infile);
  fclose(outfile);

  if (resc == '1')
  {
    printf("\n\nFinished.\n\n"

           "Input:     %ld bytes\n"
           "Output:    %ld bytes\n"
           "Shrunk to: %d%% of original\n",

           insize,
           outsize,
           (int) ((100L * outsize) / insize));
  }
  else
  {
    printf("\n\nFinished.\n\n"

           "Input:     %ld bytes\n"
           "Output:    %ld bytes (%ld header)\n"
           "Shrunk to: %d%% of original (excluding header)\n",

           insize,
           outsize,
           datapos,
           (int) ((100L * (outsize - datapos)) / insize));
  }

  exit(EXIT_SUCCESS);
}

/*************************************************/
/* read_32bit_rounded_crc()                      */
/*                                               */
/* Read a file from the current file pointer up  */
/* to end of file in 32K chunks, calculating a   */
/* cumulative CRC value. If the file is not a    */
/* multiple of 32K long the last block read will */
/* be padded with zero bytes to make up the size */
/* and these bytes will be included in the CRC.  */
/*                                               */
/* The CRC value is calculated through ZLib's    */
/* crc32 function.                               */
/*                                               */
/* Parameters: Pointer to a FILE structure       */
/*             relevant to the file to check;    */
/*                                               */
/*             Pointer to an unsigned int to     */
/*             take the CRC value on exit - its  */
/*             initial value on entry is         */
/*             irrelevant.                       */
/*                                               */
/* Returns:    In the event of the function      */
/*             returning an error, the on entry  */
/*             value of the unsigned int for     */
/*             returning the CRC value may be    */
/*             corrupted and will not hold a     */
/*             valid CRC number.                 */
/*************************************************/

static _kernel_oserror * read_32bit_rounded_crc(FILE * stream, unsigned int * crc)
{
  _kernel_oserror * e = NULL;
  Byte              buffer[32768];
  size_t            read;

  if (!stream || !crc) return NULL;

  *crc = (unsigned int) crc32(0L, Z_NULL, 0);

  do
  {
    memset(buffer, 0, sizeof(buffer));
    read = fread(buffer, 1, sizeof(buffer), stream);
    if (read) *crc = (unsigned int) crc32(*crc, buffer, sizeof(buffer));
  }
  while (read == sizeof(buffer) && !e);

  return e;
}

/*************************************************/
/* write_entry()                                 */
/*                                               */
/* Write an entry to the given stream for the    */
/* annotated image in the form:                  */
/*                                               */
/* Offset  Meaning                               */
/*                                               */
/* 0       Single byte field identifier          */
/* 1       n chars of comment data, may not      */
/*         include LF or colon                   */
/* 1+n     Single colon followed by single LF    */
/*         char to terminate comment             */
/* 3+n     m chars of field value, may not       */
/*         include LF                            */
/* 3+n+m   Single LF char to terminate value     */
/*                                               */
/* Parameters: Stream to output to (pointer to a */
/*             relevant FILE structure);         */
/*                                               */
/*             Field name, including ID byte,    */
/*             optional comment, and terminating */
/*             colon and LF;                     */
/*                                               */
/*             Field value, NOT including        */
/*             terminating LF.                   */
/*                                               */
/* Returns:    Nothing; if there's a write error */
/*             perror() is used to report it,    */
/*             then exit() is called.            */
/*************************************************/

static void write_entry(FILE * stream, const char * name, const char * value)
{
  if (fputs(name, stream) == EOF)
    perror("Writing entry header"), exit(EXIT_FAILURE);
  if (fputs(value, stream) == EOF)
    perror("Writing entry value"), exit(EXIT_FAILURE);
  if (fputc('\n', stream) == EOF)
    perror("Writing entry terminator"), exit(EXIT_FAILURE);

  return;
}

/*************************************************/
/* exit_with_error()                             */
/*                                               */
/* Print an error message quoting a given error  */
/* number to stderr, close the given input and   */
/* output file handles and exit with             */
/* EXIT_FAILURE.                                 */
/*                                               */
/* Parameters: Integer error number to report;   */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             input file;                       */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             output file.                      */
/*                                               */
/* Assumes:    The FILE pointers may be NULL.    */
/*************************************************/

static void exit_with_error(int err, FILE * in, FILE * out)
{
  fprintf(stderr, "\nError code %d received from deflate engine\n", err);

  if (in)  fclose(in);
  if (out) fclose(out);

  exit(EXIT_FAILURE);
}
