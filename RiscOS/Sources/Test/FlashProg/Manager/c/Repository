/***************************************************/
/* File   : Repository.c                           */
/*                                                 */
/* Purpose: Repository managing functions.         */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Jan-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "FileOps.h"
#include "Global.h"
#include "Redraw.h"
#include "State.h"
#include "svcprint.h"
#include "Utils.h"

#include "Repository.h"

/* Static function prototypes */

static repository_entry * repository_create_entry           (repository_entry * prev);

static _kernel_oserror  * repository_set_entry_path         (repository_entry * entry, const char * path);
static _kernel_oserror  * repository_set_entry_name         (repository_entry * entry, const char * name);
static _kernel_oserror  * repository_set_entry_version      (repository_entry * entry, const char * version);
static _kernel_oserror  * repository_set_entry_build_date   (repository_entry * entry, const char * build_date);
static _kernel_oserror  * repository_set_entry_build_master (repository_entry * entry, const char * build_master);

static void               repository_free_entry_contents    (repository_entry * entry);

/*************************************************/
/* repository_create_entry()                     */
/*                                               */
/* Create an empty repository_entry item linked  */
/* to the given previous item. If this means the */
/* item is inserted in the middle of a list, all */
/* entries will end up consistent by the time    */
/* the function has finished.                    */
/*                                               */
/* Parameters: Pointer to the previous item (or  */
/*             NULL).                            */
/*                                               */
/* Returns:    Pointer to the new entry, or      */
/*             NULL if the memory claim for the  */
/*             structure failed.                 */
/*************************************************/

static repository_entry * repository_create_entry(repository_entry * prev)
{
  repository_entry * entry = malloc(sizeof(repository_entry));

  if (!entry) return NULL;

  memset(entry, NULL, sizeof(*entry));

  if (prev)
  {
    entry->prev = prev;
    entry->next = prev->next;
    prev->next  = entry;

    if (entry->next) entry->next->prev = entry;
  }

  return entry;
}

/*************************************************/
/* repository_build_entry                        */
/*                                               */
/* Build a repositor_entry structure at the head */
/* of the given list, filling in the fields from */
/* a given image file. If the pathname given     */
/* does not lead to an image file, the entry     */
/* will not be created (but no error is          */
/* returned).                                    */
/*                                               */
/* Parameters: Pointer to the pathname of the    */
/*             image file to use for the entry;  */
/*                                               */
/*             Pointer to a repository_entry     */
/*             pointer, which will be updated to */
/*             point to the head of a linked     */
/*             list of these structures, or to   */
/*             NULL if the repository is empty;  */
/*                                               */
/*             Pointer to an unsigned int, in    */
/*             which the number of entries in    */
/*             the list should be held and will  */
/*             be incremented if one is added    */
/*             (this may be NULL);               */
/*                                               */
/*             Pointer to a flags word, as for   */
/*             repository_enumerate.             */
/*                                               */
/* Returns:    This is basically a back end for  */
/*             repository_enumerate and          */
/*             repository_enumerate_zip, hence   */
/*             the parameters list derivation.   */
/*             Return conditions are thus much   */
/*             the same as for these functions.  */
/*                                               */
/* Assumes:    As Returns.                       */
/*************************************************/

_kernel_oserror * repository_build_entry(const char * path, repository_entry ** entries,
                                         unsigned int * count, unsigned int * flags)
{
  _kernel_oserror  * e;
  repository_entry * new_entry;
  unsigned int       handle;
  char             * temp;

  *flags = 0;

  /* Open the ROM image file; if this gives a zero */
  /* handle, the file was not a ROM image anyway.  */

  e = fileops_open_image(path, &handle);

  if (e)
  {
    #ifdef TRACE
      if (tl & (1u<<1)) Printf("repository_build_entry: repository_set_entry_path failed\n");
    #endif

    *flags = Repository_Enumerate_OpenInError;
    return e;
  }

  /* Only proceed if it is a valid image */

  if (handle)
  {
    new_entry = repository_create_entry(*entries);

    if (!new_entry)
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: repository_create_entry failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_OutOfMemory;
      return NULL;
    }

    /* Fill in Path field. The entry is considered invalid until */
    /* this at least is filled in.                               */

    if (repository_set_entry_path(new_entry, path))
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: repository_set_entry_path failed\n");
      #endif

      fileops_close_image(handle);
      repository_free_entry(new_entry);
      *flags = Repository_Enumerate_OutOfMemory;
      return NULL;
    }

    /* That was successful, so we can make this entry "official" */

    *entries = new_entry;
    if (count) (*count)++;

    /* Fill in Name field */

    e = fileops_read_image_field(handle, FileOps_NameFieldID, &temp);

    if (e || repository_set_entry_name(new_entry, temp))
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_OutOfMemory;
      return e;
    }

    /* Version */

    e = fileops_read_image_field(handle, FileOps_VersionFieldID, &temp);

    if (e || repository_set_entry_version(new_entry, temp))
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_OutOfMemory;
      return e;
    }

    /* Build date */

    e = fileops_read_image_field(handle, FileOps_BuildDateFieldID, &temp);

    if (e || repository_set_entry_build_date(new_entry, temp))
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_OutOfMemory;
      return e;
    }

    /* Build master */

    e = fileops_read_image_field(handle, FileOps_BuildMasterFieldID, &temp);

    if (e || repository_set_entry_build_master(new_entry, temp))
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_OutOfMemory;
      return e;
    }

    /* CRC pre-compression */

    e = fileops_read_image_field(handle, FileOps_CRCPreFieldID, &temp);

    if (e)
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_ReadError;
      return e;
    }

    new_entry->crc_pre = (unsigned int) strtoul(temp, NULL, 16);

    /* CRC post-compression */

    e = fileops_read_image_field(handle, FileOps_CRCPostFieldID, &temp);

    if (e)
    {
      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_build_entry: File read or field set failed\n");
      #endif

      fileops_close_image(handle);
      *flags = Repository_Enumerate_ReadError;
      return e;
    }

    new_entry->crc_post = (unsigned int) strtoul(temp, NULL, 16);

    fileops_close_image(handle);
  }

  return NULL;
}

/*************************************************/
/* repository_set_entry_path()                   */
/*                                               */
/* Set the path for a given repository_entry     */
/* structure.                                    */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure for whom the path       */
/*             should be set;                    */
/*                                               */
/*             Pointer to the path string.       */
/*                                               */
/* Returns:    General out of memory error 1 if  */
/*             the strdup fails.                 */
/*************************************************/

static _kernel_oserror * repository_set_entry_path(repository_entry * entry, const char * path)
{
  if (!entry || !path) return NULL;

  entry->path = utils_strdup(path);

  if (!entry->path) return make_no_memory_error(1);
  else              return NULL;
}

/*************************************************/
/* repository_set_entry_name()                   */
/*                                               */
/* Set the name for a given repository_entry     */
/* structure.                                    */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure for whom the name       */
/*             should be set;                    */
/*                                               */
/*             Pointer to the name string.       */
/*                                               */
/* Returns:    General out of memory error 2 if  */
/*             the strdup fails.                 */
/*************************************************/

static _kernel_oserror * repository_set_entry_name(repository_entry * entry, const char * name)
{
  if (!entry || !name) return NULL;

  entry->name = utils_strdup(name);

  if (!entry->name) return make_no_memory_error(2);
  else              return NULL;
}

/*************************************************/
/* repository_set_entry_version()                */
/*                                               */
/* Set the version for a given repository_entry  */
/* structure.                                    */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure for whom the version    */
/*             should be set;                    */
/*                                               */
/*             Pointer to the version string.    */
/*                                               */
/* Returns:    General out of memory error 3 if  */
/*             the strdup fails.                 */
/*************************************************/

static _kernel_oserror * repository_set_entry_version(repository_entry * entry, const char * version)
{
  if (!entry || !version) return NULL;

  entry->version = utils_strdup(version);

  if (!entry->version) return make_no_memory_error(3);
  else                 return NULL;
}

/*************************************************/
/* repository_set_entry_build_date()             */
/*                                               */
/* Set the build date for a given                */
/* repository_entry structure.                   */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure for whom the build date */
/*             should be set;                    */
/*                                               */
/*             Pointer to the build date string. */
/*                                               */
/* Returns:    General out of memory error 4 if  */
/*             the strdup fails.                 */
/*************************************************/

static _kernel_oserror * repository_set_entry_build_date(repository_entry * entry, const char * build_date)
{
  if (!entry || !build_date) return NULL;

  entry->build_date = utils_strdup(build_date);

  if (!entry->build_date) return make_no_memory_error(4);
  else                    return NULL;
}

/*************************************************/
/* repository_set_entry_build_master()           */
/*                                               */
/* Set the build master for a given              */
/* repository_entry structure.                   */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure for whom the build      */
/*             master should be set;             */
/*                                               */
/*             Pointer to the build master       */
/*             string.                           */
/*                                               */
/* Returns:    General out of memory error 5 if  */
/*             the strdup fails.                 */
/*************************************************/

static _kernel_oserror * repository_set_entry_build_master(repository_entry * entry, const char * build_master)
{
  if (!entry || !build_master) return NULL;

  entry->build_master = utils_strdup(build_master);

  if (!entry->build_master) return make_no_memory_error(5);
  else                      return NULL;
}

/*************************************************/
/* repository_enumerate()                        */
/*                                               */
/* Enumerate the contents of the repository. Use */
/* repository_discard_list to get rid of the     */
/* data returned when you no longer need it.     */
/*                                               */
/* Parameters: Pointer to a repository_entry     */
/*             pointer, which will be updated to */
/*             point to the head of a linked     */
/*             list of these structures, or to   */
/*             NULL if the repository is empty;  */
/*                                               */
/*             Pointer to an unsigned int, in    */
/*             which the number of entries in    */
/*             the list will be placed (this may */
/*             be NULL);                         */
/*                                               */
/*             Pointer to a flags word, which is */
/*             updated as follows on exit:       */
/*                                               */
/*             Bit  Meaning if set               */
/*                                               */
/*             0    Ran out of memory. The list  */
/*                  of repository entries will   */
/*                  be incomplete. All entries   */
/*                  that did manage to get built */
/*                  will, however, be complete,  */
/*                  so the caller need not worry */
/*                  about any broken list items. */
/*             1    Error trying to open image   */
/*                  for input.                   */
/*             2    Read error when trying to    */
/*                  get data from the opened     */
/*                  image.                       */
/*                                               */
/*             See Repository.h for #defined     */
/*             values for these bits. You can    */
/*             also set flags bits on entry to   */
/*             change behaviour as follows:      */
/*                                               */
/*             Bit  Meaning if set               */
/*                                               */
/*             0    Display progress. Assumes    */
/*                  we're in mode 21 but         */
/*                  otherwise does all display   */
/*                  stuff itself. Leaves the     */
/*                  text window set to default   */
/*                  values on exit but does not  */
/*                  tidy up in any other way.    */
/*                                               */
/*             Again, appropriate definitions    */
/*             are in Repository.h.              */
/*                                               */
/* Returns:    In the event that the function    */
/*             returns an error, any values that */
/*             would normally be returned via.   */
/*             the pointers given as parameters  */
/*             (see above) should be considered  */
/*             undefined and ignored.            */
/*                                               */
/*             Note that any errors relating to  */
/*             failed memory claim attempts are  */
/*             recorded by setting a flags word  */
/*             bit (see above) and leaving the   */
/*             rest of the list intact.          */
/*                                               */
/* Assumes:    All pointers passed as parameters */
/*             are valid; unless otherwise       */
/*             stated above, any NULL pointers   */
/*             will make the function exit       */
/*             without any action.               */
/*************************************************/

_kernel_oserror * repository_enumerate(repository_entry ** entries, unsigned int * count, unsigned int * flags)
{
  _kernel_oserror  * e;

  char              path  [256];
  char              copy1 [sizeof(path)  + 256];  /* 256 = max theoretical leafname len plus '.' */
  char              copy2 [sizeof(copy1) + 256];
  char              copy3 [sizeof(copy2) + 256];
  char              found [sizeof(path)];

  int               cont = 0;
  unsigned int      read;
  unsigned int      draw;

  #ifdef TRACE
    if (tl & (1u<<1)) Printf("repository_enumerate: Called with %p, %p\n", entries, flags);
  #endif

  if (!entries || !flags) return NULL;

  _swix(Hourglass_On, 0);

  /* Deal with on-entry flags values */

  if ((*flags) & Repository_Enumerate_DisplayProgress) draw = 1;
  else                                                 draw = 0;

  /* Set default exit values */

  *entries = NULL;
  *flags   = 0;

  if (count) *count = 0;

  /* Set up the display */

  if (draw) redraw_set_up_scan_display();

  /* Does the repository directory exist in the first place? */

  StrNCpy0(path, task_dir);
  StrNCat0(path, ".");
  StrNCat0(path, lookup_token("Repository:Repository",0,0));

  e = utils_scan_directory(path, found, sizeof(found), &cont, &read);

  while (!e && cont > 0)
  {
    if (read)
    {
      /* We use local copies of 'read' and 'cont' here */

      unsigned int read;
      unsigned int offset = 0;
      int          cont   = 0;

      /* Each time we reach here, we've found one of the first level */
      /* directories in the repository. Look inside it for the next  */
      /* level. First build the full pathname of the directory.      */

      if (draw) offset = strlen(path) + 1; /* Needed to be able to show '00.00.name' later, rather than the whole path, and do it quickly */

      strcpy  (copy1, path); /* We know copy1 is bigger than path */
      StrNCat0(copy1, ".");
      StrNCat0(copy1, found);

      copy1[sizeof(copy1) - 1] = '\0';

      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_enumerate: Found 1st level '%s'\n",copy1);
      #endif

      /* Now scan the contents */

      e = utils_scan_directory(copy1, found, sizeof(found), &cont, &read);

      while (!e && cont > 0)
      {
        if (read)
        {
          /* More local copies... */

          unsigned int read;
          int          cont             = 0;
          int          already_had_file = 0;

          /* Well, nearly there! We've found a directory that should */
          /* hold an image. Just get one filename from it, and this  */
          /* should be the image file. If there is more than one     */
          /* file inside the repository is broken.                   */

          strcpy  (copy2, copy1); /* We know copy2 is bigger than copy1 */
          StrNCat0(copy2, ".");
          StrNCat0(copy2, found);

          copy2[sizeof(copy2) - 1] = '\0';

          #ifdef TRACE
            if (tl & (1u<<1)) Printf("repository_enumerate: Found 2nd level '%s'\n",copy2);
          #endif

          e = utils_scan_directory(copy2, found, sizeof(found), &cont, &read);

          while (!e && cont > 0)
          {
            if (read)
            {
              if (already_had_file)
              {
                #ifdef TRACE
                  if (tl & (1u<<1)) Printf("repository_enumerate: Found more than one image!\n");
                #endif
              }
              else
              {
                repository_entry * entries_before;

                already_had_file = 1;

                strcpy  (copy3, copy2); /* We know copy3 is bigger than copy2 */
                StrNCat0(copy3, ".");
                StrNCat0(copy3, found);

                copy3[sizeof(copy3) - 1] = '\0';

                if (draw) redraw_show_scan_progress(copy3 + offset);

                #ifdef TRACE
                  if (tl & (1u<<1)) Printf("repository_enumerate: Found image '%s'\n",copy3);
                #endif

                /* Suppress errors or warnings from any attempts to create    */
                /* individual entries as these would otherwise propage up and */
                /* stop the rest of the list being built, or worse, may even  */
                /* stop the application starting at all. Just get rid of the  */
                /* entry itself if things go wrong.                           */

                entries_before = *entries;

                if (
                     repository_build_entry(copy3, entries, count, flags) ||
                     *flags != 0
                   )
                {
                  repository_entry * new = *entries;

                  if (new != entries_before)
                  {
                    *entries = new->prev;
                    repository_free_entry(new);

                    if (count) (*count)--;
                  }
                }
              }
            }

            /* Continue scanning for second level directories */

            e = utils_scan_directory(copy2, found, sizeof(found), &cont, &read);
          }
        }

        /* Continue scanning for second level directories */

        e = utils_scan_directory(copy1, found, sizeof(found), &cont, &read);
      }
    }

    /* Continue scanning for first level directories */

    e = utils_scan_directory(path, found, sizeof(found), &cont, &read);
  }

  _swix(Hourglass_Off, 0);

  #ifdef TRACE
    if (tl & (1u<<1)) Printf("repository_enumerate: Successful\n");
  #endif

  return NULL;
}

/*************************************************/
/* repository_enumerate_zip                      */
/*                                               */
/* Enumerate any Zip disc repository entries.    */
/* Use as repository_enumerate.                  */
/*************************************************/

_kernel_oserror * repository_enumerate_zip(repository_entry ** entries, unsigned int * count, unsigned int * flags)
{
  _kernel_oserror  * e;

  char              path  [256];
  char              copy1 [sizeof(path) + 256];
  char              found [sizeof(path)];

  int               cont = 0;
  unsigned int      read;

  #ifdef TRACE
    if (tl & (1u<<1)) Printf("repository_enumerate_zip: Called with %p, %p\n", entries, flags);
  #endif

  if (!entries || !flags) return NULL;

  *entries = NULL;
  *flags   = 0;

  if (count) *count = 0;

  StrNCpy0(path, lookup_token("Zip:IZipFS::0.$",0,0));

  e = utils_scan_directory(path, found, sizeof(found), &cont, &read);

  while (!e && cont > 0)
  {
    if (read)
    {
      repository_entry * entries_before;

      /* We use local copies of 'read' and 'cont' here */

      strcpy  (copy1, path); /* We know copy1 is bigger than path */
      StrNCat0(copy1, ".");
      StrNCat0(copy1, found);

      copy1[sizeof(copy1) - 1] = '\0';

      #ifdef TRACE
        if (tl & (1u<<1)) Printf("repository_enumerate_zip: Found image '%s'\n",copy1);
      #endif

      /* Suppress errors or warnings from any attempts to create    */
      /* individual entries as these would otherwise propage up and */
      /* stop the rest of the list being built, or worse, may even  */
      /* stop the application starting at all. Just get rid of the  */
      /* entry itself if things go wrong.                           */

      entries_before = *entries;

      if (
           repository_build_entry(copy1, entries, count, flags) ||
           *flags != 0
         )
      {
        repository_entry * new = *entries;

        if (new != entries_before)
        {
          *entries = new->prev;
          repository_free_entry(new);

          if (count) (*count)--;
        }
      }
    }

    /* Continue scanning for first level directories */

    e = utils_scan_directory(path, found, sizeof(found), &cont, &read);
  }

  #ifdef TRACE
    if (tl & (1u<<1)) Printf("repository_enumerate_zip: Successful\n");
  #endif

  return NULL;
}

/*************************************************/
/* repository_build_import_path()                */
/*                                               */
/* Finds an appropriate path to import a ROM     */
/* image into. To get the destination filename   */
/* for an import action, append '.' and the      */
/* source image's leafname to the path this      */
/* function builds.                              */
/*                                               */
/* Parameters: Address and size of a buffer to   */
/*             build the path (as a NUL          */
/*             terminated string) into.          */
/*                                               */
/* Assumes:    If there is no found path to use, */
/*             the buffer is not updated.        */
/*             If the buffer is updated, the     */
/*             first char in the buffer will not */
/*             be NUL; so setting it to this     */
/*             before calling the function is a  */
/*             way to detect that no appropriate */
/*             repository path was found.        */
/*************************************************/

_kernel_oserror * repository_build_import_path(char * buffer, unsigned int buffer_size)
{
  _kernel_oserror  * e;

  char              path1[256];
  char              path2[sizeof(path1) + 64];
  char              numbf[11];

  unsigned int      type;
  unsigned int      found = 0;
  unsigned int      high  = 0;
  unsigned int      low   = 0;

  if (!buffer || buffer_size < 2) return NULL;

  /* Does the repository directory exist in the first place? */

  StrNCpy0(path1, task_dir);
  StrNCat0(path1, ".");
  StrNCat0(path1, lookup_token("Repository:Repository",0,0));

  RetError(_swix(OS_File,
                 _INR(0,1) | _OUT(0),

                 17,     /* Read catalogue info */
                 path1,

                 &type)); /* 0 = not found, 1 = file, 2 = dir, 3 = image */

  if (type != 0)
  {
    /* Nope. Now look for 00.00, 00.01 etc. */

    for (high = 0; high < Repository_MaxEntries; high++)
    {
      unsigned int term;

      low = 0;

      sprintf(numbf, "%02d", high);

      strcpy  (path2, path1);
      StrNCat0(path2, ".");
      StrNCat0(path2, numbf);

      term = strlen(path2);

      /* If 'Repository.xx' doesn't exist, can use that */

      RetError(_swix(OS_File,
                     _INR(0,1) | _OUT(0),

                     17,     /* Read catalogue info */
                     path2,

                     &type)); /* 0 = not found, 1 = file, 2 = dir, 3 = image */

      if (type != 0)
      {
        /* If 'Repository.xx.yy' doesn't exist, can use it */

        for (low = 0; low < Repository_MaxEntries; low++)
        {
          path2[term] = '\0';

          sprintf(numbf, "%02d", low);

          StrNCat0(path2, ".");
          StrNCat0(path2, numbf);

          RetError(_swix(OS_File,
                         _INR(0,1) | _OUT(0),

                         17,     /* Read catalogue info */
                         path2,

                         &type)); /* 0 = not found, 1 = file, 2 = dir, 3 = image */

          /* Finally, if 'Repository.xx.yy.' *does* exist, but is empty, we */
          /* can use it; else must find another directory.                  */

          if (type != 0)
          {
            char         items[sizeof(path2) + 256];

            unsigned int read;
            int          cont = 0;

            e = utils_scan_directory(path2, items, sizeof(items), &cont, &read);

            /* So, was it empty? */

            if (e || cont <= 0 || !read)
            {
              found = 1;
              break;
            }
          }
          else
          {
            found = 1;
            break;
          }
        }

        if (found) break;
      }
      else
      {
        found = 1;
        break;
      }
    }
  }
  else found = 1;

  /* If we have something, build the final path and copy the results */
  /* into the given buffer                                           */

  if (found)
  {
    StrNCpy0(path2, task_dir);
    StrNCat0(path2, ".");
    StrNCat0(path2, lookup_token("Repository:Repository",0,0));

    sprintf(numbf, "%02d", high);

    StrNCat0(path2, ".");
    StrNCat0(path2, numbf);

    sprintf(numbf, "%02d", low);

    StrNCat0(path2, ".");
    StrNCat0(path2, numbf);

    strncpy(buffer, path2, buffer_size);
    buffer[buffer_size - 1] = '\0';
  }

  return NULL;
}

/*************************************************/
/* repository_free_entry_contents()              */
/*                                               */
/* Free any data attached to a repository_entry  */
/* structure, but not the structure itself.      */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure who's contents should   */
/*             be freed.                         */
/*************************************************/

static void repository_free_entry_contents(repository_entry * entry)
{
  if (!entry) return;

  if (entry->path)         free(entry->path),         entry->path         = NULL;
  if (entry->name)         free(entry->name),         entry->name         = NULL;
  if (entry->version)      free(entry->version),      entry->version      = NULL;
  if (entry->build_date)   free(entry->build_date),   entry->build_date   = NULL;
  if (entry->build_master) free(entry->build_master), entry->build_master = NULL;

  return;
}

/*************************************************/
/* repository_free_entry()                       */
/*                                               */
/* Free a repository_entry structure and all     */
/* data attached to it; if the structure lies in */
/* a list (its prev and/or next field(s) is/are  */
/* non-NULL) the consistency of the list will be */
/* maintained.                                   */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure to be freed.            */
/*************************************************/

void repository_free_entry(repository_entry * entry)
{
  repository_entry * main,   * zip;
  unsigned int       main_c,   zip_c;
  state_list         state;

  if (!entry) return;

  /* Get overall list details, as we'll need to update them */

  state_get_list_details(&main, &main_c, &zip, &zip_c);
  state = state_get_list_state();

  /* Free data attached to the entry */

  repository_free_entry_contents(entry);

  /* Update pointers to adjacent items */

  if (entry->prev) entry->prev->next = entry->next;
  if (entry->next) entry->next->prev = entry->prev;

  /* Update the overall list details */

  if      (entry == main) main = main->prev;
  else if (entry == zip)  zip  = zip->prev;

  if      (state == in_main_repository) main_c--;
  else if (state == in_zip_list)        zip_c--;

  state_set_list_details(main, main_c, zip, zip_c);

  /* Finally, get rid of the entry */

  free(entry);

  return;
}
