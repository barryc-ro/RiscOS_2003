/***************************************************/
/* File   : KeyControl.c                           */
/*                                                 */
/* Purpose: Handle key presses for the main key    */
/*          processing loop - that's about it.     */
/*          This source file created only because  */
/*          the key handling code looked pretty    */
/*          ugly sitting bang in the middle of     */
/*          main()!                                */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 04-Feb-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "FileOps.h"
#include "FromROSLib.h"
#include "Global.h"
#include "svcprint.h"
#include "Redraw.h"
#include "Repository.h"
#include "State.h"
#include "Utils.h"

#include "KeyControl.h"

/* Static function prototypes */

static _kernel_oserror * keycontrol_crc    (repository_entry * entry);
static _kernel_oserror * keycontrol_export (repository_entry ** selected);
static _kernel_oserror * keycontrol_import (repository_entry ** selected);
static _kernel_oserror * keycontrol_build  (repository_entry ** selected);

/*************************************************/
/* keycontrol_process()                          */
/*                                               */
/* Process a key press for the main keyscan      */
/* loop. 'Q' to quit is a special case and must  */
/* be handled externally.                        */
/*                                               */
/* The function calls show_error_cont for errors */
/* it wants reporting, though it may sometimes   */
/* return minor problems directly.               */
/*                                               */
/* Parameters: Key number, as returned by        */
/*             OS_Byte 121;                      */
/*                                               */
/*             Pointer to a pointer to a         */
/*             repository_entry structure, which */
/*             on entry should point to the      */
/*             currently selected item; on exit  */
/*             it may be updated depending on    */
/*             what key was given;               */
/*                                               */
/*             Pointer to an unsigned int, in    */
/*             which 0 is written if auto-repeat */
/*             should not be allowed on the key  */
/*             else 1 is written.                */
/*************************************************/

_kernel_oserror * keycontrol_process(unsigned int key, repository_entry ** selected, unsigned int * allow)
{
  if (!selected || !*selected || !allow) return NULL;

  *allow = 0;

  switch (key)
  {
    /* Vertical movement within a list */

    case KeyControl_Key_Up:
    {
      show_error_cont(redraw_move_up(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_Down:
    {
      show_error_cont(redraw_move_down(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_PageUp:
    {
      show_error_cont(redraw_page_up(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_PageDown:
    {
      show_error_cont(redraw_page_down(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_Home:
    {
      show_error_cont(redraw_jump_to_home(selected));
    }
    break;

    case KeyControl_Key_End:
    {
      show_error_cont(redraw_jump_to_end(selected));
    }
    break;

    /* Moving between lists */

    case KeyControl_Key_Left:
    case KeyControl_Key_Right:
    {
      show_error_cont(redraw_swap_list(selected));
    }
    break;

    /* Commands */

    case KeyControl_Key_D:
    {
      if (*selected)
      {
        unsigned int result;

        show_error_cont(fileops_delete_repository_image(&result));

        if (result)
        {
          /* Deal with redraw issues. Since we may have now no items in one */
          /* or both lists, it's easiest to just redraw the whole lot and   */
          /* put the selection back to the top - reset the display,         */
          /* basically.                                                     */

          show_error_cont(redraw_draw_default_display(selected));
          state_set_list_selected(*selected);
        }
      }
    }
    break;

    case KeyControl_Key_C:
    {
      show_error_cont(keycontrol_crc(*selected));
    }
    break;

    case KeyControl_Key_E:
    {
      show_error_cont(keycontrol_export(selected));
    }
    break;

    case KeyControl_Key_I:
    {
      show_error_cont(keycontrol_import(selected));
    }
    break;

    case KeyControl_Key_B:
    {
      show_error_cont(keycontrol_build(selected));
    }
    break;
  }

  return NULL;
}

/*************************************************/
/* keycontrol_crc()                              */
/*                                               */
/* Perform pre and post-compression CRC check    */
/* of an image. Will call show_error_cont for    */
/* serious errors and only return non-crticial   */
/* ones directly.                                */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure representing the image  */
/*             to check.                         */
/*************************************************/

static _kernel_oserror * keycontrol_crc(repository_entry * entry)
{
  _kernel_oserror * e;
  unsigned int      key;
  unsigned int      result1, result2;

  /* Check the post-compression value */

  redraw_report_message(lookup_token("CheckPostCRC:Checking post-compression CRC value...",0,0),
                        &scheme.progress_text,
                        &scheme.progress_inner,
                        0);

  e = fileops_check_post_crc(entry, &result1, 1);
  bbc_vdu(BBC_DefaultWindow);
  show_error_cont(e);
  fileops_report_crc_result(result1);

  /* Check the pre-compression value */

  redraw_report_message(lookup_token("CheckPreCRC:Checking pre-compression CRC value...",0,0),
                        &scheme.progress_text,
                        &scheme.progress_inner,
                        0);

  e = fileops_check_pre_crc(entry, &result2, 1);
  bbc_vdu(BBC_DefaultWindow);
  show_error_cont(e);
  fileops_report_crc_result(result2);

  /* Draw conclusions */

  if (!result1 && !result2)
  {
    redraw_report_message(lookup_token("CRCBothOK:Image passed both tests. Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }
  else if (result1 && result2)
  {
    redraw_report_message(lookup_token("CRCBothBad:Image failed both tests! Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }
  else
  {
    redraw_report_message(lookup_token("CRCOneBad:Image passed on test and failed another. Corrupted header perhaps? Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }

  do
  {
    key = utils_get_key();
  }
  while (key != KeyControl_Key_Space);

  /* Redraw the command area */

  return redraw_draw_possible_commands(1);
}

/*************************************************/
/* keycontrol_export()                           */
/*                                               */
/* Export an image from the repository to the    */
/* Zip disc. Will call show_error_cont for       */
/* serious errors and only return non-crticial   */
/* ones directly.                                */
/*                                               */
/* Parameters: Pointer to a pointer to a         */
/*             repository_entry structure        */
/*             representing the image to export; */
/*             since the export will update the  */
/*             Zip disc list if successful, the  */
/*             given pointer will be updated to  */
/*             point to the possibly new         */
/*             selected item after the export.   */
/*************************************************/

static _kernel_oserror * keycontrol_export(repository_entry ** selected)
{
  /* Can only export images from repository to Zip disc */

  if (
       state_get_list_state() == in_main_repository &&
       *selected                                    &&
       (*selected)->path                            &&
       *((*selected)->path)
     )
  {
    char   combuf [2048];
    char   path   [1024];
    char * leaf;

    /* Preserve the image leaf name for the Zip disc */

    leaf = strrchr((*selected)->path, '.');

    if (leaf && *(++leaf))
    {
      _kernel_oserror  * e;
      repository_entry * main;
      repository_entry * zip;
      repository_entry * before;
      unsigned int       main_count;
      unsigned int       zip_count;
      unsigned int       flags;
      unsigned int       type, filenum = 0;

      /* Tell the user what's happening */

      redraw_report_message(lookup_token("Exporting:Exporting image...",0,0),
                            &scheme.progress_text,
                            &scheme.progress_inner,
                            1);

      /* Build a path to the image */

      StrNCpy0(path, lookup_token("Export2:IZipFS::0.$.",0,0));
      StrNCat0(path, leaf);

      /* If the file already exists, choose a new leafname and keep */
      /* trying until we get something that's free!                 */

      do
      {
        show_error_cont(_swix(OS_File,
                              _INR(0,1) | _OUT(0),

                              17,     /* Read catalogue info */
                              path,

                              &type)); /* 0 = not found, 1 = file, 2 = dir, 3 = image */

        if (type != 0)
        {
          char number[11];

          sprintf(number, "%08u", filenum++);

          StrNCpy0(path, lookup_token("Export2:IZipFS::0.$.",0,0));
          StrNCat0(path, number);
        }
      }
      while (type != 0);

      /* Build a command string to copy the image */

      StrNCpy0(combuf, lookup_token("Export1:Copy",0,0));
      StrNCat0(combuf, " ");
      StrNCat0(combuf, (*selected)->path);
      StrNCat0(combuf, " ");
      StrNCat0(combuf, path);
      StrNCat0(combuf, lookup_token("Export3: A~C~DF~L~N~P~Q~RS~T~V",0,0));

      /* Execute the command */

      show_error_cont(_swix(OS_CLI,
                            _IN(0),

                            combuf));

      /* ...then create a new item attached to the Zip list */
      /* (which we have to find from State.c first).        */

      state_get_list_details(&main, &main_count, &zip, &zip_count);

      before = zip;
      e      = repository_build_entry(path, &zip, &zip_count, &flags);

      /* In the event of an error, may need to discard a partially */
      /* formed structure and restore list consistency             */

      if (e || flags != 0)
      {
        if (zip != before)
        {
          repository_free_entry(zip);

          zip = before->prev;
          zip_count --;

          state_set_list_details(main, main_count, zip, zip_count);

          if (!e && (flags & Repository_Enumerate_OutOfMemory)) e = make_no_memory_error(8);

          show_error_cont(e);

          /* If e was NULL but flags didn't say out of memory, won't */
          /* report an error but do want to exit now... Hmm...       */

          return NULL;
        }
      }

      /* Update State.c with the new list details */

      state_set_list_details(main, main_count, zip, zip_count);

      /* Redraw the whole display */

      show_error_cont(redraw_draw_default_display(selected));
      state_set_list_selected(*selected);

      /* Ask if the image CRC values should be checked */

      erb.errnum = Utils_Error_Custom_Message;

      StrNCpy0(erb.errmess,
               lookup_token("CheckExport:Check CRC value of exported image?",
                            0,
                            0));

      if (show_query(&erb)) keycontrol_crc(zip);
    }
  }

  return NULL;
}

/*************************************************/
/* keycontrol_import()                           */
/*                                               */
/* Import an image from the Zip disc to the main */
/* repositoryc. Will call show_error_cont for    */
/* serious errors and only return non-crticial   */
/* ones directly.                                */
/*                                               */
/* Parameters: Pointer to a pointer to a         */
/*             repository_entry structure        */
/*             representing the image to import; */
/*             since the import will update the  */
/*             repository list if successful,    */
/*             the given pointer will be updated */
/*             to point to the possibly new      */
/*             selected item after the import.   */
/*************************************************/

static _kernel_oserror * keycontrol_import(repository_entry ** selected)
{
  unsigned int key;

  /* Can only export images from repository to Zip disc */

  if (
       state_get_list_state() == in_zip_list &&
       *selected                             &&
       (*selected)->path                     &&
       *((*selected)->path)
     )
  {
    char   pathbuf[1024];
    char * leaf;

    /* Preserve the image leaf name for the Zip disc */

    redraw_report_message(lookup_token("ImportScan:Checking for space in repository...",0,0),
                          &scheme.progress_text,
                          &scheme.progress_inner,
                          1);

    *pathbuf = '\0';
    RetError(repository_build_import_path(pathbuf, sizeof(pathbuf)));

    if (*pathbuf == '\0')
    {
      redraw_report_message(lookup_token("ImportFull:Repository full, can't import image. Press space...",0,0),
                            &scheme.error_foreground,
                            &scheme.error_background,
                            1);
      do
      {
        key = utils_get_key();
      }
      while (key != KeyControl_Key_Space);

      show_error_cont(redraw_draw_default_display(selected));
    }
    else
    {
      repository_entry * main;
      unsigned int       ask = 0;

      /* Need to preserve the file's leafname for import */

      leaf = strrchr((*selected)->path, '.');

      if (leaf)
      {
        _kernel_oserror  * e;

        char               combuf [2048];

        repository_entry * zip;
        repository_entry * before;

        unsigned int       main_count;
        unsigned int       zip_count;
        unsigned int       flags;

        /* Tell the user what's happening */

        redraw_report_message(lookup_token("Importing:Importing image...",0,0),
                              &scheme.progress_text,
                              &scheme.progress_inner,
                              1);

        /* Append the leaf name with '.' to give a full destination path */

        StrNCat0(pathbuf, leaf);

        /* Make sure the destination directory exists in the repository */
        /* (the utility function expects an object leafname in the path */
        /* so do this after appending 'leaf').                          */

        show_error_cont(utils_build_tree(pathbuf));

        /* Build a command string to copy the image */

        StrNCpy0(combuf, lookup_token("Import1:Copy",0,0));
        StrNCat0(combuf, " ");
        StrNCat0(combuf, (*selected)->path);
        StrNCat0(combuf, " ");
        StrNCat0(combuf, pathbuf);
        StrNCat0(combuf, lookup_token("Import2: A~C~DF~L~N~P~Q~RS~T~V",0,0));

        /* Execute the command */

        show_error_cont(_swix(OS_CLI,
                              _IN(0),

                              combuf));

        /* ...then create a new item attached to the main list */
        /* (which we have to find from State.c first).         */

        state_get_list_details(&main, &main_count, &zip, &zip_count);

        before = main;
        e      = repository_build_entry(pathbuf, &main, &main_count, &flags);

        /* In the event of an error, may need to discard a partially */
        /* formed structure and restore list consistency             */

        if (e || flags != 0)
        {
          if (main != before)
          {
            repository_free_entry(main);

            main = before->prev;
            main_count --;

            state_set_list_details(main, main_count, zip, zip_count);

            if (!e && (flags & Repository_Enumerate_OutOfMemory)) e = make_no_memory_error(8);

            show_error_cont(e);

            /* If e was NULL but flags didn't say out of memory, won't */
            /* report an error but do want to exit now... Hmm...       */

            return NULL;
          }
        }

        /* Update State.c with the new list details */

        state_set_list_details(main, main_count, zip, zip_count);

        /* Flag success */

        ask = 1;
      }

      /* Redraw the whole display */

      show_error_cont(redraw_draw_default_display(selected));
      state_set_list_selected(*selected);

      /* If we successfully imported, offer to check the image */

      if (ask)
      {
        /* Ask if the image CRC values should be checked */

        erb.errnum = Utils_Error_Custom_Message;

        StrNCpy0(erb.errmess,
                 lookup_token("CheckImport:Check CRC value of imported image?",
                              0,
                              0));

        if (show_query(&erb)) keycontrol_crc(main);
      }
    }
  }

  return NULL;
}

/*************************************************/
/* keycontrol_build()                            */
/*                                               */
/* Export an image from the repository to the    */
/* Zip disc, and copy the Flash ROM programming  */
/* software over. Will call show_error_cont for  */
/* serious errors and only return non-crticial   */
/* ones directly.                                */
/*                                               */
/* Parameters: Pointer to a pointer to a         */
/*             repository_entry structure        */
/*             representing the image to export; */
/*             since the export will update the  */
/*             Zip disc list if successful, the  */
/*             given pointer will be updated to  */
/*             point to the possibly new         */
/*             selected item after the export.   */
/*************************************************/

static _kernel_oserror * keycontrol_build(repository_entry ** selected)
{
  state_list state = state_get_list_state();

  /* Can only build a production disc with images in the repository */

  if (
       state == in_main_repository &&
       *selected                   &&
       (*selected)->path           &&
       *((*selected)->path)
     )
  {
    unsigned int type;

    /* Ask if the image CRC values should be checked */

    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("CheckWipe1:Wipe files off Zip disc first?",
                          0,
                          0));

    if (show_query(&erb))
    {
      erb.errnum = Utils_Error_Custom_Message;

      StrNCpy0(erb.errmess,
               lookup_token("CheckWipe2:Are you sure?",
                            0,
                            0));

      if (show_query(&erb))
      {
        repository_entry * main;
        repository_entry * zip;
        repository_entry * remember;
        unsigned int       main_c;
        unsigned int       zip_c;

        /* Wipe the Zip disc files, ditch the Zip list entries */

        redraw_report_message(lookup_token("BuildProgress1:Wiping Zip disc...",0,0),
                              &scheme.progress_text,
                              &scheme.progress_inner,
                              1);

        /* Ignore any errors here - e.g. "Nothing to delete"! */

        _swix(OS_CLI,
              _IN(0),

              lookup_token("BuildWipe:Wimp IZipFS::0.$.* ~CFR~V",0,0));

        /* We'll need to change the list state and selected item, so remember them first */

        remember = state_get_list_selected();

        do
        {
          state_get_list_details(&main, &main_c, &zip, &zip_c);

          if (zip_c)
          {
            state_set_list_selected(zip);
            state_set_list_state(in_zip_list);

            repository_free_entry(zip);
            zip_c--;
          }
        }
        while (zip_c);

        /* Redraw the whole display - this resets the selected item itself... */

        redraw_draw_default_display(selected);
        state_set_list_selected(*selected);

        /* Finally, ensure we've got the right item selected, albeit not shown */
        /* at the front end, for export purposes.                              */

        *selected = remember;
        state_set_list_selected(remember);
        state_set_list_state(state);
      }
    }

    /* Does the programmer directory exist? If so, copy the contents */

    show_error_cont(_swix(OS_File,
                          _INR(0,1) | _OUT(0),

                          17,
                          lookup_token("BuildCheck:<NCRmgr$Dir>.Programmer",0,0),

                          &type)); /* 0 = not found, 1 = file, 2 = dir, 3 = image */

    if (type == 2 || type == 3)
    {
      redraw_report_message(lookup_token("BuildProgress2:Copying programmer software...",0,0),
                            &scheme.progress_text,
                            &scheme.progress_inner,
                            1);

      show_error_cont(_swix(OS_CLI,
                            _IN(0),

                            lookup_token("BuildCopy:Copy <NCRmgr$Dir>.Programmer.* IZipFS::0.$.* A~C~DF~L~N~P~QRS~T~V",0,0)));

    }

    /* Finally, export the selected ROM image */

    return keycontrol_export(selected);
  }

  return NULL;
}
