/***************************************************/
/* File   : Main.c                                 */
/*                                                 */
/* Purpose: NC ROM manager starting point.         */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 05-Jan-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "toolbox.h"

#include "ASCIIdraw.h"
#include "Colours.h"
//#include "FileOps.h"
#include "FromROSLib.h"
#include "Global.h"
#include "KeyControl.h"
#include "RMA.h"
#include "svcprint.h"
#include "Redraw.h"
#include "Repository.h"
#include "State.h"
#include "Utils.h"

/* Static function prototypes */

static _kernel_oserror * open_messages_file  (void ** retcb);
static void              close_messages_file (void * control);

static void              main_init           (void);
static void              main_quit           (void);

/*************************************************/
/* open_messages_file()                          */
/*                                               */
/* Asks MessageTrans to open a Messages file.    */
/* The Messages file is picked up by reading     */
/* Obey$Dir and appending ".Messages".           */
/*                                               */
/* Use close_messages_file to clean up before    */
/* the application exits.                        */
/*                                               */
/* Parameters: Pointer to a pointer which will   */
/*             be updated with the control block */
/*             pointer if the load is successful */
/*             - the control block is actually a */
/*             block of RMA space with a         */
/*             MessagesFD structure followed by  */
/*             the Messages file pathname.       */
/*************************************************/

static _kernel_oserror * open_messages_file(void ** retcb)
{
  _kernel_oserror * e;
  MessagesFD      * control;

  if (!retcb) return NULL;
  else *retcb = NULL;

  /* Claim RMA for the control block and pathname */

  RetError(rma_claim(sizeof(MessagesFD) + strlen(task_dir) + sizeof(".Messages"), (void *) &control));

  /* Copy the pathname into the control block */

  strcpy((char *) ((int) control + sizeof(MessagesFD)), task_dir);
  strcat((char *) ((int) control + sizeof(MessagesFD)), ".Messages");

  /* Open the file */

  e = _swix(MessageTrans_OpenFile,
            _INR(0,2),

            control,                            /* Pointer to control block */
            (int) control + sizeof(MessagesFD), /* Filename                 */
            0);                                 /* Buffer in RMA            */

  /* Deal with any errors or record the control block's address, and exit */

  if (e) rma_release(control);
  else *retcb = (void *) control;

  return e;
}

/*************************************************/
/* close_messages_file()                         */
/*                                               */
/* Closes a messges file and releases the RMA    */
/* space claimed for it.                         */
/*                                               */
/* Parameters: Pointer to the allocated chunk of */
/*             RMA space holding the             */
/*             MessageTrans control block and    */
/*             Messages file pathname.           */
/*************************************************/

static void close_messages_file(void * control)
{
  /* If the file won't close for some reason, */
  /* MessageTrans may still want to access it */
  /* - so safest *not* to release the RMA     */
  /* holding the control block and filename.  */

  if (
       _swix(MessageTrans_CloseFile,
             _IN(0),

             control)
     )
     return;

  /* Release the claimed RMA space holding the */
  /* control block and messages file name.     */

  rma_release(control);
}

/*************************************************/
/* main_init()                                   */
/*                                               */
/* Some rudimentary initialisation.              */
/*************************************************/

static void main_init(void)
{
  show_error(open_messages_file((void **) &meb));

  atexit(main_quit);

  colours_fill_scheme_by_rgb(&scheme,

                             Colours_DullBlue,                                         /* Background */

                             Colours_LowGrey,  Colours_DullGrey,    Colours_White,     /* Title outer, inner, text */
                             Colours_LowGrey,  Colours_DullMagenta, Colours_LowWhite,  /* Repository list outer, inner, text */
                             Colours_LowGrey,  Colours_DullCyan,    Colours_LowWhite,  /* Zip list outer, inner, text */

                             Colours_LowGrey,                                          /* Command area outer */
                             Colours_DullGrey, Colours_Yellow,                         /* Command area inner, text (commands) */
                             Colours_DullGrey, Colours_Cyan,                           /* Command area inner, text (progress) */

                             Colours_White,    Colours_Blue,                           /* Highlighted foreground, background */

                             Colours_Yellow,   Colours_Red,                            /* Error / failure foreground, background */
                             Colours_White,    Colours_LowGreen);                      /* Success foreground, background */

  /* Define character-based graphics for arrows. From IKHG. */

  bbc_vduq(23, 136, 0x00, 0x18, 0x38, 0x7F, 0x38, 0x18, 0x00, 0x00); /* L */
  bbc_vduq(23, 137, 0x00, 0x18, 0x1C, 0xFE, 0x1C, 0x18, 0x00, 0x00); /* R */
  bbc_vduq(23, 138, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00); /* D */
  bbc_vduq(23, 139, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00); /* U */
}

/*************************************************/
/* main_quit()                                   */
/*                                               */
/* Used as an atexit() function.                 */
/*************************************************/

static void main_quit(void)
{
  /* Remove any hourglass */

  _swix(Hourglass_Smash, 0);

  /* Get rid of the "Press space or click mouse to continue" prompt */

  _swix(Wimp_CommandWindow,
        _IN(0),

        -1);

  /* Close the Messages file, freeing associated claimed RMA space */

  close_messages_file(meb);
}

/*************************************************/
/* main()                                        */
/*                                               */
/* That which runs before all others.            */
/*************************************************/

int main(int argc, char * argv[])
{
  repository_entry * repository = NULL;
  repository_entry * zip        = NULL;
  repository_entry * selected   = NULL;

  unsigned int       repository_count, zip_count;

  unsigned int       key;
  unsigned int       flags;
  unsigned int       delay, rate, timer;
  unsigned int       allow;

//  _kernel_oserror  * e1;

  /* Before initialisation, find out where we ran from - this */
  /* software can support different application names, so the */
  /* existance of a specific system variable cannot be relied */
  /* upon (with the exception of ROM builds).                 */

  {
    int    len;
    char * item;

    /* Work out what path to go through */

    #ifdef ROM

      item = "Resources:$.Resources.NCRmgr";
      len  = strlen(item);

    #else

      item = argv[0];
      len  = strlen(item) - strlen(".!RunImage");

    #endif

    /* Allocate the space, bomb out if it fails */

    task_dir = malloc(len + 1);

    if (!task_dir)
    {
      erb.errnum = Utils_Error_Custom_Fatal;
      strcpy(erb.errmess, "There is insufficient free memory to start the application.");
      show_error(&erb);
    }

    /* Copy the information and ensure it is terminated correctly */

    strncpy(task_dir, item, len);
    task_dir[len] = 0;
  }

  #ifdef TRACE

    {
      int argp = 1;

      /* Handle -d[ebug] CLI switch; see Global.c for more information. */
      /* This must be the first command line argument.                  */

      if (argc >= argp + 1)
      {
        if (!strcmp(argv[argp],"-debug") | !strcmp(argv[argp],"-d"))
        {
          if (strstr(argv[argp + 1], "MsgT")) tl |= (1u<<0);
          if (strstr(argv[argp + 1], "RepM")) tl |= (1u<<1);
          if (strstr(argv[argp + 1], "Rout")) tl |= (1u<<2);
          if (strstr(argv[argp + 1], "LMem")) tl |= (1u<<12);

          if (strstr(argv[argp + 1], "All"))  tl  = 0xffffffff;

          argp += 2;
        }
      }
    }

    if (tl & (1u<<2)) Printf("\nmain: Hello.\n\n");

  #endif

  main_init();
  asciidraw_set_mode(21);

  _swix(Hourglass_On, 0);

  flags = Repository_Enumerate_DisplayProgress;
  show_error(repository_enumerate(&repository, &repository_count, &flags));

//  e1 = fileops_check_zip_disc();
//
//  if (!e1)
//  {
    flags = 0;
    show_error(repository_enumerate_zip(&zip, &zip_count, &flags));
//  }
//  else zip_count = 0;

  _swix(Hourglass_Off, 0);

  /* Record the above results */

  state_set_list_details(repository, repository_count, zip, zip_count);

  #ifdef TRACE
    if (tl & (1u<<2)) Printf("main: Repositorites enumerated; zip = %p, main = %p\n",zip,repository);
  #endif

  /* show_error_cont will jump back here if the error is accepted */

  setjmp(env);

  selected = NULL;
  show_error(redraw_draw_default_display(&selected));

  /* Make cursor keys return keycodes */

  _swix(OS_Byte,
        _INR(0,1),

        4,
        1);

  /* Repeat current keyboard auto-repeat delay and rate */

  if (
       _swix(OS_Byte,
             _INR(0,2) | _OUT(1),

             196, /* Read delay */
             0,
             0xffffffff,

             &delay)
     )
     delay = 50;

  if (
       _swix(OS_Byte,
             _INR(0,2) | _OUT(1),

             197, /* Read rate */
             0,
             0xffffffff,

             &rate)
     )
     rate = 10;

  /* Main key scan loop */

  timer = delay;
  allow = 1; /* Allow auto-repeat */

  #ifdef TRACE
    if (tl & (1u<<2)) Printf("main: Going into main keyscan loop\n");
  #endif

  for (;;)
  {
    unsigned int start, now;

    _swix(OS_ReadMonotonicTime, _OUT(0), &start);

    /* Debounce / auto-repeat implementation */

    do
    {
      _swix(OS_Byte,
            _INR(0,1) | _OUT(1),

            121,
            0,

            &key);

      _swix(OS_ReadMonotonicTime, _OUT(0), &now);

      if (allow && now - start >= timer) break;
    }
    while (key != KeyControl_Key_NoKey);

    /* Handle switch from repeat delay, to rate, and back */

    if (key != KeyControl_Key_NoKey && allow) timer = rate;
    else                                      timer = delay;

    /* Real keyscan. We use a timer here for Zip discs */

    _swix(OS_ReadMonotonicTime, _OUT(0), &start);

    do
    {
      _swix(OS_Byte,
            _INR(0,1) | _OUT(1),

            121,
            0,

            &key);

//      _swix(OS_ReadMonotonicTime, _OUT(0), &now);
//
//      if (now - start >= FileOps_ZipPollDelay)
//      {
//        _kernel_oserror * e2 = fileops_check_zip_disc();
//
//        /* If we move out of an error condition, scan the */
//        /* Zip disc for images straight away              */
//
//        if (!e2 && e1)
//        {
//          e1 = e2;
//          show_error_cont(repository_enumerate_zip(&zip, &zip_count, &flags));
//
//          /* Jump back to the redraw start point */
//
//          longjmp(env, 2);
//        }
//      }
    }
    while (key == KeyControl_Key_NoKey);

    /* Deal with the key press */

    if (key == KeyControl_Key_Q) break;
    keycontrol_process(key, &selected, &allow);
  }

  #ifdef TRACE
    if (tl & (1u<<2)) Printf("main: Closing down\n");
  #endif

  /* Ensure keyboard buffer is flushed */

  _swix(Hourglass_On, 0);

  do
  {
    _swix(OS_Byte,
          _INR(0,1) | _OUT(1),

          121,
          0,

          &key);
  }
  while (key != KeyControl_Key_NoKey);

  _swix(Hourglass_Off, 0);

  _swix(OS_Byte,
        _INR(0,1),

        21,
        0);

  /* Finished! */

  #ifdef TRACE
    if (tl & (1u<<2)) Printf("\nmain: Finished. Anything following is down to atexit() registration.\n\n");
  #endif

  exit(EXIT_SUCCESS);
}
