/***************************************************/
/* File   : Colours.c                              */
/*                                                 */
/* Purpose: Colour handling functions.             */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 05-Jan-1999: Created.                  */
/***************************************************/

#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "Colours.h"

/*************************************************/
/* colours_fill_by_rgb()                         */
/*                                               */
/* Fill in a colour structure by RGB values.     */
/* Makes it easier to use the defined items in   */
/* Colours.h.                                    */
/*                                               */
/* Parameters: Pointer to the colour structure   */
/*             to fill in;                       */
/*                                               */
/*             R, G and B values to use, in that */
/*             order.                            */
/*************************************************/

void colours_fill_by_rgb(colour * c, unsigned char r, unsigned char g, unsigned char b)
{
  if (!c) return;

  c->r = r;
  c->g = g;
  c->b = b;
}

/*************************************************/
/* colours_fill_scheme_by_rgb()                  */
/*                                               */
/* Fill in a given colour_scheme struct using    */
/* RGB values (could for example pass in the     */
/* groups of values defined in Colours.h).       */
/*                                               */
/* Yes, it's a ridiculous function prototype,    */
/* but the function body shows how tedious it'd  */
/* be to pass in colour structs or fill the      */
/* colour_scheme structure in elsewhere. By      */
/* using #defined groups of three values, the    */
/* function *calls* will look OK.                */
/*                                               */
/* Parameters: Pointer to a colour structure     */
/*             describing the required colour;   */
/*                                               */
/*             RGB values for the background,    */
/*             list title outer, inner and text  */
/*             colours; repository list outer,   */
/*             inner and text colours, and same  */
/*             for the zip disc list and command */
/*             area; and the foreground and      */
/*             background colour of highlighted  */
/*             items, and back / foreground      */
/*             colour of any error messages, and */
/*             the same for queries, in that     */
/*             order.                            */
/*************************************************/

void colours_fill_scheme_by_rgb(colour_scheme * c,

                                unsigned char backr, unsigned char backg, unsigned char backb,

                                unsigned char tiour, unsigned char tioug, unsigned char tioub,
                                unsigned char tiinr, unsigned char tiing, unsigned char tiinb,
                                unsigned char titer, unsigned char titeg, unsigned char titeb,

                                unsigned char reour, unsigned char reoug, unsigned char reoub,
                                unsigned char reinr, unsigned char reing, unsigned char reinb,
                                unsigned char reter, unsigned char reteg, unsigned char reteb,
                                unsigned char ziour, unsigned char zioug, unsigned char zioub,
                                unsigned char ziinr, unsigned char ziing, unsigned char ziinb,
                                unsigned char ziter, unsigned char ziteg, unsigned char ziteb,

                                unsigned char coour, unsigned char cooug, unsigned char cooub,
                                unsigned char coinr, unsigned char coing, unsigned char coinb,
                                unsigned char coter, unsigned char coteg, unsigned char coteb,
                                unsigned char prinr, unsigned char pring, unsigned char prinb,
                                unsigned char prter, unsigned char prteg, unsigned char prteb,

                                unsigned char hifor, unsigned char hifog, unsigned char hifob,
                                unsigned char hibar, unsigned char hibag, unsigned char hibab,

                                unsigned char erfor, unsigned char erfog, unsigned char erfob,
                                unsigned char erbar, unsigned char erbag, unsigned char erbab,
                                unsigned char sufor, unsigned char sufog, unsigned char sufob,
                                unsigned char subar, unsigned char subag, unsigned char subab)
{
  c->background.r               = backr;
  c->background.g               = backg;
  c->background.b               = backb;

  c->title_outer.r              = tiour;
  c->title_outer.g              = tioug;
  c->title_outer.b              = tioub;
  c->title_inner.r              = tiinr;
  c->title_inner.g              = tiing;
  c->title_inner.b              = tiinb;
  c->title_text.r               = titer;
  c->title_text.g               = titeg;
  c->title_text.b               = titeb;

  c->repository_outer.r         = reour;
  c->repository_outer.g         = reoug;
  c->repository_outer.b         = reoub;
  c->repository_inner.r         = reinr;
  c->repository_inner.g         = reing;
  c->repository_inner.b         = reinb;
  c->repository_text.r          = reter;
  c->repository_text.g          = reteg;
  c->repository_text.b          = reteb;
  c->zip_outer.r                = ziour;
  c->zip_outer.g                = zioug;
  c->zip_outer.b                = zioub;
  c->zip_inner.r                = ziinr;
  c->zip_inner.g                = ziing;
  c->zip_inner.b                = ziinb;
  c->zip_text.r                 = ziter;
  c->zip_text.g                 = ziteg;
  c->zip_text.b                 = ziteb;

  c->commands_outer.r           = coour;
  c->commands_outer.g           = cooug;
  c->commands_outer.b           = cooub;
  c->commands_inner.r           = coinr;
  c->commands_inner.g           = coing;
  c->commands_inner.b           = coinb;
  c->commands_text.r            = coter;
  c->commands_text.g            = coteg;
  c->commands_text.b            = coteb;
  c->progress_inner.r           = prinr;
  c->progress_inner.g           = pring;
  c->progress_inner.b           = prinb;
  c->progress_text.r            = prter;
  c->progress_text.g            = prteg;
  c->progress_text.b            = prteb;

  c->highlighted_foreground.r   = hifor;
  c->highlighted_foreground.g   = hifog;
  c->highlighted_foreground.b   = hifob;
  c->highlighted_background.r   = hibar;
  c->highlighted_background.g   = hibag;
  c->highlighted_background.b   = hibab;

  c->error_foreground.r         = erfor;
  c->error_foreground.g         = erfog;
  c->error_foreground.b         = erfob;
  c->error_background.r         = erbar;
  c->error_background.g         = erbag;
  c->error_background.b         = erbab;
  c->success_foreground.r       = sufor;
  c->success_foreground.g       = sufog;
  c->success_foreground.b       = sufob;
  c->success_background.r       = subar;
  c->success_background.g       = subag;
  c->success_background.b       = subab;

  return;
}

/*************************************************/
/* colours_set_text_foreground()                 */
/*                                               */
/* Sets the text foreground colour.              */
/*                                               */
/* Parameters: Pointer to a colour structure     */
/*             describing the required colour.   */
/*************************************************/

_kernel_oserror * colours_set_text_foreground(colour * c)
{
  unsigned int palette_entry;

  if (!c) return NULL;

  palette_entry = (c->b << 24) + (c->g << 16) + (c->r << 8);

  return _swix(ColourTrans_SetTextColour,
               _IN(0) | _IN(3),

               palette_entry,
               Colours_ColourTrans_SetTextColour_Foreground); /* See Colours.h */
}

/*************************************************/
/* colours_set_text_background()                 */
/*                                               */
/* Sets the text background colour.              */
/*                                               */
/* Parameters: Pointer to a colour structure     */
/*             describing the required colour.   */
/*************************************************/

_kernel_oserror * colours_set_text_background(colour * c)
{
  unsigned int palette_entry;

  if (!c) return NULL;

  palette_entry = (c->b << 24) + (c->g << 16) + (c->r << 8);

  return _swix(ColourTrans_SetTextColour,
               _IN(0) | _IN(3),

               palette_entry,
               Colours_ColourTrans_SetTextColour_Background); /* See Colours.h */
}
