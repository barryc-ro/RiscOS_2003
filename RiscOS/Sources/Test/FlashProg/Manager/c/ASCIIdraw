/***************************************************/
/* File   : ASCIIDraw.c                            */
/*                                                 */
/* Purpose: Drawing functions based around a       */
/*          character-mapped style of display.     */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 05-Jan-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "Colours.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "ASCIIdraw.h"

/*************************************************/
/* asciidraw_set_mode()                          */
/*                                               */
/* Change to the given screen mode. Only         */
/* pre-Risc PC numerical modes are supported.    */
/* The cursor is turned off after the mode has   */
/* been entered.                                 */
/*                                               */
/* Parameters: "Old-style" mode number to change */
/*             to.                               */
/*************************************************/

_kernel_oserror * asciidraw_set_mode(unsigned int mode)
{
  RetError(bbc_vduq(BBC_ScreenMode, mode));

  return (bbc_vduq(BBC_MultiPurpose,
                   1, /* Cursor control */
                   0, /* Hide cursor    */
                   0, 0, 0, 0, 0, 0, 0));
}

/*************************************************/
/* asciidraw_move()                              */
/*                                               */
/* Position the text cursor at the given (x,y)   */
/* coordinate.                                   */
/*                                               */
/* Parameters: (x,y) coordinate for text cursor, */
/*             with (0,0) at the top left.       */
/*************************************************/

_kernel_oserror * asciidraw_move(unsigned int x, unsigned int y)
{
  return bbc_vduq(BBC_MoveText, x, y);
}

/*************************************************/
/* asciidraw_write_centred()                     */
/*                                               */
/* Plot some text centred horizontally between   */
/* the given inclusive x coordinates.            */
/*                                               */
/* All coordinates are in character cells, i.e.  */
/* 8x8 blocks of pixels.                         */
/*                                               */
/* Parameters: Lefthand inclusive x coordinate   */
/*             of region in which to centre      */
/*             text;                             */
/*                                               */
/*             Similarly, righthand x coord;     */
/*                                               */
/*             y coordinate to plot at where     */
/*             (0,0) is top left;                */
/*                                               */
/*             String to plot.                   */
/*************************************************/

_kernel_oserror * asciidraw_write_centred(unsigned int leftx, unsigned int rightx, unsigned int y, const char * text)
{
  int x, len;

  if (!text || !*text) return NULL;

  len = strlen(text);

  x = leftx + (rightx - leftx - len + 1) / 2;
  if (x < leftx) x = leftx;

  RetError(asciidraw_move(x, y));

  return _swix(OS_Write0,
               _IN(0),

               text);
}

/*************************************************/
/* asciidraw_filled_rectangle()                  */
/*                                               */
/* Draw a simple filled rectangle using the      */
/* current text background colour.               */
/*                                               */
/* Parameters: Top left hand corner coordinate,  */
/*             inclusive, in characters with     */
/*             (0,0) as top left of screen;      */
/*                                               */
/*             Rectangle width in characters;    */
/*                                               */
/*             Rectangle height in characters.   */
/*************************************************/

_kernel_oserror * asciidraw_filled_rectangle(unsigned int x, unsigned int y,
                                             unsigned int w, unsigned int h)
{
  char vdu_sequence[7];

  vdu_sequence[0] = BBC_DefTextWindow;
  vdu_sequence[1] = x;
  vdu_sequence[2] = y + h - 1;
  vdu_sequence[3] = x + w - 1;
  vdu_sequence[4] = y;

  vdu_sequence[5] = BBC_ClearText;

  vdu_sequence[6] = BBC_DefaultWindow;

  return _swix(OS_WriteN,
               _INR(0,1),

               vdu_sequence,
               sizeof(vdu_sequence));
}

/*************************************************/
/* asciidraw_open_box()                          */
/*                                               */
/* Draw an unfilled box with sides the width and */
/* height of a whole character.                  */
/*                                               */
/* Parameters: Pointer to a colour structure     */
/*             giving the colours for the box;   */
/*                                               */
/*             Top left hand corner coordinate,  */
/*             inclusive, in characters with     */
/*             (0,0) as top left of screen;      */
/*                                               */
/*             Box width in characters;          */
/*                                               */
/*             Box height in characters.         */
/*************************************************/

_kernel_oserror * asciidraw_open_box(colour * c,
                                     unsigned int x, unsigned int y,
                                     unsigned int w, unsigned int h)
{
  RetError(colours_set_text_background(c));

  RetError(asciidraw_filled_rectangle(x,         y,         w, 1));
  RetError(asciidraw_filled_rectangle(x,         y,         1, h));
  RetError(asciidraw_filled_rectangle(x + w - 1, y,         1, h));
  return  (asciidraw_filled_rectangle(x,         y + h - 1, w, 1));
}

/*************************************************/
/* asciidraw_filled_box()                        */
/*                                               */
/* Draw a filled box with sides the width and    */
/* height of a whole character.                  */
/*                                               */
/* Parameters: Pointer to a colour structure     */
/*             giving the colours for the box    */
/*             outline;                          */
/*                                               */
/*             Pointer to a colour structure     */
/*             giving the colours for the box    */
/*             contents;                         */
/*                                               */
/*             Top left hand corner coordinate,  */
/*             inclusive, in characters with     */
/*             (0,0) as top left;                */
/*                                               */
/*             Box width in characters;          */
/*                                               */
/*             Box height in characters.         */
/*************************************************/

_kernel_oserror * asciidraw_filled_box(colour * outer,
                                       colour * inner,
                                       unsigned int x, unsigned int y,
                                       unsigned int w, unsigned int h)
{
  RetError(asciidraw_open_box(outer,
                              x, y,
                              w, h));

  if (w > 2 && h > 2)
  {
    RetError(colours_set_text_background(inner));
    return asciidraw_filled_rectangle(x + 1, y + 1, w - 2, h - 2);
  }
  else return NULL;
}
