/***************************************************/
/* File   : State.c                                */
/*                                                 */
/* Purpose: Where global state exists, keep track  */
/*          of it and present a clear get / set    */
/*          interface.                             */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 26-Jan-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "Repository.h"

#include "State.h"

/* Locals */

static repository_entry * zip_tail      = NULL;
static unsigned int       zip_count     = 0;

static state_list         list_state    = nothing_selected;
static repository_entry * list_selected = NULL;

/*************************************************/
/* state_set_list_details()                      */
/*                                               */
/* Record the tail entry of the main and Zip     */
/* disc lists and the number of entries in each. */
/*                                               */
/* Parameters: Pointer to the tail entry of the  */
/*             Zip disc list;                    */
/*                                               */
/*             Number of items in it.            */
/*************************************************/

void state_set_list_details(repository_entry * zip,  unsigned int zip_c)
{
  zip_tail   = zip;
  zip_count  = zip_c;
}

/*************************************************/
/* state_get_list_details()                      */
/*                                               */
/* Retrieve the tail entry of the main and Zip   */
/* disc lists and the number of entries in each. */
/*                                               */
/* Parameters: Pointer to a repository_entry     */
/*             pointer which will be updated to  */
/*             point to the tail entry of the    */
/*             Zip disc list;                    */
/*                                               */
/*             Pointer to an unsigned int which  */
/*             will be updated with the number   */
/*             of items in the Zip disc list.    */
/*                                               */
/* Assumes:    Either of the above may be NULL.  */
/*************************************************/

void state_get_list_details(repository_entry ** zip,  unsigned int * zip_c)
{
  if (zip)    *zip    = zip_tail;
  if (zip_c)  *zip_c  = zip_count;
}

/*************************************************/
/* state_set_list_state()                        */
/*                                               */
/* Set the current list state - no item is       */
/* selected, a main repository item is selected, */
/* or a Zip disc item is selected.               */
/*                                               */
/* Parameters: State to set.                     */
/*************************************************/

void state_set_list_state(state_list state)
{
  list_state = state;
}

/*************************************************/
/* state_get_list_state()                        */
/*                                               */
/* Get the current list state - no item is       */
/* selected, a main repository item is selected, */
/* or a Zip disc item is selected.               */
/*                                               */
/* Returns:    Current list state.               */
/*************************************************/

state_list state_get_list_state(void)
{
  return list_state;
}

/*************************************************/
/* state_set_list_selected()                     */
/*                                               */
/* In addition to recording where, for quick     */
/* reference, a selected item (if any) is in the */
/* repository or Zip disc lists, use this to     */
/* keep a record of the pointer to the selected  */
/* item itself.                                  */
/*                                               */
/* Parameters: Pointer to the selected item (may */
/*             be NULL, if that's what you want  */
/*             to record).                       */
/*************************************************/

void state_set_list_selected(repository_entry * entry)
{
  list_selected = entry;
}

/*************************************************/
/* state_get_list_selected()                     */
/*                                               */
/* Return the value recorded through             */
/* state_set_list_selected, which defaults to    */
/* NULL if the above hasn't been called before.  */
/*                                               */
/* Returns:    Pointer value recorded using      */
/*             state_set_list_selected, or NULL  */
/*             if that's not been called yet.    */
/*************************************************/

repository_entry * state_get_list_selected(void)
{
  return list_selected;
}
