/***************************************************/
/* File   : Utils.c                                */
/*                                                 */
/* Purpose: Infrequently altered utilities.        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Jan-1999: Created from Browse       */
/*                       source code.              */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "toolbox.h"
#include "wimp.h"

#include "FromROSLib.h"
#include "Global.h"
#include "KeyControl.h"
#include "Limits.h"
#include "Redraw.h"
#include "svcprint.h"

#include "Utils.h"

/* Static function prototypes */

static char * lookup_in_given (const MessagesFD * control, const char * s, int flag, const char * arg);

/*************************************************/
/* lookup_token()                                */
/*                                               */
/* Returns a pointer to an expanded message      */
/* token, or '!' if there was an error.          */
/*                                               */
/* NB, due to various limitations of C, the      */
/* lookup is done into a global fixed-size       */
/* buffer. So if you pass multiple calls to this */
/* function in as parameters to something else,  */
/* *it will fail* as each call points to the     */
/* same buffer (which will only contain data     */
/* from the last call).                          */
/*                                               */
/* Parameters: Pointer to a message token;       */
/*                                               */
/*             1 to report an error if the token */
/*             isn't found as well as returning  */
/*             a string of '!', else 0;          */
/*                                               */
/*             An optional pointer to an         */
/*             argument to substitute into the   */
/*             looked up string, or NULL.        */
/*                                               */
/* Returns:    Pointer to the full message text  */
/*             or '!' to signal an error; never  */
/*             a null pointer.                   */
/*                                               */
/* Assumes:    That the pointer to the message   */
/*             token is never NULL.              */
/*************************************************/

char * lookup_token(const char * s, int flag, const char * arg)
{
  #ifdef TRACE
    if (tl & (1u<<0)) Printf("lookup_token: Called, exitting through lookup_in_given\n");
  #endif

  return lookup_in_given(meb, s, flag, arg);
}

/*************************************************/
/* lookup_in_given()                             */
/*                                               */
/* Workhorse back-end to lookup_token,           */
/* lookup_choice and so-on. See lookup_token     */
/* for more information.                         */
/*                                               */
/* Parameters: A MessagesFD pointer, giving the  */
/*             control block of the file to      */
/*             look in;                          */
/*                                               */
/*             Pointer to a message token;       */
/*                                               */
/*             1 to report an error if the token */
/*             isn't found as well as returning  */
/*             a string of '!', else 0;          */
/*                                               */
/*             An optional pointer to an         */
/*             argument to substitute into the   */
/*             looked up string, or NULL.        */
/*                                               */
/* Returns:    Pointer to the full message text  */
/*             or '!' to signal an error; never  */
/*             a null pointer.                   */
/*                                               */
/* Assumes:    That the pointer to the message   */
/*             token is never NULL.              */
/*************************************************/

static char * lookup_in_given(const MessagesFD * control, const char * s, int flag, const char * arg)
{
  _kernel_oserror * e;

  #ifdef TRACE
    if (tl & (1u<<0)) Printf("lookup_in_given: Lookup token '%s'\n",s);
  #endif

  if (strcmp(lasttokn, s))
  {
    #ifdef TRACE
      if (tl & (1u<<0)) Printf("lookup_in_given: Proceeding\n");
    #endif

    StrNCpy0(lasttokn, s);

    e = _swix(MessageTrans_Lookup,
              _INR(0,7),

              control,            /* Pointer to control block               */
              s,                  /* String to look up                      */
              tokens,             /* Global buffer to take looked up string */
              sizeof(tokens) - 1, /* Size of the buffer                     */
              arg,                /* Parameter 0                            */
              0,                  /* Parameter 1                            */
              0,                  /* Parameter 2                            */
              0);                 /* Parameter 3                            */

    tokens[Limits_Message - 1] = 0;

    if (e)
    {
      /* If the lookup fails, put '!' into the lookup buffer and if the */
      /* flag passed into the function is 1, report the error too.      */

      #ifdef TRACE
        if (tl & (1u<<0)) Printf("lookup_in_given: Failed\n");
      #endif

      *lasttokn = 0;
      strcpy(tokens, "!");

      if (flag == 1) show_error_cont(e);
    }
  }

  #ifdef TRACE
    if (tl & (1u<<0)) Printf("lookup_in_given: Returning %s\n",tokens);
  #endif

  return (char *) &tokens;
}

/*************************************************/
/* show_error()                                  */
/*                                               */
/* Reports a (generally serious) error and exits */
/* with EXIT_FAILURE.                            */
/*                                               */
/* Parameters: Pointer to a _kernel_oserror      */
/*             structure.                        */
/*                                               */
/* Assumes:    The pointer may be NULL.          */
/*************************************************/

void show_error(_kernel_oserror * e)
{
  if (e && e->errmess)
  {
    _swix(Hourglass_Smash, 0);

    bbc_vdu(BBC_Bell);
    bbc_vdu(BBC_ClearText);

    printf("%s\n", e->errmess);
    utils_get_key();

    exit(EXIT_FAILURE);
  }
}

/*************************************************/
/* show_error_cont()                             */
/*                                               */
/* Reports a (generally less serious) error and  */
/* either quit or jump back to the main keyscan  */
/* loop.                                         */
/*                                               */
/* Parameters: Pointer to a _kernel_oserror      */
/*             structure.                        */
/*                                               */
/* Assumes:    The pointer may be NULL.          */
/*************************************************/

void show_error_cont(_kernel_oserror * e)
{
  if (e && e->errmess)
  {
    unsigned int key;

    _swix(Hourglass_Smash, 0);

    bbc_vdu(BBC_Bell);

    /* Yuk, don't like having to call back to Redraw.c, but this */
    /* other file does already have the right things defined and */
    /* included.                                                 */

    redraw_report_error(e, "Continue:Press A to accept and continue or Q to quit");

    /* Local keyscan loop - wait until no key is pressed, */
    /* then get a keypress. Wait for it to be released,   */
    /* ensure the keyboard buffer is flushed just to be   */
    /* sure, and act on the keypress.                     */

    do
    {
      key = utils_get_key();
    }
    while (key != 255 && key != 16 /* 'Q' */ && key != 65 /* 'A' */);

    /* What were we asked to do? */

    if (key == 65)
    {
      longjmp(env, 1);
    }
    else
    {
      /* Quit */

      exit(EXIT_FAILURE);
    }
  }
}

/*************************************************/
/* show_query()                                  */
/*                                               */
/* Report a message and give Yes / No answer     */
/* options.                                      */
/*                                               */
/* Parameters: Pointer to a _kernel_oserror      */
/*             structure for the query.          */
/*                                               */
/* Returns:    1 for Yes, 0 for No. If given     */
/*             NULL as a parameter, return value */
/*             is undefined.                     */
/*                                               */
/* Assumes:    The pointer may be NULL.          */
/*************************************************/

unsigned int show_query(_kernel_oserror * e)
{
  if (e && e->errmess)
  {
    unsigned int key;

    _swix(Hourglass_Smash, 0);

    bbc_vdu(BBC_Bell);

    /* Yuk, don't like having to call back to Redraw.c, but this */
    /* other file does already have the right things defined and */
    /* included.                                                 */

    redraw_report_error(e, "Query:Press Y for Yes or N for No");

    /* Local keyscan loop - wait until no key is pressed, */
    /* then get a keypress. Wait for it to be released,   */
    /* ensure the keyboard buffer is flushed just to be   */
    /* sure, and act on the keypress.                     */

    do
    {
      key = utils_get_key();
    }
    while (key != 255 && key != 68 /* 'Y' */ && key != 85 /* 'N' */);

    redraw_draw_possible_commands(1);

    if (key == 68) return 1;
  }

  return 0;
}

/*************************************************/
/* make_no_memory_error()                        */
/*                                               */
/* A general error generation routine for failed */
/* memory claims. Stores the error in the global */
/* error block 'erb'.                            */
/*                                               */
/* Parameters: A numerical value to include in   */
/*             the message to help the           */
/*             programmer know where the error   */
/*             came from.                        */
/*************************************************/

_kernel_oserror * make_no_memory_error(int stage)
{
  char num[20];

  sprintf(num, "%d", stage);

  erb.errnum = Utils_Error_Custom_Normal;

  StrNCpy0(erb.errmess,
           lookup_token("NoMemGen:There is not enough free memory to continue this operation (%0)",
                        0,
                        num));

  return &erb;
}

/*************************************************/
/* utils_make_zlib_error()                       */
/*                                               */
/* A general error generation routine for failed */
/* zlib calls. Stores the error in the global    */
/* error block 'erb'.                            */
/*                                               */
/* Parameters: A numerical value as returned by  */
/*             the failing zlib routine.         */
/*************************************************/

_kernel_oserror * utils_make_zlib_error(int err)
{
  char num[20];

  sprintf(num, "%d", err);

  erb.errnum = Utils_Error_Custom_Normal;

  StrNCpy0(erb.errmess,
           lookup_token("ZLibErr:Error from ZLib (%0)",
                        0,
                        num));

  return &erb;
}

/*************************************************/
/* intersection()                                */
/*                                               */
/* Takes two BBoxes and returns a pointer to a   */
/* third which is the the intersection between   */
/* the first two, or NULL, if they don't         */
/* intersect.                                    */
/*                                               */
/* Parameters: Pointer to a BBox;                */
/*                                               */
/*             Pointer to another BBox.          */
/*                                               */
/* Returns:    Pointer to a BBox which is the    */
/*             intersection of the given two,    */
/*             or NULL, if they don't intersect. */
/*************************************************/

BBox * intersection(BBox * a, BBox * b)
{
  static BBox intersect;

  #define max(a,b) ((a) > (b) ? (a) : (b))
  #define min(a,b) ((a) < (b) ? (a) : (b))

  if (!a || !b) return NULL;

  if ((a->xmin >= b->xmax) || (a->xmax <= b->xmin) || (a->ymin >= b->ymax) || (a->ymax <= b->ymin)) return NULL;

  intersect.xmin = max(a->xmin,b->xmin);
  intersect.xmax = min(a->xmax,b->xmax);
  intersect.ymin = max(a->ymin,b->ymin);
  intersect.ymax = min(a->ymax,b->ymax);

  return &intersect;
}

/*************************************************/
/* set_graphics_intersection()                   */
/*                                               */
/* Intended for redraw loop routines, this sets  */
/* up a given graphics rectangle, but takes      */
/* account of the intersection between this and  */
/* the current (given) graphics rectangle for    */
/* the redraw. The rectangle *must* be restored  */
/* with restore_graphics_intersection() as soon  */
/* as the rectangle set here is finished with;   */
/* the caller must thus remember this rectangle  */
/* for later.                                    */
/*                                               */
/* Parameters: Pointer to a BBox describing the  */
/*             rectangle to set, where xmax and  */
/*             ymax are inclusive;               */
/*                                               */
/*             Pointer to a BBox describing the  */
/*             current graphics rectangle, where */
/*             xmax and ymax are exclusive (e.g. */
/*             as in a WimpRedrawWindowBlock's   */
/*             redraw_area BBox).                */
/*                                               */
/* Returns:    Pointer to a BBox describing the  */
/*             actual rectangle that was set. If */
/*             this is NULL, the two do not      */
/*             intersect at all and the redraw   */
/*             subsequent graphics window        */
/*             restoration can and should be     */
/*             skipped.                          */
/*************************************************/

BBox * set_graphics_intersection(BBox * rbox, BBox * cbox)
{
  BBox * ibox;
  BBox   ogrect = *cbox;

  ogrect.xmax -= 1;
  ogrect.ymax -= 1;

  ibox = intersection(rbox, &ogrect);

  if (!ibox) return NULL;

  bbc_gwindow(ibox->xmin, ibox->ymin, ibox->xmax, ibox->ymax);

  return ibox;
}

/*************************************************/
/* restore_graphics_intersection()               */
/*                                               */
/* Restores the Wimp's redraw graphics rectangle */
/* which was changed by a call to                */
/* set_graphics_intersection (which *must* have  */
/* been called before this restoring function).  */
/*                                               */
/* Parameters: Pointer to a BBox holding the     */
/*             graphics rectangle as it was      */
/*             before set_graphics_intersection  */
/*             was called, where xmax and ymax   */
/*             are exclusive (e.g. as in a       */
/*             WimpRedrawWindowBlock's           */
/*             redraw_area BBox).                */
/*************************************************/

void restore_graphics_intersection(BBox * cbox)
{
  BBox ogrect = *cbox;

  ogrect.xmax -= 1;
  ogrect.ymax -= 1;

  bbc_gwindow(ogrect.xmin, ogrect.ymin, ogrect.xmax, ogrect.ymax);
}

/*************************************************/
/* utils_get_key()                               */
/*                                               */
/* Using OS_Byte 121, waits until all keys are   */
/* released, waits until a key is pressed and    */
/* records which, waits for the key to be        */
/* released, flushes the keyboard buffer "just   */
/* to make sure", and returns the recorded key   */
/* number. If there is an error, 255 (as if no   */
/* key were pressed) is returned.                */
/*                                               */
/* Returns:   Number of key pressed as returned  */
/*            by SWI OS_Byte 121, or 255 if any  */
/*            errors occurred.                   */
/*************************************************/

unsigned int utils_get_key(void)
{
  unsigned int tmp, key;

  /* First, wait */

  do
  {
    if (
         _swix(OS_Byte,
               _INR(0,1) | _OUT(1),

               121,
               0,

               &tmp)
       )
       return KeyControl_Key_NoKey;
  }
  while (tmp != KeyControl_Key_NoKey);

  /* Get the key */

  do
  {
    if (
         _swix(OS_Byte,
               _INR(0,1) | _OUT(1),

               121,
               0,

               &key)
       )
       return KeyControl_Key_NoKey;
  }
  while (key == KeyControl_Key_NoKey);

  /* Wait for release */

  do
  {
    if (
         _swix(OS_Byte,
               _INR(0,1) | _OUT(1),

               121,
               0,

               &tmp)
       )
       return KeyControl_Key_NoKey;
  }
  while (tmp != KeyControl_Key_NoKey);

  /* Flush the keyboard buffer */

  _swix(OS_Byte,
        _INR(0,1),

        21,
        0);

  return key;
}

/*************************************************/
/* utils_strcasecmp()                            */
/*                                               */
/* Function to compare two strings case          */
/* insensitively.                                */
/*                                               */
/* Originally by sbrodie.                        */
/*                                               */
/* The conversions to unsigned int stop the      */
/* compiler messing around with shifts all over  */
/* the place whilst trying to promote the chars  */
/* to int whilst retaining the sign.             */
/*                                               */
/* Problems: Choice of return value when strings */
/* do not match is based upon character number   */
/* rather than any alphabetic sorting.           */
/*                                               */
/* Parameters: As strcmp.                        */
/*                                               */
/* Returns:    As strcmp.                        */
/*************************************************/

int utils_strcasecmp(const char *a, const char *b)
{
  for (;;)
  {
    unsigned int f1 = *a++;
    unsigned int s1 = *b++;

    if (f1 == 0) return -s1;

    if (f1 != s1)
    {
      unsigned int f2     = (unsigned int) tolower(f1);
      unsigned int s2     = (unsigned int) tolower(s1);
      signed int   result = f2 - s2;

      if (result != 0) return result;
    }
  }
}

/*************************************************/
/* utils_strncasecmp()                           */
/*                                               */
/* Function to compare two strings case          */
/* insensitively up to a maximum char count.     */
/*                                               */
/* Originally by sbrodie.                        */
/*                                               */
/* The conversions to unsigned int stop the      */
/* compiler messing around with shifts all over  */
/* the place whilst trying to promote the chars  */
/* to int whilst retaining the sign.             */
/*                                               */
/* Problems: Choice of return value when strings */
/* do not match is based upon character number   */
/* rather than any alphabetic sorting.           */
/*                                               */
/* Parameters: As strncmp.                       */
/*                                               */
/* Returns:    As strncmp.                       */
/*************************************************/

int utils_strncasecmp(const char * a, const char * b, unsigned int n)
{
  for (; n; --n)
  {
    unsigned int f1 = *a++;
    unsigned int s1 = *b++;

    if (f1 == 0) return -s1;

    if (f1 != s1)
    {
      unsigned int f2     = (unsigned int) tolower(f1);
      unsigned int s2     = (unsigned int) tolower(s1);
      signed int   result = f2 - s2;

      if (result != 0) return result;
    }
  }

  return 0;
}

/*************************************************/
/* utils_strncat()                               */
/*                                               */
/* ANSI strncat uses 'n' to mean number of bytes */
/* we're allowed to copy, which is not helpful   */
/* if you're appending to a string in a length   */
/* limited buffer. Rather than call strlen and   */
/* do the maths outside of strncat when strncat  */
/* is only going to have to seek to the end of   */
/* the string itself again anyway, this function */
/* does exactly what strncat does save for       */
/* altering the value of 'n' to mean total       */
/* allowed string length.                        */
/*                                               */
/* Parameters: Pointer to buffer holding a NUL   */
/*             terminated string;                */
/*                                               */
/*             Pointer to another string to      */
/*             append to the one in the above    */
/*             buffer;                           */
/*                                               */
/*             Total string length allowed, not  */
/*             including NUL terminator.         */
/*                                               */
/* Returns:    Pointer to the buffer given in    */
/*             the first parameter.              */
/*                                               */
/* Assumes:    If the string length limit is     */
/*             reached, no NUL terminator is     */
/*             written - do that externally, as  */
/*             with strncpy. Unlike strncpy      */
/*             though, if the total string       */
/*             length after appending b is still */
/*             less than limit, zero bytes are   */
/*             NOT written to fill the gap. Only */
/*             the one terminating NUL is given. */
/*************************************************/

char * utils_strncat(char * a, const char * b, size_t n)
{
  char * p = a;

  while (*p != 0) n--, p++;

  while (n-- > 0)
  {
    if ((*p++ = *b++) == 0) return a;
  }

  return a;
}

/*************************************************/
/* utils_strdup()                                */
/*                                               */
/* Returns a pointer to a malloc'd copy of the   */
/* given string.                                 */
/*                                               */
/* Parameters: Pointer to the string to copy.    */
/*                                               */
/* Returns:    Pointer to a malloc'd copy of the */
/*             given string.                     */
/*                                               */
/* Assumes:    Returns NULL if it gets NULL or   */
/*             if memory allocation fails.       */
/*************************************************/

char * utils_strdup(const char * s1)
{
  char * s2;

  if (s1 == NULL) return NULL;

  s2 = (char *) malloc(strlen(s1) + 1);

  if (s2 == NULL) return NULL;

  return strcpy(s2, s1);
}

/*************************************************/
/* utils_len_printf()                            */
/*                                               */
/* Returns the length of a given printf string.  */
/* Can be useful for buffer length determination */
/* when wishing to use sprintf, for example.     */
/*                                               */
/* This function runs *very* slowly. If it is    */
/* difficult / impossible to determine the       */
/* length (or upper limit of length) any other   */
/* way, use it; else find a different approach   */
/* (e.g. see utils_number_length).               */
/*                                               */
/* Parameters: As for printf.                    */
/*                                               */
/* Returns:    Length of the output string (as   */
/*             returned by vfprintf) or -1 if    */
/*             some error occurred.              */
/*************************************************/

int utils_len_printf(const char * format, ...)
{
  int       len;
  va_list   ptr;
  FILE    * fp;

  fp = fopen("Null:", "wb");
  if (!fp) return -1;

  va_start(ptr, format);
  len = vfprintf(fp, format, ptr);
  va_end(ptr);

  fclose(fp);

  return len;
}

/*************************************************/
/* utils_number_length()                         */
/*                                               */
/* Returns the number of bytes the given number  */
/* would occupy if converted to a string by      */
/* sprintf with a '%d' specifier used in the     */
/* format string.                                */
/*                                               */
/* Parameters: The number to check.              */
/*                                               */
/* Returns:    The number of characters it would */
/*             occupy as a string.               */
/*                                               */
/* Assumes:    An 'int' is 32-bit signed.        */
/*************************************************/

int utils_number_length(int number)
{
  int len = 0;

  if (number < 0) len += 1, number = -number;

  if      (number < 10)         len += 1;
  else if (number < 100)        len += 2;
  else if (number < 1000)       len += 3;
  else if (number < 10000)      len += 4;
  else if (number < 100000)     len += 5;
  else if (number < 1000000)    len += 6;
  else if (number < 10000000)   len += 7;
  else if (number < 100000000)  len += 8;
  else if (number < 1000000000) len += 9;
  else                          len += 10;

  return len;
}

/*************************************************/
/* utils_canonicalise_path()                     */
/*                                               */
/* Take some pathname (which may include         */
/* a path or other general system variable) and  */
/* expand (or canonicalise) it.                  */
/*                                               */
/* Caller is responsible for calling free() on   */
/* the returned block.                           */
/*                                               */
/* Parameters: Pointer to the path to            */
/*             canonicalise;                     */
/*                                               */
/*             Pointer to a char *, which will   */
/*             be filled in with the address of  */
/*             a malloced block - the caller is  */
/*             responsible for freeing it.       */
/*                                               */
/* Returns:    If there is an error, it returns  */
/*             it, but it may return NULL and    */
/*             also return NULL as the pointer   */
/*             to the malloced block if some     */
/*             other internal failure occurred.  */
/*************************************************/

_kernel_oserror * utils_canonicalise_path(const char * in, char ** out)
{
  int required;

  if (!in || !*in || !out) return NULL;

  RetError(_swix(OS_FSControl,
                 _INR(0, 5) | _OUT(5),

                 37,   in,
                 NULL, NULL,
                 NULL, 0,

                 &required)); /* Path length not including terminator returned as MINUS r5 */

  *out = malloc(1 - required); /* (Yes, '1 - required' - see above!) */

  if (!*out) return make_no_memory_error(30);

  RetError(_swix(OS_FSControl,
                 _INR(0, 5) | _OUT(5),

                 37,   in,
                 *out, NULL,
                 NULL, 1 - required,

                 &required));

  /* Er, 'something' went wrong... PRMs say to check, but not what to */
  /* do if you don't get 1 back here and haven't had an error from    */
  /* the SWI call!                                                    */

  if (required != 1)
  {
    free (*out);
    *out = NULL;
  }

  return NULL;
}

/*************************************************/
/* utils_build_tree()                            */
/*                                               */
/* Takes a fully canonicalised pathname and      */
/* ensures that all the directories in the path  */
/* exist. This is useful if you are going to     */
/* save something to a temporary directory in    */
/* Scrap or somewhere in <Choices$Write>, say,   */
/* and need to ensure that the directory         */
/* structure you're addressing is present.       */
/*                                               */
/* Parameters: Pointer to the path to ensure is  */
/*             present.                          */
/*************************************************/

_kernel_oserror * utils_build_tree(const char * path)
{
  char * temp;
  char * p;
  int    level, len;

  /* Sanity check, and take a local copy of the path */

  if (!path || !*path) return NULL;

  len = strlen(path);

  temp = malloc(len + 1);
  if (!temp) return make_no_memory_error(31);

retry:

  level = 0;
  strcpy(temp, path);

  /* Create the directories */

  do
  {
    p = strrchr(temp, '.');

    if (p)
    {
      *p = '\0';

      if (!_swix(OS_File,
                 _INR(0,1) | _IN(4),

                 8,
                 temp,
                 0))
      {
        if (level) goto retry;
        else       break;
      }
    }

    level++;
  }
  while (p);

  /* Finished */

  free(temp);

  return NULL;
}

/*************************************************/
/* utils_scan_directory()                        */
/*                                               */
/* Calls OS_GBPB 9 to get the filename of a file */
/* in a given directory - i.e. list the contents */
/* of the directory, file by file.               */
/*                                               */
/* Parameters: Pathname of directory to scan;    */
/*                                               */
/*             Buffer to write results into;     */
/*                                               */
/*             Size of the buffer;               */
/*                                               */
/*             Pointer to an int which should be */
/*             filled with 0 on entry for the    */
/*             first call and preserved for      */
/*             subsequent calls to the function  */
/*             for the same directory (this is   */
/*             the continue value passed in R4   */
/*             for the OS_GBPB SWI call);        */
/*                                               */
/*             Pointer to an unsigned int which  */
/*             is filled in with the number of   */
/*             objects read - in practice this   */
/*             should be either 1 or zero.       */
/*                                               */
/* Use:        As OS_GBPB 9. Call once with the  */
/*             fourth parameter pointing to an   */
/*             int holding zero. If there is an  */
/*             error returned or this int holds  */
/*             a value <= 0, the scan has ended. */
/*             Otherwise check the number of     */
/*             objects read (in the int passed   */
/*             as a fifth parameter) - if not    */
/*             zero, the given buffer will hold  */
/*             a filename. Whether or not it is  */
/*             zero, keep calling the function,  */
/*             preserving the value in the       */
/*             first of the two ints passed in   */
/*             each time, until the exit         */
/*             conditions described above are    */
/*             met.                              */
/*************************************************/

_kernel_oserror * utils_scan_directory(const char * dirpath, char * buffer, int buffer_size,
                                       int * cont, unsigned int * read)
{
  if (!cont || !read) return NULL;

  return _swix(OS_GBPB,
               _INR(0,6) | _OUTR(3,4),

               9,             /* Enumerate directory contents */
               dirpath,
               buffer,
               1,             /* Return 1 item at a time */
               *cont,         /* Continue value - 0 for first call */
               buffer_size,
               NULL,          /* Wildcarded name; NULL = match anything */

               read,
               cont);
}
