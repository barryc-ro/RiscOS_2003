/***************************************************/
/* File   : KeyControl.c                           */
/*                                                 */
/* Purpose: Handle key presses for the main key    */
/*          processing loop - that's about it.     */
/*          This source file created only because  */
/*          the key handling code looked pretty    */
/*          ugly sitting bang in the middle of     */
/*          main()!                                */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 04-Feb-1999: Created.                  */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "FileOps.h"
#include "FromROSLib.h"
#include "Global.h"
#include "svcprint.h"
#include "Redraw.h"
#include "Repository.h"
#include "State.h"
#include "Utils.h"

#include "KeyControl.h"

/* Static function prototypes */

static _kernel_oserror * keycontrol_crc     (repository_entry * entry);
static _kernel_oserror * keycontrol_program (repository_entry * entry);

/*************************************************/
/* keycontrol_process()                          */
/*                                               */
/* Process a key press for the main keyscan      */
/* loop. 'Q' to quit is a special case and must  */
/* be handled externally.                        */
/*                                               */
/* The function calls show_error_cont for errors */
/* it wants reporting, though it may sometimes   */
/* return minor problems directly.               */
/*                                               */
/* Parameters: Key number, as returned by        */
/*             OS_Byte 121;                      */
/*                                               */
/*             Pointer to a pointer to a         */
/*             repository_entry structure, which */
/*             on entry should point to the      */
/*             currently selected item; on exit  */
/*             it may be updated depending on    */
/*             what key was given;               */
/*                                               */
/*             Pointer to an unsigned int, in    */
/*             which 0 is written if auto-repeat */
/*             should not be allowed on the key  */
/*             else 1 is written.                */
/*************************************************/

_kernel_oserror * keycontrol_process(unsigned int key, repository_entry ** selected, unsigned int * allow)
{
  if (!selected || !*selected || !allow) return NULL;

  *allow = 0;

  switch (key)
  {
    /* Vertical movement within a list */

    case KeyControl_Key_Up:
    {
      show_error_cont(redraw_move_up(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_Down:
    {
      show_error_cont(redraw_move_down(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_PageUp:
    {
      show_error_cont(redraw_page_up(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_PageDown:
    {
      show_error_cont(redraw_page_down(selected));
      *allow = 1;
    }
    break;

    case KeyControl_Key_Home:
    {
      show_error_cont(redraw_jump_to_home(selected));
    }
    break;

    case KeyControl_Key_End:
    {
      show_error_cont(redraw_jump_to_end(selected));
    }
    break;

    case KeyControl_Key_C:
    {
      show_error_cont(keycontrol_crc(*selected));
    }
    break;

    case KeyControl_Key_P:
    {
      show_error_cont(keycontrol_program(*selected));
    }
    break;
  }

  return NULL;
}

/*************************************************/
/* keycontrol_crc()                              */
/*                                               */
/* Check pre and post-compression CRC values     */
/* for an image. Will call show_error_cont for   */
/* serious errors and only return non-crticial   */
/* ones directly.                                */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure representing the image  */
/*             to check.                         */
/*************************************************/

static _kernel_oserror * keycontrol_crc(repository_entry * entry)
{
  _kernel_oserror * e;
  unsigned int      key;
  unsigned int      result1, result2;

  /* Check the post-compression value */

  redraw_report_message(lookup_token("CheckPostCRC:Checking post-compression CRC value...",0,0),
                        &scheme.progress_text,
                        &scheme.progress_inner,
                        0);

  e = fileops_check_post_crc(entry, &result1, 1);
  bbc_vdu(BBC_DefaultWindow);
  show_error_cont(e);
  fileops_report_crc_result(result1);

  /* Check the pre-compression value */

  redraw_report_message(lookup_token("CheckPreCRC:Checking pre-compression CRC value...",0,0),
                        &scheme.progress_text,
                        &scheme.progress_inner,
                        0);

  e = fileops_check_pre_crc(entry, &result2, 1);
  bbc_vdu(BBC_DefaultWindow);
  show_error_cont(e);
  fileops_report_crc_result(result2);

  /* Draw conclusions */

  if (!result1 && !result2)
  {
    redraw_report_message(lookup_token("CRCBothOK:Image passed both tests. Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }
  else if (result1 && result2)
  {
    redraw_report_message(lookup_token("CRCBothBad:Image failed both tests! Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }
  else
  {
    redraw_report_message(lookup_token("CRCOneBad:Image passed on test and failed another. Corrupted header perhaps? Press space...",0,0),
                          &scheme.commands_text,
                          &scheme.commands_inner,
                          1);
  }

  do
  {
    key = utils_get_key();
  }
  while (key != KeyControl_Key_Space);

  /* Redraw the command area */

  return redraw_draw_possible_commands(1);
}

/*************************************************/
/* keycontrol_program()                          */
/*                                               */
/* Check the pre-compression CRC value of an     */
/* image whilst programming it into ROM. Ensure  */
/* the ROM has a correct CRC value too. Will     */
/* probably never return - OS_Reset gets called  */
/* further down, unless an error is thrown back. */
/*                                               */
/* Parameters: Pointer to the repository_entry   */
/*             structure representing the image  */
/*             to check.                         */
/*************************************************/

static _kernel_oserror * keycontrol_program(repository_entry * entry)
{
  unsigned int result;

  /* Program the ROM */

  show_error_cont(fileops_program_with_checks(entry, &result, 1));

  /* This should call OS_Reset after telling the user what happened. */

  show_error_cont(fileops_report_program_result(result, 0));

  /* Redraw the command area (just in case the above *does* return) */

  return redraw_draw_possible_commands(1);
}
