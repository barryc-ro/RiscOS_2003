/***************************************************/
/* File   : Utils.h                                */
/*                                                 */
/* Purpose: Infrequently altered utilities.        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Jan-1999: Created from Browse       */
/*                       source code.              */
/***************************************************/

#ifndef Utils_Included

  #define Utils_Included

  /* Required system inclusions */

  #include "kernel.h"

  /* Required Toolbox inclusions */

  #include "wimp.h"

  /* Known error numbers */

  #define Utils_Error_OS_Escape      17              /* Offers only 'Continue'      */
  #define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
  #define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
  #define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */

  /* Useful macros */

  #define Beep          (_swi(0x107,0))
  #define Swap(a,b)     { (a) ^= (b); (b) ^= (a); (a) ^= (b); }
  #define StrNCpy0(x,y) {strncpy(x,y,sizeof(x)-1); x[sizeof(x)-1]=0;}
  #define StrNCat0(x,y) {utils_strncat(x,y,sizeof(x)-1); x[sizeof(x)-1]=0;}
  #define WordAlign(a)  (void *) ((((unsigned int) (a)) + (sizeof(int) - 1)) & (~(sizeof(int) - 1)))

  #define RetError(fn)  do {_kernel_oserror * e = (fn); if (e) return e;} while (0)
  #define StrLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message;} while (0)
  #define RetLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)
  #define RetWarnE(e)   do {if (&erb != (e)) erb = *(e); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)

  /* Function prototypes */

  char              * lookup_token                     (const char * s, int flag, const char * arg);

  void                show_error                       (_kernel_oserror * e);
  void                show_error_cont                  (_kernel_oserror * e);
  unsigned int        show_query                       (_kernel_oserror * e);

  _kernel_oserror   * make_no_memory_error             (int stage);
  _kernel_oserror   * utils_make_zlib_error            (int err);

  BBox              * intersection                     (BBox * a, BBox * b);
  BBox              * set_graphics_intersection        (BBox * rbox, BBox * cbox);
  void                restore_graphics_intersection    (BBox * cbox);

  unsigned int        utils_get_key                    (void);

  int                 utils_strcasecmp                 (const char * a, const char * b);
  int                 utils_strncasecmp                (const char * a, const char * b, unsigned int n);
  char              * utils_strncat                    (char * a, const char * b, size_t n);
  char              * utils_strdup                     (const char * s1);
  int                 utils_len_printf                 (const char * format, ...);
  int                 utils_number_length              (int number);

  _kernel_oserror   * utils_canonicalise_path          (const char * in, char ** out);
  _kernel_oserror   * utils_build_tree                 (const char * path);
  _kernel_oserror   * utils_scan_directory             (const char * dirpath, char * buffer, int buffer_size, int * cont, unsigned int * read);

#endif
