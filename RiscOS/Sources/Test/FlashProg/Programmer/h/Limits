/***************************************************/
/* File   : Limits.h                               */
/*                                                 */
/* Purpose: Definitions relating to fundamental    */
/*          limitations of the application.        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Jan-1999: Adapted from Browse       */
/*                       source code.              */
/***************************************************/

#ifndef Limits_Included

  #define Limits_Included

  /***************************************************************************************/
  /*                                                                                     */
  /* Hard coded application limits                                                       */
  /* =============================                                                       */
  /*                                                                                     */
  /* Many of these are hard coded limits required since C won't let you do things like:  */
  /*                                                                                     */
  /* {                                                                                   */
  /*   char buffer[strlen(struct->path) + extralen];                                     */
  /*                                                                                     */
  /*   ...                                                                               */
  /* }                                                                                   */
  /*                                                                                     */
  /* Others are OS limits, or derived from OS limits; they may be related to the scope   */
  /* of values in related HTML; and so-on.                                               */
  /*                                                                                     */
  /* In the lists below, a description of what the limit represents is given. Where      */
  /* these are used can be worked out by loading all source / header files and doing a   */
  /* global List Of Found. The description is followed by a single digit code:           */
  /*                                                                                     */
  /* D  The size is arbitrary, though changing the value may have unpredictable effects  */
  /*    and so every case must be considered in light of the code relevant to the limit  */
  /*    in question. For example, no errors will be raised if the number of items        */
  /*    allowed in a <SELECT> list is reduced to 64 - menus would simply be truncated.   */
  /*                                                                                     */
  /*    The next three are generally relevant to string buffers:                         */
  /*                                                                                     */
  /* S  The buffer is 'safe', i.e. it can be reduced in size and should not be overrun   */
  /*    if something too big to fit in it is generated. Errors may be raised in this     */
  /*    case though (e.g. Buffer Too Short complaints from the Toolbox). Correct         */
  /*    behaviour is not guaranteed at sizes of 2 bytes or less.                         */
  /*                                                                                     */
  /* U  The buffer is 'unsafe', i.e. code assumes that whatever is to fit in the buffer  */
  /*    will always do so. The sizes defined here must thus be chosen with careful       */
  /*    consideration of the code involved. Some of these may have guards on them for    */
  /*    TRACE builds, though.                                                            */
  /*                                                                                     */
  /* P  Some buffers may be unsafe to an extent in one place but safe elsewhere, in      */
  /*    which case they generally have to be treated as unsafe. It may be possible to    */
  /*    modify code at some future time and make all usages safe though, so the          */
  /*    distinction is made.                                                             */
  /*                                                                                     */
  /* Where buffers are related to string lengths, any relevant terminators are included  */
  /* in the length.                                                                      */
  /*                                                                                     */
  /***************************************************************************************/

  /* First, Messages file related limits. */

  #define Limits_Token                    32   /* Length of any given Messages file token       S */
  #define Limits_Message                  320  /* Length of any given Messages file message     S */

  /* OS related limits */

  #define Limits_OS_SpriteName            13   /* Sprite name (plus terminator)                 U */
  #define Limits_OS_FontHandles           256  /* Maximum number of active font handles         D */

#endif
