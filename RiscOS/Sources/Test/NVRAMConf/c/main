#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "<Lib$Dir>.DebugLib/DebugLib.h"

#define NVRAM_Read               0x4EE00
#define NVRAM_Write              0x4EE01

static _kernel_oserror faker;

_kernel_oserror*
GenFakeErr(const char* string, ...)
{
    va_list va;

    va_start(va, string);
    vsprintf(faker.errmess, string, va);
    va_end(va);

    /* use the Engineering Menu error block as it kind of does what that does */

    faker.errnum = 0x00817b00;
    
    return &faker;
}

/********************************************************************** NVRAM  ******/
_kernel_oserror*
getLength(const char* tag, int* tag_len)
{
    int length = 0;
    _kernel_oserror* error = NULL;

    error = _swix(NVRAM_Read, _INR(0,2)|_OUT(0), tag, 0, 0, &length);

    if (tag_len)
    {
        (*tag_len) = length;
    }
    return error;
}

_kernel_oserror*
setIntValue(const char* tag, int buffer)
{
    int size = 0;
    _kernel_oserror* error = NULL;

    dprintf(("", "set int value (%s) value is (%i)\n", tag, buffer));

    error = _swix(NVRAM_Write, _INR(0,2)|_OUT(0), tag, buffer, 0, &size);

    dprintf(("", "set value (%s) returns %i\n", tag, size));

    if ((NULL == error) && (size < 0))
    {
        error = GenFakeErr("write failed with reason (%i)\n", size);
    }
    
    return error;
}

_kernel_oserror*
setStrValue(const char* tag, const char* value, int length)
{
    int size = 0;
    _kernel_oserror* error = NULL;

    dprintf(("", "set string value tag (%s) to (%s) length (%i)\n", tag, value, length));

    error = _swix(NVRAM_Write, _INR(0,2)|_OUT(0), tag, value, length, &size);

    dprintf(("", "set value (%s) returns %i\n", tag, size));

    if (size < 0)
    {
        GenFakeErr("write failed with reason (%i)\n", size);
    }

    return error;
}

int main(int argc, char* argv[])
{
    _kernel_oserror* error = NULL;
    int parse_fail = 0;
    
    debug_initialise("NVRAMConf", "", "");
    debug_output_device( PRINTF_OUTPUT );
    
    dprintf(("", "starting argc (%i)\n", argc));

    if (argc >= 3)
    {
        if (0 == strncmp(argv[1], "-n", 2))
        {
            dprintf(("", "setting a numeric value\n"));

            if (argc >= 4)
            {
                int value = atoi(argv[3]);
                error = setIntValue(argv[2], value);
            }
            else
            {
                parse_fail = 1;
            }
        }
        else
        {
            int tag_len = 0;
            int arg_len = 0;
            char* buffer = NULL;

            arg_len = strlen(argv[2]);

            error = getLength(argv[1], &tag_len);

            if (!error)
            {
                int min_len = (tag_len < arg_len) ? tag_len : arg_len;

                buffer = malloc(min_len +1);

                if (buffer)
                {
                    strncpy(buffer, argv[2], min_len);

                    buffer[min_len] = '\0';

                    error = setStrValue(argv[1], buffer, min_len);

                    free (buffer);
                }
            }
        }
    }
    else
    {
        dprintf(("", "setting parse error to fail\n"));
        parse_fail = 1;
    }
    
    if ((NULL == error) && (0 != parse_fail))
    {
        dprintf(("", "creating an error\n"));
        error = GenFakeErr("NVRAMConf: usage is NVRAMConf [-n] <tag> <value>, where -n means the value is numeric");
    }

    if (error)
    {
        dprintf(("", "os generating the error for (%i:%s)\n", error->errnum, error->errmess));
        _swix(OS_GenerateError, _IN(0), error);
    }
}
