
#include <stdlib.h>
#include "modHdr.h"
#include "kernel.h"
#include "ctype.h"
#include "swis.h"
#include "stdio.h"
#include "string.h"
#include "stdarg.h"

typedef enum {
  claim_token,
  free_token
} semaphor;

#define DEBUG_STRING_LENGTH 124

static char*	file_name = "Macrovision:Output";

static semaphor debug_semaphor = free_token;
static char	buffer[DEBUG_STRING_LENGTH];


void debug(char *format, ...)
{ 	
  int string_size;
  va_list list;
  FILE *fp = NULL;
  	
  unsigned int mt_time;
  char* buffer_ptr = buffer;
  
  if (debug_semaphor != claim_token) {
  	debug_semaphor = claim_token;
  	
  	_swix(OS_ReadMonotonicTime, _OUT(0), &mt_time);
  	sprintf(buffer_ptr, "%i, ", mt_time);
  
  	va_start (list, format);
  	string_size = strlen(buffer_ptr);
  	string_size += vsprintf (((char*)buffer_ptr)+string_size, format, list);
  	va_end(list);
   
  	if (string_size > DEBUG_STRING_LENGTH-2)	// terminate at the correct length
        	string_size = DEBUG_STRING_LENGTH-2;
        
  	buffer_ptr[string_size] = '\n';	// string size is the size of the string not including the null terminator
  	buffer_ptr[string_size+1] = '\0';	// string size is the size of the string not including the null terminator

	fp = fopen(file_name, "a+");
	
	if (fp != NULL){
	  	fprintf(fp, "vc: %s", buffer);
	  	fclose(fp);
	}
  
  	debug_semaphor = free_token;
  }
}

#define IG(a) 		(a=a)

// module initialise
_kernel_oserror *init_module(const char *cmd_tail, int podule_base, void *pw)
{
   IG(cmd_tail); IG(podule_base); IG(pw);
 
   debug("initialise module");
      
   return NULL;
}

// module finalise
_kernel_oserror *final_module(int fatal, int podule, void *pw)
{
   IG(fatal); IG(podule); IG(pw);
  
   debug("finialise module");
   
   return NULL;
}
typedef struct {
  	char     TVStandard[12];
  	int	 NVRAM_value;
  	int	 TVChannels_offset;
} TV_Standard_struct;

typedef struct {
  	char     TVChannel[4];
  	int	 NVRAM_value;
} TV_Channel_struct;

typedef struct {
  	int			channel_count;
  	TV_Channel_struct 	*channels;
} TV_Channel_Returnable;
  	
TV_Standard_struct TVStandards[] = {
  	"PAL-B", 0, 0,
  	"PAL-B IT", 1, 1,
  	"PAL-I", 2, 2,
  	"PAL-N", 3, 3,
  	//"PAL-OZ", 4, 4,
  	{0,0,0,0}, 0, 0
};

// I am using a cheat here by setting the NVRAM number of the first channel to the number of channels
// then passing the channel array + offset into first NVRAM location (AKA size) this then looks like
// the TV_Channel Returnable.

TV_Channel_struct TVChannels[][] = {
  	{"n",11,"2",0,"3",1,"4",2,"5",3,"6",4,"7",5,"8",6,"9",7,"10",8,"11",9,"12",10},
  	{"n",10,"A",0,"B",1,"C",2,"D",3,"E",4,"F",5,"G",6,"H",7,"H-1",8,"H-2",9},
  	{"n",9, "A",0,"B",1,"C",2,"D",3,"E",4,"F",5,"G",6,"H",7,"J",8},
  	{"n",10,"1",0,"2",1,"3",2,"4",3,"5",4,"6",5,"7",6,"8",7,"9",8,"10",9}//,
  	//{"0",0,"1",1,"2",2,"3",3,"4",4,"5",5,"5a",6,"6",7,"7",8,"8",9,"9",10,"10",11,"11",12}
};

static int unknown = 0;

_kernel_oserror *swi_handler ( int swi_no, _kernel_swi_regs *r, void *pw)
{
  
  debug("----------  swi %8.8X\n", swi_no);
  
  switch ( swi_no  )
  {
    case Macrovision_PlatformFeatures - Macrovision_00:
    		if (r->r[0] == 0) {
    		  
    			debug("read TVStandard @ %8.8X\n", &TVStandards);
    			r->r[1] = (int)&TVStandards;
    		} else {
    		  
    		  	debug("read TVChannels\n");
    		  	if ((r->r[1] > 3) || ( r->r[1] < 0))
    		  		r->r[2] = (int)&unknown;
    		  	else 
    		  		r->r[2] = (int)( ((size_t)&TVChannels[r->r[1]]) + sizeof(char[4]) );
    		}
    		break;
    		
    default:
    		debug("unknown SWI called\n");
  }	
  debug("----------  end\n");
  
  return NULL;
}
