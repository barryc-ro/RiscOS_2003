/*------------------------------------------------------------------------------*/
/*    Filename    : h.Message                                                  */
/*    Author      : A.Rodger                    */
/*    Date        : may 1999                    */
/*    Source      : c++.Message             */
/*    Description : this object is designed to interact with the RiscOS         */
/*                MessageTrans calls to give a simple error handling interface. */
/*                                                                              */
/*    Modification history:                               */
/*------------------------------------------------------------------------------*/

#ifndef __ERROROBJ_
#define __ERROROBJ_

#include "kernel.h"
#include <stdlib.h>

// each error message in the RiscOS operating system has an unique error number this 
// is the start of this allocations range. For more information see prm 1-43.

#define  ErrorAllocation             0x00816f00
#define  MAX_MSG_LEN		     256

#define MESSAGES_FILE "<EngMenu$Dir>.messages"

// this is an enumerated type reflecting the messages file and the error number
// allocation. Each element in this enumerated list is converted to a string
// "'E'+(enumerated value - ErrorAllocation)", giving tokens in the range
// 'E00' through to 'EFF' if there were 256 errors.
// these tokens / error numbers are then used to lookup the error message

typedef enum {
  	EM_Alloc = ErrorAllocation,
  	EM_NoMENU,
  	EM_NoFILE,
  	EM_ObjectError,
  	EM_TooManyElem,
  	EM_DupTAG,
  	EM_UnknownMenu,
  	EM_ParseError,
  	EM_NVRead,
  	EM_NVWrite,
        error_MAXERROR    // this must be last it is used to determine range.
} error_token;

typedef enum {
  	MSG_Unknown,
  	MSG_Reboot
} message_token;

typedef enum {
        true = 1,
        false = 0
} boolean;

typedef boolean bool;

// this is the maximum string length it would require to print the tokens preceeded
// with 'T'
#define message_TOKENSTRING  64

// this structure represents the file descriptor as required in MessageTrans_OpenFile
// it will be allocated in RMA.  This maintains a reference to the open message file
// until it is closed in the destructor.  It must be kept in RMA as it is accessed by
// the messagetrans module and cannot be paged out.

typedef struct{
        int file_descriptor[5];
        char filename[1];
} message_file_id;

// this class interfaces with the MessageTrans module to give tokenised strings
// this module also has the functionality to create an error block.  The primary
// difference is that the V or error flag is set.

class MessageFile {
      private:
          // private handle on the file this is a pointer to an RMA location.
          message_file_id *descriptor;

      public:
          // constructor this takes the messagefile path and an error pointer, the later is in case the open file
          // swi returns an error in this case you should close the object and work on the information that something
          // has gone wrong.
          MessageFile(char* task_name, _kernel_oserror **err, char *filename = NULL);
          // this closes the file and deallocates the RMA.
          ~MessageFile();

          // this is an interface to the ErrorLookup prm 3-753
          _kernel_oserror* lookupError(error_token err_token, char* param0=NULL, char* param1=NULL, char* param2=NULL, char* param3=NULL);

          // this is a wrap around for the lookup function in prm 3-745
          _kernel_oserror* lookupMessage(message_token mes_token, char *buf, size_t size, char* param0=NULL, char* param1=NULL, char* param2=NULL, char* param3=NULL);
};

// this class is designed to be a global parent such that all objects can create messages error or otherwise.
class ParentObject {
     public:
         ParentObject() {}
         ~ParentObject() {}
         // this method is a wrap around for the Message lookup, a pointer to the single message object is local
         // within the ErrorObject C++ file.
         _kernel_oserror* makeError(error_token err_token, char* param0=NULL, char* param1=NULL, char* param2=NULL, char* param3=NULL);

         // again this is a wrap for the single instance of the message object
         _kernel_oserror* lookupMessage(message_token mes_token, char *buf, size_t size, char* param0=NULL, char* param1=NULL, char* param2=NULL, char* param3=NULL);

         // this is the debug message handler
         _kernel_oserror* debug(char *area, char *string, ...);
};
#endif
