/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/*------------------------------------------------------------------------------*/
/*    Filename    : h.main	                                                */
/*    Author	  : A.Rodger						        */
/*    Date        : may 1999						        */
/*    Source      : c++.main						        */
/*    Description : this application is the base notifier object this takes     */
/*                message queue objects and displays them on screen             */
/*                                                                              */
/*    Modification history:      		       			        */
/*------------------------------------------------------------------------------*/

#ifndef __MAIN
#define __MAIN

	// standard libraries
#include "kernel.h"
#include "swis.h"
#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include "message.h"

	// Global Definitions
#define IGNORE(a) (a=a)


typedef enum {
  key_select 	= 0x0D,
  key_up 	= 0x8F,
  key_down	= 0x8E,
  key_left	= 0x8C,
  key_right	= 0x8D
} key_values;

// see prm 1-850
#define select_key_button_number 73

#define ASCII_delete	0x7F
#define DialogueDelay	200 // in centiseconds

#define NVRAM_Read               0x4EE00
#define NVRAM_Write              0x4EE01

// the maximum number of elements in a menu.
#define MAX_elements 8


// this is the size of the arg array if it goes over this it will 
// be extended by this;
#define arg_size	10

// the following section is the dynamic function definitions
typedef 	char* 		(*string_fn_ptr)(int, char**);
typedef   _kernel_oserror* 	(*manage_fn_ptr)(void);

typedef struct{
  char*		token;
  string_fn_ptr function;
} string_fn_table;

typedef struct{
  char*		token;
  manage_fn_ptr function;
} manage_fn_table;

string_fn_ptr lookup_string_function(char *token, _kernel_oserror** err);
manage_fn_ptr lookup_management_function(char *token, _kernel_oserror** err);

_kernel_oserror* change_menu(void *menu);
_kernel_oserror* getKey(int* key, boolean* success);
#endif
