/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/****************************************************************************/
//   	Filename:	menu.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
//	Description:
//	this contains the classes for the menu's and the menu
//	elements.
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 08/10/99  AR		File created
/****************************************************************************/

#ifndef __MENU_H_
#define __MENU_H_

#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "main.h"
#include "message.h"
#include "graphics.h"

// the menu has menu elements but the menuElement take a pointer to a
// pointer to a menu object this is used to reflect changes in the viewed
// menu.
// this following structure is used when data is spread over multiple
// NVRAM tags
typedef struct {
 	void* next;
 	char* tag;
 	int offset; // offset into the total buffer
 	int length;
} tag_list;

/****************************************************************************/
// this is a virtual class never implemented as it stands.

class menuElement : public ParentObject
{
  protected:
  	_kernel_oserror* error;
  public:
  	int element;		// this is used by the menuObject
#ifdef McCabe  	
  	 virtual _kernel_oserror* handleKey(int, graphics*, boolean*);
  	 virtual _kernel_oserror* saveOption(graphics*);
  	 virtual _kernel_oserror* redraw(graphics*, boolean, boolean);
   	 virtual _kernel_oserror* draw(graphics*, boolean, boolean);
  	 
  	 _kernel_oserror* getError();
  	   	 
  	 menuElement();
  	 virtual ~menuElement();
#else
  	 virtual _kernel_oserror* handleKey(int, graphics*, boolean*)  	{return NULL;};
  	 virtual _kernel_oserror* saveOption(graphics*)		  	{return NULL;};
  	 virtual _kernel_oserror* redraw(graphics*, boolean, boolean) 	{return NULL;};
   	 virtual _kernel_oserror* draw(graphics*, boolean, boolean) 	{return NULL;};
  	 
  	 _kernel_oserror* getError()    { return error; };
  	   	 
  	 menuElement()	        	{ element = 0; error=NULL;};
#ifdef DEBUGLIB 
  	 virtual ~menuElement() 	{ debug("menus", "delete menuElement\n"); error= NULL;};
#else
  	 virtual ~menuElement() 	{ error= NULL;};
#endif  	 
#endif  	 
};

/****************************************************************************/
class menuObject : public ParentObject
{
  private:
       _kernel_oserror* error;
  	menuObject* 	previous;
  	int		selected;
  	char*		desc_string;
  	boolean		centred;
  	
  	menuElement*	element[MAX_elements];
  	int 		elements;
  	
  public:
  	menuObject*	chain;		// this is the menu chain;
  	char*		tag;
#ifdef McCabe  	
  	void			notCentred();
  	void 			setPrev(menuObject *prev);
  	menuObject*		getPreviousMenu();
  	
  	 _kernel_oserror* 	getError();
   	char*			getDescString();
#else  	
  	void			notCentred()		  { centred = false; }
  	void 			setPrev(menuObject *prev) { previous = prev; }
  	menuObject*		getPreviousMenu()	  { return previous; }
  	
  	 _kernel_oserror* 	getError()    	{ return error; };
   	char*			getDescString() { return desc_string; };
#endif
  	_kernel_oserror*        saveOptions(graphics*);
  	_kernel_oserror*	handleKey(int key, graphics* graphic);
  	_kernel_oserror*	drawMenu(graphics* graphic);
  	_kernel_oserror*	addElement(menuElement* ele);
  	
	
  	menuObject(char* n_tag, char* desc);
  	~menuObject();
  	
};

/****************************************************************************/
class SUBMENU : public menuElement
{
  private:
  	menuObject *link;
  public:
  	 _kernel_oserror* handleKey(int key, graphics*, boolean*);
  	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
#ifdef McCabe  	 
  	 _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
#else
  	 _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred) { return redraw(graphic, selected, centred); }
#endif  	 
   	 
  	 SUBMENU(menuObject* n_link);
  	 ~SUBMENU();
};


/****************************************************************************/
class NVRAM : public menuElement
{
  protected:
  	char *desc;
  	char *tag;
  	
  	// nvram wrapper methods
  	int getLength(char *tag);
  	boolean getValue(char* buffer);
  	boolean setValue(char* buffer);
  	
  public:
  	 NVRAM(char*, char*);
  	 NVRAM(char*);
  	 virtual ~NVRAM();
};

class listNVRAM : public NVRAM
{
  protected:
  	int current_value;
  	list_choice* choices;
  	
  public:
  	listNVRAM(char* n_desc, char* n_tag);
  	~listNVRAM();
  	
  	_kernel_oserror* deleteList();
  	_kernel_oserror* addList(char* element, int val);
  	_kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	virtual _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
   	_kernel_oserror* saveOption(graphics*);
  	_kernel_oserror* handleKey(int key, graphics* graphic, boolean *redraw);
};

class listfnNVRAM : public listNVRAM
{
  private:
  	list_fn_ptr list_fn;
  	
 public:
  	virtual _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);  	
  	listfnNVRAM(char* n_desc, char* n_tag, char* fn_tag);	
 };

class stringNVRAM : public NVRAM
{
  private:
  	tag_list* tags;
  	
  protected:
  	char *contents;
  	int length, end; // total length and the offset to the end of the string
  	
  	boolean getValue(char* buffer);
  	boolean setValue(char* buffer);
  	
  public:
  	
  	stringNVRAM(char* n_desc, tag_list* n_tag);
  	~stringNVRAM();
  	virtual _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	virtual _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
  	virtual _kernel_oserror* saveOption(graphics*);
  	virtual _kernel_oserror* handleKey(int key, graphics* graphic, boolean *redraw);
};

class IPstringNVRAM : public stringNVRAM
{
  private:
  	_kernel_oserror* getIPFromString(char* IPaddress);
  public:
  	virtual _kernel_oserror* saveOption(graphics*);
  	virtual _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
  	IPstringNVRAM(char* n_desc, tag_list* n_tag);
};

class rangeNVRAM : public NVRAM
{
  
  private:
  	char string[MAX_MSG_LEN];
  	int minimum, maximum, granularity, current;
#ifdef McCabe  	
  	char *getCurrentAsString();
#else
  	char *getCurrentAsString() { sprintf(string, "%i", current); return string; }
#endif  	
  public:
  	rangeNVRAM(char* n_desc, char* n_tag, int min, int max, int gran);
  	_kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	_kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
  	_kernel_oserror* saveOption(graphics*);
  	_kernel_oserror* handleKey(int key, graphics* graphic, boolean* redraw);
};
/****************************************************************************/
class DESC : public menuElement
{
  private:
  	char *desc;
  	char **margv;
  	char *result;
  	
  	int margc, margv_size;
  	string_fn_ptr string_fn;
  public:
 	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
 	 _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
  	 _kernel_oserror* addArgument(char* arg);
  	 
  	 DESC(char*, char*);
  	 ~DESC();
};

/****************************************************************************/
class MFUNC : public menuElement
{
  private:
  	char *desc;
  	char *message;
  	manage_fn_ptr manage_fn;
  public:
  	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
#ifdef McCabe  	 
  	 _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred);
#else
  	 _kernel_oserror* draw(graphics* graphic, boolean selected, boolean centred) { return redraw(graphic, selected, centred); }
#endif  	 
   	 _kernel_oserror* handleKey(int key, graphics* graphic, boolean *redraw);
  	 
  	 MFUNC(char*, char*, char*);
  	 ~MFUNC();
};
#endif
