/****************************************************************************/
//   	Filename:	menu.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
// © Pace Micro Technology Ltd
//
//	Description:
//	this contains the classes for the menu's and the menu
//	elements.
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 08/10/99  AR		File created
/****************************************************************************/

#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "main.h"
#include "message.h"
#include "graphics.h"

// the menu has menu elements but the menuElement take a pointer to a
// pointer to a menu object this is used to reflect changes in the viewed
// menu.

/****************************************************************************/
// this is a virtual class never implemented as it stands.

class menuElement : public ParentObject
{
  protected:
  	_kernel_oserror* error;
  public:
  	int element;
  	 virtual _kernel_oserror* handleKey(int, graphics*)	  	{return NULL;};
  	 virtual _kernel_oserror* saveOption() 			  	{return NULL;};
  	 virtual _kernel_oserror* redraw(graphics*, boolean, boolean) 	{return NULL;};
  	 
  	 _kernel_oserror* getError()    { return error; };
  	   	 
  	 menuElement()	        	{element = 0; error=NULL;};
  	 ~menuElement() 		{error= NULL;};
};

/****************************************************************************/
class menuObject : public ParentObject
{
  private:
       _kernel_oserror* error;
  	menuObject* 	previous;
  	int		selected;
  	char*		desc_string;
  	boolean		centred;
  	
  	menuElement*	element[MAX_elements];
  	int 		elements;
  	
  public:
  	menuObject*	chain;		// this is the menu chain;
  	char*		tag;
  	void			notCentred()		  { centred = false; }
  	void 			setPrev(menuObject *prev) { previous = prev; }
  	menuObject*		getPreviousMenu()	  { return previous; }
  	_kernel_oserror*        saveOptions();		// save settings
  	_kernel_oserror*	handleKey(int key, graphics* graphic);
  	_kernel_oserror*	drawMenu(graphics* graphic);
  	_kernel_oserror*	addElement(menuElement* ele);
  	
  	 _kernel_oserror* 	getError()    	{ return error; };
   	char*			getDescString() { return desc_string; };
  	int			getElements()	{ return elements; }
  	
  	menuObject(char* n_tag, char* desc);
  	~menuObject();
  	
};

/****************************************************************************/
class SUBMENU : public menuElement
{
  private:
  	menuObject *link;
  public:
  	 _kernel_oserror* handleKey(int key, graphics*);
  	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	 
  	 SUBMENU(menuObject* n_link);
  	 ~SUBMENU();
};


/****************************************************************************/
class choiceContainer : public ParentObject
{
  friend listNVRAM;	// I would like NVRAM to see my private parts.
  private:
  	char* choice;
  	int value;
  	choiceContainer* next;
  	choiceContainer* prev;
  	
  	choiceContainer(char* n_choice, int n_value);
  	~choiceContainer();
};
/******************************************/
class NVRAM : public menuElement
{
  protected:
  	char *desc;
  	char *tag;
  	
  public:
  	 NVRAM(char*, char*);
  	 ~NVRAM();
};

class listNVRAM : public NVRAM
{
  private:
  	choiceContainer* choices;
  	_kernel_oserror* addChoice(choiceContainer* choice);
  public:
  	listNVRAM(char* n_desc, char* n_tag):NVRAM(n_desc, n_tag) { choices = NULL; }
  	~listNVRAM();
  	
  	_kernel_oserror* addList(char* element, int val);
  	_kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	_kernel_oserror* saveOption();
  	_kernel_oserror* handleKey(int key, graphics* graphic);
};

class stringNVRAM : public NVRAM
{
  public:
  	stringNVRAM( char* n_desc, char* n_tag, int):NVRAM(n_desc, n_tag) {};
};

class rangeNVRAM : public NVRAM
{
  private:
  	int minimum, maximum, granularity, current;
  public:
  	rangeNVRAM(char* n_desc, char* n_tag, int min, int max, int gran);
  	_kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	_kernel_oserror* saveOption();
  	_kernel_oserror* handleKey(int key, graphics* graphic);
};
/****************************************************************************/
class DESC : public menuElement
{
  private:
  	char *desc;
  	char *parameters;
  	string_fn_ptr string_fn;
  public:
 	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
 	 _kernel_oserror* addArgument(char* arg) { delete arg; return NULL;}
  	 
  	 DESC(char*, char*);
  	 ~DESC();
};

/****************************************************************************/
class MFUNC : public menuElement
{
  private:
  	char *desc;
  	char *message;
  	manage_fn_ptr manage_fn;
  public:
  	 _kernel_oserror* redraw(graphics* graphic, boolean selected, boolean centred);
  	 _kernel_oserror* handleKey(int key, graphics* graphic);
  	 
  	 MFUNC(char*, char*, char*);
  	 ~MFUNC();
};
