/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/****************************************************************************/
//   	Filename:	menuheirarchy.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
//	Description:
//	This is the major container class.  It holds a list of all of the
//	menu elements.  It also ownes the viewer element.
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 08/11/99  AR		File created
/****************************************************************************/

#include <string.h>
#include <stdlib.h>

#include "menu.h"

// this is the parser object
class Parser : public ParentObject
{
  private:
  	char *file_ptr;			// pointer to an array that represents the file
  	
  	menuObject*	menu_pool;	// this needs to be visable to all methods but is deleted on exit
  					// this also represents the current element, head of the list.
  	int line_num;			// for diagnostic purposes.
  	
  	char line_str[16];		// for passing the line number to the error string on error
  	
  	_kernel_oserror* error;		// pointer to the current error null until an error occurs
  	
  	int current, seek, eof;		// offsets in the stream eof is static, current and seek generally identify the
  					// current token of interest.
  	
  	char *line_num_to_string();	// this returns a pointer to line_str with the current line number in it.
  	
	// these methods represent syntactic factors, as a general rule get functions move the seek and current
	// pointers past that factor adding it to the temp menu pool.
	void getMenuDesc();
	void getSubmenu();
	void getNVRAM();
	void getNVRAMlist(char* desc);
	void getNVRAMstring(char* desc, boolean IPstring = false);
	void getNVRAMrange(char* desc);
	void getDescFn();
	void getManagementFn();
	
	// these return true if one that factor is encountered, though don't add anything to the menu structure
	bool getComment();
	bool getChar(char item);
	
	// Seek functions move the seek pointer to the end of that factor.  The current pointer is moved to the
	// beginning of the non-space factor.  True is returned if that factor is found.
	bool  seekString();
	bool  seekToken();
	bool  seekNumber();
	
	// this compares this string with the string that exists between the current and seek position
	bool seekTokenCompare(const char*);
	
	// these extract values from the buffer, these do not change the seek and current values.
	int	getNewNumberFromSeek();
	char*	getNewStringFromSeek();		// this allocates a string
 	
  public:
  	Parser(char *file);
  	~Parser();
  	
  	_kernel_oserror* getError() { return error; }

	// this returns the head of the menu
	menuObject* getMenuPool();
};

// this is the container class for the menu pool
class menuHierarchy : public ParentObject
{
  private:
 	graphics	*graphic;       // the single graphics object
  	menuObject	*current;	// the currently viewed menu
  	menuObject	*menu_pool;
  	_kernel_oserror *error;
  	
  public:
  	menuHierarchy(graphics *n_graphic);
  	~menuHierarchy();
  	
  	_kernel_oserror* getError() { return error; }
  	
  	_kernel_oserror* handleKey(int key);
  	_kernel_oserror* change_menu(void *menu);
  	_kernel_oserror* back_menu();
  	_kernel_oserror* save();
  	_kernel_oserror* draw();
  	
  	void operator = (Parser& file_parse);
};

