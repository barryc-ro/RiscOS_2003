/****************************************************************************/
//   	Filename:	menuheirarchy.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
// © Pace Micro Technology Ltd
//
//	Description:
//	This is the major container class.  It holds a list of all of the
//	menu elements.  It also ownes the viewer element.
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 08/10/99  AR		File created
/****************************************************************************/

#include <string.h>
#include <stdlib.h>

#include "menu.h"

// this is the parser object
class Parser : public ParentObject
{
  private:
  	char *file_ptr;
  	menuObject*	menu_pool;// this needs to be visable to all methods but is deleted on exit
  				// this also represents the current element;
  	int line_num;		// for diagnostic purposes.
  	char line_str[16];
  	_kernel_oserror* error;
  	int current, seek, eof;
  	// eof == sizeof file -1;
  	
  	char *line_num_to_string() { sprintf(line_str, "%i, c(%i)(%i) s(%i)(%i)", line_num, current, file_ptr[current], seek, file_ptr[seek]); return line_str; }
  	
	// methods that represent syntactic factors
	// as a general rule get functions move the seek and current
	// pointers past that factor adding it to the temp menu pool
	void getMenuDesc();
	void getSubmenu();
	void getNVRAM();
	void getNVRAMlist(char* desc, char* token);
	void getNVRAMstring(char* desc, char* token);
	void getNVRAMrange(char* desc, char* token);
	void getDescFn();
	void getManagementFn();
	
	// these return true if one that factor is encountered
	bool getComment();
	bool getChar(char item);	// this finds a given item ignoring 'space' only
	
	// Seek functions move the seek pointer to the end of that factor.  The current offset
	// is set to the beginning of the non-space factor.
	
	bool  seekString();	// returns an allocated string;
	bool  seekToken();
	bool  seekNumber();
	
	// this compares this string with the string that exists between the current
	// and seek position
	bool seekTokenCompare(const char*);
	
	// these extract values from the buffer without inserting nulls into it
	int	getNewNumberFromSeek();
	char*	getNewStringFromSeek();		// this allocates a string
 	
  public:
  	Parser(char *file);
  	~Parser();
  	
  	_kernel_oserror* getError() { return error; }

	// this returns the head of the menu
	menuObject* getMenuPool();
};

// this is the container class for the menu pool
class menuHierarchy : public ParentObject
{
  private:
 	graphics	*graphic;       // the single graphics object
  	menuObject	*current;	// the currently viewed menu
  	menuObject	*menu_pool;
  	_kernel_oserror *error;
  	
  public:
  	menuHierarchy(char *sprite_file);
  	~menuHierarchy();
  	
  	_kernel_oserror* getError() { return error; }
  	
  	_kernel_oserror* handleKey(int key);
  	_kernel_oserror* change_menu(void *menu);
  	_kernel_oserror* back_menu();
  	_kernel_oserror* draw();
  	
  	void operator = (Parser& file_parse);
};

