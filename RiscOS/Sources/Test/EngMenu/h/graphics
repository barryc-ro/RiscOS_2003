/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/****************************************************************************/
//   	Filename:	graphics.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
//      Description:
//	this is an object that ownes graphic functionality
//	as such it should be this only that would need changing
//	to change platform 
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 10/10/99  AR		File created
/****************************************************************************/

#ifndef __GRAPHICS_H_
#define __GRAPHICS_H_

#include "message.h"

class graphics : public ParentObject
{
  private :
	typedef enum {
	  	pal,
	  	ntsc
	} tv_types;
	
	typedef enum {
  		align_left,
  		align_right,
  		align_centre,
  		align_cen_right, 	// this aligns centre until it is full then right
  		align_cen_left
	} text_alignment;
	
	typedef struct
        {
          	int x0;
          	int y0;
          	int x1;
          	int y1;
        } box;

	typedef struct
	{
        	int width;
        	int height;
        	int bpp;
        	char name[24];
        	int size;
        	int mode;
	} imageinfo_str;
	
	tv_types tv_type;

	imageinfo_str sprite_info;

	_kernel_oserror* error;
	
  	int x_eig, y_eig, bpp;
  	
  	int set_fn_keys;
  	int buffer_codes[8];
  	
  	int element_offset;	// this is the number of elements to shift down to vertically center the elements
  	boolean redraw_sprite;

  	int fonthandle;
  	int sprite_area[12 * 1024];

  	// this is the size of the display window
  	int window_height;
  	int window_width;
  	box safe_area;
  	
  	// define the graphics window
  	_kernel_oserror* set_graphics_window(int x0, int y0, int x1, int y1);
  	_kernel_oserror* clear_graphics_window();
  		
  	// sprite based graphics
  	_kernel_oserror* plot_sprite_translated(int x, int y);
	_kernel_oserror* load_sprite(const char *filename);
	
  	// font based graphics
  	int getLines(char* local_text, int text_len, int width_milli, _kernel_oserror** err);
  	_kernel_oserror* display_text(const char *text, text_alignment align, box border, int box_col, int font_col);
	_kernel_oserror* display_fullPageText(const char *text, box border);
	_kernel_oserror *draw_full_box(int xbl, int ybl, int xtr, int ytr, int col);

  public:
  	// input methods, key press
  	_kernel_oserror* getKey(int* key, boolean* success = NULL);	// get a key with timeout
  	_kernel_oserror* flushKeys();				// empty the keyboard buffer

  	// menu draw methods
  	_kernel_oserror *drawWindow();
  	_kernel_oserror *reDrawWindow(int elements);
  	_kernel_oserror *redrawSecondaryString(int row, char* text);
  	_kernel_oserror *drawMenuElement(boolean selected, int row, char *text, char *text2 = NULL);
  	_kernel_oserror *drawCentredMenuElement(boolean selected, int row, char *text);
  	
  	_kernel_oserror *drawSelectable(int row);
  	
  	_kernel_oserror *drawDialogue(char* text);
  	_kernel_oserror *drawError(_kernel_oserror* error, message_token token = MSG_Reboot);
#ifdef McCabe  	
	_kernel_oserror *getError();
#else
  	_kernel_oserror *getError() 	{ return error; }
#endif
  	graphics(const char* sprite_file);
  	~graphics();
};
#endif
