/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
#include "main.h"
#include "interface.h"

#include <ctype.h>

// for getting interface information
#include "sys/dcistructs.h"

// DESC functions
// MAX_MSG_LEN is defined in the messages file
static char fn_string[MAX_MSG_LEN];

//---------------------------------------------------------------------- generic global functions ----------
_kernel_oserror* addListElement(list_choice** list, char* element, int value)
{
  	_kernel_oserror *err = NULL;
  
  	list_choice *tmp, *tmp2;
  	
	tmp = new list_choice;
  	
  	if (tmp != NULL){
  	  
  		tmp->choice = element;
  		tmp->value = value;
  		
  		if ((*list) != NULL){
  		  	// tmp2 may be equal to choices, we are going
  		  	// to insert tmp between tmp2 and choices.
  			// insert before the current choice otherwise it goes in backwards
  			tmp2 = (list_choice*)(*list)->prev;
  			tmp2->next = tmp; tmp->prev = tmp2;
  			(*list)->prev = tmp; tmp->next = (*list);
  		} else {
  		  	// tmp is the only element in the loop
  		  	// and choices must point to it.
  		  	tmp->next = tmp->prev = (*list) = tmp;
  		}
  	} else {
  	  	ParentObject tmp;
  	  	if (err == NULL) err = tmp.makeError(EM_Alloc);
  	}
  	
  	return err;
}
//------------------------------------------------------------- string description interface functions ----------

// the following algorithm is taken from the system so if a string fails here it will fail when comparing (i.e rmensure)
// this is with the exception of the early termination on the close bracket.  This reads the help, in string, string
// into fn_string.  It only has file visibility. 
_kernel_oserror* extract_version(char* string)
{
    _kernel_oserror* error = NULL;
    int r0 = 0, r5 = 0;	// string offset and column count, not the same
    char r1;
    
    boolean parse_error = false;
    
    // find the beginning of the 16 character as written i.e. when displayed the contents of the 16th column
    // allowing for tabs (which is equivilent to current position mod 8 spaces.
    do
    {
      	r1 = string[r0++];
      	
      	// if control character terminated
    	if ((r1 == '\0')||(r1 == 10)||(r1 == 13))
    	{
    	  	parse_error = true;
    	  	break;
    	}
    	
    	r5++;
    	
    	if (r1 == 9) // if tab
    	{
    		r5 = (r5+7)&~7;          				
    	}
    }
    while (r5 < 16);
    
    // if no errors so far extract the version number
    if (parse_error == false) {

	// look for the first digit	  
   	while (!isdigit(string[r0])){
  	
 		//control characters
 	  	if ( ((int)(string[r0]) < 31) && (string[r0] != 9) )
  	  	{
		  		parse_error = true;
		  		break;
		} 
		else
		{
				r0++;
		}
	}
  	  	  			
	if (parse_error == false)
	{
	  	int i = 0;
	  	
	  	// read from the help string into the fn_string
  	  	while  ( (i < MAX_MSG_LEN) && (isprint(string[r0])) )
  	 	{
  	  	  	fn_string[i++] = string[r0];
  	  	  	
  	  	  	if (string[r0++] == ')')
  	  	  	{
  	  	  		break;
  	  	  	}
  	  	}
  	  	
  		fn_string[i] = '\0';
	}
    }
    
    // if we cannot read the string we will assign the string to the unknown token		
    if (parse_error == true)
    {
      	ParentObject tmp;
  	error = tmp.lookupMessage(MSG_Unknown, fn_string, MAX_MSG_LEN);
    }
    
    return error;
}

_kernel_oserror* moduleVersion(char **string, int margc, char* margv[])
{
  	ParentObject tmp;
  	_kernel_oserror* error = NULL;
  	
  	if (margc == 1)
  	{
  	  	char* location = NULL;		// pointer to the module area
  	  	char * help_string;		// pointer to the help string
  	  	int offset;			// the offset as held in the module header
  	  	
  	  	error = _swix(OS_Module, _INR(0,1)|_OUT(3), 18, margv[0], &location);
  	  	
  	  	if ((error == NULL)&&(location != NULL))
  	  	{
  	  	  	offset = (*(location + 0x14)); 		// get the offset value
  	  	  	help_string = (location + offset); 	// de-reference the pointer to the help string
  	  	  	
  	  	  	if (offset != 0) 			// if there is a string
  	  	  	{
  	  	  		error = extract_version(help_string);
  	  	  	}
  	  	  	else 
  	  	  	{
  	  	  	  	error = tmp.lookupMessage(MSG_Unknown, fn_string, MAX_MSG_LEN);
  	  	  	}
  	  	  	
  	  	  	(*string) = fn_string;
  	  	}
  	  	else
  	  	{
  	  	  	if (error == NULL) error = tmp.makeError(EM_ObjectError);
  	  	}
  	}
  	else 
  	{
  	  	error = tmp.makeError(EM_ObjectError);
  	}
 		
  	return error;
}

_kernel_oserror* dciInfo(char** string, int margc, char* margv[])
{
  	//return parameters;
	IGNORE(margc);
	IGNORE(margv);
	
	chaindib *list = NULL;
	boolean found = false;
	_kernel_oserror* error = NULL;
	
	error = _swix(OS_ServiceCall, _INR(0,1)|_OUT(0), list, Service_EnumerateNetworkDrivers, &list);
	
	if (error == NULL){
		chaindib* next = NULL;
		
		while (list != NULL){
		  	// examine

		  	if ((found == false)&&(list->chd_dib->dib_inquire & INQ_HWADDRVALID))
		  	{
		  	  	found = true;
		  	  	// mess with the dib address;
		  	  	sprintf(fn_string, "%2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X", 
		  	  		list->chd_dib->dib_address[0], list->chd_dib->dib_address[1], list->chd_dib->dib_address[2],
		  	  		list->chd_dib->dib_address[3], list->chd_dib->dib_address[4], list->chd_dib->dib_address[5]);
		  	}
		  	
		  	// delete list element, we don't delete the dib block as it is static.
		  	next = list->chd_next;
		  	error = _swix(OS_Module, _IN(0)|_IN(2), 7, list);
		  	list = next;
		}
	}
	
	if (found == false){
		ParentObject tmp;
  	  	error = tmp.lookupMessage(MSG_Unknown, fn_string, MAX_MSG_LEN);
  	}
   	  
	(*string) = fn_string;	  
		
	return error;
}

//LIST FUNCTIONS
_kernel_oserror* list_tv_standards(list_choice** list)
{
  	_kernel_oserror* error = NULL;
  
  	TV_Standard_struct *standards;

  	// call the DENCdriver to get the list.
  	error = _swix(Macrovision_PlatformFeatures, _IN(0)|_OUT(1), 0, &standards);
  	
  	if (error == NULL){
  	  	int i = 0;
  	  	
  	  	// while not NULL word terminated
  	  	while ((((int)(*(standards[i].TVStandard))) != 0)&&(error == NULL)){
  	  	  
 	  	  	char *tmp = new char[12];
  	  	  	
  	  	  	if (tmp == NULL) {
  	  	  	  	ParentObject tmp;
  	  	  		error = tmp.makeError(EM_Alloc);
  	  	  	} else {
  	  	  	  	
  	  	  	  	strncpy(tmp, standards[i].TVStandard, 12);
  	  	  	
  	  	  		error = addListElement(list, tmp, standards[i].NVRAM_value);
  	  	  	}
  	  	  	i++;
  	  	}
  	}
  	
  	return error;
}

// long winded but it means that in the TVstandards object there is an offset that is required in asking for
// the set of TVChannels that are available for the current TVStandard.
int getCurrentStandardChannelOffset(_kernel_oserror** error)
{
	
        const char* tvStandard_tag = "TVStandard";
  
        TV_Standard_struct   *standards;
   
        int standard = 0, length = 0, channel_offset = -1, i = 0;

	  	
	if ((*error) == NULL)
	{
	  	(*error) = _swix(NVRAM_Read, _INR(0,2)|_OUT(0), tvStandard_tag, &standard, 0, &length);
	
		if (length < 0)
		{
		  	ParentObject tmp;
		  	(*error) = tmp.makeError(EM_NVRead, tvStandard_tag);
		}
		else
		{
  			// call the DENCdriver to get the standards list.
  			(*error) = _swix(Macrovision_PlatformFeatures, _IN(0)|_OUT(1), 0, &standards);
  	
  	  		// while not NULL word terminated
  	  		while ( ((*error) == NULL) && (((int)(*standards[i].TVStandard)) != 0) ){
  	  		        
  	  	  		if (standards[i].NVRAM_value == standard)
  	  	  		{
  	  	  		  	channel_offset = standards[i].TVChannels_offset;
  	  	  		  	break;
  	  	  		}
  	  	  		else
  	  	  		{
  	  	  		  	i++;
  	  	  		}
  	  	  		
  	  	  	}
  	  	}
  	}
  	return channel_offset;
}

_kernel_oserror* list_tv_channels(list_choice** list)
{
   	_kernel_oserror* error = NULL;
   	TV_Channel_Returnable *channels;
   	int channel_offset = -1;
   	int i =0;
   
   	channel_offset = getCurrentStandardChannelOffset(&error);
     	
	// get the channels for the configured standard.
  	if ( (error == NULL) && (channel_offset != -1) )
  	{
  	  	  	  
  	  	error = _swix(Macrovision_PlatformFeatures, _INR(0,1)|_OUT(2), 1, channel_offset, &channels);
  	  	  	  	
  		// while not NULL word terminated
  	  	while ( (error == NULL) && (i < channels->channel_count) )
  	  	{
  	  		char *tmp = new char[5];
  	  		
  	  		if (tmp == NULL)
  	  		{
   				ParentObject tmp;
  	  	  		error = tmp.makeError(EM_Alloc);
  	  	  	}
  	  	  	else
  	  	  	{
  	  	  		tmp[4] = '\0';
  	  	  		strncpy(tmp, channels->channels[i].TVChannel, 4);
  	  	  	
  	  	  		error = addListElement(list, tmp, channels->channels[i].NVRAM_value);
  	  	  	}
  	  	  	i++;
  	  	}
  	}
   	return error;
}
