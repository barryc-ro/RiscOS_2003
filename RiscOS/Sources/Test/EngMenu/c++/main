#include "main.h"
#include "stdio.h"
#include "swis.h"
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include <stdio.h>

#include "menuhier.h"

extern "C" {
#include "bbc.h" // dont laugh it is a short cut to getting key presses.
}

menuHierarchy* menus_ptr = NULL;
boolean do_continue = false;


// MFUNC functions
_kernel_oserror* back_menu(void) {
  	if (menus_ptr != NULL){
  	  	menus_ptr->debug("", "fn back\n");
  		return menus_ptr->back_menu();
  	} else {
  		return NULL;
  	}
}

_kernel_oserror* change_menu(void *menu)
{
  	if (menus_ptr != NULL){
  	  	menus_ptr->debug("", "fn change menu\n");
  		return menus_ptr->change_menu(menu);
  	} else {
  		return NULL;
  	}
}

_kernel_oserror* save(void)
{
  	if (menus_ptr != NULL){
  	  	menus_ptr->debug("", "fn save\n");
  	  	return menus_ptr->save();
  	} else {
  	    	return NULL;
  	}
}

_kernel_oserror* terminate(void)
{
  	if (menus_ptr != NULL)
  	  	menus_ptr->debug("", "fn terminate\n");
  	  	
  	do_continue = false;
  	return NULL;
}

// DESC functions
static char fn_string[128];

char *test_fn(int margc, char* margv[])
{
	if (margc != 1) {
  	  	strcpy(fn_string, "invalid args");
  	} else {
  	
  		_kernel_oserror *error = NULL;
  		
  		//_kernel_swi_regs r;
  		
  		menus_ptr->debug("","args = (%s)\n", margv[0]);
  	
  		//error = _swix(NVRAM_Read, _INR(0,2), _OUTR(0,2), margv[0], 0, 0, &r.r[0], &r.r[1], &r.r[2]);
  		//error = _kernel_swi(NVRAM_Read, &r, &r);
  	
  		if (error != NULL)
  			menus_ptr->debug("", "test fn error :(%s)\n", error->errmess);
  		
  		sprintf(fn_string, "not calling NVRAM");//(%i)", r.r[0]);
  		//menus_ptr->debug("", "get size (%i)(%i)(%i)\n", r.r[0], r.r[1], r.r[2]);
  	}
  	
  	return (fn_string);
}

char *dummy(int margc, char* margv[])
{ 
	//return parameters;
	IGNORE(margc);
	IGNORE(margv);
	
	return ("dummy function");
}

//-------------------------------------------------------------------------------- tables of functions ------

// management functions
manage_fn_table management_functions[] = {
  "exit", terminate,
  "back", back_menu,
  "save", save
};
static int no_of_management_functions = 3;

// functions that return strings
string_fn_table string_functions[] = {
  "test", test_fn,
  "dummy", dummy
};
static int no_of_string_functions = 2;


//-------------------------------------------------------------------------------- Lookup functions ------


string_fn_ptr lookup_string_function(char *token, _kernel_oserror** err)
{
  	if ((*err) == NULL){
  	  	int function = no_of_string_functions -1;
  	  	while (function >= 0){
  	  	  if (strcmp(token, string_functions[function].token) == 0)
  			return string_functions[function].function;
  		  function--;
  		}
  	}
  	return dummy;
}

manage_fn_ptr lookup_management_function(char *token, _kernel_oserror** err)
{
  	if ((*err) == NULL){
  	  	int function = no_of_management_functions -1;
  	  	while (function >= 0){
  	  	  if (strcmp(token, management_functions[function].token) == 0)
  			return management_functions[function].function;
  		  function--;
  		}
  	}
  	return back_menu;
}



//-------------------------------------------------------------------------------- MAIN ------------------
#define task_name "EngMenu"

// command line is: !EngMenu Config Sprite Messages

int main(int argc, char* argv[])
{
  	int key;
  	
  	_swi(OS_Byte, _INR(0,1)|_OUT(1), 121, 0, &key);
  	
  	//if (key == select_key_button_number) {
  	if (1) {
  		if (argc == 4) {
  	  
                   	_kernel_oserror *err = NULL; 
                   	// initialise everything    
                   	MessageFile messagefile(task_name, &err, argv[3]);
            
                  	// hide the cursor
                  	if (err == NULL) err = bbc_cursor(0);
                
                	if (err == NULL) {
                	  	do_continue = true;
                	  	
                	  	graphics window(argv[2]);
                	  	
                	  	if ((err = window.getError()) == NULL) {
                	  	
                        	  	menuHierarchy menus(&window);
                        	  	
                        	  	if ((err == NULL)&&((err = menus.getError()) == NULL)){
                                        
                               			Parser file_parse(argv[1]);
                               	
                               			menus = file_parse; // assign the parsed file to the menu structure
                               			
                               			if ((err = file_parse.getError()) == NULL)
                               				err = menus.draw();// this acts as get error also
                               			
                               			if (err != NULL)
                               				menus.debug("", "error = %s\n", err->errmess);
                               			else
                               				menus.debug("", "error = NULL\n");
                               		}
                        	  	
                        	  	if ((err == NULL)&&((err = menus.getError()) == NULL)){
                        	  		menus_ptr = &menus;
                        	  	
                               			while ((err == NULL)&&(do_continue == true)){
                               		     	
                                       			key = bbc_get();
                                       		                               		
                            				err = menus.handleKey(key);
                            			
                               			}// loop
                       		        }
                       		        
                       			if (err != NULL) {
                       			  	// error creating
                       			  	menus.debug("", "drawing debug message");
                       			  	window.drawError(err->errmess);
                       			  	
                       			  	key = 0;
                       			  	
                       			  	while (key != key_select) {
                       			  	  	key = bbc_get();
                       			  	}
                       	      		}
                       	        } else { // cannot allocate graphics
                       	          	printf("%s, %s", task_name, err->errmess);
                       	        }
                       	        
                	}
                    
                   	// this is nearly useless as it is not a wimp task but it is a useful practice.
                   	if (err != NULL)
                          _swi(Wimp_ReportError, _INR(0,2), err, 0x19, task_name);
                          
           	}
           
        }// select key not held down
}
