/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/

#include "main.h"
#include "interface.h"
#include "menuhier.h"

// file scope variables
static menuHierarchy* menus_ptr = NULL;
//static boolean do_continue = false;

//--------------------------------------- management functions -----------------

_kernel_oserror* change_menu(void *menu)
{
  	if (menus_ptr != NULL){
#ifdef DEBUGLIB  	  
  	  	menus_ptr->debug("functions", "fn change menu\n");
#endif  	  	
  		return menus_ptr->change_menu(menu);
  	} else {
  		return NULL;
  	}
}

// MFUNC functions
_kernel_oserror* back_menu(void) {
  	if (menus_ptr != NULL){
#ifdef DEBUGLIB  	  
  	  	menus_ptr->debug("functions", "fn back\n");
#endif  	  	
  		return menus_ptr->back_menu();
  	} else {
  		return NULL;
  	}
}

_kernel_oserror* save(void)
{
  	if (menus_ptr != NULL){
#ifdef DEBUGLIB  	  
  	  	menus_ptr->debug("functions", "fn save\n");
#endif
  	  	return menus_ptr->save();
  	} else {
  	    	return NULL;
  	}
}

_kernel_oserror* terminate(void)
{
  	if (menus_ptr != NULL)
  	{
#ifdef DEBUGLIB  	  
  	  	menus_ptr->debug("functions", "fn terminate\n");
#endif 
		return menus_ptr->terminate();
	}
	else	  	
	{
	  	return NULL;
	}
  	
  	return NULL;
}

_kernel_oserror* reset_nvram(void)
{
  	// this reads the checksum and writes ~checksum to that value.
  	// the location of the checksum is a byte at 0xEF in the NVRAM.
  	// this uses OS_Bytes so as not to alert the NVRAM module that
  	// it is corrupting its checksum.  We then reboot the NVRAM will
  	// reset its values to default because the checksum is incorrect.
  	
  	int checksum;
  	_kernel_oserror* err = NULL;
  	
#ifdef DEBUGLIB  	  
  	if (menus_ptr != NULL)
  	  	menus_ptr->debug("functions", "fn reset NVRAM\n");
#endif  	  	

  	err = _swix(OS_Byte, _INR(0,1)|_OUT(2), 161, 0xEF, &checksum);
  	
  	if (err == NULL) {
  	  	checksum = 0xFF & (~checksum);
  	  	
  	  	err = _swix(OS_Byte, _INR(0,2), 162, 0xEF, checksum);
  	  	
  	  	if ((err == NULL)&&(menus_ptr != NULL))
  	  	{
  	  	  	err = menus_ptr->terminate();
  	  	}
  	}
  	
  	return err;  	
}

//-------------------------------------------------------------------------------- tables of functions ------

// management functions
manage_fn_table management_functions[] = {
  "exit", terminate,
  "reset", reset_nvram,
  "back", back_menu,
  "save", save
};
static int no_of_management_functions = 4;

// functions that return strings
string_fn_table string_functions[] = {
  "moduleVersion", moduleVersion,
  "macAddress", dciInfo
};
static int no_of_string_functions = 2;

list_fn_table list_functions[] = {
  "getTVStandards", list_tv_standards,
  "getTVChannels", list_tv_channels
};
static int no_of_list_functions = 2;

//-------------------------------------------------------------------------------- Lookup functions ------


string_fn_ptr lookup_string_function(char *token, _kernel_oserror** err)
{
  	if ((*err) == NULL){
  	  	int function = no_of_string_functions -1;
  	  	while (function >= 0){
  	  	  if (strcmp(token, string_functions[function].token) == 0)
  			return string_functions[function].function;
  		  function--;
  		}
  	}
  	
  	(*err) = menus_ptr->makeError(EM_BadFnCall, token);
  	
  	return dciInfo;	// I am returning an arbitrary function here to protect against de-referencing
  			// I appreciate that it is not necessary but a nice safty net incase, I or somebody
  			// adding to the code does not check for errors and null functions before de-referencing.
}

manage_fn_ptr lookup_management_function(char *token, _kernel_oserror** err)
{
  	if ((*err) == NULL){
  	  	int function = no_of_management_functions -1;
  	  	while (function >= 0){
  	  	  if (strcmp(token, management_functions[function].token) == 0)
  			return management_functions[function].function;
  		  function--;
  		}
  	}
  	(*err) = menus_ptr->makeError(EM_BadFnCall, token);
  	
  	return terminate;
}

list_fn_ptr lookup_list_function(char *token, _kernel_oserror** err)
{
  	if ((*err) == NULL){
  	  	int function = no_of_list_functions -1;
  	  	while (function >= 0){
  	  	  if (strcmp(token, list_functions[function].token) == 0)
  			return list_functions[function].function;
  		  function--;
  		}
  	}
  	(*err) = menus_ptr->makeError(EM_BadFnCall, token);
  	
  	return list_tv_standards;
}



//-------------------------------------------------------------------------------- MAIN ------------------

// this method interacts with the system as a whole doing such things as turning escapes off and setting
// up the messages file.

// command line is: !EngMenu Config Sprite Messages

int main(int argc, char* argv[])
{
  	int key;
  	_kernel_oserror *err = NULL;
  	
#ifdef DEBUGLIB
	ParentObject tmp;
#endif	  	
  	
  	err = _swix(OS_Byte, _INR(0,1)|_OUT(1), 121, select_key_button_number^0x80, &key);
  	
// these descision points are commented out to avoid hassle
#ifdef DEBUGLIB
  	if (err == NULL)
  	{
#else
#ifdef McCabe
  	if (err == NULL)
  	{
#else
  	if ( (err == NULL) && (key != 0) )
  	{
#endif 
#endif  	 
                // wait for the user to lift their finger
        	while (key != 0)
        	{
              		_swi(OS_Byte, _INR(0,1)|_OUT(1), 121, select_key_button_number^0x80, &key);
        	}
        	
                // initialise everything
                MessageFile messagefile(task_name, &err, argv[3]);
                
 		// if we stand a chance of getting all of the parameters required
  		if ((err == NULL)&&(argc == 4))
  		{
  		  	// turn escapes off.
  			int escape_cond = 0x01;
  		  	_swi(OS_Byte, _INR(0,2)|_OUT(1), 200, escape_cond, 0, &escape_cond);
  	  
                  	menuHierarchy menus(argv[2]);
                   	
                   	if ( ( err = menus.getError() ) == NULL)
                   	{
                   	  	menus_ptr = &menus;
                   	  	err = menus.run(argv[1]);
                   	}
                        
                    	// set escapes back to what they where
  		  	_swi(OS_Byte, _INR(0,2)|_OUT(1), 200, escape_cond, 0xFF, &escape_cond);          
          	}
                 
                // this is nearly useless as it is not a wimp task but it is a useful practice.
                if (err != NULL)
                {
                     fprintf(stderr, "EngMenu error:%s\n", err->errmess);
#ifdef DEBUGLIB                  
                     tmp.debug("main","exit main err = (%s)\n", err->errmess);
#else
#ifndef McCabe
		     _swi(OS_GenerateError, _IN(0), err);              
#endif		     
#endif               
               }
#ifdef DEBUGLIB                
                else
                {
         	     tmp.debug("main","exit main err = NULL\n");
                }
#else
#ifndef McCabe
		// reset is the only way out.
		_swi(OS_Reset, _IN(0), 0);
#endif		
#endif                
		
        }// select key not held down
}
