/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/*------------------------------------------------------------------------------*/
/*    Filename    : c++.Message                                           */
/*    Author    : A.Rodger                    */
/*    Date        : may 1999                    */
/*    Source      : c++.Message             */
/*    Description : this object is designed to interact with the RiscOS         */
/*                MessageTrans calls to give a simple error handling interface. */
/*                                                                              */
/*    Modification history:                               */
/*------------------------------------------------------------------------------*/


#include "message.h"
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

#ifdef DEBUGLIB
#include "<Lib$Dir>.DebugLib/DebugLib.h"
#endif

// this is used by the error class in looking up tokens
// it has file scope.

static MessageFile  *messages = NULL;

// methods
MessageFile::MessageFile(char *task_name, _kernel_oserror **err, const char *filename)
{
       const char *loc_filename = filename;

#ifdef DEBUGLIB
               /*
               ** Set default output to PRINTF so that if output device
               ** is not overridden in the !Run file, it doesn't try to
               ** send output to a non-existent device (e.g. parallel port)
               ** and hang as a result.
               */
               debug_initialise(task_name, "" , "");
               debug_output_device( PDEBUG_OUTPUT );
#else
               task_name = task_name;
#endif

       if (filename == NULL)
          loc_filename = MESSAGES_FILE;

       // allocate a file descriptor in non relocatable memory RMA. (ah hypocrasy)
       (*err) = _swix(OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, sizeof(message_file_id) + strlen(loc_filename)+1, &descriptor);

       // if there was no error open the file
       if ((*err) == NULL){
             strncpy(descriptor->filename, loc_filename, strlen(loc_filename));
             descriptor->filename[strlen(loc_filename)] = '\0';
             (*err) = _swix(MessageTrans_OpenFile, _INR(0,2), descriptor, descriptor->filename, NULL);

             messages = this;
       }
}
// close the file and delete the file descriptor
MessageFile::~MessageFile()
{
       messages = NULL;
       _swi(MessageTrans_CloseFile, _IN(0), descriptor);
       _swi(OS_Module, _IN(0)|_IN(2), 7, descriptor);
#ifdef DEBUGLIB
       debug_atexit();
#endif
}

_kernel_oserror*
MessageFile::lookupError(error_token err_token, const char* param0, const char* param1, const char* param2, const char* param3)
{
    _kernel_oserror tmp, *ret1 = NULL, *ret2 = NULL;

    tmp.errnum = (int)err_token;

    if ((tmp.errnum > (int)error_MAXERROR)||(tmp.errnum < ErrorAllocation))
              err_token = error_MAXERROR;

    sprintf(tmp.errmess, "E%2.2X\0", (tmp.errnum - (int)ErrorAllocation));

    ret1 = _swix(MessageTrans_ErrorLookup, _INR(0,7)|_OUT(0), &tmp, descriptor, 0, NULL, param0, param1, param2, param3, &ret2);

    // this lookup has been designed to use the internal buffers of messagetrans if this were in a module I would strongly suggest using
    // your own buffer space.

    if (ret1 != NULL)
        return ret1;
    else
        return ret2;
}

_kernel_oserror*
MessageFile::lookupMessage(message_token mes_token, char *buf, size_t size, const char* param0, const char* param1, const char* param2, const char* param3)
{
    char token[message_TOKENSTRING];
    sprintf(token, "T%2.2X\0", (int)mes_token);
    return _swix(MessageTrans_Lookup, _INR(0,7), descriptor, token, buf, size, param0, param1, param2, param3);
}

//---------------------------------------------------
// the following code is for the Parent Object class
//---------------------------------------------------
_kernel_oserror*
ParentObject::makeError(error_token err_token, const char* param0, const char* param1, const char* param2, const char* param3)
{
//#ifdef DEBUGLIB
//    _kernel_oserror* err = NULL;
//    if (messages != NULL)
//       err = messages->lookupError(err_token, param0, param1, param2, param3);
//    if (err != NULL)
//    	debug("", "create error (%s)\n", err->errmess);    
//    return err;
//#else
    if (messages != NULL)
       return messages->lookupError(err_token, param0, param1, param2, param3);
    
    return NULL;
//#endif
}

_kernel_oserror*
ParentObject::lookupMessage(message_token mes_token, char *buf, size_t size, const char* param0, const char* param1, const char* param2, const char* param3)
{
   if (messages != NULL)
       return messages->lookupMessage(mes_token, buf, size, param0, param1, param2, param3);

   return NULL;
}

_kernel_oserror*
ParentObject::debug(const char *area, const char *string, ...)
{
#ifndef DEBUGLIB
        area = area;
        string = string;
#else
        va_list va;
        char    buffer[1024];

        va_start(va, string);
        vsprintf(buffer, string, va);
        va_end(va);

        dprintf((area, buffer));
#endif

    return NULL;
}

