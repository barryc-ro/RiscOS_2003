

/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
  
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

extern "C" {
#include "kernel.h"
#include "swis.h"
#include "os.h"
#include "bbc.h"
}
#include "main.h"
#include "graphics.h"

// swi calls
#define NH_AntiTwitter		0x838C0
#define ModeFiles_SafeArea	0x4D481

/***************************************************************************************************/
// this section defines the variables refered to in the drawing functions
#define font_size 16
#define twitter_border 3	// the overscan to twitter.

static const char clear_cursor[] = {23,1,0,0,0,0,0,0,0,0};

// these are integer 24 bit colour values of the form
// BBGGRR00 where B,G & R mean blue, green and red.
typedef enum {
  col_background = 0x55000000,
  col_orange	 = 0x0044CC00,
  col_lightblue  = 0xCC000000,
  col_offwhite	 = 0xF8F8F800,
  col_NTSC_offwhite = 0xA8A8A800
} col_palette;

#define X_PIXELS_TO_OSUNITS(a)	(a << x_eig)
#define Y_PIXELS_TO_OSUNITS(a)	(a << y_eig)
#define X_OSUNITS_TO_PIXELS(a)  (a >> x_eig)
#define Y_OSUNITS_TO_PIXELS(a)  (a >> y_eig)

// macros used to make code more readable, they only have file scope
#define COL_OFFWHITE		((tv_type == pal) ? col_offwhite : col_NTSC_offwhite )
#define SPRITE_TOP		( safe_area.y0 +  Y_PIXELS_TO_OSUNITS(sprite_info.height))

#define ELEMENT_HEIGHT		(Y_PIXELS_TO_OSUNITS(font_size)*3)
#define ELEMENT_BORDER		((int)(ELEMENT_HEIGHT/12.5))

#define TOP_OF_TOP_ELEMENT	(safe_area.y1 - ELEMENT_HEIGHT*3/4)
#define COLUMN_C_LEFT		(safe_area.x0 + (( (safe_area.x1-safe_area.x0) /8 )+1 ))
#define COLUMN_C_RIGHT		(safe_area.x1 - (( (safe_area.x1-safe_area.x0) /8 )+1 ))
#define COLUMN_1_LEFT		(safe_area.x0 + (ELEMENT_HEIGHT/2))
#define COLUMN_2_RIGHT 		(safe_area.x1 - (ELEMENT_HEIGHT/2))
#define COLUMN_1_RIGHT 		((( (safe_area.x1-safe_area.x0) /2)+safe_area.x0)+1 - (ELEMENT_HEIGHT>>1) - ELEMENT_BORDER)
#define COLUMN_2_LEFT		((( (safe_area.x1-safe_area.x0) /2)+safe_area.x0)+1 + (ELEMENT_HEIGHT>>1) - ELEMENT_BORDER)

/***************************************************************************************************/

_kernel_oserror*
graphics::plot_sprite_translated(int x, int y)
{
  char pal[256];
  int scale[16];
  
  int logical_colour;
  
  _kernel_swi_regs r;
  _kernel_oserror *err = NULL;

  err = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 3, &logical_colour);
  
  if ((err == NULL)&&(logical_colour > 15))
  {
    	r.r[0] = 0x100;
    	r.r[1] = (int) sprite_area;
    	r.r[2] = (int) sprite_info.name;
    	r.r[3] = r.r[4] = r.r[5] = 0;
    	r.r[6] = (int) scale;
    	r.r[7] = (int) pal;
    	err = _kernel_swi(Wimp_ReadPixTrans, &r, &r);
    
    	if (err == NULL) {
    		r.r[0] = (int) sprite_area;
    		r.r[1] = (int) sprite_info.name;
    		r.r[2] = r.r[3] = -1;
    		r.r[4] = (int) pal;
    		err = _kernel_swi(ColourTrans_SelectTable, &r, &r);
    	}
  } else {
    	r.r[0] = 0x100;
    	r.r[1] = (int) sprite_area;
    	r.r[2] = (int) sprite_info.name;
    	r.r[3] = r.r[4] = r.r[5] = 0;
    	r.r[6] = (int) scale;
    	r.r[7] = (int) pal;
    	err = _kernel_swi(Wimp_ReadPixTrans, &r, &r);
  }

  if (err == NULL){
  	r.r[0] = 256 + 52;
  	r.r[1] = (int) sprite_area;
  	r.r[2] = (int) sprite_info.name;
  	r.r[3] = x;
  	r.r[4] = y;
  	r.r[5] = 8;
  	r.r[6] = (int) scale;
  	r.r[7] = (int) pal;
  	err = _kernel_swi(OS_SpriteOp, &r, &r);
  }
  return err;
}

// load and plot a sprite at x and y co-ords os units.
_kernel_oserror*
graphics::load_sprite(const char *filename)
{
  _kernel_swi_regs r;
  _kernel_oserror *err;
  char name[25];

  sprite_area[0] = 12 * 1024;
  sprite_area[2] = 16;
  r.r[0] = 256 + 9;
  r.r[1] = (int) sprite_area;
  err = _kernel_swi(OS_SpriteOp, &r, &r);

  if (!err)
  {
      r.r[0] = 256 + 10;
      r.r[1] = (int) sprite_area;
      r.r[2] = (int) filename;
      err = _kernel_swi(OS_SpriteOp, &r, &r);

      r.r[0] = 256 + 13;
      r.r[1] = (int) sprite_area;
      r.r[2] = (int) name;
      r.r[3] = 24;
      r.r[4] = 1;
      _kernel_swi(OS_SpriteOp, &r, &r);
      name[r.r[3]] = 0;
      strcpy(sprite_info.name, name);

      r.r[0] = 256 + 40;
      r.r[1] = (int) sprite_area;
      r.r[2] = (int) sprite_info.name;
      _kernel_swi(OS_SpriteOp, &r, &r);
      
      // these are read as pixels
      sprite_info.width = r.r[3];
      sprite_info.height = r.r[4];
      
      sprite_info.mode = r.r[6];
  }
  return err;
}

// object functions
// 
/***************************************************************************************************/
// this function draws a rectangle then plots text over it text_alignment aligned.
// for font paint see 3-429
_kernel_oserror*
graphics::display_text(const char *text, text_alignment align, box border, int box_col, int font_col)
{
	_kernel_oserror *err = NULL;
	char* tmp_string;
	
	tmp_string = new char[strlen(text)+1];
	
	if (tmp_string == NULL){
	  	err = makeError(EM_Alloc);
	} else {
		int width, height, start_x, start_y;
		
		 /* includes a 5% margin */
		int margin = (border.x1-border.x0)/20;
		
		int co_ord[5], width_milli;
		char *ptr = NULL;
		
	  	strcpy(tmp_string, text);
	  	
	  	// determine the cut-off for strings that are too long.
	  	co_ord[0] = 0; // there is no need to specify where it is being displayed we are only interested
	  	co_ord[1] = 0; // in the width.
	  	co_ord[2] = 0;
	  	co_ord[3] = 0;
	  	co_ord[4] = ' ';	// cut-off character if available.
	  	
	  	_swi(Font_Converttopoints, _IN(1)|_OUT(1), (border.x1-border.x0) - margin*2, &width_milli);
	  	
	  	err = _swix(Font_ScanString, _INR(0,5)|_OUT(1)|_OUT(3), fonthandle, tmp_string, 0x20, width_milli, 0x7fffffff, co_ord, &ptr, &width);
	  	
	  	(*ptr) = '\0';

		_swi(Font_ConverttoOS, _IN(1)|_OUT(1), width, &width);
  			  		  	
		// the height is defined by the font size.
  		height = Y_PIXELS_TO_OSUNITS(font_size);

 		if (err == NULL) err = draw_full_box(border.x0, border.y0, border.x1, border.y1, box_col);
	
    		// calculate the relative position
    		if (align == align_centre)
      			start_x = border.x0 + (((border.x1 - border.x0) / 2) - (width / 2));
		else 
		if (align == align_right)
      			start_x = border.x1 - margin - width;
      		else
      		if (align == align_left)
      			start_x = border.x0 + margin; 

 	   	start_y = (border.y0 + ((border.y1 - border.y0) / 2)) - (height / 2);
    	 	
    		if ((fonthandle != 0)&&(err == NULL))
   			_swix(ColourTrans_SetFontColours, _INR(0,3), 0, box_col, font_col, 14);
    	
    		if (err == NULL) err = _swix(Font_Paint, _INR(0,5), fonthandle, tmp_string, 0x0110, start_x, start_y, NULL);
    	
  		if (err == NULL) err = _swix(NH_AntiTwitter, _INR(0,3), border.x0, border.y0-twitter_border,
  						border.x1-border.x0, (border.y1-border.y0)+(twitter_border<<1));
  	}
    return err;
}

_kernel_oserror*
graphics::display_fullPageText(const char *text, int start_height)
{
     	_kernel_oserror* err = NULL;
 	char* local_text;
 	int text_len = 0;
 	
 	text_len = strlen(text);
 	
 	local_text = new char[text_len +1];
 	
 	if (local_text != NULL){
 	  	
		int width, height, start_x, start_y;
		int co_ord[5], width_milli;
		char *ptr = NULL, *ptr2;
           	
           	strncpy(local_text, text, text_len+1);
           	
           	local_text[text_len] = '\0';
 	  	           	
		// the height is defined by the font size.
  		height = Y_PIXELS_TO_OSUNITS(font_size);
           	
           	start_y = start_height;
           	
    	 	_swi(Font_Converttopoints, _IN(1)|_OUT(1), COLUMN_C_RIGHT - COLUMN_C_LEFT, &width_milli);

    		if ((fonthandle != 0)&&(err == NULL))
   			_swix(ColourTrans_SetFontColours, _INR(0,3), 0, col_background, COL_OFFWHITE, 14);
   			
   		ptr2 = local_text -1; // +1 is used to avoid nulls.
   		ptr  = local_text;
   			
   		while ((err == NULL)&&((int)ptr < (int)local_text + text_len)) {
   		  	
   		  	char join;	// this is the character that splits the string into two sections
   		  	
   		  	  	// determine the cut-off for strings that are too long.
	  		co_ord[0] = 0; // there is no need to specify where it is being displayed we are only interested
	  		co_ord[1] = 0; // in the width.
	  		co_ord[2] = 0;
	  		co_ord[3] = 0;
	  		co_ord[4] = ' ';	// cut-off character if available.
#ifdef DEBUGLIB	  		
	  		debug("graphics", "remainding string\n (%s)\n", ptr);
#endif	  		
    		  	err = _swix(Font_ScanString, _INR(0,5)|_OUT(1)|_OUT(3), fonthandle, ptr, 0x20, width_milli, 0x7fffffff, co_ord, &ptr2, &width);
	  		
	  		join = (*ptr2);
	  		(*ptr2) = '\0';
#ifdef DEBUGLIB	  		
	  		debug("graphics", "display line (%s) ptrs = (%8.8X)(%8.8X)\n", ptr, ptr, ptr2);
#endif	  		
	  		_swi(Font_ConverttoOS, _IN(1)|_OUT(1), width, &width);
			
	  		start_x = (COLUMN_C_LEFT + (COLUMN_C_RIGHT - COLUMN_C_LEFT)/2) - width/2;

    			if (err == NULL) err = _swix(Font_Paint, _INR(0,5), fonthandle, ptr, 0x0110, start_x, start_y, NULL);
    			
    			start_y -= height*2;
    			
    			if (isspace(join))
	  			ptr2++;
	  		else
	  			(*ptr2) = join; // put the character back we need it.
	  			
    			ptr = ptr2;// increment the text.
    			
    	        }
 
           	delete local_text;
           	
   	} else {
   	  	err = makeError(EM_Alloc);
   	}

#ifdef DEBUGLIB   	
   	if (err != NULL)
   		debug("graphics", "dialogue error %s\n", err->errmess);
#endif
   		
   	return err;
}

_kernel_oserror*
graphics::draw_full_box(int xbl, int ybl, int xtr, int ytr, int col)
{
  _kernel_oserror *err;
  int colnum;
  
  // determine the colour
  err =  _swix(ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), col, &colnum);
  if (err == NULL) err = _swix(OS_SetColour, _INR(0,1), 0, colnum);
  
  // paint the box
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, xbl, ybl);

  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, xbl, ytr);

  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, xtr, ybl);

  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, xtr, ytr);
  
  return(err);
}

/*************************************************************************/
// public methods
// MENU draw functions
//
_kernel_oserror*
graphics::drawWindow()
{
  	_kernel_oserror* err = NULL;
  	
	// clear the screen
  	err = draw_full_box(0,0,window_width, window_height, col_background);

  	// draw the top strip
  	if (err == NULL) err = draw_full_box(0, safe_area.y1 - ELEMENT_BORDER, window_width, window_height, col_orange);

	// draw the sprite
  	redraw_sprite = false;
   	if (err == NULL) err = plot_sprite_translated(safe_area.x1 - X_PIXELS_TO_OSUNITS(sprite_info.width), safe_area.y0);
  	
  	if (err == NULL) err = _swix(NH_AntiTwitter, _INR(0,3), window_width-X_PIXELS_TO_OSUNITS(sprite_info.width), 
  			safe_area.y0 - twitter_border, X_PIXELS_TO_OSUNITS(sprite_info.width), Y_PIXELS_TO_OSUNITS(sprite_info.height) + (twitter_border*2));

  	return err;
}

// this draws a rectangle eleborder from the top-strip, redrawing the sprite if necessary
_kernel_oserror*
graphics::reDrawWindow(int elements)
{
  	_kernel_oserror* err = NULL;
  	element_offset = ((MAX_elements - elements) / 2) * ELEMENT_HEIGHT;
 
	// draw the sprite
  	if ((err == NULL)&&(redraw_sprite == true)) {
  		 redraw_sprite = false;
  		 
 		 // clear the box including the sprite
  		 err = draw_full_box(0,0,window_width, safe_area.y1 - ELEMENT_BORDER - ELEMENT_BORDER, col_background);
  		 
   		if (err == NULL) err = plot_sprite_translated(safe_area.x1 - X_PIXELS_TO_OSUNITS(sprite_info.width), safe_area.y0);
  	
  		if (err == NULL) err = _swix(NH_AntiTwitter, _INR(0,3), window_width-X_PIXELS_TO_OSUNITS(sprite_info.width), 
  			safe_area.y0 - twitter_border, X_PIXELS_TO_OSUNITS(sprite_info.width), Y_PIXELS_TO_OSUNITS(sprite_info.height) + (twitter_border*2));

        } else {
            	err = draw_full_box(0, SPRITE_TOP ,window_width, safe_area.y1 - ELEMENT_BORDER - ELEMENT_BORDER, col_background);
        }
  	return err;
}

_kernel_oserror*
graphics::drawMenuElement(boolean selected, int row, char *text, char *text2)
{
	_kernel_oserror* err = NULL;

   	box panel;
   	
  	// calculate the row position, y1 & y0 of the menu element strip.
   	// this is the window height - strip height - half an element height spacing.
   	panel.y1 = TOP_OF_TOP_ELEMENT - (row * ELEMENT_HEIGHT) - element_offset;
   	panel.y0 = TOP_OF_TOP_ELEMENT - ((row+1)*ELEMENT_HEIGHT) - element_offset;
   	
   	if (panel.y0 < SPRITE_TOP)
   		redraw_sprite = true;
  	
  	// clear the box
  	if (text2 == NULL) {
  		if (err == NULL) err = draw_full_box( COLUMN_1_LEFT, panel.y0, COLUMN_1_RIGHT, panel.y1,  col_background);
  	} else {
  		if (err == NULL) err = draw_full_box( COLUMN_1_LEFT, panel.y0, COLUMN_2_RIGHT + (ELEMENT_HEIGHT>>1) + twitter_border, panel.y1,  col_background);
  	}
 
 	// set shrink the box by the border.
  	panel.y1 -= ELEMENT_BORDER;
  	panel.y0 += ELEMENT_BORDER;
  	  	
    	if (row < MAX_elements) {
    	  	// set the box position to reflect the primary column
    	  	panel.x0 = COLUMN_1_LEFT + ELEMENT_BORDER;
  	  	panel.x1 = COLUMN_1_RIGHT - ELEMENT_BORDER;
  	  	
  	  	if (selected != true)
 	  		err = display_text(text, align_left, panel, col_lightblue, COL_OFFWHITE);
 	  	else
 	  		err = display_text(text, align_left, panel, COL_OFFWHITE, col_lightblue);
  		
  		
  		if ((err == NULL)&&(text2 != NULL)){
  		  	// reflect the secondary column only if there is text to display in it.
    	  		panel.x0 = COLUMN_2_LEFT + ELEMENT_BORDER;
  	  		panel.x1 = COLUMN_2_RIGHT - ELEMENT_BORDER;
  	  	
  	  		if (selected != true)
 	  			err = display_text(text2, align_centre, panel, col_orange, COL_OFFWHITE);
 	  		else
 	  			err = display_text(text2, align_centre, panel, COL_OFFWHITE, col_orange);
  	  	}	
  	} 
  	else {
    		err = makeError(EM_ObjectError);// this should have been caught in construction.
    	}
  	return err;
}

_kernel_oserror*
graphics::redrawSecondaryString(int row, char *text)
{
	_kernel_oserror* err = NULL;

   	box panel;
   	
   	// calculate the row position, y1 & y0 of the menu element strip.
   	// this is the window height - strip height - half an element height spacing.
   	panel.y1 = TOP_OF_TOP_ELEMENT - (row * ELEMENT_HEIGHT) - ELEMENT_BORDER - element_offset;
   	panel.y0 = TOP_OF_TOP_ELEMENT - ((row+1)*ELEMENT_HEIGHT) + ELEMENT_BORDER - element_offset;
  	
   	if (panel.y0 < SPRITE_TOP)
   		redraw_sprite = true;
		
  	if (text != NULL){
  		// reflect the secondary column only if there is text to display in it.
    	  	panel.x0 = COLUMN_2_LEFT + ELEMENT_BORDER;
  	  	panel.x1 = COLUMN_2_RIGHT - ELEMENT_BORDER;
  	  	
 	  	err = display_text(text, align_centre, panel, COL_OFFWHITE, col_orange);
  	} else {
    		err = makeError(EM_ObjectError);
    	}
  	return err;
}

_kernel_oserror*
graphics::drawSelectable(int row)
{
  _kernel_oserror* err = NULL;
  
  int y0, y1, y2, x0, x1, x2, x3;
  int colnum;
  
  // this is the height of the isoseles triangle therefore half the height.
  int x_length = X_OSUNITS_TO_PIXELS((ELEMENT_HEIGHT/2) - ELEMENT_BORDER); 
  int y_length = Y_OSUNITS_TO_PIXELS((ELEMENT_HEIGHT/2) - ELEMENT_BORDER); 
  
  // calculate the center of the element
  y1 = Y_OSUNITS_TO_PIXELS(TOP_OF_TOP_ELEMENT - ((row * ELEMENT_HEIGHT)+ELEMENT_HEIGHT/2) - element_offset);
  
  y0 = y1 - y_length;
  y2 = y1 + y_length;
  
  x0 = X_OSUNITS_TO_PIXELS(COLUMN_2_LEFT) - x_length;
  x1 = X_OSUNITS_TO_PIXELS(COLUMN_2_LEFT);
  x2 = X_OSUNITS_TO_PIXELS(COLUMN_2_RIGHT);
  x3 = X_OSUNITS_TO_PIXELS(COLUMN_2_RIGHT) + x_length;
  
  // there is no need to change to white as that is the given colour
  // plot white triangles
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x1), Y_PIXELS_TO_OSUNITS(y0) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x1), Y_PIXELS_TO_OSUNITS(y2) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, X_PIXELS_TO_OSUNITS(x0), Y_PIXELS_TO_OSUNITS(y1) );
  
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x2), Y_PIXELS_TO_OSUNITS(y0) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x2), Y_PIXELS_TO_OSUNITS(y2) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, X_PIXELS_TO_OSUNITS(x3), Y_PIXELS_TO_OSUNITS(y1) );
  
  // plot blue triangles over
  
  // get the background colour
  if (err == NULL) err = _swix(ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), col_background, &colnum);
  if (err == NULL) err = _swix(OS_SetColour, _INR(0,1), 0, colnum);

#ifdef DEBUGLIB    
  debug("graphics", "ELEMENT_HEIGHT = %i, BORDER = %i\n", ELEMENT_HEIGHT, ELEMENT_BORDER);
  debug("graphics", "length(x,y) (%i)(%i), y0 (%i) y1 (%i) y2 (%i)\n", x_length, y_length, y0,y1,y2);
  debug("graphics", "x0 %i, x1, %i, x2 %i, x3 %i\n", x0,x1,x2,x3);
#endif
  
  y2 -= Y_OSUNITS_TO_PIXELS(ELEMENT_BORDER*2);
  y0 += Y_OSUNITS_TO_PIXELS(ELEMENT_BORDER*2);

  x1 -= X_OSUNITS_TO_PIXELS(ELEMENT_BORDER-(ELEMENT_BORDER/10));
  x0 = x1 - (y2-y0)/2;
  x2 += X_OSUNITS_TO_PIXELS(ELEMENT_BORDER-(ELEMENT_BORDER/10));
  x3 = x2 + (y2-y0)/2;  
  
  // plot blue triangles
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x1), Y_PIXELS_TO_OSUNITS(y0) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x1), Y_PIXELS_TO_OSUNITS(y2) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, X_PIXELS_TO_OSUNITS(x0), Y_PIXELS_TO_OSUNITS(y1) );
  
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x2), Y_PIXELS_TO_OSUNITS(y0) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 4, X_PIXELS_TO_OSUNITS(x2), Y_PIXELS_TO_OSUNITS(y2) );
  if (err == NULL) err = _swix(OS_Plot, _INR(0,2), 85, X_PIXELS_TO_OSUNITS(x3), Y_PIXELS_TO_OSUNITS(y1) );
    
  return err;
}

_kernel_oserror*
graphics::drawCentredMenuElement(boolean selected, int row, char *text)
{
	_kernel_oserror* err = NULL;

   	box panel;
   	
   	// calculate the row position, y1 & y0 of the menu element strip.
   	// this is the window height - strip height - half an element height spacing.
   	panel.y1 = TOP_OF_TOP_ELEMENT - (row * ELEMENT_HEIGHT) - element_offset;
   	panel.y0 = TOP_OF_TOP_ELEMENT - ((row+1)*ELEMENT_HEIGHT) - element_offset;
  	
   	if (panel.y0 < SPRITE_TOP)
   		redraw_sprite = true;
  	
  	// clear the box
  	if (err == NULL) err = draw_full_box( COLUMN_C_LEFT, panel.y0, COLUMN_C_RIGHT, panel.y1,  col_background);
 
 	// set shrink the box by the border.
  	panel.y1 -= ELEMENT_BORDER;
  	panel.y0 += ELEMENT_BORDER;
  	  	
    	if (row < MAX_elements) {
    	  	// set the box position to reflect the primary column
    	  	panel.x0 = COLUMN_C_LEFT + ELEMENT_BORDER;
  	  	panel.x1 = COLUMN_C_RIGHT - ELEMENT_BORDER;
  	  	
  	  	if (selected != true)
 	  		err = display_text(text, align_centre, panel, col_lightblue, COL_OFFWHITE);
 	  	else
 	  		err = display_text(text, align_centre, panel, COL_OFFWHITE, col_lightblue);
  	} 
  	else {
    		err = makeError(EM_ObjectError);
    	}
  	return err;
}

_kernel_oserror*
graphics::drawDialogue(char* text)
{
   	_kernel_oserror* err = reDrawWindow(0);
   
   	if (err == NULL) err = display_fullPageText(text, TOP_OF_TOP_ELEMENT - ((MAX_elements>>1) * ELEMENT_HEIGHT));
 
   	return err;
}
 
_kernel_oserror*
graphics::drawError(_kernel_oserror* error, message_token token)
{
   
  	char messagebuff[MAX_MSG_LEN];
  	char errnum[12];
  	
  	_kernel_oserror* err = drawWindow();
   	
  	sprintf(errnum, "&%8.8X", error->errnum);
  	
    	if (err == NULL) err = display_fullPageText(error->errmess, TOP_OF_TOP_ELEMENT - (2 * ELEMENT_HEIGHT));
   	
   	if (err == NULL) {
   	  
   	  	err = lookupMessage(MSG_Error, messagebuff, MAX_MSG_LEN, errnum);
   	  	
   	  	if (err == NULL){
   	  	  	err = display_fullPageText(messagebuff, TOP_OF_TOP_ELEMENT - (5 * ELEMENT_HEIGHT));
   	  	} else {
   	  	  	err = NULL; // ignore this error
   	  	}
   	}
   	
   	if (err == NULL) err = lookupMessage(token, messagebuff, MAX_MSG_LEN);
   	
   	if (err == NULL) err = drawMenuElement(true, 7, messagebuff);
   	
   	return err;
}
 
// constructors
graphics::graphics(const char* sprite_file)
{
  	error = NULL;
  	int screen_depth;
  	element_offset = 0;
  	redraw_sprite = true;
  	const char* env_var_string = "TV$Type";
  	
  	const char* tv_type_string = NULL;
  	
  	tv_type_string = getenv(env_var_string);
  	
  	if (tv_type_string != NULL) {
  	  	if (strcmp(tv_type_string, "PAL") == 0)
  			tv_type = pal;
  		else
  			tv_type = ntsc;
  	} else {
  	  	tv_type = pal;
  	  	error = makeError(EM_EnvVarRead, env_var_string);
  	}
  	
  	
	error = _swix(ModeFiles_SafeArea, _OUTR(0,3), &safe_area.x0, &safe_area.y0, &safe_area.x1, &safe_area.y1);
  
	// in a square pixel mode there are 2 os units per pixel
	if (error == NULL) error = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &window_height);
	if (error == NULL) error = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &window_width);
	
	if (error == NULL) error = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &x_eig);
	if (error == NULL) error = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &y_eig);
	if (error == NULL) error = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &screen_depth);
	
	window_height = Y_PIXELS_TO_OSUNITS(window_height);	// pixels to os units
	window_width  = X_PIXELS_TO_OSUNITS(window_width);

#ifdef DEBUGLIB	
	debug("graphics", "safe area is, x0=%i, y0=%i, x1=%i, y1=%i\n", safe_area.x0, safe_area.y0, safe_area.x1, safe_area.y1);
	debug("graphics", "screen size %ix%i (hxw)\n", window_height, window_width);
#endif  	
	bpp = 1 << screen_depth;
	
        // hide the cursor
        if (error == NULL)  _swi(OS_WriteN, _INR(0,1), clear_cursor, 10);
                  	  	
  	// set up the font to be used for graphics
  	if (error == NULL) error = _swix(Font_FindFont, _INR(1,5)|_OUT(0), "Homerton.Bold", font_size*16,  font_size*16, 0, 0, &fonthandle);
  	
  	if (error == NULL) error = load_sprite(sprite_file); 
}

graphics::~graphics()
{
  	_swi(Font_LoseFont, _IN(0), fonthandle);	
}
