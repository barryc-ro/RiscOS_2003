/*
 ----------------------------------------------------------------------------
  Copyright [1999] Pace Micro Technology PLC.  All rights reserved.
  
  The copyright in this material is owned by Pace Micro Technology PLC
  ("Pace").  This material is regarded as a highly confidential trade secret
  of Pace.  It may not be reproduced, used, sold or in any other way exploited
  or transferred to any third party without the prior written permission of
  Pace.
  ----------------------------------------------------------------------------
*/
/****************************************************************************/
//   	Filename:	menuheirarchy.h
//	Author:		Alistair Rodger
//	Spec:		DO 2501,833/FS
//
//	Description:
//	This is the major container class.  It holds a list of all of the
//	menu elements.  It also ownes the viewer element.
//
// History:
//
// Date      Who	Description of change
// ===========================================
// 08/10/99  AR		File created
/****************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

#include "menuhier.h"
#include "parser.h"

/****************************************************************************/
// class menuHierarchy : public ParentObject
// constructor this takes a filename and loads it it then parses it one line
// at a time to create a linked list of objects.


menuHierarchy::menuHierarchy(char* sprite_file)
{
  //graphics *n_graphic
  graphic = new graphics(sprite_file);
  
  current = NULL;
  
  menu_pool = NULL;
  
  do_continue = true;

  if (graphic != NULL)
  {
    	if ( (error = graphic->getError() ) == NULL)
    	{
    	  	error = graphic->drawWindow();
    	  	
    	  	if (error == NULL)
    	  	{
    	  	  	char message[MAX_MSG_LEN];
                  	
                  	error = lookupMessage(MSG_Prepare, message, MAX_MSG_LEN);
                  	
                  	if (error == NULL)
                  	{
                  		error = graphic->drawDialogue(message);
                  	}
    	  	}
    	}
  }
  else
  {
  	error = makeError(EM_Alloc);
  }
}

menuHierarchy::~menuHierarchy()
{
  error = NULL; 
  
  current = NULL;
  
  if (graphic != NULL) delete graphic; graphic = NULL;
 
  if (menu_pool != NULL) delete menu_pool; menu_pool = NULL; // this will chain
}
 
_kernel_oserror*
menuHierarchy::getMenuPool(char* config_file)
{
	// construct a temp parse file then bleed it for a menu structure
        if (error == NULL)
        {
        	// construct a parse object                        
                Parser file_parse(config_file);  	

		// assign the contents of the parse file to the contents of the menu heirarchy container
		// get menu pool will survive an error being created it will do nothing.
                menu_pool = file_parse.getMenuPool();
                
                current = menu_pool;
                
                error = file_parse.getError();
        }
        return error;
}

_kernel_oserror*
menuHierarchy::run(char* config_file)
{
  	int key = 0;
  	boolean got_key = false;
  	
	if (error == NULL)
	{
	  	error = graphic->flushKeys();
	}

	if (error == NULL)
	{
	  	error = getMenuPool(config_file);
	}
			
	if (error == NULL)
	{
	  	error = current->drawMenu(graphic);	// draw the current menu.
	}
			
	while ((error == NULL) && (do_continue == true))
	{
	  	error = graphic->getKey(&key, &got_key);
                                       		                            
		if ( (error == NULL)&&(got_key == true) )
		{
                       	error = handleKey(key);
                }
	}
			
	if (error != NULL)
        {
             	// error creating, this will assign it to null if there is no problems.
              	error = graphic->drawError(error);
        }
        
	return error;	
}

#ifdef McCabe 
_kernel_oserror*
menuHierarchy::getError()
{
  	return error;
}

_kernel_oserror*
menuHierarchy::terminate()
{
  	do_continue = false;
  	return error;
}
#endif

_kernel_oserror*
menuHierarchy::handleKey(int key)
{ 
	if (current != NULL) {
	
		error = current->handleKey(key, graphic);
		
	} else {
	  
		error = makeError(EM_ObjectError);
		
	}
	return error;
}

_kernel_oserror*
menuHierarchy::change_menu(void *menu)
{
  	// we could put checking in here to ensure valid address but
  	// for speed reasons I have not done this.
  	// thought for debug reasons though it might be useful
#ifdef DEBUGLIB
	menuObject *tmp = menu_pool;
	
	while (tmp != NULL){
	  	if ((void*)tmp == menu)	break;
	  	tmp = tmp->chain;
	}
	
	if (tmp == NULL){
		debug("", "change menu passed a non menu");
		return makeError(EM_ObjectError);
	}
#endif  	
  	
  	menuObject* new_current = (menuObject*)menu;
  	// lay bread crumbs
  	new_current->setPrev(current);
  	
  	current = new_current;
  	// draw the new menu
  	return current->drawMenu(graphic);
}

_kernel_oserror*
menuHierarchy::back_menu()
{
#ifdef DEBUGLIB
	menuObject *tmp = menu_pool;
	
	while (tmp != NULL){
	  	if (tmp == current->getPreviousMenu())	break;
	  	tmp = tmp->chain;
	}
	
	if (tmp == NULL){
		debug("", "back menu found non menu in previous");
		return makeError(EM_ObjectError);
	}
#endif  	
 	menuObject* new_current = current->getPreviousMenu();
  	
  	if (new_current != NULL){
  		current = new_current;
  		return current->drawMenu(graphic);
  	}
  	return (error = makeError(EM_ObjectError));
}

_kernel_oserror*
menuHierarchy::save()
{
 	if (current != NULL){
#ifdef DEBUGLIB
 	  	debug("", "calling save options\n");
#endif
  		return current->saveOptions(graphic);
  	}
  	
  	return (error = makeError(EM_ObjectError));
}
