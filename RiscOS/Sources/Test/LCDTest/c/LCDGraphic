/*
 * Name       : LCDGraphic.c
 * Description: C interface to OS_Plot routines providing simple graphic handling
 * Author     : Robert Thornburrow
 *
 * Copyright(C) Acorn Computers Ltd, 1997.  All Rights Reserved.
 *
 * History    : 1.00 07 Oct 1997  RLT  initial writing
 *              1.01 13 Nov 1997  RLT  updated to include error handling
 */

#include "kernel.h"
#include "swis.h"
#include "LCDGraphic.h"


/*
 * Function   : colour
 * Description: sets the graphics colour
 * Params in  : int col; colour value
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *colour(int col)
{
  _kernel_swi_regs reg;
  _kernel_oserror *e;

  if (col >= 0)                                                            /* is it actually a sensible colour? */
  {
    reg.r[0] = 0;
    reg.r[1] = col;
    e = _kernel_swi(OS_SetColour, &reg, &reg);                             /* set colour */
  }
  return e;
}


/*
 * Function   : move
 * Description: move absolute
 * Params in  : int x; x coordinate
 *              int y; y coordinate
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *move(int x, int y)
{
  _kernel_swi_regs reg;

  reg.r[0] = 68;                                                           /* move absolute */
  reg.r[1] = x;								   /* x coordinate */
  reg.r[2] = y;								   /* y coordinate */
  return _kernel_swi(OS_Plot, &reg, &reg);
}


/*
 * Function   : rectangle
 * Description: draws a filled rectangle using the coordinates given
 * Params in  : int x; bottom left x coordinate
 *              int y; bottom left y coordinate
 *              int width; width of rectangle
 *              int height; height of rectangle
 *              int col; colour to plot
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *rectangle(int x, int y, int width, int height, int col)
{
  _kernel_swi_regs reg;

  move(x, y);                                                              /* move graphics cursor to start position */
  colour(col);	 				    			   /* set the graphics colour */

  reg.r[0] = 101;                                                          /* filled rectangle using current foreground colour */
  reg.r[1] = x + width;
  reg.r[2] = y + height;
  return _kernel_swi(OS_Plot, &reg, &reg);
}


/*
 * Function   : draw
 * Description: graphics draw to x,y
 * Params in  : int x; x coordinate
 *              int y; y coordinate
 *              int col; graphics colour
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *draw(int x, int y, int col)
{
  _kernel_swi_regs reg;
  _kernel_oserror *e;

  e = colour(col);

  if (!e)
  {
    reg.r[0] = 5;
    reg.r[1] = x;
    reg.r[2] = y;
    e = _kernel_swi(OS_Plot, &reg, &reg);
  }
  return e;
}


/*
 * Function   : off
 * Description: switches off the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *off (void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RemoveCursors, &reg, &reg);
}
