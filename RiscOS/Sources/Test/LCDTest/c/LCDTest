/*
 * Name       : LCDTest.c
 * Description: LCD Test Software
 * Author     : Robert Thornburrow
 *
 * Copyright(C) Acorn Computers Ltd, 1997.  All Rights Reserved.
 *
 * History    : 1.00 07 Oct 1997  RLT  initial writing
 *              1.01 28 Oct 1997  RLT  updated to work as a module
 *              1.02 13 Nov 1997  RLT  added display routines
 *              1.03 08 Dec 1997  RLT  fixed to work with new versions of Display.c
 *                                     and Support.c
 */

#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "LCDTest.h"
#include "LCDGraphic.h"
#include "module.h"
#include "support.h"
#include "display.h"
#include "msgs.h"


/*
 * Function   : read_palette
 * Description: read current palette settings
 * Params in  : int *buffer; pointer to buffer to hold palette entries in
 * Params out : int *buffer; updated with entries
 * Returns    : nothing
 */

void read_palette(int *buffer)
{
  _kernel_swi_regs reg;

  reg.r[0] = -1;
  reg.r[1] = -1;
  reg.r[2] = (int) buffer;
  reg.r[3] = 64;
  reg.r[4] = 0;
  _kernel_swi(ColourTrans_ReadPalette, &reg, &reg);
}


/*
 * Function   : write_palette
 * Description: writes the palette
 * Params in  : int *buffer; buffer containing palette entries
 * Params out : int *buffer
 * Returns    : nothing
 */

void write_palette(int *buffer)
{
  _kernel_swi_regs reg;

  reg.r[0] = -1;
  reg.r[1] = -1;
  reg.r[2] = (int) buffer;
  reg.r[3] = 0;
  reg.r[4] = 0;
  _kernel_swi(ColourTrans_WritePalette, &reg, &reg);
}


/*
 * Function   : read_mode_details
 * Description: read mode size and maximum number of colours
 * Params in  : int mode; mode number to read or -1 to read current mode
 * Params out : none
 * Returns    : ModeDef details
 */

ModeDef read_mode_details(int mode)
{
  _kernel_swi_regs reg;
  ModeDef details;
  int carry;

  reg.r[0] = mode;                                                         /* mode number or -1 for current mode (PRMs 1-709) */
  reg.r[1] = 11;							   /* read number of x pixels on screen-1 */
  _kernel_swi_c(OS_ReadModeVariable, &reg, &reg, &carry);
  if (carry == 1)
    details.x_size = -1;                                                   /* invalid mode number */
  else
    details.x_size = reg.r[2];                                             /* fill in x size */
  reg.r[1] = 12;      							   /* read number of y pixels on screen-1 */
  _kernel_swi_c(OS_ReadModeVariable, &reg, &reg, &carry);
  if (carry == 1)
    details.y_size = -1;                                                   /* invalid mode number */
  else
    details.y_size = reg.r[2];                                             /* fill in y size */
  reg.r[1] = 3;	      							   /* read maximum number of colours or greyscales */
  _kernel_swi_c(OS_ReadModeVariable, &reg, &reg, &carry);
  if (carry == 1)
    details.max_col = -1;                                                  /* invalid mode number */
  else
    details.max_col = reg.r[2];                                            /* fill in number of maximum colours */

  return details;
}


/*
 * Function   : set_up_greyscales
 * Description: re-program the palette to produce 16 greyscales
 * Params in  : ModeDef mode; mode details as returned from read_mode_details
 * Params out : none
 * Returns    : nothing
 */

void set_up_greyscales(ModeDef mode)
{
  _kernel_swi_regs reg;
  int colour;
  char buffer[5];                                                          /* buffer to store our vdu stream in */

  for (colour = 0; colour < (mode.max_col + 1); colour++)
  {
    sprintf(buffer, "%c%c%c%c%c%c", 19, colour, 16,                        /* set up the greyscales */
           (colour << 4), (colour << 4), (colour << 4));
    reg.r[0] = (int) buffer;
    reg.r[1] = 6;
    _kernel_swi(OS_WriteN, &reg, &reg);                                    /* and program the palette with them */
  }
}


/*
 * Function   : draw_boxes
 * Description: draw grayscale boxes and outline bottom row to distinguish between the greyscale
 * Params in  : ModeDef mode; mode details as returned from read_mode_details
 *              int offset; gap between the boxes in pixels
 * Params out : none
 * Returns    : nothing
 */

void draw_boxes(ModeDef mode, int offset)
{
  int init_vertical_pos = mode.y_size + 75;                                /* y coordinate to start drawing from */
  int width             = 100;                                             /* width of each box in pixels */
  int height            = 100;						   /* height of each box in pixels */
  int start             = mode.x_size - (width * 5) / 2;		   /* x coordinate to start drawing from */
  int thick             = 8;						   /* thickness of outline in pixels */
  int colour, vertical_pos;

  move(start - 5, init_vertical_pos - 5);                                  /* outline bottom row */
  rectangle(start, init_vertical_pos - thick, (width * 5) + thick, thick, 15);
  rectangle(start - thick, init_vertical_pos - thick, thick, height + thick, 15);
  rectangle(start + (width * 5), init_vertical_pos - thick, thick, height + thick, 15);

  for (colour = 1; colour <= 5; colour++)                                  /* draw bottom row */
  {
    rectangle(start, init_vertical_pos, width, height, colour);
    start += width + offset;                                               /* set x coordinate for next rectangle */
  }
  start = mode.x_size - (width * 5) / 2;                                   /* reset x coordinate back to the start */
  vertical_pos = init_vertical_pos + height + offset;			   /* and set y coordinate to middle above */

  for (colour = 6; colour <= 10; colour++)                                 /* draw middle row */
  {
    rectangle(start, vertical_pos, width, height, colour);
    start += width + offset;                                               /* set x coordinate for next rectangle */
  }
  start = mode.x_size - (width * 5) / 2;                                   /* reset x coordinate back to the start */
  vertical_pos = init_vertical_pos + (height * 2) + offset;		   /* and set y coordinate to top row */

  for (colour = 11; colour <= 15; colour++)                                /* draw top row */
  {
    rectangle(start, vertical_pos, width, height, colour);
    start += width + offset;                                               /* set x coordinate for next rectangle */
  }
}


/*
 * Function   : draw_bars
 * Description: draw greyscale colour bars outlining the lefthand 7 to distinguish
 * Params in  : ModeDef mode; mode details as returned from read_mode_details
 *              int offset; gab between the boxes in pixels
 * Params out : none
 * Returns    : nothing
 */

void draw_bars(ModeDef mode, int offset)
{
  int init_vertical_pos = mode.y_size - 50;                                /* y coordinate to start drawing from */
  int width             = 36;	      					   /* width of each box in pixels */
  int height            = 50;						   /* height of each box in pixels */
  int start             = mode.x_size - (width * 16) / 2;		   /* x coordinate to start drawing from */
  int thick             = 8;	      	       	       			   /* thickness of outline in pixels */
  int istart            = start;
  int colour;

  for (colour = 0; colour <= 15; colour++)                                 /* draw greyscaled rectangles */
  {
    rectangle(start, init_vertical_pos, width, height, colour);
    start += width + offset;                                               /* set x coordinate for next rectangle */
  }
                                                                           /* draw outline around the lefthand 7 rectangles */
  rectangle(istart - thick, init_vertical_pos - thick, (width * 7) + thick, thick, 15);
  rectangle(istart - thick, init_vertical_pos - thick, thick, height + thick, 15);
  rectangle(istart - thick, init_vertical_pos + height, (width * 7) + thick, thick, 15);
}


/*
 * Function   : do_pixel_check
 * Description: start the pixel check
 * Params in  : ModeDef mode; mode details returned from read_mode_details
 * Params out : none
 * Returns    : TRUE if passed otherwise FALSE
 */

int do_pixel_check(ModeDef mode)
{
  int x,
      y,
      result;

  display_status(PIXEL_CHECK,RUNNING);					/* show sub test status */
  display_info (pixel_check[0]);					/* display information about the test */
  display_info (pixel_check[1]);
  display_info (pixel_check[2]);
  display_info (pixel_check[3]);
  wait_for_cont ();
  clear_info ();							/* clear contents of information area */

  clear_whole_screen ();						/* clear screen */

  for (y = 0; y <= mode.y_size * 4; y += 2)
  {
    for (x = 0; x <= mode.x_size  * 2; x += 2)
    {
      move(x, y);
      draw(x, y, 0);							/* fill in every pixel on the screen */
    }
  }
  result=get_yn_responce_forever();					/* check to see if the test has passed or failed */
  return result;
}


/*
 * Function   : do_greyscale_check
 * Description: start the greyscale check
 * Params in  : ModeDef mode; mode details returned from read_mode_details
 * Params out : none
 * Returns    : TRUE if passed otherwise FALSE
 */

int do_greyscale_check(ModeDef mode)
{
  int result;

  display_status (GREYSCALE_CHECK, RUNNING);				/* show sub test status */
  display_info (greyscale_check[0]);					/* display information about the test */
  display_info (greyscale_check[1]);
  display_info (greyscale_check[2]);
  display_info (greyscale_check[3]);
  wait_for_cont ();
  clear_info ();							/* clear contents of information area */

  set_up_greyscales(mode);						/* colour the palette with greyscales */

  rectangle (0, 0, mode.x_size * 4, mode.y_size * 4, 0);		/* clear the screen (cop out way :) */

  draw_boxes(mode, 0);							/* draw greyscale boxes in the middle of the screen */
  draw_bars(mode, 0);							/* and draw the greyscale bar at the bottom */

  result = get_yn_responce_forever ();					/* check to see if the test has passed or failed */
  return result;
}


/*
 * Function   : reset_display_line_vars
 * Description: resets all the variables associated with the display routines
 * Params in  : none
 * Params out : none
 * Returns    : nothing
 */

void reset_display_line_vars (void)
{
    test_status_line = 1;
    subtest_status_line = 0;
    info_line = INFO_START;
    instruct_line = 0;
}


/*------------------------------------------------------------------------------
 *
 *      Module specific routines.
 */

_kernel_oserror *lcdtest_initialise (void *pw)
{
    return NULL;

    NOT_USED (pw);
}


void lcdtest_finalise (void *pw)
{
    NOT_USED (pw);
}


void lcdtest_start_test (int test_pattern)
{
    ModeDef current_mode;
    int     pixel     = TRUE;
    int     greyscale = TRUE;
    int     default_palette[64];

    _kernel_oswrch (5);

    current_mode = read_mode_details (-1);				/* get current mode details */
    define_block_char ();						/* define the blank character */

    set_forground_colour (COLOUR_FOREGROUND);
    set_background_colour (COLOUR_BACKGROUND);
    clear_whole_screen ();						/* clear the screen */

/*     led_steady_off (2);							switch off power led */
    display_status_led (MODE_LCD, LED_RUNNING);
    display_mode(MODE_LCD);						/* show mode title */
    off ();								/* switch off flashing cursor */
    read_palette (default_palette);					/* read current palette */

    switch (test_pattern)
    {
        case 0:								/* do all tests */
                pixel = do_pixel_check (current_mode);			/* do pixel check */
                clear_whole_screen ();
                display_mode (MODE_LCD);				/* show sub test status */
                display_status (PIXEL_CHECK, pixel);
                greyscale = do_greyscale_check (current_mode);		/* do greyscale check */
                write_palette (default_palette);					/* restore the palette */
                set_forground_colour (COLOUR_FOREGROUND);
                set_background_colour (COLOUR_BACKGROUND);
                clear_whole_screen ();
                reset_display_line_vars ();
                display_mode (MODE_LCD);				/* display test status */
                display_status (PIXEL_CHECK, pixel);
                display_status (GREYSCALE_CHECK, greyscale);

                break;
        case 1:								/* do pixel check only (bit 1 set) */
                pixel = do_pixel_check (current_mode);
                clear_whole_screen ();
                reset_display_line_vars ();
                display_mode (MODE_LCD);
                display_status (PIXEL_CHECK, pixel);

                break;
        case 2:								/* do greyscale check only (bit 2 set) */
                greyscale = do_greyscale_check (current_mode);
                write_palette (default_palette);					/* restore the palette */
                set_forground_colour (COLOUR_FOREGROUND);
                set_background_colour (COLOUR_BACKGROUND);
                clear_whole_screen ();
                reset_display_line_vars ();
                display_mode (MODE_LCD);
                display_status (GREYSCALE_CHECK, greyscale);

                break;
    }
    reset_display_line_vars ();
    set_led_state (LED_RUNNING, LED_OFF);				/* switch of running led */
    if ((pixel == TRUE) && (greyscale == TRUE))
        display_status_led (MODE_LCD, LED_COM_PASSED);
    else
        display_status_led (MODE_LCD, LED_COM_FAILED);

    wait_for_cont ();
    _kernel_oswrch (4);
    set_led_state (LED_FAIL, LED_OFF);					/* restore led settings */
    set_led_state (LED_RUNNING, LED_OFF);
    set_led_state (LED_PASS, LED_ON);
}
