//Modem Terminal
//Provides a simple terminal interface to a modem for test purposes.
//Allows the user to type AT commands and observe the modems response

#include <stdio.h>
#include <swis.h>
#include <string.h>
#include <stdlib.h>
#include "serial_lib.h"

int instream  =0;
int outstream =0;

void close_streams(void)
{
  serial_close_stream(instream);
  serial_close_stream(outstream);
}

int initialise_serial(void)
{
   static char serial_config[] = "devices#baud115200;data8;stop1;noparity;rts:$.modem";

   instream  = serial_open_stream(serial_config, Serial_Input);
   outstream = serial_open_stream(serial_config, Serial_Output);

   if (!instream || !outstream) return 0;

   return 1;
}

void get_modem_response(void)
{
  int c=0;

  c = serial_read_byte(instream);
  if (c>0) printf("%c",c);
}

//check to see if the modem has any data for us
int data_waiting(int handle)
{
  _kernel_swi_regs regs;
  regs.r[0] = 2;
  regs.r[1] = handle;

  _kernel_swi(OS_Args, &regs, &regs);

  return regs.r[2];
}


//checks the keyboard buffer for a byte
//if one is available write it to outstream
void if_byte_write(void)
{
  int key;

  key = _kernel_osrdch();

  if (key >= 0)
  {
    serial_write_byte(outstream,key);
  }

}

int main(void)
{

 atexit(close_streams);

 _kernel_oswrch(12);  //clear the screen

 printf("\n\n\nModem Terminal\n");
 printf("--------------\n");
 printf("\nPress ESC to exit\n\n");

 if (!initialise_serial())
 {
   printf("\nFailed to initialise Modem");
   return 0;
 }

 do
 {
   if(data_waiting(instream)) get_modem_response();
   if_byte_write();
 }
 while (1);

 return 0;
}
