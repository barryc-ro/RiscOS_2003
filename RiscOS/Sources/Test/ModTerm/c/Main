/*  Modem Terminal
    --------------

ModTerm provides a simple terminal interface to the modem for test purposes.
It allows the user to type AT commands and observe the modems response.

It was written for Telecom Approvals Testing.

Keys are as follows:

  Escape  Quit
  F1      Send byte 01010101 repeatedly
  F2      Send byte 10101010 repeatedly
  F3      Stop sending bytes
  Other   Send character to modem (and stop sending repeating bytes).

Note that ModTerm communicates with the modem at 115200 baud, so repeating bytes will be sent
continuously with no pause between them (other than the start and stop bits sent in some modulation schemes).

Note that a start bit is normally a logic 0, a stop bit is a logic 1 and bytes are sent LSB first.
When sending the F1 pattern 01010101 the actual bits sent are:

       0 Start bit for first byte
       1 Bit 0
       0
       1
       0
       1
       0
       1
       0 Bit 7
       1 Stop bit
       0 Start bit for second byte
         etc

This alternating bit test patten is required by JATE, the Japanese Telecom test.
*/

#include <stdio.h>
#include <swis.h>
#include <string.h>
#include <stdlib.h>
#include "serial_lib.h"
#include "standby.h"

#define REPEATBYTE 1

const int FUNCTION_KEY = 228;   /* Base key code to generate for function keys */
const int REPEAT_BYTE_F1=0x55;  /* Bit pattern 0101010101 */
const int REPEAT_BYTE_F2=0xAA;  /* Bit pattern 1010101010 */


int instream  =0;
int outstream =0;

/*  Close Serial Input and Output Streams
    -------------------------------------

*/

void close_streams(void)
{
  serial_close_stream(instream);
  serial_close_stream(outstream);
}

int initialise_serial(void)
{
  /* Modem device name with options. Note the small 10 byte output buffer size to give a
     fast response when starting and stopping repeating byte sequences. */
   static char serial_out_config[] = "devices#baud115200;data8;stop1;noparity;rts;size10:$.Modem";
   static char serial_in_config[]  = "devices#baud115200;data8;stop1;noparity;rts:$.Modem";

   instream  = serial_open_stream(serial_in_config,  Serial_Input);
   outstream = serial_open_stream(serial_out_config, Serial_Output);

   if (!instream || !outstream) return 0;

   return 1;
}

/*  Get Modem Response and Echo it
    ------------------------------

*/

void get_modem_response(void)
{
  int c=0;

  c = serial_read_byte(instream);
  if (c>0) printf("%c",c);
}

/*  Flush Serial Input Buffer
    -------------------------

Read and discard bytes until buffer is empty.
*/

void flush(void)
{
  while (serial_read_byte(instream)>0)
    ;
}


//check to see if the modem has any data for us
int data_waiting(int handle)
{
  _kernel_swi_regs regs;
  regs.r[0] = 2;
  regs.r[1] = handle;

  _kernel_swi(OS_Args, &regs, &regs);

  return regs.r[2];
}


/*  Bring NC Out of Standby Mode
    ----------------------------

This call is needed to bring the NC out of standby mode, enable the
Chrontel TV output and enale the keyboard.

*/

void wakeup(void)
{
  _kernel_swi_regs regs;
  regs.r[0] = 0;

  _kernel_swi(Standby_Online, &regs, &regs);
}


/*  Initialise Function Keys
    ------------------------

Program function keys to generate key code.
F0 key will generate base, F1 key will generate base+1 etc.
*/

void init_function_keys(int base)
{
  _kernel_osbyte(225, base, 0);
}

/*  Convert n to 8 Digit Binary String
    ----------------------------------

*/

char *binary(int n)
{
  static char bin[9];
  int i;

  for(i=0; i<8; i++)
    bin[i]='0'+ (n>>(7-i) & 1) ;
  bin[8]='\0';

  return bin;
}


/*  Read Key and Send Data to Modem
    -------------------------------

Read a key from the keyboard buffer.
Most key codes are simply copied to outstream.
Functon keys F1 and F2 enable the sending of a byte repeatedly (one byte
per call to send_byte). Any other key will stop the sequence.

*/

void send_byte(void)
{
  int key;
  static int repeatbyte=-1;

  key = _kernel_osbyte(129, 0, 0);
  if (key >= 0 && (key & 0xFF00) == 0)
  {
#ifdef REPEATBYTE
    if (key>=FUNCTION_KEY && key<FUNCTION_KEY+10)
    { /* Function key */
      switch (key-FUNCTION_KEY)
      {
      case 1:  /* Function key F1 */
        repeatbyte=REPEAT_BYTE_F1;
        break;
      case 2:  /* Function key F2 */
        repeatbyte=REPEAT_BYTE_F2;
        break;
     default:
        repeatbyte=-1;  /* Stop sending repeating byte */
        break;
      }
      if (repeatbyte>=0)
        printf("\nSending repeating byte %s\n", binary(repeatbyte));
      else
        flush();
    }
    else
#endif
    {
      /* Another key */
      serial_write_byte(outstream, key & 0xFF);
      repeatbyte=-1;
    }
  }

  /* Send the repeatbyte if it has been enabled by a function key */
  if (repeatbyte>=0)
    serial_write_byte(outstream, repeatbyte);
}

int main(void)
{

 atexit(close_streams);

 wakeup();            /* Come out of standby mode */
 _kernel_oswrch(12);  /* Clear the screen */

 printf("\n\n\nModem Terminal\n");
 printf("--------------\n");
 printf("\nPress ESC to exit\n\n");
#ifdef REPEATBYTE
 printf("Press F1 to send byte %s repeatedly\n", binary(REPEAT_BYTE_F1));
 printf("Press F2 to send byte %s repeatedly\n", binary(REPEAT_BYTE_F2));
 printf("Press F3 to stop\n");
#endif

 if (!initialise_serial())
 {
   printf("\nFailed to initialise Modem\n");
   return 0;
 }

#ifdef REPEATBYTE
 init_function_keys(FUNCTION_KEY);
#endif

 serial_write_str(outstream,"ATZ\r");

 do
 {
   if(data_waiting(instream)) get_modem_response();
   send_byte();
 }
 while (1);

 return 0;
}
