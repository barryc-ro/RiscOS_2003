//Modem Terminal
//Provides a simple terminal interface to a modem for test purposes.
//Allows the user to type AT commands and observe the modems response

#include <stdio.h>
#include <swis.h>
#include <string.h>
#include "serial_lib.h"

#define TIMEOUT     200  //Timeout period in centiseconds

typedef long t_timer;

int instream  =0;
int outstream =0;

static void close_streams(void)
{
  if (instream)
    serial_close_stream(instream);
  instream = 0;
  if (outstream)
    serial_close_stream(outstream);
  outstream = 0;
}

//resets the given timer.
void
timer_reset ( t_timer *the_timer )
{
        _kernel_swi_regs reg;

        _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
        *the_timer = (long) reg.r[0];
}


//returns the current timer setting in centiseconds
long
timer_read ( t_timer *the_timer)
{
  _kernel_swi_regs reg;

  _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
  return (long) reg.r[0] -  *the_timer;
}

int initialise_serial(void)
{
   static char serial_config[] = "devices#baud115200;data8;stop1;noparity;rts:$.modem";

   instream  = serial_open_stream(serial_config, Serial_Input);
   outstream = serial_open_stream(serial_config, Serial_Output);

   if (!instream || !outstream) return 0;

   return 1;
}

void get_modem_response(void)
{
  t_timer timer;      	  /* timeout timer */

  int c=0;

  timer_reset(&timer);
   do
      {
        c = serial_read_byte(instream);
        if (c>0) printf("%c",c);
      }
     while (timer_read(&timer) < TIMEOUT);
}

//get a string by reading from the keyboard buffer
//returns the number of chars read
int get_string(char *string)
{
  int key=-1;
  _kernel_swi_regs regs;
  int Carry,rchars=0;

  string[0]='\0';

  do
  {
    regs.r[0] = 145;
    regs.r[1] = 0;
    _kernel_swi_c(OS_Byte, &regs, &regs, &Carry);
    if (!Carry)
      {
        key=regs.r[2];
        if (!rchars) printf("\n");
        if(key==0x08 || key==0x7f)  //handle backspace and del
         {
          if(rchars!=0)
          {
            rchars--;
            string[rchars]=' ';
            printf("\r>%s",string);  //last char deleted
          }
         }
        else
         string[rchars++]=key;

        string[rchars]='\0';
        printf("\r>%s",string);   //echo to screen
      }
  }
  while(key!='\r' && key !=-1);
  //the 'escape sequence' remove the /r
  if (!strcmp(string,"+++\r")) strcpy(string,"+++");
  if (rchars) printf("\n");
  return rchars;
}


//check to see if the modem has any data for us
int data_waiting(int handle)
{
  _kernel_swi_regs regs;
  regs.r[0] = 2;
  regs.r[1] = handle;

  _kernel_swi(OS_Args, &regs, &regs);

  return regs.r[2];
}


int main(void)
{
 char in_string[40];

 printf("   Modem Terminal\n");
 printf("   --------------\n");
 printf("\ntype exit to end session\n");

 if (!initialise_serial())
 {
   printf("\nFailed to initialise Modem");
   return 0;
   close_streams();
 }

 do
 {
   if(data_waiting(instream))
     get_modem_response();
   if(get_string(in_string))
     serial_write_str(outstream,in_string);
 }
 while (strcmp(in_string,"exit\r"));

 close_streams();

 return 0;
}
