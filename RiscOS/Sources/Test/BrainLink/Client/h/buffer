

#ifndef _BUFFER_H
#define _BUFFER_H

#include <stdbool.h>


#define MAX_LINE_LENGTH (int)256

typedef struct text_line
{
  char          text[MAX_LINE_LENGTH];              /* the text is held here. */
  unsigned int  line_length;                    /* the string length of the line. */
  struct        text_line* next_line;           /* a pointer to the next line in list. */
} TEXT_LINE;


typedef struct text_buffer                      /* TEXT_BUFFER is a linked list of TEXT_LINE objects. */
{
   TEXT_LINE* start;                            /* pointer to the first object in the buffer. */
   TEXT_LINE* last_line;                        /* pointer to the last object in the buffer. */
   unsigned int number_of_lines;                /* the number of TEXT_LINE objects currently held in the buffer. */
   unsigned int buffer_size;                    /* the number of TEXT_LINE objects that will fit in the buffer. */
} TEXT_BUFFER;



extern void buffer_createBuffer (TEXT_BUFFER* buffer, unsigned int size);
extern void buffer_eraseBufferContents (TEXT_BUFFER* buffer);
extern void buffer_destroyBuffer (TEXT_BUFFER* buffer);
extern void buffer_extendBuffer (TEXT_BUFFER* buffer, unsigned int number_of_lines);
extern bool buffer_deleteLine (TEXT_BUFFER* buffer, unsigned int line_number);
extern bool buffer_incrementLastLine (TEXT_BUFFER* buffer);
extern bool buffer_addCharToLastLine (TEXT_BUFFER* buffer, char character);
extern void buffer_removeCharFromLastLine (TEXT_BUFFER* buffer);
extern bool buffer_setBufferLine (TEXT_BUFFER* buffer, unsigned int line_number, char* string);
extern char* buffer_getBufferLine (const TEXT_BUFFER* buffer, unsigned int line_number);

#endif



