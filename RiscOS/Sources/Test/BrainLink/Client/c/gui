/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
--------------------------------------------------------------------------
* Purpose: This file contains all functions that are common to a window.
*
*
--------------------------------------------------------------------------
* History:
*
*
**************************************************************************/

/**************************************************************************
* Include header files
**************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include "tboxlibs/window.h"
#include "tboxlibs/wimplib.h"
#include "swis.h"
#include "error.h"
#include "serial/serial.h"
#include "buffer.h"
#include "brainlink.h"
#include "blclient.h"
#include "gui.h"


/***************************************************************************
* Local #defines
***************************************************************************/


/****************************************************************************
* typedefs
*****************************************************************************/


/****************************************************************************
* Function prototypes
*****************************************************************************/


/****************************************************************************
* Global data
*****************************************************************************/






/**************************************************************************
* function: gui_redrawWindow
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int gui_redrawWindow (int event_code, WimpPollBlock* event, IdBlock* id_block, void* handle)
{
   WINDOW_DATA* window_to_redraw = (WINDOW_DATA*)handle;
   WimpRedrawWindowBlock redraw_block;
   int more;

   redraw_block.window_handle = window_to_redraw->window_handle;
   wimp_redraw_window (&redraw_block, &more);
   gui_redrawRectangles (window_to_redraw, &redraw_block, &more);

   return 0;
}




/**************************************************************************
* function: gui_redrawRectangles
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern void gui_redrawRectangles (WINDOW_DATA* const window,
                                  WimpRedrawWindowBlock* redraw_block,
                                  int* const more)
{
   unsigned int line_to_display, lines_shown_on_display;
   unsigned int minimum_line_to_redraw, maximum_line_to_redraw;
   int current_x_pos, current_y_pos;


   while (*more)  /* keep looping whilst there is a part of the screen that needs to be redrawn. */
   {
      current_x_pos = redraw_block->visible_area.xmin - redraw_block->xscroll;
      current_y_pos = redraw_block->visible_area.ymax - redraw_block->yscroll - 1;

      minimum_line_to_redraw = (-redraw_block->yscroll) /
                                window->text_properties.character_height;

      if (minimum_line_to_redraw > 0) minimum_line_to_redraw--;

      /* calculate how many lines will fit in the display */
      lines_shown_on_display = ((redraw_block->visible_area.ymax -
                                 redraw_block->visible_area.ymin) /
                                 window->text_properties.character_height) + 1;


      if (window->text_buf.number_of_lines < lines_shown_on_display)
      {
         maximum_line_to_redraw = window->text_buf.number_of_lines - 1;
      }
      else
      {
         maximum_line_to_redraw = minimum_line_to_redraw + lines_shown_on_display;
      }

      line_to_display = minimum_line_to_redraw;
      current_y_pos -= line_to_display * window->text_properties.character_height;

      do
      {
         _swi (OS_Plot, _INR (0, 2), 4, current_x_pos, current_y_pos);
         current_y_pos -= window->text_properties.character_height;

         printf ("%s", buffer_getBufferLine (&window->text_buf, line_to_display));

         if ((line_to_display + 1) == window->text_buf.number_of_lines)
         {
            printf ("_");
         }
      }
      while (line_to_display++ < (maximum_line_to_redraw));

      wimp_get_rectangle (redraw_block, more);
   }

}



/**************************************************************************
* function: gui_invalidateWindow
*
* description: This function invalidates the visible part
*              of the window, and generates a wimp_redraw event.
*
* Parameters:
* Assumptions:
*
*
*
* Returns: void.
*
*
*
*
**************************************************************************/
extern void gui_invalidateWindow (WINDOW_DATA* const window)
{
   WimpGetWindowStateBlock state;

   /* get the window state */
   state.window_handle = window->window_handle;
   wimp_get_window_state (&state);

   /* and do a force redraw */
   wimp_force_redraw (window->window_handle,
                      state.xscroll,
                      state.yscroll - (state.visible_area.ymax - state.visible_area.ymin) ,
                      state.xscroll + state.visible_area.xmax - state.visible_area.xmin,
                      state.yscroll);

}




/**************************************************************************
* function: gui_invalidateCharacterArea
*
* description: When a new character is to be displayed in
               the window, this function should be called, as it
               only invalidates the part of the window that the character
               will occupy.
* Parameters:  Pointer to the application data.
* Assumptions:
*
*
*
* Returns: void.
*
*
*
*
**************************************************************************/
extern void gui_invalidateCharacterArea (WINDOW_DATA* const window)
{
   int xmin, ymin, xmax, ymax;

   xmin = (window->text_buf.last_line->line_length * window->text_properties.character_width) -
           window->text_properties.character_width;

   xmax = (window->text_buf.last_line->line_length * window->text_properties.character_width) +
           window->text_properties.character_width;

   ymax = -((window->text_buf.number_of_lines - 1) * window->text_properties.character_height);

   ymin = ymax - window->text_properties.character_height;


   /* use wimp_force_redraw to generate a redraw event. */
   wimp_force_redraw (window->window_handle, xmin, ymin, xmax, ymax);
}



/**************************************************************************
* function: gui_blockAreaMove
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern void gui_blockAreaMove (WINDOW_DATA* const window)
{
   int xmin, ymin, xmax, ymax;
   int destination_min_x, destination_min_y;

   xmin = window->work_area.xmin;

   xmax = window->work_area.xmax;

   ymin = window->work_area.ymin;

   ymax = window->work_area.ymax - (window->text_properties.character_height *
                                    window->lines_to_move_up);

   destination_min_x = xmin;
   destination_min_y = ymin + (window->text_properties.character_height *
                               window->lines_to_move_up);

   wimp_block_copy (window->window_handle,
                    xmin, ymin, xmax, ymax,
                    destination_min_x, destination_min_y);

   wimp_force_redraw (window->window_handle,
                      xmin, ymin, xmax,
                      ymin + (window->text_properties.character_height *
                              window->lines_to_move_up));

}






/**************************************************************************
* function: gui_initWorkAreaSize
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns: void.
*
*
*
*
**************************************************************************/
extern void gui_initWorkAreaSize (WINDOW_DATA* const window)
{
   WimpGetWindowStateBlock state;

   state.window_handle = window->window_handle;
   wimp_get_window_state (&state);

   window->work_area.xmin = 0;
   window->work_area.xmax = MAX_LINE_LENGTH * window->text_properties.character_width;
   window->work_area.ymin = - (((state.visible_area.ymax - state.visible_area.ymin) /
                                 window->text_properties.character_height) *
                                 window->text_properties.character_height);
   window->work_area.ymax = 0;

   wimp_set_extent (window->window_handle, &window->work_area);
}


/**************************************************************************
* function: gui_updateWorkAreaSize
*
* description: re-calculates and sets new work area size.
* Parameters:
* Assumptions:
*
*
*
* Returns: the change in size (in lines).
*
*
*
*
**************************************************************************/
extern int gui_updateWorkAreaSize (WINDOW_DATA* const window)
{
   WimpGetWindowStateBlock state;
   unsigned int y_range, work_area_lines;
   int difference = 0;

   state.window_handle = window->window_handle;
   wimp_get_window_state (&state);

   /* y_range is the positive work area size. */
   y_range = -(window->work_area.ymin);

   /* calculate how many lines of text will fit in the work area */
   work_area_lines = y_range / window->text_properties.character_height;

   /* if there are more lines than will fit in the work area, increase the size of the work area. */
   if (window->text_buf.number_of_lines > work_area_lines)
   {
      difference = window->text_buf.number_of_lines - work_area_lines;
      window->work_area.ymin -= difference * window->text_properties.character_height;
   }
   wimp_set_extent (window->window_handle, &window->work_area);

   return difference;

}




/**************************************************************************
* function: gui_moveScrollBar
*
* description:
* Parameters: pointer to the window data. The number of
*             lines to move the scroll bar.
*             number is positive to move the scroll bar up,
*             negative to move it down.
* Assumptions:
*
*
*
* Returns: void.
*
*
*
*
**************************************************************************/
extern void gui_moveScrollBar (WINDOW_DATA* const window, const int lines_to_move)
{
   WimpGetWindowStateBlock state;
   WimpOpenWindowBlock window_block;

   state.window_handle = window->window_handle;
   wimp_get_window_state (&state);

   window_block.window_handle = window->window_handle;
   window_block.visible_area.xmin = state.visible_area.xmin;
   window_block.visible_area.xmax = state.visible_area.xmax;
   window_block.visible_area.ymin = state.visible_area.ymin;
   window_block.visible_area.ymax = state.visible_area.ymax;
   window_block.behind  = state.behind;

   window_block.xscroll = state.xscroll;
   window_block.yscroll = state.yscroll + (window->text_properties.character_height * lines_to_move);

   if (window->window_open == true) /* only open, if already open. */
   {
      wimp_open_window (&window_block); /* apply new scroll bar values. */
   }


}

















