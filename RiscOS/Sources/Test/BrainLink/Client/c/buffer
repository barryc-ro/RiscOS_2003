/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
--------------------------------------------------------------------------
* Purpose:
*
*
--------------------------------------------------------------------------
* History:
*
*
**************************************************************************/

/**************************************************************************
* Include header files
**************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "kernel.h"
#include "buffer.h"
#include "gui.h"
#include "error.h"

/**************************************************************************
* Local #defines
***************************************************************************/


/*************************************************************************
* typedefs
**************************************************************************/


/*******************************************************************************
* function: buffer_createBuffer
*
* description: This function is passed a pointer to a buffer object, and a size
*              vaiable. The function will allocate memory for, and initialise
*              a linked list of TEXT_LINE objects. The buffer object will be
*              initialised.
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
********************************************************************************/
extern void buffer_createBuffer (TEXT_BUFFER* buffer, unsigned int size)
{
   TEXT_LINE* current_line;
   unsigned int loop_counter;


   if ((current_line = (TEXT_LINE*)malloc (sizeof (TEXT_LINE))) == NULL)
   {
      _kernel_oserror e;
      e.errnum = MEMORY_ALLOCATION_ERROR;
      sprintf (e.errmess, "Error allocating memory for window buffer.");
      error_showError (&e);
   }

   buffer->start = current_line;

   for (loop_counter = 1; loop_counter < size; loop_counter++)
   {
      sprintf (current_line->text, "");
      current_line->line_length = 0;

      if ((current_line->next_line = (TEXT_LINE*)malloc (sizeof (TEXT_LINE))) == NULL)
      {
         _kernel_oserror e;
         e.errnum = MEMORY_ALLOCATION_ERROR;
         sprintf (e.errmess, "Error allocating memory for window buffer.");
         error_showError (&e);
      }

      current_line = current_line->next_line;
   }

   current_line->next_line = buffer->start;
   buffer->buffer_size = size;
   buffer->last_line = buffer->start;
   buffer->number_of_lines = 1;
}



/****************************************************************************
* function: buffer_eraseBufferContents
*
* description: Erases the contents of the buffer, but the buffer remains.
* Parameters:  Pointer to the buffer to erase.
* Assumptions:
*
*
*
* Returns: nothing.
*
*
*
*
****************************************************************************/
extern void buffer_eraseBufferContents (TEXT_BUFFER* buffer)
{
   sprintf (buffer->start->text, "");                 /* clear the text in the first line.  */
   buffer->start->line_length = 0;                    /* set the length of the first line to zero. */

   buffer->last_line = buffer->start;                 /* and make the buffer start and end pointers equal. */

   buffer->number_of_lines = 1;

}



/***************************************************************************
* function: buffer_destroyBuffer
*
* description: Deletes the buffer from memory.
* Parameters:  Pointer to the buffer to delete.
* Assumptions:
*
*
*
* Returns:
*
*
*
*
***************************************************************************/
extern void buffer_destroyBuffer (TEXT_BUFFER* const buffer)
{
   TEXT_LINE* current_line = buffer->start;
   TEXT_LINE* next_line;

   if (buffer->buffer_size > 0)           /* only attempt to free memory if there is something in the buffer. */
   {
      do
      {
         next_line = current_line->next_line;
         free (current_line);
         current_line = next_line;
      }
      while (current_line != buffer->last_line);       /* loop until the end of the buffer is found. */
   }

}


/***************************************************************************
* function: buffer_extendBuffer
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns: true if the buffer was successfully extended,
*          otherwise false.
*
*
*
*
***************************************************************************/
extern void buffer_extendBuffer (TEXT_BUFFER* const buffer, unsigned int number_of_lines)
{
   TEXT_LINE* last_line = buffer->start;
   TEXT_LINE* new_line;
   int loop_counter;


   for (loop_counter = 0; loop_counter < (buffer->buffer_size - 1); loop_counter++)
   {
      last_line = last_line->next_line;
   }

   for (loop_counter = 0; loop_counter < number_of_lines; loop_counter++)
   {
      if ((new_line = malloc (sizeof (TEXT_LINE))) == NULL)
      {
         _kernel_oserror e;
         e.errnum = MEMORY_ALLOCATION_ERROR;
         sprintf (e.errmess, "Error allocating memory to extend window buffer.");
         error_showError (&e);
      }

      sprintf (new_line->text, "");
      new_line->line_length = 0;
      new_line->next_line = buffer->start;
      last_line->next_line = new_line;
      last_line = new_line;
      buffer->buffer_size++;
   }
}


/***************************************************************************
* function: buffer_deleteLine
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns: true if the line was deleted, otherwise false.
*
*
*
*
***************************************************************************/
extern bool buffer_deleteLine (TEXT_BUFFER* const buffer, unsigned int line_number)
{
   return false;
}



/***************************************************************************
* function: buffer_incrementLastLine
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns: true if the first line in the buffer had to be
           deleted to make room for the new line, otherwise false.
*
*
*
***************************************************************************/
extern bool buffer_incrementLastLine (TEXT_BUFFER* buffer)
{
   bool line_deleted = false;

   if (buffer->number_of_lines == buffer->buffer_size)
   {
      buffer->last_line   = buffer->start;
      buffer->start = buffer->start->next_line;
      line_deleted = true;
   }
   else
   {
      buffer->number_of_lines++;
      buffer->last_line = buffer->last_line->next_line;
   }

   sprintf (buffer->last_line->text, "");
   buffer->last_line->line_length = 0;

   return line_deleted;
}



/***************************************************************************
* function: buffer_addCharToLastLine
*
* description: Function adds a character to the end of the
               last line in the buffer.
* Parameters:  Pointer to the text buffer object, the character to add.
* Assumptions:
*
*
*
* Returns: true if the character was added to the end of the line,
*          otherwise false.
*
*
*
***************************************************************************/
extern bool buffer_addCharToLastLine (TEXT_BUFFER* buffer, char character)
{
   TEXT_LINE*   current_line = buffer->last_line;
   bool         char_added = false;

   if (current_line->line_length < (MAX_LINE_LENGTH - 1))
   {
      current_line->text[current_line->line_length] = character;
      current_line->text[++(current_line->line_length)] = '\0';
      char_added = true;
   }
   return char_added;
}


/***************************************************************************
* function: buffer_removeCharFromLastLine
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns: nothing.
*
*
*
*
***************************************************************************/
extern void buffer_removeCharFromLastLine (TEXT_BUFFER* buffer)
{
   TEXT_LINE* current_line = buffer->last_line;

   if (current_line->line_length > 0)
   {
      current_line->text[--(current_line->line_length)] = '\0';
   }

}


/***************************************************************************
* function: buffer_setBufferLine
*
* description: function writes a string into the specified line number.
* Parameters:
* Assumptions:
*
*
*
* Returns: true if successful, otherwise false.
*
*
*
*
***************************************************************************/
extern bool setBufferLine (TEXT_BUFFER* buffer, unsigned int line_number, char* string)
{
   TEXT_LINE* current_line = buffer->start;
   unsigned int loop_counter;
   bool status = true;

   if (line_number < buffer->buffer_size)
   {
      for (loop_counter = 0; loop_counter < line_number; loop_counter++)
      {
         current_line = current_line->next_line;
      }
      strncpy (current_line->text, string, MAX_LINE_LENGTH);
   }
   else
   {
      status = false;
   }
   return status;
}



/***************************************************************************
* function: buffer_getBufferLine
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns: Pointer to the string if successful, otherwise NULL.
*
*
*
*
***************************************************************************/
extern char* buffer_getBufferLine (const TEXT_BUFFER*  buffer, unsigned int line_number)
{
   TEXT_LINE* current_line = buffer->start;
   unsigned int loop_counter;
   char* return_string = NULL;

   if (line_number < buffer->buffer_size)
   {
      for (loop_counter = 0; loop_counter < line_number; loop_counter++)
      {
         current_line = current_line->next_line;
      }
      return_string = current_line->text;
   }
   return return_string;
}


