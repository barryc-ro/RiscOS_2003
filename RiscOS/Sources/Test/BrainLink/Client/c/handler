/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
--------------------------------------------------------------------------
* Purpose: This is the client application for the brainlink module.
*
*
--------------------------------------------------------------------------
* History:
*
*
**************************************************************************/

/**************************************************************************
* Include header files
**************************************************************************/

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "taskmodule.h"
#include "brainlink.h"
#include "handler.h"
#include "script.h"
#include "serial/serial.h"
#include "buffer.h"
#include "gui.h"
#include "tboxlibs/wimplib.h"
#include "tboxlibs/menu.h"
#include "tboxlibs/event.h"
#include "zmodem/zmodem.h"
#include "tboxevents.h"
#include "tboxcomps.h"


/****************************************************************************
* Global data
*****************************************************************************/
extern bool ack;


/**************************************************************************
* function: handler_tbObjectAutoCreated
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_tbObjectAutoCreated (int event_code, ToolboxEvent* event,
                                        IdBlock* id_block, void* handle)
{
   char* objname;
   APP_DATA* application_data = (APP_DATA*)handle;


   objname = ((ToolboxObjectAutoCreatedEvent*)event)->template_name;

   if (strcmp (objname, "mainWin") == 0)
   {
      window_get_wimp_handle (0, id_block->self_id, &application_data->main_window.window_handle);
      toolbox_set_client_handle (0, id_block->self_id, (void*)&application_data->main_window);
      event_register_wimp_handler (id_block->self_id, Wimp_ERedrawWindow, gui_redrawWindow, (void*)&application_data->main_window);
      event_register_wimp_handler (id_block->self_id, Wimp_EKeyPressed, handler_keyPress, (void*)application_data);
      event_register_wimp_handler (id_block->self_id, Wimp_EMouseClick, handler_mouseClick, (void*)&application_data->main_window);
      gui_initWorkAreaSize (&application_data->main_window);
      application_data->main_window.editable = true;
   }

   else if (strcmp (objname, "debugWin") == 0)
   {
      window_get_wimp_handle (0, id_block->self_id, &application_data->debug_window.window_handle);
      toolbox_set_client_handle (0, id_block->self_id, (void*)&application_data->debug_window);
      event_register_wimp_handler (id_block->self_id, Wimp_ERedrawWindow, gui_redrawWindow, (void*)&application_data->debug_window);
      gui_initWorkAreaSize (&application_data->debug_window);
      application_data->debug_window.editable = false;
   }

   else if (strcmp (objname, "wrchvWin") == 0)
   {
      window_get_wimp_handle (0, id_block->self_id, &application_data->wrchv_window.window_handle);
      toolbox_set_client_handle (0, id_block->self_id, (void*)&application_data->wrchv_window);
      event_register_wimp_handler (id_block->self_id, Wimp_ERedrawWindow, gui_redrawWindow, (void*)&application_data->wrchv_window);
      gui_initWorkAreaSize (&application_data->wrchv_window);
      application_data->wrchv_window.editable = false;
   }

   else if (strcmp (objname, "statusWin") == 0)
   {
      window_get_wimp_handle (0, id_block->self_id, &application_data->status_window.window_handle);
      toolbox_set_client_handle (0, id_block->self_id, (void*)&application_data->status_window);
      event_register_wimp_handler (id_block->self_id, Wimp_ERedrawWindow, gui_redrawWindow, (void*)&application_data->status_window);
      gui_initWorkAreaSize (&application_data->status_window);
      application_data->status_window.editable = false;
   }

   return 1;
}





/**************************************************************************
* function: handler_windowOpen
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_windowOpen (int event_code, ToolboxEvent* event, IdBlock* id_block, void* handle)
{
   WINDOW_DATA* win_data = (WINDOW_DATA*)handle;

   win_data->window_open = true;

   return 1;
}

/**************************************************************************
* function: windowCloseHandler
*
* description:
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_windowClose (int event_code, ToolboxEvent* event, IdBlock* id_block, void* handle)
{
   WINDOW_DATA* win_data = (WINDOW_DATA*)handle;

   win_data->window_open = false;

   return 1;
}




/**************************************************************************
* function: handler_clearWindow
*
* description: clears the window.
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_clearWindow (int event_code, ToolboxEvent* event, IdBlock* id_block, void* handle)
{
   WINDOW_DATA* window_to_clear;

   toolbox_get_client_handle (0, id_block->ancestor_id, (void*)&window_to_clear);

   buffer_eraseBufferContents (&window_to_clear->text_buf);

   gui_initWorkAreaSize (window_to_clear);
   gui_invalidateWindow (window_to_clear);
   gui_openWindow (window_to_clear);

   if (window_to_clear->editable)
   {
      gui_updateCaretPosition (window_to_clear);
   }

   return 1;
}




/*********************************************************************************
* function: handler_keyPress
*
* description:
*
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
*********************************************************************************/
extern int handler_keyPress (int event_code, WimpPollBlock* event, IdBlock* id_block, void* handle)
{
   int key_code;

   key_code = event->words[6];  /* extract the keycode */

   if ((key_code != F12) && (key_code != CONTROL_F12))
   {
      serial_write ((char*)&key_code, 1); /* and output it to the serial port. */
   }
   else
   {
      _swix (Wimp_ProcessKey, _IN (0), key_code);
   }

   return 1;
}





/*************************************************************************
* function: handler_mouseClick
*
* description: This is the event handler for a mouse click event.
*
*
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
*************************************************************************/
extern int handler_mouseClick (int event_code, WimpPollBlock* event, IdBlock* id_block, void* handle)
{

   gui_updateCaretPosition ((WINDOW_DATA*)handle);

   return 1;
}




/*************************************************************************
* function: handler_saveAsWindow
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
*************************************************************************/
extern int handler_saveAsWindow (int event_code, ToolboxEvent* event,
                                 IdBlock* id_block, void* handle)
{
   WINDOW_DATA* window_to_save;
   SaveAsSaveToFileEvent* save_info = (SaveAsSaveToFileEvent*)event;
   FILE* file_ptr = 0;
   TEXT_LINE* current_line;
   bool finished = false;
   int flags = 0;

      /* get the WINDOW_DATA information. */
   toolbox_get_client_handle (0, id_block->ancestor_id, (void*)&window_to_save);


   switch (event_code)
   {
      case SaveAs_AboutToBeShown:
         if (id_block->parent_component == START_SPOOLING)
         {
            window_to_save->spool_requested = true;
         }
         else
         {
            window_to_save->spool_requested = false;
         }
         break;
      case SaveAs_SaveToFile:
         if (window_to_save->spooling == false)
         {
            file_ptr = fopen (save_info->filename, "w");
            if (file_ptr) /* if the file was opened ok */
            {
               if (window_to_save->spool_requested == false)
               {
                  /* traverse the text buffer and copy each line to the file. */
                  current_line = window_to_save->text_buf.start;
                  do
                  {
                     if (current_line == window_to_save->text_buf.last_line)
                     {
                        finished = true;
                     }
                     fprintf (file_ptr, "\n%s", current_line->text);
                     current_line = current_line->next_line;
                  }
                  while (finished == false);

                  fclose (file_ptr);
                  flags = 1;  /* need to set flag to 1 to say that save was successful. */
                  saveas_file_save_completed (flags, id_block->self_id, save_info->filename);
               }
               else
               {
                  /* store the filename in the window data */
                  window_to_save->spool_file = file_ptr;
                  window_to_save->spooling = true;
                  menu_set_fade (0, id_block->parent_id, START_SPOOLING, 1);
                  menu_set_fade (0, id_block->parent_id, STOP_SPOOLING, 0);
               }
            }
         }
         break;
      case SaveAs_SaveCompleted:
         /* maybe mark the document as unmodified */
         break;
      case SaveAs_DialogueCompleted:
         /* do any tidying up
            maybe delete the SaveAs object if desired */
         break;
      case STOP_SAVING:
         fclose (window_to_save->spool_file);
         window_to_save->spooling = false;

         menu_set_fade (0, id_block->self_id, START_SPOOLING, 0);
         menu_set_fade (0, id_block->self_id, STOP_SPOOLING, 1);

         flags = 1;  /* need to set flag to 1 to say that save was successful. */
         saveas_file_save_completed (flags, id_block->self_id, save_info->filename);
         break;
   }
   return 1;
}






/**************************************************************************
* function: handler_increaseWindowBufferSize
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_increaseWindowBufferSize (int event_code, ToolboxEvent* event,
                                             IdBlock* id_block, void* handle)
{
   WINDOW_DATA* window;
   int obj_id = id_block->self_id;
   int increase;

   /* get the WINDOW_DATA information. */
   toolbox_get_client_handle (0, id_block->ancestor_id, (void*)&window);

   switch (event_code)
   {
      /* when the user presses add, read what is set, and increase the buffer size by
         that amount. */
      case SET_BUFFER_SIZE_BUTTON:
        numberrange_get_value (0, obj_id, SET_BUFFER_SIZE_FIELD, &increase);  /* get the buffer size */
        buffer_extendBuffer (&window->text_buf, increase);
        gui_updateWorkAreaSize (window);
        break;
      default:
        break;
   }

   return 1;
}



/**************************************************************************
* function: handler_helpButton
*
* description: event handler for the help button.
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_helpButton(int event_code, ToolboxEvent* event,
                              IdBlock* id_block, void* handle)
{
   char command[] = "<BrainlinkClient$Dir>.!help";
   _swix (Wimp_StartTask, _IN (0), command);
   return 1;
}



/**************************************************************************
* function: handler_setBaudRate
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_setBaudRate (int event_code, ToolboxEvent* event,
                                IdBlock* id_block, void* handle)
{

   static ComponentId last_selection = 9;

   if (id_block->self_component != last_selection)
   {
      switch (event_code)
      {
         case SET_BAUD_RATE_1200:
             menu_set_tick (0, id_block->self_id, last_selection, 0);
             menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
             last_selection = 1;
             serial_setBaudRate ("1200");
            break;
         case SET_BAUD_RATE_2400:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 2;
            serial_setBaudRate ("2400");
            break;
         case SET_BAUD_RATE_4800:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 3;
            serial_setBaudRate ("4800");
            break;
         case SET_BAUD_RATE_9600:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 4;
            serial_setBaudRate ("9600");
            break;
         case SET_BAUD_RATE_14400:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 5;
            serial_setBaudRate ("14400");
            break;
         case SET_BAUD_RATE_19200:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 6;
            serial_setBaudRate ("19200");
            break;
         case SET_BAUD_RATE_38400:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 7;
            serial_setBaudRate ("38400");
            break;
         case SET_BAUD_RATE_57600:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 8;
            serial_setBaudRate ("57600");
            break;
         case SET_BAUD_RATE_115200:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, id_block->self_component, 1);
            last_selection = 9;
            serial_setBaudRate ("115200");
            break;
         default:
            menu_set_tick (0, id_block->self_id, last_selection, 0);
            menu_set_tick (0, id_block->self_id, 9, 1);
            last_selection = 9;
            serial_setBaudRate ("115200");
      }
   }


   return 1;
}




/****************************************************************************
* function: handler_dataloadMessage
*
* description:
*
*
* Parameters:
* Assumptions:
*
*
*
* Returns: 1
*
*
*
****************************************************************************/
extern int handler_dataLoadMessage (WimpMessage* message, void* handle)
{
    APP_DATA* application_data = (APP_DATA*)handle;
    WimpMessage msg = *message;
    int return_value = 0;

    msg.hdr.your_ref = msg.hdr.my_ref;

    if (message->hdr.action_code == Wimp_MDataLoad)
    {
       _swi (TaskModule_DeRegisterUpCall, _INR (0, 2), 0, 15, application_data->task_handle);
       directzmodemtx (msg.data.data_load_ack.leaf_name);
       _swi (TaskModule_RegisterUpCall, _INR (0, 2), 0, 15, application_data->task_handle);

       msg.hdr.action_code = Wimp_MDataLoadAck;
       wimp_send_message (Wimp_EUserMessage, &msg, msg.hdr.sender, 0, 0);
       return_value = 1;
    }

    return return_value;
}



/****************************************************************************
* function: handler_dataOpenMessage
*
* description:
*
*
* Parameters:
* Assumptions:
*
*
*
* Returns: 1
*
*
*
****************************************************************************/
extern int handler_dataOpenMessage (WimpMessage* message, void* handle)
{
   WimpMessage msg = *message;
   FILE* file_ptr;
   int return_value = 0;

   msg.hdr.your_ref = msg.hdr.my_ref;

   if (message->data.data_open.file_type == 0xaa4)
   {
      msg.hdr.action_code = Wimp_MDataLoadAck;
      wimp_send_message (Wimp_EUserMessage, &msg, msg.hdr.sender, 0, 0);

      file_ptr = fopen (msg.data.data_load_ack.leaf_name, "r");
      if (file_ptr)
      {
         ack = false;
         script_startProcessing (file_ptr);
      }

      return_value = 1;
   }

   return return_value;
}





/**************************************************************************
* function: handler_tbquit
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
**************************************************************************/
extern int handler_tbquit (int event_code, ToolboxEvent* event,
                           IdBlock* id_block, void* handle)
{
   APP_DATA* application_data = (APP_DATA*)handle;

   application_data->quit = true;
   return 1;
}



/*************************************************************************
* function: handler_quit
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
*************************************************************************/
extern int handler_quit (WimpMessage* message, void* handle)
{
   APP_DATA* application_data = (APP_DATA*)handle;

   application_data->quit = true;
   return 1;
}





