/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
--------------------------------------------------------------------------
* Purpose: A collection of functions used for accessing the serial port.
*
*
--------------------------------------------------------------------------
* History:
*
*
**************************************************************************/

/**************************************************************************
* Include header files
**************************************************************************/
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "ioctl.h"
#include "serial.h"
/***************************************************************************
* Local #defines
***************************************************************************/
#define SERIAL "devices#baud115200;data8;stop1;noparity;rts;size1024;thres32:$.serial1"
/****************************************************************************
* typedefs
*****************************************************************************/

/****************************************************************************
* Function prototypes
*****************************************************************************/

/****************************************************************************
* Global data
*****************************************************************************/
static int serial_in  = 0;    /* handles for serial port */
static int serial_out = 0;



/*********************************************************************************/
/* function: serial_openPort                                                     */
/*                                                                               */
/* description: A function to open the serial port for reading and writing.      */
/*                                                                               */
/* Parameters: none                                                              */
/*                                                                               */
/*                                                                               */
/* Returns: _kernel_oserror*                                                     */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern _kernel_oserror* serial_openPort (void)
{
   _kernel_oserror* e = 0;

   if (serial_in != 0)
   {
      /* the serial port is already open, so do nothing */
   }

   else if ((e = _swix (OS_Find, _INR (0, 2) | _OUT (0), 0x4f, SERIAL, NULL, &serial_in)) != 0)
   {
   }

   else if (serial_out != 0)
   {
   }

   else
   {
      /* attempt to open the serial port for output. */
      e = _swix (OS_Find, _INR (0, 2) | _OUT (0), 0xcf, SERIAL, NULL, &serial_out);
   }

   return e;
}





/*********************************************************************************/
/* function: serial_closePort                                                    */
/*                                                                               */
/* description: A function just to abstract away the details of closing          */
/*              the serial port.                                                 */
/* Parameters: none                                                              */
/*                                                                               */
/*                                                                               */
/* Returns: _kernel_oserror*                                                     */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern _kernel_oserror* serial_closePort (void)
{
   _kernel_oserror* e = 0;

   if (serial_in == 0)
   {
      /* the serial port has not been opened for input */
   }

   else if ((e = _swix (OS_Find, _INR (0, 1), 0, serial_in)) != 0)
   {
   }

   else if (serial_out == 0)
   {
      /* the serial port has not been opened for output */
   }

   else
   {
      e = _swix (OS_Find, _INR (0, 1), 0, serial_out); /* attempt to close the serial port. */
   }

   return e;

}

/*********************************************************************************/
/* function: serial_flushBuffers                                                 */
/*                                                                               */
/* description: flushs the serial input and output buffers.                      */
/*                                                                               */
/* Parameters: none                                                              */
/*                                                                               */
/*                                                                               */
/* Returns: _kernel_oserror*                                                     */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern _kernel_oserror* serial_flushBuffers (void)
{
   ioctl_t ioctl_block;
   _kernel_oserror* e = 0;

   ioctl_block.reason = 10;
   ioctl_block.group  = 0;
   ioctl_block.read   = 0;
   ioctl_block.write  = 1;
   ioctl_block.data   = 1;

   if (serial_in != 0)
   {
      e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, serial_in, &ioctl_block);
   }

   if (serial_out != 0 && !e)
   {
      e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, serial_out, &ioctl_block);
   }

   return e;
}




/*********************************************************************************/
/* function: serial_getInputHandle                                               */
/*                                                                               */
/* description:                                                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters:                                                                   */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Returns: handle.                                                              */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_getInputHandle (void)
{
   return serial_in;
}


/*********************************************************************************/
/* function: serial_getOutputHandle                                              */
/*                                                                               */
/* description:                                                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters:                                                                   */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Returns: handle.                                                              */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_getOutputHandle (void)
{
   return serial_out;
}

/*********************************************************************************/
/* function: serial_getBytesInBuffer                                             */
/*                                                                               */
/* description: returns the number of bytes in the serial buffer.                */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters:                                                                   */
/*                                                                               */
/*                                                                               */
/* Returns:                                                                      */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern unsigned int serial_getNumberOfBytesInBuffer (void)
{
   unsigned int bytes;

   _swi (OS_Args, _INR (0, 1) | _OUT (2), 2, serial_in, &bytes);

   return bytes;
}


/*********************************************************************************/
/* function: serial_write                                                        */
/*                                                                               */
/* description: outputs data to the serial port.                                 */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters: pointer to the data, the size of the data.                        */
/*                                                                               */
/*                                                                               */
/* Returns: the number of bytes written                                          */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_write (const char* data, unsigned int size)
{
   unsigned int bytes_remaining;

   if (serial_out)   /* only output if the serial port is open */
   {
      _swi (OS_GBPB, _INR (0, 3) | _OUT (3), 2, serial_out, data, size, &bytes_remaining);
   }

   return (size - bytes_remaining);
}

/*********************************************************************************/
/* function: serial_writeString                                                  */
/*                                                                               */
/* description:                                                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters: pointer to string                                                 */
/*                                                                               */
/*                                                                               */
/* Returns: the number of bytes written                                          */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_writeString (const char* string)
{
   unsigned int string_length;

   string_length = strlen (string);

   return serial_write (string, string_length);
}


/*********************************************************************************/
/* function: serial_writeByte                                                    */
/*                                                                               */
/* description:                                                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters:                                                                   */
/*                                                                               */
/*                                                                               */
/* Returns: the number of bytes written                                          */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_writeByte (const char byte)
{
   return serial_write (&byte, 1);
}







/*********************************************************************************/
/* function: serial_read                                                         */
/*                                                                               */
/* description: reads data from the serial port.                                 */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters: pointer to the buffer data is t be copied to,                     */
/*             the number of bytes to be read,                                   */
/*             the blocking status of the read                                   */
/*                                                                               */
/*                                                                               */
/* Returns: the number of bytes read                                             */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_read (char* const buffer, unsigned int bytes_to_read)
{
   int bytes_remaining;

   if (serial_in)   /* only attempt read if the serial port is open */
   {
      _swi (OS_GBPB, _INR (0, 3) | _OUT (3), 4, serial_in, buffer, bytes_to_read, &bytes_remaining);
   }

   return (bytes_to_read - bytes_remaining);
}


/*********************************************************************************/
/* function: serial_readByte                                                     */
/*                                                                               */
/* description: function reads a single byte from the serial port.               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters:                                                                   */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Returns: The byte read, or -1 if error.                                       */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern int serial_readByte (void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int carry;

  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = serial_in;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err || reg.r[2]) return (-1);

  err = _kernel_swi_c(OS_BGet, &reg, &reg, &carry);
  if (err || carry) return (-1);

  return (reg.r[0]);
}


/*********************************************************************************/
/* function: serial_setBlockingStatus                                            */
/*                                                                               */
/* description:                                                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters: true do a blocking read.                                          */
/*             false to do a non-blocking read.                                  */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Returns: _kernel_oserror*                                                     */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern _kernel_oserror* serial_setBlockingStatus (bool blocking)
{
   ioctl_t ioctl_block;
   _kernel_oserror* e = 0;

   /* now we want to configure the reads to be non-blocking */
   ioctl_block.reason = 1;
   ioctl_block.group  = 0xff;
   ioctl_block.write  = 1;
   ioctl_block.read   = 0;
   ioctl_block.data   = !blocking;

   e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, serial_in,  &ioctl_block);

   return e;

}


/*********************************************************************************/
/* function: serial_setBaudRate                                                  */
/*                                                                               */
/* description: function used to set the baud rate of the serial ports.          */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Parameters: the baud rate as a string, eg "115200".                           */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/* Returns: _kernel_oserror*                                                     */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*                                                                               */
/*********************************************************************************/
extern _kernel_oserror* serial_setBaudRate (const char* baud)
{
   unsigned int baud_rate;
    ioctl_t ioctl_block;
   _kernel_oserror* e = 0;

   if (strcmp (baud, "1200") == 0)
   {
      baud_rate = 1200;
   }
   else if (strcmp (baud, "2400") == 0)
   {
      baud_rate = 2400;
   }
   else if (strcmp (baud, "4800") == 0)
   {
      baud_rate = 4800;
   }
   else if (strcmp (baud, "9600") == 0)
   {
      baud_rate = 9600;
   }
   else if (strcmp (baud, "14400") == 0)
   {
      baud_rate = 14400;
   }
   else if (strcmp (baud, "19200") == 0)
   {
      baud_rate = 19200;
   }
   else if (strcmp (baud, "38400") == 0)
   {
      baud_rate = 38400;
   }
      else if (strcmp (baud, "57600") == 0)
   {
      baud_rate = 57600;
   }
   else
   {
      baud_rate = 115200; /* default to 115200 baud. */
   }

   ioctl_block.reason = 1;
   ioctl_block.group  = 0;
   ioctl_block.read   = 0;
   ioctl_block.write  = 1;
   ioctl_block.data   = baud_rate;

   if (serial_in != 0)
   {
      e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, serial_in, &ioctl_block);
   }

   if (serial_out != 0 && !e)
   {
      e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, serial_out, &ioctl_block);
   }

   return e;
}




