/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
--------------------------------------------------------------------------
* Purpose: This program creates a task window (which is not displayed), but
*          the task window is accessible over a serial link using a terminal
*          emulator.
--------------------------------------------------------------------------
* History:
*
*
**************************************************************************/

/**************************************************************************
* Include header files
**************************************************************************/
#include <stdio.h>
#include <stdbool.h>
#include <stddef.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include "header.h"
#include "kernel.h"
#include "swis.h"
#include "asmutils/rminfo.h"
#include "global/services.h"
#include "asmutils/callbacks.h"
#include "asmutils/irqs.h"
#include "wimp.h"
#include "wimplib.h"
#include "serial/serial.h"
#include "zmodem/zmodem.h"
#include "terminal.h"
#include "brainlink.h"

/***************************************************************************
* Local #defines
***************************************************************************/
#define TASK                          (int)0x4B534154

#define TaskWindow_Input              (int)0x808C0
#define TaskWindow_Output             (int)0x808C1
#define TaskWindow_Ego                (int)0x808C2
#define TaskWindow_Morio              (int)0x808C3
#define TaskWindow_Morite             (int)0x808C4

#define ESCAPE_CHARACTER              (char)0x1B
#define DELETE_CHARACTER              (char)0x7F

#define INPUT_DATA_BUFFER_SIZE        (int)1000
#define TW_DATA_BUFFER_SIZE           (int)500

#define MAX_FILENAME_LENGTH           (int)256
#define MAX_PATH_LENGTH               (int)512
#define MAX_FILETYPE_LENGTH           (int)30
#define MAX_COMMAND_LENGTH            (int)256
#define MAX_DEBUG_STRING_LENGTH       (int)128


/****************************************************************************
* typedefs
*****************************************************************************/
typedef enum {startMessage, closeMessage} statusMessage;
typedef enum {mainWindow, wrchv, debug, brainlink, brainlinkData} dataSource;
typedef enum {keyboard, immediate, pause, task} commandMode;

/****************************************************************************
* Function prototypes
*****************************************************************************/
static int writeOutputString (const char* string, dataSource source);
static int writeOutputData (const char* data, unsigned int size, dataSource source);
static int readInputData (char* in_data, unsigned int bytes_to_read);
static void processInputData (const char* in_data, unsigned int input_data_size,
                              char* tw_data, unsigned int* tw_data_size);
static void addDataReadCallback (const void* const pw);

/****************************************************************************
* Global data
*****************************************************************************/

static int wimp_poll_word = 0;
static volatile int task_handle = 0;
static volatile int  child_handle = 0;

static volatile bool taskwindow_created = false;
static volatile commandMode mode = immediate;
static volatile int slot_size = 64;

char input_data[INPUT_DATA_BUFFER_SIZE];          /* serial input is written to this buffer */

static void* pw_ref;          /* pointer to modules private word, setup in module initialisation code */

static dataSource current_source = mainWindow;

static bool reading_input = false;             /* a flag that is set to prevent a chain of callbacks from building */
static bool need_data_read_callback = false;   /* set to true when data on serial port needs to be read in a callback */




/***************************************************************************
* function: main
*
* description:
* Parameters:
* Assumptions:
*
*
*
* Returns:
*
*
*
*
***************************************************************************/
int main (int argc, char* argv[])
{
   int messages[] = {TaskWindow_Output, TaskWindow_Ego, TaskWindow_Morio, Wimp_MQuit};
   const char description[] = "BLServer";
   const char module_name[] = Module_Title;

   char task_window_cmd[MAX_COMMAND_LENGTH];
   unsigned int bytes_read = 0;                      /* amount of data in in_data buffer */
   char tw_data[TW_DATA_BUFFER_SIZE];                /* array to hold data to be sent to the taskwindow */
   unsigned int tw_data_size = 0;                    /* amount of data to be written to the taskwindow */
   WimpPollBlock wimp_poll_block;
   int wimp_poll_mask;
   int event_code;
   char* ptr;
   int size;

   /* set the current wimp slot size to 32k */
   _swix (Wimp_SlotSize, _INR (0, 1), 32000, -1);

   /* initialise as a wimp task */
   _swix (Wimp_Initialise, _INR (0, 3) | _OUT(1), 310, TASK, description, messages, &task_handle);

   /* open the serial port for reading and writing */
   serial_openPort ();

   /* need to flush out the serial port buffer, upcalls only happen when data enters an empty buffer */
   serial_flushBuffers (true, true);

   /* now we want to configure the reads to be non-blocking */
   serial_setBlockingStatus (false);

   /* set the colors of the client window */
   terminal_setDisplay (0, BG_BLACK, FG_WHITE);

   /* erase the client window */
   terminal_eraseDisplay ();

   /* let the user at the terminal emulator know that we are ready at this end */
   writeOutputString ("\n\rBrainlink server starting...\n\r", brainlink);

   wimp_poll_mask = 0x00400001; /* mask out null events, and set pointer to poll word */


   while (true)
   {
      if (mode != pause)
      {
         /* create the task window if necessary */
         if (mode == task && taskwindow_created == false)
         {
            /* create the task window */
            sprintf (task_window_cmd, "TaskWindow -wimpslot %dK -ctrl -txt 1 -task %d", slot_size, task_handle);
            if (wimp_start_task (task_window_cmd, 0) == 0)
            {
               taskwindow_created = true;
            }
            else
            {
               writeOutputString ("\n\rUnable to create task.\n\r", brainlink);
               mode = immediate; /* task window could not be created, so default to immediate mode. */
            }
         }

         wimp_poll (wimp_poll_mask, &wimp_poll_block, &wimp_poll_word, &event_code);

         switch (event_code)
         {
            case Wimp_EUserMessage:
               switch (wimp_poll_block.user_message.hdr.action_code)
               {
                  case Wimp_MQuit:
                     {
                         WimpMessage msg;
                         msg.hdr.size = 20;
                         msg.hdr.your_ref = 0;
                         msg.hdr.action_code = TaskWindow_Morite;
                         _swix (Wimp_SendMessage, _INR (0, 2), 17, &msg, child_handle);
                         child_handle = 0;
                         _swix (OS_ExitAndDie, _IN(0) | _IN(3), 0, module_name);
                     }
                     break;
                  case TaskWindow_Output:     /* send task window output to serial port */
                     ptr = (char*)&wimp_poll_block.user_message.data.words[1];
                     size = wimp_poll_block.user_message.data.words[0];
                     writeOutputData (ptr, size, mainWindow);
                     break;
                  case TaskWindow_Ego:        /* record the child's task ID */
                     child_handle = wimp_poll_block.user_message.hdr.sender;
                     break;
                  case TaskWindow_Morio:      /* the child has died */
                     child_handle = 0;
                     _swix (OS_ExitAndDie, _IN(0) | _IN(3), 0, module_name);
                     break;
                  default:
                     break;
               }
               break;
            case Wimp_EPollWordNonZero: /* there is data on the serial port */
               wimp_poll_word = 0;

               do
               {
                  tw_data_size = 0;

                  /* read only enough data to fit in a WimpPollBlock. */
                  bytes_read = readInputData (input_data, sizeof (WimpPollBlock) - offsetof (WimpPollBlock, user_message.data.words[1]));

                  processInputData (input_data, bytes_read, tw_data, &tw_data_size);

                  if ((tw_data_size > 0) && (taskwindow_created == true))
                  {
                     wimp_poll_block.user_message.hdr.action_code = TaskWindow_Input;
                     wimp_poll_block.user_message.hdr.your_ref = 0;
                     wimp_poll_block.user_message.data.words[0] = tw_data_size;
                     memcpy (&wimp_poll_block.user_message.data.words[1], tw_data, tw_data_size);
                     /* write the size of the message */
                     wimp_poll_block.user_message.hdr.size =
                        wimp_poll_block.user_message.data.words[0] +
                        sizeof (wimp_poll_block.user_message.data.words[0]) +
                        sizeof (wimp_poll_block.user_message.hdr);


                     /* make sure it's an integer multiple of words */
                     wimp_poll_block.user_message.hdr.size = (wimp_poll_block.user_message.hdr.size + 3) & ~3;
                     wimp_send_message (Wimp_EUserMessage, &wimp_poll_block, child_handle, 0 ,NULL);
                  }

               }
               while (bytes_read > 0);


               break;
            default:
               break;
         }

      }
   }
}

/***************************************************************************
* function: readInputData
*
* description: Copies data from the serial port to the buffer in_data.
*
*
*
*
* Parameters: Pointer to the destination buffer.
*             The amount of data to read into the buffer.
* Assumptions:
*
*
* Returns: The number of bytes read.
*
*
*
*
***************************************************************************/
static int readInputData (char* in_data, unsigned int bytes_to_read)
{
   return serial_read (in_data, bytes_to_read);
}


/***************************************************************************
* function: writeOutputString
*
* description: outputs a string.
*
*
*
*
* Parameters: pointer to the string, the source of the data.
*
*
* Returns: 0 no error, -1 could not write to the serial port.
*
*
*
*
***************************************************************************/
static int writeOutputString (const char* string, dataSource source)
{
   unsigned int size = strlen (string);
   return writeOutputData (string, size, source);
}


/***************************************************************************
* function: writeOutputData
*
* description: outputs data to the serial port.

* Parameters: pointer to the data,
              the size of the data,
              the source of the data.
*
*
* Returns: 0 no error, -1 could not write to the serial port.
*
*
*
*
***************************************************************************/
static int writeOutputData (const char* data, unsigned int size, dataSource source)
{
   unsigned int foreground_color = BG_WHITE;
   int i;

   if (source != current_source)
   {
      switch (source)
      {
         case mainWindow:
            foreground_color = FG_WHITE;
            break;
         case wrchv:
            foreground_color = FG_YELLOW;
            break;
         case debug:
            foreground_color = FG_RED;
            break;
         case brainlink:
            foreground_color = FG_GREEN;
            break;
         case brainlinkData:
            foreground_color = FG_BLACK;
            break;
         default:
           break;
      }

      terminal_setDisplay (0, BG_BLACK, foreground_color);
      current_source = source;

   }

   for (i = 0; i < size; i++)
   {
      serial_writeByte (data[i]);
   }

   return 0;
}






/***************************************************************************
* function: processInputData
*
* description:
*
*
*
*
* Parameters: Pointer to input data buffer.
*             The amount of data in the input buffer.
*             Pointer to the task window input buffer.
*             Amount of data written to task window input buffer.
* Returns:
*
*
*
*
***************************************************************************/
static void processInputData (const char* in_data, unsigned int input_data_size,
                              char* const tw_data, unsigned int* tw_data_size)
{
   static char buffer[MAX_COMMAND_LENGTH];
   static unsigned int data_size = 0;

   unsigned int i;

   /* copy each byte in the buffer to its destination */
   for (i = 0; i < input_data_size; i++)
   {
      if (in_data[i] >= SPACE || in_data[i] == BACK_SPACE || in_data[i] == RETURN || in_data[i] == ESCAPE)
      {
         if (mode == keyboard)
         {
            /* insert byte into the keyboard buffer */
            _swix (OS_Byte, _INR (0, 2), 138, 0, in_data[i]);
         }

         else if (mode == task)
         {
            if (in_data[i] == BACK_SPACE)
            {
               tw_data[(*tw_data_size)++] = DELETE; /* delete last character in the task window */
            }
            else
            {
               tw_data[(*tw_data_size)++] = in_data[i]; /* add the character to the task window */
            }
         }

         else if (mode == immediate)
         {
            if (data_size < MAX_COMMAND_LENGTH)
            {
               if (in_data[i] == BACK_SPACE)
               {
                  char temp = DELETE;
                  if (data_size > 0)
                  {
                     data_size--;
                     writeOutputData (&temp, 1, mainWindow);
                  }

               }
               else
               {
                  buffer[data_size] = in_data[i];
                  writeOutputData (&buffer[data_size++], 1, mainWindow);
               }

               if (in_data[i] == RETURN)
               {
                  serial_writeString ("\n#");
                  _swix (OS_Claim, _INR(0, 2), 0x03, wrchv_entry, pw_ref);   /* claim wrchv vector, so output from OS_CLI  */
                  _swix (OS_CLI, _IN(0), buffer);                            /* can be intercepted. Send command to OS_CLI */
                  _swix (OS_Release, _INR(0, 2), 0x03, wrchv_entry, pw_ref); /* and then release the vector.               */
                  data_size = 0;
               }
            }
         }
      }

      else
      {
         switch (in_data[i])
         {
            case CONTROL_K:
               writeOutputString ("\n\rKEYBOARD MODE.\n\r", brainlink);
               mode = keyboard;
               break;
            case CONTROL_I:
               writeOutputString ("\n\rIMMEDIATE MODE.\n\r", brainlink);
               mode = immediate;
               break;
            case CONTROL_P:
               writeOutputString ("\n\rPAUSE MODE.\n\r", brainlink);
               mode = pause;
               break;
            case CONTROL_T:
               writeOutputString ("\n\rTASK MODE.\n\r", brainlink);
               mode = task;
               break;
            default:
               break;
         }
      }
   }

}


/***************************************************************************
* function: serialPortHandler
*
* description: Called whenever there is data on the serial port.
*
* Parameters:
* Assumptions:
*
*
*
* Returns: 0 to intercept vector, 1 to pass it on.
*
*
*
*
***************************************************************************/
extern int serialPortHandler (_kernel_swi_regs* r, void* pw)
{

   int return_code = 1;  /* assume that we will pass on the vector */

   if (r->r[0] == 15) /* if there is data on the serial port */
   {
      if (r->r[1] == serial_getInputHandle ()) /* check the stream handle */
      {
         return_code = 0;   /* its for us, so intercept the vector */
         if (mode != pause)
         {
            wimp_poll_word = 1; /* transfer control to tasks foreground process */
         }
         else /* not multitasking, so read the input data in a callback */
         {
            addDataReadCallback (pw);
         }
      }
   }
   return return_code;

}

/***************************************************************************
* function: addDataReadCallback
*
* description: Adds a callback to safeReadInputData.
*
* Parameters: Pointer to modules private word.
* Assumptions:
*
*
*
* Returns:
*
*
*
*
***************************************************************************/
static void addDataReadCallback (const void* pw)
{
   if (reading_input)
   {
      need_data_read_callback = true;
   }
   else
   {
      need_data_read_callback = false;
      _swix (OS_AddCallBack, _INR (0, 1), readinput_callback_entry, pw);
   }
}





/***************************************************************************
* function: safeReadInputData
*
* description: It is necessary to be able to read data on the serial port
*              while not multitasking. So, when not multitasking, and data
*              is detected on the serial port, this callback is added.
*
* Parameters:
* Assumptions:
*
*
*
*
*
*
*
*
***************************************************************************/
extern _kernel_oserror* safeReadInputData (_kernel_swi_regs* r, void* pw)
{
   unsigned int bytes_read;

   char dummy_char;
   unsigned int dummy_int;

   reading_input = true; /* set a global flag to say that we are reading the data */

   do
   {
      bytes_read = readInputData (input_data, INPUT_DATA_BUFFER_SIZE);      /* read the data */
      processInputData (input_data, bytes_read, &dummy_char, &dummy_int);   /* process the data */
   }
   while (bytes_read > 0);  /* read until there is nothing left to read */

   reading_input = false;   /* set a global flag to say that we have finished reading the data */

   if (need_data_read_callback)   /* if data arrived in interval between exiting loop, */
   {                              /* and setting reading_input flag to false */
      addDataReadCallback (pw);
   }

   return 0;
}




/***************************************************************************
* function: wrchvHandler
*
* description: Handler for wrchv events. Intercepts characters, and sends
*              them to the serial port.
* Parameters:
* Assumptions:
*
*
*
* Returns: 0 no error, -1 could not write to the serial port.
*
*
*
*
***************************************************************************/
extern int wrchvHandler (_kernel_swi_regs* r, void* pw)
{
   /* character to be sent to the serial port is held in r0 */
   const char intercepted = r->r[0];
   writeOutputData (&intercepted, 1, wrchv);
   return 0;
}





/***************************************************************************
* function: moduleInitialise
*
* description: module initialisation code.
*
* Parameters:
*
*
* Returns: pointer to error block.
*
*
*
*
***************************************************************************/
extern _kernel_oserror* moduleInitialise (const char* cmd_tail, int podule_base, void* pw)
{
   pw_ref = pw;

   return _swix (OS_Claim, _INR (0, 2), 0x1D, upcallv_entry, pw);   /* claim the upcall vector. */

}




/***************************************************************************
* function: sc_handler
*
* description: Used to handle service calls.
*              Needed because the application workspace needs to be kept.
*
* Parameters:
*
*
* Returns:
*
*
*
*
***************************************************************************/
extern void serviceCallHandler (int service_number, _kernel_swi_regs* r, void* pw)
{
   (void)pw;

   switch (service_number)
   {
      case Service_Memory:
        if(r->r[2] == (int)Image_RO_Base)
        {
            r->r[1] = 0; /* refuse to relinquish app. workspace */
        }
        break;

      case Service_Reset:
        task_handle = 0;
        break;

      case Service_StartWimp:
        break;

      case Service_StartedWimp:
        task_handle = 0;
        break;

      default:
        break;
   }

}


/***************************************************************************
* Function: command_handler
*
* Description: Handler for *commands
*
*
* Parameters:
*
*
* Returns:
*
*
*
*
***************************************************************************/
extern _kernel_oserror* commandHandler (const char *arg_string, int argc, int cmd_no, void *pw)
{
   char parameters[256][4];

   (void)pw;


   sscanf (arg_string, "%s", &parameters[0][0]);


   switch (cmd_no)
   {
      case CMD_BrainLink_Baud:
         serial_setBaudRate (parameters[0]);
         break;
      case CMD_BrainLink_Keyboard:
         mode = keyboard;
         writeOutputString ("\n\rKEYBOARD MODE.\n\r", brainlink);
         break;
      case CMD_BrainLink_Immediate:
         mode = immediate;
         writeOutputString ("\n\rIMMEDIATE MODE.\n\r", brainlink);
         break;
      case CMD_BrainLink_Pause:
         mode = pause;
         writeOutputString ("\n\rPAUSE MODE.\n\r", brainlink);
         break;
      case CMD_BrainLink_Task:
         mode = task;
         writeOutputString ("\n\rTASK MODE.\n\r", brainlink);
         sscanf (parameters[0], "%d", &slot_size);
         break;
      case CMD_BrainLink_ZTransmit:
         writeOutputString ("\n\rBrainLink transmitting file using Z-Modem.\n\r", brainlink);
         writeOutputString ("", brainlinkData);
         directzmodemtx (parameters[0]);
         writeOutputString ("\n\rBrainlink file transfer complete.\n\r", brainlink);
         break;
      case CMD_BrainLink_ZReceive:
         {
            char* filename;
            int filetype_number;
            writeOutputString ("\n\rBrainLink receiving file using Z-Modem.\n\r", brainlink);
            writeOutputString (">", brainlink); /* send acknowledge character */
            filename = directzmodemrx("@.");
            writeOutputString ("\n\rBrainlink file transfer complete.\n\r", brainlink);
            if (argc > 0)
            {
               char pathname[256];
               sprintf (pathname, "@.%s", filename);
               _swix (OS_FSControl, _INR (0, 1) | _OUT (2), 31, parameters[0], &filetype_number);
               _swix (OS_File, _INR (0, 2), 18, pathname, filetype_number);
            }
         }
         break;
      case CMD_BrainLink_ZRMReceive:
         {
            char* filename;
            char pathname[256];
            writeOutputString ("\n\rBrainLink receiving module using Z-Modem.\n\r", brainlink);
            writeOutputString (">", brainlink); /* send acknowledge character */
            filename = directzmodemrx("@.");
            writeOutputString ("\n\rBrainlink file transfer complete.\n\r", brainlink);
            sprintf (pathname, "@.%s", filename);
            _swix (OS_File, _INR (0, 2), 18, pathname, 0XFFA);
            _swix (OS_Module, _INR (0, 1), 0, pathname);
         }
         break;
      case CMD_BrainLink_ControlKeys:
         writeOutputString ("\n\rKeyboard mode:  ctrl-K", mainWindow);
         writeOutputString ("\n\rImmediate mode: ctrl-I", mainWindow);
         writeOutputString ("\n\rTask mode:      ctrl-T", mainWindow);
         writeOutputString ("\n\rPause mode:     ctrl-P\n\r", mainWindow);
         break;
      default:
         break;
   }

   return 0;
}

/***************************************************************************
* function: swi_handler
*
* description: used to handle swi calls
*
*
* Parameters:
*
*
* Returns:
*
*
*
*
***************************************************************************/
_kernel_oserror* swiHandler (int swi_no, _kernel_swi_regs* r, void* pw)
{
   (void)pw;

   switch(swi_no)
   {
      case BrainLink_Debug - BrainLink_00:
         writeOutputData ((char*)r->r[1], r->r[2], debug);
         break;

   }
   return 0;
}


/***************************************************************************
* function: module_finalise
*
* Description: This code executes when the module is terminated.
*
*
* Parameters:
*
*
* Returns: _kernel_oserror*
*
*
*
*
***************************************************************************/
extern _kernel_oserror* moduleFinalise (int fatal, int podule, void *pw)
{
   _kernel_oserror* e;

   if (child_handle == 0)    /* can only terminate properly if child task is already dead */
   {
      writeOutputString ("\n\rBrainlink server terminated.", brainlink);
      wimp_close_down (task_handle);
      serial_closePort ();
      /* need to handle the returned error codes */
      e = _swix (OS_RemoveCallBack, _INR(0, 1), readinput_callback_entry, pw);
      if (!e)
      {
         e = _swix (OS_Release, _INR (0, 2), 0x1D, upcallv_entry, pw);
      }
   }
   else
   {
      _kernel_oserror err_block;
      err_block.errnum = 0x103;
      strcpy (err_block.errmess, "AppQuit");
      e = _swix (MessageTrans_ErrorLookup, _INR (0, 4), &err_block, 0, 0, 0, Module_Title);
   }
   return e;
}


