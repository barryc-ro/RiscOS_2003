//Command.c parses the commands

#include <stdio.h>
#include <swis.h>
#include <string.h>
#include "serial_lib.h"
#include "serial.h"
#include "timer.h"
#include "main.h"
#include "debug.h"
#include "support.h"
#include "DRAMTest.h"
#include "parallel.h"
#include "mouse.h"
#include "keyboard.h"
#include "versions.h"
#include "sound.h"
#include "eeprom.h"
#include "PS2.h"
#include "twiddle.h"
#include "CMOS.h"
#include "RGBBanner.h"
#include "Graphics.h"
#include "STBLED.h"
#include "SerialLoop.h"
#include "ethertest.h"
#include "IR.h"
#include "modulator.h"
#include "SCART.h"
#include "MPEG.h"
#include "ROMCheck.h"
#include "ID.h"
#include "gen_ir.h"
#include "Flash.h"

extern int instream,outstream,debug;



//get the two sync characters at the start of a command packet
int get_sync(void)
{
  long timer;

  if(serial_read_byte(instream)==0xb1)
  {
    timer_reset(&timer);
    do
    {
      if(data_waiting(instream))
      {
        if(serial_read_byte(instream)==0xb1)
          return(1);
        else
          return(0);
      }
    }
    while(timer_read(&timer) < 20);
  }
    return (0);
}

//gets the rest of the packet
//splits it into command and data
int get_the_rest(char *command,char *data,char *label)
{
  long timer;
  int bytes_read=0;
  char num;
  int bytes_required;

  if (!get_byte(command)) return(0);
  deprintf("command = %c",*command);
  if (!get_byte(label)) return(0);
  deprintf("label = %c",*label);
  if (!get_byte(&num)) return(0);
  deprintf("num = %c",num);

  //convert ASCII coded number of byte to decimal int
  bytes_required=(int)num-48;
  deprintf("bytes required = %d\n",bytes_required);
  if (!bytes_required) return(1);  //if num=0 there are no data bytes to read

  timer_reset(&timer);
  do
  {
    if(data_waiting(instream))
    {
      data[bytes_read++]=serial_read_byte(instream);
      timer_reset(&timer);
    }

    if(bytes_read==bytes_required)
      {
        data[bytes_read]='\0';
        deprintf("data = %s\n",data);
        return(1);
      }
  }
  while(timer_read(&timer) < 20);
  return(0);
}

//send a response back to the PC
//more bytes is the number of extra data bytes to follow
void respond(char command,char label,int more_bytes)
{
  serial_write_str(outstream,"\xB1\xB1");
  serial_write_byte(outstream,command);
  serial_write_byte(outstream,label);
  serial_write_byte(outstream,more_bytes+48);
}


#define BUFFSIZE 64

//parses commands
int get_command(void)
{
  char command;
  char data[128];
  char reply[64];
  char buff[BUFFSIZE];
  char ch;
  char label;

  if (debug)
    {
      _kernel_oswrch(16);
      _kernel_oswrch(30);   //Cursor home
    }
  deprintf("\n");
  if (!get_sync())
  {
    deprintf("no sync");
    return(0);
  }

  deprintf("got sync");

  data[0]='\0';
  if(!get_the_rest(&command,data,&label))
  {
    deprintf("Bad Packet?\n");
    return(1);
  }

  //acknowledge a correctly formed packet
  serial_write_byte(outstream,'\n');

  //the main command case
  switch(command)
  {
    //Start Test
    case '0':
      respond(command,label,0);
    break;

    //RS232 loopback
    case '1':
      respond(command,label,1);
      if (SerialTest(data))
        serial_write_byte(outstream,'1');
      else
       serial_write_byte(outstream,'0');
    break;

    //ARM and MPEG Decoder IDs
    case '2':
      respond(command,label,15);
      ARM_ID(buff);
      serial_write_str(outstream,buff);
      IOMD(buff);
      serial_write_str(outstream,buff);
      MPEG_ID(buff);
      serial_write_str(outstream,buff);
      DENC_ID(buff);
      serial_write_str(outstream,buff);
    break;

    //memory tests
    case '3':
      switch(data[0])
      {
        case '0':
          if(MPEG_SDRAM())
             sprintf(reply,"00");
          else
             sprintf(reply,"01");
        break;

        case '1':
          sprintf(reply,"1%d",!dram_test(data+1));
        break;

        case '2':
          if(ud_ROM_checksum()==0)  //passed
            sprintf(reply,"20");
          else
            sprintf(reply,"21"); //failed
        break;

        case '3':
          if(flash_program()==0)  //passed
            sprintf(reply,"30");
          else
            sprintf(reply,"31");
        break;
      }
      respond(command,label,2);
      serial_write_str(outstream,reply);
    break;

    //mute MPEG audio channels
    case '5':
      MPEG_audio_mute(data);
      respond(command,label,0);
    break;

     //sound
    case '6':
      if(strlen(data)==1)
        mute_audio(data);
      else
        sound_sound(data);
      respond(command,label,0);
    break;


    //fiddle with the LEDS
    case '7':
      STBLED(data);
      respond(command,label,0);
    break;

    case '8':
      gen_ir(data);
      respond(command,label,0);
    break;

    case '9':
      IR(data,label);
      respond(command,label,0);
    break;


    //ethernet
    case 'A':


     switch(ethertest(data))
     {
       case 0:                      //pass
         respond(command,label,2);
         serial_write_str(outstream,"00");
       break;

       case 1:                     //probe failed
         respond(command,label,2);
         serial_write_str(outstream,"11");
       break;

       case 2:                     //echo failed
         respond(command,label,2);
         serial_write_str(outstream,"01");
       break;


     }
    break;

    //mouse
    case 'B':
      mouse(buff);
      respond(command,label,13);
      serial_write_str(outstream,buff);

    break;

    //keyboard

    case 'C':

    serial_write_str(outstream,"\xB1\xB1");
    serial_write_byte(outstream,'C');
    serial_write_byte(outstream,label);

    switch(data[0])
    {
      case '1':

        if (keyboard_get_key(&ch))
          {
            serial_write_byte(outstream,'1');
            serial_write_byte(outstream,ch);
          }
        else
          serial_write_byte(outstream,'0');

      break;

      case '2':

        keyboard_flush();
        serial_write_byte(outstream,'0');

      break;

      default:
        deprintf("Bad command: %c%s\n",command,data);
    }

    break;

    //PS2
    case 'D':
      respond(command,label,2);
      serial_write_str(outstream,PS2());
    break;

 //verify iic channels
    case 'E':

      strcpy(reply,"1111");

      if (eeprom_checksum())
        reply[0]='0';

      if(check_modulator())
        reply[1]='0';

      DENC_ID(buff);

      if(strcmp(buff,"ERR")!=0)
        reply[2]='0';

      if(check_video_switch())
        reply[3]='0';

      respond(command,label,4);
      serial_write_str(outstream,reply);

    break;


    //reset CMOS/EEPROM/NVRAM whatever you want to call it!
    case 'G':
      respond(command,label,1);
      if (cmos_overwrite_checksum())
        serial_write_byte(outstream,'0');
      else
        serial_write_byte(outstream,'1');
    break;

    //Set TV standard and channel
    case 'H':
      configure_modulator(data);
      respond(command,label,0);
    break;

    case 'I':
      RF_Modulator(data);
      respond(command,label,0);
    break;

    //parallel
    case 'K':

      serial_write_str(outstream,"\xB1\xB1");
      serial_write_byte(outstream,command);
      serial_write_byte(outstream,label);
      parallel_test(data,buff);
      serial_write_byte(outstream,strlen(buff)+48);
      serial_write_str(outstream,buff);

    break;

    //OSG
    case 'O':
      if (data[0]=='0')
        OSG();
      else
        RGB();

      respond(command,label,0);
    break;

    //set serialisation
    case 'S':
      respond(command,label,1);

      if(ProgMac(data))
        serial_write_byte(outstream,'0');
      else
        serial_write_byte(outstream,'1');

    break;


    //debug
    case 'T':

      respond(command,label,0);

      debug=!debug;

       //A Debug command with any data terminates the main loop!
      if(strlen(data)>0)
        {
          _kernel_oscli("RMRinit STBState");
          return(0);
        }

      if(debug)
      {
        DebugMode();
        deprintf("\n\n   Debug On\n");
      }
      else
        printf("   Debug Off\n");

    break;

    //Flash checksum
    case 'X':
      sprintf(buff,"%08X",flash_check32(data));
      respond(command,label,8);
      serial_write_str(outstream,buff);
    break;

    //set the MPEG channel
    case  'Z':
      MPEG_add_channel(data);
      respond(command,label,0);
    break;

    //Product ID
    case ':':
      ID(buff);
      respond(command,label,6);
      serial_write_str(outstream,buff);
    break;

    //Serialisation
    case '<':

      Read_NVRAM("MACAddress",buff,BUFFSIZE);
      sprintf(reply,"%02X%02X%02X%02X%02X%02X",
                       buff[0],buff[1],buff[2],buff[3],buff[4],buff[5]);
      deprintf("Mac address: %s\n",reply);
      deprintf("OS version: %s\v",get_os_version());
      strcat(reply,get_os_version());
      respond(command,label,strlen(reply));
      serial_write_str(outstream,reply);

    break;

    //Flash ID
    case '!':
      flash_info(buff);
      respond(command,label,4);
      serial_write_str(outstream,buff);
    break;

    //Play MPEG Video
    case '>':
      playMPEG(data,0);
      respond(command,label,0);
    break;

    //Peek/Poke the 7500 registers
    case '%':
     serial_write_str(outstream,"\xB1\xB1");
     serial_write_byte(outstream,command);
     serial_write_byte(outstream,label);
     twiddle_regs(data,buff);
     serial_write_str(outstream,buff);
    break;

    //RGBBanner
    case '?':
       KillKursors();
       TestBanner(data[0]);
       respond(command,label,0);
    break;

    //SCART
    case '+':
      SCART_Pins(data);
      respond(command,label,0);
    break;


    default:
      deprintf("don't know the command: %c%s\n",command,data);
  }

  return (1);
}

