/* File:    serial_lib.c
 * Purpose: C interface to Dual Serial module
 * Author:  S.B. Forrest (based on code by R.W. Buckley)
 * History: 28-May-97 : SBF : Created
 */

#include <stddef.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "serial_lib.h"
#include "debug.h"

/*
 * Open a stream on the given filename
 */
int serial_open_stream(char *filename, int rights)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = rights;
  reg.r[1] = (int)filename;
  err = _kernel_swi(OS_Find, &reg, &reg);
  if (err) return (0);

  return (reg.r[0]);
}

/*
 * Close stream specified by handle
 */
void serial_close_stream(int handle)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  reg.r[1] = handle;
  _kernel_swi(OS_Find, &reg, &reg);
}

/*
 * Execute an ioctl and return the data
 */
unsigned int serial_ioctl(int handle, ioctl_t *ioctl_block)
{
  _kernel_swi_regs reg;

  reg.r[0] = 9;                    /* ioctl */
  reg.r[1] = handle;
  reg.r[2] = (int)ioctl_block;
  _kernel_swi(OS_Args, &reg, &reg);

  return (ioctl_block->data);
}

/*
 * Fill buffer with as much data as will fit, or as much as is in the RX stream.
 * Return amount of data read.
 */
int serial_read_stream(int handle, char *data_block, int size)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int rx_datasize;

  reg.r[0] = 2;                         /* get amount of data in buffer */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  rx_datasize = reg.r[2];
  if (!rx_datasize) return (0);         /* no data */

  if (rx_datasize>size) rx_datasize = size;

  reg.r[0] = 4;	      	                /* read data */
  reg.r[1] = handle;
  reg.r[2] = (int)data_block;
  reg.r[3] = rx_datasize;
  err = _kernel_swi(OS_GBPB, &reg, &reg);
  if (err) return (-1);

  return (rx_datasize);
}

/*
 * Get a single byte from the serial stream. Will return -1 for failure.
 */
int serial_read_byte(int handle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int carry;

  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err || reg.r[2]) return (-1);

  err = _kernel_swi_c(OS_BGet, &reg, &reg, &carry);
  if (err || carry) return (-1);

  //deprintf("[i%d 0x%x c%c]",reg.r[0],reg.r[0],reg.r[0]);
  return (reg.r[0]);
}

/*
 * Write to TX stream as much data as given or as much as will fit in the
 * stream. Return amount of data written.
 */
int serial_write_stream(int handle, char *data_block, int size)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int tx_freesize;

  reg.r[0] = 2;                         /* get amount of free space in buffer */
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  tx_freesize = reg.r[2];
  if (!tx_freesize) return (0);         /* no free space */

  if (size>tx_freesize) size = tx_freesize;

  reg.r[0] = 2;	      	                /* write data */
  reg.r[1] = handle;
  reg.r[2] = (int)data_block;
  reg.r[3] = size;
  err = _kernel_swi(OS_GBPB, &reg, &reg);
  if (err) return (-1);

  return (size);
}

/*
 * Send a single byte to the serial stream. Will return 1 for success
 */
int serial_write_byte(int handle, char data)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = (int)data;
  reg.r[1] = handle;
  err = _kernel_swi(OS_BPut, &reg, &reg);
  if (err) return (-1);

  return (1);
}

/*
 * Return free space/amount of data
 */
int serial_size(int handle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = 2;
  reg.r[1] = handle;
  err = _kernel_swi(OS_Args, &reg, &reg);
  if (err) return (-1);

  return (reg.r[2]);
}

/*
 * Write a string to an open stream
 *
 */
void serial_write_str(int handle, char* string)
{
  int ptr;

  for (ptr = 0; (ptr < strlen(string)); ptr++)
    serial_write_byte(handle, string[ptr]);
}

/*
 * Serial IOCtl call handler
 */

_kernel_oserror* osargs_ioctl(const int serial_file, const int reason, const int flags,
                                     const unsigned int data_in, unsigned int *const data_out)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  ioctl_t ioctl;

  ioctl.reason = reason;
  ioctl.group = 0;                  /* Serial IOCtl group code */
  ioctl.reserved = 0;
  ioctl.read = (flags & read_flag) ? 1 : 0;
  ioctl.write = (flags & write_flag) ? 1 : 0;
  ioctl.data = data_in;

  reg.r[0] = OS_Args_IOCtl;
  reg.r[1] = serial_file;
  reg.r[2] = (int)&ioctl;
  err = _kernel_swi(OS_Args, &reg, &reg);

  if (err == NULL && data_out != NULL && (flags & read_flag))
    *data_out = ioctl.data;

  return(err);
}


