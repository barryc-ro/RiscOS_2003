//Support.c
//Various misc support functions

#include "swis.h"
#include "string.h"
#include "Support.h"
#include "debug.h"
#include "math.h"

int find_memory_size(int area)
/* Get the memory size and retun it
   area is the area to ge information on
        1 = DRAM aka DRAM_AREA
        2 = VRAM aka VRAM_AREA
        3 = ROM  aka ROM_AREA
        4 = IO   aka IO_AREA
 */
{
        int size;
        int pages;
        int page_size;
        _kernel_swi_regs reg;

        reg.r[0] = 8 | (area << 8);
        _kernel_swi(OS_Memory, &reg, &reg);
        page_size=reg.r[2];
        pages=reg.r[1];
        size=(pages*page_size)/(1024*1024);
        return size;
}

void wait(int cent)
// Wait a specified number of centiseconds
{
        _kernel_swi_regs regs;
        long tstart = 0, tstop=0;

        _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
        tstart = (long) regs.r[0];
        tstop = tstart+cent;

        do{
                _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
        }while (regs.r[0] <= tstop);
}


//simple ascii hex to decimal conversion
int ahextoi(char *hex)
{
  int l,len;
  int result = 0;

  len=strlen(hex);

  for (l=0;l<len;l++)
  {

    if (hex[l] < 58)
    {
      result=result + (hex[l]-48) * (int)pow(16,(double)(len-1)-l);
    }
    else if (hex[l] < 71)  //capital A-F
    {
      result=result + (hex[l]-55) * (int)pow(16,(double)(len-1)-l);
    }
    else       //should be lower case a-f
    {
     result=result + (hex[l]-87) * (int)pow(16,(double)(len-1)-l);
    }

  }

  return result;

}
