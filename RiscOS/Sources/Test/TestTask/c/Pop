//various low level Parrallel_op functions

/* 11/08/1999 V0.01 NickE   Created
   04/11/1999 V0.02 NickE   Modified for use with Pace parallel tester,
                            added Status input
*/

#include <swis.h>
#include "debug.h"

//reads the parallel port control register

int p_control_read(void)
{
    _kernel_swi_regs reg;

    //read the control register

     reg.r[0]=2;
     reg.r[1]=0x00;
     reg.r[2]=0xFFFFFFFF;

     _kernel_swi(Parallel_Op,&reg,&reg);

     //old value in reg.r[1]
     //new value in reg.r[2]


     return(reg.r[2]);
}

//set the parrallel data bits
void p_data_set(int data)
{
    _kernel_swi_regs reg;

    reg.r[0]=1;
    reg.r[1]=data;

    _kernel_swi(Parallel_Op,&reg,&reg);
}

//read the parallel status register

int p_status_read(void)
{
  _kernel_swi_regs reg;

  reg.r[0]=0;

  _kernel_swi(Parallel_Op,&reg,&reg);

//    deprintf("\nBUSY ACK PE SLCT ERR\n");

//    deprintf("\r %x  ",(reg.r[2] & 0x80)  && 1);
//    deprintf(" %x  ",(reg.r[2] & 0x40)  && 1);
//    deprintf(" %x  ",(reg.r[2] & 0x20)  && 1);
//    deprintf(" %x  ",(reg.r[2] & 0x10)  && 1);
//    deprintf(" %x  ",(reg.r[2] & 0x08)  && 1);

   //mask out the reserved bits
   return(reg.r[2] & 0xF8);
}

//sets the DIR bit to 0
void p_set_data_out(void)
{
    _kernel_swi_regs reg;


     reg.r[0]=2;
     reg.r[1]=0x00;
     reg.r[2]=0xFFFFFFDF;

     _kernel_swi(Parallel_Op,&reg,&reg);

//     deprintf("Old control reg: %x\n",reg.r[1]);
//     deprintf("new control reg: %x\n",reg.r[2]);

}

//sets the DIR bit to 1
void p_set_data_in(void)
{
    _kernel_swi_regs reg;


     reg.r[0]=2;
     reg.r[1]=0x20;
     reg.r[2]=0xFFFFFFDF;

     _kernel_swi(Parallel_Op,&reg,&reg);

     deprintf("Old control reg: %x\n",reg.r[1]);
     deprintf("new control reg: %x\n",reg.r[2]);

}

//set control outputs
void p_set_control_outs(int byte)
{
    _kernel_swi_regs reg;


     reg.r[0]=2;
     reg.r[1]=byte;
     reg.r[2]=0xFFFFFFF0;

     _kernel_swi(Parallel_Op,&reg,&reg);

//     deprintf("Old control reg: %x\n",reg.r[1]);
//     deprintf("new control reg: %x\n",reg.r[2]);

}


//read the data register
int p_read_data(void)
{
  _kernel_swi_regs reg;

  reg.r[0]=0;

  _kernel_swi(Parallel_Op,&reg,&reg);

   //we are only interested in the top bits
   //'cos they are connected to the control outputs so
   //the rest are masked off
   return(reg.r[1] & 0xE0);
}
