//ethertest.c
//test an ethernet interface
//by listening to an multicast stream

#include <stdio.h>
#include "sys/dcistructs.h"
#include "swis.h"
#include "debug.h"
#include <sys/types.h>
#include <sys/param.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <socklib.h>
#include <inetlib.h>
#include <unixlib.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <swis.h>
#include <setjmp.h>
#include <timer.h>


static int ra_s=-1;

int probe(void)
{
  _kernel_swi_regs reg;
  unsigned int UnitNo,DibSwiBase;
  struct stats StatBuff;
  ChDib *dcilist;

  reg.r[0]=NULL;
  reg.r[1]=Service_EnumerateNetworkDrivers;

  if(_kernel_swi(OS_ServiceCall, &reg, &reg) != NULL)
    return 0;

  dcilist=(ChDib *)reg.r[0];

  deprintf("dib_swibase  :: %u\n",dcilist->chd_dib->dib_swibase);
  deprintf("dib_name     :: %s\n",dcilist->chd_dib->dib_name);
  deprintf("dib_unit     :: %u\n",dcilist->chd_dib->dib_unit);
  deprintf("dib_module   :: %s\n",dcilist->chd_dib->dib_module);
  deprintf("dib_location :: %s\n",dcilist->chd_dib->dib_location);
  deprintf("dib_inquire  :: %u\n",dcilist->chd_dib->dib_inquire);

  UnitNo=dcilist->chd_dib->dib_unit;
  DibSwiBase=dcilist->chd_dib->dib_swibase;

  reg.r[0]=1;
  reg.r[1]=UnitNo;
  reg.r[2]=(int)&StatBuff;

  _kernel_swi(DibSwiBase+DCI4Stats, &reg, &reg);

  deprintf("link status :: 0x%X\n",StatBuff.st_link_status);

  reg.r[0]=0;

  _kernel_swi(DibSwiBase+DCI4Version, &reg, &reg);

  deprintf("DCI version :: %d\n",reg.r[1]);

  if(!(StatBuff.st_link_status & 0x01))
    return 0;

  return 1;
}


/* Create a UDP socket, mark it as taskwindow friendly (for testing purposes), and
 * allow it to bind multiple times to the same address (so you run the program
 * multiple times concurrently
 */
static int new_socket(void)
{
        int s;
        int one = 1;

        s = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
         if (s < 0) {
                deprintf("Unable to create new socket: %s\n", _inet_err());
        }
        socketioctl(s, FIONBIO, &one);
        socketioctl(s, FIOSLEEPTW, &one);
        setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));

        return s;
}


/* Join the multicast group "ia".  The local interface "la" is not usually required
 * unless you have a box with several network interfaces and you need to select a
 * specific one.  In an STB environment, you should be OK.
 *
 * Once joined, bind to port 55555 so we can receive the datagrams sent by mvbd.
 *
 */
static void join_group(int s, struct in_addr la, struct in_addr ia)
{
        struct ip_mreq mreq;
        struct sockaddr_in sin;

        mreq.imr_multiaddr = ia;
        mreq.imr_interface = la;

        if (setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof mreq) < 0) {
                deprintf("Unable to join group: %s\n", _inet_err());
        }

        memset(&sin, 0, sizeof(sin));
        sin.sin_family = AF_INET;
        sin.sin_port = htons(55555);
        sin.sin_addr = la;
        if (bind(s, (struct sockaddr *) &sin, sizeof(sin)) < 0) {
                deprintf("Unable to bind to local interface: %s\n", _inet_err());
        }
}


/* Read a packet from the network.  The call will block until a packet arrives */
static int get_packet(void)
{
        int t;
        char buffer[65536];

        t = recv(ra_s, buffer, sizeof(buffer), 0);
        if (t < 0) {
                if ((errno != EINPROGRESS) && (errno !=EWOULDBLOCK)) {
                        deprintf("Receive error: \n", _inet_err());
                }
                return 0;
        }
        return t;
}

//connect to a multicast stream for a while
//and check that we can recieve data
int rcv_mcast(void)
{
        struct in_addr local_interface, multicast_address;
        volatile unsigned long total_bytes = 0;
        char *address ="239.192.1.5";   //default for now
        long timer;

        deprintf("Starting multicast test\n");
        ra_s = new_socket();

        local_interface.s_addr = INADDR_ANY;
        if (!inet_aton(address, &multicast_address)) {
                deprintf("Unable to parse IP address: %s\n", address);
        }
        join_group(ra_s, local_interface, multicast_address);

          timer_reset(&timer);
          do
          {
            total_bytes += get_packet();
            deprintf("%lu\r");
          }
          while(timer_read(&timer)<200);
        deprintf("Bytes received: %lu\n", total_bytes);
        return 0;
}


int ethertest(void)
{
  if(!probe())
    return 0;   //initial probe failed so abort
  rcv_mcast();

  if(ra_s!=-1)
    socketclose(ra_s);

  return 1;
}






