//modulator.c
//configure the modulator
//uses the DENC Driver, see 2501,824/FS

//  26/01/2000  NickE  Created

#include "swis.h"
#include "debug.h"
#include "stdio.h"
#include "string.h"

/***!! Macrovision_PlatformFeatures 0 not impelmented yet !!

//List the configured Standards and Channels Available
void platform_features()
{
 _kernel_swi_regs reg;
 _kernel_oserror *err = NULL;
 char *Standards;
 char line[26];
 int l;

  reg.r[0]=0;

  err=_kernel_swi(0x4D543,&reg,&reg); //Macrovision_PlatformFeatures 0

  if(err)
    {
      deprintf("ERROR::%s\n",err->errmess);
    }
  else
    {
      Standards=(char *)reg.r[1];
      printf("standards : %s",Standards);
#if 0
      do
      {
        strncpy(line,Standards,24);
        line[25]='\0';
        deprintf("%s\n",line);
        //Read the Channels available for this Standard
        {
          int *channelblock;
          int channels;
          reg.r[0]=1;
          reg.r[1]=Standards[16];
          err=_kernel_swi(0x4D543,&reg,&reg);//Macrovision_PlatformFeatures 1
          if(err) deprintf("ERROR");//::%s\n",err->errmess);
          else
            {

             channelblock=(int *)reg.r[2];
             channels=*channelblock;
             for(l=1;l<channels;l++)
             {
              channelblock+=4;
              //deprintf("%s ",channelblock);
              deprintf("%c",channelblock[0]);
              deprintf("%c",channelblock[1]);
              deprintf("%c ",channelblock[2]);
              channelblock+=4;  //skip the NVRAM tag
             }
          }
        }
        Standards+=24;
      }
      while(Standards[0]!='\0');
#endif
    }
}
*/

void configure_modulator(char *data)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  char ReqChannel[4];
  char ReqStandard[12];
  int data_size;
  int channel_bytes;
  char command[64];

 // platform_features();

  //parse the command
  data_size=strlen(data);

  channel_bytes=data[0]-48;
  data++;

  strncpy(ReqChannel,data,channel_bytes);
  ReqChannel[channel_bytes]='\0';
  data+=channel_bytes;
  strcpy(ReqStandard,data);

  deprintf("%s\n",ReqStandard);
  deprintf("%s\n",ReqChannel);

  //construct the TVStandard command
  strcpy(command,"Configure TVStandard ");
  strcat(command,ReqStandard);

  deprintf("%s\n",command);

  //execute it
  reg.r[0]=(int)command;

  err=_kernel_swi(OS_CLI,&reg,&reg);

  if(err) deprintf("ERROR::%s\n",err->errmess);

  //construct the Channel command
  strcpy(command,"Configure TVChannel ");
  strcat(command,ReqChannel);

  deprintf("%s\n",command);

  //execute it
  reg.r[0]=(int)command;

  err=_kernel_swi(OS_CLI,&reg,&reg);

  if(err) deprintf("ERROR::%s\n",err->errmess);

}

//enable/disable the RF Modulator
//SetState = 0 -disable
//SetState > 0 -enable
void RF_Modulator(char* data)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int SetState;

  SetState=data[0]-48;

  reg.r[0]=0x02;  //read macrovision state

  err=_kernel_swi(0x4D540,&reg,&reg);   //Macrovision SetState

  if(err)
  {
    deprintf("ERROR::%s\n",err->errmess);
    return;
  }

  //current state should now be in r[1]

  reg.r[0]=0x01;     //change macrovision state

  if(SetState)
    reg.r[1]=reg.r[1]&0xFFFFFFBF;   //clear bit 6
  else
    reg.r[1]=reg.r[1] | 0x40;       //set bit 6

  _kernel_swi(0x4D540,&reg,&reg);   //Macrovision SetState
}

void DENC_ID(char *buff)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  char *ptr;

  reg.r[0]=3;

  err=_kernel_swi(0x4D543,&reg,&reg); //Macrovision_PlatformFeatures



  if(err)
  {
    deprintf("ERROR::%s\n",err->errmess);
    sprintf(buff,"ERR");
    return;
  }


  ptr=(char *)reg.r[1];

  buff[0]=ptr[4];  //DENC type
  buff[1]=ptr[12];  //chip ID
  buff[2]=ptr[13];  //revID
  buff[3]=NULL;
}





















