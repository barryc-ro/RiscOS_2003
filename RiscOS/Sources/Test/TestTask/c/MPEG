//mplag
//play mpeg video using the VideoControl module
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "Debug.h"
#include "Graphics.h"

extern int debug;

//Globals
static int options[32];
static int sessionID;


void CheckURLinit(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  char area[]="VideoControl_ProtocolModules";
  char frag[]="/    53580\n/multicast    53B00";

  reg.r[0]=0;
  reg.r[1]=(int)area;
  reg.r[2]=(int)frag;

  err=_kernel_swi(0x54143, &reg, &reg);  //CheckURL_AddArea
  if(err)
  {
     printf("ERROR::%s\n",err->errmess);
     return;
  }
}


//set the video size
void vc_size(char *data)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  int xx=0,yy=0,xe=0,ye=0;

  //get the screen width & height
  //defaults to full screen if data='0'
  if (data[0] !='0') GetScreenSize(&xx,&yy,&xe,&ye);

  //set up the options block
  options[0]=5;            //Rectangle Tag
  options[1]=4;            //no. of parameters
  options[2]=(xx/2)<<xe;   //bottom left x
  options[3]=(yy/2)<<ye;   //bottom left y
  options[4]=(xx/2)<<xe;   //width
  options[5]=(yy/2)<<ye;   //height
  options[6]=-1;           //terminate the block

  reg.r[0]=0;
  reg.r[1]=sessionID;
  reg.r[2]=(int)options;

  err=_kernel_swi(0x53502, &reg, &reg); //VideoControl_Options
  if(err)
  {
     deprintf("ERROR::%s\n",err->errmess);
     return;
  }
}


//register with the video control module
int vc_register(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  deprintf("register\n");
  err=_kernel_swi(0x53500, &reg, &reg); //VideoControl_Register
  if(err)
  {
     deprintf("ERROR::%s\n",err->errmess);
     return 0;
  }
  else
    return reg.r[1];
}

int vc_setup(char *clip)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  reg.r[0]=0;
  reg.r[1]=sessionID;
  reg.r[2]=(int)clip;
  reg.r[3]=0;
  reg.r[4]=0;
  reg.r[5]=0;

  deprintf("setup\n");
  err=_kernel_swi(0x53501, &reg, &reg); //VideoControl_Setup

  if(err)
    printf("ERROR::%s\n",err->errmess);

  return reg.r[0];  //status
}

void vc_deregister(void)
{
  _kernel_swi_regs reg;

  reg.r[0]=0;
  reg.r[1]=sessionID;

  deprintf("deregister\n");
  _kernel_swi(0x53507, &reg, &reg); //VideoControl_Deregister
}



//wait for server response
int vc_wait(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  deprintf("wait\n");

  do
  {
    reg.r[0]=0;
    reg.r[1]=sessionID;
    _kernel_swi(0x53503, &reg, &reg); //VideoControl_Status
  }
  while(!(reg.r[0] & 2) && !err);

  deprintf("server response %d",reg.r[2]);

  //VDU 28,8,66,88,6 ?
  if((reg.r[2] !=200) && (reg.r[2] !=501))
  {
    vc_deregister();
    return 0;
  }
  return 1;
}

void vc_play(char *rate)
{
  _kernel_swi_regs reg;

  reg.r[0]=0;
  reg.r[1]=sessionID;
  reg.r[2]=NULL;
  reg.r[3]=(int)rate;

  deprintf("play\n");
  _kernel_swi(0x53505, &reg, &reg); //VideoControl_Play
}

//data is MPEG URL
void playMPEG(char *data,int check)
{
  static int playing=0;

  if(check)
  {
    if (playing)
      playing=vc_wait();
  }
  else
  {
    if(strlen(data)!=0)  //play
      {
        sessionID=vc_register();
        vc_setup(data);
        if (!vc_wait())
          {
            playing=0;
            return;
          }
        vc_play("1");
        playing=1;
      }
    else                //stop
      {
        if(playing)
        {
          vc_play("0");
          vc_wait();         //wait for stop
          vc_deregister();
          playing=0;
        }
        if(debug) DebugMode();
      }
  }
}

//check the MPEGDriver has initialised
int MPEG_OK(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  reg.r[0]=19;  //reason code - enumerate modules
  reg.r[1]=0;   //start enumeration
  reg.r[2]=-1;  //start full enumeration

  do
  {
    err=_kernel_swi(OS_Module,&reg,&reg);
    if(strcmp((char *)reg.r[3],"MPEGDriver") == 0)
      {
        deprintf("got %s\n",reg.r[3]);
        if (reg.r[4]<1)
        {
          deprintf("dormant or unplugged\n");
          //the loop will continue and terminate with
          //an error when it gets to the end of the list
        }
        else
        {
          deprintf("active\n");
          break;  //OK so break out without returning an error
        }
      }
  }
  while(!err);

  if(err)
    return 0;
  else
    return 1;
}


int MPEG_SDRAM(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;

  //if the MPEG driver has initialised SDRAM must be OK
  if (MPEG_OK())
    return 1;
  else
  {
    reg.r[0]=3;   //reason code, reinit module
    reg.r[1]=(int)"MPEGDriver";

    err=_kernel_swi(OS_Module,&reg,&reg);

    if(err)
    {
      deprintf("MPEGDriver Failed to reinit\n");
      deprintf("%s",err->errmess);
      return 0;
    }
    else
    {
      deprintf("MPEG Driver reinited by TestTask\n");
      return 0;
    }
  }
}

//mutes MPEG Audio by poking the 3520 registers
void MPEG_audio_mute(char *data)
{
  int a;

  a=atoi(data);

  deprintf("MPEG Audio %d",a);

  if(a & 0x01) //left channel
    system("write3520 A 20 3F");
  else
    system("write3520 A 20 0");

  if(a & 0x02) // right channel
    system("write3520 A 1E 3F");
  else
    system("write3520 A 1E 0");
}


//Tell SVBMip about available channels
//need to do this because SVBMip won't have seen the channels
//file when we are running from ROM
void MPEG_add_channel(char *data)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err = NULL;
  int l;

  //Test commands can't contain spaces so we send the command
  //with '_' in place of the spaces.
  //The underscores are replaced by spaces before the channel
  //description is sent to SVBMip

  for(l=0;l<strlen(data);l++)
  {
    if(data[l]=='_') data[l]=' ';
  }

  deprintf("channel : %s",data);

  reg.r[0]=0;
  reg.r[1]=(int)data;
  reg.r[2]=0;

  err=_kernel_swi(0x43CBF,&reg,&reg);  //SVB_AddChannel

  if(err) deprintf("%s",err->errmess);
}










