//ethernet echo test

//1.00  21-01-2000 NCE Created - xmit based on code from sbrodie

#include <sys/types.h>
#include <sys/param.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <net/route.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>
#include <netdb.h>
#include <socklib.h>
#include <inetlib.h>
#include <unixlib.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <swis.h>
#include <setjmp.h>
#include <sys/dcistructs.h>
#include <sys/errno.h>
#include "debug.h"
#include "swis.h"
#include "timer.h"



static int ra_s=-1;

int probe(void)
{
  _kernel_swi_regs reg;
  unsigned int UnitNo,DibSwiBase;
  struct stats StatBuff;
  ChDib *dcilist;

  reg.r[0]=NULL;
  reg.r[1]=Service_EnumerateNetworkDrivers;

  if(_kernel_swi(OS_ServiceCall, &reg, &reg) != NULL)
    return 0;

  dcilist=(ChDib *)reg.r[0];

  deprintf("dib_swibase  :: %u\n",dcilist->chd_dib->dib_swibase);
  deprintf("dib_name     :: %s\n",dcilist->chd_dib->dib_name);
  deprintf("dib_unit     :: %u\n",dcilist->chd_dib->dib_unit);
  deprintf("dib_module   :: %s\n",dcilist->chd_dib->dib_module);
  deprintf("dib_location :: %s\n",dcilist->chd_dib->dib_location);
  deprintf("dib_inquire  :: %u\n",dcilist->chd_dib->dib_inquire);

  UnitNo=dcilist->chd_dib->dib_unit;
  DibSwiBase=dcilist->chd_dib->dib_swibase;

  reg.r[0]=1;
  reg.r[1]=UnitNo;
  reg.r[2]=(int)&StatBuff;

  _kernel_swi(DibSwiBase+DCI4Stats, &reg, &reg);

  deprintf("link status :: 0x%X\n",StatBuff.st_link_status);

  reg.r[0]=0;

  _kernel_swi(DibSwiBase+DCI4Version, &reg, &reg);

  deprintf("DCI version :: %d\n",reg.r[1]);

  if(!(StatBuff.st_link_status & 0x01))
    return 0;

  return 1;
}



/* Create a UDP socket, mark it as taskwindow friendly (for testing purposes), and
 * allow it to bind multiple times to the same address (so you run the program
 * multiple times concurrently
 */
static int new_socket(void)
{
        int s;
        int one = 1;

        s = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
        if (s < 0)
          deprintf("Unable to create new socket: %s\n", _inet_err());

        socketioctl(s, FIOSLEEPTW, &one);
        socketioctl(s, FIONBIO, &one);
        setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));

        return s;
}


static int echo(int s, struct in_addr la)
{
        char buffer[64];
        int length;

        length = sprintf(buffer, "TEST DATA [%s:echo] From TestTask",
          inet_ntoa(la));

        length = send(ra_s, buffer, length, 0);
        if (length < 0)
          deprintf("Unable to transmit to %s: %s\n", inet_ntoa(la), _inet_err());

        return length;
}


static void connect_socket(int s, struct in_addr la)
{
        struct sockaddr_in sin;

        memset(&sin, 0, sizeof(sin));
        sin.sin_family = AF_INET;
        sin.sin_port = htons(7);
        sin.sin_addr = la;
        if (connect(s, (struct sockaddr *) &sin, sizeof(sin)) < 0)
          deprintf("Unable to connect to %s: %s\n", inet_ntoa(la), _inet_err());
}


static int get_packet(struct in_addr la)
{
        int t;
        char recv_buffer[64];
        char expect_buffer[64];

        t = recv(ra_s, recv_buffer, sizeof(recv_buffer), 0);
        if (t < 0)
          {
            if (errno != EWOULDBLOCK)
              deprintf("Receive error: %s\n", _inet_err());
            return 0;
          }
        recv_buffer[t]=NULL;
        deprintf("%s\n",recv_buffer);
        sprintf(expect_buffer,"TEST DATA [%s:echo] From TestTask",
          inet_ntoa(la));
        if(strcmp(recv_buffer,expect_buffer) != 0)
          t=0;
        return t;
}


int xmit(char *address)
{
        struct in_addr la;
        int attempt = 0,bytes;
        long timer;

        if (!inet_aton(address, &la))
        {
          deprintf("Unable to parse IP address: %s\n", address);
          return 0;
        }

        ra_s = new_socket();
        connect_socket(ra_s, la);


        //try to send the packet 10 times as udp may throw a packet away!

        do
        {
          bytes = echo(ra_s, la);
          timer_reset(&timer);
          while((get_packet(la) != bytes) && (timer_read(&timer)<100));
        }
        while((attempt++ <10) && (timer_read(&timer)>=100));



        if(ra_s!=-1) socketclose(ra_s);

        if (attempt < 10)
          {
            deprintf("got %d bytes in %d attempts\n",bytes,attempt);
            return 1;
          }
        else
        {
          return 0;
        }
}

#define SYSVAR_INET_GATEWAY	"Inet$Gateway"


/*
 * ifrconfig_set_default_route
 *
 * - takes as parameter an open socket id
 * - reads the system variable Inet$Gateway (string a.b.c.d)
 * - converts the var string to u_long inet address
 * - establishes that address as the default route
 *
*/


int ifrconfig_set_default_route(void)
{
    char *gwvar;
    unsigned long gateway_adr;
    struct in_addr gw_in;

    /* If variable is not set then return success. */
    gwvar = getenv(SYSVAR_INET_GATEWAY);
    if (gwvar == NULL || gwvar[0] == '\0') return (1);

    if (inet_aton(gwvar, &gw_in) == 0 || gw_in.s_addr == INADDR_ANY)
        return (0);
    gateway_adr = gw_in.s_addr;

    {
        static int rtm_seq;
        int routes;
        struct {
    	    struct rt_msghdr	hdr;
    	    struct nsockaddr_in	dst;
    	    struct nsockaddr_in	gway;
    	    struct nsockaddr_in	mask;
        } rtmsg;

        if ((routes = socket(PF_ROUTE, SOCK_RAW, AF_INET)) < 0) {
            return 0;
        }

        memset(&rtmsg, 0, sizeof(rtmsg));
        rtmsg.hdr.rtm_type = RTM_ADD;
        rtmsg.hdr.rtm_flags = RTF_UP | RTF_GATEWAY;
        rtmsg.hdr.rtm_version = RTM_VERSION;
        rtmsg.hdr.rtm_seq = ++rtm_seq;
        rtmsg.hdr.rtm_addrs = RTA_DST | RTA_GATEWAY | RTA_NETMASK;
        rtmsg.dst.sin_len = sizeof(rtmsg.dst);
        rtmsg.dst.sin_family = AF_INET;
        rtmsg.gway.sin_len = sizeof(rtmsg.gway);
        rtmsg.gway.sin_family = AF_INET;
        rtmsg.gway.sin_addr.s_addr = gateway_adr;
        rtmsg.mask.sin_len = sizeof(rtmsg.dst);
        rtmsg.mask.sin_family = AF_INET;

        rtmsg.hdr.rtm_msglen = sizeof(rtmsg);
        if (socketwrite(routes, &rtmsg, sizeof(rtmsg)) < 0)
          {
            deprintf("Set default route FAILED: %d %s\n", errno, _inet_err());
            socketclose(routes);
            return (0);
          }

        socketclose(routes);
        return 1;
    }
}


int DHCPinit(void)
{
  _kernel_oscli("DHCPExecute -e -b ei0");
  return(ifrconfig_set_default_route());
}



int ethertest(char *data)
{
  deprintf("probing..\n");

  if(!probe())
  {
    deprintf("probe failed");
    return 1;   //initial probe failed so abort
  }

  deprintf("DHCP init....\n");
  DHCPinit();

  if(strlen(data)!=0)
  {
    deprintf("echo....\n");

    if(!xmit(data))
      return 2;
  }

  return 0;
}
