/* >c.DRAMTest

TEST SOFTWARE (c) Pace Microtechnology plc. 1999

************************* CHANGE LIST *************************************

Vers    Date              Name    Comment
------  -----------       ---     -------------------------------------------
1.00    13 Oct 1999       NCE     Initial version based on BARs UnitTest
                                  code.  Now in 100% C (no asm).

*/
#include <stdio.h>
#include <kernel.h>
#include <swis.h>
#include <stdbool.h>
#include "dramtest.h"
#include "MemSrcNCOS.h"
#include "debug.h"
#include "Support.h"
#include "stdlib.h"

_dynam_area_info dynam_area_info;

char *dram_test_msg[] =
        {
        "Size", 	                                /* 00 */
        "Lower &", 	                                /* 01 */
        "Upper &",      	                        /* 02 */
        "Running two phase memory test",                /* 03 */
        "Running four phase memory test",               /* 04 */
        "There were &",                                 /* 05 */
        "failure(s) in total"                           /* 06 */
        };


int change_area(void)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  reg.r[0] = dynam_area_info.area_numb;
  reg.r[1] = dynam_area_info.reqd_size;
  err = _kernel_swi(OS_ChangeDynamicArea, &reg, &reg);
  if (err)
    {
      deprintf("error ... %s (0x%x)   ",err->errmess,err->errnum);
      return false;
    }
      else
    {
      if (reg.r[1]==dynam_area_info.reqd_size)
        {
          // We got what we asked for, area created ok
          deprintf("we got what we asked for %d ===== %d\n",
          reg.r[1],dynam_area_info.reqd_size);
          return true;
        }
      else
        {
          // We didn't get what we asked for
          deprintf("\nwe didn't get what we asked for %d",reg.r[1]);
          return false;
        }
    }
}

int find_freepool_size(void)
// Find the size of the freepool.
// use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
{
  _kernel_swi_regs reg;

  reg.r[0] = 2;
  reg.r[1] = 6;

  _kernel_swi(OS_DynamicArea, &reg, &reg);

  return reg.r[2];
}

int DRAMTest_Pattern(void)
{
  long int *word;
  long int pattern = 0xAAAAAAAA;

  do
  {
    deprintf("pattern =%X\n",pattern);
    word=(long int *) dynam_area_info.area_start;

    //fill free area with pattern
    while(word < (long int *)dynam_area_info.area_end)
      {
        *word=pattern;
        word++;
      }

    word=(long int *)dynam_area_info.area_start;

    //read back the data and check
    while(word < (long int *)dynam_area_info.area_end)
      {
        if (*word != pattern) break;
        word++;
      }

    if (word < (long int *)dynam_area_info.area_end) return 0;
    pattern=~pattern;
  }
  while(pattern != 0xAAAAAAAA);

  return 1;
}



int dram_test(char *data)
{
  int status = FAILED;
  int size;
  int lower_mem;
  int upper_mem;
  char str[80];
  int fpsize = 0;
  int rem_ok=false;
  int expected_size;

  expected_size=atoi(data);

  // Find out the size, lower and upper memry limits
  size=find_memory_size(DRAM_AREA);
  if(size!=expected_size)
  {
    deprintf("Wrong memory size\n");
    deprintf("Expected %d Mbytes\n",expected_size);
    deprintf("Got      %d Mbytes\n",size);
    return(FAILED);
  }
  upper_mem=find_test_stop();
  lower_mem=find_test_start();
  fpsize=find_freepool_size();

  deprintf ("lower_mem: %08X\n", lower_mem);
  deprintf ("upper_mem: %08X\n", upper_mem);
  deprintf ("fpsize   : %08X\n", fpsize);

  if ((upper_mem > lower_mem) || (fpsize>MINIMUM_MEMORY_LIMIT))
    {
      //Upper memory higher than lower !!!
      // We have more thatn 0.5M to test
      // we can test that
      // Create the dynamic area
      deprintf("upper limit ......%d\n",upper_mem);
      deprintf("lower limit ......%d\n",lower_mem);
      deprintf("freepool size ... %d\n",fpsize);
      deprintf("going to create it now .....\n");

      create_dynam_area();

      deprintf("ok ... %d\n",dynam_area_info.area_ok);
      deprintf("numb ... %d\n",dynam_area_info.area_numb);
      deprintf("start ... %d\n",dynam_area_info.area_start);
      deprintf("end ... %d\n",dynam_area_info.area_end);
      deprintf("size ... %d\n",dynam_area_info.size);

      if (dynam_area_info.area_ok==true)
        {
          int changed_ok = false;
          // we created it ok
          // Re-get the size - less 100K ...just in case the OS needs it :-)
          dynam_area_info.reqd_size=find_freepool_size()-KEEP_IN_RESERVE;

          // Re-get the upper & lower limits
          upper_mem=find_test_stop();
          lower_mem=find_test_start();

          deprintf("upper limit ...%d\n",upper_mem);
          deprintf("lower limit ...%d\n",lower_mem);
          deprintf("reqd size .... %d\n",dynam_area_info.reqd_size);
          deprintf("going to change it now .....\n");

          // now change it
          changed_ok=change_area();
          if (changed_ok==true)
            {
              // We changed the area ok .... lets test it
              // reset 'end' pointer to be correct
              dynam_area_info.area_end=dynam_area_info.area_start+dynam_area_info.reqd_size;
              deprintf("start ... %d\n",dynam_area_info.area_start);
              deprintf("end ... %d\n",dynam_area_info.area_end);
              deprintf("reqd size .... %d\n",dynam_area_info.reqd_size);

              // Make a string showing size, lower and upper limits
              sprintf(str,"%s %d MBytes : %s%08X : %s%08X\n",dram_test_msg[00],size, dram_test_msg[01],lower_mem,dram_test_msg[02],upper_mem);
              // Show size, lower and upper limits
              deprintf("%s\n",str);

              if (DRAMTest_Pattern())
                status=PASSED;
              else
                {
                  status=FAILED;
                  deprintf("Pattern Test Failed\n");
                }
            }
            // free up the memory used
            rem_ok=remove_dynam_area(dynam_area_info.area_numb);
            if (rem_ok==false)
              {
              // we failed to free up the area !!!!
                status=FAILED;
                deprintf("Free Failed\n");
              }
        }
        else
        {
          status=FAILED;
          deprintf("create dynamic area failed\n");
        }
    }
    else
      {
        // Upper memory wasn't higher than lower memory
        // check to see that lower is lower than upper and that they are different
        deprintf("dram size ........%d\n",size);
        deprintf("upper limit ......%d\n",upper_mem);
        deprintf("lower limit ......%d\n",lower_mem);
        deprintf("freepool size ... %d\n",fpsize);
        deprintf("going to create it now .....\n");

        if (upper_mem==lower_mem)
          {
            // They are the same !!!
            // Can't test that !!
              status=FAILED;
              deprintf("lower memory = upper memory\n");
          }
        if (upper_mem<lower_mem)
          {
            // Upper is less than lower !!!
            // Can't test that !
            status=FAILED;
            deprintf("upper memory < lower memory!\n");
          }
        if ((fpsize<=MINIMUM_MEMORY_LIMIT) && (upper_mem != lower_mem) && (upper_mem > lower_mem))
          {
            // Freepool is less thn 0,5 M ... too small
            // Can't test that !!
            status=FAILED;
            deprintf("not enough free memory to test!\n");
          }
        }
        deprintf("DRAM status %d\n",status);
        return(status);
}

int find_test_start(void)
// Find the start of free memory which I can test.
// use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)

{
        int start;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        start = reg.r[3];
        return start;
}

int find_test_stop(void)
// Find the end of free memory which I'm testing.
// use OS_DynamicArea,2 to find the paramiters for the free pool (area 6)
{
        int start;
        int size;
        int end;
        _kernel_swi_regs reg;

        reg.r[0] = 2;
        reg.r[1] = 6;
        _kernel_swi(OS_DynamicArea, &reg, &reg);
        size  = reg.r[2];
        start = reg.r[3];
        end = start+size;
        return end;
}

void create_dynam_area(void)
// _dynam_area_info * dynam_area_info)
// Create a dynamic area of the size, reqd_size.
{
        _kernel_oserror *err = NULL;
        _kernel_swi_regs reg;

        reg.r[0] = 0;
        reg.r[1] = -1;
        reg.r[2] = 0;
        reg.r[3] = -1;
        reg.r[4] = 0x20;
        reg.r[5] = -1;
        reg.r[6] = 0;
        reg.r[7] = 0;
        reg.r[8] = (int)"DRAM Test";
        err = _kernel_swi(OS_DynamicArea, &reg, &reg);
        if (err)
          {
            // error generated ...
            deprintf("error ... %s (0x%x)\n",err->errmess,err->errnum);

            dynam_area_info.area_ok=false;
            dynam_area_info.area_numb=0;
            dynam_area_info.area_start=0;
            dynam_area_info.area_end=0;
            dynam_area_info.size=0;
          }
        else
          {
            dynam_area_info.area_ok=true;
            dynam_area_info.area_numb=reg.r[1];
            dynam_area_info.area_start=reg.r[3];
            dynam_area_info.area_end=reg.r[3]+reg.r[5];
            dynam_area_info.size=reg.r[5];
          }
}

int remove_dynam_area(int area_numb)
// Remove a previously created dynamic area, specified by area_numb
{
        _kernel_oserror *err = NULL;
        _kernel_swi_regs reg;
        reg.r[0] = 1;
        reg.r[1] = area_numb;
        err = _kernel_swi(OS_DynamicArea, &reg, &reg);
        return (err!=0) ? false : true;
}
