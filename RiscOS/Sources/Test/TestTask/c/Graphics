// Graphics.c
// Some simple graphics functions
//
// 16/12/1999   NCE   Created

#include "swis.h"
#include "debug.h"

//kill the cursors
void KillKursors(void)
{
  _kernel_swi_regs reg;

  _kernel_swi(OS_RemoveCursors,&reg,&reg);
}

//Set forgound colour
void SetColour(int colour)
{
   _kernel_swi_regs reg;

   reg.r[0]=0;
   reg.r[1]=colour;

   _kernel_swi(OS_SetColour,&reg,&reg);
}

//Set backgound colour
void SetBackColour(int colour)
{
   _kernel_swi_regs reg;

   reg.r[0]=0x10;
   reg.r[1]=colour;

   _kernel_swi(OS_SetColour,&reg,&reg);
}



//convert a pallete entry to colour number
int GetColourNo(int palette_entry)
{
   _kernel_swi_regs reg;

   reg.r[0]=palette_entry;

   _kernel_swi(ColourTrans_ReturnColourNumber,&reg,&reg);

   deprintf("Colour No: 0X%X\n",reg.r[0]);
   return reg.r[0];
}

//get the size of the current graphics screen
//xe and ye are multipliers
void GetScreenSize( int *x,int *y, int *xe, int *ye)
{
  _kernel_swi_regs reg;

  reg.r[0]=-1;
  reg.r[1]=11;

  _kernel_swi(OS_ReadModeVariable,&reg,&reg);

  *x=reg.r[2];

  reg.r[1]=12;

  _kernel_swi(OS_ReadModeVariable,&reg,&reg);

  *y=reg.r[2];

  //now get the x and y multipliers

  reg.r[1]=4;

  _kernel_swi(OS_ReadModeVariable,&reg,&reg);

  *xe=reg.r[2];

   reg.r[1]=5;

  _kernel_swi(OS_ReadModeVariable,&reg,&reg);

  *ye=reg.r[2];
}


//draw a rectangle
void Rectangle(int x1,int y1,int x2, int y2)
{
  _kernel_swi_regs reg;

  reg.r[0]=100;    //move
  reg.r[1]=x1;
  reg.r[2]=y1;

  _kernel_swi(OS_Plot,&reg,&reg);

  reg.r[0]=101;    //rectangle fill
  reg.r[1]=x2;
  reg.r[2]=y2;

  _kernel_swi(OS_Plot,&reg,&reg);
}



