//Parallel.c

#include "debug.h"
#include "Pop.h"
#include "stdio.h"
#include "string.h"
#include "stdlib.h"

/*
   this test drives the Pace parallel port tester
   which has the following truth table

                OUTPUTS                                  INPUTS
---------------------------------------------------   -----------------------
func  d0 d1 d2 d3 d4 d5 d6 d7 Strb AutoFD Init Slct   Err SlctIn PE ack Busy
pin    2  3  4  5  6  7  8  9  1   14     16   17      15   13   12  10  11
 1      1  1  1  1  1  1  1  1  1   1      1    1        1    1    1    1   1
 2      0  1  1  1  1  1  1  1  1   1      1    1        0    1    1    1   1
 3      1  0  1  1  1  1  1  1  1   1      1    1        1    0    1    1   1
 4      1  1  0  1  1  1  1  1  1   1      1    1        1    1    0    1   1
 5      1  1  1  0  1  1  1  1  1   1      1    1        1    1    1    0   1
 6      1  1  1  1  0  1  1  1  1   1      1    1        1    1    1    1   0
 7      1  1  1  1  1  0  1  1  1   1      1    1        0    1    1    1   1
 8      1  1  1  1  1  1  0  1  1   1      1    1        1    0    1    1   1
 9      1  1  1  1  1  1  1  0  1   1      1    1        1    1    0    1   1
10      1  1  1  1  1  1  1  1  0   1      1    1        1    1    1    0   1
11      1  1  1  1  1  1  1  1  1   0      1    1        1    1    1    1   0
12      1  1  1  1  1  1  1  1  1   1      0    1        0    1    1    1   1
13      1  1  1  1  1  1  1  1  1   1      1    0        1    0    1    1   1
*/



void parallel_test(char *data,char *buff)
{
  int i,len,status;
  char got;


  //these arrays are constructed from the above table

  char data_out[13]={0xFF,0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F,
                   0xFF,0xFF,0xFF,0xFF};

  //only the bottom bits of the control reg should be changed
  char control_out[13]={0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
                        0x0E,0x0D,0x0B,0x07};

  //this is what we expect to read on the status register
  char status_expect[13]={0xF8,0xF0,0xE8,0xD8,0xB8,0x78,
                               0xF0,0xE8,0xD8,0xB8,0x78,
                               0xF0,0xE8};

  //convert a table position to a pin number
  int pin[13]={0,2,3,4,5,6,7,8,9,1,14,16,17};

  deprintf("parallel test\n\n");

  //set data I/O direction to out
  p_set_data_out();

  len=strlen(data);

  if((len==1) && data[0]=='1')  //automatic test
  {
    for (i=1;i<13;i++)
      {
      //set the control outs
      p_set_control_outs(control_out[i]^0x0B);

      //set all the data bits
      p_data_set(data_out[i]);

      //get the inputs by reading the status reg
      got=p_status_read()^0x80;

      if(got!=status_expect[i])
        {
          sprintf(buff,"%0.2d",pin[i]);   //return an error code
          return;
        }
      deprintf("got %X",got);
      deprintf("  expected %X\n",status_expect[i]);
      }

     //passed
     sprintf(buff,"00");
     return;
  }

  if(len==2)   //manual walking '0'
  {
    //find the table entry for the pin number
    for(i=1;i<14;i++)
      if(atoi(data)==pin[i]) break;

    if(i==14)
    {
      deprintf("\npin number does not exist");
      sprintf(buff,"XX");
      return;
    }

     //set the control outs
      p_set_control_outs(control_out[i]^0x0B);

      //set all the data bits
      p_data_set(data_out[i]);

      //get the inputs by reading the status reg
      got=p_status_read()^0x80;

      if(got!=status_expect[i])
        {
          sprintf(buff,"%0.2d",pin[i]);   //return an error code
          return;
        }
      else
        sprintf(buff,"00");

      return;
  }

  if((len==1)&&(data[0]=='2')) //read the status register
  {
    status=p_status_read()^0x80;

    //fill the buffer with and ascii coded binary
    //repesentation of the status register
    //first set everything to zero
    strcpy(buff,"00000");
    if(status & 0x80) buff[0]='1';
    if(status & 0x40) buff[1]='1';
    if(status & 0x20) buff[2]='1';
    if(status & 0x10) buff[3]='1';
    if(status & 0x08) buff[4]='1';

    deprintf("Status: 0X%X\n",status);

    return;
  }

  //we shouldn't get here!
  deprintf("bad parallel command\n");
}



