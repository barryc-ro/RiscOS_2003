//eeprom.c

//checks the eeprom/nvram checksum

//1.00  10-11-1999 NCE Created - Based on BAR code

#include "swis.h"
#include "debug.h"
#include "support.h"
#include "string.h"

#define nv_ram_checksum_loc     0xEF
#define nv_ram_skip_low		nv_ram_checksum_loc
#define nv_ram_skip_high	0xFF
#define nv_ram_size             0x7FF


int eeprom_checksum(void)
// Calculate the NV_RAM Checksum and compare.
//Read the NV_RAM byte by byte and sum as we go.
//Read checksum and compare.
{
        int sum=1;		// Seed is 1.
        int cnt;
        int max_cnt;
        _kernel_oserror *error;
        _kernel_swi_regs reg;

        //attempt to read the NVRAM size
        //old kernels will not have OS_NVMemory

        reg.r[0]=0;   //reason code, NVRAM size

        error = _kernel_swi(OS_NVMemory,&reg,&reg);

        //old kernels will not have OS_NVMemory
        //so use default NVRAM size
        if(error)
          max_cnt=nv_ram_size;
        else
          max_cnt=reg.r[1];

        reg.r[0] = 161;
        for (cnt=0; cnt<= max_cnt; cnt++)
          {
            // Need to skip checksum and also 16 byte OTP area.
            if ((cnt < nv_ram_skip_low) || (cnt > nv_ram_skip_high))
              {
                reg.r[1] = cnt;
                _kernel_swi(OS_Byte, &reg, &reg);
                sum = sum+reg.r[2];
              }
          }
        sum = (sum & 0xFF);

        reg.r[1]=nv_ram_checksum_loc;

        _kernel_swi(OS_Byte, &reg, &reg);

        if (reg.r[2] == sum) return 1;

        return 0;
}

//Read NVRAM
void Read_NVRAM(char *tag,char *buff,int buff_size)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  buff[0]='\0';

  reg.r[0]=(int)tag;
  reg.r[1]=(int)buff;
  reg.r[2]=buff_size;;

  err=_kernel_swi(0x4EE00,&reg, &reg);  //NVRAM_Read

  deprintf("NVRAM Bytes Read:%d\n",reg.r[0]);

  if(err) deprintf("ERROR::%s\n",err->errmess);
}

//program the mac address into the protected area of the NVRAM
int ProgMac(char* hexmac)
{

  char iic[9];
  char temp[15];
  char byte_mac[7];
  int l,sum=0;

  _kernel_oserror *err;
  _kernel_swi_regs reg;


#define NVRAMloc 0xC00

  if (strlen(hexmac)<12)
  {
    deprintf("Bad MAC address\n");
    return 0;
  }


  temp[2]=NULL;  //terminate it

  //convert acsii hex mac address to bytes and put in iic block
  for(l=0;l<6;l++)
  {
    temp[0]=hexmac[l*2];
    temp[1]=hexmac[l*2+1];
    iic[l+2]=ahextoi(temp);
    byte_mac[l]=iic[l+2];
    sum+=iic[l+2];
  }

  byte_mac[6]=NULL;  //terminate it

  iic[2+6]=(sum & 0xFF)^0xFF;  //checksum

  iic[0]=NVRAMloc>>8;
  iic[1]=NVRAMloc&0xFF;

  reg.r[0]=0xA4;  //NVRAM address
  reg.r[1]=(int)iic;
  reg.r[2]=9;

  err=_kernel_swi(IIC_Control, &reg, &reg);

  if(err)
  {
    deprintf("ERROR::%s\n",err->errmess);
    return 0;
  }

  //Read back the NVRAM contents to make sure its wriiten OK

  Read_NVRAM("MACAddress",temp,6);

  if(strcmp(temp,byte_mac) != 0) return 0;

  Read_NVRAM("MACAddressChecksum",temp,1);

  if(temp[0] != iic[2+6]) return 0;

  return 1;
}























