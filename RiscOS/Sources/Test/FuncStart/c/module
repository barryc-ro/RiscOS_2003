#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "os.h"

#include "header.h"

#define RIGHT_CTRL  7
#define BACKSPACE  47
#define RIGHT_ALT   8
#define KEYPAD_1  107
#define KEYPAD_2  124
#define KEYPAD_3  108
#define KEYPAD_4  122
#define KEYPAD_5  123
#define KEYPAD_6   26
#define KEYPAD_7   27
#define KEYPAD_8   42
#define KEYPAD_9   43

static char callafter_count=3; /* The number of checks to make */
static char callback_state=0;  /* Is a callback pending? */
static char reboot_flag=0;
#define CALLAFTER_PENDING  1
#define CALLBACK_PENDING   2

#define CALLAFTER_TIME 50      /* 1/2 second */

#define UNUSED(x) x=x

#define PODULE_SLOT      1
#define PANTHERATM025_ID 0x124
#define ITVDEV_ATM25_ID  0x11b
#define ATM_BOOTCONFIG   0x47b3f

static       char host_ip_address[4]        = {192,168,1,0};
static const int  sub_net_mask              = 24;    /* which equates to 255.255.255.0 */
static       char gateway_ip_address[4]     = {192,168,1,1};
static       char boot_server_ip_address[4] = {192,168,1,2};
static       char primary_dns_ip_address[4] = {192,168,1,2};
static const char boot_mount_path[26]       = "/FuncTest";
static const char static_ip_booting         = 1;     /* yes */
static const int  atm_pvc_address           = 88;
static const int  atm_address_value         = 2;

static int key_pressed(int code);
static int check_for_keys(void);
static void set_up_the_variables(void);
static void check_for_atm_card(void);
static _kernel_oserror *set_callback(void *);
static _kernel_oserror *set_callafter(void *);
static void clear_callback(void *);
static void clear_callafter(void *);

/*** Callafters ***/

_kernel_oserror *set_callafter(void *pw)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  /* Only allow one callafter at any time. */
  if(callback_state&CALLAFTER_PENDING)
    return NULL;

  /* Limit the number of callafters we set. */
  if(callafter_count<=0)
    return NULL;
  
  
  /* Setup a callafter to go off in 1/2 second */
  regs.r[0]=CALLAFTER_TIME; /* Wait before looking at the keyboard. */
  regs.r[1]=(int)callafter_entry;
  regs.r[2]=(int)pw;
  err=_kernel_swi(OS_CallAfter, &regs, &regs);
  if(!err)
  {
    callback_state|=CALLAFTER_PENDING;
    callafter_count--;
  }

  return err;
}

void clear_callafter(void *pw)
{
  _kernel_swi_regs regs;

  /* Don't try to cancel a non-existant callafter */
  if(callback_state&CALLAFTER_PENDING)
  {
    regs.r[0]=(int)callafter_entry;
    regs.r[1]=(int)pw;
    /* Ignore errors, because we're not going to recover anyway... */
    (void)_kernel_swi(OS_RemoveTickerEvent, &regs, &regs);
    callback_state&=~CALLAFTER_PENDING;
  }
}

/*** Callbacks ***/

_kernel_oserror *set_callback(void *pw)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  /* Only allow one callback at any time. */
  if(callback_state&CALLBACK_PENDING)
    return NULL;

  regs.r[0]=(int)callback_entry;
  regs.r[1]=(int)pw;
  err=_kernel_swi(OS_AddCallBack, &regs, &regs);
  if(!err) callback_state|=CALLBACK_PENDING;
  return err;
}

void clear_callback(void *pw)
{
  _kernel_swi_regs regs;

  /* Don't try to cancel a non-existant callback */
  if(callback_state&CALLBACK_PENDING)
  {
    regs.r[0]=(int)callback_entry;
    regs.r[1]=(int)pw;
    /* Ignore errors, because we're not going to recover anyway... */
    (void)_kernel_swi(OS_RemoveCallBack, &regs, &regs);
    callback_state&=~CALLBACK_PENDING;
  }
}

/*** Callafter/Callback handlers ***/

_kernel_oserror *callafter_handler(_kernel_swi_regs *r, void *pw)
{
  /* Clear the CALLAFTER bit */
  callback_state&=~CALLAFTER_PENDING;

  /* This can happen at any time.  We need to set a callback. */
  set_callback(pw);

  /* No errors please. */
  return NULL;
}

_kernel_oserror *callback_handler(_kernel_swi_regs *r, void *pw)
{
  /* Clear the CALLBACK bit */
  callback_state&=~CALLBACK_PENDING;
  
  /* Horah!  Once we've got here it's safe to check the keyboard! */
  if (key_pressed(RIGHT_CTRL))
  {
    int ip_address_value;

    /* Maybe start soaktest */
    if (key_pressed(RIGHT_ALT))
    {
      _kernel_oscli("soaktest");
      /* Don't set another callback. */
      return NULL;
    }

    /* Maybe start soaktest */
    if (key_pressed(BACKSPACE))
    {
      _kernel_oscli("/Resources:$.!Boot.Utils.!SetMac");
      /* Don't set another callback. */
      return NULL;
    }

    /* Maybe set the IP address */
    ip_address_value= check_for_keys();
    if (ip_address_value)
    {
      /* Someone pressed something.  Set the CMOS! */
      host_ip_address[3] = ip_address_value;
      check_for_atm_card();
      set_up_the_variables();

      /* Don't set another callback. */
      return NULL;
    }
  }

  /* Hmmm.  Either nobody is pressing my keys or the keyboard hasn't woken up yet. */
  set_callafter(pw);
  
  /* No errors please. */
  return NULL;
}

/*** Init/Final code ***/

_kernel_oserror *MyInit ( const char *cmd_tail, int podule_base, void *pw )
{
  UNUSED(cmd_tail);
  UNUSED(podule_base);

  /* Just set the callafter to look at the keyboard */
  return set_callafter(pw);
}

_kernel_oserror *MyFinal(int fatal, int podule, void *pw)
{
  UNUSED(fatal);
  UNUSED(podule);
  
  /* Clear any pending callbacks and callafters */
  clear_callafter(pw);
  clear_callback(pw);
  return NULL;
}

/*** Key handling ***/

static int check_for_keys(void)
{
  if (key_pressed(KEYPAD_1))
    return(11);
  if (key_pressed(KEYPAD_2))
    return(12);
  if (key_pressed(KEYPAD_3))
    return(13);
  if (key_pressed(KEYPAD_4))
    return(14);
  if (key_pressed(KEYPAD_5))
    return(15);
  if (key_pressed(KEYPAD_6))
    return(16);
  if (key_pressed(KEYPAD_7))
    return(17);
  if (key_pressed(KEYPAD_8))
    return(18);
  if (key_pressed(KEYPAD_9))
    return(19);

  return(0);
}

static int key_pressed(int code)
{
  _kernel_swi_regs r;

  r.r[0] = 129;
  r.r[1] = code ^ 0xff;
  r.r[2] = 0xff;
  _kernel_swi(OS_Byte, &r, &r);
  if (r.r[1] == 0xff)
    return(1);

  return(0);
}

/*** CMOS routines ***/

/* Write <value> to CMOS location <loc>, but preserve bits in <mask>. */
static void write_cmos(int loc, int value, int mask)
{
  int old=(_kernel_osbyte(161, loc, 0)&0x1ff00)>>8;
  value&=~mask;
  /* Check the old value against the new value. */
  if((old&~mask)==value)
    return;
  
  /* We need to write the location. */
  _kernel_osbyte(162, loc, value|(old&mask));
  reboot_flag|=1;
}

static void set_up_the_variables(void)
{
  int loop;
  _kernel_swi_regs r;

  /*** Host IP ***/

  write_cmos(0x6c, host_ip_address[0], 0);
  write_cmos(0x6d, host_ip_address[1], 0);
  write_cmos(0x6e, host_ip_address[2], 0);
  write_cmos(0x00, host_ip_address[3], 0);

  /*** Sub-net mask and Static IP booting ***/

  write_cmos(0x6f, (sub_net_mask<<3) | (static_ip_booting?2:0), 0x5);

  /*** Gateway IP address ***/

  write_cmos(0xe0, gateway_ip_address[0], 0);
  write_cmos(0xe1, gateway_ip_address[1], 0);
  write_cmos(0xe2, gateway_ip_address[2], 0);
  write_cmos(0xe3, gateway_ip_address[3], 0);

  /*** Boot server IP address ***/

  write_cmos(0x38, boot_server_ip_address[0], 0);
  write_cmos(0x39, boot_server_ip_address[1], 0);
  write_cmos(0x3a, boot_server_ip_address[2], 0);
  write_cmos(0x3b, boot_server_ip_address[3], 0);

  /*** Primary DNS address ***/

  write_cmos(0x95, primary_dns_ip_address[0], 0);
  write_cmos(0x96, primary_dns_ip_address[1], 0);
  write_cmos(0x97, primary_dns_ip_address[2], 0);
  write_cmos(0x98, primary_dns_ip_address[3], 0);

  /*** Boot mount path ***/

  for (loop = 0; loop < sizeof(boot_mount_path); loop++)
  {
    write_cmos(0x51 + loop, boot_mount_path[loop], 0);
  }

  if(reboot_flag)
    _kernel_swi(OS_Reset, &r, &r);
}

/*** ATM routines ***/

/* Set the ATM PVC address */
static void set_atm_pvc_address(void)
{
  _kernel_swi_regs r;

  r.r[0] = 0;
  r.r[1] = 3;  /* Write setting */
  r.r[2] = 1;  /* PVC address   */
  r.r[3] = (int)&atm_pvc_address;  /* Pointer to new value */
  _kernel_swi(XOS_Bit | ATM_BOOTCONFIG, &r, &r);
}

/* Look for ATM25 product ID in Podule Slot 1 */
static int is_podule_atm(void)
{
  int buffer;
  _kernel_swi_regs r;

  r.r[0] = 0x40;
  r.r[1] = (int)&buffer;
  r.r[2] = 4;
  r.r[3] = PODULE_SLOT;
  _kernel_swi(XOS_Bit | Podule_ReadInfo, &r, &r);

  if(buffer == PANTHERATM025_ID || buffer == ITVDEV_ATM25_ID)
  {
    return(TRUE);
  }
  return(FALSE);
}

/* Set up different ip details for ATM */
static void check_for_atm_card(void)
{
  if (is_podule_atm() == TRUE)
  {
    host_ip_address[2] = atm_address_value;
    gateway_ip_address[2] = atm_address_value;
    boot_server_ip_address[2] = atm_address_value;
    primary_dns_ip_address[2] = atm_address_value;
    set_atm_pvc_address();
  }
}




