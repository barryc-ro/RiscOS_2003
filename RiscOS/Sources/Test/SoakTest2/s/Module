; > Module
; Source for SoakTest module

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Who  Version       Description
; ----       ---  -------       -----------
; 10-Mar-95  TMD  0.01		Started
; 14-Mar-95  TMD  0.02		Added audio stuff
; 17-Mar-95  TMD  0.03		Added checks for joystick hardware
; 27-Mar-95  TMD  0.04		Added parallel bootstrap
; 27-Mar-95  TMD  0.05		Dummy version to maintain consistency with SrcFiler
; 28-Mar-95  TMD  0.06		Turn on SCART signals using MPEGVideo_CardControl for now (until State module appears)
; 20-Apr-95  TMD  0.07		(Conditionally) use STBState module to disable watchdog timer reset and turn on SCART
; 05-Jun-95  TMD  0.08		Do variant for Roadster - ie no MPEG hardware
; 06-Jul-95  JRH  0.09          Combined MPEG and non-MPEG versions. Does MPEG soaktest iff pod 0 is of type STB2_MPEG1
; 10-Jun-95  JRH  0.10          Got rid of redundant Audio control structure. Uses PAL or NTSC screen mode depending
;                               on link bit. Does non-MPEG soaktest also in interlaced (PAL or NTSC) mode.
; 17-Jun-95  JRH  0.11          Oops, omitted the NTSC flag in VideoStructureNTSC. NTSC MPEG variant works properly now.
; 24-Jun-95  JRH  0.12          (Conditionally) use STBState module to flash LEDs. Now beeps every 2 secs on non-MPEG.
;                               (Conditionally) no longer poke IOMD_CLINES since STBState module does this
; 20-Sep-96  TMD  1.00		Version for MPEG 2 that uses BASIC program and pokes chip
; 04-Oct-96  TMD  1.01		Fixed problems with MakeFile for Peregrine ROM build (code doesn't change)
; 28-Oct-96  TMD  1.02		Made it work on NTSC machines too

        LEADR   Module_LoadAddr

TAB     *       9
LF      *       10
FF      *       12
CR      *       13

; Values to write to ARM7500 IOLINES register to control LEDs

LEDs_RedNotGreen	*	2_11111011	; bit 1 high, bit 2 low, other bits 1 so inputs
LEDs_GreenNotRed	*	2_11111101	; bit 1 low, bit 2 high, other bits 1 so inputs

; Timeouts for parallel port bootstrap

Timeout_BGET		*	300		; go back to start of protocol if BGET takes longer than this

; Header string from parallel port

			GBLS	PTHeader
PTHeader		SETS	"ProdTest"

			GBLL	MPEG2
MPEG2			SETL	{TRUE}

; Module workspace

                        ^       0, wp
 [ MPEG2
VideoBytesSent		#	4			; number of bytes of video sent
AudioBytesSent		#	4			; number of bytes of audio sent
VideoPreFilling		#	4			; NZ => video pre-filling
AudioPreFilling		#	4			; NZ => audio pre-filling
 ]

EASISpaceAddress	#	4

VideoPacketInUse	#	4
VideoStreamHandle	#	4
VideoPacketDescriptor	#	PacketDescriptorSize	; video packet descriptor
AudioPacketInUse	#	4
AudioStreamHandle	#	4
AudioPacketDescriptor	#	PacketDescriptorSize	; audio packet descriptor

StackPtr		#	4			; flat stack ptr inside bootstrap

PoduleBuffer      	#       16      		; podule header

 [ international
MessageFile_Block #     16
MessageFile_Open  #     4
 ]

Module_WorkspaceSize * :INDEX: @

; **************** Module code starts here **********************

Module_BaseAddr

        &       0                               ; no app start entry
        &       Mod_Init    -Module_BaseAddr
        &       Mod_Die     -Module_BaseAddr
        &       Mod_Service -Module_BaseAddr
        &       Mod_Title   -Module_BaseAddr
        &       Mod_HelpStr -Module_BaseAddr
        &       Mod_HC_Table-Module_BaseAddr
        &       0				; SWI base
        &       0				; SWI handler
        &       0				; SWI table
        &       0                               ; no swi name decode entry

Mod_Title
        =       "SoakTest", 0

Mod_HelpStr
        =       "SoakTest", TAB, "1.02 (28 Oct 1996) (MPEG 2 variant)", 0
        ALIGN

Mod_HC_Table
        Command SoakTest, 0, 0
	Command Bootstrap, 0, 0
        =       0

SoakTest_Help
	=	"*SoakTest performs a soak test", CR

SoakTest_Syntax
        =       "Syntax: *SoakTest", 0

Bootstrap_Help
	=	"*Bootstrap performs a parallel port bootstrap", CR
Bootstrap_Syntax
	=	"Syntax: *Bootstrap", 0
        ALIGN

; **************************************************************************
;
;       Mod_Init - Initialisation entry
;

Mod_Init Entry
        LDR     r2, [r12]               ; have we got workspace yet ?
        TEQ     r2, #0
        BNE     %FT05

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =Module_WorkspaceSize
        SWI     XOS_Module
        EXIT    VS

; r2 -> workspace

        STR     r2, [r12]               ; save address in my workspace pointer,
                                        ; so Tutu can free it for me when I die
05
        MOV     r12, r2

 [ StandAlone
	ADRL	r0, resourcefsfiles
	SWI	XResourceFS_RegisterFiles   ; ignore errors (starts on Service_ResourceFSStarting)
 ]

; nothing else to do here now

        CLRV
        EXIT

; **************************************************************************
;
;       Mod_Die - Die entry
;

Mod_Die	Entry
 [ StandAlone
	ADRL	r0, resourcefsfiles
	SWI	XResourceFS_DeregisterFiles
 ]
	CLRV
	EXIT

; **************************************************************************
;
;       Mod_Service - Main entry point for services
;
; in:   R1 = service reason code
;
; out:  R1 = 0 if we claimed it
;

Mod_Service ROUT
	TEQ	r1, #Service_PostInit
	MOVNE	pc, lr

	LDR     wp, [r12]
	Entry   "r0-r6"
	BL	CheckForSoakConnector
	CMP	r0, #1
	BHI	%FT20
	BEQ	%FT10
	EXIT

; do soak test

10
	BL	SoakTestWPEntry
	EXIT

; do parallel port bootstrap

20
        BL      BootstrapWPEntry
	EXIT

; **************************************************************************
;
;	CheckForSoakConnector
;
; in:	-
; out:	r0 = 0 => no soak test connector
;	r0 = 1 => digital joystick ID, bits 1..3, 8..11 low, bit 0 low => perform soak test
;	r0 = 2 => digital joystick ID, bits 1..3, 8..11 low, bit 0 high => perform bootstrap from parallel interface
;

CheckForSoakConnector Entry "r1-r3"
	LDR	lr, =IOMD_Base
 [ PokeCLINES
	MOV	r0, #&79
	STRB	r0, [lr, #IOMD_CLINES]				; OS does not yet set up ID pins as inputs, so we do it
 ]
	LDRB	r0, [lr, #IOMD_CLINES]
	AND	r0, r0, #2_01100000				; extract bits 5 and 6
	TEQ	r0, #0						; for digital joystick, bits 5 and 6 are both zero
	MOVNE	r0, #0						; if not, then return zero, ie nothing special
	EXIT	NE

	MOV	r0, #Podule_ReadInfo_EASILogical
	ADR	r1, EASISpaceAddress				; workspace to dump value
	MOV	r2, #4						; length of workspace
	MOV	r3, #0						; podule 0
	SWI	XPodule_ReadInfo

	MOVVS	r0, #0						; if VS then can't find joystick hardware, so return zero
	EXIT	VS

	LDR	r0, EASISpaceAddress
 [ MPEG2
	ADD	r0, r0, #&00600000
 |
	ADD	r0, r0, #&00C00000				; point at IR + joystick stuff
 ]
	LDR	r1, [r0, #4]					; read it once to latch it
	LDR	r1, [r0, #4]					; and again to get the latched value
	TST	r1, #&0F00					; bits 11..8 must be low (all directions down, stick 2)
	TSTEQ	r1, #&000E					; and bits 3..1 must be low (R, L, D down, stick 1)
	MOVNE	r0, #0
	EXIT	NE

	AND	r0, r1, #1					; extract bit 0 (low => return 1, high => return 2)
	ADD	r0, r0, #1
	EXIT


; **************************************************************************
;
;	SoakTest_Code - Decide on MPEG or non-MPEG soaktest and do it

SoakTest_Code
	LDR	wp, [r12]

SoakTestWPEntry Entry "r7-r11"

SoakTestInternalEntry
 [ :LNOT: MPEG2
	MOV	r3, #0						; Get podule header for podule 0
        ADR     r2, PoduleBuffer
	SWI	XPodule_ReadHeader
	BVS	SoakTestNonMPEG					; nothing in podule 0; do non-MPEG soaktest
        LDRB    r0, [r2, #3]
        LDRB    r1, [r2, #4]
        ORR     r0, r0, r1, LSL #8				; r0 holds podule product type
	LDR	r1, =ProdType_STB2_MPEG1
	CMP	r0, r1
	BNE	SoakTestNonMPEG					; not a STB2 w/ MPEG1; do non-MPEG soaktest
;	Fall through to MPEG soaktest
 ]

; **************************************************************************
;
;	SoakTestMPEG - Routine to perform soak test (MPEG version)

SoakTestMPEG
 [ :LNOT: MPEG2
	ADR	r0, ReInitVideoString
	SWI	XOS_CLI
	ADRVC	r0, ReInitAudioString
	SWIVC	XOS_CLI
	EXIT	VS
 ]

	BL	TurnSCARTOn
 [ UseSTBStateModule
	MOV	r0, #0						; prevent watchdog timer from resetting computer
	SWI	XSTBState_Control
 ]

	ADR	r0, RunSoakTestCommand
	SWI	XOS_CLI

	EXIT

RunSoakTestCommand
	=	"Run Resources:$.Apps.!SoakTest", 0
	ALIGN

 [ :LNOT: MPEG2
; **************************************************************************
;
;	SoakTestNonMPEG - Routine to perform soak test (non-MPEG version)

SoakTestNonMPEG
	BL	TurnSCARTOn
 [ UseSTBStateModule
	MOV	r0, #0						; prevent watchdog timer from resetting computer
	SWI	XSTBState_Control
 ]

	BL	BoxType
	ADRNE	r0, ScreenInitStringPAL
	MOVNE	r1, #ScreenInitStringPALEnd - ScreenInitStringPAL
	ADREQ	r0, ScreenInitStringNTSC
	MOVEQ	r1, #ScreenInitStringNTSCEnd - ScreenInitStringNTSC
	SWI	XOS_WriteN

	SWI	XOS_ReadMonotonicTime
	MOV	r8, r0

; now enter main loop

10
	SWI	XOS_ReadEscapeState				; check for ESCAPE
	BCS	%FT95						; and bomb out if we get it

	TEQP	pc, #0
	MOV	r0, r0
	SWI	XOS_EnterOS

	SWI	XOS_ReadMonotonicTime
	CMP	r0, r8
	ADDPL	r8, r0, #200					; if time to beep, then add on 2 seconds
	SWIPL	XOS_WriteI+7					; and beep

	MOV	r2, #100					; divide by 100 to get it in seconds
	DivRem	r1, r0, r2, r3					; r1 = time in seconds
	TST	r1, #1
	ADREQ	r6, SoakEvenStruct
	ADRNE	r6, SoakOddStruct

 [ UseSTBStateModule
	AND	r0, r1, #1					; r0 = 0 or 1
	ADD	r0, r0, #1					; r0 = 1 or 2
	SWI	XSTBState_Control				; update LED status
 |
 	LDR	r0, [r6], #4
	MOV	r1, #IOMD_Base
	STRB	r0, [r1, #IOMD_CLINES]				; update LED status
 ]

	MOV	r0, #SpriteReason_PutSpriteScaled :OR: &200
	LDR	r1, [r6]					; r1 -> sprite area
	ADD	r1, r1, r6
	ADD	r2, r1, #16					; r2 -> sprite
	MOV	r3, #32						; r3 = xcoord
	BL	BoxType
	MOVNE	r4, #0						; r4 = ycoord (PAL)
	MOVEQ	r4, #-48					; r4 = ycoord (NTSC)
	MOV	r5, #0						; plot action = overwrite
	ADR	r6, SpriteScaleFactors
	ADR	r7, SpriteTranslationTable
	SWI	XOS_SpriteOp
	B	%BT10

	LTORG

95
	MOV	r0, #&7E
	SWI	XOS_Byte					; acknowledge Escape
	CLRV
99
 [ UseSTBStateModule
	MOV	r0, #0						; LEDs off
	SWI	XSTBState_Control
 ]
	EXIT

SoakEvenStruct ROUT
 [ :LNOT: UseSTBStateModule
	&	LEDs_RedNotGreen
 ]
10
	&	SoakSpriteArea - %BT10

SoakOddStruct ROUT
 [ :LNOT: UseSTBStateModule
	&	LEDs_GreenNotRed
 ]
10
	&	TestSpriteArea - %BT10

ScreenInitStringPAL
	=	22, 50						; select mode 50 - 768 x 576 (16bpp)
	=	23, 1, 0, 0, 0, 0, 0, 0, 0, 0                   ; turn cursor off
ScreenInitStringPALEnd

ScreenInitStringNTSC
	=	22, 55						; select mode 55 - 768 x 480 (16bpp)
	=	23, 1, 0, 0, 0, 0, 0, 0, 0, 0                   ; turn cursor off
ScreenInitStringNTSCEnd

SpriteScaleFactors
	&	32, 32, 1, 1

SpriteTranslationTable
	=	&ff, &fd, &ab, &a9, &57, &55, &03, &00
	=	&90, &3e, &30, &0c, &be, &24, &2f, &e3

SoakSpriteArea
	&	SoakSpriteAreaEnd - SoakSpriteArea
	BIN	"Sprites.Soak.4bpp"
	ALIGN
SoakSpriteAreaEnd

TestSpriteArea
	&	TestSpriteAreaEnd - TestSpriteArea
	BIN	"Sprites.Test.4bpp"
	ALIGN
TestSpriteAreaEnd

 ] ; :LNOT: MPEG2

; **************************************************************************
;
;	Bootstrap_Code - Routine to perform parallel port bootstrap

Bootstrap_Code Entry "r7-r11"
	LDR	wp, [r12]
BootstrapInternalEntry

	BL	TurnSCARTOn

	SWI	XOS_WriteI+22
	SWIVC	XOS_WriteI+0
	EXIT	VS

	MOV	r1, #0				; parallel stream not open at the moment

RestartBootstrap
	SWI	XOS_ReadEscapeState
	EXIT	CS

	SWI	XOS_WriteS
	=	"Parallel bootstrap starting...", 10, 13, 0
	ALIGN

	TEQ	r1, #0				; is stream already open?
	BNE	%FT05				; if so then skip this

	DLINE	"Opening Parallel stream"

	ADRL	r0, CloseDevices
	SWI	XOS_CLI

	MOV	r0, #OSFind_ReadFile
	ADRL	r1, ParallelFilename
	SWI	XOS_Find
	EXIT	VS

	MOV	r1, r0
05
	ADR	r10, PTHeaderString

	STR	r13, StackPtr

	SWI	XOS_ReadMonotonicTime
	ADD	r11, r0, #Timeout_BGET
	MOVS	r8, #0				; no RMA block claimed yet, and set EQ
	MOV	r7, #0				; offset in PTHeaderString to compare
10
	BL	GetByte				; get byte from string
12
	LDRB	r9, [r10, r7]
	TEQ	r0, r9
	BEQ	%FT20				; [character matches]

; no match, so reset to beginning

	TEQ	r7, #0				; were we checking first char?
	BEQ	%BT10				; if so, then get another byte and wait for first char
	MOV	r7, #0				; if not, then recheck against first char
	B	%BT12				; without getting another char from port

; there is a match

20
	ADD	r7, r7, #1			; advance position in string
	TEQ	r7, #PTHeaderStringEnd - PTHeaderString ; have we got to end?
	BNE	%BT10				; no, then carry on

	SWI	XOS_WriteS
	=	"Read "
PTHeaderString
        =	PTHeader
PTHeaderStringEnd
	=	" string...", 10, 13, 0
	ALIGN

	BL	GetWord
	MOV	r6, r0
	DREG	r6, "Module length = &"

	MOV	r0, #ModHandReason_Claim
	MOV	r3, r6
	SWI	XOS_Module
	BVS	%FT90

	DLINE	"Reading module data", cc

	MOV	r8, r2				; r8 -> module block
	MOV	r7, #0				; current offset in module block
	MOV	r5, #0				; checksum
	MOV	r4, #0				; ROR position in checksum
30
	TST	r7, #&FF
	SWIEQ	XOS_WriteI+"."			; print a dot every 256 bytes

	BL	GetByte
	STRB	r0, [r8, r7]
	ADD	r5, r5, r0, ROR r4
	SUBS	r4, r4, #8			; in sequence ROR by 0, 24, 16, 8
	MOVMI	r4, #24

	ADD	r7, r7, #1
	CMP	r7, r6
	BCC	%BT30

; we've received all the data, now read the checksum

	SWI	XOS_NewLine
	DLINE	"Received all data, reading checksum"

	BL	GetWord
	TEQ	r0, r5
	BNE	%FT50				; [checksum incorrect]

	DLINE	"Checksum correct, closing parallel stream"

	MOV	r0, #0
	SWI	XOS_Find			; close parallel stream

	DLINE	"Initialising module"

	MOV	r0, #ModHandReason_AddArea
	MOV	r1, r8
	SWI	XOS_Module
	MOV	r1, #0				; indicate stream not open
	BVS	%FT40				; [module failed to initialise]

	DLINE	"Module initialised OK, looking for another one"
	MOV	r8, #0				; indicate no block claimed from RMA
	B	RestartBootstrap

; module returned error in init

40
	DLINE	"Module returned error '", cc
	ADD	r0, r0, #4
	SWI	XOS_Write0
	DLINE	"' from initialisation, restarting"
	B	RestartAfterError

; checksum was incorrect

50
	DLINE	"Checksum incorrect"
RestartAfterError
	LDR	r13, StackPtr
	TEQ	r8, #0				; if we have a block claimed from RMA
	BNE	%FT52
	MOV	r0, #ModHandReason_Free
	MOV	r2, r8
	SWI	XOS_Module
	MOV	r8, #0
52
	B	RestartBootstrap

90
	DLINE	"Failed to allocate RMA block for module"
	B	RestartAfterError


BootstrapWPEntry ALTENTRY
	B	BootstrapInternalEntry

GetWord Entry "r2"
	BL	GetByte
	MOV	r2, r0
	BL	GetByte
	ORR	r2, r2, r0, LSL #8
	BL	GetByte
	ORR	r2, r2, r0, LSL #16
	BL	GetByte
	ORR	r0, r2, r0, LSL #24
	EXIT

GetByte Entry "r2"
10
	MOV	r0, #OSArgs_EOFCheck
	SWI	XOS_Args
	BVS	%FT90				; EOF check returned error
	TEQ	r2, #0
	BEQ	%FT20

; EOF, so no characters waiting, check timeout

	SWI	XOS_ReadMonotonicTime
	CMP	r0, r11				; have we timed out?
	BMI	%BT10				; [no, so loop]

	DLINE	"BGET timeout, restarting"
	B	RestartAfterError

20
	SWI	XOS_ReadMonotonicTime		; reset timeout value
	ADD	r11, r0, #Timeout_BGET

	SWI	XOS_BGet
	EXIT	VC

	DLINE	"OS_BGet returned error, restarting"
	B	RestartAfterError

90
	DLINE	"OS_Args EOF check returned error, restarting"
	B	RestartAfterError

ParallelFilename
	=	"Parallel:", 0
CloseDevices
	=	"Devices:Close", 0
	ALIGN

; **************************************************************************
;
;	TurnSCARTOn - Enable SCART signals so we can see something
;

TurnSCARTOn Entry "r0-r2"
 [ UseSTBStateModule
	SWI	XSTBState_On		; try to use STB State module if present
	EXIT	VC
 ]
	MOV	r0, #CardControlReason_UpdateControlRegister
	MOV	r1, #UpdateControlRegister_CTRL0 :OR: UpdateControlRegister_CTRL1 ; EOR mask
	MVN	r2, r1 ; AND mask = NOT EOR mask
	SWI	XMPEGVideo_CardControl
	CLRV	; ignore errors for now
	EXIT


; **************************************************************************
;
;	BoxType - Find out box type from configured mode.
;
;       out: registers preserved. Flags: Z clear = PAL, Z set = NTSC
;
BoxType	Entry "r0-r2"
	MOV	r0, #ReadCMOS
	MOV	r1, #WimpModeCMOS
	SWI	XOS_Byte
	CMP	r2, #55
	EXIT


; **************************************************************************
;
;       Message stuff


 [ international
CopyError ENTRY "r1-r7"
        BL      open_messagefile
        EXIT    VS
        ADR     r1, MessageFile_Block
        MOV     r2, #0
        LDR     r4, [sp]        ; R1 (parameter) -> R4
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

message_filename
        DCB     "Resources:$.Resources.SoakTest.Messages", 0
        ALIGN

open_messagefile ENTRY "r0-r2"
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    NE
        ADR     r0, MessageFile_Block
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r0, #1
        STR     r0, MessageFile_Open
        EXIT

write_r0_message ENTRY "r0-r7"
        BL      open_messagefile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r1, r0
        ADR     r0, MessageFile_Block
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        STRVS   r0, [sp]
        EXIT    VS
10      LDRB    r0, [r2], #1
        CMP     r0, #" "
        SWICS   XOS_WriteC
        STRVS   r0, [sp]
        EXIT    VS
        BCS     %B10
        SWI     XOS_NewLine
        EXIT
 ]

 [ StandAlone
        MACRO
$lab    MyFileR $name
$lab    ResourceFile Resources.!SoakTest.$name, Apps.!SoakTest.$name
        MEND

        MACRO
$lab    MyFileM $name
$lab    ResourceFile MPEG.$name, Apps.!SoakTest.$name
        MEND

resourcefsfiles
	MyFileR !Run
	MyFileR !RunImage
	MyFileR !Sprites
	MyFileM AudioHi
	MyFileM AudioLo
	MyFileR SetupPAL
	MyFileR SetupNTSC
	MyFileM Soak
	MyFileM Test
	&	0
 ]

	InsertDebugRoutines

        END
