/* >c.Sound

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    20 Mar 97       BAR     Initial writing
1.01    08 May 97       BAR     Correct mistake in makeing a sound, added 6
                                sec wait when in life mode.
1.02    20 May 97       BAR     Ensure sound muted at end of test.
1.03    21 May 97       BAR     Added support for coloued messages.
1.04    22 Sep 97       BAR     Added support for daytona's BUZZER sound
                                system
1.05    06 Oct 97       BAR     Correct mistakes in #ifdefs
1.06    03 Nov 97       BAR     Correct mistakes in message selection and
                                loop control.

Will perform the sound test !!????
*/

#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "sound.h"
#include "display.h"
#include "msgs.h"

/*
 * Perform the sound test
 * On systems with a real audio system, the left then right audio channels
 * will be tested seperatly, by means of the system bleep.
 * On a Daytona make the buzzer sound
 */
void sound_test(int mode)
{
        int status = FAILED;
        int channel = AUDIO_CH_LEFT;

        display_status(AUDIO,RUNNING);

        set_forground_colour(COLOUR_TEXT);

        do{
                /* LEFT Channel */
                set_forground_colour(COLOUR_TEXT);
                display_info(sound_test_msg[channel]);
                if (mode==MODE_USER){
                        /* tell user what to do */
                        display_instruction(YESNO_INST_LINE,general_msg[02]);
                }
/* We cannot use stero commands on Daytona */
#ifndef MACHDaytona
                set_stereo( (channel==AUDIO_CH_LEFT) ? STEREO_LHS : STEREO_RHS );
#endif
                status=play_wait_key(mode);
                clear_info();
                clear_line(YESNO_INST_LINE);

                /* Increment the channel pointer */
                channel++;

        }while ((status != FAILED) && (channel < AUDIO_CHANNELS));

        if (mode==MODE_USER){
                /* Report what the user said the status is  */
                display_status(AUDIO,status);
                log_status(AUDIO,status);
        }else{
                /* show that we completed and ASSUME PASSED */
                display_status(AUDIO,COMPLETED);
                log_status(AUDIO,PASSED);
        }
}

int play_wait_key(int mode)
/* play a note and wait for a good/bad key press */
{
        int ok=CONT;
        if (mode==MODE_USER){
                /* User mode - ask if ok */
                while(ok==CONT){
                    make_a_sound(200);
                    ok=get_yn_responce_timed(50);
                    /* rtn's TRUE for ok : FALSE for bad : CONT for carry on */
                }
        }else{
                /* Life mode - wait 5 Secs - exit */
                make_a_sound(500);
                wait(6);
                ok=PASSED;
        }
        mute_the_sound();
        return ok;
}

void set_stereo(int val)
/* set the sereo image */
{
        _kernel_swi_regs reg;
        reg.r[0] = 1;
        reg.r[1] = val;
        _kernel_swi(Sound_Stereo, &reg, &reg);
}

void make_a_sound(int duration)
/* make a beep, max vol, duration given in CSec's.
   The SWI call used, takes the duration in 5CSec blocks, so divide the
   duration by 5
 */
{
        _kernel_swi_regs reg;
#ifdef MACHDaytona
        reg.r[0] = 0;                   /* MUST be 0 */
        reg.r[1] = AUDIO_BUZZER_ON;     /* Turn it on. */
        reg.r[2] = duration;            /* Duration = as reqd. */
        _kernel_swi(0x4f7c1, &reg, &reg);  /* DaytonaHW_Buzzer */
#else
        reg.r[0] = 1;
        reg.r[1] = 0x017f;
        reg.r[2] = 0x4000;
        reg.r[3] = duration/5;
        _kernel_swi(Sound_Control, &reg, &reg);
#endif
}

void mute_the_sound()
/* mute the sound system
 */
{
        _kernel_swi_regs reg;
#ifdef MACHDaytona
        reg.r[0] = 0;                   /* MUST be 0 */
        reg.r[1] = AUDIO_BUZZER_OFF;    /* Turn it on. */
        reg.r[2] = 0;                   /* Duration = 0 = forever */
        _kernel_swi(0x4f7c1, &reg, &reg);  /* DaytonaHW_Buzzer */
#else
        reg.r[0] = 1;
        reg.r[1] = 0;
        reg.r[2] = 0;
        reg.r[3] = 0;
        _kernel_swi(Sound_Control, &reg, &reg);
#endif
}
