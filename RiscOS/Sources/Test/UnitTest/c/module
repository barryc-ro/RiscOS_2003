/* > module.c

TEST SOFTWARE (c) Element 14 Ltd. 1997-1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    18 Sep 97       BAR     Add this header.
1.01    02 Oct 97       BAR     ensure duration variables are of correct type.
1.02    07 Oct 97       BAR     Don't include RCA only headers.
1.03    05 Nov 97       BAR     Update to make the module run in User Mode
                                not supervisor mode.
1.04    11 Nov 97       BAR     Add trap for when there are no arguments
                                given.
1.05    24 Feb 99       SBF     Extended to allow (non-test) options to be specified
                                (fully backward compatible command line interface)

RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "Support.h"
#include "module.h"
#ifdef RCA
#include "storedinfo.h"
#else
#include "UnitTest.h"
#endif
#include "UserDiag.h"


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
        unittest_finalise( pw );

        return NULL;

        NOT_USED( fatal );
        NOT_USED( podule );
        NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
        return unittest_initialise( pw );

        NOT_USED( cmd_tail );
        NOT_USED( podule_base );
        NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *        Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
        _kernel_swi_regs reg;

        reg.r[0]=2;
        reg.r[1]=(int) MODULE_NAME;
        reg.r[2]=(int) arg_string;
        _kernel_swi(OS_Module, &reg, &reg);

        return NULL;

/*         NOT_USED( arg_string ); */
/*         NOT_USED( argc ); */
        NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
#ifdef RCA
        switch ( service_no )
        {
                case Service_Standby:
                        storedinfo_standby( r, pw );
                        break;

                case Service_ErrorStarting:
                        storedinfo_errorstarting( r, pw );
                        break;
        }
#endif
}


int main(int argc, char *argv[])
/*
 * Entered in user-mode with argc and argv
 * Check the command line arguments and react as reqd.
 *
 * Commands are ......
 *          UnitTest Single test_pattern [extra_options]
 *          UnitTest Cont   test_pattern stop_on_failure cycle_count duration [extra_options]
 * argv === 0        1      2            3               4           5        6
 * argc === 1        2      3            4               5           6        7
 */
{
        int args_ok=TRUE;
        int test_pattern=0;
        int extra_options=0;
        int stop_failure=0;
        int target_cycle=0;
        float target_duration=0;
        _kernel_swi_regs reg;
        int task_handle;


#if SYSSTB3
// STB3 needs to play video which only seems to work if we run it as a WIMP task rather than
// using a system call, so we initialise ourself with the WIMP.

        reg.r[0]=200;
        reg.r[1]=0x4b534154;
        reg.r[2]=(int)"Unit Test";
        reg.r[3]=NULL;
        _kernel_swi(Wimp_Initialise,&reg,&reg);
        task_handle=reg.r[1];
#endif

        /* Check that argc is >=2, otherwise we haven't been given any arguments */
        if (argc>=2){
                /* argv[0] is the module name so bin it. */
                /* argv[1] is the test mode ... switch on it */

                /* make the test mode argument is all lower case */
                strlwr(argv[1]);
                /* now validate it, if ok rtn test mode number, else rtn -1 */
                test_mode = validate_mode(argv[1]);

                switch (test_mode)
                {
                        case MODE_USER:
                                /* we've been asked to do USER_MODE testing */
                                /* Check that we have 1 or 2 ARGUMENTS (3 or 4 inc cmd and test mode) */
                                if ((argc != 3) && (argc != 4)){
                                        /* incorrect number of args */
                                        /* return an error ..... HOW !!!!!!! */
                                        printf("Incorrect number of arguments .....\n");
                                }else{
                                        /* Correct number of args ... check them */
                                        /* Its the test pattern int 0->2^32 - thus can't really check it */
                                        /* Additional features bit pattern 0->2^32 - thus can't really check this */
                                        test_pattern = atoi(argv[2]);
                                        if (argc > 3) extra_options = atoi(argv[3]); /* N.B. only if argument supplied */
                                        user_diag_test(MODE_USER, test_pattern, extra_options, 0, 1, 0);
                                }
                                break;

                        case MODE_LIFE:

                                if ((argc != 6) && (argc != 7)){
                                /* we've been asked to do LIFE_CYCLE testing */
                                /* Check that we have 4 or 5 ARGUMENTS (6 or 7 inc cmd and test mode) */
                                        /* incorrect number of args */
                                        /* return an error ..... HOW !!!!!!! */
                                        printf("Incorrect number of arguments .....\n");
                                }else{
                                        /* Correct number of args ... check them */
                                        /* Test pattern 0-2^32 - thus can't really check it */
                                        /* Stop on failure 0 or 1 */
                                        /* cycle count 0-999999 */
                                        /* duration 0-9999.99 */
                                        test_pattern = atoi(argv[2]);
                                        stop_failure = atoi(argv[3]);
                                        target_cycle = atoi(argv[4]);
                                        target_duration = atof(argv[5]);
                                        if (argc > 6) extra_options = atoi(argv[6]); /* N.B. only if argument supplied */

                                        if (stop_failure == 0){
                                                stop_failure=FALSE;
                                        }else{
                                                stop_failure=TRUE;
                                        }
                                        if ((target_cycle<0) && (target_cycle>999999)){
                                                /* target_cycle NOT in range */
                                                /* Report the error ... HOW */
                                                args_ok=FALSE;
                                        }else{
                                                /* target_cycle in range */
                                        }
                                        if ((target_duration<0) && (target_duration>9999.99)){
                                                /* target_cycle NOT in range */
                                                /* Report the error ... HOW */
                                                args_ok=FALSE;
                                        }else{
                                                /* target_duration in range */
                                        }
                                        if (args_ok!=FALSE){
                                                user_diag_test(MODE_LIFE, test_pattern, extra_options, stop_failure, target_cycle, target_duration);
                                        }
                                }
                                break;
                        case -1:
                                /* well the test mode given wasn't correct .... moan */
                                printf("'%s' is an invalid Test Mode name\n",argv[1]);
                                break;
                }
        }else{
                /* Insufficient arguments */
                printf("Syntax: UnitTest Single <Test Pattern> [Extensions Pattern]\n");
                printf("Syntax: UnitTest Cont <Test Pattern> <Stop On Failure> <Cycle Count> <Duration> [Extensions Pattern]\n");
        }
        return 1;

#if SYSSTB3
        reg.r[0] = task_handle;
        reg.r[1] = 0x4b534154;
        _kernel_swi(Wimp_CloseDown, &reg, &reg);
#endif
        return 0;
}
