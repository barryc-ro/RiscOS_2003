/* > storedinfo.c */

#include <stddef.h>
#include <ctype.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "nvram.h"
#include "standby.h"

#include "module.h"
#include "storedinfo.h"
#include "veneer.h"
#include "error.h"


static ERROR_STRUCT( BADPARM, "BadParm" );

static int OldMinsInOp, MinsInOp, FaultsIndex;
static volatile int Flags = 0;

fault_code storedinfo_faultsbuffer[STOREDINFO_FAULT_COUNT];


time_t
storedinfo_secsto1997( void )
{
	struct tm ct;

	ct.tm_sec = 0;
	ct.tm_min = 0;
	ct.tm_hour = 0;
	ct.tm_mday = 0;
	ct.tm_mon = 0;
	ct.tm_year = 97;
	ct.tm_isdst = 0;
	return mktime( &ct );
}


static _kernel_oserror *
SetCallback( void *pw )
{
	if ( !(Flags & STOREDINFO_CALLBACKSET_FLAG) )
	{
		/* Set callback to be called every minute. */
		_kernel_oserror *err = _swix( OS_CallEvery, _INR(0,2), 6000-1, veneer_storedinfo_callback, pw );
		if ( err == NULL )
		{
			int old_irqs = veneer_irqs_off();
			Flags |= STOREDINFO_CALLBACKSET_FLAG;
			veneer_irqs_on( old_irqs );
		}
		return err;
	}
	return NULL;
}


static void
CancelCallback( void *pw )
{
	/* Cancel callback if set. */
	if ( Flags & STOREDINFO_CALLBACKSET_FLAG )
	{
		int old_irqs;
		_swix( OS_RemoveTickerEvent, _INR(0,1), veneer_storedinfo_callback, pw );
		old_irqs = veneer_irqs_off();
		Flags &= ~STOREDINFO_CALLBACKSET_FLAG;
		veneer_irqs_on( old_irqs );
	}
}


static void
SetTransient( void *pw )
{
	if ( !(Flags & STOREDINFO_TRANSIENTSET_FLAG) )
	{
		if ( _swix(OS_AddCallBack, _INR(0,1), veneer_storedinfo_transient, pw) == NULL )
		{
			int old_irqs = veneer_irqs_off();
			Flags |= STOREDINFO_TRANSIENTSET_FLAG;
			veneer_irqs_on( old_irqs );
		}
	}
}


static void
CancelTransient( void *pw )
{
	if ( Flags & STOREDINFO_TRANSIENTSET_FLAG )
	{
		int old_irqs;
		_swix( OS_RemoveCallBack, _INR(0,1), veneer_storedinfo_transient, pw);
		old_irqs = veneer_irqs_off();
		Flags |= STOREDINFO_TRANSIENTSET_FLAG;
		veneer_irqs_on( old_irqs );
	}
}


static int
ValidCheckSum( char *buffer, int bufsz, int check )
{
	/* Checks the given checksum. */
	int sum = 1;
	while ( bufsz-- ) sum += *buffer++;
	sum = (sum + check) & 0xFF;
	return ( sum == 0 );
}


static int
CheckSum( char *buffer, int bufsz )
{
	/* Returns a check sum. */
	int sum = 0;
	while ( bufsz-- ) sum += *buffer++;
	return 0xFF & ~sum;
}


static _kernel_oserror *
CheckMinsInOp( void )
{
	/* Read and validate minutes in operation. */
	int nve, check;
	_kernel_oserror *err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_MINSINOP_TAG, &MinsInOp, 0, &nve );
	if ( (err == NULL) && (nve >= 0) )
	{
		err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_MINSINOPCHECK_TAG, &check, 0, &nve );
		if ( (err == NULL) && (nve >= 0) )
		{
			/* If checksum is invalid then initialise. */
			if ( !ValidCheckSum((char *)&MinsInOp, STOREDINFO_MINSINOP_SIZE, check) )
			{
				OldMinsInOp = -1;
				MinsInOp = 0;
				storedinfo_setminsinop();
			}
		}
	}
	return ( nve < 0 ) ? _swix( MessageTrans_ErrorLookup, _INR(0,3), ERROR(BADPARM), 0, 0, 0 ) : err;
}


static void
SetFaults( void )
{
	int check = CheckSum( (char *)storedinfo_faultsbuffer, STOREDINFO_FAULTS_SIZE );
	_swix( NVRAM_Write, _INR(0,2), STOREDINFO_FAULTS_TAG, storedinfo_faultsbuffer, STOREDINFO_FAULTS_SIZE );
	_swix( NVRAM_Write, _INR(0,2), STOREDINFO_FAULTSCHECK_TAG, &check, 0 );
	_swix( NVRAM_Write, _INR(0,2), STOREDINFO_FAULTSINDEX_TAG, &FaultsIndex, 0 );
}


static _kernel_oserror *
CheckFaults( void )
{
	/* Read and validate fault codes. */
	int nve, check;
	_kernel_oserror *err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_FAULTS_TAG,
						storedinfo_faultsbuffer, STOREDINFO_FAULTS_SIZE, &nve );
	if ( (err == NULL) && (nve >= 0) )
	{
		err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_FAULTSCHECK_TAG, &check, 0, &nve );
		if ( (err == NULL) && (nve >= 0) )
		{
			err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_FAULTSINDEX_TAG, &FaultsIndex, 0, &nve );
			if ( (err == NULL) && (nve >= 0) )
			{
				/* If checksum is invalid then initialise. */
				if ( !ValidCheckSum((char *)storedinfo_faultsbuffer, STOREDINFO_FAULTS_SIZE, check) )
				{
					memset( storedinfo_faultsbuffer, 0, STOREDINFO_FAULTS_SIZE );
					FaultsIndex = 0;
					SetFaults();
				}
			}
		}
	}
	return ( nve < 0 ) ? _swix( MessageTrans_ErrorLookup, _INR(0,3), ERROR(BADPARM), 0, 0, 0 ) : err;
}


static int
SetWarranty( int zero )
{
	time_t secsto1997 = storedinfo_secsto1997();	/* No. secs. to 1 Jan 1997. */
	time_t curr_time = time( NULL );		/* No. secs to now. */

	/* Check to see if we have a valid time. */
	if ( zero || (curr_time > secsto1997) )
	{
		int warranty = zero ? 0 : (curr_time - secsto1997 + 86399) / 86400;
		int check = CheckSum( (char *)&warranty, STOREDINFO_WARRANTY_SIZE );
		_swix( NVRAM_Write, _INR(0,2), STOREDINFO_WARRANTY_TAG, &warranty, 0 );
		_swix( NVRAM_Write, _INR(0,2), STOREDINFO_WARRANTYCHECK_TAG, &check, 0 );
		return 1;
	}
	return 0;
}


static _kernel_oserror *
CheckWarranty( void *pw )
{
	/* Read and validate warranty clock. */
	int nve, warranty, warrantycheck;
	_kernel_oserror *err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_WARRANTY_TAG, &warranty, 0, &nve );
	if ( (err == NULL) && (nve >= 0) )
	{
		err = _swix( NVRAM_Read, _INR(0,2)|_OUT(0), STOREDINFO_WARRANTYCHECK_TAG, &warrantycheck, 0, &nve );
		if ( (err == NULL) && (nve >= 0) )
		{
			/* If checksum is invalid then flag that it needs to be set	*/
			/* and set callback so that we can detect when the time is set.	*/
			if ( !ValidCheckSum((char *)&warranty, STOREDINFO_WARRANTY_SIZE, warrantycheck) )
                        {
				int old_irqs;
                                SetWarranty( 1 );
				old_irqs = veneer_irqs_off();
				Flags |= STOREDINFO_SETWARRANTY_FLAG;
				veneer_irqs_on( old_irqs );
                        }
		}
	}
	return ( nve < 0 ) ? _swix( MessageTrans_ErrorLookup, _INR(0,3), ERROR(BADPARM), 0, 0, 0 ) : err;
}


static _kernel_oserror *
SetSystemVar( char *var, char *val )
{
	return _swix( OS_SetVarVal, _INR(0,4), var, val, strlen(val), 0, 0 );
}


void
storedinfo_setminsinop( void )
{
	if ( MinsInOp != OldMinsInOp )
	{
		int check = CheckSum( (char *)&MinsInOp, STOREDINFO_MINSINOP_SIZE );
		_swix( NVRAM_Write, _INR(0,2), STOREDINFO_MINSINOP_TAG, &MinsInOp, 0 );
		_swix( NVRAM_Write, _INR(0,2), STOREDINFO_MINSINOPCHECK_TAG, &check, 0 );
	
		/* Remember old MinsInOp so we don't set the same value twice. */
		OldMinsInOp = MinsInOp;
	}
}


void
storedinfo_callback( _kernel_swi_regs *r, void *pw )
{
	/* Increment minutes count. */
	if ( Flags & STOREDINFO_COUNTING_FLAG )
		MinsInOp += 1;

	SetTransient( pw );
}


void
storedinfo_transient( _kernel_swi_regs *r, void *pw )
{
	int old_irqs, clear = STOREDINFO_TRANSIENTSET_FLAG;

	storedinfo_setminsinop();

	/* Try to set warranty clock if we need to. This won't work until we've	*/
	/* connected to a time server for the first time and the NC is in	*/
	/* operation (we wouldn't be here otherwise).				*/
	if ( Flags & STOREDINFO_SETWARRANTY_FLAG )
		if ( SetWarranty(0) ) clear |= STOREDINFO_SETWARRANTY_FLAG;

	if ( Flags & STOREDINFO_SETFAULTS_FLAG )
	{
		SetFaults();
		clear |= STOREDINFO_SETFAULTS_FLAG;
	}

	old_irqs = veneer_irqs_off();
	Flags &= ~clear;
	veneer_irqs_on( old_irqs );

	NOT_USED( r );
	NOT_USED( pw );
}


void
storedinfo_standby( _kernel_swi_regs *r, void *pw )
{
	int old_irqs;

	/* If going into standby then cancel callback else set it. */
	if ( r->r[0] & STANDBY_SHUTDOWN_FLAG )
	{
		old_irqs = veneer_irqs_off();
		Flags &= ~STOREDINFO_COUNTING_FLAG;
		veneer_irqs_on( old_irqs );
		CancelCallback( pw );
	}
	else
	{
		old_irqs = veneer_irqs_off();
		Flags |= STOREDINFO_COUNTING_FLAG;
		veneer_irqs_on( old_irqs );
		SetCallback( pw );
	}
}


void
storedinfo_errorstarting( _kernel_swi_regs *r, void *pw )
{
	int old_irqs;
	/* Copy the bytes we are interested in into the faults buffer and write to NVRAM. */
	memcpy( (char *)storedinfo_faultsbuffer + FaultsIndex * STOREDINFO_FAULT_SIZE, (char *)r->r[2], STOREDINFO_FAULT_SIZE );
	FaultsIndex = (FaultsIndex + 1) & STOREDINFO_FAULTINDEX_MASK;
	old_irqs = veneer_irqs_off();
	Flags |= STOREDINFO_SETFAULTS_FLAG;
	veneer_irqs_on( old_irqs );
	SetTransient( pw );
}


_kernel_oserror *
storedinfo_initialise( void *pw )
{
	/* Set system variables to allow our commands to be run from HTML. */
	_kernel_oserror *err = SetSystemVar( "Alias$URLOpenCLI_ServiceTestSingle", "ServiceTestSingle %*0" );
	if ( err == NULL ) err = SetSystemVar( "Alias$URLOpenCLI_ServiceTestCont", "ServiceTestCont %*0" );

	/* Read and check stored information. */
	if ( err == NULL ) err = CheckMinsInOp();
	if ( err == NULL ) err = CheckFaults();
	if ( err == NULL ) err = CheckWarranty( pw );
	
	/* If not in standby mode then set callback for minute count. */
	if ( err == NULL )
	{
		int state;
		err = _swix( Standby_State, _IN(0)|_OUT(0), 0, &state );
		if ( (err == NULL) && !(state & STANDBY_SHUTDOWN_FLAG) )
		{
			Flags |= STOREDINFO_COUNTING_FLAG;
			SetCallback( pw );
		}
	}
	return err;
}


void
storedinfo_finalise( void *pw )
{
	/* Cancel any pending callbacks. */
	CancelCallback( pw );
	CancelTransient( pw );
}
