/* >c.LEDTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1998

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    12 Mar 98       RLT     Created.
1.01    16 Mar 98       RLT     Modified to use display functions and to
                                import message strings from msgs.c

*/

#include <stdio.h>
#include "swis.h"
#include "ledtest.h"
#include "daytonahw.h"
#include "support.h"
#include "msgs.h"
#include "display.h"


#define _ledoff(x) (_swix(DaytonaHW_LED,_INR(0,4),0,x,0,0,0))
#define _ledflash(x,y,z) (_swix(DaytonaHW_LED,_INR(0,4),0,x,0,y,z))

#define _LEDRED    0
#define _LEDYELLOW 1
#define _LEDGREEN  2


void ledwait (unsigned int endtime)
{
    unsigned int currenttime;

    _swix (OS_ReadMonotonicTime, _OUT (0), &currenttime);
    endtime += currenttime;
    do
    {
        _swix (OS_ReadMonotonicTime, _OUT (0), &currenttime);
    } while (currenttime < endtime);
}

void ledtest (int mode, int cycle_status)
{
    int led;
    int ok = CONT;
    int status = PASSED;

    display_status (LEDCHECK, RUNNING);

    for (led = _LEDRED; led <= _LEDGREEN; led++)
    {
        _ledoff (led);                                  /* switch off all leds */
    }

    for (led = _LEDRED; led <= _LEDGREEN; led++)        /* cycle around for all leds */
    {
        _ledflash (led, 10, 10);                        /* flash led with a 10cs/10cs on/off time */

        if (mode == MODE_LIFE)
        {
            ledwait (200);
        }
        else
        {
            display_info (led_test_msg[led]);
            display_instruction (YESNO_INST_LINE, general_msg[02]);
            while (ok == CONT)
            {
                ok = get_yn_responce_timed (50);
            }
            clear_line (YESNO_INST_LINE);
            dec_info_line ();
            clear_line (info_line);

            if ((ok == FAILED) && (status == PASSED))
            {
                status = FAILED;
            }
            ok = CONT;
        }
        _ledoff (led);                                  /* and then switch it off before doing next led */
    }
    display_status_led (mode, cycle_status);

    if (mode == MODE_LIFE)
    {
        display_status (LEDCHECK, COMPLETED);
    }
    else
    {
        display_status (LEDCHECK, status);
    }
    log_status (LEDCHECK, status);
}
