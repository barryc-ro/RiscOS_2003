/* > NVRAMTags.c

TEST SOFTWARE (c) Pace Micro Technology PLC. 1997-2000

************************** CHANGE LIST *********************************

Vers    Date            Name     Comment
------  ---------       ---      ---------------------------------------
1.00    19 Oct 00       RLT      Created.
1.01    25 Oct 00       RLT      Added check for DefaultTimeZone tag, and
                                 finally put some comments in the code.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include "swis.h"
#include "NVRAM.h"        /* for SWI NVRAM_Read */

#include "support.h"
#include "display.h"
#include "msgs.h"


#ifdef USERIFLazarus

/*
 * Function prototyping
 */

int check_values(void);
char *read_nvram(char *tag);

/*
 * Test entry point (called from UserDiag.c)
 */

void nvram_tag_test(void)
{
  int status = FAILED;

  display_status(NVRAM_TAGS, RUNNING);
  status = check_values();
  display_status(NVRAM_TAGS, status);
  log_status(NVRAM_TAGS, status);
}

/*
 * Read the defined tags from the NVRAM, and display them to the screen for
 * the user to decide whether they're correct or not.
 */

int check_values(void)
{
  int ok = FAILED;
  char *infoline = NULL;
  char *str = NULL;

  infoline = malloc(80);
  if (!infoline)
  {
    /* can't allocate memory */
    return FAILED;
  }

  sprintf(infoline, "ModemCountry: %s", (str = read_nvram("ModemCountry")));
  display_info(infoline);
  free(str);
  sprintf(infoline, "DefaultTerritory: %s", (str = read_nvram("DefaultTerritory")));
  display_info(infoline);
  free(str);
  sprintf(infoline, "DefaultCountry: %s", (str = read_nvram("DefaultCountry")));
  free(str);
  display_info(infoline);
  sprintf(infoline, "DefaultTimeZone: %s", (str = read_nvram("DefaultTimeZone")));
  display_info(infoline);
  free(str);

  display_info("Are these defaults correct?");
  display_instruction(YESNO_INST_LINE, general_msg[02]);
  ok = get_yn_responce_forever();
  display_refresh();

  free(infoline);

  return ok;
}

/*
 * Read the given tag in NVRAM, and return a pointer to its contents in
 * char form (ints are converted).
 *
 * If no memory could be allocated, NULL is returned.
 */

char *read_nvram(char *tag)
{
  char *buffer = NULL;
  int rv, val;
  char *str = NULL;

  buffer = malloc(80);
  if (!buffer)
  {
    /* can't allocate memory */
    return NULL;
  }

  str = malloc(80);
  if (!str)
  {
    /* can't allocate memory */
    return NULL;
  }

  _swix(NVRAM_Read, _IN(0)|_IN(1)|_IN(2)|_OUT(0), tag, buffer, sizeof(buffer), &rv);


  if (strcmp(tag, "DefaultTerritory") == 0)
  {
    /* The default territory value is stored EORed 1 in NVRAM, so un EOR */
    /* it...                                                             */
    val = (int)*buffer^1;
  }
  else
  {
    val = (int)*buffer;
  }

  if (strcmp(tag, "DefaultTimeZone") == 0)
  {
    /* Time zones are different to the other default tags (i.e. they're not countries) */
    bool behind = false;
    int hours = 0, minutes = 0;

    if (val > 200)
    {
      behind = true;
      val = 256 - val;     /* make the time zone positive */
    }
    hours = val / 4;     /* calculate hours */
    minutes = val % 4;   /* calculate minutes */
    switch (minutes)
    {
      case 1: minutes = 15; break;
      case 2: minutes = 30; break;
      case 3: minutes = 45; break;
      default: minutes = 0; break;
    }
    sprintf(str, "%c%d:%d", (behind == true ? '-' : '+'), hours, minutes);
  }
  else
  {
    _swix(Territory_NumberToName, _IN(0)|_IN(1)|_IN(2), val, buffer, sizeof(buffer));
    sprintf(str, "%d (%s)", val, buffer);
  }
  free(buffer);
  return str;
}

#endif
