/* > NVRAMTags.c

TEST SOFTWARE (c) Pace Micro Technology PLC. 1997-2000

************************** CHANGE LIST *********************************

Vers    Date            Name     Comment
------  ---------       ---      ---------------------------------------
1.00    19 Oct 00       RLT      Created.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "support.h"
#include "display.h"
#include "msgs.h"


#ifdef USERIFLazarus

#define NVRAM_Read 0x4ee00



int check_values(void);
char *read_nvram(char *tag);



void nvram_tag_test(void)
{
  int status = FAILED;

  display_status(NVRAM_TAGS, RUNNING);
  status = check_values();
  display_status(NVRAM_TAGS, status);
  log_status(NVRAM_TAGS, status);
}

int check_values(void)
{
  int ok = FAILED;
  char *infoline;
  char *str;

  infoline = (char *)malloc(80);


  sprintf(infoline, "ModemCountry: %s", (str = read_nvram("ModemCountry")));
  display_info(infoline);
  free(str);
  sprintf(infoline, "DefaultTerritory: %s", (str = read_nvram("DefaultTerritory")));
  display_info(infoline);
  free(str);
  sprintf(infoline, "DefaultCountry: %s", (str = read_nvram("DefaultCountry")));
  display_info(infoline);
  free(str);
  free(infoline);
  display_info("Are these defaults correct?");
  display_instruction(YESNO_INST_LINE, general_msg[02]);
  ok = get_yn_responce_forever();
  display_refresh();

  return ok;
}

char *read_nvram(char *tag)
{
  char *buffer;
  int rv, val;
  char *str;

  buffer = (char *)malloc(80);
  if (!buffer)
  {
    /* can't allocate memory */
    return NULL;
  }

  _swix(NVRAM_Read, _IN(0)|_IN(1)|_IN(2)|_OUT(0), tag, buffer, sizeof(buffer), &rv);

  if (strcmp(tag, "DefaultTerritory") == 0)
  {
    /* The default territory value is stored EORed 1 in NVRAM, so un EOR */
    /* it...                                                             */
    val = (int)*buffer^1;
  }
  else
  {
    val = (int)*buffer;
  }

  _swix(Territory_NumberToName, _IN(0)|_IN(1)|_IN(2), val, buffer, sizeof(buffer));

  str = malloc(sizeof(buffer) + 3);
  if (str)
  {
    sprintf(str, "%d (%s)", val, buffer);
  }
  free(buffer);
  return str;
}

#endif
