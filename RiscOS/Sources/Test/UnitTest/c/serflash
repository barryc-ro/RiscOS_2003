/* > serflash.c

TEST SOFTWARE (c) Element 14 Ltd. 1998-1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00	28 Jan 98	RLT	Created

*/


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "kernel.h"
#include "serflash.h"

#include "support.h"
#include "display.h"


int check_serialflash (void);


void serial_flashtest (void)
{
    int return_code = FAILED;

    display_status (SERIALFLASH, RUNNING);
    return_code = check_serialflash ();
    display_status (SERIALFLASH, return_code);
    log_status (SERIALFLASH, return_code);
}


int check_serialflash (void)
{
    int	page,
	byte,
	status,
        errors = 0,
        location,
        flash_pages = 2048,
        page_size   = 264;
    unsigned int seed;
    char *page_block;
    _kernel_swi_regs in,
                     out;
    _kernel_oserror  *e;

    page_block = (char *) malloc (page_size);			/* Create a buffer to hold page */
    if (page_block)						/* data in */
    {
        seed = ((unsigned int) time ((time_t *) NULL));		/* Psuedo-random number seed */

        for (page = 0; page < flash_pages; page++)
        {
            srand (page + seed);				/* Re-seed */

            for (byte = 0; byte < page_size; byte++)
            {
                page_block[byte] = (char) ((rand () % 255));	/* Fill page buffer */
            }
            do
            {
                in.r[0] = 0;
                e = _kernel_swi (SerialFlash_DeviceStatus, &in, &out);
                if (e)
                {
                    debug printf ("ERROR: SerialFlash_DeviceStatus\n");
                    debug printf ("--> %s\n", e -> errmess);
                    return Error_DeviceNotReady;
                }
                status = out.r[1];
            } while ((status & 0x80) != 0x80);

            in.r[0] = 0;
            in.r[1] = page;
            in.r[2] = (int) page_block;
            in.r[3] = page_size;
            e = _kernel_swi (SerialFlash_WritePage, &in, &out);
            if (e)
            {
                debug printf ("ERROR: SerialFlash_WritePage\n");
                debug printf ("--> %s\n", e -> errmess);
                return Error_CantWritePage;
            }
            debug printf ("Writing to page %d\n", page);
        }

        for (page = 0; page < flash_pages; page++)
        {
            srand (page + seed);				/* Re-seed */

            do
            {
                in.r[0] = 0;
                e = _kernel_swi (SerialFlash_DeviceStatus, &in, &out);
                if (e)
                {
                    debug printf ("ERROR: SerialFlash_DeviceStatus\n");
                    debug printf ("--> %s\n", e -> errmess);
                    return Error_DeviceNotReady;
                }
                status = out.r[1];
            } while ((status & 0x80) != 0x80);

            in.r[0] = 0;
            in.r[1] = page;
            in.r[2] = (int) page_block;
            in.r[3] = page_size;
            e = _kernel_swi (SerialFlash_ReadPage, &in, &out);
            if (e)
            {
                debug printf ("ERROR: SerialFlash_ReadPage\n");
                debug printf ("--> %s\n", e -> errmess);
                return Error_CantReadPage;
            }
            for (byte = 0; byte < page_size; byte++)
            {
                location = (int) page_block[byte];
                if (location != (rand () % 255))
                {
                    errors += 1;
                }
            }
            debug printf ("Reading from page %d\n", page);
        }

        debug printf ("Erasing serial flash\n");
        system ("call:Run Resources:$.Test.FlashErase");
        free (page_block);

        if (errors == 0)
        {
            debug printf ("No errors\n");
            return PASSED;
        }
        else
        {
            debug printf ("Errors!\n");
            return Error_DifferentValues;
        }
    }
    else
    {
        debug printf ("malloc () failed\n");
        return Error_MallocFailed;
    }
    return PASSED;
}
