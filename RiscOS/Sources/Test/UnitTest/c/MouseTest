/* >c.MouseTest

TEST SOFTWARE (c) Element 14 Ltd. 1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    02 Feb 99       SBF     Created
1.01    03 Feb 99       SBF     Imported setmousepos function from c.Graphics (this file is a more sensible location)

Performs the mouse input test
*/


/* Library includes */
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

/* Project includes */
#include "support.h"
#include "display.h"
#include "msgs.h"
#include "graphics.h"

/* Local definitions */
#define RECTANGLE_COLOUR 48  /* Colour of rectangle */

#define MOUSE_BUTTON     4   /* 4 = Select; 2 = Menu; 1 = Adjust */


/* Functions */

/*
 * Function   : setmousepos
 * Description: moves the mouse pointer to a specified coordinate
 * Params in  : int x; x-coordinate
 *              int y; y-coordinate
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *setmousepos(int x, int y)
{
  _kernel_swi_regs reg;
  char block[5];

  block[0] = 3;                                                                 /* set up the SWI block */
  block[1] = x & 0xFF;
  block[2] = (x & 0xFF00) >> 2;
  block[3] = y & 0xFF;
  block[4] = (y & 0xFF00) >> 2;

  reg.r[0] = 21;
  reg.r[1] = (int)block;
  return _kernel_swi(OS_Word, &reg, &reg);                                      /* OS Word 21,3 (set mouse position) */
}


/*
 * Function   : mouse_on
 * Description: activates the pointer, making it visible on the display
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *mouse_on(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 106;                                                               /* Select pointer/activate mouse */
  reg.r[1] = 1;                                                                 /* Pointer on (type 1) */
  return _kernel_swi(OS_Byte, &reg, &reg);
}


/*
 * Function   : mouse_oFF
 * Description: deactivates the pointer, removing it from the display
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *mouse_off(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 106;                                                               /* Select pointer/activate mouse */
  reg.r[1] = 0;                                                                 /* Pointer off */
  return _kernel_swi(OS_Byte, &reg, &reg);
}


/*
 * Function   : mouse_test
 * Description: plots a rectangle on the display, and tests
 *              for a mouse click within the rectangle
 * Params in  : test mode (unused at present)
 * Params out : none
 * Returns    : nothing
 */

void mouse_test(int test_mode)
{
  _kernel_swi_regs reg;
  unsigned int buttons;
  unsigned int max_x, max_y, eig_x, eig_y;
  int status; /* Variable for result */

  /* Obtain screen pixel-resolution */
  reg.r[0] = -1;                                                                /* Current mode */
  reg.r[1] = 4;                                                                 /* XEigFactor */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain X eigenvalue */
  eig_x = reg.r[2];                                                             /* Store result */

  reg.r[1] = 5;                                                                 /* YEigFactor */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain Y eigenvalue */
  eig_y = reg.r[2];                                                             /* Store result */

  reg.r[1] = 11;                                                                /* XWindLimit */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain horizontal resolution */
  max_x = reg.r[2];                                                             /* Store result */

  reg.r[1] = 12;                                                                /* YWindLimit */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain vertical resolution */
  max_y = reg.r[2];                                                             /* Store result */

  max_x = max_x << eig_x;                                                       /* Adjust X */
  max_y = max_y << eig_y;                                                       /* Adjust Y */

  /* Clear display */
  clear_whole_screen();

  /* Print message */
  display_info(mouse_test_msg[0]);                                              /* Display instructions */

  /* Move pointer to (0,0) and turn on pointer */
  setmousepos(0, 0);
  mouse_on();

  /* Plot graphics */
  rectangle(max_x/4, max_y/4, max_x/2, max_y/2, RECTANGLE_COLOUR);              /* Plot a rectangle (centred) */

  /* Run the test: wait for click on appropriate button */
  buttons = 0;                                                                  /* Initialise button state variable */
  while (!(buttons & MOUSE_BUTTON))
  {
    _kernel_swi(OS_Mouse, &reg, &reg);                                          /* Obtain mouse state */
    buttons = reg.r[2];                                                         /* Store button state */
  }

  /* Test whether mouse click was within the square */
  _kernel_swi(OS_ReadPoint, &reg, &reg);                                        /* Find colour of point (x,y), regs already set */

  /* If yes, then PASSED, else FAILED */
  if (reg.r[2] == RECTANGLE_COLOUR)
    status = PASSED;
  else
    status = FAILED;

  /* Turn pointer off and clear display */
  mouse_off();
  clear_whole_screen();

  /* Display and log the result */
  display_status(MOUSECHECK, status);
  log_status(MOUSECHECK, status);
}


/* End of c.MouseTest */
