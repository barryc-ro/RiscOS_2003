/* >c.MouseTest

TEST SOFTWARE (c) Element 14 Ltd. 1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    02 Feb 99       SBF     Created
1.01    03 Feb 99       SBF     Imported setmousepos function from c.Graphics (this file is a more sensible location)
1.02    04 Feb 99       NCE     Removed display_status call, results are now displayed by display_refresh
1.03    18 Feb 99       SBF     Changed pointer start location to (100,100); decreased size of target rectangle; also
                                modified code to allow any mouse click, but tests for correct button press when
                                computing the outcome of the test (any button other than that specified in MOUSE_BUTTON
                                will cause the test to fail)
1.04    18 Feb 99       SBF     Noted that the pointer location of (100,100) was still inappropriate on some screen modes;
                                changed to (x_max/4, y_max/4), ensuring it will always be outide of the target rectangle
1.05    19 Feb 99       SBF     Mouse position code altered to use rectangle bounding box as target area, instead of
                                finding the colour of the pixel under the mouse pointer (which the previous test used).
                                This ensures that the mouse test is screen mode independent
1.06    22 Feb 99       SBF     Changed code to display instructions on line 2
1.07    5  Mar 99       NCE     Added Failure codes
Performs the mouse input test
*/


/* Library includes */
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

/* Project includes */
#include "support.h"
#include "display.h"
#include "msgs.h"
#include "graphics.h"
#include "MouseTest.h"

/* Local definitions */
#define RECTANGLE_COLOUR 48  /* Colour of rectangle */

#define MOUSE_BUTTON     4   /* 4 = Select; 2 = Menu; 1 = Adjust */

#define INST_LINE        2   /* Line no. to display instructions */


/* Functions */

/*
 * Function   : setmousepos
 * Description: moves the mouse pointer to a specified coordinate
 * Params in  : int x; x-coordinate
 *              int y; y-coordinate
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *setmousepos(int x, int y)
{
  _kernel_swi_regs reg;
  char block[5];

  block[0] = 3;                                                                 /* set up the SWI block */
  block[1] = x & 0xFF;
  block[2] = (x & 0xFF00) >> 8;
  block[3] = y & 0xFF;
  block[4] = (y & 0xFF00) >> 8;

  reg.r[0] = 21;
  reg.r[1] = (int)block;
  return _kernel_swi(OS_Word, &reg, &reg);                                      /* OS Word 21,3 (set mouse position) */
}


/*
 * Function   : mouse_on
 * Description: activates the pointer, making it visible on the display
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *mouse_on(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 106;                                                               /* Select pointer/activate mouse */
  reg.r[1] = 1;                                                                 /* Pointer on (type 1) */
  return _kernel_swi(OS_Byte, &reg, &reg);
}


/*
 * Function   : mouse_off
 * Description: deactivates the pointer, removing it from the display
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *mouse_off(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 106;                                                               /* Select pointer/activate mouse */
  reg.r[1] = 0;                                                                 /* Pointer off */
  return _kernel_swi(OS_Byte, &reg, &reg);
}


/*
 * Function   : mouse_test
 * Description: plots a rectangle on the display, and tests
 *              for a mouse click within the rectangle
 * Params in  : int test_mode; test mode (unused at present)
 * Params out : none
 * Returns    : nothing
 */

void mouse_test(int test_mode)
{
  _kernel_swi_regs reg;
  unsigned int buttons = 0;
  unsigned int max_x, max_y, eig_x, eig_y;
  int status=0; /* Variable for test result */

  /* Clear display */
  clear_whole_screen();

  /* Obtain screen pixel-resolution */
  reg.r[0] = -1;                                                                /* Current mode */
  reg.r[1] = 4;                                                                 /* XEigFactor */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain X eigenvalue */
  eig_x = reg.r[2];                                                             /* Store result */

  reg.r[1] = 5;                                                                 /* YEigFactor */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain Y eigenvalue */
  eig_y = reg.r[2];                                                             /* Store result */

  reg.r[1] = 11;                                                                /* XWindLimit */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain horizontal resolution */
  max_x = reg.r[2];                                                             /* Store result */

  reg.r[1] = 12;                                                                /* YWindLimit */
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);                                 /* Obtain vertical resolution */
  max_y = reg.r[2];                                                             /* Store result */

  max_x = max_x << eig_x;                                                       /* Adjust X */
  max_y = max_y << eig_y;                                                       /* Adjust Y */

  /* Print message */
  display_instruction(INST_LINE, mouse_test_msg[0]);                            /* Display instructions */

  /* Move pointer near to the left-hand corner (though not within the rectangle) then display the pointer */
  setmousepos(max_x/4, max_y/4);
  mouse_on();

  /* Plot graphics */
  rectangle(max_x/3, max_y/3, max_x/3, max_y/3, RECTANGLE_COLOUR);              /* Plot a rectangle (centred) */

  /* Run the test: wait for click on ANY button */
  while (!buttons)
  {
    _kernel_swi(OS_Mouse, &reg, &reg);                                          /* Obtain mouse state */
    buttons = reg.r[2];                                                         /* Store button state */
  }

  /* If within rectangle and correct mouse button was pressed, then PASSED, else FAILED */
  status=0;
  if (!((reg.r[0] >= (max_x/3)) && (reg.r[0] <= (2 * max_x/3))
                && (reg.r[1] >= (max_y/3)) && (reg.r[1] <= (2 * max_y/3))))
  status+=MOUSE_RECT;

  if(buttons & MOUSE_BUTTON) status+=MOUSE_BUT;
  if(status) status+=MOUSE_FAILED;
  else
    status=PASSED;

  /* Turn pointer off and clear display */
  mouse_off();
  clear_whole_screen();

  /* log the result */
  log_status(MOUSECHECK, status);
}


/* End of c.MouseTest */
