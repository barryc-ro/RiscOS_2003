/* >c.Server

TEST SOFTWARE (c) Element 14 Ltd. 1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    19 Feb 99       SBF     Created
1.01    08 Mar 99       SBF     Modified to output failure codes to file, where necessary
1.02    09 Mar 99       SBF     Header line altered to print the time that the results
                                are written.   Output now appended to file, instead of file
                                being overwritten.  System information now output to file,
                                if available
1.03    18 Mar 99       NCE     Gave created file public R/W permission.

Performs the server-related routines
*/


/* Library includes */
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

/* Project includes */
#include "support.h"
#include "display.h"
#include "msgs.h"
#include "system.h"

/* Local definitions */
#define SERVER_RESULT_PATH "FuncTestResults" /* Location to place test results on server */


/* Functions */

void server_write_test_results(void)
{
  _kernel_swi_regs reg;
  FILE *output_file = NULL;
  unsigned int id_low = 0, id_high = 0;
  int i;
  int num_passed = 0, num_failed = 0;
  int overall_result = PASSED, test_result = PASSED; /* Assume passed until proved otherwise */
  char buffer[255], filename[255];

  /* Obtain machine ID */
  reg.r[0] = 4;                                                                 /* Extended OS_ReadSysInfo call */
  _kernel_swi(OS_ReadSysInfo, &reg, &reg);                                      /* Execute the call */
  id_low = reg.r[0];                                                            /* ID (low word) */
  id_high = reg.r[1];                                                           /* ID (high word) */

  /* Construct unique filename (using machine ID) and open file */
  sprintf(filename, "%s:%08X-%08X", SERVER_RESULT_PATH, id_high, id_low);       /* Create unique filename */
  if ((output_file = fopen(filename, "a")) == NULL)                             /* Attempt to create file; check for failure */
  {
    display_info(server_msg[0]);                                                /* Display error */
    return;                                                                     /* And give up (nothing more can be achieved) */
  }

  /* N.B.  Only get to this point if the file is open */
  iso_time(buffer, sizeof buffer);                                              /* Obtain the time (for use in the header) */
  fprintf(output_file, "*** FUNCTIONAL TEST RESULTS (M/C ID %08X-%08X) [%s] ***\n", id_high, id_low, buffer);

  if (res_store[SYSTEM].done == TRUE)                                           /* Only if the system test has been executed... */
  {                                                                             /* ...print the system information to file */
    fprintf(output_file, "\nSYSTEM INFORMATION:\n\n");
    fprintf(output_file, "  %s%s\n", sub_test_names[0], system_info.cpu_type);
    fprintf(output_file, "  %s%s\n", sub_test_names[1], system_info.iomd_type);
    fprintf(output_file, "  %s%s\n", sub_test_names[2], system_info.id_number);
    fprintf(output_file, "  %s%s\n", sub_test_names[3], system_info.os_version);
    fprintf(output_file, "  %s%s\n", sub_test_names[4], system_info.dram_size);
    fprintf(output_file, "  %s%s\n", sub_test_names[22], system_info.network_if_type);
    fprintf(output_file, "  %s%s\n", sub_test_names[23], system_info.mac_address);
  }

  fprintf(output_file, "\nTEST RESULTS:\n\n");
  for (i = 0; i < NUMB_TESTS; i++)
  {
    if(res_store[i].done == TRUE)                                               /* If the test has been run, output its result */
    {
      test_result = res_store[i].result;                                        /* Obtain the result of this particular test */
      if (test_result != PASSED)
      {
        test_result = FAILED;
        if(res_store[i].result==0)   //no failure code so don't print one
          fprintf(output_file, "  %s%s\n", test_names[i], test_status[test_result]);
        else
          fprintf(output_file, "  %s%s (&%08X)\n", test_names[i], test_status[test_result], res_store[i].result);
      }
      else
      {
        fprintf(output_file, "  %s%s\n", test_names[i], test_status[test_result]);
      }

      if (test_result == PASSED)                                                /* If test passed... */
        num_passed++;                                                           /* ...then increment pass counter... */
      else
        num_failed++;                                                           /* ...otherwise increment fail counter */
    }
  }
  if (num_failed > 0) overall_result = FAILED;                                  /* If any test failed, overall result is fail */

  fprintf(output_file, "\nRESULTS SUMMARY:\n\n");                               /* Display a summary */
  fprintf(output_file, "  Number of tests run    = %2d\n", (num_passed + num_failed));
  fprintf(output_file, "  Number of tests passed = %2d\n", num_passed);
  fprintf(output_file, "  Number of tests failed = %2d\n\n", num_failed);
  fprintf(output_file, "  Overall result         = %s\n\n", test_status[overall_result]);
  fprintf(output_file, "=== END ===\n\n\n");

  fclose(output_file);                                                          /* Close the file */

  //set public r/w permission
  sprintf(buffer,"Access %s WR/WR",filename);
  _kernel_oscli(buffer);

  sprintf(buffer, "%s (file '%08X-%08X')", server_msg[1], id_high, id_low);
#ifndef MACHSTB3
  display_info(buffer);                                                         /* Notify of completion */
#endif
}


/* End of c.Server */
