/* >c.Server

TEST SOFTWARE (c) Element 14 Ltd. 1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    19 Feb 99       SBF     Created

Performs the server-related routines
*/


/* Library includes */
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

/* Project includes */
#include "support.h"
#include "display.h"
#include "msgs.h"

/* Local definitions */
#define SERVER_RESULT_PATH "FuncTestResults" /* Location to place test results on server */


/* Functions */

void server_write_test_results(void)
{
  _kernel_swi_regs reg;
  FILE *output_file = NULL;
  unsigned int id_low = 0, id_high = 0;
  int i;
  int num_passed = 0, num_failed = 0;
  int overall_result = PASSED, test_result = PASSED; /* Assume passed until proved otherwise */
  char buffer[255], filename[255];

  /* Obtain machine ID */
  reg.r[0] = 4;                                                                 /* Extended OS_ReadSysInfo call */
  _kernel_swi(OS_ReadSysInfo, &reg, &reg);                                      /* Execute the call */
  id_low = reg.r[0];                                                            /* ID (low word) */
  id_high = reg.r[1];                                                           /* ID (high word) */

  /* Construct unique filename (using machine ID) and open file */
  sprintf(filename, "%s:%08X-%08X", SERVER_RESULT_PATH, id_high, id_low);       /* Create unique filename */
  if ((output_file = fopen(filename, "w")) == NULL)                             /* Attempt to create file; check for failure */
  {
    display_info(server_msg[0]);                                                /* Display error */
    return;                                                                     /* And give up (nothing more can be achieved) */
  }

  /* N.B.  Only get to this point if the file is open */
  fprintf(output_file, "*** FUNCTIONAL TEST RESULTS (MACHINE ID %08X-%08X) ***\n\n", id_high, id_low);
  for (i = 0; i < NUMB_TESTS; i++)
  {
    if(res_store[i].done == TRUE)                                               /* If the test has been run, output its result */
    {
      test_result = res_store[i].result;                                        /* Obtain the result of this particular test */
      if (test_result != PASSED) test_result = FAILED;                          /* Disregard the failure code; simply want FAIL */
      fprintf(output_file, "  %s%s\n", test_names[i], test_status[test_result]);
      if (test_result == PASSED)                                                /* If test passed... */
        num_passed++;                                                           /* ...then increment pass counter... */
      else
        num_failed++;                                                           /* ...otherwise increment fail counter */
    }
  }
  if (num_failed > 0) overall_result = FAILED;                                  /* If any test failed, overall result is fail */

  fprintf(output_file, "\nRESULTS SUMMARY:\n\n");                               /* Display a summary */
  fprintf(output_file, "  Number of tests run    = %2d\n", (num_passed + num_failed));
  fprintf(output_file, "  Number of tests passed = %2d\n", num_passed);
  fprintf(output_file, "  Number of tests failed = %2d\n\n", num_failed);
  fprintf(output_file, "  Overall result         = %s\n\n", test_status[overall_result]);
  fprintf(output_file, "=== END ===\n");

  fclose(output_file);                                                          /* Close the file */

  sprintf(buffer, "%s (file '%08X-%08X')", server_msg[1], id_high, id_low);     /* Notify of completion */
  display_info(buffer);
}


/* End of c.Server */
