/* >c.NVRAMTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    20 Mar 97       BAR     Initial writing
1.01    01 May 97       BAR     Modify checksum code to cal. the correct
                                checksum.
1.02    07 Oct 97       BAR     Swap support & display includes
                                Only ask to ensure that the mins in
                                operation is used when built on an RCA
                                system.

Will perform the NVRAM Checksum
*/

#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "nvramtest.h"
#include "display.h"
#ifdef RCA
#include "storedinfo.h"
#endif

void nv_ram_checksum(void)
{
        int status = FAILED;

        display_status(NVRAM,RUNNING);
        status=cal_checksum();
        display_status(NVRAM,status);
        log_status(NVRAM,status);
}

int cal_checksum(void)
/* Calculate the NV_RAM Checksum and compare.
Read the NV_RAM byte by byte and sum as we go.
Read checksum and compare.
 */
{
        int sum=1;		/* Seed is 1. */
        int ok=FAILED;
        int cnt;
        _kernel_swi_regs reg;

#ifdef RCA
	/* Make sure mins in operation is correct before we start. */
	storedinfo_setminsinop();
#endif

        reg.r[0] = 161;
        for (cnt=0; cnt<= nv_ram_size; cnt++){
        	/* Need to skip checksum and also 16 byte OTP area. */
                if ((cnt < nv_ram_skip_low) || (cnt > nv_ram_skip_high)){
                        reg.r[1] = cnt;
                        _kernel_swi(OS_Byte, &reg, &reg);
                        sum = sum+reg.r[2];
                }
        }
        sum = (sum & 0xFF);

        reg.r[1]=nv_ram_checksum_loc;
        _kernel_swi(OS_Byte, &reg, &reg);
        if (reg.r[2] == sum){
                ok=PASSED;
        }else{
                ok=FAILED;
        }
        return ok;
}
