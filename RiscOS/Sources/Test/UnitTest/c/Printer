//Printer - simple printer test
// 12/2/99  NCE        created

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "module.h"
#include "InputTest.h"
#include "display.h"
#include "msgs.h"
#include "printer.h"
#include "system.h"

int printer_type;

void set_printer_type(int argc,char *argv[])
{
    int l;
    char cline[20];
    for(l=0;l<strlen(argv[4]);l++)
     cline[l]=tolower(argv[4][l]);
    cline[l]='\0';
    //compare cline to epson,HP,Lexmark etc..
    if (!strcmp(cline,"epson")) printer_type=EPSON;
    if (!strcmp(cline,"hp"))    printer_type=HP;
}


void enable_printer(void)
{
    _kernel_swi_regs reg;

    //enable the printer
    _kernel_oswrch(2);

    reg.r[0]=5;
    reg.r[1]=1;

    //select the parallel port printer
    _kernel_swi(OS_Byte,&reg,&reg);
}

//equivilent to VDU1,ch
void print_ch(char ch)
{
 _kernel_oswrch(1);
 _kernel_oswrch(ch);
}

void reset_printer(void)
{
  if (printer_type == EPSON)
  {
    print_ch(27);
    print_ch(64);
  }

  if (printer_type == HP)
  {
    print_ch(27);
    print_ch('E');
    //seem to need a CR here ??
    print_ch(13);
  }
}

//sends a 'CR' and an 'LF'
void send_crlf(void)
{
  print_ch(13);
  print_ch(10);
}

void disable_printer(void)
{
  _kernel_oswrch(3);
}

void print_line(char *line)
{
 int count;

 for(count=0;count<strlen(line);count++)
   print_ch(line[count]);
 send_crlf();
}


//sends a line of chs as an 'escape sequence'
void esc_seq(char *seq)
{
   int count;

   print_ch(27);   //ESC
   for(count=0;count<strlen(seq);count++)
     print_ch(seq[count]);
}


void clear_printer_buffer(void)
{
    _kernel_swi_regs reg;

    reg.r[0]=21;
    reg.r[1]=3;

    _kernel_swi(OS_Byte,&reg,&reg);
}

int check_buffer(int secs)
{
 _kernel_swi_regs reg;
 int carry;

    wait(secs); //wait secs seconds for buffer to empty

    reg.r[0]=152;
    reg.r[1]=3;

    _kernel_swi_c(OS_Byte,&reg,&reg,&carry);

    //C flag = 1 if buffer is empty so...

    if(carry)
       return TRUE;
    else
       display_info("is the printer connected?");
    return FALSE;
}


void send_text(void)
{
 int text_string;
 char *printer_test_text[3];

 printer_test_text[0]="  the quick brown fox jumps over the lazy dog.";
 printer_test_text[1]="  THE QUICK DOG JUMPS OVER THE LAZY BROWN FOX.";
 printer_test_text[2]="  `1234567890-=£[]\\;',./~!@#$%^&*()_+¤{}|:<>?";


 for(text_string=0;text_string<3;text_string++)
     print_line(printer_test_text[text_string]);
 send_crlf();
}


void test_graphic_hp(void)
{
//see the HP Deskjet Technical Reference Guide
//for details of the escape codes used
    int l,i;
    //set VMI to 0
    esc_seq("&l0C");

    //start raster graphics mode
    esc_seq("*r0A");

    for(l=0;l<8;l++)
    {
      for(i=0;i<3;i++)
      {
        //now send the data
        esc_seq("*b1m2W");
        //no of columns
        print_ch(39);
        //bit pattern
        print_ch((int)pow(2,l));
      }
    }

    //end raster graphics
    esc_seq("*rC");

    //reset VMI to default
    esc_seq("&l6C");
    send_crlf();

}

void test_graphic_epson(void)
{

    int maxpattern =2;
    int maxbit = 7;
    int maxdot=22;
    int maxline=2;
    int no_ofBitImage;
    char LoByte,HiByte;
    int line,dot;
    int pattern,bit;

    no_ofBitImage=maxdot*maxpattern*(maxbit+1);
    LoByte=(char)fmod(no_ofBitImage,256);
    HiByte=no_ofBitImage/256;

    reset_printer();
    send_crlf();
    for(line=1;line<maxline;line++)
    {
      //bit image 120dpi
      esc_seq("*");
      print_ch(0);
      print_ch(LoByte);
      print_ch(HiByte);

      for(pattern=1;pattern<=maxpattern;pattern++)
      {
          for(bit=0;bit<=maxbit;bit++)
          {
              for(dot=1;dot<=maxdot;dot++)
                  print_ch((char)pow(2,bit));
          }
      }
      send_crlf();
    }
    send_crlf();
    reset_printer();
}

void test_graphic(void)
{
    switch (printer_type)
    {
        case EPSON:
            test_graphic_epson();
        break;

        case HP:
            test_graphic_hp();
        break;

        default:     // we should never see this!!!
            printf("printer not defined");
            get();
        break;
    }
}


void printer_test(void)
{
  int result,l;

  clear_whole_screen();
  display_refresh();
  display_status(PRINTER,RUNNING);

  enable_printer();
  reset_printer();
  test_graphic();
  send_text();
  //do some crlf's to move the paper out a bit
  for(l=1;l<15;l++) send_crlf();
  //form feed for HP Printer
  if (printer_type == HP) print_ch(12);
  //don't need this 'cos the OS does it for us!
  //if(!check_buffer(10)) clear_printer_buffer();
  disable_printer();

  display_info(input_test_msg[14]);
  display_instruction(YESNO_INST_LINE,general_msg[02]);
  result=get_yn_responce_forever();
  log_status(PRINTER,result);
  display_refresh();
}

void print_results(void)
{
  _kernel_swi_regs reg;
  unsigned id_high=0,id_low=0;
  int i,test_result,num_passed=0,num_failed=0;
  int overall_result=PASSED;
  char buf[128];

  // Obtain machine ID
  reg.r[0] = 4;
  _kernel_swi(OS_ReadSysInfo, &reg, &reg);
  id_low = reg.r[0];
  id_high = reg.r[1];
  enable_printer();
  reset_printer();

  print_line("  *** FUNCTIONAL TEST RESULTS ***");
  send_crlf();
  sprintf(buf,"    %s",get_os_version());
  print_line(buf);
  sprintf(buf,"    ARM%X",find_cputype());
  print_line(buf);
  sprintf(buf,"    %d%s",find_memory_size(DRAM_AREA),general_msg[1]);
  print_line(buf);
  sprintf(buf,"    Machine ID %08X-%08X",id_high, id_low);
  print_line(buf);
  send_crlf();
  for (i = 0; i < NUMB_TESTS; i++)
  {
    if(res_store[i].done == TRUE)
    {
      test_result = res_store[i].result;
      if (test_result != PASSED) test_result = FAILED;
      sprintf(buf,"  %s%s", test_names[i],test_status[test_result]);
      print_line(buf);
      if (test_result == PASSED)
        num_passed++;
      else
        num_failed++;
    }
  }
   // If any test failed, overall result is fail
  if (num_failed > 0) overall_result = FAILED;
  send_crlf();
  sprintf(buf, "  Overall result         = %s",
                                          test_status[overall_result]);
  print_line(buf);
  print_line("  === END ===");
  //we've finished the report so do a form feed
  print_ch(12);

  disable_printer();
}
