/* >c.Support

TEST SOFTWARE (c) Element 14 Ltd. 1997-1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    20 Mar 97       BAR     Initial writing
1.01    06 May 97       BAR     Correct mistake in find memory func. divided
                                the memory size by 0124 not 1024.
1.02    07 May 97       BAR     Change get_key_timmed to return 'CONT' if we
                                didn't get a key within the time specified.
                                Change inkey() to return CONT if timed out.
1.03    08 May 97       BAR     Add func.s to determin test mode, extract
                                log information.
1.04    20 May 97       BAR     Change get_key_timed to pass delay in CSecs
                                to inkey. Func. inkey now takes delay in
                                CSecs.
1.05    21 May 97       BAR     Fix bug in make_error_number where it wasn't
                                shifting the number correctly
1.06    05 Jun 97       BAR     Add read & reset timer from modem code.
                                Improve handling of NOTCOMPLTED status, no
                                longer causes the failed counter to be
                                incremented.
1.07    17 Jun 97       BAR     Improve get_yn_responce_timed, so the audio
                                test does not accedently fail if there are
                                ok's stored in the input buffer. Fix LED
                                status function. Remove unwanted globle
                                variables.
1.08    18 Jun 97       BAR     When clearing res_store, only clear when
                                less than NUMB_TESTS
1.09    19 Jun 97       BAR     When checking res_store, only clear when
                                less than NUMB_TESTS
1.10    22 Sep 97       BAR     Add support for daytona LED control
1.11    06 Oct 97       BAR     Correct mistakes in #ifdefs
1.12    08 Oct 97       BAR     Add functions ask_get_yn_responce_forever &
                                ask_get_yn_responce_timed.
1.13    15 Oct 97       BAR     Sort out how to get res_store and
                                cycle_store visable to all.
1.14    05 Nov 97       BAR     Add two functions to take a string and make
                                them upper case or lower case. Add function
                                to validate and covert the test mode string
                                offered by the user.
1.15    18 Nov 97       RLT	Modified change_led_state to work correctly
                                on Daytona also added Daytona versions of
                                led_steady_off and led_steady_on
1.16    18 Nov 97       RLT     Modified display_status_led to work correctly
                                on Daytona
1.17    19 Nov 97       BAR     Completely new display_status_led()
                                function. Two variants one for Daytona one
                                for the rest.
1.18    20 Nov 97       BAR     Fix bug in display_status_led func, didn't
                                specify the flash rate when flashing some of
                                the LED's
1.19	18 Dec 97	RLT	Modified change_led_state to only call
				set_led_flash_rate if the function has LED_FLASH
				passed to it.
1.20	20 Jan 98	RLT	Uncommented 'Press SPACE to continue' message
				in wait_for_cont
1.21	02 Feb 98	RLT	Modified functions strupr () and strlwr () not to
				produce compilation warnings
1.22    04 Feb 99       NCE     Added sequence variables used by display refresh
1.23    19 Feb 99       SBF     Added functions to read system variables
                                ("readvarval" and "readvareval")


Provides support functions
*/
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "support.h"
#include "led.h"
#include "display.h"
#include "Msgs.h"
#include "usermode.h"
#include <ctype.h>
#include "string.h"

#ifdef MACHDaytona
# include "daytonahw.h"
#endif

/* Declare the variables available */
int flagDebugging   = FALSE;
results_store res_store[NUMB_TESTS];
int sequence_store[NUMB_TESTS];
int sequence_number = 0;
cycle_info cycle_store;

int get_yn_responce_forever(void)
/* Check to see if either the OK or BAD keys have been pressed. */
/* wait forever if needed. */
/* returns true or false */
{
        int rtn=CONT;
        int key;

        flush_keyboard();
        do{
                key=get();
                if (key==GOOD_KEY){
                        rtn=TRUE;
                }else{
                        if (key==BAD_KEY){
                                rtn=FALSE;
                        }else{
                                rtn=CONT;
                        }
                }
        }while (rtn==CONT);
        return rtn;
}

int get_yn_responce_timed(int delay)
/* Check to see if either the OK or BAD keys have been pressed. */
/* delay specifies how long to wait in CSec's before returning */
/*  if timed out, then return CONT */
/* returns true or false */
{
        int rtn=CONT;
        int key;

        flush_keyboard();
        key=inkey(delay);
        if (key!=CONT){
                /* We got something ... check it */
                if (key==GOOD_KEY){
                        /* Got a 'GOOD' reply */
                        rtn=TRUE;
                }else{
                        /* Didn't get a 'GOOD' */
                        if (key==BAD_KEY){
                                /* got a bad key rtn false */
                                rtn=FALSE;
                        }else{
                                /* assume CONT */
                                rtn=CONT;
                        }
                }
        }else{
                /* we timed out */
                rtn=key;
        }
        return rtn;
}

int ask_get_yn_responce_forever(void)
/* Ask and wait (forever) for the user to give a Y/N responce */
{
        int rtn=FALSE;
        display_instruction(YESNO_INST_LINE,general_msg[02]);
        rtn = get_yn_responce_forever();
        clear_line(YESNO_INST_LINE);
        return rtn;
}

int ask_get_yn_responce_timed(int delay)
/* Ask and wait (delay) for the user to give a Y/N responce */
{
        int rtn=FALSE;
        display_instruction(YESNO_INST_LINE,general_msg[02]);
        rtn = get_yn_responce_timed(delay);
        clear_line(YESNO_INST_LINE);
        return rtn;
}

int get_key_forever(int reqd_key)
/* wait for the key specified to be pressed. */
/* wait forever if needed */
{
        int key;
        int rtn=FALSE;

        flush_keyboard();
        do{
                key=get();
        }while(key!=reqd_key);
        return rtn;
}

int get_key_abortable(int reqd_key, int abort_key)
/* wait for the key specified to be pressed. */
/* wait forever if needed - unless abort key pressed*/
{
        int key;

        flush_keyboard();
        do{
                key=get();
        }while((key!=reqd_key) && (key!=abort_key));
        return (key==reqd_key) ? TRUE : FALSE;
}

int get_key_timed(int reqd_key, int delay)
/* wait for the key specified to be pressed.
   dealy specifies in Sec's how long to wait for.
   return CONT if timed out.
          TRUE if reqd. key pressed.
          FALSE if reqd. key not pressed.
 */
{
        int key;
        int rtn=CONT;

        flush_keyboard();
        /* get a key, multiply delay time by 100 to get CSec's */
        key=inkey(delay*100);

        if (key!=CONT){
                /* We got something ... check it */
                if (key==reqd_key){
                        /* Got what we asked for */
                        rtn=TRUE;
                }else{
                        /* Didn't get what we asked for */
                        rtn=FALSE;
                }
        }else{
                /* we timed out */
                rtn=key;
        }
        return rtn;
}

void WaitForSpaceBar(void)
/* Wait for the space bar to be pressed.
 */
{
        WaitForOKKey();
/*         int key;
        _kernel_swi_regs regs;

        do{
                _kernel_osbyte(21,0,0);
                _kernel_swi(OS_ReadC, &regs, &regs);
                key = regs.r[0];
        }while (key != SPACE_CHR); */
}

void WaitForOKKey(void)
/* Wait for the OK button to be pressed.
 */
{
       int key;
        flush_keyboard();
        do{
                key=get();
        }while (key != CONT_KEY);

}

int inkey(int delay)
/* perform an INKEY function
   return -2 if timed out.
   delay is in CSec's
 */
{
        _kernel_swi_regs regs;
        long tnow, tstart = 0, tstop=0;
        int rtn_key=-1;
        int iCarry;

        /* get the start time */
        _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
        tstart = (long) regs.r[0];
        /* stop is start plus delay : all in CSec's */
        tstop = tstart+((long)delay);
        do{
/*                usermode_donothing();*/
                /* examin the keyboard buffer */
                regs.r[0] = 145;
                regs.r[1] = 0;
                _kernel_swi_c(OS_Byte, &regs, &regs, &iCarry);
                if (iCarry == 0){
                        /* we've got something ! */
                        rtn_key=regs.r[2];
                }
                /* get the time */
                _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
                tnow = (long) regs.r[0];
        }while ((rtn_key==-1) && (tnow<tstop));
        /* we've either timed out in which case rtn_key still =-1 */
        /* A key was prerssed, in which case rtn_key no longer =-1 */
        if ((rtn_key==-1) && (tnow>=tstop)){
                /* we've timed out rtn CONT */
                rtn_key=CONT;
        }
        return rtn_key;
}

int get(void)
/* Perform a GET function
 */
{
        int rtn_key=-1;
        _kernel_swi_regs regs;
        int iCarry;

        do{
/*                usermode_donothing();*/
                /* examin the keyboard buffer */
                regs.r[0] = 145;
                regs.r[1] = 0;
                _kernel_swi_c(OS_Byte, &regs, &regs, &iCarry);
                if (iCarry == 0){
                        /* we've got something ! */
                        rtn_key=regs.r[2];
                }
        }while (rtn_key==-1);
        /* A key was pressed, in which case rtn_key no longer =-1 */
        return rtn_key;
}

void flush_keyboard(void)
/* Flush the keyboard buffer
 */
{
        _kernel_osbyte(21,0,0);
}

void log_status(int test,int status)
/* Log the status of a test, stored in the information in the structure
   res_store.
 */
{
        if (status != RUNNING){
                /* We've been called something other than RUNNING */
                res_store[test].done = TRUE;
/*
    NOO Don't do this we loose the error codes!  ne
                if (status > LASTSTATUS){
                     // We've been given an error code, change to FAILED
                        status = FAILED;
                }
*/
                res_store[test].result = status;
                sequence_store[sequence_number++] = test;
        }
        /* Ignore if called with RUNNING */
}

int check_logged_status(int failed_count, int cycle)
/* Check the done and results flags for each of the tests.
   if done
       increment the run counter for that test.
       if not passed not completed not notcompleted
           increment the failed counter
           if first is zero
               enter cycle count
       if notcompleted
           increment the failed counter
           if first is zero
               enter cycle count
   if cycle failed
       inc failed_counter
 */
{
        int i;
        int cycle_failed=FALSE;

        for (i=0; i< NUMB_TESTS; i++){
                /* for each test, check that it's done flag is set. */
                if (res_store[i].done==TRUE){
                        /* we did the test */
                        res_store[i].total_runs++;
                        if ((res_store[i].result!=PASSED) && (res_store[i].result!=COMPLETED) && (res_store[i].result!=NOTCOMPLETED)){
                                /* It failed !!! */
                                cycle_failed=TRUE;
                                res_store[i].total_fails++;
                                if (res_store[i].first==0){
                                        /* Set first failure value */
                                        res_store[i].first=cycle;
                                }
                        }
                        if (res_store[i].result==NOTCOMPLETED){
                                /* increment the failed counter */
                                res_store[i].total_fails++;
                                if (res_store[i].first==0){
                                        /* Set first failure value */
                                        res_store[i].first=cycle;
                                }
                        }
                }
        }
        /* check cycle_failed, if true inc. failed counter */
        if (cycle_failed==TRUE){
                failed_count++;
        }
        return failed_count;
}

void clear_res_store(int cycle, int test_mode)
/* Clear the cycle fields in the results store
   If cycle_count==0 then clear the lot and write the test_mode into
        res_store[0].mode
 */
{
        int i;

        for (i=0; i< NUMB_TESTS; i++){

/* printf("clearing struct for i=%d",i); */

                res_store[i].done=FALSE;
                res_store[i].result=FAILED;
                if (cycle==0){
/* printf("oh look cycle 0"); */
                        /* first time through */
                        /* initilise to structure */
                        res_store[i].mode=test_mode;
                        res_store[i].total_runs=0;
                        res_store[i].total_fails=0;
                        res_store[i].first=0;
                }
/* WaitForOKKey(); */
/* printf("\n"); */
        }
}

int get_logged_data(int test, int field)
/* extract some data from the res_store
 */
{
        int rtn;
        switch (field){
                case LOG_RUNS:
                        rtn=res_store[test].total_runs;
                        break;
                case LOG_FAILS:
                        rtn=res_store[test].total_fails;
                        break;
                case LOG_FIRST:
                        rtn=res_store[test].first;
                        break;
                default:
                        rtn=0;
        }
        return rtn;
}

int check_test_mode(int reqd_mode)
/* check the test mode we are in */
{
        return (res_store[0].mode==reqd_mode) ? TRUE : FALSE;
}

int check_prefix_type(int test)
/* determin type of prefix we need.
 */
{
        int rtn;
        switch(test){
                case USERINPUT:
                        /* RUN/PASS */
                        rtn=RUN_PASS;
                        break;
                case SYSTEM:
                        /* COMPLATE/PASS */
                        rtn=COMP_PASS;
                        break;
                case AUDIO:
                        /* COMPLEATE/PASS */
                        rtn=COMP_PASS;
                        break;
                default:
                        /* FAIL/PASS */
                        /* ROM, DRAM, NVRAM, MODEM, SMARTCARD, LOGGEDCODES */
                        rtn=FAIL_FIRST;
                        break;
        }
        return rtn;
}

int find_memory_size(int area)
/* Get the memory size and retun it
   area is the area to ge information on
        1 = DRAM aka DRAM_AREA
        2 = VRAM aka VRAM_AREA
        3 = ROM  aka ROM_AREA
        4 = IO   aka IO_AREA
 */
{
        int size;
        int pages;
        int page_size;
        _kernel_swi_regs reg;

        reg.r[0] = 8 | (area << 8);
        _kernel_swi(OS_Memory, &reg, &reg);
        page_size=reg.r[2];
        pages=reg.r[1];
        size=(pages*page_size)/(1024*1024);
        return size;
}

int make_error_no(int c_err, int t_base, int t_numb, int f_numb)
/* Make an error number from the parameters given. */
/* c_err is the value of the current error numnber, this will be added too. */
/* t_base is the base number to shift the test number by */
/* t_numb is the test number to identify a sub test */
/* f_numb is the fault number or code */
{
	return (t_numb!=0) ? (c_err+(t_numb << t_base)+f_numb) : c_err;
}

#ifdef MACHDaytona
/* Reflect the test status in the LED's
 * in   test_mode       current test mode
 *      status          the status to be reflected.
 * out  Nothing
 *
 * The flash rate of the LED is determined by test_mode.
 * The values of status are the various test status values defined in
 * h.support.
 */

void display_status_led(int test_mode, int status)
{
        int rate;

        if (test_mode==MODE_USER){
                rate=LED_FLASH_USER;
        }else{
                rate=LED_FLASH_LIFE;
        }
        switch(status){
                case LED_STARTING:
                        change_led_state (LED_RUNNING, LED_OFF,   0);
                        change_led_state (LED_PASS,    LED_OFF,   0);
                        change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_RUNNING:
			change_led_state (LED_RUNNING, LED_FLASH, rate);
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_RUN_FAILED:
			change_led_state (LED_RUNNING, LED_FLASH, rate);
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_RUN_PASSED:
			change_led_state (LED_RUNNING, LED_FLASH, rate);
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_COMPLETED:
			change_led_state (LED_RUNNING, LED_ON,    0);
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_COM_FAILED:
			change_led_state (LED_RUNNING, LED_ON,    0);
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_COM_PASSED:
			change_led_state (LED_RUNNING, LED_ON,    0);
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_STOPPED:
			change_led_state (LED_RUNNING, LED_OFF,   0);
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_ON, 0);
                        break;
        }
}
#else
/* Reflect the test status in the LED's
 * in   test_mode       current test mode
 *      status          the status to be reflected.
 * out  Nothing
 *
 * The flash rate of the LED is determined by test_mode.
 * The values of status are the various test status values defined in
 * h.support.
 */

void display_status_led(int test_mode, int status)
{
        int rate;

        if (test_mode==MODE_USER){
                rate=LED_FLASH_USER;
        }else{
                rate=LED_FLASH_LIFE;
        }
        switch(status){
                case LED_STARTING:
                        change_led_state (LED_PASS,    LED_OFF,   0);
                        change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_RUNNING:
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_RUN_FAILED:
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_RUN_PASSED:
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_COMPLETED:
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_OFF,   0);
                        break;
                case LED_COM_FAILED:
			change_led_state (LED_PASS,    LED_ON,    0);
			change_led_state (LED_FAIL,    LED_FLASH, rate);
                        break;
                case LED_COM_PASSED:
			change_led_state (LED_PASS,    LED_FLASH, rate);
			change_led_state (LED_FAIL,    LED_ON,    0);
                        break;
                case LED_STOPPED:
			change_led_state (LED_PASS,    LED_OFF,   0);
			change_led_state (LED_FAIL,    LED_OFF,   rate);
                        break;
        }
}
#endif

void change_led_state(int led, int state, int rate)
/* Set the requied LED to the required state, and if needed start it
flashing */
{
        int old_state;

#ifndef MACHDaytona
        old_state=get_led_state(led);
        if (((old_state && LED_FLASH)==LED_FLASH) && (state!=LED_FLASH)){
                /* We were flashing but we don't want to now */
                led_flash_off(led);
        }
#else
	if (state != LED_FLASH)
	{
            set_led_state(led,state);
        }
        else
        {
            set_led_flash_rate(led,rate);
        }
#endif
}

int get_led_state(int led)
/* Get the status of the led speified. */
{
        _kernel_swi_regs regs;
        regs.r[0] = led;
        regs.r[1] = 0xFFFFFFFF;
        regs.r[2] = 0;
        _kernel_swi(LED_Control, &regs, &regs);
        return regs.r[0];
}

void set_led_state(int led, int state)
/* Set the status of the led specified */
{
        _kernel_swi_regs regs;

#ifdef MACHDaytona
        regs.r[0] = 0;                  /* MUST be 0 */
        regs.r[1] = led;
        regs.r[2] = 0;                  /* duration is 0=forever */
        regs.r[3] = state;             /* we're always turning it on */
        regs.r[4] = 0;
        _kernel_swi(DaytonaHW_LED, &regs, &regs);
#else
        regs.r[0] = led;
        if (state==LED_FLASH){
                /* set bit 1 in the regs */
                regs.r[1] = 1;
        }else{
                /* set bit o in the regs */
                regs.r[1] = 0;
        }
        regs.r[2] = state;
        _kernel_swi(LED_Control, &regs, &regs);
#endif
}

#ifndef MACHDaytona
void led_steady_off(int led)
/* Turn the required led off */
{
        _kernel_swi_regs regs;
        regs.r[0] = led;
        regs.r[1] = 0;
        regs.r[2] = 0;
        _kernel_swi(LED_Control, &regs, &regs);
}
#else
void led_steady_off (int led)
{
    _swix (DaytonaHW_LED, _IN (0 | 1 | 2 | 3), 0, led, 0, 0);
}
#endif

#ifndef MACHDaytona
void led_steady_on(int led)
/* Turn the required led on */
{
        _kernel_swi_regs regs;
        regs.r[0] = led;
        regs.r[1] = 0;
        regs.r[2] = 1;
        _kernel_swi(LED_Control, &regs, &regs);
}
#else
void led_steady_on (int led)
{
    _swix (DaytonaHW_LED, _IN (0 | 1 | 2 | 3 | 4), 0, led, 0, 1, 0);
}
#endif

void led_flash_off(int led)
/* Stop the led specified from flashing */
{
        _kernel_swi_regs regs;
        regs.r[0] = led;
        regs.r[1] = 1;
        regs.r[2] = 0;
        _kernel_swi(LED_Control, &regs, &regs);
}

void led_flash_on(int led)
/* Start the led specified flashing */
{
        _kernel_swi_regs regs;
        regs.r[0] = led;
        regs.r[1] = 1;
        regs.r[2] = 1;
        _kernel_swi(LED_Control, &regs, &regs);
}

void set_led_flash_rate(int led, int rate)
/* Set the LED specified's flash rate */
{
        _kernel_swi_regs regs;
#ifdef MACHDaytona
        regs.r[0] = 0;                  /* MUST be 0 */
        regs.r[1] = led;
        regs.r[2] = 0;                  /* duration is 0=forever */
        regs.r[3] = rate;               /* Set the ON rate */
        regs.r[4] = rate;               /* Set the OFF rate */
        _kernel_swi(DaytonaHW_LED, &regs, &regs);
#else
        regs.r[0] = led;
        regs.r[1] = rate;
        _kernel_swi(LED_FlashRate, &regs, &regs);
#endif
}

void wait_for_cont(void)
/* Prompt the user to make us continue.
   Wait (forever) for their response.
 */
{
        display_instruction(CONT_INST_LINE,general_msg[0]);
        WaitForSpaceBar();
        clear_line(CONT_INST_LINE);
}

void wait(int seconds)
/* Wait a specified number of seconds
 */
{
        _kernel_swi_regs regs;
        long tnow, tstart = 0, tstop=0;

        _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
        tstart = (long) regs.r[0];
        /* multiply seconds by 100 to get CSec's */
        tstop = tstart+((long)seconds*100);

        do{
                _kernel_swi (OS_ReadMonotonicTime, &regs, &regs);
                tnow = (long) regs.r[0];
        }while (tnow <= tstop);
}

/*
 * returns the current timer setting in centiseconds
 */
long
timer_read ( t_timer *the_timer)
{
  _kernel_swi_regs reg;

  _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
  return (long) reg.r[0] -  *the_timer;
}

/*
 * resets the given timer.
 */
void
timer_reset ( t_timer *the_timer )
{
        _kernel_swi_regs reg;

        _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
        *the_timer = (long) reg.r[0];
}

void strupr (char *string)
/* convert the string to upper case */
{
   while (*string)
   {
       *string = toupper (*string);
       string++;
   }
}


void strlwr (char *string)
/* convert the string to lower case */
{
   while (*string)
   {
       *string = tolower (*string);
       string++;
   }
}

int validate_mode(char *mode_str)
/*
 * Check that the mode string offered by the user is one of our valid test
 * modes.
 * If not return -1
 * If it is return the test mode number
 */
{
        int rtn=-1;
        int ctr=0;
        int flag;
        char *valid_modes[] =
                {
                "single",                         /* 00 */
                "cont"                            /* 01 */
        };

        do{
                flag = strcmp(mode_str,valid_modes[ctr]);
                ctr++;
        }while ((ctr <= MODE_LIMIT ) && (flag != 0));
        if (flag != 0){
                rtn = -1;
        }else {
                rtn = (ctr-1);
        }
        return rtn;
}


/* Evaluate the contents of a given system variable */
int readvareval(const char *name)
{
  _kernel_swi_regs reg;
  int result;

  /* Setup registers for SWI call */
  reg.r[0] = (int)name;
  reg.r[1] = (int)&result;
  reg.r[2] = sizeof(int);
  reg.r[3] = 0;            /* first call */
  reg.r[4] = 1;            /* numeric value expected */

  _kernel_swi(OS_ReadVarVal, &reg, &reg);

  /* Check validity of result and set return value to 0 if invalid (R2 = 4 if valid) */
  if (reg.r[2] == 0)
    result = 0;

  return (result);
}


/* Read the contents of a given system variable */
void readvarval(const char *name, char *buffer, int buffmax)
{
  _kernel_swi_regs reg;

  reg.r[0] = (int)name;
  reg.r[1] = (int)buffer;
  reg.r[2] = buffmax;
  reg.r[3] = 0;		/* first call */
  reg.r[4] = 0;

  _kernel_swi(OS_ReadVarVal, &reg, &reg);

  /* if not a string, pretend it doesn't exist */
  if (reg.r[4] != 0)
    reg.r[2] = 0;

  buffer[reg.r[2]] = '\0';	/* terminate*/
}

/* End of c.Support */
