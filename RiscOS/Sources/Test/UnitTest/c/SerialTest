/* >c.SerialTest

TEST SOFTWARE (c) Element 14 Ltd. 1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    05 Feb 99       SBF     Created
1.01    08 Feb 99       SBF     Main structure complete
1.02    09 Feb 99       SBF     Serial port functions added
1.03    10 Feb 99       SBF     Data line and communication tests added
1.04    11 Feb 99       SBF     Control line test code started
1.05    15 Feb 99       SBF     Control line test completed (debugged);
                                baud rate test code added (subtest #1)
1.06    16 Feb 99       SBF     Baud rate subtest #2 added

Fully exercises the serial port; uses the dual serial driver (V0.21 or later required)
*/


/* Library includes */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* Project includes */
#include "support.h"
#include "display.h"
#include "msgs.h"
#include "serial_lib.h"

/* Global variables (this file only) */
static unsigned int i_handle = 0; /* Read stream handle (serial input) */
static unsigned int o_handle = 0; /* Write stream handle (serial output) */

/* Local definitions */
//#define MEDUSA    /* Define if using NEW loopback plug; otherwise leave undefined */

#define IO_STREAM "Devices#baud9600;data8;stop1;noparity;rts;size4096;thres32:$.Serial1"

#define LOOPBACK_TIMEOUT (200) /* TX -> RX loopback timeout, in centi-seconds */

#define CONTROL_LINE_TESTS (5) /* Number of control line tests */

#define TEST_PATTERN_COMM       (0x1F)
#define TEST_PATTERN_ZERO_ONE   (0x55) /* Binary = 01010101 */
#define TEST_PATTERN_ONE_ZERO   (0xAA) /* Binary = 10101010 */

#define DATA_LINE_BAUD_RATE     (115200) /* Baud rate to use for the data line test */

#define BAUD_RATES_AVAILABLE  (16)     /* Number of baud rates supported */
#define BAUD_RATE_TEST_SPEED  (38400)  /* Baud rate to use for the baud rate test */
#define BAUD_TEST_BUFFER_SIZE (3840)   /* Number of characters to TX/RX in baud rate test */
#define BAUD_ABORT_TIMEOUT    (300)    /* Abort timeout (for baud rate test) in cs */
#define BAUD_MIN_TIME         (109)    /* Minumum time allowed for transfer of 3840 characters, in cs */
#define BAUD_MAX_TIME         (111)    /* Maximum time allowed for transfer of 3840 characters, in cs */

#ifdef MEDUSA
#define CHECK_MASK (0xF0003) /* RI line driven by new loopback plug */
#else
#define CHECK_MASK (0xB0003) /* RI line NOT driven by old loopback plug */
#endif


/* TypeDefs */
typedef struct
{
  unsigned int asserted;
  unsigned int required;
} line_test_t;



/* Functions */

/*
 * Function   : open_streams
 * Description: opens the serial port I/O streams
 * Params in  : none
 * Params out : none
 * Returns    : FALSE if failure, TRUE for success
 */

unsigned int open_streams(void)
{
  /* Attempt to open both serial streams */
  i_handle = serial_open_stream(IO_STREAM, Serial_Input);
  o_handle = serial_open_stream(IO_STREAM, Serial_Output);

  /* Check whether stream opening was successful; if not clear up and exit */
  if (i_handle == 0 || o_handle == 0)
  {
    serial_close_stream(i_handle);
    serial_close_stream(o_handle);
    return FALSE;
  }

  /* Streams opened successfully; indicate all OK */
  return TRUE;
}


/*
 * Function   : close_streams
 * Description: closes the serial port I/O streams
 * Params in  : none
 * Params out : none
 * Returns    : nothing
 */

void close_streams(void)
{
  serial_close_stream(i_handle);
  serial_close_stream(o_handle);
}


/*
 * Function   : flush_input
 * Description: flushes the input buffer.  This works by allocating
 *              a buffer in memory, filling it with the bytes in the
 *              serial input stream, then throwing it away
 * Params in  : none
 * Params out : none
 * Returns    : nothing
 */

void flush_input(void)
{
  char *memory;
  int bytes_in_buffer = serial_size(i_handle);

  if (bytes_in_buffer == 0) return;                                             /* Nothing to do */

  memory = malloc((size_t)bytes_in_buffer);
  if (memory == 0)
    return;

  serial_read_stream(i_handle, memory, bytes_in_buffer);                        /* Read the bytes */

  free(memory);                                                                 /* Throw them away */
}


/*
 * Function   : flush_stream
 * Description: flushes the given stream/buffer
 * Params in  : unsigned int stream; file handle of stream
 * Params out : none
 * Returns    : nothing
 */

void flush_stream(unsigned int stream)
{
  /* Flush the specified stream */
  osargs_ioctl(stream, IOCtl_flush_stream, write_flag, 0, NULL);
}


/*
 * Function   : flush_streams
 * Description: flushes both serial I/O streams
 * Params in  : none
 * Params out : none
 * Returns    : nothing
 */

void flush_streams(void)
{
  flush_stream(i_handle); /* Input stream */
  flush_stream(o_handle); /* Output stream */
}


/*
 * Function   : write_read_char
 * Description: writes the given byte to the serial port output stream, waits
 *              for a time (determined by LOOPBACK_TIMEOUT), then reads the input buffer
 *              to check that the byte is present and identical to that despatched
 * Params in  : char byte; byte to be written
 * Params out : none
 * Returns    : PASSED if successful, FAILED if write error or read timeout
 */

int write_read_byte(char byte)
{
  /* Write a byte to the serial port, wait a little (LOOPBACK_TIMEOUT cs), then read it back and check it's correct */
  int time;
  int error = FALSE;
  int byte_read;

  error = serial_write_byte(o_handle, byte);                                    /* Write the byte */
  if (error == -1) return FAILED;                                               /* If it didn't work, then FAIL */

  time = clock() + LOOPBACK_TIMEOUT;                                            /* Set up the timeout */
  do
  {
    byte_read = serial_read_byte(i_handle);                                     /* Attempt to read a byte */
  } while ((time > clock()) && (byte_read == -1));                              /* Until timeout, or byte received */

  if (byte_read == -1) return FAILED;                                           /* Timeout occurred; therefore FAIL */

  if (byte_read == (int)byte) return PASSED;                                    /* If the byte RXed matches that TXed then PASS */

  return FAILED;                                                                /* If not, then FAIL */
}


/*
 * Function   : read_baud_rate
 * Description: reads the present serial baud rate
 * Params in  : none
 * Params out : none
 * Returns    : present baud rate, or zero if error occurred
 */

unsigned int read_baud_rate(void)
{
  _kernel_oserror *error;
  unsigned int data;

  error = osargs_ioctl(i_handle, IOCtl_baud_rate, read_flag, 0, &data);

  if (!error)
    return data;
  else
    return 0; /* Invalid baud rate, therefore can return this as error condition */
}


/*
 * Function   : write_baud_rate
 * Description: sets the serial baud rate
 * Params in  : unsigned int baud; required baud rate
 * Params out : none
 * Returns    : nothing
 */

void write_baud_rate(unsigned int baud)
{
  osargs_ioctl(o_handle, IOCtl_baud_rate, write_flag, baud, NULL);
}


/*
 * Function   : read_comm_state
 * Description: reads the communications state of the serial port
 * Params in  : none
 * Params out : none
 * Returns    : present communications state, or zero if error occurred
 */

unsigned int read_comm_state(void)
{
  _kernel_oserror *error;
  unsigned int data;

  error = osargs_ioctl(i_handle, IOCtl_data_format, read_flag, 0, &data);

  if (!error)
    return data;
  else
    return 0; /* Invalid comm state, therefore can return this as error condition */
}


/*
 * Function   : write_comm_state
 * Description: sets the communications state of the serial port
 * Params in  : unsigned int state; required communications state
 * Params out : none
 * Returns    : nothing
 */

void write_comm_state(unsigned int state)
{
  osargs_ioctl(o_handle, IOCtl_data_format, write_flag, state, NULL);
}


/*
 * Function   : read_ctrl_line_state
 * Description: reads the state of the serial port control lines
 * Params in  : none
 * Params out : none
 * Returns    : control line state
 */

unsigned int read_ctrl_line_state(void)
{
  unsigned int data;

  osargs_ioctl(i_handle, IOCtl_control_lines, read_flag, 0, &data);
  return data;
}


/*
 * Function   : write_ctrl_line_state
 * Description: sets the state of the serial port control lines
 * Params in  : unsigned int state; required control line state
 * Params out : none
 * Returns    : nothing
 */

void write_ctrl_line_state(unsigned int state)
{
  osargs_ioctl(o_handle, IOCtl_control_lines, write_flag, state, NULL);
}


/*
 * Function   : debug_lines
 * Description: allows the state of the control lines to be printed for debugging purposes
 * Params in  : char* string; debug string to output (precedes control line state)
 *              unsigned int lines; word representing the control line state
 * Params out : none
 * Returns    : nothing
 */

void debug_lines(char* string, unsigned int lines)
{
  _kernel_oswrch(4);
  printf("%s ", string);
  if (lines & ctrl_line_DTR) printf("DTR ");
  if (lines & ctrl_line_RTS) printf("RTS ");
  if (lines & ctrl_line_CTS) printf("CTS ");
  if (lines & ctrl_line_DSR) printf("DSR ");
  if (lines & ctrl_line_DCD) printf("DCD ");
  if (lines & ctrl_line_RI) printf("RI ");
  printf("\n");
  _kernel_oswrch(5);
}


/*
 * Function   : control_line_test
 * Description: tests the serial port control lines
 * Params in  : none
 * Params out : none
 * Returns    : PASSED if all subtests successful, FAILED otherwise
 */

int control_line_test(void)
{
  unsigned int old_ctrl_line_state;
  unsigned int test_state, new_state, check_state, reqd_state;
  int test_status = PASSED; /* Assume passed until proved otherwise */
  line_test_t test[CONTROL_LINE_TESTS] = 0;
  int test_number;

  /* Initialise control line permutations */
  test[0].asserted = (ctrl_line_DTR | ctrl_line_RTS);
  test[0].required = (ctrl_line_CTS | ctrl_line_DSR | ctrl_line_DCD);

  test[1].asserted = (ctrl_line_DTR);
  test[1].required = (ctrl_line_DSR | ctrl_line_DCD);

  test[2].asserted = 0;
  test[2].required = (ctrl_line_RI);

  test[3].asserted = (ctrl_line_RTS);
  test[3].required = (ctrl_line_CTS | ctrl_line_DCD | ctrl_line_RI);

  test[4].asserted = (ctrl_line_DTR | ctrl_line_RTS);
  test[4].required = (ctrl_line_CTS | ctrl_line_DSR | ctrl_line_DCD);
  /* End of control line permutations */

  old_ctrl_line_state = read_ctrl_line_state();                                 /* Store present control line state */

  for (test_number = 0; test_number < CONTROL_LINE_TESTS; test_number++)
  {
    test_state = test[test_number].asserted;                                    /* Obtain the control line test state */
    write_ctrl_line_state(test_state);                                          /* Write control line state */
    new_state = read_ctrl_line_state();                                         /* Read the new control line state */
    check_state = (new_state & CHECK_MASK);                                     /* Calculate the verification state */
    reqd_state = test[test_number].required;                                    /* Obtain the required state */
    reqd_state |= test_state;
    reqd_state &= CHECK_MASK;                                                   /* Calculate the actual required state */

/*    debug_lines("Test :", test_state); */
/*    debug_lines("Read :", new_state); */
/*    debug_lines("State:", check_state); */
/*    debug_lines("Reqd :", reqd_state); */
/*    debug_lines("----------", 0); */

    if (check_state != reqd_state) test_status = FAILED;                        /*If result isn't as expected then fail */
  }

  write_ctrl_line_state(old_ctrl_line_state);                                   /* Restore initial control line state */
  return test_status;                                                           /* Return the overall result */
}


/*
 * Function   : data_line_test
 * Description: tests the serial port data lines
 * Params in  : none
 * Params out : none
 * Returns    : PASSED if all subtests successful, FAILED otherwise
 */

int data_line_test(void)
{
  unsigned int old_baud_rate;
  int sub_test_status;
  int test_status = PASSED; /* Assume passed until proved otherwise */
  int bit_pattern, bit = 0;

  old_baud_rate = read_baud_rate();                                             /* Store present baud rate */
  write_baud_rate(DATA_LINE_BAUD_RATE);                                         /* Select test baud rate */

  /* Subtest #1: assert each line individually */
  do
  {
    bit_pattern = (1 << bit);                                                   /* Assert a single data line */
    sub_test_status = write_read_byte((char)bit_pattern);                       /* Run the test */
    bit++;                                                                      /* Shift to next bit */
  } while ((bit < 7) && (sub_test_status == PASSED));
  if (sub_test_status == FAILED) test_status = FAILED;                          /* Check result; set FAIL flag if failed */

  /* Subtest #2: test using 0101 bit pattern */
  sub_test_status = write_read_byte((char)TEST_PATTERN_ZERO_ONE);               /* Run the test */
  if (sub_test_status == FAILED) test_status = FAILED;                          /* Check result; set FAIL flag if failed */

  /* Subtest #3: test using 1010 bit pattern */
  sub_test_status = write_read_byte((char)TEST_PATTERN_ONE_ZERO);               /* Run the test */
  if (sub_test_status == FAILED) test_status = FAILED;                          /* Check result; set FAIl flag if failed */

  write_baud_rate(old_baud_rate);                                               /* Restore initial baud rate */
  return test_status;                                                           /* Return the overall result */
}


/*
 * Function   : comm_test
 * Description: tests all serial port communication states
 * Params in  : none
 * Params out : none
 * Returns    : PASSED if all subtests successful, FAILED otherwise
 */

int comm_test(void)
{
  unsigned int old_comm_state, test_comm_state;
  int sub_test_status, test_status = PASSED; /* Assume passed until proved otherwise */
  unsigned int data_length, stop_bits, parity;

  old_comm_state = read_comm_state();                                           /* Store present comm state */

  for (data_length = 5; data_length <= 8; data_length++)                        /* Cycle through word lengths */
  {
    for (stop_bits = 1; stop_bits <= 2; stop_bits++)                            /* Cycle through stop bit possibilities */
    {
      for (parity = 0; parity <=2; parity++)                                    /* Cycle through parity possibilities */
      {
        test_comm_state = (data_length | (stop_bits << 8) | (parity << 16));    /* Set up comm state appropriately */
        write_comm_state(test_comm_state);                                      /* Configure the new state */
        sub_test_status = write_read_byte(TEST_PATTERN_COMM);                   /* TX and RX the test byte */
        if (sub_test_status == FAILED) test_status = FAILED;                    /* Check result; set FAIL flag if failed */
      }
    }
  }

  write_comm_state(old_comm_state);                                             /* Restore initial comm state */
  return test_status;                                                           /* Return the overall result */
}


/*
 * Function   : baud_rate_test
 * Description: tests the serial port using each baud rate; also ensures
 *              that the rate specified is actually what is obtained
 * Params in  : none
 * Params out : none
 * Returns    : PASSED if all subtests successful, FAILED otherwise
 */


int baud_rate_test(void)
{
  /* Test communication at each baud rate */
  unsigned int old_comm_state, old_baud_rate;
  int sub_test_status, test_status = PASSED; /* Assume passed until proved otherwise */
  unsigned int baud_rate[BAUD_RATES_AVAILABLE] = {50, 75, 110, 150, 300, 600, 1200, 1800, 2400,
                                                  3600, 4800, 7200, 9600, 19200, 57600, 115200};
  unsigned int baud_test;
  int start_time, end_time, timeout, time_taken;
  char *buffer;
  int bytes_in_buffer;

  old_comm_state = read_comm_state();                                           /* Store present comm state */
  old_baud_rate = read_baud_rate();                                             /* Store present baud rate */

  /* Subtest #1: test TX/RX at each baud rate */
  for (baud_test = 0; baud_test < BAUD_RATES_AVAILABLE; baud_test++)
  {
    write_baud_rate(baud_rate[baud_test]);                                      /* Set the baud rate as required */
    sub_test_status = write_read_byte(TEST_PATTERN_ZERO_ONE);                   /* Test that a byte can be TXed/RXed */
    if (sub_test_status == FAILED) test_status = FAILED;                        /* Check result; set FAIL flag if failed */
  }

  /* Subtest #2: baud rate test (gauge the actual rate against that specified) */
  write_baud_rate(BAUD_RATE_TEST_SPEED);                                        /* Set the baud to the test rate */
  write_comm_state(data_length_8 | stop_bits_2 | no_parity);                    /* Set the communications state */
  flush_streams();                                                              /* Flush the I/O streams */
  buffer = malloc(BAUD_TEST_BUFFER_SIZE);                                       /* Allocate a buffer */
  if (buffer != NULL)                                                           /* If memory allocation was ok... */
  {
    memset(buffer, TEST_PATTERN_ONE_ZERO, BAUD_TEST_BUFFER_SIZE);               /* Fill the buffer with bytes */
    start_time = clock();                                                       /* Record the start time */
    timeout = start_time + BAUD_ABORT_TIMEOUT;                                  /* Calculate the timeout period */
    serial_write_stream(o_handle, buffer, BAUD_TEST_BUFFER_SIZE);               /* Copy the bytes to the serial output stream */
    do
    {
      bytes_in_buffer = serial_size(i_handle);                                  /* Count the bytes in the input buffer */
    } while ((timeout > clock()) && (bytes_in_buffer < BAUD_TEST_BUFFER_SIZE)); /* Until timeout, or all bytes received */
    end_time = clock();                                                         /* Record the completion time */
    time_taken = end_time - start_time;                                         /* Calculate the duration of the test */
    if ((time_taken < BAUD_MIN_TIME) || (time_taken > BAUD_MAX_TIME))
      test_status = FAILED;                                                     /* If time is outside defined limits, then FAIL */

    free(buffer);                                                               /* Free the memory allocated to the buffer */
    flush_streams();                                                            /* Flush the I/O streams */
  }
  else                                                                          /* If the memory allocation failed, then FAIL */
  {
    test_status = FAILED;
  }

  write_comm_state(old_comm_state);                                             /* Restore initial comm state */
  write_baud_rate(old_baud_rate);                                               /* Restore initial baud rate */
  return test_status;                                                           /* Return the overall result */
}


/*
 * Function   : serial_test
 * Description: exercises the serial port to check full functionality
 * Params in  : int test_mode; test mode (unused at present)
 * Params out : none
 * Returns    : nothing
 */

void serial_test(int test_mode)
{
  unsigned int stored_baud_rate, stored_comm_state;
  unsigned int streams_open = FALSE;
  int ctrl_lines_ok = TRUE; /* Control line subtest result */
  int data_lines_ok = TRUE; /* Data line subtest result */
  int comm_state_ok = TRUE; /* Comm subtest result */
  int baud_test_ok = TRUE;  /* Baud rate subtest result */
  int status = PASSED; /* Variable for overall test result; assume passed until proved otherwise */

  streams_open = open_streams();                                                    /* Open the serial port streams */
  if (streams_open)                                                                 /* If the streams are open then run tests */
    {
      stored_baud_rate = read_baud_rate();                                          /* Store present baud rate */
      stored_comm_state = read_comm_state();                                        /* Store present comm state */

      /* Control line test */
      ctrl_lines_ok = control_line_test();                                          /* Control line test */

      /* Data line test */
      data_lines_ok = data_line_test();                                             /* Data line test */
      flush_streams();                                                              /* Flush the I/O streams */

      /* Comms test */
      comm_state_ok = comm_test();                                                  /* Check whether data can be TXed & RXed */
      flush_streams();                                                              /* Flush the I/O streams */

      /* Baud rate test */
      baud_test_ok = baud_rate_test();                                              /* Test the port at differing baud rates */
      flush_streams();                                                              /* Flush the I/O streams */

      /* End of tests */

      write_baud_rate(stored_baud_rate);                                            /* Restore initial baud rate */
      write_comm_state(stored_comm_state);                                          /* Restore initial comm state */
      close_streams();                                                              /* Close the serial port streams */

      /* Discover overall result */
      if (ctrl_lines_ok && data_lines_ok && comm_state_ok && baud_test_ok)
        status = PASSED;                                                            /* All tests passed */
      else
        status = FAILED;                                                            /* At least one test failed */
    }
  else                                                                              /* Streams wouldn't open; therefore fail */
    {
      status = FAILED;
    }

  /* Display and log the result */
  display_status(SERIALTEST, status);
  log_status(SERIALTEST, status);
}


/* End of c.SerialTest */
