/* >c.UserDiag

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************
                                                                        
Vers    Date            Name    Comment                                 
------  ---------       ---     -------------------------------------------
1.00    18 Apr 97       BAR     Initial writing
1.01    28 Apr 97       BAR     Added code to show the Licence information.
1.02    02 May 97       BAR     Added VDU 4 to enable text cursor.
1.03    08 May 97       BAR     Initilise the display line variables.
                                Only do licence info in user mode.
                                Wait 10 secs at end of test - life only
1.04    16 May 97       BAR     Restore DRAM Test
1.05    20 May 97       BAR     Add call to define block_char.
1.06    21 May 97       BAR     Ensure licence text is in 'text' colour.
1.07    02 Jun 97       BAR     Change order of tests, so that ones needing
                                user reactions are away from the borrom of
                                the screen. display_cycle_count() now get
                                the test_mode passed to it.
                                Use tab() when showing licence msg.
1.08    05 Jun 97       BAR     Updated to use 'SAFE' screen cordinates for
                                licence information.
                                Add get out of life test functionaity.
1.09    09 Jun 97       BAR     Add code to get us out of standby mode !
1.10    23 Jun 97       BAR     Ensure second screen of licence info starts
                                on line 3
1.11    14 Jul 97       BAR     Ensure when in Life mode that system font
                                characters are set to 8x16 pixels instead of
                                8x8.
1.12    21 Aug 97       BAR     Only display/include licence info. if NC115
                                and NC116.
1.13    04 Sep 97       BAR     Add support to select which tests to test.

Will perform the user diagnostic testing !!! 
*/

#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "Standby.h"
#include "module.h"
#include "UserDiag.h"
#include "display.h"
#include "support.h"
#include "ROMCheck.h"
#include "DRAMTest.h"
#include "NVRAMTest.h"
#include "FaultCodes.h"
#include "system.h"
#include "Modem.h"
#include "InputTest.h"
#include "Sound.h"
#include "SCardTest.h"
#include "msgs.h"

void user_diag_test(int test_mode, int test_pattern, int stop_failure, int target_cycle, time_t target_duration)
/* Do the user diagnostic test !! */
/* test_mode       tells us we are either USER ot LIFE */
/* test_pattern    tells us which tests to run */
/* target_cycle    tells us for how many cycles to test for. */
/* target_duration tells us for how long we are to test for. */

/* test_pattern is a bit pattern as follows :-
     Bit Test
     0   ROM Checksum
     1   DRAM check
     2   EPROM Checksum
     3   System Check
     4   Modem Check
     5   Audio Test
     6   Smart Card check
     7   Operator Input Device Check (Keyboard, Remote Control)
     8   Report any logged error codes
     9   Flash ROM Checksum
 */

{
        int cycle_count=0;
        int cycle_limit=0;
        int failed_count=0;
        int red_led_state;
        int green_led_state;
        int overall_status=FAILED;
        int life_abort=FALSE;
        _kernel_swi_regs reg;

        /* Humm lets do some intiliseation */
        /* Ok, get out of standby mode :-)) ! */
        /* has no effect when nc is not in standby mode */
        /* so can call when in user mode */
        reg.r[0] = 0;
        _kernel_swi(Standby_Online, &reg, &reg);
        /* Do a VDU 5 to enable the graphics cursor */
        _kernel_oswrch(5);

        if (test_mode==MODE_LIFE){
                /* Life mode set system font size */
                change_syst_font_size(8,16,TRUE,TRUE);
        }
        define_block_char();

        set_forground_colour(COLOUR_TEXT);
        set_background_colour(COLOUR_BLACK);
        clear_whole_screen();

        /* note the led status for restoring to at the end */
        red_led_state=get_led_state(LED_RED);
        green_led_state=get_led_state(LED_GREEN);
        display_status_led(test_mode,RUNNING);

        if (test_mode==MODE_USER){
                /* user mode set cycle_limit */
                cycle_limit=1;
#ifdef RCA
                /* Display licence information */
                /* Only for OSes built with system=RCA */
                show_licence_info();
#endif
        }

        display_mode(test_mode);
        clear_res_store(0,test_mode);

        do{
                cycle_count++;
                if  (test_mode==MODE_LIFE){
                        /* Life mode - show counter */
                        display_cycle_count(cycle_count,failed_count,test_mode);
                        clear_output();
                }
                reset_display_line_vars();
                if ((test_pattern & ROM)==TRUE){
                        ROM_Checksum();
                }
                if ((test_pattern & DRAM)==TRUE){
                        dram_test(test_mode);
                }
                if ((test_pattern & NVRAM)==TRUE){
                        nv_ram_checksum();
                }
                if ((test_pattern & LOGGEDCODES)==TRUE){
                        FaultCodes();
                }
                if ((test_pattern & SYSTEM)==TRUE){
                        system_test();
                }
                if ((test_pattern & USERINPUT)==TRUE){
                        Input_Test(test_mode);
                }
                if ((test_pattern & AUDIO)==TRUE){
                        sound_test(test_mode);
                }
                if ((test_pattern & SMARTCARD)==TRUE){
                        smartcard_test(test_mode);
                }
                if ((test_pattern & MODEM)==TRUE){
                        Modem_Test(test_mode);
                }
                if ((test_pattern & FLASH)==TRUE){
                        Flash_Checksum();
                }

                failed_count=check_logged_status(failed_count,cycle_count);
                clear_res_store(cycle_count,test_mode);
                if  (test_mode==MODE_LIFE){
                        /* Wait 10 secs just for the hell of it */
                        /* Wait for OK key in the meantime */
                        flush_keyboard();
                        life_abort=get_key_timed(CONT_KEY,10);
                }
        }while (cycle_count!=cycle_limit && life_abort!=TRUE);

        /* We'll only ever get here if in user mode ! */
        if (failed_count==0){
                overall_status=PASSED;
        }
        /* Set the LED's to reflect the status */
        display_status_led(test_mode,overall_status);

        if  (test_mode==MODE_USER){
                /* wait for the user to respond */
                wait_for_cont();

                /* restore the led status */
                set_led_state(LED_RED,red_led_state);
                set_led_state(LED_GREEN,green_led_state);

                /* Restore default colours */
                _kernel_oswrch(20);

                /* Restore default character set */
                _kernel_osbyte(25,0,0);

                /* Force a screen re-draw */
                reg.r[0] = -1;
                reg.r[1] = 0;
                reg.r[2] = 0;
                reg.r[3] = 4800;
                reg.r[4] = 6400;
                _kernel_swi(Wimp_ForceRedraw, &reg, &reg);
        }else{
                /* restore the led status */
                set_led_state(LED_RED,red_led_state);
                set_led_state(LED_GREEN,green_led_state);

                /* Restore default colours */
                _kernel_oswrch(20);

                /* Restore default character set */
                _kernel_osbyte(25,0,0);
        }
}

#ifdef RCA
void show_licence_info(void)
/* Show to the user the licence information */
{
        int i;

        set_forground_colour(COLOUR_TEXT);
        /* Show the licence info in two chunks. */
        for (i=0; i<=MAX_LICENCE_MSG1; i++){
                tab(SCRN_SAFELEFTMARGIN,(i+SCRN_SAFESTART));
                printf("%s",licence_info_msg[i]);
        }
        wait_for_cont();
        clear_whole_screen();

        set_forground_colour(COLOUR_TEXT);
        for (i=MAX_LICENCE_MSG1+1; i<=MAX_LICENCE_MSG2; i++){
                tab(SCRN_SAFELEFTMARGIN,(i-MAX_LICENCE_MSG1-1+SCRN_SAFESTART));
                printf("%s",licence_info_msg[i]);
        }
        wait_for_cont();
        clear_whole_screen();
}
#endif

void reset_display_line_vars(void)
/* (Re)Set the display line variables */
{
        test_status_line=1;
        subtest_status_line=0;
        info_line=INFO_START;
        instruct_line=0;
}
