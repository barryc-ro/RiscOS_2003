/* >c.UserDiag

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    18 Apr 97       BAR     Initial writing
1.01    28 Apr 97       BAR     Added code to show the Licence information.
1.02    02 May 97       BAR     Added VDU 4 to enable text cursor.
1.03    08 May 97       BAR     Initilise the display line variables.
                                Only do licence info in user mode.
                                Wait 10 secs at end of test - life only
1.04    16 May 97       BAR     Restore DRAM Test.
1.05    20 May 97       BAR     Add call to define block_char.
1.06    21 May 97       BAR     Ensure licence text is in 'text' colour.
1.07    02 Jun 97       BAR     Change order of tests, so that ones needing
                                user reactions are away from the borrom of
                                the screen. display_cycle_count() now get
                                the test_mode passed to it.
                                Use tab() when showing licence msg.
1.08    05 Jun 97       BAR     Updated to use 'SAFE' screen cordinates for
                                licence information.
                                Add get out of life test functionaity.
1.09    09 Jun 97       BAR     Add code to get us out of standby mode !
1.10    23 Jun 97       BAR     Ensure second screen of licence info starts
                                on line 3
1.11    14 Jul 97       BAR     Ensure when in Life mode that system font
                                characters are set to 8x16 pixels instead of
                                8x8.
1.12    21 Aug 97       BAR     Only display/include licence info. if NC115
                                and NC116.
1.13    04 Sep 97       BAR     Add support to select which tests to test.
1.14    18 Sep 97       BAR     Add #ifdefs to include/exclude tests as reqd.
                                Remove licence support - no needed.
1.15    22 Sep 97       BAR     Add support for Daytona LED control. Change
                                to use LED_PASS and FAIL.
1.16    02 Oct 97       BAR     Add support for stop on failure.
1.17    06 Oct 97       BAR     Correct mistakes in #ifdefs
1.18    07 Oct 97       RLT     Added #ifdef around system test
1.19    17 Nov 97       BAR     Now use COLOUR_FORGROUND and
                                COLOUR_BACKGROUND, instead of descrete
                                colours.
1.20    17 Nov 97       BAR     Re-instate VDU5 command.
1.21    18 Nov 97       BAR     Ensure, LED's are returned to their default
                                status ... hard wired ... cos we can't read
                                the status of the LED's on a Daytona !!!!!
1.22    18 Nov 97       BAR     Added check for test pattern=0, thus do all
                                tests.
1.23    19 Nov 97       BAR     Changed the LED display code to match the
                                new led states. Tidy up the finaliseation
                                routines.
1.24	21 Nov 97	RLT	Fixed read_interval_timer to actually return
				a time :)
1.25	24 Nov 97	RLT	Fixed read_interval_timer and reset_interval_timer
				to return correct values rather than my bodge on
				the 21st to get it running over the weekend ;)
				Duration is now inserted into the cycle_store
				structure.
1.26	25 Nov 97	BAR	Ensure that once we fail, we only flash fail
				on the leds.
				Ensure that the duration aborting works.

Will perform the user diagnostic testing !!!
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "Standby.h"
#include "module.h"
#include "UserDiag.h"
#include "display.h"
#include "ROMCheck.h"
#include "DRAMTest.h"
#include "NVRAMTest.h"
#include "system.h"
#include "Modem.h"
#include "InputTest.h"
#include "Sound.h"
#include "msgs.h"
#ifdef SYSDaytona
#include "FlashCheck.h"
#endif
#ifndef SYSDaytona
#include "FaultCodes.h"
#include "SCardTest.h"
#endif
#include "usermode.h"

/* Well as the build for Daytona is grosly wrong, we have to use totally
 * inappropiate build tags for SYSTEM and MACHINE. So lets re-define them to
 * something far more meaningful and sensible.
 */
#ifdef SYSMorris2
#define SYSDaytona
#endif

#ifdef MACHMorris
#define MACHDaytona
#endif

int read_interval_timer(void);
void reset_interval_timer(void);

void user_diag_test(int test_mode, int test_pattern, int stop_failure, int target_cycle, float target_duration)
/* Do the user diagnostic test !!
 * test_mode       tells us we are either USER ot LIFE.
 * test_pattern    tells us which tests to run.
 * stop_failure    tells us that we are to stop on a failure. 0=False !0=TRUE
 * target_cycle    tells us for how many cycles to test for. 000000 -999999
 * target_duration tells us for how long we are to test for. 0000.00-9999.99
 */

/* test_pattern is a bit pattern as follows :-
     Bit Test
     0   ROM Checksum
     1   DRAM check
     2   EPROM Checksum
     3   System Check
     4   Modem Check
     5   Audio Test
     6   Smart Card check
     7   Operator Input Device Check (Keyboard, Remote Control)
     8   Report any logged error codes
     9   Flash ROM Checksum
 */

{
        int failed_count=0;
        int failed_count_pre=0;
        int failure_start_time=0;
        int failure_stop_time =0;
        int duration_now=0;
        int current_cycle_status=FAILED;
        int current_cycle_led_status=LED_RUN_PASSED;
        int overall_status=FAILED;
        int overall_led_status=LED_COM_FAILED;
        int life_abort=FALSE;
        int duration_abort=FALSE;
        _kernel_swi_regs reg;

/* We cannot read the LED status on a Datona */
#ifndef MACHDaytona
        int red_led_state;
        int green_led_state;
#endif

        /* Check test pattern for 0 ... if so do all tests */
        if (test_pattern==0){
              /* 0 means do all tests */
              test_pattern=0xFFFF;
        }

        /* Humm lets do some intiliseation */
        /* Lets check my loop terminators */
        if (target_cycle != 0)
        {
            cycle_store.tcycle = target_cycle;
        }

        /* reset the interval timer */
        reset_interval_timer();

        if (target_duration!=0){
                /* we've got a time duration */
                /* calculate the stop time, based on target_duration */
                cycle_store.tduration=(int)(target_duration*HOUR_CSEC);
        }
        /* Lets change stop_failure to FALSE/TRUE */
        stop_failure = (stop_failure==0) ? FALSE : TRUE;

/* Don't need to get out of standby mode on on Daytona products */
#ifndef MACHDaytona
        /* Ok, get out of standby mode :-)) ! */
        /* has no effect when nc is not in standby mode */
        /* so can call when in user mode */
        reg.r[0] = 0;
        _kernel_swi(Standby_Online, &reg, &reg);
#endif

        /* Do a VDU 5 to enable the graphics cursor */
        _kernel_oswrch(5);

/* Don't change system font on Daytona products */
#ifndef MACHDaytona
        if (test_mode==MODE_LIFE){
                /* Life mode set system font size */
                change_syst_font_size(8,16,TRUE,TRUE);
        }
#endif
        define_block_char();

        set_forground_colour(COLOUR_FOREGROUND);
        set_background_colour(COLOUR_BACKGROUND);
        clear_whole_screen();

/* We cannot read the LED status on a Datona */
#ifndef MACHDaytona
        /* note the led status for restoring to at the end */
        red_led_state=get_led_state(LED_FAIL);
        green_led_state=get_led_state(LED_PASS);
#endif

        display_status_led(test_mode,LED_STARTING);
        display_status_led(test_mode,LED_RUNNING);
        display_mode(test_mode);
        clear_res_store(0,test_mode);

        do{
                cycle_store.cycle++;
                if  (test_mode==MODE_LIFE){
                        /* Life mode - show counter */
/*                         display_cycle_count(cycle_count,failed_count,test_mode); */
/*                         display_cycle_count(test_mode,cycle_count,cycle_limit,failed_count, */
/*                                                       duration,duration_limit,duration_fail); */
                        display_cycle_count(cycle_store,failed_count);
                        clear_output();
                }
                reset_display_line_vars();
                if ((test_pattern & (1 << ROM)) > 0){
                        ROM_Checksum();
                }
                if ((test_pattern & (1 << DRAM)) > 0){
                        dram_test(test_mode);
                }
                if ((test_pattern & (1 << NVRAM)) > 0){
                        nv_ram_checksum();
                }
/* Daytona : Logged Fault Codes NOT available. */
#ifndef SYSDaytona
                if ((test_pattern & (1 << LOGGEDCODES)) > 0){
                        FaultCodes();
                }
#endif
                if ((test_pattern & (1 << SYSTEM)) > 0){
                        system_test();
                }
                if ((test_pattern & (1 << USERINPUT)) > 0){
                        Input_Test(test_mode);
                }
                if ((test_pattern & (1 << AUDIO)) > 0){
                        sound_test(test_mode);
                }
/* Daytona : Smart Card NOT available. */
#ifndef SYSDaytona
                if ((test_pattern & ( 1 << SMARTCARD)) > 0){
                        smartcard_test(test_mode);
                }
#endif
                if ((test_pattern & (1 << MODEM)) > 0){
                        Modem_Test(test_mode);
                }
/* Daytona : Flash Rom available. */
#ifdef SYSDaytona
                if ((test_pattern & (1 << FLASH)) > 0){
                        Flash_Checksum();
                }
#endif

                failed_count_pre=failed_count;
                failed_count=check_logged_status(failed_count,cycle_store.cycle);

                /* set some variables to indicate the current cycle status */

                current_cycle_status     = (failed_count != failed_count_pre) ? FAILED : PASSED;
                current_cycle_led_status = (current_cycle_led_status==LED_RUN_FAILED) ?
                				LED_RUN_FAILED :
                				(failed_count != failed_count_pre) ?
                					LED_RUN_FAILED :
                					LED_RUN_PASSED;

                if ((current_cycle_status == FAILED) && (cycle_store.ffcycle == 0))
                    cycle_store.ffcycle = cycle_store.cycle;

                if ((current_cycle_status == FAILED) && (cycle_store.ffduration == 0))
                    cycle_store.ffduration = cycle_store.duration;

                clear_res_store(cycle_store.cycle,test_mode);
                if  (test_mode==MODE_LIFE){
                        /* check to see if we are stop on fail and we've failed */
                        /* if so..... then */
                        /*    show space bar msg */
                        /*    fiddle the times */
                        /* else */
                        /*    Wait 10 secs just for the hell of it */
                        /*    Wait for OK key in the meantime */

                        if ((stop_failure==TRUE) && (current_cycle_status == FAILED)){
                                /* we failed this cycle and we're to stop on failure */
                                /* Indicate via the LED's we've stopped */
                                display_status_led(test_mode,LED_STOPPED);
                                failure_start_time=read_interval_timer();
                                wait_for_cont();
                                failure_stop_time=read_interval_timer();
                                cycle_store.tduration=cycle_store.tduration+(failure_stop_time-failure_start_time);
                        }else{
                                /* we didn't and/or we're not stoping on failure */
                                flush_keyboard();
                                life_abort=get_key_timed(CONT_KEY,10);
                        }
                        /* display the current status in the LED's */
                        display_status_led(test_mode,current_cycle_led_status);
                }
                duration_now=read_interval_timer();
                cycle_store.duration = duration_now;

		if (cycle_store.tduration!=0)
		{
	                if (duration_now >= cycle_store.tduration)
        	            duration_abort = TRUE;
                }
        } while (cycle_store.cycle!=cycle_store.tcycle && life_abort!=TRUE && duration_abort!=TRUE);

/*         printf ("cycle_store.cycle: %d\n", cycle_store.cycle); */
/*         printf ("cycle_store.tcycle: %d\n", cycle_store.tcycle); */
/*         printf ("life_abort: %d\n", life_abort); */
/*         printf ("duration_now:%d\n", duration_now); */
/*         printf ("cycle_store.tduration: %d\n", cycle_store.tduration); */

        /* We'll only ever get here if in user mode ! */

        /* set the overalll status flags */
        overall_status     = (failed_count==0) ? PASSED         : FAILED;
        overall_led_status = (failed_count==0) ? LED_COM_PASSED : LED_COM_FAILED;
        /* Set the LED's to reflect the status */
        /* now display the test status in the LEDs */
        display_status_led(test_mode,overall_led_status);

        if  (test_mode==MODE_USER){
                /* wait for the user to respond */
                wait_for_cont();
        }

/* We cannot read the LED status on a Daytona */
#ifndef MACHDaytona
        /* restore the led status */
        set_led_state(LED_FAIL,red_led_state);
        set_led_state(LED_PASS,green_led_state);
#else
        set_led_state(LED_FAIL,LED_OFF);
        set_led_state(LED_PASS,LED_ON);
        set_led_state(LED_RUNNING,LED_OFF);
#endif

        /* Put back into text mode... BRIAN!!! */
        _kernel_oswrch(4);

        /* Restore default colours */
        _kernel_oswrch(20);

        /* Restore default character set */
        _kernel_osbyte(25,0,0);

        if  (test_mode==MODE_USER){
                /* Force a screen re-draw */
                reg.r[0] = -1;
                reg.r[1] = 0;
                reg.r[2] = 0;
                reg.r[3] = 4800;
                reg.r[4] = 6400;
                _kernel_swi(Wimp_ForceRedraw, &reg, &reg);
        }
}

/*
 * (Re)Set the display line variables
 */
void reset_display_line_vars(void)
{
        test_status_line=1;
        subtest_status_line=0;
        info_line=INFO_START;
        instruct_line=0;
}

/*
 * read the interval timer and return the interval in CSecs.
 */
int read_interval_timer(void)
{
    unsigned int buff[2];

    _swix (OS_Word, _INR (0, 1), 3, &buff);
    return buff[0];
}

/*
 * reset the interval timer to 0 CSecs.
 */
void reset_interval_timer(void)
{
    unsigned int buff[2];

    memset (buff, 0, sizeof (buff));
    _swix (OS_Word, _INR (0, 1), 4, &buff);
}
