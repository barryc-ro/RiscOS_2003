/* >c.InputTest

ACORN TEST SOFTWARE (c) Acorn Computers Ltd. 1997

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    25 Mar 97       BAR     Initial writing
1.01    07 May 97       BAR     Add calls to clear the info area. Call
                                get_key_timed not get_yn_response.
1.02    08 May 97       BAR     Fix number input test now works and can be
                                made to fail. Change number test to use
                                display_info_noclear. Set status to
                                NOTCOMPLETE when timed out in Life mode.
1.03    21 May 97       BAR     Add support for coloured messages.
1.04    01 Oct 97       BAR     Add support for doing a full keyboard test.
1.05    06 Oct 97       BAR     Correct mistakes in #ifdefs
1.06    07 Oct 97       BAR     Swap support & display includes.
1.07    31 Oct 97       RLT     Fixed bug in scan_for_key changing the parameter in R1
                                passed to OS_Byte 121 to a bitwise OR (|) to make the
                                function work!
1.08    03 Nov 97       RLT     Corrected time interval in scan_for_key and corrected
                                display routines in ask_get_all_keys
1.09    03 Nov 97       RLT     Corrected key mappings so they actually map to the
                                intended keys!!!  Also modified the order of keys and
                                removed Insert with `.
1.10    11 Nov 97       RLT     Fixed \ keycode to correct code.
1.11    11 Nov 97       BAR     Ensure screen printout are correct.
1.12    19 Nov 97	RLT	Fixed failed key printing so it actually prints on the
				intended line.
        19 Nov 97       BAR     Only clear the instruction line after fist
                                key has been tested.

Will perform the user input tests
*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "module.h"
#include "InputTest.h"
#include "display.h"
#include "msgs.h"
#include "usermode.h"

/* declare and fill the structure to store the key codes in */
struct keybd_data
{
        char *name;                     /* text to indicate which key */
        int  keycode;                   /* internal low level key code to use */
}keybd_info[] = {
        "Email",        115, /* was 116 */
        "Cancel",        20, /* was 105 */
        "Back",         114, /* was 117 */
        "Home",          62,
        "Up",            57,
        "Down",          41,
        "Right",        121,
        "Left",          25,
        "Soft key 1",   116, /* was 113 */
        "Soft key 2",   117, /* was 114 */
        "Soft key 3",    22, /* was 115 */
        "Soft key 4",   118, /* was 20 */
        "`",             45, /* was Insert with keycode 61 but Daytona doesn't have an insert key and '`' was missing */
        "1",             48,
        "2",             49,
        "3",             17,
        "4",             18,
        "5",             19,
        "6",             24,
        "7",             36,
        "8",             21,
        "9",             38,
        "0",             39,
        "-",             23,
        "=",             93,
        "BkSp",          89, /* was 47 */
        "Del",          105, /* was 89 */
        "Tab",           96,
        "Q",             16,
        "W",             33,
        "E",             34,
        "R",             51,
        "T",             35,
        "Y",             68,
        "U",             53,
        "I",             37,
        "O",             54,
        "P",             55,
        "[",             56,
        "]",             88,
        "Caps Lock",     64,
        "A",             65,
        "S",             81,
        "D",             50,
        "F",             67,
        "G",             83,
        "H",             84,
        "J",             69,
        "K",             70,
        "L",             86,
        ";",             72,
        "'",             79,
        "Return",        73,
        "L Shift",        3,
        "Z",             97,
        "X",             66,
        "C",             82,
        "V",             99,
        "B",            100,
        "N",             85,
        "M",            101,
        ",",            102,
        ".",            103,
        "/",            104,
        "\\",           120, /* was 94 */
        "R Shift",        6,
        "HELP",         113, /* was 4 */
        "Space",         98,
        "Page Up",       63,
        "Page Down",     78
};


/*
 * Provides the User Input Test
 * Daytona ...
 *   Asks for and checks all keys in turn to be pressed.
 *   Structure 'ccccccccc' defines the key ledgend and the internal code.
 * Rest
 *   Asks for and checks 'ok' key
 *   Asks for and checks 0 thro 9 keys
 * All
 *   If running under cyclic mode, then ask for first key, if no responce in 20
 *   secs exit with fake pass.
 */

void Input_Test(int test_mode)
{
        int status=FALSE;

        display_status(USERINPUT,RUNNING);

#ifdef MACHDaytona
        /* We're playing on a Daytona */
        status = ask_get_all_keys(test_mode);
#else
        /* We're not playing on a daytona */
        if (test_mode==MODE_USER){
                /* Ok in user mode, ask the user to press a few keys !! */
                status=ask_get_ok_key(USER_WAIT_TIME);
                if (status==TRUE){
                        /* well user pressed the GOOD key in time */
                        /* Lets just do a few more  */
                        status=ask_get_numb_key();
                }
        }else{
                /* Ok in life cycle mode, ask user to press ok key. */
                status=ask_get_ok_key(LIFE_WAIT_TIME);
                if (status==INPUT_TIMED_OUT){
                        status=NOTCOMPLETED;
                }
        }
#endif
        display_status(USERINPUT,status);
        log_status(USERINPUT,status);
        clear_info();
}

int ask_get_ok_key(int wait_time)
/* Ask the user to press the OK key */
/* Wait a specified time and if not pressed abort */
{
        char str[80];
        int rtn=CONT;
        int key = FALSE;
        int wrong_input=0;

        do{
                /* Tell the user to press the 'OK' button */
                set_forground_colour(COLOUR_INSTRUCT);
                display_info(input_test_msg[00]);
                sprintf(str,"%s %d %s",input_test_msg[01],wait_time,input_test_msg[02]);
                display_info(str);
                key= get_key_timed(CONT_KEY,wait_time);

                clear_info();
                if (key!=TRUE){
                        /* Well the user didn't press the GOOD key or we Timed out */
                        /* Determin which is the case */
                        if (key==CONT){
                                /* we timed out - assume I/P and/or handset fault */
                                rtn=INPUT_TIMED_OUT;
                        }else{
                                set_forground_colour(COLOUR_INSTRUCT);
                                display_info(input_test_msg[05]);
                                wrong_input++;
                                if (wrong_input >=2){
                                        rtn=INPUT_WRONG_KEY;
                                }else{
                                        rtn=CONT;
                                }
                        }
                }else{
                        rtn=key;
                }
        }while(rtn==CONT);
        clear_info();
        return rtn;
}

int ask_get_numb_key(void)
{
        char str[80];
        int numb = 0;
        int rtn;
        int numbkey;
        int abort = FALSE;

        set_forground_colour(COLOUR_INSTRUCT);
        display_info_noclear(input_test_msg[03]);
        display_info_noclear(input_test_msg[04]);
        set_forground_colour(COLOUR_TEXT);
        display_info_noclear("->");
        numb=0;
        sprintf(str,"->");
        do{
                /* get a key, allow user to abort if needed */
                /* func. rtns true = key reqd. pressed; false = abort preessed */
                numbkey=get_key_abortable((48+numb),CONT_KEY);
                if (numbkey==TRUE){
                        /* The reqd. key was pressed */
                        sprintf(str,"%s %d",str,numb);
                        numb++;
                }else{
                        /* The abort key was pressed */
                        sprintf(str,"%s, %s",str,input_test_msg[06]);
                        abort=TRUE;
                }
                dec_info_line();
                display_info_noclear(str);
        }while((abort==FALSE) && (numb<10));
        if ((numb==10) && (abort==FALSE)){
                /* well we got all 10 keys ok ! */
                rtn=PASSED;
        }else{
                /* well we didn't get all 10 keys */
                rtn=INPUT_NUMB_FAILED;
        }
        clear_info();
        return rtn;
}
/*
 * Ask the user to get a sequence of keys, the keys to get are defined in
 * the structure keybd_data, whose size is specified by NUMBER_OF_KEYS.
 * mode specufues the test mode in operation.
 */


int ask_get_all_keys(int mode)
{
        int i=0, loop;
        char inst_str[80];
        char fail_str[80];
        int abort=FALSE;
        int key_fail_cnt=0;
        int status=0;
        int fail_str_len=0;
        int fail_lines=2;
        int wait_time=0;
        int key;

        /* if mode=user, wait_time - user else wait_time=life */
        wait_time = (mode == MODE_USER) ? USER_WAIT_TIME : LIFE_WAIT_TIME;

        do{
                if (i!=0){
                        /* not first key, clear the instruct line */
                        clear_line(info_line);
                }
                sprintf(inst_str,"%s '%s'. %s %d %s",input_test_msg[07],keybd_info[i].name,input_test_msg[01],wait_time,input_test_msg[02]);
                display_info_noclear(inst_str);

                key = scan_for_key(keybd_info[i].keycode,wait_time);

                if (key==CONT){
                        /* Well the user didn't press the reqd. key or we Timed out */
                        if (mode == MODE_USER){
                                /* We're in user mode so tell the user */
                                key_fail_cnt++;
                                if (key_fail_cnt==1){
                                        /* first time .. Prefix with Failed : */
                                        sprintf(fail_str,"%s : %s",input_test_msg[8],keybd_info[i].name);
                                        display_info_noclear (fail_str);
                                        for (loop = 1; loop <= fail_lines; loop++)
                                              dec_info_line ();
                                }else{
                                        /* no longer the first time */
                                        /* check the length to see if we need another row */
                                        fail_str_len=strlen(fail_str);
                                        if (fail_str_len>=(SCRN_SAFEWIDTH-5)){
                                                /* We do so show current line, create new one */
                                                info_line += (fail_lines - 2);
                                                display_info_noclear(fail_str);
                                                sprintf(fail_str,"%s : %s",input_test_msg[8],keybd_info[i].name);
                                                display_info_noclear(fail_str);
                                                fail_lines++;
                                        }else{
                                                /* we don't so add current failure to list */
                                                info_line += (fail_lines - 2);
                                                sprintf(fail_str,"%s %s",fail_str,keybd_info[i].name);
                                                display_info_noclear (fail_str);
                                        }
                                        /* decrement info_line as many times as needed */
                                        for (loop=1; loop<=fail_lines; loop++){
                                                dec_info_line();
                                        }
                                }

                        }else{
                                /* We're not in user mode so exit stage left */
                                abort=TRUE;
                        }
                }else{
                        /* The reqd. key was pressed ... reset info line */
                        dec_info_line();
                }
                i++;
        }while ((i <= NUMBER_OF_KEYS) && (abort != TRUE));

        if ((abort==TRUE) && (key_fail_cnt ==0)){
                /* life cycle mode ... no respoce - fake pass */
                clear_info();
                status=NOTCOMPLETED;
        }else{
                /* user mode */
                status = (key_fail_cnt==0) ? PASSED : FAILED;
        }
        /* OS_Byte 121 does not remove the key from the keyboard so lets flush it */
        flush_keyboard();
        return status;
}

/*
 * Wait for the key specified to be pressed.
 * This func is here because the support funcs will not see the shift and
 * other modifier keys being pressed.
 */

int scan_for_key(int reqd_key, int delay)
{
        int key;
        _kernel_swi_regs reg;
        long tnow, tstart = 0, tstop=0;

        /* get the start time */
        _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
        tstart = (long) reg.r[0];
        /* stop is start plus delay : all in CSec's */
        tstop = tstart+((long)delay) * 100;
        do{
/*                usermode_donothing();*/                   /* help when things like the IR need call backs. */
                /* Scan the keyboard */
                reg.r[0] = 121;
                reg.r[1] = (0x80 | reqd_key);           /* s/be EOR ??????? */
                _kernel_swi(OS_Byte, &reg, &reg);
                key=reg.r[1];
                /* get the time */
                _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
                tnow = (long) reg.r[0];
       }while ((key!=0xFF) && (tnow<tstop));
        /* OS_Byte 121 does not remove the key from the keyboard so lets flush it */
        flush_keyboard();
        /* we've either timed out in which case rtn CONT */
        /* The key was prerssed, in which case rtn TRUE */
        /* If we got &FF and not timed out rtn TRUE else CONT */
        return ((key==0xFF)&&(tnow<tstop)) ? TRUE : CONT;
}
