/*
 * Name       : Graphics.c
 * Description: C interface to OS_Plot routines providing simple graphic handling
 *
 * Copyright(C) Element 14 Ltd, 1997-99.  All Rights Reserved.
 *
 * History    : 1.00 01 Feb 1999  SBF  Started: based on code imported from LCDTest
 *              1.01 01 Feb 1999  SBF  Added function to restore cursor
 *              1.02 02 Feb 1999  SBF  Added setmousepos function
 *              1.03 03 Feb 1999  SBF  Moved setmousepos function to c.MouseTest (more sensible place)
 */

#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "graphics.h"


/*
 * Function   : colour
 * Description: sets the graphics colour
 * Params in  : int type; colour palette to use
                int col; colour value
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *colour(int type, int col)
{
  _kernel_swi_regs reg;
  _kernel_oserror *e = NULL;

  switch (type)
  {
    case DESKTOP_COL:

      if (col >= 0)                                                        /* is it actually a sensible colour? */
      {
        reg.r[0] = 0;
        reg.r[1] = col;
        e = _kernel_swi(OS_SetColour, &reg, &reg);                         /* set colour */
      }
      break;

    case GCOL_COL:

      if (col >=0)                                                         /* is it actually a sensible colour? */
      {
       _kernel_oswrch(18);
       _kernel_oswrch(0);
       _kernel_oswrch(col);
      }
  }
  return e;
}


/*
 * Function   : move
 * Description: move absolute
 * Params in  : int x; x coordinate
 *              int y; y coordinate
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *move(int x, int y)
{
  _kernel_swi_regs reg;

  reg.r[0] = 68;                                                           /* move absolute */
  reg.r[1] = x;								   /* x coordinate */
  reg.r[2] = y;								   /* y coordinate */
  return _kernel_swi(OS_Plot, &reg, &reg);
}


/*
 * Function   : rectangle
 * Description: draws a filled rectangle using the coordinates given
 * Params in  : int x; bottom left x coordinate
 *              int y; bottom left y coordinate
 *              int width; width of rectangle
 *              int height; height of rectangle
 *              int col; colour to plot
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *rectangle(int x, int y, int width, int height, int col)
{
  _kernel_swi_regs reg;

  move(x, y);                                                              /* move graphics cursor to start position */
  colour(GCOL_COL, col);                                                   /* set the graphics colour */

  reg.r[0] = 101;                                                          /* filled rectangle using current foreground colour */
  reg.r[1] = x + width;
  reg.r[2] = y + height;
  return _kernel_swi(OS_Plot, &reg, &reg);
}


/*
 * Function   : draw
 * Description: graphics draw to x,y
 * Params in  : int x; x coordinate
 *              int y; y coordinate
 *              int col; graphics colour
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *draw(int x, int y, int col)
{
  _kernel_swi_regs reg;
  _kernel_oserror *e;

  e = colour(GCOL_COL, col);                                               /* set the graphics colour */

  if (!e)
  {
    reg.r[0] = 5;
    reg.r[1] = x;
    reg.r[2] = y;
    e = _kernel_swi(OS_Plot, &reg, &reg);                                  /* plot the line */
  }
  return e;
}


/*
 * Function   : off
 * Description: switches off the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *off(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RemoveCursors, &reg, &reg);                        /* remove the cursor */
}


/*
 * Function   : on
 * Description: switches on the text cursor
 * Params in  : none
 * Params out : none
 * Returns    : pointer to error block else NULL
 */

_kernel_oserror *on(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  return _kernel_swi(OS_RestoreCursors, &reg, &reg);                       /* restore the cursor */
}


/* End of graphics.c */
