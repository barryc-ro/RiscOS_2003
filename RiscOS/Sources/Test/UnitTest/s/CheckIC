; >CheckIC
;
; TEST SOFTWARE (c) Element 14 Ltd 1990-1998.
;
; *********************** CHANGE LIST *************************************
;
; Vers  Date            Name    Comment
; ----- ----------      ---     -------------------------------------------
; 1.00	27 Jan 98	RLT	Created
; 1.01	28 Jan 98	RLT	Optimised the code, especially around the
;				check_pages loop.
;


	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET     Hdr:System
        GET     Hdr:APCS.<APCS>

	AREA	|C$$Code|, CODE, READONLY

	EXPORT	CheckIC
CheckIC
        FunctionEntry "", makeframe
        SavePSR r2                              ; Preserve entry mode
	SWI	OS_EnterOS			; Enter SVC mode
	SETPSR  I_bit, r1
	MOV	r1, #&92			; Move the value to poke to r1
	STMFD	r13!, {r2, r4-r9}		; Preserve original registers

	LDR	r0, setup_address		; Load the address to poke
	STRB	r1, [r0]			; Set the chip to read mode

	MOV	r8, #0				; Error counter; set to 0 as no errors yet.

	ADR	r2, page_addresses		; Get the first page address
	MOV	r4, #19				; Set the number of pages
	LDR	r3, check_word
check_pages
	LDR	r1, [r2], #4			; Put the address in r1, post inc. to next address
	LDR	r0, [r1]			; Load r0 with the value stored at the address
	CMP	r0, r3				; Compare with the check word
	BLNE	examine				; If they're not equal, branch to examine
	SUBS	r4, r4, #1			; Subtract 1 from the page counter
	BNE	check_pages			; If the page counter is not 0, loop again

	MOV	r0, r8				; Set up the return value in r0

	LDMFD	sp!, {r2, r4-r9}		; Pull original registers from stack
        RestPSR r2,,cf                          ; Restore original mode/interrupts and return
        NOP
        Return  ,fpbased

examine						; r1 contains the address to examine
	STMFD	sp!, {r2-r7}			; Preserve original values from caller

	ADR	r2, write_addresses + 0		; Set up IC chip to read the status flags
	ADR	r3, write_values + 0
	LDR	r7, [r2], #4
	LDR	r6, [r3], #4
	STR	r6, [r7]
	LDR	r7, [r2], #4
	LDR	r6, [r3], #4
	STR	r6, [r7]
	LDR	r7, [r2]
	LDR	r6, [r3]
	STR	r6, [r7]
						; Now check the status bits are not set
	LDR	r3, [r1, #8]			; Load r3 with the status flag
						; Check low half word is clear.
	LDR	r4, mask1			; Load r4 with mask#1 (&0000FFFF)
	AND	r4, r3, r4			; AND the needed bits of the flag
	CMPS	r4, #0				; Check to see if any of the bits are set
	ORRNE	r8, r8, #1			; if bits are set, OR 1 into r8
						; check high half word is clear.
	LDR	r4, mask2			; Load r4 with mask#2 (&FFFF0000)
	AND	r4, r3, r4			; AND the needed bits of the flag
	MOV	r4, r4, LSR #16			; Shift value of r4 to the right by 16 bits
	CMPS	r4, #0				; Check to see if any of the bits are set
	ORRNE	r8, r8, #2			; if bits are, OR 2 into r8

	LDR	r7, page_addresses		; Load r7 with the base address of flash
	LDR	r2, read_value			; Load r2 with the word to diable status read
	STR	r2, [r7]			; Poke address in r7 with the word in r2

	LDMFD	sp!, {r2-r7}			; Restore original registers
	MOV	pc, lr				; Return to caller


page_addresses
	DCD	&03c00000			; Page addressees of the flash
	DCD	&03c08000
	DCD	&03c0c000
	DCD	&03c10000
	DCD	&03c20000
	DCD	&03c40000
	DCD	&03c60000
	DCD	&03c80000
	DCD	&03ca0000
	DCD	&03cc0000
	DCD	&03ce0000
	DCD	&03d00000
	DCD	&03d20000
	DCD	&03d40000
	DCD	&03d60000
	DCD	&03d80000
	DCD	&03da0000
	DCD	&03dc0000
	DCD	&03de0000

check_word
	DCD	&ffffffff			; Word containing the 'erased' value

address_words
	DCD	&03c08000			; Non standard addresses to check
	DCD	&03c0c000
	DCD	&03c10000

write_addresses
	DCD	&03c15554			; Addresses to set write mode
	DCD	&03c0aaa8
	DCD	&03c15554

write_values
	DCD	&00aa00aa			; Values to store to the write addresses
	DCD	&00550055
	DCD	&00900090

read_value
	DCD	&00f000f0			; Value to disable write mode

setup_address
	DCD	&03200080			; Address to put flash chip into 'read' mode

mask1
	DCD	&0000ffff

mask2
	DCD	&ffff0000


	END
