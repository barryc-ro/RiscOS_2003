; >MemSrcNCOS
;
; TEST SOFTWARE (c) Element Ltd 1990-1997.
;
; *********************** CHANGE LIST *************************************
;
; Vers  Date            Name    Comment
; ----- ----------      ---     -------------------------------------------
; 2.00  14 Apr 97       BAR     Based on MemSrc 1.50
;                               Major update for use with NCOS1.20
;                               User/Serviceability Software. No longer use
;                               CMOS RAM, split into two lumps of code,
;                               which are called by a c program. Comvert to
;                               run from ROM. Memory start and end now
;                               passed in via r0 and r1
; 2.01 16 May 97        BAR     Fixed bug in FALSE Hier... didn't restore
;                               lower memory limit. Remove Pahe nnn :
;                               prfixes from test names and don't print out
;                               CRs. Clr error counter (r8) on entery to
;                               phase 2, 3 and 4.
; 2.02 20 May 97        BAR     True/False Hier... Lower memory limit should
;                               be restored every pass of the loop.
;
;

        GET Hdr:ListOpts
        GET Hdr:Macros
        GET Hdr:System
        GET Hdr:APCS.<APCS>

        EXPORT  DRAMTest_Part1
        EXPORT  DRAMTest_Part2
        EXPORT  DRAMTest_IncPattern
        EXPORT  DRAMTest_Cyclic
        EXPORT  DRAMTest_TrueHire
        EXPORT  DRAMTest_FalseHire

        AREA    |MemSrcNCOS$$code|,REL,CODE,READONLY

        ALIGN

	GBLL	DEBUG
DEBUG	SETL	{TRUE}


DRAMTest_Part1
; Does Phase one: incrementing pattern
;      Phase two: Cycling bits
;
; r0 = start addr (aka lower limit & was end of program)
; r1 = end of RAM (aka upper limit)
;
; Exit with r0= number of failures 0 = passed.
;
;
; PHASE ONE
;
;
DRAMTest_IncPattern
        FunctionEntry "r1-r12"
        MOV R11,R0                      ; copy of lower limit
        MOV R12,R1                      ; Copy of upper limit
        ; Show which phase is being tested, post CR
        ; Call ing 'C' prog will leave me pointing at the next line to print
        ; out on in the scratch screen rea.
        SWI OS_WriteS
        = "Incrementing pattern",0
        MOV R7,#4                       ; Number of times to run incrementing pattern tests =4
        MOV R8,#0                       ; Set fail ctr to 0.
                                        ; Write to memory
PHASE1  LDR R0,P1PTN                    ; Load test pattern into R0  (Test pattern = &86427531).
        LDR R1,P1INC                    ; Load pattern incrementer into R1 (Pat. inc =  &0F020501).
        MOV R4,R11                      ; recover lower memory limit.
;        BL ENDADR                       ; Pick up end of code in memory and store in r4.
;                                        ; Bottom of memory test area
PH1FILL STR R0,[R4],#4                  ; Write the test pattern to address current R4 and
                                        ; post inc (32 bits) R4
        ADD R0,R0,R1                    ; Increment pattern and store new value in R0
        TEQ R4,R12                      ; Test if current memory ptr (R4) reached end of memory area
        BNE PH1FILL                     ; No - continue incrementing
        SWI OS_WriteI+"."               ; Write a "." on screen at the end of end of each write loop

                                        ; Read from memory
        MOV R4,R11                      ; recover lower memory limit.
;        BL ENDADR                       ; Reset R4 to end of code
        LDR R0,P1PTN                    ; Re-load original test pattern
PH1CHK  LDR R2,[R4],#4                  ; Read the value ptr'd to by R4 into R2 - post inc. R4
        TEQ R2,R0                       ; Does the value read = (incremented) test pattern
        BNE PH1FAIL                     ; NO - branch

PH1CONT ADD R0,R0,R1                    ; Inc. test pattern
        TEQ R4,R12                      ; Is it the end of memory test area
        BNE PH1CHK                      ; NO - continue incrementing pattern and memory ptr.
        STR R0,P1PTN                    ; Store current incremented pattern into R0 and run test
                                        ; with new pattern sequence
        SUBS R7,R7,#1                   ; Decrement test pattern loop ctr.
        BNE PHASE1                      ; If <4 run test with new pattern.
        TEQ R8,#0                       ; If any failures then abort tests.
        BNE PHASEDEAD
                                        ; Here only if we've passed
        B   Result                      ; Jump to exit routine.

; code to determin where the fault is a show the location.
PH1FAIL CMP R8,#10
        ADD R8,R8,#1
        BCS PH1CONT
        SWI OS_WriteS
        = 10,13,"P1&",0
        MOV R5,R0
        SUB R10,R4,#4
        BL WORDHX
        SWI OS_WriteS
        = ":&",0
        MOV R10,R2
        BL WORDHX
        SWI OS_WriteS
        = "=/=&",0
        MOV R10,R5
        BL WORDHX
        MOV R0,R5
        B PH1CONT
;
; End of incrementing pattern test
;

;
;
; PHASE TWO
;
;
DRAMTest_Cyclic
        FunctionEntry "r1-r12"
        MOV R11,R0                      ; copy of lower limit
        MOV R12,R1                      ; Copy of upper limit
;
        SWI OS_WriteS
        = "Cycling bits",0
        MOV R7,#1                       ; Set bit 0 in R7
        MOV R8,#0                       ; Set fail ctr to 0.
                                        ; Write data.
PHASE4A
        MOV R4,R11                      ; recover lower memory limit.
;       BL ENDADR                       ; Pick up end of code address in R4
        MOV R2,R7                       ; Set bit 0 in R7
PHASE4A1 STR R2,[R4],#4                 ; Write 1 (bit 0 set) into address and post inc ptr.
        MOV R2,R2,ROR #31               ; Rotate set bit 0 31 to the right. (1 left)
        CMP R4,R12                      ; Is it end of test area
        BCC PHASE4A1                    ; No continue shifting bits, and writing
        SWI OS_WriteI+"."               ; Print a "." after write sequence

                                        ; Read data.
        MOV R4,R11                      ; recover lower memory limit.
;       BL ENDADR                       ; Re-intialise start point
        MOV R2,R7                       ; Re-initialise data to set bit 0
PHASE4B1 LDR R1,[R4],#4                 ; Read data from address ptr
        CMP R1,R2                       ; Is it equal to data pattern
        BNE PH4FAIL                     ; No branch
PH4CONT MOV R2,R2,ROR #31               ; Rotate set bit 0 31 to the right. (1 left)
        CMP R4,R12                      ; Is it end of test area
        BCC PHASE4B1                    ; No continue shifting bits, and reading
        ADDS R7,R7,R7                   ; Shift initial data value left 1.
        BCC PHASE4A                     ; Is carry set ie. shifted to set bit 32+
        TEQ R8,#0                       ; Any errors ?
        BNE PHASEDEAD                   ; abort if and errors
   ;    BEQ PHASEDEAD                   ; Make it fail-debug
                                        ; Here only if we've passed
        B   Result                      ; Jump to exit routine.

; code to determin where the fault is a show the location.
PH4FAIL CMP R8,#10
        ADD R8,R8,#1
        BCS PH4CONT
        SWI OS_WriteS
        = 10,13,"P2&",0
        SUB R10,R4,#4
        BL WORDHX
        SWI OS_WriteS
        = ":&",0
        MOV R10,R1
        BL WORDHX
        SWI OS_WriteS
        = "=/=&",0
        MOV R10,R2
        BL WORDHX
        B PH4CONT
;
; End of cyclic test
;

;
;
;
DRAMTest_Part2
; Does Phase three: TRUE hierarchy
;      Phase four: FALSE hierarchy
;
; r0 = start addr (aka lower limit & was end of program)
; r1 = end of RAM (aka upper limit)
;
; Exit with r0= number of failures 0 = passed.
;
; PAHSE THREE
;
;
DRAMTest_TrueHire
        FunctionEntry "r1-r12"
        MOV R11,R0                      ; copy of lower limit
        MOV R12,R1                      ; Copy of upper limit
;
Thirdtest
        SWI OS_WriteS
        = "TRUE hierarchy",0
                                         ; Write
        MOV R0,#0
        MVN R1,#0                       ; Place &FFFFFFFF in r1
        MOV R2,#2
        MOV R8,#0                       ; Set fail ctr to 0.

        B PHASE2                        ; jump to the code
;
;
; PHASE FOUR
;
;
DRAMTest_FalseHire
        Push    "r1-r12, lr"
        MOV R11,R0                      ; copy of lower limit
        MOV R12,R1                      ; Copy of upper limit
;
        SWI OS_WriteS
        = "FALSE hierarchy",0
        MVN R0,#0
        MOV R1,#0
        MOV R2,#2
        MOV R8,#0                       ; Set fail ctr to 0.

                                        ; fall through to the code
;
; CODE FOR PHASE 3 AND 4 - TRUE - FALSE AS ONLY THE DATA CHEANGES.
;
PHASE2
        MOV R4,R11                      ; recover lower memory limit.
;        BL ENDADR                       ; Pick up end of code address in r4
PHASE2A TST R4,R2                       ; Is bit 1 set  in current address
        STREQ R0,[R4],#4                ; No - write FFFFFFFF to address ptr to by r4
                                        ; and post inc address ptr.
        STRNE R1,[R4],#4                ; Yes - write 0 to address ptr'd to by r4
                                        ; and post inc address ptr.
        CMP R4,R12                      ; End of memory test area
        BCC PHASE2A                   ;
        SWI OS_WriteI+"."               ; Print "." on screen

                                        ; Read
        MOV R4,R11                      ; recover lower memory limit.
;        BL ENDADR                       ; Pick up end address in r4
PHASE2B TST R4,R2                       ; Is bit 1 set  in current address
        LDR R3,[R4],#4                  ; Read data ptr'd to by r4 post inc address ptr.
        BNE PHASE2B1                    ; Is value read 0 if not branch to PHASE2B1
PHASE2B2 CMP R0,R3                      ; Is value read 0 ???again
        BNE PH2FAIL                     ; No - fail
        B PH2CONT                       ; Yes - test memory limit in PH2CONT
PHASE2B1 CMP R1,R3                      ; Is the value read &FFFFFFFF
        BNE PH2FAIL                     ; NO - then fail
PH2CONT CMP R4,R12                      ; End of memory test area
        BCC PHASE2B                     ; NO - Continue to read

        CMP R2,R12
        ADDCC R2,R2,R2
        BCC PHASE2
        TEQ R8,#0
        BNE PHASEDEAD
                                        ; Here only if we've passed
        B   Result                      ; Jump to exit routine.

; code to determin where the fault is a show the location.
PH2FAIL CMP R8,#10
        ADD R8,R8,#1
        BCS PH2CONT
        SWI OS_WriteS
        = 13,"P3/4&",0
        SUB R10,R4,#4
        MOV R5,R0
        BL WORDHX
        SWI OS_WriteS
        = ":&",0
        MOV R10,R3
        BL WORDHX
        SWI OS_WriteS
        = "=/=&",0
        TST R4,R2
        MOVNE R10,R1
        MOVEQ R10,R5
        BL WORDHX
        MOV R0,R5
        B PH2CONT
;
;
; EXIT ROUTINES
;
;
;
Result
PHASEDEAD
        ; r0 = number of failures ... 0 = passed >0 = failed
        MOV     R0,R8                   ; Put fail cnt in r0.
                                        ; And return r0=status
        Return  "r1-r12"                ; Return to caller.
;
;;*****ex-result
;;*****        LDR R1,ABEX
;;*****        MOV R2,#&0                        ; Exit with 0 for PASS. This
;;*****        SWI OS_Exit
;;*****        MOV     pc, lr                  ; And return r0=status
;;*****
;;***** ex-phasedead
;;*****        SWI OS_WriteS
;;*****        = 13,"There were &",0
;;*****        MOV R10,R8
;;*****        BL WORDHX
;;*****        SWI OS_WriteS
;;*****        = "failures in total",10,13,0
;;*****        MOV R0,#&0
;;*****        LDR R1,ABEX
;;*****        MOV R2,#&1                        ; Exit with 1 for FAIL.
;;*****        SWI OS_Exit
;
;
; general purpose routines ...........
;
;*****char
;*****          ; On entry R0 contains value to be converted (address)
;*****
;*****        MOV R1,R4                       ; move ptr to buffer into r1
;*****        MOV R2,#&10                     ; buffer size =4 bytes
;*****        SWI OS_ConvertHex8              ; convert number to Hex string for writeC
;*****        SWI OS_Write0                   ; print indirect string
;*****        MOV PC,R14

P1PTN & &86427531
P1INC & &0F020501
ABEX  & &58454241
;
;=========================================================================
;
WORDSP SWI OS_WriteI+" "
          ; print R10 using R0,R6,r9
WORDHX MOV R6,#32-4
WORDLP MOV R0,R10,LSR R6
        AND R0,R0,#15
        CMP R0,#9
        ORRLS R0,R0,#"0"
        ADDHI R0,R0,#"A"-10
        SWI OS_WriteC
        SUBS R6,R6,#4
        BPL WORDLP
        MOV PC,R14
;
;=========================================================================
;
 END
