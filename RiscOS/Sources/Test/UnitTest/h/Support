/* >h.Support

TEST SOFTWARE (c) Element 14 Ltd. 1997-1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    20 Mar 97       BAR     Initial writing
1.01    01 May 97       BAR     Added define for CODEERROR
1.02    08 May 97       BAR     Added new func. declerations
                                Added new contatnt flags
1.03    16 May 97       BAR     Added INDEXERROR flag.
1.04    23 May 97       BAR     Added FIRSTSTATUS flag.
1.05    05 Jun 97       BAR     Added read & reset timer funcs
1.06    17 Jun 97       BAR     Remove unwanted globle vars.
1.07    18 Jun 97       BAR     Increase NUMB_TESTS by 1.
1.08    04 Sep 97       BAR     Add Flash as available test.
1.09    16 Sep 97       BAR     Added definitions for Modem ROM2 checksum
                                and loopback checks.
1.10    22 Sep 97       BAR     Add PASS, FAIL LED definitions, add checking
                                for machine type to select required LED def's.
1.11    02 Oct 97       BAR     Add constant for number of CSecs in the hour etc
1.12    03 Oct 97       BAR     Add structre to store the cycle details.
1.13    06 Oct 97       BAR     Correct mistakes in #ifdefs
1.14    08 Oct 97       BAR     Add definitiosn for functions
                                ask_get_yn_responce_forever &
                                ask_get_yn_responce_timed.
1.15    29 Oct 97       BAR     Add set of key definitions for Daytona.
1.16    04 Nov 97       RLT     Moved Daytona #ifdefs from h.module
1.17    05 Nov 97       BAR     Add mode_limit definition
                                Add definitions for new functions.
1.18    11 Nov 97       BAR     Change Daytona Yes/No keys.
1.19    12 Nov 97       BAR     Add defs for TRUE false if not defined.
1.20    14 Nov 97       BAR     Change Daytona Yes/No keys.
1.21    18 Nov 97       BAR     Change the number definiton for the
                                different LEDs
1.22    19 Nov 97       BAR     Added seperate definition for the LED states
1.23	24 Nov 97	RLT	Modified HOUR_CSEC to define the correct time
				and changed SECS_SECS to SECS_CSEC.
1.24	16 Jan 98	RLT	Removed modem ROM 2 checksum and renumbered
				Loopback to be message number 17.
1.25	28 Jan 98	RLT	Added serial flash to the test #defines
1.26    16 Mar 98       RLT     Added LED check to the test #defines
1.27    29 Jan 99       SBF     Added MACHSTB3 #defines to enable building of source in STB3 build environment
1.28    01 Feb 99       NCE     Added IRREMOTE to list of tests
1.29    04 Feb 99       NCE     Added sequence variables used by display_refresh
1.30    15 Feb 99       SBF     Added SERIALTEST to list of tests
1.31    18 Feb 99       SBF     Added serial port subtests to subtest list

This is a C header file, defining variables and functions for Support.

*/

/* Declare build enviroment */

/* Project includes */
#include "BuildFlags.h"


/* Boolean definitions */
#ifndef FALSE
#define FALSE                   (0)
#endif
#ifndef TRUE
#define TRUE                    (!FALSE)
#endif

/* Declare the variables available */

/* Typedefs */
typedef long t_timer;             /* timer implementation */

/* Declare the constants available*/
#define HOUR_CSEC 360000
#define MINS_CSEC   6000
#define SECS_CSEC    100


/* for debugging purposes */
extern int flagDebugging;
#define debug	if (!flagDebugging); else

#define OSW_READSYSCLOCK        1
#define RAW_SPACE               98      /* Raw keycode for the spacebar */
#define SPACE_CHR               32      /* Space bar character          */
#define NO_KEY_PRESS            -1      /* No key pressed               */
#define CONT                    -2      /* Flag saying carry on ...     */

#ifdef RCA                      /* RCA/Boca */
                                        /* Name(s)             Key Legend */
#define GOOD_KEY                0x8D    /* Yes, ok, Good key   Right Arrow *//* MENU */
#define BAD_KEY                 0x8C    /* No, Not ok, Bad key Left Arrow  *//* HOME */
#define CONT_KEY                0x0D    /* Continue Space Bar  OK, Return' */
#endif

#ifdef MACHDaytona              /* Daytona/T-Fax */
                                        /* Name(s)             Key Legend  Std Keybd */
#define GOOD_KEY                0x83    /* Yes, ok, Good key   EMail        F3        */
#define BAD_KEY                 0x84    /* No, Not ok, Bad key Cancel       F4        */
#define CONT_KEY                0x20    /* Continue Space Bar  Space Bar    Space bar */
#endif

#ifdef MACHSTB3                 /* STB3 */
                                        /* Name(s)             Key Legend  Std Keybd */
#define GOOD_KEY                0x85    /* Yes, ok, Good key   F5           F5        */
#define BAD_KEY                 0x88    /* No, Not ok, Bad key F8           F8        */
#define CONT_KEY                0x20    /* Continue Space Bar  Space Bar    Space bar */
#define IR_BUTTON               0x31    //current '1' but may be worth changing to a code
#endif                                  //that is only available on the IR Remote

/* define the various states we can have */
#define FAILED          0
#define PASSED          1
#define RUNNING         2
#define COMPLETED       3
#define NOTCOMPLETED    4
#define LASTSTATUS      4
#define FIRSTSTATUS     0

/* define the various LED states */
#define LED_STARTING    0
#define LED_RUNNING     1
#define LED_RUN_FAILED  2
#define LED_RUN_PASSED  3
#define LED_COMPLETED   4
#define LED_COM_FAILED  5
#define LED_COM_PASSED  6
#define LED_STOPPED     7

/* define the various tests we can have */
#define ROM             0
#define DRAM            1
#define NVRAM           2
#define SYSTEM          3
#define MODEM           4
#define AUDIO           5
#define SMARTCARD       6
#define USERINPUT       7
#define LOGGEDCODES     8
#define FLASH           9
#define SERIALFLASH     10
#define LEDCHECK        11
#define IRREMOTE        12
#define MOUSECHECK      13
#define TESTCARD        14
#define SERIALTEST      15
#define PRINTER         16
#define MPEG            17
#define NUMB_TESTS      18

#define RESULTTOSERVER  30 /* Reserved for writing test results to server */

/* define the various sub-tests we can have */
#define ARMCPU          0
#define IOCONTROL       1
#define IDNUMBER        2
#define OSVSN           3
#define DRAMSIZE        4
#define CODE1           5
#define CODE2           6
#define CODE3           7
#define CODE4           8
#define WARRANTY        9
#define ONTIME          10
#define SCARDSERIAL     11
#define MODEMROMCHECK   12
#define MODEMLINECHECK  13
#define SUBTESTCONT     14
#define CODEERROR       15
#define INDEXERROR      16
#define MODEMLOOPBACK   17
#define SERIALCTRLLINE  18
#define SERIALDATALINE  19
#define SERIALCOMMTEST  20
#define SERIALBAUDTEST  21

/* define the different types of test mode we can have */
#define MODE_USER       0
#define MODE_LIFE       1
#define MODE_LIMIT      1

/* define the differernt type of prefix for life testing  */
#define RUN_PASS        0                       /* R:nn-P:nn */
#define COMP_PASS       1
#define FAIL_FIRST      2                       /* F:nn-T:nn */

#define LOG_RUNS        0
#define LOG_FAILS       1
#define LOG_FIRST       2
#define LOG_NOTCOMP     3

/* Specifiy the various areas of memory we can get information on */
#define DRAM_AREA       1
#define VRAM_AREA       2
#define ROM_AREA        3
#define IO_AREA         4

/* Define which LED is PASS, FAIL etc ... according to machine type */
#ifdef MACHDaytona
#define LED_PASS        2               /* green */
#define LED_FAIL        0               /* red */
#define LED_RUNNING     1               /* yellow  */
#else
#define LED_PASS        1               /* green */
#define LED_FAIL        0               /* red */
#endif

/* define which LED is RED and which is GREEN */
#define LED_RED         0               /* This is the LEFT LED */
#define LED_GREEN       1               /* This is the RIGHT LED */

/* Define the LED status codes */
#define LED_OFF         0x0
#define LED_ON          0x1
#define LED_FLASH       0x2

/* define the LED Flash Rates in CSec's */
#define LED_FLASH_USER  25
#define LED_FLASH_LIFE  75

/* declare the structure to store the results in */
typedef struct _results
{
        int mode;                       /* Note of the test mode */
        int done;                       /* did we do it this cycle ? */
        int result;                     /* what was its result */
	int total_runs;                 /* total times run */
	int total_fails;                /* total times failed */
        int first;                      /* cycle first failure happened */
}
results_store;
extern results_store res_store[NUMB_TESTS];

//order_run and sequence keeps a log of the order in which tests are run so that the
//screen refresh routine can write them in the right order
extern int sequence_store[NUMB_TESTS];
extern int sequence_number;

/* declare the structure to store the results in */
typedef struct
{
        int mode;                       /* Note of the test mode */
        int cycle;                      /* Current cycle count */
        int tcycle;                     /* Target cycle count */
	int ffcycle;                    /* First failure cycle  */
        int duration;                   /* Current duration (CSec) */
        int tduration;                  /* Target duration (CSec) */
	int ffduration;                 /* First failure duration (CSec) */
}
cycle_info;
extern cycle_info cycle_store;

/* Declare the functions available */
extern int get_yn_responce_forever(void);
extern int get_yn_responce_timed(int delay);
extern int ask_get_yn_responce_forever(void);
extern int ask_get_yn_responce_timed(int delay);
extern int get_key_forever(int reqd_key);
extern int get_key_abortable(int reqd_key, int abort_key);
extern int get_key_timed(int reqd_key, int delay);
extern void WaitForSpaceBar(void);
extern void WaitForOKKey(void);
extern int inkey(int delay);
extern int get(void);
extern void flush_keyboard(void);
extern void log_status(int test,int status);
extern int check_logged_status(int failed_count, int cycle);
extern void clear_res_store(int cycle, int test_mode);
extern int find_memory_size(int area);
extern int make_error_no(int c_err, int t_base, int t_numb, int f_numb);
extern void display_status_led(int test_mode, int status);
extern void change_led_state(int led, int state, int rate);
extern int get_led_state(int led);
extern void set_led_state(int led, int state);
extern void led_steady_off(int led);
extern void led_steady_on(int led);
extern void led_flash_off(int led);
extern void led_flash_on(int led);
extern void set_led_flash_rate(int led, int rate);
extern void wait_for_cont(void);
extern void wait(int seconds);
extern int check_test_mode(int reqd_mode);
extern int check_prefix_type(int test);
extern int get_logged_data(int test, int field);
extern long timer_read ( t_timer *the_timer);
extern void timer_reset ( t_timer *the_timer );
extern void strupr (char *string);
extern void strlwr (char *string);
extern int validate_mode(char *mode_str);
extern int readvareval(const char *name);
extern void readvarval(const char *name, char *buffer, int buffmax);

/* End of h.Support */
