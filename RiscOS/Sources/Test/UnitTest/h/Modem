/* >h.Modem

TEST SOFTWARE (c) Element 14 Ltd. 1997-1999

************************* CHANGE LIST *************************************

Vers    Date            Name    Comment
------  ---------       ---     -------------------------------------------
1.00    21 Apr 97       BAR     Initial writing
1.01    04 Jun 97       BAR     Add wait_for_nodialtone(), add more error
                                codes. Add wait_for_ok_or_nocarrier()
1.02    05 Jun 97       BAR     Removed read & reset timer funcs
1.03    16 Sep 97       RLT	Added Daytona specific code
1.04	20 Jan 98	RLT	Modified modem error numbers

This is a C header file, defining variables and functions for Modem

*/

/* Declare the variables available */

/* Declare the constants available*/

#define TIMEOUT     500             /* Timeout period in centiseconds */
#define CR          0x0D
#define LF          0x0A
#define ESC         0x11
#define BUFFER_SIZE 80              /* Size of command line buffer */

#ifdef MACHDaytona
#define READ_BUFFER_SIZE 1024       /* Size of read buffer for Daytona loop back tests */
#endif

#define TRANSFER0   "Test transfer string 1234567890"

/* SWI numbers */
#define UART_SerialOp	       0x83900
#define UART_GetBufferHandles  0x83901
#define UART0_SerialOp	       0x4B880
#define UART0_GetBufferHandles 0x4B881

/* SerialOp reson codes */
#define SerialStatus 	      0
#define DataFormat	      1
#define SendBreak	      2
#define SendByte	      3
#define ReadByte	      4
#define RxBaud		      5
#define TxBaud		      6
#define HandshakeExtent	      8
#define EnumerateBaudRates    9

/* Typedefs */
/* typedef long t_timer; */             /* timer implementation */


typedef enum   {nothing,
                connect,
                carrier_slow,
                carrier_ok,
                no_carrier,
                protocol_err,
                protocol_lapm,
                protocol_alt,
                no_answer,
	        no_dialtone,
                busy, ring,
                transferred,
                ok} t_modem_resp;

#define MAX_BAUD (19)
#define MAX_PSD  (64)


#ifndef MACHDaytona

#define ERROR_BASE                              0x1000
#define ERROR_INIT_SERIAL_RXSPEED               0x1001
#define ERROR_INIT_SERIAL_TXSPEED               0x1002
#define ERROR_INIT_SERIAL_DATA                  0x1003
#define ERROR_INIT_SERIAL_SPECINPUT             0x1004
#define ERROR_INIT_SERIAL_STATUS                0x1005
#define ERROR_INIT_SERIAL_BUFFERS               0x1006
#define ERROR_GET_CHAR_SWI_FAILED               0x1007
#define ERROR_CHECKSUM_ATZ_FAILED               0x1008
#define ERROR_CHECKSUM_ATI2_FAILED              0x1009
#define ERROR_LINETEST_ATZ_FAILED               0x1010
#define ERROR_LINETEST_NODIALTONE               0x1011
#define ERROR_LINETEST_ATH0_FAILED              0x0020

#else

#define ERROR_GET_CHAR_SWI_FAILED               0x1007

#define ERROR_BASE				0x00100000
#define ERROR_INIT_SERIAL_PORTS			0x00100100
#define ERROR_CHECKSUM_ATZ_FAILED		0
#define ERROR_CHECKSUM_ATI2_FAILED		1

#define ERROR_LINETEST_ATZ_FAILED		0x00100210
#define ERROR_LINETEST_NODIALTONE		0x00100211
#define ERROR_LINETEST_ATH0_FAILED		0x00000020

#define ERROR_LOOPBACK_MALLOC_FAILED		ERROR_BASE
#define ERROR_LOOPBACK_ATZ_FAILED		0
#define ERROR_LOOPBACK_ATX_FAILED		1
#define ERROR_LOOPBACK_ATFAE_FAILED		2
#define ERROR_LOOPBACK_CONNECT_FAILED		3
#define ERROR_LOOPBACK_CMD_MODE_1		4
#define ERROR_LOOPBACK_ATH_1			5
#define ERROR_LOOPBACK_SENDING_DATA		6
#define ERROR_LOOPBACK_DATA_NOT_SAME		7
#define ERROR_LOOPBACK_CMD_MODE_2		8
#define ERROR_LOOPBACK_ATH_2			9

#endif

/* Declare the functions available */
extern void Modem_Test(int test_mode);
extern int modem_checksum(void);
extern int line_ok(void);
extern int wait_for_ok_or_nodialtone(int iTimeLimit, int flagTestOK, int iCmdBuf);
extern void modem_wait(long time);
extern void flush_buffer(int iBuffer);
extern void transmit(int iBuffer, char *strCommand, char chTerminate);
extern int wait_for_ok(int iTimeLimit, int flagTestOK, int iCmdBuf);
#ifdef MACHDaytona
extern int wait_for_connect(int iTimeLimit, int flagTestOK, int iCmdBuf0, int iCmdBuf1);
#endif
extern int caseless_strcmp(char *a, char *b, int len);
extern int examine_buffer(int iBuffer);
extern int get_modem_response(int iBuffer, char *strBuffer, int size);
extern t_modem_resp receive_command(int iBuffer);
extern int put_char(int iBuffer, char ch);
extern int get_char(int iBuffer);
extern int initialise_serial(void);
extern int conv_baud_serialop(int baud);
extern int conv_psd_serialop (char *formatstr);
extern void error_generate(_kernel_oserror *err);
extern int wait_for_nodialtone(int iTimeLimit, int flagTestOK, int iCmdBuf);
extern int wait_for_ok_or_nocarrier(int iTimeLimit, int flagTestOK, int iCmdBuf);

/* Declare the messages available */


