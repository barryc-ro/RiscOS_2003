 REM    >TestCard
 REM    ACORN TEST SOFTWARE.
 REM
 REM    ************************ CHANGE LIST *******************************
 REM
 REM    Vers    Date            Name    Comment
 REM    ------  ---------       ---     ------------------------------------
 REM    1.00    20-Sep-90       BAR     Initial tyding up, program based on
 REM                                    'ScreenTest' program kindly donated
 REM                                    by Roger Wilson - Acorn. Screen
 REM                                    mode changed from 20 to 12. Text
 REM                                    strings changed. Add code to provide
 REM                                    error trapping. Add code to provide
 REM                                    a nice exit routine.
 REM    1.01	04-Feb-99       NCE     Adapted to work on STBs.
 REM					Changed name to Element 14 and tweeked
 REM					a magic number so it fits on the
 REM					screen.  REMed out the OSCLI "*DESKTOP"
 REM					so we can call this from a C program.
 REM					Changed wait for Quit key to wait for
 REM					any key.
 REM    1.02   19-Feb-99        SBF     Further adaptations made for NTSC
 REM                                    TVs.  A couple of minor faults fixed.
 REM    1.03   3-Mar-99         NCE     Redefined the colours to work in any
 REM					screen mode and added antitwitter cli.
 REM    1.04   10-Mar-99        NCE     More tweaks for NTSC mode.

 REM The program is designed to provide a test card to check PAL Modulators.
 REM This program is based on 'SCREENTEST' donated by Roger Wilson - Acorn.
 REM The program is loaded by !RUN.

 REM The program provides a test card, simular to the BBC test card, to
 REM check the operation and set up of a PAL or NTSC encoder and modulator.
 REM This program does not use the standard screen layout or requires the
 REM CMOS RAM to be set up, it is totally independent of other programs or
 REM settings. The program has it's own PROCerror_trap and does not use the
 REM one in the general library.
 REM NOTE - This program is still in very crude basic coding, ther are no nice
 REM variable names, no local definitions, infact it is very basic BASIC.

 REM Main Program
 REM NOTE: The following OSCLI is a bodge to get round a bug
 REM       in the STB3 OS!
 OSCLI("ECHO")
 ON ERROR PROCerror_trap
 PROCinit
 PROCraster
 PROCblokrand
 PROCrandkleuren
 PROCcirkel
 OSCLI("NHAntiTwitter 0 0 2000 2000")
 REPEAT UNTIL ((GET AND &DF) = ASC("S"))
 REM OSCLI "*ScreenSave TestCard"
 REM OSCLI "*DESKTOP"
 END

 DEFPROCinit
   REM initalise the program for what it is about to receive.
   REM load the generic test library  
   LIBRARY "Test:GEN_LIB"
   PROClibrary_init

   text_string2$ = "ELEMENT 14"  
   text_string3$ = "© Element 14 Limited"
   
   REM this stuff sets a sensible mode for PAL/NTSC TVs 
   DIM modeblk% 23
   modeblk%!0=1:modeblk%!12=4:modeblk%!16=-1:modeblk%!20=-1
   IF FNread_syst_string("TV$Type")="PAL" THEN
    text_string1$ = "PAL TV Adaptor Test Card"
    S%=78
    modeblk%!4=768
    modeblk%!8=576
    MODE modeblk%
   ELSE
    text_string1$ = "NTSC TV Adaptor Test Card"
    S%=65
    modeblk%!4=640
    modeblk%!8=480
    MODE modeblk%
    ORIGIN 16,-8 
   ENDIF
      
 ENDPROC

 DEFPROCraster
   GCOL 128,128,128,128
   CLG
   GCOL 250,250,250
   XB% = S% - 6
   XE% = XB% + 17*S%
   YB% = S% + 2
   YE% = YB% + 13*S%
   FOR X% = XB% TO XE% STEP S%
    MOVEX%,0
    DRAWX%,YB% + YB% + 13*S%
   NEXT
   FOR Y% = YB% TO YE% STEP S%
     MOVE0,Y%
     DRAW XB% + XB% + 17*S%,Y%
   NEXT
 ENDPROC

 DEFPROCblokrand
   I% = 0
   FOR X% = XB% - S% TO XE% STEP S%
     GCOLI%,I%,I%
     RECTANGLE FILL X% + 2,0,S% - 4,S%
     RECTANGLE FILL X% + 2,YE% + 2,S% - 4,S% - 2
     I% = I% EOR 255
   NEXT
   I% = 0
   FOR Y% = YB% - S% TO YE% STEP S%
     GCOLI%,I%,I%
     RECTANGLE FILL 0,Y% + 2,XB% - 2,S% - 4
     RECTANGLE FILL XE% + 2,Y% + 2,XB% - 2,S% - 4
     I% = I% EOR 255
   NEXT
 ENDPROC

 DEFPROCrandkleuren
   GCOL 0,255,255
   RECTANGLE FILL XB% +  2*S%,     YB% + 10*S% + 2, S% - 2,2*S% - 4
   RECTANGLE FILL XB% + 14*S% + 2, YB% + 10*S% + 2, S% - 2,2*S% - 4
   GCOL 0,255,0
   RECTANGLE FILL XB% +    S% + 2, YB% + 6.5*S%,    S% - 4,5.5*S% - 2
   RECTANGLE FILL XB% + 15*S% + 2, YB% + 6.5*S%,    S% - 4,5.5*S% - 2
   GCOL 255,0,0
   RECTANGLE FILL XB% +    S% + 2, YB% + S% + 2,    S% - 4,5.5*S% - 2
   RECTANGLE FILL XB% + 15*S% + 2, YB% + S% + 2,    S% - 4,5.5*S% - 2
   GCOL 255,0,255
   RECTANGLE FILL XB% +  2*S%,     YB% + S% + 2,    S% - 2,2*S% - 4
   RECTANGLE FILL XB% + 14*S% + 2, YB% + S% + 2,    S% - 2,2*S% - 4
 ENDPROC

 DEFPROCcirkel
   S  = 0
   C  = 6*S%
   DS = SINRAD(.5)
   DC = COSRAD(.5)
   GCOL 255,255,255
   X% = XB% + 8.5*S%
   Y% = YB% + 6.5*S%
   MOVE X%,Y% - C
   MOVE X%,Y% - C
   DX = C*SINRAD138.5
   DY = C*COSRAD138.5
   GCOL 255,255,255
   MOVE X%,Y%
   MOVE X% + DX,Y% - DY
   PLOT 173,X% - DX,Y% - DY
   GCOL 0,0,0
   MOVE X%,Y%
   MOVE X% - DX,Y% - DY
   PLOT 173,X% + DX,Y% - DY
   DX = C*SINRAD115
   DY = C*COSRAD115
   GCOL 255,0,0
   MOVE X%,Y%
   MOVE X% - DX,Y% - DY
   PLOT 173,X% + DX,Y% - DY
   DX = C*SINRAD95
   DY = C*COSRAD95
   GCOL 0,0,0
   MOVE X%,Y%
   MOVE X% - DX,Y% - DY
   PLOT 173,X% + DX,Y% - DY
   DX = C*SINRAD65.5
   DY = C*COSRAD65.5
   GCOL 255,255,255
   MOVE X%,Y%
   MOVE X% - DX,Y% - DY
   PLOT 173,X% + DX,Y% - DY
   DX = C*SINRAD41.5
   DY = C*COSRAD41.5
   GCOL 255,255,0
   MOVE X%,Y%
   MOVE X% - DX,Y% - DY
   PLOT 173,X% + DX,Y% - DY
   GCOL 255,0,0
   RECTANGLE FILL XB% + 8*S%,YB% + .48*S%,S%,1.5*S%
   GCOL 0,0,0
   RECTANGLE FILL XB% + 5*S%,YB% + 2*S%,7*S%,S%
   GCOL 14
   VDU5
   PROCcentre(text_string3$,XE%+XB%,YB% + 2.6*S%)
   XL% = XB% + 4*S%
   XR% = XL% + 8*S%
   Y% = YB% + 3*S% + 2
   GCOL 0,0,0
   FOR X% = XL% TO XR% STEP 2*S%
     RECTANGLE FILL X%,Y%,S%,S%
   NEXT
   YL% = YB% + 4*S% + 4
   YH% = YB% + 6*S% - 2
   XL% = XB% + 3*S%
   XR% = XB% + 14*S%
   GCOL 255,255,255
   BLCK% = (XR% - XL%)/5
   STAP% = 2
   FOR X% = XL% TO XR% - BLCK% STEP BLCK%
     FORX1% = X% + STAP% TO X% + BLCK% STEP STAP%*2
       RECTANGLE FILL X1%,YL%,STAP% - 2,2*S% - 4
     NEXT
     STAP% = STAP%*2
   NEXT
   YL% = YH% + 4
   YH% = YB% + 7*S% - 2
   XR% = XB% + 14*S%
   FOR X% = XL%TO XR% STEP S%
     MOVE X%,YL%
     DRAW X%,YH%
   NEXT
   Y% = YB% + 7*S%
   I% = 2
   XL% = XB% + 4*S%
   XR% = XB% + 12*S%
   FOR X% = XL% TO XR% STEP S%
     IF I%<>6 THEN
         IF I%=1 THEN
          GCOL 255,0,0
         ENDIF 
         IF I%=2 THEN
          GCOL 0,255,0
         ENDIF
         IF I%=3 THEN
          GCOL 255,255,0
         ENDIF
         IF I%=4 THEN
          GCOL 0,0,255
         ENDIF
         IF I%=5 THEN
          GCOL 255,0,255
         ENDIF     
         RECTANGLE FILL X%,Y%,S% - 2,2*S%
         I% = I% + 1
       ELSE
         GCOL 0,255,255
         RECTANGLE FILL X%,Y% + S%,S% - 2,S%
         GCOL 0,0,0
         RECTANGLE FILL X%,Y%,S% - 2,S%
         I% = 1
       ENDIF
   NEXT
   Y% = YB% + 9*S% + 2
   I% = 0
   FOR X% = XL% TO XR% STEP S%
     IF I% <> 16 THEN
         GCOL (I%*16),(I%*16),(I%*16)
       ELSE
         GCOL 255,255,255
       ENDIF
     I% = I% + 2  
     RECTANGLE FILL X% + 2,Y%,S% - 2,S% - 2
   NEXT
   GCOL 0,0,0
   RECTANGLE FILL XB% + 8*S% + 2,YB% + 5*S%,S% - 4,3*S%
   GCOL 255,255,255
   MOVE XB% + 2.5*S%,YB% + 6.5*S%
   DRAW XB% + 14.5*S%,YB% + 6.5*S%
   MOVE XB% + 2.5*S%,(YB% + 6.5*S%)+2
   DRAW XB% + 14.5*S%,(YB% + 6.5*S%)+2
   MOVE XB% + 8.5*S%,YB% + 5*S%
   DRAW XB% + 8.5*S%,YB% + 8*S%
   GCOL 255,255,255
   RECTANGLE FILL XB% + 5*S%,YB% + 10*S% + 2,7*S%,S%
   GCOL 0,0,0
   RECTANGLE FILL XB% + 6.5*S%,YB% + 11*S%,4*S%,S%
   GCOL 0,0,0
   PROCcentre(text_string1$,XE%+XB%,YB% + 10.7*S%)
   GCOL 255,255,0
   PROCcentre(text_string2$,XE%+XB%,YB% + 11.6*S%)
 ENDPROC

 DEFPROCerror_trap
   REM this procedure will provide the program with an error handler.
   VDU 28,0,3,79,0
   VDU 4
   VDU 20
   FOR count% = 0 TO 3
     PRINT SPC(80)
   NEXT count%
   REPORT
   PRINT
   PRINT "Error ";ERR;
   PRINT " at line ";ERL
   END
 ENDPROC

 DEF PROCcentre(text$,xe%,y%)
  LOCAL x%,char_width%
  char_width%=8<<FNread_mode_variable(4)
  x%=(xe%/2)-((LEN(text$)*char_width%)/2)
  MOVE x%,y%
  VDU 5
  PRINT text$
  VDU 4
  ENDPROC
  :
  DEF FNread_mode_variable(var%)
  LOCAL result%
  SYS "OS_ReadModeVariable",-1,var% TO ,,result%
  =result%

 REM That's all folks.
