/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include <stdio.h>
#include "swis.h"
#include "cveneer.h"

#define VENEER_SIZE (21)

typedef struct {int code[VENEER_SIZE];} veneer_t;

static veneer_t veneer[MAXVENEER] =
{
    {
        0xE92D4C70,0xE10F6000,0xE1A0AA2D,0xE1A0AA0A,
        0xE89A0030,0xE59FC030,0xE59CC000,0xE99C1800,
        0xE88A1800,0xE28AAF87,0xE3A0B000,0xE1A0E00F,
        0xE59FF018,0xE25AAF87,0xE88A0030,0xE13F000F,
        0x18FD8C70,0xE128F006,0xE8BD8C70,0x00000000,
        0x00000000
 /* Equivalent to:
        STMDB   R13!,{R4-R6,R10,R11,R14}
        MRS     R6,CPSR                 ; NOP on ARM2/3
        MOV     R10,R13,LSR #20
        MOV     R10,R10,LSL #20
        LDMIA   R10,{R4,R5}
        LDR     R12,PrivateWord
        LDR     R12,[R12,#0]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        MOV     R14,PC
        LDR     PC,Routine
        SUBS    R10,R10,#540            ; sets at least the C flag
        STMIA   R10,{R4,R5}
        TEQ     PC,PC                   ; test processor mode
        LDMNEIA R13!,{R4-R6,R10,R11,PC}^
        MSR     CPSR_f,R6               ; restore flags
        LDMIA   R13!,{R4-R6,R10,R11,PC}
    PrivateWord
        DCD     0
    Routine
        DCD     0
 
    Was:
        LDR     R12,[R13,#0]
        STMDB   R13!,{R4,R5,R10,R11,R14}
        STMDB   R13!,{R12}              ; preserve 5th argument at base of stack - unnecessary
        MOV     R10,R13,LSR #20
        MOV     R10,R10,LSL #20
        LDMIA   R10,{R4,R5}
        LDR     R12,PrivateWord
        LDR     R12,[R12,#0]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        MOV     R14,PC
        LDR     PC,Routine
        SUB     R10,R10,#540
        STMIA   R10,{R4,R5}
        ADD     R13,R13,#4
        LDMIA   R13!,{R4,R5,R10,R11,PC}^
    PrivateWord
        DCD     0
    Routine
        DCD     0
  */
    }
};

static int index = 0;

int CVeneer(int func, void *pw)
{
    if(index >= MAXVENEER)
    {
        printf("Too many veneers\n");
        return 0;
    }
    if(index > 0)
        veneer[index] = veneer[0];
    veneer[index].code[VENEER_SIZE - 1] = func;
    veneer[index].code[VENEER_SIZE - 2] = (int) pw;
    _swix (OS_SynchroniseCodeAreas,
           _INR(0,2),
           1,
           &veneer[index].code[0],
           &veneer[index].code[VENEER_SIZE - 3]);
    return (int) (veneer + index++);
}
