/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW: Initial version
*/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "bool.h"
#include "swis.h"
#include "recog.h"

#define REPLAY_FILETYPE 0xAE7

extern void filtercode(void);

static bool filter_started = false;

static int filter_lastref = 0;

typedef enum {
  Unknown,
  Ignore,
  Image,
  Real
} action;

static action filter_fasttrack = Unknown;

void rewrite_as_image(char *pathname, const char *block)
{
  strcpy(pathname, block+44);
  strcat(pathname, ".ARMovie");
}

void rewrite_as_fs(char *pathname, const char *block)
{
  int i;

  strcpy(pathname, "MovieFS:");
  strcat(pathname, block+44);
  /* Now translate :'s to #'s */
  for (i=0; pathname[i]!=0; i++)
    if (pathname[i] == ':') pathname[i] = '#';
  strcat(pathname, ":$.ARMovie");
}

void filter_handler(int event, char *block) {

  _kernel_swi_regs regs;
  _kernel_oserror *error;
  int ft, len, real_ft, extra, newlen;
  bool try_as_image;
  bool image_file = false;
  char pathname[256], buffer[256];

  if (filter_lastref == ((int *) block)[2]) {
    switch (filter_fasttrack) {
      case Ignore:
      case Unknown:
        return;
      case Image:
        rewrite_as_image(pathname, block);
        break;
      case Real:
        rewrite_as_fs(pathname, block);
        break;
    }
  } else {
    /* Otherwise we get to do the donkey work */
    filter_lastref = ((int *) block)[2];
    filter_fasttrack = Unknown;

    /* Shifting? */
    regs.r[0] = 121;
    regs.r[1] = 0x80;
    error = _kernel_swi(OS_Byte, &regs, &regs);
    if ((error != NULL) | (regs.r[1] == 0xFF)) {
      /* Yes (or we got an error), so leave */
      filter_fasttrack = Ignore;
      return;
    }

    /* We know event = 17,18,19 and block[4]=3 or 5 */
    /* First get the filetype the message claims it is */
    ft = ((int *) block)[10];

    /* How long is the name? */
    len = strlen(block+44);

    /* If its an app or dir then get the filetype it actually is */
    if ((ft == 0x1000) | (ft == 0x2000)) {
      regs.r[0] = 17;
      regs.r[1] = (int) block+44;
      error = _kernel_swi(OS_File, &regs, &regs);
      if ((error != NULL) | (regs.r[0] == 0)) {
        /* No Such file - SEP */
        filter_fasttrack = Ignore;
        return;
      }
      if ((regs.r[0] & 2) != 2) {
        /* Wierd - don't make it wierder */
        filter_fasttrack = Ignore;
        return;
      }
      if (regs.r[0] == 3) {
        image_file = true;
        ft = (int) ((((unsigned int)regs.r[2])<<12)>>20);
      }
    }

    /* Open the file */
    regs.r[0] = 0x4F;
    regs.r[1] = (int) block+44;
    error = _kernel_swi(OS_Find, &regs, &regs);
    if ((error != NULL) | (regs.r[0] == 0)) {
      /* We couldn't open the file... */
      /* Could be cos a file within the image is already open */
      if ((!image_file) | (!RecogKnownType(ft))) {
        /* Its not an image of a known type. */
        filter_fasttrack = Ignore;
        return;
      }
    } else {

      /* Try to recognise it */
      real_ft = RecogRec(regs.r[0], ft);

      /* Close the file */
      regs.r[1] = regs.r[0];
      regs.r[0] = 0;
      error = _kernel_swi(OS_Find, &regs, &regs);
      if (error != NULL) {
        filter_fasttrack = Ignore;
        return;
      }
      /* If its unrecognised, leave */
      if (real_ft == -1) {
        filter_fasttrack = Ignore;
        return;
      }

      if (ft != real_ft) {
        /* Set the real type */
        regs.r[0] = 18;
        regs.r[1] = (int) block+44;
        regs.r[2] = real_ft;
        error = _kernel_swi(OS_File, &regs, &regs);
        ft = real_ft;
      }
      /* Filetype will have been set by now if possible */
    }
    /* At this point, either we have a recognised file, or we have an    */
    /* image file of a known type. Now we are definately going to fiddle */
    /* with it. */
    regs.r[0] = 17;
    regs.r[1] = (int) block+44;
    error = _kernel_swi(OS_File, &regs, &regs);
    if ((error != NULL) | (regs.r[0] == 0)) {
      /* No Such file - SEP */
      filter_fasttrack = Ignore;
      return;
    }

    try_as_image = true;

    if (((int) ((((unsigned int)regs.r[2])<<12)>>20)) != ft) {
      /* Filetype cannot be set */
      try_as_image = false;
    }
    if (regs.r[0] != 3) {
      /* Its not an image file */
      try_as_image = false;
    }
    /* If adding ".ARMovie" on the end would make it too long then SEP */
    if ((len+8+44)>=256) {
      filter_fasttrack = Ignore;
      return;
    }

    if (try_as_image) {
      /* Lets see if there is an ARMovie in the image file */
      rewrite_as_image(pathname, block);
      regs.r[0] = 17;
      regs.r[1] = (int) pathname;
      error = _kernel_swi(OS_File, &regs, &regs);
      if ((error == NULL) & (regs.r[0] != 0)) {
        /* We have an ARMovie - fab */
        filter_fasttrack = Image;
      } else {
        /* Can we even open it as a directory? */
        regs.r[0] = 9;
        regs.r[1] = (int) (block+44);
        regs.r[2] = (int) buffer;
        regs.r[3] = 1;
        regs.r[4] = 0;
        regs.r[5] = 256;
        regs.r[6] = 0;
        error = _kernel_swi(OS_GBPB, &regs, &regs);
        if (error == NULL) {
          /* The imageFS works, but no ARMovie file; A problem */
          /* Just allow nature to run its course */
          filter_fasttrack = Ignore;
          return;
        } else {
          /* The ImageFS is broken */
          try_as_image = false;
        }
      }
    }
    if (!try_as_image) {
      /* If adding "MovieFS#:$.ARMovie" would make it too long then SEP */
      if ((len+18+44)>=256) {
        filter_fasttrack = Ignore;
        return;
      }
      /* Rewrite filename as an FS */
      rewrite_as_fs(pathname, block);
      /* Lets see if there is an ARMovie in the file as an FS */
      regs.r[0] = 17;
      regs.r[1] = (int) pathname;
      error = _kernel_swi(OS_File, &regs, &regs);
      if ((error == NULL) & (regs.r[0] != 0)) {
        /* We have an ARMovie - fab */
        filter_fasttrack = Real;
      } else {
        /* Can we even open it as a directory? */
        regs.r[0] = 9;
        regs.r[1] = (int) pathname;
        regs.r[2] = (int) buffer;
        regs.r[3] = 1;
        regs.r[4] = 0;
        regs.r[5] = 256;
        regs.r[6] = 0;
        error = _kernel_swi(OS_GBPB, &regs, &regs);
        if (error == NULL) {
          /* The FS file works, but no ARMovie file; A problem  */
          /* Just allow nature to run its course on the FS file */
          /* So remove .ARMovie from the end */
          len = strlen(pathname);
          pathname[len-8] = 0;
        } else {
          /* Then something is really broken - SEP */
          filter_fasttrack = Ignore;
          return;
        }
      }
    }
  }
  /* Find the length we would have expected the message to be */
  len = (strlen(block+44) + 1 + 3) & ~3;
  /* Now find how many extra bytes there were on the message */
  extra = (*((int *)block)) - len;
  if (extra > 0) {
    /* How much longer is the new block? */
    newlen = (strlen(pathname) + 1 + 3) & ~3;
    if ((newlen+44+extra)>=256) {
      filter_fasttrack = Ignore;
      return;
    }
    /* Copy those extra bytes on... */
    memmove(block+newlen, block+len, extra);
  }
  /* So pathname now contains the REAL pathname which we know will fit */
  strcpy(block+44, pathname);
  /* And the filetype */
  ((int *) block)[10] = REPLAY_FILETYPE;
}

static char kickstart_string[] = "Kickstart";

static int filter_pw;

void startfilter(void) {

  _kernel_swi_regs regs;

  if (!filter_started) {
    regs.r[0] = (int) kickstart_string;
    regs.r[1] = (int) filtercode;
    regs.r[2] = filter_pw;
    regs.r[3] = 0;
    regs.r[4] = -1 ^ (1<<17) ^ (1<<18) ^ (1<<19);
    if (_kernel_swi(Filter_RegisterPostFilter, &regs, &regs) == NULL) {
      filter_started = true;
    }
  }
}

void filterdying(void) {
  filter_started = false;
}

void killfilter(void) {

  _kernel_swi_regs regs;

  if (filter_started) {
    regs.r[0] = (int) kickstart_string;
    regs.r[1] = (int) filtercode;
    regs.r[2] = filter_pw;
    regs.r[3] = 0;
    regs.r[4] = -1 ^ (1<<17) ^ (1<<18) ^ (1<<19);
    _kernel_swi(Filter_DeRegisterPostFilter, &regs, &regs);
    filter_started = false;
  }
}
