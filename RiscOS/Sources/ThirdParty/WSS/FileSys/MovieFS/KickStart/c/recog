/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    RJW: Initial version
*/

#include "swis.h"
#include "kernel.h"
#include "recog.h"
#include "bool.h"
#include "cveneer.h"
#include "filter.h"

#include "serv.h"


typedef struct
{
    int   file_type;
    char *title;
    int   (*recognise)(int,int);
} recog_t;

typedef struct
{
    bool    test;
    recog_t rec;
} recog_table_t;

#define MAX_RECOGNISERS (200)

static recog_table_t recog_arr[MAX_RECOGNISERS];

status_t status;

static void recog_add(recog_t *ep)
{
  int i;

  if (status.number_of_recs < MAX_RECOGNISERS) {
    /* Add it to the end of the array */
    recog_arr[status.number_of_recs].rec = *ep;
    recog_arr[status.number_of_recs].test = true;
    /* Now, do we need to try it? */
    for (i = 0; i < status.number_of_recs; i++) {
      if (recog_arr[i].rec.recognise == ep->recognise) {
        recog_arr[status.number_of_recs].test = false;
      }
    }
    status.number_of_recs++;
  }
}

static void recog_remove(recog_t *ep)
{
  bool found;
  int i, n;

  found = false;
  for (i=0; (i < status.number_of_recs) & (!found); i++) {
    if ((recog_arr[i].rec.file_type == ep->file_type) |
        (recog_arr[i].rec.recognise == ep->recognise)) {
      found = true;
    }
  }
  if (found) {
    /* Do we need to pass the responsibility for testing up from this? */
    if (recog_arr[i].test) {
      for(n=i; n<status.number_of_recs ; n++) {
        if (recog_arr[n].rec.recognise == ep->recognise) {
          recog_arr[n].test = true;
          break;
        }
      }
    }
    /* Shuffl'em down */
    for (; i<status.number_of_recs; i++) {
      recog_arr[i] = recog_arr[i+1];
    }
    status.number_of_recs--;
  }
}

void RecogAnnounce(int flags, int table)
{
  recog_t *ep;

  ep = ((recog_t *) table);
  switch(flags)
  {
    /* case 0: Someone deregistering */
    case 0:
      recog_remove(ep);
      break;
    /* case 1: Someone registering */
    case 1:
      recog_add(ep);
      break;
  }
}

static void reply(int flags, int reason, int table, int ver)
{
    if(ver == 0)
        RecogAnnounce(flags, table);
}

/* We startup - so lets see who's out there... */
void RecogStartUp(void *pw)
{
    _kernel_swi_regs r;
    
    status.number_of_recs = 0;
    r.r[1] = Service_RecogEnumerate;
    r.r[2] = CVeneer((int) reply, pw);
    r.r[3] = 0;
    _kernel_swi(OS_ServiceCall, &r, &r);
}

int RecogRec(int file_handle, int file_type)
{
  int i, n;

  n = -1;
  if ((file_type == 0xFE4) | (file_type == 0xFFD)) {
    /* We are hunting for an unknown type */
    for (i=status.number_of_recs-1; (n == -1) & (i >= 0); i--)
      if (recog_arr[i].test)
        n = recog_arr[i].rec.recognise(0, file_handle);
  } else {
    for (i=status.number_of_recs-1; (n == -1) & (i >= 0); i--)
      if (file_type == recog_arr[i].rec.file_type)
        n = recog_arr[i].rec.recognise(0, file_handle);
  }
  return n;
}

bool RecogKnownType(int ft)
{
  int i;

  for (i=0; i < status.number_of_recs; i++) {
    if (recog_arr[i].rec.file_type == ft)
      return true;
  }
  return false;
}
