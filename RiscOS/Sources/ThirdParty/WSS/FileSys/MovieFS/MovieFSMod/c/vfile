/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include "fileio.h"
#include "error.h"
#include "memory.h"
#include "recog.h"

#include "vfile.h"

struct vfile_s
{
    int handle;
    int stay_open;
    char *name;
    recog_t recog;
};


vfile_t VFileMake(int handle, int stay_open)
{
    jmp_buf jb;
    volatile vfile_t vf;
    char *s;
    
    ErrorSave(jb);
    vf = NULL;
    if(setjmp(*ErrorLink()))
    {
        if(vf)
        {
            if(vf->recog) RecogClose(vf->recog);
            if(vf->name) Free(vf->name);
            Free(vf);
            ErrorPass(jb);
        }
    }
    else
    {
        vf = Malloc(sizeof(*vf)); /* Okay */
        vf->handle = handle;
        vf->stay_open = stay_open;
        vf->name = NULL;
        vf->recog = NULL;
        vf->recog = RecogOpen(handle);
        if(!stay_open)
        {
            s = FsName(vf->handle);
            if(s == NULL) Error("File name too long");
            vf->name = Malloc0(strlen(s)+1); /* Okay */
            if(vf->name == NULL) Error("Insufficient memory");
            strcpy(vf->name, s);
        }
    }
    ErrorRestore(jb);
    return vf;
}

void VFileFree(vfile_t vf)
{
    RecogClose(vf->recog);
    if(vf->name) Free(vf->name);
    Free(vf);
}

int VFileSize(vfile_t vf)
{
    return RecogSize(vf->recog);
}

char *VFileError(vfile_t vf)
{
    return RecogError(vf->recog);
}

int VFileHandle(vfile_t vf)
{
    return vf->handle;
}

void VFileOpen(vfile_t vf)
{
    if(!vf->stay_open)
    {
        vf->handle = FsOpen(vf->name);
        RecogReadHandle(vf->recog, vf->handle);
    }
}

void VFileClose(vfile_t vf)
{
    if(!vf->stay_open)
    {
        FsClose(vf->handle);
        vf->handle = 0;
    }
}

void VFileRead(char *buf, int pos, int size, vfile_t vf)
{
    RecogRead(buf, pos, size, vf->recog);
}
