/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include "memory.h"
#include "list.h"

void ListAdd(list_t *lp, void *data)
{
    list_t l;
    
    l = Malloc(sizeof(*l)); /* Okay */
    l->data = data;
    l->link = *lp;
    *lp = l;
}

void ListRemove(list_t *lp, void *data)
{
    list_t *li, l;
    
    li = lp;
    while(*li)
    {
        if((*li)->data == data)
        {
            l = *li;
            *li = (*li)->link;
            Free(l);
        }
        else
        {
            li = &(*li)->link;
        }
    }
}
            
void *ListFind(list_t l, pred_t pred)
{
    while(l)
    {
        if(pred(l->data))
            return l->data;
        l = l->link;
    }
    return NULL;
}

void ListToAll(list_t l, pred_t pred, action_t action)
{
    while(l)
    {
        if(pred(l->data))
            action(l->data);
        l = l->link;
    }
}

void ListKill(list_t *lp, action_t action)
{
    list_t l;
    
    while(*lp)
    {
        l = *lp;
        *lp = (*lp)->link;
        action(l->data);
        Free(l);
    }
}
