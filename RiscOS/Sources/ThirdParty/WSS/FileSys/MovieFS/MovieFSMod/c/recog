/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include "swis.h"
#include "kernel.h"
#include "error.h"
#include "memory.h"
#include "unit.h"
#include "list.h"
#include "cveneer.h"

#include "recog.h"

#include "serv.h"
#include "unit.h"


typedef struct
{
    int file_type;
    unit_t unit;
} *recog_table_t;

typedef struct
{
    int count;
    unit_t unit;
} *unit_rec_t;

typedef struct
{
    int count, file_type;
} *ft_t;

struct recog_s
{
    unit_t *unit;
    int unit_handle;
};


static list_t recog_list, ft_list, unit_list;

static ft_fun_t file_type_adder, file_type_remover;

static int local_file_type;
static int local_file_handle;
static unit_t local_unit;

static int is_local_file_type(ft_t ft)
{
    return ft->file_type == local_file_type;
}

static int is_local_unit(unit_rec_t ur)
{
    return ur->unit.recognise == local_unit.recognise;
}

static int recog_uses_local_unit(recog_t r)
{
    return r->unit->recognise == local_unit.recognise;
}

static void close_and_invalidate(recog_t recog)
{
    recog->unit->close(recog->unit_handle);
    recog->unit = &UnitNull;
}

static int just_is(ft_t ft)
{
    return 1;
}

static void add_file_type(ft_t ft)
{
    file_type_adder(ft->file_type);
}

static int recognised_local_file_handle(unit_rec_t unit_rec)
{
    return unit_rec->unit.recognise(0, local_file_handle) != -1;
}


void RecogAdder(ft_fun_t fta)
{
    file_type_adder = fta;
}

void RecogRemover(ft_fun_t ftr)
{
    file_type_remover = ftr;
}


static void recog_add(recog_table_t ep)
{
    volatile ft_t ft;
    volatile unit_rec_t unit_rec;
    jmp_buf jb;
    volatile int ft_stage, unit_stage;

    ErrorSave(jb);
    ft = NULL;
    unit_rec = NULL;
    ft_stage = unit_stage = 0;
    if(setjmp(*ErrorLink()))
    {
        switch(ft_stage)
        {
            case 2: ListRemove(&ft_list, ft);
                    file_type_remover(ft->file_type);
            case 1: Free(ft);
        }
        switch(unit_stage)
        {
            case 2: ListRemove(&unit_list, unit_rec);
            case 1: Free(unit_rec);
        }
        ErrorPass(jb);
    }
    else
    {
        local_file_type = ep->file_type;
        ft = ListFind(ft_list, is_local_file_type);
        if(ft)
        {
            ft->count++;
        }
        else
        {
            ft = Malloc(sizeof(*ft)); /* Okay */
            ft_stage = 1;
            ft->file_type = local_file_type;
            ft->count = 1;
            ListAdd(&ft_list, ft);
            file_type_adder(local_file_type);
            ft_stage = 2;
        }
        local_unit = ep->unit;
        unit_rec = ListFind(unit_list, is_local_unit);
        if(unit_rec)
        {
            unit_rec->count++;
        }
        else
        {
            unit_rec = Malloc(sizeof(*unit_rec)); /* Okay */
            unit_stage = 1;
            unit_rec->unit = local_unit;
            unit_rec->count = 1;
            ListAdd(&unit_list, unit_rec);
            unit_stage = 2;
        }
    }
    ErrorRestore(jb);
}

static void recog_remove(recog_table_t ep)
{
    ft_t ft;
    unit_rec_t unit_rec;

    local_file_type = ep->file_type;
    ft = ListFind(ft_list, is_local_file_type);
    if(ft)
    {
        ft->count--;
        if(ft->count == 0)
        {
            file_type_remover(ft->file_type);
            ListRemove(&ft_list, ft);
            Free(ft);
        }
    }
    local_unit = ep->unit;
    unit_rec = ListFind(unit_list, is_local_unit);
    if(unit_rec)
    {
        unit_rec->count--;
        if(unit_rec->count == 0)
        {
            local_unit = unit_rec->unit;
            ListToAll(recog_list, recog_uses_local_unit,
                                  close_and_invalidate);
            ListRemove(&unit_list, unit_rec);
            Free(unit_rec);
        }
    }
}

void RecogAnnounce(int flags, int table)
{
    recog_table_t ep;

    ep = (recog_table_t) table;
    switch(flags)
    {
        case 0:
            recog_remove(ep);
            break;
        case 1:
            recog_add(ep);
            break;
    }
}

static void close_and_free_recog(recog_t recog)
{
    recog->unit->close(recog->unit_handle);
    Free(recog);
}

static void free_unit(unit_rec_t unit_rec)
{
    Free(unit_rec);
}

static void remove_and_free_ft(ft_t ft)
{
    file_type_remover(ft->file_type);
    Free(ft);
}

void RecogShutDown(void)
{
    ListKill(&ft_list, remove_and_free_ft);
    ListKill(&recog_list, close_and_free_recog);
    ListKill(&unit_list, free_unit);
}


static void reply(int flags, int reason, int table, int ver)
{
    if(ver == 0)
        RecogAnnounce(flags, table);
}

void RecogStartUp(void *pw)
{
    _kernel_swi_regs r;

    r.r[1] = Service_RecogEnumerate;
    r.r[2] = CVeneer((int) reply, pw);
    r.r[3] = 0;
    _kernel_swi(OS_ServiceCall, &r, &r);
}

void RecogRedeclare(void)
{
    ListToAll(ft_list, just_is, add_file_type);
}

recog_t RecogOpen(int file_handle)
{
    volatile recog_t recog;
    unit_rec_t unit_rec;
    jmp_buf jb;

    local_file_handle = file_handle;
    unit_rec = ListFind(unit_list, recognised_local_file_handle);
    if(unit_rec == NULL) Error("Not recognised (RecogOpen)");
    ErrorSave(jb);
    recog = NULL;
    if(setjmp(*ErrorLink()))
    {
        if(recog)
        {
            if(recog->unit_handle)
                recog->unit->close(recog->unit_handle);
            Free(recog);
        }
        ErrorPass(jb);
    }
    else
    {
        recog = Malloc(sizeof(*recog)); /* Okay */
        recog->unit = &(unit_rec->unit);
        recog->unit_handle = NULL;
        recog->unit_handle = unit_rec->unit.open(file_handle);
        if(recog->unit_handle == NULL)
            Error("Not recognided");
        ListAdd(&recog_list, recog);
    }
    ErrorRestore(jb);
    return recog;
}

void RecogClose(recog_t recog)
{
    recog->unit->close(recog->unit_handle);
    ListRemove(&recog_list, recog);
    Free(recog);
}

int RecogSize(recog_t recog)
{
    return recog->unit->size(recog->unit_handle);
}

char *RecogError(recog_t recog)
{
    return recog->unit->error(recog->unit_handle);
}

void RecogReadHandle(recog_t recog, int fh)
{
    recog->unit->read_handle(recog->unit_handle, fh);
}

void RecogRead(char *buf, int pos, int size, recog_t recog)
{
    recog->unit->read(buf, pos, size, recog->unit_handle);
}
