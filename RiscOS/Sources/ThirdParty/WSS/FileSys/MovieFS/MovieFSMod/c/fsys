/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include <setjmp.h>
#include "swis.h"
#include "kernel.h"
#include "fileio.h"
#include "error.h"
#include "memory.h"
#include "fsys.h"
#include "vfile.h"

typedef enum {ROOT, MOVIE, ERROR, README} object_id_t;

struct fsys_image_s
{
    vfile_t vfile;
    char *error;
    char *special;
    int usage;
    int loadaddr;
    int execaddr;
    fsys_image_t link;
};

struct fsys_object_s
{
    fsys_image_t image;
    object_id_t id;
};

struct fsys_handle_s
{
    int ram_addr;
    fsys_object_t object;
    int handle;
};



static void no_support(void)
{
    Error("MovieFS does not support this command");
}

static void special2file(char *s)
{
    while(*s)
    {
        if(*s == '#') *s = ':';
        s++;
    }
}

static void file2special(char *s)
{
    while(*s)
    {
        if(*s == ':') *s = '#';
        s++;
    }
}

static fsys_image_t image_list = NULL, fs_list = NULL;

static void link_image(fsys_image_t img)
{
    img->link = image_list;
    image_list = img;
}

static void link_fs(fsys_image_t img)
{
    img->link = fs_list;
    fs_list = img;
}

static void unlink_image(fsys_image_t img)
{
    fsys_image_t *ptr;

    ptr = &image_list;
    while(*ptr)
        if(*ptr == img)
            *ptr = (*ptr)->link;
        else
            ptr = &((*ptr)->link);
}

static fsys_image_t find_fs(char *special)
{
    fsys_image_t ptr;

    ptr = fs_list;
    while(ptr)
    {
        if(strcmp(ptr->special, special) == 0)
            return ptr;
        ptr = ptr->link;
    }
    return NULL;
}

static void close_images(void)
{
    fsys_image_t img;
    int handle;
    char *name;
    _kernel_swi_regs r;

    img = image_list;
    while(img)
    {
        handle = VFileHandle(img->vfile);
        img = img->link;   /* Don't cut the branch you're standing on */
        name = FsName(handle);
        r.r[0] = 0xC3;
        r.r[1] = (int) name;
        _kernel_swi(OS_Find, &r, &r);
        if(r.r[0] != 0)
        {
            r.r[1] = r.r[0];
            r.r[0] = 0;
            _kernel_swi(OS_Find, &r, &r);
        }
    }
    MemMinimalise();
}

static void close_fss(int force)
{
    fsys_image_t fimage, *ptr;

    ptr = &fs_list;
    while(*ptr)
    {
        fimage = *ptr;
        if(fimage->usage == 0 || force)
        {
            *ptr = fimage->link;
            if(fimage->vfile)
                VFileFree(fimage->vfile);
            if(fimage->error) Free(fimage->error);
            if(fimage->special) Free(fimage->special);
            Free(fimage);
        }
        else
        {
            ptr = &(fimage->link);
        }
    }
    MemMinimalise();
}

char *FsysFSName = "MovieFS";

int   FsysFSNumber = 125;

char *FsysStartText = "MovieFS starting";



void FsysShut(void)
{
    close_images();
    close_fss(1);
}



fsys_image_t FsysFormImage(int handle)
{
    jmp_buf jb;
    fsys_image_t fimage;
    char *name, *error;
    
    close_images();
    close_fss(0);
    fimage = Malloc(sizeof(*fimage)); /* Okay */
    fimage->vfile = NULL;
    fimage->error = NULL;
    fimage->special = NULL;
    fimage->usage = 0;
    name = FsName(handle);
    fimage->loadaddr = FsLoadAddr(name);
    fimage->execaddr = FsExecAddr(name);
    link_image(fimage);
    ErrorSave(jb);
    if(setjmp(*ErrorLink()))
    {
        fimage->error = Malloc0(strlen(ErrorReport()->errmess)+1); /* Okay */
        if(fimage->error)
            strcpy(fimage->error, ErrorReport()->errmess);
    }
    else
    {
        fimage->vfile = VFileMake(handle, 1);
        error = VFileError(fimage->vfile);
        if(error)
        {
            fimage->error = Malloc0(strlen(error)+1); /* Okay */
            if(fimage->error)
                strcpy(fimage->error, error);
        }
        if(VFileSize(fimage->vfile) == 0)
        {
            VFileFree(fimage->vfile);
            fimage->vfile = NULL;
        }
    }
    ErrorRestore(jb);
    return fimage;
}

void FsysKillImage(fsys_image_t fimage)
{
    unlink_image(fimage);
    if(fimage->vfile) VFileFree(fimage->vfile);
    if(fimage->error) Free(fimage->error);
    Free(fimage);
}



fsys_object_t FsysCreateFile(fsys_object_t f)
{
    no_support();
    return NULL;
}

fsys_object_t FsysCreateDirectory(fsys_object_t f)
{
    no_support();
    return NULL;
}

void FsysDelete(fsys_object_t f)
{
    no_support();
}



fsys_object_t FsysRoot(char *special)
{
    jmp_buf jb;
    fsys_image_t fimage;
    fsys_object_t f;
    volatile int handle;
    char *error;
    
    f = Malloc(sizeof(*f)); /* Okay */
    fimage = find_fs(special);
    if(!fimage)
    {
        close_images();
        close_fss(0);
        fimage = Malloc0(sizeof(*fimage)); /* Okay */
        if(!fimage)
        {
            Free(f);
            Error("Insufficient memory");
        }
        fimage->vfile = NULL;
        fimage->error = NULL;
        fimage->special = NULL;
        fimage->usage = 0;
        link_fs(fimage);
        handle = 0;
        ErrorSave(jb);
        if(setjmp(*ErrorLink()))
        {
            fimage->error = Malloc0(strlen(ErrorReport()->errmess)+1); /* Okay */
            if(fimage->error)
                strcpy(fimage->error, ErrorReport()->errmess);
            if(handle)
                FsClose(handle);
        }
        else
        {
            fimage->special = Malloc(strlen(special)+1); /* Okay */
            strcpy(fimage->special, special);
            special2file(fimage->special);
            handle = FsOpen(fimage->special);
            fimage->loadaddr = FsLoadAddr(fimage->special);
            fimage->execaddr = FsExecAddr(fimage->special);
            file2special(fimage->special);
            if(handle == 0) Error("Can't open image");
            fimage->vfile = VFileMake(handle, 0);
            FsClose(handle);
            handle = 0;
            error = VFileError(fimage->vfile);
            if(error)
            {
                fimage->error = Malloc0(strlen(error)+1); /* Okay */
                if(fimage->error)
                    strcpy(fimage->error, error);
            }
            if(VFileSize(fimage->vfile) == 0)
            {
                VFileFree(fimage->vfile);
                fimage->vfile = NULL;
            }
        }
        ErrorRestore(jb);
    }
    f->image = fimage;
    f->id = ROOT;
    return f;
}

fsys_object_t FsysImgRoot(fsys_image_t fimage)
{
    fsys_object_t f;
    
    f = Malloc(sizeof(*f)); /* Okay */
    f->image = fimage;
    f->id = ROOT;
    return f;
}

fsys_object_t FsysIn(fsys_object_t f)
{
    if(f->id == ROOT)
    {
        f->id = README;
        return f;
    }
    else
    {
        FsysFree(f);
        return NULL;
    }
}

fsys_object_t FsysNext(fsys_object_t f)
{
    if(f->id == README)
    {
        f->id = MOVIE;
        if(f->image->vfile)
            return f;
    }
    if(f->id == MOVIE)
    {
        f->id = ERROR;
        if(f->image->error)
            return f;
    }
    FsysFree(f);
    return NULL;
}

fsys_object_t FsysDup(fsys_object_t f)
{
    fsys_object_t nf;
    
    nf = Malloc(sizeof(*nf)); /* Okay */
    nf->image = f->image;
    nf->id = f->id;
    return f;
}

void FsysFree(fsys_object_t f)
{
    Free(f);
}



char *FsysGetName(fsys_object_t f)
{
    switch(f->id)
    {
        case README: return "ReadMe";
        case ERROR:  return "Error";
        case MOVIE:  return "ARMovie";
        default:     Error("ROOT has no name (bug)");
        return NULL;
    }
}

void FsysSetName(fsys_object_t f, char *s)
{
    no_support();
}

int FsysGetLength(fsys_object_t f)
{
    int s;
    
    switch(f->id)
    {
        case README: s = FsSize("<MovieFS$Dir>.RMFile");
            return s == -1 ? 0 : s;
        case ERROR:  return strlen(f->image->error);
        case MOVIE:  return VFileSize(f->image->vfile);
        default:     return 0;
        return NULL;
    }
}    

void FsysSetLength(fsys_object_t f, int i)
{
    no_support();
}

int FsysGetSize(fsys_object_t f)
{
    int s;
    
    switch(f->id)
    {
        case README: s = FsSize("<MovieFS$Dir>.RMFile");
            return s == -1 ? 0 : (s + 511 & ~511);
        case ERROR:  return strlen(f->image->error) + 511 & ~511;
        case MOVIE:  return VFileSize(f->image->vfile) + 511 & ~511;
        default:     return 0;
        return NULL;
    }
}    

void FsysSetSize(fsys_object_t f, int i)
{
    no_support();
}

int FsysGetLoadAddr(fsys_object_t f)
{
    switch(f->id)
    {
        case README: return FsLoadAddr("<MovieFS$Dir>.RMFile");
        case ERROR:  return 0xFFFFFF00 | f->image->loadaddr;
        case MOVIE:  return 0xFFFAE700 | (f->image->loadaddr & 0xFF);
        default:     return 0;;
        return NULL;
    }
}    

void FsysSetLoadAddr(fsys_object_t f, int i)
{
}

int FsysGetExecAddr(fsys_object_t f)
{
    switch(f->id)
    {
        case README: return FsExecAddr("<MovieFS$Dir>.RMFile");
        case ERROR:  return f->image->execaddr;
        case MOVIE:  return f->image->execaddr;
        default:     return 0;;
        return NULL;
    }
}

void FsysSetExecAddr(fsys_object_t f, int i)
{
}

int FsysGetAttributes(fsys_object_t f)
{
    return FSYS_READ | FSYS_LOCKED;
}

void FsysSetAttributes(fsys_object_t f, int i)
{
    no_support();
}

int FsysGetType(fsys_object_t f)
{
    return f->id == ROOT ? FSYS_DIRECTORY : FSYS_FILE;
}

int FsysGetBlockSize(fsys_object_t f)
{
    return 512;
}



fsys_handle_t FsysOpen(fsys_object_t f)
{
    fsys_handle_t h;
    
    h = Malloc(sizeof(*h)); /* Okay */
    h->ram_addr = 0;
    h->object = f;
    if(f->id == README)
        h->handle = FsOpen("<MovieFS$Dir>.RMFile");
    if(f->id == MOVIE)
    {
        VFileOpen(f->image->vfile);
        //h->ram_addr = *((int *)FsInternalHandle(VFileHandle(f->image->vfile)));
    }
    f->image->usage++;
    return h;
}

void FsysClose(fsys_handle_t h)
{
    fsys_object_t f;
    
    f = h->object;
    if(f->id == README && h->handle)
        FsClose(h->handle);
    if(f->id == MOVIE)
        VFileClose(f->image->vfile);
    f->image->usage--;
    Free(h);
}

fsys_object_t FsysHandle2File(fsys_handle_t h)
{
    return h->object;
}

void FsysRead(void *buf, int i, int n, fsys_handle_t h)
{
    char *erp;
    int len;
    
    switch(h->object->id)
    {
        case README:
            if(h->handle) FsReadAt(h->handle, i, buf, n);
            break;
        case ERROR:
            erp = h->object->image->error + i;
            len = strlen(erp);
            if(len < n) n = len;
            memcpy(buf, erp, n);
            break;
        case MOVIE:
            VFileRead(buf, i, n, h->object->image->vfile);
            break;
    }
}

void FsysWrite(void *buf, int i, int n, fsys_handle_t h)
{
    no_support();
}
