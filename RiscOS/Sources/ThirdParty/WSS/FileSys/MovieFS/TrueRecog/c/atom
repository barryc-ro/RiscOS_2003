/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include "error.h"
#include "memory.h"
#include "fileio.h"
#include "t_dib.h"
#include "atom.h"

#define MAX_TOP_LEVEL_CHUNKS (32)
#define CHMAX                (50)
#define MIN(x, y) ((x) < (y) ? (x) : (y))
#define MAX(x, y) ((x) > (y) ? (x) : (y))

struct chunk_handle_s {int code, start, length, index;
                       chunk_handle link;};

static struct chunk_handle_s ch_bank[CHMAX];
static int ch_ind = 0;
static chunk_handle ch_free = NULL;
static int file_handle, needs_closing;

static char *replace_slash(char *string)
{
    static char buf[256];
    char *p;

    if(strlen(string) + 1 > 256) return string;
    strcpy(buf, string);
    p = strrchr(buf, '/');
    if(p == NULL) p = buf + strlen(buf) - 1;
    *p = '_';
    return buf;
}

static char *add_pling(char *string)
{
    static char buf[256];
    int l;

    l = strlen(string);
    if(l + 2 > 256) return string;
    strcpy(buf, string);
    buf[l] = '!';
    buf[l+1] = '\0';
    return buf;
}

static char *data2resource(char *string)
{
    static char buf[256];
    int l;

    l = strlen(string);
    if(l + 5 > 256) return string;
    strcpy(buf, string);
    if(strcmp(buf + l - 5, ".Data") == 0)
        strcpy(buf + l - 5, ".Resource");
    return buf;
}

static chunk_handle alloc_ch()
{
    chunk_handle ch;

    if(ch_free != NULL)
    {
        ch = ch_free;
        ch_free = ch->link;
        return ch;
    }
    else
    {
        if(ch_ind >= CHMAX)
            ErrorFatal("chunk-handle bank overflow");
        return ch_bank + ch_ind++;
    }
}

static int lit_end(int i)
{
    int j;
    char *ip, *jp;

    ip = (char *) &i;
    jp = (char *) &j;
    jp[0] = ip[3];
    jp[1] = ip[2];
    jp[2] = ip[1];
    jp[3] = ip[0];
    return j;
}

static chunk_handle open_file(int handle)
{
    chunk_handle ch;
    char *fname;
    int head[2];
    int true_length, feasible_length, putative_length;
    int i;

    fname = FsName(handle);
    if(fname == NULL) return NULL;
    true_length = FsSize(fname);
    if(true_length < 8) return NULL;
    FsReadAt(handle, 0, head, 8);
    /*
      Remove following switch statement if you don't expect first
      chunk to be mdat or moov
    */
    /*
    switch(head[1])
    {
        case ATOM_mdat: break;
        case ATOM_moov: break;
        default:        return NULL;
    }
    */
    feasible_length = 0;
    putative_length = lit_end(head[0]);
    if(putative_length == 0 && head[1] == ATOM_mdat)
        feasible_length = true_length;
    for(i = 0; i < MAX_TOP_LEVEL_CHUNKS
            && putative_length >= feasible_length + 8
            && putative_length <= true_length; i++)
    {
        feasible_length = putative_length;
        FsReadAt(file_handle, feasible_length, head, 8);
        putative_length = feasible_length + lit_end(head[0]);
    }
    if(feasible_length == 0) return NULL;
    ch = alloc_ch();
    ch->code = ATOM_qt;
    ch->start = 0;
    ch->length = feasible_length;
    ch->index = 0;
    return ch;
}

chunk_handle AtomOpen(int handle)
{
    chunk_handle ch, subch;
    char *name;

    ch_ind = 0;
    ch_free = NULL;
    file_handle = handle;
    needs_closing = 0;
    ch = open_file(file_handle);
    if(ch == NULL) return NULL;
    /* The following code used to insist on an mdat atom being present */
    /* Some quicktime files do not have an mdat as a top level block. */
    /* Some don't have one at all. */
    /*
    subch = AtomFind(ATOM_mdat, ch);
    if(subch == NULL) return NULL;
    AtomFree(subch);
    AtomRewind(ch);
    */
    subch = AtomFind(ATOM_moov, ch);
    if(subch == NULL)
    {
        AtomFree(ch);
        name = FsName(handle);
        if(name == NULL) return NULL;
        file_handle = FsOpen(replace_slash(name));
        if(file_handle == 0) file_handle = FsOpen(add_pling(name));
        if(file_handle == 0) file_handle = FsOpen(data2resource(name));
        if(file_handle == 0) return NULL;
        needs_closing = 1;
        ch = open_file(file_handle);
        if(ch == NULL)
        {
            FsClose(file_handle);
            return NULL;
        }
        subch = AtomFind(ATOM_moov, ch);
        if(subch == NULL)
        {
            FsClose(file_handle);
            return NULL;
        }
    }
    AtomFree(subch);
    AtomRewind(ch);
    return ch;
}

void AtomClose(void)
{
    if(needs_closing)
        FsClose(file_handle);
}

chunk_handle AtomDup(chunk_handle ch)
{
    chunk_handle res;

    res = alloc_ch();
    res->code = ch->code;
    res->start = ch->start;
    res->length = ch->length;
    res->index = ch->index;
    return res;
}

int AtomEOC(chunk_handle ch)
{
    if(ch == NULL)
        return 1;
    else
        return (ch->index >= ch->length);
}

chunk_handle AtomRead(chunk_handle ch)
{
    chunk_handle subch;
    int head[2];

    if(ch == NULL)
    {
        Error("Attempt to read null chunk");
        return NULL;
    }
    if(ch->index >= ch->length)
        return NULL;
    FsReadAt(file_handle, ch->start + ch->index, head, 8);
    if(head[0] == 0)
    {
        ch->index = ch->length;
        return NULL;
    }
    subch = alloc_ch();
    subch->code = head[1];
    subch->start = ch->start + ch->index + 8;
    subch->length = lit_end(head[0]) - 8;
    if(subch->length < 0)
        Error("Malformed atom");
    subch->index = 0;
    ch->index += lit_end(head[0]);
    if(ch->index > ch->length)
        Error("Ran off end of atom");
    return subch;
}

void AtomRewind(chunk_handle ch)
{
    if(ch == NULL)
        Error("Attempt to rewind null chunk");
    ch->index = 0;
}

int AtomType(chunk_handle ch)
{
    if(ch == NULL)
        return 0;
    return ch->code;
}

int AtomSize(chunk_handle ch)
{
    if(ch == NULL)
        return 0;
    return ch->length;
}

dib_t AtomPlace(chunk_handle ch)
{
    dib_t dib;

    dib.start = ch->start;
    dib.size = ch->length;
    return dib;
}

void AtomData(chunk_handle ch, void *buf, int size)
{
    int i, isize, *ibuf;;
    if(ch)
    {
        FsReadAt(file_handle, ch->start, buf, MIN(size, ch->length));
        ibuf = (int *) buf;
        isize = (size >> 2);
        for(i = 0; i < isize; i++)
            ibuf[i] = lit_end(ibuf[i]);
    }
}

void AtomDataNoReorg(chunk_handle ch, void *buf, int size)
{
    if(ch)
    {
        FsReadAt(file_handle, ch->start, buf, MIN(size, ch->length));
    }
}

void AtomFree(chunk_handle ch)
{
    if(ch != NULL)
    {
        ch->link = ch_free;
        ch_free = ch;
    }
}

chunk_handle AtomFind(int type, chunk_handle ch)
{
    chunk_handle sub_ch;

    while(!AtomEOC(ch))
    {
        sub_ch = AtomRead(ch);
        if(AtomType(sub_ch) == type)
            return sub_ch;
        else
            AtomFree(sub_ch);
    }
    return NULL;
}
