/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include <ctype.h>
#include <string.h>
#include <stdio.h>
#include "options.h"
#include "error.h"
#include "memory.h"
#include "riff.h"
#include "decode.h"
#include "t_dec.h"

typedef struct
{
    int comp, depth;
    struct dec_s decoder;
} maprow_t;

static char white[] = " \t\n";
static char empty[] = "";
static char *start, *end;

static char *strdup(char *s)
{
    char *r;

    if(!s) return empty;
    r = Malloc0(strlen(s)+1);
    if(!r) return empty;
    strcpy(r, s);
    return r;
}

static void tokinit(char *s)
{
    end = s;
}

static char *tokget(void)
{
    start = end + strspn(end, white);
    if(*start == '\"')
    {
        start++;
        end = strchr(start, '\"');
    }
    else
    {
        end = strpbrk(start, white);
    }
    if(!end) return NULL;
    *end++ = 0;
    return start;
}

static int spacefill(int icode)
{
    char *ccode;
    int i, end;

    end = 0;
    ccode = (char *) &icode;
    for(i = 0; i < 4; i++)
    {
        if(ccode[i] == 0)
            end = 1;
        if(end)
            ccode[i] = ' ';
    }
    return icode;
}

static maprow_t *map;
static int nrows;

static int tokcomp(void)
{
    char *tok;

    tok = tokget();
    if(!tok) return 0;
    if(*tok == '&')
    {
        return sscanf(tok+1,"%x",&(map[nrows].comp));
    }
    else
    {
        map[nrows].comp = spacefill(*((int *) tok));
        return strlen(tok) <= 4;
    }
}

static int tokdepth(void)
{
    char *tok;

    tok = tokget();
    if(!tok) return 0;
    return sscanf(tok,"%d",&(map[nrows].depth));
}

static int tokdec(void)
{
    char *tok;

    tok = tokget();
    if(!tok) return 0;
    map[nrows].decoder.dec_num = strdup(tok);
    return 1;
}

static void tokcol(void)
{
    map[nrows].decoder.col_space = strdup(tokget());
}

static video_spec *vid_avi(video_spec *vs, int comp, int depth, int pal[])
{
    static struct dec_s unknown = {"699", "", 0};
    int i;

    if(depth == 8)
        for(i = 0; i < 256; i++)
            vs->palette[i] = pal[i];
    for(i = 0; i < nrows; i++)
    {
        if(map[i].comp == comp && map[i].depth == depth)
        {
            vs->decoder = &(map[i].decoder);
            return vs;
        }
    }
    vs->decoder = &unknown;
    return vs;
}

void DecodeLoadMap(void)
{
    static char buf[256];
    FILE *f;

    nrows = 0;
    map = NULL;
    f = fopen("<MovieFS$Dir>.AVIMap", "r");
    if(!f)
    {
        printf("Couldn't open <MovieFS$Dir>.AVIMap\n");
        return;
    }
    while(fgets(buf, 256, f))
        ++nrows;
    map = Malloc0(nrows * sizeof(maprow_t));
    if(!map)
    {
        printf("Insufficient memory to load <MovieFS$Dir>.AVIMap\n");
        return;
    }
    fseek(f, 0, SEEK_SET);
    nrows = 0;
    while(fgets(buf, 256, f))
    {
        tokinit(buf);
        if(tokcomp() && tokdepth() && tokdec())
        {
            tokcol();
            map[nrows].decoder.has_pal = (map[nrows].depth == 8);
            nrows++;
        }
    }
    fclose(f);
}

void DecodeFree(void)
{
    int i;
    char *s;

    for(i = 0; i < nrows; i++)
    {
        s = map[i].decoder.dec_num;
        if(s != "") Free(s);
        s = map[i].decoder.col_space;
        if(s != "") Free(s);
    }
    Free(map);
}

int DecodeType(stream_info *st)
{
    return st->header.Type;
}

video_spec *DecodeVideo(stream_info *st)
{
    stream_header header;
    stream_format format;
    video_spec    *vs;
    char *comp;

    header = st->header;
    format = st->format;
    vs = Malloc(sizeof(video_spec)); /* Okay */
    vs->xsize   = format.header.Width;
    vs->ysize   = format.header.Height;
    vs->rate    = header.Rate;
    vs->scale   = header.Scale;
    vs->nchunks = header.Length;
    vs->chunk = NULL;
    vs->force_interleave = 0;
    comp = (char *) &format.header.Compression;
    if(isprint(comp[0]) && isprint(comp[1])
       && isprint(comp[2]) && isprint(comp[3]))
    {
        sprintf(vs->compression, "%c%c%c%c(%d)",
                comp[0], comp[1], comp[2], comp[3],
                format.header.PlanesBitCount >> 16);
    }
    else
    {
        sprintf(vs->compression, "#%x(%d)",
                format.header.Compression,
                format.header.PlanesBitCount >> 16);
    }
    vs->decoder_scaled = NULL;
    return vid_avi(vs, format.header.Compression,
                       (format.header.PlanesBitCount >> 16),
                       format.palette);
}

/*
audio_spec *DecodeAudio(stream_info *st)
{
    audio_spec    *as;
    stream_header header;
    stream_format format;

    header = st->header;
    format = st->format;
    if(header.Type != RIFF_auds)
        return NULL;
    if(header.Handler != 0)
    {
        return NULL;
        Error("Unrecognised audio stream");
    }
    as = Malloc(sizeof(audio_spec));
    as->depth   = (format.header.PlanesBitCount >> 16);
    switch(as->depth)
    {
        case 8: as->channels = (format.header.PlanesBitCount & 0xFFFF); break;
        case 16: as->channels = (format.header.PlanesBitCount & 0xFFFF)/2; break;
        default: return NULL;
                 Error("AVI bps = %d", as->depth);
    }
    as->rate    = header.Rate;
    as->scale   = header.Scale;
    as->desc    = NULL;
    as->sign = as->depth == 8 ? 0 : 1;
    as->header = NULL;
    as->samples2bytes = NULL;
    as->bytes2samples = NULL;
    return as;
}
*/
