/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include <ctype.h>
#include <string.h>
#include "fileio.h"
#include "memory.h"
#include "error.h"
#include "nosup.h"
#include "options.h"
#include "t_dec.h"
#include "dl.h"
#include "avi.h"

#define NULL 0

#define SCRN_SIZE (320 * 200)
#define FMT_LARGE  0
#define FMT_MEDIUM 1
#define FMT_SMALL  2

static struct dec_s decoder = {"622", "", 1};

static int check_text(char *text, int len)
{
    int i;

    for(i = 0; i < len; i++)
      if(text[i] != 0 && !isprint(text[i] ^ 0xFF))
          return 0;
    return 1;
}

static int mk_palette_entry(int red, int green, int blue)
{
    red = (red << 2) | (red >> 4);
    green = (green << 2) | (green >> 4);
    blue = (blue << 2) | (blue >> 4);
    return (red << 16) | (green << 8) | blue;
}

typedef struct {int size, *data;} index_t;

typedef char i16_t[2];

static int i16(i16_t i)
{
    return i[0] | (i[1] << 8);
}

static index_t read_index(int ver, int pos, int nfrms, int f)
{
    index_t index;

    if(ver == 1)
    {
        char *buf;
        int i;

        buf = Malloc(nfrms);
        index.size = nfrms;
        index.data = Malloc(nfrms * sizeof(int));
        FsReadAt(f, pos, buf, nfrms);
        for(i = 0; i < nfrms; i++)
            index.data[i] = (buf[i] % 10 - 1) + (buf[i] / 10 - 1) * 4;
        Free(buf);
    }
    else
    {
        i16_t *buf;
        int i, t, j, count, loop;

        buf = Malloc(nfrms * sizeof(i16_t));
        FsReadAt(f, pos, buf, nfrms * sizeof(i16_t));
        j = i = 0;
        loop = -1;
        while(i < nfrms)
        {
            t = i16(buf[i++]);
            if(t & 0x8000)
            {
                switch(t)
                {
                    case 0xffff:
                        count = i16(buf[i++]);
                        if(loop != -1) Error("Nested loop in DL");
                        loop = i;
                        break;
                    case 0xfffe:
                        if(loop == -1) Error("Unexpected end of loop in DL");
                        if(--count > 0) i = loop;
                        break;
                    default:
                        i++;
                        break;
                }
            }
            else
            {
                j++;
            }
        }
        index.size = j;
        index.data = Malloc(j * sizeof(int));
        j = i = 0;
        loop = -1;
        while(i < nfrms)
        {
            t = i16(buf[i++]);
            if(t & 0x8000)
            {
                switch(t)
                {
                    case 0xffff:
                        count = i16(buf[i++]);
                        if(loop != -1) Error("Nested loop in DL");
                        loop = i;
                        break;
                    case 0xfffe:
                        if(loop == -1) Error("Unexpected end of loop in DL");
                        if(--count > 0) i = loop;
                        break;
                    default:
                        i++;
                        break;
                }
            }
            else
            {
                index.data[j++] = t;
            }
        }
        Free(buf);
    }
    return index;
}

dib_t calc_chunk(int fmt, int pos, int index, int nscrns)
{
    dib_t dib;
    int scrn;

    switch(fmt)
    {
        case FMT_LARGE:
            scrn = index;
            dib.start = pos + index * SCRN_SIZE;
            dib.size = SCRN_SIZE;
            break;
        case FMT_MEDIUM:
            scrn = index / 4;
            dib.start = pos + (index / 2) * (SCRN_SIZE / 2) + (index % 2) * 160;
            dib.size = SCRN_SIZE / 2;
            break;
        case FMT_SMALL:
            scrn = index / 16;
            dib.start = pos + (index / 4) * (SCRN_SIZE / 4) + (index % 4) * 80;
            dib.size = SCRN_SIZE / 4;
            break;
    }
    if(scrn >= nscrns)
        Error("DL: Invalid index %x", index);
    return dib;
}

film_spec *DlStructure(int f)
{
    char hdr[1024];
    film_spec *film;
    video_spec *vs;
    int ver, fmt, nscrns, nfrms, pos;
    int i;
    index_t index;

#ifndef DL
    return NULL;
#endif
    FsReadAt(f, 0, hdr, 1024);
    ver = hdr[0];
    switch(ver)
    {
        case 1:
          if(!check_text(hdr + 1, 20)) return NULL;
          fmt = FMT_MEDIUM;
          pos = 21;
          nscrns = hdr[pos++];
          nfrms = hdr[pos++]; nfrms |= (hdr[pos++] << 8);
          break;
        case 2:
          if(!check_text(hdr + 2, 40)) return NULL;
          fmt = hdr[1];
          pos = 42;
          nscrns = hdr[pos++];
          nfrms = hdr[pos++]; nfrms |= (hdr[pos++] << 8);
          pos += 2;
          break;
        case 3:
          if(!check_text(hdr + 2, 80)) return NULL;
          fmt = hdr[1];
          pos = 82;
          nscrns = hdr[pos++]; nscrns |= (hdr[pos++] << 8);
          nfrms = hdr[pos++]; nfrms |= (hdr[pos++] << 8);
          pos += 2;
          break;
        default:
          return NULL;
    }
    vs = Malloc(sizeof(video_spec));
    film = Malloc(sizeof(film_spec));
    film->handle = f;
    film->type = "DL";
    film->video = vs;
    film->audio = NULL;
    vs->rate = 10;      /* 10 frames per sec ??? */
    vs->scale = 1;
    vs->force_interleave = 0;
    vs->compression[0] = 0;
    vs->decoder = &decoder;
    vs->decoder_scaled = NULL;
    for(i = 0; i < 256; i++)
    {
        vs->palette[i] = mk_palette_entry(hdr[pos], hdr[pos+1], hdr[pos+2]);
        pos += 3;
    }
    switch(fmt)
    {
        case FMT_SMALL:
            vs->xsize = 80;
            vs->ysize = 50;
            break;
        case FMT_MEDIUM:
            vs->xsize = 160;
            vs->ysize = 100;
            break;
        case FMT_LARGE:
            vs->xsize = 320;
            vs->ysize = 200;
            break;
    }
    index = read_index(ver, pos + nscrns * SCRN_SIZE, nfrms, f);
    vs->nchunks = index.size;
    vs->chunk = Malloc(index.size * sizeof(dib_t));
    for(i = 0; i < index.size; i++)
        vs->chunk[i] = calc_chunk(fmt, pos, index.data[i], nscrns);
    Free(index.data);
#ifdef BaseRelease
    AviFree(film);
    NoSupport("DL");
    return NULL;
#endif
    return film;
}
