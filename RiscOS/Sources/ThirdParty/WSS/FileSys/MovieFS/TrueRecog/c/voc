/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    RJW: Initial version
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "error.h"
#include "nosup.h"
#include "options.h"
#include "memory.h"
#include "voc.h"
#include "fileio.h"

typedef struct
{
    char identifier[20];
    char data_off[2];
    char version[4];
} voc_fmt_t;

static int file_size(int handle)
{
    _kernel_swi_regs regs;

    regs.r[0] = 2;
    regs.r[1] = handle;
    _kernel_swi(OS_Args, &regs, &regs);
    return (regs.r[2]);
}

film_spec *VocStructure(int handle)
{
    film_spec *film;
    audio_spec *as;
    int nc, offset, filelen, notterminated, start, len;
    char buff[16];
    voc_fmt_t head;

#ifndef VOC
    return NULL;
#endif
    FsReadAt(handle, 0, (int *) &head, sizeof(voc_fmt_t));
    if (strncmp(head.identifier, "Creative Voice File\x1a", 20)!=0)
        return NULL;
#ifdef BaseRelease
    NoSupport("VOC (Creative Voice)");
    return NULL;
#endif
    if (strncmp(head.version, "\x0A\x01\x29\x11", 4)!=0)
        Error("Unknown Voc version");
    start = (int) (head.data_off[0] | (head.data_off[1]<<8));
    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "VOC";
    film->video = NULL;
    film->audio = as = Malloc(sizeof(audio_spec));
    as->desc = "1";
    as->depth = 8;
    as->channels = 1;
    as->rate = 10000; /* Random Default rate */
    as->scale = 1;
    as->sign = 0;
    as->header = NULL;
    as->samples2bytes = NULL;
    as->bytes2samples = NULL;
    filelen = file_size(handle);

    /* First, count the number of chunks */
    nc = 0;
    offset = start;
    notterminated = 1;
    while (notterminated) {
        FsReadAt(handle, offset, &buff, 4);
        switch (*buff) {
            case 1:
                nc++;
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                offset+=4+len;
                break;
            case 2:
                nc++;
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                offset+=4+len;
                break;
            case 3:
                offset+=7;
                break;
            case 4:
                offset+=6;
                break;
            case 5:
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                offset+=4+len;
                break;
            case 6:
                offset+=6;
                break;
            case 7:
                offset+=4;
                break;
            case 8:
                offset+=8;
                break;
            case 0:
            default:
                notterminated = 0;
                break;
        }
    }

    /* So we know how many chunks - get the memory. */
    as->nchunks = nc;
    as->chunk = Malloc(sizeof(dib_t)*(nc+1));
    nc = 0;
    offset = start;
    notterminated = 1;
    while (notterminated) {
        FsReadAt(handle, offset, &buff, 8);
        switch (*buff) {
            case 1:
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                as->chunk[nc].start = offset+6;
                as->chunk[nc].size  = len-2;
                as->rate = 1000000/(256-buff[4]);
                if (buff[5] != 0)
                    Error("Unsupported VOC compression type (%d)", buff[5]);
                nc++;
                offset+=4+len;
                break;
            case 2:
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                as->chunk[nc].start = offset+6;
                as->chunk[nc].size  = len-2;
                nc++;
                offset+=4+len;
                break;
            case 3:
                offset+=7;
                break;
            case 4:
                offset+=6;
                break;
            case 5:
                len = (int) (buff[1] | (buff[2]<<8) | buff[3]<<16);
                offset+=4+len;
                break;
            case 6:
                offset+=6;
                break;
            case 7:
                offset+=4;
                break;
            case 8:
                offset+=8;
                break;
            case 0:
            default:
                notterminated = 0;
                break;
        }
    }
    return film;
}
