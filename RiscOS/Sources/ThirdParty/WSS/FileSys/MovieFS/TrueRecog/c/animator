/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include "fileio.h"
#include "t_dec.h"
#include "error.h"
#include "nosup.h"
#include "options.h"
#include "memory.h"
#include "animator.h"

typedef struct
{
    char id[13];
    char frames;
    char duration;
    char width[2];
    char height[2];
    char unknown1[2];
    char unknown2[2];
    char palette[3 * 256];
} anm_hdr_t;

static struct dec_s decoder = {"623", "", 1}; /* Temporary */

static int int16(char *cc)
{
    return cc[0] | (cc[1] << 8);
}

static int mk_palette_entry(int red, int green, int blue)
{
    red = (red << 2) | (red >> 4);
    green = (green << 2) | (green >> 4);
    blue = (blue << 2) | (blue >> 4);
    return (red << 16) | (green << 8) | blue;
}

film_spec *AnmStructure(int handle)
{
    anm_hdr_t hdr;
    film_spec *film;
    video_spec *vs;
    int i;
    
#ifndef ANM
    return NULL;
#endif
    FsReadAt(handle, 0, &hdr, sizeof(anm_hdr_t));
    if(strcmp(hdr.id, "ANIMATORV1.0") != 0)
        return NULL;
#ifdef BaseRelease
    NoSupport("ANM (Animator v1.0)");
    return NULL;
#endif
    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "ANM";
    film->video = vs = Malloc(sizeof(video_spec));
    film->audio = NULL;
    vs->xsize = int16(hdr.width);
    vs->ysize = int16(hdr.height);
    vs->rate = 1000;
    vs->scale = hdr.duration;
    vs->nchunks = hdr.frames;
    vs->chunk = Malloc(vs->nchunks * sizeof(dib_t));
    for(i = 0; i < vs->nchunks; i++)
    {
        vs->chunk[i].start = sizeof(anm_hdr_t) + i * vs->xsize * vs->ysize;
        vs->chunk[i].size = vs->xsize * vs->ysize;
    }
    vs->force_interleave = 0;
    vs->compression[0] = 0;
    vs->decoder = &decoder;
    vs->decoder_scaled = NULL;
    for(i = 0; i < 256; i++)
        vs->palette[i] = mk_palette_entry(hdr.palette[3*i],
                                          hdr.palette[3*i+1],
                                          hdr.palette[3*i+2]);
    return film;
}
