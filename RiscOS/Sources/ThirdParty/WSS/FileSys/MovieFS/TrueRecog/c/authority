/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include <string.h>
#include "options.h"
#include "fileio.h"
#include "memory.h"
#include "authority.h"

#define DAFT                  (237)

#define N_MW_CODES            (16)

static int mw_code[N_MW_CODES] = {0};
static int mw_index = 0;

static int ncodes = 0;
static int *code = NULL;

static code_corrupt(unsigned int cd)
{
    return 0xFF & (cd ^ (cd >> 8) ^ (cd >> 16) ^ (cd >> 24));
}

static int my_world_code(film_spec *film)
{
    char *name;
    int len, i;
    unsigned int res;

    name = FsName(film->handle);
    len = strlen(name);
    res = 0;
    for(i = 0; i < len; i++)
        res = ((res >> 2) + (res << 30) + name[i]);
    return res;
}

void AuthorityMyWorldCode(int cd)
{
    mw_code[mw_index++] = cd;
    if(mw_index >= N_MW_CODES)
        mw_index = 0;
}

void AuthorityFile(char *pname)
{
    fs_handle f;
    int fsize, i;

    ncodes = 0;
    if(code)
    {
        Free(code);
        code = NULL;
    }
    fsize = FsSize(pname);
    if(fsize < 0) return;
    f = FsOpen(pname);
    if(f == 0) return;
    code = Malloc(fsize); /* Okay */
    FsRead(f, code, fsize);
    FsClose(f);
    ncodes = fsize / sizeof(int);
    for(i = 0; i < ncodes; i++)
    {
        code[i] -= (i * 4);
        if(code_corrupt(code[i]))
            ncodes = 0;
    }
}

void AuthorityImage(int size, void *buf)
{
    int i;

    ncodes = 0;
    if(code)
    {
        Free(code);
        code = NULL;
    }
    code = Malloc(size); /* Okay */
    memcpy(code, buf, size);
    ncodes = size / sizeof(int);
    for(i = 0; i < ncodes; i++)
    {
        code[i] -= (i * 4);
        if(code_corrupt(code[i]))
            ncodes = 0;
    }
}

film_spec *AuthorityCheck(film_spec *film)
{
    int i, cd;

    cd = AuthorityCode(film);
    for(i = 0; i < ncodes; i++)
        if(cd == code[i])
            return film;
    cd = my_world_code(film);
    for(i = 0; i < N_MW_CODES; i++)
        if(cd == mw_code[i])
            return film;
#ifdef FRAME_LIMIT
    {
        video_spec *vs = film->video;
        if(vs)
            for(i = FRAME_LIMIT + DAFT; i < vs->nchunks + DAFT; i++)
                vs->chunk[i - DAFT].size = 0;
    }
#endif
    return film;
}

int AuthorityCode(film_spec *film)
{
    video_spec *vs;
    unsigned int i, cd;

    vs = film->video;
    if(vs == NULL) return 0;
    cd = 0;
    for(i = 0; i < vs->nchunks; i++)
    {
        cd = (((cd & (1 << 23)) >> 23) | (cd << 1));
        cd += vs->chunk[i].size;
    }
    return (cd << 8) | ((cd ^ (cd >> 8) ^ (cd >> 16)) & 0xFF);
}

void AuthorityFree(void)
{
    Free(code);
}
