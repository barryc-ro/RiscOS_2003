/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW: Initial version
*/

#include <stdio.h>
#include <string.h>
#include "bool.h"
#include "kernel.h"
#include "swis.h"

static int file_size(FILE * handle)
{
    _kernel_swi_regs regs;

    regs.r[0] = 2;
    regs.r[1] = (int) handle;
    _kernel_swi(OS_Args, &regs, &regs);
    return (regs.r[2]);
}

static void fetch(FILE * file, char * buffer, int start, int len) {

  _kernel_swi_regs regs;
  _kernel_oserror *error;
  int i;

  regs.r[0] = 3;
  regs.r[1] = (int) file;
  regs.r[2] = (int) buffer;
  regs.r[3] = len;
  regs.r[4] = start;
  error = _kernel_swi(OS_GBPB, &regs, &regs);
  if (error != NULL) {
    for (i = 0; i < len; i++)
      buffer[i] = 0;
  }
}

int walkquicktime(FILE * file) {

  int pos, end, off, count;
  char buffer[8];

  pos = 0;
  count = 0;
  end = file_size(file);
  /* If we reach the end, or we sucessfully traverse 5 chunks we are happy */
  while ((pos < end) & (count < 5)) {
    fetch(file, buffer, pos, 8);
    off = (buffer[0]<<24)+(buffer[1]<<16)+(buffer[2]<<8)+buffer[3];
    if (off < 0) return -1;
    if (pos != 0) {
      if (buffer[4] < 32) return -1;
      if (buffer[5] < 32) return -1;
      if (buffer[6] < 32) return -1;
      if (buffer[7] < 32) return -1;
    }
    pos += off;
    count++;
  }
  return 0xfb2;
}

int walkfli(FILE * file) {

  int pos, end, off, count;
  char buffer[8];

  fetch(file, buffer, 0, 4);
  if (*((int *) buffer) != file_size(file)) return -1;
  count = 0;
  pos = 128;
  while ((pos < end) & (count < 5)) {
    fetch(file, buffer, pos, 8);
    off = *((int *) buffer);
    if (off < 0) return -1;
    if (buffer[4] !=0xfa) return -1;
    if (buffer[5] !=0xf1) return -1;
    pos += off;
    count++;
  }
  return 0xb9f;
}

int Recognise(int vsn, int f) {

  FILE * file;
  char buffer[19];
  int offset;

  /* Check we are being called in a known way */
  if (vsn != 0)
    return -1;

  file = (FILE *) f;

  /* Read the first 16 bytes */
  fetch(file, buffer, 0, 19);
  if (strncmp(buffer, "RIFF", 4) == 0) {
    if (strncmp(buffer+8, "AVI LIST", 8) == 0) {
      /* AVI */
      return 0xfb2;
    } else if (strncmp(buffer+8, "WAVEfmt ", 8) == 0) {
      /* WAV */
      return 0xfb1;
    } else {
      return -1;
    }
  }

  if (strncmp(buffer, "FORM", 4) == 0) {
    if (strncmp(buffer+8, "AIFF", 4) == 0) {
      /* AIFF */
      return 0xfc2;
    } else {
      return -1;
    }
  }

  if (strncmp(buffer, ".snd", 4) == 0) {
    return 0xf96;
  }
  if (strncmp(buffer, "ANIMATORV1.0", 12) == 0) {
    /* ANM */
    return 0xfb2;
  }

  if (strncmp(buffer, "ALawSoundFile**", 15) == 0) {
    /* WVE */
    return 0xfb1;
  }

  if (strncmp(buffer+4, "mdat", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "moov", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "skip", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "free", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer, "Creative Voice File", 19) == 0) {
    /* VOC */
    return 0xfb1;
  }

  if (strncmp(buffer, "MovieFS Indirection", 19) == 0) {
    /* VOC */
    return 0xfb2;
  }

  if ((buffer[5] == 0xaf) & ((buffer[4] == 0x11) |
                             (buffer[4] == 0x12))) {
    /* FLI */
    return walkfli(file);
  }

  /* Last ditch attempt to recognise a quicktime */
  return walkquicktime(file);
#if 0
  offset = (buffer[0]<<24)+(buffer[1]<<16)+(buffer[2]<<8)+buffer[3];
  fetch(file, buffer, offset, 8);

  if (strncmp(buffer+4, "mdat", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "moov", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "skip", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }

  if (strncmp(buffer+4, "free", 4) == 0) {
    /* Quicktime */
    return walkquicktime(file);
  }
#endif

  return -1;
}
