/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    RJW: Initial version
*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "options.h"
#include "error.h"
#include "memory.h"
#include "nosup.h"
#include "aiff.h"
#include "fileio.h"
#include "t_tni.h"
#include "bool.h"


#define AIFFCODE(a, b, c, d) (a | (b<<8) | (c<<16) | (d<<24))

#define AIFF_FORM AIFFCODE('F', 'O', 'R', 'M')
#define AIFF_AIFF AIFFCODE('A', 'I', 'F', 'F')
#define AIFF_AIFC AIFFCODE('A', 'I', 'F', 'C')
#define AIFF_COMM AIFFCODE('C', 'O', 'M', 'M')
#define AIFF_SSND AIFFCODE('S', 'S', 'N', 'D')

typedef struct
{
    int  identifier;
    tni  len;
    int  data;
} aiff_chunk_t;

typedef struct
{
    int  identifier;
    tni  len;
    char channels[2];
    char frames[4];
    char bps[2];
    char rate[10];
} aiff_comm_t;

typedef struct
{
    int identifier;
    tni len;
    tni offset;
    tni blocksize;
    int data;
} aiff_ssnd_t;

static int file_size(int handle)
{
    _kernel_swi_regs regs;

    regs.r[0] = 2;
    regs.r[1] = handle;
    _kernel_swi(OS_Args, &regs, &regs);
    return (regs.r[2]);
}

film_spec *AiffStructure(int handle)
{
    film_spec *film;
    audio_spec *as;
    int offset, frames, len, soundstart, exp, frac, real_len;
    aiff_comm_t *act;
    bool ended;
    char buff[160];

#ifndef AIFF
    return NULL;
#endif
    FsReadAt(handle, 0, &buff, 12);
    if (((aiff_chunk_t *) buff)->identifier != AIFF_FORM)
        return NULL;
    if (((aiff_chunk_t *) buff)->data != AIFF_AIFF)
        return NULL;
#ifdef BaseRelease
    NoSupport("AIFF");
    return NULL;
#endif
    len = file_size(handle);
    real_len = tni_to_int(((tni *) buff)[1]);
    if (((len-5) < real_len) | ((len-8) > real_len))
        Error("Truncated AIFF/AIFC");

    ended = false;
    offset = 12;
    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "AIFF";
    film->video = NULL;
    as = NULL;
    soundstart = 0;
    while (!ended) {
      FsReadAt(handle, offset, &buff, 160);
      switch (((aiff_chunk_t *) buff)->identifier) {
        case AIFF_COMM:
          if (as != NULL) {
            /* Wot no space leak? */
            Free(as->chunk);
            Free(as);
            Free(film);
            Error("Multiple Common chunks in AIFF!");
          } else {
            film->audio  = as = Malloc(sizeof(audio_spec));
            as->scale = 1;
            as->sign = 1;
            act = (aiff_comm_t *) buff;
            as->channels = (act->channels[0]<<8) + act->channels[1];
            as->depth    = (act->bps[0]<<8) + act->bps[1];
            as->header = NULL;
            as->samples2bytes = NULL;
            as->bytes2samples = NULL;
            frames       = (act->frames[0]<<24) + (act->frames[1]<<16) + (act->frames[2]<<8) + act->frames[3];
            exp  = ((act->rate[0] & 0x7F)<<8) + act->rate[1] - 0x3FFE - 31;
            frac = (act->rate[2]<<23) + (act->rate[3]<<15) + (act->rate[4]<<7) + (act->rate[5]>>1);
            while (exp < 0) {
              frac = frac>>1;
              exp++;
            }
            if (act->rate[0] & 0x80) frac = -frac;
            as->rate = frac;
            as->nchunks  = 1;
            as->chunk    = Malloc(sizeof(dib_t));
            as->chunk[0].size = frames * (as->depth) / 8 * (as->channels);
            as->desc    = as->depth == 16 ? "2 Lin16be" : "1";
          }
          break;
        case AIFF_SSND:
          soundstart = tni_to_int(((aiff_ssnd_t *) buff)->offset) + offset + 16;
          break;
      }
      offset += 8 + tni_to_int(((tni *) buff)[1]);
      if (offset & 1)
        offset++;
      if (offset >= len)
        ended = true;
    }
    if (as == NULL) {
      Free(film);
      Error("No Common Chunk in AIFF file");
    }
    if (soundstart == 0) {
      Free(as->chunk);
      Free(as);
      Free(film);
      Error("No Sound Data found.");
    } else {
      as->chunk[0].start = soundstart;
    }
    return film;
}
