/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include "magic.h"
#include "error.h"
#include "fileio.h"
#include "t_dib.h"
#include "riff.h"

#define NULL  (0)
#define CHMAX (50)
#define MIN(x, y) ((x) < (y) ? (x) : (y))
#define MAX(x, y) ((x) > (y) ? (x) : (y))

struct chunk_handle_s {int code, start, length, index;
                       chunk_handle link;};

static struct chunk_handle_s ch_bank[CHMAX];
static int ch_ind = 0;
static chunk_handle ch_free = NULL;
static int file_handle;

static chunk_handle alloc_ch()
{
    chunk_handle ch;
    
    if(ch_free != NULL)
    {
        ch = ch_free;
        ch_free = ch->link;
        return ch;
    }
    else
    {
        if(ch_ind >= CHMAX)
            ErrorFatal("chunk-handle bank overflow");
        return ch_bank + ch_ind++;
    }
}

chunk_handle RiffOpen(int handle, int type)
{
    chunk_handle ch;
    int head[3];

    file_handle = handle;
    FsReadAt(file_handle, 0, head, 12);
    ch_ind = 0;
    ch_free = NULL;
    ch = alloc_ch();
    ch->code = head[0];
    ch->start = 8;
    ch->length = head[1];
    ch->index = -1;
    if(ch->code != RIFF_RIFF)
        return NULL;
    ch->code = head[2];
    ch->start += 4;
    ch->length -= 4;
    ch->index = 0;
    if(ch->code != type)
        return NULL;
    return ch;
}

void RiffClose(void)
{
}

chunk_handle RiffDup(chunk_handle ch)
{
    chunk_handle res;
    
    res = alloc_ch();
    res->code = ch->code;
    res->start = ch->start;
    res->length = ch->length;
    res->index = ch->index;
    return res;
}

int RiffEOC(chunk_handle ch)
{
    if(ch == NULL)
        return 1;
    else
        return ch->index >= ch->length;
}

chunk_handle RiffRead(chunk_handle ch)
{
    chunk_handle subch;
    int head[3];

    if(ch == NULL)
    {
        Error("Attempt to read null chunk");
        return NULL;
    }
    if(ch->index == -1)
    {
        Error("Attempt to read non-LIST chunk");
        return NULL;
    }
    if(ch->index >= ch->length)
        return NULL;
    FsReadAt(file_handle, ch->start + ch->index, head, 12);
    subch = alloc_ch();
    subch->code = head[0];
    subch->start = ch->start + ch->index + 8;
    subch->length = head[1];
    subch->index = -1;
    ch->index += 8 + (subch->length + 1 & ~1);
    if(subch->code == RIFF_LIST)
    {
        subch->code = head[2];
        subch->start += 4;
        subch->length -= 4;
        subch->index = 0;
    }
    if(ch->index > (ch->length + 1 & ~1))
        Error("Malformed chunk");
    return subch;
}

void RiffRewind(chunk_handle ch)
{
    if(ch == NULL)
        Error("Attempt to rewind null chunk");
    if(ch->index == -1)
        Error("Attemp to rewind non-LIST chunk");
    ch->index = 0;
}

int RiffType(chunk_handle ch)
{
    if(ch == NULL)
        return 0;
    return ch->code;
}

int RiffSize(chunk_handle ch)
{
    if(ch == NULL)
        return 0;
    return ch->length;
}

dib_t RiffPlace(chunk_handle ch)
{
    dib_t dib;

    dib.start = ch->start;
    dib.size = ch->length;
    return dib;
}

void RiffData(chunk_handle ch, void *buf, int size)
{
    if(ch)
        FsReadAt(file_handle, ch->start, buf, MIN(size, ch->length));
}

void RiffFree(chunk_handle ch)
{
    if(ch != NULL)
    {
        ch->link = ch_free;
        ch_free = ch;
    }
}

void RiffDataMagic(chunk_handle ch, void *buf, int size)
{
    int *b, s, i;
    if(ch)
    {
        s = MIN(size, ch->length);
        FsReadAt(file_handle, ch->start, buf, s);
        b = buf;
        s /= sizeof(int);
        for(i = 0; i < s; i++)
            b[i] += MAGIC;
    }
}

