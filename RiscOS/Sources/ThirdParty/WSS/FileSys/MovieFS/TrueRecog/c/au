/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    RJW: Initial version
*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "options.h"
#include "error.h"
#include "memory.h"
#include "nosup.h"
#include "fileio.h"
#include "t_tni.h"
#include "bool.h"
#include "au.h"

/* .snd */
#define MAGIC (0x646e732e)

typedef struct
{
    int  identifier;
    tni  offset;
    tni  size;
    tni  type;
    tni  freq;
    tni  nchannels;
    tni  dummy[2];
} au_header_t;

static int file_size(int handle)
{
    _kernel_swi_regs regs;

    regs.r[0] = 2;
    regs.r[1] = handle;
    _kernel_swi(OS_Args, &regs, &regs);
    return (regs.r[2]);
}

film_spec *AuStructure(int handle)
{
    film_spec *film;
    audio_spec *as;
    int offset, size, len;
    au_header_t *head;
    char buff[160];

    FsReadAt(handle, 0, buff, 32);
    head = (au_header_t *)buff;
    if (head->identifier != MAGIC)
      return NULL;
#ifdef BaseRelease
    NoSupport("AU");
    return NULL;
#endif
    len = file_size(handle);
    offset   = tni_to_int(head->offset);
    size     = tni_to_int(head->size);
    if (size == -1)
      size = len-offset;
    if (size > len-offset)
      size = len-offset;
    else if (size != len-offset)
      Error("Malformed au/.snd file");

    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "AU/SND";
    film->video = NULL;
    film->audio  = as = Malloc(sizeof(audio_spec));
    as->scale = 1;
    as->sign = 1;
    as->channels = tni_to_int(head->nchannels);
    as->header        = NULL;
    as->samples2bytes = NULL;
    as->bytes2samples = NULL;
    switch (tni_to_int(head->type)) {
      case 1:
        /* Ulaw */
        as->depth    = 8;
        as->desc     = "2 Mulaw";
        break;
      case 2:
        /* 8 bit lin */
        as->depth    = 8;
        as->desc     = "1";
        break;
      case 3:
        /* 16 bit lin */
        as->depth    = 16;
        as->desc     = "2 Lin16be";
        break;
      case 0x1B:
        /* Alaw */
        as->depth    = 8;
        as->desc    = "2 Alaw";
        break;
      default:
        Free(as);
        Free(film);
        Error("Unsupported encoding type in .snd: %d", tni_to_int(head->type));
    }
    as->rate = tni_to_int(head->freq);
    as->nchunks  = 1;
    as->chunk    = Malloc(sizeof(dib_t));
    as->chunk[0].start = offset;
    as->chunk[0].size  = size;
    return film;
}
