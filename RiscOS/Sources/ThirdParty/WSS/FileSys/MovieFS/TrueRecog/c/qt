/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include "t_avspec.h"
#include "t_dec.h"
#include "options.h"
#include "error.h"
#include "nosup.h"
#include "memory.h"
#include "atom.h"
#include "vidqt.h"
#include "qt.h"
#include "bool.h"

typedef struct {int num, duration;} stts_rec_t;
typedef struct {int size, code, pad[6], xy, pad2[11], depth;} stsd_rec_t;
typedef struct {int ch, spc, desc;} stsc_rec_t;

typedef struct {int zero, nelts; stts_rec_t rec[1];} *stts_t;
typedef struct {int zero, nelts; stsd_rec_t rec;} *stsd_t;
typedef struct {int zero, univ, nelts; int size[1];} *stsz_t;
typedef struct {int zero, nelts; stsc_rec_t rec[1];} *stsc_t;
typedef struct {int zero, nelts; int offset[1];} *stco_t;

typedef struct {int pad[3], scale;} *mdhd_t;

static stts_t stts;
static stsd_t stsd;
static stsz_t stsz;
static stsc_t stsc;
static stco_t stco;

static bool is_vr_pan, is_vr_obj;

static int get_int(char * p) {

  int a;

  a  =  (int) p[0];
  a += ((int) p[1])<<8;
  a += ((int) p[2])<<16;
  a += ((int) p[3])<<24;

  return a;
}

static void check_for_panorama(stsd_t stsd) {

  int n           = stsd->nelts;
  int code, size;
  stsd_rec_t *rec = &stsd->rec;

  for (; n>0; n--) {
    code = get_int((char *) &rec->code);
    if (code == ATOM_pano) {
      is_vr_pan = true;
      return;
    }
    size = get_int((char *) &rec->size);
    rec = (stsd_rec_t *) (((char *) rec) + size);
  }
}

static int media_type(chunk_handle ch)
{
    int t;
    chunk_handle sub_ch;

    sub_ch = NULL;
    while(!AtomEOC(ch))
    {
        AtomFree(sub_ch);
        sub_ch = AtomRead(ch);
        t = AtomType(sub_ch);
        switch(t)
        {
            case ATOM_vmhd:
            case ATOM_smhd:
            case ATOM_gmhd:
                AtomFree(sub_ch);
                return t;
        }
    }
    return 0;
}

static int read_stbl(chunk_handle ch)
{
    chunk_handle sub_ch;

    stts = NULL;
    stsd = NULL;
    stsz = NULL;
    stsc = NULL;
    stco = NULL;
    sub_ch = NULL;
    while(!AtomEOC(ch))
    {
        AtomFree(sub_ch);
        sub_ch = AtomRead(ch);
        switch(AtomType(sub_ch))
        {
            case ATOM_stts:
                stts = Malloc(AtomSize(sub_ch));
                AtomData(sub_ch, stts, AtomSize(sub_ch));
                break;
            case ATOM_stsd:
                stsd = Malloc(AtomSize(sub_ch));
                AtomData(sub_ch, stsd, AtomSize(sub_ch));
                break;
            case ATOM_stsz:
                stsz = Malloc(AtomSize(sub_ch));
                AtomData(sub_ch, stsz, AtomSize(sub_ch));
                break;
            case ATOM_stsc:
                stsc = Malloc(AtomSize(sub_ch));
                AtomData(sub_ch, stsc, AtomSize(sub_ch));
                break;
            case ATOM_stco:
                stco = Malloc(AtomSize(sub_ch));
                AtomData(sub_ch, stco, AtomSize(sub_ch));
                break;
        }
    }
    AtomFree(sub_ch);
    if(!(stts && stsd && stsz && stsc && stco))
        return 0;
    else
        return 1;
        /*Error("Missing info in stbl atom");*/
}

static void free_stbl_cache(void)
{
    if(stts) Free(stts);
    if(stsd) Free(stsd);
    if(stsz) Free(stsz);
    if(stsc) Free(stsc);
    if(stco) Free(stco);
}

static int col48to24(int r, int g, int b)
{
    r = ((r - (r >> 8) + 0x80) >> 8);
    g = ((g - (g >> 8) + 0x80) >> 8);
    b = ((b - (b >> 8) + 0x80) >> 8);
    return b | (g << 8) | (r << 16);
}

static void default_grey4(int *palette)
{
    int i;

    for(i = 0; i < 16; i++)
        palette[i] = 0x11111111 * (15 - i);
    for(i = i; i < 256; i++)
        palette[i] = 0;
}

static void default_grey8(int *palette)
{
    int i;

    for(i = 0; i < 256; i++)
        palette[255 - i] = i | (i << 8) | (i << 16);
}

static void default_colour4(int *palette)
{
    int i;
    int def_map[15] = {0xfffbff, 0xefd9bb, 0xe8c9b1, 0x93655e, 0xfcdee8,
                       0x9d8891, 0xffffff, 0xffffff, 0xffffff, 0x474837,
                       0x7a5e55, 0xdfd0ab, 0xfffbf9, 0xe8cac5, 0x8a7c77};

    for(i = 0; i < 15; i++)
        palette[i] = def_map[i];
    for(i = i; i < 256; i++)
        palette[i] = 0;
}

static void default_colour8(int *palette)
{
    static int pat[10] = {0xEE, 0xDD, 0xBB, 0xAA, 0x88,
                          0x77, 0x55, 0x44, 0x22, 0x11};
    int r, g, b, i;

    r = g = b = 0xFF;
    for(i = 0; i < 215; i++)
    {
        palette[i] = b | (g << 8) | (r << 16);
        b -= 0x33;
        if(b < 0)
        {
            b = 0xFF;
            g -= 0x33;
        }
        if(g < 0)
        {
            g = 0xFF;
            r -= 0x33;
        }
    }
    for(i = 215; i < 256; i++)
        palette[i] = 0;
    for(i = 0; i < 10; i++)
    {
        palette[215 + i] |= (pat[i] << 16);
        palette[225 + i] |= (pat[i] << 8);
        palette[235 + i] |= pat[i];
        palette[245 + i] = pat[i] | (pat[i] << 8) | (pat[i] << 16);
    }
}

static void set_palette(video_spec *vs)
{
    unsigned int *pal;
    int flag, start, end, cflag, depth;
    int i, p, r, g, b;

    pal = ((unsigned int *) &stsd->rec) + 20;
    depth = *pal++ & 0xFFFF;
    switch(depth)
    {
        case 0x4:
            default_colour4(vs->palette);
            break;
        case 0x8:
            default_colour8(vs->palette);
            break;
        case 0x24:
            default_grey4(vs->palette);
            break;
        case 0x28:
            default_grey8(vs->palette);
            break;
    }
    flag = *pal++ >> 16;
    if(flag & 8 || stsd->rec.size <= 86)
        return;
    start = *pal >> 16;
    cflag = *pal++ & 0xFFFF;
    end = *pal >> 16;
    if(end > 0xFF)
        Error("Palette too big");
    for(i = start; i <= end; i++)
    {
        p = *pal++ & 0xFFFF;
        r = *pal >> 16;
        g = *pal++ & 0xFFFF;
        b = *pal >> 16;
        if(cflag & 0x8000) p = i;
        if(p <= 0xFF)
            vs->palette[p] = col48to24(r, g, b);
    }
}

static int base_duration(void)
{
    int i, start, end, res;

    start = 0;
    end = stts->nelts;
    if(end == 0) Error("No samples");
    if(end > 1 && stts->rec[end - 1].num == 1) end--;
    if(end > 1 && stts->rec[start].num == 1) start++;
                                   /* First and last sample often short */
    res = stts->rec[start].duration;
    for(i = start + 1; i < end; i++)
        if(stts->rec[i].duration < res)
            res = stts->rec[i].duration;
    return res;
}

static int duration_count(int duration)
{
    int i, n, total;

    n = stts->nelts;
    total = 0;
    for(i = 0; i < n; i++)
        total += stts->rec[i].num * stts->rec[i].duration;
    total -= stts->rec[n-1].duration;
    return (total + duration - 1) / duration + 1;
}

static int nchunk, ichunk;
static dib_t *chunk;

static void def_chunk(int start, int size)
{
    if(ichunk >= nchunk) Error("Chunk allocation overflow %d", ichunk);
    chunk[ichunk].start = start;
    chunk[ichunk].size = size;
    ichunk++;
}

static video_spec *video_info(int scale)
{
    int nco, nsc, nsz, nts;
    int ico, isc, isz, its;
    int samp_num, samp_dur;
    int time, frame_time;
    int spc, desc, offset, i, size;
    int xy, duration;
    video_spec *vs;

    xy = stsd->rec.xy;
    duration = base_duration();
    nchunk = duration_count(duration);
    ichunk = 0;
    chunk = Malloc(nchunk * sizeof(dib_t));
    nco = stco->nelts;
    nsc = stsc->nelts;
    nsz = stsz->nelts;
    nts = stts->nelts;
    isc = isz = its = 0;
    spc = desc = -1;
    samp_num = 0;
    time = frame_time = 0;
    for(ico = 0; ico < nco; ico++)
    {
        if(isc < nsc && ico == stsc->rec[isc].ch - 1)
        {
            spc = stsc->rec[isc].spc;
            desc = stsc->rec[isc].desc;
            isc++;
        }
        if(spc == -1) Error("Samples per chunk undefined");
        offset = stco->offset[ico];
        for(i = 0; i < spc && isz < nsz; i++)
        {
            while(time < frame_time)
            {
                def_chunk(offset, 0);
                time += duration;
            }
            size = (stsz->univ ? stsz->univ : stsz->size[isz]);
/*            def_chunk(offset, desc == 1 ? size : 0); */
            def_chunk(offset, size);
            offset += size;
            isz++;
            time += duration;
            if(samp_num == 0)
            {
                if(its >= nts) Error("Sample-duration mismatch (1)");
                samp_num = stts->rec[its].num;
                samp_dur = stts->rec[its].duration;
                its++;
            }
            frame_time += samp_dur;
            samp_num--;
        }
    }
    if(its != nts || samp_num != 0) Error("Sample-duration mismatch (2)");
    if(ichunk != nchunk) Error("Chunk count miscalculation");
    vs = Malloc(sizeof(video_spec));
    vs->xsize   = (xy >> 16);
    vs->ysize   = (xy & 0xFFFF);
    vs->rate    = scale;
    vs->scale   = duration;
    vs->nchunks = nchunk;
    vs->chunk   = chunk;
    vs->force_interleave = 0;
    vs->decoder = NULL;
    vs->decoder_scaled = NULL;
    vs->compression[0] = 0;
    set_palette(vs);
    return VidQt(vs, stsd->rec.code, stsd->rec.depth);
}

static sound_pos_t s2b1c(sound_hdr_t *hdr, int samples)
{
    int blocks;
    sound_pos_t pos;

    blocks = samples / 0x40;
    pos.samples = samples - blocks * 0x40;
    pos.low = blocks * 0x22;
    pos.high = pos.low + (pos.samples ? 0x22 : 0);
    return pos;
}

static int b2s1c(sound_hdr_t *hdr, int bytes)
{
    return (bytes / 0x22) * 0x40;
}

static sound_pos_t s2b2c(sound_hdr_t *hdr, int samples)
{
    int blocks;
    sound_pos_t pos;

    blocks = samples / 0x40;
    pos.samples = samples - blocks * 0x40;
    pos.low = blocks * 0x44;
    pos.high = pos.low + (pos.samples ? 0x44 : 0);
    return pos;
}

static int b2s2c(sound_hdr_t *hdr, int bytes)
{
    return (bytes / 0x44) * 0x40;
}

static audio_spec *audio_info(int scale)
{
    int nco, nsc, ico, isc;
    int spc, desc, offset;
    int samp_size;
    audio_spec *as;
    dib_t *chunk;

    if(stts->nelts < 1)
        Error("No samples");
    samp_size = stsz->univ;
    samp_size = (stsd->rec.pad[4] >> 16) * (stsd->rec.pad[4] & 0xFFFF) / 8;
    if(samp_size == 0)
        Error("Varying sample size in sound track");
    nco = stco->nelts;
    nsc = stsc->nelts;
    chunk = Malloc(nco * sizeof(dib_t));
    isc = 0;
    spc = desc = -1;
    for(ico = 0; ico < nco; ico++)
    {
        if(isc < nsc && ico == stsc->rec[isc].ch - 1)
        {
            spc = stsc->rec[isc].spc;
            desc = stsc->rec[isc].desc;
            isc++;
        }
        if(spc == -1)
            Error("Samples per chunk undefined");
        offset = stco->offset[ico];
        chunk[ico].start = offset;
        chunk[ico].size = (desc == 1 ? spc * samp_size : 0);
        switch (stsd->rec.code) {
          case ATOM_ima4:
            chunk[ico].size >>=6;
            chunk[ico].size += (chunk[ico].size << 4);
            break;
            /*  / 4 / 0x20 * 0x22  */
          case ATOM_twos:
          case ATOM_raw:
          case ATOM_MAC3:
            break;
          case ATOM_ulaw:
            chunk[ico].size >>=1;
            break;
          default:
            return NULL;
            break;
        }
    }
    as = Malloc(sizeof(audio_spec));
    as->rate    = scale;
    as->channels = (stsd->rec.pad[4] >> 16);
    as->scale   = stts->rec[0].duration;
    as->header = NULL;
    switch (stsd->rec.code) {
      case ATOM_ima4:
        as->sign    = 1;
        as->depth   = 4;
        as->desc    = "2 QTIMA4";
        as->samples2bytes = as->channels == 1 ? s2b1c : s2b2c;
        as->bytes2samples = as->channels == 1 ? b2s1c : b2s2c;
        break;
      case ATOM_twos:
        as->sign    = 1;
        as->depth   = (stsd->rec.pad[4] & 0xFFFF);
        as->desc    = as->depth == 16 ? "2 Lin16be" : "1";
        as->samples2bytes = NULL;
        as->bytes2samples = NULL;
        break;
      case ATOM_raw:
        as->sign    = 0;
        as->depth   = (stsd->rec.pad[4] & 0xFFFF);
        as->desc    = as->depth == 16 ? "2 Lin16be" : "1";
        as->samples2bytes = NULL;
        as->bytes2samples = NULL;
         break;
      case ATOM_ulaw:
        as->sign    = 0;
        as->depth   = 8;
        as->desc    = "2 Mulaw";
        as->samples2bytes = NULL;
        as->bytes2samples = NULL;
       break;
    }
    as->nchunks = nco;
    as->chunk   = chunk;
    return as;
}

static void read_trak(chunk_handle ch, film_spec *film)
{
    chunk_handle hd_ch;
    mdhd_t mdhd;
    int scale;

    ch = AtomFind(ATOM_mdia, ch);
    hd_ch = AtomFind(ATOM_mdhd, ch);
    mdhd = Malloc(AtomSize(hd_ch));
    AtomData(hd_ch, mdhd, AtomSize(hd_ch));
    scale = mdhd->scale;
    Free(mdhd);
    AtomFree(hd_ch);
    hd_ch = AtomFind(ATOM_minf, ch);
    AtomFree(ch);
    switch(media_type(hd_ch))
    {
        case ATOM_vmhd:
            ch = AtomFind(ATOM_stbl, hd_ch);
            if (!film->video && read_stbl(ch)) {
                film->video = video_info(scale);
                free_stbl_cache();
            }
            AtomFree(ch);
            break;
        case ATOM_smhd:
            ch = AtomFind(ATOM_stbl, hd_ch);
            if (!film->audio && read_stbl(ch)) {
                film->audio = audio_info(scale);
                free_stbl_cache();
            }
            AtomFree(ch);
            break;
        case ATOM_gmhd:
            ch = AtomFind(ATOM_stbl, hd_ch);
            if (!is_vr_pan && read_stbl(ch)) {
                check_for_panorama(stsd);
                free_stbl_cache();
            }
            AtomFree(ch);
            break;
    }
    AtomFree(hd_ch);
}

static void read_obj(chunk_handle ch)
{
    ch = AtomFind(ATOM_udta, ch);
    ch = AtomFind(ATOM_NAVG, ch);
    if(ch != NULL)
        is_vr_obj = true;
}

static struct dec_s vr_dec = {"630", "", 0};

static void convert_to_vr_pan(film_spec *film)
{
    video_spec *vs;

    film->type = "QuickTime VR";
    vs = film->video;
    vs->decoder = &vr_dec;
    vs->xsize = 160;
    vs->ysize = 128;
}

static void convert_to_vr_obj(film_spec *film)
{
    video_spec *vs;

    film->type = "QuickTime VR";
    vs = film->video;
    vs->decoder = &vr_dec;
    vs->xsize = vs->xsize / 2;
    vs->ysize = vs->ysize / 2;
}

film_spec *QtStructure(int handle)
{
    film_spec *film;
    chunk_handle ch, tr_ch;

    ch = AtomOpen(handle);
    if(ch == NULL)
        return NULL;
#ifdef BaseRelease
    AtomClose();
    NoSupport("MOV (Quicktime)");
    return NULL;
#endif
    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "QuickTime";
    film->video = NULL;
    film->audio = NULL;
    ch = AtomFind(ATOM_moov, ch);
    /*printf("Found %x\n", AtomType(ch));*/
    is_vr_pan = is_vr_obj = false;
    while(!AtomEOC(ch))
    {
        tr_ch = AtomRead(ch);
        if(AtomType(tr_ch) == ATOM_trak)
            read_trak(tr_ch, film);
        AtomFree(tr_ch);
    }
    AtomRewind(ch);
    read_obj(ch);
    if(is_vr_pan)
        convert_to_vr_pan(film);
    else if(is_vr_obj)
        convert_to_vr_obj(film);
    AtomClose();
    return film;
}
