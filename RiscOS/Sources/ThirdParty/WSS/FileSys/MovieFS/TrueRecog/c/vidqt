/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include <stdio.h>
#include <string.h>
#include "t_dec.h"
#include "t_avspec.h"
#include "atom.h"
#include "vidqt.h"
#include "options.h"

#ifndef CVID_RGB
static struct dec_s cvid_decoder = {"602", "yuv", 0};
#else
static struct dec_s cvid_decoder = {"602", "rgb", 0};
#endif
static struct dec_s rpza_decoder = {"603", "", 0};
static struct dec_s smc_decoder =  {"604", "", 1};
static struct dec_s qtrle24_decoder =  {"615", "", 0};
static struct dec_s qtrle8_decoder =  {"609", "", 1};
static struct dec_s qtrle4_decoder =  {"613", "", 1};
static struct dec_s qtrle16_decoder =  {"614", "", 0};
static struct dec_s raw16_decoder = {"625", "", 0};
static struct dec_s raw8_decoder = {"624", "", 1};
static struct dec_s raw24_decoder = {"626", "", 0};
static struct dec_s raw32_decoder = {"635", "", 0};
static struct dec_s jpeg_decoder = {"633", "yuv", 0};
static struct dec_s default_decoder = {"699", "", 0};

video_spec *VidQt(video_spec *vs, int c, int depth)
{
    char *comp;

    comp = (char *) &c;
    switch(c)
    {
        case ATOM_raw:
            switch(depth & 0x1F)
            {
                case 24:
                    vs->decoder = &raw24_decoder;
                    strcpy(vs->compression, "RAW(24)");
                    break;
                case 16:
                    vs->decoder = &raw16_decoder;
                    strcpy(vs->compression, "RAW(16)");
                    break;
                case 8:
                    vs->decoder = &raw8_decoder;
                    strcpy(vs->compression, "RAW(8)");
                    break;
                default:
                    if (depth == 32) {
                      vs->decoder = &raw32_decoder;
                      strcpy(vs->compression, "RAW(32)");
                    } else {
                      vs->decoder = &default_decoder;
                      sprintf(vs->compression, "%c%c%c%c-%d(Unsupported)",
                              comp[3], comp[2], comp[1], comp[0], depth);
                    }
                    break;
            }
            break;
        case ATOM_cvid:
            vs->xsize = (vs->xsize + 3 & ~3);
            vs->ysize = (vs->ysize + 3 & ~3);
            vs->decoder = &cvid_decoder;
            strcpy(vs->compression, "CVID(24)");
            break;
        case ATOM_rpza:
            vs->xsize = (vs->xsize + 3 & ~3);
            vs->ysize = (vs->ysize + 3 & ~3);
            vs->decoder = &rpza_decoder;
            strcpy(vs->compression, "RPZA(16)");
            break;
        case ATOM_smc:
            vs->xsize = (vs->xsize + 3 & ~3);
            vs->ysize = (vs->ysize + 3 & ~3);
            vs->decoder = &smc_decoder;
            strcpy(vs->compression, "SMC(8)");
            break;
        case ATOM_rle:
            switch(depth & 0x1F)
            {
#ifdef QTRLE24
                case 24:
                    vs->xsize = (vs->xsize + 3 & ~3);
            	    vs->ysize = vs->ysize;
                    vs->decoder = &qtrle24_decoder;
                    strcpy(vs->compression, "RLE(24)");
                    break;
#endif
#ifdef QTRLE16
                case 16:
                    vs->xsize = (vs->xsize + 3 & ~3);
                    vs->ysize = vs->ysize;
                    vs->decoder = &qtrle16_decoder;
                    strcpy(vs->compression, "RLE(16)");
                    break;
#endif
#ifdef QTRLE8
                case 8:
                    /*vs->xsize = (vs->xsize + 3 & ~3);*/
            	    vs->ysize = vs->ysize;
                    vs->decoder = &qtrle8_decoder;
                    strcpy(vs->compression, "RLE(8)");
                    break;
#endif
#ifdef QTRLE4
                case 4:
                    vs->xsize = (vs->xsize + 7 & ~7);
            	    vs->ysize = vs->ysize;
                    vs->decoder = &qtrle4_decoder;
                    strcpy(vs->compression, "RLE(4)");
                    break;
#endif
                default:
                    vs->decoder = &default_decoder;
                    sprintf(vs->compression, "%c%c%c%c-%d(Unsupported)",
                            comp[3], comp[2], comp[1], comp[0], depth);
                    break;
            }
            break;
#ifdef JPEG
	case ATOM_jpeg:
            if ((depth & 0x1F) == 24) {
                vs->decoder = &jpeg_decoder;
                strcpy(vs->compression, "JPEG(24)");
            } else {
                vs->decoder = &default_decoder;
                sprintf(vs->compression, "%c%c%c%c-%d(Unsupported)",
                        comp[3], comp[2], comp[1], comp[0], depth);
            }
	    break;
#endif
        default:
            vs->decoder = &default_decoder;
                    sprintf(vs->compression, "%c%c%c%c-%d(Unsupported)",
                            comp[3], comp[2], comp[1], comp[0], depth);
            break;
    }
    return vs;
}
