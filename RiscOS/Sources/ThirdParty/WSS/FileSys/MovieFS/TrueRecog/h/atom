/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#ifndef _ATOM_
#define _ATOM_

#include "t_dib.h"
#include "t_chunk.h"

#define ATOMCODE(a, b, c, d) (a | (b<<8) | (c<<16) | (d<<24))
#define ATOM_qt   ATOMCODE('q', 't', ' ', ' ')
#define ATOM_mdat ATOMCODE('m', 'd', 'a', 't')
#define ATOM_moov ATOMCODE('m', 'o', 'o', 'v')
#define ATOM_mvhd ATOMCODE('m', 'v', 'h', 'd')
#define ATOM_udta ATOMCODE('u', 'd', 't', 'a')
#define ATOM_NAVG ATOMCODE('N', 'A', 'V', 'G')
#define ATOM_trak ATOMCODE('t', 'r', 'a', 'k')
#define ATOM_tkhd ATOMCODE('t', 'k', 'h', 'd')
#define ATOM_mdia ATOMCODE('m', 'd', 'i', 'a')
#define ATOM_mdhd ATOMCODE('m', 'd', 'h', 'd')
#define ATOM_minf ATOMCODE('m', 'i', 'n', 'f')
#define ATOM_vmhd ATOMCODE('v', 'm', 'h', 'd')
#define ATOM_smhd ATOMCODE('s', 'm', 'h', 'd')
#define ATOM_gmhd ATOMCODE('g', 'm', 'h', 'd')
#define ATOM_mdhd ATOMCODE('m', 'd', 'h', 'd')
#define ATOM_stbl ATOMCODE('s', 't', 'b', 'l')
#define ATOM_stts ATOMCODE('s', 't', 't', 's')
#define ATOM_stsd ATOMCODE('s', 't', 's', 'd')
#define ATOM_stsz ATOMCODE('s', 't', 's', 'z')
#define ATOM_stsc ATOMCODE('s', 't', 's', 'c')
#define ATOM_stco ATOMCODE('s', 't', 'c', 'o')
#define ATOM_cvid ATOMCODE('d', 'i', 'v', 'c')
#define ATOM_raw  ATOMCODE(' ', 'w', 'a', 'r')
#define ATOM_rle  ATOMCODE(' ', 'e', 'l', 'r')
#define ATOM_rpza ATOMCODE('a', 'z', 'p', 'r')
#define ATOM_smc  ATOMCODE(' ', 'c', 'm', 's')
#define ATOM_twos ATOMCODE('s', 'o', 'w', 't')
#define ATOM_ulaw ATOMCODE('w', 'a', 'l', 'u')
#define ATOM_MAC3 ATOMCODE('3', 'C', 'A', 'M')
#define ATOM_ima4 ATOMCODE('4', 'a', 'm', 'i')
#define ATOM_pano ATOMCODE('o', 'n', 'a', 'p')
#define ATOM_jpeg ATOMCODE('g', 'e', 'p', 'j')


chunk_handle AtomOpen(int);

void AtomClose(void);

chunk_handle AtomDup(chunk_handle);

int AtomEOC(chunk_handle);

chunk_handle AtomRead(chunk_handle);

void AtomRewind(chunk_handle);

int AtomType(chunk_handle);

int AtomSize(chunk_handle);

dib_t AtomPlace(chunk_handle);

void AtomData(chunk_handle, void *, int);

void AtomFree(chunk_handle);

chunk_handle AtomFind(int, chunk_handle);

#endif /* _ATOM_ */

