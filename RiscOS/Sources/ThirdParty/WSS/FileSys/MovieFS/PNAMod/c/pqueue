/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 8/2/97: Initial version
*/

#include "error.h"
#include "memory.h"
#include "pqueue.h"

struct pqueue_s
{
    int max, in, out, count;
    void **buf;
};


pqueue_t PQueue(int max)
{
    pqueue_t res;
    
    res = Malloc(sizeof(*res));
    res->buf = Malloc(max * sizeof(void *));
    res->max = max;
    res->in = res->out = res->count = 0;
    return res;
}

void PQueueFree(pqueue_t pq)
{
    Free(pq->buf);
    Free(pq);
}

void PQueuePush(pqueue_t pq, void *p)
{
    if(pq->count >= pq->max)
        Error("Overflowed superblk queue");
    pq->buf[pq->in] = p;
    pq->in++;
    if(pq->in >= pq->max) pq->in -= pq->max;
    pq->count++;
}

void *PQueuePop(pqueue_t pq)
{
    void *p;
    
    if(pq->count <= 0)
        return NULL;
    p = pq->buf[pq->out];
    pq->out++;
    if(pq->out >= pq->max) pq->out -= pq->max;
    pq->count--;
    return p;
}

void *PQueueLook(pqueue_t pq, int i)
{
    if(i >= pq->count)
        Error("Looking for non-existant superblk");
    i += pq->out;
    if(i >= pq->max) i -= pq->max;
    return pq->buf[i];
}
