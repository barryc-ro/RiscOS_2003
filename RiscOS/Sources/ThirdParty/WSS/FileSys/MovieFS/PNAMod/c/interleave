/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW   16/1/97: Initial version
*/

#include "interleave.h"

static void bitcopy (unsigned char *toPtr, unsigned char *fromPtr,
              int bitOffsetTo, int bitOffsetFrom, int numBits)
{
    int bofMod8, botMod8, nbMod8, eightMinusBotMod8, eightMinusBofMod8, i, iMax;
    unsigned char rightInword, leftInword, *byteOffsetFrom, *byteOffsetTo,
                  alignWord, endWord;
    unsigned char lmask[9] = {0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff};
    unsigned char rmask[9] = {0, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};

    int nibbleAlignFrom, nibbleAlignTo, alignCase=30; // special case variables
    unsigned char mask[2] = {0x0f, 0xf0};

    bofMod8 = bitOffsetFrom & 0x07;  // same as %8
    botMod8 = bitOffsetTo & 0x07;
    nbMod8 = numBits & 0x07;
    eightMinusBofMod8 = 8 - bofMod8; // don't want these evaluated every loop
    eightMinusBotMod8 = 8 - botMod8;
    byteOffsetFrom = fromPtr + (bitOffsetFrom >> 3);
    byteOffsetTo = toPtr + (bitOffsetTo >> 3);
    iMax = (numBits>>3) - 1; // last output byte not handled inside a loop

    if (numBits>>3 == 0)
    // quick and easy if we have fewer than 8 bits to align

    {
       	leftInword = *(byteOffsetFrom++);
        rightInword = *(byteOffsetFrom);
        alignWord = (leftInword >> bofMod8) + (rightInword << (eightMinusBofMod8));
        alignWord &= rmask[nbMod8];

    	if (nbMod8 >= eightMinusBotMod8)  // have more extra input bits than
                                          // free space in current output byte
            {
            *(byteOffsetTo) &= rmask[botMod8];
            *(byteOffsetTo++) += (alignWord << botMod8);
            *(byteOffsetTo) = ((*byteOffsetTo) & lmask[8-(nbMod8-eightMinusBotMod8)])
                + (alignWord >> eightMinusBotMod8);
            }

       	else    // have fewer input bits than free space in current output byte
                // be careful not to overwrite extra bits already in output byte
            {
            endWord = *(byteOffsetTo) & lmask[8-(nbMod8+botMod8)];
            *(byteOffsetTo) &= rmask[botMod8];
            *(byteOffsetTo) += ((alignWord << botMod8) + endWord);
            }
        return; // finished, return to calling function
  	}

    if (bitOffsetFrom%4 == 0 && bitOffsetTo%4 == 0)
     	// byte-packing done here is optimized for the common case of nibble-alignment

    {
        nibbleAlignFrom = (bitOffsetFrom & 0x04)>>2;  // 0 implies whole-byte alignment
        nibbleAlignTo = (bitOffsetTo & 0x04)>>2;      // 1 implies half-byte alignment


        if (nibbleAlignFrom == nibbleAlignTo) {// either src and dest both byte-aligned
                                              // or both half byte-aligned
            if (nibbleAlignFrom == 0) {
                alignCase = 0;
            } else {
                alignCase = 3;
            }
        }


        if (nibbleAlignFrom != nibbleAlignTo) {
            if (nibbleAlignFrom == 0) {
                alignCase = 1;          // src aligned, dest half aligned
            } else {
                alignCase = 2;          // src half aligned, dest aligned
            }
        }

        switch (alignCase)
        {
        case 0:
            for (i=0; i<iMax; i++)
                *byteOffsetTo++ = *byteOffsetFrom++; // copy byte-by-byte directly
                break;

        case 1:
            for (i=0; i<iMax; i++)  // move two nibbles from src to dest each loop
            {                       // shift bits as necessary
                *byteOffsetTo = (*byteOffsetTo & mask[0]) +
                    ((*byteOffsetFrom & mask[0])<<4);
                *++byteOffsetTo = ((*byteOffsetFrom++ & mask[1])>>4);
            }
                break;

        case 2:
            for (i=0; i<iMax; i++)  // same as case 1, but shift other direction
            {
                *byteOffsetTo = ((*byteOffsetFrom & mask[1])>>4);
                *byteOffsetTo++ += ((*++byteOffsetFrom & mask[0])<<4);
            }
                break;

        case 3:
            {
            *byteOffsetTo &= mask[0];  // align first nibble, thereafter this is
            *byteOffsetTo += (*byteOffsetFrom & mask[1]);  // just like case 0
            for (i=0; i<iMax; i++)
                *++byteOffsetTo = *++byteOffsetFrom; // copy byte-by-byte directly
            }
                break;
        }
    }

    else
    	// this code can handle all source and destination buffer offsets

    {
    	// take the first 8 desired bits from the input buffer, store them
    	// in alignWord, then break up alignWord into two pieces to
    	// fit in the free space in two consecutive output buffer bytes

        for (i=0; i<iMax; i++)
        {
            leftInword = *(byteOffsetFrom++);
            rightInword = *(byteOffsetFrom);
            alignWord = (leftInword >> bofMod8) + (rightInword << (eightMinusBofMod8));
            *(byteOffsetTo) = (*(byteOffsetTo) & rmask[botMod8]) +
                (alignWord << (botMod8));
            *(++byteOffsetTo) = alignWord >> (eightMinusBotMod8);
        }
    }
        // special section to set last byte in fromBuf correctly

        // even if byte packing was done with the code optimized for nibble-alignment,
       	// the tricky job of setting the last output byte is still done here

            leftInword = *(byteOffsetFrom++);
            rightInword = *(byteOffsetFrom);
            alignWord = (leftInword >> bofMod8) + (rightInword << (eightMinusBofMod8));
            *(byteOffsetTo) = (*(byteOffsetTo) & rmask[botMod8]) +
                (alignWord << (botMod8));

            if (nbMod8 >= eightMinusBotMod8)
            {
            *(++byteOffsetTo) = alignWord >> (eightMinusBotMod8);

            leftInword = *(byteOffsetFrom++);
            rightInword = *(byteOffsetFrom);
            alignWord = (leftInword >> bofMod8) + (rightInword << (eightMinusBofMod8));
            alignWord &= rmask[nbMod8];
            *(byteOffsetTo++) += (alignWord << botMod8);
            *(byteOffsetTo) = ((*byteOffsetTo) & lmask[8-(nbMod8-eightMinusBotMod8)])
                + (alignWord >> eightMinusBotMod8);
            }

            else
            {
            endWord = *(++byteOffsetTo) & lmask[8-(nbMod8+botMod8)];
            *(byteOffsetTo) = alignWord >> (eightMinusBotMod8);
            leftInword = *(byteOffsetFrom++);
            rightInword = *(byteOffsetFrom);
            alignWord = (leftInword >> bofMod8) + (rightInword << (eightMinusBofMod8));
            alignWord &= rmask[nbMod8];
            *(byteOffsetTo) += ((alignWord << botMod8) + endWord);
            }


}

void Deinterleave(ra_header_t *hdr, char *inbuf, data_t out[]) {

  int i, j, k, s;
  int size;

  /* Ignores the possibility of size not being a multiple of supersize */
  /* At worst we'll get noise at the end of a sample. Worry about this later   */
  size = hdr->replaychunksize;
  s = 0;
  while (size>0) {
    j = 0;
    k = 0;
    for (i = 0; i<hdr->nobps; i++) {
      out[j+s].buf = inbuf;
      inbuf += hdr->scramsize;
      j += hdr->interleavefactor;
      if (j >= hdr->nobps)
        j = ++k;
    }
    s += hdr->nobps;
    size -= hdr->supersize;
  }
}

void DeinterleaveIndexed(ra_header_t *hdr, char *idx[], data_t out[]) {
  int size;
  int i, j, k, tb, tb_offset, distance, s;
  char *data;

  size = hdr->replaychunksize;
  s = 0;
  /* tb = transmission block number we are looking at */
  tb = 0;
  /* tb_offset = offset into transmission block of the current scramble block  */
  tb_offset = 0;
  while (size>0) {
    j = 0;
    k = 0;
    /* Look once for each scramble block... */
    for (i = 0; i<hdr->nobps; i++) {
      /* If we are about to start a new transmission block then find the */
      /* closest one we haven't lost */
      if (tb_offset == 0) {
        data = idx[tb++];
        if (data == NULL) {
          /* Missing block! Find the closest replacement */
          distance = 1;
          while (data == NULL && distance < hdr->trans_per_chunk) {
            if (tb + distance < hdr->trans_per_chunk)
              data = idx[tb+distance];
            if (tb - distance >= 0 && data == NULL)
              data = idx[tb-distance];
            distance++;
          }
          if (data == NULL) {
            /* HELP! WTF do we do now? */
          }
        }
      }
      out[j+s].buf = data+tb_offset;
      j += hdr->interleavefactor;
      if (j >= hdr->nobps)
        j = ++k;
      /* Increment our offset allowing for wrapping */
      tb_offset = (tb_offset + hdr->scramsize) % hdr->transsize;
    }
    s += hdr->nobps;
    size -= hdr->supersize;
  }
}

/* Loss pattern for a six-block solution
....X.X....X..........X........X....X..X....X........X....X....X....X....X.......X....X...X.....
.X.....X..........X....X...X..X...X...........X...X...X..X...........X.X...X............X.....X.
..X.......X..X......X...X............X...X.....X........X..X.....X....X...X..........X.X....X...
X........X.....X.X........X..X..........X....X......X.......X.X.............X..X.........X...X.X
............X.X.X....X......X...X..X.......X....X............X..X.X.....X.....X.X..X............
...X.X..X..........X.....X.......X....X...X......X.X...X...........X.........X....X.X......X....
*/
static int RASL_InterleaveTable[RASL_NFRAMES * RASL_NBLOCKS] = {
	63, 22, 44, 90, 4, 81, 6, 31, 86, 58, 36, 11, 68, 39, 73, 53,
	69, 57, 18, 88, 34, 71, 1, 23, 46, 94, 54, 27, 75, 50, 30, 7,
	70, 92, 20, 74, 10, 37, 85, 13, 56, 41, 87, 65, 2, 59, 24, 47,
	79, 93, 29, 89, 52, 15, 26, 95, 40, 17, 9, 45, 60, 76, 62, 0,
	64, 43, 66, 83, 12, 16, 32, 21, 72, 14, 35, 28, 61, 80, 78, 48,
	77, 5, 82, 67, 84, 38, 8, 42, 19, 51, 3, 91, 33, 49, 25, 55
};

void Deinterleave6(ra_header_t *hdr, char *inbuf, data_t out[]) {

  int nCodeBits, i, o;
  unsigned char *outbuf = out[0].buf;
  int *bitmap_ptr = (int *)out[0].buf;

  for (i = 0; i<6; i++)
    bitmap_ptr[i] = 0;
  outbuf += 6*sizeof(int);
  /* Blocksize = hdr->interleaveblocksize */
  nCodeBits = hdr->interleaveblocksize*8/RASL_NFRAMES;
  //printf("Di6: %d\n", nCodeBits);
  for (i = 0; i < RASL_NFRAMES * RASL_NBLOCKS; i++) {
    o = RASL_InterleaveTable[i];
    bitcopy(outbuf + ((nCodeBits*o)>>3), (unsigned char *)inbuf + ((nCodeBits*i)>>3),(nCodeBits*o)&7, (nCodeBits*i)&7,nCodeBits);
  }
}

void Deinterleave6Indexed(ra_header_t *hdr, char *idx[], data_t out[]) {

  int nCodeBits, i, o;
  unsigned char *outbuf = out[0].buf;
  int *bitmap_ptr = (int *)out[0].buf;

  for (i = 0; i<6; i++)
    bitmap_ptr[i] = 0;
  outbuf += 6*sizeof(int);
  /* Blocksize = hdr->interleaveblocksize */
  nCodeBits = hdr->interleaveblocksize*8/RASL_NFRAMES;
  //printf("Di6I: %d\n", nCodeBits);
  for (i = 0; i < RASL_NFRAMES * RASL_NBLOCKS; i++) {
    o = RASL_InterleaveTable[i];
    if (idx[i>>4] == NULL) {
      /* Missing block */
      //printf("Missing!\n");
      bitmap_ptr[o>>4] |= 1<<(o & 15);
    } else {
      bitcopy(outbuf+((nCodeBits*o)>>3), (unsigned char *)idx[i>>4] + ((nCodeBits*(i&15))>>3), (nCodeBits*o)&7, (nCodeBits*(i&15))&7, nCodeBits);
    }
  }
}
