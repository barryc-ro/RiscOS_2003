/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 29/1/97: Initial version
*/

#include "nocasecmp.h"
#include "error.h"
#include "safeputc.h"
#include "options.h"
#include "pna.h"
#include "chunk.h"
#include "pnach.h"

struct netpnach_handle_s
{
    pna_handle_t pna;
    chunk_buf_t chb;
};

typedef struct netpnach_handle_s *netpnach_handle_t;

void netPnaChInit(void) {

  PnaInit();
}

void netPnaChFin(void) {

  PnaFin();
}

static pnach_generic_handle_t netPnaChOpen(char *url)
{
    netpnach_handle_t pnach;

    if (nocasecmp(url, "pnm:/", 5) != 0)
        return NULL;
    pnach = Malloc(sizeof(*pnach));
    ExceptTry
    {
        pnach->pna = PnaOpen(url);
        pnach->chb = NULL;
    }
    ExceptCatch
    {
        Free(pnach);
        ExceptRethrow();
    }
    return (pnach_generic_handle_t) pnach;
}

static void netPnaChClose(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    if(pnach->pna) PnaClose(pnach->pna);
    if(pnach->chb) ChunkFree(pnach->chb);
    Free(pnach);
}

static conn_state_t netPnaChState(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;
    conn_state_t state;

    pnach = (netpnach_handle_t) p;
    state = PnaState(pnach->pna);
    if(state == CONN_STATE_READY && pnach->chb == NULL)
        pnach->chb = Chunk(pnach->pna);
    return state;
}

static void netPnaChService(pnach_generic_handle_t p)
{
    PnaService(((netpnach_handle_t)p)->pna);
}

static chunk_desc_t *netPnaChFetch(pnach_generic_handle_t p, int n)
{
    netpnach_handle_t pnach;
    chunk_desc_t *res;

    pnach = (netpnach_handle_t) p;
    if(pnach->chb == NULL)
        Error("Attempt to fetch data without connection");
    if(PnaState(pnach->pna) == CONN_STATE_FAILED)
        return &EndDesc;
    #if DEBUG
    safeputstr("[");
    #endif
    res = ChunkFetch(pnach->chb, n);
    #if DEBUG
    safeputstr("]");
    #endif
    return res;
}

static ra_header_t *netPnaChInfo(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    return PnaInfo(pnach->pna);
}

static char *netPnaChError(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    return PnaError(pnach->pna);
}

static char *netPnaChAddress(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    return PnaAddress(pnach->pna);
}

static char *netPnaChResource(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    return PnaResource(pnach->pna);
}

static data_t netPnaChHeader(pnach_generic_handle_t p)
{
    netpnach_handle_t pnach;

    pnach = (netpnach_handle_t) p;
    return PnaHeader(pnach->pna);
}

pnach NetPnaCh = {
  netPnaChInit,
  netPnaChFin,
  netPnaChOpen,
  netPnaChClose,
  netPnaChState,
  netPnaChService,
  netPnaChFetch,
  netPnaChInfo,
  netPnaChError,
  netPnaChAddress,
  netPnaChResource,
  netPnaChHeader,
};
