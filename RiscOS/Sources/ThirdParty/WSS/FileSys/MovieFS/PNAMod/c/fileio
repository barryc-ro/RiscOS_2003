/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "error.h"
#include "fileio.h"

static _kernel_swi_regs regs;

void FsDelete(char *name)
{
    regs.r[0] = 27;
    regs.r[1] = (int) name;
    regs.r[3] = 0;
    _kernel_swi(OS_FSControl, &regs, &regs);
}

void FsSetType(char *name, int ft)
{
    regs.r[0] = 18;
    regs.r[1] = (int) name;
    regs.r[2] = ft;
    _kernel_swi(OS_File, &regs, &regs);   /* May not exist ??? */
}

int FsSize(char *name)
{
    regs.r[0] = 17;
    regs.r[1] = (int) name;
    _kernel_swi(OS_File, &regs, &regs);
    if((regs.r[0] & 1) == 1)
        return regs.r[4];
    else
        return -1;
}

int FsLoadAddr(char *name)
{
    regs.r[0] = 17;
    regs.r[1] = (int) name;
    _kernel_swi(OS_File, &regs, &regs);
    return regs.r[2];
}

int FsExecAddr(char *name)
{
    regs.r[0] = 17;
    regs.r[1] = (int) name;
    _kernel_swi(OS_File, &regs, &regs);
    return regs.r[3];
}

fs_handle FsOpen(char *name)
{
    regs.r[0] = 17;
    regs.r[1] = (int) name;
    _kernel_swi(OS_File, &regs, &regs);
    switch(regs.r[0])
    {
        case 0:
            return 0;
        case 2:
            Error("%s is a directory", name);
            return 0;
    }
    regs.r[0] = 0x43;
    regs.r[1] = (int) name;
    regs.r[2] = 0;
    _kernel_swi(OS_Find, &regs, &regs);
    return regs.r[0];
}

void FsClose(fs_handle fh)
{
    regs.r[0] = 0;
    regs.r[1] = fh;
    _kernel_swi(OS_Find, &regs, &regs);
}

void FsRead(fs_handle fh, void *buf, int size)
{
    regs.r[0] = 4;
    regs.r[1] = fh;
    regs.r[2] = (int) buf;
    regs.r[3] = size;
    if(_kernel_swi(OS_GBPB, &regs, &regs))
        memset(buf, 0, size);
}

void FsReadAt(fs_handle fh, fs_pointer fp, void *buf, int size)
{
    _kernel_oserror *err;

    regs.r[0] = 3;
    regs.r[1] = fh;
    regs.r[2] = (int) buf;
    regs.r[3] = size;
    regs.r[4] = fp;
    err = _kernel_swi(OS_GBPB, &regs, &regs);
    if(err)
    {
        int i;
        Error("Error from RISCOS: ""%s""", (char *) err + 4);
        for(i = 0; i < 10 && err; ++i)
        {
            regs.r[0] = 3;
            regs.r[1] = fh;
            regs.r[2] = (int) buf;
            regs.r[3] = size;
            regs.r[4] = fp;
            err = _kernel_swi(OS_GBPB, &regs, &regs);
        }
        if(err)
            ErrorFatal("Multiply occuring error: ""%s""", (char *) err + 4);
    }
}

char *FsName(fs_handle handle)
{
    _kernel_swi_regs regs;
    static char buf[256];

    regs.r[0] = 7;
    regs.r[1] = handle;
    regs.r[2] = 0;
    regs.r[5] = 0;
    _kernel_swi(OS_Args, &regs, &regs);
    regs.r[5] = 1 - regs.r[5];
    if(regs.r[5] > 256)
            return NULL;
    regs.r[2] = (int) buf;
    regs.r[0] = 7;
    regs.r[1] = handle;
    _kernel_swi(OS_Args, &regs, &regs);
    return buf;
}
