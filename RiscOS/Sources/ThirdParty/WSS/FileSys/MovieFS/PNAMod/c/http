/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW    8/5/98:  Initial version (ripped from pna.c)
*/

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include "options.h"
#include "memory.h"
#include "error.h"
#include "safeputc.h"
#include "forcecallb.h"
#include "time.h"
#include "queue.h"
#include "tcp.h"
#include "url.h"
#include "rmheader.h"
#include "pnaoptions.h"
#include "challenge.h"
#include "bool.h"
#include "sysvar.h"
#include "ra.h"

#include "http.h"

#define IRRELEVANT	(0)

#define HTTP_HEADER_MAXSIZE (2048)

struct http_handle_s
{
    http_receiver_t  receiver;
    conn_state_t     state;
    char            *err;
    url_t            url;
    tcp_conn_t       conn;
    queue_t          queue;
    int		     sequence;
    int              stream;
    int		     http_header_size;
    int		     http_header_len;
    char            *http_header;
    packet_reader_t  packet_reader;
    rmheader_t       rm_header;
    ra_header_t     *info;
    int              interleave, length;
};

#define htonl(s) ((((s) & 0xFF) << 24) \
                      | (((s) & 0xFF00) << 8) \
                      | (((s) & 0xFF0000) >> 8) \
                      | (((s) & 0xFF000000) >> 24))

#define htons(s) ((((s) & 0xFF) << 8) \
                      | (((s) & 0xFF00) >> 8))

#define SEND_4(s,p)   {int   i; i=htonl(s); send((char *)&i, 4, p);}
#define SEND_2(s,p)   {int   i; i=htons(s); send((char *)&i, 2, p);}
#define SEND_1(s,p)   {char  i; i=s;        send((char *)&i, 1, p);}
#define SEND_N(s,l,p) {                     send((char *) s, (l), p);}

#define CODE(a,b,c,d) ((d)|((c)<<8)|((b)<<16)|((a)<<24))

#if HDR2DISC || AUDIODATA2DISC || VIDEODATA2DISC
static void to_disc(char *fname, data_t data)
{
    static int file_count = 0;
    char name[20];
    FILE *f;

    sprintf(name, "%s%d", fname, file_count++);
    f = fopen(name, "w");
    if(f)
    {
        fwrite(data.buf, 1, data.size, f);
        fclose(f);
    }
}
#endif

#if GRAB
static FILE *fdesc = NULL;

static void open_rm(void)
{
    static int file_count = 0;
    char name[20];

    sprintf(name, "Samp%d.rm", fname, file_count++);
    fdesc = fopen(name, "w");
}

static void close_rm(void)
{
    if(fdesc)
        fclose(fdesc);
    fdesc = NULL;
}

static void store_rm(data_t data)
{
    if(fdesc)
        fwrite(data.buf, 1, data.size, fdesc);
}
#endif

static int lineup = 1;

#if 0
static void adjust_interleave(http_handle_t http)
{
    if(http->info->file_version == 3)
    {
            http->info->interleavefactor = 1;
    }
}
#endif

#if 0
static int lower(int c) {
  if (c >= 'A' && c <= 'Z')
    return c+'a'-'A';
  else
    return c;
}
#endif

#if 0
static int def_samples(void *obj, data_t data, int seq)
{
    Error("Unexpected arrival of samples");
    return IRRELEVANT;
}
#endif

static void def_eof(void *obj)
{
    Error("Unexpected end message");
}

static http_receiver_t def_receiver = {NULL, NULL, def_eof};

static void log_error(http_handle_t http)
{
    char *err;

    http->state = CONN_STATE_FAILED;
    err = ExceptCaught()->errmess;
#if DEBUG || SHOWPROT
    printf("log_error: %s\n", err);
#endif
    http->err = Malloc0(strlen(err)+1);
    if(http->err)
        strcpy(http->err, err);
}

static void send(char *buf, int size, tcp_conn_t conn)
{
    int n;

    while(size)
    {
        if (TcpConnState(conn) != TCP_CONN_ESTABLISHED) {
          Error("Connection lost (while writing)");
        }
        n = TcpWrite(buf, size, conn);
        if(n == 0)
            Error("Connection not accepting data");
        size -= n;
        buf += n;
    }
}

#if 0
static int first_char(http_handle_t http)
{
    return QueueAtLeast(1, http->queue, http->conn)
                  ? QueueReadPos(http->queue)[0]
                  : -1;
}
#endif

#if 0
static int process_E(http_handle_t http)
{
#if SHOWPROT
    printf("EOF received over TCP\n");
#endif
    QueueDrop(1, http->queue);
    http->state = CONN_STATE_FINISHED;
    TcpClose(http->conn);
    http->receiver.eof(http->receiver.obj);
    return 1;
}
#endif

static int step_resolving(http_handle_t http)
{
    tcp_addr_t ip_addr;

    ip_addr = TcpResolve(http->url->address);
    if(ip_addr == TCP_ADDR_RESOLVING)
      return 0;
    if(ip_addr == TCP_ADDR_UNKNOWN)
    {
#if SHOWPROT
      printf("Nope\n");
#endif
      Error("Unknown host: %s", http->url->address);
      return IRRELEVANT;
    }
#if SHOWPROT
    printf("Resolved server address\n");
#endif
    http->conn = TcpCall(TCP_PORT_ANY, http->url->port, ip_addr);
    http->state = CONN_STATE_CONNECTING;
    TcpFreeAddr(ip_addr);
    return 1;
}

static int step_connecting(http_handle_t http)
{
    if(TcpConnState(http->conn) > TCP_CONN_ESTABLISHED)
        Error("Connection refused");
    if(TcpConnState(http->conn) == TCP_CONN_ESTABLISHED)
    {
#if SHOWPROT
      printf("Connected!\n");
#endif
      http->http_header_len = 0;
      http->http_header = Malloc(HTTP_HEADER_MAXSIZE);
      send("GET /", strlen("GET /"), http->conn);
      send(http->url->resource, strlen(http->url->resource), http->conn);
      send(" HTTP/1.0\r\nConnection: Keep-Alive\r\nUser-Agent: RealPlayer 5.0\r\nHost: ", strlen(" HTTP/1.0\r\nConnection: Keep-Alive\r\nUser-Agent: RealPlayer 5.0\r\nHost: "), http->conn);
      send(http->url->address, strlen(http->url->address), http->conn);
      send("\nAccept: */*\r\n\r\n",strlen("\nAccept: */*\r\n\r\n"), http->conn);
      http->state = CONN_STATE_PROXY;
      return 1;
    }
#if SHOWPROT
    printf("Still waiting for connection...\n");
#endif
    return 0;
}

static int step_proxy(http_handle_t http)
{
    if(TcpConnState(http->conn) > TCP_CONN_ESTABLISHED)
        Error("Connection refused");
    if(TcpConnState(http->conn) == TCP_CONN_ESTABLISHED)
    {
        http->state = CONN_STATE_GREETING;
        return 1;
    }
        return 0;
}

static int step_greeting(http_handle_t http)
{
    if(TcpConnState(http->conn) != TCP_CONN_ESTABLISHED)
        Error("Connection lost (while receiving http header)");
    /* We are receiving the HTTP header */
    /* Suck up chars one at a time until we get the end of header marker */
    while (QueueAtLeast(1, http->queue, http->conn)) {
      /* Do we have room to read another character? */
      if (http->http_header_len >= HTTP_HEADER_MAXSIZE)
	Error("Http Header too large!");
      http->http_header[http->http_header_len++] = *QueueReadPos(http->queue);
#if SHOWPROT
      printf("%c", http->http_header[http->http_header_len-1]);
#endif
      QueueDrop(1, http->queue);
      if ((http->http_header_len >= 2) &&
          (strncmp("\n\n", http->http_header+http->http_header_len-2, 2) == 0)) {
        http->state = CONN_STATE_REQUESTING;
        return 1;
      }
      if ((http->http_header_len >= 4) &&
          (strncmp("\r\n\r\n", http->http_header+http->http_header_len-4, 4)==0)) {
        http->state = CONN_STATE_REQUESTING;
        return 1;
      }
    }
    return 0;
}

static int step_requesting(http_handle_t http)
{
  data_t d;

  if ((TcpConnState(http->conn) != TCP_CONN_ESTABLISHED) &&
      (TcpConnState(http->conn) != TCP_CONN_WRITE_ONLY))
      Error("Connection lost (while receiving RA header)");
  /* We are receiving the RealAudio header */
  /* If we haven't got 2K (and the connection is still up) then bale */
  if ((!QueueAtLeast(2048, http->queue, http->conn)) &&
       (TcpConnState(http->conn) == TCP_CONN_ESTABLISHED))
    return 0;
  /* So, either the connection has died - in which case we must have a header */
  /* already, or we have 2K */
  d.size = 2048;
  d.buf = QueueReadPos(http->queue);

  http->rm_header = RMHeader();
  http->packet_reader = RMHeaderExtract(http->rm_header, d);
  http->info = (ra_header_t *)Malloc(sizeof(ra_header_t));
  RAHeaderExtract(http->info, RMHeaderAudio(http->rm_header));

  if (http->packet_reader == NULL)
    QueueDrop(http->info->dataoffset, http->queue);
  if (strncmp("14_4", http->info->compressioncode, 4) == 0)
    http->info->interleavefactor = 1;
  http->state = CONN_STATE_READY;
  return 1;
}

static int process_continuous_input(http_handle_t http)
{
    data_t data;
    int n, n_inc;

    if(TcpConnState(http->conn) != TCP_CONN_ESTABLISHED) {
        /* Send any dregs we may have */
	/* First send all the transsize lumps */
	while (QueueAtLeast(http->info->transsize, http->queue, http->conn)) {
            data.size = http->info->transsize;
            data.buf = QueueReadPos(http->queue);
            if (http->receiver.samples(http->receiver.obj, data, http->sequence))
            {
                http->sequence++;
                QueueDrop(data.size, http->queue);
            } else {
                return 0;
            }
	}
	/* So we know there is less than transsize left */
	/* Lets find out exactly how much is left */
	n = 0;
	n_inc = http->info->transsize/2;
	while (n_inc > 0) {
	  if (QueueAtLeast(n+n_inc, http->queue, http->conn))
	    n += n_inc;
	  n_inc = n_inc>>1;
	}
        if (n > 0) {
            data.size = n;
            data.buf = QueueReadPos(http->queue);
            if (http->receiver.samples(http->receiver.obj, data, http->sequence))
            {
                http->sequence++;
                QueueDrop(data.size, http->queue);
            } else {
                return 0;
            }
        }
        http->state = CONN_STATE_FINISHED;
        TcpClose(http->conn);
        http->receiver.eof(http->receiver.obj);
        return 1;
    }

    /* Lets see if we have a whole chunk's worth */
    if ((QueueAtLeast(http->info->transsize, http->queue, http->conn)) &&
        (http->receiver.samples != NULL))
    {
        data.size = http->info->transsize;
        data.buf = QueueReadPos(http->queue);
	//printf("samples: %d\n", data.size);
        if (http->receiver.samples(http->receiver.obj, data, http->sequence))
        {
            http->sequence++;
            QueueDrop(data.size, http->queue);
            return 1;
        } //else
          //printf("Denied!\n");
    }
    return 0;
}

/* We make the blatent assumption that packets will be of transsize... */
static int process_packetised_input(http_handle_t http)
{
    data_t data;
    int size;

    size = PacketReaderAudioHttp(http->packet_reader, http->conn, http->queue, http->info->transsize);

    /* If the reader thinks its run out of data, who are we to argue? */
    if (size < 0) {
      http->state = CONN_STATE_FINISHED;
      TcpClose(http->conn);
      http->receiver.eof(http->receiver.obj);
      return 1;
    }
    if(TcpConnState(http->conn) != TCP_CONN_ESTABLISHED) {
	/* First send all the transsize lumps */
	if (size >= http->info->transsize) {
	  data.size = http->info->transsize;
          data.buf = QueueReadPos(http->queue);
          if (http->receiver.samples(http->receiver.obj, data, http->sequence))
          {
            http->sequence++;
            PacketReaderAudioHttpDrop(http->packet_reader, http->conn, http->queue, http->info->transsize);
            return 1;
          } else {
            return 0;
          }
	} else {
          http->state = CONN_STATE_FINISHED;
          TcpClose(http->conn);
          http->receiver.eof(http->receiver.obj);
          return 1;
	}
    }

    /* Lets see if we have a whole chunk's worth */
    if ((size >= http->info->transsize) && (http->receiver.samples != 0))
    {
        data.size = http->info->transsize;
        data.buf = QueueReadPos(http->queue);
        if (http->receiver.samples(http->receiver.obj, data, http->sequence))
        {
            http->sequence++;
            PacketReaderAudioHttpDrop(http->packet_reader, http->conn, http->queue, http->info->transsize);
            return 1;
        }
    }
    return 0;
}

static int step_finished(http_handle_t http)
{
    if(TcpConnState(http->conn) != TCP_CONN_ESTABLISHED)
    {
#if SHOWPROT
    printf("Connection closed\n");
#endif
        http->state = CONN_STATE_CLOSED;
        return 1;
    }
    else
    {
        return 0;
    }
}

static int ctrl_step(http_handle_t http)
{
    switch(http->state)
    {
        case CONN_STATE_RESOLVING:
            return step_resolving(http);
        case CONN_STATE_CONNECTING:
            return step_connecting(http);
        case CONN_STATE_PROXY:
            return step_proxy(http);
        case CONN_STATE_GREETING:
            return step_greeting(http);
        case CONN_STATE_REQUESTING:
            return step_requesting(http);
        case CONN_STATE_READY:
            if (http->packet_reader == NULL)
              return process_continuous_input(http);
            else
              return process_packetised_input(http);
        case CONN_STATE_FINISHED:
            return step_finished(http);
        case CONN_STATE_CLOSED:
        case CONN_STATE_FAILED:
            return 0;
    }
    return 0;
}

void HttpInit(void)
{
#if DEBUG
    printf("HttpInit\n");
#endif
    TcpInitialise();
    /*
    */
}

void HttpFin(void)
{
#if DEBUG
    printf("HttpFin\n");
#endif
    TcpFinalise();
    /*
    */
}

http_handle_t HttpOpen(char *url)
{
    http_handle_t res;

#if DEBUG
    printf("HttpOpen\n");
#endif
    res = Malloc(sizeof(*res));
    res->state = CONN_STATE_RESOLVING;
    res->receiver = def_receiver;
    res->err = NULL;
    res->url = UrlParse(url, 80);
    res->conn = NULL;
    res->sequence = 0;
    res->queue = QueueOpen();
    res->stream = -1;
    res->info = NULL;
    res->interleave = -1;
    res->length = -1;
    res->http_header = NULL;
    res->http_header_size = 0;
    res->http_header_len = 0;
    res->rm_header = NULL;
    res->packet_reader = NULL;
    ExceptTry
    {
        if(res->url == NULL)
            Error("Invalid URL");
        if(strcmp(res->url->protocol, "http") != 0)
            Error("http protocol only, me!");
    }
    ExceptCatch
    {
        log_error(res);
    }
    return res;
}

void HttpClose(http_handle_t http)
{
#if DEBUG
    printf("HttpClose\n");
#endif
    if(http->state == CONN_STATE_READY)
    {
        int time;

        time = Time();
        while(Time()-time < 10)
        {
            TcpConnState(http->conn);
            ForceCallBack();
        }
    }
    if(http->err) Free(http->err);
    if(http->url) UrlFree(http->url);
    if(http->queue) QueueClose(http->queue);
    if(http->info)
    {
        RAHeaderFree(http->info);
        Free(http->info);
    }
    if(http->conn) TcpDelete(http->conn);
    if (http->http_header) Free(http->http_header);
    if (http->rm_header) RMHeaderDestruct(http->rm_header);
    if (http->packet_reader) PacketReaderDestruct(http->packet_reader);
    Free(http);
}

void HttpShut(http_handle_t http)
{
#if DEBUG
    printf("HttpShut\n");
#endif
    ExceptTry
    {
        http->state = CONN_STATE_FINISHED;
        TcpClose(http->conn);
    }
    ExceptCatch
    {
        log_error(http);
    }
}

conn_state_t HttpState(http_handle_t http)
{
#if DEBUG
    printf("HttpState\n");
#endif
    return http->state;
}

void HttpService(http_handle_t http)
{
    int c;

#if DEBUG
    printf("HttpService\n");
#endif
    ExceptTry
    {
        if(!lineup)
            Error("IP connection broken");
        c = 1;
        while(c)
        {
            c = ctrl_step(http);
        }
    }
    ExceptCatch
    {
        log_error(http);
    }
}

void HttpReceiver(http_handle_t http, http_receiver_t rec)
{
#if DEBUG
    printf("HttpReceiver\n");
#endif
    http->receiver = rec;
}

char *HttpError(http_handle_t http)
{
#if DEBUG
    printf("HttpError\n");
#endif
    return http->err;
}

char *HttpAddress(http_handle_t http)
{
#if DEBUG
    printf("HttpAddress\n");
#endif
    return http->url->address;
}

char *HttpResource(http_handle_t http)
{
#if DEBUG
    printf("HttpResource\n");
#endif
    return http->url->resource;
}

static data_t empty_data_t = { 0, NULL};

data_t HttpHeader(http_handle_t http)
{
#if DEBUG
    printf("HttpHeader\n");
#endif
    return empty_data_t;
}

ra_header_t *HttpInfo(http_handle_t http)
{
#if DEBUG
    printf("HttpInfo\n");
#endif
    return http->info;
}

void HttpLineUp(int flag)
{
#if DEBUG
    printf("HttpLineUp\n");
#endif
    lineup = flag;
}
