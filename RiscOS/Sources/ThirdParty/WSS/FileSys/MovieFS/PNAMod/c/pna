/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 20/12/96:  Initial version
    PHBG   7/1/97:  Removed all loops in favour of new states, so that
                    PnaOpen can return immediately, and the connection
                    can be polled externally.  Also improved error
                    handling, so that errors cause a transition to the
                    failed state, and recording of the error message.
    PHBG  10/1/97:  Add replay buffers.
    PHBG  14/1/97:  Move replay buffers out of this module, providing
                    mechanism for filling externally held buffers.
                    That way, we have nothing specific to replay here.
    PHBG  28/1/97:  Handle the rest of the server messages, at least as
                    much as pulling them off the queue.
    PHBG  29/1/97:  Separated out the calls to step from PnaState into
                    a new entry point PnaService.  This allows for
                    making the system interupt driven.
    PHBG   4/2/97   UDP support
    RJW    4/2/97   Stepped up to ver 8 of protocol
    PHBG  10/2/97   Put closing of TCP connection on a callback, so that
                    the PAUSE message gets through and shuts up the
                    UDP stream.
    PHBG  23/7/97   Handle RealMedia headers, raw data, splitting of
                    streams, corrections to v10 protocol.
    PHBG  19/11/97  Ensure UDP ports chosen in the range 6970..7169
*/

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include "options.h"
#include "memory.h"
#include "error.h"
#include "safeputc.h"
#include "forcecallb.h"
#include "time.h"
#include "queue.h"
#include "tcp.h"
#include "url.h"
#include "rmheader.h"
#include "pnaoptions.h"
#include "challenge.h"
#include "bool.h"
#include "sysvar.h"
#include "ra.h"
#include "swis.h"
#include "authkey.h"

#include "pna.h"

#define IRRELEVANT	(0)
#define MAGIC           (0x67e32b93)
#define VERSION		(10)
#define PROXY_VERSION	(1)
#define MAX_DGRAM 	(1024)

#define NCODECS (20)

const unsigned char pMagic1[] = {
			    0x05, 0x18, 0x74, 0xd0, 0x0d,
			    0x09, 0x02, 0x53, 0xc0, 0x01,
			    0x05, 0x05, 0x67,
			    0x03, 0x19, 0x70,
			    0x08, 0x27, 0x66,
			    0x10, 0x10, 0x72,
			    0x08, 0x09, 0x63,
			    0x11, 0x03, 0x71,
			    0x08, 0x08, 0x70,
			    0x02, 0x10, 0x57,
			    0x05, 0x18, 0x54,
			    0x0
		       };

const char pMagic2[] = "Copyright(c) Progressive Networks, Inc 1995-1997";

const unsigned char pMagic3[] = {
			    0x08, 0x08, 0x70,
			    0x05, 0x05, 0x67,
			    0x11, 0x03, 0x71,
			    0x05, 0x18, 0x54,
			    0x03, 0x19, 0x70,
			    0x05, 0x18, 0x74, 0xd0, 0x0d,
			    0x08, 0x27, 0x66,
			    0x10, 0x10, 0x72,
			    0x09, 0x02, 0x53, 0xc0, 0x01,
			    0x08, 0x09, 0x63,
			    0x02, 0x10, 0x57,
			    0x0
		       };

struct {int bandwidth; char *id;} codec[] =
{
    {1544000, "pnrv"},
    {115200, "pnrv"},
    {80000, "dnet"},
    {56700, "pnrv"},
    {40000, "dnet"},
    {34400, "pnrv"},
    {32000, "dnet"},
    {28800, "pnrv"},
    {20000, "dnet"},
    {19200, "pnrv"},
    {16000, "sipr"},
    {16000, "dnet"},
    {28800, "28_8"},
    {14400, "pnrv"},
    {12000, "dnet"},
    {8500, "sipr"},
    {8500, "dnet"},
    {6500, "sipr"},
    {5000, "sipr"},
    {14400, "lpcJ"}
};

struct pna_handle_s
{
    pna_receiver_t receiver;
    conn_state_t   state;
    char          *err;
    url_t          url;
    tcp_conn_t     conn;
    queue_t        queue;
    udp_conn_t     data_conn;
    int            sequence, gen_in, gen_out;
    int            expected_sequence;
    int            gen_empty;
    rmheader_t     rmheader;
    int            stream;
    ra_header_t   *info;
    int            interleave, length, challenge;
    data_t         challenge_text;
    int            version;
    bool           proxy;
    char          *proxy_address;
    int            proxy_port;
    transport_t    transport;
    int            bandwidth;
    int            can_resend;
    int            challenge_version;
    int            numauthentications;
    char          *timestring;
    char          *uuid;
    char          *companykey;
};

#define htonl(s) ((((s) & 0xFF) << 24) \
                      | (((s) & 0xFF00) << 8) \
                      | (((s) & 0xFF0000) >> 8) \
                      | (((s) & 0xFF000000) >> 24))

#define htons(s) ((((s) & 0xFF) << 8) \
                      | (((s) & 0xFF00) >> 8))

#define SEND_4(s,p)   {int   i; i=htonl(s); send((char *)&i, 4, p);}
#define SEND_2(s,p)   {int   i; i=htons(s); send((char *)&i, 2, p);}
#define SEND_1(s,p)   {char  i; i=s;        send((char *)&i, 1, p);}
#define SEND_N(s,l,p) {                     send((char *) s, (l), p);}

#define CODE(a,b,c,d) ((d)|((c)<<8)|((b)<<16)|((a)<<24))

#if HDR2DISC || AUDIODATA2DISC || VIDEODATA2DISC
static void to_disc(char *fname, data_t data)
{
    static int file_count = 0;
    char name[20];
    FILE *f;

    sprintf(name, "%s%d", fname, file_count++);
    f = fopen(name, "w");
    if(f)
    {
        fwrite(data.buf, 1, data.size, f);
        fclose(f);
    }
}
#endif

#if GRAB
static FILE *fdesc = NULL;

static void open_rm(void)
{
    static int file_count = 0;
    char name[20];

    sprintf(name, "Samp%d.rm", fname, file_count++);
    fdesc = fopen(name, "w");
}

static void close_rm(void)
{
    if(fdesc)
        fclose(fdesc);
    fdesc = NULL;
}

static void store_rm(data_t data)
{
    if(fdesc)
        fwrite(data.buf, 1, data.size, fdesc);
}
#endif

static int lineup = 1;

static void adjust_interleave(pna_handle_t pna)
{
    if(pna->info->file_version == 3)
    {
        if(pna->transport == TRANSPORT_TCP)
        {
#if VERSION >= 10
          if(pna->version >= 10)
#endif
            pna->info->interleavefactor = 1;
        }
        else if(pna->interleave != -1)
        {
            pna->info->interleavefactor = pna->interleave;
        }
    }
}

static int lower(int c) {
  if (c >= 'A' && c <= 'Z')
    return c+'a'-'A';
  else
    return c;
}

static void def_reset(void *obj, int seq)
{
    Error("Unexpected buffer reset");
}

static int def_samples(void *obj, data_t data, int seq)
{
    Error("Unexpected arrival of samples");
    return IRRELEVANT;
}

static void def_eof(void *obj)
{
    Error("Unexpected end message");
}

static pna_receiver_t def_receiver = {NULL, def_reset, def_samples, def_eof};

static void log_error(pna_handle_t pna)
{
    char *err;

    pna->state = CONN_STATE_FAILED;
    err = ExceptCaught()->errmess;
#if DEBUG || SHOWPROT
    printf("log_error: %s\n", err);
#endif
    pna->err = Malloc0(strlen(err)+1);
    if(pna->err)
        strcpy(pna->err, err);
}

static void send(char *buf, int size, tcp_conn_t conn)
{
    int n;

    while(size)
    {
        if (TcpConnState(conn) != TCP_CONN_ESTABLISHED) {
          Error("Connection lost (while writing)");
        }
        n = TcpWrite(buf, size, conn);
        if(n == 0)
            Error("Connection not accepting data");
        size -= n;
        buf += n;
    }
}

static int first_char(pna_handle_t pna)
{
    return QueueAtLeast(1, pna->queue, pna->conn)
                  ? QueueReadPos(pna->queue)[0]
                  : -1;
}

static void resend_request(pna_handle_t pna, int first, int count)
{
    char buf[7];

    if(!pna->can_resend)
        return;
#if BENH
    printf(" (resend %d)", count);
#endif
    buf[0] = 'M';
    buf[1] = buf[2] = 0;
    buf[3] = (first >> 8);
    buf[4] = first;
    buf[5] = (count >> 8);
    buf[6] = count;
    send(buf, 7, pna->conn);
}

static int tcp_audio(pna_handle_t pna, data_t data)
{
    if(pna->gen_in != pna->gen_out)
        return 1;
    if(pna->gen_empty)
    {
        pna->sequence = 0;
        pna->receiver.reset(pna->receiver.obj, 0);
        pna->gen_empty = 0;
    }
    if(pna->receiver.samples(pna->receiver.obj, data, pna->sequence))
    {
        pna->sequence++;
        return 1;
    }
    return 0;
}

static void udp_audio(pna_handle_t pna, data_t data)
{
    int seq, gen, pos, jump;
    int blkhdrsize;
    char *buf;

    blkhdrsize = pna->version >= 10 ? 12 : 11;
    buf = data.buf;
    if(data.size < 11)
        Error("Short UDP data packet");
    seq = ((buf[2] << 8) | buf[3]) & 0xFFFF;
    pos = buf[5];
    gen = (pos >> 4) & 0xF;
    pos &= 0xF;
    data.size -= blkhdrsize;
    data.buf = buf + blkhdrsize;

    if(gen != pna->gen_out)
        return;
    if(pna->gen_empty)
    {
        pna->sequence = seq;
        pna->expected_sequence = seq - pos;
        pna->receiver.reset(pna->receiver.obj, seq - pos);
        pna->gen_empty = 0;
    }

    /* Derive 32 bit sequence number from 16 bit one using the fact that */
    /* they don't change much.                                           */

    pna->sequence += (signed short) (seq - pna->sequence);
    jump = pna->sequence - pna->expected_sequence;
    if(jump > 0 && jump <= 40)
        resend_request(pna, (pna->expected_sequence & 0xFFFF), jump);
    pna->receiver.samples(pna->receiver.obj, data, pna->sequence);
    if(jump >= 0)
        pna->expected_sequence = pna->sequence + 1;
#if BENH
    else
        printf("r");
#endif
}

static int process_F(pna_handle_t pna)
{
#if SHOWPROT
    printf("Server says can't find it\n");
#endif
    QueueDrop(1, pna->queue);
    Error("Can't open %s", pna->url->resource);
    return 0;
}

static int process_hash(pna_handle_t pna)
{
    int size;
    int chlen;
    char text[33], response[33];
    char *buf;

#if SHOWPROT
    printf("Little challenge\n");
#endif
    /* Have we got all the challenge header? */
    if(!QueueAtLeast(3, pna->queue, pna->conn))
        return 0;
    buf = QueueReadPos(pna->queue) + 1;
    size = (buf[0]<<8) | buf[1];
    /* Now check we have all the challenge */
    if(!QueueAtLeast(3+size, pna->queue, pna->conn))
        return 0;
    /* So throw away the header */
    QueueDrop(3, pna->queue);
    buf = QueueReadPos(pna->queue);
    chlen = (size > 32 ? 32 : 16);
    ChallengeReply(text, buf+chlen, chlen);
    if (pna->version < 10)
      ChallengeResponse1(response, pna->url->resource, text, pna->challenge,
                         RMHeaderAudio(pna->rmheader).size+pna->length);
    else if (pna->challenge_version == 0) {
#if SHOWPROT
      printf("v0 challenge (resp1)\n");
#endif
      ChallengeResponse1(response, pna->url->resource, text, pna->challenge, 0);
    } else if (pna->challenge_version == 1) {
#if SHOWPROT
      printf("v1 challenge (resp1)\n");
#endif
      ChallengeResponse1(response, pna->challenge_text.buf, (char *)pMagic2, MAGIC1, MAGIC2);
    } else
      Error("Unknown Challenge Version (%d) requested!", pna->challenge_version);
    QueueDrop(size, pna->queue);
    if (memcmp(response, buf, chlen) != 0) {
      Error("Server failed security challenge");
      return 0;
    }
    if (pna->challenge_version == 0) {
#if SHOWPROT
      printf("v0 challenge (resp2)\n");
#endif
      ChallengeResponse2(response, pna->challenge_text.buf, 0, pna->challenge, 0);
    } else {
#if SHOWPROT
      printf("v1 challenge (resp2)\n");
#endif
      ChallengeResponse2(response, text, (char *)pMagic2, MAGIC3, MAGIC4);
    }
    SEND_1((int) '#', pna->conn);
    SEND_2(chlen, pna->conn);
    SEND_N(response, chlen, pna->conn);
    return 0;
}

static int process_r(pna_handle_t pna)
{
    data_t hdr;
    char *buf;

#if SHOWPROT
    printf("Header received\n");
#endif
    if(!QueueAtLeast(3, pna->queue, pna->conn))
        return 0;
    buf = QueueReadPos(pna->queue) + 1;
    hdr.size = (buf[0]<<8) | buf[1];
    if(!QueueAtLeast(hdr.size + 3, pna->queue, pna->conn))
        return 0;
    hdr.buf = QueueReadPos(pna->queue) + 3;
#if HDR2DISC
    to_disc("RAHdr", hdr);
#endif
    RMHeaderParse(pna->rmheader, hdr);
    QueueDrop(hdr.size + 3, pna->queue);
    if(RMHeaderComplete(pna->rmheader))
    {
        pna->stream = RMHeaderAudioStream(pna->rmheader);
        if(pna->stream == -1)
            Error("RealMedia file has no audio stream");
        pna->info = Malloc(sizeof(ra_header_t));
        RAHeaderExtract(pna->info, RMHeaderAudio(pna->rmheader));
#if SHOWPROT
    printf("Interleave from header %d\n", pna->info->interleavefactor);
#endif
        adjust_interleave(pna);
        pna->state = CONN_STATE_READY;
    }
    return 1;
}

static int process_L(pna_handle_t pna)
{
    char *buf;

#if SHOWPROT
    printf("Sample length received\n");
#endif
    if(!QueueAtLeast(5, pna->queue, pna->conn))
        return 0;
    buf = QueueReadPos(pna->queue) + 1;
    pna->length = (buf[0]<<24) | (buf[1]<<16) | (buf[2]<<8) | buf[3];
    QueueDrop(5, pna->queue);
    return 1;
}

static int process_i(pna_handle_t pna)
{
    if(!QueueAtLeast(2, pna->queue, pna->conn))
        return 0;
    pna->interleave = QueueReadPos(pna->queue)[1];
#if SHOWPROT
    printf("Interleave factor received %d\n", pna->interleave);
#endif
    if(pna->interleave == 0)
        pna->interleave = 1;
    QueueDrop(2, pna->queue);
    return 1;
}

static int process_A(pna_handle_t pna)
{
    data_t data;
    char *buf;
    int data_off;

    data_off = pna->version <= 6 ? 2 : 3;
    if(QueueAtLeast(data_off, pna->queue, pna->conn))
    {
        buf = QueueReadPos(pna->queue) + 1;
        data.size = pna->version <= 6 ? buf[0]
                                      : (buf[0]<<8) | buf[1];
        if(QueueAtLeast(data.size + data_off, pna->queue, pna->conn))
        {
            data.buf = QueueReadPos(pna->queue) + data_off;
            if(tcp_audio(pna, data))
            {
                QueueDrop(data.size + data_off, pna->queue);
                return 1;
            }
        }
    }
    return 0;
}

static int process_E(pna_handle_t pna)
{
#if SHOWPROT
    printf("EOF received over TCP\n");
#endif
    QueueDrop(1, pna->queue);
    if (pna->transport == TRANSPORT_TCP) {
      pna->state = CONN_STATE_FINISHED;
      TcpClose(pna->conn);
      pna->receiver.eof(pna->receiver.obj);
    }
    return 1;
}

static int process_X(pna_handle_t pna)
{
    char *p;
    static char buf[256];
    int size;

#if SHOWPROT
    printf("User alert message\n");
#endif
    if(!QueueAtLeast(3, pna->queue, pna->conn))
        return 0;
    p = QueueReadPos(pna->queue) + 1;
    size = (p[0]<<8) | p[1];
    if(!QueueAtLeast(size + 3, pna->queue, pna->conn))
        return 0;
    /* RJW: */
    if(size < 100)
    {
        memcpy(buf, QueueReadPos(pna->queue)+3, size);
        buf[size] = '\0';
    }
    else
    {
        memcpy(buf, QueueReadPos(pna->queue)+3, 95);
        strcpy(buf+95, " ...");
    }
    Error("Alert: %s", buf);
    return IRRELEVANT;
}

static int process_a(pna_handle_t pna)
{
    int mess_size;

#if SHOWPROT
    printf("Seek acknowledged\n");
#endif
    mess_size = pna->version >= 10 ? 4 : 0;
    if(!QueueAtLeast(1 + mess_size, pna->queue, pna->conn))
        return 0;
    QueueDrop(1 + mess_size, pna->queue);
    pna->gen_in++;
    pna->gen_in &= 0xF;
    return 1;
}

static int process_ping(pna_handle_t pna)
{
#if SHOWPROT
    printf("Ping received; pong sent\n");
#endif
    QueueDrop(1, pna->queue);
    send("!", 1, pna->conn);
    return 1;
}

static int process_T(pna_handle_t pna)
{
#if SHOWPROT
    printf("Time received\n");
#endif
    QueueDrop(5, pna->queue);
    return 1;
}

static int process_plus(pna_handle_t pna)
{
#if SHOWPROT
    printf("Time delta received\n");
#endif
    QueueDrop(9, pna->queue);
    return 1;
}

static int process_minus(pna_handle_t pna)
{
#if SHOWPROT
    printf("Negative time delta received\n");
#endif
    QueueDrop(3, pna->queue);
    return 1;
}

static int process_w(pna_handle_t pna)
{
#if SHOWPROT
    printf("Sending a WAV\n");
#endif
    Error("Streaming of WAV files not supported");
    return IRRELEVANT;
}

static int process_e(pna_handle_t pna)
{
    char *p;
    int size;

#if SHOWPROT
    printf("Meta-event received\n");
#endif
    if(!QueueAtLeast(11, pna->queue, pna->conn))
        return 0;
    p = QueueReadPos(pna->queue) + 9;
    size = (p[0]<<8) | p[1];
    if(!QueueAtLeast(size + 11, pna->queue, pna->conn))
        return 0;
    QueueDrop(size + 11, pna->queue);
    return 1;
}

static int process_v(pna_handle_t pna)
{
    char *p;
    int size;

#if SHOWPROT
    printf("Server identification received\n");
#endif
    if(!QueueAtLeast(3, pna->queue, pna->conn))
        return 0;
    p = QueueReadPos(pna->queue) + 1;
    size = (p[0]<<8) | p[1];
    if(!QueueAtLeast(size + 3, pna->queue, pna->conn))
        return 0;
    QueueDrop(size + 3, pna->queue);
    return 1;
}

static int process_redirect(pna_handle_t pna)
{
#if SHOWPROT
    printf("Redirection requested\n");
#endif
    Error("Redirection not supported");
    return IRRELEVANT;
}

static int process_O(pna_handle_t pna)
{
    char *buf;
    int len, code;

#if SHOWPROT
    printf("Server responded to option\n");
#endif
    if(!QueueAtLeast(2, pna->queue, pna->conn))
        return 0;
    len = QueueReadPos(pna->queue)[1];
    if(!QueueAtLeast(2 + len, pna->queue, pna->conn))
        return 0;
    buf = QueueReadPos(pna->queue) + 2;
    code = *buf++;
    code = (code << 8) | *buf++;
    switch(code)
    {
        case pna_option_resend:
            if(len == 8)
                pna->can_resend = 1;
            else
            	pna->can_resend = *buf;
#if BENH
            printf(pna->can_resend ? "Resend enabled\n"
                                   : "Resend disabled\n");
#endif
            break;
        case pna_option_challenge_version:
#if BENH
            printf("Challenge version %d (%d)\n", PNA_CHALLENGE_VERSION, len);
#endif
            pna->challenge_version = PNA_CHALLENGE_VERSION;
            break;
        default:
#if BENH
          printf("Code: %d Len %d\n", code, len);
          { int i;
            for (i=0; i < len; i++) {
              printf("%02x ", *buf++);
            }
            printf("\n");
          }
#endif
          break;
    }
    QueueDrop(2 + len, pna->queue);
    return 1;
}

static int process_Z(pna_handle_t pna)
{
    data_t data;
    char *buf;
    int data_off;

    data_off = 3;
    if(QueueAtLeast(data_off, pna->queue, pna->conn))
    {
        buf = QueueReadPos(pna->queue) + 1;
        data.size = (buf[0]<<8) | buf[1];
        if(QueueAtLeast(data.size + data_off, pna->queue, pna->conn))
        {
            buf = data.buf = QueueReadPos(pna->queue) + data_off;
#if AUDIODATA2DISC | VIDEODATA2DISC
	    if(pna->version >= 10 && buf[10] == pna->stream) {
#if AUDIODATA2DISC
		to_disc("RawADat", data);
#endif
	    } else {
#if VIDEODATA2DISC
		to_disc("RawVDat", data);
#endif
	    }
#endif
            if(pna->version >= 10 && buf[10] == pna->stream)
                udp_audio(pna, data);
            QueueDrop(data.size + data_off, pna->queue);
            return 1;
        }
    }
    return 0;
}

static int process_unknown(pna_handle_t pna)
{
#if SHOWPROT
    printf("Server said something odd 0x%02X\n", first_char(pna));
#endif
    Error("Server said 0x%02X, and I don't know what it means",
                                                 first_char(pna));
    return IRRELEVANT;
}

static int process_input(pna_handle_t pna)
{
    if(TcpConnState(pna->conn) != TCP_CONN_ESTABLISHED)
        Error("Connection lost (while reading)");
#if SHOWPROT
    if (first_char(pna) != -1)
      printf("%c (%d)\n", first_char(pna), first_char(pna));
#endif
    switch(first_char(pna))
    {
        case -1  : return 0;
        case 'F' : return process_F(pna);
        case 'r' : return process_r(pna);
        case 'L' : return process_L(pna);
        case 'i' : return process_i(pna);
        case 'A' : return process_A(pna);
        case 'E' : return process_E(pna);
        case 'X' : return process_X(pna);
        case 'a' : return process_a(pna);
        case '?' : return process_ping(pna);
        case 'T' : return process_T(pna);
        case '+' : return process_plus(pna);
        case '-' : return process_minus(pna);
        case 'w' : return process_w(pna);
        case 'e' : return process_e(pna);
        case 'v' : return process_v(pna);
        case '@' : return process_redirect(pna);
        case 'O' : return process_O(pna);
        case '#' : return process_hash(pna);
        case 'Z' : return process_Z(pna);
        default  : return process_unknown(pna);
    }
}

static int step_resolving(pna_handle_t pna)
{
    tcp_addr_t ip_addr;
    int i;

    if (pna->proxy) {
      ip_addr = TcpResolve(pna->proxy_address);
      if(ip_addr == TCP_ADDR_RESOLVING)
        return 0;
      if(ip_addr == TCP_ADDR_UNKNOWN)
      {
        Error("Unknown proxy host: %s", pna->proxy_address);
        return IRRELEVANT;
      }
#if SHOWPROT
      printf("Resolved proxy address\n");
#endif
      pna->conn = TcpCall(TCP_PORT_ANY, pna->proxy_port, ip_addr);
    } else {
      ip_addr = TcpResolve(pna->url->address);
      if(ip_addr == TCP_ADDR_RESOLVING)
        return 0;
      if(ip_addr == TCP_ADDR_UNKNOWN)
      {
#if SHOWPROT
        printf("Nope\n");
#endif
        Error("Unknown host: %s", pna->url->address);
        return IRRELEVANT;
      }
#if SHOWPROT
      printf("Resolved server address\n");
#endif
      pna->conn = TcpCall(TCP_PORT_ANY, pna->url->port, ip_addr);
    }
    if (pna->transport == TRANSPORT_UDP)
    {
        for(i = 6970; i < 7170 && pna->data_conn == NULL; i++)
        {
            ExceptTry
            {
                pna->data_conn = UdpCreate(i);
            } ExceptCatch {}
        }
        if(pna->data_conn == NULL)
            Error("No free UDP ports in the range 6970..7169");
    }
    pna->state = CONN_STATE_CONNECTING;
    TcpFreeAddr(ip_addr);
    return 1;
}

static int step_connecting(pna_handle_t pna)
{
    if(TcpConnState(pna->conn) > TCP_CONN_ESTABLISHED)
        Error("Connection refused");
    if(TcpConnState(pna->conn) == TCP_CONN_ESTABLISHED)
    {
      if(pna->proxy) {
#if SHOWPROT
        printf("Connected to proxy\n");
#endif
        /* First we negotiate the transfer type */
        SEND_2(2, pna->conn);
        SEND_1(pna_proxy_version, pna->conn);
        SEND_1(PROXY_VERSION, pna->conn);
        /* Next we send the server hostname */
        SEND_2(2+strlen(pna->url->address), pna->conn);
        SEND_1(pna_proxy_hostname, pna->conn);
        send(pna->url->address, strlen(pna->url->address), pna->conn);
        /* Next we send the server port */
        SEND_2(3, pna->conn);
        SEND_1(pna_proxy_host_port, pna->conn);
        SEND_2(pna->url->port, pna->conn);
        /* Next we send whether we are using TCP or not */
        SEND_2(2, pna->conn);
        SEND_1(pna_proxy_use_tcp, pna->conn);
        SEND_1(pna->transport == TRANSPORT_TCP, pna->conn);
        if(pna->transport != TRANSPORT_TCP) {
          /* Send the offset in the next stream of the port number */
          SEND_2(2, pna->conn);
          SEND_1(pna_proxy_port_offset, pna->conn);
          SEND_1(10, pna->conn); /* Yuk! +2 if no-interleave */
        }
        /* Thats all Folks! */
        SEND_2(1, pna->conn);
        SEND_1(pna_proxy_end, pna->conn);
      }
      pna->state = CONN_STATE_PROXY;
      return 1;
    }
    else
    {
      return 0;
    }
}

static char *make_uuid(void) {

  char *uuid;

  uuid = Malloc(0x25);
  sprintf(uuid, "af7a66a1-8ad4-11d2-f9ac-f9355d303472");

  return uuid;
}

/* Return a time like: [10/07/1998:11:59:44 00:00] */
static char *get_time_string(void) {

  char five_byte_time[5];
  char *time;
  int buffer[36];

  time = Malloc(32);
  five_byte_time[0] = 3;
  _swix(OS_Word, _IN(0) | _IN(1), 14, (int)five_byte_time);
#if 0
  _swix(Territory_ConvertDateAndTime, _IN(0) | _IN(1) | _IN(2) | _IN(3) | _IN(4),
        -1, (int)five_byte_time, (int)time, 32, "[%DY/%MN/%CE%YR:%24:%MI:%SE 00:00]");
#else
  _swix(Territory_ConvertTimeToOrdinals, _IN(0) | _IN(1) | _IN(2), -1, (int)five_byte_time, (int)buffer);
  sprintf(time, "[%02d/%02d/%04d:%02d:%02d:%02d 00:00]", buffer[4], buffer[5], buffer[6], buffer[3], buffer[2], buffer[1]);
#endif
   return time;
}

static int step_proxy(pna_handle_t pna)
{
    int len, i, bw;
    char *buf;

    if(TcpConnState(pna->conn) > TCP_CONN_ESTABLISHED)
        Error("Connection refused");
    if(TcpConnState(pna->conn) == TCP_CONN_ESTABLISHED)
    {
        if(pna->proxy) {
          /* Have we got a response from the server? */
          if(!QueueAtLeast(4, pna->queue, pna->conn))
            return 0;
          buf = QueueReadPos(pna->queue);
          len = (buf[0]<<8) | buf[1];
          if(!QueueAtLeast(len+2, pna->queue, pna->conn))
            return 0;
          buf = QueueReadPos(pna->queue);
          if (buf[2] != pna_proxy_status)
            Error("Proxy replied with garbage");
          /* PN_NO_ERROR = 0 */
          if (buf[3] != 0) {
            if (len > 3) {
              Error("Proxy Error: %d %.*s", buf[3], len-2, &buf[4]);
            } else {
              Error("Proxy Error: %d", buf[3]);
            }
          }
        }
#if SHOWPROT
        printf("Connected to server\n");
#endif
        /* Hello */
        send("PNA", 3, pna->conn);

        /* I know up to version... */
        SEND_2(pna->version, pna->conn);

        /* No Interleaving */
        // SEND_2(pna_option_no_interleave, pna->conn);
        // SEND_2(0, pna->conn);

        /* Use UDP */
        if (pna->transport == TRANSPORT_UDP) {
          SEND_2(pna_option_datagram, pna->conn);
          SEND_2(2, pna->conn);
          SEND_2(UdpLocalPort(pna->data_conn), pna->conn);
        }

        // enqueue the version of the challenge we are expecting
        SEND_2(pna_option_challenge_version, pna->conn);
        SEND_2(2, pna->conn);
        SEND_2(PNA_CHALLENGE_VERSION, pna->conn);

        if (pna->version >= 8) {
          /* Challenge - Malloc one bigger to allow for terminator */
          pna->challenge_text.buf = Malloc(33);
          pna->challenge_text.size = 32;

          Challenge(pna->challenge_text.buf);
          SEND_2(pna_option_challenge, pna->conn);
          SEND_2(32, pna->conn);
          SEND_N(pna->challenge_text.buf, 32, pna->conn);
          /* Assume challenge type 0 unless we are told different */
          pna->challenge_version = 0;
        }

        /* bw encoding */
        SEND_2(pna_option_bw_encoding, pna->conn);
        len = 0;
        for(i = 0; i < NCODECS; i++)
          if(pna->bandwidth >= codec[i].bandwidth)
            len += 6;
        SEND_2(len, pna->conn);
        for(i = 0; i < NCODECS; i++)
        {
          if(pna->bandwidth >= codec[i].bandwidth)
          {
            bw = codec[i].bandwidth/800;
            SEND_2(bw, pna->conn);
            send(codec[i].id, 4, pna->conn);
          }
        }

        /* If we are doing perfectplay */
        /* SEND_2(pna_option_perfectplay, pna->conn); */
        /* SEND_2(0, pna->conn); */

	if (pna->version >= 10) {
	  //SEND_2(pna_option_force_perfectplay, pna->conn);
	  //SEND_2(0, pna->conn);

	  //SEND_2(pna_option_send_packet_flags, pna->conn);
	  //SEND_2(0, pna->conn);

	  //SEND_2(pna_option_live_pause, pna->conn);
	  //SEND_2(0, pna->conn);

	  //SEND_2(pna_option_mobile_download, pna->conn);
	  //SEND_2(0, pna->conn);

	  //SEND_2(pna_option_authentication_support, pna->conn);
	  //SEND_2(2, pna->conn);
	  //SEND_2(MAX_AUTHENTICATION_VERSION, pna->conn);
	  pna->numauthentications = 0;

	  pna->timestring = get_time_string();
	  SEND_2(pna_option_player_starttime, pna->conn);
          SEND_2(strlen(pna->timestring), pna->conn);
          send(pna->timestring, strlen(pna->timestring), pna->conn);
	}

        if (pna->version >= 8) {
          /* Send maximum bandwidth */
          SEND_2(pna_option_bandwidth, pna->conn);
          SEND_2(4, pna->conn);
          SEND_4(pna->bandwidth, pna->conn);
        }

        if (pna->version >= 8) {
          if (pna->transport == TRANSPORT_UDP) {
            SEND_2(pna_option_resend, pna->conn);
            SEND_2(2, pna->conn);
            SEND_2(0, pna->conn); /* ResendPort */
          }

          //SEND_2(pna_option_stats, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_generic_messages, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_interframe_control, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_composite_udp, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_send_bandwidth_report, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_sequenced_bandwidth_report, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_frame_control, pna->conn);
          //SEND_2(0, pna->conn);

          pna->uuid = make_uuid();
          SEND_2(pna_option_uuid, pna->conn);
          SEND_2(strlen(pna->uuid), pna->conn);
          //send("616795a1-171b-11d2-e448-5d6a6a5421b5", 0x24, pna->conn);
          //send("af7a66a1-8ad4-11d2-f9ac-f9355d303472", 0x24, pna->conn);
          send(pna->uuid, strlen(pna->uuid), pna->conn);

          pna->companykey = Malloc(PN_COMPANY_ID_KEY_SIZE+1);
	  CalcCompanyIDKey((const char*)PN_COMPANY_ID,
	  		   (const char*)pna->timestring,
			   (const char*)pna->uuid,
			   (const char*)pna->challenge_text.buf,
			   (const char*)pMagic2,
			   pna->companykey);
	  SEND_2(pna_option_company_id, pna->conn);
	  SEND_2(PN_COMPANY_ID_KEY_SIZE, pna->conn);
          //send("\x09\x66\xC4\xED\xBE\x21\x56\x3E\x3E\xCD\x69\xEC\x59\x08\xAA\x81", 0x10, pna->conn);
          //send("\xd1\xcc\xa0\xED\xd5\xf5\x15\x91\x0E\x21\xf1\x76\xb1\xfd\x78\x28", 0x10, pna->conn);
	  send(pna->companykey, PN_COMPANY_ID_KEY_SIZE, pna->conn);

          //SEND_2(pna_option_multicast, pna->conn);
          //SEND_2(0, pna->conn);

          //SEND_2(pna_option_transport_switching, pna->conn);
          //SEND_2(0, pna->conn);
        }

        /* End of options */
        SEND_2(pna_options_end, pna->conn);
        SEND_4((int)(pna->challenge ^ MAGIC), pna->conn);

        /* Send a client ID */
        SEND_1('c', pna->conn); /* pna_client_id */
        SEND_2(strlen("Acorn/WSSL RA Player"), pna->conn);
        SEND_N("Acorn/WSSL RA Player",strlen("Acorn/WSSL RA Player"), pna->conn);

        /* Send locale */
        SEND_1('l', pna->conn); /* pna_client_locale */
        SEND_2(0, pna->conn);   /* Locale */

        /* Send request */
        SEND_1('R', pna->conn); /* pna_request */
        len = strlen(pna->url->resource);
        SEND_2(len, pna->conn);
        SEND_N(pna->url->resource, len, pna->conn);
        SEND_1('y', pna->conn);
        pna->state = CONN_STATE_GREETING;
        return 1;
    } else {
        return 0;
    }
}

static int step_greeting(pna_handle_t pna)
{
    char *data;
    int version;

    if(TcpConnState(pna->conn) != TCP_CONN_ESTABLISHED)
        Error("Connection lost (while greeting)");
    if(!QueueAtLeast(5, pna->queue, pna->conn))
        return 0;
    data = QueueReadPos(pna->queue);
    if(memcmp(data, "PNA", 3) != 0)
        Error("Server didn't say hello in the way I expected");
#if SHOWPROT
    printf("Server said Hello\n");
#endif
    version  = ((int) *(data+3))<<8;
    version +=  (int) *(data+4);
    if (version < 5)
        Error("Server replied with too old a version: %d", version);
    QueueDrop(5, pna->queue);
    pna->version = version;
    pna->state = CONN_STATE_CHALLENGING;
    return 1;
}

static int step_challenging(pna_handle_t pna)
{
    int temp;

    if(TcpConnState(pna->conn) != TCP_CONN_ESTABLISHED)
        Error("Connection lost (while challenging)");
    if(!QueueAtLeast(4, pna->queue, pna->conn))
        return 0;
    temp = (int) htonl(pna->challenge);
    if(memcmp(QueueReadPos(pna->queue), &temp, 4) != 0)
        Error("Server failed security challenge");
#if SHOWPROT
    printf("Security challenge passed\n");
#endif
    QueueDrop(4, pna->queue);
    pna->state = CONN_STATE_REQUESTING;
    return 1;
}

static int step_finished(pna_handle_t pna)
{
    if(TcpConnState(pna->conn) != TCP_CONN_ESTABLISHED)
    {
#if SHOWPROT
    printf("Connected closed\n");
#endif
        pna->state = CONN_STATE_CLOSED;
        return 1;
    }
    else
    {
        return 0;
    }
}

static int ctrl_step(pna_handle_t pna)
{
    switch(pna->state)
    {
        case CONN_STATE_RESOLVING:
            return step_resolving(pna);
        case CONN_STATE_CONNECTING:
            return step_connecting(pna);
        case CONN_STATE_PROXY:
            return step_proxy(pna);
        case CONN_STATE_GREETING:
            return step_greeting(pna);
        case CONN_STATE_CHALLENGING:
            return step_challenging(pna);
        case CONN_STATE_REQUESTING:
        case CONN_STATE_READY:
            return process_input(pna);
        case CONN_STATE_FINISHED:
            return step_finished(pna);
        case CONN_STATE_CLOSED:
        case CONN_STATE_FAILED:
            return 0;
    }
    return 0;
}

static int data_step(pna_handle_t pna)
{
    static char buf[MAX_DGRAM];
    data_t data;

    if(pna->state != CONN_STATE_READY || pna->data_conn == NULL)
        return 0;
    data.size = UdpRead(buf, MAX_DGRAM, pna->data_conn);
    data.buf = buf;
    if(data.size == 0)
        return 0;
    if(data.size < 5)
        return 1;
    switch(buf[4])
    {
        case 'a':
#if AUDIODATA2DISC
            to_disc("AudData", data);
#endif
            udp_audio(pna, data);
            return 1;
        case 'Z':
#if AUDIODATA2DISC | VIDEODATA2DISC
	    if(pna->version >= 10 && buf[10] == pna->stream) {
#if AUDIODATA2DISC
		to_disc("RawADat", data);
#endif
	    } else {
#if VIDEODATA2DISC
		to_disc("RawVDat", data);
#endif
	    }
#endif
	if(pna->version >= 10 && buf[10] == pna->stream)
                udp_audio(pna, data);
            return 1;
        case 'e':
#if SHOWPROT
    printf("EOF received over UDP\n");
#endif
            pna->state = CONN_STATE_FINISHED;
            TcpClose(pna->conn);
            pna->receiver.eof(pna->receiver.obj);
            return 1;
        default:
            Error("Unexpected datagram type 0x%02x", buf[4]);
            return IRRELEVANT;
    }
}

void PnaInit(void)
{
    TcpInitialise();
    /*
    */
}

void PnaFin(void)
{
    TcpFinalise();
    /*
    */
}

pna_handle_t PnaOpen(char *url)
{
    pna_handle_t res;
    char *buf, *b;

    res = Malloc(sizeof(*res));
    res->state = CONN_STATE_RESOLVING;
    res->receiver = def_receiver;
    res->err = NULL;
    res->url = UrlParse(url, 7070);
    res->conn = NULL;
    res->data_conn = NULL;
    res->can_resend = 0;
    res->sequence = 0;
    res->gen_in = res->gen_out = 1;
    res->gen_empty = 1;
    res->queue = QueueOpen();
    res->rmheader = RMHeader();
    res->stream = -1;
    res->info = NULL;
    res->interleave = -1;
    res->length = -1;
    res->challenge_text.buf = 0;
    res->challenge_text.size = 0;
    res->challenge = 999;
    res->version = VERSION;
    res->proxy = false;
    res->proxy_address = NULL;
    res->proxy_port = 7070;
    res->timestring = NULL;
    res->uuid = NULL;
    res->companykey = NULL;
    buf = VarRead("RA$Proxy");
    if (buf != NULL) {
      res->proxy_address = buf;
      while (isspace(*buf))
        buf++;
      if (*buf < 32) {
        Free(res->proxy_address);
        res->proxy_address = NULL;
      } else {
        buf = strchr(buf, ':');
        if (!buf) {
          *buf = 0;
          res->proxy_port = atoi(buf+1);
        }
        res->proxy = true;
      }
    }
    res->bandwidth = VarReadInt("RA$Bandwidth");
    if (res->bandwidth == 0) {
      res->bandwidth = DEFAULT_BANDWIDTH;
      VarSetInt("RA$Bandwidth", res->bandwidth);
    }
    res->transport = TRANSPORT_UDP;
    buf = VarRead("RA$Transport");
    if (buf) {
      for (b = buf; *b != 0; b++)
        *b = lower(*b);
      if (strcmp(buf, "tcp") == 0)
        res->transport = TRANSPORT_TCP;
      else if (strcmp(buf, "udp") == 0)
        res->transport = TRANSPORT_UDP;
      else {
        VarSet("RA$Transport", "UDP");
        res->transport = TRANSPORT_UDP;
      }
      Free(buf);
    } else {
      VarSet("RA$Transport", "UDP");
    }
    ExceptTry
    {
        if(res->url == NULL)
            Error("Invalid URL");
        if(strcmp(res->url->protocol, "pnm") != 0)
            Error("pnm protocol only, me!");
    }
    ExceptCatch
    {
        log_error(res);
    }
    return res;
}

void PnaClose(pna_handle_t pna)
{
    if(pna->state == CONN_STATE_READY)
    {
        int time;

        PnaPlay(pna, 0);
        time = Time();
        while(Time()-time < 10)
        {
            TcpConnState(pna->conn);
            ForceCallBack();
        }
    }
    if(pna->err) Free(pna->err);
    if(pna->url) UrlFree(pna->url);
    if(pna->queue) QueueClose(pna->queue);
    if(pna->rmheader) RMHeaderDestruct(pna->rmheader);
    if(pna->info)
    {
        RAHeaderFree(pna->info);
        Free(pna->info);
    }
    if(pna->timestring) Free(pna->timestring);
    if(pna->uuid) Free(pna->uuid);
    if(pna->companykey) Free(pna->companykey);
    if(pna->challenge_text.buf) Free(pna->challenge_text.buf);
    if(pna->conn) TcpDelete(pna->conn);
    if(pna->data_conn) UdpDelete(pna->data_conn);
    if(pna->proxy_address) Free(pna->proxy_address);
    Free(pna);
}

void PnaShut(pna_handle_t pna)
{
    ExceptTry
    {
        pna->state = CONN_STATE_FINISHED;
        TcpClose(pna->conn);
    }
    ExceptCatch
    {
        log_error(pna);
    }
}

conn_state_t PnaState(pna_handle_t pna)
{
    return pna->state;
}

int PnaCanResend(pna_handle_t pna)
{
    return pna->can_resend;
}

transport_t PnaTransport(pna_handle_t pna)
{
    return pna->transport;
}

void PnaService(pna_handle_t pna)
{
    int c, d;

    ExceptTry
    {
        if(!lineup)
            Error("IP connection broken");
        c = d = 1;
        while(c || d)
        {
            c = ctrl_step(pna);
            d = data_step(pna);
        }
    }
    ExceptCatch
    {
        log_error(pna);
    }
}

void PnaReceiver(pna_handle_t pna, pna_receiver_t rec)
{
    pna->receiver = rec;
}

void PnaSeek(pna_handle_t pna, int time)
{
    ExceptTry
    {
        char buf[5];

        if (pna->version < 10)
          time = (time+99)/100;

        buf[0] = 'S';
        buf[1] = (time >> 24) & 0xFF;
        buf[2] = (time >> 16) & 0xFF;
        buf[3] = (time >>  8) & 0xFF;
        buf[4] =  time        & 0xFF;
        send(buf, 5, pna->conn);
        pna->gen_out++;
        pna->gen_out &= 0xF;
        pna->gen_empty = 1;
    }
    ExceptCatch
    {
        log_error(pna);
    }
}

void PnaPlay(pna_handle_t pna, int b)
{
    ExceptTry
    {
        if(b)
            send("B", 1, pna->conn);
        else
            send("P", 1, pna->conn);
    }
    ExceptCatch
    {
        log_error(pna);
    }
}

char *PnaError(pna_handle_t pna)
{
    return pna->err;
}

char *PnaAddress(pna_handle_t pna)
{
    return pna->url->address;
}

char *PnaResource(pna_handle_t pna)
{
    return pna->url->resource;
}

data_t PnaHeader(pna_handle_t pna)
{
    return RMHeaderAudio(pna->rmheader);
}

ra_header_t *PnaInfo(pna_handle_t pna)
{
    return pna->info;
}

void PnaLineUp(int flag)
{
    lineup = flag;
}
