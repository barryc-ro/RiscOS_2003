/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW 10/1/97: Initial version
    PHBG 26/1/97: Removed fps; calculated more accurately by the recogniser.
                  Also removed replaychunksize_uncomp so that the fetcher
                  will pick up replaychunksize, which is actually the value
                  it requires.
                  Minor corrections to chunk calculations.
    PHBG 28/1/97: Put chunktime back in (for seeking).  Use scale function
                  for accuracy without overflow.
*/

#include "bool.h"
#include "ra.h"
#include "raheader_t.h"
#include "error.h"
#include "memory.h"
#include "swis.h"
#include <string.h>

#ifndef NULL
#define NULL (0)
#endif

/* Horrible, but effective, and makes the following code MUCH more readable */
#define int32(x) (x++,x++,x++,x++,(int) ((x)[-4]<<24) + \
                                        ((x)[-3]<<16) + \
                                        ((x)[-2]<<8)  + \
                                        ((x)[-1]))
#define int16(x) (x++,x++,(short) ((x)[-2]<<8)  + \
                                  ((x)[-1]))
#define int8(x)  ((char)  (((x)++)[0]))

#define RAMAGIC  (0x2E7261FD)
#define RA3TOKEN (0x2E726133)   /* ".ra3" */
#define RA4TOKEN (0x2E726134)   /* ".ra4" */

int scale(int val, int num, int div)
{
    int acc_d, acc_r, val_d, val_r;

    acc_d = acc_r = 0;
    val_d = num/div;
    val_r = num%div;
    while(val > 0)
    {
        if(val & 1)
        {
            acc_d += val_d; acc_r += val_r;
            if(acc_r >= div)
            {
                acc_r -= div;
                acc_d++;
            }
        }
        val >>= 1;
        val_d <<= 1;
        val_r <<= 1;
        if(val_r >= div)
        {
            val_r -= div;
            val_d++;
        }
    }
    if(acc_r >= (div >> 1)) acc_d++;
    return acc_d;
}

static char *countedstring(char **ptr) {

  char *wibble;
  int size;

  size   = int8(*ptr);
  wibble = Malloc(size+1);
  strncpy(wibble, *ptr, size);
  *ptr += size;
  wibble[size]=0;
  return wibble;
}

static void ra3(ra_header_t *header, char *ptr, char *end) {

    char *headerend;
    int headerbytestotal;

    headerbytestotal            = int16(ptr);
    headerend                   = ptr + headerbytestotal;
    if (headerend>end)
      headerend=end;
    header->compressiontype     = int16(ptr);
    header->granularity         = int32(ptr);
    header->bytesperminute      = int32(ptr);
    header->bytestotal          = int32(ptr);
    header->title               = countedstring(&ptr);
    header->author              = countedstring(&ptr);
    header->copyright           = countedstring(&ptr);
    header->app                 = countedstring(&ptr);
    if (ptr<headerend)
      header->copybyte          = int8(ptr);
    else
      header->copybyte          = 0;
    if (ptr<headerend)
      header->compressioncode   = countedstring(&ptr);
    else {
      header->compressioncode   = Malloc(5*sizeof(char));
      strcpy(header->compressioncode, "14_4");
    }
    if (strncmp(header->compressioncode, "lpcJ" ,4) == 0
       || strncmp(header->compressioncode, "" ,4) == 0)
    {
      Free(header->compressioncode);
      header->compressioncode = Malloc(5);
      strcpy(header->compressioncode, "14_4");
    }
    header->dataoffset          = (int) headerend;//ptr;
    header->interleavefactor    = 12;
    header->interleaveblocksize = 240;
    header->bytesperminute2     = header->bytesperminute;
    header->userdata            = 0;
    header->samplerate          = 8000<<16;
    header->samplesize          = 16;
    header->numchannels         = 1;
    header->interleavecode      = NULL;
    header->isinterleaved       = 0;
    header->streamtype          = 0;
}

static void ra4(ra_header_t *header, char *ptr, char *end) {

  int revision, id, size, headerversion, headerrevision, headerbytestotal;
  char *temp, *headerend;
  bool found;

  revision = int16(ptr);
  if (revision != 0) {
    Error("Invalid RA 4 revision: %d", revision);
    return;
  }

  found = false;;
  while ((ptr+8 <end) && (!found)) {
    id   = int32(ptr);
    size = int32(ptr);
    if (size<0) {
      Error("Corrupted chunk found in header!");
    }
    switch (id) {
      case RA3TOKEN:
        found = true;
        Error("Embedded RA3 file found!");
        break;
      case RA4TOKEN:
        found = true;
        break;
      default:
        ptr += size;
        break;
    }
  }
  if (!found) {
    Error("No Header found!");
  } else {
    /* Now we can FINALLY get the header contents */
    if (id == RA3TOKEN) {
      ra3(header, ptr, end);
    } else {
      headerversion               = int16(ptr);
      headerrevision              = int16(ptr);
      headerbytestotal            = int16(ptr);
      headerend                   = ptr - 6 + headerbytestotal;
      header->compressiontype     = int16(ptr);
      header->granularity         = int32(ptr);
      header->bytestotal          = int32(ptr);
      header->bytesperminute      = int32(ptr);
      header->bytesperminute2     = int32(ptr);
      header->interleavefactor    = int16(ptr);
      header->interleaveblocksize = int16(ptr);
      header->userdata            = int32(ptr);
      header->samplerate          = int32(ptr);
      header->samplesize          = int16(ptr);
      header->numchannels         = int16(ptr);
      temp=ptr;
      header->interleavecode      = countedstring(&ptr);
      ptr=temp+5;
      header->compressioncode     = countedstring(&ptr);
      ptr=temp+10;
      header->isinterleaved       = int8(ptr);
      header->copybyte            = int8(ptr);
      header->streamtype          = int8(ptr);
      header->title               = countedstring(&ptr);
      header->author              = countedstring(&ptr);
      header->copyright           = countedstring(&ptr);
      header->app                 = countedstring(&ptr);
      header->dataoffset          = (int)headerend;//(int) ptr;
    }
  }
}

void RAHeaderExtract(ra_header_t *header, data_t data) {

  char *ptr, *end;
  int magic, intnum;

  ptr = data.buf;
  end = ptr + data.size;
  if (ptr == NULL)
    Error("Null header!");

  /* Boom! Its my Magic number */
  magic = int32(ptr);
  if (magic != RAMAGIC) {
    Error("Not a RealAudio file! %d %d",magic, ptr);
    return;
  }

  header->file_version = int16(ptr);
  switch (header->file_version) {
    case 3:
      ra3(header, ptr, end);
      break;
    case 4:
      ra4(header, ptr, end);
      break;
    default:
      Error("Unsupported RA version: %d", header->file_version);
      break;
  }
  /* Now the calculations... */
  header->dataoffset -= (int) data.buf;

  /* First identify which interleaver is being used */
  intnum = 0;
  if (strcmp("Int3", header->interleavecode) == 0)
    intnum = 3;
  if (strcmp("Int4", header->interleavecode) == 0)
    intnum = 4;
  if (strcmp("Int5", header->interleavecode) == 0)
    intnum = 5;
  if (strcmp("sipr", header->interleavecode) == 0)
    intnum = 6;

  header->transsize        = header->interleaveblocksize;
  header->scramsize        = header->granularity;
  if (intnum == 3) {
    header->transsize        = 240;
    header->interleavefactor = 12;
  } else if (intnum == 5) {
    header->interleavefactor = 8;
  }
  header->interleaver = intnum;
  /* PHBG: swapped order of following two lines */
  header->supersize = header->transsize * header->interleavefactor;
  header->nobps     = header->supersize / header->scramsize;
  /* For now lets do 1 superblock per chunk */
  /* At typical 28.8 thats about 1.5 sec chunks */
  header->trans_per_chunk = header->interleavefactor;
  if(header->trans_per_chunk == 1)
      header->trans_per_chunk = 12;
  header->replaychunksize = header->transsize * header->trans_per_chunk;
  header->real_replaychunksize = header->replaychunksize;
  if (intnum == 6) {
    header->real_replaychunksize += 6*sizeof(int);
  }
  header->nchunks = header->bytestotal ?
                        (header->bytestotal + header->replaychunksize-1)
                                              / header->replaychunksize
                      : -1;

  /* Attempt to make frames per second = 25 */

  header->fpc = 25 * header->replaychunksize * 60 / header->bytesperminute;
  header->chunktime = scale(header->replaychunksize,
                            60000, header->bytesperminute);
}

void RAHeaderFree(ra_header_t *header) {
  Free(header->title);
  Free(header->author);
  Free(header->copyright);
  Free(header->app);
  Free(header->interleavecode);
  Free(header->compressioncode);
}

data_t RAHeaderReadFile(int fhandle) {

  data_t data;
  _kernel_swi_regs r;

  data.buf  = Malloc(2048);
  data.size = 2048;

  r.r[0] = 3;
  r.r[1] = fhandle;
  r.r[2] = (int) data.buf;
  r.r[3] = 2048;
  r.r[4] = 0;
  _kernel_swi(OS_GBPB, &r, &r);
  return data;
}
