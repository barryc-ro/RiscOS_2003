/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 17/3/97: Initial version
*/

#include <string.h>
#include "memory.h"
#include "error.h"
#include "audiohdr.h"
#include "raheader_t.h"
#include "interleave.h"

#include "chpres.h"

struct chunk_presentor_s
{
    int desc_sel;
    chunk_desc_t *desc[2];
    audio_hdr_t ahdr[2];
    ra_header_t *info;
};


chunk_presentor_t Chpres(ra_header_t *info)
{
    chunk_presentor_t chp;
    int i, n;

    chp = Malloc(sizeof(*chp));
    chp->info = info;
    chp->ahdr[0].rate = chp->ahdr[1].rate = info->samplerate;
    chp->ahdr[0].granularity = chp->ahdr[1].granularity = info->scramsize;
    chp->desc_sel   = 0;
    if (info->interleaver == 6) {
      /* If we are using interleaver 6 (SIPR) then we have just 2 blocks */
      /* in the list returned from the fetch */
      n = 2;
      chp->desc[0] = Malloc(sizeof(int)+sizeof(data_t)*n);
      chp->desc[1] = Malloc(sizeof(int)+sizeof(data_t)*n);
      chp->desc[0]->count = n;
      chp->desc[1]->count = n;
      chp->desc[0]->part[0].buf = &chp->ahdr[0];
      chp->desc[0]->part[0].size = sizeof(audio_hdr_t);
      chp->desc[1]->part[0].buf = &chp->ahdr[1];
      chp->desc[1]->part[0].size = sizeof(audio_hdr_t);
      i = 1; /* Unusually, we don't want this warning from Norcroft... */
      chp->desc[0]->part[i].buf = Malloc(info->transsize*6+6*sizeof(int));
      chp->desc[0]->part[i].size = info->transsize*6+6*sizeof(int);
      chp->desc[1]->part[i].buf = Malloc(info->transsize*6+6*sizeof(int));
      chp->desc[1]->part[i].size = info->transsize*6+6*sizeof(int);
    } else {
      n = (info->replaychunksize / info->supersize) * info->nobps;
      if(n < info->trans_per_chunk)
        Error("Header info inconsistant");
      n += 1; /* Make room for header */
      chp->desc[0] = Malloc(sizeof(int)+sizeof(data_t)*n);
      chp->desc[1] = Malloc(sizeof(int)+sizeof(data_t)*n);
      chp->desc[0]->count = n;
      chp->desc[1]->count = n;
      chp->desc[0]->part[0].buf = &chp->ahdr[0];
      chp->desc[0]->part[0].size = sizeof(audio_hdr_t);
      chp->desc[1]->part[0].buf = &chp->ahdr[1];
      chp->desc[1]->part[0].size = sizeof(audio_hdr_t);
      for (i=1; i<n; i++) {
        chp->desc[0]->part[i].size = info->scramsize;
        chp->desc[1]->part[i].size = info->scramsize;
      }
    }
    return chp;
}

void ChpresFree(chunk_presentor_t chp)
{
    int i;

    i = 1;
    if (chp->info->interleaver == 6) {
      Free(chp->desc[0]->part[i].buf);
      Free(chp->desc[1]->part[i].buf);
    }
    Free(chp->desc[0]);
    Free(chp->desc[1]);
    Free(chp);
}

chunk_desc_t *ChpresPresent(chunk_presentor_t chp, int n, char *buf)
{
    int top, tsize, csize;
    ra_header_t *hdr;
    chunk_desc_t *desc;

    hdr = chp->info;
    csize = hdr->replaychunksize;
    tsize = hdr->transsize;
    top = hdr->bytestotal ? hdr->bytestotal - n*csize
                          : csize;
    if(top < tsize) {
        return &EndDesc;
    }
    if(top > csize)
        top = csize;
    chp->desc_sel = 1 - chp->desc_sel;
    chp->ahdr[chp->desc_sel].length = top;
    desc = chp->desc[chp->desc_sel];
    if (chp->info->interleaver == 6) {
      Deinterleave6(hdr, buf, &desc->part[1]);
    } else {
      Deinterleave(hdr, buf, &desc->part[1]);
    }
    return desc;
}

chunk_desc_t *ChpresPresentPatch(chunk_presentor_t chp, int n, char **bp)
{
    int top, tsize, csize;
    ra_header_t *hdr;
    chunk_desc_t *desc;

    hdr = chp->info;
    csize = hdr->replaychunksize;
    tsize = hdr->transsize;
    top = hdr->bytestotal ? hdr->bytestotal - n*csize
                          : csize;
    if(top < tsize) {
        return &EndDesc;
    }
    if(top > csize)
        top = csize;
    chp->desc_sel = 1 - chp->desc_sel;
    chp->ahdr[chp->desc_sel].length = top;
    desc = chp->desc[chp->desc_sel];
    if (chp->info->interleaver == 6) {
      Deinterleave6Indexed(chp->info, bp, &desc->part[1]);
    } else {
      DeinterleaveIndexed(chp->info, bp, &desc->part[1]);
    }
    return desc;
}

chunk_desc_t EmptyDesc = {0};
chunk_desc_t EndDesc = {-1};
