/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 20/12/96: Initial version
*/

#include <string.h>
#include "error.h"
#include "memory.h"
#include "tcp.h"
#include "queue.h"

//#define QUEUE_SIZE (1024)
#define QUEUE_SIZE (2048)

struct queue_s
{
    char buf[QUEUE_SIZE];    /* buf can probably be dropped in the future */
    int start, len;          /* if the tcp interface is updated to take   */
};                           /* advantage of the look-ahead provided by   */
                             /* sockets.                                  */

queue_t QueueOpen(void)
{
    queue_t q;

    q = Malloc(sizeof(*q));
    q->start = q->len = 0;
    return q;
}

void QueueClose(queue_t q)
{
    Free(q);
}

int QueueAtLeast(int size, queue_t q, tcp_conn_t conn)
{
    int responsive, n;

    if(size <= q->len)
        return 1;
    if(size > QUEUE_SIZE)
        Error("Deadlock due to inadequate queue size");
    if(q->start != 0)
    {
        memcpy(q->buf, q->buf + q->start, q->len);
        q->start = 0;
    }
    responsive = 1;
    while(q->len < QUEUE_SIZE && responsive)
    {
        n = TcpRead(q->buf + q->len, QUEUE_SIZE - q->len, conn);
        if(n == 0)
            responsive = 0;
        else
            q->len += n;
    }
    return size <= q->len;
}

char *QueueReadPos(queue_t q)
{
    return q->buf + q->start;
}

void QueueDrop(int n, queue_t q)
{
    if(n > q->len)
    {
        Error("Attempt to drop more off a queue than it conatins (bug)");
        return;
    }
    q->start += n;
    q->len -= n;
}
