/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG  13/1/97: Initial version
    PHBG  14/1/97: Rewritten to be cyclic buffered rather than double
                   buffered, and to hand entry points over to the PNA
                   module.
    RJW   16/1/97: Added Interleaving, and retrieve chunking from (more
                   persistent) header information.
    PHBG  28/1/97: Made to seek correctly, or as near as is possible given
                   Progressive Networks strange decision to specify seeks
                   in units for which chunks are not an integer multiple,
                   and then actually make the seek go to non chunk
                   boundaries.  But its their baby, so I guess they can
                   do what they like, even if it is really really stupid.
    PHBG   8/2/97: Allow for out of sequence fill, and add flow control.
                   Needed for UDP.
    PHBG   8/2/97: Complete rewrite, because my first attempt was crap, and
                   made me understand Progressive network's clever queue of
                   pointers abstraction.  Less likely to be bugged this way.
    PHBG  17/3/97: Moved chunk presentation into separate class.
*/

#include <stdio.h>
#include <string.h>
#include "options.h"
#include "error.h"
#include "memory.h"
#include "safeputc.h"
#include "pqueue.h"

#include "chunk.h"

#define MIN_START (4)
#define LOW_WATER (6)
#define HIGH_WATER (10)
#define MAX_BUFFS (14)
#define BIG_MIN_START (MIN_START + 3)

#define MAX_QUEUE (32)


struct chunk_buf_s
{
    pna_handle_t  pna;
    ra_header_t  *info;
    int           n;         /* First replay chunk in queue */
    int           eaten;
    int           base;
    int           level;
    int           min_start, low_water, high_water, max;
    int           streaming;
    int           buffering;
    int           max_factor;
    int           eof;
    pqueue_t      pqueue;
    chunk_presentor_t chpres;
};

typedef struct
{
    int count;
    char *buf;
    char **buf_ptr;
} *chunk_t;

static chunk_t make_chunk(ra_header_t *info)
{
    chunk_t res;

    res = Malloc(sizeof(*res));
    res->buf = Malloc(info->trans_per_chunk * info->transsize);
    res->buf_ptr = Malloc(info->trans_per_chunk * sizeof(char *));
    return res;
}

static void free_chunk(chunk_t chunk)
{
    Free(chunk->buf);
    Free(chunk->buf_ptr);
    Free(chunk);
}

static void zero_chunk(ra_header_t *info, chunk_t chunk)
{
    int i;

    chunk->count = 0;
    for(i = 0; i < info->trans_per_chunk; i++)
        chunk->buf_ptr[i] = NULL;
}

static chunk_buf_t make_chb(pna_handle_t pna)
{
    chunk_buf_t chb;
    int i;

    chb             = Malloc(sizeof(*chb));
    chb->pna        = pna;
    chb->info       = PnaInfo(pna);
    chb->n          = 0;
    chb->eaten      = 0;
    chb->base       = 0;
    chb->level      = 0;
    chb->min_start  = PnaCanResend(pna) ? BIG_MIN_START : MIN_START;
    chb->low_water  = LOW_WATER;
    chb->high_water = HIGH_WATER;
    chb->max        = MAX_BUFFS;
    chb->streaming  = 0;
    chb->buffering  = 0;
    chb->max_factor = PnaTransport(pna) == TRANSPORT_TCP ? 1 : 2;
    chb->eof        = 0;
    chb->pqueue     = PQueue(MAX_QUEUE);
    for(i = 0; i < chb->max; i++)
        PQueuePush(chb->pqueue, make_chunk(chb->info));

    chb->chpres = Chpres(chb->info);
    return chb;
}

static void start_streaming(chunk_buf_t chb)
{
    if(!chb->streaming)
    {
        PnaPlay(chb->pna, 1);
        chb->streaming = 1;
#if DEBUG || BENH
        printf(" On ");
#endif
    }
}

static void stop_streaming(chunk_buf_t chb)
{
    if(chb->streaming)
    {
        PnaPlay(chb->pna, 0);
        chb->streaming = 0;
#if DEBUG || BENH
        printf(" Off ");
#endif
    }
}

static void seek(chunk_buf_t chb, int n)
{
    chb->n = n;
    chb->eaten = 0;
    chb->level = 0;
    chb->buffering = 1;
    PnaSeek(chb->pna, chb->info->chunktime * n);
    start_streaming(chb);
}

static void drop_first_chunk(chunk_buf_t chb)
{
    chunk_t chunk;

    chunk = PQueuePop(chb->pqueue);
    zero_chunk(chb->info, chunk);
    PQueuePush(chb->pqueue, chunk);
    chb->n++;
    chb->base += chb->info->trans_per_chunk;
    chb->level--;
}

static void reset(void *obj, int sequence)
{
    chunk_buf_t chb;
    int i;

    chb = (chunk_buf_t) obj;
    chb->base = sequence;
    for(i = 0; i < chb->max; i++)
        zero_chunk(chb->info, PQueueLook(chb->pqueue, i));
}

static int samples(void *obj, data_t data, int sequence)
{
    chunk_buf_t chb;
    chunk_t chunk;
    int index, pos;

    chb = (chunk_buf_t) obj;
    if(data.size > chb->info->transsize)
        return 1;
    sequence -= chb->base;
    if(sequence < 0)
    {
#if BENH
    printf(" Late ");
#endif
        return 1;  /*  Late arrival - throw it */
    }
    index = sequence / chb->info->trans_per_chunk;
    pos = sequence % chb->info->trans_per_chunk;
#if BENH
    printf("%3d", pos);
    if(index < chb->eaten)
        printf(" Late ");
#endif
    chb->level = index;
    if(index >= chb->min_start)
    {
#if DEBUG || BENH
        if(chb->buffering)
            printf(" Buf off ");
#endif
        chb->buffering = 0;
        chb->min_start = BIG_MIN_START;
    }
    if(index >= chb->high_water)
        stop_streaming(chb);
    if(index >= chb->max)
    {
#if BENH
    printf(" Early arrival ");
#endif
        return 0;  /*  Early arrival - hold off (works for TCP only) */
    }

    chunk = PQueueLook(chb->pqueue, index);
    if(chunk->buf_ptr[pos] == NULL)
    {
        chunk->count++;
        chunk->buf_ptr[pos] = chunk->buf + pos * chb->info->transsize;
        if(data.size < chb->info->transsize)
            memset(chunk->buf_ptr[pos], 0, chb->info->transsize);
        memcpy(chunk->buf_ptr[pos], data.buf, data.size);
    }
    return 1;
}

static void eof(void *obj)
{
    chunk_buf_t chb;

    chb = (chunk_buf_t) obj;
    chb->eof = 1;
    chb->buffering = 0;
}

static void inform_pna(pna_handle_t pna, chunk_buf_t chb)
{
    pna_receiver_t receiver;

    receiver.obj = chb;
    receiver.reset = reset;
    receiver.samples = samples;
    receiver.eof = eof;
    PnaReceiver(pna, receiver);
}


chunk_buf_t Chunk(pna_handle_t pna)
{
    chunk_buf_t chb;

    chb = make_chb(pna);
    inform_pna(pna, chb);
    chb->buffering = 1;
    start_streaming(chb);
    return chb;
}

void ChunkFree(chunk_buf_t chb)
{
    chunk_t chunk;

    ChpresFree(chb->chpres);
    while((chunk = PQueuePop(chb->pqueue)) != NULL)
        free_chunk(chunk);
    PQueueFree(chb->pqueue);
    Free(chb);
}

chunk_desc_t *ChunkFetch(chunk_buf_t chb, int n)
{
    chunk_t chunk;

    if(n < chb->n || n > chb->n + 2) /* Could look further */
    {
        seek(chb, n);
        return &EmptyDesc;
    }
    if(n == chb->n + 2)
    {
        drop_first_chunk(chb);
        if(chb->level < chb->low_water)
            start_streaming(chb);
    }
    if(chb->buffering) /* Big delay now, perhaps none later. */
        return &EmptyDesc;
    chunk = PQueueLook(chb->pqueue, n - chb->n);
    if(chunk->count * chb->max_factor >= chb->info->trans_per_chunk)
    {
#if BENH
        printf("\nFetch %3d%%\n", 100 * chunk->count / chb->info->trans_per_chunk);
#endif
        chb->eaten = n - chb->n + 1;
        return ChpresPresentPatch(chb->chpres, n, chunk->buf_ptr);
    }
    if(chb->eof)
    {
        if(n == chb->info->nchunks-1 && chunk->count > 0)
        {
#if BENH
        printf("\nFetch %3d%%\n", 100 * chunk->count / chb->info->trans_per_chunk);
#endif
            chb->eaten = n - chb->n + 1;
            return ChpresPresentPatch(chb->chpres, n, chunk->buf_ptr);
        }
        return &EndDesc;
    }
    if(!chb->streaming) /* It aint going to fill up on its own */
    {
#if DEBUG || BENH
        printf(" Seek ");
#endif
        seek(chb, n);
    }
    else
    {
#if DEBUG || BENH
        printf(" Buf on ");
#endif
        chb->buffering = 1;
    }
    return &EmptyDesc;
}
