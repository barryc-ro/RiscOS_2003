/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 21/7/97: Initial version
*/

#include <string.h>
#include "error.h"
#include "memory.h"
#include "data.h"
#include "rmheader.h"

#define RA_HEADER                    0x2E7261FD // '.raý'
#define RM_HEADER_OBJECT             0x2E524D46 // '.RMF'
#define RM_PROPERTIES_OBJECT         0x50524F50 // 'PROP'
#define RM_MEDIA_PROPERTIES_OBJECT   0x4D445052 // 'MDPR'
#define RM_CONTENT_OBJECT            0x434F4E54 // 'CONT'
#define RM_DATA_OBJECT               0x44415441 // 'DATA'
#define RM_INDEX_OBJECT              0x494E4458 // 'INDX'

struct rmheader_s
{
    data_t hdr;
    int    n_streams, i_streams, audio_stream;
};

#define int32(p) ((((unsigned char *)p)[0] << 24) | (((unsigned char *)p)[1] << 16) | (((unsigned char *)p)[2] << 8) | ((unsigned char *)p)[3])

#define int16(p) ((((unsigned char *)p)[0] << 8) | ((unsigned char *)p)[1])

rmheader_t RMHeader(void)
{
    rmheader_t rm;

    rm = Malloc(sizeof(*rm));
    rm->hdr.buf = NULL;
    rm->hdr.size = 0;
    rm->n_streams = -1;
    rm->i_streams = 0;
    rm->audio_stream = -1;
    return rm;
}

void RMHeaderDestruct(rmheader_t rm)
{
    if(rm->hdr.buf)
        Free(rm->hdr.buf);
    Free(rm);
}

int RMHeaderParse(rmheader_t rm, data_t data)
{
    int len, size;
    char *buf;

    buf = data.buf;
    size = int32(buf+4);
    switch(int32(buf))
    {
        case RA_HEADER:
            rm->hdr.buf = Malloc(data.size);
            rm->hdr.size = data.size;
            memcpy(rm->hdr.buf, data.buf, data.size);
            rm->n_streams = 1;
            rm->i_streams = 1;
            rm->audio_stream = 0;
            break;
        case RM_HEADER_OBJECT:
            break;
        case RM_PROPERTIES_OBJECT:
            rm->n_streams = int32(buf + 0x2C);
            break;
        case RM_MEDIA_PROPERTIES_OBJECT:
            buf += 0x28;
            len = *buf++; buf += len;
            len = *buf++; buf += len;
            data.size = int32(buf); buf += 4;
            if(int32(buf) == RA_HEADER)
            {
                rm->hdr.buf = Malloc(data.size);
                rm->hdr.size = data.size;
                memcpy(rm->hdr.buf, buf, data.size);
                rm->audio_stream = rm->i_streams;
            }
            rm->i_streams++;
            break;
        case RM_CONTENT_OBJECT:
            break;
        case RM_DATA_OBJECT:
            break;
        case RM_INDEX_OBJECT:
            break;
    }
    return size;
}

int RMHeaderComplete(rmheader_t rm)
{
    return rm->n_streams == rm->i_streams;
}

int RMHeaderAudioStream(rmheader_t rm)
{
    return rm->audio_stream;
}

data_t RMHeaderAudio(rmheader_t rm)
{
    return rm->hdr;
}

packet_reader_t RMHeaderExtract(rmheader_t rm, data_t buf) {

    int n;
    data_t hdr;
    int had_data = 0;
    int data_off = 0;
    char *buffer;

    if (int32(buf.buf) == RA_HEADER) {
      /* Its a RealAudio file */
      RMHeaderParse(rm, buf);
      return NULL;
    } else {
      if (int32(buf.buf) != RM_HEADER_OBJECT)
        Error("Not a RealMedia file!");
      buffer = buf.buf;
      while (!had_data) {
        //printf("%c%c%c%c\n", buffer[0], buffer[1], buffer[2], buffer[3]);
        hdr.size = int32(buffer+4);
        hdr.buf = buffer;
        n = RMHeaderParse(rm, hdr);
        //printf("<\n");
        if (int32(hdr.buf) == RM_DATA_OBJECT) {
          had_data = 1;
        } else {
          buffer += n;
          data_off += n;
        }
      }
      return PacketReader(data_off, rm->audio_stream);
    }
}
