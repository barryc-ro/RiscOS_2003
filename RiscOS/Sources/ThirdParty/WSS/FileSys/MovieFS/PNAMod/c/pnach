/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 29/1/97: Initial version
*/

#include "error.h"
#include "pna.h"
#include "chunk.h"
#include "pnach.h"
#include "netpnach.h"
#include "filepnach.h"
#include "httppnach.h"

typedef enum {
  CONN_REMOTE,
  CONN_LOCAL,
  CONN_HTTP,
  CONN_MAX
} pnach_conn_t;

static pnach *conns[CONN_MAX];

struct pnach_handle_s {
  pnach                  *type;
  pnach_generic_handle_t  handle;
};

void PnaChInit(void) {

  int j;

  conns[CONN_REMOTE] = &NetPnaCh;
  conns[CONN_LOCAL]  = &FilePnaCh;
  conns[CONN_HTTP]   = &HttpPnaCh;
  for (j = 0; j < CONN_MAX; j++) {
    conns[j]->init();
  }
}

void PnaChFin(void) {

  int j;

  for (j = 0; j < CONN_MAX; j++) {
    conns[j]->fin();
  }
}


pnach_handle_t PnaChOpen(char *url)
{
    int j;
    volatile pnach_handle_t p;

    ExceptTry
    {
      p = NULL;
      p = (pnach_handle_t) Malloc(sizeof(struct pnach_handle_s));
      p->handle = NULL;
      for (j = 0; (j < CONN_MAX) && (p->handle == NULL); j++) {
        p->type = conns[j];
        p->handle = conns[j]->open(url);
      }

      if (p->handle == NULL) {
        Error("Unrecognised URL");
      }
    }
    ExceptCatch
    {
        if(p) Free(p);
        ExceptRethrow();
    }

    return p;
}

void PnaChClose(pnach_handle_t pnach)
{
    pnach->type->close(pnach->handle);
    Free(pnach);
}

conn_state_t PnaChState(pnach_handle_t pnach)
{
    return pnach->type->state(pnach->handle);
}

void PnaChService(pnach_handle_t pnach)
{
    pnach->type->service(pnach->handle);
}

chunk_desc_t *PnaChFetch(pnach_handle_t pnach, int n)
{
    return pnach->type->fetch(pnach->handle, n);
}

ra_header_t *PnaChInfo(pnach_handle_t pnach)
{
    return pnach->type->info(pnach->handle);
}

char *PnaChError(pnach_handle_t pnach)
{
    return pnach->type->error(pnach->handle);
}

char *PnaChAddress(pnach_handle_t pnach)
{
    return pnach->type->address(pnach->handle);
}

char *PnaChResource(pnach_handle_t pnach)
{
    return pnach->type->resource(pnach->handle);
}

data_t PnaChHeader(pnach_handle_t pnach)
{
    return pnach->type->header(pnach->handle);
}
