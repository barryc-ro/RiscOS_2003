/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 29/1/97: Initial version
*/

#include "nocasecmp.h"
#include "error.h"
#include "safeputc.h"
#include "options.h"
#include "http.h"
#include "httpchunk.h"
#include "pnach.h"

// ((void(*)(void))0)();

struct httppnach_handle_s
{
    http_handle_t http;
    httpchunk_buf_t chb;
};

typedef struct httppnach_handle_s *httppnach_handle_t;

static void httpPnaChInit(void) {

    HttpInit();
}

static void httpPnaChFin(void) {

    HttpFin();
}

static pnach_generic_handle_t httpPnaChOpen(char *url)
{
    httppnach_handle_t pnach;

    if (nocasecmp(url, "http:/", 6) != 0)
        return NULL;
    pnach = Malloc(sizeof(*pnach));
    ExceptTry
    {
        pnach->http = HttpOpen(url);
        pnach->chb = NULL;
    }
    ExceptCatch
    {
        Free(pnach);
        ExceptRethrow();
    }
    return (pnach_generic_handle_t) pnach;
}

static void httpPnaChClose(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    if(pnach->http) HttpClose(pnach->http);
    if(pnach->chb) HttpChunkFree(pnach->chb);
    Free(pnach);
}

static conn_state_t httpPnaChState(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;
    conn_state_t state;

    pnach = (httppnach_handle_t) p;
    state = HttpState(pnach->http);
    if(state == CONN_STATE_READY && pnach->chb == NULL)
        pnach->chb = HttpChunk(pnach->http);
    return state;
}

static void httpPnaChService(pnach_generic_handle_t p)
{
    HttpService(((httppnach_handle_t)p)->http);
}

static chunk_desc_t *httpPnaChFetch(pnach_generic_handle_t p, int n)
{
    httppnach_handle_t pnach;
    chunk_desc_t *res;

    pnach = (httppnach_handle_t) p;
    if(pnach->chb == NULL)
        Error("Attempt to fetch data without connection");
    if(HttpState(pnach->http) == CONN_STATE_FAILED) {
        return &EndDesc;
    }
    #if DEBUG
    safeputstr("[");
    #endif
    res = HttpChunkFetch(pnach->chb, n);
    #if DEBUG
    safeputstr("]");
    #endif
    return res;
}

static ra_header_t *httpPnaChInfo(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    return HttpInfo(pnach->http);
}

static char *httpPnaChError(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    return HttpError(pnach->http);
}

static char *httpPnaChAddress(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    return HttpAddress(pnach->http);
}

static char *httpPnaChResource(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    return HttpResource(pnach->http);
}

static data_t httpPnaChHeader(pnach_generic_handle_t p)
{
    httppnach_handle_t pnach;

    pnach = (httppnach_handle_t) p;
    return HttpHeader(pnach->http);
}

pnach HttpPnaCh = {
  httpPnaChInit,
  httpPnaChFin,
  httpPnaChOpen,
  httpPnaChClose,
  httpPnaChState,
  httpPnaChService,
  httpPnaChFetch,
  httpPnaChInfo,
  httpPnaChError,
  httpPnaChAddress,
  httpPnaChResource,
  httpPnaChHeader,
};
