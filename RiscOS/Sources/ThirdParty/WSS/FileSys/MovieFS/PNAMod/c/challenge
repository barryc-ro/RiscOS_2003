/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW  4/2/97: Initial version
 */

#include "md5.h"
/* #include "challenge.h" */
#include <string.h>
/* Problems for Termite? */
#include "sys/time.h"
#include "unixlib.h"

/*
 * Both the server and the player create their own challenge.
 * Player sends its challenge to the server.  Server runs
 * response1() on it and sends back response1 as well as its own
 * challenge.  Player runs response1 on its origial challenge
 * with some new parameters (obtained from the server) and compares
 * the two responses.  If same, it prepares response2() and sends
 * it back.  The server will run response2 on its challenge
 * and compare the responses.  If either fails the connection
 * is broken.
 */

extern const unsigned char pMagic1[];

#define min(x,y) (x < y ? x : y)

static void putint(unsigned char *c, int i) {
  *c++ = (unsigned char)(i>>24);
  *c++ = (unsigned char)(i>>16);
  *c++ = (unsigned char)(i>>8);
  *c++ = (unsigned char)(i);
}

static int get_time_key(void)
{
  struct timeval tv;

  gettimeofday(&tv,0);
  return((int) (tv.tv_sec/*^tv.tv_usec*/));
}

void ChallengeReply(char *text, char *challenge, int len) {

  /* assert len <= 32 */
  memcpy(text, challenge, len);
  text[len] = 0;
}

void Challenge(char *text) {

  unsigned char key[64];
  int k1, len;

  memset(key, 0, sizeof(char)*64);
  k1 = get_time_key();
  putint(key, k1);
  putint(key+4, k1);
  len = min(56,strlen((char*)pMagic1));
  memcpy(key+8, pMagic1, len);
  MD5Data(text, key, 64);
}

#if 0
void Challenge(char * text, int k1, int k2, char *k3, char *k4) {

  char key[64];

  memset(key, 0, sizeof(key));
  putint(key, k1);
  putint(key+4, k1);
  if (k3)
    memcpy(key+8, k3, min(56, strlen(k3));
  if (k4) {
    char *bp = key+8;
    for (int i = 0; i < min(56, strlen(k4)); i++)
      *bp++ ^= k4[i];
  }
  MD5Data(text, key, 64);
}
#endif

void ChallengeResponse1(char *response, char *k1, char *k2, int k3, int k4) {

  unsigned char key[64];
  int i;
  char *bp;

  memset(key, 0, sizeof(key));
  putint(key, k3);
  putint(key+4, k4);
  if (k1)
    memcpy(key+8, k1, min(56,strlen(k1)));
  if (k2) {
    bp = (char *) (key+8);
    for (i = 0; i < min(56,strlen(k2)); i++)
      *bp++ ^= k2[i];
  }
  MD5Data(response, key, 64);
}

void ChallengeResponse2(char *response, char *k1, char *k2, int k3, int k4) {

  unsigned char key[64];
  int i;
  char *bp;

  memset(key, 0, sizeof(key));
  putint(key, k3);
  putint(key+4, k4);
  if (k1)
    memcpy(key+8, k1, min(56,strlen(k1)));
  if (k2) {
    bp = (char *) key+8;
    for (i = 0; i < min(56,strlen(k2)); i++)
      *bp++ ^= k2[i];
  }
  MD5Data(response, key, 64);
}
