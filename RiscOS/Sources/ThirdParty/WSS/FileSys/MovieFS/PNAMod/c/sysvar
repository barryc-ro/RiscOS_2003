#include "kernel.h"
#include "swis.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "error.h"
#include "sysvar.h"

char *VarRead(char *var)
{
    _kernel_swi_regs r;
    int len;
    char *buf;

    r.r[0] = (int) var;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 3;
    _kernel_swi(OS_ReadVarVal, &r, &r);
    if(r.r[2] == 0)
        return NULL;
    len = ~(r.r[2]);
    buf = Malloc(len + 1);
    if(buf == NULL)
    {
        Error("Insufficient memory to read variable");
        //return "";
    }
    r.r[0] = (int) var;
    r.r[1] = (int) buf;
    r.r[2] = len + 1;
    r.r[3] = 0;
    r.r[4] = 3;
    _kernel_swi(OS_ReadVarVal, &r, &r);
    buf[len] = 0;
    return buf;
}

void VarSet(char *var, char *str)
{
    _kernel_swi_regs r;

    r.r[0] = (int) var;
    r.r[1] = (int) str;
    r.r[2] = strlen(str);
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_SetVarVal, &r, &r);
}

int VarReadInt(char *var) {

  char *buf;
  char buf2[10];
  int i;

  buf = VarRead(var);
  i = atoi(buf);
  sprintf(buf2, "%d\0", i);
  VarSet(var, buf2);
  Free(buf);
  return i;
}

void VarSetInt(char *var, int val) {

  char buf[10];

  sprintf(buf, "%d\0", val);
  VarSet(var, buf);
}
