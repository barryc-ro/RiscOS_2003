/*
 *	pna.h
 *
 *	PNM protocol specification. Included by both client
 *	and server code.
 *
 *	THIS DOCUMENT IS CONFIDENTIAL EXCEPT AS OTHERWISE NOTED.
 *	Part I may be shared with firewall, gateway and proxy-agent
 *	developers; part II must not be shared under any circumstances;
 *	no known circumstances justify sharing part III.
 *
 *	Numbers are unsigned unless otherwise specified. Numbers larger
 *	than 1 byte are in network byte order unless otherwise specified.
 *
 *	tb 9/94 -- 5/95
 *
 *	$Log$
 *	Revision 1.16.2.11.10.7  1997/10/29 01:32:10  stammen
 *	added support for pna_option_mobile_download
 *
 *	Revision 1.16.2.11.10.6  1997/10/25 01:08:29  stammen
 *	added support for version 1 authentication
 *
 *	Revision 1.16.2.11.10.5  1997/09/08 07:50:25  brad
 *	added first cut at "back channel" message in PNA
 *
 *	Revision 1.16.2.11.10.4  1997/09/05 14:37:49  stammen
 *	added secure player ID to PNA hello
 *
 *	Revision 1.16.2.11.10.3  1997/09/02 18:37:22  stammen
 *	added pna_option_player_starttime
 *
 *	Revision 1.16.2.11.10.2  1997/08/29 14:32:27  stammen
 *	added player authentication
 *
 *	Revision 1.16.2.11.10.1  1997/08/29 14:29:34  stammen
 *	added 38400 bw for pnrv.48 to support 56K modems
 *
 *	Revision 1.16.2.11  1997/06/06 12:55:00  stammen
 *	added new HTTP cloaking options (turned off) and code for sequenced bandwidth reports
 *
 *	Revision 1.16.2.10  1997/05/22 01:16:10  aurika
 *	changed pMagic1 and pMagic2 to unsigned char
 *
 *	Revision 1.16.2.9  1997/05/22 00:08:55  stammen
 *	added new challenge code
 *
 *	Revision 1.16.2.8  1997/05/09 02:13:48  stammen
 *	add pna_option_uuid to pna_hello message
 *
 *	Revision 1.16.2.7  1997/05/05 22:12:17  stammen
 *	fixed race conditions in HTTP POSTs writes
 *
 *	Revision 1.16.2.6  1997/05/05 15:18:21  stammen
 *	new http cloaking code that can use a separate POST for each command sent to the server
 *
 *	Revision 1.16.2.5  1997/04/18 21:33:35  stammen
 *	added pna protocol changes for stream thinning, bandwidth measurement, frame control and multiplayload UDP packets
 *
 *	Revision 1.16.2.4  1997/02/16 15:27:29  stammen
 *	added keyframe flowcontrol for RealMedia files with video
 *
 *	Revision 1.16.2.3  1997/01/29 22:50:09  stanb
 *	Live seek option implemented (bumping generation number).
 *
 *	Revision 1.16.2.2  1997/01/24 21:14:33  stammen
 *	removed #ifdef REAL_MEDIA from PNA_VERSION_BEST
 *
 *	Revision 1.16.2.1  1997/01/09 17:26:07  stanb
 *	Selective Record implementation for RealMedia.
 *
 *	Revision 1.17  1997/01/09 02:10:07  stanb
 *	Implementation of SelectiveRecord for RealMedia files.
 *
 *	Revision 1.16  1996/12/04 02:53:05  stammen
 *	added pna_force_perfect_play option
 *
 *	Revision 1.15  1996/10/10 12:36:53  brad
 *	started work on automatic transport switching
 *
 *	Revision 1.14  1996/10/05 00:48:28  jeffa
 *	removed warnings from all PC client targets and turned on warnings as errors
 *	in the makefiles
 *
 *	Revision 1.13  1996/09/23 18:07:30  stammen
 *	added Mac IP multicast support
 *
 *	Revision 1.12  1996/09/23 07:39:30  brad
 *	added Peter's multicast support
 *
 *
 */

#ifndef __PNA_DEFS_
#define __PNA_DEFS_

#define DEFAULT_BANDWIDTH		28800
#define MAX_POSSIBLE_BANDWIDTH		154400000		// T1 * 100
#define MAX_AUTHENTICATION_VERSION	1

/*
 *	Part I: NEGOTIATION (This section can be shared with
 *	firewall developers and other gateway application developers)
 *
 *	Section A: Hello Sequence
 *
 *	Both client and server send the hello sequence initially. The
 *	server need not send it until it has received the hello sequence
 *	(or even a complete request) from the client.
 */

#define PNA_HELLO_SEQUENCE "PNA"

// Section B: Protocol Revision Level

// The client next sends a two-byte protocol version number
// indicating the highest revision of the protocol that it supports.
//
// The server responds in kind after sending its own hello sequence,
// except that the version number need not be the same. If it is higher, the
// client must indicate to the user that it is out of date and refuse to
// operate with that server.
//
// (If backwards compatibility is possible, the server will
// specify a version equal to or lower than that requested by
// the client. The client should NOT second-guess this.)

#define PNA_PROXY_VERSION_BEST 	1
#define PNA_PROXY_VERSION_MIN 	1


// Best version supported in this implementation
// (version to ask for, if the client; max to
// respond with, if the server).
#define PNA_VERSION_BEST		10

// Oldest server protocol supported by this client
#define PNA_VERSION_MINIMUM		5


// Section C: Client option specification

// New in version 5. If the client requests a version less than 5,
// the server should skip the states responsible for parsing options.

// Each option sent by the client consists of a two-byte option ID, a
// two-byte length field, and as many bytes of data as are indicated by
// the length field. If the server does not recognize a particular option it
// can simply ignore it based on the option ID.
//
// The options section ends when an option ID of value 0 is encountered.
// (This end marker does NOT contain a length field.)

// Currently defined options and the end marker code.
enum {
	// End of options. Has no length field and no data.
	pna_options_end,  // 0x0
	// Requests that data be sent via UDP.
	// Data consists of a two-byte port address on the client
	// to which UDP packets should be transmitted. If this
	// option is not sent, audio data will be sent via TCP.
	pna_option_datagram,  // 0x1
	// Requests that interleaving not be used. No data (length 0x0000).
	pna_option_no_interleave,  //0x2

	// Used by a player to request one of a list of bandwidth, encodings
	// The option length is followed by an array of
	//      2 byte bandwidth (in units of 100byte/sec)
	//      4 byte encoding id
	// The array is ordered by the player from the most desirable
	// to the least desirable bw, encoding pair.
	// Length of the array can be inferred from the option length.
	pna_option_bw_encoding,  // 0x3

	// Used by a player to authenticate the server
	// more on this later....
	pna_option_challenge,  // 0x4

	// Used by a player to tell the server its maximum bandwidth
	// The option length is followed by a 4 byte value indicating
	// the bandwidth in (in units of 100byte/sec)
	pna_option_bandwidth,  // 0x5

	// Used by a player to tell the server it is requesting
	// PerfectPlay mode of delivery. Version 2.1 and later servers will respond
	// with the following pna_option_response message to indicate if PerfectPlay
	// is supported
	// opcode: pna_option_response                             1 byte
	// length: 3                                               1 byte
	// option: pna_option_perfectplay                          2 bytes
	// data:   1 =  perfectplay supported                      1 byte
	//         0 =  perfectplay not supported

	pna_option_perfectplay,  // 0x6

        // Used by a player to tell the server it might send
        // resend requests. Version 2.1 and later servers will respond
        // with the following pna_option_response message to indicate if
        // Resend is supported
        //      opcode: pna_option_response                            1 byte
        //      length: 3                                              1 byte
        //      option: pna_option_resend                              2 bytes
        //      data:   1 = resend supported                           1 byte
        //              0 = resend not supported
    pna_option_resend,  // 0x7

        // Used by a player to ask the server if it should send
        // additional statistics. Version 2.1 and later servers will respond
        // with the following pna_option_response message to indicate if
        // they want additional stats.
        //      opcode: pna_option_response                            1 byte
        //      length: 6                                              1 byte
        //      option: pna_option_stats                               2 bytes
        //      data:   level of stats				       4 byte
	//				0 = no stats  1 = stat1  2 = stat2 .......

	pna_option_stats,  // 0x8

// #ifdef MULTICAST
		// Used by a player to tell the server it can send multicast for a
		// live file if the server so desires.
		// The server will respond as follows
		//		opcode: pna_option_response		1 byte
		//		length: 6				1 byte
		//		option: pna_option_multicast		2 bytes
		//		data:	multicast_addr			4 bytes
		//		multicast_port				2 bytes

	pna_option_multicast,  // 0x9
// #endif //MULTICAST


        // Used by a server to tell the player to switch to use
        // perfectplay for this clip.
        //      opcode: pna_option_response				1 byte
        //      length: 2						1 byte
        //      option: pna_option_force_perfectplay            	2 bytes
    pna_option_force_perfectplay,  // 0xA

		// Used by a player to tell the server it might send
		// transport switch requests. If the client does not
		// support transport switching it does not send the
		// option to the server.  The option length is 0 and
		// is not followed by any additional data. Version 3.0
		// and later servers will respond with the following
		// pna_option_response message to indicate if transport
		// switching is supported.
		//
		//      opcode: pna_option_response			1 byte
		//      length: 3					1 byte
		//      option: pna_option_transport_switching		2 bytes
		//      data:   1 = transport switching supported	1 byte
		//              0 = transport switching not supported
    pna_option_transport_switching,  // 0xB

		// Used by a player to tell the server it needs
		// to receive with each packet the RealMedia flags
	        // associated with the packet.
		// The server will respond as follows
        	//      opcode:   pna_option_response                       1 byte
        	//      length:   2                                         1 byte
        	//      response: pna_send_packet_flags                     2 bytes

    pna_option_send_packet_flags,  // 0xC

		// Used by a player to tell the server it needs
		// generation number to be increased in this pause.
		// The server will respond as follows
	        //      opcode:   pna_option_response                       1 byte
       		//      length:   2                                         1 byte
       		//      response: pna_option_live_pause                     2 bytes

    pna_option_live_pause,  // 0xD

       // Used by the player to ask the server whether it supports
        // generic messages
        //      opcode: pna_option_reponse                              1 byte
        //      length: 2                                               1 byte
        //      response: pna_option_generic_messages                   2 bytes
    pna_option_generic_messages,  // 0xE

        // Used by the player to ask the server whether it supports
        // interframe control
        //      opcode: pna_option_response                             1 byte
        //      length: 2                                               1 byte
        //      response: pna_option_interframe_control                 2 bytes
    pna_option_interframe_control,  // 0xF

	// Used by the player to ask the server to send bandwidth reports
	//
	//
	pna_option_send_bandwidth_report,  // 0x10

	// Used by the player to tell the server that it supports
	// multiple PNA packets in a single UDP packet
	//	opcode: pna_option_response										1 byte
	//	length: 2														1 byte
	//	response: pna_option_composite_udp								2 bytes
	pna_option_composite_udp,  // 0x11

	// Used by the player to ask the server whether it supports
	// frame control. The Server response is:
	//      opcode: pna_option_response                        1 byte
	//      length: 2                                          1 byte
	//      response: pna_option_frame_control                 2 bytes
	pna_option_frame_control,  // 0x12

	// Used by the player to send its unique UUID to the server
	// 2 bytes 			pna_option_uuid
	// 2 bytes 			length
	// length bytes		uuid in ascii (not null terminated)
	pna_option_uuid,  // 0x13

    // Used by the player to tell the server which version of the
	// challenge it wants to use
	// 2 bytes: pna_option_challenge_version
	// 2 bytes: length (2)
	// 2 bytes: version
	pna_option_challenge_version,  // 0x14

   	// Used by the player to tell the server that it should send
   	// a sequence number with the badnwidth report.
	pna_option_sequenced_bandwidth_report,  // 0x15

	// Used by the player to tell the server that it supports authentication
	// 2 bytes: pna_option_authentication_support
	// 2 bytes: length (2)
	// 2 bytes: highest authentication version supported (currently == 0)
	// Note: the server does not need to send an option response for this option
	pna_option_authentication_support,  // 0x16

	// Used by the player to tell the server the time of day it is requesting the
	// clip.
	// 2 bytes: pna_option_player_starttime
	// 2 bytes: length of time string
	// length bytes: the time of day string in the format:
	//  	[DD/MMM/YYYY:HH:MM:SS ZONE]
	// Note: the string in not null terminated
	// Note: the server does not need to send an option response for this option
	pna_option_player_starttime,  // 0x17

	// Used by the player to tell the server what company created this client
	// 2 bytes: pna_option_company_id
	// 2 bytes: length of company ID string (== 32)
	// length bytes: company ID string
	// Note: the string in not null terminated
	// Note: this string is MD5 encrypted. See secure_plid.hmtl spec for more info
	pna_option_company_id,  // 0x18

	// Used by the player to tell the server to send the clip in mobile download mode
	pna_option_mobile_download,  // 0x19

	// Used by a server_player (a server connects as if it is a
	// player -- used by a splitter).  All such options start at 0x101
	pna_option_server= 0x101,

	// Used by an rafile client to verify its use on this server
	pna_option_rafile_password,  // 0x102

	// this item is used to mark the end of the option list and to avoid the
	// problem of some compilers (MWERKS) requiring the list to not end with
	// a comma
	pna_last_option
};

// Part II: SECURITY
// This section must remain PN CONFIDENTIAL

// New in version 5. If the client requests a version less than 5,
// the server must skip the states responsible for security.
// At some future date the server should simply drop connections
// at levels lower than 5 in order to reduce the number of
// outmoded clients, which pose the risk of providing
// reverse-engineering efforts with something to go on.

// 1. The client selects a 4-byte unsigned value at random
// and transmits this value to the server.
// 2. The server XORs this value, bit for bit, with the specified magic
// number (which must remain confidential).
// 3. The server transmits the XORed value back to the client.
// 4. The client XORs the received value with the magic number again
// and compares it to the value originally transmitted. If they match,
// the connection goes forward. Otherwise, the client disconnects
// from the server immediately.

#define MAGIC_NUMBER 0x67e32b93

// The version of the challenge method used by the player.
// All versions between 0 to PNA_CHALLENGE_VERSION should be supported
#define PNA_CHALLENGE_VERSION	1

// Challenge Version 1 defines
#define MAGIC1 0xc1d903e9
#define MAGIC2 0x150b4d28
#define MAGIC3 0x8d344d08
#define MAGIC4 0x75ffff18

extern const unsigned char pMagic1[];
extern const char pMagic2[];
extern const unsigned char pMagic3[];

// Part III: ONGOING COMMUNICATIONS
// The remainder of the protocol consists of messages from client
// to server and from server to client, which begin with message-
// identifying bytes and are structured as specified below.

// Audio data can be transmitted either by TCP or by UDP. When
// UDP is used, each datagram will contain a single audio block
// or end marker as specified below; TCP is still used for
// control purposes such as pause, resume, seek and requests
// for documents.

// More than one document can be requested in the course of
// a single session.

// The session is terminated by closing the TCP socket on either end.
// Both sides of the protocol must tolerate such closure at any time.

// Section A: Client-Server TCP Messages
enum {
	// From client. Followed by a two-byte URL length and a URL
	// (beginning with a leading slash at the top of the server, or a full
	// URL for proxy purposes).
	pna_request = 'R',
	// From server. Indicates that the requested item is not available.
	// No data.
	pna_request_failed = 'F',
	// From client. Indicates that the server should begin or
	// resume playback. No data.
	pna_begin = 'B',
	// From client. Indicates that the server should pause playback.
	// No data.
	pna_pause = 'P',
	// From server. Indicates the time
	// associated with the current position in the stream
	// as a four-byte unsigned integer
	// specifying tenths of seconds.
	pna_time = 'T',

	// From the server. Time since the start of a live broadcast.
	// 8 bytes follow in big-endian order as {seconds, microseconds}
	// bytes 0..3 seconds
	// bytes 4..7 microseconds
	// time resolution is at least one millisecond.
	pna_time_offset = '+',

	// From client. Two-byte negative time delta. Not currently used.
	pna_time_delta_minus = '-',
	// From server, sent when TCP-only audio delivery is in use.
	// Followed by a one-byte length (<= Protocol 6 ) or a two-byte length
	// (> Protocol 6 ) and the indicated number of bytes of audio.
	pna_audio = 'A',

	// From client. Requests movement to the specified four-byte
	// time position.
	pna_seek = 'S',

	// Alternate form of seek. A new four-byte time position
	// followed by the current four-byte time position being rendered
	// to the user. The server can avoid resending metadata events that
	// are in effect at both times. Allows events visible at both
	// times to be kept on the display.
	//
	pna_seek_from = 's',
	//
	// From server. Acknowledges one seek request. The server
	// will acknowledge every seek request made of it in turn.
	// Also see the generation number mechanism for UDP packets.
	//
	// This message contains no data.
	//
	pna_seekAck = 'a',
	//
	// From server. Indicates that the last block of audio data has
	// been sent. The server does not automatically close the connection
	// (the client may make additional requests or disconnect immediately
	// without further comment). Also see the UDP end packet.
	pna_end = 'E',
	// From server. Indicates the length of the data in tenths of
	// seconds (4 bytes). Redundant for RA sources, but not for
	// WAV sources.
	pna_length = 'L',
	// Format-type messages from server. pna_format_pn is followed
	// by a two- byte format length, and subsequently by
	// the contents of the RaFormat structure (packed,
	// see raf.h).
	//
	// pna_format_wav is followed by a two-byte format length
	// as specified above, and then by the
	// contents of the "fmt " chunk of the WAV. Not currently used.
	pna_format_ra = 'r',
	pna_format_wav = 'w',

	// BEGIN NEW IN VERSION 4
	// From server. Interleave factor. Used ONLY in datagram (UDP) mode.
	// This message is followed by a single byte indicating
	// the interleave factor, which defaults 1 if this
	// message is not sent. Interleave is only used with
	// UDP audio transmission (it serves no purpose with TCP).
	pna_interleave = 'i',
	//
	// From client. Followed by a two-byte length and a
	// log string. The log string will consist of printable
	// ASCII characters, not including line feeds or
	// carriage returns.
	pna_client_log = 'g',
	//
	// END NEW IN VERSION 4

	// From client. These messages turn on and off the sending of
	// noncritical ancillary data (events) to regulate bandwidth use.
	// Implemented in the server; not currently sendt by the client.
	pna_extras_ok = 'y',
	pna_extras_no = 'n',
	// From server. Followed by a start time, an end time, two bytes
	// of length information and the data itself. The begin and end
	// time requirements make it possible to properly determine what
	// events should be sent after a seek operation.
	pna_meta_event = 'e',
	//

	//
	// Server alert. Followed by a two-byte length indication
	// and the actual text. \n should be rendered as a
	// newline on the client side. Used sparingly to indicate
	// a problem of which the user should be immediately aware.
	// From server.
	//
	pna_server_alert = 'X',
	//
	// Client locale. Followed by a two-byte locale code
	// (currently locale 0 == US English is defined). From
	// client. Used to determine the best language for
	// server alerts, and potentially to select content. From client.
	//
	pna_client_locale = 'l',
	//
	// Client identification. Followed by a two-byte string length
	// and a string describing the client software. From client.
	//
	pna_client_id = 'c',
	//
	// Server identification. Followed by a two-byte string length
	// and a string describing the client software. From server.
	pna_server_id = 'v',
	//
	// BACKWARDS COMPATIBILITY ONLY:
	// IN VERSIONS LOWER THAN 5 ONLY
	// Request that interleave NOT be used; from the client,
	// prior to the beginning of audio. Replaced by an
	// option in the new option negotiation sequence.
	pna_no_interleave = 'I',
	//
	// From client; requests that audio be delivered in-band via TCP.
	// In version 5 and above, this is expressed through the absence of
	// the pna_option_datagram option. No data.
	//
	pna_tcp_request = 't',
	//
	// From client; used to indicate that the client is listening
	// for audio data on a datagram socket. The server must not
	// send audio data until either this message or pna_tcp_request
	// is received from the client (unless the protocol version
	// is greater than or equal to 5; see Part I).
	//
	// The client should begin listening for datagram data immediately
	// after sending this message, at the latest.
	//
	// Data: a two-byte unsigned port number on which the client
	// will listen for datagrams from this particular server.
	//
	pna_datagram_request = 'd',

	// New in VERSION 6
	// Can be sent by either side to see if the other side is still alive.
	pna_are_you_there = '?',

	// Sent in response to the previous message.
	pna_i_am_here = '!',

	// format: redirect, length, packet time, shutdown time, port, host
	// connect to the <host>:<port> pair as soon as possible since
	// the current server will shutdown <future time>/10 seconds
	// after delivering a packet with <packet time> time stamp
	pna_redirect = '@',

	// New in VERSION 8
	// format: pna_challenge, length, challenge_text
	// sent by the server in response to an earlier pna_option_challenge
	// from the player.  Also sent by the player in response to
	// an earlier pna_challenge from the server.
	pna_challenge = '#',

	// New in VERSION 9
	// When a player detects a missing packet, it sends a pna_resend
	// message to a version 9 or later server [note: it *must* not send
	// this message to version 8 or older servers].  The format of
	// the packet is as follows:
	// byte 1          pna_resend      (== 'M')
	// byte 2&3        sequence number of the missing audio packet in big-endian order.
	pna_resend = 'M',

	// New in VERSION 9
	// From server, sent when TCP-only data delivery is in use.
	// Followed by a two-byte length and the indicated number of bytes of data.
	// The data will be in RTTPSN_CONTENT format (see protocol.h)
	pna_raw_data = 'Z',

	// send to the player to respond to certain option requests. The
	// message is used to confirm if the option was accepted by the server
	// The message is in the following format:
	//
	// 		opcode: pna_option_response                             1 byte
	//		length: length of the option message                    1 byte
	//		option: option number being responded to                2 bytes
	//		data:   length - 2 bytes of option response data        length - 2 bytes
	pna_option_response = 'O',

	// Generic message opcode
    //
    // Generic messages look like this:
    // pna_generic_message                                  1 byte
    // length                                               2 bytes
    // pna_generic_opcode                                   2 bytes
    // data                                                 length bytes
    pna_generic_message = 'G',

	//
	// Report message
	// 2 bytes: time since last report in milliseconds
	// 4 bytes: bandwidth written to the net since the last report
	// if the server supports the pna_option_sequenced_bandwidth_report option
	// it will also send the following
	// 1 byte: sequence number
	pna_bandwidth_report = 'b',

	//
	// PNAvHTTP response message
	// 1 byte: error code
	//
	// PNA_HTTP_OK = 0
	// PNA_HTTP_GENERAL_ERROR = 1 // for any error that is not defined below
	// PNA_POST_NOT_RECEIVED = 2 // POST message was not received
	// PNA_INVALID_GUID = 3 // sent only if the GUID from the Player is already in use

	pna_http_response = 'H',

	// At the end of every post message send one byte
	pna_http_post_done = 'h',

	// When you shutdown the GET socket, you need to send another POST with
	pna_http_done = 'D',

	// From server. Authentication request
	// 1 byte: opcode = 'q'
	// 2 bytes: message length
	// 2 bytes: authentication version
	// message length - 1 bytes: authentication request data
	//
	// For authentication version == 0
	// message length = 1
	// authentication version = 0
	// 0 bytes: authentication data
	//
	// For authentication version == 1
	// message length = 1 + Realm Length + 8
	// authentication version = 1
	// 1 byte: Realm Length
  	// Variable              Realm String
  	// 4 Bytes               Nonce 1 (INT32)
  	// 4 Bytes               Nonce 2 (INT32)
	pna_authentication_request = 'q',

	// To Server. Authentication response
	// 1 byte: opcode
	// 2 bytes: message length
	// 2 bytes: authentication version
	// message length - 1 bytes: authentication request data
	//
	// For authentication version == 0, the authentication request data contains the following:
	// 1 byte:  user name length
	// user name length bytes: user name in ascii
	// 1 byte:  encrypted user password length
	// encrypted user password length bytes: encrypted user password
	// 1 byte: additional encryption key length
	// additional encryption key length: additional encryption key data
	pna_authentication_response = 'Q'

};

enum
{
	PNA_HTTP_OK = 0,
	PNA_HTTP_GENERAL_ERROR, 	// for any error that is not defined below
	PNA_POST_NOT_RECEIVED, 		// POST message was not received
	PNA_INVALID_GUID 			// sent only if the GUID from the Player is already in use
};


// Section B: UDP Datagram Messages.
// Datagrams consist of one message (usually an audio mesage) with
// attendant data (generally no more than 256 bytes) and are sent
// via UDP to the port specified by the user using the
// pna_option_datagram option (see Part I).
//
// UDP was added in version 2. Interleaving was added in version 4.

enum {
	// Audio datagram. Consists of a one-byte generation byte
	// with the generation in the high four bits and the
	// interleave position of this datagram in the low four bits,
	// a four-byte time position, a one-byte data length
	// indication and a block of audio data bytes.
	// The audio block consists
	// of every Ith frame of audio (the size of a frame is
	// equal to the granularity of the document as indicated
	// in the RaFormat structure), where I is equal to the
	// interleave factor see (pna_option_interleave).
	// VERSION 2:
	// As above, except that the entire generation byte is the
	// generation number and no interleave is performed.
	pna_datagram_audio = 'a',

	//
	// End marker datagram. Indicates that end-of-stream
	// has been reached. Sent periodically to account for
	// the unreliable nature of datagrams.
	pna_datagram_end = 'e',

	//
	// Report datagram. Informs player of bandwidth usage
	// 2 bytes:	length = 9
	// 2 bytes:	time since last report in milliseconds
	// 1 byte:	pna_datagram_bandwidth_report
	// 4 bytes  bandwidth (in bytes) written to the net during the last interval which is
    //          defined as the time since the last report.
	// if the server supports the pna_option_sequenced_bandwidth_report option
	// it will also send the following
	// 1 byte: sequence number
	pna_datagram_bandwidth_report = 'b',

	//
	// Raw data datagram. Indicates that a raw data packet has arrived.
	// 8-bit flags
	//
	// Upper 4 bits are generation value
	// Lower
	//
	//
	//
	//

	pna_datagram_raw = 'Z'
};



// Section C: Monitor-Server TCP Messages

enum {
	// All messages other than the first in this section represent
	// a space distinct from the section A messages.
	//
	// Monitoring request. From client; indicates that this is a
	// monitoring client. Followed by a two-byte length and
	// a password. All subsequent communication to and from the
	// server will consist of messages from this pna monitoring
	// section.
	//
	pna_monitor = 'm',
	//
	// Indicates that a monitoring request has been rejected.
	pna_monitor_rejected = 'r',
	//
	// These can collide with earlier messages since they are
	// never sent in a normal session.
	//
	// The uptime of the server in tenths of seconds (4 bytes)
	// follows.
	//
	pna_monitor_uptime = 'u',
	//
	// The peak number of connections to the server (2 bytes) follows.
	//
	pna_monitor_peak = 'p',
	//
	// A client id (2 bytes) and host name (2 byte length, data) follow.
	pna_monitor_client_connected = 'c',
	//
	// A client id (2 bytes) and descriptive string
	// (2 byte length, data) follow. The string describes the
	// current activity on that connection.
	//
	pna_monitor_client_activity = 'a',
	//
	// A 2-byte client id follows.
	//
	pna_monitor_client_disconnected = 'C',
	//
	// VERSION 5 OR HIGHER
	// From server; indicates that a server id string follows
	// (2-byte length followed by data).
	//
	pna_monitor_server_id = 'I',
	//
	// VERSION 6 OR HIGHER
	// A message to be displayed to all current
	// RealAudio users on the server follows (two-byte length
	// followed by text). Not yet implemented in the server
	// or the monitor.
	//
	pna_monitor_alert = 'A',
	//
	// VERSION 6 OR HIGHER
	// Orders the server to shut itself down in the specified
	// number of tenths of seconds (zero means instantaneous shutdown).
	// At that point in time all connections will be shut down.
	// Not currently implemented in the server or the monitor.
	//
	pna_monitor_shutdown = 's'		// D.S. removed , 2.5.96

};



// Section D: Live Stream TCP Messages

enum {
	//
	//	A live stream is a pseudo monitor. It connects using the
	//	pn_livesource message.
	//
	//	Then it passes the following data to the server:
	//
	//	Password		- As with the Monitor
	//	Stream Name		- Used by players to identify the stream
	//					  as pnm://host/<Stream Name>
	//	RA Header		- Decsribing the stream in terms of Title, Author
	//					  and Copyright.
	//
	//	following this the server repeatedly receives data packets from the
	//	live source with the following format. A packet with type == End terminates
	//	the connection.
	//
	//	long	type;	1 = Data, 2 = End
	//	long	length;	the length in bytes of the data part of the packet
	//	char	_data[length]	the data part of the packet.
	//
	//	From Live Source to Server
	//
	pna_livesource = '>',
	//	Identifies a Live Source
	//
	//	From Server to Live Source, all unused at present
	//	protocol messages from Live Source to Recorder (markm, 8/25/95)
	pna_stream_end = '$',
	pna_stream_data = 'X',
	pna_old_stream = 'x',
	pna_stream_password = 'q'
};


enum { LVSRC_APPEND, LVSRC_CREATE };

enum
{
	pna_proxy_end 		= 0,
	pna_proxy_version,
	pna_proxy_hostname,
	pna_proxy_host_port,
	pna_proxy_port_offset,
	pna_proxy_use_tcp,
	pna_proxy_status
};

// Section E: Generic messages

enum
{
        //
        // Message from the player to the server to turn interframes off
        // or on.
        //      pna_generic_message                             1 byte
        //      length = 3                                      2 bytes
        //      pna_gen_interframe_control                      2 bytes
        //      stream number                                   2 bytes
        //      interframes enabled?                            1 byte
        //
        pna_gen_interframe_control = 1,

	// Message from the Player to the Server to adjust the stream keyframe rate,
	// turn interframes on or off, and turn the stream on or off.
	//      pna_generic_message                             1 byte
	//      length = 4                                      2 bytes
	//      pna_gen_frame_control                           2 bytes
	//      stream number                                   2 bytes
	//      interframes_enabled                             1 byte
	//      keyframe_rate                                   1 byte
        pna_gen_frame_control,


	// Backchannel message from the player
	//      pna_generic_message                             1 byte
	//      length = n                                      2 bytes
	//      pna_backchannel_message                         2 bytes
	//      stream number                                   2 bytes
	//      data stream (n from above = this length + 2)
        pna_backchannel_message,

        last_generic_message

};

#endif //__PNA_DEFS_
