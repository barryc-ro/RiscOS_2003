/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "error.h"
#include "fileio.h"
#include "memory.h"
#include "sprite.h"
#include "part.h"
#include "replay.h"

/* ICK */
#define xsize 64
#define ysize 64

#define HEADER_SIZE           (2 * 1024)

#define HEADER_PART       (0)
#define OH_PART           (1)
#define SPRITE_PART       (2)
#define CATALOGUE_PART    (3)

#define URL_SIZE_INDEX    (0)
#define URL_INDEX         (1)

#define FILE_OFFSET       (0)
#define CHUNK_SIZE        (1)
#define FROFF_INDEX       (2)

#define MAX(x, y) ((x) > (y) ? (x) : (y))
#define MIN(x, y) ((x) < (y) ? (x) : (y))

static int align2k(int i)
{
    return ((i + 0x7FF) & ~0x7FF);
}

static int alignword(int i)
{
    return ((i + 3) & ~3);
}

static void sprintfrac(char *str, unsigned int num, unsigned int div)
{
    int d, i;

    d = num / div;
    sprintf(str, "%d.", d); str += strlen(str);
    for(i = 0; i < 4; i++)
    {
        num -= d * div;
        num *= 10;
        d = num / div;
        sprintf(str, "%d", d); str += strlen(str);
    }
}

static int *catalogue;

static int header_size;
static int sprite_size;
static int catalogue_size;
static int header_pos;
static int sprite_pos;
static int catalogue_pos;

static void calc_sizes(film_spec *film)
{
    int pos, len;
    int oh_pos;
    int *oh;
    
    header_size = HEADER_SIZE;
    sprite_size = SprType(SPRITE_MODE, 4*xsize, 4*ysize).memory + 60 - 4;
    /* Count the length of the URL */
    len = strlen(film->url);
    catalogue_size = sizeof(int) + alignword(len+1);
    pos = 0;
    header_pos = pos;
    pos = alignword(pos + header_size);
    oh_pos = pos;
    pos = alignword(pos + film->original_header.size + sizeof(int));
    sprite_pos = pos;
    pos = align2k(pos + sprite_size);
    catalogue_pos = pos;

    oh = Malloc(film->original_header.size + sizeof(int));
    PartDefPool(oh);
    PartDef(OH_PART, PartMemory(oh, oh_pos,
                            film->original_header.size + sizeof(int)));
    
    oh[0] = film->original_header.size;
    memcpy(oh + 1, film->original_header.buf, film->original_header.size);

    catalogue = Malloc(catalogue_size);
    PartDefPool(catalogue);
    PartDef(CATALOGUE_PART, PartMemory(catalogue, catalogue_pos,
                                                  catalogue_size));
    catalogue[0] = len;
    strcpy((char *)&catalogue[1], film->url);
}

static int         *catalogue;    /* Again ??? */

static void make_header(film_spec *film)
{
    char *h;
    ra_header_t *header;
    
    header = film->header;
    h = Malloc(header_size);
    PartDefPool(h);
    PartDef(HEADER_PART, PartMemory(h, header_pos, header_size));
    sprintf(h, "ARMovie\n");                                h += strlen(h);
    if (header->title == NULL)
      sprintf(h, "\n");
    else
      sprintf(h, "%s\n", header->title);
                                                            h += strlen(h);
    if (header->author == NULL)
      sprintf(h, "Copyright information not known\n");
    else
      sprintf(h, "%s\n", header->author);
                                                            h += strlen(h);
    sprintf(h, "Converted from RealAudio %s by MovieFS\n", header->compressioncode);
                                                            h += strlen(h);
    sprintf(h, "0\n");                                      h += strlen(h);
    sprintf(h, "64 pixels\n");                              h += strlen(h);
    sprintf(h, "64 pixels\n");                              h += strlen(h);
    sprintf(h, "16 bpp RGB\n");                             h += strlen(h);
    sprintfrac(h, header->fpc * header->bytesperminute,
                      header->replaychunksize * 60);        h += strlen(h);
    sprintf(h, " frames per second\n");                     h += strlen(h);
    sprintf(h, "2 RA%s\n", header->compressioncode);        h += strlen(h);
    sprintfrac(h, header->samplerate, 65536);               h += strlen(h);
    sprintf(h, " Hz samples\n");                            h += strlen(h);
    sprintf(h, "%d channel\n", header->numchannels);        h += strlen(h);
    sprintf(h, "%d bits\n", header->samplesize);            h += strlen(h);
    sprintf(h, "%d frames per chunk\n", header->fpc);       h += strlen(h);
    if(header->nchunks == -1)
        sprintf(h, "%d forever\n", 0x7ffffffe);
    else
        sprintf(h, "%d number of chunks\n", header->nchunks-1);
                                                            h += strlen(h);
    sprintf(h, "4 even chunk size\n");                      h += strlen(h);
    sprintf(h, "4 odd chunk size\n");                       h += strlen(h);
    sprintf(h, "%d Fetcher [PNA]\n", catalogue_pos);        h += strlen(h);
    sprintf(h, "%d offset to sprite\n", sprite_pos);        h += strlen(h);
    sprintf(h, "%d size of sprite\n", sprite_size);         h += strlen(h);
    sprintf(h, "No offset to keys\n");
}

static void make_sprite()
{
    PartDefXsize(xsize);
    PartDefYsize(ysize);
    PartDef(SPRITE_PART, PartSprite(sprite_pos, sprite_size));
}

image_t *ReplayImage(film_spec *film)
{
    PartInit(4);
    calc_sizes(film);
    PartDefHandle(film->handle);
    make_header(film);
    make_sprite();
    return PartImage();
}
