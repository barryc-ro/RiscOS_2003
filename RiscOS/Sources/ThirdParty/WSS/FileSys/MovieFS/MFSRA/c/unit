/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.
    
    PHBG: Initial version
*/

#include <string.h>
#include "swis.h"
#include "kernel.h"
#include "serv.h"
#include "error.h"
#include "memory.h"
#include "cveneer.h"
#include "hub.h"
#include "recognise.h"

#include "unit.h"

typedef struct
{
    image_t *img;
    char *error;
} *uhandle_t;

typedef struct
{
    int   file_type;
    char *title;
    int   recognise;
    int   open;
    int   close;
    int   read_handle;
    int   read;
    int   size;
    int   error;
} unit_t;

static uhandle_t open(int f)
{
    uhandle_t uh;
    char *error;

    uh = Malloc0(sizeof(*uh)); /* Okay */
    if(uh == NULL) return NULL;
    uh->img = NULL;
    uh->error = NULL;
    if(setjmp(*ErrorLink()))
    {
        error = ErrorReport()->errmess;
        uh->error = Malloc0(strlen(error) + 1); /* Okay */
        if(uh->error)
            strcpy(uh->error, error);
    }
    else
    {
        uh->img = HubInterpret(f);
    }
    return uh;
}

static void close(uhandle_t uh)
{
    if(uh->img) ImageFree(uh->img);
    if(uh->error) Free(uh->error);
    Free(uh);
    MemMinimalise();
}

static void read_handle(uhandle_t uh, int f)
{
    uh->img->handle = f;
    uh->img->reset_handle(uh->img->data, f);
}

static void read(char *b, int p, int s, uhandle_t uh)
{
    ImageRead(b, s, p, uh->img);
}

static int size(uhandle_t uh)
{
    return uh->img ? ImageSize(uh->img) : 0;
}

static char *error(uhandle_t uh)
{
    return uh->error;
}

static unit_t Unit;

static char recogniser_title[] = "MFSRA";

static void make_unit(void *pw)
{
    Unit.title       = recogniser_title;
    Unit.recognise   = CVeneer((int) Recognise, pw);
    Unit.open        = CVeneer((int) open, pw);
    Unit.close       = CVeneer((int) close, pw);
    Unit.read_handle = CVeneer((int) read_handle, pw);
    Unit.read        = CVeneer((int) read, pw);
    Unit.size        = CVeneer((int) size, pw);
    Unit.error       = CVeneer((int) error, pw);
}

static int uninit = 1;

void UnitAdd(void *pw, int ft)
{
    _kernel_swi_regs r;

    if(uninit)
    {
        make_unit(pw);
        uninit = 0;
    }
    Unit.file_type = ft;
    r.r[1] = Service_RecogAnnounce;
    r.r[0] = 1;
    r.r[2] = (int) &Unit;
    /* For future expansion */
    r.r[3] = 0;
    _kernel_swi(OS_ServiceCall, &r, &r);
}

void UnitAddReply(void *pw, int ft, unit_reply_t f)
{
    if(uninit)
    {
        make_unit(pw);
        uninit = 0;
    }
    Unit.file_type = ft;
    f(1, Service_RecogAnnounce, (int) &Unit, 0);
}

void UnitRemove(int ft)
{
    _kernel_swi_regs r;

    Unit.file_type = ft;
    r.r[1] = Service_RecogAnnounce;
    r.r[0] = 0;
    r.r[2] = (int) &Unit;
    /* For future expansion */
    r.r[3] = 0;
    _kernel_swi(OS_ServiceCall, &r, &r);
}
