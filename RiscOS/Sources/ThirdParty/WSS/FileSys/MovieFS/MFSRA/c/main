/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: Initial version
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"
#include "error.h"
#include "memory.h"
#include "replay.h"
#include "ra.h"
#include "unit.h"
#include "serv.h"
#include "config.h"

static void add_fs(void *pw)
{
    UnitAdd(pw, RA_FILETYPE);
}

static void add_fs_reply(void *pw, int reply)
{
    UnitAddReply(pw, RA_FILETYPE, (unit_reply_t) reply);
}

static void remove_fs(void)
{
    UnitRemove(RA_FILETYPE);
}

static void command_pick_stream(char *arg)
{
    int stream;

    if(sscanf(arg, "%d", &stream) != 1 || stream < 1)
        Error("RAPickStream takes a strictly positive integer");
    RaPickStream(stream);
}

_kernel_oserror *command(char *arg_string, int argc, int cmd_no, void *pw)
{
    if(setjmp(*ErrorLink()))
    {
        return ErrorReport();
    }
    else
    {
        switch(cmd_no)
        {
            case 0: command_pick_stream(arg_string); break;
            default: Error("Unsupported command");
        }
    }
    return NULL;
}

_kernel_oserror* finalise(int fatal, int podule, void *pw)
{
    remove_fs();
    MemKill();
    return NULL;
}

_kernel_oserror *initialise(char *cmd_tail, int podule, void *pw)
{
    add_fs(pw);
    printf("MFSRA v1.18 (c) Copyright 1997-8 Warm Silence Software Ltd.\nAll rights reserved.\nWritten by Paul Gardiner and Robin Watts\n");
    return 0;
}

void service(int service_number, _kernel_swi_regs *r, void *pw)
{
  switch (service_number) {
    case Service_RecogEnumerate:
      if (r->r[3] == 0)
        add_fs_reply(pw, r->r[2]);
      break;
  }
}
