/********************************************************************/
/*                                                                  */
/* Name: PGspr.c                                                    */
/* Author: Paul Gardiner.                                           */
/* Function: Provides a library of functions for accessing sprites. */
/*                                                                  */
/********************************************************************/

#include "kernel.h"
#include "swis.h"
static _kernel_swi_regs regs;

#include <stdio.h>
#include "memory.h"
#include "sprite.h"

struct spr_sprite_s {int area, sprite, save;};

spr_type SprType(int mode, int xsize, int ysize)
{
    spr_type stype;
    int xeig, yeig, log2bpp;

    regs.r[0] = mode;
    regs.r[1] = 4;
    _kernel_swi(OS_ReadModeVariable, &regs, &regs);
    xeig = regs.r[2];
    regs.r[1] = 5;
    _kernel_swi(OS_ReadModeVariable, &regs, &regs);
    yeig = regs.r[2];
    regs.r[1] = 9;
    _kernel_swi(OS_ReadModeVariable, &regs, &regs);
    log2bpp = regs.r[2];
    stype.mode = mode;
    stype.xsize = (xsize - 1 >> xeig) + 1;
    stype.ysize = (ysize - 1 >> yeig) + 1;
    stype.memory = (((stype.xsize << log2bpp) - 1 >> 5) + 1) * stype.ysize << 2;
    stype.memory += 8 * 16;
    return stype;
}

spr_sprite *SprCreateN(int n, spr_type st)
{
    spr_sprite spr_data, *spr_arr;
    int area_size, data_size, arr_size;
    int area;
    int i;
    char buf[20];

    area_size = 16 + n * (44 + st.memory);
    data_size = n * sizeof(struct spr_sprite_s);
    arr_size = (n + 1) * sizeof(spr_sprite);
    area = (int) Malloc0(area_size + data_size + arr_size);
    if(area == 0)
        return NULL;
    spr_data = (spr_sprite) (area + area_size);
    spr_arr = (spr_sprite *) (area + area_size + data_size);
    ((int *) area)[0] = 16 + n * (44 + st.memory);
    ((int *) area)[2] = 16;
    regs.r[0] = 0x109;
    regs.r[1] = area;
    _kernel_swi(OS_SpriteOp, &regs, &regs);
    for(i = 0; i < n; i++)
    {
        regs.r[0] = 0x10f;
        regs.r[1] = area;
        sprintf(buf, "Sprite%d", i+1);
        regs.r[2] = (int) buf;
        regs.r[3] = 1;
        regs.r[4] = st.xsize;
        regs.r[5] = st.ysize;
        regs.r[6] = st.mode;
        _kernel_swi(OS_SpriteOp, &regs, &regs);
        regs.r[0] = 0x118;
        regs.r[1] = area;
        regs.r[2] = (int) buf;
        _kernel_swi(OS_SpriteOp, &regs, &regs);
        spr_data[i].sprite = regs.r[2] - area;
        spr_data[i].area = area;
        spr_data[i].save = NULL;
        spr_arr[i] = spr_data + i;
    }
    spr_arr[i] = NULL;
    return spr_arr;
}

spr_sprite SprCreate(spr_type st)
{
    spr_sprite *spr_arr;

    spr_arr = SprCreateN(1, st);
    if(spr_arr == NULL)
    {
        return NULL;
    }
    else
    {
        return spr_arr[0];
    }  
}

void SprFree(spr_sprite spr)
{
    if(spr != NULL)
    {
        Free((void *) spr->save);
        Free((void *) spr->area);
    }
}

void SprFreeN(spr_sprite *spr_arr)
{
    int i;
    
    if(spr_arr != NULL)
    {
        for(i = 0; spr_arr[i] != NULL; ++i)
            Free((void *) spr_arr[i]->save);
        Free((void *) spr_arr[0]->area);
    }
}

void SprVDU(spr_sprite spr)
{
    if(spr == NULL)
    {
        regs.r[2] =  0;
        regs.r[3] =  1;
    }
    else
    {
        regs.r[1] = spr->area;
        regs.r[2] = spr->sprite + spr->area;
        regs.r[3] = 0;
    }
    regs.r[0] = 0x23c;
    _kernel_swi(OS_SpriteOp, &regs, &regs);
}

void SprPlotQ(spr_sprite spr, int x, int y)
{
    if(spr != NULL)
    {
        regs.r[0] = 68;
        regs.r[1] = x;
        regs.r[2] = y;
        _kernel_swi(OS_Plot, &regs, &regs);
        regs.r[0] = 0x21c;
        regs.r[1] = spr->area;
        regs.r[2] = spr->sprite + spr->area;
        regs.r[5] = 8;
        _kernel_swi(OS_SpriteOp, &regs, &regs);
    }
}
