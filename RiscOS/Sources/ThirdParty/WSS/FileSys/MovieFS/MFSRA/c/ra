/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    RJW: Initial version
    PHBG 8/5/98: Account for picking of multiple streams and comment lines
*/

#include <stdio.h>
#include <string.h>
#include "error.h"
#include "memory.h"
#include "ra.h"
#include "raheader_t.h"
#include "fileio.h"
#include "t_film.h"
#include "avi.h"
#include "config.h"
#include "swis.h"
#include "strncasecm.h"

static int stream_no = 0;

static film_spec *url2film(char *url, int handle)
{
    film_spec *film;
    _kernel_oserror *err;
    _kernel_swi_regs regs;
    int pna_handle;

    if(url == NULL)
    {
        if(stream_no > 0)
            Error("ram file does not contain that many streams");
        return NULL;
    }

    /* Setup the basic film struct */
    film = Malloc(sizeof(film_spec));
    film->handle = handle;
    film->type = "RealAudio";
    film->url = url;
    film->header = NULL;
    film->original_header.buf = NULL;

    /* Now lets call the PNA module to open the URL */
    regs.r[0] = (int) url;
    err = _kernel_swi(PNA_Open, &regs, &regs);

    if (err != NULL) {
      /* Now a hack to retry with http: if required */
      if (strncasecmp("pnm://", url, 5) == 0) {
        /* Lets retry with http:// */
        film->url = Malloc(strlen(url)+2);
        sprintf(film->url, " %s", url);
        film->url[0] = 'h';
        film->url[1] = 't';
        film->url[2] = 't';
        film->url[3] = 'p';
        Free(url);
        url = film->url;
        regs.r[0] = (int) url;
        err = _kernel_swi(PNA_Open, &regs, &regs);
      }
    }
    if (err != NULL) {
      AviFree(film);
      Error(((char *)err)+4);
    }

    pna_handle = regs.r[0];

    /* Now lets call the PNA module to get the header info */
    err = _kernel_swi(PNA_Info, &regs, &regs);

    if (err != NULL) {
      AviFree(film);
      Error(((char *)err)+4);
    }

    film->header = Malloc(sizeof(ra_header_t));
    memcpy(film->header, (ra_header_t *) regs.r[0], sizeof(ra_header_t));

    film->original_header.size = regs.r[1];
    film->original_header.buf = Malloc(film->original_header.size);
    memcpy(film->original_header.buf, (void *) regs.r[2],
                                      film->original_header.size);

    /* Close the connection */
    regs.r[0] = pna_handle;
    err = _kernel_swi(PNA_Close, &regs, &regs);
    if (err != NULL) {
      AviFree(film);
      Error(((char *)err)+4);
    }

    return film;
}


void RaPickStream(int s)
{
    stream_no = s-1;
}

film_spec *RaStructure(int handle)
{
    int i, size;
    char *url, *buf, *ptr;

    ptr = FsName(handle);
    size = FsSize(ptr);
    if (size <= 0)
      return NULL;

    /* Do we have a Metafile or a real file? */
    FsReadAt(handle, 0, &i, 4);
    if ((strncmp((char *)&i, ".ra\375", 4) == 0) ||
        (strncmp((char *)&i, ".RMF", 4) == 0))
    {
      /* Real file! */
      url = Malloc(5+strlen(ptr)+12);
      sprintf(url, "file:%x:.%s", handle, ptr);
      for(ptr = strchr(url,'.'); *ptr != 0; ptr++)
      {
        if(*ptr == '.')
          *ptr = '/';
        else if(*ptr =='/')
          *ptr = '.';
      }
    }
    else
    {
      /* Meta file! */
      buf = Malloc(size + 1);
      FsReadAt(handle, 0, buf, size);
      buf[size] = 0;
      ptr = strtok(buf, "\r\n");
      while(ptr && ptr[0] == ';')
          ptr = strtok(NULL, "\r\n");
      for(i = 0; i < stream_no && ptr; i++)
      {
          ptr = strtok(NULL, "\r\n");
          while(ptr && ptr[0] == ';')
              ptr = strtok(NULL, "\r\n");
      }
      url = NULL;
      if(ptr)
      {
          url = Malloc(strlen(ptr)+1);
          strcpy(url, ptr);
      }
      Free(buf);
    }
    return url2film(url, handle);
}
