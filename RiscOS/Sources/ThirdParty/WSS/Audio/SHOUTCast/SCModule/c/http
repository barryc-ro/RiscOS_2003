#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "error.h"
#include "tcp.h"
#include "http.h"
#include "sc_state.h"

// Sector sized buffer.
typedef struct http_data_s {
  int           state;
  char         *host;
  int           port;
  char         *path;
  tcp_addr_t    addr;
  tcp_conn_t    conn;
  tcp_bleeper_t listen;
  char         *header;
  int           header_len;
  int           header_max;
  int           offset;
  int           size;
  int           metalen;
  int		metaint;
  int		metacount;
} http_data_s;

static void free_private_data(http_data_t data) {

  if (data) {
    Free(data->host);
    Free(data->path);
    if (data->addr)
      TcpFreeAddr(data->addr);
    if (data->conn) {
      TcpClose(data->conn);
      TcpDelete(data->conn);
      data->conn = NULL;
    }
    if (data->listen) {
      TcpBleeperDelete(data->listen);
      data->listen = NULL;
    }
    Free(data->header);
  }
}

http_data_t HTTP_GetUrl(const char *url) {

  const char *s, *t;
  http_data_t data;

  data = NULL;
  ExceptVar(data);
  ExceptTry
  {
    data = Malloc(sizeof(*data));
    data->state          = SC_RESOLVING;
    data->host           = 0;
    data->path           = 0;
    data->addr           = NULL;
    data->conn           = NULL;
    data->listen         = NULL;
    data->header         = NULL;
    data->header_len     = 0;
    data->header_max     = 0;
    data->offset         = 0;
    data->size           = -1;
    data->metaint        = 0;
    data->metacount      = 0;
    data->metalen        = 0;
    /* Decompose the URL into its constituent parts */
    s = url;
    /* Skip over the protocol and colon */
    while (*s && (*s != ':'))
      s++;
    if (*s == 0)
      Error("Failed to find protocol:");
    s++;
    /* We had better have // next */
    if ((*s++ != '/') || (*s++ != '/')) {
      Error("Failed to find protocol://");
    }
    /* Count the length of the hostname */
    t = s;
    while ((*t) && (*t != '/') && (*t != ':'))
      t++;
    if (t == s)
      Error("Failed to find protocol://host or protocol://host:");
    /* Extract the hostname */
    data->host = Malloc(t-s+1);
    strncpy(data->host, s, t-s);
    data->host[t-s] = 0;
    if (*t == ':') {
      /* Read port number */
      data->port = 0;
      t++;
      s = t;
      while (*t && (*t >= '0') && (*t <= '9')) {
        data->port = data->port * 10 + (*t++)-'0';
      }
      if (s == t)
        Error("Failed to find protocol://host:port");
// DON'T
//    if (*t == '/')
//      t++;
    } else {
      data->port = 80;
    }
// DON'T
//    /* Skip the / */
//    t++;
    s = t;
    /* Count the length of the path */
    while ((*t))
      t++;
    /* Extract the path */
    if (t == s) {
      data->path = Malloc(2);
      data->path[0] = '/';
      data->path[1] = 0;
    } else {
      data->path = Malloc(t-s+1);
      strncpy(data->path, s, t-s);
      data->path[t-s] = 0;
    }
  }
  ExceptCatch
  {
    free_private_data(data);
    ExceptRethrow();
  }
  return data;
}

void HTTP_Close(http_data_t data) {

  free_private_data(data);
  Free(data);
}

static void header_insert(http_data_t data, char c) {

  char *temp;

  /* Is the header block full? */
  if (data->header_len == data->header_max) {
    /* Extend the header */
    /* No Realloc, so do it the hard way */
    if (data->header_max == 0) {
      data->header_max = 1024;
      data->header = Malloc(data->header_max);
    } else {
      temp = Malloc(data->header_max<<1);
      memcpy(temp, data->header, data->header_max);
      Free(data->header);
      data->header = temp;
      data->header_max *= 2;
    }
  }
  data->header[data->header_len++] = c;
}

static char *header_scan(http_data_t data, const char *string) {

  int start, len, match;

  start = 0;
  match = -1;
  len = 0;
  while (start+len < data->header_len) {
    if (string[len] == 0) {
      match = start;
      /* Next line safe cos we always search for header prefixes */
      start = start+len;
      len = 0;
    } else if (tolower(data->header[start+len]) == tolower(string[len])) {
      len++;
    } else {
      start = start+len+1;
      len = 0;
    }
  }

  if (match == -1)
    return NULL;
  return &data->header[match];
}

static void transfer_complete(http_data_t data, int failed) {

  free_private_data(data);
  if (failed) {
    data->state = SC_FAILED;
  } else {
    data->state = SC_COMPLETE;
  }
}

int HTTP_GetState(http_data_t data) {

  if (data)
    return data->state;

  return SC_COMPLETE;
}

int is_numeric(const char *c) {

  return isdigit(*c);
}

static void check_ended(http_data_t data) {

  tcp_conn_state_t state;

  state = TcpConnState(data->conn);
  if ((state == TCP_CONN_READ_ONLY) || (state == TCP_CONN_CLOSED)) {
    if ((data->size == -1) || (data->offset == data->size)) {
      transfer_complete(data, 0);
    } else {
      transfer_complete(data, 1);
    }
  }
}

static int return_code(http_data_t data) {

  int i, v;

  i = 0;
  while ((i < data->header_len) && (data->header[i] != 32))
    i++;
  i++;
  if (i >= data->header_len) {
    //printf("Return = 404\n");
    return 404;
  }
  v = 0;
  while ((i < data->header_len) && (isdigit(data->header[i]))) {
    v = (v*10) + data->header[i++] - '0';
  }
  //printf("Return=%d\n", v);
  return v;
}

static int header_atoi(http_data_t data, char *header, int *v) {

  char *max = &data->header[data->header_len];
  int a;

  while ((header < max) && ((*header == 32) || (*header == 9)))
    header++;
  if (header >= max)
    return 0;
  if (!isdigit(*header))
    return 0;

  a = 0;
  while ((header < max) && (isdigit(*header))) {
    a = (a*10) + (*header++) - '0';
  }
  *v = a;
  return 1;
}

int HTTP_GetData(http_data_t data, char *buffer, int size) {

  char c;
  int count, n;
  char *header;

  //printf(">%d", data->state);
  //fflush(stdout);
  ExceptVar(n);
  n = 0;
  ExceptTry
  {
    switch (data->state) {
      case SC_RESOLVING:
        /* Unconnected call */
        data->addr = TcpResolve(data->host);
        if (data->addr == TCP_ADDR_RESOLVING) {
          break;
        }
        if (data->addr == TCP_ADDR_UNKNOWN) {
          data->state = SC_FAILED;
          Error("Unknown Address");
        } else {
          data->state = SC_CONNECTING;
          /* Start connection */
          data->listen = TcpListenAndCall(TCP_PORT_ANY, data->port, data->addr, &data->conn);
        }
        break;
      case SC_CONNECTING:
        if (TcpConnState(data->conn) != TCP_CONN_NASCENT)
          data->state = SC_REQUESTING;
        break;
      case SC_REQUESTING:
        TcpWrite("GET ", 4, data->conn);
        TcpWrite(data->path, strlen(data->path), data->conn);
        TcpWrite(" HTTP/1.0\r\n", 11, data->conn);
        if (!is_numeric(data->host)) {
          TcpWrite("Host: ", 6, data->conn);
          TcpWrite(data->host, strlen(data->host), data->conn);
          TcpWrite("\r\n", 2, data->conn);
        }
        TcpWrite("Icy-MetaData:1\r\n", 16, data->conn);
        TcpWrite("\r\n", 2, data->conn);
        data->state = SC_HEADERS;
        break;
      case SC_HEADERS:
        do {
          count = TcpRead(&c, 1, data->conn);
          if (count) {
            header_insert(data, c);
            if        ((data->header_len > 1) &&
                       (data->header[data->header_len-2] == '\n') &&
                       (data->header[data->header_len-1] == '\n'))
            {
              //data->header_len -= 1;
              count = 2;
            } else if ((data->header_len > 3) &&
                       (data->header[data->header_len-4] == '\r') &&
                       (data->header[data->header_len-3] == '\n') &&
                       (data->header[data->header_len-2] == '\r') &&
                       (data->header[data->header_len-1] == '\n'))
            {
              //data->header_len -= 2;
              count = 2;
            }
          }
        } while (count == 1);
        /* Horrid reuse of a variable designed to confuse. Bad Robin, Bad! */
        if (count == 2) {
          //printf("End of headers...\n");
          /* End of headers found... */
          if (return_code(data) != 200) {
            transfer_complete(data, 1);
          }
          header = header_scan(data, "Content-Length:");
          if (header) {
            //printf("Content-Length header found\n");
            header += strlen("Content-Length:");
            if (header_atoi(data, header, &count))
              data->size = count;
          }
          //printf("Content-Length header done\n");
          header = header_scan(data, "icy-metaint:");
          if (header) {
            //printf("icy-metaint: found\n");
            header += strlen("icy-metaint:");
            if (header_atoi(data, header, &count)) {
              if (count == 1) {
                data->metaint = 8192;
              } else {
                data->metaint = count;
              }
            }
          }
          data->state = SC_FETCHING;
        }
        if (TcpConnState(data->conn) == TCP_CONN_READ_ONLY) {
          if ((data->size == -1) || (data->offset == data->size)) {
            transfer_complete(data, 0);
          } else {
            transfer_complete(data, 1);
          }
        }
        break;
      case SC_METADATA:
        /* Meta data fetch */
        //printf("Meta Fetch!\n");
        n = 0;
        do {
          count = TcpRead(&c, 1, data->conn);
          if (count) {
            if (data->metalen == 0) {
              data->metalen = 16*c;
              *buffer = 0;
            } else {
              if (size > 0) {
                *buffer++ = c;
                size--;
                // Should never happen, but just in case, do make sure
                // the end of the metadata buffer is null terminated.
                if (size == 0)
                  *(buffer-1) = 0;
              }
              data->metalen--;
              n++;
            }
            if (data->metalen == 0) {
              data->state = SC_FETCHING;
            }
          }
        } while (count && (data->state == SC_METADATA));
        check_ended(data);
        break;
      case SC_FETCHING:
        /* Real data fetch */
        if (data->size == -1)
          n = size;
        else
          n = data->size - data->offset;
        if (data->metaint)
          if (n > data->metaint - data->metacount)
            n = data->metaint - data->metacount;
        if (n > size)
          n = size;
        if (n < 0)
          n = 0;
        if (n)
          n = TcpRead(buffer, n, data->conn);
        data->offset += n;
        data->metacount += n;
        check_ended(data);
        /* If we haven't ended the connection, check for ending the stream - it */
        /* might be a keepalive server */
        if (data->conn) {
          if (data->size != -1) {
            if (data->size == data->offset) {
              transfer_complete(data, 0);
            }
          }
        }
        /* Check for reaching the next metadata mark */
        if ((data->metaint) && (data->metacount == data->metaint)) {
          data->state = SC_METADATA;
          data->metacount = 0;
        }
        break;
      case SC_FAILED:
      case SC_COMPLETE:
        break;
    }
  }
  ExceptCatch {
    //printf("!");
    //fflush(stdout);
    /* Connection failed */
    data->state = SC_FAILED;
    if ((data->addr != TCP_ADDR_RESOLVING) && (data->addr != TCP_ADDR_UNKNOWN))
      TcpFreeAddr(data->addr);
    data->addr = NULL;
    ExceptTry
    {
      TcpClose(data->conn);
    }
    ExceptCatch
    {
    }
    ExceptTry
    {
      TcpDelete(data->conn);
    }
    ExceptCatch
    {
    }
    data->conn = NULL;
    if (data->listen) {
      TcpBleeperDelete(data->listen);
      data->listen = NULL;
    }
    n = 0;
  }
  //printf(">");
  //fflush(stdout);
  return n;
}

int str_len(const char *s) {

  int i = 0;

  while ((*s > 31) || (*s == 9)) {
    s++;
    i++;
  }
  return i;
}

void str_cpy(char *t, const char *s) {

  while ((*s > 31) || (*s == 9)) {
    *t++ = *s++;
  }
  *t = 0;
}

char *HTTP_CopyHeader(http_data_t data, const char *header) {

  char *h;
  char *s;

  h = header_scan(data, header);
  if (!h) {
    return NULL;
  }

  h += strlen(header);
  while ((*h == 32) || (*h == 9))
    h++;

  if (*h == 0) {
    return NULL;
  }

  s = Malloc0(str_len(h)+1);
  if (!s)
    return NULL;

  str_cpy(s, h);
  return s;
}

void HTTP_GetMetaData(http_data_t data) {

  tcp_conn_t conn;

  if (!data)
    return;
  if (!data->listen)
    return;

  conn = TcpAnswer(data->listen);
  if (!conn)
    return;

  printf("TCP Meta data ho!!!!\n");

  TcpClose(conn);
  TcpDelete(conn);
}
