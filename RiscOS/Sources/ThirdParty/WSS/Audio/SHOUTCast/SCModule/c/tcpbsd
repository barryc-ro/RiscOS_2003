/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG: 20/12/96: Initial (termite) version
    RJW:  Completly rewritten for BSD
    PHBG: Fix a bug or three and add listening sockets.
    RJW:  Add support for pairs of sockets, plus add in a couple of fns from threaded lib.
*/

#include "Memcheck:h.memcheck"

#include "sys/errno.h"
#include "socklib.h"
#include "sys/ioctl.h"
#include "netinet.tcp.h"
#include "netdb.h"
#include "unixlib.h"
#include "inetlib.h"

#include "swis.h"
#include "kernel.h"
#include "error.h"
#include "memory.h"
#include <string.h>

/* #include "forcecallb.h" */
#include "gethost.h"
#include "tcp.h"

//#define TRACE

#define ForceCallBackMacro
/* #define ForceCallBackMacro ForceCallBack() */

struct tcp_conn_s
{
    int                socket;
    tcp_conn_state_t   state;
};

struct tcp_bleeper_s
{
    int socket;
};

struct tcp_addr_s
{
    int            family;
    int            length;
    struct in_addr addr;
    char           zeropad[8];
};

struct udp_conn_s
{
    int                socket;
};

void TcpInitialise(void)
{
#ifdef TRACE
    printf("TcpInitialise\n");
#endif
}

void TcpFinalise(void)
{
#ifdef TRACE
    printf("TcpFinalise\n");
#endif
}

char *TcpHostName(void)
{
    static char buf[65];

#ifdef TRACE
    printf("TcpHostName\n");
#endif
    gethostname(buf, 65);
    return buf;
}

tcp_addr_t TcpResolve(char *name)
{
    tcp_addr_t result;
    struct hostent *host;
    int error;
#ifdef TRACE
    printf("TcpResolve\n");
#endif

    ForceCallBackMacro;
    host = gethost(name, &error);
    switch(error)
    {
        case 0:
            result = Malloc(sizeof(*result));
            MemCheck_SetReadChecking(0);
            result->length = host->h_length;
            result->family = host->h_addrtype;
            MemCheck_SetReadChecking(1);
            if(result->length > 12)
                Error("Oversized address returned by gethost");
            MemCheck_SetReadChecking(0);
            bcopy(host->h_addr, (char *) &result->addr, result->length);
            MemCheck_SetReadChecking(1);
            return result;
        case EINPROGRESS:
            return TCP_ADDR_RESOLVING;
        default:
            return TCP_ADDR_UNKNOWN;
    }
}

tcp_addr_t TcpPeer(tcp_conn_t conn)
{
    tcp_addr_t result;
    struct sockaddr_in sockaddr;
    int len;
#ifdef TRACE
    printf("TcpPeer\n");
#endif

    ForceCallBackMacro;
    len = sizeof(sockaddr);
    if(getpeername(conn->socket, (struct sockaddr *) &sockaddr, &len))
        ErrorErr(&_inet_error);
    len -= 4;
    result = Malloc(sizeof(*result));
    result->length = len;
    result->family = sockaddr.sin_family;
    if(len > 12)
        Error("Oversized address returned from getpeername");
    bcopy((char *) &sockaddr.sin_addr, (char *) &result->addr, len);
    return result;
}

void TcpFreeAddr(tcp_addr_t ip)
{
#ifdef TRACE
    printf("TcpFreeAddr\n");
#endif
    if(ip != TCP_ADDR_RESOLVING && ip != TCP_ADDR_UNKNOWN)
        Free(ip);
}

static tcp_conn_t do_tcp_call(tcp_port_t sp, tcp_port_t dp, tcp_addr_t dip, int reuse)
{
    int sock;
    tcp_conn_t res;
    int on = 1;
    struct sockaddr_in server;
    _kernel_oserror local_err;

#ifdef TRACE
    printf("TcpCall\n");
#endif
    ForceCallBackMacro;
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if(sock < 0)
        ErrorErr(&_inet_error);

    /* Mark Socket non-blocking */
    ForceCallBackMacro;
    if(socketioctl(sock,FIONBIO, &on) < 0)
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    if (reuse) {
      /* Mark Socket as being able to reuse a local port */
      ForceCallBackMacro;
      on = 1;
      if(setsockopt(sock,SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0)
      {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
      }
    }

    /* First lets bind the socket to the right local port */
    memset(&server, 0, sizeof(server));
    server.sin_addr.s_addr = htonl(INADDR_ANY);
    server.sin_family = AF_INET;
    server.sin_port = htons((u_short)sp);
    ForceCallBackMacro;
    if(bind(sock, (struct sockaddr *) &server, sizeof(server)))
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    /* Now prepare the remote port details */
    if(dip->length > 12)
        Error("Oversized address in TcpCall");
    memset(&server, 0, sizeof(server));
    memcpy((char *)&server.sin_addr,&dip->addr,dip->length);
    server.sin_family = dip->family;
    server.sin_port = htons((u_short)dp);

    /* Now we do the connect */
    res         = Malloc(sizeof(*res));
    res->socket = sock;
    ForceCallBackMacro;
    if(connect(sock, (struct sockaddr *) &server, sizeof(server)) != -1)
    {
        /* Bugger me! */
        Error("Unbelievable connect!");
        res->state  = TCP_CONN_ESTABLISHED;
        return res;
    }
    switch(errno)
    {
        case EINPROGRESS:
            res->state  = TCP_CONN_NASCENT;
            return res;
        default:
            local_err = _inet_error;
            socketclose(sock);
            Free(res);
            ErrorErr(&local_err);
            return NULL;  /* Shut up the compiler */
    }
}

tcp_bleeper_t do_tcp_listen(tcp_port_t port, int reuse)
{
    int sock;
    tcp_bleeper_t res;
    int on = 1;
    struct sockaddr_in server;
    _kernel_oserror local_err;

#ifdef TRACE
    printf("TcpListen\n");
#endif
    ForceCallBackMacro;
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if(sock < 0)
        ErrorErr(&_inet_error);

    /* Mark Socket non-blocking */
    ForceCallBackMacro;
    if(socketioctl(sock,FIONBIO, &on) < 0)
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    if (reuse) {
      /* Mark Socket as being able to reuse a local port */
      ForceCallBackMacro;
      on = 1;
      if(setsockopt(sock,SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0)
      {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
      }
    }

    /* First lets bind the socket to the right local port */
    memset(&server, 0, sizeof(server));
    server.sin_addr.s_addr = htonl(INADDR_ANY);
    server.sin_family = AF_INET;
    server.sin_port = htons((u_short)port);
    ForceCallBackMacro;
    if(bind(sock, (struct sockaddr *) &server, sizeof(server)))
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    if(listen(sock, 5))
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    res         = Malloc(sizeof(*res));
    res->socket = sock;
    return res;
}

tcp_bleeper_t TcpListen(tcp_port_t port)
{
  return do_tcp_listen(port, 0);
}

tcp_bleeper_t TcpListenAndCall(tcp_port_t sp, tcp_port_t dp, tcp_addr_t dip, tcp_conn_t *call) {

  tcp_bleeper_t b = NULL;
  tcp_conn_t c = NULL;

  ExceptVar(b);
  ExceptVar(c);
  ExceptTry
  {
    c = do_tcp_call(sp, dp, dip, 1);
    b = do_tcp_listen(((sp == TCP_PORT_ANY) ? TcpLocalPort(c) : sp), 1);
  }
  ExceptCatch
  {
    if (c)
      TcpClose(c);
    ExceptRethrow();
  }
  *call = c;
  return b;
}

tcp_conn_t TcpCall(tcp_port_t sp, tcp_port_t dp, tcp_addr_t dip)
{
  return do_tcp_call(sp, dp, dip, 0);
}

tcp_addr_t TcpLocalAddr(tcp_conn_t conn)
{
    tcp_addr_t result;
    struct sockaddr_in sockaddr;
    int len;

    len = sizeof(sockaddr);
    if(getsockname(conn->socket, (struct sockaddr *) &sockaddr, &len))
        ErrorErr(&_inet_error);
    len -= 4;
    result = Malloc(sizeof(*result));
    result->length = len;
    result->family = sockaddr.sin_family;
    if(len > 12)
        Error("Oversized address returned from getpeername");
    memcpy((char *) &result->addr, (char *) &sockaddr.sin_addr, len);
    return result;
}

tcp_port_t TcpLocalPort(tcp_conn_t conn)
{
    int len;
    struct sockaddr_in name;

    len = sizeof(name);
    if(getsockname(conn->socket, (struct sockaddr *) &name, &len))
        ErrorErr(&_inet_error);
    return htons((u_short)name.sin_port);
}

void TcpBleeperDelete(tcp_bleeper_t bleep)
{
#ifdef TRACE
    printf("TcpBleeperDelete\n");
#endif
    socketclose(bleep->socket);
    Free(bleep);
}

tcp_conn_t TcpAnswer(tcp_bleeper_t bleep)
{
    tcp_conn_t res;
    int sock;

#ifdef TRACE
    printf("TcpAnswer\n");
#endif
    sock = accept(bleep->socket, NULL, NULL);
    if(sock == -1)
    {
        switch(errno)
        {
            case EWOULDBLOCK:
                return NULL;
            default:
                ErrorErr(&_inet_error);
        }
    }
    res = Malloc(sizeof(*res));
    res->socket = sock;
    res->state = TCP_CONN_ESTABLISHED;
    return res;
}

void TcpSetNoDelay(tcp_conn_t conn)
{
    int flag;

#ifdef TRACE
    printf("TcpSetNoDelay\n");
#endif
    flag = 1;
    if(setsockopt(conn->socket, IPPROTO_TCP, TCP_NODELAY, &flag, sizeof(flag)) == -1)
        ErrorErr(&_inet_error);
}

void TcpDelete(tcp_conn_t conn)
{
#ifdef TRACE
    printf("TcpDelete\n");
#endif
    socketclose(conn->socket);
    Free(conn);
}

tcp_conn_state_t TcpConnState(tcp_conn_t conn)
{
    fd_set write_fds;
    struct timeval timeout;

    if (conn == NULL)
        return TCP_CONN_CLOSED;

#ifdef TRACE
    //printf("TcpConnState\n");
#endif
    switch (conn->state)
    {
        case TCP_CONN_NASCENT:
            ForceCallBackMacro;
            FD_ZERO(&write_fds);
            FD_SET(conn->socket, &write_fds);
            timeout.tv_sec = 0;
            timeout.tv_usec = 0;
            if(select(FD_SETSIZE, NULL, &write_fds, NULL, &timeout) < 0)
                ErrorErr(&_inet_error);
            if(FD_ISSET(conn->socket, &write_fds))
            {
                int error, size;

                size = sizeof(int);
                if(getsockopt(conn->socket, SOL_SOCKET,
                              SO_ERROR, &error, &size) < 0)
                    ErrorErr(&_inet_error);
                if(error)
                    Error("Connection failed (%d)\n", error);
                conn->state = TCP_CONN_ESTABLISHED;
            }
            break;
    }
    return conn->state;
}

char *TcpStateString(tcp_conn_state_t st)
{
#ifdef TRACE
    printf("TcpStateString\n");
#endif
    switch(st)
    {
        case TCP_CONN_NASCENT : return "Nascent";
        case TCP_CONN_ESTABLISHED : return "Established";
        case TCP_CONN_WRITE_ONLY : return "Write only";
        case TCP_CONN_READ_ONLY : return "Read only";
        case TCP_CONN_CLOSED : return "Closed";
        default: return "What!!!!";
    }
}

int TcpRead(void *buf, int size, tcp_conn_t conn)
{
    int read;

#ifdef TRACE
    static int total = 0;
#endif
    /* Assumes non blocking sockets */
    ForceCallBackMacro;
    read = recv(conn->socket, buf, size, 0);
#ifdef MemCheck_MEMCHECK
    memset(buf, 0, read);
#endif
    if(read == -1)
    {
        switch(errno)
        {
            case EWOULDBLOCK:
            {
                return 0;
            }
            default:
                ErrorErr(&_inet_error);
        }
    }
    if(read == 0)
    {
        switch(conn->state)
        {
            case TCP_CONN_ESTABLISHED:
                conn->state = TCP_CONN_WRITE_ONLY;
                break;
            default:
                conn->state = TCP_CONN_CLOSED;
                break;
        }
    }
#ifdef TRACE
    total += read;
    printf("TcpRead %d (%d)\n", read, total);
#endif
#if 0
{
  FILE *file;
  if (read) {
    file = fopen("dump","ab");
    fwrite(buf, 1, read, file);
    fclose(file);
  }
}
#endif
    return read;

}

int TcpWrite(void *buf, int size, tcp_conn_t conn)
{
    int sent;

#ifdef TRACE
    printf("TcpWrite\n");
#endif
    /* Socket must have been set non-blocking */
    ForceCallBackMacro;
    sent = send(conn->socket, buf, size, 0);
    if(sent == -1)
    {
        switch(errno)
        {
            case EWOULDBLOCK:
                return 0;
            default:
                ErrorErr(&_inet_error);
        }
    }
    return sent;
}

void TcpClose(tcp_conn_t conn)
{
#ifdef TRACE
    printf("TcpClose\n");
#endif
    if(conn->state == TCP_CONN_CLOSED)
        return;
    /* Shutdown the connection; further sends are disallowed */
    if(conn->state != TCP_CONN_NASCENT) {
      ForceCallBackMacro;
      if(shutdown(conn->socket, 1) != 0)
          ErrorErr(&_inet_error);
      conn->state = TCP_CONN_READ_ONLY;
    } else {
      conn->state = TCP_CONN_CLOSED;
    }
}

udp_conn_t UdpCreate(tcp_port_t local)
{
    int sock;
    udp_conn_t res;
    int on = 1;
    struct sockaddr_in server;
    _kernel_oserror local_err;

#ifdef TRACE
    printf("UdpCreate\n");
#endif
    ForceCallBackMacro;
    sock = socket(AF_INET, SOCK_DGRAM, 0);
    if(sock < 0)
        ErrorErr(&_inet_error);

    /* Mark Socket non-blocking */
    ForceCallBackMacro;
    if(socketioctl(sock,FIONBIO, &on) < 0)
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    /* First lets bind the socket to the right local port */
    memset(&server, 0, sizeof(server));
    server.sin_addr.s_addr = htonl(INADDR_ANY);
    server.sin_family = AF_INET;
    server.sin_port = htons((u_short)local);
    ForceCallBackMacro;
    if(bind(sock, (struct sockaddr *) &server, sizeof(server)))
    {
        local_err = _inet_error;
        socketclose(sock);
        ErrorErr(&local_err);
    }

    res         = Malloc(sizeof(*res));
    res->socket = sock;
    return res;
}

void UdpDelete(udp_conn_t conn)
{
#ifdef TRACE
    printf("UdpDelete\n");
#endif
    ForceCallBackMacro;
    socketclose(conn->socket);
    Free(conn);
}

tcp_port_t UdpLocalPort(udp_conn_t conn)
{
    int len;
    struct sockaddr_in name;

#ifdef TRACE
    printf("UdpLocalPort\n");
#endif
    len = sizeof(name);
    if(getsockname(conn->socket, (struct sockaddr *) &name, &len))
        ErrorErr(&_inet_error);
    return htons((u_short)name.sin_port);
}

int UdpRead(void *buf, int size, udp_conn_t conn)
{
    int read;

#ifdef TRACE
    printf("UdpRead\n");
#endif
    read = recv(conn->socket, buf, size, 0);
    if (read == -1)
    {
        switch(errno)
        {
            case EWOULDBLOCK:
                return 0;
            default:
                ErrorErr(&_inet_error);
        }
    }
    return read;
}

int UdpWrite(void * buf, int size, udp_conn_t conn)
{
    int written;

#ifdef TRACE
    printf("UdpWrite\n");
#endif
    written = send(conn->socket, buf, size, 0);
    if(written == -1)
    {
        switch(errno)
        {
            case EWOULDBLOCK:
                return 0;
            default:
                ErrorErr(&_inet_error);
        }
    }
    return written;
}
