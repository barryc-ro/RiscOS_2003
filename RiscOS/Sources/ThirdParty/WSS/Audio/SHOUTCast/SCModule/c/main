/*
    (c) Copyright Warm Silence Software Ltd, 2000
    All rights reserved.

    RJW  12/09/00: Initial version
*/

#include "MemCheck:MemCheck.h"
#include <stdio.h>
#include <string.h>
#include "socklib.h"
#include "sys/ioctl.h"
#include "net/if.h"
#include "netinet/in.h"
//#include "sys/sockio.h"

#include "swis.h"
#include "kernel.h"
#include "callback.h"
#include "error.h"
//#include "memory.h"
//#include "thread.h"
#include "tcp.h"
#include "SHOUTcast.h"
#include "shout.h"

_kernel_oserror* finalise(int fatal, int podule, void *pw)
{
    ExceptTry
    {
      CallBacksOff();
      Shout_Kill();
    }
    ExceptCatch
    {
        return ExceptCaught();
    }
    TcpFinalise();
    MemMinimalise();
    MemFinalise();
    return NULL;
}

#ifdef MemCheck_MEMCHECK
int mem_printf(void *reference, const char *format, va_list args)
{
    FILE *f;
    int n;

    f = fopen("MemFaults", "ab");
    if(f)
    {
        n = vfprintf(f, format, args);
        fclose(f);
    }
    return n;
}
#endif

_kernel_oserror *initialise(const char *cmd_tail, int podule, void *pw)
{
    MemCheck_Init();
    // MemCheck_RedirectToFilename("CIFS_Mem");
    MemCheck_RedirectToFunction(mem_printf, NULL);
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_SetQuitting(0, 0);
    // MemCheck_SetQuitting(1, 1);
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_SetStoreMiscFunctions(1);
    MemInitialise("SHOUTcast");

    ExceptTry
    {
      TcpInitialise();
      CallBackInit(pw);
    }
    ExceptCatch
    {
      return ExceptCaught();
    }
    return NULL;
}

_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    ExceptTry
    {
        MemCheck_RegisterMiscBlock(r, sizeof(*r));
        switch(swi_no)
        {
          case SHOUTcast_StreamStart - SHOUTcast_00:
          {
            char *url = (char *)r->r[0];
            MemCheck_RegisterMiscBlock(url, 1024);
            r->r[0] = (int)Shout_Start(url, r->r[1]);
            MemCheck_UnRegisterMiscBlock(url);
            break;
          }
          case SHOUTcast_StreamStop - SHOUTcast_00:
            Shout_Stop((shout_t)r->r[0], r->r[1]);
            break;
          case SHOUTcast_StreamState - SHOUTcast_00:
            Shout_State((shout_t)r->r[0], r->r[1], &r->r[0], &r->r[1], &r->r[2]);
            break;
          case SHOUTcast_StreamPause - SHOUTcast_00:
            Shout_Pause((shout_t)r->r[0], r->r[1]);
            break;
          case SHOUTcast_Debug - SHOUTcast_00:
            Shout_Debug();
            MemCheck_OutputBlocksInfo();
            break;
          default:
            Error("Illegal SWI");
            break;
        }
    }
    ExceptCatch
    {
        //printf("%s\n", ExceptCaught()->errmess);
        MemCheck_UnRegisterMiscBlock(r);
        return ExceptCaught();
    }
    MemCheck_UnRegisterMiscBlock(r);
    return NULL;
}
