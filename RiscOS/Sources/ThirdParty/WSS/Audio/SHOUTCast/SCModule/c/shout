/*
 *
 */

#include "MemCheck:memcheck.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "time.h"
#include "error.h"
#include "swis.h"
#include "kernel.h"

#include "http.h"
#include "shout.h"
#include "sc_state.h"
#include "callback.h"
#include "amplayer.h"

#define LOGGING (0)
#define NO_AMPLAYER (0)

#define BLOCKS		(10)
#define BLOCKSIZE	(4096)
#define METASIZE	(4096)		// Maximum Meta data size
#define HEADER_MAX	(2048)

#define HEADERSIZE (12)
typedef struct meta_s *meta_t;

typedef struct meta_s {
  meta_t  next;
  char   *key;
  char   *value;
  int     length;
} meta_s;

typedef struct data_s *data_t;

typedef struct data_s {
  int    used;
  meta_t meta;
  int    length;
  char   data[1];
} data_s;

typedef struct shout_s {
  shout_t     next;
  int         state;
  http_data_t http;
  int         handle;
  int         nextblock;
  int         fill;
  data_t      block[BLOCKS];
  int         metafill;
  char       *meta;
  int         metafreed;
  int         closed;
  int         finished;
  int         offset;
  int         paused;
  int         headers_read;
  int         length;
} shout_s;

/* A list of invocations. */
static shout_t shout = NULL;

#if LOGGING
static void log(char *format, ...) {

  FILE *file;
  va_list ap;

  file = fopen("<SHOUTcast$Dir>.Log","a");
  if (file) {
    va_start(ap, format);
    vfprintf(file, format, ap);
    va_end(ap);
    fclose(file);
  }
}
#endif

static void tidy_stream(shout_t s) {

  shout_t *t;

  if ((s->closed) && (s->finished)) {
    t = &shout;
    while ((*t) && (*t != s))
      t = &(*t)->next;
    if (*t)
      *t = s->next;
    Free(s);
  }
}

static char *str_ndup(const char *s, int n) {

  char *d;

  d = Malloc0(n+1);
  if (d) {
    strncpy(d, s, n);
    d[n] = 0;
  }
  return d;
}

static char *str_dup(const char *s) {

  char *d;

  d = Malloc0(strlen(s)+1);
  if (d) {
    strcpy(d, s);
  }
  return d;
}

static char *str_ndup_pre_post(const char *s, int n, const char *pre, const char *post) {

  char *d;

  MemCheck_RegisterMiscBlock(pre, 32);
  MemCheck_RegisterMiscBlock(post, 32);

  d = Malloc0(n+1+strlen(pre)+strlen(post));
  if (d) {
    strcpy(d, pre);
    strncat(d, s, n);
    strcat(d, post);
  }
  MemCheck_UnRegisterMiscBlock(pre);
  MemCheck_UnRegisterMiscBlock(post);
  return d;
}

static void extra_add(shout_t shout, const char *k, const char *v) {

  char *key, *value;
  meta_t record;

  MemCheck_RegisterMiscBlock(k, 32);
  key    = str_dup(k);
  value  = str_dup(v);
  record = Malloc0(sizeof(*record));
  if ((!value) || (!key) || (!record)) {
    Free(value);
    Free(key);
    Free(record);
    MemCheck_UnRegisterMiscBlock(k);
    return;
  }
  record->next   = shout->block[shout->nextblock]->meta;
  record->key    = key;
  record->value  = value;
  record->length = strlen(value)+1;
  shout->block[shout->nextblock]->meta = record;
  MemCheck_UnRegisterMiscBlock(k);
}

static void sanitise_metadata(shout_t shout) {

  char *s, *t, *key, *value, *k;
  meta_t record;

  s = shout->meta;

  while (1) {
    /* Count the length of the first key */
    k = s;
    while (*s && (*s != '=')) {
      s++;
    }
    if (*s != '=')
      return;
    /* Now copy the value */
    t = s+1;
    if (*t != '\'') {
      return;
    }
    t++;
    value = t;
    while (*t && (*t != '\'')) {
      t++;
    }
    if (*t != '\'') {
      return;
    }
    key    = str_ndup_pre_post(k, s-k, "SHOUTCAST_", "_asc");
    value  = str_ndup(value, t-value);
    record = Malloc0(sizeof(*record));
    if ((!value) || (!key) || (!record)) {
      Free(value);
      Free(key);
      Free(record);
      return;
    }
    record->next   = shout->block[shout->nextblock]->meta;
    record->key    = key;
    record->value  = value;
    record->length = strlen(value)+1;
    shout->block[shout->nextblock]->meta = record;
    if (strcmp(key, "SHOUTCAST_StreamTitle_asc") == 0) {
      extra_add(shout, "stream_asc", value);
    } else if (strcmp(key, "SHOUTCAST_StreamUrl_asc") == 0) {
      extra_add(shout, "stream_url", value);
    }
    t++;
    if (*t != ';')
      return;
    s = t+1;
  }
}

static void free_meta_data(data_t d) {

  meta_t m, n;

  m = d->meta;
  d->meta = NULL;
  while (m) {
    n = m->next;
    Free(m->key);
    Free(m->value);
    Free(m);
    m = n;
  }
}

static void add_header(shout_t shout, const char *match, const char *header) {

  char *key, *value;
  meta_t record;

  MemCheck_RegisterMiscBlock(match, 32);
  MemCheck_RegisterMiscBlock(header, 32);
  key = str_ndup(header, strlen(header));
  value = HTTP_CopyHeader(shout->http, match);
  record = Malloc0(sizeof(*record));
  if ((!key) || (!value) || (!record)) {
    Free(key);
    Free(value);
    Free(record);
    MemCheck_UnRegisterMiscBlock(match);
    MemCheck_UnRegisterMiscBlock(header);
    return;
  }
  record->next   = shout->block[shout->nextblock]->meta;
  record->key    = key;
  record->value  = value;
  record->length = strlen(value)+1;
  shout->block[shout->nextblock]->meta = record;
  MemCheck_UnRegisterMiscBlock(match);
  MemCheck_UnRegisterMiscBlock(header);
}

static void add_headers_as_meta(shout_t shout) {

  add_header(shout, "icy-name:",  "icy_name");
  add_header(shout, "icy-genre:", "icy_genre");
  add_header(shout, "icy-br:",    "icy_br");
  add_header(shout, "icy-url:",   "icy_url");
  add_header(shout, "icy-name:",  "station_asc");
  add_header(shout, "icy-genre:", "genre_asc");
  add_header(shout, "icy-br:",    "bitrate_asc");
  add_header(shout, "icy-url:",   "station_url");
}

static void check_finished(shout_t shout) {

  int finished, i;

  finished = shout->finished;
  if (!finished) {
    finished = 1;
    for (i = 0; i < BLOCKS; i++) {
      if (shout->block[i]->used)
        finished = 0;
    }
  }
  if (finished) {
#if LOGGING
    log("check_finished: complete detected");
#endif
    shout->state = SC_COMPLETE;
    for (i = 0; i < BLOCKS; i++) {
      free_meta_data(shout->block[i]);
      Free(shout->block[i]);
      shout->block[i] = NULL;
    }
    Free(shout->meta);
    shout->meta = NULL;
    shout->finished = 1;
  }
  tidy_stream(shout);
}

static void do_poll(shout_t shout) {

  int i;
  int n, state, sstate, block_free;
  char *s;
  _kernel_oserror *err;

  ExceptTry
  {
    if (shout->http) {
      n = 0;
      do {
        /* Still getting data. Grab a free block, and try for more data */
        block_free = (shout->block[shout->nextblock]->used == 0);
        if (block_free) {
          /* Free any outstanding meta data */
          if (shout->metafreed == 0) {
            free_meta_data(shout->block[shout->nextblock]);
            shout->metafreed = 1;
          }
          /* The block is free. */
          state = HTTP_GetState(shout->http);
          if (state == SC_METADATA) {
#if LOGGING
 log("do_poll: Metadata");
#endif
            /* Fetch some metadata */
            n = HTTP_GetData(shout->http, shout->meta, METASIZE-shout->metafill);
            shout->metafill += n;
            shout->state = HTTP_GetState(shout->http);
            if (shout->state != SC_METADATA) {
              /* Got a new batch of metadata */
              if (shout->metafill > 1) {
                /* We actually read some metadata! */
                sanitise_metadata(shout);
                shout->metafill = 0;
              }
            }
          } else {
#if LOGGING
 log("do_poll: Normal data");
#endif
            /* Fetch some normal data */
            n = HTTP_GetData(shout->http, &shout->block[shout->nextblock]->data[shout->fill], BLOCKSIZE-HEADERSIZE-shout->fill);
            shout->offset += n;
            shout->fill += n;
            shout->state = HTTP_GetState(shout->http);
          }
          if ((shout->headers_read == 0) && ((shout->state == SC_FETCHING) || (shout->state == SC_COMPLETE))) {
            add_headers_as_meta(shout);
            shout->headers_read = 1;
            s              = HTTP_CopyHeader(shout->http, "Content-Length:");
            if (s) {
              shout->length  = atoi(s);
              Free(s);
            }
          }
          if ((shout->fill == BLOCKSIZE-HEADERSIZE) || ((shout->state == SC_COMPLETE) && (shout->fill != 0))) {
#if LOGGING
 log("do_poll: Giving Data");
#endif
            /* Full block, or end of data with some outstanding */
#if 0
            {
              FILE *file;
              file = fopen("data","a+");
              fwrite(&shout->block[shout->nextblock]->data[0], 1, shout->fill, file);
              fclose(file);
            }
#endif
            shout->block[shout->nextblock]->length = shout->fill;
            //printf("block=%d, meta=%x\n", shout->nextblock, shout->block[shout->nextblock]->meta);
#if NO_AMPLAYER
            err = NULL;
#else
            err = _swix(AMPlayer_StreamGiveData, _INR(0,1), shout->handle, (int)(shout->block[shout->nextblock]));
#endif
            if (err) {
              Error("AMPlayer died!");
            }
            shout->fill = 0;
            shout->nextblock = (shout->nextblock+1) % BLOCKS;
            shout->metafreed = 0;
          }
          if ((shout->state == SC_COMPLETE) || (shout->state == SC_FAILED)) {
#if LOGGING
 log("do_poll: COMPLETE or FAILED");
#endif
            HTTP_Close(shout->http);
            shout->http = NULL;
#if NO_AMPLAYER
            sstate = 1;
#else
            _swix(AMPlayer_StreamInfo, _IN(0) | _OUT(0), shout->handle, &sstate);
#endif
            if ((sstate & 5) == 5) /* If the stream is active and paused */
            {
              /* If the user hasn't explicitly paused us */
              if (shout->paused == 0) {
                /* Unpause */
#if NO_AMPLAYER
                _swix(AMPlayer_Pause, _IN(0), 1);
#endif
                sstate &= ~4;
              }
            }
#if !NO_AMPLAYER
            _swix(AMPlayer_StreamClose, _IN(0), shout->handle);
#endif
            shout->closed = 1;
          }
        }
      } while (n && block_free && ((shout->state == SC_FETCHING) || (shout->state == SC_METADATA)));
#if NO_AMPLAYER
      sstate = 1;
#else
      err = _swix(AMPlayer_StreamInfo, _IN(0) | _OUT(0), shout->handle, &sstate);
#endif
      if (err) {
#if LOGGING
        log("do_poll: AMPlayer_StreamInfo failed!");
#endif
        Error("Stream Closed from under me!");
      }
      if (((sstate & 7) == 7)                     /* If the stream is active, full, and paused */
          ||                                      /* or */
          (((sstate & 7) == 5) && (!block_free))  /* If the stream is active, paused, and we have no spare blocks */
          ||                                      /* or */
          (((sstate & 7) == 5) && (!shout->http)))/* If the stream is active, paused, and has finished fetching */
      {
        if (shout->paused == 0) {
          /* Unpause */
#if LOGGING
          log("Unpausing!");
#endif
#if !NO_AMPLAYER
          err = _swix(AMPlayer_Pause, _IN(0), 1);
          if (err) {
#if LOGGING
          log("Error while unpausing");
#endif
          }
#endif
          sstate &= ~4;
        }
      }
      if ((shout->state == SC_FETCHING) || (shout->state == SC_METADATA)) {
        if (sstate & 4) {
          shout->state = SC_BUFFERING;
        } else {
          shout->state = SC_PLAYING;
        }
      }
    }
    /* Don't do this as an else... */
    if (!shout->http) {
      shout->state = SC_ENDING;
      /* No more data to get - just waiting for the blocks to free themselves */
      check_finished(shout);
    }
  }
  ExceptCatch
  {
#if LOGGING
    log("Exception caught in do_poll");
#endif
    //printf("Error in do_poll: %s\n", ExceptCaught()->errmess);
    shout->state = SC_COMPLETE;
    for (i = 0; i < BLOCKS; i++) {
      free_meta_data(shout->block[i]);
      Free(shout->block[i]);
      shout->block[i] = NULL;
    }
    Free(shout->meta);
    shout->meta = NULL;
    shout->finished = 1;
    tidy_stream(shout);
  }
}

static void poll(void *dummy) {

  shout_t s, t;

  s = shout;
  while (s) {
    t = s->next;
    do_poll(s);
    s = t;
  }

  if (shout)
    CallBackAfter(poll, NULL, 10);
}

/*
 *  External interface
 */

shout_t Shout_Start(const char *url, int flags) {

  shout_t s;
  _kernel_oserror *err;
  int i;

  if (flags != 0) {
#if LOGGING
    log("Shout_Start failed: flags != 0");
#endif
    Error("SHOUTcast_StreamStart flags != 0");
  }

  if (shout) {
    /* Only allow a new one to be added if the old one has been closed down */
    if (shout->closed == 0) {
#if LOGGING
      log("SHOUTcast_StreamStart: Already streaming");
#endif
      Error("SHOUTcast_StreamStart: Already streaming");
    }
  }

  s = NULL;
  ExceptVar(s);
  ExceptTry
  {
    s = Malloc(sizeof(*s));
    memset(s, 0, sizeof(*s));
    for (i = 0; i < BLOCKS; i++) {
      s->block[i] = (data_t)Malloc(BLOCKSIZE);
      memset(s->block[i],0,BLOCKSIZE);
      s->block[i]->used   = 0;
      s->block[i]->meta   = 0;
      s->block[i]->length = BLOCKSIZE-HEADERSIZE;
    }
    s->meta = Malloc(METASIZE);

    s->http = HTTP_GetUrl(url);
#if NO_AMPLAYER
    s->handle = -1;
    err = NULL;
#else
    err = _swix(AMPlayer_StreamOpen, _INR(0,1) | _OUT(0), 2, "SHOUTcast Stream", &s->handle);
#endif
    if (err)
      Error(err->errmess);
    s->paused       = 0;
    s->nextblock    = 0;
    s->fill         = 0;
    s->metafill     = 0;
    s->metafreed    = 0;
    s->closed       = 0;
    s->finished     = 0;
    s->offset       = 0;
    s->headers_read = 0;
    s->length       = -1;
  }
  ExceptCatch
  {
#if LOGGING
    log("Exception caught in Shout_Start");
#endif
    if (s) {
      if (s->http) {
        HTTP_Close(s->http);
      }
      for (i = 0; i < BLOCKS; i++) {
        free_meta_data(shout->block[i]);
        Free(s->block[i]);
        s->block[i] = NULL;
      }
      Free(s->meta);
      s->meta = NULL;
      Free(s);
    }
    ExceptRethrow();
  }

  s->next = shout;
  shout = s;
  CallBackAfter(poll, NULL, 10);

  return shout;
}

void Shout_Stop(shout_t s, int flags) {

  shout_t t;

  if (flags != 0) {
#if LOGGING
    log("SHOUTcast_StreamStop: flags != 0");
#endif
    Error("SHOUTcast_StreamStop: flags != 0");
  }

  t = shout;
  while (t && (t != s))
    t = t->next;
  if (!t) {
#if LOGGING
    log("SHOUTcast_StreamStop: Not a current stream!");
#endif
    Error("SHOUTcast_StreamStop: Not a current stream!");
  }

  if (s->http) {
    HTTP_Close(s->http);
    s->http = NULL;
#if !NO_AMPLAYER
    _swix(AMPlayer_StreamClose, _IN(0), s->handle);
#endif
  }
  if (!s->finished) {
    _swix(AMPlayer_Stop, _IN(0), 0);
  }
  s->closed = 1;
  check_finished(s);
}

void Shout_State(shout_t s, int flags, int *state, int *bytes, int *total) {

  shout_t t;

  if (flags != 0) {
#if LOGGING
    log("Shout_State: flags != 0!");
#endif
    Error("SHOUTcast_StreamState: flags != 0!");
  }

  t = shout;
  while (t && (t != s))
    t = t->next;
  if (!t) {
#if LOGGING
    log("SHOUTcast_StreamState: Not a current stream!");
#endif
    Error("SHOUTcast_StreamState: Not a current stream!");
  }

  *state = s->state;
  *bytes = s->offset;
  *total = s->length;
}

static void do_kill(shout_t shout) {

  int i, finished;

  Shout_Stop(shout, 0);

  finished = shout->finished;
  if (!finished) {
    finished = 1;
    for (i = 0; i < BLOCKS; i++) {
      if (shout->block[i]->used)
        finished = 0;
    }
  }
  if (!finished) {
    _swix(AMPlayer_Stop, _IN(0), 0);
#if LOGGING
    log("SHOUTcast module can't die while AMPlayer is holding blocks! Try again in a mo...");
#endif
    Error("SHOUTcast module can't die while AMPlayer is holding blocks! Try again in a mo...");
  }
  for (i = 0; i < BLOCKS; i++) {
    free_meta_data(shout->block[i]);
    Free(shout->block[i]);
    shout->block[i] = NULL;
  }
  Free(shout->meta);
  shout->meta = NULL;
  shout->finished = 1;
  tidy_stream(shout);
}

void Shout_Kill(void) {

  shout_t s, t;

  if (!shout)
    return;

  s = shout;
  while (s) {
    t = s->next;
    do_kill(s);
    s = t;
  }
}

void Shout_Pause(shout_t s, int pause) {

  shout_t t;
  int sstate, block_free;

  t = shout;
  while (t && (t != s))
    t = t->next;
  if (!t) {
#if LOGGING
    log("SHOUTcast_StreamPause: Not a current stream!");
#endif
    Error("SHOUTcast_StreamPause: Not a current stream!");
  }

  s->paused = pause;

#if NO_AMPLAYER
  sstate = 1;
#else
  _swix(AMPlayer_StreamInfo, _IN(0) | _OUT(0), s->handle, &sstate);
#endif
  pause = (sstate & 4)>>2;
  if (s->paused != pause) {
    /* Need to change the pause state */
    if (s->paused == 0) {
      /* May need to unpause, but only if the prudent economic conditons have been met. */
      block_free = (s->block[s->nextblock]->used == 0);
      if (((sstate & 7) == 7)                     /* If the stream is active, full, and paused */
          ||                                      /* or */
          (((sstate & 7) == 5) && (!block_free))  /* If the stream is active, paused, and we have no spare blocks */
          ||                                      /* or */
          (((sstate & 7) == 5) && (!s->http)))    /* If the stream is active, paused, and has finished fetching */
      {
        /* Unpause it! */
#if !NO_AMPLAYER
        _swix(AMPlayer_Pause, _IN(0), 1);
#endif
      }
    } else {
      /* Need to pause */
#if !NO_AMPLAYER
      _swix(AMPlayer_Pause, _IN(0), 0);
#endif
    }
  }
}

void Shout_Debug(void) {

  shout_t s;
  int i;

  s = shout;
  while (s) {
    printf("Stream %x:\n", s);
    printf("  HTTP: %x:\n", s->http);
    printf("  State: %d\n", s->state);
    printf("  Paused: %d\n", s->paused);
    printf("  Finished: %d\n", s->finished);
    printf("  Closed: %d\n", s->closed);
    for (i = 0; i < BLOCKS; i++) {
      printf("[%x,%d] ", s->block[i], s->block[i]->used);
    }
    printf("\n\n");
    s = s->next;
  }

}
