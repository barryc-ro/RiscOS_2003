/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 20/12/96: Initial version
    PHBG 5/2/97:   Added UDP support
*/

#ifndef _TCP_
#define _TCP_

typedef int tcp_port_t;
typedef struct tcp_addr_s *tcp_addr_t;
/* Ports and IP addresses are just integers. */

typedef struct tcp_conn_s *tcp_conn_t;
typedef struct tcp_bleeper_s *tcp_bleeper_t;
/*
    Things of type tcp_conn_t are full duplex connections between
    a local port and a port on a remote host, specified by its
    IP address.

    A connection can be created by making an outgoing call, or by
    having a bleeper, which listens on a port for incoming calls.
*/

typedef struct udp_conn_s *udp_conn_t;
/*
    Things of type udp_conn_t are unreliable connections that may not even
    have a corresponding other-half on the remote machine.  Soon as you
    create one you can read from and write to it, but you may be just
    pissing in the wind.
*/

typedef enum
{
  TCP_CONN_NASCENT,         /* Connection being formed */
  TCP_CONN_ESTABLISHED,	    /* Connection established */
  TCP_CONN_WRITE_ONLY,      /* Closed at the remote end (still writable) */
  TCP_CONN_READ_ONLY,       /* Closed at the local end (still readable) */
  TCP_CONN_CLOSED           /* Closed both ends */
} tcp_conn_state_t;


#ifndef NULL
#define NULL (0)
#endif

#define TCP_ADDR_RESOLVING ((tcp_addr_t) (-1))
#define TCP_ADDR_UNKNOWN ((tcp_addr_t)(-2))
/*
    Requests for resolution return RESOLVING while the request is being
    worked on, and either UNKNOWN or the IP address, on completion.
*/

#define TCP_PORT_ANY (0)
/*
    When making an outgoing call, you can ask that a fresh port be chosen
    for you by specifying TCP_PORT_ANY
*/

void TcpInitialise(void);
/*
  Must be called before any other entry point.
*/

void TcpFinalise(void);
/*
  Call when you've finished with this tcp module.
*/

tcp_addr_t TcpResolve(char * /* URL */);
/*
  Request for address resolution.
*/

void TcpFreeAddr(tcp_addr_t);
/*
  IP addresses are not trivial structures and need freeing.
*/


tcp_conn_t TcpCall(tcp_port_t /* local */,
                   tcp_port_t /* remote */,
                   tcp_addr_t /* remote */);
/*
  Make an outgoing call.
*/

tcp_addr_t TcpLocalAddr(tcp_conn_t);
/*
  Return the local address of a TCP connection.
*/

tcp_port_t TcpLocalPort(tcp_conn_t);
/*
  Return the local port of a TCP connection.
*/

tcp_bleeper_t TcpListen(tcp_port_t /* local */);
/*
  Wait on a port for incoming calls.
*/

tcp_bleeper_t TcpListenAndCall(tcp_port_t   /* local */,
                               tcp_port_t   /* remote */,
                               tcp_addr_t   /* remote */,
                               tcp_conn_t * /* Connection */);
/*
  Wait on a port for incoming calls, and on the same port make an
  outgoing call.
*/

tcp_conn_t TcpAnswer(tcp_bleeper_t);
/*
  Poll for an incoming call.  NULL means there isn't one.
*/

void TcpBleeperDelete(tcp_bleeper_t bleep);
/*
  Delete a bleeper.
*/

tcp_conn_state_t TcpConnState(tcp_conn_t);
/*
  Monitor state of connection.  When a connection becomes half closed,
  you should write your remaining data to it, before closing it at the
  local end.
*/

char *TcpStateString(tcp_conn_state_t);
/*
  Turn state into something printable.
*/

int TcpRead(void *, int, tcp_conn_t);
/*
  Read from a connection.  Won't block.  Might return 0.
*/

int TcpWrite(void *, int, tcp_conn_t);
/*
  Write to a connection.  Won't block.  Might return 0.
*/

void TcpClose(tcp_conn_t);
/*
  Request closing of a connection. After doing this, wait for remaining
  data, until the closed state is reached.
*/

void TcpDelete(tcp_conn_t);
/*
  Best done when a connection is closed, but can be called for a
  connection in any state.
*/

udp_conn_t UdpCreate(tcp_port_t /* local */);
/*
  Create the local half of a UDP connection.
*/

tcp_port_t UdpLocalPort(udp_conn_t);
/*
  Find out what port we're on.
*/

int UdpRead(void *, int, udp_conn_t);
/*
  Read from a connection.  Won't block.  Might return 0.
*/

int UdpWrite(void *, int, udp_conn_t);
/*
  Write to a connection.  Won't block.  Might return 0.
*/

void UdpDelete(udp_conn_t);
/*
  Remove local half of a UDP connection.
*/

#endif
