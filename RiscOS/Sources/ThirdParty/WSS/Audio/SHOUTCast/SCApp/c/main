/*
 *
 */

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "utils.h"

#include "kernel.h"
#include "swis.h"

#include "WSSerr.h"
#include "WSSfs.h"
#include "WSSgr.h"
#include "WSSicn.h"
#include "WSSplugin.h"
#include "WSSslider.h"
#include "WSSwin.h"
#include "WSStask.h"
#include "WSSvar.h"

#include "MemCheck.Memcheck.h"

#include "amplayer.h"
#include "shoutcast.h"
#include "sc_state.h"

#define FILETYPE_SHOUTCAST	(0xAA8)
#define FILETYPE_M3U		(0xAA7)

static int invisible_mode;

/* Types */
typedef struct stream_s *stream_t;

typedef struct stream_s {
  stream_t        next;
  win_window      window;
  int             helper;
  int             handle;
  int             filetype;
  int             fetching;
  plugin_fetch_t  fetch_handle;
  int             meta_pollword;
  int             playlist_index;
  char           *filename;
  char           *station;
  char           *genre;
  char           *station_url;
  char           *bitrate;
  int             bytes;
  int             total;
  char           *song;
  char           *song_url;
  icn_icon       *icons;
  int             plugin_state;
  int             paused;
  char           *url;
  char           *basehref;
} stream_s;

/* Vars */
static int log_errors = 0;
static stream_t instance_list = NULL;

static win_template shout_tplt = NULL;
static win_template shoutt_tplt = NULL;

static void error(_kernel_oserror *err) {

  FILE *file;

  if (log_errors) {
    file = fopen("<SHOUTcast$Dir>.Log", "a");
    if (file == NULL) {
      WinMessage(err);
      return;
    }
    fprintf(file, "%s\n", err->errmess);
    fclose(file);
  } else {
    WinMessage(err);
  }
}

/******************************************************************************************/
/* Interface to SHOUTcast module */
int shout_play(char *url) {

  _kernel_oserror *err;
  int handle;

  //WinMessage((_kernel_oserror *)"1234Starting");
  err = _swix(SHOUTcast_StreamStart, _INR(0,1) | _OUT(0), url, 0, &handle);
  //WinMessage((_kernel_oserror *)"1234Started");
  if (err) {
    //char text[256];
    //sprintf(text, "1234SHOUTcast_StreamStart: %s", err->errmess);
    //WinMessage((_kernel_oserror *)text);
    ErrorErr(err);
  }
  return handle;
}

void shout_stop(stream_t s) {

  if (!s)
    return;
  if (!s->handle)
    return;

  //WinMessage((_kernel_oserror *)"1234Stoping");
  _swix(SHOUTcast_StreamStop, _INR(0,1), s->handle, 0);
  //WinMessage((_kernel_oserror *)"1234Stopped");
  s->handle = NULL;
}

void shout_pause(stream_t s, int pause) {

  if (!s)
    return;
  if (!s->handle)
    return;

  s->paused = pause;
  //WinMessage((_kernel_oserror *)"1234Pausing");
  _swix(SHOUTcast_StreamPause, _INR(0,1), s->handle, pause);
  //WinMessage((_kernel_oserror *)"1234Paused");
}

int shout_state(stream_t s) {

  _kernel_oserror *err;
  int state;

  //WinMessage((_kernel_oserror *)"1234Stating");
  err = _swix(SHOUTcast_StreamState, _INR(0,1) | _OUTR(0,2), s->handle, 0, &state, &s->bytes, &s->total);
  //WinMessage((_kernel_oserror *)"1234Stated");
  if (err) {
    //char text[256];
    //sprintf(text, "1234SHOUTcast_StreamState: %s", err->errmess);
    //WinMessage((_kernel_oserror *)text);
    //ErrorErr(err);
    return SC_COMPLETE;
  }
  return state;
}

int shout_metachanged(stream_t s) {

  _kernel_oserror *err;
  int i, j;

  err = _swix(AMPlayer_MetaDataPollChange, _OUT(0), &i);
  if (err)
    ErrorErr(err);
  j = (i != s->meta_pollword);
  s->meta_pollword = i;
  return j;
}

char *shout_metalookup(stream_t s, const char *c) {

  _kernel_oserror *err;
  int len;
  char *v = NULL;

  err = _swix(AMPlayer_MetaDataLookup, _INR(0,2) | _OUT(2), c, 0, 0, &len);
  if ((len > 0) && (!err)) {
    v = Malloc(len);
    err = _swix(AMPlayer_MetaDataLookup, _INR(0,2), c, v, len);
  }
  if (err)
    ErrorErr(err);
  return v;
}

/******************************************************************************************/

static void load_windows(void) {

  shout_tplt = WinLdTplt("<SHOUTcast$Dir>.Templates", "shoutcast");
  if (shout_tplt == NULL)
    ErrorFatal("Can't find \"shoutcast\" in \"<SHOUTcast$Dir>.Templates\"");
  shoutt_tplt = WinLdTplt("<SHOUTcast$Dir>.Templates", "shoutcastt");
  if (shoutt_tplt == NULL)
    ErrorFatal("Can't find \"shoutcastt\" in \"<SHOUTcast$Dir>.Templates\"");
}

static void close(win_window win, int fatal) {

  stream_t s;
  stream_t *p;

  ExceptTry
  {
    s = WinGetData(win);

    p = &instance_list;
    while (*p != s) {
      if (*p == NULL)
        Error("Close request for a non-existent instance!");
      p = &(*p)->next;
    }
    *p = (*p)->next;
    if (s->fetching) {
      if (s->fetching != 2) {
        PlugInFetchAbandon(s->fetch_handle);
      }
    } else {
      shout_stop(s);
    }
    WinKill(s->window);
    Free(s);
  }
  ExceptCatch
  {
    error(ExceptCaught());
  }
}

static void close_clicked(void) {

  stream_t s;

  s = (stream_t)WinData();
  PlugInDie(s->window);
}

static void do_next(stream_t s) {

  if (!s)
    return;
  if (s->fetching)
    return;
  shout_stop(s);
}

static void next_clicked(void) {

  stream_t s;

  s = (stream_t)WinData();
  do_next(s);
}

static void resize(win_window win, int w, int h) {

  stream_t s;
  int rw, rh, rx, ry;

  s = WinGetData(win);
  if (s->helper == 0) {
    /* Can't resize the tools window */
#if 0
    WinGetSize(win, &rw, &rh);
#else
    WinExtent(win, &rx, &ry, &rw, &rh);
    rw -= rx;
    rh -= ry;
#endif
    if ((rw != w) || (rh != h)) {
      PlugInResizeRequest(win, rw, rh);
    }
  }
}

static char *make_relative_url(char *base, char *rel) {

  char *url, *p, *q;

  p = base;
  q = base;
  /* Find the last / */
  while (*p) {
    if (*p == '/')
      q = p;
    p++;
  }
  url = Malloc(q - base + 1 + strlen(rel) + 1);
  url[0] = 0;
  strncat(url, base, q-base+1);
  strcat(url, rel);
  return url;
}

#define MAXLINE 256

static char *getline(FILE *file) {

  static char line[MAXLINE];
  int i;
  char c;
  line[0] = 0;

  c = fgetc(file);
  /* Skip over intial control characters */
  while ((c < 31) && (c != 9) && (!feof(file)))
    c = fgetc(file);
  if (feof(file))
    return line;

  /* Now read the rest of the line */
  i = 0;
  line[i++] = c;
  do {
    line[i++] = fgetc(file);
    if ((i == 1) && (line[0] < 31)) {
      i--;
    }
  } while ((!feof(file)) && ((line[i-1] >= 32) || (line[i-1] == 9)) && (i < MAXLINE));
  line[i-1] = 0;
  return line;
}

static char *lower(char *t) {

  char *s = t;

  while (*t) {
    *t = tolower(*t);
    t++;
  }
  return s;
}

static void do_read_url(const char *l, stream_t s) {

  char *url;

  url = NULL;
  ExceptVar(url);
  ExceptTry
  {
    url = Malloc(strlen(l)+1);
    strcpy(url, l);
    //{ _kernel_oserror e;
    //  sprintf(e.errmess, "'%s'", url);
    //  error(&e);
    //}
    s->handle = shout_play(url);
    Free(url);
  }
  ExceptCatch
  {
    if (url)
      Free(url);
    ExceptRethrow();
  }
}

static void do_open_m3u(stream_t s) {

  FILE *file;
  char *l;

  file = NULL;

  ExceptVar(file);
  ExceptTry
  {
    file = fopen(s->filename,"r");
    if (!file)
      Error("File %s refused to open!", s->filename);
    fseek(file, s->playlist_index, SEEK_SET);
    do {
      l = getline(file);
    } while (*l == '#');
    if (strncasecmp(l, "http:", 5) != 0) {
      Error("Unrecognised meta file!");
    }
    s->playlist_index = (int)ftell(file);
    do_read_url(l, s);
    fclose(file);
  }
  ExceptCatch
  {
    if (file)
      fclose(file);
    ExceptRethrow();
  }
}

static void do_open_shoutcast(stream_t s) {

  FILE *file;
  char *l;
  //int i;
  int found;
  long pos;

  file = NULL;
  ExceptVar(file);
  ExceptTry
  {
    file = fopen(s->filename,"r");
    if (!file)
      Error("File %s refused to open!", s->filename);
    l = lower(getline(file));
    if (strncasecmp(l, "[playlist]", 10) != 0) {
      /* Not a shoutcast file */
      Error("Not a shoutcast playlist file!\n");
    }
    /* Shoutcast playlist file! */
#if 0
    l = getline(file);
    if (strncasecmp(l, "numberofentries=", 16) != 0)
      Error("Not a shoutcast playlist file!\n");
    i = atoi(l+16);
#endif
    s->playlist_index++;
    found = 0;
    do {
      pos = ftell(file);
      l = getline(file);
      if        (strncasecmp(l, "file", 4) != 0) {
      } else if (atoi(l+4) != s->playlist_index) {
      } else {
        /* So it starts with file%d as required */
        l += 4;
        while (isdigit(*l))
          l++;
        if (*l == '=') {
          l++;
          found = 1;
        }
      }
    } while ((!feof(file)) && (!found));

    if (found) {
      do_read_url(l, s);
    } else {
      /* No more streams to play */
      Error("No more to play");
    }
    fclose(file);
  }
  ExceptCatch
  {
    s->handle = NULL;
    if (file)
      fclose(file);
    ExceptRethrow();
  }
}

static _kernel_oserror *do_open(stream_t s) {

  ExceptTry
  {
    if (s->filetype == FILETYPE_SHOUTCAST) {
      do_open_shoutcast(s);
    } else if (s->filetype == FILETYPE_M3U) {
      do_open_m3u(s);
    } else {
      Error("File '%s' not of recognised type '%x'", s->filename, s->filetype);
    }
  }
  ExceptCatch
  {
    return ExceptCaught();
  }
  return NULL;
}

static win_window open(plugin_params_t params, int helper, int type) {

  volatile stream_t s;
  char *mime, *p;
  int found;
  _kernel_oserror *err;

  /* First off, kill the old instances */
  while (instance_list) {
    close(instance_list->window, 0);
  }

  s = NULL;
  ExceptVar(s);
  ExceptTry
  {
    s = Malloc(sizeof(*s));
    s->playlist_index = 0;
    s->filename       = NULL;
    s->filetype       = type;
    s->station        = NULL;
    s->genre          = NULL;
    s->station_url    = NULL;
    s->bitrate        = NULL;
    s->bytes          = -1;
    s->total          = -1;
    s->song           = NULL;
    s->song_url       = NULL;
    s->plugin_state   = PLUGIN_ACTION_PLAY;
    s->paused         = 0;
    s->url            = 0;
    s->basehref       = 0;
    s->fetching       = 0;
    s->fetch_handle   = 0;
    found = PlugInParamsLookup(params, "basehref", &s->basehref, &mime);
    if (found == 0) {
      s->basehref = NULL;
      //Error("Basehref not supplied!");
    }
    found = PlugInParamsLookup(params, "src", &s->url, &mime);
    if (found == 0)
      found = PlugInParamsLookup(params, "data", &s->url, &mime);
    if (found == 0)
      Error("Can't find SRC or DATA tag!");
    if (helper) {
      s->window = WinCreate(shoutt_tplt);
      /* Preempt WSSlib helpfully opening it at the front */
      if (invisible_mode) {
        WinOpenHidden(s->window);
      }
    } else {
      s->window = WinCreate(shout_tplt);
    }
    s->icons = IcnButtons(s->window);

    IcnClickS(s->icons[0], close_clicked);
    IcnClickM(s->icons[0], close_clicked);
    IcnClickA(s->icons[0], close_clicked);

    IcnClickS(s->icons[18], next_clicked);
    IcnClickM(s->icons[18], next_clicked);
    IcnClickA(s->icons[18], next_clicked);

    WinSetData(s->window, (void *)s);
    if (strncasecmp(s->url, "file:", 5) == 0) {
      s->basehref = NULL;
    } else if ((strncasecmp(s->url, "http:", 5)  == 0)  || (strncasecmp(s->url, "https:", 6) == 0)) {
      s->basehref = NULL;
    } else {
      /* Relative URL??? */
      if (s->basehref)
        s->url = make_relative_url(s->basehref, s->url);
    }
    if (strncasecmp(s->url, "file:", 5) == 0) {
      p = s->url+5;
      while (*p == '/')
        p++;
      s->filename = Malloc(strlen(p)+9);
      strcpy(s->filename, p);
      //m->titlename = gettitle(m->filename);
      p = s->filename;
      while (*p) {
        if (*p == '.')
          *p = '/';
        else if (*p == '/')
          *p = '.';
        p++;
      }
      err = do_open(s);
      if (err)
        Error(err->errmess);
      if (s->basehref) {
        Free(s->url);
        s->basehref = 0;
      }
    } else {
      if (s->basehref == 0) {
        s->url = make_relative_url("", s->url);
      }
      s->filename = NULL;
      s->fetching = 2;
      //Error("Unsupported URL type!");
    }
    s->next = instance_list;
    instance_list = s;
  }
  ExceptCatch
  {
    if (s) {
      Free(s);
    }
    error(ExceptCaught());
    return NULL;
  }
  return s->window;
}

static win_window open_sc(plugin_params_t params, int helper) {

  return open(params, helper, FILETYPE_SHOUTCAST);
}

static win_window open_m3u(plugin_params_t params, int helper) {

  return open(params, helper, FILETYPE_M3U);
}

static void new_meta(stream_t s, char **c, char *key, int icnum) {

  char *n;
  int changed;

  ExceptTry
  {
    n = shout_metalookup(s, key);
    changed = 0;
    if ((n == NULL) && (*c == NULL)) {
      /* No change */
    } else if ((*c == NULL) || (n == NULL)) {
      changed = 1;
    } else {
      changed = (strcmp(n, *c) != 0);
    }

    if (changed) {
      Free(*c);
      *c = NULL;
    }
  }
  ExceptCatch
  {
    changed = 1;
    Free(*c);
    *c = NULL;
    n = NULL;
  }

  if (changed) {
    *c = n;
    if (*c)
      IcnSetText(s->icons[icnum], *c);
    else
      IcnSetText(s->icons[icnum], "");
  }
}

static void do_poll(stream_t s) {

  int state, t, b;
  int x0, y0;
  char *temp;
  char text[16];
  _kernel_oserror *err;

  ExceptVar(s);

  ExceptTry
  {
    if (s->fetching) {
      if (s->fetching == 2) {
        s->fetching = 1;
        s->fetch_handle = PlugInFetchAsFile(s->url, s->window, NULL);
        Free(s->url);
        s->url = NULL;
        return;
      }
      /* Fetching */
      state = PlugInFetchState(s->fetch_handle);
      if (state < 0)
        Error("Fetch returned error: %d", state);
      if ((state == FETCH_USERKILLED) || (state == FETCH_FAILED))
        Error("Plugin HTTP fetch failed!");
      if (state == FETCH_FINISHED) {
        s->fetching = NULL;
        temp = PlugInFetchReturnFilename(s->fetch_handle);
        s->filename = Malloc(strlen(temp)+1);
        strcpy(s->filename, temp);
        Free(temp);
        WinGetPlace(s->window, &x0, &y0);
        //do_open(s);
        WinPlace(s->window, x0, y0);
        if (s->helper) {
          if (invisible_mode) {
            WinOpenHidden(s->window);
          } else {
            WinOpen(s->window);
          }
          resize(s->window, 0, 0);
        }
        s->fetch_handle = NULL;
        err = do_open(s);
        if (err) {
          Error(err->errmess);
        }
      }
    } else {
      /* Playing */
      t = s->total;
      b = s->bytes;
      state = shout_state(s);
      if (b != s->bytes) {
        sprintf(text, "%u", s->bytes);
        IcnSetText(s->icons[5], text);
      }
      if (t != s->total) {
        if (s->total == -1) {
          IcnSetText(s->icons[6], "");
        } else {
          sprintf(text, "%u", s->total);
          IcnSetText(s->icons[6], text);
        }
      }
      if ((state == SC_COMPLETE) || (state == SC_FAILED)) {
        /* Do the next one */
        shout_stop(s);
        if (do_open(s))
          close(s->window, 1);
      } else {
        if (shout_metachanged(s)) {
          /* Check for MetaData being changed */
          new_meta(s, &s->station, "station_asc", 1);
          new_meta(s, &s->genre, "genre_asc", 2);
          new_meta(s, &s->station_url, "station_url", 3);
          new_meta(s, &s->bitrate, "bitrate_asc", 4);
          new_meta(s, &s->song, "stream_asc", 7);
          new_meta(s, &s->song_url, "stream_url", 8);
        }
      }
    }
  }
  ExceptCatch
  {
    error(ExceptCaught());
    close(s->window, 1);
  }
}

static int action(win_window win, int action) {

  stream_t s;

  if (!win)
    return 0;
  s = WinGetData(win);
  if (!s)
    return 0;
  switch (action) {
    case PLUGIN_ACTION_STOP:
      PlugInDie(s->window);
      break;
    case PLUGIN_ACTION_PLAY:
      /* Really means unpause */
      if (s->plugin_state == PLUGIN_ACTION_PAUSE) {
        /* Unpause */
        s->plugin_state = PLUGIN_ACTION_PLAY;
        shout_pause(s, 0);
      }
      break;
    case PLUGIN_ACTION_PAUSE:
      if (s->plugin_state == PLUGIN_ACTION_PAUSE) {
        /* Unpause */
        s->plugin_state = PLUGIN_ACTION_PLAY;
        shout_pause(s, 0);
      } else {
        /* Pause */
        s->plugin_state = PLUGIN_ACTION_PAUSE;
        shout_pause(s, 1);
      }
      break;
    case PLUGIN_ACTION_SKIPFWD:
      do_next(s);
      break;
  }

  return s->plugin_state;
}

static void getstate(win_window win, int *state, int *busy, int *capabilities) {

  stream_t s;

  *state = -1;
  *busy = 0;
  *capabilities = -1;
  if (!win)
    return;
  s = WinGetData(win);
  if (!s)
    return;

  *capabilities = (1<<PLUGIN_ACTION_STOP) | (1<<PLUGIN_ACTION_SKIPFWD);
  if (s->paused) {
    *capabilities |= (1<<PLUGIN_ACTION_PLAY);
    *state = PLUGIN_ACTION_PAUSE;
  } else {
    *capabilities |= (1<<PLUGIN_ACTION_PAUSE);
    *state = PLUGIN_ACTION_PLAY;
  }
}

static plugin_s plugin_sc = {
  open_sc,
  close,
  resize,
  action,
  getstate
};

static plugin_s plugin_m3u = {
  open_m3u,
  close,
  resize,
  action,
  getstate
};

static void poll(void) {

  stream_t p, q;

  p = instance_list;
  while (p) {
    p = p->next;
  }

  p = instance_list;
  while (p) {
    q = p->next;
    do_poll(p);
    p = q;
  }
}

static void closedown(void) {

  while (instance_list) {
    close(instance_list->window, 0);
  }
  MemKill();
}

static int strcasecmp(char *s1, char *s2) {

  int a, b;

  while (1) {
    a = toupper(*s1++);
    b = toupper(*s2++);
    if (a != b) {
      if (a < b)
        return -1;
      else
        return 1;
    } else if (a == 0)
      return 0;
  }
  return 0;
}

static void check_options(int argc, char *argv[]) {

  int i;

  log_errors = 0;

  for (i = 1; i < argc; i++) {
    if (strcasecmp(argv[i], "-q") == 0) {
      log_errors = 1;
    }
  }
}

int main(int argc, char *argv[]) {

  int ok_to_die = 0;

  MemCheck_Init();
  MemCheck_RedirectToFilename("MemCheck");
  MemCheck_RegisterArgs(argc, argv);
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_SetStoreMiscFunctions(1);

  if (TaskHandleFromName("SHOUTcast") != 0) {
    exit(EXIT_SUCCESS);
  }

  MemInit("SHOUTcast");
  WinInit("SHOUTcast");
  invisible_mode = atoi(VarRead("SHOUTcast$HideWindow"));
  if (invisible_mode != 1)
    invisible_mode = 0;
  check_options(argc, argv);
  atexit(closedown);
  load_windows();
  PlugIn(&plugin_sc, FILETYPE_SHOUTCAST, 0);
  PlugIn(&plugin_m3u, FILETYPE_M3U, 0);
  while ((instance_list != NULL) || (!ok_to_die)) {
    if (instance_list == NULL) {
      ok_to_die = 1;
      WinSleep(-1);
    } else {
      WinCoOp();
    }
    poll();
  }

  return 1;
}
