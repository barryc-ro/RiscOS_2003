#include <string.h>

#include "soundX.h"
#include "swis.h"
#include "kernel.h"
#include "common.h"
#include "main.h"
#include "amplayer.h"

#ifndef NULL
#define NULL (0)
#endif

/* The collected wisdom of a tired programmer on instance numbers:
 * They change. About the best you can hope for is that Base is given as 0
 * at startup time, but while they move around the list they change. So, we
 * use the instance number only to tell us whether to use a name or not,
 * and we look the name up each time we register a handler. So there.
 * Must sleep now.
 */

#define NAME_LEN 80

/* Service_Sound reason codes */
#define Sound_L0Alive (0) /* SoundDMA */
#define Sound_L0Dying (1)
#define Sound_L1Alive (2) /* SoundChannels */
#define Sound_L1Dying (3)
#define Sound_L2Alive (4) /* SoundScheduler - we don't talk to this */
#define Sound_L2Dying (5)
#define Sound_L3Alive (6) /* SharedSound */
#define Sound_L3Dying (7)

STATIC char inst_name[NAME_LEN];
STATIC int instance;
STATIC int samplerate=0;
STATIC int sound_active=0;
STATIC sound_system sound_type;

#if SOUND8
#define MASK_8 (SOUNDMASK_8BIT)
#else
#define MASK_8 (0)
#endif

#if SOUND16
#define MASK_16 (SOUNDMASK_16BIT)
#else
#define MASK_16 (0)
#endif

#if SOUNDSHARED
#define MASK_SHARED (SOUNDMASK_SHAREDSOUND)
#else
#define MASK_SHARED (0)
#endif

#if SOUNDUSER
#define MASK_USER (SOUNDMASK_USER)
#else
#define MASK_USER (0)
#endif

#define MASK (MASK_8 | MASK_16 | MASK_SHARED)


/*************************************************** Gerph *********
 Function:     SoundX_Service
 Description:  Process the Sound service call to reinitialise parts
               of our sound sub-system
 Parameters:   reason = reason code from Service_Sound
 Returns:      none
 ******************************************************************/
void SoundX_Service(int reason,void *pw)
{
  if ( sound_active &&
       (reason==Sound_L0Alive && sound_type == sound_8) ||
       (reason==Sound_L1Alive && sound_type == sound_16) ||
       (reason==Sound_L3Alive && sound_type == sound_shared) )
  {
    /* It's one of ours, so we need to reinitialise the system - we do this
       on a callback. It is only necessary to do so for Level 0 and 1
       handlers, as Level 3 is already safely on a callback, but to make
       things simpler, we use the callback for them all */
    callback(call_soundX_reinit,pw);
  }
}

/*************************************************** Gerph *********
 Function:     SoundX_Reinit
 Description:  Reinitialise the sound system to whatever state we need
 Parameters:   r-> registers (not relevant)
               pw = private word
 Returns:      pointer to error (never, we're on a callback) or NULL
 ******************************************************************/
_kernel_oserror *SoundX_Reinit(_kernel_swi_regs *r, void *pw)
{
  SoundX_Init(pw);
  SoundX_SetRate(samplerate);
  return NULL;
}

int SoundX_AvailableSystems(void) {

  int available;

  available   = 0;
#if (SOUNDUSER)
  available  |= SOUNDMASK_USER;
#endif
#if (SOUNDSHARED)
  available  |= (SoundShared_Available() ? SOUNDMASK_SHAREDSOUND : 0);
#endif
#if (SOUND16)
  available  |= (Sound16_Available()     ? SOUNDMASK_16BIT       : 0);
#endif
#if (SOUND8)
  available  |= (Sound8_Available()      ? SOUNDMASK_8BIT        : 0);
#endif

  return available;
}

_kernel_oserror *SoundX_SelectSystem(sound_system system) {

  int available;

  available = SoundX_AvailableSystems();
  if (system == 0) {
    /* Make our own choice */
    if (available & MASK_SHARED) {
      /* If SharedSound is available, then use that */
      sound_type = sound_shared;
    } else if (available & MASK_16) {
      /* Otherwise we'd like 16 bit sound at least */
      sound_type = sound_16;
    } else if (available & MASK_8) {
      /* But if we have to we can rough it with just 8 bits of audio glory */
      sound_type = sound_8;
    } else {
      /* If all else fails, just whinge */
      sound_type = sound_none;
      return err(ERROR_BADSOUNDSYS,"Failed to find a sound system that is supported in this build!");
    }
  } else {
#if (SOUNDUSER)
    if (system == sound_user) { /* User always available */
      sound_type = sound_user;
    } else
#endif
#if (SOUNDSHARED)
    if ((system == sound_shared) && (available & SOUNDMASK_SHAREDSOUND)) {
      sound_type = sound_shared;
    }
    else
#endif
#if (SOUND16)
    if ((system == sound_16) && (available & SOUNDMASK_16BIT)) {
      sound_type = sound_16;
    }
    else
#endif
#if (SOUND8)
    if ((system == sound_8) && (available & SOUNDMASK_8BIT)) {
      sound_type = sound_8;
    }
    else
#endif
    return err(ERROR_BADSOUNDSYS, "Requested sound system not supported or present!");
  }
  if ((sound_type == sound_8) && (instance != 0))
    return err(ERROR_BADSOUNDSYS,"AMPlayer cannot be multiply instantiated with 8 bit sound!");
  if ((sound_type == sound_16) && (instance != 0))
    return err(ERROR_BADSOUNDSYS,"AMPlayer cannot be multiply instantiated with (unshared) 16 bit sound!");

  return NULL;
}

_kernel_oserror *SoundX_PreInit(int inst) {

  instance = inst;

  /* Default to having VU bars turned on - for now */
  svar._vuused = 1;

  return SoundX_SelectSystem(sound_any);
}

_kernel_oserror *SoundX_Init(void *pw) {

  int mod_num, old_mod_num;
  char *str;
  int found;
  void *ppw;
  _kernel_oserror *e;

  sound_active=1;

#if (SOUNDSHARED)
  if (sound_type == sound_shared) {
    if (instance == 0) {
      strcpy(inst_name, "AMPlayer");
    } else {
      e = _swix(OS_Module, _INR(0,1) | _OUT(1), 18, "AMPlayer", &mod_num);
      found = 0;
      instance = 0;
      old_mod_num = mod_num;
      while ((!e) && (!found) && (old_mod_num == mod_num)) {
        e = _swix(OS_Module, _INR(0,2) | _OUTR(1,2) | _OUTR(4,5),
                             12, mod_num, instance,
                             &mod_num, &instance, &ppw, &str);
        if ((!e) && (ppw == *((void **)pw))) {
          found = 1;
        }
      }
      if (!found) {
        strcpy(inst_name, "AMPlayer");
        return NULL;
      }
      strcpy(inst_name, "AMPlayer (");
      strncat(inst_name, str, NAME_LEN-12);
      strcat(inst_name, ")");
    }
  }
#endif
  switch (sound_type) {
#if SOUND8
    case sound_8:    /* 8 bit */
      return Sound8_Init(pw, &svar);
      break;
#endif
#if SOUND16
    case sound_16:    /* 16 bit */
      return Sound16_Init(pw, &svar);
      break;
#endif
#if SOUNDSHARED
    case sound_shared: /* SharedSound */
      return SoundShared_Init(pw, &svar, inst_name);
      break;
#endif
#if SOUNDUSER
    case sound_user: /* User */
      return SoundUser_Init(pw, &svar);
      break;
#endif
  }
  return NULL;
}

void SoundX_SetRate(int rate) {

  samplerate = rate;

  switch (sound_type) {
#if SOUND8
    case sound_8:    /* 8 bit */
      Sound8_SetRate(rate, &svar);
      break;
#endif
#if SOUND16
    case sound_16:    /* 16 bit */
      Sound16_SetRate(rate, &svar);
      break;
#endif
#if SOUNDSHARED
    case sound_shared: /* SharedSound */
      SoundShared_SetRate(rate, &svar);
      break;
#endif
#if SOUNDUSER
    case sound_user: /* User */
      SoundUser_SetRate(rate, &svar);
      break;
#endif
  }
}

void SoundX_Final(void) {

  sound_active=0;

  switch (sound_type) {
#if SOUND8
    case sound_8:    /* 8 bit */
      if (instance == 0)
        Sound8_Final(&svar);
      break;
#endif
#if SOUND16
    case sound_16:    /* 16 bit */
      if (instance == 0)
        Sound16_Final(&svar);
      break;
#endif
#if SOUNDSHARED
    case sound_shared: /* SharedSound */
      SoundShared_Final(&svar);
      break;
#endif
#if SOUNDUSER
    case sound_user: /* User */
      SoundUser_Final(&svar);
      break;
#endif
  }
}
