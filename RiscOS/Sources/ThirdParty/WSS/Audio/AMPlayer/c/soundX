#include <string.h>

#include "soundX.h"
#include "swis.h"
#include "kernel.h"
#include "common.h"
#include "main.h"

#ifndef NULL
#define NULL (0)
#endif

/* The collected wisdom of a tired programmer on instance numbers:
 * They change. About the best you can hope for is that Base is given as 0
 * at startup time, but while they move around the list they change. So, we
 * use the instance number only to tell us whether to use a name or not,
 * and we look the name up each time we register a handler. So there.
 * Must sleep now.
 */

#define NAME_LEN 80

static int sound_type;
static char inst_name[NAME_LEN];
static int instance;

_kernel_oserror *SoundX_PreInit(int inst) {

  instance = inst;

  sound_type = Sound_Available();
  if (sound_type == -1)
    return err(ERROR_BADSOUNDSYS,"Failed to find a sound system that is supported in this build!");
#if (!SOUND8)
  if (sound_type == 0)
    return err(ERROR_BADSOUNDSYS,"8 bit sound unsupported in this build!");
#endif
#if (!SOUND16)
  if (sound_type == 1)
    return err(ERROR_BADSOUNDSYS,"16 bit sound unsupported in this build!");
#endif
#if (!SOUNDSHARED)
  if (sound_type == 2)
    return err(ERROR_BADSOUNDSYS,"Shared Sound unsupported in this build!");
#endif
#if (SOUNDSHARED)
  if ((sound_type != 2) && (instance != 0))
    return err(ERROR_BADSOUNDSYS,"AMPlayer can only be multiply instantiated if SharedSound is used!");
#endif

  /* Default to having VU bars turned on - for now */
  svar._vuused = 1;

  return NULL;
}

_kernel_oserror *SoundX_Init(void *pw) {

  int mod_num, old_mod_num;
  char *str;
  int found;
  void *ppw;
  _kernel_oserror *e;
#if (SOUNDSHARED)
  if (sound_type == 2) {
    if (instance == 0) {
      strcpy(inst_name, "AMPlayer");
    } else {
      e = _swix(OS_Module, _INR(0,1) | _OUT(1), 18, "AMPlayer", &mod_num);
      found = 0;
      instance = 0;
      old_mod_num = mod_num;
      while ((!e) && (!found) && (old_mod_num == mod_num)) {
        e = _swix(OS_Module, _INR(0,2) | _OUTR(1,2) | _OUTR(4,5),
                             12, mod_num, instance,
                             &mod_num, &instance, &ppw, &str);
        if ((!e) && (ppw == *((void **)pw))) {
          found = 1;
        }
      }
      if (!found) {
        strcpy(inst_name, "AMPlayer");
        return NULL;
      }
      strcpy(inst_name, "AMPlayer (");
      strncat(inst_name, str, NAME_LEN-12);
      strcat(inst_name, ")");
    }
  }
#endif
  switch (sound_type) {
#if SOUND8
    case 0:
      /* 8 bit */
      return Sound8_Init(pw, &svar);
      break;
#endif
#if SOUND16
      case 1:
      /* 16 bit */
      return Sound16_Init(pw, &svar);
      break;
#endif
#if SOUNDSHARED
    case 2:
      /* SharedSound */
      return SoundShared_Init(pw, &svar, inst_name);
      break;
#endif
  }
  return NULL;
}

void SoundX_SetRate(int rate) {

  switch (sound_type) {
#if SOUND8
    case 0:
      /* 8 bit */
      Sound8_SetRate(rate, &svar);
      break;
#endif
#if SOUND16
    case 1:
      /* 16 bit */
      Sound16_SetRate(rate, &svar);
      break;
#endif
#if SOUNDSHARED
    case 2:
      /* SharedSound */
      SoundShared_SetRate(rate, &svar);
      break;
#endif
  }
}

void SoundX_Final(void) {

  switch (sound_type) {
    case 0:
#if SOUND8
      /* 8 bit */
      Sound8_Final(&svar);
      break;
#endif
#if SOUND16
    case 1:
      /* 16 bit */
      Sound16_Final(&svar);
      break;
#endif
#if SOUNDSHARED
    case 2:
      /* SharedSound */
      SoundShared_Final(&svar);
      break;
#endif
  }
}
