/*
 */

#include <stdlib.h>
#include <string.h>

#include "metadata.h"

typedef struct meta_s {
  meta_t  next;
  char   *key;
  char   *value;
  int     length;
} meta_s;

/* Global var */
static meta_t current = NULL;
static int meta_change = 0;

/* Join a new key/value pair to a meta data object. The old object is
   consumed by this operation. */
meta_t MetaData_Construct(meta_t m, const char *key, const char *value, int len) {

  meta_t n;
  char *k, *v;

  n = malloc(sizeof(*n));
  k = malloc(strlen(key)+1);
  v = malloc(len);
  /* If we run out of memory, make do with what we have */
  if ((!n) || (!k) || (!v)) {
    free(n);
    free(k);
    free(v);
    return m;
  }
  strcpy(k, key);
  memcpy(v, value, len);
  n->next   = m;
  n->key    = k;
  n->value  = v;
  n->length = len;
  return n;
}

/* Single merge */
static void merge(meta_t m) {

  meta_t *c, d;

  c = &current;
  while ((d = *c) != NULL) {
    if (strcmp(d->key, m->key) == 0) {
      m->next = d->next;
      *c = m;
      d->next = NULL;
      MetaData_Free(d);
      return;
    } else {
      c = &(*c)->next;
    }
  }
  *c = m;
  m->next = NULL;
}

/* Merge meta data with current list */
void MetaData_MergeWithCurrent(meta_t m) {

  meta_t n;

  if (m) {
    meta_change += 1;
    if (meta_change == 0)
      meta_change = 1;
  }

  while (m) {
    n = m->next;
    merge(m);
    m = n;
  }
}

/* Lookup a key in the current metadata and return a pointer to the value
   and its length. May return NULL. */
char *MetaData_Lookup(const char *key, int *len) {

  meta_t c;

  c = current;
  while (c && (strcmp(c->key, key) != 0)) {
    c = c->next;
  }
  if (c) {
    *len = c->length;
    return c->value;
  }
  return NULL;
}

/* Clear current metadata */
void MetaData_Clear(void) {

  MetaData_Free(current);
  current = NULL;
  meta_change += 1;
  if (meta_change == 0)
    meta_change = 1;
}

/* Free a given metadata object */
void MetaData_Free(meta_t m) {

  meta_t n;

  while (m) {
    n = m->next;
    free(m->key);
    free(m->value);
    free(m);
    m = n;
  }
}

int MetaData_PollChange(void) {

  return meta_change;
}
