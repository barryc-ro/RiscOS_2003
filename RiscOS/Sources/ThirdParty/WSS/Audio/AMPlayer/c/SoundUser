#include "sound.h"
#include "common.h"
#include "main.h"

#include "kernel.h"
#include "swis.h"

#ifndef NULL
#define NULL (0)
#endif

STATIC int user_freq;

extern void call_do_state(void);

void SoundUser_SetRate(int frequency, Svar *svar) {

  user_freq = frequency;
}

_kernel_oserror *SoundUser_Init(void *pw, Svar *svar) {

  user_freq = 0;
  svar->_pw = (int)pw;

  return NULL;
}

_kernel_oserror *SoundUser_Final(Svar *svar) {

  return NULL;
}

_kernel_oserror *SoundUser_StreamReadData(int flags, int *buffer, int *len, int *freq, Svar *svar) {

  int space;

  if (flags != 0)
    return err(ERROR_BADPARAMETER, "AMPlayer_ReadData called with flags != 0 (%d)", flags);

  if (*buffer) {
    /* Move the fill pointer on */
    svar->playofs = (*buffer) - (int)svar->audiobuf;
    if (svar->playofs >= svar->audiobufsize) {
      svar->playofs = 0;
      svar->audiobufsize = svar->nextaudiobufsize;
    }
  }
  if (svar->fillofs >= svar->playofs)
    *len    = svar->fillofs - svar->playofs;
  else
    *len    = svar->audiobufsize - svar->playofs;
  if (*len) {
    *buffer = ((int)svar->audiobuf) + svar->playofs;
  } else {
    *buffer = 0;
  }
  *freq = user_freq;

  if (svar->busy)
    return NULL;

  space = svar->playofs - svar->fillofs;
  if (space <= 0)
    space += svar->audiobufsize;
  if (space > MAX_OUTPUT_BYTES_PER_FRAME) {
    svar->busy = 1;
    _swix(OS_AddCallBack, _INR(0,1), call_do_state, svar->_pw);
  }

  return NULL;
}
