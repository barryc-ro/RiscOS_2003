/*
 * fstream.h: File/Stream IO functions
 *
 * Copyright (C) 2000 Robin Watts
 * "Its mine, mine, all mine I tell you!"
 *
 */

#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "fstream.h"
#include "common.h"
#include "main.h"

/* Private vars */

/* The keen eyed observer will spot that meta_data_t and meta_t are
 * currently identical. So why define them twice? Well, its to emphasise
 * the fact that meta_t is internal to AMPlayer whereas meta_data_t is
 * an external interface. Stuff in meta_data_t is not owned by AMPlayer,
 * but all meta_t's are.
 */
typedef struct meta_data_s *meta_data_t;

typedef struct meta_data_s {
  meta_data_t  next;
  char        *key;
  char        *value;
  int          length;
} meta_data_s;

typedef struct stream_block_s {
  stream_block_t next;
  meta_data_t	 meta;
  int            length;
  char           data[1];
} stream_block_s;

/*
 * Implementation notes:
 *
 * The stream is held as a linked list of blocks, with the first word of
 * each block pointing to the next block. The second word contains a pointer
 * to the metadata corresponding to the data within that block.
 *
 * We hold a linked list of streams. For each stream we hold the following
 * values:
 *   next               = next stream in list.
 *   offset             = the current byte offset(*) within the file.
 *   opened_for_reading = the decoder is actively reading from this file.
 *   closed_for_writing = no more data will be put into this stream.
 *   head               = pointer to the first block of data we are holding.
 *   head_offset        = the byte offset(*) within the stream for the first
 *                        block we are still holding.
 *   mark_offset        = the byte offset(*) within the file before which we
 *                        no longer are required to hold data.
 *   mid                = pointer to the block of data that contains the
 *                        current offset.
 *   mid_offset         = the byte offset(*) within the file at which the
 *                        block pointed to by mid starts.
 *   tail               = pointer to the address that the next free block
 *                        address should be written to.
 *   max_offset         = offset of the last bit of data we have.
 *   eof                = whether the last attempt to read from the stream
 *                        ran out of data or not. Whether this is an EOF
 *                        condition as reported by Feof depends on whether
 *                        the file has been closed for writing yet.
 *
 * (*) all byte offsets held to a 4 byte accuracy. Care should be (i.e.
 * should but hasn't been) taken to ensure that wraparound works).
 */

typedef struct stream_s {
  stream_t        next;
  int             opened_for_reading;
  int             closed_for_writing;
  stream_block_t  head;
  stream_block_t  mid;
  stream_block_t *tail;
  int             offset;
  int             head_offset;
  int             mid_offset;
  int             mark_offset;
  int             max_offset;
  int             eof;
} stream_s;

static stream_t active = NULL;
static meta_t meta_accum = NULL;

static stream_t stream_list = NULL;

static int verify_stream(stream_t stream) {

  stream_t s = stream_list;

  if (stream == NULL)
    return 0;
  while ((s != NULL) && (s != stream)) {
    s = s->next;
  }
  return (s == stream);
}

static void unlink_stream(stream_t stream) {

  stream_t *s = &stream_list;

  if (stream == NULL)
    return;
  while (((*s) != NULL) && ((*s) != stream)) {
    s = &(*s)->next;
  }

  if ((*s) == stream) {
    *s = stream->next;
  }
}

FILE *Fopen(const char *fname, const char *access) {

  return fopen(fname, access);
}

int Fclose(FILE *file) {

  stream_block_t h;

  if ((int)file == -1) {
    /*printf("Fclose\n");*/

    /* Mark all the blocks as unused */
    while (active->head != (stream_block_t)-1) {
      h = active->head;
      active->head = active->head->next;
      h->next = 0;
    }
    active->tail = &active->head;

    unlink_stream(active);

    free(active);
    active = NULL;
    return 0;
  } else {
    return fclose(file);
  }
}

int Fseek(FILE *file, long offset, int origin) {

  if ((int)file == -1) {
    if (origin == SEEK_END) {
      /*printf("Fseek SEEK_END\n");*/
      return -1;
    }
    if (origin == SEEK_CUR) {
      offset += active->offset;
    }
    active->offset = (int)offset;
    /*printf("Fseek %d\n", active->offset);*/
    if ((active->max_offset - active->offset) < 0) {
      /* We are seeking beyond the end of the file. */
      active->mid = (stream_block_t)-1;
      active->mid_offset = active->max_offset;
      active->eof = 1;
      return 1;
    }
    active->mid        = active->head;
    active->mid_offset = active->head_offset;
    if ((active->offset - active->head_offset) < 0) {
      /* We are seeking beyond the start of the data we have. */
      return 1;
    }
    /* OK, so we are somewhere in the data we have */
    while ((active->mid != (stream_block_t) -1) &&
           ((active->offset - active->mid_offset) > active->mid->length))
    {
      active->mid_offset += active->mid->length;
      active->mid = active->mid->next;
    }
    active->eof = 0;
    return 0;
  } else {
    return fseek(file, offset, origin);
  }
}

/* do_read - actually do the read. The idea is that this routine cannot */
/* fail. */
static size_t do_read(void *ptr, int len) {

  int off, left, l, n;

  l = len;
  while (l) {
    /*printf("%d bytes requested\n", l);*/
    off = active->offset - active->mid_offset;
    n = left = active->mid->length - off;
    /*printf("%d bytes left in this buffer\n", left);*/
    if (n > l)
      n = l;
    /*printf("Copying %d bytes from %x to %x\n", n, &active->mid[off], ptr);*/
    memcpy(ptr, &active->mid->data[off], n);
    /*printf("Copied\n");*/
    ptr = (void *)((char *)ptr + n);
    active->offset += n;
    left -= n;
    if (left == 0) {
      active->mid_offset += active->mid->length;
      active->mid = active->mid->next;
    }
    l -= n;
  }
  /*printf("Read!\n");*/
  return len;
}

size_t Fread(void *ptr, size_t size, size_t nobj, FILE *file) {

  int len;

  if ((int)file == -1) {
   /* printf("Fread %d\n", size*nobj);*/
    active->eof = 0;
    /* If we are trying to read from a point we haven't been given data */
    /* for yet, OR we are trying to read beyond the end of the data we  */
    /* have just bale. Could be an EOF. */
    len = active->max_offset - active->offset;
    if (((active->offset - active->head_offset) < 0) || (len < 0)){
      active->eof = 1;
      return 0;
    }

    size *= nobj;
    if (active->closed_for_writing) {
      /* We have had all the data we can hope for */
      if (size > len) {
        size = len;
        active->eof = 1;
      }
      if ((int)size < 0)
        size = 0;
      return do_read(ptr, size);
    } else {
      if (len < size)
        return 0;
      return do_read(ptr, size);
    }
  } else {
    return fread(ptr, size, nobj, file);
  }
}

int Fgetc(FILE *file) {

  int ok;
  char c;

  if ((int)file == -1) {
    /*printf("Fgetc\n");*/
    ok = Fread(&c, 1, 1, file);
    if (ok == 0)
      return -1;
    return c;
  } else {
    return fgetc(file);
  }
}

int Feof(FILE *file) {

  if ((int)file == -1) {
    if (active->closed_for_writing) {
      return active->eof;
    } else {
      return 0;
    }
  } else {
    if (feof(file)) {
      return -1;
    } else {
      return 0;
    }
  }
}

long Ftell(FILE *file) {

  if ((int)file == -1) {
    /*printf("Ftell %d\n", active->offset);*/
    return active->offset;
  } else {
    return ftell(file);
  }
}

static meta_t do_merge_meta(meta_t m, meta_data_t d) {

  while (d) {
    /*printf("AMPlayer passed some metadata: %x\n", d);*/
    m = MetaData_Construct(m, d->key, d->value, d->length);
    d = d->next;
  }
  return m;
}

void Fmark(FILE *file) {

  stream_block_t h;

  if ((int)file == -1) {
    active->mark_offset = (int)Ftell(file);
    /*printf("Fmark %d\n", active->mark_offset);*/
    /* Now we can ditch all the data between head and mid */
    while (active->head != active->mid) {
      h = active->head;
      meta_accum = do_merge_meta(meta_accum, active->head->meta);
      active->head = h->next;
      active->head_offset += h->length;
      h->next = NULL;
    }
    if (active->head == (stream_block_t)-1)
      active->tail = &active->head;
  }
}

meta_t Freadmetadata(void) {

  meta_t m;

  m = meta_accum;
  meta_accum = NULL;

  return m;
}

FILE *Fopen_stream(stream_t stream) {

  /* printf("Fopen_stream\n"); */
  if (!verify_stream(stream)) {
    return NULL;
  }

  if (active != NULL) {
    /* Already streaming! */
    return 0;
  }
  active = stream;

  stream->opened_for_reading = 1;

  /* printf("Alright!!!\n"); */
  return (FILE *)-1;
}

_kernel_oserror *stream_givedata(stream_t stream, stream_block_t block) {

  stream_block_t *t;

  if (!verify_stream(stream)) {
    /* printf("Data given to bad stream!"); */
    return err(ERROR_BADSTREAM, "Data Given to bad stream");
  }

  /* We are safe to do list operations here as we are in the */
  /* middle of a SWI, so no callback can be active-> (Unless  */
  /* the callback has called a SWI that causes reentrance).  */
  /* At any rate, we are just extending the chain, so that   */
  /* should be safe regardless of reentrance. */
  stream->max_offset += block->length;
  if ((stream->mark_offset - stream->max_offset) > 0) {
    /* We've already skipped this data. */
    block->next = 0;
    return NULL;
  }
  block->next = (stream_block_t)-1;

  t = stream->tail;
  stream->tail = &block->next;

  if (stream->mid == (stream_block_t)-1) {
    stream->mid = block;
  }
  if (stream->head == (stream_block_t)-1) {
    stream->head = block;
  }
  *t = block;
#if 0
            {
              FILE *file;
              file = fopen("data","a+");
              fwrite(&block->data[0], 1, block->length, file);
              fclose(file);
            }
#endif

/*
  {
    stream_block_t h;
    h = stream->head;
    printf("Blocks ");
    while (h != (stream_block_t)-1) {
      printf("[%x, %d] ", h, h->length);
      h = h->next;
    }
    printf("\nmid = %x, tail = %x\n", stream->mid, *stream->tail);
  }
  */

  return 0;
}

stream_t stream_open(void) {

  stream_t stream;

  stream = malloc(sizeof(*stream));
  if (stream == NULL)
    return NULL;

  stream->opened_for_reading = 0;
  stream->closed_for_writing = 0;
  stream->offset = 0;
  stream->head_offset = 0;
  stream->mid_offset = 0;
  stream->mark_offset = 0;
  stream->max_offset = 0;
  stream->tail = &stream->head;
  stream->mid  = stream->head;
  stream->head = (stream_block_t)-1;
  stream->eof  = 0;

  stream->next = stream_list;
  stream_list = stream;

  return stream;
}

static _kernel_oserror no_such_stream = { ERROR_BADSTREAM, "No such stream"};

_kernel_oserror *stream_close(stream_t stream) {

  if (!verify_stream(stream))
    return &no_such_stream;

  if (stream) {
    stream->closed_for_writing = 1;
  }
  return NULL;
}

int stream_is_active(stream_t stream) {

  if (!verify_stream(stream))
    return -1;
  if (stream->opened_for_reading)
    return 1;
  return 0;
}

int Fisastream(FILE *filept)
{
  return ((int)filept == -1);
}

/* Read the input buffer size */
static int get_inbuffer(void)
{
  char *size;

  size=getenv("AMPlayer$FileBuffer");
  return size? atoi(size)*1024 : INPUT_BUFFER;
}

void Fsetvbuf(FILE *filept) {

  if ((int)filept != -1) {
    setvbuf(filept,NULL,_IOFBF,get_inbuffer());
  }
}
