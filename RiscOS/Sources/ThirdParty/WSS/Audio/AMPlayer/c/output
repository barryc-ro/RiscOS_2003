/*
 * Decode spectrum into output samples using dct64
 * Completely reorganised to do both channels at once
 * (except in mono of course)
 */

#include "defs.h"

#include "fpasm.h"

/* The idea of _not_ having "clean clip" is that it makes it very (audibly) obvious
 * when the output samples would clip. Purists might want to turn this off, so we
 * can hear easily what the optimal volume setting is
 */
#define CLEAN_CLIP

extern void dct64(fpl *,fpl *,fpl *);

fpl decwin[512+32];
int intwinbase[] = {
     0,    -1,    -1,    -1,    -1,    -1,    -1,    -2,    -2,    -2,
    -2,    -3,    -3,    -4,    -4,    -5,    -5,    -6,    -7,    -7,
    -8,    -9,   -10,   -11,   -13,   -14,   -16,   -17,   -19,   -21,
   -24,   -26,   -29,   -31,   -35,   -38,   -41,   -45,   -49,   -53,
   -58,   -63,   -68,   -73,   -79,   -85,   -91,   -97,  -104,  -111,
  -117,  -125,  -132,  -139,  -147,  -154,  -161,  -169,  -176,  -183,
  -190,  -196,  -202,  -208,  -213,  -218,  -222,  -225,  -227,  -228,
  -228,  -227,  -224,  -221,  -215,  -208,  -200,  -189,  -177,  -163,
  -146,  -127,  -106,   -83,   -57,   -29,     2,    36,    72,   111,
   153,   197,   244,   294,   347,   401,   459,   519,   581,   645,
   711,   779,   848,   919,   991,  1064,  1137,  1210,  1283,  1356,
  1428,  1498,  1567,  1634,  1698,  1759,  1817,  1870,  1919,  1962,
  2001,  2032,  2057,  2075,  2085,  2087,  2080,  2063,  2037,  2000,
  1952,  1893,  1822,  1739,  1644,  1535,  1414,  1280,  1131,   970,
   794,   605,   402,   185,   -45,  -288,  -545,  -814, -1095, -1388,
 -1692, -2006, -2330, -2663, -3004, -3351, -3705, -4063, -4425, -4788,
 -5153, -5517, -5879, -6237, -6589, -6935, -7271, -7597, -7910, -8209,
 -8491, -8755, -8998, -9219, -9416, -9585, -9727, -9838, -9916, -9959,
 -9966, -9935, -9863, -9750, -9592, -9389, -9139, -8840, -8492, -8092,
 -7640, -7134, -6574, -5959, -5288, -4561, -3776, -2935, -2037, -1082,
   -70,   998,  2122,  3300,  4533,  5818,  7154,  8540,  9975, 11455,
 12980, 14548, 16155, 17799, 19478, 21189, 22929, 24694, 26482, 28289,
 30112, 31947, 33791, 35640, 37489, 39336, 41176, 43006, 44821, 46617,
 48390, 50137, 51853, 53534, 55178, 56778, 58333, 59838, 61289, 62684,
 64019, 65290, 66494, 67629, 68692, 69679, 70590, 71420, 72169, 72835,
 73415, 73908, 74313, 74630, 74856, 74992, 75038 };

void make_voltable(int volume)
{
  int i,j,scl;
  fpl *table;

  table = decwin;
  scl = -(volume<<(24-decwin_SH));
  for(i=0,j=0;i<256;i++,j++,table+=32)
  {
    if(table < decwin+512+16)
      table[16] = table[0] = scl*intwinbase[j];
    if(i % 32 == 31)
      table -= 1023;
    if(i % 64 == 63)
      scl = - scl;
  }

  for( /* i=256 */ ;i<512;i++,j--,table+=32)
  {
    if(table < decwin+512+16)
      table[16] = table[0] = scl*intwinbase[j];
    if(i % 32 == 31)
      table -= 1023;
    if(i % 64 == 63)
      scl = - scl;
  }
}

fpl buf[2][2][272];
int synth_bo;



void synth_init(void)
{
  int i;

  for (i=0;i<2*2*272;i++)
    buf[0][0][i]=0;
  synth_bo=1;
}

#ifdef CLEAN_CLIP
  #if smp_SH!=8
    #error CLEAN_CLIP only works with smp_SH=8
  #endif
  #define output_LR(ptr,L,R) \
  if (R>= 0x800000) R=0x7fff00; \
  if (R<=-0x800000) R=0x800000; \
  R<<=8; \
  if (L>= 0x800000) L=0x7fff00; \
  if (L<=-0x800000) L=0x800000; \
  L<<=8; \
  *ptr++=(L&~0xff00)|((word)R>>16);
#else
  #define output_LR(ptr,L,R) \
  *ptr++=((R&~(-1<<(smp_SH+16)))>>smp_SH)|((L&(-1<<smp_SH))<<(16-smp_SH));
#endif

#if SYNTH_ASM
extern void synth_inner(fpl *window, fpl *bufp, word *samples, int *synth_bo);
extern void synth_innerM(fpl *window, fpl *bufp, word *samples, int *synth_bo);
#endif

/* Use ARM code version if we enable SYNTH_ASM or FP */

void synth(fpl *bandPtrR,fpl *bandPtrL,char *out)
{
  word *samples=(word*)out;
  fpl  *bufp;
  fpl  *window;
#if (!SYNTH_ASM) && (!FP)
  int   i,j;
  fpl   sumR,sumL;
#endif

  synth_bo--;
  synth_bo&=15;

  if(synth_bo & 1)
  {
    dct64(buf[0][1]+((synth_bo+1)&15),buf[0][0]+synth_bo,  bandPtrR);
    dct64(buf[1][1]+((synth_bo+1)&15),buf[1][0]+synth_bo,  bandPtrL);
    bufp= buf[0][0];
  }
  else
  {
    dct64(buf[0][0]+synth_bo,         buf[0][1]+synth_bo+1,bandPtrR);
    dct64(buf[1][0]+synth_bo,         buf[1][1]+synth_bo+1,bandPtrL);
    bufp= buf[0][1];
  }

  window = decwin-(synth_bo|1)+16;

#if (!SYNTH_ASM) && (!FP)
  for (j=16;j;j--,window+=16)
  {
    sumR  = muls(*window  ,*bufp++);
    sumL  = muls(*window++,bufp[543]);
    for (i=0;i<7;i++)
    {
      sumR -= muls(*window  ,*bufp++);
      sumL -= muls(*window++,bufp[543]);
      sumR += muls(*window  ,*bufp++);
      sumL += muls(*window++,bufp[543]);
    }
    sumR -= muls(*window  ,*bufp++);
    sumL -= muls(*window++,bufp[543]);
    output_LR(samples,sumR,sumL)
  }

  sumR = muls(*window,bufp[0]);
  sumL = muls(*window,bufp[544]);
  window += 2; bufp += 2;
  for (i=2;i<16;i+=2)
  {
    sumR += muls(*window,bufp[0]);
    sumL += muls(*window,bufp[544]);
    window += 2; bufp += 2;
  }

  output_LR(samples,sumR,sumL)

  bufp    -=32;
  window  +=((synth_bo|1)<<1)-48;

  for (j=15;j;j--,bufp-=32,window-=16)
  {
    sumR = -muls(*(--window),*bufp++);
    sumL = -muls(*window    ,bufp[543]);
    for (i=0;i<15;i++)
    {
      sumR -= muls(*(--window),*bufp++);
      sumL -= muls(*window    ,bufp[543]);
    }
    output_LR(samples,sumR,sumL)
  }
#else
  synth_inner(window, bufp, samples, &synth_bo);
#endif
}



#ifdef CLEAN_CLIP
  #if smp_SH!=8
    #error CLEAN_CLIP only works with smp_SH=8
  #endif
  #define output_M(samples,sum) \
  { \
    sum>>=8; \
    if (sum>= 0x8000) sum=0x7fff; \
    if (sum<=-0x8000) sum=0x8000; \
    *samples++=(sum&0xffff)|(sum<<16); \
  }
#else
  #define output_M(samples,sum) \
  sum=((sum&~(-1<<(smp_SH+16)))>>smp_SH); \
  *samples++=sum|(sum<<16);
#endif

/* Use ARM code version if we enable SYNTH_ASM or FP */

void synth_mono(fpl *bandPtr,char *out)
{
  word *samples=(word*)out;
  fpl  *bufp;
#if (!SYNTH_ASM) && (!FP)
  int   i,j;
  fpl   sum;
#endif
  fpl  *window;

  synth_bo--;
  synth_bo&=15;

  if(synth_bo & 1)
  {
    dct64(buf[0][1]+((synth_bo+1)&15),buf[0][0]+synth_bo,  bandPtr);
    bufp= buf[0][0];
  }
  else
  {
    dct64(buf[0][0]+synth_bo,         buf[0][1]+synth_bo+1,bandPtr);
    bufp= buf[0][1];
  }

  window = decwin-(synth_bo|1)+16;

#if (!SYNTH_ASM) && (!FP)
  for (j=16;j;j--,window+=16)
  {
    sum  = muls(*window++,*bufp++);
    for (i=0;i<7;i++)
    {
      sum -= muls(*window++,*bufp++);
      sum += muls(*window++,*bufp++);
    }
    sum -= muls(*window++,*bufp++);

    output_M(samples,sum);
  }

  sum = muls(window[0],bufp[0]);
  for (i=2;i<16;i+=2)
  {
    sum += muls(window[i],bufp[i]);
  }

  output_M(samples,sum);

  bufp    -=16;
  window  +=((synth_bo|1)<<1)-32;

  for (j=15;j;j--,bufp-=32,window-=16)
  {
    sum = -muls(*(--window),*bufp++);
    for (i=0;i<15;i++)
    {
      sum -= muls(*(--window),*bufp++);
    }
    output_M(samples,sum);
  }
#else
  synth_innerM(window, bufp, samples, &synth_bo);
#endif
}

