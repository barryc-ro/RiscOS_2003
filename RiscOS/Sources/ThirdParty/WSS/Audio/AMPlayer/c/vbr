/*******************************************************************
 * File:     vbr
 * Purpose:  Special handling of VBR files
 * Author:   Justin Fletcher
 * Date:     25 Feb 2001
 ******************************************************************/

/* We don't handle these particularly differently, but there is a little
   munging to get the track length right */

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "swis.h"
#include "id3v1.h"
#include "id3v2.h"
#include "fstream.h"

/* Define this to debug this file */
/* #define DEBUG */

/* Define this if we want to process VBR tags at the start (not at
   all a ID3v1 feature, but...) */
#define DECODE_VBR

/* Some constants */
#define VBR_FRAMES     0x0001
#define VBR_BYTES      0x0002
#define VBR_TOC        0x0004
#define VBR_SCALE      0x0008

#ifdef DEBUG
#define dprintf printf
#else
#define dprintf if (0) printf
#endif

/*********************************************** <c> Gerph *********
 Function:     vbr_decodeframe
 Description:  Decode the dummy VMR frame and fill in the relevant fields
 Parameters:   buffer-> the buffer we're reading
               tag-> the tag to fill in
 Returns:      none
 ******************************************************************/
void vbr_decodeframe(char *buffer,Tag *tag)
{
  int h_id, h_mode, h_sr_index;
  int flags;
  int filesize;
  int vbr_scale;

  dprintf("decode frame, first = %2x\n",buffer[0]);

  if (*buffer++!=0xff)
    return;

  /* get selected MPEG header data - assume it /is/ an MP3 */
  h_id       = (*buffer++ >> 3) & 1;
  h_sr_index = (*buffer++ >> 2) & 3;
  h_mode     = (*buffer++ >> 6) & 3;
  if (h_id)
  { /* mpeg1 */
    if (h_mode != MPG_MD_MONO) buffer+=32;
    else                       buffer+=17;
  }
  else
  { /* mpeg2 */
    if (h_mode != MPG_MD_MONO) buffer+=17;
    else                       buffer+=9;
  }

  dprintf("buffer[4] = %c%c%c%c\n",buffer[0],buffer[1],buffer[2],buffer[3]);
  if (*buffer++!='X' ||
      *buffer++!='i' ||
      *buffer++!='n' ||
      *buffer++!='g')
    return; /* Not a header we can identify */

#define REVERSE4(buffer) ((buffer[0]<<24) | \
                          (buffer[1]<<16) | \
                          (buffer[2]<<8) | \
                          (buffer[3]<<0))
  flags=REVERSE4(buffer); buffer+=4;
  if (flags & VBR_FRAMES)
  {
    tag->framesize=REVERSE4(buffer),buffer+=4;
    dprintf("Framesize = %x\n",tag->framesize);
  }
  if (flags & VBR_BYTES)
  {
    filesize=REVERSE4(buffer),buffer+=4; /* might be shorter if truncated */
    dprintf("Filesize = %x (actual = %x)\n",filesize,tag->filesize);
    if (flags & VBR_FRAMES)
    {
      if ((filesize != 0) && (tag->filesize!=0) && (abs(filesize-tag->filesize) > MAXFRAMESIZE*2))
      {
        /* We're out by at least 2 frames; probably ought to resynchronise */
        dprintf("Resynchronising framesize...\n");
        tag->framesize=(int)(((double)tag->filesize)/((double)filesize) *
                              (double)tag->framesize);
        dprintf("New framesize = %x\n",tag->framesize);
      }
    }
  }
  if (flags & VBR_TOC)
  {
    memcpy(tag->toc,buffer,100);
    buffer+=100;
  }
  if (flags & VBR_SCALE)
    vbr_scale=REVERSE4(buffer),buffer+=4;
}

/*********************************************** <c> Gerph *********
 Function:     vbr_getinfo
 Description:  Get VBR information from file
 Parameters:   filept-> file
               tag-> the tag to fill in
 Returns:      none
 ******************************************************************/
void vbr_getinfo(FILE *filept,Tag *tag)
{
  /* Must be > 128 */
  char buf[100+32+4+4*3];
  long pos;
  int read;
  tag->tocvalid=0;
  tag->framesize=0;

#ifdef DECODE_VBR
  pos = Ftell(filept);
  if (pos == -1)
    return;

  Fseek(filept,0,SEEK_SET);
  id3v2_skiptag(filept); /* Skip any ID3v2 tag */
  read=Fread(buf,1,sizeof(buf),filept);
  if (read==sizeof(buf))
  {
    vbr_decodeframe(&buf[0],tag);
  }
  Fseek(filept, pos, SEEK_SET);
#endif
}
