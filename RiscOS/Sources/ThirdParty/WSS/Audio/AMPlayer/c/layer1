/*
 * Decoding layer 1
 */

#include "defs.h"

#include "common.h"
#include "miscasm.h"
#include "sound.h"
#include "output.h"
#include "tabxmuls.h"

#if 0
extern fpl xmuls[27][64];
#endif

void I_step_one(word balloc[], word scale_index[2][SBLIMIT],Frame *fr)
{
  word *ba=balloc;
  word *sca = (word*) scale_index;

  if(fr->stereo) {
    int i;
    int jsbound = fr->jsbound;
    for (i=0;i<jsbound;i++) {
      *ba++ = getbits16(4);
      *ba++ = getbits16(4);
    }
    for (i=jsbound;i<SBLIMIT;i++)
      *ba++ = getbits16(4);

    ba = balloc;

    for (i=0;i<jsbound;i++) {
      if ((*ba++))
        *sca++ = getbits16(6);
      if ((*ba++))
        *sca++ = getbits16(6);
    }
    for (i=jsbound;i<SBLIMIT;i++)
      if ((*ba++)) {
        *sca++ =  getbits16(6);
        *sca++ =  getbits16(6);
      }
  }
  else {
    int i;
    for (i=0;i<SBLIMIT;i++)
      *ba++ = getbits16(4);
    ba = balloc;
    for (i=0;i<SBLIMIT;i++)
      if ((*ba++))
        *sca++ = getbits16(6);
  }
}

void I_step_two(fpl fraction[2][SBLIMIT],word balloc[2*SBLIMIT],
	word scale_index[2][SBLIMIT], Frame *fr)
{
  int i,n;
  int smpb[2*SBLIMIT]; /* values: 0-65535 */
  int *sample;
  word *ba;
  word *sca = (word*) scale_index;

  if(fr->stereo) {
    int jsbound = fr->jsbound;
    fpl *f0 = fraction[0];
    fpl *f1 = fraction[1];

    ba = balloc;
    for (sample=smpb,i=0;i<jsbound;i++)  {
      if ((n = *ba++))
        *sample++ = getbits(n+1);
      if ((n = *ba++))
        *sample++ = getbits(n+1);
    }
    for (i=jsbound;i<SBLIMIT;i++)
      if ((n = *ba++))
        *sample++ = getbits(n+1);

    ba = balloc;
    for (sample=smpb,i=0;i<jsbound;i++) {
      if((n=*ba++))
        *f0++ = (fpl)(((-1)<<n)+(*sample++)+1)*xmuls(n+1,*sca++);
      else
        *f0++ = 0;
      if((n=*ba++))
        *f1++ = (fpl)(((-1)<<n)+(*sample++)+1)*xmuls(n+1,*sca++);
      else
        *f1++ = 0;
    }
    for (sample=smpb,i=jsbound;i<SBLIMIT;i++) {
      if ((n=*ba++)) {
        int samp = ((-1)<<n)+(*sample++)+1;
        *f0++ = samp*xmuls(n+1,*sca++);
        *f1++ = samp*xmuls(n+1,*sca++);
      }
      else
        *f0++ = *f1++ = 0;
    }
    for(i=SBLIMIT;i<32;i++)
      fraction[0][i] = fraction[1][i] = 0;
  }
  else {
    fpl *f0 = fraction[0];

    ba = balloc;
    for (sample=smpb,i=0;i<SBLIMIT;i++)
      if ((n = *ba++))
        *sample++ = getbits(n+1);
    ba = balloc;
    for (sample=smpb,i=0;i<SBLIMIT;i++) {
      if((n=*ba++))
        *f0++ = (fpl)(((-1)<<n)+(*sample++)+1)*xmuls(n+1,*sca++);
      else
        *f0++ = 0;
    }
    for(i=SBLIMIT;i<32;i++)
      fraction[0][i] = 0;
  }
}

/* Decode one layer1 frame
 */
void do_layer1(Frame *fr)
{
  int  i;
  char *ptr=svar.audiobuf+svar.fillofs;
  word balloc[2*SBLIMIT];
  word scale_index[2][SBLIMIT];
  static fpl fraction[2][SBLIMIT];
  int  stereo=fr->stereo;

  fr->dctR=fraction[0];
  fr->dctL=fraction[1];

  I_step_one(balloc,scale_index,fr);

  if (stereo==1)
  {
    for (i=0;i<SCALE_BLOCK;i++)
    {
      I_step_two(fraction,balloc,scale_index,fr);
      synth_mono(fraction[0],ptr);
      ptr+=128;
    }
  }
  else
  {
    for (i=0;i<SCALE_BLOCK;i++)
    {
      I_step_two(fraction,balloc,scale_index,fr);
      synth(fraction[0],fraction[1],ptr);
      ptr+=128;
    }
  }
  svar.fillofs+=SCALE_BLOCK*128;
}


