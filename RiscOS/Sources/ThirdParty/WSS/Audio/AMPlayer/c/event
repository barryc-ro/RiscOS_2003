/*
 *
 */

#include <stdio.h>

#include "sound.h"
#include "event.h"

#define MAX_EVENTS (16)

typedef struct event_s {
  int   offset;
  int   type;
  void *data;
  int	pad;
} event_s;

event_s event[MAX_EVENTS];

static int event_head = 0;
static int event_tail = 0;

int Event_Due(void) {

  int offset;

  /* Check for empty */
  if (event_head == event_tail)
    return 0;
  offset = event[event_head].offset;
  if (offset == EVENT_IMMEDIATE)
    return 1;
  if (svar.playofs <= svar.fillofs) {
    /* [------------*********************------------]
     *              ^play                ^fill
     */
    if ((offset <= svar.playofs) || (offset > svar.fillofs)) {
      return 1;
    }
  } else {
    /* [*************-------------------*************]
     *               ^fill              ^play
     */
    if ((offset <= svar.playofs) && (offset > svar.fillofs)) {
      return 1;
    }
  }
  return 0;
}


/* Pop event off the list returning type and data */
int Event_Pop(void **data) {

  int h = event_head;

  event_head = (event_head + 1) % MAX_EVENTS;
  *data = event[h].data;
  return event[h].type;
}

/* Push a new event on the queue. Return 1 for failure, 0 for success */
int Event_Push(int offset, int type, void *data) {

  int t;

  t = (event_tail+1) % MAX_EVENTS;
  if (t == event_head)
    return 1;
  event[event_tail].offset = offset;
  event[event_tail].type   = type;
  event[event_tail].data   = data;
  event_tail = t;

  return 0;
}
