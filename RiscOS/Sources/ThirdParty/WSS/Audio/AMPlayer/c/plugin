/*
 * Plugin management
 */

#include "defs.h"
#include "kernel.h"
#include "stdio.h"
#include "stdlib.h"
#include "swis.h"

#include "main.h"
#include "common.h"
#include "plugin.h"

Plugin *plugins;


void pi_init(void)
{
  plugins=NULL;
}

_kernel_oserror *reg_plugins(_kernel_swi_regs *r,void *pw)
{
  _swix(OS_ServiceCall,_INR(0,1),SC_INIT,SERVICECALL);
  return NULL;
}

void pi_die(void)
{
  _swix(OS_ServiceCall,_INR(0,1),SC_DEAD,SERVICECALL);
}

_kernel_oserror *pi_add(void *pw, plugin_code *pre_dct, plugin_code *post_dct, plugin_info *info)
{
  Plugin *np;

  if (pre_dct==NULL && post_dct==NULL)
    return err(ERROR_BADPLUGIN,"No plugin filter specified");

  if (info==NULL)
    return err(ERROR_BADPLUGIN,"Bad information field");

  if (!(np=malloc(sizeof(*np))))
    return err(ERROR_NOMEMORY,"Out of memory");

  np->pw       = pw;
  np->pre_dct  = pre_dct;
  np->post_dct = post_dct;
  np->info     = info;
  np->next     = plugins;
  plugins=np;
  return NULL;
}

_kernel_oserror *pi_remove(void *pw, plugin_code *pre_dct, plugin_code *post_dct)
{
  Plugin *ppp=(Plugin*) &plugins,*pp=plugins;

  if (pp)
  {
    do {
      if ((pp->pw       == pw) &&
          (pp->pre_dct  == pre_dct) &&
          (pp->post_dct == post_dct))
      {
        ppp->next=pp->next;
        free(pp);
        return NULL;
      }
      ppp=pp;
      pp=pp->next;
    } while (pp);
  }
  return err(ERROR_BADPLUGIN,"Plugin not found");
}

Plugin *pi_enum(Plugin *cx)
{
  return cx? cx->next : plugins;
}

void pi_list(void)
{
  Plugin *pp=NULL;

  printf("Active plugins:\n");
  while (pp=pi_enum(pp))
    printf("%s by %s, version %s\n",pp->info->title,pp->info->author,pp->info->version);
}

int pi_pre_dct(fpl *out0,fpl *out1,fpl *samples)
{
  if (plugins)
  {
    Plugin *pp = NULL;
    int    done = FALSE;

    while (pp=pi_enum(pp))
    {
      if (pp->pre_dct)
        done |= pp->pre_dct(pp->pw, out0, out1, samples);
    }
    return done;
  }
  return 0;
}

int pi_post_dct(fpl *out0,fpl *out1,fpl *samples)
{
  if (plugins)
  {
    Plugin *pp = NULL;

    while (pp=pi_enum(pp))
    {
      if (pp->post_dct)
        pp->post_dct(pp->pw, out0, out1, samples);
    }
  }
  return FALSE;
}
