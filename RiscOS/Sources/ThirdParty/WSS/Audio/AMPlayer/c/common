/*
 * Frame decoding and stuff
 */

#include "defs.h"
#include "stdio.h"
#include "string.h"
#include "swis.h"

#include "common.h"
#include "main.h"
#include "sound.h"
#include "miscasm.h"
#include "output.h"

#include "id3v1.h"
#include "id3v2.h"
#include "vbr.h"
#include "event.h"

#include "tables.h"

#include "Fstream.h"

/* Define this to debug this file */
/* #define DEBUG */


/* If we ever skip over more than MAX_SKIP bytes while searching for a valid */
/* header, then timeslice. */
#define MAX_SKIP (256)

#ifdef DEBUG
#define dprintf if (1) printf
#else
#define dprintf if (0) printf
#endif

Frame fr;

/* The frame decoding primitives
 */
extern void do_layer3(Frame *fr);
extern void do_layer2(Frame *fr);
extern void do_layer1(Frame *fr);
extern void II_init(Frame *fr);
extern void III_init(void);

/* Bitrates as a function of version, layer and bitrate nibble
 */
#if 0
int tabsel_123[2][3][16] = {
   { {0,32,64,96,128,160,192,224,256,288,320,352,384,416,448,},
     {0,32,48,56, 64, 80, 96,112,128,160,192,224,256,320,384,},
     {0,32,40,48, 56, 64, 80, 96,112,128,160,192,224,256,320,} },

   { {0,32,48,56,64,80,96,112,128,144,160,176,192,224,256,},
     {0,8,16,24,32,40,48,56,64,80,96,112,128,144,160,},
     {0,8,16,24,32,40,48,56,64,80,96,112,128,144,160,} }
};

/* Possible frequencies
 */
int freqs[9] = { 44100, 48000, 32000, 22050, 24000, 16000 , 11025, 12000, 8000 };
#endif
STATIC byte  bsspace[2][MAXFRAMESIZE+512+2]; /* MAXFRAMESIZE */
STATIC byte *bsbuf,*bsbufold;
STATIC word  oldhead,firsthead;
STATIC int   lastpos;
STATIC int   ssize,bsnum,fsize,fsizeold;
STATIC int   skipped_this_time;

#define HDRCMPMASK 0xfffffd00

/* Called before reading the first frame, and after skipping
 */
void read_frame_init(Frame *fr)
{
  oldhead=
  firsthead=
  bsnum=
  fsize=
  fsizeold=
  fr->bitrate_variable=
  fr->bitrate_low=
  fr->bitrate_high=
  fr->valid=0;
  bsbuf=bsspace[1];

  dprintf("read_frame_init\n");
}

/* Skip one byte of input, looking for sensible stuff
 */
/* If it returns 0 then try again later. -1 = EOF. 1 for success */
STATIC FrameState skip_byte(FILE* filept, word *head)
{
  int data;

  skipped_this_time++;
  if (skipped_this_time > MAX_SKIP)
    return frame_timeout;
  /* Try to read a byte */
  data = Fgetc(filept);
  /* Did we manage to read OK? */
  if (data == -1) {
    /* If we hit the end of the file, then report it */
    if (Feof(filept)) {
      dprintf("skip_byte => -1\n");
      return frame_eof;
    }
    /* Otherwise, we are temporarily out of data */
    dprintf("skip_byte => 0\n");
    return frame_moredata;
  }

  *head = *head<<8 | (byte)data;
  return frame_ok;
}

/* Read a frame header if possible, then read the frame data into a buffer
 */
/* Returns 0 for Try later. -1 for End of File, 1 for success */
STATIC FrameState do_read_frame(Frame *fr)
{
  static word newhead;
  static int  framesize;

  int l;
  int try = 0;
  int got_here_by_skipping = 0;
  int last_skip_pos = 0;
  int set_event = 0;
  int pending_fsizeold, pending_ssize;
  byte *pending_bsbufold, *pending_bsbuf;
  FrameState ok;

  dprintf("do_read_frame\n");

  pending_ssize = ssize;

  if (skipped_this_time == MAX_SKIP)
    got_here_by_skipping = 1;
  if (!oldhead)
    got_here_by_skipping = 1;
  skipped_this_time = 0;

  if ((int)Ftell(filept)!=lastpos)
    read_frame_init(fr);

  read_again:

  lastpos = (int)Ftell(filept);

  Fmark(filept);

  if (curtag.valid && Ftell(filept)+131 >= curtag.filesize) {
    dprintf("end of file!\n");
    return frame_eof;
  }

  if(Fread(&newhead,1,4,filept) != 4) {
    dprintf("Failed to read first 4 bytes!\n");
    if (Feof(filept)) {
      return frame_eof;
    } else {
      return frame_moredata;
    }
  }

  newhead = swap_word(newhead);

  if(oldhead != newhead || !oldhead)
  {
    dprintf("new header %x!\n", newhead);
    init_resync:

    last_skip_pos = (int)Ftell(filept);

    /* Header word:
     * Bit	Meaning
     * 0,1	Emphasis
     * 2	Original
     * 3	Copyright
     * 4,5	Mode extension
     * 6,7	Mode
     * 		0: Stereo
     * 		1: Joint stereo
     * 		2: Dual channel
     * 		3: Mono
     * 8	Extension
     * 9	Padding present
     * 10,11	Frequency index
     * 12-15	Bitrate index
     * 16	if clear, CRC present
     * 17,18	Layer
     * 		0: (unknown)
     * 		1: 3
     * 		2: 2
     * 		3: 1
     * 19	if clear, use LSF (implied bu bit 20)
     * 20	if clear, type is mpeg2.5
     * 21-31	Must be 1
     */

    /* Recognise TAGs, they mean end of file */
    /* RJW: No they don't. They mean skip the next 128 bytes */
    if((newhead & 0xffffff00) == ('T'<<24)+('A'<<16)+('G'<<8)) {
      dprintf("TAG! @ %ld\n", Ftell(filept));
      if (Fseek(filept, 124, SEEK_CUR)) {
        return Feof(filept) ? frame_eof : frame_moredata;
      }
      dprintf("seeked! %ld\n", Ftell(filept));
      goto read_again;
      /*return frame_eof;*/
    }

    if((newhead & 0xffe00000) != 0xffe00000)
    {
      dprintf("unexpected header %x %d @ %d %d!\n", newhead, got_here_by_skipping, last_skip_pos, firsthead);
      if ((newhead & 0xffffff00) == ('I'<<24)+('D'<<16)+('3'<<8))
      {
        /* ID3v2 - will the crap never end */
        byte buf[6];
        long currentpos;
        int len;

        dprintf("ID3v2!\n");

        if (Fread(buf, 1, 6, filept) != 6)
          return Feof(filept) ? frame_eof : frame_moredata;
        len = (buf[2]<<21) | (buf[3]<<14) | (buf[4]<<7) | buf[5];
        if (buf[1] & (1<<4))
          len+=10; /* Footer */
        dprintf("len=%d\n", len);
        currentpos=Ftell(filept);
        dprintf("currentpos = %ld\n", currentpos);

        if (!Fisastream(filept))
          id3v2_header(filept,((newhead & 0xff)<<8) | buf[0], buf[1], len);

        dprintf("seeking (1) to %ld\n", currentpos+len);
        if (Fseek(filept, currentpos+len, SEEK_SET)) {
          return Feof(filept) ? frame_eof : frame_moredata;
        }
        dprintf("seeked to = %ld\n", Ftell(filept));
        goto read_again;
      }
      if(firsthead == 0)
      {
        /* I even saw RIFF headers at the beginning of MPEG streams ;( */
        if(newhead == ('R'<<24)+('I'<<16)+('F'<<8)+'F')
        {
          /* Format:
              +0 RIFF
              +4 <data length exc header>
              +8 WAVE
              <id blocks>

              <id blocks> are :
              +0 Identifier
              +4 block length, little endian

              Identifiers we are interested in :
              'fmt ' : format information - I guess that type &20055 is MP3,
                       but without further documentary evidence, I won't
                       commit to anything. type is word 0 in the fmt chunk.
              'data' : sound data
          */

          /* Missing checks on this code :
               WAVE not checked.
               'fmt ' not checked for the file containing MP3 data
          */
          dprintf("RIFF header!\n");
          if (Fseek(filept, 8, SEEK_CUR)) {
            dprintf("Couldn't skip the RIFF non-header length (and WAV)\n");
            async_err("Skipping RIFF header");
            return Feof(filept) ? frame_eof : frame_moredata;
          }
          /* Here we do the idblock skipping */
          while (1)
          {
            struct {
              char id[4];
              unsigned long len;
            } idblock;
            if (Fread(&idblock, 1, 8, filept) != 8) {
              dprintf("Couldn't read IDblock\n");
              async_err("Skipping RIFF header");
              return Feof(filept) ? frame_eof : frame_moredata;
            }
            dprintf("-- RIFF chunk %c%c%c%c size %lx\n",
                                               idblock.id[0],idblock.id[1],
                                               idblock.id[2],idblock.id[3],
                                               idblock.len);
            if (idblock.id[0]=='d' &&
                idblock.id[1]=='a' &&
                idblock.id[2]=='t' &&
                idblock.id[3]=='a')
              break;
            if (Fseek(filept, idblock.len, SEEK_CUR)) {
              dprintf("Couldn't skip chunk\n");
              async_err("Skipping RIFF header");
              return Feof(filept) ? frame_eof : frame_moredata;
            }
          }
          async_err("Skipped RIFF header");
          goto read_again;
        }
        got_here_by_skipping = TRUE;
        ok = skip_byte(filept, &newhead);
        last_skip_pos++;
        if (ok != frame_ok) return ok;
        goto init_resync;
      }
      async_err("Illegal header %08x at offset 0x%lx",newhead,Ftell(filept)-4);

      got_here_by_skipping = TRUE;
      do
      {
        try++;
        ok = skip_byte(filept, &newhead);
        last_skip_pos++;
        if (ok != frame_ok) {
          return ok;
        }

        if (!oldhead) {
           dprintf("Skipped byte; retrying!\n");
          goto init_resync;       /* "considered harmful", eh? */
        }

      } while ((newhead & HDRCMPMASK) != (oldhead & HDRCMPMASK)
            && (newhead & HDRCMPMASK) != (firsthead & HDRCMPMASK));
      async_err("Skipped %d bytes", try);
    }

    dprintf("Got header: %x!\n", newhead);

    if( newhead & (1<<20) )
    {
      fr->lsf = (newhead & (1<<19)) ? 0 : 1;
      fr->mpeg25 = 0;
    }
    else
    {
      fr->lsf = 1;
      fr->mpeg25 = 1;
    }

    /* If this is the first frame, OR
     * if the previous frame and the current frame differ in either:
     *   Layer, Frequency, LSF or bitrate
     * Then do the synth reinit.
     */
/* RJW: Cunning changes here:
 * Original test was:
 *   if (!oldhead)
 * but that didn't allow for stream types changing, so instead...
 *   if ((!oldhead) || ((oldhead & 0x001efc00) != (newhead & 0x001efc00)))
 * But if we include the marker bits we can lose the first condition to give:
 *   if ((oldhead & 0xFFFefc00) != (newhead & 0xFFFefc00))
 * But that can be written equivalently as:
 *   if ((oldhead^newhead) & 0xFFFefc00)
 * Which in ARM code is an EOR, then an ANDS.
 */
 /* RJW: 15/2/01: Ignore changes just in the bitrate */

    if ((oldhead^newhead) & 0xFFFefc00)
    {
      int sf, lay;
      int newrate;

      lay     = 4-((newhead>>17)&3);
      sf      = ((newhead>>10)&3);
      newrate = ((newhead>>12)&15);
      if (sf == 3)
      {
        dprintf("bad freq!\n");
        async_err("Bad frequency");
        ok = skip_byte(filept, &newhead);
        if (ok != frame_ok) return ok;
        goto init_resync;
      }
      else if (newrate == 15)
      {
        dprintf("bad bitrate!\n");
        async_err("Bad bitrate");
        ok = skip_byte(filept, &newhead);
        if (ok != frame_ok) return ok;
        goto init_resync;
      }
      else if (newrate == 0)
      {
        if (got_here_by_skipping)
          goto skipped_to_garbage;
        dprintf("free format!\n");
        async_err("Free format not supported");
        /* Change from RJW: Don't give up, the stream might change! */
        ok = skip_byte(filept, &newhead);
        if (ok != frame_ok) return ok;
        goto init_resync;
        /*return frame_eof;*/
      } else if (lay == 4) {
        if (got_here_by_skipping)
          goto skipped_to_garbage;
          dprintf("unknown layer type\n");
          /* Change from RJW: Don't give up */
          async_err("Unknown layer type");
        ok = skip_byte(filept, &newhead);
        if (ok != frame_ok) return ok;
        goto init_resync;
      }

      if (fr->valid && fr->bitrate_index != newrate)
      {
        fr->bitrate_variable=1;
        if (newrate < fr->bitrate_low || fr->bitrate_low == 0)
            fr->bitrate_low = newrate;
        if (newrate > fr->bitrate_high)
            fr->bitrate_high = newrate;
      }
      fr->bitrate_index = newrate;

      /* JRF: We know that something has changed, but we only want to process
              more fully if something other than the bitrate changed */
      if ((oldhead^newhead) & 0xFFFe0c00) {
        fr->lay = lay;
        fr->sampling_frequency = sf;
        if(fr->mpeg25)
          fr->sampling_frequency += 6;
        else
          fr->sampling_frequency+= fr->lsf*3;
        fr->valid=TRUE;
        /* Mark that a frequency change will take place on this data */
        set_event = 1;
        /* Reinitialise the synthesis stuff */
        synth_init();
        if (fr->lay==3)
          III_init();
      }
    }

    fr->crc = ((newhead>>16)&1)^1;
    /* extension = ((newhead>>8)&1); */
    /* emphasis  = newhead & 3;      */
    fr->mode      = ((newhead>>6)&3);
    fr->mode_ext  = ((newhead>>4)&3);
    fr->copyright = ((newhead>>3)&1);
    fr->original  = ((newhead>>2)&1);
    fr->padding   = ((newhead>>9)&1);

    fr->stereo    = (fr->mode == MPG_MD_MONO) ? 1 : 2;

    switch(fr->lay)
    {
      case 1:
        fr->do_layer = do_layer1;
        fr->jsbound = (fr->mode == MPG_MD_JOINT_STEREO) ? (fr->mode_ext<<2)+4 : 32;
        framesize  = tabsel_123(fr->lsf,0,fr->bitrate_index) * 12000;
        framesize /= freqs[fr->sampling_frequency];
        framesize  = ((framesize+fr->padding)<<2)-4;
        break;
      case 2:
        fr->do_layer = do_layer2;
        II_init(fr);
        fr->jsbound = (fr->mode == MPG_MD_JOINT_STEREO) ? (fr->mode_ext<<2)+4 : fr->II_sblimit;
        framesize = tabsel_123(fr->lsf,1,fr->bitrate_index) * 144000;
        framesize /= freqs[fr->sampling_frequency];
        framesize += fr->padding - 4;
        break;
      case 3:
        fr->do_layer = do_layer3;
        if(fr->lsf)
          pending_ssize = (fr->stereo == 1) ? 9 : 17;
        else
          pending_ssize = (fr->stereo == 1) ? 17 : 32;
        if(fr->crc)
          pending_ssize += 2;
        framesize  = tabsel_123(fr->lsf,2,fr->bitrate_index) * 144000;
        framesize /= freqs[fr->sampling_frequency]<<(fr->lsf);
        framesize += fr->padding - 4;
        break;
    }
  }

  pending_fsizeold=fsize;	/* for Layer3 */
  pending_bsbufold=bsbuf;
  pending_bsbuf   =bsspace[bsnum]+512;

   dprintf("got_here_by_skipping = %d\n", got_here_by_skipping);

  if (got_here_by_skipping)
    framesize += 2;

  if ((l=Fread(pending_bsbuf,1,framesize,filept)) != framesize)
  {
    return Feof(filept) ? frame_eof : frame_moredata;
  }

  if (got_here_by_skipping) {
    framesize -= 2;
    if ((pending_bsbuf[framesize] == 0xFF) && ((pending_bsbuf[framesize+1] & 0xE0) == 0xE0)) {
      /* When we finish this frame, there will be another one - perfect. */
      lastpos=(int)Ftell(filept)-2;
      /* RJW: Should never fail */
      dprintf("seeking (2) to %d\n", lastpos);
      Fseek(filept, lastpos, SEEK_SET);
    } else {
      /* Somethings rotten in the state of Denmark */
      dprintf("got_here_by_skipping\n");
      skipped_to_garbage:
      /* RJW: Should never fail */
      dprintf("seeking (3) to %d\n", last_skip_pos);
      Fseek(filept, last_skip_pos, SEEK_SET);
      ok = skip_byte(filept, &newhead);
      if (ok != frame_ok)
        return ok;
      lastpos=(int)Ftell(filept);
      goto init_resync;
    }
  } else {
    lastpos=(int)Ftell(filept);
  }

  /* Now we know we will actually successfully finish the procedure without running out of */
  /* data, we can commit our changes. */

  if (!firsthead)
    firsthead = newhead;
  if (set_event)
    Event_Push((svar.freq_change_is_immediate) ? EVENT_IMMEDIATE : svar.fillofs,
             Frequency, (void *)(freqs[fr->sampling_frequency]));
  fsize = framesize;
  oldhead  = newhead;
  fsizeold = pending_fsizeold;
  bsbufold = pending_bsbufold;
  bsbuf    = pending_bsbuf;
  bsnum    = bsnum^1;
  ssize    = pending_ssize;

  if (fr->crc)
    gb_setbuf(bsbuf+2); /* crc */
  else
    gb_setbuf(bsbuf);

  dprintf("seeking (4) to %d\n", lastpos);
  Fseek(filept, lastpos, SEEK_SET);
  Fmark(filept);

  return frame_ok;
}

FrameState read_frame(Frame *fr) {

  long pos;
  FrameState ok;

  /*_swix(0x100+'{', 0);*/
  pos = Ftell(filept);
  ok = do_read_frame(fr);
  if (ok == frame_moredata)
    Fseek(filept, pos, SEEK_SET);
  /*_swix(0x100+'}', 0);*/
  return ok;
}

/* Move back when we've read too much
 */
void set_pointer(int backstep)
{
  byte *p=bsbuf + ssize - backstep;

  gb_setbuf(p);
  if (backstep) memcpy(p,bsbufold+fsizeold-backstep,backstep);
}

_kernel_oserror *read_fileinfo(word info, char *name, Fib *fib, Frib *frib)
{
  static Tag tag;
  FILE *file;

  skipped_this_time = 0;

  if (file = Fopen(name, "rb"))
  {
    int flags=0;

    if (info & FIB_TTIME)
    {
      _kernel_oserror *e;
      word filesize;

      if (!(e=_swix(OS_Args, _INR(0,1)|_OUT(2), 2, file->__file, &filesize)))
      {
        Frame fr;
        word newhead;

        fi_read_again:

        if (Fread(&newhead,1,4,file) != 4)
        {
          Fclose(file);
          return err(ERROR_BADHEADER, "Could not find a proper header");
        }
        newhead = swap_word(newhead);

        fi_init_resync:

        if((newhead & 0xffe00000) != 0xffe00000)
        {
          /* I even saw RIFF headers at the beginning of MPEG streams ;( */
          if(newhead == ('R'<<24)+('I'<<16)+('F'<<8)+'F')
          {
            /* Comments in the main decoder about RIFF apply here also */
            dprintf("RIFF header!\n");
            if (Fseek(file, 8, SEEK_CUR)) {
              dprintf("Couldn't skip the RIFF non-header length (and WAV)\n");
              return err(ERROR_BADHEADER, "Truncated RIFF header");
            }

            /* Here we do the idblock skipping */
            while (1)
            {
              struct {
                char id[4];
                unsigned long len;
              } idblock;
              if (Fread(&idblock, 1, 8, file) != 8) {
                dprintf("Couldn't read IDblock\n");
                return err(ERROR_BADHEADER, "Malformed RIFF header");
              }
              dprintf("-- RIFF chunk %c%c%c%c size %lx\n",
                                                 idblock.id[0],idblock.id[1],
                                                 idblock.id[2],idblock.id[3],
                                                 idblock.len);
              if (idblock.id[0]=='d' &&
                  idblock.id[1]=='a' &&
                  idblock.id[2]=='t' &&
                  idblock.id[3]=='a')
                break;
              if (Fseek(file, idblock.len, SEEK_CUR)) {
                dprintf("Couldn't skip chunk\n");
                async_err("Skipping RIFF header");
                return err(ERROR_BADHEADER, "Malformed RIFF header");
              }
            }
            async_err("Skipped RIFF header");
            goto fi_read_again;
          }
          else if ((newhead & 0xffffff00) == ('I'<<24)+('D'<<16)+('3'<<8))
          {
            /* ID3v2 - will the crap never end */
            _kernel_oserror *error;
            dprintf("Identified ID3v2 tag at %lx\n",ftell(file));
            Fseek(file,-4,SEEK_CUR); /* Jump back to the ID3v2 tag */
            error=id3v2_skiptag(file);
            if (error)
            {
              Fclose(file);
              return error;
            }
            goto fi_read_again;
          }

          if (skip_byte(file, &newhead) != frame_ok)
          {
            Fclose(file);
            return err(ERROR_BADHEADER, "Could not find a proper header");
          }

          goto fi_init_resync;
        }

        if( newhead & (1<<20) )
        {
          fr.lsf = (newhead & (1<<19)) ? 0 : 1;
          fr.mpeg25 = 0;
        }
        else
        {
          fr.lsf = 1;
          fr.mpeg25 = 1;
        }

        fr.lay = 4-((newhead>>17)&3);
        fr.bitrate_index = ((newhead>>12)&15);
        fr.sampling_frequency = ((newhead>>10)&3);
        if (fr.sampling_frequency == 3)
        {
          if (skip_byte(file, &newhead) != frame_ok)
          {
            Fclose(file);
            return err(ERROR_BADHEADER, "Could not find a proper header");
          }
          goto fi_init_resync;
        }
        else if (fr.bitrate_index == 15)
        {
          if (skip_byte(file, &newhead) != frame_ok)
          {
            Fclose(file);
            return err(ERROR_BADHEADER, "Could not find a proper header");
          }
          goto fi_init_resync;
        }
        else if (fr.bitrate_index==0)
        {
          Fclose(file);
          return err(ERROR_BADBITRATE,"Free format not supported");
        }
        else if (fr.lay == 4)
        {
          Fclose(file);
          return err(ERROR_BADHEADER,"Invalid layer number");
          /* Really we should retry */
        }
        if(fr.mpeg25)
          fr.sampling_frequency += 6;
        else
          fr.sampling_frequency+= fr.lsf*3;

        strcpy(frib->mpegver,fr.mpeg25?"2.5":(fr.lsf?"2.0":"1.0"));
        frib->layer  = fr.lay;
        frib->freq   = freqs[fr.sampling_frequency];
        frib->bitrate= tabsel_123(fr.lsf,fr.lay-1,fr.bitrate_index);
        frib->mode   = ((newhead>>6)&3);
        frib->chan   = (frib->mode == MPG_MD_MONO) ? 1 : 2;
        frib->flags  = ((newhead & 1<<3)?1:0)|((newhead & 1<<2)?2:0)|((newhead & 1<<16)?0:4);

        tag.filesize=filesize;
        vbr_getinfo(file,&tag);

        if (tag.framesize)
          fib->ttime   = frame_to_time(&fr,tag.framesize);
        else
          fib->ttime   = filesize*4/(frib->bitrate*5);

        flags |= FIB_TTIME;
      }
      else
      {
        Fclose(file);
        return e;
      }
    }
    if (info & FIB_TAG)
    {
      id3v1_gettag(file,&tag);

      if (tag.valid)
      {
        fib->title=  tag.title;
        fib->artist= tag.artist;
        fib->album=  tag.album;
        fib->year=   tag.year;
        fib->comment=tag.comment;
        fib->genre=  tag.genre;
        fib->track=  tag.track;
        if (tag.track!=0)
          flags|=FIB_TRACK;
        flags |= FIB_TAG;
      }
      else
      {
        Fclose(file);
        return err(ERROR_NOID3,"No ID3 tag found");
      }
    }

    fib->flags = flags;
  }
  else
    return err(ERROR_BADFILE,"File '%s' wouldn't open", name);

  Fclose(file);
  return NULL;
}
