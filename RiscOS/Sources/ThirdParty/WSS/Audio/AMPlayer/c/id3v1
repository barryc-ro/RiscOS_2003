/*******************************************************************
 * File:     id3v1
 * Purpose:  ID3v1 handling
 * Author:   Justin Fletcher
 * Date:     30 Dec 2000
 ******************************************************************/

#include <stdlib.h>
#include <string.h>
#include "fstream.h"
#include "swis.h"
#include "common.h"
#include "main.h"
#include "id3v1.h"

/*********************************************** <c> Gerph *********
 Function:     copypad
 Description:  Copy a string, removing trailing passing
 Parameters:   to-> the destination
               from-> the source
               len = length to copy
 Returns:      new source pointer
 ******************************************************************/
char *id3v1_copypadded(char *to,char *from,int len)
{
  int chars;
  char *last;
  last=to;
  for (chars=len; chars>0; chars--)
  {
    char c=*from++;
    if (c<32)
      c=' ';
    *to++=c;
    if (c!=' ')
      last=to;
  }
  *last='\0';
  return from;
}

/*********************************************** <c> Gerph *********
 Function:     id3v1_decodetag
 Description:  Decode a tag and fill in the relevant fields
 Parameters:   buffer-> the buffer we're reading
               tag-> the tag to fill in
 Returns:      none
 ******************************************************************/
void id3v1_decodetag(char *buffer,Tag *tag)
{
  if (*buffer++ != 'T' ||
      *buffer++ != 'A' ||
      *buffer++ != 'G')
    return;

  buffer=id3v1_copypadded(tag->title,buffer,30);
  buffer=id3v1_copypadded(tag->artist,buffer,30);
  buffer=id3v1_copypadded(tag->album,buffer,30);
  buffer=id3v1_copypadded(tag->year,buffer,4);
  if (buffer[28]==0)
  {
    tag->track=buffer[29];
    buffer=id3v1_copypadded(tag->comment,buffer,28)+2;
  }
  else
  {
    tag->track=0;
    buffer=id3v1_copypadded(tag->comment,buffer,30);
  }
  tag->genre=*buffer;
  tag->valid=1;
}

/*********************************************** <c> Gerph *********
 Function:     id3v1_gettag
 Description:  Get ID3v1 tag, filling in the valid fields
 Parameters:   filept-> file
               tag-> the tag to fill in
 Returns:      none
 ******************************************************************/
void id3v1_gettag(FILE *filept,Tag *tag)
{
  long pos;
  tag->valid=0;
  tag->filesize=0;
  pos = Ftell(filept);
  if (pos == -1)
    return;
  Fseek(filept, 0, SEEK_END);
  tag->filesize=(unsigned int)Ftell(filept);
  if (tag->filesize>128)
  {
    char buf[128];
    Fseek(filept, -128, SEEK_END);
    Fread(buf, 1, 128, filept);
    id3v1_decodetag(buf,tag);
  }
  Fseek(filept, pos, SEEK_SET);
}
