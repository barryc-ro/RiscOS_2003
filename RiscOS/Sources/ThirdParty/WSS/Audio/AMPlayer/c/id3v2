/*******************************************************************
 * File:     id3v2
 * Purpose:  ID3v2 handling
 * Author:   Justin Fletcher
 * Date:     25 Nov 2000
 ******************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "swis.h"
#include "common.h"
#include "main.h"
#include "id3v2.h"
#include "pi_include.h"

#include "Fstream.h"

/* Define this if you want the ID3v2 tags supported */
#define USE_ID3V2_TAGS

/* Define this to use an asynchronous error to indicate that ID3v2 tags have
   been processed */
/* #define USE_ERROR_ON_PROCESS */

/* Define this if you just want to log frames */
/* #define USE_LOG_FRAMES */

/* Define this if you want a service call */
#define USE_SERVICE

/* Define this to debug this file */
/* #define DEBUG */

/* Flags for the header */
#define HEADERF_UNSYNCHRONISED (1<<7)
#define HEADERF_EXTENDEDHEADER (1<<6)
#define HEADERF_EXPERIMENTAL   (1<<5)
#define HEADERF_FOOTER         (1<<4)
/* In version 2 the header had the compression marker */
#define HEADERF_V2COMPRESSED   (1<<6)

/* Flags for Extended Header */
#define EHEADERF_UPDATE        (1<<6) /* Update of earlier tag */
#define EHEADERF_CRC           (1<<5) /* Data is CRCd */
#define EHEADERF_RESTRICT      (1<<4) /* Tag restrictions */

/* Encoding types */
#define ENCODING_8859          (0)
#define ENCODING_UTF16         (1)
#define ENCODING_UTF16BE       (2)
#define ENCODING_UTF8          (3)

/* Frame header */
  /* status */
#define FRAMEF_HASLENGTH       (1<<0) /* Length field is give */
#define FRAMEF_UNSYNCHRONISED  (1<<1)
#define FRAMEF_ENCRYPTED       (1<<2)
#define FRAMEF_COMPRESSED      (1<<3)
#define FRAMEF_GROUP           (1<<6) /* Part of a group of tags */
  /* format */
#define FRAMEF_READONLY        (1<<12) /* Don't mess with me */
#define FRAMEF_FILEDISCARD     (1<<13) /* What to do if file altered */
#define FRAMEF_TAGDISCARD      (1<<14) /* What to do if tag altered */
  /* Invalid bits, if set we're probably can't understand it */
#define FRAMEF_INVALID         ((1<<15) | \
                                (1<<7) | \
                                (1<<5) | \
                                (1<<4))

/* Convert version 3 to version 4 flags */
#define FRAMEF_V3TOV4(a,b)     ( ((a<<7) & 0xe0) | /* %abc00000 -> %0abc0000 */\
                                 ((b & 0x20)<<1) | /* %00k00000 -> %0h000000 */\
                                 ((b & 0xc0)>>4) | /* %ij000000 -> %0000km00 */\
                                 ((b & 0x80)>>7)   /* %i0000000 -> %0000000p */)

#ifdef DEBUG
#define dprintf printf
#else
#define dprintf if (0) printf
#endif

typedef struct tagdata {
  int version;     /* Original ID3v2 version of tag */
  int headerflags; /* Original ID3v2 header flags (promoted to ID3v2.4) */
} tagdata;

typedef struct framedata {
  int number;     /* frame number */
  char tag[5];    /* Tag name - 0 terminated */
  int flags;      /* Flags on this frame, promoted to ID3v2.4 */
  char *data;     /* Pointer to data */
  int length;     /* Length of data */
  int encryption;         /* Type of encryption, or -1 if none */
  int uncompressedlength; /* Uncompressed length, or -1 if not given */
  int grouping;           /* Group of data */
} framedata;

#ifdef USE_ID3V2_TAGS
typedef struct tagcount {
  void *next;
  char tag[5];
  int count;
} tagcount;

STATIC tagcount *Counts=NULL;
STATIC tagcount CountGlobal;

/* Whether processing is enabled */
STATIC int Enabled=0;

/*********************************************** <c> Gerph *********
 Function:     tag_enable
 Description:  Enable/disable tag processing
 Parameters:   tag-> the tag to enable/disable, NULL for none
               type = 0 to decrement, 1 to increment, -1 to read, -2
                      to do inexact match
 Returns:      number of enables, or -1 if failed
 ******************************************************************/
STATIC int tag_enable(char *tag, int type)
{
  tagcount *count;
  if (type<-2 || type>1)
    return -1; /* Bad input */

  if (type==-2 && CountGlobal.count>0)
    return CountGlobal.count;

  if (tag==NULL)
  {
    count=&CountGlobal;
    if (type==1)
      count->count++;
    else if (type==0 && count->count>0)
      count->count--;
  }
  else
  {
    int taglen=strlen(tag);
    tagcount *last=NULL;
    tagcount *next=NULL;

    if (taglen==0 || taglen==2 || taglen>4)
      return -1; /* Silly tag length */

    count=Counts;
    while (count)
    {
      next=count->next;
      if ((type!=-2 && (strcmp(count->tag,tag)==0)) ||
          (type==-2 && (strncmp(count->tag,tag,strlen(count->tag))==NULL)))
        break;
      last=count; count=next;
    }

    if (count==NULL)
    {
      if (type==-2 || type==-1)
        return 0; /* Matched nothing and wanted inexact match
                                         or wanted just the value */
      if (type==0)
        return -1; /* Decrement and it's already at 0 ? */

      count=malloc(sizeof(tagcount));
      if (!count)
        return -1; /* Failed to create */
      strcpy(count->tag,tag);
      count->count=0; /* Will increment in a moment */
      count->next=Counts; Counts=count;
    }

    if (type==0)
    {
      count->count--;
      if (count->count==0) /* Decremented to 0 */
      {
        if (last)
          last->next=next;
        else
          Counts=next;
        free(count);
        return 0;
      }
    }
    else if (type==1)
      count->count++;
  }
  return count->count;
}

/*********************************************** <c> Gerph *********
 Function:     id3v2_skiptag
 Description:  Skip an ID3v2 tag without processing it (tag starts
               at the current pointer)
 Parameters:   filept-> the file we're skipping in
 Returns:      any errors; id3v2 tag skipped (if understood)
 ******************************************************************/
_kernel_oserror *id3v2_skiptag(FILE *filept)
{
  struct {
    char id[3];
    char version_major;
    char version_minor;
    char flags;
    char length1;
    char length2;
    char length3;
    char length4;
  } header;
  long start;
  _kernel_oserror *error=NULL;

  start=Ftell(filept);

  while (1)
  {
    int length;
    int read;
    dprintf("Trying to skip ID3v2 tags... at %lx\n",start);
    read=Fread(&header,1,10,filept);
    if (read!=10)
    {
      break;
    }
    if (header.id[0]!='I' ||
        header.id[1]!='D' ||
        header.id[2]!='3')
    {
      dprintf("non-ID3v2 tag\n");
      break;
    }

    dprintf("ID3v2 tag...\n");
    if (header.version_major >= 4)
      break;
    if (header.length1 & 0x80 ||
        header.length2 & 0x80 ||
        header.length3 & 0x80 ||
        header.length4 & 0x80)
      break;

    length=(header.length1<<21) |
           (header.length2<<14) |
           (header.length3<<7) |
           (header.length4);
    if (header.version_major==4 && (header.flags & HEADERF_FOOTER))
    {
      dprintf("Has a footer...\n");
      length+=10;
    }

    dprintf("ID3v2 tag, length = %x\n",length);
    if (Fseek(filept,length,SEEK_CUR)) /* Skip the tag */
    {
      error=err(ERROR_BADHEADER, "ID3v2 tag corrupt");
      break; /* Couldn't skip */
    }
    start=Ftell(filept);
  }
  dprintf("Done ID3v2 skip, error = %s\n",error ? error->errmess : "[none]");
  dprintf("Now at %lx\n",start);
  Fseek(filept,start,SEEK_SET);
  return error;
}

/*********************************************** <c> Gerph *********
 Function:     unsynchronise
 Description:  Remove the unsynchronisation from a data block
 Parameters:   data-> data to remove unsynchronisation from
               length-> length of data, to update
 Returns:      none
 ******************************************************************/
STATIC void unsynchronise(char *data,int *lengthp)
{
  char *dest=data;
  int outlength=0;
  int length=*lengthp;
  while (length)
  {
    char c=*data;
    if (c == 0xff && data[1]==0x00)
    {
      data++; if (length>1) length--;
    }
    if (dest!=data)
      *dest=c;
    data++; dest++; outlength++; length--;
  }
  *lengthp=outlength;
}

/*********************************************** <c> Gerph *********
 Function:     id3v2_frame
 Description:  Process an ID3v2 frame
 Parameters:   tag-> information about this tag
               frame-> information about the frame within this tag
 Returns:      none
 ******************************************************************/
STATIC void id3v2_frame(tagdata *tag,framedata *frame)
{
#ifdef USE_LOG_FRAMES
#define SysLog_LogMessage (0x4C880)
  {
    char buf[256];
    sprintf(buf,"%i: Tag '%s', length %i, flags %i, enable = %i",
                 frame->number,frame->tag,frame->length,frame->flags,
                 tag_enable(frame->tag,-2));
    _swix(SysLog_LogMessage,_INR(0,2),"AMPlayer",buf,100);
  }
#endif
  /* Issue service call to indicate to clients the ID3v2 tag */

#define ZLib_ZUncompress (0x53ac7)
#define Z_OK            0
#define Z_STREAM_END    1
#define Z_NEED_DICT     2
#define Z_ERRNO        (-1)
#define Z_STREAM_ERROR (-2)
#define Z_DATA_ERROR   (-3)
#define Z_MEM_ERROR    (-4)
#define Z_BUF_ERROR    (-5)
#define Z_VERSION_ERROR (-6)

  if (frame->flags & FRAMEF_ENCRYPTED)
  {
    async_err("Encrypted ID3v2 frame");
    return;
  }

  if (tag_enable(frame->tag, -2)<=0)
  {
    /* async_err("Ignored %s\n",frame->tag); */
    return;
  }

  if (frame->flags & FRAMEF_UNSYNCHRONISED)
    unsynchronise(frame->data,&frame->length);

  if (frame->flags & FRAMEF_COMPRESSED)
  {
    char *dest;
    int destsize=frame->uncompressedlength;
    int rcode;
    int rsize;
    _kernel_oserror *err;
    if (destsize == -1)
    {
      async_err("Bad ID3v2 compressed frame");
      return;
    }

    dest=malloc(frame->uncompressedlength);
    if (dest==NULL)
    {
      async_err("No memory for compressed ID3v2 frame");
      return;
    }

    /* Do decompression into new buffer */
    if (((err=_swix(ZLib_ZUncompress,_INR(0,3)|_OUTR(0,1),
                                   dest,destsize,frame->data,frame->length,
                                   &rcode,&rsize))!=NULL) ||
        (rcode!=Z_OK) ||
        (rsize!=destsize))
    {
      /* Failed for some reason */
      if (err)
        async_err("Cannot decompress ID3v2 frame");
      else if (rcode!=Z_OK)
        async_err("%i %s ID3v2 frame decompression error",rcode,frame->tag);
      else
        async_err("Bad compressed ID3v2 frame");
      free(dest);
      return;
    }
    /* Ok, *now* we set the frame up for the external API - the
       uncompressedlength field becomes the compressed length of
       the data.
    */
    frame->data=dest;
    frame->uncompressedlength=frame->length;
    frame->length=rsize;
    _swix(OS_ServiceCall,_INR(0,3),SC_ID3v2,SERVICECALL,tag,frame);
    free(dest);
  }
  else
    _swix(OS_ServiceCall,_INR(0,3),SC_ID3v2,SERVICECALL,tag,frame);
}
#endif



/*********************************************** <c> Gerph *********
 Function:     id3v2_header
 Description:  Introduction of ID3v2 header
 Parameters:   filept-> file to read from
               version = ID3v2 version number
               hflags = ID3v2 flags
               len = length of data
 Returns:      none
 ******************************************************************/
void id3v2_header(FILE *filept, unsigned int version, unsigned int hflags,
                  int length)
{
#ifdef USE_ID3V2_TAGS
  framedata frame;
  tagdata tagblk;
  char *data=NULL;
  char *ptr;
  int num=0;

  if (!Enabled)
  {
    async_err("Skipped ID3v2 tag");
    return;
  }

  if (length<0 || length>1024*1024*256)
  {
    async_err("ID3v2 too long");
    return;
  }
  if (version>0x4ff)
  {
    async_err("Skipped ID3v2.%i.%i",version>>8,version & 0xff);
    return;
  }

  /* Set up the tag identification for this data */
  tagblk.version=version;
  tagblk.headerflags=hflags;

  /* Identify the different header types */
  if (version < 0x300)
  {
    if (hflags & HEADERF_V2COMPRESSED)
    {
      async_err("Skipped ID3v2.2 compression");
      return;
    }
  }
  else
  {
    if (hflags & HEADERF_EXPERIMENTAL)
    {
      async_err("Skipped Experimental ID3v2");
      return;
    }
    if (hflags & HEADERF_EXTENDEDHEADER)
    {
      char buf[6];
      int len;
      long end;
      /* Recommendation is that any extended headers pre version 4
         be ignored */
      Fread(buf,1,6,filept);
      len=(buf[0]<<21) | (buf[1]<<14) | (buf[2]<<7) | buf[3];
      end=Ftell(filept)+len-6;
      length-=len;
      if (length<0)
      {
        async_err("Bad ID3v2.%i.%i extended header",version>>8,version & 0xff);
        return;
      }
      if (version<0x400)
        async_err("Skipped ID3v2.%i.%i extended header",version>>8,version & 0xff);
      else
      {
        /* Do stuff with extended headers */
      }
      Fseek(filept,end,SEEK_SET);
    }
  }

  data=malloc(length);
  if (data==NULL)
  {
    async_err("No memory for ID3v2 data");
    return;
  }
  ptr=data;
  Fread(data,1,length,filept);

  /* Perform any unsynchronisation removal required */
  if (hflags & HEADERF_UNSYNCHRONISED)
  {
    int len=length;
    unsynchronise(data,&len);

#if 0
    /* DEBUG */
    {
      int *x=(int *)0x7000;
      x[0]=(int)data;
      x[1]=length;
      x[2]=len;
    }
#endif

    length=len;
  }

  while (length>0)
  {
    char *tag;
    char *end;
    int len;
    unsigned int frameflags;
    if (version<0x300)
    {
      /* Version 2 and earlier only used 3 bytes to indicate length and tag */
      frameflags=0;
      len=(ptr[3]<<16) | (ptr[4]<<8) | ptr[5];
      ptr[3]='\0'; /* v2 tags are two character! */
      tag=ptr;
      length-=6+len; ptr+=6;
      end=ptr+len;
    }
    else if (version<0x400)
    {
      /* Version 3 had a different flags layout */
      int byte1=ptr[8];
      int byte2=ptr[9];
      frameflags=FRAMEF_V3TOV4(byte1,byte2); /* Promote the flags */
      len=(ptr[4]<<24) | (ptr[5]<<16) | (ptr[6]<<8) | ptr[7]; /* .3 version */
      ptr[4]='\0'; /* Terminate the tag */
      tag=ptr;
      length-=10+len; ptr+=10;
      end=ptr+len;
    }
    else
    {
      /* Version 4 is our internal representation format */
      frameflags=(ptr[8]<<8) | ptr[9];
      len=(ptr[4]<<21) | (ptr[5]<<14) | (ptr[6]<<7) | ptr[7]; /* .4 unsynch */
      ptr[4]='\0'; /* Terminate the tag */
      tag=ptr;
      end=ptr+len;
      length-=10+len; ptr+=10;
    }
    if (tag[0]>=0x80 || tag[1]>=0x80 || tag[2]>=0x80 || tag[3]>=0x80)
    {
      free(data);
      async_err("Bad ID3v2 tag name");
      return;
    }

    if (tag[0]==0 && tag[1]==0 && tag[2]==0 && tag[3]==0)
      break; /* Reached padding */

    if (length<0)
    {
      /* It should only reduce length to 0, not beyond */
      free(data);
      async_err("Bad ID3v2 length (%s) #%i",tag,num);
      return;
    }

    if (frameflags & FRAMEF_INVALID)
      async_err("Invalid ID3v2 flags (%s)",tag);
    else
    {
      int uncompressedlength=-1;
      int encryption=-1;
      int grouping=-1;
      if (frameflags & FRAMEF_HASLENGTH)
      {
        uncompressedlength=(ptr[0]<<21) | (ptr[1]<<14) | (ptr[2]<<7) | ptr[3];
        ptr+=4; len-=4;
      }
      if (frameflags & FRAMEF_ENCRYPTED)
        encryption=*ptr++,len-=1;
      if (frameflags & FRAMEF_GROUP)
        grouping=*ptr++,len-=1;
      if (len<0)
      {
        async_err("Bad ID3v2 frame (%s)",tag);
      }
      else
      {
        frame.number=num;
        memcpy(frame.tag,tag,5);
        frame.flags=frameflags;
        frame.data=ptr;
        frame.length=len;
        frame.encryption=encryption;
        frame.uncompressedlength=uncompressedlength;
        frame.grouping=grouping;
        id3v2_frame(&tagblk,&frame);
      }
    }
    num++;
    ptr=end;
  }
#ifdef USE_ERROR_ON_PROCESS
  async_err("Processed ID3v2.%i.%i",version>>8,version & 0xff);
#endif
  free(data);
#else
  async_err("Skipped ID3v2 tag");
#endif
}

/*********************************************** <c> Gerph *********
 Function:     id3v2_control
 Description:  Control ID3v2 operation
 Parameters:   reason = reason code
               r-> register set (our parameters start at r->r[2]
 Returns:      error block pointer if error, or NULL if none
 ******************************************************************/
_kernel_oserror *id3v2_control(int reason,_kernel_swi_regs *r)
{
#ifdef USE_ID3V2_TAGS
  switch (reason)
  {
    case ID3_ENABLE:
      {
        /* r2 = 0 to disable, 1 to enable, -1 to read */
        if (r->r[2]==0 && Enabled>0)
          Enabled--;
        if (r->r[2]==1)
          Enabled++;
        r->r[2]=Enabled;
        return NULL;
      }

    case ID3_ACCEPT:
      {
        /* Specify ID3 tags to accept */
        /* r2 = pointer to tag name :
                  <one character>    : Accept all tags starting with that
                  <three characters> : Accept version 2 tag
                  <four characters>  : Accept version 3+ tag
                  <zero>             : Accept all tags
           r3 = 0 to disable, 1 to enable, -1 to read
           on exit
           r2 = number of times enabled (0 if disabled)
        */
        char *accept=(char *)r->r[2];
        int type=r->r[3];
        int count=tag_enable(accept,type);

        if (count==-1)
          return err(ERROR_BADID3TAG,"Bad ID3 tag parameter");

        r->r[2]=count;
        return NULL;
      }
  }
  return err(ERROR_NOID3,"Unrecognised ID3v2 control reason");
#else
  return err(ERROR_NOID3,"ID3v2 support disabled");
#endif
}
