/*
 * Discrete Cosine Transform (DCT) for subband synthesis
 */

#include "defs.h"

#include "fpasm.h"
#include "tabcalc.h"
#include "plugin.h"

fpl cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];
fpl *pnts[5];

void make_dct64_table(void)
{
  int i,k,kr,div;
  fpl *costab;

  pnts[0]=cos64;
  pnts[1]=cos32;
  pnts[2]=cos16;
  pnts[3]=cos8;
  pnts[4]=cos4;

  for(i=0;i<5;i++)
  {
    kr =0x10>>i;
    div=0x40>>i;
    costab = pnts[i];
    for(k=0;k<kr;k++)
      costab[k] = make_costab(k*2+1,64>>i);
  }
}

#if SYNTH_ASM || FP
extern void dct64_1(fpl *samples, fpl **pnts, fpl *bufs);
#endif

void dct64(fpl *out0,fpl *out1,fpl *samples)
{
#if (!SYNTH_ASM) && (!FP)
  int i,j;
  fpl *b1,*b2,*bs,*costab;
#endif
  fpl bufs[64];

  if (!pi_pre_dct(out0,out1,samples))
  {
#if SYNTH_ASM || FP
    dct64_1(samples, pnts, bufs);
#else
    b1 = samples;
    b2 = b1 + 32;
    bs = bufs;
    costab = pnts[0]+16;

    for(i=15;i>=0;i--)
      *bs++ = (*b1++ + *--b2);
    for(i=15;i>=0;i--)
      *bs++ = mulss_pnts_SH((*--b2 - *b1++),*--costab);

    b1 = bufs;
    b2 = b1 + 16;
    costab = pnts[1]+8;

    for(i=7;i>=0;i--)
      *bs++ = (*b1++ + *--b2);
    for(i=7;i>=0;i--)
      *bs++ = mulss_pnts_SH((*--b2 - *b1++),*--costab);

    b2 += 32;
    costab += 8;
    for(i=7;i>=0;i--)
      *bs++ = (*b1++ + *--b2);
    for(i=7;i>=0;i--)
      *bs++ = mulss_pnts_SH((*b1++ - *--b2),*--costab);

    bs = bufs;
    b2 = b1 + 8;
    costab = pnts[2];

    for(j=2;j;j--)
    {
      for(i=3;i>=0;i--)
        *bs++ = (*b1++ + *--b2);
      for(i=3;i>=0;i--)
        *bs++ = mulss_pnts_SH((*--b2 - *b1++),costab[i]);
      b2 += 16;
      for(i=3;i>=0;i--)
        *bs++ = (*b1++ + *--b2);
      for(i=3;i>=0;i--)
        *bs++ = mulss_pnts_SH((*b1++ - *--b2),costab[i]);
      b2 += 16;
    }

    b1 = bufs;
    b2 = b1 + 4;
    costab = pnts[3];

    for(j=4;j;j--)
    {
      *bs++ = (*b1++ + *--b2);
      *bs++ = (*b1++ + *--b2);
      *bs++ = mulss_pnts_SH((*--b2 - *b1++),costab[1]);
      *bs++ = mulss_pnts_SH((*--b2 - *b1++),costab[0]);
      b2 += 8;
      *bs++ = (*b1++ + *--b2);
      *bs++ = (*b1++ + *--b2);
      *bs++ = mulss_pnts_SH((*b1++ - *--b2),costab[1]);
      *bs++ = mulss_pnts_SH((*b1++ - *--b2),costab[0]);
      b2 += 8;
    }
    bs = bufs;
    costab = pnts[4];

    for(j=8;j;j--)
    {
      fpl v0,v1;

      v0=*b1++; v1 = *b1++;
      *bs++ = v0+v1;
      *bs++ = mulss_pnts_SH(v0-v1,*costab);
      v0=*b1++; v1 = *b1++;
      *bs++ = v0+v1;
      *bs++ = mulss_pnts_SH(v1-v0,*costab);
    }

    for(b1=bufs,i=8;i;i--,b1+=4)
      b1[2] += b1[3];

    for(b1=bufs,i=4;i;i--,b1+=8)
    {
      b1[4] += b1[6];
      b1[6] += b1[5];
      b1[5] += b1[7];
    }

    for(b1=bufs,i=2;i;i--,b1+=16)
    {
      b1[8]  += b1[12];
      b1[12] += b1[10];
      b1[10] += b1[14];
      b1[14] += b1[9];
      b1[9]  += b1[13];
      b1[13] += b1[11];
      b1[11] += b1[15];
    }
#endif
    out0[0x10* 0] = bufs[    1];
    out0[0x10* 1] = bufs[16+14] + bufs[16+ 1];
    out0[0x10* 2] = bufs[   14];
    out0[0x10* 3] = bufs[16+ 6] + bufs[16+14];
    out0[0x10* 4] = bufs[    6];
    out0[0x10* 5] = bufs[16+10] + bufs[16+ 6];
    out0[0x10* 6] = bufs[   10];
    out0[0x10* 7] = bufs[16+ 2] + bufs[16+10];
    out0[0x10* 8] = bufs[    2];
    out0[0x10* 9] = bufs[16+12] + bufs[16+ 2];
    out0[0x10*10] = bufs[   12];
    out0[0x10*11] = bufs[16+ 4] + bufs[16+12];
    out0[0x10*12] = bufs[    4];
    out0[0x10*13] = bufs[16+ 8] + bufs[16+ 4];
    out0[0x10*14] = bufs[    8];
    out0[0x10*15] = bufs[16+ 0] + bufs[16+ 8];
    out0[0x10*16] = bufs[    0];

    out1[0x10* 0] = bufs[    1];
    out1[0x10* 1] = bufs[16+ 1] + bufs[16+ 9];
    out1[0x10* 2] = bufs[    9];
    out1[0x10* 3] = bufs[16+ 9] + bufs[16+ 5];
    out1[0x10* 4] = bufs[    5];
    out1[0x10* 5] = bufs[16+ 5] + bufs[16+13];
    out1[0x10* 6] = bufs[   13];
    out1[0x10* 7] = bufs[16+13] + bufs[16+ 3];
    out1[0x10* 8] = bufs[    3];
    out1[0x10* 9] = bufs[16+ 3] + bufs[16+11];
    out1[0x10*10] = bufs[   11];
    out1[0x10*11] = bufs[16+11] + bufs[16+ 7];
    out1[0x10*12] = bufs[    7];
    out1[0x10*13] = bufs[16+ 7] + bufs[16+15];
    out1[0x10*14] = bufs[   15];
    out1[0x10*15] = bufs[16+15];
  }
  pi_post_dct(out0,out1,samples);

}


