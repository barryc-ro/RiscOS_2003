#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "swis.h"

#include "amplayer.h"
#include "main.h"
#include "sound.h"

#include "Fstream.h"

#define PW ((void *)&pw)

/* Hacky global things */
int pw;
int do_states = 0;
int bufchanges = 0;
int reg_pluginss = 0;
extern int frequency;

static char wav_header[] =
{ 0x52, 0x49, 0x46, 0x46, 0xFC, 0xC5, 0x22, 0x00,
  0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
  0x44, 0xAC, 0x00, 0x00, 0x88, 0x58, 0x01, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61,
  0xD8, 0xC5, 0x22, 0x00
};

void call_do_state(void) {

  do_states++;
}

void call_bufchange(void) {

  bufchanges++;
}

void call_reg_plugins(void) {

  reg_pluginss++;
}

int write(FILE *out, int s, int f)
{
  int n, i;

  if (out) {
    n = f-s;
    i = 1;
    while ((n) && (i)) {
      i = fwrite(&svar.audiobuf[s], 1, n, out);
      s += i;
      n -= i;
    }
    if (i == 0) {
      fprintf(stderr, "Write failed! (Disc full?)\n");
      return 1;
    }
  }
  return 0;
}

int main(int argc, char *argv[])
{
  char *input;
  char *output;
  int err;
  int wav_mode;
  int flag_num;
  int len;
  int my_freq;
  FILE *out;

  fprintf(stderr, "AMPapp: MP3->PCM decoder\n");
  fprintf(stderr, "Powered by AMPlayer v1.33\n");

  do_states = 1;
  init_code("" /* CLI tail */,0 /* Podule base */,PW);

  /* Parse the input flags */
  input  = NULL;
  output = NULL;
  wav_mode = 0;

  flag_num = 1;
  err = 0;
  while ((argc > flag_num) && (!err)) {
    if (strcmp(argv[flag_num], "-w") == 0) {
      wav_mode = 1;
      flag_num++;
    } else if (input == NULL) {
      input = argv[flag_num++];
    } else if (output == NULL) {
      output = argv[flag_num++];
    } else {
      err = 1;
    }
  }
  if ((err) || (input == NULL))
  {
    fprintf(stderr,"Syntax: *%s [-w] <input> [<output>]\n\n",argv[0]);
    fprintf(stderr,"Decode input file into output file. If no output filename\nis given, then data is discarded (useful for timings).\n");
    fprintf(stderr,"\nOutput is raw PCM data unless the -w flag is specified\n");
    exit(EXIT_FAILURE);
  }

  module_cmd(input, 1 /* arguments */, CMD_AMPlay, PW);

  if (output) {
    out = Fopen(output, "wb");
    if (!out)
    {
        fprintf(stderr,"Failed to write to %s\n",output);
        exit(EXIT_FAILURE);
    }
  } else {
    out = NULL;
  }

  if (wav_mode) {
    if (fwrite(wav_header, 1, 44, out) != 44) {
      fprintf(stderr, "Write failed! (Disc full?)\n");
      exit(EXIT_FAILURE);
    }
  }

  err = 0;
  my_freq = -1;
  while ((do_states || bufchanges || reg_pluginss) && (!err)) {
    if (do_states) {
      do_states--;
      do_state(NULL, PW);
    }
    /* bufchange and reg_plugins are merely here to mirror the effect of
       callbacks so that we have a more accurate representation of the
       system. They won't actually be called, unless the code in main
       is restructured quite a bit. */
    if (bufchanges) {
      bufchanges--;
      bufchange(NULL, PW);
    }
    if (reg_pluginss) {
      reg_pluginss--;
      reg_plugins(NULL, PW);
    }
    if ((my_freq != frequency) && (frequency != 0)) {
      if ((my_freq != -1) && (wav_mode)) {
        printf("[Frequency Changed! Can't cope with that in WAV mode!]");
        err = 1;
      } else {
        my_freq = frequency;
        printf("[Frequency=%dHz]", my_freq);
      }
    }
    if (svar.playofs != svar.fillofs) {
      printf(".");
      fflush(stdout);
      if (svar.fillofs < svar.playofs) {
        err = write(out, svar.playofs, svar.audiobufsize);
        svar.playofs -= svar.audiobufsize;
        svar.audiobufsize = svar.nextaudiobufsize;
        err = write(out, 0, svar.fillofs);
      } else {
        err = write(out, svar.playofs, svar.fillofs);
      }
      svar.playofs = svar.fillofs;
      do_states++;
    }
  }

  printf("\n");

  final_code(1 /* Fatal */,0 /* Podule base */,PW);

  if (wav_mode) {
    len = (int)ftell(out);
    len += 8;
    fseek(out, 4, SEEK_SET);
    fputc(len, out);
    fputc(len>>8, out);
    fputc(len>>16, out);
    fputc(len>>24, out);
    fseek(out, 0x18, SEEK_SET);
    fputc(frequency, out);
    fputc(frequency>>8, out);
    fputc(frequency>>16, out);
    fputc(frequency>>24, out);
    frequency *= 4;
    fputc(frequency, out);
    fputc(frequency>>8, out);
    fputc(frequency>>16, out);
    fputc(frequency>>24, out);
    fseek(out, 0x28, SEEK_SET);
    len -= 0x2c;
    fputc(len, out);
    fputc(len>>8, out);
    fputc(len>>16, out);
    fputc(len>>24, out);
  }

  Fclose(out);

  if (wav_mode) {
    _swix(OS_File, _INR(0,2), 18, output, 0xFB1);
  }

  if (err)
    return EXIT_FAILURE;
  return EXIT_SUCCESS;
}
