#ifndef __SOUND_H
#define __SOUND_H

#include "snd_defs.h"

/* ---- Defines ------------------------------------------------------------ */


/* ---- Declarations ------------------------------------------------------- */


/* ---- Independants ------------------------------------------------------- */

typedef struct
{
  char *audiobuf;
  int   playofs;
  int   fillofs;
  int   busy;
  int   audiobufsize;
  int   paused;
  int   nextaudiobufsize;
  int   resetonlocate; /* whether we should reset when locate completes */
  int   freq_change_is_immediate;
  int   _prevconfig0;
  int   _prevconfig1;
  int   _prevconfig2;
  int   _prevconfig3;
  int   _prevconfig4;
  int   _prevpan0;
  int   _prevpan1;
  int   _prevvoice0;
  int   _prevvoice1;
  int   _vulen;
  int   _vu_l;
  int   _vu_r;
  int   _linlog;
  int   _ourvoice;
  int   _pw;
  int   _accum;
  int   _vuused;
} Svar;


/* ---- Includes ----------------------------------------------------------- */

#include "kernel.h"


/* ---- Dependants --------------------------------------------------------- */

extern Svar svar;


/* ---- Functions ---------------------------------------------------------- */

/* Return the type of Sound system to use */
extern int		Sound_Available(void);

/* Sound stuff - 16 bit
 */
#if SOUND16
extern void		Sound16_SetRate(int frequency,Svar *);
extern _kernel_oserror *Sound16_Init(void *pw,Svar *);
extern _kernel_oserror *Sound16_Final(Svar *);
#endif

/* Sound stuff - 8 bit
 */
#if SOUND8
extern void		Sound8_SetRate(int frequency,Svar *);
extern _kernel_oserror *Sound8_Init(void *pw,Svar *);
extern _kernel_oserror *Sound8_Final(Svar *);
#endif

/* Sound stuff - SharedSound
 */
#if SOUNDSHARED
extern void		SoundShared_SetRate(int frequency,Svar *);
extern _kernel_oserror *SoundShared_Init(void *pw,Svar *, const char *);
extern _kernel_oserror *SoundShared_Final(Svar *);
#endif

/* Sound - both formats
 */
extern int		get_vu(int *l,int *r, Svar *);
extern _kernel_oserror *callback(void (*func)(void),void *pw);
extern _kernel_oserror *removecallback(void (*func)(void),void *pw);
extern void             set_stack_size(int level);
extern int              check_stack(void (*func)(void),void *pw);

#endif
