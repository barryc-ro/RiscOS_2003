#ifndef __COMMON_H
#define __COMMON_H

#include "defs.h"

/* ---- Defines ------------------------------------------------------------ */

/* File info block validation bits.
 * Doubles as request bits for AMPlayer_FileInfo
 */
#define FIB_TTIME 0x001 /* Total time valid */
#define FIB_ETIME 0x002 /* Elapsed time valid */
#define FIB_TAG   0x004 /* ID3 tag present */
#define FIB_VU    0x008 /* VU bar data present */
#define FIB_ERROR 0x010 /* Error present, pointer valid */
#define FIB_NEXT  0x020 /* Next pointer valid */
#define FIB_VBR   0x040 /* Variable bit rate in use
                           (varied since start of play)*/
#define FIB_TRACK 0x080 /* ID3v1.1 track valid */
#define FIB_STREAM 0x100 /* File is really a stream */

#define FRIB_COPYRIGHT 0x001 /* Frame is copyright */
#define FRIB_ORIGINAL  0x002 /* Frame is original */
#define FRIB_CRC       0x004 /* Frame is CRCd */

#define MPG_MD_STEREO       0
#define MPG_MD_JOINT_STEREO 1
#define MPG_MD_DUAL_CHANNEL 2
#define MPG_MD_MONO         3

#define MAXFRAMESIZE 1792

#define SBLIMIT     32
#define SSLIMIT     18
#define SCALE_BLOCK 12

/* Control reason codes */
#define CONTROL_VOLUME      (0)
#define CONTROL_BUFFERSIZE  (1)
#define CONTROL_STACKLEVEL  (2)
#define CONTROL_ID3v2       (3)

/* Plugin controls */
#define PLUGIN_ADD       (0)
#define PLUGIN_REMOVE    (1)
#define PLUGIN_ENUMERATE (2)

/* Error codes */
#define ERROR_BADVOLUME     (2)
#define ERROR_BADPARAMETER  (3)
#define ERROR_BADFILE       (4)
#define ERROR_BADSWI        (5)
#define ERROR_NOMEMORY      (6)
#define ERROR_BADPROCESSOR  (7)
#define ERROR_NOID3         (8)
#define ERROR_BADPLUGIN     (9)
#define ERROR_BADBITRATE    (10)
#define ERROR_BADHEADER     (11)
#define ERROR_BADCONTROL    (12)
#define ERROR_BADID3TAG     (13)
#define ERROR_BADSTREAM     (14)
#define ERROR_STREAMLOCATE  (15)
#define ERROR_BADSOUNDSYS   (16)

/* ---- Declarations ------------------------------------------------------- */
typedef struct frame  Frame;	/* Things related to a single frame */


/* ---- Independants ------------------------------------------------------- */

/* File info block */
typedef struct
{
  word  flags;
  int   ratio;
  int   ttime;
  int   etime;
  char *title;
  char *artist;
  char *album;
  char *year;
  char *comment;
  int   vu_l;
  int   vu_r;
  int   volume;
  char *error;
  char *nextfile;
  word  genre;
  word  track;
  word  bitrate_low;
  word  bitrate_high;
} Fib;

/* Frame info block */
typedef struct
{
  char  mpegver[4];
  word  layer;
  word  freq;
  word  bitrate;
  word  mode;
  word  chan;
  word  flags;
  fpl  *dctL;
  fpl  *dctR;
} Frib;


/* ---- Includes ----------------------------------------------------------- */
#include "kernel.h"
#include "layer2.h" /* for Al_Table */


/* ---- Dependants --------------------------------------------------------- */
struct frame
{
  int mpeg25;
  int lsf;
  int lay;
  int sampling_frequency;
  int bitrate_index;
  int mode;
  int mode_ext;
  int stereo;
  int copyright;
  int original;
  int crc;
  int jsbound;
  int II_sblimit;
  int padding;
  Al_Table *alloc;
  void (*do_layer)(Frame *fr);
  fpl *dctR;
  fpl *dctL;
  int bitrate_variable; /* If set, it is Variable Bit Rate */
  int bitrate_low;
  int bitrate_high;
  int valid;
};


typedef enum {
  frame_eof = -1,	/* Attempt to read reached end of frame */
  frame_moredata = 0,	/* Attempt to read failed due to temporarily running out of data - try again later */
  frame_ok = 1,		/* Success! */
  frame_timeout		/* Check we haven't timed out and try again - only returned by read_frame */
} FrameState;

/* ---- Functions ---------------------------------------------------------- */
extern Frame fr;
extern int tabsel_123[2][3][16];
extern int freqs[];

extern void set_pointer(int);
extern void read_frame_init(Frame *fr);
extern FrameState  read_frame(Frame *fr);
extern _kernel_oserror *read_fileinfo(word info, char *name, Fib *fib, Frib *frib);

#endif
