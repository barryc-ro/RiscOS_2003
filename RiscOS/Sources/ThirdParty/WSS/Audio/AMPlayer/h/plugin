#ifndef __PLUGIN_H
#define __PLUGIN_H

/* ---- Defines ------------------------------------------------------------ */


/* ---- Declarations ------------------------------------------------------- */

typedef struct plugin_s Plugin;


/* ---- Independants ------------------------------------------------------- */

typedef int plugin_code(void *pw, fpl *, fpl *, fpl *);


/* ---- Includes ----------------------------------------------------------- */

#include "kernel.h"
#include "pi_include.h"


/* ---- Dependants --------------------------------------------------------- */

struct plugin_s
{
  struct plugin_s *next;	/* Pointer to next, or NULL				*/
  void *pw;			/* An opague word for each plugin			*/
  plugin_code *pre_dct;		/* Called before doing the dct. Should return:		*/
  				/* 0 if the dct hasn't been done (but values might	*/
  				/*   still have been modified				*/
  				/* 1 if the dct has been done, so dct64 will not	*/
  				/*   do it again.					*/
  plugin_code *post_dct;	/* Called after doing the dct.				*/
  plugin_info *info;		/* Pointer to an info block.				*/
};


/* ---- Functions ---------------------------------------------------------- */

void             pi_init(void);
_kernel_oserror *reg_plugins(_kernel_swi_regs *r,void *pw);
void             pi_die(void);
_kernel_oserror *pi_add(void *pw, plugin_code *pre_dct, plugin_code *post_dct, plugin_info *info);
_kernel_oserror *pi_remove(void *pw, plugin_code *pre_dct, plugin_code *post_dct);
Plugin          *pi_enum(Plugin *cx);
void             pi_list(void);
int              pi_pre_dct(fpl *out0,fpl *out1,fpl *samples);
int              pi_post_dct(fpl *out0,fpl *out1,fpl *samples);

#endif
