#ifndef DEFS_H
#define DEFS_H

/* General definitions */
#define FALSE 0
#define TRUE  (~FALSE)

/* Some basic types. Defined instead of typedef'd to avoid a lot of dependencies */
#define byte  unsigned char
#define word  unsigned int
#define fpl   int
#define fptab short

/* Module things */

#define SWIBASE		0x00052e00
#define ERRBASE		0x00816b00

/* do_layer1 can produce 128 * SCALE_BLOCK * sizeof(int) */
#define MAX_OUTPUT_BYTES_PER_FRAME (128*12*4)

/* AUDIOBUFSIZE must currently be a multiple of MAX_OUTPUT_BYTES_PER_FRAME,
 * so do_layer() never runs out of space
 */
#define AUDIOBUFSIZE (MAX_OUTPUT_BYTES_PER_FRAME*16)

/* INPUT_BUFFER is used for reading the mpeg stream. The optimal size again
 * depends on the FS speed.
 */
#define INPUT_BUFFER 32768

/* This is set so real-world mpeg files don't clip. The theoretical 0 dB level
 * is 127, and the official test files generate exactly 0 dB with that. But it
 * seems many encoders out there produce files that will clip at that level.
 */
#define NOMINALVOL 113

/* Fixed point positions -------------------------------------------------------
 */

/* hybridIn[][][] is -1..1, but up to 5 values are added in dct##().
 * So we put the point between bit 27 and 28
 */
#define in_SH 3

/* This is the hybridOut point position, used for scaling the output
 */
#define out_SH 7

/* This shift ends up being applied to all hybridOut values.
 * Consequently, we can subtract in_SH from this, to get
 * hybridIn up to scale at the same time.
 */
#define win_SH (out_SH-in_SH)

/* This affects the scaling of the volume table. It also affects
 * smp_SH below
 */
#define decwin_SH 17

/* This is for dct64
 */
#define pnts_SH 4

/* This is a _right_ shift, to convert the fpl sum of samples into
 * ints (or rather signed shorts) between -32768 and 32767
 * Note that if this changes, CLEAN_CLIP will be faulted until the
 * code is changed (hardcoded for smp_SH=8)
 */
#define smp_SH (32-decwin_SH-out_SH)

/* ispow goes to 18 bits (165517), so we limit between 2^-13 to 2^18.
 */
#define ispow_SH 18

/* These two fit exactly with +/- 1 when using these point positions
 */
#define cos12_SH 1
#define cos36_SH 3

/* gainpow2 really has a large dynamic range, 2^-83 to 2^11.5
 * So we ignore the top and limit at 2^-23 to 2^9, as this
 * gives the best LF response.
 * Remember we need gain_SH+in_SH+ispow_SH <= 30
 * In fact, hybridIn is made up of multiples of gainpow2 values, so
 * we include the in_SH correction here.
 */
#define gain_SH (9-in_SH)

/* powX_Y is between 0 and sqr(2) so that's fine.
 * tanX_Y otoh becomes very large, but that doesn't seem too crucial
 */
#define pow_SH 1

/* -----------------------------------------------------------------------------
 */

#endif
