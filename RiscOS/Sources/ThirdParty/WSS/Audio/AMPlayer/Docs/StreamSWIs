Additional SWIs for Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*** THIS SPECIFICATION IS SUBJECT TO CHANGE ***

&52E08	StreamOpen

	On Entry:
		r0 = flags
			Bit 0 set => Queue
			Bit 1 set => Hold (Start Paused)
			All other bits reserved - set to zero for safety.
		r1 = NULL terminated stream name (for information only).

	On Exit:
		r0 = Stream handle or 0 for failure.

	Usage:
		Called by a streaming application to get a Stream Handle.
		Most streamers will start the stream paused and feed data in
		until the buffer full flag (see StreamInfo) is set.

	Notes:
		The combination of Queue and Start Paused may not work.

&52E09	StreamClose

	On Entry:
		r0 = Stream handle.
	
	On Exit:
		All registers preserved.
	
	Usage:
		Called when no more data will be supplied to the stream. This
		does NOT release outstanding buffers that have been passed to
		AMPlayer. If you need to get these back, call StreamClose,
		then AMStop.

&52E0A	StreamGiveData

	On Entry:
		r0 = Stream Handle
		r1 = Pointer to data block of the following format:
		
			Offset	Description
			0	Usage word
			4	Meta data list (or NULL)
			8	Length of following data (in bytes)
			12	Data

	On Exit:
		All registers preserved.
		
	Usage:
		Called by a streamer application to pass a block of data to
		AMPlayer. All but the first word may be considered read-only
		and must be in interrupt sharable space (i.e. in a dynamic
		area, module area, sprite pool etc, NOT in the application).
		By calling this SWI, the application must guarantee that it
		will keep the buffer around (and unchanged) at least until
		AMPlayer sets the usage word to zero.

		The streamer application should monitor the first word of
		the buffers it has previously passed in to see when it gets
		set to 0 to allow reuse. Buffers will be released strictly
		in the same order they were passed in.
		
		The metadata list blocks must be kept intact for the same
		length of time as the data blocks, and can be considered
		'released' by AMPlayer when their corresponding data blocks
		are.
		
		The metadata blocks are in the following format:
		
			Offset	Description
			0	Pointer to next metadata block (or NULL).
			4	Pointer to a null terminated 'Key' field.
			8	Pointer to a value field (often a NULL
				terminated string, but may be binary data).
			12	Length of value buffer in bytes.

		It is envisaged that there will be a SWI added later to allow
		metadata to be supplied for non-streaming sources.
		
&52E0B	StreamInfo

	On Entry:
		r0 = Stream handle

	On Exit:
		r0 = flags word
			Bit 0 set => Stream is active (i.e. playing or paused,
					not queued)
			Bit 1 set => Output buffer has been full
			Bit 2 set => Stream is paused

	Usage:
		Called by a streamer application to monitor the state of its
		connection. Typically a streamer will start a stream up paused
		and feed it data. The streamer application will then wait until
		the stream becomes active, and until either the output buffer
		becomes full, or until it runs out of buffering itself.
		
		Then it can unpause the stream knowing that the maximum amount
		of buffering is in use.
		
&52E0C	MetaDataPollChange

	On Entry:
		No registers used.
	
	On Exit:
		r0 = opaque unique value, guaranteed to change to a new unique
		value when any metadata items change.

&52E0D	MetaDataLookup

	On Entry:
		r0 = pointer to null terminated key field to match.
		r1 = pointer to buffer for result (or NULL to read length)
		r2 = length of buffer (or 0 to read required length)

	On Exit:
		r0 preserved
		r1 buffer filled in (up to maximum length - may not be null
			terminated if too short).
		r2 = length of buffer required (including terminator).
