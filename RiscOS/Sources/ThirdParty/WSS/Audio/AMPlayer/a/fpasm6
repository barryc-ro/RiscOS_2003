;
; Fixed point code for everything else
; (C) 1999 Thomas Olsson

#include "h.defs"

#include "a.asmhdr"

	MACRO
	FPMUL $dst,$a,$b,$pp,$tmp1,$tmp2,$tmp3,$tmp4
	
	; $a = Aa
	; $b = Bb
 [ 0 = 1
 	; Following code only works on unsigned ones. Rats.
	MOV	$tmp1,$a,LSR#16		; $tmp1 = A
	MOV	$tmp2,$b,LSR#16		; $tmp2 = B
	BIC	$a,$a,$tmp1,LSL#16	; $a    = a
	BIC	$b,$b,$tmp2,LSL#16	; $b    = b
	MUL	$tmp3,$a,$b		; $tmp2 = a * b
	MUL	$a,$tmp2,$a		; $a    = a * B
	MUL	$tmp2,$tmp1,$tmp2	; $b    = B * A
	MUL	$tmp1,$b,$tmp1		; $tmp1 = A * b
	; Now lets imagine that $tmp3 is the bottom 32 bits of the result, and
	; $b is the top 32 bits. Now we just need to add in the 2 middle terms.
	ADDS	$tmp3,$tmp3,$a,LSL#16
	ADC	$b,$b,$a,LSR#16
	ADDS	$tmp3,$tmp3,$tmp1,LSL#16
	ADC	$b,$b,$tmp1,LSR#16
	; Now shift as required.
	MOV	$tmp3,$tmp3,LSL #($pp)+1
	ORR	$dst,$tmp3,$b, LSR #31-($pp)
 |
	EOR $tmp4,$a,$b
	CMP $a,#0
	RSBMI $a,$a,#0
	CMP $b,#0
	RSBMI $b,$b,#0
	MOV $tmp3,$a,LSR#16
	MOV $tmp2,$b,LSR#16
	BIC $a,$a,$tmp3,LSL#16
	BIC $b,$b,$tmp2,LSL#16
	MUL $tmp1,$a,$b
	MUL $b,$tmp3,$b
	MUL $a,$tmp2,$a
	MUL $tmp2,$tmp3,$tmp2
	ADDS $tmp3,$b,$a
	ADDCS $tmp2,$tmp2,#&10000
	ADDS $a,$tmp1,$tmp3,LSL#16
	ADC $b,$tmp2,$tmp3,LSR#16
	MOV $b,$b,LSL #($pp)+1
	ORR $dst,$b,$a,LSR #31-($pp)
	TST $tmp4,#1<<31
	RSBNE $dst,$dst,#0
 ]
	MEND

	AREA	|C$$code|, CODE, READONLY

        FUNC NeedARM7M
        MOV R0,#0
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
	FUNCEND

        ; binops ------------------------

	FUNC muls			; R0=a
					; R1=b
					; R0=a*b
	STMFD R13!,{R14}
	EOR R14,R0,R1
	CMP R0,#0
	RSBMI R0,R0,#0
	CMP R1,#0
	RSBMI R1,R1,#0
	MOV R12,R0,LSR#16
	MOV R3,R1,LSR#16
	BIC R0,R0,R12,LSL#16
	BIC R1,R1,R3,LSL#16
	MUL R2,R0,R1
	MUL R1,R12,R1
	MUL R0,R3,R0
	MUL R3,R12,R3
	ADDS R12,R1,R0
	ADDCS R3,R3,#&10000
	ADDS R0,R2,R12,LSL#16
	ADC R1,R3,R12,LSR#16
	MOV R0,R1,LSL#1
	TST R14,#1<<31
	RSBNE R0,R0,#0
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mlas			; R0=a
					; R1=b
					; R2=c
					; R0=a*b+c
	STMFD R13!,{R4,R14}
	EOR R14,R0,R1
	CMP R0,#0
	RSBMI R0,R0,#0
	CMP R1,#0
	RSBMI R1,R1,#0
	MOV R12,R0,LSR#16
	MOV R3,R1,LSR#16
	BIC R0,R0,R12,LSL#16
	BIC R1,R1,R3,LSL#16
	MUL R4,R0,R1
	MUL R1,R12,R1
	MUL R0,R3,R0
	MUL R3,R12,R3
	ADDS R12,R1,R0
	ADDCS R3,R3,#&10000
	ADDS R0,R4,R12,LSL#16
	ADC R1,R3,R12,LSR#16
	TST R14,#1<<31
	RSBNE R1,R1,#0
	ADD R0,R2,R1,LSL#1
 [ ATPCS32
	LDMFD R13!,{R4,PC}
 |
       	LDMFD R13!,{R4,PC}^
 ]
	FUNCEND

	FUNC mulss_pnts_SH		; R0=a
					; R1=b
					; R0=a*b<<pnts_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,pnts_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_ispow_gain_SH	; R0=a
					; R1=b
					; R0=a*b<<(ispow_SH+gain_SH)
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,ispow_SH+gain_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_pow_SH		; R0=a
					; R1=b
					; R0=a*b<<pow_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,pow_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_cos36_SH		; R0=a
					; R1=b
					; R0=a*b<<cos36_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,cos36_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_cos12_SH		; R0=a
					; R1=b
					; R0=a*b<<cos12_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,cos12_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	END
