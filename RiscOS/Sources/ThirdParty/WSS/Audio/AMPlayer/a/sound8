;
; Sound code & other stuff
; (C) 1999 Thomas Olsson

; -------------------------------------------------------------------------
; NOTE: This is the only one of the sound routines NOT to be ROM safe.
; AFAICT there is no way to pass in a parameter to the sound fill routines.
; This means that we either need to instantiate a new handler block/veneer
; each time, or live with the 8 bit soundcode not being ROMable. I have opted
; for the second approach.
; -------------------------------------------------------------------------

#include "h.defs"
#include "h.snd_defs"
#include "h.snd_asm"
#include "a.asmhdr"

	AREA	|C$$code|, CODE, READONLY

	;		 ********************************************
	;		 *					    *
	;		 *		   CAUTION!		    *
	;		 *					    *
	;		 * Most of this is executed in SVC mode, so *
	;		 *   PRESERVE R14 when using SWI or FPE!!   *
	;		 *					    *
	;		 *	You CAN NOT stack FP registers!	    *
	;		 *					    *
	;		 *					    *
	;		 ********************************************

; ------------------------------------ 8 bit Sound  ----------------------------------
#if SOUND8

	; Call Sound_Mode. If it gives 0 or an error, then no 16 bit sound
	; is available. So assume the existence of 8 bit sound.
	FUNC	Sound8_Available
	STMFD	r13!,{r4,r5,r14}
	MOV	r0,#0
	SWI	XSound_Mode
	MOVVS	R0,#0
 [ ATPCS32
	LDMFD	R13!,{r4,r5,PC}
 |
	LDMFD	R13!,{r4,r5,PC}^
 ]

	FUNC	Sound8_SetRate
	STMFD	R13!,{R4,R14}
   [ use_fp = 1
	FLTD	F0,R0
	LDFD	F1,s8_basefrq
	DVFD	F1,F1,F0
	FIXD	R2,F1			; R2=nearest period
   |
	; Fix from RJW dictated by JRF (early in the morning when he was half
	; asleep so he could be wrong).
	CMP	r0,#0
	MOVEQ	r0,#1

        LDR	R1,s8_basefrq
        DivRem	R2,R1,R0,R3
        MOV	R2,R2,LSR #8
   ]
	MOV	R0,#0
	MOV	R1,#0
	MOV	R3,#0
	MOV	R4,#0
	SWI	XSound_Configure		; change only period
 [ ATPCS32
	LDMFD	R13!,{R4,PC}
 |
	LDMFD	R13!,{R4,PC}^
 ]
	FUNCEND

   [ use_fp = 1
s8_basefrq DCFD 1E6
   |
s8_basefrq DCD  1000000<<8
   ]

	FUNC	Sound8_Init		; R0->pw
					; R1->svar struct
	STMFD	R13!,{R4,R10,R14}
	STR	R1,svarP
	MOV	R10,R1
	STR	R0,svar_pw
	MOV	R0,#2			; 2 channels
	MOV	R1,#0			; dont alter buffer size
	MOV	R2,#0			; dont set frequency yet
	MOV	R3,#0			; dont change handlers
	MOV	R4,#0
	SWI	XSound_Configure
 [ ATPCS32
	LDMVSFD R13!,{R4,R10,PC}
 |
	LDMVSFD R13!,{R4,R10,PC}^
 ]
	ADR	R14,svar_prevconfig0
	STMIA	R14,{R0-R4}
	LDR	R14,[R3,#8]
	STR	R14,svar_linlog
	MOV	R1,R1,LSR#1
	STR	R1,svar_vulen
	MOV	R0,#1
	MOV	R1,#-127
	SWI	XSound_Stereo		; Channel 1 is left
 [ ATPCS32
	LDMVSFD R13!,{R4,R10,PC}
 |
	LDMVSFD R13!,{R4,R10,PC}^
 ]
	STR	R1,svar_prevpan0
	MOV	R0,#2
	MOV	R1,#127
	SWI	XSound_Stereo		; Channel 2 is right
 [ ATPCS32
	LDMVSFD R13!,{R4,R10,PC}
 |
	LDMVSFD R13!,{R4,R10,PC}^
 ]
	STR	R1,svar_prevpan1
	ADR	R0,Sound8_Handler
	MOV	R1,#0
	SWI	XSound_InstallVoice
	TEQ	R1,#0
 [ ATPCS32
	LDMEQFD R13!,{R4,R10,PC}
 |
	LDMEQFD R13!,{R4,R10,PC}^
 ]
	STR	R1,svar_ourvoice
	MOV	R0,#1
	MOV	R3,R1
	SWI	XSound_AttachVoice
 [ ATPCS32
	LDMVSFD R13!,{R4,R10,PC}
 |
	LDMVSFD R13!,{R4,R10,PC}^
 ]
	STR	R1,svar_prevvoice0
	MOV	R0,#2
	MOV	R1,R3
	SWI	XSound_AttachVoice
 [ ATPCS32
	LDMVSFD R13!,{R4,R10,PC}
 |
	LDMVSFD R13!,{R4,R10,PC}^
 ]
	STR	R1,svar_prevvoice1
	MOV	R0,#1
	MOV	R1,#&17C
	MOV	R2,#&4000
	MOV	R3,#-1
	SWI	XSound_Control		; Make the only sound we know
	MOV	R0,#0
 [ ATPCS32
	LDMFD	R13!,{R4,R10,PC}
 |
	LDMFD	R13!,{R4,R10,PC}^
 ]
	FUNCEND

	FUNC	Sound8_Final
	STMFD	R13!,{R4,R10,R14}
	MOV	R10,R0
	MOV	R0,#2
	LDR	R1,svar_prevvoice1
	SWI	XSound_AttachVoice
	MOV	R0,#1
	LDR	R1,svar_prevvoice0
	SWI	XSound_AttachVoice
	LDR	R1,svar_ourvoice
	SWI	XSound_RemoveVoice
	MOV	R0,#2
	LDR	R1,svar_prevpan1
	SWI	XSound_Stereo
	MOV	R0,#1
	LDR	R1,svar_prevpan0
	SWI	XSound_Stereo
	ADR	R14,svar_prevconfig0
	LDMIA	R14,{R0-R4}
	SWI	XSound_Configure
	MOVVC	R0,#0
 [ ATPCS32
	LDMFD R13!,{R4,R10,PC}
 |
	LDMFD R13!,{R4,R10,PC}^
 ]

	FUNC Sound8_Handler
	B	S8_Fill
	B	S8_Fill
	B	S8_Fill
	B	S8_Fill
	LDMFD	R13!,{PC}		; Instantiate
	LDMFD	R13!,{PC}		; Free
	LDMFD	R13!,{PC}		; Initialise
	DCD	S8_Name-Sound8_Handler
S8_Name	=	"AMPlayer",0
	ALIGN	4

S8_Fill
	; R6	Negative if config changed
	; R7	Channel number
	; R8	Sample period
	; R9	->SCCB
	; R10	->End of buffer
	; R11	Buffer increment
	; R12	->Buffer
	; R13	->Return address
	TST	R12,#1			; Ignore any unaligned calls (channel 2)
	BNE	s8f_return		; This is not exactly a nice way, but the fastest
	MOV	R1,R12			; by far (without replacing the channel handler)
	MOV	R2,R10
	LDR	R10,svarP
	LDR	R9,svar_audiobuf	; R9->audiobuf
	LDR	R8,svar_playofs		; R8=playofs
	LDR	R11,svar_fillofs	; R11=fillofs
	LDR	R3,svar_audiobufsize	; R3=audiobufsize
	MOV	R6,#0
	MOV	R7,#0
	LDR	R12,svar_paused
	TEQ	R12,#0			; Paused?
	BNE	s8f_paused
	LDR	R10,svar_linlog
1
	 CMP	R8,R11
	 BEQ	s8f_outofdata
	 ADD	R4,R9,R8
	 LDMIA	R4,{R4,R5}		; get two samples
	 ADD	R8,R8,#8
	 CMP	R8,R3
	 SUBGE	R8,R8,R3
	 LDRGE	R12,svarP
	 LDRGE	R3,[R12,#:INDEX: svar_nextaudiobufsize]
	 STRGE	R3,[R12,#:INDEX: svar_audiobufsize]  ; update the buffer size
	 MOVS	R12,R4,ASR#16
	 ADDGT	R6,R6,R12
	 SUBLT	R6,R6,R12		; update vu_l
	 MOVS	R12,R4,LSL#16
	 ADDGT	R7,R7,R12,ASR#16
	 SUBLT	R7,R7,R12,ASR#16	; update vu_r
	 LDRB	R0,[R10,R4,LSR#19]	; R0=L1
	 LDRB	R12,[R10,R5,LSR#19]	; R12=L2
	 ORR	R0,R0,R12,LSL#16	; R0=00L200L1
	 MOV	R4,R4,LSL#16
	 MOV	R5,R5,LSL#16
	 LDRB	R12,[R10,R4,LSR#19]	; R12=R1
	 ORR	R0,R0,R12,LSL#8		; R0=00L2R1L1
	 LDRB	R12,[R10,R5,LSR#19]	; R12=R2
	 ORR	R0,R0,R12,LSL#24	; R0=R2L2R1L1
	 STR	R0,[R1],#4
	 CMP	R1,R2
	BLT	%b1
s8f_done
	LDR	R10,svarP
	LDR	R12,svar_vu_l
	CMP	R6,R12
	STRGT	R6,svar_vu_l
	LDR	R12,svar_vu_r
	CMP	R7,R12
	STRGT	R7,svar_vu_r
	STR	R8,svar_playofs		; update playofs
	LDR	R12,svar_busy
	TEQ	R12,#0
	BNE	s8f_return		; already making a frame
	SUBS	R12,R8,R11
	ADDLE	R12,R12,R3		; R12=free space (1..full)
	CMP	R12,#MAX_OUTPUT_BYTES_PER_FRAME
	BLE	s8f_return		; no room for another frame
s8f_call
	STR	PC,svar_busy		; about to call, so set as busy
	LDR	R1,svar_pw		; R1->pw
	LDR	R0,stateP
 [ ATPCS32
	MRS	r9,cpsr
	ORR	r8,r9,#&00000083	; SVC with IRQ masked
	MSR	cpsr_all,r8
 |
	MOV	R9,PC
	ORR	R8,R9,#&08000003
	TEQP 	R8,#0			; change to SVC with IRQ off
	NOP
 ]
	STMFD	R13!,{R14}
	SWI	XOS_AddCallBack
	LDMFD	R13!,{R14}
 [ ATPCS32
	MSR	cpsr_all,r9
 |
	TEQP	R9,#0			; back to IRQ
	NOP
 ]
s8f_return
	MOV	R0,#8			; active
	LDMFD	R13!,{PC}
s8f_outofdata
	MOV	R4,#0
1
	 STR	R4,[R1],#4
	 CMP	R1,R2
	BLT	%b1
	B	s8f_done
s8f_paused
	MOV	R4,#0
	MOV	R5,#0
1
	 STMIA	R1!,{R4,R5}
	 CMP	R1,R2
	BLT	%b1
	LDR	R10,svarP
	STR	R6,svar_vu_l
	STR	R7,svar_vu_r
	LDR	R12,svar_busy
	TEQ	R12,#0
	BEQ	s8f_call
	MOV	R0,#8			; active
	LDMFD	R13!,{PC}
	FUNCEND

	IMPORT call_do_state

svarP	DCD	0
stateP	DCD	call_do_state

#endif

	END
