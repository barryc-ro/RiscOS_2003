;
; Sound code & other stuff
; (C) 1999 Thomas Olsson

#include "h.defs"
#include "h.snd_defs"
#include "h.snd_asm"
#include "a.asmhdr"

	AREA	|C$$code|, CODE, READONLY

	;		 ********************************************
	;		 *					    *
	;		 *		   CAUTION!		    *
	;		 *					    *
	;		 * Most of this is executed in SVC mode, so *
	;		 *   PRESERVE R14 when using SWI or FPE!!   *
	;		 *					    *
	;		 *	You CAN NOT stack FP registers!	    *
	;		 *					    *
	;		 *					    *
	;		 ********************************************
; ------------------------------------ 16 bit Sound  ----------------------------------
#if SOUND16

	FUNC	Sound16_SetRate
	STMFD	R13!,{R14}
	MOV	R3,R0,LSL#10		; R3=Frequency in 1/1024 Hz
	MOV	R0,#0
	SWI	XSound_SampleRate		; R1=NSR
	SUB	R1,R1,#1
S16SRloop
	 MOV	R0,#2
	 SWI	XSound_SampleRate		; R2=Rate(R1)
	 CMP	R2,R3
	 BLT	S16SRfound			; When a lower one is found, use next
	 SUBS	R1,R1,#1
	BGE	S16SRloop
S16SRfound
	ADD	R1,R1,#1
	MOV	R0,#3
	SWI	XSound_SampleRate		; Select rate
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
	FUNCEND

	FUNC	Sound16_Init		; R0->pw
					; R1->static svar struct
	STMFD	R13!,{R10,R14}
	MOV	R12,R0
	MOV	r10,r1
	STR	R12,svar_pw
	MOV	R2,R1
	MOV	R0,#1
	ADR	R1,Sound16_Handler
	SWI	XSound_LinearHandler
 [ ATPCS32
	LDMVSFD	R13!,{R10,PC}
 |
	LDMVSFD	R13!,{R10,PC}^
 ]
	STR	R1,svar_prevconfig0
	STR	R2,svar_prevconfig1
	MOV	R0,#0
 [ ATPCS32
	LDMFD	R13!,{R10,PC}
 |
	LDMFD	R13!,{R10,PC}^
 ]
	FUNCEND

	FUNC	Sound16_Final
	STMFD	R13!,{R10,R14}
	MOV	R10,R0
	MOV	R0,#1
	LDR	R1,svar_prevconfig0
	LDR	R2,svar_prevconfig1
	SWI	XSound_LinearHandler
	MOVVC	R0,#0
 [ ATPCS32
	LDMFD	R13!,{R10,PC}
 |
	LDMFD	R13!,{R10,PC}^
 ]
	FUNCEND

	FUNC	Sound16_Handler
	STMFD	R13!,{R11,R12,R14}
	SUB	R14,R2,R1
	MOV	R14,R14,LSR#3
	MOV	R10,R0
	LDR	R12,svar_pw
	STR	R14,svar_vulen
	LDR	R9,svar_audiobuf
	LDR	R8,svar_playofs
	LDR	R11,svar_fillofs
	LDR	R3,svar_audiobufsize
	MOV	R6,#0
	LDR	R14,svar_paused
	MOV	R7,#0
	TEQ	R14,#0			; Paused?
	BNE	fill_paused
	LDR	r14,svar_vuused
	; Changes from RJW
	ADD	r8,r8,r9
	ADD	r11,r11,r9
	ADD	r3,r3,r9
	CMP	r14,#0
	BEQ	choose_case_NV

	; RJW: We are working with 3 measures here.
	; r11 holds the current fill offset
	; r2 holds the end of the output buffer
	; r3 holds the end of the input audio buffer (inbuf)
choose_case
	SUB	r14,r2,r1		; r14= Number of bytes left to be filled
	SUBS	r5,r3,r8		; r5 = Number of bytes in inbuf
	BEQ	end_inbuf
	CMP	r14,r5
	BGT	inbuf_empties_first
	SUBS	r5,r11,r8		; r5 = Number of bytes before 'fill point'
	BEQ	fill_outofdata		; If 0, out of data. If -ve, ignore the next test.
	CMPGT	r14,r5			; If we will reach the fill point before the buffer
	BGT	out_of_data_first	; is full then use the out_of_data_first routine.
outbuf_fills_first
2
	 LDMIA	r8!,{R4,R5}
	 MOVS	R14,R4,ASR#16		; R14 = L
	 STMIA	R1!,{R4,R5}
	 ADDGT	R6,R6,R14
	 SUBLT	R6,R6,R14		; R6 += ABS(L)
	 MOVS	R14,R4,LSL#16		; R14 = R<<16
	 ADDGT	R7,R7,R14,ASR#16
	 SUBLT	R7,R7,R14,ASR#16	; R7 += ABS(R)
	 CMP	R1,R2
	BLT %b2

fill_done
	SUB	r8,r8,r9

	LDR	R14,svar_vu_l
	SUB	r11,r11,r9
	CMP	R6,R14
	LDR	R14,svar_vu_r
	STRGT	R6,svar_vu_l
	SUB	r3,r3,r9
	CMP	R7,R14
	LDR	R14,svar_busy
	STRGT	R7,svar_vu_r
	STR	R8,svar_playofs
	TEQ	R14,#0
	LDMNEFD R13!,{R11,R12,PC}	; already making a frame
	SUBS	R14,R8,R11
	ADDLE	R14,R14,R3		; R14=free space (1..full)
	CMP	R14,#MAX_OUTPUT_BYTES_PER_FRAME
	LDMLEFD R13!,{R11,R12,PC}	; no room for another frame
fill_call
	STR	PC,svar_busy		; about to call, so set as busy
	MOV	R1,R12			; R1->pw
	LDR	R0,stateP
 [ ATPCS32
	MRS	r9,cpsr
	ORR	r8,r9,#&00000083	; SVC with IRQ masked
	MSR	cpsr_all,r8
 |
	MOV	R9,PC
	ORR	R8,R9,#&08000003
	TEQP	R8,#0			; change to SVC with IRQ off
	NOP
 ]
	STMFD	R13!,{R14}
	SWI	XOS_AddCallBack
	LDMFD	R13!,{R14}
 [ ATPCS32
	MSR	cpsr_all,r9
 |
	TEQP	R9,#0			; back to IRQ
	NOP
 ]
	LDMFD	R13!,{R11,R12,PC}
inbuf_empties_first
	; r5 = Number of bytes left in inbuf
	SUBS	r14,r11,r8		; r14 = Number of bytes before we reach the fill point
	BEQ	fill_outofdata		; If none, out of data. If -ve, ignore the next test
	CMPGT	r5,r14			; If we will reach the fill point before the buffer
	BGT	out_of_data_first	; is full then use the out_of_data_first routine.
3
	 LDMIA	r8!,{R4,R5}
	 MOVS	R14,R4,ASR#16		; R14=L
	 ADDGT	R6,R6,R14
	 SUBLT	R6,R6,R14		; R6+=ABS(L)
	 MOVS	R14,R4,LSL#16		; R14=R<<16
	 ADDGT	R7,R7,R14,ASR#16
	 SUBLT	R7,R7,R14,ASR#16		; R7+=ABS(R)
	 STMIA	R1!,{R4,R5}
	 CMP	R8,R3
	 BLT	%b3
end_inbuf
	SUB	R8,R8,R3
	LDR	R3,svar_nextaudiobufsize
	ADD	r8,r8,r9
	STR	R3,svar_audiobufsize     ; update the buffer size
	ADD	R3,R3,R9
	B choose_case

out_of_data_first
1
	 LDMIA	r8!,{R4,R5}
	 MOVS	R14,R4,ASR#16		; R14=L
	 STMIA	R1!,{R4,R5}
	 ADDGT	R6,R6,R14
	 SUBLT	R6,R6,R14		; R6+=ABS(L)
	 MOVS	R14,R4,LSL#16		; R14=R<<16
	 ADDGT	R7,R7,R14,ASR#16
	 SUBLT	R7,R7,R14,ASR#16		; R7+=ABS(R)
	 CMP	R8,R11
	 BNE	%b1
fill_outofdata
	MOV	R4,#0
	MOV	R5,#0
1
	 STMIA	R1!,{R4,R5}
	 CMP	R1,R2
	BLT	%b1
	B	fill_done
fill_paused
	MOV	R4,#0
	MOV	R5,#0
1
	 STMIA	R1!,{R4,R5}
	 CMP	R1,R2
	BLT	%b1
	STR	R6,svar_vu_l
	STR	R7,svar_vu_r
	LDR	R14,svar_busy
	TEQ	R14,#0
	LDMNEFD R13!,{R11,R12,PC}	; busy
	B	fill_call
; RJW
	; RJW: We are working with 3 measures here.
	; r11 holds the current fill offset
	; r2 holds the end of the output buffer
	; r3 holds the end of the input audio buffer (inbuf)
choose_case_NV
	SUB	r14,r2,r1		; r14= Number of bytes left to be filled
	SUBS	r5,r3,r8		; r5 = Number of bytes in inbuf
	BEQ	end_inbuf_NV
	CMP	r14,r5
	BGT	inbuf_empties_first_NV
	SUBS	r5,r11,r8		; r5 = Number of bytes before 'fill point'
	BEQ	fill_outofdata		; If 0, out of data. If -ve, ignore the next test.
	CMPGT	r14,r5			; If we will reach the fill point before the buffer
	BGT	out_of_data_first_NV	; is full then use the out_of_data_first routine.
outbuf_fills_first_NV
5
	 LDMIA	r8!,{R4,R5}
	 CMP	R1,R2
	 STMIA	R1!,{R4,R5}
	BLT	%b5

	B	fill_done
inbuf_empties_first_NV
	; r5 = Number of bytes left in inbuf
	SUBS	r14,r11,r8		; r14 = Number of bytes before we reach the fill point
	BEQ	fill_outofdata		; If none, out of data. If -ve, ignore the next test
	CMPGT	r5,r14			; If we will reach the fill point before the buffer
	BGT	out_of_data_first_NV	; is full then use the out_of_data_first routine.
4
	 LDMIA	r8!,{R4,R5}
	 CMP	R8,R3
	 STMIA	R1!,{R4,R5}
	 BLT	%b4
end_inbuf_NV
	SUB	R8,R8,R3
	LDR	R3,svar_nextaudiobufsize
	ADD	r8,r8,r9
	STR	R3,svar_audiobufsize     ; update the buffer size
	ADD	R3,R3,R9
	B	choose_case_NV

out_of_data_first_NV
6
	 LDMIA	r8!,{R4,R5}
	 CMP	R8,R11
	 STMIA	R1!,{R4,R5}
	 BNE	%b6
	B	fill_outofdata
	FUNCEND
#endif

	IMPORT call_do_state

stateP	DCD	call_do_state

	END
