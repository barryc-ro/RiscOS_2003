;
; Sound code & other stuff
; (C) 1999 Thomas Olsson

#include "h.defs"
#include "h.snd_defs"
#include "h.snd_asm"
#include "a.asmhdr"

	AREA	|C$$code|, CODE, READONLY

	IMPORT call_do_state

	;		 ********************************************
	;		 *					    *
	;		 *		   CAUTION!		    *
	;		 *					    *
	;		 * Most of this is executed in SVC mode, so *
	;		 *   PRESERVE R14 when using SWI or FPE!!   *
	;		 *					    *
	;		 *	You CAN NOT stack FP registers!	    *
	;		 *					    *
	;		 *					    *
	;		 ********************************************

; ---------------------------------------- Shared Sound ---------------------------------------
#if SOUNDSHARED

	; r0 = void *pw
	; r1 = Svar *svar
	; r2 = char *name
	FUNC	SoundShared_Init
	STMFD	r13!,{R4,R10,r14}

	MOV	R3,r2
	MOV	R10,R1
	STR	R0,svar_pw
	ADR	R0,SoundShared_Handler
	MOV	R2,#0
	MOV	R4,#0

	SWI	XSharedSound_InstallHandler

 [ ATPCS32
	LDMVSFD	R13!,{R4,R10,PC}
 |
	LDMVSFD	R13!,{R4,R10,PC}^
 ]
	STR	R0,svar_handler

	MOV	R0,#0
 [ ATPCS32
	LDMFD	R13!,{R4,R10,PC}
 |
	LDMFD	R13!,{R4,R10,PC}^
 ]
	FUNCEND

	FUNC	SoundShared_SetRate
	STMFD	R13!,{R10,R14}
	MOV	R10,R1
	MOV	R1,R0,LSL#10			; R3=Frequency in 1/1024 Hz
	LDR	R0,svar_handler
	SWI	XSharedSound_SampleRate
 [ ATPCS32
	LDMFD	R13!,{R10,PC}
 |
	LDMFD	R13!,{R10,PC}^
 ]
	FUNCEND

	FUNC	SoundShared_Final
	STMFD	r13!,{R10,r14}

	MOV	R10,R0
	LDR	R0,svar_handler
	SWI	XSharedSound_RemoveHandler

 [ ATPCS32
	LDMFD	R13!,{R10,PC}
 |
	LDMFD	R13!,{R10,PC}^
 ]
	FUNCEND

	; On Entry:
	;  r0 = Pointer to SVAR
	;  r1 = Buffer to fill
	;  r2 = end of buffer to fill
	;  r3 = flags
	;	bit     0 = Mix
	;	bit     1 = Quality
	;	bits  3-7 = Overrun count (0 = None, 1-30 = 1-30, 31 = > 30)
	;	bit    29 = Reversed stereo
	;       bit    30 = Use volume in R7
	;       bit    31 = Mute if set
	;  R4 = Sample frequency
	;  R5 = Sample period
	;  R6 = fractional step as specified by SharedSound_SampleRate
	;  R7 = LR volume (if bit 30 of R2 is set).
	; On Exit:
	;  r3 may be updated
	;  r6-r7,r13 must be preserved
	;  everything else may be corrupted
	FUNC	SoundShared_Handler

	STMFD	R13!,{R6,R7,R14}

	; Now, if we change the buffer at all, we need to set bit 0 of R3 so that handlers
	; further down the chain will mix.
	ORR	R10,R3,#1
	STMFD	r13!,{R10}		; Make sure R3 is stored with the mix flag set
	MOV	R10,R0

	SUBS	R14,R2,R1
	BLE	sharedsound_quickexit
	MOV	R14,R14,LSR#2
	STR	R14,svar_vulen

	; SharedSound does NOT give us bit 30 - work it out for ourselves
	CMN	R7,#1
	ORRNE	R3,R3,#1<<30

	; SharedSound does NOT give us bit 31 - work it out for ourselves
	CMP	R7,#0
	ORREQ	R3,R3,#1<<31

	; Mask off the interesting bits.
	AND	R0,R3,#&E0000003

	; Check for paused or out of data.
	LDR	R8,svar_paused
	LDR	R11,svar_fillofs	; R11= Fill offset
	CMP	R8,#0
	LDR	R8,svar_playofs		; R8 = Play offset
	LDR	R3,svar_audiobufsize	; R3 = end of buffer
	BNE	ssh_paused
	CMP	R8,R11
	BEQ	ssh_paused

	MOV	r4,#0
	MOV	r5,#0

	LDR	PC,[PC,R0,ROR#27]
	MOV	PC,#0

	DCD	ssh_FL		; 0 = Normal,   Max Vol,   No Mute, Fill, LQ
	DCD	ssh_FL		; 1 = Reversed, Max Vol,   No Mute, Fill, LQ
	DCD	ssh_VFL		; 2 = Normal,   Vol Scale, No Mute, Fill, LQ
	DCD	ssh_VFL		; 3 = Reversed, Vol Scale, No Mute, Fill, LQ
	DCD	ssh_Fmute	; 4 = Normal,   Max Vol,   Mute,    Fill, LQ
	DCD	ssh_Fmute	; 5 = Reversed, Max Vol,   Mute,    Fill, LQ
	DCD	ssh_Fmute	; 6 = Normal,   Vol Scale, Mute,    Fill, LQ
	DCD	ssh_Fmute	; 7 = Reversed, Vol Scale, Mute,    Fill, LQ
	DCD	ssh_ML		; 8 = Normal,   Max Vol,   No Mute, Mix,  LQ
	DCD	ssh_ML		; 9 = Reversed, Max Vol,   No Mute, Mix,  LQ
	DCD	ssh_VML		; 10= Normal,   Vol Scale, No Mute, Mix,  LQ
	DCD	ssh_VML		; 11= Reversed, Vol Scale, No Mute, Mix,  LQ
	DCD	ssh_Mmute	; 12= Normal,   Max Vol,   Mute,    Mix,  LQ
	DCD	ssh_Mmute	; 13= Reversed, Max Vol,   Mute,    Mix,  LQ
	DCD	ssh_Mmute	; 14= Normal,   Vol Scale, Mute,    Mix,  LQ
	DCD	ssh_Mmute	; 15= Reversed, Vol Scale, Mute,    Mix,  LQ
	DCD	ssh_FL		; 16= Normal,   Max Vol,   No Mute, Fill, HQ
	DCD	ssh_FL		; 17= Reversed, Max Vol,   No Mute, Fill, HQ
	DCD	ssh_VFL		; 18= Normal,   Vol Scale, No Mute, Fill, HQ
	DCD	ssh_VFL		; 19= Reversed, Vol Scale, No Mute, Fill, HQ
	DCD	ssh_Fmute	; 20= Normal,   Max Vol,   Mute,    Fill, HQ
	DCD	ssh_Fmute	; 21= Reversed, Max Vol,   Mute,    Fill, HQ
	DCD	ssh_Fmute	; 22= Normal,   Vol Scale, Mute,    Fill, HQ
	DCD	ssh_Fmute	; 23= Reversed, Vol Scale, Mute,    Fill, HQ
	DCD	ssh_ML		; 24= Normal,   Max Vol,   No Mute, Mix,  HQ
	DCD	ssh_ML		; 25= Reversed, Max Vol,   No Mute, Mix,  HQ
	DCD	ssh_VML		; 26= Normal,   Vol Scale, No Mute, Mix,  HQ
	DCD	ssh_VML		; 27= Reversed, Vol Scale, No Mute, Mix,  HQ
	DCD	ssh_Mmute	; 28= Normal,   Max Vol,   Mute,    Mix,  HQ
	DCD	ssh_Mmute	; 29= Reversed, Max Vol,   Mute,    Mix,  HQ
	DCD	ssh_Mmute	; 30= Normal,   Vol Scale, Mute,    Mix,  HQ
	DCD	ssh_Mmute	; 31= Reversed, Vol Scale, Mute,    Mix,  HQ

; --------------------------------------------------------------------------------
; OK. Of the 32 cases above, half are muted, so resolve to just one case, leaving 16 others.
; We are going to ignore the reversed cases so that leaves just 8 cases.
; We are also going to ignore oversampling, hence 4 cases. But we are still WAY too lazy to
; write (or too sensible to try to maintain) 4 sets of code. So we do it by smoke, mirrors
; and macros. We have a magic FillCode macro that generates all the different cases we need,
; by invoking submacros for the actual filling/mixing/scaling etc.
;
; The next bit is the definition of this magic macro.
; During the following routine we tend to use:
; r1 = buffer pointer
; r2 = buffer end
; r3 = length of fill buffer (was flags)
; r4 = vu_l
; r5 = vu_r
; r6 = fractional step
; r7 = volume
; r8 = play offset
; r9 = audiobuffer
; r11= filloffset
; r12= accumulator
; r14= scratch

	MACRO
	FillCode	$name

ssh_$name
	; So we actually need to fill with data.
	LDR	R9,svar_audiobuf	; R9 = Pointer to start of data
	LDR	R12,svar_accum
	ADD	R8,R8,R9
	ADD	R3,R3,R9
	ADD	R11,R11,R9
ssh_choose_case_$name
	; How many stereo samples (4 bytes) will this fill routine use?
	; We are never going to be asked to fill more than 256K.
	SUBS	R2,R2,R1		; R2 = number of output bytes required.
	BLE	sharedsound_wb_$name	; We have already filled it!
	MOV	R2,R2,LSR#2		; R2 = number of words.
 [ LM
	MOV	R14,R12
	MOV	R0,#0
	SMLAL	R14,R0,R2,R6		; [R4,R0] = outputs*fractionalstep + accumulator
 |
	; For R6 = AAAAaaaa, R2 = 0000bbbb, find R6*R2+R12
	MOV	R0,R6,LSR#16		; R0 = AAAA
	BIC	R14,R6,R0,LSL#16	; R14= aaaa
	MLA	R14,R2,R14,R12		; R14= aaaa*bbbb+R12
	MUL	R0,R2,R0		; R0 = AAAA*bbbb
	ADDS	R14,R14,R0,LSL#16	; Add in to form lower word
	MOV	R0,R0,LSR#16		; Throw away bottom 16 bits of top word
	ADC	R0,R0,#0		; Allow for carry
 ]
	MOV	R14,R14,LSR#24		; Throw away fractions
	ORR	R14,R14,R0,LSL#8	; R14= Number of samples consumed.

	ADD	R2,R1,R2,LSL#2

	; How many input bytes do we have (in one hit)?
	SUBS	R0,R11,R8		; We have until playptr catches fillptr.
	SUBLTS	R0,R3,R8		; (if this is -ve then the buffer has wrapped).
	BEQ	ssh_out_of_data_$name	; (if this is 0, then bale!)

	; And here is another funny thing... The preceeding test MUST be where it is - move
	; it up a line and you get clicks (I suspect on wrapping the buffer). But the only
	; difference moving the test down makes is that we will fill with zeros when R3=R8
	; (empty buffer), but this should almost never happen in normal use. Confused.

	CMP	R14,R0,LSR#2		; If we need more than we have (i.e. we are are going
					; to run out of data before we hit the end of the
	BGE	ssh_data_limited_$name	; buffer then use a different routines).

	; So now we know we can just run to the end of the buffer.
	MakeSpace$name r3,r9,r11,r10
ssh_lp0_$name
	RealFillCode$name r3,r9,r11,r10

        CMP	R1,R2
        BLT	ssh_lp0_$name

	UnMakeSpace$name r3,r9,r11,r10
sharedsound_wb_$name
	SUB	R8,R8,R9
	SUB	R11,R11,R9
	SUB	R3,R3,R9
	STR	R4,svar_vu_l
	STR	R5,svar_vu_r
	STR	R8,svar_playofs
	STR	R12,svar_accum
	B	sharedsound_fill_call
ssh_data_limited_$name
	; 2 cases here. Either we will run out of buffer before we run out of data:
	;      r11 < r8  < r3
	; or we will run out of data first.
	;      r8  < r11 < r3
	; Deal with the run out of buffer case first (cos its more common)
	CMP	r11,r8
	BGT	ssh_data_limited_case_$name

	MakeSpace$name r2,r9,r11,r10

ssh_lp1_$name
	RealFillCode$name r2,r9,r11,r10

	SUBS	R0,R8,R3
	BLT	ssh_lp1_$name

	UnMakeSpace$name r2,r9,r11,r10

	; We have hit the end of the data buffer.
	LDR	R3,svar_nextaudiobufsize
        ADD	R8,R0,R9
        STR	R3,svar_audiobufsize
        ADD	R3,R3,R9
        B	ssh_choose_case_$name
ssh_data_limited_case_$name
	; Now we are always going to run out of data before we hit the end of the buffer
	MakeSpace$name r2,r3,r9,r10
ssh_lp2_$name
	RealFillCode$name r2,r3,r9,r10

        CMP	R8,R11			; Have we run out of data?
	BLT	ssh_lp2_$name

	UnMakeSpace$name r2,r3,r9,r10

ssh_out_of_data_$name
	; Now we have run out data. Do the rest with zeros.
	SUB	R11,R11,R9
	MOV	R8,R11		; Play = Fill
	SUB	R3,R3,R9
	; Store that we reached the end of data - make sure we dont overshoot!
	STR	R4,svar_vu_l
	STR	R5,svar_vu_r
	STR	R8,svar_playofs
	STR	R12,svar_accum
	B	ssh_zeros_$name

	MEND

;--------------------------------------------------------------------------------
; And here we define the submacros for each of the different fill routines.
; We have 3 Macros for each routine type. The first and most important is the
; RealFillCodeXX macro that actually does the filling. This can use R0 and R14
; as scratch, together with up to 4 other temporary registers (selected from R2,R3,R9,R10,R11).
; If it uses these temporary registers, then the other two macros MakeSpaceXX and
; UnMakeSpaceXX must save and reload the ones it uses.
;
; MakeSpaceXX can also setup and constants needed by the fillcode.
;
; FL = Fill, Low Quality.

	MACRO
	RealFillCodeFL	$t1,$t2,$t3,$t4

	ADD	r12,r12,r6		; accum += frac
	AND	r14,r12,#&FF000000	; r14 = integer inc
        LDR	R0,[R8],r14,LSR#22
	BIC	r12,r12,#&FF000000	; keep just the fractional bit
        STR	R0,[R1],#4
        MOVS	R14,R0,ASR#16
        ADDGT	R4,R4,R14
        SUBLT	R4,R4,R14
	MOVS	R14,R0,LSL#16
        ADDGT	R5,R5,R14,ASR#16
        SUBLT	R5,R5,R14,ASR#16

	MEND

	MACRO
	MakeSpaceFL	$t1, $t2, $t3, $t4
	MEND
	MACRO
	UnMakeSpaceFL	$t1, $t2, $t3, $t4
	MEND

; VFL = Volume Scale,Fill, Low Quality.

	MACRO
	RealFillCodeVFL	$t1,$t2,$t3,$t4

	ADD	r12,r12,r6		; accum += frac
	AND	r14,r12,#&FF000000	; r14 = integer inc
        LDR	R0,[R8],r14,LSR#22
	BIC	r12,r12,#&FF000000	; keep just the fractional bit
        MOVS	R14,R0,ASR#16
        ADDGT	R4,R4,R14
        SUBLT	R4,R4,R14
	MUL	R14,$t1,R14		; R14= LLLLxxxx = Scaled L volume
	MOV	R0,R0,LSL#16
	MOVS	R0,R0,ASR#16
	MUL	$t3,R0,$t2		; T3 = RRRRxxxx = Scaled R volume
        ADDGT	R5,R5,R0
        SUBLT	R5,R5,R0
	MOV	R14,R14,LSR#16
	MOV	$t3,$t3,LSR#16
	ORR	R0,$t3,R14,LSL#16
        STR	R0,[R1],#4

	MEND

	MACRO
	MakeSpaceVFL	$t1, $t2, $t3,$t4

	STMFD	r13!,{$t1,$t2,$t3}

	MOV	$t1,R7,LSR#16
	BIC	$t2,r7,$t1,LSL#16

	MEND
	MACRO
	UnMakeSpaceVFL	$t1, $t2, $t3, $t4

	LDMFD	r13!,{$t1,$t2,$t3}

	MEND

; ML = Mix, Low Quality

	MACRO
	RealFillCodeML	$t1,$t2,$t3,$t4

	ADD	R12,R12,R6		; accum += frac
	AND	R14,R12,#&FF000000	; r14= integer inc
        LDR	R0,[R8],r14,LSR#22	; R0 = AAAABBBB = Our samples
	BIC	R12,R12,#&FF000000	; keep just the fractional bit
        MOVS	$t2,R0,ASR#16		; T2 = 0000AAAA
        ADDGT	R4,R4,$t2
        SUBLT	R4,R4,$t2
	MOVS	R0,R0,LSL#16		; R0 = BBBB0000
        ADDGT	R5,R5,R0,ASR#16
	LDR	R14,[R1]		; R14= CCCCDDDD = Current samples
        SUBLT	R5,R5,R0,ASR#16
	ADDS	$t2,R14,$t2,LSL#16	; T2 = eeeexxxx (where eeee = AAAA+CCCC)
	SBCVS	$t2,$t1,#0		; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
	ADDS	R0,R0,R14,LSL#16	; R0 = DDDD0000+BBBB000
	SBCVS	R0,$t1,#0		; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
	AND	$t2,$t2,$t1,ASR#15	; T2 = EEEE0000
	ORR	R0,$t2,R0,LSR#16	; R0 = EEEEFFFF
        STR	R0,[R1],#4

	MEND
	MACRO
	MakeSpaceML	$t1, $t2, $t3, $t4
	STMFD	r13!,{$t1,$t2}
	MOV	$t1,#1<<31
	MEND
	MACRO
	UnMakeSpaceML	$t1, $t2, $t3, $t4
	LDMFD	r13!,{$t1,$t2}
	MEND

; VML = Volume Scale, Mix, Low Quality

	MACRO
	RealFillCodeVML	$t1,$t2,$t3,$t4

	ADD	R12,R12,R6		; accum += frac
	AND	R14,R12,#&FF000000	; r14= integer inc
        LDR	R0,[R8],r14,LSR#22	; R0 = AAAABBBB = Our samples
	BIC	R12,R12,#&FF000000	; keep just the fractional bit
        MOVS	$t2,R0,ASR#16		; T2 = SSSSAAAA
        ADDGT	R4,R4,$t2
        SUBLT	R4,R4,$t2
	MUL	$t2,$t3,$t2
	MOVS	R0,R0,LSL#16		; R0 = BBBB0000
	MOVS	R0,R0,ASR#16		; R0 = SSSSBBBB
        ADDGT	R5,R5,R0
	LDR	R14,[R1]		; R14= CCCCDDDD = Current samples
        SUBLT	R5,R5,R0
        MUL	R0,$t3,R0
	ADDS	$t2,R14,$t2		; T2 = eeeexxxx (where eeee = AAAA+CCCC)
	SBCVS	$t2,$t1,#0		; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
	ADDS	R0,R0,R14,LSL#16	; R0 = DDDD0000+BBBB000
	SBCVS	R0,$t1,#0		; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
	AND	$t2,$t2,$t1,ASR#15	; T2 = EEEE0000
	ORR	R0,$t2,R0,LSR#16	; R0 = EEEEFFFF
        STR	R0,[R1],#4

	MEND
	MACRO
	MakeSpaceVML	$t1, $t2, $t3, $t4
	STMFD	r13!,{$t1,$t2,$t3,$t4}
	MOV	$t1,#1<<31
	MOV	$t3,r7,ASR#16
	BIC	$t4,r7,$t3,LSL#16
	MEND
	MACRO
	UnMakeSpaceVML	$t1, $t2, $t3, $t4
	LDMFD	r13!,{$t1,$t2,$t3,$t4}
	MEND

; Fmute = zero fill

	MACRO
	RealFillCodeFmute	$t1,$t2,$t3,$t4

	ADD	R12,R12,R6		; accum += frac
	AND	R14,R12,#&FF000000	; r14= integer inc
	ADD	R8,R8,r14,LSR#22
	STR	R0,[R1],#4
	BIC	R12,R12,#&FF000000	; keep just the fractional bit

	MEND
	MACRO
	MakeSpaceFmute	$t1, $t2, $t3, $t4
	MOV	R0,#0
	MEND
	MACRO
	UnMakeSpaceFmute $t1, $t2, $t3, $t4
	MEND

; Mmute = zero fill

	MACRO
	RealFillCodeMmute	$t1,$t2,$t3,$t4

	ADD	R12,R12,R6		; accum += frac
	AND	R14,R12,#&FF000000	; r14= integer inc
	ADD	R8,R8,r14,LSR#22
	ADD	R1,R1,#4
	BIC	R12,R12,#&FF000000	; keep just the fractional bit

	MEND
	MACRO
	MakeSpaceMmute	$t1, $t2, $t3, $t4
	MEND
	MACRO
	UnMakeSpaceMmute $t1, $t2, $t3, $t4
	MEND

;--------------------------------------------------------------------------------
; And finally we invoke the macro to generate code as required.

	FillCode	FL
	FillCode	ML
	FillCode	VFL
	FillCode	VML
	FillCode	Fmute
	FillCode	Mmute

;--------------------------------------------------------------------------------
; And now the mute/paused/out-of-data/run-home-to-mummy code.

ssh_paused
	TST	R0,#1			; If we are mixing then "just leave it, awright?"
	BNE	sharedsound_fill_call2
	MOV	R0,#0
	CMP	R1,R2
ssh_paused_lp
	STRLO	R0,[R1],#4
	CMP	R1,R2
	BLO	ssh_paused_lp
sharedsound_fill_call2
	LDR	R14,svar_busy
	TEQ	R14,#0
	LDMNEFD R13!,{R3,R6,R7,PC}	; already making a frame
	B	sharedsound_do_fill_call
ssh_zeros_Fmute
ssh_zeros_FL
ssh_zeros_VFL
	MOV	R0,#0
	CMP	R1,R2
ssh_zeros_lp
	STRLO	R0,[R1],#4
	CMP	R1,R2
	BLO	ssh_zeros_lp
ssh_zeros_Mmute
ssh_zeros_ML
ssh_zeros_VML
sharedsound_fill_call
	LDR	R14,svar_busy
	TEQ	R14,#0
	LDMNEFD R13!,{R3,R6,R7,PC}	; already making a frame
	SUBS	R14,R8,R11
	ADDLE	R14,R14,R3		; R14=free space (1..full)
	CMP	R14,#MAX_OUTPUT_BYTES_PER_FRAME
	LDMLEFD R13!,{R3,R6,R7,PC}	; no room for another frame
sharedsound_do_fill_call
	STR	PC,svar_busy		; about to call, so set as busy
	LDR	R1,svar_pw
	LDR	R0,=call_do_state
 [ ATPCS32
	MRS	r9,cpsr
	ORR	r8,r9,#&00000083	; SVC with IRQ masked
	MSR	cpsr_all,r8
 |
	MOV	R9,PC
	ORR	R8,R9,#&08000003
	TEQP	R8,#0			; change to SVC with IRQ off
	NOP
 ]
	STMFD	R13!,{R14}
	SWI	XOS_AddCallBack
	LDMFD	R13!,{R14}
 [ ATPCS32
	MSR	cpsr_all,r9
 |
	TEQP	R9,#0			; back to IRQ
	NOP
 ]
	LDMFD	R13!,{R3,R6,R7,PC}
sharedsound_quickexit
	LDR	R11,svar_fillofs	; R11= Fill offset
	LDR	R8,svar_playofs		; R8 = Play offset
	LDR	R3,svar_audiobufsize	; R3 = end of buffer
	B	sharedsound_fill_call

	FUNCEND

#endif

	END
