;
; Misc MC routines
; (C) 1999 Thomas Olsson

              GBLL    true
true          SETL    {TRUE}

		GBLL	ROMMABLE
ROMMABLE	SETL	{TRUE}

#include "h.defs"

;	GET C:h.SWINames
XOS_Args * &20000 + &00009
XOS_GBPB * &20000 + &0000C

#include "a.asmhdr"

	AREA	|C$$code|, CODE, READONLY

	FUNC getbits			; R0=number of bits (0..17)
					; return R0=chunk
 [ ROMMABLE
        TEQ	R0,#0
 [ ATPCS32
        MOVEQ	PC,R14
 |
        MOVEQS	PC,R14
 ]
	STMFD	R13!,{R14}
	LDR	R14,[R10,#-536]
	LDR	R3,bufptr_ref
	; Stall
	LDR	R3,[R14,R3]!	; bufptr
	; Stall
        LDRB	R1,[R3]
        LDRB	R12,[R3,#1]
        LDRB	R2,[R3,#2]
        ORR 	R1,R12,R1,LSL#8
        LDR	R12,[R14,#4]	; bitindex
        ORR	R1,R2,R1,LSL#8
        MOV	R1,R1,LSL R12
        MOV	R1,R1,LSL #8
        ADD	R12,R12,R0
        RSB	R0,R0,#32
        MOV	R0,R1,LSR R0
        ADD	R3,R3,R12,LSR#3
        AND	R12,R12,#7
	STMIA	R14,{R3,R12}
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
 |
        TEQ R0,#0
 [ ATPCS32
        MOVEQ PC,R14
 |
        MOVEQS PC,R14
 ]
        LDR R12,bufptr
        LDRB R1,[R12]
        LDRB R3,[R12,#1]
        LDRB R2,[R12,#2]
        ORR R1,R3,R1,LSL#8
        LDR R3,bitindex
        ORR R1,R2,R1,LSL#8
        MOV R1,R1,LSL R3
        MOV R1,R1,LSL #8
        ADD R3,R3,R0
        RSB R0,R0,#32
        MOV R0,R1,LSR R0
        ADD R12,R12,R3,LSR#3
        STR R12,bufptr
        AND R3,R3,#7
        STR R3,bitindex
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
 ]
	FUNCEND

	FUNC getbits16			; R0=number of bits (1..9)
					; return R0=chunk
 [ ROMMABLE
	STMFD	R13!,{R14}
	LDR	R14,[R10,#-536]
        LDR	R3,bufptr_ref
	; Stall
        LDR	R3,[R14,R3]!		; R3 = bufptr, R14 = &bufptr
        LDR	R12,[R14,#4]		; R12= bitindex
        LDRB	R1,[R3]
        LDRB	R2,[R3,#1]
        ORR	R1,R2,R1,LSL#8
        MOV	R1,R1,LSL R12
        MOV	R1,R1,LSL #16
        ADD	R12,R12,R0
        RSB	R0,R0,#32
        MOV	R0,R1,LSR R0
        ADD	R3,R3,R12,LSR#3
        AND	R12,R12,#7
        STMIA	R14,{R3,R12}
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
 |
        LDR R12,bufptr
        LDRB R1,[R12]
        LDRB R2,[R12,#1]
        LDR R3,bitindex
        ORR R1,R2,R1,LSL#8
        MOV R1,R1,LSL R3
        MOV R1,R1,LSL #16
        ADD R3,R3,R0
        RSB R0,R0,#32
        MOV R0,R1,LSR R0
        ADD R12,R12,R3,LSR#3
        STR R12,bufptr
        AND R3,R3,#7
        STR R3,bitindex
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
 ]
	FUNCEND

	FUNC	get1bit			; return R0=bit
 [ ROMMABLE
 	LDR	R2,[R10,#-536]
	LDR	R3,bufptr_ref
	LDR	R3,[R2,R3]!		; R12 = bufptr, R2 = &bufptr
	LDR	R12,[R2,#4]
	ADD	R12,R12,#1
	LDRB	R1,[R3],R12,LSR#3
	MOV	R1,R1,LSL R12
	AND	R12,R12,#7
        STMIA	R2,{R3,R12}
	ANDS	R0,R1,#&100
	MOVNE	R0,#1
 [ ATPCS32
        MOV	PC,R14
 |
        MOVS	PC,R14
 ]
 |
	LDR R12,bufptr
	LDR R3,bitindex
	ADD R3,R3,#1
	LDRB R1,[R12],R3,LSR#3
	MOV R1,R1,LSL R3
	STR R12,bufptr
	AND R3,R3,#7
        STR R3,bitindex
	ANDS R0,R1,#&100
	MOVNE R0,#1
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
 ]
	FUNCEND

 [ ROMMABLE
bufptr_ref
	DCD	bufptr
 |
bufptr   DCD 0
bitindex DCD 0
 ]

        FUNC gb_setbuf			; R0->buffer
 [ ROMMABLE
	LDR	R1,[R10,#-536]
	LDR	R2,bufptr_ref
	STR	R0,[R1,R2]!
	MOV	R12,#0
	STR	R12,[R1,#4]
 |
        STR R0,bufptr
        MOV R12,#0
        STR R12,bitindex
 ]
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]

        FUNC cputype
        STMFD	r13!,{r14}
        RFS R0
        LDMFD	r13!,{r14}
        TST R0,#&80000000	; Check for HW FP
        MOVNE R0,#2
 [ ATPCS32
        MOVNE PC,R14
 |
        MOVNES PC,R14
 ]
	MOV R0,#&10000
	MOV R1,R0
	SMULL R2,R0,R1,R0
					; R0=1      => SA110, ARM7M
					; R0=&10000 => ARM3   (and which others?)
					; R0=0      => ARM710 (and which others?)
	TEQ R0,#1
	MOVNE R0,#0
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]

        FUNC check_mode
        AND R1,R14,#3
        ADR R0,modes
        ADD R0,R0,R1,LSL#2
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
        FUNCEND

modes   DCB "USR",0,"FIQ",0,"IRQ",0,"SVC",0

        FUNC swap_word ; R0=aabbccdd
                       ; On exit:
                       ; R0=ddccbbaa
        MOV R2,#&FF
        ORR R2,R2,#&FF0000	; R2=00FF00FF
        AND R1,R2,R0,ROR#24     ; R1=00cc00aa
        AND R2,R2,R0		; R2=00bb00dd
        ORR R0,R1,R2,ROR#8	; R0=ddccbbaa
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
        FUNCEND

 [ ROMMABLE
	AREA	|C$$data|, DATA

bufptr
	DCD	0
bitindex
	DCD	0
 ]

	END
