;
; Sound code & other stuff
; (C) 1999 Thomas Olsson

#include "h.defs"
#include "h.snd_defs"
#include "h.snd_asm"
#include "a.asmhdr"

	AREA	|C$$code|, CODE, READONLY

	;		 ********************************************
	;		 *					    *
	;		 *		   CAUTION!		    *
	;		 *					    *
	;		 * Most of this is executed in SVC mode, so *
	;		 *   PRESERVE R14 when using SWI or FPE!!   *
	;		 *					    *
	;		 *	You CAN NOT stack FP registers!	    *
	;		 *					    *
	;		 *					    *
	;		 ********************************************

	; Return:
	;  2 for shared sound
	;  1 for 16 bit sound
	;  0 for 8 bit sound
#if SOUNDSHARED
sharedsound_name
	= "SharedSound",0
	ALIGN
#endif

	FUNC	Sound_Available
	STMFD	R13!,{R4,R5,R14}
#if SOUNDSHARED
	; Call a SharedSound SWI. If no error, use it.
	MOV	R0,#18
	ADR	R1,sharedsound_name
	SWI	XOS_Module
	MOVVC	R0,#2
 [ ATPCS32
	LDMVCFD	R13!,{R4,R5,PC}
 |
	LDMVCFD	R13!,{R4,R5,PC}^
 ]

#endif
#if SOUND8
	MOV	R0,#0		; Use Sound8 as default if enabled.
#else
	MVN	R0,#0		; Use -1 (i.e. no sound system) as default if enabled.
#endif
#if SOUND16
	SWI	XSound_Mode
	MOVVS	R0,#0
#endif
 [ ATPCS32
	LDMFD	R13!,{R4,R5,PC}
 |
	LDMFD	R13!,{R4,R5,PC}^
 ]
	FUNCEND


; -------------------------------------- Both 16 and 8 bit ------------------------------------

	FUNC get_vu	; R0->vu_l
			; R1->vu_r
			; return R0=0 if ok
	STMFD	R13!,{R4,R10,R14}
	LDR	R4,fpstore_ref
	LDR	R12,[R10,#-536]
	MOV	R10,R2
	ADD	R4,R4,R12
	LDR	R12,svar_vulen
	TEQ	R12,#0
 [ ATPCS32
	LDMEQFD R13!,{R4,R10,PC}
 |
	LDMEQFD R13!,{R4,R10,PC}^
 ]
	SFM	F0,3,[R4]
	LDR	R2,svar_vu_l
	LDR	R3,svar_vu_r
	FLTS	F0,R2
	FLTS	F1,R3
	FLTS	F2,R12
	DVFS	F0,F0,F2
	DVFS	F1,F1,F2
	FIXSZ	R2,F0
	FIXSZ	R3,F1
	ADR	R12,vutab
	LDRB	R2,[R12,R2,LSR#8]
	LDRB	R3,[R12,R3,LSR#8]
	STR	R2,[R0]
	STR	R3,[R1]
	MOV	R0,#0
	STR	R0,svar_vu_l
	STR	R0,svar_vu_r
	LFM	F0,3,[R4]
 [ ATPCS32
	LDMFD	R13!,{R4,R10,PC}
 |
	LDMFD	R13!,{R4,R10,PC}^
 ]
	FUNCEND

	FUNC	callback
	STMFD	R13!,{R14}
	SWI	XOS_AddCallBack
	MOVVC	R0,#0
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
	FUNCEND

	FUNC	removecallback
	STMFD	R13!,{R14}
	SWI	XOS_RemoveCallBack
	MOVVC	R0,#0
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
	FUNCEND

	FUNC	set_stack_size	; Stewart Brodie‘s method
				; R0=stack level (0 for default)
	STMFD	R13!,{R14}
	TEQ	R0,#0
	MOVEQ	R0,#64
	ADD	R0,R0,#26

 [ 0 = 1	
	STR	R0,stack_level
 |
	LDR	R1,stack_level_ref
	LDR	R12,[R10,#-536]
	STR	R0,[R12,R1]
 ]
	MOV	R0,#6
	MOV	R1,#0
	MOV	R2,#16
	SWI	XOS_ReadSysInfo
 [ ATPCS32
	LDMVSFD R13!,{PC}
 |
	LDMVSFD R13!,{PC}^
 ]
	MOV	R0,R13,LSR#20
	SUB	R2,R2,R0,LSL#20
	LDR	R0,stack_size_ref
	LDR	R12,[R10,#-536]
	STR	R2,[R12,R0]
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]

	FUNC	check_stack	; R0->routine
				; R1->pw
				; On exit:
				; R0=0 to go ahead and make FS calls
				; Otherwise R0=stack level (in words, for debugging printout)
 [ 0 = 1
	LDR	R2,stack_level
	LDR	R3,stack_size
 |
	LDR	R2,stack_level_ref
	LDR	R3,stack_size_ref
	LDR	R12,[R10,#-536]
	LDR	R2,[R12,R2]
	LDR	R3,[R12,R3]
 ]
	MOV	R12,R13,LSL#12
	SUB	R12,R3,R12,LSR#12	; R12=bytes on stack
	CMP	R12,R2,LSL#2
	MOVLS	R0,#0		; Go ahead if stack is shallow
 [ ATPCS32
	MOVLS	PC,R14
 |
	MOVLSS	PC,R14
 ]
	STMFD	R13!,{R14}
	LDR	R2,rereg_address_ref
	LDR	R3,[R10,#-536]
	STR	R0,[R2,R3]
	MOV	R0,#1
	MOV	R2,R1
	ADR	R1,rereg_callback
	SWI	XOS_CallAfter
	MOV	R0,R12,LSR#2
 [ ATPCS32
	LDMFD	R13!,{PC}
 |
	LDMFD	R13!,{PC}^
 ]
	FUNCEND

	FUNC	rereg_callback
	STMFD	R13!,{R0,R1,R14}
	LDR	R1,[R12]
	LDR	R0,rereg_address_ref
	LDR	R1,[R1,#8]
	LDR	R0,[R0,R1]
	MOV	R1,R12
	SWI	XOS_AddCallBack
 [ ATPCS32
	LDMFD	R13!,{R0,R1,PC}
 |
	LDMFD	R13!,{R0,R1,PC}^
 ]
	FUNCEND

stack_size_ref
	DCD	stack_size
stack_level_ref
	DCD	stack_level
rereg_address_ref
	DCD	rereg_address
fpstore_ref
	DCD	fpstore
vutab
;	GET s.vutab
	BIN	tab.vutab
	ALIGN	4

	AREA	|C$$data|,DATA

stack_size
	DCD 8192		; non-Ursula size
stack_level
	DCD 0			; words
rereg_address
	DCD 0
fpstore	
	% 12*3

	END
