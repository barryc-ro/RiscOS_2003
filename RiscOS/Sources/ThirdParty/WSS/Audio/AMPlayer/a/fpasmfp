;
; Fixed point code + Floating Point for machines with decent FPUs
; ie, were using fixed point, and promoting to floating point for
; the complex calculations
; (C) 1999 Thomas Olsson, Robin Watts

#include "h.defs"

#include "a.asmhdr"

	MACRO
	FPMUL $dst,$a,$b,$pp,$tmp1,$tmp2,$tmp3,$tmp4
	FLTS	F0,$a
	FLTS	F1,$b
	FMLS	F2,F0,F1
	LDFS	F4,div_const_$pp
	FMLS	F3,F2,F4
	FIX	$dst,F3
	MEND

	AREA	|C$$code|, CODE, READONLY

        FUNC NeedARM7M
        MOV R0,#2
 [ ATPCS32
        MOV PC,R14
 |
        MOVS PC,R14
 ]
	FUNCEND

        ; binops ------------------------

div_const_0
	;DCD	&4f000000
	DCD	&30000000
div_const_1
	;DCD	&4e800000
	DCD	&30800000
div_const_3
	;DCD	&4d800000
	DCD	&31800000
div_const_4
	;DCD	&4d000000
	DCD	&32000000
div_const_24
	;DCD	&43000000
	DCD	&3c000000

	FUNC muls			; R0=a
					; R1=b
					; R0=a*b<<1
	STMFD R13!,{R14}
	FLTS	F0,r0
	FLTS	F1,r1
	FMLS	F2,F0,F1
	LDFS	F4,div_const_0
	FMLS	F3,F2,F4
	FIX	r0,F3
 [ ATPCS32
	LDMFD R13!,{PC}
 |
	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mlas			; R0=a
					; R1=b
					; R2=c
					; R0=a*b<<1+c
	STMFD R13!,{R14}
	FLTS	F0,r0
	FLTS	F1,r1
	FMLS	F2,F0,F1
	LDFS	F4,div_const_0
	FMLS	F3,F2,F4
	FIX	r0,F3
	ADD	r0,r0,r2
 [ ATPCS32
	LDMFD R13!,{PC}
 |
	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_pnts_SH		; R0=a
					; R1=b
					; R0=a*b<<pnts_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,pnts_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_ispow_gain_SH	; R0=a
					; R1=b
					; R0=a*b<<(ispow_SH+gain_SH)
	STMFD R13!,{R14}
	;FPMUL R0,R0,R1,ispow_SH+gain_SH,R2,R3,R12,R14
	FPMUL R0,R0,R1,24,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_pow_SH		; R0=a
					; R1=b
					; R0=a*b<<pow_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,pow_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_cos36_SH		; R0=a
					; R1=b
					; R0=a*b<<cos36_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,cos36_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

	FUNC mulss_cos12_SH		; R0=a
					; R1=b
					; R0=a*b<<cos12_SH
	STMFD R13!,{R14}
	FPMUL R0,R0,R1,cos12_SH,R2,R3,R12,R14
 [ ATPCS32
	LDMFD R13!,{PC}
 |
       	LDMFD R13!,{PC}^
 ]
	FUNCEND

; And now the FP specific module hacks
; With thanks to hotpot.

	FUNC	fp_enable

	; r0 = fp_save

	STMFD	r13!,{R14}

	RFS	r1
	STR	r1,[r0],#4
	BIC	r1,r1,#0x00FF0000	; No exceptions
	WFS	r1

	SFM	F0,4,[r0]!
	SFM	F4,4,[r0]!
	
	LDMFD	r13!,{PC}

	FUNCEND

	FUNC	fp_disable

	; r0 = fp_save

	STMFD	r13!,{R14}

	LDR	r1,[r0],#4

	LFM	F0,4,[r0]!
	LFM	F4,4,[r0]!
	
	WFS	r1

	LDMFD	r13!,{PC}

	FUNCEND

	END
