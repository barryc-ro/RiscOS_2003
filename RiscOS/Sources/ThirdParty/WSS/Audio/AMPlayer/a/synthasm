	AREA	|C$$code|, CODE, READONLY

;
; Inner synth loops solely in Assembler, using the fixed point multiplies
; (C) 2000 Robin Watts

#include "h.defs"

#include "a.asmhdr"

	EXPORT	synth_inner
	EXPORT	synth_innerM

	FUNC synth_inner
	; r0 = int *window
	; r1 = int *bufp
	; r2 = samples
	; r3 = &synth_bo
	; r4 = sumR_lo
	; r5 = sumR_hi
	; r6 = sumL_lo
	; r7 = sumL_hi
	; r8 = scratch
	; r9 = scratch
	; r10= scratch
	; r11= j = outer loop counter
	; r12= i = inner loop counter
	; r14= 0xFFFFFFFF

	STMFD	r13!,{r4-r11,r14}

	MVN	r14,#0
	MOV	r11,#16
loop2
	LDR	r8,[r0],#4	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	LDR	r10,[r1,#543*4]	; r10  = *bufp[544]
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp[0]
	MOV	r12,#7
	SMULL	r6,r7,r8,r10	; sumL = *window * bufp[0]
loop
	LDR	r8,[r0],#4	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	RSB	r8,r8,#0
	LDR	r10,[r1,#543*4]	; r10  = *bufp[544]
	SMLAL	r4,r5,r8,r9	; sumR-= *window * bufp[0]
	LDR	r9,[r1],#4	; r9   = *bufp++
	SMLAL	r6,r7,r10,r8	; sumL-= *window * bufp[544]
	LDR	r8,[r0],#4	; r8   = *window
	LDR	r10,[r1,#543*4]	; r10  = *bufp[544]
	SMLAL	r4,r5,r8,r9	; sumR+= *window * bufp[0]
	SUBS	r12,r12,#1
	SMLAL	r6,r7,r8,r10	; sumL+= *window * bufp[544]
	BGT	loop

	LDR	r8,[r0],#4+16*4	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	RSB	r8,r8,#0
	LDR	r10,[r1,#543*4]	; r10  = *bufp[544]
	SMLAL	r4,r5,r8,r9	; sumR-= *window * bufp[0]
	SMLAL	r6,r7,r8,r10	; sumL-= *window * bufp[544]

	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	CMP	r7,#&00400000
	MOVGE	r7,r14,LSR#10
	CMP	r7,r14,LSL#22	; 0xFFC00000
	MOVLE	r7,#&00400000
	MOV	r7,r7,LSL#9	; r7 = L<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r7,LSR#16
	STR	r5,[r2],#4

	SUBS	r11,r11,#1
	BGT	loop2

	LDR	r8,[r0],#8	; r8   = *window
	LDR	r9,[r1],#8	; r9   = *(bufp += 2)
	LDR	r10,[r1,#542*4]	; r10  = *bufp[544]
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp[0]
	MOV	r12,#14
	SMULL	r6,r7,r8,r10	; sumL = *window * bufp[0]
loop3
	LDR	r8,[r0],#8	; r3   = *window
	LDR	r9,[r1],#8	; r3   = *bufp++
	LDR	r10,[r1,#542*4]	; r3   = *bufp[544]
	SMLAL	r4,r5,r8,r9	; sumR+= *window * bufp[0]
	SUBS	r12,r12,#2
	SMLAL	r6,r7,r8,r10	; sumL+= *window * bufp[0]
	BGT	loop3

	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	CMP	r7,#&00400000
	MOVGE	r7,r14,LSR#10
	CMP	r7,r14,LSL#22	; 0xFFC00000
	MOVLE	r7,#&00400000
	MOV	r7,r7,LSL#9	; r7 = L<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r7,LSR#16
	STR	r5,[r2],#4

	LDR	r3,[r3]
	SUB	r1,r1,#32*4
	ORR	r3,r3,#1
	MOV	r3,r3,LSL#1
	SUB	r3,r3,#48
	ADD	r0,r0,r3,LSL#2

	MOV	r11,#15
loop5
	LDR	r8,[r0,#-4]!	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	LDR	r10,[r1,#543*4]	; r3   = *bufp[544]
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp[0]
	MOV	r12,#15
	SMULL	r6,r7,r8,r10	; sumL = *window * bufp[544]
loop4
	LDR	r8,[r0,#-4]!	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	LDR	r10,[r1,#543*4]	; r10  = *bufp[544]
	SMLAL	r4,r5,r8,r9
	SUBS	r12,r12,#1
	SMLAL	r6,r7,r8,r10
	BGT	loop4

	RSB	r5,r5,#0
	RSB	r7,r7,#0
	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	CMP	r7,#&00400000
	MOVGE	r7,r14,LSR#10
	CMP	r7,r14,LSL#22	; 0xFFC00000
	MOVLE	r7,#&00400000
	MOV	r7,r7,LSL#9	; r7 = L<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r7,LSR#16
	STR	r5,[r2],#4

	SUB	r1,r1,#32*4
	SUB	r0,r0,#16*4
	SUBS	r11,r11,#1
	BGT	loop5

	LDMFD	r13!,{r4-r11,PC}

	FUNC synth_innerM
	; r0 = int *window
	; r1 = int *bufp
	; r2 = samples
	; r3 = &synth_bo
	; r4 = sumR_lo
	; r5 = sumR_hi
	; r8 = scratch
	; r9 = scratch
	; r10= scratch
	; r11= j = outer loop counter
	; r12= i = inner loop counter
	; r14= 0xFFFFFFFF

	STMFD	r13!,{r4-r11,r14}

	MVN	r14,#0
	MOV	r11,#16
loop2M
	LDR	r8,[r0],#4	; r8   = *window++
	LDR	r9,[r1],#4	; r9   = *bufp++
	MOV	r12,#7
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp
loopM
	LDR	r8,[r0],#4	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	RSB	r8,r8,#0
	SMLAL	r4,r5,r8,r9	; sumR-= *window * bufp[0]
	LDR	r9,[r1],#4	; r9   = *bufp++
	LDR	r8,[r0],#4	; r8   = *window
	SUBS	r12,r12,#1
	SMLAL	r4,r5,r8,r9	; sumR+= *window * bufp[0]
	BGT	loopM

	LDR	r8,[r0],#4+16*4	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	RSB	r8,r8,#0
	SMLAL	r4,r5,r8,r9	; sumR-= *window * bufp[0]

	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r5,LSR#16
	STR	r5,[r2],#4

	SUBS	r11,r11,#1
	BGT	loop2M

	LDR	r8,[r0],#8	; r8   = *window
	LDR	r9,[r1],#8	; r9   = *(bufp += 2)
	MOV	r12,#14
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp[0]
loop3M
	LDR	r8,[r0],#8	; r3   = *window
	LDR	r9,[r1],#8	; r3   = *bufp++
	SUBS	r12,r12,#2
	SMLAL	r4,r5,r8,r9	; sumR+= *window * bufp[0]
	BGT	loop3M

	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r5,LSR#16
	STR	r5,[r2],#4

	LDR	r3,[r3]
	SUB	r1,r1,#32*4
	ORR	r3,r3,#1
	MOV	r3,r3,LSL#1
	SUB	r3,r3,#48
	ADD	r0,r0,r3,LSL#2

	MOV	r11,#15
loop5M
	LDR	r8,[r0,#-4]!	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	MOV	r12,#15
	SMULL	r4,r5,r8,r9	; sumR = *window * bufp[0]
loop4M
	LDR	r8,[r0,#-4]!	; r8   = *window
	LDR	r9,[r1],#4	; r9   = *bufp++
	SUBS	r12,r12,#1
	SMLAL	r4,r5,r8,r9
	BGT	loop4M

	RSB	r5,r5,#0
	CMP	r5,#&00400000
	MOVGE	r5,r14,LSR#10
	CMP	r5,r14,LSL#22	; 0xFFC00000
	MOVLE	r5,#&00400000
	MOV	r5,r5,LSL#9	; r5 = R<<16
	BIC	r5,r5,r14,LSR#16
	ORR	r5,r5,r5,LSR#16
	STR	r5,[r2],#4

	SUB	r1,r1,#32*4
	SUB	r0,r0,#16*4
	SUBS	r11,r11,#1
	BGT	loop5M

	LDMFD	r13!,{r4-r11,PC}

	END
