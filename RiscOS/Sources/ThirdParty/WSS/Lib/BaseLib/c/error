/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 8/1/97: Initial version
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "error.h"
#include "memory.h"

static _kernel_oserror error = {0x10000, "Hello"};
static int fatal;

static void report_error(void)
{
    printf("Uncaught exception: %s\n", error.errmess);
    ((void (*)(void)) 0)(); /* Branch through 0 */
}

void Error(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    va_end(args);
    fatal = 0;
    if(ExceptXXXStack)
        LongJmp(ExceptXXXStack->label);
    else
        report_error();
}

void ErrorDirect(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    va_end(args);
    fatal = 0;
    report_error();
}

void ErrorFatal(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    va_end(args);
    fatal = 1;
    if(ExceptXXXStack)
        LongJmp(ExceptXXXStack->label);
    else
        report_error();
}

void ErrorErr(_kernel_oserror *err)
{
    if(err)
    {
        error = *err;
        fatal = 0;
        if(ExceptXXXStack)
            LongJmp(ExceptXXXStack->label);
        else
            report_error();
    }
}

void ErrorNum(int err, char *s)
{
    error.errnum = err;
    strcpy(error.errmess, s);
    fatal = 0;
    if(ExceptXXXStack)
        LongJmp(ExceptXXXStack->label);
    else
        report_error();
}

_kernel_oserror *ExceptCaught(void)
{
    return &error;
}

void ExceptRethrow(void)
{
    ErrorErr(ExceptCaught());
}


exception_stack_t ExceptXXXStack = NULL;

exception_stack_t ExceptGetStack(void)
{
    return ExceptXXXStack;
}

void ExceptSetStack(exception_stack_t s)
{
    ExceptXXXStack = s;
}

void ExceptXXXPush(void)
{
    exception_stack_t new_ex;

    new_ex = Malloc0(sizeof(*new_ex));
    if(new_ex)
    {
        new_ex->link = ExceptXXXStack;
        /* Survives being interupted here. */
        ExceptXXXStack = new_ex;
    }
}

int ExceptXXXPop(void)
{
    exception_stack_t old;
    int failed;

    failed = 0;
    old = ExceptXXXStack;
    if(old)
    {
        failed = old->failed;
        ExceptXXXStack = old->link;
        Free(old);
    }
    return failed;
}

void ExceptVarXXX(void *dummy) {
}
