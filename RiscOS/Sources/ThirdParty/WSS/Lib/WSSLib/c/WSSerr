/*
    (c) Copyright Warm Silence Software Ltd, 1996
    All rights reserved.

    PHBG 8/1/97: Initial version
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "WSSerr.h"
#include "WSSmem.h"

static _kernel_oserror error = {0x10000, "Hello"};
static int delay = 0;
static int error_pending = 0;
static int fatal;

static void report_error(void)
{
    printf("Uncaught exception: %s\n", error.errmess);
    ((void (*)(void)) 0)(); /* Branch through 0 */
}

static void do_report_error(void)
{
    if(ExceptXXXi >= 0)
        longjmp(ExceptXXXStack[ExceptXXXi].label, 1);
    else
        report_error();
}

void Error(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    // printf("%s\n", error.errmess);
    va_end(args);
    error_pending = 1;
    fatal = 0;
    if (!delay)
	do_report_error();
}

void ErrorDirect(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    va_end(args);
    fatal = 0;
    report_error();
}

void ErrorFatal(char *fmt, ...)
{
    va_list args;

    error.errnum = 0x10000;
    va_start(args, fmt);
    vsprintf(error.errmess, fmt, args);
    va_end(args);
    error_pending = 1;
    fatal = 1;
    if (!delay)
	do_report_error();
}

void ErrorErr(_kernel_oserror *err)
{
    if(err == NULL) return;
    error = *err;
    fatal = 0;
    if(ExceptXXXi >= 0)
        longjmp(ExceptXXXStack[ExceptXXXi].label, 1);
    else
        report_error();
}

void ErrorNum(int err, char *s)
{
    error.errnum = err;
    strcpy(error.errmess, s);
    fatal = 0;
    if(ExceptXXXi >= 0)
        longjmp(ExceptXXXStack[ExceptXXXi].label, 1);
    else
        report_error();
}

_kernel_oserror *ExceptCaught(void)
{
    return &error;
}

void ExceptRethrow(void)
{
    ErrorErr(ExceptCaught());
}

#define MAXDEPTH (20)

except_xxx_stack_t ExceptXXXStack[MAXDEPTH];
int ExceptXXXi = -1;

void ExceptXXXPush(void)
{
    if(ExceptXXXi+1 >= MAXDEPTH)
        Error("Exception stack overflow");
    ExceptXXXi++;
}

int ExceptXXXPop(void)
{
    return ExceptXXXStack[ExceptXXXi--].failed;
}

void ErrorDelay(int flag)
{
    delay = flag;
    if(!delay && error_pending)
    {
        do_report_error();
    }
}

void ExceptVarXXX(void *e) {
  /* Do nothing */
}
