/******************************************************/
/*                                                    */
/* Name: WSSplugin.c                                  */
/* Author: Robin Watts.                               */
/* Function:                                          */
/*   Provides a set of functions for building plugin/ */
/* helper apps with WSSlib. Relies on WSSwin.         */
/* This CANNOT be used in isolation.                  */
/*                                                    */
/******************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "kernel.h"

#include "WSSerr.h"
#include "swis.h"
#include "WSSwin.h"
#include "WSSwinH.h"
#include "WSSplugin.h"
#include "WSSmem.h"
#include "WSStask.h"

#define MESSAGE_PLUGIN_OPEN		(0x4D540)
#define MESSAGE_PLUGIN_OPENING		(0x4D541)
#define MESSAGE_PLUGIN_CLOSE		(0x4D542)
#define MESSAGE_PLUGIN_CLOSED		(0x4D543)
#define MESSAGE_PLUGIN_RESHAPE		(0x4D544)
#define MESSAGE_PLUGIN_RESHAPE_REQUEST	(0x4D545)
#define MESSAGE_PLUGIN_FOCUS		(0x4D546)
#define MESSAGE_PLUGIN_UNLOCK		(0x4D547)
#define MESSAGE_PLUGIN_STREAM_NEW	(0x4D548)
#define MESSAGE_PLUGIN_STREAM_DESTROY	(0x4D549)
#define MESSAGE_PLUGIN_STREAM_WRITE	(0x4D54A)
#define MESSAGE_PLUGIN_STREAM_WRITTEN	(0x4D54B)
#define MESSAGE_PLUGIN_STREAM_AS_FILE	(0x4D54C)
#define MESSAGE_PLUGIN_URL_ACCESS	(0x4D54D)
#define MESSAGE_PLUGIN_NOTIFY		(0x4D54E)
#define MESSAGE_PLUGIN_STATUS		(0x4D54F)
#define MESSAGE_PLUGIN_BUSY		(0x4D550)
#define MESSAGE_PLUGIN_ACTION		(0x4D551)
#define MESSAGE_PLUGIN_ABORT		(0x4D552)

typedef struct plugin_params_s {
  int   type;
  char *tag;
  char *value;
  char *mime;
} plugin_params_s;

typedef struct plugin_list_s {
  int                   filetype;
  int                   helper;
  plugin_t              fns;
  struct plugin_list_s *next;
} plugin_list_s;

typedef plugin_list_s *plugin_list_t;

typedef struct plugin_instance_s {
  win_window                window;
  plugin_list_t             type;
  int                       browser;
  int		            task;
  int                       helper;
  struct plugin_instance_s *next;
} plugin_instance_s;

typedef plugin_instance_s *plugin_instance_t;

typedef struct plugin_fetch_s {
  void                  *tag;
  char                  *url;
  plugin_fetch_state     state;
  plugin_instance_t      instance;
  int                    wimp_ref;
  char                  *filename;
  int                    stream_active;
  int                    abandoned;
  struct plugin_fetch_s *next;
} plugin_fetch_s;

static plugin_list_t     plugin_list = NULL;
static plugin_instance_t instances = NULL;
static plugin_fetch_t    fetches = NULL;
static _kernel_swi_regs regs;
static int delay_resize = 0;
static win_window pending_resize = NULL;
static int pending_resize_w, pending_resize_h;

static char *string_value(int *poll, int off) {

  int addr;
  char *res;
  //char *p;

  addr = *((int *)(((char *)poll) + off));
  if (addr < 256)
    res = (((char *)poll) + addr + 20);
  else
    res = (char *)addr;
  //p = res;
  //while (*p) {
  //  if (*p < 31) {
  //    *p = 0;
  //    break;
  //  }
  //  p++;
  //}
  return res;
}

static plugin_params_t read_data(char *filename) {

  FILE *file;
  int fields;
  int i, n;
  plugin_params_t params, p;
  char *data;

  file = fopen(filename, "r");
  if (file == NULL)
    Error("Browser passed non-existent parameter file! %s", filename);
  /* Count the fields in the file */
  fields = 0;
  n = 0;
  while (!feof(file)) {
    fread(&i, 4, 1, file);
    if (i == 0)
      break;
    fields++;
    fread(&i, 4, 1, file);
    n += i-12;
    fseek(file, ftell(file) + i, SEEK_SET);
  }
  /* Now Malloc the space */
  params = Malloc0(sizeof(*params) * (fields+1) + n + 3*fields);
  if (params == NULL) {
    fclose(file);
    return NULL;
  }
  p = params;
  data = ((char *)params) + sizeof(*params) * (fields+1);
  /* Now read the file for real */
  fseek(file, 0, SEEK_SET);
  while (1) {
    /* Read the data type */
    fread(&p->type, 4, 1, file);
    if (p->type == 0)
      break;
    /* Read the data size (and ignore it) */
    fread(&i, 4, 1, file);

    /* Read the tag size */
    fread(&i, 4, 1, file);
    /* Allocate space for tag */
    p->tag = data;
    data += i+1;
    /* Read/terminate the tag, and pad to word boundary */
    fread(p->tag, i, 1, file);
    p->tag[i] = 0;
    if (i & 3)
      fread(&i, 4-(i & 3), 1, file);

    /* Read the value size */
    fread(&i, 4, 1, file);
    /* Allocate space for value */
    p->value = data;
    data += i+1;
    /* Read/terminate the tag, and pad to word boundary */
    fread(p->value, i, 1, file);
    p->value[i] = 0;
    if (i & 3)
      fread(&i, 4-(i & 3), 1, file);

    /* Read the mime size */
    fread(&i, 4, 1, file);
    /* Allocate space for mime */
    p->mime = data;
    data += i+1;
    /* Read/terminate the mime, and pad to word boundary */
    fread(p->mime, i, 1, file);
    p->mime[i] = 0;
    if (i & 3)
      fread(&i, 4-(i & 3), 1, file);

    p++;
  }
  fclose(file);
  p->tag   = 0;
  p->value = 0;

  return params;
}

static void do_resize(win_window win, int w, int h) {

  int blk[10];
  plugin_instance_t pi = instances;
  plugin_instance_t q = NULL;

  while (pi) {
    if (pi->window == win)
      q = pi;
    pi = pi->next;
  }
  if (q == NULL) {
    //Error("Can't Resize non existent instance!");
    return;
  }

  blk[0] = 40;
  blk[3] = 0;
  blk[4] = MESSAGE_PLUGIN_RESHAPE_REQUEST;
  blk[5] = 0;
  blk[6] = (int)q;
  blk[7] = q->browser;
  blk[8] = w;
  blk[9] = h;
  regs.r[0] = 17;
  regs.r[1] = (int)blk;
  regs.r[2] = q->task;
  _kernel_swi(Wimp_SendMessage, &regs, &regs);
}

static void do_pending_resize(void) {

  if (pending_resize)
    do_resize(pending_resize, pending_resize_w, pending_resize_h);
}

static void do_win_open(win_window win, int *box, int helper) {

  int blk[9];
  int offx, offy;

  regs.r[1] = (int)blk;
  regs.r[2] = 0;
  blk[0] = box[0];
  _kernel_swi(Wimp_GetWindowState, &regs, &regs);
  offx = blk[1]-blk[5];
  offy = blk[4]-blk[6];
  blk[0] = win->handle;
  _kernel_swi(Wimp_GetWindowOutline, &regs, &regs);
  offx -= blk[1];
  offy -= blk[4];
  blk[0] = win->handle;
  _kernel_swi(Wimp_GetWindowState, &regs, &regs);
  offx += blk[1];
  offy += blk[4];
  regs.r[2] = 0x4b534154; /* TASK - Horrible nested WIMP hackery */
  if (helper)
    regs.r[3] = -1;
  else
    regs.r[3] = box[0];
  regs.r[4] = 0;
  blk[1] = box[1]+offx;
  blk[2] = box[2]+offy;
  blk[3] = box[3]+offx;
  blk[4] = box[4]+offy;
  blk[7] = -1;
  blk[8] = 0;
  _kernel_swi(Wimp_OpenWindow, &regs, &regs);
}

static void send_closed(plugin_instance_t pi, int ref) {

  int blk[10];

  blk[0] = 32;
  blk[3] = ref;
  blk[4] = MESSAGE_PLUGIN_CLOSED;
  blk[5] = (ref == 0 ? 2 : 0);
  blk[6] = (int)pi;
  blk[7] = pi->browser;
  regs.r[0] = 17;
  regs.r[1] = (int)blk;
  regs.r[2] = pi->task;
  _kernel_swi(Wimp_SendMessage, &regs, &regs);
}

static void send_busy(plugin_instance_t pi, int ref, int state, int caps, int busy) {

  int blk[10];

  blk[0] = 40;
  blk[3] = ref;
  blk[4] = MESSAGE_PLUGIN_BUSY;
  blk[5] = ((caps == -1) ? 0 : 4) | ((state == -1) ? 0 : 2) | busy;
  blk[6] = (int)pi;
  blk[7] = pi->browser;
  blk[8] = ((state == -1) ? 0 : state);
  blk[9] = ((caps == -1) ? 0 : caps);
  regs.r[0] = 17;
  regs.r[1] = (int)blk;
  regs.r[2] = pi->task;
  _kernel_swi(Wimp_SendMessage, &regs, &regs);
}

static void message_resize(int *poll) {

  int w, h;
  plugin_instance_t q, pi;

  //WinMessage((_kernel_oserror *)"1234Resize Message received");
  q = (plugin_instance_t)poll[6];
  pi = instances;
  while (pi) {
    if (pi == q)
      break;
    pi = pi->next;
  }
  if (pi == NULL) {
    return;
  }
  if (q->helper) {
    //WinMessage((_kernel_oserror *)"1234Resize Message ignored cos helper");
    return;
  }
  w = poll[11]-poll[9];
  h = poll[12]-poll[10];
  //{ char text[256];
  //  sprintf(text, "1234Asked to resize to %d %d", w ,h);
  //  WinMessage((_kernel_oserror *)text);
  //}
  q->type->fns->resize(q->window, w, h);
  do_win_open(q->window, poll+8, q->helper);
}

static void message_open(int *poll) {

  int type;
  plugin_list_t p;
  win_window win;
  plugin_instance_t inst;
  int helper, state, caps, busy;
  plugin_params_t data;

  type = poll[13];
  p = plugin_list;
  while (p) {
    if (p->filetype == type)
      break;
    p = p->next;
  }
  if (p == NULL)
    return;
  /* We have a plugin for this type! */
  data = read_data(string_value(poll, 56));
  if (data == NULL)
    return;
  delay_resize = 1;
  helper = p->helper | (poll[5] & 1);

#if 0
  /* Broken for Oregano: START */
  if ((poll[11]-poll[9] == 0) && (poll[12]-poll[10] == 0))
    helper = 1;
  else
    helper = p->helper;
  /* Broken for Oregano: END */
#else
  helper = p->helper;
#endif

  if ((poll[8] == 0) || (poll[8] == -1))
    helper = 1;
  inst = Malloc0(sizeof(*inst));
  if (inst == NULL) {
    return;
  }
  inst->window  = NULL;
  inst->type    = p;
  inst->browser = poll[7];
  inst->task    = poll[1];
  inst->next    = instances;
  inst->helper  = helper;
  instances     = inst;
  win           = p->fns->open(data, helper);
  inst->window  = win;
  delay_resize = 0;
  Free(data);
  if (win) {
    /* Stick this on the list of active plugin instances */
    if (helper) {
      WinOpen(win);
    } else {
      do_win_open(win, poll+8, helper);
    }
    /* Tell the browser we are accepting the charges */
    poll[0] = 40;
    poll[3] = poll[2]; /* my_ref */
    poll[4] = MESSAGE_PLUGIN_OPENING;
    poll[5] = 0;
    if (helper)
      poll[5] |= 1<<6;
    poll[6] = (int)inst;
    poll[7] = inst->browser;
    poll[8] = 0;
    if (p->fns->getstate) {
      p->fns->getstate(win, &state, &busy, &caps);
      poll[5] |= 1<<7;
      poll[9] = caps;
      if (poll[9] != 1) {
        poll[5] |= 1<<5;
      }
    }
    regs.r[0] = 17;
    regs.r[1] = (int)poll;
    regs.r[2] = poll[1];
    _kernel_swi(Wimp_SendMessage, &regs, &regs);
    do_pending_resize();
    /* Now, just for Alistair, send details of its state */
    if (inst->type->fns->getstate) {
      inst->type->fns->getstate(inst->window, &state, &busy, &caps);
    } else {
      state = -1;
      busy = 0;
      caps = -1;
    }
    send_busy(inst, poll[3], state, caps, busy);
  }
}

static void message_close(int *poll) {

  plugin_instance_t *pi = &instances;
  plugin_instance_t q;

  /* Find the instance that is being closed */
  q = (plugin_instance_t)poll[6];
  while (*pi) {
    if ((*pi) == q) {
      *pi = (*pi)->next;
      q->type->fns->close(q->window, 0);
      send_closed(q, poll[3]);
      Free(q);
    } else {
      pi = &(*pi)->next;
    }
  }
}

static void message_action(int *poll) {

  plugin_instance_t pi = instances;
  plugin_instance_t q;
  int busy, state, caps;

  busy = 0;
  caps = -1;
  q = (plugin_instance_t)poll[6];
  while (pi) {
    if (pi == q) {
      if (q->type->fns->action) {
        if (poll[5] & 2) {
          q->type->fns->action(q->window, poll[8]);
        } else {
          q->type->fns->action(q->window, 0);
        }
      }
      if (q->type->fns->getstate) {
        q->type->fns->getstate(q->window, &state, &busy, &caps);
      } else {
        state = -1;
        busy = 0;
        caps = -1;
      }
      if ((state != PLUGIN_ACTION_MUTE) && (state != PLUGIN_ACTION_UNMUTE))
        send_busy(q, poll[3], state, caps, busy);
    }
    pi = pi->next;
  }
}

static void my_task_died(int task) {

  plugin_instance_t *pi = &instances;
  plugin_instance_t q;

  while (*pi) {
    if ((*pi)->task == task) {
      q = *pi;
      *pi = (*pi)->next;
      q->type->fns->close(q->window, 0);
      send_closed(q, 0);
      Free(q);
    } else {
      pi = &(*pi)->next;
    }
  }
}

static void url_fetch_notify(int *poll) {

  plugin_fetch_t pf;
  //_kernel_oserror err;

  pf = (plugin_fetch_t)poll[10];
  if (poll[9] == 0)
    pf->state = FETCH_FINISHED;
  else if (poll[9] == 2)
    pf->state = FETCH_USERKILLED;
  else //if poll[9] == 1)
    pf->state = FETCH_FAILED;
  //sprintf(err.errmess, "Notify: %d", poll[9]);
  //WinMessage(&err);
}

static void stream_new(int *poll) {

  plugin_fetch_t pf = fetches;

  while (pf) {
    if (pf->wimp_ref) {
      /* We'll assume its for the first non zero one */
      pf->wimp_ref = 0;
      break;
    } else {
      pf = pf->next;
    }
  }
  if (pf == NULL)
    return;

  poll[3] = poll[2];	// my_ref
  poll[5] |= 3;		// I want a FILE!
  poll[8] = (int)pf;
  regs.r[0] = 17;
  regs.r[1] = (int)poll;
  regs.r[2] = (int)pf->instance->task;
  _kernel_swi(Wimp_SendMessage, &regs, &regs);
}

static void stream_as_file(int *poll) {

  plugin_fetch_t pf = (plugin_fetch_t)(poll[8]);
  char *f;
  int i;

  f = string_value(poll, 56);
  i = strlen(f)+1;
  pf->filename = Malloc(i);
  strcpy(pf->filename, string_value(poll, 56));
  pf->state = FETCH_FINISHED;
}

static void stream_destroy(int *poll) {

  plugin_fetch_t pf = (plugin_fetch_t)(poll[8]);
  plugin_fetch_t *ppf;

  if (pf == 0) {
    WinMessage((_kernel_oserror *)"1234Stream_Destroy message with plugin stream instance = 0");
    return;
  }

  pf->stream_active = 0;
  if (pf->abandoned) {
    ppf = &fetches;
    while (*ppf) {
      if (*ppf == pf) {
        *ppf = pf->next;
      } else {
        ppf = &(*ppf)->next;
      }
    }
    Free(pf->url);
    Free(pf);
  }
}

static void message(int *poll) {

#if 0
  _kernel_oserror err;

  err.errnum = 0;
  sprintf(err.errmess, "Message: %x [%x, %x, %x, %x, %x, %x, %x]", poll[4], poll[5], poll[6], poll[7], poll[8], poll[9], poll[10], poll[11]);
  WinMessage(&err);
#endif
  switch (poll[4]) {
    case 0x400C3:
      /* Task closed down */
      my_task_died(poll[4]);
      break;
    case MESSAGE_PLUGIN_OPEN:
      message_open(poll);
      break;
    case MESSAGE_PLUGIN_CLOSE:
      message_close(poll);
      break;
    case MESSAGE_PLUGIN_RESHAPE:
      message_resize(poll);
      break;
    case MESSAGE_PLUGIN_UNLOCK:
      break;
    case MESSAGE_PLUGIN_STREAM_NEW:
      stream_new(poll);
      break;
    case MESSAGE_PLUGIN_STREAM_DESTROY:
      stream_destroy(poll);
      break;
    case MESSAGE_PLUGIN_STREAM_WRITE:
      //sprintf(err.errmess, "Stream Write");
      //WinMessage(&err);
      break;
    case MESSAGE_PLUGIN_STREAM_WRITTEN:
      //sprintf(err.errmess, "Stream Written");
      //WinMessage(&err);
      break;
    case MESSAGE_PLUGIN_STREAM_AS_FILE:
      stream_as_file(poll);
      break;
    case MESSAGE_PLUGIN_URL_ACCESS:
      break;
    case MESSAGE_PLUGIN_NOTIFY:
      url_fetch_notify(poll);
      break;
    case MESSAGE_PLUGIN_STATUS:
      break;
    case MESSAGE_PLUGIN_BUSY:
      break;
    case MESSAGE_PLUGIN_ACTION:
      message_action(poll);
      break;
    case MESSAGE_PLUGIN_ABORT:
      break;
  }
}

void PlugIn(plugin_t fns, int filetype, int helper) {

  plugin_list_t p;

  p = Malloc0(sizeof(*p));
  if (p == NULL)
    Error("Failed to allocate memory for plugin");
  p->filetype = filetype;
  p->helper   = helper;
  p->fns      = fns;
  p->next     = plugin_list;
  plugin_list = p;

  xyzPLUGIN_MESSAGExyz = message;
}

void PlugInDie(win_window win) {

  plugin_instance_t *pi = &instances;
  plugin_instance_t q;

  while (*pi) {
    if ((*pi)->window == win) {
      q = *pi;
      *pi = (*pi)->next;
      q->type->fns->close(q->window, 0);
      send_closed(q, 0);
      Free(q);
    } else {
      pi = &(*pi)->next;
    }
  }
}

void PlugInResizeRequest(win_window win, int w, int h) {

  if (delay_resize) {
    pending_resize = win;
    pending_resize_w = w;
    pending_resize_h = h;
  } else
    do_resize(win, w, h);
}

static int strcasecmp(char *s1, char *s2) {

  int a, b;

  while (1) {
    a = toupper(*s1++);
    b = toupper(*s2++);
    if (a != b) {
      if (a < b)
        return -1;
      else
        return 1;
    } else if (a == 0)
      return 0;
  }
  return 0;
}

int PlugInParamsLookup(plugin_params_t params, char *tag, char **value, char **mime) {

  while (1) {
    if (params->type == 0)
      return 0;
    if (strcasecmp(tag, params->tag) == 0) {
      *value = params->value;
      *mime  = params->mime;
      return params->type;
    }
    params++;
  }
}

void PlugInChangeWindow(win_window old, win_window new_win) {

  plugin_instance_t pi = instances;

  while (pi) {
    if (pi->window == old) {
      pi->window = new_win;
    } else {
      pi = pi->next;
    }
  }
}

plugin_fetch_t PlugInFetchAsFile(const char *URL, win_window win, void *tag) {

  int message[20];
  plugin_instance_t pi = instances;
  plugin_fetch_t pf;

  while (pi) {
    if (pi->window == win) {
      break;
    } else {
      pi = pi->next;
    }
  }

  if (pi == NULL)
    return NULL;

  pf = Malloc(sizeof(*pf));
  pf->next = fetches;
  fetches = pf;
  pf->url = Malloc(strlen(URL)+1);
  pf->tag = tag;
  pf->state = FETCH_INPROGRESS;
  pf->instance = pi;
  pf->filename = NULL;
  pf->stream_active = 1;
  pf->abandoned = 0;
  strcpy(pf->url, URL);
  message[0] = 48;
  message[3] = 0;
  message[4] = MESSAGE_PLUGIN_URL_ACCESS;
  message[5] = 1;	// Notify on completion
  message[6] = (int)pi;
  message[7] = (int)pi->browser;
  message[8] = (int)pf->url;
  message[9] = 0;
  message[10]= (int)pf;
  message[11]= 0;
  regs.r[0] = 17;
  regs.r[1] = (int)message;
  regs.r[2] = (int)pi->task;
  _kernel_swi(Wimp_SendMessage, &regs, &regs);
  pf->wimp_ref = message[2];

  return pf;
}

void PlugInFetchAbandon(plugin_fetch_t fetch) {

  plugin_fetch_t *ppf;

  if (fetch) {
    if (fetch->stream_active == 0) {
      ppf = &fetches;
      while (*ppf) {
        if (*ppf == fetch) {
          *ppf = fetch->next;
        } else {
          ppf = &(*ppf)->next;
        }
      }

      Free(fetch->url);
      Free(fetch);
    }
  } else {
    fetch->abandoned = 1;
  }
}

plugin_fetch_state PlugInFetchState(plugin_fetch_t fetch) {

  if (fetch) {
    return fetch->state;
  } else {
    return FETCH_FAILED;
  }
}

char *PlugInFetchReturnFilename(plugin_fetch_t fetch) {

  char *fname;
  plugin_fetch_t *ppf;

  if (fetch) {
    fname = fetch->filename;
    if (fetch->stream_active == 0) {

      ppf = &fetches;
      while (*ppf) {
        if (*ppf == fetch) {
          *ppf = fetch->next;
        } else {
          ppf = &(*ppf)->next;
        }
      }

      Free(fetch->url);
      Free(fetch);
    }
    return fname;
  }
  return NULL;
}

void PlugInStateChanged(win_window win) {

  int busy, caps, state;
  plugin_instance_t pi = instances;

  while (pi) {
    if (pi->window == win) {
      break;
    } else {
      pi = pi->next;
    }
  }

  if (pi == NULL)
    return;

  busy = 0;
  caps = -1;
  pi->type->fns->getstate(pi->window, &state, &busy, &caps);
  send_busy(pi, 0, state, caps, busy);
}
