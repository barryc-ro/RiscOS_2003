/******************************************************/
/*                                                    */
/* Name: WSStask.h                                    */
/* Author: Robin Watts.                               */
/* Function:                                          */
/*   Provides a function for creating/monitoring      */
/* other WIMP tasks, for use with the module WSSwin.  */
/* This CANNOT be used in isolation.                  */
/*                                                    */
/******************************************************/

#include <stdlib.h>
#include <ctype.h>

#include "swis.h"

#include "WSSwin.h"
#include "WSSwinH.h"
#include "WSStask.h"
#include "WSSmem.h"

typedef struct task_record {
  int        task;
  task_died  fn;
  void      *arg;
  struct task_record *next;
} task_record;

static task_record *task_list = NULL;

static void task_dying(int *poll) {

  int task;
  task_record **rec;
  task_record *kill;

  task = poll[1];
  rec = &task_list;
  while (*rec) {
    if ((*rec)->task == task) {
      kill = *rec;
      (*rec) = (*rec)->next;
      kill->fn(kill->arg);
      Free(kill);
    } else
      rec = &(*rec)->next;
  }
}

int TaskInit(char *command, task_died fn, void *arg) {

  int task;
  task_record *new_task;

  _swix(Wimp_StartTask, _IN(0) | _OUT(0), command, &task);
  if (task != 0) {
    new_task = Malloc0(sizeof(*new_task));

    new_task->task = task;
    new_task->fn   = fn;
    new_task->arg  = arg;
    new_task->next = task_list;
    task_list = new_task;
  }

  xyzTASK_DYINGxyz = task_dying;

  return task;
}

void TaskHandles(win_window win, int *taskhandle, int *winhandle) {

  int blk[9];

  blk[0] = 20;
  blk[3] = 0;
  blk[4] = 0;
  _swix(Wimp_SendMessage, _IN(0)|_IN(1)|_IN(2), 19, blk, win->handle);
  *taskhandle = blk[1];
  *winhandle  = win->handle;
}

int strcasecmp(const char *a, const char *b) {

  while (1) {
    if ((*a == 0) && (*b == 0))
      return 0;
    if (*a == 0)
      return 1;
    if (*b == 0)
      return -1;
    if (tolower(*a) != tolower(*b))
      return (((*a) < (*b)) ? 1 : -1);
    a++;
    b++;
  }
}

int TaskHandleFromName(const char *name) {

  int state;
  int buffer[4];
  int n;
  int handle;
  _kernel_oserror *e;

  state = 0;
  handle = 0;
  do {
    e = _swix(TaskManager_EnumerateTasks, _INR(0,2) | _OUT(0) | _OUT(2), state, &buffer[0], 16, &state, &n);
    if ((!e) && (n != 16)) {
      /* No error, and something was written */
      if (strcasecmp((char*)(buffer[1]), name) == 0) {
        handle = buffer[0];
      }
    }
  } while ((e == NULL) && (state >= 0) && (handle == 0));
  return handle;
}
