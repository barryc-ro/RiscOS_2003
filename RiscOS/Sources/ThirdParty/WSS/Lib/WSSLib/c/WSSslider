/******************************************************/
/*                                                    */
/* Name: WSSslider.c                                  */
/* Author: Robin Watts.                               */
/* Function:                                          */
/*   Provides a library of functions for providing    */
/* sliders in icons, for use with the module WSSwin.  */
/* They CANNOT be used in isolation.                  */
/*                                                    */
/******************************************************/

#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "WSSerr.h"
#include "WSSslider.h"
#include "WSSwinH.h"
#include "WSSicnH.h"
#include "WSSgr.h"
#include "WSSmem.h"

#define BORDER (4)
#define GAP    (8)

static _kernel_swi_regs regs;

struct slider_list {
  slider              slider;
  struct slider_list *next;
};

struct slider_s {
  int          range;
  int          value;
  int          grey;
  icn_icon     icon;
  slider_value value_fn;
};

static slider current_slider;

static void kill_sliders(win_window win) {

  struct slider_list *list = (struct slider_list *)win->sliders;
  struct slider_list *next;

  while (list) {
    next = list->next;
    Free(list->slider);
    Free(list);
    list = next;
  }
}

static void slider_released(int *poll) {

  xyzDRAG_SLIDERxyz = NULL;
  xyzPOLL_SLIDERxyz = NULL;
}

static void slider_poll(void) {

  int blk[10];
  int x, x0, xeig;

  regs.r[0] = -1;
  regs.r[1] = 4;
  _kernel_swi(OS_ReadModeVariable, &regs, &regs);
  xeig = (1<<regs.r[2]);
  regs.r[1] = (int)blk;
  blk[0] = current_slider->icon->window;
  _kernel_swi(Wimp_GetWindowState, &regs, &regs);
  x0 = blk[1] + blk[5];
  _kernel_swi(Wimp_GetPointerInfo, &regs, &regs);
  x = blk[0] - x0;
  blk[0] = current_slider->icon->window;
  blk[1] = current_slider->icon->icon;
  _kernel_swi(Wimp_GetIconState, &regs, &regs);
  x -= blk[2] + BORDER + GAP;
  x = x*current_slider->range/(blk[4]-blk[2]-xeig-(BORDER*2+GAP*2));
  if (x < 0)
    x = 0;
  if (x > current_slider->range)
    x = current_slider->range;
  SliderSetValue(current_slider, x);
  current_slider->value_fn(x);
}

static void slider_click(void) {

  int blk[14];
  int x0, y0;
  slider s;

  s = IcnData();
  if (s->grey)
    return;
  current_slider = s;
  regs.r[1] = (int)blk;
  blk[0] = s->icon->window;
  _kernel_swi(Wimp_GetWindowState, &regs, &regs);
  x0 = blk[1] + blk[5];
  y0 = blk[4] + blk[6];
  blk[1] = s->icon->icon;
  _kernel_swi(Wimp_GetIconState, &regs, &regs);
  blk[6] = blk[2]+GAP+BORDER+x0;
  blk[7] = blk[3]+GAP+BORDER+y0;
  blk[8] = blk[4]-GAP-BORDER+x0;
  blk[9] = blk[5]-GAP-BORDER+y0;
  blk[1] = 7;
  _kernel_swi(Wimp_DragBox, &regs, &regs);
  xyzDRAG_SLIDERxyz = slider_released;
  xyzPOLL_SLIDERxyz = slider_poll;
}

static void redraw_sliders(win_window win, int *poll) {

  struct slider_list *s;
  int blk[10];
  int mid, xeig, yeig;

  regs.r[0] = -1;
  regs.r[1] = 4;
  _kernel_swi(OS_ReadModeVariable, &regs, &regs);
  xeig = (1<<regs.r[2]);
  regs.r[0] = -1;
  regs.r[1] = 5;
  _kernel_swi(OS_ReadModeVariable, &regs, &regs);
  yeig = (1<<regs.r[2]);
  s = (struct slider_list *)win->sliders;
  while (s) {
    regs.r[1] = (int)blk;
    blk[0] = s->slider->icon->window;
    blk[1] = s->slider->icon->icon;
    _kernel_swi(Wimp_GetIconState, &regs, &regs);
    GrMove(blk[4]-(BORDER+GAP)-xeig, blk[5]-(BORDER+GAP)-yeig);
    if (s->slider->grey)
      GrColFG(2);
    else
      GrColFG(10);
    mid = s->slider->value*(blk[4]-xeig-blk[2]-(BORDER*2+GAP*2))/s->slider->range;
    GrRectangle(blk[2] + mid + (BORDER+GAP), blk[3] + (BORDER+GAP));
    if (s->slider->value > 0) {
      if (s->slider->grey)
        GrColFG(3);
      else
        GrColFG(11);
      GrRectangle(blk[2] + (BORDER+GAP), blk[5]-(BORDER+GAP)-yeig);
    }
    s = s->next;
  }
}

slider Slider(icn_icon icn, slider_value fn, int range) {

  slider s;
  struct slider_list *t;
  win_window win;

  win = xyzWINFINDxyz(icn->window);
  if (win == NULL) {
    Error("Failed to find window associated with slider icon");
  }
  s = Malloc0(sizeof(*s));
  if (s == NULL) {
    Error("Failed to allocate memory for slider");
  }
  s->range    = range;
  s->value    = 0;
  s->icon     = icn;
  s->value_fn = fn;
  s->grey     = 0;
  xyzREDRAW_SLIDERxyz = redraw_sliders;
  xyzKILL_SLIDERxyz   = kill_sliders;
  IcnClickS(icn, slider_click);
  IcnClickA(icn, slider_click);
  IcnSetData(icn, (void *)s);

  t = Malloc0(sizeof(*t));
  if (t == NULL) {
    Error("Failed to allocate memory for slider");
  }
  t->slider = s;
  t->next   = win->sliders;
  win->sliders = t;

  return s;
}

void SliderSetValue(slider s, int value) {

  int blk[10];
  int midx0, midx1, t, xeig;

  if (value < 0)
    value = 0;
  if (value > s->range)
    value = s->range;
  regs.r[0] = -1;
  regs.r[1] = 4;
  _kernel_swi(OS_ReadModeVariable, &regs, &regs);
  xeig = (1<<regs.r[2]);
  regs.r[1] = (int)blk;
  blk[0] = s->icon->window;
  blk[1] = s->icon->icon;
  _kernel_swi(Wimp_GetIconState, &regs, &regs);
  regs.r[0] = s->icon->window;
  midx0 = s->value*(blk[4]-blk[2]-(BORDER*2+GAP*2))/s->range;
  midx1 = value*(blk[4]-blk[2]-(BORDER*2+GAP*2))/s->range;
  if (midx0 == midx1)
    return;
  if (midx0 > midx1) {
    t = midx0;
    midx0 = midx1;
    midx1 = t;
  }
  regs.r[1] = blk[2]+(BORDER+GAP)+midx0;
  regs.r[2] = blk[3]+(BORDER+GAP);
  regs.r[3] = blk[2]+(BORDER+GAP)+midx1+xeig;
  regs.r[4] = blk[5]-(BORDER+GAP);
  s->value = value;
  _kernel_swi(Wimp_ForceRedraw, &regs, &regs);
}

void SliderResize(slider s, int range) {

  s->range = range;
  IcnSetSel(s->icon, 0);
}

void SliderSetGrey(slider s, int grey) {

  int blk[10];

  if (s->grey == grey)
    return;
  s->grey = grey;
  regs.r[1] = (int)blk;
  blk[0] = s->icon->window;
  blk[1] = s->icon->icon;
  _kernel_swi(Wimp_GetIconState, &regs, &regs);
  regs.r[0] = s->icon->window;
  regs.r[1] = blk[2]+(BORDER+GAP);
  regs.r[2] = blk[3]+(BORDER+GAP);
  regs.r[3] = blk[4]-(BORDER+GAP);
  regs.r[4] = blk[5]-(BORDER+GAP);
  _kernel_swi(Wimp_ForceRedraw, &regs, &regs);

}
