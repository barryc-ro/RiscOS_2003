/******************************************************/
/*                                                    */
/* Name: WSSplugin.h                                  */
/* Author: Robin Watts.                               */
/* Function:                                          */
/*   Provides a set of functions for building plugin/ */
/* helper apps with WSSlib. Relies on WSSwin.         */
/* This CANNOT be used in isolation.                  */
/*                                                    */
/******************************************************/

#ifndef _WSSplugin_
#define _WSSplugin_

typedef struct plugin_params_s *plugin_params_t;

typedef win_window (*plugin_open    )(plugin_params_t, int helper);
typedef void       (*plugin_close   )(win_window, int fatal);
typedef void       (*plugin_resize  )(win_window, int w, int h);
typedef int        (*plugin_action  )(win_window, int action);
typedef void       (*plugin_getstate)(win_window, int *state, int *busy, int *caps);

typedef struct plugin_s {
  plugin_open     open;
  plugin_close    close;
  plugin_resize   resize;
  plugin_action   action;	/* NULL if not supported */
  plugin_getstate getstate;	/* NULL if not supported */
} plugin_s;

typedef struct plugin_s *plugin_t;

typedef struct plugin_fetch_s *plugin_fetch_t;

typedef enum {
  FETCH_INPROGRESS,
  FETCH_FINISHED,
  FETCH_FAILED,
  FETCH_USERKILLED
} plugin_fetch_state;

#define PLUGIN_ACTION_STOP	(0)
#define PLUGIN_ACTION_PLAY	(1)
#define PLUGIN_ACTION_PAUSE	(2)
#define PLUGIN_ACTION_FFWD	(3)
#define PLUGIN_ACTION_REW	(4)
#define PLUGIN_ACTION_REC	(5)
#define PLUGIN_ACTION_MUTE	(6)
#define PLUGIN_ACTION_UNMUTE	(7)
#define PLUGIN_ACTION_SLOWFWD	(8)
#define PLUGIN_ACTION_SLOWREW	(9)
#define PLUGIN_ACTION_SKIPFWD	(10)
#define PLUGIN_ACTION_SKIPREW	(11)

void PlugIn(plugin_t, int filetype, int helper);
/*
   Registers as a plug in (helper = 0) or helper app (helper = 1) for
   the given filetype.
 */

void PlugInDie(win_window);
/*
   Kills off an instance of a plug in.
 */

void PlugInResizeRequest(win_window win, int w, int h);
/*
   Requests that a plug in should be resized to the given size.
 */

int PlugInParamsLookup(plugin_params_t params, char *tag, char **value, char **mime);
/*
   Lookup the value and mimetype of tag in params. Returns 0 for not found or
   parameter type.
 */

void PlugInChangeWindow(win_window old, win_window new_win);
/*
   Informs the plugin system that a new window is being substitued for an old one.
 */

plugin_fetch_t PlugInFetchAsFile(const char *URL, win_window win, void *tag);
/*
   Initiates a fetch of a URL to a file.
 */

void PlugInFetchAbandon(plugin_fetch_t fetch);
/*
   Gives up on a fetch.
 */

plugin_fetch_state PlugInFetchState(plugin_fetch_t fetch);
/*
   Returns state of a fetch
 */

char *PlugInFetchReturnFilename(plugin_fetch_t fetch);
/*
  Returns the filename given to a fetched file. returned string must be 'Free'd
  when finished with. Side effect = Destructs the fetch.
 */

void PlugInStateChanged(win_window win);
/*
  Keeps the plugins parent informed as to its current state.
 */

#endif
