        EXPORT  HAL_UARTPorts
        EXPORT  HAL_UARTStartUp
        EXPORT  HAL_UARTShutdown
        EXPORT  HAL_UARTFeatures
        EXPORT  HAL_UARTReceiveByte
        EXPORT  HAL_UARTTransmitByte
        EXPORT  HAL_UARTLineStatus
        EXPORT  HAL_UARTInterruptEnable
        EXPORT  HAL_UARTRate
        EXPORT  HAL_UARTFormat
        EXPORT  HAL_UARTFIFOSize
        EXPORT  HAL_UARTFIFOClear
        EXPORT  HAL_UARTFIFOEnable
        EXPORT  HAL_UARTFIFOThreshold
        EXPORT  HAL_UARTInterruptID
        EXPORT  HAL_UARTBreak
        EXPORT  HAL_UARTModemControl
        EXPORT  HAL_UARTModemStatus
        EXPORT  HAL_UARTDevice

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:Proc
        GET     Hdr:OSEntries

        GET     hdr.StaticWS
        GET     hdr.Hardware

        MACRO
        GetAddress
        ADR     ip, SerialWS
        ASSERT  SerialWS_size = 4
        CMP     a1, #1
        ADD     a1, ip, a1, LSL #2
        LDR     ip, HW_Address
        ADDLO   ip, ip, #UART1_BASE - PERIPHERAL_BASE
        ADDEQ   ip, ip, #UART2_BASE - PERIPHERAL_BASE
        ADDHI   ip, ip, #UART3_BASE - PERIPHERAL_BASE
        MEND

        AREA    |Asm$$Code|, CODE, READONLY, PIC

HAL_UARTStartUp
        GetAddress
        MOV     a4, #1
        STRB    a4, [ip, #UARTCR]
        MOV     a4, #0
        STRB    a4, [a1, #HaveByte]
        STRB    a4, [a1, #IEState]
        MOV     pc, lr

HAL_UARTShutdown
        GetAddress
        MOV     a4, #0
        STRB    a4, [ip, #UARTCR]
        MOV     pc, lr

HAL_UARTPorts
        MOV     a1, #3
        MOV     pc, lr

HAL_UARTFeatures
        TEQ     a1, #1
        MOVEQ   a1, #5  ; FIFO+control
        MOVNE   a1, #1  ; FIFO
        MOV     pc, lr

HAL_UARTReceiveByte
        Entry
        GetAddress
        PHPSEI  ,a4
        LDRB    a3, [a1, #HaveByte]
        TEQ     a3, #0
        BEQ     %FT20
        MOV     a4, #0
        STRB    a4, [a1, #HaveByte]
        TEQ     a2, #0
        LDRNEB  a3, [ip, #UARTFR]
        LDRNEB  a4, [a1, #StoredStatus]
        LDRB    a1, [a1, #StoredByte]
        BICNE   a3, a3, #&10            ; Say RX FIFO isn't empty
        B       %FT40
20      TEQ     a2, #0
        LDRNEB  a3, [ip, #UARTFR]
        LDRB    a1, [ip, #UARTDR]
        LDRNEB  a4, [ip, #UARTRSR]
        STRNEB  a4, [ip, #UARTECR]
40      BEQ     %FT90
        PLP
        AND     a4, a4, #&F
        ADR     ip, RSRConv
        LDRB    a4, [ip, a4]
        TST     a3, #&10                ; If RX FIFO wasn't empty
        ORREQ   a4, a4, #&01            ; say "Receiver data ready"
        TST     a3, #&80                ; If TX FIFO is empty
        ORRNE   a4, a4, #&20            ; say "Transmitter holding empty"
        TST     a3, #&08                ; If not busy
        ORREQ   a4, a4, #&40            ; say "Transmitter Empty"
        STR     a4, [a2]
90
        EXIT

RSRConv
        =       2_00000000
        =       2_10001000
        =       2_10000100
        =       2_10001100
        =       2_10010000
        =       2_10011000
        =       2_10010100
        =       2_10011100
        =       2_00000010
        =       2_10001010
        =       2_10000110
        =       2_10001110
        =       2_10010010
        =       2_10011010
        =       2_10010110
        =       2_10011110

HAL_UARTTransmitByte
        GetAddress
        STRB    a2, [ip, #UARTDR]
        MOV     pc, lr


HAL_UARTLineStatus
        GetAddress
        LDRB    a3, [a1, #HaveByte]
        TEQ     a3, #0
        LDRNEB  a4, [a1, #StoredStatus]
        LDREQB  a4, [ip, #UARTRSR]
        STREQB  a1, [ip, #UARTECR]
        LDRB    a3, [ip, #UARTFR]
        AND     a4, a4, #&F
        ADR     ip, RSRConv
        LDRB    a1, [ip, a4]
        TST     a3, #&10                ; If RX FIFO wasn't empty
        ORREQ   a1, a1, #&01            ; say "Receiver data ready"
        TST     a3, #&80                ; If TX FIFO is empty
        ORRNE   a1, a1, #&20            ; say "Transmitter holding empty"
        TST     a3, #&08                ; If not busy
        ORREQ   a1, a1, #&40            ; say "Transmitter Empty"
        MOV     pc, lr

HAL_UARTInterruptEnable
        Entry
        GetAddress
        PHPSEI  ,a4
        LDRB    a4, [a1, #IEState]
        AND     a4, a1, a3
        EOR     a4, a4, a2
        STRB    a4, [a1, #IEState]
        AND     a2, a2, #&F
        AND     a3, a3, #&F
        ADR     a4, IEConv
        LDRB    a1, [ip, #UARTCR]
        LDRB    a3, [a4, a3]
        LDRB    a2, [a4, a2]
        ORR     a3, a3, #&87
        AND     a3, a1, a3
        EOR     a3, a3, a2
        STRB    a3, [ip, #UARTCR]
        LDRB    a1, [a1, #IEState]
        PLP
        EXIT


IEConv
        =       2_00000000
        =       2_01010000
        =       2_00100000
        =       2_01110000
        =       2_01010000
        =       2_01010000
        =       2_01110000
        =       2_01110000
        =       2_00001000
        =       2_01011000
        =       2_00101000
        =       2_01111000
        =       2_01011000
        =       2_01011000
        =       2_01111000
        =       2_01111000

; int Rate(int port, int baud16)
;
;   Sets the rate, in units of 1/16 of a baud. Returns the previous rate.
;   Use -1 to read.
;
HAL_UARTRate
        Entry   "v1"
        GetAddress
        LDRB    a3, [ip, #UARTLCR_L]    ; Read the current baud rate
        LDRB    a4, [ip, #UARTLCR_M]
        LDR     v1, =UARTCLK
        ADD     a4, a3, a4, LSL#8
        ADD     a4, a4, #1
        DivRem  a3, v1, a4, lr          ; a3 now contains baud rate * 16
        CMN     a2, #1                  ; Don't write if we're reading!
        BEQ     %FT10

; We need to program 3.6864MHz / (16 * baud rate) - 1

        LDR     v1, =UARTCLK            ; This was corrupted by the above DIVREM
        DivRem  a4, v1, a2, lr
        CMP     v1, a2, LSR#1           ; If the remainder is greater than 1/2
        SUBLT   a4, a4, #1              ; the divisor, don't subtract the 1
        ;Disable a2                      ; to make it round up
        STRB    a4, [ip, #UARTLCR_L]
        MOV     a4, a4, LSR#8
        STRB    a4, [ip, #UARTLCR_M]
        PHPSEI  ,a4
        LDRB    a4, [ip, #UARTLCR_H]
        STRB    a4, [ip, #UARTLCR_H]    ; Kick this register to relatch M+L
        PLP
        ;Enable  a2

10      MOV     a1, a3                  ; Return previous state
        EXIT

HAL_UARTFormat
        Entry
        GetAddress
        PHPSEI  ,a3
        LDRB    a3, [ip, #UARTLCR_H]
        AND     a1, a3, #&60            ; their bits 6:5
        MOV     a1, a1, LSR #5          ;     to our bits 1:0
        TST     a3, #&08                ; their bit 3
        ORRNE   a1, a1, #&04            ;     to our bit 2
        AND     a4, a3, #&06            ; their bits 2:1
        ORR     a1, a1, a4, LSL #2      ;     to our bits 4:3
        CMP     a2, #-1
        BEQ     %FT90
        BIC     a3, a3, #&6E            ; modifying bits 6,5,3,2,1 only
        AND     a4, a2, #&03            ; our bits 1:0
        ORR     a3, a3, a4, LSL #5      ;     to their bits 6:5
        TST     a2, #&04                ; our bit 2
        ORRNE   a3, a3, #&08            ;     to our bit 3
        AND     a2, a2, #&18            ; our bits 4:3
        ORR     a3, a3, a2, LSR #2      ;     to their bits 2:1
        STRB    a3, [ip, #UARTLCR_H]
90
        PLP
        EXIT

HAL_UARTFIFOSize
        MOV     a4, #8
        TEQ     a2, #0
        STRNE   a4, [a2]
        TEQ     a3, #0
        STRNE   a4, [a3]
        MOV     pc, lr

HAL_UARTFIFOEnable
        GetAddress
        PHPSEI  a3, a4
        TEQ     a2, #0
        LDRB    a1, [ip, #UARTLCR_H]
        BMI     %F05
        BICEQ   a4, a1, #&10
        ORRNE   a4, a1, #&10
        STRB    a4, [ip, #UARTLCR_H]
05      ANDS    a1, a1, #&10
        MOVNE   a1, #1
        PLP     a3
        MOV     pc, lr

HAL_UARTFIFOClear
        MOV     pc, lr

HAL_UARTFIFOThreshold
        MOV     a1, #8
        MOV     pc, lr

HAL_UARTBreak ROUT
        Entry
        GetAddress
        PHPSEI  ,a4
        LDRB    a4, [ip, #UARTLCR_H]
        AND     a1, a4, #1
        CMP     a2, #-1
        BEQ     %FT90
        BIC     a4, a4, #1
        AND     a2, a2, #1
        ORR     a4, a4, a2
        STRB    a4, [ip, #UARTLCR_H]
90
        PLP
        EXIT


HAL_UARTInterruptID ROUT
        GetAddress
        LDRB    a2, [ip, #UARTIIR]
        TST     a2, #2_1010
        BEQ     %05
        ; Received some data - check for line status
        LDRB    a3, [a1, #HaveByte]
        TEQ     a3, #0
        LDRNEB  a4, [a1, #StoredStatus]
        BNE     %FT04
        ; Need to read DR and RSR into temporary storage to check for
        ; a line status interrupt condition
        STRB    a2, [a1, #HaveByte]        ; A non-zero value
        LDRB    a3, [ip, #UARTDR]
        LDRB    a4, [ip, #UARTRSR]
        STRB    a3, [a1, #StoredByte]
        STRB    a4, [a1, #StoredStatus]
        ; If PE,FE,BE or OE, return 3
04      TST     a4, #2_1111
        MOVNE   a1, #3
        MOVNE   pc, lr
        ; If data available, return 2
        TST     a2, #2_0010
        MOVNE   a1, #2
        ; Else if character timeout, return 6
        MOVEQ   a1, #6
        MOV     pc, lr
        ; The non-receive cases
        ; Transmit empty
05      TST     a2, #2_0100
        MOVNE   a1, #1
        MOVNE   pc, lr
        ; Modem status
        TST     a2, #2_0001
        MOVNE   a1, #0
        MOVNE   pc, lr
        ; Nothing!
        MOV     a1, #-1
        MOV     pc, lr

HAL_UARTModemControl
        GetAddress
        BEQ     ModemControl_2
        Entry
        PHPSEI  ,a4
        LDRB    a1, [ip, #UARTMCR]
        AND     a4, a1, a3
        EOR     a4, a4, a2
        STRB    a4, [ip, #UARTMCR]
        PLP
        EXIT

ModemStatus_2
ModemControl_2
        MOV     a1, #0
        MOV     pc, lr

HAL_UARTModemStatus
        GetAddress
        BEQ     ModemStatus_2
        LDRB    a1, [ip, #UARTMSR]
        STRB    a1, [ip, #UARTICR]      ; Clear the Modem status interrupt
        MOV     pc, lr

HAL_UARTDevice
        ADD     a1, a1, #48
        MOV     pc, lr

        END
