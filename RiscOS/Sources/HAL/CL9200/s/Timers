        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.Hardware

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Timer_Init

        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_TimerReadCountdown

        EXPORT  HAL_CounterRate
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_CounterDelay

        EXPORT  HAL_IRQClear_Timer

Timer_Init
        LDR     a4, HW_Address
        ADD     a4, a4, #TIMER_BASE - PERIPHERAL_BASE
        MOV     a1, #HCLK/TIMERRATE - 1
        ! 0, "Timer prescale = &":CC::STR:(HCLK/TIMERRATE)
        STR     a1, [a4, #GLOBAL_PRESCALE]
        MOV     a1, #&40
        STR     a1, [a4, #TIMER1CONTROL]
        STR     a1, [a4, #TIMER2CONTROL]
        MOV     pc, lr

HAL_Timers
        MOV     a1, #5                  ; 5 timers
        MOV     pc, lr

HAL_TimerDevice
        ADD     a1, a1, #4              ; devices 4 to 8
        MOV     pc, lr

HAL_CounterRate
HAL_TimerGranularity
        LDR     a1, =TIMERRATE
        MOV     pc, lr

HAL_TimerMaxPeriod
        TEQ     a1, #4
        MOVEQ   a1, #&FFFFFFFF          ; 32-bit counter
        MOVNE   a1, #&10000             ; 16-bit counter
        MOV     pc, lr

HAL_TimerSetPeriod
        LDR     a4, HW_Address
        ADR     ip, TimerRegTable
        ADD     a4, a4, #TIMER_BASE - PERIPHERAL_BASE

        ADR     a3, TimerPeriods
        STR     a2, [a3, a1, LSL #2]

        SUBS    a2, a2, #1
        LDRB    a3, [ip, a1, LSL #2]!   ; Get LOAD register, update ip
        LDRB    ip, [ip, #2]            ; Get CONTROL register
        BMI     %FT50

        STR     a2, [a4, a3]
        LDR     a1, [a4, ip]
        ORR     a1, a1, #&80            ; Enable, periodic
        STR     a1, [a4, ip]
        MOV     pc, lr

50      LDR     a1, [a4, ip]
        BIC     a1, a1, #&80            ; Disable
        STR     a1, [a4, ip]
        MOV     pc, lr

HAL_TimerPeriod
        ADR     a4, TimerPeriods
        LDR     a1, [a4, a1, LSL #2]
        MOV     pc, lr

HAL_CounterRead
        MOV     a1, #0
        ; Fall through

HAL_TimerReadCountdown
        LDR     a4, HW_Address
        ADR     ip, TimerRegTable+1     ; point ot VALUE
        ADD     a4, a4, #TIMER_BASE - PERIPHERAL_BASE

        LDRB    ip, [ip, a1, LSL #2]
        LDRH    a1, [a4, ip]

        MOV     pc, lr

TimerRegTable
        =       TIMER1LOAD,TIMER1VALUE,TIMER1CONTROL,TIMER1CLEAR
        =       TIMER2LOAD,TIMER2VALUE,TIMER2CONTROL,TIMER2CLEAR
        =       TIMER3LOAD,TIMER3VALUE,TIMER3CONTROL,TIMER3CLEAR
        =       TIMER4LOAD,TIMER4VALUE,TIMER4CONTROL,TIMER4CLEAR
        =       TIMER5LOAD,TIMER5VALUE,TIMER5CONTROL,TIMER5CLEAR

        MACRO
        Div5    $r1, $r2, $r3
; takes argument in $r1
; returns quotient in $r1, remainder in $r2
; $r3 corrupted
; cycles could be saved if only divide or remainder is required
        SUB     $r2, $r1, #5
        SUB     $r1, $r1, $r1, LSR #2
        ADD     $r1, $r1, $r1, LSR #4
        ADD     $r1, $r1, $r1, LSR #8
        ADD     $r1, $r1, $r1, LSR #16
        MOV     $r1, $r1, LSR #2
        ADD     $r3, $r1, $r1, LSL #2
        SUBS    $r2, $r2, $r3, LSL #0
        ADDPL   $r1, $r1, #1
        ADDMI   $r2, $r2, #5
        MEND

HAL_CounterPeriod
        LDR     a1, TimerPeriods + 0
        MOV     pc, lr

; If they want n ticks, wait until we've seen n+1 transitions of the clock.
HAL_CounterDelay
        LDR     a4, HW_Address
 [ TIMERRATE = 2000000
        MOV     a1, a1, LSL #1          ; convert to 2MHz ticks
 |
  [ TIMERRATE = 1600000
        MOV     a1, a1, LSL #3          ; *8
        Div5    a1, a2, a3              ; a1 := a1 / 5; a2 := a1 % 5; a3 temp
  |
   [ TIMERRATE = 1000000
        ; Do nowt
   |
        ! 1, "Can't cope with this timer rate"
   ]
  ]
 ]
        ADD     a4, a4, #TIMER_BASE - PERIPHERAL_BASE

        LDRH    a2, [a4, #TIMER1VALUE]

10      LDRH    a3, [a4, #TIMER1VALUE]
        SUBS    ip, a2, a3              ; ip = difference in ticks
        ADDLO   ip, a2, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        MOVLO   pc, lr
        LDRH    a2, [a4, #TIMER1VALUE]
        SUBS    ip, a3, a2              ; ip = difference in ticks
        ADDLO   ip, a3, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        BHS     %BT10
        MOV     pc, lr

HAL_IRQClear_Timer
        ADR     ip, TimerRegTable+3-4*4 ; point at CLEAR, offset for a1=timerno+4
        LDRB    ip, [ip, a1, LSL #2]
        ADD     a3, a3, #TIMER_BASE-PERIPHERAL_BASE
        STR     a1, [a3, ip]
        MOV     pc, lr

        END
