
;
; Colour LCD controller driving K6488L DSTN display
;

; mjs Oct 2000

; ------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.Video
        GET     hdr.Hardware

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Video_init
        EXPORT  HAL_VideoFlybackDevice
        EXPORT  HAL_Video_SetMode
        EXPORT  HAL_Video_WritePaletteEntry
        EXPORT  HAL_Video_WritePaletteEntries
        EXPORT  HAL_Video_ReadPaletteEntry
        EXPORT  HAL_Video_SetInterlace
        EXPORT  HAL_Video_SetBlank
        EXPORT  HAL_Video_SetPowerSave
        EXPORT  HAL_Video_UpdatePointer
        EXPORT  HAL_Video_SetDAG
        EXPORT  HAL_Video_VetMode
        EXPORT  HAL_Video_PixelFormats
        EXPORT  HAL_Video_Features
        EXPORT  HAL_Video_BufferAlignment
        EXPORT  HAL_Video_OutputFormat

        EXPORT  HAL_IRQClear_Video

        IMPORT  HAL_TimerSetPeriod
        IMPORT  HAL_CounterDelay

; ------------------------------------------------------------------------

;
; a minimal display for start-up display, specified as a VIDCList3
;
CLCD_boot_display
        &     3         ; format 3
        &     3         ; 8 bpp
; horizontal
        &     96        ; sync width
        &     46        ; back porch
        &     0         ; left border
        &     640       ; display size
        &     0         ; right border
        &     18        ; front porch
; vertical
        &     2         ; sync width
        &     32        ; back porch
        &     0         ; top border
        &     480       ; display size
        &     0         ; bottom border
        &     11        ; front porch
;
        &     25175     ; pixel rate (kHz)
        &     3         ; sync polarity
        &     -1        ; terminator


; -------------------------------------------------------------------------

Video_init ROUT
    Push     "a1-a4, ip, lr"

    ADR      a1, CLCD_boot_display
    BL       HAL_Video_SetMode

    MOV      a1, #0
    LDR      a2, =&00000000         ; assumed screen address for start-up
    BL       HAL_Video_SetDAG

        ADR     a1, Cursor                      ; ****HACK**** - find physical address
        MOV     a2, a1, LSR #10
        BIC     a2, a2, #3
        ADD     a2, a2, #&FB000000
        LDR     a2, [a2]
        MOV     a2, a2, LSR #12
        MOV     a2, a2, LSL #12
        MOV     a1, a1, LSL #20
        ORR     a2, a2, a1, LSR #20
        STR     a2, Cursor_PhysAddr

    Pull     "a1-a4, ip, pc"

; ------------------------------------------------------------------------

; in:  a1 = pixel rate (kHz)
; out: a1 = VIDDIV register value

; should probably do decent division

Video_ComputePCD
        Push     "v1-v5,v7,lr"

        MOV     v7, #-1         ; best source
        MOV     v5, #-1         ; best divisor (*2)
        MOV     v4, #&7FFFFFFF  ; corresponding absolute error
        MOV     v3, a1          ; desired frequency
        ADR     v2, PLLrates
        MOV     v1, #7

01      LDR     a2, [v2, v1, LSL #2]
        MOV     a1, v3
        MOV     a2, a2, LSL #1  ; we can divide by halves, so double source
        BL      Video_BestDivisor
        SUBS    a3, v3, a1
        RSBMI   a3, a3, #0
        CMP     a3, v4
        BGE     %FT40

        ; Got a good fit - check validity. Divisor must be between 2 and 255.5 (ie >3 and <512),
        ; or it can be 1.
        TEQ     a2, #2
        BEQ     %FT30

        CMP     a2, #3
        RSBHIS  ip, a2, #512
        BLS     %FT40

30      MOV     v7, v1
        MOV     v5, a2
        MOV     v4, a3

40      SUBS    v1, v1, #1
        BHS     %BT01

        CMP     v7, #-1
        MOVEQ   a1, #0
        Pull    "v1-v5,v7,pc",EQ

        MOV     a1, #VEN        ; Enable VCLK divider
        TEQ     v5, #2
        ORREQ   a1, a1, #V3SEL
        TST     v7, #4
        ORRNE   a1, a1, #V2SEL_trunk1
        AND     a2, v7, #3
        ORRNE   a1, a1, a2, LSL #V1SEL_shift
        ORREQ   a1, a1, a2, LSL #V0SEL_shift
        ORRS    a1, a1, v5, LSR #1
        ORRCS   a1, a1, #V5
        Pull    "v1-v5,v7,pc"


PLLrates
        DCD     PLL0_1/1000, PLL0_2/1000, PLL0_25/1000, PLL0_3/1000
        DCD     PLL1_1/1000, PLL1_2/1000, PLL1_25/1000, PLL1_3/1000

; in:  a1 = desired pixel rate
;      a2 = base clock rate
; out: a2 = divisor
;      a1 = achieved pixel rate
Video_BestDivisor
        MOV     a4, a2
        ADD     a3, a2, a1, LSR #1      ; so we round to nearest
        DivRem  a2, a3, a1, ip          ; a2 = a3 / a1 (divisor), a3 = a3 % a1
        DivRem  a1, a4, a2, ip          ; test divisor: a1 = a4 / a2, a4 = a4 % a2
        MOV     pc, lr

; ------------------------------------------------------------------------

; in: a1 -> VIDC List
;     a2 = Control entry
; out: if found: a2 = value, EQ
;      else:     a2 = 0,     NE
Video_ReadControl ROUT
        Push    "a3,lr"
        ADD     lr, a1, #VIDCList3_ControlList
10      LDR     a3, [lr], #8
        TEQ     a3, a2
        BEQ     %FT20
        CMP     a3, #-1
        BNE     %BT10
        MOV     a2, #0
        TEQ     a2, #1
        Pull    "a3,pc"         ; return with NE

20      LDR     a2, [lr, #-4]
        Pull    "a3,pc"         ; return with EQ


; ------------------------------------------------------------------------

;
;  uint HAL_VideoFlybackDevice(void)
;

HAL_VideoFlybackDevice

        MOV     a1, #38
        MOV     pc, lr

HAL_IRQClear_Video
        LDR     a4, HW_Address
        ADD     a4, a4, #REALITI_BASE-PERIPHERAL_BASE
        LDR     a1, [a4, #VIDEOATTRIBS]
        MOV     ip, #&AA
        BIC     a2, a1, #INT
        STR     ip, [a4, #REALITI_SWLOCK]
        STR     a2, [a4, #VIDEOATTRIBS]
        LDR     a3, [a4, #VIDEOATTRIBS]
        MOV     pc, lr

; -------------------------------------------------------------------------

;
;  void HAL_Video_SetMode(const void *VIDCList3)
;

  ! 0, "Video_SetMode does very little validation of VIDC3List"

HAL_Video_SetMode ROUT

        Push    "v1-v5,v7,lr"

        LDR     ip, HW_Address
        MOV     v2, #&AA
        ADD     v3, ip, #SYSCON_BASE-PERIPHERAL_BASE
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE

        MOV     a2, #ControlList_HClockSelect
        BL      Video_ReadControl
        MOVNE   v7, #0                                  ; internal clock
        MOVEQ   v7, #1                                  ; external clock

        LDR     v5, [a1, #VIDCList3_PixelDepth]         ; v5 = pixel depth (3 or 4)
        SUB     v5, v5, #3                              ; v5 = log2(bytes per pixel)
;
; horizontal timing
        LDR     a3, [a1, #VIDCList3_HorizFrontPorch]
        LDR     a4, [a1, #VIDCList3_HorizRightBorder]
        ADD     a3, a3, a4                              ; a3 = front porch
        LDR     a4, [a1, #VIDCList3_HorizDisplaySize]   ; a4 = display
        LDR     lr, [a1, #VIDCList3_HorizLeftBorder]
        LDR     a2, [a1, #VIDCList3_HorizBackPorch]
        ADD     a2, a2, lr                              ; a2 = back porch
        LDR     lr, [a1, #VIDCList3_HorizSyncWidth]     ; lr = sync

        ADD     v1, a3, a4
        ADD     v1, v1, a2
        ADD     v1, v1, lr                              ; v1 = bp+ds+fp+sy = total

        SUB     v1, v1, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     v1, [ip, #HCLKSTOTAL]

        MOV     a3, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     a3, [ip, #LINECARRY]

        SUB     v4, v1, lr                              ; v4 = total-sync = sync end
        ADD     lr, v4, #1
        MOV     lr, lr, LSL #16                         ; fudge - hsync moved left one.
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HSYNCSTRTSTOP]

        SUB     v1, v4, a2
        SUB     lr, v1, a4
        ORR     lr, v1, lr, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HACTIVESTRTSTOP]
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HBLANKSTRTSTOP]

        MOV     a4, a4, LSL v5
        ADD     a4, a4, #3
        MOV     a4, a4, LSR #2
        STR     a4, [ip, #VLINESTEP]
        SUB     a4, a4, #1
        STR     a4, [ip, #LINELENGTH]

;
; vertical timing
        LDR     a3, [a1, #VIDCList3_VertiFrontPorch]
        LDR     a4, [a1, #VIDCList3_VertiBottomBorder]
        ADD     a3, a3, a4                              ; a3 = front porch
        LDR     a4, [a1, #VIDCList3_VertiDisplaySize]   ; a4 = display
        LDR     lr, [a1, #VIDCList3_VertiTopBorder]
        LDR     a2, [a1, #VIDCList3_VertiBackPorch]
        ADD     a2, a2, lr                              ; a2 = back porch
        LDR     lr, [a1, #VIDCList3_VertiSyncWidth]     ; lr = sync

        ADD     v1, a3, a4
        ADD     v1, v1, a2
        ADD     v1, v1, lr

        SUB     v1, v1, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     v1, [ip, #VLINESTOTAL]

        SUB     v4, v1, lr
        ORR     lr, v1, v4, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VSYNCSTRTSTOP]

        SUB     v1, v4, a2
        SUB     lr, v1, a4
        ORR     lr, v1, lr, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VACTIVESTRTSTOP]
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VBLANKSTRTSTOP]

        STR     a4, [ip, #SCRNLINES]

        TEQ     v5, #1
        LDREQ   a2, =2_1100000001100            ; 5-5-5 16bpp, mapped to 18bpp
        LDRNE   a2, =2_0000000001010            ; 8bpp through LUT, mapped to 18bpp
        STR     a2, [ip, #PIXELMODE]

        LDR     a2, =INTEN+DATEN+SYNCEN+EN
        TEQ     v7, #0
        ORREQ   a2, a2, #PCLKEN
        LDR     a3, [a1, #VIDCList3_SyncPol]
        TST     a3, #SyncPol_InvertHSync
        ORREQ   a2, a2, #HSPOL
        TST     a3, #SyncPol_InvertVSync
        ORREQ   a2, a2, #VCPOL
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     a2, [ip, #VIDEOATTRIBS]

        LDR     a1, [a1, #VIDCList3_PixelRate]
        BL      Video_ComputePCD
        STR     v2, [v3, #SYSLOCK]
        STR     a1, [v3, #VIDDIV]
        LDR     a1, [v3, #RSTCR]
        TEQ     v7, #0
        ORRNE   a1, a1, #&80000                 ; external video clock
        BICEQ   a1, a1, #&80000                 ; internal video clock
        STR     v2, [v3, #SYSLOCK]
        STR     a1, [v3, #RSTCR]

        Pull    "v1-v5,v7,pc"

; -------------------------------------------------------------------------

;
; void HAL_Video_WritePaletteEntry(uint type, uint pcolour, uint index)
;

HAL_Video_WritePaletteEntry ROUT

        TEQ     a1, #2
        BEQ     WritePointerPaletteEntry

        TEQ     a1, #0                  ; only normal colours for now
        MOVNE   pc, lr

        ADR     ip, Palette
        MOV     a2, a2, LSR #8
        STR     a2, [ip, a3, LSL #2]
        B       UpdatePalette

WritePointerPaletteEntry
        TEQ     a3, #1
        TEQNE   a3, #2
        MOVNE   pc, lr
        LDR     ip, HW_Address
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE
        ADD     ip, ip, #CURSORCOLOR1 - 4
        ADD     ip, ip, a3, LSL #2
        MOV     a2, a2, LSR #8
        STR     a2, [ip]
        MOV     pc, lr

; -------------------------------------------------------------------------

;
; void HAL_Video_WritePaletteEntries(uint type, const uint *pcolours,
;                                    uint index, uint Nentries)
;

HAL_Video_WritePaletteEntries ROUT

        TEQ     a1, #0                ; do standard efficiently
        BNE     WriteOtherPaletteEntries

        ADR     ip, Palette
        ADD     ip, ip, a3, LSL #2
10      LDR     a1, [a2], #4
        SUBS    a4, a4, #1
        MOV     a1, a1, LSR #8        ; 00BBGGRR
        STR     a1, [ip], #4
        BNE     %BT10

UpdatePalette
        Push    "v1-v3,lr"
        LDR     lr, HW_Address
        ADR     ip, Palette
        ADD     v1, ip, #256*4
        ADD     lr, lr, #REALITI_BASE-PERIPHERAL_BASE
        MRS     v3, CPSR
        ORR     a1, v3, #I32_bit
        MSR     CPSR_c, a1
05      LDR     v2, [lr, #LUTCONT]
        ADD     lr, lr, #LUT
10      LDMIA   ip!, {a1-a4}
        STMIA   lr!, {a1-a4}
        TEQ     ip, v1
        BNE     %BT10
        SUB     lr, lr, #LUT+4*256
        SUB     ip, ip, #4*256
        LDR     a3, [lr, #LUTCONT]
        EOR     a2, v2, a3
        TST     a2, #SSTAT              ; unwanted bank switch? do it again
        BNE     %BT05
        TST     a3, #SSTAT
        BICNE   a3, a3, #SWTCH
        ORREQ   a3, a3, #SWTCH
        STR     a3, [lr, #LUTCONT]
        MSR     CPSR_c, v3
        Pull    "v1-v3,pc"

WriteOtherPaletteEntries ROUT
        Push    "v1-v4,lr"
        MOV     v1, a1
        MOV     v2, a2
        MOV     v3, a3
        MOV     v4, a4
10      MOV     a1, v1
        LDR     a2, [v2], #4
        MOV     a3, v3
        BL      HAL_Video_WritePaletteEntry
        ADD     v3, v3, #1
        SUBS    v4, v4, #1
        BNE     %BT10
        Pull    "v1-v4,pc"

; -------------------------------------------------------------------------

;
; uint HAL_Video_ReadPaletteEntry(uint type, uint pcolour, uint index)
;

; we'll pretend we have border, pointer entries of same form as normal entries

HAL_Video_ReadPaletteEntry ROUT

        TEQ     a1, #0
        BICEQ   a1, a2, #&000000FF      ; BBGGRR00
        MOVEQ   pc, lr

        TEQ     a1, #2                  ; anything else apart from the pointer is black
        MOVNE   a1, #0
        MOVNE   pc, lr

ReadPointerPaletteEntry
        LDR     ip, HW_Address
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE
        TEQ     a3, #1
        LDREQ   a1, [ip, #CURSORCOLOR1]
        LDRNE   a1, [ip, #CURSORCOLOR2]
        MOV     a1, a1, LSL #8
        MOV     pc, lr

; -------------------------------------------------------------------------

;
; void HAL_Video_SetInterlace(uint interlace)
;

HAL_Video_SetInterlace ROUT

        MOV     pc, lr       ; not implemented

; -------------------------------------------------------------------------

;
; void HAL_Video_SetBlank(uint blank, uint DPMS)
;

        ! 0, "HAL_Video_SetBlank not implemented"

HAL_Video_SetBlank

        MOV     pc, lr       ; not implemented, at least for now

; -------------------------------------------------------------------------

;
; void HAL_Video_SetPowerSave(uint powersave)
;

HAL_Video_SetPowerSave ROUT

        ! 0, "HAL_Video_SetPowerSave not implemented"

        MOV     pc, lr       ; not implemented

; -------------------------------------------------------------------------

; void HAL_Video_UpdatePointer(uint flags, int x, int y, const shape_t *shape)
;
; Update the displayed position of the current pointer shape (or turn
; shape off)
;
; HAL code may need to take note of shape updated flag, and make its
; own new copies if true. This is to handle cases like dual scan LCD
; pointer, which typically needs two or more shapes buffers for the
; hardware. This work should _only_ be done when the updated flag
; is true, or possibly because provoked by clipping requirements.
; A simple HAL, using the kernel shape buffer directly, may be able to
; ignore the updated flag.
;
; flags:
;   bit 0  = pointer display enable (0=off, 1=on)
;   bit 1  = pointer shape update (0=no change, 1=updated)
;   bits 2..31 reserved (0)
; xpos = x position of top left of pointer (xpos = 0 for left of display)
; ypos = y position of top left of pointer (ypos = 0 for top of display)
; shape points to shape_t descriptor block:
;   typedef struct shape_t
;   {
;     uint8   width;      /* unpadded width in bytes (see notes) */
;     uint8   height;     /* in pixels */
;     uint8   padding[2]; /* 2 bytes of padding for field alignment */
;     void   *buffLA;     /* logical address of buffer holding pixel data */
;     void   *buffPA;     /* corresponding physical address of buffer */
;   }
;
; Notes:
; 1) if flags bit 0 is 0 (pointer off), x, y, shape are undefined
; 2) the shape data from RISC OS is always padded with transparent pixels
;    on the rhs, to a width of 32 pixels (8 bytes)
; 3) pointer clipping is the responsibility of the HAL (eg. may be able to
;    allow display of pointer in border region on some h/w)
; 4) buffer for pixel data is aligned to a multiple of 256 bytes or better
;
; This call is made by the OS at a time to allow smoothly displayed changes
; (on a VSync)

HAL_Video_UpdatePointer ROUT

        Push    "v1-v5,v7,lr"

        LDR     ip, HW_Address
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE

        TST     a1, #1
        BEQ     %FT90           ; pointer off

        LDRB    v5, [a4, #1]                    ; v5 = height
        LDR     v7, [a4, #4]                    ; v7 = logical address

        CMP     v5, #32                         ; clip height to 32
        MOVGT   v5, #32

        TST     a1, #2
        BEQ     %FT40                           ; no need to update shape

        ADR     a1, Cursor
        ADR     a4, cursor_reverse
        MOV     lr, v5, LSL #3                  ; height -> bytes
20      LDRB    v4, [v7], #1
        SUBS    lr, lr, #1
        LDRB    v4, [a4, v4]                    ; munge the data
        STRB    v4, [a1], #1
        BNE     %BT20

40      LDR     v1, [ip, #HACTIVESTRTSTOP]
        LDR     v2, [ip, #VACTIVESTRTSTOP]
        MOV     v3, v1, LSR #16                 ; v3 = X end
        MOV     v4, v2, LSR #16                 ; v4 = Y end
        MOV     v1, v1, LSL #16
        MOV     v2, v2, LSL #16
        MOV     v1, v1, LSR #16                 ; v1 = X start
        MOV     v2, v2, LSR #16                 ; v2 = Y start
        SUB     a2, v1, a2                      ; a2 = X pos
        SUB     a3, v2, a3                      ; a3 = Y pos

        LDR     v7, Cursor_PhysAddr

        ADD     lr, v1, #32
        CMP     a2, lr
        BGE     %FT90                           ; too far left - vanish
        CMP     a2, v3
        BLE     %FT90                           ; too far right - vanish

        SUBS    lr, a3, v2                      ; if off the top
        SUBGT   v5, v5, lr                      ; lop some height off
        ADDGT   v7, v7, lr, LSL #3              ; and start lower
        MOVGT   a3, v2
        CMP     v5, #1
        BLT     %FT90                           ; no height left - vanish
        CMP     a3, v4
        BLE     %FT90                           ; off the bottom - vanish

        STR     v7, [ip, #CURSORADRSTART]
        STR     v7, [ip, #CURSORADRRESET]

        SUB     lr, v5, #1
        MOV     lr, lr, LSL #2                  ; CLINS
        ORR     lr, lr, #2_01                   ; CWID = 32
        ORR     lr, lr, #2_01:SHL:8             ; CSTEP = 32
        STR     lr, [ip, #CURSORSIZE]

        LDR     lr, [ip, #PIXELMODE]            ; fudge horizontal position based
        AND     lr, lr, #7                      ; on screen depth. WHY?
        TEQ     lr, #4
        SUBEQ   a2, a2, #2
        SUBNE   a2, a2, #3

        MOV     a2, a2, LSL #21
        MOV     a3, a3, LSL #21
        MOV     lr, a2, LSR #21
        ORR     lr, lr, a3, LSR #5
        ORR     lr, lr, #1:SHL:15
        STR     lr, [ip, #CURSORXYLOC]

        Pull    "v1-v5,v7, pc"

90
        MOV     a1, #0
        STR     a1, [ip, #CURSORXYLOC]
        Pull    "v1-v5,v7, pc"

        GBLA    tbindex
        GBLA    px0
        GBLA    px1
        GBLA    px2
        GBLA    px3

        MACRO
$px     cursor_col_conv
 [ $px = 1 :LOR: $px = 2
$px     SETA    $px + 1
 ]
        MEND

cursor_reverse
        WHILE   tbindex < 256
px0     SETA    tbindex:AND:&03
px1     SETA    (tbindex:SHR:2):AND:&03
px2     SETA    (tbindex:SHR:4):AND:&03
px3     SETA    (tbindex:SHR:6):AND:&03
px0     cursor_col_conv
px1     cursor_col_conv
px2     cursor_col_conv
px3     cursor_col_conv
        =       (px0:SHL:6):OR:(px1:SHL:4):OR:(px2:SHL:2):OR:px3
tbindex SETA    tbindex + 1
        WEND

; -------------------------------------------------------------------------

;
; void HAL_Video_SetDAG(uint DAG, uint paddr)
;

HAL_Video_SetDAG ROUT

        TEQ     a1, #0                ; ignore calls except DAG=0 (start of display)
        MOVNE   pc, lr

        LDR     ip, HW_Address
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE

        BIC     a2, a2, #3          ; word aligned
        STR     a2, [ip, #VIDSCRNPAGE]

        MOV     pc, lr

; -------------------------------------------------------------------------

;
; int HAL_Video_VetMode(const void *VIDClist, const void *workspace)
;

HAL_Video_VetMode ROUT

        MOV   r0, #0    ; do nothing for now
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_Features(void)
;
; returns a flags word:
;    bit 0     h/w scroll is supported
;    bit 1     h/w pointer is supported
;    bit 2     interlace is supported with progressive framestore
;    other bits reserved (returned as 0)

HAL_Video_Features ROUT
        MOV   a1, #0     ; no h/w scroll, pointer or interlace
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_PixelFormats(void)
;
;
; returns flags word:
;    bit 0     1 bpp is supported
;    bit 1     2 bpp is supported
;    bit 2     4 bpp is supported
;    bit 3     8 bpp is supported
;    bit 4    16 bpp is supported
;    bit 5    32 bpp is supported
;    other bits reserved (returned as 0)
;    bits 0-5 refer to support with standard RO pixel layout (little endian
;    packing for 1,2,4 bpp, 5-5-5 RGB for 16 bpp, etc.)
;    other formats may be introduced when/if RO supports them

HAL_Video_PixelFormats ROUT
        MOV   a1, #2_011000   ; 8 and 16bpp only
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_BufferAlignment(void)
;
; returns the required alignment for the framestore buffer, in bytes
; (expected to be a power of 2)

HAL_Video_BufferAlignment ROUT
        MOV   a1, #4           ; align to 4 bytes
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_OutputFormat(void)
;
; returns current video output format
;      0 = analogue (or 'normal', unspecified)
;      1 = 16-bit non-multiplexed RGB 5-6-5 (Chrontel 7003 format 0)
;     ...
;     10 = Chrontel 7003 format 9
;  >= 11 reserved
;

HAL_Video_OutputFormat
        MOV   a1, #4      ; 15-bit RGB 5-5-5 (Chrontel 7003 format 3)
        MOV   pc, lr

; -------------------------------------------------------------------------



        END
