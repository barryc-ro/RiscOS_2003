
;
; Colour LCD controller driving K6488L DSTN display
;

; mjs Oct 2000

; ------------------------------------------------------------------------

        GBLL    ExtClk
ExtClk  SETL    {TRUE}

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.Video
        GET     hdr.Hardware

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Video_init
        EXPORT  HAL_VideoFlybackDevice
        EXPORT  HAL_Video_SetMode
        EXPORT  HAL_Video_WritePaletteEntry
        EXPORT  HAL_Video_WritePaletteEntries
        EXPORT  HAL_Video_ReadPaletteEntry
        EXPORT  HAL_Video_SetInterlace
        EXPORT  HAL_Video_SetBlank
        EXPORT  HAL_Video_SetPowerSave
        EXPORT  HAL_Video_UpdatePointer
        EXPORT  HAL_Video_SetDAG
        EXPORT  HAL_Video_VetMode
        EXPORT  HAL_Video_PixelFormats
        EXPORT  HAL_Video_Features
        EXPORT  HAL_Video_BufferAlignment
        EXPORT  HAL_Video_OutputFormat

        EXPORT  HAL_IRQClear_Video

        IMPORT  HAL_TimerSetPeriod
        IMPORT  HAL_CounterDelay

; ------------------------------------------------------------------------

Video_init ROUT
    Push     "a1-a4, ip, lr"

    ADR      a1, CLCD_boot_display
    BL       HAL_Video_SetMode

    MOV      a1, #0
    LDR      a2, =&00000000         ; assumed screen address for start-up
    BL       HAL_Video_SetDAG

    Pull     "a1-a4, ip, pc"

; ------------------------------------------------------------------------

; in:  a1 = pixel rate (kHz)
; out: a1 = VIDDIV register value

; should probably do decent division

Video_ComputePCD

    ! 0, "naff implementation of Video_ComputePCD"

        Push     "v1-v6,lr"

        MOV     v6, #-1         ; best source
        MOV     v5, #-1         ; best divisor (*2)
        MOV     v4, #&7FFFFFFF  ; corresponding absolute error
        MOV     v3, a1          ; desired frequency
        ADR     v2, PLLrates
        MOV     v1, #7

01      LDR     a2, [v2, v1, LSL #2]
        MOV     a1, v3
        MOV     a2, a2, LSL #1  ; we can divide by halves, so double source
        BL      Video_BestDivisor
        SUBS    a3, v3, a1
        RSBMI   a3, a3, #0
        CMP     a3, v4
        BGE     %FT40

        ; Got a good fit - check validity. Divisor must be between 2 and 255.5 (ie >3 and <512),
        ; or it can be 1.
        TEQ     a2, #2
        BEQ     %FT30

        CMP     a2, #3
        RSBHIS  ip, a2, #512
        BLS     %FT40

30      MOV     v6, v1
        MOV     v5, a2
        MOV     v4, a3

40      SUBS    v1, v1, #1
        BHS     %BT01

        CMP     v6, #-1
        MOVEQ   a1, #0
        Pull    "v1-v6,pc",EQ

        MOV     a1, #VEN        ; Enable VCLK divider
        TEQ     v5, #2
        ORREQ   a1, a1, #V3SEL
        TST     v6, #4
        ORRNE   a1, a1, #V2SEL_trunk1
        AND     a2, v6, #3
        ORRNE   a1, a1, a2, LSL #V1SEL_shift
        ORREQ   a1, a1, a2, LSL #V0SEL_shift
        ORRS    a1, a1, v5, LSR #1
        ORRCS   a1, a1, #V5
        Pull    "v1-v6,pc"


PLLrates
        DCD     PLL0_1/1000, PLL0_2/1000, PLL0_25/1000, PLL0_3/1000
        DCD     PLL1_1/1000, PLL1_2/1000, PLL1_25/1000, PLL1_3/1000

; in:  a1 = desired pixel rate
;      a2 = base clock rate
; out: a2 = divisor
;      a1 = achieved pixel rate
Video_BestDivisor
        MOV     a4, a2
        ADD     a3, a2, a1, LSR #1      ; so we round to nearest
        DivRem  a2, a3, a1, ip          ; a2 = a3 / a1 (divisor), a3 = a3 % a1
        DivRem  a1, a4, a2, ip          ; test divisor: a1 = a4 / a2, a4 = a4 % a2
        MOV     pc, lr

; ------------------------------------------------------------------------

;
;  uint HAL_VideoFlybackDevice(void)
;

HAL_VideoFlybackDevice

        MOV     a1, #38
        MOV     pc, lr

HAL_IRQClear_Video
        LDR     a4, HW_Address
        ADD     a4, a4, #REALITI_BASE-PERIPHERAL_BASE
        LDR     a1, [a4, #VIDEOATTRIBS]
        MOV     ip, #&AA
        BIC     a2, a1, #INT
        STR     ip, [a4, #REALITI_SWLOCK]
        STR     a2, [a4, #VIDEOATTRIBS]
        LDR     a3, [a4, #VIDEOATTRIBS]
        MOV     pc, lr

; -------------------------------------------------------------------------

;
;  void HAL_Video_SetMode(const void *VIDCList3)
;

  ! 0, "Video_SetMode does very little validation of VIDC3List"

HAL_Video_SetMode ROUT

        Push    "v1-v5,lr"

        LDR     ip, HW_Address
        MOV     v2, #&AA
        ADD     v3, ip, #SYSCON_BASE-PERIPHERAL_BASE
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE

        LDR     v5, [a1, #VIDCList3_PixelDepth]         ; v5 = pixel depth (3 or 4)
        SUB     v5, v5, #3                              ; v5 = log2(bytes per pixel)
;
; horizontal timing
        LDR     a3, [a1, #VIDCList3_HorizFrontPorch]
        LDR     a4, [a1, #VIDCList3_HorizRightBorder]
        ADD     a3, a3, a4                              ; a3 = front porch
        LDR     a4, [a1, #VIDCList3_HorizDisplaySize]   ; a4 = display
        LDR     lr, [a1, #VIDCList3_HorizLeftBorder]
        LDR     a2, [a1, #VIDCList3_HorizBackPorch]
        ADD     a2, a2, lr                              ; a2 = back porch
        LDR     lr, [a1, #VIDCList3_HorizSyncWidth]     ; lr = sync

        ADD     v1, a3, a4
        ADD     v1, v1, a2
        ADD     v1, v1, lr                              ; v1 = bp+ds+fp+sy = total

        SUB     v1, v1, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     v1, [ip, #HCLKSTOTAL]

        MOV     a3, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     a3, [ip, #LINECARRY]

        SUB     v4, v1, lr                              ; v4 = total-sync = sync end
        ADD     lr, v4, #1
        MOV     lr, lr, LSL #16                         ; fudge - hsync moved left one.
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HSYNCSTRTSTOP]

        SUB     v1, v4, a2
        SUB     lr, v1, a4
        ORR     lr, v1, lr, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HACTIVESTRTSTOP]
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #HBLANKSTRTSTOP]

        MOV     a4, a4, LSL v5
        ADD     a4, a4, #3
        MOV     a4, a4, LSR #2
        STR     a4, [ip, #VLINESTEP]
        SUB     a4, a4, #1
        STR     a4, [ip, #LINELENGTH]

;
; vertical timing
        LDR     a3, [a1, #VIDCList3_VertiFrontPorch]
        LDR     a4, [a1, #VIDCList3_VertiBottomBorder]
        ADD     a3, a3, a4                              ; a3 = front porch
        LDR     a4, [a1, #VIDCList3_VertiDisplaySize]   ; a4 = display
        LDR     lr, [a1, #VIDCList3_VertiTopBorder]
        LDR     a2, [a1, #VIDCList3_VertiBackPorch]
        ADD     a2, a2, lr                              ; a2 = back porch
        LDR     lr, [a1, #VIDCList3_VertiSyncWidth]     ; lr = sync

        ADD     v1, a3, a4
        ADD     v1, v1, a2
        ADD     v1, v1, lr

        SUB     v1, v1, #1
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     v1, [ip, #VLINESTOTAL]

        SUB     v4, v1, lr
        ORR     lr, v1, v4, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VSYNCSTRTSTOP]

        SUB     v1, v4, a2
        SUB     lr, v1, a4
        ORR     lr, v1, lr, LSL #16
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VACTIVESTRTSTOP]
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     lr, [ip, #VBLANKSTRTSTOP]

        STR     a4, [ip, #SCRNLINES]

        TEQ     v5, #1
        LDREQ   a2, =2_1100000001100            ; 5-5-5 16bpp, mapped to 18bpp
        LDRNE   a2, =2_0000000001010            ; 8bpp through LUT, mapped to 18bpp
        STR     a2, [ip, #PIXELMODE]

        LDR     a2, =INTEN+DATEN+SYNCEN+PCLKEN+EN
 [ ExtClk
        BIC     a2, a2, #PCLKEN
 ]
        LDR     a3, [a1, #VIDCList3_SyncPol]
        TST     a3, #SyncPol_InvertHSync
        ORREQ   a2, a2, #HSPOL
        TST     a3, #SyncPol_InvertVSync
        ORREQ   a2, a2, #VCPOL
        STR     v2, [ip, #REALITI_SWLOCK]
        STR     a2, [ip, #VIDEOATTRIBS]

        LDR     a1, [a1, #VIDCList3_PixelRate]
        BL      Video_ComputePCD
        STR     v2, [v3, #SYSLOCK]
        STR     a1, [v3, #VIDDIV]
        LDR     a1, [v3, #RSTCR]
 [ ExtClk
        ORR     a1, a1, #&80000                 ; set EXVC - external video clock
 |
        BIC     a1, a1, #&80000                 ; set EXVC - external video clock
 ]
        STR     v2, [v3, #SYSLOCK]
        STR     a1, [v3, #RSTCR]

        Pull    "v1-v5,pc"

; -------------------------------------------------------------------------

;
; void HAL_Video_WritePaletteEntry(uint type, uint pcolour, uint index)
;

HAL_Video_WritePaletteEntry ROUT

        TEQ     a1, #0                  ; only normal colours for now
        MOVNE   pc, lr

        ADR     ip, Palette
        MOV     a2, a2, LSR #8
        STR     a2, [ip, a3, LSL #2]
        B       UpdatePalette

; -------------------------------------------------------------------------

;
; void HAL_Video_WritePaletteEntries(uint type, const uint *pcolours,
;                                    uint index, uint Nentries)
;

HAL_Video_WritePaletteEntries ROUT

        TEQ     a1, #0                ; ignore border, pointer (types 1,2)
        MOVNE   pc, lr

        ADR     ip, Palette
        ADD     ip, ip, a3, LSL #2
10      LDR     a1, [a2], #4
        SUBS    a4, a4, #1
        MOV     a1, a1, LSR #8        ; 00BBGGRR
        STR     a1, [ip], #4
        BNE     %BT10

UpdatePalette
        Push    "v1-v3,lr"
        LDR     lr, HW_Address
        ADR     ip, Palette
        ADD     v1, ip, #256*4
        ADD     lr, lr, #REALITI_BASE-PERIPHERAL_BASE
        MRS     v3, CPSR
        ORR     a1, v3, #I32_bit
        MSR     CPSR_c, a1
05      LDR     v2, [lr, #LUTCONT]
        ADD     lr, lr, #LUT
10      LDMIA   ip!, {a1-a4}
        STMIA   lr!, {a1-a4}
        CMP     ip, v1
        BNE     %BT10
        SUB     lr, lr, #LUT+4*256
        SUB     ip, ip, #4*256
        LDR     a3, [lr, #LUTCONT]
        EOR     a2, v2, a3
        TST     a2, #SSTAT              ; unwanted bank switch? do it again
        BNE     %BT05
        TST     a3, #SSTAT
        BICNE   a3, a3, #SWTCH
        ORREQ   a3, a3, #SWTCH
        STR     a3, [lr, #LUTCONT]
        MSR     CPSR_c, v3
        Pull    "v1-v3,pc"

; -------------------------------------------------------------------------

;
; uint HAL_Video_ReadPaletteEntry(uint type, uint pcolour, uint index)
;

; we'll pretend we have border, pointer entries of same form as normal entries

HAL_Video_ReadPaletteEntry ROUT

        BIC     a1, a2, #&000000FF    ; BBGGRR00

        MOV     pc, lr

; -------------------------------------------------------------------------

;
; void HAL_Video_SetInterlace(uint interlace)
;

HAL_Video_SetInterlace ROUT

        MOV     pc, lr       ; not implemented

; -------------------------------------------------------------------------

;
; void HAL_Video_SetBlank(uint blank, uint DPMS)
;

        ! 0, "HAL_Video_SetBlank not implemented"

HAL_Video_SetBlank

        MOV     pc, lr       ; not implemented, at least for now

; -------------------------------------------------------------------------

;
; void HAL_Video_SetPowerSave(uint powersave)
;

HAL_Video_SetPowerSave ROUT

        ! 0, "HAL_Video_SetPowerSave not implemented"

        MOV     pc, lr       ; not implemented

; -------------------------------------------------------------------------

;
; void HAL_Video_UpdatePointer(uint flags, int x, int y, const shape_t *shape)
;

HAL_Video_UpdatePointer ROUT

        MOV     pc, lr       ; not implemented, we have no h/w pointer

; -------------------------------------------------------------------------

;
; void HAL_Video_SetDAG(uint DAG, uint paddr)
;

HAL_Video_SetDAG ROUT

        TEQ     a1, #0                ; ignore calls except DAG=0 (start of display)
        MOVNE   pc, lr

        LDR     ip, HW_Address
        ADD     ip, ip, #REALITI_BASE-PERIPHERAL_BASE

        BIC     a2, a2, #3          ; word aligned
        STR     a2, [ip, #VIDSCRNPAGE]

        MOV     pc, lr

; -------------------------------------------------------------------------

;
; int HAL_Video_VetMode(const void *VIDClist, const void *workspace)
;

HAL_Video_VetMode ROUT

        MOV   r0, #0    ; do nothing for now
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_Features(void)
;
; returns a flags word:
;    bit 0     h/w scroll is supported
;    bit 1     h/w pointer is supported
;    bit 2     interlace is supported with progressive framestore
;    other bits reserved (returned as 0)

HAL_Video_Features ROUT
        MOV   a1, #0     ; no h/w scroll, pointer or interlace
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_PixelFormats(void)
;
;
; returns flags word:
;    bit 0     1 bpp is supported
;    bit 1     2 bpp is supported
;    bit 2     4 bpp is supported
;    bit 3     8 bpp is supported
;    bit 4    16 bpp is supported
;    bit 5    32 bpp is supported
;    other bits reserved (returned as 0)
;    bits 0-5 refer to support with standard RO pixel layout (little endian
;    packing for 1,2,4 bpp, 5-5-5 RGB for 16 bpp, etc.)
;    other formats may be introduced when/if RO supports them

HAL_Video_PixelFormats ROUT
        MOV   a1, #2_011000   ; 8 and 16bpp only
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_BufferAlignment(void)
;
; returns the required alignment for the framestore buffer, in bytes
; (expected to be a power of 2)

HAL_Video_BufferAlignment ROUT
        MOV   a1, #4           ; align to 4 bytes
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_Video_OutputFormat(void)
;
; returns current video output format
;      0 = analogue (or 'normal', unspecified)
;      1 = 16-bit non-multiplexed RGB 5-6-5 (Chrontel 7003 format 0)
;     ...
;     10 = Chrontel 7003 format 9
;  >= 11 reserved
;

HAL_Video_OutputFormat
        MOV   a1, #4      ; 15-bit RGB 5-5-5 (Chrontel 7003 format 3)
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; a minimal display for start-up display, specified as a VIDCList3
;
CLCD_boot_display
        &     3         ; format 3
        &     3         ; 8 bpp
; horizontal
        &     96        ; sync width
        &     46        ; back porch
        &     0         ; left border
        &     640       ; display size
        &     0         ; right border
        &     18        ; front porch
; vertical
        &     2         ; sync width
        &     32        ; back porch
        &     0         ; top border
        &     480       ; display size
        &     0         ; bottom border
        &     11        ; front porch
;
        &     25175     ; pixel rate (kHz)
        &     3         ; sync polarity
        &     -1        ; terminator


; -------------------------------------------------------------------------

        END
