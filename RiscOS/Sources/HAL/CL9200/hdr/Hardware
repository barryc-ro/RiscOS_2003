; Clocking rates

PLL0    *       368640000       ; 368.64MHz
PLL1    *       PLL0/96*100     ; 384MHz

PLL0_1  *       PLL0            ; 368.64MHz
PLL0_2  *       PLL0/2          ; 184.32MHz
PLL0_25 *       PLL0*2/5        ; 147.456MHz
PLL0_3  *       PLL0/3          ; 122.88MHz
PLL1_1  *       PLL1            ; 384MHz
PLL1_2  *       PLL1/2          ; 192MHz
PLL1_25 *       PLL1*2/5        ; 153.6Hz
PLL1_3  *       PLL1/3          ; 128MHz

;FCLK    *       PLL1_2          ; 128MHz
;HCLK    *       FCLK/4          ; 32MHz

FCLK    *       PLL1_25         ; 153.6MHz
HCLK    *       FCLK/3          ; 51.2MHz

TIMERRATE *     HCLK/32         ; 1.6MHz

; ROM timings
; -----------
SYS_ROM_SPEED * 120             ; 120ns
SYS_ROM_BURST * 0               ; no burst
SYS_ROM_TURN  * 28              ; 28ns

SYS_ROM_WST1  * (HCLK/1000)*SYS_ROM_SPEED/1000000 ; = number of cycles, rounded down. Controller adds 1 for us
SYS_ROM_IDCY  * (HCLK/1000)*SYS_ROM_TURN/1000000
 [ SYS_ROM_BURST = 0
SYS_ROM_WST2  * SYS_ROM_WST1
 |
SYS_ROM_WST2  * (HCLK/1000)*SYS_ROM_BURST/1000000 + 1 ; (controller doesn't add 1)
 ]

 [ :LNOT::DEF:ShowROMTimings
                GBLL    ShowROMTimings
ShowROMTimings  SETL    {FALSE}
 ]

 [ ShowROMTimings
        ! 0, "SYS_ROM_WST1 = &":CC::STR:SYS_ROM_WST1
        ! 0, "SYS_ROM_WST2 = &":CC::STR:SYS_ROM_WST2
        ! 0, "SYS_ROM_IDCY = &":CC::STR:SYS_ROM_IDCY
        ! 0, "Access time  = &":CC:(:STR:((SYS_ROM_WST1+1)*1000000/(HCLK/1000))):CC:"ns"
 [ SYS_ROM_BURST <> 0
        ! 0, "Burst time   = &":CC:(:STR:(SYS_ROM_WST2*1000000/(HCLK/1000))):CC:"ns"
 ]
        ! 0, "Turnaround   = &":CC:(:STR:((SYS_ROM_IDCY+1)*1000000/(HCLK/1000))):CC:"ns"
 ]

 [ SYS_ROM_WST1 > 31 :LOR: SYS_ROM_WST2 > 31 :LOR: SYS_ROM_IDCY > 15
   ! 1, "ROM too slow"
 ]
                GBLA SYS_ROM_CFG
;                      AT  B E              W      IDCY
;                        MW W E        WST2- WST1-
SYS_ROM_CFG     SETA 2_00100011000000000000010000000000
 [ SYS_ROM_BURST <> 0
SYS_ROM_CFG     SETA SYS_ROM_CFG :OR: (1:SHL:27)
 ]
SYS_ROM_CFG     SETA SYS_ROM_CFG :OR: (SYS_ROM_WST1:SHL:5) :OR: (SYS_ROM_WST2:SHL:11) :OR: (SYS_ROM_IDCY)

; Processor timings
; -----------------
; Note that F3SEL is not set here
        GBLA    FHDIV_VAL
 [ FCLK = PLL0_1
FHDIV_VAL SETA  &00000000
 |
 [ FCLK = PLL0_2
FHDIV_VAL SETA  &00010000
 |
 [ FCLK = PLL0_25
FHDIV_VAL SETA  &00020000
 |
 [ FCLK = PLL0_3
FHDIV_VAL SETA  &00030000
 |
 [ FCLK = PLL1_1
FHDIV_VAL SETA  &00100000
 |
 [ FCLK = PLL1_2
FHDIV_VAL SETA  &00140000
 |
 [ FCLK = PLL1_25
FHDIV_VAL SETA  &00180000
 |
 [ FCLK = PLL1_3
FHDIV_VAL SETA  &001C0000
 |
        ! 1, "Invalid FCLK speed"
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]

 [ FCLK/HCLK <> 1
FHDIV_VAL SETA  FHDIV_VAL :OR: &8000 :OR: (FCLK/HCLK)
 ]


PERIPHERAL_BASE *       &80000000

; Ethernet MAC

MAC_BASE        *       &80010000
MIICMD          *       &010
MIIDATA         *       &014

; USB Host controller

USB_BASE        *       &80020000
USBCtrl         *       &080

; REALITI graphics controller

REALITI_BASE    *       &80030000
VLINESTOTAL     *       &000
VSYNCSTRTSTOP   *       &004
VACTIVESTRTSTOP *       &008
VCLKSTRTSTOP    *       &00C
HCLKSTOTAL      *       &010
HSYNCSTRTSTOP   *       &014
HACTIVESTRTSTOP *       &018
HCLKSTRTSTOP    *       &01C
BRIGHTNESS      *       &020
VIDEOATTRIBS    *       &024
VIDSCRNPAGE     *       &028
VIDSCRNHPG      *       &02C
SCRNLINES       *       &030
LINELENGTH      *       &034
VLINESTEP       *       &038
LINECARRY       *       &03C
BLINKRATE       *       &040
BLINKMASK       *       &044
BLINKPATTRN     *       &048
PATRNMASK       *       &04C
BG_OFFSET       *       &050
PIXELMODE       *       &054
PARLLIFOUT      *       &058
PARLLIFIN       *       &05C
CURSORADRSTART  *       &060
CURSORADRRESET  *       &064
CURSORSIZE      *       &068
CURSORCOLOR1    *       &06C
CURSORCOLOR2    *       &070
CURSORXYLOC     *       &074
CURSORDSCANLHYLOC *     &078
REALITI_SWLOCK  *       &07C
GS_LUT          *       &080
REALITI_TCR     *       &100
REALITI_TISRA   *       &104
REALITI_TISRB   *       &108
CURSOR_TISR     *       &10C
REALITI_TOCRA   *       &110
REALITI_TOCRB   *       &114
FIFO_TOCRA      *       &118
FIFO_TOCRB      *       &11C
BLINK_TISR      *       &120
DAC_TISRA       *       &124
DAC_TISRB       *       &128
SHIFT_TISR      *       &12C
DACMUX_TOCRA    *       &130
DACMUX_TOCRB    *       &134
PELMUX_TOCR     *       &138
VIDEO_TOCRA     *       &13C
VIDEO_TOCRB     *       &140
YCRCB_TOCR      *       &144
CURSOR_TOCR     *       &148
VIDEO_TOCRC     *       &14C
SHIFT_TOCR      *       &150
BLINK_TOCR      *       &154
REALITI_TCER    *       &180
SIGVAL          *       &200
SIGCTL          *       &204
VSIGSTRTSTOP    *       &208
HSIGSTRTSTOP    *       &20C
SIGCLR          *       &210
ACRATE          *       &214
LUTCONT         *       &218
CURSORBLINK1    *       &21C
CURSORBLINK2    *       &220
CURSORBLINK     *       &224
VBLANKSTRTSTOP  *       &228
HBLANKSTRTSTOP  *       &22C
EOLOFFSET       *       &230
LUT             *       &400

; SDRAM controller

SDRAMCFG_BASE   *       &80060000
SDRAMCFG0       *       &000
SDRAMCFG1       *       &004
SDRAMCFG2       *       &008
SDRAMCFG3       *       &00C

; SRAM/ROM controller

SMC_BASE        *       &80080000
SMCCR0          *       &000
SMCCR1          *       &004
SMCCR2          *       &008
SMCCR3          *       &00C
SMCCR4          *       &010
SMCCR5          *       &014
SMCCR6          *       &018
SMCCR7          *       &01C
CSBASE0         *       &100
CSMASK0         *       &104
CSBASE1         *       &108
CSMASK1         *       &10C
CSBASE2         *       &110
CSMASK2         *       &114
CSBASE3         *       &118
CSMASK3         *       &11C
CSBASE4         *       &120
CSMASK4         *       &124
CSBASE5         *       &128
CSMASK5         *       &12C
CSBASE6         *       &130
CSMASK6         *       &134
CSBASE7         *       &138
CSMASK7         *       &13C
CSMAP           *       &140
SMCSWLOCK       *       &144
BURSTKILL       *       &148

; Interrupt controller

INT_BASE        *       &80800000
MASKIRQSTA      *       &000
RAWIRQSTA       *       &004
IRQMASKA        *       &008
CLRIRQMSKA      *       &00C
IRQSOFT         *       &010
MASKIRQSTB      *       &014
RAWIRQSTB       *       &018
IRQMASKB        *       &01C
CLRIRQMSKB      *       &020
MASKFIQSTB      *       &028
RAWFIQRSTB      *       &02C
FIQMASKB        *       &030
CLRFIQMSKB      *       &034
INTPYSTATUS     *       &038
INTPRI0         *       &03C
INTPRI1         *       &040
INTPRI2         *       &044
INTPRI3         *       &048
INTPRI4         *       &04C
INTPRI5         *       &050
INTPRI6         *       &054
INTPRI7         *       &058
INTPRI8         *       &05C
INTPRI9         *       &060
INTPRI10        *       &064
IRQPOLA         *       &070
IRQPOLB         *       &074
IRQTRIGGER      *       &078
IRQBOTH         *       &080
INT_TCR         *       &084
MASKFIQSTA      *       &100
RAWFIQRSTA      *       &104
FIQMASKA        *       &108
CLRFIQMSKA      *       &10C

; Timers

TIMER_BASE      *       &80810000
TIMER1LOAD      *       &000
TIMER1VALUE     *       &004
TIMER1CONTROL   *       &008
TIMER1CLEAR     *       &00C
TIMER2LOAD      *       &020
TIMER2VALUE     *       &024
TIMER2CONTROL   *       &028
TIMER2CLEAR     *       &02C
GLOBAL_PRESCALE *       &014

; GPIO interface

GPIO_BASE       *       &80840000
GPIOPADR        *       &000
GPIOPBDR        *       &004
GPIOPADDR       *       &008
GPIOPBDDR       *       &00C
GPIMR           *       &100
GPENR           *       &104
GPINT           *       &108
GPEEPR          *       &10C
GPKDR           *       &110
GPKDDR          *       &114
GPIOSWLOCK      *       &120

; LED interface

LED_BASE        *       &80850000
LEDDATA         *       &000
LEDCR           *       &004

; I2C

I2C_BASE        *       &80870000
DATAI           *       &000
CFGI            *       &004

; Key Matrix

KEY_BASE        *       &808F0000
SCANINIT        *       &000
DIAG            *       &004
KEYS_REG        *       &008

; Real Time Clock

RTC_BASE        *       &80920000
RTCDR           *       &000
RTCMR           *       &004
RTCSTAT         *       &008
RTCEOI          *       RTCSTAT
RTCLR           *       &00C
RTCCR           *       &010

; Syscon

SYSCON_BASE     *       &80930000
RSTCR           *       &000
PLL0CFG         *       &004
PLL1CFG         *       &008
PLLIDIV         *       &00C
FHDIV           *       &010
VIDDIV          *       &014
USBDIV          *       &018
IRDADIV         *       &01C
I2SDIV          *       &020
UARTDIV         *       &024
SPIDIV          *       &028
KTDIV           *       &02C
WATCHDIV        *       &030
CHIP_ID         *       &034
TSTCR           *       &038
SYSCFG          *       &03C
SYSLOCK         *       &040
TXDIV           *       &044

; Watchdog

WATCHDOG_BASE   *       &80940000
WATCHDOG        *       &000
WDSTATUS        *       &004

        END
