/***************************************************************************
 *                                                                         *
 * Library     : machine.c                                                 *
 * Description : reads machine characterics                                *
 * History     : 910319 ans                                                *
 *                Forked off machine from main install program             *
 *               911112 JAB                                                *
 *                Now can install to IDEFS Drive                           *
 *                                                                         *
 ***************************************************************************/
                                                                             

/***************************************************************************
 * Import Files                                                            *
 ***************************************************************************/

#include <stdio.h> 
#include <string.h>

#include "kernel.h"
#include "swis.h"
     
#include "werr.h"
#include "wimp.h"                                 
 
/***************************************************************************
 * Static's                                                                *
 ***************************************************************************/

static char path[380];


/***************************************************************************
 * Macro's                                                                 *
 ***************************************************************************/

#define  floppy                         0x00000001
#define  wini                           0x00000002
#define  network                        0x00000004
#define  progegs                        0x00000008


#define  NETFS                          5
#define  ADFS                           8
#define  SCSIFS                         26
#define  NFS                            99           
#define  IDEFS                        0x31


/***************************************************************************
 * New DataTypes                                                           *
 ***************************************************************************/

struct details
{
   int  memory_size;
   int  fs;
   int  flags;
   char fs_name[256];
   char disc_name[256];
} machine_inform = {};
                  
/***************************************************************************
 * Functions                                                               *
 ***************************************************************************/

               
/* ---------------------------- machine_isWinichester ----------------------
 *
 * Description : returns whether the currect directory is a winchester
 *
 * Parameters  : None...
 * Return      : BOOL True if winchester otherwise false
 * Other Info  : None...
 *
 */

BOOL machine_isWinchester ( void )
{ return (machine_inform.flags == wini); }

/* ---------------------------- machine_isNetwork --------------------------
 *
 * Description : returns whether the currect directory is a winchester
 *
 * Parameters  : None...
 * Return      : BOOL True if winchester otherwise false
 * Other Info  : None...
 *
 */

BOOL machine_isNetwork    ( void )
{ return (machine_inform.flags == network); }

/* ---------------------------- machine_isFloppy ---------------------------
 *
 * Description : returns whether the currect directory is a winchester
 *
 * Parameters  : None...
 * Return      : BOOL True if winchester otherwise false
 * Other Info  : None...
 *
 */

BOOL machine_isFloppy     ( void )
{ return (machine_inform.flags == floppy); }

/* ---------------------------- machine_path ------------------------------
 *
 * Description : returns pointer to a file path
 *
 * Parameters  : None...
 * Return      : Return pointer to file path
 * Other Info  : None...
 *
 */
                                    
char *machine_path ( void )
{     
_kernel_swi_regs            r;          
char              buffer[256];
_kernel_oserror            *e;
   path[0] = 0;

   strcpy ( path , machine_inform.fs_name );
   strcat ( path , "::" );

   if ( machine_isWinchester () )
   {     
    if ( strlen(machine_inform.disc_name) )
     strcat ( path , machine_inform.disc_name );     
    else
     strcat ( path , "4" );

    /* strcat ( path , "." ); MC wanted this removed ................... */                          
   }

   if ( machine_isNetwork    () )
   {
    r.r[1] = (int)buffer;
    r.r[2] = 256;                               

      if ((e = _kernel_swi(NetFS_ReadFSName, &r, &r)) == NULL)
       sprintf ( path , "net#%s:",buffer );  
      else
       werr ( 0 , e->errmess );
   } 

   if ( machine_isFloppy () )
    strcat ( path , "0" );
 
return path;
}



/* ----------------------------- machine_WhiteBox --------------------------
 *
 * Description : Write to a file the current direction information
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : Test routine only
 *
 */

void machine_WhiteBox  ( void )
{
FILE *stream;

   stream = fopen ( "$.MachWhBx","w");

   if ( stream != NULL )
   {          

    fprintf ( stream                                , 
              " Filing System : %s \n"              , 
              machine_inform.fs_name                   );
    
    if ( machine_isWinchester () ) 
    {
     fprintf ( stream                                 , 
               " Type : Winchester \n"               );
     fprintf ( stream                                 ,
               " Name : %s \n", machine_inform.disc_name );
    }

    if ( machine_isNetwork    () ) 
     fprintf ( stream, " Type : Network \n"        );

    if ( machine_isFloppy     () ) 
     fprintf ( stream, " Type : FloppyDisc \n"     );
                               
     fprintf ( stream, " Path : %s \n",machine_path());

   }
   else
    werr ( 0 , " could not open white box file for testing " );

}   

/* ----------------------------- machine_memory ----------------------------
 *
 * Description : The size of the memory avaiable in the machine
 *
 * Parameters  : None...
 * Return      : int - size of memory
 * Other Info  : None...
 *
 */

int machine_memorysize ( void )
{ return machine_inform.memory_size; }

/* ----------------------------- machine_init ------------------------------
 *
 * Description : Sets the internal variables
 *
 * Parameters  : None...
 * Return      : None...
 * Other info  : set internal variables
 *
 */


void machine_init (  void  )
{
_kernel_swi_regs            r;
_kernel_oserror            *e;
char             buffer[1024];
                         
   machine_inform.flags = 0;

   /* --- what is the memory size, in MBs --- */
   if ( ( e = _kernel_swi(OS_ReadMemMapInfo, &r , &r ) ) != 0) 
   {
    werr(TRUE, "Unable to read MemC map info");
   }
   else
   {
    machine_inform.memory_size = (r.r[0] * r.r[1]) >> 20;
   }


   /* --- check filing system (netfs/adfs/scsifs/nfs read disc number) --- */

   r.r[0] = 0;
   r.r[1] = 0;
   r.r[2] = 0;

   if ((e = _kernel_swi(OS_Args, &r, &r)) != 0)
   {
      werr(TRUE, "Unable to read filing system info");
      return;
   }
   else
   {  
      machine_inform.fs = r.r[0];

      if (r.r[0] == ADFS || r.r[0] == SCSIFS)
      {

         /* --- for ADFS, see if it's got a wini on --- */
         if (r.r[0] == ADFS)
         {
            _kernel_swi(ADFS_Drives, &r, &r);
            if (r.r[2] == 0) 
               machine_inform.flags = floppy;
            else
               machine_inform.flags = wini;
         }
         else
            machine_inform.flags = wini;
      }
      else if (r.r[0] == NETFS || r.r[0] == NFS)
         machine_inform.flags = network;

      /* --- get disc name --- */
      r.r[0] = 5;   /* get name of disc */
      r.r[2] = (int)buffer;
      _kernel_swi(OS_GBPB, &r, &r);
      strncpy(machine_inform.disc_name, &buffer[1], (buffer[0] & 0xff));
      machine_inform.disc_name[(buffer[0] & 0xff)+1] = 0;
   }

   r.r[0] = 33;
   r.r[1] = machine_inform.fs;
   r.r[2] = (int)machine_inform.fs_name;
   r.r[3] = 20;
                  
   e = _kernel_swi(OS_FSControl, &r, &r);
    
   if ( e != NULL ) werr(FALSE, "%s", e->errmess);
                           
}                      
 
/* --------------------------- machine_secinit -----------------------------
 *
 * Description : Makes a second check
 *
 * Parameters  : char *name - of disc
 * Return      : None...
 * Other Info  : None...
 *
 */

void machine_secinit ( char *name )
{
_kernel_swi_regs                 r;
_kernel_oserror                 *e;
char               buffer [ 1024 ]; 
char                          *ptr; 
int              descriptor [ 32 ];             
               
   ptr = name;
 
   if ( strlen ( name ) < 4 )
   {
    werr ( 0 , " Bad Path '%s' ", name );
    return;
   }
   
   while ( *(++ptr) !=  0  );  /* find the end ............ */
  
   while ( *(--ptr) != ':' ); /* find the ':' ............ */
        
   machine_inform.flags = 0;

   /* --- what is the memory size, in MBs --- */
   if ( ( e = _kernel_swi(OS_ReadMemMapInfo, &r , &r ) ) != 0) 
   {
    werr(TRUE, "Unable to read MemC map info");
   }
   else
   {
    machine_inform.memory_size = (r.r[0] * r.r[1]) >> 20;
   }


   /* --- check filing system (netfs/adfs/scsifs/nfs read disc number) --- */
   /* --- ....... and now checks for IDEFS                             --- */

   r.r[0] = 0;
   r.r[1] = 0;
   r.r[2] = 0;

   if ((e = _kernel_swi(OS_Args, &r, &r)) != 0)
   {
      werr(TRUE, "Unable to read filing system info");
      return;
   }
   else
   {  
      machine_inform.fs = r.r[0];

      if (r.r[0] == ADFS || r.r[0] == SCSIFS || r.r[0] == IDEFS)
      {
         /* --- for ADFS, see if it's got a wini on --- */
         if (r.r[0] == ADFS)
         { 
           r.r[0] = ( int )        ptr;
           r.r[1] = ( int ) descriptor;

           wimpt_complain (_kernel_swi ( ADFS_DescribeDisc , &r , &r ));  
                        
           if ( descriptor [ 4 ] < ( 5 * 1024 * 1024 ) )
            machine_inform.flags = floppy;
           else
            machine_inform.flags = wini;
         }
         else
            machine_inform.flags = wini;
      }
      else if (r.r[0] == NETFS || r.r[0] == NFS)
         machine_inform.flags = network;

      /* --- get disc name --- */
      r.r[0] = 5;   /* get name of disc */
      r.r[2] = (int)buffer;
      _kernel_swi(OS_GBPB, &r, &r);
      strncpy(machine_inform.disc_name, &buffer[1], (buffer[0] & 0xff));
      machine_inform.disc_name[(buffer[0] & 0xff)] = 0;
   }

   r.r[0] = 33;
   r.r[1] = machine_inform.fs;
   r.r[2] = (int)machine_inform.fs_name;
   r.r[3] = 20;
                  
   e = _kernel_swi(OS_FSControl, &r, &r);
    
   if ( e != NULL ) werr(FALSE, "%s", e->errmess);     
}


/* end of machine.c */
