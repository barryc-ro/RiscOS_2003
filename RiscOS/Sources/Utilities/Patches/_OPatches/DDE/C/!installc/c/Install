/*************************************************************************** 
 *                                                                         *
 * Title       : Install.c                                                 *
 * Description : Installation program                                      *
 * History     : 13-Dec-90 IDJ                                             *
 *               Created                                                   *
 *               6-FEB-91 ANS                                              *
 *               Started                                                   *
 *               - added overwrite option                                  *
 *               - added crunch headers option                             *
 *                                                                         *
 ***************************************************************************/
                    
/***************************************************************************
 * Import Librarys                                                         *
 ***************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "wimp.h"
#include "werr.h"
#include "baricon.h"
#include "resspr.h"
#include "res.h"
#include "flex.h"
#include "template.h"
#include "msgs.h"
#include "dbox.h"
#include "bbc.h"
#include "os.h"
#include "visdelay.h"                                             
  

#include "Tran_file.h"
#include "Ram_Cont.h"
#include "Machine.h"
#include "Specific.h"                            

/***************************************************************************
 * Macros                                                                  *
 ***************************************************************************/


#define install_info_IName              1
#define install_info_IVersion           4


#define install_setup_IPath             4

#define install_setup_IOK               0
#define install_setup_ICancel           1
#define install_setup_IHelp             2
#define install_setup_IHard             115
#define install_setup_INet              116
#define install_setup_IMemSize          119
#define install_setup_IMemUp            117
#define install_setup_IMemDown          118
#define install_setup_IProgEgs          5
#define install_setup_IOverWrite        7
#define install_setup_ICrunchHead       6
#define install_setup_IRamDisc          8

#define  LIBRARY                        "Library"
#define  ARTHURLIB                      "ArthurLib"
#define  USER                           "User"
#define  DDE                            "DDE"
#define  SYSTEM                         "!System"
#define  CLIB                           "Clib"
#define  RISC_OSLIB                     "RISC_OSLib"
#define  RISC_OSLIBO                    "RISC_OSLib.o"
#define  SRCEDIT_HELP                   "DDE.!SrcEdit.help.c"
#define  BOOT_RUN                       "DDE.!Boot.!Run"
#define  BOOT_BOOT                      "DDE.!Boot.!Boot"

#define  DDETOOLS                       "DDETools"
#define  WORKDISCC                      "WorkDiscC"
#define  LINEBUFSIZ                     256
#define  MAXFILENAME                    256

#define  copyf_recurse                  0x00000001
#define  copyf_force                    0x00000002
#define  copyf_prompt                   0x00000040
#define  copyf_verbose                  0x00000010
#define  copyf_newer                    0x00001000

#define  floppy                         0x00000001
#define  hard                           0x00000002
#define  network                        0x00000004
#define  progegs                        0x00000008

#define  NETFS                          5
#define  ADFS                           8
#define  SCSIFS                         26
#define  NFS                            99

#define  RAMSIZE                        1024*600 

/*
#define  ADVANCE                        1
*/
         
/*
#define  DEBUG
*/

struct details
{
   int  memory_size;
   int  fs;
   int  flags;
   char fs_name[256];
   char disc_name[256];
} mc_details = {};

/***************************************************************************
 * Static's                                                                *
 ***************************************************************************/

static BOOL force_overwrite;
static dbox globalbox;


/* ---------------------------- help window display ------------------------------ */

typedef struct install_helpwindow
{
   wimp_w    w;
   char     *buffer;
   int      *line_offsets;
   int       nlines;
} install_helpwindow;


static install_helpwindow install_helpwind = {};


#define sysfont_height                 (wimpt_dy() * bbc_vduvar(bbc_GCharSpaceY))
#define sysfont_width                  (wimpt_dx() * bbc_vduvar(bbc_GCharSpaceX))

static void install_txtwin_printtext(char *text, int leftmost, int rightmost, int atx, int aty)
{
   int len=0;

   while (text[len] != '\n' && text[len] != '\0') len++;

   bbc_move(atx, aty);
   if (len > leftmost)
   {
      os_regset r;
      if (len > rightmost)
          len = rightmost + 1;
      r.r[0] = (int)(text + leftmost);
      r.r[1] = len - leftmost;
      wimpt_noerr(os_swix(OS_WriteN, &r));
   }
}


static void install_txtwin_open(wimp_openstr *o)
{
   wimpt_noerr(wimp_open_wind(o));
}


static void install_txtwin_refresh(wimp_redrawstr *r, BOOL more, 
                                  char *buffer, int *line_offsets, int nlines)
{
   int topspot, leftspot, topline, bottomline, leftmost, rightmost, plotx, ploty, j;
   int cheight = sysfont_height, cwidth = sysfont_width;

   /* variables are:
      topspot ---- > topmost point in work area to be redrawn
      leftspot --- >    "      "    "   "   "    "  "    "
      topline  --- > index of first line of work area to redraw
      bottomline - >   "   "  last   "    "   "    "  "    "
      leftmost --- > index of leftmost character to redraw
      rightmost -- >   "   "  rightmost   "      "    "
      plotx ------ > x screen-coord to plot at 
      ploty ------ > y   "      "   "    "   "
   */
   
   while (more)
   {
      topspot = r->box.y1 - r->g.y1 - r->scy;
      leftspot = r->scx + r->g.x0 - r->box.x0;
      topline = topspot/cheight;
      leftmost = leftspot/cwidth;
      bottomline = (r->box.y1 - r->g.y0 - r->scy -1)/cheight;
      rightmost = (r->scx + r->g.x1 - r->box.x0)/cwidth;
      plotx = r->g.x0 - (leftspot & (cwidth-1));
      ploty = r->g.y1 + (topspot & (cheight-1)) - 1;

      /* now do the redrawing line by line */
      for (j = topline; j<=bottomline && j<nlines; j++)
      {
          install_txtwin_printtext(&buffer[(j==0)?0:line_offsets[j-1]], leftmost, rightmost, plotx, ploty);
          ploty -= cheight;
      }  
      wimp_get_rectangle(r, &more);
   }
}


static void install_txtwin_scroll(wimp_openstr *o, int x, int y)
{
   int offset;

   if (x & 1)   /* char left or char right */
   {
       offset = sysfont_width;
       if (x < 0) offset = -offset;
       o->x += offset;
   }
   else if (x)   /* page left or page right */
   {
       offset = o->box.x1 - o->box.x0;
       if (x < 0) offset = -offset;
       o->x += offset;
   }

   if (y & 1)   /* line up or line down */
   {
      if (y < 0)
          offset = ((o->box.y1 - o->box.y0 - o->y) & (sysfont_height-1)) - sysfont_height;
      else
          offset = sysfont_height - (o->y & (sysfont_height-1));
      o->y += offset;
   }
   else if (y)   /* page up or page down */
   {
      offset = o->box.y1 - o->box.y0;
      if (y < 0) offset = -offset;
      o->y += offset;
   }

   install_txtwin_open(o);
}


static void install_txtwin_linecount(int len, char *msg, int *nlines, int **line_offsets, int bufsize)
{
   int pos = 0;

   /* --- here, we keep pointers to line posn's, as well as a count of \n's --- */
   while (pos < len)
   {
      if (msg[pos] == '\n') 
      {
         (*nlines)++;
         if (*nlines == 1) 
            flex_alloc((flex_ptr)line_offsets, LINEBUFSIZ * sizeof(int));
         else
            if (*nlines * sizeof(int) >= flex_size((flex_ptr)line_offsets))
            {
               flex_extend((flex_ptr)line_offsets, flex_size((flex_ptr)line_offsets) + LINEBUFSIZ * sizeof(int));
            }
         (*line_offsets)[*nlines-1] = bufsize - len + pos + 1;
      }

      pos++;
   }
}


static void install_help_handler(wimp_eventstr *e, void *handle)
{
   install_helpwindow *w = (install_helpwindow *)handle;
                           
   switch(e->e)
   {
      case wimp_ESCROLL:
        install_txtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        wimpt_noerr(wimp_close_wind(e->data.o.w));
        break;

      case wimp_EOPEN:
        install_txtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           install_txtwin_refresh(&r, more, w->buffer, w->line_offsets, w->nlines);
         }
        break;

      default:
        break;
   }
}


static void install_give_help(void)
{
char           helpfilename[MAXFILENAME];
os_filestr                             f;
os_error                              *e;
template                              *t;
wimp_wstate                           ws;
wimp_redrawstr                         r;

   if (install_helpwind.buffer == 0)
   {
      /* --- find if !help file exists --- */
      res_findname("!Help", helpfilename);
      f.action = 5;
      f.name = helpfilename;
      if ((e = os_file(&f)) != 0 || f.action != 1 /*file found*/) return;

      /* --- create a help window and register event handlers --- */
      t = template_find("Output");
      wimpt_noerr(wimp_create_wind(&t->window, &install_helpwind.w));
      win_register_event_handler(install_helpwind.w, install_help_handler, (void *)&install_helpwind);
      flex_alloc((flex_ptr)&install_helpwind.buffer, f.start);

      /* --- load file into buffer --- */
      f.action = 0xff;   /* load named file */
      f.name = helpfilename;
      f.loadaddr = (int) install_helpwind.buffer; 
      f.execaddr = 0;

      if ((e = os_file(&f)) != 0 || f.action != 1 )
      {
       install_helpwind.buffer = 0; 
       return;
      }

      /* -------------- set up line offsets ------------------------ */   

      install_txtwin_linecount
      (
        f.start                                       ,
        install_helpwind.buffer                       , 
        &install_helpwind.nlines                      , 
        &install_helpwind.line_offsets                , 
        flex_size((flex_ptr)&install_helpwind.buffer)
      );

      /* -------------- set the extent ----------------------------- */
      r.w = install_helpwind.w;
      r.box.x0 = 0;
      r.box.x1 = t->window.ex.x1;
      r.box.y1 = 0;
      r.box.y0 = -(install_helpwind.nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));
   }

   /* --- ... and open the window --- */
   wimpt_noerr(wimp_get_wind_state(install_helpwind.w, &ws));
   ws.o.behind = -1;
   install_txtwin_open(&ws.o);
}


static void install_initialise(void)
{

   wimpt_wimpversion(200);
   wimpt_init("Install");

   flex_init();
   res_init("Install");
   template_init();
   dbox_init();

   specific_setdirectory ( "$" );
   machine_init          (     );

}

/* ---------------------- dbox handling --------------------------------- */

static void install_dbox_events(dbox d, void *handle)
{
char otherpath[ 1024 ];

   globalbox = d;
   handle    = handle;
            
   switch(dbox_get(d))
   {
      case dbox_CLOSE:
      case install_setup_ICancel:
           exit(EXIT_FAILURE);

      case install_setup_IOK: 
      {                     
      char            tpath[260];
      _kernel_oserror         *e;         

           dbox_getfield( d, install_setup_IPath , tpath , 260 );
            
           if (  strlen ( tpath ) < 4 ) 
           {
            werr ( 0 , " Bad path name " );
           }
           else
           {
            strcpy          ( otherpath , tpath );

           if ( !machine_isNetwork () ) strcat ( tpath , "." );
          
           strcat          ( tpath     , "$"   );   
                    
           if ( ( e = specific_setdirectory ( tpath ) ) != NULL )
           {
            werr ( 0 , e->errmess );
           }
           else
           {
            machine_secinit      ( otherpath );
            if ( specific_doInstall (d) ) exit ( EXIT_SUCCESS );
           } 

           }
      }
      break;
      
      case install_setup_IHelp:
           install_give_help();
           break;

      case install_setup_IProgEgs:
      {
         wimp_icon ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_IProgEgs, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_IProgEgs, 0);
         else
            dbox_setnumeric(d, install_setup_IProgEgs, 1);
         break;
      }
      case install_setup_IOverWrite:
      {
      wimp_icon  ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_IOverWrite, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_IOverWrite, 0);
         else
            dbox_setnumeric(d, install_setup_IOverWrite, 1);
         break;

      }  
      case install_setup_ICrunchHead:
      {
      wimp_icon  ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_ICrunchHead, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_ICrunchHead, 0);
         else
            dbox_setnumeric(d, install_setup_ICrunchHead, 1);
         break;
      } 
      case install_setup_IRamDisc:
      {
      wimp_icon  ii;

         wimpt_noerr( wimp_get_icon_info ( dbox_syshandle(d)      , 
                                           install_setup_IRamDisc ,
                                           &ii
                                         ));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_IRamDisc, 0);
         else
            dbox_setnumeric(d, install_setup_IRamDisc, 1);
         break;
      }
   }
}

/* ----------------------------- install_showdbox --------------------------
 *
 * Description : set all the dbox option for setup dialogue
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : None...
 *
 */

void install_showdbox ( void )
{
dbox d;

   /* --- create dbox, and register handlers --- */
                                   
   d = dbox_new     ( "SetUp"                      );
   dbox_eventhandler( d,   install_dbox_events , 0 );

   if ( machine_memorysize() < 2 || !machine_isWinchester () ) 
    dbox_setnumeric( d , install_setup_ICrunchHead , 1 );

   if ( machine_memorysize () >= 2 && machine_isFloppy () )
    dbox_setnumeric(d, install_setup_IRamDisc, 1 );                           

   dbox_setnumeric(d , install_setup_IProgEgs   , 1);
   dbox_setnumeric(d , install_setup_IOverWrite , 1);

   force_overwrite = TRUE;

   dbox_setfield     ( d, install_setup_IPath, machine_path() );                   
   dbox_showstatic   ( d                                      );

}
    
/* ------------------------------ main -----------------------------------*/

int main(void)
{
   install_initialise();

   install_showdbox();

   while(TRUE)
      event_process();

   exit(EXIT_SUCCESS);
}



