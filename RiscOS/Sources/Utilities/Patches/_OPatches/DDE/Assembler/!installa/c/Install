/***************************************************************************
 *                                                                         *
 * Title       : Install.c                                                 *
 * Description : Installation program for Assembler                        *
 * History     : 13-Dec-90 IDJ                                             *
 *               Created                                                   *
 *               5-FEB-91 ANS                                              *
 *               Started                                                   *
 *               - tidying up code                                         *
 *               - added overwrite option                                  *
 *                                                                         *
 ***************************************************************************/
                      
/***************************************************************************
 * Imported files                                                          *
 ***************************************************************************/
  
/* ANSI library's ........................................................ */

#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"        

/* RISC_OSLib library's .................................................. */

#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "wimp.h"
#include "werr.h"
#include "baricon.h"
#include "resspr.h"
#include "res.h"
#include "flex.h"
#include "template.h"
#include "msgs.h"
#include "dbox.h"
#include "bbc.h"
#include "os.h"

#include "Machine.h"
#include "Specific.h"
#include "Ram_Cont.h"
                                         
/***************************************************************************
 * Macro's                                                                 *
 ***************************************************************************/

#define install_info_IName       1
#define install_info_IVersion    4
                                  
#define install_setup_IPath      4

#define install_setup_IOK        0
#define install_setup_ICancel    1
#define install_setup_IHelp      2
#define install_setup_IHard      115
#define install_setup_INet       116
#define install_setup_IMemSize   119
#define install_setup_IMemUp     117
#define install_setup_IMemDown   118
#define install_setup_IProgEgs   5
#define install_setup_IRamDisc   6
#define install_setup_OverWrite  7

#define  ARTHURLIB              "ArthurLib"
#define  LIBRARY                "Library"
#define  USER                   "User"
#define  DDE                    "DDE"
#define  SYSTEM                 "!System"
#define  CLIB                   "Clib"
#define  RISC_OSLIB             "RISC_OSLib"
#define  SRCEDIT_HELP           "DDE.!SrcEdit.help.c"
#define  BOOT_RUN               "DDE.!Boot.!Run"
#define  BOOT_BOOT              "DDE.!Boot.!Boot"
      
#define  WORKDISCA              "WorkDiscA"
#define  DDETOOLS               "DDETools"

#define  LINEBUFSIZ             256
#define  MAXFILENAME            256

#define  copyf_recurse          0x00000001
#define  copyf_force            0x00000002
#define  copyf_prompt           0x00000040
#define  copyf_verbose          0x00000010
#define  copyf_newer            0x00001000

#define  floppy                 0x00000001
#define  hard                   0x00000002
#define  network                0x00000004
#define  progegs                0x00000008

#define  NETFS                  5
#define  ADFS                   8
#define  SCSIFS                 26
#define  NFS                    99
                       
#define  RAMSIZE                1024*600

#define sysfont_height          (wimpt_dy() * bbc_vduvar(bbc_GCharSpaceY))
#define sysfont_width           (wimpt_dx() * bbc_vduvar(bbc_GCharSpaceX))
                        
/*
#define  DEBUG
*/
                                
/***************************************************************************
 * New Datatypes                                                           *
 ***************************************************************************/

struct details
{
   int  memory_size;
   int  fs;
   int  flags;       
   char fs_name[20];
   char disc_name[256];
} install_mcdetailstr = {};

typedef struct install_helpwindstr
{
   wimp_w    w;
   char     *buffer;
   int      *line_offsets;
   int       nlines;
} install_helpwindstr;
                                  
/***************************************************************************
 * Static's                                                                *
 ***************************************************************************/

static install_helpwindstr install_helpwind = {};
static int                 over_write = 0;

/***************************************************************************
 * Functions                                                               *
 ***************************************************************************/

/* --------------------------------- copy ----------------------------------
 *
 * Description : copies a from ( full path name ) to ( full path name ) 
 *
 * Parameters  : char *from - path name
 *             : char *to   - path name
 * Return      : return _kernel_oserror if error occured
 * Other Info  : None...
 *
 */

static _kernel_oserror *copy(char *from, char *to)
{
_kernel_swi_regs r;
int              _force;    
             

#ifndef DEBUG

   r.r[0] = 26;             /* copy object */
   r.r[1] = (int)from;   
   r.r[2] = (int)to;    

   if ( over_write ) 
    _force = copyf_force;
   else
    _force = 0;
   

   r.r[3] = copyf_recurse | 
            copyf_prompt  | 
            copyf_newer   | 
            copyf_verbose | 
            _force;
   

   return _kernel_swi(OS_FSControl, &r, &r); 

#endif

#ifdef DEBUG

  werr ( 0 , "f-%s t-%s",from,to);

#endif

}


void cdir ( char *path )
{
_kernel_oserror  *e;
_kernel_swi_regs  r;
                    
     r.r[0] = 8;
     r.r[1] = ( int ) path;
     r.r[2] = 0;

     _kernel_swi ( OS_File , &r , &r );
}      


/***************************************************************************
 * help window display                                                     *
 ***************************************************************************/

/* ------------------------ install_txtwin_printtext -----------------------
 *
 * Description : prints text into window
 *   
 * Parameters  : char *text      - pointer to text for display
 *               int   leftmost  - left most ?
 *               int   rightmost - right most ?
 *               int   atx       - x start displaying
 *               int   aty       - y start displaying
 * Return      : None...
 * Other Info  : None...            
 *
 */


static void install_txtwin_printtext(char *text, int leftmost, int rightmost, int atx, int aty)
{
int len=0;

   while (text[len] != '\n' && text[len] != '\0') len++;

   bbc_move(atx, aty);
   if (len > leftmost)
   {
      os_regset r;
      if (len > rightmost)
          len = rightmost + 1;
      r.r[0] = (int)(text + leftmost);
      r.r[1] = len - leftmost;
      wimpt_noerr(os_swix(OS_WriteN, &r));
   }
}

/* --------------------------- install_txtwin_open -------------------------
 *
 * Description : open the help text window
 *
 * Parameters  : wimp_openstr *o - the open block
 * Return      : None...
 * Other Info  : if error occurs the install application is aborted       
 *                                      
 */

static void install_txtwin_open(wimp_openstr *o)
{ wimpt_noerr(wimp_open_wind(o)); }
   

/* -------------------------- install_txtwin_refresh -----------------------
 *
 * Description : Does a screen refreash
 *
 * Parameters  : wimp_redrawstr *r            - 
 *               BOOL            more         - 
 *               char           *buffer       - 
 *               int            *line_offsets - 
 *               int             nlines       -
 * Return      : None...
 * Other Info  : 
 *
 */

static void install_txtwin_refresh( wimp_redrawstr *r  ,
                                    BOOL more          , 
                                    char *buffer       , 
                                    int  *line_offsets , 
                                    int  nlines        )
{
int topspot, leftspot, topline, bottomline, leftmost, rightmost, plotx, ploty, j;
int cheight = sysfont_height, cwidth = sysfont_width;

   /* variables are:
      topspot ---- > topmost point in work area to be redrawn
      leftspot --- >    "      "    "   "   "    "  "    "
      topline  --- > index of first line of work area to redraw
      bottomline - >   "   "  last   "    "   "    "  "    "
      leftmost --- > index of leftmost character to redraw
      rightmost -- >   "   "  rightmost   "      "    "
      plotx ------ > x screen-coord to plot at 
      ploty ------ > y   "      "   "    "   "
   */
   
   while (more)
   {
      topspot = r->box.y1 - r->g.y1 - r->scy;
      leftspot = r->scx + r->g.x0 - r->box.x0;
      topline = topspot/cheight;
      leftmost = leftspot/cwidth;
      bottomline = (r->box.y1 - r->g.y0 - r->scy -1)/cheight;
      rightmost = (r->scx + r->g.x1 - r->box.x0)/cwidth;
      plotx = r->g.x0 - (leftspot & (cwidth-1));
      ploty = r->g.y1 + (topspot & (cheight-1)) - 1;

      /* now do the redrawing line by line */
      for (j = topline; j<=bottomline && j<nlines; j++)
      {
          install_txtwin_printtext(&buffer[(j==0)?0:line_offsets[j-1]], leftmost, rightmost, plotx, ploty);
          ploty -= cheight;
      }  
      wimp_get_rectangle(r, &more);
   }
}

/* --------------------------- install_txtwin_scroll -----------------------
 *
 * Description : 
 *
 * Parameters  :
 * Return      :  
 * Other Info  :
 *
 */

static void install_txtwin_scroll(wimp_openstr *o, int x, int y)
{
   int offset;

   if (x & 1)   /* char left or char right */
   {
       offset = sysfont_width;
       if (x < 0) offset = -offset;
       o->x += offset;
   }
   else if (x)   /* page left or page right */
   {
       offset = o->box.x1 - o->box.x0;
       if (x < 0) offset = -offset;
       o->x += offset;
   }

   if (y & 1)   /* line up or line down */
   {
      if (y < 0)
          offset = ((o->box.y1 - o->box.y0 - o->y) & (sysfont_height-1)) - sysfont_height;
      else
          offset = sysfont_height - (o->y & (sysfont_height-1));
      o->y += offset;
   }
   else if (y)   /* page up or page down */
   {
      offset = o->box.y1 - o->box.y0;
      if (y < 0) offset = -offset;
      o->y += offset;
   }

   install_txtwin_open(o);
}


static void install_txtwin_linecount(int len, char *msg, int *nlines, int **line_offsets, int bufsize)
{
   int pos = 0;

   /* --- here, we keep pointers to line posn's, as well as a count of \n's --- */
   while (pos < len)
   {
      if (msg[pos] == '\n') 
      {
         (*nlines)++;
         if (*nlines == 1) 
            flex_alloc((flex_ptr)line_offsets, LINEBUFSIZ * sizeof(int));
         else
            if (*nlines * sizeof(int) >= flex_size((flex_ptr)line_offsets))
            {
               flex_extend((flex_ptr)line_offsets, flex_size((flex_ptr)line_offsets) + LINEBUFSIZ * sizeof(int));
            }
         (*line_offsets)[*nlines-1] = bufsize - len + pos + 1;
      }

      pos++;
   }
}


static void install_help_handler(wimp_eventstr *e, void *handle)
{
   install_helpwindstr *w = (install_helpwindstr *)handle;

   switch(e->e)
   {
      case wimp_ESCROLL:
        install_txtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        wimpt_noerr(wimp_close_wind(e->data.o.w));
        break;

      case wimp_EOPEN:
        install_txtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           install_txtwin_refresh(&r, more, w->buffer, w->line_offsets, w->nlines);
         }
        break;

      default:
        break;
   }
}


static void install_give_help(void)
{
char          helpfilename [ MAXFILENAME ];
os_filestr                               f;
os_error                                *e;
template                                *t;
wimp_wstate                             ws;
wimp_redrawstr                           r;

   if (install_helpwind.buffer == 0)
   {
      /* --- find if !help file exists --- */
      res_findname("!Help", helpfilename);
      f.action = 5;
      f.name = helpfilename;
      if ( (e = os_file(&f) ) != 0 ) return;  /* error returned ..... */

      if ( f.action != 1   )         return;  /* object not file .... */                                                             
      /* --- create a help window and register event handlers --- */
 
      t = template_find("Output");
      wimpt_noerr(wimp_create_wind(&t->window, &install_helpwind.w));
      win_register_event_handler(install_helpwind.w, install_help_handler, (void *)&install_helpwind);
      flex_alloc((flex_ptr)&install_helpwind.buffer, f.start);

      /* --- load file into buffer --- */
      f.action = 0xff;   /* load named file */
      f.name = helpfilename;
      f.loadaddr = (int) install_helpwind.buffer; 
      f.execaddr = 0;

      if ((e = os_file(&f)) != 0 || f.action != 1 )
      {
       install_helpwind.buffer = 0;
       return;
      }

      /* --- set up line offsets --- */
      install_txtwin_linecount(f.start, install_helpwind.buffer, &install_helpwind.nlines, &install_helpwind.line_offsets, flex_size((flex_ptr)&install_helpwind.buffer));

      /* --- set the extent --- */
      r.w = install_helpwind.w;
      r.box.x0 = 0;
      r.box.x1 = t->window.ex.x1;
      r.box.y1 = 0;
      r.box.y0 = -(install_helpwind.nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));
   }

   /* --- ... and open the window --- */
   wimpt_noerr(wimp_get_wind_state(install_helpwind.w, &ws));
   ws.o.behind = -1;
   install_txtwin_open(&ws.o);
}


/* ------------------------------- program initialisation ------------------------- */

static void install_grope_mc(void)
{
   _kernel_swi_regs r;
   _kernel_oserror *e;
   char buffer[256];

   /* --- what is the memory size, in MBs --- */
   if ((e = _kernel_swi(OS_ReadMemMapInfo, &r, &r)) != 0)
      werr(TRUE, "Unable to read MemC map info");
   else
      install_mcdetailstr.memory_size = (r.r[0] * r.r[1]) >> 20;

   /* --- check filing system (netfs/adfs/scsifs/nfs read disc number) --- */
   r.r[0] = 0;
   r.r[1] = 0;
   r.r[2] = 0;
   if ((e = _kernel_swi(OS_Args, &r, &r)) != 0)
   {
      werr(TRUE, "Unable to read filing system info");
      return;
   }
   else
   {
      install_mcdetailstr.fs = r.r[0];

      if (r.r[0] == ADFS || r.r[0] == SCSIFS)
      {

         /* --- for ADFS, see if it's got a hard on --- */
         if (r.r[0] == ADFS)
         {
            _kernel_swi(ADFS_Drives, &r, &r);
            if (r.r[2] == 0) 
               install_mcdetailstr.flags |= floppy;
            else
               install_mcdetailstr.flags |= hard;
         }
         else
            install_mcdetailstr.flags |= hard;
      }
      else if (r.r[0] == NETFS || r.r[0] == NFS)
         install_mcdetailstr.flags |= network;

      /* --- get disc name --- */
      r.r[0] = 5;   /* get name of disc */
      r.r[2] = (int)buffer;
      _kernel_swi(OS_GBPB, &r, &r);
      strncpy(install_mcdetailstr.disc_name, &buffer[1], (buffer[0] & 0xff));
   }

   r.r[0] = 33;
   r.r[1] = install_mcdetailstr.fs;
   r.r[2] = ( int ) install_mcdetailstr.fs_name;
   r.r[3] = 20;

   e = _kernel_swi ( OS_FSControl, &r , &r );

   return;
}
                                
/* -------------------------- install_initialise ----------------------- */

static void install_initialise(void)
{

   wimpt_wimpversion(200);
   wimpt_init("Install");

   flex_init();
   res_init("Install");
   template_init();
   dbox_init();

   /* --- work out details of m/c --- */
   install_mcdetailstr.flags |= progegs;
   
   specific_setdirectory ( "$" );
   machine_init          (     );
}

/* -------------------------------- dbox handling ---------------------------------- */

static void install_dbox_events(dbox d, void *handle)
{
char otherpath [ 1024 ];  

   handle = handle;

   switch(dbox_get(d))
   {
      case dbox_CLOSE:
      case install_setup_ICancel:
           exit(EXIT_FAILURE);

      case install_setup_IOK:
      {   
      char            tpath[260];
      _kernel_oserror         *e;         


           dbox_getfield( d, install_setup_IPath , tpath , 260 );     
             
           if (  strlen ( tpath ) < 4 ) 
           {
            werr ( 0 , " Bad path name " );
           }
           else
           {
            strcpy          ( otherpath , tpath );


            if ( !machine_isNetwork () ) strcat ( tpath , "." );

            strcat ( tpath , "$" ); 
                 
            if ( ( e = specific_setdirectory ( tpath ) ) != NULL )
            {
             werr ( 0 , e->errmess );
            }
            else
            {                 
             machine_secinit     ( otherpath       );
             if ( specific_doInstall ( d ) )  exit  ( EXIT_SUCCESS );
            } 
           }
      }
      break;

      case install_setup_IHelp:
           install_give_help();
           break;

      case install_setup_IProgEgs:
      {
         wimp_icon ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_IProgEgs, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_IProgEgs, 0);
         else
            dbox_setnumeric(d, install_setup_IProgEgs, 1);
         break;
      }                         
      case install_setup_OverWrite:
      {
       wimp_icon ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_OverWrite, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric(d, install_setup_OverWrite, 0);
         else
            dbox_setnumeric(d, install_setup_OverWrite, 1);
         break;
      }   
      case install_setup_IRamDisc:
      {
       wimp_icon ii;

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), install_setup_IRamDisc, &ii));

         if (ii.flags & wimp_ISELECTED)
            dbox_setnumeric( d , install_setup_IRamDisc , 0 );
         else
            dbox_setnumeric( d , install_setup_IRamDisc , 1 );
         break;
      }
   }
}


/* -------------------------- install_showbox ----------------------------- 
 *
 * Description : show the dialogue box for install
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : the dialogue event is setup
 *
 */
              
static void install_showdbox(void)
{
dbox d;

   /* --- create dbox, and register handlers --- */

   d = dbox_new("SetUp");
   dbox_eventhandler(d, install_dbox_events, 0);

   dbox_showstatic(d);

   dbox_setfield ( d , install_setup_IPath , machine_path () );

   if ( machine_memorysize () >= 2 && machine_isFloppy () )
    dbox_setnumeric(d, install_setup_IRamDisc, 1 );                           

   dbox_setnumeric(d , install_setup_IProgEgs   , 1);
   dbox_setnumeric(d , install_setup_OverWrite  , 1);

   over_write = TRUE;


}

/* -------------------------------- main ---------------------------------- 
 *
 * Description : Starts the main loop
 *                      
 * Parameters  : None...
 * Return      : int
 * Other Info  : None...   
 *
 */

int main(void)
{
   install_initialise();

   install_showdbox();

   while(TRUE)
      event_process();

   exit(EXIT_SUCCESS);
}



