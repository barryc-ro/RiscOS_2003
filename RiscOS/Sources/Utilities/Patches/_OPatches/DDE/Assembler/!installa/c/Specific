/**************************************************************************
 *                                                                        *
 * Library     : Specific Module                                          *    
 * Description : Actually does the coping to type devices                 * 
 * History     : 910320 ans                                               *
 *                 - started work                                         *
 *               911112 jab                                               *
 *                 - added function 'ask_nicely' for installing           *
 *                   to floppy disk                                       *
 *               911112 JAB                                               *
 *                 - now reports error's during a copy                    *
 *                                                                        *
 **************************************************************************/

/**************************************************************************
 * Import Libraries                                                       *
 **************************************************************************/

#include <stdio.h>
#include <string.h>

#include "Machine.h"
#include "kernel.h" 
#include "swis.h"
#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "dbox.h"          
              
#include "os.h"
#include "visdelay.h" 

/**************************************************************************
 * Static's                                                               *
 **************************************************************************/

static BOOL             Overwrite;                          
static BOOL             Ramdisc;
static BOOL             ProgEx;  
static BOOL             CrunchHdr;    
static BOOL             Complete = FALSE;
                        
/**************************************************************************
 * Macro                                                                  *
 **************************************************************************/

/*#define DEBUG                           1*/

#define COPY(s,n,m)                     if(!specific_copy((s),(n),(m)))return; 
#define RAMCOPY(s,n,m)                  if(!specific_ramcopy((s),(n),(m)))return;
#define copyf_recurse                   0x00000001
#define copyf_force                     0x00000002
#define copyf_prompt                    0x00000040
#define copyf_verbose                   0x00000010
#define copyf_newer                     0x00001000

#define install_setup_IProgEgs          5
#define install_setup_IOverWrite        7
#define install_setup_IRamDisc          6

/**************************************************************************
 * Function's                                                             *
 **************************************************************************/

/*
 * function to werr nicely!!!
 */                                                 
#define wimp_ENOERR  16

static void ask_nicely ( BOOL fatal, char *string )
{
wimp_errflags flags = 0 | wimp_EOK | wimp_ENOERR;
os_error e;

  e.errnum = 0;
  strcpy(e.errmess,string);
  wimpt_complain(wimp_reporterror(&e,flags,"Message from Install"));
}

/* ------------------------------ specific_realCopy -----------------------
 *
 * Description : does a real copy  
 *
 * Parameters  : char *from - source
 *             : char *to   - object
 * Return      : _kernel_oserror *pointer
 * Other Info  : None...
 *
 */

_kernel_oserror *specific_realCopy (char *from, char *to)
{  
_kernel_oserror      *e;
_kernel_swi_regs      r;
int              _force;    

#ifndef DEBUG

   r.r[0] = 26;             /* copy object */
   r.r[1] = (int)from;   
   r.r[2] = (int)to;    

   if ( Overwrite ) 
    _force = copyf_force;
   else
    _force = 0;
   
   r.r[3] = copyf_recurse | copyf_prompt | copyf_newer | copyf_verbose | 
            _force;
   
   visdelay_begin();  

   e = _kernel_swi(OS_FSControl, &r, &r);

   visdelay_end();

#endif   

#ifdef DEBUG
    
 werr ( 0 , "Copy : f-%s t-%s",from,to);    
 e = NULL; 

#endif

 return e;
}

/* ------------------------------ specific_realFCopy ----------------------
 *
 * Description : does a forced real copy  
 *
 * Parameters  : char *from - source
 *             : char *to   - object
 * Return      : _kernel_oserror *pointer
 * Other Info  : None...
 *
 */

_kernel_oserror *specific_realFCopy( char *from , char *to )
{  
_kernel_oserror *e;
_kernel_swi_regs r;
int              _force;    

#ifndef DEBUG

   r.r[0] = 26;             /* copy object */
   r.r[1] = (int)from;   
   r.r[2] = (int)to;    

   if ( Overwrite ) 
    _force = copyf_force;
   else
    _force = 0;
   

   r.r[3] = copyf_recurse | 
            copyf_prompt  | 
            copyf_verbose | 
            _force;
   
   visdelay_begin();  

   e = _kernel_swi(OS_FSControl, &r, &r);

   visdelay_end();

#endif 

#ifdef DEBUG
    
 werr ( 0 , "FCopy : f-%s t-%s",from,to);    
 e = NULL; 

#endif

 return e;
}

        
/* --------------------------- specific_cdir -------------------------------
 *
 * Description : Creates a new directory
 *
 * Parameters  : char *path - path of new directory
 * Return      : None...
 * Other Info  : Should really return error message 
 *
 */

void specific_cdir ( char *path ) 
{
_kernel_oserror *e;
_kernel_swi_regs r; 

#ifndef DEBUG

  r.r[0] = 8;
  r.r[1] = (int)path;
  r.r[4] = 0;                          

  _kernel_swi(OS_File,&r, &r);   

#endif
    
#ifdef DEBUG
 
 werr ( 0 , "CDIR : p-%s ", path ); 
 
#endif

}
  
/* ---------------------------- specific_setdirectory ----------------------
 *
 * Description : Set the currect directory 
 *
 * Parameters  : char *path - directory path
 * Return      : _kernel_oserror * - if it occurs
 * Other Info  : None...
 *
 */
     
_kernel_oserror *specific_setdirectory ( char *path ) 
{
_kernel_swi_regs r; 

  r.r[0] = 0;
  r.r[1] = (int)path;

  return _kernel_swi(OS_FSControl,&r, &r);
}


/* ---------------------------- specific_getIcon --------------------------
 *
 * Description : Get information on a particular icon which is regiestered
 *
 * Parameters  : dbox d  - dialoge box in question
 *             : int  wi - icon identifier                         
 * Return      : True if successful otherwise FALSE
 * Other Info  : None...
 *
 */

BOOL specific_getIcon ( dbox d , int wi )
{
wimp_icon        ii;

 wimpt_noerr(wimp_get_icon_info ( dbox_syshandle(d),wi, &ii) );  

 return  ii.flags & wimp_ISELECTED;
}
 
/* -------------------------- specific_copy --------------------------------
 *
 * Description : Generalised copy routine which capture the error messages
 *
 * Parameters  : char *from - form directory 
 *             : char *to   - to directory
 * Return      : none...
 * Other Info  : veneering
 *
 */

BOOL specific_copy    ( char *from , char *to , char *dest_root )
{  
_kernel_oserror *e;
                 
 strcat ( dest_root  , to  );

 if ((e=specific_realCopy(from,dest_root))!= 0)
 {
   werr(TRUE,"%s",e->errmess);
   return FALSE;               
 }

 return TRUE;    
}
 
/* ----------------------------- specific_ramcopy --------------------------
 *
 * Description : Achieves a ram copy of the assembler
 *
 * Parameters  : char *from      - source
 *             : char *to        - object
 *             : char *dest_root - destination root 
 * Return      : None...
 * Other Info  : None...            
 *
 */                                

BOOL specific_ramcopy ( char *from , char *to , char *dest_root )
{
char             dest_dirR    [ 1024 ];
char             dest_dirF    [ 1024 ];
_kernel_oserror                     *e;
 
    strcpy ( dest_dirR , "RAM:$.Root." );
    strcat ( dest_dirR , to            );
                        
    if ((e=specific_realCopy(from,dest_dirR))!= 0)
     return FALSE;

    strcpy ( dest_dirF , "adfs::"       );
    strcat ( dest_dirF , dest_root      );
    strcat ( dest_dirF , to             );                 
                       
    if ((e=specific_realCopy(dest_dirR,dest_dirF))!=0) 
     return FALSE;

    _kernel_system ( "wipe RAM:$.Root.* RF~C~V"   , 0 );   

 return TRUE;
}

/* -------------------------- specific_fcopy --------------------------------
 *
 * Description : Generalised forcecopy routine which capture the error 
 *               messages
 *
 * Parameters  : char *from - form directory 
 *             : char *to   - to directory
 * Return      : none...
 * Other Info  : veneering
 *
 */

void specific_fcopy   ( char *from , char *to , char *dest_root )
{  
_kernel_oserror *e;
                 
 strcat ( dest_root  , to  );

 if ((e=specific_realFCopy(from,dest_root)) != 0)
  werr(FALSE, "%s", e->errmess);     
}

/* -------------------------- specific_toWinchester ------------------------
 *
 * Description : install to a winchester
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : None...
 *
 */

void specific_toWinchester ( void )
{        
char  dest_root    [350];
char  dest_dir     [350];
char  buffer      [1024];
char  sonofbuffer [1024];  
FILE            *fp_boot;
FILE             *fp_run;     
_kernel_swi_regs       r;
_kernel_oserror       *e;

      os_read_var_val( "system$path", buffer , 1023 );
                                                    
      if ( !strlen ( buffer ) )
       werr ( 1 , "!System not seen ");                                   
      else
      {
      
      strcpy ( dest_root , machine_path () );
      strcat ( dest_root , "."             );

      if ( ProgEx )
      {
       strcpy        ( dest_dir                , dest_root         );
       COPY ( "adfs::InstallA.$.User" , "User" , dest_dir );
      }
       
      if ( ProgEx )
      {   
       strcpy        ( dest_dir                , dest_root         );
       COPY ( "adfs::WorkDiscA.$.user"                     , 
                       "user"                                       ,
                       dest_dir                                    );   
      }
                       
       strcpy        ( dest_dir                , dest_root         );
       COPY ( "adfs::WorkDiscA.$.Library"                  , 
                       "library"                                    ,
                       dest_dir                                    );  

       strcpy        ( dest_dir                , dest_root         );
       COPY ( "adfs::BootDiscA.$.DDE"                      , 
                       "DDE"                                        ,
                       dest_dir                                    );                                                                
      strcpy(dest_dir, "<System$Dir>.Modules.chck" );                       

      if ( (fp_run = fopen(dest_dir, "w")) == NULL )
       werr ( 1 , "Cannot copy modules to <System$Dir>.Modules");                                   
      else
      {
       fclose ( fp_run   );  
       remove ( dest_dir );  
      }

      strcpy        ( dest_dir          , ""                    ); 
      COPY ( "adfs::BootDiscA.$.!System.Modules"        ,
                      "<System$Dir>.Modules"                     ,
                      dest_dir                                  );
                                                                 
      }

      Complete = TRUE;
}            



/* -------------------------- specific_toNetwork ---------------------------
 *
 * Description : install to Newwork
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : None...
 *
 */

void specific_toNetwork ( void )
{                       
char dest_root    [350];
char dest_dir     [350];
char buffer      [1024];
char sonofbuffer [1024];
FILE            *fp_run;
FILE           *fp_boot;

      

      strcpy        ( dest_root               , machine_path ()   ); 
      strcat        ( dest_root               , "$."              );               

      strcpy        ( dest_dir                , dest_root         );
      strcat        ( dest_dir                , "DDETools"        );
      specific_cdir ( dest_dir );

      strcpy        ( dest_dir                , dest_root         );
      strcat        ( dest_dir                , "UserWorkA"       );
      specific_cdir ( dest_dir );     
          
      if ( ProgEx )
      {
       strcpy        ( dest_dir              , dest_root         );
       COPY ( "adfs::InstallA.$.User"                    ,
                       "UserWorkA.User"                           ,
                       dest_dir                                  );
      }
                   
      if ( ProgEx )
      { 
       strcpy        ( dest_dir              , dest_root         );
       COPY ( "adfs::WorkDiscA.$.user"                   ,
                       "UserWorkA.User"                           ,
                       dest_dir                                  );
      }     
      
      strcpy         ( dest_dir              , dest_root         );
      COPY  ( "adfs::WorkDiscA.$.Library"                ,
                       "UserWorkA.Library"                        ,
                       dest_dir                                  );

      strcpy         ( dest_dir              , dest_root         );
      COPY  ( "adfs::WorkDiscA.$.!DDETmp"                ,
                       "UserWorkA.!DDETmp"                        ,
                       dest_dir                                  );

        
      strcpy        ( dest_dir              , dest_root        );
      COPY ( "adfs::BootDiscA.$.DDE"                   ,
                      "DDETools.DDE"                            ,
                      dest_dir                                 );
                                   
      strcpy        ( dest_dir              , dest_root        );
      COPY ( "adfs::BootDiscA.$.!System"               ,
                      "DDETools.!System"                        ,
                      dest_dir                                 );
 


      strcpy        ( buffer             , dest_root                 );
      strcat        ( buffer             , "DDETools.DDE.!Boot.!Boot");

      if ((fp_boot = fopen(buffer, "a")) == 0)
      {
         werr(TRUE, "Couldn't open boot file %s", buffer);
      }                 

      strcpy        ( buffer             , dest_root                 );
      strcat        ( buffer             , "DDETools.DDE.!Boot.!Run" );
     
      if ((fp_run = fopen(buffer, "a")) == 0)
      {
         werr(TRUE, "Couldn't open run file %s", buffer);
      }

      fprintf(fp_boot , "\n*set DDE$Path net:&.DDETools.DDE.\n");                           
      fprintf(fp_run  , "\n*set DDE$Path net:&.DDETools.DDE.\n"); 

      fclose(fp_boot);
      fclose(fp_run);

      Complete = TRUE;
}

/* -------------------------- specific_toFloppy ---------------------------
 *
 * Description : install to Floppy
 *
 * Parameters  : None...
 * Return      : None...
 * Other Info  : None...
 *
 */

void specific_toFloppy ( void )
{
char dest_root     [ 350 ]; 
char dest_root1    [ 350 ];
char dest_dir      [ 350 ];
char dest_dir1     [ 350 ];
char buffer       [ 1024 ];
char sonofbuffer  [ 1024 ];
FILE               *fp_run;
FILE              *fp_boot;
int                ramsize;
    

    /************************************************************
     * Floppy installation                                      *
     ************************************************************/
     
    strcpy ( dest_root  , "Ram:$.Root." );
    strcpy ( dest_root1 , "adfs::"      );                     
  
    ramsize = ramcontrol_readramsize ( );
    ramcontrol_requestramsize ( 1024*600 );
 
    _kernel_system("cdir RAM:$.Root", 0 );
   
    ask_nicely ( 0 , " Insert new formatted disc to be 'UserWorkA' ");                  
    _kernel_system ( "namedisc :0 UserWorkA", 0 );
                               
    /************************************************************
     * Programming Examples                                     *
     ************************************************************/

    if ( ProgEx )
    {             
     RAMCOPY ( "adfs::InstallA.$.user"              , 
                        "User"                               ,
                        "UserWorkA.$."                      );
    }                            
                                                                  
    if ( !Ramdisc )
    {
    RAMCOPY ( "adfs::WorkDiscA.$.Library"                    , 
                       "Library"                             ,
                       "UserWorkA.$."                       );
    }

    if ( ProgEx )
    {
     RAMCOPY ( "adfs::WorkDiscA.$.User"             , 
                        "User"                               ,
                        "UserWorkA.$."                      );
    }

    RAMCOPY ( "adfs::WorkDiscA.$.!DDEtmp"           , 
                       "!DDETmp"                             ,
                       "UserWorkA.$."                       );

    if ( Ramdisc )
    {
     ask_nicely ( 0 , " Insert new formatted disc to be 'RamBootA' ");                  
     _kernel_system ( "namedisc :0 RamBootA", 0 );
                                                       
    /************************************************************
     * Library copy                                             *
     ************************************************************/   

     RAMCOPY ( "adfs::WorkDiscA.$.Library"           , 
                        "Library"                             ,
                        "RamBootA.$."                        );

     if ( ( fp_boot = fopen ("adfs::RamBootA.$.!Boot","w")) == 0 )
     {
      werr(TRUE, "Couldn't open boot file %s", buffer);
     }
   
     fprintf
     (fp_boot, "\n*copy adfs::0.library RAM:$.Library R~CF");
         
     fclose ( fp_boot ); 

     _kernel_system ( "settype adfs::RamBootA.$.!Boot Obey"   , 0 );
    }                   

    /************************************************************
     * Boot Disc                                                *
     ************************************************************/

    ask_nicely ( 0 , " Insert new formatted disc to be 'UserBootA' ");                  
    _kernel_system ( "namedisc :0 UserBootA", 0 );

    /************************************************************   
     * Copy DDE                                                 *
     ************************************************************/                                                         

    RAMCOPY ( "adfs::BootDiscA.$.DDE"               , 
                       "DDE"                                 ,
                       "UserBootA.$."                       );

    RAMCOPY ( "adfs::BootDiscA.$.!System"           , 
                       "!System"                             ,
                       "UserBootA.$."                       );
                      
    _kernel_system        ( "wipe RAM:$.Root RF~C~V"   , 0   );
    ramcontrol_setramsize ( ramsize                          );  

    Complete = TRUE;
}                      

/* --------------------------- specific_doInstall --------------------------
 *
 * Description : this does the actual installation procedure
 *
 * Parameters  : dbox d - dialogue box in question
 * Return      : None...
 * Other Info  : None...
 *
 */

BOOL specific_doInstall(dbox d)
{                                 
BOOL             Winchester;
BOOL             Network;
BOOL             Floppy;
   
   /********************************************************************
    * Set Type of Transfer                                             *
    ********************************************************************/

   Complete   = FALSE;
    
   Winchester = machine_isWinchester ();
   Network    = machine_isNetwork    ();
   Floppy     = machine_isFloppy     (); 

#ifdef DEBUG
   werr (0," Wini-%d Net-%d Flop-%d ",Winchester,Network,Floppy); 
#endif

   /********************************************************************
    * Various Setup options                                            *
    ********************************************************************/

   ProgEx     = specific_getIcon (d , install_setup_IProgEgs    );
   Overwrite  = specific_getIcon (d , install_setup_IOverWrite  );
   Ramdisc    = specific_getIcon (d , install_setup_IRamDisc    );    
   
   /********************************************************************
    * Type of Copying                                                  *
    ********************************************************************/
  
#ifdef DEBUG
    werr ( 0                        ,
          " P-%d C-%d O-%d R-%d "   ,
          ProgEx                    ,
          CrunchHdr                 ,
          Overwrite                 ,
          Ramdisc                  );
#endif

   if ( Winchester ) specific_toWinchester ( );
   if ( Floppy     ) specific_toFloppy     ( );
   if ( Network    ) specific_toNetwork    ( );
   

  return Complete;           
}

/* end of Specific.c */
