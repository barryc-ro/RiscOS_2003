
# Patch to allow RISC iX 1.2 to boot on RISC OS 3.

# The existing code in the boot modules does an OS_Byte 129 to read
# the operating system version number, and uses the result to determine
# whether it is on an A540/R260/R225, or a "standard" (A400/R140 etc.)
# machine. This is a totally bogus thing to do, as RISC OS 2.01 will run
# quite happily on a "standard" machine. The code concerned is
# approximately:

#   switch (os_version)
#   {
#   case &A0:                           /* Arthur 1.20 */
#   case &A1:                           /* RISC OS 2.00 */
#       hardware = STANDARD;
#       break;
#
#   case &A2:                           /* RISC OS 2.01 */
#       hardware = A540;
#       break;
#
#   default:
#       panic("Unknown machine hardware");
#   }

# Since RISC OS 3.00 returns &A3 for the os_version, RISC iX fails to
# boot. The actual machine type derived has very little effect anyway,
# even though it is passed to the RISC iX kernel and used. The only effect
# of any consequence is that if it thinks it is on an A540, RISC iX will
# not look for an on board ST506 controller, and device numbers of any
# ST506 podules will be lower as a result. (If there are no podules, then
# the ST506 driver code will be thrown away and the memory it was occupying
# scavenged for other things.) If you tell RISC iX it is on a "standard"
# machine when in fact it is on an A540, it will try to access the on board
# ST506 controller, fail (because there isn't one), report an error and
# continue, with the ST506 podule device numbers being greater than they
# would previously have been. (Even if there are no ST506 podules, the
# memory used by the code will not be scavenged as RISC iX thinks it has a
# controller even though it failed.) All in all, not much of a difference.

# The only other hardware differences between the A540 and "standard"
# machines are the selectable VIDC clocks on the A540 (24 MHz, 25.175 MHz
# and 36 MHz), the extra memory (8, 12 or 16 MB), the ARM3, and the ability
# to disable the reset key on the A540. The VIDC clocks are not a problem
# as RISC iX assumes it has got them, and switches to a 200 Hz frame rate
# special screen mode. It then switches to 36 MHz clock, and if the frame
# rate changes to 300 Hz then it has got switchable VIDC clocks. If the
# frame rate does not change, then it has not got switchable clocks.
# Similarly the memory size is not a problem as the boot module finds out
# directly from the hardware how many memory pages there are in the system,
# and passes that number to the RISC iX kernel when it is started. The ARM3
# is not a problem as the RISC iX kernel tests for the presence of an ARM3
# directly itself. Finally, the reset key disable hardware is not a problem
# as RISC iX does not use it (and neither does anything else).

# So, all in all it really doesn't make much difference. The safest option
# is to tell the RISC iX kernel that it is on a "standard" machine, then
# everything will work. If you know for a fact that you are on an A540,
# then that is the better option as you won't get the warning about a
# faulty on board ST506 controller, and the memory for the ST506 driver
# code will be scavenged (unless of course you have an ST506 podule
# in your A540). Plus it is generally a Good Thing (TM) for the hardware
# you think you are running on to conincide with what you are actually
# running on.

# Two patches are available. They both modify the code in the default:
# statement, thus RISC iX will boot with any RISC OS version number.
# One patch changes the code to tell the RISC iX kernel that it
# is running on a "standard" machine. You should use this patch if you
# are using a "standard" machine or if you are using the same files
# on a mixture of machines over a network. The other patch changes the code
# to tell the RISC iX kernel that it is running on an A540. You should use
# this patch if you are using an A540, or if you are using a "standard"
# machine and you do not access the on board ST506 controller from
# RISC iX.

# In all cases, the machine code changed is:

#       ADRNE   r0, "Unknown machine hardware"
#       BLNE    panic

# to:

#       BNE     code_for_appropriate_hardware
#       BLNE    panic


Application:SecureBoot &FFA
Description:RISC iX secure boot module
Patch:Let RISC iX 1.20 secure boot on RISC OS 3 (A540/R260 version)
File:SecureBoot &FFA
Location:&B404
ChangeWord:&128F0F08 &1A000011
VerifyWord:&1B000F00
Patch:Let RISC iX 1.20 secure boot on RISC OS 3 (R140/A400 version)
File:SecureBoot &FFA
Location:&B404
ChangeWord:&128F0F08 &1A00000F
VerifyWord:&1B000F00

Application:RISCiXFS &FFA
Description:!RISCiX boot application
Patch:Let RISC iX 1.20 boot on RISC OS 3 (A540/R260 version)
File:RISCiXFS &FFA
Location:&C168
ChangeWord:&128F0F08 &1A000011
VerifyWord:&1B000F00
Patch:Let RISC iX 1.20 boot on RISC OS 3 (R140/A400 version)
File:RISCiXFS &FFA
Location:&C168
ChangeWord:&128F0F08 &1A00000F
VerifyWord:&1B000F00

# Version 1.21 of RISCiXFS has the code in a different place.

Application:RISCiXFS &FFA
Description:!RISCiX boot application
Patch:Let RISC iX 1.21 boot on RISC OS 3 (A540/R260 version)
File:RISCiXFS &FFA
Location:&C378
ChangeWord:&128F0F08 &1A000011
VerifyWord:&1B000F00
Patch:Let RISC iX 1.21 boot on RISC OS 3 (R140/A400 version)
File:RISCiXFS &FFA
Location:&C378
ChangeWord:&128F0F08 &1A00000F
VerifyWord:&1B000F00

# Version 1.22 of SecureBoot has the code in a different place.

Application:SecureBoot &FFA
Description:RISC iX secure boot module
Patch:Let RISC iX 1.22 secure boot on RISC OS 3 (A540/R260 version)
File:SecureBoot &FFA
Location:&B614
ChangeWord:&128F0F08 &1A000011
VerifyWord:&1B000F00
Patch:Let RISC iX 1.22 secure boot on RISC OS 3 (R140/A400 version)
File:SecureBoot &FFA
Location:&B614
ChangeWord:&128F0F08 &1A00000F
VerifyWord:&1B000F00

# Patch for the pboot file for discless booting an R225. This file should be
# in the RISC iX filing system of the boot server, as /tftpboot/pboot.
# Getting access to this file so you can run !Patch on it might be awkward.
# If you have the RISC OS TCP/IP protocol suite, you could mount directory
# / or /tftpboot and patch the pboot file over NFS. Alternatively you could
# copy pboot onto an ADFS floppy disk using wradfs, patch it on the R225
# using !Patch, and transfer it back again via floppy disk to the boot
# server.

Application:pboot 0
Description:RISC iX discless primary boot file
Patch:Let RISC iX 1.2 discless boot on RISC OS 3 (A540/R225 version)
File:pboot 0
Location:&18154
VerifyWord:&E35100AE
ChangeWord:&1A00004A &1A000004
Patch:Let RISC iX 1.2 discless boot on RISC OS 3 (R140/A400 version)
File:pboot 0
Location:&18154
VerifyWord:&E35100AE
ChangeWord:&1A00004A &1A000002
