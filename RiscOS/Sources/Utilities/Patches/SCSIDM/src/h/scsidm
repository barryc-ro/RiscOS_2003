/*
 * $Header$
 * $Source$
 *
 * Copyright (c) 1989 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.5  90/08/13  15:27:26  jroach
 * Bring Risc OS and RISCiX versions in line with each other.
 * 
 * Revision 1.4  90/05/25  11:25:32  kwelton
 * Extended set of known device classes to include those defined in SCSI 2.
 * 
 * Revision 1.3  89/06/26  16:04:00  kwelton
 * Created new field in struct d_parms: d_cyls, the number of cylinders on a
 * disk.
 * 
 * Revision 1.2  89/06/08  15:54:09  kwelton
 * Space for identification text moved into struct d_parms. This is to avoid
 * identification text getting confused when the IDENTIFY on a new device is
 * OK, but a later command fails & scsidm refuses to open the device.
 * 
 * Revision 1.1  89/04/06  11:22:50  kwelton
 * Initial revision
 * 
 * 
 */

#if defined(SCSIDM_FOR_RISCOS)
#include "param.h"
#elif defined(SCSIDM_FOR_RISCiX)
#include <sys/param.h>
#endif

#define MAX_ID		30		/* max. identification text length */

	/* structure containing device parameters */
struct d_parms {
	char d_name[MAXPATHLEN];	/* device name */
	char d_ident[MAX_ID];		/* identification text */
	int d_fd;			/* device file descriptor */
	u_char d_type;			/* peripheral device type */
	u_long d_bloksize;		/* block size */
	u_char d_blokstrk;		/* no. of blocks per track */
	u_char d_heads;			/* no. of heads */
	u_long d_cyls;			/* no. of cylinders on the disk */
	u_long d_size;			/* no. of bytes on the disk */
};

	/* structure defining supported disk manager commands */
struct cmd
{
	char *c_name;		/* command name */
	char *c_help;		/* help message */
	void (*c_handler)();	/* routine to do the work */
	int c_priv;		/* privileged command? */
};

	/* structure defining extended sense codes */
struct sesc {
	int scode;
	char *cdtxt;
};

	/* function return values */
#ifndef TRUE
#define TRUE		1
#define FALSE		0
#endif /* !TRUE */

#define USEDEFAULT	(-2)
#define BADARG		(-1)
#define RETRY		2
#define GOOD		1
#define BAD		0

	/* peripheral types */
#define DAPTYPE		0x00		/* Direct Access */
#define SAPTYPE		0x01		/* Sequential Access */
#define PTRPTYPE	0x02		/* Printer */
#define PROCPTYPE	0x03		/* Processor */
#define WORMPTYPE	0x04		/* Write-Once, Read Multiple */
#define CDROMPTYPE	0x05		/* Read Only Direct Access */
#define SCANPTYPE	0x06		/* Scanner */
#define OMPTYPE		0x07		/* Optical Memory */
#define CHANGEPTYPE	0x08		/* Changer (e.g. jukebox) */
#define COMMSPTYPE	0x09		/* Communications */
#define TARGETPTYPE	0x1e		/* Target */
#define NOPTYPE		0x7f		/* strictly means LU not present */

	/* miscellaneous goodies */
#ifndef global
#define global
#define import		extern
#endif

#ifndef bool
typedef unsigned char bool;
#endif

#ifdef NULL
#undef NULL
#define NULL		((void *)0)
#endif

	/* machine specific constants */
#if defined(SCSIDM_FOR_RISCiX)
#define DIRECTORY_SEPARATOR '/'
#elif defined(SCSIDM_FOR_RISCOS)
#define DIRECTORY_SEPARATOR '.'
#endif
