/*
 * $Header$
 * $Source$
 *
 * Copyright (c) 1989 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.3  90/05/25  11:22:03  kwelton
 * Added a define for max. allowable size of SCSIFS partition (a limit
 * imposed by filecore).
 * 
 * Revision 1.2  89/10/23  14:11:50  kwelton
 * The number of user partitions has shrunk by one with the introduction of
 * P_BOOT.
 * 
 * Revision 1.1  89/04/06  11:22:41  kwelton
 * Initial revision
 * 
 * 
 */

	/* ADFS minimal boot block parameters */
#define DEFLSTOFF	0		/* start offset of defect list */
#define LOG2SCSZOFF	0x01c0		/* offset for log2 sector size */
#define SCSTRKOFF	0x01c1		/* offset for sectors per track */
#define HEADSOFF	0x01c2		/* offset for no. of heads */
#define DSKSIZOFF	0x01d0		/* offset for disk size */

	/* general boot block parameters */
#define ADFSBOOT	(0x0C00)	/* ADFS boot block address */
#define dtsize		(0x01B0)	/* ADFS defect table size */
#define ptsize		(0x0100)	/* RISC iX partition table size */
#define bbsize		(0x0200)	/* RISC iX bad block table size */

#define maxdefects (dtsize / sizeof(int))
#define SIZELIM    (512 * 1024 * 1024)    /* max partition size
					   * (filecore limit) */
#define END_DEFECT (1 << 29) /* end of ADFS defect list marker */
#define MAXDNAME   10        /* max. length of discname */

/* standard ADFS disc information record */
typedef struct {
	u_char	dr_log2secsize;
	u_char	dr_secstrk;
	u_char	dr_heads;
	u_char	dr_floppy_density;
	u_char	dr_idwidth;
	u_char	dr_log2alloc;
	u_char	dr_trackskew;
	u_char	dr_bootopt;
	u_char	dr_free_space1;
	u_char	dr_zones;
	/* shorts are aligned (so use chars and write special code) */
	u_char	dr_nonmapbits;
	u_char	dr_nonmapbitsHI;
	u_int	dr_rootSIN;
	u_int	dr_discsize;
	/* shorts are aligned (so use chars and write special code) */
	u_char	dr_discID;   /* set to a random # when formatted */
	u_char	dr_discIDHI;
	u_char	dr_discname[MAXDNAME]; /* NOT in boot block */
	char	dr_free_space2[0x0002];
	u_char	dr_drive;
	char	dr_free_space3[0x0019];
	u_char	dr_UNIXformat;
	/* shorts are aligned (so use chars and write special code) */
	u_char	dr_UNIXcylstart;
	u_char	dr_UNIXcylstartHI;
	u_char	dr_csum;
} ADFS_drecord;

	/* standard ADFS boot block */
typedef struct {
	u_int bb_defectlist[maxdefects];	/* DEFECT list */
	u_int bb_hwparams[4];			/* HW parameters */
	ADFS_drecord bb_discrec;		/* disc description */
} ADFS_bblock;

	/* data structure when using ADFS low-level SWIs */
typedef struct {
	ADFS_drecord ad_drec;
	ADFS_bblock  ad_bblock;
} ADFSaccess;

#define BOOTSIZE	(sizeof(ADFS_bblock))	/* ADFS boot block size */
#define discrecsize	(sizeof(ADFS_drecord))	/* ADFS disc record size */

#define oldmapadd	(0x0000)
#define oldmapsize	(0x0200)
#define dirsize		(0x0800)

#define OLDMAP		(0)
#define NEWMAP		(1)

#define ADFS_DiscOp	(0x040240)
#define ADFSderr	(0x0108C7) /* general ADFS disc transfer error number */

#define maxverifybad	(16)

#define oldLWM		(0x0E00)

#define defrootadd	(0x0400)	/* default ROOT directory address */

#define freelink	(1)
#define crosscheck	(3)

	/* disc information accessing macros */
#define log2secsize(dr)	(dr->dr_log2secsize)
#define bytespersec(dr)	(1 << log2secsize(dr))
#define secspertrk(dr)	(dr->dr_secstrk)
#define heads(dr)	(dr->dr_heads)
#define secspercyl(dr)	(secspertrk(dr) * heads(dr))
#define log2alloc(dr)	(dr->dr_log2alloc)
#define nonmapbits(dr)	(dr->dr_nonmapbits | (dr->dr_nonmapbitsHI << 8))
#define discID(dr)	(dr->dr_discID | (dr->dr_discIDHI << 8))
#define discsize(dr)	(dr->dr_discsize)
#define cylsize(dr)	(bytespersec(dr) * secspertrk(dr) * heads(dr))
#define UNIXcyl(dr)	(dr->dr_UNIXcylstart | (dr->dr_UNIXcylstartHI << 8))
#define cyls(dr)	(discsize(dr) / cylsize(dr))

	/* construct the disc record nonmapbits field */
#define put_nonmapbits(dr,v) {                                              \
                              dr->dr_nonmapbits = (v & 0xFF);               \
                              dr->dr_nonmapbitsHI = ((v >> 8) & 0xFF);      \
                             }

	/* construct the disc ID field */
#define put_discID(dr,v) {                                                  \
                          dr->dr_discID = (v & 0xFF);                       \
                          dr->dr_discIDHI = ((v >> 8) & 0xFF);              \
                         }

	/* construct the RISC iX information cylinder field */
#define put_UNIXcyl(dr,v) {                                                 \
                           dr->dr_UNIXcylstart = (v & 0xFF);                \
                           dr->dr_UNIXcylstartHI = ((v >> 8) & 0xFF);       \
                          }

	/* translate between byte addresses and cylinder counts */
#define tcyls(a,dr)	(a / cylsize(dr))
#define taddr(c,dr)	(c * cylsize(dr))

	/* extract low current cylinder and pre-compensation cylinder information */
#define get_lowc(bp)	(bp->bb_hwparams[2] & 0x0000FFFF)
#define get_prec(bp)	(bp->bb_hwparams[2] >> 16)

	/* make low current cylinder and pre-compensation cylinder HW information */
#define put_lowpre(bp,l,p) { bp->bb_hwparams[2] = (l | (p << 16)); }

	/* extract parking cylinder information */
#define get_park(bp)	(tcyls(bp->bb_hwparams[3],(&(bp->bb_discrec))))

	/* structure of the RISC iX information cylinder */
/* logical format identifier (stored in ADFS boot block) for this structure */
#define RISCiXDISCFORMAT (2)

	/* directory magic number */
#define hmagic (('H' <<  0) | ('u' << 8) | ('g' << 16) | ('o' << 24))

	/* UNIX partition information */
#define NUSERPART	(MAX_PARTITION - 2)

#define MAPROWS		15		/* no of rows in partition map */
#define MAPCOLS		60		/* "" "" cols ""     ""     "" */
#define MAPSIZE	MAPROWS * MAPCOLS	/* total size of partition map */

	/* structure to hold the partition map info */
typedef struct {
	u_int blok1;
	u_int blokn;
	u_int map1;
	u_int mapn;
} MAPINFO;

	/* linked list of partition tables */
typedef struct _ptlist {
	UNIX_Info pt;
	bool current;
	struct _ptlist *nextpt;
} PTLIST;
