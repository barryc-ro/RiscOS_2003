        TTL                                     > s.checksum
        ; ---------------------------------------------------------------------

a1      RN      0
a2      RN      1
a3      RN      2
a4      RN      3
v1      RN      4
v2      RN      5
v3      RN      6
v4      RN      7
v5      RN      8
v6      RN      9
fp      RN      11    ;10
ip      RN      12    ;11
sp      RN      13    ;12
sl      RN      10    ;13
lk      RN      14
pc      RN      15

link    RN      lk

r0      RN      0
r1      RN      1
r2      RN      2
r3      RN      3
r4      RN      4
r5      RN      5
r6      RN      6
r7      RN      7
r8      RN      8
r9      RN      9
r10     RN      10
r11     RN      11
r13     RN      13
r14     RN      14

lr      RN      14

        ; ---------------------------------------------------------------------

        AREA    checksum,CODE,REL,PIC,READONLY

        ; ---------------------------------------------------------------------
        ; newmapcheck:
        ; in:  r0 = base address
        ;      r1 = count
        ; out: r0 = checksum
newmapcheck
        STMFD   sp!,{r1-r3,link}

        MOV     r2,r1
        MOV     r1,r0

        BL      newcheck

        LDMFD   sp!,{r1-r3,pc}^

        ; ---------------------------------------------------------------------
        ; in:   r1 = base address
        ;       r2 = length
        ; out:  r0 = checksum

newcheck
        MOV     r0,#&00
        ADDS    r2,r1,r2  ; C = 0
loop
        LDR     r3,[r2,#-4]!
        ADCS    r0,r0,r3
        TEQS    r2,r1
        BNE     loop
        AND     r3,r3,#&FF
        SUB     r0,r0,r3
        EOR     r0,r0,r0,LSR #16
        EOR     r0,r0,r0,LSR #8
        AND     r0,r0,#&FF
        MOVS    pc,link

        ; ---------------------------------------------------------------------
        ; unsigned int calcdefectsum(char *defectlist) ;
        ; returns the defect list terminination word
        ; this assumes that the current list termination word is &20000000
|calcdefectsum|
        STMFD   sp!,{a2-a3,lk}

        MOV     a2,#&00000000
defcalcloop
        LDR     a3,[a1],#&04            ; load defect
        CMP     a3,#&20000000           ; is this the termination word
        EORCC   a2,a3,a2,ROR #13        ; NO, then accumulate check
        BCC     defcalcloop             ; and get the next defect

        EOR     a2,a2,a2,LSR #16
        EOR     a2,a2,a2,LSR #8
        AND     a2,a2,#&FF
        ORR     a3,a3,a2
        STR     a3,[a1,#-&04]
        MOV     a1,a3

        LDMFD   sp!,{a2-a3,pc}^

        ; ---------------------------------------------------------------------

        EXPORT  |newmapcheck|
        EXPORT  |calcdefectsum|

        ; ---------------------------------------------------------------------
        END
