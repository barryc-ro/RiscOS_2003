/*
 * ro_SCSI - RISC OS specific routines
 *
 *
 *
 *
 *
 *
 *
 *
 */


#include "time.h"
#include "ioctl.h"
#include "ps_scsi.h"
#include "ps_direct.h"
#include "scsidm.h"

#define debug      FALSE
#define debugioctl FALSE

#define swiOS_Write0       0x2
#define swiOS_Word         0x7

#define swiSCSI_Version    0x403C0
#define swiSCSI_Initialise 0x403C1
#define swiSCSI_Control    0x403C2
#define swiSCSI_Op         0x403C3
#define swiSCSI_Status     0x403C4
/*
 swiSCSI_ReadControlLines  0x403C5   } Not implemented by Acorn SCSIdriver
 swiSCSI_EEProm            0x403C6   }
*/
#define swiSCSI_Reserve    0x403C7


/* Reason code (R0) for swiSCSI_Control */
#define RC_ErrorResponse          4
#define subRC_InhibitRequestSense 0

/* Reason code (R0) for swiSCSI_Reserve */
#define RC_Claim           0
#define RC_ForceClaim      1
#define RC_Release         2


typedef struct {
        int r[10];               /* only r0 - r9 matter for SWIs */
} os_regset;

typedef struct {
        int errnum;             /* error number */
        char errmess[252];      /* error message (zero terminated) */
} os_error;




extern int errno = 0;

/*
extern int errno()
{ return(0);
}
*/


int fileno(num)
int num;
{
 /* I don't know what this does, or what its uses are,
     but I've always liked 42...
  */
  num = 42;
  return(num);
}


/* isatty(num) - does input come from the keyboard
                 for RISC OS this is (should always be) true
*/
int isatty(num)
int num;
{
  num = 1;
  return(num);
}


int open(name, pmode)

char *name;
int  pmode;

{ int deviceID;
  os_regset r;
  os_error *error;

#if debug
  printf("!!! open(%s,%d) !!!\n",name,pmode);
#else
  pmode = pmode;
#endif

  sscanf(name,"%d",&deviceID);

/*
  return( (deviceID>255 || deviceID<0) ? -1 : deviceID);
*/

  if ( (deviceID>255) || (deviceID<0)) return(-1);

/*                                                                         */
/* DeviceID looks reasonable, so..                                         */
/*                                                                         */

/*                                                                         */
/* Winge if the SCSIdriver isn't alive                                     */
/*                                                                         */
  if (SWIcall(swiSCSI_Version, &r))
    {
      printf("SCSIdriver not present\n");
      return(-1);
    }


/*                                                                         */
/* Do SWI "SCSI_Reserve",ForceClaim to make any current user of the device */
/* 'let go' ie if ScsiFs has reserved the device and the drive is mounted, */
/* this will force a dismount.                                             */
/* This should mean we can format/partition/mapdefects with impunity.      */
/*                                                                         */
  r.r[0] = RC_ForceClaim;
  r.r[1] = deviceID;
  r.r[2] = r.r[3] = 0;          /* Adr & R12 of 0, ie don't call us...   */
  r.r[8] = (int) &r;            /* Probably as good an access key as any */
  if (SWIcall(swiSCSI_Reserve, &r))
    {
      error = (os_error *)r.r[0];
      printf("%s\n",error->errmess);
      return(-1);
    }


/*                                                                         */
/* Having claimed the device, release it immediately, so that if we crash  */
/* the device is not permanently reserved.                                 */
/* >>> We probably should do this in close instead, but here will do       */
/* >>> if we do move it, use some other magic number than (int)&r as the   */
/* >>> access key                                                          */
/*                                                                         */
  r.r[0] = RC_Release;
  r.r[1] = deviceID;
  r.r[8] = (int) &r;
  if (SWIcall(swiSCSI_Reserve, &r))
    {
      error = (os_error *)r.r[0];
      printf("%s\n",error->errmess);
      return(-1);
    }


/*                                                                         */
/* ScsiDM wants to see status 'check condition' and do its own request-    */
/* sense calls, so tell ScsiDriver not to do automatic request-sense.      */
/*                                                                         */
  r.r[0] = RC_ErrorResponse;
  r.r[1] = deviceID;
  r.r[2] = subRC_InhibitRequestSense;
  if (SWIcall(swiSCSI_Control, &r))
    {
      error = (os_error *)r.r[0];
      printf("%s\n",error->errmess);
      return(-1);
    }

  return(deviceID);     /* a small number for the file descriptor */
}


void close(filedesc)
int filedesc;
{
#if debug
  printf("!!! close(%d) !!!\n",filedesc);
#else
  filedesc = filedesc;
#endif
}


int access(filedesc)
int filedesc;
{
#if debug
  printf("!!! access !!!");
#else
  filedesc = filedesc;
#endif
  return(0);
}


void ftruncate(filedesc)
int filedesc;
{
#if debug
  printf("!!! ftruncate !!!");
#else
  filedesc = filedesc;
#endif
}


void bcopy(from, to, size)
char *from;
char *to;
int  size;
{
#if debug
  printf("!!! bcopy !!!");
#endif
  while (size-- > 0) *to++ = *from++ ;
}


void bzero(baddr, size)
char *baddr;
int  size;
{
#if debug
  printf("!!! bzero !!!");
#endif
  while (size-- > 0) *baddr++ = 0;
}


/* Called by wrtptable (c.intcmds) and scanptable (c.cmds)     */
/* neither use second parameter (timezone), or the microsecond */
/* field of parameter one, so these return zero.               */


void gettimeofday(tvalue,tzone)
struct timeval  *tvalue;
struct timezone *tzone;
{
  os_regset r;

  struct
  { long lo;
    long hi;
  } time;

#if debug
  printf("!!! gettimeofday !!!");
#endif

  if (tvalue != NULL)
  {
    r.r[0] = 14;              /* OS_Word 14 (Read CMOS clock)        */
    r.r[1] = (int)&time;
    time.lo = 3;              /* rc = read real-time in 5byte format */

    SWIcall(swiOS_Word, &r);

/* RISCOS returns a 5byte time, centiseconds since 00:00:00 1st January 1900 */

    tvalue->tv_sec = ((time.hi & 0xFF)<<24) | ((time.lo>>8) & 0x00FFFFFF);

/* tv_sec now centiseconds/256 since 1900             */
/* convert to seconds since 00:00:00 1st January 1900 */

    tvalue->tv_sec  = (tvalue->tv_sec-0x336EDB55)/25;
    tvalue->tv_sec  =  tvalue->tv_sec*64;
    tvalue->tv_usec = 0;
  }

  if (tzone != NULL)
  {
    tzone->tz_minuteswest = 0;
    tzone->tz_dsttime     = 0;
  }
}


int ioctl(d, request, argp)
    int d;
    int request;
    char *argp;

{ struct scsiop *o = (struct scsi_op *) argp;
  int cdblen;
  os_regset r;
  os_error *error;

#if debugioctl
  printf("!!! ioctl(%x,%x,%x) !!!\n\r",d,request,(int)argp);
#endif

  switch (request)
  { case SCSIDO:

#if debugioctl
      printf("!!! SCSIDO ");
      printf("CBD is [%2x %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x]\n\r",
              o->cdb[0],o->cdb[1],o->cdb[2],o->cdb[3],o->cdb[4],o->cdb[5],
              o->cdb[6],o->cdb[7],o->cdb[8],o->cdb[9],o->cdb[10],o->cdb[11]
        );
      printf("!!! xfer count is &%x, xfer addr is &%x ",o->xfer,(int)o->addr);
      printf("timeout is &%x, flags is &%x\n\r",o->timeout,o->flags);
#endif
      switch (o->cdb[0] & 0xE0)
      { case 0x00: cdblen = 6 ; break;
        case 0x20: cdblen = 10; break;
        case 0x40:
        case 0x60:
        case 0x80:
        case 0xA0: cdblen = 12; break;
        case 0xC0:
        case 0xE0: break;
      }

      r.r[0] = ((o->flags & 0x3) << 24) | ( d & 0xFF);   /* talk to device d */
      r.r[1] = cdblen;
      r.r[2] = (int) &o->cdb[0];            /* scsi cdb                      */
      r.r[3] = (int)o->addr;                /* RAM ptr for start of transfer */
      r.r[4] = o->xfer;                     /* transfer count (bytes)        */
      r.r[5] = o->timeout;                  /* timeout in centi-seconds      */
      r.r[5] = 0;                           /* Callback address (not used)   */
      r.r[6] = 0;                           /* Callback R12 (not used)       */

      o->status = SCSI_GOOD_STATUS;

      if (SWIcall(swiSCSI_Op, &r))
        {
          error = (os_error *)r.r[0];

#if debugioctl
          printf("!!error : %s !!",error->errmess);
#endif
          if ((error->errnum & 0xFFFFFF00)==0x00020100)
          {
            switch (error->errnum & 0xFF)
            {
              case 0x0A: o->status = SCSI_TIMEOUT;         break;
              case 0x0B: o->status = SCSI_EXPIRED;         break;
              case 0x80: o->status = SCSI_CHECK_CONDITION; break;
              case 0x81: o->status = SCSI_BUSY;            break;
              case 0x82: o->status = r.r[1] & 0xFF;        break;
            }
          }
        }
#if debugioctl
      printf("!!! bytes untransfered is &%x",r.r[4]);
#endif
      break;

#if debugioctl
    case READPART:
      printf("!!! Asked to read the RAM partition table !!!\n");
      break;

    case WRITEPART:
      printf("!!! Asked to write the RAM partition table !!!\n");
      break;

    case WRITEBLOCK:
      printf("!!! Asked to write the BLOCK size !!!\n");
      break;

    default:
      printf("!!! I don't understand request %d in ioctl !!!\n",request);
      break;
#else
    default:          /* READPART/WRITEPART & WRITEBLOCK are of no interrest */
      return(0);
      break;
#endif
  }
  return(0);
}

