/*
 * $Header$
 * $Source$
 *
 * Copyright (c) 1989 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.6  91/10/16  14:38:03  kwelton
 * Added Matsushita LF-7010 to list of known optical drives.
 * Smartened up command tables: optical drives can now use
 * the disconnect, format, mapdefects, prdefects and verify
 * commands (they may not work for some drives, but they do
 * on others therefore should be allowed).
 * 
 * Revision 1.5  91/09/11  15:33:12  kwelton
 * Added new disconnect command.
 * 
 * Revision 1.4  90/08/13  15:13:13  jroach
 * Bring RISC OS and RISC iX version in line with each other.
 * 
 * Revision 1.3  90/08/02  15:50:20  kwelton
 * Added new command probe: analagous to RISC OS's *devices.
 * 
 * Revision 1.2  90/05/25  10:51:12  kwelton
 * Added support for new command section(), and created a new set of
 * command tables: one for use before device is selected, and one
 * providing a set of commands suitable for optical devices.
 * 
 * Revision 1.1  89/04/06  11:21:56  kwelton
 * Initial revision
 * 
 *
 */

#if defined(TOOL_RCS) && !defined(lint)
static char RcsId[] = "$Header$";
#endif

#include "scsidm.h"

/*
 * scsidm - program to provide low level SCSI disk management
 *
 * routines this segment, cmdtab.c:
 *
 * declaration of various tables
 *
 */

	/* disk manager supported commands */

import void dummyfunc();

import void device(), diagnose(), disconnect(), format(), help(), mapdefects(),
	mkdisktab(), namepart(), prdefects(), partition(), prptable(),
	quit(),	section(), sensemode(), selectmode(), verify(),
        scanptable(), probe();

static char devicehelp[] =	"print or select the current SCSI device";
static char diagnosehelp[] =	"ask current SCSI device to run internal diagnostics";
static char disconnecthelp[] =	"prevent/allow device disconnection";
static char formathelp[] =	"format the current SCSI device";
static char helphelp[] =	"get help on commands";
static char mapdefectshelp[] =	"map out bad blocks on the current SCSI device";
static char mkdisktabhelp[] =	"write sample disktab entry to a file";
static char nameparthelp[] =	"define partition names";
static char partitionhelp[] =	"partition the current SCSI device";
static char prdefectshelp[] =	"print the list of growing defects";
static char probehelp[] = 	"list all known SCSI targets";
#if defined(SCSIDM_FOR_RISCOS)
static char prptablehelp[] =	"print UNIX partition table";
#elif defined(SCSIDM_FOR_RISCiX)
static char prptablehelp[] =	"print RISCiX partition table";
#endif
static char quithelp[] =	"exit scsidm";
static char scanptablehelp[] =	"scan the disk for partition tables";
#if defined(SCSIDM_FOR_RISCOS)
static char sectionhelp[] = 	"divide the disk into RISCOS & RISCiX areas";
#elif defined(SCSIDM_FOR_RISCiX)
static char sectionhelp[] = 	"divide the disk into SCSIFS & RISCiX areas";
#endif
static char selectmodehelp[] =	"write mode select data";
static char sensemodehelp[] =	"read mode select data";
static char verifyhelp[] =	"verify the current SCSI device";


/*
 * default command table declaration
 */
global struct cmd defcmds[] =
{
	{ "device",	devicehelp,	device,		0 },
	{ "diagnose",	diagnosehelp,	diagnose,	0 },
	{ "disconnect",	disconnecthelp,	disconnect,	0 },
	{ "format",	formathelp,	format,		1 },
	{ "help",	helphelp,	help,		0 },
	{ "mapdefects",	mapdefectshelp,	mapdefects,	1 },
#if defined(SCSIDM_FOR_RISCiX)
	{ "mkdisktab",	mkdisktabhelp,	mkdisktab,	1 },
#endif
	{ "namepart",	nameparthelp,	namepart,	1 },
	{ "partition",	partitionhelp,	partition,	1 },
	{ "prdefects",	prdefectshelp,	prdefects,	1 },
	{ "probe",	probehelp,	probe,		0 },
	{ "prptable",	prptablehelp,	prptable,	1 },
	{ "quit",	quithelp,       quit,		0 },
	{ "scanptable",	scanptablehelp,	scanptable,	1 },
        { "section",    sectionhelp,    section,        1 },
	{ "selectmode",	selectmodehelp,	selectmode,	0 },
	{ "sensemode",	sensemodehelp,	sensemode,	0 },
	{ "verify",	verifyhelp,	verify,		1 },
	{ "?",		helphelp,	help,		0 },
	{ "",	  0,	      0,	      0 }
};

global int ndefcmds = sizeof (defcmds) / sizeof (defcmds[0]);

/*
 * command table for optical devices
 */
global struct cmd optcmds[] = {
	{ "device",	devicehelp,	device,		0 },
	{ "diagnose",	diagnosehelp,	diagnose,	0 },
	{ "disconnect",	disconnecthelp,	disconnect,	0 },
	{ "format",	formathelp,	format,		1 },
	{ "help",	helphelp,	help,		0 },
	{ "mapdefects",	mapdefectshelp,	mapdefects,	1 },
#ifdef SCSIDM_FOR_RISCiX
	{ "mkdisktab",	mkdisktabhelp,	mkdisktab,	1 },
#endif
	{ "namepart",	nameparthelp,	namepart,	1 },
	{ "partition",	partitionhelp,	partition,	1 },
	{ "prdefects",	prdefectshelp,	prdefects,	1 },
	{ "probe",	probehelp,	probe,		0 },
	{ "prptable",	prptablehelp,	prptable,	1 },
	{ "quit",	quithelp,       quit,		0 },
	{ "scanptable",	scanptablehelp,	scanptable,	1 },
        { "section",    sectionhelp,    section,        1 },
	{ "selectmode",	selectmodehelp,	selectmode,	0 },
	{ "sensemode",	sensemodehelp,	sensemode,	0 },
	{ "verify",	verifyhelp,	verify,		1 },
	{ "?",		helphelp,	help,		0 },
	{ "",	  0,	      0,	      0 }
};

global int noptcmds = sizeof(optcmds) / sizeof(optcmds[0]);

/*
 * command table to be used before a device has been selected
 */
global struct cmd initcmds[] =
{
	{ "device",	devicehelp,	device,		0 },
	{ "help",	helphelp,	help,		0 },
	{ "probe",	probehelp,	probe,		0 },
	{ "quit",	quithelp,       quit,		0 },
	{ "?",		helphelp,	help,		0 },
	{ "",	  0,	      0,	      0 }
};

global int ninitcmds = sizeof (initcmds) / sizeof (initcmds[0]);


	/* list of explicitly supported optical devices */
global char *KnownOpticals[] =
{
    "RICOH  RO-5030E",
    "SONY    SMO-C501",
    "MATSHITALF-7010"
};

global int NOpticals = sizeof(KnownOpticals) / sizeof(KnownOpticals[0]);

	/* SCSI extended sense codes */
global struct sesc extscodes[] =
{
	0x01,	"no index signal",
	0x02,	"no seek complete",
	0x03,	"write fault",
	0x04,	"drive not ready",
	0x05,	"drive not selected",
	0x06,	"no track zero found",
	0x07,	"multiple drives selected",
	0x08,	"logical unit communication failure",
	0x09,	"track following error",
	0x10,	"ID CRC or ECC error",
	0x11,	"unrecovered read error of data blocks",
	0x12,	"no address mark found in ID field",
	0x13,	"no address mark found in data field",
	0x14,	"no record found",
	0x15,	"seek positioning error",
	0x16,	"data synchronisation mark error",
	0x17,	"recovered read data with read retry",
	0x18,	"recovered read data with ECC correction",
	0x19,	"defect list error",
	0x1a,	"parameter overrun",
	0x1b,	"synchronous transfer error",
	0x1c,	"primary defect list not found",
	0x1d,	"compare error",
	0x1e,	"recovered ID with ECC correction",
	0x20,	"invalid command operation code",
	0x21,	"illegal logical block address",
	0x22,	"illegal function for device type",
	0x24,	"illegal field in command data block",
	0x25,	"invalid Logical Unit Number",
	0x26,	"invalid field in parameter list",
	0x27,	"device is write protected",
	0x28,	"medium has been changed",
	0x29,	"power on, or reset, or bus device reset has occured",
	0x2a,	"mode select parameters have been changed",
	0x30,	"incompatible cartridge",
	0x31,	"medium format corrupted",
	0x32,	"no defect spare location available",
	0x40,	"RAM failure",
	0x41,	"data path diagnostic failure",
	0x42,	"power on diagnostic failure",
	0x43,	"message reject error",
	0x44,	"internal controller error",
	0x45,	"select/reselect failed",
	0x46,	"unsuccessful soft reset",
	0x47,	"SCSI interface parity error",
	0x48,	"initiator detected error",
	0x49,	"inappropriate/illegal message"
};

global int nextcodes = sizeof (extscodes) / sizeof (extscodes[0]);
