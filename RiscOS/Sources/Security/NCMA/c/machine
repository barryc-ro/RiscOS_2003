#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "machine.h"
#include "module.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "ncma_url.h"
#include "ncma_utils.h"
#include "ncma_dial.h"
#include "ncma_cron.h"
#include "ncma_exec.h"
#include "ncma_smurf.h"
#include "ncma_atr.h"
#include "vectors.h"

#include "DBUG.h"



char *trans_string(NCMA_TRANS trans)
{
  static char *t_table[] = {
    "Trans_Idle",
    "Trans_Timeout",
    "Trans_CardOK",
    "Trans_CardBad",
    "Trans_CardRemoved",
    "Trans_CompleteOK",
    "Trans_CompleteBad",
    "Trans_AuthFail",
    "Trans_URLStart",
    "Trans_URLRetry",
    "Trans_Registry",
    "Trans_Shutdown",
    "Trans_ShutdownComplete",
    "Trans_URLShutdown",
    "Trans_URLShutdownCancel",
    "Trans_URLUnblock",
    "Trans_URLChangePIN",
    "Trans_URLLeavePIN",
    "Trans_PowerUp",
    "Trans_DialOK",
    "Trans_DialBad",
    "Trans_URLMismatch",
    "Trans_URLMismatchAck",
    "Trans_NCMASurf",
    "Trans_URLDownloadMin",
    "Trans_URLDownloadMax",
    "Trans_URLDownloadSched",
    "Trans_URLDownloadNak",
    "Trans_URLConnect",
    "Trans_URLConnectNak"
  };


  return(t_table[trans]);
}

char *state_string(NCMA_STATE state)
{
    static char *s_table[] = {
    "State_NCMAInit",
    "State_NCMAStart",
    "State_NCMAPanic",
    "State_NCMASleep",
    "State_NCMANoCard",
    "State_NCMABadCard",
    "State_NCMAPin",
    "State_NCMADiallingISP",
    "State_NCMABadPin",
    "State_NCMAShutdown",
    "State_NCMAUnblock",
    "State_NCMAChangePIN",
    "State_NCMANewPIN",
    "State_NCMAMismatch",
    "State_NCMABooted",
    "State_NCMADownload",
    "State_NCMAConnect"
  };

  return(s_table[state]);
}

/* this is the NCMA ASM */
NCMA_STATE machine(NCMA_TRANS trans)
{

  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: got transition %s in state %s\n", trans_string(trans), state_string(ncma_state));

/*********************************************************************************

    GLOBAL TRANSITIONS

 *********************************************************************************/

  switch(trans) { /* global transitions that apply to all states (except maybe State_Sleep) */

    case Trans_Shutdown:
    	 pre_shutdown_state = ncma_state;
    	 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: shutdown imminent - pushed state \"%s\"\n", state_string(ncma_state));
    	 //ncma_url_open("file:/ncma:poweroff.html");
    	 ncma_url_open(URL_PATH(poweroff.html));
    	 return(State_NCMAShutdown);

    case Trans_Registry: /* HACK - damn s/c layer doesn't always report Card_Removed */
         if(registry_status_cleared(BB_STATUS_INSERTED)) goto card_removed;
         break;

    case Trans_CardRemoved:
         card_removed:
    	 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: smartcard removed\n");
    	 unlock_cache();
    	 if(ncma_started) {
    	     ncma_url_open(URL_PATH(splash.html));
    	     return(State_NCMANoCard);
    	 } else return(State_NCMAInit);
    	 break;

    default:
         break;
  }

  switch(ncma_state) {

/*********************************************************************************

    STATE_NCMAINIT

 *********************************************************************************/
    case State_NCMAInit:  /* start-up, pre WIMP stage */

         switch(trans) {

	   case Trans_PowerUp:  /* and so, I awake... */

	        if(ui_present()) { /* we're coming out of standby, and we've got a UI downloaded */
	           return(State_NCMAInit); /* top level menu is already on screen, so do nothing */
	        }  			   /* next transition will be URLStart */

	   	if(!smartcard_present()) { /* powered up but no card? Fetch the blurb */
	   	  //ncma_url_open("file:/ncma:welcome.html");
#ifdef ENABLE_DEBUGGING
  	   	  ncma_url_open(URL_PATH(welcome.html));
#else
		  ncma_url_open(WELCOME_SCREEN_URL);
#endif
	   	  return(State_NCMAInit);
	   	}

	   	/* otherwise, there's a card in, so fall through */

	   	/* \/ \/ \/ \/ \/ DELIBERATE FALL THRU \/ \/ \/ \/ \/ */

           case Trans_URLStart: /* got a URL/CLI type call */

                ncma_started = 1;

	   	DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Managed access starting\n");
		if(!smartcard_present()) {
		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: no smartcard - fetching splash screen\n");
		    ncma_url_open(URL_PATH(splash.html));
		    return(State_NCMANoCard);
		}

		if(lock_card_to_box()<0) {
		    DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: lock card to box FAILED\n");
		    ncma_url_open(URL_PATH(damaged.html));
		    return(State_NCMABadCard);
		}


		if(smartcard_pin_protected()) {
		    card_attempts = smartcard_blocked();
		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: smartcard PIN protected (%d attempts) - fetching page\n", card_attempts);
		    ncma_url_open(URL_PATH(pin.html));
		    return(State_NCMAPin);
		}

		if(!smartcard_valid()) {
		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: invalid smartcard - bailing\n");
		    ncma_url_open(URL_PATH(damaged.html));
		    return(State_NCMABadCard);
		}

		if(cache_smartcard()<0) {
		    DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: smartcard content caching failed\n");
		}
		ncma_url_open(URL_PATH(connect.html));
		return(State_NCMAConnect);


	 }
	 break;

/*********************************************************************************

    STATE_NCMABADCARD

 *********************************************************************************/
    case State_NCMABadCard: /* waiting for URL/CLI call */

    	 switch(trans) {

    	     case Trans_CardRemoved: /* user has removed bad card */

    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: invalid smartcard removed\n");
    	     	  ncma_url_open(URL_PATH(splash.html));
    	     	  return(State_NCMANoCard);
    	 }

    	 break;

/*********************************************************************************

    STATE_NCMANOCARD

 *********************************************************************************/
    case State_NCMANoCard: /* waiting for a smartcard to be inserted */

         switch(trans) {
	    case Trans_CardOK:
	    	 return(State_NCMANoCard);

            case Trans_Registry: /* card activity */
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Trans_Registry s=0x%x d=0x%x\n", registry_status, registry_delta);

		if(lock_card_to_box()<0) {
		    DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: lock card to box FAILED\n");
		    ncma_url_open(URL_PATH(damaged.html));
		    return(State_NCMABadCard);
		}

	    	 if(registry_status_asserted(BB_STATUS_LOCKED)) { /* PIN protected */
	    	    card_attempts = smartcard_blocked();
 		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: smartcard PIN protected (%d attempts) - fetching page\n", card_attempts);
		    ncma_url_open(URL_PATH(pin.html));
		    return(State_NCMAPin);
		}
		else if(registry_status_asserted(BB_STATUS_BB_VALID)) { /* no PIN  was CLRD(BB_STATUS_LOCKED) */
		   DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: smartcard has no PIN\n");
		   if(cache_smartcard()<0) {
		      DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: smartcard content caching failed\n");
		   }
		   ncma_url_open(URL_PATH(connect.html));
		   return(State_NCMAConnect);
		}

		break;

            case Trans_CardBad: /* bad card */

            	 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: bad card re-inserted\n");
            	 ncma_url_open(URL_PATH(damaged.html));
            	 return(State_NCMABadCard);
         }
         break;

/*********************************************************************************

    STATE_NCMAPIN

 *********************************************************************************/
    case State_NCMAPin:

    	 switch(trans) {

	     case Trans_AuthFail:
	          DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: authorization failure\n");
	          if(card_attempts-->0) {
	            DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Bad PIN! %d attempts left\n", card_attempts);
	     	    ncma_url_open(URL_PATH(badpin.html));
	     	    return(State_NCMABadPin);
	     	  } else {
	     	    ncma_url_open(URL_PATH(unblock.html));
	     	    return(State_NCMAUnblock);
	     	  }
	     	  break;

    	     case Trans_Registry:
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Trans_Registry s=0x%x d=0x%x\n", registry_status, registry_delta);

	     	  if(registry_status_asserted(BB_STATUS_LOCKED) || registry_status_asserted(BB_STATUS_AUTHFAIL)) { /* PIN was wrong */
	     	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: authorization failed\n");

	              if(card_attempts-->0) {
	                DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Bad PIN! %d attempts left\n", card_attempts);
	     	        ncma_url_open(URL_PATH(badpin.html));
	     	        return(State_NCMABadPin);
	     	      } else {
	     	        ncma_url_open(URL_PATH(unblock.html));
	     	        return(State_NCMAUnblock);
	     	      }
	     	      break;


	     	  }

	     	  if(registry_status_asserted(BB_STATUS_BB_VALID) || registry_status_cleared(BB_STATUS_LOCKED) ||
	     	  		registry_status_cleared(BB_STATUS_AUTHFAIL)) { /* PIN was right */
	     	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: authorization successful\n");
/*
        	      if(cache_smartcard()<0) {
        		 DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: smartcard content caching failed\n");
        	      }

        	      if(ncma_dial()<0) {
        		 DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: dial initiation failed\n");
        	      }
        	      return(State_NCMADiallingISP);

	     	  }
*/
                    strncpy(old_chv_pin, chv_pin, chv_pin_size);
                    old_chv_pin_size = chv_pin_size;

		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: launching change PIN screen\n");
		    ncma_url_open(URL_PATH(change.html));
		    return(State_NCMAChangePIN);
	     	    break;
	          }


    	 }
    	 break;

/*********************************************************************************

    STATE_NCMABADPIN

 *********************************************************************************/
    case State_NCMABadPin:

         switch(trans) {

             case Trans_URLRetry:
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: getting ready for another go\n");
             	  //ncma_url_open("file:/ncma:pin.html");
             	  ncma_url_open(URL_PATH(pin.html));
             	  return(State_NCMAPin);
         }
         break;

/*********************************************************************************

    STATE_NCMACONNECT

 *********************************************************************************/
    case State_NCMAConnect:

    	 switch(trans) {
	 	case Trans_URLConnect:

		     if(ncma_dial()<0) {
		       DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: dial initiation failed\n");
		       ncma_url_open(URL_PATH(connect.html));
		       return(State_NCMAConnect);
		     }

		     return(State_NCMADiallingISP);
                     break;

                case Trans_URLConnectNak:
                     prevent_shutdown = 0;
                     shutdown_nc();
                     return(State_NCMAShutdown);
                     break;
         }
         break;


/*********************************************************************************

    STATE_NCMADIALLINGISP

 *********************************************************************************/
    case State_NCMADiallingISP:

    	 switch(trans) {

    	     case Trans_DialBad: /* Don't know what to do here! Not in the CIS!! */
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: dial failed - bummer\n");
    	     	  ncma_url_open(URL_PATH(connect.html));
    	     	  return(State_NCMAConnect);
    	     	  break;

    	     case Trans_DialOK: /* dial succeeded */
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: dial succeeded - setting cron job\n");

    	     	  ncma_cron_kick(); /* setup scheduled update */
    	     	  ncma_network_init(); /* set resolver variables */
#if 0
    	     	  if(ncma_mount_smurfs()>0) { /* smurfs are go */
#else
		     if(0) {
#endif

     	     	     if(ui_present()) {
     	     	        DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: top level UI detected - fullbooting\n");
      	     	        ncma_exec_fullboot();
      	     	        ncma_url_open("file:/UI:index.html"); /* display top level menu */
      	     	        return(State_NCMABooted);
      	     	    } else {
      	     	        DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: no top level UI - prompting for download\n");
      	     	        ncma_url_open(URL_PATH(download.html));
      	     	        return(State_NCMADownload);
      	     	    }
      	     	  } else { /* no smurfs - just fetch the URL */
      	     	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: no SMURFS capability - falling back to s/card URL\n");
    	     	      ncma_url_scard();
    	     	      return(State_NCMABooted);
    	     	  }
    	     	  break;
    	 }
    	 break;

/*********************************************************************************

    STATE_NCMABOOTED

 *********************************************************************************/
    case State_NCMABooted:

    	 switch(trans) {

    	     case Trans_NCMASurf:
    	     	  ncma_url_user();
    	     	  return(State_NCMABooted);
    	 }
    	 break;

/*********************************************************************************

    STATE_NCMADOWNLOAD

 *********************************************************************************/
    case State_NCMADownload:

         switch(trans) {

             case Trans_URLDownloadMin:
             	  ncma_url_open(URL_PATH(transfer.html));
             	  ncma_exec_fastboot();
             	  return(State_NCMABooted);
             	  break;

             case Trans_URLDownloadMax:
             	  ncma_url_open(URL_PATH(transfer.html));
             	  ncma_exec_fullboot();
             	  return(State_NCMABooted);
             	  break;

             case Trans_URLDownloadSched:
             case Trans_URLDownloadNak:
             	  prevent_shutdown = 0;
             	  shutdown_nc();
             	  return(State_NCMAShutdown);
		  break;
	 }
	 break;

 /*********************************************************************************

    STATE_NCMASHUTDOWN

 *********************************************************************************/
    case State_NCMAShutdown:

         switch(trans) {

             case Trans_URLShutdown:
                  prevent_shutdown = 0;
                  shutdown_nc();
                  if(ui_present()) ncma_url_open("file:/UI:index.html");
                  else ncma_url_open("file:/optscr:startup.html");
                  return(State_NCMAShutdown);
                  break;

             case Trans_URLShutdownCancel:
#if 0
             	  ncma_url_open("ncfrescointernal:back");
#endif
             	  return(pre_shutdown_state);
             	  break;

             case Trans_ShutdownComplete:
             	  prevent_shutdown = 1;
             	  if(ui_present()) prod_browser_after_standby();
             	  return(State_NCMAInit);
             	  break;
         }
         break;

/*********************************************************************************

    STATE_NCMAUNBLOCK

 *********************************************************************************/
    case State_NCMAUnblock:

         switch(trans) {

             case Trans_URLUnblock:
             	  ncma_url_open(URL_PATH(newpin.html));
             	  return(State_NCMANewPIN);
             	  break;
         }
         break;

/*********************************************************************************

    STATE_NCMANEWPIN

 *********************************************************************************/
    case State_NCMANewPIN:

    	 switch(trans) {

	     case Trans_AuthFail:
	          DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: PIN change failure\n");
	          if(unblock_pin_size > 0) { /* got here after a PIN unblocking attempt */
	     	    ncma_url_open(URL_PATH(unblock.html));
	     	    return(State_NCMAUnblock);
	     	  } else { /* got here after a normal 'change PIN' request */
	     	    ncma_url_open(URL_PATH(newpin.html));
	     	    return(State_NCMANewPIN);
	     	  }
	     	  break;

	     case Trans_URLMismatch:
	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: fetching PIN mismatch page\n");
	     	  ncma_url_open(URL_PATH(mismatch.html));
	     	  return(State_NCMAMismatch);
	     	  break;

    	     case Trans_Registry:
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: Trans_Registry s=0x%x d=0x%x\n", registry_status, registry_delta);

	     	  if(registry_status_asserted(BB_STATUS_LOCKED) || registry_status_asserted(BB_STATUS_AUTHFAIL)) { /* PIN was wrong */
	     	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: PIN change failed failed\n");

		      if(unblock_pin_size > 0) { /* got here after a PIN unblocking attempt */
	     	        ncma_url_open(URL_PATH(unblock.html));
	     	    	return(State_NCMAUnblock);
	     	      } else { /* got here after a normal 'change PIN' request */
	     	      	  ncma_url_open(URL_PATH(newpin.html));
	     	    	  return(State_NCMANewPIN);
	     	      }
	     	  }

	     	  if(registry_status_asserted(BB_STATUS_BB_VALID) || registry_status_cleared(BB_STATUS_LOCKED) ||
	     	  		registry_status_cleared(BB_STATUS_AUTHFAIL)) { /* PIN was right */
	     	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: authorization successful\n");

		      if(unblock_pin_size > 0) { /* got here after a PIN unblocking attempt */
		        memset(unblock_pin, 0, unblock_pin_size);
		        unblock_pin_size = 0;
		      }

                      strncpy(old_chv_pin, chv_pin, chv_pin_size);
                      old_chv_pin_size = chv_pin_size;


        	      if(cache_smartcard()<0) {
        		DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: smartcard content caching failed\n");
        	      }

		      ncma_url_open(URL_PATH(connect.html));
        	      return(State_NCMAConnect);

	     	  }
    	 }
    	 break;

/*********************************************************************************

    STATE_NCMACHANGEPIN

 *********************************************************************************/
    case State_NCMAChangePIN:

    	 switch(trans) {

    	     case Trans_URLChangePIN:
    	     	  ncma_url_open(URL_PATH(newpin.html));
    	     	  return(State_NCMANewPIN);
    	     	  break;

    	     case Trans_URLLeavePIN:
        	  if(cache_smartcard()<0) {
        	     DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: smartcard content caching failed\n");
        	  }

		  ncma_url_open(URL_PATH(connect.html));
        	  return(State_NCMAConnect);

	 }
	 break;

/*********************************************************************************

    STATE_NCMAMISMATCH

 *********************************************************************************/
    case State_NCMAMismatch:

    	 switch(trans) {

    	     case Trans_URLMismatchAck:
    	     	  ncma_url_open(URL_PATH(newpin.html));
    	     	  return(State_NCMANewPIN);
    	     	  break;
    	 }
    	 break;





/*********************************************************************************

    STATE_NCMAPANIC

 *********************************************************************************/
    case State_NCMAPanic:
    default:

	 DBUG_PRINTF(DBUG_LVL_PANIC, "NCMA_machine: PANIC!\n");
	 return(State_NCMAPanic);

  } /* end switch STATE */

  if(trans == Trans_Registry) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: sweet nothings from the registry\n");
      return(ncma_state);
  }

  if((trans == Trans_CompleteOK) || (trans == Trans_CompleteBad) || (trans == Trans_AuthFail)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "NCMA: spurious I/O ACK from smartcard driver...ignoring\n");
    return(ncma_state);
  }

  /* otherwise . . . PANIC!! */

  DBUG_PRINTF(DBUG_LVL_PANIC, "NCMA: state machine panic - invalid transition event %s in state %s\n",
  		      trans_string(ncma_trans), state_string(ncma_state));

#ifdef ABORT_ON_PANIC
  DBUG_PRINTF(DBUG_LVL_PANIC, "            setting state to State_Panic\n");
  return(State_NCMAPanic);
#else
  return(ncma_state);
#endif
}
