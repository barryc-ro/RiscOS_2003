/* ncma_atr.c - handle smartcard ATR responses */
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "ncma_atr.h"
#include "ncma_scard.h"

#include "DBUG.h"

int lock_card_to_box(void)
{
    _kernel_swi_regs r;
    unsigned int licensee_code, atr_version;

    r.r[0] = 0;

    if(_kernel_swi(SCInterface_GetATR, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "lock_card_to_box: getATR SWI failed\n");
        return(-1);
    }

    if(r.r[0] != 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "lock_card_to_box: getATR SWI returned error\n");
        return(-2);
    }

    atr = (ATR *)(r.r[1]);
    atr_version = (int)atr[3];

    switch(atr_version) {

        case 0x1: /* version 1 ATR */

		  DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: version 1 ATR\n");
             	  licensee_code = UNPICK_LC(atr+7);
             	  break;

        case 0x2: /* version 2 ATR */

		  DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: version 2 ATR\n");
             	  licensee_code = UNPICK_LC(atr+7);
             	  break;

        case 0x3: /* version 3 ATR */

		  DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: version 3 ATR\n");
             	  licensee_code = UNPICK_LC(atr+8);
             	  break;

        default: /* unknown ATR version */

        	 DBUG_PRINTF(DBUG_LVL_ERROR, "lock_card_to_box: unknown ATR version 0x%x\n", atr_version);
        	 return(-3);
        	 break;
    }

    switch(licensee_code) {

        case LICENSEE_ACORN: /* Acorn! */
             		     DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: card by Acorn\n");
             		     break;

	case LICENSEE_NCI:   /* NCI */
	     		     DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: card by NCI\n");
	     		     break;

	default:             /* unknown */
			     DBUG_PRINTF(DBUG_LVL_ERROR, "lock_card_to_box: unknown licensee 0x%x\n", licensee_code);
			     return(-4);
			     break;
    }

  DBUG_PRINTF(DBUG_LVL_DIAG, "lock_card_to_box: ATR version 0x%x    Licensee code: 0x%x\n",
  			     atr_version, licensee_code);

  return(licensee_code);
}
