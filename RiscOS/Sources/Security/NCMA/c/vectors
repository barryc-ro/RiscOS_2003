// vector handlers for NCMA

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */


#include "ncma_ncma.h"
#include "machine.h"
#define PROTOTYPES_INTERNAL
#include "vectors.h"
#include "module.h"
#include "DBUG.h"
#include "scinter.h"

/* **********  Various event handlers ************ */


int module_event_handler(int *r, void *pw) /* this is where it all happens! */
{

  if((*r == Event_Expansion) && (*(r+1) == Event_Expansion_SCInterface)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: SMARTCARD EVENT\n");
    switch(*(r+2)) {

      case Event_CardOK:
      	   ncma_trans = Trans_CardOK;
           break;
      case Event_CardBad:
      	   ncma_trans = Trans_CardBad;
      	   break;
      case Event_CardRemoved:
      	   ncma_trans = Trans_CardRemoved;
      	   break;

      case Event_Complete:
           switch(*(r+3)) {
             case SC_SUCCESS:
             	  ncma_trans = Trans_CompleteOK;
             	  break;

             case SC_NOTFOUND:
             case SC_TRANSPORT:
             case SC_SPACE:
             case SC_EXISTS:
             case SC_STORAGE:
             case SC_NOSELECT:
             case SC_NOTVALID:
             case SC_INCONSIST:
             case SC_UNKNOWNRESP:
             case SC_P1P2INVALID:
             case SC_P3INVALID:
             	  ncma_trans = Trans_CompleteBad;
             	  break;

             case SC_NOACCESSCODE:
             case SC_FAILACCESSCODE:
             case SC_NOACCESSCHANGE:
             case SC_BLOCKEDACCESS:
             	  ncma_trans = Trans_AuthFail;
             	  break;

             default:
                  break;
           }
           break;

      default:  /* invalid Smartcard event - ignore it */
           return(1);
    } // endswitch s.card response

    setcallback(); /* handle smartcard events */
    return(1);
  } // endif s.card event



    return(1);
}

int module_callback_handler(_kernel_swi_regs *r, void *pw)
{

  /* Read transitions off the queue and pass them to
     the state machine
  */

  if(pw != module_wsp) return(0);

  while(transq_rdp != transq_wrp) {
    ncma_trans = transition_queue[transq_rdp];
    transition_queue[transq_rdp++] = Trans_Idle;
    if(transq_rdp == MAX_TRANSITION_QUEUE) transq_rdp = 0;
    if(ncma_trans != Trans_Idle) ncma_state = machine(ncma_trans);
  }
  return(1);

}

int module_callafter_handler(_kernel_swi_regs *r, void *pw)
{
  /* Flush the transition queue and pass a
     time out to the state machine
  */
  if(pw != module_wsp) return(0);

  flush_transition_queue();
  ncma_trans = Trans_Timeout;
  ncma_state = machine(ncma_trans);
  return(1);
}

int module_cron_handler(_kernel_swi_regs *r, void *pw)
{
   DBUG_PRINTF(DBUG_LVL_DIAG, "module_cron_handler: cron!\n");
   return(1);
}

/* *********** Support routines *************** */




_kernel_oserror *setcallback(void)
{
  _kernel_swi_regs r;
  int l;

  /* Set callback */

  /* add events to queue */

  /* is a transition of this type already on the queue? */
  for(l=0; l<transq_wrp;l++) if (transition_queue[l] == ncma_trans) return((_kernel_oserror *)NULL);

  /* no, bung it on then */
  transition_queue[transq_wrp++] = ncma_trans;
  if(transq_wrp == MAX_TRANSITION_QUEUE) transq_wrp = 0;

  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r));
}






_kernel_oserror *cancelcallback(void)
{
  _kernel_swi_regs r;

  /* Cancel callback */
  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(XOS_Bit | OS_RemoveCallBack, &r, &r)); /* OS_RemoveCallback */
}


_kernel_oserror *settimeout(int seconds)
{
  _kernel_swi_regs r;

  r.r[0] = seconds * 100;
  r.r[1] = (int) module_callafter_entry;
  r.r[2] = (int) module_wsp;
  return(_kernel_swi(XOS_Bit | OS_CallAfter, &r, &r));
}

_kernel_oserror *canceltimeout(void)
{
  _kernel_swi_regs r;

  r.r[0] = (int) module_callafter_entry;
  r.r[1] = (int) module_wsp;
  return(_kernel_swi(XOS_Bit | OS_RemoveTickerEvent, &r, &r));
}


int flush_transition_queue(void)
{
  int n;

  for(n=0;n<MAX_TRANSITION_QUEUE;n++) {
    transition_queue[n] = Trans_Idle;
  }

  transq_wrp = 0;
  transq_rdp = 0;
  return(n);
}


_kernel_oserror *module_claimv(void)
{
    _kernel_swi_regs r;

    r.r[0] = EventV;
    r.r[1] = (int)module_event_entry;
    r.r[2] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_Claim, &r, &r));
}



_kernel_oserror *module_event_enable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Enable;
    r.r[1] = Internet_Event;
    _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}


_kernel_oserror *module_event_disable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Internet_Event;
    _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}

void module_releasev(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Internet_Event;
    (void) _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = EventV;
    r.r[1] = (int)module_event_entry;
    r.r[2] = (int)module_wsp;
    (void) _kernel_swi(XOS_Bit | OS_Release, &r, &r);
}




