/* Code to handle Smurfs for managed access.
   Plenty of scope for gags in here!
*/

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_smurf.h"
#include "ncma_scard.h"

#include "DBUG.h"


int ncma_mount_smurfs(void)
{
    ro_smurf_mounted = (ncma_mount_ro_smurfs()>0);
    rw_smurf_mounted = (ncma_mount_rw_smurfs()>0);
    if(ro_smurf_mounted) return(0);
    return(-1);
}

int ncma_mount_ro_smurfs(void) /* mount some read-only smurfs */
{
    int mnts[2];
    char buff[128];

    if(cache_enquiry("FSERV_PRIMARY", (char *)&mnts[0], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no FSERV_PRIMARY defined\n");
    }

    if(cache_enquiry("FSERV_BACKUP", (char *)&mnts[1], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no FSERV_BACKUP defined\n");
    }

    memset(buff, 0, 128);

    if(cache_enquiry("NFS_MOUNT", buff, 128)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no NFS_MOUNT defined\n");
        return(-1);
    }

    if(ncma_mount_smurf("FTP", mnts[0], buff, SMURF_RO_MOUNT, SMURF_RO_USER, SMURF_RO_PASSWD)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: primary SMURF mount failed...trying backup\n");
        if(ncma_mount_smurf("FTP", mnts[1], buff, SMURF_RO_MOUNT, SMURF_RO_USER, SMURF_RO_PASSWD)<0) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: backup SMURF mount failed..panic\n");
            return(-1);
        } else {
            DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_ro_smurfs: backup SMURF ok\n");
        }
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_ro_smurfs: primary SMURF ok\n");
    }
    return(0);
}


int ncma_mount_rw_smurfs(void) /* mount read-write smurfs */
{
    int mnts;
    char buff[128];
    char user[128];
    char passwd[128];

     if(cache_enquiry("FSERV_HOME", (char *)&mnts, 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no FSERV_HOME defined\n");
        return(-1);
    }

    memset(buff, 0, 128);
    memset(user, 0, 128);
    memset(passwd, 0, 128);

    if(cache_enquiry("NFS_MOUNTRW", buff, 128)<0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs: no NFS_MOUNTRW defined\n");
        return(-1);
    }

     if(cache_enquiry("LOGIN_USERNAME", user, 128)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no LOGIN_USERNAME - trying LOGIN_ID\n");
        if(cache_enquiry("LOGIN_ID", user, 128)<0) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no LOGIN_ID - trying anon\n");
            strcpy(user, SMURF_RO_USER);
        }
    }

     if(cache_enquiry("LOGIN_PASSWD", passwd, 128)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no LOGIN_PASSWD - trying LOGIN_SECRET\n");
        if(cache_enquiry("LOGIN_SECRET", passwd, 128)<0) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no LOGIN_ID - trying anon\n");
            strcpy(passwd, SMURF_RO_PASSWD);
        }
    }



    if(ncma_mount_smurf("FTP", mnts, buff, SMURF_RW_MOUNT, user, passwd)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: user SMURF mount failed\n");
        return(-1);
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs: user SMURF ok\n");
    }
    return(0);
}

int ncma_mount_smurf(char *svc, int ip, char *path, char *mount, char *user, char *password)
{
    _kernel_swi_regs r;

    r.r[0] = 0x2; /* write cached, IP address is numeric */
    r.r[1] = (int)svc;
    r.r[2] = ip;
    r.r[3] = (int)path;
    r.r[4] = (int)mount;
    r.r[5] = (int)user;
    r.r[6] = (int)password;

    if(_kernel_swi(CSFS_Mount, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "mount_smurf: CSFS_Mount \"%s\" failed\n", mount);
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "mount_smurf: %s on 0x%x as %s (user: %s pass: %s)\n",
    			       path, ip, mount, user, password);
    return(0);
}

int ncma_dismount_smurfs(void)
{
    if(ro_smurf_mounted) {
        ro_smurf_mounted = (ncma_dismount_ro_smurfs()>0)?0:1;
    }

    if(rw_smurf_mounted) {
        rw_smurf_mounted = (ncma_dismount_rw_smurfs()>0)?0:1;
    }

    return(0);
}

int ncma_dismount_ro_smurfs(void)
{
    return(ncma_dismount_smurf(SMURF_RO_MOUNT));
}

int ncma_dismount_rw_smurfs(void)
{
    return(ncma_dismount_smurf(SMURF_RW_MOUNT));
}

int ncma_dismount_smurf(char *path)
{
    _kernel_swi_regs r;

    r.r[0] = 0;
    r.r[1] = (int)path;

    if(_kernel_swi(CSFS_Dismount, &r, &r)!=NULL) return(-1);
    return(0);
}







