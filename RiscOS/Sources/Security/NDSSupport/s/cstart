;
;
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:ModHand
        GET     Hdr:UpCall
        GET     Hdr:EnvNumbers

STACK_SIZE * 256
DA_SIZE    * 32768

SL_Lib_Offset     *      -540
SL_Client_Offset  *      -536

; Stack chunks
                ^       0
SC_mark         #       4
SC_next         #       4
SC_prev         #       4
SC_size         #       4
SC_deallocate   #       4
SC_LibOffset    #       4
SC_ClientOffset #       4
SC_veneerStaticLink #   4
SC_veneerStkexLink  #   4
SC_DescSize     #       0

SC_SLOffset     *       560
IsAStackChunk   *       &f60690ff

        IMPORT  |Image$$RO$$Base|
        IMPORT  |RTSK$$Data$$Base|
        IMPORT  |RTSK$$Data$$Limit|
	IMPORT	|Image$$RO$$Base|
	IMPORT	|_Lib$Reloc$Off$DP|
        IMPORT  _kernel_init
	IMPORT	da_mem
        IMPORT  longjmp
        IMPORT  free
        IMPORT  size
        IMPORT  |_clib_finalisemodule|

	EXPORT	|_blib_entermodule|
	EXPORT  |_blib_finalisemodule|

	AREA	|_blib_entermodulearea|,REL,CODE,READONLY

ModuleName
        =       "NDSVerifier", 0
        ALIGN

        ; Entered in USR26 or USR32 mode
|_blib_entermodule|
	LDR	r12,[r12]	;Workspace ptr from private word
        MOV     a2, a1

        MOV     a1, #&10
        SWI     XOS_ReadUnsigned
        MOVVS   a3, #0

        TEQ     a3, #0
        BEQ     first_thread

        ADD     sl, r2, #SC_SLOffset
        LDR     r0, [r2, #SC_size]
        ADD     sp, r2, r0
        MOV     lr, pc
        LDR     pc, [sp, #-4]
        SUB     r0, sl, #560
        BL      free
        SWI     OS_Exit

first_thread
	LDMIB	r12, {v2, v3}	;Module relocations
	LDR	v4, =da_mem    ;A Ptr to da_mem variable
	ADD	v4, v4, v3	;gets relocated for user variable
        LDR     r2, [v4]
        MOV     r0, #STACK_SIZE
        STR     r0, [r2, #SC_size] ; set up the stack size

        ADD     r0, r2, #20 ; different between SLOffset and Lib_Offset
	STMIA	r0, {v2, v3}

        BL      InstallHandlers

        ADR     r0, |_k_init_block|
        MOV     r1, r2
        ADD     r2, r2, #STACK_SIZE
        MOV     r3, #1

        LDR     v4, =size   ; read the size variable from C
        ADD     v4, v4, v3
        LDR     r4, [v4]
        ADD     r4, r4, r1
        B      _kernel_init

|_k_init_block|
        &       |Image$$RO$$Base|
        &       |RTSK$$Data$$Base|
        &       |RTSK$$Data$$Limit|

InstallHandlers
        ; On entry, v3 = client static base, mode USR
        ; On exit, a1-a2,a4-v2 corrupted
        MOV     v2, r2
        MOV     r0, #ErrorHandler
        ADR     r1, MyErrorHandler
        MOV     r2, v3
        ADRVar  r3, v3, my_error_buffer
        SWI     XOS_ChangeEnvironment
        ADRVar  v1, v3, old_handlers
        STMIA   v1!, {r1-r3}
        MOV     r0, #ExitHandler
        ADR     r1, MyExitHandler
        MOV     r2, v3
        SWI     XOS_ChangeEnvironment
        STMIA   v1!, {r1-r3}
        MOV     r0, #UpCallHandler
        ADR     r1, MyUpCallHandler
        MOV     r2, v3
        SWI     XOS_ChangeEnvironment
        STMIA   v1!, {r1-r3}
        MOV     r2, v2
        MOV     pc, r14

RemoveHandlers
        ; On entry, r12 = static base, r11 = return address, mode USR/SVC
        ; On exit, r5-r13 must be preserved
        ; Weird entry conditions are because in USR mode we might not have a stack,
        ; and in SVC mode the SWIs we call will corrupt r14_svc
        ADRVar  r4, r12, old_handlers
        MOV     r0, #ErrorHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     r0, #ExitHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     r0, #UpCallHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     pc, r11

MyErrorHandler
        MOV     r12, r0
        MOV     r11, pc
        B       RemoveHandlers
        ADRVar  r0, r12, my_error_buffer
        ADD     r0, r0, #4      ; skip the error PC from the buffer
        LDR     r1, =&58454241
        MOV     r2, #-1 ; maximum return code, should cause error in r0 to be returned
        ADR     r3, ModuleName
        SWI     OS_ExitAndDie
                ; will kill module, set Sys$ReturnCode to -1, then call error handler

MyExitHandler
        MOV     r11, pc
        B       RemoveHandlers
        MOV     r1, #0  ; ensure error is not generated instead
        ADR     r3, ModuleName
        SWI     OS_ExitAndDie
                ; will kill module, set Sys$ReturnCode to 0, then call exit handler

MyUpCallHandler
        ; We have to preserve all registers, but fortunately this handler
        ; is called in SVC mode, so we know we have a stack
        TEQ     r0, #UpCall_NewApplication
        MOVNE   pc, lr
        Push    "r0-r4,r11,r14"
        MOV     r11, pc
        B       RemoveHandlers
        MOV     r0, #CAOPointer ; fake this so we can kill module while still CAO
        MOV     r1, #4          ; (there's no equivalent of OS_ExitAndDie here)
        MOV     r2, #0
        MOV     r3, #0
        SWI     XOS_ChangeEnvironment
        MOV     r0, #ModHandReason_Delete
        ADR     r1, ModuleName
        SWI     XOS_Module
        Pull    "r0-r4,r11,pc"


|_blib_finalisemodule|
        FunctionEntry
        StaticBaseFromSL ip
        LDRVar  lr, ip, da_number
        Push    "lr"
        BL      _clib_finalisemodule
        MOV     r0, #1
        Pull    "r1"
        TEQ     r1, #0              ; has dynamic area been created?
        SWINE   XOS_DynamicArea     ; free it if so
        Return                      ; flag preservation required only for APCS-R


        IMPORTVar da_number
        LocalVar my_error_buffer
        LocalVar old_handlers


        LTORG


        AREA    |Asm$$Data|, DATA

old_handlers
        %       4*3*3
my_error_buffer
        %       256


	END

; EOF cstart.s
