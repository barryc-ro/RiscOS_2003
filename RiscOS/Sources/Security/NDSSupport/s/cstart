;
; Copyright (c) 1995 ANT Ltd., Cambridge, England
;
; :RCS Log discontinued:
; Revision 1.1  95/01/04  19:08:33  kwelton
; Initial revision
;
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>

STACK_SIZE * 256
DA_SIZE    * 32768

SL_Lib_Offset     *      -540
SL_Client_Offset  *      -536

; Stack chunks
                ^       0
SC_mark         #       4
SC_next         #       4
SC_prev         #       4
SC_size         #       4
SC_deallocate   #       4
SC_LibOffset    #       4
SC_ClientOffset #       4
SC_veneerStaticLink #   4
SC_veneerStkexLink  #   4
SC_DescSize     #       0

SC_SLOffset     *       560
IsAStackChunk   *       &f60690ff

        IMPORT  |Image$$RO$$Base|
        IMPORT  |RTSK$$Data$$Base|
        IMPORT  |RTSK$$Data$$Limit|
	IMPORT	|Image$$RO$$Base|
	IMPORT	|_Lib$Reloc$Off$DP|
        IMPORT  _kernel_init
	IMPORT	da_mem
        IMPORT  longjmp
        IMPORT  free
        IMPORT  size

	EXPORT	|_blib_entermodule|

	AREA	|_blib_entermodulearea|,REL,CODE,READONLY

        ; Entered in USR26 or USR32 mode
|_blib_entermodule|
	LDR	r12,[r12]	;Workspace ptr from private word
        MOV     a2, a1

        MOV     a1, #&10
        SWI     XOS_ReadUnsigned
        MOVVS   a3, #0

        TEQ     a3, #0
        BEQ     first_thread

        ADD     sl, r2, #SC_SLOffset
        LDR     r0, [r2, #SC_size]
        ADD     sp, r2, r0
        MOV     lr, pc
        LDR     pc, [sp, #-4]
        SUB     r0, sl, #560
        BL      free
        SWI     OS_Exit

first_thread
	LDMIB	r12, {v2, v3}	;Module relocations
	LDR	v4, =da_mem    ;A Ptr to da_mem variable
	ADD	v4, v4, v3	;gets relocated for user variable
        LDR     r2, [v4]
        MOV     r0, #STACK_SIZE
        STR     r0, [r2, #SC_size] ; set up the stack size

        ADD     r0, r2, #20 ; different between SLOffset and Lib_Offset
	STMIA	r0, {v2, v3}

	; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
;	DCD	|_Lib$Reloc$Off$DP| + &E28AA000

        ADR     r0, |_k_init_block|
        MOV     r1, r2
        ADD     r2, r2, #STACK_SIZE
        MOV     r3, #1

        LDR     v4, =size   ; read the size variable from C
        ADD     v4, v4, v3
        LDR     r4, [v4]
        ADD     r4, r4, r1
        B      _kernel_init

	; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
;	DCD	|_Lib$Reloc$Off$DP| + &E24AA000

	MOV	r0,#0
	SWI	OS_Exit

|_k_init_block|
        &       |Image$$RO$$Base|
        &       |RTSK$$Data$$Base|
        &       |RTSK$$Data$$Limit|

        LTORG


	END

; EOF cstart.s
