#include "^.ndsstubs.h"
#include "^.porting.h"
#include "^.ndcport.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

unsigned long t1, t2, t3, t4, t5, t6, t7;

void* semaphore;

void test1 (void* v)
{
    unsigned long mess;
    int last_call;
    puts ("thread1: starting");
    last_call = NDS_OS_Get_Time_In_Ticks ();
    while (1) {
        NDS_OS_Get_Message (t1, &mess);
        printf ("thread1: (%8ld) message %ld\n",
            NDS_OS_Get_Time_In_Ticks () - last_call - 200,
            mess);
        last_call = NDS_OS_Get_Time_In_Ticks ();
    }
    v = v;
}

void test2 (void* v)
{
    unsigned long mess;
    int last_call;
    char buf[10];
    FILE* f = fopen ("test:", "rb");
    setvbuf (f, NULL, _IONBF, 0);
    puts ("thread2: starting");
    last_call = NDS_OS_Get_Time_In_Ticks ();
    while (1) {
        NDS_OS_Get_Message (t2, &mess);
        printf ("thread2: (%8ld) message %ld\n",
            NDS_OS_Get_Time_In_Ticks () - last_call - 200,
            mess);
        last_call = NDS_OS_Get_Time_In_Ticks ();
        fread (&buf[0], 10, 1, f);
        printf ("read from test: '");
        fwrite (buf, 10, 1, stdout);
        puts ("'");
    }
    v = v;
}

void test3 (void* v)
{
    puts ("thread3: starting");
    while (1) {
        NDS_OS_Time_Delay (NDS_OS_Time_Tick_Per_Sec ());
        NDS_OS_Send_Message (t1, 1);
        NDS_OS_Time_Delay (NDS_OS_Time_Tick_Per_Sec ());
        NDS_OS_Send_Message (t2, 1);
    }
}

void test4 (void* v)

{
    puts ("thread4: starting");
    while (1) {
        printf ("semaphore is: %x\n", *(int*) semaphore);
        NDS_OS_RequestSemaphore (semaphore);
        puts ("thread4: claimed semaphore");
        printf ("semaphore is: %x\n", *(int*) semaphore);
        NDS_OS_ReleaseSemaphore (semaphore);
        puts ("thread4: released semaphore");
    }

}

void test5 (void* v)
{
    puts ("thread5: starting");
    while (1) {
        NDS_OS_Time_Delay (30);
        NDS_OS_RequestSemaphore (semaphore);
        puts ("thread5: claimed semaphore");
        NDS_OS_Time_Delay (500);
        NDS_OS_ReleaseSemaphore (semaphore);
        puts ("thread5: released semaphore");
        NDS_OS_Send_Message (t6, 1);

    }
}

void test6 (void* v)
{
    int i;
    unsigned long mess;
    puts ("thread6: starting");
    while (1) {
        NDS_OS_Get_Message (t6, &mess);
        NDS_OS_Time_Delay (500);
        NDS_OS_Enter_Critical ();
        puts ("thread6: entered critical");
        for (i = 10000000; i; --i) {
            if (i % 1000000 == 0) printf(".");
        }
        puts ("");
        puts ("thread6: about to exit critical");
        NDS_OS_Exit_Critical ();
    }
}

PORT port;

void closeit (void) {
    PORT_Close (&port);
}

void test7 (void* v)
{
    strcpy (port.name, "COM1");
    port.baudrate = 38400;
    port.stopbits = 1;
    port.parity = 'N';
    port.eightbit = 1;
    port.flags = 0;
    if (PORT_Open (&port)) return;

    atexit (closeit);
    while (1) {
        char buf[10];
        NUSHORT n = 10;
        PORT_Read (&port, &n, (NDATA) &buf[0], 120);
        printf ("thread7: timeout with %d bytes read\n", n);
    }
}

void InitVerifier (int a, int b, int* c)
{
    NDS_OS_CreateSemaphore (&semaphore, 1);
    NDS_OS_CreateProcess ("Test1", test1, 0, 500, 10, 4, &t1);
    NDS_OS_CreateProcess ("Test2", test2, 0, 500, 10, 4, &t2);
    NDS_OS_CreateProcess ("Test3", test3, 0, 500, 10, 4, &t3);
    NDS_OS_CreateProcess ("Test4", test4, 0, 500, 10, 4, &t4);
    NDS_OS_CreateProcess ("Test5", test5, 0, 500, 10, 4, &t5);
    NDS_OS_CreateProcess ("Test6", test6, 0, 500, 10, 4, &t6);
    NDS_OS_CreateProcess ("Test7", test7, 0, 500, 10, 4, &t7);
}

