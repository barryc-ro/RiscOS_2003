/* ***** N2T008.H - Verifier - Decoder interface ***** */
/* All functions and data types in this file are intended to support
 N2-T008 interface between CA2.0 verifier and DVB IRD core software */

#ifndef H_N2T008
#define H_N2T008

#ifndef H_NDSTYPES
#define H_NDSTYPES
typedef unsigned char               NDS_BYTE;
typedef unsigned char               NDS_UBYTE;
typedef unsigned short              NDS_STATUS;
typedef unsigned short              NDS_USHORT;
typedef unsigned long               NDS_ULONG;
typedef unsigned char               NDS_BOOLEAN;
#endif

typedef struct _SERVICE_REF {
NDS_USHORT service_id;
NDS_USHORT xponder_id;
NDS_USHORT network_id;
} SERVICE_REF;

typedef struct _APP_ID {
unsigned long application_id;
unsigned long provider_id;
}APP_ID;

typedef struct _CA_DESCRIPTOR {
NDS_USHORT ca_pid;
NDS_BYTE cat_private_data_len;
NDS_BYTE *cat_private_data;
} CA_DESCRIPTOR;

typedef struct _ES_DESCRIPTOR {
NDS_USHORT es_pid;
NDS_USHORT ecm_pid;
NDS_BYTE es_private_data_len;
NDS_BYTE *es_private_data;
} ES_DESCRIPTOR;

typedef enum {
    NDS_ADD,
    NDS_UPDATE,
    NDS_REMOVE,
    NDS_REMOVE_ALL,
    NDS_ENABLE,
    NDS_ENABLE_ALL,
    NDS_DISABLE,
    NDS_DISABLE_ALL
} STREAM_ACTION;

typedef struct _FECM_KEY {
    NDS_USHORT fecm_id;
	SERVICE_REF service;
}FECM_KEY;

typedef enum {
	API_PRIORITY_IMMEDIATE,
	API_PRIORITY_HIGH,
	API_PRIORITY_NORMAL
} API_PRIORITY;

#define MAX_NUM_FECM_TABLE			10

#define DEFAULT_IRD_NUMBER			0xF0F0F0F0

#define CA_AREA_NVRAM				1
#define EMAIL_AREA_NVRAM			2
#define CHAINING_AREA_NVRAM      3   /* Added Raquel (ca2) */

#define MAX_DVB_DESCRAMBLERS		6

#define VALID_CW_MASK					0x01
#define VALID_TAPING_CW_MASK			0x02
#define VALID_DIGITAL_RECORDING_CW_MASK	0x04

#define CLEAR_MODE_VIEWING_ALLOWED			0x01
#define CLEAR_MODE_VIEWING_NOT_ALLOWED		0x00

#define STANDBY_MODE_OFF 0
#define STANDBY_MODE_ON 1


/*#define WAIT_FOR_CWSTATUS			3*/


NDS_STATUS InitVerifier (NDS_USHORT ird_version, NDS_ULONG ird_id, NDS_ULONG *ver_version);
NDS_STATUS InitNvramArea (int nvram_area_size, NDS_USHORT nvram_area_type, NDS_USHORT *nvram_area_access_handle);
NDS_STATUS DataToIrd (NDS_BYTE length, NDS_BYTE *data);
NDS_STATUS SetNumDvbDescramblers(NDS_BYTE num_descramblers);
NDS_STATUS VerAllocateRam (int ram_size, NDS_BYTE **ram_adr);
NDS_STATUS VerDeallocateRam (NDS_BYTE *ram_adr);
NDS_STATUS WriteNvramData(NDS_USHORT nvram_area_access_handle, int location, int length, NDS_BYTE *data);
NDS_STATUS ReadNvramData(NDS_USHORT nvram_area_access_handle, int location, int length, NDS_BYTE *data);
NDS_STATUS SetCasId (NDS_USHORT cas_id);
NDS_STATUS NewCATDescriptor(CA_DESCRIPTOR *ca_descriptor);
NDS_STATUS CATInvalid(void);
NDS_STATUS ServiceComponentInfo(APP_ID app, SERVICE_REF service, NDS_BYTE stream_number, NDS_BYTE stream_type, STREAM_ACTION action, ES_DESCRIPTOR *es_descriptor ); /*, NDS_BYTE *cw_status); */
NDS_STATUS CALoadFecm(FECM_KEY fecm, API_PRIORITY api_apriority);
NDS_STATUS CAFreeFecm(FECM_KEY fecm);
NDS_STATUS CAFecmArrived(FECM_KEY fecm);
NDS_STATUS CAReadFecm(FECM_KEY fecm, NDS_BYTE stream_number, NDS_BYTE stream_type, NDS_BYTE *fecm_buffer, NDS_USHORT *length);
NDS_STATUS SetCwStatus(SERVICE_REF service, NDS_BYTE stream_number, NDS_BYTE stream_type, NDS_BYTE cw_status );
NDS_STATUS SendApplicationEvent(APP_ID application, NDS_ULONG event_id, NDS_BYTE payload_length, NDS_BYTE *payload);
NDS_STATUS SetClearModePermission(NDS_BYTE clear_mode_status);
int CompareServiceRef(SERVICE_REF *, SERVICE_REF *);
NDS_STATUS SetStandbyStatus(NDS_BYTE standby_status);



/* MODEM & CALLBACK functions and data */

/* Modem status byte flags */
#define CARRIER_PRESENT				0x01
#define PHONE_IS_IN_USE				0x02
#define PARITY_FAILURE				0x04
#define TIMEOUT_FAILURE				0x08
#define OVERRUN_ERROR				0x10
#define FRAMING_ERROR				0x20
#define OS_ERROR						0x40

NDS_STATUS GetModemStatus(void);

#define ACCESS_MODEM					1
#define RELEASE_MODEM				0

#define ACCESS_FAILURE				1
#define ACCESS_TIMEOUT				2

NDS_STATUS AccessModem(NDS_BYTE modem_access, NDS_USHORT timeout);

/* Modem command codes */
#define DIAL_COMMAND					0
#define ONHOOK_COMMAND				1
#define RESET_COMMAND				2

/* Dial methods */
#define PULSE_DIAL_METHOD			0
#define TONE_DIAL_METHOD			1
#define DEFAULT_DIAL_METHOD			2 /* IRD uses a method defined by a setup */

/* Dial responses */
#define NO_CARRIER					3
#define INVALID_COMMAND				4
#define NO_DIALTONE					6
#define BUSY							7
#define NO_ANSWER						8
#define CONNECT						9
#define OS_FAILURE					0xFF

/* On-hook responses */
#define ONHOOK_SUCCESS				0
#define ONHOOK_FAILURE				1

/* Reset responses */
#define RESET_SUCCESS				0
#define RESET_FAILURE				1

NDS_STATUS IssueModemCommand(NDS_BYTE *command_string);

/* GetModemString returns the same status byte as GetModemStatus */
NDS_STATUS GetModemString(NDS_BYTE *string, NDS_USHORT length, NDS_USHORT timeout, NDS_USHORT *action_len);

/* PutModemString returns the same status byte as GetModemStatus */
NDS_STATUS PutModemString(NDS_BYTE *string, NDS_USHORT length, NDS_USHORT *actual_length);

/* Callback function that informs the verifier that the carrier
was dropped when there wasn't any outstanding requests to modem.
After getting this callback the verifier shouldn't issue any
modem I/O requests */
NDS_STATUS CarrierDroped(void);

/* Obtain additional data for the callback. This data will be transferred to
the ACC/SMS */
NDS_STATUS GetSmsCallbackData ( NDS_BYTE *data, int *data_length );



/* Area for Software download functions and data definitions */

#define BYTE_WILDCARD		0xFF
#define SHORT_WILDCARD		0xFFFF

typedef struct {
NDS_ULONG           sw_component_id;
NDS_ULONG           sw_component_provider_id;
}SW_COMPONENT_ID;

typedef struct {
NDS_BYTE            manufacturer_id;
NDS_BYTE            model_type;
NDS_BYTE            hardware_type;
}RX_TYPE;

/* any field in RX_IDENT may be used as wildcard */
typedef struct {
RX_TYPE			receiver_type;
NDS_BYTE            auxilary_version;
NDS_USHORT          ird_core_version;
}RX_IDENTIFIER;

typedef struct {
RX_IDENTIFIER	receiver_identifier;
NDS_USHORT          new_sw_version;
NDS_BYTE                download_type;
NDS_BYTE                user_acceptance;
NDS_BYTE                switch_condition;
NDS_BYTE                high_priority;
SW_COMPONENT_ID	component_id;
}SW_DOWNLOAD_EMM;

NDS_STATUS InstructSwDownload (SW_DOWNLOAD_EMM *start_download);

typedef struct {
RX_IDENTIFIER	receiver_identifier;
NDS_USHORT          new_sw_version;
NDS_BYTE                switch_condition;
SW_COMPONENT_ID	component_id;
}SW_SWITCH_EMM;

NDS_STATUS SwitchSwCode (SW_SWITCH_EMM *switch_param);

NDS_STATUS GetIrdIdentifier (RX_IDENTIFIER *ird_ident);


typedef struct {
NDS_ULONG           component_id;
NDS_ULONG           component_provider_id;
NDS_USHORT      component_version;
NDS_BYTE            component_type;
NDS_BYTE            component_action;
}SW_COMPONENT_ITEM;

typedef struct {
RX_IDENTIFIER	receiver_identifier;
NDS_BYTE            action_type;
NDS_BYTE            switch_condition;
NDS_BYTE            user_acceptance;
NDS_BYTE            num_components;
SW_COMPONENT_ITEM	*items;
}DOWNLOAD_ACTION;

NDS_STATUS ProcessSoftwareDownloadAction (DOWNLOAD_ACTION *action);

typedef enum {
RUNTIME,           /* Runtime software */
APPLICATION_TYPE1, /* Resident */
APPLICATION_TYPE2, /* Autoexec, App certficates */
APPLICATION_TYPE3,  /* Interactive app */
RUNTIME_S64,	   /* Runtime software - fixed 64+8 byte signature */
RUNTIME_S128	   /* Runtime software - fixed 128+8 byte signature */
}CHECK_REASON;

#define SIGNATURE_OK			0
#define SIGNATURE_FAIL		1
#define PARAMETER_FAIL		2

NDS_STATUS CheckSwSignature(CHECK_REASON reason, NDS_BYTE *data, NDS_ULONG data_length,
                        NDS_BYTE *security_field);



/* Area for fingerprinting functions and data definitions */

#define MAXFPTEXT	30

typedef enum {
   FP_TRANSPARENT = 0,
   FP_WHITE,
   FP_RED,
   FP_BLUE
}FPCOLOR;

typedef struct {
  FPCOLOR character_color;
  NDS_USHORT region_height;
  NDS_USHORT region_width;
  FPCOLOR region_color;
  NDS_USHORT region_offset_x;
  NDS_USHORT region_offset_y;
  NDS_USHORT text_offset_x;
  NDS_USHORT text_offset_y;
  NDS_USHORT duration;
  NDS_BYTE length;
  NDS_BYTE text[MAXFPTEXT];
}OVERT_FINGERPRINT_PARMS;

NDS_STATUS DisplayOvertFingerprint (OVERT_FINGERPRINT_PARMS *fp_params);
NDS_STATUS DisplayCovertFingerprint (NDS_UBYTE *fp_params);
NDS_STATUS CancelFingerprint (void);

/* prototypes for the CA1 environment to Fingerprinting */
#define FP_OVERT           0
#define FP_COVERT          1
typedef enum {
   DISPLAY_EXPIRED = 0,
   INVALID_PARAMETERS,
   INIT_LEVEL
} FPREASON;

void MDL_InitCa1Fing(int stage);

NDS_STATUS FingerprintCanceled (FPREASON reason);
NDS_STATUS GetFingerprintDelay (NDS_UBYTE algorithm_id, NDS_USHORT *delay);

extern void   GetFrameTime (NDS_UBYTE *frame_time);
extern NDS_STATUS DisplayFingerprint (NDS_UBYTE fp_type, NDS_UBYTE *fp_params);

NDS_STATUS FingerprintCanceled (FPREASON reason);
void   GetFrameTime (NDS_UBYTE *frame_time);
NDS_STATUS GetFingerprintDelay (NDS_UBYTE algorithm_id, NDS_USHORT *delay);


/* Internal verifier functions area */
NDS_STATUS SendApplicationEventVer(APP_ID application, NDS_ULONG event_id, NDS_BYTE payload_length, NDS_BYTE *payload);

/* Send a CA messages between different nodes (Udi) */
extern void SendRemoteCaMsg(NDS_UBYTE *message, NDS_USHORT len);




#endif

