/*
 * System dependent definitions
 */
#define NDS_OS_STATUS_OK            0
#define NDS_OS_STATUS_FAIL          1

#define NDS_OS_MAX_TASK 16
#define NDS_MAX_TASK 16

typedef void NDS_OS_MAIN_FUNCTION (void *);       /* typedef for declaration of task entry point */
/*#define QUEUE_ITEM_SIZE    sizeof(void *)*/

enum
{
   NDS_OS_PRIORITY_00 = 0,               /* must be */
   NDS_OS_PRIORITY_01,
   NDS_OS_PRIORITY_02,
   NDS_OS_PRIORITY_03,
   NDS_OS_PRIORITY_04,
   NDS_OS_PRIORITY_05,
   NDS_OS_PRIORITY_06,
   NDS_OS_PRIORITY_07,
   NDS_OS_PRIORITY_08,
   NDS_OS_PRIORITY_09,
   NDS_OS_PRIORITY_10,
   NDS_OS_PRIORITY_11,
   NDS_OS_PRIORITY_12,
   NDS_OS_PRIORITY_13,
   NDS_OS_PRIORITY_14,
   NDS_OS_PRIORITY_15
};


/*
 * System dependent functions
 */

/**************************************************
 *    NDS_OS_CreateProcess
 **************************************************
 * Is called to create process, queue and so on, as required by used OS.
 * Stores data in format allows access to process queue using process_handle
 * priority_index is an index in priority list so ECM task will have highest
 * priority.
 **************************************************
 * Parameters  process_abbrivation  - Identifier of process
 *             task_main_function   - Pointer to verifier task main function
 *                                     If in used OS task entry point has another
 *                                     format porting implementation has to create glue
 *                                     that calls this function.
 *             priority_index       - index of priority allows to avoid dependents of verifier
 *                                     from the priorities scale used by OS.
 *             stack_size           - stack_size in bytes
 *             queue_size           - queue size in number of items.
 *             queue_item_size      - length of each queue item.
 *             process_handle       - pointer memory to store process handle.
 *
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if task was successfully created
 *  NDS_OS_STATUS_FAIL  - if task was not created for any reason.
 */

int NDS_OS_CreateProcess (char                  *process_abbrivation,
                             NDS_OS_MAIN_FUNCTION  *task_main_function,
                             int                   priority_index,
                             unsigned long                 stack_size,
                             unsigned long                 queue_size,
                             int                   queue_item_size,
                             unsigned long                 *process_handle);
/**************************************************
 *   NDS_OS_Send_Message
 **************************************************
 * Sends message to the process defined by process_handle
 **************************************************
 * Parameters  process_handle - handle of the process
 *             message        - pointer to data to send
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was successfully sent
 *  NDS_OS_STATUS_FAIL  - if message was not send for any reason.
 */
int NDS_OS_Send_Message (unsigned long process_handle, unsigned long message);

/**************************************************
 *   NDS_OS_Get_Message
 **************************************************
 * Receives message sent to the process defined by process_handle.
 * It is a blocking call, returns only when message is received.
 **************************************************
 * Parameters: process_handle - handle of the process
 *             message        - pointer to memory to receive data
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was received
 *  NDS_OS_STATUS_FAIL  - if process_handle is invalid.
 */
int NDS_OS_Get_Message  (unsigned long process_handle, unsigned long *message);


/**************************************************
 *   NDS_OS_CreateSemaphore
 **************************************************
 * Is called to create semaphore required by used OS.
 * Stores data in format allows access to semaphore using sem_handle
 **************************************************
 * Parameters: sem_handle - pointer to created semaphore.
 *             init_val   - value of semaphore ??counter?? in init time.
 *                            0 - create semaphore as locked.
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if semaphore was successfully created
 *  NDS_OS_STATUS_FAIL  - if semaphore was not created for any reason.
 */
int NDS_OS_CreateSemaphore (void **sem_handle,
                            int  init_val);
/**************************************************
 *   NDS_OS_ReleaseSemaphore
 **************************************************
 * Releases semaphore, allows another task continue execution.
 **************************************************
 * Parameters: sem_handle - handle of semaphore
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - on success.
 *  NDS_OS_STATUS_FAIL  - if semaphore handle is invalid.
 */
int NDS_OS_ReleaseSemaphore (void *sem_handle);

/**************************************************
 *   NDS_OS_RequestSemaphore
 **************************************************
 * Stops task execution until semaphore is released. On exit semaphore is locked.
 **************************************************
 * Parameters: sem_handle - handle of semaphore
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - on success.
 *  NDS_OS_STATUS_FAIL  - if semaphore handle is invalid.
 */
int NDS_OS_RequestSemaphore (void *sem_handle);

/**************************************************
 *   NDS_OS_Enter_Critical, NDS_OS_Exit_Critical
 **************************************************
 * Control entering to and exiting from critical section of program.
 **************************************************
 * Parameters: none
 **************************************************
 */
void   NDS_OS_Enter_Critical (void);
void   NDS_OS_Exit_Critical (void);

/**************************************************
 *   NDS_OS_Time_Tick_Per_Sec
 **************************************************
 * Returns resolution of system clock in ticks per second.
 **************************************************
 * Parameters: none
 **************************************************
 */
unsigned long  NDS_OS_Time_Tick_Per_Sec (void);

/**************************************************
 *   NDS_OS_Time_Delay
 **************************************************
 * Suspends task execution for required number of ticks.
 **************************************************
 * Parameters: delay - suspend time in ticks of system clock.
 **************************************************
 */
void   NDS_OS_Time_Delay (unsigned long delay);

/**************************************************
 *   NDS_OS_Time_Tick_Per_Sec
 **************************************************
 * Returns current system time in ticks of system timer.
 **************************************************
 * Parameters: none
 **************************************************
 */
unsigned long  NDS_OS_Get_Time_In_Ticks (void);


/**************************************************/
/**************************************************/
/*     This functions are for future use only     */
/**************************************************/
/**************************************************/

/**************************************************
 *   NDS_OS_Send_MessageEx
 **************************************************
 * Sends variable length message to the process
 * defined by process_handle
 **************************************************
 * Parameters  process_handle - handle of the process
 *             message        - pointer to data to send
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was successfully sent
 *  NDS_OS_STATUS_FAIL  - if message was not send for any reason.
 */
int NDS_OS_Send_MessageEx (unsigned long process_handle, void *item, int item_size);

/**************************************************
 *   NDS_OS_Get_MessageEx
 **************************************************
 * Receives variable length message sent to the
 * process defined by process_handle.
 * It is a blocking call.
 **************************************************
 * Parameters: process_handle - handle of the process
 *             message        - pointer to memory to receive data
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was received
 *  NDS_OS_STATUS_FAIL  - if process_handle is invalid.
 */
int NDS_OS_Get_MessageEx  (unsigned long process_handle, void *item, int max_len);



/* Extended portion for XSI engine timer service implementation */

#define NDS_OS_TIMER_WAIT_FOREVER		0xFFFFFFFF

void *NDS_OS_Create_Timer_Object(void);
unsigned long NDS_OS_Get_Time_In_Mseconds(void);
int NDS_OS_Wait_On_Timer_Object(void *tobj, unsigned long period);
int NDS_OS_Abort_Timer_Object(void *tobj);



