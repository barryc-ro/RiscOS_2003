#include "ndsstubs.h"
#include "n2t008.h"
#include "ndcport.h"
#include "kernel.h"
#include "Global/ioctl.h"
#include "Interface/HighFSI.h"
#include <stdio.h>

NSTATUS  NWEXPORT PORT_Set(PORTPTR port)
{
    return 0;
}

NSTATUS  NWEXPORT PORT_Open(PORTPTR port)
{
    char buf[100];
    sprintf (buf, "serial%c#baud%d;ndata%d;nstop%d;%s;%s;sleep:",
        port->name[3],  /* port number is picked out from name: COMn */
        port->baudrate,
        port->eightbit? 8: 7,
        port->stopbits,
        (port->parity == 'E')?"even":
        (port->parity == 'N')?"noparity":"odd",
        (port->flags == 0)? "nohandshake":
        (port->flags & (PORTIXON | PORTIXOFF))? "xon":
        (port->flags & (PORTRTSXOFF | PORTCTSXON))? "rts": "dtr");

    port->infohand.serial_in = _kernel_osfind (OSFind_ReadFile, buf);

    if (port->infohand.serial_in)
        port->infohand.serial_out = _kernel_osfind (OSFind_OpenOut, buf);

    if (port->infohand.serial_out) return 0;

    PORT_Close (port);
    return NEPORTALLOC;
}

NSTATUS  NWEXPORT PORT_Close(PORTPTR port)
{
    /* Only try and close the file handles if they're non-zero (otherwise we'll
    be shutting every file on the filing system) */
    if (port->infohand.serial_in)
        _kernel_osfind (0, (char*) port->infohand.serial_in);

    if (port->infohand.serial_out)
        _kernel_osfind (0, (char*) port->infohand.serial_out);

    return 0;
}

NSTATUS  NWEXPORT PORT_Read(PORTPTR port,NUSHORT NWFAR *nbytes,NDATA area,NUSHORT timeout)
{
    _kernel_osgbpb_block bl;
    ioctl_t ioctl;

    /* first of all set the timeout on the stream */
    ioctl.reason = IOCTL_GENERIC_TIMEOUT;
    ioctl.group = IOCTL_GROUP_GENERIC;
    ioctl.write = 1;
    ioctl.data = timeout;
    _kernel_osargs (OSArgs_IOCtl, port->infohand.serial_in, (int) &ioctl);

    /* now perform the read */
    bl.dataptr = area;
    bl.nbytes = *nbytes;
    _kernel_osgbpb (OSGBPB_ReadFromPTR, port->infohand.serial_in, &bl);

    /* return number of bytes transfered */
    *nbytes -= bl.nbytes;
    return 0;
}

NSTATUS  NWEXPORT PORT_Write(PORTPTR port,NUSHORT nbytes,NDATA area)
{
    _kernel_osgbpb_block bl;
    bl.dataptr = area;
    bl.nbytes = nbytes;
    _kernel_osgbpb (OSGBPB_WriteAtPTR, port->infohand.serial_out, &bl);
    return 0;
}

NSTATUS  NWEXPORT PORT_ClearBuffer(PORTPTR port, PORTBUFFLAG bufflag)
{
    if (bufflag & PORTINPUTBUF)
        _kernel_osargs (OSArgs_Flush, port->infohand.serial_in, 0);

    if (bufflag & PORTOUTPUTBUF)
        _kernel_osargs (OSArgs_Flush, port->infohand.serial_out, 0);

    return 0;
}

NSTATUS  NWEXPORT PORT_GetBufferBytes(PORTPTR port, PORTBUFFLAG bufflag,
                              NUSHORT NWFAR *inputbytes,
                              NUSHORT NWFAR *outputbytes )
{
    if (bufflag & PORTINPUTBUF && inputbytes)
        *inputbytes = _kernel_osargs (OSArgs_ReadEXT,
            port->infohand.serial_in, 0);

    if (bufflag & PORTOUTPUTBUF && outputbytes)
        *outputbytes = _kernel_osargs (OSArgs_ReadEXT,
            port->infohand.serial_out, 0);

    return 0;
}
