#include "ndstypes.h"
#include "highhdi.h"
#include "porting.h"
#include "n2t008.h"

/*-----------------------------------------------------
 * ndt-282 interface
 * --------------------------------------------------*/
NDS_STATUS HD_CheckCardPresence (void){
	return(STATUS_OK);
}
NDS_STATUS HD_ResetCard (NDS_BYTE *atr_data, NDS_BYTE *atr_len, NDS_BYTE *first_history_byte){
	return(STATUS_OK);
}
NDS_STATUS HD_CardIoCommand ( NDS_BYTE *to_card, int to_card_len, NDS_BYTE *from_card, int *from_card_len,
                       NDS_BOOLEAN direction, NDS_USHORT timeout ){
	return(STATUS_OK);
}
NDS_STATUS HD_RequestEcm(NDS_USHORT pid){
	return(STATUS_OK);
}
NDS_STATUS HD_StopEcm(NDS_USHORT pid){
	return(STATUS_OK);
}
NDS_STATUS HD_EcmProcessingFinished(NDS_USHORT pid, NDS_BYTE buf_pair, NDS_ODDEVEN pack){
	return(STATUS_OK);
}
NDS_STATUS HD_RequestEmm(HD_EMM_FILTER emm){
	return(STATUS_OK);
}
NDS_STATUS HD_StopEmm( void ){
	return(STATUS_OK);
}
NDS_STATUS HD_EmmProcessingFinished(NDS_BYTE buf_num){
	return(STATUS_OK);
}
NDS_STATUS HD_SetDescrambler(NDS_USHORT stream_pid, NDS_BYTE *cw, NDS_ODDEVEN key){
	return(STATUS_OK);
}
NDS_STATUS HD_StopDescrambler(NDS_USHORT stream_pid){
	return(STATUS_OK);
}
NDS_STATUS HD_SetCaValue (NDS_BYTE ca_value){
	return(STATUS_OK);
}
NDS_STATUS HD_SetCardId(NDS_ULONG card_id){
	return(STATUS_OK);
}
NDS_STATUS HD_SetIrdId(NDS_ULONG ird_id){
	return(STATUS_OK);
}
/*----------------------------------------------------
 * OS porting
 * --------------------------------------------------*/


int NDS_OS_CreateProcess (char                  *process_abbrivation,
                             NDS_OS_MAIN_FUNCTION  *task_main_function,
                             int                   priority_index,
                             unsigned long                 stack_size,
                             unsigned long                 queue_size,
                             int                   queue_item_size,
                             unsigned long                 *process_handle){
	return(STATUS_OK);
}
int NDS_OS_Send_Message (unsigned long process_handle, unsigned long message){
	return(STATUS_OK);
}

int NDS_OS_Get_Message  (unsigned long process_handle, unsigned long *message){
	return(STATUS_OK);
}
int NDS_OS_CreateSemaphore (void **sem_handle,
                            int  init_val){
	return(STATUS_OK);
}
int NDS_OS_ReleaseSemaphore (void *sem_handle){
	return(STATUS_OK);
}

int NDS_OS_RequestSemaphore (void *sem_handle){
	return(STATUS_OK);
}

void   NDS_OS_Enter_Critical (void){
}
void   NDS_OS_Exit_Critical (void){
}

unsigned long  NDS_OS_Time_Tick_Per_Sec (void){
	return(STATUS_OK);
}

void   NDS_OS_Time_Delay (unsigned long delay){
}
unsigned long  NDS_OS_Get_Time_In_Ticks (void){
	return(STATUS_OK);
}

/* n2-t008 interface routines */

int CompareServiceRef(SERVICE_REF *service_ref1, SERVICE_REF *service_ref2){
	return(STATUS_OK);
}
NDS_STATUS GetIrdIdentifier (RX_IDENTIFIER *ird_ident){
	return(STATUS_OK);
}
NDS_STATUS SetCasId (NDS_USHORT cas_id){
	return(STATUS_OK);
}
NDS_STATUS SetCwStatus(SERVICE_REF service, NDS_BYTE stream_number, NDS_BYTE stream_type, NDS_BYTE cw_status ){
	return(STATUS_OK);
}
NDS_STATUS SetNumDvbDescramblers(NDS_BYTE num_descramblers){
	return(STATUS_OK);
}
NDS_STATUS SetClearModePermission(NDS_BYTE clear_mode_status){
	return(STATUS_OK);
}
NDS_STATUS ProcessSoftwareDownloadAction (DOWNLOAD_ACTION *action){
	return(STATUS_OK);
}
NDS_STATUS InstructSwDownload (SW_DOWNLOAD_EMM *start_download){
	return(STATUS_OK);
}
NDS_STATUS SwitchSwCode (SW_SWITCH_EMM *switch_param){
	return(STATUS_OK);
}
NDS_STATUS CAFreeFecm(FECM_KEY fecm){
	return(STATUS_OK);
}
NDS_STATUS CALoadFecm(FECM_KEY fecm, API_PRIORITY api_apriority){
	return(STATUS_OK);
}
NDS_STATUS CAReadFecm(FECM_KEY fecm, NDS_BYTE stream_number, NDS_BYTE stream_type, NDS_BYTE *fecm_buffer, NDS_USHORT *length){
	return(STATUS_OK);
}
NDS_STATUS SendApplicationEvent(APP_ID application, NDS_ULONG event_id, NDS_BYTE payload_length, NDS_BYTE *payload){
	return(STATUS_OK);
}
NDS_STATUS InitNvramArea (int nvram_area_size, NDS_USHORT nvram_area_type, NDS_USHORT *nvram_area_access_handle){
	return(STATUS_OK);
}
NDS_STATUS DataToIrd (NDS_BYTE length, NDS_BYTE *data){
	return(STATUS_OK);
}
NDS_STATUS VerAllocateRam (int ram_size, NDS_BYTE **ram_adr){
	return(STATUS_OK);
}
NDS_STATUS WriteNvramData(NDS_USHORT nvram_area_access_handle, int location, int length, NDS_BYTE *data){
	return(STATUS_OK);
}
NDS_STATUS ReadNvramData(NDS_USHORT nvram_area_access_handle, int location, int length, NDS_BYTE *data){
	return(STATUS_OK);
}


void main(void){
  unsigned short ird_version = 1;
  unsigned long ird_id=123456;
  unsigned long ver_version;
     InitVerifier (ird_version, ird_id, &ver_version);
}
