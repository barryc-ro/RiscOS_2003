
#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include "porting.h"
#include "ndsmsgr.h"
#include "DebugLib/DebugLib.h"

/* NCFresco Script message block */
typedef struct
{
    unsigned int handle;
    char         strng[MAX_MSG_LENGTH];
} ncfresco_scriptmsg_data;

typedef struct
{
    struct
    {
        int    size;
        wimp_t sender;
        int    my_ref;
        int    your_ref;
        int    action_code;
    } hdr;

    ncfresco_scriptmsg_data data;
} ncfresco_scriptmsg;

typedef struct
{
      int size;
      wimp_t sender;
      int my_ref;
      int your_ref;
      int action;
      int reason_code;
} browser_message;

int msgr_poll_word = 0;
unsigned long msg_sender = 0;
void *msgr_semaphore = NULL;

static ncfresco_scriptmsg static_msg;
/* the following structures are used held in the following order.
 *    - there exists one list of msgr_nds_structures.  There is a one to one relationship
 *    between this structure and a process id, bound to javascript by its unique id string.
 *    A registration for a string that already exists will repurpose the existing struct.
 *    This means that two processes requesting a nds_structure with the same string will
 *    result in the second being the only valid reference.  Unless by chance the memory location
 *    is identical in which case only the second will be called but the first can delete it.
 *
 *    - the msgr_nds_struct is a listener waiting for a javascript object to bind to it. Once
 *    bound that JS object can send messages to the given process, that process can then respond
 *    to that object specifically.
 *
 *    -  each msgr_nds_structure contains a list of one or more msgr_jso_structures this
 *    one for each javascript object which registers against that string_id.
 *
 *    -  within each jso_id there is a list of messages that that process is yet to read. Note
 *    that when the JS object sends a message that message will be duplicated for each jso_id
 *    and retained until that process reads it.
 *
 *    - expected usage is for a single process to register early on in the run time of the box
 *    it will remain listening dormant until a page is loaded.  This page registers an intent to
 *    communicate that page will at some stage send a message to the application process which
 *    has until now been dormant.  That process will react to that communication and respond
 *    to the JS object.  The JS object will utilise that response.  Later the page will be
 *    unloaded and the 'closed' garbage collection will remove the reference to the JS object
 *    (unregister it).  The application process now retains its dormant state.
 */

typedef struct
{
      void*             next;
      char              msg[4];
} msgr_msg_struct;

typedef struct
{
      void              *next;
      msgr_msg_struct   *msgs;
      wimp_t            task_num;
      unsigned int     js_object_id;
} msgr_jso_struct;

typedef struct
{
      void             *next;
      unsigned long     p_id;
      msgr_jso_struct  *jsos;
      char             id_string[4];
} msgr_nds_struct;

static msgr_nds_struct *msgr_list = NULL;
/* end of msgr structure lists */

#ifndef DEBUGLIB
#define msgr_malloc malloc
#define msgr_calloc calloc
#define msgr_free   free
#else


static void  mem_check(void);
static void* msgr_malloc(size_t size);
static void* msgr_calloc(size_t n, size_t size);
static void  msgr_free(void* ptr);

/* the following functions are for memory calculations they are done as part of
 * diagnostic builds to ensure that memory is not leaked in release builds.
 */

#define magic_value    (('M' << 24) + ('E' << 16) + ('M' << 8) + ('\0'))
#define fill_character 'h'
#define extra_size     248
#define initial_offset 124

static int outstanding_data = 0;

#if (initial_offset + 4) > extra_size
#error offset must be less than the offset
#endif

static void mem_check(void)
{
    if (0 != outstanding_data)
    {
        dprintf(("","outstanding malloc (%i)\n", outstanding_data));
    }
    else
    {
        dprintf(("","outstanding malloc OK\n"));
    }

}

static void* msgr_malloc(size_t size)
{
  char* tmp = malloc(size + extra_size);

  memset(tmp, fill_character, size + extra_size);

  ((int*)tmp)[0] = magic_value;

  ((int*)tmp)[1] = size;

  outstanding_data += size;
  
  dprintf(("", "msgr_malloc @ (%p)\n", tmp));

  return (tmp + initial_offset);
}

static void* msgr_calloc(size_t n, size_t size)
{
    void* tmp = msgr_malloc(n*size);

    if (tmp)
    {
       memset(tmp, 0, size);
    }

    return tmp;
}

static void msgr_free(void* ptr)
{
  if (NULL == ptr)
  {
      dprintf(("", "attempt to free a NULL pointer\n"));
  }
  else
  {
      char* tmp = ((char*)ptr - initial_offset);
      int size = ((int*)tmp)[1];

      if (magic_value != ((int*)tmp)[0])
      {
          dprintf(("", "attempt to free an unallocated block\n"));
      }
      else
      {
          int i;
          memset(ptr, fill_character, size);

          for (i=8; i < (size + extra_size); i++)
          {
              if (fill_character != tmp[i])
              {
                  if ((tmp[i] > '~') || (tmp[i] < ' '))
                  {
                      dprintf(("", "memory overwritten @ (%i) for size (%i) ASCII = (%i) \n", i, size, tmp[i]));
                  }
                  else
                  {
                      dprintf(("", "memory overwritten @ (%i) for size (%i)  char = (%c) \n", i, size, tmp[i]));
                  }
              }
          }
      }
      outstanding_data -= size;
      
      dprintf(("", "msgr_free @ (%p)\n", tmp));
      free (tmp);
  }
}
#endif

/* the following methods are the only means of allocating and freeing memory
 * as used within the msgr database */
/* add message to the end of a given message struct */
static int add_msgr_msg(msgr_jso_struct* jso, const char* msg)
{
    int ret_val = NDS_OS_STATUS_FAIL;

    msgr_msg_struct *tmp = msgr_calloc(1, sizeof(msgr_msg_struct) + strlen(msg));

    if (tmp)
    {
        tmp->next = (msgr_msg_struct*)jso->msgs;
        strcpy(tmp->msg, msg);

        jso->msgs = tmp;

        ret_val = NDS_OS_STATUS_OK;
    }
    return ret_val;
}

/* this removes the message at the head of the tail of the chain.  I.e. the one that
 * has been there for the longest. */
static int return_disconnected_top_msgr_msg(msgr_jso_struct* jso, msgr_msg_struct **rem_msg)
{
    int ret_val = NDS_OS_STATUS_FAIL;

    if (NULL != jso->msgs)
    {
        void **tmp = (void**)&(jso->msgs);

        while (NULL != (*tmp))
        {
            /* if tmp points to the pointer to the last message */
            if (NULL == (((msgr_msg_struct*)(*tmp))->next))
            {
                (*rem_msg) = (msgr_msg_struct*)(*tmp);

                (*tmp) = NULL;

                ret_val = NDS_OS_STATUS_OK;

                break;
            }
            else
            {
                tmp = (void**)&((msgr_msg_struct*)(*tmp))->next;
            }
        }

    }
    return ret_val;
}

/* delete all msgr_msgrs in the list for each jso */
static int delete_msgr_msgs(msgr_jso_struct* jso)
{
    void *tmp = (void*)(jso->msgs);
    void *tmp2 = tmp;

    while (NULL != tmp)
    {
        tmp2 = ((msgr_msg_struct*)tmp)->next;
        ((msgr_msg_struct*)tmp)->next = NULL;

        msgr_free(tmp);

        tmp = tmp2;
    }

    jso->msgs = NULL;

    return NDS_OS_STATUS_OK;
}

static int add_msgr_jso(msgr_nds_struct *idstr, unsigned int jso_id, wimp_t task)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_jso_struct *tmp = msgr_calloc(1, sizeof(msgr_jso_struct));

    if (tmp)
    {
        tmp->js_object_id   = jso_id;
        tmp->task_num = task;
        tmp->next     = (void*)idstr->jsos;

        idstr->jsos = tmp;

        ret_val = NDS_OS_STATUS_OK;
    }

    return ret_val;
}

/* remove one reference to a javascript object by specification */
static int remove_msgr_jso(msgr_nds_struct *idstr, unsigned int js_object)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    void **tmp = (void**)&(idstr->jsos);

    while (NULL != (*tmp))
    {
        if (js_object == (((msgr_jso_struct*)(*tmp))->js_object_id))
        {
            break;
        }

        tmp = &(((msgr_jso_struct*)(*tmp))->next);
    }

    if (NULL != (*tmp))
    {
        msgr_jso_struct* tmp2 = (msgr_jso_struct*)(*tmp);

        (*tmp) = tmp2->next;

        tmp2->next = NULL;

        delete_msgr_msgs(tmp2);

        msgr_free(tmp2);

        ret_val = NDS_OS_STATUS_OK;
    }

    return ret_val;
}

/* remove all javascript object references */
static int delete_msgr_jsos(msgr_nds_struct *idstr)
{
    void *tmp = (void*)(idstr->jsos);
    void *tmp2 = tmp;

    while (NULL != tmp)
    {
        tmp2 = ((msgr_jso_struct*)(tmp))->next;
        ((msgr_jso_struct*)tmp)->next = NULL;
        
        dprintf(("", "deleting javascript objects (%p) next (%p)\n", tmp, tmp2));

        delete_msgr_msgs(tmp);

        msgr_free(tmp);

        tmp = tmp2;
    }

    idstr->jsos = NULL;

    return NDS_OS_STATUS_OK;
}

static int send_message_by_jso_struct(msgr_jso_struct* jso_id, unsigned long p_id, const char* message_string)
{
    int ret_val = NDS_OS_STATUS_FAIL;

    if ((NULL != jso_id) &&
        (jso_id->task_num != 0))
    {        
        unsigned long block = 0;

        memset(&static_msg, 0, sizeof(ncfresco_scriptmsg));

        memcpy(static_msg.data.strng, message_string, MAX_MSG_LENGTH);

        static_msg.hdr.action_code = ANT_MScriptSend;
        static_msg.hdr.size = sizeof(static_msg.hdr) + sizeof(static_msg.data.handle) + strlen(static_msg.data.strng) +1;
        static_msg.hdr.size = ((static_msg.hdr.size) + 3) & ~3;

        static_msg.data.handle = jso_id->js_object_id;
        
        msgr_poll_word = (int)jso_id->task_num;
        msg_sender    = p_id;
        
        dprintf(("", "sent message waiting for root process to send it\n"));
        NDS_OS_Get_Message (p_id, &block);
        dprintf(("", "sent message sent\n"));

        ret_val = NDS_OS_STATUS_OK;
    }

    return ret_val;
}

/* this method looks for a string if it exists it returns it     */
/* if it fails to find it it creates a new one                   */
/* it is the responsability of the caller to set ret_ptr to NULL */
static int find_or_add_id_string_struct(const char* id_string, msgr_nds_struct** ret_ptr)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    void **tmp = (void**)&msgr_list;

    while (NULL != (*tmp))
    {
        if (0 == strcmp(id_string, ((msgr_nds_struct*)(*tmp))->id_string))
        {
            (*ret_ptr) = (msgr_nds_struct*)(*tmp);

            ret_val = NDS_OS_STATUS_OK;

            break;
        }

        tmp = &((msgr_nds_struct*)(*tmp))->next;
    }

    if (NULL == (*tmp))
    {
        msgr_nds_struct *tmp2 = msgr_calloc(1, sizeof(msgr_nds_struct)+strlen(id_string));
        
        if (tmp2)
        {
            strcpy(tmp2->id_string, id_string);

            tmp2->next = NULL;
            
            (*tmp) = (void*)tmp2;

            (*ret_ptr) = (msgr_nds_struct*)(tmp2);

            ret_val = NDS_OS_STATUS_OK;
        }
        
        dprintf(("", "allocating new nds structure @ (%p) next (%p)\n",
                       (*ret_ptr), (*ret_ptr)->next));
    }

    return ret_val;
}

static int remove_id_string_struct(const char* id_string)
{
    int ret_val = NDS_OS_STATUS_FAIL;

    void **tmp = (void**)&msgr_list;

    while (NULL != (*tmp))
    {        
        if (0 == strcmp(id_string, ((msgr_nds_struct*)(*tmp))->id_string))
        {
            break;
        }

        tmp = &((msgr_nds_struct*)(*tmp))->next;
    }

    if (NULL != (*tmp))
    {
        void *tmp2 = (*tmp);

        (*tmp) = (((msgr_nds_struct*)(*tmp))->next);
        ((msgr_nds_struct*)(tmp2))->next = NULL;
        
        delete_msgr_jsos(tmp2);

        msgr_free(tmp2);

        ret_val = NDS_OS_STATUS_OK;
    }

    return ret_val;
}

static int delete_id_string_structs(void)
{
    int ret_val = NDS_OS_STATUS_OK;

    while (NULL != msgr_list)
    {
        ret_val = remove_id_string_struct(msgr_list->id_string);

        if (NDS_OS_STATUS_FAIL == ret_val)
        {
            break;
        }
    }
    return ret_val;
}

static int assign_js_object_by_string(const char* id_string, wimp_t task, unsigned int handle)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* tmp = msgr_list;

    while (tmp)
    {
        if (0 == strcmp(tmp->id_string, id_string))
        {
            dprintf(("", "found registered listener p_id (%d)\n", (int)tmp->p_id));
            
            ret_val = add_msgr_jso(tmp, handle, task);
            
            break;
        }

        tmp = (msgr_nds_struct*)tmp->next;
    }
    return ret_val;
}

static int assign_message_by_handle_and_task(const char* message, wimp_t task, unsigned int handle)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* tmp = msgr_list;
    int done = 0;

    while ((NULL != tmp)&&(0 == done))
    {
        msgr_jso_struct *jso_ptr = tmp->jsos;

        while ((NULL != jso_ptr)&&(0 == done))
        {

            if ((jso_ptr->task_num == task)&&
                (jso_ptr->js_object_id == handle))
            {
                ret_val = add_msgr_msg(jso_ptr, message);
                
                if (NDS_OS_STATUS_OK == ret_val)
                {
                    dprintf(("", "send message P_id (%d) JSO_id (%d)\n", (int)tmp->p_id, (int)jso_ptr->js_object_id));
                    ret_val = NDS_OS_Send_Message (tmp->p_id, jso_ptr->js_object_id);
                }
                
                done = 1;
            }

            jso_ptr = (msgr_jso_struct*)jso_ptr->next;
        }

        tmp = (msgr_nds_struct*)tmp->next;
    }
    return ret_val;
}

static int msgr_handle_check(unsigned int msgr_handle, msgr_nds_struct** nds_ptr)
{
#ifdef DEBUGLIB
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* tmp = msgr_list;

    while (tmp)
    {
        if (tmp == (msgr_nds_struct*)msgr_handle)
        {
            ret_val = NDS_OS_STATUS_OK;
            break;
        }

        tmp = (msgr_nds_struct*)tmp->next;
    }

    if ((NDS_OS_STATUS_OK == ret_val)&&(NULL != nds_ptr))
    {
#else
    int ret_val = NDS_OS_STATUS_OK;

    if (NULL != nds_ptr)
    {
#endif
        (*nds_ptr) = (msgr_nds_struct*)msgr_handle;
    }
    return ret_val;
}

/* end of database memory allocation/deallocation methods */

int msgr_register_handler(int *block)
{
    ncfresco_scriptmsg* data = (ncfresco_scriptmsg*)block;
    ncfresco_scriptmsg msg;

    dprintf(("","got registration event from (%p) object (0x%x) (%s)\n",
                       data->hdr.sender, data->data.handle, data->data.strng));
    
    memset(&msg, 0, sizeof(ncfresco_scriptmsg));

    if (NDS_OS_STATUS_OK ==
            assign_js_object_by_string(data->data.strng,
                                       data->hdr.sender,
                                       data->data.handle))
    {
        msg.hdr.your_ref = data->hdr.my_ref;
        msg.data.handle = data->data.handle;

        sprintf(msg.data.strng, thread_manager_task_name);

        msg.hdr.size = sizeof(msg.hdr)
                       + sizeof(msg.data.handle)
                       + strlen(thread_manager_task_name)
                       + 1;

        msg.hdr.size = (msg.hdr.size+3) & ~3;
        msg.hdr.action_code = ANT_MScriptRegister;

        wimp_send_message(wimp_USER_MESSAGE, (wimp_message*)&msg,  data->hdr.sender);
    }

    return NDS_OS_STATUS_OK;
}

/* JavaScript -> application pipe
   This is a message directly from the javascript object using the send method.  This
   should be used as a pipe directly to the application from the JavaScript.  This is
   used by this application as appending a new message to all registered jsos and sending
   a message to that process to note the messages arrival
 */
int msgr_send_handler(int* block)
{
    ncfresco_scriptmsg* data = (ncfresco_scriptmsg*)block;

    assign_message_by_handle_and_task(data->data.strng, data->hdr.sender, data->data.handle);    

    dprintf(("", "got JSMessage handle (%d)\nmsg (%s)\n", data->data.handle, data->data.strng));

    return NDS_OS_STATUS_OK;
}

/* this routine is essentially a garbage collection handler as called indirectly from
   the javascript garbage collection of the JS object */
int msgr_closed_handler  (int *block)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* tmp = msgr_list;
    ncfresco_scriptmsg* data = (ncfresco_scriptmsg*)block;

    dprintf(("", "tmp (%p) closed handler\n", tmp));
    
    while (NULL != tmp)
    {
        if (0 == strcmp(data->data.strng, tmp->id_string))
        {
            ret_val = remove_msgr_jso(tmp, data->data.handle);
            break;
        }
        tmp = (msgr_nds_struct*)tmp->next;
    }
    return ret_val;
}

int msgr_poll_word_handler (void)
{
    dprintf(("", "msgr_poll_word_handler: sending message from parent\n"));
    
    wimp_send_message(wimp_USER_MESSAGE, (wimp_message*)&static_msg, (wimp_t)msgr_poll_word);
    
    msgr_poll_word = 0;
    
    return NDS_OS_Send_Message (msg_sender, 0);
}

int NDS_OS_AppMsgr_Create(void)
{    
    dprintf(("", "creating semaphore\n"));    
    
    return NDS_OS_CreateSemaphore(&msgr_semaphore, 1);
}

void NDS_OS_AppMsgr_TidyUp(void)
{
#ifdef DEBUGLIB

    if (msgr_list)
    {
        dprintf(("", "AppMsgr_TidyUp is deleting objects left behind\n"));
    }
    
    delete_id_string_structs();

    mem_check();
#else
    delete_id_string_structs();
#endif

    NDS_OS_DestroySemaphore(&msgr_semaphore);
}

int NDS_OS_AppMsgr_Register(const char* id_string, unsigned long p_id, unsigned int *msgr_handle)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* nds_ptr = NULL;

    if (NULL != msgr_handle)
    {
        dprintf(("", "requesting semaphore\n"));
        
        NDS_OS_RequestSemaphore(msgr_semaphore);
        
        dprintf(("", "NDS_OS_AppMsgr_Register: (%s) (%d) (%p)\n", id_string, (int)p_id, msgr_handle));
        
        ret_val = find_or_add_id_string_struct(id_string, &nds_ptr);

        if (NDS_OS_STATUS_OK == ret_val)
        {
            nds_ptr->p_id = p_id;
            (*msgr_handle) = (unsigned int) nds_ptr;
        }        
        
        NDS_OS_ReleaseSemaphore(msgr_semaphore);
    }

    return ret_val;
}

int NDS_OS_AppMsgr_Deregister(unsigned int msgr_handle)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    void *tmp = (void*)&msgr_list;

    dprintf(("", "NDS_OS_AppMsgr_Deregister: (%d)\n", msgr_handle));
    
    while (NULL != tmp)
    {
        msgr_nds_struct* cmp = (msgr_nds_struct*)msgr_handle;

        if (cmp == tmp)
        {
            NDS_OS_RequestSemaphore(msgr_semaphore);
            
            ret_val = remove_id_string_struct(((msgr_nds_struct*)tmp)->id_string);
            
            NDS_OS_ReleaseSemaphore(msgr_semaphore);
            
            break;
        }
        tmp = ((msgr_nds_struct*)tmp)->next;
    }
    return ret_val;
}

int NDS_OS_AppMsgr_Read(unsigned int msgr_handle, unsigned int JSObjectID, char message_string[MAX_MSG_LENGTH])
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* nds_ptr = NULL;

    dprintf(("", "NDS_OS_AppMsgr_Read: (%d) (%d)\n", msgr_handle, JSObjectID));
    
    ret_val = msgr_handle_check(msgr_handle, &nds_ptr);

    if (NDS_OS_STATUS_OK == ret_val)
    {
       msgr_jso_struct* jso_ptr = (msgr_jso_struct*)nds_ptr->jsos;
       msgr_msg_struct* msg_ptr = NULL;

       while (NULL != jso_ptr)
       {
           if (jso_ptr->js_object_id == JSObjectID)
           {
               NDS_OS_RequestSemaphore(msgr_semaphore);
               
               ret_val =  return_disconnected_top_msgr_msg(jso_ptr, &msg_ptr);

               if (NDS_OS_STATUS_OK == ret_val)
               {
                   memcpy(message_string, msg_ptr->msg, MAX_MSG_LENGTH);
                   msgr_free(msg_ptr);
               }
               
               NDS_OS_ReleaseSemaphore(msgr_semaphore);
               break;
           }
           jso_ptr = (msgr_jso_struct*)jso_ptr->next;
       }
    }
    return ret_val;
}

int NDS_OS_AppMsgr_Send(unsigned int msgr_handle, unsigned int JSObjectID, const char* message_string)
{
    int ret_val = NDS_OS_STATUS_FAIL;
    msgr_nds_struct* nds_ptr = NULL;

    dprintf(("", "NDS_OS_AppMsgr_Send: (%d) (%d) (%s)\n", msgr_handle, JSObjectID, message_string));
    
    ret_val = msgr_handle_check(msgr_handle, &nds_ptr);

    if (NDS_OS_STATUS_OK == ret_val)
    {
       msgr_jso_struct* jso_ptr = (msgr_jso_struct*)nds_ptr->jsos;
       
       while (NULL != jso_ptr)
       {           
           if (jso_ptr->js_object_id == JSObjectID)
           {
               ret_val = send_message_by_jso_struct(jso_ptr, nds_ptr->p_id, message_string);
               break;
           }
           
           jso_ptr = (msgr_jso_struct*)jso_ptr->next;
       }
    }

    return ret_val;
}

int NDS_OS_AppMsgr_Broadcast(const char* message_string)
{
    int ret_val = NDS_OS_STATUS_OK;
    msgr_nds_struct* nds_ptr = msgr_list;

    dprintf(("", "NDS_OS_AppMsgr_Broadcast: (%s)\n", message_string));

    while (NULL != nds_ptr)
    {
       msgr_jso_struct* jso_ptr = (msgr_jso_struct*)nds_ptr->jsos;

       while (NULL != jso_ptr)
       {
           ret_val = send_message_by_jso_struct(jso_ptr, nds_ptr->p_id, message_string);
           jso_ptr = (msgr_jso_struct*)jso_ptr->next;
       }

        nds_ptr = (msgr_nds_struct*)nds_ptr->next;
    }

    return ret_val;
}
