#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "porting.h"

/* RISC OS specific headers */
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "wimplib.h"
#include "debuglib/debuglib.h"
#include "setjmp.h"
#include "taskwindow.h"
#define CHUNK_MAGIC 0xf60690ff

#define CaDebugPrintLine(text_pointer) o_printf("%s\n",text_pointer)

#define NDS_MAX_PROC_NAME 10

typedef int  NDS_STATUS;
typedef unsigned short NDS_USHORT;
typedef char NDS_BYTE;
typedef int NDS_BOOLEAN;
typedef char NDS_ODDEVEN;
typedef int HD_EMM_FILTER;
typedef int SERVICE_REF;
typedef int RX_IDENTIFIER;
typedef int DOWNLOAD_ACTION;
typedef int SW_DOWNLOAD_EMM;
typedef int SW_SWITCH_EMM;
typedef int FECM_KEY;
typedef int APP_ID;
typedef int API_PRIORITY;
typedef unsigned long NDS_ULONG;

#define STATUS_OK 0

/*
const static priorities [] =
{
   NDS_OS_PRIORITY_00,
   NDS_OS_PRIORITY_01,
   NDS_OS_PRIORITY_02,
   NDS_OS_PRIORITY_03,
   NDS_OS_PRIORITY_04,
   NDS_OS_PRIORITY_05,
   NDS_OS_PRIORITY_06,
   NDS_OS_PRIORITY_07,
   NDS_OS_PRIORITY_08,
   NDS_OS_PRIORITY_09,
   NDS_OS_PRIORITY_10,
   NDS_OS_PRIORITY_11,
   NDS_OS_PRIORITY_12,
   NDS_OS_PRIORITY_13,
   NDS_OS_PRIORITY_14,
   NDS_OS_PRIORITY_15
};
*/

typedef struct
{
   int                  status;
   char                 process_abbreviation[NDS_MAX_PROC_NAME];
   NDS_OS_MAIN_FUNCTION *task_main_function;
   int                  priority;
   void                 *queue;
   int                  max_queue_count;
   int                  queue_count;
   int                  task_handle;
} NDS_TASK;

typedef struct
{
   char *abbreviation;
   void *stack;
   void *queue;
} NDS_TASK_DEF;

static NDS_TASK       NDS_task[NDS_MAX_TASK];

extern int task_id;


/**************************************************
 *    NDS_OS_CreateProcess
 **************************************************
 * Is called to create process, queue and so on, as required by used OS.
 * Stores data in format allows access to process queue using process_handle
 * ???discuss??? priority_index is an index in priority list so ECM task will have highest
 * priority.
 **************************************************
 * Parameters  process_abbreviation  - Identifier of process
 *             task_main_function   - Pointer to verifier task main function
 *                                     If in used OS task entry point has another
 *                                     format porting implementation has to create glue
 *                                     that calls this function.
 *             priority_index       - index of priority allows to avoid dependents of verifier
 *                                     from the priorities scale used by OS.
 *             stack_size           - stack_size in chars
 *             queue_size           - queue size in number of items.
 *             queue_item_size      - length of each queue item.
 *             process_handle       - pointer memory to store process handle.
 *
 **************************************************
 *  Return values:
 *  STATUS_OK    - if task was successfully created
 *  STATUS_FAIL  - if task was not created for any reason.
 */
#define NDS_FREE     0
#define NDS_IN_USE   1

void Default_main_function (void *data)
{
   int slot;
   slot = (int)data;
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Task start [%d]: %s on %p", slot,
                                                                       NDS_task[slot].process_abbreviation,
                                                                       NDS_task[slot].task_main_function);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
   NDS_task[slot].task_main_function (NULL);
}

int NDS_OS_CreateProcess (char                  *process_abbreviation,
                          NDS_OS_MAIN_FUNCTION  *task_main_function,
                          int                   priority_index,
                          unsigned long         stack_size,
                          unsigned long         queue_size,
                          int                   queue_item_size,
                          unsigned long         *process_handle)
{
   int            j;
   int            free_slot;
   int            call_rslt;
   char           Str[100];
   NDS_TASK*      this_task;

   free_slot = -1;
   for (j = 0; j < sizeof (NDS_task) / sizeof (NDS_task[0]); j++)
   {
      if (NDS_task[j].status == NDS_FREE)
      {
         free_slot = j;
         break;
      }
   }

   if (free_slot != -1)
   {
      this_task = &NDS_task[free_slot];
      this_task->status = NDS_IN_USE;
      this_task->task_main_function = task_main_function;
      strncpy (this_task->process_abbreviation,
         process_abbreviation,
         sizeof (this_task->process_abbreviation) - 1);

      strcpy (Str, process_abbreviation);
      strcat (Str, " Thread");

      {
            char buf[255];
            _kernel_stack_chunk* sc = calloc ((size_t) stack_size, 1);
            if (sc == 0) {
//                dprintf (("", "not enough memory for new stack\n"));
                return 0;
            }

            memcpy (sc + 1, _kernel_current_stack_chunk () + 1, 28);
            sc->sc_mark = CHUNK_MAGIC;
            sc->sc_size = stack_size;
            ((int*) sc)[stack_size / 4 - 1] = (int) task_main_function;

            sprintf (buf, "taskwindow -name \"%s\" -wimpslot 0k -txt &%x -task &%x \
-quit \"NDS_InitVerifier %x\"",
                Str, (int) free_slot, task_id, (int) sc);
            wimp_start_task (buf, (int*) &this_task->task_handle);
      }

#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Task[%d]: %s %p",
            free_slot,
            this_task->process_abbreviation,
            this_task->task_handle);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
      if (this_task->task_handle == NULL ) {
         call_rslt = NDS_OS_STATUS_FAIL;
      }
      else {
         call_rslt = NDS_OS_STATUS_OK;
      }


      if (call_rslt != 0)
      {
         this_task->status = 0;
         return (-1);
      }

      /* Create a buffer for the message queue */
      _swix (Buffer_Create, _INR(0, 2) | _OUT(0),
         0,  // flags word
         (size_t)queue_item_size * (unsigned int)queue_size + 1, // size
         -1, // generate handle
         &this_task->queue);

      if (this_task->queue == 0)
         call_rslt = NDS_OS_STATUS_FAIL;
      else
         call_rslt = NDS_OS_STATUS_OK;

      if (call_rslt != 0)
      {
         this_task->status = 0;
         return (-1);
      }

      this_task->queue_count = 0;
      this_task->max_queue_count = (int)queue_size;
      *process_handle = free_slot;
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Task[%d]: %s %p queue %p", free_slot,
               this_task->process_abbreviation, task, this_task->queue);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
      return 0;
   }
   else
   {
      return (-1);
   }
}

/**************************************************
 *   NDS_OS_Send_Message
 **************************************************
 * Sends message to the process defined by process_handle
 **************************************************
 * Parameters  process_handle - handle of the process
 *             message        - pointer to data to send
 **************************************************
 *  Return values:
 *  STATUS_OK    - if message was successfully sent
 *  STATUS_FAIL  - if message was not send for any reason.
 */
int NDS_OS_Send_Message (unsigned long process_handle, unsigned long message)
{
   int sig_stat;
   if ((process_handle < (sizeof (NDS_task) / sizeof (NDS_task[0]))) &&
       (NDS_task[process_handle].status == NDS_IN_USE))
   {
      if (NDS_task[process_handle].queue_count < NDS_task[process_handle].max_queue_count)
      {
         NDS_task[process_handle].queue_count++;
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Send_Message queue %p, msg %d", NDS_task[process_handle].queue, message);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
        /* Insert message into buffer */
        _swix (OS_CallAVector, _INR(1, 3) | _IN(9),
            ((unsigned int) NDS_task[process_handle].queue) | (1u<<31), // bit 31 => block insert
            &message,
            sizeof message,
            INSV);

         sig_stat = NDS_OS_STATUS_OK;
         return (sig_stat);
      }
   }
   return 1;
}

/**************************************************
 *   NDS_OS_Get_Message
 **************************************************
 * Receives message sent to the process defined by process_handle.
 * It is a blocking call, returns only when message is received.
 **************************************************
 * Parameters: process_handle - handle of the process
 *             message        - pointer to memory to receive data
 **************************************************
 *  Return values:
 *  STATUS_OK    - if message was received
 *  STATUS_FAIL  - if process_handle is invalid.
 */
int NDS_OS_Get_Message (unsigned long process_handle, unsigned long *message)
{
   unsigned char sig_stat;

   if ((process_handle < (sizeof (NDS_task) / sizeof (NDS_task[0]))) &&
       (NDS_task[process_handle].status == NDS_IN_USE))
   {
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Get_Message queue %p", NDS_task[process_handle].queue);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
      /* Call upcall 6 to give up control */
      while (NDS_task[process_handle].queue_count == 0)
         _swix (OS_UpCall, _INR(0, 1),
            6,
            &NDS_task[process_handle].queue_count);

      /* Read message from buffer */
      _swix (OS_CallAVector, _INR(1, 3) | _IN(9),
          ((unsigned int) NDS_task[process_handle].queue) | (1u<<31), // bit 31 => block insert
          message,
          sizeof message,
          REMV);

#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Get_Message msg %d", *message);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
      NDS_task[process_handle].queue_count--;
      sig_stat = NDS_OS_STATUS_OK;
      return 0;
   }
   *message = 0xffffffff;
   return 1;
}

/**************************************************
 *   NDS_OS_CreateSemaphore
 **************************************************
 * Is called to create semaphore required by used OS.
 * Stores data in format allows access to semaphore using sem_handle
 **************************************************
 * Parameters: sem_handle - pointer to created semaphore.
 *             init_val   - value of semaphore ??counter?? in init time.
 *                            0 - create semaphore as locked.
 **************************************************
 *  Return values:
 *  STATUS_OK    - if semaphore was successfully created
 *  STATUS_FAIL  - if semaphore was not created for any reason.
 */
int NDS_OS_CreateSemaphore (void **sem_handle, int  init_val)
{
   int result;

   /* under RISC OS a semaphore is just a 32 bit word, passed to UpCall 6 */
   *sem_handle = malloc (sizeof (int));
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS CreateSemaphore sem_handle %p", sem_handle);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
   if (*sem_handle == 0)
      result = 1;
   else {
      *(int*) *sem_handle = init_val;
      result = 0;
   }

   return result;
}

/**************************************************
 *   NDS_OS_Release_Semaphore
 **************************************************
 * Releases semaphore, allows another task continue execution.
 **************************************************
 * Parameters: sem_handle - handle of semaphore
 **************************************************
 *  Return values:
 *  STATUS_OK    - on success.
 *  STATUS_FAIL  - if semaphore handle is invalid.
 */
int NDS_OS_ReleaseSemaphore (void *sem_handle)
{
   *(int*)sem_handle = 1;

   /* We yield here, using 0 as a known nonzero pollword */
   _swix (OS_UpCall, _INR (0, 1), 6, 0);
   return 0;
}
/**************************************************
 *   NDS_OS_Request_Semaphore
 **************************************************
 * Stops task execution until semaphore is released. On exit semaphore is locked.
 **************************************************
 * Parameters: sem_handle - handle of semaphore
 **************************************************
 *  Return values:
 *  STATUS_OK    - on success.
 *  STATUS_FAIL  - if semaphore handle is invalid.
 */
int NDS_OS_RequestSemaphore (void *sem_handle)
{
   while (*(int*)sem_handle == 0)
        _swix (OS_UpCall, _INR (0, 1), 6, sem_handle);
   *(int*) sem_handle = 0;
   return 0;
}

/**************************************************
 *   NDS_OS_Enter_Critical, NDS_OS_Exit_Critical
 **************************************************
 * Control entering to and exiting from critical section of program.
 **************************************************
 * Parameters: none
 **************************************************
 */
void   NDS_OS_Enter_Critical (void)
{
    _swix (OS_IntOff, 0);
}
void   NDS_OS_Exit_Critical (void)
{
    _swix (OS_IntOn, 0);
}

/**************************************************
 *   NDS_OS_Time_Tick_Per_Sec
 **************************************************
 * Returns resolution of system clock in ticks per second.
 **************************************************
 * Parameters: none
 **************************************************
 */
unsigned long NDS_OS_Time_Tick_Per_Sec (void)
{
  return CLOCKS_PER_SEC;
}

/**************************************************
 *   NDS_OS_Time_Delay
 **************************************************
 * Suspends task execution for required number of ticks.
 **************************************************
 * Parameters: delay - suspend time in ticks of system clock.
 **************************************************
 */
void NDS_OS_Time_Delay (unsigned long delay)
{
    unsigned int t1, t, dt;

    _swix(OS_ReadMonotonicTime, _OUT(0), &t1);
    t = t1;
    dt = (unsigned int) t1 + delay;

    do
    {
        int escape;
        int wait = dt - t;

        if (wait >= 0x8000) wait = 0x7FFF;
        _swix(OS_Byte, _INR(0,2)|_OUT(2), 129, wait & 0xFF, wait >> 8, &escape);
        _swix(OS_ReadMonotonicTime, _OUT(0), &t);
        if (escape == 0x1B)
            break;
    } while (t - t1 < delay);

    return;
}

/**************************************************
 *   NDS_OS_Time_Tick_Per_Sec
 **************************************************
 * Returns current system time in ticks of system timer.
 **************************************************
 * Parameters: none
 **************************************************
 */
unsigned long NDS_OS_Get_Time_In_Ticks (void)
{
   unsigned long time;

   _swix (OS_ReadMonotonicTime, _OUT(0), &time);
   return time;
}

/**************************************************
 *   NDS_OS_Send_MessageEx
 **************************************************
 * Sends variable length message to the process
 * defined by process_handle
 **************************************************
 * Parameters  process_handle - handle of the process
 *             message        - pointer to data to send
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was successfully sent
 *  NDS_OS_STATUS_FAIL  - if message was not send for any reason.
 */
int NDS_OS_Send_MessageEx (unsigned long process_handle, void *item, int item_size)
{
   int sig_stat;
   if ((process_handle < (sizeof (NDS_task) / sizeof (NDS_task[0]))) &&
       (NDS_task[process_handle].status == NDS_IN_USE))
   {
      if (NDS_task[process_handle].queue_count < NDS_task[process_handle].max_queue_count)
      {
         NDS_task[process_handle].queue_count++;
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
      /*-----------------09/03/2000 10:14PM---------------
       * Should be implemented but skiped for now
       * --------------------------------------------------*/
/*      char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Send_Message queue %p, msg %d", NDS_task[process_handle].queue, message);
      CaDebugPrintLine(prn_buf);*/
      }
#endif
#endif
         sig_stat = NDS_OS_STATUS_OK;
         return (sig_stat);
      }
   }
   return 1;
}

/**************************************************
 *   NDS_OS_Get_MessageEx
 **************************************************
 * Receives variable length message sent to the
 * process defined by process_handle.
 * It is a blocking call.
 **************************************************
 * Parameters: process_handle - handle of the process
 *             message        - pointer to memory to receive data
 **************************************************
 *  Return values:
 *  NDS_OS_STATUS_OK    - if message was received
 *  NDS_OS_STATUS_FAIL  - if process_handle is invalid.
 */
int NDS_OS_Get_MessageEx  (unsigned long process_handle, void *item, int max_len)
{
   unsigned char sig_stat;

   if ((process_handle < (sizeof (NDS_task) / sizeof (NDS_task[0]))) &&
       (NDS_task[process_handle].status == NDS_IN_USE))
   {
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
         char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Get_Message queue %p", NDS_task[process_handle].queue);
         CaDebugPrintLine(prn_buf);
      }
#endif
#endif
#ifdef DEBUG_OUTPUT_ON         /* Debug output enabled */
#ifdef OS_FLOW_CONTROL        /* Feature control level */
      {
/*-----------------09/03/2000 10:12PM---------------
 * should be implemented, Skiped for now      AL
 * --------------------------------------------------*/
/*      char prn_buf[128];
         sprintf((char *)prn_buf, "NDS. OS Get_Message msg %d", *message);
      CaDebugPrintLine(prn_buf);*/
      }
#endif
#endif
      NDS_task[process_handle].queue_count--;
      sig_stat = NDS_OS_STATUS_OK;
      return 0;
   }
   return 1;
}


/**************************************************
 *   RISC OS Specific code
 **************************************************
 */

#include "modhead.h"

void unresolved (void) {
    puts ("unresolved");
}

extern int da_mem = -1;
int handle;
#define NOTUSED(A) ((A)=(A))
static int pollword = 0;
int task_id = -1;

int main (int argc, char* argv[]) {
    unsigned short ird_version = 1;
    unsigned long ird_id=123456;
    unsigned long ver_version;
    WimpMessage block;
    int event_code;
    FILE* f;
    _kernel_oserror* e;
    int messages[4] = {TaskWindow_Output, TaskWindow_Ego, 0};
    NOTUSED(argc);
    NOTUSED(argv);

    /* don't attempt to start the task again */
    if (task_id != -1) return 0;

    e = wimp_initialise (310, "NDS Thread Manager", messages, 0, &task_id);
    if (e) {
        _swi (OS_GenerateError, _IN (0), e);
        return 1;
    }

    dprintf (("","current stack chunk: %p\n", _kernel_current_stack_chunk ()));
    InitVerifier (ird_version, ird_id, &ver_version);

    f = fopen ("pipe:out", "wb");
    for (;;) {
        wimp_poll (
            Wimp_Poll_NullMask | Wimp_Poll_PollWord,
            (WimpPollBlock*) &block,
            &pollword,
            &event_code);

        switch (event_code) {
        case Wimp_EUserMessage:
        case Wimp_EUserMessageRecorded:
            switch (block.hdr.action_code) {
            case Wimp_MQuit:
                fclose (f);
                exit (0);
//                _swix (OS_ExitAndDie, _IN (0) | _IN (3),
//                    0, Module_Title);
                break;
            case TaskWindow_Output:
                fwrite (block.data.bytes + 4, block.data.words[0], 1, f);
                fflush (f);
                break;//taskwindow_output (&block); break;
            case TaskWindow_Ego:
                fprintf (f, "task %x started, thread %d\n",
                    block.hdr.sender,
                    block.data.words[0]);
                NDS_task[block.data.words[0]].task_handle = block.hdr.sender;
                break;
            break;
            }
        }
    }

    return 0;
}

int size = 65536;

/* Turn off stack checking for the SVC part of code */
#pragma -s1
int thread_slotextend (int n, void** p)
{
    int ret;
    _swix (OS_ChangeDynamicArea, _INR(0, 1) | _OUT(1),
        handle,
        n,
        &ret);
    *p = (void*) (da_mem + size);
    size += ret;

    return ret;
}

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void
*pw)
{
    _kernel_oserror* e;
    // create dynamic area for heap
    e = _swix (OS_DynamicArea, _INR(0,8) | _OUT(1) | _OUT(3),

        0,                  /* reason, create area */
        -1,                 /* we're given an area number */
        size,               /* initial size */
        -1,                 /* we're given the base address */
        1 << 7,
        -1,                 /* maximum size */
        0,
        pw,                 /* workspace for handler */
        "Thread Heap",      /* name of area */

        &handle,            /* dynamic area number */
        &da_mem);           /* base address of area */
    if (e) return e;
    memset ((char*) da_mem, 0, size);
    debug_initialise ("Thread", "", "");
    debug_set_unbuffered_files (TRUE);
    _kernel_register_slotextend (&thread_slotextend);

    dprintf (("", "da_mem at %x\n", da_mem));
    printf ("da_mem at %x\n", da_mem);

    return 0;
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    _kernel_oserror* e;
    int i;

    /* Closedown any extant tasks */
    if (task_id != -1 && task_id != 0) {
        e = wimp_close_down (task_id);
        task_id = 0;
    }

    for (i = 0; i < NDS_MAX_TASK; ++i)
        if (NDS_task[i].status == NDS_IN_USE)
            if (!e) e = wimp_close_down (NDS_task[i].task_handle);

    if (!e) e = _swix (OS_DynamicArea, _INR(0, 1), 1, handle);
    return e;
}

void module_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    int i;
    if (service_number != Service_WimpCloseDown) return;

    /* Mark a thread as closed if it has quit */
    if (r->r[2] == task_id) {
        task_id = 0;
        return;
    }

    for (i = 0; i < NDS_MAX_TASK; ++i)
        if (NDS_task[i].task_handle == r->r[2]) {
            NDS_task[i].status = NDS_FREE;
            return;
        }
}

_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    int i;
    switch (cmd_no) {
    case CMD_NDS_InitVerifier:
//        _swix (TaskWindow_TaskInfo, _IN(0) | _OUT(0), 0, &i);
//        if (i == 0) _swix (OS_Module, _INR(0,2), 2, Module_Title, arg_string);
//        else _kernel_oscli ("{ > null: }%%WimpTask %%NDS_InitVerifier");
        _swix (OS_Module, _INR(0,2), 2, Module_Title, arg_string);
        break;
    case CMD_NDS_ThreadInfo:
                printf ("Queue count  Task name\n");
        for (i = 0; i < NDS_MAX_TASK; ++i)
            if (NDS_task[i].status == NDS_IN_USE)
                printf ("%3d          %s\n",
                    NDS_task[i].queue_count,
                    NDS_task[i].process_abbreviation);
        break;
    }

    return 0;
}


