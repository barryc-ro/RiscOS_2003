// header file for MACHINE.H

/* Begin-Prologue */
#ifndef MACHINE_H
#define MACHINE_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#include "options.h"


/* state machine stuff */

#define NCMA_BOOT_NONE   0
#define NCMA_BOOT_MIN	 1
#define NCMA_BOOT_MAX	 2

#define NC_UNCERTAIN     0
#define NC_POWERLOSS	 1
#define NC_MOVED	 2

typedef enum {
    Trans_Idle,
    Trans_Timeout,
    Trans_CardOK,
    Trans_CardBad,
    Trans_CardRemoved,
    Trans_CompleteOK,
    Trans_CompleteBad,
    Trans_AuthFail,
    Trans_URLStart,
    Trans_URLRetry,
    Trans_Registry,
    Trans_Shutdown,
    Trans_ShutdownComplete,
    Trans_URLShutdown,
    Trans_URLShutdownCancel,
    Trans_URLUnblock,
    Trans_URLChangePIN,
    Trans_URLLeavePIN,
    Trans_PowerUp,
    Trans_DialOK,
    Trans_DialBad,
    Trans_URLMismatch,
    Trans_URLMismatchAck,
    Trans_NCMASurf,
    Trans_URLDownloadMin,
    Trans_URLDownloadMax,
    Trans_URLDownloadSched,
    Trans_URLDownloadNak,
    Trans_URLConnect,
    Trans_URLConnectNak,
    Trans_MIMEOk,
    Trans_MIMEBad,
    Trans_URLMovedAck,
    Trans_URLMovedNak,
#ifdef TRAP_PPP_TIMEOUTS
    Trans_PPPTimeout,
#endif
    Trans_URLDisconnectAck,
#ifdef POINTLESS_BUTTONS
    Trans_URLSmartcardAck,
    Trans_URLBadCardAck,
#endif
    Trans_URLDisconnectNak,
    Trans_URLBadUnblockPINAck,
    Trans_HUP,
    Trans_BootedFull,
    Trans_BootedFast,
    Trans_BootedUpdate,
    Trans_URLTransfer,
    Trans_Cron,
    Trans_URLPinNAK,
    Trans_PreConnect,
    Trans_NCMADialUI_Start,
    Trans_BadCardNak,
    Trans_Logout,
    Trans_LogoutAck,
    Trans_LogoutNak,
#ifdef SC_SWAPPING
    Trans_WrongISPCard,
#endif /* SC_SWAPPING */
#ifdef EMAIL_CLIENT
    Trans_NCMAEnterEmailSelectUserOffline,
    Trans_NCMAEnterEmailSelectUserOnline,
    Trans_NCMAEmailSelectUserAck,
    Trans_NCMAEmailSelectUserNak,
#endif /* EMAIL_CLIENT */
    Trans_HangUp
} NCMA_TRANS;


typedef enum {
    State_NCMAInit,
    State_NCMAStart,
    State_NCMAPanic,
    State_NCMASleep,
    State_NCMANoCard,
    State_NCMABadCard,
    State_NCMAPin,
#ifdef CHIMPANZEE_INTERFACE
    State_NCMADefaultPIN,
    State_NCMAApresPIN,
#endif
    State_NCMADiallingISP,
    State_NCMABadPin,
    State_NCMAShutdown,
    State_NCMAUnblock,
    State_NCMAChangePIN,
    State_NCMANewPIN,
    State_NCMAMismatch,
    State_NCMABooted,
    State_NCMADownload,
    State_NCMAConnect,
    State_NCMADiallingRelServer,
    State_NCMAMoved,
    State_NCMADiallingRegServer,
    State_NCMABadUnblockPIN,
    State_NCMALogout,
#ifdef SC_SWAPPING
    State_NCMAWrongISPCard,
#endif /* SC_SWAPPING */
#ifdef EMAIL_CLIENT
    State_NCMAEmailSelectUser,
#endif /* EMAIL_CLIENT */
    State_NCMACron
} NCMA_STATE;



/* In some parts of the UI no screens should be changed (for instance when
    browsing online and waiting for a PIN to be entered after swapping
    smartcards). This flag shows whether such screen changes are currently
    disallowed */
DECLARE bool bNoScreenChanges INIT(false);

/* This variable holds whether a redial has been requested or not. */
DECLARE bool bRedialRequested INIT(false);


#ifdef SC_SWAPPING
/* This strucutre holds all the smartcard-swapping related variables in one
    nice structure. */

/* bCardVerifed holds whether a card is currently verified or not. A card is
    said to be verified when it has been inserted and a correct PIN entered
    for it. As soon as the card is removed, it is flagged as being unverified
    until such time as the correct PIN has been re-entered.
   It is sometimes necessary to store the previous state of the NCMA state
    machine so that it can be returned to. UIPreviousState allows this to be
    stored.
   bootblock_num_bytes is used to store the number of bytes held in the copy of the
    smartcard bootblock.
   bootblock_copy holds a pointer to the memory area used to hold the copy of
    the smartcard bootblock.
*/
typedef struct
{
  bool bCardVerified;
  NCMA_STATE uiPreviousState;
  int bootblock_num_bytes;
  unsigned char *bootblock_copy;
} sc_swapping_struct;

DECLARE sc_swapping_struct sc_swapping;
#endif /* SC_SWAPPING */



#ifdef EMAIL_CLIENT
/* The code below maintans a state of whether the email client was called
    offline or online, or null. */
typedef enum
{
  email_state_none,
  email_state_offline,
  email_state_online
} EMAIL_CLIENT_STATE;
DECLARE EMAIL_CLIENT_STATE uiemail_client_state INIT(email_state_none);

/* Declare a routine to display a textual description of an email state. */
DECLARE char *email_status_string(EMAIL_CLIENT_STATE state);
#endif /* EMAIL_CLIENT */




DECLARE NCMA_STATE ncma_state INIT(State_NCMAInit);
DECLARE NCMA_TRANS ncma_trans INIT(Trans_Idle);

DECLARE bool ncma_started INIT(false);
DECLARE bool prevent_shutdown INIT(true);
DECLARE bool run_from_powerup INIT(false);
DECLARE bool pointless_button_clicked INIT(false);

DECLARE NCMA_STATE pre_shutdown_state INIT(State_NCMAInit);

DECLARE int card_attempts INIT(0);
DECLARE int ncma_boottype INIT(NCMA_BOOT_NONE);
DECLARE int box_moved INIT(0);

DECLARE char *trans_string(NCMA_TRANS);
DECLARE char *state_string(NCMA_STATE);
DECLARE NCMA_STATE machine(NCMA_TRANS);

DECLARE NCMA_STATE logoff(void);
DECLARE void select_connect_screen_to_display(void);
DECLARE void redial_interrupted(void);
DECLARE NCMA_STATE change_state(NCMA_TRANS transition);

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

