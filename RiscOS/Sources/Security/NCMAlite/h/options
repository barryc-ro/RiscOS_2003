/* header file options.h  */

/* This file can be used to set NCMA compile-time flags according to
UserInterface settings and hence stop polluting the components file. */

/* At the current time this is only very simple, will be extended at a later
date. */

#ifndef NCMA_OPTIONS_H
#define NCMA_OPTIONS_H


#include "options.h"
#include <stdbool.h>


/* Define 'global' options that used to be set in the makefile. */
/* Many of these options are historical in nature and may not need to be supported for much longer. */
/*
#
# Different compile options - choose one
#
# use REMOTE_DEBUG to enable remote debugging
# use ENABLE_DEBUGGING if you want to enable debugging!
# use POINTLESS_BUTTONS if you want managed access to ignore the card going in and out and wait for the user
#                       to click on various 'continue' buttons. Undefine this for any sane implementation
# use SHOW_BOOTBLOCK_TRANSITIONS if you want really verbose debugging of what NCBootblock's doing with your data
# use CHIMPANZEE_INTERFACE if you're a big American corporation and you need special hacks in Managed Access to accomodate
# the fact that you bought 40,000 of the wrong type of smartcard
# use DEFEAT_BROWSER_LIMIT to prevent MA parsing NCIBrowserMode tags for restricting URLs
# use LIMIT_RUNAWAY_UIDS if you've got development NVRAM/OTP, otherwise weird stuff may happen
# use HIDEOUS_PROXY_HACK if you want https proxy to always be set to whatever the http proxy is (undef to use real
#                        security proxy information, if available in your area
# use NVRAM_DEBUG if you know what it does, otherwise don't
# use ETHERNET to disable all the modem crap and use a proper network interface
# use SEND_SERIALID_LENGTH to include length data as first 2 bytes of the serial ID string
# use ENABLE_HTTP_PROXY / ENABLE_HTTPS_PROXY to enable ROM based proxies for http and/or SSL http
# use DEBUG_DISCONNECTS to set all PPP line drop timeouts to a minute
# use ISP_CAPTURE to run ISPcapture on invalid smartcards
# use TRAP_PPP_TIMEOUTS if you want a "disconnect?" OSD to sit on PPPTimeout events. Undef to just drop the line
# use USE_NETINIT to invoke the NetInit module instead of bringing the network stuff up ourself
# use SILENT_HUP to ignore the line dropping out from under us, otherwise return to the 'Connect' screen
# use VERIFY_URL to check the home URL before sending it to the browser and generating an error if it seems bogus
# use DISALLOW_USER_CONFIRMATION_OF_LOGOUTS to disallow user confirmation of logouts. If this is defined, performing a logout will just go ahead and log the user out without bringing up the confirmation dialogue.
# use DISALLOW_USER_CONFIRMATION_OF_STANDBY to disallow user confirmation of standby. If this is defined, pressing standby will just go into standby without bringing up the confirmation dialogue.
*/
#undef  REMOTE_DEBUG
#define CHIMPANZEE_INTERFACE
#undef  POINTLESS_BUTTONS
#undef  AUTHENTICATE_SIGNATURES
#undef  DEFEAT_BROWSER_LIMIT
#undef  SHOW_BOOTBLOCK_TRANSITIONS
#define LIMIT_RUNAWAY_UIDS
#undef  HIDEOUS_PROXY_HACK
#undef  NVRAM_DEBUG
#define SEND_SERIALID_LENGTH
#define ENABLE_HTTP_PROXY
#define ENABLE_HTTPS_PROXY
#define ISP_CAPTURE
#undef  TRAP_PPP_TIMEOUTS
#undef  USE_NETINIT
#define SILENT_HUP
#undef  VERIFY_URL



/* Define options that switch on the User Interface setting. */
#if UserIF_Lazarus
  #define LOGOUTS_ONLY_HANGUP
  #define DISALLOW_USER_CONFIRMATION_OF_STANDBY
  #undef  ISP_CAPTURE
#elif UserIF_Omega
  #undef LOGOUTS_ONLY_HANGUP
#else
  #error Don't know this UserIF setting.
#endif


#endif /* NCMA_OPTIONS_H */
