#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */

#define PROTOTYPES_INTERNAL
#include "module.h"
#include "DBUG.h"
#include "machine.h"
#include "vectors.h"
#include "ncma_cmds.h"
#include "ncma_swis.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "ncma_dial.h"
#include "ncma_uid.h"
#include "dynalloc.h"
#include "ncma_url.h"
#include "init.h"

#ifndef TRAP_PPP_TIMEOUTS
  #include "ncma_fx.h"
#endif

#ifdef ENABLE_DEBUGGING
  #include "Debuglib/Debuglib.h"
#endif /* ENABLE_DEBUGGING */

#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif /* MemCheck_MEMCHECK */

#include "task.h"
#include "cmhg_defs.h"
#include "DBUG.h"

#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

#ifdef SC_SWAPPING
  extern unsigned char* bootblock_copy;  /* This is a pointer to a memory area that holds a copy of the bootblock. */
#endif /* SC_SWAPPING */

#ifdef ENABLE_DEBUGGING
  debug_device DebugOutputDevice = PDEBUG_OUTPUT;
#endif /* ENABLE_DEBUGGING */


/* code */

_kernel_oserror *module_init(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror f = {0x00810800, "NCMALite failed to initialize."}, *e = NULL;
    _kernel_swi_regs r;
    static char keyword[] = "verbose/s,file/k,debug/k/e";

    static int args[32];
    char *argp, *debug_file;
    int debug_lvl = 0;

    task_handle = 0;
    task_stack  = 0;
    module_wsp = pw;

#ifdef MemCheck_MEMCHECK
//  MemCheck_InitNoDebug();
  MemCheck_RedirectToFilename("<obey$dir>.MemCheck");
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_SetStoreMiscFunctions( 1);	// So that diagnostics tell us which functions malloced each malloc block.
  MemCheck_InterceptSCLStringFunctions();
  atexit(MemCheck_OutputBlocksInfo);
  MemCheck_SetQuitting(1, 1);
  MemCheck_SetAccessQuitting(1, 1);
//  MemCheck_RegisterArgs( argc, argv);	// Tell MemCheck that strings in argv[0...argc-1] are ok to read.
#endif // MemCheck_MEMCHECK

#ifdef SC_SWAPPING
    bootblock_copy = NULL; /* Set the memory area for bootblock copy to be NULL */
#endif /* SC_SWAPPING */

  /* Initialise the stored-screens data. Note that this cannot be done in the
      initialise_variables() routine as it is needed before that time. */
  flush_stored_screens();

#ifdef ENABLE_DEBUGGING
  debug_initialise ("NCMAlite", "izipfs:$.log", "");
  debug_atexit ();
  debug_output_device (DebugOutputDevice);   /* Output debug info via pdebug */
#ifdef ALLOW_BUFFERED_DEBUGLIB_OUTPUT
  debug_output_buffer_on (0, 4096);
#else
#endif /* ALLOW_BUFFERED_DEBUGLIB_OUTPUT */
#endif /* ENABLE_DEBUGGING */

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
    r.r[0] = (int)module_wsp;
    TinyError = _kernel_swi(TinySupport_Share, &r, &r);
#endif

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   memset((char *)args, 0, 32 * sizeof(int));
   _kernel_swi(OS_ReadArgs, &r, &r);

   if(args[0]) quiet = 0;

   QUIET printf("RISC OS NC Managed Access Lite Version %s\n", NCMA_VERSION);

   if(args[1] != 0) debug_file = (char *)args[1];
   else debug_file = NULL;

   if(args[2]) { /* debug value present */
     argp = (char *)args[2];
     if(*argp++ == 0) {
       debug_lvl = *((int *)argp);
       if(debug_lvl <0) debug_lvl = 0;
       if(debug_lvl >5) debug_lvl = 5;
       QUIET {
         printf("ncma_init: debug level set to %d\n", debug_lvl);
         if(debug_file != NULL) printf("ncma_init: debug file: %s\n", debug_file);
       }
     }
   }

   QUIET printf("ncma_init: initialising memory subsystem...\n");
   rminit();

//   QUIET printf("ncma_init: registering resources...\n");
//   resource_init();

   if(use_dynamic_areas) {
     QUIET printf("ncma_init: dynamic area support detected...\n");
   } else {
     QUIET printf("ncma_init: no dynamic area support found...\n");
   }

   QUIET printf("ncma_init: claiming event vector...\n");
   e = module_claimv();
   if(e) {
     e = &f;
     goto out;
   }

   QUIET printf("ncma_init: enabling event...\n");
   e = module_event_enable();
   if(e) {
     e = &f;
     goto out;
   }

   QUIET printf("ncma_init: initialising ncma subsystem...\n");

   if(ncma_ncma_init()<0) {
     QUIET printf("ncma_init: ncma init failed.\n");
     e = &f;
     goto out;
   };

   init_unique_id();

   ncma_state = State_NCMAInit;


   return ((_kernel_oserror *)0);

out:
   QUIET printf("ncma_init: Bummer!\n");
   return (e);
}



_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &ncma_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);
    return((_kernel_oserror *)NULL);

}


_kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &ncma_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);
}




void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call 0x%x reason code: 0x%x\n",sn,r->r[2]);
  switch(sn) {

    case Service_StartWimp:
    /* Don't claim service memory.  Don't need to object to it because we
     * don't need any application workspace.
     */
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: Service_StartWimp recieved. Not claiming service memory.\n");
        if (task_handle == 0)
        {
            task_handle = -1;

            /* point to command to start task */
            r->r[0] = (int) MODULE_START_COMMAND;

            /* claim call */
            r->r[1] = 0;
        }
        break;

    case Service_StartedWimp:
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: Service_StartedWimp recieved.\n");
        if (task_handle != -1) break;
        /* fall through */

    case Service_Reset:
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: Service_Reset recieved.\n");
        task_handle = 0;
        break;

    case Service_NCDialUIStatus:
    	 switch(r->r[2])
    	 {
             case 0x4: /* IP layer started */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : IP layer started\n");
	     	  ncma_trans = Trans_DialOK;
	     	  line_up = 1;
	     	  setcallback();
	     	  break;
	     case 0x0: /* broken */
	     case 0x81: /* no dial tone */
	     case 0x82: /* line busy */
	     case 0x83: /* no carrier */
	     case 0x84: /* server not responding */
	     case 0x85: /* timeout in script operation */
	     case 0x86: /* unspecified error */
	     	  ncma_trans = Trans_DialBad;
	     	  line_up = 0;
	     	  setcallback();
	     	  break;

	     case 0x90: /* Starting */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : Starting dial\n");
	     case 0x91: /* Dialling */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : Dialling\n");
    	     	  break;
	     case 0x92: /* Connecting */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : Connecting\n");
    	     	  break;
	     case 0x93: /* Connected */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : Connected\n");
    	     	  break;
	     case 0x94: /* Redial */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus : Redial\n");
    	     	  break;

    	     default:
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_svc_handler: unrecognized NCDialUI status code 0x%x\n", r->r[2]);
    	     	  break;
    	 }
    	 break;

    case Service_DiallerStatus: /* we need to listen to the dialler for HUP signals */
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus reason code 0x%x\n", r->r[2]);
    	 switch(r->r[2])
    	 {
             case 0x83: /* No carrier */
               redial_interrupted();
               break;

    	     case 0x0: /* IP down, line down */
               DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : IP down, line down\n");
    	       if(line_up)
               {
                 DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Line is up - closing dialogue box and setting transition to Trans_HUP.\n");
    	         ncma_dbox_close_target(COMMON_DIALOGUE_BOX);
    	         ignore_ppp_timeout = 0;
    	         ncma_trans = Trans_HUP;
    	         line_up = 0;
    	         setcallback();
    	       }
    	     break;

	     case 0x90: /* Starting */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Starting dial\n");
    	     	  break;
	     case 0x91: /* Dialling */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Dialling\n");
    	     	  break;
	     case 0x92: /* Connecting */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Connecting\n");
    	     	  break;
	     case 0x93: /* Connected */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Connected\n");
    	     	  break;
	     case 0x94: /* Redial */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_DiallerStatus : Redial\n");
    	     	  break;
    	 }
    	 break;

    case REGISTRY_STATUS:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : REGISTRY_STATUS\n");
  	  registry_status = r->r[2];
     	  registry_delta = r->r[4];
     	  ncma_trans = Trans_Registry;
     	  setcallback();
       	  break;

    case Service_Shutdown:
#ifndef DISALLOW_USER_CONFIRMATION_OF_STANDBY
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_Shutdown\n");
    	 if(prevent_shutdown == 1) {
    	    r->r[1] = 0; /* whoah, there, shutdown! */
    	    ncma_trans = Trans_Shutdown;
    	    setcallback();
    	 }
#else
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_Shutdown being ignored as DISALLOW_USER_CONFIRMATION_OF_STANDBY is set.\n");
#endif /* DISALLOW_USER_CONFIRMATION_OF_STANDBY */
    	 break;

    case Service_ShutdownComplete:
#ifndef DISALLOW_USER_CONFIRMATION_OF_STANDBY
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_ShutdownComplete\n");
    	 ncma_trans = Trans_ShutdownComplete;
    	 setcallback();
#else
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_ShutdownComplete being ignored as DISALLOW_USER_CONFIRMATION_OF_STANDBY is set.\n");
#endif /* DISALLOW_USER_CONFIRMATION_OF_STANDBY */
    	 break;

    case Service_Standby:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_Standby\n");
         if((r->r[0] & 1) == 0)
         {
           /* box waking up */
           ncma_trans = Trans_PowerUp;
           setcallback();
         }
         break;


    case Service_PPPTimingOut:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_PPPTimingOut\n");
#ifdef TRAP_PPP_TIMEOUTS
         if(ignore_ppp_timeout) { /* don't claim */
#else
	   ncma_sound_effect(NCMA_TIMEOUT_SOUND);
#endif
           ignore_ppp_timeout = 0; /* reset ignore flag */
           ncma_dbox_close_target(COMMON_DIALOGUE_BOX);
#ifdef TRAP_PPP_TIMEOUTS
         } else { /* claim svc call to prevent shutdown */
           r->r[1] = 0; /* claim it */
    	   ncma_trans = Trans_PPPTimeout;
    	   setcallback();
    	 }
#endif
    	 break;


    case Service_PostInit:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_PostInit\n");
      post_initialisation();
      break;


    case Service_InternetStatus:
      switch (r->r[0])
      {
        case 0:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: IP address changed.\n");
          break;

        case 1:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: net map has changed.\n");
          break;

        case 2:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Interface %s has gone %s\n", (char*)r->r[3], r->r[2]?"up":"down");
          break;

        case 3:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: BOOTP/DHCP request about to be sent.\n");
          break;

        case 4:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: BOOTP/DHCP reply has been recieved: Interface name is %s\n", (char*)r->r[2]);
          break;

        case 5:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPOFFER message recieved.\n");
          break;

        case 6:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPREQUEST message about to be sent.\n");
          break;

        case 7:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPACK reply to a DHCPINFORM recieved.\n");
          break;

        case 8:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Another machine detected using this IP address.\n");
          break;

        default:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Unknown reason code %d\n", r->r[0]);
          break;
      }
      break;

    default:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : unrecognized service call\n");
      break;
  }
}





_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
  _kernel_oserror *  e = NULL;
#ifdef USE_TINY
  _kernel_swi_regs r;
  if ( TinyError == NULL ) _kernel_swi( TinySupport_Die, &r, &r);
#endif

#ifdef SC_SWAPPING
  QUIET printf("ncma_final: cancelling memory allocated for smartcard swapping.\n");
  if (bootblock_copy) /* Memory has been allocated */
  {
    rmfree (bootblock_copy);
    bootblock_copy = NULL;
  }
#endif /* SC+SWAPPING */

  e = task_closedown ();

  QUIET printf("ncma_final: cancelling timeouts...\n");
  canceltimeout();

  QUIET printf("ncma_final: releasing events...\n");
  module_event_disable();
  module_releasev();

  QUIET printf("ncma_final: releasing memory resources...\n");
  rmfree_all();

//  QUIET printf("ncma_final: freeing resources...\n");
//  resource_final();

  QUIET printf("ncma_final: done.\n");

  return((_kernel_oserror *)NULL);
}





