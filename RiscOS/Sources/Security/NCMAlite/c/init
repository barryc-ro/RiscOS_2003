/* File:     init.c
   Purpose:  Initialisation section of the module
   Author:   David Cotton
   Modified:

   Copyright 1999 Pace PLC

   This material is the confidential trade secret and proprietary information
   of Pace. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Pace.
   All rights reserved.

   History:

   1999-06-11: DSC
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include <ctype.h>

/* Standby */
#include "cmhg_defs.h"
#include "module.h"
#include "task.h"
#include "machine.h"
#include "ncma_url.h"
#include "init.h"
#include "ncma_ncma.h"
#include "types.h"

#include "dbug.h"


/* =============================================================================
 * Constants definitions
 */




/* =============================================================================
 * Wimp message definitions
 */


/* =============================================================================
 * New type definitions
 */


/* =============================================================================
 * Global variable declarations
 */


/* =============================================================================
 * Function prototype declarations
 */


/* =============================================================================
 * Function definitions
 */


/* -----------------------------------------------------------------------------
   post_initialisation

   Start the Wimp task section of the module and enter the main Wimp poll loop.

   Returns
   doesn't return
 */
void post_initialisation(void)
{
  char buff[256];
  DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation()\n");

  /* Decide on the type of network interface that we have */
#ifdef ETHERNET
  strcpy(buff, NETWORK_INTERFACE_ETHERNET);
  if(write_os_var(NETWORK_INTERFACE_SYS_VAR_NAME, buff, strlen(buff))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): failed setting network interface\n");
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation(): Set network interface to ethernet (interface_type = %d).\n", interface_type);
  }
  interface_type = ETHERNET_INTERFACE;
#else /* Assume modem */
  strcpy(buff, NETWORK_INTERFACE_MODEM);
  if(write_os_var(NETWORK_INTERFACE_SYS_VAR_NAME, buff, strlen(buff))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): failed setting network interface\n");
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation(): Set network interface to modem.\n");
  }
  interface_type = MODEM_INTERFACE;
#endif /* ETHERNET */

  post_initialisation_run = TRUE;
}




