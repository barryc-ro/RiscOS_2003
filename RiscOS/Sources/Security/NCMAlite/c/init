/* File:     init.c
   Purpose:  Initialisation section of the module
   Author:   David Cotton
   Modified:

   Copyright 1999 Pace PLC

   This material is the confidential trade secret and proprietary information
   of Pace. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Pace.
   All rights reserved.

   History:

   1999-06-11: DSC
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include <ctype.h>
#include <stdbool.h>

#include "sys/dcistructs.h"

#include "cmhg_defs.h"
#include "module.h"
#include "task.h"
#include "machine.h"
#include "ncma_url.h"
#include "init.h"
#include "ncma_ncma.h"
#include "types.h"

#include "dbug.h"


/* =============================================================================
 * Constants definitions
 */




/* =============================================================================
 * Wimp message definitions
 */


/* =============================================================================
 * New type definitions
 */


/* =============================================================================
 * Global variable declarations
 */


/* =============================================================================
 * Function prototype declarations
 */
static NETWORK_INTERFACE_TYPE is_ethernet(void);


/* =============================================================================
 * Function definitions
 */


/* -----------------------------------------------------------------------------
   post_initialisation

   Decides what network interface type we have, and sets sytem variables accordingly.

   Returns
   doesn't return
 */
void post_initialisation(void)
{
  char buff[256];
  DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation()\n");

  /* Decide on the type of network interface that we have */
  interface_type = is_ethernet();

  /* Over-ride the above decision if pre-processor options have been set. */
  #ifdef ETHERNET
    DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): ETHERNET set, over-riding existing value.\n");
    interface_type = ETHERNET_INTERFACE;
  #endif /* ETHERNET */

  #ifdef MODEM
    DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): MODEM set, over-riding existing value.\n");
    interface_type = MODEM_INTERFACE;
  #endif /* MODEM */

  /* Ensure that both MODEM and ETHERNET are not defined. */
  #ifdef ETHERNET
    #ifdef MODEM
      #error "MODEM and ETHERNET should not be defined at the same time."
    #endif /* MODEM */
  #endif /* ETHERNET */

  /* Now set system variables accoridngly. */
  if (interface_type == MODEM_INTERFACE)
  {
    strcpy(buff, NETWORK_INTERFACE_MODEM);
    if(write_os_var(NETWORK_INTERFACE_SYS_VAR_NAME, buff, strlen(buff))<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): failed setting network interface\n");
    }
    else
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation(): Set network interface to modem.\n");
    }
  }

  if (interface_type == ETHERNET_INTERFACE)
  {
    strcpy(buff, NETWORK_INTERFACE_ETHERNET);
    if(write_os_var(NETWORK_INTERFACE_SYS_VAR_NAME, buff, strlen(buff))<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "post_intialisation(): failed setting network interface\n");
    }
    else
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "post_intialisation(): Set network interface to ethernet (interface_type = %d).\n", interface_type);
    }
  }

  post_initialisation_run = true;
}





/* -----------------------------------------------------------------------------
   is_ethernet

   Enumerates devices and returns a value according to the type found.

   Returns
   Network interface type, or none.
 */
static NETWORK_INTERFACE_TYPE is_ethernet(void)
{
  _kernel_oserror *e;
  struct chaindib *d;
  NETWORK_INTERFACE_TYPE result = NO_INTERFACE;

  DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet():\n");

  /* Enumerate the network drivers */
  e = _swix(OS_ServiceCall, _INR(0,1)|_OUT(0), 0, Service_EnumerateNetworkDrivers, &d);
  if (e) /* There was an error with the swi call */
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet(): Error with SWI call to enumerate drivers. Defaulting to NO_INTERFACE\n");
    return (NO_INTERFACE);
  }

  if (d != NULL)
  {
    while (d)
    {
      struct chaindib *d_next = d->chd_next;
      /* specification requires chain blocks be in the RMA. C library detects blocks
       * in RMA and frees them correctly with OS_Module.
       * ATM drivers have device names starting with an 'a'
       * Ethernet drivers have device names starting with an 'e'
      */
      DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet(): Device is %s\n", d->chd_dib->dib_name);
      if (d->chd_dib->dib_name[0] == 'e') /* I'll have an 'e', please Bob. */
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet(): Ethernet device detected. Setting device to be ethernet.\n");
        result = ETHERNET_INTERFACE;
      }
      free(d);
      d = d_next;
    }

    /* If an interface is present, and it is not an ethernet one, then assume
        it is a modem one. Note that if we ever have interfaces other than
        modem and ethernet this code will have to be changed. */
    if (result == NO_INTERFACE)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet(): All devices have been enumerated, and no ethernet interface has ben found. Defaulting to modem.\n");
      result = MODEM_INTERFACE;
    }
  }
  else /* No network interfaces found. */
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "is_ethernet(): No network interfaces detected.\n");
  }

  return (result);
}

