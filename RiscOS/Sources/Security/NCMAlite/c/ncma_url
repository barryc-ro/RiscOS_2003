#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"


#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_url.h"
#include "ncma_scard.h"
#include "ncma_cache.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_uid.h"
#include "ncma_utils.h"
#include "ncma_net.h"
#include "smcard.h"
#include "dynalloc.h"


#include "DBUG.h"


int ncma_url_init(void)
{
   if(write_os_var(NCMA_URL_ENV_NAME, NCMA_URL_ENV_VAL, strlen(NCMA_URL_ENV_VAL))<0) return(-1);
   if(write_os_var(NCMA_PATH_ENV_NAME, NCMA_PATH_ENV_VAL, strlen(NCMA_PATH_ENV_VAL))<0) return(-1);
   return(0);
}

int ncma_url_open(char *url)
{
    _kernel_swi_regs r;
    int n;

    n = strlen(url);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_open: %s (%d)\n", url, n);

    n = n>236?236:n;

    memset(msg_block, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
    strncpy(msg_block + 20, url, n);

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}

int ncma_url_gsopen(char *url)
{
    _kernel_swi_regs r;
    int n;

    n = strlen(url);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_open: %s (%d)\n", url, n);

    n = n>236?236:n;

    memset(msg_block, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */

    r.r[0] = (int)url;
    r.r[1] = (int)msg_block + 20;
    r.r[2] = 236;

    if(_kernel_swi(OS_GSTrans, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_GSopen: GSTrans failed\n");
        strncpy(msg_block + 20, url, n);
    }

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}


char *get_form_field(char *s, char *field)
{
    char *p, *q;

    //if((q = strchr(s, '?'))==NULL) return(NULL);
    if((q = strstr(q, field))==NULL) return(NULL);

    for(;;q++) {
        switch(*q) {
            case '=':
            	 for(p=q; ((*p != '&') && (*p != 0)); p++);
            	 *p = 0;
                 return(++q);
                 break;

            case '&':
            case 0:
            	 return(NULL);
            	 break;

        }
    }
    return(NULL);
}


int ncma_dbox_open(char *url)
{
    _kernel_swi_regs r;
    urlopen_data payload;
    static char dbox_target[] = "__dbox";

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_open: %s\n", url);

    // payload.indirect.url.ptr = url;
    payload.url.offset = sizeof(urlopen_data)+8;
    payload.body_file.ptr = NULL;
    // payload.indirect.target.ptr = dbox_target;
    payload.target.offset = sizeof(urlopen_data);
    payload.tag = 0;
    payload.flags = 0;

    memset(msg_block, 0, 256);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
    memcpy(msg_block + 20, &payload, sizeof(payload));
    strcpy(msg_block + 20 + sizeof(urlopen_data), dbox_target);
    strcpy(msg_block + 28 + sizeof(urlopen_data), url);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_open: Calling with %s\n", msg_block + 20 + sizeof(urlopen_data));

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}

int ncma_standby_dbox_open(char *url)
{
    _kernel_swi_regs r;
    urlopen_data payload;
    static char dbox_target[] = "__dbox_poweroff";

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_standby_dbox_open: %s\n", url);

    // payload.indirect.url.ptr = url;
    payload.url.offset = sizeof(urlopen_data)+16;
    payload.body_file.ptr = NULL;
    // payload.indirect.target.ptr = dbox_target;
    payload.target.offset = sizeof(urlopen_data);
    payload.tag = 0;
    payload.flags = 0;

    memset(msg_block, 0, 256);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
    memcpy(msg_block + 20, &payload, sizeof(payload));
    strcpy(msg_block + 20 + sizeof(urlopen_data), dbox_target);
    strcpy(msg_block + 20 + sizeof(urlopen_data) + 16, url);

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}




int ncma_dbox_close(void)
{
    ncma_dbox_open("ncint:loadurl?remove=__dbox");
    return(0);
}

int ncma_standby_dbox_close(void)
{
    ncma_standby_dbox_open("ncint:loadurl?remove=__dbox_poweroff");
    return(0);
}
int ncma_start_progress_ui(void)
{
    _kernel_swi_regs r;

    r.r[0] = 18;
    r.r[1] = 0;
    _kernel_swi(OS_UpCall, &r, &r);
    return(0);
}

int reload_browser_files(void)
{
    _kernel_swi_regs r;

    memset(msg_block, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 0;
    *(int *)(msg_block + 24) = 0; /* flags - load all files */

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}


int prod_browser_after_standby(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "prod_browser_after_standby: user now %s. browser reload, toplevel UI\n", CURRENT_USER_ENV_VAL);
    write_os_var(CURRENT_USER_ENV_NAME, CURRENT_USER_ENV_VAL, strlen(CURRENT_USER_ENV_VAL));
    reload_browser_files();
    ncma_url_gsopen(TOPLEVEL_UI_URL);
    return(0);
}

#ifdef VERIFY_URL

#define Resolver_GetHostByName	0x46000

static int see_if_url_is_sensible(char *buff)
{
    int r = -1;
    char *colon = strchr(buff, ':');
    if (colon)
    {
	/* terminate scheme temporarily */
	*colon = 0;

	if (caseless_strcmp(buff, "http") == 0 || caseless_strcmp(buff, "ftp") == 0 || caseless_strcmp(buff, "gopher") == 0)
	{
	    /* if a known scheme then check the host */
	    if (colon[1] == '/' && colon[2] == '/')
	    {
		char *host = colon + 3;
		char *slash = strchr(host, '/');
		char *port = strchr(host, ':');

		char *term = NULL, term_c = 0;
		int rc;

		/* find end of host name ( : or / ) and replace with null */
		if (port && port < slash)
		    term = port;
		else if (slash)
		    term = slash;

		if (term)
		{
		    term_c = *term;
		    *term = 0;
		}

		/* try and resolve the hostname */
		if (_swix(Resolver_GetHostByName, _IN(1) | _OUT(1), host, &rc) == NULL &&
		    rc != 0)
		{
		    r = 0;
		}

		/* restore the host terminator */
		if (term)
		    *term = term_c;
	    }

	}
	else if (caseless_strcmp(buff, "ncint") == 0 || caseless_strcmp(buff, "ncfrescointernal") == 0/* || caseless_strcmp(buff, "mailto") == 0*/)
	{
	    /* if a browser internal scheme then it's OK automatically */
	    r = 0;
	}
#if 0   /* this code could be used if this module supported launching applications from the URLOpen alias */
	else
	{
	    /* if it's unknown then check and see whether there is a runtype for it */
	    char env[32];
	    strcpy(env, "Alias$URLOpen_");
	    strncat(env, buff, sizeof(buff));
	    buff[sizeof(buff)-1] = 0;
	    if (getenv(env) == NULL)
		r = -1;
	}
#endif
	/* restore scheme terminator */
	*colon = ':';
    }
    return r;
}
#endif

int ncma_url_user(void) /* "start 'Surfing'" URL, as NCI put it */
{
    char *buff;
    char *tag;
    char *serial;
    _kernel_swi_regs r;
    int rc;

    int tag_bytes;

    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user: called\n");

    if(_kernel_swi(NCBootblock_PinInfo, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user: NCBootblock_PinInfo SWI failed\n");
        return(-1);
    }


    if((buff = (char *)rmalloc(1024, "URL buffer"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user: couldn't allocate memory for URL\n");
        return(-1);
    }

    serial = (char *)r.r[4]; /* get pointer to serial string */

    for(tag=serial;isalnum(*tag);tag++); *tag = 0; /* serial string comes with trailing spaces - ditch 'em */

    if((tag = cache_ptr("URL_INITBC", &tag_bytes))!=NULL) { /* append s/c id and m/f id */
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI1); /* smartcard serial number */
      strcat(buff, serial);
      strcat(buff, "&");
      strcat(buff, REGISTRATION_URL_CGI2); /* manufacturer ID */
      render_hex_id(buff+strlen(buff));


    } else if((tag = cache_ptr("URL_INITB", &tag_bytes))!=NULL) { /* append m/f id only */
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI2); /* manufacturer ID */
      render_hex_id(buff+strlen(buff));

    } else if((tag = cache_ptr("URL_INITC", &tag_bytes))!=NULL) { /* append s/c id only */
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI1); /* smartcard serial number */
      strcat(buff, serial);

    } else if((tag = cache_ptr("URL_INIT", &tag_bytes))!=NULL) { /* it's just a bog standard URL */
      strncpy(buff, tag, tag_bytes);
    } else {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user: no URL tags defined\n");
        rmfree((unsigned char *)buff);
        return(-1);
    }

    /* Check and see if the URL looks sensible before passing it onto the browser */
#ifdef VERIFY_URL
    rc = see_if_url_is_sensible(buff);
#else
    rc = 0;
#endif

    if (rc == 0)
	ncma_url_open(buff);

    rmfree((unsigned char *)buff);
    return rc;
}


/* create a browser files.allow file and flag it for inclusion in next browser config msg */
/* mode flags as for ncma_network_init */
int limit_browser_url(int mode)
{
    FILE *fp;
    unsigned char *tptr;
    unsigned int tbytes;
    unsigned char *iptr, *sptr;
    char *tag;
    int tag_bytes;

    if((fp=fopen(BROWSER_LIMIT_FILE, "w+"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: couldn't create temp file %s\n", BROWSER_LIMIT_FILE);
        return(-1);
    }

    if(!(mode & NCMA_NET_RAM)) { /* we are dialling from ROM */
      if((tag=cache_ptr("URL_INITBC", &tag_bytes))==NULL) {
        if((tag=cache_ptr("URL_INITB", &tag_bytes))==NULL) {
          if((tag=cache_ptr("URL_INITC", &tag_bytes))==NULL) {
            if((tag=cache_ptr("URL_INIT", &tag_bytes))==NULL) {
                DBUG_PRINTF(DBUG_LVL_ERROR, "limit_browser_url: couldn't find any ROM based URL tags\n");
                fclose(fp);
                return(-1);
            }
          }
        }
      }

    tptr = (unsigned char *)tag;
    tbytes = (unsigned int)tag_bytes;

    } else { /* we are dialling from RAM/SC */

      if((tptr = find_any_url_tag_in_either_enterprise_block(&tbytes))==NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: no URL to limit browser to!\n");
            fclose(fp);
            return(-1);
      }

    }

    if((sptr = (unsigned char *)strstr((char *)tptr, "//"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: didn't understand URL\n");
        fclose(fp);
        return(-1);
    } else {
        sptr+=2; /* skip the '//' */
    }

    iptr = (unsigned char *)strpbrk((char *)sptr, "/:?"); /* search up to trailing slash, colon or query */

    if(iptr == NULL) { /* only slashes are initial '//' - URL is of the form method://host.site  */
      fwrite(sptr, sizeof(unsigned char), strlen((char *)sptr), fp);
      fputs("\n", fp);
      DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: full URL-> %s\n", sptr);
      fclose(fp);
      return(0);
    }

    /* otherwise, URL is method://host.site/path/path/file[?args] - limit to method://host.site/path/path/ */
    fwrite(sptr, sizeof(unsigned char), (int)(iptr-sptr), fp);
    DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: subset of URL-> %.*s\n", (int)(iptr-sptr), sptr);
    fputs("\n", fp);
    fclose(fp);

    limit_browser_access = 1;
    return(0);
}

/* unset the browser site-limiting flag */
int unlimit_browser_url(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "unlimit_browser_url: limit_browser_access = 0\n");
    limit_browser_access = 0;
    return(0);
}

/* set the browser proxy, and limit URL access if applicable */
int browser_proxy(void)
{
    int http = 0, ftp = 0, shttp = 0;
    char *hptr, *fptr, *sptr;
    unsigned int hbytes, fbytes, sbytes;
    FILE *fp;

    _kernel_swi_regs r;

    if((hptr=cache_ptr("HTTP_PROXY", (int *)&hbytes))!=NULL) http = 1;
    if((fptr=cache_ptr("FTP_PROXY", (int *)&fbytes))!=NULL) ftp = 1;
    if((sptr=cache_ptr("SECURITY_PROXY", (int *)&sbytes))!=NULL) shttp = 1;

      if((fp=fopen(BROWSER_CONFIG_FILE, "w+"))==NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't open config file BROWSER_CONFIG_FILE\n");
          return(-1);
      }
#ifdef DEFEAT_BROWSER_LIMIT
      DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: WARNING compile option defeats browser security\n");
      fprintf(fp, "files.allow: %s\n", BROWSER_UNLIMIT_FILE);
#else
      fprintf(fp, "files.allow: %s\n", limit_browser_access?BROWSER_LIMIT_FILE:BROWSER_UNLIMIT_FILE);
#endif
      DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: files.allow: \"%s\"\n", limit_browser_access?BROWSER_LIMIT_FILE:BROWSER_UNLIMIT_FILE);

      if(http) {
          fprintf(fp, "proxy.http.enable: Yes\n");
          fprintf(fp, "proxy.http: %s\n", hptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: http proxy: \"%s\"\n", hptr);
#ifdef HIDEOUS_PROXY_HACK
          fprintf(fp, "proxy.https.enable: Yes\n");
          fprintf(fp, "proxy.https: %s\n", hptr);
#endif
      } else {
          fprintf(fp, "proxy.http.enable: No\n");
#ifdef HIDEOUS_PROXY_HACK
          fprintf(fp, "proxy.https.enable: No\n");
#endif
      }

      if(ftp) {
          fprintf(fp, "proxy.ftp.enable: Yes\n");
          fprintf(fp, "proxy.ftp: %s\n", fptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: ftp proxy: \"%s\"\n", fptr);
      } else {
          fprintf(fp, "proxy.ftp.enable: No\n");
      }

#ifndef HIDEOUS_PROXY_HACK

      if(shttp) {
          fprintf(fp, "proxy.https.enable: Yes\n");
          fprintf(fp, "proxy.https: %s\n", sptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: https proxy: \"%s\"\n", sptr);
      } else {
          fprintf(fp, "proxy.https.enable: No\n");
      }
#endif

      fclose(fp);

    /* send message to reload config files */
    memset(msg_block, 0, 256);

    DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: sending message 0x4af84,2,\"%s\"\n", BROWSER_CONFIG_FILE);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 3; /* load browser config */
    *(int *)(msg_block + 24) = 0;
    sprintf(msg_block+28, "%s", BROWSER_CONFIG_FILE);

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't send LoadConfig message\n");
        return(-1);
    }
#ifndef DEFEAT_BROWSER_LIMIT
    /* and send message to reload allow file */
    memset(msg_block, 0, 256);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 0; /* load user files */
    *(int *)(msg_block + 24) = 0x41; /* flags - load allow & deny files only */

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't send LoadUser message\n");
        return(-1);
    }
#endif
    return(0);

}

unsigned char *find_any_url_tag_in_either_enterprise_block(unsigned int *rbytes)
{
    unsigned char *tptr;
    unsigned int tbytes;
    static unsigned int url_tags[4]={ NCIURLTag, NCIURLCardSerialTag, NCIURLBoxSerialTag, NCIURLBoxCardSerialTag };
    unsigned int l;

    for(l=0;l<4;l++) {
        if((tptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, url_tags[l], &tbytes, NULL))!=NULL) {
            *rbytes = tbytes;
            return(tptr);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "f_t_i_e_e_b: failed miserably to find ANY URL tags in either enterprise block.\n");
    return(NULL);
}
