#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

#include "kernel.h"
#include "swis.h"


#include "options.h"
#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_url.h"
#include "ncma_scard.h"
#include "smtags.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_uid.h"
#include "ncma_utils.h"
#include "ncma_net.h"
#include "smcard.h"
#include "dynalloc.h"
#include "types.h"
#include "task.h"

#include "DBUG.h"

/* Forward prototypes */
static char* substring_replacement(char* initial, const char* const expression, const char* const replacement);

/* The strucure below stores a screen which has not yet been opened due to
    the browser being unavailable. It contains the URL to be opened, the
    target for the URL to be sent to and whether it is a URL screen or a
    dialogue box */
struct {
  char*        url_to_open;
  char*        target;
  unsigned int url_or_dbox;
} url_store;


/* This variable stores whether or not the browser has started yet. */
extern bool browser_started;

/* This variable stores the reference for the last URL message sent. */
unsigned int  last_url_message_ref = 0;


int ncma_url_init(void)
{
   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_init\n");

   /* Initialise the URL store structure */
   url_store.url_to_open = NULL;
   url_store.target = NULL;

   if(write_os_var(NCMA_URL_ENV_NAME, NCMA_URL_ENV_VAL, strlen(NCMA_URL_ENV_VAL))<0) return(-1);
   if(write_os_var(NCMA_PATH_ENV_NAME, NCMA_PATH_ENV_VAL, strlen(NCMA_PATH_ENV_VAL))<0) return(-1);

   return(0);
}



int ncma_url_open(char *url)
{
    int n;
    n = strlen(url);
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_open().\n");

    if (!browser_started)
    {
      /* Warning - browser is not currently running, and therefore storing
          this screen to be opened once the browser has started. */
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_open: Storing this screen.\n");
      store_url_and_target(url, "target", OPEN_URL_TYPE_SCREEN);
      return (0);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_open: %s\n", url);

    /* It is *not* a good idea to attempt to send a wimp message whilst in a
        callback. For this reason, store the url to be opened and then set
        the poll_word to a value that will be detected on a poll and can
        hence then start the url open. Messy, btu the only way that we can
        detect bounced messages. */
    poll_word = 2;

    n = n>236?236:n;
    strncpy (url_to_be_opened, url, n+1); /* +1 to include the string terminator */

    return(1);
}



/* This routine performs a GSTrans operation on the URL before it is sent. */
int ncma_url_gsopen(char *url)
{
    _kernel_swi_regs r;
    int n;

    n = strlen(url);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_gsopen: %s (%d)\n", url, n);

    n = n>236?236:n;

    memset(msg_block, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */

    r.r[0] = (int)url;
    r.r[1] = (int)msg_block + 20;
    r.r[2] = 236;

    if(_kernel_swi(OS_GSTrans, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_gsopen(): GSTrans failed\n");
        strncpy(msg_block + 20, url, n);
    }

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}


char *get_form_field(char *s, char *field)
{
    char *p, *q;

    DBUG_PRINTF(DBUG_LVL_DIAG, "get_form_field()\n");

    //if((q = strchr(s, '?'))==NULL) return(NULL);
    if((q = strstr(q, field))==NULL) return(NULL);

    for(;;q++) {
        switch(*q) {
            case '=':
            	 for(p=q; ((*p != '&') && (*p != 0)); p++);
            	 *p = 0;
                 return(++q);
                 break;

            case '&':
            case 0:
            	 return(NULL);
            	 break;

        }
    }
    return(NULL);
}



int ncma_start_progress_ui(void)
{
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_start_progress_ui()\n");

    r.r[0] = 18;
    r.r[1] = 0;
    _kernel_swi(OS_UpCall, &r, &r);
    return(0);
}



int reload_browser_files(void)
{
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "reload_browser_files()\n");

    memset(msg_block, 0, 256);

//    *(int *)msg_block = n + 20;
    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 0;
    *(int *)(msg_block + 24) = 0; /* flags - load all files */

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) return(-1);
    return(0);
}


int prod_browser_after_standby(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "prod_browser_after_standby: user now %s. browser reload, toplevel UI\n", CURRENT_USER_ENV_VAL);
    write_os_var(CURRENT_USER_ENV_NAME, CURRENT_USER_ENV_VAL, strlen(CURRENT_USER_ENV_VAL));
    reload_browser_files();
    ncma_url_gsopen(TOPLEVEL_UI_URL);
    return(0);
}

#ifdef VERIFY_URL

#define Resolver_GetHostByName	0x46000

static int see_if_url_is_sensible(char *buff)
{
    int r = -1;
    char *colon = strchr(buff, ':');
    if (colon)
    {
	/* terminate scheme temporarily */
	*colon = 0;

	if (caseless_strcmp(buff, "http") == 0 || caseless_strcmp(buff, "ftp") == 0 || caseless_strcmp(buff, "gopher") == 0)
	{
	    /* if a known scheme then check the host */
	    if (colon[1] == '/' && colon[2] == '/')
	    {
		char *host = colon + 3;
		char *slash = strchr(host, '/');
		char *port = strchr(host, ':');

		char *term = NULL, term_c = 0;
		int rc;

		/* find end of host name ( : or / ) and replace with null */
		if (port && port < slash)
		    term = port;
		else if (slash)
		    term = slash;

		if (term)
		{
		    term_c = *term;
		    *term = 0;
		}

		/* try and resolve the hostname */
		if (_swix(Resolver_GetHostByName, _IN(1) | _OUT(1), host, &rc) == NULL &&
		    rc != 0)
		{
		    r = 0;
		}

		/* restore the host terminator */
		if (term)
		    *term = term_c;
	    }

	}
	else if (caseless_strcmp(buff, "ncint") == 0 || caseless_strcmp(buff, "ncfrescointernal") == 0/* || caseless_strcmp(buff, "mailto") == 0*/)
	{
	    /* if a browser internal scheme then it's OK automatically */
	    r = 0;
	}
#if 0   /* this code could be used if this module supported launching applications from the URLOpen alias */
	else
	{
	    /* if it's unknown then check and see whether there is a runtype for it */
	    char env[32];
	    strcpy(env, "Alias$URLOpen_");
	    strncat(env, buff, sizeof(buff));
	    buff[sizeof(buff)-1] = 0;
	    if (getenv(env) == NULL)
		r = -1;
	}
#endif
	/* restore scheme terminator */
	*colon = ':';
    }
    return r;
}
#endif




int ncma_url_user(void) /* "start 'Surfing'" URL, as NCI put it */
{
    char *buff;
    char *tag;
    char *serial;
    _kernel_swi_regs r;
    int rc = 0;

    int tag_bytes;

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): called\n");

    r.r[4] = 0; /* Cope with substitute NCBootblocks that don't fill this in */
    if(_kernel_swi(NCBootblock_PinInfo, &r, &r)!=NULL)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user(): NCBootblock_PinInfo SWI failed\n");
      return(-1);
    }

    if((buff = (char *)rmalloc(1024, "URL buffer"))==NULL)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user(): couldn't allocate memory for URL\n");
      return(-1);
    }

    serial = (char *)r.r[4]; /* get pointer to serial string */
    if (serial)
    {
      for(tag=serial;isalnum(*tag);tag++); *tag = 0; /* serial string comes with trailing spaces - ditch 'em */
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): serial string is %s\n", serial);

#if 0 /* UNNECESSARY CODE */
    /* When we call ncma_url_user() we wish to open a different URL if the
URL_UPGRADE_SERVER bootblock tag is present */
    if((tag = cache_ptr("URL_UPGRADE_SERVER", &tag_bytes))!=NULL)
    {
      char* temp = NULL;
      char sysvar[255]; /* Holds the unexpanded system variable */
      strncpy(buff, tag, tag_bytes);

      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): tag is %s\n", buff);

      /* Scan through the string looking for <> tags */
      for (temp=buff; temp < buff+strlen(buff); temp++)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): *temp is %c\n", *temp);
        if (*temp == '<')
        {
          char* start = temp;
          char* end = temp;
          char* expanded_sysvar = NULL;
          /* Search for the end bracket or end-of-string */
          for (end=temp; end < buff+strlen(buff); end++)
          {
            DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): *start is %c *end is %c\n", *start, *end);
            if (*end == '>' || *end == '\0')
            {
              break;
            }
          }
          end++; /* We want the last character */
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): string goes from %x to %x\n", start,end);
          strncpy(sysvar, start+1, (end-start));
          sysvar[end-start-2] ='\0'; /* Add terminator */
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): string is %s\n", sysvar);
          expanded_sysvar = getenv(sysvar);
          /* Add the <> back on */
          strncpy(sysvar, start, (end-start+1));
          sysvar[end-start] ='\0'; /* Add terminator */
          if (expanded_sysvar == NULL)
          {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user(): system variable %s not found.\n", sysvar);
            buff = substring_replacement(buff, sysvar, "");
          }
          else
          {
            buff = substring_replacement(buff, sysvar, expanded_sysvar);
            rmfree ((unsigned char*) expanded_sysvar);
          }

          temp=buff; /* Reset to the beginning of the string (allows nested substitutions) */
        }
      }

      /* Now search this buffer for spaces. */
      /* According to the spec (????,???/FS), spaces within the URL must be replaced by %20 strings. */
      for (temp=buff; temp < buff+strlen(buff); temp++)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_url_user(): *temp is %c\n", *temp);
        if (isspace(*temp))
        {
          buff = substring_replacement(buff, " ", "%20");
          temp=buff; /* Reset to the beginning of the string */
        }
      }
#endif /* UNNECESSARY CODE */

    /* Not an initial boot, so look for the other URL tags in the bootblock */
    if((tag = cache_ptr("URL_INITBC", &tag_bytes))!=NULL)  /* append s/c id and m/f id */
    {
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI1); /* smartcard serial number */
      if (serial)
        strcat(buff, serial);
      strcat(buff, "&");
      strcat(buff, REGISTRATION_URL_CGI2); /* manufacturer ID */
      render_hex_id(buff+strlen(buff));

    } else if((tag = cache_ptr("URL_INITB", &tag_bytes))!=NULL) { /* append m/f id only */
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI2); /* manufacturer ID */
      render_hex_id(buff+strlen(buff));

    } else if((tag = cache_ptr("URL_INITC", &tag_bytes))!=NULL) { /* append s/c id only */
      strncpy(buff, tag, tag_bytes);
      strcat(buff, strchr(buff, '?')?"&":"?");
      strcat(buff, REGISTRATION_URL_CGI1); /* smartcard serial number */
      if (serial)
        strcat(buff, serial);

    } else if((tag = cache_ptr("URL_INIT", &tag_bytes))!=NULL) { /* it's just a bog standard URL */
      strncpy(buff, tag, tag_bytes);
    } else {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_url_user: no URL tags defined\n");
        rmfree((unsigned char *)buff);
        return(-1);
    }

    /* Check and see if the URL looks sensible before passing it onto the browser */
#ifdef VERIFY_URL
    rc = see_if_url_is_sensible(buff);
#endif

    if (rc == 0)
      ncma_url_open(buff);

    rmfree((unsigned char *)buff);

    return (rc);
}





/* create a browser files.allow file and flag it for inclusion in next browser config msg */
/* mode flags as for ncma_network_init */
int limit_browser_url(int mode)
{
    FILE *fp;
    unsigned char *tptr;
    unsigned int tbytes;
    unsigned char *iptr, *sptr;
    char *tag;
    int tag_bytes;

    if((fp=fopen(BROWSER_LIMIT_FILE, "w+"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: couldn't create temp file %s\n", BROWSER_LIMIT_FILE);
        return(-1);
    }

    if(!(mode & NCMA_NET_RAM))
    { /* we are dialling from ROM */
      if((tag=cache_ptr("URL_INITBC", &tag_bytes))==NULL)
      {
        if((tag=cache_ptr("URL_INITB", &tag_bytes))==NULL) {
          if((tag=cache_ptr("URL_INITC", &tag_bytes))==NULL) {
            if((tag=cache_ptr("URL_INIT", &tag_bytes))==NULL) {
                DBUG_PRINTF(DBUG_LVL_ERROR, "limit_browser_url: couldn't find any ROM based URL tags\n");
                fclose(fp);
                return(-1);
            }
          }
        }
      }

    tptr = (unsigned char *)tag;
    tbytes = (unsigned int)tag_bytes;

    } else { /* we are dialling from RAM/SC */

      if((tptr = find_any_url_tag_in_either_enterprise_block(&tbytes))==NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: no URL to limit browser to!\n");
            fclose(fp);
            return(-1);
      }
    }

    if((sptr = (unsigned char *)strstr((char *)tptr, "//"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: didn't understand URL\n");
        fclose(fp);
        return(-1);
    } else {
        sptr+=2; /* skip the '//' */
    }

    iptr = (unsigned char *)strpbrk((char *)sptr, "/:?"); /* search up to trailing slash, colon or query */

    if(iptr == NULL) { /* only slashes are initial '//' - URL is of the form method://host.site  */
      fwrite(sptr, sizeof(unsigned char), strlen((char *)sptr), fp);
      fputs("\n", fp);
      DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: full URL-> %s\n", sptr);
      fclose(fp);
      return(0);
    }

    /* otherwise, URL is method://host.site/path/path/file[?args] - limit to method://host.site/path/path/ */
    fwrite(sptr, sizeof(unsigned char), (int)(iptr-sptr), fp);
    DBUG_PRINTF(DBUG_LVL_DIAG, "limit_browser_url: subset of URL-> %.*s\n", (int)(iptr-sptr), sptr);
    fputs("\n", fp);
    fclose(fp);

    limit_browser_access = 1;
    return(0);
}




/* unset the browser site-limiting flag */
int unlimit_browser_url(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "unlimit_browser_url: limit_browser_access = 0\n");
    limit_browser_access = 0;
    return(0);
}



/* set the browser proxy, and limit URL access if applicable */
int browser_proxy(void)
{
    int http = 0, ftp = 0, shttp = 0;
    char *hptr, *fptr, *sptr;
    unsigned int hbytes, fbytes, sbytes;
    FILE *fp;

    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy()\n");

    if((hptr=cache_ptr("HTTP_PROXY", (int *)&hbytes))!=NULL) http = 1;
    if((fptr=cache_ptr("FTP_PROXY", (int *)&fbytes))!=NULL) ftp = 1;
    if((sptr=cache_ptr("SECURITY_PROXY", (int *)&sbytes))!=NULL) shttp = 1;

      if((fp=fopen(BROWSER_CONFIG_FILE, "w+"))==NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't open config file BROWSER_CONFIG_FILE\n");
          return(-1);
      }
#ifdef DEFEAT_BROWSER_LIMIT
      DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: WARNING compile option defeats browser security\n");
      fprintf(fp, "files.allow: %s\n", BROWSER_UNLIMIT_FILE);
#else
      fprintf(fp, "files.allow: %s\n", limit_browser_access?BROWSER_LIMIT_FILE:BROWSER_UNLIMIT_FILE);
#endif
      DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: files.allow: \"%s\"\n", limit_browser_access?BROWSER_LIMIT_FILE:BROWSER_UNLIMIT_FILE);

      if(http) {
          fprintf(fp, "proxy.http.enable: Yes\n");
          fprintf(fp, "proxy.http: %s\n", hptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: http proxy: \"%s\"\n", hptr);
#ifdef HIDEOUS_PROXY_HACK
          fprintf(fp, "proxy.https.enable: Yes\n");
          fprintf(fp, "proxy.https: %s\n", hptr);
#endif
      } else {
          fprintf(fp, "proxy.http.enable: No\n");
#ifdef HIDEOUS_PROXY_HACK
          fprintf(fp, "proxy.https.enable: No\n");
#endif
      }

      if(ftp) {
          fprintf(fp, "proxy.ftp.enable: Yes\n");
          fprintf(fp, "proxy.ftp: %s\n", fptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: ftp proxy: \"%s\"\n", fptr);
      } else {
          fprintf(fp, "proxy.ftp.enable: No\n");
      }

#ifndef HIDEOUS_PROXY_HACK

      if(shttp) {
          fprintf(fp, "proxy.https.enable: Yes\n");
          fprintf(fp, "proxy.https: %s\n", sptr);
          DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: https proxy: \"%s\"\n", sptr);
      } else {
          fprintf(fp, "proxy.https.enable: No\n");
      }
#endif

      fclose(fp);

    /* send message to reload config files */
    memset(msg_block, 0, 256);

    DBUG_PRINTF(DBUG_LVL_DIAG, "browser_proxy: sending message 0x4af84,2,\"%s\"\n", BROWSER_CONFIG_FILE);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 3; /* load browser config */
    *(int *)(msg_block + 24) = 0;
    sprintf(msg_block+28, "%s", BROWSER_CONFIG_FILE);

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't send LoadConfig message\n");
        return(-1);
    }
#ifndef DEFEAT_BROWSER_LIMIT
    /* and send message to reload allow file */
    memset(msg_block, 0, 256);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af84; /* Message_NCFresco */
    *(int *)(msg_block + 20) = 0; /* load user files */
    *(int *)(msg_block + 24) = 0x41; /* flags - load allow & deny files only */

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "browser_proxy: couldn't send LoadUser message\n");
        return(-1);
    }
#endif
    return(0);

}




unsigned char *find_any_url_tag_in_either_enterprise_block(unsigned int *rbytes)
{
    unsigned char *tptr;
    unsigned int tbytes;
    static unsigned int url_tags[4]={ NCIURLTag, NCIURLCardSerialTag, NCIURLBoxSerialTag, NCIURLBoxCardSerialTag };
    unsigned int l;

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_any_url_tag_in_either_enterprise_block()\n");

    for(l=0;l<4;l++)
    {
        if((tptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, url_tags[l], &tbytes, NULL))!=NULL)
        {
            *rbytes = tbytes;
            return(tptr);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "find_any_url_tag_in_either_enterprise_block(): failed miserably to find ANY URL tags in either enterprise block.\n");
    return(NULL);
}




/* This routine opens the passed URL to the passed dbox target. It returns TRUE if the open is successful,
    FALSE otherwise. */
int ncma_dbox_open_to_target(char *url, char* dbox_target)
{
    urlopen_data payload;
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_open_to_target: Opening %s to target %s\n", url, dbox_target);

    if (!browser_started)
    {
      /* Warning - browser is not currently running, and therefore storing
          this screen to be opened once the browser has started. */
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_open_to_target: Storing this dbox.\n");
      store_url_and_target(url, dbox_target, OPEN_URL_TYPE_DBOX);
      return (false);
    }

    // payload.indirect.url.ptr = url;
    payload.url.offset = sizeof(urlopen_data)+8;
    payload.body_file.ptr = NULL;
    // payload.indirect.target.ptr = dbox_target;
    payload.target.offset = sizeof(urlopen_data);
    payload.tag = 0;
    payload.flags = 0;

    memset(msg_block, 0, 256);

    *(int *)msg_block = 256;
    *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
    memcpy(msg_block + 20, &payload, sizeof(payload));
    strcpy(msg_block + 20 + sizeof(urlopen_data), dbox_target);
    strcpy(msg_block + 28 + sizeof(urlopen_data), url);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_open_to_target: Opening URL %s to target %s\n", msg_block + 28 + sizeof(urlopen_data), msg_block + 20 + sizeof(urlopen_data));

    r.r[0] = 0;
    r.r[1] = (int)msg_block;
    r.r[2] = 0;
    r.r[3] = 0;
    r.r[4] = 0;
    r.r[5] = 0;

//    if(send_message_url((char*)msg_block) != NULL)
    if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL)
    {
      return(true);
    }

    return(false);
}



/* This routine closes the dialogue box corresponding to the target passed into it. */
int ncma_dbox_close_target(char* target)
{
  unsigned char* target_string;
  bool success = false;
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_close_target()\n");

  /* Allocate the memory */
  target_string = rmalloc(strlen("ncint:loadurl?remove=")+strlen(target)+2, "Temporary memory area for ncma_dbox_close_target.");
  if (!target_string)
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_close_target(): Error claiming memory.\n");
    return (false); /* Could not open the dbox */
  }

  /* Copy the strings */
  strcpy((char*)target_string, "ncint:loadurl?remove=");
  strcat((char*)target_string, target);
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_close_target(): Closing target %s\n", target_string);

  /* Close the dbox */
  success = ncma_dbox_open_to_target((char*)target_string, target);

  /* Free the memory */
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dbox_close_target(): Freeing temporary memory at %p\n", target_string);
  rmfree(target_string);

  return(success);
}


/* This routine is used to store the url and target of a screen to be opened.
    If the browser is down when a screen request is given, then this routine
    will cache that screen and the target until such time as the browser is
    restarted.
  It returns TRUE if the store was successful, FALSE otherwise. */
bool store_url_and_target(char* url, char* target, unsigned int url_or_dbox)
{
  unsigned int length;

  DBUG_PRINTF(DBUG_LVL_DIAG, "store_url_and_target()\n");

  /* Firstly check if the structure is filled. */
  if (url_store.url_to_open != NULL)
  {
    /* Structure element already has data in, remove it before refilling. */
    DBUG_PRINTF(DBUG_LVL_DIAG, "store_url_and_target(): url_to_open already stored, so freeing old one.\n");
    rmfree ((unsigned char*)url_store.url_to_open);
    url_store.url_to_open = NULL;
  }
  if (url_store.target != NULL)
  {
    /* Structure element already has data in, remove it before refilling. */
    DBUG_PRINTF(DBUG_LVL_DIAG, "store_url_and_target(): target already stored, so freeing old one.\n");
    rmfree ((unsigned char*)url_store.target);
    url_store.target = NULL;
  }

  /* Now store the new data. */
  /* Store the URL */
  length = strlen(url);
  url_store.url_to_open = (char*)rmalloc(length+1, "Stored URL to open.");
  if (!url_store.url_to_open)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "store_url_and_target(): Error : Could not allocate memory for URL string.\n");
    return (false);
  }
  strcpy(url_store.url_to_open, url);

  /* Store the target */
  length = strlen(target);
  url_store.target = (char*)rmalloc(length+1, "Stored URL target to open.");
  if (!url_store.target)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "store_url_and_target(): Error : Could not allocate memory for target string.\n");
    return (false);
  }
  strcpy(url_store.target, target);

  /* Finally store whether it is a URL or a dialogue box */
  url_store.url_or_dbox = url_or_dbox;

  return (true);
}



/* This routine will be called once the browser has been started to open any
    cached screen which NCMA might have attempted to open. It returns TRUE if
    a screen was opened, FALSE otherwise. */
bool open_stored_screen(void)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "open_stored_screen()\n");

  if (url_store.url_to_open != NULL &&
      url_store.target      != NULL)
  {
    /* The structure contains data. Try opening it. */
    if (url_store.url_or_dbox == OPEN_URL_TYPE_DBOX)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "open_stored_screen(): Attempting to open %s as a dbox to target %s\n", url_store.url_to_open, url_store.target);
      ncma_dbox_open_to_target(url_store.url_to_open, url_store.target);
      rmfree ((unsigned char*)url_store.url_to_open); url_store.url_to_open = NULL;
      rmfree ((unsigned char*)url_store.target ); url_store.target = NULL;
    }
    if (url_store.url_or_dbox == OPEN_URL_TYPE_SCREEN)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "open_stored_screen(): Attempting to open %s as a screen to target %s\n", url_store.url_to_open, url_store.target);
      ncma_url_open(url_store.url_to_open);
      rmfree ((unsigned char*)url_store.url_to_open); url_store.url_to_open = NULL;
      rmfree ((unsigned char*)url_store.target ); url_store.target = NULL;
    }

    return (true); /* A screen/dbox was opened. */
  }

  return (false);
}



/* This routine removes any data (if any) that is held in the screen cache. */
void flush_stored_screens(void)
{
  /* Firstly check if the structure is filled. */
  if (url_store.url_to_open != NULL)
  {
    /* Structure element already has data in, remove it before refilling. */
    rmfree ((unsigned char*)url_store.url_to_open);
    url_store.url_to_open = NULL;
  }
  if (url_store.target != NULL)
  {
    /* Structure element already has data in, remove it before refilling. */
    rmfree ((unsigned char*)url_store.target );
    url_store.target = NULL;
  }
  url_store.url_or_dbox = OPEN_URL_TYPE_NONE;
}



/* This routine searches through the initial string for occurences of the
expression, and replaces it with the replacement string. It returns a pointer
to the new string. It is u[ to the client of this call to free the memory
claimed for the original string.
   We need to ensure that the replacement can be a NULL string, which
essentially means removing the expression from the initial string.
   If the expression does not occur within the substring, NULL is returned.
   If either initial or expression are NULL, the program returns NULL. If any
other error occurs, then NULL is also returned. */

static char* substring_replacement(char* initial, const char* const expression, const char* const replacement)
{
  char* start = strstr(initial, expression);
  char* end = start+strlen(expression);
  char* new_string = NULL;
  unsigned int final_string_length;

  if (start == NULL) /* The expression was not found */
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): Expressions %s not found.\n", expression);
    return (initial);
  }

  DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): replacement is >>>%s<<<\n", replacement);

  /* Allocate an area of memory for the new string */
  final_string_length=strlen(initial)-strlen(expression)+strlen(replacement);
  DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): new length is %d (old are %d %d %d)\n", final_string_length, strlen(initial), strlen(expression), strlen(replacement));
  new_string = (char*) rmalloc(final_string_length+1, "Temporary substring replacement");
  if (new_string == NULL)
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): Error allocating %d bytes of memory.\n", final_string_length);
    return (initial);
  }

  /* Now copy the initial part of the string over. */
  strncpy (new_string, initial, (int)(start-initial)); /* Warning: relies on pointer arithmetic */
  DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): new_string is now %s.\n", new_string);

  /* Now copy the subsituted part of the string */
  strcpy (new_string+(start-initial), replacement);
  DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): new_string is now %s.\n", new_string);

  /* Copy the rest of the string over */
  strcpy (new_string+(start-initial)+strlen(replacement), end);

  DBUG_PRINTF(DBUG_LVL_DIAG, "substring_replacement(): New string is %s\n", new_string);

  /* As this was successful, free the initial string and return the new one. */
  rmfree ((unsigned char*)initial);
  return (new_string);
}



