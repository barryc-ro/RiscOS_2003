#include <stdio.h>

#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "dynalloc.h"
#include "DBUG.h"
#include "kprintf.h"

/*
   Dynamic Area based memory management routines for newer RISCI
*/

void init_dma(void)
{
  int loop;
  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    rmalloc_data[loop].area_number = -1;
    rmalloc_data[loop].area_start = NULL;
  }

  num_mallox = 0;
  return;
}

unsigned char *get_dma(int bytes, char *descrip)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;
  int loop;


  if (num_mallox >= MAX_RMA_MALLOX) goto no_free_dma;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++)
    if(rmalloc_data[loop].area_number == -1) {

      r.r[0] = 0;
      r.r[1] = -1;
      r.r[2] = bytes;
      r.r[3] = -1;
      r.r[4] = 128; /* not draggable */
      r.r[5] = bytes; /* 1 Meg */
      r.r[6] = 0;
      r.r[7] = 0;
      r.r[8] = (int) descrip;

      if ((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL) goto bad_dmalloc;

     rmalloc_data[num_mallox].area_number = r.r[1];
     rmalloc_data[num_mallox].area_start = (unsigned char *) r.r[3];
     num_mallox++;
     return (unsigned char *)(r.r[3]);
   }

bad_dmalloc:
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_dma: OS_DynamicArea claim failed: \n");
no_free_dma:
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_dma: Cannot claim any more memory.\n");

    return ((void *)NULL);
}

void free_dma(unsigned char *ptr)
{
  int loop;
  _kernel_swi_regs r;
  _kernel_oserror *e;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    if ((rmalloc_data[loop].area_start == ptr) && (rmalloc_data[loop].area_number != -1)) {
      r.r[0] = 1;
      r.r[1] = rmalloc_data[loop].area_number;

      if((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "free_dma: dynamic area release failed.\n");
	  return;
       }

       rmalloc_data[loop].area_number = -1;
       rmalloc_data[loop].area_start = NULL;
       num_mallox--;

       return;
    }
  }
  return;
}

void free_all_dma(void)
{
  int loop;
  _kernel_swi_regs r;

  if(num_mallox==0) return;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    r.r[0] = 1;
    if(rmalloc_data[loop].area_number != -1) {
      r.r[1] = rmalloc_data[loop].area_number;
      _kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r);
      rmalloc_data[loop].area_number = -1;
      rmalloc_data[loop].area_start = NULL;
    }
  }
  num_mallox = 0;
  return;
}

/*
   RMA based memory management routines for older RISCI
*/

void init_rma(void)
{
  init_dma();
}

unsigned char *get_rma(int size)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;
  int loop;

  if (num_mallox >= MAX_RMA_MALLOX) goto no_free_rma;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++)
    if(rmalloc_data[loop].area_number == -1) {

      r.r[0] = 6; /* claim */
      r.r[3] = size;
      if((e=_kernel_swi(XOS_Bit | OS_Module, &r, &r))!=NULL) goto bad_rmalloc;


      rmalloc_data[num_mallox].area_number = 1;
      rmalloc_data[num_mallox].area_start = (unsigned char *)(r.r[2]);
      num_mallox++;

      return((unsigned char *)(r.r[2])); /* return base address */
    }
bad_rmalloc:
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_rma: OS_Module claim failed.\n");
no_free_rma:
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_rma: Cannot claim any more memory.\n");

    return((unsigned char *)NULL);
}


void free_rma(unsigned char *ptr)
{
  int loop;
  _kernel_swi_regs r;
  _kernel_oserror *e;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    if ((rmalloc_data[loop].area_start == ptr) && (rmalloc_data[loop].area_number != -1)) {

      r.r[0] = 7; /* free RMA */
      r.r[2] = (int)ptr;
      if((e=_kernel_swi(OS_Module, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "free_rma: RMA release failed.\n");
        return;
      }

       rmalloc_data[loop].area_number = -1;
       rmalloc_data[loop].area_start = NULL;
       num_mallox--;
    }
  }
  return;
}

void free_all_rma(void)
{
  int loop;
  _kernel_swi_regs r;

  if(num_mallox==0) return;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    if(rmalloc_data[loop].area_number != -1) {
      r.r[0] = 7;
      r.r[2] = (int)(rmalloc_data[loop].area_start);
      _kernel_swi(XOS_Bit | OS_Module, &r, &r);
      rmalloc_data[loop].area_number = -1;
      rmalloc_data[loop].area_start = NULL;
    }
  }
  num_mallox = 0;
  return;
}

void rminit(void)
{
  int variant;

  variant = _kernel_osbyte(129, 0, 0xff) & 0xff;
  if(variant < 0xa5) use_dynamic_areas = 0;
  else use_dynamic_areas = 1;

  init_dma();
  return;
}

/*
   Interface to generic memory management system
*/

unsigned char *rmalloc(int s, char *n)
{
  if(use_dynamic_areas) return(get_dma(s, n));
  return(get_rma(s));
}

void rmfree(unsigned char *s)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "rmfree: freeing area at 0x%x\n", s);
  if(use_dynamic_areas) free_dma(s);
  else free_rma(s);
  return;
}

void rmfree_all(void)
{
  if(use_dynamic_areas) free_all_dma();
  else free_all_rma();
  return;
}

void rmstat(void)
{
    int loop;

    kprintf("Memory manager stats:\n\n");

    for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
        if(rmalloc_data[loop].area_number != -1)
           kprintf("Area: %d  Start: 0x%x\n", rmalloc_data[loop].area_number, rmalloc_data[loop].area_start);
    }

    kprintf("\n\n");
    return;
}


