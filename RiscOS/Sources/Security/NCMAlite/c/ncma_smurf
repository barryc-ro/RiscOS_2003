/* Code to handle Smurfs for managed access.
   Plenty of scope for gags in here!
*/

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_smurf.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "ncma_bootb.h"
#include "smtags.h"
#include "ncma_tags.h"

#include "DBUG.h"


#define MAX_STRING_LENGTH 255 /* All CSFS bootblock tags must be shorter than this length. */


#ifdef ALLOW_CSFS_BOOTING /* The entire file is preprocessed out for non-CSFS enabled builds. */

bool ncma_mount_smurfs(void)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_smurfs()\n");

  ro_smurf_mounted = (ncma_mount_ro_smurfs()>0);
  rw_smurf_mounted = (ncma_mount_rw_smurfs()>0);
  if(ro_smurf_mounted)
  {
    return (true);
  }
  return(false);
}



bool ncma_mount_ro_smurfs(void) /* mount some read-only smurfs */
{
  char server[MAX_STRING_LENGTH], path[MAX_STRING_LENGTH], type[MAX_STRING_LENGTH], user[MAX_STRING_LENGTH], pass[MAX_STRING_LENGTH];
  bool success=false;

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_ro_smurfs()\n");

  ncma_hourglass_on();

  if((cache_enquiry("CSFS_SERVERRO", server, MAX_STRING_LENGTH))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_SERVERRO defined\n");
  }

  if((cache_enquiry("CSFS_PATHRO", path,MAX_STRING_LENGTH))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_PATHRO defined\n");
  }

  if((cache_enquiry("CSFS_TYPERO", type,MAX_STRING_LENGTH))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_TYPERO defined\n");
  }

  if((cache_enquiry("CSFS_USERRO", user,MAX_STRING_LENGTH))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_USERRO defined\n");
  }

  if((cache_enquiry("CSFS_PASSWDRO", pass,MAX_STRING_LENGTH))<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_PASSWDRO defined\n");
  }

  if(ncma_mount_smurf(type, server, path, SMURF_RO_MOUNT, user, pass)<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: primary SMURF mount failed\n");
    success = false;
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_ro_smurfs: primary SMURF ok\n");
    success = true;
  }

  ncma_hourglass_off();

  return(success);
}


/* Macro-tastic!
   This macro checks if the user (read-write) server details can be retrieved
    from the bootblock, and if it cannot retrieve them ir retursn the boot
    (read-only) server details. If neither of these details can be got from
    the bootblock, it returns false.
*/
#define MULTI_MOUNT(mmptr,mmtag,mmbackup)    \
       if((cache_enquiry(mmtag, mmptr, MAX_STRING_LENGTH))<0) \
       { \
         DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs(): no %s, trying %s\n", mmtag, mmbackup); \
         if((cache_enquiry(#mmbackup, #mmptr, MAX_STRING_LENGTH))<0) \
         { \
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs(): no %s either - aborting\n", mmbackup); \
           return(false); \
         } \
       } \
       DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs(): Value of Tag %s is %s\n", #mmtag, mmptr);




bool ncma_mount_rw_smurfs(void) /* mount read-write smurfs */
{
  char server[MAX_STRING_LENGTH], path[MAX_STRING_LENGTH], type[MAX_STRING_LENGTH], user[MAX_STRING_LENGTH], pass[MAX_STRING_LENGTH];

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs()\n");

  MULTI_MOUNT(server, "CSFS_SERVERRW", "CSFS_SERVERRO")
  MULTI_MOUNT(path, "CSFS_PATHRW", "CSFS_PATHRO")
  MULTI_MOUNT(type, "CSFS_TYPERW", "CSFS_TYPERO")
  MULTI_MOUNT(user, "CSFS_USERRW", "CSFS_USERRO")
  MULTI_MOUNT(pass, "CSFS_PASSWDRW", "CSFS_PASSWDRO")

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs: user SMURF is %s %s %s %s %s\n", server, path, type, user, pass);

  if(ncma_mount_smurf(type, server, path, SMURF_RW_MOUNT, user, pass)<0)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: user SMURF mount failed\n");
    return(false);
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs: user SMURF ok\n");
  }
  return(true);
}



bool ncma_mount_smurf(const char* const svc, const char* const ip, const char* const path, const char* const mount, const char* const user, const char* const password)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_smurf()\n");

  if(!(svc && ip && path && mount))
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "mount_smurf: insufficient mount details - skipping\n");
    return(false);
  }

  if(!(user && password))
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "mount_smurf: insufficient user/passwd info- trying anyway\n");
  }

  DBUG_PRINTF(DBUG_LVL_DIAG, "mount_smurf: %s mount on %s:%s as %s (user: %s pass: %s)\n", svc, ip, path, mount, user, password);
#ifdef WRITE_THRU_SMURFS
  r.r[0] = 0x0; /* write thru, IP address is textual */
#else
  r.r[0] = 0x1; /* write cache, IP address is textual */
#endif
  r.r[1] = (int)svc;
  r.r[2] = (int)ip;
  r.r[3] = (int)path;
  r.r[4] = (int)mount;
  r.r[5] = (int)user;
  r.r[6] = (int)password;

  if((e=_kernel_swi(CSFS_Mount, &r, &r))!=NULL)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "mount_smurf: CSFS_Mount SWI for \"%s\" failed: %d \"%s\"\n", mount, e->errnum, e->errmess);
    return(false);
  }

  return(true);
}


int ncma_dismount_smurfs(void)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurfs()\n");

  ro_smurf_mounted = (ncma_dismount_ro_smurfs()>0)?0:1;

  rw_smurf_mounted = (ncma_dismount_rw_smurfs()>0)?0:1;

  return(0);
}



int ncma_dismount_ro_smurfs(void)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_ro_smurfs()\n");
  return(ncma_dismount_smurf(SMURF_RO_MOUNT));
}



int ncma_dismount_rw_smurfs(void)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_rw_smurfs()\n");
  return(ncma_dismount_smurf(SMURF_RW_MOUNT));
}


int ncma_dismount_smurf(const char* const path)
{
  _kernel_swi_regs r;

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurf(): path is %s\n", path);

  r.r[0] = 0;
  r.r[1] = (int)path;

  if(_kernel_swi(CSFS_Dismount, &r, &r)!=NULL) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurf: failed for \"%s\"\n", path);
      return(-1);
  }
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurf: dismounted %s\n", path);
  return(1);
}

#endif /* ALLOW_CSFS_BOOTING */






