#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "ncma_utils.h"
#include "ncma_scard.h"
#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_net.h"
#include "smtags.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_url.h"

#include "smcard.h"

#include "DBUG.h"

int ip_ntos(char *b, char *i)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "ip_ntos: word 0x%x\n", *(int *)i);
    sprintf(b, "%d.%d.%d.%d",
      (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3));
    return(0);
}

/* mode is 0 for dial from ROM. 1 for dial from RAM */
int ncma_network_init(int mode) /* set resolver config */
    			    /* set browser proxy */
    			    /* limit browser access */
    			    /* remount SMURFS */
{
    char buff[128];
    int dns[2] = {0,0}; /* Initialise the 2 integers to 0 */
    char *p;
    int l;
    _kernel_swi_regs r;

    unsigned char *tptr;
    unsigned int tbytes;
    unsigned int browser_mode;
    int domain;
    int email;
    int search_url;
    int help_url;
    int email_url;

#ifdef USE_NETINIT
       ncma_netinit_starting();
#else

    /* Set the Search_url system var according to the data held on the smartcard */
    memset(buff, 0, 128);
    strcpy(buff, "-url ");
    if((search_url=cache_enquiry("SEARCH_URL", buff+5, 128-5))<0) /* '5' is length of "-url " */
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for SEARCH_URL\n");
    }
    if(search_url>0)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting search url to \"%s\"\n", buff);
      if(write_os_var(SEARCH_SAV_VAR_NAME, buff, strlen(buff))<0)
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting search url\n");
      }
    }
    else
    {
      /* delete variable if nothing was set on the card */
        write_os_var(SEARCH_SAV_VAR_NAME, NULL, -1);
    }



    /* Set the email_url system var according to the data held on the smartcard */
    memset(buff, 0, 128);
    if((email_url=cache_enquiry("EMAIL_URL", buff, 128))<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for EMAIL_URL\n");
    }
    if(email_url>0)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting email url to \"%s\"\n", buff);
      if(write_os_var(EMAIL_SAV_VAR_NAME, buff, strlen(buff))<0)
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting email url\n");
      }
    }
    else
    {
      /* delete variable if nothing was set on the card */
        write_os_var(EMAIL_SAV_VAR_NAME, NULL, -1);
    }



    /* Set the help_url system var according to the data held on the smartcard */
    memset(buff, 0, 128);
    if((help_url=cache_enquiry("HELP_URL", buff, 128))<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for HELP_URL\n");
    }
    if(search_url>0)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting help url to \"%s\"\n", buff);
      if(write_os_var(HELP_SAV_VAR_NAME, buff, strlen(buff))<0)
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting help url\n");
      }
    }
    else
    {
      /* delete variable if nothing was set on the card */
        write_os_var(HELP_SAV_VAR_NAME, NULL, -1);
    }




    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: got flags NCMA_NET_%s NCMA_NET_%s_DIAL\n",
    				(mode & NCMA_NET_ROM)?"ROM":"RAM",
    				(mode & NCMA_NET_POST_DIAL)?"POST":"PRE");

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: dns[0] = %d  dns[1] = %d\n", dns[0], dns[1]);

    if(cache_enquiry("DNS_PRIMARY", (char *)&dns[0], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_PRIMARY\n");
        return(-1);
    }

    if(cache_enquiry("DNS_BACKUP", (char *)&dns[1], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_BACKUP\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: dns[0] = %d  dns[1] = %d\n", dns[0], dns[1]);

    ip_ntos(buff, (char *)&dns[0]);
    p = buff;
    if (dns[1] != 0) /* There is a backup DNS */
    {
      l = strlen(p);
      p += l;
      *p++ = 0x20;
      ip_ntos(p, (char *)&dns[1]);
    }
    else
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: Not adding a backup DNS to resolvers string as one is not present on the smartcard.\n");
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting resolvers to %s\n", buff);

    if(write_os_var(RESOLVER_ENV_VAR_NAME, buff, strlen(buff))<0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: failed setting resolvers\n");
        return(-1);
    }

    memset(buff, 0, 128);
    if((domain=cache_enquiry("ISP_DOMAIN", buff, 128))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for ISP_DOMAIN\n");
        return(-1);
    }
    if(domain>0) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting domain to \"%s\"\n", buff);

      if(write_os_var(DOMAIN_ENV_VAR_NAME, buff, strlen(buff))<0) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting domain\n");
          return(-1);
      }
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: no domain name specified, using %s\n", DEFAULT_DOMAIN_NAME);
          if(write_os_var(DOMAIN_ENV_VAR_NAME, DEFAULT_DOMAIN_NAME, strlen(DEFAULT_DOMAIN_NAME))<0) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting domain\n");
            return(-1);
          }
    }



    sprintf(buff, "ResolverConfig");
    r.r[0] = (int)buff;
    if(_kernel_swi(0x5, &r, &r)!=NULL)
    { /* OS_Cli */
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: resolver config OSCLI failed\n");
    }

#endif

    /* configure browser email osvar */
    memset(buff, 0, 128);
    if((email=cache_enquiry("MAIL_RX_HOST", buff, 128))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for MAIL_RX_HOST\n");
        return(-1);
    }

    if(email>0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: Browser email set to \"%s\"\n", buff);
        if(write_os_var(EMAIL_SAV_VAR_NAME, buff, strlen(buff))<0) {
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting Browser email var\n");
        }
    }

    /* do other browser stuff */

    if(mode & NCMA_NET_RAM) { /* determine from RAM/SC details whether browser limiting applies */
      if((tptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, NCIBrowserModeTag, &tbytes, NULL))==NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_metwork_init: didn't see a BrowserModeTag, so I'm leaving it as it was.\n");
      } else {
        browser_mode = read_big_short((char *)tptr);
        if(browser_mode == NCIBrowserModeLimited) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: restricting browser access\n");
          if(limit_browser_url(mode)<0)
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser limiting failed\n");
        } else if(browser_mode == NCIBrowserModeUnrestricted) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: derestricting browser access\n");
            if(unlimit_browser_url()<0)
              DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser unlimiting failed\n");
        } else {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: eh? browser mode = 0x%x ??\n", browser_mode);
        }
      }
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: configuring browser\n");

    if(browser_proxy()<0)
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser proxy/config failed\n");

    return(0);

}
