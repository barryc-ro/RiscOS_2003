/************************************************************************/
/* File:    ncma_cache.c                                                */
/* Purpose: Handle caching of RISC OS tags converted from NCI tag       */
/*           format in either RAM or on the smartcard                   */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com>            */
/*                                                                      */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"
#include "smcard.h"
#include "dynalloc.h"
#include "NVRAM.h"

/* Local includes */
#define PROTOTYPES_INTERNAL
#include "smtags.h"
#include "ncma_utils.h"
#include "ncma_cmds.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "kprintf.h"
#include "DBUG.h"


/*********************************************************************************/
/* unlock_cache                                                                  */
/*                                                                               */
/* This routine marks the tag cache as being unlocked.                           */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void unlock_cache(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "unlock_cache: unlocking tag cache\n");
    tag_cache.valid = 0;
    return;
}





/*********************************************************************************/
/* cache_info                                                                    */
/*                                                                               */
/* This routine displays information on the tags held in the cache.              */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    int : Always 0, for some reason.                                  */
/*                                                                               */
/*********************************************************************************/
int cache_info(void)
{
    int l,m;

    kprintf("Tag cache stats:\n\n");

    kprintf("\nTag cache base: 0x%x  Bytes used: %d/%d  Tags in cache: %d\n",
    			       tag_cache.base, tag_cache.bytes, tag_cache.max, tag_cache.tags);

    kprintf("Tag cache %s ready\n\n", tag_cache.valid?"":"not");

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(tag_cache.tag[l].tag == NULL) break; /* no more tags */
        kprintf("%s (%d) %s",
        			   tag_cache.tag[l].tag,
        			   tag_cache.tag[l].bytes,
        			   tag_cache.tag[l].bytes==0?"MISS":"HIT");

     if(tag_cache.tag[l].bytes != 0) {
        switch(tag_cache.tag[l].mapping) {
            case TAG_MAPPING_STRING:
            case TAG_MAPPING_HOST:
            case TAG_MAPPING_PROXY:
            	 kprintf(" %s\n", (char *)(tag_cache.tag[l].val));
            	 break;

            case TAG_MAPPING_INT:
            case TAG_MAPPING_IP:
            	 kprintf(" 0x%x\n", read_big_word((char *)(tag_cache.tag[l].val)));
            	 break;

            case TAG_MAPPING_SOAK:
            case TAG_MAPPING_PLIP:
            	 m = read_little_word((char *)(tag_cache.tag[l].val));
            	 kprintf(" %s\n", m?"ENABLED":"DISABLED");
            	 break;

            default: kprintf(" ???\n");
            	     break;
        }
     } else {
         kprintf("\n");
     }
    }

    return(0);
}




/*********************************************************************************/
/* get_nvram_tag_string                                                          */
/*                                                                               */
/* This routine returns the string held in the NVRAM tag passed in.              */
/*                                                                               */
/* Parameters: char* tag. The tag we wish to acquire a string from.              */
/*                                                                               */
/* Returns:    Null if the required tag was not found, otherwise the string      */
/*              value held in the tag (which could be NULL itself).              */
/*                                                                               */
/*********************************************************************************/
static char* get_nvram_tag_string(char* tag)
{
  _kernel_oserror *er = NULL;
  unsigned int tag_size = 0;
  unsigned char* tag_contents = NULL;

  DBUG_PRINTF(DBUG_LVL_DIAG, "get_nvram_tag_string()\n");

  er = _swix(NVRAM_Read, _INR(0,1)|_OUT(0), tag, 0, &tag_size);
  if (tag_size > 0)
  {
      DBUG_PRINTF(DBUG_LVL_DIAG, "get_nvram_tag_string() : Tag size is %d\n", tag_size);
      tag_contents = rmalloc(tag_size, "tag contents.");
      if (tag_contents)
      {
        er = _swix(NVRAM_Read, _INR(0,2), tag, (char*)tag_contents, tag_size);
        DBUG_PRINTF(DBUG_LVL_DIAG, "get_nvram_tag_string() : Tag contents are '%s' (length %d)\n", (char*)tag_contents, strlen((char*)tag_contents));
        return ((char*)tag_contents);
      }
  }

  return (NULL);
}





/*********************************************************************************/
/* cache_enquiry                                                                 */
/*                                                                               */
/* This routine returns details of the tag passed in. If buff is NULL, then it   */
/*  only returns the length of the tag, otherwise it copies the tag into the     */
/*  buffer.                                                                      */
/*                                                                               */
/* Parameters: char *tag    The tag to be searched for.                          */
/*             char *buff   The buffer for the tag contents to be placed in.     */
/*             int bytes    The size of the buffer.                              */
/*                                                                               */
/* Returns:    int : -1 if the tag was not found, othweise length of the tag.    */
/*                                                                               */
/*********************************************************************************/
int cache_enquiry(char *tag, char *buff, int bytes)
{
    int l;

    if(!tag_cache.valid)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "Returning -1 as cache is not valid.\n");
      return(-1);
    }

    /* Ensure that if use_hidden_phone_number is set, it obtains the phone mumber
        from the NVRAM location, and not from the bootblock. This allows us to
        support two phone numers, one from the bootblock for normal use and
        another, 'hidden' one, which can be used during production test to dial
        up to a test box. */
    if (use_hidden_phone_number && (strcmp(tag,"PSTN_NUM") == 0))
    {
      /* Obtain the phone number string from the NVRAM tag. */
      char* phone_number = get_nvram_tag_string("NCMAHiddenPhoneNumber");
      if (!phone_number) /* There was an error obtaining the alternate number */
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "NVRAM tag 'NCMAHiddenPhoneNumber' empty or does not exist.\n");
        return (-1);
      }
      else
      {
        unsigned int phone_number_length = strlen(phone_number);
        DBUG_PRINTF(DBUG_LVL_DIAG, "NVRAM tag 'NCMAHiddenPhoneNumber' has value of %s (length %d)\n", phone_number, phone_number_length);
        if (buff != NULL)
        {
          strcpy (buff, phone_number);
          use_hidden_phone_number = false;
        }
        else
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "cache_enquiry: Since buffer passed in is NULL, not copying tag over and just returning the tag size (%d) (tag is %s).\n", phone_number_length, phone_number);
        }
        rmfree ((unsigned char*)phone_number);
        phone_number = NULL;
        return (phone_number_length);
      }
    }

    for(l=0; l<MAX_TAG_CACHE; l++)
    {
      if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0)
      {
        if(tag_cache.tag[l].bytes != 0)
        {
          if (buff != NULL) /* If buff is NULL must not copy into it! */
          {
            memcpy(buff, tag_cache.tag[l].val, tag_cache.tag[l].bytes>bytes?bytes:tag_cache.tag[l].bytes);
            DBUG_PRINTF(DBUG_LVL_DIAG, "cache_enquiry: serviced enquiry %s with %d bytes (tag is %s)\n", tag, tag_cache.tag[l].bytes, tag_cache.tag[l].val);
          }
          else
          {
            DBUG_PRINTF(DBUG_LVL_DIAG, "cache_enquiry: Since buffer passed in is NULL, not copying tag over and just returning the tag size (%d) (tag is %s).\n", tag_cache.tag[l].bytes, tag_cache.tag[l].val);
          }
        }
        else
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "cache_enquiry: tag %s valid but contains no data\n", tag);
        }
        return(tag_cache.tag[l].bytes);
      }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_enquiry: no such tag \"%s\"\n", tag);
    return(-1);
}




/*********************************************************************************/
/* cache_ptr                                                                     */
/*                                                                               */
/* This routine return ptr to tag value, & return size in ref. variable          */
/*                                                                               */
/* Parameters: char *tag. The tag we wish to acquire a string from.              */
/*             int  *bytes. The number of bytes held in the tag.                 */
/*                                                                               */
/* Returns:    Null if the required tag was not found, otherwise the string      */
/*              value held in the tag.                                           */
/*                                                                               */
/*********************************************************************************/
char *cache_ptr(char *tag, int *bytes)
{
    int l;

    if(!tag_cache.valid) return(NULL);

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0) {
	    if(bytes != NULL) *bytes = tag_cache.tag[l].bytes;
            return(tag_cache.tag[l].val);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_ptr: no such tag \"%s\"\n", tag);
    return(NULL);
}





/*********************************************************************************/
/* build_ram_cache                                                               */
/*                                                                               */
/* This routine builds a cache of all tags that it can find in a bootblock.      */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    -1 if there was an error (eg. no bootblock), otherwise the        */
/*              number of tags in the cache.                                     */
/*                                                                               */
/*********************************************************************************/
int build_ram_cache(void)
{
    int l;
    char *ptr;
    int bytes;
    int tag_bytes;
    int actual_tags;

    unsigned char *tptr;
    unsigned int tbytes;

    unsigned int test_mode;


    /* reset cache */
    if(reset_cache()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: cache reset failed\n");
        return(-1);
    }

    bytes = tag_cache.max;
    ptr = tag_cache.base;
    actual_tags = 0;

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: entered\n");

    if(select_scard_iap()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: no IAP block on smartcard\n");
        sc_iap_ptr = NULL;
        sc_iap_bytes = 0;
        return(-1);
    }

    for(l=0; ((l<MAX_TAG_CACHE) && (bytes>0));l++) {

        if(tag_cache.tag[l].tag == NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: end of tag list\n");
            break;
        }

	DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: searching for \"%s\" (0x%x)", tag_cache.tag[l].tag, tag_cache.tag[l].nci_tag);

	tptr = NULL;

	if((tptr == NULL)) { /* not in RAM, try SC IAP block */
	  if((tptr=find_tag_in_block(sc_iap_ptr, sc_iap_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL) { /* not in SC IAP */
	  } else {
	      DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (SC-IAP)\n");
	  }
	} /* endif SC IAP */

	if((tptr == NULL)) { /* not in SC IAP block, try SC as a whole */
	  if((tptr=find_tag_in_block(sc_eb_ptr, sc_eb_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL) { /* not in SC IAP */
	  } else {
	      DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (SC)\n");
	  }
	} /* endif SC */


	if(tptr == NULL) { /* run out of options */
	    DBUG_PRINTF(DBUG_LVL_DIAG, "MISS\n");
	    continue;
	}


        /* found it somewhere */
        tag_bytes = (tbytes<bytes)?tbytes:bytes;
        DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: mapping is %d, tag bytes: %d\n", tag_cache.tag[l].mapping, tag_bytes);
        switch(tag_cache.tag[l].mapping) {

            case TAG_MAPPING_STRING:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_INT:
            	 if(bytes>=tbytes) {
            	     memcpy(ptr, tptr, tbytes);
            	     tag_cache.tag[l].val = ptr;
            	     tag_cache.tag[l].bytes = tbytes;
            	     ptr += tbytes;
            	     bytes -= tbytes;
            	     actual_tags++;
            	 }
            	 break;

            case TAG_MAPPING_HOST:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_IP:
            	 if(bytes>=tbytes) {
            	     memcpy(ptr, tptr, tbytes);
            	     tag_cache.tag[l].val = ptr;
            	     tag_cache.tag[l].bytes = tbytes;
            	     ptr += tbytes;
            	     bytes -= tbytes;
            	     actual_tags++;
            	 }
            	 break;

            case TAG_MAPPING_PROXY:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_SOAK:
            	 test_mode = read_big_word((char *)tptr);
            	 if(test_mode & TEST_TAG_SOAK) {
            	     if(bytes>=4) {
            	         write_little_word(ptr, 1);
            	         tag_cache.tag[l].val = ptr;
            	         tag_cache.tag[l].bytes = tbytes;
            	         ptr += tbytes;
            	         bytes -= tbytes;
            	         actual_tags++;
            	         DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: SOAK TEST ENABLED\n");
            	     }
            	 }
            	     break;

            case TAG_MAPPING_PLIP:
            	 test_mode = read_big_word((char *)tptr);
            	 if(test_mode & TEST_TAG_PLIP) {
            	     if(bytes>=4) {
            	         write_little_word(ptr, 1);
            	         tag_cache.tag[l].val = ptr;
            	         tag_cache.tag[l].bytes = tbytes;
            	         ptr += tbytes;
            	         bytes -= tbytes;
            	         actual_tags++;
            	         DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: PLIP DOWNLOAD ENABLED\n");
            	     }
            	 }
            	     break;

        } /* endswitch tag mappings */
    } /* end forall tags */

    tag_cache.tags = actual_tags;
    tag_cache.bytes = TAG_CACHE_SIZE - bytes;
    tag_cache.free = ptr;
    tag_cache.valid = 1;

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: bytes                          : %d\n", bytes);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: Tag cache number of tags       : %d\n", tag_cache.tags);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: Tag cache number of bytes      : %d\n", tag_cache.bytes);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: Tag cache base                 : %p\n", tag_cache.base);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: Tag cache next free area       : %p\n", tag_cache.free);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: Tag cache size                 : %d\n", TAG_CACHE_SIZE);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: sc_block_bytes                 : %d\n", sc_block_bytes);
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: sc_block_ptr                   : %p\n", sc_block_ptr);

    return(l);
}




#if 0 /* Code not currently used */
/*********************************************************************************/
/* cache_write                                                                   */
/*                                                                               */
/* This routine writes a tag into the cache.                                     */
/*                                                                               */
/* Parameters: char *tag. The tag we wish to write the string into.              */
/*             char *buff. The buffer that holds the string to be written.       */
/*             int bytes. The length of the string in the buffer.                */
/*                                                                               */
/* Returns:    -1 if the operation was unsuccessful, otherwise 1.                */
/*                                                                               */
/*********************************************************************************/
int cache_write(char *tag, char *buff, int bytes)
{
    int l;

    if(bytes > (tag_cache.max - tag_cache.bytes)) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "cache_write: no room in tag cache to write data\n");
        return(-1);
    }

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0) {
            memcpy(tag_cache.free, buff, bytes);

            switch(tag_cache.tag[l].mapping) {
                case TAG_MAPPING_STRING:
                case TAG_MAPPING_HOST:
                case TAG_MAPPING_PROXY:
                     *(tag_cache.free + bytes) = 0;
                     bytes++;
                     break;
            }

            tag_cache.tag[l].val = tag_cache.free;
            tag_cache.tag[l].bytes = bytes;
            tag_cache.bytes += bytes;
            tag_cache.free += bytes;
            tag_cache.tags += 1;
            DBUG_PRINTF(DBUG_LVL_DIAG, "cache_write: wrote tag \"%s\"\n", tag);
            return(1);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_write: no such tag \"%s\"\n", tag);
    return(-1);
}
#endif /* 0 */



/*********************************************************************************/
/* reset_cache                                                                   */
/*                                                                               */
/* This routine resets the cache.                                                */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    int. Always 0.                                                    */
/*                                                                               */
/*********************************************************************************/
int reset_cache(void)
{
    int l;

    DBUG_PRINTF(DBUG_LVL_DIAG, "reset_cache()\n");

    if(tag_cache.base == NULL) {
        if((tag_cache.base = (char *)rmalloc(TAG_CACHE_SIZE, "NCMA tag cache"))==NULL) return(-1);
    }

    tag_cache.free = tag_cache.base;
    tag_cache.max = TAG_CACHE_SIZE;
    tag_cache.bytes = 0;
    tag_cache.tags = 0;
    tag_cache.valid = 0;

    /* bin any old contents... */
    for(l=0; l<MAX_TAG_CACHE; l++) {
        tag_cache.tag[l].val = NULL;
        tag_cache.tag[l].bytes = 0;
    }

    memset(tag_cache.base, 0, TAG_CACHE_SIZE);

    return(0);
}


