#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_cmds.h"
#include "ncma_ncma.h"
#include "ncma_utils.h"
#include "ncma_url.h"
#include "ncma_scard.h"
#include "ncma_cache.h"
#include "ncma_dial.h"
#include "machine.h"
#include "vectors.h"
#include "kprintf.h"
#include "dynalloc.h"
#include "usermode.h"
#include "DBUG.h"

#define MUNGE2b(a,b) a###b
#define MUNGE3b(a,b,c) a###b##c
#define MUNGE2(a,b) MUNGE2b(a,b)
#define MUNGE3(a,b,c) MUNGE3b(a,b,c)



int cmd_ncma_nullcmd(char *s, int n)
{
  return(0);
}

int cmd_ncma_status(char *s, int n)
{
    DIAL_INFO d;

    kprintf("cmd_ncma_status: last state: %s   last trans: %s\n",
    			       	state_string(ncma_state), trans_string(ncma_trans));

    kprintf("cmd_ncma_status: registry state: 0x%x registry delta: 0x%x\n",
    			       	registry_status, registry_delta);

    kprintf("cmd_ncma_status: NCMA started: %s\n", ncma_started?"Yes":"No");

    kprintf("cmd_ncma_status: prevent shutdown: %s\n", prevent_shutdown?"Yes":"No");

    if(ncma_ppp_info(&d)<0) {
        kprintf("cmd_ncma_status: PPP info not available\n");
    } else {
        kprintf("cmd_ncma_status: PPP default timeout: %d  current: timeout: %d\n",
        			  d.default_timeout, d.current_timeout);
        kprintf("cmd_ncma_status: PPP line is %s, phase: %s\n", d.line_status?"UP":"DOWN",
        			  ncma_ppp_phase_string(d.connection_phase));
    }
    return(0);
}

int cmd_ncma_http_status(void)
{
    FILE *f;
    DIAL_INFO d;
    char utctime[8];
    char lcltime[256];

    _kernel_swi_regs r;

    *(int *)utctime = 3; /* reason code 3, read RTC */
    r.r[0] = 14;
    r.r[1] = (int)utctime;
    _kernel_swi(OS_Word, &r, &r);

    r.r[0] = -1;
    r.r[1] = (int)utctime;
    r.r[2] = (int)lcltime;
    r.r[3] = 256;
    _kernel_swi(Territory_ConvertStandardDateAndTime, &r, &r);

    if((f = fopen("cache:$.NCMA.status/html", "w"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ncma_http_status: couldn't open status file\n");
        return(0);
    }

    fprintf(f, "<html><head><title>Managed Access Status Page</title></head><body>\n");
    fprintf(f, "<p><center><h1>Managed Access Status Page</h1></center></p>\n");
    fprintf(f, "<p><table><tr><th><b>Thing</b></th><th><b>Status</b></th></tr>\n");
    fprintf(f, "<tr><td><b>Last State:</b></td><td>%s</td></tr>\n", state_string(ncma_state));
    fprintf(f, "<tr><td><b>Last Transition:</b></td><td>%s</td></tr>\n", trans_string(ncma_trans));
    fprintf(f, "<tr><td><b>Registry State:</b></td><td>0x%x</td></tr>\n", registry_status);
    fprintf(f, "<tr><td><b>Registry Delta:</b></td><td>0x%x</td></tr>\n", registry_delta);
    fprintf(f, "<tr><td><b>NCMA started:</b></td><td>%s</td></tr>\n", ncma_started?"Yes":"No");
    fprintf(f, "<tr><td><b>Shutdown trap:</b></td><td>%s</td></tr>\n", prevent_shutdown?"Yes":"No");

    fprintf(f, "<tr><td><b>Local Time:</b></td><td>%s</td></tr>\n", lcltime);






    if(ncma_ppp_info(&d)<0) {
        fprintf(f, "<tr><td><b>PPP Info:</b></td><td>not available</td></tr>\n");
    } else {
        fprintf(f, "<tr><td><b>PPP default timeout:</b></td><td>%d</td></tr>\n", d.default_timeout);
        fprintf(f, "<tr><td><b>PPP current timeout:</b></td><td>%d</td></tr>\n", d.current_timeout);
        fprintf(f, "<tr><td><b>PPP line status:</b></td><td>%s</td></tr>\n", d.line_status?"Up":"Down");
        fprintf(f, "<tr><td><b>PPP phase:</b></td><td>%s</td></tr>\n", ncma_ppp_phase_string(d.connection_phase));
    }



    fprintf(f, "</table></p><p><center><a href=\"ncma:status\">RELOAD</a></center></p></html>\n\n");
    fclose(f);
    ncma_url_open("file:/cache:$/NCMA/status.html");
    return(0);
}




int cmd_ncma_urc(char *q, int n)
{
    int bytes;
    char s[256];

    memset(s, 0, 256);
    memcpy(s, q, 255);
    bytes = strterm(s);

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ncma_urc: got %d args as %d bytes in \"%s\"\n", n, bytes, s);

    if(strstr(s, "status")) { /* do status page */
      ncma_dbox_close();
      cmd_ncma_http_status();
      return(0);
    }

#ifdef SC_SWAPPING
    if(strstr(s, "logoutack")) { /* User acknowledges the logout */
      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: sending transition %d\n", Trans_LogoutAck);
      ncma_trans = Trans_LogoutAck;
      setcallback();
      return(0);
    }

    if(strstr(s, "logoutnak")) { /* User rejects the logout */
      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: sending transition %d\n", Trans_LogoutNak);
      ncma_trans = Trans_LogoutNak;
      setcallback();
      return(0);
    }

    if(strstr(s, "logout")) { /* User has selected the logout option */
      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: sending transition Trans_Logout\n");
      ncma_trans = Trans_Logout;
      setcallback();
      return(0);
    }

    if (strstr(s, "dialui_start")) { /* Browser wishes to start a redial */
      DBUG_PRINTF(DBUG_LVL_DIAG, "NCMA_machine: sending transition Trans_NCMADialUI_Start\n");
      ncma_trans = Trans_NCMADialUI_Start;
      setcallback();
      return(0);
    }
#endif /* SC_SWAPPING */

    if(strstr(s, "start")) { /* it's a start URL */
      ncma_trans = Trans_URLStart;
      setcallback();
      return(0);
    }

    if(strstr(s, "pinack")) { /* It's a PIN request */
      validate_pin(s); /* state transition will be driven by AUTH status calls from the registry / sc layer */
      return(0);
    }

    if(strstr(s, "pinnak")) { /* It's a PIN cancel */
      ncma_trans = Trans_URLPinNAK;
      setcallback();
      return(0);
    }

    if(strstr(s, "alterpin")) { /* user wants to change their PIN */
      ncma_trans = Trans_URLChangePIN;
      setcallback();
      return(0);
    }

    if(strstr(s, "unblock")) { /* It's the system unblock PIN */
      do_unblock_pin(s); /* state transition will be driven by unblocking events from SCTransport */
      return(0);
    }

    if(strstr(s, "changeack")) { /* It's a PIN change request */
#ifndef SOMETHING_VERY_BADLY_BROKEN
      change_pin(s); /* state transition will by driven by AUTH status calls from the registry / sc layer */
#else
      strcpy(s, "hello");
#endif
      return(0);
    }

    if(strstr(s, "changenak")) { /* User doesn't want to change PIN */
      ncma_trans = Trans_URLLeavePIN;
      setcallback();
      return(0);
    }


    if(strstr(s, "retry")) { /* It's a CONFIRM off the bad PIN screen */
      ncma_trans = Trans_URLRetry;
      setcallback();
      return(0);
    }

    if(strstr(s, "mismatch")) { /* It's a confirm off the mismatched PINs screen */
      ncma_trans = Trans_URLMismatchAck;
      setcallback();
      return(0);
    }

    if(strstr(s, "downloadack")) { /* It's a radio button off the download screen */

      ncma_trans = Trans_URLDownloadMin; /* default to a minimum download */

#ifdef POINTLESS
      if(strstr(s, "MIN")) {
          ncma_trans = Trans_URLDownloadMin;
      }

      else if(strstr(s, "MAX")) {
#else
      if(strstr(s, "MAX")) {
#endif
          ncma_trans = Trans_URLDownloadMax;
      }

      else if(strstr(s, "SCHED")) {
          ncma_trans = Trans_URLDownloadSched;
      }

      setcallback();
      return(0);
    }

    if(strstr(s, "downloadnak")) { /* it's a disconnect off the download screen */
      ncma_trans = Trans_URLDownloadNak;
      setcallback();
      return(0);
    }

    if(strstr(s, "connectack")) { /* It's an OK off the connect screen */
      DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Setting transition to Trans_URLConnect\n");
      ncma_trans = Trans_URLConnect;
      setcallback();
      DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Callback set\n");
      return(0);
    }

    if(strstr(s, "connectnak")) { /* It's a cancel off the connect screen */
      ncma_trans = Trans_URLConnectNak;
      setcallback();
      return(0);
    }

    if(strstr(s, "movedack")) { /* the box has moved */
      ncma_trans = Trans_URLMovedAck;
      setcallback();
      return(0);
    }

    if(strstr(s, "movednak")) { /* the box hasn't moved */
      ncma_trans = Trans_URLMovedNak;
      setcallback();
      return(0);
    }

    if(strstr(s, "dropack")) { /* It's an OK off the connect screen */
      ncma_trans = Trans_URLDisconnectAck;
      setcallback();
      return(0);
    }

    if(strstr(s, "dropnak")) { /* It's a cancel off the connect screen */
      ncma_trans = Trans_URLDisconnectNak;
      setcallback();
      return(0);
    }

    if(strstr(s, "standby")) { /* initiate a STANDBY sequence */
        prevent_shutdown = 1;
        ncma_trans = Trans_Shutdown;
        setcallback();
        return(0);
    }

    if(strstr(s, "booted")) { /* boot file completion notifications */
       if(strstr(s, "full")) {
          ncma_trans = Trans_BootedFull;
          setcallback();
          return(0);
       } else if(strstr(s, "fast")) {
           ncma_trans = Trans_BootedFast;
           setcallback();
           return(0);
       } else if(strstr(s, "update")) {
           ncma_trans = Trans_BootedUpdate;
           setcallback();
           return(0);
       }
    }

    if(strstr(s, "transfer")) { /* browser is telling us to start boot transfer */
        ncma_trans = Trans_URLTransfer;
        setcallback();
        return(0);
    }


#ifdef ENABLE_DEBUGGING
    if(strstr(s, "test")) { /* funky test URLs */

      if(strstr(s, "sleep")) { /* initiate a STANDBY sequence */
          ncma_url_open(BLANK_SCREEN_URL);
          shutdown_nc();
          return(0);
      }

      if(strstr(s, "powerup")) { /* initiate power up sequence */
        ncma_trans = Trans_PowerUp;
        setcallback();
        return(0);
      }

      if(strstr(s, "reset")) { /* initiate power up sequence */
        ncma_state = State_NCMAInit;
        ncma_trans = Trans_Idle;
        return(0);
      }

      if(strstr(s, "dialbad")) { /* initiate a dial-failed sequence */
        ncma_trans = Trans_DialBad;
        setcallback();
        return(0);
      }

      if(strstr(s, "dialok")) { /* initiate a dial succeeded sequence */
        ncma_trans = Trans_DialOK;
        setcallback();
        return(0);
      }


      if(strstr(s, "mimebad")) { /* initiate a dial-failed sequence */
        ncma_trans = Trans_MIMEBad;
        setcallback();
        return(0);
      }

      if(strstr(s, "mimeok")) { /* initiate a dial succeeded sequence */
        ncma_trans = Trans_MIMEOk;
        setcallback();
        return(0);
      }

      if(strstr(s, "hup")) { /* fake a line drop acknowledgement */
        ncma_trans = Trans_HUP;
        setcallback();
        return(0);
      }

      if(strstr(s, "log")) { /* close debug log */
        /*DBUG_FCLOSE();*/
        return(0);
      }

#ifdef TRAP_PPP_TIMEOUTS
      if(strstr(s, "drop")) { /* fake Service_PPPTimingOut */
         if(ignore_ppp_timeout) { /* don't claim */
           DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: faked Service_PPPTimingOut PASS-THRU (HUP)\n");
           ignore_ppp_timeout = 0; /* reset ignore flag */
           ncma_dbox_close();
         } else { /* claim svc call to prevent shutdown */
           DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: faked Service_PPPTimingOut CLAIM & CALLBACK\n");
    	   ncma_trans = Trans_PPPTimeout;
    	   setcallback();
    	 }

        return(0);
      }
#endif

    }
#endif

    if(strstr(s, "shutdownack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLShutdown;
       setcallback();
       return(0);
    }

    if(strstr(s, "shutdownnak")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLShutdownCancel;
       setcallback();
       return(0);
    }

    if(strstr(s, "surf") || strstr(s, "userhome")) { /* Let's surf! */
       ncma_trans = Trans_NCMASurf;
       setcallback();
       return(0);
    }

    if(strstr(s, "badubpack")) { /* ack. from the bad unblock pin screen */
       ncma_trans = Trans_URLBadUnblockPINAck;
       setcallback();
       return(0);
    }



#ifdef POINTLESS_BUTTONS
    if(strstr(s, "smartcardack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLSmartcardAck;
       setcallback();
       return(0);
    }

    if(strstr(s, "badcardack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLBadCardAck;
       setcallback();
       return(0);
    }
#endif

#ifdef SC_SWAPPING
    if(strstr(s, "logoutack")) { /* request from an app to  */
       DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Setting transition to Trans_LogoutAck\n");
       ncma_trans = Trans_LogoutAck;
       setcallback();
       return(0);
    }
    if(strstr(s, "logoutnak")) { /* request from an app to  */
       DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Setting transition to Trans_LogoutNak\n");
       ncma_trans = Trans_LogoutNak;
       setcallback();
       return(0);
    }

    if(strstr(s, "DialUI_Start")) { // request from an app to
       DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Setting transition to Trans_NCMADialUI_Start\n");
       ncma_trans = Trans_NCMADialUI_Start;
       setcallback();
       return(0);
    }

    if(strstr(s, "WrongISPCard")) { /* request from an app to  */
       DBUG_PRINTF(DBUG_LVL_ERROR, "NCMA_machine: Setting transition to Trans_WrongISPCard\n");
       ncma_trans = Trans_WrongISPCard;
       setcallback();
       return(0);
    }
#endif /* SC_SWAPPING */

#ifdef EMAIL_CLIENT
    if(strstr(s, "emailselectuserack"))
    {
       DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: EmailSelectUserAck\n");
       ncma_trans = Trans_NCMAEmailSelectUserAck;
       setcallback();
       return(0);
    }
    if(strstr(s, "emailselectusernak"))
    {
       DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: EmailSelectUserNak\n");
       ncma_trans = Trans_NCMAEmailSelectUserNak;
       setcallback();
       return(0);
    }
    if(strstr(s, "EnterEmailSelectUserOffline"))
    {
       DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: NCMAEnterEmailSelectUserOffline\n");
       ncma_trans = Trans_NCMAEnterEmailSelectUserOffline;
       setcallback();
       return(0);
    }
    if(strstr(s, "EnterEmailSelectUserOnline"))
    {
       DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_handler: NCMAEnterEmailSelectUserOnline\n");
       ncma_trans = Trans_NCMAEnterEmailSelectUserOnline;
       setcallback();
       return(0);
    }
#endif /* EMAIL_CLIENT */

    if(strstr(s, "hangup")) { /* request from an app to hangup */
       ncma_trans = Trans_HangUp;
       setcallback();
       return(0);
    }

    return(0);
}

int cmd_ncma_cache(char *s, int n)
{
    cache_info();
    return(0);
}

int cmd_ncma_memory(char *s, int n)
{
    rmstat();
    return(0);
}

int cmd_ncma_preconnect(char *s, int n)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ncma_preconnect: Trans_PreConnect triggered.\n");
    ncma_trans = Trans_PreConnect;
    setcallback();
    usermode_donothing(); /* flush callbacks */
    return(0);
}
