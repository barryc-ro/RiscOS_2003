/************************************************************************/
/* File:    ncma_swis.c                                                 */
/* Purpose: Handles Swi calls made to the NCMAlite module.              */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pace.co.uk>               */
/*                                                                      */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"

/* Local includes */
#define PROTOTYPES_INTERNAL
#include "options.h"
#include "ncma_swis.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "smtags.h"
#include "dynalloc.h"
#include "module.h"
#include "machine.h"
#include "usermode.h"
#include "init.h"
#include "DBUG.h"

int ncma_nullswi(_kernel_swi_regs *r)
{
  return(0);
}

int ncma_enquiry(_kernel_swi_regs *r)
{
   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_enquiry()\n");
    	if(tag_cache.valid == 0)
        { /* no tags loaded */
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_enquiry(): Tag cache is not valid. Setting the transition to Trans_URLStart.\n");
    	  r->r[0] = -1;
/* No longer needed - it was a hideous hack anyway
    	  ncma_trans = Trans_URLStart;
    	  setcallback();
*/
    	  return(0);
    	}

        if((r->r[0] = cache_enquiry((char *)r->r[0], (char *)r->r[1], (int)r->r[2]))<0)
        {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_enquiry(): tag cache enquiry failed\n");
        }
      return(0);
}

/* misc. ops, for various hacks needed by other modules */
int ncma_miscop(_kernel_swi_regs *r)
{
    switch(r->r[0]) {

        case NCMA_MISCOP_PRECONNECT:  /* build cache without connecting */
             DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Trans_PreConnect triggered\n");
             ncma_trans = Trans_PreConnect;
             setcallback();
             usermode_donothing(); /* flush callbacks */
             break;

        case NCMA_MISCOP_CONNECTIONTYPE: /* Return whether a modem or ethernet build */
             DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Connection Type requested.\n");
             /* interface_type is set on initialisation */
             if (interface_type == ETHERNET_INTERFACE)
             {
               r->r[1] = 0;
             }
             if (interface_type == MODEM_INTERFACE)
             {
               r->r[1] = 1;
             }
             if (interface_type == NO_INTERFACE)
             {
               DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Error : Unknown interface type.\n");
             }
             break;

        default:
             DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_miscop(): unrecognized misc. op.\n");
             break;
    }
    return(0);
}

