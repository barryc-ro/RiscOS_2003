/************************************************************************/
/* File:    ncma_swis.c                                                 */
/* Purpose: Handles Swi calls made to the NCMAlite module.              */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pace.co.uk>               */
/*                                                                      */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"

/* Local includes */
#define PROTOTYPES_INTERNAL
#include "options.h"
#include "ncma_swis.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "ncma_bootb.h"
#include "smtags.h"
#include "dynalloc.h"
#include "module.h"
#include "machine.h"
#include "callbacks.h"
#include "init.h"
#include "DBUG.h"


/*********************************************************************************/
/* ncma_nullswi                                                                  */
/*                                                                               */
/* This routine deals with unrecognised SWI calls to NCMAlite. It does nothing.  */
/*                                                                               */
/* Parameters: r: The registers passed in during the SWI call.                   */
/*                                                                               */
/* Returns: 0                                                                    */
/*                                                                               */
/*********************************************************************************/
int ncma_nullswi(_kernel_swi_regs *r)
{
  return(0);
}



/*********************************************************************************/
/* ncma_enquiry                                                                  */
/*                                                                               */
/* This routine deals with the ncma_enquiry's SWI call's sub-reason codes.       */
/*  If the tag cache has not yet been initialised, -1 is returned in R0. If the  */
/*   tag cache has been initialised then the registers are filled with the       */
/*   relevant tag details if it exists.                                          */
/*                                                                               */
/* Parameters: r: The registers passed in during the SWI call.                   */
/*                                                                               */
/* Returns: 0                                                                    */
/*                                                                               */
/*********************************************************************************/
int ncma_enquiry(_kernel_swi_regs *r)
{
   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_enquiry()\n");
   if(tag_cache.valid == 0)
   { /* no tags loaded */
     DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_enquiry(): Tag cache is not valid. Setting the transition to Trans_URLStart.\n");
     r->r[0] = -1;
     return(0);
   }

   if((r->r[0] = cache_enquiry((char *)r->r[0], (char *)r->r[1], (int)r->r[2]))<0)
   {
     DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_enquiry(): tag cache enquiry failed\n");
   }

   return(0);
}



/*********************************************************************************/
/* ncma_miscop                                                                   */
/*                                                                               */
/* This routine deals with the ncma_miscop SWI call's sub-reason codes.          */
/* There are currently two supported miscop sub-reason codes:                    */
/*  0: Trigger a preconnect.                                                     */
/*  1: Return the currentl conection type (modem or ethernet).                   */
/*  2: Disable smartcard slot 2.                                                 */
/*                                                                               */
/* Parameters: r: The registers passed in during the SWI call.                   */
/*                                                                               */
/* Returns: 0                                                                    */
/*                                                                               */
/*********************************************************************************/
int ncma_miscop(_kernel_swi_regs *r)
{
    switch(r->r[0])
    {

        case NCMA_MISCOP_PRECONNECT:  /* build cache without connecting */
             DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Trans_PreConnect triggered\n");
             ncma_trans = Trans_PreConnect;
             setcallback();
             usermode_donothing(); /* flush callbacks */
             break;

        case NCMA_MISCOP_CONNECTIONTYPE: /* Return whether a modem or ethernet build */
             DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Connection Type requested.\n");
             /* interface_type is set on initialisation */
             if (interface_type == ETHERNET_INTERFACE)
             {
               r->r[1] = 0;
             }
             if (interface_type == MODEM_INTERFACE)
             {
               r->r[1] = 1;
             }
             if (interface_type == NO_INTERFACE)
             {
               DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_miscop(): Error : Unknown interface type.\n");
             }
             break;

#ifdef TWIN_SMARTCARD
        case NCMA_MISCOP_DISABLESLOT2:
             if (r->r[1])
               disable_slot2_count++;
             else
               disable_slot2_count--;
             r->r[2] = disable_slot2_count;
             break;
#endif /* TWIN_SMARTCARD */

        default:
             DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_miscop(): unrecognized misc. op.\n");
             break;
    }
    return(0);
}

