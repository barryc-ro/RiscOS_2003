/************************************************************************/
/* File:    ncma_bootb.c                                                */
/* Purpose: deal with all aspects of bootblocks, enterprise blocks etc. */
/*                whether in RAM, NVRAM, or on the smartcard            */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"

/* Local includes */
#define PROTOTYPES_INTERNAL
#include "ncma_bootb.h"
#define PROTOTYPES_INTERNAL
#include "ncma_tags.h"
#include "ncma_scard.h"
#include "smtags.h"
#include "ncma_url.h"
#include "ncma_uid.h"
#include "ncma_utils.h"
#include "smcard.h"

#ifdef SC_SWAPPING
#include "machine.h"
#endif /* SC_SWAPPING */
#include "DBUG.h"


/* Define two variables needed for SC_SWAPPING behaviour */
#ifdef SC_SWAPPING
  extern int bootblock_num_bytes;  // This variable is used to store the number of bytes held in the cache.
  extern unsigned char *bootblock_copy; // This holds a copy of the memory area.
#endif /* SC_SWAPPING */




/*********************************************************************************/
/* fetch_sc_bootblock                                                            */
/*                                                                               */
/* This routine fetches a bootblock into a memory area.                          */
/*                                                                               */
/* Parameters: int called_for_ISPCapture. This variable states whether this      */
/*              routine was called as part of ISPCapture. If this was the case,  */
/*              then it does not attempt to copy the bootblock of perform        */
/*              comparisons between bootblocks (needed for SC_SWAPPING           */
/*              behaviour)                                                       */
/*                                                                               */
/* Returns:    int : -1 if the bootblock was unobtainable; -2 if the bootblock   */
/*                   and bootblock copy did not match (SC_SWAPPING behaviour).   */
/*                   0 if there was no error.                                    */
/*                                                                               */
/*********************************************************************************/
int fetch_sc_bootblock(int called_for_ISPCapture)
{
    _kernel_swi_regs r;
    DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock() called with paramter %d\n", called_for_ISPCapture);

    r.r[0] = 1; /* tell bootblock that we want even insecure data */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_sc_bootblock: SWI failed\n");
      return(-1);
    }

#ifdef SC_SWAPPING
    if (called_for_ISPCapture == FETCH_BOOTBLOCK_FOR_ISPCAPTURE)
    {
      /* If a bootblock copy already exists and this is called for
          ISPcapture, it is assumed that the new values will replace the
          existing ones.Therefore if a copy exists here scrub it and allow it
          to be replaced when the user next connects.
         An example of when this happens is when the user connects but the
          URL on the sc is bad. The badurl screen allows the user to go back
          to ISPCapture to re-enter values, and thus when the user
          re-connects afterwards the card is said to be invalid. The logic
          below prevents this anamolous behaviour by fushing the bootblock
          copy, allowing it to be recreated with the new image next time the
          user reconnects.
      */
      if (bootblock_copy != NULL) /* A bootblock copy has been allocated */
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: Flushing the existing bootblock copy.\n");
        rmfree(bootblock_copy);
        bootblock_copy = NULL;
      }
    }
#endif /* SC_SWAPPING */

    if(r.r[0]<0)
    {
      switch(r.r[0])
      {

        case -1: /* no enterprise data available */
               DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: no enterprise info available\n");
               sc_block_ptr = NULL;
    	       sc_block_bytes = 0;
    	       sc_index_ptr = (unsigned char *)r.r[2];
    	       sc_index_bytes = r.r[3];
    	       sc_alt_ptr = (unsigned char *)r.r[4];
    	       sc_alt_bytes = r.r[5];
    	       break;

        case -2: /* authentication failed */
               DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_sc_bootblock: authentication failed\n");
               return(-1);

        default:
               DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: bizarre error %d\n", r.r[0]);
               return(-1);
      }
    }
    else
    {
      /* success */
      DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: succeeded\n");

      if(r.r[6] & 1)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: NCBootblock doesn't trust this data\n");
        trusted_scard_data = 0;
      }
      else
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: NCBootblock trusts this data\n");
        trusted_scard_data = 1;
      }

      sc_block_ptr = (unsigned char *)r.r[0];
      sc_block_bytes = r.r[1];
      sc_index_ptr = (unsigned char *)r.r[2];
      sc_index_bytes = r.r[3];
      sc_alt_ptr = (unsigned char *)r.r[4];
      sc_alt_bytes = r.r[5];
      sc_eb_ptr = find_tag_in_block(sc_block_ptr, sc_block_bytes, NCIBeginSignatureTag, &sc_eb_bytes, NULL);
      sc_hash_ptr = find_tag_in_block(sc_block_ptr, sc_block_bytes, NCISignatureTag, &sc_hash_bytes, NULL);

  /* SC_SWAPPING behaviour requires that when a redial is requested that the
      card inserted is the card the session was strted with. This is achieved
      by the code below, which compares a copy of the bootblock of the
      original card with the one which is currently inserted. */
#ifdef SC_SWAPPING
    if (called_for_ISPCapture == FETCH_BOOTBLOCK_FOR_ISPCAPTURE)
    {
      /* Was called as part of ISPCapture. Since this is used before the
         'official' start of a session, it does not want to store the data
         here, as ISPCapture alters it. Instead it should be stored when
         connecting. */
      DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: Not copying bootblock as it was called for ISPCapture.\n");
    }

    if (called_for_ISPCapture == FETCH_BOOTBLOCK_FOR_CLIENT) /* The user is connecting */
    {
      if (bootblock_copy==NULL)  /* Bootblock copy has not yet been allocated */
      {
        bootblock_num_bytes = sc_block_bytes;
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: Allocating memory for bootb copy.\n");
        bootblock_copy = rmalloc(sc_block_bytes, "Bootblock copy.");
        if (!bootblock_copy)
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: Error : Could not Allocate memory for bootb copy.\n");
        }
        else
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: About to copy memory over.\n");
          memcpy(bootblock_copy, sc_block_ptr, sc_block_bytes);
        }
      }
      else /* Bootblock copy has already been allocated- perform comparisons */
      {
        int comp_result;
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: A sc has already been allocated.\n");
        /* Compare with the latest memory area. */
        /* 1stly check sizes are the same */
        if (sc_block_bytes != bootblock_num_bytes)
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: Sizes are different : Going to State_NCMAWrongISPCard (sc_block_bytes = %d bootblock_num_bytes = %d) .\n", sc_block_bytes, bootblock_num_bytes);
          return (-2);
        }

        /* Now actually compare the blocks using memcmp - sizes must be the same. */
        comp_result = memcmp(bootblock_copy, sc_block_ptr, sc_block_bytes);
        if (comp_result != 0)
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: This is not the same card we started the session with - memory areas are different. Result is %d\n", comp_result);
          return (-2);
        }

        /* If it gets this far, then it must be the same card. */
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: This is the same card we started the session with.\n");
      }
    }
#endif /* SC_SWAPPING */

  }
  return(0);
}





/*********************************************************************************/
/* select_scard_iap                                                              */
/*                                                                               */
/* This routine selects the IAP off the smartcard.                               */
/*                                                                               */
/* Parameters: void                                                              */
/*                                                                               */
/* Returns:    int : -1 if no IAP block, 1 if block found, 0 otherwise.          */
/*                                                                               */
/*********************************************************************************/
int select_scard_iap(void)
{
    unsigned char *group_ptr;
    unsigned int group_bytes;

    unsigned char *matrix_ptr;
    unsigned int matrix_bytes;

    unsigned char *id_ptr;
    unsigned int id_bytes;

    unsigned int tmp;

    DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap()\n");

    if((matrix_ptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, NCIIAPConnectMatrixTag, &matrix_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "select_scard_iap: no IAPConnectMatrix in s/card block\n");
        return(-1);
    }

    for(group_ptr = NULL;;)
    {
        if((group_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIGroupTag, &group_bytes, group_ptr))==NULL) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "select_scard_iap: exhausted s/card IAP groups\n");
            return(-1);
        }
        if((id_ptr = find_tag_in_block(group_ptr, group_bytes, NCIIAPIDTag, &id_bytes, NULL))==NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap: no IAP ID in this block\n");
            continue;
        }

        tmp = read_big_word((char *)id_ptr);
        iap_id = tmp;
        DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap: using IAP ID %d\n", iap_id);
        sc_iap_ptr = group_ptr;
        sc_iap_bytes = group_bytes;
        return(1);
    }
    return(0);
}




/*********************************************************************************/
/* virgin_smartcard                                                              */
/*                                                                               */
/* This routine returns whether a smartcard is virgin (i.e. no data has been     */
/*  written to it) or sullied (data has been written to it in bootblock form).   */
/*                                                                               */
/* Parameters: void                                                              */
/*                                                                               */
/* Returns:    int : 1 if a virgin card, -1 for an error and 0 for a sullied     */
/*                   card.                                                       */
/*                                                                               */
/*********************************************************************************/
int virgin_smartcard(void)
{
    int i;
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard()\n");

    r.r[0] = 1; /* gimme data whether it's authentic or not */
    r.r[2] = 0; /* initialise to zero in case it's a substitute BB module
                   that doesn't fill these in (eg NCBBnvram or NCBBtwin) */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL)
    {
        DBUG_PRINTF(DBUG_LVL_ERROR, "virgin_smartcard: Bootblock enquiry SWI failed!\n");
        return(-1);
    }

    if(r.r[0] != -2)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard(): r0 != -2\n");
      if (r.r[2])
      {
        i = *(unsigned int *)(r.r[2]);

        //DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: purity rating: 0x%x\n", i);
        if((i == 0x00000000) || (i == 0xffffffff))
        {
            DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: VIRGIN CARD\n");
            return(1);
        }
      }
    }
    else
    {
        DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: SWI returned error %d\n", r.r[0]);
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: SULLIED CARD\n");
    return(0);
}




