/* c code for bootblock CLI commands */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"
#include "kprintf.h"


#include "module.h"
#define PROTOTYPES_INTERNAL   /* declare our header file as local */
#include "reg_cmds.h"
#include "reg_scbb.h"
#include "enum_ddi.h"
#include "reg_status.h"
#include "enum_ddi.h"
#include "machine.h"
#include "reg_auth.h"
#include "reg_files.h"
#include "reg_index.h"

#ifdef BROKEN_ON_TELLIES
#include "reg_events.h"
#include "scinter.h"
#endif
#include "DBUG.h"

#if 1
#define PRINT_F kprintf
#else
#define PRINT_F printf
#endif

int bootblock_nullcmd(char *s, int n)
{
  return(0);
}

int bootblock_enum_info(char *s, int n)
{
  enum_info();
  return(0);
}

int bootblock_load(char *s, int n)
{

  if(load_scbb(SELECT_NET_BB, s) < 0) return(REGERR_BADFILE);
  return(0);
}

/* load a bootblock from a file and write it to the smartcard */
int bootblock_scload(char *s, int n)
{
#if 0
  int flags[4];
  unsigned char registered_tag[] = "SC_REGISTERED";

  (sc_bb.tags.hard.t_read((void *)&sc_bb, registered_tag, (unsigned char *)flags, 16));
  if(flags[0]) return(REGERR_SERVER_LOCKED); /* server write is locked */

  if(load_scbb(SELECT_SC_BB, s) < 0) return(REGERR_BADFILE);

  if(bootblock_state != State_CardInserted) {
    return(REGERR_SC_BUSY);
  }

  bootblock_trans = Trans_WriteCard;
  setcallback();
#endif
  return(0);
}

int bootblock_unlock_server(char *s, int x)
{
  return(0);
}

int bootblock_index_info(char *s, int x)
{
  return(0);
}

int bootblock_show_status(char *s, int x)
{

  int sc_delta, net_delta;

  sc_delta = sc_delta_svc | sc_delta_swi;
  net_delta = net_delta_svc | net_delta_swi;

  PRINT_F ("FLAG                 S/C   delta    Net  delta\n");
  PRINT_F ("----                 ---   -----    ---  -----\n\n");
  PRINT_F ("BB_STATUS_INSERTED   %s      %s       %s     %s\n", (sc_status & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_INSERTED)?"Y":"-");

  PRINT_F ("BB_STATUS_SC_VALID   %s      %s       %s     %s\n", (sc_status & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_SC_VALID)?"Y":"-");

  PRINT_F ("BB_STATUS_BB_VALID   %s      %s       %s     %s\n", (sc_status & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_BB_VALID)?"Y":"-");

  PRINT_F ("BB_STATUS_PIN        %s      %s       %s     %s\n", (sc_status & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_PIN)?"Y":"-");

  PRINT_F ("BB_STATUS_LOCKED     %s      %s       %s     %s\n", (sc_status & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_LOCKED)?"Y":"-");

  PRINT_F ("BB_STATUS_WRITEOK    %s      %s       %s     %s\n", (sc_status & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_WRITEOK)?"Y":"-");

  PRINT_F ("BB_STATUS_WRITEFAIL  %s      %s       %s     %s\n", (sc_status & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_WRITEFAIL)?"Y":"-");

  PRINT_F ("BB_STATUS_CLIENT     %s      %s       %s     %s\n", (sc_status & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_CLIENT)?"Y":"-");

  PRINT_F ("BB_STATUS_AUTHFAIL   %s      %s       %s     %s\n", (sc_status & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_AUTHFAIL)?"Y":"-");

  PRINT_F ("BB_STATUS_TOO_OLD    %s      %s       %s     %s\n", (sc_status & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_TOO_OLD)?"Y":"-");

  PRINT_F ("BB_STATUS_TOO_NEW    %s      %s       %s     %s\n", (sc_status & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_TOO_NEW)?"Y":"-");

  PRINT_F ("BB_STATUS_READOK     %s      %s       %s     %s\n", (sc_status & BB_STATUS_READOK)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_READOK)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_READOK)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_READOK)?"Y":"-");


  PRINT_F ("BB_STATUS_READFAIL   %s      %s       %s     %s\n", (sc_status & BB_STATUS_READFAIL)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_READFAIL)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_READFAIL)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_READFAIL)?"Y":"-");

  PRINT_F ("BB_STATUS_BADVERSION %s      %s       %s     %s\n", (sc_status & BB_STATUS_BADVERSION)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_BADVERSION)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_BADVERSION)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_BADVERSION)?"Y":"-");


  PRINT_F ("(delta values shown are SWI and SVC values OR'd together)\n\n");
  PRINT_F ("service calls issued: %d     SWI requests serviced: %d\n\n", status_svc_count, status_swi_count);
  PRINT_F ("\nCard serial number: %s     NC dirs: %d  NC files: %d\n", serial_buffer, ncdir_dirs, ncdir_files);

  PRINT_F ("\nState: %s    Transition: %s\n\n", state_string(bootblock_state), trans_string(bootblock_trans));

  return(0);
}

int bootblock_show_support(char *s, int x)
{
  return(0);
}

int bootblock_log(char *s, int x)
{
#ifdef BROKEN_ON_TELLIES
  int i;

  for(i=0; i<event_log_index;i++) {
    kprintf("%d ", i);
    switch(event_logs[i].event_number) {
      case Event_CardOK:
           kprintf("Event_CardOK ");
           break;

      case Event_CardBad:
           kprintf("Event_CardBad ");
           break;

      case Event_CardRemoved:
           kprintf("Event_CardRemoved ");
           break;

      case Event_Complete:
           kprintf("Event_Complete ");

           switch(event_logs[i].event_code) {
             case SC_SUCCESS:
             	  kprintf(" SC_SUCCESS ");
             	  break;

             case SC_NOTFOUND:
                  kprintf(" SC_NOTFOUND ");
                  break;

             case SC_TRANSPORT:
             	  kprintf(" SC_TRANSPORT ");
             	  break;

             case SC_SPACE:
             	  kprintf(" SC_SPACE ");
             	  break;

             case SC_EXISTS:
             	  kprintf(" SC_EXISTS ");
             	  break;

             case SC_STORAGE:
             	  kprintf(" SC_STORAGE ");
             	  break;

             case SC_NOSELECT:
             	  kprintf("SC_NOSELECT ");
             	  break;

             case SC_NOTVALID:
             	  kprintf(" SC_NOTVALID ");
             	  break;

             case SC_INCONSIST:
             	  kprintf(" SC_INCONSIST ");
             	  break;

             case SC_UNKNOWNRESP:
             	  kprintf(" SC_UNKNOWNRESP ");
             	  break;

             case SC_P1P2INVALID:
             	  kprintf(" SC_P1P2INVALID ");
             	  break;

             case SC_P3INVALID:
             	  kprintf(" SC_P3INVALID ");
             	  break;

             case SC_NOACCESSCODE:
             	  kprintf(" SC_NOACCESSCODE ");
             	  break;

             case SC_FAILACCESSCODE:
             	  kprintf(" SC_FAILACCESSCODE ");
             	  break;

             case SC_NOACCESSCHANGE:
             	  kprintf(" SC_NOACCESSCHANGE ");
             	  break;

             case SC_BLOCKEDACCESS:
                  kprintf(" SC_BLOCKEDACCESS ");
                  break;

             default:
                  break;
           }
           break;
     default:
            kprintf("Eh?");
            break;
    }
    kprintf("\n");
  }
#endif
  return(0);
}



int bootblock_enum_tags(char *s, int x)
{
    return(0);
}

int bootblock_file_info(char *s, int x)
{
    int l;

    PRINT_F ("NCbootblock smartcard file info:\n\n");

    for(l=0; l<ncdir_files; l++) if(reg_file[l].file_num != 0) {
        PRINT_F ("    File: %s/%x  Size: %d  Flags: 0x%x  Retries: %d\n", NC_DIRNAME,
        	 	 reg_file[l].file_num,
        	 	 reg_file[l].size,
        	 	 reg_file[l].flags,
        	 	 reg_file[l].retries);
    }

    PRINT_F ("\nSmartcard storage : %d bytes\n", total_smartcard_bytes);
    PRINT_F ("Max index size    : %d bytes\n", total_index_bytes);
    PRINT_F ("Max bootblock size: %d bytes\n", total_bootblock_bytes);
    PRINT_F ("Bootblock used    : %d bytes\n", sc_bb_bytes);
    PRINT_F ("Alternate used    : %d bytes\n", alternate_rs_bytes);
    PRINT_F ("Index used        : %d bytes\n\n", sc_index_bytes);
    PRINT_F ("Bootblock free    : %d bytes\n", total_bootblock_bytes - (sc_bb_bytes + alternate_rs_bytes));
    PRINT_F ("Index free        : %d bytes\n\n", total_index_bytes - sc_index_bytes);
    PRINT_F ("Bootblock loaded  : %s\n", bootblock_loaded?"Yes":"No");
    PRINT_F ("Bootblock auth    : %s\n", bootblock_authentic?"Yes":"No");
    PRINT_F ("Alternate loaded  : %s\n", alternate_rs_present?"Yes":"No");
    PRINT_F ("Bootblock readonly: %s\n", bootblock_readonly?"Yes":"No");
    PRINT_F ("Enterprse readonly: %s\n", enterprise_readonly?"Yes":"No");
    PRINT_F ("\n\n");
    return(0);
}

int bootblock_cli_authen(char *s, int x)
{
    char *p;
    int l;

    for(p=s, l=0; *p>0x20; p++, l++);
    *p = 0;
    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_cli_authen: setting %d byte PIN as \"%s\"\n", l, s);
    if(chv1_required) chv1_required = 0; /* clear first-time PIN requirement */
    set_authblock(s, l);
    if(bootblock_state == State_AuthFail) {
      bootblock_trans = Trans_AuthRetry;
      setcallback();
    }

    return(0);
}

