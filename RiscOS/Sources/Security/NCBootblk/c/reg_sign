/* ncma_auth - deal with MD5/RSA authentication for the bootblock */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "reg_sign.h"
#include "reg_tags.h"
#include "smcard.h"

#include "DBUG.h"

/* verify either against root or via intermediate certificate, if present */
int bootblock_auth(unsigned char *a, unsigned int b, unsigned char *c, unsigned int d, unsigned char *e, unsigned int f)
{
    if((e != NULL) && (f != 0)) { /* certificate details present */
      return(bootblock_auth_cert(a,b,c,d,e,f));
    }

    /* else use root public key */
    return(bootblock_auth_root(a,b,c,d));
}

/* verify a message against the root (manufacturer) certificate */
int bootblock_auth_root(unsigned char *msg, unsigned int mbytes, unsigned char *digest, unsigned int dbytes)
{
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_auth_root: mbytes: %d dbytes: %d root cert: \"%s\"\n",
    mbytes, dbytes,
#ifdef MANUFACTURER_KEY_X509
    ncma_auth_root_certificate_name);
#else
    ncma_auth_root_key_name);
#endif

#ifdef MANUFACTURER_KEY_X509
    r.r[0] = AUTH_FLAGS_KEY_DER;
#else
    r.r[0] = AUTH_FLAGS_KEY_RSA;
#endif
    r.r[1] = (int)msg;
    r.r[2] = mbytes;
    r.r[3] = (int)digest;
    r.r[4] = dbytes;
#ifdef MANUFACTURER_KEY_X509
    r.r[5] = (int)ncma_auth_root_certificate_name;
#else
    r.r[5] = (int)ncma_auth_root_key_name;
#endif
    r.r[6] = 0;
    r.r[7] = 0;
    if((_kernel_swi(HTTP_VerifyMessageDigest, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "bootblock_auth_root: HTTP_VerifyMD SWI failed\n");
        return(-1);
    }

    if(r.r[0] != 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "bootblock_auth_root: FAILED with reason code %d ", r.r[0]);
        switch(r.r[0]) {
            case AUTH_ERROR_BAD_INPUT:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "BAD INPUT\n");
            	 break;
            case AUTH_ERROR_BAD_CERT:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "BAD CERT\n");
            	 break;
            case AUTH_ERROR_FAILED:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "FAILED\n");
            	 break;
          default:
                 DBUG_PRINTF(DBUG_LVL_ERROR, "\n");
        }
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_auth_root: SUCCEEDED\n");
    return(1);
}

/* verify a message against the root (manufacturer) certificate via an intermediate certificate
   so, auth path is:

   authenticate intermediate certificate with root certificate
   authenticate message with intermediate certificate

 */
int bootblock_auth_cert(unsigned char *msg, unsigned int mbytes, unsigned char *digest, unsigned int dbytes,
    	           unsigned char *cert, unsigned int cbytes)
{
    _kernel_swi_regs r;

    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_auth_cert: mbytes: %d dbytes: %d cert: %d root key: \"%s\"\n", mbytes, dbytes, cbytes,
#ifdef MANUFACTURER_KEY_X509
    ncma_auth_root_certificate_name);
#else
    ncma_auth_root_key_name);
#endif

#ifdef MANUFACTURER_KEY_X509
    r.r[0] = AUTH_FLAGS_KEY_DER | AUTH_FLAGS_CERT_DER | AUTH_FLAGS_CERT_INCORE;
#else
    r.r[0] = AUTH_FLAGS_KEY_RSA | AUTH_FLAGS_CERT_DER | AUTH_FLAGS_CERT_INCORE;
#endif
    r.r[1] = (int)msg;
    r.r[2] = mbytes;
    r.r[3] = (int)digest;
    r.r[4] = dbytes;
#ifdef MANUFACTURER_KEY_X509
    r.r[5] = (int)ncma_auth_root_certificate_name;
#else
    r.r[5] = (int)ncma_auth_root_key_name;
#endif

    r.r[6] = (int)cert;
    r.r[7] = cbytes;
    if((_kernel_swi(HTTP_VerifyMessageDigest, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "bootblock_auth_cert: HTTP_VerifyMD SWI failed\n");
        return(-1);
    }

    if(r.r[0] != 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "bootblock_auth_cert: FAILED with reason code %d ", r.r[0]);
        switch(r.r[0]) {
            case AUTH_ERROR_BAD_INPUT:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "BAD INPUT\n");
            	 break;
            case AUTH_ERROR_BAD_CERT:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "BAD CERT\n");
            	 break;
            case AUTH_ERROR_FAILED:
            	 DBUG_PRINTF(DBUG_LVL_ERROR, "FAILED\n");
            	 break;
          default:
                 DBUG_PRINTF(DBUG_LVL_ERROR, "\n");
        }

        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_auth_cert: SUCCEEDED\n");
    return(1);
}


/* verify a chunk of data, extracting the necessary msg, digest, and (optional) certificate information */
int authenticate_bootblock(unsigned char *buff, unsigned int bytes, unsigned char *cert, unsigned int cert_bytes)
{
    unsigned char *msg;
    unsigned char *digest;

    unsigned int msg_bytes;
    unsigned int digest_bytes;

    if((msg=find_tag_in_block(buff, bytes, NCIBeginSignatureTag, &msg_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "authenticate_bootblock: no signed data in enterprise block\n");
        return(-1);
    }

    if((digest=find_tag_in_block(buff, bytes, NCISignatureTag, &digest_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "authenticate_bootblock: no signature in enterprise block\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "authenticate_bootblock: msg: 0x%x (%d bytes) hash: 0x%x (%d bytes) cert: 0x%x (%d bytes)\n",
    			       msg, msg_bytes, digest, digest_bytes, cert, cert_bytes);

    if((cert == NULL) || (cert_bytes == 0)) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "authenticate_bootblock: no certificate in enterprise block\n");
        return(bootblock_auth_root(msg, msg_bytes, digest, digest_bytes));
    }
    /* otherwise there's an intermediate certificate */
    return(bootblock_auth_cert(msg, msg_bytes, digest, digest_bytes, cert, cert_bytes));
}

/* verify a chunk of data, extracting the necessary msg, and  digest - IGNORE any certificate information
   (ie authenticate everything against the root certificate )*/
int authenticate_altblock(unsigned char *buff, unsigned int bytes)
{
    unsigned char *msg;
    unsigned char *digest;

    unsigned int msg_bytes;
    unsigned int digest_bytes;

    if((msg=find_tag_in_block(buff, bytes, NCIBeginSignatureTag, &msg_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "authenticate_altblock: no signed data in enterprise block\n");
        return(-1);
    }

    if((digest=find_tag_in_block(buff, bytes, NCISignatureTag, &digest_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "authenticate_altblock: no signature in enterprise block\n");
        return(-1);
    }

    return(bootblock_auth_root(msg, msg_bytes, digest, digest_bytes));
}
