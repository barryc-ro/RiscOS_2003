/* enum_ddi.c - routines concerned with dci 4 device driver enumeration */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "module.h"
#define PROTOTYPES_INTERNAL
#include "enum_ddi.h"
#include "dynalloc.h"
#include "DBUG.H"
#include "kprintf.h"


int enum_dci4_dibs(void)
{
  _kernel_swi_regs r;
  dci4_diblist *diblist_base, *diblist_ptr;
  mydci4_diblist *diblist_ptr2;
  unsigned char dib_buff[100];
  unsigned char st_link_status;
  unsigned int swibase;

    DBUG_PRINTF(DBUG_LVL_DEBUG, "enum_ddi: issuing service call...\n");
  r.r[0] = NULL;
  r.r[1] = Service_EnumerateNetworkDrivers;
  if(_kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r) != NULL) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "enum_ddi: service call failed!\n");
    return(-1); /* error f */
  }

  diblist_ptr = diblist_base = (dci4_diblist *)(r.r[0]);

  for(diblist_size = 0; diblist_ptr != NULL; diblist_size++) diblist_ptr = diblist_ptr->next;

  if((diblist_copy = (mydci4_diblist *)rmalloc(sizeof(mydci4_diblist) * diblist_size, "NCbootblock Workspace2"))==NULL) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "enum_ddi: malloc failed.\n");
    return(-1);
  }

  diblist_ptr = diblist_base;
  diblist_ptr2 = diblist_copy;

  while(diblist_ptr != NULL) { /* copy and relocate dib list */
      DBUG_PRINTF(DBUG_LVL_DEBUG, "Interface...  ");
    diblist_ptr2->dib_ptr = diblist_ptr->dib_ptr;
    diblist_ptr2->next = diblist_ptr2 + 1; /* can't ++ here - side effects */
    diblist_ptr2->flags = 0;

    swibase = diblist_ptr2->dib_ptr->dib_swibase;


   // printf("enum_ddi: Enquire 0x%x\n", swibase);


    r.r[0] = 0;
    r.r[1] = diblist_ptr2->dib_ptr->dib_unit;
    r.r[2] = 0;
    if(_kernel_swi(XOS_Bit | (swibase + 1), &r, &r) != NULL) {
      // printf("enum_ddi: DDI Enquiry failed.\n");
      return(-1); /* DIB_Inquire */
    }

    // printf("enum_ddi: enquiry finished...\n");
    if(r.r[2] & 0x80) {
      // printf("enum_ddi: Point to point link...\n");
      diblist_ptr2->flags |= DIB_FLAG_PTP;
    }

    if(r.r[2] & 0x100) {
      // printf("enum_ddi: stats supported - calling...\n");
      diblist_ptr2->flags |= DIB_FLAG_STATS;
      r.r[0] = 1;
      r.r[1] = diblist_ptr2->dib_ptr->dib_unit;
      r.r[2] = (int)dib_buff;
      if(_kernel_swi(XOS_Bit | (swibase + 6), &r, &r) != NULL) {
        // printf("enum_ddi: DDI Stats call failed!\n");
        return(-1); /* DIB Stats */
      }

      st_link_status = *(dib_buff + 1);
      if(st_link_status & 1) diblist_ptr2->flags |= DIB_FLAG_STATUS;
      if(st_link_status & 2) diblist_ptr2->flags |= DIB_FLAG_UP;
    }

    diblist_ptr2++;
    diblist_ptr = diblist_ptr->next;
  }
  (--diblist_ptr2)->next = NULL;

  return(1);

}

int enum_info(void)
{


  mydci4_diblist *diblist_ptr;

  diblist_ptr = diblist_copy;

  kprintf("NC bootblock: known network interfaces:\n\n");
  while(diblist_ptr != NULL) {
    kprintf("Interface: \"%s%d\"   Driver: \"%s\"   Location: \"%s\" Status:%s%s%s%s%s%s%s\n",
    	      diblist_ptr->dib_ptr->dib_name,
    	      diblist_ptr->dib_ptr->dib_unit,
    	      diblist_ptr->dib_ptr->dib_module,
    	      diblist_ptr->dib_ptr->dib_location,
    	      (diblist_ptr->flags & DIB_FLAG_PRIMARY)?"M":"-",
    	      (diblist_ptr->flags & DIB_FLAG_STATS)?"S":"-",
    	      (diblist_ptr->flags & DIB_FLAG_STATUS)?"A":"-",
    	      (diblist_ptr->flags & DIB_FLAG_UP)?"U":"-",
    	      (diblist_ptr->flags & DIB_FLAG_PTP)?"P":"-",
    	      (diblist_ptr->flags & DIB_FLAG_SCOK)?"B":"-",
    	      (diblist_ptr->flags & DIB_FLAG_IGNORE)?"I":"-"
    	      );
    diblist_ptr = diblist_ptr->next;
  }
  kprintf("\n\n[M: Main S:Stats A:Active U:Up P:Point2point B:bootblock I:ignored]\n\n");

  return(0);
}

mydci4_diblist *find_ddi(char *s)
{
  mydci4_diblist *diblist_ptr;

  diblist_ptr = diblist_copy;

  while(diblist_ptr != NULL) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "find_ddi: comparing %s with %s\n", s, diblist_ptr->dib_ptr->dib_name);
    if(strncmp(s, diblist_ptr->dib_ptr->dib_name, 4)==0) return(diblist_ptr);
    diblist_ptr = diblist_ptr->next;
  }
  return((mydci4_diblist *)NULL);
}

int enum_free(void)
{
  rmfree((char *)diblist_copy);
  return(0);
}


