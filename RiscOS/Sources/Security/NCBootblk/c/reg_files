/* reg_files.c - handle aspects of smartcard files for the bootblock */
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "machine.h"
#define PROTOTYPES_INTERNAL
#include "reg_files.h"
#include "reg_auth.h"
#include "reg_utils.h"

#include "DBUG.h"


void reg_filename(char *buff, int n)
{
    sprintf(buff, "%s/%x", NC_DIRNAME, REG_FILES_BASE+n);
    DBUG_PRINTF(DBUG_LVL_DIAG, "reg_filename: converted file number %d to \"%s\"\n", n, buff);
    return;
}

void reg_file_record(int n, char *buff)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "reg_file_record: recording data for file %d\n", n);
  reg_file[n].file_num = REG_FILES_BASE+n;
  reg_file[n].size = buff[2]<<8 | buff[3];
  reg_file[n].flags = buff[CARDAUTH_PERM_BYTE] & CARDAUTH_PERM_BIT_CHV1;
  reg_file[n].retries = buff[CARDAUTH_ATTEMPTS_BYTE] & CARDAUTH_ATTEMPTS_MASK;

  total_smartcard_bytes += reg_file[n].size;
  if(reg_file[n].file_num == REG_FILES_BASE) total_index_bytes += reg_file[n].size;
  else total_bootblock_bytes += reg_file[n].size;
  return;
}

void reg_file_reset(void)
{
    int l;

    total_smartcard_bytes = 0;
    total_bootblock_bytes = 0;
    total_index_bytes = 0;
    for(l=0; l<MAX_REG_FILES; l++) memset((char *)&reg_file[l], 0, sizeof(REG_FILE));

    return;
}

int reg_file_index_to_num(char *s) /* convert filename string of form "NCx" to reg_file record index */
{
    int n;

    n = (int)(*(s+2) - REG_FILES_BASE);

    DBUG_PRINTF(DBUG_LVL_DIAG, "reg_file_index_to_num: converted \"%s\" to index num: %d\n", s, n);
    return(n);
}

/* find reg_file[] entry for filename eg 0x21 */
int reg_file_find_name(unsigned int name)
{
    int l;

    for(l=0; l<MAX_REG_FILES;l++) if(reg_file[l].file_num == name) return(l);
    return(-1);
}

void clear_file_cmds(void)
{
    memset((char *)&bb_file_command[0], 0, sizeof(BB_FILE_COMMAND) * MAX_FILE_CMDS);
    bb_file_cmd_wptr = 0;
    bb_file_cmd_rptr = 0;
    return;
}

/* push a file command onto the file command queue tail */
int push_file_cmd(char *fname, unsigned int fnum, unsigned int offset, unsigned int bytes)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "push_file_cmd: file: \"%s\" offset: %d bytes: %d\n", fname, offset, bytes);
    if(bb_file_cmd_wptr < MAX_FILE_CMDS) {
        strncpy(bb_file_command[bb_file_cmd_wptr].filename, fname, MAX_BB_FILE_CMD_FILENAME);
        bb_file_command[bb_file_cmd_wptr].filenum = fnum;
        bb_file_command[bb_file_cmd_wptr].offset = offset;
        bb_file_command[bb_file_cmd_wptr].bytes = bytes;
        bb_file_cmd_wptr++;
        return(bb_file_cmd_wptr);
    }
    return(-1);
}

/* get index for next file command */
int pop_file_cmd(void)
{
    int i;

    if(bb_file_cmd_rptr < bb_file_cmd_wptr) {
    	i = bb_file_cmd_rptr++;
    	DBUG_PRINTF(DBUG_LVL_DIAG, "pop_file_cmd: file: \"%s\" num: 0x%x offset: %d bytes: %d\n",
    		bb_file_command[i].filename,
    		bb_file_command[i].filenum,
    		bb_file_command[i].offset,
    		bb_file_command[i].bytes);

    	return(i);
    }
    return(-1);
}

/* get index for last file command */
int pop_last_file_cmd(void)
{
    int i;

    i = bb_file_cmd_rptr - 1;
    if(i < bb_file_cmd_wptr) {
    	DBUG_PRINTF(DBUG_LVL_DIAG, "pop_last_file_cmd: file: \"%s\" num: 0x%x offset: %d bytes: %d\n",
    		bb_file_command[i].filename,
    		bb_file_command[i].filenum,
    		bb_file_command[i].offset,
    		bb_file_command[i].bytes);

    	return(i);
    }
    return(-1);
}


int build_index_cmds(unsigned int start, unsigned int offset, unsigned int bytes)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_index_cmds: entered\n");

    clear_file_cmds();

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_index_cmds: start 0x%x offset: %d bytes: %d\n", start, offset, bytes);
    return(add_index_cmds(start, offset, bytes));
}


int add_index_cmds(unsigned int start, unsigned int offset, unsigned int bytes)
{
    int l,m,n;
    char fname[16];

    DBUG_PRINTF(DBUG_LVL_DIAG, "add_index_cmds: start 0x%x offset: %d bytes: %d\n", start, offset, bytes);

    if((l = reg_file_find_name(start))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "add_index_cmds: failed to find fileinfo for file 0x%x\n", start);
        return(-1);
    }

    for(m=0;;m++) {
        if((offset + bytes) <= reg_file[l].size) { /* remaining BB data fits entirely in current file */
	  sprintf(fname,"%s/%x", NC_DIRNAME, start);
          if(push_file_cmd(fname, start, offset, bytes)<0) {
              DBUG_PRINTF(DBUG_LVL_ERROR, "add_index_cmds: no more space in comand queue\n");
              return(-1);
          }
          DBUG_PRINTF(DBUG_LVL_DIAG, "add_index_cmds: final sequence chunk written\n");
          break;
        } else { /* current file is only a portion of remaining BB data */
           n = reg_file[l].size - offset; /* bytes left in this file */
           sprintf(fname, "%s/%x", NC_DIRNAME, start);
           if(push_file_cmd(fname, start, offset, n)<0) {
             DBUG_PRINTF(DBUG_LVL_ERROR, "add_index_cmds: no more space in comand queue\n");
             return(-1);
           }
           offset = 0;
           bytes -= n;
           start++;
           if((l = reg_file_find_name(start))<0) {
               DBUG_PRINTF(DBUG_LVL_ERROR, "add_index_cmds: failed to find fileinfo for file 0x%x\n", start);
               return(-1);
           }
        }
    }
    return(m);
}

int append_index_cmds(unsigned int bytes)
{
    int l, m, n;
    unsigned int start, offset;

    DBUG_PRINTF(DBUG_LVL_DIAG, "append_index_cmds: bytes: %d\n", bytes);


    l = bb_file_cmd_wptr-1; /* get last entry */
    m = bb_file_command[l].offset + bb_file_command[l].bytes; /* next free address in given file */
    if((n = reg_file_find_name(bb_file_command[l].filenum))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "append_index_cmds: failed to find fileinfo for file 0x%x\n", bb_file_command[l].filenum);
        return(-1);
    }

    if(m >= reg_file[n].size) { /* no more room in that file */
      start = bb_file_command[l].filenum++; /* move to the next one */
      offset = 0; /* start at the beginning */
    } else {
        start = bb_file_command[l].filenum; /* fill remainder of existing file */
        offset = m;
    }

    return(add_index_cmds(start, offset, bytes));
}

