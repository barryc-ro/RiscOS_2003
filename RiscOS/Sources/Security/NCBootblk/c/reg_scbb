/* scbb.c - smartcard boot block internals */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PROTOTYPES_INTERNAL
#include "reg_scbb.h"
#include "reg_status.h"
#include "reg_index.h"
#include "enum_ddi.h"
#include "dynalloc.h"
#include "DBUG.h"

int init_scbb(void)
{
    if((sc_bb_buffer = (unsigned char *)rmalloc(5 * BOOTBLOCK_BUFFER_SIZE, "Bootblocks"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "init_scbb: couldn't claim bootblock buffers\n");
        return(-1);
    }

/*
    net_bb_buffer = sc_bb_buffer + BOOTBLOCK_BUFFER_SIZE;
    trans_bb_buffer = net_bb_buffer + BOOTBLOCK_BUFFER_SIZE;
*/
    sc_index = sc_bb_buffer + BOOTBLOCK_BUFFER_SIZE;
    trans_index = sc_index + BOOTBLOCK_BUFFER_SIZE;
    trans_bb_buffer = trans_index + BOOTBLOCK_BUFFER_SIZE;
    sc_rs_buffer = trans_bb_buffer + BOOTBLOCK_BUFFER_SIZE;

    DBUG_PRINTF(DBUG_LVL_DIAG, "init_scbb: sc-0x%x index-0x%x trans-0x%x trans-index-0x%x sc-rs-0x%x\n",
        sc_bb_buffer, sc_index, trans_bb_buffer, trans_index, sc_rs_buffer);


    return(0);
}

int load_scbb(int sel, char *fp)
{
  return(0);
}






int expand_index_filename(char *dst, unsigned char *src)
{
  int n, leaf = 1;
  char m;
  char *tomata = dst;
  unsigned char *banana = src;
  static char conv[] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

  *dst++ = '/'; /* start filename */

  for(n=0; n<4; n++) {
    m = *src++;
    if(m == 0) break; /* end of src filename */

    *dst++ = conv[(m / 0x10)];
    *dst++ = conv[(m % 0x10)];
    if(leaf && (*(src+1)==0)) {
      *dst++ = '/'; /* penultimate src byte? Add slash before doing leafname */
      leaf = 0;
    }
  }

  *dst = 0;

  DBUG_PRINTF(DBUG_LVL_DIAG, "expand: converted \"%s\" to \"%s\"\n", banana, tomata);

  return(strlen(dst));
}

