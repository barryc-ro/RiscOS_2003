/* bootblock version control */
#include <stdio.h>
#define PROTOTYPES_INTERNAL
#include "reg_index.h"
#include "reg_scbb.h"
#include "reg_status.h"
#include "DBUG.h"
#include "reg_utils.h"
#include "smcard.h"

/* returns: 0 for new smartcard, 1, fer VERSION, -1 for rubbish */
int version_control(unsigned char *buff)
{
   unsigned int index_version;

   alternate_rs_bytes = 0;
   enterprise_block_bytes = 0;

   DBUG_PRINTF(DBUG_LVL_DIAG, "version_control: buff is 0x%x\n", (int)buff);
   index_version = read_big_word((char *)buff);
   DBUG_PRINTF(DBUG_LVL_DIAG, "version_control: version word is: 0x%x\n", index_version);
   switch(index_version) {

       case 0x00000000:  /* we are relying on freshly minted smartcards having files which are all 0x0       */
       case 0xffffffff:  /* or all '0xff' - this is the only way we can tell 'new' from 'invalid' smartcards */
       	    return(0);
       case NCCARD_VERSION:
       	    return(1);

   }
   return(-1); /* oh dear */
}

/* return enterprise id from the index, and set file parameters as necessary */
/* set the bootblock wide read only flag as well if necessary */
int index_enterprise_id(unsigned char *buff)
{
    unsigned int tmp, bytes=8;

    buff += 4; /* skip the version header */

    for(;bytes>0;) {
      tmp = read_big_word((char *)buff);
      DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: read big word 0x%x (0x%x)\n", tmp, NCIAlternative800OffsetTag);

      if(tmp == NCIReadOnlyTag) {
          bootblock_readonly = 1;
          buff += 4;
          DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: NCIReadOnlyTag\n");
          continue;
      }

      if(tmp == NCIEnterpriseGroupTag) {
          buff += 4; /* skip tag */
          bytes = read_big_short((char *)buff);
          buff += 2;
          DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: NCIEnterpriseGroupTag: %d\n", bytes);
          continue;
      }

      if(tmp == NCIAlternative800OffsetTag) {
          alternate_rs_present = 1;
          buff += 6;
          alternate_rs_start = read_big_short((char *)buff);
          buff += 2;
          alternate_rs_offset = read_big_short((char *)buff);
          buff += 2;
          alternate_rs_bytes = read_big_short((char *)buff);
          buff += 2;
          bytes -= 12;
          DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: NCIAlternative800OffsetTag: 0x%x %d %d\n",
          			     alternate_rs_start,
          			     alternate_rs_offset,
          			     alternate_rs_bytes);
          continue;
      }

      if(tmp == NCIEnterpriseOffsetTag) {
          buff += 6;
          enterprise_id = read_big_word((char *)buff);
          buff += 4;
          enterprise_block_start = read_big_short((char *)buff);
          buff += 2;
          enterprise_block_offset = read_big_short((char *)buff);
          buff += 2;
          enterprise_block_bytes = read_big_short((char *)buff);
          buff += 2;
          bytes -= 16;
          DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: NCIEnterpriseOffsetTag: 0x%x 0x%x %d %d\n",
          			     enterprise_id,
          			     enterprise_block_start,
          			     enterprise_block_offset,
          			     enterprise_block_bytes);
          continue;
      }

      DBUG_PRINTF(DBUG_LVL_DIAG, "index_enterprise_id: unrecognized tag 0x%x - skipping\n");
      buff += 4;
      bytes -= 4;
      continue;
    }
    return(enterprise_id);
}


/* update in place an alternate800offset or an enterprise offset */
int write_index_info(unsigned char *buff, unsigned int tag, unsigned int start, unsigned int offset, unsigned int size)
{
    unsigned int tmp, bytes=8;

    buff += 4; /* skip the version header */

    for(;bytes>0;) {
      tmp = read_big_word((char *)buff);
      DBUG_PRINTF(DBUG_LVL_DIAG, "write_index_info: read big word 0x%x (0x%x)\n", tmp, NCIAlternative800OffsetTag);

      if(tmp == NCIReadOnlyTag) {
          buff += 4;
          continue;
      }

      if(tmp == NCIEnterpriseGroupTag) {
          buff += 4; /* skip tag */
          bytes = read_big_short((char *)buff);
          buff += 2; /* skip len */
          continue;
      }

      if(tmp == NCIAlternative800OffsetTag) {
          buff += 6; /* skip tag and len */
          if(tmp == tag) {
            write_big_short((char *)buff, start);
            buff += 2;
            write_big_short((char *)buff, offset);
            buff += 2;
            write_big_short((char *)buff, size);
            buff += 2;
	    return(1);
	  } else {
	      buff += 6;
	  }
      }

      if(tmp == NCIEnterpriseOffsetTag) {
          buff += 10; /* skip tag, len, and enterprise ID */
          if(tmp == tag) {
            write_big_short((char *)buff, start);
            buff += 2;
            write_big_short((char *)buff, offset);
            buff += 2;
            write_big_short((char *)buff, size);
            buff += 2;
	    return(1);
	  } else {
	      buff += 6;
	  }
      }
    }

    return(-1);
}

int create_index(unsigned char *buff, unsigned int bytes, INDEX_INFO *i)
{
#define ADVANCE(x) bytes -= x; \
buff += x;

    write_big_word((char *)buff, i->version);
    ADVANCE(4);

    if(i->readonly) {
        write_big_word((char *)buff, NCIReadOnlyTag);
	ADVANCE(4);
    }

    write_big_word((char *)buff, NCIEnterpriseGroupTag);
    ADVANCE(4);

    if((i->alt_start!=0)) {
        write_big_short((char *)buff, 28);
    } else {
        write_big_short((char *)buff, 16);
    }

    ADVANCE(2);

    write_big_word((char *)buff, NCIEnterpriseOffsetTag);
    ADVANCE(4);

    write_big_short((char *)buff, 10);
    ADVANCE(2);

    write_big_word((char *)buff, i->e_id);
    ADVANCE(4);

    write_big_short((char *)buff, i->e_start);
    ADVANCE(2);

    write_big_short((char *)buff, i->e_offset);
    ADVANCE(2);

    write_big_short((char *)buff, i->e_bytes);
    ADVANCE(2);

    if((i->alt_start != 0)) {
        write_big_word((char *)buff, NCIAlternative800OffsetTag);
        ADVANCE(4);

        write_big_short((char *)buff, 6);
        ADVANCE(2);

        write_big_short((char *)buff, i->alt_start);
        ADVANCE(2);

        write_big_short((char *)buff, i->alt_offset);
        ADVANCE(2);

        write_big_short((char *)buff, i->alt_bytes);
        ADVANCE(2);
    }
    return(0);
}

