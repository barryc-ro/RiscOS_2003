#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "machine.h"
#include "module.h"
#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "reg_events.h"
#include "scinter.h"


_kernel_oserror *bootblock_claimv(void)
{
    _kernel_swi_regs r;

    r.r[0] = EventV;
    r.r[1] = (int)bootblock_event_entry;
    r.r[2] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_Claim, &r, &r));
}

void bootblock_releasev(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Event_Expansion;
    (void) _kernel_swi(OS_Byte, &r, &r);
    r.r[0] = EventV;
    r.r[1] = (int)bootblock_event_entry;
    r.r[2] = (int)module_wsp;
    (void) _kernel_swi(XOS_Bit | OS_Release, &r, &r);
}


_kernel_oserror *bootblock_event_enable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}


_kernel_oserror *bootblock_event_disable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}


int bootblock_event_handler(int *r, void *pw) /* this is where it all happens! */
{
  if((*r == Event_Expansion) && (*(r+1) == Event_Expansion_SCInterface)) {
#ifdef BROKEN_ON_TELLIES
    event_logs[event_log_index].event_number = *(r+2);
    event_logs[event_log_index].event_code = *(r+3);
    event_log_index++;
    if(event_log_index == MAX_EVENT_LOG) event_log_index = 0;
#endif
    switch(*(r+2)) {

      case Event_CardOK:
           bootblock_trans = Trans_CardOK;
           break;
      case Event_CardBad:
      	   bootblock_trans = Trans_CardBad;
      	   break;
      case Event_CardRemoved:
      	   bootblock_trans = Trans_CardRemoved;
      	   break;
      case Event_Complete:
           switch(*(r+3)) {
             case SC_SUCCESS:
             	  bootblock_trans = Trans_CompleteOK;
             	  break;

             case SC_NOTFOUND:
             case SC_TRANSPORT:
             case SC_SPACE:
             case SC_EXISTS:
             case SC_STORAGE:
             case SC_NOSELECT:
             case SC_NOTVALID:
             case SC_INCONSIST:
             case SC_UNKNOWNRESP:
             case SC_P1P2INVALID:
             case SC_P3INVALID:
             	  bootblock_trans = Trans_CompleteBad;
             	  break;

             case SC_NOACCESSCODE:
             case SC_FAILACCESSCODE:
             case SC_NOACCESSCHANGE:
             case SC_BLOCKEDACCESS:
             	  bootblock_trans = Trans_AuthFail;
             	  break;

             default:
                  break;
           }
           break;

      default:  /* invalid Smartcard event - ignore it */
           return(1);
    }

    setcallback(); /* handle smartcard events */
    return(1);			/* SJM: This was 0 - but we should *never* claim the event */
  }
return(1);
}

int flush_transition_queue(void)
{
  int n;

  for(n=0;n<MAX_TRANSITION_QUEUE;n++) {
    transition_queue[n] = Trans_Idle;
  }

  transq_wrp = 0;
  transq_rdp = 0;
  return(n);
}

