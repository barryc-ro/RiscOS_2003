// header file for REG_EVENTS.H

/* Begin-Prologue */
#ifndef REG_EVENTS_H
#define REG_EVENTS_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
/* other miscellaneous defines */
#define EventV                    16
#define Event_Enable              14
#define Event_Disable             13

#define MAX_TRANSITION_QUEUE      16

DECLARE _kernel_oserror *bootblock_claimv(void);
DECLARE void bootblock_releasev(void);
DECLARE _kernel_oserror *bootblock_event_enable(void);
DECLARE _kernel_oserror *bootblock_event_disable(void);
DECLARE int bootblock_event_handler(int *, void *);
DECLARE int flush_transition_queue(void);

extern int bootblock_event_entry(void);

DECLARE BOOTBLOCK_TRANS transition_queue[MAX_TRANSITION_QUEUE];
DECLARE unsigned int transq_wrp INIT(0);
DECLARE unsigned int transq_rdp INIT(0);

#ifdef BROKEN_ON_TELLIES
typedef struct {
  unsigned int event_number;
  unsigned int event_code;
} EVENT_LOG;

#define MAX_EVENT_LOG 64
DECLARE EVENT_LOG event_logs[MAX_EVENT_LOG];
DECLARE unsigned int event_log_index INIT(0);
#endif



/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */




