// header file for REG_CMDS.H

/* Begin-Prologue */
#ifndef REG_CMDS_H
#define REG_CMDS_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#define INIT_ERR(x,y) ={(x),(y)}
#else
#define DECLARE extern
#define INIT(x)
#define INIT_ERR(x,y)
#endif
/* End-Prologue */

DECLARE int bootblock_nullcmd(char *, int);
DECLARE int bootblock_enum_info(char *, int);
DECLARE int bootblock_load(char *, int);
DECLARE int bootblock_scload(char *, int);
DECLARE int bootblock_index_info(char *, int);
DECLARE int bootblock_show_status(char *, int);
DECLARE int bootblock_show_support(char *, int);
DECLARE int bootblock_unlock_server(char *, int);
DECLARE int bootblock_log(char *, int);
DECLARE int bootblock_enum_tags(char *, int);
DECLARE int bootblock_file_info(char *, int);
DECLARE int bootblock_cli_authen(char *, int);
#define MAXCMD 18

/* error codes returned by command routines - convert to RISCOS error blocks in handler */
#define REGERR_SERVER_LOCKED           1
#define REGERR_BADFILE		       2
#define REGERR_SC_BUSY		       3


struct cmdent {
        int (*cmd_call)();      /* swi handler */
};

#ifdef PROTOTYPES_INTERNAL

struct cmdent bootblock_cmdent[MAXCMD + 1] = {
    bootblock_load,
    bootblock_scload,
    bootblock_enum_info,
    bootblock_index_info,
    bootblock_show_status,
    bootblock_show_support,
    bootblock_unlock_server,
    bootblock_log,
    bootblock_enum_tags,
    bootblock_file_info,
    bootblock_cli_authen,
    bootblock_nullcmd,
    bootblock_nullcmd,
    bootblock_nullcmd,
    bootblock_nullcmd,
    bootblock_nullcmd,
    bootblock_nullcmd,
    bootblock_nullcmd,
    0,
};


#else
extern struct cmdent bootblock_cmdent[MAXCMD+1];
#endif


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */






