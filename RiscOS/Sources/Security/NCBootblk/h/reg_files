// header file for REG_FILES.H
#ifndef __scinterface_h
#include "scinter.h"
#endif
/* Begin-Prologue */
#ifndef REG_FILES_H
#define REG_FILES_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
#define NCDIR_DIRS_BYTE         14
#define NCDIR_FILES_BYTE	15

#define INDEX_SC_FILENAME  "/4e43/20"   /* smartcard filename for index file */
#define FRESCO_SC_FILENAME "/4955/20"   /* smartcard filename for fresco data file */
#define NC_DIRNAME         "/4e43"      /* smartcard NC directory name */

#define SERIAL_FILENAME         "/20"
#define SERIAL_FILE_SIZE	8
#define SERIAL_BUFFER_SIZE      16

#define REG_FILES_BASE          0x20
#define MAX_REG_FILES	        16
#define MAX_FILE_CMDS           16

#define MAX_BB_FILE_CMD_FILENAME 16

typedef struct {
	int file_num;
	int size;
	int flags;
	int retries;
} REG_FILE;

typedef struct bb_file_command_struct {
	char filename[MAX_BB_FILE_CMD_FILENAME];
	unsigned int filenum;
	unsigned int offset;
	unsigned int bytes;
	struct bb_file_command_struct *next;
} BB_FILE_COMMAND;

DECLARE REG_FILE reg_file[MAX_REG_FILES];
DECLARE BB_FILE_COMMAND bb_file_command[MAX_FILE_CMDS];

DECLARE int ncdir_files INIT(0);
DECLARE int ncdir_dirs INIT(0);

DECLARE int bb_file_cmd_rptr INIT(0);
DECLARE int bb_file_cmd_wptr INIT(0);

DECLARE char serial_buffer[SERIAL_BUFFER_SIZE];

DECLARE int bootblock_loaded INIT(0);

DECLARE int total_smartcard_bytes INIT(0);
DECLARE int total_bootblock_bytes INIT(0);
DECLARE int total_index_bytes INIT(0);

DECLARE void reg_filename(char *, int);
DECLARE void reg_file_record(int, t_sc_stat *);
DECLARE void reg_file_reset(void);
DECLARE int reg_file_index_to_num(char *);
DECLARE int reg_file_find_name(unsigned int);
DECLARE void clear_file_cmds(void);
DECLARE int push_file_cmd(char *, unsigned int, unsigned int, unsigned int);
DECLARE int pop_file_cmd(void);
DECLARE int pop_last_file_cmd(void);
DECLARE int build_index_cmds(unsigned int, unsigned int, unsigned int);
DECLARE int add_index_cmds(unsigned int, unsigned int, unsigned int);
DECLARE int append_index_cmds(unsigned int);
/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

