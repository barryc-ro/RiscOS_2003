#ifndef SMCARD_H
#define SMCARD_H

#define VERSION 0x80000002

/* Define the values for manufacturer */

/*                        Btyes Available  ||   */
#define NCIprimitive                     0x00000000
/*
** 0x7F - 0x01 of the high order byte is available
**
** For example,
** #define NETChannelprimitive           0x01000000
** #define AOLprimitive                  0x02000000
*/

/* For "aggregates" */
#define NCIconstructed                   0x80000000

/* Define the values for System Area */
/*                        Btyes Available    || */
#define NCIBootBlockData                 0x00000000
#define NCIAdminData                     0x00010000
#define NCIClientSW                      0x00020000
#define NCIServerSW                      0x00030000
#define NCIIndex                         0x00040000
#define NCIDownLoad                      0x00080000

/*
** Define the actual 16 bit System Area values for NCI
** Define the primitive NCI System area values
*/
#define NCIBootBlockPrimData     NCIprimitive | NCIBootBlockData
#define NCIAdminPrimData         NCIprimitive | NCIAdminData
#define NCIClientSWPrimData      NCIprimitive | NCIClientSW
#define NCIServerSWPrimData      NCIprimitive | NCIServerSW
#define NCIIndexData             NCIprimitive | NCIIndex
#define NCIDownLoadData          NCIprimitive | NCIDownLoad

/*
** Define the constructed NCI System area values
*/
#define NCIBootBlockConstData NCIconstructed | NCIBootBlockData
#define NCIAdminConstData     NCIconstructed | NCIAdminData
#define NCIClientSWConstData  NCIconstructed | NCIClientSW
#define NCIServerSWConstData  NCIconstructed | NCIServerSW
#define NCIIndexConstData NCIconstructed | NCIIndex

/* define the datatype that we will use to store this information */
typedef unsigned int   NCI_Tag;                 /* A Tag is 32 bits */
typedef unsigned short NCI_Len;                 /* A len is 16 bits */
typedef unsigned char  NCI_Buf;                 /* */


/*
** define the individual fields for the Boot Block area
** Define the primitive field types
*/
/*                       bits Available      ||||*/

/*
** unique id for each ISP or corporation.
** - ID 0 is reserved for no enterprise specified.  This is used when
**   the NC Client talks to the relationship server for the first time.
**   Since it does not have any ISP already on the smart card, it
**   sends ENTERPRISE_ID of 0 to indicate this.
** - ID 1 is reserved for administration smart cards.  In other words,
**   this is indicating that NCI created this smart card.
*/
#define NCIEnterpriseIDType            0x00000001
/*
** ISP Name or corporation name.
*/
#define NCIEnterpriseNameType          0x00000002

#define NCIEnterpriseCertType          0x00000003
#define NCIBeginSignatureType          0x00000004
#define NCISignatureType               0x00000005

/*
** In the next section each tag is given for both the boot file
** system and the user file system.  If the boot file system is
** not specified the user file system values will be used as appropriate.
** For example, if both file system are the same type only the user
** file system needs to be specified.
*/

/*
** ftp, http, nfs (nfs is default if none is specified)
*/
#define NCIBootFileSystemTypeType      0x00000010
#define NCIUserFileSystemTypeType      0x00000011

/*
** While the server names are give in ascii format, they can
** be a IP address if name resolution is not possible.  (ie "207.88.25.184")
*/
#define NCIBootServerNameType          0x00000012
#define NCIUserServerNameType          0x00000013
#define NCIBootMountPointType          0x00000014
#define NCIUserMountPointType          0x00000015
#define NCIURLType                     0x00000016

/*
** Login user
*/
#define NCIAuthenticationUserType      0x00000017
#define NCIAuthenticationPassType      0x00000018

#define NCIBootAuthenticationUserType  0x00000019
#define NCIBootAuthenticationPassType  0x0000001A

#define NCIDomainNameType              0x00000020
#define NCIStaticIPAddressType         0x00000021
#define NCIHTTPProxyType               0x00000022
#define NCIFTPProxyType                0x00000023
#define NCIPrimaryDNSType              0x00000024
#define NCIBackupDNSType               0x00000025

#define NCIIAPIDType                   0x00000030
#define NCIPOPUserNameType             0x00000031
#define NCIPOPPasswordType             0x00000032
#define NCIPOPPhoneNumberType          0x00000033

#define NCIDialScriptType              0x00000040
#define NCIRuleType                    0x00000041
#define NCINewsType                    0x00000042
#define NCIMailTxType                  0x00000043
#define NCIMailRxType                  0x00000044
#define NCIEMailUserType               0x00000045
#define NCIEMailPassType               0x00000046
#define NCINetworkTimeType             0x00000047
#define NCIBackupTimeType              0x00000048
#define NCIDateType                    0x00000049
#define NCITimeType                    0x0000004A
#define NCITimeZoneType                0x0000004B

/* alternative 1-800 number */
#define NCIAlternative800Type          0x00000100
#define NCIBlankSpaceType              0x00000101
/*
** an adviser flag that indicates the entire smart card
** is ready only or a portion is read only.  Obviously, this
** is not enforced through any hardware means, but it should
** indicate to a responsible NC Client not to write to the
** entire smart card or portion.  An example of the use would be
** the administator smart card.  After NCI produces an administrator
** smart card, it would put this in the top of the index file
** indicating that the entire smart card is read only.  If the
** read only flag is used in the middle of a enterprise contents, for
** example, it would mean that only that part of the smart card
** is read only (I am not sure this is useful yet but it might be).
*/
#define NCIReadOnlyType                0x00000102

/*
** flag indicating a test field.  Interpretation of this field is
** none standard and should be skipped if not in the middle of a
** test.
*/
#define NCITestType                    0x00000103

/* Define the constructed field types */
#define NCIIAPConnectMatrixType        0x00000001
#define NCIIAPUnPwMatrixType           0x00000002
#define NCIGroupType                   0x00000003

/*
** Index file types
**
** format of entry is
** enterprise id      - 4 bytes (0 in the case of alternative
** file               - 2 bytes
** offset within file - 2 bytes
** len                - 2 bytes
**                -------------
**                     10 bytes
**/
#define NCIEnterpriseOffsetType        0x00000001
#define NCIAlternative800OffsetType    0x00000002

/*
** Index file constructed types.
*/
#define NCIEnterpriseGroupType         0x00000002

/*
** MIME type and server tags.
**
** 0 - managed access NC, data follows
** 1 - NC Not recognized
** 2 - NC recognized, but not managed access
*/
#define NCIServerStatusType            0x00000001
/*
** used for download contents from a server (relational or registration)
*/
#define NCISmartCardContentType        0x00000002
#define NCIRAMContentType              0x00000003
#define NCIEnterpriseMatrixType        0x00000004
#define NCIManufactureIDType           0x00000005
/*
** Format is a dot seperated hexidecimal string.
** For example,
** 0000.0000.00000000.00000000.00000000.00000000.000000000000
*/

/* Contruct the actual Tag values */

#define NCIEnterpriseIDTag   (NCIBootBlockData | NCIEnterpriseIDType)
#define NCIEnterpriseNameTag (NCIBootBlockData | NCIEnterpriseNameType)
#define NCIEnterpriseCertTag (NCIBootBlockData | NCIEnterpriseCertType)
#define NCIBeginSignatureTag (NCIBootBlockConstData | NCIBeginSignatureType)
#define NCISignatureTag      (NCIBootBlockData | NCISignatureType)
#define NCIBootFileSystemTypeTag (NCIBootBlockData | NCIBootFileSystemTypeType)
#define NCIUserFileSystemTypeTag (NCIBootBlockData | NCIUserFileSystemTypeType)
#define NCIBootServerNameTag  (NCIBootBlockData | NCIBootServerNameType)
#define NCIUserServerNameTag  (NCIBootBlockData | NCIUserServerNameType)
#define NCIBootMountPointTag  (NCIBootBlockData | NCIBootMountPointType)
#define NCIUserMountPointTag  (NCIBootBlockData | NCIUserMountPointType)
#define NCIURLTag                (NCIBootBlockData | NCIURLType)
#define NCIAuthenticationUserTag (NCIBootBlockData | NCIAuthenticationUserType)
#define NCIAuthenticationPassTag (NCIBootBlockData | NCIAuthenticationPassType)
#define NCIBootAuthenticationUserTag \
                           (NCIBootBlockData | NCIBootAuthenticationUserType)
#define NCIBootAuthenticationPassTag \
                           (NCIBootBlockData | NCIBootAuthenticationPassType)
#define NCIDomainNameTag       (NCIBootBlockData | NCIDomainNameType)
#define NCIStaticIPAddressTag  (NCIBootBlockData | NCIStaticIPAddressType)
#define NCIHTTPProxyTag        (NCIBootBlockData | NCIHTTPProxyType)
#define NCIFTPProxyTag         (NCIBootBlockData | NCIFTPProxyType)
#define NCIPrimaryDNSTag       (NCIBootBlockData | NCIPrimaryDNSType)
#define NCIBackupDNSTag        (NCIBootBlockData | NCIBackupDNSType)

#define NCIIAPIDTag            (NCIBootBlockData | NCIIAPIDType)
#define NCIPOPUserNameTag      (NCIBootBlockData | NCIPOPUserNameType)
#define NCIPOPPasswordTag      (NCIBootBlockData | NCIPOPPasswordType)
#define NCIPOPPhoneNumberTag   (NCIBootBlockData | NCIPOPPhoneNumberType)

#define NCIDialScriptTag       (NCIBootBlockData | NCIDialScriptType)
#define NCIRuleTag             (NCIBootBlockData | NCIRuleType)
#define NCINewsTag             (NCIBootBlockData | NCINewsType)
#define NCIMailTxTag           (NCIBootBlockData | NCIMailTxType)
#define NCIMailRxTag           (NCIBootBlockData | NCIMailRxType)
#define NCIEMailUserTag        (NCIBootBlockData | NCIEMailUserType)
#define NCIEMailPassTag        (NCIBootBlockData | NCIEMailPassType)

#define NCINetworkTimeTag        (NCIBootBlockData | NCINetworkTimeType)
#define NCIBackupTimeTag         (NCIBootBlockData | NCIBackupTimeType)
#define NCIDateTag               (NCIBootBlockData | NCIDateType)
#define NCITimeTag               (NCIBootBlockData | NCITimeType)
#define NCITimeZoneTag           (NCIBootBlockData | NCITimeZoneType)
#define NCIReadOnlyTag		 (NCIBootBlockData | NCIReadOnlyType)
/*
** Where date is in a ascii format YYYY:MM:DD
** and time is in a ascii format HH:MM:SS
**
** Time zones are -
** GMT-12:00 Eniwetok, Kwajlein
** GMT-11:00 Midway Island, Samoa
** GMT-10:00 Hawaii
** GMT-09:00 Alaska
** GMT-08:00 Pacific Time (US & Canada); Tijuana
** GMT-07:00 Arizona
** GMT-07:00 Mountain Time (US & Canada)
** GMT-06:00 Central Time (US & Canada)
** GMT-06:00 Mexico City, Tegucigalpa
** GMT-06:00 Saskatchewan
** GMT-05:00 Bogota, Lima
** GMT-05:00 Indiana (East)
** GMT-04:00 Atlantic Time (Canada)
** GMT-04:00 Caracas, La Paz
** GMT-03:00 Brasilia
** GMT-03:00 Buenos Aires, Georgetown
** GMT-02:00 Mid-Atlantic
** GMT-01:00 Azores, Cape Verde Is.
** GMT       Greenwich Mean Time; Dublin Edinburgh, London
** GMT       Monrovia, Casablanca
** GMT+01:00 Berlin, Stockholm, Rome, Bern, Brussels, Viena, Amsterdam
** GMT+01:00 Lisbon, Warsaw
** GMT+01:00 Paris, Madrid
** GMT+01:00 Progue
** GMT+02:00 Athens, Helsinki, Istanbul
** GMT+02:00 Cairo
** GMT+02:00 Eastern Europe
** GMT+02:00 Harare, Pretoria
** GMT+02:00 Israel
** GMT+03:00 Moscow, St. Petersburg
** GMT+03:30 Tehran
** GMT+04:00 Abu Dhabi, Muscat, Tbilsi, Kazan, Volgograd
** GMT+04:30 Kabul
** GMT+05:00 Islamabad, Karachi, Ekaterinburg, Tashkent
** GMT+05:30 Bombay, Calcutta, Madras, New Delhi, Colombo
** GMT+06:00 Almaty, Dhaka
** GMT+07:00 Bangkok, Jakarta, Hanoi
** GMT+08:00 Bejiing, Chongqing, Urumqi
** GMT+08:00 Hong Kong, Perth, Singapore, Taipei
** GMT+09:00 Tokyo,Osaka, Sapporo, Seoul, Yakutsk
** GMT+09:30 Adalaide
** GMT+09:30 Darwin
** GMT+10:00 Brisbane, Melbourne, Syndney
** GMT+10:00 Guam, Port Maresby, Valdivostok
** GMT+10:00 Hobart
** GMT+11:00 Magadan, Solomon Is, New Caledonia
** GMT+12:00 Fiji, Kamchatka, Marshall Is.
** GMT+12:00 Welington, Auckland
*/
typedef unsigned char NCI_TimeZone;
#define GMT_1200_Eniwetok         (NCI_TimeZone)1
#define GMT_1100_Midway_Island    (NCI_TimeZone)2
#define GMT_1000_Hawaii           (NCI_TimeZone)3
#define GMT_0900_Alaska           (NCI_TimeZone)4
#define GMT_0800_Pacific_Time     (NCI_TimeZone)5
#define GMT_0700_Arizona          (NCI_TimeZone)6
#define GMT_0700_Mountain_Time    (NCI_TimeZone)7
#define GMT_0600_Central_Time     (NCI_TimeZone)8
#define GMT_0600_Mexico_City      (NCI_TimeZone)9
#define GMT_0600_Saskatchewan     (NCI_TimeZone)10
#define GMT_0500_Bogota           (NCI_TimeZone)11
#define GMT_0500_Indiana          (NCI_TimeZone)12
#define GMT_0400_Atlantic_Time    (NCI_TimeZone)13
#define GMT_0400_Caracas          (NCI_TimeZone)14
#define GMT_0300_Brasilia         (NCI_TimeZone)15
#define GMT_0300_Buenos_Aires     (NCI_TimeZone)16
#define GMT_0200_Mid_Atlantic     (NCI_TimeZone)17
#define GMT_0100_Azores           (NCI_TimeZone)18
#define GMT_0000_Greenwich_Mean_Time (NCI_TimeZone)19
#define GMT_0000_Monrovia         (NCI_TimeZone)20
#define GMT_0100_Berlin           (NCI_TimeZone)21
#define GMT_0100_Lisbon           (NCI_TimeZone)22
#define GMT_0100_Paris            (NCI_TimeZone)23
#define GMT_0100_Progue           (NCI_TimeZone)24
#define GMT_0200_Athens           (NCI_TimeZone)25
#define GMT_0200_Cairo            (NCI_TimeZone)26
#define GMT_0200_Eastern_Europe   (NCI_TimeZone)27
#define GMT_0200_Harare           (NCI_TimeZone)28
#define GMT_0200_Israel           (NCI_TimeZone)29
#define GMT_0300_Moscow           (NCI_TimeZone)30
#define GMT_0330_Tehran           (NCI_TimeZone)31
#define GMT_0400_Abu_Dhabi        (NCI_TimeZone)32
#define GMT_0430_Kabul            (NCI_TimeZone)33
#define GMT_0500_Islamabad        (NCI_TimeZone)34
#define GMT_0530_Bombay           (NCI_TimeZone)35
#define GMT_0600_Almaty           (NCI_TimeZone)36
#define GMT_0700_Bangkok          (NCI_TimeZone)37
#define GMT_0800_Bejiing          (NCI_TimeZone)38
#define GMT_0800_Hong_Kong        (NCI_TimeZone)39
#define GMT_0900_Tokyo            (NCI_TimeZone)40
#define GMT_0930_Adalaide         (NCI_TimeZone)41
#define GMT_0930_Darwin           (NCI_TimeZone)42
#define GMT_1000_Brisbane         (NCI_TimeZone)43
#define GMT_1000_Guam             (NCI_TimeZone)44
#define GMT_1000_Hobart           (NCI_TimeZone)45
#define GMT_1100_Magadan          (NCI_TimeZone)46
#define GMT_1200_Fiji             (NCI_TimeZone)47
#define GMT_1200_Welington        (NCI_TimeZone)48

#define NCIEnterpriseNameTag     (NCIBootBlockData | NCIEnterpriseNameType)

#define NCIAlternative800Tag     (NCIBootBlockData | NCIAlternative800Type)
#define NCIBlankSpaceTag         (NCIBootBlockData | NCIBlankSpaceType)

/* Define the constructed field actual tag values */
#define NCIIAPConnectMatrixTag (NCIBootBlockConstData | NCIIAPConnectMatrixType)
#define NCIIAPUnPwMatrixTag    (NCIBootBlockConstData | NCIIAPUnPwMatrixType)
#define NCIGroupTag            (NCIBootBlockConstData | NCIGroupType)

#define NCIEnterpriseGroupTag  (NCIIndexConstData | NCIEnterpriseGroupType)
#define NCIEnterpriseOffsetTag (NCIIndexData     | NCIEnterpriseOffsetType)
#define NCIAlternative800OffsetTag (NCIIndexData | NCIAlternative800OffsetType)

/* define the individual fields for the Admin area */
#define NCIAdminType                 0x00000001
#define NCIEnterprisePrivateKeyType  0x00000002

/*
** The presence of this field indicates that this is an administrators
** SmartCard.
*/


/* Contruct the actual Tag values */

#define NCIAdminTag                (NCIAdminData | NCIAdminType)
#define NCIEnterprisePrivateKeyTag (NCIAdminData|NCIEnterprisePrivateKeyType)

#define NCIServerStatusTag        (NCIDownLoadData | NCIServerStatusType)
#define NCISmartCardContentTag    (NCIDownLoadData | NCISmartCardContentType)
#define NCIRAMContentTag          (NCIDownLoadData | NCIRAMContentType)
#define NCIEnterpriseMatrixTag    (NCIDownLoadData | NCIEnterpriseMatrixType)
#define NCIManufactureIDTag       (NCIDownLoadData | NCIManufactureIDType)

/*
** The NC Client downloads the following to the relationship server
** when a connection is established.
** <NCIManufactureIDTag><len><manufactureID>
** <NCIEnterpriseIDTag><4><0 on first call - ID on card on subsequent calls>
**
** The relationship server will download either both smart card
** contents and ram contents or just ram contents depending on
** the enterprise id.  If the enterprise id is 0 (first call) both
** contents are downloaded.
**
** The format for the NCIManufactureIDTag is in hexidecimal string format
** with  each piece seperated by a dot.
** For example,
**
** 0000.0000.00000000.00000000.00000000.00000000.000000000000
*/

/*
** Format of HTML page (ISP example)
**
** Content_type: application/nc-smartcard
**\n --- Blank line -----
** <NCIServerStatusTag><4><1>
** ---------------------------------------- Smart Contents --------
** <NCISmartCardContentTag><len>
** <NCIBeginSignatureTag><len until SignatureTag>
** <NCIEnterpriseIDTag><4><num>
** <NCIAuthenticationUserNameTag><len><username>
** <NCIAuthenticationPasswordTag><len><passwd>
** <NCIUserMountPointTag><len><r/w mount>
** <NCIServerNameTag><len><nfs server>
** <NCIURLTag><len><url>
** <NCISignatureTag><len><long num>
** ---------------------------------------- RAM Contents --------
** <NCIRAMContentTag><len>
** <NCIEnterpriseIDMatrix><len of all>
** <NCIGroupTag><len of all>
** <NCIEnterpriseIDTag><4><num>
** <NCIIAPConnectMatrix><len of 1&2>
** <NCIGroupTag><len of 1>
1>   <NCIIAPIDTag><4><num><NCIPOPPhoneNumber><7><xxxxxxx>
**   <NCIPrimaryDNSTag><4><IP address><NCIBackUpDNSTag><4><IP address>
**   <NCIPOPUserNameTag><len><username><NCIPOPPassword><len><passwd>
**   <NCIRulesTag><num><rules><NCIDialScriptTag><num><script>
** <NCIGroupTag><len of 2>
2>   <NCIIAPIDTag><4><num><NCIPOPPhoneNumber><7><xxxxxxx>
**   <NCIPrimaryDNSTag><4><IP address><NCIBackUpDNSTag><4><IP address>
**   <NCIPOPUserNameTag><len><username><NCIPOPPassword><len><passwd>
**   <NCIRulesTag<num><rules><NCIDialScriptTag><num><script>
**  <NCIEnterpriseCertTag><num><long num>
** }
**
** (Corporate example)
** Content_type: application/nc-smartcard
**\n ---- Blank line -----
** <NCISmartCardContentTag><len>
** <NCIEnterpriseIDTag><4><num>
** <NCIPOPUserNameTag><len><username><NCIPOPPasswordTag><len><passwd>
** <NCIPOPPhoneNumberTag><7><xxxxxxx>
** <NCIPrimaryDNSTag><4><IP><NCIBackUpDNSTag><4><IP>
** <NCIDialScriptTag><len><script>
** <NCIAuthenticationUserNameTag><len><username>
** <NCIAuthenticationPasswordTag><len><passwd>
** <NCIUserMountPointTag><len><r/w mount>
** <NCIURLTag><len><url>
** <NCIServerNameTag><len><nfs server>
**
** The administration card is never downloaded but looks like
** --------------------------------------------------------------------
**
** <NCIBeginSignatureTag><len until Sign>
** <NCIAdminTag><4><0x00000001>
** <NCIEnterpriseIDTag><4><id>
** <NCIEnterpriseNameTag><len><name>
** <NCIEnterprisePrivateKeyTag><len><long num>
** <NCISignatureTag><len><long num>
** <NCIEnterpriseCertTag><len><NCI Cert>
** --------------------------------------------------------------------
**
** The index file should look like
** <version>
** <NCIEnterpriseGroupTag><len>
** <NCIEnterpriseOffsetTag><10><Enterprise ID1,file,offset,len ent. contents>
** <NCIEnterpriseOffsetTag><10><Enterprise ID2,file,offset,len ent. contents>
*/

typedef unsigned short int_16;
typedef unsigned int   int_32;
typedef unsigned char  int_8;

/*
** note this is box specific.
*/
#ifndef MAX_SERIAL_INFO
#define MAX_SERIAL_INFO 6
#endif


/*
** Hardware serial number format structure
*/
struct HardwareSerial
{
 int_16 serial_version; /* VER=1, layout of these fields */
 int_16 serial_type;    /* type of serial number, i.e. etherid, manufacturer
                        ** assigned, other network ID */
 int_32 manufacture_ID; /* uniquely assigned by n|c to each manufacturer */
 int_32 model;          /* unique model # for each logically different
                            system, assigned by n|c manufacturer */
 int_32 BIOS_version;   /* in n|c defined format, used for DCHP */
 int_32 ncos_version;   /* in n|c defined format, used for DCHP */
 int_8  serial_len;     /* length of the serial number, for easy upward
                           compatibility */
 int_8  serial_info[MAX_SERIAL_INFO];
                        /* variable length array for serial number, 6 bytes
                        ** for ether id,  ? bytes for others */
};
typedef struct HardwareSerial HardwareSerial;


#endif
