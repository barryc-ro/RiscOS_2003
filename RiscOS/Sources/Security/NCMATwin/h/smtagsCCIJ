// header file for NCMA_CACHE.H

/* Begin-Prologue */
#ifndef NCMA_CACHE_H
#define NCMA_CACHE_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */


#define MAX_TAG_CACHE    72
#define TAG_CACHE_SIZE	 8192

#define TAG_MAPPING_STRING    1          /* a string (not terminated) */
#define TAG_MAPPING_INT	      2		 /* a big endian integer */

#define TAG_MAPPING_HOST      3          /* a hostname or textual IP address string */
#define TAG_MAPPING_IP        4		 /* a big endian IP address word */
#define TAG_MAPPING_PROXY     5		 /* a string, optional :port terminator */

#define TAG_MAPPING_SOAK      6          /* special NCITestTag -> soak test mapping */
#define TAG_MAPPING_PLIP      7		 /* special NCITestTag -> plip boot mapping */


#define TEST_TAG_SOAK         4          /* stupid values to get around the fact that */
#define TEST_TAG_PLIP	      8		 /* this tag is duplicated by browsermode */

#define TAG_MAPPING_PHONE     9
#define TAG_MAPPING_HTTP_URL  10

typedef struct {
  const char *tag;
  unsigned int nci_tag;
  unsigned int mapping;
  char *val;
  int bytes;
} TAG_ENTRY;

typedef struct {
  char *base;                     /* base of cache workspace */
  char *free;                     /* ptr to next free entry in tag wspc */
  int tags;			  /* no. of tags in cache */
  int bytes;			  /* bytes used in cache wspc */
  int max;			  /* max. size of cache wspc */
  int valid;			  /* is the cache ready to support tag reads? */
  TAG_ENTRY tag[MAX_TAG_CACHE];	  /* tag index, mappings, etc */
} TAG_CACHE;


#ifdef PROTOTYPES_INTERNAL
  TAG_CACHE tag_cache = {
  NULL,
  NULL,
  0,
  0,
  TAG_CACHE_SIZE,
  0,
  {
    "MAIL_RX", FUNAI_POP_SERVER, TAG_MAPPING_HOST, NULL, 0,
    "MAIL_TX", FUNAI_SMTP_SERVER, TAG_MAPPING_HOST, NULL, 0,
    "PSTN_NUM", FUNAI_PHONE_NUMBER, TAG_MAPPING_STRING, NULL, 0,
    "DNS_PRIMARY", FUNAI_DNS1, TAG_MAPPING_IP, NULL, 0,
    "DNS_BACKUP", FUNAI_DNS2, TAG_MAPPING_IP, NULL, 0,
    "TIME_PRIMARY", FUNAI_TIMESERVER, TAG_MAPPING_HOST, NULL, 0,
    "HTTP_PROXY", FUNAI_PROXY, TAG_MAPPING_PROXY, NULL, 0,
    "WAIS_PROXY", FUNAI_PROXY, TAG_MAPPING_PROXY, NULL, 0,
    "FTP_PROXY", FUNAI_PROXY, TAG_MAPPING_PROXY, NULL, 0,
    "GOPHER_PROXY", FUNAI_PROXY, 0, NULL, 0,
    "LOGIN_ID", FUNAI_ACCOUNT_ID, TAG_MAPPING_STRING, NULL, 0,
    "LOGIN_SECRET", FUNAI_ACCOUNT_PASSWORD, TAG_MAPPING_STRING, NULL, 0,
    "LOGIN_USERNAME", FUNAI_EMAIL_ID, TAG_MAPPING_STRING, NULL, 0,
    "LOGIN_PASSWD", FUNAI_EMAIL_PASSWORD, TAG_MAPPING_STRING, NULL, 0,
    "EMAIL_ADDR", FUNAI_EMAIL_ADDRESS, TAG_MAPPING_STRING, NULL, 0,
    "URL_INIT", FUNAI_URL, TAG_MAPPING_STRING, NULL, 0,
    "GATEWAY", FUNAI_GATEWAY, TAG_MAPPING_HOST, NULL, 0,
    "FUNAI_CARD", FUNAI_CARD, TAG_MAPPING_INT, NULL, 0,
    "EMAIL_URL", FUNAI_MAIL_URL, TAG_MAPPING_STRING, NULL, 0,
    NULL, 0, NULL, 0
  }
};
#else
extern TAG_CACHE tag_cache;
#endif

DECLARE int cache_smartcard(void);
DECLARE int cache_info(void);
DECLARE int cache_enquiry(char *, char *, int);
DECLARE char *cache_ptr(char *, int *);
DECLARE void unlock_cache(void);
DECLARE int build_ram_cache(void);
DECLARE int cache_write(char *, char *, int);
DECLARE int reset_cache(void);


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

