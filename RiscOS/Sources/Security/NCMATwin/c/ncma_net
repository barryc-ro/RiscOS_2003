#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "ncma_utils.h"
#include "ncma_scard.h"
#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_net.h"
#include "smtagsCCIJ.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_url.h"
#include "ncma_funai.h"
#include "smcardCCIJ.h"
#include "init.h"

#include "DBUG.h"



/* Forward function prototypes */
int ncma_network_init_modem(int mode);
int ncma_network_init_ethernet(int mode);
bool add_resolver_to_system_variable(int dns);

NETWORK_INTERFACE_TYPE interface_type = NO_INTERFACE;
bool post_initialisation_run = false;


int ip_ntos(char *b, char *i)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "ip_ntos: word 0x%x\n", *(int *)i);
    sprintf(b, "%d.%d.%d.%d",
      (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3));
    return(0);
}




/* mode is 0 for dial from ROM. 1 for dial from RAM */
int ncma_network_init_modem(int mode) /* set resolver config */
    			    /* set browser proxy */
    			    /* limit browser access */
    			    /* remount SMURFS */
{
    char buff[128];
    int dns[2] = {0,0}; /* Initialise the 2 integers to 0 */
    char *p;
    char *tmp;
    int l;
    _kernel_swi_regs r;

    int email;

    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: got flags NCMA_NET_%s NCMA_NET_%s_DIAL\n",
    				(mode & NCMA_NET_ROM)?"ROM":"RAM",
    				(mode & NCMA_NET_POST_DIAL)?"POST":"PRE");

    if(cache_enquiry("DNS_PRIMARY", (char *)&dns[0], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: cache enquiry failed for DNS_PRIMARY\n");
        return(-1);
    }

    if(cache_enquiry("DNS_BACKUP", (char *)&dns[1], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: cache enquiry failed for DNS_BACKUP\n");
        return(-1);
    }

    ip_ntos(buff, (char *)&dns[0]);
    p = buff;
    l = strlen(p);
    p += l;
    *p++ = 0x20;
    ip_ntos(p, (char *)&dns[1]);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_modem: setting resolvers to %s\n", buff);


    if(write_os_var(RESOLVER_ENV_VAR_NAME, buff, strlen(buff))<0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_modem: failed setting resolvers\n");
        return(-1);
    }

    /* new plan: there's no DOMAIN tag on the Funai cards, so we can't set a default local resolver
    	domain for the resolver to use when it gets a 'short' hostname, eg "www". Simon's plan is
    	to set it to the domain name part of the URL tag, although I guess we could put any crap
    	in there, we'd just get 'www.crap.crap' failing all the time.
    */

    memset(buff, 0, 128);
    if((tmp = (char *)fetch_usc_url(NULL)) == NULL) { // fetch URL barfed
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: couldn't read URL tag to set resolver domain!\n");
    }
    else
    {
	char *dot, *slash, *colon, *start;
	int len;
	/* expected form 'www.host.com:80/path/' */

	dot = strchr(tmp, '.');
	if (dot)
	{
	    slash = strchr(tmp, '/');
	    colon = strchr(tmp, ':');

	    start = dot+1;

	    len = (colon && (slash == NULL || colon < slash)) ? colon - start : slash ? slash - start : strlen(start);
	    if (len <= 0)
		/* somebody has probably put http://www... on the card */
		strcpy(buff, DEFAULT_DOMAIN_NAME);
	    else
		strncpy(buff, start, len);
	}
	else
	{
	    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: couldn't determine domain from URL tag, using %s\n", DEFAULT_DOMAIN_NAME);
	    strcpy(buff, DEFAULT_DOMAIN_NAME);
	}
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_modem: setting resolver local domain to %s\n", buff);
    if(write_os_var(DOMAIN_ENV_VAR_NAME, buff, strlen(buff)) < 0) {
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: failed setting domain\n");
    }

    // kick the resolver
    r.r[0] = (int)"ResolverConfig";
    if(_kernel_swi(0x5, &r, &r)!=NULL) { /* OS_Cli */
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: resolver config OSCLI failed - DNS disabled\n");
    }


    /* configure browser email osvar */
    memset(buff, 0, 128);
    strcpy(buff, "http://"); // Funai cards don't store scheme
    if((email=cache_enquiry("EMAIL_URL", buff+7, 128-7))<0) { // '7' is length of "http://"
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: cache enquiry failed for EMAIL_URL\n");
        return(-1);
    }

    if(email>0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_modem: Browser email set to \"%s\"\n", buff);
        if(write_os_var(EMAIL_SRV_VAR_NAME, buff, strlen(buff))<0) {
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: failed setting Browser email var\n");
        }
    }
    else {
	/* delete variable if nothing was set on the card */
        write_os_var(EMAIL_SRV_VAR_NAME, NULL, -1);
    }

    /* do other browser stuff */

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_modem: configuring browser\n");

    if(browser_proxy()<0)
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_modem: browser proxy/config failed\n");

    return(0);
}





/* mode is 0 for dial from ROM. 1 for dial from RAM */
/* Note that this initial version is functionally identical to the modem init routine. When we get ethernet Funai 3
    boxes it chould be changed to exhibit the required behaviour. */
int ncma_network_init_ethernet(int mode) /* set resolver config */
    			    /* set browser proxy */
    			    /* limit browser access */
    			    /* remount SMURFS */
{
    static int dns[2] = {0,0}; /* Initialise the 2 integers to 0 */
    char buff[128];
    char *tmp;
    _kernel_swi_regs r;

    int email;

    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: got flags NCMA_NET_%s NCMA_NET_%s_DIAL\n",
    				(mode & NCMA_NET_ROM)?"ROM":"RAM",
    				(mode & NCMA_NET_POST_DIAL)?"POST":"PRE");


    /* Deal with the DNS_PRIMARY smartcard tag.
        Note that Inet$Resolver may already contain up to three IP addresses from DHCP/BOOTP or
        from static IP settings in NVRAM.
        We append the DNS_PRIMARY address from the smartcard to Inet$Resolvers if we have less
        than 3 DNS addresses already.  PS 21 Dec 99  */
    if(cache_enquiry("DNS_PRIMARY", (char *)&dns[0], 4)<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: cache enquiry failed for DNS_PRIMARY\n");
    }
    else
    {
      add_resolver_to_system_variable(dns[0]);
    }

     /* Deal with the DNS_BACKUP smartcard tag.
        Rule : Append to DNS servers list in Inet$Resolvers if it cvurrently has less than 3 DNS addresses */
    if(cache_enquiry("DNS_BACKUP", (char *)&dns[1], 4)<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: cache enquiry failed for DNS_BACKUP\n");
    }
    else
    {
      add_resolver_to_system_variable(dns[1]);
    }

    /* new plan: there's no DOMAIN tag on the Funai cards, so we can't set a default local resolver
    	domain for the resolver to use when it gets a 'short' hostname, eg "www". Simon's plan is
    	to set it to the domain name part of the URL tag, although I guess we could put any crap
    	in there, we'd just get 'www.crap.crap' failing all the time.
    */

    memset(buff, 0, 128);
    if((tmp = (char *)fetch_usc_url(NULL)) == NULL) { // fetch URL barfed
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: couldn't read URL tag to set resolver domain!\n");
    }
    else
    {
	char *dot, *slash, *colon, *start;
	int len;
	/* expected form 'www.host.com:80/path/' */

	dot = strchr(tmp, '.');
	if (dot)
	{
	    slash = strchr(tmp, '/');
	    colon = strchr(tmp, ':');

	    start = dot+1;

	    len = (colon && (slash == NULL || colon < slash)) ? colon - start : slash ? slash - start : strlen(start);
	    if (len <= 0)
		/* somebody has probably put http://www... on the card */
		strcpy(buff, DEFAULT_DOMAIN_NAME);
	    else
		strncpy(buff, start, len);
	}
	else
	{
	    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: couldn't determine domain from URL tag, using %s\n", DEFAULT_DOMAIN_NAME);
	    strcpy(buff, DEFAULT_DOMAIN_NAME);
	}
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_ethernet: setting resolver local domain to %s\n", buff);
    if(write_os_var(DOMAIN_ENV_VAR_NAME, buff, strlen(buff)) < 0) {
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: failed setting domain\n");
    }

    // kick the resolver
    r.r[0] = (int)"ResolverConfig";
    if(_kernel_swi(0x5, &r, &r)!=NULL) { /* OS_Cli */
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: resolver config OSCLI failed - DNS disabled\n");
    }


    /* configure browser email osvar */
    memset(buff, 0, 128);
    strcpy(buff, "http://"); // Funai cards don't store scheme
    if((email=cache_enquiry("EMAIL_URL", buff+7, 128-7))<0) { // '7' is length of "http://"
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: cache enquiry failed for EMAIL_URL\n");
        return(-1);
    }

    if(email>0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_ethernet: Browser email set to \"%s\"\n", buff);
        if(write_os_var(EMAIL_SRV_VAR_NAME, buff, strlen(buff))<0) {
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: failed setting Browser email var\n");
        }
    }
    else {
	/* delete variable if nothing was set on the card */
        write_os_var(EMAIL_SRV_VAR_NAME, NULL, -1);
    }

    /* do other browser stuff */

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init_ethernet: configuring browser\n");

    if(browser_proxy()<0)
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init_ethernet: browser proxy/config failed\n");

    return(0);
}





/* This routine acts as a 'wrapper'. It calls either the network or modem
version depending on what 'interface_type' is set to. */
int ncma_network_init(int mode)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init(): interface_type = %d\n", interface_type);

  if (interface_type == ETHERNET_INTERFACE)
  {
    return (ncma_network_init_ethernet(mode));
  }

  if (interface_type == MODEM_INTERFACE)
  {
    return (ncma_network_init_modem(mode));
  }

  if (interface_type == NO_INTERFACE)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init(): Error - no interface set.\n");
  }

  return (0);
}


/* This routine id called to add a DNS to the resolver system variable. The
    system variable can only hold a maximum of 3 different DNS's.
  It returns TRUE if the DNS was successfully added, FALSE otherwise. */
bool add_resolver_to_system_variable(int dns)
{
    /* Convert from an integer to a DNS-type '.'ed string. */
    #define DNS_BUFFER_SIZE 256
    static char dns_address_string[DNS_BUFFER_SIZE];
    static char dns_sysvar_string[DNS_BUFFER_SIZE];

    DBUG_PRINTF(DBUG_LVL_DIAG, "add_resolver_to_system_variable: dns = %d\n", dns);

    ip_ntos(dns_address_string, (char *)&dns);

    DBUG_PRINTF(DBUG_LVL_DIAG, "add_resolver_to_system_variable: DNS integer %d converted to string %s\n",dns, dns_address_string);
    /* Read the DNS system variable string */
    if (read_os_var(RESOLVER_ENV_VAR_NAME, dns_sysvar_string,  DNS_BUFFER_SIZE)<0)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "add_resolver_to_system_variable: Error reading system variable '%s'\n", RESOLVER_ENV_VAR_NAME);
      return (false);
    }
    else
    {
      /* If it has 2 or less dns's in it, append the new one to the list. */
      static unsigned int dns_count = 0;
      static unsigned int loop = 0;
      DBUG_PRINTF(DBUG_LVL_DIAG, "add_resolver_to_system_variable: System variable '%s' is : %s\n", RESOLVER_ENV_VAR_NAME, dns_sysvar_string);
      for (loop = 0; loop <=strlen(dns_sysvar_string); loop++)
      {
        if (dns_sysvar_string[loop] == ' ')
        {
          dns_count++;
        }
      }
      if (dns_count < 2)
      {
        /* Append the DNS off the smartcard onto the system variable. */
        strcat(dns_sysvar_string, " ");
        strcat(dns_sysvar_string, dns_address_string);
        /* Now write the updated system variable back.*/
        if(write_os_var(RESOLVER_ENV_VAR_NAME, dns_sysvar_string, strlen(dns_sysvar_string))<0)
        {
          DBUG_PRINTF(DBUG_LVL_ERROR, "add_resolver_to_system_variable: failed setting new resolvers to %s\n", dns_sysvar_string);
          return (false);
        }
        else
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "add_resolver_to_system_variable: Set new resolvers to %s\n", dns_sysvar_string);
        }
      }
      else
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "add_resolver_to_system_variable: More than two DNS's already in the system variable. Ignoring the new one.\n");
        return (false);
      }
    }

    return (true);
}
