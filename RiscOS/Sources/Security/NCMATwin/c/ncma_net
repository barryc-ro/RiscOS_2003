#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "ncma_utils.h"
#include "ncma_scard.h"
#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_net.h"
#include "smtagsCCIJ.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_url.h"
#include "ncma_funai.h"
#include "smcardCCIJ.h"

#include "DBUG.h"

int ip_ntos(char *b, char *i)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "ip_ntos: word 0x%x\n", *(int *)i);
    sprintf(b, "%d.%d.%d.%d",
      (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3));
    return(0);
}

/* mode is 0 for dial from ROM. 1 for dial from RAM */
int ncma_network_init(int mode) /* set resolver config */
    			    /* set browser proxy */
    			    /* limit browser access */
    			    /* remount SMURFS */
{
    char buff[128];
    int dns[2];
    char *p;
    char *tmp;
    int l;
    _kernel_swi_regs r;

    int email;

    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: got flags NCMA_NET_%s NCMA_NET_%s_DIAL\n",
    				(mode & NCMA_NET_ROM)?"ROM":"RAM",
    				(mode & NCMA_NET_POST_DIAL)?"POST":"PRE");

    if(cache_enquiry("DNS_PRIMARY", (char *)&dns[0], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_PRIMARY\n");
        return(-1);
    }

    if(cache_enquiry("DNS_BACKUP", (char *)&dns[1], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_BACKUP\n");
        return(-1);
    }

    ip_ntos(buff, (char *)&dns[0]);
    p = buff;
    l = strlen(p);
    p += l;
    *p++ = 0x20;
    ip_ntos(p, (char *)&dns[1]);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting resolvers to %s\n", buff);


    if(write_os_var(RESOLVER_ENV_VAR_NAME, buff, strlen(buff))<0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: failed setting resolvers\n");
        return(-1);
    }

    /* new plan: there's no DOMAIN tag on the Funai cards, so we can't set a default local resolver
    	domain for the resolver to use when it gets a 'short' hostname, eg "www". Simon's plan is
    	to set it to the domain name part of the URL tag, although I guess we could put any crap
    	in there, we'd just get 'www.crap.crap' failing all the time.
    */
    
    memset(buff, 0, 128);
    if((tmp = (char *)fetch_usc_url(NULL)) == NULL) { // fetch URL barfed
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: couldn't read URL tag to set resolver domain!\n");
    }
    else
    {
	char *dot, *slash, *colon, *start;
	int len;

	dot = strchr(tmp, '.');
	if (dot)
	{
	    slash = strchr(tmp, '/');
	    colon = strchr(tmp, ':');
	    
	    start = dot+1;
	    len = (colon && (slash == NULL || colon < slash)) ? colon - start : slash ? slash - start : strlen(start);
	    strncpy(buff, start, len);
	}
	else
	{
	    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: couldn't determine domain from URL tag, using %s\n", DEFAULT_DOMAIN_NAME);
	    strcpy(buff, DEFAULT_DOMAIN_NAME);
	}
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting resolver local domain to %s\n", buff);
    if(write_os_var(DOMAIN_ENV_VAR_NAME, buff, strlen(buff)) < 0) {
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting domain\n");
    }
    
    // kick the resolver
    r.r[0] = (int)"ResolverConfig";
    if(_kernel_swi(0x5, &r, &r)!=NULL) { /* OS_Cli */
	DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: resolver config OSCLI failed - DNS disabled\n");
    }

    
    /* configure browser email osvar */
    memset(buff, 0, 128);
    strcpy(buff, "http://"); // Funai cards don't store scheme
    if((email=cache_enquiry("EMAIL_URL", buff+7, 128-7))<0) { // '7' is length of "http://"
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for EMAIL_URL\n");
        return(-1);
    }

    if(email>0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: Browser email set to \"%s\"\n", buff);
        if(write_os_var(EMAIL_SRV_VAR_NAME, buff, strlen(buff))<0) {
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting Browser email var\n");
        }
    }
    else {
	/* delete variable if nothing was set on the card */
        write_os_var(EMAIL_SRV_VAR_NAME, NULL, -1);
    }

    /* do other browser stuff */

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: configuring browser\n");

    if(browser_proxy()<0)
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser proxy/config failed\n");

    return(0);

}
