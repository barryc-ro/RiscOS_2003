/* ncma_tags.c - handle tags in funky Funai format */
#include <stdio.h>
#include <string.h>

#define PROTOTYPES_INTERNAL
#include "ncma_tags.h"
#include "DBUG.h"

/* find a tag in a given block, starting at address 'offset' in block if given
   return pointer to tag value and size

   'offset' must be the result of a previous call to this routine, ie it points to a
   tag VALUE not to the tag itself

   this routine will skip tags which don't match - this includes aggregate tags, ie
   you can only search for tags in the current nest level

*/
unsigned char *find_tag_in_block(unsigned char *ptr, unsigned int bytes,
	      			 unsigned int tag, unsigned int *ret, unsigned char *start)
{
    int skip = 0;
    int i;
    unsigned char rtag;

    int bytes_left;

    bytes_left = (int)bytes;

    //DBUG_PRINTF(DBUG_LVL_DIAG, "find_tag_in_block: tag 0x%x in block 0x%x (%d bytes) start at 0x%x\n",
      //			       tag, ptr, bytes_left, start);

    if((start>=ptr) && (start<(ptr+bytes_left))) { /* valid offset */
      skip = *(start - 1); /* read len of tag data we're pointing at (length is previous byte) */
      bytes_left -= (start-ptr)+skip; /* recalc bytes remaining */
      ptr = start+skip; /* jump ahead */
      //DBUG_PRINTF(DBUG_LVL_DIAG, "find_tag_in_block: offset recalc: block 0x%x (%d bytes)\n",
      	//			 ptr, bytes_left);
    }

    while(bytes_left>0) {
        if((rtag = *ptr) == tag) { /* got it */
          *ret = (int)*(ptr + 1); /* writeback length */
          return(ptr+2); // return data
        } else {
          i = 2 + (int)*(ptr+1);
          bytes_left -= i;
          ptr += i;
          //DBUG_PRINTF(DBUG_LVL_DIAG, "find_tag_in_block: skipping tag 0x%x (6 + %d bytes) %d bytes remaining\n", rtag, i-6, bytes_left);
        }
    }
    return(NULL);
}






