/* ncma_bootb.c - deal with all aspects of bootblocks, enterprise blocks etc.
                  whether in RAM, NVRAM, or on the smartcard
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "ncma_bootb.h"
#define PROTOTYPES_INTERNAL
#include "ncma_tags.h"
#include "ncma_scard.h"
#include "ncma_url.h"
#include "ncma_utils.h"
#include "smcardCCIJ.h"
#include "smtagsCCIJ.h"

#include "DBUG.h"

#define MUNGE2b(a,b) a###b
#define MUNGE3b(a,b,c) a###b##c
#define MUNGE2(a,b) MUNGE2b(a,b)
#define MUNGE3(a,b,c) MUNGE3b(a,b,c)


int fetch_sc_bootblock(void)
{
    _kernel_swi_regs r;

    r.r[0] = 1; /* tell bootblock that we want even insecure data */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_sc_bootblock: SWI failed\n");
        return(-1);
    }

    if(r.r[0]<0) {


               DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: couldn't read bootblock, error %d\n", r.r[0]);
               return(-1);

      } else {

        /* success */
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: succeeded\n");

        sc_bb_ptr = (unsigned char *)r.r[0];
    	sc_bb_bytes = r.r[1];
      }


    return(0);

}



////////////////////////////////////////////////////////////////////////////////
// validate_funai_id_card: check that slot 1 card is an ID card
int validate_funai_id_card(void)
{
    unsigned char *card_item;
    unsigned int length;

    if((card_item = find_tag_in_block(sc_bb_ptr, sc_bb_bytes, FUNAI_CARD, &length, NULL)) == NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_id_card: no FUNAI_CARD item in data block\n");
        return(-1);
    }

    if(length != 4) { // check that length looks right
        DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_id_card: FUNAI_CARD item is of incorrect length\n");
        return(-1);
    }

    switch(card_item[0]) { // display card media type
    	case '0':
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: card is a MiniJIS256\n");
    	    break;

    	case '1':
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: card is a JICSAP\n");
    	    break;

    	default:
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: card media type is unrecognised\n");
    	    break;
    }

    switch(card_item[1]) { // check card type
    	case '1': // ID card
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: ID card detected\n");
    	    break;

    	case '2': // SERVICE card detected
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_id_card: this is a SERVICE card!\n");
    	    return(-1);

    	default: // don't know about this one...
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_id_card: unrecognised card type\n");
    	    return(-1);
    }

    // only got here if the card-type was ID, set global flag to indicate user config options
    switch(card_item[2]) { // check options
    	case '0':
    	    user_config = USER_CONFIG_NONE;
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: user has NO card config permissions\n");
    	    break;

    	case '1':
    	    user_config = USER_CONFIG_PIN;
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: user has PIN card config permissions only\n");
    	    break;

    	case '2':
    	    user_config = USER_CONFIG_CARD;
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_id_card: user has FULL card config permissions\n");
    	    break;

    	default:
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_id_card: unrecognised user permission byte\n");
    	    return(-1);
    }

    return(1);
}


////////////////////////////////////////////////////////////////////////////////
// validate_funai_svc_card: check that slot 1 card is an ID card
int validate_funai_svc_card(void)
{
    unsigned char *card_item;
    unsigned int length;

    if((card_item = find_tag_in_block(usc_bb_ptr, usc_bb_bytes, FUNAI_CARD, &length, NULL)) == NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_svc_card: no FUNAI_CARD item in data block\n");
        return(-1);
    }

    if(length != 4) { // check that length looks right
        DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_svc_card: FUNAI_CARD item is of incorrect length\n");
        return(-1);
    }

    switch(card_item[1]) { // check card type
    	case 0x1: // ID card
    	    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_funai_svc_card: this is an ID card!\n");
    	    return(-1);
    	    break;

    	case 0x2: // SERVICE card detected
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_svc_card: SERVICE card detected\n");
    	    break;

    	default: // don't know about this one...
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_svc_card: unrecognised card type\n");
    	    return(-1);
    }

    // byte 3 (user config) of a URL card must be zero
    if(card_item[2] != 0x0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "validate_funai_svc_card: non-zero user permissions on SVC card\n");
        return(-1);
    }

    return(1);
}







