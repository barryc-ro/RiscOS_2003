#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_funai.h"
#include "smcardCCIJ.h"
#include "ncma_cache.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"

#include "DBUG.h"


////////////////////////////////////////////////////////////////////////////////
// num_slots: how many smartcard interfaces does this NC have?
int find_slots(void)
{
    _kernel_swi_regs r;

#ifdef FORCE_SINGLE_SLOT
    return(1);
#endif

#ifdef FORCE_DUAL_SLOT
    return(2);
#endif

    // do some sort of SWI to get number of slots
    r.r[0] = 0;
    r.r[1] = -1; // NONE
    if(_kernel_swi(XOS_Bit | SCTransport_SlotInfo, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "find_slots: SCTrans_SlotInfo failed\n");
        return(-1);
    }

    num_slots = r.r[0];
    DBUG_PRINTF(DBUG_LVL_DIAG, "find_slots: detected %d slot(s)\n", num_slots);

    return(num_slots);
}

////////////////////////////////////////////////////////////////////////////////
// fetch_usc_url: on a two slot box, get URL from SERVICE card
// on a one-slot box, allow it to come from the ID card
unsigned char *fetch_usc_url(unsigned int *url_length)
{
    unsigned int tmp;

    if(url_length == NULL) url_length = &tmp; // caller not interested in returned length value

    if(num_slots == 1) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_usc_url: returning URL from ID card (single slot box)\n");
        return((unsigned char *)cache_ptr("URL_INIT", (int *)url_length));
    }

    if(num_slots == 2) {

        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_usc_url: returning URL from URL card (twin-slot box)\n");
#if 0
        return(find_tag_in_block((unsigned char *)usc_bb_ptr, usc_bb_bytes, FUNAI_URL, url_length, NULL));
#else
    	*url_length = usc_bb_bytes;
    	return(usc_bb_ptr);
#endif
    }

    // else barf
    return(NULL);
}
////////////////////////////////////////////////////////////////////////////////
// init_service_card: open card 2
int init_service_card(void)
{
   _kernel_swi_regs r;

    r.r[0] = 0;
    if(_kernel_swi(SCTransport_InitSlot2, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "init_service_card: SCTrans_InitSlot2 failed!\n");
        url_card_inserted = -1;
    } else {

    	switch(r.r[0]) {
            case SCI_SUCCESS:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "init_service_card: SLOT2 card is inserted\n");
            	url_card_inserted = 1;
            	break;

    	    case SCI_E_OUT:
    	    	DBUG_PRINTF(DBUG_LVL_DIAG, "init_service_card: SLOT2 card is NOT inserted\n");
    	    	url_card_inserted = 0;
    	    	break;

    	    default:
    	    	DBUG_PRINTF(DBUG_LVL_DIAG, "init_service_card: problem reading the SLOT2 card\n");
    	    	url_card_inserted = -1;
    	    	break;
    	}
    }
    return(url_card_inserted);
}

////////////////////////////////////////////////////////////////////////////////
// read_service_card: read the data block from the second card, sets url_card_inserted
int read_service_card(void)
{
    _kernel_swi_regs r;

    usc_bb_ptr = svc_card_buffer;
    usc_bb_bytes = SVC_CARD_BUFFSZ;

    memset(usc_bb_ptr, 0, usc_bb_bytes);

    if(url_card_inserted == 1) {
    	DBUG_PRINTF(DBUG_LVL_DIAG, "read_service_card: reading to %d bytes at 0x%x\n", usc_bb_bytes, usc_bb_ptr);
    	r.r[0] = 0;
    	r.r[1] = (int)usc_bb_ptr;
    	r.r[2] = usc_bb_bytes;
    	if(_kernel_swi(SCTransport_ReadSlot2, &r, &r) != NULL) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "read_service_card: SCTrans_ReadSlot2 failed!\n");
            return(-1);
    	}

    	switch(r.r[0]) {

    	    case SCI_SUCCESS:
            	DBUG_PRINTF(DBUG_LVL_ERROR, "read_service_card: %d bytes read, %d bytes unread\n", r.r[1], r.r[2]);
            	usc_bb_bytes = r.r[1];
            	return(1);

            case SCI_E_NODATA: // not ready
            	if(--slot2_retries) {
            	    DBUG_PRINTF(DBUG_LVL_DIAG, "read_service_card: not ready reading slot2, %d of %d tries remain\n",
            	    	slot2_retries, MAX_SLOT2_RETRIES);
    	    	    return(-2); // signal NOT READY
    	    	} else {
    	    	    DBUG_PRINTF(DBUG_LVL_ERROR, "read_service_card: giving up reading slot 2 after %d attempts\n",
    	    	    	MAX_SLOT2_RETRIES);
    	    	    return(-1);
    	    	}

    	    default:
            	DBUG_PRINTF(DBUG_LVL_ERROR, "read_service_card: SCTrans_ReadSlot2 returned error %d\n", r.r[0]);
            	url_card_inserted = -1;
            	usc_bb_bytes = 0;
            	usc_bb_ptr = NULL;
            	return(-1);
        }
    }
    return(1);
}

