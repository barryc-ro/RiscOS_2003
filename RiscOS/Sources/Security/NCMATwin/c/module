#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */

#define PROTOTYPES_INTERNAL
#include "module.h"
#include "DBUG.h"
#include "machine.h"
#include "vectors.h"
#include "ncma_cmds.h"
#include "ncma_swis.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "ncma_dial.h"
#include "dynalloc.h"
#include "ncma_url.h"
#ifndef TRAP_PPP_TIMEOUTS
#include "ncma_fx.h"
#endif

#include "VersionNum"
#include "header.h"
#include "init.h"

#include "cmhg_defs.h"
#include "DBUG.h"


#include "Debuglib/Debuglib.h"


#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif


#ifdef ENABLE_DEBUGGING
  debug_device DebugOutputDevice = PDEBUG_OUTPUT;
#endif /* ENABLE_DEBUGGING */



/* code */
_kernel_oserror *module_init(const char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror f = {0x00810800, "NCMATwin failed to initialize."}, *e = NULL;
    _kernel_swi_regs r;
    static char keyword[] = "fullinit/s";

    static int args[32];

    module_wsp = pw;

    debug_initialise ("NCMATwin", "izipfs:$.NCMATwin", "");
    debug_atexit ();
    debug_output_device (DebugOutputDevice);   /* Output debug info via pdebug */

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   memset((char *)args, 0, 32 * sizeof(int));
   _kernel_swi(OS_ReadArgs, &r, &r);

   DBUG_PRINTF(DBUG_LVL_DIAG, "RISC OS NC Managed Access Twin Version %s %s\n", Module_MajorVersion, Module_MinorVersion);

   /* Since this implementation of NCMA requires SCTrans startup calls to be
       recieved for events to be claimed, softloads do not work. As the build
       is now DebugLib enabled, have removed the old debugging code and replaced
       it with a switch, -fullinit, that can be passed in and causes the module
       to claim the events regardless of SCTrans, and hence allowing softloads
       to work. */
   if(args[0] != 0)
   {
     DBUG_PRINTF(DBUG_LVL_DIAG, "module_init(): fullinit command line flag passed in.\n");
     module_claimv();
     module_event_enable();
   }
   else
   {
     DBUG_PRINTF(DBUG_LVL_DIAG, "module_init(): args[0] was 0.\n");
   }

   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: initialising memory subsystem...\n");
   rminit();

   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: registering resources...\n");
   resource_init();

   if(use_dynamic_areas) {
     DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: dynamic area support detected...\n");
   } else {
     DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: no dynamic area support found...\n");
   }

   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: initialising ncma subsystem...\n");

   if(ncma_ncma_init()<0) {
     DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: ncma init failed.\n");
     e = &f;
     goto out;
   };


   ncma_state = State_NCMAInit;


   return ((_kernel_oserror *)0);

out:
   DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_init: Bummer!\n");
   return (e);
}


_kernel_oserror *module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &ncma_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);
    return((_kernel_oserror *)NULL);
}


_kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &ncma_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);
}




void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{
  static int lock = 0;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call 0x%x reason code: 0x%x\n",sn,r->r[2]);
  switch(sn) {

    // respond to SCTransportStarting once only - purpose is to ignore events and svc calls
    // until sctrans is ready. We want to ignore all events, and any registry service calls
    // registry service calls from the bootblock module won't happen until SCTransStarting,
    // because it has the same code.
    // Other service calls are allowed through, because they can't happen until much later,
    // apart from Service_Standby, which we might see early, but if we do, we need to handle it.

    case Service_SCTransportStarting:
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_SCTransportStarting recieved.\n");
    	if(lock == 0) {
    	    lock = 1;
    	    module_claimv();
    	    module_event_enable();
    	}
    	break;

    case Service_NCDialUIStatus:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_NCDialUIStatus recieved.\n");

    	 /* We wish to send our own service call out based on this value. */
    	 e = _swix(OS_ServiceCall, _INR(1,2), NCMA_SERVICELINKSTATUS, r->r[2]);
         if (e) /* There was an error with the swi call */
         {
            DBUG_PRINTF(DBUG_LVL_ERROR, "module_sc_handler(): Error with dispatch of service call.\n");
         }

         /* Now deal with the appropriate values */
    	 switch(r->r[2])
    	 {
             case 0x4: /* IP layer started */
	     	  ncma_trans = Trans_DialOK;
	     	  line_up = 1;
	     	  setcallback();
	     	  break;
	     case 0x0: /* broken */
	     case 0x81: /* no dial tone */
	     case 0x82: /* line busy */
	     case 0x83: /* no carrier */
	     case 0x84: /* server not responding */
	     case 0x85: /* timeout in script operation */
	     case 0x86: /* unspecified error */
	     	  ncma_trans = Trans_DialBad;
	     	  line_up = 0;
	     	  setcallback();
	     	  break;

    	     default:
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "module_sc_handler: unrecognized NCDialUI status code 0x%x\n", r->r[2]);
    	     	  break;
    	 }

    	 break;

    case Service_DiallerStatus: /* we need to listen to the dialler for HUP signals */
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_DiallerStatus recieved.\n");
    	 /* JRF: This state does nothing except force the shutdown requester
    	         to be removed if nothing else is caught */
    	 ncma_trans = Trans_DiallerStateChange;
    	 switch(r->r[2])
    	 {
    	     case 0x0: /* IP down, line down */
    	       if(line_up)
               {
    	         ncma_dbox_close();
    	         ignore_ppp_timeout = 0;
    	         ncma_trans = Trans_HUP;
    	         line_up = 0;
    	       }
    	     break;
    	 }
    	 setcallback();
    	 break;

    case REGISTRY_STATUS:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Registry_Status recieved.\n");
  	  registry_status = r->r[2];
     	  registry_delta = r->r[4];
     	  ncma_trans = Trans_Registry;
     	  setcallback();
       	  break;

    case Service_Shutdown:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_Shutdown recieved.\n");
    	 if(prevent_shutdown == 1) {
    	    r->r[1] = 0; /* whoah, there, shutdown! */
    	    ncma_trans = Trans_Shutdown;
    	    setcallback();
    	 }
    	 break;

    case Service_ShutdownComplete:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_ShutdownComplete recieved.\n");
    	 ncma_trans = Trans_ShutdownComplete;
    	 setcallback();
    	 break;

    case Service_Standby:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_Standby recieved.\n");
    	 if((r->r[0] & 1) == 0) { /* box waking up */
    	     ncma_trans = Trans_PowerUp;
    	     setcallback();
    	 }
    	 break;


    case Service_PPPTimingOut:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call Service_PPPTimingOut recieved.\n");
#ifdef TRAP_PPP_TIMEOUTS
         if(ignore_ppp_timeout) { /* don't claim */
#else
	   ncma_sound_effect(NCMA_TIMEOUT_SOUND);
#endif
           ignore_ppp_timeout = 0; /* reset ignore flag */
           ncma_dbox_close();
#ifdef TRAP_PPP_TIMEOUTS
         } else { /* claim svc call to prevent shutdown */
           r->r[1] = 0; /* claim it */
    	   ncma_trans = Trans_PPPTimeout;
    	   setcallback();
    	 }
#endif
    	 break;


    case Service_PostInit:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_PostInit\n");
      post_initialisation();
      break;

    case Service_InternetStatus:
      switch (r->r[0])
      {
        case 0:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: IP address changed.\n");
          break;

        case 1:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: net map has changed.\n");
          break;

        case 2:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Interface %s has gone %s\n", (char*)r->r[3], r->r[2]?"up":"down");
          break;

        case 3:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: BOOTP/DHCP request about to be sent.\n");
          break;

        case 4:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: BOOTP/DHCP reply has been recieved: Interface name is %s\n", (char*)r->r[2]);
          break;

        case 5:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPOFFER message recieved.\n");
          break;

        case 6:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPREQUEST message about to be sent.\n");
          break;

        case 7:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: DHCPACK reply to a DHCPINFORM recieved.\n");
          break;

        case 8:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Another machine detected using this IP address.\n");
          break;

        default:
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call : Service_InternetStatus: Unknown reason code %d\n", r->r[0]);
          break;
      }
      break;

    default:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_svc_handler: unrecognized service call.\n");
         break;
  }
}




_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_final: cancelling timeouts...\n");
  canceltimeout();

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_final: releasing events...\n");
  module_event_disable();
  module_releasev();

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_final: releasing memory resources...\n");
  rmfree_all();

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_final: freeing resources...\n");
  resource_final();

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_final: done.\n");

  return((_kernel_oserror *)NULL);
}





