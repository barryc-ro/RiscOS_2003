/* NCAccessManager smartcard handling routines */

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_scard.h"
#include "ncma_url.h"
#include "ncma_utils.h"
#include "dynalloc.h"
#include "usermode.h"
#include "machine.h"
#include "vectors.h"
#include "DBUG.h"
#include "kprintf.h"

int smartcard_status(int *p)
{
    _kernel_swi_regs r;

    if(_kernel_swi(NCBootblock_Status, &r, &r)!=NULL) return(-1);
    DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_status: 0x%x 0x%x\n", r.r[0], r.r[2]);
    if(p!=NULL) *p = r.r[2];
    return(r.r[0]);
}

int smartcard_present(void)
{
    if(smartcard_status(NULL) & BB_STATUS_INSERTED) {
     	DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_present: smartcard IS present\n");
        return(1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_present: smartcard IS NOT present\n");
    return(0);
}

int smartcard_valid(void)
{
    if((smartcard_status(NULL) & (BB_STATUS_SC_VALID | BB_STATUS_BADVERSION)) ==
                                 (BB_STATUS_SC_VALID)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_valid: smartcard IS valid\n");
    	return(1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_valid: smartcard IS NOT valid\n");
    return(0);
}



/* return number of remaining attempts at PIN entry
    0 = blocked, >0 = not blocked, <0 not ready
*/
int smartcard_blocked(void)
{
    _kernel_swi_regs r;

    if(_kernel_swi(NCBootblock_PinInfo, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "smartcard_blocked: PinInfo SWI FAILED\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_blocked: CHV1 is %s set with %d attempts remaining\n",
    			       r.r[0]?"":"not", r.r[1]);
    return(r.r[1]);
}


int validate_pin(char *s)
{
    char *q;
    _kernel_swi_regs r;

    if((q = get_form_field(chv_pin, s, "pin", 8))==NULL) {
    	DBUG_PRINTF(DBUG_LVL_DIAG, "validate_pin: couldn't find PIN value in form response\n");
        return(-1);
    }

    chv_pin_size = strlen(q);
    if(chv_pin_size > 8) chv_pin_size = 8;

    r.r[0] = (int)chv_pin;
    r.r[1] = chv_pin_size;

    DBUG_PRINTF(DBUG_LVL_DIAG, "validate_pin: authenticating with %d byte key \"%s\"\n", r.r[1], r.r[0]);

    if(_kernel_swi(NCBootblock_Authenticate, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "validate_pin: Registry authentication failed\n");
        return(-1);
    }

    return(1);
}

////////////////////////////////////////////////////////////////////////////////
// default_pin: attempt to validate CHV1 with PIN "00000000"
int default_pin(void)
{
    _kernel_swi_regs r;
    char defpin[MAX_DEFAULT_PIN+2];

    memset(defpin, 0, MAX_DEFAULT_PIN+2);
    strncpy(defpin, DEFAULT_PIN1, MAX_DEFAULT_PIN+1);

    r.r[0] = (int)defpin;
    r.r[1] = strlen(DEFAULT_PIN1);
    DBUG_PRINTF(DBUG_LVL_DIAG, "default_pin: authenticating with %d byte key \"%s\"\n", r.r[1], r.r[0]);

    if(_kernel_swi(NCBootblock_Authenticate, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "default_pin: Registry authentication failed\n");
        return(-1);
    }

    return(1);
}

////////////////////////////////////////////////////////////////////////////////
// update_pin: attempt to validate CHV1 with PIN "99999999"
int update_pin(void)
{
    _kernel_swi_regs r;
    char defpin[MAX_DEFAULT_PIN+2];

    memset(defpin, 0, MAX_DEFAULT_PIN+2);
    strncpy(defpin, DEFAULT_PIN2, MAX_DEFAULT_PIN+1);

    r.r[0] = (int)defpin;
    r.r[1] = strlen(defpin);
    DBUG_PRINTF(DBUG_LVL_DIAG, "update_pin: authenticating with %d byte key \"%s\"\n", r.r[1], r.r[0]);

    if(_kernel_swi(NCBootblock_Authenticate, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "update_pin: Registry authentication failed\n");
        return(-1);
    }

    return(1);
}



int change_pin(char *s)
{
    _kernel_swi_regs r;

    char new[16];
    char conf[16];


    if((get_form_field(new, s, "new", 8))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "change_pin: couldn't find new PIN in form response\n");
        return(-1);
    }

    if((get_form_field(conf, s, "confirm", 8))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "change_pin: couldn't find comfirm PIN in form response\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "change_pin: new: %s confirm: %s\n", new, conf);

     if(strncmp(new,conf,8)!=0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "change_pin: PINs entered don't match\n");
        ncma_trans = Trans_URLMismatch;
        setcallback();
        return(0);
    }


    chv_pin_size = strlen(new);

    if(chv_pin_size == 0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "change_pin: blank PIN? I don't think so!\n");
        ncma_trans = Trans_URLLeavePIN;
        setcallback();
        return(0);
    }

    if(chv_pin_size > 8) chv_pin_size = 8;
    strncpy(chv_pin, new, chv_pin_size);

    DBUG_PRINTF(DBUG_LVL_DIAG, "change_pin: got new PIN \"%s\" %d bytes\n", chv_pin, chv_pin_size);


    DBUG_PRINTF(DBUG_LVL_DIAG, "change_pin: calling change CHV\n");
    r.r[0] = 1;
    r.r[1] = (int)chv_pin;
    r.r[2] = chv_pin_size;
    r.r[3] = NULL;
    r.r[4] = 0;
    if(_kernel_swi(NCBootblock_ChangeSmartCardCHV, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "change_pin: NCRegistry change PIN failed\n");
        return(-1);
    }

    return(0);
}


int bootblock_read_succeeded(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_read_succeeded: s:0x%x d:0x%x\n", registry_status, registry_delta);
    if(registry_status_asserted(BB_STATUS_READOK)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_read_succeeded: bootblock module has read data\n");
        return(1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_read_succeeded: bootblock module has NOT read data\n");
    return(0);
}

int bootblock_read_failed(void)
{
    if(registry_status_asserted(BB_STATUS_READFAIL)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_read_failed: bootblock module read FAILED\n");
        return(1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_read_failed: bootblock module read has NOT failed yet\n");
    return(0);
}

int smartcard_pin_protected(void)
{
  //if(registry_status_asserted(BB_STATUS_LOCKED)) return(1);
  //if(registry_status_set(BB_STATUS_LOCKED)) return(1); /* was this one */
  if(smartcard_status(NULL) & BB_STATUS_LOCKED) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_pin_protected: smartcard is PIN protected, and locked\n");
      return(1);
  }
  DBUG_PRINTF(DBUG_LVL_DIAG, "smartcard_pin_protected: smartcard is NOT locked\n");
  return(0);
}


int registry_status_asserted(int p)
{
    if((registry_delta & registry_status) & p) {
        //registry_delta = 0;
        return(1);
    }
    return(0);
}

int registry_status_cleared(int p)
{
    if((registry_delta & ~registry_status) & p) {
        //registry_delta = 0;
        return(1);
    }
    return(0);
}

int registry_status_set(int p)
{
    if(registry_status & p) return(1);
    return(0);
}

int registry_status_clear(int p)
{
    if(~registry_status & p) return(1);
    return(0);
}

int registry_status_changed(int p)
{
    if(registry_delta & p) return(1);
    return(0);
}

int smartcard_present_low_level(void)
{
    _kernel_swi_regs r;

    _kernel_swi(SCInterface_Status, &r, &r);

    if(r.r[0] == 1) return(0);
    return(1);
}


