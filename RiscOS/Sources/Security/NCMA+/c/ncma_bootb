/* ncma_bootb.c - deal with all aspects of bootblocks, enterprise blocks etc.
                  whether in RAM, NVRAM, or on the smartcard
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "ncma_bootb.h"
#define PROTOTYPES_INTERNAL
#include "ncma_ROM.h"
#include "ncma_tags.h"
#include "ncma_scard.h"
#include "ncma_cache.h"
#include "ncma_url.h"
#include "ncma_uid.h"
#include "ncma_utils.h"
#include "ncma_nvram.h"
#include "ncma_auth.h"

#include "DBUG.h"

int fetch_sc_bootblock(void)
{
    _kernel_swi_regs r;

    r.r[0] = 1; /* tell bootblock that we want even insecure data */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_sc_bootblock: SWI failed\n");
        return(-1);
    }

    if(r.r[0]<0) {

      switch(r.r[0]) {


        case -1: /* no enterprise data available */
               DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: no enterprise info available\n");
               sc_block_ptr = NULL;
    	       sc_block_bytes = 0;
    	       sc_index_ptr = (unsigned char *)r.r[2];
    	       sc_index_bytes = r.r[3];
    	       sc_alt_ptr = (unsigned char *)r.r[4];
    	       sc_alt_bytes = r.r[5];
    	       break;

        case -2: /* authentication failed */
               DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_sc_bootblock: authentication failed\n");
               return(-1);

        default:
               DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: bizarre error %d\n", r.r[0]);
               return(-1);
      }
      } else {

        /* success */
        DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: succeeded\n");

        if(r.r[6] & 1) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: NCBootblock doesn't trust this data\n");
            trusted_scard_data = 0;
        } else {
            DBUG_PRINTF(DBUG_LVL_DIAG, "fetch_sc_bootblock: NCBootblock trusts this data\n");
            trusted_scard_data = 1;
        }

        sc_block_ptr = (unsigned char *)r.r[0];
    	sc_block_bytes = r.r[1];
    	sc_index_ptr = (unsigned char *)r.r[2];
    	sc_index_bytes = r.r[3];
    	sc_alt_ptr = (unsigned char *)r.r[4];
    	sc_alt_bytes = r.r[5];
    	sc_eb_ptr = find_tag_in_block(sc_block_ptr, sc_block_bytes, NCIBeginSignatureTag, &sc_eb_bytes, NULL);
    	sc_hash_ptr = find_tag_in_block(sc_block_ptr, sc_block_bytes, NCISignatureTag, &sc_hash_bytes, NULL);
      }


    return(0);

}

int select_scard_iap(void)
{
    unsigned char *group_ptr;
    unsigned int group_bytes;

    unsigned char *matrix_ptr;
    unsigned int matrix_bytes;

    unsigned char *id_ptr;
    unsigned int id_bytes;

    unsigned int tmp;

    if((matrix_ptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, NCIIAPConnectMatrixTag, &matrix_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "select_scard_iap: no IAPConnectMatrix in s/card block\n");
        return(-1);
    }

    for(group_ptr = NULL;;) {
        if((group_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIGroupTag, &group_bytes, group_ptr))==NULL) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "select_scard_iap: exhausted s/card IAP groups\n");
            return(-1);
        }
        if((id_ptr = find_tag_in_block(group_ptr, group_bytes, NCIIAPIDTag, &id_bytes, NULL))==NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap: no IAP ID in this block\n");
            continue;
        }

        if((tmp=read_big_word((char *)id_ptr)) == iap_id) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap: got it (0x%x)\n");
            sc_iap_ptr = group_ptr;
            sc_iap_bytes = group_bytes;
            return(1);
        } else {
            DBUG_PRINTF(DBUG_LVL_DIAG, "select_scard_iap: IAP ID in block (0x%x) didn't match target (0x%x)\n", tmp, iap_id);
            continue;
        }
    }
    return(0);
}

int virgin_smartcard(void)
{
    int i;
    _kernel_swi_regs r;

    r.r[0] = 1; /* gimme data whether it's authentic or not */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "virgin_smartcard: Bootblock enquiry SWI failed!\n");
        return(-1);
    }

    if(r.r[0] != -2) {
      i = *(unsigned int *)(r.r[2]);

      //DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: purity rating: 0x%x\n", i);
      if((i == 0x00000000) || (i == 0xffffffff)) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: VIRGIN CARD\n");
          return(1);
      }
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: SWI returned error %d\n", r.r[0]);
        return(-1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "virgin_smartcard: SULLIED CARD\n");
    return(0);
}

int ram_empty(void)
{
    if(ram_block_bytes == 0) return(1);
    return(0);
}

int build_rs_cache(void)
{
    unsigned char *alt_tag;
    unsigned int alt_bytes;
    unsigned int tmp;

    if(reset_cache()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_rs_cache: cache reset failed\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_rs_cache: cache reset - checking for alt number\n");

    if(sc_alt_bytes != 0) { /* there's an alternate 1-800 number */
      if((alt_tag = (unsigned char *)read_alt_number((int *)&alt_bytes))==NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "build_rs_cache: error reading alt-800 number\n");
          return(-1);
      }
      DBUG_PRINTF(DBUG_LVL_DIAG, "build_rs_cache: alt number %*s\n", (char *)alt_tag, alt_bytes);
      cache_write("PSTN_NUM", (char *)alt_tag, alt_bytes);
    } else { /* use ROM based 1-800 number */
      DBUG_PRINTF(DBUG_LVL_DIAG, "build_rs_cache: no alternate number - using ROM default\n");
      cache_write("PSTN_NUM", ROM_PSTN_NUM, strlen(ROM_PSTN_NUM));
    }
    tmp = ROM_DNS_PRIMARY;
    cache_write("DNS_PRIMARY", (char *)&tmp, 4);
    tmp = ROM_DNS_BACKUP;
    cache_write("DNS_BACKUP", (char *)&tmp, 4);

    cache_write("ISP_DOMAIN", ROM_DOMAIN, strlen(ROM_DOMAIN));
    cache_write("LOGIN_ID", ROM_LOGIN_ID, strlen(ROM_LOGIN_ID));
    cache_write("LOGIN_SECRET", ROM_LOGIN_SECRET, strlen(ROM_LOGIN_SECRET));

    cache_write("SEND_EXPECT", (char *)rom_send_expect, sizeof(rom_send_expect));

    cache_write("CSFS_TYPERO", ROM_CSFS_TYPERO, strlen(ROM_CSFS_TYPERO));
    cache_write("CSFS_SERVERRO", ROM_CSFS_SERVERRO, strlen(ROM_CSFS_SERVERRO));
    cache_write("CSFS_PATHRO", ROM_CSFS_PATHRO, strlen(ROM_CSFS_PATHRO));
    cache_write("CSFS_USERRO", ROM_CSFS_USERRO, strlen(ROM_CSFS_USERRO));
    cache_write("CSFS_PASSWDRO", ROM_CSFS_PASSWDRO, strlen(ROM_CSFS_PASSWDRO));

    cache_write("URL_INIT", ROM_URL_INIT, strlen(ROM_URL_INIT));

    cache_write("ISP_NAME", ROM_ISP_NAME, strlen(ROM_ISP_NAME));
    return(0);
}


/* search through RAM contents for an enterprise block that matches the enterprise id
   also sets up certificate and signature info for the current enterprise block */
int find_ram_enterprise_block(void)
{

    unsigned char *matrix_ptr;
    unsigned int matrix_bytes;

    unsigned char *group_ptr;
    unsigned int group_bytes;

    unsigned char *sig_ptr;
    unsigned int sig_bytes;

    unsigned char *isp_id_ptr;
    unsigned int isp_id_bytes;

    unsigned char *hash_ptr;
    unsigned int hash_bytes;

    unsigned char *cert_ptr;
    unsigned int cert_bytes;



   if((matrix_ptr = find_tag_in_block(ram_block_ptr, ram_block_bytes, NCIEnterpriseMatrixTag, &matrix_bytes, NULL))==NULL) {
       DBUG_PRINTF(DBUG_LVL_ERROR, "find_ram_enterprise_block: no NCIEnterpriseMatrixTag!\n");
       return(-1);
   }

   for(group_ptr = NULL;;) {
       if((group_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIGroupTag, &group_bytes, group_ptr))==NULL) {
           DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: no more groups\n");
           break;
       }

       if((sig_ptr = find_tag_in_block(group_ptr, group_bytes, NCIBeginSignatureTag, &sig_bytes, NULL))==NULL) {
           DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: no NCIBeginSignatureTag in group - skipping\n");
           sig_ptr = NULL;
           sig_bytes = 0;
           continue;
       }

       if((isp_id_ptr = find_tag_in_block(sig_ptr, sig_bytes, NCIEnterpriseIDTag, &isp_id_bytes, NULL))==NULL) {
           DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: no enterprise ID in signed block - skipping\n");
           isp_id_ptr = NULL;
           isp_id_bytes = 0;
           continue;
       }

       if(read_big_word((char *)isp_id_ptr) == enterprise_id) { /* it's a hit */
         if((hash_ptr = find_tag_in_block(group_ptr, group_bytes, NCISignatureTag, &hash_bytes, NULL))==NULL) {
           DBUG_PRINTF(DBUG_LVL_ERROR, "find_ram_enterprise_block: no signature on block\n");
           return(-1);
         }

	 if((cert_ptr = find_tag_in_block(group_ptr, group_bytes, NCIEnterpriseCertTag, &cert_bytes, NULL))==NULL) {
	     DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: no certificate\n");
	     ram_cert_ptr = NULL;
	     ram_cert_bytes = 0;
	 } else {
	     ram_cert_ptr = cert_ptr;
	     ram_cert_bytes = cert_bytes;
	     export_ram_certificate();
	 }

	 ram_sig_ptr = hash_ptr;
	 ram_sig_bytes = hash_bytes;
         ram_eb_ptr = sig_ptr;
         ram_eb_bytes = sig_bytes;

         if(!trusted_scard_data) {
             DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: authenticating previously untrusted smartcard data\n");
             if(ncma_auth(sc_eb_ptr, sc_eb_bytes, sc_hash_ptr, sc_hash_bytes, ram_cert_ptr, ram_cert_bytes)>0) {
                 DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: authentication SUCCEEDED\n");
                 trusted_scard_data = 1;
             } else {
                 DBUG_PRINTF(DBUG_LVL_DIAG, "find_ram_enterprise_block: authentication FAILED\n");
             }
         }
         return(1);
       }
   }
   return(-1);
}

/* search smartcard index information for the first (or only) enterprise id */
int find_enterprise_id(void)
{
    unsigned char *matrix_ptr;
    unsigned int matrix_bytes;

    unsigned char *isp_id_ptr;
    unsigned int isp_id_bytes;

    if((matrix_ptr = find_tag_in_block(sc_index_ptr+4, sc_index_bytes-4, NCIEnterpriseGroupTag, &matrix_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_enterprise_id: no NCIEnterpriseGroupTag - continuing\n");
        matrix_ptr = sc_index_ptr+4;
        matrix_bytes = sc_index_bytes-4;
    }

    if((isp_id_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIEnterpriseOffsetTag, &isp_id_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "find_enterprise_id: no NCIEnterpriseOffsetTag!\n");
        return(-1);
    }

    enterprise_id = read_big_word((char *)isp_id_ptr);
    return(0);
}

/* determime whether the user is registered with the given ISP
   do this by checking for User mount path, until a better method comes along
*/
int user_isp_registered(void)
{
    unsigned char *ump_ptr;
    unsigned int ump_bytes;
    unsigned int browser_mode;

    if(sc_block_bytes == 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "user_isp_registered: no smartcard block present\n");
        return(-1);
    }

    if((ump_ptr = find_tag_in_block(sc_block_ptr, sc_block_bytes, NCIBrowserModeTag, &ump_bytes, NULL))==NULL) {
        if((ump_ptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, NCIBrowserModeTag, &ump_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "user_isp_registered: no NCIBrowserModeTag\n");
        return(-1);
        }
    }

    browser_mode = read_big_short((char *)ump_ptr);
    if(browser_mode == NCIBrowserModeUnrestricted) return(1);

    return(0);
}


/* fetch the relationship URL, append funky stuff */
int fetch_relationship_url(void)
{
    char *url;
    char ac[8];

    if((url=(char *)malloc(sizeof(char)*1024))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "fetch_relationship_url: couldn't claim memory for URL\n");
        return(-1);
    }

    strcpy(url, ROM_URL_INIT); /* base of url */
    strcat(url, RELATIONSHIP_URL_CGI1); /* m/f ID arg */
    render_hex_id(url+strlen(url)); /* actual id */
    strcat(url, RELATIONSHIP_URL_CGI2); /* enterprise ID arg */
    sprintf(url+strlen(url), "%08x", enterprise_id);
    if(nvram_get_areacode(ac)) {
        strcat(url, RELATIONSHIP_URL_CGI3); /* areacode arg */
        strcat(url, ac);
    }

    ncma_url_open(url);
    free(url);
    return(0);
}

/* fetch the alternate 1-800 number block from the smartcard */
unsigned char *read_alt_number(int *bytes)
{
    unsigned char *alt_ptr;
    unsigned int alt_bytes;

    DBUG_PRINTF(DBUG_LVL_DIAG, "read_alt_number: alt block at 0x%x bytes: %d\n", sc_alt_ptr, sc_alt_bytes);

    if(sc_alt_bytes == 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "read_alt_number: there's no alt block to read\n");
        return(NULL);
    }

    if((alt_ptr = find_tag_in_block(sc_alt_ptr, sc_alt_bytes, NCIAlternative800Tag, &alt_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "read_alt_number: alt block contains no NCIAlternative800Tag\n");
        return(NULL);
    }

    *bytes = alt_bytes;
    return(alt_ptr);
}


int fetch_registration_success_url(void)
{
    if(done_url_ptr != NULL) ncma_url_open(done_url_ptr);
    return(0);
}

int fetch_registration_failure_url(void)
{
    if(error_url_ptr != NULL) ncma_url_open(error_url_ptr);
    return(0);
}




