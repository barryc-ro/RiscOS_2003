/* ncma_cron.c - handle Managed access interface to the cron scheduler */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include "kernel.h"
#include "swis.h"

#include "ncma_nvram.h"
#include "ncma_smurf.h"
#include "ncma_exec.h"
#include "ncma_ncma.h"
#include "ncma_dial.h"
#define PROTOTYPES_INTERNAL
#include "ncma_cron.h"
#include "DBUG.h"

/* ncma_cron_kick - set up a scheduled update with cron. Possible 'periods' are:

   <0:  schedule update for tomorrow, at configured time
   0: schedule update for today at configured time, or tomorrow if already too late
   1-7: schedule update for now+next backoff interval
*/
int ncma_cron_kick(int period)
{
    int attime, otime, athrs, atmins, odays;
    char otb[24];

    time_t cal_time;
    struct tm *time_now, time_next;

    _kernel_swi_regs r;

    if(period>7) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_cron_kick: backoff limit expired, postponing\n");
        period = -1; /* run out of expo-backoff intervals? Give up until tomorrow */
    }

    if(period<=0) { /* need to read configured time */
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_cron_kick: scheduling for tomorrow\n");
      if((attime = nvram_update_time())<0) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_cron_kick: couldn't read NVRAM update time\n");
          return(0);
      }

      if(read_os_var(CRON_OFFSET_VARIABLE, otb, 24)<0) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_cron_kick: no system offset set - randomizing\n");
          otime = random_cron_offset();
      } else {
          otime = atoi(otb);
      }

      athrs = attime + otime / 60;
      atmins = otime % 60;
    }

    time(&cal_time);
    time_now = localtime(&cal_time);

    if(period == 0) {
      if(time_now->tm_hour >= athrs) odays = 1; /* are we already past the scheduled update time? (nearest hour) */
      else odays = 0;
    }

    if(period < 0) { /* do it tomorrow */
        odays = 1;
    }

    if(period>0) { /* exponential backoff */
      athrs = time_now->tm_hour + (backoff[period] / 60);
      atmins = time_now->tm_min + (backoff[period] % 60);
      odays = 0;
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_cron_kick: schedule %s at %d:%d\n", odays?"tomorrow":"today", athrs, atmins);

    time_next.tm_sec = 0;
    time_next.tm_min = atmins;
    time_next.tm_hour = athrs;
    time_next.tm_mday  = time_now->tm_mday + odays; /* range doesn't matter, mktime will sort it out */
    time_next.tm_mon = time_now->tm_mon;
    time_next.tm_year = time_now->tm_year;
    time_next.tm_isdst = time_now->tm_isdst;

    cal_time = mktime(&time_next);
    sprintf(otb, "%s %1d\n", CRON_CLI, (period<1)?1:(period+1));

    r.r[0] = 1;
    r.r[1] = (int)cal_time;
    r.r[2] = (int)otb;
    r.r[3] = 0;
    r.r[4] = 0;
    if(_kernel_swi(Cron_AddByUnixTime, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_cron_kick: Cron SWI failed\n");
        return(-1);
    }
    return(0);
}

/* we've been cronned */
int cron_upcall(int n) /* n = 0 (first time), 1, 2, ...7 (+64 minute offset) */
{
    if(line_up) { /* oh dear, line is up, wait for user to finish */
      DBUG_PRINTF(DBUG_LVL_DIAG, "cron_upcall: line busy - rescheduling\n");
      ncma_cron_kick(n); /* do next interval in back-off algorithm */
      return(-1);
    }

    if(ncma_dial()<0) { /* arse, dial failed */
      DBUG_PRINTF(DBUG_LVL_DIAG, "cron_upcall: dial failed - rescheduling\n");
      ncma_cron_kick(n);
      return(-1);
    }

    if(ro_smurf_mounted == 0) {
        if(ncma_mount_ro_smurfs()<0) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "cron_upcall: couldn't mount read-only SMURF\n");
            ncma_hangup();
            ncma_cron_kick(n);
            return(-1);
        }
    }

    ncma_cron_kick(-1); /* force retry for tomorrow */
    ncma_exec_schedboot();
    ncma_hangup();
    return(0);
}


int random_cron_offset(void)
{
    unsigned int seed;

    seed = (unsigned int)clock();
    srand(seed);

    seed = rand(); /* 0 to RAND_MAX */
    seed &= 0xff; /* 0 to 256 */
    if(seed>240) seed = 240; /* limit it */
    return((int)seed);
}


