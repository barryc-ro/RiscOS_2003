/* ncma_nvram.c - handle nvram activity for managed access */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "ncma_nvram.h"
#include "ncma_bootb.h"
#include "ncma_tags.h"
#include "areacode.h"
#include "smcard.h"

#include "DBUG.h"

int nvram_empty(void)
{
    _kernel_swi_regs r;
    char tag[] = "ManagedAccess";

    unsigned char *t1, *t2;
    unsigned int t1b, t2b;

    r.r[0] = (int)tag;
    r.r[1] = 0;
    r.r[2] = 0;

    if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: NVRAM Read SWI (size) failed\n");
        return(1);
    }

    if(r.r[0] != MAX_NVRAM_BUFFER) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: NVRAM size (%d) didn't match expected size (%d)\n", r.r[0], MAX_NVRAM_BUFFER);
        return(1);
    }

    if((nvram_ptr = (unsigned char *)malloc(MAX_NVRAM_BUFFER))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: couldn't claim NVRAM workspace\n");
        return(1);
    }

    r.r[0] = (int)tag;
    r.r[1] = (int)nvram_ptr;
    r.r[2] = MAX_NVRAM_BUFFER;

    if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: NVRAM Read SWI (read) failed\n");
        free(nvram_ptr);
        nvram_ptr = NULL;
        return(1);
    }

    nvram_bytes = MAX_NVRAM_BUFFER;

    if((t1=find_tag_in_block(nvram_ptr, nvram_bytes, NCIIAPIDTag, &t1b, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: NVRAM data contains no IAP info\n");
        free(nvram_ptr);
        nvram_ptr = NULL;
        return(1);
    }

    if((t2=find_tag_in_block(nvram_ptr, nvram_bytes, NCIEnterpriseCertTag, &t2b, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_empty: NVRAM data contains no certificate info\n");
        free(nvram_ptr);
        nvram_ptr = NULL;
        return(1);
    }


    DBUG_PRINTF(DBUG_LVL_DIAG, "nvram_empty: ptr: 0x%x bytes: %d\n", nvram_ptr, nvram_bytes);
    return(1);
}

int build_nvram_info(void)
{
    unsigned char *nuptr, nusize;
    _kernel_swi_regs r;
    char tag[] = "ManagedAccess";



    nusize = ram_eb_bytes + ram_cert_bytes;
    if(nusize > MAX_NVRAM_BUFFER) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_nvram_info: too much data to store in NVRAM\n");
        return(-1);
    }

    if((nuptr = (unsigned char *)malloc(MAX_NVRAM_BUFFER))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_nvram_info: couldn't claim workspace\n");
        return(-1);
    }

    memcpy(nuptr, ram_eb_ptr, ram_eb_bytes);
    memcpy(nuptr + ram_eb_bytes, ram_cert_ptr, ram_cert_bytes);

    r.r[0] = (int)tag;
    r.r[1] = (int)nuptr;
    r.r[2] = nusize;

    if(_kernel_swi(NVRAM_Write, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_nvram_info: NVRAM Write SWI failed\n");
        return(-1);
    }

    if(r.r[0]<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_nvram_info: NVRAM Write SWI returned error %d\n", r.r[0]);
        return(-1);
    }

    if(nvram_ptr) free(nvram_ptr);
    nvram_ptr = nuptr;
    nvram_bytes = nusize;

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_nvram_info: cached %d (%d IAP + %d cert) bytes in NVRAM\n", nvram_bytes, ram_eb_bytes, ram_cert_bytes);

    return(nvram_bytes);
}

int copy_nvram_to_ram(void)
{
    _kernel_swi_regs r;
    char tag[] = "ManagedAccess";

    r.r[0] = (int)tag;
    r.r[1] = 0;
    r.r[2] = 0;
    if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "copy_nvram_to_ram: NVRAM read failed (size)\n");
        return(-1);
    }

    if(r.r[0]<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "copy_nvram_to_ram: NVRAM Read returned error %d\n", r.r[0]);
        return(-1);
    }

    else if(r.r[0]>0) {
        if(nvram_ptr) free(nvram_ptr);
        nvram_bytes = r.r[0];
        if((nvram_ptr = (unsigned char *)malloc(r.r[0]))==NULL) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "copy_nvram_to_ram: failed to claim memory for NVRAM buffer\n");
            return(-1);
        }

        r.r[0] = (int)tag;
        r.r[1] = (int)nvram_ptr;
        r.r[2] = nvram_bytes;
        r.r[0] = (int)tag;
        if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "copy_nvram_to_ram: NVRAM read failed (read)\n");
          return(-1);
        }
    }

    else if(r.r[0] == 0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "copy_nvram_to_ram: got 0 bytes of NVRAM info\n");
        return(-1);
    }

    return(1);
}

/* read the configured scheduled update time from nvram */
int nvram_update_time(void)
{
    _kernel_swi_regs r;
    char tag[] = "ModemDialTime";
    int attime;

    r.r[0] = (int)tag;
    r.r[1] = (int)&attime;
    r.r[2] = 0; /* gimme word value */

    if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_update_time: NVRAM Read SWI failed\n");
        return(-1);
    }

    if(r.r[0]<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_update_time: NVRAM Read SWI error: %d\n", r.r[0]);
        return(-1);
    }

    return(attime);
}

/* offset is signed char, no. of 15 minute intervals from GMT */
int nvram_set_timezone(signed char offset)
{
    unsigned int i;
    _kernel_swi_regs r;
    char tag[] = "TimeZone";

    i = (unsigned int)offset;
    r.r[0] = (int)tag;
    r.r[1] = (int)&i;
    r.r[2] = 0;

    if(_kernel_swi(NVRAM_Write, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_set_timezone: NVRAM Write SWI failed\n");
        return(-1);
    }

    return(0);
}

/* render area code into ptr & return length, or -1 */
int nvram_get_areacode(char *ptr)
{
    _kernel_swi_regs r;
    char tag[] = "LocalDialCode";
    unsigned int ac;

    r.r[0] = (int)tag;
    r.r[1] = (int)&ac;
    r.r[2] = 0; /* gimme word value, shifted down */

    if(_kernel_swi(NVRAM_Read, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_get_areacode: NVRAM Read SWI failed\n");
        return(-1);
    }

    if(r.r[0]<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "nvram_get_areacode: NVRAM Read SWI error: %d\n", r.r[0]);
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "nvram_get_areacode: got word 0x%x calling decoder, buff 0x%x\n", ac, (int)ptr);

    areacode(ac, ptr); /* call ASM routine to turn it into a string */
    DBUG_PRINTF(DBUG_LVL_DIAG, "nvram_get_areacode: area code is \"%s\"\n", ptr);
    return(1);
}





