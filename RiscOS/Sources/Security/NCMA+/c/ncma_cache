/* ncma_cache.c - handle caching of RISC OS tags converted from NCI tag format in either RAM or on the smartcard */
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "smcard.h"
#include "dynalloc.h"

#define PROTOTYPES_INTERNAL
#include "ncma_cache.h"
#include "ncma_utils.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_time.h"
#include "kprintf.h"
#include "DBUG.h"

void unlock_cache(void)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "unlock_cache: unlocking tag cache\n");
    tag_cache.card = 0;
    return;
}

int cache_smartcard(void)
{

    return(0);
}

int cache_info(void)
{
    int l,m;

    kprintf("Tag cache stats:\n\n");

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(tag_cache.tag[l].tag == NULL) break; /* no more tags */
        kprintf("%s (%d) %s",
        			   tag_cache.tag[l].tag,
        			   tag_cache.tag[l].bytes,
        			   tag_cache.tag[l].bytes==0?"MISS":"HIT");

     if(tag_cache.tag[l].bytes != 0) {
        switch(tag_cache.tag[l].mapping) {
            case TAG_MAPPING_STRING:
            case TAG_MAPPING_HOST:
            case TAG_MAPPING_PROXY:
            	 kprintf(" %s\n", (char *)(tag_cache.tag[l].val));
            	 break;

            case TAG_MAPPING_INT:
            case TAG_MAPPING_IP:
            	 kprintf(" 0x%x\n", read_big_word((char *)(tag_cache.tag[l].val)));
            	 break;

            case TAG_MAPPING_SOAK:
            case TAG_MAPPING_PLIP:
            	 m = read_little_word((char *)(tag_cache.tag[l].val));
            	 kprintf(" %s\n", m?"ENABLED":"DISABLED");
            	 break;

            default: kprintf(" ???\n");
            	     break;
        }
     } else {
         kprintf("\n");
     }
    }



    kprintf("\nTag cache base: 0x%x  Bytes used: %d/%d  Tags in cache: %d\n",
    			       tag_cache.base, tag_cache.bytes, tag_cache.max, tag_cache.tags);

    kprintf("Smartcard %s present\n\n", tag_cache.card?"":"not");

    return(0);
}

int cache_enquiry(char *tag, char *buff, int bytes)
{
    int l;

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0) {
            memcpy(buff, tag_cache.tag[l].val, tag_cache.tag[l].bytes>bytes?bytes:tag_cache.tag[l].bytes);
            return(tag_cache.tag[l].bytes);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_enquiry: no such tag \"%s\"\n", tag);
    return(-1);
}

/* return ptr to tag value, & return size in ref. variable */
char *cache_ptr(char *tag, int *bytes)
{
    int l;

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0) {
	    if(bytes != NULL) *bytes = tag_cache.tag[l].bytes;
            return(tag_cache.tag[l].val);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_ptr: no such tag \"%s\"\n", tag);
    return(NULL);
}

int build_ram_cache(void)
{
    int l;
    char *ptr;
    int bytes;
    int tag_bytes;
    int actual_tags;

    unsigned char *tptr;
    unsigned int tbytes;

    unsigned char *matrix_ptr = NULL;
    unsigned int matrix_bytes = 0;

    unsigned char *group_ptr;
    unsigned int group_bytes;

    unsigned int test_mode;


    /* reset cache */
    if(reset_cache()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: cache reset failed\n");
        return(-1);
    }

    bytes = tag_cache.max;
    ptr = tag_cache.base;
    actual_tags = 0;

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: entered\n");

    get_hour_now(); /* find the current hour, so IAP rules can be checked */
    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: hour is %d\n", hour_now);

    /* get some new stuff out of RAM or off the smartcard */

    /* find the IAP Connection matrix */

    if((matrix_ptr = find_tag_in_block(ram_eb_ptr, ram_eb_bytes, NCIIAPConnectMatrixTag, &matrix_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: no IAP Connect Matrix in enterprise block - corporate card?\n");
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: RAM connect matrix 0x%x,%d\n", matrix_ptr, matrix_bytes);
        /* we got a matrix, so search for an active IAP block, based on time-of-day rules */
	  for(group_ptr = NULL;;) {
	      if((group_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIGroupTag, &group_bytes, group_ptr))==NULL) {
	          break; /* no more groups in matrix */
	      }

	      if(test_iap_rule(group_ptr, group_bytes)) { /* see if IAP covers our time frame */
	          DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: IAP selected by rule, 0x%x,%d\n", group_ptr, group_bytes);
		  if((tptr = find_tag_in_block(group_ptr, group_bytes, NCIIAPIDTag, &tbytes, NULL))==NULL) {
		      DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: No ID tag for this IAP - skipping\n");
		  }
		  iap_id = read_big_word((char *)tptr);
		  if(select_scard_iap()<0) {
		      DBUG_PRINTF(DBUG_LVL_ERROR, "build_ram_cache: no matching IAP block on smartcard\n");
		  } else {
		      DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: found s/card symbiote 0x%x,%d\n", sc_iap_ptr, sc_iap_bytes);
		  }
	          break;
	      } else {
	          DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: IAP invalidated by rule\n");
	      }
	  }
	  matrix_ptr = group_ptr; /* matrix ptr is now valid IAP, or NULL */
	  matrix_bytes = group_bytes;
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: RAM at 0x%x, %d, SCARD at 0x%x,%d\n", ram_eb_ptr, ram_eb_bytes, sc_block_ptr, sc_block_bytes);

    for(l=0; ((l<MAX_TAG_CACHE) && (bytes>0));l++) {

        if(tag_cache.tag[l].tag == NULL) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: end of tag list\n");
            break;
        }

	DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: searching for \"%s\" (0x%x) ", tag_cache.tag[l].tag, tag_cache.tag[l].nci_tag);

	tptr = NULL;

	/* first, look through IAP Matrix entries for matches */
	if(matrix_ptr != NULL) { /* if the matrix exists... */
	      if((tptr = find_tag_in_block(matrix_ptr, matrix_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL) {
	      }
	      else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (RAM-IAP)\n");
	      }
	} /* endif matrix */


	if(tptr == NULL) { /* it wasn't in the matrix */
          if((tptr=find_tag_in_block(ram_eb_ptr, ram_eb_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL) { /* not in RAM */
            if(trusted_scard_data && ((tptr=find_tag_in_block(sc_iap_ptr, sc_iap_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL)) { /* not in SC IAP blok*/
              if(trusted_scard_data && ((tptr=find_tag_in_block(sc_eb_ptr, sc_eb_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL)) { /* not on SC */

                if((tptr=find_tag_in_block(nvram_ptr, nvram_bytes, tag_cache.tag[l].nci_tag, &tbytes, NULL))==NULL) { /* not in NVRAM */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "MISS\n");
                  continue;
                } else {
                    DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (NVRAM)\n");
                }
              } else { /* endif not on SC */
                DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (SC)\n");
              }
            } else { /* endif not in SC IAP */
               	DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (SC-IAP)\n");
            }
          }else {/* endif not in RAM */
            DBUG_PRINTF(DBUG_LVL_DIAG, "HIT (RAM)\n");
          }
        } /* endif not in matrix */

        /* found it somewhere */

        tag_bytes = (tbytes<bytes)?tbytes:bytes;
        DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: mapping is %d, tag bytes: %d\n", tag_cache.tag[l].mapping, tag_bytes);
        switch(tag_cache.tag[l].mapping) {

            case TAG_MAPPING_STRING:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_INT:
            	 if(bytes>=tbytes) {
            	     memcpy(ptr, tptr, tbytes);
            	     tag_cache.tag[l].val = ptr;
            	     tag_cache.tag[l].bytes = tbytes;
            	     ptr += tbytes;
            	     bytes -= tbytes;
            	     actual_tags++;
            	 }
            	 break;

            case TAG_MAPPING_HOST:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_IP:
            	 if(bytes>=tbytes) {
            	     memcpy(ptr, tptr, tbytes);
            	     tag_cache.tag[l].val = ptr;
            	     tag_cache.tag[l].bytes = tbytes;
            	     ptr += tbytes;
            	     bytes -= tbytes;
            	     actual_tags++;
            	 }
            	 break;

            case TAG_MAPPING_PROXY:
            	 strncpy(ptr, (char *)tptr, tag_bytes);
            	 *(ptr + tag_bytes) = 0;
            	 tag_cache.tag[l].val = ptr;
            	 tag_cache.tag[l].bytes = tag_bytes+1;
            	 ptr += tag_bytes+1;
            	 bytes -= tag_bytes+1;
            	 actual_tags++;
            	 break;

            case TAG_MAPPING_SOAK:
            	 test_mode = read_big_word((char *)tptr);
            	 if(test_mode & TEST_TAG_SOAK) {
            	     if(bytes>=4) {
            	         write_little_word(ptr, 1);
            	         tag_cache.tag[l].val = ptr;
            	         tag_cache.tag[l].bytes = tbytes;
            	         ptr += tbytes;
            	         bytes -= tbytes;
            	         actual_tags++;
            	         DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: SOAK TEST ENABLED\n");
            	     }
            	 }
            	     break;

            case TAG_MAPPING_PLIP:
            	 test_mode = read_big_word((char *)tptr);
            	 if(test_mode & TEST_TAG_PLIP) {
            	     if(bytes>=4) {
            	         write_little_word(ptr, 1);
            	         tag_cache.tag[l].val = ptr;
            	         tag_cache.tag[l].bytes = tbytes;
            	         ptr += tbytes;
            	         bytes -= tbytes;
            	         actual_tags++;
            	         DBUG_PRINTF(DBUG_LVL_DIAG, "build_ram_cache: PLIP DOWNLOAD ENABLED\n");
            	     }
            	 }
            	     break;

        } /* endswitch tag mappings */
    } /* end forall tags */

    tag_cache.tags = actual_tags;
    tag_cache.bytes = TAG_CACHE_SIZE - bytes;
    tag_cache.free = ptr;


    return(l);
}


int cache_write(char *tag, char *buff, int bytes)
{
    int l;

    if(bytes > (tag_cache.max - tag_cache.bytes)) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "cache_write: no room in tag cache to write data\n");
        return(-1);
    }

    for(l=0; l<MAX_TAG_CACHE; l++) {
        if(caseless_strcmp(tag, (char *)tag_cache.tag[l].tag)==0) {
            memcpy(tag_cache.free, buff, bytes);

            switch(tag_cache.tag[l].mapping) {
                case TAG_MAPPING_STRING:
                case TAG_MAPPING_HOST:
                case TAG_MAPPING_PROXY:
                     *(tag_cache.free + bytes) = 0;
                     bytes++;
                     break;
            }

            tag_cache.tag[l].val = tag_cache.free;
            tag_cache.tag[l].bytes = bytes;
            tag_cache.bytes += bytes;
            tag_cache.free += bytes;
            tag_cache.tags += 1;
            DBUG_PRINTF(DBUG_LVL_DIAG, "cache_write: wrote tag \"%s\"\n", tag);
            return(1);
        }
    }
    DBUG_PRINTF(DBUG_LVL_ERROR, "cache_write: no such tag \"%s\"\n", tag);
    return(-1);
}


int reset_cache(void)
{
    int l;

    if(tag_cache.base == NULL) {
        if((tag_cache.base = (char *)rmalloc(TAG_CACHE_SIZE, "NCMA tag cache"))==NULL) return(-1);
    }

    tag_cache.free = tag_cache.base;
    tag_cache.max = TAG_CACHE_SIZE;
    tag_cache.bytes = 0;
    tag_cache.tags = 0;

    /* bin any old contents... */
    for(l=0; l<MAX_TAG_CACHE; l++) {
        tag_cache.tag[l].val = NULL;
        tag_cache.tag[l].bytes = 0;
    }

    memset(tag_cache.base, 0, TAG_CACHE_SIZE);

    return(0);
}






