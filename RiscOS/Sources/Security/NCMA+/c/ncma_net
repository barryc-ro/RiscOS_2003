// header file for NCMA_CRON.H

/* Begin-Prologue */
#ifndef NCMA_CRON_H
#define NCMA_CRON_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#ifdef PROTOTYPES_INTERNAL
static int backoff[] = {
       0, 1, 2, 4, 8, 16, 32, 64
       };
#else
DECLARE int *backoff;
#endif

#ifndef Cron_AddByUnixTime
#define Cron_AddByUnixTime    0x4ea42
#endif

#define CRON_OFFSET_VARIABLE           "NCMA$CronOffset"
#define CRON_CLI		       "ncma_update"

DECLARE int ncma_cron_kick(int);
DECLARE int cron_upcall(int);
DECLARE int random_cron_offset(void);

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "ncma_utils.h"
#include "ncma_scard.h"
#include "ncma_ncma.h"
#define PROTOTYPES_INTERNAL
#include "ncma_net.h"
#include "ncma_cache.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "ncma_url.h"
#include "ncma_smurf.h"

#include "smcard.h"

#include "DBUG.h"

int ip_ntos(char *b, char *i)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "ip_ntos: word 0x%x\n", *(int *)i);
    sprintf(b, "%d.%d.%d.%d",
      (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3));
    return(0);
}

/* mode is 0 for dial from ROM. 1 for dial from RAM */
int ncma_network_init(int mode) /* set resolver config */
    			    /* set browser proxy */
    			    /* limit browser access */
    			    /* remount SMURFS */
{
    char buff[128];
    int dns[2];
    char *p;
    int l;
    _kernel_swi_regs r;

    unsigned char *tptr;
    unsigned int tbytes;
    unsigned int browser_mode;
    int domain;

    DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: got flags NCMA_NET_%s NCMA_NET_%s_DIAL\n",
    				(mode & NCMA_NET_ROM)?"ROM":"RAM",
    				(mode & NCMA_NET_POST_DIAL)?"POST":"PRE");

    if(cache_enquiry("DNS_PRIMARY", (char *)&dns[0], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_PRIMARY\n");
        return(-1);
    }

    if(cache_enquiry("DNS_BACKUP", (char *)&dns[1], 4)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for DNS_BACKUP\n");
        return(-1);
    }

    ip_ntos(buff, (char *)&dns[0]);
    p = buff;
    l = strlen(p);
    p += l;
    *p++ = 0x20;
    ip_ntos(p, (char *)&dns[1]);

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting resolvers to %s\n", buff);


    if(write_os_var(RESOLVER_ENV_VAR_NAME, buff, strlen(buff))<0) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: failed setting resolvers\n");
        return(-1);
    }

    memset(buff, 0, 128);
    if((domain=cache_enquiry("ISP_DOMAIN", buff, 128))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: cache enquiry failed for ISP_DOMAIN\n");
        return(-1);
    }

    if(domain>0) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: setting domain to \"%s\"\n", buff);

      if(write_os_var(DOMAIN_ENV_VAR_NAME, buff, strlen(buff))<0) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting domain\n");
          return(-1);
      }
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: no domain name specified, using %s\n", DEFAULT_DOMAIN_NAME);
          if(write_os_var(DOMAIN_ENV_VAR_NAME, DEFAULT_DOMAIN_NAME, strlen(DEFAULT_DOMAIN_NAME))<0) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: failed setting domain\n");
            return(-1);
          }
    }

    sprintf(buff, "ResolverConfig");
    r.r[0] = (int)buff;
    if(_kernel_swi(0x5, &r, &r)!=NULL) { /* OS_Cli */
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: resolver config OSCLI failed\n");
      return(-1);
    }

    if(mode & NCMA_NET_RAM) { /* determine from RAM/SC details whether browser limiting applies */
      if((tptr = find_tag_in_block(sc_eb_ptr, sc_eb_bytes, NCIBrowserModeTag, &tbytes, NULL))==NULL) {
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_metwork_init: didn't see a BrowserModeTag, so I'm leaving it as it was.\n");
      } else {
        browser_mode = read_big_short((char *)tptr);
        if(browser_mode == NCIBrowserModeLimited) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: restricting browser access\n");
          if(limit_browser_url(mode)<0)
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser limiting failed\n");
        } else if(browser_mode == NCIBrowserModeUnrestricted) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: derestricting browser access\n");
            if(unlimit_browser_url()<0)
              DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser unlimiting failed\n");
        } else {
            DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: eh? browser mode = 0x%x ??\n", browser_mode);
        }
      }
    } else { /* dialling from ROM - automatically restrict browser */
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: ROM dialling...forcing browser restrictions\n");
      limit_browser_url(mode);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: configuring browser\n");

    if(browser_proxy()<0)
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: browser proxy/config failed\n");

    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: unmounting SMURFS\n");

    if(mode & NCMA_NET_POST_DIAL) { /* only do file system stuff after the line is up */
      if(ncma_dismount_smurfs()<0)
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: SMURFS dismount failed\n");

      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: mounting SMURFS\n");

      if(ncma_mount_smurfs()<0)
          DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_network_init: SMURFS mount failed\n");
    }

    /* if we're in a browser limited mode - we want to automatically fetch the URL */
    if(mode & NCMA_NET_RAM) { /* only applicable on RAM dials - relationship server stuff sorts out its own URL */
      if(browser_mode == NCIBrowserModeLimited) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_network_init: limited browser - fetching URL now\n");
          ncma_url_user();
      }
    }

    return(0);

}
