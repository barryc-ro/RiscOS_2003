/* ncma_mime.c - handle our MIME type, application/nc-smartcard */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "machine.h"
#include "dynalloc.h"
#define PROTOTYPES_INTERNAL
#include "ncma_mime.h"
#include "ncma_tags.h"
#include "ncma_nvram.h"
#include "ncma_utils.h"
#include "ncma_bootb.h"
#include "ncma_url.h"
#include "ncma_cache.h"
#include "ncma_scard.h"
#include "ncma_net.h"
#include "ncma_time.h"
#include "ncma_auth.h"

#include "smcard.h"

#include "DBUG.h"

int handle_mime_object(char *file)
{
    FILE *fp;
    fpos_t checkpoint;

    unsigned int buff;
    unsigned int ram_content_bytes;
    unsigned int sc_content_bytes;

    unsigned char *alt_ptr;
    unsigned int alt_bytes;

    unsigned char *eb_ptr;
    unsigned int eb_bytes;

    unsigned char *hash_ptr;
    unsigned int hash_bytes;

    unsigned char *alt_hash_ptr;
    unsigned int alt_hash_bytes;

    unsigned char *eid_ptr;
    unsigned int eid_bytes;

    unsigned char *sc_temp_ptr;

    long int ram_filepos;
    long int sc_filepos;

    unsigned char *tptr;
    unsigned int tbytes, fbytes;
    unsigned int tag;

    unsigned char *time_ptr, *date_ptr, *dst_ptr;
    unsigned int time_bytes, date_bytes, dst_bytes;

    int dst_val;

    int poll;

    char *dptr;

    _kernel_swi_regs r;

    if((fp=fopen(file, "r"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: couldn't open file\n");
        return(-1);
    }

    fread(&buff, sizeof(unsigned int), 1, fp);

    if((tag = read_big_word((char *)&buff)) != NCIServerStatusTag) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: bogus NCIServerStatusTag 0x%x\n",tag);
        fclose(fp);
        return(-1);
    }

    fread(&buff, sizeof(char), 2, fp); /* skip tag length info */
    fread(&buff, sizeof(char), 2, fp); /* get server status */
    last_mime_error = read_big_short((char *)&buff);

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: server status 0x%x\n", last_mime_error);

    switch(last_mime_error) {
        case MIME_ERROR_NOT_NC:
        case MIME_ERROR_NOT_MA:
	     return(-1);
             break;

        case MIME_ERROR_NO_ERROR:
             break;

      default: DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: unrecognized NCIServerStatusTag status 0x%x\n", last_mime_error);
      	       fclose(fp);
      	       return(-1);
      	       break;
    }


    fread(&buff, sizeof(unsigned int), 1, fp);

    if((tag=read_big_word((char *)&buff)) != NCIRAMContentTag) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: bogus NCIRAMContentTag 0x%x\n",tag);
        fclose(fp);
        return(-1);
    }

    fread(&buff, sizeof(char), 2, fp);
    ram_content_bytes = read_big_short((char *)&buff);

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: RAM contents: %d bytes\n", ram_content_bytes);

    ram_filepos = ftell(fp);
    fseek(fp, (long)ram_content_bytes, SEEK_CUR); /* skip the RAM block */

    fgetpos(fp, &checkpoint);
    fread(&buff, sizeof(unsigned int), 1, fp);

    if((tag=read_big_word((char *)&buff)) != NCISmartCardContentTag) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: bogus or absent NCISmartCardContentTag 0x%x\n",tag);
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: assuming no smartcard info data - rewinding for time data\n");
	sc_content_bytes = 0;
	fsetpos(fp, &checkpoint); /* go back to those four bytes */
    } else {
      fread(&buff, sizeof(char), 2, fp);
      sc_content_bytes = read_big_short((char *)&buff);
      DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: SC contents: %d bytes\n", sc_content_bytes);

      sc_filepos = ftell(fp);
      fseek(fp, (long)sc_content_bytes, SEEK_CUR); /* skip the smartcard block */

      if((sc_temp_ptr = (unsigned char *)rmalloc(sc_content_bytes, "SC Buffer"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: couldn't claim memory for smartcard buffer\n");
        fclose(fp);
        return(-1);
      }

    }

    if(ram_block_ptr != NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: freeing old RAM connection matrix...\n");
        rmfree(ram_block_ptr); /* release the old connection matrix */
    }

    if((ram_block_ptr = (unsigned char *)rmalloc(ram_content_bytes, "Connect Matrix"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: couldn't claim memory for connection matrix\n");
        fclose(fp);
        return(-1);
    }


    if((fbytes=fread(ram_block_ptr, 1, ram_content_bytes, fp)) != 0) { /* trailing data */
       DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: read %d bytes of trailing data\n", fbytes);

       if((dptr = strstr((char *)ram_block_ptr, DONE_URL_SENTINEL))!=NULL) {
         if(done_url_ptr != NULL) free(done_url_ptr);

         if((done_url_ptr = (char *)malloc(strlen(dptr)))!=NULL) {
             strncpy(done_url_ptr, dptr, strlen(dptr));
             DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: got DONE_URL=%s\n", done_url_ptr);
         }

         if((dptr = strstr((char *)ram_block_ptr, ERROR_URL_SENTINEL))!=NULL) {
           if(error_url_ptr != NULL) free(error_url_ptr);

           if((error_url_ptr = (char *)malloc(strlen(dptr)))!=NULL) {
               strncpy(error_url_ptr, dptr, strlen(dptr));
               DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: got ERROR_URL=%s\n", error_url_ptr);
           }
         }
       } else { /* no URL info, must be time stuff */
         DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: no URLs, searching for TimeZone info\n");
         if((tptr = find_tag_in_block(ram_block_ptr, fbytes, NCITimeZoneTag, &tbytes, NULL))!=NULL) { /* aha, got a time zone */
           DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: found - setting TimeZone to '%d'\n", *(signed char *)(tptr+1));
         } else {
             DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: no TimeZone information\n");
         }

	 if((dst_ptr = find_tag_in_block(ram_block_ptr, fbytes, NCIDSTFlagTag, &dst_bytes, NULL))!=NULL) {
	     dst_val = read_big_short((char *)dst_ptr);
	     DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_onject: DST Flag is %sSET\n", dst_val?"":"UN");
	     ncma_nvram_set_dst(dst_val);
	 } else {
	     DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: no DST information in block\n");
	 }

         if(((time_ptr = find_tag_in_block(ram_block_ptr, fbytes, NCITimeTag, &time_bytes, NULL))!=NULL) &&
            ((date_ptr = find_tag_in_block(ram_block_ptr, fbytes, NCIDateTag, &date_bytes, NULL))!=NULL)) {
                *(time_ptr + time_bytes) = 0; /* terminate, will overwrite timezone tag */
                *(date_ptr + date_bytes) = 0; /* terminate, will overwrite time tag */
                set_time_now((char *)date_ptr, (char *)time_ptr);
                if(tptr) nvram_set_timezone(*(signed char *)(tptr+1));
            }
       } /* endif time stuff */

    } /* endif trailing data */

    /* ok, now rewind and slurp in the RAM contents */
    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: loading RAM content\n");

    fseek(fp, ram_filepos, SEEK_SET);

    if(fread(ram_block_ptr, ram_content_bytes, 1, fp) != 1) { /* oh dear */
      DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: couldn't read RAM contents\n");
      fclose(fp);
      return(-1);
    }

    /* fast forward, and slurp in the smartcard contents */
    if(sc_content_bytes) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: loading smartcard content\n");
      fseek(fp, sc_filepos, SEEK_SET);

      if(fread(sc_temp_ptr, sc_content_bytes, 1, fp) != 1) { /* oh dear */
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: couldn't read smartcard contents\n");
        fclose(fp);
        return(-1);
      }
    }

    fclose(fp);


    /* do something clever to authenticate the RAM contents */

    /* now write the smartcard block */



    if(sc_content_bytes == 0) {
        find_enterprise_id(); /* use the current smartcard enterprise id */
        goto skip_smartcard_stuff;
    }


    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: parsing smartcard contents\n");


    /* first, ascertain whether there's an alternate 1-800 number in the smartcard block */

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: searching SC data for NCIBeginSignatureTag\n");

    if((eb_ptr = find_tag_in_block(sc_temp_ptr, sc_content_bytes, NCIBeginSignatureTag, &eb_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: no NCIBeginSignatureTag in smartcard block\n");
        return(-1);
    } /* ok, we've seen one, but is there another? */

    if((hash_ptr = find_tag_in_block(sc_temp_ptr, sc_content_bytes, NCISignatureTag, &hash_bytes, eb_ptr))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: SC enterprise block is not signed\n");
        return(-1);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: searching SC data AGAIN for NCIBeginSignatureTag\n");

    if((alt_ptr = find_tag_in_block(sc_temp_ptr, sc_content_bytes, NCIBeginSignatureTag, &alt_bytes, eb_ptr))==NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: no alternate 1-800 block in SC data\n");
    } else {
        if((alt_hash_ptr = find_tag_in_block(sc_temp_ptr, sc_content_bytes, NCISignatureTag, &alt_hash_bytes, alt_ptr))==NULL) {
            DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: SC alternate 1-800 block is not signed - discarding\n");
            alt_ptr = NULL;
        }
    }

    if(alt_ptr == NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: write 1 block: 0x%x, %d + 0x%x, %d (%d)\n",
    			       (eb_ptr-6), (eb_bytes+6)+(hash_bytes+6), 0, 0);

        r.r[2] = NULL;
        r.r[3] = 0;
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: write 2 blocks: 0x%x, %d + 0x%x, %d (%d)\n",
    			       (eb_ptr-6), (eb_bytes+6)+(hash_bytes+6), (alt_ptr-6), (alt_bytes+6)+(alt_hash_bytes+6));

        r.r[2] = (int)(alt_ptr-6); /* backtrack to include tag and length */
        r.r[3] = alt_bytes+6+alt_hash_bytes+6; /* add 6 to include tag and length, and same for hash */
    }

    r.r[0] = (int)(eb_ptr-6); /* backtrack to include tag and length */
    r.r[1] = eb_bytes+6+hash_bytes+6; /* add 6 to include tag and length, and same for hash */

    /* finally, what's our enterprise id? */
    if((eid_ptr = find_tag_in_block(eb_ptr, eb_bytes, NCIEnterpriseIDTag, &eid_bytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: no NCIEnterpriseIDTag in s/c block\n");
        return(-1);
    }

    enterprise_id = read_big_word((char *)eid_ptr);

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: enterprise ID is now 0x%x (%d)\n", enterprise_id, enterprise_id);


    /* smartcard contents authenticated by the NCBootblock module */
    r.r[4]  = enterprise_id;

  /* need to do the enterprise id, ram enterprise block, and certificate look ups here
       so that they're ready for authentication */


    if(_kernel_swi(NCBootblock_Write, &r, &r) != NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: NCBootblock_Write SWI failed\n");
        return(-1);
    }

    switch(r.r[0]) {
        case 0:
             break;
        case -1:
             DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: Write SWI failed: not authentic\n");
             return(-1);
        case -2:
             DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: Write SWI failed: block too big\n");
             return(-1);
        case -3:
             DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: Write SWI failed: bootblock read only\n");
             return(-1);
        case -4:
             DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: Write SWI failed: enterprise block read only\n");
             return(-1);

        case -5:
             DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: Write SWI failed: file write error\n");
             return(-1);
    }

    /* wait until NCBootblock has finished writing */
    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: smartcard write ok, waiting for completion\n");
    if((poll = poll_bootblock_write())<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: smartcard write poll failed\n");
        return(-1);
    }

    if(poll == 0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: smartcard write failed\n");
        return(-1);
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: smartcard write completed ok\n");
    }


    if(sc_temp_ptr != NULL) rmfree(sc_temp_ptr); /* lose the temporary smartcard buffer */
    sc_temp_ptr = NULL;

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: reading back smartcard block\n");

    if(fetch_sc_bootblock()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: smartcard read failed\n");
        return(-1);
    }

    /* rebuild ram cache */

    skip_smartcard_stuff: /* SKIP_SMARTCARD_STUFF LABEL */

    ram_block_bytes = ram_content_bytes;

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: seeking RAM enterprise block\n");
    if(find_ram_enterprise_block()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: RAM enterprise block lookup failed\n");
        return(-1);
    }

    /* verify the RAM contents here */
    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: authenticating RAM contents\n");
    if(ncma_auth(ram_eb_ptr, ram_eb_bytes, ram_sig_ptr, ram_sig_bytes, ram_cert_ptr, ram_cert_bytes)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: RAM authentication failed\n");

#ifdef AUTHENTICATE_SIGNATURES
        return(-1);
#else
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: overriding auth result\n");
#endif

    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: RAM authentication succeeded\n");
    }


    DBUG_PRINTF(DBUG_LVL_DIAG,"handle_mime_object: rebuilding RAM cache\n");

    if(build_ram_cache()<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: rebuild ram cache failed\n");
        return(-1);
    }
#if 0
    /* it'd be nice to do this here, but there are now too many cases to make it general */
    /* redo network variables */

    DBUG_PRINTF(DBUG_LVL_DIAG, "handle_mime_object: resetting network parameters\n");

    if(ncma_network_init(NCMA_NET_RAM | NCMA_NET_POST_DIAL)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "handle_mime_object: network init failed\n");
        return(-1);
    }
#endif

    return(0);

}





