/* ncma_dial.c - handle interface to NCDialUI stuff */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "machine.h"
#include "vectors.h"

#define PROTOTYPES_INTERNAL
#include "ncma_dial.h"
#include "DBUG.h"

int ncma_dial(void)
{
#ifdef ETHERNET
  ncma_trans = Trans_DialOK;
  setcallback();
  return(0);
#else
  _kernel_swi_regs r;

  r.r[0] = 0;
  if(_kernel_swi(NCDialUI_Start, &r, &r)!=NULL) {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_dial: dialUI SWI failed\n");
      return(-1);
  }
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dial: DIAL OK\n");
  return(0);
#endif
}

int ncma_dial_quiet(void)
{
#ifdef ETHERNET
  ncma_trans = Trans_DialOK;
  setcallback();
  return(0);
#else
  _kernel_swi_regs r;

  if(_kernel_swi(NCDial_Dial, &r, &r)!=NULL) {
      DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_dial: dial SWI failed\n");
      return(-1);
  }
  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dial: DIAL OK\n");
  return(0);
#endif
}

int ncma_hangup(void)
{
#ifdef ETHERNET
    ncma_trans = Trans_HUP;
    setcallback();
    return(0);
#else
    _kernel_swi_regs r;

    if(_kernel_swi(NCDial_Hangup, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_hangup: HUP SWI failed\n");
        return(-1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_hangup: HUP OK\n");
    return(0);
#endif
}

int set_ppp_timeout(void)
{
#ifndef ETHERNET
    _kernel_swi_regs r;
    _kernel_oserror *e;

    r.r[0] = 0;
    r.r[1] = PPP_DEFAULT_UNIT;
#ifdef DEBUG_DISCONNECT
    r.r[2] = 60;
#else
    r.r[2] = PPP_DEFAULT_TIMEOUT;
#endif

    if((e=_kernel_swi(PPP_AlterSettings, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "set_ppp_timeout: PPP_AlterSettings SWI failed: %d %s\n", e->errnum, e->errmess);
        return(-1);
    }
#endif
    DBUG_PRINTF(DBUG_LVL_DIAG, "set_ppp_timeout: PPP unit %d default timeout %d\n", PPP_DEFAULT_UNIT,
    			       PPP_DEFAULT_TIMEOUT);
    return(0);
}

int set_ppp_timeout_long(void)
{
#ifndef ETHERNET
    _kernel_swi_regs r;
    _kernel_oserror *e;

    r.r[0] = 0;
    r.r[1] = PPP_DEFAULT_UNIT;
#ifdef DEBUG_DISCONNECT
    r.r[2] = 60;
#else
    r.r[2] = PPP_DEFAULT_TIMEOUT_LONG;
#endif

    if((e=_kernel_swi(PPP_AlterSettings, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "set_ppp_timeout_long: PPP_AlterSettings SWI failed: %d %s\n", e->errnum, e->errmess);
        return(-1);
    }
#endif
    DBUG_PRINTF(DBUG_LVL_DIAG, "set_ppp_timeout_long: PPP unit %d default timeout %d\n", PPP_DEFAULT_UNIT,
    			       PPP_DEFAULT_TIMEOUT_LONG);
    return(0);
}

int ncma_ppp_info(DIAL_INFO *d)
{
    _kernel_swi_regs r;

    r.r[0] = 0;
    r.r[1] = PPP_DEFAULT_UNIT;
    if(_kernel_swi(PPP_Status, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_ppp_info: PPP_Status SWI failed\n");
        return(-1);
    }

    d->default_timeout = r.r[2];
    d->current_timeout = r.r[3];

    r.r[0] = 1;
    if(_kernel_swi(PPP_Status, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_ppp_info: PPP_Status SWI failed\n");
        return(-1);
    }

    d->line_status = r.r[2];
    d->connection_phase = r.r[3];
    return(1);
}

char *ncma_ppp_phase_string(int i)
{
    static char *ppp_phases[] = {
        "Dead",
        "Establish",
        "Authenticate",
        "Network",
        "Terminate",
        "Bad Phase"
    };

    if(i>5) i=5;

    return(ppp_phases[i]);
}
