#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */

#define PROTOTYPES_INTERNAL
#include "module.h"
#include "DBUG.h"
#include "machine.h"
#include "vectors.h"
#include "ncma_cmds.h"
#include "ncma_swis.h"
#include "ncma_ncma.h"
#include "ncma_scard.h"
#include "ncma_dial.h"
#include "ncma_uid.h"
#include "dynalloc.h"

#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

/* code */

_kernel_oserror *module_init(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror f = {0x00810800, "NCManagedAccess failed to initialize."}, *e = NULL;
    _kernel_swi_regs r;
    static char keyword[] = "verbose/s,file/k,debug/k/e";
    static char registry_fvar[] = "Alias$@RunType_f94";
    static char registry_falias[] = "ncma_scload %*0";

    static int args[32];
    char *argp, *debug_file;
    int debug_lvl = 0;

    module_wsp = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
    r.r[0] = (int)module_wsp;
    TinyError = _kernel_swi(TinySupport_Share, &r, &r);
#endif

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   memset((char *)args, 0, 32 * sizeof(int));
   _kernel_swi(OS_ReadArgs, &r, &r);


   if(args[0]) quiet = 0;

   QUIET printf("RISC OS NCManagedAccess Version %s\n", NCMA_VERSION);

   if(args[1] != 0) debug_file = (char *)args[1];
   else debug_file = NULL;

   if(args[2]) { /* debug value present */
     argp = (char *)args[2];
     if(*argp++ == 0) {
       debug_lvl = *((int *)argp);
       if(debug_lvl <0) debug_lvl = 0;
       if(debug_lvl >5) debug_lvl = 5;
       if(debug_file == NULL) DBUG_FOPEN("stdout");
       else DBUG_FOPEN(debug_file);
       DBUG_LEVEL(debug_lvl);
       QUIET {
         printf("ncma_init: debug level set to %d\n", debug_lvl);
         if(debug_file != NULL) printf("ncma_init: debug file: %s\n", debug_file);
       }
     }
   }

   QUIET printf("ncma_init: initialising memory subsystem...\n");
   rminit();

   QUIET printf("ncma_init: registering resources...\n");
   resource_init();

   if(use_dynamic_areas) {
     QUIET printf("ncma_init: dynamic area support detected...\n");
   } else {
     QUIET printf("ncma_init: no dynamic area support found...\n");
   }

   QUIET printf("ncma_init: claiming event vector...\n");
   e = module_claimv();
   if(e) {
     e = &f;
     goto out;
   }

   QUIET printf("ncma_init: enabling event...\n");
   e = module_event_enable();
   if(e) {
     e = &f;
     goto out;
   }

   QUIET printf("ncma_init: initialising ncma subsystem...\n");

   if(ncma_ncma_init()<0) {
     QUIET printf("ncma_init: ncma init failed.\n");
     e = &f;
     goto out;
   };

   init_unique_id();

   ncma_state = State_NCMAInit;

  /* do stuff to handle our filetype */

  r.r[0] = (int)registry_fvar;
  r.r[1] = (int)args;
  r.r[2] = 0x80000000;
  r.r[3] = 0;
  r.r[4] = 0;
  _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r);

#ifdef LEAVE_EXISTING_FILETYPE
  if(r.r[2] == 0) { /* filetype not set */
#endif
    r.r[0] = (int)registry_fvar;
    r.r[1] = (int)registry_falias;
    r.r[2] = strlen(registry_falias);
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);
#ifdef LEAVE_EXISTING_FILETPYE
  }
#endif

   return ((_kernel_oserror *)0);

out:
   QUIET printf("ncma_init: Bummer!\n");
   return (e);
}



_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &ncma_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);
    return((_kernel_oserror *)NULL);

}


_kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &ncma_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);

}

void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{
  static char filetype_string[10] = "SCBBlk  ";

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma: service call.\n");
  switch(sn) {

    case Service_NCDialUIStatus:
    	 switch(r->r[2]) {

#if 0
	     case 0x93: /* connected */
#endif
             case 0x4: /* IP layer started */
	     	  ncma_trans = Trans_DialOK;
	     	  setcallback();
	     	  break;

	     case 0x81: /* no dial tone */
	     case 0x82: /* line busy */
	     case 0x83: /* no carrier */
	     case 0x84: /* server not responding */
	     case 0x85: /* timeout in script operation */
	     case 0x86: /* unspecified error */
	     	  ncma_trans = Trans_DialBad;
	     	  setcallback();
	     	  break;

    	     default:
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_svc_handler: unrecognized NCDialUI status code 0x%x\n", r->r[2]);
    	     	  break;
    	 }

    	 break;

    case REGISTRY_STATUS:
  	  registry_status = r->r[2];
     	  registry_delta = r->r[4];
     	  ncma_trans = Trans_Registry;
     	  setcallback();
       	  break;

    case Service_Shutdown:
    	 if(prevent_shutdown == 1) {
    	    r->r[1] = 0; /* whoah, there, shutdown! */
    	    ncma_trans = Trans_Shutdown;
    	    setcallback();
    	 }
    	 break;

    case Service_ShutdownComplete:
    	 ncma_trans = Trans_ShutdownComplete;
    	 setcallback();
    	 break;

    case Service_Standby:
    	 if((r->r[0] & 1) == 0) { /* box waking up */
    	     ncma_trans = Trans_PowerUp;
    	     setcallback();
    	 }
    	 break;

    case Service_LookupFileType:
    	 if(r->r[2] == REGISTRY_FTYPE) {
    	   r->r[1] = 0;
    	   r->r[2] = *(int *)filetype_string;
    	   r->r[3] = *(int *)&filetype_string[4];
    	 }
    	 break;

    case Service_PPPTimingOut:
         if(ignore_ppp_timeout) { /* don't claim */
           ignore_ppp_timeout = 0; /* reset ignore flag */
         } else { /* claim svc call to prevent shutdown */
           r->r[1] = 0; /* claim it */
    	   ncma_trans = Trans_PPPTimeout;
    	   setcallback();
    	 }
    	 break;


    default:
         DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_svc_handler: unrecognized service call.\n");
         break;
  }
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
#ifdef USE_TINY
  _kernel_swi_regs r;
  if ( TinyError == NULL ) _kernel_swi( TinySupport_Die, &r, &r);
#endif


  QUIET printf("ncma_final: cancelling timeouts...\n");
  canceltimeout();

  QUIET printf("ncma_final: releasing events...\n");
  module_event_disable();
  module_releasev();

  QUIET printf("ncma_final: releasing memory resources...\n");
  rmfree_all();

  QUIET printf("ncma_final: freeing resources...\n");
  resource_final();

  QUIET printf("ncma_final: done.\n");
  DBUG_FCLOSE();

  return((_kernel_oserror *)NULL);
}





