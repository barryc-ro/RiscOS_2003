/* Code to handle Smurfs for managed access.
   Plenty of scope for gags in here!
*/

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_smurf.h"
#include "ncma_scard.h"
#include "ncma_cache.h"

#include "DBUG.h"


int ncma_mount_smurfs(void)
{
    ro_smurf_mounted = (ncma_mount_ro_smurfs()>0);
    rw_smurf_mounted = (ncma_mount_rw_smurfs()>0);
    if(ro_smurf_mounted) return(1);
    return(-1);
}

int ncma_mount_ro_smurfs(void) /* mount some read-only smurfs */
{
    char *server, *path, *type, *user, *pass;

    if((server = cache_ptr("CSFS_SERVERRO", NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_SERVERRO defined\n");
    }

    if((path = cache_ptr("CSFS_PATHRO", NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_PATHRO defined\n");
    }

    if((type = cache_ptr("CSFS_TYPERO", NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_TYPERO defined\n");
    }

    if((user = cache_ptr("CSFS_USERRO", NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_USERRO defined\n");
    }

    if((pass = cache_ptr("CSFS_PASSWDRO", NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: no CSFS_PASSWDRO defined\n");
    }



    if(ncma_mount_smurf(type, server, path, SMURF_RO_MOUNT, user, pass)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_ro_smurfs: primary SMURF mount failed\n");
        return(-1);
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_ro_smurfs: primary SMURF ok\n");
    }
    return(1);
}

#define MULTI_MOUNT(mmptr,mmtag,mmbackup)    if((mmptr = cache_ptr(#mmtag, NULL))==NULL) { \
       DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no %s, trying %s\n", #mmtag, #mmbackup); \
       if((mmptr = cache_ptr(#mmbackup, NULL))==NULL) { \
           DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: no %s either - aborting\n", #mmbackup); \
           return(-1); \
       } \
   }

int ncma_mount_rw_smurfs(void) /* mount read-write smurfs */
{
   char *server, *path, *type, *user, *pass;

    MULTI_MOUNT(server, CSFS_SERVERRW, CSFS_SERVERRO)
    MULTI_MOUNT(path, CSFS_PATHRW, CSFS_PATHRO)
    MULTI_MOUNT(type, CSFS_TYPERW, CSFS_TYPERO)
    MULTI_MOUNT(user, CSFS_USERRW, CSFS_USERRO)
    MULTI_MOUNT(pass, CSFS_PASSWDRW, CSFS_PASSWDRO)


    if(ncma_mount_smurf(type, server, path, SMURF_RW_MOUNT, user, pass)<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_mount_rw_smurfs: user SMURF mount failed\n");
        return(-1);
    } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_mount_rw_smurfs: user SMURF ok\n");
    }
    return(1);
}

int ncma_mount_smurf(char *svc, char *ip, char *path, char *mount, char *user, char *password)
{
    _kernel_swi_regs r;
    _kernel_oserror *e;

    if(!(svc && ip && path && mount)) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "mount_smurf: insufficient mount details - skipping\n");
        return(-1);
    }

    if(!(user && password)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "mount_smurf: insufficient user/passwd info- trying anyway\n");
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "mount_smurf: %s mount on %s:%s as %s (user: %s pass: %s)\n",
    			       svc, ip, path, mount, user, password);

    r.r[0] = 0x0; /* write thru, IP address is textual */
    r.r[1] = (int)svc;
    r.r[2] = (int)ip;
    r.r[3] = (int)path;
    r.r[4] = (int)mount;
    r.r[5] = (int)user;
    r.r[6] = (int)password;

    if((e=_kernel_swi(CSFS_Mount, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "mount_smurf: CSFS_Mount SWI for \"%s\" failed: %d \"%s\"\n", mount, e->errnum, e->errmess);
        return(-1);
    }

    return(1);
}

int ncma_dismount_smurfs(void)
{
    ro_smurf_mounted = (ncma_dismount_ro_smurfs()>0)?0:1;

    rw_smurf_mounted = (ncma_dismount_rw_smurfs()>0)?0:1;

    return(0);
}

int ncma_dismount_ro_smurfs(void)
{
    return(ncma_dismount_smurf(SMURF_RO_MOUNT));
}

int ncma_dismount_rw_smurfs(void)
{
    return(ncma_dismount_smurf(SMURF_RW_MOUNT));
}

int ncma_dismount_smurf(char *path)
{
    _kernel_swi_regs r;

    r.r[0] = 0;
    r.r[1] = (int)path;

    if(_kernel_swi(CSFS_Dismount, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurf: failed for \"%s\"\n", path);
        return(-1);
    }
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncma_dismount_smurf: dismounted %s\n", path);
    return(1);
}







