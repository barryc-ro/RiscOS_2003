#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ncma_cmds.h"
#include "ncma_ncma.h"
#include "ncma_utils.h"
#include "ncma_url.h"
#include "ncma_scard.h"
#include "ncma_cache.h"
#include "ncma_mime.h"
#include "machine.h"
#include "vectors.h"
#include "kprintf.h"
#include "DBUG.h"

int cmd_ncma_nullcmd(char *s, int n)
{
  return(0);
}

int cmd_ncma_status(char *s, int n)
{
    kprintf("cmd_ncma_status: last state: %s   last trans: %s\n",
    			       	state_string(ncma_state), trans_string(ncma_trans));

    kprintf("cmd_ncma_status: registry state: 0x%x registry delta: 0x%x\n",
    			       	registry_status, registry_delta);

    kprintf("cmd_ncma_status: NCMA started: %s\n", ncma_started?"Yes":"No");

    kprintf("cmd_ncma_status: prevent shutdown: %s\n", prevent_shutdown?"Yes":"No");

    return(0);
}

int cmd_ncma_urc(char *s, int n)
{
    int bytes;

    bytes = strterm(s);
    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ncma_urc: got %d args as %d bytes in \"%s\"\n", n, bytes, s);

    if(strstr(s, "start")) { /* it's a start URL */
      ncma_trans = Trans_URLStart;
      setcallback();
    }

    if(strstr(s, "pinack")) { /* It's a PIN request */
      validate_pin(s); /* state transition will be driven by AUTH status calls from the registry / sc layer */
    }

    if(strstr(s, "alterpin")) { /* user wants to change their PIN */
      ncma_trans = Trans_URLChangePIN;
      setcallback();
    }

    if(strstr(s, "unblock")) { /* It's the system unblock PIN */
      do_unblock_pin(s); /* state transition will be driven by unblocking events from SCTransport */
    }

    if(strstr(s, "changeack")) { /* It's a PIN change request */
      change_pin(s); /* state transition will by driven by AUTH status calls from the registry / sc layer */
    }

    if(strstr(s, "changenak")) { /* User doesn't want to change PIN */
      ncma_trans = Trans_URLLeavePIN;
      setcallback();
    }


    if(strstr(s, "retry")) { /* It's a CONFIRM off the bad PIN screen */
      ncma_trans = Trans_URLRetry;
      setcallback();
    }

    if(strstr(s, "mismatch")) { /* It's a confirm off the mismatched PINs screen */
      ncma_trans = Trans_URLMismatchAck;
      setcallback();
    }

    if(strstr(s, "downloadack")) { /* It's a radio button off the download screen */

      ncma_trans = Trans_URLDownloadMin; /* default to a minimum download */

#ifdef POINTLESS
      if(strstr(s, "MIN")) {
          ncma_trans = Trans_URLDownloadMin;
      }

      else if(strstr(s, "MAX")) {
#else
      if(strstr(s, "MAX")) {
#endif
          ncma_trans = Trans_URLDownloadMax;
      }

      else if(strstr(s, "SCHED")) {
          ncma_trans = Trans_URLDownloadSched;
      }

      setcallback();
    }

    if(strstr(s, "downloadnak")) { /* it's a disconnect off the download screen */
      ncma_trans = Trans_URLDownloadNak;
      setcallback();
    }

    if(strstr(s, "connectack")) { /* It's an OK off the connect screen */
      ncma_trans = Trans_URLConnect;
      setcallback();
    }

    if(strstr(s, "connectnak")) { /* It's a cancel off the connect screen */
      ncma_trans = Trans_URLConnectNak;
      setcallback();
    }

    if(strstr(s, "movedack")) { /* the box has moved */
      ncma_trans = Trans_URLMovedAck;
      setcallback();
    }

    if(strstr(s, "movednak")) { /* the box hasn't moved */
      ncma_trans = Trans_URLMovedNak;
      setcallback();
    }

    if(strstr(s, "disconnectack")) { /* It's an OK off the connect screen */
      ncma_trans = Trans_URLDisconnectAck;
      setcallback();
    }

    if(strstr(s, "disconnectnak")) { /* It's a cancel off the connect screen */
      ncma_trans = Trans_URLDisconnectNak;
      setcallback();
    }

    if(strstr(s, "standby")) { /* initiate a STANDBY sequence */
        prevent_shutdown = 1;
        ncma_trans = Trans_Shutdown;
        setcallback();
    }

#ifdef ENABLE_DEBUGGING
    if(strstr(s, "test")) { /* funky test URLs */

      if(strstr(s, "sleep")) { /* initiate a STANDBY sequence */
          ncma_url_open(BLANK_SCREEN_URL);
          shutdown_nc();
      }

      if(strstr(s, "powerup")) { /* initiate power up sequence */
        ncma_trans = Trans_PowerUp;
        setcallback();
      }

      if(strstr(s, "reset")) { /* initiate power up sequence */
        ncma_state = State_NCMAInit;
        ncma_trans = Trans_Idle;
      }

      if(strstr(s, "dialbad")) { /* initiate a dial-failed sequence */
        ncma_trans = Trans_DialBad;
        setcallback();
      }

      if(strstr(s, "dialok")) { /* initiate a dial succeeded sequence */
        ncma_trans = Trans_DialOK;
        setcallback();
      }


      if(strstr(s, "mimebad")) { /* initiate a dial-failed sequence */
        ncma_trans = Trans_MIMEBad;
        setcallback();
      }

      if(strstr(s, "mimeok")) { /* initiate a dial succeeded sequence */
        ncma_trans = Trans_MIMEOk;
        setcallback();
      }


    }
#endif

    if(strstr(s, "shutdownack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLShutdown;
       setcallback();
    }

    if(strstr(s, "shutdownnak")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLShutdownCancel;
       setcallback();
    }

    if(strstr(s, "surf") || strstr(s, "userhome")) { /* Let's surf! */
       ncma_trans = Trans_NCMASurf;
       setcallback();
    }

    if(strstr(s, "badubpack")) { /* ack. from the bad unblock pin screen */
       ncma_trans = Trans_URLBadUnblockPINAck;
       setcallback();
    }



#ifdef POINTLESS_BUTTONS
    if(strstr(s, "smartcardack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLSmartcardAck;
       setcallback();
    }

    if(strstr(s, "badcardack")) { /* URL notification from shutdown page */
       ncma_trans = Trans_URLBadCardAck;
       setcallback();
    }
#endif


    return(0);
}

int cmd_ncma_cache(char *s, int n)
{
    cache_info();
    return(0);
}

int cmd_ncma_scload(char *s, int n)
{
    if(handle_mime_object(s)<0) {
        ncma_trans = Trans_MIMEBad;
    } else {
        ncma_trans = Trans_MIMEOk;
    }
    setcallback();
    return(0);
}

int cmd_ncma_update(char *s, int n)
{
    return(0);
}

