/* handle time related stuff for managed access */
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "ncma_time.h"
#include "ncma_tags.h"
#include "ncma_utils.h"
#include "smcard.h"

#include "DBUG.h"

int time_within(unsigned int hour, unsigned int early, unsigned int late)
{
        if((hour >= early) && (hour <= late)) {
            DBUG_PRINTF(DBUG_LVL_DIAG, "time_within: simple rule fired %d <= %d <= %d\n", early, hour, late);
            return(1);
        } else {
            DBUG_PRINTF(DBUG_LVL_DIAG, "time_within: simple rule didn't fire %d > %d < %d\n", early, hour, late);
            return(0);
        }
}

int test_iap_rule(unsigned char *gptr, unsigned int gbytes)
{
    unsigned char *ruleptr;
    unsigned int rulebytes;
    unsigned int early, late;

    if((ruleptr = find_tag_in_block(gptr, gbytes, NCIRuleTag, &rulebytes, NULL))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "test_iap_rule: no time rule in IAP group - aborting\n");
        return(0);
    }

    if(rulebytes != 4) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "test_iap_rule: invalid IAP RuleTag content\n");
        return(0);
    }

    early = read_big_short((char *)ruleptr);
    late = read_big_short((char *)(ruleptr+2));

    DBUG_PRINTF(DBUG_LVL_DIAG, "test_iap_rule: early: %02d late: %02d\n", early, late);

    if(early == late) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "test_iap_rule: all inclusive rule fired\n");
        return(1);
    }

    if((early<late)) {
        if(time_within(hour_now, early, late)) return(1);
    }

    if(early>late) { /* funky rule, eg 23-2 */
       if(time_within(hour_now, early, 23)) return(1);
       else if(time_within(hour_now, 0, late)) return(1);
    }

    return(0);
}

void get_hour_now(void)
{
    time_ordinal ord;
    char tmp[8];
    _kernel_swi_regs r;

    *(unsigned int *)tmp = 3;
    r.r[0] = 14;
    r.r[1] = (int)tmp;
    _kernel_swi(OS_Word, &r, &r);

    r.r[1] = (int)tmp;
    r.r[2] = (int)&ord;
    _kernel_swi(Territory_ConvertTimeToUTCOrdinals, &r, &r);
    hour_now = ord.hours;
    return;
}

/* convert strings of the form "YYYY:MM:DD" and "HH:MM:SS" to UTC time and set it */
void set_time_now(char *date_ptr, char *time_ptr)
{
    time_ordinal ord;
    char tmp[8];
    _kernel_swi_regs r;

    ord.centiseconds = 0;
    ord.dow = 0;
    ord.doy = 0;

    if(sscanf(date_ptr, "%d:%d:%d", &ord.year, &ord.month, &ord.day)!=3) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "set_time_now: failed on invalid date string \"%s\"\n", date_ptr);
    }

    if(sscanf(time_ptr, "%d:%d:%d", &ord.hours, &ord.minutes, &ord.seconds)!=3) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "set_time_now: failed on invalid time string \"%s\"\n", time_ptr);
        return;
    }

    ord.centiseconds = 0;
    ord.dow = 0;
    ord.doy = 0;

    hour_now = ord.hours;

    r.r[0] = -1; /* current territory */
    r.r[1] = (int)tmp;
    r.r[2] = (int)&ord;
    _kernel_swi(Territory_ConvertOrdinalsToTime, &r, &r);

    r.r[0] = (int)tmp;
    _kernel_swi(Territory_SetTime, &r, &r);

    DBUG_PRINTF(DBUG_LVL_DIAG, "set_time_now: set time to %2d:%2d:%2d on %2d:%2d:%4d\n",
    			       ord.hours, ord.minutes, ord.seconds, ord.day, ord.month, ord.year);
    return;
}
