/* rsa_id2.c */
/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * ------------------------------------------------------------------
 * Created from rsa_enc.c by Simon Middleton (smiddleton@acorn.com)
 * Use PKCS#11 API to sign do a private encryption
 * ------------------------------------------------------------------
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include "cryptlib.h"
#include "bn.h"
#include "rsa.h"
#include "rand.h"

#include "rsa_id2.h"

#ifndef NOPROTO
static int RSA_iD2_public_encrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_private_encrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_public_decrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_private_decrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_mod_exp(BIGNUM *r0, BIGNUM *i, RSA *rsa);
static int RSA_iD2_init(RSA *rsa);
static int RSA_iD2_finish(RSA *rsa);
#else
static int RSA_iD2_public_encrypt();
static int RSA_iD2_private_encrypt();
static int RSA_iD2_public_decrypt();
static int RSA_iD2_private_decrypt();
static int RSA_iD2_mod_exp();
static int RSA_iD2_init();
static int RSA_iD2_finish();
#endif

static RSA_METHOD rsa_pkcs1_iD2_meth={
	"iD2 PKCS#1 RSA",
	RSA_iD2_public_encrypt,
	RSA_iD2_public_decrypt,
	RSA_iD2_private_encrypt,
	RSA_iD2_private_decrypt,
	RSA_iD2_mod_exp,
	BN_mod_exp,
        RSA_iD2_init,
        RSA_iD2_finish,
	RSA_METHOD_FLAG_NO_CHECK,
	NULL
	};

#ifdef DEBUG
extern FILE *log_file;
extern void fprintf_and_flush(FILE *log, char *a, ...);
# define DEBUG0(a) fprintf_and_flush(log_file, a)
# define DEBUG1(a,b) fprintf_and_flush(log_file, a, b)
# define DEBUG2(a,b,c) fprintf_and_flush(log_file, a, b, c)
# define DEBUG3(a,b,c,d) fprintf_and_flush(log_file, a, b, c, d)
# define DEBUG4(a,b,c,d,e) fprintf_and_flush(log_file, a, b, c, d, e)
# define DEBUG5(a,b,c,d,e,f) fprintf_and_flush(log_file, a, b, c, d, e, f)
#else
# define DEBUG0(a)
# define DEBUG1(a,b)
# define DEBUG2(a,b,c)
# define DEBUG3(a,b,c,d)
# define DEBUG4(a,b,c,d,e)
# define DEBUG5(a,b,c,d,e,f)
#endif

RSA_METHOD *RSA_PKCS1_iD2()
	{
	DEBUG0("RSA_PKCS1_iD2: init\n");
	return(&rsa_pkcs1_iD2_meth);
	}

static int RSA_iD2_public_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_ENCRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_private_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
{
    /* our info is attached to RSA data as app_data
     * We have a session handle and a key ID assumed already logged in.
     * We need to locate the private key and
     * encrypt the data given.
     */
    PKCS11_INFO *info = (PKCS11_INFO *)RSA_get_app_data(rsa);
    int r = -1;
    CK_MECHANISM mechanism;
    CK_ULONG written;
    CK_RV rv;

    /* Do the actual encryption on the data given */
    DEBUG2("SignInit: session %d key 0x%p\n", info->hSession, info->hKeyObject);

    mechanism.mechanism = CKM_RSA_PKCS;
    mechanism.pParameter = NULL_PTR;
    mechanism.ulParameterLen = 0;
    if ((rv = C_SignInit(info->hSession, &mechanism, info->hKeyObject)) != CKR_OK)
    {
	DEBUG1("Failed to init encrypt, rv = 0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + (int)rv);
	goto err;
    }

    DEBUG3("Sign: get size session %d from 0x%p len %d\n", info->hSession, from, flen);

#if 0
    written = 0;
    if ((rv = C_Sign(info->hSession, from, flen, NULL, &written)) != CKR_OK)
    {
	DEBUG1("Failed to read sign size, rv = 0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + (int)rv);
	goto err;
    }
#endif
    written = 128;
    DEBUG5("Sign: session %d from 0x%p len %d to 0x%p written %d\n", info->hSession, from, flen, to, written);

    if ((rv = C_Sign(info->hSession, from, flen, to, &written)) != CKR_OK)
    {
	DEBUG2("Buffer too small, rv = 0x%x, written=%d\n", rv, written);
	
	if (rv != CKR_BUFFER_TOO_SMALL)
	{
	    DEBUG2("Failed to get encryption size, rv = 0x%x, written=%d\n", rv, written);
	    RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + (int)rv);
	    goto err;
	}

	if ((rv = C_Sign(info->hSession, from, flen, to, &written)) != CKR_OK)
	{
	    DEBUG2("Failed to encrypt, rv = 0x%x, written=%d\n", rv, written);
	    RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + (int)rv);
	    goto err;
	}
    }    

    /* success! */
    r = (int)written;

 err:
    DEBUG2("signed, rv = 0x%x, written=%d\n", rv, written);

    return(r);
}

static int RSA_iD2_private_decrypt(flen, from, to, rsa,padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PRIVATE_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_public_decrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_mod_exp(r0, I, rsa)
BIGNUM *r0;
BIGNUM *I;
RSA *rsa;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_init(rsa)
RSA *rsa;
	{
	rsa->flags|=RSA_FLAG_CACHE_PUBLIC|RSA_FLAG_CACHE_PRIVATE|RSA_METHOD_FLAG_NO_CHECK;
	return(1);
	}

static int RSA_iD2_finish(rsa)
RSA *rsa;
	{
	return(1);
	}

