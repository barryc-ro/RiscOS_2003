#include "pkcs11.h"
#include "swis.h"
#include "ro_mod.h"

CK_RV C_Initialize(CK_VOID_PTR pInitArgs)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Initialize, _IN(0)|_OUT(0), pInitArgs, &rv);

    return rv;
}

CK_RV C_Finalize(CK_VOID_PTR pReserved)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Finalize, _IN(0)|_OUT(0), pReserved, &rv);

    return rv;
}

CK_RV C_GetInfo(CK_INFO_PTR pInfo)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetInfo, _IN(0)|_OUT(0), pInfo, &rv);

    return rv;
}

CK_RV C_GetSlotList(CK_BBOOL       tokenPresent,
                    CK_SLOT_ID_PTR pSlotList,
                    CK_ULONG_PTR   pulCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetSlotList, _INR(0,2)|_OUT(0), tokenPresent, pSlotList, pulCount, &rv);

    return rv;
}

CK_RV C_GetSlotInfo(CK_SLOT_ID       slotID,
                    CK_SLOT_INFO_PTR pInfo)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetSlotInfo, _INR(0,1)|_OUT(0), slotID, pInfo, &rv);

    return rv;
}

CK_RV C_GetTokenInfo(CK_SLOT_ID        slotID,
                     CK_TOKEN_INFO_PTR pInfo)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetTokenInfo, _INR(0,1)|_OUT(0), slotID, pInfo, &rv);

    return rv;
}

CK_RV C_GetMechanismList(CK_SLOT_ID            slotID,
                         CK_MECHANISM_TYPE_PTR pMechanismList,
                         CK_ULONG_PTR          pulCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetMechanismList, _INR(0,2)|_OUT(0), slotID, pMechanismList, pulCount, &rv);

    return rv;
}

CK_RV C_GetMechanismInfo(CK_SLOT_ID            slotID,
                         CK_MECHANISM_TYPE     type,
                         CK_MECHANISM_INFO_PTR pInfo)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetMechanismInfo, _INR(0,2)|_OUT(0), slotID, type, pInfo, &rv);

    return rv;
}

CK_RV C_SetPIN(CK_SESSION_HANDLE hSession,
               CK_CHAR_PTR       pOldPin,
               CK_ULONG          ulOldPinLen,
               CK_CHAR_PTR       pNewPin,
               CK_ULONG          ulNewPinLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SetPIN, _INR(0,4)|_OUT(0), hSession, pOldPin, ulOldPinLen, pNewPin, ulNewPinLen, &rv);

    return rv;
}

CK_RV C_OpenSession(CK_SLOT_ID            slotID,
                    CK_FLAGS              flags,
                    CK_VOID_PTR           pApplication,
                    CK_NOTIFY             Notify,
                    CK_SESSION_HANDLE_PTR phSession)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_OpenSession, _INR(0,2)|_OUT(0), slotID, flags, phSession, &rv);

    return rv;
    pApplication = pApplication;
    Notify = Notify;
}

CK_RV C_CloseSession(CK_SESSION_HANDLE hSession)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_CloseSession, _IN(0)|_OUT(0), hSession, &rv);

    return rv;
}

CK_RV C_CloseAllSessions(CK_SLOT_ID slotID)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_CloseAllSessions, _IN(0)|_OUT(0), slotID, &rv);

    return rv;
}

CK_RV C_GetSessionInfo(CK_SESSION_HANDLE   hSession,
                       CK_SESSION_INFO_PTR pInfo)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetSessionInfo, _INR(0,1)|_OUT(0), hSession, pInfo, &rv);

    return rv;
}

CK_RV C_Login(CK_SESSION_HANDLE hSession,
              CK_USER_TYPE      userType,
              CK_CHAR_PTR       pPin,
              CK_ULONG          ulPinLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Login, _INR(0,3)|_OUT(0), hSession, userType, pPin, ulPinLen, &rv);

    return rv;
}

CK_RV C_Logout(CK_SESSION_HANDLE hSession)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Logout, _IN(0)|_OUT(0), hSession, &rv);

    return rv;
}

CK_RV C_CreateObject(CK_SESSION_HANDLE    hSession,
                     CK_ATTRIBUTE_PTR     pTemplate,
                     CK_ULONG             ulCount,
                     CK_OBJECT_HANDLE_PTR phObject)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_CreateObject, _INR(0,3)|_OUT(0), hSession, pTemplate, ulCount, phObject, &rv);

    return rv;
}

CK_RV C_CopyObject(CK_SESSION_HANDLE    hSession,
                   CK_OBJECT_HANDLE     hObject,
                   CK_ATTRIBUTE_PTR     pTemplate,
                   CK_ULONG             ulCount,
                   CK_OBJECT_HANDLE_PTR phNewObject)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_CopyObject, _INR(0,4)|_OUT(0), hSession, hObject, pTemplate, ulCount, phNewObject, &rv);

    return rv;
}

CK_RV C_DestroyObject(CK_SESSION_HANDLE hSession,
                      CK_OBJECT_HANDLE  hObject)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DestroyObject, _INR(0,1)|_OUT(0), hSession, hObject, &rv);

    return rv;
}

CK_RV C_GetAttributeValue(CK_SESSION_HANDLE hSession,
                          CK_OBJECT_HANDLE  hObject,
                          CK_ATTRIBUTE_PTR  pTemplate,
                          CK_ULONG          ulCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GetAttributeValue, _INR(0,3)|_OUT(0), hSession, hObject, pTemplate, ulCount, &rv);

    return rv;
}

CK_RV C_SetAttributeValue(CK_SESSION_HANDLE hSession,
                          CK_OBJECT_HANDLE  hObject,
                          CK_ATTRIBUTE_PTR  pTemplate,
                          CK_ULONG          ulCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SetAttributeValue, _INR(0,3)|_OUT(0), hSession, hObject, pTemplate, ulCount, &rv);

    return rv;
}

CK_RV C_FindObjectsInit(CK_SESSION_HANDLE hSession,
                        CK_ATTRIBUTE_PTR  pTemplate,
                        CK_ULONG          ulCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_FindObjectsInit, _INR(0,2)|_OUT(0), hSession, pTemplate, ulCount, &rv);

    return rv;
}

CK_RV C_FindObjects(CK_SESSION_HANDLE    hSession,
                    CK_OBJECT_HANDLE_PTR phObject,
                    CK_ULONG             ulMaxObjectCount,
                    CK_ULONG_PTR         pulObjectCount)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_FindObjects, _INR(0,3)|_OUT(0), hSession, phObject, ulMaxObjectCount, pulObjectCount, &rv);

    return rv;
}

CK_RV C_FindObjectsFinal(CK_SESSION_HANDLE hSession)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_FindObjectsFinal, _IN(0)|_OUT(0), hSession, &rv);

    return rv;
}

CK_RV C_EncryptInit(CK_SESSION_HANDLE hSession,
                    CK_MECHANISM_PTR  pMechanism,
                    CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_EncryptInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_Encrypt(CK_SESSION_HANDLE hSession,
                CK_BYTE_PTR       pData,
                CK_ULONG          ulDataLen,
                CK_BYTE_PTR       pEncData,
                CK_ULONG_PTR      pulEncDataLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Encrypt, _INR(0,4)|_OUT(0), hSession, pData, ulDataLen, pEncData, pulEncDataLen, &rv);

    return rv;
}

CK_RV C_EncryptUpdate(CK_SESSION_HANDLE hSession,
                      CK_BYTE_PTR       pPart,
                      CK_ULONG          ulPartLen,
                      CK_BYTE_PTR       pEncPart,
                      CK_ULONG_PTR      pulEncPartLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_EncryptUpdate, _INR(0,4)|_OUT(0), hSession, pPart, ulPartLen, pEncPart, pulEncPartLen, &rv);

    return rv;
}

CK_RV C_EncryptFinal(CK_SESSION_HANDLE hSession,
                     CK_BYTE_PTR       pLastEncPart,
                     CK_ULONG_PTR      pulLastEncPartLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_EncryptFinal, _INR(0,2)|_OUT(0), hSession, pLastEncPart, pulLastEncPartLen, &rv);

    return rv;
}

CK_RV C_DecryptInit(CK_SESSION_HANDLE hSession,
                    CK_MECHANISM_PTR  pMechanism,
                    CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DecryptInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_Decrypt(CK_SESSION_HANDLE hSession,
                CK_BYTE_PTR       pEncData,
                CK_ULONG          ulEncDataLen,
                CK_BYTE_PTR       pData,
                CK_ULONG_PTR      pulDataLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Decrypt, _INR(0,4)|_OUT(0), hSession, pEncData, ulEncDataLen, pData, pulDataLen, &rv);

    return rv;
}

CK_RV C_DecryptUpdate(CK_SESSION_HANDLE hSession,
                      CK_BYTE_PTR       pEncPart,
                      CK_ULONG          ulEncPartLen,
                      CK_BYTE_PTR       pPart,
                      CK_ULONG_PTR      pulPartLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DecryptUpdate, _INR(0,4)|_OUT(0), hSession, pEncPart, ulEncPartLen, pPart, pulPartLen, &rv);

    return rv;
}

CK_RV C_DecryptFinal(CK_SESSION_HANDLE hSession,
                     CK_BYTE_PTR       pLastPart,
                     CK_ULONG_PTR      pulLastPartLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DecryptFinal, _INR(0,2)|_OUT(0), hSession, pLastPart, pulLastPartLen, &rv);

    return rv;
}

CK_RV C_DigestInit(CK_SESSION_HANDLE hSession,
                   CK_MECHANISM_PTR  pMechanism)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DigestInit, _INR(0,1)|_OUT(0), hSession, pMechanism, &rv);

    return rv;
}

CK_RV C_Digest(CK_SESSION_HANDLE hSession,
               CK_BYTE_PTR       pData,
               CK_ULONG          ulDataLen,
               CK_BYTE_PTR       pDigest,
               CK_ULONG_PTR      pulDigestLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Digest, _INR(0,4)|_OUT(0), hSession, pData, ulDataLen, pDigest, pulDigestLen, &rv);

    return rv;
}

CK_RV C_DigestUpdate(CK_SESSION_HANDLE hSession,
                     CK_BYTE_PTR       pPart,
                     CK_ULONG          ulPartLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DigestUpdate, _INR(0,2)|_OUT(0), hSession, pPart, ulPartLen, &rv);

    return rv;
}

CK_RV C_DigestKey(CK_SESSION_HANDLE hSession,
                  CK_OBJECT_HANDLE  hObject)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DigestKey, _INR(0,1)|_OUT(0), hSession, hObject, &rv);

    return rv;
}

CK_RV C_DigestFinal(CK_SESSION_HANDLE hSession,
                    CK_BYTE_PTR       pDigest,
                    CK_ULONG_PTR      pulDigestLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_DigestFinal, _INR(0,2)|_OUT(0), hSession, pDigest, pulDigestLen, &rv);

    return rv;
}

CK_RV C_SignInit(CK_SESSION_HANDLE hSession,
                 CK_MECHANISM_PTR  pMechanism,
                 CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SignInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_Sign(CK_SESSION_HANDLE hSession,
             CK_BYTE_PTR       pData,
             CK_ULONG          ulDataLen,
             CK_BYTE_PTR       pSignature,
             CK_ULONG_PTR      pulSignatureLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Sign, _INR(0,4)|_OUT(0), hSession, pData, ulDataLen, pSignature, pulSignatureLen, &rv);

    return rv;
}

CK_RV C_SignRecoverInit(CK_SESSION_HANDLE hSession,
                        CK_MECHANISM_PTR  pMechanism,
                        CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SignRecoverInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_SignRecover(CK_SESSION_HANDLE hSession,
                    CK_BYTE_PTR       pData,
                    CK_ULONG          ulDataLen,
                    CK_BYTE_PTR       pSignature,
                    CK_ULONG_PTR      pulSignatureLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SignRecover, _INR(0,4)|_OUT(0), hSession, pData, ulDataLen, pSignature, pulSignatureLen, &rv);

    return rv;
}

CK_RV C_VerifyInit(CK_SESSION_HANDLE hSession,
                   CK_MECHANISM_PTR  pMechanism,
                   CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_VerifyInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_Verify(CK_SESSION_HANDLE hSession,
               CK_BYTE_PTR       pData,
               CK_ULONG          ulDataLen,
               CK_BYTE_PTR       pSignature,
               CK_ULONG          ulSignatureLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_Verify, _INR(0,4)|_OUT(0), hSession, pData, ulDataLen, pSignature, ulSignatureLen, &rv);

    return rv;
}

CK_RV C_VerifyRecoverInit(CK_SESSION_HANDLE hSession,
                          CK_MECHANISM_PTR  pMechanism,
                          CK_OBJECT_HANDLE  hKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_VerifyRecoverInit, _INR(0,2)|_OUT(0), hSession, pMechanism, hKey, &rv);

    return rv;
}

CK_RV C_VerifyRecover(CK_SESSION_HANDLE hSession,
                      CK_BYTE_PTR       pSignature,
                      CK_ULONG          ulSignatureLen,
                      CK_BYTE_PTR       pData,
                      CK_ULONG_PTR      pulDataLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_VerifyRecover, _INR(0,4)|_OUT(0), hSession, pSignature, ulSignatureLen, pData, pulDataLen, &rv);

    return rv;
}

CK_RV C_GenerateKey(CK_SESSION_HANDLE    hSession,
                    CK_MECHANISM_PTR     pMechanism,
                    CK_ATTRIBUTE_PTR     pTemplate,
                    CK_ULONG             ulCount,
                    CK_OBJECT_HANDLE_PTR phKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GenerateKey, _INR(0,4)|_OUT(0), hSession, pMechanism, pTemplate, ulCount, phKey, &rv);

    return rv;
}

CK_RV C_GenerateKeyPair(CK_SESSION_HANDLE    hSession,
                        CK_MECHANISM_PTR     pMechanism,
                        CK_ATTRIBUTE_PTR     pPublicTemplate,
                        CK_ULONG             ulPublicCount,
                        CK_ATTRIBUTE_PTR     pPrivateTemplate,
                        CK_ULONG             ulPrivateCount,
                        CK_OBJECT_HANDLE_PTR phPublicKey,
                        CK_OBJECT_HANDLE_PTR phPrivateKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GenerateKeyPair, _INR(0,7)|_OUT(0), hSession, pMechanism, pPublicTemplate, ulPublicCount, pPrivateTemplate, ulPrivateCount, phPublicKey, phPrivateKey, &rv);

    return rv;
}

CK_RV C_WrapKey(CK_SESSION_HANDLE hSession,
                CK_MECHANISM_PTR  pMechanism,
                CK_OBJECT_HANDLE  hWrappingKey,
                CK_OBJECT_HANDLE  hKey,
                CK_BYTE_PTR       pWrappedKey,
                CK_ULONG_PTR      pulWrappedKeyLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_WrapKey, _INR(0,5)|_OUT(0), hSession, pMechanism, hWrappingKey, hKey, pWrappedKey, pulWrappedKeyLen, &rv);

    return rv;
}

CK_RV C_UnwrapKey(CK_SESSION_HANDLE    hSession,
                  CK_MECHANISM_PTR     pMechanism,
                  CK_OBJECT_HANDLE     hUnwrappingKey,
                  CK_BYTE_PTR          pWrappedKey,
                  CK_ULONG             ulWrappedKeyLen,
                  CK_ATTRIBUTE_PTR     pTemplate,
                  CK_ULONG             ulCount,
                  CK_OBJECT_HANDLE_PTR phKey)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_UnwrapKey, _INR(0,7)|_OUT(0), hSession, pMechanism, hUnwrappingKey, pWrappedKey, ulWrappedKeyLen, pTemplate, ulCount, phKey, &rv);

    return rv;
}

CK_RV C_SeedRandom(CK_SESSION_HANDLE hSession,
                   CK_BYTE_PTR       pSeed,
                   CK_ULONG          ulSeedLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SeedRandom, _INR(0,2)|_OUT(0), hSession, pSeed, ulSeedLen, &rv);

    return rv;
}

CK_RV C_GenerateRandom(CK_SESSION_HANDLE hSession,
                       CK_BYTE_PTR       pRandom,
                       CK_ULONG          ulRandomLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_GenerateRandom, _INR(0,2)|_OUT(0), hSession, pRandom, ulRandomLen, &rv);

    return rv;
}

CK_RV C_UnblockPIN(CK_SESSION_HANDLE hSession,
                   CK_CHAR_PTR       pPin,
                   CK_ULONG          ulPinLen,
                   CK_CHAR_PTR       pPuk,
                   CK_ULONG          ulPukLen)
{
    CK_RV rv = CKR_GENERAL_ERROR;

    _swix(CryptoBox_SetPIN, _INR(0,4)|_OUT(0), hSession, pPin, ulPinLen, pPuk, ulPukLen, &rv);

    return rv;
}



