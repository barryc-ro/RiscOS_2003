/*
 * Created by cmhg vsn 5.18 [26 Mar 1998]
 */

#ifndef __cmhg_ro_mod_h
#define __cmhg_ro_mod_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#define CMHG_VERSION 518

#define Module_Title                     "CryptoBox"
#define Module_Help                      "CryptoBox"
#define Module_VersionString             "0.00"
#define Module_VersionNumber             0
#ifndef Module_Date
#define Module_Date                      "29 May 1998"
#endif


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "", and is control-terminated, not zero
 * terminated).
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw);


/*
 * Finalisation code
 * =================
 *
 * Return NULL if your finalisation succeeds. Otherwise return a pointer to
 * an error block if your finalisation handler does not wish to die (e.g.
 * toolbox modules return a 'Task(s) active' error).
 * fatal, podule and pw are the values of R10, R11 and R12 (respectively)
 * on entry to the finalisation code.
 */
_kernel_oserror *module_finalise(int fatal, int podule, void *pw);


/*
 * SWI handler code
 * ================
 *
 * swi_offset contains the offset of the SWI into your SWI chunk.
 * r points to the registers passed to the SWI.
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module CryptoBox' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define CryptoBox_00                    0x051840
#ifndef CryptoBox_Initialize
#define CryptoBox_Initialize            0x051840
#define CryptoBox_Finalize              0x051841
#define CryptoBox_GetInfo               0x051842
#define CryptoBox_GetSlotList           0x051843
#define CryptoBox_GetSlotInfo           0x051844
#define CryptoBox_GetTokenInfo          0x051845
#define CryptoBox_GetMechanismList      0x051846
#define CryptoBox_GetMechanismInfo      0x051847
#define CryptoBox_SetPIN                0x051848
#define CryptoBox_OpenSession           0x051849
#define CryptoBox_CloseSession          0x05184a
#define CryptoBox_CloseAllSessions      0x05184b
#define CryptoBox_GetSessionInfo        0x05184c
#define CryptoBox_Login                 0x05184d
#define CryptoBox_Logout                0x05184e
#define CryptoBox_CreateObject          0x05184f
#define CryptoBox_CopyObject            0x051850
#define CryptoBox_DestroyObject         0x051851
#define CryptoBox_GetAttributeValue     0x051852
#define CryptoBox_SetAttributeValue     0x051853
#define CryptoBox_FindObjectsInit       0x051854
#define CryptoBox_FindObjects           0x051855
#define CryptoBox_FindObjectsFinal      0x051856
#define CryptoBox_EncryptInit           0x051857
#define CryptoBox_Encrypt               0x051858
#define CryptoBox_EncryptUpdate         0x051859
#define CryptoBox_EncryptFinal          0x05185a
#define CryptoBox_DecryptInit           0x05185b
#define CryptoBox_Decrypt               0x05185c
#define CryptoBox_DecryptUpdate         0x05185d
#define CryptoBox_DecryptFinal          0x05185e
#define CryptoBox_DigestInit            0x05185f
#define CryptoBox_Digest                0x051860
#define CryptoBox_DigestUpdate          0x051861
#define CryptoBox_DigestKey             0x051862
#define CryptoBox_DigestFinal           0x051863
#define CryptoBox_SignInit              0x051864
#define CryptoBox_Sign                  0x051865
#define CryptoBox_SignRecoverInit       0x051866
#define CryptoBox_SignRecover           0x051867
#define CryptoBox_VerifyInit            0x051868
#define CryptoBox_Verify                0x051869
#define CryptoBox_VerifyRecoverInit     0x05186a
#define CryptoBox_VerifyRecover         0x05186b
#define CryptoBox_GenerateKey           0x05186c
#define CryptoBox_GenerateKeyPair       0x05186d
#define CryptoBox_WrapKey               0x05186e
#define CryptoBox_UnwrapKey             0x05186f
#define CryptoBox_SeedRandom            0x051870
#define CryptoBox_GenerateRandom        0x051871
#endif

#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw);


/*
 * Event handler
 * =============
 *
 * This is the name of the event handler entry veneer compiled by CMHG.
 * Use this name as an argument to, for example, SWI OS_Claim, in
 * order to attach your handler to EventV.
 */
extern void event_veneer(void);

/*
 * This is the handler function you must write to handle the event for
 * which event_veneer is the veneer function.
 *
 * Return 0 if you wish to claim the event.
 * Return 1 if you do not wish to claim the event.
 *
 * 'r' points to a vector of words containing the values of R0-R9 on
 * entry to the veneer. If r is updated, the updated values will be
 * loaded into R0-R9 on return from the handler.
 *
 * pw is the private word pointer ('R12') value with which the event
 * entry veneer is called.
 */
int event_handler(_kernel_swi_regs *r, void *pw);

#endif
