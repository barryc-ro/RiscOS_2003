/* module.c - RISC OS module related code. */

/* ANSI Includes */
#include <stdio.h>
#include <stdlib.h>

/* Risc OS Includes */
#include "kernel.h"
#include "swis.h"

/* Other libraries */
#include "Debuglib/Debuglib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Local Includes */
#include "Module.h"
#include "Filter.h"
#include "Header.h"

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise (const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *er;

#ifdef MemCheck_MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("RAM::0.$.fil_memch");
  atexit (MemCheck_OutputBlocksInfo);
  MemCheck_SetReadChecking (0);
#endif

  debug_initialise (Module_Title, "cache:$.fil_out", "");
  /* debug_output_device (PRINTF_OUTPUT); */
  debug_output_device (DEBUGIT_OUTPUT);
  debug_atexit ();

  er = filter_initialise (pw, podule_base);

  return er;

  NOT_USED (cmd_tail);
  NOT_USED (podule_base);
}


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  return filter_finalise (pw);

  NOT_USED (fatal);
  NOT_USED (podule);
}
