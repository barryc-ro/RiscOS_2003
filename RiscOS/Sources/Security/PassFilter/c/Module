/************************************************************************/
/* File:    Module.c                                                    */
/* Purpose: RISC OS module related code.                                */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/* History: 0.06  1999-09-27                                            */
/*                Altered to match the Specification ;*)                */
/************************************************************************/

/* ANSI Includes */
#include <stdio.h>
#include <stdlib.h>

/* Risc OS Includes */
#include "kernel.h"
#include "swis.h"

/* Other libraries */
#include "Debuglib/Debuglib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Local Includes */
#include "Module.h"
#include "Filter.h"
#include "FilterErr.h"
#include "FilterList.h"
#include "Header.h"





/*********************************************************************************/
/* module_initialise                                                             */
/*                                                                               */
/* Module initialisation entry point.                                            */
/*                                                                               */
/* Parameters:  const char* cmd_tail                                             */
/*              int         podule_base                                          */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_initialise (const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *er;

#ifdef MemCheck_MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("izipfs:$.fil_memch");
  atexit (MemCheck_OutputBlocksInfo);
  MemCheck_SetReadChecking (0);
#endif

  debug_initialise (Module_Title, "izipfs:$.filterout", "");
  /* debug_output_device (PRINTF_OUTPUT); */
  /* debug_output_device (DEBUGIT_OUTPUT); */
  debug_output_device (FILE_OUTPUT);
  debug_atexit ();

  er = filter_initialise (pw, podule_base);

  error_string_initialise();

  return er;

  NOT_USED (cmd_tail);
  NOT_USED (podule_base);
}




/*********************************************************************************/
/* module_finalise                                                               */
/*                                                                               */
/* Module exit handler                                                           */
/*                                                                               */
/* Parameters:  int         fatal                                                */
/*              int         podule                                               */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  filterlist_free_list(); /* Free all memory allocated for the linked list */
  error_string_free();
  return filter_finalise (pw);

  NOT_USED (fatal);
  NOT_USED (podule);
}



/*********************************************************************************/
/* module_cmd_handler                                                            */
/*                                                                               */
/* Module command handler                                                        */
/*                                                                               */
/* Parameters:  const char* arg_string                                           */
/*              int         argc                                                 */
/*              int         cmd_no                                               */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  dprintf (("", "module_cmd_handler()\n"));

  NOT_USED(arg_string);
  NOT_USED(argc);
  NOT_USED(pw);

  switch (cmd_no)
  {
    case CMD_PassFilter_Status :
      printf("PassFilter : %d filters currently active.\n", filterlist_return_number_of_nodes());
      error_string_display();
      break;
  }
  return((_kernel_oserror *)NULL);

}

