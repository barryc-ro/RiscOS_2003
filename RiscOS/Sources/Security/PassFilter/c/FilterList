/************************************************************************/
/* File:    FilterList.c                                                */
/* Purpose: Deal with the parsing of the config file and holding the    */
/*           required passkeys/commands in a list.                      */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/* History: 0.01  1999-09-27                                            */
/*                Created ;*)                                           */
/************************************************************************/

/* ANSI includes */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <assert.h>

/* Risc OS includes */
#include "kernel.h"
#include "swis.h"
#include "wimp.h"
#include "NVRAM.h"

/* Other libraries */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "Module.h"
#include "Header.h"
#include "Filter.h"
#include "FilterErr.h"
#include "FilterList.h"

#define CONFIG_FILE "PassFilter:Config"

static keypass_t *entry;
static char* get_nvram_tag_string(char* tag);
#define URL_MessageNumber 0x4AF80



/*********************************************************************************/
/* misc_getenv                                                                   */
/*                                                                               */
/* OS_ReadVarVal veneer.  Allows arbitrary sized read of a system variable.      */
/*                                                                               */
/* Parameters: variable - System variable name                                   */
/*             buffer   - buffer to place contents of variable, or NULL to       */
/*                        required size of buffer (returned in "nbytes")         */
/*             buffer_size  - Size of "buffer"                                   */
/*             nbytes   - number of bytes read (or required size of buffer if    */
/*                        if "buffer" passed in as NULL.                         */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
static void misc_getenv (const char *variable, char *buffer, int buffer_size,
                         int *nbytes)
{
  if (buffer == NULL)
  {
    _kernel_swi_regs r;

     r.r[0] = (int)variable;
     r.r[1] = NULL;
     r.r[2] = -1;
     r.r[3] = 0;
     r.r[4] = 0;

     _kernel_swi (OS_ReadVarVal, &r, &r);

     if (nbytes != NULL)
     {
       if (r.r[2] == 0)
         *nbytes = 0;
       else
       {
         *nbytes = ~r.r[2] + 1;
         dprintf (("getenv", "buf=NULL, nbytes=%d\n", *nbytes));
       }
     }
  }
  else
  {
    int len;

    _swix (OS_ReadVarVal, _INR(0,4) | _OUT(2),
           variable, buffer, buffer_size, 0, 0,
           &len);

    buffer[len] = '\0';

    if (nbytes != NULL)
    {
      *nbytes = len + 1;
      dprintf (("getenv", "buf!=NULL, nbytes=%d\n", *nbytes));
    }
  }
}



/*********************************************************************************/
/* misc_getenv                                                                   */
/*                                                                               */
/* OS_ReadVarVal veneer.  Allows arbitrary sized read of a system variable.      */
/* mallocs a block to hold the contents of the system variable...uses            */
/* misc_getenv to get variable                                                   */
/*                                                                               */
/* Parameters: variable - System variable name                                   */
/*                                                                               */
/* Returns:    pointer to malloced block holding contents of system variable.    */
/*                                                                               */
/*********************************************************************************/
static char *misc_getenv_malloc (const char *variable)
{
  char *str;
  int len;

  misc_getenv (variable, NULL, 0, &len);

  if (len == 0)
    return NULL;
  else
  {
    str = malloc (len);
    if (str)
      misc_getenv (variable, str, len, &len);

    return str;
  }
}



/*********************************************************************************/
/* filterlist_add_field_to_node                                                  */
/*                                                                               */
/* This routine adds a field to the key structure                                */
/*                                                                               */
/* Parameters: keypass_t* key    The key the field is to be added to.            */
/*             int        type   The type of the field to be entered             */
/*             char*      string A string holding the text of the field.         */
/*                                                                               */
/* Returns:    true if the field was added succwssfully, false otherwise.        */
/*                                                                               */
/*********************************************************************************/
static bool filterlist_add_field_to_node(keypass_t* key, int type, char* string)
{
  dprintf (("", "filterlist_add_field_to_node() : Adding line of type %d with string '%s'\n", type, string));
  switch (type)
  {
    case LINE_TYPE_KEY:
      if (key->key != NULL)
      {
        dprintf (("", "filterlist_add_field_to_node() : Error : Entry key already added to this node.\n"));
        return (false);
      }
      else /* Copy the string over */
      {
        key->key = malloc(strlen(string)+1);
        strcpy(key->key, string);
        key->count = 0;
        key->match_len = strlen((string));
        dprintf (("", "filterlist_add_field_to_node() : count set to %d, match_len set to %d\n", key->count, key->match_len));
      }
      break;

    case LINE_TYPE_URL:
      if (key->url != NULL)
      {
        dprintf (("", "filterlist_add_field_to_node() : Error : Entry url already added to this node.\n"));
        return (false);
      }
      else /* Copy the string over */
      {
        key->url = malloc(strlen(string)+1);
        strcpy(key->url, string);
        key->url_is_fuzzy = false;
      }
      break;

    case LINE_TYPE_FUZZY_URL:
      if (key->url != NULL)
      {
        dprintf (("", "filterlist_add_field_to_node() : Error : Entry url already added to this node.\n"));
        return (false);
      }
      else /* Copy the string over */
      {
        key->url = malloc(strlen(string)+1);
        strcpy(key->url, string);
        key->url_is_fuzzy = true;
      }
      break;

    case LINE_TYPE_COMMAND:
      if (key->command != NULL)
      {
        dprintf (("", "filterlist_add_field_to_node() : Error : A command has already added to this node.\n"));
      }
      else /* Copy the string over */
      {
        if (string[0]=='*') /* Is a * command */
        {
          key->command_is_a_url = false;
          string++; /* Move past the '*' of the *command */
        }
        else
        {
          key->command_is_a_url = true;
        }
        key->command = malloc(strlen(string)+1);
        strcpy(key->command, string);
      }
      break;

      default:
        dprintf (("", "filterlist_add_field_to_node() : Error : line type %d unrecognised\n", type));
        return (false);
      break;
  }

  return (true);
}




/*********************************************************************************/
/* filterlist_initialise_node                                                    */
/*                                                                               */
/* This routine takes a pointer to a keypass_t* structure and initialises the    */
/*  data members.                                                                */
/*                                                                               */
/* Parameters: keypass_t* key    The key structure to be initialised.            */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
static void filterlist_initialise_node(keypass_t* key)
{
  dprintf (("", "filterlist_initialise_node()\n"));
  key->key = NULL;
  key->url = NULL;
  key->command = NULL;
  key->count = 0;
  key->match_len = 0;
  key->url_is_fuzzy = false;
  key->command_is_a_url = false;
  key->next = NULL;
  key->previous = NULL;
}




/*********************************************************************************/
/* filterlist_is_node_full                                                       */
/*                                                                               */
/* This routine checks whether a key structure has all of it's required data     */
/*  members filled.                                                              */
/*                                                                               */
/* Parameters: keypass_t* key    The key structure to be tested.    .            */
/*                                                                               */
/* Returns:    Returns true if all the elements of the nide are non-NULL,        */
/*              otherwise it returns FALSE                                       */
/*                                                                               */
/*********************************************************************************/
bool filterlist_is_node_full(keypass_t* key)
{
  dprintf (("", "filterlist_is_node_full()\n"));
  assert(key!=NULL);
  if (key->key == NULL || key->url == NULL || key->command == NULL)
    return (false);
  else
    return (true);
}





/*********************************************************************************/
/* filterlist_return_number_of_nodes                                             */
/*                                                                               */
/* This routine returns the number of commands that are currently understood by  */
/*  the PassFilter module. It correlates to the number of nodes held in the      */
/*  internal list.                                                               */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    The number of currently active commands.                          */
/*                                                                               */
/*********************************************************************************/
unsigned int filterlist_return_number_of_nodes(void)
{
  unsigned int count = 0;
  keypass_t* current_keypass = entry;
  dprintf(("", "filterlist_return_number_of_nodes()\n"));

  while (current_keypass !=NULL)
  {
    current_keypass = current_keypass->next;
    count++;
  }

  return (count);
}




/*********************************************************************************/
/* filterlist_display_list                                                       */
/*                                                                               */
/* This routine scans through the list and displays all of the nodes into a      */
/*  debug stream.                                                                */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    None.                                                             */
/*                                                                               */
/*********************************************************************************/
void filterlist_display_list(void)
{
  keypass_t* current_keypass = entry;
  dprintf(("", "filterlist_display_list()\n"));

  while (current_keypass !=NULL)
  {
    dprintf(("", "filterlist_display_list() : Key %s   URL %s (url_is_fuzzy=%d)  command (is url to be opened=%d) %s\n", current_keypass->key, current_keypass->url, current_keypass->url_is_fuzzy, current_keypass->command_is_a_url, current_keypass->command));
    current_keypass = current_keypass->next;
  }
}







/*********************************************************************************/
/* filterlist_free_list                                                          */
/*                                                                               */
/* This routine scans through the list and frees all the memory used.            */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    None.                                                             */
/*                                                                               */
/*********************************************************************************/
void filterlist_free_list(void)
{
    keypass_t* current_keypass = entry;
    dprintf(("", "filterlist_free_list()\n"));

    while (current_keypass != NULL)
    {
      keypass_t* current_keypass_old = current_keypass;
      /* Free all the elements of the structure */
      if (current_keypass->key != NULL)
        free (current_keypass->key);
      if (current_keypass->url != NULL)
        free (current_keypass->url);
      if (current_keypass->command != NULL)
        free (current_keypass->command);
      /* Move onto the next node */
      current_keypass = current_keypass->next;
      /* Free the structure itself */
      free (current_keypass_old);
    }
    entry = NULL;
}




/*********************************************************************************/
/* read_config_file                                                              */
/*                                                                               */
/* This routine reads and parses the config file.                                */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    true if the file was parsed correctly, false otherwise.           */
/*                                                                               */
/*********************************************************************************/
bool read_config_file(void)
{
#ifdef CONFIG_FILE
  /* Firstly check that config_file exists */
  FILE *f;
  if((f = fopen(CONFIG_FILE, "r"))==NULL)
  {
    dprintf (("", "read_config_file() : Error opening config file '" CONFIG_FILE "'\n"));
    error_string_set("PassFilter : Could not open config file " CONFIG_FILE "\n");
    return (false);
  }
  else
  {
    const unsigned int MAX_LINE_LENGTH = 100;
    char* line_buffer = NULL;
    unsigned int line_count = 0;

    /* Initialise the first node */
    keypass_t* new_keypass = malloc(sizeof(keypass_t));
    filterlist_initialise_node(new_keypass);
    entry = new_keypass;
    line_buffer = malloc(MAX_LINE_LENGTH);

    /* Scan through the file line-by-line */
    while (!feof(f))
    {
      LINE_TYPE line_status = LINE_TYPE_NONE;

      if (fgets(line_buffer, 100, f)) /* Line read correctly */
      {
        line_count++;

        /* Trim off the endline */
        if (strlen(line_buffer) > 0)
          line_buffer[strlen(line_buffer)-1] = '\0';

        if (line_buffer[0] != '#') /* It is not a comment line */
        {
          /* If the structure is full, create another node */
          if (filterlist_is_node_full(new_keypass))
          {
            keypass_t* new_keypass2 = malloc(sizeof(keypass_t));
            dprintf (("", "read_config_file() : Creating a new node\n"));
            filterlist_initialise_node(new_keypass2);
            /* Now point the previous node to point to the new node */
            new_keypass->next = new_keypass2;
            new_keypass2->previous = new_keypass;
            new_keypass = new_keypass2;
          }

          if (strncmp("KEY : ", line_buffer, 6) == 0) /* Is a key line */
          {
            dprintf (("", "read_config_file() : Key : %s\n", line_buffer));
            line_status = LINE_TYPE_KEY;

            /* Now check to see if this key is held in an NVRAM tag - denoted by an '@' character. */
            if (line_buffer[6]=='@') /* It is an NVRAM tag */
            {
              char* nvram_tag = get_nvram_tag_string(line_buffer+7);
              if (!nvram_tag || (strlen (nvram_tag) == 0)) /*v tag not found or does not contain data */
              {
                /* There was an error */
                error_string_set("PassFilter : There was an error whilst parsing line %d of the config file - could not get NVRAM tag. : %s\n", line_count, line_buffer);
                filterlist_free_node(new_keypass); /* Delete this node */
                goto end_file;
              }
              if (!filterlist_add_field_to_node(new_keypass, LINE_TYPE_KEY, nvram_tag))
              {
                /* There was an error */
                if (nvram_tag)
                  free (nvram_tag);
                error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
                filterlist_free_node(new_keypass); /* Delete this node */
                goto end_file;
              }
              /* Free the memory used by the tag */
              if (nvram_tag)
                free (nvram_tag);
            }
            else
            {
              if (!filterlist_add_field_to_node(new_keypass, LINE_TYPE_KEY, line_buffer+6))
              {
                /* There was an error */
                error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
                filterlist_free_node(new_keypass); /* Delete this node */
                goto end_file;
              }
            }
          }

          if (strncmp("URL : ", line_buffer, 6) == 0) /* Is a url line */
          {
            dprintf (("", "read_config_file() : url : %s\n", line_buffer));
            line_status = LINE_TYPE_URL;
            if (!filterlist_add_field_to_node(new_keypass, LINE_TYPE_URL, line_buffer+6))
            {
              /* There was an error */
              error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
              filterlist_free_node(new_keypass); /* Delete this node */
              goto end_file;
            }
          }

          if (strncmp("URLF : ", line_buffer, 7) == 0) /* Is a fuzzy url line */
          {
            dprintf (("", "read_config_file() : url_is_fuzzy url : %s\n", line_buffer));
            line_status = LINE_TYPE_FUZZY_URL;
            if (!filterlist_add_field_to_node(new_keypass, LINE_TYPE_FUZZY_URL, line_buffer+7))
            {
              /* There was an error */
              error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
              filterlist_free_node(new_keypass); /* Delete this node */
              goto end_file;
            }
          }

          if (strncmp("COMMAND : ", line_buffer, 10) == 0) /* Is a command line */
          {
            dprintf (("", "read_config_file() : command : %s\n", line_buffer));
            line_status = LINE_TYPE_COMMAND;
            if (!filterlist_add_field_to_node(new_keypass, LINE_TYPE_COMMAND, line_buffer+10))
            {
              /* There was an error */
              error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
              filterlist_free_node(new_keypass); /* Delete this node */
              goto end_file; /* Cancel the parsing of the file */
            }
          }

          if (line_status < LINE_TYPE_KEY || line_status > LINE_TYPE_COMMAND) /* Not a key, url or command line */
          {
            dprintf (("", "read_config_file() : error, line not recognised : %s\n", line_buffer));
            error_string_set("PassFilter : There was an error whilst parsing line %d of the config file : %s\n", line_count, line_buffer);
          }
        }
      }
    } /* End while */

end_file:
    free (line_buffer);
  }
  fclose(f);
#else
  #error "The location of a configuration file must be passed in."
  dprintf (("", "read_config_file() : No config file specified.\n"));
  return (false);
#endif /* CONFIG */

  filterlist_display_list();

  return (true);
}






/*********************************************************************************/
/* upper                                                                         */
/*                                                                               */
/* Copies a string and converts it to upper case.                                */
/*                                                                               */
/* Parameters: char* string. The string to be copied and converted.              */
/*                                                                               */
/* Returns:    A pointer to the converted string.                                */
/*                                                                               */
/*********************************************************************************/
static char *upper(char *string)
{
  char *buffer, *source, *dest;

  /*
   * NULL or zero length strings just waste time :)
   */
  if (string == NULL)
    return string;

  if (*string == '\0')
    return string;

  buffer = malloc (strlen (string) + 1); /* cannot be longer */

  /* check malloc was okay */
  if (buffer == NULL)
    return NULL;

  dest = buffer;
  source = string;

  while (*source != '\0')
  {
    *dest = toupper (*source); /* Convert to upper case */
    dest++;
    source++;
  }
  *dest = '\0';
  return buffer;
}





/*********************************************************************************/
/* match_keypress_with_password                                                  */
/*                                                                               */
/* This routine attempts to match a series of keypressed with the keys held in   */
/*  the internal list of keypasses.                                              */
/*                                                                               */
/* Parameters: WimpKeyPressedEvent* event. The keypresse event recieved via the  */
/*              filter mechanism.                                                */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void match_keypress_with_password(WimpKeyPressedEvent *event)
{
  keypass_t* current_keypass = entry;

  while (current_keypass != NULL)
  {
    dprintf (("", "match_keypress_with_password(), key_code = 0x%x, current character is %c\n", event->key_code, current_keypass->key[current_keypass->count]));
    if (event->key_code == current_keypass->key[current_keypass->count])
    {
      current_keypass->count ++;
      dprintf (("", "match_keypress_with_password(), key_code = 0x%x, current character is 0x%x. They match. Count is %d, match_len is %d\n", event->key_code, current_keypass->key[current_keypass->count], current_keypass->count, current_keypass->match_len));
    }
    else if (event->key_code == current_keypass->key[0])
      current_keypass->count = 1;
    else
      current_keypass->count = 0;

    /* If we've completed the sequence ... */
    if (current_keypass->count == current_keypass->match_len)
    {
      char *match = NULL, *current = NULL, *url = NULL;
      bool urls_match = false;
      dprintf (("", "Matched sequence.\n"));
      current_keypass->count = 0;

      /* If Fresco's on the correct page, then we modify the key press event so
         as to send a URL message instead */
      url = misc_getenv_malloc ("NCFresco$CurrentURL");
      if (url)
      {
        current = upper (url);
        free (url);
        if (current_keypass->url_is_fuzzy) /* We want a fuzzy URL match */
        {
          dprintf (("", "Attempting to match URL's fuzzilly.\n"));
          match = upper (current_keypass->url);
          dprintf (("", "Attempting to match URL's '%s' and '%s' fuzzily.\n", current, match));
          if (strstr (current,match) == current || current_keypass->url[0] == '*')
          {
            dprintf (("", "URL's match.\n"));
            urls_match = true;
          }
        }
        else  /* We want the url's to be exactly the same (but case-insensitive) */
        {
          match = upper (current_keypass->url);
          dprintf (("", "Attempting to match URL's '%s' and '%s' exactly.\n", current,match));
          if ((strcmp (current,match)==0) || current_keypass->url[0] == '*')
          {
            dprintf (("", "URL's match.\n"));
            urls_match = true;
          }
        }

        if (urls_match)
        {
          if (current_keypass->command_is_a_url)
          {
            _kernel_swi_regs r;
            int n;
            char msg_block[256];

            n = strlen(current_keypass->command);

            dprintf (("", "match_keypress_with_password(): Attempting to open URL '%s' (%d)\n", current_keypass->command, n));

            n = n>236?236:n;

            memset(msg_block, 0, 256);

            *(int *)msg_block = 256;
            *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
            strncpy(msg_block + 20, current_keypass->command, n);

            r.r[0] = 0;
            r.r[1] = (int)msg_block;
            r.r[2] = 0;
            r.r[3] = 0;
            r.r[4] = 0;
            r.r[5] = 0;

            if(_kernel_swi(TaskModule_SendMessage, &r, &r) != NULL)
            {
              /* Message was sent okay */
              dprintf (("", "match_keypress_with_password(): TaskModule_SendMessage SWI sent correctly.\n"));
            }
            else
            {
              dprintf (("", "match_keypress_with_password(): Error occured whilst trying to call TaskModule_SendMessage SWI.\n"));
            }
          }
          else
          {
             /* Issue as a * command */
            dprintf (("", "calling \"%s\" as a *command\n", current_keypass->command));
            _kernel_oscli (current_keypass->command);
          }
        }
      }
      if (current)
        free (current);
      if (match)
        free (match);
    }

    current_keypass = current_keypass->next; /* Move onto the next node */
  } /* End while */
}





/*********************************************************************************/
/* filterlist_free_node                                                          */
/*                                                                               */
/* This routine deletes the node passed in. It frees all memory for that node    */
/*  and resets the next and previous pointers of it's neighbours as appropriate  */
/*                                                                               */
/* Parameters: keypass_t* key_to_be_deleted. The key to be deleted               */
/*                                                                               */
/* Returns:    true if the node was deleted correctly, false otherwise.          */
/*                                                                               */
/*********************************************************************************/
bool filterlist_free_node(keypass_t* key_to_be_deleted)
{
  keypass_t* previous = key_to_be_deleted->previous;
  keypass_t* next     = key_to_be_deleted->next;

  dprintf (("", "filterlist_free_node()\n"));

  filterlist_display_list();

  if (key_to_be_deleted == entry) /* It is the fiest node */
  {
    dprintf (("", "filterlist_free_node(): Attempting to release the first node.\n"));
    entry = next;
    /* Free all the elements of the structure */
    if (key_to_be_deleted->key != NULL)
      free (key_to_be_deleted->key);
    if (key_to_be_deleted->url != NULL)
      free (key_to_be_deleted->url);
    if (key_to_be_deleted->command != NULL)
      free (key_to_be_deleted->command);
    return (true);
  }

  /* Now swap the nodes over */
  dprintf (("", "filterlist_free_node(): Attempting to release the required node.\n"));
  previous->next = next;
  next->previous = previous;
  /* Free all the elements of the structure */
  if (key_to_be_deleted->key != NULL)
    free (key_to_be_deleted->key);
  if (key_to_be_deleted->url != NULL)
    free (key_to_be_deleted->url);
  if (key_to_be_deleted->command != NULL)
    free (key_to_be_deleted->command);

  filterlist_display_list();

  return (true);
}








/*********************************************************************************/
/* get_nvram_tag_string                                                          */
/*                                                                               */
/* This routine returns the string held in the NVRAM tag passed in.              */
/*                                                                               */
/* Parameters: char* tag. The tag we wish to acquire a string from.              */
/*                                                                               */
/* Returns:    Null if the required tag was not found, otherwise the string      */
/*              value held in the tag (which could be NULL itself).              */
/*                                                                               */
/*********************************************************************************/
static char* get_nvram_tag_string(char* tag)
{
  _kernel_oserror *er = NULL;
  int tag_size = 0;
  char* tag_contents = NULL;

  dprintf (("", "get_nvram_tag_string()\n"));

  er = _swix(NVRAM_Read, _INR(0,1)|_OUT(0), tag, 0, &tag_size);
  if (tag_size > 0)
  {
      dprintf (("", "get_nvram_tag_string() : Tag size is %d\n", tag_size));
      tag_contents = malloc(tag_size);
      if (tag_contents)
      {
        er = _swix(NVRAM_Read, _INR(0,2), tag, tag_contents, tag_size);
        dprintf (("", "get_nvram_tag_string() : Tag contents are '%s' (length %d)\n", tag_contents, strlen(tag_contents)));
        return (tag_contents);
      }
  }

  return (NULL);
}
