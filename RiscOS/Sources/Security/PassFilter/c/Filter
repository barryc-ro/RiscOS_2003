/* Filter.c */

/* ANSI includes */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

/* Risc OS includes */
#include "kernel.h"
#include "swis.h"
#include "wimp.h"

/* Other libraries */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "Module.h"
#include "Filter.h"
#include "Header.h"

#define TaskModule_RegisterBroadcastMessage          0x4d304
#define TaskModule_UnRegisterBroadcastMessage        0x4d305

#define URL_MessageNumber   307072

#define NCFresco_TaskName   "NCBrowser"

static int message_list[] = {
                             Wimp_MTaskCloseDown,
                             Wimp_MTaskInitialise,
                             0
                            };

static bool registered = false;
static int browser_taskid = 0;
static unsigned int count = 0;

static char match_string[] = PASSWORD;
static char goto_url[] = GOTO_URL;
static char enable_url[] = ENABLE_URL;

static unsigned int match_len = 0;

/*******************/
/* Local functions */


/* Returns a pointer to a malloced copy of "string" that is all
   upper case */
static char *upper(char *string)
{
  char *buffer, *source, *dest;

  /*
   * NULL or zero length strings just waste time :)
   */
  if (string == NULL)
    return string;

  if (*string == '\0')
    return string;

  buffer = malloc (strlen (string) + 1); /* cannot be longer */

  /* check malloc was okay */
  if (buffer == NULL)
    return NULL;

  dest = buffer;
  source = string;

  while (*source != '\0')
  {
    *dest = toupper (*source); /* Convert to upper case */
    dest++;
    source++;
  }
  *dest = '\0';
  return buffer;
}


/* */
static void filter_register (void *pw)
{
  _kernel_oserror *er;

  /* Register the post filter for NCFresco */
  er = _swix (Filter_RegisterPostFilter, _INR(0,4), Module_Title, filter_entry, pw,
              browser_taskid, ~Wimp_Poll_KeyPressedMask);
  if (er == NULL)
  {
    registered = true;
    count = 0;
  }
  else
  {
    dprintf (("", "Error registering filter, \"%s\"\n", er->errmess));
  }
}


/* */
static void filter_deregister (void *pw)
{
  _kernel_oserror *er;

  /* Deregister the post filter for NCFresco */
  er = _swix (Filter_DeRegisterPostFilter, _INR(0,4), Module_Title, filter_entry, pw,
         browser_taskid, ~Wimp_Poll_KeyPressedMask);
  if (er == NULL)
  {
    registered = false;
    browser_taskid = 0;
  }
}


/*********************/
/* Init and finalise */


/* */
_kernel_oserror *filter_initialise (void *pw, int podule_base)
{
  unsigned int block[4];
  unsigned int next = 0;
  int match = 1, bytes;
  _kernel_oserror *er;

  /* Cache the length of the match string */
  match_len = strlen (match_string);

  dprintf (("", "password = \"%s\"\n", match_string));
  dprintf (("", "enable url = \"%s\"\n", enable_url));
  dprintf (("", "goto url = \"%s\"\n", goto_url));


  /* If we're not registered, enumerate the tasks to see if NCFresco is already running */
  if (!registered)
  {
    do
    {
      _swix (TaskManager_EnumerateTasks, _INR(0,2)|_OUT(0)|_OUT(2), next, &block, sizeof (block),
             &next, &bytes);
      if (bytes != 0)
        next = 0;
      else
        match = strcmp ((char*)block[1], NCFresco_TaskName);
    }
    while ((match != 0) && (next > 0));

    if (match == 0)
    {
      /* If NCFresco is running, save the task id and register the filter */
      browser_taskid = block[0];
      filter_register (pw);
    }
  }

  /* Register with TaskModule to receive task start and stop messages */
  er = _swix (TaskModule_RegisterBroadcastMessage, _INR(0,3), 0u, message_list, message_entry,
              pw);
  if (er)
    dprintf (("", "Error registering message, \"%s\"\n", er->errmess));

  return NULL;
  NOT_USED (podule_base);
}


/* */
_kernel_oserror *filter_finalise (void *pw)
{
  /* If the filter is registered ... */
  if (registered)
  {
    /* ... deregister it */
    filter_deregister (pw);
    browser_taskid = 0;
  }

  _swix (TaskModule_UnRegisterBroadcastMessage, _INR(0,3), 0u, 0u, message_entry,
         pw);

  return NULL;
}


/************/
/* Handlers */


/* */
_kernel_oserror *filter_handler(_kernel_swi_regs *r, void *pw)
{
  WimpKeyPressedEvent *event = (WimpKeyPressedEvent *)r->r[1];

  dprintf (("", "filter called, key_code = 0x%x\n", event->key_code));
  if (event->key_code == match_string[count])
    count++;
  else if (event->key_code == match_string[0])
    count = 1;
  else
    count = 0;

  /* If we've completed the sequence ... */
  if (count == match_len)
  {
    char *match, *current;
    dprintf (("", "Matched sequence.\n"));
    count = 0;

    /* If Fresco's on the correct page, then we modify the key press event so
       as to send a URL message instead */
    current = upper (getenv ("NCFresco$CurrentURL"));
    match = upper (enable_url);
    if (strstr (current,match) == current)
    {
#if 0
      WimpMessage *message = (WimpMessage *)r->r[1];

      dprintf (("", "On enable URL\n"));

      strncpy (message->data.bytes, goto_url, 236);
      message->data.bytes[235] = '\0';

      message->hdr.size = (20 + strlen (goto_url) + 4) & ~3;
      message->hdr.sender = -1;
      message->hdr.my_ref = 0;           /* no ref */
      message->hdr.your_ref = 0;         /* no ref */
      message->hdr.action_code = URL_MessageNumber; /* the ANT URL action code */

      r->r[0] = Wimp_EUserMessage;
#else
      char *command;

      command = malloc (strlen (goto_url)+strlen ("ispc_urc ")+1);
      sprintf (command, "ispc_urc %s", goto_url);
      dprintf (("", "calling \"%s\"\n", command));
      _kernel_oscli (command);
      free (command);
#endif
    }
    free (current);
    free (match);
  }
  return NULL;
  NOT_USED(pw);
}


/* */
_kernel_oserror *message_handler(_kernel_swi_regs *r, void *pw)
{
  WimpMessage *message = (WimpMessage *)r->r[1];

  dprintf (("", "message intercepted\n"));

  switch (message->hdr.action_code)
  {
    /* Task starting up */
    case Wimp_MTaskInitialise:
      dprintf (("", "init message\n"));
      /* If we're not registered ... */
      if (!registered)
      {
        dprintf (("", "Task name = \"%s\"\n", &message->data.words[2]));

        /* ... and the task is NCFresco ... */
        if (strcmp ((char*)&message->data.words[2], NCFresco_TaskName) == 0)
        {
          dprintf (("", "from fresco, task_id = 0x%x\n", message->hdr.sender));
          /* ... register the filter */
          browser_taskid = message->hdr.sender;
          filter_register (pw);
        }
      }
      break;

    /* Task closing down */
    case Wimp_MTaskCloseDown:
      /* If we're registered, and the message is from the task we're registered to ... */
      if (registered && (message->hdr.sender == browser_taskid))
      {
        dprintf (("", "Fresco died, deregister filter\n"));

        /* ... deregister the filter */
        filter_deregister (pw);
        browser_taskid = 0;
      }
      break;
  }

  return NULL;
}
