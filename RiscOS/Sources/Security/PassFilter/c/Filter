/************************************************************************/
/* File:    Filter.c                                                    */
/* Purpose: Allows error string(s) to be stored and displayed.          */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/* History: 0.06  1999-09-27                                            */
/*                Altered to match the Specification ;*)                */
/************************************************************************/

/* ANSI includes */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <assert.h>

/* Risc OS includes */
#include "kernel.h"
#include "swis.h"
#include "wimp.h"

/* Other libraries */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "Module.h"
#include "Filter.h"
#include "FilterList.h"
#include "Header.h"

#define TaskModule_RegisterBroadcastMessage          0x4d304
#define TaskModule_UnRegisterBroadcastMessage        0x4d305

#define URL_MessageNumber   307072

#define NCFresco_TaskName   "NCBrowser"

static int message_list[] = {
                             Wimp_MTaskCloseDown,
                             Wimp_MTaskInitialise,
                             0
                            };

static bool registered = false;
static int browser_taskid = 0;






/*********************************************************************************/
/* filter_register                                                               */
/*                                                                               */
/* This routine deals with registering a post filter on keypresses               */
/*  from the browser for the module.                                             */
/*                                                                               */
/* Parameters: void*                                                             */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
static void filter_register (void *pw)
{
  _kernel_oserror *er;

  /* Register the post filter for NCFresco */
  er = _swix (Filter_RegisterPostFilter, _INR(0,4), Module_Title, filter_entry, pw,
              browser_taskid, ~Wimp_Poll_KeyPressedMask);
  if (er == NULL)
  {
    registered = true;
  }
  else
  {
    dprintf (("", "Error registering filter, \"%s\"\n", er->errmess));
  }
}



/*********************************************************************************/
/* filter_deregister                                                             */
/*                                                                               */
/* This routine deals with deregistering a post filter on keypresses from the    */
/*  browser for the module.                                                      */
/*                                                                               */
/* Parameters: void*                                                             */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
static void filter_deregister (void *pw)
{
  _kernel_oserror *er;

  /* Deregister the post filter for NCFresco */
  er = _swix (Filter_DeRegisterPostFilter, _INR(0,4), Module_Title, filter_entry, pw,
         browser_taskid, ~Wimp_Poll_KeyPressedMask);
  if (er == NULL)
  {
    registered = false;
    browser_taskid = 0;
  }
}


/*********************************************************************************/
/* filter_initialise                                                             */
/*                                                                               */
/* This routine deals with initialising a filter                                 */
/*                                                                               */
/* Parameters: void*                                                             */
/*             int                                                               */
/*                                                                               */
/* Returns:    kernel_oserror *                                                  */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *filter_initialise (void *pw, int podule_base)
{
  unsigned int block[4];
  unsigned int next = 0;
  int match = 1, bytes;
  _kernel_oserror *er;

  /* If we're not registered, enumerate the tasks to see if NCFresco is already running */
  if (!registered)
  {
    do
    {
      _swix (TaskManager_EnumerateTasks, _INR(0,2)|_OUT(0)|_OUT(2), next, &block, sizeof (block),
             &next, &bytes);
      if (bytes != 0)
        next = 0;
      else
        match = strcmp ((char*)block[1], NCFresco_TaskName);
    }
    while ((match != 0) && (next > 0));

    if (match == 0)
    {
      /* If NCFresco is running, save the task id and register the filter */
      browser_taskid = block[0];
      /* Read the config file */
      if (read_config_file()) /* Config file succesfully read */
      {
        filter_register (pw);
      }
    }
  }

  /* Register with TaskModule to receive task start and stop messages */
  er = _swix (TaskModule_RegisterBroadcastMessage, _INR(0,3), 0u, message_list, message_entry,
              pw);
  if (er)
    dprintf (("", "Error registering message, \"%s\"\n", er->errmess));

  return NULL;
  NOT_USED (podule_base);
}




/*********************************************************************************/
/* filter_finalise                                                               */
/*                                                                               */
/* This routine deals with finalising a filter                                   */
/*                                                                               */
/* Parameters: void*                                                             */
/*                                                                               */
/* Returns:    kernel_oserror *                                                  */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *filter_finalise (void *pw)
{
  /* If the filter is registered ... */
  if (registered)
  {
    /* ... deregister it */
    filter_deregister (pw);
    browser_taskid = 0;
  }

  _swix (TaskModule_UnRegisterBroadcastMessage, _INR(0,3), 0u, 0u, message_entry,
         pw);

  return NULL;
}


/*********************************************************************************/
/* filter_handler                                                                */
/*                                                                               */
/* This routine handles events passed back via the filter mechanism              */
/*                                                                               */
/* Parameters: _kernel_swi_regs *                                                */
/*             void*                                                             */
/*                                                                               */
/* Returns:    kernel_oserror *                                                  */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *filter_handler(_kernel_swi_regs *r, void *pw)
{
  WimpKeyPressedEvent *event = (WimpKeyPressedEvent *)r->r[1];

  dprintf (("", "filter called, key_code = 0x%x\n", event->key_code));

  match_keypress_with_password(event);

  return NULL;
  NOT_USED(pw);
}




/*********************************************************************************/
/* message_handler                                                               */
/*                                                                               */
/* This routine handles Wimp messages passed through the system. It watches for  */
/*  TaskInitialise and TaskCloseDown maessages and if the task is NCFresco       */
/*  registers and deregisters the filters accordingly.                           */
/*                                                                               */
/* Parameters: _kernel_swi_regs *                                                */
/*             void*                                                             */
/*                                                                               */
/* Returns:    kernel_oserror *                                                  */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *message_handler(_kernel_swi_regs *r, void *pw)
{
  WimpMessage *message = (WimpMessage *)r->r[1];

  dprintf (("", "message intercepted\n"));

  switch (message->hdr.action_code)
  {
    /* Task starting up */
    case Wimp_MTaskInitialise:
      dprintf (("", "init message\n"));
      /* If we're not registered ... */
      if (!registered)
      {
        dprintf (("", "Task name = \"%s\"\n", &message->data.words[2]));

        /* ... and the task is NCFresco ... */
        if (strcmp ((char*)&message->data.words[2], NCFresco_TaskName) == 0)
        {
          dprintf (("", "from fresco, task_id = 0x%x\n", message->hdr.sender));
          browser_taskid = message->hdr.sender;
          /* Read the config file */
          if (read_config_file()) /* Config file succesfully read */
          {
            /* ... register the filter */
            filter_register (pw);
          }
        }
      }
      break;

    /* Task closing down */
    case Wimp_MTaskCloseDown:
      /* If we're registered, and the message is from the task we're registered to ... */
      if (registered && (message->hdr.sender == browser_taskid))
      {
        dprintf (("", "Fresco died, deregister filter\n"));

        /* ... deregister the filter */
        filter_deregister (pw);
        browser_taskid = 0;
        filterlist_free_list();
      }
      break;
  }

  return NULL;
}


