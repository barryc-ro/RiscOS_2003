/************************************************************************/
/* File:    FilterErr.c                                                 */
/* Purpose: Allows error string(s) to be stored and displayed.          */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/* History: 0.01  1999-09-27                                            */
/*                Created. Only one error string currently allowed.     */
/************************************************************************/

/* ANSI includes */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdarg.h>

/* Local includes */
#include "FilterErr.h"

/* Other libraries */
#include "DebugLib/DebugLib.h"


static char* error_string;


/*********************************************************************************/
/* error_string_initialise                                                       */
/*                                                                               */
/* This routine initialises the memory used to hold the error string(s)          */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void error_string_initialise(void)
{
  dprintf (("", "error_string_initialise()\n"));
  error_string = NULL;
}



/*********************************************************************************/
/* error_string_set                                                              */
/*                                                                               */
/* This routine sets an error string to the value held                           */
/*                                                                               */
/* Parameters: String : The string to be stored.                                 */
/*             ...    : Vararg's to be added to the string.                      */
/*                                                                               */
/* Returns:    TRUE if the string was set correctly, FALSE otherwise.            */
/*                                                                               */
/*********************************************************************************/
bool error_string_set(char* string, ...)
{
  va_list ap;
  char line[255];
  char temp_error_string[255];

  dprintf (("", "error_string_set()\n"));
  strcpy(temp_error_string, "");

  /* Now add the rest of the line */
  va_start(ap, string);
  vsprintf(line, string, ap);
  strcat (temp_error_string, line);
  va_end(ap);

  /* Allocate memory for the error string */
  if (error_string == NULL)
  {
    dprintf (("", "error_string_set() : Attempting to set error string with '%s'.\n", temp_error_string));
    error_string = malloc(strlen(temp_error_string)+1);
    strcpy(error_string, temp_error_string);
    return (true);
  }
  else
  {
    dprintf (("", "error_string_set() : Error : Attempting to set error string with '%s' when it is already set.\n", string));
    return (false);
  }
}


/*********************************************************************************/
/* error_string_display                                                          */
/*                                                                               */
/* This routine displays the error string(s) held.                               */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void error_string_display(void)
{
  dprintf (("", "error_string_display()\n"));
  if (error_string)
  {
    printf("Error String : %s\n", error_string);
  }
}



/*********************************************************************************/
/* error_string_free                                                             */
/*                                                                               */
/* This routine free's all memory used in holding error strings.                 */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void error_string_free(void)
{
  dprintf (("", "error_string_free()\n"));
  if (error_string != NULL)
  {
    free (error_string);
    error_string = NULL;
  }
}


