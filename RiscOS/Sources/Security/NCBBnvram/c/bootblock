#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <swis.h>

#include <Global/Services.h>
#include <NVRAM.h>

#include "bootblock.h"

#include "Debuglib/Debuglib.h"

struct nvram
{
    char          initialised;
    int           len;
    unsigned char data[1];
};

static struct nvram *bootblock;
static int bootblock_size;

static unsigned int status, status_delta;

/*
 * Module initialisation. Find out where our NVRAM is.
 */
void bootblock_init()
{
    dprintf(("", "bootblock_init()\n"));

    _swix(NVRAM_Read, _INR(0,1)|_OUT(0), "BootBlock", 0, &bootblock_size);
    if (bootblock_size > 0)
    {
        bootblock = malloc(bootblock_size);
        if (bootblock)
        {
            _swix(NVRAM_Read, _INR(0,2), "BootBlock", bootblock, bootblock_size);
            status = BB_STATUS_INSERTED |
                     BB_STATUS_SC_VALID |
                     BB_STATUS_BB_VALID;
        }
    }
}

/*
 * Free our cache.
 */
void bootblock_final()
{
    dprintf(("", "bootblock_free()\n"));
    free(bootblock);
}

/*
 * Send the service call to say we've completed an operation.
 */
void service_ncregistry()
{
    dprintf(("", "service_ncregistry()\n"));
    _swix(OS_ServiceCall, _INR(1,2)|_IN(4), Service_NCRegistry,
                                            status,
                                            status_delta);
}

/*
 * SWI NCBootblock_Enquiry
 */
unsigned char *bootblock_enquiry(unsigned int flags, int *size_out)
{
    unsigned char *ret;

    dprintf(("", "bootblock_enquiry()\n"));

    if (bootblock)
    {
        if (!bootblock->initialised)
            bootblock_reinitialise();

        status |= BB_STATUS_READOK;
        status_delta |= BB_STATUS_READOK;
        *size_out = bootblock->len;
        ret = bootblock->data;
    }
    else
    {
        status |= BB_STATUS_READFAIL;
        status_delta |= BB_STATUS_READFAIL;
        ret = (unsigned char *) -1;
    }

    service_ncregistry();
    return ret;
}

/*
 * SWI NCBootblock_Status
 */
unsigned int bootblock_status(unsigned int flags, unsigned int *delta_out)
{
    dprintf(("", "bootblock_status()\n"));
    *delta_out = status_delta;
    status_delta = 0;

    return status;
}

/*
 * Underlying write routine.
 */
static int do_write(unsigned char *block, int size)
{
    int ret = -5;

    dprintf(("", "do_write()\n"));

    if (size > bootblock_size - offsetof(struct nvram, data))
    {
        ret = -2;
    }
    else
    {
        memcpy(bootblock->data, block, size);
        bootblock->initialised = 1;
        bootblock->len = size;
        _swix(NVRAM_Write, _INR(0,2)|_OUT(0), "BootBlock", bootblock,
                                              offsetof(struct nvram, data) + size,
                                              &ret);
    }

    return ret;
}

/*
 * SWI NCBootblock_Write
 */
int bootblock_write(unsigned char *block, int size)
{
    int ret;

    dprintf(("", "bootblock_write()\n"));

    ret = do_write(block, size);

    if (ret >= 0)
    {
        status |= BB_STATUS_WRITEOK;
        status_delta |= BB_STATUS_WRITEOK;
    }
    else
    {
        status |= BB_STATUS_WRITEFAIL;
        status_delta |= BB_STATUS_WRITEFAIL;
    }

    service_ncregistry();
    return ret;
}

/*
 * SWI NCBootblock_Reinitialise
 */
int bootblock_reinitialise(void)
{
    int size;
    int status = -5;
    struct nvram *temp;

    dprintf(("", "bootblock_reinitialise()\n"));

    if (!bootblock)
        return -5;

    _swix(NVRAM_Read, _INR(0,1)|_OUT(0), "BootBlockDefault", 0, &size);
    if (size > 0)
    {
        temp = malloc(size);
        if (temp)
        {
            _swix(NVRAM_Read, _INR(0,2)|_OUT(0), "BootBlockDefault", temp, size, &status);
            if (status <= 0 || offsetof(struct nvram, data) + temp->len > size)
                status = -5;
            else
                status = do_write(temp->data, temp->len);
            free(temp);
        }
    }
    return status;
}
