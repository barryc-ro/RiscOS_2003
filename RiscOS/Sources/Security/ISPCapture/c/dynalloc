/************************************************************************/
/* File:    dynalloc.c                                                  */
/* Purpose: Handle memory handling for NCMAlite. It can use either DMA  */
/*           or RMA to claim memory, and logs memory usage when using   */
/*           DMA areas.                                                 */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com>            */
/*                                                                      */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"

/* Local includes */
#define PROTOTYPES_INTERNAL
#include "dynalloc.h"
#include "DBUG.h"
#include "kprintf.h"


/* Declare forward prototypes */
static void debug_display_memory_areas(void);


/*********************************************************************************/
/* init_dma                                                                      */
/*                                                                               */
/* This routine initialises the DMA ready for use.                               */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void init_dma(void)
{
  unsigned int loop;
  for(loop=0;loop<MAX_RMA_MALLOX;loop++)
  {
    rmalloc_data[loop].area_number = -1;
    rmalloc_data[loop].area_start = NULL;
  }

  num_mallox = 0;
  return;
}





/*********************************************************************************/
/* get_dma                                                                       */
/*                                                                               */
/* This routine claims an area of memory ready for use.                          */
/*                                                                               */
/* Parameters: int : The number of bytes to be claimed.                          */
/*             char* : A description of the usage of the area.                   */
/*             int : The element of the internal memory handling array to        */
/*                    store the details of the allocated memory into.            */
/*                                                                               */
/* Returns:    unsigned char* : A pointer to the allocated memory, or NULL if    */
/*              the memory could not be claimed.                                 */
/*                                                                               */
/*********************************************************************************/
unsigned char *get_dma(int bytes, char *descrip, unsigned int area_to_use)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_ERROR, "get_dma() : Requesting %d bytes for '%s'\n", bytes, descrip);

  if (rmalloc_data[area_to_use].area_number == -1)
  {
    r.r[0] = 0;
    r.r[1] = -1;
    r.r[2] = bytes;
    r.r[3] = -1;
    r.r[4] = 128; /* not draggable */
    r.r[5] = bytes; /* 1 Meg */
    r.r[6] = 0;
    r.r[7] = 0;
    r.r[8] = (int) descrip;

    if ((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "get_dma: OS_DynamicArea claim failed: \n");
      return ((void *)NULL);
    }

    rmalloc_data[area_to_use].area_number = r.r[1];
    rmalloc_data[area_to_use].area_start = (unsigned char *) r.r[3];
    DBUG_PRINTF(DBUG_LVL_DIAG, "get_dma() : area number=%d, area_start=%p\n", rmalloc_data[area_to_use].area_number, rmalloc_data[area_to_use].area_start);
    num_mallox++;
    return (unsigned char *)(r.r[3]);
  }

  return ((void *)NULL);
}




/*********************************************************************************/
/* free_dma                                                                      */
/*                                                                               */
/* This routine frees a previously-claimed area of DMA memory.                   */
/*                                                                               */
/* Parameters: unsigned int : The area of memory to be free'd.                   */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void free_dma(unsigned int area_to_use)
{
  int loop;
  _kernel_swi_regs r;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_DIAG, "free_dma(): Release area %d (starts at %p)\n", area_to_use, rmalloc_data[area_to_use].area_start);
  r.r[0] = 1;
  r.r[1] = rmalloc_data[loop].area_number;

  if((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "free_dma(): dynamic area release failed.\n");
    return;
  }

  rmalloc_data[area_to_use].area_number = -1;
  rmalloc_data[area_to_use].area_start = NULL;
  num_mallox--;

  return;
}






/*********************************************************************************/
/* init_rma                                                                      */
/*                                                                               */
/* This routine initialises the RMA ready for use.                               */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void init_rma(void)
{
  init_dma();
}




/*********************************************************************************/
/* get_rma                                                                       */
/*                                                                               */
/* This routine claims an area of memory ready for use.                          */
/*                                                                               */
/* Parameters: int : The number of bytes to be claimed.                          */
/*             int : The element of the internal memory handling array to        */
/*                    store the details of the allocated memory into.            */
/*                                                                               */
/* Returns:    unsigned char* : A pointer to the allocated memory, or NULL if    */
/*              the memory could not be claimed.                                 */
/*                                                                               */
/*********************************************************************************/
unsigned char *get_rma(int size, unsigned int area_to_use)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_DIAG, "get_rma() : Request for an area of %d bytes.\n", size);

  if(rmalloc_data[area_to_use].area_number == -1)
  {
    r.r[0] = 6; /* claim */
    r.r[3] = size;
    if((e=_kernel_swi(XOS_Bit | OS_Module, &r, &r))!=NULL)
    {
      DBUG_PRINTF(DBUG_LVL_ERROR, "get_rma(): OS_Module claim failed.\n");
      return((unsigned char *)NULL);
    }

    rmalloc_data[area_to_use].area_number = 1;
    rmalloc_data[area_to_use].area_start = (unsigned char *)(r.r[2]);
    DBUG_PRINTF(DBUG_LVL_DIAG, "get_rma() : Area %d: %d bytes created at %p.\n", area_to_use, size, rmalloc_data[area_to_use].area_start);
    num_mallox++;

    return((unsigned char *)(r.r[2])); /* return base address */
  }

  return((unsigned char *)NULL);
}




/*********************************************************************************/
/* free_rma                                                                      */
/*                                                                               */
/* This routine frees a previously-claimed area of RMA memory.                   */
/*                                                                               */
/* Parameters: unsigned int : The area to be free'd.                             */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void free_rma(unsigned int area_to_use)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  DBUG_PRINTF(DBUG_LVL_DIAG, "free_rma(): Release area %d (starts at %p)\n", area_to_use, rmalloc_data[area_to_use].area_start);

  r.r[0] = 7; /* free RMA */
  r.r[2] = (int)rmalloc_data[area_to_use].area_start;
  if((e=_kernel_swi(OS_Module, &r, &r))!=NULL)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "free_rma: RMA release failed.\n");
    return;
  }

  rmalloc_data[area_to_use].area_number = -1;
  rmalloc_data[area_to_use].area_start = NULL;
  num_mallox--;

  return;
}




/*********************************************************************************/
/* rminit                                                                        */
/*                                                                               */
/* This routine initialises the memory systems. It decides whether to use RMA    */
/*  or DMA as the store.                                                         */
/*                                                                               */
/* Parameters: None                                                              */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void rminit(void)
{
  int variant;

  DBUG_PRINTF(DBUG_LVL_DIAG, "rminit()\n");

  variant = _kernel_osbyte(129, 0, 0xff) & 0xff;
  if(variant < 0xa5)
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "rminit() : Use RMA for memory accesses.\n");
    use_dynamic_areas = false;
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "rminit() : Use DMA for memory accesses.\n");
    use_dynamic_areas = false;
  }

  init_dma();
  return;
}



/*********************************************************************************/
/* rmalloc                                                                       */
/*                                                                               */
/* This routine is a generic interface to the memory routines, and acts as a     */
/*  wrapper for malloc()                                                         */
/*                                                                               */
/* Parameters: int   : The amount of memory to be claimed.                       */
/*             char* : A string describing the usage of the memory.              */
/*                                                                               */
/* Returns:    unsigned char* : A pointer to the memory area claimed, or NULL    */
/*              if the memory could not be claimed.                              */
/*                                                                               */
/*********************************************************************************/
unsigned char *rmalloc(int s, char *n)
{
  unsigned char* return_value = NULL;
  unsigned int loop = 0;

  DBUG_PRINTF(DBUG_LVL_DIAG, "rmalloc(): Want %d bytes for %s\n", s, n);

  /* We have an array of up to MAX_RMA_MALLOX to store details of memory areas in. */
  /*  Firstly find if we have one free. */
  if (num_mallox >= MAX_RMA_MALLOX)
  {
    DBUG_PRINTF(DBUG_LVL_ERROR, "rmalloc(): All areas used.\n");
    return (return_value);
  }

  /* Now find the first free area and use that. */
  for(loop=0;loop<MAX_RMA_MALLOX;loop++)
  {
    if(rmalloc_data[loop].area_number == -1)
    {
      if(use_dynamic_areas)
      {
        /* Make it choose whether to use a DA or RMA according to whether the size is less than 2K. */
        if (s < 2048)
        {
          return_value = get_rma(s, loop);
          rmalloc_data[loop].stored_in_rma = true;
          debug_display_memory_areas();
          return (return_value);
        }
        else
        {
          rmalloc_data[loop].stored_in_rma = false;
          return_value = get_dma(s, n, loop);
          debug_display_memory_areas();
          return (return_value);
        }
      }
      else /* Dynamic areas not available */
      {
        return_value = get_rma(s, loop);
        rmalloc_data[loop].stored_in_rma = true;
        debug_display_memory_areas();
        return (return_value);
      }
    }
  }

  debug_display_memory_areas();

  return (return_value);

}



/*********************************************************************************/
/* rmfree                                                                        */
/*                                                                               */
/* This routine is a generic interface to the memory routines, and acts as a     */
/*  wrapper for free()                                                           */
/*                                                                               */
/* Parameters: unsigned char* : A pointer to the memory area to be free'd.       */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void rmfree(unsigned char *ptr)
{
  /* Find whichever element of the internal array holds the pointer passed in
      and free it */
  unsigned int loop = 0;

  DBUG_PRINTF(DBUG_LVL_DIAG, "rmfree(): Attempting to free memory area held at %p\n", ptr);

  for(loop=0; loop<MAX_RMA_MALLOX; loop++)
  {
    if ((rmalloc_data[loop].area_start == ptr) && (rmalloc_data[loop].area_number != -1))
    {
      /* If it is a DA or RMA delete as appropriate. */
      if (rmalloc_data[loop].stored_in_rma == true)
      {
        if (ptr)
        {
          free_rma(loop);
          ptr = NULL;
        }
      }
      else
      {
        free_dma(loop);
      }
    }
  }

  debug_display_memory_areas();

  return;
}




/*********************************************************************************/
/* rmfree_all                                                                    */
/*                                                                               */
/* This routine is a generic interface to the memory routines, and free's all    */
/*  memory currently known in the system.                                        */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void rmfree_all(void)
{
  unsigned int loop = 0;

  printf("Memory manager stats: %d areas present.\n", num_mallox);

  for(loop=0; loop<MAX_RMA_MALLOX; loop++)
  {
    if(rmalloc_data[loop].area_number != -1)
    {
      /* If it is a DA or RMA delete as appropriate. */
      if (rmalloc_data[loop].stored_in_rma == true)
      {
        free_rma(loop);
      }
      else
      {
        free_dma(loop);
      }
    }
  }

  debug_display_memory_areas();

return;
}



/*********************************************************************************/
/* debug_display_memory_areas                                                    */
/*                                                                               */
/* This routine displays a list of all known memory areas to a debug stream.     */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
static void debug_display_memory_areas(void)
{
#ifdef ENABLE_DEBUGGING
  unsigned int loop = 0;
  for(loop=0; loop<MAX_RMA_MALLOX; loop++)
  {
    if(rmalloc_data[loop].area_number != -1)
    {
     if (rmalloc_data[loop].stored_in_rma)
       DBUG_PRINTF(DBUG_LVL_DIAG, "debug_display_memory_areas() : Area: %d [number %d]  Held in RMA  Start: %p \n", loop, rmalloc_data[loop].area_number, rmalloc_data[loop].area_start);
     else
       DBUG_PRINTF(DBUG_LVL_DIAG, "debug_display_memory_areas() : Area: %d [number %d]  Held in a DA Start: %p \n", loop, rmalloc_data[loop].area_number, rmalloc_data[loop].area_start);
    }
  }
#endif /* ENABLE_DEBUGGING */

  return;
}





/*********************************************************************************/
/* rmstat                                                                        */
/*                                                                               */
/* This routine displays a list of all known memory areas.                       */
/*                                                                               */
/* Parameters: None.                                                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void rmstat(void)
{
  unsigned int loop = 0;

  printf("Memory manager stats: %d areas present.\n", num_mallox);

  for(loop=0; loop<MAX_RMA_MALLOX; loop++)
  {
    if(rmalloc_data[loop].area_number != -1)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, " rmstat() : Area: %d[%d]  Start: %p\n", loop, rmalloc_data[loop].area_number, rmalloc_data[loop].area_start);
      if (rmalloc_data[loop].stored_in_rma)
        printf("Area: %d  Held in RMA  Start: %p\n", rmalloc_data[loop].area_number, rmalloc_data[loop].area_start );
      else
        printf("Area: %d  Held in DMA  Start: %p\n", rmalloc_data[loop].area_number, rmalloc_data[loop].area_start );
    }
  }

  printf("\n");
  return;
}


