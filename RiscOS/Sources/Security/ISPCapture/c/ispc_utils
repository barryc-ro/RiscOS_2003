#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL
#include "ispc_utils.h"
#include "ispc_ispc.h"
#include "ispc_url.h"

#include "smcard.h"

#include "DBUG.h"

void dump_block(unsigned char *src, int bytes)
{
  int lines, stub;
  char t[17];
  int l;

  lines = bytes / 16;
  stub = bytes % 16;
  t[16] = 0;

  while(lines--) {
    for(l=0; l<16; l++, src++) {
      printf("%.2x ", *src);
      if(iscntrl(*src)) t[l] = '.';
      else t[l] = *src;
    }
    printf("  %s\n", t);
  }

  for(l=0; l<16; l++, src++) {
    if(l<stub) {
      printf("%.2x ", *src);
      if(iscntrl(*src)) t[l] = '.';
      else t[l] = *src;
    } else {
      printf(".. ");
      t[l] = 0x20;
    }
  }
  printf("  %s\n", t);
}

int strterm(char *s)
{
    int b;

    for(b=0; isprint(*s); b++, s++);
    *s = 0;
    return(b);
}

void shutdown_nc(void)
{
    _kernel_swi_regs r;

    r.r[0] = 0;
    _kernel_swi(0x4c7c1, &r, &r);
    return;
}

int caseless_strcmp(char *a, char *b)
{
  int n;

  for(n=0; n<MAX_TAGNAME; n++, a++, b++) {
    if(toupper(*a) != toupper(*b)) return(1);
    if(iscntrl(*a) || iscntrl(*b)) break;
  }

  if(n>0) return(0);
  else return(1);
}


int ui_present(void)
{
    _kernel_swi_regs r;
    char ui[] = UI_ENV_VAR;

    r.r[0] = (int)ui;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;

    _kernel_swi(OS_ReadVarVal, &r, &r);

    if(r.r[2] == 0) return(0);
    return(1);
}



unsigned int read_big_word(char *buff)
{
    unsigned int i;

    i = ((*buff)<<24 | *(buff+1)<<16 | *(buff+2)<<8 | *(buff+3));
    return(i);
}

unsigned int read_big_short(char *buff)
{
    unsigned int i;

    i = ((*buff)<<8 | *(buff+1));
    return(i);
}

void write_big_word(char *buff, unsigned int w)
{
    *buff++ = (w & 0xff000000)>>24;
    *buff++ = (w & 0x00ff0000)>>16;
    *buff++ = (w & 0x0000ff00)>>8;
    *buff++ = (w & 0x000000ff);
    return;
}

void write_big_short(char *buff, unsigned int w)
{
    *buff++ = (w & 0xff00)>>8;
    *buff++ = w & 0x00ff;
    return;
}

void write_little_word(char *buff, unsigned int w)
{
    *buff++ = (w & 0x000000ff)>>24;
    *buff++ = (w & 0x0000ff00)>>16;
    *buff++ = (w & 0x00ff0000)>>8;
    *buff++ = (w & 0xff000000);
    return;
}

unsigned int read_little_word(char *buff)
{
    unsigned int i;

    i = ((*buff+3)<<24 | *(buff+2)<<16 | *(buff+1)<<8 | *(buff));
    return(i);
}

void ispc_hourglass_on(void)
{
    _kernel_swi_regs r;

    if(ispc_hourglass_status == 0) {
        ispc_hourglass_status = 1;
        _kernel_swi(Hourglass_On, &r, &r);
    }
    return;
}

void ispc_hourglass_off(void)
{
    _kernel_swi_regs r;

    if(ispc_hourglass_status == 1) {
        ispc_hourglass_status = 0;
        _kernel_swi(Hourglass_Off, &r, &r);
    }
    return;
}

