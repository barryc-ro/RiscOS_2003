#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
/* Include headers from ncmalib */
#include "ncma_tags.h"
#include "dynalloc.h"
#include "smcard.h"
#define PROTOTYPES_INTERNAL
#include "smtags.h"
#define PROTOTYPES_INTERNAL
#include "ncma_bootb.h"
#include "ncma_scard.h"
#include "ncma_utils.h"

/* includes for other segments */
#define PROTOTYPES_INTERNAL
#include "module.h"
#include "DBUG.h"
#include "ispc_ispc.h"
#include "ispc_cmds.h"

#include "VersionNum"

#ifdef ENABLE_DEBUGGING
#include "Debuglib/Debuglib.h"
#endif /* ENABLE_DEBUGGING */

#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

/* code */

#ifdef ENABLE_DEBUGGING
//  const int DebugOutputDevice = PRINTF_OUTPUT;
  debug_device DebugOutputDevice = PDEBUG_OUTPUT;
#endif /* ENABLE_DEBUGGING */

_kernel_oserror *module_init(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror f = {0x00810800, "ISPcapture failed to initialize."}, *e = NULL;
    _kernel_swi_regs r;
    static char keyword[] = "verbose/s,file/k,debug/k/e";
    static int args[32];

    module_wsp = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
    r.r[0] = (int)module_wsp;
    TinyError = _kernel_swi(TinySupport_Share, &r, &r);
#endif

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   memset((char *)args, 0, 32 * sizeof(int));
   _kernel_swi(OS_ReadArgs, &r, &r);

#ifdef ENABLE_DEBUGGING
  debug_initialise ("ISPCapture", "izipfs:$.ispclog", "");
  debug_atexit ();
  debug_output_device (DebugOutputDevice);   /* Output debug info via pdebug */
#ifdef ALLOW_BUFFERED_DEBUGLIB_OUTPUT
  debug_output_buffer_on (0, 4096);
#else
#endif /* ALLOW_BUFFERED_DEBUGLIB_OUTPUT */
#endif /* ENABLE_DEBUGGING */

   /* initialising memory subsystem... */
   rminit();

   /* registering resources... */
   resource_init();

  /* initialising ISPC subsystem... */
   if(ispc_ispc_init()<0)
   {
     /* ncma init failed. */
     e = &f;
     goto out;
   };

   return ((_kernel_oserror *)0);

out:
   /* Bummer! */
   return (e);
}



_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &ispc_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);
    return((_kernel_oserror *)NULL);

}



_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
#ifdef USE_TINY
  _kernel_swi_regs r;
  if ( TinyError == NULL ) _kernel_swi( TinySupport_Die, &r, &r);
#endif


  QUIET printf("ispc_final: releasing memory resources...\n");
  rmfree_all();

  QUIET printf("ispc_final: freeing resources...\n");
  resource_final();

  QUIET printf("ispc_final: done.\n");

  return((_kernel_oserror *)NULL);
}





