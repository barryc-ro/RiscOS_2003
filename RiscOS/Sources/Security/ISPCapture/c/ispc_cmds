#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "Debuglib/Debuglib.h"

/* Include headers from ncmalib */
#include "ncma_tags.h"
#include "dynalloc.h"
#include "smcard.h"
#include "smtags.h"
#include "ncma_bootb.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "module.h"

/* Now for local includes... */
#include "ispc_cmds.h"
#include "ispc_ispc.h"
#include "ispc_url.h"
#include "ispc_utils.h"
#include "kprintf.h"
#include "ispc_file.h"
#include "DBUG.h"

/*
   The core of the new, altered version of ISPCapture are two sc_bootblock
data structures. On initialisation of a new set of ISPCapture screens these
both store the current bootblock settings. The 'entry_bootblock' structure
*always* maintains these setting throughout the session, whilst the
'altered_bootblock' contains the user-altered tags.
   Storing the data in such a way allows us to do several things:
   * Refresh an HTML page with the entry values;
   * Go backwards through pages (you just display the altered values instead of the original ones).
   * Save values early without having to go through all the screens.
   * Preserve tags not mentioned within the HTML, a long-standing requirement that we have not previously been able to meet.
*/

/* This structure holds the version of the bootlbock data on entry. */
sc_bootblock_data_struct* entry_bootblock;
/* This structure holds the altered version of the bootlbock data. */
sc_bootblock_data_struct* altered_bootblock;


int cmd_ispc_nullcmd(char *s, int n)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_nullcmd()\n");
  return(0);
}

int cmd_ispc_status(char *s, int n)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_status()\n");
  kprintf("ISPCapture has no status to report.\n");
  return(0);
}



int cmd_ispc_urc(char *q, int n)
{
    int bytes;
    char *a = NULL;
    char *b = NULL;
    int i;
    char *page_name;
    int tmp;
    int newsize;

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc()\n");

    memset(cmdargs, 0, 512);
    memcpy(cmdargs, q, 256);
    bytes = strterm(cmdargs);

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): got %d args as %d bytes in \"%s\"\n", n, bytes, cmdargs);

    if(n==2)
    {
        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): looks like a POST method. Trying for file\n");
        if(ispc_parse_file(cmdargs)<0) return(0);
    }

    ispc_parse_url(cmdargs);

    if(strstr(urlv[0], "begin")) /* fire up our first page */
    {
        int error = 0;

        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): begin sequence\n");

        memset(redirect_url, 0, MAX_URL);
        memset(end_url, 0, MAX_URL);
        memset(error_url, 0, MAX_URL);
        memset(abort_url, 0, MAX_URL);

        boot_managed_access(); /* build cache without connecting */

        /* Now create the structures to store the data. */
        entry_bootblock = (sc_bootblock_data_struct*)rmalloc(sizeof(sc_bootblock_data_struct), "Entry bootblock");
        altered_bootblock = (sc_bootblock_data_struct*)rmalloc(sizeof(sc_bootblock_data_struct), "Altered bootblock");
        dprintf(("", "cmd_ispc_urc(): Initialising bootblock entry structure...\n"));
        initialise_sc_bootblock_data_struct(entry_bootblock);
        dprintf(("", "cmd_ispc_urc(): Initialising bootblock altered structure...\n"));
        initialise_sc_bootblock_data_struct(altered_bootblock);

        dprintf(("", "cmd_ispc_urc(): Reading entry bootblock\n"));
        error = read_bootblock_from_ncbootblock(entry_bootblock);
        if (error <= 0)
        {
          dprintf(("", "cmd_ispc_urc(): Error %d whilst reading Bootblock 1\n", error));
        }
        dprintf(("", "cmd_ispc_urc(): Reading altered bootblock\n"));
        error = read_bootblock_from_ncbootblock(altered_bootblock);
        if (error <= 0)
        {
          dprintf(("", "cmd_ispc_urc(): Error %d whilst reading Bootblock 2\n", error));
        }

        dprintf(("", "cmd_ispc_urc(): All bootblocks initialised\n"));

	if(urlc>1) /* ooh, there's args */
	{
	    for(tmp = 1; tmp < urlc; tmp++)
	    {
            	if(caseless_strncmp(urlv[tmp], "START", 5)==0)
                {
	      	    if((a = strchr(urlv[tmp], '=')) != NULL) a = a + 1; // find '=, and get param after it
	      	    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): found START param \"%s\"\n", a);
	      	    continue;
	      	}

	      	if(caseless_strncmp(urlv[tmp], "ABORT", 3) == 0)
                {
	      	    if((b = strchr(urlv[tmp], '=')) != NULL)
                    {
	      	        b++; // skip the equals
	      	        strncpy(abort_url, b, MAX_URL);
	      	        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): found ABORT param \"%s\"\n", end_url);
	      	    }
	      	    else
                    {
	      	        DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): found ABORT param with no value - ignoring\n");
	      	    }
	      	    continue;
	      	}

	      	if(caseless_strncmp(urlv[tmp], "END", 3) == 0)
                {
	      	    if((b = strchr(urlv[tmp], '=')) != NULL)
                    {
	      	        b++; // skip the equals
	      	        strncpy(end_url, b, MAX_URL);
	      	        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): found END param \"%s\"\n", end_url);
	      	    }
	      	    else
                    {
	      	        DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): found END param with no value - ignoring\n");
	      	    }
	      	    continue;
	      	}

	      	if(caseless_strncmp(urlv[tmp], "ERROR", 5) == 0)
                {
	      	    if((b = strchr(urlv[tmp], '=')) != NULL)
                    {
	      	        b++; // skip the equals
	      	        strncpy(error_url, b, MAX_URL);
	      	        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): found ERROR param \"%s\"\n", error_url);
	      	    }
	      	    else
                    {
	      	        DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): found ERROR param with no value - ignoring\n");
	      	    }
	      	    continue;
	      	}

    	    	DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): found unknown param \"%s\" - ignoring\n", urlv[tmp]);
    	    }
    	}

    	if(a != NULL) /* we have  a BEGIN url */
        {
	    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): attempting to fetch URL \"%s\"\n", a);
	    ispc_url_open(a);
	    return(0);
	}

    	/* if we get here, 'begin' was either invalid, or not specified */
	if(read_os_var(ISPCAPTURE_VAR_NAME, redirect_url, 256)>0)
	{
	    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): redirect from env. var. \"%s\"\n", redirect_url);
	    if((page_name = preprocess_file(url_to_file(redirect_url)))!=NULL)
	    {
	    	DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): preprocessed to \"%s\"\n", page_name);
		ispc_url_open(page_name);
	    }
	    else
	    {
		DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): preprocessing failed...using as is\n");
	        ispc_url_open(redirect_url);
	    }
	    memset(redirect_url, 0, 256);
	}
	else
	{
	    if((page_name = preprocess_file(url_to_file(URL_PATH(ISPC1))))!=NULL)
	    {
	    	DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): preprocessed \"%s\" to \"%s\"\n", URL_PATH(ISPC1), page_name);
	        ispc_url_open(page_name);
	    }
	    else
	    {
	    	DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): preprocess failed, fetching \"%s\"\n", URL_PATH(ISPC1));
	        ispc_url_open(URL_PATH(ispc1));
	    }
	}
        return(0);
    }

    /* Submit an HTML page-worth of arguments. */
    if(strstr(urlv[0], "submit"))
    {
      int l;
      DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): args submitted\n");

      /* add args to 'script' */
      for(l = 1; l<urlc; l++)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): calling PutLine with arg %d \"%s\" 0x%x\n", l, urlv[l], (int)urlv[l]);
#ifdef ENABLE_DEBUGGING
        cmd_ispc_showargs(NULL, 0);
#endif
        if((a = strchr(urlv[l], '='))!=NULL)
        {
          *a = 0x20; /* replace = with SPC */
        }
        else
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): tag has no arguments!\n");
          continue;
        }

        for(i=0; *a!=0x0;a++)
        {
          if((isgraph(*a)) && (*a!=0x22))
          {
            i++; /* any actual args? */
          }
        }

        if(i==0)
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): tag has null args - ignoring\n");
          continue;
        }

        if(putline(urlv[l])<0)
        {
          DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): barfed on PutLine return\n");
          return(0);
        }
      }

        if(*redirect_url != 0)
        { // set when putline encounters a 'next=...' tag
            DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): redirecting to %s\n", redirect_url);
            if((caseless_strncmp(redirect_url, "compile", 7)==0) ||
               (caseless_strncmp(redirect_url, "ispcapture:compile", 18)==0))
            {
              goto compile_block;
            }
            if((page_name = preprocess_file(url_to_file(redirect_url)))!=NULL)
            {
                DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_irc(): preprocessed to \"%s\"\n", page_name);
                ispc_url_open(page_name);
            }
            else
            {
                DBUG_PRINTF(DBUG_LVL_ERROR, "cmd_ispc_urc(): preprocessing failed...using as is\n");
                ispc_url_open(redirect_url);
            }
            memset(redirect_url, 0, 256);
        }
        return(0);
    }

    if(strstr(urlv[0], "compile"))
    { /* compile args */
        compile_block:
    	DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): compile submitted args\n");

        {
		DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): final blocksize %d bytes\n", newsize);
		if(ispc_write_smartcard(newsize)<0)
		{
		    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): arse; smartcard write failed - aborting\n");
		    ispc_completed(ispc_FINISH_ERROR);
		}
		else
		{
		    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): smartcard write ok, returning success\n");
		    ispc_completed(ispc_FINISH_SUCCESS); /* start the dial up again */
		}
	}
    	return(0);
    }

    /* User wishes to abort unit reconfiguration. */
    if(strstr(urlv[0], "abort"))
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_urc(): abort received\n");
      ispc_completed(ispc_FINISH_ABORT);
    }

    if(strstr(urlv[0], "resetdefaults"))
    {
        if (ispc_resetdefaults()<0)
        {
    	  ispc_completed(ispc_FINISH_ERROR);
        }
        else
        {
          ispc_completed(ispc_FINISH_SUCCESS); /* start the dial up again */
        }
    }

    return(0);
}

int cmd_ispc_memory(char *s, int n)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_memory()\n");
    rmstat();
    return(0);
}

int cmd_ispc_showargs(char *s, int n)
{
    int l;

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_showargs()\n");

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_showargs(): Last arg list:\n\n");
    for(l=0; l<urlc; l++)
    {
      DBUG_PRINTF(DBUG_LVL_DIAG, "\t\targ %d: %s\t\t0x%x\n", l, urlv[l], (int)urlv[l]);
    }
    return(0);
}

int cmd_ispc_showscript(char *s, int n)
{

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_showscript(): Routine removed\n");
#if 0
    char *p;

    kprintf("Current internal script:\n\n");
    if(ibuff==NULL) {
        kprintf("No script.\n");
        return(0);
    }
    for(p=ibuff; (p=getline(p, ibuff, ibytes))!=NULL; p+=(strlen(p)+1)) kprintf("\t> %s\n", p);
    kprintf("\n\n");
#endif
    return(0);
}

int cmd_ispc_parsescript(char *s, int n)
{
    char *src, *dst;
    int sn, dn;
    FILE *f;

    DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_parsescript()\n");

    if((src = (char *)rmalloc(4096, "ParseScript"))==NULL)
    {
        DBUG_PRINTF(DBUG_LVL_DIAG, "cmd_ispc_parsescript: couldn't claim workspace\n");
     	return(0);
    }

    sn = dn = 2048;
    dst = src + sn;

    if((f = fopen(s, "r"))==NULL)
    {
        DBUG_PRINTF(DBUG_LVL_ERROR, "cms_ispc_parsescript: couldn't open file\n");
        return(0);
    }

    sn = fread(src, 1, 2048, f);
    fclose(f);

    dn = format_script(src, sn, dst, dn);

    DBUG_PRINTF(DBUG_LVL_DIAG, "%.*s\n", dn, dst);
    rmfree((unsigned char *)src);
    return(0);
}


void free_memory(void)
{
  dprintf(("", "free_memory()\n"));

  debug_rmstat();
  if (entry_bootblock)
  {
    free_sc_bootblock_data_struct(entry_bootblock);
    rmfree((unsigned char*)entry_bootblock);
    entry_bootblock = NULL;
  }
  if (altered_bootblock)
  {
    free_sc_bootblock_data_struct(altered_bootblock);
    rmfree((unsigned char*)altered_bootblock);
    altered_bootblock = NULL;
  }
  debug_rmstat();
}
