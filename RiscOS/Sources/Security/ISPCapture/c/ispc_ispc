
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "Debuglib/Debuglib.h"

#include "socklib.h"
#include "inetlib.h"


#pragma -d0
#include "netdb.h"
#pragma -d1


/* Include headers from ncmalib */
#include "ncma_tags.h"
#ifdef CCIJ10
 #include "smcardccij.h"
 #include "smtagsCCIJ.h"
#else
 #include "smcard.h"
 #include "smtags.h"
#endif
#include "ncma_bootb.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "module.h"

/* Now for local includes... */
#define PROTOTYPES_INTERNAL
#include "ispc_cmds.h"
#define PROTOTYPES_INTERNAL
#include "ispc_ispc.h"
#include "ispc_url.h"
#include "ispc_utils.h"
#include "kprintf.h"
#include "dynalloc.h"
#include "ispc_file.h"
#include "DBUG.h"





/* characters allowed by the SoftModem. Not including dash and space
   which are allowed but screw up DiallerB and are disallowed by the
   Funai specification */
// static const char phone_allowable_chars[] = "0123456789ABCD,#!*;";



char *getline(char *p, char *s, int n)
{
    char *r, *e;

    DBUG_PRINTF(DBUG_LVL_DIAG, "getline()\n");

    e = s + n;
    for(; p<e; p++)
    {
	if(*p == 0)
	  return NULL;
	if(*p == 0x0a)
	{
	    input_line++;
	    continue;
	}
	if(isprint(*p))
	{
	    if(*p == '#')
	    {
		input_line++;
		while(*p != 0x0a) p++;
		continue;
	    }
	    else
	    {
		for(r=p; (*r != 0x0a) && r<e; r++);
		*r = 0x0;
		input_line++;
		return(p);
	    }
	}
    }
    return NULL;
}



int caseless_strncmp(char const *a, char const *b, int n)
{
//  DBUG_PRINTF(DBUG_LVL_DIAG, "caseless_strncmp(): Comparing %d letters of %s and %s", n, a , b);

  while(n--)
  {
//    DBUG_PRINTF(DBUG_LVL_DIAG, "caseless_strncmp(): *a, *b = %c %c\n", *a, *b);
	if(*a == 0)
	{
//          DBUG_PRINTF(DBUG_LVL_DIAG, "caseless_strncmp(): EOS reached\n");
	  return(0);
	}
	if(toupper(*a++) != toupper(*b++))
	{
//          DBUG_PRINTF(DBUG_LVL_DIAG, "caseless_strncmp(): Letters do not macth\n");
	  return(1);
	}
  }
//  DBUG_PRINTF(DBUG_LVL_DIAG, "caseless_strncmp(): Strings match\n");
  return(0);
}






#ifndef CCIJ10
int tag_headers(char *obuff, char *optr)
{
    int bytes;
//    int iap_id = 42;

    bytes = optr - obuff;

    DBUG_PRINTF(DBUG_LVL_DIAG, "tag_headers(): adding 28 bytes of header info to %d bytes of data\n", bytes);

//    memmove(obuff + 28, obuff, bytes);

//    tag(obuff, NCIBeginSignatureTag, NULL, bytes+22);
//    tag(obuff + 6, NCIIAPConnectMatrixTag, NULL, bytes + 16);
//    tag(obuff + 12, NCIGroupTag, NULL, bytes + 10);
//    tag(obuff + 18, NCIIAPIDTag, (char *)&iap_id, 4);
    return(bytes+28);
}

int hash(char *obuff, int n)
{
    char nohash[] = "by Ant";

//    tag(obuff + n, NCISignatureTag, nohash, strlen(nohash));
    return(n + 6 + strlen(nohash));
}
#endif

#if 0
static int finish_compile(char *start, char *end)
{
    int bytes;
#if 0
    DBUG_PRINTF(DBUG_LVL_DIAG, "finish_compile()\n");
#ifdef CCIJ10
/*  *end++ = 0xFF */
    bytes = end - start;
#else
    bytes = hash(start, tag_headers(start, end));
#endif
#endif /* 0 */
return bytes;
}
#endif

int min(int a, int b)
{
    DBUG_PRINTF(DBUG_LVL_DIAG, "min()\n");
    return(a<b?a:b);
}



int read_os_var(char *varname, char *buff, int n)
{
  _kernel_swi_regs r;

  DBUG_PRINTF(DBUG_LVL_DIAG, "read_os_var\n");

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = (buff==NULL)?0x80000000:n;
  r.r[3] = 0;
  r.r[4] = 0;
  if(_kernel_swi(OS_ReadVarVal, &r, &r) != NULL) return(-1);
  if(buff) {
      *(buff + r.r[2]) = 0;
      return(r.r[2]);
  }
  return(-(r.r[2]));

}

int write_os_var(char *varname, char *buff, int n) /* set an OS string variable */
{
  _kernel_swi_regs r;

  DBUG_PRINTF(DBUG_LVL_DIAG, "write_os_var\n");

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = n;
  r.r[3] = 0;
  r.r[4] = 0; /* type string GSTrans once */
  if(_kernel_swi(OS_SetVarVal, &r, &r) != NULL)
  {
    return(-1);
  }
  return(0);
}


int ispc_ispc_init(void)
{

  DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_ispc_init(): setting up URL interface\n");
  if(ispc_url_init()<0)
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_ispc_init(): URL init failed\n");
    return(-1);
  }
  return(0);
}




int putline(char *s) /* s is of the form "[tagname] [tag value]" */
{
    bool tag_found = false;
    char* p = NULL;
    int loop;

    DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): entered with arg \"%s\" 0x%x\n", s, (int)s);

    display_bootblock_tags(altered_bootblock);

    /* See if this is a page redirect attempt */
    if(caseless_strncmp(s, "NEXT", 4)==0)
    {
      /* redirect to next ISPcapture page */
      DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): Redirecting to next ISPCpature page...\n");
      if((p = strchr(s, ' '))==NULL)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): bad ISPcapture page redirect\n");
      }
      else
      {
        strncpy(redirect_url, p+1, strlen(p+1));
        DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): Redirecting to URL \"%s\"\n", redirect_url);
        return(0);
      }
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): Searching through the tag_cache for tag %s\n", s);
    for(loop=0; loop<MAX_TAG_CACHE; loop++)
    {
      if(altered_bootblock->tag_cache->tag[loop].tag == NULL)
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): No more tags, breaking\n");
        break; /* no more tags */
      }
//      DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): tag %d is %s\n", loop, altered_bootblock->tag_cache->tag[loop].tag);
      if(altered_bootblock->tag_cache->tag[loop].bytes != 0) /* Tag has a value */
      {
        DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): Matching tag \"%s\" with \"%s\"\n", s, altered_bootblock->tag_cache->tag[loop].tag);
        if(caseless_strncmp(altered_bootblock->tag_cache->tag[loop].tag, s, strlen(altered_bootblock->tag_cache->tag[loop].tag))==0)
        { /* match */
	  DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): matched tag %s\n", altered_bootblock->tag_cache->tag[loop].tag);
	  tag_found=true;
	  break;
	}
      }
    }

    if(tag_found==false)
    { /* loop terminated without match */
      DBUG_PRINTF(DBUG_LVL_ERROR, "putline(): unrecognized tag %s - ignoring\n", s);
      return(0);
    }
    else
    {
      /* Place the value into the relevant location within the altered bootblock structure. */
      s+=strlen(altered_bootblock->tag_cache->tag[loop].tag)+1; /* We do not wish to store the tagname or following space. */
      altered_bootblock->tag_cache->tag[loop].bytes = strlen(s);
      DBUG_PRINTF(DBUG_LVL_ERROR, "putline(): Adding tag value %s (size %d) to tag %s.\n", s, altered_bootblock->tag_cache->tag[loop].bytes, altered_bootblock->tag_cache->tag[loop].tag);
      if (altered_bootblock->tag_cache->tag[loop].val)
      {
        DBUG_PRINTF(DBUG_LVL_ERROR, "putline(): Previous value was %s\n", altered_bootblock->tag_cache->tag[loop].val);
        rmfree((void*)altered_bootblock->tag_cache->tag[loop].val);
        altered_bootblock->tag_cache->tag[loop].val = (char*)rmalloc(altered_bootblock->tag_cache->tag[loop].bytes+1, "Tag value");
        if (!altered_bootblock->tag_cache->tag[loop].val)
        {
          DBUG_PRINTF(DBUG_LVL_ERROR, "putline(): Error adding tag value.\n");
        }
      }
      strcpy(altered_bootblock->tag_cache->tag[loop].val, s);
      *(altered_bootblock->tag_cache->tag[loop].val+altered_bootblock->tag_cache->tag[loop].bytes)='\0';
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "putline(): added line \"%s\" to altered_bootblock\n",s);

    /* Debug display new, altered bootblock tags. */
    display_bootblock_tags(altered_bootblock);

    return(1);
}




int ispc_write_smartcard(int bytes)
{
  char* bootblock = NULL;
  DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_write_smartcard()\n");
  /* Write the contents of the altered_bootblock to, well, the bootblock ;-) */
  bootblock = create_bootblock(altered_bootblock);
  if (!bootblock)
  {
    dprintf(("", "ispc_write_smartcard(): Error creating bootblock\n"));
  }
  else
  {
//    _kernel_oserror* err = NULL;
    _kernel_swi_regs regs;
    display_bootblock_image(bootblock, SIZE_OF_BOOTBLOCK);

    /* Write the main bootblock to the NVRAM using a call to NCBootBlock. */
    regs.r[0] = (int)bootblock+8;
    regs.r[1] = SIZE_OF_BOOTBLOCK-8;

    if(_kernel_swi(NCBootblock_Write, &regs, &regs)!=NULL)
    {
      dprintf(("", "ispc_write_smartcard(): NCBootblock Write SWI failed\n"));
      return(-1);
    }
    switch(regs.r[0])
    {
      case  0: dprintf(("", "ispc_write_smartcard(): completed OK\n"));
               break;
      case -1: dprintf(("", "ispc_write_smartcard(): enterprise block not authentic\n"));
               break;
      case -2: dprintf(("", "ispc_write_smartcard(): enterprise block too big\n"));
               return(-1);
               break;
      case -3: dprintf(("", "ispc_write_smartcard(): bootblock is readonly\n"));
               break;
      case -4: dprintf(("", "ispc_write_smartcard(): enterprise block is readonly\n"));
               break;
      case -5: dprintf(("", "ispc_write_smartcard(): file write error\n"));
               return(-1);
               break;
      case -6: dprintf(("", "ispc_write_smartcard(): alternate block too big\n"));
               break;
      case -7: dprintf(("", "ispc_write_smartcard(): alternate block not authentic\n"));
               break;
      default: dprintf(("", "ispc_write_smartcard(): unrecognized return code from write SWI (&%x)\n",regs.r[0]));
               break;
    }
    /* Free the memory */
    rmfree((unsigned char*)bootblock);
  }
  service_configurationchanged(1);

  return (1);
}




int ispc_resetdefaults(void)
{
   int status = -1;
   _swix(NCBootblock_Reinitialise, _OUT(0), &status);
   return (status);
}


/*
 * New function that combines kick_managed_access() and handle_abort().
 * Pick the right URL to go to.
 */

void ispc_completed(int reason)
{
    char *url;

    DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_completed: reason %d\n", reason);

#ifdef DIAL_ON_COMPLETION
    if (reason == ispc_COMPLETE_SUCCESS)
    {
	_kernel_swi_regs r;
	static char ncma_boot[] = "ncma_urc connectack";

	r.r[0] = (int)ncma_boot;
	if(_kernel_swi(OS_CLI, &r, &r)!=NULL)
	{
	    DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_completed: OS_CLI failed!\n");
	}
	return;
    }
#endif

    url = NULL;
    switch (reason)
    {
    case ispc_FINISH_SUCCESS:
	url = end_url;
	break;
    case ispc_FINISH_ERROR:
	url = error_url;
	break;
    case ispc_FINISH_ABORT:
	url = abort_url;
	break;
    }

    if (!url)
	url = EXIT_URL;

    /* Free all of the memory. */
    free_memory();

    DBUG_PRINTF(DBUG_LVL_DIAG, "ispc_completed: using URL '%s'\n", url);

    ispc_url_open(url);
}
