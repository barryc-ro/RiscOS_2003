// header file for CAM_PDU.H

/* Begin-Prologue */
#ifndef CAM_PDU_H
#define CAM_PDU_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#define CAM_ERROR_1        1
#define CAM_ERROR_2 	   2
#define CAM_ERROR_3 	   3
#define CAM_ERROR_4 	   4
#define CAM_ERROR_5 	   5
#define CAM_ERROR_6 	   6
#define CAM_ERROR_7    	   7

#define MAX_ADU_PAYLOAD     255
#define MAX_ADU_SIZE	    MAX_ADU_PAYLOAD + 1
#define MAX_PDU_PAYLOAD     MAX_ADU_SIZE * 2
#define MAX_PDU_SIZE        MAX_PDU_PAYLOAD + 3

/* PDU IDs */
#define PDU_NCAS_INIT       1                // NCAS_OVERTURE_ADU
#define PDU_CAM_INIT	    2		     // NCAS_CHALLENGE + CAM_OVERTURE
#define PDU_CAM_CHALL	    3		     // NCAS_RESPONSE + CAM_CHALLENGE
#define PDU_CAM_RESP	    4		     // NCAS_STATUS + CAM_RESPONSE
#define PDU_CAM_STATUS	    5		     // CAM_STATUS
#define PDU_EVENT	    6		     // subtype byte + reason code byte

/* EVENT_PDU subtype values */
#define PDU_EVENT_WARNING   1
#define PDU_EVENT_ERROR     2

/* EVENT_PDU_ERROR subtype reason codes */
#define EPDU_CARD           1                 // Error accessing s.card
#define EPDU_AUT	    2		      // Authentication error
#define EPDU_SEQ	    3		      // PDU received out of sequence
#define EPDU_FORMAT	    4		      // PDU format incorrect
#define EPDU_SYS	    5		      // OS call failed
#define EPDU_DW		    6		      // CAM internal inconsistency

/* CAM_STATUS reason codes */
#define CAM_STATUS_ACCEPT   0                 // accept
#define CAM_STATUS_REJECT   1		      // reject

typedef struct {
  unsigned char bytes;
  unsigned char *buff;
}ADU_HDR;

typedef struct {
  unsigned char pdu_id;
  unsigned char bytes_msb;
  unsigned char bytes_lsb;
  ADU_HDR *adu1;
  ADU_HDR *adu2;
}PDU_HDR;

DECLARE PDU_HDR pdu_in;
DECLARE PDU_HDR pdu_out;

DECLARE ADU_HDR adu_in1;
DECLARE ADU_HDR adu_in2;
DECLARE ADU_HDR adu_out1;
DECLARE ADU_HDR adu_out2;
DECLARE unsigned char ncas_status;
DECLARE unsigned char cam_status;

DECLARE void assemble_adu(ADU_HDR *, unsigned char *, unsigned char);
DECLARE void send_pdu(int, unsigned char, ADU_HDR *, ADU_HDR *);
DECLARE void send_error_pdu(int, unsigned char);
DECLARE void send_warning_pdu(int, unsigned char);
DECLARE void send_event_pdu(int, unsigned char, unsigned char);
DECLARE unsigned char get_pdu(int, ADU_HDR *, ADU_HDR *);
DECLARE void junk_pdu(int);


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

