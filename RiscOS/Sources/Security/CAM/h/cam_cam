// header file for CAM_CAM.H

/* Begin-Prologue */
#ifndef DNS_DNS_H
#define DNS_DNS_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
#define CAM_TX_BUFFSIZE      1024
#define CAM_RX_BUFFSIZE      1024

#define CAM_ID_MAJOR         0
#define CAM_ID_MINOR         1

#define CAM_ID_SIZE          18

#ifdef DEBUG_TIMEOUTS

#define LISTEN_TIMEOUT             10
#define RELISTEN_TIMEOUT           10
#define CONNECT_TIMEOUT	           10
#define RECV_TIMEOUT	           10
#define NO_CHALLENGE_TIMEOUT       1 /* 30 */  /* 120 */
#define ALLOW_CHALLENGE_TIMEOUT    50 /* 50 */  /* 240 */
#else
#define LISTEN_TIMEOUT             10
#define RELISTEN_TIMEOUT           10
#define CONNECT_TIMEOUT	           10
#define RECV_TIMEOUT	           10
#define NO_CHALLENGE_TIMEOUT       30 /* 30 */  /* 120 */
#define ALLOW_CHALLENGE_TIMEOUT    50 /* 50 */  /* 240 */
#endif

#define CAM_LISTEN_PORT      7701
#define CAM_CONNECT_PORT     7700
#define CAM_RELISTEN_PORT    7700

typedef struct {
  unsigned char serial[CAM_ID_SIZE];
}NCAS_ID;

DECLARE unsigned char *cam_tx_buffer;
DECLARE unsigned char *cam_rx_buffer;

DECLARE unsigned int cam_listen_port INIT(0);
DECLARE unsigned int cam_connect_port INIT(0);


DECLARE int cam_listen_sock INIT(0);
DECLARE int cam_sock INIT(0);
DECLARE int cam_relisten_sock INIT(0);
DECLARE int cam_listening, cam_connecting, cam_relistening;

DECLARE char ip_tag[] INIT("SECURITY_PROXY");
DECLARE unsigned char ncas_ip_addr[8];

DECLARE NCAS_ID ncas_id;
DECLARE NCAS_ID cam_id;
DECLARE int ncas_count INIT(0);

DECLARE int cam_cam_init(void);
DECLARE int read_os_var(char *, char *, int );



/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

