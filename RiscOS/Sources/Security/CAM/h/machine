// header file for MACHINE.H

/* Begin-Prologue */
#ifndef MACHINE_H
#define MACHINE_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
/* state machine stuff */

typedef enum {
    Trans_Idle,
    Trans_Timeout,
    Trans_SockIO,
    Trans_CardOK,
    Trans_CardBad,
    Trans_CardRemoved,
    Trans_CompleteOK,
    Trans_CompleteBad,
    Trans_AuthFail,
    Trans_Discon,
    Trans_Connect,
    Trans_Resume
} CAM_TRANS;


typedef enum {
    State_CamInit,
    State_CamConn,
    State_CamOver,
    State_CamChallenge,
    State_CamConf,
    State_Stopped,
    State_CamOver2,
    State_CamOver3,
    State_CamChallenge2,
    State_CamChallenge3,
    State_CamChallenge4,
    State_NoChallenge,
    State_Panic,
    State_CamStatus,
    State_Discon,
    State_Sleep
} CAM_STATE;



DECLARE CAM_STATE cam_state INIT(State_CamInit);
DECLARE CAM_TRANS cam_trans INIT(Trans_Idle);

DECLARE unsigned char serial_bitstream[10];
DECLARE unsigned char serial_bitstring[20];

DECLARE char *trans_string(CAM_TRANS);
DECLARE char *state_string(CAM_STATE);
DECLARE CAM_STATE machine(CAM_TRANS);

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

