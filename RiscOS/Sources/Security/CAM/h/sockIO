#undef DECLARE
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif

#include "netdb.h"
#include "inetlib.h"
#include "socklib.h"
#include "unixlib.h"
#include "sys/ioctl.h"

#if 0
#include "socket.h"
#include "in.h"
#include "netdb.h"
#include "ioctl.h"
#include "sock_errno.h"
#include "errno.h"
#endif

/* Domain Name Service SWIs provided by the InetDB module  */
#define Internet_GetHostByName	     0x46000
#define Internet_GetHostByAddr	     0x46001

#define CONNECT_FLAG_DQ            0x1
#define CONNECT_FLAG_WORD	   0x2
#define CONNECT_FLAG_DNS	   0x4


#define FD_COPY(x,y) (bcopy((char *)(x),(char *)(y),sizeof(fd_set)))

DECLARE int init_sockets(void);
DECLARE int socket_port(int);
DECLARE int socket_addr(int, unsigned char *);
DECLARE int open_socket(char *, int, int);
DECLARE void close_socket(int);
DECLARE int socket_send(int, unsigned char *, int);
DECLARE int socket_read(int, unsigned char *, int);
DECLARE int socket_peek(int, unsigned char *, int);
DECLARE int accept_socket(int);
DECLARE int send_dns_query(char *);

DECLARE struct timeval poll_time;
DECLARE fd_set fd_listening, fd_connected, fd_write, fd_read, fd_exception;
DECLARE int connected INIT(0);
DECLARE int connect_notify INIT(0);

extern char * inet_ntoa(struct in_addr);
extern int gethostname(char *, int);

/* Epilogue */

#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
