/* cam_des.c - handle various aspects of NCAS DES encryption */
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "cam_des.h"
#include "cam_cam.h"
#include "scinter.h"
#include <string.h>
#include <stdlib.h>
#include "module.h"
#include "DBUG.h"

#include "inetlib.h"


#define TRUE    1
#define FALSE   0
#define BOOL unsigned int

/* BCD_END is any character with a binary value > 9 */
/* bear this in mind for non ASCII character values */
/* this marks the current end of the shift register */
#define BCD_END '#'

/* this reverses The working register and converts BCD to ASCII */
static void conv_bcd(unsigned char *string, unsigned int out_len)
{
        unsigned int i;
        unsigned int n = 0;
        unsigned char c_tmp;

        /* get length of register and convert to ASCII */
        /* we add '0' - so beware on non ASCII systems */
        while (string[n] != BCD_END)
                string[n++] += '0';

        /* reverse bytes */
        for (i = 0; i < n / 2; i++)
        {
                c_tmp = string[i];
                string[i] = string[n - i - 1];
                string[n - i - 1] = c_tmp;
        }

        for (i = 0; i < n; i++)
                string[out_len - i - 1] = string[n - i - 1];

        while (i < out_len)
                string[out_len - i++ - 1] = '0';

        /* NULL terminate at end */
        string[out_len] = '\0';
}

/* BCD multiply the shift register by 2 */
static void mult_2(unsigned char *bcd)
{
        unsigned char carry = 0;

        while (*bcd != BCD_END)
        {
                /* multiply first BCD digit by 2 and add any previous carry */
                if ((*bcd = *bcd * 2 + carry) > 9)
                {
                        /* overflow - so set carry */
                        *bcd -= 10;
                        carry = 1;
                }
                else
                        carry = FALSE;

                /* advance to next digit */
                bcd++;
        }

        /* any residual carry increases register length */
        if (carry)
        {
                *bcd++ = 1;
                *bcd = BCD_END;
        }
}

/* Increment BCD shift register by 1 */
static void add_1(unsigned char *bcd)
{
        while (TRUE)
        {
                /* if we get to the end it must be a carry */
                /* or the first time we've needed to add 1 */
                if (*bcd == BCD_END)
                {
                        *bcd++ = 1;
                        *bcd = BCD_END;
                        break;
                }
                else if ((*bcd += 1) < 10)
                        break; /* finished */
                else
                        *bcd++ -= 10; /* carry one to next digit */
        }
}

/* actual API call */
void btos(unsigned char *bits, unsigned int bytes, char *string,
                                        unsigned int out_len)
{
        unsigned int i, j;
        BOOL found_1 = FALSE;
        unsigned char curr_byte;
        unsigned char mask;

        /* place END sentinel at start of string */
        string[0] = BCD_END;

        for (i = 0; i < bytes; i++)
        {
                /* take bytes, highest first */
                curr_byte = bits[i];

                for (j = 0, mask = 0x80; j < 8; j++, mask /= 2)
                {
                        /* after the first binary 1, we BCD *2 each time */
                        if (found_1)
                                mult_2((unsigned char *)string);

                        /* take bits, highest first and check */
                        /* if the current bit is 1, add 1 to register */
                        if (curr_byte & mask)
                        {
                                add_1((unsigned char *)string);
                                found_1 = TRUE;
                        }
                }
        }

        /* post-process string */
        conv_bcd((unsigned char *)string, out_len);
}






int des_encrypt(unsigned char key, unsigned char *clear, unsigned char *cypher)
{
  _kernel_swi_regs r;

  r.r[0] = 0;
  r.r[1] = NULL;
  r.r[2] = (int) key;
  r.r[3] = (int) clear;
  r.r[4] = 8;
  r.r[5] = (int) cypher;
  r.r[6] = 8;

  _kernel_swi(XOS_Bit | SCInterface_InternalAuth, &r, &r);
  if(r.r[0] != SC_SUCCESS) {
    DBUG_PRINTF(DBUG_LVL_DIAG, "des_encrypt: smartcard operation failed!\n");
    return(-1);
  }
  return(0);
}

int check_scard(void)
{
    _kernel_swi_regs r;

    if(_kernel_swi(XOS_Bit | NCRegistry_Status, &r, &r)!=NULL) return(-1);
    if((r.r[0] & 0x7) != 0x7) return(-1);
    return(0);
}

int read_serial(unsigned char *b)
{
  _kernel_swi_regs r;
  char serial_filename[8];

  strncpy(serial_filename, "/20", 4);
  DBUG_PRINTF(DBUG_LVL_DIAG, "read_serial: reading file %s\n", serial_filename);
  r.r[0] = 0;
  r.r[1] = (int) serial_filename;
  r.r[2] = 0;
  r.r[3] = (int) b;
  r.r[4] = 8;
  r.r[5] = NULL;
  r.r[6] = 0;
  _kernel_swi(XOS_Bit | NCRegistry_Proxy, &r, &r);
  if(r.r[0] != SC_SUCCESS) {
    DBUG_PRINTF(DBUG_LVL_DIAG, "read_serial: smartcard operation failed!\n");
    return(-1);
  }
  return(0);
}

int convert_serial(unsigned char *src, unsigned char *dst)
{
  btos(src, 8, (char *)dst, 16);
  return(0);
}


#ifdef NCAS_VAR_EXCLUSIVE
/* this block allows NCAS details from the s/card OR the environment, controlled
   by NCAS_OSVAR_LOOKUP

   converse block allows a) environment only, or b) environment, then s/card
   controlled by ENV_ONLY

   pretty horrendous state of affairs, but it'll have to do until everybody
   makes up their minds what they want.
*/
#ifndef NCAS_OSVAR_LOOKUP
/* find NCAS details from the smartcard */
int find_ncas(unsigned char *ncas, unsigned int *l_port, unsigned int *c_port)
{
    unsigned char *tmp;
    unsigned char tag[] = "SECURITY_PROXY";
    _kernel_swi_regs r;
    _kernel_oserror *e;

    r.r[0] = 6;
    r.r[3] = 64;
    if(_kernel_swi(XOS_Bit | OS_Module, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: alloc failed.\n");
        return(-1);
    }
    tmp = (unsigned char *)(r.r[2]);

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: searching for %s\n", tag);
    r.r[0] = (int)tag;
    r.r[1] = (int)tmp;
    r.r[2] = 64;
    if((e=_kernel_swi(XOS_Bit | NCRegistry_Enquiry, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_PANIC, "find_ncas: registry call failed!\n");
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: err: %d \"%s\"\n", e->errnum, e->errmess);
        return(-1);
    }

    if(r.r[0] < 0) {
        DBUG_PRINTF(DBUG_LVL_PANIC, "find_ncas: couldn't read NCAS info! (%d, %d, %d)\n",
        			    r.r[0], r.r[1], r.r[2]);

        return(-1);
    }

    *l_port = ((unsigned int)tmp[4] << 8) | (unsigned int)tmp[5];
    *c_port = ((unsigned int)tmp[6] << 8) | (unsigned int)tmp[7];

    if (*l_port == 0) {
        *l_port = CAM_LISTEN_PORT;
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: no local port found: defaulting to %d\n", *l_port);
    }
    if (*c_port == 0) {
          *c_port = CAM_CONNECT_PORT;
          DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: no remote port found: defaulting to %d\n", *c_port);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: got %d.%d.%d.%d at %d (local: %d)\n", (int)tmp[0], (int)tmp[1],
    			       (int)tmp[2], (int)tmp[3], *c_port, *l_port);

    memcpy((void *)ncas, (void *)tmp, 8);

    r.r[0] = 7;
    r.r[2] = (int)tmp;
    _kernel_swi(XOS_Bit | OS_Module, &r, &r);
    return(0);
}
#else /* else NCAS_OSVAR_LOOKUP */

/* find NCAS details from the environment:
   NCAS$IPAddr
   NCAS$ListenPort
   NCAS$ConnPort
*/
int find_ncas(unsigned char *ncas, unsigned int *l_port, unsigned int *c_port)
{
    char varname[] = "NCAS$IPAddr";
    char varname2[] = "NCAS$ListenPort";
    char varname3[] = "NCAS$ConnPort";
    char tmp[64];
    unsigned long iaddr;

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: reading NCAS IP address from environment\n");
    if(read_os_var(varname, tmp, 64)<0) return(-1);
    iaddr = inet_addr(tmp);
    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: read addr. \"%s\" 0x%x\n", tmp, iaddr);
    *ncas++ = (unsigned char)((iaddr & 0xff));
    *ncas++ = (unsigned char)((iaddr & 0xff00)>>8);
    *ncas++ = (unsigned char)((iaddr & 0xff0000)>>16);
    *ncas = (unsigned char)((iaddr & 0xff000000)>>24);
    if(read_os_var(varname2, tmp, 64)<0) {
        *l_port = CAM_LISTEN_PORT;
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: no local port found: defaulting to %d\n", *l_port);

    } else {
        *l_port = atoi(tmp);
    }

    if(read_os_var(varname3, tmp, 64)<0) {
        *c_port = CAM_CONNECT_PORT;
          DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: no remote port found: defaulting to %d\n", *c_port);
    } else {
        *c_port = atoi(tmp);
    }

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: NCAS port: %d (local: %d)\n", *c_port, *l_port);

    return(0);
}
#endif /* endif NCAS_OSVAR_LOOKUP */
#else /* else NCAS_VAR_EXCLUSIVE */
int find_ncas(unsigned char *ncas, unsigned int *l_port, unsigned int *c_port)
{
    char varname[] = "NCAS$IPAddr";
    char varname2[] = "NCAS$ListenPort";
    char varname3[] = "NCAS$ConnPort";
    char tmp[64];
    unsigned char tag[] = "SECURITY_PROXY";
    _kernel_swi_regs r;
    _kernel_oserror *e;

    unsigned long iaddr;

    unsigned int need_scard_lookup = 0;

    /* first attempt to read everything from the environment */
    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: reading NCAS IP address from environment\n");

    if(read_os_var(varname, tmp, 64)>0) { /* call succeeded */
      iaddr = inet_addr(tmp);
      DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: read addr. \"%s\" 0x%x\n", tmp, iaddr);
      *ncas++ = (unsigned char)((iaddr & 0xff));
      *ncas++ = (unsigned char)((iaddr & 0xff00)>>8);
      *ncas++ = (unsigned char)((iaddr & 0xff0000)>>16);
      *ncas = (unsigned char)((iaddr & 0xff000000)>>24);
    } else { /* env. llokup failed */
        *ncas = 0; /* mark for possible s/card lookup */
        need_scard_lookup = 1;
    }

    if(read_os_var(varname2, tmp, 64)>0) { /* call succeeded */
        *l_port = atoi(tmp);
    } else { /* call failed */
        *l_port = 0; /* mark for possible s/card lookup */
        need_scard_lookup = 1;
    }

    if(read_os_var(varname3, tmp, 64)>0) { /* call succeeded */
        *c_port = atoi(tmp);
    } else { /* call failed */
        *c_port = 0; /* mark for possible s/card lookup */
        need_scard_lookup = 1;
    }

    if(need_scard_lookup == 0) { /* got everything from environment */
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: NCAS port: %d (local: %d)\n", *c_port, *l_port);
        return(1); /* got everything */
    }
    /* otherwise we need to fill in info from the smartcard */

#ifdef ENV_ONLY
    /* can't - s/card support compiled out */
    DBUG_PRINTF(DBUG_LVL_ERROR, "find_ncas: insufficient NCAS info.\n");
    return(-1);
#else
    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: searching registry for %s\n", tag);
    r.r[0] = (int)tag;
    r.r[1] = (int)tmp;
    r.r[2] = 64;
    if((e=_kernel_swi(XOS_Bit | NCRegistry_Enquiry, &r, &r))!=NULL) {
        DBUG_PRINTF(DBUG_LVL_PANIC, "find_ncas: registry call failed!\n");
        DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: err: %d \"%s\"\n", e->errnum, e->errmess);
        return(-1);
    }

    if(r.r[0] < 0) {
        DBUG_PRINTF(DBUG_LVL_PANIC, "find_ncas: couldn't read NCAS info! (%d, %d, %d)\n",
        			    r.r[0], r.r[1], r.r[2]);

        return(-1);
    }


    if(*ncas == 0) /* no NCAS IP address - read from smartcard */
       memcpy((void *)ncas, (void *)tmp, 8);


    if(*l_port == 0) /* no CAM listen port - read from smartcard */
       *l_port = ((unsigned int)tmp[4] << 8) | (unsigned int)tmp[5];

    if(*c_port == 0) /* no NCAS connect port - read from smartcard */
       *c_port = ((unsigned int)tmp[6] << 8) | (unsigned int)tmp[7];

    DBUG_PRINTF(DBUG_LVL_DIAG, "find_ncas: NCAS port: %d (local: %d)\n", *c_port, *l_port);

    return(0);
}
#endif /* endif ENV_ONLY */
#endif /* endif NCAS_VAR_EXCLUSIVE */
