#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "inetlib.h"
#define PROTOTYPES_INTERNAL
#include "cam_cam.h"
#include "dynalloc.h"
#include "sockIO.h"
#include "module.h"
#include "DBUG.h"

#include "kernel.h"
#include "swis.h"

#include "machine.h"
#include "vectors.h"

int read_os_var(char *varname, char *buff, int n)
{
  _kernel_swi_regs r;

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = n;
  r.r[3] = 0;
  r.r[4] = 0;
  if(_kernel_swi(OS_ReadVarVal, &r, &r) != NULL) return(-1);
  *(buff + r.r[2]) = 0;
  return(r.r[2]);
}

int cam_cam_init(void)
{

  if((cam_tx_buffer = (unsigned char *)rmalloc(CAM_TX_BUFFSIZE + CAM_RX_BUFFSIZE, "CAM Wspace"))==NULL) {
    DBUG_PRINTF(DBUG_LVL_ERROR, "cam_cam_init: couldn't claim buffer.\n");
    return(-1);
  }

  cam_rx_buffer = cam_tx_buffer + CAM_TX_BUFFSIZE;

//  if((cam_listen_sock = open_socket(NULL, CAM_LISTEN_PORT, NULL))<0) {
    if((cam_listen_sock = open_socket(NULL, cam_listen_port, NULL))<0) {
    DBUG_PRINTF(DBUG_LVL_ERROR, "cam_cam_init: couldn't listen on socket (%d)\n", cam_listen_sock);
    return(-1);
  }

  DBUG_PRINTF(DBUG_LVL_DEBUG, "cam_cam_init: got socket %d\n", cam_listen_sock);
  cam_id.serial[0] = CAM_ID_MAJOR;
  cam_id.serial[1] = CAM_ID_MINOR;
  return(0);
}

