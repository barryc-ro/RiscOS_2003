/* cam_font.c - handle CAM's screen drawing requirements */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#define PROTOTYPES_INTERNAL
#include "cam_font.h"
#include "cam_pdu.h"

#include "dynalloc.h"

#ifdef FATAL_CAM
extern void wedge_machine(void);
#endif
extern void clear_display(int *);

#include "DBUG.h"

void init_fonts(void)
{
#ifdef PRETTY_FONTS
  _kernel_swi_regs r;
  int clear_screen_wsp[8];

#if 0
  if(block==NULL) {
    //if((block = (int *)rmalloc(256,"FontGeom"))==NULL) {
    if((block = (int *)rmalloc(4096,"FontGeom"))==NULL) {

      DBUG_PRINTF(DBUG_LVL_PANIC, "init_fonts: no memory for font subsystem!\n");
      return;
    }
  }

  if(lines == NULL) {
    //if((lines = (LINE *)rmalloc(sizeof(LINE)*MAX_LINES, "LineBuff"))==NULL) {
    if((lines = (LINE *)rmalloc(4096, "LineBuff"))==NULL) {

      DBUG_PRINTF(DBUG_LVL_PANIC, "init_fonts: no memory for font subsystem!\n");
      return;
    }
  }
#endif

#ifdef CHANGE_MODE
  r.r[0] = 0;
  r.r[1] = 28;
  _kernel_swi(XOS_Bit | OS_ScreenMode, &r, &r);
#else
  clear_display(clear_screen_wsp);
#endif

  r.r[1] = CAM_ERROR_FONT;
  r.r[2] = CAM_ERROR_FONT_W * 16;
  r.r[3] = CAM_ERROR_FONT_H * 16;
  r.r[4] = 0;
  r.r[5] = 0;
  _kernel_swi(XOS_Bit | Font_FindFont, &r, &r);

  font_handle = r.r[0];

  _kernel_swi(XOS_Bit | Font_SetFont, &r, &r);

  r.r[1] = 0x00000000;
  r.r[2] = 0x00ffff00;
  r.r[3] = 14;
  _kernel_swi(XOS_Bit | ColourTrans_SetFontColours, &r, &r);

  return;
#endif
}

void show_error(char *s, int leading)
{
#ifdef PRETTY_FONTS

  int h, w, xeig, yeig, xsplit, ysplit;
  int l, splitx, nsplit;
  int ftop, fbot, height, centre;
  int max_h, n, total_h, y_centre, y;
  char *b, *split;

  _kernel_swi_regs r;

  if((block == NULL) || (lines == NULL)) {
    DBUG_PRINTF(DBUG_LVL_ERROR, "show_error: can't render text - no workspace.\n");
    return;
  }

  memset((void *)block, 0, 64 * sizeof(int));

  r.r[0] = -1;
  r.r[1] = 11;
  _kernel_swi(XOS_Bit | OS_ReadModeVariable, &r, &r);
  w = r.r[2]; /* get width of current screen mode */

  r.r[0] = -1;
  r.r[1] = 12;
  _kernel_swi(XOS_Bit | OS_ReadModeVariable, &r, &r);
  h = r.r[2]; /* get height of current screen mode */

  r.r[0] = -1;
  r.r[1] = 4;
  _kernel_swi(XOS_Bit | OS_ReadModeVariable, &r, &r);
  xeig = r.r[2]; /* get X Eigenvalue for current mode */

  r.r[0] = -1;
  r.r[1] = 5;
  _kernel_swi(XOS_Bit | OS_ReadModeVariable, &r, &r);
  yeig = r.r[2]; /* get Y Eigenvalue for current mode */

  w++; h++;

  w = (w << xeig); /* convert to real screen geometry */
  h = (h << yeig);

  block[4] = 32;

  r.r[1] = w;
  r.r[2] = h;
  _kernel_swi(XOS_Bit | Font_Converttopoints, &r, &r);
  xsplit = r.r[1];
  ysplit = r.r[2];

  for(l=0, b=s; l<MAX_LINES; l++) {
    r.r[1] = (int) b;
    r.r[2] = 0x1400a0; /* flags */
    r.r[3] = xsplit;
    r.r[4] = ysplit;
    r.r[5] = (int) block;
    r.r[6] = 0;
    r.r[7] = strlen(b);
    _kernel_swi(XOS_Bit | Font_ScanString, &r, &r);
    split = (char *)(r.r[1]);
    splitx = r.r[3];
    nsplit = r.r[7];

    r.r[1] = splitx;
    r.r[2] = 0;
    _kernel_swi(XOS_Bit | Font_ConverttoOS, &r, &r);
    splitx = r.r[1];

    ftop = block[8];
    fbot = block[6];

    r.r[1] = 0;
    r.r[2] = ftop;
    _kernel_swi(XOS_Bit | Font_ConverttoOS, &r, &r);
    ftop = r.r[2];

    r.r[2] = fbot;
    _kernel_swi(XOS_Bit | Font_ConverttoOS, &r, &r);
    fbot = r.r[2];

    height = ftop - fbot;

    centre = (w - splitx)/2;

    lines[l].x = centre;
    lines[l].h = height;
    lines[l].s = b;

    /*printf("Split Pos: %d  ", split-b);
    printf("Num splits: %d  ", nsplit);
    printf("Len: %d  ", strlen(b));
    printf("SplitX: %d  ", splitx);
    printf("Height: %d\n", height);*/

    if((split-b) == strlen(b)) {
      l++;
      break;
    }
    *split = 0;
    b = ++split;

  }

  r.r[1] = 0;
  r.r[2] = leading;
  _kernel_swi(XOS_Bit | Font_ConverttoOS, &r, &r);
  leading = r.r[2];

  max_h = 0;

  for(n = 0; n<l; n++)
    if(lines[n].h > max_h) max_h = lines[n].h;

  total_h = l * max_h + ((l-1) * leading);
  y_centre = (h - total_h)/2;
  y = h - y_centre - max_h;

  for(n=0; n<l; n++) {
    r.r[1] = (int)lines[n].s;
    r.r[2] = 16;
    r.r[3] = lines[n].x;
    r.r[4] = y;
    _kernel_swi(XOS_Bit | Font_Paint, &r, &r);
    y-=max_h;
    y-=leading;
  }

  return;
#else
  DBUG_PRINTF(DBUG_LVL_DIAG, "pretty_font: %s\n", s);
#endif
}

void stoppage(int s)
{
#if 0
  return;
#endif
  init_fonts();

  switch(s) {

    case CAM_ERROR_1:
    	 show_error("Your card is faulty - please contact your ISP, quoting error number AUTH001\n", 40);
    	 break;

    case CAM_ERROR_2:
    	 show_error("There has been an authentication problem, please contact your ISP, quoting error number AUTH002\n", 40);
    	 break;

    case CAM_ERROR_3:
    	 show_error("There has been an authentication problem, please contact your ISP, quoting error number AUTH003\n", 40);
    	 break;

    case CAM_ERROR_4:
    	 show_error("Your card is faulty - please contact your ISP, quoting error number AUTH004\n", 40);
    	 break;

    case CAM_ERROR_5:
    	 show_error("There has been an authentication problem, please contact your ISP quoting error number AUTH005\n", 40);
    	 break;

    case CAM_ERROR_6:
    	 show_error("There has been an authentication problem, please contact your ISP quoting error number AUTH006\n", 40);
    	 break;

    case CAM_ERROR_7:
    	 show_error("There has been an authentication problem, please contact your ISP quoting error number AUTH007\n", 40);
    	 break;
  }

#ifdef FATAL_CAM
  wedge_machine();
#endif


  return;
}


