// vector handlers for CAM

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */


#include "cam_cam.h"
#include "machine.h"
#define PROTOTYPES_INTERNAL
#include "vectors.h"
#include "module.h"
#include "DBUG.h"
#include "sockIO.h"
#include "scinter.h"

/* **********  Various event handlers ************ */


int module_event_handler(int *r, void *pw) /* this is where it all happens! */
{
    int bytes_read;
    int nfound;

  if((*r == Event_Expansion) && (*(r+1) == Event_Expansion_SCInterface)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: SMARTCARD EVENT\n");
    switch(*(r+2)) {

      case Event_CardOK:
           break;
      case Event_CardBad:
      	   cam_trans = Trans_CardBad;
      	   break;
      case Event_CardRemoved:
      	   cam_trans = Trans_CardRemoved;
      	   break;

      case Event_Complete:
           switch(*(r+3)) {
             case SC_SUCCESS:
             	  cam_trans = Trans_CompleteOK;
             	  break;

             case SC_NOTFOUND:
             case SC_TRANSPORT:
             case SC_SPACE:
             case SC_EXISTS:
             case SC_STORAGE:
             case SC_NOSELECT:
             case SC_NOTVALID:
             case SC_INCONSIST:
             case SC_UNKNOWNRESP:
             case SC_P1P2INVALID:
             case SC_P3INVALID:
             	  cam_trans = Trans_CompleteBad;
             	  break;

             case SC_NOACCESSCODE:
             case SC_FAILACCESSCODE:
             case SC_NOACCESSCHANGE:
             case SC_BLOCKEDACCESS:
             	  cam_trans = Trans_AuthFail;
             	  break;

             default:
                  break;
           }
           break;

      default:  /* invalid Smartcard event - ignore it */
           return(1);
    } // endswitch s.card response

    setcallback(); /* handle smartcard events */
    return(1);
  } // endif s.card event


    if (r[0] == Internet_Event && r[1] == SocketIO) { /* this is a client, so only reads apply */
        if(pw != module_wsp) return(0);

	// WARNING - muchos tourist info if you uncomment this
        // DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: entered, socket: %d\n", r[2]);

        /* check for ncas activity */

        FD_COPY(&fd_listening, &fd_read); /* check for incoming connections */
	nfound = select(FD_SETSIZE, &fd_read, 0, 0, &poll_time);
	if(nfound) {
	  DBUG_PRINTF(DBUG_LVL_DIAG, "event_handler: connection request\n");

	    if(cam_listening && (r[2] == cam_listen_sock)) {
	      // it's a connection request from the NCAS
	      DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: connection request from NCAS\n");

	      if(!connected) {
 	        if((cam_sock = accept_socket(cam_listen_sock))<0) {
	          DBUG_PRINTF(DBUG_LVL_ERROR, "event_handler: accept failed!\n");
	          return(1);
	        }
	        connected = 1;
	      } else {
	        DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: can't accept connection - already connected.\n");
	        return(1);
	      }
	      DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: rebound socket to %d\n", cam_sock);
	      //close_socket(cam_listen_sock);
	      return(1);
	    }

	} /* endif nfound connection requests */

        FD_COPY(&fd_connected, &fd_write); /* check for write requests */
        nfound = select(FD_SETSIZE, 0, &fd_write, 0, &poll_time);
        if(nfound) {
          // DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: write request on connected socket.\n");
          if(connect_notify) {
            connect_notify = 0;
            DBUG_PRINTF(DBUG_LVL_DIAG, "event_handler: connection notification to state machine.\n");
            cam_trans = Trans_Connect;
            setcallback();
            return(1);
          }
        }

	FD_COPY(&fd_connected, &fd_exception); /* check for excepetions (OOB data) */
	nfound = select(FD_SETSIZE, 0, 0, &fd_exception, &poll_time);
	if(nfound) {
	  DBUG_PRINTF(DBUG_LVL_DIAG, "event_handler: exception on connected socket.\n");
	}

	FD_COPY(&fd_connected, &fd_read); /* check for read requests */
	nfound = select(FD_SETSIZE, &fd_read, 0, 0, &poll_time);

	if(nfound) {
	  // DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: read event on connected socket.\n");

	  if(r[2] == cam_sock) {

            if((bytes_read = socket_read(cam_sock, cam_rx_buffer, CAM_RX_BUFFSIZE))<0) {
              DBUG_PRINTF(DBUG_LVL_ERROR, "event_handler: socket read error %d\n", bytes_read);
              return(1);
            }

            if(bytes_read == 0) { /* zero byte read request? That's a disconnect by the peer, that is */
              DBUG_PRINTF(DBUG_LVL_DIAG, "event_handler: connection closed by peer.\n");
              if(connected) {
                connected = 0;
                flush_transition_queue();
                cam_trans = Trans_Discon;
                setcallback();
              }
              return(1);
            }

            if(bytes_read) DBUG_PRINTF(DBUG_LVL_DEBUG, "event_handler: read %d bytes\n", bytes_read);
            cam_trans = Trans_SockIO;
            setcallback(); // notify state machine
            return(1);
          } /* endof resource found */
        } /* endif nfound read events */
    } /* endif event and sockio */
    return(1);
}

int cam_callback_handler(_kernel_swi_regs *r, void *pw)
{

  /* Read a transition off the queue and pass it to
     the state machine
  */

  if(pw != module_wsp) return(0);

  while(transq_rdp != transq_wrp) {
    cam_trans = transition_queue[transq_rdp++];
    if(transq_rdp == MAX_TRANSITION_QUEUE) transq_rdp = 0;
    if(cam_trans != Trans_Idle) cam_state = machine(cam_trans);
  }
  return(1);

}

int cam_callafter_handler(_kernel_swi_regs *r, void *pw)
{
  /* Flush the transition queue and pass a
     time out to the state machine
  */
  if(pw != module_wsp) return(0);

  flush_transition_queue();
  cam_trans = Trans_Timeout;
  cam_state = machine(cam_trans);
  return(1);
}



/* *********** Support routines *************** */




_kernel_oserror *setcallback(void)
{
  _kernel_swi_regs r;

  /* Set callback */

  /* add events to queue */
  transition_queue[transq_wrp++] = cam_trans;
  if(transq_wrp == MAX_TRANSITION_QUEUE) transq_wrp = 0;

  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r));
}






_kernel_oserror *cancelcallback(void)
{
  _kernel_swi_regs r;

  /* Cancel callback */
  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(XOS_Bit | OS_RemoveCallBack, &r, &r)); /* OS_RemoveCallback */
}


_kernel_oserror *settimeout(int seconds)
{
  _kernel_swi_regs r;

  r.r[0] = seconds * 100;
  r.r[1] = (int) module_callafter_entry;
  r.r[2] = (int) module_wsp;
  return(_kernel_swi(XOS_Bit | OS_CallAfter, &r, &r));
}

_kernel_oserror *canceltimeout(void)
{
  _kernel_swi_regs r;

  r.r[0] = (int) module_callafter_entry;
  r.r[1] = (int) module_wsp;
  return(_kernel_swi(XOS_Bit | OS_RemoveTickerEvent, &r, &r));
}


int flush_transition_queue(void)
{
  int n;

  for(n=0;n<MAX_TRANSITION_QUEUE;n++) {
    transition_queue[n] = Trans_Idle;
  }

  transq_wrp = 0;
  transq_rdp = 0;
  return(n);
}


_kernel_oserror *module_claimv(void)
{
    _kernel_swi_regs r;

    r.r[0] = EventV;
    r.r[1] = (int)module_event_entry;
    r.r[2] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_Claim, &r, &r));
}



_kernel_oserror *module_event_enable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Enable;
    r.r[1] = Internet_Event;
    _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}


_kernel_oserror *module_event_disable(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Internet_Event;
    _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}

void module_releasev(void)
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Internet_Event;
    (void) _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = EventV;
    r.r[1] = (int)module_event_entry;
    r.r[2] = (int)module_wsp;
    (void) _kernel_swi(XOS_Bit | OS_Release, &r, &r);
}




