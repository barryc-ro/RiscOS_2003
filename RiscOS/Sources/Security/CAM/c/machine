#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "machine.h"
#include "module.h"
#include "cam_cam.h"
#include "cam_rnd.h"
#include "cam_pdu.h"
#include "cam_des.h"
#include "sockIO.h"
#include "vectors.h"
#include "cam_font.h"
#include "cam_line.h"
#ifdef HORRIBLE_HACK
#include "cam_utils.h"
#endif

#include "DBUG.h"



char *trans_string(CAM_TRANS trans)
{
  static char *t_table[] = {
    "Trans_Idle",
    "Trans_Timeout",
    "Trans_SockIO",
    "Trans_CardOK",
    "Trans_CardBad",
    "Trans_CardRemoved",
    "Trans_CompleteOK",
    "Trans_CompleteBad",
    "Trans_AuthFail",
    "Trans_Discon",
    "Trans_Connect",
    "Trans_Resume"
  };


  return(t_table[trans]);
}

char *state_string(CAM_STATE state)
{
    static char *s_table[] = {
    "State_CamInit",
    "State_CamConn",
    "State_CamOver",
    "State_CamChallenge",
    "State_CamConf",
    "State_Stopped",
    "State_CamOver2",
    "State_CamOver3",
    "State_CamChallenge2",
    "State_CamChallenge3",
    "State_CamChallenge4",
    "State_NoChallenge",
    "State_Panic",
    "State_CamStatus",
    "State_Discon",
    "State_Sleep"
  };

  return(s_table[state]);
}

/* this is the CAM ASM */
CAM_STATE machine(CAM_TRANS trans)
{

  DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: got transition %s in state %s\n", trans_string(trans), state_string(cam_state));

  switch(trans) { /* global transitions that apply to all states (except maybe State_Sleep) */

    case Trans_Discon:

    	 if(cam_state != State_Sleep) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: SERVER DISCONNECT\n");
    	     return(State_Discon);
    	     break;
    	 }

    case Trans_CardRemoved:
    	 DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: smartcard removed - stopping\n");
    	 return(State_Stopped);
    	 break;

    default:
         break;
  }

  switch(cam_state) {

    case State_Discon:
         DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: contact with NCAS lost - suspending CAM activity\n");
         return(State_Stopped);

    case State_CamInit:  /* state CAM_CONN_INIT_PD */

         switch(trans) {

           case Trans_Timeout: /* TriggerNCAS */

	   	DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: timed out - prodding server\n");
	   	connect_notify = 1;
	   	connected = 0;
	   	//cam_sock = open_socket((char *)(*(int *)ncas_ip_addr), *(int *)(ncas_ip_addr+4), CONNECT_FLAG_WORD);
	   	cam_sock = open_socket((char *)(*(int *)ncas_ip_addr), cam_connect_port, CONNECT_FLAG_WORD);
	   	settimeout(CONNECT_TIMEOUT);
	   	return(State_CamConf);

	   case Trans_SockIO:

	        canceltimeout(); /* NcasConnect */
	        settimeout(RECV_TIMEOUT);
	        return(State_CamOver);

	 }
	 break;

    case State_CamConf:  /* state CAM_CONN_CONF_PD */

         switch(trans) {

           case Trans_Timeout: /* NoNcas */

                DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: timed out while prodding NCAS, error 2.\n");
                stoppage(CAM_ERROR_2);
                return(State_Stopped);

           case Trans_Connect: /* CamConnect */
           	/* hopefully a write request here signals async connect() completion */
           	canceltimeout();
           	close_socket(cam_sock);

           	DBUG_PRINTF(DBUG_LVL_DIAG, "Cam_machine: closed notify socket.\n");
           	settimeout(RELISTEN_TIMEOUT);
           	//return(State_CamConn);
           	/* spec. says to return to CammConn, which accepts connection on I/O event
           	   but we accept connections in our event handler, so we don't get this event
           	   so proceed directly to CamOver. Otherwise socketIO event for first PDU is
           	   misinterpreted by CamConn state.
           	*/
           	return(State_CamOver);

         }
         break;

    case State_CamConn:  /* state CAM_CONN_PD */

         switch(trans) {

           case Trans_Timeout: /* NoNcas */

                DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: timed out waiting for NCAS to connect, error 2.\n");
                stoppage(CAM_ERROR_2);
                return(State_Stopped);

           case Trans_SockIO: /* NcasConnect */

                canceltimeout();
                settimeout(RECV_TIMEOUT);
                return(State_CamOver);
         }
         break;

    case State_CamOver: /* state NCAS_OVER_PD */

         switch(trans) {

           case Trans_Timeout: /* LostNcas */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: no response from NCAS, error 6\n");
           	stoppage(CAM_ERROR_6);
           	return(State_Stopped);

           case Trans_SockIO: /* ProcessNcasOver */
           	canceltimeout();

           	if(get_pdu(cam_sock, &adu_in1, &adu_in2) != PDU_NCAS_INIT) {
           	  send_error_pdu(cam_sock, EPDU_SEQ);
           	  DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: NCAS talking gibberish.\n");
           	  stoppage(CAM_ERROR_7);
           	  return(State_Stopped);
           	}

		/* NCAS_OVERTURE: store NCAS overture details */
           	ncas_id.serial[0] = adu_in1.buff[0];
           	ncas_id.serial[1] = adu_in1.buff[1];
           	memcpy((void *)&ncas_id, (void *)adu_in1.buff, sizeof(ncas_id));
           	DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: NCAS version %d.%d \n",
           				   (int)ncas_id.serial[0],
           				   (int)ncas_id.serial[1]);

           	/* NCAS_CHALLENGE: =[Enc(Rnd, Kn), n], n=0...7 */
           	randomize_block(rnd_text); /* generate 8 bytes of random data */
           	key_m = random_key(0x7); /* generate random key */

           	des_encrypt(key_m, rnd_text, cypher_text);/* send auth. command to card */
           	return(State_CamOver2);
         }
         break;

    case State_CamOver2: /* state NCAS_OVER_PD s.card auth. completion */

         switch(trans) {

           case Trans_CompleteBad:
           case Trans_AuthFail:
           	send_error_pdu(cam_sock, EPDU_CARD); /* send error PDU #1 */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: error talking to card, error 1\n");
           	stoppage(CAM_ERROR_1);
           	return(State_Stopped);

           case Trans_CompleteOK:
           	/* assemble NCAS_CHALLENGE ADU */

           	cypher_text[8] = key_m;
           	assemble_adu(&adu_out1, cypher_text, 9);
		DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: reading s.card serial#\n");
           	read_serial(serial_bitstream);/* read s.card ATR */
           	return(State_CamOver3);
         }
         break;

    case State_CamOver3: /* state NCAS_OVER_PD s.card read ATR completion */

         switch(trans) {

           case Trans_CompleteBad:
           case Trans_AuthFail:
           	send_error_pdu(cam_sock, EPDU_CARD); /* send error PDU 1 */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: error talking to card, error 1\n");
           	stoppage(CAM_ERROR_1);
           	return(State_Stopped);

           case Trans_CompleteOK:
                convert_serial(serial_bitstream, serial_bitstring);
                memcpy((void *)&cam_id.serial[2], (void *)serial_bitstring, 16);
                DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: read serial# %s\n", serial_bitstring);
	   	/* assemble CAM_OVERTURE ADU */
	   	assemble_adu(&adu_out2, (unsigned char *)&cam_id, CAM_ID_SIZE);
	   	/* assemble PDU_CAM_INIT PDU & send it */
	   	send_pdu(cam_sock, PDU_CAM_INIT, &adu_out1, &adu_out2);

	   	settimeout(RECV_TIMEOUT);
	   	return(State_CamChallenge);
	 }
         break;

    case State_CamChallenge: /* state CAM_CHALLENGE_PD */

         switch(trans) {

           case Trans_Timeout: /* LostNcas */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: no response from NCAS, error 6\n");
           	stoppage(CAM_ERROR_6);
           	return(State_Stopped);

           case Trans_SockIO: /* ProcessCamChall */
           	canceltimeout();

           	if(get_pdu(cam_sock, &adu_in1, &adu_in2) != PDU_CAM_CHALL) {
           	  send_error_pdu(cam_sock, EPDU_AUT); /* send error pdu #2 */
           	  DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: NCAS talking bollocks.\n");
           	  stoppage(CAM_ERROR_7);
           	  return(State_Stopped);
           	}

           	/* encode our random data with NCAS' chosen key (from ADU) */
           	key_m = adu_in1.buff[8];
           	des_encrypt(key_m, rnd_text, cypher_text);
           	return(State_CamChallenge2);
         }
         break;

    case State_CamChallenge2: /* state CAM_CHALLENGE_PD s.card auth. completion */

         switch(trans) {

           case Trans_CompleteBad:
           case Trans_AuthFail:
           	send_error_pdu(cam_sock, EPDU_CARD); /* send error PDU #1 */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: error talking to card, error 1\n");
           	stoppage(CAM_ERROR_7);
           	return(State_Stopped);

           case Trans_CompleteOK:
           	if(memcmp(adu_in1.buff, cypher_text, 8)) { /* cypher blocks don't match */
           	  assemble_adu(&adu_out1, NULL, 0); /* send empty CAM_RESPONSE ADU */
		  send_pdu(cam_sock, PDU_CAM_RESP, &adu_out1, NULL); /* send PDU_CAM_RESP PDU */
		  DBUG_PRINTF(DBUG_LVL_ERROR, "CAM_machine: NCAS authentication failure, error 3\n");
		  stoppage(CAM_ERROR_3);
		  return(State_Stopped);
		} else {
	          /* otherwise, generate NCAS_STATUS ADU for success notification */
		  ncas_status = CAM_STATUS_ACCEPT;
		  assemble_adu(&adu_out1, &ncas_status, 1);

	          /* extract challenge data and key from ADU */
	          memcpy(clear_text, adu_in2.buff, 8);
	          key_p = adu_in2.buff[8];
	          /* encrypt NCAS' data with NCAS' chosen key */
	          des_encrypt(key_p, clear_text, cypher_text);
	          return(State_CamChallenge3);
	        }
	 }
         break;

    case State_CamChallenge3: /* state CAM_CHALLENGE_PD s.card auth. completion */

         switch(trans) {

           case Trans_CompleteBad:
           case Trans_AuthFail:
           	send_error_pdu(cam_sock, EPDU_CARD); /* send error PDU #1 */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: error talking to card, error 1\n");
           	stoppage(CAM_ERROR_1);
           	return(State_Stopped);

           case Trans_CompleteOK:
	   	/* generate another key 0..7 */
	   	do {
	   	  key_q = random_key(0x7);
	   	} while(key_q == key_p);

	   	/* encrypt previous cypher block again */
	   	des_encrypt(key_q, cypher_text, recypher_text);
	        return(State_CamChallenge4);
	 }
         break;

    case State_CamChallenge4: /* state CAM_CHALLENGE_PD s.card auth. completion */

         switch(trans) {

           case Trans_CompleteBad:
           case Trans_AuthFail:
           	send_error_pdu(cam_sock, EPDU_CARD); /* send error PDU 1 */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: error talking to card, error 1\n");
           	stoppage(CAM_ERROR_1);
           	return(State_Stopped);

           case Trans_CompleteOK:
	   	/* assemble CAM_RESPONSE ADU */
	   	recypher_text[8] = key_q;
	   	assemble_adu(&adu_out2, recypher_text, 9);
	   	/* assemble & send PDU_CAM_RESP PDU */
	   	send_pdu(cam_sock, PDU_CAM_RESP, &adu_out1, &adu_out2);
	   	settimeout(RECV_TIMEOUT);
	        return(State_CamStatus);
	 }
         break;

    case State_CamStatus: /* state CAM_STATUS_PD */

	 switch(trans) {

           case Trans_Timeout: /* LostNcas */
           	DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: no response from NCAS, error 6\n");
           	stoppage(CAM_ERROR_6);
           	return(State_Stopped);

	   case Trans_SockIO: /* ProcessCamResponse */
	   	canceltimeout();

	   	if(get_pdu(cam_sock, &adu_in1, &adu_in2) != PDU_CAM_STATUS) {
	   	  send_error_pdu(cam_sock, EPDU_AUT); /* send PDU_ERROR PDU #2 */
	   	  DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: NCAS gibberish.\n");
	   	  stoppage(CAM_ERROR_7);
	   	  return(State_Stopped);
	   	}

	   	/* check CAM_STATUS ADU */
	   	if(adu_in1.buff[0] != 0) {
	   	   DBUG_PRINTF(DBUG_LVL_ERROR, "CAM_machine: NC authentication failure, error 4\n"); /*display error 4, shutdown */
	   	   stoppage(CAM_ERROR_4);
	   	   return(State_Stopped);
	   	}

	   	DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: CAM auth. %d ok, sleeping...\n", ncas_count);
	   	ncas_count++;
#ifdef HORRIBLE_HACK
       		prod_sctrans();
#endif
	        settimeout(NO_CHALLENGE_TIMEOUT);
	        return(State_NoChallenge);
	 }
	 break;

    case State_NoChallenge: /* state NO_CHALLENGE */

         switch(trans) {

           case Trans_Timeout: /* AllowChallenge */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: CAM auth. expired, restarting.\n");
           	settimeout(ALLOW_CHALLENGE_TIMEOUT);
           	return(State_CamOver);

           case Trans_SockIO: /* IgnorePdu */
           	/* read the PDU, and throw it away */
           	junk_pdu(cam_sock);
           	DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: pkt received while sleepy...ignoring\n");
         	return(State_NoChallenge);
#ifdef HORRIBLE_HACK
          default:  /* Need to trap card in/out events caused by kicking the sctrans module */
                return(State_NoChallenge);
#endif
         }
         break;


    case State_Stopped:
         DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: stopped.\n");
         cam_halt();
         return(State_Stopped);

    case State_Sleep:
    	 switch(trans) {
    	     case Trans_Resume:
    	     	  settimeout(10);
    	          return(State_CamInit);
    	     default:
    	          DBUG_PRINTF(DBUG_LVL_DIAG, "CAM_machine: CAM inactive  - ignoring.\n");
    	          return(State_Sleep);
    	 }
    	 break;

    case State_Panic:
    default:

	 DBUG_PRINTF(DBUG_LVL_PANIC, "CAM_machine: PANIC!\n");
	 return(State_Panic);

  } /* end switch */


  if((trans == Trans_CompleteOK) || (trans == Trans_CompleteBad) || (trans == Trans_AuthFail)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "CAM: spurious I/O ACK from smartcard driver...ignoring\n");
    return(cam_state);
  }

  /* otherwise . . . PANIC!! */

  DBUG_PRINTF(DBUG_LVL_PANIC, "CAM: state machine panic - invalid transition event %s in state %s\n",
  		      trans_string(cam_trans), state_string(cam_state));
  DBUG_PRINTF(DBUG_LVL_PANIC, "            setting state to State_Panic\n");

#ifdef ABORT_ON_PANIC
  return(State_Panic);
#else
  return(cam_state);
#endif
}
