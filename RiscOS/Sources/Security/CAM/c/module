#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* includes for other segments */

#define PROTOTYPES_INTERNAL
#include "module.h"
#include "DBUG.h"
#include "machine.h"
#include "vectors.h"
#include "cam_cmds.h"
#include "cam_swis.h"
#include "cam_cam.h"
#include "dynalloc.h"
#include "sockIO.h"
#include "cam_font.h"
#include "cam_pdu.h"
#include "cam_des.h"
#include "cam_line.h"




/* code */

_kernel_oserror *module_init(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror f = {0x00810800, "CAM failed to initialize."}, *e = NULL;
    _kernel_swi_regs r;
    static char keyword[] = "verbose/s,file/k,debug/k/e";
    static int args[32];
    char *argp, *debug_file;
    int debug_lvl = 0;

    module_wsp = pw;


   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   memset((char *)args, 0, 32 * sizeof(int));
   _kernel_swi(OS_ReadArgs, &r, &r);


   if(args[0]) quiet = 0;

   QUIET printf("RISC OS CAM Version %s\n", CAM_VERSION);

   if(args[1] != 0) debug_file = (char *)args[1];
   else debug_file = NULL;

   if(args[2]) { /* debug value present */
     argp = (char *)args[2];
     if(*argp++ == 0) {
       debug_lvl = *((int *)argp);
       if(debug_lvl <0) debug_lvl = 0;
       if(debug_lvl >5) debug_lvl = 5;
       if(debug_file == NULL) DBUG_FOPEN("stdout");
       else DBUG_FOPEN(debug_file);
       DBUG_LEVEL(debug_lvl);
       QUIET {
         printf("cam_init: debug level set to %d\n", debug_lvl);
         if(debug_file != NULL) printf("cam_init: debug file: %s\n", debug_file);
       }
     }
   }

   QUIET printf("cam_init: initialising memory subsystem...\n");
   rminit();

   if(use_dynamic_areas) {
     QUIET printf("cam_init: dynamic area support detected...\n");
   } else {
     QUIET printf("cam_init: no dynamic area support found...\n");
   }

   QUIET printf("cam_init: initialising socket descriptors...\n");
   init_sockets();

   if(check_scard()<0) {
       e=&f;
       stoppage(CAM_ERROR_4);
       goto out;
   }

     if(find_ncas(ncas_ip_addr, &cam_listen_port, &cam_connect_port)<0) {
     e=&f;
     stoppage(CAM_ERROR_1);
     goto out;
   }

   QUIET printf("cam_init: found NCAS %d.%d.%d.%d on port %d (local: %d)\n", ncas_ip_addr[0],
   	 ncas_ip_addr[1], ncas_ip_addr[2], ncas_ip_addr[3], cam_connect_port, cam_listen_port);

   QUIET printf("cam_init: claiming event vector...\n");
   e = module_claimv();
   if(e) {
     e = &f;
     goto out;
   }

   QUIET printf("cam_init: enabling event...\n");
   e = module_event_enable();
   if(e) {
     e = &f;
     goto out;
   }


   QUIET printf("cam_init: initialising CAM subsystem...\n");
   cam_listening = 0;
   cam_connecting = 0;
   cam_relistening = 0;

   if(cam_cam_init()<0) {
     QUIET printf("cam_init: CAM init failed.\n");
     e = &f;
     goto out;
   } else {
     cam_listening = 1;
   }

   cam_state = State_CamInit;
   settimeout(10);
   return ((_kernel_oserror *)0);

out:
   QUIET printf("cam_init: Bummer!\n");
   return (e);
}



_kernel_oserror *module_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &cam_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);
    return((_kernel_oserror *)NULL);

}


_kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &cam_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);

}

void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{

  DBUG_PRINTF(DBUG_LVL_DIAG, "CAM: service call.\n");
  switch(sn) {

    case Service_DiallerStatus:
    	 switch(r->r[2]) {
    	     case DIALLER_STATUS_DOWN:
    	     	  if(line_status == LINE_UP) cam_pause();
    	     	  else {
    	     	      DBUG_PRINTF(DBUG_LVL_ERROR, "cam_svc_handler: ignored redundant line-down notification\n");
    	     	  }
    	     	  break;

    	     case DIALLER_STATUS_UP:
    	     	  if(line_status == LINE_DOWN) {
    	     	      if(cam_resume()<0) {
    	     	        DBUG_PRINTF(DBUG_LVL_ERROR, "cam_svc_handler: couldn't resume CAM.\n");
    	     	      }
    	     	  } else {
    	     	      DBUG_PRINTF(DBUG_LVL_ERROR, "cam_svc_handler: ignored redundant line-up notification\n");
    	     	  }
    	     	      break;

    	     default:
    	     	  DBUG_PRINTF(DBUG_LVL_DIAG, "cam_svc_handler: unrecognized dialler status code.\n");
    	     	  break;
    	 }

    	 break;

    default:
         DBUG_PRINTF(DBUG_LVL_DIAG, "cam_svc_handler: unrecognized service call.\n");
         break;
  }
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{

  QUIET printf("cam_final: cancelling timeouts...\n");
  canceltimeout();

  QUIET printf("cam_final: releasing events...\n");
  module_event_disable();
  module_releasev();

  QUIET printf("cam_final: releasing memory resources...\n");
  rmfree_all();

  QUIET printf("cam_final: closing cam connection...\n");

  /*if(cam_sock>0)*/ {
    DBUG_PRINTF(DBUG_LVL_DIAG, "cam_final: closing data socket %d\n", cam_sock);
    close_socket(cam_sock);
  }
  /*if(cam_listen_sock>0)*/ {
    DBUG_PRINTF(DBUG_LVL_DIAG, "cam_final: closing listen socket %d\n", cam_listen_sock);
    close_socket(cam_listen_sock);
  }
  /*if(cam_relisten_sock>0)*/ {
    DBUG_PRINTF(DBUG_LVL_DIAG, "cam_final: closing relisten socket %d\n", cam_relisten_sock);
    close_socket(cam_relisten_sock);
  }

  QUIET printf("cam_final: done.\n");
  DBUG_FCLOSE();

  return((_kernel_oserror *)NULL);
}





