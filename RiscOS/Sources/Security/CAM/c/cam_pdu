/* cam_pdu.c - handle NCAS ADUs and PDUs */
#include <stdio.h>
#include <string.h>
#define PROTOTYPES_INTERNAL
#include "cam_pdu.h"
#include "sockIO.h"
#include "cam_cam.h"
#include "DBUG.h"


void assemble_adu(ADU_HDR *adu, unsigned char *buff, unsigned char bytes)
{
  if(bytes > MAX_ADU_PAYLOAD)
    DBUG_PRINTF(DBUG_LVL_ERROR, "assemble_adu: Max. ADU payload exceeded.\n");

  adu->bytes = bytes;
  adu->buff  = buff;
  DBUG_PRINTF(DBUG_LVL_DIAG, "assemble_adu: assembled %d bytes into adu\n", bytes);
  return;
}


void send_pdu(int sock, unsigned char pdu_id, ADU_HDR *adu1, ADU_HDR *adu2)
{

  unsigned char *b;
  unsigned int bytes;

  b = cam_tx_buffer;
  bytes = adu1->bytes + 1;
  if(adu2 != NULL) bytes += (adu2->bytes + 1);

  *b++ = pdu_id;
  *b++ = (bytes & 0xff00) >> 8;
  *b++ = (bytes & 0xff);

  *b++ = adu1->bytes;
  memcpy(b, adu1->buff, adu1->bytes);
  b += adu1->bytes;

  if(adu2 != NULL) {
    *b++ = adu2->bytes;
    memcpy(b, adu2->buff, adu2->bytes);
    b += adu2->bytes;
  }
  DBUG_PRINTF(DBUG_LVL_DEBUG, "send_pdu: id: %d  bytes: %d adu1 bytes: %d adu2 bytes: %d\n", pdu_id, bytes, adu1->bytes, adu2->bytes);

  socket_send(sock, cam_tx_buffer, bytes+3);
  return;
}

void send_error_pdu(int sock, unsigned char pdu_error)
{
  send_event_pdu(sock, PDU_EVENT_ERROR, pdu_error);
  return;
}

void send_warning_pdu(int sock, unsigned char pdu_warning)
{
  send_event_pdu(sock, PDU_EVENT_WARNING, pdu_warning);
  return;
}

void send_event_pdu(int sock, unsigned char pdu_type, unsigned char pdu_error)
{
  unsigned char *b;

  b = cam_tx_buffer;

  *b++ = PDU_EVENT;
  *b++ = 0;
  *b++ = 2;
  *b++ = pdu_type;
  *b++ = pdu_error;
  socket_send(sock, cam_tx_buffer, 5);
  return;
}

unsigned char get_pdu(int sock, ADU_HDR *adu1, ADU_HDR *adu2)
{
  int sock_bytes, pdu_bytes, bytes_left;
  unsigned char pdu_id;
  unsigned char *b;

  b = cam_rx_buffer;
#ifdef BANANA_DAIQUIRI
  if((sock_bytes = socket_peek(sock, cam_rx_buffer, CAM_RX_BUFFSIZE))<0) {
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_pdu: error peeking from socket\n");
    return(0);
  }

  pdu_id = *b++;
  pdu_bytes = ((unsigned int)(*b)<<8) | (unsigned int)(*(b+1));

  if(sock_bytes != pdu_bytes + 3) {
    DBUG_PRINTF(DBUG_LVL_DIAG, "get_pdu: read %d bytes, expecting %d bytes.\n",
    			       sock_bytes,
    			       pdu_bytes+3);
    return(0);
  }

  if((sock_bytes = socket_read(sock, cam_rx_buffer, CAM_RX_BUFFSIZE))<0) {
    DBUG_PRINTF(DBUG_LVL_ERROR, "get_pdu: error reading from socket\n");
    return(0);
  }

  adu1->bytes = *b++;
  adu1->buff = b;
  b += adu1->bytes;

  adu2->bytes = *b++;
  adu2->buff = b;
  return(pdu_id);
#else
  sock_bytes = 0;
  pdu_id = *b++;
  pdu_bytes = ((unsigned int)(*b)<<8) | (unsigned int)(*(b+1));
  b+=2;
  adu1->bytes = *b++;
  adu1->buff = b;
  b += adu1->bytes;

  bytes_left = pdu_bytes - 1 - adu1->bytes;

  if(bytes_left) {
    adu2->bytes = *b++;
    adu2->buff = b;
  } else {
    adu2->bytes = 0;
    adu2->buff = NULL;
  }
  DBUG_PRINTF(DBUG_LVL_DEBUG, "get_pdu: got pdu id: %d len: %d adu1len: %d ", pdu_id, pdu_bytes, adu1->bytes);
  DBUG_PRINTF(DBUG_LVL_DEBUG, bytes_left?"adu2len: %d\n":"\n", adu2->bytes);
  return(pdu_id);
#endif
}

void junk_pdu(int sock)
{
  socket_read(sock, cam_rx_buffer, CAM_RX_BUFFSIZE);
  return;
}
