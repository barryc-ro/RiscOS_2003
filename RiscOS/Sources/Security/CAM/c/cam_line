/*
   cam_link.c - handle the status of the connection changing
   	      	eg on demand dialling
*/

#include <stdio.h>
#include "swis.h"
#include "kernel.h"
#define PROTOTYPES_INTERNAL
#include "cam_line.h"
#include "machine.h"
#include "vectors.h"
#include "sockIO.h"
#include "cam_cam.h"
#include "dynalloc.h"
#include "DBUG.h"

void cam_pause(void)
{
    cam_listening = 0;
    connected = 0;
    line_status = LINE_DOWN;
    canceltimeout(); /* clear any pending timeouts */
    cam_state = State_Sleep;
    cam_trans = Trans_Idle;
    close_socket(cam_listen_sock);
    close_socket(cam_sock);
    DBUG_PRINTF(DBUG_LVL_DIAG, "cam_pause: CAM activity suspended.\n");
    setcallback();
}

int cam_resume(void)
{
    line_status = LINE_UP;
    cam_trans = Trans_Resume;
    if((cam_listen_sock = open_socket(NULL, cam_listen_port, NULL))<0) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "cam_resume: couldn't listen on socket.\n");
        return(-1);
    }
    cam_listening = 1;
    DBUG_PRINTF(DBUG_LVL_DIAG, "cam_resume: CAM activity resumed on socket %d\n", cam_listen_sock);
    setcallback();
    return(0);
}

/* permanently halt CAM activity - eg after errors in non-fatal mode
   does same as module_final, but leaves debugging stream open and
   doesn't remove module from module list (can't be done)
*/
void cam_halt(void)
{
    DBUG_PRINTF(DBUG_LVL_PANIC, "cam_halt: CAM HALTED\n");
    module_event_disable();
    module_releasev();
    rmfree_all();
    close_socket(cam_sock);
    close_socket(cam_listen_sock);
    close_socket(cam_relisten_sock);
    cam_state = State_Panic;
    return;
}

