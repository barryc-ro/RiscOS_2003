#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"

#define PROTOTYPES_INTERNAL
#include "sockIO.h"
#include "DBUG.h"


int init_sockets(void)
{
  bzero((char *)&poll_time, sizeof(struct timeval));
  FD_ZERO(&fd_listening);
  FD_ZERO(&fd_connected);
  FD_ZERO(&fd_write);
  FD_ZERO(&fd_read);
  FD_ZERO(&fd_exception);
  return(0);
}
/*
  open_socket: handle socket creation

  connect to host in hostname, or listen if hostname = NULL
  choose a port if port=0

  returns -n for error, or +n for valid socket
*/

int open_socket(char *hostname, int port, int flags)
{
  struct sockaddr_in server;
  int sock, on=1;
  unsigned long host_ip;

  memset((char *)&server, 0, sizeof(server));

  if ((sock=socket(AF_INET, SOCK_STREAM, 0)) < 0) { /* get a socket descriptor */
    return(-2);
  }

  if (socketioctl(sock, FIOASYNC, &on) < 0) { /* mark socket as asynchronous  */
     close_socket(sock);
     return (-3);
  }


  if(hostname == NULL) { /* it's a listen */

     server.sin_family = AF_INET;
     server.sin_addr.s_addr = INADDR_ANY;
     server.sin_port = htons(port);

     if(bind(sock, (struct sockaddr *)&server, sizeof(server)) < 0) {
       return(-6);
     }

     if (socketioctl(sock, FIONBIO, &on) < 0) { /* mark socket as non-blocking   */
       close_socket(sock);
       return (-5);
     }



     if(listen(sock, 1) < 0) {
       return(-7);
     }

     FD_SET(sock, &fd_listening);
  }

  else {   /* it's a connect */

    if(flags & CONNECT_FLAG_DQ) { /* we've got a dot quadded string as an addr */
      if((host_ip = inet_addr(hostname)) == INADDR_NONE) return(-1);
      DBUG_PRINTF(DBUG_LVL_DEBUG, "DQ string %s Address: 0x%x\n", hostname, host_ip);
      memcpy((char *)&server.sin_addr, &host_ip, sizeof(unsigned long));
      server.sin_family = AF_INET;
    }
    else if(flags & CONNECT_FLAG_WORD) { /* we've got a word giving the addr */
      host_ip = (unsigned int)hostname;
      DBUG_PRINTF(DBUG_LVL_DEBUG, "Explicit Address: 0x%x\n", host_ip);
      memcpy((char *)&server.sin_addr, &host_ip, sizeof(unsigned long));
      server.sin_family = AF_INET;
    }
    else {  /* hostname - start doing lookup */

      /* hostname lookup no longer supported here - proper DNS is implemented */

      // if((hp=gethostbyname(hostname)) == NULL) {
        return(-1);
      // }

      // memcpy((char *)&server.sin_addr, hp->h_addr, hp->h_length);
      // server.sin_family = hp->h_addrtype;
    }

    server.sin_port = htons(port);

    if (connect(sock, (struct sockaddr *)&server, sizeof(server)) < 0) {
      close_socket(sock);
      return(-4);
    }

    if (socketioctl(sock, FIONBIO, &on) < 0) { /* mark socket as non-blocking   */
       close_socket(sock);
       return (-5);
    }


    FD_SET(sock, &fd_connected);
  }

  return(sock);
}

void close_socket(int s)
{
  //shutdown(s,2);
  socketclose(s);
  FD_CLR(s, &fd_connected);
  return;
}

int socket_send(int sock, unsigned char *buff, int bytes)
{
  int r;

  if((r=send(sock, (char *)buff, bytes, 0))<0) r = -errno;
  return(r);
}

int socket_read(int sock, unsigned char *buff, int bytes)
{
  int r;

  if((r=recv(sock, (char *)buff, bytes, 0))<0) r = -errno;
  return(r);
}

int socket_peek(int sock, unsigned char *buff, int bytes)
{
  int r;

  if((r=recv(sock, (char *)buff, bytes, MSG_PEEK))<0) r = -errno;
  return(r);
}

/*
  socket_port: read back the port number of the given socket
*/
int socket_port(int s)
{
  struct sockaddr_in server;
  int l;

  l = sizeof(server);
  if(getsockname(s, (struct sockaddr *)&server, &l) < 0) return -1;
  return(ntohs(server.sin_port));
}

/*
  socket_addr: read back the remote IP address of the given socket
*/
int socket_addr(int s, unsigned char *a)
{
  struct sockaddr_in server;
  int l;

  l = sizeof(server);
  if(getsockname(s, (struct sockaddr *)&server, &l) < 0) return -1;
  memcpy(a, &server.sin_addr.s_addr, 4);
  return(1);
}

int accept_socket(int s)
{
  int n, on=1;
  struct sockaddr addr;
  int addrlen;

  if((n = accept(s, &addr, &addrlen)) < 0) return -1;

  if (socketioctl(s, FIONBIO, &on) < 0) { /* mark socket as non-blocking   */
    close_socket(s);
    return (-5);
  }

  if (socketioctl(s, FIOASYNC, &on) < 0) { /* mark socket as asynchronous  */
     close_socket(s);
     return (-3);
  }


  FD_CLR(s, &fd_listening);
  FD_SET(n, &fd_connected);
  return(n);
}

