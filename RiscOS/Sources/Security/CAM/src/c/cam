/*
** File			cam.c
** System		Oracle Network Computer Client Authentication Module(CAM)
** Description:	This file contains the event handling code.
**
** Assumptions:		
** Notes:			
*/

#include <windows.h> 
#include <commdlg.h> 
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <limits.h>

#include <winsock.h>
#include "ncas.h"
#include "cam.h"
#include "display.h"
#include "resource.h"

static HINSTANCE	hInstance;
static CAMINFO		CAMInfo;

static BOOL InitApplication(HANDLE hInstance);
static HWND InitInstance(HANDLE hInstance, LPSTR cmd_line, int nCmdShow);
static void	cam_Close();
static int	DecodeNcasEvent( HWND hWnd, WPARAM wParam, LPARAM lParam );
static int	DecodeTimerEvent(HWND hWnd, WPARAM wParam, LPARAM lParam);
static VOID GoModalDialogBoxParam( HINSTANCE hInstance, LPCSTR lpszTemplate,
                     HWND hWnd, DLGPROC lpDlgProc, LPARAM lParam );
static int	Initialise(HWND hWnd);
BOOL FAR PASCAL __export SettingsDlgProc( HWND hDlg, UINT uMsg,
                                 WPARAM wParam, LPARAM lParam );

LRESULT CALLBACK cam_WinProc(HWND hWnd, UINT message, WPARAM wParam,
                         LPARAM lParam);

//---------------------------------------------------------------------------
//  int PASCAL WinMain( HANDLE hInstance, HANDLE hPrevInstance,
//                      LPSTR lpszCmdLine, int nCmdShow )
//
//  Description:
//     This is the main window loop!
//
//  Parameters:
//     As documented for all WinMain() functions.
//
//---------------------------------------------------------------------------

int PASCAL WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance,
                    LPSTR lpszCmdLine, int nCmdShow )
{
	HWND  win ;
	MSG   msg ;

	ncas_Window = NULL;

	/* only allow 1 copy of CAM to run at any one time from each PC */
	if (hPrevInstance != NULL)
	{
		return FALSE;
	}

	if (!InitApplication( hInstance ))
		return ( FALSE ) ;

	if ((win = InitInstance(hInstance, lpszCmdLine, nCmdShow)) == NULL)
	{
		cam_Close();

		return ( FALSE ) ;
	}
/*
	GoModalDialogBoxParam( hInstance,
					MAKEINTRESOURCE(IDD_GETPWD), win,
					SettingsDlgProc,
					(LPARAM)(LPSTR)&CAMInfo) ;
*/

	OutputDebugString("Starting listener\n");
	if (StartTimer(win, NCAS_LISTEN_TIME) != CAM_OK)
	{
		MessageBox((HWND)NULL, "StartTimer() fails", "socklc",
					MB_ICONSTOP);

		return CAM_ERROR;	
	}

	if (ncas_StartListener(NCAS_SERVICE) != CAM_OK)
	{
		MessageBox((HWND)NULL, "ncas_StartListener() fails", "socklc",
					MB_ICONSTOP);

		return CAM_ERROR;	
	}

	while (GetMessage( &msg, NULL, 0, 0 ))
	{
		TranslateMessage( &msg ) ;
		DispatchMessage( &msg ) ;
	}
	cam_Close();

	return ( (int) msg.wParam ) ;
} // end of WinMain()

//  This procedure processes the application-specific messages.
//---------------------------------------------------------------------------
//  BOOL InitApplication( HANDLE hInstance )
//
//  Description:
//     First time initialization stuff.  This registers information
//     such as window classes.
//
//  Parameters:
//     HANDLE hInstance
//        Handle to this instance of the application.
//
//---------------------------------------------------------------------------

static BOOL InitApplication( HANDLE hInstance )
{
	WNDCLASS  wndClass ;

	wndClass.style = NULL;
	wndClass.lpfnWndProc = cam_WinProc;
	wndClass.cbClsExtra = 0;
	wndClass.cbWndExtra = 0;
	wndClass.hInstance = hInstance;
	wndClass.hIcon = NULL;
	wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndClass.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wndClass.lpszMenuName = NULL;
	wndClass.lpszClassName = "CAM_WINDOW_CLASS";

   return( RegisterClass( &wndClass ) ) ;
} // end of InitApplication()

//---------------------------------------------------------------------------
//  HWND InitInstance( HANDLE hInstance, int nCmdShow )
//
//  Description:
//     Initializes instance specific information.
//
//  Parameters:
//     HANDLE hInstance
//        Handle to instance
//
//     int nCmdShow
//        How do we show the window?
//
//---------------------------------------------------------------------------

static HWND InitInstance( HANDLE hInstance, LPSTR cmd_line, int nCmdShow )
{
	HWND		win;

	cam_InitTrace("c:\\");
	cam_OpenTraceFile();

	cam_Trace("Command line <%s>\n", cmd_line);

	/* parse command line for host name as first argument */
	/* skip leading white space */
	while (*cmd_line == ' ' || *cmd_line == '\t')
		cmd_line++;
	if (*cmd_line == '\0')
	{
		/* no host specified - use default */
		NcasHost = DEFAULT_NCAS_HOST;
	}
	else
	{
		NcasHost = cmd_line;
	}
		
	/* Create window */
	win = CreateWindow("CAM_WINDOW_CLASS",
						"PC Client Authentication Module",
						WS_OVERLAPPEDWINDOW,
						CW_USEDEFAULT,
						CW_USEDEFAULT,
						CW_USEDEFAULT,
						CW_USEDEFAULT,
						NULL,
						NULL,
						hInstance,
						NULL);

	/* Display the window, and update the contents. */
	if (win == NULL)
		return NULL;

	ShowWindow(win, SW_SHOW);
	UpdateWindow(win);

	return win;
} // end of InitInstance()

/*******************************************************************/
LRESULT CALLBACK cam_WinProc(HWND hWnd, UINT message, WPARAM wParam,
                         LPARAM lParam)
/*******************************************************************/
{
	int		event;

	event = 0;
	
	if (message == ncas_Msg)
	{
	// Socket activity detected
		CancelTimer(hWnd);
		event = DecodeNcasEvent(hWnd, wParam, lParam);
	}
	// else if (message == WM_USER + 21)
	//	return CardOpened();
	else if (message == WM_TIMER && wParam == CAM_TIMER_ID)
	{
		// timer has expired
		event = DecodeTimerEvent(hWnd, wParam, lParam);
	}
	else
	{
		switch (message)
		{
			case WM_CREATE:
				return (Initialise(hWnd)) ;

			case WM_PAINT:
				PaintCAM( hWnd ) ;
				break ;

			case WM_SIZE:
				SizeCAM( hWnd, HIWORD( lParam ), LOWORD( lParam ) ) ;
				break ;

			case WM_HSCROLL:
				ScrollCAMHorz( hWnd, (WORD) wParam, LOWORD( lParam ) ) ;
				break ;

			case WM_VSCROLL:
				ScrollCAMVert( hWnd, (WORD) wParam, LOWORD( lParam ) ) ;
				break ;

			case WM_SETFOCUS:
				SetCAMFocus( hWnd ) ;
				break ;

			case WM_KILLFOCUS:
				KillCAMFocus( hWnd ) ;
				break ;

			case WM_DESTROY:
				DestroyCAMInfo() ;
				PostQuitMessage( 0 ) ;
				break ;

			case WM_CLOSE:
				// fall through
			default:
				return( DefWindowProc( hWnd, message, wParam, lParam ) ) ;
		}
	}
	/* event 0 indicates we are to ignore interrupt and wait for next */
	if (event == 0)
		return 0;

	// invoke state table function to handle event
	return InvokeStateFunc(event, hWnd, (WORD)wParam, (LONG)lParam);
}

/*************************************************************************/   
 int DecodeNcasEvent( HWND hWnd, WPARAM wParam, LPARAM lParam )
/*************************************************************************/   
{
	WORD	error_code;
	WORD	msg_type;

	error_code	= WSAGETSELECTERROR(lParam);
	msg_type	= WSAGETSELECTEVENT(lParam);

	if (msg_type == FD_READ)
	{
		cam_Trace("NCAS_INTERNAL_MSG FD_READ event received on socket %d\n",
					(int)wParam);	

		return E_PDU_RCVD;
	}
	else if (msg_type == FD_ACCEPT)
	{
		cam_Trace("NCAS_INTERNAL_MSG FD_ACCEPT event received on socket %d\n",
					(int)wParam);	

		return E_CONN_RQ;
	}
	else if (msg_type == FD_WRITE)
	{
		/* shouldn't get any of these */
		cam_Trace("NCAS_INTERNAL_MSG FD_WRITE event received on socket %d\n",	
					(int)wParam);	
		/* ignore for the time being */
		return 0;
	}
	else if (msg_type == FD_CLOSE)
	{
		cam_Trace("NCAS_INTERNAL_MSG FD_CLOSE event received on socket %d\n",	
					(int)wParam);	

		return E_NCAS_DISC;
	}
	else if (msg_type == FD_CONNECT)
	{
		cam_Trace("NCAS_INTERNAL_MSG FD_CONNECT event received on socket %d\n",	
					(int)wParam);	

		return E_CONN_CONF;
	}
	else
	{
		cam_Trace("Unidentified event received on socket %d\n",
					(int)wParam);	

		return CAM_ERROR;
	}
}

/*************************************************************************/   
int	DecodeTimerEvent(HWND hWnd, WPARAM wParam, LPARAM lParam)
/*************************************************************************/   

{
	cam_Trace("WM_TIMER message received\n");

	if (TimeToGo)
	{
		ContinueTimer(hWnd);

		return 0;
	}

	return E_TIMER_EXP;
}

/*************************************************************************/
int		Initialise(HWND hWnd)
/*************************************************************************/

{
	// set global window handle
	ncas_Window = hWnd;

	/* get unique msg id for sockets */
	if ((ncas_Msg = RegisterWindowMessage(NCAS_SOCK_MSG_ID)) == 0)
	{
		MessageBox((HWND)NULL, "RegisterWidnowMewssage() fails", "socklc",
					MB_ICONSTOP);

		return CAM_ERROR;	
	}

	CreateCAMInfo(hWnd);

	OutputDebugString("Initialising winsock\n");
	if (ncas_InitSockets() != CAM_OK)
	{
		MessageBox((HWND)NULL, "ncas_InitSockets() fails", "socklc",
					MB_ICONSTOP);

		return CAM_ERROR;	
	}

	OutputDebugString("Initialising state machine\n");
	if (StateInit(hWnd) != CAM_OK)
	{
		MessageBox((HWND)NULL, "StateInit() fails", "socklc",
					MB_ICONSTOP);

		return CAM_ERROR;	
	}

	return CAM_OK;
}

/*************************************************************************/
static void	cam_Close()
/*************************************************************************/

{
	ncas_SocklTerm();

	StateClose();

	DestroyCAMInfo();

	cam_CloseTraceFile();

	return;
}

#ifdef RUN_VISIBLE

//---------------------------------------------------------------------------
//  LRESULT CreateCAMInfo( HWND hWnd )
//
//  Description:
//     Creates the CAM information structure and sets
//     menu option availability.  Returns -1 if unsuccessful.
//
//  Parameters:
//     HWND  hWnd
//        Handle to main window.
//
//---------------------------------------------------------------------------

void CreateCAMInfo(HWND hWnd)
{
   // initialize CAM info structure

   CURSORSTATE( CAMInfo )   = CS_HIDE ;
   XSIZE( CAMInfo )         = 0 ;
   YSIZE( CAMInfo )         = 0 ;
   XSCROLL( CAMInfo )       = 0 ;
   YSCROLL( CAMInfo )       = 0 ;
   XOFFSET( CAMInfo )       = 0 ;
   YOFFSET( CAMInfo )       = 0 ;
   COLUMN( CAMInfo )        = 0 ;
   ROW( CAMInfo )           = 0 ;
   HCAMFONT( CAMInfo )      = NULL ;
   FGCOLOR( CAMInfo )       = RGB( 0, 0, 0 ) ;

   // clear screen space

   _fmemset( SCREEN( CAMInfo ), ' ', MAXROWS * MAXCOLS ) ;

   // setup default font information

   LFCAMFONT( CAMInfo ).lfHeight =         16 ;
   LFCAMFONT( CAMInfo ).lfWidth =          8 ;
   LFCAMFONT( CAMInfo ).lfEscapement =     0 ;
   LFCAMFONT( CAMInfo ).lfOrientation =    0 ;
   LFCAMFONT( CAMInfo ).lfWeight =         FW_MEDIUM ;
   LFCAMFONT( CAMInfo ).lfItalic =         0 ;
   LFCAMFONT( CAMInfo ).lfUnderline =      0 ;
   LFCAMFONT( CAMInfo ).lfStrikeOut =      0 ;
   LFCAMFONT( CAMInfo ).lfCharSet =        OEM_CHARSET ;
   LFCAMFONT( CAMInfo ).lfOutPrecision =   OUT_DEFAULT_PRECIS ;
   LFCAMFONT( CAMInfo ).lfClipPrecision =  CLIP_DEFAULT_PRECIS ;
   LFCAMFONT( CAMInfo ).lfQuality =        PROOF_QUALITY ;
   LFCAMFONT( CAMInfo ).lfPitchAndFamily = FIXED_PITCH | FF_MODERN ;
   LFCAMFONT( CAMInfo ).lfFaceName[0] =    NULL ;

   // reset the character information, etc.

   ResetCAMScreen(hWnd) ;

   return;
} // end of CreateCAMInfo()

//---------------------------------------------------------------------------
//  BOOL DestroyCAMInfo( HWND hWnd )
//
//  Description:
//     Destroys block associated with CAM window handle.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//---------------------------------------------------------------------------

void DestroyCAMInfo(void)
{
	DeleteObject(HCAMFONT(CAMInfo));

	return;

} // end of DestroyCAMInfo()

//---------------------------------------------------------------------------
//  BOOL ResetCAMScreen( HWND hWnd, NPCAMINFO CAMInfo )
//
//  Description:
//     Resets the CAM character information and causes the
//     screen to resize to update the scroll information.
//
//  Parameters:
//     NPCAMINFO  CAMInfo
//        pointer to CAM info structure
//
//---------------------------------------------------------------------------

BOOL ResetCAMScreen( HWND hWnd)
{
   HDC         hDC ;
   TEXTMETRIC  tm ;
   RECT        rcWindow ;

   if (NULL != HCAMFONT( CAMInfo ))
      DeleteObject( HCAMFONT( CAMInfo ) ) ;

   HCAMFONT( CAMInfo ) = CreateFontIndirect( &LFCAMFONT( CAMInfo ) ) ;

   hDC = GetDC( hWnd ) ;
   SelectObject( hDC, HCAMFONT( CAMInfo ) ) ;
   GetTextMetrics( hDC, &tm ) ;
   ReleaseDC( hWnd, hDC ) ;

   XCHAR( CAMInfo ) = tm.tmAveCharWidth  ;
   YCHAR( CAMInfo ) = tm.tmHeight + tm.tmExternalLeading ;

   // a slimy hack to force the scroll position, region to
   // be recalculated based on the new character sizes

   GetWindowRect( hWnd, &rcWindow ) ;
   SendMessage( hWnd, WM_SIZE, SIZENORMAL,
                (LPARAM) MAKELONG( rcWindow.right - rcWindow.left,
                                   rcWindow.bottom - rcWindow.top ) ) ;

   return ( TRUE ) ;

} // end of ResetCAMScreen()

//---------------------------------------------------------------------------
//  BOOL PaintCAM( HWND hWnd )
//
//  Description:
//     Paints the rectangle determined by the paint struct of
//     the DC.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window (as always)
//
//---------------------------------------------------------------------------

BOOL PaintCAM( HWND hWnd )
{
   int          nRow, nCol, nEndRow, nEndCol, nCount, nHorzPos, nVertPos ;
   HDC          hDC ;
   HFONT        hOldFont ;
   PAINTSTRUCT  ps ;
   RECT         rect ;

   hDC = BeginPaint( hWnd, &ps ) ;
   hOldFont = SelectObject( hDC, HCAMFONT( CAMInfo ) ) ;
   SetTextColor( hDC, FGCOLOR( CAMInfo ) ) ;
   SetBkColor( hDC, GetSysColor( COLOR_WINDOW ) ) ;
   rect = ps.rcPaint ;
   nRow =
      min( MAXROWS - 1,
           max( 0, (rect.top + YOFFSET ( CAMInfo) ) / YCHAR( CAMInfo ) ) ) ;
   nEndRow =
      min( MAXROWS - 1,
           ((rect.bottom + YOFFSET ( CAMInfo) - 1 ) / YCHAR( CAMInfo ) ) ) ;
   nCol =
      min( MAXCOLS - 1,
           max( 0, (rect.left + XOFFSET( CAMInfo ) ) / XCHAR( CAMInfo ) ) ) ;
   nEndCol =
      min( MAXCOLS - 1,
           ((rect.right + XOFFSET(CAMInfo) - 1) / XCHAR(CAMInfo))) ;
   nCount = nEndCol - nCol + 1 ;
   for (; nRow <= nEndRow; nRow++)
   {
      nVertPos = (nRow * YCHAR( CAMInfo )) - YOFFSET( CAMInfo ) ;
      nHorzPos = (nCol * XCHAR( CAMInfo )) - XOFFSET( CAMInfo ) ;
      rect.top = nVertPos ;
      rect.bottom = nVertPos + YCHAR( CAMInfo ) ;
      rect.left = nHorzPos ;
      rect.right = nHorzPos + XCHAR( CAMInfo ) * nCount ;
      SetBkMode( hDC, OPAQUE ) ;
      ExtTextOut( hDC, nHorzPos, nVertPos, ETO_OPAQUE | ETO_CLIPPED, &rect,
                  (LPSTR)( SCREEN( CAMInfo ) + nRow * MAXCOLS + nCol ),
                  nCount, NULL ) ;
   }
   SelectObject( hDC, hOldFont ) ;
   EndPaint( hWnd, &ps ) ;
   MoveCAMCursor( hWnd ) ;
   return ( TRUE ) ;

} // end of PaintCAM()

//---------------------------------------------------------------------------
//  BOOL SizeCAM( HWND hWnd, WORD wVertSize, WORD wHorzSize )
//
//  Description:
//     Sizes CAM and sets up scrolling regions.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//     WORD wVertSize
//        new vertical size
//
//     WORD wHorzSize
//        new horizontal size
//
//---------------------------------------------------------------------------

BOOL SizeCAM( HWND hWnd, WORD wVertSize, WORD wHorzSize )
{
   int        nScrollAmt ;

   YSIZE( CAMInfo ) = (int) wVertSize ;
   YSCROLL( CAMInfo ) = max( 0, (MAXROWS * YCHAR( CAMInfo )) -
                               YSIZE( CAMInfo ) ) ;
   nScrollAmt = min( YSCROLL( CAMInfo ), YOFFSET( CAMInfo ) ) -
                     YOFFSET( CAMInfo ) ;
   ScrollWindow( hWnd, 0, -nScrollAmt, NULL, NULL ) ;

   YOFFSET( CAMInfo ) = YOFFSET( CAMInfo ) + nScrollAmt ;
   SetScrollPos( hWnd, SB_VERT, YOFFSET( CAMInfo ), FALSE ) ;
   SetScrollRange( hWnd, SB_VERT, 0, YSCROLL( CAMInfo ), TRUE ) ;

   XSIZE( CAMInfo ) = (int) wHorzSize ;
   XSCROLL( CAMInfo ) = max( 0, (MAXCOLS * XCHAR( CAMInfo )) -
                                XSIZE( CAMInfo ) ) ;
   nScrollAmt = min( XSCROLL( CAMInfo ), XOFFSET( CAMInfo )) -
                     XOFFSET( CAMInfo ) ;
   ScrollWindow( hWnd, 0, -nScrollAmt, NULL, NULL ) ;
   XOFFSET( CAMInfo ) = XOFFSET( CAMInfo ) + nScrollAmt ;
   SetScrollPos( hWnd, SB_HORZ, XOFFSET( CAMInfo ), FALSE ) ;
   SetScrollRange( hWnd, SB_HORZ, 0, XSCROLL( CAMInfo ), TRUE ) ;

   InvalidateRect( hWnd, NULL, TRUE ) ;

   return ( TRUE ) ;

} // end of SizeCAM()

//---------------------------------------------------------------------------
//  BOOL ScrollCAMVert( HWND hWnd, WORD wScrollCmd, WORD wScrollPos )
//
//  Description:
//     Scrolls CAM window vertically.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//     WORD wScrollCmd
//        type of scrolling we're doing
//
//     WORD wScrollPos
//        scroll position
//
//---------------------------------------------------------------------------

BOOL ScrollCAMVert( HWND hWnd, WORD wScrollCmd, WORD wScrollPos )
{
   int        nScrollAmt ;

   switch (wScrollCmd)
   {
      case SB_TOP:
         nScrollAmt = -YOFFSET( CAMInfo ) ;
         break ;

      case SB_BOTTOM:
         nScrollAmt = YSCROLL( CAMInfo ) - YOFFSET( CAMInfo ) ;
         break ;

      case SB_PAGEUP:
         nScrollAmt = -YSIZE( CAMInfo ) ;
         break ;

      case SB_PAGEDOWN:
         nScrollAmt = YSIZE( CAMInfo ) ;
         break ;

      case SB_LINEUP:
         nScrollAmt = -YCHAR( CAMInfo ) ;
         break ;

      case SB_LINEDOWN:
         nScrollAmt = YCHAR( CAMInfo ) ;
         break ;

      case SB_THUMBPOSITION:
         nScrollAmt = wScrollPos - YOFFSET( CAMInfo ) ;
         break ;

      default:
         return ( FALSE ) ;
   }
   if ((YOFFSET( CAMInfo ) + nScrollAmt) > YSCROLL( CAMInfo ))
      nScrollAmt = YSCROLL( CAMInfo ) - YOFFSET( CAMInfo ) ;
   if ((YOFFSET( CAMInfo ) + nScrollAmt) < 0)
      nScrollAmt = -YOFFSET( CAMInfo ) ;
   ScrollWindow( hWnd, 0, -nScrollAmt, NULL, NULL ) ;
   YOFFSET( CAMInfo ) = YOFFSET( CAMInfo ) + nScrollAmt ;
   SetScrollPos( hWnd, SB_VERT, YOFFSET( CAMInfo ), TRUE ) ;

   return ( TRUE ) ;

} // end of ScrollCAMVert()

//---------------------------------------------------------------------------
//  BOOL ScrollCAMHorz( HWND hWnd, WORD wScrollCmd, WORD wScrollPos )
//
//  Description:
//     Scrolls CAM window horizontally.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//     WORD wScrollCmd
//        type of scrolling we're doing
//
//     WORD wScrollPos
//        scroll position
//
//---------------------------------------------------------------------------

BOOL ScrollCAMHorz( HWND hWnd, WORD wScrollCmd, WORD wScrollPos )
{
   int        nScrollAmt ;

   switch (wScrollCmd)
   {
      case SB_TOP:
         nScrollAmt = -XOFFSET( CAMInfo ) ;
         break ;

      case SB_BOTTOM:
         nScrollAmt = XSCROLL( CAMInfo ) - XOFFSET( CAMInfo ) ;
         break ;

      case SB_PAGEUP:
         nScrollAmt = -XSIZE( CAMInfo ) ;
         break ;

      case SB_PAGEDOWN:
         nScrollAmt = XSIZE( CAMInfo ) ;
         break ;

      case SB_LINEUP:
         nScrollAmt = -XCHAR( CAMInfo ) ;
         break ;

      case SB_LINEDOWN:
         nScrollAmt = XCHAR( CAMInfo ) ;
         break ;

      case SB_THUMBPOSITION:
         nScrollAmt = wScrollPos - XOFFSET( CAMInfo ) ;
         break ;

      default:
         return ( FALSE ) ;
   }
   if ((XOFFSET( CAMInfo ) + nScrollAmt) > XSCROLL( CAMInfo ))
      nScrollAmt = XSCROLL( CAMInfo ) - XOFFSET( CAMInfo ) ;
   if ((XOFFSET( CAMInfo ) + nScrollAmt) < 0)
      nScrollAmt = -XOFFSET( CAMInfo ) ;
   ScrollWindow( hWnd, -nScrollAmt, 0, NULL, NULL ) ;
   XOFFSET( CAMInfo ) = XOFFSET( CAMInfo ) + nScrollAmt ;
   SetScrollPos( hWnd, SB_HORZ, XOFFSET( CAMInfo ), TRUE ) ;

   return ( TRUE ) ;

} // end of ScrollCAMHorz()

//---------------------------------------------------------------------------
//  BOOL SetCAMFocus( HWND hWnd )
//
//  Description:
//     Sets the focus to the CAM window also creates caret.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//---------------------------------------------------------------------------

BOOL SetCAMFocus( HWND hWnd )
{
   if (CURSORSTATE( CAMInfo ) != CS_SHOW)
   {
      CreateCaret( hWnd, NULL, XCHAR( CAMInfo ), YCHAR( CAMInfo ) ) ;
      ShowCaret( hWnd ) ;
      CURSORSTATE( CAMInfo ) = CS_SHOW ;
   }
   MoveCAMCursor( hWnd ) ;
   return ( TRUE ) ;

} // end of SetCAMFocus()

//---------------------------------------------------------------------------
//  BOOL KillCAMFocus( HWND hWnd )
//
//  Description:
//     Kills CAM focus and destroys the caret.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//---------------------------------------------------------------------------

BOOL KillCAMFocus( HWND hWnd )
{
   if (CURSORSTATE( CAMInfo ) != CS_HIDE)
   {
      HideCaret( hWnd ) ;
      DestroyCaret() ;
      CURSORSTATE( CAMInfo ) = CS_HIDE ;
   }
   return ( TRUE ) ;

} // end of KillCAMFocus()

//---------------------------------------------------------------------------
//  BOOL MoveCAMCursor( HWND hWnd )
//
//  Description:
//     Moves caret to current position.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//---------------------------------------------------------------------------

BOOL MoveCAMCursor( HWND hWnd )
{
   if (CURSORSTATE( CAMInfo ) & CS_SHOW)
      SetCaretPos( (COLUMN( CAMInfo ) * XCHAR( CAMInfo )) -
                   XOFFSET( CAMInfo ),
                   (ROW( CAMInfo ) * YCHAR( CAMInfo )) -
                   YOFFSET( CAMInfo ) ) ;

   return ( TRUE ) ;

} // end of MoveCAMCursor()

//---------------------------------------------------------------------------
//  BOOL WriteCAMBlock( HWND hWnd, LPSTR lpBlock, int nLength )
//
//  Description:
//     Writes block to CAM screen.  Nothing fancy - just
//     straight CAM.
//
//  Parameters:
//     HWND hWnd
//        handle to CAM window
//
//     LPSTR lpBlock
//        far pointer to block of data
//
//     int nLength
//        length of block
//
//---------------------------------------------------------------------------

void WriteCAMBlock(LPSTR lpBlock, int nLength)
{
	int		i ;
	RECT	rect ;
	HWND	hWnd;

	if ((hWnd = ncas_Window) == NULL)
		return;

   for (i = 0 ; i < nLength; i++)
   {
      switch (lpBlock[ i ])
      {
         case ASCII_TAB:
            // Tab
            WriteCAMBlock("    ", 4);
            break ;

         case ASCII_BEL:
            // Bell
            MessageBeep( 0 ) ;
            break ;

         case ASCII_BS:
            // Backspace
            if (COLUMN( CAMInfo ) > 0)
               COLUMN( CAMInfo ) -- ;
            MoveCAMCursor( hWnd ) ;
            break ;

         case ASCII_CR:
         case ASCII_LF:
            // Line feed
            // do carriage return as well
            COLUMN( CAMInfo ) = 0 ;
            if (ROW( CAMInfo )++ == MAXROWS - 1)
            {
               _fmemmove( (LPSTR) (SCREEN( CAMInfo )),
                          (LPSTR) (SCREEN( CAMInfo ) + MAXCOLS),
                          (MAXROWS - 1) * MAXCOLS ) ;
               _fmemset((LPSTR)(SCREEN(CAMInfo) + (MAXROWS - 1) * MAXCOLS),
                         ' ', MAXCOLS ) ;
               InvalidateRect( hWnd, NULL, FALSE ) ;
               ROW( CAMInfo )-- ;
            }
            MoveCAMCursor( hWnd ) ;
            break ;

         default:
            *(SCREEN( CAMInfo ) + ROW( CAMInfo ) * MAXCOLS +
                COLUMN( CAMInfo )) = lpBlock[ i ] ;
            rect.left = (COLUMN( CAMInfo ) * XCHAR( CAMInfo )) -
                        XOFFSET( CAMInfo ) ;
            rect.right = rect.left + XCHAR( CAMInfo ) ;
            rect.top = (ROW( CAMInfo ) * YCHAR( CAMInfo )) -
                       YOFFSET( CAMInfo ) ;
            rect.bottom = rect.top + YCHAR( CAMInfo ) ;
            InvalidateRect( hWnd, &rect, FALSE ) ;

            // Line wrap
            if (COLUMN( CAMInfo ) < MAXCOLS - 1)
               COLUMN( CAMInfo )++ ;
            else
               WriteCAMBlock("\n", 1) ;
            break;
      }
   }

   return;

} // end of WriteCAMBlock()


//---------------------------------------------------------------------------
//  VOID GoModalDialogBoxParam( HINSTANCE hInstance,
//                                   LPCSTR lpszTemplate, HWND hWnd,
//                                   DLGPROC lpDlgProc, LPARAM lParam )
//
//  Description:
//     It is a simple utility function that simply performs the
//     MPI and invokes the dialog box with a DWORD paramter.
//
//  Parameters:
//     similar to that of DialogBoxParam() with the exception
//     that the lpDlgProc is not a procedure instance
//
//---------------------------------------------------------------------------

static VOID GoModalDialogBoxParam( HINSTANCE hInstance, LPCSTR lpszTemplate,
                     HWND hWnd, DLGPROC lpDlgProc, LPARAM lParam )
{
   DLGPROC  lpProcInstance ;

   lpProcInstance = (DLGPROC) MakeProcInstance( (FARPROC) lpDlgProc,
                                                hInstance ) ;
   DialogBoxParam( hInstance, lpszTemplate, hWnd, lpProcInstance, lParam ) ;
   FreeProcInstance( (FARPROC) lpProcInstance ) ;

} // end of GoModalDialogBoxParam()

//---------------------------------------------------------------------------
//  BOOL SettingsDlgInit( HWND hDlg )
//
//  Description:
//     Puts current settings into dialog box (via CheckRadioButton() etc.)
//
//  Parameters:
//     HWND hDlg
//        handle to dialog box
//
//---------------------------------------------------------------------------

BOOL SettingsDlgInit( HWND hDlg )
{
	EnableWindow( GetDlgItem( hDlg, IDC_PWDENTRY ), TRUE ) ;

	SendMessage(hDlg, DM_SETDEFID, (WPARAM)IDC_PWDENTRY, 0);

   return ( TRUE ) ;
} // end of SettingsDlgInit()

//---------------------------------------------------------------------------
//  BOOL SelectCAMFont( HWND hDlg )
//
//  Description:
//     Selects the current font for the CAM screen.
//     Uses the Common Dialog ChooseFont() API.
//
//  Parameters:
//     HWND hDlg
//        handle to settings dialog
//
//---------------------------------------------------------------------------

BOOL SelectCAMFont( HWND hDlg )
{
   CHOOSEFONT  cfCAMFont ;

   cfCAMFont.lStructSize    = sizeof( CHOOSEFONT ) ;
   cfCAMFont.hwndOwner      = hDlg ;
   cfCAMFont.hDC            = NULL ;
   cfCAMFont.rgbColors      = FGCOLOR( CAMInfo ) ;
   cfCAMFont.lpLogFont      = &LFCAMFONT( CAMInfo ) ;
   cfCAMFont.Flags          = CF_SCREENFONTS | CF_FIXEDPITCHONLY |
                              CF_EFFECTS | CF_INITTOLOGFONTSTRUCT ;
   cfCAMFont.lCustData      = NULL ;
   cfCAMFont.lpfnHook       = NULL ;
   cfCAMFont.lpTemplateName = NULL ;
   cfCAMFont.hInstance      = GETHINST( hDlg ) ;

   if (ChooseFont( &cfCAMFont ))
   {
     FGCOLOR( CAMInfo ) = cfCAMFont.rgbColors ;
     ResetCAMScreen( GetParent( hDlg )) ;
   }

   return ( TRUE ) ;

} // end of SelectCAMFont()

//---------------------------------------------------------------------------
//  BOOL SettingsDlgTerm( HWND hDlg )
//
//  Description:
//     Puts dialog contents into CAM info structure.
//
//  Parameters:
//     HWND hDlg
//        handle to settings dialog
//
//---------------------------------------------------------------------------

BOOL SettingsDlgTerm( HWND hDlg )
{
	int		len;
	char	buff[32];

	// control options

	len = LOWORD(SendDlgItemMessage( hDlg, IDC_PWDENTRY, WM_GETTEXT,
						(WPARAM)sizeof(buff), (LPARAM)buff)) ;

	cam_Trace("Paswword <%*.*s>, length %d\n", len, len, buff, len);
	if (len <= 0)
	{
		cam_Trace("Failed to get password %d\n", len);

		return FALSE;
	}

   return ( TRUE ) ;

} // end of SettingsDlgTerm()

//---------------------------------------------------------------------------
//  BOOL FAR PASCAL __export SettingsDlgProc( HWND hDlg, UINT uMsg,
//                                   WPARAM wParam, LPARAM lParam )
//
//  Description:
//     This handles all of the user preference settings for
//     the CAM.
//
//  Parameters:
//     same as all dialog procedures
//
//---------------------------------------------------------------------------

BOOL FAR PASCAL __export SettingsDlgProc( HWND hDlg, UINT uMsg,
                                 WPARAM wParam, LPARAM lParam )
{
   switch (uMsg)
   {
      case WM_INITDIALOG:
      {
         return ( SettingsDlgInit( hDlg ) ) ;
      }

      case WM_COMMAND:
         switch ((WORD) wParam)
         {
            // case IDD_FONT:
               // return ( SelectCAMFont( hDlg ) ) ;

            case IDOK:
               // Copy stuff into structure
               SettingsDlgTerm( hDlg ) ;
               EndDialog( hDlg, TRUE ) ;
               return ( TRUE ) ;

            case IDCANCEL:
               // Just end
               EndDialog( hDlg, TRUE ) ;
               return ( TRUE ) ;
         }
         break;
   }
   return ( FALSE ) ;

} // end of SettingsDlgProc()

#endif	/* RUN_VISIBLE */
