
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "btos.h"

#define TRUE    1
#define FALSE   0

/* BCD_END is any character with a binary value > 9 */
/* bear this in mind for non ASCII character values */
/* this marks the current end of the shift register */
#define BCD_END '#'

/* this reverses The working register and converts BCD to ASCII */
static void conv_bcd(unsigned char *string, unsigned int out_len)
{
        unsigned int i;
        unsigned int n = 0;
        unsigned char c_tmp;

        /* get length of register and convert to ASCII */
        /* we add '0' - so beware on non ASCII systems */
        while (string[n] != BCD_END)
                string[n++] += '0';

        /* reverse bytes */
        for (i = 0; i < n / 2; i++)
        {
                c_tmp = string[i];
                string[i] = string[n - i - 1];
                string[n - i - 1] = c_tmp;
        }

        for (i = 0; i < n; i++)
                string[out_len - i - 1] = string[n - i - 1];

        while (i < out_len)
                string[out_len - i++ - 1] = '0';

        /* NULL terminate at end */
        string[out_len] = '\0';
}

/* BCD multiply the shift register by 2 */
static void mult_2(unsigned char *bcd)
{
        unsigned char carry = 0;

        while (*bcd != BCD_END)
        {
                /* multiply first BCD digit by 2 and add any previous carry */
                if ((*bcd = *bcd * 2 + carry) > 9)
                {
                        /* overflow - so set carry */
                        *bcd -= 10;
                        carry = 1;
                }
                else
                        carry = FALSE;

                /* advance to next digit */
                bcd++;
        }

        /* any residual carry increases register length */
        if (carry)
        {
                *bcd++ = 1;
                *bcd = BCD_END;
        }
}

/* Increment BCD shift register by 1 */
static void add_1(unsigned char *bcd)
{
        while (TRUE)
        {
                /* if we get to the end it must be a carry */
                /* or the first time we've needed to add 1 */
                if (*bcd == BCD_END)
                {
                        *bcd++ = 1;
                        *bcd = BCD_END;
                        break;
                }
                else if ((*bcd += 1) < 10)
                        break; /* finished */
                else
                        *bcd++ -= 10; /* carry one to next digit */
        }
}

/* actual API call */
void btos(unsigned char *bits, unsigned int bytes, char *string,
                                        unsigned int out_len)
{
        unsigned int i, j;
        BOOL found_1 = FALSE;
        unsigned char curr_byte;
        unsigned char mask;

        /* place END sentinel at start of string */
        string[0] = BCD_END;

        for (i = 0; i < bytes; i++)
        {
                /* take bytes, highest first */
                curr_byte = bits[i];

                for (j = 0, mask = 0x80; j < 8; j++, mask /= 2)
                {
                        /* after the first binary 1, we BCD *2 each time */
                        if (found_1)
                                mult_2((unsigned char *)string);

                        /* take bits, highest first and check */
                        /* if the current bit is 1, add 1 to register */
                        if (curr_byte & mask)
                        {
                                add_1((unsigned char *)string);
                                found_1 = TRUE;
                        }
                }
        }

        /* post-process string */
        conv_bcd((unsigned char *)string, out_len);
}


