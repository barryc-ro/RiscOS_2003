#include <windows.h>
#include <stdlib.h>
#include <string.h>
#include "cam.h"
#include "card.h"
#include "sci_api.h"

static char	Func[32];
static int	CardHnd;
static BYTE	ExpResp;
static char	Diag[256];

static int		IncardRead(int offset, int len);
static int		IncardWrite(int offset, char *data, int len);
static int		IncardWriteRec(int rec, BYTE mode, char *data, int len);
static int		IncardReadRec(int rec, BYTE mode, int len);
static int		IncardSelect(UINT file_id);
static int		IncardRetrieve(int exp_len);
static int		IncardNewDir(UINT dir_id, UINT dir_size);
static int		IncardNewFile(UINT file_id, UINT file_size, UINT file_type);
static int		IncardVerify(BYTE pwd_type, BYTE *pwd);
static int		IncardIntAuth(int key_num, char *data, int len);

static int		WaitForCard();

/*************************************************************************/
int	CardIntAuth(BYTE *plain, int pl_len, int key_num, BYTE *cyphr,
					int max_len, int *cy_len)
/*
	Assemble an internal authenticate command for the card using Rnd
	as the data and Kn as the key number and send to the card,
	wait for the response
*/
/*************************************************************************/

{
#ifndef NO_CARD
	BYTE	cmd[CARD_CMD_LEN];
	BYTE	resp[CARD_RESP_LEN];
	int		exp_len;

	/*send Incard command to do internal authentication */

	cmd[0] = 0xA0;
	cmd[1] = 0x88;
	cmd[2] = 0x00;
	cmd[3] = (BYTE)key_num;

	if (sci_IssueCommand(CardHnd, cmd, pl_len, plain, 0) != SCI_SUCCESS)
		return CAM_ERROR;

	if (!WaitForCard())
		return CAM_ERROR;

	if (sci_ReadResponse(CardHnd, NULL, 0, &exp_len, resp) != SCI_SUCCESS)
		return CAM_ERROR;

	if (resp[0] != 0x9F || ((exp_len = (int)resp[1]) != ActCyphrLen))
		return CAM_ERROR;

	/*send Incard command to retrieve cypher text */

	cmd[0] = 0xA0;
	cmd[1] = 0xC0;
	cmd[2] = 0x00;
	cmd[3] = 0x00;

	if (sci_IssueCommand(CardHnd, cmd, 0, NULL, exp_len) != SCI_SUCCESS)
		return CAM_ERROR;

	if (!WaitForCard())
		return CAM_ERROR;

	if (sci_ReadResponse(CardHnd, cyphr, max_len, cy_len, resp) != SCI_SUCCESS)
		return CAM_ERROR;

	if (resp[0] != 0x90 || resp[1] != 0)
		return CAM_ERROR;
#else	/* ! NO_CARD */
	memcpy(cyphr, plain, min(pl_len, ActCyphrLen));
	*cy_len = ActCyphrLen;
#endif	/* NO_CARD */

	return CAM_OK;
}

/*************************************************************************/
int	CardReadSrn(BYTE *srn, int buff_len, int *len)
/*
	Retrieve the response from an internal authenticate command.
*/
/*************************************************************************/

{
#ifndef NO_CARD
	BYTE	resp[CARD_RESP_LEN];
	int		exp_len;
	BYTE	card_data[SCI_MAX_EXP_LEN];

	/* select root dir */
	OutputDebugString("Doing root dir select\n");
	if (IncardSelect(0x3F00) == SCI_ERROR)
	{
		OutputDebugString("root dir select failed\n");
		return CAM_ERROR;
	}

	if (!WaitForCard())
		return CAM_ERROR;

	OutputDebugString("Doing root dir select read response\n");
 	if (sci_ReadResponse(CardHnd, NULL, 0, &exp_len, resp) != SCI_SUCCESS)
	{
		OutputDebugString("sci_ReadResponse() failed\n");
		return CAM_ERROR;
	}

	OutputDebugString("sci_ReadResponse() OK\n");
 	if (resp[0] != ExpResp)
		return CAM_ERROR;

	OutputDebugString("Doing read status\n");
	if (IncardRetrieve((int)resp[1]) == SCI_ERROR)
	{
		OutputDebugString("read status failed\n");
		return CAM_ERROR;
	}

	if (!WaitForCard())
		return CAM_ERROR;

	OutputDebugString("Doing read status read response\n");
 	if (sci_ReadResponse(CardHnd, card_data, SCI_MAX_EXP_LEN, &exp_len,
 						resp) != SCI_SUCCESS)
	{
		OutputDebugString("sci_ReadResponse() failed\n");
		return CAM_ERROR;
	}

	OutputDebugString("sci_ReadResponse() OK\n");
 	if (resp[0] != ExpResp)
		return CAM_ERROR;

	OutputDebugString("Doing verify\n");
	/* unlock card (verify CHV1) */
	if (IncardVerify(0x01, "12345678") == SCI_ERROR)
		return CAM_ERROR;

	if (!WaitForCard())
		return CAM_ERROR;

	OutputDebugString("verify done\n");
	if (sci_ReadResponse(CardHnd, card_data, SCI_MAX_EXP_LEN, &exp_len,
						resp) != SCI_SUCCESS)
	{
		sprintf(Diag, "sci_ReadResponse() failed, sci error %d, %s\n",
				sci_Error(CardHnd), sci_GetErrorText(sci_Error(CardHnd), FALSE));
		OutputDebugString(Diag);
		
		return CAM_ERROR;
	}

	OutputDebugString("verify response read\n");
	if (resp[0] != ExpResp && resp[0] != 0x98)
		return CAM_ERROR;

	OutputDebugString("verify response OK\n");
	/* select serial number file */
	if (IncardSelect(0x2F2E) == SCI_ERROR)
		return CAM_ERROR;

	if (!WaitForCard())
		return CAM_ERROR;

	if (sci_ReadResponse(CardHnd, card_data, SCI_MAX_EXP_LEN, &exp_len,
							resp) != SCI_SUCCESS)
		return CAM_ERROR;

	if (resp[0] != ExpResp)
		return CAM_ERROR;

	/* read serial number file */
	if (IncardRead(1, 8) == SCI_ERROR)
		return CAM_ERROR;

	if (!WaitForCard())
		return CAM_ERROR;

	if (sci_ReadResponse(CardHnd, srn, buff_len, len, resp) != SCI_SUCCESS)
		return CAM_ERROR;

	if (resp[0] != ExpResp || resp[1] != 0)
		return CAM_ERROR;
#else	/* ! NO_CARD */
	memcpy(srn, "CAM serial number", ActSrnLen);
	*len = ActSrnLen;
#endif	/* NO_CARD */

	return CAM_OK;
}

/*************************************************************************/
int	CardOpen(HWND hWnd)
/*************************************************************************/

{
#ifndef NO_CARD
	/* pass call on to sci_Open(), any errors including CARD_OUT
		are failed */
	if (sci_Open(WM_USER + 21, hWnd, &CardHnd) != SCI_SUCCESS)
	{
		OutputDebugString("sci_Open() failed\n");
		return CAM_ERROR;
	}
		
	OutputDebugString("sci_Open() OK\n");
	if (!WaitForCard())
	{
		OutputDebugString("WaitForCard() failed\n");
		return CAM_ERROR;
	}
	OutputDebugString("First WaitForCard() OK\n");
#endif	/* NO_CARD */

	return CardOpened();
}

/*************************************************************************/
int	CardOpened()
/*************************************************************************/

{
#ifndef NO_CARD
	BYTE	hist[SCI_HIST_LEN];
	int		hist_len;

	OutputDebugString("CardOpened() entered\n");

	if (sci_RetrieveATR(CardHnd, hist, SCI_HIST_LEN, &hist_len) != SCI_SUCCESS)
	{
		OutputDebugString("sci_RetrieveATR() failed\n");
		return CAM_ERROR;
	}

	OutputDebugString("sci_RetrieveATR() OK\n");
#endif	/* NO_CARD */
	/* assume old Incard for the time being */
	ActPlainLen = 8;
	ActCyphrLen = 8;
	ActSrnLen = 16;

	return CAM_OK;
}

/*************************************************************************/
int	CardClose()
/*************************************************************************/

{
#ifndef NO_CARD
	/* pass call on to sci_Close() */
	if (sci_Close(CardHnd) != SCI_SUCCESS)
		return CAM_ERROR;
#endif	/* NO_CARD */

	return CAM_OK;
}

#ifndef NO_CARD
/*********************************************************************/
static int	IncardRead(int offset, int len)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[10];

	strcpy(Func, "IncardRead");

	hdr[0] = 0xA0;
	hdr[1] = 0xB0;
	hdr[2] = offset / 256;
	hdr[3] = offset % 256;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, 0, data, len);
}

/*********************************************************************/
static int	IncardWrite(int offset, char *data, int len)
/*********************************************************************/

{
	BYTE	hdr[4];
	int		exp_len;

	strcpy(Func, "IncardWrite");

	hdr[0] = 0xA0;
	hdr[1] = 0xD6;
	hdr[2] = offset / 256;
	hdr[3] = offset % 256;

	exp_len = 0;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardReadRec(int rec, BYTE mode, int len)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[10];

	strcpy(Func, "IncardReadRec");

	hdr[0] = 0xA0;
	hdr[1] = 0xB2;
	hdr[2] = rec;
	hdr[3] = mode;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, 0, data, len);
}

/*********************************************************************/
static int	IncardWriteRec(int rec, BYTE mode, char *data, int len)
/*********************************************************************/

{
	BYTE	hdr[4];
	int		exp_len;

	strcpy(Func, "IncardWriteRec");

	hdr[0] = 0xA0;
	hdr[1] = 0xDC;
	hdr[2] = rec;
	hdr[3] = mode;

	exp_len = 0;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardSelect(UINT file_id)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 
	int		exp_len;

	strcpy(Func, "IncardSelect");

	hdr[0] = 0xA0;
	hdr[1] = 0xA4;
	hdr[2] = 0x00;
	hdr[3] = 0x00;

	exp_len = 0;
	len = 0;

	data[len++] = file_id / 256;
	data[len++] = file_id % 256;

	ExpResp = 0x9F;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardDelete(UINT file_id)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 
	int		exp_len;

	strcpy(Func, "IncardDelete");

	hdr[0] = 0xA4;
	hdr[1] = 0xE4;
	hdr[2] = 0x00;
	hdr[3] = 0x00;

	exp_len = 0;
	len = 0;

	data[len++] = file_id / 256;
	data[len++] = file_id % 256;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardRetrieve(int exp_len)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 

	strcpy(Func, "IncardRetrieve");

	// receive root directory data
	hdr[0] = 0xA0;
	hdr[1] = 0xC0;
	hdr[2] = 0x00;
	hdr[3] = 0x00;

	len = 0;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardNewDir(UINT dir_id, UINT dir_size)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 
	int		exp_len;

	strcpy(Func, "IncardNewDir");

	hdr[0] = 0xA4;
	hdr[1] = 0xE0;
	hdr[2] = 0x00;
	hdr[3] = 0x00;

	exp_len = 0;
	len = 0;

	data[len++] = 0x85;		// ASN.1 id
	data[len++] = 0x00;		// ASN.1 len, actual value set later

	data[len++] = dir_size / 256;		/* msb of file size */
	data[len++] = dir_size % 256;		/* lsb of file size */

	data[len++] = dir_id / 256;		// file id msb
	data[len++] = dir_id % 256;		// file id lsb

	data[len++] = 0x10;		// dedicated file

	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions

	data[len++] = 0x03;		// file status

	data[len++] = 0x03;		// length of following data

	data[len++] = 0x00;		// not used
	data[len++] = 0x00;		// not used
	data[len++] = 0x00;		// not used
	/* set ASN.1 data length */
	data[1] = len - 2;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardNewFile(UINT file_id, UINT file_size, UINT file_type)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 
	int		exp_len;

	strcpy(Func, "IncardNewFile");

	hdr[0] = 0xA4;
	hdr[1] = 0xE0;
	hdr[2] = 0x00;
	hdr[3] = 0x00;

	exp_len = 0;
	len = 0;

	data[len++] = 0x85;		// ASN.1 id
	data[len++] = 0x00;		// ASN.1 len, actual value set later

	data[len++] = file_size / 256;		/* msb of file size */
	data[len++] = file_size % 256;		/* lsb of file size */

	data[len++] = file_id / 256;		// file id msb
	data[len++] = file_id % 256;		// file id lsb

	data[len++] = file_type;		// index type

	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions
	data[len++] = 0x00;		// access conditions

	data[len++] = 0x03;		// file status

	data[len++] = 0x03;		// length of following data

	data[len++] = 0x00;		// not used
	data[len++] = 0x00;		// not used
	data[len++] = 0x00;		// not used
	/* set ASN.1 data length */
	data[1] = len - 2;

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardVerify(BYTE pwd_type, BYTE *pwd)
/*********************************************************************/

{
	BYTE	hdr[4];
	BYTE	data[256];
	int		len; 
	int		exp_len;

	strcpy(Func, "IncardVerify");

	hdr[0] = 0xA0;
	hdr[1] = 0x20;
	hdr[2] = 0x00;
	hdr[3] = pwd_type;

	exp_len = 0;
	len = 8;

	memset(data, 0, len);
	strcpy(data, pwd);

	ExpResp = 0x90;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	IncardIntAuth(int key_num, char *data, int len)
/*********************************************************************/

{
	BYTE	hdr[4];
	int		exp_len;

	strcpy(Func, "IncardWrite");

	hdr[0] = 0xA0;
	hdr[1] = 0x88;
	hdr[2] = 0x00;
	hdr[3] = (BYTE)key_num;

	exp_len = 12;

	ExpResp = 0x9F;

	return sci_IssueCommand(CardHnd, hdr, len, data, exp_len);
}

/*********************************************************************/
static int	WaitForCard()
/*********************************************************************/

{
	MSG		msg;

	OutputDebugString("WaitForCard() entered\n");

	while (GetMessage( &msg, NULL, 0, 0 ))
	{
		if (msg.message == WM_USER + 21)
		{
			OutputDebugString("SCI event message received\n");

			return TRUE;
		}

		TranslateMessage( &msg ) ;
		DispatchMessage( &msg ) ;
	}

	OutputDebugString("WaitForCard() fails\n");

	return FALSE;
}
#endif	/* NO_CARD */
