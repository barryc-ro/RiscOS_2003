/*
** Description:		Protocol Handler Interface (PC Client MS-DOS/Windows Socket Library Version)
**
** Assumptions:		
** Notes:			
*/

#include <windows.h> 
#include <stdlib.h> 
#include <string.h>       
#include <stdio.h>   
#include <stdarg.h>
#include <time.h>
#include <limits.h>

#include <fcntl.h>
#include <sys\types.h>
#include <sys\stat.h>
#include <io.h>

#include "..\..\include\winsock.h"
#include "cam.h"
#include "ncas.h"

#ifndef PATH_MAX
#define PATH_MAX		256
#endif	/* PATH_MAX */

static int	G_trace;
static char dirName[PATH_MAX];
static char fileName[PATH_MAX];
static FILE	*G_trace_file_id;

static void	TimeStr(char *buff);

/****************************************************************/
int displayMessage(char *format, ...)
/****************************************************************/
{
	va_list ap;
	char buff[1024];

	va_start(ap, format);

	vsprintf(buff, format, ap);
	MessageBox((HWND)NULL, buff, "PHI-Library", MB_ICONINFORMATION);
	
	va_end(ap);
	
	return 0;
}            
    
/* This function is called from the LibMaib() startup function and should
	only be called once. It initialises the trace file instance table */
/******************************************************************/
void cam_InitTrace(char *dir_name)
/******************************************************************/
{
	G_trace_file_id = NULL;

	if (dir_name != NULL && strlen(dir_name))
	{
		G_trace = TRUE;
		strcpy(dirName, dir_name);
		if (dirName[strlen(dirName) - 1] == '\\')
			dirName[strlen(dirName) - 1] = '\0';
	}
	else
	{
		G_trace = FALSE;
	}

	return;
}

/******************************************************************/
int cam_OpenTraceFile()
/******************************************************************/
{                                                                     
#ifdef TRACING
	if (G_trace)
	{
		sprintf(fileName, "%s\\%s", dirName, NCAS_TRACE_FILE_NAME);

		/* displayMessage(">> TRACE fileName is <%s>", fileName); */
		G_trace_file_id = fopen(fileName, "w");
 	}
	
#endif	/* TRACING */
	return 0;
} 


/******************************************************************/
void cam_Trace(char *format, ...)
/******************************************************************/
{
#if (defined(_DEBUG) && defined(DEBUGGING)) || defined(TRACING)
    va_list ap;
    int		len;
	char	deb[256];

	va_start(ap, format);
   
	TimeStr(deb);
	len = strlen(deb);    
	len += vsprintf((deb + len), format, ap);               

   	va_end(ap);

	if (deb[len - 1] != '\n')
	{
		deb[len++] = '\n';
		deb[len] = '\0';
	}
#endif
               
#if defined(_DEBUG) && defined(DEBUGGING)
	OutputDebugString(deb);
#endif	/* DEBUGGING */

#ifdef TRACING
    if (G_trace && G_trace_file_id != NULL)
	{
		fprintf(G_trace_file_id, deb);               
		fflush(G_trace_file_id);
   	}
#endif	/* TRACING */

	return;
}

/******************************************************************/
void cam_Log(char *format, ...)
/******************************************************************/
{
#if (defined(_DEBUG) && defined(DEBUGGING)) || defined(TRACING) || defined(RUN_VISIBLE)
    va_list ap;
    int		len;
	char	deb[256];

	va_start(ap, format);
   
	TimeStr(deb);
	len = strlen(deb);    
	len += vsprintf((deb + len), format, ap);               

   	va_end(ap);

	if (deb[len - 1] != '\n')
	{
		deb[len++] = '\n';
		deb[len] = '\0';
	}
#endif
               
#if defined(_DEBUG) && defined(DEBUGGING)
	OutputDebugString(deb);
#endif	/* DEBUGGING */

#ifdef TRACING
    if (G_trace && G_trace_file_id != NULL)
	{
		fprintf(G_trace_file_id, deb);               
		fflush(G_trace_file_id);
   	}
#endif	/* TRACING */

#ifdef RUN_VISIBLE
	WriteCAMBlock(deb, len);
#endif	/* RUN_VISIBLE */

	return;
}

/******************************************************************/
void	cam_CloseTraceFile()
/******************************************************************/

{
#ifdef TRACING
	if (G_trace)
	{
		fclose(G_trace_file_id);
		G_trace_file_id = NULL;
	}

#endif	/* TRACING */
	return;
}

/******************************************************************/
int		StartTimer(HWND hWnd, LONG tim)
/******************************************************************/

{
	UINT	period;

	if (tim > ONE_MINUTE)
	{
		TimeToGo = tim - ONE_MINUTE;
		period = (UINT)ONE_MINUTE;
	}
	else
	{
		TimeToGo = 0;
		period = (UINT)tim;
	}

	if (SetTimer(hWnd, CAM_TIMER_ID, period, (TIMERPROC)NULL) == 0)
	{
		/* failed */
		TimeToGo = 0;
		return CAM_ERROR;
	}
	
	return CAM_OK;
}

/******************************************************************/
int		ContinueTimer(HWND hWnd)
/******************************************************************/

{
	UINT	period;

	if (TimeToGo > ONE_MINUTE)
	{
		TimeToGo -= ONE_MINUTE;
		period = (UINT)ONE_MINUTE;
	}
	else
	{
		period = (UINT)TimeToGo;
		TimeToGo = 0;
	}

	if (SetTimer(hWnd, CAM_TIMER_ID, period, (TIMERPROC)NULL) == 0)
	{
		/* failed */
		TimeToGo = 0;
		return CAM_ERROR;
	}
	
	return CAM_OK;
}

/******************************************************************/
int		CancelTimer(HWND hWnd)
/******************************************************************/

{
	KillTimer(hWnd, CAM_TIMER_ID);

	TimeToGo = 0;
	
	return CAM_OK;
}

/******************************************************************/
static void	TimeStr(char *buff)
/******************************************************************/

{
	time_t 		t;
	struct tm	*c_time;

	time(&t);
	c_time = localtime(&t);

	sprintf(buff, "%02d:%02d:%02d ",
			c_time->tm_hour, c_time->tm_min, c_time->tm_sec);

	return;
}
