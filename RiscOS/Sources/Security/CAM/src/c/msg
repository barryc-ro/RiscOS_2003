#include <windows.h>
#include <stdio.h>

#include "msg.h"

static void	FormatMsg(int msg_num, char	*msg, int msg_len);

/*************************************************************************/
void	DisplayMsg(HWND hWnd, int msg_num)
/*************************************************************************/

{
	char	msg[MAX_MSG_LEN];

	FormatMsg(msg_num, msg, MAX_MSG_LEN);

	MessageBox(hWnd, msg, ERR_BOX_HEAD,
			MB_APPLMODAL | MB_ICONEXCLAMATION | MB_OK);

	return;
}

/*************************************************************************/
static void	FormatMsg(int msg_num, char	*msg, int msg_len)
/*************************************************************************/

{
	char	raw_msg[MAX_MSG_LEN];
	char	*reason;
	int		i, j, n;
	int		len;

	/* use message number to get first part of text */
	switch (msg_num)
	{
		case MSG_CARD_ERR:
		case MSG_NC_AUT_ERR:
			reason = MSG_CARD;

			break;
		case MSG_NO_NCAS:
		case MSG_NCAS_AUT_ERR:
		case MSG_NCAS_DIS:
		case MSG_NCAS_LOST:
		case MSG_SOCK_ERR:
		case MSG_PDU_ERR:
		case MSG_SW_ERR:
		case MSG_SYS_ERR:
		default:
			reason = MSG_AUTH;

			break;
	}

	/* merge message parts taking care not to overflow the buffer */
	len = _snprintf(raw_msg, MAX_MSG_LEN, "%s %s %s%03d",
				reason, MSG_CONTACT, MSG_NUM_PREFIX, msg_num);

	/* buffer would have overflowed so set len to maximum */
	if (len < 0)
		len = MAX_MSG_LEN;

	/* allow for trailing NULL in output buffer */
	msg_len--;
	/* copy into output buffer replacing next space after line length
		by a newline.
		i indexes the input string, n counts the chars on the current line
		and j counts chars put into the output string
	*/
	for (i = j = n = 0; i < len && j < msg_len; i++)
	{
		if (raw_msg[i] == '\n' || (n > MSG_LINE_LEN && raw_msg[i] == ' '))
		{
			*msg++ = '\n';
			j++;
			n = 0;
		}
		else
		{
			n++;
			j++;
			*msg++ = raw_msg[i];
		}
	}
	*msg = '\0';

	return;
}
