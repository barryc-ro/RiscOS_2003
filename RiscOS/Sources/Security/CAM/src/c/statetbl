#include <windows.h>
#include <stdlib.h>
#include <string.h>
#include "sci_api.h"
#include "cam.h"
#include "ncas.h"
#include "msg.h"
#include "rnd.h"
#include "gch.h"

static int	State;
static BYTE	Rnd[MAX_PLAIN_LEN];
static BYTE	Srn[MAX_SRN_LEN];
static int	FailType;
static int	MsgNum;
static CARD_DATA	CardData;

/* functions indexed by the state table */
static int	NcasConnect(HWND hWnd, WORD wParam, LONG lParam);
static int	TriggerNcas(HWND hWnd, WORD wParam, LONG lParam);
static int	NoNcas(HWND hWnd, WORD wParam, LONG lParam);
static int	NcasOverInit(HWND hWnd, WORD wParam, LONG lParam);
static int	DoNcasOverInit(HWND hWnd, WORD wParam, LONG lParam);
static int	NcasDiscon(HWND hWnd, WORD wParam, LONG lParam);
static int	LostNcas(HWND hWnd, WORD wParam, LONG lParam);
static int	CamChallInit(HWND hWnd, WORD wParam, LONG lParam);
static int	DoCamChallInit(HWND hWnd, WORD wParam, LONG lParam);
static int	CamResponse(HWND hWnd, WORD wParam, LONG lParam);
static int	DoCamResponse(HWND hWnd, WORD wParam, LONG lParam);
static int	CamConnect(HWND hWnd, WORD wParam, LONG lParam);
static int	IgnorePdu(HWND hWnd, WORD wParam, LONG lParam);
static int	CloseIgnore(HWND hWnd, WORD wParam, LONG lParam);
static int	AllowChallenge(HWND hWnd, WORD wParam, LONG lParam);
static int	IgnoreAll(HWND hWnd, WORD wParam, LONG lParam);
static int	PduEvent(int type, int code, HWND hWnd, WORD wParam, LONG lParam);
static int	NcasStatusFailed(int code, HWND hWnd, WORD wParam, LONG lParam);

/* state table */

static int		(*state_fn[MAX_STATES][MAX_EVENTS])(HWND hWnd, WORD wParam, LONG lParam) =
{
/*							E_PDU_RCVD		E_CONN_RQ		E_CONN_CONF	E_NCAS_DISC		E_TIMER_EXP 	*/
/* S_CAM_CONN_INIT_PD	*/	NULL,			NcasConnect,	NULL,		NULL,			TriggerNcas,	/* S_CAM_CONN_INIT_PD */
/* S_CAM_CONN_PD		*/	NULL,			NcasConnect,	NULL,		CloseIgnore,	NoNcas,			/* S_CAM_CONN_PD */
/* S_NCAS_OVER_PD		*/	NcasOverInit,	NULL,			NULL,		NcasDiscon,		LostNcas,		/* S_NCAS_OVER_PD */
/* S_CAM_CHALLENGE_PD	*/	CamChallInit,	NULL,			NULL,		NcasDiscon,		LostNcas,		/* S_CAM_CHALLENGE_PD */
/* S_CAM_STATUS_PD		*/	CamResponse,	NULL,			NULL,		NcasDiscon,		LostNcas,		/* S_CAM_STATUS_PD */
/* S_NCAS_CONN_CONF_PD	*/	NULL,			NULL,			CamConnect,	CloseIgnore,	NoNcas,			/* S_NCAS_CONN_CONF_PD */
/* S_NO_CHALLENGE		*/	IgnorePdu,		NULL,			NULL,		NcasDiscon,		AllowChallenge,	/* S_NO_CHALLENGE */
/* S_FAILED				*/	IgnoreAll,		IgnoreAll,		IgnoreAll,	IgnoreAll,		IgnoreAll,		/* S_FAILED */
/*							E_PDU_RCVD		E_CONN_RQ		E_CONN_CONF	E_NCAS_DISC		E_TIMER_EXP 	*/
};

/*************************************************************************/
int	StateInit(HWND hWnd)
/*************************************************************************/

{
	int		len;

	cam_Log("StateInit() entered\n");

	if (gch_Open(hWnd, &CardData) != GCH_OK)
	{
		cam_Log("Failed to open smart card\n");

		return CAM_ERROR;
	}

	/* retrieve card serial number */
	if (gch_ReadSrn(Srn, MAX_SRN_LEN, &len) != GCH_OK)
	{
		cam_Log("Failed to read smart card serial number\n");

		return CAM_ERROR;
	}

	if (len != CardData.srn_len)
	{
		cam_Log("Smart card serial number length incorrect\n");

		return CAM_ERROR;
	}

	Srn[len] = '\0';
	cam_Log("Card serial number <%s>\n", Srn);

	State = S_CAM_CONN_INIT_PD;

	return CAM_OK;
}

/*************************************************************************/
int		InvokeStateFunc(int event, HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	/* to be sure, to be sure ! */
	if (event == 0 || event > MAX_EVENTS || State == 0 || State > MAX_STATES)
	{
		cam_Log("Invalid state table call, state %d, event %d\n",
					State, event);

		return CAM_ERROR;
	}

	/* event/state numbers start at 1 but table is indexed from 0 */
	event--;
	State--;

	if (state_fn[State][event] != NULL)
	{
		switch ((*state_fn[State][event])(hWnd, wParam, lParam))
		{
			case CAM_OK:
				return CAM_OK;

			case CAM_ERROR:
				break;

			case CAM_SOCK_ERR:
				MsgNum = MSG_SOCK_ERR;

				break;

 			case CAM_SYS_ERR:
				MsgNum = MSG_SYS_ERR;

				break;

			default:
				MsgNum = MSG_SW_ERR;

				break;
		}
	}
	else
	{
		MsgNum = MSG_SW_ERR;
		cam_Log("Invalid state table entry, state %d, event %d\n",
					State, event);
	}
	State = S_FAILED;

	cam_Trace("State function returns error, message number %d\n", MsgNum);

	DisplayMsg(hWnd, MsgNum);

	PostQuitMessage(CAM_ERROR);

	return CAM_OK;
}

/*************************************************************************/
static int	NcasConnect(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("NcasConnect() entered\n");

	// Accept the connection request
	if (ncas_ConnectionAccepted(hWnd, wParam, lParam) != CAM_OK)
		return CAM_SOCK_ERR;

	// Set timer for 10 secs
	if (StartTimer(hWnd, NCAS_FIRST_PDU_TIME) != CAM_OK)
	{
		PduEvent(EPDU_ERR, EPDU_SYS, hWnd, wParam, lParam);
		MsgNum = MSG_SYS_ERR;

		return CAM_ERROR;
	}

	// Enter state NCAS_OVER_PD
	State = S_NCAS_OVER_PD;

	return CAM_OK;
}

/*************************************************************************/
static int	NcasOverInit(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("NcasOverInit() entered\n");

	FailType = DoNcasOverInit(hWnd, wParam, lParam);

	cam_Trace("DoNcasOverInit() returned %d\n", FailType);

	switch (FailType)
	{
		case CAM_OK:
			/* Enter state CAM_CHALLENGE_PD */
			State = S_CAM_CHALLENGE_PD;
    
			return CAM_OK;

		case CAM_CARD_ERR:
			PduEvent(EPDU_ERR, EPDU_CARD, hWnd, wParam, lParam);
 			MsgNum = MSG_CARD_ERR;

			return CAM_ERROR;

		case CAM_SOCK_ERR:
			MsgNum = MSG_SOCK_ERR;

			return CAM_ERROR;

		case CAM_SYS_ERR:
			PduEvent(EPDU_ERR, EPDU_SYS, hWnd, wParam, lParam);
			MsgNum = MSG_SYS_ERR;

			return CAM_ERROR;

		default:
			PduEvent(EPDU_ERR, EPDU_SW, hWnd, wParam, lParam);
			MsgNum = MSG_SW_ERR;

			return CAM_ERROR;
	}
}

/*************************************************************************/
static int	DoNcasOverInit(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	out_pdu[PDU_MAX_LEN];
	BYTE	*out_adu_ptr;
	int		out_pdu_len;

	BYTE	in_pdu[PDU_MAX_LEN];

	int		key_num;
	BYTE	crypt_chl[MAX_CYPHR_LEN];
	int		len;

	cam_Trace("DoNcasOverInit() entered\n");

	if ((len = ncas_ReceiveData(in_pdu, PDU_DATA_LEN)) == CAM_ERROR)
		return CAM_SOCK_ERR;
	if (len == 0)
		return CAM_OK;

	//Check PDU is type PDU_NCAS_INIT. If not generate a PDU_ERROR PDU
	if (in_pdu[0] != PDU_NCAS_INIT)
		return PduEvent(EPDU_ERR, EPDU_SEQ, hWnd, wParam, lParam);

	/* should store THE NCAS overture details, but I don't know what for! */

	/* Generate 8 byte block of random data (Rnd),
		held as static so available for future use */
	rnd_GenerateStr(Rnd, MAX_PLAIN_LEN);

	/* Randomly generate key number Kn in the range 0 - 7 (incl),
		held as static so available for future use */
	key_num = rnd_GenerateKey(CardData.key_lower, CardData.key_upper);
    
    cam_Trace("My original plain text challenge with key %d to %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		Rnd[0], Rnd[1], Rnd[2], Rnd[3],
		Rnd[4], Rnd[5], Rnd[6], Rnd[7]);

	/* Assemble an internal authenticate command for the card using Rnd
		as the data and Kn as the key number and send to the card,
		wait for the response */
	if (gch_IntAuth(Rnd, CardData.plain_len, key_num, crypt_chl, CardData.enc_len,
				&len) != CAM_OK)
		return CAM_CARD_ERR;

	cam_Trace("IntAuth encrypted with key %d to %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		crypt_chl[0], crypt_chl[1], crypt_chl[2], crypt_chl[3],
		crypt_chl[4], crypt_chl[5], crypt_chl[6], crypt_chl[7]);

	if (len != CardData.enc_len)
		return CAM_CARD_ERR;

	out_pdu_len = 0;
	out_adu_ptr = out_pdu + PDU_HDR_LEN;
	memcpy(out_adu_ptr + ADU_LEN_LEN, crypt_chl, len);
	*(out_adu_ptr + len + ADU_LEN_LEN) = key_num;
	/* increment PDU length by ADU length */
	out_pdu_len += (len + KEY_NUM_LEN + ADU_LEN_LEN);
	/* set ADU length to encrypted challenge length plus 1 for key */
 	*out_adu_ptr = len + KEY_NUM_LEN;
	/* out_adu_ptr move on to position where next ADU will be built */
	out_adu_ptr += (len + KEY_NUM_LEN + ADU_LEN_LEN);

	/* set ADU length */
	*out_adu_ptr++ = CardData.srn_len + ADU_VER_LEN + ADU_VER_LEN;
	*out_adu_ptr++ = MAJOR_VERSION;
	*out_adu_ptr++ = MINOR_VERSION;
	
	memcpy(out_adu_ptr, Srn, CardData.srn_len);

	out_pdu_len += CardData.srn_len + ADU_LEN_LEN + ADU_VER_LEN + ADU_VER_LEN;
	out_pdu[PDU_TYPE_POS] = PDU_CAM_INIT; 
	out_pdu[PDU_LEN_POS] = out_pdu_len / 256;
	out_pdu[PDU_LEN_POS + 1] = out_pdu_len % 256;

	if (ncas_SendData(out_pdu, out_pdu_len + PDU_HDR_LEN) != CAM_OK)
		return CAM_SOCK_ERR;

	// Set timer for 10 secs
	if (StartTimer(hWnd, NCAS_PDU_TIME) != CAM_OK)
		return CAM_SYS_ERR;
    
	return CAM_OK;
}

/*************************************************************************/
static int	CamChallInit(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("CamChallInit() entered\n");

	FailType = DoCamChallInit(hWnd, wParam, lParam);

	cam_Trace("DoCamChallInit() returned %d\n", FailType);

	switch (FailType)
	{
		case CAM_OK:
			/* Enter state CAM_CHALLENGE_PD */
			State = S_CAM_STATUS_PD;
    
			return CAM_OK;

		case CAM_CARD_ERR:
			NcasStatusFailed(EPDU_CARD, hWnd, wParam, lParam);
			MsgNum = MSG_CARD_ERR;

			break;

		case CAM_SOCK_ERR:
			MsgNum = MSG_SOCK_ERR;

			break;

 		case CAM_SYS_ERR:
			NcasStatusFailed(EPDU_SYS, hWnd, wParam, lParam);
			MsgNum = MSG_SYS_ERR;

			break;

 		case CAM_NCAS_AUT_ERR:
			NcasStatusFailed(EPDU_AUT, hWnd, wParam, lParam);
			MsgNum = MSG_NCAS_AUT_ERR;

			break;

 		case CAM_FMT_ERR:
			PduEvent(EPDU_ERR, EPDU_SEQ, hWnd, wParam, lParam);
			MsgNum = MSG_PDU_ERR;

			break;

 		case CAM_SEQ_ERR:
			PduEvent(EPDU_ERR, EPDU_FORMAT, hWnd, wParam, lParam);
			MsgNum = MSG_PDU_ERR;

			break;

		default:
			NcasStatusFailed(EPDU_SW, hWnd, wParam, lParam);
			MsgNum = MSG_SW_ERR;

			break;
	}

	return CAM_ERROR;
}

/*************************************************************************/
static int	DoCamChallInit(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	out_pdu[PDU_MAX_LEN];
	BYTE	*out_adu_ptr;
	int		out_pdu_len;

	BYTE	in_pdu[PDU_MAX_LEN];
	BYTE	*in_adu_ptr;
	int		in_pdu_len;
	int		in_adu_len;

	BYTE	crypt_chl[MAX_CYPHR_LEN];
	int		len;
	int		key_num;

	cam_Trace("DoCamChallInit() entered\n");

	if ((len = ncas_ReceiveData(in_pdu, PDU_DATA_LEN)) == CAM_ERROR)
		return CAM_SOCK_ERR;
 	if (len == 0)
		return CAM_OK;

	//Check PDU is type PDU_NCAS_INIT. If not generate a PDU_ERROR PDU
	if (in_pdu[0] != PDU_CAM_CHALL)
		return CAM_SEQ_ERR;

	in_pdu_len = (int)in_pdu[1] * 256;
	in_pdu_len += (int)in_pdu[2];
	in_adu_ptr = in_pdu + PDU_HDR_LEN;
	in_adu_len = (int)*in_adu_ptr++;
	/* adu_ptr now points at first byte of input ADU data */

	if (in_adu_len != CardData.enc_len + KEY_NUM_LEN)
		return CAM_FMT_ERR;

	key_num = (int)*(in_adu_ptr + in_adu_len - 1);

	cam_Trace("Encrypting response to my challenge\n");
	cam_Trace("IntAuth with key %d on %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		*in_adu_ptr, *(in_adu_ptr + 1), *(in_adu_ptr + 2), *(in_adu_ptr + 3),
		*(in_adu_ptr + 4), *(in_adu_ptr + 5), *(in_adu_ptr + 6), *(in_adu_ptr + 7));
	/* Assemble an internal authenticate command for the card using Rnd
		as the data and Kn as the key number and send to the card,
		wait for the response */
	if (gch_IntAuth(Rnd, CardData.plain_len, key_num, crypt_chl,
							MAX_CYPHR_LEN, &len) != CAM_OK)
		return CAM_CARD_ERR;

	cam_Trace("IntAuth encrypted with key %d to %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		crypt_chl[0], crypt_chl[1], crypt_chl[2], crypt_chl[3],
		crypt_chl[4], crypt_chl[5], crypt_chl[6], crypt_chl[7]);

	if (len != CardData.enc_len)
		return CAM_CARD_ERR;

	if (memcmp(crypt_chl, in_adu_ptr, len) != 0)
	{
		cam_Log("Response from NCAS does NOT match encryption of original\n");

		return CAM_NCAS_AUT_ERR;
	}
	cam_Trace("Response from NCAS MATCHES encryption of original\n");

	out_adu_ptr = out_pdu + PDU_HDR_LEN;
	*out_adu_ptr++ = ADU_STATUS_LEN;
	*out_adu_ptr++ = NCAS_STATUS_OK;
	out_pdu_len = ADU_STATUS_LEN + ADU_LEN_LEN;
	in_adu_ptr += in_adu_len;
	in_adu_len = (int)*in_adu_ptr++;
	
	if (in_adu_len != CardData.enc_len + KEY_NUM_LEN)
		return CAM_FMT_ERR;

	key_num = (int)*(in_adu_ptr + in_adu_len - 1);

	cam_Trace("Encrypting NCAS challenge with its key\n");
	cam_Trace("IntAuth with key %d on %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		*in_adu_ptr, *(in_adu_ptr + 1), *(in_adu_ptr + 2), *(in_adu_ptr + 3),
		*(in_adu_ptr + 4), *(in_adu_ptr + 5), *(in_adu_ptr + 6), *(in_adu_ptr + 7));
	/* Assemble an internal authenticate command for the card using Rnd
		as the data and Kn as the key number and send to the card,
		wait for the response */
	if (gch_IntAuth(in_adu_ptr, CardData.plain_len, key_num, crypt_chl, MAX_CYPHR_LEN,
				&len) != CAM_OK)
		return CAM_CARD_ERR;

	cam_Trace("IntAuth encrypted with key %d to %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		crypt_chl[0], crypt_chl[1], crypt_chl[2], crypt_chl[3],
		crypt_chl[4], crypt_chl[5], crypt_chl[6], crypt_chl[7]);

	if (len != CardData.enc_len)
		return CAM_CARD_ERR;

	/* Randomly generate key number Kn in the range 0 - 7 (incl),
		held as static so available for future use */
	key_num = rnd_GenerateKey(KEY_LOWER, KEY_UPPER);

	cam_Trace("Encrypting again with my key %d\n", key_num);

	/* Assemble an internal authenticate command for the card using Rnd
		as the data and Kn as the key number and send to the card,
		wait for the response */
	if (gch_IntAuth(crypt_chl, len, key_num, crypt_chl, MAX_CYPHR_LEN,
				&len) != CAM_OK)
		return CAM_CARD_ERR;

	cam_Trace("IntAuth encrypted with key %d to %02X %02X %02X %02X %02X %02X %02X %02X\n",
		key_num,
		crypt_chl[0], crypt_chl[1], crypt_chl[2], crypt_chl[3],
		crypt_chl[4], crypt_chl[5], crypt_chl[6], crypt_chl[7]);

	if (len != CardData.enc_len)
		return CAM_CARD_ERR;

	memcpy(out_adu_ptr + ADU_LEN_LEN, crypt_chl, len);
	*(out_adu_ptr + len + ADU_LEN_LEN) = key_num;
	/* ADU length is encrypted challenge length plus 1 for key */
	*out_adu_ptr = len + KEY_NUM_LEN;
	/* copy ADU to PDU */
	out_pdu_len += len + ADU_LEN_LEN + KEY_NUM_LEN;
	out_pdu[PDU_TYPE_POS] = PDU_CAM_RESP; 
	out_pdu[PDU_LEN_POS] = out_pdu_len / 256;
	out_pdu[PDU_LEN_POS + 1] = out_pdu_len % 256;

	if (ncas_SendData(out_pdu, out_pdu_len + PDU_HDR_LEN) != CAM_OK)
		return CAM_SOCK_ERR;

	// Set timer for 10 secs
	if (StartTimer(hWnd, NCAS_PDU_TIME) != CAM_OK)
		return CAM_SYS_ERR;
    
	return CAM_OK;
}

/*************************************************************************/
static int	CamResponse(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("CamResponse() entered\n");

	FailType = DoCamResponse(hWnd, wParam, lParam);

	cam_Trace("DoCamResponse() returned %d\n", FailType);

	switch (FailType)
	{
		case CAM_OK:
			/* Enter state CAM_CHALLENGE_PD */
			State = S_NO_CHALLENGE;
    
			return CAM_OK;

		case CAM_SOCK_ERR:
			MsgNum = MSG_SOCK_ERR;

			break;

 		case CAM_SYS_ERR:
			PduEvent(EPDU_ERR, EPDU_SYS, hWnd, wParam, lParam);
			MsgNum = MSG_SYS_ERR;

			break;

 		case CAM_NCAS_AUT_ERR:
			MsgNum = MSG_NC_AUT_ERR;

			break;

 		case CAM_FMT_ERR:
			PduEvent(EPDU_ERR, EPDU_SEQ, hWnd, wParam, lParam);
			MsgNum = MSG_PDU_ERR;

			break;

 		case CAM_SEQ_ERR:
			PduEvent(EPDU_ERR, EPDU_FORMAT, hWnd, wParam, lParam);
			MsgNum = MSG_PDU_ERR;

			break;

		default:
			PduEvent(EPDU_ERR, EPDU_SW, hWnd, wParam, lParam);
			MsgNum = MSG_SW_ERR;

			break;
	}

	return CAM_ERROR;
}

/*************************************************************************/
static int	DoCamResponse(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	in_pdu[PDU_MAX_LEN];
	BYTE	*in_adu_ptr;
	int		in_pdu_len;
	int		in_adu_len;
	int		len;

	cam_Trace("DoCamResponse() entered\n");

	if ((len = ncas_ReceiveData(in_pdu, PDU_DATA_LEN)) == CAM_ERROR)
		return CAM_SOCK_ERR;
 	if (len == 0)
		return CAM_OK;

	//Check PDU is type PDU_NCAS_INIT. If not generate a PDU_ERROR PDU
	if (in_pdu[0] != PDU_CAM_STATUS)
		return CAM_SEQ_ERR;

	in_pdu_len = (int)in_pdu[1] * 256;
	in_pdu_len += (int)in_pdu[2];
	in_adu_ptr = in_pdu + PDU_HDR_LEN;
	in_adu_len = (int)*in_adu_ptr++;
	/* adu_ptr now points at first byte of input ADU data */

	if (in_adu_len != ADU_STATUS_LEN)
		return CAM_FMT_ERR;

	if (*in_adu_ptr != CAM_STATUS_OK)
		return CAM_NCAS_AUT_ERR;

	// Set timer for 2 mins
	if (StartTimer(hWnd, NCAS_NO_CHL_TIME) != CAM_OK)
		return CAM_SYS_ERR;
    
	cam_Log("Challenge sequence completed successfully\n");
	cam_Log("Challenge cannot be accepted for %d seconds\n", NCAS_NO_CHL_TIME / 1000);

	return CAM_OK;
}

/*************************************************************************/
 static int	AllowChallenge(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("AllowChallenge() entered\n");

 	// Set timer for 3 mins
	if (StartTimer(hWnd, NCAS_NEXT_CHL_TIME) != CAM_OK)
	{
		PduEvent(EPDU_ERR, EPDU_SYS, hWnd, wParam, lParam);
		MsgNum = MSG_SYS_ERR;

		return CAM_ERROR;
	}
    
	cam_Log("Next challenge must be issued within %d seconds\n",
					NCAS_NEXT_CHL_TIME / 1000);

	State = S_NCAS_OVER_PD;

	return CAM_OK;
}

/*************************************************************************/
static int	IgnorePdu(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	in_pdu[PDU_MAX_LEN];

	cam_Log("IgnorePdu() entered\n");

	/* read any data and ignore */
	if (ncas_ReceiveData(in_pdu, PDU_DATA_LEN) == CAM_ERROR)
		return CAM_SOCK_ERR;

	/* No state change, still waiting for timer to go off to
		indicate we can accept challenges */

	return CAM_OK;
}

/*************************************************************************/
static int	CloseIgnore(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("CloseIgnore() entered\n");

	/* NCAS has closed the trigger socket */

	return CAM_OK;
}

/*************************************************************************/
static int	TriggerNcas(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	cam_Log("TriggerNcas() entered\n");

	if (ncas_Connect() != CAM_OK)
		return CAM_SOCK_ERR;

	if (StartTimer(hWnd, NCAS_CONNECT_TIME) != CAM_OK)
	{
		PduEvent(EPDU_ERR, EPDU_SYS, hWnd, wParam, lParam);
		MsgNum = MSG_SYS_ERR;

		return CAM_ERROR;
	}
    
	State = S_NCAS_CONN_CONF_PD;

	return CAM_OK;
}

/*************************************************************************/
static int	CamConnect(HWND hWnd, WORD wParam, LONG lParam)
/*
	The connection to the NCAS to alert it of our presence has completed,
	disconnect immediately and await a connection request from NCAS.
 */
/*************************************************************************/

{
	cam_Log("CamConnect() entered\n");

	if (ncas_Disconnect(FALSE, TRUE) != CAM_OK)
		return CAM_SOCK_ERR;

	if (StartTimer(hWnd, NCAS_LISTEN_TIME) != CAM_OK)
   		return CAM_SYS_ERR;
    
	State = S_CAM_CONN_PD;

	return CAM_OK;
}

/*************************************************************************/
static int	NcasDiscon(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/
/*
	The NCAS has disconnected us so we disconnect and quit
*/
{
	cam_Log("NcasDiscon() entered\n");

	ncas_Disconnect(TRUE, TRUE);

	MsgNum = MSG_NCAS_DIS;

	return CAM_ERROR;
}

/*************************************************************************/
static int	LostNcas(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/
/*
	A socket read operation has timed out. Assume the NCAS has a
	problem and disconnect.
*/
{
	cam_Log("LostNcas() entered\n");

	ncas_Disconnect(TRUE, FALSE);

	MsgNum = MSG_NCAS_LOST;

	return CAM_ERROR;
}

/*************************************************************************/
static int	NoNcas(HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
/*
	Either the NCAS failed to connect to the CAM or the CAM failed to
	connect to the NCAS. Assume NCAS has a problem.
*/
	cam_Log("NoNcas() entered\n");

	ncas_Disconnect(TRUE, TRUE);

	MsgNum = MSG_NO_NCAS;

	return CAM_ERROR;
}

/*************************************************************************/
static int	PduEvent(int type, int code, HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	pdu[PDU_MAX_LEN];
	BYTE	*pdu_ptr;
	int		pdu_len;

	cam_Log("PduEvent() entered\n");

	pdu_len = ADU_STATUS_LEN + ADU_STATUS_LEN;
	pdu_ptr = pdu + PDU_HDR_LEN;
	*pdu_ptr++ = (BYTE)type;
	*pdu_ptr++ = (BYTE)code;

	pdu[PDU_TYPE_POS] = PDU_EVENT; 
	pdu[PDU_LEN_POS] = pdu_len / 256;
	pdu[PDU_LEN_POS + 1] = pdu_len % 256;

	if (ncas_SendData(pdu, pdu_len + PDU_HDR_LEN) != CAM_OK)
		return CAM_SOCK_ERR;

	/* only set timer if a warning, after errors we bomb out */
	if (type == EPDU_WARN)
	{
		// Set timer for 10 secs
		if (StartTimer(hWnd, NCAS_PDU_TIME) != CAM_OK)
			return CAM_SYS_ERR;
	}
    
	return CAM_OK;
}

/*************************************************************************/
static int	NcasStatusFailed(int code, HWND hWnd, WORD wParam, LONG lParam)
/*************************************************************************/

{
	BYTE	pdu[PDU_MAX_LEN];
	BYTE	*pdu_ptr;
	int		pdu_len;

	cam_Log("NcasStatusFailed() entered\n");

	/* pdu length is 1 byte for first adu length, 1 byte for status
		and 1 byte for second adu len */
	pdu_len = ADU_LEN_LEN + ADU_STATUS_LEN + ADU_LEN_LEN;
	pdu_ptr = pdu + PDU_HDR_LEN;
	/* adu length */
	*pdu_ptr++ = ADU_STATUS_LEN;
	*pdu_ptr++ = (BYTE)code;
	/* second ADU is empty so length is 0 */
	*pdu_ptr = 0;

	pdu[PDU_TYPE_POS] = PDU_CAM_INIT; 
	pdu[PDU_LEN_POS] = pdu_len / 256;
	pdu[PDU_LEN_POS + 1] = pdu_len % 256;

	if (ncas_SendData(pdu, pdu_len + PDU_HDR_LEN) != CAM_OK)
		return CAM_SOCK_ERR;

	return CAM_OK;
}

/*************************************************************************/
static int	IgnoreAll(HWND hWnd, WORD wParam, LONG lParam)
/*
	The purpose of this function is to trap and ignore any events
	which occur after a previous error.
*/
/*************************************************************************/

{
	BYTE	in_pdu[PDU_MAX_LEN];

	cam_Log("IgnoreAll() entered\n");

	CancelTimer(hWnd);

	/* read any data and ignore */
	ncas_ReceiveData(in_pdu, PDU_DATA_LEN);

	ncas_Disconnect(TRUE, TRUE);

	return CAM_OK;
}

/*************************************************************************/
void	StateClose(void)
/*************************************************************************/

{
	cam_Log("StateClose() entered\n");

	gch_Close();

	return;
}
