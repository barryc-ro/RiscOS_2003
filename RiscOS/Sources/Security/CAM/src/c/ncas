/*
** File			ncas.c
** System		Oracle Network Computer Client Authentication Module(CAM)
** Description:	This file contains the code to interface to the Network
**				Computer Authentication Server (NCAS) using Windows Sockets
**
** Assumptions:		
** Notes:			
*/

#include <windows.h> 
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <errno.h>
#include <limits.h>
#include <fcntl.h>
#include <sys\stat.h>
#include <io.h>

#include <winsock.h>
#include "ncas.h"
#include "cam.h"

static SOCKET	TrigSock;
static SOCKET	AuthSock;

static int		ConnectSock(char *host, char *service, char *protocol);
static int		StartListening(char *service, char *protocol);
static void		SetSocketOptions(SOCKET s);
static void		ReportSocketOptions(SOCKET s);

/*******************************************************************/
int		ncas_Disconnect(BOOL aut, BOOL trigger)
/*******************************************************************/
{
	if (aut && closesocket(AuthSock) == SOCKET_ERROR)
	{
		cam_Log("closesocket(AuthSock) failed, code %d", WSAGetLastError());

		return CAM_ERROR;
	}   

	if (trigger && closesocket(TrigSock) == SOCKET_ERROR)
	{
		cam_Log("closesocket(TrigSock) failed, code %d", WSAGetLastError());

		return CAM_ERROR;
	}   

	return CAM_OK;
}

/*******************************************************************/
int		ncas_Connect(void)
/*******************************************************************/
{
	if (ConnectSock(NcasHost, NCAS_DAEMON_SERVICE, NCAS_TCP_PROTO) == CAM_ERROR)
	{
		ncas_SocklTerm();

		return(CAM_ERROR);
	}

	return CAM_OK;
}

/*******************************************************************/
/* returns number of bytes received from connection */            
int		ncas_ReceiveData(BYTE *data_buffer, int buff_len)
/*******************************************************************/
{   
	int		n;
	int		bytesRead;
	int		read_size;
	BYTE	*ptr;

	cam_Trace("receiveData() entered\n");	

	/* turn off non-blocking mode so we get all remaining fragments in one
		go set new socket asynch to report to NCAS internal window */
	if (WSAAsyncSelect(AuthSock, ncas_Window, 0, 0) == SOCKET_ERROR)
	{
		OutputDebugString("WSAAsyncSelect() to reset blocking failed\n");
		cam_Trace("WSAAsyncSelect() failed to reset blocking socket: %s %d\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}
	
	n = recv(AuthSock, data_buffer, PDU_HDR_LEN, NO_FLAGS_SET);
	if (n == SOCKET_ERROR)
	{
		if (WSAGetLastError() == WSAEWOULDBLOCK)
		{
			/* no data, assume FD_READ event received after data read */
			cam_Trace("receiveData() on header received WSAEWOULDBLOCK\n");

			return 0;
		}
		else
		{
			cam_Trace("receiveData() on header failed, code is %d\n",
							WSAGetLastError());

			return CAM_ERROR;
		}
	}
	/* PDU type received first in 1 byte then 2 byte PDU len (msb then lsb) */
	read_size = (int)*(data_buffer + 1) * 256;
	read_size += (int)*(data_buffer + 2);

	cam_Trace("receiveData() read header, data length to follow is %d\n",
							read_size);
	if (read_size > buff_len)
		return CAM_ERROR;

	bytesRead = 0;
	ptr = data_buffer + PDU_HDR_LEN;
	while (bytesRead < read_size)
	{
		read_size -= bytesRead;
		cam_Trace("about to recv()  read_size is %d\n", read_size);
		n = recv(AuthSock, ptr, read_size, NO_FLAGS_SET);
		cam_Trace("recv() returns length %d\n", n);
		if (n == SOCKET_ERROR || n == 0)
		{
			cam_Trace("receiveData() failed on data, return %d, code %d\n",
						n, WSAGetLastError());

			return CAM_ERROR;
		}
		bytesRead += n;
		ptr += n;
	}  /* end while */

	/* set new socket asynch to report to NCAS internal window */
	if (WSAAsyncSelect(AuthSock, ncas_Window, ncas_Msg,
					FD_READ | FD_CLOSE) == SOCKET_ERROR)
	{
		OutputDebugString("WSAAsyncSelect() reset read etc failed\n");
		cam_Trace("WSAAsyncSelect() failed to reset socket: %s %d\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}
	
	cam_Trace("receiveData() finished length is %d\n", bytesRead);	

	return bytesRead;
} 

/*******************************************************************/
/* send number of bytes recevied to connection */            
int		ncas_SendData(BYTE *data_buffer, int len)
/*******************************************************************/
{  
	int 	numberOfBytesToSend;
	int		n;
	BYTE	*ptr;

	cam_Trace("sendData() entered, length is %d\n", len);

	numberOfBytesToSend = len;
	ptr = data_buffer;

	while (numberOfBytesToSend > 0)
	{ 
		n = send(AuthSock, ptr, numberOfBytesToSend, NO_FLAGS_SET); 
		if (n == SOCKET_ERROR)
		{
			cam_Trace("sendData() failed on data, code is %d\n",
						WSAGetLastError());

			return CAM_ERROR;
		}                    
		numberOfBytesToSend -= n;  /* sent n bytes */
		ptr += n;
	}  /* end while */
	cam_Trace("sendData() finished length sent %d\n", len);	

	return 0;
}

/*******************************************************************/
int	ncas_ConnectionAccepted(HWND hWnd, WORD wParam, LONG lParam)
/*******************************************************************/
{
	SOCKET				sock;
	struct sockaddr_in	sin;
	char				*ptr;

	cam_Trace("ConnectionAccepted() entered\n");

	if ((sock = accept((SOCKET)wParam, (struct sockaddr *)&sin,
					(int *)NULL)) == INVALID_SOCKET)
	{
		cam_Log("Second accept() failed: %s(%d)\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}
	ptr = (char *)&sin.sin_addr;
	cam_Trace("Connection accepted from host address %u.%u.%u.%u\n",
				((unsigned)*ptr) & 0xFF, ((unsigned)*(ptr + 1)) & 0xFF,
				((unsigned)*(ptr + 2)) & 0xFF, ((unsigned)*(ptr + 3)) & 0xFF);
	cam_Log("Connection accepted from NCAS server\n");

	cam_Trace("accepted connection on new socket %d, closing socket %d\n",
					sock, (int)wParam);
	/* don't need the listener socket any more so close it */
	if (closesocket((SOCKET)wParam) == SOCKET_ERROR)
	{
		cam_Log("closesocket() on listener failed, code %d", WSAGetLastError());

		return CAM_ERROR;
	}   

	/* set new socket asynch to report to NCAS internal window */
	if (WSAAsyncSelect(sock, hWnd, ncas_Msg, FD_READ | FD_CLOSE) ==
					SOCKET_ERROR)
	{
		cam_Log("WSAAsyncSelect() failed on connected socket: %s %d\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}
	/* don't really need to remember socket id as it is returned with
		each socket event */
	AuthSock = sock;

	cam_Trace("ConnectionAccepted() OK\n");

	return CAM_OK;
}

/*******************************************************************/
int		ncas_StartListener(char *service)
/*******************************************************************/
{
	SOCKET	s;

	cam_Trace("Calling StartListening()\n");

	if ((s = StartListening(service, NCAS_TCP_PROTO)) == (SOCKET)CAM_ERROR)
	{
		cam_Log("StartListening()failed\n");
		ncas_SocklTerm();
		return(CAM_ERROR);
	}

	return(CAM_OK);
}

/****************************************************************/
int	ncas_InitSockets()
/****************************************************************/

{
	WSADATA		wsaData;
	WORD		wVersionRequested;

	/* initialise sockets */
	wVersionRequested = MAKEWORD(MAJOR_VERSION, MINOR_VERSION);

	if (WSAStartup(wVersionRequested, (LPWSADATA)&wsaData) != 0)
	{
		MessageBox((HWND)NULL, "Cannot find a useable WINSOCK.DLL", "socklc",
						MB_ICONSTOP);
		cam_Log("WSAStartup failed, error code %d\n", WSAGetLastError());

		return SOCKL_ERROR;	
	}

	cam_Log("Socket Library Started, <%s>\n", wsaData.szDescription);

	return CAM_OK;
}

/****************************************************************/
int		ncas_SocklTerm()
/****************************************************************/
{         
	int err;                          
	char str[256];

	closesocket(AuthSock);
	closesocket(TrigSock);

	err = WSACleanup(); 
	if (err != 0)
	{             
		sprintf(str, "WSACleanup() failed, code is %d", WSAGetLastError());

		return -1;
	}

	return 0;
}

/*******************************************************************/
static int	ConnectSock(char *host, char *service, char *protocol)
/*******************************************************************/
{
	LPHOSTENT			phe;
	LPSERVENT			pse;
	LPPROTOENT			ppe;
	struct sockaddr_in	sin;
	int					type;
	SOCKET				s;
	char				*ptr;

	memset(&sin, 0, sizeof(sin));
	sin.sin_family = AF_INET;

	if (pse = getservbyname((char *)service, (char *)protocol))
	{
		sin.sin_port = pse->s_port;
	}
	else if ((sin.sin_port = htons((u_short)atoi(service))) == 0)
	{
		cam_Log("Can't get <%s> service entry\n", service);

		return CAM_ERROR;
	}

	if (phe = gethostbyname(host))
		memcpy(&sin.sin_addr, phe->h_addr_list[0], phe->h_length);
	else if ((sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE)
	{
		cam_Log("Can't get <%s> host entry\n", host);

		return CAM_ERROR;
	}
	ptr = (char *)&sin.sin_addr;
	cam_Log("Connecting to host %s, address %u.%u.%u.%u,\n\tPort %s, number %d\n",
				host,
				((unsigned)*ptr) & 0xFF, ((unsigned)*(ptr + 1)) & 0xFF,
				((unsigned)*(ptr + 2)) & 0xFF, ((unsigned)*(ptr + 3)) & 0xFF,
				service,
				ntohs(sin.sin_port));

	if ((ppe = getprotobyname(protocol)) == NULL)
	{
		cam_Log("Can't get <%s> protocol entry\n", protocol);

		return CAM_ERROR;
	}

	if (strcmp(protocol, "udp") == 0)
	{
		type = SOCK_DGRAM;
	}
	else
	{
		/* must be tcp */
		type = SOCK_STREAM;
	}

	s = socket(PF_INET, type, ppe->p_proto);
	if (s == SOCKET_ERROR) 
	{
		cam_Log("Can't create socket: %s(%d)\n", "WSAGetLast", WSAGetLastError());

		return CAM_ERROR;
	}

	if (WSAAsyncSelect(s, ncas_Window, ncas_Msg, FD_CONNECT | FD_CLOSE) ==
							SOCKET_ERROR)
	{
		OutputDebugString("WSAAsyncSelect() for FD_CONNECT failed\n");
		cam_Log("WSAAsyncSelect() failed: %s(%d)\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}

	/* setSocketOptions(s); */

	cam_Log("Connecting on socket %d\n", s);
	if (connect(s, (PSOCKADDR)&sin, sizeof(sin)) == SOCKET_ERROR)
	{
		if (WSAGetLastError() == WSAEWOULDBLOCK)
		{
			/* no data, assume FD_READ event received after data read */
			cam_Trace("connect() on trigger socket received WSAEWOULDBLOCK\n");
		}
		else
		{
			cam_Log("Can't connect to %s.%s: %s(%d)\n",
					host, service, "WSAGetLastError", WSAGetLastError());

			return CAM_ERROR;
		}
	}
	TrigSock = s;

	return CAM_OK;
}

/*******************************************************************/
static int	StartListening(char *service, char *protocol)
/*******************************************************************/
{
	LPSERVENT			pse;
	LPPROTOENT			ppe;
	struct sockaddr_in	sin;
	int					type;
	SOCKET				l_s;	/* socket to listen() on */

	OutputDebugString("StartListening() entered\n");
	/* initialise address structure using Internet protocol family */
	memset(&sin, 0, sizeof(sin));
	sin.sin_family = AF_INET;

	/* get port address from service name */
	if (pse = getservbyname(service, protocol))
	{
		sin.sin_port = pse->s_port;
	}
	/* assume service is actual port number */
	else if ((sin.sin_port = htons((u_short)atoi(service))) == 0)
	{
		cam_Log("Can't get service entry\n");

		return CAM_ERROR;
	}
	/* don't care which machine connects to us */
	sin.sin_addr.S_un.S_addr = INADDR_ANY;

	/* get protocol data */
	if ((ppe = getprotobyname(protocol)) == NULL)
	{
		cam_Log("Can't get protocol entry\n");

		return CAM_ERROR;
	}

	if (strcmp(protocol, "udp") == 0)
	{
		type = SOCK_DGRAM;
	}
	else
	{
		/* must be tcp */
		type = SOCK_STREAM;
	}

	/* create socket */
	OutputDebugString("calling socket()\n");
	l_s = socket(PF_INET, type, ppe->p_proto);
	if (l_s == INVALID_SOCKET) 
	{
		cam_Log("Can't create socket: %s(%d)\n", "WSAGetLast", WSAGetLastError());

		return CAM_ERROR;
	}

	/* bind socket to protocol and port number */
	OutputDebugString("calling bind()\n");
	if (bind(l_s, (struct sockaddr *)&sin, sizeof(sin)) == SOCKET_ERROR)
	{
		cam_Log("Can't bind(): %s(%d)\n", "WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}

	/* setSocketOptions(s); */

	OutputDebugString("calling WSAAsyncSelect() for FD_ACCEPT\n");
	if (WSAAsyncSelect(l_s, ncas_Window, ncas_Msg, FD_ACCEPT) ==
							SOCKET_ERROR)
	{
		cam_Log("WSAAsyncSelect() failed: %s(%d)\n",
					"WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}

	/* listen for incoming connection */
	cam_Log("Listening on port %s, number %d, socket %d\n",
				service, ntohs(sin.sin_port), l_s);
	if (listen(l_s, NCAS_SOCK_BACKLOG) == SOCKET_ERROR)
	{
		cam_Log("Listen() failed: %s(%d)\n", "WSAGetLastError", WSAGetLastError());

		return CAM_ERROR;
	}

	return l_s;
}

/****************************************************************/
static void	SetSocketOptions(SOCKET s)
/****************************************************************/
{
	BOOL			keep_alive;
	struct linger	ling;

	/* enable keep alive packets on this socket */
	keep_alive = TRUE;
	if (setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (const char *)&keep_alive, sizeof(BOOL)) == SOCKET_ERROR)
	{
		cam_Log("setSocketOptions(): setsockopt(SO_KEEPALIVE) failed, code is %d",
				WSAGetLastError());
	}

	/* graceful socket close, ie wait for upto SOCKET_LINGER_TIME secs for data 
		to clear before closing socket */
	ling.l_onoff	= TRUE;
	ling.l_linger	= SOCKET_LINGER_TIME;
	if (setsockopt(s, SOL_SOCKET, SO_LINGER, (const char *)&ling, sizeof(struct linger)) == SOCKET_ERROR)
	{
		cam_Log("setSocketOptions(): setsockopt(SO_LINGER) failed, code is %d",
				WSAGetLastError());
	}

	return;
}

/****************************************************************/
static void	ReportSocketOptions(SOCKET s)
/****************************************************************/
{
	int				rcv_buf;
	int				snd_buf;
	BOOL			keep_alive;
	struct linger	ling;
	int				opt_len;

	opt_len = sizeof(BOOL);
	if (getsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (char *)&keep_alive, (int *)&opt_len) == SOCKET_ERROR)
	{
		cam_Log("reportSocketOptions(): getsockopt(SO_KEEPALIVE) failed, code is %d",
				WSAGetLastError());
	}
	opt_len = sizeof(int);
	if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, (char *)&rcv_buf, (int *)&opt_len) == SOCKET_ERROR)
	{
		cam_Log("reportSocketOptions(): getsockopt(SO_RCVBUF) failed, code is %d",
				WSAGetLastError());
	}
	opt_len = sizeof(int);
	if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, (char *)&snd_buf, (int *)&opt_len) == SOCKET_ERROR)
	{
		cam_Log("reportSocketOptions(): getsockopt(SO_SNDBUF) failed, code is %d",
				WSAGetLastError());
	}
	opt_len = sizeof(struct linger);
	if (getsockopt(s, SOL_SOCKET, SO_LINGER, (char *)&ling, (int *)&opt_len) == SOCKET_ERROR)
	{
		cam_Log("reportSocketOptions(): getsockopt(SO_LINGER) failed, code is %d",
				WSAGetLastError());
	}

	cam_Log("reportSocketOptions(): keep alives %d, rcv buf %d, snd buf %d, l_onoff %d, l_linger %d\n",
		keep_alive, rcv_buf, snd_buf, ling.l_onoff, ling.l_linger);

	return;
}
