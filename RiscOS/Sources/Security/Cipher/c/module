/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "cipher.h"
#include "header.h"
#include "des.h"
#include "md5.h"

#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

int little_endian;

ERROR_STRUCT(BADPARAM,"Bad parameter");


_kernel_oserror *
module_initialise(char *cmd_tail, int podule_base, void *pw)
{
  unsigned int i = 0x01020304;

  /*
   * find endianess
   */
  little_endian = ((*(char*)&i)==1)?0:1;
  
#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
  TinyError = _swix(TinySupport_Share, _IN(0),pw);
#endif

  return (NULL);
}

_kernel_oserror *
module_finalise(int fatal, int podule, void *pw)
{
#ifdef USE_TINY
  if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif
  return (NULL);
}

_kernel_oserror *
module_swi(int swi_no, _kernel_swi_regs *r, void *pw)
{
  struct MD5Context ctx;
  uchar *source,*results,*key,*key_sx,*key_dx;
  int i,length;
  /* int flags; */ /* not used currently */
  
  /* 
   * range check swi
   */
  if (swi_no<0 || swi_no>(Cipher_MD5-Cipher_00))
    return (error_BAD_SWI);

  /* flags = r->r[0];  */ /* not used currently */
  source       = (uchar *)r->r[1];
  length       = r->r[2]/8;
  results      = (uchar *)r->r[3];
  key = key_sx = (uchar *)r->r[4];
  key_dx       = (uchar *)r->r[5];

  /* 
   * check common parameters
   */
  if (!source || !results || !length)
    return ERROR(BADPARAM);
  
  /* 
   * do swis
   */
  switch (swi_no)
  {
    case Cipher_DESEncrypt-Cipher_00 :
      if (!key)
        return ERROR(BADPARAM);
        
      for (i=0; i<length; i++)
        des_encrypt(results+(i*8),source+(i*8),key,0);
        
      break;
    case Cipher_DESDecrypt-Cipher_00 :
      if (!key)
        return ERROR(BADPARAM);

      for (i=0; i<length; i++)
        des_decrypt(results+(i*8),source+(i*8),key,0);
        
      break;
    case Cipher_DESTripleEncrypt-Cipher_00 :
      if (!key_sx || !key_dx)
        return ERROR(BADPARAM);
        
      for (i=0; i<length; i++)
        des_triple_encrypt(results+(i*8),source+(i*8),key_sx,key_dx);
        
      break;
    case Cipher_DESTripleDecrypt-Cipher_00 :
      if (!key_sx || !key_dx)
        return ERROR(BADPARAM);

      for (i=0; i<length; i++)
        des_triple_decrypt(results+(i*8),source+(i*8),key_sx,key_dx);
        
      break;
    case Cipher_MD5-Cipher_00 :
      MD5Init(&ctx);
      MD5Update(&ctx,(md5byte*)source,length);
      MD5Final(results, &ctx);
      break;
  }
  return (NULL);
}
