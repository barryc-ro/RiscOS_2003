/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

#ifndef __cipher_h
#define __cipher_h

/* 
 * DES encrypt data with a given key
 * On entry:
 * 	r0 = flags - should be 0
 *    	r1 = pointer to source data
 *	r2 = size of source data (bytes) must be multiple of 8 bytes
 *	r3 = pointer to results buffer (should be at lease <r2> bytes)
 *	r4 = pointer to 8 byte key
 */
#define Cipher_DESEncrypt                     0x050140

/* 
 * DES decrypt data against a given key
 * On entry:
 * 	r0 = flags - should be 0
 *    	r1 = pointer to source data
 *	r2 = size of source data (bytes) must be multiple of 8 bytes
 *	r3 = pointer to results buffer (should be at lease <r2> bytes)
 *	r4 = pointer to 8 byte key
 */
#define Cipher_DESDecrypt                     0x050141

/* 
 * Tripple DES encrypt data against a given key pair
 * On entry:
 * 	r0 = flags - should be 0
 *    	r1 = pointer to source data
 *	r2 = size of source data (bytes) must be multiple of 8 bytes
 *	r3 = pointer to results buffer (should be at lease <r2> bytes)
 *	r4 = pointer to 8 byte key sx
 *	r5 = pointer to 8 byte key dx
 */
#define Cipher_DESTripleEncrypt               0x050142

/* 
 * Tripple DES decrypt data against a given key pair
 * On entry:
 * 	r0 = flags - should be 0
 *    	r1 = pointer to 8 byte source data
 *	r2 = size of source data (bytes) must be multiple of 8 bytes
 *	r3 = pointer to results buffer (should be at lease <r2> bytes)
 *	r4 = pointer to 8 byte key sx
 *	r5 = pointer to 8 byte key dx
 */
#define Cipher_DESTripleDecrypt               0x050143

/* 
 * Generate a MD5 message digest of the source data
 * On entry:
 *	r0 = flags - should be 0
 *    	r1 = pointer to source data
 *      r2 = length of source data
 *	r3 = pointer to 16 byte buffer to put results
 */
#define Cipher_MD5                         0x050144

#endif
