/* header file cu_errors.h  */

#ifndef CU_ERRORS_H
#define CU_ERRORS_H

#include <stdbool.h>

#define ERROR_BASE		0x00819D00

typedef enum
{
  E_SWIERR_NO_ERROR      = (ERROR_BASE+0),
  E_SWIERR_SWI_ERROR     = (ERROR_BASE+1),
  E_SWIERR_BAD_PARAMETER = (ERROR_BASE+2)
} SWI_ERRORS;

typedef enum
{
  E_ERROR_NO_ERROR = -1,
  /* Configuration update file errors */
  E_ERROR_UNRECOGNISED_TAG,
  E_ERROR_REQUIRED_TAG_ABSENT,
  E_ERROR_TAG_MISMATCH,
  E_ERROR_UNRECOGNISED_TARGET,
  E_ERROR_MALFORMED_UPDATE_FILE,
  E_ERROR_MANDATORY_FLAG_ABSENT,
  /* Exclusions file errors */
  E_ERROR_EXCLUDED_TAG_INCLUDED,
  E_ERROR_INCLUDED_TAG_EXCLUDED,
  E_ERROR_EXCLUSIONS_FILE_ABSENT,
  E_ERROR_MALFORMED_EXCLUSIONS_FILE,
  E_ERROR_EXCLUSIONS_TAG_PRESENT_MULTIPLY,
  /* NVRAM errors */
  E_ERROR_COUNTRY_NOT_SUPPORTED,
  E_ERROR_NVRAM_NOT_WRITTEN,
  E_ERROR_TAG_TOO_LONG
} ERRORS;



/* Some specific OS errors. */
#define ERROR_BADSWI            0x00000112

/* Declare the given error in a memory efficient way. */
#define ERROR_STRUCT(name,text) \
        struct {int errnum; char errmess[sizeof(text)+1];} name = {E_SWIERR_##name,text}

/* Declare the given error as external. */
#define ERROR_EXTERN(name) \
        extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))

bool append_error(const char* const error_string, ERRORS errnum, unsigned int err_code);
char* return_errors(unsigned int* number);
void clear_error_structure(void);
void debug_display_errors(void);
unsigned int return_number_of_errors(void);

#endif /* CU_ERRORS_H */
