/* header file cu_exclusn.h  */

#ifndef CU_EXCLUSIONS_H
#define CU_EXCLUSIONS_H

#include <stdbool.h>

#include "sys/queue.h"  /* get SLIST macros */

#include "cu_main.h"
#include "ncma_bootb.h"


typedef enum
{
  E_TARGET_TYPE_NO_TARGET = -1,
  E_TARGET_TYPE_MAIN_BB = 0,
  E_TARGET_TYPE_DEFAULT_BB,
  E_TARGET_TYPE_NVRAM
} TARGET_TYPE;



#define EXCLUSION_RULE_TYPE_INCLUDED 1
#define EXCLUSION_RULE_TYPE_EXCLUDED 2

/* Forward prototypes */
bool read_exclusions_file(const char* const filename);
int parse_exclusions_file_for_tag(const char* const tag, const char* target);
bool clear_exclusions_file(void);
bool validate_data(unsigned int target);
bool is_tag_excluded(const unsigned int nci_tag_number, TARGET_TYPE target);
void debug_display_exclusions_list(void);
void clear_exclusions_list(void);
void set_exclusions_file(const char* const filename);
void free_exclusions_file(void);
struct list* search_exclusions_file_for_tag(const int nci_tag);

/* Structures */

struct list
{
  SLIST_ENTRY(list) list_link; /* list macro glue */
  int rule_type;         /* 1 = include, 2 = exclude */
  int nci_tag_number;    /* The nci_tag number of the tag this rule represents. */
  TARGET_TYPE target;    /* 0 = main bb, 1 = default bb, 2 = NVRAM. */
  bool included;         /* Set to true if this flag was included. */
};

typedef SLIST_HEAD(list2, list) inclusons_structure;
extern inclusons_structure *inclusions;

#endif /* CU_EXCLUSIONS_H */
