#include <stdio.h>

/* Extremely simple implementation of the rot13 cipher.
   Implementation by Uche Akotaobi
*/

extern int strlen(const char* s);
char rot13_table[256];

#define LINE_BUFFER_SIZE 256



void rot_13_line(char* const line)
{
  int loop;
  char rot13_table[256];
  printf("rot_13_line(): line before is %s\n", line);

  /* Fill the lookup table.
     Rot13(a) = z, rot13(b) = y, rot13(y) = b, and so on. */
  for (loop = 0; loop < 256; loop++) rot13_table[loop] = loop;
  for (loop = 'a'; loop <= 'z'; loop++) rot13_table[loop] = 'z' + 'a' - loop;
  for (loop = 'A'; loop <= 'Z'; loop++) rot13_table[loop] = 'Z' + 'A' - loop;

  for (loop=0; loop<strlen(line); loop++)
  {
    *(line+loop) = rot13_table[*(line+loop)];
  }
  printf("rot_13_line(): line after is  %s\n", line);
}


int main(int argc, char* argv[])
{
  char line[256];

  /* Args.  Rot13 them in turn. */
  if (argc > 2)
  {
    FILE* f_in = NULL;
    FILE* f_out = NULL;
    f_in=fopen(argv[1],"r");
    f_out=fopen(argv[2],"w");
    if (!f_in)
    {
      printf("Error opening file %s for reading\n", argv[1]);
    }
    if (!f_out)
    {
      printf("Error opening file %s for reading\n", argv[2]);
    }
    while (fgets(line, LINE_BUFFER_SIZE, f_in))
    {
      rot_13_line(line);
      printf("line is %s\n", line);
      fprintf(f_out, "%s", line);
    }
    fclose (f_in);
    fclose (f_out);
  }
  else
  {
    printf("Error: need 2 args\n");
  }

  return 0;
}
