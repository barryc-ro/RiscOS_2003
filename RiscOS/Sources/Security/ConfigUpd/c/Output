/**************************************************************************
* $Id$
* $Name$
*
* Author(s):  David Cotton
* Project(s): Lazarus (300), Bethany (333)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose:
*
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "NVRAM.h"
#include "kernel.h"

/* Include headers from ncmalib */
#include "ncma_tags.h"
#include "dynalloc.h"
#include "smcard.h"
#include "smtags.h"
#define PROTOTYPES_INTERNAL
#include "ncma_bootb.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"
#include "cu_exclusn.h"
#include "cu_errors.h"
#include "cu_output.h"
#include "module.h"

/*****************************************************************************
* MACROS
*****************************************************************************/

/* Forward prototypes */
static int output_list_of_tags(char** p_memory, int* i_memsize, sc_bootblock_data_struct* bootblock, const char* const prefix);
static char* return_external_name_from_tag_number(const int tag);
static int return_external_number_from_bbtag_number(const int number);




/* This routine gets the current settings of the objects referred to in the
bitfield and creates a configuration file stating the current settings. */

int get_current_configuration(const char* const memory_ptr, const int memory_size, const unsigned int bitfield)
{
  char* p_memory = (char*)memory_ptr;
  int i_memory_size = (int)memory_size;

  /* Decode the bitfield (bit 1 = default bootblock, 2 = main bootblock, 3 = NVRAM tags */
  dprintf (("", "get_current_configuration(): value is %d\n", bitfield));
  if (bitfield & (1L << 0))
  {
    sc_bootblock_data_struct default_bootblock;
    int error = 0;
    dprintf(("", "get_current_configuration():   Bit 1 is set : default bootblock required\n"));
    initialise_sc_bootblock_data_struct(&default_bootblock);
    error = read_bootblock_from_nvram(&default_bootblock, "BootBlockDefault");
    dprintf(("", "get_current_configuration(): Mem before: %0p (%d)\n", p_memory, i_memory_size));
    error = output_list_of_tags(&p_memory, &i_memory_size, &default_bootblock, "BBDEFAULT:");
    dprintf(("", "get_current_configuration(): Mem after:  %0p (%d)\n", p_memory, i_memory_size));
    if (error <= 0)
    {
      dprintf(("", "get_current_configuration(): Error %d whilst building list of tags\n", error));
    }
    free_sc_bootblock_data_struct(&default_bootblock);
    debug_rmstat();
  }

  if (bitfield & (1L << 1))
  {
    sc_bootblock_data_struct main_bootblock;
    int error = 0;
    dprintf(("", "get_current_configuration():   Bit 2 is set : main bootblock required.\n"));
    initialise_sc_bootblock_data_struct(&main_bootblock);
    error = read_bootblock_from_ncbootblock(&main_bootblock);
    dprintf(("", "get_current_configuration(): Mem before: %0p (%d)\n", p_memory, i_memory_size));
    error = output_list_of_tags(&p_memory, &i_memory_size, &main_bootblock, "BBMAIN:");
    dprintf(("", "get_current_configuration(): Mem after:  %0p (%d)\n", p_memory, i_memory_size));
    if (error <= 0)
    {
      dprintf(("", "get_current_configuration(): Error %d whilst building list of tags\n", error));
    }
    free_sc_bootblock_data_struct(&main_bootblock);
    debug_rmstat();
  }

  if (bitfield & (1L << 2))
  {
    dprintf(("", "get_current_configuration(): Bit 3 is set : all known NVRAM tags required.\n"));
    dprintf(("", "get_current_configuration(): Mem before: %0p (%d)\n", p_memory, i_memory_size));
    output_nvram_tags(&p_memory, &i_memory_size);
    dprintf(("", "get_current_configuration(): Mem after:  %0p (%d)\n", p_memory, i_memory_size));
  }

  return (memory_size-i_memory_size);
}




/* This routine outputs all known tags to the file passed in, in a format
specified in the FS. The 'prefix' string is added to the start of any line
output. */

static int output_list_of_tags(char** p_memory, int* i_memsize, sc_bootblock_data_struct* bootblock, const char* const prefix)
{
  int loop;

  dprintf(("", "output_list_of_tags(): List of tags present in the default bootblock:\n"));

  /* Go through all the tags one at a time. If they are present output them to the filename passed in. */
  for(loop=0; loop<MAX_TAG_CACHE; loop++)
  {
    if(bootblock->tag_cache->tag[loop].tag == NULL)
      break; /* no more tags */

    dprintf(("", "output_list_of_tags(): tag %d\n", loop));
    if(bootblock->tag_cache->tag[loop].bytes != 0) /* Tag has a value */
    {
       /* Map the tag number to an external CU file name */
       char* ext_name = return_external_name_from_tag_number(bootblock->tag_cache->tag[loop].nci_tag);
       if (ext_name!=NULL)
       {
         char tempstr[255];
         sprintf(tempstr, "%s%s=", prefix, ext_name);
         write_string(tempstr, &p_memory, &i_memsize);
       }
       else
       {
         dprintf(("", "output_list_of_tags(): Error, external name of tag %d not known", loop));
       }

       switch(bootblock->tag_cache->tag[loop].mapping)
       {
         case TAG_MAPPING_URL:
         case TAG_MAPPING_STRING:
         case TAG_MAPPING_HOST:
         case TAG_MAPPING_PROXY:
         {
           char* updated_string = convert_linefeeds_to_text(bootblock->tag_cache->tag[loop].val);
           dprintf(("", "output_list_of_tags(): Initial string is %s\n", bootblock->tag_cache->tag[loop].val));
           if (updated_string)
           {
             char tempstr[255];
             sprintf(tempstr, "%s\n", updated_string);
             write_string(tempstr, &p_memory, &i_memsize);
             rmfree((void*)updated_string);
           }
         }
         break;

         case TAG_MAPPING_INT:
         case TAG_MAPPING_IP:
         {
           char val2[255];
           char tempstr[255];
           dprintf(("", "output_list_of_tags(): val is %s\n", (char *)(bootblock->tag_cache->tag[loop].val)));
           ip_ntos(val2, (char *)(bootblock->tag_cache->tag[loop].val));
           sprintf(tempstr, "%s\n", val2);
           write_string(tempstr, &p_memory, &i_memsize);
         }
         break;

         case TAG_MAPPING_SOAK:
         case TAG_MAPPING_PLIP:
         {
           char tempstr[255];
           int m = read_little_word((char *)(bootblock->tag_cache->tag[loop].val));
           sprintf(tempstr, "%s\n", m?"ENABLED":"DISABLED");
           write_string(tempstr, &p_memory, &i_memsize);
         }
         break;

         default:
           dprintf(("", "output_list_of_tags(): Error: There should be no default tag type.\n"));
           break;
       }
    }
  }

  return (1);
}





/* This routine returns a pointer to the external name of the nci tag number passed in. The external name is that used in the CU file, whilst the tag number is the number of the bootblock/NVRAM tag as defind in smtags.h.
  The routine returns a pointer to the external name, or NULL if it was not found. The pointer returned by this routine *must not* be altered or free'd as it points to a static string in a structure. */

char* return_external_name_from_tag_number(const int tag)
{
  int number= return_external_number_from_bbtag_number(tag);
  dprintf(("", "return_external_name_from_tag_number(): External tag number of nci_tag %d is %d\n", tag, number));
  if (number < 0 || number > SIZE_OF_BIGLIST)
  {
    return (NULL); /* Not recognised. */
  }
  else
  {
    dprintf(("", "return_external_name_from_tag_number(): External tag name is %s\n", biglist[number].name));
    return (biglist[number].name);
  }
}




/* This routine returns the tag number of the tag name passed in. It returns
-1 if the tag cannot be found in the module's internal list. */
int return_external_number_from_bbtag_number(const int number)
{
  int loop = 0;

  for (loop=0; loop<SIZE_OF_BIGLIST; loop++)
  {
    if (biglist[loop].tag_number == number) /* They match! */
    {
      return (loop);
    }
  }

  return (-1); /* Error! tag not found. */
}



void write_string(char* string, char*** p_mem, int** i_memsize)
{
  int length = 0;

  dprintf(("", "write_string(): Writing string \'%s\' to memory area %p (size %d)\n", string, **p_mem, **i_memsize));
  length=strlen(string);
  memcpy(**p_mem, string, length);
  **p_mem+=length;
  **i_memsize-=length;
}


/****************************************************************************
* END OF FILE
****************************************************************************/

