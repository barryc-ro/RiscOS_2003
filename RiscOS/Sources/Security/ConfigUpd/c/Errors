
/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

/* Include general RISC OS headers */
#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "NVRAM.h"
#include "kernel.h"

/* Include headers from ncmalib */
#include "smtags.h"
#include "dynalloc.h"
#include "ncma_utils.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"

/* Include local headers */
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"
#include "cu_exclusn.h"
#include "cu_errors.h"

static unsigned int num_of_errors = 0;
static unsigned char* concatenated_error_string = NULL;

#define MAX_ERRORS 10 /* A limit set in the FS. */

/* This structure hols the details of one error. It includes a string, an error type (as specfied in the FS) and an error_code (whose meaning is dependant on the error_type). */
typedef struct
{
  ERRORS error_type;
  unsigned int error_code;
  char* error_string;
}error_struct;

static error_struct error_array[MAX_ERRORS];




/* This routine is passed an error and appends it onto the end of the current
error string. It returns true if the error was successfully added, false otherwise. */

bool append_error(const char* const err_string, ERRORS err_num, unsigned int err_code)
{
  dprintf(("", "append_error(): appending string \'%s\' (%d=%d)\n", err_string, err_num, err_code));
  if (num_of_errors < MAX_ERRORS)
  {
    error_array[num_of_errors].error_type = err_num;
    error_array[num_of_errors].error_code = err_code;
    error_array[num_of_errors].error_string = (char*)rmalloc(strlen(err_string)+1, "Error string");
    if (!error_array[num_of_errors].error_string)
    {
      dprintf(("", "append_error(): Error allocating memory for string."));
      return (false);
    }
    else
    {
      strcpy (error_array[num_of_errors].error_string, err_string);
    }
    num_of_errors++;
  }
  return (true);
}




char* return_errors(unsigned int* number)
{
  dprintf(("", "return_errors()\n"));
  *number = num_of_errors;
  return ((char*)concatenated_error_string);
}




/* This routine can be used to clear all the memory used by the error handling code. */
void clear_error_structure(void)
{
  unsigned int loop = 0;

  dprintf(("", "clear_error_structure()"));
  for (loop=0; loop <= num_of_errors; loop++)
  {
    error_array[loop].error_type = E_ERROR_NO_ERROR;
    error_array[loop].error_code = 0;
    if (error_array[loop].error_string != NULL)
    {
      rmfree((unsigned char*)error_array[loop].error_string);
      error_array[loop].error_string = NULL;
    }
  }
   num_of_errors = 0;
}



/* This displays the contents of the error array in a debug build. */
void debug_display_errors(void)
{
  unsigned int loop = 0;
  for (loop=0; loop < num_of_errors; loop++)
  {
    if (error_array[loop].error_type != E_ERROR_NO_ERROR)
    {
      dprintf(("", "debug_display_errors(): Error %d is %d=%d (%s)\n", loop, error_array[loop].error_type, error_array[loop].error_code, error_array[loop].error_string));
    }
  }
}

