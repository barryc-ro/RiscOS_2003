
/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "kernel.h"
#include "NVRAM.h"

/* Include headers from ncmalib */
#include "dynalloc.h"
#include "ncma_utils.h"
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"



/*****************************************************************************
* Country listing
*****************************************************************************/
static struct {char *country; int number;} countries[] =
{
  { "UK", 1 },
  { "Italy", 4 },
  { "Spain", 5 },
  { "France", 6 },
  { "Germany", 7 },
  { "Turkey", 20 },
  { "Ireland", 22 },
  { "Australia", 29 },
  { "South Africa", 52 }
};



/*
  This routine takes a country name (case-insensitive) and converts it to the
  RISC OS country code by the use of the lookup table countries[] specified at
  the head of this file.
*/
int lookup_country(const char* const country)
{
  unsigned int n = sizeof(countries)/sizeof(countries[0]);
  int loop;
  for (loop=0; loop < n; loop++)
  {
    if (strcmp_ci(countries[loop].country, country) == 0)
    {
      return countries[loop].number;
    }
  }
  return 0;
}


/*
  This routine takes a RISC OS country code and converts it to the
   country name by the use of the lookup table countries[] specified at
  the head of this file. If it cannot be converted then NULL is returned.
  As this routine returns a pointer to a strong in a ststic data structure it should not be altered or free'd.
 */
char* lookup_country_from_number(int country_number)
{
  unsigned int n = sizeof(countries)/sizeof(countries[0]);
  int loop;
  dprintf(("", "lookup_country_from_number(): country number is %d\n", country_number));
  for (loop=0; loop < n; loop++)
  {
    dprintf(("", "lookup_country_from_number(): country number %d is %s\n", countries[loop].number, countries[loop].country));
    if (countries[loop].number == country_number)
    {
      return (countries[loop].country);
    }
  }
  return (NULL);
}


/*
  This routine compares two strings case insensitively
*/

int strcmp_ci(const char *first, const char *second)
{
  for (;;)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;
    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}




/* This routine takes an integer and returns a string representing the timezone. It returns a pointer to a string containing the textual description of that time. */
char* timezone_int_to_string(const int timezone)
{
  int hours, minutes = 0;
  char* return_val = NULL;
  dprintf(("", "timezone_int_to_string(): integer is %d\n", timezone));

  /* Numbers are between 0 and 256. Numbers >= 128 are -ve offsets, others positive. */
  if (timezone < 128) /* Positive offset */
  {
    hours = timezone/4;
    minutes = (timezone%4)*15;
  }
  else /* Negative offset */
  {
    hours = ((256-timezone)/4)*-1;
    minutes = ((256-timezone)%4)*15;
  }

  dprintf(("", "timezone_int_to_string(): Number of hours is %d\n", hours));
  dprintf(("", "timezone_int_to_string(): Number of minutes is %d\n", minutes));

  /* Now build the string up - max 10 characters for time */
  return_val = (void*)rmalloc(10, "temporary timezone store.");
  if (!return_val)
  {
    dprintf(("", "timezone_int_to_string(): Error allocating memory for string"));
    return (NULL);
  }

  sprintf(return_val, "%d:%02d", hours, minutes);
  dprintf(("", "timezone_int_to_string(): Returning string %s\n", return_val));
  return (return_val);
}



/*
 * This routine takes a string defining the time zone
 * (format [+|-]<hours>:<minutes>) and converts it to the standard integer
 * value for storing in NVRAM.
 */

int calculate_timezone(char *timezone)
{
  bool ahead = true;
  int loop = 0;
  int minutes = 0;
  int hours = 0;
  int return_value = 0;

  dprintf(("", "calculate_timezones(): timezone string %s\n", timezone));

  if (timezone[loop] == '+')
  {
    ahead = true;
    loop++;
  }
  else if (timezone[loop] == '-')
  {
    ahead = false;
    loop++;
  }

  while (!isdigit(timezone[loop])) loop++;
  while (isdigit(timezone[loop]))
  {
    hours *= 10;
    hours += (timezone[loop] - 48);
    loop++;
  }
  loop++;
  while (isdigit(timezone[loop]))
  {
    minutes *= 10;
    minutes += (timezone[loop] - 48);
    loop++;
  }

  if (ahead)
  {
    if (minutes < 15)
    {
      return_value = (4*hours);
    }
    else
    {
      if (minutes < 30)
      {
        return_value =  ((4*hours)+1);
      }
      else
      {
        if (minutes < 45)
        {
          return_value =  ((4*hours)+2);
        }
        else
        {
          return_value = ((4*hours)+3);
        }
      }
    }
  }
  else /* Deal with -ve values */
  {
    if (minutes < 15)
    {
      return_value = (256-(4*hours));
    }
    else
    {
      if (minutes < 30)
      {
        return_value = (256-((4*hours)+1));
      }
      else
      {
        if (minutes < 45)
        {
          return_value = (256-((4*hours)+2));
        }
        else
        {
          return_value = (256-((4*hours)+3));
        }
      }
    }
  }
  dprintf(("", "calculate_timezones(): Returned timezone value is %d\n", return_value));

  return (return_value);
}


/* This routine pads the string passed in with the character passed in, up to
the string terminator.
   This is ever-so-slightly naughty; you must ensure that string_end is
within the memory area allocated for the string otherwise nasty things may
consequently occur.
*/
void pad_string(char* string, int pad_char, int string_end)
{
  int loop=string_end;
  dprintf(("", "pad_string(): padding string %s with character %c\n", string, pad_char));
  while (loop > strlen(string) && loop >= 0)
  {
    string[loop]=pad_char;
    loop--;
  }
}


/* This routine converts &0a character sequences in the string passed in
    into '\n' character, and moves the rest of the string up accordingly.
   It returns a pointer to the new string if any conversions were performed, NULL otherwise.
*/
char* convert_linefeeds_to_text(char* string)
{
  int loop, new_loop=0;
  unsigned int count = 0;
  char* new_string;

  dprintf(("", "convert_linefeeds_to_text(): Initial string is %s\n", string));

  /* Count the number of 0x0A's in the string. */
  for (loop=0; loop < strlen(string); loop++)
  {
    if (string[loop]==0x0A)
      count++;
  }
  dprintf(("", "convert_linefeeds_to_text(): There are %d newlines in the string\n", count));

  /* Allocate the memory for the string. */
  new_string = (char*)rmalloc(strlen(string)+count+1, "Linefeed conversion scratchspace");
  if (!new_string)
  {
    dprintf(("", "convert_linefeeds_to_text(): Error allocating %d bytes.\n", strlen(string)+count));
    return (NULL);
  }

  for (loop=0; loop <= strlen(string); loop++)
  {
    if (string[loop]==0x0A)
    {
      dprintf(("", "convert_linefeeds_to_text(): &0A sequence detected.\n"));
      new_string[new_loop++] = '\\';
      new_string[new_loop++] = 'n';
    }
    else
    {
      /* Copy the character directly over. */
      new_string[new_loop++] = string[loop];
    }
  }

  dprintf(("", "convert_linefeeds_to_text(): Final string is %s\n", new_string));

  return (new_string);
}



/* This routine simply trims a given line */
char *RipNTrim(char *text)
{
  char *c, *ptr = text;
  int len;

  while (isspace(*ptr))                  /* Leading whitespace */
    ptr++;
  while (c = strchr(ptr, '\n'), c)       /* Trailing LF */
    *c = '\0';
  while (c = strchr(ptr, '\r'), c)       /* Trailing CR */
    *c = '\0';
  while (c = strchr(ptr, '#'), c)        /* Strip off comments */
    *c = '\0';

  len = strlen(ptr);
  while (isspace(ptr[len - 1]))          /* Trailing whitespace */
    ptr[--len] = '\0';

  return(ptr); /* ptr may have moved. */
}


void rot_13_line(char* const line)
{
  int loop;
  char rot13_table[256];
  dprintf(("", "rot_13_line(): line before is %s\n", line));

  /* Fill the lookup table.
     Rot13(a) = z, rot13(b) = y, rot13(y) = b, and so on. */
  for (loop = 0; loop < 256; loop++) rot13_table[loop] = loop;
  for (loop = 'a'; loop <= 'z'; loop++) rot13_table[loop] = 'z' + 'a' - loop;
  for (loop = 'A'; loop <= 'Z'; loop++) rot13_table[loop] = 'Z' + 'A' - loop;

  for (loop=0; loop<strlen(line); loop++)
  {
    *(line+loop) = rot13_table[*(line+loop)];
  }
  dprintf(("", "rot_13_line(): line after is  %s\n", line));
}
