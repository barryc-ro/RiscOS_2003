
/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "NVRAM.h"
#include "kernel.h"

#include "sys/queue.h"  /* get SLIST macros */

/* Include headers from ncmalib */
#include "dynalloc.h"
#include "ncma_utils.h"
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"
#include "cu_exclusn.h"
#include "cu_errors.h"
#include "cu_valid.h"

static bool exclusions_file_valid = -1; /* No attempt as been made to load file. */

static bool parse_exclusions_file_line(const char* const line, const unsigned int line_number);
static int return_nci_tag_number_from_tag_string(const char* const tag_string);

inclusons_structure *inclusions = NULL;





/* This routine reads the contents of the exclusions file into a list. It reutrns false if there was an error parsing the file, true otherwise. */
bool read_exclusions_file(const char* const filename)
{
  bool file_valid = true;
  FILE* fp = NULL;
  char line[256];
  unsigned int line_count = 0;

  dprintf(("", "read_exclusions_file(): reading filename %s\n", filename));

  /* Ensure that the filename as a value. */
  if (!filename)
  {
    dprintf(("", "read_exclusions_file(): filename is NULL\n"));
    return (false);
  }

  /* Open the file */
  dprintf (("", "read_exclusions_file(): Opening file %s.\n", filename));
  if ((fp = fopen(filename, "r")) == NULL)
  {
    dprintf (("", "read_exclusions_file(): Error opening file %s.\n", filename));
    return (false);
  }

  SLIST_INIT(inclusions);

  /* Read the file line-by-line */
  while (fgets(line, LINE_BUFFER_SIZE, fp))
  {
    line_count++;

    /* Malformed lines *must* stop the module from doing anything more. */
    if (!parse_exclusions_file_line(line, line_count))
    {
      file_valid = false;
    }
  }

  if (!file_valid)
  {
    dprintf(("", "read_exclusions_file(): Error, exclusions file is invalid.\n"));
    /* Now do what we need to do... Remove the list so no rules are visible to the rest of the system. */
    exclusions_file_valid = false;
    return (false);
  }
  else
  {
    dprintf(("", "read_exclusions_file(): exclusions file was valid. Rules are now available for use.\n"));
    exclusions_file_valid = true;
  }

  /* Close the file */
  fclose(fp);

  /* Check the validity of the data in the exclusions file... */
  if (validate_exclusions_file()!=0)
  {
    return (false);
  }

  return (true);
}





/* This routine scans a line for valid exclusion or inclusion rules, and if
they are present adds them to the relevant lists. It returns false if the
line is malformed, otherwise it returns true. */

static bool parse_exclusions_file_line(const char* const line, const unsigned int line_number)
{
  struct list *p = NULL;
  char* line_ptr = NULL;
  char* ptr = NULL;
  char* equals_ptr = NULL;
  char* target_ptr = NULL;
  char fragment[4][256];
  int fragment_length[4]; /* Stores the length of each text fragment */
  unsigned int line_type = 0; /* 0 = comment, 1 = inclusion, 2 = exclusion, 3 = blank */
  TARGET_TYPE target = E_TARGET_TYPE_NO_TARGET;
  int loop;

  dprintf(("", "parse_exclusions_file_line()\n"));

  /* Initialise temproary data structures */
  for (loop=0; loop<=3; loop++)
  {
    strcpy(fragment[loop],"");
    fragment_length[loop] = 0;
  }

  /* Trim the line (eg.   remove comments)... */
  line_ptr = (char*)line;
  line_ptr = RipNTrim(line_ptr);
  if (strlen(line_ptr) > 1)
  {
    convert_linefeeds(line_ptr);
  }
  else
  {
    dprintf(("", "parse_exclusions_file_line(): Line is blank\n"));
    return (true);
  }

  /* Check for comments */
  if (line_ptr[0]=='#')
  {
    dprintf(("", "parse_exclusions_file_line(): Line is a comment\n"));
    return (true);
  }

  /* Now split the line into a <param>:<target>:<tag>=<value> triplet, starting with the param */
  ptr = strpbrk(line_ptr,":");
  if (!ptr)
  {
    /* No : seperator, therefore line is malformed */
    char error_string[255];
    dprintf(("", "parse_exclusions_file_line(): No : seperator, therefore line is malformed\n"));
    sprintf(error_string, "Malformed exclusions file (No : seperator) at line %d.", line_number);
    append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, line_number);
    return (false);
  }
  else
  {
    fragment_length[0] = ptr-line_ptr;
    strncat(fragment[0], line_ptr, fragment_length[0]);
    dprintf(("", "parse_exclusions_file_line(): first part of line is \'%s\' (length %d)\n", fragment[0], fragment_length[0]));
    dprintf(("", "parse_exclusions_file_line(): Next part of line is \'%s\'\n", ptr));
  }
  ptr++; /* Miss the : */
  while (*ptr == ' ') ptr++; /* Skip whitespace */

  /* Get the target */
  target_ptr = strpbrk(ptr,":");
  if (!target_ptr)
  {
    /* No : seperator, therefore line is malformed */
    char error_string[255];
    dprintf(("", "parse_exclusions_file_line(): No : seperator, therefore line is malformed\n"));
    sprintf(error_string, "Malformed exclusions file (No : seperator) at line %d.", line_number);
    append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, line_number);
    return (false);
  }
  else
  {
    fragment_length[1] = target_ptr-ptr;
    strncat(fragment[1], ptr, fragment_length[1]);
    dprintf(("", "parse_exclusions_file_line(): Second part of line is \'%s\' (length %d)\n", fragment[1], fragment_length[1]));
    dprintf(("", "parse_exclusions_file_line(): Next part of line is \'%s\'\n", target_ptr));
  }
  while (*target_ptr == ' ') target_ptr++; /* Skip whitespace */

  /* Get the tag and rule. */
  target_ptr++; /* Move past the : */
  equals_ptr = strpbrk(target_ptr,"=");
  if (!equals_ptr)
  {
    /* No = seperator *is* allowed and is not an error. */
    dprintf(("", "parse_exclusions_file_line(): No = seperator\n"));
  }
  else
  {
    dprintf(("", "parse_exclusions_file_line(): Third part of line is \'%s\'\n", equals_ptr+1));
  }
  while (*equals_ptr == ' ') equals_ptr++; /* Skip whitespace */

  /* Decode the second and third parts of the line. */
  if (equals_ptr)
  {
    fragment_length[2] = equals_ptr-target_ptr-1;
    fragment_length[3] = strlen(equals_ptr);
    strncat(fragment[2], target_ptr, fragment_length[2]);
    strncat(fragment[3], equals_ptr, fragment_length[3]);
    dprintf(("", "parse_exclusions_file_line(): 2nd line fragment is \'%s\' (length %d).\n", fragment[2], strlen(fragment[2])));
    dprintf(("", "parse_exclusions_file_line(): 3rd line fragment is \'%s\' (length %d).\n", fragment[3], strlen(fragment[3])));
  }
  else
  {
    fragment_length[2] = strlen(target_ptr);
    strncat(fragment[2], target_ptr, fragment_length[2]);
    dprintf(("", "parse_exclusions_file_line(): 2nd line fragment is \'%s\' (length %d).\n", fragment[2], strlen(fragment[2])));
  }

  /* Ensure that there is something after the = */
  if (fragment_length[2] == 0)
  {
    char error_string[255];
    dprintf(("", "parse_exclusions_file_line(): Error: Non-existant second fragment.\n"));
    sprintf(error_string, "Malformed exclusions file (Non-existant second fragment) at line %d.", line_number);
    append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, line_number);
    return (false);
  }

  /* The line should begin with either include: or exclude:, be a comment or a blank line. Find out which it is, otherwise it is rubbish. */
  if (strncmp(fragment[0], "include", 7) == 0)
  {
    dprintf(("", "parse_exclusions_file_line(): Line is an inclusion.\n"));
    line_type = 1;
  }
  if (strncmp(fragment[0], "exclude", 7) == 0)
  {
    dprintf(("", "parse_exclusions_file_line(): Line is an exclusion.\n"));
    line_type = 2;
  }

  if (line_type > 2 || line_type < 1)
  {
    char error_string[255];
    dprintf(("", "parse_exclusions_file_line(): Error, unrecognised line type.\n"));
    sprintf(error_string, "Malformed exclusions file (Unrecognised line type) at line %d.", line_number);
    append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, line_number);
    return (false);
  }

  /* Get the target type */
  dprintf(("", "parse_exclusions_file_line(): Target is \'%s\'\n", fragment[1]));
  if (strcmp(fragment[1], "BBMAIN")==0) target = E_TARGET_TYPE_MAIN_BB;
  if (strcmp(fragment[1], "BBDEFAULT")==0) target = E_TARGET_TYPE_DEFAULT_BB;
  if (strcmp(fragment[1], "NVRAM")==0) target = E_TARGET_TYPE_NVRAM;

  /* Create a node and add to the list. Only do this if the line has been verified as being correct. */
  p = (struct list *)rmalloc(sizeof(struct list), "exclusions list node");
  if (!p)
  {
    dprintf(("", "parse_exclusions_file_line(): Error allocating memory for node.\n"));
  }
  else
  {
    /* Store the target. */
    p->target = target;
    /* Store the rule_type. */
    p->rule_type = line_type;
    /* Store whether it has been mentioned in CU file yet. (default false) */
    p->included = false;
    /* Convert the tag string to an nci_tag number and store. */
    p->nci_tag_number = return_nci_tag_number_from_tag_string(fragment[2]);
    if (p->nci_tag_number == -1)
    {
      char error_string[255];
      dprintf(("", "parse_exclusions_file_line(): Unrecognised tag %s\n", fragment[2]));
      sprintf(error_string, "Malformed exclusions file (Unrecognised tag) at line %d.", line_number);
      append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, line_number);
      /* Tidy up memory allocated for this node. */
      rmfree((unsigned char*)p);
      p = NULL;
      return (false);
    }
    else
    {
      dprintf(("", "parse_exclusions_file_line(): nci_tag_number for \'%s\' is %d\n", fragment[1], p->nci_tag_number));
    }

    /* Insert an item into the list. */
    SLIST_INSERT_HEAD(inclusions, p, list_link);
  }

  return (true);
}


/* This routine should be called to clear up all memory allocated allocated for the exclusions file handling. */
bool clear_exclusions_file(void)
{
  dprintf(("", "clear_exclusions_file()\n"));

  /* Clear memory used by list. */
  clear_exclusions_list();
  /* Reset state of flag so that file has not been read. */
  exclusions_file_valid = false;

  return (true);
}



/* This routine displays a debug list of all the known rules. */
void debug_display_exclusions_list(void)
{
  struct list *p;
  unsigned int count = 0;

  /* Display the inclusions list... */
  SLIST_FOREACH(p, inclusions, list_link)
  {
    count++;
    dprintf(("", "debug_display_exclusions_list(): Node %d is: %d %d %d ", count, p->target, p->rule_type, p->nci_tag_number));
    dprintf(("", " %s ", p->included?"Included":"Not included"));
    dprintf(("", "\n"));
  }

  dprintf(("", "debug_display_exclusions_list(): There were %d nodes.\n", count));
}




/* This routine clears the inclusion and exclusion lists, tidying up all memory as it goes. */
void clear_exclusions_list(void)
{
  struct list *p, *next = NULL;

  dprintf(("", "clear_exclusions_list(): Clearing data held in nodes.\n"));

  /* Now free the memory of the nodes themsleves. */
  dprintf(("", "clear_exclusions_list(): Clearing nodes.\n"));
  p = SLIST_FIRST(inclusions);
  while (p)
  {
    next = SLIST_NEXT(p, list_link);
    dprintf(("", "clear_exclusions_list(): Freeing node at %0p.\n", p));
    if (p)
    {
      rmfree((unsigned char*) p);
    }
    p = next;
  }

  inclusions = NULL;
}






/* This routine scans through the lists and returns true if the tag
 is mentioned in the exclusions file. If it is present then it returns a
pointer to the node in the list for this tag, otherwise it returns NULL. */

struct list* search_exclusions_file_for_tag(const int nci_tag)
{
  struct list *p = NULL;

  dprintf(("", "search_exclusions_file_for_tag()\n"));

  /* Parse the inclusions list... */
  SLIST_FOREACH(p, inclusions, list_link)
  {
    if (p->nci_tag_number == nci_tag)
    {
      return (p);
    }
  }

  return (NULL);
}



bool is_tag_excluded(const unsigned int nci_tag_number, TARGET_TYPE target)
{
  struct list *p = NULL;
  dprintf(("", "is_tag_excluded()\n"));

  /* Ensure that all tags that need including are included. */
  SLIST_FOREACH(p, inclusions, list_link)
  {
    if (p->nci_tag_number == nci_tag_number && p->target == target)
    {
      p->included = true;
      if (p->rule_type == EXCLUSION_RULE_TYPE_EXCLUDED)
      {
        /* This tag should not be present in the CU file. */
        dprintf(("", "is_tag_excluded(): Tag is excluded.\n"));
        return (true);
      }
    }
  }

  return (false);
}


/* This routine free's the memory used by the exclusions filename. */
void free_exclusions_file(void)
{
  /* Free any existing memory. */
  if (exclusions_filename)
  {
    rmfree ((unsigned char*)exclusions_filename);
    exclusions_filename = NULL;
  }
}



/* This routine sets the exclusions filename to the string passed in. */
void set_exclusions_file(const char* const filename)
{
  dprintf(("", "Setting exclusions file to %s\n", filename));

  /* Free the memory if it is present. */
  free_exclusions_file();

  /* Allocate memory for string. */
  exclusions_filename = (char*)rmalloc(strlen(filename)+1, "exclusions filename");
  if (!exclusions_filename)
  {
    dprintf(("", "set_exclusions_file(): Error allocating memory.\n"));
  }
  else
  {
    strcpy(exclusions_filename, filename);
  }
}



/* This routine returns an nci_tag number from the string passed in. If the
string does not match a tag, then -1 is returned. */
static int return_nci_tag_number_from_tag_string(const char* const tag_string)
{
  int return_value = -1;
  int loop=0;
  dprintf(("", "return_nci_tag_number_from_tag_string(): string is %s\n", tag_string));

  for (loop=0; loop<SIZE_OF_BIGLIST; loop++)
  {
    if (strcmp(biglist[loop].name, tag_string) == 0) /* They match! */
    {
      return (biglist[loop].tag_number);
    }
  }

  return (return_value);
}

