
/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

/* Include general RISC OS headers */
#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "NVRAM.h"
#include "kernel.h"

/* Include headers from ncmalib */
#include "smtags.h"
#include "dynalloc.h"
#include "ncma_utils.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"

/* Include local headers */
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"
#include "cu_exclusn.h"
#include "cu_valid.h"
#include "cu_errors.h"


/* This routine ensures that all the tags in the target are valid against the rules held in the exclusions file, i.e. that any included tags are present and that excluded ones are not. Also any extended rules (e.g. DNS ranges) need to be checked.
   It returns 0 if all tags match, otherwise it returns non-zero. Any errors encountered should be added to the errors list. */

unsigned int validate_bootblock_data(sc_bootblock_data_struct* bootblock, TARGET_TYPE target)
{
  unsigned int loop;

 /* Initially check that the same tag is not present as both an inclusion and an exclusion; this would obviously be an error.
    We then need to do 2 parses:
    1) Scan through all the tags in the CU file and ensure that they should all be present (i.e. none are excluded in the exclusions file);
    2) Scan through the exclusions file and ensure that all tags that are included are present in the CU file.
    As well as the above, we also need to ensure that any extended rule (for example DNS ranges) are validated.
 */

  /* Check all necessary bootblock tags have been included */
  for(loop=0; loop<MAX_TAG_CACHE; loop++)
  {
    if(bootblock->tag_cache->tag[loop].tag == NULL)
      break; /* no more tags */

    if(bootblock->tag_cache->tag[loop].bytes != 0) /* Tag has a value */
    {
      struct list *p = NULL;
      /* Is this tag excluded or excluded in the exclusions file? */
      p = search_exclusions_file_for_tag(bootblock->tag_cache->tag[loop].nci_tag);
      if (p)
      {
        dprintf(("", "validate_bootblock_data(): tag %d is a %d in the exclusions file.\n", loop, p->rule_type));
        if (p->rule_type == EXCLUSION_RULE_TYPE_INCLUDED && p->included == false && p->target == target)
        {
          char error_string[255];
          dprintf(("", "validate_bootblock_data(): Error: Obligatory tag %s absent from CU file.\n", bootblock->tag_cache->tag[loop].tag));
          sprintf(error_string, " Obligatory tag %s absent from CU file.", bootblock->tag_cache->tag[loop].tag);
          append_error(error_string, E_ERROR_INCLUDED_TAG_EXCLUDED,  bootblock->tag_cache->tag[loop].nci_tag);
          return (loop);
        }
      }
    }
  }
  return (0);
}



/* This routine validates the data held within the exclusios file. It ensure that:
   *) The same <target>:<tag> is not mentioned twice in both exclusion and inclusion rules.
   *) That <tag> values match the relevant target; i.e. NVRAM tags have nci_tag numbers above 0x500
*/
unsigned int validate_exclusions_file(void)
{
  struct list *p = NULL;

  dprintf(("", "validate_exclusions_file()\n"));

  /* Ensure that the same tag is not mentioned in both exclusion and inclusion rules. Also ensure that if nci_tag > 500 it is an nvram target, otherwise a main or default bootblock target */
  SLIST_FOREACH(p, inclusions, list_link)
  {
    struct list *p_inner = NULL;
    /* Perform nci_tag to target type checks. */
    if (p->nci_tag_number >= 0x500 && p->target != E_TARGET_TYPE_NVRAM)
    {
      char error_string[255];
      dprintf(("", "validate_bootblock_data(): Error: Target is inconsistent with nci_tag\n"));
      sprintf(error_string, "nci_tag %0x is not an NVRAM tag.", p->nci_tag_number);
      append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, p->nci_tag_number);
      return (-1);
    }

    if (p->nci_tag_number >= 0x500 && (p->target == E_TARGET_TYPE_MAIN_BB || p->target == E_TARGET_TYPE_DEFAULT_BB))
    {
      char error_string[255];
      dprintf(("", "validate_bootblock_data(): Error: Target is inconsistent with nci_tag\n"));
      sprintf(error_string, "nci_tag %0x is not a main bootblock tag.", p->nci_tag_number);
      append_error(error_string, E_ERROR_MALFORMED_EXCLUSIONS_FILE, p->nci_tag_number);
      return (-1);
    }

    /* Ensure that the same <target>:<tag> combination is not mentioned twice. */
    SLIST_FOREACH(p_inner, inclusions, list_link)
    {
      /* Ensure we are not comparing the same node. */
      if (p_inner == p)
      {
        continue;
      }

      if ((p->nci_tag_number == p_inner->nci_tag_number) && (p->target == p_inner->target))
      {
        char error_string[255];
        dprintf(("", "validate_bootblock_data(): Error: The same tag number has two rules.\n"));
        sprintf(error_string, "Tag %d has two exclusions rules.", p->nci_tag_number);
        append_error(error_string, E_ERROR_EXCLUSIONS_TAG_PRESENT_MULTIPLY, p->nci_tag_number);
        return (-1);
      }
    }
  }
  return (0);
}



/* This routine validates the nvram data held in the data structure. It does this in two ways:
   *) It checks the data against the exclusions file; i.e. it checks that all excluded tags are absent and all included tags were included;
   *) It chacks the integrity of the data. For instance it checks that all countries are valid countries under RISC OS.
*/

unsigned int validate_nvram_data(void)
{
  int loop = 0;
  dprintf(("", "validate_nvram_data()\n"));

  /* Scan through the biglist and look for all the elements that have an nci_tag type > 500 (i.e. are NVRAM tags and *not* bootblock tags. */
  for (loop=0; loop<SIZE_OF_BIGLIST; loop++)
  {
    bool allocated_memory = false;
    char* converted_string = NULL;
    if (biglist[loop].tag_number > 500) /* An NVRAM tag */
    {
      char* value = NULL;
      dprintf(("", "validate_nvram_data(): Attempting to get NVRAM tag %s\n", biglist[loop].name));

      value = get_nvram_tag_string(biglist[loop].name);
      if (value != NULL) /* Is not an NULL, i.e. has a value */
      {
        converted_string = convert_nvram_tag_value_to_string(loop, value, &allocated_memory);
        if (converted_string)
        {
          dprintf(("", "validate_nvram_data(): NVRAM_TAG:%s=%s\n", biglist[loop].name, converted_string));
        }
        else /* Unconverted string - raw value */
        {
          dprintf(("", "validate_nvram_data(): NVRAM_TAG:%s=%s\n", biglist[loop].name, value));
        }
      }

      /* Free memory - don't free converted_string if no memory was allocated. */
      if (allocated_memory && converted_string)
      {
        rmfree((unsigned char*)converted_string);
        converted_string = NULL;
      }
      if (value)
      {
        rmfree((void*)value);
        value = NULL;
      }
    }
  }
}
