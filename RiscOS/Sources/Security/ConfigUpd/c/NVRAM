
/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "swis.h"
#include "Debuglib/Debuglib.h"
#include "kernel.h"
#include "PortMan.h"

/* Include headers from ncmalib */
#include "ncma_tags.h"
#include "dynalloc.h"
#include "smcard.h"
#include "smtags.h"
#include "ncma_bootb.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "cu_nvram.h"
#include "cu_main.h"
#include "cu_utils.h"

/*Include local headers */
#include "NVRAM.h"


static nvram_tags nvram_tags_list[] =
{
  { "ISPCAccessPassword", NULL, 0, 0, true},
  { "NCMAHiddenPhoneNumber", NULL, 0, 0, true},
  { "NCMAStartHiddenDialPassword", NULL, 0, 0, true},
  { "DefaultTerritory", NULL, 0, 0, true},
  { "DefaultCountry", NULL, 0, 0, true},
  { "DefaultTimeZone", NULL, 0, 0, true},
  { "ModemCountry", NULL, 0, 0, true},
  { "NCMARegistrationServerPassword", NULL, 0, 0, true},
  { NULL, NULL, 0, 0, false}
};




/* This routine returns true if the tags_list entry is successfully filled. */

bool fill_nvram_tags_list(char* altered_value, unsigned int size, const char* const tag, const int tag_number)
{
  unsigned int loop = 0;
  dprintf(("", "fill_nvram_tags_list(): Filling NVRAM tag %s (number %d) with tag of length %d\n", tag, tag_number, size));
  while (nvram_tags_list[loop].external_tag_name != NULL)
  {
    if (strcmp(nvram_tags_list[loop].external_tag_name, tag) == 0)
    {
      dprintf(("", "fill_nvram_tags_list(): Tag %s found.\n", tag));
      nvram_tags_list[loop].value = (void*)rmalloc(size+1, "NVRAM tag list");
      memcpy(nvram_tags_list[loop].value, altered_value, size);
      nvram_tags_list[loop].size = size;
      nvram_tags_list[loop].tag_number = tag_number;
      return (true);
    }
    loop++;
  }

  return (false);
}





/* This routine frees all the memory allocated to the nvram tags list. */
void free_nvram_tags_list(void)
{
  unsigned int loop = 0;
  dprintf(("", "free_nvram_tags_list()\n"));
  while (nvram_tags_list[loop].external_tag_name != NULL)
  {
    if (nvram_tags_list[loop].value)
    {
      rmfree ((unsigned char*)nvram_tags_list[loop].value);
      nvram_tags_list[loop].value = NULL;
    }
    nvram_tags_list[loop].size = 0;
    loop++;
  }
}



/* This displays the current nvram_tags list.
   This only displays anything in debug builds.
*/
void display_nvram_tags_list(void)
{
#ifdef DEBUGLIB
  unsigned int loop = 0;
  dprintf(("", "display_nvram_tags_list()\n"));
  while (nvram_tags_list[loop].external_tag_name != NULL)
  {
    if (nvram_tags_list[loop].size > 0)
    {
      switch (nvram_tags_list[loop].tag_number)
      {
        case e_tagname_configurationaccesspassword:
        case e_tagname_alternatedialnumber:
        case e_tagname_alternatedialpassword:
        {
          dprintf(("", "display_nvram_tags_list(): Tag %s is %s\n", nvram_tags_list[loop].external_tag_name, nvram_tags_list[loop].value));
          break;
        }

        case e_tagname_defaultterritory:
        {
          int country_num = (lookup_country(nvram_tags_list[loop].value) ^ 1)+1;
          dprintf(("", "display_nvram_tags_list(): Tag %s is %s (%d)\n", nvram_tags_list[loop].external_tag_name, lookup_country_from_number(country_num), country_num));
          break;
        }

        case e_tagname_modemcountry:
        case e_tagname_defaultcountry:
        case e_tagname_defaulttimezone:
        {
          int country_num = (lookup_country(nvram_tags_list[loop].value)+1);
          dprintf(("", "display_nvram_tags_list(): Tag %s is %s (%d)\n", nvram_tags_list[loop].external_tag_name, lookup_country_from_number(country_num), country_num));
          break;
        }

        default:
          dprintf(("", "display_nvram_tags_list(): Unrecognised tag number %d\n", nvram_tags_list[loop].tag_number));
          break;
      }
    }
    loop++;
  }
#endif /* DEBUGLIB */
}



/* This routine takes the NVRAM tag passed in and alters it from the external representation (e.g. UK) to an internal reprsentation for that tag. For instance the DefaultTimeZone tag may be represented by the string Germnay in the upgrade file but by the number 4 in th NVRAM.
   It returns true if the conversion was successful, false otherwise.
 */
unsigned int convert_nvram_tag_to_internal_representation(const int tag_number, const char* const tag_value, char** altered_tag)
{
  dprintf(("","convert_nvram_tag_to_internal_representation():tag_value is %s\n", tag_value));
  if (*altered_tag) /* Value of altered_tag should be NULL initially */
  {
    dprintf(("","convert_nvram_tag_to_internal_representation(): Altered_tag should not be NULL.\n"));
    return (0);
  }

  switch (tag_number)
  {
    case e_tagname_configurationaccesspassword:
    case e_tagname_alternatedialnumber:
    case e_tagname_alternatedialpassword:
    case e_tagname_ncmaregistrationserverpassword:
    {
      *altered_tag = (void*)rmalloc(biglist[tag_number].maxlen+1, "NVRAM tag store");
      if (!*altered_tag)
      {
        dprintf(("","convert_nvram_tag_to_internal_representation(): Error allocating memory.\n"));
      }
      else
      {
        strcpy(*altered_tag, tag_value);
        pad_string(*altered_tag, 0x00, biglist[tag_number].maxlen);
        dprintf(("","convert_nvram_tag_to_internal_representation(): Tag is now %s\n", *altered_tag));
        return (biglist[tag_number].maxlen);
      }
    }
    break;

    case e_tagname_defaultterritory:
    {
      /* We need to convert the value to an internal territory number */
      int value = lookup_country(tag_value) ^ 1;
      dprintf(("","convert_nvram_tag_to_internal_representation(): Value is now %d\n", value));
      *altered_tag = (void*)rmalloc(4, "NVRAM tag store");
      if (!*altered_tag)
      {
        dprintf(("","convert_nvram_tag_to_internal_representation(): Error allocating memory.\n"));
      }
      else
      {
        **altered_tag = value;
        return (1); /* A byte value */
      }
    }
    break;

    case e_tagname_modemcountry:
    case e_tagname_defaultcountry:
    case e_tagname_defaulttimezone:
    {
      /* We need to convert the value to an internal territory number */
      int value = lookup_country(tag_value);
      dprintf(("","convert_nvram_tag_to_internal_representation(): Value is now %d\n", value));
      *altered_tag = (void*)rmalloc(4, "NVRAM tag store");
      if (!*altered_tag)
      {
        dprintf(("","convert_nvram_tag_to_internal_representation(): Error allocating memory.\n"));
      }
      else
      {
        **altered_tag = value;
        return (1); /* A byte value */
      }
    }
    break;

    default:
      return (0);
      break;
  }

  return (0);
}


/*
  Certain tags (e.g. modem country) need wrapping up or converting before they are sent back to the server. This routine returns a pointer to the new string if conversion is necessary, NULL otherwise.
*/
char* convert_nvram_tag_value_to_string(const int internal_number, const char* const tag_value)
{
  int val = *tag_value;
  char* return_val = NULL;
  dprintf(("", "convert_nvram_tag_value_to_string(): Internal number is %d and tag value is %s\n", internal_number, tag_value));

  switch (internal_number)
  {
    /* Convert number to territory name */
    case e_tagname_defaultterritory:
    case e_tagname_defaultcountry:
    case e_tagname_modemcountry:
    {
      return_val = lookup_country_from_number(val);
      dprintf(("", "convert_nvram_tag_value_to_string(): Territory %d is %s\n", val, return_val));
      break;
    }

    case e_tagname_defaulttimezone:
    {
      return_val = timezone_int_to_string(val);
      break;
    }

    case e_tagname_dnsserver1:
    case e_tagname_dnsserver2:
    {
      dprintf(("", "convert_nvram_tag_value_to_string(): Attempting to convert DNS server value %d.\n", val));
      return_val = (void*)rmalloc(100, "temporary DNS store.");
      if (!return_val)
      {
        dprintf(("", "convert_nvram_tag_value_to_string(): Error allocating memory for temporary DNS store.\n"));
        return (NULL);
      }
      ip_ntos(return_val, (char*)&val);
    }

    default:
      return (NULL);
  }

  return (return_val);
}




/* This routine outputs the values of *all* the NVRAM tags known by this program into the file shown. */
void output_nvram_tags(const char* const filename)
{
  /* Scan through the biglist and look for all the elements that have an nci_tag type of 0 (i.e. are NVRAM tags and *not* bootblock tags. */
  int loop = 0;
  FILE *f;

  /* Open the output file for writing */
  if((f = fopen(filename, "a+"))==NULL)
  {
    dprintf(("", "output_list_of_tags(): couldn't open %s for writing\n", filename));
    return;
  }

  for (loop=0; loop<SIZE_OF_BIGLIST; loop++)
  {
    if (biglist[loop].tag_number == 0) /* An NVRAM tag */
    {
      char* value = get_nvram_tag_string(biglist[loop].name);
      if (strlen(value) > 0) /* Is not an NULL, i.e. has a value */
      {
        char* converted_string = convert_nvram_tag_value_to_string(loop, value);
        if (converted_string)
        {
          dprintf(("", "output_nvram_tags(): NVRAM tag %s value is %s (converted to %s)\n", biglist[loop].name, value, converted_string));
          fprintf(f, "NVRAM_TAG:%s=%s\n", biglist[loop].name, converted_string);
        }
        else /* Unconverted string - raw value */
        {
          fprintf(f, "NVRAM_TAG:%s=%s\n", biglist[loop].name, value);
        }
      }

      /* Free memory - don't free converted_value */
      if (value)
      {
        rmfree((void*)value);
        value = NULL;
      }
    }
  }

  /* And close the file */
  fclose(f);
}



/*
  This routine writes the value to the tag passed in. It returns true if the tag was written successfully, false othrwise.
*/

bool write_nvram_value(const char* const nvram_tag, const char* const value, const int size, bool in_protected_area)
{
  _kernel_oserror* err = NULL;
  _kernel_swi_regs regs;
  int start_size = -1;

  /* Perform validations */
  if (!nvram_tag)
  {
    dprintf(("", "write_nvram_value(): Error: Tag is NULL\n"));
    return (false);
  }
  if (!value)
  {
    dprintf(("", "write_nvram_value(): Error: Value of tag %s is NULL\n", nvram_tag));
    return (false);
  }
  if (size < 0)
  {
    dprintf(("", "write_nvram_value(): Error: Value of size is %d\n", size));
    return (false);
  }

  /* Deprotect the NVRAM area if necessary. */
  if (in_protected_area)
  {
    regs.r[0] = 1;
    regs.r[1] = (int)"EEPROM_Protect";
    err = _kernel_swi (PortMan_AccessBit, &regs, &regs);
    if (err)
    {
      dprintf(("", "write_nvram_value(): Error %s whilst deprotecting the Protected area of NVRAM (PortMan call).\n", err->errmess));
    }

    /* Get the current size of the protected area and write the value. */
    regs.r[0] = 5;
    regs.r[1] = -1;
    err = _kernel_swi (OS_NVMemory, &regs, &regs);
    start_size = regs.r[1];

    dprintf(("", "write_nvram_value(): Deprotecting the Protected area of NVRAM.\n"));
    regs.r[0] = 5;
    regs.r[1] = SIZE_OF_NVRAM;
    err = _kernel_swi (OS_NVMemory, &regs, &regs);
    if (err)
    {
      dprintf(("", "write_nvram_value(): Error whilst deprotecting the Protected area of NVRAM.\n"));
      return (false);
    }
  }

  /* Now write the value. */
  dprintf(("", "write_nvram_value(): Writing NVRAM tag %s (size %d)\n", nvram_tag, size));
  regs.r[0] = (int)nvram_tag;
  regs.r[1] = (int)value;
  regs.r[2] = size;
  err = _kernel_swi(NVRAM_Set, &regs, &regs);
  if (err)
  {
    dprintf(("", "write_nvram_value(): Error %s attempting to write NVRAM tag\n", err->errmess));
  }
  else
  {
    dprintf(("", "write_nvram_value(): NVRAM tag %s successfully written to NVRAM.\n", nvram_tag));
  }

  /* Protect the NVRAM area if necessary. */
  if (in_protected_area)
  {
    dprintf(("", "write_nvram_value(): Protecting the Protected area of NVRAM (setting writable area to %d bytes)\n", start_size));
    regs.r[0] = 5;
    regs.r[1] = start_size;
    err = _kernel_swi (OS_NVMemory, &regs, &regs);
    if (err)
    {
      dprintf(("", "write_nvram_value(): Error whilst protecting the Protected area of NVRAM %s\n", err->errmess));
    }

    regs.r[0] = 3;
    regs.r[1] = (int)"EEPROM_Protect";
    err = _kernel_swi (PortMan_AccessBit, &regs, &regs);
    if (err)
    {
      dprintf(("", "write_nvram_value(): Error '%s' whilst deprotecting the Protected area of NVRAM (PortMan call).\n", err->errmess));
    }
    else
    {
      dprintf(("", "write_nvram_value(): Size of writeable area of NVRAM is %d\n.", start_size));
    }
  }

  return (true);
}




/* This routine writes all the values held in te nvram_tags_list to nvram. */
bool write_nvram_tags_list_to_nvram(void)
{
  int loop=0;
  dprintf(("", "write_nvram_tags_list_to_nvram()\n"));

  while (nvram_tags_list[loop].external_tag_name != NULL)
  {
    if (nvram_tags_list[loop].value != NULL) /* Only attempt to write the tag if it has a value. */
    {
      write_nvram_value(nvram_tags_list[loop].external_tag_name, nvram_tags_list[loop].value, nvram_tags_list[loop].size, nvram_tags_list[loop].in_protected_area);
    }
    loop++;
  }
  return (true);
}

