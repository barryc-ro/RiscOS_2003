Things to do (in no particular order of priority):
	* Make the SWI's work from a block of memory, not a file as per FS. - DONE
	* Get and implement a SWI error block. - DONE
	* Implement Exclusions file handling as per spec. - DONE
	* Update FS with NCMARegistrationServerPassword NVRAM tag and new SWI
interface.
	* Implement and document more test harnasses.
	* Implement the generation of error strings - DONE
	* We need a build-time option that will cause the
BBDEFAULT:BootblockWritten flag to always be 1 once the default bootblock has
been written to for the first time. If this tag is 1, then no more writes to
the default bootblock should be allowed. This is an Alba 2.0 requirement to
allow the default bootblock to be written to only once. Note that the main
bootblock can be written to many times.
	* Add support for more tag types. Int and HTTP_URL are good ones to
start with.
	* Alter FS and code to allow tags to have no value, eg.
BBMAIN:ISP_NAME= . This is currently flagged as an error, but could be useful
for allowing ISP's to blank out existing fields.
	* Thoroughly check memory handling. Enable the module to be built
with MemCheck, and then run it thoroughly through all the test harnesses.
	* Currently the 'AcceptFile' SWI attempts to write an empty bootblock
if the file passed in does not exist. This should not happen ;-) This will
probably be fixed when we move from using files to memory blocks to pass the
data. - DONE
	* The CU file parsing will currently not deal very well with lines
which are greater than LINE_BUFFER_SIZE in length. Whilst this shoud not
really matter, if the module is passed a random pointer it coud well happen.
Protect against this by a) allocating memory on the fly for the line buffer,
and b) making the parsing of the file fail if it is obviously corrupt. - DONE
	* Alter the SWI interface so that it also passes out a pointer to the
server URL. - DONE
	


NCMALib:
	* Currently NCMALib is not as efficient in storing data as it could
be, as build_ram_cache() stores the entire bootblock image *and* all the
decoded tags, essentially wasting some memory. To fix this, once
build_ram_cache() has been called and the tags decoded successfully, the
bootblock image should be removed and the discreet tags used from then om
until it is time to generate a new bootblock incorporating the updated tags.
	* Need to implement code in NCMALib to write word IP's and Int's to
the bootblock. At the same time make all the different tag types use generic
writing routines (two should be needed- one for words (IP and Int), and the
other String (for strings, URL's etcetera).


General notes:
	This system is starting to head towards a general system where any
system-specific data can be written or read. Currently this includes all T0
bootblock data along with selected NVRAM tags.
	The NVRAM and bootblock systems are very different in the manner in
which they store data, and so this system could be seen as a sort of
'unifying' system, providing a common API to all system configuration data. 
	For this reason some form of unique numbering system has to be given
to *all* data over which this system is used. Currently bootblock tags have
their own unique id, the nci_tag number, whilst NVRAM tags do not have any.
From now on NCMALib will allocate nci_tag values of greater than 0x500 for
NVRAM tags within its data structures.


Next things:
	*) Alter the FS to state the new target:tag format of exclusions files.
	DONE
	*) Get the configuration file saved to a memory area, not a file.
	DONE
	*) Get it working in conjunction with UpgFetch
	DONE
	*) Sort out SWI error handling - get the module to report errors back
to the caller via the SWI error interface.
	DONE
	*) Alter the FS to detail altered error codes in more detail.
	*) Update FS with NCMARegistrationServerPassword NVRAM tag.
	