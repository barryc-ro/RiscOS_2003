Things to do (in no particular order of priority):
	* Make the SWI work from a block of memory, not a file as per FS.
	* Get and implement a SWI error block.
	* Implement Exclusions file handling as per spec.
	* Update FS with NCMARegistrationServerPassword NVRAM tag.
	* Implement and document more test harnasses.
	* Implement the generation of error strings.
	* We need a build-time option that will cause the
BBDEFAULT:BootblockWritten flag to always be 1 once the default bootblock has
been written to for the first time. If this tag is 1, then no more writes to
the default bootblock should be allowed. This is an Alba 2.0 requriement to
allow the default bootblock to be written to only once. Note that the main
bootblock can be written to many times.
	* Add support for more tag types. Int and HTTP_URL are good ones to
start with.
	* Alter FS and code to allow tags to have no value, eg.
BBMAIN:ISP_NAME= . This is currently flagged as an error, but could be useful
for allowing ISP's to blank out existing fields.
	* Thoroughly check memory handling. Enable the module to be built
with MemCheck, and then run it thoroughly through all the test harnesses.
	* Need to implement code in NCMALib to write word IP's and Int's to
the bootblock. At the same time make all te different tag types use generic
writing routines (two should be needed- one for words (IP and Int), and the
other String (for strings, URL's etcetera).
	* Currently the 'AcceptFile' SWI attempts to write an empty bootblock
if the file passed in does not exist. This should not happen ;-) This will
probably be fixed when we move from using files to memory blocks to pass the
data.
	


NCMALib:
	* Currently NCMALib is not as efficient in sotirng data as it could
be, build_ram_cache() stores the entire bootblock image *and* all the decoded
tags, essentially wasting some memory. To fix this, once build_ram_cache()
has been called and the tags decoded successfully, the bootblock image should
be removed and the discreet tags used.

