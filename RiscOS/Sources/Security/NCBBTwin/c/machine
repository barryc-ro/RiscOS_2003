#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "machine.h"
#include "module.h"
#include "reg_events.h"
#include "reg_status.h"
#include "scinter.h"
#include "reg_scbb.h"
#include "reg_auth.h"
#include "reg_utils.h"

#include "DBUG.h"


#define ENUM_DIR_SUPPORT

/* Historically I've used "Read" in state and transition names to indicate both present and past tense.
   Since this is a bit confusing, I've switched to the phonetic spellings "reed" and "red" to differentiate
   the two. AJS 28/10/98
*/

char *trans_string(BOOTBLOCK_TRANS trans)
{
  static char *t_table[] = {
    "Trans_Idle",
    "Trans_CardOK",
    "Trans_CardBad",
    "Trans_CardRemoved",
    "Trans_ReedCard",
    "Trans_WriteCard",
    "Trans_CompleteOK",
    "Trans_CompleteBad",
    "Trans_AuthFail",
    "Trans_AuthRetry",
    "Trans_AuthCard",
    "Trans_ChangeCHV",
  };


  return(t_table[trans]);
}

char *state_string(BOOTBLOCK_STATE state)
{
    static char *s_table[] = {
    "State_NoCard",
    "State_CardInserted",
    "State_BadCard",
    "State_WroteBootBlock",
    "State_RedBootBlock",
    "State_Error",
    "State_AuthFail",
    "State_ChangeCHV",
    "State_CardAuthCheck"
  };

  return(s_table[state]);
}

/* this is the NCbootblock ASM */
BOOTBLOCK_STATE machine(BOOTBLOCK_TRANS trans)
{
  _kernel_swi_regs r;
  char filename[MAX_FILEPATH];



  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock_machine: got transition %s in state %s\n", trans_string(trans), state_string(bootblock_state));

/*********************************************************************************

    GLOBAL TRANSITIONS

 *********************************************************************************/

  switch(trans) { /* global transitions that apply to all states */

    case Trans_CardOK:
    	 if(bootblock_state != State_NoCard) {
    	   DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock machine: pointless smartcard event - ignoring...\n");
    	   return(bootblock_state);
    	 } else break;

    case Trans_CardBad:
         set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
         clr_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
         status_service_call();
         return(State_BadCard);

    case Trans_CardRemoved:
    	 chv1_bit_set = 0;
    	 chv1_tries_left = -1; // 'not ready' value
    	 bootblock_loaded = 0;
    	 clr_authblock();
         reset_status_bits(SELECT_SC_STATUS);
         status_service_call();
         return(State_NoCard);

  }

  switch(bootblock_state) {

/*********************************************************************************

    STATE_NOCARD : there is no card inserted in the NC

 *********************************************************************************/

    case State_NoCard:

         switch(trans) {

           case Trans_CardOK:

		clr_authblock();
		chv1_bit_set = 1; // funai card always chv1
		chv1_required = 1;
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED | BB_STATUS_SC_VALID | BB_STATUS_LOCKED); // funai card always chv1
	        status_service_call();
	        memset(sc_bb_buffer, 0, BOOTBLOCK_BUFFER_SIZE);
	        bootblock_trans = Trans_AuthCard; /* force a state transition */
	        cardauth_retries = MAX_CARDAUTH_RETRIES;
	        setcallback();
	        return(State_CardAuthCheck);


           default: goto state_machine_error;

         }

/*********************************************************************************

    STATE_CARDAUTHCHECK : determine whether the relevant files are CHV1 protected

 *********************************************************************************/


    case State_CardAuthCheck: /* bootblock remains in this state until we've verified whether CHV1 access codes
    	 		      	 are needed or not. This is a change to earlier behaviour of reading a file and
    	 		      	 complaining if it's CHV1 blocked - because the s.card keeps a count of CHV1
    	 		      	 failures and locks the card out after 16 of them. Bummer. */

         switch(trans) {

           case Trans_AuthCard:

#ifdef STAT_SMARTCARD
                reauth_card:

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: checking card access permissions...\n");

#ifdef OLD_STYLE_STAT
		strncpy(filename, BOOTBLOCK_WEF_FILENAME, MAX_FILEPATH);
		r.r[0] = 3; /* validate s/c filenames, gimme struct */
           	r.r[1] = (int)filename;
           	r.r[2] = (int)&sc_stats;
#else
    	    	r.r[0] = (int)&sc_stats; // actually only returns an int, but sc_stats is handy
#endif
           	_kernel_swi(SCInterface_FileInfo, &r, &r); /* SCInterface_FileInfo */

           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);

           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_CardAuthCheck);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard read error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}

	    case Trans_CompleteBad:
	        if(--cardauth_retries) { /* let's have another go at that... */
	            DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard auth. failed...retrying\n");
	            goto reauth_card;
	        }
	        else { /* Nope, no good. Reject the card. */
                  set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
                  clr_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
                  status_service_call();
                  return(State_BadCard);
                }

            case Trans_CompleteOK:
#ifdef OLD_STYLE_STAT
                DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: FileInfo: File: %s  CHV1: %s Unblock: %s\n",
                  sc_stats.file?"YES":"NO", sc_stats.chv1_enabled?"YES":"NO", sc_stats.unblock_chv1_enabled?"YES":"NO");
                DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: Size: %d CHV1attempts: %d Unblock_attempts: %d\n",
                  sc_stats.size, sc_stats.chv1_attempts, sc_stats.unblock_chv1_attempts);
                DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: Num. files: %d Num. dirs: %d\n", sc_stats.num_files, sc_stats.num_dirs);

                chv1_tries_left = sc_stats.chv1_attempts;
                sc_bb_bytes = sc_stats.size;

                if(sc_stats.chv1_enabled == 0) { /* CHV1 not enabled */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: CHV1 not enabled\n");
                  clr_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED);
                  chv1_required = 0;
                  chv1_bit_set = 0;
                } else { /* CHV1 _is_ enabled */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: CHV1 REQUIRED!\n");
                  set_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED);
                  chv1_required = 1;
                  chv1_bit_set = 1;
                }

#else
    	    	chv1_tries_left = *((int *)(&sc_stats));
    	    	chv1_required = 1;
    	    	chv1_bit_set = 1;
    	    	sc_bb_bytes = -1; // don't know in advance

    	    	if(chv1_tries_left == -1) { // unlimited
    	    	    DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: unlimited CHV1 attempts\n");
    	    	    chv1_tries_left = 1<<30; // some big number for managed access to decrement
    	    	} else if(chv1_tries_left == 0) { // blocked
    	    	    DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: CHV1 is BLOCKED for this card\n");
    	    	} else {
    	    	    DBUG_PRINTF(DBUG_LVL_DIAG, "NCBootblock: %d attempts left at CHV1\n", chv1_tries_left);
    	    	}
    	    	set_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED); // chv1 always on for funai cards
    	    	status_service_call();
#endif


    	    	// move to CardInserted state, trigger a CardRead transition
    	    	bootblock_trans = Trans_ReedCard;
    	    	setcallback();
    	    	return(State_CardInserted);
#else
    	    	// fake chv1_tries_left: new SCInterface doesn't have _FileInfo
    	    	// replace this with call to suitable SWI when it becomes available
    	       chv1_tries_left = 10;
    	       chv1_required = 1;
    	       chv1_bit_set = 1;
    	       set_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED);
    	       bootblock_trans = Trans_ReedCard;
    	       setcallback();
    	       return(State_CardInserted);
#endif


            default: goto state_machine_error;

         }

/*********************************************************************************

    STATE_CARDINSERTED : the idle state when a smartcard is present

 *********************************************************************************/



    case State_CardInserted:

         switch(trans) {

           case Trans_ReedCard:
           	/* perform SWI to read index file - sc_completion event will cause transition */

           case Trans_AuthRetry: /* re-entry point after authentication failure */

            	set_authstate(State_CardInserted, Trans_AuthRetry); // push state in case of auth failure

    	    	if(chv1_required) { /* haven't had a PIN yet, so stop until we get one */
    	    	    DBUG_PRINTF(DBUG_LVL_DIAG, "NCBBTwin: PIN required before proceeding\n");
    	    	    set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
    	    	    status_service_call();
    	    	    return(State_AuthFail);
    	    	}

    	    	if(sc_bb_bytes == -1) { // unknown size
    	    	    sc_bb_bytes = BOOTBLOCK_BUFFER_SIZE;
    	    	}

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: reading data file (%d bytes)\n", sc_bb_bytes);
           	memset(sc_bb_buffer, 0, BOOTBLOCK_BUFFER_SIZE);
           	sc_bbs = 0;

		strncpy(filename, BOOTBLOCK_WEF_FILENAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate smartcard filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = 0;
           	r.r[3] = (int)sc_bb_buffer;
           	r.r[4] = sc_bb_bytes;
           	r.r[5] = (int)authblock.authblock_key;
           	r.r[6] = authblock.authblock_bytes;
           	_kernel_swi(SCInterface_Read, &r, &r); /* SCInterface_Read */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_RedBootBlock);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard read error %d - aborting...\n", r.r[0]);
		  set_status_bits(SELECT_SC_STATUS, BB_STATUS_READFAIL);
  		  status_service_call();

		  return(State_BadCard);
		}

           case Trans_WriteCard:
           	/* perform SWI to write index file - sc_completion event will cause transition */

		if(trans_bb_bytes > BOOTBLOCK_BUFFER_SIZE) {
		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: buffer too big for file - aborting\n");
	            clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK | BB_STATUS_AUTHFAIL);
	            set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL);
                    status_service_call();
                    return(State_CardInserted);
		}

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: writing bootblock file (%d bytes)\n", trans_bb_bytes);

		strncpy(filename, BOOTBLOCK_WEF_FILENAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate smartcard filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = 0;
           	r.r[3] = (int)trans_bb_buffer;
           	r.r[4] = trans_bb_bytes;
             	r.r[5] = (int)authblock.authblock_key;
             	r.r[6] = authblock.authblock_bytes;
           	_kernel_swi(SCInterface_Write, &r, &r); /* SCInterface_Write */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_WroteBootBlock);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard write error %d - aborting...\n", r.r[0]);
		  set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL);
		  status_service_call();
		  return(State_BadCard);
		}

           case Trans_ChangeCHV:

                /* perform SWI to change Cardholder Verification Value */
		clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: changing CHV1...\n");
                strncpy(filename, BOOTBLOCK_IEF_FILENAME, MAX_FILEPATH);
                r.r[0] = 0; /* validate smartcard filenames */
                r.r[1] = (int)filename;
                r.r[2] = 0x1; /* select CHV1 */
                r.r[3] = (int)authblock.authblock_key;
                r.r[4] = authblock.authblock_bytes;
                r.r[5] = (int)authblock_new.authblock_key;
                r.r[6] = authblock_new.authblock_bytes;
                _kernel_swi(SCInterface_ChangeCHV, &r, &r);
           	if(r.r[0] == SC_SUCCESS) {  /* write started ok */

		  return(State_ChangeCHV);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard auth. change error %d - aborting...\n", r.r[0]);
		  return(State_CardInserted);
		}



           default: goto state_machine_error;

         }

/*********************************************************************************

    STATE_REDBOOTBLOCK : completion of an attempt to read a bootblock

 *********************************************************************************/

    case State_RedBootBlock:

         switch(trans) {


           case Trans_AuthFail:
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: authorization failure reading bootblock data.\n");
		 set_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED | BB_STATUS_AUTHFAIL);
  		 status_service_call();

                 return(State_AuthFail);

           case Trans_CompleteBad:
           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: error reading bootblock chunk - aborting\n");
		set_status_bits(SELECT_SC_STATUS, BB_STATUS_READFAIL);
  		status_service_call();

           	return(State_BadCard);

           case Trans_CompleteOK:
           	/* determine whether there's more to read, and set trans accordingly */

           	bootblock_loaded = 1;

           	sc_bb_bytes = grok_buffer(sc_bb_buffer); // figure out buffer size
           	DBUG_PRINTF(DBUG_LVL_DIAG, "machine: bootblock is %d bytes\n", sc_bb_bytes);
           	clr_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED | BB_STATUS_AUTHFAIL);
           	set_status_bits(SELECT_SC_STATUS, BB_STATUS_READOK);
           	status_service_call();

           	return(State_CardInserted);

       	default:
       	    	goto state_machine_error;
       	 }

/*********************************************************************************

    STATE_WROTEBOOTBLOCK : completion of an attempt to write a bootblock

 *********************************************************************************/


    case State_WroteBootBlock:

         switch(trans) {

           case Trans_AuthFail:
    	    	// change from previous behaviour - writes do NOT now re-try after successful CHV response
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL | BB_STATUS_WRITEFAIL);
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK);
	        status_service_call();
		return(State_CardInserted);

           case Trans_CompleteBad:
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK | BB_STATUS_AUTHFAIL);
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL);
	        status_service_call();
	        return(State_CardInserted);

           case Trans_CompleteOK:
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL | BB_STATUS_AUTHFAIL);
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK);
	        status_service_call();

	        memcpy(sc_bb_buffer, trans_bb_buffer, trans_bb_bytes);

	        sc_bb_bytes = trans_bb_bytes;
	        bootblock_loaded = 1;

           	return(State_CardInserted);

           default: goto state_machine_error;

         }


/*********************************************************************************

    STATE_AUTHFAIL : authentication failure - idle state until correct PIN is supplied

 *********************************************************************************/

    case State_AuthFail:
    	 switch(trans) {

    	   case Trans_AuthRetry: /* standard authentication retry handler - triggered by authenticate SWI/cli */

    	        DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: initiating authentication retry...\n");

		clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);

		if((sc_status & (BB_STATUS_LOCKED |BB_STATUS_PIN)) != (BB_STATUS_LOCKED | BB_STATUS_PIN)) {
		  set_status_bits(SELECT_SC_STATUS, BB_STATUS_PIN | BB_STATUS_LOCKED);
		}

    	        if(authfail_state != State_NoCard) {
    	          bootblock_trans = Trans_AuthRetry;
    	          bootblock_state = authfail_state;
    	          authfail_trans = Trans_Idle;
    	          authfail_state = State_NoCard;
    	          setcallback();
    	        } else {
    	          /* no action, so we become idle */
    	          bootblock_trans = Trans_Idle;
    	          bootblock_state = State_CardInserted;
    	        }
    	        return(bootblock_state);

           case Trans_ChangeCHV: /* user can do an alter pin instead of straight pin entry */

                /* perform SWI to change Cardholder Verification Value */
		clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: changing CHV1...\n");
                strncpy(filename, BOOTBLOCK_IEF_FILENAME, MAX_FILEPATH);
                r.r[0] = 0; /* validate smartcard filenames */
                r.r[1] = (int)filename;
                r.r[2] = 0x1; /* select CHV1 */
                r.r[3] = (int)authblock.authblock_key;
                r.r[4] = authblock.authblock_bytes;
                r.r[5] = (int)authblock_new.authblock_key;
                r.r[6] = authblock_new.authblock_bytes;
                _kernel_swi(SCInterface_ChangeCHV, &r, &r);

           	if(r.r[0] != SC_SUCCESS) {  /* write started badly */
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: smartcard auth. change error %d - aborting...\n", r.r[0]);
		  set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
		  status_service_call();
		}

		return(State_AuthFail); // remain in this state until completion status is known
    	        break;


          case Trans_AuthFail: /* handle return codes from a CHV change within AuthFail state */
           case Trans_CompleteBad:

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: authentication failure on CHV change request.\n");
           	set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
           	status_service_call();
           	return(State_AuthFail);

           case Trans_CompleteOK: // CHV changed successfully - recover previous state

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: CHV change completed OK.\n");
                update_authblock();
                if((sc_status & BB_STATUS_PIN)==0) set_status_bits(SELECT_SC_STATUS, BB_STATUS_PIN);
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                status_service_call();

    	        if(authfail_state != State_NoCard) {
    	          bootblock_trans = Trans_AuthRetry;
    	          bootblock_state = authfail_state;
    	          authfail_trans = Trans_Idle;
    	          authfail_state = State_NoCard;
    	          setcallback();
    	        } else {
    	          /* no action, so we become idle */
    	          bootblock_trans = Trans_Idle;
    	          bootblock_state = State_CardInserted;
    	        }
    	        return(bootblock_state);



           default: goto state_machine_error;

    	 }


/*********************************************************************************

    STATE_CHANGECHV : the user has requested that the s/c CHV1 PIN be changed

 *********************************************************************************/

    case State_ChangeCHV:
         switch(trans) {

           case Trans_AuthFail:
           case Trans_CompleteBad:

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: authentication failure on CHV change request.\n");
           	set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
           	status_service_call();
           	return(State_CardInserted);

           case Trans_CompleteOK:

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: CHV change completed OK.\n");
                update_authblock();
                if((sc_status & BB_STATUS_PIN)==0) set_status_bits(SELECT_SC_STATUS, BB_STATUS_PIN);
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                status_service_call();
                return(State_CardInserted);

           default: goto state_machine_error;
         }

/*********************************************************************************

    STATE_BADCARD : an invalid smartcard has been inserted

 *********************************************************************************/

    case State_BadCard:

         switch(trans) {

           case Trans_CardRemoved:
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
                status_service_call();
                return(State_NoCard);

           default: goto state_machine_error;

         }

/*********************************************************************************

    STATE_ERROR : an unrecoverable error has occured - this state is FINAL

 *********************************************************************************/

    case State_Error:
    default:
         return(State_Error);

  }

state_machine_error:

  /* ignore i/o acks that we weren't expecting - these may have been generated by support modules
     or by a completely different app.
  */

  if((trans == Trans_CompleteOK) || (trans == Trans_CompleteBad) || (trans == Trans_AuthFail)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "NCbootblock: spurious I/O ACK from smartcard driver...ignoring\n");
    return(bootblock_state);
  }

  /* otherwise . . . PANIC!! */

  DBUG_PRINTF(DBUG_LVL_PANIC, "NCbootblock: state machine panic - invalid transition event %s in state %s\n",
  		      trans_string(bootblock_trans), state_string(bootblock_state));
  DBUG_PRINTF(DBUG_LVL_PANIC, "            setting state to State_Error\n");
  return(State_Error);
}
