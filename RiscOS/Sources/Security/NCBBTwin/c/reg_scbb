/* scbb.c - smartcard boot block internals */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PROTOTYPES_INTERNAL
#include "reg_scbb.h"
#include "dynalloc.h"
#include "reg_utils.h"
#include "DBUG.h"

////////////////////////////////////////////////////////////////////////////////
// init_scbb: claim memory for bootblock buffer, and working write copy
int init_scbb(void)
{
    if((sc_bb_buffer = (unsigned char *)rmalloc(2 * BOOTBLOCK_BUFFER_SIZE, "Bootblocks"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "init_scbb: couldn't claim bootblock buffers\n");
        return(-1);
    }

    trans_bb_buffer = sc_bb_buffer + BOOTBLOCK_BUFFER_SIZE;


    DBUG_PRINTF(DBUG_LVL_DIAG, "init_scbb: sc-0x%x trans-0x%x\n", sc_bb_buffer, trans_bb_buffer);


    return(0);
}

////////////////////////////////////////////////////////////////////////////////
// grok_buffer: figure out buffer size, and parse for debug
////////////////////////////////////////////////////////////////////////////////
int grok_buffer(unsigned char *buffer)
{
    unsigned char *ptr = buffer;
    unsigned int bytes = 0;
    unsigned char tag = 0;
    unsigned char len = 0;

    for(;;) {
        tag = *ptr++;
        len = *ptr++;

        switch(tag) {
            case 0x80:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: CARD tag, length %d\n", len);
            	break;

            case 0x81:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: PHONE_NUMBER tag, length %d\n", len);
            	break;

            case 0x82:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: ACCOUNT_ID tag, length %d\n", len);
            	break;

           case 0x83:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: ACCOUNT_PASSWORD tag, length %d\n", len);
            	break;

           case 0x84:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: DNS_1 tag, length %d\n", len);
            	break;

           case 0x85:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer, DNS_2 tag, length %d\n", len);
            	break;

           case 0x86:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: EMAIL_ID tag, length %d\n", len);
            	break;

           case 0x87:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: EMAIL_PASSWORD tag, length %d\n", len);
            	break;

           case 0x88:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: EMAIL_ADDR tag, length %d\n", len);
            	break;

           case 0x89:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: POP_SERVER tag, length %d\n", len);
            	break;

           case 0x8a:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: SMTP_SERVER tag, length %d\n", len);
            	break;

           case 0x8b:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: URL tag, length %d\n", len);
            	break;

           case 0x8c:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: GATEWAY tag, length %d\n", len);
            	break;

           case 0x8d:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: PROXY tag, length %d\n", len);
            	break;

           case 0x8e:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: TIME_SERVER tag, length %d\n", len);
            	break;

           case 0x8f:
            	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: WEBMAIL_URL tag, length %d\n", len);
            	break;

    	    default:
    	    	DBUG_PRINTF(DBUG_LVL_DIAG, "grok_buffer: UNRECOGNISED TAG -- end of buffer\n");
    	    	return(bytes);
    	}

    	dump_block(ptr, len);
    	ptr += len;
    	bytes += len + 2;
    }

    return(0); // shouldn't ever get here
}


