#include <stdio.h>

#include "kernel.h"
#include "swis.h"
#define PROTOTYPES_INTERNAL
#include "dynalloc.h"

struct rmalloc_data_block {
  int area_number;
  char *area_start;
} rmalloc_data[MAX_RMA_MALLOX];

int num_mallox = 0;

void rmalloc_init(void)
{
  int loop;
  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    rmalloc_data[loop].area_number = -1;
    rmalloc_data[loop].area_start = NULL;
  }

  num_mallox = 0;
  return;
}

char *rmalloc(int bytes, char *descrip)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;
  int loop;


  if (num_mallox >= MAX_RMA_MALLOX) goto no_free_mem;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++)
    if(rmalloc_data[loop].area_number == -1) {

      r.r[0] = 0;
      r.r[1] = -1;
      r.r[2] = bytes;
      r.r[3] = -1;
      r.r[4] = 128; /* not draggable */
      r.r[5] = bytes; /* 1 Meg */
      r.r[6] = 0;
      r.r[7] = 0;
      r.r[8] = (int) descrip;

      if ((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL) goto bad_rmalloc;

     rmalloc_data[num_mallox].area_number = r.r[1];
     rmalloc_data[num_mallox].area_start = (char *) r.r[3];
     num_mallox++;
     return (char *)(r.r[3]);
   }

bad_rmalloc:
    // PutMessage("rmalloc: OS_DynamicArea claim failed: \n");
no_free_mem:
    // PutMessage("rmalloc: Cannot claim any more memory.\n");

    return ((void *)NULL);
}







int rmfree(char *ptr)
{
  int loop;
  _kernel_swi_regs r;
  _kernel_oserror *e;

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    if ((rmalloc_data[loop].area_start == ptr) && (rmalloc_data[loop].area_number != -1)) {
      r.r[0] = 1;
      r.r[1] = rmalloc_data[loop].area_number;

      if((e=_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))!=NULL) {
          // PutMessage("rmfree: dynamic area release failed.\n");
	  return (NULL);
       }

       rmalloc_data[loop].area_number = -1;
       rmalloc_data[loop].area_start = NULL;
       num_mallox--;

       return (r.r[1]);
    }
  }
  return(NULL);
}








int rmfree_all(void)
{
  int loop;
  _kernel_swi_regs r;

  if(num_mallox==0) return(0);

  for(loop=0;loop<MAX_RMA_MALLOX;loop++) {
    r.r[0] = 1;
    if(rmalloc_data[loop].area_number != -1) {
      r.r[1] = rmalloc_data[loop].area_number;
      _kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r);
      rmalloc_data[loop].area_number = -1;
      rmalloc_data[loop].area_start = NULL;
    }
  }
  num_mallox = 0;
  return(1);
}


