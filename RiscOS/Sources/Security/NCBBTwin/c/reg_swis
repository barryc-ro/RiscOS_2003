/* c code for bootblock SWI calls */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"


#include "module.h"
#define PROTOTYPES_INTERNAL   /* declare our header file as local */
#include "reg_swis.h"
#include "reg_scbb.h"
#include "reg_status.h"
#include "machine.h"
#include "reg_auth.h"
#include "reg_utils.h"
#include "DBUG.H"

#include "scinter.h"
#include "smcardCCIJ.h"


int bootblock_nullswi(_kernel_swi_regs *r)  /* the "does nothing" swi */
{
    return (0);
}


int bootblock_enumerate_network_drivers(_kernel_swi_regs *r)
{
  return(0);
}

int bootblock_enumerate_smartcard_blocks(_kernel_swi_regs *r)
{
  return(0);
}

/* bootblock_enquiry():

   on entry: r0 = flags (1 = return even insecure blocks)

   on exit: r0 points to start of block, or error no.
      	    r1 is number of bytes in block
      	    r2 points to index block
      	    r3 is number of bytes in index block
      	    r4 points to alternate block or NULL
      	    r5 is number of bytes in alternate block or 0
      	    r6 is flags (1 = block is insecure, 2 = no block loaded)

   errors: -1 no block loaded, -2 block not authentic
*/

int bootblock_enquiry(_kernel_swi_regs *r)
{
    int ignore_authentication;

    ignore_authentication = r->r[0] & 0x1;


        r->r[4] = (int)NULL;
        r->r[5] = 0;


    if(bootblock_loaded != 1) {
        r->r[0] = -1;
        r->r[1] = 0;
    	r->r[2] = 0;
    	r->r[3] = 0;
    	r->r[6] = 3; /* not loaded, thus also implies not secure */

        return(0);
    }

            r->r[6] = 1; /* insecure */

    r->r[0] = (int)sc_bb_buffer;
    r->r[1] = sc_bb_bytes;
    r->r[2] = 0;
    r->r[3] = 0;

   return(0);

}

/* bootblock_status(): read bootblock status

   On entry:
   r0 = non zero to clear the status delta registers

   On exit:
   r0 = smartcard status
   r1 = network status
   r2 = smartcard delta
   r3 = smartcard delta
*/
int bootblock_status(_kernel_swi_regs *r)
{

  r->r[0] = sc_status;
  r->r[1] = net_status;
  r->r[2] = sc_delta_swi;
  r->r[3] = net_delta_swi;

  sc_delta_swi = net_delta_swi = 0;
  status_swi_count++;

  return(0);
}

/* bootblock_write(): write a smartcard bootblock

   on etry:  r0 -> block to write to smartcard
      	     r1 = size of block
      	     r2 -> alternate 1-800 block to write to smartcard
      	     r3 = size of block
      	     r4 = enterprise ID
      	     r5 -> intermediate certificate
      	     r6 = size of cert.

   on exit: r0 = 0 ok
      	    r0 = -1 enterprise block not authentic
      	    r0 = -2 enterprise block too big
      	    r0 = -3 bootblock is read only
      	    r0 = -4 enterprise block is read only
      	    r0 = -5 file write error
      	    r0 = -6 alt block too big
      	    r0 = -7 alternate block not authentic
*/

int bootblock_write(_kernel_swi_regs *r)
{



  if(r->r[1] > BOOTBLOCK_BUFFER_SIZE) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "bootblock_write: smartcard block too big\n");
      r->r[0] = -2;
      return(0);
  }

  memcpy(trans_bb_buffer, (char *)r->r[0], r->r[1]);
  trans_bb_bytes = r->r[1];

  // kick the ASM into action
  bootblock_trans = Trans_WriteCard;
  setcallback();
  return(0);

}

/* bootblock_authenticate() - pass PIN to smartcard subsystem

   On entry:

    r0 -> max. 8 byte authorization key
    r1 = no. bytes in key up to MAX_AUTHBLOCK_KEY (8 currently)

  On exit:

    r0 = no. bytes written to authentication key

*/
int bootblock_authenticate(_kernel_swi_regs *r)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "NCbootblock: Authentication block received.\n");
  if(chv1_required) chv1_required = 0; /* clear first-time PIN requirement */
  r->r[0] = set_authblock((char *)(r->r[0]), r->r[1]);

  // automatically trigger an authentication-retry and previous-state-recovery if we just
  // failed an authentication challenge

  if(bootblock_state == State_AuthFail) {
    bootblock_trans = Trans_AuthRetry;
    setcallback();
  }

  return(0);
}


/* bootblock_changechv() - change the Card Holder Verification key on the smartcard

   On entry:

     r0 = CHV selector, 1 for CHV1, 2 for CHV2 (only CHV1 ops. supported atm)
     r1 -> buffer containing new CHV1
     r2 = num. bytes in new CHV1
     r3 -> old CHV1 or NULL to use registry internal (from previous authenticate call)
     r4 = num. bytes in old CHV1 or 0 to use registry internal

   On exit:

     r0 = 0 - success
         -1 - bootblock busy
*/
int bootblock_changechv(_kernel_swi_regs *r)
{

  if((r->r[3] != 0) && (r->r[4] != 0)) {/* oooh, user supplied pin */
    if(chv1_required) chv1_required = 0;
    set_authblock((char *)(r->r[3]), r->r[4]);
  }
  set_authblockNU((char *)(r->r[1]), r->r[2]);
  bootblock_trans = Trans_ChangeCHV;
  setcallback();
  r->r[0] = 0;
  return(0);
}

/* bootblock_proxy - allows an external client to read smartcard files
   without knowing the CHV1

   On Entry:

      r0 = as SCInterface_Read
      r1 = as SCInterface_Read
      r2 = as SCInterface_Read
      r3 = as SCInterface_Read
      r4 = as SCInterface_Read
      r5 = NULL
      r6 = 0

   On exit:

      as SCInterface_Read
*/
int bootblock_proxy(_kernel_swi_regs *r)
{
  r->r[5] = (int)&authblock.authblock_key;
  r->r[6] = (int)authblock.authblock_bytes;
  _kernel_swi(XOS_Bit | SCInterface_Read, r, r);
  return(0);
}


/* bootblock_delete():
*/

int bootblock_pin_info(_kernel_swi_regs *r)
{
    r->r[0] = chv1_bit_set;
    r->r[1] = chv1_tries_left;
    r->r[2] = 0;
    r->r[3] = 0;
    r->r[4] = 0;
    return(0);
}

/* unblock smartcard CHV1

   on entry:

   r0 -> unblock pin
   r1 = unblock pin size
   r2 -> new pin
   r3 = new pin size

*/
int bootblock_unblock(_kernel_swi_regs *r)
{
    return(0);
}

