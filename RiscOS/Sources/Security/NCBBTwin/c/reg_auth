/* reg_auth.c - bootblock authorisation procedures */
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "machine.h"
#define PROTOTYPES_INTERNAL
#include "reg_auth.h"

int set_authblock(char *s, int n)
{
  if(n>MAX_AUTHBLOCK_KEY) n = MAX_AUTHBLOCK_KEY;
  memcpy(authblock.authblock_key, s, n);
  authblock.authblock_bytes = n;
  return(n);
}

int set_authblockNU(char *s, int n)
{
  if(n>MAX_AUTHBLOCK_KEY) n = MAX_AUTHBLOCK_KEY;
  memcpy(authblock_new.authblock_key, s, n);
  authblock_new.authblock_bytes = n;
  return(n);
}

int set_authblock_unblock(char *s, int n)
{
  if(n>MAX_AUTHBLOCK_KEY) n = MAX_AUTHBLOCK_KEY;
  memcpy(authblock_unblock.authblock_key, s, n);
  authblock_unblock.authblock_bytes = n;
  return(n);
}

void clr_authblock(void)
{
  memset(authblock.authblock_key, 0, MAX_AUTHBLOCK_KEY);
  authblock.authblock_bytes = 0;
}

void clr_authblockNU(void)
{
  memset(authblock_new.authblock_key, 0, MAX_AUTHBLOCK_KEY);
  authblock_new.authblock_bytes = 0;
}

void clr_authblock_unblock(void)
{
  memset(authblock_unblock.authblock_key, 0, MAX_AUTHBLOCK_KEY);
  authblock_unblock.authblock_bytes = 0;
}

void update_authblock(void)
{
  memcpy((void *)&authblock, (void *)&authblock_new, sizeof(AUTHBLOCK));
  memset((void *)&authblock_new, 0, sizeof(AUTHBLOCK));
}

void set_authstate(BOOTBLOCK_STATE s, BOOTBLOCK_TRANS t)
{
  authfail_state = s;
  authfail_trans = t;
}

void clr_authstate(void)
{
  authfail_state = State_NoCard;
  authfail_trans = Trans_Idle;
}
