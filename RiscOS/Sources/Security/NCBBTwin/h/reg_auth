// header file for REG_AUTH.H

/* Begin-Prologue */
#ifndef REG_AUTH_H
#define REG_AUTH_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
#define MAX_AUTHBLOCK_KEY       8              /* Max. bytes in a s/c auth. block */

#define MAX_CARDAUTH_RETRIES    5
#define CARDAUTH_PERM_BYTE      13
#define CARDAUTH_PERM_BIT_CHV1  128

#define CARDAUTH_ATTEMPTS_BYTE  18
#define CARDAUTH_ATTEMPTS_MASK  0xf

#ifndef AUTHBLOCK

typedef struct {
  char authblock_key[MAX_AUTHBLOCK_KEY];
  int authblock_bytes;
} AUTHBLOCK;

#endif

DECLARE AUTHBLOCK authblock;
DECLARE AUTHBLOCK authblock_new;
DECLARE AUTHBLOCK authblock_unblock;

DECLARE int cardauth_retries INIT(0);
DECLARE int chv1_required INIT(0);

DECLARE int chv1_bit_set INIT(0);
DECLARE int chv1_tries_left INIT(-1); // 'noy ready' value

DECLARE BOOTBLOCK_STATE authfail_state INIT(State_NoCard);
DECLARE BOOTBLOCK_TRANS authfail_trans INIT(Trans_Idle);

DECLARE int bootblock_authentic INIT(0);

DECLARE int set_authblock(char *, int);
DECLARE void clr_authblock(void);
DECLARE void set_authstate(BOOTBLOCK_STATE, BOOTBLOCK_TRANS);
DECLARE void clr_authstate(void);
DECLARE int set_authblockNU(char *, int);
DECLARE void clr_authblockNU(void);
DECLARE void update_authblock(void);
DECLARE int set_authblock_unblock(char *, int);
DECLARE void clr_authblock_unblock(void);



/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

