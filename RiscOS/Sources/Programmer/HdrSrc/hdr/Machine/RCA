        SUBT    Definition of the RCA platform ==> Hdr:Machine.RCA

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************
;
; Date       Name          Description
; ----       ----          -----------
; 14-Jul-93  JRoach        Created from Hdr:Machine.A5000
; 16-Sep-94  JHarris       Created from Hdr:Machine.Jordan
;  6-Jan-95  JHarris       Created from Hdr:Machine.Falcon
; 30-May-96  SMC           Added SystemName
; 15-Jul-96  JRH           Added ROMCardSupport, CanLiveOnROMCard
;                          and IOMD_C_ROMCardVpp. Set ExtROMis16bit to FALSE
; 05-Mar-97  SMC           Created from Hdr:Machine.Omega
;                          Added IOP allocations for RCA

                GBLS    SystemName
SystemName      SETS    "NC OS"

; CPU type (processor model, excluding cache and memory management)
                GBLS    CPU_Type
CPU_Type        SETS    "ARM600"
                GBLS    GetCPU
GetCPU          SETS    ("GET Hdr:CPU." :CC: "$CPU_Type")

; IO type (non generic interrupt masks, some IO locations)
                GBLS    IO_Type
IO_Type         SETS    "IOMD"
                GBLS    GetIO
; GetIO           SETS    ("GET Hdr:IO." :CC: "$IO_Type")
GetIO           SETS    ("GET Hdr:IO.IOMDL")

; Video controller - does the sound too
                GBLS    VIDC_Type
VIDC_Type       SETS    "VIDC20"
                GBLS    GetVIDC
GetVIDC         SETS    "GET Hdr:VIDC." :CC: VIDC_Type

; Memory controller, excluding memory management stuff. This
; one deals with memory speeds and DMA
                GBLS    MEMC_Type
MEMC_Type       SETS    "IOMD"
                GBLS    GetMEMC
GetMEMC         SETS    "GET Hdr:IO." :CC: MEMC_Type

                GBLS    MEMM_Type
MEMM_Type       SETS    "ARM600"
                GBLS    GetMEMM
GetMEMM         SETS    "GET Hdr:MEMM.ARM600"

; floppy controller
                GBLS    FDC_Type
FDC_Type        SETS    "FDC711"
                GBLS    GetFDC
GetFDC          SETS    "GET Hdr:FDC." :CC: FDC_Type

                GBLL    NewClockChip
NewClockChip    SETL    {TRUE}

                GBLS    Keyboard_Type
Keyboard_Type   SETS    "PC"

                GBLL    MorrisSupport
MorrisSupport   SETL    {TRUE}

                GBLL    StorkPowerSave
StorkPowerSave  SETL    {TRUE}


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;		System build options added for STB/NCD 
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; General flag for STB/NCD-type products
		GBLL	STB
STB		SETL	{TRUE}

; Support for battery manager hardware
		GBLL	BatManSupport
BatManSupport	SETL	{FALSE} :LAND: StorkPowerSave

; Podule type of hardware in podule 0 address space
; number taken from Hdr:PoduleReg, or 0 if podule0 slot is a real slot.
		GBLA	FakePodule0
FakePodule0	SETA	0

; Support for network 'podule' cards
		GBLL	NetPodSupport
NetPodSupport	SETL	{FALSE}

; Support for extension ROMs in 2nd bank
		GBLL	ExtROMSupport
ExtROMSupport	SETL	{TRUE}

; Support for OS images in 2nd ROM bank
		GBLL	ROMCardSupport
ROMCardSupport	SETL	{TRUE}

; Support for being an OS image in 2nd ROM bank
		GBLL	CanLiveOnROMCard
CanLiveOnROMCard	SETL	ROMCardSupport :LAND: {TRUE}

; 2nd ROM bank is 16bit wide
		GBLL	ExtROMis16bit
ExtROMis16bit	SETL	{FALSE}

; E2ROM is supported at i2c addresses >= A8 in addition to normal CMOS RAM
		GBLL	E2ROMSupport
E2ROMSupport	SETL	{TRUE}

; Support for 82C710 and 82C711 combo chips in addition to 665
		GBLL	OldComboSupport
OldComboSupport	SETL	{FALSE}


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;		Allocation of bits in 8bit I/O port at IOMD_CLINES
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; MonitorTypeLatch, or 0 if latch not present
		GBLA	IOMD_C_MonitorType
IOMD_C_MonitorType	SETA	(1<<0)

; Video power down for Chrontel, or 0 if bit not present
		GBLA	IOMD_C_VideoPowerDown
IOMD_C_VideoPowerDown	SETA	(1<<1)

; Right LED bit, or 0 if bit not present
		GBLA	IOMD_C_FrontPanelRightLED
IOMD_C_FrontPanelRightLED	SETA	(1<<3)

; Front panel button (may not actually be on front panel), 0=pressed
		GBLA	IOMD_C_FrontPanelButton
IOMD_C_FrontPanelButton	SETA	(1<<6)

; Left LED bit, or 0 if not present
		GBLA	IOMD_C_FrontPanelLeftLED
IOMD_C_FrontPanelLeftLED	SETA	(1<<7)


; PAL/NTSC bit, or 0 if bit not present
		GBLA	IOMD_C_PALNTSCType
IOMD_C_PALNTSCType	SETA	0

; Interlace phase bit in IOMD, or 0 if bit not present
		GBLA	IOMD_C_PhaseDetectBit
IOMD_C_PhaseDetectBit	SETA	0

; Front panel Write bit. 1=red, 0=green
		GBLA	IOMD_C_FrontPanelLED
IOMD_C_FrontPanelLED	SETA	0

; TVMode Write bit, or 0 if bit not present
		GBLA	IOMD_C_TVMode
IOMD_C_TVMode		SETA	0

; General IO bit
		GBLA	IOMD_C_GenIO
IOMD_C_GenIO		SETA	0

; ROM Card Vpp control, or 0 if bit not present
		GBLA	IOMD_C_ROMCardVpp
IOMD_C_ROMCardVpp	SETA	0

; Onboard podule 0 MPEG bit, 0 if bit not present
		GBLA	IOMD_C_MPEGfitted
IOMD_C_MPEGfitted	SETA	0

; Front panel Red LED Write bit, or 0 if bit not present
		GBLA	IOMD_C_FrontPanelRedLED
IOMD_C_FrontPanelRedLED	SETA	0

; Front panel Green LED Write bit, or 0 if bit not present
		GBLA	IOMD_C_FrontPanelGrnLED
IOMD_C_FrontPanelGrnLED	SETA	0

; CD fitted bit. 0=fitted, or 0 if bit not present
		GBLA	IOMD_C_CDfitted
IOMD_C_CDfitted		SETA	0

; Joystick type bits in IOMD, or 0 if bits not present
		GBLA	IOMD_C_JoystickDetectBits
IOMD_C_JoystickDetectBits	SETA	0

; Watchdog Write bit.
		GBLA	IOMD_C_Watchdog
IOMD_C_Watchdog		SETA	0


; Mask of all the readable bits
		GBLA	IOMD_C_ReadMask
IOMD_C_ReadMask	SETA	(IOMD_C_MPEGfitted :OR: IOMD_C_MonitorType :OR: IOMD_C_GenIO :OR: IOMD_C_CDfitted :OR: IOMD_C_PALNTSCType :OR: IOMD_C_PhaseDetectBit :OR: IOMD_C_JoystickDetectBits :OR: IOMD_C_FrontPanelButton)


        OPT     OldOpt
        END
