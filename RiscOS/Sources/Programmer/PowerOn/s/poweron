        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Standby
        GET     Hdr:Machine.<Machine>

KeyV                            *       &13
KeyV_TransitionUp               *       &1
KeyV_TransitionDown             *       &2

;--------------------------get global definitions--------------------------------
			GET		s.header

;--------------------------------------------------------------------------------
CTRL_DOWN		*		1
ALT_DOWN		*		2

init
			STMDB		sp!, {r0-r12, lr}

			MOV		r0, #0
			STR		r0, [r12]  ; set initial state

			MOV		r0, #KeyV
			ADR		r1, keyv_handler
			MOV		r2, r12		; ptr -> private word
			SWI		XOS_Claim

			LDMIA		sp!, {r0-r12, pc}

finish
			STMDB		sp!, {r0-r12, lr}
			MOV		r0, #KeyV
			ADR		r1, keyv_handler
			MOV		r2, r12
			SWI		XOS_Release

			LDMIA		sp!, {r0-r12, pc}

keyv_handler
			STMDB		sp!, {r0-r12, lr}
			LDR		r3, [r12]	; get private word

                        MOV             r5, #1          ; Standby option
                        MOV             r6, #0          ; Online option
			CMP		r0, #KeyV_TransitionUp
			BEQ		key_released
			CMP		r0, #KeyV_TransitionDown
			BNE		exit_keyv_handler
key_pressed
        [ RightAcornStandby
                        TEQ             r1, #&69
                        MOVEQ           r5, #0          ; non-forced standby
                        BEQ             do_power_on
        ]

			CMP		r1, #&3b	; left CTRL
			CMPNE		r1, #&61	; right CTRL
			ORREQ		r3, r3, #CTRL_DOWN

			CMP		r1, #&5e	; left ALT
			CMPNE		r1, #&60	; right ALT
			ORREQ		r3, r3, #ALT_DOWN

			B		exit_keyv_handler

key_released
			CMP		r1, #&3b	; left CTRL
			CMPNE		r1, #&61	; right CTRL
			BICEQ		r3, r3, #CTRL_DOWN

			CMP		r1, #&5e	; left ALT
			CMPNE		r1, #&60	; right ALT
			BICEQ		r3, r3, #ALT_DOWN

			CMP		r1, #&34	; home DEL
			CMPNE		r1, #&66	; keypad DEL
			BNE		exit_keyv_handler

			AND		r4, r3, #CTRL_DOWN:OR:ALT_DOWN
			CMP		r4, #CTRL_DOWN:OR:ALT_DOWN
			BNE		exit_keyv_handler ; not a PowerOn
do_power_on
			ADR		r0, callback_handler
			SWI		XOS_AddCallBack


exit_keyv_handler
			STR		r3, [r12]	; stash private word
			LDMIA		sp!, {r0-r12, pc}

callback_handler
			STMDB		sp!, {r0-r12, lr}

			MOV		r0, #0
			SWI		XStandby_State
			TEQ		r0, #0		; 0 = on, non-0 = off

			MOV		r0, #0
			SWIEQ		XStandby_Standby
			SWINE		XStandby_Online

			LDMIA		sp!, {r0-r12, pc}

			END
