/*
 *  ELF Loader
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "header.h"
#include "elfstructs.h"
#include "elfloader.h"

#include "swis.h"

/* We don't actually have a messages file yet, but this must be here to set up a
 * suitable pointer to pass to MessageTrans SWIs
 */
static void *messagetrans_descriptor = NULL;

/* SWI handler - there are no SWIs really yet */
_kernel_oserror *elfloader_swi(int swi_number, _kernel_swi_regs *r, void *private_word)
{
  _kernel_oserror *e = NULL;

  switch (swi_number) {
    case ELF_Version - ELF_00:
      r->r[0] = Module_VersionNumber;
      break;
    default:
      return error_BAD_SWI;
  }

  return e;
}

/* Module initialisation.  Nothing much to do here - simply set up the aliases so that we
 * can capture our *-commands when the user tries to load or execute ELF programs.
 */
_kernel_oserror *elfloader_initialise(const char *cmd_tail, int podule_base, void *private_word)
{
  (void) cmd_tail;
  (void) podule_base;
  (void) private_word;

  _kernel_setenv("Alias$@RunType_E1F", "ELFRun %*0");
  _kernel_setenv("Alias$@LoadType_E1F", "ELFLoad %*0");

  return NULL;
}

void elfloader_service(int service_number, _kernel_swi_regs *r, void *private_word)
{
  (void) service_number;
  (void) r;
  (void) private_word;
}

/* *-command handler.  The main two commands (only two at the moment!) are ELFLoad and ELFRun.
 * These are nearly identical - the only different is that ELFLoad doesn't try to start the
 * application by jumping to its entry point.
 */
_kernel_oserror *elfloader_command(const char *arg_string, int argc, int cmd_no, void *private_word)
{
  _kernel_oserror *e = NULL;

  (void) argc;
  (void) arg_string;
  (void) private_word;

  if (cmd_no == CMD_ELFLoad || cmd_no == CMD_ELFRun) {
    elf_program *ep = elf_allocate_dynamic_structure();
    if (!ep) return elfloader_error(err_ELF_NO_MEM, 0);

    if (elf_open(ep, arg_string) || elf_load(ep)) {
      e = ep->e;
    }
    else if (cmd_no == CMD_ELFRun && ep->entry != 0) {
      /* elf_go may not return, if it was successful */
      e = elf_go(ep);
    }
    elf_close(ep);
  }
  else {
    e = NULL;
  }

  return e;
}

/* Error generator.  argc indicates how many extra char * arguments are present.  These
 * arguments (max 4) are passing in R4..R7 to MessageTrans_ErrorLookup.  err indicates
 * which of the errors from the array below is being generated.  flag_COPY_ONLY indicates
 * that there is no translation to do so it calls MessageTrans_CopyError.  If that flag
 * is not set, the token is looked up in the global messages file with MessageTrans_ErrorLookup.
 */
_kernel_oserror *elfloader_error(elfloader_errors err, int argc, ...)
{
  enum {
    flag_COPY_ONLY = 1
  };
  static const struct {
    int flags;
    int errnum;
    const char *errtoken;
  } tokens[] = {
    {              0, elf_ERROR_BASE + 0, "NoMem" },
    { flag_COPY_ONLY, elf_ERROR_BASE + 1, "Unable to read file" },
    { flag_COPY_ONLY, elf_ERROR_BASE + 2, "This is not an ELF file" },
    { flag_COPY_ONLY, elf_ERROR_BASE + 3, "This is not an ARM ELF program file" },
    {              0, elf_ERROR_BASE + 4, "BadWrt" },
    {              0, elf_ERROR_BASE + 5, "Fatal" },
  };
  union {
    struct {
      _kernel_oserror *e;
      void *mt_descr;
      _kernel_oserror *newe;
      int newe_len;
      char *arg[4];
    } r;
    _kernel_swi_regs _r;
  } r;
  int swinum;
  va_list ap;
  int arg;
  _kernel_oserror e;

  e.errnum = tokens[err].errnum;
  strcpy(e.errmess, tokens[err].errtoken);
  r.r.e = &e;

  if (tokens[err].flags & flag_COPY_ONLY) {
    swinum = MessageTrans_CopyError;
  }
  else {
    swinum = MessageTrans_ErrorLookup;
    argc &= spec_COUNT_MASK;

    va_start(ap, argc);
    for (arg = 0; arg < 4; ++arg) {
      if (arg < argc) {
        r.r.arg[arg] = va_arg(ap, char *);
      }
      else {
        r.r.arg[arg] = NULL;
      }
    }
    va_end(ap);

    r.r.mt_descr = messagetrans_descriptor;
    r.r.newe = NULL;
    r.r.newe_len = 0;
  }

  return _kernel_swi(swinum, &r._r, &r._r);
}
