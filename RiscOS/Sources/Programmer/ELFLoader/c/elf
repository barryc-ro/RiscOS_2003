/*
 *  ELF Loader
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "header.h"
#include "elfstructs.h"
#include "elfloader.h"

#include "swis.h"

/* Create and initialise a structure representing an ELF program.  All fields must be
 * initialised such that this structure can be passed to elf_close() safely.
 */
elf_program *elf_allocate_dynamic_structure(void)
{
  elf_program *e = malloc(sizeof(elf_program));
  if (e) {
    e->fd = 0;
    e->ph = 0;
    e->filename = 0;
    e->arg_string = 0;
    e->in_memory = 0;
  }
  return e;
}

/* Confirm that the address range defined by the start and length addresses are valid writable
 * addresses that this loader can load data into.  Wrapping around the address range is not permitted;
 * loading below 0x8000 is not permitted; loading over the memory limit returned by OS_GetEnv is not
 * permitted (to avoid overwriting the calling program if this is a shell-out); addresses rejected
 * by OS_ValidateAddress are not permitted.
 */
static _kernel_oserror *elf_validate_address(elf_program *ep, Elf32_Addr start, Elf32_Word mem_size)
{
  int psr;

  if (start < 0x8000 ||                          /* below the minimum address */
      start + mem_size < start ||                /* wraps around address range */
      start + mem_size > ep->ram_limit ||        /* writes past the memory limit */
      _swix(OS_ValidateAddress, _INR(0,1)|_OUT(_FLAGS), start, start + mem_size, &psr) ||
      (psr & (1<<29)))                           /* < C flag set   ^ SWI failed? */
  {
    ep->e = elfloader_error(err_NO_WRITABLE_MEMORY, 0);
  }

  return ep->e;
}

/* Reads data from an ELF image into 'dest'.  'len' bytes are read from file offset 'f_offset'
 * This routine abstracts away where the data is coming from - it may be a file, or it may be
 * in-memory already in which case it is simply memmove'd into position.  Must use memmove
 * in case the destination and source overlap (consider an just-unsqueezed in-core image)
 */
static _kernel_oserror *elf_read_data(elf_program *ep, void *dest, Elf32_Word len, Elf32_Word f_offset, Elf32_Word *nbytes)
{
  if (ep->fd > 0) {
    ep->e = _swix(OS_GBPB, _INR(0,4)|_OUT(3), 3, ep->fd, dest, len, f_offset, nbytes);
    if (ep->e) {
      *nbytes = len;
    }
  }
  else if (ep->in_memory) {
    memmove(dest, ep->in_memory + f_offset, (size_t) len);
    *nbytes = 0;
    ep->e = NULL;
  }
  else {
    *nbytes = len;
    ep->e = elfloader_error(err_FATAL, 1, Module_Help);
  }

  return ep->e;
}

/* Common loader after the filename, file handle opened or memory base address have been set up.
 * This function reads the ELF header, valdates that it is suitable for execution on this host,
 * then loads the program header table, remembers where the entry point is and returns either
 * in an error state (ep->e is a copy of the error pointer) or returns NULL indicating that a
 * subsequent elf_load call may be attempted.
 */
static _kernel_oserror *elf_open_common(elf_program *ep)
{
  Elf32_Word nbytes;

  (void) elf_read_data(ep, &ep->eh, sizeof(ep->eh), 0, &nbytes);
  if (nbytes == 0) {
    /* It worked - we got the ELF header.  Now look for the vital bits:
     * 32-bit LSB ARM ELF executable with valid program headers
     */
    if (ep->eh.e_ident[EI_MAG0] != ELFMAG0 ||
        ep->eh.e_ident[EI_MAG1] != ELFMAG1 ||
        ep->eh.e_ident[EI_MAG2] != ELFMAG2 ||
        ep->eh.e_ident[EI_MAG3] != ELFMAG3 ||
        ep->eh.e_ident[EI_CLASS] != ELFCLASS32 ||
        ep->eh.e_ident[EI_DATA] != ELFDATA2LSB ||
        ep->eh.e_type != ET_EXEC ||
        ep->eh.e_machine != EM_ARM ||
        ep->eh.e_phoff == 0 ||
        ep->eh.e_phnum == 0 ||
        ep->eh.e_phentsize < sizeof(Elf32_Phdr) ||
        (ep->eh.e_phentsize & 3) ||
        ep->eh.e_ehsize < sizeof(Elf32_Ehdr)) {
        ep->e = elfloader_error(err_ELF_NOT_ARM_ELF_PROG, 0);
    }
    else {
      /* Allocate space for the program header table */
      int phsize = ep->eh.e_phnum * ep->eh.e_phentsize;
      ep->ph = malloc(phsize);
      if (ep->ph == NULL) {
        ep->e = elfloader_error(err_ELF_NO_MEM, 0);
      }
      else {
        /* Load the program header table */
        (void) elf_read_data(ep, ep->ph, phsize, ep->eh.e_phoff, &nbytes);
        /* Parse out the entry point, but we MUST not fault
         * the lack of one because it may simply have been
         * a load op.
         */
        if (ep->eh.e_flags & EF_ARM_HASENTRY) {
          ep->entry = ep->eh.e_entry;
        }
        else {
          ep->entry = 0;
        }
      }
    }
  }

  /* Failed to read all the bytes we wanted but no error was set?  Make one up. */
  if (nbytes != 0 && ep->e == NULL) {
    ep->e = elfloader_error(err_ELF_NO_OPEN, 0);
  }

  return ep->e;
}

/* Open an ELF executable that is already in memory.  Sets up a faked filename and copies
 * the arguments ready for OS_FSControl 2, calls into the common opener.
 */
_kernel_oserror *elf_open_memory(elf_program *ep, void *start_address, const char *args)
{
  size_t fl = strlen(args) + 1 + strlen("@xxxxxxxx") + 1;
  ep->filename = malloc(fl);
  if (ep->filename) {
    sprintf(ep->filename, "@%08lx %s", (unsigned long) start_address, args);
    ep->arg_string = strchr(ep->filename, ' ') + 1;
  }
  else {
    return elfloader_error(err_ELF_NO_MEM, 0);
  }
  ep->fd = 0;
  ep->in_memory = start_address;

  return elf_open_common(ep);
}

/* Open an ELF executable that is on a filesystem.  Opens the file, stores the filename
 * and arguments ready for OS_FSControl 2, calls into the common opener.
 */
_kernel_oserror *elf_open(elf_program *ep, const char *filename)
{
  size_t fl = strlen(filename) + 1;
  ep->filename = malloc(fl);
  if (ep->filename) {
    memcpy(ep->filename, filename, fl);
    ep->arg_string = ep->filename;
    while (*ep->arg_string > ' ') ++ep->arg_string;
    if (ep->arg_string[0] != '\0') {
      *(ep->arg_string)++ = '\0';
      while (ep->arg_string[0] && ep->arg_string[0] < ' ') {
        ++(ep->arg_string);
      }
    }
  }
  else {
    return elfloader_error(err_ELF_NO_MEM, 0);
  }

  /* Attempt to open the file read-only, error on object being a directory or failure to open file */
  ep->e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4C, ep->filename, &ep->fd);
  if (ep->e) {
    ep->fd = 0;
  }
  else if (ep->fd == 0) {
    ep->e = elfloader_error(err_ELF_NO_OPEN, 0);
  }
  else {
    ep->e = elf_open_common(ep);
  }

  return ep->e;
}

/* Release the structure representing an ELF program.  If open, the file handle is closed.
 * All dynamic memory is released, and the elf_program pointer ceases to be valid on exit.
 */
void elf_close(elf_program *ep)
{
  if (ep->fd > 0) {
    (void) _swix(OS_Find, _INR(0,1), 0, ep->fd);
    ep->fd = 0;
  }
  if (ep->ph != 0) {
    free(ep->ph);
    ep->ph = 0;
  }
  if (ep->filename != 0) {
    free(ep->filename);
    ep->filename = 0;
  }
  ep->arg_string = 0;
  ep->in_memory = 0;
  free(ep);
}

/* Main point for loading an elf_program that has been already been successfully been opened with a
 * call to elf_open or elf_open_memory.  Validates all the loadable segments' addresses, and then
 * proceeds to load all the segments of type PT_LOAD into RAM, creating the zero-init data as it
 * goes.  It remembers where the static base is if it sees such a segment flagged go past.
 */
_kernel_oserror *elf_load(elf_program *ep)
{
  int idx;
  Elf32_Word nbytes = 0;

  ep->e = _swix(OS_GetEnv, _OUT(1), &ep->ram_limit);

  /* Validate the addresses first before bothering to load anything */
  for (idx = 0; idx < ep->eh.e_phnum && !ep->e && nbytes == 0; ++idx) {
    Elf32_Phdr *ph = (Elf32_Phdr *) (((char *)ep->ph) + idx * ep->eh.e_phentsize);
    if (ph->p_type == PT_LOAD) {
      if (elf_validate_address(ep, ph->p_vaddr, ph->p_memsz)) break;
    }
  }

  for (idx = 0; idx < ep->eh.e_phnum && !ep->e && nbytes == 0; ++idx) {
    Elf32_Phdr *ph = (Elf32_Phdr *) (((char *)ep->ph) + idx * ep->eh.e_phentsize);
    if (ph->p_type != PT_LOAD) {
      /* Abort the load? Ignore for now */
    }
    else {
      unsigned char *baseaddress = (unsigned char *) ph->p_vaddr;
      Elf32_Word zerofill;
      if (ph->p_filesz) {
        if (elf_read_data(ep, baseaddress, ph->p_filesz, ph->p_offset, &nbytes)) {
          break;
        }
      }
      zerofill = ph->p_memsz - ph->p_filesz;
      if (zerofill > 0) {
        memset(baseaddress + ph->p_filesz, '\0', (size_t) zerofill);
      }
      if (ph->p_flags & PF_ARM_SB) {
        ep->static_base = baseaddress;
      }
    }
  }

  return ep->e;
}

/* Returns the size of the SVC stack.  The OS_ReadSysInfo call returns the actual address
 * of the top of the stack, but for compatibility with earlier OSes, we reduce that modulo
 * 1MB to find the size, then the assembler adds the size returned from here to the stack
 * base just before switching to USR mode.
 */
static unsigned long elf_svcstk_size(void)
{
  static unsigned long svcstk_size = 0;

  if (svcstk_size == 0)  {
    if (_swix(OS_ReadSysInfo, _INR(0,2)|_OUT(2), 6, 0, 16, &svcstk_size) || !svcstk_size) {
      svcstk_size = 8 * 1024; /* default to 8K */
    }
    else {
      svcstk_size = (svcstk_size << 12) >> 12; /* find offset from base */
    }
  }

  return svcstk_size;
}

/* Enter a loaded ELF program.  The ELF program must have been successfully loaded by an
 * earlier call to elf_load.  It prepares the system for the new application by calling
 * OS_FSControl 2 to set the CAO to 0x8000, the CLI parameters and the filename (perhaps
 * a pseudo-filename) for the environment to use.  If this SWI fails (something claimed
 * Upcall_NewApplication, for example), the environment is not set up and an error is
 * returned.  If the call succeeds, this function MUST never return as the previous
 * application has been terminated.  The dynamic memory is freed, and the program is
 * entered at its specified entry point.  elf_go_app is an assembler function which
 * starts the application (flattens SVC stack, switches to USR mode, enables interrupts,
 * jumps to specified address).
 */
_kernel_oserror *elf_go(elf_program *ep)
{
  _kernel_oserror *e = ep->e;

  if (e == NULL) {
    e = _swix(OS_FSControl, _INR(0,3), 2, ep->arg_string, 0x8000, ep->filename);
    if (e == NULL) {
      /* does not return! */
      Elf32_Addr entry = ep->entry;
      elf_close(ep);
      elf_go_app(entry, elf_svcstk_size());
      /* not reached */
    }
  }

  return e;
}
