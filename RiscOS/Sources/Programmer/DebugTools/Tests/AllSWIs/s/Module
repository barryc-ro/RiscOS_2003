; >s.Module

CR				* 13
XDebugTools_ClaimOSSWI		*  7 + 0x000554C0 :OR: 0x20000
XDebugTools_ReleaseOSSWI	*  9 + 0x000554C0 :OR: 0x20000
Max_Swi				* 256*4

	AREA	|Asm$$Code|, CODE, READONLY


; ****************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init-Module_BaseAddr	; Module intialisation entry point offset
	&	Mod_Die-Module_BaseAddr		; Module finalisation entry point offset
	&	Mod_Service-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table-Module_BaseAddr	; Help and command keyword table offset
	&	0				; SWI chunk
	&	Mod_SWIHandler-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable-Module_BaseAddr	; Module SWI table offset
	&	0				; No SWI name decode entry
	&	0				; No messages file
	&	Mod_Flags-Module_BaseAddr	; Module flags word offset


; ****************************************************
; *
; * Module version, date (and copyright) string
; *
Mod_HelpStr
	DCB	"AllSWIs", 9
	DCB	"$Module_MajorVersion ($Module_Date)"
 [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
 ]
	DCB	0
	ALIGN


; ****************************************************
; *
; * Module flags word
; *
Mod_Flags
 [ No32bitCode
	&	0
 |
	&	ModuleFlag_32bit
 ]


; ****************************************************
; *
; * Module help and command keyword table
; *
Mod_HC_Table
	Command AllSWIs, 1, 0
	DCB	0
AllSWIs_Help
	DCB	"Output a count of calls to each (or the specified) OS SWI since the last call"
	DCB	" to this command.", CR
AllSWIs_Syntax
	DCB	"Syntax: *AllSWIs [<swi>]", 0


; ****************************************************
; *
; * Module title string and module SWI table
; *
Mod_Title
	DCB	"AllSWIs", 0


; ****************************************************
; *
; * Module execution start entry point
; *
Mod_Start	* Module_BaseAddr
Mod_SWIHandler	* Module_BaseAddr
Mod_SWITable	* Module_BaseAddr
Mod_Service	* Module_BaseAddr


AllSWIs_Code ROUT
	Push	"LR"
	LDR	R12, [R12]
	CMP	R1, #1
	BHI	AllErr	; Too many params - error
	BLO	AllSWIs	; No params - enum all SWIs
	; One param, extract SWI number...
	MOV	R3, R0
	MOV	R1, R0
	MOV	R0, #0x80000010
	SWI	XOS_ReadUnsigned
	MOVVC	R0, R2
	BVC	PreSWI
	; Convert SWI name string into a number...
	MOV	R1, R3
	SWI	XOS_SWINumberFromString
	BVS	AllErr
PreSWI	CMP	R0, #Max_Swi :SHL: 2
	BHS	AllErr2
	MOV	R3, #0
	BL	OneSWI
	Pull	"PC"
OneSWI	ROUT
	Push	"R0, LR"
	; Claim a stack frame for workspace...
	SUB	SP, SP, #32
	; Output the number of calls in decimal...
	LDR	R1, [R12, R0, LSL #2]	; Read counter
	STR	R3, [R12, R0, LSL #2]	; Reset counter
	MOV	R0, R1
	MOV	R1, SP
	MOV	R2, #32
	SWI	XOS_ConvertCardinal4
	SWI	XOS_Write0
	SWI	XOS_WriteS
	DCB	" calls to SWI &", 0
	ALIGN
	; Output the SWI number in decimal...
	LDR	R0, [SP, #32]
	MOV	R1, SP
	MOV	R2, #32
	SWI	XOS_ConvertHex2
	SWI	XOS_Write0
	SWI	XOS_WriteS
	DCB	" (", 0
	ALIGN
	; Output the SWI name string...
	LDR	R0, [SP, #32]
	MOV	R1, SP
	MOV	R2, #32
	SWI	XOS_SWINumberToString
	MOV	R0, SP
	SWI	XOS_Write0
	SWI	XOS_WriteI+")"
	SWI	XOS_NewLine
	; Release our stack frame...
	ADD	SP, SP, #32
	Pull	"R0, PC"
AllSWIs	ROUT
	MOV	R0, #0
	MOV	R3, #0
00	BL	OneSWI
	ADD	R0, R0, #1
	CMP	R0, #(Max_Swi :SHR: 2)
	BLO	%BT00
	Pull	"PC"
AllErr	ADR	R0, AllBlk
	SETV
	Pull	"PC"
AllErr2	ADR	R0, AllBlk2
	SETV
	Pull	"PC"
AllBlk	DCD	0x1
	DCB	"Syntax: *AllSWIs [<swi>]", 0
	ALIGN
AllBlk2	DCD	0x2
	DCB	"SWI number out of range", 0
	ALIGN


; ****************************************************
; *
; * Module initialisation entry point
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry
	WriteLn	"Init AllSWIs..."
	; Claim a block of RMA...
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #Max_Swi
	SWI	XOS_Module
	BVS	InitErr
	; Zero-initialise the block...
	MOV	R0, #0
	MOV	R1, R2
00	STR	R0, [R1], #4
	SUBS	R3, R3, #4
	BNE	%BT00
	; Store the RMA block address in our private word...
	STR	R2, [R12]
	; Install handlers on all of the SWI vectors...
	MOV	R3, #Max_Swi :SHR: 2
	ADR	R1, OSSWI_Claimant
01	SUB	R0, R3, #1
	SWI	XDebugTools_ClaimOSSWI
	BVS	InitErr
	SUBS	R3, R3, #1
	BNE	%BT01
InitErr	EXIT


; ****************************************************
; *
; * Module finalisation entry point
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die Entry
	WriteLn	"Final AllSWIs"
	; Get our RMA pointer...
	LDR	R2, [R12]
	; Release our handlers from the SWI vectors...
	MOV	R3, #Max_Swi :SHR: 2
	ADR	R1, OSSWI_Claimant
00	SUB	R0, R3, #1
	SWI	XDebugTools_ReleaseOSSWI
	BVS	DieErr
	SUBS	R3, R3, #1
	BNE	%BT00
	; Free our RMA block...
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
	; Reset our private word pointer...
	MOVVC	R0, #0
	STRVC	R0, [R12]
DieErr	EXIT


OSSWI_Claimant Entry "R0, R11"
	; Get a pointer to the counter word we're going to increment...
	AND	R11, R11, #(Max_Swi :SHR: 2) - 1	; Just in case!
	ADD	R12, R12, R11, LSL #2
	; Disable interrupts...
	SCPSR	I_bit, 0, R0,, R14
	NOP
	; Increment our counter...
	LDR	R11, [R12]
	ADD	R11, R11, #1
	STR	R11, [R12]
	; Restore interrupts...
	RestPSR	R14
	NOP
	; Exit (allow claim to continue)...
	EXIT


	END
