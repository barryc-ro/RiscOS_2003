; >s.Module


DebugToolsSWI		*	0x000554C0
DebugToolsErr		*	0x00819C00
LF			*	10
CR			*	13
IRQs			*	32

; ****************************************************
; *
; * The DebugTools module workspace format
; *
			^	0
WSP_ScratchBuffer	#	20		; 0   - A 20 byte scratch buffer in our workspace
WSP_PageSize		#	4		; 20  - The page size of the machine (-1)
WSP_VecPtrTab		#	4		; 24  - The base of the vector pointer table
WSP_TickNodeChain	#	4		; 28  - The pointer to the start of the ticker node chain
WSP_AppSlotBase		#	4		; 32  - The base address of the application space
WSP_AppSlotTop		#	4		; 36  - The end address of the application space
WSP_ROMBase		#	4		; 40  - The base address of the ROM
WSP_UtilMod		#	4		; 44  - The base address of the Utility Module
WSP_ROMTop		#	4		; 48  - The end address of the ROM
WSP_IRQactive		#	4		; 52  - Flags for IRQ patching (0 - inactive, 1 - active)
WSP_IRQtable		#	4		; 56  - The address of the word after the IRQ despatch instruction
WSP_KernelSWIs		#	4		; 60  - The base of the Kernel's SWI despatch table
WSP_SWIDespatch		#	4		; 64  - Pointer to our SWI despatch code in RMA
WSP_SWIPatch		#	4		; 68  - Pointer to our SWI patch table in RMA
WSP_IRQcode		#	4		; 72  - The address of our IRQ patch code in RMA
WSP_DeadMods		#	4		; 76  - A count of the number of *RMRemoved modules
WSP_DirStack		#	4		; 80  - Pointer to the top of the directory stack (may be null)
WSP_IRQinfo		#	(IRQs+1)*8	; 84  - A block of information for IRQ devices
WSP_UnkIRQCount		#	IRQs*4		; 348 - A block of counters for the number of unclaimed IRQs
WSP_SIZE		*	@		; 476 - The size in bytes of our workspace


  [ DEBUG
  ! 0,"WSP_ScratchBuffer &" :CC: :STR: WSP_ScratchBuffer
  ! 0,"WSP_PageSize      &" :CC: :STR: WSP_PageSize
  ! 0,"WSP_VecPtrTab     &" :CC: :STR: WSP_VecPtrTab
  ! 0,"WSP_TickNodeChain &" :CC: :STR: WSP_TickNodeChain
  ! 0,"WSP_AppSlotBase   &" :CC: :STR: WSP_AppSlotBase
  ! 0,"WSP_AppSlotTop    &" :CC: :STR: WSP_AppSlotTop
  ! 0,"WSP_ROMBase       &" :CC: :STR: WSP_ROMBase
  ! 0,"WSP_UtilMod       &" :CC: :STR: WSP_UtilMod
  ! 0,"WSP_ROMTop        &" :CC: :STR: WSP_ROMTop
  ! 0,"WSP_IRQtable      &" :CC: :STR: WSP_IRQtable
  ! 0,"WSP_KernelSWIs    &" :CC: :STR: WSP_KernelSWIs
  ! 0,"WSP_SWIDespatch   &" :CC: :STR: WSP_SWIDespatch
  ! 0,"WSP_SWIPatch      &" :CC: :STR: WSP_SWIPatch
  ! 0,"WSP_IRQcode       &" :CC: :STR: WSP_IRQcode
  ! 0,"WSP_IRQinfo       &" :CC: :STR: WSP_IRQinfo
  ! 0,"WSP_UnkIRQCount   &" :CC: :STR: WSP_UnkIRQCount
  ! 0,"WSP_SIZE          &" :CC: :STR: WSP_SIZE
  ! 0,""
  ];DEBUG


	AREA	|Asm$$Code|, CODE, READONLY


; ****************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init-Module_BaseAddr	; Module intialisation entry point offset
	&	Mod_Die-Module_BaseAddr		; Module finalisation entry point offset
	&	Mod_Service-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table-Module_BaseAddr	; Help and command keyword table offset
	&	DebugToolsSWI			; SWI chunk
	&	Mod_SWIHandler-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable-Module_BaseAddr	; Module SWI table offset
	&	0				; No SWI name decode entry
	&	0				; No messages file
	&	Mod_Flags-Module_BaseAddr	; Module flags word offset


; ****************************************************
; *
; * Module version, date (and copyright) string
; *
Mod_HelpStr
	DCB	"Debug Tools", 9
	DCB	"$Module_MajorVersion ($Module_Date)"
 [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
 ]
	DCB	0
	ALIGN


; ****************************************************
; *
; * Module flags word
; *
Mod_Flags
 [ No32bitCode
	&	0
 |
	&	ModuleFlag_32bit
 ]


; ****************************************************
; *
; * Module help and command keyword table
; *
Mod_HC_Table
	Command X, 255, 1		; *Command only - no SWI
	Command Where, 1, 0
	Command Vectors, 1, 0
	Command Tickers, 0, 0
	Command Devices, 0, 0
	Command IRQInfo, 1, 0
	Command Canonical, 2, 2		; *Command only - no SWI
	Command UnknownIRQs, 0, 0
	Command RMDie, 1, 1		; *Command only - no SWI
	Command RMRemove, 1, 1		; *Command only - no SWI
	Command pushd, 1, 0		; *Command only - no SWI
	Command popd, 0, 0		; *Command only - no SWI
	Command pwd, 0, 0		; *Command only - no SWI
	DCB	0

X_Help
	DCB	"*X will execute the specified CLI command and trap any errors in the "
	DCB	"system variable X$Error (if not already set).", CR
X_Syntax
	DCB	"Syntax: *X <CLI command>", 0

Where_Help
	DCB	"*Where will output information on the location of the specified logical "
	DCB	"address (or that of the last exception).", CR
Where_Syntax
	DCB	"Syntax: *Where [<address>]", 0

Vectors_Help
	DCB	"*Vectors lists all of the software installed on the all or the "
	DCB	"specified software vectors.", CR
Vectors_Syntax
	DCB	"Syntax: *Vectors [<number> | <name>]", 0

Tickers_Help
	DCB	"*Tickers lists all CallAfters and CallEverys currently pending.", CR
Tickers_Syntax
	DCB	"Syntax: *Tickers", 0

Devices_Help
	DCB	"*Devices lists the current device drivers installed on each of the "
	DCB	"Kernel device IRQs vectors.", CR
Devices_Syntax
	DCB	"Syntax: *Devices", 0

IRQInfo_Help
	DCB	"*IRQInfo outputs information on the number of calls to and the duration "
	DCB	"of the handler for each IRQ.", CR
IRQInfo_Syntax
	DCB	"Syntax: *IRQInfo", 0

Canonical_Help
	DCB	"*Canonical will canonicalise the specified file name and place the "
	DCB	"result into the specified system variable.", CR
Canonical_Syntax
	DCB	"Syntax: *Canonical <sys var> <file spec>", 0

UnknownIRQs_Help
	DCB	"*UnknownIRQs outputs a count of the number of calls to IrqV for each "
	DCB	"device (since the last call to this *Command).", CR
UnknownIRQs_Syntax
	DCB	"Syntax: *UnknownIRQs", 0

RMDie_Help
	DCB	"*RMDie will remove a module's finalisation handler before killing the "
	DCB	"module.", CR
RMDie_Syntax
	DCB	"Syntax: *RMDie <module title>", 0

RMRemove_Help
	DCB	"*RMRemove will remove various handlers from a module but leave it in the "
	DCB	"module chain.", CR
RMRemove_Syntax
	DCB	"Syntax: *RMRemove <module title>", 0

pushd_Help
	DCB	"*pushd will push the currently selected directory (CSD) onto a stack of "
	DCB	"previous CSDs and move into the specified directory (if any).", CR
pushd_Syntax
	DCB	"Syntax: *pushd [<directory>]", 0

popd_Help
	DCB	"*popd pulls the most recently stacked directory off the directory stack and "
	DCB	"sets it as the currently selected directory (CSD).", CR
popd_Syntax
	DCB	"Syntax: *popd", 0

pwd_Help
	DCB	"*pwd outputs the name of the currently selected directory (CSD).", CR
pwd_Syntax
	DCB	"Syntax: *pwd", 0


; ****************************************************
; *
; * Module title string and module SWI table
; *
Mod_Title
Mod_SWITable
	DCB	"DebugTools", 0
	DCB	"AddressInfo", 0	; 0 SWI only - no *Command
	DCB	"Where", 0		; 1
	DCB	"Vectors", 0		; 2
	DCB	"Tickers", 0		; 3
	DCB	"Devices", 0		; 4
	DCB	"IRQInfo", 0		; 5
	DCB	"UnknownIRQs", 0	; 6
	DCB	"ClaimOSSWI", 0		; 7
	DCB	"AddToOSSWI", 0		; 8
	DCB	"ReleaseOSSWI", 0	; 9
	DCB	0
	ALIGN


; ****************************************************
; *
; * Module execution start entry point
; *
Mod_Start * Module_BaseAddr


; ****************************************************
; *
; * Module initialisation entry point
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry "R10-R11"
	WriteLn	"InitTools..."
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #WSP_SIZE
	SWI	XOS_Module
	BVS	%FT00
	STR	R2, [R12]
	MOV	R12, R2
	WriteLn	"  Wsp;"
	; Find out what the page size of this machine is...
	SWI	XOS_ReadMemMapInfo
	MOVVS	R0, #32*1024		; Assume 32KB page size if none returned
	SUB	R0, R0, #1
	STR	R0, [R12, #WSP_PageSize]
	;
	; Store known locations of certain things in memory, for which no interface
	; currently exists to find this information out...
	;
	LDR	R0, =0x000007D8		; Base of vector pointer table
	STR	R0, [R12, #WSP_VecPtrTab]
	MOV	R0, #0x00008000		; Base of application space
	MOV	R1, #0x01C00000		; Top of application space
	STR	R0, [R12, #WSP_AppSlotBase]
	STR	R1, [R12, #WSP_AppSlotTop]
	MOV	R0, #0x03800000		; Base of the ROM
	MOV	R1, #0x04000000		; Top of the ROM
	STR	R0, [R12, #WSP_ROMBase]
	STR	R1, [R12, #WSP_ROMTop]
	MOV	R0, #0
	STR	R0, [R12, #WSP_DeadMods]
	STR	R0, [R12, #WSP_DirStack]
	WriteLn	"  Tick;"
	; Find the address of the ticker node chain start pointer
	MOV	R0, #6
	MOV	R1, #0
	MOV	R2, #5
	SWI	XOS_ReadSysInfo
	MOVVS	R2, #0
	STR	R2, [R12, #WSP_TickNodeChain]
	; Find the base address of the Utility Module
	MOV	R0, #18
	ADR	R1, util_mod_title
	SWI	XOS_Module
	MOVVS	R3, #0
	STR	R3, [R12, #WSP_UtilMod]
	WriteLn	"  IRQs;"
	BL	IRQ_init
	BVS	%FT00
	WriteLn	"  SWIs;"
	BL	SWI_patch
	WriteLn	"  Done."
00	;
	EXIT
util_mod_title
	DCB	"UtilityModule", 0
	ALIGN


; ****************************************************
; *
; * Module finalisation entry point
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die Entry
	WriteLn	"DieTools..."
	LDR	R12, [R12]
	BL	IRQ_final
	WriteLn	"  SWIs;"
	BLVC	SWI_unpatch
	EXIT	VS
	WriteLn	"  Free;"
	MOV	R0, #ModHandReason_Free
	MOV	R2, R12
	SWI	XOS_Module
	WriteLn	"  Done."
	EXIT


; ****************************************************
; *
; * Dump a literal pool here
; *
	LTORG


; ****************************************************
; *
; * Module service call entry point
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
Mod_Service * Module_BaseAddr
;Fast_SVC_Table
;	&	0				; Flags word
;	&	Mod_FastService-Module_BaseAddr	; Actual service call handler
;	&	Service_???
;	&	Service_????
;	&	0				; End of service call table
;	&	Fast_SVC_Table-Module_BaseAddr	; Offset of fast service table
;Mod_Service ROUT
;	MOV	R0, R0
;	TEQ	R1, #Service_???
;	TEQNE	R1, #Service_????
;	MOVEQ	PC, LR
;Mod_FastService Entry
;	EXIT


	END
