; >s.IRQpatch


MaxDevice	*	(IRQ_other_timings - IRQ_timings) :SHR: 2


; ****************************************************
; *
; * Replace our B instruction with the original LDMIA in the IRQ despatcher, remove
; * the ticker event and release IrqV.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_unpatch Entry "R1-R2"
	; Have we patched the IRQ despatcher?
	LDR	R2, [R12, #WSP_IRQtable]
	LDR	R14, =0xE8919000	; = "LDMIA R1,{R12,PC}"
	TEQ	R2, #0
	BEQ	Iup			; No. Exit.
	; Put back the original LDMIA instruction...
	STR	R14, [R2, #-4]
	; Ensure that we don't have any cache problems...
	MOV	R0,#2_1
	SUB	R1,R2,#4
	MOV	R2,R1
	SWI	XOS_SynchroniseCodeAreas
	; Remove the ticker event for our timing code...
	ADR	R0, IRQ_ticker
	MOV	R1, R12
	SWI	XOS_RemoveTickerEvent
	BVS	Iup
	; Release the IRQ vector...
	MOV	R0, #IrqV
	ADR	R1, IrqV_handler
	MOV	R2, R12
	SWI	XOS_Release
	BVS	Iup
	; Free the RMA block with our patch code in it...
	LDR	R2, [R12, #WSP_IRQcode]
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
Iup	EXIT


; ****************************************************
; *
; * Replace the LDMIA instruction in the IRQ despatcher with a branch to a copy
; * copy of our IRQ timing and despatch code in the RMA.
; *
; * We also create a ticker event to copy the timing and other information over
; * to a block in the module workspace once a second.
; *
; * Finally, we claim IrqV so that we can keep a record of any device numbers
; * which pass along there.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= corrupted (or pointer to error block)
; *   R4-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_patch Entry
	; Scan through the Cursor/System/Sound area for two instructions...
	LDR	R0, =0xE8919000		; = "LDMIA R1,{R12,PC}"
	MOV	R11, #0x01F00000	; Base of the Cursor/System/Sound area
00	LDR	R14, [R11], #4
	TEQ	R14, R0
	BEQ	%FT01
	CMP	R11, #0x01F800000
	BLO	%BT00
	MOV	R11, #0
	STR	R11, [R12, #WSP_IRQtable]
	B	Ipa
01	;
	STR	R11, [R12, #WSP_IRQtable]
	SUB	R11, R11, #4
	ADR	R1, IRQ_code
	ADR	R10, IRQ_code_end
	; Claim a block of RMA...
	MOV	R0, #ModHandReason_Claim
	SUB	R3, R10, R1
	SWI	XOS_Module
	BVS	Ipa
	STR	R2, [R12, #WSP_IRQcode]
	; Copy our code into RMA...
	MOV	R3, R2
02	LDR	R14, [R1], #4
	STR	R14, [R3], #4
	CMP	R1, R10
	BLO	%BT02
	;
	; R2  -> base of copied code
	; R11 -> LDM instruction's address
	;
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	MOV	R1, R2
	SUB	R2, R3, #4
	SWI	XOS_SynchroniseCodeAreas
	BVS	Ipa
	; Replace the LDMIA with a B to our code...
	ADD	R14, R11, #8
	SUB	R14, R1, R14
	MOV	R14, R14, LSR #2
	; Exit if the branch target is too far away or below the source...
	TST	R14, #0xFF000000
	; Ensure cache coherency on Harvard-like CPUs...
	BNE	Ipa
	ORR	R14, R14, #0xEA000000
	STR	R14, [R11]
	MOV	R0,#2_1
	MOV	R1,R11
	MOV	R2,R1
	SWI	XOS_SynchroniseCodeAreas
	BVS	Ipa
	; Install a ticker event to copy and reset the timings every second...
	MOV	R0, #99
	ADR	R1, IRQ_ticker
	MOV	R2, R12
	SWI	XOS_CallEvery
	BVS	Ipa
	; Claim the IRQ vector...
	MOV	R0, #IrqV
	ADR	R1, IrqV_handler
	MOV	R2, R12
	SWI	XOS_Claim
	BVS	Ipa
	; Initialise our count of unclaimed IRQs to zero...
	MOV	R0, #0
	ADD	R1, R12, #WSP_UnkIRQCount
	ADD	R2, R1, #4*IRQs
03	STR	R0, [R1], #4
	CMP	R1, R2
	BLO	%BT03
Ipa	EXIT


; ****************************************************
; *
; * This ticker code is called every second in order to copy the block of
; * timings for each IRQ device. The blocks are then reset to zero after
; * the copy.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *
IRQ_ticker Entry "R0-R5"
	; Find the base address of the IRQ patch code in RMA...
	LDR	R0, [R12, #WSP_IRQcode]
	; Calculate the base of the block to copy the timings into...
	ADD	R1, R12, #WSP_IRQinfo
	; Calculate the address of the block of timings to copy...
	ADD	R0, R0, #IRQ_timings - IRQ_code
	; Ensure that interrupts are disabled...
	SCPSR	I_bit, 0, R14,, R2
	; Copy each table entry and reset to zero...
	MOV	R4, #0
	ADD	R5, R0, #?WSP_IRQinfo
00	LDR	R3, [R0]	; Read word
	STR	R4, [R0], #4	; Set to zero
	STR	R3, [R1], #4	; Store in copy
	CMP	R0, R5
	BLO	%BT00
	; Restore interrupt state...
	RestPSR	R2
	NOP
	EXIT


; ****************************************************
; *
; * Record the number of calls to unknown devices and pass-on the vector.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *
IrqV_handler Entry
	; Make sure that the device number is not out-of-range
	CMP	R0, #3*IRQs
	BHS	IH_exit
	; Convert device number * 3 into a pointer into our table...
	ADD	R14, R0, R0, LSL #3
	ADD	R14, R14, R0, LSL #1
	MOV	R14, R14, LSR #5
	ADD	R14, R12, R14, LSL #2
	; Increment the call count for this device number...
	LDR	R12, [R14, #WSP_UnkIRQCount]
	ADD	R12, R12, #1
	STR	R12, [R14, #WSP_UnkIRQCount]
	; Exit (don't need to preserve flags)...
IH_exit	EXIT


; ****************************************************
; *
; * This block of code is copied into the RMA and the Kernel's interrupt
; * despatcher is patched to branch into it. We can then keep timing
; * information on all the device drivers.
; *
; * In...
; *   R0	= device number * 3
; *   R1	= pointer to despatch table entry
; *   R3	= pointer to IOC
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= may be corrupted
; *   R4-R10	= preserved
; *   R11-R12	= may be corrupted
; *   R13	= preserved
; *
IRQ_code ROUT
	; Preserve the caller's R0 and LR...
	Push	"LR"
	MOV	R11, R0

	; Convert the device number *3 into a pointer into our table...
	ADR	R14, IRQ_timings
	ADD	R12, R0, R0, LSL #3
	ADD	R0, R12, R0, LSL #1
	MOV	R0, R0, LSR #5
	ADD	R0, R14, R0, LSL #3

	; Devices greater than 15 are recorded as "other devices"...
	ADR	R14, IRQ_other_timings
	CMP	R0, R14
	MOVHI	R0, R14

	; Load the saved device number (probably null device)...
	LDR	R12, IRQ_device

	; Store our device number's table entry pointer...
	STR	R0, IRQ_device

	; Read the current time (A)..
	BL	Clk_GetHiResTime

	; Recover the original R0...
	MOV	R0, R11

	; Push the various bits of info onto the IRQ stack...
	;   R12 - the interrupted device's table entry pointer (may be null device, -1)
	;   R14 - the 2 MHz time on entry
	Push	"R12, R14"

	; Make sure the device driver returns to us - and call it...
	MOV	LR, PC
	LDMIA	R1, {R12, PC}

	; Pop all the interesting stuff from the IRQ stack...
	Pull	"R1-R3"
	;   R1 - the interrupted device
	;   R2 - the 2 MHz time on entry
	;   R3 - the return address (LR on entry)

	; Disable interrupts here (just in case claimant re-enabled them) before
	; we start doing read-modify-write operations...
	SCPSR	I_bit, 0, R14

	; Read the current time (B)...
	BL	Clk_GetHiResTime

	; Load the current device number into R0...
	LDR	R0, IRQ_device
	;   R0 - the current device

	; Subtract (A) from (B) to get the elapsed time (C)...
	SUB	R14, R14, R2

	; Restore the device number of the interrupted device...
	STR	R1, IRQ_device

	; Add (C) onto the total elapsed time for the current device...
	LDMIA	R0, {R2, R12}
	CMP	R1, #-1
	ADD	R2, R2, R14
	ADD	R12, R12, #1
	STMIA	R0, {R2, R12}

	; If there was no interrupted device, exit here...
	MOVEQ	PC, R3

	; Subtract (C) from the interrupted device's elapsed time...
	LDR	R2, [R1]
	SUB	R2, R2, R14
	STR	R2, [R1]

	; Return to the caller...
	MOV	PC, R3
;
; Current device number (in case one IRQ interrupts another)
;
IRQ_device
	DCD	-1	; Null device number to start with
;
; Table of information for each IRQ handler (i.e. total time and number of calls)
;
IRQ_timings
	DCD	0	; IRQ 0  - time
	DCD	0	; IRQ 0  - calls
	DCD	0	; IRQ 1  - time
	DCD	0	; IRQ 1  - calls
	DCD	0	; IRQ 2  - time
	DCD	0	; IRQ 2  - calls
	DCD	0	; IRQ 3  - time
	DCD	0	; IRQ 3  - calls
	DCD	0	; IRQ 4  - time
	DCD	0	; IRQ 4  - calls
	DCD	0	; IRQ 5  - time
	DCD	0	; IRQ 5  - calls
	DCD	0	; IRQ 6  - time
	DCD	0	; IRQ 6  - calls
	DCD	0	; IRQ 7  - time
	DCD	0	; IRQ 7  - calls
	DCD	0	; IRQ 8  - time
	DCD	0	; IRQ 8  - calls
	DCD	0	; IRQ 9  - time
	DCD	0	; IRQ 9  - calls
	DCD	0	; IRQ 10 - time
	DCD	0	; IRQ 10 - calls
	DCD	0	; IRQ 11 - time
	DCD	0	; IRQ 11 - calls
	DCD	0	; IRQ 12 - time
	DCD	0	; IRQ 12 - calls
	DCD	0	; IRQ 13 - time
	DCD	0	; IRQ 13 - calls
	DCD	0	; IRQ 14 - time
	DCD	0	; IRQ 14 - calls
	DCD	0	; IRQ 15 - time
	DCD	0	; IRQ 15 - calls
	DCD	0	; IRQ 16 - time
	DCD	0	; IRQ 16 - calls
	DCD	0	; IRQ 17 - time
	DCD	0	; IRQ 17 - calls
	DCD	0	; IRQ 18 - time
	DCD	0	; IRQ 18 - calls
	DCD	0	; IRQ 19 - time
	DCD	0	; IRQ 19 - calls
	DCD	0	; IRQ 20 - time
	DCD	0	; IRQ 20 - calls
	DCD	0	; IRQ 21 - time
	DCD	0	; IRQ 21 - calls
	DCD	0	; IRQ 22 - time
	DCD	0	; IRQ 22 - calls
	DCD	0	; IRQ 23 - time
	DCD	0	; IRQ 23 - calls
	DCD	0	; IRQ 24 - time
	DCD	0	; IRQ 24 - calls
	DCD	0	; IRQ 25 - time
	DCD	0	; IRQ 25 - calls
	DCD	0	; IRQ 26 - time
	DCD	0	; IRQ 26 - calls
	DCD	0	; IRQ 27 - time
	DCD	0	; IRQ 27 - calls
	DCD	0	; IRQ 28 - time
	DCD	0	; IRQ 28 - calls
	DCD	0	; IRQ 29 - time
	DCD	0	; IRQ 29 - calls
	DCD	0	; IRQ 30 - time
	DCD	0	; IRQ 30 - calls
	DCD	0	; IRQ 31 - time
	DCD	0	; IRQ 31 - calls
IRQ_other_timings
	DCD	0	; Some other IRQ - time
	DCD	0	; Some other IRQ - calls
IRQ_timings_end
	ASSERT	(IRQ_timings_end - IRQ_timings) = ?WSP_IRQinfo


; ****************************************************
; *
; * Read the time from timer zero (2 MHz timer). Taken from code in MPEGDriver module, written
; * by Ben Avison. Modified to read monotonic time direct from zero page rather than by using
; * OS_ReadMonotonicTime (because I'm going to be calling this from IRQ mode and I don't want
; * to fart-around preserving R14_svc - and I clearly want this to be fast!).
; *
; * In...
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *   R14	= time from 2 MHz timer
; *
Clk_GetHiResTime Entry "R0-R4"
	MOV	R14, #0x10C		; Zero-page location of monotonic timer
	LDR	R14, [R14]		; R14 = cs timer, maybe out of date if IRQ not serviced
	MOV	R3, #&4E00
	ORR	R3, R3, #&20		; R3 = 2000000/100 - useful constant
	MUL	R14, R3, R14
	; Read IRQ status after reading Timer 0 to determine if cs timer is out of date.
	; In case Timer 0 wraps between reading Timer 0 and reading IRQ status, also read
	; IRQ status before reading Timer 0, and if the IRQ becomes set between the two
	; status reads, then ignore the actual Timer 0 read and behave as though we had
	; read the value just after it wrapped.
	MOV	R0, #IOC
	LDRB	R1, [R0, #IOCIRQREQA]
	STRB	R0, [R0, #Timer0LR]
	LDRB	R4, [R0, #Timer0LL]
	LDRB	R2, [R0, #Timer0LH]
	ORRS	R4, R4, R2, LSL #8	; Also clears C (useful later)
	LDRB	R2, [R0, #IOCIRQREQA]
	TST	R2, #timer0_bit		; Timer wrap IRQ pending?
	ADDNE	R14, R14, R3		; Add 1 cs if so
	EOR	R1, R1, R2
	TST	R1, #timer0_bit		; Did timer wrap?
	SBCEQ	R4, R3, R4		; R12 = 19999-Timer0 (note cunning use of C flag)
	ADDEQ	R14, R14, R4
	EXIT


; ****************************************************
; *
; * End of the block to copy into the RMA
; *
IRQ_code_end


	END
