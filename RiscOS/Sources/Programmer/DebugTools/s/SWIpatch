; >s.SWIpatch


; ****************************************************
; *
; * Remove all of the claimants from the Kernels SWIs to restore it to its
; * original state. Make sure that all of the RMA blocks claimed are freed.
; *
; * Note: for simplicity, this is not semaphored so let's hope no-one calls
; * one of our SWIs while this routine is in progress (unlikely/impossible
; * as we only call this from module finalisation).
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_unpatch Entry "R1-R3"
	LDR	R10, [R12, #WSP_KernelSWIs]
	LDR	R11, [R12, #WSP_SWIPatch]
	TEQ	R10, #0
	BEQ	%FT03
	MOV	R0, #ModHandReason_Free
	MOV	R1, #0
	;
	; R0  = reason code for OS_Module to free RMA block
	; R1  = offset into patch table and Kernel SWI despatch table
	; R2  = current block pointer (may be null)
	; R3  = scratch
	; R4  = scratch
	; R10 = pointer to base of Kernel SWI despatch table
	; R11 = pointer to the base of my patch table
	; R12 = module workspace pointer
	; R14 = scratch
	;
00	; Is this SWI patched?
	LDR	R2, [R11, R1]
	TEQ	R2, #0
	BEQ	%FT02
01	; Yes - remove the patches...
	LDR	R3, [R2, #SWINext]	; Read the next pointer into R3
	LDR	R14, [R2, #SWICode]	; Read the code address into R4
	TEQ	R3, #0
	STREQ	R14, [R10, R1]		; Replace the Kernel code pointer into it's despatch table
	STRNE	R3, [R11, R1]		; Delink the block
	SWI	XOS_Module		; Free the block
	BVS	%FT03
	; Have we reached the end of the vector yet?
	TEQ	R3, #0
	MOVNE	R2, R3
	BNE	%BT01
02	; Have we reached the end of the patch table yet?
	ADD	R1, R1, #4
	CMP	R1, #Max_Swi :SHL: 2
	BLO	%BT00
	; Yes - free our patch code and table from the RMA...
	LDR	R2, [R12, #WSP_SWIDespatch]
	SWI	XOS_Module
03	;
	EXIT


; ****************************************************
; *
; * Look for the Kernel's SWI despatch table. If found, copy our SWI despatch
; * code into the RMA. Initialise the patch table to contain zeros.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_patch Entry "R1-R3"
	; Store the base address of the Kernel's SWI despatch table in our workspace...
	LDR	R1, =0x01F033FC
	STR	R1, [R12, #WSP_KernelSWIs]
	; Claim a block of RMA (code + patch table)...
	LDR	R3, =(end_swi_despatch - swi_despatch) + (Max_Swi :SHL: 2)
	MOV	R0, #ModHandReason_Claim
	SWI	XOS_Module
	BVS	%FT02
	; Store the block pointer in our workspace...
	STR	R2, [R12, #WSP_SWIDespatch]
	; Copy our code into the block...
	ADR	R0, swi_despatch
	ADR	R3, end_swi_despatch
	MOV	R1, R2
00	LDR	R14, [R0], #4
	STR	R14, [R2], #4
	CMP	R0, R3
	BLO	%BT00
	; Patch the address of the dirty_branch instruction into the code copy...
	ADD	R0, R6, #Max_Swi :SHL: 2
	STR	R0, [R2, #-4]
	; If this is a pre-Ursula Kernel, patch our SWI despatcher...
	Push	"R1-R2"
	LDR	R1, [R12, #WSP_KernelSWIs]
	LDR	R0, =0x13CEE201		; ="BICNE R14,R14,#0x10000000"
	LDR	R1, [R1, #-16]
	TEQ	R1, R0
	LDREQ	R2, =0xE88D4400		; ="LDMIA SP,{R10,R14}"
	ADDEQ	R0, R1, #IsRO4 - swi_despatch
	STREQ	R2, [R0]
	Pull	"R1-R2"
	; SynchroniseCodeAreas on the copied code...
	MOV	R0, #2_1
	SWI	XOS_SynchroniseCodeAreas
	Write	"Synchronise &"
	RegHex	R1
	Write	" to &"
	RegHex	R2
	; Store the patch table address in our workspace...
	STR	R2, [R12, #WSP_SWIPatch]
	ADD	R3, R2, #Max_Swi :SHL: 2
	Write	" (end patch &"
	RegHex	R3
	WriteLn	")"
	MOV	R0, #0
	; Zero-initialise the patch table...
01	STR	R0, [R2], #4
	CMP	R2, R3
	BLO	%BT01
02	;
	EXIT


; ***************************************************
; *
; * This code gets copied into the RMA
; *
swi_despatch ROUT
	; Our stack frame format...
	;
	;   +12	= Next claimant block pointer
	;   +8	= Claimant's code pointer
	;   +4	= Caller's CPSR (R12 on entry)
	;   SP	= Return address to claim SWI
	;
	; On entry from Kernel's SWI despatcher (RISC OS 4 and beyond)...
	;
	;   R0-R9  = as for the SWI
	;   R10    = scratch register
	;   R11    = SWI number (excluding the X bit)
	;   R12    = caller's CPSR
	;   R13    = full-descending SVC stack pointer
	;   R14    = as R12 with V bit cleared
	;   CPSR_f = NZCV all clear, Q is undefined
	;   CPSR_c = ARM mode, SVC26 or SVC32, IRQs/FIQs as for caller
	;
	; Store an address at SP[0] for claimants to Pull "PC" in order
	; to claim the SWI. Also, store the caller's CPSR as SP[4] so we
	; can load it into R10 for all claimants (except the Kernel).
	;
	SUB	SP, SP, #16
	JumpAddress R10, claim, Forward
; If this code is patching a pre-RISC OS 4 Kernel, we replace this instruction...
IsRO4	STMIA	SP, {R10, R12}
; ...with this instruction after copying this code into RMA...
;PreRO4	STMIA	SP, {R10, R14}
	;
	; Load the patch table entry pointing to the block of the first
	; claimant on this SWI vector.
	;
	ADR	R10, end_swi_despatch
	LDR	R10, [R10, R11, LSL #2]
	;
	; Loop through all claimants upto but not including the Kernel
	; (which is always the last claimant on a vector).
	;
00	LDMIA	R10, {R10, R12, R14}	; Load: R10=next ptr; R12=pwd; R14=code ptr
	TEQ	R10, #0			; Is this the Kernel claimant?
	BEQ	%FT01			; Branch to the special Kernel despatch code
	STR	R10, [SP, #12]		; Store next ptr in our stack frame
	STR	R14, [SP, #8]		; Store code ptr in our stack frame
	LDR	R10, [SP, #4]		; Load caller's CPSR from stack frame
	MOV	LR, PC			; Set return address to instruction after "LDR PC,[]"
	LDR	PC,  [SP, #8]		; Jump into to the claimant's code
	STR	R10, [SP, #4]		; Store the (possibly modified) CPSR in our stack frame
	LDR	R10, [SP, #12]		; Reload the next ptr
	B	%BT00			; Move on to the next claimant
	;
	; If no-one claimed the SWI, we restore R12, R14 and CPSR_f to their
	; state on entry, release our stack frame and despatch the Kernel SWI.
	;
01	LDR	R12, [SP, #4]		; Move the caller's CPSR (may be modified) into R12
	ADDS	SP, SP, #16		; Clear C and V flags. Release stack frame
	TEQ	PC, #0			; Clear N and Z flags
	MOV	R10, R14		; Move the address of the Kernel SWI into R10
	BIC	R14, R12, #V_bit	; Copy R12 (excluding V bit) into R14
	MOV	PC, R10			; Call the Kernel SWI code
	;
	; If a claimant chooses to claim the SWI, we release our stack frame,
	; put the CPSR to return into LR and branch to the Kernel's SWI exit
	; code.
	;
claim	MOV	LR, R10			; Move CPSR to return to caller into LR
	ADD	SP, SP, #12		; Release stack frame
	LDR	PC, dirty_branch	; Branch to the Kernel's SWI exit code
;
; This word gets patched with the address of a branch to the Kernel's SWI exit code (which
; follows the Kernel's SWI despatch table) after we've copied this code into RMA...
;
dirty_branch
	DCD	0
;
; The RMA copy of this code will have a 1024 byte block (our patch table) initialised to
; zero after this label...
;
end_swi_despatch
; *
; * End of code copied into the RMA
; *
; ***************************************************


; ****************************************************
; *
; * If a Kernel SWI is not yet vectored, create a vector with the original
; * Kernel SWI code as the last claimant and the new claimant (to add) as
; * the head item. May return an error if either the RMA claim fails.
; *
; * In...
; *   R0	= SWI number (excluding X bit)
; *   R1	= pointer to code to add
; *   R2	= private word for code to add
; *   R10	= pointer to our patch table entry
; *   R11	= pointer to the Kernels SWI despatch table entry
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1	= corrupted
; *   R2-R7	= preserved
; *   R8	= pointer to head RMA block (or corrupt on error)
; *   R9	= pointer to tail RMA block (or corrupt on error)
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
Create_SWI_Vector Entry
	; Claim two blocks of 12 bytes each from the RMA...
	Push	"R0, R2-R3"
	MOV	R8, #0
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #12
	SWI	XOS_Module
	MOVVC	R8, R2
	SWIVC	XOS_Module
	MOVVC	R9, R2
	MOVVS	R14, R0
	Pull	"R0, R2-R3"
	BVS	%FT00
	;
	; R1  = pointer to code
	; R2  = private word of code
	; R8  = RMA block 1
	; R9  = RMA block 2
	; R10 = SWI patch table entry pointer
	; R11 = Kernel SWI vector entry pointer
	; R12 = module workspace pointer
	;
	; Disable interrupts (in case we're re-entered)...
	SCPSR	I_bit, 0, R0,, R14
	NOP
	; Store the details of the new claimant in the first RMA block...
	STR	R9, [R8, #SWINext]	; block1[0] = pointer to block2
	STR	R2, [R8, #SWIWsp]	; block1[4] = private word
	STR	R1, [R8, #SWICode]	; block1[8] = code pointer
	STR	R8, [R10]		; Our patch table points to this block as the list head
	; Store the details of the original Kernel SWI code in the second RMA block...
	LDR	R10, [R12, #WSP_SWIDespatch]
	MOV	R1, #0
	LDR	R0, [R11]
	STR	R1, [R9, #SWINext]	; block2[0] = next pointer (always zero for tail item)
	STR	R1, [R9, #SWIWsp]	; block2[4] = private word (not used by Kernel)
	STR	R0, [R9, #SWICode]	; block2[8] = original Kernel SWI code pointer
	; Point the Kernel SWI despatch table entry at our SWI despatch code...
	STR	R10, [R11]
	; Restore interrupt state...
	RestPSR	R14
	NOP
	; Exit...
	EXIT
00	; Error exit - may have to free our first RMA block...
	TEQ	R8, #0
	MOV	R0, R14
	EXIT	EQ
	MOV	R9, R2	; Preserve R2
	MOV	R2, R8
	MOV	R8, R0	; Preserve R0 (err blk ptr)
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
	MOV	R2, R9	; Restore R2
	MOV	R0, R8	; Restore R0 (err blk ptr)
	SETV
	EXIT


; ****************************************************
; *
; * If a Kernel SWI is already vectored, create a new vector entry ready to be placed
; * at the head of the vector. May return an error if the RMA claim fails.
; *
; * In...
; *   R0	= SWI number (excluding X bit)
; *   R1	= pointer to code to add
; *   R2	= private word for code to add
; *   R8	= contents of our patch table entry (previous head item pointer)
; *   R10	= pointer to our patch table entry
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R7	= preserved
; *   R8	= pointer to new RMA block
; *   R9-R11	= preserved
; *   R12	= pointer to previous head item in vector
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
New_SWI_Vector_Head ROUT
	MOV	R12, R8
	; Claim a 12 byte block from the RMA...
	Push	"R0, R2-R3, LR"
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #12
	SWI	XOS_Module
	MOV	R8, R2
	Pull	"R0, R2-R3, LR"
	BVS	%FT00
	;
	; R0  = SWI number
	; R1  = pointer to code
	; R2  = private word of code
	; R8  = new RMA block
	; R10 = patch table pointer
	; R12 = pointer to previous head item
	;
	; Initialise the claimant's block (as head of list)...
	STR	R1,  [R8, #SWICode]	; [8] = code pointer
	STR	R2,  [R8, #SWIWsp]	; [4] = private word
	STR	R12, [R8, #SWINext]	; [0] = pointer to previous head item
00	MOV	PC, LR


	END
