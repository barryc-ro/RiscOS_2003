; s.Debug


	GBLL	DEBUG
;DEBUG	SETL	{TRUE}
DEBUG	SETL	{FALSE}

  [ DEBUG
	! 0, ""
	! 0, "WARNING: This is a debug build!"
	! 0, ""
  ];DEBUG


; ****************************************************
; *
; * MACRO Write <string>
; *
; * Send the specified string to all active output streams.
; *
	MACRO
	Write	$string
  [ DEBUG
    [ "$string" <> ""
	Push	"LR"
	SWI	XOS_WriteS
	DCB	"$string", 0
	ALIGN
	Pull	"LR"
    ];"$string" <> ""
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO WriteLn [<string>]
; *
; * Send the specified string followed by a newline to all active
; * output streams. If no string is specified, only a newline is
; * sent.
; *
	MACRO
	WriteLn	$string
  [ DEBUG
    [ "$string" = ""
	Push	"LR"
	SWI	XOS_NewLine
	Pull	"LR"
    |
	Push	"LR"
	SWI	XOS_WriteS
	DCB	"$string", 10, 13, 0
	ALIGN
	Pull	"LR"
    ];"$string" = ""
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO RegHex <register> [<number of nibbles>]
; *
; * Send the contents of the specified register in hexadecimal
; * to all active output streams. Default is 8 nibbles (32 bit).
; *
	MACRO
	RegHex	$reg, $len
  [ DEBUG
	Push	"R0-R2, LR"
	SUB	SP, SP, #12
	MOV	R0, $reg
	MOV	R1, SP
	MOV	R2, #12
    [ "$len" = ""
	SWI	XOS_ConvertHex8
    |
	SWI	XOS_ConvertHex$len
    ];"$len" = ""
	SWI	XOS_Write0
	ADD	SP, SP, #12
	Pull	"R0-R2, LR"
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO RegDec <register> [<number of bytes>]
; *
; * Send the contents of the specified register in decimal to all
; * active output streams. Default is 4 bytes (32 bit).
; *
	MACRO
	RegDec	$reg, $len
  [ DEBUG
	Push	"R0-R2, LR"
	SUB	SP, SP, #16
	MOV	R0, $reg
	MOV	R1, SP
	MOV	R2, #16
    [ "$len" = ""
	SWI	XOS_ConvertCardinal4
    |
	SWI	XOS_ConvertCardinal$len
    ];"$len" = ""
	SWI	XOS_Write0
	ADD	SP, SP, #16
	Pull	"R0-R2, LR"
  ];DEBUG
	MEND

; ****************************************************
; *
; * MACRO Pause [<delay>]
; *
; * Pause for the specified number of centi-seconds. Default
; * is one second.
; *
	MACRO
	Pause	$cs
  [ DEBUG
	Push	"R0-R1, LR"
	SWI	XOS_ReadMonotonicTime
    [ "$cs" = ""
	ADD	R1, R0, #100
    |
	ADD	R1, R0, #$cs
    ];"$cs" = ""
00	SWI	XOS_ReadMonotonicTime
	CMP	R0, R1
	BLO	%BT00
	Pull	"R0-R1, LR"
  ];DEBUG
	MEND


;  [ DEBUG
;
;CP15	CP 15
;C6	CN 6
;C5	CN 5
;C0	CN 0
;
;;
;; Map the specified page as being read-only. Writes to it will data abort.
;; Note: it stores the old state in a workspace word, so we can't call this
;; routine on multiple pages.
;;
;; R10 = address in page to invalidate
;; R12 = module workspace pointer
;;
;invalidate_page
;	Entry	"R0-R3, R10"
;	SCPSR	I_bit, 0, R14,, R3
;	MOV	R0, #6
;	MOV	R1, #0
;	MOV	R2, #14
;	SWI	XOS_ReadSysInfo		; R2 = L2PT
;	MOV	R10, R10, LSR #12
;	ADD	R14, R2, R10, LSL #2
;	LDR	R0, [R14]
;	STR	R0, [R12, #WSP_L2PTEntry]
;	BIC	R0, R0, #0xFF0
;	STR	R0, [R14]
;	MOV	R10, R10, LSL #12
;	MCR	CP15, 0, R10, C6, C0
;	RestPSR	R3
;	NOP
;	EXIT
;;
;; Restore the state of the specified page back to the state before invalidation.
;;
;; R10 = address in page to restore
;; R12 = module workspace pointer
;;
;validate_page
;	Entry	"R0-R3, R10"
;	SCPSR	I_bit, 0, R14,, R3
;	MOV	R0, #6
;	MOV	R1, #0
;	MOV	R2, #14
;	SWI	XOS_ReadSysInfo		; R2 = L2PT
;	MOV	R10, R10, LSR #12
;	ADD	R14, R2, R10, LSL #2
;	LDR	R0, [R12, #WSP_L2PTEntry]
;	STR	R0, [R14]
;	MOV	R10, R10, LSL #12
;	MCR	CP15, 0, R10, C6, C0
;	RestPSR	R3
;	NOP
;	EXIT
;  ];DEBUG


	END
