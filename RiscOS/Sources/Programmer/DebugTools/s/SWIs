; s.SWIs


; ****************************************************
; *
; * Various area types, returned in R0 from SWI DebugTools_AddressInfo
; *
			^	0
Area_MappedOut		#	1	; 0 - A mapped-out page
Area_Module		#	1	; 1 - A module
Area_ModuleWsp		#	1	; 2 - Some module workspace
Area_DA			#	1	; 3 - A dynamic area
Area_DAMappedOut	#	1	; 4 - A dynamic area (mapped-out page)
Area_ZeroPage		#	1	; 5 - The zero page
Area_Kernel		#	1	; 6 - The Kernel
Area_ROM		#	1	; 7 - The ROM space
Area_AppSlot		#	1	; 8 - The application slot
Area_Unknown		*	@	; 9 - Some other type of area


; ****************************************************
; *
; * Some special constants
; *
RMA			*	1	; Dynamic area number for RMA
Max_Vector		*	0x30	; Number of software vectors
Max_Swi			*	0x100	; Maximum number of OS SWIs


; ****************************************************
; *
; * Kernel vector block format
; *
			^	0
VecNext			#	4	; The next vector block pointer
VecWsp			#	4	; The claimant's workspace pointer
VecCode			#	4	; The claimant's code pointer
VecSize			#	@


; ****************************************************
; *
; * Kernel SWI vector block format
; *
			^	0
SWINext			#	4	; The next vector block pointer
SWIWsp			#	4	; The claimant's workspace pointer
SWICode			#	4	; The claimant's code pointer
SWISize			#	@


; ****************************************************
; *
; * Module SWI handler entry point
; *
; * In...
; *   R0-R9	= passed in from caller
; *   R11	= SWI number offset from SWI chunk base
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= values to return to caller
; *   R10-R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   N,Z,C	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_SWIHandler ROUT
	LDR	R12, [R12]
	Write	"SWI "
	RegDec	R11
	WriteLn
	RSBS	R11, R11, #(swi_end - swi_start) :SHR: 2
	ADDHS	PC, PC, R11, LSL #2
	B	badswi_err
swi_start				; SWI:
	B	SWI_ReleaseOSSWI	;  9
	B	SWI_AddToOSSWI		;  8
	B	SWI_ClaimOSSWI		;  7
	B	SWI_UnknownIRQs		;  6
	B	SWI_IRQInfo		;  5
	B	SWI_Devices		;  4
	B	SWI_Tickers		;  3
	B	SWI_Vectors		;  2
	B	SWI_Where		;  1
swi_end					;  0
; This table rolls straight into SWI 0...


; ****************************************************
; *
; * SWI DebugTools_AddressInfo
; *
; * Given an address, try to sensibly interpret the context of that address.
; * For example, is it in a module, a module's workspace, the ROM, etc...
; *
; * In...
; *   R0	= flags word (zero)
; *   R1	= address to check
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= area type code (or pointer to error block)
; *   R1	= base address of area
; *   R2	= offset of R1 on entry into area
; *   R3	= additional area info (depends upon R0 on exit)
; *   R4-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_AddressInfo Entry "R4-R9"
	;
	; Is the address in zero page?
	;
	LDR	R9, [R12, #WSP_PageSize]
	CMP	R1, R9
	BHI	%FT05
	;
	; The specified address lies in zero page...
	;
	;   R0 -> Area_ZeroPage
	;   R1 -> as R1 on entry
	;   R2 -> 0
	;   R3 -> 0
	;
	MOV	R2, #0
	MOV	R3, #0
	MOV	R0, #Area_ZeroPage
	CLRV
	EXIT
05	;
	; Does the address lie within the ROM space?
	;
	LDR	R14, [R12, #WSP_ROMBase]
	CMP	R1, R14
	BLO	%FT10
	LDR	R14, [R12, #WSP_ROMTop]
	CMP	R1, R14
	BHS	%FT10
	; If it's below the UtilityModule, it is in the Kernel...
	LDR	R14, [R12, #WSP_UtilMod]
	CMP	R1, R14
	BHS	%FT07
	;
	; The specified address lies in the Kernel...
	;
	;   R0 -> Area_Kernel
	;   R1 -> ROM base address
	;   R2 -> offset from R1
	;   R3 -> 0
	;
	LDR	R14, [R12, #WSP_ROMBase]
	MOV	R3, #0
	MOV	R0, #Area_Kernel
	SUB	R2, R1, R14
	ADDS	R1, R14, #0		; Clear V flag
	EXIT
07	; The address is in the ROM somewhere. Read the RMA size and enumerate all modules...
	MOV	R12, R1
	MOV	R0, #2
	MOV	R1, #RMA
	SWI	XOS_DynamicArea
	BVS	ai_err_exit
	MOV	R10, R3
	ADD	R11, R3, R2
	MOV	R8, #0
	B	%FT50
10	;
	; Does the address lie within application space?
	;
	LDR	R14, [R12, #WSP_AppSlotTop]
	CMP	R1, R14
	BHS	%FT15
	LDR	R14, [R12, #WSP_AppSlotBase]
	CMP	R1, R14
	BLO	%FT15
	;
	; The specified address lies in application space...
	;
	;   R0 -> Area_AppSlot
	;   R1 -> &8000
	;   R2 -> offset from R1
	;   R3 -> 0
	;
	SUB	R2, R1, R14
	ADDS	R1, R14, #0		; Clear V flag
	MOV	R3, #0
	MOV	R0, #Area_AppSlot
	EXIT
15	;
	; Does the address lie within a dynamic area?
	;
	MOV	R12, R1
	MVN	R1, #0
20	MOV	R0, #3
	SWI	XOS_DynamicArea
	BVS	ai_err_exit
	CMP	R1, #-1
	BEQ	%FT25
	MOV	R0, #2
	SWI	XOS_DynamicArea
	BVS	ai_err_exit
	CMP	R12, R3		; Test address against DA base
	BLO	%BT20
	ADD	R5, R3, R5
	CMP	R12, R5		; Test address against DA maximum
	BHS	%BT20
	ADD	R2, R3, R2
	CMP	R12, R2		; Test address against DA current top
	MOVHS	R0, #Area_DAMappedOut
	BHS	%FT35
	; It is in a dynamic area. Do special stuff for certain areas...
	TEQ	R1, #RMA
	BEQ	%FT45
	; All other areas are treated normally...
	B	%FT30
25	;
	; Not in a dynamic area. Is the address mapped into memory?
	;
	MOV	R0, R12
	MOV	R1, R12
	SWI	XOS_ValidateAddress
	BCS	%FT40
	;
	; We could check for other things (don't know what though)...
	;
; ...
; ...
; ...
	;
	; The specified address lies in some unidentified location...
	;
	;   R0 -> Area_Unknown
	;   R1 -> as R1 on entry
	;   R2 -> 0
	;   R3 -> 0
	;
ai_exit	ADDS	R1, R12, #0		; Clear V flag
	MOV	R2, #0
	MOV	R3, #0
	MOVS	R0, #Area_Unknown
ai_err_exit
	EXIT
	;
	; The specified address lies within some dynamic area (mapped-in page)...
	;
	;   R0 -> Area_DAMappedOut (label 35) or something else (label 30)
	;   R1 -> base address of dynamic area
	;   R2 -> offset into dynamic area
	;   R3 -> pointer to dynamic area name string
	;
30	MOV	R0, #Area_DA
35	TEQ	R8, #0			; Override the area type from dynamic area to ROM if
	MOVEQ	R0, #Area_ROM		; the address lies within the ROM space
	MOVEQ	R1, R12
	MOVEQ	R2, #0
	MOVNE	R1, R3
	SUBNE	R2, R12, R3
	MOV	R3, R8
	CLRV
	EXIT
	;
	; The specified address lies in a mapped-out page...
	;
	;   R0 -> Area_MappedOut
	;   R1 -> address rounded-down to nearest page boundary
	;   R2 -> address's offset from R1
	;   R3 -> 0
	;
40	BIC	R1, R1, R9
	SUB	R2, R0, R1
	MOV	R3, #0
	MOV	R0, #Area_MappedOut
	CLRV
	EXIT
	;
	; The specified address lies within RMA or ROM. Is it a module or module workspace?
	;
45	MOV	R10, R3
	MOV	R11, R2
50	MOV	R1, #0
	MOV	R2, #0
	; R1  = initial module number
	; R2  = initial module instance
	; R8  = dynamic area name pointer (or zero if in ROM)
	; R10 = pointer to base of RMA (inclusive)
	; R11 = pointer to end of RMA (exclusive)
	; R12 = original address
55	MOV	R0, #ModHandReason_GetNames
	SWI	XOS_Module		; V set if no more modules
	BVS	%FT65
	; R1  = next module number
	; R2  = next module instance
	; R3  = module base address
	; R4  = module module workspace pointer
	; R8  = dynamic area name pointer (or zero if in ROM)
	; R10 = pointer to base of RMA (inclusive)
	; R11 = pointer to end of RMA (exclusive)
	; R12 = original address
	LDR	R0, [R3, #-4]		; Load the module size word (RMA or ROM stores it in word below module)
	CMP	R12, R3
	BLO	%FT60
	SUB	R0, R0, #4		; Size word includes itself. Remove that.
	ADD	R0, R3, R0
	CMP	R12, R0
	BHS	%FT60
	;
	; The specified address is within this module...
	;
	;   R0 -> Area_Module
	;   R1 -> base address of module
	;   R2 -> offset into module
	;   R3 -> pointer to module title string
	;
	ADDS	R1, R3, #0		; Clear V flag
	SUB	R2, R12, R3
	LDR	R0, [R3, #16]		; Module title string offset
	ADD	R3, R0, R3		; Module title string pointer
	MOV	R0, #Area_Module
	EXIT
60	; Is the private word pointing into the RMA?
	CMP	R4, R10
	BLO	%BT55
	CMP	R4, R11
	BHS	%BT55
	; Is the address in the module's workspace?
	LDR	R0, [R4, #-4]		; Read the size of the module's workspace
	CMP	R12, R4
	BLO	%BT55
	SUB	R0, R0, #4		; Size word includes itself. Remove that.
	ADD	R0, R4, R0
	CMP	R12, R0
	BHS	%BT55
	;
	; The specified address is within this module's workspace...
	;
	;   R0 -> Area_ModuleWsp
	;   R1 -> base address of workspace
	;   R2 -> offset into workspace
	;   R3 -> pointer to module title string
	;
	ADDS	R1, R4, #0		; Clear V flag
	SUB	R2, R12, R4
	LDR	R0, [R3, #16]		; Module title string offset
	ADD	R3, R0, R3		; Module title string pointer
	MOV	R0, #Area_ModuleWsp
	EXIT
65	; There are no more modules to enumerate, we're simply in the RMA.
	; Output info using the dynamic area stuff...
	MOV	R3, R10
	B	%BT30


; ****************************************************
; *
; * SWI DebugTools_Where
; *
; * Given an address (or the address of the last abort), output an analysis
; * of where that address is (using the AddressInfo SWI).
; *
; * In...
; *   R0	= flags word
; *     0	0 - R1 contains address to inspect
; *		1 - Inspect address of the last exception
; *     1-31	  - should be zero
; *   R1	= address to check (if R0:0 is clear on entry)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_Where Entry "R1-R3,R9"
	; Are we looking for an exception's address?
	TST	R0, #1
	BEQ	%FT01
	; Read the exception register dump to extract the PC at that point...
	MOV	R0, #ExceptionDumpArea
	MOV	R1, #0
	SWI	XOS_ChangeEnvironment
	EXIT	VS
	; If we've got a PC, see if we have to clear flags (i.e. are we in 26 bit mode?)...
	MOV	R0, #0
	MRS	R0, CPSR
	LDR	R1, [R1, #60]
	TST	R0, #2_11100		; EQ in 26 bit mode, NE in 32 bit mode
	BICEQ	R1, R1, #0xFC000003
01	; Output the first part of the string...
	SWI	XOS_WriteS
	DCB	"Address &", 0
	ALIGN
	EXIT	VS
	Push	"R1"
	MOV	R0, R1
	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWIVC	XOS_Write0
	Pull	"R1"
	EXIT	VS
	; Find-out some information about the specified address...
	MOV	R9, R12
	BL	SWI_AddressInfo
	EXIT	VS
	MOV	R12, R9
	; Branch to the appropriate routine depending upon the area type...
	RSBS	R11, R0, #(where_end - where_start) :SHR: 2
	ADDGE	PC, PC, R11, LSL #2
	B	where_area_err
where_start
	B	Where_Area_Unknown
	B	Where_Area_AppSlot
	B	Where_Area_ROM
	B	Where_Area_Kernel
	B	Where_Area_ZeroPage
	B	Where_Area_DAMappedOut
	B	Where_Area_DA
	B	Where_Area_ModuleWsp
	B	Where_Area_Module
where_end
; This table rolls straight into area type 0...
Where_Area_MappedOut
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, MapOut
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
Where_Area_ZeroPage
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, ZeroPg
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
Where_Area_ROM
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, TheROM
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
Where_Area_Kernel
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, Kernel
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
Where_Area_AppSlot
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, AppSpc
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
Where_Area_Unknown
	ADR	R0, IsIn
	SWI	XOS_Write0
	ADR	R0, UnkMem
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	EXIT
; "Address &xxxxxxxx is at offset &xxxxxxxx..."
; "Address &xxxxxxxx is in..."
IsIn	DCB	" is in ", 0
MapOut	DCB	"a mapped-out page", 0
ZeroPg	DCB	"zero page", 0
TheROM	DCB	"the ROM", 0
Kernel	DCB	"the Kernel", 0
AppSpc	DCB	"application space", 0
UnkMem	DCB	"unidentified memory", 0
	ALIGN
Where_Area_Module
	ADR	R0, InMod
	MOV	R1, R3
	MOV	R3, #0
	BL	Where_Writeln
	SWI	XOS_NewLine
	EXIT
Where_Area_ModuleWsp
	ADR	R0, In
	MOV	R1, R3
	ADR	R3, Wkspc
	BL	Where_Writeln
	SWI	XOS_NewLine
	EXIT
Where_Area_DA
	ADR	R0, DynA
	MOV	R1, R3
	MOV	R3, #0
	BL	Where_Writeln
	SWI	XOS_NewLine
	EXIT
Where_Area_DAMappedOut
	ADR	R0, DynA
	MOV	R1, R3
	ADR	R3, DAmap
	BL	Where_Writeln
	SWI	XOS_NewLine
	EXIT
InMod	DCB	" in module ", 0
In	DCB	" in ", 0
Wkspc	DCB	" module's workspace", 0
DynA	DCB	" in dynamic area ", 0
DAmap	DCB	" (mapped-out page)", 0
AtOff	DCB	" is at offset &", 0
	ALIGN


; ****************************************************
; *
; * Output a line from the Where SWI. The string is supplied
; * in several sections.
; *
; * In...
; *   R0 - pointer to follow-up string
; *   R1 - pointer to next bit (or zero)
; *   R2 - offset to output (number not string)
; *   R3 - pointer to next bit (or zero)
; *
Where_Writeln Entry
	; First part (i.e. " is at offset &xxxxxxxx")...
	Push	"R0-R1"
	ADR	R0, AtOff
	SWI	XOS_Write0
	MOV	R0, R2
	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWI	XOS_Write0
	Pull	"R0-R1"
	; Next bit (i.e. " in ")...
	SWI	XOS_Write0
	; Next bit (i.e. module title)...
	MOVS	R0, R1
	EXIT	EQ
	SWI	XOS_Write0
	; Next bit (i.e. "'s module workspace")...
	MOVS	R0, R3
	SWINE	XOS_Write0
	EXIT


; ****************************************************
; *
; * SWI DebugTools_Vectors
; *
; * Output information on the claimants of each of the software vectors in a
; * human-readable format.
; *
; * In...
; *   R0	= flags word
; *     0	0 - list contents of all vectors
; *		1 - list contents of vector number in R1
; *     1-31	  - should be zero
; *   R1	= vector number to enumerate (if R0:0 set on entry)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_Vectors ROUT
	CMP	R1, #Max_Vector
	BHS	bad_vec_err
	Entry	"R1-R5"
	; Load ourpointer to the base of the Kernel vector pointer table
	LDR	R14, [R12, #WSP_VecPtrTab]
	; Do we output a specific vector or a range of vectors?
	TST	R0, #1
	MOVEQ	R2, R14
	ADDEQ	R3, R14, #(Max_Vector) :SHL: 2
	ADDNE	R2, R14, R1, LSL #2
	ADDNE	R3, R14, R1, LSL #2
	ADRL	R4, Vector_names
	; R1 - vector number
	; R2 - VecPtrTbl current pos
	; R3 - VecPtrTbl end pos
	; R4 - vector name string pointer table
	;
00	; Output the current vector
	LDR	R5, [R2], #4
	Push	"R1-R2"
	LDR	R0, [R4, R1, LSL #2]
	SWI	XOS_WriteS
	DCB	"Software vector ", 0
	ALIGN
	ADD	R0, R4, R0
	SWI	XOS_Write0
	SWI	XOS_WriteS
	DCB	" (&", 0
	ALIGN
	MOV	R0, R1
	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex2
	SWIVC	XOS_Write0
        SWI	XOS_WriteS
	DCB	")", 10, 13, 0
	ALIGN
	Pull	"R1-R2"
	BL	Enum_vector
	ADD	R1, R1, #1
	CMP	R2, R3
	BLO	%BT00
	EXIT
; In...
;   R5 = vector block pointer
; Out...
;   R0 = corrupted
;   R5 = corrupted
Enum_vector Entry "R1-R2, R6-R7"
00	LDMIA	R5, {R5-R7}
	SWI	XOS_WriteS
	DCB	"  Code  - ", 0
	ALIGN
	Push	"R12"
	MOV	R0, #0
	MOV	R1, R7
	BL	SWI_Where
	Pull	"R12"
	SWI	XOS_WriteS
	DCB	"  Wkspc - &", 0
	MOV	R0, R6
	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWIVC	XOS_Write0
        SWIVC	XOS_NewLine
	TEQ	R5, #0
	BNE	%BT00
	EXIT

; ****************************************************
; *
; * SWI DebugTools_Tickers
; *
; * Enumerate all of the currently pending CallAfters and CallEverys in a
; * human-readable format.
; *
; * In...
; *   R0	= flags word (zero)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= preserved (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_Tickers Entry "R0-R6"
	; Load the address of the TickNodeChain pointer...
	LDR	R2, [R12, #WSP_TickNodeChain]
	; Output the title line...
	SWI	XOS_WriteS
	DCB	"Ticker event claimants...", 10, 13, 0
	ALIGN
	; Load the pointer to the first node...
	TEQ	R2, #0
	LDRNE	R2, [R2]
	TEQNE	R2, #0
	BNE	%FT00
	SWI	XOS_WriteS
	DCB	"List empty.", 10, 13, 0
	ALIGN
	EXIT
00	; Enumerate the ticker node chain...
	LDMIA	R2, {R2-R6}
	Push	"R2"
	TEQ	R3, #0
	BNE	%FT01
	SWI	XOS_WriteS
	DCB	" CallAfter ", 0
	ALIGN
	MOV	R0, R6
	B	%FT02
01	SWI	XOS_WriteS
	DCB	" CallEvery ", 0
	ALIGN
	MOV	R0, R3
02 	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertCardinal4
	SWIVC	XOS_Write0
	SWI	XOS_WriteS
	DCB	" cs", 10, 13
	DCB	"  Code  - ", 0
	ALIGN
	Push	"R12"
	MOV	R1, R4
	MOV	R0, #0
	BL	SWI_Where
	Pull	"R12"
	SWI	XOS_WriteS
	DCB	"  Wkspc - &", 0
	ALIGN
	MOV	R0, R5
 	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWIVC	XOS_Write0
	SWIVC	XOS_NewLine
	Pull	"R2"
	; Move on to the next claimant (if any)...
	TEQ	R2, #0
	BNE	%BT00
	EXIT


; ****************************************************
; *
; * SWI DebugTools_Devices
; *
; * Output the contents of the Kernel's device driver vector in a human-readable
; * format. This may not be available on early Kernels.
; *
; * In...
; *   R0	= flags word (zero)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= preserved (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_Devices Entry "R0-R2"
	; Exit if we didn't find the IRQ dispatch table at module init...
	LDR	R2, [R12, #WSP_IRQtable]
	TEQ	R2, #0
	BEQ	dd_exit
	; Enumerate the first 16 entries of the table...
	ADD	R0, R2, #?WSP_IRQinfo-8
	MOV	R1, #0
03	SWI	XOS_WriteS
	DCB	"Device vector (&", 0
	ALIGN
	Push	"R0-R2"
	MOV	R0, R1
 	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex2
	SWIVC	XOS_Write0
	SWI	XOS_WriteS
	DCB	")", 10, 13, 0
	ALIGN
	Pull	"R0-R2"
	; R0 - pointer to end of vectors
	; R1 - vector counter
	; R2 - pointer to current position in vectors
	Push	"R0-R2"
04	LDMIA	R2, {R0-R2}
	TEQ	R1, #0
	BEQ	%FT05
	; R0 - claimant's workspace pointer
	; R1 - claimant's routine pointer
	; R2 - next claimant block pointer (or NULL if none)
	;
	Push	"R0, R2, R12"
	SWI	XOS_WriteS
	DCB	"  Code  - ", 0
	ALIGN
	MOV	R0, #0
	BL	SWI_Where
	Pull	"R0, R2, R12"
	SWI	XOS_WriteS
	DCB	"  Wkspc - &", 0
	ALIGN
	Push	"R2"
 	ADD	R1, R12, #WSP_ScratchBuffer
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWIVC	XOS_Write0
	SWI	XOS_WriteS
	DCB	10, 13, 0
	ALIGN
	Pull	"R2"
	; Get for the Escape key and exit early if pressed...
	CMP	R0, #-1
	SWI	XOS_ReadEscapeState
	BCS	dd_err_exit
	; If there is another claimant on this vector, process it...
	TEQ	R2, #0
	BNE	%BT04
05	; There are no more on this vector...
	Pull	"R0-R2"
	; Move onto the next device vector (if there are any more to look at)...
	ADD	R1, R1, #1
	ADD	R2, R2, #12
	CMP	R2, R0
	BLO	%BT03
dd_exit	EXIT			; V should be clear on an EQ condition
dd_err_exit
	ADD	SP, SP, #3*4
	EXIT


; ****************************************************
; *
; * SWI DebugTools_IRQInfo
; *
; * Return a pointer to a table of information about the current device drivers
; * installed on the Kernel's device vector. This is a copy of the table which
; * is maintained by the patch code on the Kernel's interrupt despatch code.
; *
; * The table is refreshed once every second. The format is:
; *
; *   Word:  Contents:
; *	0	IRQ 0 - number of 2 MHz cycles consumed by driver
; *	4	IRQ 0 - number of times driver was called
; *	8	IRQ 1 - number of 2 MHz cycles...
; *	12	IRQ 1 - number of times...
; *	...
; *	128	IRQs above 15 - number of 2 MHz cycles...
; *	132	IRQs above 15 -  number of times...
; *
; * In...
; *   R0	= flags word (zero)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= pointer to table of IRQ information or zero if none is available
; *   R1	= size of the table (bytes)
; *   R2-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_IRQInfo ROUT
	LDR	R0, [R12, #WSP_IRQtable]
	TEQ	R0, #0
	MOVEQ	R1, #0
	ADDNE	R0, R12, #WSP_IRQinfo
	MOVNE	R1, #?WSP_IRQinfo
	MOV	PC, LR


; ****************************************************
; *
; * SWI DebugTools_UnknownIRQs
; *
; * Return a pointer to a table of information hit counts for each device
; * number from our code sat on IrqV. The table is reset to zero after each
; * call to *UnknownIRQs.
; *
; * In...
; *   R0	= flags word (zero)
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= pointer to table or zero if none is available
; *   R1	= size of the table (bytes)
; *   R2-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_UnknownIRQs ROUT
	LDR	R0, [R12, #WSP_IRQtable]
	TEQ	R0, #0
	MOVEQ	R1, #0
	ADDNE	R0, R12, #WSP_UnkIRQCount
	MOVNE	R1, #?WSP_UnkIRQCount
	MOV	PC, LR


; ****************************************************
; *
; * SWI DebugTools_ClaimOSSWI
; *
; * Add the specified code to the head of a software vector for claiming
; * OS SWI calls. The Kernel will always be the last claimant on the vector.
; * Any duplicate claimants already on the vector will be removed.
; *
; * The claimant's code will be called with:
; *
; *   R0-R9	= as for SWI
; *   R10	= undefined
; *   R11	= SWI number (excluding X bit)
; *   R12	= word passed in R2 on claim
; *   R13	= pointer to full-descending SVC stack
; *   R14	= return address to pass-on SWI call to next claimant
; *
; * The claimant's code should return with:
; *
; *   MOV   PC,LR     to pass the SWI on to the next claimant (or the OS)
; *   LDMFD SP!,{PC}  to claim the SWI call
; *
; * The claimant may affect R0-R9 in whatever way it chooses. It may also
; * corrupt R10-R12 and R14. It must preserve R13 when passing-on the
; * SWI call to the next claimant.
; *
; * In...
; *   R0	= SWI number (and flags in top 8 bits - all undefined at the moment)
; *   R1	= pointer to address of claiming routine (must be word-aligned)
; *   R2	= value to be passed in R12 when the routine is called
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_ClaimOSSWI ROUT
	; Is this a Kernel SWI?
	BIC	R0, R0, #0x00020000
	BIC	R0, R0, #0xFF000000
	CMP	R0, #Max_Swi
	BHS	claimswi_err
	; Is Kernel SWI patching enabled?
	LDR	R11, [R12, #WSP_KernelSWIs]
	LDR	R10, [R12, #WSP_SWIPatch]
	TEQ	R11, #0
	BEQ	no_swipatch_err
	; Is this SWI patched already?
	Entry	"R1-R3, R8-R9"
	ADD	R11, R11, R0, LSL #2
	LDR	R8, [R10, R0, LSL #2]!	; Writeback frees-up R0
	TEQ	R8, #0
	BEQ	%FT03			; No  - create a new vector with claimant at head, Kernel at tail
	BL	New_SWI_Vector_Head	; Yes - add at the head of the vector
	BVS	%FT04
	;
	; Scan through the rest of the vector looking for and removing duplicate entries...
	; (interrupt hole here where someone could slip-in and add to the vector before
	; us, but I'll let it slip for now).
	;
	SCPSR	I_bit, 0, R0,, R14
	MOV	R0, #0			; Pointer to head of list of duplicate entries to remove
	STR	R8, [R10]
01	LDMIA	R12, {R3, R10, R11}
	;
	; R0 = pointer to head of free list
	; R1 = address of added code
	; R2 = private word of added code
	; R3 = pointer to next block (may be zero)
	; R8 = pointer to previous block
	; R12 = pointer to current block
	;
	; Is this a duplicate entry?
	TEQ	R10, R2
	TEQEQ	R11, R1
	; Yes - delink it and add to the free list...
	STREQ	R3, [R8, #SWINext]
	STREQ	R0, [R12, #SWINext]
	MOVEQ	R0, R12
	; No - move current block pointer into previous block pointer
	MOVNE	R8, R12
	; Continue along the vector until we've reached the end...
	MOVS	R12, R3
	BNE	%BT01
	; Restore interrupt state...
	RestPSR	R14
	; Traverse the free list, freeing the RMA blocks as we go...
	MOVS	R2, R0
	BEQ	%FT04
	MOV	R0, #ModHandReason_Free
02	LDR	R12, [R2, #SWINext]
	SWI	XOS_Module
	BVS	%FT04
	MOVS	R2, R12
	BNE	%BT02
	EXIT
03	BL	Create_SWI_Vector
04	;
	EXIT


; ****************************************************
; *
; * SWI DebugTools_AddToOSSWI
; *
; * Add the specified code to the head of a software vector for claiming
; * OS SWI calls. The Kernel will always be the last claimant on the vector.
; * Duplicate claimants already on the vector are left in place.
; *
; * See SWI DebugTools_ClaimOSSWI.
; *
; * In...
; *   R0	= SWI number (and flags in top 8 bits - all undefined at the moment)
; *   R1	= pointer to address of claiming routine (must be word-aligned)
; *   R2	= value to be passed in R12 when the routine is called
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= preserved (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_AddToOSSWI ROUT
	; Is this a Kernel SWI?
	BIC	R0, R0, #0x00020000
	BIC	R0, R0, #0xFF000000
	CMP	R0, #Max_Swi
	BHS	claimswi_err
	; Is the code pointer word-aligned?
	TST	R1, #2_11
	BNE	claimalign_err
	; Is Kernel SWI patching enabled?
	LDR	R11, [R12, #WSP_KernelSWIs]
	LDR	R10, [R12, #WSP_SWIPatch]
	TEQ	R11, #0
	BEQ	no_swipatch_err
	; Is this SWI patched already?
	Entry	"R1-R2, R8-R9"
	ADD	R11, R11, R0, LSL #2
	LDR	R8, [R10, R0, LSL #2]!	; Writeback frees-up R0
	TEQ	R8, #0
	BEQ	%FT00			; No  - create a new vector with claimant at head, Kernel at tail
	BL	New_SWI_Vector_Head	; Yes - add at the head of the vector
	STRVC	R8, [R10]
	EXIT
00	BL	Create_SWI_Vector
	EXIT


; ****************************************************
; *
; * SWI DebugTools_ReleaseOSSWI
; *
; * Remove a routine from the vector of claimants of the specified Kernel SWI.
; * If the specified R1/R2 pair is not found on the specified SWIs vector, an
; * error is returned.
; *
; * In...
; *   R0	= SWI number (and flags in top 8 bits - all undefined at the moment)
; *   R1	= address of routine to remove
; *   R2	= value of R2 passed into ClaimOSSWI
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= preserved (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_ReleaseOSSWI ROUT
	; Is this a Kernel SWI?
	BIC	R0, R0, #0x00020000
	BIC	R0, R0, #0xFF000000
	CMP	R0, #Max_Swi
	BHS	claimswi_err
	; Is the code pointer word-aligned?
	TST	R1, #2_11
	BNE	claimalign_err
	; Make sure that patching is enabled...
	LDR	R11, [R12, #WSP_KernelSWIs]
	LDR	R10, [R12, #WSP_SWIPatch]
	LDR	R12, [R10, R0, LSL #2]!
	TEQ	R11, #0
	BEQ	no_swipatch_err
	ADD	R11, R11, R0, LSL #2
	; If the SWI is not vectored, exit with an error...
	TEQ	R12, #0
	BEQ	releaseswi_err
	; Traverse the vector looking for the first matching claimant...
	Entry	"R1-R4"
	MOV	R14, R10
	;
	; R10 = patch table entry pointer
	; R11 = Kernel SWI despatch table entry pointer
	; R12 = pointer to first vector claimant's entry
	; R14 = pointer to previous entry (may be patch table)
	;
walk	LDMIA	R12, {R0, R3, R4}
	TEQ	R3, R2
	TEQEQ	R4, R1
	BEQ	matched
	MOV	R14, R12
	MOVS	R12, R0
	BNE	walk
unmatch	Pull	"R1-R4, LR"
	B	releaseswi_err
matched	TEQ	R0, #0
	BEQ	kernel
	;
	; R0  = next block pointer (non-null)
	; R1  = scratch
	; R2  = scratch
	; R3  = scratch
	; R4  = scratch
	; R10 = patch table entry pointer
	; R11 = Kernel SWI despatch table entry pointer
	; R12 = pointer to entry of claimant to remove
	; R14 = pointer to previous entry (may be patch table)
	;
	ASSERT	SWINext=0
	STR	R0, [R14, #SWINext]	; Delink block
	MOV	R1, R0
	MOV	R3, R14
	MOV	R0, #ModHandReason_Free
	MOV	R2, R12
	SWI	XOS_Module		; Free block
	BVS	exit
	;
	; R0  = scratch
	; R1  = next block pointer (non-null)
	; R2  = scratch
	; R3  = pointer to previous entry (may be patch table)
	; R4  = scratch
	; R10 = patch table entry pointer
	; R11 = Kernel SWI despatch table entry pointer
	; R12 = pointer to entry of claimant to remove
	; R14 = scratch
	;
	; Was the previous entry the patch table?
	TEQ	R3, R10
	BNE	exit			; No - exit
	; Is the only remaining claimant the Kernel?
	ASSERT	SWICode=8
	LDMIA	R1, {R0, R2, R4}
	TEQ	R0, #0
	BNE	exit			; No - exit
	; Remove the patch from this SWI altogether...
	STR	R4, [R11]		; Kernel despatch table entry back to default
	STR	R0, [R10]		; Patch table entry back to zero
	MOV	R2, R1
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module		; Free block
exit	EXIT
kernel	Pull	"R1-R4, LR"
	B	kernelrelease_err


	END
