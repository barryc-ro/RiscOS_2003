
<!-- Very quick hack of a specification taken from the comments in the sources. -->

<HTML>
  <HEAD>
    <TITLE>DebugTools &quot;Specification&quot;</TITLE>
  </HEAD>
  <BODY BGCOLOR="#F0F0F0" TEXT="black" LINK="#105010" VLINK="#501010">
    <CENTER>
      <A NAME="contents">
        <H1>DebugTools &quot;Specification&quot;</H1>
      </A>
    </CENTER>

    <HR>

    <UL>
      <FONT SIZE="+1">
        <A HREF="#commands">CLI Commands</A><BR>
      </FONT>
      <TABLE BORDER="0">
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_Where">     *Where     </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_Vectors">   *Vectors   </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_Tickers">   *Tickers   </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_Devices">   *Devices   </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_X">         *X         </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_Canonical"> *Canonical </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_IRQInfo">   *IRQInfo   </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_RMDie">     *RMDie     </A>
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#cmd_RMRemove">  *RMRemove  </A>
      </TABLE>
      <FONT SIZE="+1">
        <A HREF="#swis">Software Interrupts</A><BR>
      </FONT>
      <TABLE BORDER="0">
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_0"> DebugTools_AddressInfo  </A> <TD> (0x554C0)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_1"> DebugTools_Where        </A> <TD> (0x554C1)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_2"> DebugTools_Vectors      </A> <TD> (0x554C2)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_3"> DebugTools_Tickers      </A> <TD> (0x554C3)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_4"> DebugTools_Devices      </A> <TD> (0x554C4)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_5"> DebugTools_IRQInfo      </A> <TD> (0x554C5)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_6"> DebugTools_UnknownSWIs  </A> <TD> (0x554C6)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_7"> DebugTools_ClaimOSSWI   </A> <TD> (0x554C7)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_8"> DebugTools_AddToOSSWI   </A> <TD> (0x554C8)
        <TR><TD>&nbsp;&nbsp; <TD> <A HREF="#swi_9"> DebugTools_ReleaseOSSWI </A> <TD> (0x554C9)
      </TABLE>
      <FONT SIZE="+1">
        <A HREF="#notes">Notes</A><BR>
      </FONT>
    </UL>

    <!-- ######################## *Commands ######################## -->

    <HR>
    <A NAME="commands"><H1><A HREF="#contents">CLI Commands</A></H1></A>

    <A NAME="cmd_Where"><H3 ALIGN="right"><A HREF="#contents">*Where [&lt;address&gt;]</A></H3></A>

    <P>
    Output information about the specified address (or that of the last
    abort).
    </P>

    <P>
    Uses SWI DebugTools_Where.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *Where
    *Where 0240DD84
    </PRE></CODE>

    <A NAME="cmd_Vectors"><H3 ALIGN="right"><A HREF="#contents">*Vectors</A></H3></A>

    <P>
    List the contents of the software vectors.
    </P>

    <P>
    Uses SWI DebugTools_Vectors.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *Vectors
    *Vectors 2E
    *Vectors IrqV
    </PRE></CODE>

    <A NAME="cmd_Tickers"><H3 ALIGN="right"><A HREF="#contents">*Tickers</A></H3></A>

    <P>
    List the contents of the Kernel's CallAfter and CallEvery list.
    </P>

    <P>
    Uses SWI DebugTools_Tickers.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *Tickers
    </PRE></CODE>

    <A NAME="cmd_Devices"><H3 ALIGN="right"><A HREF="#contents">*Devices</A></H3></A>

    <P>
    List the contents of the Kernel device vectors.
    </P>

    <P>
    Uses SWI DebugTools_Devices.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *Devices
    </PRE></CODE>

    <A NAME="cmd_X"><H3 ALIGN="right"><A HREF="#contents">*X &lt;CLI command&gt;</A></H3></A>

    <P>
    Execute the specified *command and place any error into the X$Error system
    variable (if it is currently unset). Do not return the error.
    </P>

    <P>
    No equivalent SWI call.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *X Pin Boot:Choices 180 154
    *X Wipe rm ~cfr~v
    </PRE></CODE>

    <A NAME="cmd_Canonical"><H3 ALIGN="right"><A HREF="#contents">*Canonical &lt;sys var&gt; &lt;file spec&gt;</A></H3></A>

    <P>
    Canonicalise the specified filename and place the result in a system variable.
    </P>

    <P>
    No equivalent SWI call.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *Canonical Root$Dir Boot:^
    *Canonical My$Scrap Waste:Basket.12Mar2003.Scrap
    </PRE></CODE>

    <A NAME="cmd_IRQInfo"><H3 ALIGN="right"><A HREF="#contents">*IRQInfo</A></H3></A>

    <P>
    Output information on how many times each device was called in the last
    second and what percentage of the CPU time the device driver consumed.
    </P>

    <P>
    Does not need to use SWI DebugTools_IRQInfo.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *IRQInfo
    </PRE></CODE>

    <A NAME="cmd_UnknownIRQs"><H3 ALIGN="right"><A HREF="#contents">*UnknownIRQs</A></H3></A>

    <P>
    Output a dump of our count of how many times we have seen each device
    pass along IrqV since the last call to this *command. Reset all counters
    to zero after reading them.
    </P>

    <P>
    Does not need to use SWI DebugTools_UnknownIRQs.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *UnknownIRQs
    </PRE></CODE>

    <A NAME="cmd_RMDie"><H3 ALIGN="right"><A HREF="#contents">*RMDie</A></H3></A>

    <P>
    When a module cannot be killed, it is usually because the module finalisation
    code is returning an error. This *command will attempt to replace the finalisation
    code offset in the specified module's header with zero and then kill the module.
    Faulty ROM modules clearly cannot be killed using this method because their
    module header is in read-only memory.
    </P>

    <P>
    <B>WARNING:</B> removing the module finalisation code and then killing the
    module can lead to system instability due to the fact that any system
    resources claimed by the module (i.e. CallBacks, Events, Vectors, RMA, etc)
    are not freed. This *command is aimed for use during module development
    only.
    </P>

    <P>
    Does not use any DebugTools SWI calls.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *RMDie FrontEnd
    </PRE></CODE>

    <A NAME="cmd_RMRemove"><H3 ALIGN="right"><A HREF="#contents">*RMRemove</A></H3></A>

    <P>
    This command is similar to the *RMDie command, but it does not attempt to
    kill the specified module. It will reset all module header words in the
    specified module to zero, apart from the module title string and module
    help string. Faulty ROM modules clearly cannot be killed using this method
    because their module header is in read-only memory.
    </P>

    <P>
    The module is left in the module chain so that any system resources claimed
    by that module can continue to operate as expected.
    </P>

    <P>
    The module will have its title and help strings replaced with a string of
    the form &quot;<CODE>Dead&lt;num&gt;</CODE>&quot;, where <CODE>num</CODE>
    is an eight-digit hexadecimal number, incremented after each call to
    *RMRemove. As the module is given a new title string, it can be killed with
    *RMKill later. It also allows that module to be re-loaded.
    </P>

    <P>
    Note: if the module is killed, it will leak an additional 16 bytes of RMA
    used to store the new title and help string. This is likely to be of minor
    impact when compared to the other system resources leaked by removing the
    module's finalisation code! Refer to the warning for *RMDie.
    </P>

    <P>
    Does not use any DebugTools SWI calls.
    </P>

    <EM>Examples:</EM>

    <CODE><PRE>
    *RMRemove FrontEnd
    </PRE></CODE>

    <!-- ######################## SWIs ######################## -->

    <HR>
    <A NAME="swis"><H1><A HREF="#contents">Software Interrupts</A></H1></A>

    <A NAME="swi_0"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_AddressInfo (0x554C0)</A></H3></A>

    <P>
    Given an address, try to sensibly interpret the context of that address.
    It returns values in R0-R3 to indicate information about the specified
    address.
    </P>

    <P>
    A list of the current area types and return values are:
    </P>

    <UL>
      <STRONG>A mapped-out page</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 0
          <TR><TD>R1 <TD>= R1 on entry rounded-down to nearest page boundary
          <TR><TD>R2 <TD>= offset of R1 on entry from page boundary
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
      <STRONG>A module</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 1
          <TR><TD>R1 <TD>= base address of module
          <TR><TD>R2 <TD>= offset of R1 on entry from module base
          <TR><TD>R3 <TD>= pointer to module title string
        </TABLE>
      </UL>
      <STRONG>A module's workspace</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 2
          <TR><TD>R1 <TD>= base address of module workspace
          <TR><TD>R2 <TD>= offset of R1 on entry from workspace base
          <TR><TD>R3 <TD>= pointer to module title string
        </TABLE>
      </UL>
      <STRONG>A dynamic area</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 3
          <TR><TD>R1 <TD>= base address of dynamic area
          <TR><TD>R2 <TD>= offset of R1 on entry from area base
          <TR><TD>R3 <TD>= pointer to dynamic area name string
        </TABLE>
      </UL>
      <STRONG>A mapped-out page in a dynamic area</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 4
          <TR><TD>R1 <TD>= base address of dynamic area
          <TR><TD>R2 <TD>= offset of R1 on entry from area base
          <TR><TD>R3 <TD>= pointer to dynamic area name string
        </TABLE>
      </UL>
      <STRONG>Zero page</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 5
          <TR><TD>R1 <TD>= as R1 on entry
          <TR><TD>R2 <TD>= 0
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
      <STRONG>The Kernel</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 6
          <TR><TD>R1 <TD>= ROM base address
          <TR><TD>R2 <TD>= offset of R1 on entry from ROM base
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
      <STRONG>The ROM space</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 7
          <TR><TD>R1 <TD>= as R1 on entry
          <TR><TD>R2 <TD>= 0
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
      <STRONG>The application slot</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 8
          <TR><TD>R1 <TD>= &amp;8000
          <TR><TD>R2 <TD>= offset of R1 on entry from &amp;8000
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
      <STRONG>Any other location</STRONG>
      <UL>
        <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
          <TR><TD>R0 <TD>= 9
          <TR><TD>R1 <TD>= as R1 on entry
          <TR><TD>R2 <TD>= 0
          <TR><TD>R3 <TD>= 0
        </TABLE>
      </UL>
    </UL>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= flags word (zero)
        <TR><TD>R1  <TD>= address to check
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= area type code (or pointer to error block)
        <TR><TD>R1      <TD>= base address of area
        <TR><TD>R2      <TD>= offset of R1 on entry into area
        <TR><TD>R3      <TD>= additional area info (depends upon R0 on exit)
        <TR><TD>R4-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_1"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_Where (0x554C1)</A></H3></A>

    <P>
    Given an address (or the address of the last abort), output an analysis
    of where that address is (using the AddressInfo SWI).
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0        <TD>= flags word
        <TR><TD>bit 0     <TD>0 - R1 contains address to inspect
        <TR><TD>          <TD>1 - Inspect address of the last exception
        <TR><TD>bits 1-31 <TD>- should be zero
        <TR><TD>R1        <TD>= address to check (if R0:0 is clear on entry)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= corrupted (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_2"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_Vectors (0x554C2)</A></H3></A>

    <P>
    Output information on the claimants of each of the software vectors in a
    human-readable format.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0        <TD>= flags word
        <TR><TD>bit 0     <TD>0 - list contents of all vectors
        <TR><TD>          <TD>1 - list contents of vector number in R1
        <TR><TD>bits 1-31 <TD>- should be zero
        <TR><TD>R1        <TD>= vector number to enumerate (if R0:0 set on entry)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0     <TD>= corrupted (or pointer to error block)
        <TR><TD>R1-R9  <TD>= preserved
        <TR><TD>V flag <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_3"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_Tickers (0x554C3)</A></H3></A>

    <P>
    Enumerate all of the currently pending CallAfters and CallEverys in a
    human-readable format.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= flags word (zero)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= preserved (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_4"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_Devices (0x554C4)</A></H3></A>

    <P>
    Output the contents of the Kernel's device driver vector in a human-readable
    format. This may not be available on early Kernels.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= flags word (zero)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= preserved (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_5"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_IRQInfo (0x554C5)</A></H3></A>

    <P>
    Return a pointer to a table of information about the current device drivers
    installed on the Kernel's device vector. This is a copy of the table which
    is maintained by the patch code on the Kernel's interrupt despatch code.
    </P>

    <P>
    The table is refreshed once every second. The format is:
    </P>

    <UL>
      <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
        <TR><TH ALIGN="left">Bytes: <TH ALIGN="left">Contents:
        <TR><TD>0-3     <TD>IRQ 0 - number of 2 MHz cycles consumed by driver
        <TR><TD>4-7     <TD>IRQ 0 - number of times driver was called
        <TR><TD>8-11    <TD>IRQ 1 - number of 2 MHz cycles...
        <TR><TD>12-15   <TD>IRQ 1 - number of times...
        <TR><TD>...     <TD>...
        <TR><TD>128-131 <TD>IRQs above 15 - number of 2 MHz cycles...
        <TR><TD>132-135 <TD>IRQs above 15 -  number of times...
      </TABLE>
    </UL>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= flags word (zero)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= pointer to table of IRQ information or zero if none is available
        <TR><TD>R1      <TD>= size of the table (bytes)
        <TR><TD>R2-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_6"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_UnknownIRQs (0x554C6)</A></H3></A>

    <P>
    Return a pointer to a table of information hit counts for each device
    number from our code sat on IrqV. The table is reset to zero after each
    call to *UnknownIRQs.
    </P>

    <UL>
      <TABLE BORDER="0" CELLSPACING="2" CELLPADDING="2">
        <TR><TH ALIGN="left">Bytes: <TH ALIGN="left">Contents:
        <TR><TD>0-3     <TD>Counter for IRQ device 0
        <TR><TD>4-7     <TD>Counter for IRQ device 1
        <TR><TD>...     <TD>...
        <TR><TD>124-127 <TD>Counter for IRQ device 31
      </TABLE>
    </UL>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= flags word (zero)
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= pointer to table or zero if none is available
        <TR><TD>R1      <TD>= size of the table (bytes)
        <TR><TD>R2-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_7"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_ClaimOSSWI (0x554C7)</A></H3></A>

    <P>
    This SWI call allows the specified code to be added onto a vector of code to call
    whenever the specified OS SWI call is made. SWI DebugTools_ClaimOSSWI will add the
    code specified in R1 to the head of the vector for the OS SWI specified in R0. It
    will remove all other claimants on the vector with identical values of both R1 and
    R2 on entry to this SWI.
    </P>

    <P>
    The value passed in R2 to this SWI will be passed into the claimant's code in R12
    whenever the claimant is entered - it is the claimant's private word. Other
    registers are defined below. Note: the claimant is the code which resides on a
    particular OS SWI vector, the caller is the code which issued the OS SWI.
    </P>

    <P>
    See the <A HREF="#notes">notes</A> section for more information.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= OS SWI number (flags in top 8 bits - should be zero)
        <TR><TD>R1  <TD>= pointer to code to add
        <TR><TD>R2  <TD>= value to be passed in R12 to code
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= corrupted (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_8"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_AddToOSSWI (0x554C8)</A></H3></A>

    <P>
    This SWI behaves in much the same way as DebugTools_ClaimOSSWI, except that any
    previous claimants on the vector are preserved, even if they were added with
    identical values of R1 and R2.
    </P>

    <P>
    See the <A HREF="#notes">notes</A> section for more information.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= OS SWI number (flags in top 8 bits - should be zero)
        <TR><TD>R1  <TD>= pointer to code to add
        <TR><TD>R2  <TD>= value to be passed in R12 to code
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= corrupted (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <A NAME="swi_9"><H3 ALIGN="right"><A HREF="#contents">SWI DebugTools_ReleaseOSSWI (0x554C9)</A></H3></A>

    <P>
    This SWI will remove the first (head first, tail last) instance of a claimant
    from the specified OS SWI vector, which was added with identical values in R1
    and R2.
    </P>

    <P>
    If no match is found, the error &quot;Bad OS SWI release&quot; will be
    returned. If an attempt is made to remove the Kernel (tail) claimant from
    any vector, the error &quot;You cannot release the Kernel claimant&quot; will
    be returned.
    </P>

    <P>
    See the <A HREF="#notes">notes</A> section for more information.
    </P>

    <H5>In...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0  <TD>= OS SWI number (flags in top 8 bits - should be zero)
        <TR><TD>R1  <TD>= pointer to code to remove
        <TR><TD>R2  <TD>= value passed in R2 when added
      </TABLE>
    </UL>
    <H5>Out...</H5>
    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0      <TD>= corrupted (or pointer to error block)
        <TR><TD>R1-R9   <TD>= preserved
        <TR><TD>V flag  <TD>= set if R0 is a pointer to an error block
      </TABLE>
    </UL>

    <!-- ######################## Notes ######################## -->

    <HR>
    <A NAME="notes"><H1><A HREF="#contents">Notes</A></H1></A>

    <P>
    The following are additional notes concerning the usage of the DebugTools SWIs
    ClaimOSSWI, AddToOSSWI and ReleaseOSSWI.
    </P>

    <EM>On entry to the claimant's code:</EM>

    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0-R9  <TD>= as for the claimed SWI
        <TR><TD>R10    <TD>= copy of the caller's CPSR
        <TR><TD>R11    <TD>= SWI number
        <TR><TD>R12    <TD>= private word (as passed in R2 to ClaimOSSWI)
        <TR><TD>R13    <TD>= full-descending supervisor stack pointer
        <TR><TD>R14    <TD>= address to return to for passing-on the SWI call
        <TR><TD>CPSR_f <TD>= undefined
        <TR><TD>CPSR_c <TD>= ARM mode, SVC26 or SVC32, IRQs/FIQs as for caller
     </TABLE>
    </UL>

    <P>
    The Kernel (i.e. the original claimant of the SWI) will always be at the tail of
    the vector. Thus, a claimant may wish to either modify the registers before
    passing the SWI call on to the Kernel, or it may wish to claim the SWI call
    to stop it from being passed-on to the Kernel.
    </P>

    <P>
    To pass-on the OS SWI call on exit from the claimant's code, use:
    </P>

    <UL>
      <CODE>MOV PC,LR</CODE> and <B>not</B> <CODE>MOVS PC,LR</CODE>
    </UL>

    <P>
    To claim the OS SWI call on exit from the claimant's code, use:
    </P>

    <UL>
      <CODE>LDMFD R13!,{PC}</CODE> and <B>not</B> <CODE>LDMFD R13!,{PC}^</CODE>
    </UL>

    <P>
    If you want to return an error to the caller, you must set R0 to be a pointer
    to the error block as normal and set the V bit in R10, <B>not</B> R14. This is
    because the CPSR is restored from the value in R10 before the SWI returns to
    the caller.
    </P>

    <P>
    The exit conditions for passing-on and claiming an OS SWI call are described
    below.
    </P>

    <EM>On exit from the claimant's code (passing-on the call):</EM>

    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0-R9  <TD>= may be modified for next claimant
        <TR><TD>R10    <TD>= may be modified for next claimant
        <TR><TD>R11    <TD>= must be preserved
        <TR><TD>R12    <TD>= may be corrupted
        <TR><TD>R13    <TD>= must be preserved
        <TR><TD>R14    <TD>= may be corrupted
        <TR><TD>CPSR_f <TD>= may be corrupted
        <TR><TD>CPSR_c <TD>= must be preserved
     </TABLE>
    </UL>

    <EM>On exit from the claimant's code (claiming the call):</EM>

    <UL>
      <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD>R0-R9  <TD>= may be modified
        <TR><TD>R10    <TD>= full CPSR to assert on return to caller
        <TR><TD>R11    <TD>= may be corrupted
        <TR><TD>R12    <TD>= may be corrupted
        <TR><TD>R13    <TD>= R13 on entry +4 (pulled LR to claim)
        <TR><TD>R14    <TD>= may be corrupted
        <TR><TD>CPSR_f <TD>= may be corrupted
        <TR><TD>CPSR_c <TD>= must be preserved
      </TABLE>
    </UL>

    <P>
    When you claim, add to or release an OS SWI using the DebugTools SWIs, there are
    some additional constraints that you should be aware of:
    </P>

    <OL TYPE="1">
      <LI>
        You cannot claim SWI &quot;OS_WriteC&quot; on RISC OS 4 and above Kernels due
        to an optimisation in the Kernel's OS SWI despatch code which means that this
        SWI is not despatched via the despatch table.
      </LI>
      <BR>
      <LI>
        You can only claim the first 256 OS SWIs (see above note). This means that SWIs
        from &quot;OS_WriteI+0&quot; cannot be claimed using DebugTools.
      </LI>
      <BR>
      <LI>
        Do <B>not</B> claim, release or add to OS SWI vectors from an IRQ handling
        routine. To do so may produce unpredictable results.
      </LI>
      <BR>
      <LI>
        When the DebugTools module is killed, it will remove all of the OS SWI vectors
        forcibly. Any software using the DebugTools module should make no assumptions
        that the DebugTools module is still present when attempting to remove SWI vector
        claimants (i.e. check for the &quot;SWI name not known&quot; error - 486).
      </LI>
      <BR>
      <LI>
        You should take care when claimant code modifies the values in R0-R9, as this will
        be changing the documented behaviour of the OS SWI.
      </LI>
    </OL>

    <!-- ######################## End ######################## -->

    <HR>

    <SMALL>SAR, 6th Jun 2001</SMALL>
  </BODY>
</HTML>
