; File:    Thumb.s
; Purpose: Disassembly of the Thumb instruction set
; Author:  K Bracey
; History: 10-Oct-96: KJB: created
;          02-May-00: KJB: architecture 5 extensions, fixes

	[ Thumb

; In    r0 = instruction to disassemble
;       r9 = where it is

; Out   r1 -> core containing string
;       r2 = length of string excluding 0
;       r10,r11 corrupt

ThumbInstruction
	Entry	"R0,R3-R9"

        MOV     R4, R0

        ADR     R0, StringBuffer        ; Always build into temp buffer

	AND	R3,R4,#&F000
	ADD	PC,PC,R3,LSR #10
	NOP
	B	ThumbShiftImm
	B	ThumbAddSub
	B	ThumbAddSubCmpImm
	B	ThumbAddSubCmpImm
	B	ThumbDataProcReg
	B	ThumbLdStReg
	B	ThumbLdStImm
	B	ThumbLdStImm
	B	ThumbLdStHImm
	B	ThumbLdStStack
	B	ThumbAddSPPC
	B	ThumbAdjustSP
	B	ThumbLdStMultiple
	B	ThumbCondBranch
	B	ThumbUncondBranch

ThumbBL
	; arrive here with 1111 xxxx xxxx xxxx
	TestBit	11
	BNE	ThumbBLSuffix

ThumbBLPrefix
	; arrive here with 1111 0xxx xxxx xxxx
	; format is        1111 0ooo oooo oooo
	;
	; ADR R14,address
	;
	; where oooo = top 11-bits of 22-bit signed halfword offset
	AddStr	Adr
	BL	Tab
	AddStr	Lr
	BL	AddComma
	MOV	R8,R4,ASL #32-11
	ADD	R8,R9,R8,ASR #32-11-12
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd
BL
	= "BL", 0
BLX
        = "BLX", 0
LRplus
	= "R14,#", 0
        ALIGN
UnknownThumb
	DCB     "M00", 0
UnpredThumb
	DCB	"M65", 0
        ALIGN


ThumbBLSuffix
	; arrive here with 1111 1xxx xxxx xxxx
	; format is        1111 1ooo oooo oooo
	;
	; BL address
	;
	; where oooo = bottom 11-bits of 22-bit signed halfword offset
	AddStr	BL
	BL	Tab
T_BLSuffixCommon
	SUB	R2,R9,#2
	LDR	R3,OldThumbAddress
	TEQS	R2,R3
	BNE	BadThumbBL
	LDR	R5,OldThumbInst
	AND	R6,R5,#2_1111100000000000
	TEQS	R6,#2_1111000000000000
	BNE	BadThumbBL
	MOV	R5,R5,ASL #32-11
	MOV	R5,R5,ASR #32-11-12
	MOV	R3,R4,LSL #32-11
	ADD	R8,R5,R3,LSR #32-11-1
	ADD	R8,R9,R8
	ADD	R8,R8,#2
        TestBit 12                      ; BLX clears bottom bits to word align
        BICEQ   R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd
BadThumbBL
	AddStr	LRplus
	MOV	R8,R4,LSL #32-11
	MOV	R8,R8,LSR #32-11-1
	MOV	R2,#12-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbBLXSuffix
        ; arrive here with 1110 1xxx xxxx xxxx
        ; format is        1110 1ooo oooo ooo0
        ;
        ; BLX address
        ;
        ; where oooo = bottom 10-bits of 21-bit signed word offset
        TestBit 0
        BNE     ThumbUndefined

        [ WarnARMv5
        MOV     R10,#Mistake_ARMv5
        STR     R10,Mistake
        ]

        AddStr  BLX
        BL      Tab
        B       T_BLSuffixCommon

ThumbImmediateEnd
	CMPS	R8,#10			; If really simple, just display number
	BLO	TRem_Number		; ie 0..9 unambiguous

	MOV	R2,#8-4			; default is byte
	CMPS	R8,#&100
	MOVHS	R2,#16-4		; then halfword
	CMPS	R8,#&10000
	MOVHS	R2,#32-4		; then fullword
	BL	StoreHex

	CMPS	R8,#8192		; If really big, don't comment on it
	BHS	ThumbInstEnd		; May have VSet from CMP!

	BL	Tab			; Will also insert "; "

	AddChar	"="

TRem_Character
	CMPS	R8,#delete
	CMPNES	R8,#space-1
	BLS	TRem_Number

	CMPS	R8,#&100
	BHS	Rem_Number

	MOV	R10,#quote
	STRB	R10,[R0],#1
	STRB	R8, [R0],#1
	STRB	R10,[R0],#1
	B	ThumbInstEnd

TRem_Number
	BL	StoreDecimal

ThumbInstEnd
        BL      TestMistakes

	STR	R9,OldThumbAddress
	STR	R4,OldThumbInst
	MOV	R14,#0
	STRB	R14,[R0]
	ADR	R1,StringBuffer
	SUBS	R2,R0,R1

	EXIT

ThumbUncondBranch
	; arrive here with 1110 xxxx xxxx xxxx
	; format is        1110 0ooo oooo oooo
	;
	; B address
	;
	; where oooo = 11-bit signed offset (in halfwords)
	TestBit	11
	BNE	ThumbBLXSuffix

	AddChar	"B"
	BL	Tab
	MOV	R8,R4,ASL #32-11
	ADD	R8,R9,R8,ASR #32-11-1
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

	ROUT
ThumbUndefined
	ADR	R10, UnknownThumb
10	BL	lookup_r10
	BL	SaveString
	B	ThumbInstEnd

ThumbUnpredictable
	ADR	R10, UnpredThumb
	B	%B10

ThumbCondBranch
	; arrive here with 1101 xxxx xxxx xxxx
	; format is        1101 cccc oooo oooo
	;
	; B{cond} address
	;
	; where cccc = condition (not AL or NV)
	;       oooo = 8-bit signed offset (in halfwords)
	AND	R2,R4,#2_0000111100000000
	CMPS	R2,#2_0000111000000000
	BHI	ThumbSWI
        BEQ     ThumbUndefined
	AddChar	"B"
	MOV	R2,R2,LSR #8
	ADRL	R1,CondSym
	ADD	R2,R1,R2,LSL #1
	LDRB	R10,[R2],#1
	TEQS	R10,#0
	STRNEB	R10,[R0],#1
	LDRNEB	R10,[R2],#1
	STRNEB	R10,[R0],#1
	BL	Tab
	MOV	R8,R4,ASL #32-8
	MOV	R8,R8,ASR #32-8
	ADD	R8,R9,R8,LSL #1
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbSWI
	; arrive here with 1101 1111 xxxx xxxx
	; format is        1101 1111 nnnn nnnn
	;
	; SWI <number|name>
	;
	; where nnnn = number
	AddStr	SWItext
	BL	Tab
	MOV	R1,R0
	ADR	R2,StringBuffer+?StringBuffer
	SUB	R2,R2,R1
	AND	R0,R4,#&FF
	SWI	XOS_SWINumberToString
	BVS	ThumbInstEnd
	MOV	R3,#8
	BL	unknown_swis
	ADD	R0,R1,R2
	B	ThumbInstEnd

ThumbLdStMultiple
	; arrive here with 1100 xxxx xxxx xxxx
	; format is        1100 lnnn rrrr rrrr
	;
	; <LDM|STM>IA Rn!,register list
	;
	; where l = <LDMIA|STMIA>
	;     nnn = Rn
	;    rrrr = register list (R0-R7)
	TestStr	11,Ldmia,Stmia
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	AddStr	Bits
	BL	ThumbRegList
	AddChar	"}"
	B	ThumbInstEnd

SWItext	= "SWI", 0
Stmia	= "STMIA", 0
Ldmia	= "LDMIA", 0
Bits	= "!,{", 0
Adr	= "ADR", 0
CommaSPHash
	= ","
SPSPtext
SPHash	= "R13,#", 0
Push	= "PUSH", 0
Pop	= "POP", 0
        ALIGN   4,3
CommaLR	= ","
Lr	= "R14", 0
CommaPC	= ","
Pc	= "PC", 0
Open_B_1
	= ",[", 0
Bkpt    = "BKPT", 0

	ALIGN

ThumbAdjustSP
	; arrive here with 1011 xxxx xxxx xxxx
	TestBit	10
	BNE	ThumbPushPop
	; arrive here with 1011 x0xx xxxx xxxx
	; format is        1011 0000 aiii iiii
	;
	; <ADD|SUB> R13,#imm
	;
	; where a = ADD/~SUB
	;    iiii = 7-bit unsigned immediate offset (words)
	TSTS	R4,#2_0000101100000000
	BNE	ThumbUnpredictable
	TestStr	7,Sub,Add
	BL	Tab
	AddStr	SPSPtext
	AND	R8,R4,#2_0000000001111111
        MOV     R8,R8,LSL #2
	B	ThumbImmediateEnd

;
; Instructions of the form PUSH {R0-R4,LR}
;		           POP {R0,R5-R7}
;
ThumbPushPop
	; arrive here with 1011 x1xx xxxx xxxx
	; format is        1011 l10p rrrr rrrr
	;
	; <PUSH|POP> register list
	;
	; where l = POP/~PUSH
	;       p = PC or LR
	;    rrrr = register list (R0-R7)
	TestBit	9
	BNE	ThumbBKPT
	TestStr	11,Pop,Push
	BL	Tab
	AddChar	"{"
	BL	ThumbRegList
	TestBit	8
	BEQ	%F1
	TSTS	R4,#2_0000000011111111
	BLNE	AddComma
	TestStr	11,Pc,Lr
1
	AddChar	"}"
	B	ThumbInstEnd

ThumbBKPT
        ; arrive here with 1011 x11x xxxx xxxx
        ; format is        1011 1110 nnnn nnnn
        ;
        ; BKPT <number>
        ;
        ; where nnnn = number
        AND     R2,R4,#&FF00
        TEQS    R2,#2_10111110:SHL:8
        BNE     ThumbUnpredictable
        [ WarnARMv5
        MOV     R10,#Mistake_ARMv5
        STR     R10,Mistake
        ]
        AddStr  Bkpt
        BL      Tab
        AND     R8,R4,#&FF
        MOV     R2,#8-4
        BL      StoreHex
        B       ThumbInstEnd

ThumbAddSPPC
	; arrive here with 1010 xxxx xxxx xxxx
	; format is        1010 pddd iiii iiii
	;
	; ADD Rd,R13,#imm
	; ADR Rd,address (ADD Rd,PC,#imm)
	;
	; where p = PC/~SP
	;     ddd = Rd
	;    iiii = 8-bit unsigned immediate offset (words)
	TestBit 11
	BEQ	ThumbADR
	AddStr	Add
	MOV	R5,R4,LSR #8
	AND	R5,R5,#7
	BL	Tab_Dis_Register
	AddStr	CommaSPHash
	AND	R8,R4,#2_0000000011111111
        MOV     R8,R8,LSL #2
	B	ThumbImmediateEnd

ThumbADR
	ADR	R10,Adr
	BL	SaveString
	MOV	R5,R4,LSR #8
	AND	R5,R5,#7
	BL	Tab_Dis_Register
	BL	AddComma
	AND	R8,R4,#2_0000000011111111
	ADD	R8,R9,R8,LSL #2
	ADD	R8,R8,#4
        BIC     R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbLdStStack
	; arrive here with 1001 xxxx xxxx xxxx
	; format is        1001 lddd iiii iiii
	;
	; <LDR|STR> Rd,[R13,#imm]
	;
	; where l = Load/~Store
	;     ddd = Rd
	;    iiii = 8-bit unsigned immediate offset (words)
	TestStr	11,Ldr_1,Str_1
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	AddStr	Open_B_SP_hash
	AND	R8,R4,#2_0000000011111111
	MOV	R8,R8,LSL #2
	BL	StoreDecimal
	AddChar	"]"
	B	ThumbInstEnd

ThumbLdStHImm
	; arrive here with 1000 xxxx xxxx xxxx
	; format is        1000 liii iinn nddd
	;
	; <LDRH|STRH> Rd,[Rn,#imm]
	;
	; where l = Load/~Store
	;   iiiii = 5-bit unsigned immediate offset (halfwords)
	;     nnn = Rn
	;     ddd = Rd
	TestStr	11,Ldrh,Strh
	MOV	R2,#1		; LDRHs use offset << 1
T_CommonLdStImm
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AddStr	Open_B_1
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000011111000000
	MOV	R8,R8,LSR #6
	MOV	R8,R8,LSL R2
	BL	StoreDecimal
	AddChar	"]"
	B	ThumbInstEnd

ThumbLdStImm ROUT
	; arrive here with 011x xxxx xxxx xxxx
	; format is        011b liii iinn nddd
	;
	; <LDR|STR>{B} Rd,[Rn,#imm]
	;
	; where b = Byte/~Word
	;	l = Load/~Store
	;   iiiii = 5-bit unsigned immediate (words or bytes depending on B bit)
	;     nnn = Rn
	;     ddd = Rd
	TestStr	11,Ldr_1,Str_1
	TestBit	12,"B"
	MOVEQ	R2,#2		; LDRs use offset << 2
	MOVNE	R2,#0		; LDRBs use offset
	B	T_CommonLdStImm

Open_B_SP_hash
	= ",[R13,#", 0
PC_hash
	= "PC,#", 0
        ALIGN
ThumbLdStRegTable
Str_1	= "STR", 0, 0, 0
Strh	= "STRH", 0, 0
	= "STRB", 0, 0
	= "LDRSB", 0
Ldr_1	= "LDR", 0, 0, 0
Ldrh	= "LDRH", 0, 0
	= "LDRB", 0, 0
	= "LDRSH", 0
Add	= "ADD", 0
Sub	= "SUB", 0
	ALIGN

ThumbLdStReg ROUT
	; arrive here with 0101 xxxx xxxx xxxx
	; format is        0101 lbhm mmnn nddd
	;
	; <LDR|STR>{B|SB|H|SH} Rd,[Rn,Rm]
	;
	; where l = Load/~Store
	;       b = Byte
	;	h = Halfword
	;     mmm = Rm
	;     nnn = Rn
	;     ddd = Rd
	ADR	R10,ThumbLdStRegTable
	AND	R2,R4,#2_0000111000000000
	ADD	R10,R10,R2,LSR #7
	ADD	R10,R10,R2,LSR #8
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AddStr	Open_B_1
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Dis_Register
	AND	R5,R4,#2_0000000111000000
	MOV	R5,R5,LSR #6
	BL	Comma_Dis_Register
	AddChar	"]"
	B	ThumbInstEnd

ThumbOpcodeTable
	= "AND", 0
	= "EOR", 0
	= "LSL", 0
	= "LSR", 0
	= "ASR", 0
	= "ADC", 0
	= "SBC", 0
	= "ROR", 0
	= "TST", 0
	= "NEG", 0
	= "CMP", 0
	= "CMN", 0
	= "ORR", 0
	= "MUL", 0
	= "BIC", 0
	= "MVN", 0

ThumbDataProcReg
	; arrive here with 0100 xxxx xxxx xxxx
	TestBit	11
	BNE	ThumbLoadLiteral
	TestBit 10
	BNE	ThumbSpecialDataProc
	; arrive here with 0100 00xx xxxx xxxx
	; format is        0100 00oo oonn nddd
	;
	; <operation> Rd,Rn
	;
	; where oooo = operation (AND,EOR,LSL, ... ,MUL,BIC,MVN)
	;        nnn = Rn
	;        ddd = Rd
	AND	R10,R4,#2_0000001111000000
	ADR	R1,ThumbOpcodeTable
	ADD	R10,R1,R10,LSR #4
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	B	ThumbInstEnd

ThumbHighOpcodeTable
	= "ADD", 0
	= "CMP", 0
	= "MOV", 0
Bx	= "BX", 0
Blx     = "BLX", 0
	ALIGN

ThumbSpecialDataProc
	; arrive here with 0100 01xx xxxx xxxx
	; format is        0100 01oo bann nddd
	;
	; <ADD|CMP|MOV> Rd,Rn
	;
	; where oo = operation (ADD,CMP,MOV)
	;        b = Rd high register
	;        a = Rn high register
	;      nnn = Rn
	;      ddd = Rd
	AND	R10,R4,#2_0000001100000000
	TEQS	R10,#2_0000001100000000
	BEQ	ThumbBX
	TSTS	R4,#2_0000000011000000	; One of the registers must be high
	BEQ	ThumbUnpredictable
	ADR	R1,ThumbHighOpcodeTable
	ADD	R10,R1,R10,LSR #6
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	TestBit	7
	ADDNE	R5,R5,#8
	BL	Tab_Dis_Register
	MOV	R5,R4,LSR #3
	BL	Comma_Dis_Register
	B	ThumbInstEnd

ThumbBX
	; arrive here with 0100 0111 xxxx xxxx
	; format is        0100 0111 lnnn n000
	;
	; B{L}X Rn
	;
	; where nnnn = Rn
        ;          l = Link
	TSTS	R4,#2_111
	BNE	ThumbUnpredictable
        TestStr 7,Blx,Bx
        [ WarnARMv5
        TestBit 7
        MOVNE   R10,#Mistake_ARMv5
        STRNE   R10,Mistake
        ]
	MOV	R5,R4,LSR #3
	BL	Tab_Dis_Register
	B	ThumbInstEnd

ThumbLoadLiteral
	; arrive here with 0100 1xxx xxxx xxxx
	; format is        0100 1ddd oooo oooo
	;
	; LDR Rd,address
	;
	; where ddd = Rd
	;       ooo = 8-bit unsigned offset
	AddStr	Ldr_1
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	BL	AddComma
	AND	R8,R4,#&00FF
	ADD	R8,R9,R8,LSL #2		; Word offset
	ADD	R8,R8,#4
        BIC     R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbLargeImmTable
	= "MOV", 0
	= "CMP", 0
	= "ADD", 0
	= "SUB", 0

ThumbAddSubCmpImm ROUT
	; arrive here with 001x xxxx xxxx xxxx
	; format is        001o oddd iiii iiii
	;
	; <MOV|CMP|ADD|SUB> Rd,#imm
	;
	; where oo = operation (MOV,CMP,ADD,SUB)
	;      ddd = Rd
	;      iii = 8-bit unsigned immediate
	ADR	R10,ThumbLargeImmTable
	AND	R1,R4,#2_0001100000000000
	ADD	R10,R10,R1,LSR #9
	BL	SaveString
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000000011111111
	B	ThumbImmediateEnd

ThumbAddSub ROUT
	; arrive here with 0001 xxxx xxxx xxxx
	TestBit	11
	BEQ	ThumbShiftImm
	; arrive here with 0001 1xxx xxxx xxxx
	; format is        0001 1iam mmnn nddd
	;
	; <ADD|SUB> Rd,Rn,Rm
	;           Rd,Rn,#imm
	;
	; where i = Immediate/~Register
	;       a = ADD/~SUB
	;     mmm = Rm or 3-bit immediate
	;     nnn = Rn
	;     ddd = Rd
	TestStr	9,Sub,Add
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	TestBit	10
	BEQ	%F1
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000000111000000
	MOV	R8,R8,LSR #6
	BL	StoreDecimal
	B	ThumbInstEnd

1	AND	R5,R4,#2_0000000111000000
	MOV	R5,R5,LSR #6
	BL	Comma_Dis_Register
	B	ThumbInstEnd

ThumbShiftTable
	= "LSL", 0
	= "LSR", 0
	= "ASR", 0

ThumbShiftImm ROUT
	; arrive here with 000o oxxx xxxx xxxx
	; where yy <> 11
	;
	; format is        000o oiii iinn nddd
	;
	; <LSL|LSR|ASR> Rd,Rn,#imm
	;
	; where  oo = operation (LSL,LSR,ASR)
	;     iiiii = 5-bit immediate
	;       nnn = Rn
	;       ddd = Rd
	AND	R6,R4,#2_0001100000000000
	ADR	R1,ThumbShiftTable
	ADD	R10,R1,R6,LSR #9
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000011111000000
	MOV	R8,R8,LSR #6
	TEQS	R6,#0
	BEQ	%F3
	TEQS	R8,#0		; ASR/LSR #0 means ASR/LSR #32
	MOVEQ	R8,#32
3	BL	StoreDecimal
	B	ThumbInstEnd

	ROUT
ThumbRegList Entry "R2,R5,R6,R8"
	MOV	R5,#0
	MOV	R8,#0
TRL_Cont
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	BCC	TRL_Next
	TEQS	R8,#0
	BLNE	AddComma
	BL	Dis_Register
	ADD	R5,R5,#1
	CMP	R5,#8
	EXIT	EQ
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	MOV	R8,#1
	BCC	TRL_Next                   ; If next reg not done, loop
TRL_Count
	ADD	R8,R8,#1
	ADD	R5,R5,#1
	CMPS	R5,#8
	BEQ	TRL_Group
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	BCS	TRL_Count
TRL_Group
	MOV	R6,#","
	CMPS	R8,#3
	MOVHS	R6,#"-"
	STRB	R6,[R0],#1
	SUB	R5,R5,#1
	BL	Dis_Register
TRL_Next
	ADD	R5,R5,#1
	CMPS	R5,#8
	BNE 	TRL_Cont
TRL_End
	EXIT

	]

	LNK	s.CodeVar
