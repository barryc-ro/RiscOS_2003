        SUBT    > <wini>arm.Debugger.HelpSrc

 [ International_Help = 0
BreakClr_Help
        =       "*",TokenEscapeChar,Token0
        =       " removes the breakpoint at the specified address."
        =       " If no address is given then all breakpoints are removed."
        =       13
BreakClr_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " [<addr|reg>]", 0

BreakList_Help
        =       "*",TokenEscapeChar,Token0
        =       " lists all the currently set breakpoints."
        =       13
BreakList_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       "", 0

BreakSet_Help
        =       "*",TokenEscapeChar,Token0
        =       " sets a breakpoint at the given address."
        =       13
BreakSet_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " <addr|reg>", 0

Continue_Help
        =       "*",TokenEscapeChar,Token0
        =       " restarts execution from the breakpoint saved state."
        =       13
Continue_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       "", 0

Debug_Help
        =       "*",TokenEscapeChar,Token0
        =       " gives access to debugging facilities."
        =       13
Debug_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       "", 0

InitStore_Help
        =       "*",TokenEscapeChar,Token0
        =       " fills user memory with the specified data,"
        =       " or the value &E7FFFFFF (an illegal ARM instruction) if no"
        =       " parameter is given."
        =       13
InitStore_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " [<data|reg>]", 0

Memory_Help
        =       "*",TokenEscapeChar,Token0
        =       " displays the values in the memory in ARM words."
        =       13
Memory_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " [P] [B] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]", 0

MemoryA_Help
        =       "*",TokenEscapeChar,Token0
        =       " displays and alters the memory contents in bytes or words."
        =       13
MemoryA_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " [P] [B] <addr|reg1> [<data|reg2>]", 0

MemoryI_Help
        =       "*",TokenEscapeChar,Token0
        =       " disassembles ARM or Thumb instructions."
        =       13
MemoryI_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       " [P] [T] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]", 0

ShowRegs_Help
        =       "*",TokenEscapeChar,Token0
        =       " displays the stored ARM registers."
        =       13
ShowRegs_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       "", 0

ShowFPRegs_Help
        =       "*",TokenEscapeChar,Token0
        =       " displays the stored FPA registers."
        =       13
ShowFPRegs_Syntax
        =       "Syntax: *",TokenEscapeChar,Token0
        =       "", 0
 |
BreakClr_Help           DCB     "HDBGBCL", 0
BreakClr_Syntax         DCB     "SDBGBCL", 0

BreakList_Help          DCB     "HDBGBLS", 0
BreakList_Syntax        DCB     "SDBGBLS", 0

BreakSet_Help           DCB     "HDBGBST", 0
BreakSet_Syntax         DCB     "SDBGBST", 0

Continue_Help           DCB     "HDBGCNT", 0
Continue_Syntax         DCB     "SDBGCNT", 0

Debug_Help              DCB     "HDBGDBG", 0
Debug_Syntax            DCB     "SDBGDBG", 0

InitStore_Help          DCB     "HDBGINS", 0
InitStore_Syntax        DCB     "SDBGINS", 0

Memory_Help             DCB     "HDBGMEM", 0
Memory_Syntax           DCB     "SDBGMEM", 0

MemoryA_Help            DCB     "HDBGMMA", 0
MemoryA_Syntax          DCB     "SDBGMMA", 0

MemoryI_Help            DCB     "HDBGMMI", 0
MemoryI_Syntax          DCB     "SDBGMMI", 0

ShowRegs_Help           DCB     "HDBGSHR", 0
ShowRegs_Syntax         DCB     "SDBGSHR", 0

ShowFPRegs_Help         DCB     "HDBGSFR", 0
ShowFPRegs_Syntax       DCB     "SDBGSFR", 0
 ]

        ALIGN

        END
