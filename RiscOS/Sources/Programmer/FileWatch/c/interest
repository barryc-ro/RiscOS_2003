/* > interest.c

 *

 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "osfscontrol.h"

#include "fw.h"
#include "msgs.h"
#include "utils.h"
#include "main.h"

// --------------------------------------------------------------------------

#define MAX_REASONS 32

// --------------------------------------------------------------------------

interest_info *interest_list = NULL;                // singly linked list

// --------------------------------------------------------------------------

static int count_reasons(int *reasons)
{
    int count = 1;

    while (*(reasons++) != -1 && count < MAX_REASONS)
        count++;

    return count;
}

// --------------------------------------------------------------------------

static int find_fs_number(const char *filename, int *fs_len)
{
    int i, len;
    const char *s;

    s = strchr(filename, ':');
    len = s ? s - filename : strlen(filename);

    if (fs_len)
        *fs_len = len+1;

    for (i = 0; i < 256; i++)
    {
        char buffer[32];
        _swix(OS_FSControl, _INR(0,3), OSFSControl_ReadFSName, i, buffer, sizeof(buffer));
        if (strncmpi(buffer, filename, len) == 0)
            return i;
    }

    return -1;
}

// --------------------------------------------------------------------------

static void interest_changed_pop(interest_changed_info **change_list_addr)
{
    interest_changed_info *change = *change_list_addr;

    if (change)
    {
        interest_changed_info *next = change->next;

        // decrement use of file changed block
        if (change->file)
            file_changed_dispose(change->file);

        // free up this block
        free(change);
        *change_list_addr = next;
    }
}

interest_changed_info *interest_changed_find(interest_changed_info *change, file_changed_info_hdr *file)
{
    while (change)
    {
        if (change->file == file)
            return change;

        change = change->next;
    }
    return NULL;
}

// --------------------------------------------------------------------------

static void interest_dispose(interest_info *info, void *pw)
{
    lls_unlink((void **)&interest_list, info);

    while (info->changed_list)
        interest_changed_pop(&info->changed_list);

    free(info->reasons);
    free(info->file_prefix);
    free(info);

    // release upcall vector if freeing last interest in the list
    if (interest_list == NULL)
        _swix(OS_Release, _INR(0,2), UpCallV, upcall_veneer, pw);
}

static os_error *interest_validate(interest_info *info)
{
    interest_info *ip;
    for (ip = interest_list; ip; ip = ip->next)
        if (ip == info)
            return NULL;
    return make_err(error_FILE_WATCH_BAD_HANDLE, NULL, info);
}

// --------------------------------------------------------------------------

void interest_dispose_all(void *pw)
{
    while (interest_list)
        interest_dispose(interest_list, pw);
}

os_error *interest_deregister(filewatch_de_register_interest_args *args, void *pw)
{
    os_error *e;
    interest_info *info = (interest_info *)args->in.handle;

    e = interest_validate(info);
    if (!e) interest_dispose(info, pw);

    return e;
}

os_error *interest_register(filewatch_register_interest_args *args, void *pw)
{
    interest_info *info;
    os_error *e = NULL;

    // allocate structure for this interest
    if ((info = calloc(sizeof(*info), 1)) == NULL)
        return make_oomerr(0, sizeof(*info));

    // copy the reasons list
    if (args->in.reasons)
    {
        int size = count_reasons(args->in.reasons)*sizeof(int);
        if ((info->reasons = malloc(size)) == NULL)
            e = make_oomerr(0, size);
        else
            memcpy(info->reasons, args->in.reasons, size);
    }

    // copy file handle or file name to watch
    if (!e)
    {
        if (args->in.flags == filewatch_REGISTER_INTEREST_FILE_HANDLE)
        {
            info->file_handle = args->in.match.file_handle;
            info->fs_number = -1;
        }
        else if ((int)args->in.match.file_prefix > 255)
        {
            if ((info->fs_number = find_fs_number(args->in.match.file_prefix, &info->fs_prefix_len)) == -1)
                e = make_err(error_FILE_WATCH_WHAT_FS, NULL);

            if (!e)
            {
                info->file_prefix_len = strlen(args->in.match.file_prefix);
                if ((info->file_prefix = malloc(info->file_prefix_len+1)) == NULL)
                    e = make_oomerr(0, info->file_prefix_len+1);
                else
                    memcpy(info->file_prefix, args->in.match.file_prefix, info->file_prefix_len+1);
            }
        }
    }

    // claim upcall vector if this is the first to be registered
    if (!e && interest_list == NULL)
        e = (os_error *)_swix(OS_Claim, _INR(0,2), UpCallV, upcall_veneer, pw);

    // dispose in error situation or link in
    if (e)
        interest_dispose(info, pw);
    else
    {
        lls_link((void **)&interest_list, info);
        args->out.handle = (filewatch_h)info;
    }

    return NULL;
}

os_error *interest_poll(filewatch_poll_args *args)
{
    os_error *e;
    interest_info *info = (interest_info *)args->in.handle;

    e = interest_validate(info);
    if (!e)
    {
        if (args->in.buffer)
        {
            int buffer_size = args->in.buffer_size;
            byte *buffer = args->in.buffer;
            int file_count = 0;

            while (info->changed_list)
            {
                file_changed_info_hdr *file = info->changed_list->file;
                int size;

                size = file_changed_data_size(file);
                if (file->tag == file_changed_NAME)
                    size += info->fs_prefix_len;

                if (size <= buffer_size)
                {
                    // put data into output buffer
                    if (file->tag == file_changed_NAME)
                    {
                        memcpy(buffer, info->file_prefix, info->fs_prefix_len);
                        memcpy(buffer+info->fs_prefix_len, file->data.file_name, size - info->fs_prefix_len);
                    }
                    else
                        memcpy(buffer, &file->data.file_handle, size);
                    buffer_size -= size;
                    buffer += size;

                    // dispose of this record
                    interest_changed_pop(&info->changed_list);
                }
                else
                {
                    // no room for this change record so count those remaining
                    interest_changed_info *change = info->changed_list;

                    while (change)
                    {
                        file_count++;
                        change = change->next;
                    }

                    // break out of outer while loop as there is still data to write
                    break;
                }
            }

            args->out.updated_buffer_size = buffer_size;
            args->out.updated_buffer = buffer;
            args->out.file_count = file_count;
        }
        else
        {
            // passed in null buffer so just count space needed
            interest_changed_info *change = info->changed_list;

            args->out.updated_buffer_size = 0;
            args->out.file_count = 0;

            while (change)
            {
                args->out.updated_buffer_size += file_changed_data_size(change->file);
                if (change->file->tag == file_changed_NAME)
                    args->out.updated_buffer_size += info->fs_prefix_len;

                args->out.file_count++;

                change = change->next;
            }
        }
    }

    return e;
}

void interest_dump(void)
{
    interest_info *info;
    interest_changed_info *change;

    printf("Interests set\n");

    for (info = interest_list; info; info = info->next)
    {
        if (info->file_handle)
            printf(" f: %3d", info->file_handle);

        if (info->file_prefix)
            printf(" s: %s", info->file_prefix);

        if (info->reasons)
        {
            int r, *rp = info->reasons;
            while ((r = *rp++) != -1)
                printf(" %3d", r);
        }
        else
            printf(" all reasons\n");

        for (change = info->changed_list; change; change = change->next)
            file_changed_dump_one(change->file);

        printf("\n");
    }
    printf("\n");
}

// eof interest.c
