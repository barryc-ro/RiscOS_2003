/* Title:   main.c
 * Purpose: main module of filewatch module
 * Author:  SJM
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "os.h"
#include "resourcefs.h"

#include "modhdr.h"
#include "main.h"
#include "msgs.h"
#include "resources.h"
#include "utils.h"

#include "fw.h"

#define VERSION_NUMBER	4   	/* keep up to data with modhdr */

#if ROM
#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43

static bool tinysupport_used = FALSE;
#endif

/* ++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++ */

os_error *filewatch_final (int fatal, int podule, void *pw)
{
    os_error *e;

    interest_dispose_all(pw);

    e = msgs_close();
    if (!e) e = de_register_resources();

#if ROM
    if (!e && tinysupport_used)
        _swix(TinySupport_Die, 0);
#endif

#ifndef NDEBUG
    _swix(0xCF001, _IN(0), debugw);
#endif

    return e;

    NOT_USED(fatal);
    NOT_USED(podule);
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

os_error *filewatch_init(char *cmd_tail, int podule_base, void *pw)
{
    os_error *e = NULL;

#ifndef NDEBUG
    _swix(0xCF000, _INR(0,3)|_OUT(0), "FileWatch", 100, 1000, 1, &debugw);
#endif

    e = register_resources();
    if (!e)
    {
        e = msgs_init("Resources:$.Resources.FileWatch.Messages");
        if (e) de_register_resources();
    }

#if ROM
    if (!e) tinysupport_used = _swix(TinySupport_Share, _IN(0), pw) == NULL;
#endif

    return e;

    NOT_USED(cmd_tail);
    NOT_USED(podule_base);
    NOT_USED(pw);
}

/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

void filewatch_services(int service_number, os_register_block *r, void *pw)
{
    switch (service_number)
    {
#if 0
        case Service_Error:
            error_handler((const os_error *)r->registers[0]);
            break;
#endif
    	case Service_ResourceFSStarting:
    	    re_register_resources(r->registers[2], r->registers[3]);
    	    break;
    }
    NOT_USED(pw);
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

os_error *filewatch_SWI_handler(int swi_no, os_register_block *r, void *pw)
{
    os_error *e = NULL;

    switch (swi_no)
    {
        case FileWatch_RegisterInterest - FileWatch_00:
            e = interest_register((filewatch_register_interest_args *)r, pw);
            break;

        case FileWatch_DeRegisterInterest - FileWatch_00:
            e = interest_deregister((filewatch_de_register_interest_args *)r, pw);
            break;

        case FileWatch_Poll - FileWatch_00:
            e = interest_poll((filewatch_poll_args *)r);
            break;

        default:
            e = make_err(error_NO_SUCH_SWI, "BadSWI", swi_no);
            break;
    }

    return e;
}

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

#if 1
os_error *filewatch_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    os_error *e = NULL;

    switch (cmd_no)
    {
    	case CMD_FileWatchInfo:
            interest_dump();
    	    file_changed_dump();
    	    break;
    }

    return e;
    NOT_USED(arg_string);
    NOT_USED(argc);
    NOT_USED(pw);
}
#endif

/* ----------------------------------------------------------------------- */

/* eof main.c */

