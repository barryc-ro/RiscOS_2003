/* > handlers.c

 */

#include <stdlib.h>

#include "osfind.h"
#include "osfscontrol.h"

#include "fw.h"
#include "modhdr.h"
#include "utils.h"

// --------------------------------------------------------------------------

static bool reasons_match(int reason, int *list)
{
    int r;

    if (list == NULL)
        return TRUE;

    while ((r = *list++) != -1) /* This used to be 0 in version 0.03 */
    {
        if (r == reason)
            return TRUE;
    }

    return FALSE;
}

// --------------------------------------------------------------------------

static void may_have_changed(interest_info *info, os_f file_handle, const char *file_name)
{
    interest_changed_info *change;
    file_changed_info_hdr *file;

    DEBUG(("change %s/%d\n", file_name, file_handle));

    // see if this file has changed before
    file = file_changed_find(file_handle, file_name);

    DEBUG(("found %p\n", file));

    // if this interest already has a record of this change then ignore this one
    if (file && interest_changed_find(info->changed_list, file) != NULL)
        return;

    // allocate space, ignore if we can't
    if ((change = calloc(sizeof(interest_changed_info), 1)) == NULL)
        return;

    // if this one isn't already recorded
    if (file == NULL)
        file = file_changed_add(file_handle, file_name);
    else
        file->interest_count++;

    DEBUG(("added %p\n", file));

    // fill in and link in the changed item
    change->file = file;
    lls_link((void **)&info->changed_list, change);
}

// --------------------------------------------------------------------------

int upcall_handler(_kernel_swi_regs *rr, void *pw)
{
    interest_info *ip;
    os_register_block *r = (os_register_block *)rr;

    if (r->registers[0] != 3)
        return 1;

    DEBUG(("upcall %d r9=%d r1=%s/%d\n", r->registers[0], r->registers[9],
        r->registers[1] > 255 ? (char *)r->registers[1] : "",
        r->registers[1] > 255 ? 0 : r->registers[1]));

    for (ip = interest_list; ip; ip = ip->next)
    {
        int reason = r->registers[9];
#ifdef fileswitch_FS_NUMBER
        int fs_number = r->registers[8] & fileswitch_FS_NUMBER;
#else
        int fs_number = r->registers[8] & osfscontrol_FS_NUMBER;
#endif
        if ((ip->fs_number == -1 || ip->fs_number == fs_number) &&
            reasons_match(reason, ip->reasons))
        {
            // check close or ensure
            if (reason == UpCallFind_CreateOpenup || reason == UpCallFSControl_SetArgsSize)
            {
                os_f file_handle = r->registers[1];
                if (file_handle == ip->file_handle)
                {
                    may_have_changed(ip, file_handle, NULL);
                }
            }
            else
            {
                // check other file_name based calls
                const char *file_name = (const char *)r->registers[1];
                if (strncmpi(ip->file_prefix + ip->fs_prefix_len, file_name, ip->file_prefix_len - ip->fs_prefix_len) == 0)
                {
                    may_have_changed(ip, 0, file_name);
                }

                // check where we are renaming to
                if (reason == UpCallFSControl_Rename)
                {
                    file_name = (const char *)r->registers[2];
                    if (strncmpi(ip->file_prefix + ip->fs_prefix_len, file_name, ip->file_prefix_len - ip->fs_prefix_len) == 0)
                    {
                        may_have_changed(ip, 0, file_name);
                    }
                }
            }
        }
    }

    return 1;
    NOT_USED(pw);
}

// --------------------------------------------------------------------------

// eof handlers.c
