/* > filechange.c

 *

 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "fw.h"
#include "utils.h"

// --------------------------------------------------------------------------

static file_changed_info_hdr *file_changed_list = NULL;    // doubly linked list

// --------------------------------------------------------------------------

void file_changed_dispose(file_changed_info_hdr *file)
{
    if (--file->interest_count == 0)
    {
        lld_unlink((void **)&file_changed_list, file);
        free(file);
    }
}

file_changed_info_hdr *file_changed_find(os_f file_handle, const char *file_name)
{
    file_changed_info_hdr *file;
    for (file = file_changed_list; file; file = file->next)
    {
        switch (file->tag)
        {
            case file_changed_NAME:
                if (file_name && strcmpi(file_name, file->data.file_name) == 0)
                    return file;
                break;

            case file_changed_HANDLE:
                if (file_handle && file_handle == file->data.file_handle)
                    return file;
                break;
        }
    }
    return NULL;
}

file_changed_info_hdr *file_changed_add(os_f file_handle, const char *file_name)
{
    file_changed_info_hdr *file;
    int size;

    // calculate size needed
    size = offsetof(file_changed_info_hdr, data);
    if (file_name)
        size += strlen(file_name) + 1;
    else
        size += sizeof(os_f);
    size = (size + 3) &~ 3;

    // allocate space
    if ((file = calloc(size, 1)) == NULL)
        return NULL;

    file->interest_count = 1;

    if (file_name)
    {
        strcpy(file->data.file_name, file_name);
        file->tag = file_changed_NAME;
    }
    else
    {
        file->data.file_handle = file_handle;
        file->tag = file_changed_HANDLE;
    }

    lld_link((void **)&file_changed_list, file);

    return file;
}

int file_changed_data_size(const file_changed_info_hdr *file)
{
    int size = 0;
    switch (file->tag)
    {
        case file_changed_NAME:
            size = strlen(file->data.file_name)+1;
            break;
        case file_changed_HANDLE:
            size = 1;
            break;
    }
    return size;
}

// --------------------------------------------------------------------------

void file_changed_dump_one(file_changed_info_hdr *file)
{
    if (!file)
    {
        printf(" <null>\n");
    }
    else switch (file->tag)
    {
        case file_changed_NAME:
            printf(" s: x%d: %s\n", file->interest_count, file->data.file_name);
            break;

        case file_changed_HANDLE:
            printf(" f: x%d: %d\n", file->interest_count, file->data.file_handle);
            break;
    }
}

void file_changed_dump(void)
{
    file_changed_info_hdr *file;

    printf("Files changed\n");

    for (file = file_changed_list; file; file = file->next)
        file_changed_dump_one(file);

    printf("\n");
}

// --------------------------------------------------------------------------

// eof filechange.c
