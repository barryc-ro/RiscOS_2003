<html>
<!----------------------------------------------------------------------------->
<!           Template for software functional specifications.                  >
<!----------------------------------------------------------------------------->
<head>
  <title>
    FileWatch Functional Specification
  </title>
</head>

<body BGCOLOR="#ffffff">


<center>
<img src="./pics/nclogo.gif">
  <h1>
    FileWatch Functional Specification
  </h1>
</center>

<p>
<hr>

<blockquote>
  <pre>
    Distribution: COMPANY CONFIDENTIAL

    Project:      Browser
    Issue:        0.02
    Author(s):    Simon Middleton
    Date:         29-May-96
    Last Issue:   None
  </pre>
</blockquote>
<hr>

<h2> Contents. </h2>
<ul>
  <li> <a href="#history">      History </a>
  <li> <a href="#outstanding">  Outstanding issues </a>
  <li> <a href="#overview">     Overview </a>
  <li> <a href="#technical">    Technical background </a>
  <li> <a href="#user"> 	User interface </a>
  <li> <a href="#programmer"> 	Programmer interface </a>
  <li> <a href="#standards"> 	Standards </a>
  <li> <a href="#interchange"> 	Data interchange </a>
  <li> <a href="#formats"> 	Data formats </a>
  <li> <a href="#dependencies"> External dependencies </a>
  <li> <a href="#acceptance"> 	Acceptance test </a>
  <li> <a href="#test"> 	Development test strategy </a>
  <li> <a href="#organisation"> Product organisation </a>
  <li> <a href="#enhancements"> Future enhancements </a>
</ul>

<hr>

<h2> <a name="history"> History </a> </h2>

<PRE>
    23-05-96 SJM Created
    29-05-96 SJM Added allocations and tidied up a bit
</PRE>

<hr>

<h2> <a name="outstanding"> Outstanding issues </a> </h2>

<P>None.

<hr>

<h2> <a name="overview"> Overview </a> </h2>

<P>The introduction of <A href="">CacheFS</A> means that it is likely for files to be removed without an applications knowledge. It is possible that the application might need to know about this, however the only notification sent is in the form of an upcall (used by the Filer to keep its displays up to date).

<P>This module allows applications to register interest in particular
directory paths and file modification types. The module then keeps a record
of any such changes until the application polls it.

<hr>

<h2> <a name="technical"> Technical background </a> </h2>

<P>Filing systems generate UpCall 3 (PRM page 1-181 to 1-185) when a file is modified. R9 contains a reason code identifying the type of modification with other registers containing extra information.

<P>Note that the UpCall is generated before the operation which may subsequently fail therefore the error should be checked for (using the service call or error vector) to see if the operation succeeded or not. For the initial use of this module we know the operations will never fail so we will ignore this for now. In the future we will have to add a callback handler and check for
any errors being generated between the upcall and the callback and if so cancel the change.

<P>SWI chunk base is 0x4d240, error base is 0x80fb00.

<hr>

<h2> <a name="user"> User interface </a> </h2>

<P>The module supports one CLI command.

<P><CODE><B>*FileWatchInfo</B></CODE>

<P>This command prints out information on the paths monitored and what
file changes are pending on those paths. It is for information only
and the format of the returned data should npot be relied upon.
  
<HR>

<h2> <a name="programmer"> Programmer interface </a> </h2>

<P>The following SWI calls are implemented.

<H3>FileWatch_RegisterInterest 0x4d240</H3>

<P>Set the module to watch a particular set of files for certain types of modification.
<P>
<PRE>
    Entry:
      R0 =  flags, all reserved
      R1 -> list of upcall reason codes to watch.
            The list should be terminated by -1.
            A null pointer can be given to look for all reason codes.
      R2 =  file prefix
    Exit:
      R0 =  opaque handle
</PRE>

<H3>FileWatch_DeRegisterInterest 0x4d241</H3>

<P>Remove an interest.

<P>
<PRE>
    Entry:
      R0 =  flags, all reserved
      R1 =  opaque handle returned from RegisterInterest
</PRE>

<H3>FileWatch_Poll 0x4d242</H3>

<P>Fill in a buffer with file names of files that have changed. Files are written into the buffer null-terminated with no extra padding between file names.

<P>
<PRE>
    Entry:
      R0 =  flags, all reserved
      R1 =  opaque handle returned from RegisterInterest
      R2 -> buffer
      R3 =  buffer size
    Exit:
      R2 -> first free byte in buffer
      R3 =  bytes left in buffer
      R4 =  number of files left to return
</PRE>

<HR>

<h2> <a name="standards"> Standards </a> </h2>

<HR>

<h2> <a name="interchange"> Data interchange </a> </h2>

<HR>

<h2> <a name="formats"> Data formats </a> </h2>

<P>No new data formats defined.

<HR>

<h2> <a name="dependencies"> External dependencies </a> </h2>

<P>None.

<HR>

<h2> <a name="acceptance"> Acceptance test </a> </h2>

<HR>

<h2> <a name="test"> Development test strategy </a> </h2>

<HR>

<h2> <a name="organisation"> Product organisation </a> </h2>

<P>Written in C with veneers by cmhg. Part of the Omega build tree and rommable.

<HR>

<h2> <a name="enhancements"> Future enhancements </a> </h2>

<UL>

<LI>Could make use of Wimp poll words to notify an application quickly that its files have changed.

<LI>If more information is needed about how the files changed then the extra information could be stored and returned via another Poll SWI.

<LI>Check for errors (by sitting on the error vector or error service
call) to avoid flagging changes that don't happen.

<LI>Implement filing system special fields (currently ignored).

</UL>

</body>
</html>
