#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "s_card.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "ispc.h"

#include "regss_scrp.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "module.h"

#include "regss_swis.h"
#include "dynalloc.h"
#include "regss_defs.h"
#include "LZW.h"
#include "DBUG.h"

#define WSPACE_INIT(v, w, x, y, z) w = (v)(((char *)x)+(sizeof(y)*z))

_kernel_oserror *e = (_kernel_oserror *)NULL;
_kernel_swi_regs r;

#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif



_kernel_oserror *registryss_init(char *cmd_tail, int pbase, void *pw)
{
    static char keyword[] = "verbose/s,file/k,debug/k/e";
    static int args[32];
    char *argp, *debug_file;
    int debug_lvl = 0;

    static char regss_title[] = "Scripting";
    int wspace_size;

#ifdef USE_TINY
    _kernel_swi_regs reg;
#endif

    module_wsp = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
    reg.r[0] = (int)module_wsp;
    TinyError = _kernel_swi(TinySupport_Share, &reg, &reg);
#endif

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;
   _kernel_swi(OS_ReadArgs, &r, &r);

   if(args[0]) quiet = 0;

   if(args[1] != 0) debug_file = (char *)args[1];
   else debug_file = NULL;

   if(args[2]) { /* debug value present */
     argp = (char *)args[2];
     if(*argp++ == 0) {
       debug_lvl = *((int *)argp);
       if(debug_lvl <0) debug_lvl = 0;
       if(debug_lvl >5) debug_lvl = 5;
       if(debug_file == NULL) DBUG_FOPEN("stdout");
       else DBUG_FOPEN(debug_file);
       DBUG_LEVEL(debug_lvl);
       QUIET {
         printf("NCRegistrySpprt_init: debug level set to %d\n", debug_lvl);
         if(debug_file != NULL) printf("NCRegistrySpprt_init: debug file: %s\n", debug_file);
       }
     }
   }

  r.r[0] = REGISTRY_SUPPORT_SCRIPT;
  r.r[1] = REGSS_SWIBASE;
  r.r[2] = (unsigned int)regss_title;
  if((_kernel_swi(NCRegistry_SupportInit, &r, &r)) || r.r[0] == -1) return(&f); /* exit */
  registry_handle = r.r[0];

  rmalloc_init(); /* initialise memory system */



#ifndef EXPAND_RMALLOCS
  wspace_size = sizeof(KEY_DEF) * MAX_KEY_DEFS +
  	        sizeof(MODIFIER) * MAX_MODIFIERS +
  	        sizeof(PP_ENUM) * MAX_PP_ENUMS +
  	        sizeof(PP) * MAX_PP_KEYS +
  	        MAX_BUFFER +
  	        MAX_BUFFER +
  	        6 * SPECIAL_TAG_SIZE +
  	        sizeof(SCRIPT_LIST) * MAX_SCRIPT_ENTRIES +
  	        MAX_SCRIPT_ARG +
  	        4 * LZW_BUFFSIZE;

  if((keywords = (KEY_DEF *)rmalloc(wspace_size, "NCRegSpt Workspace")) == NULL) return(&i);
  WSPACE_INIT(MODIFIER *, modifiers, keywords, KEY_DEF, MAX_KEY_DEFS);
  WSPACE_INIT(PP_ENUM *, pp_enums, modifiers, MODIFIER, MAX_MODIFIERS);
  WSPACE_INIT(PP *, pp, pp_enums, PP_ENUM, MAX_PP_ENUMS);
  WSPACE_INIT(unsigned char *, out_ptr, pp, PP, MAX_PP_KEYS);
  out_buff = out_ptr;
  WSPACE_INIT(unsigned char *, cmp_ptr, out_ptr, unsigned char, MAX_BUFFER);
  cmp_buff = cmp_ptr;
  WSPACE_INIT(char *, domain_ptr, cmp_ptr, unsigned char, MAX_BUFFER);
  fetch_ptr = domain_ptr + SPECIAL_TAG_SIZE;
  mount_ptr = fetch_ptr + SPECIAL_TAG_SIZE;
  net_domain_ptr = mount_ptr + SPECIAL_TAG_SIZE;
  net_fetch_ptr = net_domain_ptr + SPECIAL_TAG_SIZE;
  net_mount_ptr = net_fetch_ptr + SPECIAL_TAG_SIZE;
  WSPACE_INIT(SCRIPT_LIST *, script_base, net_mount_ptr, SPECIAL_TAG_SIZE, 6);
  script_ptr = script_base;
  WSPACE_INIT(char *, script_arg_base, script_base, SCRIPT_LIST, MAX_SCRIPT_ENTRIES);
  script_arg_ptr = script_arg_base;
  WSPACE_INIT(unsigned char *, explicit, script_arg_base, char, MAX_SCRIPT_ARG);
  WSPACE_INIT(unsigned char *, lzw_out, explicit, char, LZW_BUFFSIZE);
  WSPACE_INIT(int *, posn, lzw_out, char, LZW_BUFFSIZE);
  WSPACE_INIT(int *, lengths, posn, int, LZW_BUFFSIZE);

#ifdef BANANA_DAIQUIRI
  DBUG_PRINTF(DBUG_LVL_DIAG, "keywords: 0x%x\n", keywords);
  DBUG_PRINTF(DBUG_LVL_DIAG, "modifiers: 0x%x\n", modifiers);
  DBUG_PRINTF(DBUG_LVL_DIAG, "pp_enums: 0x%x\n", pp_enums);
  DBUG_PRINTF(DBUG_LVL_DIAG, "pp: 0x%x\n", pp);
  DBUG_PRINTF(DBUG_LVL_DIAG, "out_ptr: 0x%x\n", out_ptr);
  DBUG_PRINTF(DBUG_LVL_DIAG, "cmp_ptr: 0x%x\n", cmp_ptr);
  DBUG_PRINTF(DBUG_LVL_DIAG, "domain_ptr: 0x%x\n", domain_ptr);
  DBUG_PRINTF(DBUG_LVL_DIAG, "script_base: 0x%x\n", script_base);
  DBUG_PRINTF(DBUG_LVL_DIAG, "script_arg_base: 0x%x\n", script_arg_base);
  DBUG_PRINTF(DBUG_LVL_DIAG, "explicit: 0x%x\n", explicit);
  DBUG_PRINTF(DBUG_LVL_DIAG, "lzw_out: 0x%x\n", lzw_out);
  DBUG_PRINTF(DBUG_LVL_DIAG, "posn: 0x%x\n", posn);
  DBUG_PRINTF(DBUG_LVL_DIAG, "lengths: 0x%x\n", lengths);
#endif


#else


  keywords = (KEY_DEF *)rmalloc(sizeof(KEY_DEF) * MAX_KEY_DEFS, "NCRegSptKeys");
  modifiers = (MODIFIER *)rmalloc(sizeof(MODIFIER) * MAX_MODIFIERS, "NCRegistrySupportMods");
  pp_enums = (PP_ENUM *)rmalloc(sizeof(PP_ENUM) * MAX_PP_ENUMS, "NCRegistrySupportEnums");
  pp = (PP *)rmalloc(sizeof(PP) * MAX_PP_KEYS, "NCRegistrySupportPPs");
  out_ptr = out_buff = (unsigned char *)rmalloc(MAX_BUFFER, "NCRegistrySupportWS#1");
  cmp_ptr = cmp_buff = (unsigned char *)rmalloc(MAX_BUFFER, "NCRegistrySupportWS#2");

  domain_ptr = (char *)rmalloc((6 * SPECIAL_TAG_SIZE), "RegistrySupportTags");
  fetch_ptr = domain_ptr + SPECIAL_TAG_SIZE;
  mount_ptr = fetch_ptr + SPECIAL_TAG_SIZE;

  net_domain_ptr = mount_ptr + SPECIAL_TAG_SIZE;
  net_fetch_ptr = net_domain_ptr + SPECIAL_TAG_SIZE;
  net_mount_ptr = net_fetch_ptr + SPECIAL_TAG_SIZE;

  script_base = script_ptr = (SCRIPT_LIST *)rmalloc(sizeof(SCRIPT_LIST) * MAX_SCRIPT_ENTRIES, "RegistrySupportScript");
  script_arg_base = script_arg_ptr = (char *)rmalloc(MAX_SCRIPT_ARG, "RegistrySupportScriptArgs");

  explicit = (unsigned char *)rmalloc(LZW_BUFFSIZE, "NCRS LZW#1");
  lzw_out = (unsigned char *)rmalloc(LZW_BUFFSIZE, "NCRS LZW#2");
  posn = (int *)rmalloc(LZW_BUFFSIZE, "NCRS LZW#3");
  lengths = (int *)rmalloc(LZW_BUFFSIZE, "NCRS LZW#4");
#endif



  keyword_init(); /* initialise grammar */


  return((_kernel_oserror *)0);

}

_kernel_oserror *registryss_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &registry_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);
}

_kernel_oserror *registryss_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    return((_kernel_oserror *)NULL);
}





_kernel_oserror *registryss_final(void)
{
#ifdef USE_TINY
  _kernel_swi_regs r;
  if ( TinyError == NULL ) _kernel_swi( TinySupport_Die, &r, &r);
#endif

  r.r[0] = REGISTRY_SUPPORT_SCRIPT;
  r.r[1] = REGSS_SWIBASE;
  if((_kernel_swi(NCRegistry_SupportExit, &r, &r)) || r.r[0] == -1) return(&g); /* registry exit failed */
  if(r.r[0] != registry_handle) return(&h); /* registry exit was bogus */
  rmfree_all();
  return((_kernel_oserror *)NULL);

}











