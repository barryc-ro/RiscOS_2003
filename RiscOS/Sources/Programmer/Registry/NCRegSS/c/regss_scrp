#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "ispc.h"
#include "s_card.h"



#define PROTOTYPES_INTERNAL
#include "regss_scrp.h"
#include "reg_object.h"
#include "reg_scbb.h"
#include "module.h"
#include "DBUG.h"

/* add an entry to the linked script list */
int add_script_entry(const int cmd, char *s, int b)
{

  DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: script base: 0x%x current_ptr: 0x%x\n", script_base, script_ptr);
  if((cmd == 0) && (s == NULL) && (b==0)) { /* terminate exisiting list */
   if(script_ptr == script_base) script_ptr->next = NULL; /* there is no script */
   else (script_ptr-1)->next = NULL;
   DBUG_PRINTF(DBUG_LVL_DIAG, "script list terminated.\n");
   return(0);
  }

  DBUG_PRINTF(DBUG_LVL_DIAG, "adding script entry %d \"%s\"(0x%x) value %d\n", cmd, s, (unsigned int)s, b);

  if((script_ptr - script_base) == (MAX_SCRIPT_ENTRIES-1)) {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: no room for script entry\n");
    return(-1); /* no room at the inn */
  }

  if((script_arg_ptr + strlen(s) - script_arg_base) == (MAX_SCRIPT_ARG-1)) {
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: no room for script args\n");
    return(-1); /* ditto */
  }

  if((strcmp(s, "\n")==0) && (cmd == 0x2)) { /* tack send("\n") onto previous send if poss. */
    DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: optimizing send(\"\\n\")\n");
    if(((script_ptr-1)->cntrl & 0xff) == 0x2) { /* was previous cmd send(x) ? */
      *(--script_arg_ptr) = 0x0d;             /* if so, optimize */
      *(++script_arg_ptr) = 0;
      script_arg_ptr++;
      return(0);
    }
  }

  //DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: writing command & numeric param\n");
  script_ptr->cntrl = cmd;
  script_ptr->cntrl |= (b << 8);

  switch((unsigned int)s) {

/* can't do this because Frosty's code relies on a NULL string, not a NULL string pointer -
   this case never occurs because of the line commented out in parse_script below */

    case NULL:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: NULL string arg\n");
      script_ptr->string = NULL;
      break;

    case SCRIPT_SYMBOL_ID:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: recognized special ID symbol!\n");
      script_ptr->string = (char *)SCRIPT_SYMBOL_ID;
      break;

    case SCRIPT_SYMBOL_SECRET:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: recognized special SECRET symbol!\n");
      script_ptr->string = (char *)SCRIPT_SYMBOL_SECRET;
      break;

    default:
      DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: copying string arg from 0x%x to 0x%x\n",s,script_arg_ptr);
      script_ptr->string = script_arg_ptr;
      while(*s != 0) *script_arg_ptr++ = *s++;
      *script_arg_ptr++ = 0;
      break;
  }

  script_ptr->next = (script_ptr + 1);
  script_ptr++;
  DBUG_PRINTF(DBUG_LVL_DIAG, "Script size now: %d\n", script_ptr - script_base);

  return(0);
}

/* decode uncompressed byte-code into human readable form */
/* returns -1 for "run out of script space" and -2 for "cmd error" */
int parse_script(unsigned char *b, int n, int sel)
{
  unsigned char x, cmd;
  unsigned int con_type, ip_type;
  int make_script = 1, skip_cmd;
  char *sparam;
  unsigned char bparam;
  unsigned int is_net = 0;

  script_ptr = script_base;
  script_arg_ptr = script_arg_base;
  cmp_ptr = cmp_buff;

  if(sel == SELECT_NET_BB) {
    is_net = 1;
    make_script = 0;
  }

  //DBUG_PRINTF(DBUG_LVL_DIAG,"boot block is at 0x%x, byte buffer is at 0x%x\n", scbb_ptr, cmp_buff);
  while(n>0) {
    x = *b++;
    DBUG_PRINTF(DBUG_LVL_DIAG, "Got byte: 0x%x -----> ", x);
    n--;
    cmd = x & 0x1f;
    skip_cmd = 0;

    con_type = x & LINK_MASK;
    ip_type = x & IP_MASK;

    if(!is_net) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "Cmd/modifiers: cmd: 0x%x   con: 0x%x    ip: 0x%x\n",cmd, con_type, ip_type);

      if((sc_ppp) && (con_type == LINK_SLIP)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "ppp set and cmd is slip - skipping.\n");
        skip_cmd = 1;
      }

      else if((sc_slip) && (con_type == LINK_PPP)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "slip set and cmd is ppp - skipping.\n");
        skip_cmd = 1;
      }

      if(sc_static && (ip_type == IP_DYNAMIC)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "static set and cmd is dynamic - skipping.\n");
        skip_cmd = 1;
      }

      else if(sc_dynamic && (ip_type == IP_STATIC)) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "dynamic set and cmd is static - skipping.\n");
        skip_cmd = 1;
      }
    }

    switch(cmd) {

      case 0x0: /* extend */
           break;

      case 0x1: /* waitfor */
           sparam = (char *)b;

/* can't do this because of FrostyCode relying on NULL string */
#if 0
           if (*sparam == 0) sparam = NULL; /* NULL string argument */
#endif
           while(*b++ != 0) n--;
           n--;
           bparam = *b++;
           n--;

      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, sparam, bparam)<0) return(-1);
 	   break;

      case 0x2: /* waitfor HELLO */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, "HELLO", bparam)<0) return(-1);
           break;

      case 0x3: /* waitfor sername: */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, "sername:", bparam)<0) return(-1);
           break;

      case 0x4: /* waitfor ogin: */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, "ogin:", bparam)<0) return(-1);
           break;

      case 0x5: /* waitfor assword: */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, "assword:", bparam)<0) return(-1);
           break;

      case 0x6: /* waitfor rotocol: */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x1, "rotocol:", bparam)<0) return(-1);
           break;

           /* in the following two cases, we no longer pass the actual strings, but pass tokens for them
              instead, which are dereferenced when the ISP_SCRIPT special tag is requested from the registry.
              This way, we don't have to rebuild the entire script every time these values are altered, but
              can do it reasonably cheaply as part of the argument relocation code.
           */

      case 0x7: /* send name */
      	   // if(make_script && !skip_cmd) if(add_script_entry(0x2, scbb_ptr->LOGIN_ID, 0)<0) return(-1);
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, (char *)SCRIPT_SYMBOL_ID, 0)<0) return(-1);
           break;

      case 0x8: /* send secret */
      	   // if(make_script && !skip_cmd) if(add_script_entry(0x2, scbb_ptr->LOGIN_SECRET, 0)<0) return(-1);
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, (char *)SCRIPT_SYMBOL_SECRET, 0)<0) return(-1);

           break;

      case 0x9: /* send ppp */
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, "ppp", 0)<0) return(-1);
           break;

      case 0xa: /* send slip */
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, "slip", 0)<0) return(-1);
           break;

      case 0xb: /* send CR */
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, "\n", 0)<0) return(-1);
           break;

      case 0xc: /* send string */
      	   sparam = (char *)b;
      	   while(*b++ != 0) n--;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x2, sparam, 0)<0) return(-1);
           break;

      case 0xd: /* pause */
      	   bparam = *b++;
      	   n--;
      	   if(make_script && !skip_cmd) if(add_script_entry(0x3, NULL, bparam)<0) return(-1);
           break;

      case 0xe: /* address */
      	   if(make_script && !skip_cmd) if(add_script_entry(0x4, NULL, 0)<0) return(-1);
           break;

      case 0xf: /* start ppp */
      	   if(make_script && !skip_cmd) make_script = 0;
           break;

      case 0x10: /* start slip */
      	   if(make_script && !skip_cmd) make_script = 0;
           break;

      case 0x11: /* domain  */
      	   if(!skip_cmd) strncpy(is_net?net_domain_ptr:domain_ptr, (char *)b, SPECIAL_TAG_SIZE);
      	   DBUG_PRINTF(DBUG_LVL_DIAG, "Decoded special tag: \"%s\" DOMAIN PTR: \"%s\"\n", b, domain_ptr);
      	   while(*b++ != 0) n--;
      	   n--;
           break;

      case 0x12: /* url  */
      	   if(!skip_cmd) strncpy(is_net?net_fetch_ptr:fetch_ptr, (char *)b, SPECIAL_TAG_SIZE);
      	   DBUG_PRINTF(DBUG_LVL_DIAG, "Decoded special tag: \"%s\" FETCH PTR: \"%s\"\n", b, fetch_ptr);
      	   while(*b++ != 0) n--;
      	   n--;

           break;

      case 0x13: /* mount  */
      	   if(make_script && !skip_cmd) strncpy(is_net?net_mount_ptr:mount_ptr, (char *)b, SPECIAL_TAG_SIZE);
      	   DBUG_PRINTF(DBUG_LVL_DIAG, "Decoded special tag: \"%s\" MOUNT PTR: \"%s\"\n", b, mount_ptr);
      	   while(*b++ != 0) n--;
      	   n--;

           break;

      default:
          return(-2);
    } /* end switch */
  } /* end while */
  add_script_entry(0, NULL, 0); /* terminate script list */
  return(0);
} /* end fn */


int decode_script(unsigned char *b, int n)
{
  int cmd;
  unsigned char x;
  static char argbuff[MAX_BUFFER];
  static char modbuff[MAX_BUFFER];
  static char hexbuff[MAX_BUFFER];
  unsigned char *d;



  while(n>0) {
    x = *b;
    if((cmd = get_cmd(x))<0) {
      DBUG_PRINTF(DBUG_LVL_DIAG, "undust: invalid byte code 0x%x encountered.\n", x);
      return(-1);
    }

    get_modifiers(x, modbuff);

    d = decode_args(cmd, b+1, argbuff);

    make_hex((char *)hexbuff, (char *)b, (char *)d);



    n -= (d-b);
    b = d;
  }
  return(0);
}
/* returns index into keyword structure for given command word */
int get_cmd(unsigned char x)
{
  int l;

  x &= 0x1f;

  for(l=0;l<num_keys;l++) {
    if(keywords[l].token == x) {
      return(l);
    }
  }
  return(-1); /* keyword not known */
}

/* decodes modifier bits into a string buffer */
int get_modifiers(unsigned char x, char *b)
{
  int l,n;

  memset(b, 0, MAX_BUFFER-1);
  n = (int)x;

  for(l=0;l<num_modifiers;l++) {
    if(n & modifiers[l].flag_modifier) {
      strcat(b, modifiers[l].modifier);
      strcat(b, " ");
    }
  }
  return(0);
}

/* decodes arguments into a string buffer */
unsigned char *decode_args(int cmd, unsigned char *b, char *ab)
{
  int arg, n_args, tmp;

  if(keywords[cmd].n_args == 0) {
    *ab++ = 0;
    return(b);
  }

  for(arg=0, n_args = keywords[cmd].n_args; arg<n_args; arg++) {
    if(keywords[cmd].v_args[arg].flags & ARG_FLAG_VARIABLE) { /* it's a string */
      *ab++ = 0x22;
      while(*b != 0) *ab++ = *b++;
      b++;
      *ab++ = 0x22;
      *ab++ = 0x2c;
    } else { /* it's a byte */
      tmp = (int)(*b++);
      ab += sprintf(ab, "%d,", tmp);
    }
  }
  *(ab-1) = 0;
  return(b);
}

/* decodes hex into a string buffer */
void make_hex(char *b, char *s, char *f)
{
  char hb[20];
  int n = 0;

  memset(b, 0, MAX_BUFFER-1);
  while(s < f) {
    sprintf(hb, "0x%x ", *s++);
    n += strlen(hb);
    if(n >= MAX_HEXBUFF_LINE) {
      strcat(b, "\n ");
      n = 1;
    }
    strcat(b, hb);
  }
}



/*
   This function defines the grammar for the compiler -
   DO NOT EDIT unless you're really sure about what's going on!!
   */

void keyword_init(void)
{

  /* first define the keywords */
  strncpy(keywords[0].keyword, "extend", MAX_KEYWORD_LEN);
  keywords[0].token = 0;
  keywords[0].flags = 0;
  keywords[0].n_args = 0;


  strncpy(keywords[1].keyword, "waitfor", MAX_KEYWORD_LEN);
  keywords[1].token = 1;
  keywords[1].flags = 0;
  keywords[1].n_args = 2;
  keywords[1].v_args[0].flags = ARG_FLAG_VARIABLE | ARG_FLAG_MANDATORY;
  keywords[1].v_args[0].default_value.variable = NULL;
  keywords[1].v_args[1].flags = 0;
  keywords[1].v_args[1].default_value.fixed = 254;

  strncpy(keywords[2].keyword, "waitfor_HELLO", MAX_KEYWORD_LEN);
  keywords[2].token = 2;
  keywords[2].flags = 0;
  keywords[2].n_args = 1;
  keywords[2].v_args[0].flags = 0;
  keywords[2].v_args[0].default_value.fixed = 20;

  strncpy(keywords[3].keyword, "waitfor_sername", MAX_KEYWORD_LEN);
  keywords[3].token = 3;
  keywords[3].flags = 0;
  keywords[3].n_args = 1;
  keywords[3].v_args[0].flags = 0;
  keywords[3].v_args[0].default_value.fixed = 20;

  strncpy(keywords[4].keyword, "waitfor_ogin:", MAX_KEYWORD_LEN);
  keywords[4].token = 4;
  keywords[4].flags = 0;
  keywords[4].n_args = 1;
  keywords[4].v_args[0].flags = 0;
  keywords[4].v_args[0].default_value.fixed = 20;


  strncpy(keywords[5].keyword, "waitfor_assword:", MAX_KEYWORD_LEN);
  keywords[5].token = 5;
  keywords[5].flags = 0;
  keywords[5].n_args = 1;
  keywords[5].v_args[0].flags = 0;
  keywords[5].v_args[0].default_value.fixed = 20;

  strncpy(keywords[6].keyword, "waitfor_rotocol:", MAX_KEYWORD_LEN);
  keywords[6].token = 6;
  keywords[6].flags = 0;
  keywords[6].n_args = 1;
  keywords[6].v_args[0].flags = 0;
  keywords[6].v_args[0].default_value.fixed = 20;

  strncpy(keywords[7].keyword, "send_name", MAX_KEYWORD_LEN);
  keywords[7].token = 7;
  keywords[7].flags = 0;
  keywords[7].n_args = 0;

  strncpy(keywords[8].keyword, "send_passwd", MAX_KEYWORD_LEN);
  keywords[8].token = 8;
  keywords[8].flags = 0;
  keywords[8].n_args = 0;

  strncpy(keywords[9].keyword, "send_ppp", MAX_KEYWORD_LEN);
  keywords[9].token = 9;
  keywords[9].flags = 0;
  keywords[9].n_args = 0;

  strncpy(keywords[10].keyword, "send_slip", MAX_KEYWORD_LEN);
  keywords[10].token = 10;
  keywords[10].flags = 0;
  keywords[10].n_args = 0;

  strncpy(keywords[11].keyword, "send_CR", MAX_KEYWORD_LEN);
  keywords[11].token = 11;
  keywords[11].flags = 0;
  keywords[11].n_args = 0;


  strncpy(keywords[12].keyword, "send", MAX_KEYWORD_LEN);
  keywords[12].token = 12;
  keywords[12].flags = 0;
  keywords[12].n_args = 1;
  keywords[12].v_args[0].flags = ARG_FLAG_VARIABLE | ARG_FLAG_MANDATORY;

  strncpy(keywords[13].keyword, "pause", MAX_KEYWORD_LEN);
  keywords[13].token = 13;
  keywords[13].flags = 0;
  keywords[13].n_args = 1;
  keywords[13].v_args[0].flags = 0;
  keywords[13].v_args[0].default_value.fixed = 254;


  strncpy(keywords[14].keyword, "address", MAX_KEYWORD_LEN);
  keywords[14].token = 14;
  keywords[14].flags = 0;
  keywords[14].n_args = 0;

  strncpy(keywords[15].keyword, "start_ppp", MAX_KEYWORD_LEN);
  keywords[15].token =15;
  keywords[15].flags = 0;
  keywords[15].n_args = 0;


  strncpy(keywords[16].keyword, "start_slip", MAX_KEYWORD_LEN);
  keywords[16].token = 16;
  keywords[16].flags = 0;
  keywords[16].n_args = 0;

  strncpy(keywords[17].keyword, "domain", MAX_KEYWORD_LEN);
  keywords[17].token = 17;
  keywords[17].flags = 0;
  keywords[17].n_args = 1;
  keywords[17].v_args[0].flags = ARG_FLAG_VARIABLE | ARG_FLAG_MANDATORY;

  strncpy(keywords[18].keyword, "fetch", MAX_KEYWORD_LEN);
  keywords[18].token = 18;
  keywords[18].flags = 0;
  keywords[18].n_args = 1;
  keywords[18].v_args[0].flags = ARG_FLAG_VARIABLE | ARG_FLAG_MANDATORY;

  strncpy(keywords[19].keyword, "mount", MAX_KEYWORD_LEN);
  keywords[19].token = 19;
  keywords[19].flags = 0;
  keywords[19].n_args = 1;
  keywords[19].v_args[0].flags = ARG_FLAG_VARIABLE | ARG_FLAG_MANDATORY;

  num_keys = 20;

  /* then define the modifiers */

  strncpy(modifiers[0].modifier, "any", MAX_KEYWORD_LEN);
  modifiers[0].flag_modifier = LINK_ANY;
  modifiers[0].flag_mask = LINK_MASK;

  strncpy(modifiers[1].modifier, "ppp", MAX_KEYWORD_LEN);
  modifiers[1].flag_modifier = LINK_PPP;
  modifiers[1].flag_mask = LINK_MASK;

  strncpy(modifiers[2].modifier, "slip", MAX_KEYWORD_LEN);
  modifiers[2].flag_modifier = LINK_SLIP;
  modifiers[2].flag_mask = LINK_MASK;

  strncpy(modifiers[3].modifier, "static", MAX_KEYWORD_LEN);
  modifiers[3].flag_modifier = IP_STATIC;
  modifiers[3].flag_mask = IP_MASK;

  strncpy(modifiers[4].modifier, "dynamic", MAX_KEYWORD_LEN);
  modifiers[4].flag_modifier = IP_DYNAMIC;
  modifiers[4].flag_mask = IP_MASK;

  num_modifiers = 5;

  /* then define pre-processor keywords */

  strncpy(pp[0].keyword, "SCF_ID", MAX_KEYWORD_LEN);
  pp[0].select = NULL;
  pp[0].flags = PP_D_MANDATORY | PP_L_MANDATORY | PP_AUTO | PP_WORD | PP_SET;
  pp[0].dflt.word = 0x01;
  pp[0].offset = 0;

  /* etc */

  /* then define pre-processor enum symbols */

  /* etc */

}


