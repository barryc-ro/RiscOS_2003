/*
Program:	LZW.c  (sconvert.c)
Version:	0.10
Date   :	11 Oct 1994
Author :	Ant, for Machine Love
Purpose:	LZW-like asymmetrical compression/decompression library
*/
#include "kernel.h"
#include "swis.h"
#include <stdio.h>
#include "s_card.h"
#include "regss_scrp.h"
#include "module.h"
#define PROTOTYPES_INTERNAL
#include "LZW.h"
#include "DBUG.h"


int LZW_compress(unsigned char *source, unsigned char *destination, int data_length, int dest_max)
{
    unsigned char *dest_ptr, *data_end;
    unsigned char *exp_index, *x, *y, *rpt_src;
    int loop, *lp;
    int op_byte_count = 0;

    dest_ptr = destination;

    x = y = source;
    data_end = source + data_length;
    exp_index = explicit;

    while((x<data_end) && dest_max) {
	if (get_matches(x, source, posn) == NULL) {
	    *exp_index++ = *x++;
	    op_byte_count++;
	}
	else {
	    get_lengths(x, source, posn, lengths, data_end);
	    lp = longest(lengths);	/* ptr->size of longest common prefix */
	    op_byte_count += *lp;

	    rpt_src = (unsigned char *) *(lp-lengths+posn); /* get offset of longest repeat block */

	    if((x-rpt_src < 4) && *lp>3) {
		*exp_index++ = *x++;  /* if dst-src<4, and length>3, then do explicitly */
		op_byte_count++;
		// DBUG_PRINTF(DBUG_LVL_DEBUG, "Fudging short repeat block.\n");
	    }

	    else if (*lp <= 2)
	      for(loop=*lp;loop>0;loop--) { /* if length <2, do explicit */
	        *exp_index++ = *x++;
	      }
	    else {
		x += output_sequence(source, &dest_ptr, explicit, exp_index, posn, lengths, lp, &dest_max);
		exp_index = explicit; 			/* reset explicit string */
	    }
	}
    }

    if (exp_index != explicit) output_explicit(&dest_ptr, explicit, exp_index, &dest_max);

    return(dest_ptr - destination);     /* return number of LZW bytes written. */


} /* end main */



int get_matches(unsigned char *x, unsigned char *data, int *posn)
{
    unsigned char *loop;
    int *temp = posn;

    // DBUG_PRINTF(DBUG_LVL_DEBUG, "\nfinding matches");

    if (x == data) return(NULL);	/* if right at start, return no match */

    for(loop=data; loop<x; loop++)
      if (*loop == *x) {
        if(temp<(posn+LZW_BUFFSIZE_INT)) {
          *temp++ = (int)loop;
          // DBUG_PRINTF(DBUG_LVL_DEBUG,".");
        }
        else {
           DBUG_PRINTF(DBUG_LVL_ERROR, "Error: posn table exceeded.\n");
          break;
        }
      }
    // DBUG_PRINTF(DBUG_LVL_DEBUG,"\n");
    *temp = NULL;				/* mark end of table */
    return(temp-posn);			/* return number of matches found */
}

void get_lengths(unsigned char *x, unsigned char *data, int *posn, int *lengths, unsigned char *data_end)
{
    unsigned char *loop, *loop2;
    int *t1, *t2;

    // DBUG_PRINTF(DBUG_LVL_DEBUG, "calculating lengths...\n");

    t1 = posn;
    t2 = lengths;

    while(*t1 != NULL) {
	loop = x;
	loop2 = (unsigned char *)*t1++;
	*t2 = 0;
	while(*loop++ == *loop2++) {
	    if (loop>data_end) break;
	    (*t2)++; 	/* calculate length of prefix */
	}
	t2++;
    }

    if (t2==(lengths+LZW_BUFFSIZE_INT)) DBUG_PRINTF(DBUG_LVL_ERROR, "Error: length table exceeded.\n");

    *t2 = NULL;					/* mark end of table */
}



int *longest(int *lengths)
{
    int *loop = lengths;
    int max = *loop;
    int *max_p = loop;

    // DBUG_PRINTF(DBUG_LVL_DEBUG, "finding longest rpt block...\n");

    while(*loop != NULL) {			/* get ptr-> longest common prefix */
	if(*loop > max) {
	    max = *loop;
	    max_p = loop;
	}
	loop++;
	if(loop == (lengths+LZW_BUFFSIZE_INT)) {
	  DBUG_PRINTF(DBUG_LVL_ERROR, "Error: pointer to longest entry exceeds length table.\n");
	  return(loop);
	}
    }

    return(max_p);

}

int output_sequence(unsigned char *data, unsigned char **dest, unsigned char *explicit, unsigned char *exp_index,
		    int *posn, int *lengths, int *lp, int *dest_max)
{
    int offset, lsb, msb, length, orig_length;
    unsigned char *dest_ptr;


    // DBUG_PRINTF(DBUG_LVL_DEBUG, "outputting sequence...\n");

    if(explicit != exp_index) 			/* anything in the explicit string? */
	output_explicit(dest, explicit, exp_index, dest_max);	/* output */

    dest_ptr = *dest;                     /* get destination buffer pointer */

    offset = *((lp - lengths) + posn);	/* get start pos. of longest common prefix */
    offset -= (int)data;
    lsb = offset % 256;
    msb = offset / 256;
    orig_length = length = *lp;

    while(length>128) {

        if(*dest_max < 3) {
          *dest_max = 0;
          return(orig_length);
        }

	*dest_ptr++ = 255;	/* write full repeat block marker */
	*dest_ptr++ = lsb;
	*dest_ptr++ = msb;
	*dest_max -= 3;
	offset += 128;		/* move offset along 128 bytes */
	lsb = offset % 256;
	msb = offset / 256;	/* recalculate byte pair */
	length -= 128;		/* lop 128 off the sequence length */
    }

    if(*dest_max < 3) {
        *dest_max = 0;
        return(orig_length);
    }

    *dest_ptr++ = (length+127);
    *dest_ptr++ = lsb;
    *dest_ptr++ = msb;
    *dest_max -= 3;
    *posn = NULL;
    *lengths = NULL;
    *dest = dest_ptr;         /* write back destination buffer pointer */
    return(orig_length);
}


void output_explicit(unsigned char **dest, unsigned char *explicit, unsigned char *exp_index, int *dest_max)
{
    unsigned char *loop, *exp_ptr, *dest_ptr;
    int length = (exp_index - explicit);
    int loop2;

    // DBUG_PRINTF(DBUG_LVL_DEBUG, "outputting explicit...\n");

    dest_ptr = *dest;          /* get destination buffer pointer */

    exp_ptr = explicit;
    while(length>128) {
	*dest_ptr++ = 127;	/* write full explicit block marker */
	for(loop2=128; (*dest_max>0) && (loop2>0); loop2--, (*dest_max)--) *dest_ptr++ = *exp_ptr++;	/* write 128 bytes of data */
	length -= 128;		/* lop 128 off the length */
    }

    length -= 1;
    *dest_ptr++ = length;
    for(loop=exp_ptr;(loop<exp_index) && (*dest_max>0);loop++, (*dest_max)--) *dest_ptr++ = *loop;

    *dest = dest_ptr;          /* write back destination buffer pointer */

}




/* uncompresses a compressed dial-up script into a separate buffer */
int LZW_decompress(unsigned char *src, int src_bytes, unsigned char *dest, int dest_max)
{ /* THIS CODE IS COPYRIGHT (C) 1994 ANT SKELTON - USED WITH PERMISSION */
unsigned char *data_ptr, *index;
unsigned char *buffer_ptr;
int length, offset, loop;
int bp_hi, bp_lo;

data_ptr = dest;
buffer_ptr = src;

// printf("src ptr: 0x%x first byte: 0x%x\n", src, *src);
while(buffer_ptr<(src+src_bytes)) {
	if (*buffer_ptr<128) {	/* decode explicit block */
		length = (*buffer_ptr++)+1;

		dest_max -= length; /* check we've got enough room */
		if(dest_max <0) return(-1);

		for(loop=0;loop<length;loop++) *data_ptr++ = *buffer_ptr++;
	}
	else {			/* decode repeat block */
		length = *buffer_ptr++ - 127;

		dest_max -= length; /* check we've got enough room */
		if(dest_max <0) return(-1);

		bp_lo = (int)*(buffer_ptr++);
		bp_hi = (int)*(buffer_ptr++);
		offset = bp_lo + bp_hi * 256;
		index = dest + offset;
		for(loop=0; loop<length; loop++) *data_ptr++ = *index++;
	}
}

return((int)(data_ptr-dest));
}

int LZW_decomp_size(unsigned char *src, int src_bytes)
{
unsigned char *buffer_ptr;
int length;
int decomp_bytes = 0;

buffer_ptr = src;

while(buffer_ptr<(src+src_bytes)) {
	if (*buffer_ptr<128) {	/* decode explicit block */
		length = (*buffer_ptr++)+1;

		decomp_bytes += length;
		buffer_ptr += length;

	}
	else {			/* decode repeat block */
		length = *buffer_ptr++ - 127;

		decomp_bytes += length;
		buffer_ptr += 2;
	}
}

return(decomp_bytes);
}



