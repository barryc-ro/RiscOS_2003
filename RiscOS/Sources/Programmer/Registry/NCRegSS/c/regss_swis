/* c code for RegistrySupport SWI calls */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "ispc.h"
#include "s_card.h"
#include "reg_scbb.h"
#include "regss_scrp.h"
#include "regss_defs.h"
#include "module.h"
#define PROTOTYPES_INTERNAL   /* declare our header file as local */
#include "regss_swis.h"
#include "LZW.h"
#include "dynalloc.h"
#include "scinter.h"
#include "DBUG.h"

extern int asm_xor(char *, int);

static char regss_version[] = REGISTRY_SUPPORT_VERSION;

int registryss_nullswi(_kernel_swi_regs *r)  /* the "does nothing" swi */
{
    return (0);
}

/* registry_sc_init: called by registry when a new boot block is loaded

   On entry:

     r0 -> boot data block
     r1 = selector [1 = net, 2 = s/c]
     r2 -> fresco data block, or NULL
     r3 = size of fresco data block, or 0

     additionally, if

     r4 = 0xbeefcafe

     then

     r5 = system_flags[0]
     r6 -> isp_script

   On exit:

*/

int registryss_sc_init(_kernel_swi_regs *r) /* decode script block */
{
  SC_BOOT_BLOCK *scbb_ptr;
  unsigned int scbb_ip_scheme;
  int bytes;
  SCRIPT *script_ptr;

  DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: entered\n");

   fresco_data_ptr = (unsigned char *)(r->r[2]);
   if(fresco_data_ptr) {
     fresco_stat_size = r->r[3];
     fresco_data_comp = *(int *)fresco_data_ptr;
     fresco_data_decomp = LZW_decomp_size(fresco_data_ptr + 4, fresco_data_comp);
     DBUG_PRINTF(DBUG_LVL_DEBUG, "NCRegistrySupport: Read NCFresco data comp: %d decomp: %d\n", fresco_data_comp, fresco_data_decomp);
   }

   if(r->r[1] == SELECT_SC_BB) {


    scbb_ptr = (SC_BOOT_BLOCK *)r->r[0];

    if(r->r[4] == 0xbeefcafe) {
        DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: version 2 bootblock special case detected\n");
        scbb_ip_scheme = r->r[5];
    } else {
        scbb_ip_scheme = (scbb_ptr->SYSTEM_FLAGS[0]) /*& IP_SCHEME_MASK */;
    }

    sc_slip = sc_ppp = sc_static = sc_dynamic = 0;

    // printf("IP_SCHEME: %d\n", scbb_ip_scheme);

    switch(scbb_ip_scheme) {

      case IP_SCHEME_SLIP_STATIC:
      	 sc_slip = 1;
      	 sc_static = 1;
      	 // printf("IP_SCHEME_SLIP_STATIC\n");
      	 break;

      case IP_SCHEME_SLIP_DYNAMIC:
      	 sc_slip = 1;
      	 sc_dynamic = 1;
      	 // printf("IP_SCHEME_SLIP_DYNAMIC\n");
      	 break;

      case IP_SCHEME_PPP_STATIC:
      	 sc_ppp = 1;
      	 sc_static = 1;
      	 // printf("IP_SCHEME_PPP_STATIC\n");
      	 break;

      case IP_SCHEME_PPP_DYNAMIC:
      	 sc_ppp = 1;
      	 sc_dynamic = 1;
      	 // printf("IP_SCHEME_PPP_DYNAMIC\n");
      	 break;

      case IP_SCHEME_ETHER_STATIC:
      case IP_SCHEME_ETHER_DYNAMIC:
      default:
         break;
    }
   } /* endif if SEL_SC_BB */
   else if(r->r[1] == SELECT_NET_BB) {
    scbb_ptr = (SC_BOOT_BLOCK *)r->r[0];
    sc_slip = sc_ppp = sc_static = sc_dynamic = 0;
   }
   else {
     r->r[0] = -9;
     return(0);
   }

  if(r->r[4] == 0xbeefcafe) {
      /* blah blah */
      script_ptr = (SCRIPT *)(r->r[6]);
      if(script_ptr->flags & SCRIPT_FLAG_COMPRESSED) {
          DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: script is compressed\n");
          DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: script flags: 0x%x len: %d\n", script_ptr->flags, script_ptr->length);
          DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: 0x%x 0x%x 0x%x 0x%x\n",
          			     script_ptr->data[0], script_ptr->data[1], script_ptr->data[2], script_ptr->data[3]);

        if((bytes = LZW_decompress(script_ptr->data,
        	  script_ptr->length, cmp_buff, MAX_BUFFER))<0) {
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "Decompression error!\n");
        	    r->r[0] = -10;
        	    return(0);
        	  }
        DBUG_PRINTF(DBUG_LVL_DIAG, "Decompressed to %d bytes (expected %d)\n", bytes, script_ptr->length);
      } else {
        DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_sc_init: script is not compressed\n");
        memcpy(cmp_buff, script_ptr->data, script_ptr->length);
        bytes = script_ptr->length;
      }
      DBUG_PRINTF(DBUG_LVL_DIAG, "Parsing script...\n");
      //parse_script(scbb_ptr, cmp_buff, bytes, r->r[1]);
      parse_script(cmp_buff, bytes, r->r[1]);

  } else {
      if(scbb_ptr->ISP_SCRIPT.flags & SCRIPT_FLAG_COMPRESSED) {
        if((bytes = LZW_decompress(scbb_ptr->ISP_SCRIPT.data,
        	  scbb_ptr->ISP_SCRIPT.length, cmp_buff, MAX_BUFFER))<0) {
    	    DBUG_PRINTF(DBUG_LVL_ERROR, "Decompression error!\n");
        	    r->r[0] = -10;
        	    return(0);
        	  }
        DBUG_PRINTF(DBUG_LVL_DIAG, "Decompressed to %d bytes (expected %d)\n", bytes, scbb_ptr->ISP_SCRIPT.length);
      } else {
        memcpy(cmp_buff, scbb_ptr->ISP_SCRIPT.data, scbb_ptr->ISP_SCRIPT.length);
        bytes = scbb_ptr->ISP_SCRIPT.length;
      }
      DBUG_PRINTF(DBUG_LVL_DIAG, "Parsing script...\n");
      // parse_script(scbb_ptr, cmp_buff, bytes, r->r[1]);
      parse_script(cmp_buff, bytes, r->r[1]);
  }

  return(0);

}

/* NC Registry Script Support - decode special tag

   On entry: r0 = special tag number
             r1 = ptr to buffer
             r2 = size of buffer, or 0 for enquiry
             r3 = selector [1=net, 2 = s/c]
             r4 = status of relevant block (net_status or sc_status)
             r5 -> to relevant block

   On exit: r0 = size of data, or -N for error
            r1 = src selector
*/

int registryss_special(_kernel_swi_regs *r) /* decode special tag */
{
  int t_size, s_size, a_size;
  SCRIPT_LIST *SL;
  SC_BOOT_BLOCK *scbb_ptr;
  int arg_base;

  unsigned char *login_id_ptr, *login_secret_ptr;
  unsigned int login_id_len, login_secret_len;

  //printf("Registry support special tag called with tag:%d\n", r->r[0]);


  switch(r->r[0]) {
    case REGSS_ISP_DOMAIN:
    	 t_size = strlen(domain_ptr);
    	 // printf("Looking up ISP_DOMAIN, length %d\n", t_size);
    	 // printf("Value is: %s\n", domain_ptr);
    	 if(r->r[2] > t_size) strcpy((char *)(r->r[1]), domain_ptr);
    	 r->r[0] = t_size;
    	 break;

    case REGSS_NFS_MOUNT:
    	 t_size = strlen(mount_ptr);
    	 if(r->r[2] > t_size) strcpy((char *)(r->r[1]), mount_ptr);
    	 r->r[0] = t_size;
    	 break;

    case REGSS_URL_INIT:
    	 t_size = strlen(fetch_ptr);
    	 if(r->r[2] > t_size) strcpy((char *)(r->r[1]), fetch_ptr);
    	 r->r[0] = t_size;
    	 break;

    case REGSS_SEND_EXPECT:
         if(r->r[6] == 0xbeefcafe) {
             login_id_ptr = (unsigned char *)(r->r[7]);
             login_secret_ptr = (unsigned char *)(r->r[8]);
             login_id_len = (r->r[5])>>16;
             login_secret_len = (r->r[5] & 0xffff);
	     DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_special: bbV2 special case detected\n");
	     DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_special: id: %s secret: %s\n", login_id_ptr, login_secret_ptr);
	     DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_special: id_len: %d secret_len: %d (0x%x)\n", login_id_len, login_secret_len, r->r[9]);

    	     s_size = (script_ptr - script_base) * sizeof(SCRIPT_LIST);
    	     a_size = script_arg_ptr - script_arg_base;
    	     t_size = s_size + a_size + login_id_len + login_secret_len;

         } else {

    	     scbb_ptr = (SC_BOOT_BLOCK *)(r->r[5]);
    	     s_size = (script_ptr - script_base) * sizeof(SCRIPT_LIST);
    	     a_size = script_arg_ptr - script_arg_base;
    	     t_size = s_size + a_size + (STRING_SIZE * 2);
    	 }

    	 r->r[0] = t_size;
    	 if(r->r[2] < t_size) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "registryss_special: insufficient buffer space to unmunge script\n");
    	     break;
    	 }

    	 /* copy SCRIPT_LIST to return buffer */


    	 memcpy((void *)(r->r[1]), script_base, s_size);

    	 if(r->r[6] == 0xbeefcafe) {
    	     memcpy((void *)(r->r[1] + s_size), login_id_ptr, login_id_len);
    	     memcpy((void *)(r->r[1] + s_size + login_id_len), login_secret_ptr, login_secret_len);
    	     memcpy((void *)(r->r[1] + s_size + login_id_len + login_secret_len), script_arg_base, a_size);
    	 } else {


    	     memcpy((void *)(r->r[1] + s_size), scbb_ptr->LOGIN_ID, STRING_SIZE);
    	     memcpy((void *)(r->r[1] + s_size + STRING_SIZE), scbb_ptr->LOGIN_SECRET, STRING_SIZE);
    	     memcpy((void *)(r->r[1] + s_size + STRING_SIZE + STRING_SIZE), script_arg_base, a_size);
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: special symbol SCRIPT_SYMBOL_ID: \"%s\"\n", scbb_ptr->LOGIN_ID);
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: special symbol SCRIPT_SYMBOL_SECRET: \"%s\"\n", scbb_ptr->LOGIN_SECRET);
    	 }

    	 /* walk the SCRIPT_LIST and relocate ptrs */

    	 SL = (SCRIPT_LIST *)(r->r[1]);

    	 if(r->r[6] == 0xbeefcafe) {
    	     arg_base = r->r[1] + s_size + login_id_len + login_secret_len;
    	 } else {
    	     arg_base = r->r[1] + s_size + (STRING_SIZE * 2);

	     DBUG_PRINTF(DBUG_LVL_DIAG, "script size: %d   arg size: %d  total size: %d\n", s_size, a_size, t_size);
	     DBUG_PRINTF(DBUG_LVL_DIAG, "script: 0x%x new script base: 0x%x\n", script_base, r->r[1]);
	     DBUG_PRINTF(DBUG_LVL_DIAG, "arglist: 0x%x   new arg base: 0x%x\n", script_arg_base, r->r[1] + s_size + (STRING_SIZE *2));
	 }

    	 while(SL != NULL) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: string: 0x%x next: 0x%x\n", SL->string, SL->next);
    	   if((unsigned int)SL->string == SCRIPT_SYMBOL_ID) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: relocated special symbol ID\n");
    	     SL->string = (char *)(r->r[1] + s_size);
    	   }
    	   else if((unsigned int)SL->string == SCRIPT_SYMBOL_SECRET) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "ncrss: relocated special symbol SECRET\n");

    	     if(r->r[6] == 0xbeefcafe) {
    	         SL->string = (char *)(r->r[1] + s_size + login_id_len);
    	     } else {
    	         SL->string = (char *)(r->r[1] + s_size + STRING_SIZE);
    	     }
           }
    	   else if(SL->string != NULL) {
    	     DBUG_PRINTF(DBUG_LVL_DIAG, "Relocating string \"%s\" from 0x%x to 0x%x\n", SL->string,
    	   		      SL->string,
    	   		      SL->string - (int)script_arg_base + r->r[1] + s_size);

    	     SL->string = SL->string - (int)script_arg_base + arg_base;
    	   }

    	   if(SL->next != NULL) {
    	      DBUG_PRINTF(DBUG_LVL_DIAG, "Relocating 'next' ptr from 0x%x to 0x%x\n", SL->next,
    	   		      (int)SL->next - (int)script_base + r->r[1]);

    	     SL->next = (SCRIPT_LIST *)((int)SL->next - (int)script_base + r->r[1]);
    	   }
    	   SL = SL->next;
    	 }

    	 break;

    case REGSS_NCF_INFO:
         if(r->r[2] > fresco_data_decomp)
            LZW_decompress((unsigned char *)(fresco_data_ptr + 4), fresco_data_comp, (unsigned char *)(r->r[1]), r->r[2]);
         r->r[0] = fresco_data_decomp;
         break;

    case REGSS_NCD_INFO:
         strncpy((char *)(r->r[1]), regss_version, r->r[2]);
         r->r[0] = 0;
         break;

    default:
         r->r[0] = NULL;
         r->r[1] = -1; /* no such tag */
         break;
  }
  return(0);
}

/* NC Registry Script Support - write special tag

   On entry: r0 = special tag number
             r1 = ptr to buffer
             r2 = size of data in buffer
             r3 = status of relevant block (net_status or sc_status)
             r4 -> to relevant block
             r5 -> authorization key
             r6 = num. authorization bytes

   On exit: r0 = size of data, or -N for error
*/

int registryss_write(_kernel_swi_regs *r) /* decode special tag */
{
  int comp_bytes, bytes;
  _kernel_swi_regs t;
  char filename[MAX_FILEPATH];
  char *img_ptr;
  char *img_fname;
  FILE *fp;

  switch(r->r[0]) {

    case REGSS_NCF_INFO:

         DBUG_PRINTF(DBUG_LVL_DEBUG, "NCRegistry Support: starting hotlist write...\n");

     	 memset(lzw_out, 0, LZW_BUFFSIZE);

     	 DBUG_PRINTF(DBUG_LVL_DEBUG, "NC Registry Support: starting compression...\n");
         comp_bytes = LZW_compress(  (unsigned char *)(r->r[1]), lzw_out+4, r->r[2], LZW_BUFFSIZE-4);
         DBUG_PRINTF(DBUG_LVL_DEBUG, "NC Registry Support: done the compression\n");
         if(comp_bytes > (fresco_stat_size - 4)) {
           DBUG_PRINTF(DBUG_LVL_DEBUG, "NCRegistry Support: compressed data doesn't fit!\n");
           r->r[0] = -3; /* value too big */
           break;
         }

         *(int *)lzw_out = comp_bytes;
         memcpy(fresco_data_ptr, lzw_out, comp_bytes + 4);
         fresco_data_decomp = r->r[2];
         fresco_data_comp = comp_bytes;
         fresco_data_decomp = r->r[2];
         DBUG_PRINTF(DBUG_LVL_DEBUG, "NCRegistry Support: wrote new hotlist as %d bytes (%d bytes original)\n",
         			     fresco_data_comp, fresco_data_decomp);

	 strncpy(filename, FRESCO_SC_FILENAME, MAX_FILEPATH);
	 t.r[0] = 0; /* do s/c filename validation */
         t.r[1] = (int)filename;
         t.r[2] = 0;
         t.r[3] = (int)fresco_data_ptr;
         t.r[4] = comp_bytes + 4;
         t.r[5] = r->r[5];
         t.r[6] = r->r[6];
         _kernel_swi(SCInterface_Write, &t, &t);

         r->r[0] = 0;
         break;





    case REGSS_NCD_INFO:

	 img_fname = (char *)(r->r[1]);
	 img_ptr = img_fname + 80;

         DBUG_PRINTF(DBUG_LVL_DEBUG, "got symbols: ncinfox: 0x%x ncinfopx: 0x%x ncinfox_length: %d ncinfopx_length: %d\n",
         			     (int)ncinfox, (int)ncinfopx, ncinfox_length, ncinfopx_length);
         r->r[0] = -2; /* return 'tag not writeable' */

         if(r->r[2] < (ncinfopx_length + 80)) {
           *img_fname = 0;
           break;
         }

         memcpy(lzw_out, ncinfotx, ncinfotx_length);       /* copy index table to head of buffer */
	 asm_xor((char *)(lzw_out+4), ncinfotx_length-4);  /* unscramble it */
	 comp_bytes = *(int *)lzw_out;
	 bytes = LZW_decompress((unsigned char *)(lzw_out+4), comp_bytes, (unsigned char *)img_fname, 80); /* decompress it */


	 memcpy(img_ptr, ncinfopx, ncinfopx_length);   /* get the image segment */
	 asm_xor(img_ptr, (ncinfopx_length + 3) & ~3); /* unscramble it */

	 if((fp=fopen(img_fname, "w"))==NULL) {        /* write it */
	   *img_fname = 0;
	   break;
	 }

	 fwrite(img_ptr, 1, ncinfopx_length, fp);
	 fclose(fp);

	 t.r[0] = 18;
	 t.r[1] = (int)img_fname;
	 t.r[2] = 0xc85;
	 _kernel_swi(XOS_Bit | OS_File, &t, &t);

	 img_fname += (strlen(img_fname)+1);

	 if((fp=fopen(img_fname, "w"))==NULL) {
	   *img_fname = 0;
	   break;
	 }



	 memcpy(lzw_out, ncinfox, ncinfox_length);
	 asm_xor((char *)(lzw_out+4), ncinfox_length-4);
	 comp_bytes = *(int *)lzw_out;
	 bytes = LZW_decompress((unsigned char *)(lzw_out+4), comp_bytes, (unsigned char *)img_ptr, ncinfopx_length+4);

	 fwrite(img_ptr, 1, bytes, fp);
	 fclose(fp);

	 t.r[0] = 18;
	 t.r[1] = (int)img_fname;
	 t.r[2] = 0xfaf;
	 _kernel_swi(XOS_Bit | OS_File, &t, &t);

	 img_fname += (strlen(img_fname)+1);
	 strcpy((char *)(r->r[1]), img_fname);

         break;

    default:
       r->r[0] = -9; /* special tag not understood */
       break;
  }
  return(0);
}


