// header file for ISPC.H

/* Begin-Prologue */
#ifndef ISPC_H
#define ISPC_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#define MAX_V_ARGS                 4
#define MAX_KEY_DEFS               32
#define MAX_MODIFIERS              8
#define MAX_ELEMENTS               6
#define MAX_KEYWORD_LEN            40
#define MAX_FILENAME               128
#define MAX_BUFFER                 512

#define MAX_SMARTCARD              256

#define TOKEN_DELIMITERS           " \t(),;\""
#define DUST_VERSION               "0.02"
#define UNDUST_VERSION             "0.02"

#define LINK_MASK                  0xc0
#define LINK_ANY                   0x0
#define LINK_PPP                   0x40
#define LINK_SLIP                  0x80

#define IP_MASK                    0x2
#define IP_STATIC                  0x0
#define IP_DYNAMIC                 0x20

#define SCRIPT_FLAG_COMPRESSED     0x80
#define SCRIPT_FLAG_LEXTEND        0x40  /* add 256 to script length */
#define SCRIPT_FLAG_VERSION        0x1

#ifndef _SCRIPT_V
typedef struct {
  char _version_s[7];
  unsigned char _version_n;
} _SCRIPT_V;

#ifdef PROTOTYPES_INTERNAL
_SCRIPT_V _scriptV[2] = {"0.00", 0, "0.01", 1};
#endif
#endif

/* define references to command arguments */

#define ARG_FLAG_VARIABLE          0x1    /* argument is variable length */
#define ARG_FLAG_MANDATORY         0x2    /* argument is compulsory */


#define ARG_VARIABLE(x) (x) & ARG_FLAG_VARIABLE
#define ARG_FIXED(x) !((x) & ARG_FLAG_VARIABLE)
#define ARG_MANDATORY(x) (x) & ARG_FLAG_MANDATORY
#define ARG_OPTIONAL(x) !((x) & ARG_FLAG_MANDATORY)

#define KEY_FLAG_EXTEND           0x1     /* keyword is part of extended command set */
#define KEY_FLAG_FEXTEND          0x2     /* keyword incorporates extended flag word */

#ifndef V_ARG
typedef struct {
  int flags;

  union def_val {
    char *variable;
    unsigned char fixed;
  } default_value;
} V_ARG;

typedef struct {
  char modifier[MAX_KEYWORD_LEN];
  int flag_modifier;
  int flag_mask;
} MODIFIER;

typedef struct {
  char keyword[MAX_KEYWORD_LEN];
  int token;
  int flags;
  int n_args;
  V_ARG v_args[MAX_V_ARGS];
} KEY_DEF;
#endif

/* token preprocessing stuff */

#define PP_TYPE_HEX         0
#define PP_TYPE_STRING      1
#define PP_TYPE_HOST        2
#define PP_TYPE_ENUM        3

#define PP_AUTO        8
#define PP_D_MANDATORY   0x10
#define PP_L_MANDATORY   0x20
#define PP_WORD        0x40
#define PP_BYTE        0x80
#define PP_SET         0x100
#define PP_OR          0x200

#define MAX_PP_ENUMS   10
#define MAX_PP_KEYS    10

#ifndef PP_ENUM
typedef struct {
  char keyword[MAX_KEYWORD_LEN];
  int value;
} PP_ENUM;

typedef struct {
  char keyword[MAX_KEYWORD_LEN];
  PP_ENUM *select;
  unsigned int flags;
  union {
   unsigned char *string;
   unsigned int word;
  } dflt;
  unsigned int offset;
} PP;
#endif

/* don't want big statics for RISCOS - probably in a module */

#ifdef RISCOS

DECLARE KEY_DEF *keywords;
DECLARE MODIFIER *modifiers;
DECLARE PP_ENUM *pp_enums;
DECLARE PP *pp;
DECLARE unsigned char *out_buff;
DECLARE unsigned char *cmp_buff;
DECLARE unsigned char *out_ptr;
DECLARE unsigned char *cmp_ptr;
DECLARE int num_keys, num_modifiers;
DECLARE int out_bytes INIT(0);
DECLARE int cmp_bytes INIT(0);
DECLARE int isp_script_flags INIT(0);

#else

/* not bothered on a Unix box - VM will handle it */
KEY_DEF keywords[MAX_KEY_DEFS];
MODIFIER modifiers[MAX_MODIFIERS];
PP_ENUM pp_enums[MAX_PP_ENUMS];
PP pp[MAX_PP_KEYS];
unsigned char out_buff[MAX_BUFFER];
unsigned char cmp_buff[MAX_BUFFER];
unsigned char *out_ptr = out_buff, *cmp_ptr = cmp_buff;

#endif

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

