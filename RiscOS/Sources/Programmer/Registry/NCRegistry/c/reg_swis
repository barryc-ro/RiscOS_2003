/* c code for Registry SWI calls */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"


#include "module.h"
#define PROTOTYPES_INTERNAL   /* declare our header file as local */
#include "reg_swis.h"
#include "reg_tags.h"
#include "reg_scbb.h"
#include "reg_status.h"
#include "enum_ddi.h"
#include "machine.h"
#include "reg_spprt.h"
#include "reg_auth.h"
#include "DBUG.H"

#include "scinter.h"


int registry_nullswi(_kernel_swi_regs *r)  /* the "does nothing" swi */
{
    return (0);
}


int registry_enumerate_network_drivers(_kernel_swi_regs *r)
{
  if(enum_dci4_dibs()<0)  r->r[0] = -1;
  else r->r[0] = (int)diblist_copy;
  return(0);
}

int registry_enumerate_smartcard_blocks(_kernel_swi_regs *r)
{
  return(0);
}

/* registry_enquiry():
   Lookup a tag reference in the registry.
   On entry:
      r0 = ptr to tag string (case unimportant)
      r1 = ptr to buffer for returned result
      r2 = size of buffer (or 0 to return size of tag value)
      r3 = SCBB selector  TEST TEST TEST - INSECURE SMARTCARD OPERATION!
   On exit:
      r0 = size of returned data, or error
      r1 = source for data tag (selector)
      r2 = preserved

The requested tag is returned to the buffer if there is sufficient room for it
*/

int registry_enquiry(_kernel_swi_regs *r)
{
  REG_TAGS *rt;
  int t, s_swi;
  char *src, *dst;
  _kernel_swi_regs tr;
  unsigned int tmp;

  dst = (char *)r->r[1];

  tmp = BB_STATUS_INSERTED | BB_STATUS_SC_VALID | BB_STATUS_BB_VALID;
  if(sc_status & tmp != tmp) {
    r->r[0] = -5; /* invalid smartcard */
    return(0);
  }

  if((rt=locate_tag((char *)r->r[0])) == NULL) {
    r->r[0] = -1; /* no such tag */
    return(0);
  }

  if(rt->flags & REG_TAGS_SPECIAL) {
    s_swi = find_support_swibase(rt->shift);
    if(s_swi <0) {
      r->r[0] = -2; /* no support module for requested special tag */
      return(0);
    }
    s_swi += REGISTRY_SUPPORT_READSWI;
    s_swi |= XOS_Bit;
    // printf("SPECIAL_TAG: calling support module SWI 0x%x with tag: %d.\n", s_swi, rt->mask);
    tr.r[0] = rt->mask;
    tr.r[1] = r->r[1];
    tr.r[2] = r->r[2];

    /* allow special tag to come fom net block if loaded, and if allowed */
    if((rt->flags & REG_TAGS_OVERRIDE) && (net_status & BB_STATUS_BB_VALID)) {
      tr.r[3] = SELECT_NET_BB;
      tr.r[4] = net_status;
      tr.r[5] = (int)&net_bb;
    }
    else if(sc_status & BB_STATUS_BB_VALID) {
      tr.r[3] = SELECT_SC_BB;
      tr.r[4] = sc_status;
      tr.r[5] = (int)&sc_bb;
    }
    else {
      r->r[0] = -3; /* no tag info available */
      return(0);
    }

    _kernel_swi(s_swi, &tr, &tr); /* call Support SWI _SpecialTag */
    r->r[0] = tr.r[0];
    r->r[1] = tr.r[1];
    r->r[2] = tr.r[2];
    return(0);
  }


  r->r[0] = rt->length;

  if(r->r[2] >= rt->length) {
    if(rt->flags & REG_TAGS_OVERRIDE) {
      if(!isblanktag(&net_bb, rt)) {
        r->r[1] = SELECT_NET_BB;
        if((rt->length == 4) && ((rt->mask != 0) || (rt->shift != 0))) { /* varibits */
          t = reduce_tag(&net_bb, rt);
          *(int *)dst = t;
          return(0);
        }
        else { /* not bitmasked field */
          // printf("Copying net block\n");
          src = (char *)(&net_bb) + (rt->offset);
          memcpy((void *)dst, (void *)src, rt->length);
          // printf("Done\n");

          return(0);
        }
      } /* endif net_bb field present */
    } /* endif override flag set */

       r->r[1] = SELECT_SC_BB;
       if((rt->length == 4) && ((rt->mask != 0) || (rt->shift != 0))) { /* varibits */
          t = reduce_tag(&sc_bb, rt);
          *(int *)dst = t;
          return(0);
        } /* not bitmasked field */
        else {
          // printf("Copying smartcard block\n");
          src = (char *)(&sc_bb) + (rt->offset);
          // printf("Copying %d bytes from 0x%x (base: 0x%x offset: %d) to 0x%x\n", rt->length, src, &sc_bb, rt->offset, dst);
          memcpy((void *)dst, (void *)src, rt->length);
          // printf("Done\n");

          return(0);
        }
  } /* endif copying field to buffer */


   return(0);

}

/* registry_load_scbb():
   Load a smartcard boot block into the registry - intended for network
   boot block area only, but sc area allowed for testing - INSECURE SMARTCARD OPERATION!
   On entry:
      r0 = fully qualified filename of SCBB
      r1 = boot block selector

   On exit:
      r0 = 0 for success, or -N for error
*/

int registry_load_scbb(_kernel_swi_regs *r)
{
  _kernel_swi_regs t;

  r->r[0] = load_scbb(r->r[1], (char *)r->r[0]); /* sets _INSERTED status bit, & does svc call */

  switch(r->r[1]) {

  case SELECT_NET_BB:
    if(r->r[0] < 0) { /* load failed */
      clr_status_bits(SELECT_NET_STATUS, BB_STATUS_SC_VALID);
    }
    else { /* load successful */
      set_status_bits(SELECT_NET_STATUS, BB_STATUS_SC_VALID);
      t.r[0] = (int)&net_bb;
      t.r[1] = SELECT_NET_BB;
      support_notify(&t, &t);

      if(t.r[0] > 0) set_status_bits(SELECT_NET_STATUS, BB_STATUS_BB_VALID);
      else clr_status_bits(SELECT_NET_STATUS, BB_STATUS_BB_VALID);
    }
    status_service_call();
    break;

  case SELECT_SC_BB:
    if(r->r[0] < 0) { /* load failed */
      clr_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
    }
    else {  /* load successful */
      set_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
      t.r[0] = (int)&sc_bb;
      t.r[1] = SELECT_SC_BB;
      support_notify(&t, &t);
      /* _kernel_swi(XOS_Bit | 0x4d3c0, &t, &t);  Registry support init */
      if(t.r[0] > 0) set_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID);
      else clr_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID);
    }
    status_service_call();
    break;

  default:
    r->r[0] = -1;
    return(0);
  }

   return(0);
}

/* registry_status(): read registry status

   On entry:
   r0 = non zero to clear the status delta registers

   On exit:
   r0 = smartcard status
   r1 = network status
   r2 = smartcard delta
   r3 = smartcard delta
*/
int registry_status(_kernel_swi_regs *r)
{

  r->r[0] = sc_status;
  r->r[1] = net_status;
  r->r[2] = sc_delta_swi;
  r->r[3] = net_delta_swi;

  sc_delta_swi = net_delta_swi = 0;
  status_swi_count++;

  return(0);
}

/* registry_write():
   Write a tag reference in the registry, write thru to smartcard
   On entry:
      r0 = ptr to tag string (case unimportant)
      r1 = ptr to buffer containing new value
      r2 = size of new value

   On exit:
      r0 = 0 for success, or error
      r1 = source for data tag (selector)
      r2 = preserved

The requested tag is returned to the buffer if there is sufficient room for it
*/

int registry_write(_kernel_swi_regs *r)
{
  REG_TAGS *rt;
  int tmp, tmp2;
  char *dst;
  char *src;
  int bytes;
  unsigned int support_swi;
  _kernel_swi_regs t;

  tmp = BB_STATUS_INSERTED | BB_STATUS_SC_VALID | BB_STATUS_BB_VALID;
  DBUG_PRINTF(DBUG_LVL_DEBUG, "mask: 0x%x status: 0x%x op: 0x%x\n", tmp, sc_status, (tmp & sc_status));

  if((sc_status & tmp) != tmp) {
    r->r[0] = -5; /* invalid smartcard */
    return(0);
  }

  /*-------------------------WRITE-THRU------------------------------*/

  if((r->r[0] == 0) && (r->r[1] == 0) && (r->r[2] == 0)) { /* WRITE THRU TO SMARTCARD */

    if(!scbb_changed) {
      r->r[0] = -6; /* nothing has changed */
      return(0);
    }

    if(registry_state != State_CardInserted) {
      r->r[0] = -7; /* registry busy */
      return(0);
    }

    registry_trans = Trans_WriteCard; /* fake a transition */
    setcallback(); /* fire up the state machine */
    r->r[0] = 0; /* success */
    return(0);
  }

  /*---------------------END-WRITE-THRU------------------------------*/


  if((rt=locate_tag((char *)r->r[0])) == NULL) {
    r->r[0] = -1; /* no such tag */
    return(0);
  }

  if((rt->flags & REG_TAGS_UPDATE)==0) { /* check field is updateable */
    r->r[0] = -2; /* tag not updateable */
    return(0);
  }

/* special tag: check for support module
                this goes before 'bootblock writeable' test because support module
                may not necessarily be using the boot block (eg could be a hotlist)
*/
  if(rt->flags & REG_TAGS_SPECIAL) {
    support_swi = find_support_swibase((unsigned int)(rt->shift));
    if(support_swi == 0) {
      r->r[0] = -8;
      return(0);
    }
    /* call support SWI */
    support_swi += REGISTRY_SUPPORT_WRITESWI;
    support_swi |= XOS_Bit;
    t.r[0] = rt->mask; /* special tag id */
    t.r[1] = r->r[1]; /* ptr. to buff */
    t.r[2] = r->r[2]; /* size of new value */
    t.r[3] = sc_status; /* current s/c status */
    t.r[4] = (unsigned int)&sc_bb; /* ptr. to s/c boot block */
    t.r[5] = (unsigned int)authblock.authblock_key; /* ptr to authorization key */
    t.r[6] = authblock.authblock_bytes; /* num. auth. bytes */
    _kernel_swi(support_swi, &t, &t);
    r->r[0] = t.r[0];

    return(0);
  }

  if((sc_bb.SYSTEM_FLAGS[2] & WRITE_ENABLE)==0) {
    r->r[0] = -4; /* bootblock not writeable */
    return(0);
  }




  if(r->r[2] > rt->length) {
    r->r[0] = -3; /* value too big */
    return(0);
  }


  if(rt->mask || rt->shift) { /* it's a single bit quantity */
    tmp = *(int *)(r->r[1]);
    tmp <<= rt->shift; /* shift it up */
    tmp &= rt->mask; /* apply mask */
    tmp2 = (int)(*(((char *)&sc_bb) + rt->offset)); /* get original value */
    if(tmp) tmp2 |= tmp; /* set bit */
    else tmp2 &= ~tmp; /* clr bit */
    src = (char *)&tmp2;
    dst = ((char *)&sc_bb) + rt->offset;
    bytes = 4;
  } else {
    dst = ((char *)&sc_bb) + rt->offset;
    src = (char *)(r->r[1]);
    bytes = r->r[2];
  }
  memcpy(dst, src, bytes);
  scbb_changed = 1;
  r->r[0] = 0;
  return(0);

}

/* registry_authenticate() - pass PIN to smartcard subsystem

   On entry:

    r0 -> max. 8 byte authorization key
    r1 = no. bytes in key up to MAX_AUTHBLOCK_KEY (8 currently)

  On exit:

    r0 = no. bytes written to authentication key

*/
int registry_authenticate(_kernel_swi_regs *r)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: Authentication block received.\n");
  if(chv1_required) chv1_required = 0; /* clear first-time PIN requirement */
  r->r[0] = set_authblock((char *)(r->r[0]), r->r[1]);
  if(registry_state == State_AuthFail) {
    registry_trans = Trans_AuthRetry;
    setcallback();
  }
  return(0);
}

/* registry_supportinit() - allow a registry support module to register itself

   On entry:

      r0 = registry support ID
      r1 = registry support module swi base
      r2 = ptr. to registry support title (static)

   On exit:

      r0 = registry support handle, or -1 for failure

*/
int registry_supportinit(_kernel_swi_regs *r)
{
  return(add_support((unsigned int)r->r[0],
   	            (unsigned int)r->r[1],
   	            (char *)r->r[2]));
}

/* registry_supportexit() - allow a registry support module to deregister itself

   On entry:

      r0 = registry support ID
      r1 = registry support module swi base

   On exit:

      r0 = registry support handle, or -1 for failure

*/
int registry_supportexit(_kernel_swi_regs *r)
{
  return(remove_support((unsigned int)r->r[0],
   	            (unsigned int)r->r[1]));

}

/* registry_changechv() - change the Card Holder Verification key on the smartcard

   On entry:

     r0 = CHV selector, 1 for CHV1, 2 for CHV2 (only CHV1 ops. supported atm)
     r1 -> buffer containing new CHV1
     r2 = num. bytes in new CHV1

   On exit:

     r0 = 0 - success
         -1 - registry busy
*/
int registry_changechv(_kernel_swi_regs *r)
{
  if(registry_state != State_CardInserted) {
    r->r[0] = -1;   /* Registry busy */
    return(0);
  }

  set_authblockNU((char *)(r->r[1]), r->r[2]);
  registry_trans = Trans_ChangeCHV;
  setcallback();
  r->r[0] = 0;
  return(0);
}

/* registry_proxy - allows an external client to read smartcard files
   without knowing the CHV1

   On Entry:

      r0 = as SCInterface_Read
      r1 = as SCInterface_Read
      r2 = as SCInterface_Read
      r3 = as SCInterface_Read
      r4 = as SCInterface_Read
      r5 = NULL
      r6 = 0

   On exit:

      as SCInterface_Read
*/
int registry_proxy(_kernel_swi_regs *r)
{
  r->r[5] = (int)&authblock.authblock_key;
  r->r[6] = (int)authblock.authblock_bytes;
  _kernel_swi(XOS_Bit | SCInterface_Read, r, r);
  return(0);
}












