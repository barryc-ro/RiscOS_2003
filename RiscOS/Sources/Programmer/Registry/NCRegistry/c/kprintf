/* kprintf - lightweight printf */
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include <stdarg.h>

#define PROTOTYPES_INTERNAL
#include "kprintf.h"


void kprintf(char *fmt, ...)
{
  va_list ap;
  _kernel_swi_regs r;
  char *p;

  va_start(ap, fmt);

  for(p = fmt; *p; p++) {
    switch(*p) {

      case '\n':
      	   _kernel_swi(OS_NewLine, &r, &r);
      	   break;

      case '%':


           switch(*++p) {

             case 'd':
       	       r.r[0] = va_arg(ap, int);
       	       r.r[1] = (int)kprintf_buffer;
       	       r.r[2] = KPRINTF_BUFF_SIZE;
	       _kernel_swi(XOS_Bit | OS_ConvertInteger4, &r, &r);
	       _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
	       break;


	     case 'u':
	       r.r[0] = va_arg(ap, int);
	       r.r[1] = (int)kprintf_buffer;
	       r.r[2] = KPRINTF_BUFF_SIZE;
	       _kernel_swi(XOS_Bit | OS_ConvertCardinal4, &r, &r);
	       _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
	       break;


	     case 'x':
               r.r[0] = va_arg(ap, int);
       	       r.r[1] = (int)kprintf_buffer;
       	       r.r[2] = KPRINTF_BUFF_SIZE;
       	       _kernel_swi(XOS_Bit | OS_ConvertHex8, &r, &r);
       	       _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
               break;

             case 'c':
       	       r.r[0] = va_arg(ap, int);
       	       r.r[1] = (int)kprintf_buffer;
       	       r.r[2] = KPRINTF_BUFF_SIZE;
       	       _kernel_swi(XOS_Bit | OS_ConvertInteger1, &r, &r);
       	       _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
               break;


             case 's':
       	      r.r[0] = va_arg(ap, int);
              _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
              break;

             default:
               r.r[0] = (int)(*p);
               _kernel_swi(XOS_Bit | OS_WriteC, &r, &r);
               break;
           }
           break;

       default:
         r.r[0] = (int)(*p);
         _kernel_swi(XOS_Bit | OS_WriteC, &r, &r);
    }
  }
  va_end(ap);
}
