/* c code for Registry CLI commands */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"
#include "kprintf.h"


#include "module.h"
#define PROTOTYPES_INTERNAL   /* declare our header file as local */
#include "reg_cmds.h"
#include "reg_tags.h"
#include "reg_object.h"
#include "reg_scbb.h"
#include "enum_ddi.h"
#include "reg_status.h"
#include "enum_ddi.h"
#include "reg_spprt.h"
#include "machine.h"
#ifdef BROKEN_ON_TELLIES
#include "reg_events.h"
#include "scinter.h"
#endif
#include "DBUG.h"

#if 1
#define PRINT_F kprintf
#else
#define PRINT_F printf
#endif

int registry_nullcmd(char *s, int n)
{
  return(0);
}

int registry_enum_info(char *s, int n)
{
  enum_info();
  return(0);
}

int registry_load(char *s, int n)
{

  if(load_scbb(SELECT_NET_BB, s) < 0) return(REGERR_BADFILE);
  return(0);
}

/* load a bootblock from a file and write it to the smartcard */
int registry_scload(char *s, int n)
{
  int flags[4];
  unsigned char registered_tag[] = "SC_REGISTERED";

  (sc_bb.tags.hard.t_read((void *)&sc_bb, registered_tag, (unsigned char *)flags, 16));
  if(flags[0]) return(REGERR_SERVER_LOCKED); /* server write is locked */

  if(load_scbb(SELECT_SC_BB, s) < 0) return(REGERR_BADFILE);

  if(registry_state != State_CardInserted) {
    return(REGERR_SC_BUSY);
  }

  registry_trans = Trans_WriteCard;
  setcallback();
  return(0);
}

int registry_unlock_server(char *s, int x)
{
  unsigned char registered_tag[] = "SC_REGISTERED";
  int flags = 0;
  (sc_bb.tags.hard.t_write((void *)&sc_bb, registered_tag, (unsigned char *)&flags, 4));
  return(0);
}

int registry_index_info(char *s, int x)
{
  int n;
  char filename[MAX_FILEPATH];
  char if_name[5];

  if(sc_bbs == 0) {
    PRINT_F ("No index info available.\n");
    return(0);
  }

  for(n=0; n<sc_bbs; n++) {
    expand_index_filename(filename, sc_index[n].path);
    memset(if_name, 0, 5);
    memcpy(if_name, sc_index[n].interface, 4);
    PRINT_F ("Interface: \"%s\" SC_filename: \"%s\" %s %s %s\n", if_name, filename,
        ((sc_index[n].flags & INDEX_IGNORE) == INDEX_IGNORE)?"IGNORED":"",
        ((sc_index[n].flags & INDEX_CLIENT_UPDATE) == INDEX_CLIENT_UPDATE)?"CLIENT_UPDATE":"",
        ((sc_index[n].flags & INDEX_LOCKED)==INDEX_LOCKED)?"LOCKED":"");
  }

  return(0);
}

int registry_show_status(char *s, int x)
{

  int sc_delta, net_delta;

  sc_delta = sc_delta_svc | sc_delta_swi;
  net_delta = net_delta_svc | net_delta_swi;

  PRINT_F ("FLAG               S/C   delta    Net  delta\n");
  PRINT_F ("----               ---   -----    ---  -----\n\n");
  PRINT_F ("BB_STATUS_INSERTED  %s      %s       %s     %s\n", (sc_status & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_INSERTED)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_INSERTED)?"Y":"-");

  PRINT_F ("BB_STATUS_SC_VALID  %s      %s       %s     %s\n", (sc_status & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_SC_VALID)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_SC_VALID)?"Y":"-");

  PRINT_F ("BB_STATUS_BB_VALID  %s      %s       %s     %s\n", (sc_status & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_BB_VALID)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_BB_VALID)?"Y":"-");

  PRINT_F ("BB_STATUS_PIN       %s      %s       %s     %s\n", (sc_status & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_PIN)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_PIN)?"Y":"-");

  PRINT_F ("BB_STATUS_LOCKED    %s      %s       %s     %s\n", (sc_status & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_LOCKED)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_LOCKED)?"Y":"-");

  PRINT_F ("BB_STATUS_WRITEOK   %s      %s       %s     %s\n", (sc_status & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_WRITEOK)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_WRITEOK)?"Y":"-");

  PRINT_F ("BB_STATUS_WRITEFAIL %s      %s       %s     %s\n", (sc_status & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_WRITEFAIL)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_WRITEFAIL)?"Y":"-");

  PRINT_F ("BB_STATUS_CLIENT    %s      %s       %s     %s\n", (sc_status & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_CLIENT)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_CLIENT)?"Y":"-");

  PRINT_F ("BB_STATUS_AUTHFAIL  %s      %s       %s     %s\n", (sc_status & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_AUTHFAIL)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_AUTHFAIL)?"Y":"-");

  PRINT_F ("BB_STATUS_TOO_OLD   %s      %s       %s     %s\n", (sc_status & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_TOO_OLD)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_TOO_OLD)?"Y":"-");

  PRINT_F ("BB_STATUS_TOO_NEW   %s      %s       %s     %s\n", (sc_status & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (sc_delta & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (net_status & BB_STATUS_TOO_NEW)?"Y":"-",
  			      	     	     	   	  (net_delta & BB_STATUS_TOO_NEW)?"Y":"-");

  PRINT_F ("(delta values shown are SWI and SVC values OR'd together)\n\n");
  PRINT_F ("service calls issued: %d     SWI requests serviced: %d\n\n", status_svc_count, status_swi_count);


  return(0);
}

int registry_show_support(char *s, int x)
{

  int n;

  if(num_support_modules == 0) {
    PRINT_F("No support modules.\n\n");
    return(0);
  }

  PRINT_F ("There %s %d support module%s.\n\n",
  		num_support_modules>1?"are":"is",
  		num_support_modules,
  		num_support_modules>1?"s":""
  		);
  for(n=0; n<MAX_SUPPORT_MODULES; n++)
    if( (support_modules[n].support_id != 0) &&
        (support_modules[n].support_swibase != 0))
          PRINT_F ("%s  ID: 0x%x  SWIbase: 0x%x\n",
          	      support_modules[n].support_title,
          	      support_modules[n].support_id,
          	      support_modules[n].support_swibase);
  PRINT_F ("\n");

  return(0);
}

int registry_log(char *s, int x)
{
#ifdef BROKEN_ON_TELLIES
  int i;

  for(i=0; i<event_log_index;i++) {
    kprintf("%d ", i);
    switch(event_logs[i].event_number) {
      case Event_CardOK:
           kprintf("Event_CardOK ");
           break;

      case Event_CardBad:
           kprintf("Event_CardBad ");
           break;

      case Event_CardRemoved:
           kprintf("Event_CardRemoved ");
           break;

      case Event_Complete:
           kprintf("Event_Complete ");

           switch(event_logs[i].event_code) {
             case SC_SUCCESS:
             	  kprintf(" SC_SUCCESS ");
             	  break;

             case SC_NOTFOUND:
                  kprintf(" SC_NOTFOUND ");
                  break;

             case SC_TRANSPORT:
             	  kprintf(" SC_TRANSPORT ");
             	  break;

             case SC_SPACE:
             	  kprintf(" SC_SPACE ");
             	  break;

             case SC_EXISTS:
             	  kprintf(" SC_EXISTS ");
             	  break;

             case SC_STORAGE:
             	  kprintf(" SC_STORAGE ");
             	  break;

             case SC_NOSELECT:
             	  kprintf("SC_NOSELECT ");
             	  break;

             case SC_NOTVALID:
             	  kprintf(" SC_NOTVALID ");
             	  break;

             case SC_INCONSIST:
             	  kprintf(" SC_INCONSIST ");
             	  break;

             case SC_UNKNOWNRESP:
             	  kprintf(" SC_UNKNOWNRESP ");
             	  break;

             case SC_P1P2INVALID:
             	  kprintf(" SC_P1P2INVALID ");
             	  break;

             case SC_P3INVALID:
             	  kprintf(" SC_P3INVALID ");
             	  break;

             case SC_NOACCESSCODE:
             	  kprintf(" SC_NOACCESSCODE ");
             	  break;

             case SC_FAILACCESSCODE:
             	  kprintf(" SC_FAILACCESSCODE ");
             	  break;

             case SC_NOACCESSCHANGE:
             	  kprintf(" SC_NOACCESSCHANGE ");
             	  break;

             case SC_BLOCKEDACCESS:
                  kprintf(" SC_BLOCKEDACCESS ");
                  break;

             default:
                  break;
           }
           break;
     default:
            kprintf("Eh?");
            break;
    }
    kprintf("\n");
  }
#endif
  return(0);
}



int registry_enum_tags(char *s, int x)
{
    int target = SELECT_SC_BB; /* 1=net (-n), 2=s/card (-c) */
    int whichtags = 0; /* 0=all (-a), 0x1=hard (-h), 0x2=soft (-s), 0x4=special (-x) */

    for(;*s > 0x1f;s++) {
        switch(*s) {
            case 0x20: continue;
            case 0x09: continue;

            case '-': continue;
	    case 'n': target = SELECT_NET_BB;
	    	      continue;
	    case 'c': target = SELECT_SC_BB;
	              continue;
	    case 'h': whichtags |= 0x1;
	    	      continue;
	    case 's': whichtags |= 0x2;
	    	      continue;
	    case 'x': whichtags |= 0x4;
	    	      continue;
	}
    }

    if(whichtags == 0) whichtags = 0x7; /* default to all tags */

    DBUG_PRINTF(DBUG_LVL_DIAG, "registry_enum_tags: target = %s tags: %s %s %s\n",
      target==SELECT_NET_BB?"NET":"S/CARD", whichtags&0x1?"HARD":"", whichtags&0x2?"SOFT":"", whichtags&0x4?"SPECIAL":"");

    switch(target) {

        case SELECT_NET_BB:

             if((net_status & BB_STATUS_BB_VALID)==0) {
                 PRINT_F ("Network bootblock not loaded.\n");
                 return(0);
             }

             PRINT_F ("Network bootblock major version: %d minor version: %d\n", net_bb.version.major, net_bb.version.minor);
             PRINT_F ("                  size: %d max_size: %d checksum: %d\n", net_bb.container.size, net_bb.container.max_size,
             	     			       	  	       		 	net_bb.container.cksum);

             if(whichtags & 0x1) {
                 if(net_bb.tags.hard.t_enum((void *)&net_bb)<0) {
                     PRINT_F ("Hard tag info not available.\n");
                 }
             }

             if(whichtags & 0x2) {
                 if(net_bb.tags.soft.t_enum((void *)&net_bb)<0) {
                     PRINT_F ("Soft tag info not available.\n");
                 }
             }

             if(whichtags & 0x4) {
                 if(net_bb.tags.special.t_enum((void *)&net_bb)<0) {
                     PRINT_F ("Special tag info not available.\n");
                 }
             }
             break;

        case SELECT_SC_BB:

             if((sc_status & (BB_STATUS_INSERTED | BB_STATUS_SC_VALID | BB_STATUS_BB_VALID)) !=
                (BB_STATUS_INSERTED | BB_STATUS_SC_VALID | BB_STATUS_BB_VALID)) {
                    PRINT_F ("Smartcard bootblock not loaded or invalid.\n");
                    return(0);
                }

             PRINT_F ("Smartcard bootblock major version: %d minor version: %d\n", sc_bb.version.major, sc_bb.version.minor);
             PRINT_F ("                  size: %d max_size: %d checksum: %d\n", sc_bb.container.size, sc_bb.container.max_size,
             	     			       	  	       		 	sc_bb.container.cksum);

             if(whichtags & 0x1) {
                 if(sc_bb.tags.hard.t_enum((void *)&sc_bb)<0) {
                     PRINT_F ("\nHard tag info not available.\n");
                 }
             }

             if(whichtags & 0x2) {
                 if(sc_bb.tags.soft.t_enum((void *)&sc_bb)<0) {
                     PRINT_F ("\nSoft tag info not available.\n");
                 }
             }

             if(whichtags & 0x4) {
                 if(sc_bb.tags.special.t_enum((void *)&sc_bb)<0) {
                     PRINT_F ("\nSpecial tag info not available.\n");
                 }
             }
             break;
    }



    return(0);
}


