// NC Registry code to handle support modules
#include "kernel.h"
#include "swis.h"
#include <stdio.h>
#include <string.h>

#define PROTOTYPES_INTERNAL
#include "reg_spprt.h"
#include "DBUG.h"

int support_init(void)
{
  memset(support_modules, sizeof(SUPPORT_LIST) * MAX_SUPPORT_MODULES, 0);
  num_support_modules = 0;
  return(0);
}

int add_support(unsigned int id, unsigned int swibase, char *title)
{
  int n;

  if(num_support_modules == MAX_SUPPORT_MODULES) return(-1);

  for(n=0; n<MAX_SUPPORT_MODULES; n++)
    if( (support_modules[n].support_id == 0) &&
    	(support_modules[n].support_swibase == 0) ) {
    	  support_modules[n].support_id = id;
    	  support_modules[n].support_swibase = swibase;
    	  support_modules[n].support_title = title;
    	  num_support_modules++;
    	  return(n);
    	}
   return(-1);
 }

int remove_support(unsigned int id, unsigned int swibase)
{
  int n;

  if(num_support_modules == 0) return(-1);

  for(n=0; n<num_support_modules; n++) {
    if( (support_modules[n].support_id == id) &&
    	(support_modules[n].support_swibase == swibase) ) {
    	  support_modules[n].support_id = 0;
    	  support_modules[n].support_swibase = 0;
    	  num_support_modules--;
    	  return(n);
    	}
  }
    return(-1);
}


int find_support_swibase(unsigned int id)
{
  int n;

  for(n=0; n<num_support_modules; n++)
    if(support_modules[n].support_id == id) return(support_modules[n].support_swibase);

  return(-1);
}

int support_notify(_kernel_swi_regs *i, _kernel_swi_regs *o)
{
  int n;
  int s_swi;
  _kernel_swi_regs r;

  if(num_support_modules == 0) return(1);

  /* loop thru active support modules */
  for(n=0; n<MAX_SUPPORT_MODULES; n++) {
    if( (support_modules[n].support_id != 0) &&
    	(support_modules[n].support_swibase != 0) ) {
    	  s_swi = support_modules[n].support_swibase + REGISTRY_SUPPORT_INITSWI;
    	  s_swi |= XOS_Bit;
    	  _kernel_swi(s_swi, i, &r);
    	  if(r.r[0] <1) { /* support module init failed */
    	    o->r[0] = -1;
    	    return(0);
    	  }
        }
  }
  return(1);
}
