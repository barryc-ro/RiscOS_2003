#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "machine.h"
#include "module.h"
#include "reg_events.h"
#include "reg_status.h"
#include "scinter.h"
#include "s_card.h"
#include "reg_object.h"
#include "reg_scbb.h"
#include "reg_spprt.h"
#include "reg_auth.h"
#include "reg_versn.h"

#include "DBUG.h"
#ifdef BROKEN_ON_TELLIES
#include "kprintf.h"
#endif


char *trans_string(REGISTRY_TRANS trans)
{
  static char *t_table[] = {
    "Trans_Idle",
    "Trans_CardOK",
    "Trans_CardBad",
    "Trans_CardRemoved",
    "Trans_ReadCard",
    "Trans_WriteCard",
    "Trans_CompleteOK",
    "Trans_CompleteBad",
    "Trans_Next",
    "Trans_Finished",
    "Trans_AuthFail",
    "Trans_AuthRetry",
    "Trans_ChangeCHV",
    "Trans_AuthCard"
  };


  return(t_table[trans]);
}

char *state_string(REGISTRY_STATE state)
{
    static char *s_table[] = {
    "State_NoCard",
    "State_CardInserted",
    "State_BadCard",
    "State_ReadIndex",
    "State_WriteBootBlock",
    "State_ReadBootBlock",
    "State_BootBlockWritten",
    "State_BootBlockRead",
    "State_Error",
    "State_Fresco",
    "State_AuthFail",
    "State_FileStat",
    "State_ChangeCHV",
    "State_CardAuthCheck",
    "State_StatdBootBlock"
  };

  return(s_table[state]);
}

/* this is the NCRegistry ASM */
REGISTRY_STATE machine(REGISTRY_TRANS trans)
{
  _kernel_swi_regs r;
  char filename[MAX_FILEPATH];
#ifdef BROKEN_ON_TELLIES
  kprintf("Registry: trans. %s in state %s\n", trans_string(trans), state_string(registry_state));
#else
  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry_machine: got transition %s in state %s\n", trans_string(trans), state_string(registry_state));
#endif

  switch(trans) { /* global transitions that apply to all states */

    case Trans_CardOK:
    	 if(registry_state != State_NoCard) {
    	   DBUG_PRINTF(DBUG_LVL_DIAG, "NCregistry machine: pointless smartcard event - ignoring...\n");
    	   return(registry_state);
    	 } else break;

    case Trans_CardBad:
         set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
         clr_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
         status_service_call();
         return(State_BadCard);

    case Trans_CardRemoved:
    	 clr_authblock();
         reset_status_bits(SELECT_SC_STATUS);
         status_service_call();
         return(State_NoCard);

  }

  switch(registry_state) {

    case State_NoCard:

         switch(trans) {

           case Trans_CardOK:

		clr_authblock();
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED | BB_STATUS_SC_VALID);
	        status_service_call();
	        registry_trans = Trans_AuthCard; /* force a state transition */
	        cardauth_retries = MAX_CARDAUTH_RETRIES;
	        setcallback();
	        return(State_CardAuthCheck);


           default: goto state_machine_error;

         }

    case State_CardAuthCheck: /* registry remains in this state until we've verified whether CHV1 access codes
    	 		      	 are needed or not. This is a change to earlier behaviour of reading a file and
    	 		      	 complaining if it's CHV1 blocked - because the s.card keeps a count of CHV1
    	 		      	 failures and locks the card out after 16 of them. Bummer. */

         switch(trans) {

           case Trans_AuthCard:

                reauth_card:

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: checking card access permissions...\n");
		strncpy(filename, NC_DIRNAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate s/c filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = (int)fresco_buffer;
           	r.r[3] = FRESCO_FILE_SIZE;
           	_kernel_swi(SCInterface_FileInfo, &r, &r); /* SCInterface_FileInfo */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_CardAuthCheck);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard read error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}

	    case Trans_CompleteBad:
	        if(--cardauth_retries) { /* let's have another go at that... */
	            DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard auth. failed...retrying\n");
	            goto reauth_card;
	        }
	        else { /* Nope, no good. Reject the card. */
                  set_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
                  clr_status_bits(SELECT_SC_STATUS, BB_STATUS_SC_VALID);
                  status_service_call();
                  return(State_BadCard);
                }

            case Trans_CompleteOK:
                if(fresco_buffer[CARDAUTH_PERM_BYTE] & CARDAUTH_PERM_BIT_CHV1) { /* CHV1 not enabled */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: CHV1 not enabled\n");
                  clr_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED);
                  chv1_required = 0;
                } else { /* CHV1 _is_ enabled */
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: CHV1 REQUIRED!\n");
                  set_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED);
                  chv1_required = 1;
                }
                  registry_trans = Trans_ReadCard;
                  setcallback();
                  return(State_CardInserted); /* fall thru to normal activity */

            default: goto state_machine_error;

         }








    case State_CardInserted:

         switch(trans) {

	   case Trans_AuthRetry:
	   	/* this is the default 'do nothing' return state after authorization failure and
	   	   subsequent setting of an authorization key. We do nothing, but are now in a
	   	   state of readiness for read and write requests
	   	*/
	   	return(State_CardInserted);

           case Trans_ReadCard:
           	/* perform SWI to read index file - sc_completion event will cause transition */

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: reading index file...\n");
           	memset(sc_index, 0, sizeof(INDEX) * MAX_INDEX_SIZE);
           	sc_bbs = 0;

		strncpy(filename, INDEX_SC_FILENAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate smartcard filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = 0;
           	r.r[3] = (int)&sc_index;
           	r.r[4] = INDEX_FILE_SIZE;
           	r.r[5] = NULL; /* no authentication for index file */
           	r.r[6] = 0; /* no authentication for index file */
           	_kernel_swi(SCInterface_Read, &r, &r); /* SCInterface_Read */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_ReadIndex);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard read error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}

           case Trans_WriteCard:
           	/* perform SWI to write a file - sc_completion event will cause transition */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: writing bootblock file...\n");

		if((sc_bb.container.pre_write((void *)&sc_bb))<0) {
		    DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: bootblock pre-write formatting failed\n");
		    registry_trans = Trans_CompleteBad;
		    registry_state = State_WriteBootBlock;
		    setcallback();
		}

		expand_index_filename(filename, sc_file);
		r.r[0] = 0; /* validate smartcard filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = 0;
           	r.r[3] = (int)sc_bb_buffer;
           	r.r[4] = sc_bb.container.max_size;
           	r.r[5] = (int)&authblock.authblock_key;
           	r.r[6] = (int)authblock.authblock_bytes;
           	_kernel_swi(SCInterface_Write, &r, &r); /* SCInterface_Write */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);

           	if(r.r[0] == SC_SUCCESS) {  /* write started ok */

		  return(State_WriteBootBlock);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard write error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}

           case Trans_ChangeCHV:

                /* perform SWI to change Cardholder Verification Value */
		clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: changing CHV1...\n");
                strcpy(filename, "/4e43");
                r.r[0] = 0; /* validate smartcard filenames */
                r.r[1] = (int)filename;
                r.r[2] = 0x1; /* select CHV1 */
                r.r[3] = (int)authblock.authblock_key;
                r.r[4] = authblock.authblock_bytes;
                r.r[5] = (int)authblock_new.authblock_key;
                r.r[6] = authblock_new.authblock_bytes;
                _kernel_swi(SCInterface_ChangeCHV, &r, &r);
           	if(r.r[0] == SC_SUCCESS) {  /* write started ok */

		  return(State_ChangeCHV);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard auth. change error %d - aborting...\n", r.r[0]);
		  return(State_CardInserted);
		}



           default: goto state_machine_error;

         }

    case State_BadCard:

         switch(trans) {

           case Trans_CardRemoved:
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_INSERTED);
                status_service_call();
                return(State_NoCard);

           default: goto state_machine_error;

         }

    case State_ReadIndex:

         switch(trans) {

           case Trans_AuthFail:
                DBUG_PRINTF(DBUG_LVL_PANIC, "NCRegistry: index file locked against read access. Aborting...\n");
                set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                status_service_call();
                return(State_BadCard);

           case Trans_CompleteBad:
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID);
                status_service_call();
                return(State_BadCard);

           case Trans_CompleteOK:
                /* process index file to generate boot file list, select nic, etc */
                /* do SWI to read first boot block file */

                if(consolidate_nics(sc_index)<0) {
                  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: couldn't consolidate nics...\n");
                  clr_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID);
                  status_service_call();
                  return(State_BadCard);
                }

#ifdef MANAGE_FRESCO_DATA

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: statting Fresco data block...\n");
		strncpy(filename, FRESCO_SC_FILENAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate s/c filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = (int)fresco_buffer;
           	r.r[3] = FRESCO_FILE_SIZE;
           	_kernel_swi(SCInterface_FileInfo, &r, &r); /* SCInterface_FileInfo */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_FileStat);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard stat error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}
#else

                 fresco_data_present = 0;
                 goto start_bootblock_stat;
#endif
            default: goto state_machine_error;
         }

    case State_FileStat:

         switch(trans) {

           case Trans_CompleteBad: /* File Stat failed for some reason -
	   			      attempt to read with default file size
	   			   */
	        fresco_stat_size = FRESCO_FILE_SIZE;
	        goto start_fresco_read;

           case Trans_CompleteOK:

	   	fresco_stat_size = (*((char *)fresco_buffer + 2))<<8 | *((char *)fresco_buffer + 3);
	   	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: stat'd fresco file size: %d bytes\n", fresco_stat_size);
	   	if(fresco_stat_size > FRESCO_FILE_SIZE) fresco_stat_size = FRESCO_FILE_SIZE;


           case Trans_AuthRetry: /* this is where we return if auth. fails for fresco buffer read */

		start_fresco_read:
		/* push return state in case of authorization failure */
		set_authstate(State_FileStat, Trans_AuthRetry);

	   	if(chv1_required) { /* haven't had a PIN yet - stop before we try to read any locked files */
	   	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: need a CHV1 code before proceeding\n");
	   	  set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
	   	  status_service_call();
	   	  return(State_AuthFail);
	   	}


                DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: reading Fresco data block...\n");
		strncpy(filename, FRESCO_SC_FILENAME, MAX_FILEPATH);
		r.r[0] = 0; /* validate s/c filenames */
           	r.r[1] = (int)filename;
           	r.r[2] = 0;
           	r.r[3] = (int)fresco_buffer;
           	r.r[4] = fresco_stat_size;
           	r.r[5] = (int)authblock.authblock_key;
           	r.r[6] = authblock.authblock_bytes;
           	_kernel_swi(SCInterface_Read, &r, &r); /* SCInterface_Read */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);
           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_Fresco);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard read error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}

            default: goto state_machine_error;
         }


     case State_Fresco:

          switch(trans) {

            case Trans_AuthFail:
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: authorization failure reading Fresco data.\n");
                 set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                 status_service_call();

                 return(State_AuthFail);

            case Trans_CompleteBad:

                 fresco_data_present = 0;
                 goto start_bootblock_stat;

            case Trans_CompleteOK:

                 fresco_data_present = 1;
                 /* deliberate fall-thru to next stage */
     start_bootblock_stat:
           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: stat'ing bootblock file...\n");

		expand_index_filename(filename, sc_file);
		r.r[0] = 0; /* do s/c filename validation */
           	r.r[1] = (int)filename;
           	r.r[2] = (int)sc_bb_buffer;
           	r.r[3] = BOOTBLOCK_BUFFER_SIZE;
           	_kernel_swi(SCInterface_FileInfo, &r, &r); /* SCInterface_FileInfo */
           	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);

           	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

		  return(State_StatdBootBlock);
		}
		else {
		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard stat error %d - aborting...\n", r.r[0]);
		  return(State_BadCard);
		}


           default: goto state_machine_error;

          }

    case State_StatdBootBlock:

         switch(trans) {

             case Trans_CompleteBad:
             	  DBUG_PRINTF(DBUG_LVL_ERROR, "NCRegistry: couldn't stat bootblock file.\n");
             	  return(State_BadCard);

             case Trans_CompleteOK:

		  bootblock_stat_size = (*((unsigned char *)sc_bb_buffer + 2))<<8 | *((unsigned char *)sc_bb_buffer + 3);

             	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: stat'd bootblock file size: %d\n", bootblock_stat_size);

             	  if(bootblock_stat_size > BOOTBLOCK_BUFFER_SIZE) {
             	      DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: bootblock file too large\n");
             	      return(State_BadCard);
             	  }

              case Trans_AuthRetry: /* re-entry point after authorization failure */

              // start_bootblock_read:
              	/* push state in case of auth. failure */
              	set_authstate(State_StatdBootBlock, Trans_AuthRetry);

	   	if(chv1_required) { /* haven't had a PIN yet - stop before we try to read any locked files */
	   	  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: need a CHV1 code before proceeding\n");
	   	  set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
	   	  status_service_call();
	   	  return(State_AuthFail);
	   	}

             	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: reading bootblock file...\n");
             	//memset(&sc_bb, 0, sizeof(SC_BOOT_BLOCK));

  		expand_index_filename(filename, sc_file);
  		r.r[0] = 0; /* do s/c filename validation */
             	r.r[1] = (int)filename;
             	r.r[2] = 0;
             	r.r[3] = (int)sc_bb_buffer;
             	r.r[4] = bootblock_stat_size;
             	r.r[5] = (int)authblock.authblock_key;
             	r.r[6] = authblock.authblock_bytes;
             	_kernel_swi(SCInterface_Read, &r, &r); /* SCInterface_Read */
             	DBUG_PRINTF(DBUG_LVL_DIAG, "            return code: %d\n", r.r[0]);

             	if(r.r[0] == SC_SUCCESS) {  /* read started ok */

  		  return(State_ReadBootBlock);
  		}
  		else {
  		  DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: smartcard read error %d - aborting...\n", r.r[0]);
  		  return(State_BadCard);
  		}


             default: goto state_machine_error;

            }

    case State_WriteBootBlock:

         switch(trans) {

           case Trans_CompleteBad:
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK | BB_STATUS_AUTHFAIL);
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL);
	        status_service_call();
	        registry_trans = Trans_Finished; /* force state transition */
	        setcallback();
	        return(State_BootBlockWritten);

           case Trans_CompleteOK:
           	/* decide whether there's more work to do, set trans accordingly */
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEFAIL | BB_STATUS_AUTHFAIL);
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK);
	        status_service_call();

		scbb_changed = 0;
           	registry_trans = Trans_Finished;
           	setcallback(); /* force state transition */
           	return(State_BootBlockWritten);

           case Trans_AuthFail:
           	/* decide whether there's more work to do, set trans accordingly */
	        set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL | BB_STATUS_WRITEFAIL);
	        clr_status_bits(SELECT_SC_STATUS, BB_STATUS_WRITEOK);
	        status_service_call();

           	registry_trans = Trans_Finished;
           	setcallback(); /* force state transition */
           	return(State_BootBlockWritten);


           default: goto state_machine_error;

         }

    case State_ReadBootBlock:

         switch(trans) {


           case Trans_AuthFail:
                 DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: authorization failure reading bootblock data.\n");
                 set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                 status_service_call();

                 return(State_AuthFail);

           case Trans_CompleteBad:
           	clr_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID | BB_STATUS_AUTHFAIL);
           	status_service_call();
           	return(State_BadCard);

           case Trans_CompleteOK:
           	/* determine whether there's more to read, and set trans accordingly */
           	/* not applicable in this phase - we only write 1 boot block */

           	clr_status_bits(SELECT_SC_STATUS, BB_STATUS_LOCKED | BB_STATUS_AUTHFAIL);
           	status_service_call();

           	registry_trans = Trans_Finished;
           	setcallback(); /* force state transition */
           	return(State_BootBlockRead);


           default: goto state_machine_error;

         }

    case State_BootBlockWritten:

         switch(trans) {

           case Trans_Next:
           	/* do SWI to write next file */
           	return(State_WriteBootBlock);

           case Trans_Finished:
           	return(State_CardInserted);

           default: goto state_machine_error;

         }

    case State_BootBlockRead:

         switch(trans) {

           case Trans_Next:
           	/* do SWI to fetch next file */
           	return(State_ReadBootBlock);

           case Trans_Finished:
                /* we're finished reading from the smartcard */
                  if(version_control(sc_bb_buffer, bootblock_stat_size, &sc_bb, SELECT_SC_BB, sc_bb_wspace, WSPACE_BUFFER_SIZE)<0) { /* do we understand this card? */
                      clr_status_bits(SELECT_SC_STATUS, BB_STATUS_BB_VALID);
                      status_service_call();
                      return(State_BadCard);
                  }

                  return(State_CardInserted);

           default: goto state_machine_error;

         }

    case State_AuthFail:
    	 switch(trans) {

    	   case Trans_AuthRetry:

    	        DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: initiating authentication retry...\n");

		clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);

		if((sc_status & (BB_STATUS_LOCKED |BB_STATUS_PIN)) != (BB_STATUS_LOCKED | BB_STATUS_PIN)) {
		  set_status_bits(SELECT_SC_STATUS, BB_STATUS_PIN | BB_STATUS_LOCKED);
		  status_service_call();
		}

    	        if(authfail_state != State_NoCard) {
    	          registry_trans = Trans_AuthRetry;
    	          registry_state = authfail_state;
    	          authfail_trans = Trans_Idle;
    	          authfail_state = State_NoCard;
    	          setcallback();
    	        } else {
    	          /* no action, so we become idle */
    	          registry_trans = Trans_Idle;
    	          registry_state = State_CardInserted;
    	        }
    	        return(registry_state);
    	 }

    case State_ChangeCHV:
         switch(trans) {

           case Trans_AuthFail:
           case Trans_CompleteBad:

           	DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: authentication failure on CHV change request.\n");
           	set_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
           	status_service_call();
           	return(State_CardInserted);

           case Trans_CompleteOK:

                DBUG_PRINTF(DBUG_LVL_DIAG, "NCRegistry: CHV change completed OK.\n");
                update_authblock();
                if((sc_status & BB_STATUS_PIN)==0) set_status_bits(SELECT_SC_STATUS, BB_STATUS_PIN);
                clr_status_bits(SELECT_SC_STATUS, BB_STATUS_AUTHFAIL);
                status_service_call();
                return(State_CardInserted);

           default: goto state_machine_error;
         }

    case State_Error:
    default:
         return(State_Error);

  }

state_machine_error:

  /* ignore i/o acks that we weren't expecting - these may have been generated by support modules
     or by a completely different app.
  */

  if((trans == Trans_CompleteOK) || (trans == Trans_CompleteBad) || (trans == Trans_AuthFail)) {
    DBUG_PRINTF(DBUG_LVL_DEBUG, "NCRegistry: spurious I/O ACK from smartcard driver...ignoring\n");
    return(registry_state);
  }

  /* otherwise . . . PANIC!! */

  DBUG_PRINTF(DBUG_LVL_PANIC, "NCRegistry: state machine panic - invalid transition event %s in state %s\n",
  		      trans_string(registry_trans), state_string(registry_state));
  DBUG_PRINTF(DBUG_LVL_PANIC, "            setting state to State_Error\n");
  return(State_Error);
}
