#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "dci4.h"
#include "machine.h"
#include "reg_events.h"
#define PROTOTYPES_INTERNAL /* make prototypes and globals internal to this file */
#include "module.h"
#include "reg_swis.h"
#include "reg_cmds.h"
#include "s_card.h"
#include "reg_scbb.h"
#include "reg_spprt.h"
#include "enum_ddi.h"
#include "dynalloc.h"
#include "DBUG.h"

#ifdef INSECURE_SMARTCARD_OPS
#pragma -e1
#error " _____                                    _ "
#error "|_   _|                                  | |"
#error "  | |  _ __  ___  ___  ___ _   _ _ __ ___| |"
#error "  | | | '_ \/ __|/ _ \/ __| | | | '__/ _ \ |"
#error " _| |_| | | \__ \  __/ (__| |_| | | |  __/_|"
#error "|_____|_| |_|___/\___|\___|\__,_|_|  \___(_)"
#endif

#ifdef USE_TINY
#pragma -e1
#error Using TinyStubs
static _kernel_oserror *TinyError;
#endif

#ifndef Service_PostInit
#define Service_PostInit 0x73
#endif

#ifndef Service_LookupFileType
#define Service_LookupFileType 0x42
#endif

_kernel_oserror *e = (_kernel_oserror *)NULL;
_kernel_swi_regs r;

extern int registry_callb_entry(void);

_kernel_oserror *registry_init(char *cmd_tail, int pbase, void *pw)
{

    static char keyword[] = "verbose/s,file/k,debug/k/e";
    static char registry_fvar[] = "Alias$@RunType_f94";
    static char registry_falias[] = "registry_scload %*0";

    static int args[32];
    char *argp, *debug_file;
    int debug_lvl = 0;

#ifdef USE_TINY
    _kernel_swi_regs reg;
#endif

    module_wsp = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
    reg.r[0] = (int)module_wsp;
    TinyError = _kernel_swi(TinySupport_Share, &reg, &reg);
#endif

   r.r[0] = (int)keyword;
   r.r[1] = (int)cmd_tail;
   r.r[2] = (int)args;
   r.r[3] = 128;

   memset((char *)args, 0, 32 * sizeof(int));

   _kernel_swi(OS_ReadArgs, &r, &r);


   if(args[0]) quiet = 0;

   if(args[1] != 0) debug_file = (char *)args[1];
   else debug_file = NULL;

   if(args[2]) { /* debug value present */
     argp = (char *)args[2];
     if(*argp++ == 0) {
       debug_lvl = *((int *)argp);
       if(debug_lvl <0) debug_lvl = 0;
       if(debug_lvl >5) debug_lvl = 5;
       if(debug_file == NULL) DBUG_FOPEN("stdout");
       else DBUG_FOPEN(debug_file);
       DBUG_LEVEL(debug_lvl);
       QUIET {
         printf("NCRegistry_init: debug level set to %d\n", debug_lvl);
         if(debug_file != NULL) printf("NCRegistry_init: debug file: %s\n", debug_file);
       }
     }
   }



  rmalloc_init();
  /*if(enum_dci4_dibs()<0) return(&f);*/ /* build database of device driver interfaces */

  registry_claimv();
  registry_event_enable();

  support_init();

  if((fresco_buffer = (char *)rmalloc(FRESCO_FILE_SIZE, "NC Registry Workspace"))==NULL)
    return(&g);

  /* do stuff to handle our filetype */

  r.r[0] = (int)registry_fvar;
  r.r[1] = (int)args;
  r.r[2] = 0x80000000;
  r.r[3] = 0;
  r.r[4] = 0;
  _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r);

  if(r.r[2] == 0) { /* filetype not set */
    r.r[0] = (int)registry_fvar;
    r.r[1] = (int)registry_falias;
    r.r[2] = strlen(registry_falias);
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);
  }

  return((_kernel_oserror *)0);

}

void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{
  static char filetype_string[8] = "SCBBlk  ";

  DBUG_PRINTF(DBUG_LVL_DIAG, "NCregistry: service call.\n");
  switch(sn) {

    case Service_PostInit:
    	 DBUG_PRINTF(DBUG_LVL_DIAG, "NCregistry: PostInit handler entered.\n");
    	 if(enum_dci4_dibs()<0) DBUG_PRINTF(DBUG_LVL_PANIC, "NCregistry: failed to read DCI4 info.\n");
    	 break;

    case Service_LookupFileType:
    	 if(r->r[2] == REGISTRY_FTYPE) {
    	   r->r[1] = 0;
    	   r->r[2] = *(int *)filetype_string;
    	   r->r[3] = *(int *)&filetype_string[4];
    	 }
    	 break;
  }
}

_kernel_oserror *registry_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error;

    callp = &registry_ent[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);
}

_kernel_oserror *registry_cmd_handler(char *arg_string, int argc, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int error;

    callp = &registry_cmdent[cmd_no];
    error = (*(callp->cmd_call))(arg_string, argc);

    switch(error) {
      case REGERR_SERVER_LOCKED:
      	   return(&cmd_err_1);

      case REGERR_BADFILE:
      	   return(&cmd_err_2);

      case REGERR_SC_BUSY:
      	   return(&cmd_err_3);
    }

    return((_kernel_oserror *)NULL);

}


_kernel_oserror *setcallback(void)
{
  _kernel_swi_regs r;

  /* Set callback */

  /* add events to queue */
  transition_queue[transq_wrp++] = registry_trans;
  if(transq_wrp == MAX_TRANSITION_QUEUE) transq_wrp = 0;

  r.r[0] = (int) registry_callb_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(OS_AddCallBack, &r, &r));
}






_kernel_oserror *cancelcallback(void)
{
  _kernel_swi_regs r;

  /* Cancel callback */
  r.r[0] = (int) registry_callb_entry;
  r.r[1] = (int) module_wsp;
  return (_kernel_swi(0x5f, &r, &r)); /* OS_RemoveCallback */
}


int registry_callb_handler(_kernel_swi_regs *r, void *pw)
{


  if(pw != module_wsp) return(0);

  while(transq_rdp != transq_wrp) {
    registry_trans = transition_queue[transq_rdp++];
    if(transq_rdp == MAX_TRANSITION_QUEUE) transq_rdp = 0;
    if(registry_trans != Trans_Idle) registry_state = machine(registry_trans);
  }
  return(1);

}




_kernel_oserror *registry_final(int fatal, int podule, void *pw)
{
#ifdef USE_TINY
  _kernel_swi_regs r;
  if ( TinyError == NULL ) _kernel_swi( TinySupport_Die, &r, &r);
#endif

  registry_event_disable();
  registry_releasev();
  rmfree_all();
  DBUG_FCLOSE();
  return((_kernel_oserror *)NULL);
}











