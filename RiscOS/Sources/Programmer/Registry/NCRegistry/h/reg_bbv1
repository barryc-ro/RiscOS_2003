// header file for REG_BBV1.H

/* Begin-Prologue */
#ifndef REG_BBV1_H
#define REG_BBV1_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#ifndef REG_V1_TAGS

#define REG_V1_TAG_MANDATORY     0x1
#define REG_V1_TAG_UPDATEABLE	 0x2
#define REG_V1_TAG_OVERRIDEABLE	 0x4
#define REG_V1_TAG_INVISIBLE	 0x8
#define REG_V1_TAG_SPECIAL	 0x10
#define REG_V1_TAG_PACKED	 0x20

#define SUB_TAG                  0x100

#define MAX_V1_TAGNAME           20

typedef struct {
  unsigned char *name;
  unsigned char *data;
  unsigned int len;
  unsigned int flags;
} SOFT_TAG;

typedef struct {
  unsigned char **head;
  unsigned char **next;
  unsigned char **tail;
} SOFTTAG_LIST;

typedef struct {
  char tagname[MAX_V1_TAGNAME];
  unsigned int id;
  unsigned int flags;
  unsigned int shift;
  unsigned int mask;
  unsigned int src_tag;
  unsigned int src_offset;
} REG_V1_TAGS;
#endif

#ifdef PROTOTYPES_INTERNAL

REG_V1_TAGS reg_v1_tags[] = {
/* NAME     ID    FLAGS    SHIFT    MASK   SRC_TAG   SRC_OFFSET */
  {"NULL", 0, REG_V1_TAG_INVISIBLE, 0, 0, 0, 0},
  {"SYSTEM_FLAGS", 1, REG_V1_TAG_MANDATORY, 0, 0, 0, 0},

  {"SYSTEM_FLAGS1", SUB_TAG, REG_V1_TAG_PACKED, 0, 0xffffffff, 1, 0},

  {"IP_SCHEME", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 0, 0xff, 1, 0},
  {"MAIL_RX", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE | REG_V1_TAG_PACKED, 8, 0xff00, 1, 0},
  {"MAIL_TX", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE | REG_V1_TAG_PACKED, 16, 0xff0000, 1, 0},
  {"BOOTP", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 24, 0xff000000, 1, 0},

  {"SYSTEM_FLAGS2", SUB_TAG, REG_V1_TAG_PACKED, 0, 0xffffffff, 1, 4},

  {"LINK_AUTH", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 0, 0xff, 1, 4},
  {"NFS_TYPE", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE | REG_V1_TAG_PACKED, 8, 0xff00, 1, 4},
  {"USER_PREFS", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 16, 0xff0000, 1, 4},

  {"SYSTEM_FLAGS3", SUB_TAG, REG_V1_TAG_PACKED, 0, 0xffffffff, 1, 8},

  {"SC_REGISTERED", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 0, 1, 1, 8},
  {"AUTH_ENABLE", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 1, 2, 1, 8},
  {"SOAK_ENABLE", SUB_TAG, REG_V1_TAG_PACKED, 2, 4, 1, 8},
  {"PLIP_ENABLE", SUB_TAG, REG_V1_TAG_PACKED, 3, 8, 1, 8},
  {"STATE_ENABLE", SUB_TAG, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_PACKED, 4, 0x10, 1, 8},
  {"WRITE_ENABLE", SUB_TAG, REG_V1_TAG_PACKED, 5, 0x20, 1, 8},
  {"CLIENT_UPDATE", SUB_TAG, REG_V1_TAG_PACKED, 6, 0x40, 1, 8},

  {"ISP_ID", 2, 0, 0, 0, 0, 0},
  {"NC_ID", 3, 0, 0, 0, 0},
  {"PSTN_NUM", 4, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"PSTN_BACKUP", 5, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"STATIC_IP", 6, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"MAIL_RX_HOST", 7, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"MAIL_TX_HOST", 8, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NNTP_HOST", 9, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"DNS_PRIMARY", 10, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"DNS_BACKUP", 11, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"TIME_PRIMARY", 12, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"TIME_BACKUP", 13, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NCAS_PRIMARY", 14, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NCAS_BACKUP", 15, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"HTTP_PROXY", 16, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"WAIS_PROXY", 17, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"FTP_PROXY", 18, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"GOPHER_PROXY", 19, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"SECURITY_PROXY", 20, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"FSERV_PRIMARY", 21, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"FSERV_BACKUP", 22, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"LOGIN_ID", 23, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"LOGIN_SECRET", 24, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"LOGIN_USERNAME", 25, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"LOGIN_PASSWD", 26, REG_V1_TAG_UPDATEABLE, 0, 0, 0},
  {"EMAIL_ADDR", 27, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"EMAIL_NAME", 28, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NCF_INFO", 29, 0, 0, 0, 0},
  {"NCD_INFO", 30, 0, 0, 0, 0},
  {"ISP_DOMAIN", 31, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NFS_MOUNT", 32, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"NFS_MOUNTRW", 33, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"URL_INIT", 34, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"URL_ISP", 35, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"URL_INTERNAL", 36, REG_V1_TAG_UPDATEABLE | REG_V1_TAG_OVERRIDEABLE, 0, 0, 0},
  {"SEND_EXPECT", 37, REG_V1_TAG_SPECIAL, 0, 0, 0},
  {"MODEM_FINAL", 38, 0, 0, 0, 0},
  {"FSERV_HOME", 39, 0, 0, 0, 0},
  {"ISP_NAME", 40, 0, 0, 0, 0},
  {"NAMED_RECORD", 254, REG_V1_TAG_INVISIBLE, 0, 0, 0},
  {"CHECKSUM", 255, REG_V1_TAG_INVISIBLE, 0, 0, 0},

  {NULL, 0, 0, 0, 0, 0}
  };

#endif

DECLARE REG_BOOTBLOCK *reg_bbv1;
DECLARE int init_reg_bbv1(REG_BOOTBLOCK *, unsigned char *, unsigned int, unsigned char *, unsigned int);
DECLARE int reg_bbv1_post_read(void *);
DECLARE int reg_bbv1_pre_write(void *);

DECLARE int reg_bbv1_tag_info(void *, unsigned char *);

DECLARE int reg_bbv1_enum_htags(void *);
DECLARE int reg_bbv1_read_htags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_write_htags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_delete_htags(void *, unsigned char *);
DECLARE int reg_bbv1_rename_htags(void *, unsigned char *, unsigned char *);

DECLARE int reg_bbv1_enum_stags(void *);
DECLARE int reg_bbv1_read_stags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_write_stags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_delete_stags(void *, unsigned char *);
DECLARE int reg_bbv1_rename_stags(void *, unsigned char *, unsigned char *);

DECLARE int reg_bbv1_enum_sptags(void *);
DECLARE int reg_bbv1_read_sptags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_write_sptags(void *, unsigned char *, unsigned char *, unsigned int);
DECLARE int reg_bbv1_delete_sptags(void *, unsigned char *);
DECLARE int reg_bbv1_rename_sptags(void *, unsigned char *, unsigned char *);

DECLARE int is_bbv1_htag(unsigned int);
DECLARE REG_V1_TAGS *get_htag_by_id(unsigned int);
DECLARE int add_soft_mapping(void *, SOFTTAG_LIST *);
DECLARE void update_softtag_mappings(unsigned char *, unsigned char *, SOFTTAG_LIST *);
DECLARE int remove_softtag_mapping(SOFTTAG_LIST *, unsigned char *);
DECLARE REG_V1_TAGS *v1_locate_tag(unsigned char *);
DECLARE int locate_softtag(unsigned char *, SOFT_TAG *, SOFTTAG_LIST *);
DECLARE unsigned char *find_tag_in_block(unsigned int, unsigned char *, unsigned int);
DECLARE int remove_tag_in_block(void *, unsigned char *);
DECLARE int append_tag_to_block(void *, unsigned int, unsigned int, unsigned char *);
DECLARE unsigned char *append_softtag_to_block(void *, unsigned char *, unsigned char *, unsigned int, unsigned int);
DECLARE int remap_softtag(unsigned char *, unsigned char *, SOFTTAG_LIST *);
DECLARE unsigned int read_unaligned_int(unsigned char *);
DECLARE void write_unaligned_int(unsigned char *, unsigned int);


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

