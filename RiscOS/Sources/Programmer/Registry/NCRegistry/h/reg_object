// header file for REG_OBJECT.H

/* Begin-Prologue */
#ifndef REG_OBJECT_H
#define REG_OBJECT_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

/* flag info returned by object's tag_info method */
#define REG_TAG_INFO_TAGTYPE_MASK 0xf

#define REG_TAG_INFO_NOSUCH_TAG	  0x0
#define REG_TAG_INFO_HARD_TAG	  0x1
#define REG_TAG_INFO_SOFT_TAG	  0x2
#define REG_TAG_INFO_SPECIAL_TAG  0x3

#define REG_TAG_INFO_UPDATEABLE   0x10
#define REG_TAG_INFO_OVERRIDEABLE 0x20
#define REG_TAG_INFO_MANDATORY	  0x40

/* Registry bootblock container types */
#define REG_CONTAINER_TYPE_SC	1 // came from a smartcard
#define REG_CONTAINER_TYPE_NET	2 // came from the network

typedef struct {
    int major;
    int minor;
} REG_VERSION;

typedef struct {
    unsigned char *start;
    unsigned int size;
    unsigned int max_size;
    unsigned int cksum;
    unsigned int type;
    unsigned char *wspace;
    unsigned int wbytes;
    int (*post_read)(void *);
    int (*pre_write)(void *);
} REG_CONTAINER;

typedef struct {
    int (*t_enum)(void *);
    int (*t_read)(void *, unsigned char *, unsigned char *, unsigned int);
    int (*t_write)(void *, unsigned char *, unsigned char *, unsigned int);
    int (*t_rename)(void *, unsigned char *, unsigned char *);
    int (*t_delete)(void *, unsigned char *);
} REG_TAG_METHODS;

typedef struct {
    int (*tag_info)(void *, unsigned char *);
    REG_TAG_METHODS hard;
    REG_TAG_METHODS soft;
    REG_TAG_METHODS special;
} REG_DATA;

typedef struct {
    REG_VERSION version;
    REG_CONTAINER container;
    REG_DATA tags;
} REG_BOOTBLOCK;


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

