// header file for MACHINE.H

/* Begin-Prologue */
#ifndef MACHINE_H
#define MACHINE_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
/* state machine stuff */

#define INDEX_SC_FILENAME  "/4e43/20"   /* smartcard filename for index file */
#define FRESCO_SC_FILENAME "/4955/20"   /* smartcard filename for fresco data file */
#define NC_DIRNAME         "/4e43"      /* smartcard NC directory name */

typedef enum {
  State_NoCard,
  State_CardInserted,
  State_BadCard,
  State_ReadIndex,
  State_WriteBootBlock,
  State_ReadBootBlock,
  State_BootBlockWritten,
  State_BootBlockRead,
  State_Error,
  State_Fresco,
  State_AuthFail,
  State_FileStat,
  State_ChangeCHV,
  State_CardAuthCheck
} REGISTRY_STATE;

typedef enum {
  Trans_Idle,
  Trans_CardOK,
  Trans_CardBad,
  Trans_CardRemoved,
  Trans_ReadCard,
  Trans_WriteCard,
  Trans_CompleteOK,
  Trans_CompleteBad,
  Trans_Next,
  Trans_Finished,
  Trans_AuthFail,
  Trans_AuthRetry,
  Trans_ChangeCHV,
  Trans_AuthCard
} REGISTRY_TRANS;

DECLARE REGISTRY_STATE registry_state INIT(State_NoCard);
DECLARE REGISTRY_TRANS registry_trans INIT(Trans_Idle);
DECLARE int write_in_progress INIT(0);
DECLARE int read_in_progress INIT(0);

DECLARE char *trans_string(REGISTRY_TRANS);
DECLARE char *state_string(REGISTRY_STATE);
DECLARE REGISTRY_STATE machine(REGISTRY_TRANS);

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

