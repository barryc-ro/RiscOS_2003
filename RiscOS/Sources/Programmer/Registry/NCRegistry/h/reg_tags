// header file for REG_TAGS.H
/* reg_tags.h - Registry tags format */
#include "s_card.h"
#include "regss_defs.h"

/* Begin-Prologue */
#ifndef REG_TAGS_H
#define REG_TAGS_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

/* tag flags */
#define MAX_TAGNAME            20
#define REG_TAGS_UPDATE        0x1
#define REG_TAGS_OVERRIDE      0x2
#define REG_TAGS_SPECIAL       0x4 /* special tag */

/* if the REG_TAGS_SPECIAL flag is set, the 'mask' parameter is re-used to hold
   one of the REGSS_ special tag identifiers (see regss_defs.h for details), and
   the 'shift' parameter is used to hold a registry support module identifier -
   these fields are decoded by the given NC Registry Support Module
*/



#ifndef REG_TAGS

typedef struct {
  char tagname[MAX_TAGNAME];           /* tag name */
  unsigned int flags;                  /* flag word */
  unsigned int offset;		       /* offset into SCBB */
  unsigned int length;		       /* length of returned data */
  unsigned int mask;		       /* mask value, or 0, or support module tag identifier */
  unsigned int shift;		       /* shift value, or 0, or support module identifer */
} REG_TAGS;

#endif

#ifdef PROTOTYPES_INTERNAL

REG_TAGS reg_tags[] = {
  {"SCF_ID", REG_TAGS_UPDATE, 0, 4, 0, 0 },

  {"SYSTEM_FLAGS1", 0, 4, 4, 0, 0},

  {"IP_SCHEME", REG_TAGS_UPDATE, 4, 4, 0xff, 0},
  {"MAIL_RX", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 4, 4, 0xff00, 8},
  {"MAIL_TX", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 4, 4, 0xff0000, 16},
  {"BOOTP", REG_TAGS_UPDATE, 4, 4, 0xff000000, 24},

  {"SYSTEM_FLAGS2", 0, 8, 4, 0, 0},

  {"LINK_AUTH", REG_TAGS_UPDATE, 8, 4, 0xff, 0},
  {"NFS_TYPE", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 8, 4, 0xff00, 8},
  {"USER_PREFS", REG_TAGS_UPDATE, 8, 4, 0xff0000, 16},

  {"SYSTEM_FLAGS3", 0, 0xc, 4, 0, 0},

  {"SC_REGISTERED", REG_TAGS_UPDATE, 0xc, 4, 1, 0},
  {"AUTH_ENABLE", REG_TAGS_UPDATE, 0xc, 4, 2, 1},
  {"SOAK_ENABLE", 0, 0xc, 4, 4, 2},
  {"PLIP_ENABLE", 0, 0xc, 4, 8, 3},
  {"STATE_ENABLE", REG_TAGS_UPDATE, 0xc, 4, 0x10, 4},
  {"WRITE_ENABLE", 0, 0xc, 4, 0x20, 5},
  {"CLIENT_UPDATE", REG_TAGS_UPDATE, 0xc, 4, 0x40, 6},

  {"ISP_ID", 0, 0x10, 4, 0, 0},
  {"NC_ID", 0, 0x14, 8, 0, 0},
  {"PSTN_NUM", REG_TAGS_UPDATE, 28, 20, 0, 0},
  {"STATIC_IP", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 48, 4, 0, 0},
  {"MAIL_RX_HOST", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 52, 4, 0, 0},
  {"MAIL_TX_HOST", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 56, 4, 0, 0},
  {"NNTP_HOST", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 60, 4, 0, 0},
  {"DNS_PRIMARY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 64, 4, 0, 0},
  {"DNS_BACKUP", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 68, 4, 0, 0},
  {"TIME_PRIMARY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 72, 4, 0, 0},
  {"TIME_BACKUP", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 76, 4, 0, 0},
  {"HTTP_PROXY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 80, 8, 0, 0},
  {"WAIS_PROXY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 88, 8, 0, 0},
  {"FTP_PROXY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 96, 8, 0, 0},
  {"GOPHER_PROXY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 104, 8, 0, 0},
  {"SECURITY_PROXY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 112, 8, 0, 0},
  {"FSERV_PRIMARY", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 120, 8, 0, 0},
  {"FSERV_BACKUP", REG_TAGS_UPDATE | REG_TAGS_OVERRIDE, 128, 8, 0, 0},
  {"LOGIN_ID", REG_TAGS_UPDATE, 136, 24, 0, 0},
  {"LOGIN_SECRET", REG_TAGS_UPDATE, 160, 24, 0, 0},
  {"ISP_SCRIPT", REG_TAGS_UPDATE, 184, 256, 0, 0},
  {"ISP_DOMAIN", REG_TAGS_OVERRIDE | REG_TAGS_SPECIAL, 184, 256, REGSS_ISP_DOMAIN, REGISTRY_SUPPORT_SCRIPT},
  {"NFS_MOUNT", REG_TAGS_OVERRIDE | REG_TAGS_SPECIAL, 184, 256, REGSS_NFS_MOUNT, REGISTRY_SUPPORT_SCRIPT},
  {"URL_INIT", REG_TAGS_OVERRIDE | REG_TAGS_SPECIAL, 184, 256, REGSS_URL_INIT, REGISTRY_SUPPORT_SCRIPT},
  {"SEND_EXPECT", REG_TAGS_SPECIAL, 184, 256, REGSS_SEND_EXPECT, REGISTRY_SUPPORT_SCRIPT},
  {"NCF_INFO", REG_TAGS_UPDATE | REG_TAGS_SPECIAL, 184, 256, REGSS_NCF_INFO, REGISTRY_SUPPORT_SCRIPT},
  {"NCD_INFO", REG_TAGS_UPDATE | REG_TAGS_SPECIAL, 184, 256, REGSS_NCD_INFO, REGISTRY_SUPPORT_SCRIPT},
  {NULL, 0, 0, 0, 0}
};

#else

extern REG_TAGS *reg_tags;

#endif


DECLARE int caseless_strcmp(char *, char *);
DECLARE REG_TAGS *locate_tag(char *);
DECLARE int isblanktag(SC_BOOT_BLOCK *, REG_TAGS *);
DECLARE int reduce_tag(SC_BOOT_BLOCK *, REG_TAGS *);
DECLARE void show_htags(void *);
DECLARE void show_stags(void *);

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */
