#include <stdio.h>
#include "kernel.h"

#include "ModHdr.h"
#include "Vector.h"

#define IGNORE(x) ((x)=(x))

static struct workspace *ws[2];
static _kernel_oserror err_noinit = { 0, "Could not install handler" };
static const char mode [32][6] = { "USR26", "FIQ26", "IRQ26", "SVC26",
                                   "00100", "00101", "00110", "00111",
                                   "01000", "01001", "01010", "01011",
                                   "01100", "01101", "01110", "01111",
                                   "USR32", "FIQ32", "IRQ32", "SVC32",
                                   "10100", "10101", "10110", "ABT32",
                                   "11000", "11001", "11010", "UND32",
                                   "11100", "11101", "11110", "SYS32" };

static _kernel_oserror *ShowAbort (const char *name, int x);


_kernel_oserror *Module_Init (const char *cmd_tail, int podule_base, void *pw)
{
  IGNORE (cmd_tail);
  IGNORE (podule_base);
  IGNORE (pw);
  ws[0] = InstallDataAbortHandler ();
  if (ws[0] == NULL)
  {
    return &err_noinit;
  }
  else
  {
    ws[1] = InstallPreFetchAbortHandler ();
    if (ws[1] == NULL)
    {
      RemoveDataAbortHandler (ws[0]);
      return &err_noinit;
    }
    else
    {
      return NULL;
    }
  }
}

_kernel_oserror *Module_Final (int fatal, int podule, void *pw)
{
  _kernel_oserror *e;
  IGNORE (fatal);
  IGNORE (podule);
  IGNORE (pw);
  e = RemoveDataAbortHandler (ws[0]);
  if (e == NULL)
  {
    e = RemovePreFetchAbortHandler (ws[1]);
  }
  return e;
}

_kernel_oserror *Module_Commands (const char *arg_string, int argc, int cmd_no, void *pw)
{
  IGNORE (arg_string);
  IGNORE (argc);
  IGNORE (pw);
  switch (cmd_no)
  {
    case CMD_ShowDataAbort:
      return ShowAbort ("Data", 0);
    case CMD_ShowPreFetchAbort:
      return ShowAbort ("PreFetch", 1);
    default:
      return NULL;
  }
}

static _kernel_oserror *ShowAbort (const char *name, int x)
{
  printf ("Registers at last %s Abort exception:\n", name);
  
  printf ("R0   = %08X  R1   = %08X  R2   = %08X  R3   = %08X\n",
    ws[x]->Registers[0], ws[x]->Registers[1], ws[x]->Registers[2], ws[x]->Registers[3]);
  printf ("R4   = %08X  R5   = %08X  R6   = %08X  R7   = %08X\n",
    ws[x]->Registers[4], ws[x]->Registers[5], ws[x]->Registers[6], ws[x]->Registers[7]);
  printf ("R8   = %08X  R9   = %08X  R10  = %08X  R11  = %08X\n",
    ws[x]->Registers[8], ws[x]->Registers[9], ws[x]->Registers[10], ws[x]->Registers[11]);
  printf ("R12  = %08X  PC   = %08X  CPSR = %08X",
    ws[x]->Registers[12], ws[x]->Registers[13], ws[x]->Registers[14]);
  if ((ws[x]->Registers[14] & 0x1C) == 0)
  {
    /* 26-bit mode: print combined PC/PSR too */
    unsigned int r15 = ws[x]->Registers[14];
    r15 = (r15 & 0xF0000003) | ((r15 & 0x000000C0) << (26-6)) | ws[x]->Registers[13];
    printf ("  R15  = %08X", r15);
  }
  
  printf ("\nFlags %c%c%c%c%c%c%c%c%c, Mode %s\n",
    (ws[x]->Registers[14] & 0x80000000) ? 'N' : 'n',
    (ws[x]->Registers[14] & 0x40000000) ? 'Z' : 'z',
    (ws[x]->Registers[14] & 0x20000000) ? 'C' : 'c',
    (ws[x]->Registers[14] & 0x10000000) ? 'V' : 'v',
    (ws[x]->Registers[14] & 0x08000000) ? 'Q' : 'q',
    (ws[x]->Registers[14] & 0x01000000) ? 'J' : 'j',
    (ws[x]->Registers[14] & 0x00000080) ? 'I' : 'i',
    (ws[x]->Registers[14] & 0x00000040) ? 'F' : 'f',
    (ws[x]->Registers[14] & 0x00000020) ? 'T' : 't',
    mode [ws[x]->Registers[14] & 0x0000001F] );
  
  printf ("Banked registers: USR/SYS\n");
  printf ("R13  = %08X  R14  = %08X\n",
    ws[x]->USRRegisters[0], ws[x]->USRRegisters[1]);
  
  printf ("Banked registers: FIQ\n");
  printf ("R8   = %08X  R9   = %08X  R10  = %08X  R11  = %08X\n",
    ws[x]->FIQRegisters[0], ws[x]->FIQRegisters[1], ws[x]->FIQRegisters[2], ws[x]->FIQRegisters[3]);
  printf ("R12  = %08X  R13  = %08X  R14  = %08X  SPSR = %08X\n",
    ws[x]->FIQRegisters[4], ws[x]->FIQRegisters[5], ws[x]->FIQRegisters[6], ws[x]->FIQRegisters[7]);
  
  printf ("Banked registers: IRQ\n");
  printf ("R13  = %08X  R14  = %08X  SPSR = %08X\n",
    ws[x]->IRQRegisters[0], ws[x]->IRQRegisters[1], ws[x]->IRQRegisters[2]);
  
  printf ("Banked registers: SVC\n");
  printf ("R13  = %08X  R14  = %08X  SPSR = %08X\n",
    ws[x]->SVCRegisters[0], ws[x]->SVCRegisters[1], ws[x]->SVCRegisters[2]);
  
  printf ("Banked registers: UND\n");
  printf ("R13  = %08X  R14  = %08X  SPSR = %08X\n",
    ws[x]->AURegisters[0], ws[x]->AURegisters[1], ws[x]->AURegisters[2]);
  
  return NULL;
}
