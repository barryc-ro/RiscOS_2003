/* INCLUDES */

#include <stddef.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"

#include "VersionNum"	/* must be before KeyWatchHd.h to avoid Module_Date clash */
#include "KeyWatchHd.h"
#include "KeyWatch.h"

/* ---------------------------------------------------------------------------------------------------- */

/* CONSTANTS */

#define KW                     Module_Title

#define OSByte_DisableEvent	13
#define OSByte_EnableEvent	14

#define EventV			0x10
#define EventV_Input		2
#define EventV_Key		11

#define Buffer_Keyboard		0
#define Buffer_Serial_Input	1

#define EventV_Key_Up		0
#define EventV_Key_Down		1

#define KeyV			0x13
#define KeyV_DummyKeyboard	11

#define TaskModule_SendMessage	0x4D300

#define PW_TABLE_SIZE		10

#define FEATURES		0

#define KEY_TABLE_SIZE          64

#define NULL_TASK	(-1)
#define NULL_KEY	(-1)

#define NOT_USED(a)		a = a

/* ---------------------------------------------------------------------------------------------------- */

/* TYPE DEFINITIONS */

typedef struct
{
    int flags;
    int scan_code;
    int key_code;
} key_event;

typedef struct {
  int pollword; /* actual pollword */
  int used;     /* whether this entry is in use or not */
} pw_table_entry; /* individual entry of poll word table */

/* ---------------------------------------------------------------------------------------------------- */

/* GLOBALS */

static int eventv_count = 0;	/* control claiming EventV */
static int keyv_count = 0;	/* control claiming KeyV */

static pw_table_entry pollword_table[PW_TABLE_SIZE];	/* table of registered pollwords */

static key_event scan_key_table[KEY_TABLE_SIZE];	/* queue of key events */
static int scan_key_head = 0;				/* first free entry */
static int scan_key_tail = 0;				/* first used entry */

static int scan_flags = 0;				/* flags set by RegisterScan */
static int scan_task = NULL_TASK;			/* task handle passed to RegisterScan */
static int scan_shift_state = 0;			/* current shift state */
static int scan_last_down = NULL_KEY;			/* last scan that went down */
static int scan_last_key = NULL_KEY;			/* last inserted keycode */
static int scan_overflows = 0;				/* number of overflows since last poll */
static int scan_buffer_count = 0;			/* count of number of buffer event received between scans */

/* ---------------------------------------------------------------------------------------------------- */

static char *errors[] =
{
    "Cannot register keywatch - table full",
    "Cannot deregister keywatch - bad pollword handle",
    "KeyWatch: can't exit as tasks are registered",
    "KeyWatch: a task is already registered for key scans",
    "KeyWatch: this task is not registered for key scans"
};

#define E(a) (0x80 | (a))

#if 1

/* This is the PC-XT scan code set */
#define KEY_PRTSCR	"\xE0\x2A\xE0\x37"
#define KEY_BREAK	"\xE1\x1D\x45\xE1\x9D\xC5"

static char internal_to_ps2_code[128] =
{
    0x01, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41,				/* Esc - F7 */
    0x42, 0x43, 0x44, 0x57, 0x58, 0x00, 0x46, 0x01,				/* F8 - Break */
    0x29, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,				/* ` - 7 */
    0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x00, 0x0E, E(0x52),				/* 8 - INSERT */
    E(0x47), E(0x49), 0x45, E(0x35), 0x37, 0x2B, 0x0F, 0x10,			/* Home - Q */
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,				/* W - O */
    0x19, 0x1A, 0x1B, 0x2B, E(0x53), E(0x4F), E(0x51), 0x47,			/* P - 7 */
    0x48, 0x49, 0x4A, 0x1D, 0x1E, 0x1F, 0x20, 0x21,				/* 8 - F */
    0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x1C,				/* G - ENTER */
    0x4B, 0x4C, 0x4D, 0X4E, 0x2A, 0x56, 0x2C, 0x2D,				/* 4 - X */
    0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,				/* C - / */
    0x36, E(0x48), 0x4F, 0x50, 0x51, 0x3A, 0x38, 0x39,				/* Shift R - SPACE */
    E(0x38), E(0x1D), E(0x4B), E(0x50), E(0x4D), 0x52, 0x53, E(0x1C)		/* Alt R - Enter */
};

#else

/* This is the AT-02 scan code set */
#define KEY_PRTSCR	"\xE0\x12\xE0\x7C"
#define KEY_BREAK	"\x14\x77\xF0\x14\xF0\x77"

static char internal_to_ps2_code[128] =
{
    0x76, 0x05, 0x06, 0x04, 0x0C, 0x03, 0x0B, 0x83,				/* Esc - F7 */
    0x0A, 0x01, 0x09, 0x78, 0x07, 0x00, 0x7E, 0x01,				/* F8 - Break */
    0x0E, 0x16, 0x1E, 0x26, 0x25, 0x2E, 0x36, 0x3D,				/* ` - 7 */
    0x3E, 0x46, 0x45, 0x4E, 0x55, 0x66, 0x0D, E(0x70),				/* 8 - INSERT */
    E(0x6C), E(0x7D), 0x77, E(0x4A), 0x7C, 0x5D, 0x0D, 0x15,			/* Home - Q */
    0x1D, 0x24, 0x2D, 0x2C, 0x35, 0x3C, 0x43, 0x44,				/* W - O */
    0x4D, 0x54, 0x5B, 0x5D, E(0x71), E(0x69), E(0x7A), 0x6C,			/* P - 7 */
    0x75, 0x7D, 0x7B, 0x14, 0x1C, 0x1B, 0x23, 0x2B,				/* 8 - F */
    0x34, 0x33, 0x3B, 0x42, 0x4B, 0x4C, 0x52, 0x5A,				/* G - ENTER */
    0x6B, 0x73, 0x74, 0x79, 0x12, 0x61, 0x1A, 0x22,				/* 4 - X */
    0x21, 0x2A, 0x32, 0x31, 0x3A, 0x41, 0x49, 0x4A,				/* C - / */
    0x59, E(0x75), 0x69, 0x72, 0x7A, 0x58, 0x11, 0x29,				/* Shift R - SPACE */
    E(0x11), E(0x14), E(0x6B), E(0x72), E(0x74), 0x70, 0x71, E(0x5A)		/* Alt R - Enter */
};

#endif

/* ---------------------------------------------------------------------------------------------------- */

static _kernel_oserror global_error;

static _kernel_oserror *makeerror(int errnum)
{
    global_error.errnum = errnum;
    strcpy(global_error.errmess, errors[errnum - KeyWatch_Error_BASE]);

    return &global_error;
}

/* ---------------------------------------------------------------------------------------------------- */

/* The C part of the handler */

int keyv_veneer_handler(_kernel_swi_regs *r, void *pw)
{
    int count; /* boring loop count variable */

    /* if the reason is a key press or release or dummy keyboard */
    if ( (r->r[0] == 1) || (r->r[0] == 2) || (r->r[0] == KeyV_DummyKeyboard) )
    {
	/* if it is a mouse button that has been pressed */
	if ( (r->r[1] >= 0x70) && (r->r[1] <= 0x72) )
	    return 1; /* don't claim the vector and don't do anything else */

	for (count=0; count < PW_TABLE_SIZE; count++)
	{
	    if (pollword_table[count].used)
		pollword_table[count].pollword++;
	} /* for */
    }

    return 1; /* don't claim the vector */
    NOT_USED(pw);
} /* keyv_handler */

static _kernel_oserror *kw_swi_register(void **pollword, void *pw)
{
    _kernel_oserror *e = NULL;
    int count; /* boring count variable */
    int cont=1; /* whether to continue looping */

    /* Find an empty table entry */
    for (count=0; (count < PW_TABLE_SIZE) && cont;
	 count++)
    {
	if (pollword_table[count].used == 0)
	    cont = 0;
    }
    
    if (cont) /* table is full */
	e = makeerror(KeyWatch_Error_TABLE_FULL);

    if (!e && keyv_count++ == 0)
	e = _swix(OS_Claim, _INR(0,2), KeyV, keyv_veneer, pw);

    if (!e)
    {
	/* count is now one past what it should be, so go back */
	count--;

	/* mark as used */
	pollword_table[count].used = 1;

	/* reset pollword */
	pollword_table[count].pollword = 0;

	/* return pollword address in r0 */
	*pollword = &(pollword_table[count].pollword);
    }

    return e;
}

static _kernel_oserror *kw_swi_deregister(void *pollword, void *pw)
{
    _kernel_oserror *e = NULL;
    int count; /* boring count variable */
    int cont=1; /* whether to continue looping */

    /* find passed pollword in table - I actually look
     * for it, rather than just add 1 to get to the
     * used field, to verify that it is actually in
     * the table, and not spurious */
    for (count=0; (count < PW_TABLE_SIZE) && cont;
	 count++)
    {
	if (pollword_table[count].used)
	{
	    if (pollword == &(pollword_table[count].pollword))
		cont=0;
	} /* if */
    } /* for */

    if (cont) /* reached the end of the table */
	e = makeerror(KeyWatch_Error_BAD_POLLWORD);

    if (!e)
    {
	/* set unused - NB count is one more than it should
	 * be so we decrement it */
	pollword_table[--count].used = 0;

	if (--keyv_count == 0)
	    e = _swix(OS_Release, _INR(0,2), KeyV, keyv_veneer, pw);
    }
    
    return e;
}

/* ---------------------------------------------------------------------------------------------------- */

static void update_shift(int updown, int internal_code)
{
    int key = 0;
    switch (internal_code)
    {
    case 0x3B:
	key = KeyWatch_State_LEFT_CTRL_DOWN;
	break;
    case 0x4C:
	key = KeyWatch_State_LEFT_SHIFT_DOWN;
	break;
    case 0x58:
	key = KeyWatch_State_RIGHT_SHIFT_DOWN;
	break;
    case 0x5E:
	key = KeyWatch_State_LEFT_ALT_DOWN;
	break;
    case 0x60:
	key = KeyWatch_State_RIGHT_ALT_DOWN;
	break;
    case 0x61:
	key = KeyWatch_State_RIGHT_CTRL_DOWN;
	break;
    }

    if (key)
    {
	if (updown == EventV_Key_Up)
	    scan_shift_state &= ~key;
	else
	    scan_shift_state |=  key;
    }
}

static void add_entry(int flags, int scan_code, int key_code)
{
    key_event *k;

    flags |= scan_shift_state;

    if (scan_flags & KeyWatch_RegisterScan_MESSAGE)
    {
	/* send message or register callback not sure which */
	WimpMessage msg;

	msg.hdr.size = sizeof(msg.hdr) + sizeof(key_event);
	msg.hdr.action_code = KeyWatch_00;
	msg.hdr.your_ref = 0;

	k = (key_event *)&msg.data;
	k->flags = flags;
	k->scan_code = scan_code;
	k->key_code = key_code;

	_swix(TaskModule_SendMessage, _INR(0,5), 0, &msg, scan_task, 0, 0, 0);
    }
    else
    {
	k = &scan_key_table[scan_key_head];

	k->flags = flags;
	k->scan_code = scan_code;
	k->key_code = key_code;

	/* wrap wround at end of table */
	if (++scan_key_head == KEY_TABLE_SIZE)
	    scan_key_head = 0;

	/* if we're not reading keys out quick enough then drop the oldest item */
	if (scan_key_tail == scan_key_head)
	{
	    if (++scan_key_tail == KEY_TABLE_SIZE)
	    {
		scan_key_tail = 0;
		scan_overflows++;
	    }
	}
    }
}

static void add_ps2(int flags, int code)
{
    if (code & 0x80)
    {
	add_entry(flags, 0xE0, NULL_KEY);
	code &= 0x7F;
    }

    if (flags & KeyWatch_Event_KEY_GOING_UP)
	code |= 0x80;
		
    add_entry(flags, code, NULL_KEY);
}

static void key_transition(int updown, int internal_code)
{
    update_shift(updown, internal_code);

    if ((internal_code < 0x70 || (scan_flags & KeyWatch_RegisterScan_MOUSE)) && 
	(scan_flags & KeyWatch_RegisterScan_SCAN_CODES))
    {
	int flags;

	/* get base flags */
	flags = KeyWatch_Event_SCAN_CODE_VALID;
	if (updown == EventV_Key_Up)
	    flags |= KeyWatch_Event_KEY_GOING_UP;

	/* translate internal scan code if necessary */
	if (scan_flags & KeyWatch_RegisterScan_PS2)
	{
	    /* two special case keys */
	    if (internal_code == 0x0D || internal_code == 0x0F)
	    {
		const char *s = internal_code == 0x0D ? KEY_PRTSCR : KEY_BREAK;
		int c;
		while ((c = *s++) != 0)
		    add_entry(flags, c, NULL_KEY);

		/* internal_code = 0x100 + internal_to_ps2_code[internal_code]; */
		internal_code = NULL_KEY;
	    }
	    else
	    {
		internal_code = internal_to_ps2_code[internal_code & 0x7F]; /* mask bits to ensure safe lookup */

		/* if unused then ignore entirely */
		if (internal_code == 0)
		    internal_code = NULL_KEY;
		else
		    add_ps2(flags, internal_code);
	    }
	}
	else
	{
	    add_entry(flags, internal_code, NULL_KEY);
	}
    }

    /* update the last key down */
    if (updown == EventV_Key_Down)
	scan_last_down = internal_code;
}

static int key_input(int buffer_code)
{
    if (buffer_code != 0 || scan_last_key == 0)
    {
	add_entry(KeyWatch_Event_KEY_CODE_VALID |
		  (scan_last_down == NULL_KEY ? 0 : KeyWatch_Event_SCAN_CODE_VALID) |
		  (scan_last_key == 0 ? KeyWatch_Event_LAST_WAS_NUL : 0),
		  scan_last_down,
		  buffer_code);
    }
    
    scan_last_key = buffer_code;
    scan_last_down = NULL_KEY;

    return 1;
}

int eventv_veneer_handler(_kernel_swi_regs *r, void *pw)
{
    switch (r->r[0])
    {
    case EventV_Key:
	key_transition(r->r[1], r->r[2]);
	scan_buffer_count = 0;
	break; 

    case EventV_Input:
	if (r->r[1] == Buffer_Keyboard)
	{
	    if (scan_flags & KeyWatch_RegisterScan_BUFFER_CODES)
	    {
		/* process key */
		key_input(r->r[2]);
		
		scan_buffer_count++;
	    }
	    else if ((scan_flags & (KeyWatch_RegisterScan_SCAN_CODES | KeyWatch_RegisterScan_PS2)) ==
		     (KeyWatch_RegisterScan_SCAN_CODES | KeyWatch_RegisterScan_PS2))
	    {
		/* auto-repeat PS/2 scan code */
		if (scan_last_down != NULL_KEY && scan_buffer_count++ > 0)
		{
		    add_ps2(KeyWatch_Event_SCAN_CODE_VALID | KeyWatch_Event_KEY_GOING_UP, scan_last_down);
		    add_ps2(KeyWatch_Event_SCAN_CODE_VALID, scan_last_down);
		}
	    }

	    /* remove key from buffer */
	    if (scan_flags & KeyWatch_RegisterScan_CONSUME_BUFFER)
		_swix(OS_Byte, _INR(0,1), 145, Buffer_Keyboard);
	}
	break;
    }

    return 1; /* don't claim the vector */
    pw = pw;
}

/* ---------------------------------------------------------------------------------------------------- */

static _kernel_oserror *kw_swi_register_scan(int flags, int task, void *pw)
{
    _kernel_oserror *e = NULL;

    /* for now only one claimant at a time for simplicity */
    if (eventv_count)
	e = makeerror(KeyWatch_Error_ALREADY_REGISTERED);
    
    if (!e && eventv_count++ == 0)
    {
	e = _swix(OS_Claim, _INR(0,2), EventV, eventv_veneer, pw);
	if (!e) e = _swix(OS_Byte, _INR(0,1), OSByte_EnableEvent, EventV_Input);
	if (!e) e = _swix(OS_Byte, _INR(0,1), OSByte_EnableEvent, EventV_Key);
    }

    if (!e)
    {
	scan_flags = flags;
	scan_task = task;
    }
    
    return e;
}

static _kernel_oserror *kw_swi_deregister_scan(int flags, int task, void *pw)
{
    _kernel_oserror *e = NULL;

    if (scan_task != task)
	e = makeerror(KeyWatch_Error_NOT_REGISTERED);
    
    if (!e && --eventv_count == 0)
    {
	e = _swix(OS_Byte, _INR(0,1), OSByte_DisableEvent, EventV_Input);
	if (!e) e = _swix(OS_Byte, _INR(0,1), OSByte_DisableEvent, EventV_Key);
	if (!e) e = _swix(OS_Release, _INR(0,2), EventV, eventv_veneer, pw);
    }

    if (!e)
    {
	scan_flags = 0;
	scan_task = NULL_TASK;

	/* dispose of any pending keys */
	scan_key_head = scan_key_tail = 0;
    }
    
    return e;
    NOT_USED(flags);
}

static _kernel_oserror *kw_swi_poll(int *pflags, int task, key_event **pbuf, int *pbuf_size, int *pnentries, int *entry_size)
{
    _kernel_oserror *e = NULL;

    if (scan_task != task)
	e = makeerror(KeyWatch_Error_NOT_REGISTERED);
    
    if (!e)
    {
	key_event *buf = *pbuf;
	int buf_size = *pbuf_size;
	int nentries;

	if (buf == NULL)
	{
	    nentries = (scan_key_head < scan_key_tail ? KEY_TABLE_SIZE : 0) + (scan_key_head - scan_key_tail);
	    buf_size = nentries * sizeof(key_event);
	}
	else
	{
	    nentries = *pnentries;
	    while (scan_key_tail != scan_key_head && buf_size >= sizeof(key_event) && nentries > 0)
	    {
		/* write out buffer entry */
		*buf++ = scan_key_table[scan_key_tail];
		buf_size -= sizeof(key_event);
		nentries--;

		/* wrap around to the start of the table */
		if (++scan_key_tail == KEY_TABLE_SIZE)
		    scan_key_tail = 0;
	    }
	}

	*pbuf = buf;
	*pbuf_size = buf_size;
	*entry_size = sizeof(key_event);
	*pflags = scan_overflows ? KeyWatch_Poll_HAD_OVERFLOW : 0;
	*pnentries = nentries;

	if (buf)
	    scan_overflows = 0;
    }
    return e;
}

/* ---------------------------------------------------------------------------------------------------- */

_kernel_oserror *kw_swi_handler(int swi_no, _kernel_swi_regs *r, void *private_word)
{
    _kernel_oserror *e = error_BAD_SWI;

    switch (swi_no)
    {
    case KeyWatch_Register - KeyWatch_00:
	e = kw_swi_register((void **)&r->r[0], private_word);
	break;

    case KeyWatch_Deregister - KeyWatch_00:
	e = kw_swi_deregister((void *)r->r[0], private_word);
	break;

    case KeyWatch_Version - KeyWatch_00:
	r->r[0] = FEATURES;
	r->r[1] = Module_VersionNumber;		/* from CMHG */
	r->r[2] = (int)Module_MinorVersion;	/* from VersionNum */
	e = NULL;
	break;

    case KeyWatch_RegisterScan - KeyWatch_00:
	e = kw_swi_register_scan(r->r[0], r->r[1], private_word);
	break;
	
    case KeyWatch_DeregisterScan - KeyWatch_00:
	e = kw_swi_deregister_scan(r->r[0], r->r[1], private_word);
	break;

    case KeyWatch_Poll - KeyWatch_00:
	e = kw_swi_poll(&r->r[0], r->r[1], (key_event **)&r->r[2], &r->r[3], &r->r[4], &r->r[1]);
	break;
    }

    return e;

} /* swi_handler */


/* Module initialisation code */

_kernel_oserror *kw_initialise(const char *cmd_tail, int podule_base, void *private_word)
{
    /* Initialise poll word table */
    memset(&pollword_table[0], 0, sizeof(pollword_table[0]) * PW_TABLE_SIZE);
    memset(&scan_key_table[0], 0, sizeof(scan_key_table[0]) * KEY_TABLE_SIZE);

    return NULL;
    NOT_USED(cmd_tail);
    NOT_USED(podule_base);
    NOT_USED(private_word);
} /* kw_initialise */


/* Module exit code */

_kernel_oserror *kw_final(int fatal, int podule, void *private_word)
{
    if (keyv_count || eventv_count)
	return makeerror(KeyWatch_Error_CANT_EXIT);
    return NULL;
    NOT_USED(fatal);
    NOT_USED(podule);
    NOT_USED(private_word);
} /* kw_final */

_kernel_oserror *kw_commands(const char *arg_string, int argc, int cmd_no, void *private_word)
{
    switch (cmd_no)
    {
    case CMD_KeyWatchForceClose:
	if (eventv_count)
	    (void)kw_swi_deregister_scan(0, scan_task, private_word);
	
	if (keyv_count)
	{
	    (void)_swix(OS_Release, _INR(0,2), KeyV, keyv_veneer, private_word);
	    keyv_count = 0;
	    memset(&pollword_table[0], 0, sizeof(pollword_table[0]) * PW_TABLE_SIZE);
	}
	break;
    }
    return NULL;
    NOT_USED(argc);
    NOT_USED(arg_string);
}

/* eof KeyWatch.c */
