/* > uniqueid.h
 *
 *      UniqueID header.
 */


#define UNIQUEID_NVRAM_TAG	"UniqueID"
#define UNIQUEID_NVRAM_LENGTH	16

#define UNIQUEID_BIOSPATCH_REASON	0
#define UNIQUEID_BIOSPORT_REASON	1
#define UNIQUEID_NCOSPATCH_REASON	2
#define UNIQUEID_NCOSPORT_REASON	3


typedef unsigned char byte;

/* The following structure defines the version 1 unique ID block.	*/
/* Note that it is defined byte by byte as the byte order within words	*/
/* is big-endian.							*/

#define UNIQUEID_SERIALTYPE_NCI		1
#define UNIQUEID_SERIALTYPE_ETHERID	2
#define UNIQUEID_SERIALTYPE_EEPROM	3
#define UNIQUEID_SERIALTYPE_DALLASID	4

#define UNIQUEID_SERIAL_MAX		16

typedef struct _uniqueid
{
	byte serial_version;			/* Version of structure (this is v.1)	*/
	byte serial_type;			/* Type of serial_info			*/
						/*	1 = NCI assigned		*/
						/*	2 = ethernet ID			*/
						/*	3 = manufacturer assigned	*/
						/*	4 = Dallas ID			*/
	byte manid_high;			/* Manufacturer ID (NCI assigned)	*/
	byte manid_low;
	byte model_high;			/* Model number (manufacturer assigned)	*/
	byte model_low;
	byte bios_major;			/* BIOS version				*/
	byte bios_minor;
	byte bios_patch;
	byte bios_port;
	byte ncos_major;			/* NC OS version			*/
	byte ncos_minor;
	byte ncos_patch;
	byte ncos_port;
	byte serial_len;			/* Length of serial_info		*/
	byte serial_info[UNIQUEID_SERIAL_MAX];	/* Serial info bytes.			*/
}
uniqueid;


extern _kernel_oserror *uniqueid_initialise( void );
extern _kernel_oserror *uniqueid_read( _kernel_swi_regs *r );
extern _kernel_oserror *uniqueid_set( _kernel_swi_regs *r );
