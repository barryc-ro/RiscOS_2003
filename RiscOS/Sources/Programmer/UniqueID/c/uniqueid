/* > uniqueid.c
 *
 *	  UniqueID code.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "uniqueid.h"
#include "export/uniqueid.h"
#include "idblock.h"
#include "nvram.h"


static int UniqueIDVersion = 0;
static int UniqueIDSize = 0;
static char *UniqueID = NULL;


#if 0
static unsigned char *
StoreBigEndian( unsigned char *bp, int word, int size )
{
	size = (size - 1) * 8;			/* Bits to shift. */
	while ( size )
	{
		*bp++ = (unsigned char)(word >> size);
		size -= 8;
	}
	return bp;
}
#endif


#ifdef ETHERID
static void
ParseEtherID( char *id, int *idlow, int *idhigh )
{
	int low = 0, high = 0;

	while ( *id != '\0' )
	{
		int nibble = (*id++ - '0');
		if ( nibble > 9 ) nibble -= 'A'-'9'-1;
		if ( nibble > 15 ) nibble -= 'a'-'A';
		high = (high << 4) + (low >> 28);
		low = (low << 4) + nibble;
	}
	*idlow = low;
	*idhigh = high;
}
#endif


static int
Checksum( unsigned char *cp, int len, int sum )
{
	while ( len-- ) sum += *cp++;
	return sum & 0xFF;
}


static char *
GetOSVersion( void )
{
	int modbase;
	_kernel_oserror *err = _swix( OS_Module, _INR(0,1)|_OUT(3), 18, "OSVersion", &modbase );
	return ( err == NULL ) ? (char *)(modbase + *(int *)(modbase + 0x14)) : NULL;
}


static void
InitOTPBlock( int version, void *otp, int length )
{
	/* Do checksum if required. */
	if ( version == 4 )
	{
		if ( Checksum((unsigned char *)otp, length, 0) )
		{
			memset( otp, 0, length );
		}
	}
}


static void
InitUniqueID_1( void )
{
	uniqueid_1 *uid = (uniqueid_1 *)malloc( sizeof(uniqueid_1) );

	if ( uid != NULL )
	{
		char *osversion = GetOSVersion();
		int length;

		/* Copy template unique ID. */
		memcpy( uid, idblock_start_address, sizeof(uniqueid_1) );

		/* Fill in NC OS and BIOS version numbers. */
		if ( osversion != NULL )
		{
			char *sep = strchr( osversion, '.' );
			if ( sep != NULL )
			{
				char *spc = sep;
				while ( (spc != osversion) && (*spc != ' ') && (*spc != 9) ) spc--;
				uid->bios_major = uid->ncos_major = atoi( spc + 1 );
				uid->bios_minor = uid->ncos_minor = atoi( sep + 1 );
			}
		}

#ifndef ETHERID
		/* Fill in OTP block. */
		_swix( NVRAM_Read, _INR(0,2)|_OUT(0), UNIQUEID_NVRAM_TAG, 0, 0, &length );
		if ( length > 0 )
		{
			if ( length > UNIQUEID_OTP_MAX ) length = UNIQUEID_OTP_MAX;
			uid->otp_len = length;
			_swix( NVRAM_Read, _INR(0,2), UNIQUEID_NVRAM_TAG, uid->otp_raw, length );
		}
#else
		length = UNIQUEID_OTP_MAX;
#endif

		/* Do any initialisation required. */
		InitOTPBlock( uid->otp_version, (void *)uid->otp_raw, length );

		UniqueIDVersion = uid->version;
		UniqueIDSize = sizeof( uniqueid_1 );
		UniqueID = (char *)uid;
	}
}


static void
InitUniqueID_2( void )
{
	uniqueid_2 *uid = (uniqueid_2 *)malloc( sizeof(uniqueid_2) );

	if ( uid != NULL )
	{
		char *osversion = GetOSVersion();
		int length;

		/* Copy template unique ID. */
		memcpy( uid, idblock_start_address, sizeof(uniqueid_2) );

		/* Fill in NC OS version numbers. */
		if ( osversion != NULL )
		{
			char *sep = strchr( osversion, '.' );
			if ( sep != NULL )
			{
				char *spc = sep;
				while ( (spc != osversion) && (*spc != ' ') && (*spc != 9) ) spc--;
				uid->ncos_major = atoi( spc + 1 );
				uid->ncos_minor = atoi( sep + 1 );
			}
		}

#ifndef ETHERID
		/* Fill in OTP block. */
		_swix( NVRAM_Read, _INR(0,2)|_OUT(0), UNIQUEID_NVRAM_TAG, 0, 0, &length );
		if ( length > 0 )
		{
			if ( length > UNIQUEID_OTP_MAX ) length = UNIQUEID_OTP_MAX;
			uid->otp_len = length;
			_swix( NVRAM_Read, _INR(0,2), UNIQUEID_NVRAM_TAG, uid->otp.raw, length );
		}
#else
		/* Set up dummy OTP section. */
		{
			otp_4 *otp = &uid->otp.otp4;

			otp->checksum = 0x00;
			otp->reserved1 = 0xFF;
			otp->reserved2 = 0xFF;
			otp->reserved3 = 0xFF;
			otp->reserved4 = 0xFFFFFFFF;
			ParseEtherID( ETHERID, (int *)&otp->ethernetid[0], (int *)&otp->ethernetid[4] );
			otp->reserved5 = 0xFF;
			otp->reserved6 = 0xFF;
			length = sizeof( otp_4 );
			otp->checksum = ~Checksum( (unsigned char *)otp, length, -1 );
		}
#endif

		/* Do any initialisation required. */
		InitOTPBlock( uid->otp_version, (void *)uid->otp.raw, length );
 
		UniqueIDVersion = uid->version;
		UniqueIDSize = sizeof( uniqueid_2 );
		UniqueID = (char *)uid;
	}
}


_kernel_oserror *
uniqueid_initialise( void )
{
	uniqueid_header *phead = (uniqueid_header *)idblock_start_address;

	switch ( phead->version )
	{
		case 1:
			InitUniqueID_1();
			break;

		case 2:
			InitUniqueID_2();
			break;
	}

	return NULL;
}


void
uniqueid_finalise( void )
{
	if ( UniqueID ) free( UniqueID );
}


_kernel_oserror *
uniqueid_read( _kernel_swi_regs *r )
{
	if ( r->r[1] )
	{
		int size = r->r[2];
		if ( size > UniqueIDSize ) size = UniqueIDSize;
		memcpy( (char *)r->r[1], UniqueID, size );
		r->r[2] = size;
	}
	else
	{
		r->r[2] = UniqueIDSize;
	}

	return NULL;
}


_kernel_oserror *
uniqueid_set( _kernel_swi_regs *r )
{
	switch ( UniqueIDVersion )
	{
		case 1:
		{
			uniqueid_1 *uid = (uniqueid_1 *)UniqueID;

			switch ( r->r[0] )
			{
				case UNIQUEID_BIOSPATCH_REASON:
					uid->bios_patch = r->r[1];
					break;

				case UNIQUEID_BIOSPORT_REASON:
					uid->bios_port = r->r[1];
					break;

				case UNIQUEID_NCOSPATCH_REASON:
					uid->ncos_patch = r->r[1];
					break;

				case UNIQUEID_NCOSPORT_REASON:
					uid->ncos_port = r->r[1];
					break;
			}
		}
		break;

		case 2:
		{
			uniqueid_2 *uid = (uniqueid_2 *)UniqueID;

			switch ( r->r[0] )
			{
				case UNIQUEID_NCOSPATCH_REASON:
					uid->ncos_patch = r->r[1];
					break;

				case UNIQUEID_NCOSPORT_REASON:
					uid->ncos_port = r->r[1];
					break;
			}
		}
		break;
	}

	return NULL;
}

void
uniqueid_machineaddress( _kernel_swi_regs *r )
{
	if ( UniqueIDVersion == 2 )
	{
		uniqueid_2 *uid = (uniqueid_2 *)UniqueID;

		if ( uid->otp_version == 4 )
		{
			r->r[0] = *(int *)&(uid->otp.otp4.ethernetid[0]);
			r->r[2] = (*(int *)&(uid->otp.otp4.ethernetid[4])) & 0x0000FFFF;
			r->r[1] = 0;
		}
	}
}
