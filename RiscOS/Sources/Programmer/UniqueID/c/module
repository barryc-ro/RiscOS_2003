/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "uniqueid.h"
#include "error.h"


ERROR_STRUCT( BADSWI, "BadSWI" );


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

	return NULL;

	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
	_kernel_oserror *err = uniqueid_initialise();

	/* Try to use TinyStubs if possible.
	 */
	if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

	return err;

	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
	switch ( swi_no )
	{
		case 0: return uniqueid_read( r );
		case 1: return uniqueid_set( r );
		default:
			return _swix( MessageTrans_ErrorLookup, _INR(0,4), ERROR(BADSWI), 0, 0, 0, MODULE_NAME );
	}

	NOT_USED( pw );
}
