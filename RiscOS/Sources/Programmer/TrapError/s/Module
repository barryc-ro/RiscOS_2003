; > s.Module

TrapError_SWIBase	*	0x52DC0
TrapError_ErrorBase	*	0x816A00

	AREA	|Asm$$Code|, CODE, READONLY

; ***************************************************
; *
; * Module header block
; *
code_base
	DCD	module_start - code_base	; Module start entry point offset
	DCD	module_init - code_base		; Module intialisation entry point offset
	DCD	module_final - code_base	; Module finalisation entry point offset
	DCD	module_svc - code_base		; Module service call entry point offset
	DCD	module_title - code_base	; Module title string offset
	DCD	module_help - code_base		; Module version info string offset
	DCD	module_cmd_table - code_base	; Help and command keyword table offset
	DCD	TrapError_SWIBase		; SWI chunk (and DCX unique ID)
	DCD	module_swi_handler - code_base	; Module SWI handler entry point offset
	DCD	module_swis - code_base		; Module SWI table offset
	DCD	module_swidecode - code_base	; No SWI name decode entry
	DCD	module_messages - code_base	; No messages file
	DCD	module_flags - code_base	; Module flags word offset

; ***************************************************
; *
; * Module version, date (and copyright) string
; *
module_help
	DCB	"TrapError", 9, "$Module_MajorVersion ($Module_Date)"
 [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
 ]
	DCB	0
	ALIGN

; ***************************************************
; *
; *  Module title string and module SWI table
; *
module_title
module_swis
	DCB	"TrapError", 0
	DCB	"Off", 0
	DCB	"On", 0
	DCB	"AddError", 0
	DCB	"RemoveError", 0
	DCB	"ResetTable", 0
	DCB	0
	ALIGN

module_messages * code_base

; ***************************************************
; *
; * Module flags word
; *
module_flags
 [ No32bitCode
	DCD	0
 |
	DCD	ModuleFlag_32bit
 ]

; ***************************************************
; *
; * Some error blocks used by this module...
; *
error_blk_1E6
	DCD	&1E6
	DCB	"BadSWI", 0
	ALIGN
error_blk_816A00
	DCD	TrapError_ErrorBase + 0
	DCB	"This is not an error number which can be trapped by TrapError", 0
	ALIGN
error_blk_816A01
	DCD	TrapError_ErrorBase + 1
	DCB	"This action code is not supported by this version of TrapError", 0
	ALIGN
error_blk_816A02
	DCD	TrapError_ErrorBase + 2
	DCB	"TrapError can only trap upto 255 error numbers", 0
	ALIGN
error_blk_816A03
	DCD	TrapError_ErrorBase + 3
	DCB	"This TrapError SWI must have a flags word (R0) of zero", 0
	ALIGN
; ***************************************************
; *
; * Some routines for returning errors...
; *
bad_swi Entry
	ADR	R0,  error_blk_1E6
	MOV	R1,  #0
	MOV	R2,  #0
	ADR	R4,  module_title
	SWI	XMessageTrans_ErrorLookup
	SETV
	EXIT

bad_num ROUT
	ADR	R0, error_blk_816A00
	SETV
	MOV	PC, LR

bad_act ROUT
	ADR	R0, error_blk_816A01
	SETV
	MOV	PC, LR

too_many ROUT
	ADR	R0, error_blk_816A02
	SETV
	MOV	PC, LR

not_zero ROUT
	ADR	R0, error_blk_816A03
	SETV
	MOV	PC, LR

; ***************************************************
; *
; * Module execution start entry point
; *
module_start * code_base

; ***************************************************
; *
; * Module initialisation entry point
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
module_init Entry "R7-R11"
	; Claim a block of RMA memory for the module to keep track of it's dynamic areas
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #0x0C
	ORR	R3, R3, #0x0C00
	SWI	XOS_Module
	STR	R2, [R12]
	; Store a 'safe' zero at the end of the block to aviod ever running-off the end
	MOV	R0, #0
	ADD	R3, R2, R3
	STR	R0, [R3, #-4]
	; Claim the Error vector (our RMA pointer will be passed in R12)
	MOV	R0, #ErrorV
	ADR	R1, event_ErrorV
	SWI	XOS_Claim
	; Store the first words of the RMA block
	MOV	R12, R2
	MVN	R0, #0		; Initial state of the module is "ON" (-1)
	MVN	R1, #0		; Lowest error number in table (maxint)
	MOV	R2, #0		; Highest error number in table (minint)
	MOV	R3, #0		; End of table marker
	STMIA	R12, {R0-R3}
	EXIT

; ***************************************************
; *
; * Module finalisation entry point
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
module_final Entry "R7-R11"
	LDR	R2, [R12]
	LDR	R1, [R2]		; Load the first word to see if the module is "ON"
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
	TEQ	R1, #0		; Release the claimed Error vector if the module is "ON"
	BEQ	mod_final_exit
	MOV	R0, #ErrorV
	ADR	R1, event_ErrorV
	SWI	XOS_Release
mod_final_exit
	EXIT

; ***************************************************
; *
; * Module service call entry point
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
module_svc * code_base

; ***************************************************
; *
; * Claim a block of RMA memory
; *
; * In...
; *   R3 - size (bytes)
; * Out...
; *   R2 - block ptr
; *   R3 - preserved
; *
claim_rma Entry "R0-R1"
	MOV	R0, #ModHandReason_Claim
	SWI	XOS_Module
	EXIT	VC
	LDMIB	SP!, {R1, PC}

; ***************************************************
; *
; * Free a block of RMA memory
; *
; * In...
; *   R2 - block ptr
; * Out...
; *   R2 - preserved
; *
free_rma Entry "R0"
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
	EXIT	VC
	LDMIB	SP!, {PC}

; ***************************************************
; *
; * This code is called whenever any error is generated
; *
event_ErrorV ROUT
	TEQ	R0, #0			; Avoid nasty malformed errors (ie, null error block pointers)
	MOVEQ	PC, LR
	Entry	"R0-R4"
	BL	echo_error
	LDR	R0, [R0]		; Load the error number from the error block pointed to by R0
	LDMIA	R12!, {R2-R4}		; Read the current state, low and high words from the block
	; If the module is "OFF", we can exit here
	TEQ	R2, #0
	BEQ	errorV_exit
	; If the error number lies outside the range to check, exit
	MOV	R1, R0, LSR #1		; This is an unsigned comparison, so it throws away the bottom
	CMP	R1, R3, LSR #1		; bit. So numbers immediately adjacent to the range to check may
	RSBGTS	R3, R1, R4, LSR #1	; slip through...
	; If the error number is zero, we'll never have reached this point
	BLE	errorV_exit

	; See if this error number (in R0) matches any in the list pointed to by PWD
	BL	match_error
	; Will return with V flag set if no match was found
	; Otherwise, R0 and R2 contain the error number and PWD the pointer to the table entry + item_sz% bytes
	BVS	errorV_exit

	; What action code was there for this error?
	LDR	R0, [R12, #-8]
	CMP	R0, #0xFF
	BHI	skip
	CMP	R0, #1
	BEQ	skip_1			; If the action was to ignore the error, do it
	SWILO	OS_Reset		; If the action was to OS_Reset, do it
	LDR	R0, [R12, #-4]
	LDMIB	SP!, {R1-R4, PC}	; Pass-on the error with a new error block
skip
	; Action code was to call some code, add a CallBack to that address
	LDR	R1, [R12, #-4]
	AND	R2, R0, #3		; Read the low two flag bits
	EOR	R0, R2, R0		; Clear the flag bits in the address
	SWI	XOS_AddCallBack
	; See if the flag was set to ignore the error
	TEQ	R2, #1
skip_1
	EXIT				; Restore the registers we messed with
	MOVNE	PC, LR			; Pass-on the error as normal
	LDR	PC, [SP], #4		; Claim the error and exit the handler
errorV_exit
	EXIT

; ***************************************************
; *
; * Try to match the error number in R0 against those in the table (PWD)
; *
match_error ROUT
	LDR	R2, [R12], #12
	TEQ	R2, #0
	BEQ	matched
	CMP	R2, R0
	BNE	match_error
	EXIT
matched	SETV
	EXIT

; ***************************************************
; *
; * SWI decoding code
; *
module_swidecode * code_base

; ***************************************************
; *
; * Module SWI handler entry point
; *
; * In...
; *   R0-R9	= passed in from caller
; *   R11	= SWI number offset from SWI chunk base
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= values to return to caller
; *   R10-R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   N,Z,C	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
module_swi_handler ROUT
	RSBS	R11, R11, #(jump_end - jump_start) :SHR: 2
	ADDGE	PC, PC, R11, LSL #2
	B	bad_swi
jump_start
	B	SWI_TrapError_ResetTable
	B	SWI_TrapError_RemoveError
	B	SWI_TrapError_AddError
	B	SWI_TrapError_On
jump_end

; ***************************************************
; *
; * SWI TrapError_Off
; *
; * In...
; *   R0        = flags word (should be zero)
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_TrapError_Off ROUT
	TEQ	R0, #0
	BNE	not_zero
	Entry	"R0-R2"			; Stack the registers we're going to mess with
	; Read the current state
	LDR	R12, [R12]
	LDR	R0, [R12]
	TEQ	R0, #0
	BEQ	stay_off
	; The module is currently "ON", release the error vector and switch "OFF"
	MOV	R0, #ErrorV
	ADR	R1, event_ErrorV
	MOV	R2, R12
	SWI	XOS_Release
	BVS	son_error
	MOV	R0, #0
	STR	R0, [R12]
stay_off
	EXIT				; Exit the SWI

; ***************************************************
; *
; * SWI TrapError_On
; *
; * In...
; *   R0        = flags word (should be zero)
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
SWI_TrapError_On ROUT
	TEQ	R0, #0
	BNE	not_zero
	Entry	"R0-R2"			; Stack the registers we're going to mess with
	; Read the current state
	LDR	R12, [R12]
	LDR	R0, [R12]
	TEQ	R0, #0
	BNE	stay_on
	; The module is currently "OFF", claim the error vector and switch "ON"
	MOV	R0, #ErrorV
	ADR	R1, event_ErrorV
	MOV	R2, R12
	SWI	XOS_Claim
	BVS	son_error
	MVN	R0, #0
	STR	R0, [R12]
stay_on	EXIT				; Exit the SWI
son_error
	SETV
	EXIT				; Exit the SWI with an error

SWI_TrapError_AddError ROUT
	TEQ	R1, #0			; We don't allow trapping of error codes zero or minus one
	CMNNE	R1, #0
	BEQ	bad_num
	CMP	R0, #0xFF		; Filter-out any action codes which aren't implemented
	BLO	skip_8
	AND	R11, R0, #3
	CMP	R11, #2
	BLO	skip_9
	B	bad_act
skip_8	CMP	R0, #2
	BHI	bad_act
skip_9	MOV	R11, R2			; Copy the PWD parameter into R11 as we corrupt R2
	Entry	"R0-R4"
	LDR	R4, [R12]
	ADD	R12, R4, #0x0C
	; Swap registers R0 and R1
	EOR	R0, R0, R1
	EOR	R1, R0, R1		; R1 is now the validated action code
	EOR	R0, R0, R1		; R0 is now the error number to add
	; Look for this error code in the table
	BL	match_error
	; If there was a match, the V flag is clear
	SUB	R12, R12, #0x0C
	STMVCIA R12, {R0, R1, R11}
	BVC	skip_10
	; If no match was found, we need to see if there is room in the RMA block
	; to add a new item (with a trailing zero)
	SUB	R3, R12, R4
	CMP	R3, #0x0C00
	LDMGEFD SP!, {R0-R4, LR}
	BGE	too_many
	MOV	R2, R11
	MOV	R3, #0
	STMIA	R12, {R0-R3}
skip_10	LDMIB	R4, {R2, R3}
	MOV	R1, R0, LSR #1
	MOV	R10, R0, LSL #31
	; Compare this error against lowest (if lower, store)
	CMP	R1, R2, LSR #1
	CMPEQ	R10, R2, LSL #31
	SUB	R2, R0, #1
	STRLE	R2, [R4, #4]
	; Compare this error against highest (if higher, store number + 1)
	CMP	R1, R3, LSR #1
	CMPEQ	R10, R3, LSL #31
	ADD	R3, R0, #1
	STRGE	R3, [R4, #8]
	EXIT				; Exit the SWI

SWI_TrapError_RemoveError ROUT
	TEQ	R0, #0			; Trap non-zero flags word (R0)
	BNE	not_zero
	Entry	"R0-R5"
	LDR	R12, [R12]
	; Load the low and high words (move the error number into R0 to free-up R1,  then keep a copy of PWD)
	MOV	R0, R1
	LDMIB	R12, {R1, R2}
	MOV	R10, R12
	CMP	R0, R1
	SUBGTS  R3, R2, R0
	; Exit if this error number is outside the bounds of the table entries
	BLE	swi_re_exit
	; Is the number to remove the current highest/lowest in the list?
	ADD	R12, R12, #0x0C
	SUB	R2, R2, #1
	ADD	R1, R1, #1
	CMP	R0, R1
	CMPNE	R0, R2
	BNE	not_hi_lo
	MVN	R1, #0x80000000
	MOV	R2, #0xC0000000
	; Look for the number in the table (and keep track of the other highest and lowest values)
hi_lo	LDR	R3, [R12], #12
	TEQ	R3, #0
	BEQ     swi_re_exit		; The number is not in the table, exit the SWI
	TEQ	R3, R0
	BEQ	found
	CMP	R3, R1			; If this is the lowest, change our low word
	SUBLE	R1, R3, #1
	CMP	R3, R2			; If this is the highest, change our high word
	ADDGE	R2, R3, #1
	B	hi_lo
	; Move the following entries down, over this entry
found	SUB	R0, R12, #0x0C
	LDMIA	R12!, {R3-R5}
	TEQ	R3, #0
	STMIA	R0!, {R3-R5}
	BEQ	skip_11
	CMP	R3, R1			; If this is the lowest, change our low word
	SUBLE	R1, R3, #1
	CMP	R3, R2			; If this is the highest, change our high word
	ADDGE	R2, R3, #1
	B	found
skip_11	STMIB	R10, {R1, R2}		; Store the new lowest and highest words
	EXIT				; Exit the SWI
	; The number to remove isn't the highest or the lowest (we can just remove it)
not_hi_lo
	BL	match_error
	BVS	swi_re_exit		; Exit if the number wasn't in out list at all
	SUB	R0, R12, #0x0C
shuffle	LDMIA	R12!, {R3-R5}
	TEQ	R3, #0
	STMIA	R0!, {R3-R5}
	BNE	shuffle
swi_re_exit
	EXIT

SWI_TrapError_ResetTable Entry "R1-R3"
	LDR	R12, [R12]
	MVN	R1, #0			; Lowest error number in table (maxint)
	MOV	R2, #0			; Highest error number in table (minint)
	MOV	R3, #0			; End of table marker
	STMIB	R12, {R1-R3}
	EXIT

module_cmd_table
	; *Command 'TrapError_Off'
	DCB	"TrapError_Off", 0
	ALIGN
	DCD	TrapError_Off_Code - code_base		; Cmd code offset
	DCD	0					; Cmd info word
	DCD	TrapError_Off_Syntax - code_base	; Cmd syntax message offset
	DCD	TrapError_Off_Help			; Cmd help string offset
	; *Command 'TrapError_On'
	DCB	"TrapError_On", 0
	ALIGN
	DCD	TrapError_On_Code - code_base		; Cmd code offset
	DCD	0					; Cmd info word
	DCD	TrapError_On_Syntax - code_base		; Cmd syntax message offset
	DCD	TrapError_On_Help			; Cmd help string offset
	; *Command 'TrapError_AddError'
	DCB	"TrapError_AddError", 0
	ALIGN
	DCD	TrapError_AddError_Code - code_base	; Cmd code offset
	DCD	&30002					; Cmd info word
	DCD	TrapError_AddError_Syntax - code_base	; Cmd syntax message offset
	DCD	TrapError_AddError_Help			; Cmd help string offset
	; *Command 'TrapError_RemoveError'
	DCB	"TrapError_RemoveError", 0
	ALIGN
	DCD	TrapError_RemoveError_Code - code_base  ; Cmd code offset
	DCD	&10001					; Cmd info word
	DCD	TrapError_RemoveError_Syntax - code_base ; Cmd syntax message offset
	DCD	TrapError_RemoveError_Help		; Cmd help string offset
	; *Command 'TrapError_ResetTable'
	DCB	"TrapError_ResetTable", 0
	ALIGN
	DCD	TrapError_ResetTable_Code - code_base	; Cmd code offset
	DCD	0					; Cmd info word
	DCD	TrapError_ResetTable_Syntax - code_base ; Cmd syntax message offset
	DCD	TrapError_ResetTable_Help		; Cmd help string offset
	DCB	0
TrapError_Off_Help
	DCB	"Remove TrapError's filtering code from the error vector (ErrorV).", 13
TrapError_Off_Syntax
	DCB	"Syntax: *TrapError_Off", 0
TrapError_On_Help
	DCB	"Add TrapError's filtering code to the error vector (ErrorV).", 13
TrapError_On_Syntax
	DCB	"Syntax: *TrapError_On", 0
TrapError_AddError_Help
	DCB	"Add an error number to the list of those to trap. <flags> is defined as follows:", 13
	DCB	"0", 9, "Reboot when trapped", 13
	DCB	"1", 9, "Ignore error (don't pass-on)", 13
	DCB	"2", 9, "Replace error block with block pointed to by <private word>", 13
	DCB	"3-255", 9, "Reserved (do not use)", 13
	DCB	">255", 9, "Address of code to CallBack to. Bit 1 should be zero, bit 0 is a flag:", 13
	DCB	9, "0", 9, "Pass-on the error and call code", 13
	DCB	9, "1", 9, "Call code, don't pass-on the error", 13
	DCB	"If <flags> points to some code <private word> is the value to pass in R12. It will be"
	DCB	" entered in SVC mode with interrupts disabled.", 13
TrapError_AddError_Syntax
	DCB	"Syntax: *TrapError_AddError <flags> <error number> [<private word>]", 0
TrapError_RemoveError_Help
	DCB	"Remove an error from the list of those to trap.", 13
TrapError_RemoveError_Syntax
	DCB	"Syntax: *TrapError_RemoveError <error number>", 0
TrapError_ResetTable_Help
	DCB	"Reset the list of errors to trap to its initial state.", 13
TrapError_ResetTable_Syntax
	DCB	"Syntax: *TrapError_ResetTable", 0
cmd_args
	DCB	"/a/e,/a/e,/e", 0
cmd_args2
	DCB	"/a/e", 0
	ALIGN

; ***************************************************
; *
; * TrapError_Off CLI command entry point
; *
TrapError_Off_Code ROUT
	MOV	R0, #0	; Set flags word to zero
	B	SWI_TrapError_Off

; ***************************************************
; *
; * TrapError_On CLI command entry point
; *
TrapError_On_Code ROUT
	MOV	R0, #0	; Set flags word to zero
	B	SWI_TrapError_On

; ***************************************************
; *
; * TrapError_AddError CLI command entry point
; *
TrapError_AddError_Code Entry
	; Claim a block of RMA to use as a buffer
	MOV	R3, #0x80
	BL	claim_rma
	BVS	cmd_ae_err
	MOV	R6, R2
	; Ensure that the word containing the last half of the error number value
	; is zero initialised in case the pwd parameter is not passed
	MOV	R3, #0
	STR	R3, [R2, #20]
	 ; Parse the argument string into the buffer
	MOV	R1, R0
	ADR	R0, cmd_args
	MOV	R3, #0x50
	SWI	XOS_ReadArgs
	BVS	cmd_ae_err
	; Extract the SWI parameters from the buffer
	LDMIA	R2, {R3-R5}
	; Load word at R5 into R2 (private word, if supplied)
	TEQ	R5, #0
	BEQ	no_pwd
	ADD	R5, R5, #1
	BL	load_word
	MOV	R2, R0
	; Load word at R4 into R1 (error number)
no_pwd	ADD	R5, R4, #1
	BL	load_word
	MOV	R1, R0
	; Load word at R3 into R0 (flags word)
	ADD	R5, R3, #1
	BL	load_word
	BL	SWI_TrapError_AddError	; Call the 'AddError' SWI
	BVS	cmd_ae_err
	MOV	R2, R6
	BL	free_rma		; Free the RMA buffer
	EXIT	VC
cmd_ae_err
	SETV
	EXIT

; ***************************************************
; *
; * TrapError_RemoveError CLI command entry point
; *
TrapError_RemoveError_Code Entry
	; Claim a block of RMA to use as a buffer
	MOV	R3, #0x80
	BL	claim_rma
	BVS	cmd_re_err
	; Parse the argument string into the buffer
	MOV	R1, R0
	ADR	R0, cmd_args2
	MOV	R3, #0x50
	SWI	XOS_ReadArgs
	BVS	cmd_re_err
	; Extract the error number from the buffer (flags word is zero)
	LDR	R1, [R2]
	LDR	R3, [R1, #1]
	MOV	R0, #0
	LDR	R1, [R1, #5]
	AND	R1, R1, #0xFF000000
	ORR	R1, R3, R1
	BL	SWI_TrapError_RemoveError	; Call the 'RemoveError' SWI
	BVS	cmd_re_err
	BL	free_rma			; Free the RMA buffer
	EXIT	VS
cmd_re_err
	SETV
	EXIT

; ***************************************************
; *
; * TrapError_ResetTable CLI command entry point
; *
TrapError_ResetTable_Code ROUT
	B	SWI_TrapError_ResetTable

; ***************************************************
; *
; *
; *
callback_handler ROUT
	Push	"R0-R9, LR"
	; Load the time and error number from the RMA block
	LDMIA	R12, {R6, R7}
	; Open the file (move to end)
	BL	fappend
	; Steal 24 bytes from the stack for temp workspace
	SUB	SP, SP, #24
	; Write the error time in hex
	MOV	R0, R6
	MOV	R1, SP
	MOV	R2, #16
	SWI	XOS_ConvertHex8
	; Write a space
	MOV	R0, #0x20
	STRB	R0, [R1], #1
	; Write the error number in hex
	MOV	R0, R7
	MOV	R2, #16
	SWI	XOS_ConvertHex8
	; Write a space
	MOV	R0, #" "
	STRB	R0, [R1], #1
	MOV	R2, #0
	STRB	R2, [R1]
	; Output the string we've built in our temp workspace
	MOV	R0, SP
	BL	fputs
	; Restore the stack pointer
	ADD	SP, SP, #24
	; Write the error message
	ADD	R0, R12, #8
	BL	fputs
	; Write a newline, insert the 'Where?' routine and close file
	MOV	R0, #10
	BL	fputc
	;
	; Implementation of *Where functionality...
	;
	; Read the exception address (skip this section if there's an error)
	TST	R7, #0x80000000
	BEQ	end_where
	MOV	R0, #ExceptionDumpArea
	MOV	R1, #0
	SWI	XOS_ChangeEnvironment
	BVS	end_where
	LDR	R7, [R1, #60]
	BIC	R7, R7, #0xFC000003
	; Write 'Address &'
	ADR	R0, addr_txt
	BL	fputs
	; Write the address in hex
	MOV	R0, R7
	MOV	R1, R12
	MOV	R2, #16
	SWI	XOS_ConvertHex8
	BL	fputs
	; Find the module containing this address (if any)
	MOV	R1, #0
	MOV	R2, #0
find_module
	MOV	R0, #ModHandReason_GetNames
	SWI	XOS_Module
	BVS	no_module
	LDR	R4, [R3, #-4]
	SUBS	R0, R7, R3
	BLO	find_module
	CMP	R0, R4
	BHS	find_module
	; Write ' is at offset &'
	MOV	R8, R0
	ADR	R0, offset_txt
	BL	fputs
	; Write the offset in hex
	MOV	R0, R8
	MOV	R1, R12
	MOV	R2, #16
	SWI	XOS_ConvertHex8
	BL	fputs
	; Write ' in module '
	ADR	R0, in_mod_txt
	BL	fputs
	; Write the module title string and a newline
	LDR	R0, [R3, #16]
	ADD	R0, R3, R0
	BL	fputs
	MOV	R0, #10
	ADR	LR,end_where
	B	fputc
	; Write ' is not in any module' and a newline
no_module
	ADR	R0, not_in_txt
	BL	fputs
	MOV	R0, #10
	ADR	LR,end_where
	B	fputc
end_where
	BL	fclose
	; Free the RMA block
	MOV	R0, #ModHandReason_Free
	MOV	R2, R12
	SWI	XOS_Module
	Pull	"R0-R9, LR"
	MOV	PC, LR
TEMP_FILE
	DCB	"<TrapError$File>", 0
addr_txt
	DCB	"Address &", 0
offset_txt
	DCB	" is at offset &", 0
in_mod_txt
	DCB	" in module ", 0
not_in_txt
	DCB	" is not in any module", 0
	ALIGN

; ***************************************************
; *
; * The debug build of this module will output the time, error number and error message of all errors
; *
echo_error ROUT
	Push	"R0-R9, LR"
	; Read the error number and error string
	MOV	R9, R0
	; Claim a block of RMA to store the time and error block
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #0x0104
	SWI	XOS_Module
	; Read the time, error number and error message into the RMA block
	SWI	XOS_ReadMonotonicTime
	STR	R0, [R2]
	ADD	R1, R2, #4
	MOV	R0, R9
	LDR	R3, [R0], #4
	STR	R3, [R1], #4
	BL	scopy
	; Issue a CallBack (R12 will point to the start of the RMA block on entry)
	ADR	R0, callback_handler
	MOV	R1, R2
	SWI	XOS_AddCallBack
	Pull	"R0-R9, LR"
	MOV	PC, LR

; ***************************************************
; *
; * Copy word-aligned, ctrl char terminated string
; *
; * In...
; *   R0 - pointer to source string (word-aligned)
; *   R1 - pointer to destination string (word-aligned)
; * Out...
; *   R0 - preserved
; *   R1 - preserved
; *
scopy	Entry	"R0-R3"
	MOV	R3, #0x20 :SHL: 24
scopy_loop
	LDR	R2, [R0], #4
	CMP	R3, R2
	CMPHS	R3, R2, LSL #8
	STR	R2, [R1], #4
	CMPHS	R3, R2, LSL #16
	CMPHS	R3, R2, LSL #24
	BLO	scopy_loop
	EXIT

; ***************************************************
; *
; * If file exists, open read/write and move pointer to end, else create and open read/write
; *
; * In...
; *   -
; * Out...
; *   R9 - file handle
; *
fappend	Entry	"R0-R2"
	; Try to open an existing file
	MOV	R0, #0xC8
	ADR	R1, TEMP_FILE
	SWI	XOS_Find
	; If not found, create and open
	MOVVS	R0, #OSFind_OpenOut
	SWIVS	XOS_Find
	; Store file handle in R9
	MOV	R9, R0
	; Move the file pointer to the end of the file
	MOV	R1, R0
	MOV	R0, #OSArgs_ReadEXT
	SWI	XOS_Args
	TEQ	R2, #0
	MOVNE	R0, #OSArgs_SetPTR
	SWINE	XOS_Args
	EXIT

; ***************************************************
; *
; * Close a file
; *
; * In...
; *   R9 - file handle
; * Out...
; *   R9 - preserved
; *
fclose	Entry	"R0-R2"
	; Close the file
	MOV	R0, #0
	MOV	R1, R9
	SWI	XOS_Find
	; Set the filetype to text
	MOV	R0, #OSFile_SetType
	ADR	R1, TEMP_FILE
	MOV	R2, #0xFF
	ORR	R2, R2, #0x0F00
	SWI	XOS_File
	EXIT

; ***************************************************
; *
; * Write a character to a file
; *
; * In...
; *   R0 - character to write
; *   R9 - file handle
; * Out...
; *   R0 - corrupted
; *   R9 - preserved
; *
fputc	Entry	"R1"
	MOV	R1, R9
	SWI	XOS_BPut
	EXIT

; ***************************************************
; *
; * Write a ctrl char terminated string to a file
; *
; * In...
; *   R0 - pointer to string
; *   R9 - file handle
; * Out...
; *   R0 - corrupted
; *   R9 - preserved
; *
fputs	Entry	"R1-R3"
	; Look for the end of the string
	MOV	R1, R0
	LDRB	R2, [R1]
fputs_scan
	CMP	R2, #" "
	LDRHSB	R2, [R1, #1]!
	BHS	fputs_scan
	; Exit if the string is of zero length
	TEQ	R1, R0
	BEQ	fputs_exit
	; Output the string in one chunk
	MOV	R2, R0
	SUB	R3, R1, R0
	MOV	R0, #OSGBPB_WriteAtPTR
	MOV	R1, R9
	SWI	XOS_GBPB
fputs_exit
	EXIT

; ***************************************************
; *
; * Load a word from a non-aligned address
; *
; * In...
; *   R5 - address
; * Out...
; *   R0 - value
; *   R5 - preserved
; *
load_word
	BICS	R0, R5, #3
	BEQ	ld_wd_skip
	Entry	"R3-R4"
	LDMIA	R0, {R3, R4}
	AND	R0, R5, #3
	MOVS	R0, R0, LSL #3
	MOVNE	R3, R3, LSR R0
	RSBNE	R0, R0, #0x20
	ORRNE	R0, R3, R4, LSL R0
	EXIT
ld_wd_skip ROUT
	LDR	R3, [R0]
	EXIT

	END
