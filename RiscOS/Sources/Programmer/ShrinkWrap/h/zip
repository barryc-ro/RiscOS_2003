/*->h.zip */


#define ZIPSHRINK  1
#define ZIPIMPLODE 6
#define ZIPDEFLATE 8

#define LOCAL_FILE_HEADER_SIGNATURE    0x04034b50
#define CENTRAL_FILE_HEADER_SIGNATURE  0x02014b50
#define END_CENTRAL_DIR_SIGNATURE      0x06054b50


#define NOTINT16

typedef unsigned char byte; /* code assumes UNSIGNED bytes */
typedef int longint;
typedef unsigned short UWORD;
typedef unsigned int   ULONG;
typedef char boolean;

#define STRSIZ 256


#define min(a,b) ((a) < (b) ? (a) : (b))

/* #define zmemcpy memmove */
#define zmemset memset



/* Macros for accessing the longint header fields.  These fields
   are defined as array of char to prevent a 32-bit compiler from
   padding the struct so that longints start on a 4-byte boundary.
   This will not work on a machine that can access longints only
   if they start on a 4-byte boundary.
*/

#define LONGIP(I) &I
#define LONGI(I) I


typedef longint signature_type;



typedef struct local_file_header
{
    UWORD version_needed_to_extract;
    UWORD general_purpose_bit_flag;
    UWORD compression_method;
    UWORD last_mod_file_time;
    UWORD last_mod_file_date;
    longint crc32;              /* v2.0e */
    longint compressed_size;
    longint uncompressed_size;  /* v2.0e */
    UWORD filename_length;
    UWORD extra_field_length;
} local_file_header;



typedef struct local_byte_header
{
    byte version_needed_to_extract[2];
    byte general_purpose_bit_flag[2];
    byte compression_method[2];
    byte last_mod_file_time[2];
    byte last_mod_file_date[2];
    byte crc32[4];
    byte compressed_size[4];
    byte uncompressed_size[4];
    byte filename_length[2];
    byte extra_field_length[2];

} local_byte_header;



typedef struct central_directory_file_header
{
    UWORD version_made_by;
    UWORD version_needed_to_extract;
    UWORD general_purpose_bit_flag;
    UWORD compression_method;
    UWORD last_mod_file_time;
    UWORD last_mod_file_date;
    longint crc32;                  /* v2.0e */
    longint compressed_size;        /* v2.0e */
    longint uncompressed_size;      /* v2.0e */
    UWORD filename_length;
    UWORD extra_field_length;
    UWORD file_comment_length;
    UWORD disk_number_start;
    UWORD internal_file_attributes;
    longint external_file_attributes;       /* v2.0e */
    longint relative_offset_local_header;   /* v2.0e */
    char    extra[4];
} central_directory_file_header;




typedef struct central_directory_byte_header
{
    byte version_made_by[2];
    byte version_needed_to_extract[2];
    byte general_purpose_bit_flag[2];
    byte compression_method[2];
    byte last_mod_file_time[2];
    byte last_mod_file_date[2];
    byte crc32[4];
    byte compressed_size[4];
    byte uncompressed_size[4];
    byte filename_length[2];
    byte extra_field_length[2];
    byte file_comment_length[2];
    byte disk_number_start[2];
    byte internal_file_attributes[2];
    byte external_file_attributes[4];
    byte relative_offset_local_header[4];

} central_directory_byte_header;




typedef struct end_central_dir_record
{
    UWORD   number_this_disk;
    UWORD   number_disk_with_start_central_directory;
    UWORD   total_entries_central_dir_on_this_disk;
    UWORD   total_entries_central_dir;
    longint size_central_directory;         /* v2.0e */
    longint offset_start_central_directory; /* v2.0e */
    UWORD   zipfile_comment_length;
    char    comment[4];

} end_central_dir_record;




typedef struct end_central_byte_record
{
    byte number_this_disk[2];
    byte number_disk_with_start_central_directory[2];
    byte total_entries_central_dir_on_this_disk[2];
    byte total_entries_central_dir[2];
    byte size_central_directory[4];
    byte offset_start_central_directory[4];
    byte zipfile_comment_length[2];

} end_central_byte_record;






/* In CRC32.C */
extern void UpdateCRC(register unsigned char *s, register int len);
extern unsigned long crc32val;


UWORD   makeword(byte *b);
longint makelong(byte *sig);    /* v2.0e */

extern void unmakeword(byte * b,int word);
extern void unmakelong(byte * b,int word);


extern local_file_header lrec;
extern int ucsize;
extern int csize;


