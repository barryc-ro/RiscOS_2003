/*->c.vectors */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "h.etc"
#include "h.constants"

#include "h.err"


#include "h.main"
#include "h.mem"
#include "h.rminfo"

#include "h.fs"

#include "h.gbpb"
#include "h.file"
#include "h.find"
#include "h.args"


#include "h.veclink"
#include "h.vectors"




#define BYTEV 0x6
#define WORDV 0x7
#define FILEV 0x8
#define ARGSV 0x9
#define BGETV 0xA
#define BPUTV 0xB
#define GBPBV 0xC
#define FINDV 0xD
#define FSCV  0xF




/* #define DEBV 1  */



static int vskip;


void setvskip(int mode)
{
 vskip=mode;
}




/* return 0        claim     */
/* return 1        continue  */
/* return 2        call back */


static int oldfind;


int x_find(_kernel_swi_regs * r)
{
 if(!vskip)
 {
#ifdef DEBV
  printf("find %d\n",r->r[0]);
#endif

  oldfind=r->r[0];

  switch(r->r[0])
  {
   case  0: /* close a file */
           return(findclose(r));
           break;

   default:
           if(r->r[0]>=64 && r->r[0]<=255) return(findopen(r));
           break;
  }
 }         
 return(1);
}



int x_findp(_kernel_swi_regs * r)
{
 if(!vskip)
 {
  switch(oldfind)
  {
   case  0: /* close a file */
           return(findclosep(r));
           break;

   default:
           return(findopenp(r));
           break;
  }
 }         
 return(1);
}




int x_args(_kernel_swi_regs * r)
{
 if(!vskip)
 {
#ifdef DEBV
  printf("args %d\n",r->r[0]);
#endif

  switch(r->r[0])
  {
   case 7:
          return(argspath(r));
  }
 }         
 return(1);

}



int x_argsp(_kernel_swi_regs * r)
{
 if(!vskip)
 {
  switch(r->r[0])
  {
   case 7:
          return(argspathp(r));
  }
 }         
 return(1);
}





static int oldfile;



int x_file(_kernel_swi_regs * r)
{
 if(!vskip)
 {
#ifdef DEBV
  printf("file %d\n",r->r[0]);
#endif

  oldfile=r->r[0];

  switch(r->r[0])
  {
   case  7: /* create file */
   case 11:
   case  0: /* save block as a file */
   case 10:
           return(filesaveblock(r));

   case  1: /* write cat info */
   case  2:
   case  3:
   case  4:
   case  9:
   case 18:
           return(filewritecat(r));

   case  5:
   case 13:
   case 15:
   case 17:
           return(filereadcat(r));

   case  6: /* delete file */
           return(1);

   case  8: /* create directory */
           return(1);

   case 12:
   case 14:
   case 16:
   case 255:
            return(fileloadfile(r));

   case 19: /* generate error */
           return(1);

   case 20:
   case 21:
   case 22:
   case 23:
           return(filereadcat2(r));

   case 24: /* read natural block size */
           return(1);
  }
 }         
 return(1);
}


int x_filep(_kernel_swi_regs * r)
{
 if(!vskip)
 {
  switch(oldfile)
  {
   case  5:
   case 13:
   case 15:
   case 17:
           return(filereadcatp(r));

   case 20:
   case 21:
   case 22:
   case 23:
           return(filereadcat2p(r));
  }
 }         
 return(1);
}




int x_gbpb(_kernel_swi_regs * r)
{

 if(!vskip)
 {
#ifdef DEBV
  printf("gbpb %d\n",r->r[0]);
#endif

  switch(r->r[0])
  {
   case  1:
   case  2:
           return(gbpbwrite(r));

   case  3:
   case  4:
           return(gbpbread(r));

   case  5: /* read fs info */
   case  6:
   case  7:
           return(1);


   case  8: /* read names */
   case  9:
           return(1);

   case 10:
   case 11:
   case 12:
           return(gbpbreadentries(r));  
  }
 }

 return(1);
}



int x_gbpbp(_kernel_swi_regs * r)
{

 if(!vskip)
 {
  switch(r->r[0])
  {
   case  1:
   case  2:
           return(gbpbwritep(r));
           return(1);

   case  3:
   case  4:
           return(1);

   case  5: /* read fs info */
   case  6:
   case  7:
           return(1);


   case  8: /* read names */
           return(1);
 
   case  9:
   case 10:
   case 11:
   case 12:
           return(gbpbreadentriesp(r));  
  }
 }

 return(1);
}







int x_fsc(_kernel_swi_regs * r)
{
 if(!vskip)
 {
#ifdef DEBV
  printf("fsc %d\n",r->r[0]);
#endif

  switch(r->r[0])
  {
   case 22:          /* close all files */
           closeallfiles();
           break;

   case  4:          /* run a file */
           return(runfile(r));
           break;
  }
 }

 return(1);
}



int x_fscp(_kernel_swi_regs * r)
{
 return(1);
 USE(r);
}




int x_bput(_kernel_swi_regs * r)
{
 return(2);
 USE(r);
}



int x_bputp(_kernel_swi_regs * r)
{
 if(!vskip)
 {
  if(!(r->r[LRINDEX] & OVERFLOW))
  {
   modfile(r->r[1]);
  }
 }
 return(1);
}





_kernel_oserror * claimvectors(void * private_word)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   r;

 r.r[0]=GBPBV;
 r.r[1]=(int)&v_gbpb;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Claim,&r,&r);


 r.r[0]=FILEV;
 r.r[1]=(int)&v_file;
 r.r[2]=(int)private_word;

 if(!err) err=_kernel_swi(OS_Claim,&r,&r);


 r.r[0]=FINDV;
 r.r[1]=(int)&v_find;
 r.r[2]=(int)private_word;

 if(!err) err=_kernel_swi(OS_Claim,&r,&r);


 r.r[0]=ARGSV;
 r.r[1]=(int)&v_args;
 r.r[2]=(int)private_word;

 if(!err) err=_kernel_swi(OS_Claim,&r,&r);


 r.r[0]=FSCV;
 r.r[1]=(int)&v_fsc;
 r.r[2]=(int)private_word;

 if(!err) err=_kernel_swi(OS_Claim,&r,&r);


 r.r[0]=BPUTV;
 r.r[1]=(int)&v_bput;
 r.r[2]=(int)private_word;

 if(!err) err=_kernel_swi(OS_Claim,&r,&r);


 vskip=0;

 if(!err) active=1;

 return(err);
}



_kernel_oserror * releasevectors(void * private_word)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   r;

 r.r[0]=GBPBV;
 r.r[1]=(int)&v_gbpb;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 r.r[0]=FILEV;
 r.r[1]=(int)&v_file;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 r.r[0]=FINDV;
 r.r[1]=(int)&v_find;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 r.r[0]=ARGSV;
 r.r[1]=(int)&v_args;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 r.r[0]=FSCV;
 r.r[1]=(int)&v_fsc;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 r.r[0]=BPUTV;
 r.r[1]=(int)&v_bput;
 r.r[2]=(int)private_word;

 err=_kernel_swi(OS_Release,&r,&r);


 active=0;

 return(err);
}




_kernel_oserror * setstate(int state)
{
 if(active && !state)
 {
  closeallfiles();
  return(releasevectors(xprivate_word));
 }
 else
 if(!active && state) return(claimvectors(xprivate_word));
 else                 return(NULL);
}



