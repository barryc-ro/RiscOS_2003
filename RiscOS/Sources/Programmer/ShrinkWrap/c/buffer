/*->c.buffer */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#include "h.kernel"
#include "h.swis"

#include "h.flex"
#include "h.etc"
#include "h.crc32"

#include "h.err"
#include "h.fs"
#include "h.buffer"




/*****************************************************************************/


_kernel_oserror * buff_alloc(flex_ptr b,int size,int * bsize)
{
 _kernel_oserror * err;

 err=NULL;

 do
 {
  err=flex_alloc(b,size);
  if(!err)
  {
   *bsize=size;
   return(err);
  }
  size/=2;
 } while(size>128);

 return(err);
}



void initbuff(buffer * b,char * data,int datasize,int buffsize,int fh)
{
 b->p=b->data=b->f=data;
 b->buffsize=buffsize;

 b->datasize=datasize;

 if(datasize==-1)     /* we don't know how big the data size is */
 {
  b->left=0;
  b->end=b->p+buffsize;
 }
 else
 {
  b->left=datasize;
  if(datasize<buffsize) b->end=b->p+datasize;
  else                  b->end=b->p+buffsize;
 }

 b->fh=fh;
 b->flags=0;
 b->crc=0xFFFFFFFF;
}



_kernel_oserror * initsrcbuffer(buffer * src)
{
 _kernel_oserror * err;
 int               rlen;

 err=NULL;

 if(src->fh)
 {
  if(src->datasize<src->buffsize) rlen=src->datasize;
  else                            rlen=src->buffsize;
  err=fs_read(src->fh,src->data,rlen); /* fill input buffer */
  src->left-=rlen;
 }
 else
 {
  src->left=0;
  rlen=src->datasize;
 }

 if(src->flags & BCRC)   crcblock32(&src->crc,src->data,rlen);

 return(err);
}



_kernel_oserror * fillsrcbuffer(buffer * src)
{
 _kernel_oserror * err;
 int               rlen;
 int               maxfree;
 int               len;

 err=NULL;

 if(src->fh && src->left)
 {
  /* move stuff from src->p down to src->data */

  len=src->end-src->p;
  memmove(src->data,src->p,len);
  src->f-=(src->p-src->data);
  src->p=src->data;

  maxfree=src->buffsize-len;

  if(maxfree>src->left) rlen=src->left;
  else                  rlen=maxfree;

  src->end=src->p+rlen+len;
  src->left-=rlen;

  err=fs_read(src->fh,src->p+len,rlen);

  if(src->flags & BCRC)   crcblock32(&src->crc,src->p+len,rlen);
 }
 return(err);
}



_kernel_oserror * dumpdestbuffer(buffer * dest)
{
 _kernel_oserror * err;
 int               len;

 err=NULL;

 len=dest->p-dest->data;

 if(dest->flags & BCRC)   crcblock32(&dest->crc,dest->data,len);

 if(dest->fh && (dest->left || dest->datasize==-1))
 {
  err=fs_write(dest->fh,dest->data,len);
  dest->p=dest->data;

  if(dest->datasize==-1)
  {
   dest->left+=len;
  }
  else
  {
   dest->left-=len;
  }
 }
 return(err);
}



_kernel_oserror * dumpblock(buffer * dest,char * p,int len)
{
 _kernel_oserror * err;
 int               tlen;

 err=NULL;

 while(len)
 {
  if((dest->end-dest->p)<len)
  {
   tlen=(dest->end-dest->p);
   memcpy(dest->p,p,tlen);
   dest->p+=tlen;
   dumpdestbuffer(dest);
   if(dest->p>=dest->end) break;
   len-=tlen;
   p+=tlen;
  }
  else
  {
   memcpy(dest->p,p,len);
   dest->p+=len;
   len=0;
  }
 }

 return(err);
}




