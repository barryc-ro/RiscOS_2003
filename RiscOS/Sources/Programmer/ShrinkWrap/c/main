/*->c.main */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "h.etc"

#include "h.err"

#include "h.mem"
#include "h.flex"
#include "h.vectors"
#include "h.scrap"
#include "h.fs"

#include "h.find"
#include "h.file"
#include "h.command"
#include "h.buffer"
#include "h.deflate"

#include "h.main"



       void * xprivate_word;
       int    active;



_kernel_oserror *ShrinkWrapSwi(int swi_number,_kernel_swi_regs *r,
                                                       void *private_word)
{
 _kernel_oserror * err;

 err=NULL;

 switch(swi_number)
 {
   case 0:
          err=memman(r);
          break;

   case 1:
          err=zipman(r);
          break;

   case 2:
          err=commandman(r);
          break;




  default:
          err=&mb_nfserr_DummyFSDoesNothing;
          break;
 }

 return(err);

 USE(private_word);
}






static void ShrinkWrapFinalise(void)
{
 closeallfiles();
 scrapfinit();
 memfinish();
 filefinit();
 releasevectors(xprivate_word);

}






_kernel_oserror * ShrinkWrapInitialise(char *cmd_tail,int podule_base,
                                                   void *private_word)
{
 _kernel_oserror * err;

 xprivate_word=private_word;
 active=0;

 err=meminit();

 if(!err)
 {
  err=claimvectors(private_word);

  if(!err)
  {
   scrapinit();
   findinit();
   commandinit();
   initdeflate();
   fileinit();

   atexit(ShrinkWrapFinalise);
  }
 }

 return(err);

 USE(cmd_tail);
 USE(podule_base);
}



#define Service_DyanmicAreaRenumber 0x92
#define Service_DiscDismounted      0x7D
#define Service_Reset               0x27




void ShrinkWrapService(int service_number,_kernel_swi_regs *r,
                                                  void *private_word)
{

 switch(service_number)
 {

  case Service_DyanmicAreaRenumber:
  {
   dynamicrenumber(r);
   break;
  }
  case Service_Reset:
  {
   if (active)    (void)releasevectors(private_word);
   if (active==0) (void)claimvectors(private_word);
   break;
  }

 }

 USE(private_word);
}






#define MAXARG 8
#define CLEN   256

static char command[CLEN];


_kernel_oserror *ShrinkWrapCommand(char *arg_string,int argc,int cmd_no,
                                                  void *private_word)
{
 _kernel_oserror  * err;
 char             * args[MAXARG];
 char             * temptr;
 int                i;
 int                whitespace;


 err=NULL;

 temptr=command;

 for(;temptr-command<CLEN && *arg_string>=' ';arg_string++)
 {
  *(temptr++)=*arg_string;
 }

 *temptr='\0';

 arg_string=command;
 temptr=command;
 whitespace=1;
 i=0;

 while(1)
 {
  if(whitespace)
  {
   if(*temptr==0) break;
   else
   if(*temptr!=32)
   {
    args[i++]=temptr;
    whitespace=0;
   }
  }
  else
  {
   if(*temptr==0) break;
   else
   if(*temptr==32)
   {
    whitespace=1;
    *temptr=0;
   }
  }
  temptr++;
 }



 switch(cmd_no)
 {
  case 0:
         err=addzone(args,i);
         break;

  case 1:
         err=remzone(args,i);
         break;

  case 2:
         err=showzone(args,i);
         break;

  case 3:
         err=addtype(args,i);
         break;

  case 4:
         err=remtype(args,i);
         break;

  case 5:
         err=showtype(args,i);
         break;

  case 6:
         err=setmemorysize(args,i);
         break;

  case 7:
         err=setstrength(args,i);
         break;

  case 8:
          err=compressfile(args);
          break;

  case 9:
          err=uncompressfile(args);
          break;

  case 10:
          err=setstate(1);
          break;

  case 11:
          err=setstate(0);
          break;


 }


 return(err);

 USE(argc);
 USE(private_word);
}





