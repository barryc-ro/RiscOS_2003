/*->c.deflate */



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "h.kernel"
#include "h.swis"

#include "h.flex"


#include "h.etc"
#include "h.err"
#include "h.buffer"


#include "h.zip"


#include "h.deflatex"
#include "h.deflate"





/* ===========================================================================
 * Configuration parameters
 */

/* Compile with MEDIUM_MEM to reduce the memory requirements or
 * with SMALL_MEM to use as little memory as possible.
 * Warning: defining these symbols affects MATCH_BUFSIZE and HASH_BITS
 * (see below) and thus affects the compression ratio. The compressed output
 * is still correct, and might even be smaller in some cases.
 */



#ifdef SMALL_MEM
#   define HASH_BITS  13  /* Number of bits used to hash strings */
#else
#ifdef MEDIUM_MEM
#   define HASH_BITS  14
#else
#   define HASH_BITS  15
   /* For portability to 16 bit machines, do not use values above 15. */
#endif
#endif

#define HASH_SIZE (unsigned)(1<<HASH_BITS)
#define HASH_MASK (HASH_SIZE-1)
#define WMASK     (WSIZE-1)
/* HASH_SIZE and WSIZE must be powers of two */

#define NIL 0
/* Tail of hash chains */

#define FAST 4
#define SLOW 2
/* speed options for the general purpose bit flag */

#ifndef TOO_FAR
#  define TOO_FAR 4096
#endif
/* Matches of length 3 are discarded if their distance exceeds TOO_FAR */

/* ===========================================================================
 * Local data used by the "longest match" routines.
 */

typedef ush Pos;
typedef unsigned IPos;
/* A Pos is an index in the character window. We use short instead of int to
 * save space in the various tables. IPos is used only for parameter passing.
 */

#ifndef DYN_ALLOC
  uch    far window[2L*WSIZE];
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least WSIZE
   * bytes. With this organization, matches are limited to a distance of
   * WSIZE-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size. Also, it limits
   * the window size to 64K, which is quite useful on MSDOS.
   * To do: limit the window size to WSIZE+BSZ if SMALL_MEM (the code would
   * be less efficient since the data would have to be copied WSIZE/BSZ times)
   */
  Pos    far prev[WSIZE];
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */
  Pos    far head[HASH_SIZE];
  /* Heads of the hash chains or NIL */
#else
static  uch    far * near window = NULL;
static  Pos    far * near prev   = NULL;
static  Pos    far * near head;
#endif

long block_start;
/* window position at the beginning of the current output block. Gets
 * negative when the window is moved backwards.
 */

local unsigned near ins_h;  /* hash index of string to be inserted */

#define H_SHIFT  ((HASH_BITS+MIN_MATCH-1)/MIN_MATCH)
/* Number of bits by which ins_h and del_h must be shifted at each
 * input step. It must be such that after MIN_MATCH steps, the oldest
 * byte no longer takes part in the hash key, that is:
 *   H_SHIFT * MIN_MATCH >= HASH_BITS
 */

static unsigned int near prev_length;
/* Length of the best match at previous step. Matches not greater than this
 * are discarded. This is used in the lazy match evaluation.
 */

            unsigned near strstart;      /* start of string to insert */
static      unsigned near match_start;   /* start of matching string */
local int      near eofile;        /* flag set at end of input file */
local int   lookahead;     /* number of valid bytes ahead in window */

static unsigned near max_chain_length;
/* To speed up deflation, hash chains are never searched beyond this length.
 * A higher limit improves compression ratio but degrades the speed.
 */

local unsigned int max_lazy_match;
/* Attempt to find a better match only when the current match is strictly
 * smaller than this value.
 */

static int near good_match;
/* Use a faster search when the previous match is longer than this */


/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
typedef struct config {
   int good_length;
   int max_lazy;
   unsigned max_chain;
   uch flag;
} config;

local config configuration_table[10] = {
/*      good lazy chain flag */
/* 0 */ {0,    0,    0,  0},     /* store only */
/* 1 */ {4,    4,   16,  FAST},  /* maximum speed  */
/* 2 */ {6,    8,   16,  0},
/* 3 */ {8,   16,   32,  0},
/* 4 */ {8,   32,   64,  0},
/* 5 */ {8,   64,  128,  0},
/* 6 */ {8,  128,  256,  0},
/* 7 */ {8,  128,  512,  0},
/* 8 */ {32, 258, 1024,  0},
/* 9 */ {32, 258, 4096,  SLOW}}; /* maximum compression */

/* Note: the current code requires max_lazy >= MIN_MATCH and max_chain >= 4
 * but these restrictions can easily be removed at a small cost.
 */

#define EQUAL 0
/* result of memcmp for equal strings */

/* ===========================================================================
 *  Prototypes for local functions. Use asm version by default for
 *  MSDOS but not Unix. However the asm version version is recommended
 *  for 386 Unix.
 */
#ifdef ATARI_ST
#  undef MSDOS /* avoid the processor specific parts */
#endif
#if defined(MSDOS) && !defined(NO_ASM) && !defined(ASM)
#  define ASM
#endif

local void fill_window   OF((void));

#ifdef ASM
      void match_init OF((void)); /* asm code initialization */
#endif

#ifdef DEBUG
local  void check_match OF((IPos start, IPos match, int length));
#endif

/* #define MIN(a,b) ((a) <= (b) ? (a) : (b)) */
/* The arguments must not have side effects. */

/* ===========================================================================
 * Update a hash value with the given input byte
 * IN  assertion: all calls to to UPDATE_HASH are made with consecutive
 *    input characters, so that a running hash key can be computed from the
 *    previous key instead of complete recalculation each time.
 */
#define UPDATE_HASH(h,c) (h = (((h)<<H_SHIFT) ^ (c)) & HASH_MASK)

/* ===========================================================================
 * Insert string s in the dictionary and set match_head to the previous head
 * of the hash chain (the most recent string with same hash key). Return
 * the previous length of the hash chain.
 * IN  assertion: all calls to to INSERT_STRING are made with consecutive
 *    input characters and the first MIN_MATCH bytes of s are valid
 *    (except for the last MIN_MATCH-1 bytes of the input file).
 */
#define INSERT_STRING(s, match_head) \
   (UPDATE_HASH(ins_h, window[(s) + MIN_MATCH-1]), \
    prev[(s) & WMASK] = match_head = head[ins_h], \
    head[ins_h] = (s))

/* ===========================================================================
 * Initialize the "longest match" routines for a new file
 */


/* pack level >=1 <=9 */

/*    int pack_level;  0: store, 1: best speed, 9: best compression */
/*    ush *flags;      general purpose bit flag                     */


static void lm_finit(void)
{
 if(window) flex_free((flex_ptr)&window);
 if(prev)   flex_free((flex_ptr)&prev);
 if(head)   flex_free((flex_ptr)&head);
}


static _kernel_oserror * lm_init(int pack_level,int * flags)
{
 _kernel_oserror * err;

 register unsigned j;

    /* Use dynamic allocation if compiler does not like big static arrays: */
#ifdef DYN_ALLOC

          err=flex_alloc((flex_ptr)&window,WSIZE*2*sizeof(uch));
 if(!err) err=flex_alloc((flex_ptr)&prev,WSIZE*sizeof(Pos));
 if(!err) err=flex_alloc((flex_ptr)&head,HASH_SIZE*sizeof(Pos));
 if(err)  return(err);

 memset(window,0,WSIZE*2*sizeof(uch));
 memset(prev,0,WSIZE*sizeof(Pos));
 memset(head,0,HASH_SIZE*sizeof(Pos));


#endif /* DYN_ALLOC */
#ifdef ASM
    match_init(); /* initialize the asm code */
#endif
    /* Initialize the hash table. */
    for (j = 0;  j < HASH_SIZE; j++) head[j] = NIL;
    /* prev will be initialized on the fly */

    /* Set the default configuration parameters:
     */
    max_lazy_match   = configuration_table[pack_level].max_lazy;
    good_match       = configuration_table[pack_level].good_length;
    max_chain_length = configuration_table[pack_level].max_chain;
    *flags          |= configuration_table[pack_level].flag;
    /* ??? reduce max_chain_length for binary files */

    strstart = 0;
    block_start = 0L;


 return(err);
}



static buffer * zsrc;
static buffer * zdest;


static _kernel_oserror * read_buf(char * dest,int max,int * read)
{
 _kernel_oserror * err;
 int               bytesread;
 int               chunk;

 err=NULL;
 bytesread=0;

 while(max && !err)
 {
  chunk=zsrc->end-zsrc->p;
  if(chunk>max) chunk=max;
  if(chunk) memcpy(dest,zsrc->p,chunk);
  zsrc->p+=chunk;
  dest+=chunk;
  max-=chunk;
  bytesread+=chunk;

  if(zsrc->p>=zsrc->end) err=fillsrcbuffer(zsrc);
  if(zsrc->p>=zsrc->end) break;
 }

 if(max && !bytesread) *read=-1;
 else                  *read=bytesread;

 return(err);
}


static _kernel_oserror * deflateinit(void)
{
 _kernel_oserror * err;
 int               j;


  err=read_buf((char*)window,2*WSIZE,&lookahead);
  if(lookahead==0 || lookahead==EOF)
  {
   eofile=1;
   lookahead=0;
   return(err);
  }

  eofile=0;
    /* Make sure that we always have enough lookahead. This is important
     * if input comes from a device such as a tty.
     */
  while(lookahead<MIN_LOOKAHEAD && !eofile) fill_window();

    ins_h = 0;
    for (j=0; j<MIN_MATCH-1; j++) UPDATE_HASH(ins_h, window[j]);
    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
     * not important since only literal bytes will be emitted.
     */

 return(err);
}

/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 */
#ifndef ASM
/* For MSDOS, OS/2 and 386 Unix, an optimized version is in match.asm. The code
 * is functionally equivalent, so you can use the C version if desired.
 */
static int longest_match(cur_match)
    IPos cur_match;                             /* current match */
{
    unsigned chain_length = max_chain_length;   /* max hash chain length */
    register uch far *scan = window + strstart; /* current string */
    register uch far *match = scan;             /* matched string */
    register int len;                           /* length of current match */
    int best_len = prev_length;                 /* best match length so far */
    IPos limit = strstart > (IPos)MAX_DIST ? strstart - (IPos)MAX_DIST : NIL;
    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */
#ifdef UNALIGNED_OK
    register ush scan_start = *(ush*)scan;
    register ush scan_end   = *(ush*)(scan+best_len-1);
#else
    register uch scan_start = *scan;
    register uch scan_end1  = scan[best_len-1];
    register uch scan_end   = scan[best_len];
#endif

    /* Do not waste too much time if we already have a good match: */
    if (prev_length >= good_match) {
        chain_length >>= 2;
    }

    do {
      /*  Assert(cur_match < strstart, "no future"); */
        match = window + cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2:
         */
#if (defined(UNALIGNED_OK) && HASH_BITS >= 8)
        /* This code assumes sizeof(unsigned short) == 2 and
         * sizeof(unsigned long) == 4. Do not use UNALIGNED_OK if your
         * compiler uses different sizes.
         */
        if (*(ush*)(match+best_len-1) != scan_end ||
            *(ush*)match != scan_start) continue;

        len = MIN_MATCH - 4;
        /* It is not necessary to compare scan[2] and match[2] since they are
         * always equal when the other bytes match, given that the hash keys
         * are equal and that HASH_BITS >= 8.
         */
        do {} while ((len+=4) < MAX_MATCH-3 &&
                     *(ulg*)(scan+len) == *(ulg*)(match+len));
        /* The funny do {} generates better code for most compilers */

        if (*(ush*)(scan+len) == *(ush*)(match+len)) len += 2;
        if (scan[len] == match[len]) len++;

#else /* UNALIGNED_OK */
        if (match[best_len] != scan_end ||
            match[best_len-1] != scan_end1 || *match != scan_start)
           continue;
        /* It is not necessary to compare scan[1] and match[1] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that h_shift+8 <= HASH_BITS,
         * that is, when the last byte is entirely included in the hash key.
         * The condition is equivalent to
         *       (HASH_BITS+2)/3 + 8 <= HASH_BITS
         * or: HASH_BITS >= 13
         * Also, we check for a match at best_len-1 to get rid quickly of
         * the match with the suffix of the match made at the previous step,
         * which is known to fail.
         */
#if HASH_BITS >= 13
        len = 1;
#else
        len = 0;
#endif
        do {} while (++len < MAX_MATCH && scan[len] == match[len]);

#endif /* UNALIGNED_OK */

        if (len > best_len) {
            match_start = cur_match;
            best_len = len;
            if (len == MAX_MATCH) break;
#ifdef UNALIGNED_OK
            scan_end = *(ush*)(scan+best_len-1);
#else
            scan_end1  = scan[best_len-1];
            scan_end   = scan[best_len];
#endif
        }
    } while (--chain_length != 0 &&
             (cur_match = prev[cur_match & WMASK]) > limit);

    return best_len;
}
#endif /* NO_ASM */

#ifdef DEBUG
/* ===========================================================================
 * Check that the match at match_start is indeed a match.
 */
local void check_match(start, match, length)
    IPos start, match;
    int length;
{
    /* check that the match is indeed a match */
    if (memcmp((char*)window + match,
                (char*)window + start, length) != EQUAL) {
        fprintf(stderr,
            " start %d, match %d, length %d\n",
            start, match, length);
        error("invalid match");
    }
    if (verbose > 1) {
        fprintf(stderr,"\\[%d,%d]", start-match, length);
        do { putc(window[start++], stderr); } while (--length != 0);
    }
}
#else
#  define check_match(start, match, length)
#endif

/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead, and sets eofile if end of input file.
 * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
 * OUT assertion: at least one byte has been read, or eofile is set.
 */
local void fill_window()
{
    register int n, m;
    int      bytesread;
    unsigned more = (unsigned)((ulg)2*WSIZE - (ulg)lookahead - (ulg)strstart);
    /* Amount of free space at the end of the window. */

    /* If the window is full, move the upper half to the lower one to make
     * room in the upper half.
     */
    if (more == 0) {
        /* By the IN assertion, the window is not empty so we can't confuse
         * more == 0 with more == 64K on a 16 bit machine.
         */
        memcpy((char*)window, (char*)window+WSIZE, (unsigned)WSIZE);
        match_start -= WSIZE;
        strstart    -= WSIZE;
        /* strstart - WSIZE = WSIZE - lookahead > WSIZE - MIN_LOOKAHEAD
         * so we now have strstart > MAX_DIST:
         */
      /*  Assert (strstart > MAX_DIST, "window slide too early"); */
        block_start -= (long) WSIZE;

        for (n = 0; n < HASH_SIZE; n++) {
            m = head[n];
            head[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
        }
        for (n = 0; n < WSIZE; n++) {
            m = prev[n];
            prev[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
        }
        more = WSIZE;
      /*  if (verbose) putc('.', stderr); */

    } else if (more == (unsigned)EOF) {
        /* Very unlikely, but possible on 16 bit machine if strstart == 0
         * and lookahead == 1 (input done one byte at time)
         */
        more--;
    }
    read_buf((char*)window+strstart+lookahead,more,&bytesread);
    n=bytesread;

    if (n == 0 || n == EOF) {
        eofile = 1;
    } else {
        lookahead += n;
    }
}

/* ===========================================================================
 * Flush the current block, with given end-of-file flag.
 * IN assertion: strstart is set to the end of the current match.
 */
#define FLUSH_BLOCK(eof) \
   flush_block(block_start >= 0L ? (char*)&window[block_start] : (char*)NULL,\
               (long)strstart - block_start, (eof))

/* ===========================================================================
 * Processes a new input file and return its compressed length.
 */
#ifdef NO_LAZY
static ulg deflatesub()
{
    IPos hash_head; /* head of the hash chain */
    int flush;      /* set if current block must be flushed */
    unsigned match_length = 0;  /* length of best match */

    prev_length = MIN_MATCH-1;
    while (lookahead != 0) {
        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        INSERT_STRING(strstart, hash_head);

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head != NIL && strstart - hash_head <= MAX_DIST) {
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            match_length = longest_match (hash_head);
            /* longest_match() sets match_start */
            if (match_length > lookahead) match_length = lookahead;
        }
        if (match_length >= MIN_MATCH) {
            check_match(strstart, match_start, match_length);

            flush = xct_tally(strstart-match_start, match_length - MIN_MATCH);

            lookahead -= match_length;
            match_length--; /* string at strstart already in hash table */
            do {
                strstart++;
                INSERT_STRING(strstart, hash_head);
                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
                 * these bytes are garbage, but it does not matter since the
                 * next lookahead bytes will always be emitted as literals.
                 */
            } while (--match_length != 0);
        } else {
            /* No match, output a literal byte */
            flush = xct_tally(0, window[strstart]);
            lookahead--;
        }
        strstart++; 
        if (flush) FLUSH_BLOCK(0), block_start = strstart;

        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();

    }
    return FLUSH_BLOCK(1); /* eof */
}
#else /* LAZY */
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
static ulg deflatesub()
{
    IPos hash_head;          /* head of hash chain */
    IPos prev_match;         /* previous match */
    int flush;               /* set if current block must be flushed */
    int match_available = 0; /* set if previous match exists */
    register unsigned match_length = MIN_MATCH-1; /* length of best match */
#ifdef DEBUG
    extern ulg isize;        /* byte length of input file, for debug only */
#endif

    /* Process the input block. */
    while (lookahead != 0) {
        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        INSERT_STRING(strstart, hash_head);

        /* Find the longest match, discarding those <= prev_length.
         */
        prev_length = match_length, prev_match = match_start;
        match_length = MIN_MATCH-1;

        if (hash_head != NIL && prev_length < max_lazy_match &&
            strstart - hash_head <= MAX_DIST) {
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            match_length = longest_match (hash_head);
            /* longest_match() sets match_start */
            if (match_length > lookahead) match_length = lookahead;
            /* Ignore a length 3 match if it is too distant: */
            if (match_length == MIN_MATCH && strstart-match_start > TOO_FAR){
                /* If prev_match is also MIN_MATCH, match_start is garbage
                 * but we will ignore the current match anyway.
                 */
                match_length--;
            }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (prev_length >= MIN_MATCH && match_length <= prev_length) {

            check_match(strstart-1, prev_match, prev_length);

            flush=xct_tally(strstart-1-prev_match,prev_length-MIN_MATCH);

            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted.
             */
            lookahead -= prev_length-1;
            prev_length -= 2;
            do {
                strstart++;
                INSERT_STRING(strstart, hash_head);
                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
                 * these bytes are garbage, but it does not matter since the
                 * next lookahead bytes will always be emitted as literals.
                 */
            } while (--prev_length != 0);
            match_available = 0;
            match_length = MIN_MATCH-1;

        } else if (match_available) {
            /* If there was no match at the previous position, output a
             * single literal. If there was a match but the current match
             * is longer, truncate the previous match to a single literal.
             */
            flush = xct_tally (0, window[strstart-1]);
/*          Tracevv((stderr,"%c",window[strstart-1]));  */
            lookahead--;
        } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            match_available = 1;
            flush = 0;
            lookahead--;
        }
        if (flush) FLUSH_BLOCK(0), block_start = strstart;
        strstart++;
/*  Assert (strstart <= isize && lookahead <= isize, "a bit too far"); */

        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
    }
    if (match_available) xct_tally (0, window[strstart-1]);

    return FLUSH_BLOCK(1); /* eof */
}
#endif /* LAZY */


/****************************************************************************/

static int gpbitflag;
static int deflatestrength;

void closedeflate(void)
{
/* printf("close deflate\n"); */

 lm_finit();
 xct_finit();
}


_kernel_oserror * opendeflate(int length)
{
 _kernel_oserror * err;
 gpbitflag=0;
          err=lm_init(deflatestrength,&gpbitflag);
 if(!err) err=xct_init();
 if(err)  closedeflate();

/* printf("deflate init\n"); */

 return(err);
 USE(length);
}



_kernel_oserror * deflate(buffer * src,buffer * dest,int * opt)
{
 zsrc=src;
 zdest=dest;
 bi_init(dest);
/* printf("bit init\n"); */

 deflateinit();

/* printf("def run\n");  */

 xct_run();

/* printf("xct run\n");  */

 *opt=gpbitflag;

/* printf("def sub in \n");    */

 deflatesub();

/* printf("def sub out\n"); */

 return(NULL);
}



_kernel_oserror * initdeflate(void)
{
 deflatestrength=9;
 return(NULL);
}


_kernel_oserror * setstrength(char * args[],int i)
{
 int val;

 if(sscanf(args[0],"%d",&val)==1)
 {
  if(val>=1 && val<=9) deflatestrength=val;
 }

 return(NULL);
 USE(i);
}


_kernel_oserror * setstrengths(int strength)
{
 deflatestrength=strength;
 return(NULL);
}

