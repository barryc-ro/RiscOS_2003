/*->c.command */



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "kernel.h"
#include "swis.h"


#include "h.etc"

#include "h.err"

#include "h.mem"
#include "h.flex"
#include "h.fs"

#include "h.vectors"
#include "h.scrap"
#include "h.buffer"

#include "h.find"

#include "h.main"

#include "h.deflate"


#include "h.command"





static char * zone;
static int    zonelen;


static _kernel_oserror * addzones(char * path,int all)
{
 _kernel_oserror * err;
 int               len;
 char            * p;

 err=NULL;


 p=zone;
 while((p-zone)<zonelen)
 {
  len=strlen(p)+2;
  if(!cstrcmp(p,path))
  {
   *(p+len-1)=all;
   break;
  }
  p+=len;
 }


 if((p-zone)>=zonelen)
 {
  len=strlen(path)+2;

  err=flex_extend((flex_ptr)&zone,zonelen+len);
  if(!err)
  {
   strcpy(zone+zonelen,path);
   zonelen+=len;
   zone[zonelen-1]=all;
  }
 }


 return(err);
}


_kernel_oserror * addzone(char * args[],int argc)
{
 return(addzones(args[0],(argc==2)?(!cstrcmp(args[1],"all")):0));
 USE(argc);
}



_kernel_oserror * remzone(char * args[],int argc)
{
 _kernel_oserror * err;
 char            * p;
 int               len;

 err=NULL;

 p=zone;
 while((p-zone)<zonelen)
 {
  len=strlen(p)+2;

  if(!cstrcmp(p,args[0]))
  {
   memcpy(p,p+len,(zone+zonelen)-(p+len));
   zonelen-=len;
   err=flex_extend((flex_ptr)&zone,zonelen);
   return(err);
  }
  p+=len;
 }

 return(err);
 USE(argc);
}





_kernel_oserror * showzone(char * args[],int argc)
{
 char            * p;
 int               len;

 p=zone;
 while((p-zone)<zonelen)
 {
  len=strlen(p)+2;
  printf("%s %s\n",p,(*(p+len-1))?"all":"");
  p+=len;
 }

 return(NULL);
 USE(argc);
 USE(args);
}








int inzone(char * path,int * all)
{
 char * p;
 int    len;
 char * q1;
 char * q2;
 int    c1;
 int    c2;


 p=zone;
 while(p<(zone+zonelen))
 {
  len=strlen(p)+2;

  /* is p the lhs of path? */

  q1=path;
  q2=p;

  while(1)
  {
   c2=toupper(*q2++);
   if(!c2) 
   {
    if(all) *all=*(p+len-1);
    return(1);
   }
   c1=toupper(*q1++);
   if(c1!=c2) break;
  }

  p+=len;
 }

 return(0);
}






static int * compresstype;
static int   compressn;



static _kernel_oserror * addtypes(int type)
{
 _kernel_oserror * err;
 int               i;

 err=flex_extend((flex_ptr)&compresstype,(compressn+1)*sizeof(int));
 if(!err)
 {
  for(i=0;i<compressn;i++)
  {
   if(compresstype[i]>type) break;
  }

  if(!(i<compressn && compresstype[i]==type))
  {
   memcpy(compresstype+i+1,compresstype+i,(compressn-i)*sizeof(int));
   compresstype[i]=type;
   compressn++;
  }
 }

 return(err);
}





_kernel_oserror * addtype(char * args[],int argc)
{
 _kernel_oserror * err;
 int               type;

 err=NULL;

 if(sscanf(args[0],"%x",&type)==1)
 {
  err=addtypes(type);
 }

 return(err);
 USE(argc);
}


static _kernel_oserror * remtypes(int type)
{
 _kernel_oserror * err;
 int               i;

 err=NULL;

 for(i=0;i<compressn;i++)
 {
  if(compresstype[i]==type)
  {
   memcpy(compresstype+i,compresstype+i+1,(compressn-i)*sizeof(int));
   compressn--;
   break;
  }
 }

 return(err);
}



_kernel_oserror * remtype(char * args[],int argc)
{
 _kernel_oserror * err;
 int               type;

 err=NULL;

 if(sscanf(args[0],"%x",&type)==1)
 {
  err=remtypes(type);
 }

 return(err);
 USE(argc);
}




_kernel_oserror * showtype(char * args[],int argc)
{
 int               i;

 for(i=0;i<compressn;i++)
 {
  printf("0x%x\n",compresstype[i]);
 }

 return(NULL);
 USE(argc);
 USE(args);
}




int cotype(int type)
{
 int i;

 for(i=0;i<compressn;i++)
 {
  if(compresstype[i]==type) return(1);
 }
 return(0);
}




static _kernel_oserror * enable(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 if(r->r[1]==0) err=setstate(0);
 else
 if(r->r[1]==1) err=setstate(1);
 else           err=NULL;

 r->r[1]=active;

 return(err);
}




_kernel_oserror * commandman(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 err=NULL;

 switch(r->r[0])
 {
     case 0:        /* add zone */
            err=addzones((char*)r->r[1],r->r[2]==1);
            break;

     case 1:        /* rem zone */
            err=remzone((char**)&r->r[1],1);
            break;

     case 2:        /* add type */
            err=addtypes(r->r[1]);
            break;

     case 3:        /* rem type */
            err=remtypes(r->r[1]);
            break;

     case 4:        /* strength */
            err=setstrengths(r->r[1]);
            break;

     case 5:
            err=enable(r);
            break;

 }

 return(err);
}








_kernel_oserror * commandinit(void)
{
 _kernel_oserror * err;

 err=flex_alloc((flex_ptr)&zone,0);
 zonelen=0;
 if(!err) err=flex_alloc((flex_ptr)&compresstype,0);
 compressn=0;

 return(err);
}

