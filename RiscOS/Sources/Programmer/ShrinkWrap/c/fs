/*->c.fs */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>


#include "kernel.h"

#include "swis.h"


#include "h.err"
#include "h.constants"


#include "h.fs"


/*****************************************************************************/




int cstrcmp(char * first,char * second)
{
 int f;
 int s;

 while(1)
 {
  f=toupper(*first++);
  s=toupper(*second++);
  if(f!=s || !f) return(f-s);
 }
}





char * xstrcpy(char *s1, const char *s2)
{
 while((*s1++=*s2++)>=32);
 *(s1-1)=0;
 return(s1);
}



char * xstrcat(char *s1, const char *s2)
{
 while(*s1++);
 return(xstrcpy(s1-1,s2));
}



int filetype(int load)
{
 if((load & 0xFFF00000)==0xFFF00000)
           return((load >> 8) & 0xFFF);
 else return(-1);
}






_kernel_oserror * fs_open(char * name,int mode,int * fh)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 if(mode=='r') rx.r[0]=0x4F;
 else
 if(mode=='w') rx.r[0]=0x8F;
 else
 if(mode=='u') rx.r[0]=0xCF;

 rx.r[1]=(int)name;

 err=_kernel_swi(OS_Find,&rx,&rx);

 *fh=rx.r[0];

 return(err);
}



_kernel_oserror * fs_close(int fh,_kernel_oserror * err)
{
 _kernel_swi_regs rx;

 rx.r[0]=0;
 rx.r[1]=fh;

 if(err)     _kernel_swi(OS_Find,&rx,&rx);
 else    err=_kernel_swi(OS_Find,&rx,&rx);

 return(err);
}







_kernel_oserror * fs_read(int fh,void * b,int n)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;

 rx.r[0]=4;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;

 err=_kernel_swi(OS_GBPB,&rx,&rx);

 if(!err && rx.r[3]) err=&mb_sfserr_ReadErr;

 return(err);
}






_kernel_oserror * fs_write(int fh,void * b,int n)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 if(!n) return(NULL);

 rx.r[0]=2;
 rx.r[1]=fh;
 rx.r[2]=(int)b;
 rx.r[3]=n;


 err=_kernel_swi(OS_GBPB,&rx,&rx);

 if(!err && rx.r[3]) err=&mb_sfserr_WriteErr;

 return(err);
}





_kernel_oserror * fs_seek(int fh,int posn)
{
 _kernel_swi_regs rx;

 rx.r[0]=1;
 rx.r[1]=fh;
 rx.r[2]=posn;

 return(_kernel_swi(OS_Args,&rx,&rx));
}




_kernel_oserror * fs_tell(int fh,int * posn)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=0;
 rx.r[1]=fh;

 err=_kernel_swi(OS_Args,&rx,&rx);

 *posn=rx.r[2];

 return(err);
}



_kernel_oserror * fs_skip(int fh,int delta)
{
 _kernel_oserror * err;

 int posn;

          err=fs_tell(fh,&posn);
 if(!err) err=fs_seek(fh,posn+delta);

 return(err);
}



_kernel_oserror * fs_cdir(char * name)
{
 _kernel_swi_regs rx;

 rx.r[0]=8;
 rx.r[1]=(int)name;
 rx.r[2]=0;

 return(_kernel_swi(OS_File,&rx,&rx));
}



_kernel_oserror * fs_wipe(char * name)
{
 _kernel_swi_regs  rx;

 rx.r[0]=27;
 rx.r[1]=(int)name;
 rx.r[2]=0;
 rx.r[3]=(1<<1)|(1<<0); /* recursive + force */

 return(_kernel_swi(OS_FSControl,&rx,&rx));
}




_kernel_oserror * fs_delete(char * name)
{
 _kernel_swi_regs rx;

 rx.r[0]=6;
 rx.r[1]=(int)name;

 return(_kernel_swi(OS_File,&rx,&rx));
}



_kernel_oserror * fs_getpath(char * buffer,int len,int fh)
{
 _kernel_swi_regs rx;

 rx.r[0]=7;
 rx.r[1]=fh;
 rx.r[2]=(int)buffer;
 rx.r[5]=len;

 return(_kernel_swi(OS_Args,&rx,&rx));
}



_kernel_oserror * fs_stat(char * name,fstat * f)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;

 rx.r[0]=5;
 rx.r[1]=(int)name;

 err=_kernel_swi(OS_File,&rx,&rx);
 if(!err)
 {
  f->object=rx.r[0];
  f->load=rx.r[2];
  f->exec=rx.r[3];
  f->length=rx.r[4];
  f->acc =rx.r[5];

  f->type=filetype(f->load);
 }

 return(err);
}



_kernel_oserror * fs_canonicalpath(char * path,char * buffer,int len,
                                       char * pathvar,char * pathstring)
{
 _kernel_swi_regs  rx;

 rx.r[0]=37;
 rx.r[1]=(int)path;
 rx.r[2]=(int)buffer;
 rx.r[3]=(int)pathvar;
 rx.r[4]=(int)pathstring;
 rx.r[5]=len;

 return(_kernel_swi(OS_FSControl,&rx,&rx));
}



_kernel_oserror * oscli(char * string)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=(int)string;

 err=_kernel_swi(OS_CLI,&rx,&rx);

 return(err);
}


_kernel_oserror * fs_getdeftime(fstat * stat,int type)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;
 char              pblk[32];
                  
 stat->length=0;
 stat->acc=DEFATT;
 stat->load=0xFFF00000;
 stat->load|=type<<8;

 pblk[0]=3;

 rx.r[0]=14;
 rx.r[1]=(int)pblk;

 err=_kernel_swi(OS_Word,&rx,&rx);

 stat->exec=*(int *)pblk;
 stat->load|=pblk[4];

 return(err);
}



_kernel_oserror * fs_settype(char * name,int type)
{
 _kernel_oserror  *  err;
 _kernel_swi_regs    rx;

 rx.r[0]=18;
 rx.r[1]=(int)name;
 rx.r[2]=type;

 err=_kernel_swi(OS_File,&rx,&rx);

 return(err);
}



_kernel_oserror * fs_extent(int fh,int * ex)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;

 rx.r[0]=2;
 rx.r[1]=fh;

 err=_kernel_swi(OS_Args,&rx,&rx);

 *ex=rx.r[2];

 return(err);
}




_kernel_oserror * fs_stamp(char * name,fstat * f)
{
 _kernel_oserror  *  err;
 _kernel_swi_regs    rx;

 rx.r[0]=1;
 rx.r[1]=(int)name;
 rx.r[2]=f->load;
 rx.r[3]=f->exec;
 rx.r[4]=0;
 rx.r[5]=f->acc;

 err=_kernel_swi(OS_File,&rx,&rx);

 return(err);
}





/*

_kernel_oserror * fs_validmemory(int low,int high)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;
 int               carry;

 rx.r[0]=low;
 rx.r[1]=high;

 err=_kernel_swi_c(OS_ValidateAddress,&rx,&rx,&carry);

 if(carry) err=&mb_sfserr_badaddress;

 return(err);
}

*/






_kernel_oserror * fs_codesync(int load,int length)
{
  _kernel_swi_regs rx;

 rx.r[0]=1;
 rx.r[1]=(load & (~0x3));
 rx.r[2]=(load+length+0x3) & (~0x3);

 return(_kernel_swi(OS_SynchroniseCodeAreas,&rx,&rx));
}






