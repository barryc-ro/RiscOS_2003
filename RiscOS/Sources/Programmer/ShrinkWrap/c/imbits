/*->c.imbits */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "h.kernel"
#include "h.swis"

#include "h.flex"


#include "h.err"
#include "h.buffer"


#include "h.zip"


#include "h.deflatex"
#include "h.deflate"






/***********************************************************************
 *
 * Local data used by the "bit string" routines.
 */


/* Current file stream pointer. */
local   buffer *  bi_fp;

local unsigned short bi_buf;
/* Output buffer. bits are inserted starting at the bottom (least significant
 * bits).
 */

#define Buf_size (8 * 2*sizeof(char))
/* Number of bits used within bi_buf. (bi_buf might be implemented on
 * more than 16 bits on some systems.)
 */

local int bi_valid;                  /* number of valid bits in bi_buf */

/* All bits above the last valid bit are always zero. */



static _kernel_oserror * zputc(char b,buffer * dest)
{
 if(dest->p<dest->end) *dest->p++=b;
 else
 {
  dumpdestbuffer(dest);
  if(dest->p<dest->end) *dest->p++=b;
 }

 return(NULL);
}



/* Output a 16 bit value to the bit stream, lower (oldest) byte first */
#define PUTSHORT(w) \
{  (void) zputc ((char)((w) & 0xff), bi_fp); \
   (void) zputc ((char)((US_INT)(w) >> 8), bi_fp); \
}

/* Output an 8 bit value to the bit stream, bits right to left */
#define PUTBYTE(w) \
{  (void) zputc ((char)((w) & 0xff), bi_fp); \
}






/* Initialize the bit string routines. */

_kernel_oserror * bi_init(buffer * dest)
{
 bi_fp=dest;
 bi_buf=0;
 bi_valid=0;
 return(NULL);
}





/* Output bits from right to left. */


_kernel_oserror * bi_rlout(int value,int length)
{
 _kernel_oserror * err;

    /* Send value on length bits. If not enough room in bi_buf, use
     * (valid) bits from bi_buf and (16 - bi_valid) bits from value, leaving
     * (width - (16-bi_valid)) unused bits in value.
     */

 err=NULL;

 if(bi_valid>Buf_size-length)
 {
  bi_buf |= (value << bi_valid);
  PUTSHORT(bi_buf);
  bi_buf = (unsigned short)value >> (Buf_size - bi_valid);
  bi_valid += length - Buf_size;
 }
 else 
 {
  bi_buf |= value << bi_valid;
  bi_valid += length;
 }


 return(err);
}



/* Reverse the bits of a bit string, taking the source bits left to
   right (starting at 2^15) and emitting them right to left. */

int bi_reverse(int value,int length)
{
 int result = 0;
 unsigned short lbit = 0x8000;
 unsigned short rbit = 1;

 while(length-->0)
 {
  if (value & lbit) result |= rbit;
   lbit >>= 1, rbit <<= 1;
 }


 return(result);
}



unsigned bi_reverse2(unsigned code,int len)
{
 register unsigned res = 0;
 do
 {
  res|=code & 1;
        code >>= 1, res <<= 1;
    } while (--len > 0);
    return res >> 1;
}


/* Flush any remaining bits. */

_kernel_oserror * bi_windup(void)
{
 _kernel_oserror * err;

 err=NULL;

 if(bi_valid>8)
 {
  PUTSHORT(bi_buf);
 }
 else
 if(bi_valid>0)
 {
  PUTBYTE(bi_buf);
 }

 bi_buf=0;
 bi_valid=0;

 return(err);
}



_kernel_oserror * copy_block(char * buf,unsigned  len,int header)
{
 bi_windup();              /* align on byte boundary */

 if(header)
 {
  PUTSHORT((US_INT)len);   
  PUTSHORT((US_INT)~len);
 }

 return(dumpblock(bi_fp,buf,len));
}


/* value to send */
/* number of bits */

void send_bits(int value,int length)
{


    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
     * unused bits in value.
     */
    if (bi_valid > (int)Buf_size - length) {
        bi_buf |= (value << bi_valid);
        PUTSHORT(bi_buf);
        bi_buf = (US_INT)value >> (Buf_size - bi_valid);
        bi_valid += length - Buf_size;
    } else {
        bi_buf |= value << bi_valid;
        bi_valid += length;
    }
}





