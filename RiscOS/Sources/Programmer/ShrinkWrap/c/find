/*->c.find */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "h.etc"

#include "h.err"

#include "h.mem"
#include "h.rminfo"
#include "h.flex"
#include "h.crc32"


#include "h.constants"

#include "h.fs"
#include "h.buffer"
#include "h.scrap"
#include "h.zip"
#include "h.inflate"
#include "h.unzip"

#include "h.vectors"
#include "h.command"

#include "h.gbpb"
#include "h.file"


#include "h.find"



#define FILECHUNK 32


typedef struct filestr
{
 int modded:1;
 int read:1;
 int scrapfh;
 int scrapn;
 int realfh;
 int load;
 int exec;
 int acc;
 int crc;

} filestr;



static filestr * file;
static int       filen;


static _kernel_oserror * getfile(int * n)
{
 _kernel_oserror * err;
 int               i;

 err=flex_chunk((flex_ptr)&file,filen*sizeof(filestr),
                                FILECHUNK*sizeof(filestr));
 if(!err)
 {
  i=filen;
  filen++;

  *n=i;
  memset(&file[i],0,sizeof(filestr));
 }

 return(err);
}



static _kernel_oserror * losefile(int i)
{
 file[i]=file[filen-1];
 filen--;

 return(NULL);
}



static int crcname(char * name)
{
 int len;
 int crc;

 len=strlen(name);
 crc=0;

 crcblock32(&crc,name,len);

 return(crc);
}



static int findcrcname(int crc,char * name)
{
 int  i;
 char fname[256];

 for(i=0;i<filen;i++)
 {
  if(file[i].crc==crc)
  {
   fs_getpath(fname,sizeof(fname),file[i].realfh);
   if(!cstrcmp(fname,name)) return(i);
  }
 }

 return(-1);
}




int findrfh2sfh(int realfh)
{
 int i;

 for(i=0;i<filen;i++)
 {
  if(file[i].realfh==realfh) return(file[i].scrapfh);
 }
 return(realfh);
}




int findsfh2rfh(int scrapfh)
{
 int i;

 for(i=0;i<filen;i++)
 {
  if(file[i].scrapfh==scrapfh) return(file[i].realfh);
 }
 return(scrapfh);
}


/* nb check if file can be modified */

void modfile(int fh)
{
 int i;

 for(i=0;i<filen;i++)
 {
  if(file[i].scrapfh==fh) file[i].modded=1;
 }
}



/* is this file one which we have open - if so write back fstat */

_kernel_oserror * findreadstat(char * buffer,fstat * f,int * n)
{
 int i;
 int crc;

 crc=crcname(buffer);
 i=findcrcname(crc,buffer);
 if(n) *n=i;
 if(i>=0)
 {
  f->object=1;
  f->load=file[i].load;
  f->exec=file[i].exec;
  f->acc=file[i].acc;
  f->type=filetype(f->load);
  fs_extent(file[i].scrapfh,&f->length);
 }
 else
 {
  f->object=0;
 }

 return(NULL);
}




_kernel_oserror * findwritestat(fstat * f,int i)
{
 file[i].load=f->load;
 file[i].exec=f->exec;
 file[i].acc=f->acc;
 return(NULL);
}





static _kernel_oserror * closefile(int i)
{
 _kernel_oserror * err;
 int               j;
 char            * name;
 fstat             f;
 char              dest[256];


 err=fs_close(file[i].scrapfh,NULL);

 for(j=0;j<filen;j++)
 {
  if(file[i].scrapn==file[j].scrapn && i!=j) break;
 }

 if(j>=filen)
 {
  name=sc_name(file[i].scrapn);

  if(file[i].modded)
  {
   fs_stat(name,&f);
   f.exec=file[i].exec;
   f.load=file[i].load;
   f.acc=file[i].acc;
   savefile(name,file[i].realfh,&f);
  }
  fs_delete(name);
  sc_remove(file[i].scrapn,NULL);
  err=fs_getpath(dest,sizeof(dest),file[i].realfh);
 }

 err=fs_close(file[i].realfh,err);

 if(j>=filen)
 {
  if(!err) err=fs_settype(dest,XTYPE);
 }

 losefile(i);

 return(err);
}



_kernel_oserror * closeallfiles(void)
{
 _kernel_oserror * err;
 int               i;

 err=NULL;

 for(i=0;i<filen;i++)
 {
  err=closefile(i);
 }

 return(err);
}




/* r1==file handle or zero... */

int findclose(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;
 int               i;
 int               code;
 int               currentfs;
 char            * p;
 char              temp[64];

 code=1;
 setvskip(1);
 err=NULL;

 if(r->r[1]==0) /* close all files on current FS */
 {
  if(filen)
  {
   currentfs=0;

   p=getenv("FileSwitch$CurrentFilingSystem");
   if(p)
   {
    strcpy(temp,p);
    rx.r[0]=13;
    rx.r[1]=(int)temp;
    rx.r[2]=0;

    err=_kernel_swi(OS_FSControl,&rx,&rx);
    if(!err) currentfs=rx.r[1];
   }

   for(i=0;i<filen;i++)
   {
    if(file[i].scrapfh==r->r[1])
    {
     rx.r[0]=254;
     rx.r[1]=file[i].realfh;

     err=_kernel_swi(OS_Args,&rx,&rx);

     if(!err && !(rx.r[0] & (1<<11)))
     {
      if((rx.r[2] & 0xFF)==currentfs)
      {
       err=closefile(i);
       code=0;
      }
     }
    }
   }
  }
 }
 else
 {
  for(i=0;i<filen;i++)
  {
   if(file[i].scrapfh==r->r[1])
   {
    err=closefile(i);
    code=0;
   }
  }
 }

 setvskip(0);

 return(code);
}



int findclosep(_kernel_swi_regs * r)
{
 USE(r);
 return(1);
}



static int oldr0;



static _kernel_oserror * fiopen(char * name,int mode,int * fh)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 rx.r[0]=mode|0xF;
 rx.r[1]=(int)name;

 err=_kernel_swi(OS_Find,&rx,&rx);

 *fh=rx.r[0];

 return(err);
}



static _kernel_oserror * fiexpand(char * destname,int src,int length)
{
 _kernel_oserror  * err;
 int                fh;
 char             * srcbuffer;
 char             * destbuffer;
 buffer             srcb;
 buffer             destb;


 err=fs_open(destname,'w',&fh);
 if(!err)
 {
  destbuffer=srcbuffer=NULL;

  if(!err) err=flex_alloc((flex_ptr)&srcbuffer,DEFPACKSIZE);
  if(!err) err=flex_alloc((flex_ptr)&destbuffer,DEFPACKSIZE);

  if(!err) err=openinflate();

  if(!err)
  {
   initbuff(&srcb,srcbuffer,length,DEFUNPACKSIZE,src);
   initbuff(&destb,destbuffer,-1,DEFUNPACKSIZE,fh);
   err=initsrcbuffer(&srcb);
   destb.flags=BCRC;

   zsrc=&srcb;
   zdest=&destb;

   err=inflate_entry();
 
   closeinflate();
  }

  if(srcbuffer) flex_free((flex_ptr)&srcbuffer);
  if(destbuffer) flex_free((flex_ptr)&destbuffer);

  err=fs_close(fh,err);
 }
 return(err);
}






int findopen(_kernel_swi_regs * r)
{
 oldr0=r->r[0];
 return(2);
}



/* let the os open the file        */
/* get the path and check the bits */
/* check the inside data           */
/* open a scrap file - expand      */


int findopenp(_kernel_swi_regs * r)
{
 _kernel_oserror *  err;
 char               name[256];
 fstat              f;
 fstat              fx;
 int                sh;
 int                fh;
 int                realfh;
 int                i;
 int                j;
 int                crc;
 int                all;



 setvskip(1);

 if((realfh=r->r[0])!=0 && !(r->r[LRINDEX] & OVERFLOW))
 {
  fs_getpath(name,sizeof(name),realfh);

  if(inzone(name,&all))
  {
   fs_stat(name,&fx);

   if((oldr0 & 0xC0)==0x80)   /* it's a write */
   {
    if(all || fx.type==XTYPE || cotype(fx.type))
    {
     err=memcheck();
     if(!err) err=getfile(&i);
     if(!err)
     {
      err=sc_create(&sh);
      if(!err)
      {
       err=fiopen(sc_name(sh),oldr0,&fh);
       crc=crcname(name);

       if(fx.type==XTYPE) fs_getdeftime(&f,DATA);
       else               f=fx;

       if(!err)
       {
        file[i].scrapn=sh;
        file[i].scrapfh=fh;
        file[i].realfh=realfh;
        file[i].load=f.load;
        file[i].exec=f.exec;
        file[i].acc=f.acc;
        file[i].crc=crc;
       }
       if(err) err=sc_remove(sh,err);
      }
      if(err) losefile(i);
      r->r[0]=fh;
     }

     if(err) 
     {
      err=fs_close(realfh,err);
      r->r[LRINDEX]|=OVERFLOW;
      r->r[0]=(int)err;
     }
    }
   }
   else
   if(fx.type==XTYPE)
   {
    err=checkourfiles(realfh,&f);

    if(!err && f.object)
    {
     err=memcheck();
     if(!err) err=getfile(&i);
     if(!err)
     {
      crc=crcname(name);
      j=findcrcname(crc,name);

      if(j>=0)
      {
       file[i]=file[j];
       err=fiopen(sc_name(file[j].scrapn),oldr0,&fh);
       if(!err)
       {
        file[i].scrapfh=fh;
        file[i].realfh=realfh;
       }
      }
      else
      {
       err=sc_create(&sh);
       if(!err)
       {
        err=fiexpand(sc_name(sh),realfh,fx.length);
        if(!err)
        {
         err=fiopen(sc_name(sh),oldr0,&fh);
         if(!err)
         {
          file[i].scrapn=sh;
          file[i].scrapfh=fh;
          file[i].realfh=realfh;
          file[i].load=f.load;
          file[i].exec=f.exec;
          file[i].acc=f.acc;
          file[i].crc=crc;
         }
        }
        if(err) err=sc_remove(sh,err);
       }
      }

      if(err) losefile(i);
      r->r[0]=fh;
     }

     if(err) 
     {
      err=fs_close(realfh,err);
      r->r[LRINDEX]|=OVERFLOW;
      r->r[0]=(int)err;
     }
    }
    else
    {
     fs_seek(realfh,0);
    }
   }
  }
 }

 setvskip(0);

 return(1);
}




_kernel_oserror * uncompressfiles(char * source,char * dest)
{
 _kernel_oserror * err;
 int               fh;
 fstat             fx;

 err=fs_stat(source,&fx);
 if(!err && fx.object)
 {
  err=fs_open(source,'r',&fh);
  if(!err && fh)
  {
   err=checkourfiles(fh,&fx);
   if(!err) err=fiexpand(dest,fh,fx.length);
   err=fs_close(fh,err);
   if(!err && fx.object) err=fs_stamp(dest,&fx);
  }
 }

 return(err);
}



_kernel_oserror * uncompressfile(char * args[])
{
 return(uncompressfiles(args[0],args[1]));
}




_kernel_oserror * findinit(void)
{
 filen=0;
 return(flex_alloc((flex_ptr)&file,sizeof(filestr)*FILECHUNK));
}

