/*->c.file */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "h.etc"

#include "h.err"

#include "h.mem"
#include "h.rminfo"
#include "h.flex"


#include "h.constants"

#include "h.fs"
#include "h.buffer"
#include "h.scrap"
#include "h.zip"
#include "h.inflate"
#include "h.unzip"
#include "h.deflate"


#include "h.vectors"
#include "h.command"

#include "h.gbpb"
#include "h.find"


#include "h.file"





#define F_FILEPATH     0x1
#define F_PATHSTRING   0x2
#define F_PATHVARIABLE 0x3
#define F_NONE         0x4



static _kernel_oserror * fl_open(char * name,char * var,
                                             int varmode,int mode,int * fh)
{
 _kernel_swi_regs rx;
 _kernel_oserror * err;

 if(mode=='r') rx.r[0]=0x4F;
 else
 if(mode=='w') rx.r[0]=0x8F;
 else
 if(mode=='u') rx.r[0]=0xCF;

 if(varmode==F_FILEPATH) rx.r[0]^=3;
 else
 if(varmode==F_PATHSTRING) rx.r[0]^=2;
 else
 if(varmode==F_PATHVARIABLE) rx.r[0]^=1;

 rx.r[1]=(int)name;
 rx.r[2]=(int)var;

 err=_kernel_swi(OS_Find,&rx,&rx);

 *fh=rx.r[0];

 return(err);
}



static _kernel_oserror * writegheader(int fh,fstat * f)
{
 _kernel_oserror * err;
 int               magic=0x8B1F;
 int               compresstype=8;
 int               bits=0x4;           /* extra field present */
 int               time=0;
 int               extrabits=0;
 int               os=0;
 int               exlen=2+2+4*7;
 int               exfield[8];


 exfield[0]='A'+(((int)'C')<<8)+((4*7)<<16);
 exfield[1]=f->load;
 exfield[2]=f->exec;
 exfield[3]=f->acc;
 exfield[4]=f->length;
 exfield[5]=0;
 exfield[6]=0;
 exfield[7]=0;

           err=fs_write(fh,&magic,2);
 if(!err)  err=fs_write(fh,&compresstype,1);
 if(!err)  err=fs_write(fh,&bits,1);
 if(!err)  err=fs_write(fh,&time,4);
 if(!err)  err=fs_write(fh,&extrabits,1);
 if(!err)  err=fs_write(fh,&os,1);
 if(!err)  err=fs_write(fh,&exlen,2);
 if(!err)  err=fs_write(fh,&exfield,exlen);

 return(err);
}




_kernel_oserror * savefile(char * name,int fh,fstat * f)
{
 _kernel_oserror * err;
 int               crc;
 char            * destbuff;
 char            * srcbuff;
 buffer            srcb;
 buffer            destb;
 int               opt;
 int               sh;



 err=fs_open(name,'r',&sh);
 if(!err)
 {
  err=fs_seek(fh,0);
  if(!err) err=writegheader(fh,f);
  if(!err)
  {
   err=flex_alloc((flex_ptr)&destbuff,DEFPACKSIZE);
   if(!err)
   {
    err=flex_alloc((flex_ptr)&srcbuff,DEFPACKSIZE);
    if(!err)
    {
     err=opendeflate(f->length);
     if(!err)
     {
      initbuff(&destb,destbuff,-1,DEFPACKSIZE,fh);
      initbuff(&srcb,srcbuff,f->length,DEFPACKSIZE,sh);
      srcb.flags=BCRC;
      err=initsrcbuffer(&srcb);

      if(!err) err=deflate(&srcb,&destb,&opt);
      if(!err) err=dumpdestbuffer(&destb);

      closedeflate();
     }

     crc=~srcb.crc;

     if(!err)  err=fs_write(fh,&crc,4);
     if(!err)  err=fs_write(fh,&f->length,4);

     flex_free((flex_ptr)&srcbuff);
    }
    flex_free((flex_ptr)&destbuff);
   }
  }
  err=fs_close(sh,err);
 }

 return(err);
}





static _kernel_oserror * saveblocksub(char * name,_kernel_swi_regs * r,
                                      fstat * f,int type)
{
 _kernel_oserror * err;
 int               fh;
 int               crc;
 char            * destbuff;
 buffer            srcb;
 buffer            destb;
 int               opt;
 char            * srcbuff;


 if(r->r[0]==10 || r->r[0]==11)
 {
  err=fs_getdeftime(f,type);
 }
 else
 {
  f->load=r->r[2];
  f->exec=r->r[3];
  f->acc=DEFATT;
 }

 if(r->r[0]==0 || r->r[0]==10)
 {
  f->length=(r->r[5]-r->r[4]);
  srcbuff=(char*)r->r[4];
 }
 else
 {
  f->length=0;
  srcbuff=(char*)&f->length;
 }

 err=fs_open(name,'w',&fh);
 if(!err)
 {
  err=writegheader(fh,f);
  if(!err)
  {
   err=flex_alloc((flex_ptr)&destbuff,DEFPACKSIZE);
   if(!err)
   {
    err=opendeflate(f->length);
    if(!err)
    {
     initbuff(&destb,destbuff,-1,DEFPACKSIZE,fh);
     initbuff(&srcb,srcbuff,f->length,f->length,0);
     srcb.flags=BCRC;
     err=initsrcbuffer(&srcb);

     if(!err) err=deflate(&srcb,&destb,&opt);
     if(!err) err=dumpdestbuffer(&destb);

     closedeflate();
    }

    crc=~srcb.crc;

    if(!err)  err=fs_write(fh,&crc,4);
    if(!err)  err=fs_write(fh,&f->length,4);

    flex_free((flex_ptr)&destbuff);
   }
  }
           err=fs_close(fh,err);
  if(!err) err=fs_settype(name,XTYPE);
 }

 return(err);
}




/* If the save is to the zone and the type is listed */
/* Or if the save is overwriting a compressed file   */

/* r0==0,10 save block, r0=7,11 create file */
/* r1->filename                             */
/* r2=load,r3=exec or r2=type               */

int filesaveblock(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              buffer[256];
 int               type;
 fstat             f;
 int               code;
 int               all;

 setvskip(1);
 code=1;

 err=fs_canonicalpath((char*)r->r[1],buffer,sizeof(buffer),NULL,NULL);
 if(!err)
 {
  if(inzone(buffer,&all))
  {
   if(r->r[0]==10 || r->r[0]==11) type=r->r[2];
   else                           type=filetype(r->r[2]);

   if(type==XTYPE || cotype(type) || all)
   {
    err=saveblocksub(buffer,r,&f,type);
    code=0;
   }
   else
   {
    err=fs_stat(buffer,&f);
    if(!err && f.object==1 && f.type==XTYPE) 
    {
     err=saveblocksub(buffer,r,&f,type);
     code=0;
    }
   }
  }
 }

 setvskip(0);
 return(code);
}



static _kernel_oserror * filewritef(_kernel_swi_regs * r,fstat * f)
{
 fstat f2;
 
 if(r->r[0]==1 || r->r[0]==2) f->load=r->r[2];
 if(r->r[0]==1 || r->r[0]==3) f->exec=r->r[3];
 if(r->r[0]==1 || r->r[0]==4) f->acc=r->r[5];
 if(r->r[0]==9)
 {
  if(f->type==-1) f->type=0xFFD;
  fs_getdeftime(&f2,f->type);
  f->load=f2.load;
  f->exec=f2.exec;
 }
 else
 if(r->r[0]==18)
 {
  if(f->type==-1)
  {
   fs_getdeftime(&f2,f->type);
   f->load=f2.load;
   f->exec=f2.exec;
  }
  f->load&=~(0xFFF00);
  f->load|=((r->r[2]&0xFFF)<<8);
 }

 return(NULL);
}



/* OS_File 1,2,3,4, 9 and 18 */

int filewritecat(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 char              buffer[256];
 fstat             f;
 int               code;
 int               fh;
 int               n;


 setvskip(1);
 code=1;

 err=fs_canonicalpath((char*)r->r[1],buffer,sizeof(buffer),NULL,NULL);
 if(!err)
 {
  if(inzone(buffer,NULL))
  {
   err=fs_stat(buffer,&f);
   if(!err && f.object==1 && f.type==XTYPE) 
   {
    err=findreadstat(buffer,&f,&n);
    if(f.object)
    {
     filewritef(r,&f);
     findwritestat(&f,n);
    }
    else
    {
     err=fs_open(buffer,'u',&fh);
     if(!err && fh)
     {
      err=checkourfiles(fh,&f);

      if(!err && f.object)
      {
       filewritef(r,&f);
       err=fs_seek(fh,0);
       if(!err) err=writegheader(fh,&f);
       code=0;
      }
      err=fs_close(fh,err);
     }
    } 
   }
  }
 }

 setvskip(0);
 return(code);
}







static _kernel_oserror * fl_findpath(char * path,char * var,int mode,fstat * f)
{
 _kernel_oserror * err;
 char              buffer[256];

 f->object=-1;

 if(mode==F_FILEPATH)
 {
  err=fs_canonicalpath(path,buffer,sizeof(buffer),"File$Path",NULL);
 }
 else
 if(mode==F_PATHSTRING)
 {
  err=fs_canonicalpath(path,buffer,sizeof(buffer),NULL,var);
 }
 else
 if(mode==F_PATHVARIABLE)
 {
  err=fs_canonicalpath(path,buffer,sizeof(buffer),var,NULL);
 }
 else
 {
  err=fs_canonicalpath(path,buffer,sizeof(buffer),NULL,NULL);
 }

 if(!err && inzone(buffer,NULL))
 {
  err=findreadstat(buffer,f,NULL);
 }

 return(err);
}



static _kernel_oserror * fxloadfile(int fh,int slength,
                                           int dlength,char * destbuffer)
{
 _kernel_oserror * err;
 char            * srcbuffer;
 buffer            srcb;
 buffer            destb;

 srcbuffer=NULL;

 err=memcheck();
 if(!err) err=flex_alloc((flex_ptr)&srcbuffer,DEFPACKSIZE);
 if(!err) err=openinflate();

 if(!err)
 {
  initbuff(&srcb,srcbuffer,slength,DEFUNPACKSIZE,fh);
  initbuff(&destb,destbuffer,-1,dlength,0);
  err=initsrcbuffer(&srcb);
  destb.flags=BCRC;

  zsrc=&srcb;
  zdest=&destb;

  err=inflate_entry();

  closeinflate();
 }

 if(srcbuffer) flex_free((flex_ptr)&srcbuffer);

 return(err);
}






/* r0=12 (path string), 14(path variable), 16 (none), 255 (filepath) */

int fileloadfile(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 _kernel_swi_regs  rx;
 int               mode;
 int               fh;
 fstat             f;
 char            * destbuffer;

 fstat             f2;


 setvskip(1);

 if(r->r[0]==12) rx.r[0]=13;
 else
 if(r->r[0]==14) rx.r[0]=15;
 else
 if(r->r[0]==255) rx.r[0]=5;
 else             rx.r[0]=17;

 rx.r[4]=r->r[4];
 rx.r[1]=r->r[1];

 err=_kernel_swi(OS_File,&rx,&rx);

 if(rx.r[0]==1 && filetype(rx.r[2])==XTYPE)
 {
  if(r->r[0]==255) mode=F_FILEPATH;
  else
  if(r->r[0]==12)  mode=F_PATHSTRING;
  else
  if(r->r[0]==14)  mode=F_PATHVARIABLE;
  else             mode=F_NONE;


  fl_findpath((char*)r->r[1],(char*)r->r[4],mode,&f2);
  if(f2.object>=0) /* i.e. it's in our zone */
  {
   err=fl_open((char*)r->r[1],(char*)r->r[4],mode,'r',&fh);
   if(!err && fh)
   {
    err=checkourfiles(fh,&f);

    if(!err && f.object)
    {
     /* load file */

     if(r->r[3] & 0xFF) destbuffer=(char*)f.load;
     else               destbuffer=(char*)r->r[2];

     r->r[0]=f.object;
     r->r[2]=f.load;
     r->r[3]=f.exec;
     r->r[4]=f.length;
     r->r[5]=f.acc;

     err=fxloadfile(fh,rx.r[4],f.length,destbuffer);
     err=fs_close(fh,err);

     setvskip(0);

     return(0);
    }

    err=fs_close(fh,err);
   }
  }
 }
 setvskip(0);
 return(1);
}






static int oldr4;
static int oldr0;




/* OS_File 5, 13, 15 and 17 */

int filereadcat(_kernel_swi_regs * r)
{
 oldr0=r->r[0];
 oldr4=r->r[4];
 return(2);
}



int filereadcatp(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 fstat             f;
 int               fh;
 int               mode;

 if(r->r[0]==1 && !(r->r[LRINDEX] & OVERFLOW))
 {
  if(filetype(r->r[2])==XTYPE)
  {
   setvskip(1);

   if(oldr0==5) mode=F_FILEPATH;
   else
   if(oldr0==13) mode=F_PATHSTRING;
   else
   if(oldr0==15) mode=F_PATHVARIABLE;
   else          mode=F_NONE;

   err=fl_findpath((char*)r->r[1],(char*)oldr4,mode,&f);
   if(!err)
   {
    if(f.object==1)
    {
     r->r[2]=f.load;
     r->r[3]=f.exec;
     r->r[4]=f.length;
     r->r[5]=f.acc;
    }
    else
    if(f.object==0)
    {
     err=fl_open((char*)r->r[1],(char*)oldr4,mode,'r',&fh);
     if(!err && fh)
     {
      err=checkourfiles(fh,&f);
      fs_close(fh,err);

      if(!err && f.object)
      {
       r->r[2]=f.load;
       r->r[3]=f.exec;
       r->r[4]=f.length;
       r->r[5]=f.acc;
      }
     }
    }
   }
   setvskip(0);
  }
 }
 return(1);
}



/* OS_File 20,21,22 and 23 */



int filereadcat2(_kernel_swi_regs * r)
{
 oldr0=r->r[0];
 oldr4=r->r[4];
 return(2);
}


int filereadcat2p(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 fstat             f;
 int               fh;
 int               mode;

 if(r->r[0]==1 && !(r->r[LRINDEX] & OVERFLOW))
 {
  if(r->r[6]==XTYPE)
  {
   setvskip(1);

   if(oldr0==20) mode=F_FILEPATH;
   else
   if(oldr0==21) mode=F_PATHSTRING;
   else
   if(oldr0==22) mode=F_PATHVARIABLE;
   else          mode=F_NONE;

   err=fl_findpath((char*)r->r[1],(char*)oldr4,mode,&f);
   if(!err)
   {
    if(f.object==1)
    {
     r->r[2]=f.load;
     r->r[3]=f.exec;
     r->r[4]=f.length;
     r->r[5]=f.acc;
     r->r[6]=filetype(r->r[2]);
    }
    else
    if(f.object==0)
    {
     err=fl_open((char*)r->r[1],(char*)oldr4,mode,'r',&fh);
     if(!err && fh)
     {
      err=checkourfiles(fh,&f);
      fs_close(fh,err);

      if(!err && f.object)
      {
       r->r[2]=f.load;
       r->r[3]=f.exec;
       r->r[4]=f.length;
       r->r[5]=f.acc;
       r->r[6]=filetype(r->r[2]);
      }
     }
    }
   }

   setvskip(0);
  }
 }
 return(1);
}


typedef struct transientstr
{
 struct transientstr * next;
 struct transientstr * prev;

 char                  code[4];

} transientstr;


static transientstr * firsttransient;


extern _kernel_oserror * runcode(int exec,char * commandtail,
                                          char * commandname);

extern _kernel_oserror * runtrans(int exec,int codesize,
                            char * commandtail,char * commandname);




_kernel_oserror * filefinit(void)
{
 transientstr * old;

 while(firsttransient)
 {
  old=firsttransient;
  firsttransient=firsttransient->next;
  free(old);
 }

 firsttransient=NULL;

 return(NULL);
}




_kernel_oserror * fileinit(void)
{
 firsttransient=NULL;
 return(NULL);
}




/* OS_FSControl 4 */

static char * runpath="Run$Path";

int runfile(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 fstat             f;
 _kernel_swi_regs  rx;
 int               fh;
 char            * runname;
 char              temp[256];
 int               code;
 char              temp2[64];
 char            * p;
 char            * q;
 transientstr    * address;
 int               codesize;
 transientstr    * next;
 transientstr    * prev;


 code=1;
 runname=(char*)r->r[1];
 setvskip(1);

 rx.r[0]=15;
 rx.r[1]=(int)runname;
 rx.r[4]=(int)runpath;
 err=_kernel_swi(OS_File,&rx,&rx);

 if(rx.r[0]==2)             /* take out directories.!Run */
 {
  q=temp;
  p=runname;
  while((*q++=*p++)>32);
  strcpy(q-1,".!Run");
  runname=temp;

  rx.r[0]=15;
  rx.r[1]=(int)runname;
  rx.r[4]=(int)runpath;
  err=_kernel_swi(OS_File,&rx,&rx);
 }


 if(rx.r[0]==1 && filetype(rx.r[2])==XTYPE)
 {
  fl_findpath(runname,runpath,F_PATHVARIABLE,&f);

  if(f.object>=0) /* i.e. it's in our zone */
  {
   err=fl_open(runname,runpath,F_PATHVARIABLE,'r',&fh);
   if(!err && fh)
   {
    err=checkourfiles(fh,&f);

    if(!err && f.object)
    {
     code=0;
     if(f.type==-1 || f.type==0xFF8)
     {
      if(f.type==0xFF8) f.load=f.exec=0x8000;

      if(f.load>=0x8000)
      {
       err=fxloadfile(fh,rx.r[4],f.length,(char*)f.load);
       err=fs_close(fh,err);
       fh=0;
       setvskip(0);

       err=fs_codesync(f.load,f.length);
       if(!err)
       {
        if(f.type==0xFF8)
        {
         rx.r[0]=0;
         rx.r[1]=0xB7;
         rx.r[2]=0x8000;
         rx.r[3]=f.length;
         rx.r[4]=0x8000;
         rx.r[5]=(int)runname;

         err=_kernel_swi(OS_ServiceCall,&rx,&rx);

         rx.r[0]=1;
         rx.r[1]=0xB7;
         rx.r[2]=0x8000;

         err=_kernel_swi(OS_ServiceCall,&rx,&rx);

         f.exec=rx.r[4];
         f.length=rx.r[3];

         err=fs_codesync(f.load,f.length);
        }
       }

       p=(char*)r->r[1];
       while(1) 
       {
        if(*p==' ')
        {
         *p++=0;
         break;
        }
        else
        if(*p<' ') 
        {
         break;
        }
        p++;
       }

       err=runcode(f.exec,p,(char*)r->r[1]);
      }
     }
     else
     if(f.type==0xFFC)
     {
      codesize=(f.length+0x3)&(~0x3);
      address=malloc(sizeof(transientstr)+codesize+1024);
      if(address)
      {
       address->next=firsttransient;
       address->prev=NULL;
       firsttransient=address;

       err=fxloadfile(fh,rx.r[4],f.length,address->code);
       err=fs_close(fh,err);
       fh=0;
       setvskip(0);

       fs_codesync((int)address->code,f.length);

       p=(char*)r->r[1];
       while(1) 
       {
        if(*p==' ')
        {
         *p++=0;
         break;
        }
        else
        if(*p<' ') 
        {
         break;
        }
        p++;
       }

       err=runtrans((int)address->code,codesize,p,(char*)r->r[1]);

       next=address->next;
       prev=address->prev;
       if(next) next->prev=prev;
       if(prev) prev->next=next;
       if(address==firsttransient) firsttransient=next;

       free(address);
      }
      else
      {
       err=&mb_malloc_failed;
      }
     }
     else
     {
      /* find Alias$@RunType_XXX */

      err=fs_close(fh,err);
      fh=0;
      setvskip(0);

      sprintf(temp2,"Alias$@RunType_%X",f.type);
      p=getenv(temp2);

      rx.r[0]=r->r[1];
      rx.r[1]=(int)temp;
      rx.r[2]=sizeof(temp);
      rx.r[3]=(int)p;
      rx.r[4]=strlen(p);

      err=_kernel_swi(OS_SubstituteArgs,&rx,&rx);

      err=oscli(temp);
     }

     /* if we get here it was one of our files */
     if(err) 
     {
      r->r[LRINDEX]|=OVERFLOW;
      r->r[0]=(int)err;
     }

    }
    if(fh) err=fs_close(fh,err);
   }
  }
 }

 setvskip(0);
 return(code);
}




static _kernel_oserror * compressfiles(char * source,char * dest)
{
 _kernel_oserror * err;
 fstat             f;
 int               fh;

 err=fs_stat(source,&f);
 if(!err && f.object)
 {
  err=fs_open(dest,'w',&fh);
  if(!err && fh)
  {
   err=savefile(source,fh,&f);
   err=fs_close(fh,err);
   if(!err) err=fs_settype(dest,XTYPE);
  }
 }

 return(err);
}



_kernel_oserror * compressfile(char * args[])
{
 return(compressfiles(args[0],args[1]));
}



_kernel_oserror * zipman(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 err=NULL;

 switch(r->r[0])
 {
     case 0:
            err=compressfiles((char*)r->r[1],(char*)r->r[2]);
            break;

     case 1:
            err=uncompressfiles((char*)r->r[1],(char*)r->r[2]);
            break;

 }

 return(err);
}












