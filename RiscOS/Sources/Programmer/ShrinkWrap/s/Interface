; s.Interface

        IMPORT  |Image$$RO$$Base|
        IMPORT  |_Lib$Reloc$Off$DP|

        GET   Hdr:ListOpts
        GET   Hdr:Macros
        GET   Hdr:System
        GET   Hdr:Machine.<Machine>
        GET   Hdr:APCS.<APCS>

        IMPORT  x_find
        IMPORT  x_findp
        IMPORT  x_args
        IMPORT  x_argsp
        IMPORT  x_file
        IMPORT  x_filep
        IMPORT  x_gbpb
        IMPORT  x_gbpbp
        IMPORT  x_fsc
        IMPORT  x_fscp
        IMPORT  x_bput
        IMPORT  x_bputp

        EXPORT  v_find
        EXPORT  v_findp
        EXPORT  v_args
        EXPORT  v_argsp
        EXPORT  v_file
        EXPORT  v_filep
        EXPORT  v_gbpb
        EXPORT  v_gbpbp
        EXPORT  v_fsc
        EXPORT  v_fscp
        EXPORT  v_bput
        EXPORT  v_bputp


        AREA    FSEntry_Interfaces,REL,CODE,READONLY

        LTORG

v_find
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*0
        B       fsentry_common

v_findp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*1
        B       fsentry_common

v_args
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*2
        B       fsentry_common

v_argsp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*3
        B       fsentry_common

v_file
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*4
        B       fsentry_common

v_filep
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*5
        B       fsentry_common

v_gbpb
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*6
        B       fsentry_common

v_gbpbp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*7
        B       fsentry_common

v_fsc
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*8
        B       fsentry_common

v_fscp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*9
        B       fsentry_common

v_bput
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*10
        B       fsentry_common

v_bputp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*11
        B       fsentry_common



fsentry_common

        ; Store the input registers onto the stack


        STMFD   sp!, {r8, pc}
        STMFD   sp!, {r0-r7, sl, fp, ip, lr}

        [ :LNOT: No32bitCode
        MRS     lr, CPSR
        STR     lr, [sp, #13*4]         ; blat over the pc stored above R8
        ]

        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; private word pointer
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
        MOV     fp, #0                  ; halt C backtrace here!

        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000

        ; Pass a pointer to the structure on the stack
        MOV     a1, sp


        ; BL    fsentry_branchtable[r8]
        MOV     lr, pc
        ADD     pc, pc, r8

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000

10      ; This label must be the 2nd instructions past the above ADD pc, pc, r8

        STMIA   sl, {v1, v2}            ; restore old reloc modifiers

        ; r0==0        claim
        ; r0==1        continue
        ; r0==other    call back

        CMP     r0,#1
        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}
        ADDLS   sp, sp, #4           ; LS = CC or EQ; junk stacked veneer #
        BCC     vector_claim
        BEQ     vector_continue

        STMFD   sp!, {r10-r12, r14}

        Push    "pc"
        LDMIB   sp, {r10-r12,r15}

        MOV     r0, r0               ; StrongARMs'll come here (push+8)


        ; returned from vector, start post processing

        LDMFD   sp!, {r10-r12,r14}

        [ {FALSE}
        ; A lot of ballsing around seems to go on here.  You might have
        ; thought the original author was constructing a 26-bit return
        ; address in LR to be movsed into R14 or LDM^ed into PC.  Wrong!
        ; it simply uses the value to TEQP against, so all this shit can go.

        BIC     lr,  lr, #&FC000003  ; get PSW bits into lr
        MOV     r8,  pc
        AND     r8,  r8, #&FC000003
        ORR     lr,  lr, r8          ;
        ]

        [ :LNOT: No32bitCode
        MRS     lr, CPSR
        |
        MOV     lr, pc
        ]

        LDR     r8, [sp], #8         ; trash stored CPSR - no longer needed
        ADD     r8,  r8,  #(4 + %B10 - %F20)


        STMFD   sp!, {r0-r7, sl, fp, ip, lr}


        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; private word pointer
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
        MOV     fp, #0                  ; halt C backtrace here!

        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000

        ; Pass a pointer to the structure on the stack
        MOV     a1, sp


        ; BL    fsentry_branchtable[r8]
        MOV     lr, pc
        ADD     pc, pc, r8

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000

20      ; This label must be the 2nd instructions past the above ADD pc, pc, r8

        STMIA   sl, {v1, v2}            ; restore old reloc modifiers


        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}

        ; set flags bits from lr

        [ :LNOT: No32bitCode
        MSR     CPSR_f, lr
        |
        TEQP    lr,  #0
        MOV     r0,  r0
        ]

        LDMFD   sp!, {r8, pc}


; in both these cases, the stack holds:  PSR (PC or CPSR), R8, claim PC

vector_continue
        LDR     r8, [sp], #4     ; restore stacked CPSR
        [ :LNOT: No32bitCode
        MSR      CPSR_f, r8
        |
        TEQP     r8, #0
        NOP
        ]
        LDMFD   sp!, {r8}
        MOV     pc,  lr          ; pass on call.


vector_claim
        ; set flags bits from lr - (ie. restore caller's flags)

        [ :LNOT: No32bitCode
        LDR     lr, [sp], #4     ; unstack CPSR
        MSR     CPSR_f, lr
        |
        TEQP    lr,  #0
        MOV     r0,  r0
        ADD     sp, sp, #4       ; junk veneer number and stacked CPSR
        ]
        LDMFD   sp!, {r8, pc}



fsentry_branchtable
        B       x_find
        B       x_findp
        B       x_args
        B       x_argsp
        B       x_file
        B       x_filep
        B       x_gbpb
        B       x_gbpbp
        B       x_fsc
        B       x_fscp
        B       x_bput
        B       x_bputp


        END
