;->s.Interface



r0      RN      0
r1      RN      1
r2      RN      2
r3      RN      3
r4      RN      4
r5      RN      5
r6      RN      6
r7      RN      7
r8      RN      8
r9      RN      9
r10     RN     10
r11     RN     11
r12     RN     12
r13     RN     13
r14     RN     14
r15     RN     15

a1      RN      0
a2      RN      1
a3      RN      2
a4      RN      3

v1      RN      4
v2      RN      5
v3      RN      6
v4      RN      7
v5      RN      8
v6      RN      9

sl      RN     10
fp      RN     11
ip      RN     12
sp      RN     13
lr      RN     14
pc      RN     15

C_bit   *       1 :SHL: 29
V_bit   *       1 :SHL: 28


        IMPORT  |Image$$RO$$Base|
        IMPORT  |_Lib$Reloc$Off$DP|


        IMPORT  x_find
        IMPORT  x_findp
        IMPORT  x_args
        IMPORT  x_argsp
        IMPORT  x_file
        IMPORT  x_filep
        IMPORT  x_gbpb
        IMPORT  x_gbpbp
        IMPORT  x_fsc
        IMPORT  x_fscp
        IMPORT  x_bput
        IMPORT  x_bputp



        EXPORT  v_find
        EXPORT  v_findp
        EXPORT  v_args
        EXPORT  v_argsp
        EXPORT  v_file
        EXPORT  v_filep
        EXPORT  v_gbpb
        EXPORT  v_gbpbp
        EXPORT  v_fsc
        EXPORT  v_fscp
        EXPORT  v_bput
        EXPORT  v_bputp




        AREA    FSEntry_Interfaces,REL,CODE,READONLY

        LTORG

v_find
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*0
        B       fsentry_common

v_findp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*1
        B       fsentry_common

v_args
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*2
        B       fsentry_common

v_argsp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*3
        B       fsentry_common

v_file
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*4
        B       fsentry_common

v_filep
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*5
        B       fsentry_common

v_gbpb
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*6
        B       fsentry_common

v_gbpbp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*7
        B       fsentry_common

v_fsc
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*8
        B       fsentry_common

v_fscp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*9
        B       fsentry_common

v_bput
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*10
        B       fsentry_common

v_bputp
        STMFD   sp!, {r8}
        MOV     r8, #fsentry_branchtable - %F10 + 4*11
        B       fsentry_common



fsentry_common

        ; Store the input registers onto the stack


        STMFD   sp!, {r8}
        STMFD   sp!, {r0-r7, sl, fp, ip, lr}


        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; private word pointer
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
        MOV     fp, #0                  ; halt C backtrace here!

        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000

        ; Pass a pointer to the structure on the stack
        MOV     a1, sp


        ; BL    fsentry_branchtable[r8]
        MOV     lr, pc
        ADD     pc, pc, r8

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000

10      ; This label must be the 2nd instructions past the above ADD pc, pc, r8

        STMIA   sl, {v1, v2}            ; restore old reloc modifiers

        ; r0==0        claim
        ; r0==1        continue
        ; r0==other    call back

        CMP     r0,#0
        BEQ     vector_claim
        CMP     r0,#1
        BEQ     vector_continue


        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}
        LDR     r8,  [sp,#4]


        STMFD   sp!, {r10-r12, r14}

        MOV     r12, sp
        STMFD   sp!, {r15}
        LDMIA   r12, {r10-r12,r15}

        MOV     r0, r0
        MOV     r0, r0


        ; returned from vector, start post processing 

        LDMFD   sp!, {r10-r12,r14}

        BIC     lr,  lr, #&FC000003  ; get PSW bits into lr
        MOV     r8,  pc
        AND     r8,  r8, #&FC000003  ;
        ORR     lr,  lr, r8          ;



        LDMFD   sp!, {r8}
        ADD     r8,  r8,  #(4 + %B10 - %F20)


        STMFD   sp!, {r0-r7, sl, fp, ip, lr}


        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; private word pointer
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
        MOV     fp, #0                  ; halt C backtrace here!

        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000

        ; Pass a pointer to the structure on the stack
        MOV     a1, sp


        ; BL    fsentry_branchtable[r8]
        MOV     lr, pc
        ADD     pc, pc, r8

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000

20      ; This label must be the 2nd instructions past the above ADD pc, pc, r8

        STMIA   sl, {v1, v2}            ; restore old reloc modifiers


        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}

        ; set flags bits from lr

        TEQP    lr,  #0
        MOV     r0,  r0

        LDMFD   sp!, {r8}
        LDMFD   sp!, {pc}



vector_continue
        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}
        LDMFD   sp!, {r8}
        LDMFD   sp!, {r8}
        MOVS    pc,  lr


vector_claim
        LDMFD   sp!, {r0-r7, sl, fp, ip, lr}

        ; set flags bits from lr

        TEQP    lr,  #0
        MOV     r0,  r0

        LDMFD   sp!, {r8}
        LDMFD   sp!, {r8}
        LDMFD   sp!, {pc}



fsentry_branchtable
        B       x_find
        B       x_findp
        B       x_args
        B       x_argsp
        B       x_file
        B       x_filep
        B       x_gbpb
        B       x_gbpbp
        B       x_fsc
        B       x_fscp
        B       x_bput
        B       x_bputp


        END
