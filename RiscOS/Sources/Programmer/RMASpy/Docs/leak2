                   Notes on a storage leak in Daytona


The test that exhibits the storage leak consists of repeated dial-ups
to an ISP where there are no messages to download and when there are
no documents to send. To speed up the process of test, I modified
!Daytona to dial continuously - but checked from time to time that
this did not in itself alter the characteristics of the leak.

To investigate the leak, I developed a module to trap all calls to
OS_Module 6 (Claim RMA block), 7 (Free RMA block) and 13 (Extend
RMA Block). Unfortunately this code is extremely OS-dependent - the
SWI is not vectored, and so it's necessary to overwrite entries in
OS jump tables and instructions in the SWI exit sequence in order
to "get in" at the right moments.

Initial tests showed some 1500 claims and frees taking place during
the course of a dial-up - far too many to examine individually. I next
arranged to record each claim in an array, and to remove it when it
was freed, and just look at what was left at the end of each dial-up.
This was an improvement, but it seemed that many of the blocks
outstanding at the end of one dial-up were very soon freed in the
next.

Finally, I developed a system which effectively smooths out the
detailed allocation and freeing that takes place. The module
supports the following interface SWIs:

  RMASpy_On     - to switch tracing on

  RMASpy_Off    - to switch it off

  RMASpy_Counts - to return counts of the number of claims, frees, extends,
                  and failed calls since tracing was started; also returned
                  is the number of blocks currently allocated*, and the amount
                  of space they occupy (* that is, the number of blocks whose
                  allocations have been recorded since tracing was switched on,
                  and which remain allocated at this time)

  RMASpy_Blocks - returns a list of information about allocation and freeing
                  of "long-life" blocks. This information includes:
                      - size of block
                      - address of block
                      - address of OS_Module call
                      - epoch when block allocated (see below)
                      - time (in centisecs from trace start) of block allocation
                  Later, the time field for a "free" entry was updated to note
                  the time when the block was freed, and the caller's address was
                  modified as follows if it turned out to be the address of the
                  malloc or free routine in the shared C library:
                    - it was replaced by the address of the call to malloc() or
                      free()
                    - an additional address - recording the address of the function
                      call that called the function that contained the malloc()
                      or free() call - was returned

The period between calling RMASpy_On and the first call to RMASpy_Blocks is
known as "epoch 1", the period between the first and second call to RMASpy_Blocks
is known as "epoch 2" - and so on. For this test, RMASpy_Blocks is called after
each dial-up, and so epochs and dial-ups are the same.

A block is a "long-life" block if it remains allocated throughout N epochs,
where N is a compile-time constant for the RMASpy module. Setting N to 1
was not sufficient to reduce the "noise" in the data, and a value of 2 was
used for many tests.

The module was "checked" by comparing the storage loss/gain between dial-ups
with that indicated from direct calls to OS_Module 5 (Describe RMA); this
at least confirms that all allocations and freeings are being "seen" by the
module.

The module also initialises all storage allocated to 0xaaaaaaaa, thus making
unused storage instantly recognisable.


The following discoveries were made:


1)  There is no use of Extend RMA Block when testing Daytona under these conditions.

2)  There are exactly two failed calls to OS_Module during each dial-up. It's not
    possible to tell what reason code was given, since at the time of the failure
    R0 has been overwritten - but it's reasonable to assume that neither failure
    is a result of a claim or free call (this is because the tally of space used
    is kept by totting up *entry* values rather than values on exit from the SWI,
    and we know that this tally coincides with the real space usage reported by
    OS_Module 5 itself).

3)  There is a sequence of allocations - DEF - which remains allocated for
    exactly 10 minutes. This is not the cause of a storage leak, since they
    are always freed. These allocations are all made inside the Internet module,
    and details are as follows:

       D  -  size 132 - a "struct socket" allocated by the call
                 MALLOC(so, struct socket *, sizeof(*so), M_SOCKET, M_WAIT);
             inside the function socreate (..)

       E  -  size 96 - a "struct inpcb" allocated by the call
                 MALLOC(inp, struct inpcb *, sizeof(*inp), M_PCB, M_NOWAIT);
             inside the function in_pcballoc (..)

       F  -  size 196 - a "struct tcpcb" allocated by the call
                 tp = malloc(sizeof(*tp), M_PCB, M_NOWAIT);
             inside the function tcp_newtcpcb (..)

4)  There is a sequence of allocations - ABCBC - which, from time to time,
    appears and is never later freed. These allocations are also all made
    inside the Internet module.

5)  There are occasional small allocations from the FilterManager and the
    WindowManager that seem to be freed and reallocated over substantial
    periods of time. None of these appeared to remain allocated for ever.


Following these general experiments I concentrated entirely on the ABCBC
sequence - since this is the only one which appears to constitute a true
long-term leak.


First, I modified RMASpy to record information only about A, B and C 
allocations and freeings - where an "A" allocation is identified as one
initiated by a call of malloc(..) from a particular place in the code.
I next reverted to a version of RMASpy that recorded *all* allocations,
and determined that:

  - There is exactly one A allocation per dial-up
  - There are exactly five B allocations per dial-up, of which three
     are always freed before the dial-up is completed
  - There are exactly six C allocations per dial-up, of which four
     are always freed before the dial-up is complete

This leaves just the single sequence ABCBC referred to in (4) above,
which is *never* freed during the dial-up; instead, it is *usually*
freed during the next-but-one dial-up:

  Sequence ABCBC allocated during epoch N, freed during epoch N+2

For example, one 30 minute run of continuous dial-ups shows that out of
50 dial-ups, the sequence has remained allocated for just 15 of them,
and has been freed during epoch N+2 (or, exceptionally, epoch N+3) in
all other cases.


So what do we know of this sequence?

Block A is a "struct in_ifaddr" of size 108.
Block B is a "struct rtentry" of size 148.
Block C is a "caddr_t" of size 32.

We distinguish the two B and C blocks as B1, B2, C1, C2.

Blocks A, B1 and C1 appear to be allocated at the same time (ie within
the same centisecond); blocks B2 and C2 are allocated together but
"later" (around 7 or 8 centiseconds after AB1C1).

All of the blocks are freed "at the same time".


The call to allocate block A is:
    oia = (struct in_ifaddr *) malloc (sizeof *oia, M_IFADDR, M_WAITOK);
inside the function in_control (so, cmd, data, ifp). This is itself called
from ifioctl (so, cmd, data) and I think that cmd must be one of:
    SIOCAIFADDR
    SIOCDIFADDR
    SIOCSIFADDR
    SIOCSIFNETMASK
    SIOCSIFDSTADDR

The allocations of blocks B and C are a result of calls to rtrequest (req, ...)
where req is either RTM_ADD or RTM_RESOLVE. Inside this function we find the
following code:

    makeroute:
      R_Malloc(rt, struct rtentry *, sizeof(*rt));    **** allocates a B ****
      if (rt == 0)
             senderr(ENOBUFS);
      Bzero(rt, sizeof(*rt));
      rt->rt_flags = RTF_UP | flags;
      if (rt_setgate(rt, dst, gateway)) {
              Free(rt);
              senderr(ENOBUFS);
      }

and the function rt_setgate(..) includes the line:

     R_Malloc(new, caddr_t, dlen + glen);             **** allocates a C ****

The sequence B1C1 is allocated by a call rtrequest(RTM_ADD, ...) which is inside
the function route_output(m, so).

The sequence B2C2 is allocated by a call rtrequest(RTM_RESOLVE, ...) which is inside
the function rtalloc1(...).


Freeing occurs all in one go, and careful examination of the "call addresses"
which RMASpy records suggests the following scenario (great care has to be
taken when interpreting these addresses because the C compiler does clever
things with function calls at the end of functions (eliding one return) - so
examination of the compiled code is also necessary to be sure of what is
happening):


All of the blocks are freed as a result of a call of tcp_close (tp), which -
just before exiting - calls in_pcbdetach (inp), where inp = tp->t_inpcb.
This function in turn calls rtfree (rt) where rt = inp->inp_route.ro_rt.

rtfree(rt) is a potentially recursive function which first frees any parent
that rt may have before freeing rt itself. Here is the source code and details
of relevant macros:

    void
    rtfree(rt)
            register struct rtentry *rt;
    {
            register struct radix_node_head *rnh =
                    rt_tables[rt_key(rt)->sa_family];
            register struct ifaddr *ifa;

            if (rt == 0 || rnh == 0) {
                    panic("rtfree");
                    return;
            }
            rt->rt_refcnt--;
            if(rnh->rnh_close && rt->rt_refcnt == 0) {
                    rnh->rnh_close((struct radix_node *)rt, rnh);
            }
            if (rt->rt_refcnt <= 0 && (rt->rt_flags & RTF_UP) == 0) {
                    if (rt->rt_nodes->rn_flags & (RNF_ACTIVE | RNF_ROOT)) {
                            panic ("rtfree 2");
                            return;
                    }
                    rttrash--;
                    if (rt->rt_refcnt < 0) {
                            printf("rtfree: %p not freed (neg refs)\n", rt);
                            return;
                    }
                    ifa = rt->rt_ifa;
                    IFAFREE(ifa);
                    if (rt->rt_parent) {
                            RTFREE(rt->rt_parent);
                    }
                    Free(rt_key(rt));
                    Free(rt);
            }
    }

    void
    ifafree(ifa)
            register struct ifaddr *ifa;
    {
            if (ifa == NULL) {
                    panic("ifafree");
                    return;
            }
            if (ifa->ifa_refcnt == 0)
                    free(ifa, M_IFADDR);
            else
                    ifa->ifa_refcnt--;
    }

  where:

    Free(p)  ->   free((char *)p)

    IFAFREE(ifa)  ->  if (ifa->ifa_refcnt <= 0)
                          ifafree(ifa);
                      else
                          ifa->ifa_refcnt--;

    RTFREE(rt)   ->  if (rt->rt_refcnt <= 1)
                          rtfree(rt);
                     else
                          rt->rt_refcnt--;


I think the path through the code in our case is as follows:


rtfree(rt):

    ifa = rt->rt_ifa;
    IFAFREE(ifa);                       /* just decrements the reference count this time */
    if (rt->rt_parent)                  /* yes */
        RTFREE(rt->rt_parent);

        /* which this time expands to a recursive call to free the parent */

        rtfree(rt) where rt = rt->parent:

            ifa = rt->rt_ifa;
            IFAFREE(ifa);               /* frees block A this time */
            if (rt->rt_parent)          /* no */
                RTFREE(rt->rt_parent);
            Free(rt_key(rt));           /* frees block C1 (or C2) */
            Free(rt);                   /* frees block B1 (or B2) */

    /* and now returning to the original call of rtfree(..) */

    Free(rt_key(rt));                   /* frees block C2 (or C1) */
    Free(rt);                           /* frees block B2 (or B1) */


What next?

What we need to do is to find out why this allocation sequence is freed most times
by a call to tcp_close (..), and why sometimes this doesn't happen; good suggestions
for this behaviour will only come from networking experts!

One idea is that the reinitialisation of PPP which takes place during every dial-up
may be causing problems in the Internet module. I investigated this by removing
the reinitialisation and observing behaviour: there seemed to be no change (some
sequences freed, others not) in the twenty or so dial-ups that occurred before the
PPP module "froze".

Another idea is that the anomalous behaviour may be correlated with the assignment
of dynamic IP addresses. The ISP at 517079 allocates addresses dynamically, and it
might, for example, be the case that the sequence is freed only if the allocated
address is the same as previously supplied. I haven't yet tested that idea out,
but Richard Warren has supplied me with code that can be used to find out what
address has been allocated.

Other ideas are that the interface is closed down in such a way that sometimes
other asynchronous actions complete before storage is freed, and sometimes they
don't - so from time to time - dependent only on timings - these blocks become
"delinked" before they are freed (the "interface might go down before the socket
is closed"). Again, an expert would need to suggest in detail how this might occur.

Another suggestion is that the problem arises as a result of "cloned routes" -
whatever these might be.

There's a strong hint that these allocations are taking place during the time when
PPP is establishing a connection and defining a default route, so this might be
an area of code to look at.

It could also be worth examining the content of these structures - Richard Warren
has a book (well, actually, two *very fat* volumes) called "TCP/IP Illustrated"
which describes the TCP/IP code and the various datastructures.

Finally, it may simply be a good idea to download the latest version of the Berkeley
code and compare it with our own implementation to see if any bugs which might be
relevant to this problem have been fixed.


Mike Challis
22nd September 1998
