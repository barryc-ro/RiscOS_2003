#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#define SPECIAL 0   /* for arbitrary "one-off" processing */

#if SPECIAL
#define AAA (0x03d70b44)
#define BBB (0x03d6d104)
#define CCC (0x03d6d5b4)
#endif

#define OLD_DIFF 2  /* a block is defined as "old" if it remains allocated
                        throughout OLD_DIFF complete epochs - where an epoch
                        is the period of time between calls to RMASpy_Blocks */

  /* set these to initialise each allocated block */
#define  INIT_BLOCK  1             /* 0 => do not initialise */
#define  INIT_VALUE  (0xaaaaaaaa)

  /* address of "vector" for OS_Module SWI */
#define  VectorAddress  ((int *) 0x01f03474)

  /* address of SWI exit instruction that is replaced */
#define  RealExitAddress  ((int *) 0x01f03394)
static int real_exit_address_contents;  /* and the original contents */

  /* address of location of SWI OS_Module call in _kernel_RMAalloc,
     itself called from malloc, inside the shared C library */
#define  ADDRESS_OF_CALL_FROM_KERNEL_RMAALLOC  0x03d63d68

  /* address of location of SWI OS_Module call in _kernel_RMAfree,
     itself called from free, inside the shared C library */
#define  ADDRESS_OF_CALL_FROM_KERNEL_RMAFREE  0x03d63dc0

  /* an unconditional Branch instruction and its offset mask */
#define  B_INSTR_CODE  (0xea000000)
#define  B_OFFSET_MASK (0x00ffffff)

  /* number of bytes PC is ahead of current instruction */
#define  PC_LOOK_AHEAD (8)

  /* labels in the assembler section */
extern void EntryInterceptAddress (void);
extern void ExitInterceptAddress (void);
extern void RealEntryPointHolder (void);
extern void RealExitPointHolder (void);

  /* counts of number of calls made */
static int claims;
static int frees;
static int extends;

  /* counts of number of failed calls */
static int bad_calls;

  /* space delta */
static int space;

/* keeping track of allocated blocks */

  /* information about each allocated block is kept in one of these */
typedef struct {
   int *addr;          /* address of block (as known to caller) */
   int size;           /* size (as requested in OS_Module call) */
   int caller;         /* address containing the SWI OS_Module call - or
                           address of the malloc (..) or free (..) call
                           if this block was allocated by the C library */
   int time;           /* time block was allocated */
   int epoch;          /* "epoch" during which the block was allocated */
   int caller2;        /* if this block was allocated by the shared C
                           library, this is the address from which the
                           fucntion containing caller was called */
   int uid;            /* monotonically increasing unique identifier */
} BlockTrace;

static BlockTrace *alloc_blocks;  /* addresses an array of info     */
#define  MAX_ENTRIES  500          /* size of this array */


  /* functions to process entries */
static int find_spare_entry (void);      /* ie one whose addr field is NULL */
static void free_entry (int);
static int find_entry (int *);
static int next_entry (int);
static int num_alloc_blocks (void);
static int num_entries_in_use (void);

static void record_claim (int *, int, int, int, int *);
static void record_free (int *, int, int, int *);

  /* set non-zero should the allocation information array overflow at any time */
static int overflow = 0;

  /* epoch is incremented each time RMASpy_Changes is called */
static int epoch;

  /* time when interception started and stopped (centisecs) */
static unsigned int start_time;
static unsigned int stop_time;

 /* errors */
static _kernel_oserror error_nospace = {666, "Insufficient space to initialise"};


  /* SWI functions */
static _kernel_oserror *rmaspy_entry (_kernel_swi_regs *);
static _kernel_oserror *rmaspy_on (void);
static _kernel_oserror *rmaspy_off (void);
static _kernel_oserror *rmaspy_counts (int *, int *, int *, int *, int *, int *, int *);
static _kernel_oserror *rmaspy_exit (_kernel_swi_regs *);
static int rmaspy_blocks (BlockTrace *, int);



_kernel_oserror *module_initialise (char *cmd_tail, int podule_base, void *pw)

{
   /* allocate space to hold a record of allocated blocks */
    alloc_blocks = (BlockTrace *) malloc (MAX_ENTRIES * sizeof (BlockTrace));
    if (!alloc_blocks)
        return &error_nospace;

   /* clear the array */
    {
        int entry;

        for (entry = 0; entry < MAX_ENTRIES; entry++)
            alloc_blocks[entry].addr = NULL;
    }

   /* clear overflow flag */
    overflow = 0;

   /* set epoch to 1 */
    epoch = 1;

    return NULL;
}



_kernel_oserror *module_finalise (int fatal, int podule, void *pw)

{
   /* free RMA space (almost forgot!) */
    free (alloc_blocks);

    return NULL;
}



_kernel_oserror *module_swi (int swi_no, _kernel_swi_regs *r, void *pw)

{
    switch (swi_no)
    {
        case 0:  /* RMASpy_Entry */
            return rmaspy_entry (r);

        case 1:  /* RMASpy_On */
            return rmaspy_on ();

        case 2:  /* RMASpy_Off */
            return rmaspy_off ();

        case 3:  /* RMASpy_Counts */
            return rmaspy_counts (&r->r[0],
                                  &r->r[1], &r->r[2], &r->r[3],
                                  &r->r[4], &r->r[5], &r->r[6]);

        case 4:  /* RMASpy_Exit */
            return rmaspy_exit (r);

        case 5:  /* RMASpy_Blocks */
            if (r->r[0] == 0)
            {
                r->r[1] = MAX_ENTRIES;
                r->r[2] = num_entries_in_use ();
                r->r[3] = sizeof (BlockTrace);
            }
            else
                r->r[1] = rmaspy_blocks ((BlockTrace *) r->r[0], r->r[1]);
            return NULL;
    }

    return NULL;
}



_kernel_oserror *rmaspy_entry (_kernel_swi_regs *r)

{
    int interrupts_enabled = !_kernel_irqs_disabled ();

    if (interrupts_enabled)
        _kernel_irqs_off ();

    switch (r->r[0])
    {
        case 6:  /* OS_Module 6 - Claim */
            space += (r->r[3] + 4 + 0xf) & 0xfffffff0;
            claims++;
            break;

        case 7:  /* OS_Module 7 - Free */
            space -= *((int *) (r->r[2] - 4));
            frees++;
            break;

        case 13:  /* OS_Module 13 - Extend */
            space += (r->r[3] + 0xf) & 0xfffffff0;
            extends++;
            break;
    }

    if (interrupts_enabled)
        _kernel_irqs_on ();

    return NULL;
}



_kernel_oserror *rmaspy_exit (_kernel_swi_regs *r)

  /*  On entry:

         r->r[0]:  value of R0 when SWI was called (unless there has been an error
                    in which case bit 28 of r->r[4] will be set - see below)
         r->r[4]:  value of R14 when SWI was called (ie return address)
         r->r[5]:  value of R11 when SWI was called - this will be the address of a
                   backtrace structure if called by a conforming function
  */

{
    int interrupts_enabled = !_kernel_irqs_disabled ();
    int failed;

    if (interrupts_enabled)
        _kernel_irqs_off ();

    failed = (r->r[4] & 0x10000000) != 0;
    if (failed)
        bad_calls++;
    else
        switch (r->r[0])
        {
            case 6:  /* OS_Module 6 - Claim */
                record_claim ((int *) r->r[2], r->r[4], r->r[3], r->r[5], (int *) r->r[6]);
#if INIT_BLOCK
                {
                    int i;
                    int *p = ((int *) r->r[2]) - 1;

                    for (i = 1; i < (*p >> 2); i++)
                        p[i] = INIT_VALUE;
                }
#endif
                break;

            case 7:  /* OS_Module 7 - Free */
                record_free ((int *) r->r[2], r->r[4], r->r[5], (int *) r->r[6]);
                break;

            case 13:  /* OS_Module 13 - Extend */
                break;
        }

    if (interrupts_enabled)
        _kernel_irqs_on ();

    return NULL;
}



_kernel_oserror *rmaspy_on (void)

{
    int entry;

   /* clear the array to contain information about allocated blocks */
    for (entry = 0; entry < MAX_ENTRIES; entry++)
        alloc_blocks[entry].addr = NULL;

   /* reset overflow and epoch etc. */
    overflow = 0;
    epoch = 1;

   /* note time */
    _swix (OS_ReadMonotonicTime, _OUT(0), &start_time);

    _kernel_irqs_off ();

    *((int *) RealEntryPointHolder) = *VectorAddress;
    *VectorAddress = (int) EntryInterceptAddress;


    *((int *) RealExitPointHolder) = (int) RealExitAddress + 4;
    real_exit_address_contents = *RealExitAddress;
    *RealExitAddress = B_INSTR_CODE +
                      ( (( (int) ExitInterceptAddress - (int) RealExitAddress - PC_LOOK_AHEAD) >> 2) & B_OFFSET_MASK );
    claims = frees = extends = 0;
    bad_calls = 0;
    space = 0;

    _kernel_irqs_on ();

    return NULL;
}



_kernel_oserror *rmaspy_off (void)

{
   /* note time */
    _swix (OS_ReadMonotonicTime, _OUT(0), &stop_time);

    _kernel_irqs_off ();

    *VectorAddress = *((int *) RealEntryPointHolder);

    *RealExitAddress = real_exit_address_contents;

    _kernel_irqs_on ();

    return NULL;
}



_kernel_oserror *rmaspy_counts (int *space_delta,
                                int *claim_calls, int *free_calls, int *extend_calls,
                                int *failed_calls, int *num_blocks, int *overflowed)

{
    _kernel_irqs_off ();

    *space_delta = space;

    *claim_calls = claims;
    *free_calls = frees;
    *extend_calls = extends;

    *failed_calls = bad_calls;

    *num_blocks = num_alloc_blocks ();
    *overflowed = overflow;

    _kernel_irqs_on ();

    return NULL;
}



#if 0
int rmaspy_blocks (BlockTrace *buff, int n)

  /* Copies up to n entries from alloc_blocks into buff,
     and returns the number of entries copied */

{
    int entry = -1;
    int count = 0;

    _kernel_irqs_off ();

    while (count < n)
    {
        entry = next_entry (entry);
        if (entry < 0)
            break;

        *buff = alloc_blocks[entry];
        buff++;

        count++;
    }

    _kernel_irqs_on ();

    return count;
}
#endif



int rmaspy_blocks (BlockTrace *buff, int n)

  /* Copies up to n entries from alloc_blocks into buff,
     and returns the number of entries copied.

     Only copies entries for "old" blocks (ie those allocated
     during the epoch = epoch - OLD_DIFF), and "older" blocks
     (which were allocated before that) and which were freed
     during this epoch.

     And increments the epoch. */

{
    int entry = -1;
    int count = 0;

    _kernel_irqs_off ();

    while (count < n)
    {
        entry = next_entry (entry);
        if (entry < 0)
            break;

#if 0
        if ((int) alloc_blocks[entry].addr < 0)
        {
            *buff = alloc_blocks[entry];
            buff++;
            count++;
            free_entry (entry);
        }
        else
        if (alloc_blocks[entry].epoch == epoch)
        {
            *buff = alloc_blocks[entry];
            buff++;
            count++;
        }
        else
        if (alloc_blocks[entry].epoch == -epoch)
        {
            alloc_blocks[entry].epoch = epoch;
            *buff = alloc_blocks[entry];
            buff++;
            count++;
            free_entry (entry);
        }
#endif

        if (alloc_blocks[entry].epoch == epoch - OLD_DIFF)
        {
            *buff = alloc_blocks[entry];
            buff++;
            count++;
        }
        else
        if ((int) alloc_blocks[entry].addr < 0)
        {
            *buff = alloc_blocks[entry];
            buff++;
            count++;
            free_entry (entry);
        }
    }

    epoch++;

    _kernel_irqs_on ();

    return count;
}



void record_claim (int *addr, int caller, int size, int malloc_caller, int *backtrace)

  /* adds an entry for this RMA block */

{
    int entry = find_spare_entry ();
    int caller2 = 0;

#if SPECIAL
    int log_this_one = 0;
#endif

    if (entry < 0)
        overflow = 1;
    else
    {
        unsigned int time_stamp;

       /* if the caller is _kernel_RMAalloc (size), which is a hand-coded
          veneer on OS_Module 6 and is itself called from malloc (size) in
          the shared C library, then we locate the address from which
          malloc (size) was called and record that instead */

        caller = (caller & 0x03fffffc);   /* mask out PSR bits and pieces */
        caller -= 4;                      /* now addresses the SWI OS_Module instruction */

        if (caller == ADDRESS_OF_CALL_FROM_KERNEL_RMAALLOC)
        {
            caller = (malloc_caller & 0x03fffffc) - 4;        /* now addresses the malloc (..) call */
            if (backtrace != 0)
                caller2 = (backtrace[-1] & 0x03fffffc) - 4;   /* one level up the stack */

#if SPECIAL
            if (caller == AAA || caller == BBB || caller == CCC)
            {
                log_this_one = 1;
            }
#endif
        }

#if SPECIAL
        if (!log_this_one)
            return;
#endif

        _swix (OS_ReadMonotonicTime, _OUT(0), &time_stamp);

        alloc_blocks[entry].addr = addr;
        alloc_blocks[entry].size = size;
        alloc_blocks[entry].caller = caller;
        alloc_blocks[entry].time = time_stamp - start_time;
        alloc_blocks[entry].epoch = epoch;
        alloc_blocks[entry].caller2 = caller2;
        alloc_blocks[entry].uid = claims;
    }

    return;
}



void record_free (int *addr, int caller, int free_caller, int *backtrace)

  /* removes any entry for this RMA block */

{
    int entry = find_entry (addr);
    int caller2 = 0;
    unsigned int time_stamp;

    if (entry < 0)
        return;

    _swix (OS_ReadMonotonicTime, _OUT(0), &time_stamp);

   /* if the caller is _kernel_RMAfree (addr), which is a hand-coded
      veneer on OS_Module 7 and is itself called from free (addr) in
      the shared C library, then we locate the address from which
      free (addr) was called and record that instead */

    caller = (caller & 0x03fffffc);   /* mask out PSR bits and pieces */
    caller -= 4;                      /* now addresses the SWI OS_Module instruction */

    if (caller == ADDRESS_OF_CALL_FROM_KERNEL_RMAFREE)
    {
        caller = (free_caller & 0x03fffffc) - 4;          /* now addresses the free (..) call */
        if (backtrace != 0)
            caller2 = (backtrace[-1] & 0x03fffffc) - 4;   /* one level up the stack */
    }

#if 0
    if (alloc_blocks[entry].epoch == epoch)
    {
        int free_entry = find_spare_entry ();

        if (free_entry < 0)
            overflow = 1;
        else
        {
            int x = (int) alloc_blocks[entry].addr;

            alloc_blocks[free_entry] = alloc_blocks[entry];
            alloc_blocks[free_entry].addr = (int *) (-x);

            alloc_blocks[free_entry].time = time_stamp - start_time;
            alloc_blocks[free_entry].caller = caller;
            alloc_blocks[free_entry].caller2 = caller2;
            alloc_blocks[free_entry].uid = frees;
        }

        alloc_blocks[entry].epoch = -(alloc_blocks[entry].epoch);  /* marker */
    }
#endif

    if (alloc_blocks[entry].epoch >= epoch - OLD_DIFF)
        free_entry (entry);
    else
    {
        int x = (int) alloc_blocks[entry].addr;

        alloc_blocks[entry].time = time_stamp - start_time;
        alloc_blocks[entry].caller = caller;
        alloc_blocks[entry].caller2 = caller2;
        alloc_blocks[entry].uid = frees;

        alloc_blocks[entry].addr = (int *) (-x);   /* negate the address */
    }

    return;
}



int find_spare_entry (void)

  /* returns -1 if no spare entry exists */

{
    int entry;

    for (entry = 0; entry < MAX_ENTRIES; entry++)
        if (alloc_blocks[entry].addr == 0)
            return entry;

    return -1;
}



void free_entry (int entry)

  /* records the entry as "not-in-use" */

{
    alloc_blocks[entry].addr = 0;

    return;
}



int find_entry (int *addr)

  /* returns -1 if no entry for this block can be found */

{
    int entry;

    for (entry = 0; entry < MAX_ENTRIES; entry++)
#if SPECIAL
        if (alloc_blocks[entry].epoch > 0 && alloc_blocks[entry].addr == addr)
#else
        if (alloc_blocks[entry].addr == addr)
#endif
            return entry;

    return -1;
}



int next_entry (int entry)

  /* iterates over all entries that are in use:
        start iteration by calling next_entry (-1)
        -1 is returned when there are no more entries */

{
    while (++entry < MAX_ENTRIES)
    {
        if (alloc_blocks[entry].addr != 0)
            return entry;
    }

    return -1;
}



int num_entries_in_use (void)

  /* returns number of entries in use */

{
    int count = 0;
    int entry;

    for (entry = 0; entry < MAX_ENTRIES; entry++)
        if (alloc_blocks[entry].addr != 0)
            count++;

    return count;
}



int num_alloc_blocks (void)

  /* returns number of blocks currently allocated */

{
    int count = 0;
    int entry;

    for (entry = 0; entry < MAX_ENTRIES; entry++)
        if ((int) alloc_blocks[entry].addr > 0)
            count++;

    return count;
}
