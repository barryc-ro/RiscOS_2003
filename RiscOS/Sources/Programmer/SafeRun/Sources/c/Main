#include <string.h>
#include <ctype.h>

#include "swis.h"

#include "CMHGHead.h"

#include "Desk.Error2.h"
#include "Desk.Error.h"
#include "Desk.Debug.h"
#include "Desk.LinkList.h"
#include "Desk.Str.h"
#include "Desk.DeskMem.h"
#include "Desk.Filing.h"

#include "TaskModule.TaskModule.h"


typedef struct	{
	Desk_linklist_header	header;
	char			dir_prefix[ 4];
	}
	allow_block;
/*
dir_prefix is 0=terminated string - ie this struct is variable length.
 */


static Desk_linklist_header	allowed_list = { NULL, NULL};


static allow_block*	FindAllowed( const char* filename)
	{
	allow_block*	allow;
	
	for	(
		allow=Desk_LinkList_FirstItem( &allowed_list);
		allow;
		allow=Desk_LinkList_NextItem( &allow->header)
		)
		{
		Desk_Debug_Printf( Desk_error_PLACE "strincmp( '%s', '%s', %i) returned %i\n",
			filename, allow->dir_prefix, strlen( allow->dir_prefix), 
			Desk_strnicmp( filename, allow->dir_prefix, strlen( allow->dir_prefix))
			);
		if ( 0 == Desk_strnicmp( filename, allow->dir_prefix, strlen( allow->dir_prefix)))	return allow;
		}
	
	return NULL;
	}


char*	Desk_Str_strdupcr( const char* s)
	{
	int	l = Desk_strlencr( s);
	char*	ss = Desk_DeskMem_Malloc( 1+l);
	memcpy( ss, s, l);
	ss[l] = 0;
	return ss;
	}


_kernel_oserror *Command( char *arg_string, int argc, int cmd_no, void *pw)
	{
	volatile char*	arg_string0_v	= NULL;
	volatile char*	canoncommand	= NULL;
	
	Desk_Error2_Try	{
		
		char*	arg_string0 = Desk_Str_strdupcr( arg_string);
		arg_string0_v = arg_string0;
		
		Desk_Debug_Printf( "Command called with '%s'\n", arg_string0);
		
		if ( cmd_no==CMD_SafeRun_Register)
			{
			allow_block*	allow;
			if ( argc!=1)	Desk_Error2_HandleTextf( "Too many parameters (%i) to SafeRun_Register", argc);
			if ( strlen( arg_string0) > 255)	Desk_Error2_HandleTextf( "Dir prefix too long");
			allow = (allow_block*) Desk_DeskMem_Malloc( sizeof( allow_block) + strlen( arg_string0));
			strcpy( allow->dir_prefix, arg_string0);
			Desk_LinkList_AddToTail( &allowed_list, &allow->header);
			}
		
		else if ( cmd_no==CMD_SafeRun_UnRegister)
			{
			allow_block*	allow = FindAllowed( arg_string0);
			if ( !allow)	Desk_Error2_HandleText( "Specified directory not registered");
			else	{
				Desk_LinkList_Unlink( &allowed_list, &allow->header);
				Desk_DeskMem_Free( allow);
				}
			}
		
		else if ( cmd_no==CMD_SafeRun_StartTask)	{
			char*	prefix = "SafeRun:";
			char*	cmd = arg_string0;
			char	canonname[ 256];
			char*	params;
			int	paramslen;
			int	dummy;
				
			while ( *cmd && isspace( *cmd))	cmd++;
			if ( 0==Desk_strnicmp( cmd, prefix, strlen( prefix)))	cmd += strlen( prefix);
			while ( *cmd && isspace( *cmd))	cmd++;
			
			// cmd now points to command without any "SafeRun_StartTask:" prefix.
			if ( cmd[0]==0)	Desk_Error2_HandleText( "Empty command");
			
			for ( params=cmd; *params && !isspace( *params); params++)	;
			
			if ( params[0] != 0)	{	// params points to space before first param.
				params[0] = 0;
				params++;
				}
			else	;			// no params, parmas points to "" at end of cmd string.
			
			paramslen = strlen( params);
			
			Desk_Filing_CanonicalisePath( cmd, canonname, 256, &dummy);
			
			Desk_Debug_Printf( Desk_error_PLACE "cmd='%s'\n", cmd);
			Desk_Debug_Printf( Desk_error_PLACE "canonname='%s'\n", canonname);
			
			if ( FindAllowed( canonname))	{
				int	canonnamelen = strlen( canonname);
				char*	canoncommand = Desk_DeskMem_Malloc( canonnamelen + 1 + paramslen + 1);
				
				Desk_Debug_Printf( Desk_error_PLACE "canonname='%s', params='%s'\n", canonname, params);
				
				strcpy( canoncommand, canonname);
				strcat( canoncommand, " ");
				strcat( canoncommand, params);
				
				Desk_Debug_Assert( strlen( canoncommand) == canonnamelen + 1 + paramslen);
				Desk_Debug_Printf( Desk_error_PLACE "Running command '%s'\n", canoncommand);
				
				Desk_Error2_CheckOS( _swix( TaskModule_StartTask, _INR(0,3), canoncommand, NULL, NULL));
				}
			
			else Desk_Error2_HandleText( "The file cannot be run because it is in a protected file system");
			}
			
		#ifdef Desk_DEBUG
			else if ( cmd_no==CMD_SafeRun_List)	{
				allow_block*	allow;
				Desk_Debug_Printf( Desk_error_PLACE "Registered dirs:\n");
				for	(
					allow = Desk_LinkList_FirstItem( &allowed_list);
					allow;
					allow = Desk_LinkList_NextItem( &allow->header)
					)
					{
					Desk_Debug_Printf( Desk_error_PLACE "%s\n", allow->dir_prefix);
					}
				Desk_Debug_Printf( Desk_error_PLACE "\n");
				}
		#endif
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( (char*) arg_string0_v);
		Desk_DeskMem_Free( (char*) canoncommand);
		Desk_Error2_ConvertToOS( &Desk_error_global, &Desk_Error2_globalblock);
		return &Desk_error_global;
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_Free( (char*) arg_string0_v);
	Desk_DeskMem_Free( (char*) canoncommand);
	
	return NULL;
	
	Desk_UNUSED( pw);
	}


_kernel_oserror *Initialise(char *cmd_tail, int podule_base, void *pw)
	{
	Desk_Error2_Init_JumpSig();
	return _kernel_setenv( "Alias$URLOpenCLI_SafeRun", "SafeRun_StartTask %*0");
	Desk_UNUSED( cmd_tail);
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	}

_kernel_oserror *Finalise(int fatal, int podule, void *pw)
	{
	_kernel_setenv( "Alias$URLOpenCLI_SafeRun", "");
	return NULL;
	
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}
