/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "module.h"
#include "header.h"

#define STATUS_FILE "<Wimp$ScrapDir>.mem/html"
#define STATUS_URL  "file:/<Wimp$ScrapDir>/mem.html"
#define ENV_VAR	    "Alias$URLOpenCLI_MemInfo"
#define ENV_VAL	    "MemInfo_HTML %*0"

typedef enum {Text,HTML} style_t;

/*
 * module housekeeping globals
 */
void   *workspace_pointer = NULL;
ERROR_STRUCT(NO_FILE,"Could not open status file.");

_kernel_oserror *
url_open(char *url)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char msg_block[256];
  int n;

  n = strlen(url);
  n = n>236?236:n;
  memset(msg_block, 0, 256);

  *(int *)msg_block = 256;
  *(int *)(msg_block + 16) = 0x4af80; /* Message_URL */
  strncpy(msg_block + 20, url, n);

  reg.r[0] = 0;
  reg.r[1] = (int)msg_block;
  reg.r[2] = 0;
  reg.r[3] = 0;
  reg.r[4] = 0;
  reg.r[5] = 0;

  ERR_RETURN(err,_kernel_swi(TaskModule_SendMessage, &reg, &reg));

  return(NULL);
}

static char *get_name_cr(const char *in)
{
    char *out;
    int i, len;

    for (i = 0; in[i] >= ' '; i++)
	/* do nothing */;
    len = i;

    out = malloc(len + 1);
    if (out)
    {
	for (i = 0; i < len; i++)
	    out[i] = in[i];
	out[i] = 0;
    }

    return out;
}

_kernel_oserror *
display_memory_info(style_t style)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  FILE *f=NULL;
  int area,size,lba;
  char *desc;
  char utctime[8];
  char lcltime[256];
  int total_mem, da_total, app_total, misc_total;
  int da_page_contrib;

  *(int *)utctime = 3; 		/* reason code 3, read RTC */
  reg.r[0] = 14;
  reg.r[1] = (int)utctime;
  _kernel_swi(OS_Word, &reg, &reg);

  reg.r[0] = 1;			/* always in english */
  reg.r[1] = (int)utctime;
  reg.r[2] = (int)lcltime;
  reg.r[3] = 256;
  _kernel_swi(Territory_ConvertStandardDateAndTime, &reg, &reg);

  if (style == HTML) {
    if((f = fopen(STATUS_FILE, "w"))==NULL) {
      return (ERROR(NO_FILE));
    }

    fprintf(f,"<html><head>");
    fprintf(f,"<title>Memory distribution</title>");
    fprintf(f,"</head><body BGCOLOR=\"#ffffff\">\n");
    fprintf(f,"<center><p><h1>Memory distribution</h1></p>\n");

    fprintf(f,"<p><b>Time:</b>%s<p>\n",lcltime);

    fprintf(f,"<p><table border=1 width=\"70%%\">\n");
    fprintf(f,"<tr><th>Dynamic area<th>Size (k)<th>Max size<th>Address\n");
  } else {
    printf("  Dynamic area             Size (k) Max size Address\n");
    printf("  ------------             -------- -------- -------\n");
  }

  /* get total mem */
  ERR_GOTO(err, _kernel_swi(OS_ReadMemMapInfo,&reg,&reg));
  total_mem = reg.r[0] * reg.r[1];

  da_total = 0;
  da_page_contrib = 0;

  reg.r[0] = 3; 	/* enumerate dynamic areas */
  reg.r[1] = -1; 	/* start */
  ERR_GOTO(err,_kernel_swi(OS_DynamicArea,&reg,&reg));
  area = reg.r[1];
  while (area != -1) {
    int max_size;
    reg.r[0] = 2;	/* info */
    reg.r[1] = area;
    ERR_GOTO(err,_kernel_swi(OS_DynamicArea,&reg,&reg));
    size = reg.r[2];
    lba  = reg.r[3];
    max_size = reg.r[5];
    desc = (char *)reg.r[8];

    da_total += size;
    if ((int)lba >= 96*1024*1024)
	da_page_contrib += max_size;
    else if ((int)lba + max_size > 96*1024*1024)
	da_page_contrib += (int)lba + max_size - 96*1024*1024;

    if (style == HTML) {
      fprintf(f,"<tr><td>%s<td align=\"right\">%d<td align=\"right\">%d<td align=\"right\">0x%08x\n",
    	desc,size/1024, max_size/1024, lba);
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n",desc,size/1024, max_size/1024, lba);
    }
    reg.r[0] = 3; 	/* enumerate dynamic areas */
    reg.r[1] = area;
    ERR_GOTO(err,_kernel_swi(OS_DynamicArea,&reg,&reg));
    area = reg.r[1];
  }

  /* */
    if (style == HTML) {
      fprintf(f,"<tr><td>Cursor/System/Sound<td align=\"right\">32<td align=\"right\">32<td align=\"right\">0x01f00000\n");
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n","Cursor/System/Sound",32,32,0x01f00000);
    }

    if (style == HTML) {
      fprintf(f,"<tr><td>System workspace<td align=\"right\">32<td align=\"right\">32<td align=\"right\">0x00000000\n");
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n","System workspace",32,32,0);
    }

    if (style == HTML) {
      fprintf(f,"<tr><td>SVC stack<td align=\"right\">8<td align=\"right\">8<td align=\"right\">0x01c00000\n");
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n","SVC stack",8,8,0x01c00000);
    }

    if (style == HTML) {
      fprintf(f,"<tr><td>UND stack<td align=\"right\">8<td align=\"right\">8<td align=\"right\">0x01e00000\n");
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n","UND stack",8,8,0x01e00000);
    }

    misc_total = 32 + 32 + 8 + 8;

    size = total_mem/512;
    size = (size + 4095) &~ 4095;
    if (style == HTML) {
      fprintf(f,"<tr><td>Soft CAM map<td align=\"right\">%d<td align=\"right\">%d<td align=\"right\">0x01e02000\n", size/1024, size/1024);
    } else {
      printf("  %-25s %6d    %6d 0x%08x\n","Soft CAM map",size/1024,size/1024,0x01e02000);
    }

    misc_total += size/1024;

    _swix(OS_Byte, _INR(0,2) | _OUT(1), 129, 0, 255, &size);
    if (size < 0xA7)
	size = 96*1024;
    else if (size == 0xA7)
	size = 96*1024 - 28*1024 + (total_mem > 28*1024*1024 ? 28*1024 : total_mem/1024);
    else
	size = -1;

    if (size == -1)
    {
	if (style == HTML) {
	    fprintf(f,"<tr><td>Page tables<td align=\"right\">Unknown<td align=\"right\">Unknown<td align=\"right\">0x02c00000\n");
	} else {
	    printf("  %-25s Unknown   Unknown 0x%08x\n","Page tables",0x02c00000);
	}
    }
    else
    {
	size += da_page_contrib/1024;
	size = (size + 4095) &~ 4095;

	if (style == HTML) {
	    fprintf(f,"<tr><td>Page tables<td align=\"right\">&gt;= %d<td align=\"right\">4096<td align=\"right\">0x02c00000\n", size/1024);
	} else {
	    printf("  %-22s >= %6d    %6d 0x%08x\n","Page tables",size/1024,4096,0x02c00000);
	}

	misc_total += size/1024;
    }

#if 0
  /* application space */
  reg.r[0] = -1;
  ERR_GOTO(err,_kernel_swi(OS_ReadDynamicArea,&reg,&reg));
  lba = reg.r[0];
  size = reg.r[1];
  if (style == HTML) {
    fprintf(f,"<tr><td><br>Current application<td align=\"right\">%d<td align=\"right\">0x%08x\n",
     size/1024,lba);
    fprintf(f,"</table><p>\n");
  } else {
    printf("\n  %-25s %6d    0x%08x\n","Current application",size/1024,lba);
  }
#endif

  /* tasks */
  app_total = 0;

  if (style == HTML) {
    fprintf(f,"<tr><th>Task<th>Size (k)<th>Handle\n");
  } else {
    printf("\n  Task                     Size (k)   Handle\n");
    printf(  "  ----                     --------   ------\n");
  }

  {
      int context = 0;
      int buffer[64];

      do
      {
	  int *end_ptr;
	  int *ptr;

	  err = _swix(TaskManager_EnumerateTasks, _INR(0,2) | _OUTR(0,1),
		      context, buffer, sizeof(buffer),
		      &context, &end_ptr);

	  if (err && err->errnum == 0x1E6)
	  {
	      if (style == HTML) {
		  fprintf(f,"<tr><td colspan=3>TaskManager not available\n");
	      } else {
		  printf("  TaskManager not available\n");
	      }

	      err = NULL;
	      break; /* taskmanager not fitted */
	  }

	  for (ptr = buffer; ptr < end_ptr; ptr += 4)
	  {
	      char *name = get_name_cr( (const char *)ptr[1] );

	      if (style == HTML) {
		  fprintf(f,"<tr><td>%s<td align=\"right\">%d<td align=\"right\">0x%08x\n",
			  name, ptr[2]/1024, ptr[0]);
	      } else {
		  printf("  %-25s %6d    0x%08x\n", name, ptr[2]/1024, ptr[0]);
	      }

	      app_total += ptr[2];

	      free(name);
	  }
      }
      while (context >= 0);
  }

  if (style == HTML)
    fprintf(f,"</table></center><p><div align=right>\n");

  /* get total of the DA's */
  if (style == HTML) {
      fprintf(f,"<p>Total dynamic areas %dK<p>\n",da_total/1024);
  } else {
      printf("\n  Total dynamic areas %dK\n",da_total/1024);
  }

  if (style == HTML) {
      fprintf(f,"Total tasks %dK<p>\n",app_total/1024);
  } else {
      printf("  Total tasks %dK\n",app_total/1024);
  }

  if (style == HTML) {
    fprintf(f,"Total system workspace %dK<p>\n", misc_total);
  } else {
    printf("  Total system workspace %dK\n", misc_total);
  }

  if (style == HTML) {
    fprintf(f,"Missing memory (probably in page tables) %dK<p>\n",(total_mem - da_total - app_total)/1024 - misc_total);
  } else {
    printf("  Missing memory (probably in page tables) %dK\n",(total_mem - da_total - app_total)/1024 - misc_total);
  }

  /* get total box memory */
  if (style == HTML) {
    fprintf(f,"Total memory %dK<p>\n",total_mem/1024);
  } else {
    printf("  Total memory %dK\n",total_mem/1024);
  }

#if 1
  _swix(Wimp_SlotSize, _INR(0,1) | _OUT(2), -1, -1, &size);
  if (style == HTML) {
      fprintf(f,"Total free memory %dk<p>",size/1024);
  } else {
      printf("  Total free memory %dk\n",size/1024);
  }
#else
  /* get total free memory */
  reg.r[0] = 5;		/* shrinkable reason code */
  reg.r[1] = -1;	/* all */
  if (_kernel_swi(OS_DynamicArea,&reg,&reg)==NULL) {
    size = reg.r[2];
    if (style == HTML) {
      fprintf(f,"Total free memory %dk<p>",size/1024);
    } else {
      printf("  Total free memory %dk\n",size/1024);
    }
  } else {
    if (style == HTML) {
      fprintf(f,"Total free memory info not available on this platform<p>\n");
    } else {
      printf("  Total free memory info not available on this platform\n");
    }
  }
#endif

  if (style == HTML) {
    fprintf(f,"</div><center><a href=\"meminfo:\">Reload</a></center>\n");
    fprintf(f,"</body></html>\n");
    fclose(f);
    url_open(STATUS_URL);
  }

exit_gracefully:
  if (f) {
    fclose(f);
  }

  return (err);
}


/*
 * module finalise
 */
_kernel_oserror *
module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  /* remove variable before exiting */
  reg.r[0] = (int)ENV_VAR;
  reg.r[1] = NULL;
  reg.r[2] = -1;
  reg.r[3] = 0;
  reg.r[4] = 0;
  ERR_RETURN(err,_kernel_swi(OS_SetVarVal,&reg,&reg));

  return (NULL);
}
/*
 * module initialise
 */
_kernel_oserror *
module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = NULL;
  workspace_pointer = pw;

  /* set variable for browser to use */
  ERR_RETURN(err,_kernel_setenv(ENV_VAR,ENV_VAL));

  return (NULL);
}

_kernel_oserror *
module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *err = NULL;

  switch (cmd_no) {
    case CMD_MemInfo_HTML :
      ERR_RETURN(err,display_memory_info(HTML));
      break;
    case CMD_MemInfo_Text :
      ERR_RETURN(err,display_memory_info(Text));
      break;
  }
  return (NULL);
}
