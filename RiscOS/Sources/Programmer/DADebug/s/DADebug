; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Version  Name  Description
; ----       -------  ----  -----------
; 24-May-99  0.01     BJGA  Initial version
; 28-Oct-99  0.02     BJGA  DADWriteC made APCS compliant
; 30-Mar-00  0.03     BJGA  Checks Escape state during DADPrint
; 01-Feb-01  0.04     BJGA  32-bit compatible


; Compile-time options

        GBLA    DAsize
DAsize  SETA    400 * 1024                      ; size of dynamic area to use


; Includes

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:Proc
        GET     Hdr:ModHand
        GET     VersionASM


; Module header

Module_BaseAddr
        &       0; Start
        &       Initialise - Module_BaseAddr
        &       Finalise - Module_BaseAddr
        &       0; Service
        &       Title - Module_BaseAddr
        &       Help - Module_BaseAddr
        &       CommandTable - Module_BaseAddr
        &       DADebugSWI_Base
        &       SWIHandler - Module_BaseAddr
        &       SWITable - Module_BaseAddr
        &       0 ; SWI decoding code
        [ {FALSE} ; International_Help <> 0
        &       MessagesFile - Module_BaseAddr
        |
        &       0
        ]
        &       ModuleFlags - Module_BaseAddr

Help
        =       "DADebug", 9, "$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        =       0
Title
SWITable
        =       "DADebug", 0
        =       "GetWriteCAddress", 0
        =       0
        ALIGN

ModuleFlags
        [ No32bitCode
        &       0
        |
        &       ModuleFlag_32bit
        ]

Initialise
        Entry   "R7, R8"
        MOV     R0, #0           ; create dynamic area
        MOV     R1, #-1
        MOV     R2, #DAsize
        MOV     R3, #-1
        MOV     R4, #&80         ; non-draggable
        MOV     R5, #DAsize
        MOV     R6, #0
        MOV     R7, #0
        ADR     R8, Title
        SWI     XOS_DynamicArea
        EXIT    VS
        STR     R1, DAnumber
        STR     R3, BufferStart

        BL      DADReset_Code    ; preserves V (clear)
        EXIT

Finalise
        Entry
        MOV     R0, #1 ; remove dynamic area
        LDR     R1, DAnumber
        SWI     XOS_DynamicArea
        CLRV
        EXIT

CommandTable
        Command DADPrint, 0, 0, 0
        Command DADReset, 0, 0, 0
        =       0

DADPrint_Help
        =       "*DADPrint prints all the debug output collected so far.", 13
DADPrint_Syntax
        =       27, 1, 0
        ALIGN

DADPrint_Code
        Entry
        ADR     R14, ReadPtr
        LDMIA   R14, {R1-R3}     ; load ReadPtr, WritePtr, BufferStart

01      LDRB    R0, [R3, R1]     ; read a byte
        SWI     XOS_WriteC
        CMN     R0, #0           ; clear C
        TEQ     R0, #10          ; at the end of each line,
        SWIEQ   XOS_ReadEscapeState ; check for Escape
        BCS     %FT02
        ADD     R1, R1, #1       ; increment read pointer
        TEQ     R1, #DAsize      ; with wrap
        MOVEQ   R1, #0
        TEQ     R1, R2
        BNE     %BT01            ; and loop until we reach WritePtr

02      MOV     R0, #126
        SWI     XOS_Byte         ; acknowledge any Escape event
        ; Note that we don't write anything back
        CLRV
        EXIT

DADReset_Help
        =       "*DADReset clears the store of debug output.", 13
DADReset_Syntax
        =       27, 1, 0
        ALIGN

DADReset_Code
        Entry
        SETPSR  I_bit, R14,, R2  ; disable interrupts

        MOV     R0, #0
        STR     R0, ReadPtr
        STR     R0, WritePtr

        ADR     R1, DefaultStartString
01      LDRB    R0, [R1], #1
        TEQ     R0, #0
        BLNE    DADWriteC        ; preserves flags
        BNE     %BT01

        RestPSR R2,, c           ; restore interrupt state
        EXIT                     ; V flag unchanged from entry

DefaultStartString
        =       "Debug start", 13, 10, 0

SWIHandler ROUT
        Push    "R14"
        CMP     R11, #(EndOfJumpTable - JumpTable)/4
        ADDLO   PC, PC, R11, LSL #2
        B       UnknownSWIError
JumpTable
        B       SWIDADebug_GetWriteCAddress
EndOfJumpTable

UnknownSWIError
        Pull    "PC"             ; don't actually return an error for now

SWIDADebug_GetWriteCAddress
        ADR     R0, DADWriteC
        Pull    "PC"


DADWriteC
; In: R0 = character to insert
;     R14 = return address
;     Assumed not in USR mode
; Out: all registers and flags must be preserved
        EntryS  "R0-R3"
        SETPSR  I_bit, R14

        ADR     R14, ReadPtr
        LDMIA   R14, {R1-R3}     ; load ReadPtr, WritePtr, BufferStart

        STRB    R0, [R3, R2]     ; write the byte
        ADD     R2, R2, #1       ; increment write pointer
        TEQ     R2, #DAsize      ; with wrap
        MOVEQ   R2, #0

        TEQ     R1, R2           ; if WritePtr hasn't caught up with ReadPtr
        STRNE   R2, WritePtr     ; just update WritePtr
        EXITS   NE, cxsf         ; and exit restoring interrupt state

01      LDRB    R0, [R3, R1]     ; read byte at ReadPtr
        ADD     R1, R1, #1       ; increment ReadPtr
        TEQ     R1, #DAsize      ; with wrap
        MOVEQ   R1, #0
        TEQ     R0, #10          ; and repeat until we find the next LF
        TEQNE   R1, R2           ; or until we run back into the WritePtr (!)
        BNE     %BT01

        STMIA   R14, {R1, R2}    ; update ReadPtr and WritePtr
        EXITS   , cxsf           ; exit restoring interrupt state


; Workspace - held here so that no workspace pointer is required by DADWriteC
; Note that this means the module is not ROMmable.

ReadPtr         &       -1
WritePtr        &       -1
BufferStart     &       -1
DAnumber        &       -1

        END
