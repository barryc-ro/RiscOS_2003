/* -> h.cssr
 *
 * LZW compressor, optimised for 12 bits.
 * Compress store store restartable
 * Contains state to make it restartable
 * Author: Jon Thackray
 * Copyright (C) 1990 Jon Thackray
 */

#ifndef cssr_h
#define cssr_h

#include "defs.h"

typedef struct {
        int     starting:1,             /* A flag to say if we've just started */
                output_caller:3;        /* Where output_code was called from */
        int     offset;                 /* The bit position in the output mini buffer */
        char    buf[BITS + 1];          /* The output buffer */
        /* State for the compress itself */
        int     code_size;              /* The number of bits per code at present */
        int     free_entry;             /* The next code number to be generated */
        int     in_count,               /* Amount of input read so far */
                previous,               /* The last char or code */
                current,                /* The current char (never a code) */
                checkpoint,             /* Where to reset next */
                maxcode,                /* The maximum allowable code at present */
                fcode,                  /* The combined code being produced */
                hash;                   /* Its hash value */
        int     hash_table[HASH_RETRY];
        short   code_table[HASH_RETRY];
} compress_state;                       /* The state to be maintained between calls to compress */

extern output_result compress_store_store
(
        char **input,                   /* Updated to show first byte unused */
        unsigned int input_length,
        char *output,
        unsigned int *output_length,    /* Updated to show amount of output used */
        compress_state *workspace,
        int allow_continuation
);

#endif

/* End cssr.h */
