; -> s.zcat_ass

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System

;       IMPORT  |x$stack_overflow|
        EXPORT  zcat_store_ass

        AREA    |C$$Code|,CODE,READONLY

INIT_BITS * 9
HSIZE * 1 :SHL: BITS
FIRST * 257
CLEAR * 256

 % 8
 [ BITS = 12
; % 12 ; Pad for alignment
 ]

        ASSERT  CLEAR = &100

zcat_store_ass
;
; Input:-  r0 - input
;          r1 - output
;          r2 - input_length
;          r3 - pointers (only for module version)
;
; Output:- r0 - output length
;
; Internal variables
;
input           RN      r0
output          RN      r1
input_length    RN      r2
pointers        RN      r3
code            RN      r4
bits            RN      r5
free_entry      RN      r6
maxcode         RN      r7
offset          RN      r8
spare           RN      lr
last_offset     RN      r10
;ip             RN      r12
;sl             RN      r10
;fp             RN      r11
code_mask       RN      fp

        MOV     ip, sp
        STMFD   sp!, {r4-r9, sl, fp, ip, lr, pc}
        ASSERT  FIRST = &101
 [ :LNOT:Module
        ADR     pointers, pointer_table-(FIRST-1)*4
 ]
        MOV     lr, #1
        ADD     free_entry, lr, lr, LSL #8
        MOV     bits, #INIT_BITS
        RSB     maxcode, lr, #1 :SHL: INIT_BITS
        MOV     code_mask, maxcode
        ADD     spare, input, #3
        SUB     input_length, input_length, #3                  ; Ignore header
        BIC     input, spare, #3                                ; Word align
        SUB     last_offset, spare, input                       ; Bytes over
        ADD     input_length, input_length, last_offset
        MOV     last_offset, last_offset, LSL #3                ; Where we started
        ADD     offset, last_offset, #INIT_BITS
        RSB     input_length, bits, input_length, LSL #3        ; Length in bits less last code
 [ Module
        STR     output, [pointers, #(FIRST-1)*4]
        STR     output, [pointers]                              ; Where output started
 |
        STR     output, pointer_table;
        STR     output, output_initial
 ]
        LDRB    code, [spare]
        STRB    code, [output], #1                              ; Save in output
        B       inline_get_input

not_a_code
        BEQ     do_clear
        STRB    code, [output], #1

loop
;
; Now increment free_entry if we can
;
        CMP     free_entry, #HSIZE
        ADDLT   free_entry, free_entry, #1

;
; Get input
;
inline_get_input
;
; Input:-  r0 - input
;          r1 - output
;          r2 - input_length
;
; Output:- code
; Uses     spare
;
        CMP     offset, input_length                            ; Any more input?
        CMPLS   free_entry, maxcode                             ; Code size about to change?
        BHI     inline_code_big

;
; Now for the normal case
;
inline_get_code
        STR     output, [pointers, free_entry, LSL #2]          ; Set up current pointer in case
        ADD     spare, input, offset, LSR #3                    ; Byte address
        LDMIA   spare, {code, ip}                               ; Get all necessary bytes
        ANDS    spare, offset, #31                              ; Bit offset
        MOVNE   code, code, LSR spare
        RSBNE   spare, spare, #32
        EORNE   code, code, ip, LSL spare
        AND     code, code, code_mask
        ADD     offset, offset, bits
        CMP     code, #CLEAR                                    ; Clear table code?
        BLS     not_a_code                                      ; Handle case of straight character or CLEAR
;
; Check for nasty case where we get a code we don't know yet and
; copy from start to end of code.
;
        CMP     code, free_entry
        ADD     code, pointers, code, LSL #2
        SUB     code, code, #4
        LDMIA   code, {ip, lr}
        MOVEQ   lr, output                                      ; Fix nasty case where we don't know the input code
;
; This area for improvement to do efficient store copying
;
        LDRB    code, [ip], #1
        STRB    code, [output], #1
copy_loop
        LDRB    code, [ip], #1
        STRB    code, [output], #1
        CMP     ip, lr
        BHI     loop                                            ; Next input
        LDRB    code, [ip], #1
        STRB    code, [output], #1
        CMP     ip, lr
        BHI     loop                                            ; Next input
        LDRB    code, [ip], #1
        STRB    code, [output], #1
        CMP     ip, lr
        BHI     loop                                            ; Next input
        LDRB    code, [ip], #1
        STRB    code, [output], #1
        CMP     ip, lr
        BLS     copy_loop
        B       loop                                            ; Next input

do_clear
;
; First realign input
;
        SUB     lr, offset, last_offset
        MOV     ip, #BITS                                       ; This may be replaced later by maxbits
        TST     ip, #1
        MOVEQ   lr, lr, LSR #1
        TST     ip, #3
        MOVEQ   lr, lr, LSR #1
        TST     ip, #7
        MOVEQ   lr, lr, LSR #2
        AND     lr, lr, #7                                      ; Bottom three bits only
        ADR     free_entry, offsets-INIT_BITS*8
        ADD     free_entry, free_entry, ip, LSL #3
        LDRB    ip, [free_entry, lr]
        ADD     offset, offset, ip
        MOV     last_offset, offset
;
; Now restart free_entry etc.
;
        MOV     free_entry, #FIRST - 1
        MOV     bits, #INIT_BITS
        MOV     maxcode, #1 :SHL: INIT_BITS
        SUB     maxcode, maxcode, #1
        MOV     code_mask, maxcode
        B       inline_get_input

finished
 [ Module
        LDR     r0, [pointers]
 |
        LDR     r0, output_initial
 ]
        SUB     r0, output, r0
        LDMFD   sp, {r4-r9, sl, fp, sp, pc}^

;
; Stuff used by main inline get_input
;
inline_code_big
        CMP     offset, input_length
        BHI     finished
        ADD     bits, bits, #1
        MOV     code_mask, #1
        ADD     code_mask, code_mask, maxcode, LSL #1
        CMP     bits, #BITS
        ADC     maxcode, code_mask, #0
        B       inline_get_code

;
; Tables of increments for CLEAR code
;
offsets
        =  0,  63,  54,  45,  36,  27,  18,   9                 ; ( 9 bits, offset & 7)
        =  0,  70,  60,  50,  40,  30,  20,  10                 ; (10 bits, (offset >> 1) & 7)
        =  0,  55,  22,  77,  44,  11,  66,  33                 ; (11 bits, offset & 7)
        =  0,  60,  24,  84,  48,  12,  72,  36                 ; (12 bits, (offset >> 2) & 7)
        =  0,  39,  78,  13,  52,  91,  26,  65                 ; (13 bits, offset & 7)
        =  0,  14,  28,  42,  56,  70,  84,  98                 ; (14 bits, (offset >> 1) & 7)
        =  0,  15,  30,  45,  60,  75,  90, 105                 ; (15 bits, offset & 7)
        =  0, 112,  96,  80,  64,  48,  32,  16                 ; (16 bits, (offset >> 4) & 7)

        ALIGN

;
; Data used in the expansion
;
 [ :LNOT: Module
output_initial  %       4
pointer_table   %       (HSIZE+1-FIRST)*4                       ; Enough word sized pointers
 ]

        END
