; -> s.mr_module
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans

        GET     Hdr.MagicOff
        GET     Hdr.StaticDecl
        GET     VersionASM
        GET     Hdr.debug

        ; Linker symbols
        IMPORT  |Image$$RO$$Base|
        IMPORT  |Image$$RO$$Limit|
        IMPORT  |Image$$RW$$Base|
        IMPORT  |Image$$RW$$Limit|
        IMPORT  |Image$$ZI$$Base|
        IMPORT  |Image$$ZI$$Limit|
        IMPORT  |hdr$statics|

        ; extern mr_oserror *mr_module_start( mr_regset * );
        ; extern mr_oserror *mr_module_initialise( mr_regset *, int );
        ; extern mr_oserror *mr_module_finalise( mr_regset * );
        ; extern void mr_module_servicehandler( mr_regset * );
        ; extern char *mr_module_commandtable;
        ; extern int mr_module_swibase
        ; extern mr_oserror *mr_module_swihandler( mr_regset * );
        ; extern char *mr_module_swinames
        IMPORT  mr_module_start, WEAK
        IMPORT  mr_module_initialise
        IMPORT  mr_module_finalise
        IMPORT  mr_module_servicehandler
        IMPORT  mr_module_commandtable, WEAK
        IMPORT  mr_module_swibase, WEAK
        IMPORT  mr_module_swihandler, WEAK
        IMPORT  mr_module_swinames, WEAK

        EXPORT  |_Mod$Reloc$Off|    ; defined in Hdr.MagicOff
;       EXPORT  |x$stack_overflow|

        AREA    |!!!Module$$Header|,CODE,READONLY

Module_BaseAddr
        DCD     0               ; No start entry
        DCD     |_mr_module_initialise| - Module_BaseAddr
        DCD     |_mr_module_finalise| - Module_BaseAddr
        DCD     |_mr_module_servicehandler| - Module_BaseAddr
        DCD     mr_module_title - Module_BaseAddr
        DCD     mr_module_help - Module_BaseAddr
        DCD     0               ; No commands
        DCD     &42700          ; Base of SWIs
        DCD     |_mr_module_swihandler| - Module_BaseAddr
        DCD     names - Module_BaseAddr ; Swi names
        DCD     0

NULL    *       0

mr_module_help
        DCB     "Squash",9,9,Module_MajorVersion :CC: " (" :CC: Module_Date :CC: ")", 0
mr_module_title
names   DCB "Squash",0
        DCB "Compress",0
        DCB "Decompress",0,0

        ALIGN

        ; module start not implemented yet
        EXPORT  |__main|
|__main|

        MACRO
        EnterModule
        Push    "lr"
        BL      ModEntry
        MEND


|_mr_module_initialise|
        Push    "r0,r2,r3,lr"
        LDR     r2, [r12]
        TEQ     r2, #0
        BNE     %FT10

        LDR     r3, =|Image$$RW$$Limit|
        LDR     r0, =|Image$$RW$$Base|
        SUB     r3, r3, r0
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        STRVS   r0, [sp]
        Pull    "r0,r2,r3,pc",VS

        ; Attach workspace to private workspace
        STR     r2, [r12]
10
        ; Set up the magic offset for C proggies
        LDR     r0, =|Image$$RW$$Base|
        LDR     r3, =|hdr$statics|
        SUB     r0, r2, r0
        ADD     r3, r3, r0
        STR     r0, [r3]

        Pull    "r0,r2,r3,lr"
        EnterModule

        MOV     r0, #0
        STR     r0, File_Open

        ; store priv wsp for reference later
        STR     r12, Priv_Wsp

        ; call the C initialisation
        ADR     r1, Module_BaseAddr
        BL      mr_module_initialise
        B       ModExit
        LTORG

|_mr_module_finalise|
        EnterModule
        BL      mr_module_finalise
        TEQ     r0, #NULL
        BLEQ    msgtrans_closefile
        MOVVC   r0, #NULL
        B       ModExit

|_mr_module_servicehandler|
        ; Plug in fast service rejection here
        MOVS    pc, lr

        EnterModule
        BL      mr_module_servicehandler
        B       ModExit

|_mr_module_swihandler|
        EnterModule
        BL      mr_module_swihandler
ModExit
        TEQ     r0, #NULL
        STRNE   r0, [sp]
        Pull    "r0-r12,lr"
        MOVEQS  pc, lr
        ORRS    pc, lr, #V_bit

ModEntry
        Push    "r0-r12"
        LDR     r10, [r12]
        LDR     r0, =|hdr$statics|
        ADD     r10, r10, r0
        LDR     r0, =|Image$$RW$$Base|
        SUB     r10, r10, r0
        MOV     r0, sp
        MOV     pc, lr

        EXPORT check_address
check_address
; r0 - minimum address
; r1 - length of range to be validated
        Push    "lr"
        ADD     r1, r0, r1
        SWI     XOS_ValidateAddress
        MOVCC   r0, #0
        MOVCS   r0, #-1
        Pull    "pc"

accessed        * &5c ; a random value

msgtrans_openfile
        Push    "lr"
        ADR     r0, MsgTrans_FileData
        ADR     r1, MsgTrans_FileName
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        MOVVC   r0, #accessed
        STRVC   r0, File_Open
        Pull    "pc"

msgtrans_closefile
        Push    "lr"
        LDR     r0, File_Open
        TEQ     r0, #accessed
        ADREQ   r0, MsgTrans_FileData
        SWIEQ   XMessageTrans_CloseFile
        Pull    "pc"

        EXPORT error_return
error_return
; r0 - error index
; r1 - parameter
        Push    "r1-r4,lr"
        ; Set up r4 for MessageTrans_ErrorLookup
        MOV     r3, r0
        MOV     r4, r1
        ; Make sure messages file is open
        LDR     r0, File_Open
        TEQ     r0, #accessed
        BLNE    msgtrans_openfile
        Pull    "r1-r4,pc",VS
        ; Put address of error block into r0
        ADR     r0, Error_Table
        ADD     r0, r0, r3, LSL #2
        LDR     r1, [r0]
        ADR     r0, Module_BaseAddr
        ADD     r0, r1, r0
        ; Set up for MessageTrans_ErrorLookup
        ADR     r1, MsgTrans_FileData
        MOV     r2, #0
        MOV     r3, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "r1-r4,pc"

        [ {FALSE}
|x$stack_overflow|
        MOV     pc, lr ; No stack checking
        ]
MsgTrans_FileName = "Resources:$.Resources.Squash.Messages",0
               ALIGN
Squash_ErrorBase     *      &920
Squash_bad_SWI DCD Squash_ErrorBase
               = "BadSWI",0
               ALIGN
Squash_bad_address DCD Squash_ErrorBase+1
               = "COM1",0
               ALIGN
Squash_corrupt_input DCD Squash_ErrorBase+2
               = "COM2",0
               ALIGN
Squash_corrupt_workspace DCD Squash_ErrorBase+3
               = "COM3",0
               ALIGN
Squash_bad_parameters DCD Squash_ErrorBase+4
               = "COM4",0
               ALIGN
Error_Table
               DCD Squash_bad_SWI
               DCD Squash_bad_address
               DCD Squash_corrupt_input
               DCD Squash_corrupt_workspace
               DCD Squash_bad_parameters

        END
