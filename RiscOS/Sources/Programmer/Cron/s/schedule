;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; AddToList - Adds a schedule to the linked list
;  Entry:
;   ssp = Schedule structure allocated from RMA
;  Exit:
;   r0 = Job ID

AddToList	ENTRY	"r1"
		LDR	r0, NextID		; Get ID
		! 0, "*** Check for unique ID"
		STR	r0, ss_id		; Store in structure
		ADD	r1, r0, #1
		STR	r1, NextID
		LDR	r1, ScheduleList	; Get linked list pointer
		STR	r1, ss_next		; Store in next field
		STR	ssp, ScheduleList	; Insert into list
		! 0, "*** Check for bad schedules"
		BL	check_schedules
		EXIT	VS
		; r0 still contains job ID
		PullEnv
		; Make sure there is a timer pending
		B	EnsureCallback

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; check_schedules - Checks for schedules to be run
;  Entry:
;   Nothing
;  Exit:
;   All registers preserved
; ParamBuffer used.

cs_base	RN	:BASE:ParamBuffer
		^ :INDEX:ParamBuffer, cs_base
cs_utc		# 8	; UTC time
cs_centi	# 4	; Centiseconds
cs_sec		# 4	; Seconds
cs_min		# 4	; Minutes
cs_hour		# 4	; Hours
cs_dom		# 4	; Day of month
cs_moy		# 4	; Month of year
cs_year		# 4	; Year
cs_dow		# 4	; Day of week
cs_doy		# 4	; Day of year

check_schedules	ENTRY	"r0-r9"
		ADR	r1, cs_utc
		MOV	r0, #3
		STR	r0, [r1]
		MOV	r0, #14
		SWI	XOS_Word		; Get current time
		EXITS	VS
		MOV	r0, #-1
		ADR	r2, cs_centi		; Address of ordinals
		SWI	XTerritory_ConvertTimeToOrdinals
		EXITS	VS

		LDR	r1, cs_centi		; Get compressed time
		LDR	r0, cs_sec
		ORR	r1, r1, r0, LSL #8
		LDR	r0, cs_min
		ORR	r1, r1, r0, LSL #16
		LDR	r0, cs_hour
		ORR	r1, r1, r0, LSL #24

		LDR	r2, cs_dom		; Get compressed date
		LDR	r0, cs_moy
		ORR	r2, r2, r0, LSL #8
		LDR	r0, cs_year
		ORR	r2, r2, r0, LSL #16

		ADR	r3, ScheduleList	; Get pointer pointer
		LDR	r5, lc_cltime		; load previous time

		LDR	r6, cs_utc		; And current UTC
		LDRB	r7, cs_utc+4
		ADDS	r6, r6, #1		; Deal with inaccuracy by
		ADC	r7, r7, #0		; adding 1 centisecond

		; If the clock changed by more than 2 hours since we last
		; looked, someone must have been playing with it.  We
		; should not execute all the jobs in the intervening
		; period.  Instead, we update the last check time so we
		; think we checked a centisecond ago.  That way, there
		; will be no intervening jobs.  We ignore the date in
		; the check because date changes are pretty insignificant.
		SUBS	r0, r1, r5		; Time since last check
		; r0 is a bit weird now, but the hours field will be correct,
		; and that's all we're interested in.
		ADDLT	r0, r0, #&18000000	; Correct 24 hour overflow
		CMP	r0, #&02000000		; Check if 2 hours have passed
		SUBGT	r5, r1, #1		; Update last check time
 [ 1=1
; Overflow check is not needed, as no job time can be after 23:59:59.99, so
; the comparisons we do will not be affected.
 |
		CMP	r5, #-1			; Check for overflow.
		MOVEQ	r5, r5, #&173B3B63	; Should be 23:59:59.99
 ]

		; Registers now as follows
		; r1,r2 = current time,date
		; r3    = Pointer pointer
		; r5    = last check time (corrected, compact)
		; r6,r7 = Current UTC

10		LDR	ssp, [r3]
		CMP	ssp, #0			; Check for end of list
		BNE	%FT5
		STR	r1, lc_cltime		; Set last-check time
		STR	r2, lc_cldate
		PullEnv
		B	RunAJob

		; r9 = flags
5		LDR	r9, ss_flags		; Get flags & UTC byte
		AND	r0, r9, #&ff		; Mask high UTC byte
		CMP	r0, r7			; compare with current
		LDREQ	r0, ss_utctime		; Get low UTC word
		CMPEQ	r0, r6			; compare
		BGT	%FT20			; Next!

		LDR	r0, ss_cldate		; Get job date
		CMP	r0, r2			; Compare current date
		BGT	%FT20			; Next!

		TST	r9, #ss_flag_HasTime	; Check if time is specified
		BEQ	%FT15			; Trigger it if not

		; r1=current time, r5=prev time
		MOV	r8, #0
		LDR	r0, ss_cltime		; Get job time
		CMP	r5, r1			; Check permutation order of
		EORGT	r8, r8, #1		; current, previous, and
		CMP	r0, r5			; job times
		EORGT	r8, r8, #1
		CMP	r0, r1
		EORGT	r8, r8, #1
		TST	r8, #1
		BEQ	%FT20			; Reject if wrong

		; We can assert that we are not before job date (if specified),
		; and now beyond the delay period.  The time, if specified
		; has passed recently.

 [ DateExcludesDelayHack
		; Now the current job is worth checking in detail.  There
		; are some silly cases we have missed uptil now, so we have
		; to check them here.  eg.
		; Last check:   22:59  9/3/97
		; Job time:     23:30 10/3/97
		; Current time: 00:00 10/3/97 (due to DST shift?)
		; This will arrive here, but should not be executed.  Most
		; of the time, we will be wanting to execute the job though.
		; Our method is to find the time the job would have been
		; executed at, with the date.  Check it and then convert
		; to UTC to check the -delay option.
 |
 		; There may be other cases we have to check for if a date and
 		; -delay can be specified.  I didn't check.
		! 1, "*** Unsupported option - read source"
 ]
		; r0 = job time, r1 = current time.
		CMP	r0, r1
		; r8=1 if day change since now.
		STRB	r0, cs_centi		; Store job time for conversion
		MOV	r0, r0, ROR #8
		STRB	r0, cs_sec
		MOV	r0, r0, ROR #8
		STRB	r0, cs_min
		MOV	r0, r0, ROR #8
		STRB	r0, cs_hour

		MOV	r8, #0
		BLE	%FT1			; Flags preserved from CMP
		MOV	r8, #1			; Set r8 if JT > CT

		LDR	r0, ss_cldate
		CMP	r0, r2			; Check job date against today
		BEQ	%FT20			; Skip job if today (JT > CT)

		; We have now checked the time ordinals.  We need to do a
		; final check on the UTC time if we have it.
1		TST	r9, #ss_flag_UTC	; Check if UTC specified
		BEQ	%FT15			; Do job if not

		Push	"r1,r2"
		MOV	r0, #-1
		ADR	r1, cs_utc
		ADR	r2, cs_centi
		SWI	XTerritory_ConvertOrdinalsToTime
		Pull	"r1,r2"
		EXITS	VS			; Things are bad if this fails

		LDR	r0, cs_utc		; Get UTC time of job
		LDRB	r9, cs_utc+4

		TST	r8, #1
		LDRNE	r8, centiperday
		ADDNES	r0, r0, r8		; Add 1 day if JT > CT
		ADCNES	r9, r9, #0		; Propagate carry

		; r0,r9 now contain the job execution time (UTC).
		CMP	r9, r7			; Check high byte
		CMPEQ	r0, r6			; Check low byte if equal
		BLE	%FT15			; Skip if -delay not finished

20		ADR	r3, ss_next
		B	%BT10

		; We're done.  We can now execute the job in the knowledge
		; that we are safely past the execution date, and UTC time,
		; and that the job time has recently passed.
15		LDR	r0, ss_next
		STR	r0, [r3]		; Remove job from list
		LDR	r0, ReadyList		; Put on ready list
		STR	r0, ss_next
		STR	ssp, ReadyList
		B	%BT10

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DelFromList - Removes a schedule from the linked list
;  Entry:
;   r0 = Pointer pointer
;  Exit:
;   r0 = Structure allocated from RMA

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; get_job_ETE - Get estimated time of execution
;  Entry:
;   r1 = Address to put time
;   ssp = Address of job
;  Exit:
;   All registers preserved
;   ParamBuffer is used

gjete_base	RN	:BASE:ParamBuffer
		^ :INDEX:ParamBuffer, gjete_base
gjete_centi	# 4	; Centiseconds
gjete_sec	# 4	; Seconds
gjete_min	# 4	; Minutes
gjete_hour	# 4	; Hours
gjete_dom	# 4	; Day of month
gjete_moy	# 4	; Month of year
gjete_year	# 4	; Year
gjete_dow	# 4	; Day of week
gjete_doy	# 4	; Day of year

get_job_ETE	ENTRY	"r0-r3,r5"
		MOV	r3, r1
		MOV	r0, #-1			; Convert UTC time to ordinals
		ADR	r1, ss_utctime		; Get address of time
		ADR	r2, gjete_centi		; Work space
		SWI	XTerritory_ConvertTimeToOrdinals
		BVS	%FT10

		LDR	r1, gjete_centi		; Compactify time to r1
		LDR	r0, gjete_sec
		ORR	r1, r1, r0, ASL #8
		LDR	r0, gjete_min
		ORR	r1, r1, r0, ASL #16
		LDR	r0, gjete_hour
		ORR	r1, r1, r0, ASL #24
 [ debug_sched
		DREG	r1, "Time="
 ]
		LDR	r2, gjete_dom		; Compactify date to r2
		LDR	r0, gjete_moy
		ORR	r2, r2, r0, ASL #8
		LDR	r0, gjete_year
		ORR	r2, r2, r0, ASL #16
		LDR	r5, lc_cldate
		CMP	r5, r2			; Compare dates
		LDR	r0, lc_cltime
		CMPEQ	r0, r1			; Compare times if date same
 [ debug_sched
		DREG	r2, "Date="
 ]
		MOVGT	r2, r5			; Set to last check if that
		MOVGT	r1, r0			; is later

		LDR	r0, ss_cldate		; Get job date (0 if none)
		CMP	r0, r2			; Check with date from UTC
		MOVGT	r2, r0			; Set date and time if
		MOVGT	r1, #0			; later

		LDR	r5, ss_flags
		ANDS	r5, r5, #ss_flag_HasTime; Check if job time is set
		BEQ	%FT20			; Skip if not set

		MOV	r0, r1			; Switch out old time
		LDR	r1, ss_cltime		; Get job time
		CMP	r0, r1
		MOV	r5, #0
		MOVGT	r5, #1			; Set flag if time moved back

		; Now, r1=time, r2=date, r3=UTC dest, r5='tomorrow flag'
20
 [ debug_sched
		DREG	r1, "NewTime="
		DREG	r2, "NewDate="
 ]
		STRB	r1, gjete_centi		; Write time to ordinals struct
		MOV	r1, r1, LSR #8
		STRB	r1, gjete_sec
		MOV	r1, r1, LSR #8
		STRB	r1, gjete_min
		MOV	r1, r1, LSR #8
		STRB	r1, gjete_hour

		STRB	r2, gjete_dom		; Write date to ordinals struct
		MOV	r2, r2, LSR #8
		STRB	r2, gjete_moy
		MOV	r2, r2, LSR #8
		STR	r2, gjete_year

		MOV	r1, r3
		ADR	r2, gjete_centi
 [ debug_sched
		DREG	r2, "Ordinals: "
		DREG	r1, "UTC: "
 ]
 		MOV	r0, #-1
		SWI	XTerritory_ConvertOrdinalsToTime
		BVS	%FT10
 [ debug_sched
		DREG	r5, "Tomorrow="
 ]
		CMP	r5, #0			; Check tomorrow flag
		EXITS	EQ			; Exit if clear
		LDR	r0, [r1]
		LDR	r2, centiperday
		ADDS	r0, r0, r2		; Add 1 day (in centisecs)
		STR	r0, [r1]
		LDRCSB	r0, [r1, #4]		; Propagate carry
		ADDCS	r0, r0, #1
		STRCSB	r0, [r1, #4]

		EXITS
centiperday	& 8640000			; Centiseconds per day

10
 [ debug_sched
		DREG	r0, "Error="
 ]
		STR	r0, [sp]
		PullEnv
		ORRS	pc, lr, #SR_V

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
