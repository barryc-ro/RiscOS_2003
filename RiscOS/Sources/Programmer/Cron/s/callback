;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; EnsureCallback
;  Entry:
;   Nothing
;  Exit:
;   All registers preserved
; Ensures a callback/timer is pending if there are schedules on the
; queue.  This ensures that a callback will happen in the future.  Also,
; if there are schedules ready to be executed, a transient callback will be
; created to execute those jobs.

EnsureCallback	ENTRY	"r1-r3"
		LDR	r1, ReadyList		; Check if we need a transient
		CMP	r1, #0			; callback (clears V)
		BNE	%FT10

		LDR	r1, Flags
		TST	r1, #flag_CbPending	; Check if callback pending
		EXIT	NE			; Do nothing if pending

		LDR	r1, ScheduleList	; Check for empty list
		TST	r1, r1
		EXIT	EQ			; Ignore if empty
		MOV	r3, r0
		LDR	r0, =500		; 5 second delay
		ADR	r1, handle_timer	; Address to call
		MOV	r2, r12			; r12 to call with
		SWI	XOS_CallAfter
		LDRVC	r1, Flags
		ORRVC	r1, r1, #flag_CbPending	; Set pending flag
		STRVC	r1, Flags
		MOVVC	r0, r3
		EXIT

		; We need a transient callback.  This means we should cancel
		; a timer callback.
10		MOV	r3, r0
		LDR	r1, Flags
		TST	r1, #flag_CbPending
		BEQ	%FT20			; Check if callback is pending

		ADR	r0, handle_timer	; Try to remove timer callback
		MOV	r1, r12
		SWI	XOS_RemoveTickerEvent
		MOV	r0, r3
		BVS     %FT99                   ; Must be transient if it fails
20		ADR	r0, handle_callback	; Create transient callback
		MOV	r1, r12
		SWI	XOS_AddCallBack
		MOVVC	r0, r3
		; Oops.
		LDRVS	r1, Flags
		BICVS	r1, r1, #flag_CbPending	; Clear pending flag
		STRVS	r1, Flags
99
		EXIT				; Return error

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle_timer - Respond to a callafter
;  Entry:
;   r12 = workspace pointer
;  Exit:
;   All registers preserved, even on error.
; ParamBuffer used.  Ignore errors.

handle_timer	ENTRY	"r0,r1"
		ADR	r0, handle_callback
		MOV	r1, r12
		SWI	XOS_AddCallBack		; Really bad if this fails
		LDRVS	r0, Flags		; Attempt to clear up by
		BICVS	r0, r0, #flag_CbPending	; clearing the pending flag
		STRVS	r0, Flags
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle_callback - Respond to a transient callback
;  Entry:
;   r12 = workspace pointer
;  Exit:
;   All registers preserved, even on error.
; ParamBuffer used.  Ignore errors.

handle_callback	ENTRY	"r0"
		LDR	r0, Flags
		BIC	r0, r0, #flag_CbPending	; Clear pending flag
		STR	r0, Flags

		LDR	r0, ReadyList		; Check for ready jobs
		TST	r0, r0
		BEQ	%FT10
		BL	RunAJob			; Process a job
		EXIT

10		BL	check_schedules		; Do a check
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; CancelCallback - Remove all callbacks
;  Entry:
;   r12 = workspace pointer
;  Exit:
;   R0-R2 corrupted; all other registers preserved
;
; Called from module finalisation.

CancelCallback  ENTRY
		LDR	r2, Flags
		TST	r2, #flag_CbPending
		EXIT	EQ			; No need to bother

		; Attempt to remove ticker handler first.  If the handler
		; gets called at any point below, the first SWI will fail,
		; and we can remove the transient callback.
		ADR	r0, handle_timer
		MOV	r1, r12
		SWI	XOS_RemoveTickerEvent
		; Oops.  It wasn't a ticker event.  Must be a transient
		; callback.
		ADRVS	r0, handle_callback
		MOVVS	r1, r12
		SWIVS	XOS_RemoveCallBack

                BIC     r2, r2, #flag_CbPending
                CLRV    VS
                STR     r2, Flags               ; store the flag

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
