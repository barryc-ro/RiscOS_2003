;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; cmdtable - The command table

cmdtable	= "CronAdd", 0			; Command Name
		& addcmd -module		; Code offset
		= 0,0,255,16			; Information word
		& addsyntax -module		; Syntax message
		& addhelp -module		; Help message

		= "CronShow", 0			; Command Name
		& showcmd -module		; Code offset
		= 0,0,1,16			; Information word
		& showsyntax -module		; Syntax message
		& showhelp -module		; Help message

		= "CronRemove", 0		; Command Name
		& rmcmd -module			; Code offset
		= 0,0,1,16			; Information word
		& rmsyntax -module		; Syntax message
		& rmhelp -module		; Help message

 [ debug
		= "CronDebug", 0		; Command Name
		& dbgcmd -module		; Code offset
		= 0,0,1,16			; Information word
		& 0				; Syntax message
		& 0				; Help message 
 ]
;		= "CronRelease", 0		; Command Name
;		& rmcmd -module			; Code offset
;		= 0,0,1,16			; Information word
;		& rmsyntax -module		; Syntax message
;		& rmhelp -module		; Help message
;
		& 0

addhelp		= "HADD", 0
addsyntax	= "SADD", 0
showhelp	= "HSHOW", 0
showsyntax	= "SSHOW", 0
rmhelp		= "HRM", 0
rmsyntax	= "SRM", 0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; convstrdate
;  Entry:
;   r1 = String in format dd/mm/yy
;  Exit:
;   r0 = Compact date

convstrdate	ENTRY	"r1-r3"
		MOV	r0, #10
		SWI	XOS_ReadUnsigned	; Get Day
		EXIT	VS
		MOV	r3, r2			; Store in r3
		LDRB	r2, [r1], #1		; Get terminator
		CMP	r2, #'/'		; Check
		BNE	baddate
		SWI	XOS_ReadUnsigned	; Get Month
		EXIT	VS
		ORR	r3, r3, r2, ASL #8	; Store in r3
		LDRB	r2, [r1], #1		; Get terminator
		CMP	r2, #'/'
		BNE	baddate
		SWI	XOS_ReadUnsigned	; Get Year
		EXIT	VS
		CMP	r2, #100		; Check for 2 digit year
		LDRLT	r0, =1900
		ADDLT	r2, r2, r0		; Add 1900 if only 2 digits
		! 0, "2000 problem :-)"
		ORR	r0, r3, r2, ASL #16	; Store in r0
		LDRB	r2, [r1], #1		; Get terminator
		CMP	r2, #32
		EXIT	LT			; Exit if all OK.

baddate		PullEnv
		ADR	r0, ErrorBlock_Cron_BadDate
		B	make_error

		MakeErrorBlock	Cron_BadDate

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; convstrtime
;  Entry:
;   r1 = String in format hh:mm
;  Exit:
;   r0 = Compact date

convstrtime	ENTRY	"r1-r3"
		MOV	r0, #10
		SWI	XOS_ReadUnsigned	; Get Day
		EXIT	VS
		MOV	r3, r2, ASL #24		; Store in r3
		LDRB	r2, [r1], #1		; Get terminator
		CMP	r2, #':'		; Check
		BNE	badtime
		SWI	XOS_ReadUnsigned	; Get Month
		EXIT	VS
 [ debug_cmd
		DREG	r2, "r2="
		DREG	r3, "r3="
 ]
		ORR	r0, r3, r2, ASL #16	; Store in r3
		LDRB	r2, [r1], #1		; Get terminator
		CMP	r2, #32
		EXITS	LT			; Exit if all OK.
 [ debug_cmd
		DREG	r2, "r2="
 ]
badtime		PullEnv
		ADR	r0, ErrorBlock_Cron_BadTime
		B	make_error

		MakeErrorBlock	Cron_BadTime

		MOV	pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle CronAdd command
;  Entry:
;   r0  = Command tail
;   r1  = Number of parameters
;   r12 = Pointer to private word
;   r13 = Stack
;   r14 = Return address
;  Exit:
;   r7-r11 preserved
;
; CronAdd [-dmy/-mdy <date>] [-time <time>] [-delay <delay>]
;         [-command <command>]
;   -dmy/-mdy <date>	Schedule should be executed on specified day
;   -time <time>	Schedule should be executed at specified time
;   -delay <delay>      Schedule should not be executed during next <delay>

addkeydef	= "dmy/k,time/k,delay/k,mdy/k,command/k", 0

; These should be kept in the same order as the schedule structure
dmystr		* ParamBuffer+0			; -> ss_cldate
timestr		* ParamBuffer+4			; -> ss_cltime
delaystr	* ParamBuffer+8			; -> ss_utctime
mdystr		* ParamBuffer+12		; -> ss_flags
cmdstr		* ParamBuffer+16

; Method: Parse all options, allocate a block of RMA, and insert into list.

addcmd		ENTRY
		LDR	wp, [r12]
		MOV	r1, r0
		ADR	r0, addkeydef
		ADR	r2, ParamBuffer
		ADR	r3, ?ParamBuffer
		SWI	XOS_ReadArgs
		EXIT	VS
		MOV	r0, #0

		; Check for the mutually exclusive options
		LDR	r0, dmystr		; -dmy
		LDR	r1, mdystr		; -mdy
		CMP	r0, #0
 [ DateExcludesDelayHack
		MOVEQ	r0, r1
 ]
		CMPNE	r1, #0
		BNE	badaddparam
 [ DateExcludesDelayHack
		LDR	r1, delaystr		; -delay
		CMP	r0, #0
		CMPNE	r1, #0
		BNE	badaddparam
 |
		! 0, "*** No Date vs Delay hack.  Good luck!"
 ]
		; Now convert strings to times.  We store the times where the
		; pointer set by OS_ReadArgs was.
		; r4 = flags during parsing

		; Parse -dmy option
		MOV	r4, #1:SHL:TypeShift	; Set flags
		LDR	r1, dmystr		; Get -dmy string
		CMP	r1, #0
		BEQ	%10			; No parameter, try -mdy
		BL	convstrdate
		EXIT	VS
		STR	r0, dmystr		; Put in date slot
		ORR	r4, r4, #ss_flag_HasDate; Update flags
 [ DateExcludesDelayHack
		B	%30			; Skip -mdy & -delay
 |
		B	%20
 ]

badaddparam
		PullEnv
		ADR	r0, ErrorBlock_Cron_BadCmd
		B	make_error

		MakeErrorBlock	Cron_BadCmd

		; Parse -mdy option
10		LDR	r1, mdystr		; Get -mdy string
		CMP	r1, #0
		BEQ	%20			; No parameter
		BL	convstrdate
		EXIT	VS
		; -mdy needs month and day swapping
		STR	r0, dmystr		; Put in date slot, but...
		STRB	r0, dmystr+1		; Swap month and day
		MOV	r0, r0, LSR #8
		STRB	r0, dmystr+0
		ORR	r4, r4, #ss_flag_HasDate; Update flags
 [ DateExcludesDelayHack
		B	%30
 ]
		; Parse -delay option
20		LDR	r1, delaystr		; Get -delay string
		CMP	r1, #0
		BEQ	%30			; Skip if no parameter
		BL	convstrtime		; Convert to bit field
		EXIT	VS
		; r0=min<<16+hour<<24
 [ debug_cmd
		Push	"r0"
		DREG	r0, "delay="
		Pull	"r0"
 ]
		AND	r2, r0, #&FF000000	; Pick out hours
		SUB	r2, r2, r2, LSR #4	; Mul by 15/16
		AND	r0, r0, #&00FF0000
		ADD	r2, r2, r0, LSL #2	; r1 = total minutes << 18
		SUB	r2, r2, r2, LSR #4	; r1 = total seconds << 12
		ADD	r2, r2, r2, LSR #2	; r1 = total deciseconds << 9
		ADD	r2, r2, r2, LSR #2	; r1 = total centiseconds << 6
		MOV	r2, r2, LSR #6		; r1 = total centiseconds
 [ debug_cmd
		DREG	r2, "centi="
 ]
		ADR	r1, delaystr		; UTC destination
		MOV	r0, #3
		STR	r0, [r1]		; Reason code 3
		MOV	r0, #14			; OS_Word 14
		SWI	XOS_Word		; Get soft copy of RTC
		EXIT	VS
		LDMIA	r1, {r0,r3}		; Get value
		ADDS	r0, r0, r2		; Update low word
		ADC	r3, r3, #0		; Update high byte
		AND	r3, r3, #&ff		; Mask high bytes
		ORR	r4, r4, r3		; Put high byte into flags word
		STR	r0, [r1]		; Write back low word
		ORR	r4, r4, #ss_flag_HasUTC	; Update flags

30		LDR	r1, timestr		; Get -time parameter
		CMP	r1, #0
		BEQ	%40
		BL	convstrtime		; Convert to bit field
		EXIT	VS
		STR	r0, timestr		; Store
 [ debug_cmd
		DREG	r0, "timestr="
 ]
		ORR	r4, r4, #ss_flag_HasTime

40		STR	r4, mdystr		; Save flags

 [ debug_cmd
		LDR	r1, dmystr
		DREG	r1, "date="
		LDR	r1, timestr
		DREG	r1, "time="
		LDR	r1, delaystr
		DREG	r1, "utctime="
		LDR	r1, mdystr
		DREG	r1, "flags="
 ]

		; We are now ready to allocate a structure from RMA, fill it
		; in and insert it into the list.  First we need to find out
		; how big it is.

		LDR	r0, cmdstr		; Get -command parameter
		CMP	r0, #0
		BEQ	badaddparam
		MOV	r3, #0			; Start of string
50		LDRB	r1, [r0,r3]		; Get a byte
		CMP	r1, #32
		ADD	r3, r3, #1		; Next byte
		BGE	%50			; Try it
		; r3 = length of string including terminator
		ADD	r3, r3, #:INDEX: ss_cmdline
 [ debug_cmd
		DREG	r3, "Size="
 ]
		MOV	r0, #ModHandReason_Claim
		SWI	XOS_Module
		EXIT	VS			; Return error
		; r2 = claimed block - We must do something with it, or free it
 [ debug_cmd
		DREG	r2, "RMA block="
 ]
		ADR	r1, dmystr
		LDMIA	r1!, {r3-r6}		; Get parameters
		ADD	r0, r2, #:INDEX: ss_cldate
		STMIA	r0!, {r3-r6}		; Store in structure
		MOV	ssp, r2			; Set structure pointer
		LDR	r1, cmdstr		; Get source
		ADR	r0, ss_cmdline		; Calculate destination
60		LDRB	r3, [r1], #1
		STRB	r3, [r0], #1
		CMP	r3, #32
		BGE	%60
 [ debug_cmd
		DREG	r0, "End RMA="
		DREG	r1, "End Source="
 ]
		BL	AddToList
 [ debug
		BVS	%FT70
		BL	show_job		; Show the job for diagnostic
		EXITS
 |
		EXITS	VC
 ]
	
70		MOV	r1, r0
		MOV	r3, pc
		AND	r3, r3, #SR_V
 [ debug_cmd
		DREG	r1, "R0="
		DREG	r3, "Flags="
		DREG	r2, "Freeing block "
 ]
		MOV	r0, #ModHandReason_Free	; Free the block
		SWI	XOS_Module
		EXIT	VS

		MOV	r0, r1
		PullEnv
		ORRS	pc, lr, r3

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Output a job
;  Entry:
;   ssp = Address of job in memeory
;  Exit:
;   All registers preserved
;   ParamBuffer is used
;
; Format:
;  JobID    Time                 Type  Parameters
;  00000001 15:30:00 25-Mar-1997 CU    NFS::Home.$.EPG

type_codes	= "FC"

show_job	ENTRY	"r0-r4",8
		LDR	r0, ss_id		; Get ID
		ADR	r1, ParamBuffer		; Use as temporary work space
		ADR	r2, ?ParamBuffer
		SWI	XOS_ConvertHex8		; Convert to Hex
		SWIVC	XOS_Write0		; Write out
		SWIVC	XOS_WriteI+' '
		BVS	%FT40

		MOV	r1, sp			; Put result on stack
		BL	get_job_ETE		; Get estimated time of job
		BVS	%FT40

		MOV	r0, #-1
		ADR	r2, ParamBuffer		; Address of string
		ADR	r3, ?ParamBuffer	; Get size of buffer
		SWI	XTerritory_ConvertStandardDateAndTime	; write string
		SWIVC	XOS_Write0
		BVS	%FT40

		SWI	XOS_WriteI+' '

		LDR	r1, ss_flags		; Get flags
		AND	r0, r1, #ss_flag_Type	; Mask out type
		ADR	r3, type_codes
		ADD	r3, r3, r0, LSR #TypeShift ; Get address of type char
		LDRB	r0, [r3]		; Get char
		SWI	XOS_WriteC		; Write out
		BVS	%FT40

		MOV	r3, #5			; Field width for flags
		TST	r1, #ss_flag_HasTime	; Check time flag
		SUBNE	r3, r3, #1
		SWINE	XOS_WriteI+'T'
		BVS	%FT40

		TST	r1, #ss_flag_HasDate	; Check date flag
		SUBNE	r3, r3, #1
		SWINE	XOS_WriteI+'D'
		BVS	%FT40

		TST	r1, #ss_flag_HasUTC	; Check UTC flag
		SUBNE	r3, r3, #1
		SWINE	XOS_WriteI+'U'

10		SWIVC	XOS_WriteI+' '		; Pad out flags
		BVS	%FT40
		SUBS	r3, r3, #1
		BNE	%BT10

		; Now write type dependant data.  Could do a jump table if
		; more types got added.
		TST	r1, #ss_flag_Type	; Check for type zero
		BNE	%FT20

		; Display data for function
		LDR	r0, ss_funcaddr		; Get function address
		ADR	r1, ParamBuffer
		ADR	r2, ?ParamBuffer
		SWI	XOS_ConvertHex8
		SWIVC	XOS_Write0		; Display
		SWIVC	XOS_WriteI+' '		; Space
		BVS	%FT40

		LDR	r0, ss_funcr0		; Get r0 value
		ADR	r1, ParamBuffer
		ADR	r2, ?ParamBuffer
		SWI	XOS_ConvertHex8
		SWIVC	XOS_Write0		; Display
		SWIVC	XOS_WriteI+' '		; Space
		BVS	%FT40

		LDR	r0, ss_funcr12		; Get r12 value
		ADR	r1, ParamBuffer
		ADR	r2, ?ParamBuffer
		SWI	XOS_ConvertHex8
		B	%FT30

		; Display data for command
20		ADR	r0, ss_cmdline		; Get command line
30		SWI	XOS_Write0		; Write
		SWIVC	XOS_NewLine		; End of line
		EXITS	VC
40		STR	r0, [sp, #Proc_LocalStack]
		PullEnv
		ORRS	pc, lr, #SR_V

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle CronShow command
;  Entry:
;   r0  = Command tail
;   r1  = Number of parameters
;   r12 = Pointer to private word
;   r13 = Stack
;   r14 = Return address
;  Exit:
;   r7-r11 preserved
;
; CronShow

showcmd		ENTRY	"r1"
		LDR	wp, [r12]
		ADR	r1, showstr
		ADR	r2, ParamBuffer
		MOV	r3, #?ParamBuffer
		BL	message_lookup
		ADR	r0, ParamBuffer
		SWIVC	XOS_Write0
		SWIVC	XOS_NewLine
		LDR	ssp, ScheduleList
		MOV	r0, #0
10		CMP	ssp, #0
		BEQ	%FT20
 [ debug
 		DREG	ssp, "Waiting at "
 ]
		BL	show_job
		LDR	ssp, ss_next
		B	%BT10

20		LDR	ssp, ActiveList
30		CMP	ssp, #0
		BEQ	%FT40
 [ debug
		DREG	ssp, "Active at "
 ]
		BL	show_job
		LDR	ssp, ss_next
		B	%BT30

40		LDR	ssp, ReadyList
50		CMP	ssp, #0
		EXITS	EQ
 [ debug
		DREG	ssp, "Ready at "
 ]
		BL	show_job
		LDR	ssp, ss_next
		B	%BT50

showstr		= "LHDR",0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle CronRemove command
;
		! 0, "*** Warning: Bogus command"
rmcmd		ENTRY   "r0"
		ADR	r0, foostr
		SWI	XOS_Write0
		STRVS	r0, [r13]
		EXIT	VS
		EXITS

foostr		= "Bar\r\n",0

 [ debug
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle CronDebug command
;

dbgcmd		ENTRY
		LDR	wp, [r12]
		LDR	r1, Flags
		DREG	r1, "Flags="
		LDR	r1, lc_cldate
		DREG	r1, "lc_cldate="
		LDR	r1, lc_cltime
		DREG	r1, "lc_cltime="
		
		MOV	r0, #0
		EXITS
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
