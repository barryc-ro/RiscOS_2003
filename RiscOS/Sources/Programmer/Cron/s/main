;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

 [ International_Help = 0
		! 1,"International Help required"
 ]

module		& 0				; => entry routine
                & init    -module               ; => initalise routine
                & final   -module               ; => finalise routine
 [ {FALSE}
                & service -module               ; => service trap
 |
		& 0
 ]

                & title -module                 ; => title string
                & helpstring  -module		; => help string
                & cmdtable -module		; => command table

 [ {FALSE}
                & MySwiChunkBase -module	; = SWI chunk base
		& swi_handler -module		; => SWI handler code
		& swi_decodetable -module	; => SWI decoding table
 |
		& 0
		& 0
		& 0
 ]
		& 0				; => SWI decoding code
		& msg_filename -module

title           = "Cron", 0
helpstring	= "Cron", 9, 9, "$VString ($Date)", 0
		ALIGN 4
msg_filename	= "Resources:$.Resources.Cron.Messages", 0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; module workspace
                        ^ 0, wp
Flags			# 4		; Global flags
NextID			# 4		; Next ID to allocate
MessagesWorkspace       # 16		; needed for messages routines
ScheduleList		# 4		; Linked list of waiting schedules
ReadyList		# 4		; Lined list of ready schedules
ActiveList		# 4		; Linked list of active schedules
lc_cldate		# 4		; Date of last check
lc_cltime		# 4		; Time of last check
ParamBuffer		# 272		; Buffer for command line + temp space
workspace               * :INDEX: @

;
; bit definitions for Flags
;
flag_HaveMessages	* 1:SHL:0	; set if opened messages file
flag_CbPending		* 1:SHL:1	; set if any callback pending
flag_active		* 1:SHL:2	; set if any job active

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; schedule structure
                        ^ 0, ssp
ss_next			# 4		; Next in list
ss_id			# 4		; Job ID
ss_cldate		# 4		; Compact Local Date
ss_cltime		# 4		; Compact Local Time
ss_utctime		# 4		; 5 byte UTC time (for delay)
ss_flags		# 4		; NOTE: 1 byte from UTC.  3 bytes flags
; Type dependant data starts here
ss_data			# 0
ss_cmdline		# 0		; Rest of structure
ss_funcaddr		# 4
ss_funcr0		# 4
ss_funcr12		# 4
ss_size			* :INDEX: @

ss_flag_UTC		* &ff		; Part of 5 byte UTC structure
ss_flag_HasTime		* &100		; cltime is valid
ss_flag_HasDate		* &200		; cldate is valid
ss_flag_HasUTC		* &400		; utctime is valid
ss_flag_Type		* &800		; 0=Function, 1=Command
TypeShift		* 11
Type_Func		* 0
Type_Cmd		* 1
Type_Mask		* 1

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
		GBLL	debug_main
		GBLL	debug_cmd
		GBLL	debug_sched
		GBLL	debug_exec
 [ debug
 		! 0, "Warning: Inserting debug code"
; Separate the debug code into two sections to avoid getting swamped with
; debug info
debug_main	SETL	False
debug_cmd	SETL	False
debug_sched	SETL	False
debug_exec	SETL	True
Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
;Debug_File      SETS	"$.CronDbg"
 |
debug_main	SETL	False
debug_cmd	SETL	False
debug_sched	SETL	False
debug_exec	SETL	False
Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.

init            ENTRY	"r0-r11"

		LDR	r2, [r12]
 [ debug_main
		ADDR	r3, module
		DREG	r3, "I:module="
		DREG	r2, "I:owp="
 ]
		TEQ	r2, #0			; Check for rmtidy
		BNE	%10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace          ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                      ; return if didn't work

                STR     r2, [wp]		; wp = r2

10		MOV     wp, r2                  ; wp -> workspace
; Clear local variables
		MOV	r0, #0
		STR	r0, Flags
		STR	r0, ScheduleList
		STR	r0, ReadyList
		STR	r0, ActiveList
		STR	r0, NextID
		! 0,"*** Need to set more variables"
		BL	check_schedules		; Update check times
		EXIT	VS

 [ debug_main
		DREG	wp, "I:nwp="
 ]

 [ standalonemessages
		ADRL	r0, resource_file_block
		SWI	XResourceFS_RegisterFiles
 ]
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           ENTRY	"r1-r4,r11"

		LDR	wp, [r12]

		LDR	r1, ActiveList		; Fail if active schedules
		TST	r1, r1
		BEQ	%FT10

		PullEnv
		ADR	r0, ErrorBlock_Cron_Busy
		B	make_error

		MakeErrorBlock	Cron_Busy

10		MOV	r3, r0
 [ debug_main
		ADDR	r0, module
		DREG	r0, "F:module="
		DREG	wp, "F: wp="
 ]

		LDR	ssp, ScheduleList
		MOV	r0, #0			; We set the list to zero in
		STR	r0, ScheduleList	; case free_list fails
		BL	free_list
		EXIT	VS
		LDR	ssp, ReadyList
		MOV	r0, #0
		STR	r0, ReadyList
		BL	free_list
		EXIT	VS

 [ standalonemessages
                ADRL    R0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
 ]
 		MOV	r0, r3
 		PullEnv
		B	CancelCallback

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

free_list	ENTRY
10		CMP	ssp, #0
		EXIT	EQ
 [ debug_main
 		DREG	ssp, "Schedule at "
 ]
		MOV	r2, ssp
		LDR	ssp, ss_next
		MOV	r0, #ModHandReason_Free
		SWI	XOS_Module
		EXIT	VS
		B	%BT10
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This bit of appartently harmless code will bind a messages file into the code
; in the case of a standalone module. The macro ResourceFile will create the
; stuff and the label resource_file is used to point to the block required by
; ResourceFS

 [ standalonemessages
resource_file_block
	ResourceFile Resources.<Locale>.Tokenised, Resources.Cron.Messages
	DCD     0
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
