;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; RunAJob - Run a job if one is ready
;  Entry:
;   Nothing
;  Exit:
;   All registers preserved
; Runs a job if one is ready.  If there are any more ready jobs, set a
; transient callback for it.  Otherwise, set a timer callback if there
; are waiting jobs.

RunAJob		ENTRY	"r1-r2,ssp"
		; Move job to active queue
		LDR	ssp, ReadyList		; Remove a job from the queue
		TST	ssp, ssp
		LDRNE	r1, ss_next		; Get pointer to next job
		STRNE	r1, ReadyList		; Set next job as head
		LDRNE	r1, ActiveList		; Get active list
		STRNE	r1, ss_next		; Put into next field
		STRNE	ssp, ActiveList		; Place job at head
		; Setup the next callback.  Executing the job could take
		; a long time.
		BL	EnsureCallback
		EXIT	VS
		TST	ssp, ssp
		EXITS	EQ			; Exit if no active job
		; Run the job
 [ debug_exec
 		MOV	r1, r0
		DREG	ssp, "Starting job: "
		MOV	r0, r1
 ]
		BL	execute_job		; Anything can happen here
		; Remove the job from the active list.  It should be the first
		; job in the list, but we scan the whole list to make sure.
 [ debug_exec
 		MOV	r1, r0
		DREG	ssp, "Finished job: "
		MOV	r0, r1
 ]
		MOV	r1, ssp
		ADR	r2, ActiveList
10		LDR	ssp, [r2]
		CMP	r1, ssp
		BEQ	%FT20			; Found it
		ADR	r2, ss_next
		TST	ssp, ssp
		BNE	%BT10
		; We got to the end of the list.  This should not happen.
		PullEnv
		ADR	r0, ErrorBlock_Cron_LostJob
		B	make_error

		MakeErrorBlock Cron_LostJob

20
 [ debug_exec
		MOV	r1, r0
		DREG	ssp, "Removing job: "
		DREG	r2, "Ptr at: "
		MOV	r0, r1
 ]
		LDR	r1, ss_next		; Get next job
		STR	r1, [r2]		; Store in job pointer

		MOV	r0, #ModHandReason_Free	; Free job
		MOV	r2, ssp
		SWI	XOS_Module
		EXIT	VS
		EXITS
	
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; execute_job - Run job, leaving it on the queue
;  Entry:
;   ssp = job pointer
;  Exit:
;   All registers preserved

execute_job	ENTRY	"r1-r3,r12"
 		MOV	r3, r0
		LDR	r1, ss_flags		; Get job type (in job flags)
 [ debug_exec
 		LDR	r0, ss_id
 		DREG	r0, "Execute id "
		DREG	r1, "ss_flags="
 ]
 [ ss_flag_Type = (1 :SHL: TypeShift) :LAND: Type_Func = 0 :LAND: Type_Cmd = 1
 		TST	r1, #ss_flag_Type
 		BEQ	%FT10
 		; Handle a command
 		ADR	r0, ss_cmdline
 		MOV	r1, #0
 [ debug
		SWI	XOS_CLI			; Run command now
 |
  		SWI	XTaskModule_StartTask	; Queue command
 ]
 		EXIT	VS
 		MOV	r0, r3
 		EXITS
 
10		LDR	r0, ss_funcr0
		LDR	r12, ss_funcr12
		MOV	lr, pc
		LDR	pc, ss_funcaddr
		MOV	r0, r3			; Return address
		EXITS				; Restores r12
 |
		! 1,"Code needs re-arrangement for more than 2 job types"
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		END
