callback CancelCallback:        Remove all callbacks
   Entry:
    r12 = workspace pointer
   Exit:
    All registers preserved
callback EnsureCallback:        
   Entry:
    Nothing
   Exit:
    All registers preserved
  Ensures a callback/timer is pending if there are schedules on the
  queue.  This ensures that a callback will happen in the future.  Also,
  if there are schedules ready to be executed, a transient callback will be
  created to execute those jobs.
callback handle_callback:       Respond to a transient callback
   Entry:
    r12 = workspace pointer
   Exit:
    All registers preserved, even on error.
  ParamBuffer used.  Ignore errors.
callback handle_timer:          Respond to a callafter
   Entry:
    r12 = workspace pointer
   Exit:
    All registers preserved, even on error.
  ParamBuffer used.  Ignore errors.
commands cmdtable:              The command table
commands convstrdate:           
   Entry:
    r1 = String in format dd/mm/yy
   Exit:
    r0 = Compact date
commands convstrtime:           
   Entry:
    r1 = String in format hh:mm
   Exit:
    r0 = Compact date
commands delaystr:              -> ss_utctime
commands dmystr:                -> ss_cldate
commands mdystr:                -> ss_flags
commands timestr:               -> ss_cltime
execute RunAJob:                Run a job if one is ready
   Entry:
    Nothing
   Exit:
    All registers preserved
  Runs a job if one is ready.  If there are any more ready jobs, set a
  transient callback for it.  Otherwise, set a timer callback if there
  are waiting jobs.
execute execute_job:            Run job, leaving it on the queue
   Entry:
    ssp = job pointer
   Exit:
    All registers preserved
init conditional_get:           Standard debug macros
init conditional_get:           Standard debug macros
init debug:                     to include debug macros
main ActiveList:                Linked list of active schedules
main Flags:                     Global flags
main MessagesWorkspace:         needed for messages routines
main NextID:                    Next ID to allocate
main ParamBuffer:               Buffer for command line + temp space
main ReadyList:                 Lined list of ready schedules
main ScheduleList:              Linked list of waiting schedules
main flag_CbPending:            set if any callback pending
main flag_HaveMessages:         set if opened messages file
main flag_active:               set if any job active
main lc_cldate:                 Date of last check
main lc_cltime:                 Time of last check
main module:                    => entry routine
main ss_cldate:                 Compact Local Date
main ss_cltime:                 Compact Local Time
main ss_cmdline:                Rest of structure
main ss_flag_HasDate:           cldate is valid
main ss_flag_HasTime:           cltime is valid
main ss_flag_HasUTC:            utctime is valid
main ss_flag_Type:              0=Function, 1=Command
main ss_flag_UTC:               Part of 5 byte UTC structure
main ss_flags:                  NOTE: 1 byte from UTC.  3 bytes flags
main ss_id:                     Job ID
main ss_next:                   Next in list
main ss_utctime:                5 byte UTC time (for delay)
schedule AddToList:             Adds a schedule to the linked list
   Entry:
    ssp = Schedule structure allocated from RMA
   Exit:
    r0 = Job ID
schedule centiperday:           Centiseconds per day
schedule check_schedules:       Checks for schedules to be run
   Entry:
    Nothing
   Exit:
    All registers preserved
  ParamBuffer used.
schedule cs_centi:              Centiseconds
schedule cs_dom:                Day of month
schedule cs_dow:                Day of week
schedule cs_doy:                Day of year
schedule cs_hour:               Hours
schedule cs_min:                Minutes
schedule cs_moy:                Month of year
schedule cs_sec:                Seconds
schedule cs_utc:                UTC time
schedule cs_year:               Year
schedule get_job_ETE:           Get estimated time of execution
   Entry:
    r1 = Address to put time
    ssp = Address of job
   Exit:
    All registers preserved
    ParamBuffer is used
schedule gjete_centi:           Centiseconds
schedule gjete_dom:             Day of month
schedule gjete_dow:             Day of week
schedule gjete_doy:             Day of year
schedule gjete_hour:            Hours
schedule gjete_min:             Minutes
schedule gjete_moy:             Month of year
schedule gjete_sec:             Seconds
schedule gjete_year:            Year
