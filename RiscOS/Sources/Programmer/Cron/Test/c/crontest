#include "header.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "swis.h"

_kernel_oserror outmem={0,"Malloc failed"};

#if 0
void *debug_malloc(int size) {
  void *p=malloc(size);
  printf("malloc(%i)=%p\n",size,p);
  return p;
}

void debug_free(void *block) {
  printf("free(%p)\n",block);
  free(block);
}
#define malloc debug_malloc
#define free debug_free
#endif

/* Command parser ********************************************************/

void free_params(int argc,char **argv) {
  int i;
  for(i=0;i<argc;i++)
    free(argv[i]);
  free(argv);
}

_kernel_oserror *parse_command(char *line,int *argcp,char ***argvp) {
  int argc;
  char **argv;
  char *p=line;
  int i,len;
  
  if(*line<' ') {
    argc=0;
  } else {
    for(i=0,argc=1;*p>=' ';p++)
      if(*p==' ') {
        argc++;
        while(*++p==' ');
      };
  };
  argv=malloc((argc+1)*sizeof(char*));
  if(argv==NULL)
    return &outmem;
  for(i=0;i<argc;i++) {
    for(p=line,len=0;*p++>' ';len++);
    argv[i]=malloc(len+1);
    if(argv[i]==NULL) {
      free_params(i,argv);
      return &outmem;
    };
    memcpy(argv[i],line,len);
    argv[i][len]=0;
    line+=len;
    while(*++line==' ');
  };
  argv[argc]=NULL;
  *argvp=argv;
  *argcp=argc;
  return NULL;
}

/* Time routines *********************************************************/

struct delay {
  int hours;
  int minutes;
  int seconds;
};

_kernel_oserror *parse_delay(char *str,struct delay *delay) {
  int i;
  _kernel_oserror baddelay={0,"Bad delay"};

  delay->hours=0;
  delay->minutes=0;
  delay->seconds=0;
  for(i=0;i<3;i++) {
    if(!*str)
      return &baddelay;
    (&delay->hours)[i]=(int)strtol(str,&str,0);
    if(!*str)
      return NULL;
    if(*str++!=':')
      return &baddelay;
  };
  return &baddelay;
}

/* Job tracker ***********************************************************/

struct cron_job {
  struct cron_job *next;
  int id; /* Crontest specific ID */
  int count; /* Number of acks */
  int flags;
  int diff; /* Between exec time and sched time */
  struct delay delay;
  time_t submitted;
  /* Job type specific stuff */
  union {
    char utc[5];
    time_t unix_time;
  } time;
  union {
    struct {
      int addr;
      int r0;
      int r12;
    } fn;
    struct {
      char *cmdline;
    } cmd;
  } action;
};

/* Constant flags */
#define FLAGS_CMD	1
#define FLAGS_ALT	2
#define FLAGS_UNIXTIME	4
#define FLAGS_SWI	8
/* Status flags */
#define FLAGS_CANCELLED	16
#define FLAGS_ONTIME	32
#define FLAGS_ERROR	64

struct cron_job *job_list=NULL;
int next_id=0;
int bad_job_count=0;

_kernel_oserror *reset_jobs() {
  _kernel_oserror *err;
  _kernel_swi_regs regs;
  struct cron_job *job;
  
  regs.r[0]=(int)"rmreinit cron";
  err=_kernel_swi(OS_CLI,&regs,&regs);
  if(err) return err;
  for(job=job_list;job;job=job_list) {
    job_list=job->next;
    if((job->flags&FLAGS_CMD)&&job->action.cmd.cmdline)
      free(job->action.cmd.cmdline);
    free(job);
  };
  bad_job_count=0;
  next_id=time(NULL);
  return NULL;
}

int job_diff(struct cron_job *job,time_t now,char *utc) {
  int diff;
  if(job->flags&FLAGS_UNIXTIME) {
    diff=(int)(now-job->time.unix_time);
  } else {
    diff=(utc[0]-job->time.utc[0])+
         (utc[1]-job->time.utc[1]<<8)+
         (utc[2]-job->time.utc[2]<<16)+
         (utc[3]-job->time.utc[3]<<24);
    diff/=100;
    diff+=((utc[4]-job->time.utc[4]<<24)/25)<<6;
  };
  return diff;
}

void ack_job(int i) {
  struct cron_job *job;
  _kernel_swi_regs regs;

  for(job=job_list;job;job=job->next)
    if(job->id==i) {
      int diff=0;
      time_t now=time(NULL);
      char utc[5]={3};

      regs.r[0]=14;
      regs.r[1]=(int)utc;
      if(_kernel_swi(OS_Word,&regs,&regs)) {
        job->flags|=FLAGS_ERROR;
        diff=0;
      } else {
        diff=job_diff(job,now,utc);
      };
      if(diff<=6 && diff>=-6)
        job->flags|=FLAGS_ONTIME;
      if(!job->count) job->diff=diff;
      job->count++;
      return;
    };
  /* Job not found */
  bad_job_count++;
}

_kernel_oserror *job_handler(_kernel_swi_regs *r, void *pw) {
  ack_job(r->r[0]);
  return NULL; 
}

struct cron_job *new_job(void) {
  struct cron_job *job;

  job=malloc(sizeof(*job));
  if(job==NULL) return NULL;
  job->next=NULL;
  job->id=next_id++;
  job->count=0;
  job->flags=0;
  job->diff=0;
  job->submitted=time(NULL);
  return job;
}

void add_job(struct cron_job *job) {
  job->next=job_list;
  job_list=job;
}

/* Command interface *****************************************************/

_kernel_oserror *cmd_hander(char *arg_string, int ac, int cmd_no, void *pw) {
  int argc;
  char **argv;
  _kernel_oserror *err=NULL;
  _kernel_oserror badcmd={0,"Bad crontest subcommand"};
  _kernel_swi_regs regs;
  struct tm *tm;
  time_t now;
  struct cron_job *job=NULL;
  
  if(cmd_no!=CMD_crontest)
    return &badcmd;
  err=parse_command(arg_string,&argc,&argv);
  if(err) return err;
  now=time(NULL);
  tm=localtime(&now);

  /***** command *****/
  if(!strcmp("command",argv[0])) {
    char *cmd,*type;
    struct delay delay;

    if(argc!=3) err=&badcmd;
    if(!err) {
      job=new_job();
      if(job==NULL) err=&outmem;
    };
    if(!err)
      err=parse_delay(argv[2],&job->delay);
    if(!err) {
      cmd=malloc(sizeof(
          "cronadd -delay 00:00 -command \"crontest ack 00000000\""));
      if(cmd==NULL) err=&outmem;
      job->action.cmd.cmdline=cmd;
      job->flags|=FLAGS_CMD|FLAGS_UNIXTIME;
      job->time.unix_time=now+(job->delay.minutes+job->delay.hours*60)*60;
    };
    if(!strcmp("-wait",argv[1])) {
      type="time";
      job->time.unix_time-=tm->tm_sec;
      delay.minutes=job->delay.minutes+tm->tm_min;
      delay.hours=job->delay.hours+tm->tm_hour+(delay.minutes/60);
      delay.hours=delay.hours%24;
      delay.minutes=delay.minutes%60;
      job->flags|=FLAGS_ALT;
    } else if(!strcmp("-delay",argv[1])) {
      type="delay";
      delay.hours=job->delay.hours;
      delay.minutes=job->delay.minutes;
    } else err=&badcmd;
    if(!err) {
      sprintf(cmd,"cronadd -%s %.2i:%.2i -command \"crontest ack %.8x\"",
      		type,delay.hours,delay.minutes,job->id);
#ifdef DEBUG
      printf("%s\n",cmd);
#endif
      regs.r[0]=(int)cmd;
      err=_kernel_swi(OS_CLI,&regs,&regs);
    };
    if(!err) {
      sprintf(cmd,"crontest ack %.8x",job->id);
      add_job(job);
      job=NULL;
    };

  /***** swifn *****/
  } else if(!strcmp("swifn",argv[0])) {
    if(argc!=3) err=&badcmd;
    if(!err) {
      job=new_job();
      if(job==NULL) err=&outmem;
    };
    if(!err)
      job->flags|=FLAGS_SWI;
      err=parse_delay(argv[2],&job->delay);
    if(!err) {
      if(!strcmp("-delay",argv[1])) {
        job->flags|=FLAGS_UNIXTIME;
        job->time.unix_time=now+(job->delay.hours*60+job->delay.minutes)*60+
			    job->delay.seconds;
	regs.r[0]=0;
	regs.r[1]=job->time.unix_time;
	regs.r[2]=job->action.fn.addr=(int)job_fnentry;
	regs.r[3]=job->action.fn.r0=job->id;
	regs.r[4]=job->action.fn.r12=(int)pw;
	err=_kernel_swi(0x4EA42,&regs,&regs);
      } else if(!strcmp("-delay5",argv[1])) {
        int i=((job->delay.hours*60+job->delay.minutes)*60+job->delay.seconds)*100;
	char utc[5]={3};

	regs.r[0]=14;
	regs.r[1]=(int)utc;
	err=_kernel_swi(OS_Word,&regs,&regs);
	if(!err) {
          job->time.utc[0]=(i+utc[0])&0xff;
          i=((i+utc[0])>>8)+utc[1];
          job->time.utc[1]=i&0xff;
          i=(i>>8)+utc[2];
          job->time.utc[2]=i&0xff;
          i=(i>>8)+utc[3];
          job->time.utc[3]=i&0xff;
          i=(i>>8)+utc[4];
          job->time.utc[4]=i&0xff;
#ifdef DEBUG
          for(i=0;i<5;i++)
            printf("utc[%i]=%.2x  job->utc[%i]=%.2x\n",i,utc[i],
            	   i,job->time.utc[i]);
#endif
          regs.r[0]=0;
          regs.r[1]=(int)job->time.utc;
          regs.r[2]=job->action.fn.addr=(int)job_fnentry;
	  regs.r[3]=job->action.fn.r0=job->id;
	  regs.r[4]=job->action.fn.r12=(int)pw;
	  err=_kernel_swi(0x4EA40,&regs,&regs);
  	};
      } else err=&badcmd;
    };
    if(!err) {
      add_job(job);
      job=NULL;
    };

  /***** swicmd *****/
  } else if(!strcmp("swicmd",argv[0])) {
    char *cmd;

    if(argc!=3) err=&badcmd;
    if(!err) {
      job=new_job();
      if(job==NULL) err=&outmem;
    };
    if(!err)
      err=parse_delay(argv[2],&job->delay);
    if(!err) {
      job->flags|=FLAGS_SWI|FLAGS_CMD;
      job->action.cmd.cmdline=cmd=malloc(sizeof("crontest ack 00000000"));
      if(cmd) {
        sprintf(cmd,"crontest ack %.8x",job->id);
      } else err=&outmem;
    };
    if(!err) {
      if(!strcmp("-delay",argv[1])) {
        job->flags|=FLAGS_UNIXTIME;
        job->time.unix_time=now+(job->delay.hours*60+job->delay.minutes)*60+
			    job->delay.seconds;
	regs.r[0]=1;
	regs.r[1]=job->time.unix_time;
	regs.r[2]=(int)cmd;
	err=_kernel_swi(0x4EA42,&regs,&regs);
      } else if(!strcmp("-delay5",argv[1])) {
        int i=((job->delay.hours*60+job->delay.minutes)*60+
        	job->delay.seconds)*100;
	char utc[5]={3};

	regs.r[0]=14;
	regs.r[1]=(int)utc;
	err=_kernel_swi(OS_Word,&regs,&regs);
	if(!err) {
          job->time.utc[0]=(i+utc[0])&0xff;
          i=((i+utc[0])>>8)+utc[1];
          job->time.utc[1]=i&0xff;
          i=(i>>8)+utc[2];
          job->time.utc[2]=i&0xff;
          i=(i>>8)+utc[3];
          job->time.utc[3]=i&0xff;
          i=(i>>8)+utc[4];
          job->time.utc[4]=i&0xff;
#ifdef DEBUG
          for(i=0;i<5;i++)
            printf("utc[%i]=%.2x  job->utc[%i]=%.2x\n",i,utc[i],
            	   i,job->time.utc[i]);
#endif
          regs.r[0]=1;
          regs.r[1]=(int)job->time.utc;
          regs.r[2]=(int)cmd;
	  err=_kernel_swi(0x4EA40,&regs,&regs);
  	};
      } else err=&badcmd;
    };
    if(!err) {
      add_job(job);
      job=NULL;
    };
    

  /***** status *****/
  } else if(!strcmp("status",argv[0])) {
    char utc[5]={3};
    regs.r[0]=14;
    regs.r[1]=(int)utc;
    err=_kernel_swi(OS_Word,&regs,&regs);
    if(!err) {
      printf("Job ID    Flags  Status   Delay  Count  Period    Submitted\n");
      for(job=job_list;job;job=job->next) {
        char *status;
        int diff=job->diff;
        if(job->flags&FLAGS_ERROR) {
          status="Error";
        } else if(job->count>(job->flags&FLAGS_CANCELLED?0:1)) {
          status="Failed";
        } else if(job->count) {
          status=job->flags&FLAGS_ONTIME?"Passed":diff>0?"Late":"Early";
        } else {
          diff=job_diff(job,now,utc);
          if(diff<=6) {
            status="Pending";
          } else {
            status="Late";
          };
        };
        printf("%.8x  %.2x     %-8s %-6i %-6i %02i:%02i:%02i  %s",job->id,
               job->flags,status,diff,job->count,job->delay.hours,
               job->delay.minutes,job->delay.seconds,
               ctime(&job->submitted));
      }; 
    };

  /***** reset *****/
  } else if(!strcmp("reset",argv[0])) {
    err=reset_jobs();

  /***** ack *****/
  } else if(!strcmp("ack",argv[0])) {
    ack_job((int)strtol(argv[1],NULL,16));
  } else err=&badcmd;
  if(job) {
    if((job->flags&FLAGS_CMD)&&job->action.cmd.cmdline)
      free(job->action.cmd.cmdline);
    free(job);
  };
  free_params(argc,argv);
  return err;
}

_kernel_oserror *module_init(char *cmd_tail, int podule_base, void *pw) {
  return reset_jobs();
}

_kernel_oserror *module_final(int fatal, int podule, void *pw) {
  _kernel_oserror *err=reset_jobs();
  if(err->errnum==0x102) /* Ignore module not found */
    return NULL;
  return err;
}
