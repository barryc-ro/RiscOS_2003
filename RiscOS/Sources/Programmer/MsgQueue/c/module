/*
 * MsgQueue (module.c)
 *
 *
 * Copyright (C) Acorn Computers Ltd. 1999
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "utils.h"

/* These services do not appear to be declared in any C header files */
#define Service_WimpCloseDown 0x53

#include "msgqhdr.h"


/* This is used to remember the module private word.  This means that the
 * value is available at all times when required for things like setting
 * up callbacks
 */
static void *module_wsp = 0;


/* ========== Initialisation/Finalisation related code ========== */


/* release_module_resources closes and removes the messages file from the RMA
 * if necessary, and removes any pending callback if there was one.  It is
 * used to back-out all resource claims and must be called during finalisation
 * or just before initialisation returns to the kernel with an error.
 */
static void release_module_resources(void)
{
	(void) messages_file_close();
	#ifndef ROM
	(void) utils_deregister_msgs();
	#endif
}

/* This routine opens the Messages file and prepares the
 * MessageTrans system for looking up all the messages that will be required
 * during execution.  It returns an error if it was not able to open Messages.
 */
static _kernel_oserror *module_open_messages(void)
{
	_kernel_oserror *e;

	if (getenv(Module_Title "$Path") != NULL) {
		e = messages_file_open(Module_Title ":Messages");
	}
	else {
		e = messages_file_open("Resources:$.Resources." Module_Title ".Messages");
	}

	return e;
}


/* Module initialisation code
 *
 * Performs the usual module initialisation tasks.
 *
 */

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

#ifdef TRACE
	module_printf(stderr, Module_Title ": initialisation\n");
#endif

	(void) podule_base;
	(void) cmd_tail;
	module_wsp = pw;

	#ifndef ROM
	e = utils_register_msgs();
	if (e != NULL) {
		return e;
	}
	#endif

	e = module_open_messages();
	if (e != NULL) {
		release_module_resources();
	}

#ifdef TRACE
	module_printf(stderr, Module_Title ": initialisation routine exits (%s)\n", e?e->errmess:"OK");
#endif

	return e;
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
	(void) fatal;
	(void) podule;
	(void) pw;

	release_module_resources();

#ifdef TRACE
	module_printf(stderr, Module_Title ": finalisation\n");
#endif

	return 0;
}


/* Module SWI call handler
 *
 */

_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	(void) pw;

  	switch (swi_offset) {
     		case MessageQueue_Register - MessageQueue_00:
       			return messagequeue_register((messagequeue_register_args *) r,pw);

     		case MessageQueue_Deregister - MessageQueue_00:
       			return messagequeue_deregister((messagequeue_deregister_args *) r,pw);

     		case MessageQueue_Send - MessageQueue_00:
       			return messagequeue_send((messagequeue_send_args *) r);

     		case MessageQueue_Receive - MessageQueue_00:
		       	return messagequeue_receive((messagequeue_receive_args *) r);

     		case MessageQueue_Status - MessageQueue_00:
       			return messagequeue_status((messagequeue_status_args *) r);

     		default:
       			return(error_BAD_SWI);
        }
}


/* Module service call handler
 *
 */
void module_service(int sn, _kernel_swi_regs *r, void *pw)
{
	(void) r;
	(void) pw;

	switch (sn) {
		case Service_WimpCloseDown:
			/* A task died - kill any associated message queues */
			break;
	}
}

_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
	(void) arg_string;
	(void) argc;
	(void) pw;

	switch (cmd_no) {
		case CMD_MessageQueueInfo:
			/* Dump the queue info */
			break;
		default:
			break;
	}

	return 0;
}

#ifdef TRACE
/* Debugging routine.  If str is NULL, then the log is printed to 'f' (or stderr
 * if f was NULL).  If f is NULL, the message is added to the log but not displayed
 * on the screen.  If neither f nor str was NULL, the screen characteristcs are set
 * to useful things (text window is reset, default colours restored and text origin
 * restored to 0,0, and the message is printed to the screen and copied to tne log.
 * A monotonic coumnter is incremented for each debug message logged.  Timestamps
 * are stored in the log buffer too.
 */
void module_printf(FILE *f, const char *str, ...)
{
	static int callcount = 0;
	static char pbuffer[65536];
	static int pbufferptr = 0;
	va_list ap;
	int inblock[2];

	f=NULL;  /* <<<< remove me to allow debug output to go to the screen */

	if (f != NULL || str == NULL)  {
		inblock[1] = -1;
		inblock[0] = 132;
		_swix(OS_ReadVduVariables, _INR(0,1), inblock, inblock);
		_swix(OS_WriteC, _IN(0), 6);
		if (inblock[0] > 20) {
			int i;
			for (i=0; i<0; ++i) (void) _kernel_osbyte(19,0,0);
			_swix(OS_WriteN, _INR(0,1), "\x1a\x0c", 2);
		}
		_swix(OS_WriteC, _IN(0), 20);
	}

	if (!str) {
		if (pbufferptr > 0) fprintf(f?f:stderr, "%s\n", pbuffer);
		return;
	}

	++callcount;
	if (f != NULL) {
		fprintf(f, "(%4d) ", callcount);
		va_start(ap, str);
		vfprintf(f, str, ap);
		va_end(ap);
	}
	va_start(ap, str);
	_swix(OS_ReadMonotonicTime, _OUT(0), inblock);
	pbufferptr += sprintf(pbuffer + pbufferptr, "(%8d) (%4d) ", inblock[0], callcount);
	pbufferptr += vsprintf(pbuffer + pbufferptr, str, ap);
	if (pbufferptr > 60000) pbufferptr = 0;
	va_end(ap);
}
#endif
