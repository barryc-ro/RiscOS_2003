#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "kernel.h"
#include "assert.h"

#define MessageQueue_Register 0x52880
#define MessageQueue_Deregister 0x52881
#define MessageQueue_Send 0x52882
#define MessageQueue_Receive 0x52883
#define MessageQueue_Status 0x52884
#define RQUEST_DYNAMIC 1
#define NO_RQUEST_DYNAMIC 0
#define APPLICATION_ID 0x88
#define MAX_QSIZE 128
#define MAX_QUEUES 10
#define MAX_MSG_DATA_SIZE MAX_QSIZE
#define SIZEOF_HDR 24
#define MAX_BUFFSIZE MAX_MSG_DATA_SIZE + SIZEOF_HDR

typedef struct
{
  unsigned int sizeof_message;
  unsigned int sender_id;
  unsigned int reserved;
  unsigned int flags;
  unsigned int message_id;
  signed int timestamp;
  char message_data[MAX_MSG_DATA_SIZE];
} Message;

typedef unsigned int Digit;

int qhandles[MAX_QUEUES];
unsigned int message_id = 0;
unsigned int sender_id = 1;

void qregister(FILE *log);
void qderegister(FILE *log);
void send(FILE *log);
void receive(FILE *log);
void status(FILE *log);
char itoc(int d);

int main()
{
  int r,seed;
  time_t t;
  FILE *log;
  unsigned int i, j = 0;
  unsigned int quit = 0;

    /* This allows us to repeat the same random number */
    /* sequence, which is useful when fixing bugs.     */
    printf("Seed: (0 -> random seed) ");
    scanf("%d",&seed);

    printf("Iterations: ");
    scanf("%u",&quit);
    printf("Bashing will stop after %u iterations.\n",quit);

    for (i = 0; i < MAX_QUEUES; qhandles[i] = -1, i++);

    if ((log = fopen("log","w")) == NULL)
    {
        puts("Unable to open logfile");
        exit(-1);
    }

    if (seed == 0)
    {
        t = time(NULL);
        srand(t);
        fprintf(log,"Seed: %u\n",t);
    }
    else
    {
        srand(seed);
        fprintf(log,"Seed: %u\n",seed);
    }

    for (i = 0; i < MAX_QUEUES / 2; qregister(log), i++);

    do
    {
      r = rand() & 0xff;

      if (r > 230) status(log);
      else if (r > 216) qderegister(log);
      else if (r > 199) qregister(log);
      else if (r > 151) receive(log);
      else send(log);

      j++;

    } while (j < quit);

    fclose(log);
}

void qregister(FILE *log)
{
  int i,r;
  _kernel_swi_regs regs;
  _kernel_oserror *er;

    for (i = 0; i < MAX_QUEUES; i++)
    {
         if (qhandles[i] == -1)
             break;
    }

    if (qhandles[i] != -1)
    {
        return;
    }

    fprintf(log,"REGISTER:\n");

    r = rand() & 0xff;

    if (r > 112) regs.r[0] = RQUEST_DYNAMIC;
    else regs.r[0] = NO_RQUEST_DYNAMIC;

    regs.r[1] = APPLICATION_ID;
    regs.r[2] = rand() % (MAX_QSIZE + 1);

    /* Only want a small proportion of bad max qsizes. */
    r = rand() & 0xff;
    if (r > 5)
    {
        while (regs.r[2] % 4 != 0)
               regs.r[2]++;
    }

    regs.r[3] = rand() % (MAX_MSG_DATA_SIZE + 1);

    /* Only want a small proportion of bad max msg data sizes. */
    r = rand() & 0xff;
    if (r > 5)
    {
        while (regs.r[3] % 4 != 0)
               regs.r[3]++;
    }

    fprintf(log,"In -> QSize: %d, Dynamic: %d, Msgsize (max): %d\n",
      regs.r[2],regs.r[0],regs.r[3]);

    if ((er = _kernel_swi(MessageQueue_Register,&regs,&regs)) != NULL)
    {
         fprintf(log,"0x%x, %s, basher line: %d\n",er->errnum,er->errmess,
         __LINE__);
    }

    qhandles[i] = regs.r[1];

    fprintf(log,"Out -> Handle: %d, Dynamic: %d, Pollword address: 0x%x\n",
      regs.r[1],regs.r[0],regs.r[2]);
}

void qderegister(FILE *log)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er;
  int handle;

    regs.r[0] = 0;
    regs.r[1] = handle = qhandles[rand() % MAX_QUEUES];

    fprintf(log,"DEREGISTER:\n");
    fprintf(log,"In -> Handle: %d\n",regs.r[1]);
    if ((er = _kernel_swi(MessageQueue_Deregister,&regs,&regs)) != NULL)
    {
         fprintf(log,"0x%x, %s, basher line:%d\n",er->errnum,er->errmess,
           __LINE__);
    }
    else
    {
         qhandles[handle] = -1;
    }

    fprintf(log,"Out -> Discarded: %d\n",regs.r[1]);
}

void send(FILE *log)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er;
  Message m;
  Digit d,start_digit;
  int i,j,n;

    fprintf(log,"SEND:\n");

    regs.r[0] = 0;
    regs.r[1] = qhandles[rand() % (MAX_QUEUES - 1)];

    i = rand() & 0xff;
    if (i > 10)
    {
        j = rand() % MAX_QUEUES;
        i = j;
        while (qhandles[i] == -1)
        {
            i++;
            if (i == MAX_QUEUES)
                i = 0;
            if (i == j)
                break;
        }
        regs.r[1] = qhandles[i];
    }

    d = rand() % 10;
    n = rand() % (MAX_MSG_DATA_SIZE + 1);
    start_digit = d;

    /* Only want a small proportion of bad msg sizes. */
    i = rand() & 0xff;
    if (i > 5)
    {
        while (n % 4 != 0)
               n++;
    }

    if (n > MAX_MSG_DATA_SIZE)
    {
        n = MAX_MSG_DATA_SIZE;
    }

    for (i = 0; i < n; i++)
    {
         m.message_data[i] = itoc(d);
         if (d != 9)
         {
             d++;
         }
         else
         {
             d = 0;
         }
    }

    m.sizeof_message = n + SIZEOF_HDR;
    m.sender_id = sender_id;
    m.reserved = m.flags = 0;
    m.message_id = message_id;
    m.timestamp = 0;

    regs.r[2] = (int)&m;

    fprintf(log,"In -> Handle: %d\n",regs.r[1]);
    fprintf(log,"      Message -> size: %d, sender_id: %d, message_id: %d\n",
      m.sizeof_message,m.sender_id,m.message_id);
    fprintf(log,"      Message data start digit: %u, by %d\n",start_digit,n);
    fflush(log);

    if ((er = _kernel_swi(MessageQueue_Send,&regs,&regs)) != NULL)
    {
         fprintf(log,"0x%x, %s, basher line: %d\n",er->errnum,er->errmess,
           __LINE__);
         return;
    }

    sender_id++;
    message_id++;
}

void receive(FILE *log)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er;
  int i,r;
  int remove;
  int buffsize;
  Message m;
  int data_end;
  int prev_digit;

    fputs("RECEIVE:",log);

    r = rand() & 0xff;
    if (r < 112) remove = 0;
    else remove = 1;

    buffsize = rand() % (MAX_BUFFSIZE + 1);
    while (buffsize < SIZEOF_HDR)
    {
           buffsize++;
    }

    regs.r[0] = remove;
    regs.r[1] = rand() % (MAX_QUEUES + 1);
    regs.r[2] = (int)&m;
    regs.r[3] = buffsize;

    fprintf(log,"In -> Handle: %d, Remove: %d, Buffsize: %d\n",
      regs.r[1],regs.r[0],regs.r[3]);

    if ((er = _kernel_swi(MessageQueue_Receive,&regs,&regs)) != NULL)
    {
         fprintf(log,"0x%x, %s, basher line: %d\n",er->errnum,er->errmess,
           __LINE__);
         return;
    }

    fprintf(log,"Out -> R3: %d\n",regs.r[3]);
    fprintf(log,"       Message -> Size: %u, Sender_id: %u, Message_id: %u\n",
      m.sizeof_message,m.sender_id,m.message_id);

    fflush(log);

    if (buffsize > SIZEOF_HDR + 2)
    {
        fprintf(log,"       Message Data: start digit: %c\n",m.message_data[0]);

        prev_digit = m.message_data[0];

        if (regs.r[3] >= 0)
        {
            data_end = m.sizeof_message - SIZEOF_HDR;
        }
        else
        {
            data_end = buffsize - SIZEOF_HDR;
        }

        assert(data_end < MAX_MSG_DATA_SIZE);

        for (i = 1; i < data_end; i++)
        {
             if ((m.message_data[i] != prev_digit + 1)  &&
                ((prev_digit != '9') && (m.message_data[i] != '0')))
             {
             	  int j;
                  fprintf(log,"Unexpected message data.\n");
                  for (j=0; j<data_end; j++)
                  {
                      fprintf(log," %02x", m.message_data[j]);
                      if ((j&0xf) == 0xf)
                      	 fprintf(log,"\n");
                  }
                  fprintf(log,"\n");
                  return;
             }
             prev_digit = m.message_data[i];
        }

        fprintf(log,"       Message data checks out OK.\n");
    }
}

void status(FILE *log)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er;

    fputs("STATUS:",log);

    regs.r[0] = 0;
    regs.r[1] = rand() % (MAX_QUEUES + 1);

    fprintf(log,"In -> Handle: %d\n",regs.r[1]);

    if ((er = _kernel_swi(MessageQueue_Status,&regs,&regs)) != NULL)
    {
         fprintf(log,"0x%x, %s, basher line: %d\n",er->errnum,er->errmess,
           __LINE__);
         return;
    }

    fprintf(log,"Out -> Flags: %d, Next queue handle: %d, App id: %u\n",
      regs.r[0],regs.r[1],regs.r[2]);
    fflush(log);
    fprintf(log,"       QSize: %u, Msgsize (max): %u, Message count: %u\n",
      regs.r[3],regs.r[4],regs.r[5]);
    fflush(log);
    fprintf(log,"       Free space: %u, Size of largest message: %u\n",
      regs.r[6],regs.r[7]);
    fflush(log);
}

char itoc(int d)
{
  switch (d)
  {
    case 0: return '0';   case 5: return '5';
    case 1: return '1';   case 6: return '6';
    case 2: return '2';   case 7: return '7';
    case 3: return '3';   case 8: return '8';
    case 4: return '4';   case 9: return '9';
    default: printf("itoc() - unexpected entry\n");
  }

  return '9';
}


