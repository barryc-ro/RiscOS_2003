#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#define TRUE 1
#define FALSE 0
#define HEADER 24
#define MessageQueue_Register 0x52880
#define MessageQueue_Deregister 0x52881
#define MessageQueue_Send 0x52882
#define MessageQueue_Receive 0x52883

typedef struct
{
  unsigned int sizeof_message;
  unsigned int sender_id;
  unsigned int reserved;
  unsigned int flags;
  unsigned int message_id;
  signed int timestamp;
  char message_data[256];
} Message;

void register_mq(void);
void deregister_mq(void);
void send_message(void);
void receive_message(void);

int qhandle = 0;
int *pollword = NULL;

int main()
{
  unsigned int quit = FALSE;
  unsigned int option = 0;
  unsigned int bad_option = FALSE;

    do
    {
      puts("1. Register");
      puts("2. Deregister");
      puts("3. Send");
      puts("4. Receive");
      puts("5. Quit");

      if (bad_option == TRUE)
      {
          puts("Bad option");
          bad_option = FALSE;
      }

      printf("===> ");
      scanf("%u",&option);

      switch (option)
      {
        case 1:  register_mq();
                 break;
        case 2:  deregister_mq();
                 break;
        case 3:  send_message();
                 break;
        case 4:  receive_message();
                 break;
        case 5:  quit = TRUE;
                 break;
        default: bad_option = TRUE;
                 break;
      }

    } while (quit == FALSE);
}

/************************************************************************************/
/* Function:  register_mq()                                                         */
/************************************************************************************/
void register_mq(void)
{
  char dynamic_request = 'x';
  unsigned int size_of_queue = 0;
  unsigned int application_id = 0;
  unsigned int max = 0;
  char dummy;
  _kernel_swi_regs regs;
  _kernel_oserror *er;

    do
    {
      printf("Dynamic memory allocation? (y/n) ");
      scanf("%c%c",&dummy,&dynamic_request);
    } while ((dynamic_request != 'y') && (dynamic_request != 'n'));

    printf("Application identifier: ");
    scanf("%u",&application_id);

    printf("Size of queue (bytes)? ");
    scanf("%u",&size_of_queue);

    if (dynamic_request == 'y')
    {
        regs.r[0] = 1;
    }
    else
    {
        regs.r[0] = 0;
    }

    printf("Max size for a single message (0 -> no limit): ");
    scanf("%u",&max);

    puts("You asked for:");
    if (dynamic_request == 'y')
    {
        puts("Dymamic memory allocation");
    }
    else
    {
        puts("RMA memory allocation");
    }
    printf("Application id: %u\n",application_id);
    printf("Size of queue: %u\n",size_of_queue);
    printf("Max size for single message: %u\n",max);

    puts("Results:");

    regs.r[1] = application_id;
    regs.r[2] = size_of_queue;
    regs.r[3] = max;
    if ((er = _kernel_swi(MessageQueue_Register,&regs,&regs)) != NULL)
    {
         puts("Error -> ");
         printf("0x%x, %s\n",er->errnum,er->errmess);
    }
    else
    {
         qhandle = regs.r[1];
         pollword = (int *)regs.r[2];
    }

    if (regs.r[0])
    {
        puts("Dynamic allocation.");
    }
    else
    {
        puts("RMA allocation.");
    }

    printf("Message queue handle: %d\n",qhandle);
}

/************************************************************************************/
/* Function:  deregister_mq()                                                       */
/************************************************************************************/
void deregister_mq(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er = NULL;
  int h = -1;
  int flags = 0;

    printf("Queue handle: ");
    scanf("%d",&h);

    regs.r[0] = flags;
    regs.r[1] = h;
    if ((er = _kernel_swi(MessageQueue_Deregister,&regs,&regs)) != NULL)
    {
         puts("Error -> ");
         printf("0x%x, %s\n",er->errnum,er->errmess);
    }
    else
    {
         printf("Number of messages discarded: %d\n",regs.r[1]);
    }
}

/************************************************************************************/
/* Function:  send_message()                                                        */
/************************************************************************************/
void send_message(void)
{
  unsigned int flags = 0;
  _kernel_swi_regs regs;
  _kernel_oserror *er = NULL;
  int handle = -1;
  Message m;

    memset(m.message_data,0,256);

    printf("Destination (Q): ");
    scanf("%d",&handle);

    printf("Message data (256 max for now): ");
    scanf("%s",m.message_data);

    m.sizeof_message = strlen(m.message_data) + HEADER;

    printf("Sender id / application id: ");
    scanf("%u",&(m.sender_id));

    m.reserved = 0;
    m.flags = 0;

    printf("Message id: ");
    scanf("%u",&(m.message_id));

    regs.r[0] = flags;
    regs.r[1] = handle;
    regs.r[2] = (int)&m;
    if ((er = _kernel_swi(MessageQueue_Send,&regs,&regs)) != NULL)
    {
         puts("Error ->");
         printf("0x%x, %s\n",er->errnum,er->errmess);
    }
    else
    {
         puts("Message sent");
    }
}

/************************************************************************************/
/* Function:  receive_message()                                                     */
/************************************************************************************/
void receive_message(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *er = NULL;
  int handle = -1;
  Message m;
  char dummy;
  char remove = 'x';
  unsigned int flags = 0;
  int i;

    do
    { printf("Remove message if too big to collect? (y/n): ");
      scanf("%c%c",&dummy,&remove);
    } while ((remove != 'y') && (remove != 'n'));

    if (remove == 'y')
    {
        flags = 1;
    }

    printf("Which queue? (Q): ");
    scanf("%d",&handle);

    regs.r[0] = flags;
    regs.r[1] = handle;
    regs.r[2] = (int)&m;
    regs.r[3] = 256 + HEADER;
    if ((er = _kernel_swi(MessageQueue_Receive,&regs,&regs)) != NULL)
    {
         printf("Error: 0x%x, %s\n",er->errnum,er->errmess);
         return;
    }
    else
    {
         puts("Result:");
         printf("R3 decremented by size of message: %u\n",regs.r[3]);
         puts("Message fields as follows:");
         printf("  Size of message: %u\n",m.sizeof_message);
         printf("  Sender id (app'n id): %u\n",m.sender_id);
         printf("  Reserved (should be zero): %u\n",m.reserved);
         printf("  Flags: %u\n",m.flags);
         printf("  Message id: %u\n",m.message_id);
         printf("  Time stamp: %d\n",m.timestamp);
         printf("  Message data: ");
         for (i = 0; i < (m.sizeof_message - HEADER); putchar(m.message_data[i]),i++);
    }
    putchar('\n');
}
