;
;    Filename    : CatchErr
;
;    Author	 : R.W.Buckley
;    Date        : Fri 12th May 1995
;    Description : Hang off the ErrorV vector and set enviroment variables Error$Number and
;		   Error$Message variables if an error occurs.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Modification history:
;
;	Date		Initials	Description
;
;       06/07/95	RWB		Pass on the vector rather than claiming it.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
                GET     Hdr:ListOpts
		OPT	OptNoList
                GET     Hdr:Macros				; System wide macro definitions
                GET     Hdr:System				; SWIs and hardware specific declarations
                GET     Hdr:ModHand				; Module handler reason codes
                GET     Hdr:Symbols				; Constants TRUE, FALSE, VFlag etc
                GET     Hdr:Proc                		; ENTRY and EXIT macros

                LEADR   Module_LoadAddr

                GET     Version
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; global flags etc used by the module

flag_vector_claimed 		* 1:SHL:0			; set => indicates vector claimed

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; standard module declarations

module          & 0
                & init    -module                       	; => initalise routine
                & final   -module                       	; => finalise routine
                & 0	                       			; => service trap

                & title -module                         	; => title string
                & help  -module                         	; => help string
                & 0

                & 0						; => SWI base chunk
                & 0						; => code to handle swi calls
                & 0						; => table of supported SWIs
                & 0

title           = "CatchErr", 0

help            = "CatchErr", 9, "$VString ($Date) © Online Media", 0

                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; environment variable names

env_error_number = "Error$Number", 0
		 ALIGN

env_error_mess 	 = "Error$Message", 0
		 ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;

init		ENTRY

		MOV	r0, #ErrorV				; error vector
		ADR	r1, handle_error			; routine to call from vector
		MOV 	r2, r12					; workspace pointer to be passed in r12
		SWI	XOS_AddToVector				; do the call;

		MOV	r3, #0					; reset flags
		ORRVC	r3, r3, #flag_vector_claimed		; set bit in Flags to indicate vector claimed
		STR	r3, [r12]				; store flags in private word

                EXIT						; exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Handle module close down.
;

final		ENTRY

                LDR     r3, [r12]				; flags = private word
		TST	r3, #flag_vector_claimed		; check vector claimed bit
                MOVEQ	pc, r14					; exit if bit not set

		MOV	r0, #ErrorV				; error vector
		ADR	r1, handle_error			; routine to call from vector
		MOV 	r2, r12					; workspace pointer to be passed in r11
		SWI	XOS_Release				; try and release the vector

                EXIT						; exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle_error
;
; in  : r0 - pointer to error block
;
; Deal with requests coming from the ErrorV vector. This routine will set the two environment
; variables Error$Number and Error$Message

handle_error	ENTRY "r0-r4"

		MOV	r1, r0					; pointer to value ie error number
		ADR	r0, env_error_number			; variable name
		MOV	r2, #5					; length of value
		MOV	r3, #0
		MOV	r4, #1					; variable type (1 = number)
		SWI	XOS_SetVarVal

		ADD	r1, r1, #4				; string starts at byte 4

		ADR	r0, env_error_mess			; variable name
		MOV	r2, #256-4				; length of value
		MOV	r3, #0
		MOV	r4, #0					; variable type (0 = string)
		SWI	XOS_SetVarVal

                EXIT						; exit passing on the vector

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
