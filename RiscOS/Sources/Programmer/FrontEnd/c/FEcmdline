/* Title:     FEcmdline.c
 * Purpose:   constructing a cmd-line from dbox and menu
 * Author:    IDJ
 * History:   23-May-90: IDJ: created
 *            09-Jul-90: IDJ: struggled with no limit on cmdline length stuff
 *            31-Jan-91: IDJ: reduced cmdline lim by one to help avoid nasty crashes
 *            05-Mar-91: IDJ: use msgs.h
 *            19-Mar-91: IDJ: added prefix_by keyword for icons and menus
 *            28-Mar-91: IDJ: add one to ext cmdline size
 *
 *            Re-release
 *            07-Nov-91: IDJ: when not using ext. cmdline, pass " as "" to taskwindow
 *                            bug fix DDE-0850
 *            13-Nov-91: IDJ: correct use of wimp.h
 *            11-May-01: ADH: added support for quoted_string
 *
 */

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "dbox.h"
#include "werr.h"
#include "wimp.h"
#include "flex.h"
#include "help.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEtask.h"
#include "FEmem.h"
#include "utils.h"
#include "FEinterr.h"
#include "FEoptions.h"

#include "DDEswis.h"

#include "FEcmdline.h"



static void *FEcmdline__extended_cmdline = 0; /* buffer returned from SWI DDEUtils_SetCLSize */
static int FEcmdline__extcmdline_size = 0;    /* size of extended cmdline in RMA */
static int FEcmdline__dbox_cmdline_size = 0;  /* size of writeable icn in dbox */
static int FEcmdline__limit = 0;              /* limit on size of cmdline */

/*
 * Memo: IDJ: 1st June 90: There is a great deal of confusion caused by having
 *                         to deal with different methods of file output.  What we
 *                         need to do is:
 *                           1. see if output is to be generated at all!
 *                           2. if so if auto save is on we need to construct
 *                              a filename from the rule given in has_auto_save
 *                           3. if not auto save, construct filename from rule (to be
 *                              used as default in saveas box), and save to a
 *                              temporary file tmpnam(NULL).
 *
 */

/*
 * Memo: IDJ: 9th July 90: This always was a pile of crap, but now it's worse
 *                         because we try to deal with three cases:
 *                            - fixed 256-byte cmdline
 *                            - extended cmdline held in RMA
 *                            - writeable cmdline equivalent in dbox
 *                         For the second case, we first call FEcmdline_build
 *                         with size!=NULL to get the size of the cmdline
 *                         then we call it again(!) with size==0 to get the
 *                         actual string.
 *
 */


static void FEcmdline__xmit(char *cmdline);  /* forward declaration */

#define  FEcmdline_IRedo     0
#define  FEcmdline_ICmdLine  1

static void FEcmdline__add_to_string(char *string, char *text_to_add, int limit, int *size)
{
   if (size != 0)
   {
      *size += strlen(text_to_add);
      if (!(application.flags & AF_EXTENDED_CMDLINE) && !(application.flags & AF_MAKE))
      {
         /* IDJ: 07-Nov-91: special case to pass "s through to command line */
         /* bug fix DDE-0850 */
         /* " -> "" */
         char *t;

         for (t = text_to_add; *t != 0; t++)
             if (*t == '"') (*size)++;
      }
   }
   else
   {
      if (!(application.flags & AF_EXTENDED_CMDLINE) && !(application.flags & AF_MAKE))
      {
         char *s, *t;
         int nquotes = 0;

         for (t = text_to_add; *t != 0; t++)
             if (*t == '"') nquotes++;

         if (strlen(string) + strlen(text_to_add) + 1 + nquotes > limit)
         {
             werr(FALSE, msgs_lookup("FECmd1:String too long (limit %d current %d addition %d)"), limit, strlen(string), strlen(text_to_add));
             return;
         }

         for (s = string+strlen(string),t = text_to_add; *t != 0; *s++ = *t++)
             if (*t == '"') *s++ = *t;
         *s = 0;
      }
      else
      {
         if (strlen(string) + strlen(text_to_add) +1 > limit)
         {
             werr(FALSE, msgs_lookup("FECmd1:String too long (limit %d current %d addition %d)"), limit, strlen(string), strlen(text_to_add));
             return;
         }
         strncat(string, text_to_add, limit);
      }
   }
}


static void FEcmdline__process_icon(char *cmdline, Frontend_icon *i, int *size)
{
   assert(i != 0, "Zero pointer to icon");

   /* --- convert the icon into a cmd line string --- */
   if ((i->flags & IF_SELECTED) && !(i->flags & IF_EXTENDS))
   {
      Frontend_follow *f;

      /* --- look for no output producing option --- */
      if (i->flags & IF_PRODUCES_NO_OUTPUT)
      {
          application.flags |= AF_NO_OUTPUT;
      }
      else if (i->flags & IF_PRODUCES_OUTPUT)
      {
          application.flags &= ~AF_NO_OUTPUT;
      }

      /* --- add maps_to string to cmd line --- */
      FEcmdline__add_to_string(cmdline, i->maps_to, FEcmdline__limit, size);
      if (i->flags & IF_FOLLOWSPACES) FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);

      /* --- add any following stuff --- */
      f = i->followed_by;
      while (f != 0)
      {
         /* --- add contents of icon --- */
         if (f != i->followed_by && i->separator != '\0')
         {
            char temp[2];
            temp[0] = i->separator; temp[1] = 0;
            FEcmdline__add_to_string(cmdline, temp, FEcmdline__limit, size);
         }
         if (f->flags & IF_NUMBER)
         {
             char *temp;
             wimp_icon *wi;

             wi = icon_num_to_pointer("SetUp", f->follow);
             assert((wi->flags & wimp_INDIRECT), "Non-indirected text icon");
             temp = FEmem_alloc(wi->data.indirecttext.bufflen);
             dbox_getfield(application.setup->d, f->follow, temp, wi->data.indirecttext.bufflen);
             FEcmdline__add_to_string(cmdline, temp, FEcmdline__limit, size);
             FEmem_free(temp);
         }
         else  /* it was a string literal */
         {
             assert((f->flags & IF_STRING), "Non-string icon (expecting string)");
             FEcmdline__add_to_string(cmdline, f->string, FEcmdline__limit, size);
         }
         f = f->next;
      }

      FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
   }
   else if ((i->flags & IF_STRING) || (i->flags & IF_NUMBER))
   {
      char *temp;
      wimp_icon *wi;

      wi = icon_num_to_pointer("SetUp", i->number);
      assert((wi->flags & wimp_INDIRECT), "Non-indirected text icon");
      temp = FEmem_alloc(wi->data.indirecttext.bufflen);
      dbox_getfield(application.setup->d, i->number, temp, wi->data.indirecttext.bufflen);

      /* --- only deal with icon if non-null and not faded --- */
      if (temp[0] != 0 && !(i->flags & IF_FADED))
      {
         /* --- look for no output producing option --- */
         if (i->flags & IF_PRODUCES_NO_OUTPUT)
         {
             application.flags |= AF_NO_OUTPUT;
         }
         else if (i->flags & IF_PRODUCES_OUTPUT)
         {
             application.flags &= ~AF_NO_OUTPUT;
         }

         /* --- possibly prefixed by option string --- */
         if (i->maps_to != 0)
         {
             FEcmdline__add_to_string(cmdline, i->maps_to, FEcmdline__limit, size);
         }

         /* --- if adding double quotes, must escape any existing items --- */
         if ((i->flags & IF_QUOTED_STRING) != 0)
         {
            int count, src, dst;
            char *pos = temp;

            count = 0;

            while (*pos != 0)
            {
               if (*pos == '"') count++; /* one '\' for each '"' */
               pos++;
            }

            if (i->prefix_by)
            {
               count = count + strlen(temp) + 1; /* add string itself and terminator */
            }
            else
            {
               count = count + 2 + strlen(temp) + 1; /* add '"' at either end, string itself, and terminator */
            }

            temp = FEmem_realloc(temp, count);

            dst = count - 1; /* point at last byte in 'temp' buffer */
            src = strlen(temp) - 1; /* point at end of existing string (it's OK if this is empty) */

            temp[dst--] = '\0';

            if (i->prefix_by == 0) temp[dst--] = '"'; /* closing '"' */

            while (src >= 0) /* ...so if string is empty, src = -1 and we do nothing */
            {
               temp[dst] = temp[src];
               if (temp[src] == '"') temp[--dst] = '\\';

               src--, dst--;
            }

            if (i->prefix_by == 0) temp[0] = '"'; /* opening '"' */
         }

         /* --- add contents of icon --- */
         if (i->prefix_by)   /* prefix each element by given string */
         {
            char *save_p = temp, *p = temp;
            int len = strlen(temp);

            if ((i->flags & IF_QUOTED_STRING) != 0)
                FEcmdline__add_to_string(cmdline, "\"", FEcmdline__limit, size);

            while (p < temp+len)
            {
               if (*p > ' ')
               {
                  /* --- copy in the prefix_by string then the string itself --- */
                  save_p = p;
                  while (*p > ' ')
                     p++;
                  *p = 0;
                  FEcmdline__add_to_string(cmdline, i->prefix_by, FEcmdline__limit, size);
                  FEcmdline__add_to_string(cmdline, save_p, FEcmdline__limit, size);

                  /* If this is a quoted string, don't put a trailing space on the */
                  /* last item as that'd put the space before the closing quote.   */

                  if ((i->flags & IF_QUOTED_STRING) == 0 || p < temp+len)
                     FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
               }

               p++;
            }

            if ((i->flags & IF_QUOTED_STRING) != 0)
                FEcmdline__add_to_string(cmdline, "\" ", FEcmdline__limit, size);
         }
         else
         {
            FEcmdline__add_to_string(cmdline, temp, FEcmdline__limit, size);
            FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
         }
      }

      FEmem_free(temp);
   }

   assert(size != 0 || strlen(cmdline) < FEcmdline__limit, "Command line overflow");
}


static void FEcmdline__process_menu(char *cmdline, Frontend_menuentry *m, int *size)
{
   assert(m != 0, "Zero menu pointer");

   /* --- if entry is selected add its "maps_to" string to cmdline --- */
   if (m->flags & IF_SELECTED)
   {
      /* --- look for no output producing option --- */
      if (m->flags & IF_PRODUCES_NO_OUTPUT)
          application.flags |= AF_NO_OUTPUT;
      else if (m->flags & IF_PRODUCES_OUTPUT)
          application.flags &= ~AF_NO_OUTPUT;

      if (m->maps_to != 0)
          FEcmdline__add_to_string(cmdline, m->maps_to, FEcmdline__limit, size);

      /* --- followed by buffer if appropriate --- */
      if (m->buffer != 0)
      {

         /* --- add contents of buffer --- */
         if (m->prefix_by)   /* prefix each element by given string */
         {
            char *save_p = m->buffer, *p = m->buffer;
            char old_ch;
            int len = strlen(m->buffer);

            while (p < m->buffer+len)
            {
               while (*p == ' ' && p < m->buffer+len) p++;
               if (p >= m->buffer+len) break;
               if (*p > ' ')
               {
                  /* --- copy in the prefix_by string then the string itself --- */
                  save_p = p;
                  while (*p > ' ')
                     p++;
                  old_ch = *p;
                  *p = 0;
                  FEcmdline__add_to_string(cmdline, m->prefix_by, FEcmdline__limit, size);
                  FEcmdline__add_to_string(cmdline, save_p, FEcmdline__limit, size);
                  FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
                  *p = old_ch;
                  p++;
               }
               else
                 p++;
            }
         }
         else
            FEcmdline__add_to_string(cmdline, m->buffer, FEcmdline__limit, size);
      }
      FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
   }

   assert(size != 0 || strlen(cmdline) < FEcmdline__limit, "Command line overflow");
}


static void FEcmdline__dft_outfile(char *outfile)
{
   if (application.dft_output_name != 0)
      strcpy(outfile, application.dft_output_name);
   else
      strcpy(outfile, msgs_lookup("FECmd3:Output"));
}


static void FEcmdline__outfilename(char *outfile)
{
   char *buffer;
   char first_item[MAXFILENAME];
   char leafname[MAXFILENAME];
   char *p, *q;
   int tail, h;
   Frontend_dragto *i;
   wimp_icon ii;

   first_item[0] = leafname[0] = 0;

   /* --- get contents of icon which will give us leafname --- */
   wimpt_noerr(wimp_get_icon_info(dbox_syshandle(application.setup->d), application.setup->save_from, &ii));
   assert((ii.flags & wimp_INDIRECT) && (ii.flags & wimp_ITEXT), "non-indirected text icon");
   buffer = FEmem_alloc(ii.data.indirecttext.bufflen);
   dbox_getfield(application.setup->d, application.setup->save_from, buffer, ii.data.indirecttext.bufflen-1);

   /* --- if nothing's in the buffer, go back to default --- */
   if (buffer[0] <= 32)
   {
       FEcmdline__dft_outfile(outfile);
       FEmem_free(buffer);
       return;
   }

   /* --- extract first item --- */
   i = find_drag(application.setup->save_from);
   assert(i != 0, "Zero drag_to pointer");
   p = buffer;
   q = first_item;
   while (*p >= 32 && *p != i->separator)
   {
          *q++ = *p++;
   }
   *q = 0;

   /* --- extract the last component (leafname) --- */
   tail = strlen(first_item);
   while (first_item[tail] != '.' && first_item[tail] != ':' && tail > 0)
          tail--;
   if (application.flags & AF_LEAFNAME) strcpy(leafname, &first_item[tail+1]);
   first_item[tail+1] = 0;
   assert(strlen(leafname) < MAXFILENAME, "Leafname overflow");
   assert(strlen(first_item) < MAXFILENAME, "First_item overflow");

   /* --- add prefix/suffix if present, to leafname --- */
   if (application.setup->save_prefix)
   {
       int n = strlen(application.setup->save_prefix),
           m = strlen(leafname),
           j;
       for (j=m-1; j>=0; j--) leafname[n+j] = leafname[j];
       for (j=0; j<n; j++) leafname[j] = application.setup->save_prefix[j];
       leafname[n+m] = 0;
   }
   if (application.setup->save_suffix)
       strcat(leafname, application.setup->save_suffix);
   assert(strlen(leafname) < MAXFILENAME, "Leafname overflow");

   /* --- copy only the part of the pathname specified by num_hats --- */
   for (h=0; h<application.setup->num_hats; h++)
   {
      /* --- backtrack to a dot --- */
      int n = strlen(first_item)-2; /*skip past trailing dot/colon*/
      while (first_item[n] != '.' && first_item[n] != ':' && n > 0)
             n--;
      first_item[n+1] = 0;
   }
   assert(strlen(first_item) < MAXFILENAME, "First_item overflow");

   /* --- ... and finally make the output filename --- */
   strcpy(outfile, first_item);
   strcat(outfile, leafname);
   assert(strlen(outfile) < MAXFILENAME, "Outfile overflow");
   FEmem_free(buffer);
}


static void FEcmdline__outputoption(char *cmdline, char *tmpfile, char *outfile, int *size)
{
   if (application.setup->output_option != 0)
   {
      FEcmdline__add_to_string(cmdline, application.setup->output_option, FEcmdline__limit, size);
      FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
   }

   /* --- construct filename from rule --- */
   FEcmdline__outfilename(outfile);

   if (application.flags & AF_AUTOSAVE)
   {
      /* --- output straight to file --- */
      FEcmdline__add_to_string(cmdline, outfile, FEcmdline__limit, size);
      FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
   }
   else  /*saving to temporary file*/
   {
      /* --- output will be copied after saveas --- */
      strcpy(tmpfile, tmpnam(NULL));
      FEcmdline__add_to_string(cmdline, tmpfile, FEcmdline__limit, size);
      FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
   }

   assert(size != 0 || strlen(cmdline) < FEcmdline__limit, "Command line overflow");

}


static void FEcmdline__show_dbox(char *cmdline, char *tmpfile, char *outfile, char *icon_text)
{
   dbox d;
   wimp_icon wi;

   d = dbox_new("CmdLine");
   if (d == 0) return;

   /* --- attach raw event handler for interactive help --- */
   dbox_raw_eventhandler(d, help_dboxrawevents, "CMDLINE");

   wimp_get_icon_info(dbox_syshandle(d), FEcmdline_ICmdLine, &wi);
   assert((wi.flags & wimp_INDIRECT), "Non-indirected text icon");

   dbox_setfield(d, FEcmdline_ICmdLine, cmdline);
   dbox_setfield(d, FEcmdline_IRedo, icon_text);
   dbox_show(d);

   while (TRUE)
   {
      if (dbox_fillin(d) == FEcmdline_IRedo)
      {
         /* --- rerun the cmd --- */
         if (application.flags & AF_MAKE)
         {
            FEcmdline__xmit(wi.data.indirecttext.buffer);
            exit(EXIT_SUCCESS);   /* called from make so exit */
         }
         else
         {
            if (!(application.flags & AF_EXTENDED_CMDLINE))
               FEtask_request_taskwindow(wi.data.indirecttext.buffer, tmpfile, outfile, 0);
            else
            {
               char *c = wi.data.indirecttext.buffer;
               char *cmd_string;

               /* --- here we have to split cmdline appropriately --- */
               cmd_string = (application.command)?application.command:application.name;
               if (strstr(c, cmd_string) != c)
                  werr(FALSE, msgs_lookup("FECmd2:You cannot change the command used to run this tool"));
               else
               {
                  int size = 0;
                  _kernel_swi_regs r;
                  _kernel_oserror *e;
                  char *tail;

                  /* -- get some space from DDEUtils for the tail of the cmd --- */
                  c += strlen(cmd_string);
                  tail = c;
                  while (*c >= ' ' && c < wi.data.indirecttext.buffer + wi.data.indirecttext.bufflen)
                  {
                     size++;
                     c++;
                  }
                  *c = 0;

                  r.r[0] = size;
                  if ((e = _kernel_swi(DDEUtils_SetCLSize, &r, &r)) != 0)
                  {
                     werr(FALSE, "%s", e->errmess);
                  }
                  else
                  {
                     /* --- do it to me! --- */
                     FEtask_request_taskwindow(cmd_string, tmpfile, outfile, tail);
                  }
               }
            }
         }

         /* --- only close dbox if non-ADJUST click --- */
         if (!dbox_persist())
         {
            dbox_dispose(&d);
            break;
         }
      }
      else
         break;
   }

   return;
}


static void FEcmdline__build(char *cmdline, char *tmpfile, char *outfile, int *size, BOOL use_extcmdline)
{
   Frontend_icon *i;
   Frontend_menuentry *m;
   char *cmdbuf;

   cmdline[0] = 0;

   /* --- are we using an extended cmdline?? --- */
   if (use_extcmdline && (application.flags & AF_EXTENDED_CMDLINE) && !(application.flags & AF_MAKE))
   {
      /* --- we have already asked for an extended cmdline buffer of correct size --- */
      cmdbuf = FEcmdline__extended_cmdline;
   }
   else
   {
      cmdbuf = cmdline;
   }

   assert(cmdbuf != 0, "Zero cmdline pointer");
   cmdbuf[0] = 0;

   /* --- default operation whether to produce output --- */
   if (application.flags & AF_DFT_PRODUCES_OUTPUT)
      application.flags &= ~AF_NO_OUTPUT;
   else
      application.flags |= AF_NO_OUTPUT;

   /* --- enter the command name --- */
   if (!(application.flags & AF_MAKE))
   {
      if (application.flags & AF_EXTENDED_CMDLINE)
      {
            FEcmdline__add_to_string(cmdline, (application.command)?application.command:application.name, FEcmdline__limit, size);
            FEcmdline__add_to_string(cmdline, " ", FEcmdline__limit, size);
      }
      else
      {
         FEcmdline__add_to_string(cmdbuf, (application.command)?application.command:application.name, FEcmdline__limit, size);
         FEcmdline__add_to_string(cmdbuf, " ", FEcmdline__limit, size);
      }
   }

   /* --- ensure out and tmp files are null if not set up here --- */
   tmpfile[0] = 0;
   outfile[0] = 0;

   /* --- process the icons, then the menus, unless ordering constrained --- */
   if (application.ordering != 0 || (application.make_ordering != 0 && (application.flags & AF_MAKE)))
   {
      Frontend_orderentry *o;

      /* --- process things in the order given --- */
      o = (application.flags & AF_MAKE)?application.make_ordering:application.ordering;
      assert(o != 0, "Null order list");
      while (o != 0)
      {
         if (o->type == IS_ICON)
         {
             i = find_icon(o->data.number);
             assert(i != 0, "Zero icon pointer");
             FEcmdline__process_icon(cmdbuf, i, size);
         }
         else if (o->type == IS_MENU)
         {
             m = find_menuentry(o->data.number+1);
             assert(m != 0, "Zero menu pointer");
             FEcmdline__process_menu(cmdbuf, m, size);
         }
         else  if (o->type == IS_STRING)
         {
             assert(o->data.string != 0, "Zero string pointer in order list");
             FEcmdline__add_to_string(cmdbuf, o->data.string, FEcmdline__limit, size);
             FEcmdline__add_to_string(cmdbuf, " ", FEcmdline__limit, size);
         }
         else  /* IS_OUTPUT */
         {
            if (!(application.flags & AF_NO_OUTPUT))
                FEcmdline__outputoption(cmdbuf, tmpfile, outfile, size);
         }

         o = o->next;
      }
   }
   else  /*no ordering*/
   {
      /* --- go through icon list --- */
      i = application.setup->icons;
      while (i != 0)
      {
         FEcmdline__process_icon(cmdbuf, i, size);
         i = i->next;
      }

      /* --- go through menu entries --- */
      m = application.setup->menu.entries;
      while (m != 0)
      {
         FEcmdline__process_menu(cmdbuf, m, size);
         m = m->next;
      }

      /* ---  output name - (temporary if no auto-save) --- */
      if (!(application.flags & AF_NO_OUTPUT) && !(application.flags & AF_MAKE))
          FEcmdline__outputoption(cmdbuf, tmpfile, outfile, size);
   }

   assert(size != 0 || strlen(cmdbuf) < FEcmdline__limit, "Command line overflow");
}


extern void FEcmdline_run(void)
{
   char cmdline[MAXCMDLINE];
   char tmpfile[MAXFILENAME];
   char outfile[MAXFILENAME];
   _kernel_swi_regs r;
   _kernel_oserror *e;


   /* --- reset extended cmdline, 0 ==> no ext cmd line used --- */
   FEcmdline__extended_cmdline = 0;
   FEcmdline__extcmdline_size = 0;

   if (application.flags & AF_EXTENDED_CMDLINE)
   {
      /* --- count how much space we need for extended cmdline --- */
      FEcmdline__build(cmdline, tmpfile, outfile, &FEcmdline__extcmdline_size, FALSE);
      FEcmdline__extcmdline_size++;

      /* --- request cmdline space from DDEUtils --- */
      r.r[0] = FEcmdline__extcmdline_size;
      if ((e = _kernel_swi(DDEUtils_SetCLSize, &r, &r)) != 0)
      {
         werr(FALSE, "%s", e->errmess);
         return;
      }
      else
         FEcmdline__extended_cmdline = (char *)r.r[0];   /* DDEUtils has reserved me this space */

      assert(FEcmdline__extended_cmdline != 0, "Zero cmdline pointer");
   }

   /* --- set cmdline limit value --- */
   FEcmdline__limit = (application.flags & AF_EXTENDED_CMDLINE)?FEcmdline__extcmdline_size:FEcmdline__dbox_cmdline_size;

   /* --- build the command line --- */
   FEcmdline__build(cmdline, tmpfile, outfile, 0, (application.flags & AF_EXTENDED_CMDLINE)?TRUE:FALSE);

   /* --- run it in a task window --- */
   FEtask_request_taskwindow(cmdline, tmpfile, outfile, FEcmdline__extended_cmdline);
}


static void FEcmdline__xmit(char *cmdline)
{
   Frontend_msg_cmdline msg;

   /* --- send it back to make --- */
   msg.hdr.your_ref = 0;
   msg.hdr.action = (wimp_msgaction) MSG_FrontEnd_Cmdline;
   msg.handle = app_handle;
   assert(strlen(application.name) < 12, "App name too long to xmit");
   assert(strlen(cmdline) < 220, "Cmdline too long to xmit");
   strcpy(msg.application_name, application.name);
   strncpy(msg.cmdline, cmdline, 220);
   msg.cmdline[219] = 0;
   msg.hdr.size = sizeof(wimp_msgstr);
   wimpt_noerr(wimp_sendmessage(wimp_ESEND, (wimp_msgstr *)&msg, task_id));

   /* --- ... and save these choices in !Make's innards --- */
   FEoptions_savechoices(make_choicesname, TRUE);
}


extern void FEcmdline_send(void)
{
   char cmdline[MAXCMDLINE];
   char tmpfile[MAXFILENAME];
   char outfile[MAXFILENAME];

   /* --- build the command line --- */
   FEcmdline__limit = 220;
   FEcmdline__build(cmdline, tmpfile, outfile, 0, FALSE);

   /* --- send it back to make --- */
   FEcmdline__xmit(cmdline);
}


extern void FEcmdline_show_cmdrun(Frontend_outputwin *out)
{
   char *cmdline, *extcmdline, *tmpfile, *outfile, *whole_cmdline;

   cmdline = FEtask_get_cmdline(out);
   extcmdline = FEtask_get_extcmdline(out);

   if (extcmdline == 0)
      whole_cmdline = cmdline;
   else
   {
      whole_cmdline = FEmem_alloc(strlen(cmdline)+1+strlen(extcmdline)+1);
      sprintf(whole_cmdline, "%s %s", cmdline, extcmdline);
   }

   if (whole_cmdline != 0)
   {
        tmpfile = FEtask_get_tmpfile(out);
        outfile = FEtask_get_outfile(out);
        FEcmdline__show_dbox(whole_cmdline, tmpfile, outfile, msgs_lookup("FECmd4:ReRun"));
   }

   if (whole_cmdline != cmdline) FEmem_free(whole_cmdline);
}


extern void FEcmdline_show_equivalent(void)
{
   wimp_icon *wi;
   char tmpfile[MAXFILENAME];
   char outfile[MAXFILENAME];
   char *cmdline;

   wi = icon_num_to_pointer("CmdLine", FEcmdline_ICmdLine);
   assert((wi->flags & wimp_INDIRECT), "Non-indirected text icon");
   cmdline = wi->data.indirecttext.buffer;

   FEcmdline__limit = FEcmdline__dbox_cmdline_size - 1;
   FEcmdline__build(cmdline, tmpfile, outfile, 0, FALSE);
   FEcmdline__show_dbox(cmdline, tmpfile, outfile, (application.flags & AF_MAKE)?msgs_lookup("FECmd5:OK"):msgs_lookup("FECmd6:Run"));
}

extern void FEcmdline_init(void)
{
   wimp_icon *wi;

   /* --- establish limit on cmdline cacheing in dbox --- */
   wi = icon_num_to_pointer("CmdLine", FEcmdline_ICmdLine);
   assert((wi->flags & wimp_INDIRECT), "Non-indirected text icon");
   FEcmdline__dbox_cmdline_size = wi->data.indirecttext.bufflen;
}


