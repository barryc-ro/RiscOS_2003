/* Title:    utils.c
 * Purpose:  general utility functions
 * Author:   IDJ
 * History:  22-May-90: IDJ: Created
 *           21-Jun-90: IDJ: added wildcarding
 *           27-Jun-90: IDJ: added fieldlength, find_writeable
 *           18-May-01: ADH: on/off select/deselect/include/exclude support
 *
 */

#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "template.h"
#include "dbox.h"
#include "werr.h"
#include "flex.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEmem.h"
#include "FEinterr.h"

#include "utils.h"

#define DIRECTORY   0x1000
#define APPLICATION 0x2000

/* Local variables */

static BOOL          initialised  = FALSE;
static int           ihigh        = -1;
static signed char * i_grey_count = NULL;
static int           mhigh        = -1;
static signed char * m_grey_count = NULL;

/* Define the below to output a debug file to the named location */

#undef  LOCAL_TRACING
#define TRACE_LOCATION "Mem::Sprites.$.FEDebug"

#ifdef LOCAL_TRACING
   #include <stdio.h>
#endif

extern int cistrcmp(const char *s1, const char *s2)
{
  int ch1, ch2;
  for (;;) {
    ch1 = *s1++;  ch2 = *s2++;
    /* care here for portability... don't rely on ANSI spec */
    if (isupper(ch1)) ch1 = tolower(ch1);
    if (isupper(ch2)) ch2 = tolower(ch2);
    if (ch1 != ch2) return ch1-ch2;
    if (ch1 == 0) return 0;
  }
}


extern wimp_icon *icon_num_to_pointer(char *dbox_name, int icon_number)
{
   template *t;
   wimp_wind *w;

   t = template_find(dbox_name);
   w = &t->window;
   return (((wimp_icon *)(w + 1)) + icon_number);
}

extern Frontend_dragto *find_drag(int icn)
{
   Frontend_dragto *d = application.setup->drags;

   while (d != 0)
   {
      if (d->drag == icn) return d;
      else d = d->next;
   }
   return 0;
}

extern Frontend_icon *find_icon(int icn)
{
   Frontend_icon *i = application.setup->icons;

   while (i != 0)
   {
      if (i->number == icn) return i;
      else i = i->next;
   }
   return 0;
}

extern Frontend_menuentry *find_menuentry(int entry)
{
   Frontend_menuentry *e = application.setup->menu.entries;

   while (e != 0)
   {
      if (e->number == entry) return e;
      else e = e->next;
   }
   return 0;
}

extern void add_char(char *s, char c)
{
   int len = strlen(s);

   s[len] = c;
   s[len+1] = '\0';
}

static void do__setnumeric(Frontend_icon *i, dbox d, dbox_field f, int val)
{
   if ((i->flags & IF_NUMBER) != 0)
   {
     int current = dbox_getnumeric(d, f);
     if (current != val) dbox_setnumeric(d, f, val);
   }
   else
   {
     if ((((i->flags & IF_SELECTED) != 0) && val == 0) || (((i->flags & IF_SELECTED) == 0) && val != 0))
         dbox_setnumeric(d, f, !!val);
   }

   return;
}

static void do__setfield(dbox d, dbox_field f, char *p)
{
   if (*p == '\0')
   {
      char current[4]; /* Just some small value - we're interested only if the string is NUL */

      dbox_getfield(d, f, current, sizeof(current));
      if (*current == '\0') return;
   }

   dbox_setfield(d, f, p);
   return;
}

/* --- note that this assumes it is called for icons only in the SetUp window */
static void do__fadefield(Frontend_icon *i, dbox d, dbox_field f)
{
   if ((i->flags & IF_FADED) == 0)
   {
      wimp_caretstr cs;

      /* --- is caret in this icon? --- */
      if (wimp_get_caret_pos(&cs) == NULL)
      {
         if (cs.i == (wimp_i) f)
         {
            /* --- yes; since we don't know what other items bay be faded, just hide the caret --- */

            cs.i = -1;
            cs.x = 0;
            cs.y = 0;
            cs.index = -1;

            wimp_set_caret_pos(&cs);
         }
      }
      dbox_fadefield(d, f);
   }

   return;
}

static void do__unfadefield(Frontend_icon *i, dbox d, dbox_field f)
{
   if ((i->flags & IF_FADED) != 0) dbox_unfadefield(d, f);
   return;
}


/*
 * General self-initialisation. For initial dialogue box setup,
 * assume all items are switched off.
 */

static void do__rules_init(void)
{
   Frontend_icon      * icurrent;
   Frontend_menuentry * mcurrent;
   unsigned int         amount;

   /* Ensure all arrays are freed to start with */

   FEmem_free(i_grey_count), i_grey_count = NULL;
   FEmem_free(m_grey_count), m_grey_count = NULL;

   /* Find out the highest icon number */

   icurrent = application.setup->icons;
   ihigh    = -1;

   if (icurrent != NULL)
   {
      while (icurrent != NULL)
      {
         if (icurrent->number > ihigh) ihigh = icurrent->number;
         icurrent = icurrent->next;
      }

      /* Allocate space for the grey count array */

      amount = (ihigh + 1) * sizeof(char);
      i_grey_count = FEmem_alloc(amount); /* (this guarantees it will return a valid pointer or will bail out itself) */
      memset(i_grey_count, 0, amount);
   }

   /* Similar thing for menu entries */

   mcurrent = application.setup->menu.entries;
   mhigh    = -1;

   if (mcurrent != NULL)
   {
      while (mcurrent != NULL)
      {
         if (mcurrent->number > mhigh) mhigh = mcurrent->number;
         mcurrent = mcurrent->next;
      }

      amount = (mhigh + 1) * sizeof(Frontend_menuentry *);
      m_grey_count = FEmem_alloc(amount);
      memset(m_grey_count, 0, amount);
   }

   return;
}

/*
 * Unwind or run the given list of exclude rules.
 */

static void do__exclude_rules(Frontend_exclusion * excl,
                              BOOL                 unwind)
{
   Frontend_icon      * icurrent;
   Frontend_menuentry * mcurrent;

   for (; excl != NULL; excl = excl->next)
   {
      if (excl->menu_or_icon == IS_ICON)
      {
         icurrent = find_icon(excl->exclude);
         if (icurrent == NULL || icurrent->number > ihigh) continue;

         if (unwind)
         {
            if (i_grey_count[icurrent->number] >  -126) i_grey_count[icurrent->number]--;
            if (i_grey_count[icurrent->number] == 0)    i_grey_count[icurrent->number] = -1;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Unwind exclude rule for icon %02d to give count %03d\n", icurrent->number, i_grey_count[icurrent->number]);
               fclose(fi);}}
            #endif
         }
         else
         {
            if (i_grey_count[icurrent->number] <  126) i_grey_count[icurrent->number]++;
            if (i_grey_count[icurrent->number] == 0)   i_grey_count[icurrent->number] = 1;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run exclude rule for icon %02d to give count %03d\n", icurrent->number, i_grey_count[icurrent->number]);
               fclose(fi);}}
            #endif
         }
      }
      else
      {
         mcurrent = find_menuentry(excl->exclude);
         if (mcurrent == NULL || mcurrent->number > mhigh) continue;

         if (unwind)
         {
            if (m_grey_count[mcurrent->number] >  -126) m_grey_count[mcurrent->number]--;
            if (m_grey_count[mcurrent->number] == 0)    m_grey_count[mcurrent->number] = -1;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Unwind exclude rule for menu entry %02d to give count %03d\n", mcurrent->number, m_grey_count[mcurrent->number]);
               fclose(fi);}}
            #endif
         }
         else
         {
            if (m_grey_count[mcurrent->number] <  126) m_grey_count[mcurrent->number]++;
            if (m_grey_count[mcurrent->number] == 0)   m_grey_count[mcurrent->number] = 1;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run exclude rule for menu entry %02d to give count %03d\n", mcurrent->number, m_grey_count[mcurrent->number]);
               fclose(fi);}}
            #endif
         }
      }
   }

   return;
}

#ifdef INCLUDES_AS_INCLUDES

   /*
    * Unwind or run the given list of include rules.
    */

   static void do__include_rules(Frontend_inclusion * incl,
                                 BOOL                 unwind)
   {
      Frontend_icon      * icurrent;
      Frontend_menuentry * mcurrent;

      for (; incl != NULL; incl = incl->next)
      {
         if (incl->menu_or_icon == IS_ICON)
         {
            icurrent = find_icon(incl->include);
            if (icurrent == NULL || icurrent->number > ihigh) continue;

            if (unwind)
            {
               if (i_grey_count[icurrent->number] <  126) i_grey_count[icurrent->number]++;
               if (i_grey_count[icurrent->number] == 0)   i_grey_count[icurrent->number] = 1;

               #ifdef LOCAL_TRACING
                  {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
                  fprintf(fi, "Unwind include rule for icon %02d to give count %03d\n", icurrent->number, i_grey_count[icurrent->number]);
                  fclose(fi);}}
               #endif
            }
            else
            {
               if (i_grey_count[icurrent->number] >  -126) i_grey_count[icurrent->number]--;
               if (i_grey_count[icurrent->number] == 0)    i_grey_count[icurrent->number] = -1;

               #ifdef LOCAL_TRACING
                  {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
                  fprintf(fi, "Run include rule for icon %02d to give count %03d\n", icurrent->number, i_grey_count[icurrent->number]);
                  fclose(fi);}}
               #endif
            }
         }
         else
         {
            mcurrent = find_menuentry(incl->include);
            if (mcurrent == NULL || mcurrent->number > mhigh) continue;

            if (unwind)
            {
               if (m_grey_count[mcurrent->number] <  126) m_grey_count[mcurrent->number]++;
               if (m_grey_count[mcurrent->number] == 0)   m_grey_count[mcurrent->number] = 1;

               #ifdef LOCAL_TRACING
                  {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
                  fprintf(fi, "Unwind include rule for menu entry %02d to give count %03d\n", mcurrent->number, m_grey_count[mcurrent->number]);
                  fclose(fi);}}
               #endif
            }
            else
            {
               if (m_grey_count[mcurrent->number] >  -126) m_grey_count[mcurrent->number]--;
               if (m_grey_count[mcurrent->number] == 0)    m_grey_count[mcurrent->number] = -1;

               #ifdef LOCAL_TRACING
                  {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
                  fprintf(fi, "Run include rule for menu entry %02d to give count %03d\n", mcurrent->number, m_grey_count[mcurrent->number]);
                  fclose(fi);}}
               #endif
            }
         }
      }

      return;
   }

#endif

/*
 * Take the counts in the i_grey_count and m_grey_count arrays
 * and echo the results to the dialogue box.
 */

static void do__echo_count_results(void)
{
   Frontend_icon      * icurrent;
   Frontend_menuentry * mcurrent;
   int                  item;

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "Echo count results: Called\n");
      fclose(fi);}}
   #endif

   for (item = 0; item <= ihigh; item++)
   {
      icurrent = find_icon(item);
      if (icurrent == NULL) continue;

      #ifdef LOCAL_TRACING
         {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
         fprintf(fi, "Icon %02d count is %03d\n", item, i_grey_count[item]);
         fclose(fi);}}
      #endif

      if (i_grey_count[item] < 0 && (icurrent->flags & IF_FADED) != 0)
      {
         do__unfadefield(icurrent, application.setup->d, icurrent->number);
         icurrent->flags &= ~IF_FADED;
      }
      else if (i_grey_count[item] > 0 && (icurrent->flags & IF_FADED) == 0)
      {
         do__fadefield(icurrent, application.setup->d, icurrent->number);
         icurrent->flags |= IF_FADED;
      }
   }

   for (item = 0; item <= mhigh; item++)
   {
      mcurrent = find_menuentry(item);
      if (mcurrent == NULL) continue;

      #ifdef LOCAL_TRACING
         {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
         fprintf(fi, "Menu entry %02d count is %03d\n", item, m_grey_count[item]);
         fclose(fi);}}
      #endif

      if (m_grey_count[item] < 0)
      {
         mcurrent->flags &= ~IF_FADED;
      }
      else if (m_grey_count[item] > 0)
      {
         mcurrent->flags |= IF_FADED;
      }
   }

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "Echo count results: Finished\n");
      fclose(fi);}}
   #endif
}

/* This recursively runs rules putting the results into one of two arrays for
 * icons and two arrays for menu entries. Whenever a selection rule is run, the
 * routine calls itself recursively to run the 'on' rules for each item named
 * in the selection rule that is currently 'off', in turn; whenever a deselection
 * rule is run, the item calls itself recursively to run the 'off' rules for
 * any item currently 'on'.
 *
 * Rule evaluation order is, for the case where we're called for the 'on' rules
 * at the top level:
 *
 * 1) Unwind exclusions previously run for the item.
 * 2) Unwind inclusions previously run for the item.
 * 3) Run selection rules, with recursive call back.
 * 4) Run deselection rules, with recursive call back.
 * 5) Run exclusions for the item.
 * 6) Run inclusions for the item.
 *
 * The "_off" variants are run if parameter 'off' is TRUE.
 *
 * In addition to the two local arrays for menu entries and icons, the grey count
 * arrays are updated. Since selection and deselection rules are only run
 * recursively for items that aren't in the state to which the rule applies,
 * infinite recursion is inherently impossible.
 */

static void do__resolve_actions_in_array(void * i_m, int icon_or_menu, BOOL off,

                                         Frontend_icon      ** isel,
                                         Frontend_icon      ** idesel,

                                         Frontend_menuentry ** msel,
                                         Frontend_menuentry ** mdesel)
{
   Frontend_deselection * desel;
   Frontend_selection   * sel;
   Frontend_exclusion   * excl;

   Frontend_icon        * icurrent;
   Frontend_menuentry   * mcurrent;

   #ifdef INCLUDES_AS_INCLUDES
      Frontend_inclusion * incl;
   #endif

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "Resolve actions: Called with &%08X for %s %d\n", (int) i_m, icon_or_menu == IS_ICON ? "icon" : "menuentry", icon_or_menu == IS_ICON ? ((Frontend_icon *)i_m)->number : ((Frontend_menuentry *)i_m)->number);
      fprintf(fi, "Resolve actions: Running %s rules\n", off ? "OFF" : "ON");
      fclose(fi);}}
   #endif

   /* Unwind this item's exclusion/inclusion rules. If the item is being
    * switched on, it must presently be switched off, in which case we
    * need to unwind its _off rules - and vice versa.
    */

   /* Unwind exclusions */

   if (icon_or_menu == IS_ICON)
      excl = !off ? ((Frontend_icon *)i_m)->exclusions_off : ((Frontend_icon *)i_m)->exclusions;
   else
      excl = !off ? ((Frontend_menuentry *)i_m)->exclusions_off : ((Frontend_menuentry *)i_m)->exclusions;

   do__exclude_rules(excl, TRUE);

   #ifdef INCLUDES_AS_INCLUDES

      /* Unwind inclusions */

      if (icon_or_menu == IS_ICON)
         incl = !off ? ((Frontend_icon *)i_m)->inclusions_off : ((Frontend_icon *)i_m)->inclusions;
      else
         incl = !off ? ((Frontend_menuentry *)i_m)->inclusions_off : ((Frontend_menuentry *)i_m)->inclusions;

      do__include_rules(incl, TRUE);

   #endif

   /* Run the selection rules */

   if (icon_or_menu == IS_ICON)
      sel = off ? ((Frontend_icon *)i_m)->selections_off : ((Frontend_icon *)i_m)->selections;
   else
      sel = off ? ((Frontend_menuentry *)i_m)->selections_off : ((Frontend_menuentry *)i_m)->selections;

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      if (sel) fprintf(fi, "Selection rules to run are at &%08X\n", (int) sel);
      else fprintf(fi, "No selection rules to run\n");
      fclose(fi);}}
   #endif

   for (; sel != NULL; sel = sel->next)
   {
      if (sel->menu_or_icon == IS_ICON)
      {
         icurrent = find_icon(sel->select);
         if (icurrent == NULL || icurrent->number > ihigh) continue;

         if ((icurrent->flags & IF_SELECTED) == 0)
         {
            isel  [icurrent->number] = icurrent;
            idesel[icurrent->number] = NULL;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run selection rule for icon %d, go recursive\n", icurrent->number);
               fclose(fi);}}
            #endif

            do__resolve_actions_in_array((void *) icurrent, IS_ICON, FALSE,
                                         isel, idesel,
                                         msel, mdesel);
         }
      }
      else
      {
         mcurrent = find_menuentry(sel->select + 1);
         if (mcurrent == NULL || mcurrent->number > mhigh) continue;

         if ((mcurrent->flags & IF_SELECTED) == 0)
         {
            msel  [mcurrent->number] = mcurrent;
            mdesel[mcurrent->number] = NULL;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run selection rule for menu entry %d, go recursive\n", mcurrent->number);
               fclose(fi);}}
            #endif

            do__resolve_actions_in_array((void *) mcurrent, IS_MENU, FALSE,
                                         isel, idesel,
                                         msel, mdesel);
         }
      }
   }

   /* Run the deselection rules */

   if (icon_or_menu == IS_ICON)
      desel = off ? ((Frontend_icon *)i_m)->deselections_off : ((Frontend_icon *)i_m)->deselections;
   else
      desel = off ? ((Frontend_menuentry *)i_m)->deselections_off : ((Frontend_menuentry *)i_m)->deselections;

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      if (desel) fprintf(fi, "Deselection rules to run are at &%08X\n", (int) desel);
      else fprintf(fi, "No deselection rules to run\n");
      fclose(fi);}}
   #endif

   for (; desel != NULL; desel = desel->next)
   {
      if (desel->menu_or_icon == IS_ICON)
      {
         icurrent = find_icon(desel->deselect);
         if (icurrent == NULL || icurrent->number > ihigh) continue;

         if ((icurrent->flags & IF_SELECTED) != 0)
         {
            isel  [icurrent->number] = NULL;
            idesel[icurrent->number] = icurrent;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run deselection rule for icon %d, go recursive\n", icurrent->number);
               fclose(fi);}}
            #endif

            do__resolve_actions_in_array((void *) icurrent, IS_ICON, TRUE,
                                         isel, idesel,
                                         msel, mdesel);
         }
      }
      else
      {
         mcurrent = find_menuentry(desel->deselect + 1);
         if (mcurrent == NULL || mcurrent->number > mhigh) continue;

         if ((mcurrent->flags & IF_SELECTED) != 0)
         {
            msel  [mcurrent->number] = NULL;
            mdesel[mcurrent->number] = mcurrent;

            #ifdef LOCAL_TRACING
               {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
               fprintf(fi, "Run deselection rule for menu entry %d, go recursive\n", mcurrent->number);
               fclose(fi);}}
            #endif

            do__resolve_actions_in_array((void *) mcurrent, IS_MENU, TRUE,
                                         isel, idesel,
                                         msel, mdesel);
         }
      }
   }

   /* Run the exclusion rules */

   if (icon_or_menu == IS_ICON)
      excl = off ? ((Frontend_icon *)i_m)->exclusions_off : ((Frontend_icon *)i_m)->exclusions;
   else
      excl = off ? ((Frontend_menuentry *)i_m)->exclusions_off : ((Frontend_menuentry *)i_m)->exclusions;

   do__exclude_rules(excl, FALSE);

   #ifdef INCLUDES_AS_INCLUDES

      /* Run the inclusion rules */

      if (icon_or_menu == IS_ICON)
         incl = off ? ((Frontend_icon *)i_m)->inclusions_off : ((Frontend_icon *)i_m)->inclusions;
      else
         incl = off ? ((Frontend_menuentry *)i_m)->inclusions_off : ((Frontend_menuentry *)i_m)->inclusions;

      do__include_rules(incl, FALSE);

   #endif

   /* Finished updating the arrays; return either back to further
    * rules processing, or to the external caller that will now
    * use the array contents to update the front-end.
    */

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "Resolve actions: Exit\n");
      fclose(fi);}}
   #endif

   return;
}

/*
 * Run the include/exclude/selection/deselection rules associated
 * with an icon or menu being switched on or off.
 */

static void do__actions(void * i_m, int icon_or_menu, BOOL off)
{
   /* This gets quite volved, though overall, it's straightforward */

   unsigned int          amount;
   int                   item;

   Frontend_icon       * icurrent;
   Frontend_icon      ** isel   = NULL;
   Frontend_icon      ** idesel = NULL;

   Frontend_menuentry  * mcurrent;
   Frontend_menuentry ** msel   = NULL;
   Frontend_menuentry ** mdesel = NULL;

   /* Initialised? */

   if (!initialised)
   {
      initialised = TRUE;
      do__rules_init();
   }

   /* Allocate various arrays */

   if (ihigh >= 0)
   {
      amount = (ihigh + 1) * sizeof(Frontend_icon *);
      isel   = FEmem_alloc(amount); /* (this guarantees it will return a valid pointer or will bail out itself) */
      idesel = FEmem_alloc(amount);

      memset(isel,   0, amount);
      memset(idesel, 0, amount);
   }

   if (mhigh >= 0)
   {
      amount = (mhigh + 1) * sizeof(Frontend_menuentry *);
      msel   = FEmem_alloc(amount);
      mdesel = FEmem_alloc(amount);

      memset(msel,   0, amount);
      memset(mdesel, 0, amount);
   }

   /* Run the rules */

   _swix(Hourglass_On, 0);

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "** Outer call for resolve, %s %d\n", icon_or_menu == IS_ICON ? "icon" : "menuentry", icon_or_menu == IS_ICON ? ((Frontend_icon *)i_m)->number : ((Frontend_menuentry *)i_m)->number);
      fprintf(fi, "** Highest icon number: %d\n", ihigh);
      fprintf(fi, "** Highest menu entry : %d\n", mhigh);
      fclose(fi);}}
   #endif

   do__resolve_actions_in_array(i_m, icon_or_menu, off,
                                isel, idesel,
                                msel, mdesel);

   #ifdef LOCAL_TRACING
      {FILE * fi = fopen(TRACE_LOCATION, "a"); if (fi != NULL){
      fprintf(fi, "** Outer call returned\n");
      fclose(fi);}}
   #endif

   _swix(Hourglass_Off, 0);

   /* Deal with the contents of the selections, deselections and count arrays */

   for (item = 0; item <= ihigh; item++)
   {
      icurrent = idesel[item];

      if (icurrent != NULL)
      {
          if ((icurrent->flags & IF_NUMBER) || !(icurrent->flags & (IF_STRING|IF_ARROWUP|IF_ARROWDOWN)))
              do__setnumeric(icurrent, application.setup->d, icurrent->number, 0);
          else if ((icurrent->flags & IF_STRING) != 0) /* string */
              do__setfield(application.setup->d, icurrent->number, "");

          icurrent->flags &= ~IF_SELECTED;
      }

      icurrent = isel[item];

      if (icurrent != NULL)
      {
          if (!(icurrent->flags & (IF_STRING|IF_ARROWUP|IF_ARROWDOWN|IF_NUMBER)))
              do__setnumeric(icurrent, application.setup->d, icurrent->number, 1);

          icurrent->flags |= IF_SELECTED;
      }
  }

   for (item = 0; item <= mhigh; item++)
   {
      mcurrent = mdesel[item];
      if (mcurrent != NULL) mcurrent->flags &= ~IF_SELECTED;

      mcurrent = msel[item];
      if (mcurrent != NULL) mcurrent->flags |= IF_SELECTED;
   }

   /* Bring dialogue box grey/ungrey state up to date */

   do__echo_count_results();

   /* Release memory claimed for the temporary arrays */

   if (ihigh >= 0)
   {
      FEmem_free(isel);
      FEmem_free(idesel);
   }

   if (mhigh >= 0)
   {
      FEmem_free(msel);
      FEmem_free(mdesel);
   }

   /* Done. Hurrah. */

   return;
}

extern void do_on_actions(void *i_m, int icon_or_menu)
{
   do__actions(i_m, icon_or_menu, FALSE);
}

extern void do_off_actions(void *i_m, int icon_or_menu)
{
   do__actions(i_m, icon_or_menu, TRUE);
}


extern void do_make_exclusions(void)
{
   Frontend_icon *i = application.setup->icons;
   Frontend_menuentry *m = application.setup->menu.entries;

   /* --- first the icons --- */
   while (i != 0)
   {
      if (i->flags & IF_MAKE_EXCLUDES)
      {
         do__fadefield(i, application.setup->d, i->number);
         i->flags |= IF_FADED;
      }
      i = i->next;
   }

   /* --- then the menu entries --- */
   while (m != 0)
   {
      if (m->flags & IF_MAKE_EXCLUDES) m->flags |= IF_FADED;
      m = m->next;
   }
}

extern void do_inserts(int icn, char *filename, int type, BOOL setcaret)
{
   Frontend_dragto *d;
   char save_filename[MAXFILENAME];

   strcpy(save_filename, filename);

   /* --- for directories we add wild card string --- */
   if ((type == DIRECTORY || type == APPLICATION) && application.setup->wild_card != 0)
   {
      add_char(save_filename, '.');
      strcat(save_filename, application.setup->wild_card);
   }

   d = find_drag(icn);
   if (d == 0) d = find_drag(ANY_ICON);

   if (d != 0)
   {
      Frontend_insert *ins;
      wimp_icon ii;

      /* --- insert filename into "insert list" icons, separated --- */
      ins = d->inserts;
      while (ins != 0)
      {
         char *buffer;

         wimp_get_icon_info(dbox_syshandle(application.setup->d), ins->insert, &ii);
         buffer = FEmem_alloc(ii.data.indirecttext.bufflen);

         buffer[0] = 0;
         dbox_getfield(application.setup->d, ins->insert, buffer, ii.data.indirecttext.bufflen);

         /* --- check for buffer overflow --- */

         if (strlen(buffer) + strlen(save_filename) >= ii.data.indirecttext.bufflen)
         {
            werr(FALSE, msgs_lookup("utils1:Field is too long"));
         }
         else
         {
            if (buffer[0] >= 32)
            {
               if (d->separator != '\0')
               {
                   add_char(buffer, d->separator);
                   strcat(buffer, save_filename);
               }
               else
                   strcpy(buffer, save_filename);
            }
            else
               strcpy(buffer, save_filename);
            dbox_setfield(application.setup->d, ins->insert, buffer);

            /* --- put caret at end of writeable icon --- */
            if (setcaret)
                set_caret(dbox_syshandle(application.setup->d), ins->insert);
         }

         FEmem_free(buffer);

         ins = ins->next;
      }
   }
}

extern BOOL delete_object(char *object)
{
   _kernel_swi_regs r;

   if (object == 0) return TRUE;  /* play it safe !! */

   r.r[0] = 27;             /* wipe object */
   r.r[1] = (int)object;  /* temp. filename */
   r.r[3] = 0x02 | 0x01;    /* force/recurse (in case directory) */
   r.r[4] = r.r[5] = r.r[6] = r.r[7] = 0;

   return (_kernel_swi(OS_FSControl, &r, &r) == 0);
}


extern BOOL rename_object(char *from, char *to)
{
   _kernel_swi_regs r;

   r.r[0] = 25;             /* rename */
   r.r[1] = (int)from;
   r.r[2] = (int)to;

   return (_kernel_swi(OS_FSControl, &r, &r) == 0);
}


extern BOOL copy_object_with_delete(char *from, char *to)
{
   _kernel_swi_regs r;
   _kernel_oserror *e;

   /* NB we don't use delete-source bit on copy, in case copy of directory fails! */

   r.r[0] = 26;             /* copy object */
   r.r[1] = (int)from;
   r.r[2] = (int)to;
   r.r[3] = 0x40 | 0x02 | 0x01;  /* prompt-for-media-change/force/recurse(in case directory!) */

   e = _kernel_swi(OS_FSControl, &r, &r);

   /* now do the delete (testing if the copy worked!) */
   if (e == 0)
       return delete_object(from);
   else
   {
       werr(FALSE, msgs_lookup("utils2:Save failed %s -> %s"), from, to);
       werr(FALSE, "%s", e->errmess);
       return FALSE;
   }
}


extern BOOL find_writeable(char *name, wimp_w wh, wimp_i *i)
{
   wimp_icon *wi;
   template *t;
   wimp_wind *w;

   t = template_find(name);
   w = &t->window;

   for (*i=0; *i<w->nicons; (*i)++)
   {
      wi = ((wimp_icon *)(w + 1)) + *i;
      if (is_writeable_indirecttext(wi))
      {
          wimp_icon is;

          wimp_get_icon_info(wh, *i, &is);
          if (!(is.flags & wimp_INOSELECT))
             return TRUE;
      }
   }
   return FALSE;
}


extern int fieldlength(wimp_w w, wimp_i i)
{
   wimp_icon wi;
   int len = 0;

   wimpt_noerr(wimp_get_icon_info(w, i, &wi));
   while (wi.data.indirecttext.buffer[len] >=32) len++;

   return len;
}


extern void set_caret(wimp_w w, wimp_i i)
{
   wimp_caretstr c;
   c.i = i;
   c.x = 0;
   c.y = 0;
   c.height = -1;
   c.w = w;
   c.index = fieldlength(w, i);
   wimpt_noerr(wimp_set_caret_pos(&c));
}


extern void stralloc(char **dst, char *src)
{
   if ((*dst = FEmem_alloc(strlen(src)+1)) != 0)
        strcpy(*dst, src);
}
