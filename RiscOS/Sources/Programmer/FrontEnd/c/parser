/* Title:    parser.c
 * Purpose:  RD parsing of an application description
 * Author:   IDJ
 * History:  09-Apr-90: IDJ: Created
 *           21-May-90: IDJ: added IF_ARROWUP/DOWN flags
 *           19-Jun-90: IDJ: big addition:  added choices parsing
 *           19-Mar-91: IDJ: added menu and icon prefix_by
 *
 *           Re-release
 *           04-Nov-91: IDJ: bug-fix to DDE-0846 to allow tokens of any length
 *
 *           11-May-01: ADH: added support for quoted_string in icns, and ctrl_chars
 *                           <escape | hide | text> plus tab_width <number> in the
 *                           metaoptions
 *
 */

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "slist.h"
#include "lexer.h"
#include "gen.h"
#include "bool.h"
#include "FEoptions.h"
#include "FEinterr.h"
#include "FEmem.h"

#include "parser.h"


/* --- errors --- */
#define perr_internal       "internal error (parser): %s"
#define perr_expected       "expected %s but found %s"
#define perr_cant_open      "failed to open %s"
#define perr_eof            "unexpected <eof> expecting %s"

/* --- exported data --- */
FILE *fp;

/* --- private data --- */
static lexer_token token = {};
static lexer_token lookahead = {};

/* --- forward declarations for RD routines --- */
static void parser__RD_dbox(void);
static void parser__RD_menu(void);
static void parser__RD_icons(void);
static void parser__RD_rdsei(int enforce1, int enforce2);
static void parser__RD_make_exclusions(void);
static void parser__RD_imports(void);
static void parser__RD_import(void);
static void parser__RD_optentry(BOOL off);
static void parser__RD_orderis(BOOL order_is);

/* ---------------------------------------- general routines ------------------------------- */
static void parser__error(BOOL wimp_init, char *s, ...)
{
   _kernel_oserror e;
   va_list a;

   (void) wimp_init; /* No longer needed - pending command window anyway and Wimp_ReportError is allowed */

   va_start(a, s);

   /* Try to report the error with a Wimp error box. If that fails,
    * try to print it with OS_PrettyPrint to get word wrapping when
    * inside narrow displays / command windows. If that fails, use
    * printf.
    */

   e.errnum = 0;

   /* Yes, this is not very satisfactory - it assumes the message will
    * fit... But we're about to call exit() anyway ;-)
    */

   sprintf(e.errmess, "FrontEnd (line %d): ", line_number);
   vsprintf(e.errmess + strlen(e.errmess), s, a);
   e.errmess[sizeof(e.errmess) - 1] = '\0';

   if (
         _swix(Wimp_ReportError,
               _INR(0,5),

               &e,
               (1u<<8) | (3u<<9),
               application.name != NULL && *application.name != '\0' ? application.name : 0,
               0,
               0,
               "Quit")

         != NULL
      )
   {
      if (_swix(OS_PrettyPrint, _INR(0,2), e.errmess, 0, NULL) != NULL)
         printf("%s\n", e.errmess);
      else
         printf("\n");
   }

   va_end(a);
   exit(EXIT_FAILURE);       /* --- no attempt at error recovery --- */
}


static BOOL parser__checkfor(int shouldbe)
{
   BOOL result;
#if VARIABLE_LENGTH_TOKENS
   lexer_copy_token(&token, &lookahead);
#else
   token = lookahead;
#endif
#if VARIABLE_LENGTH_TOKENS
   if (token.number == s_unknown) lexer_next_token(&token);
#else
   if (token.number == s_unknown) token = lexer_next_token();
#endif
   if (token.number == s_eof) parser__error(FALSE,perr_eof, lexer_tokenstrings[shouldbe]);
   if (token.number == shouldbe) result =  TRUE;
   else
   {
      parser__error(FALSE,perr_expected, lexer_tokenstrings[shouldbe], token.lexeme);
      result = FALSE;
   }
#if VARIABLE_LENGTH_TOKENS
   lexer_next_token(&lookahead);
#else
   lookahead = lexer_next_token();
#endif
   return result;
}


static BOOL parser__match_2(int maybe1, int maybe2)
{
#if VARIABLE_LENGTH_TOKENS
   lexer_copy_token(&token, &lookahead);
#else
   token = lookahead;
#endif
#if VARIABLE_LENGTH_TOKENS
   if (token.number == s_unknown) lexer_next_token(&token);
#else
   if (token.number == s_unknown) token = lexer_next_token();
#endif
   if (token.number == maybe1 || token.number == maybe2)
   {
#if VARIABLE_LENGTH_TOKENS
      lexer_next_token(&lookahead);
#else
      lookahead = lexer_next_token();
#endif
      return TRUE;
   }
   else
      return FALSE;
}


static BOOL parser__match(int maybe)
{
#if VARIABLE_LENGTH_TOKENS
   lexer_copy_token(&token, &lookahead);
#else
   token = lookahead;
#endif
#if VARIABLE_LENGTH_TOKENS
   if (token.number == s_unknown) lexer_next_token(&token);
#else
   if (token.number == s_unknown) token = lexer_next_token();
#endif
   if (token.number == maybe)
   {
#if VARIABLE_LENGTH_TOKENS
      lexer_next_token(&lookahead);
#else
      lookahead = lexer_next_token();
#endif
      return TRUE;
   }
   else
      return FALSE;
}


/* ----------------------------------------- parsing the description ----------------------- */
static void parser__RD_application(void)
{
   /* --- mandatory tool details section --- */
   parser__checkfor(s_tool_details_start);

   /* --- the application's name --- */
   parser__checkfor(s_name);
   parser__checkfor(s_string_value);
   gen_appname(&token);
   parser__checkfor(s_semicolon);

   /* --- optional command name --- */
   if (parser__match(s_command_is))
   {
      parser__checkfor(s_string_value);
      gen_appcommand(&token);
      parser__checkfor(s_semicolon);
   }

   /* --- the version string --- */
   parser__checkfor(s_version);
   parser__checkfor(s_string_value);
   gen_version(&token);
   parser__checkfor(s_semicolon);

   /* --- filetype of input files --- */
   if (parser__match(s_filetype))
   {
       parser__checkfor(s_number_value);
       gen_filetype(&token);
       parser__checkfor(s_semicolon);
   }

   /* --- generate dialogue box structure --- */
   gen_dbox();

   /* --- minimum application size --- */
   if (parser__match(s_wimpslot))
   {
       parser__checkfor(s_number_value);
       gen_wimpslot(&token);
       parser__checkfor(s_k);
       parser__checkfor(s_semicolon);
   }

   /* --- does it use extended command line --- */
   if (parser__match(s_has_extended_cmdline))
   {
      gen_extended_cmdline();
      parser__checkfor(s_semicolon);
   }

   parser__checkfor(s_tool_details_end);

   /* --- optional metaoptions section --- */
   if (parser__match(s_metaoptions_start))
   {

      /* --- does it have auto-run --- */
      if (parser__match(s_has_auto_run))
      {
         if (parser__match(s_on))
             gen_setautorun(&token);
         parser__checkfor(s_semicolon);
         gen_autorun();
      }

      /* --- does it have auto-save --- */
      if (parser__match(s_has_auto_save))
      {
         int num_hats = 0;

         gen_autosave();

         if (parser__match(s_on))
             gen_setautosave(&token);

         while (parser__match(s_hat))
         {
             num_hats++;
             parser__checkfor(s_dot);
         }
         if (num_hats != 0) gen_numhats(num_hats);

         if (parser__match(s_string_value))
         {
            gen_saveprefix(&token);
         }

         if (parser__match(s_leafname))
             gen_leafname();

         if (parser__match(s_string_value))
         {
            gen_savesuffix(&token);
         }

         parser__checkfor(s_from);
         parser__checkfor(s_icn);
         parser__checkfor(s_number_value);
         gen_savefrom(&token);
         parser__checkfor(s_semicolon);
      }

      /* --- has it got a text output window ? --- */
      if (parser__match(s_has_text_window))
      {
         gen_outputwindow();
         parser__checkfor(s_semicolon);
      }

      /* --- has it got a summary window ? --- */
      if (parser__match(s_has_summary_window))
      {
          gen_summarywindow();
          parser__checkfor(s_semicolon);
      }

      /* --- what is the default display --- */
      if (parser__match(s_display_dft_is))
      {
         if (parser__match_2(s_summary, s_text))
             gen_displaydft(&token);
         parser__checkfor(s_semicolon);
      }

      /* --- escape or hide control characters when redrawing ? --- */
      if (parser__match(s_ctrl_chars))
      {
         if (parser__match_2(s_hide, s_escape) || parser__match(s_text))
             gen_ctrlchars(&token);
         parser__checkfor(s_semicolon);
      }

      /* --- tab width --- */
      if (parser__match(s_tab_width))
      {
         parser__checkfor(s_number_value);
         gen_tabwidth(&token);
         parser__checkfor(s_semicolon);
      }

      parser__checkfor(s_metaoptions_end);
   }

   /* --- optional fileoutput section --- */
   if (parser__match(s_fileoutput_start))
   {

      /* --- what is the output option --- */
      if (parser__match(s_output_option_is))
      {
          parser__checkfor(s_string_value);
          gen_outputoption(&token);
          parser__checkfor(s_semicolon);
      }

      /* --- default output file name --- */
      if (parser__match(s_output_dft_string))
      {
          parser__checkfor(s_string_value);
          gen_outname(&token);
          parser__checkfor(s_semicolon);
      }

      /* --- does it produce output by default --- */
      if (parser__match(s_output_dft_is))
      {
          if (parser__match(s_produces_output) || parser__match(s_produces_no_output))
              gen_produces_output_dft(&token);
          parser__checkfor(s_semicolon);
      }


      parser__checkfor(s_fileoutput_end);
   }

   /* --- the window descriptions --- */
   if (parser__match(s_dbox_start))
   {
       parser__RD_dbox();
       parser__checkfor(s_dbox_end);
   }

   /* --- extra menu options --- */
   if (parser__match(s_menu_start))
       parser__RD_menu();

   /* --- selections --- */
   if (parser__match(s_selections_start))
       parser__RD_rdsei(s_select, s_selects);

   /* --- deselections --- */
   if (parser__match(s_deselections_start))
       parser__RD_rdsei(s_deselect, s_deselects);

   /* --- inclusions --- */
   if (parser__match(s_inclusions_start))
       parser__RD_rdsei(s_include, s_includes);

   /* --- exclusions --- */
   if (parser__match(s_exclusions_start))
       parser__RD_rdsei(s_exclude, s_excludes);

   /* --- rules --- */
   if (parser__match(s_rules_start))
       parser__RD_rdsei(s_unknown, s_unknown);

   /* --- things excluded by make --- */
   if (parser__match(s_make_excludes))
       parser__RD_make_exclusions();

   /* --- ordering on command-line (non-make) --- */
   if (parser__match(s_order_is))
       parser__RD_orderis(FALSE);

   /* --- ordering on command-line for make --- */
   if (parser__match(s_make_order_is))
       parser__RD_orderis(TRUE);
}


static void parser__RD_icondefaults(void)
{
   int icn;

   do
   {
      parser__checkfor(s_icn);
      parser__checkfor(s_number_value);
      icn = token.value.integer;
      if (parser__match(s_on) || parser__match(s_off)
        ||parser__match(s_string_value) || parser__match(s_number_value))
          gen_icondefaults(&token, icn);
      else parser__error(FALSE,perr_expected, "icon default", token.lexeme);

   } while (parser__match(s_comma));

   parser__checkfor(s_semicolon);

   /* --- defaults for use in makefile (if different from above) --- */
   if (parser__match(s_make_defaults))
   {
      do
      {
         parser__checkfor(s_icn);
         parser__checkfor(s_number_value);
         icn = token.value.integer;
         if (parser__match(s_on) || parser__match(s_off)
           ||parser__match(s_string_value) || parser__match(s_number_value))
             gen_make_icondefaults(&token, icn);
         else parser__error(FALSE,perr_expected, "icon default", token.lexeme);
      } while (parser__match(s_comma));

      parser__checkfor(s_semicolon);
   }
}


static void parser__RD_dbox(void)
{
   /* --- icon defn's --- */
   parser__checkfor(s_icons_start);
   parser__RD_icons();
   if (parser__match(s_defaults))
       parser__RD_icondefaults();

   if (parser__match(s_imports_start))
       parser__RD_imports();
}


static void parser__RD_menudefaults(void)
{
   int m;

   do
   {
      parser__checkfor(s_menu);
      parser__checkfor(s_number_value);
      m = token.value.integer;
      if (parser__match(s_on) || parser__match(s_off))
          gen_menudefaults(&token, m);
      else
          parser__error(FALSE,perr_expected, "menu default", token.lexeme);
      if (parser__match(s_sub_menu))
      {
         if (parser__match_2(s_string_value, s_number_value))
             gen_sub_menudefaults(&token, m);
         else
            parser__error(FALSE,perr_expected, "submenu default", token.lexeme);
      }

   } while (parser__match(s_comma));

   parser__checkfor(s_semicolon);

   /* --- defaults for use in makefile (if different from above) --- */
   if (parser__match(s_make_defaults))
   {
      do
      {
         parser__checkfor(s_menu);
         parser__checkfor(s_number_value);
         m = token.value.integer;
         if (parser__match(s_on) || parser__match(s_off))
             gen_make_menudefaults(&token, m);
         else
             parser__error(FALSE,perr_expected, "menu default", token.lexeme);
         if (parser__match(s_sub_menu))
         {
            if (parser__match_2(s_string_value, s_number_value))
                gen_make_sub_menudefaults(&token, m);
            else
                parser__error(FALSE,perr_expected, "submenu default", token.lexeme);
         }
      } while (parser__match(s_comma));

      parser__checkfor(s_semicolon);
   }
}


static void parser__RD_menu(void)
{
   BOOL off;

   while (!parser__match(s_menu_end))
   {
      if (parser__match(s_defaults))
      {
          parser__RD_menudefaults();
      }
      else if (parser__checkfor(s_string_value))
      {
         gen_menuentry();
         gen_addmenutext(&token);

         if (parser__match(s_on)) off = FALSE;
         else if (parser__match(s_off)) off = TRUE;
         else off = FALSE;

         parser__checkfor(s_maps_to);
         parser__checkfor(s_string_value);

         if (off) gen_menumapsto_off(&token);
         else gen_menumapsto(&token);

         if (parser__match(s_sub_menu))
         {
             parser__checkfor(s_string_value);
             gen_subtext(&token);

             parser__checkfor(s_number_value);
             gen_menubufsize(&token);

             if (parser__match(s_prefix_by))
             {
                parser__checkfor(s_string_value);
                gen_menu_prefix(&token);
             }
         }

         if (parser__match(s_produces_no_output))
         {
             gen_menuproducesnooutput();
         }
         else if (parser__match(s_produces_output))
         {
             gen_menuproducesoutput();
         }

         if (parser__match(s_not_saved))
         {
             gen_menunotsaved();
         }

         parser__checkfor(s_semicolon);
      }
      else
          parser__error(FALSE,perr_expected, "menu entry or defaults", token.lexeme);
   }
}


static void parser__RD_icons(void)
{
   int icn_num;
   BOOL off;

   while (!parser__match(s_icons_end))
   {
      parser__checkfor(s_icn);
      parser__checkfor(s_number_value);
      icn_num = token.value.integer;
      gen_icon(&token);

      if (parser__match(s_on)) off = FALSE;
      else if (parser__match(s_off)) off = TRUE;
      else off = FALSE;

      if (parser__match(s_maps_to))
      {
         if (parser__match(s_string_value))
         {
            if (off)
               gen_mapstring_off(&token);
            else
               gen_mapstring(&token);
         }

         if (parser__match_2(s_string, s_number) || parser__match(s_quoted_string))
         {
            gen_conversion(&token);
         }

         if (parser__match(s_prefix_by))
         {
            parser__checkfor(s_string_value);
            gen_icon_prefix(&token);
         }

         if (parser__match(s_followed_by))
         {
            if (parser__match(s_spaces))
            {
                if (off) gen_followiconspaces_off();
                else gen_followiconspaces();
            }

            parser__RD_optentry(off);
            while (parser__match(s_comma))
                parser__RD_optentry(off);

            if (parser__match(s_separator_is))
            {
               parser__checkfor(s_string_value);
               if (off) gen_separator_off(&token);
               else gen_separator(&token);
            }
         }

         if (parser__match(s_produces_no_output))
         {
             gen_iconproducesnooutput();
         }
         else if (parser__match(s_produces_output))
         {
             gen_iconproducesoutput();
         }

         if (parser__match(s_not_saved))
         {
             gen_iconnotsaved();
         }
      }
      else if (parser__match(s_increases))
      {
          parser__checkfor(s_icn);
          parser__checkfor(s_number_value);
          gen_changesicon(&token, IF_ARROWUP);
          if (parser__match(s_by))
          {
              parser__checkfor(s_number_value);
              gen_by(&token);
          }
          if (parser__match(s_min))
          {
             parser__checkfor(s_number_value);
             gen_minval(&token);
          }
          if (parser__match(s_max))
          {
              parser__checkfor(s_number_value);
              gen_maxval(&token);
          }
      }
      else if (parser__match(s_decreases))
      {
          parser__checkfor(s_icn);
          parser__checkfor(s_number_value);
          gen_changesicon(&token, IF_ARROWDOWN);
          if (parser__match(s_by))
          {
              parser__checkfor(s_number_value);
              gen_by(&token);
          }
          if (parser__match(s_min))
          {
             parser__checkfor(s_number_value);
             gen_minval(&token);
          }
          if (parser__match(s_max))
          {
              parser__checkfor(s_number_value);
              gen_maxval(&token);
          }
      }
      else if (parser__match(s_inserts))
      {
          parser__checkfor(s_string_value);
          gen_insertliteral(&token);
      }
      else if (parser__match(s_extends))
      {
          gen_extends(icn_num);
          parser__checkfor(s_from);
          parser__checkfor(s_icn);
          parser__checkfor(s_number_value);
          gen_extendsfrom(&token);
          parser__checkfor(s_to);
          parser__checkfor(s_icn);
          parser__checkfor(s_number_value);
          gen_extendsto(&token);
      }
      else
          parser__error(FALSE,perr_expected, "maps_to, increases or decreases", token.lexeme);

      parser__checkfor(s_semicolon);
   }
}


static void parser__RD_optentry(BOOL off)
{
   if (parser__match_2(s_icn, s_string_value))
   {
      if (token.number == s_icn)
          parser__checkfor(s_number_value);
   }
   else
      parser__error(FALSE,perr_expected, "follow item", token.lexeme);
   gen_followicon(&token, off);
}


/* Handle rules / deselections / selections / exclusions / inclusions
 * sections, allowing any of those rule types inside any of those
 * sections.
 *
 * The two parameters are used to enforce the presence of the rule
 * keyword. They should be the singular and plural form of the rule
 * keyword, in either order (e.g. 's_select, s_selects'). If neither
 * is present when expected, the parser will complain about the lack
 * of the first one you give.
 *
 * If you don't care (e.g. for a rules_start...rules_end section),
 * pass 's_unknown' in both parameters. Now the parser will only
 * complain if none of the recognised rule keywords are present.
 */

static void parser__RD_rdsei(int enforce1, int enforce2)
{
   /* Pointers to the gen.c routines to call for a given rule */

   gen_icon_dsei_ptr     icon_dsei;
   gen_icon_dsei_ptr     menu_dsei;
   gen_icon_dsei_ptr     icon_dsei_off;
   gen_icon_dsei_ptr     menu_dsei_off;

   /* Hold a list of items to which the rule should be applied */

   Frontend_parserlist * at      = NULL;
   Frontend_parserlist * curat;
   Frontend_parserlist * newat;

   /* Hold a list of the items listed by the rule */

   Frontend_parserlist * rl      = NULL;
   Frontend_parserlist * currl;
   Frontend_parserlist * newrl;

   /* General working variables */

   BOOL                  off;
   BOOL                  is_icon = FALSE;
   int                   rule, temp;

   /* We don't care if this is a rules section, or a section named
    * to hold a specific type of rule - it's all treated the same.
    * This means the [de]selections_[start|end], [in|ex]clusions_
    * [start|end] and rules_[start|end] tokens are now synonymous.
    */

   while (
            !parser__match  (s_rules_end)                          &&
            !parser__match_2(s_selections_end, s_deselections_end) &&
            !parser__match_2(s_inclusions_end, s_exclusions_end)
         )
   {
      /* Build a list of menu entries or icons with which the rule will be associated */

      do
      {
         /* Icon or menu? */

         if (parser__match(s_icn))
            is_icon = TRUE;
         else if (parser__match(s_menu))
            is_icon = FALSE;
         else
            parser__error(FALSE,perr_expected, "menu or icn", token.lexeme);

         parser__checkfor(s_number_value);
         temp = token.value.integer;

         /* On or off? */

         if      (parser__match(s_off)) off = TRUE;
         else if (parser__match(s_on))  off = FALSE;
         else off = FALSE;

         /* Add the item to the list */

         newat = FEmem_alloc(sizeof(Frontend_parserlist));
         newat->is_icon = is_icon ? 1 : 0;
         newat->off     = off     ? 1 : 0;
         newat->number  = temp;

         at = slist_addend(at, (void *) newat);

      } while (parser__match(s_comma));

      /* Find the rule type */

      if (enforce1 != s_unknown && enforce2 != s_unknown)
      {
         /* I.e. if neither enforce1 or enforce2 is present, complain
          * about enforce1.
          */

         if (!parser__match_2(enforce1, enforce2)) parser__checkfor(enforce1);

         /* Otherwise, use the first rule keyword (either of them will do) */

         rule = enforce1;
      }
      else
      {
         if      (parser__match_2(s_select,   s_selects))   rule = s_selects;
         else if (parser__match_2(s_deselect, s_deselects)) rule = s_deselects;
         else if (parser__match_2(s_include,  s_includes))  rule = s_includes;
         else if (parser__match_2(s_exclude,  s_excludes))  rule = s_excludes;
         else                                               rule = s_unknown;
      }

      /* From this, work out what gen.c functions to call */

      switch (rule)
      {
         case s_select:
         case s_selects:
            icon_dsei     = gen_icon_selects;
            menu_dsei     = gen_menu_selects;
            icon_dsei_off = gen_icon_selects_off;
            menu_dsei_off = gen_menu_selects_off;
            break;

         case s_deselect:
         case s_deselects:
            icon_dsei     = gen_icon_deselects;
            menu_dsei     = gen_menu_deselects;
            icon_dsei_off = gen_icon_deselects_off;
            menu_dsei_off = gen_menu_deselects_off;
            break;

         case s_include:
         case s_includes:
            #ifndef INCLUDES_AS_INCLUDES
               icon_dsei     = gen_icon_excludes_off;
               menu_dsei     = gen_menu_excludes_off;
               icon_dsei_off = gen_icon_excludes;
               menu_dsei_off = gen_menu_excludes;
            #else
               icon_dsei     = gen_icon_includes;
               menu_dsei     = gen_menu_includes;
               icon_dsei_off = gen_icon_includes_off;
               menu_dsei_off = gen_menu_includes_off;
            #endif
            break;

         case s_exclude:
         case s_excludes:
            icon_dsei     = gen_icon_excludes;
            menu_dsei     = gen_menu_excludes;
            icon_dsei_off = gen_icon_excludes_off;
            menu_dsei_off = gen_menu_excludes_off;
            break;

         default:
            parser__error(FALSE,
                          perr_expected,
                          "select(s), deselect(s), include(s) or exclude(s)",
                          token.lexeme);
            return;
      }

      /* Now have to read all the things listed by the rule */

      do
      {
         if (parser__match(s_icn))
            is_icon = TRUE;
         else if (parser__match(s_menu))
            is_icon = FALSE;
         else
            parser__error(FALSE,perr_expected, "menu or icn", token.lexeme);

         parser__checkfor(s_number_value);
         temp = token.value.integer;

         /* Add the item to the list */

         newrl = FEmem_alloc(sizeof(Frontend_parserlist));
         newrl->is_icon = is_icon ? 1 : 0;
         newrl->off     = 0; /* Not relevant */
         newrl->number  = temp;

         rl = slist_addend(rl, (void *) newrl);

      } while (parser__match(s_comma));

      parser__checkfor(s_semicolon);

      /* Now go through the list of items built previously */

      curat = at;

      while (curat != NULL)
      {
         /* Tell the gen.c routines what icon we're working on */

         if (curat->is_icon) gen_icon_setdsei(curat->number);
         else                gen_menu_setdsei(curat->number);

         /* Add the rules to this item */

         currl = rl;

         while (currl != NULL)
         {
            if (curat->is_icon)
            {
               if (curat->off)
                  (icon_dsei_off)(currl->number, currl->is_icon ? IS_ICON : IS_MENU);
               else
                  (icon_dsei)(currl->number, currl->is_icon ? IS_ICON : IS_MENU);
            }
            else
            {
               if (curat->off)
                  (menu_dsei_off)(currl->number, currl->is_icon ? IS_ICON : IS_MENU);
               else
                  (menu_dsei)(currl->number, currl->is_icon ? IS_ICON : IS_MENU);
            }

            /* Next item to add to the current menu entry or icon */

            currl = currl->next;
         }

         /* Get next item to be added to */

         curat = curat->next;
      }

      /* Free up the temporary lists ready for the next rule declaration */

      while (at->next != NULL)
      {
         curat = at->next;
         free(at);
         at = curat;
      }

      free(at), at = NULL;

      while (rl->next != NULL)
      {
         currl = rl->next;
         free(rl);
         rl = currl;
      }

      free(rl), rl = NULL;
   }
}


static void parser__RD_make_exclusions(void)
{
   if (parser__match(s_icn))
   {
       parser__checkfor(s_number_value);
       gen_make_excludes(&token, IS_ICON);
   }
   else if (parser__match(s_menu))
   {
       parser__checkfor(s_number_value);
       gen_make_excludes(&token, IS_MENU);
   }
   else
      parser__error(FALSE,perr_expected, "menu or icn", token.lexeme);

   while(parser__match(s_comma))
   {
      if (parser__match(s_icn))
      {
          parser__checkfor(s_number_value);
          gen_make_excludes(&token, IS_ICON);
      }
      else if (parser__match(s_menu))
      {
          parser__checkfor(s_number_value);
          gen_make_excludes(&token, IS_MENU);
      }
      else
         parser__error(FALSE,perr_expected, "menu or icn", token.lexeme);
   }
   parser__checkfor(s_semicolon);
}


static void parser__RD_orderentry(BOOL make_order)
{
   if (parser__match_2(s_menu, s_icn))
   {
       if (token.number == s_menu)
       {
           parser__checkfor(s_number_value);
           gen_orderis(&token, IS_MENU, make_order);
       }
       else  /* s_icn */
       {
           parser__checkfor(s_number_value);
           gen_orderis(&token, IS_ICON, make_order);
       }
   }
   else if (parser__match(s_string_value))
   {
      gen_orderis(&token, IS_STRING, make_order);
   }
   else if (parser__match(s_output))
   {
      gen_orderis(&token, IS_OUTPUT, make_order);
   }
   else
       parser__error(FALSE,perr_expected, "menu or icn", token.lexeme);
}


static void parser__RD_orderis(BOOL make_order)
{
   parser__RD_orderentry(make_order);

   while (parser__match(s_comma))
          parser__RD_orderentry(make_order);

   parser__checkfor(s_semicolon);
}


static void parser__RD_imports(void)
{
   if (parser__match(s_wild_card_is))
   {
       parser__checkfor(s_string_value);
       gen_wildcard(&token);
       parser__checkfor(s_semicolon);
   }

   while (!parser__match(s_imports_end))
   {
      parser__RD_import();
   }
}


static void parser__RD_import(void)
{
   parser__checkfor(s_drag_to);
   if (parser__match_2(s_any, s_iconbar))
   {
   }
   else
   {
      parser__checkfor(s_icn);
      parser__checkfor(s_number_value);
   }

   gen_dragto(&token);

   parser__checkfor(s_inserts);

   parser__checkfor(s_icn);
   parser__checkfor(s_number_value);
   gen_insert(&token);
   while(parser__match(s_comma))
   {
      parser__checkfor(s_icn);
      parser__checkfor(s_number_value);
      gen_insert(&token);
   }

   if (parser__match(s_separator_is))
   {
      parser__checkfor(s_string_value);
      gen_dragseparator(&token);
   }

   parser__checkfor(s_semicolon);
}


/* --------------------------------------- choices processing ------------------------------ */

/* NOTE: meta options are just set by tweaking the application flags appropriately
         other options call FEoptions to set the dbox/menus correctly
*/


static void parser__RD_choices(void)
{
   /* --- first the "meta"options: auto_run, auto_save, display mode --- */

   if (parser__match_2(s_on, s_off))
   {
      /* --- set auto-run option --- */
      if (application.flags & AF_HAS_AUTORUN)
          gen_setautorun(&token);
   }
   else
      parser__error(TRUE,perr_expected, "on or off", token.lexeme);

   if (parser__match_2(s_on, s_off))
   {
      /* --- set auto-save option --- */
      if (application.flags & AF_HAS_AUTOSAVE)
          gen_setautosave(&token);
   }
   else
      parser__error(TRUE,perr_expected, "on or off", token.lexeme);

   if (parser__match_2(s_text, s_summary))
   {
      /* --- set dft display --- */
      gen_displaydft(&token);
   }

   /* --- now the dbox icons and menu entries --- */
   while (parser__match_2(s_icn, s_menu))
   {
      if (token.number == s_icn)
      {
         int i;

         parser__checkfor(s_number_value);
         i = token.value.integer;

         if (parser__match(s_on))
         {
            FEoptions_iconclick(i, TRUE);
         }
         else if (parser__match(s_off))
         {
            FEoptions_iconclick(i, FALSE);
         }
         else if (parser__match(s_string_value))
         {
            FEoptions_iconval(i, token.lexeme);
         }
         else
            parser__error(TRUE,perr_expected, "on, off or string", token.lexeme);
      }
      else if (token.number == s_menu)
      {
         int m;

         parser__checkfor(s_number_value);
         m = token.value.integer;

         if (parser__match(s_on))
         {
             FEoptions_menuclick(m, TRUE);
         }
         else if (parser__match(s_off))
         {
             FEoptions_menuclick(m, FALSE);
         }
         else
            parser__error(TRUE,perr_expected, "on or off", token.lexeme);

         if (parser__match(s_string_value))
         {
             FEoptions_menuval(m, token.lexeme);
         }
      }
   }
}


/* --------------------------------------- exported functions ------------------------------ */
void parser_readdescription(char *filename)
{
   if ((fp = fopen(filename, "r")) == 0)
   {
      parser__error(FALSE,perr_cant_open, filename);
      return;
   }

   token.number = lookahead.number = s_unknown;

   parser__RD_application();

   fclose(fp);
}


void parser_readchoices(char *filename)
{
   if ((fp = fopen(filename, "r")) == 0)
   {
      /* --- just return, cos there's no choices file --- */
      return;
   }

   token.number = lookahead.number = s_unknown;

   parser__RD_choices();

   fclose(fp);
}





