/* Title:   FrontEnd.c
 * Purpose: generalised front end module
 * Author:  IDJ
 * History: 06-Apr-90: IDJ: created
 *          27-Jun-90: IDJ: added check for already loaded app.
 *          06-Jul-90: IDJ: added SWI FrontEnd_ExtendedCmdLine
 *          26-Sep-90: IDJ: integrated with !Make (*FrontEnd_SetUp)
 *          09-Oct-90: IDJ: moved long cmdline stuff to CLIUtils.
 *          04-Mar-91: IDJ: added choices filename parameter to FrontEnd_SetUp
 *
 *          Re-release started (31-Oct-91 IDJ)
 *          31-Oct-91: IDJ: initialise filetype to -1 to avoid owning type 0 (bug DDE-0815)
 *
 */

#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "wimp.h"
#include "werr.h"
#include "baricon.h"
#include "resspr.h"
#include "res.h"
#include "visdelay.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "parser.h"
#include "gen.h"
#include "FEiconbar.h"
#include "FEexit.h"
#include "FEinit.h"
#include "FEmem.h"
#include "FEoptions.h"
#include "FEdbox.h"
#include "FEcmdline.h"
#include "utils.h"
#include "FEinterr.h"

#include "DDEswis.h"

#define MAXNAME          32
#define BUFLEN          256
#define APPNAM_LEN       13

#define Service_Memory        0x11
#define Service_Reset         0x27
#define Service_WimpCloseDown 0x53
#define OSModuleReason_Enter          2
#define OSModuleReason_Delete         4
#define OSModuleReason_Claim          6
#define OSModuleReason_Free           7
#define OSModuleReason_ExtractInfo   12
#define OSModuleReason_NewInstant    14
#define OSModuleReason_MakePreferred 16
#define OSModuleReason_LookUp        18

/* NOTE: Image__RO_Base is used to get at Image$$RO$$Base (our base address)
         to be compared with the CAO, when the wimp tries to map us out
*/
extern void *Image__RO_Base;

/* --- exported data --- */
Frontend_application application = {};
int                  task_id = -1;
int                  app_handle = -1;
char make_choicesname[MAXFILENAME];
char app_name[APPNAM_LEN];

/* --- functions exported to cmhg description --- */
extern _kernel_oserror *FrontEnd_init(char *cmd_tail, int podule_base, void *pw);
extern void FrontEnd_services(int service_number, _kernel_swi_regs *r, void *pw);
extern _kernel_oserror *FrontEnd_commands(char *arg_string, int argc, int cmd_no, void *pw);
extern _kernel_oserror *FrontEnd_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw);


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>>> MODE == SVC <<<<<<<<< */

#pragma no_check_stack

extern _kernel_oserror *FrontEnd_init(char *cmd_tail, int podule_base, void *pw)
{
   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);
   return NULL;
}

#pragma check_stack

/* +++++++++++++++++++++++++++++++++++ start code +++++++++++++++++++++++++++++++++++++ */

/* NOTE: processor is in USR mode here, so malloc gives us memory from app.
         workspace.
         main() is entered when we do a Module_Enter following a star command
         DANGER: this is when Clib initialisation happens. Beware init. code!!
                 It will write over things like statics, of course
*/

/* >>>>>>>>>> MODE == USR <<<<<<<<<<<<< */

#pragma check_stack

static void FrontEnd__initapp(void)
{
   application.name = 0;
   application.command = 0;
   application.version = "0.00";
   application.filetype = -1;       /* IDJ 31-Oct-91: bug-fix to DDE-0815 */
   application.wimpslot = 640;
   application.dft_output_name = 0;
   application.flags = 0;
   application.setup = 0;
   application.ordering = 0;
   application.make_ordering = 0;
}


/* argv[1] holds the application name */
/* argv[2] holds description filename */
/* argv[3] may hold input filename after double-click
           OR  task handle if invoked via *FrontEnd_Setup */
/* argv[4] will hold app. specific handle if invoked via *FrontEnd_Setup */
/* argv[5] will hold full pathname of toolflags file if invoked by make */

int main(int argc, char *argv[])
{
   char pling_name[MAXNAME+1] = "!";

   /* --- check we haven't been started by a double-click on the module --- */
   if (argc <= 1)
      exit(EXIT_FAILURE);


   /* --- stash app. name so we can clean up the module instantiation --- */
   strcpy(app_name, argv[1]);

   /* --- set up an exit handler (to ensure module dies when we exit!!) --- */
   /* this must be installed first to ensure it is called last! */
   atexit(FEexit_die);

   /* --- now parse the description --- */
   FrontEnd__initapp();
   visdelay_begin();
   parser_readdescription(argv[2]);
   visdelay_end();

   /* --- make sure app. name and parameter to *FrontEnd_Start/Setup same --- */
   /* --- or we'll have problems cleaning up module instantiations        --- */
   if ((application.name != 0) && cistrcmp(application.name, argv[1]))
   {
      printf("Application name in description file inconsistent with star command");
      exit(EXIT_FAILURE);
   }

   /* --- start up as a wimp task --- */
   /* we must decide here whether we have been invoked by double-clicking
      the app., or double-clicking a file type we understand, or invoked
      via *FrontEnd_setup.
      This is decided by the number of arguments passed to main!!!
   */

   switch (argc)
   {
      case 3:
      case 4:   /* either double-click on app (3 args) or on file of our type (4 args) */
         {
            char choices_file[MAXFILENAME];

            strcat(pling_name, application.name);
            FEinitialise(pling_name);

            /* --- and set up saved options --- */
            visdelay_begin();
            res_findname("!Choices", choices_file);
            FEoptions_readchoices(choices_file);
            visdelay_end();

            if (argc == 4)
            {
               if (!(application.flags & AF_AUTORUN))
               {
                   FEdbox_show();
                   do_inserts(ICONBAR_ICON, argv[3], 0, TRUE);
               }
               else
                   do_inserts(ICONBAR_ICON, argv[3], 0, FALSE);
               if (application.flags & AF_AUTORUN)
                  FEcmdline_run();
            }

            /* --- set up an exit handler (to ensure tasks killed when we exit!!) --- */
            atexit(FEexit_killtasks);

            /* --- set up exit handler to ensure no tmp files left around --- */
            atexit(FEexit_delete_all_tmpfiles);

         }
         break;

      case 6:   /* this means we have been invoked via *FrontEnd_Setup from !Make */
         {
            char choices_file[MAXFILENAME];

            /* --- startup task and show dbox --- */
            application.flags |= AF_MAKE;
            strcat(pling_name, application.name);
            task_id = atoi(argv[3]);
            app_handle = atoi(argv[4]);
            FEinitialise(pling_name);

            /* --- see if project's toolflags need reading (and remember for writing) --- */
            visdelay_begin();
            strncpy(choices_file, argv[5], MAXFILENAME-1);
            FEoptions_readchoices(choices_file);
            strncpy(make_choicesname, choices_file, MAXFILENAME-1);
            visdelay_end();
         }
         break;

      default:
         break;
   }

   /* --- loop the loop --- */
   while(TRUE)
      event_process();

   return 0;
}


/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>> MODE == SVC <<<<<<<<<<<<<< */

#pragma no_check_stack

extern void FrontEnd_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);
   /* keep application workspace (r2 holds CAO pointer) */
   if (service_number == Service_Memory && r->r[2] == (int)Image__RO_Base)
   {
      r->r[1] = 0;  /* fuck off wimp */
   }

#if FALSE
   else if (service_number == Service_Reset)
   {
      _kernel_swi_regs rr;
      char modname[64];
      int instant = 0, mod = 0, pref_instant;

      /* make base the preferred instantiation so we can kill others */
      rr.r[0] = OSModuleReason_MakePreferred;
      rr.r[1] = (int)"FrontEnd%Base";
      _kernel_swi(OS_Module, &rr, &rr);

      /* find our module number */
      rr.r[0] = OSModuleReason_LookUp;
      rr.r[1] = (int)"FrontEnd%Base";
      _kernel_swi(OS_Module, &rr, &rr);
      mod = rr.r[1];
      pref_instant = rr.r[2];

      /* kill instants one by one */
      do
      {
         rr.r[0] = OSModuleReason_ExtractInfo;
         rr.r[1] = mod;
         rr.r[2] = instant;
         _kernel_swi(OS_Module, &rr, &rr);
         if (rr.r[2] == 0) break;
         instant = rr.r[2];

         /* now r5 holds instant postfix */
         if (instant != pref_instant)
         {
            rr.r[0] = '.'; _kernel_swi(OS_WriteC, &rr, &rr);
         }
      } while (TRUE);

   }
#endif
}

#pragma check_stack

/* +++++++++++++++++++++++++++++++++++++ star commands +++++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>>>>> MODE == SVC <<<<<<<<<<<<<< */

#pragma no_check_stack

static _kernel_oserror *FrontEnd_start(char *arg_string)
{
   _kernel_swi_regs r;
   char name[MAXNAME] = "FrontEnd%";
   char argv[BUFLEN];  /* fed to main on module entry */
   char *src, *dst;
   int len;
   union
   {
     struct
     {
        char *app;
        char *desc;
        char *infile;
     } args;
     char chars[BUFLEN];
   } buffer;
   int i;
   _kernel_oserror *e;

   /* --- munge the command line --- */
   r.r[0] = (int) "app/A/K/G,desc/A/K/G,/G";
   r.r[1] = (int) arg_string;
   r.r[2] = (int) &buffer;
   r.r[3] = BUFLEN;
   if ((e = _kernel_swi(OS_ReadArgs, &r, &r)) != 0) return e;

   /* --- create argv[1] to hold app. name --- */
   src = buffer.args.app+2;          /* +2 gets us past length info in buffer */
   dst = argv;
   len = *(buffer.args.app) & 0xff;
   if (len >= APPNAM_LEN)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application name too long");
       return err;
   }
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[2] to hold description filename --- */
   src = buffer.args.desc+2;          /* +2 gets us past length info in buffer */
   len = *(buffer.args.desc) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[3] to hold optional input filename from dbl-click */
   if (buffer.args.infile != 0)
   {
      src = buffer.args.infile+2;          /* +2 gets us past length info in buffer */
      len = *(buffer.args.infile) & 0xff;
      i = 0;
      while(i++ < len) *dst++ = *src++;
      *dst = 0;
   }

   /* --- create a new instantiation ... --- */
   src = buffer.args.app+2;      /* +2 gets us past length info in buffer */
   dst = name + strlen(name);
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst = 0;

   r.r[0] = OSModuleReason_LookUp;
   r.r[1] = (int)name;
   r.r[4] = 0;
   _kernel_swi(OS_Module, &r, &r);
   if (r.r[4] != 0  /* private word is there */)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application already loaded");
       return err;
   }

   r.r[0] = OSModuleReason_NewInstant;
   r.r[1] = (int)name;
   r.r[2] = 0;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   /* --- ... and enter it as current app (passing desc. file as argv[1]) --- */
   r.r[0] = OSModuleReason_Enter;
   r.r[1] = (int)name;
   r.r[2] = (int)argv;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   return NULL;
}


static _kernel_oserror *FrontEnd_setup(char *arg_string)
{
   _kernel_swi_regs r;
   char name[MAXNAME] = "FrontEnd%M";
   char argv[BUFLEN];  /* fed to main on module entry */
   char *src, *dst;
   int len;
   union
   {
     struct
     {
        char *app;
        char *desc;
        char *task;
        char *handle;
        char *toolflags;
     } args;
     char chars[BUFLEN];
   } buffer;
   int i;
   _kernel_oserror *e;

   /* --- munge the command line --- */
   r.r[0] = (int) "app/A/K/G,desc/A/K/G,task/A/K,handle/A/K,toolflags/A/K";
   r.r[1] = (int) arg_string;
   r.r[2] = (int) &buffer;
   r.r[3] = BUFLEN;
   if ((e = _kernel_swi(OS_ReadArgs, &r, &r)) != 0) return e;

   /* --- create argv[1] to hold app. name --- */
   src = buffer.args.app+2;          /* +2 gets us past length info in buffer */
   dst = argv;
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[2] to hold description filename --- */
   src = buffer.args.desc+2;          /* +2 gets us past length info in buffer */
   len = *(buffer.args.desc) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[3] to hold task id of caller --- */
   strcat(argv, buffer.args.task);
   strcat(argv, " ");

   /* --- create argv[4] to hold app. specific handle --- */
   strcat(argv, buffer.args.handle);
   strcat(argv, " ");

   /* --- create argv[5] to hold toolflags filename --- */
   strcat(argv, buffer.args.toolflags);

   /* --- create a new instantiation ... --- */
   src = buffer.args.app+2;      /* +2 gets us past length info in buffer */
   dst = name + strlen(name);
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst = 0;

   r.r[0] = OSModuleReason_LookUp;
   r.r[1] = (int)name;
   r.r[4] = 0;
   _kernel_swi(OS_Module, &r, &r);
   if (r.r[4] != 0  /* private word is there */)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application already loaded");
       return err;
   }

   r.r[0] = OSModuleReason_NewInstant;
   r.r[1] = (int)name;
   r.r[2] = 0;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   /* --- ... and enter it as current app (passing argv) --- */
   r.r[0] = OSModuleReason_Enter;
   r.r[1] = (int)name;
   r.r[2] = (int)argv;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   return NULL;
}


extern _kernel_oserror *FrontEnd_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
   IGNORE(argc);
   IGNORE(pw);
   switch (cmd_no)
   {
      case 0:   /* *FrontEnd_Start -app <appname> -desc <filename> */
        {
           return FrontEnd_start(arg_string);
        }
        break;

      case 1:   /* *FrontEnd_Setup -app <appname> -desc <filename> -task <task_id> -handle <handle> */
        {
           return FrontEnd_setup(arg_string);
        }
        break;

      default:
        break;
   }

   return NULL;
}

#pragma check_stack

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


/* >>>>>>>>>>>> MODE == SVC <<<<<<<<<<<< */

#pragma no_check_stack

extern _kernel_oserror *FrontEnd_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);
   IGNORE(r);

   switch(FrontEnd_ChunkBase + swi_no)
   {
      default:
         break;
   }

   return NULL;
}

#pragma check_stack
