/* Title:   FEhelp.c
 * Purpose: to display help file
 * Author:  IDJ
 * History: 20-Jun-90: IDJ: created
 *          11-May-01: ADH: supported changes to FEtxtwin_ redraw scheme
 *
 */

#include "os.h"
#include "res.h"
#include "wimp.h"
#include "template.h"
#include "win.h"
#include "flex.h"
#include "wimpt.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEtxtwin.h"
#include "FEinterr.h"

#include "FEhelp.h"

typedef struct FEhelp_helpwindow
{
   wimp_w    w;
   char     *buffer;
   int      *line_offsets;
   int       nlines;
} FEhelp_helpwindow;


static FEhelp_helpwindow FEhelp__wind = {};

static void FEhelp__handler(wimp_eventstr *e, void *handle)
{
   FEhelp_helpwindow *w = (FEhelp_helpwindow *)handle;

   switch(e->e)
   {
      case wimp_ESCROLL:
        FEtxtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        wimpt_noerr(wimp_close_wind(e->data.o.w));
        break;

      case wimp_EOPEN:
        FEtxtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           FEtxtwin_refresh(&r, more, w->buffer, w->line_offsets, w->nlines);
         }
        break;

      default:
        break;
   }
}


extern void FEhelp_givehelp(void)
{
   char helpfilename[MAXFILENAME];
   os_filestr f;
   os_error *e;
   template *t;
   wimp_wstate ws;
   wimp_redrawstr r;
   int lastchar = 0;

   if (FEhelp__wind.buffer == 0)
   {
      /* --- find if !help file exists --- */
      res_findname("!Help", helpfilename);
      f.action = 5;
      f.name = helpfilename;
      if ((e = os_file(&f)) != 0 || f.action != 1 /*file found*/) return;

      /* --- create a help window and register event handlers --- */
      t = template_find("Help");
      wimpt_noerr(wimp_create_wind(&t->window, &FEhelp__wind.w));
      win_register_event_handler(FEhelp__wind.w, FEhelp__handler, (void *)&FEhelp__wind);
      flex_alloc((flex_ptr)&FEhelp__wind.buffer, f.start + 1);
      FEhelp__wind.buffer[f.start] = '\0';

      /* --- load file into buffer --- */
      f.action = 0xff;   /* load named file */
      f.name = helpfilename;
      f.loadaddr = (int) FEhelp__wind.buffer;
      f.execaddr = 0;
      if ((e = os_file(&f)) != 0) return;

      /* --- set up line offsets --- */
      FEtxtwin_linecount(f.start, FEhelp__wind.buffer, &FEhelp__wind.nlines, &FEhelp__wind.line_offsets, flex_size((flex_ptr)&FEhelp__wind.buffer) - 1, &lastchar);

      /* --- set the extent --- */
      r.w = FEhelp__wind.w;
      r.box.x0 = 0;
      r.box.x1 = t->window.ex.x1;
      r.box.y1 = 0;
      r.box.y0 = -(FEhelp__wind.nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));
   }

   /* --- ... and open the window --- */
   wimpt_noerr(wimp_get_wind_state(FEhelp__wind.w, &ws));
   ws.o.behind = -1;
   FEtxtwin_open(&ws.o);
}





