/* Title:   FEtask.c
 * Purpose: running multiple tasks under the task window module
 * Author:  IDJ
 * History: 24-Apr-90: IDJ: created (from srcedit)
 *          26-Jun-90: IDJ: added check for task window module
 *          14-Jan-91: IDJ: mark unsaved output when produced
 *          31-Jan-91: IDJ: check before passing too long cmdline to bollocks task window module
 *          12-Feb-91: IDJ: bug-fix to cmdline too long check
 *          04-Apr-91: IDJ: check for no output state created on task creation
 *
 */

/*
 * IDJ: 31-May-90
 * A word of explanation for the uninitiated:
 *     1. When we go: *taskwindow "cmd" -quit -wimpslot <n>K
 *        -task <task_id> -txt <txt_id>, the new task window
 *        module starts us up as a task. Note that task id is
 *        our id (not our child's) and txt id is some pointer
 *        into app. workspace.
 *
 *     2. We first get back the child's wimp task-id in a wimp
 *        message (FEtask_ego).  The first word of data is the
 *        "txt" pointer which we use to identify the appropriate
 *        entry in our list of states.
 *
 *     3. Whenever our child produces VDU output, the task window
 *        module intercepts it, and sends it to us in wimp
 *        messages (FEtask_output). NB first word of data gives length
 *        of output!
 *
 *     4. Since we have said "-quit", as soon as the task window module
 *        stops running the task it exits its CLI state and sends us
 *        a dying message (FEtask_morio).  We thus know when the task
 *        has stopped!
 *
 */


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "flex.h"
#include "os.h"
#include "event.h"
#include "werr.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "msgs.h"
#include "dbox.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "slist.h"
#include "bool.h"
#include "FEmem.h"
#include "FEsaveas.h"
#include "FEoutput.h"
#include "FEmsg.h"
#include "utils.h"
#include "FEinterr.h"
#include "DDEswis.h"

#include "FEtask.h"

#define round(i) (((i)+3) & 0xfffffffc)


static Frontend_task *states = NULL;

/* NB 256 is the limit imposed by the task window module/wimp_starttask and co.
      for non-extended cmd-lines we just construct the full line and pass it
      to *taskwindow
      for extended command-lines, we construct a small cmd-line which just invokes
      the tool, which will pick up its argv by going SWI DDEUtils_GetCL
*/


static os_error * FEtask__sendmessage(FEtask_action action, wimp_t dest, FEtask_data * data)
{
   wimp_msgstr msg;

   msg.hdr.your_ref = 0; /* Not ACK */
   msg.hdr.action = (wimp_msgaction) action;
   if (data)
   {
     int size = data->size;
     msg.hdr.size = round(24 + size);
     memcpy(&msg.data, data, 4);
     if (size) memcpy(&msg.data.chars[4], data->data, size);
   } else msg.hdr.size = 20;
   return wimp_sendmessage(wimp_ESEND, &msg, dest);
}


static Frontend_task *findstatefromtask(wimp_t task)
{
   Frontend_task *s = states;

   while (s)
   {
     if (s->child == task) return s;
     s = s->next;
   }
   return NULL;
}


static Frontend_task *findstatefromtxt(Frontend_outputwin *t)
{
   Frontend_task *s = states;

   while (s)
   {
     if (s->output == t) return s;
     s = s->next;
   }
   return NULL;
}


extern os_error *FEtask_sendchar(Frontend_outputwin *t, char c)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s != 0)
   {
      FEtask_data data;

      data.size = 1;
      data.data = &c;   /* this is disgusting */
      return FEtask__sendmessage(FEtask_input, s->child, &data);
   }

   return 0;
}


extern void FEtask_dispose(Frontend_task *s)
{
   Frontend_tmpfilename *f, *fnext;

   if (s->tmpfile != 0)
   {
       delete_object(s->tmpfile);
       free(s->tmpfile);
   }
   if (s->outfile != 0) free(s->outfile);
   if (s->cmdline != 0) free(s->cmdline);
   if (s->extcmdline != 0) free(s->extcmdline);

   /* --- get rid of any saveas box --- */
   if (s->saveas != 0)
   {
      dbox_hide(s->saveas);
      dbox_dispose(&s->saveas);
   }

   /* --- free output state --- */
   if (s->output) FEoutput_dispose(s->output);

   /* --- and free any tmp files which were created as a result of a datasave --- */
   f = s->tmplist;
   while (f != 0)
   {
      fnext = f->next;
      if (f->name)
      {
         delete_object(f->name);
         FEmem_free(f->name);
      }
      FEmem_free(f);

      f = fnext;
   }

   /* --- ... and bid it farewell --- */
   states = slist_remove(states, s);
   free(s);
}


static void FEtask__taskdying(Frontend_task *s)
{
   os_filestr f;
   os_error *e;

   if (!(s->flags & TF_Aborted))
   {
      s->flags &= ~(TF_Running|TF_Aborted|TF_Paused);
      s->flags |= TF_Completed;
      if (s->output) FEoutput_settitles(s->output, TF_Completed);
   }

   /* --- set dbox fields to faded when finished --- */
   if (s->output) FEoutput_fadefields(s->output);

   /* --- see if output needed --- */
   if (s->tmpfile != 0)
   {
      /* --- see if tmpfile exists --- */
      f.action = 5;
      f.name = s->tmpfile;
      e = os_file(&f);
      if (e == 0 && (f.action == 1 || f.action == 2) /*file/directory found*/)
      {
         /* --- pop up a save box for output (not on abort!) --- */
         if (!(s->flags & TF_Aborted))
         {
            s->flags |= TF_Unsaved_Output;
            FEsaveas_dbox(s, &f);
         }
      }
   }

   /* --- is it marked for total demise? (ie is its window closed?) --- */
   if (s->flags & TF_Dead)
      FEtask_dispose(s);
}


static BOOL FEtask__bkg_events(wimp_eventstr *e, void *handle)
{
   Frontend_task  *s;

   handle = handle;

   switch(e->e)
   {
     case wimp_ESEND:
        switch (e->data.msg.hdr.action)
        {
          case FEtask_output:

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s && s->output) FEoutput_addtobuffer(s->output, e->data.msg.data.words[0], &e->data.msg.data.chars[4]);
             return TRUE;

          case FEtask_morio:   /* alas, poor task...... */

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s)
             {
                if (s->output && s->output->bufsize > 0 && s->output->buffer[s->output->bufsize-1] != '\n')
                {
                   /* --- force display of last dying gasps --- */
                   FEoutput_addtobuffer(s->output, 1, "\n");
                }

                FEtask__taskdying(s);
             }
             return TRUE;

          case FEtask_ego:

             /* --- child has started, store its task-id --- */
             /* --- first word of msg holds "txt" --- */
             s = (Frontend_task *)(e->data.msg.data.words[0]);
             if (s) s->child = e->data.msg.hdr.task;
             return TRUE;

          default:
             return FALSE;
        }

     default:
        return FALSE;
   }
   return FALSE;
}


extern char *FEtask_get_cmdline(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->cmdline:0;
}


extern char *FEtask_get_extcmdline(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->extcmdline:0;
}


extern char *FEtask_get_tmpfile(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->tmpfile:0;
}


extern char *FEtask_get_outfile(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->outfile:0;
}


extern void FEtask_abort(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Running|TF_Paused|TF_Completed);
      s->flags |= TF_Aborted;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
   }
}


extern void FEtask_abort_and_dispose(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      /* --- if it's already aborted, just remove its state, otherwise,
             mark it as dead and let the die handler deal with disposal --- */
      if (s->flags & (TF_Aborted|TF_Completed))
         FEtask_dispose(s);
      else
      {
         if (s->child)
            wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
         s->flags |= TF_Dead;
      }
   }
}


extern void FEtask_pause(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Running|TF_Completed);
      s->flags |= TF_Paused;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_suspend, s->child, NULL));
   }
}


extern void FEtask_continue(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Paused|TF_Completed);
      s->flags |= TF_Running;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_resume, s->child, NULL));
   }
}


extern void FEtask_killalltasks(void)
{
   Frontend_task *s = states;
   Frontend_tmpfilename *f;

   while (s)
   {
     if (s->child && !(s->flags & (TF_Aborted|TF_Completed)))
     {
        wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
     }

     /* --- make sure we don't leave temp. files --- */
     /* file used for output */
     if (s->tmpfile)
     {
         delete_object(s->tmpfile);
     }

     /* ... and tmp files used for input after a datasave */
     f = s->tmplist;
     while (f != 0)
     {
        if (f->name) delete_object(f->name);
        f = f->next;
     }

     s = s->next;
   }
}


extern int FEtask_getflags(Frontend_outputwin *w)
{
   Frontend_task *s = findstatefromtxt(w);

   return (s)?s->flags:0;
}


extern BOOL FEtask_anyactive(void)
{
   Frontend_task *s = states;

   while (s != 0)
   {
      if (!(s->flags & (TF_Completed|TF_Aborted)))
          return TRUE;
      s = s->next;
   }

   return FALSE;
}


static void FEtask__free_extcmdline(char *extcmdline)
{
   _kernel_swi_regs r;
   _kernel_oserror *e;

   /* --- get ext cmdline to avoid it being left around --- */
   if ((e = _kernel_swi(DDEUtils_GetCLSize, &r, &r)) == 0 && r.r[0] != 0)
   {
      r.r[0] = (int)extcmdline;
      e = _kernel_swi(DDEUtils_GetCL, &r, &r);
      assert(e == 0, "Failed to free dangling extended cmdline");
   }
}


extern void FEtask_request_taskwindow(char *cmd, char *tmpfile,char *outfile,char *extcmdline)
{
   char taskcmd[2*MAXCMDLINE];  /* yes alright I know this is horrible */
   Frontend_task *s;
   os_error *e;
   _kernel_oserror *ee;
   _kernel_swi_regs r;

   /* --- don't bother if taskwindow not around --- */
   if ((e = os_cli("RMEnsure TaskWindow 0")) != 0)
   {
        werr(FALSE, msgs_lookup("FEtask1:Task window not active"));
        return;
   }

   /* --- check there is space for new application --- */
   r.r[0] = -1;
   r.r[1] = -1;
   _kernel_swi(Wimp_SlotSize, &r, &r);
   if (r.r[2] < application.wimpslot * 1024)
   {
      werr(FALSE, msgs_lookup("FEtask2:Application needs at least %dK to start up"), application.wimpslot);
      if (extcmdline != 0)
         FEtask__free_extcmdline(extcmdline);
      return;
   }

   /* --- create new state --- */
   s = FEmem_alloc(sizeof(Frontend_task));

   s->child = 0; /* Don't know child taskid yet */
   s->saveas = 0;
   s->flags = TF_Running;
   s->output = 0;
   s->tmpfile = 0;
   s->outfile = 0;
   s->cmdline = 0;
   s->extcmdline = 0;

   /* --- create new associated text/summary window --- */
   if ((application.flags & AF_HAS_OUTPUT_WINDOW) || (application.flags & AF_HAS_SUMMARY_WINDOW))
   {
      s->output = FEoutput_new();
      if (s->output == 0)
      {
         FEmem_free(s);
         if (extcmdline != 0)
            FEtask__free_extcmdline(extcmdline);
         return;
      }
   }

   s->tmplist = FEmsg_get_datasave_tmpfile_list();

   if (tmpfile[0] != 0)
   {
      stralloc(&s->tmpfile, tmpfile);
   }
   if (outfile[0] != 0)
   {
      stralloc(&s->outfile, outfile);
   }
   if (cmd != 0)
   {
      stralloc(&s->cmdline, cmd);
   }
   if (extcmdline != 0)
   {
      stralloc(&s->extcmdline, extcmdline);
   }

   /* --- add it to the list of states --- */
   states = slist_add(states, s);

   /* --- run in a task window --- */
   if (extcmdline != 0)
   {
      r.r[0] = (int)extcmdline;
      if ((ee = _kernel_swi(DDEUtils_SetCL, &r, &r)) != 0)
      {
         werr(FALSE, "%s", ee->errmess);
      }
   }
   strncpy(taskcmd, "*taskwindow \"", 2*MAXCMDLINE);
   strncat(taskcmd, cmd, 2*MAXCMDLINE);
   add_char(taskcmd, '"');
   strncat(taskcmd, " -quit -wimpslot ", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%dK", application.wimpslot);
   strncat(taskcmd, " -name ", 2*MAXCMDLINE);
   strncat(taskcmd, application.name, 2*MAXCMDLINE);
   strncat(taskcmd, "_task", 2*MAXCMDLINE);
   strncat(taskcmd, " -task &", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", wimpt_task());
   strncat(taskcmd, " -txt &", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", (int)s);

   /* --- check we don't overflow cmdline buffer --- */
   if (strlen(taskcmd) >= MAXCMDLINE)
   {
      werr(FALSE, msgs_lookup("FEtask3:Command line too long for task window module"));
      FEtask_dispose(s);
      if (extcmdline != 0)
         FEtask__free_extcmdline(extcmdline);
      return;
   }

   /* --- now start the command --- */
   wimpt_noerr(wimp_starttask(taskcmd));

   /* --- display an output window --- */
   if ((application.flags & AF_HAS_OUTPUT_WINDOW) || (application.flags & AF_HAS_SUMMARY_WINDOW))
      FEoutput_show(s->output);
}


extern void FEtask_init(void)
{
   win_add_unknown_event_processor(FEtask__bkg_events, 0);
}
