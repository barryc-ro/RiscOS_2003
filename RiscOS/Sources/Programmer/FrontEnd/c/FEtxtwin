/* Title:   FEtxtwin.c
 * Purpose: to display a text window
 * Author:  IDJ
 * History: 24-Apr-90: IDJ: created
 *          04-Apr-91: IDJ: made running out of memory safer
 *
 */

#include "swis.h"

#include "wimpt.h"
#include "wimp.h"
#include "os.h"
#include "bbc.h"
#include "flex.h"
#include "werr.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEinterr.h"

#include "FEtxtwin.h"

#define  LINEBUFSIZ  256

static void FEtxtwin__printtext(char *text, int leftmost, int rightmost, int atx, int aty)
{
   int len=0;

   while (text[len] != '\n' && text[len] != '\r' && text[len] != '\0') len++;

   bbc_move(atx, aty);
   if (len > leftmost)
   {
      os_regset r;
      if (len > rightmost)
          len = rightmost + 1;
      r.r[0] = (int)(text + leftmost);
      r.r[1] = len - leftmost;
      wimpt_noerr(os_swix(OS_WriteN, &r));
   }
}


extern void FEtxtwin_open(wimp_openstr *o)
{
   wimpt_noerr(wimp_open_wind(o));
}


extern void FEtxtwin_refresh(wimp_redrawstr *r, BOOL more,
                                  char *buffer, int *line_offsets, int nlines)
{
   int topspot, leftspot, topline, bottomline, leftmost, rightmost, plotx, ploty, j;
   int cheight = sysfont_height, cwidth = sysfont_width;

   /* variables are:
      topspot ---- > topmost point in work area to be redrawn
      leftspot --- >    "      "    "   "   "    "  "    "
      topline  --- > index of first line of work area to redraw
      bottomline - >   "   "  last   "    "   "    "  "    "
      leftmost --- > index of leftmost character to redraw
      rightmost -- >   "   "  rightmost   "      "    "
      plotx ------ > x screen-coord to plot at
      ploty ------ > y   "      "   "    "   "
   */

   while (more)
   {
      topspot = r->box.y1 - r->g.y1 - r->scy;
      leftspot = r->scx + r->g.x0 - r->box.x0;
      topline = topspot/cheight;
      leftmost = leftspot/cwidth;
      bottomline = (r->box.y1 - r->g.y0 - r->scy - 1)/cheight;
      rightmost = (r->scx + r->g.x1 - r->box.x0)/cwidth;
      plotx = r->g.x0 - (leftspot & (cwidth-1));
      ploty = r->g.y1 + (topspot & (cheight-1)) - 1;

      /* now do the redrawing line by line */
      for (j = topline; j<=bottomline && j<nlines; j++)
      {
          FEtxtwin__printtext(&buffer[(j==0)?0:line_offsets[j-1]], leftmost, rightmost, plotx, ploty);
          ploty -= cheight;
      }
      wimp_get_rectangle(r, &more);
   }
}


extern void FEtxtwin_scroll(wimp_openstr *o, int x, int y)
{
   int offset;

   if (x & 1)   /* char left or char right */
   {
       offset = sysfont_width;
       if (x < 0) offset = -offset;
       o->x += offset;
   }
   else if (x)   /* page left or page right */
   {
       offset = o->box.x1 - o->box.x0;
       if (x < 0) offset = -offset;
       o->x += offset;
   }

   if (y & 1)   /* line up or line down */
   {
      if (y < 0)
          offset = ((o->box.y1 - o->box.y0 - o->y) & (sysfont_height-1)) - sysfont_height;
      else
          offset = sysfont_height - (o->y & (sysfont_height-1));
      o->y += offset;
   }
   else if (y)   /* page up or page down */
   {
      offset = o->box.y1 - o->box.y0;
      if (y < 0) offset = -offset;
      o->y += offset;
   }

   FEtxtwin_open(o);
}


extern BOOL FEtxtwin_linecount(int len, char *msg, int *nlines, int **line_offsets, int bufsize, int *lastchar)
{
   int pos = 0;
   BOOL rc = TRUE;

   /* The last buffer ending with a singular \r or \n, and this buffer starting with the
    * other line terminator, so this is NOT an extra blank line!
    */
   if (len > 0 && (msg[pos] == '\r' && *lastchar == '\n' || msg[pos] == '\n' && *lastchar == '\r'))
   {
     pos++;
     ++((*line_offsets)[*nlines-1]);
   }

   if (pos < len)
   {
     *lastchar = msg[len-1];
   }

   /* --- here, we keep pointers to line posn's, as well as a count of \n's --- */
   while (pos < len)
   {
      if (msg[pos] == '\n' || msg[pos] == '\r')
      {
         if ((pos + 1) < len)
         {
            if ( (msg[pos] == '\n' && msg[pos + 1] == '\r') ||
                 (msg[pos] == '\r' && msg[pos + 1] == '\n') )
            {
               pos++;
            }
            if ((pos + 1) == len)
            {
               *lastchar = 0;
            }
         }

         if ((*nlines+1) == 1)
         {
            rc = flex_alloc((flex_ptr)line_offsets, LINEBUFSIZ * sizeof(int));
         }
         else
         {
            if ((*nlines+1) * sizeof(int) >= flex_size((flex_ptr)line_offsets))
            {
               rc = flex_extend((flex_ptr)line_offsets, flex_size((flex_ptr)line_offsets) + LINEBUFSIZ * sizeof(int));
            }
         }
         if (rc)
         {
            (*nlines)++;
            (*line_offsets)[*nlines-1] = bufsize - len + pos + 1;
         }
         else
         {
            werr(FALSE, msgs_lookup("FEoutput1:No more memory for output display - requesting %d bytes"), LINEBUFSIZ);
            return FALSE;
         }
      }

      pos++;
   }

   return TRUE;
}
