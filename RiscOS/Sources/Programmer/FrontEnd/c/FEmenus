/* Title:    FEmenus.c
 * Purpose:  Menu handling
 * Author:   IDJ
 * History:  10-Apr-90: IDJ: created
 *           30-May-90: IDJ: added fading/ticking dependent on auto-save/auto-run
 *           05-Mar-91: IDJ: use msgs.h
 *
 *           20-Dec-94: IDJ: bug-fix AQU-00615, can't pause/continue completed task
 *
 */

#include <stdlib.h>
#include <string.h>

#include "menu.h"
#include "dbox.h"
#include "msgs.h"
#include "saveas.h"
#include "dboxquery.h"
#include "help.h"
#include "res.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEinfo.h"
#include "FEdbox.h"
#include "FEmem.h"
#include "FEcmdline.h"
#include "utils.h"
#include "FEtask.h"
#include "FEoptions.h"
#include "FEoutput.h"
#include "FEhelp.h"
#include "FEinterr.h"

#include "FEmenus.h"

#define MAXMENUSIZE  256

/* the setup dbox menu */
#define FEmenus_MSetupCmdLine     1

/* the main menu */
#define FEmenus_MInfo        1
#define FEmenus_MSaveOptions 2
#define FEmenus_MOptions     3
#define FEmenus_MHelp        4
#define FEmenus_MQuit        5

#define FEmenus_MAutoRun   1
#define FEmenus_MAutoSave  2
#define FEmenus_MDisplay   3

#define FEmenus_MText      1
#define FEmenus_MSummary   2

/* the display windows */

#define  FEmenus_MCmdLine  2
#define  FEmenus_MSave     3
#define  FEmenus_MAbort    4
#define  FEmenus_MPause    5
#define  FEmenus_MContinue 6

static menu FEmenus__main_menu = 0;
static menu FEmenus__options = 0;
static menu FEmenus__display = 0;
static menu FEmenus__setup_menu = 0;
static menu FEmenus__text_menu = 0;
static menu FEmenus__summary_menu = 0;


/* ---------------------------------------- menu interactive help ---------------------------- */
static void FEmenus__help_handler(void *handle, char *hit)
{
   char *prefix = (char *)handle;

   help_genmessage(prefix, hit);
}


/* -------------------------------------------- main iconbar menu ---------------------------- */

static BOOL FEmenus__mayquit(void)
{
   return (dboxquery(msgs_lookup("FEmenu9:Task(s) active: are you sure you want to quit?")) == dboxquery_YES);
}


extern void FEmenus_main_proc(void *handle, char *hit)
{
   IGNORE(handle);

   switch (hit[0])
   {
      case FEmenus_MInfo:
        FEinfo();
        break;

      case FEmenus_MSaveOptions:
        {
           char filename[MAXFILENAME];

           res_findname("!Choices", filename);
           FEoptions_savechoices(filename, FALSE);
        }
        break;

      case FEmenus_MOptions:
        switch(hit[1])
        {
           case FEmenus_MAutoRun:
             application.flags ^= AF_AUTORUN;
             break;

           case FEmenus_MAutoSave:
             application.flags ^= AF_AUTOSAVE;
             break;

           case FEmenus_MDisplay:
             switch(hit[2])
             {
                case FEmenus_MText:
                  application.flags &= ~AF_DFT_SUMMARY;
                  break;

                case FEmenus_MSummary:
                  application.flags |= AF_DFT_SUMMARY;
                  break;

                default:
                  break;
             }
             break;

           default:
             break;
        }
        break;

      case FEmenus_MHelp:
        FEhelp_givehelp();
        break;

      case FEmenus_MQuit:
        if (FEtask_anyactive())
        {
           if (FEmenus__mayquit())
               exit(EXIT_SUCCESS);
        }
        else
           exit(EXIT_SUCCESS);
        break;

      default:
        break;
   }
}


static void FEmenus__main_setflags(void)
{
   /* --- set options flags --- */
   menu_setflags(FEmenus__options, FEmenus_MAutoRun, application.flags & AF_AUTORUN, !(application.flags & AF_HAS_AUTORUN));
   menu_setflags(FEmenus__options, FEmenus_MAutoSave, application.flags & AF_AUTOSAVE, !(application.flags & AF_HAS_AUTOSAVE));
   menu_setflags(FEmenus__options, FEmenus_MDisplay, 0, !(application.flags & (AF_HAS_OUTPUT_WINDOW|AF_HAS_SUMMARY_WINDOW)));

   /* --- set display flags --- */
   menu_setflags(FEmenus__display, FEmenus_MText, !(application.flags & AF_DFT_SUMMARY), !(application.flags & AF_HAS_OUTPUT_WINDOW));
   menu_setflags(FEmenus__display, FEmenus_MSummary, application.flags & AF_DFT_SUMMARY, !(application.flags & AF_HAS_SUMMARY_WINDOW));
}


extern menu FEmenus_main_maker(void *handle)
{

   IGNORE(handle);
   if (FEmenus__main_menu == 0)
   {
      FEmenus__main_menu = menu_new(application.name,
                                    msgs_lookup("FEmenu1:>Info,Save options,Options,Help,Quit"));
      FEmenus__options = menu_new(msgs_lookup("FEmenu2:Options"),
                     msgs_lookup("FEmenu3:Auto Run,Auto Save,Display"));
      FEmenus__display = menu_new(msgs_lookup("FEmenu4:Display"),
                     msgs_lookup("FEmenu5:Text,Summary"));
      menu_submenu(FEmenus__options, FEmenus_MDisplay, FEmenus__display);
      menu_submenu(FEmenus__main_menu, FEmenus_MOptions, FEmenus__options);
   }

   help_register_handler(FEmenus__help_handler, "Mmain");
   FEmenus__main_setflags();
   return FEmenus__main_menu;
}


/* -------------------------------------------- setup dbox menu ------------------------------ */

extern void FEmenus_setup_save_state(void)
{
   Frontend_menuentry *m;

   /* --- save menu state in case of cancel from setup dbox --- */
   m = application.setup->menu.entries;

   while (m != 0)
   {
      m->save_flags = m->flags;
      if (m->buffer != 0) memcpy(m->save_buffer, m->buffer, m->bufsize);
      m = m->next;
   }
}


extern void FEmenus_setup_cancel(void)
{
   Frontend_menuentry *m;

   /* --- restore saved menu state after cancel --- */
   m = application.setup->menu.entries;

   while (m != 0)
   {
      m->flags = m->save_flags;
      if (m->save_buffer != 0) memcpy(m->buffer, m->save_buffer, m->bufsize);
      m = m->next;
   }
}


extern void FEmenus_setup_make_defaults(void)
{
   Frontend_menuentry *m;

   /* --- set menu state to their make defaults --- */
   m = application.setup->menu.entries;

   while (m != 0)
   {
      if (m->make_dft_value) m->flags |= IF_SELECTED;
      if (m->make_dft_buffer) strcpy(m->buffer, m->make_dft_buffer);
      m = m->next;
   }
}


extern void FEmenus_setup_proc(void *handle, char *hit)
{
   Frontend_menuentry *m;

   handle = handle;

   switch(hit[0])
   {
      case FEmenus_MSetupCmdLine:
         /* --- open the dialogue box showing the command line --- */
         FEcmdline_show_equivalent();
         break;

      case 0:  /* --- we get this for click on menu's title bar line!!!!! --- */
         break;

      default:
         /* --- do all necessary selections/deselections/exclusions --- */
         m = find_menuentry(hit[0]);
         if (m == 0) break;

         if (((m->flags & IF_SELECTED) && hit[1] == 0) ||
              (m->buffer != 0 && m->buffer[0] < 32))
         {
            m->flags &= ~IF_SELECTED;
            do_off_actions(m, IS_MENU);
         }
         else if ((!(m->flags & IF_SELECTED) && hit[1] == 0) ||
                 (m->buffer != 0 && m->buffer[0] >= 32))
         {
            m->flags |= IF_SELECTED;
            do_on_actions(m, IS_MENU);
         }

         break;
   }
}


static void FEmenus__setup_setflags(void)
{
   Frontend_menuentry *m;

   m = application.setup->menu.entries;
   while (m != 0)
   {
      menu_setflags(FEmenus__setup_menu, m->number, m->flags & IF_SELECTED, m->flags & IF_FADED);
      m = m->next;
   }
}


extern menu FEmenus_setup_maker(void *handle)
{
   char menu_string[MAXMENUSIZE];
   Frontend_menuentry *m;
   menu sub;

   handle = handle;

   if (FEmenus__setup_menu == 0)
   {
       /* --- first entry is Command Line (from messages file)  --- */
       strcpy(menu_string, msgs_lookup("FEmenu6:>Command line"));

       /* --- make entries text --- */
       m = application.setup->menu.entries;
       while (m != 0)
       {
          add_char(menu_string, ',');
          strcat(menu_string, m->text);
          m = m->next;
       }

       /* --- make the menu --- */
       FEmenus__setup_menu = menu_new(application.name, menu_string);

       /* --- attach submenus --- */
       m = application.setup->menu.entries;
       while (m != 0)
       {
          if (m->subtext != 0)
          {
              sub = menu_new(m->subtext, "foo");
              menu_make_writeable(sub, 1, m->buffer, m->bufsize, "");
              menu_submenu(FEmenus__setup_menu, m->number, sub);
          }
          m = m->next;
       }
   }

   help_register_handler(FEmenus__help_handler, "Msetup");
   FEmenus__setup_setflags();
   return FEmenus__setup_menu;
}

/* -------------------------------------- text output menu ----------------------------------- */


static void FEmenus__text_setflags(Frontend_outputwin *s)
{
   int flags = FEtask_getflags(s);

   menu_setflags(FEmenus__text_menu, FEmenus_MAbort, 0, flags & (TF_Completed|TF_Aborted));
   menu_setflags(FEmenus__text_menu, FEmenus_MPause, 0, flags & (TF_Paused|TF_Completed|TF_Aborted));
   menu_setflags(FEmenus__text_menu, FEmenus_MContinue, 0, !(flags & TF_Paused) || (flags & (TF_Completed|TF_Aborted)));
}


extern menu FEmenus_text_menumaker(void *handle)
{
   Frontend_outputwin *s = (Frontend_outputwin *)handle;

   if (FEmenus__text_menu == 0)
   {
      FEmenus__text_menu = menu_new(application.name,
                                msgs_lookup("FEmenu7:>Info,>Cmd Line,>Save,Abort,Pause,Continue"));
   }

   help_register_handler(FEmenus__help_handler, "Mtext");
   FEmenus__text_setflags(s);
   return FEmenus__text_menu;
}


extern void FEmenus_text_menuproc(void *handle, char *hit)
{
   Frontend_outputwin *s = (Frontend_outputwin *)handle;

   switch(hit[0])
   {
      case FEmenus_MInfo:
        FEinfo();
        break;

      case FEmenus_MCmdLine:
        FEcmdline_show_cmdrun(s);
        break;

      case FEmenus_MSave:
        saveas(0xfff, "Textfile", s->bufsize, FEoutput_saveproc, 0, 0, s);
        break;

      case FEmenus_MAbort:
        FEtask_abort(s);
        FEoutput_settitles(s, TF_Aborted);
        break;


      /* IDJ: 20-Dec-94: bug-fix AQU-00615, can't pause/continue completed task */
      case FEmenus_MPause:
        {
            int flags = FEtask_getflags(s);
            if (flags & TF_Running)
            {
                FEtask_pause(s);
                FEoutput_settitles(s, TF_Paused);
            }
        }
        break;

      case FEmenus_MContinue:
        {
            int flags = FEtask_getflags(s);
            if (flags & TF_Paused)
            {
                FEtask_continue(s);
                FEoutput_settitles(s, TF_Running);
            }
        }
        break;

      default:
        break;
   }
}


/* ----------------------------------------- summary dbox menu ------------------------------- */

extern menu FEmenus_summary_menumaker(void *handle)
{
   IGNORE(handle);

   if (FEmenus__summary_menu == 0)
   {
      FEmenus__summary_menu = menu_new(application.name,
                                msgs_lookup("FEmenu8:>Info,>Cmd Line,>Save"));
   }

   help_register_handler(FEmenus__help_handler, "Msummary");
   return FEmenus__summary_menu;
}


extern void FEmenus_summary_menuproc(void *handle, char *hit)
{
   Frontend_outputwin *s = (Frontend_outputwin *)handle;

   switch(hit[0])
   {
      case FEmenus_MInfo:
        FEinfo();
        break;

      case FEmenus_MCmdLine:
        FEcmdline_show_cmdrun(s);
        break;

      case FEmenus_MSave:
        saveas(0xfff, "Textfile", s->bufsize, FEoutput_saveproc, 0, 0, s);
        break;

      default:
        break;
   }
}
