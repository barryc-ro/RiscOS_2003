/* Title:    gen.c
 * Purpose:  To generate a data structure describing an application
 * Author:   IDJ
 * History:  9-Apr-90: IDJ: Created
 *           21-May-90: IDJ: added IF_ARROWUP/DOWN flags
 *           19-Mar-91: IDJ: added "prefix_by" to icons and menu entries
 *           11-May-01: ADH: added support for quoted_string, ctrl_chars and tab_width
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "slist.h"
#include "lexer.h"
#include "FEmem.h"
#include "utils.h"
#include "FEinterr.h"

#include "gen.h"


/* --- current states of application data structure --- */
static Frontend_icon       *gen__current_icon = 0;
static Frontend_follow     *gen__follow_icon = 0;
static Frontend_icon       *gen__deselexcl_icon = 0;
static Frontend_menuentry  *gen__current_menuentry = 0;
static Frontend_menuentry  *gen__deselexcl_menuentry = 0;
static Frontend_dragto     *gen__current_drag = 0;
static int entry_num = 2;   /* == 2 because Command line comes first, and
                               RISC_OSlib numbers menu entries from one
                             */


static void gen__syserror(char *s)
{
   printf("FrontEnd internal error (gen): %s\n", s);
   exit(EXIT_FAILURE);
}


extern void gen_appname(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("app name is not a string");
   application.name = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.name, token.lexeme);
}

extern void gen_appcommand(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("command name is not a string");
   application.command = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.command, token.lexeme);
}

extern void gen_version(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("version is not a string");
   application.version = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.version, token.lexeme);
}

extern void gen_filetype(lexer_token token)
{
   application.filetype = token.value.integer;
}

extern void gen_wimpslot(lexer_token token)
{
   application.wimpslot = token.value.integer;
}

extern void gen_extended_cmdline(void)
{
   application.flags |= AF_EXTENDED_CMDLINE;
}

extern void gen_autorun(void)
{
   application.flags |= AF_HAS_AUTORUN;
}

extern void gen_setautorun(lexer_token token)
{
   if (token.number == s_on)
      application.flags |= AF_AUTORUN;
   else
      application.flags &= ~AF_AUTORUN;
}

extern void gen_autosave(void)
{
   application.flags |= AF_HAS_AUTOSAVE;
}

extern void gen_setautosave(lexer_token token)
{
   if (token.number == s_on)
      application.flags |= AF_AUTOSAVE;
   else
      application.flags &= ~AF_AUTOSAVE;
}

extern void gen_leafname(void)
{
   application.flags |= AF_LEAFNAME;
}

extern void gen_numhats(int n)
{
   application.setup->num_hats = n;
}

extern void gen_saveprefix(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("save prefix is not a string");
   application.setup->save_prefix = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.setup->save_prefix, token.lexeme);
}

extern void gen_savesuffix(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("save suffix is not a string");
   application.setup->save_suffix = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.setup->save_suffix, token.lexeme);
}

extern void gen_savefrom(lexer_token token)
{
   application.setup->save_from = token.value.integer;
}

extern void gen_outname(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("output name is not a string");
   application.dft_output_name = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.dft_output_name, token.lexeme);
}

extern void gen_produces_output_dft(lexer_token token)
{
   if (token.number == s_produces_output)
       application.flags |= AF_DFT_PRODUCES_OUTPUT;
   else if (token.number == s_produces_no_output)
       application.flags &= ~AF_DFT_PRODUCES_OUTPUT;
}

extern void gen_outputwindow(void)
{
   application.flags |= AF_HAS_OUTPUT_WINDOW;
}

extern void gen_summarywindow(void)
{
   application.flags |= AF_HAS_SUMMARY_WINDOW;
}

extern void gen_displaydft(lexer_token token)
{
   if (token.number == s_summary)
       application.flags |= AF_DFT_SUMMARY;
}

extern void gen_ctrlchars(lexer_token token)
{
   if (token.number == s_escape)
       application.flags |= AF_ESCAPE_CTRL_CHARS;
   else if (token.number == s_hide)
       application.flags |= AF_HIDE_CTRL_CHARS;
}

extern void gen_tabwidth(lexer_token token)
{
   application.tab_width = token.value.integer;
   if (application.tab_width < 0) application.tab_width = 0;
   else if (application.tab_width > 32) application.tab_width = 32;
}

extern void gen_dbox(void)
{
   application.setup = FEmem_alloc(sizeof(Frontend_dbox));
   application.setup->d = 0;
   application.setup->output_option = 0;
   application.setup->extends = -1;
   application.setup->num_hats = 0;
   application.setup->save_from = -1;
   application.setup->save_prefix = 0;
   application.setup->save_suffix = 0;
   application.setup->wild_card = 0;
   application.setup->icons = 0;
   application.setup->drags = 0;
   application.setup->menu.entries = 0;
}

extern void gen_outputoption(lexer_token token)
{
   if (token.number != s_string_value) gen__syserror("output option is not a string");
   application.setup->output_option = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.setup->output_option, token.lexeme);
}

extern void gen_icon(lexer_token token)
{
   Frontend_icon *i;

   i = FEmem_alloc(sizeof(Frontend_icon));
   gen__current_icon = i;
   i->number = token.value.integer;
   i->flags = 0;
   i->by = 1;
   i->min_val = 0;
   i->max_val = INT_MAX;
   i->maps_to = 0;
   i->dft_value.string = 0;
   i->dft_value.integer = 0;
   i->make_dft_value.string = 0;
   i->make_dft_value.integer = 0;
   i->save_buffer = 0;
   i->separator = '\0';
   i->prefix_by = 0;
   i->followed_by = 0;
   i->exclusions = 0;
   i->deselections = 0;
   i->insert = 0;        /* Aquarius bug-fix */
   application.setup->icons = slist_addend(application.setup->icons, (void *)i);
}

extern void gen_mapstring(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->maps_to = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_icon->maps_to, token.lexeme);
}

extern void gen_conversion(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");

   if      (token.number == s_string)        gen__current_icon->flags |= IF_STRING;
   else if (token.number == s_quoted_string) gen__current_icon->flags |= (IF_STRING | IF_QUOTED_STRING);
   else                                      gen__current_icon->flags |= IF_NUMBER;
}

extern void gen_minval(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->min_val = token.value.integer;
}

extern void gen_maxval(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->max_val = token.value.integer;
}

extern void gen_followiconspaces(void)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->flags |= IF_FOLLOWSPACES;
}

extern void gen_followicon(lexer_token token)
{
   Frontend_follow *f;

   f = FEmem_alloc(sizeof(Frontend_follow));
   f->flags = 0;
   if (token.number == s_string_value)
   {
      f->flags |= IF_STRING;
      f->string = FEmem_alloc(strlen(token.lexeme)+1);
      strcpy(f->string, token.lexeme);
   }
   else
   {
      f->flags |= IF_NUMBER;
      f->follow = token.value.integer;
   }
   gen__follow_icon = f;
   gen__current_icon->followed_by = slist_addend(gen__current_icon->followed_by, (void *)f);
}

extern void gen_separator(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->separator = token.lexeme[0];
}

extern void gen_icon_prefix(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->prefix_by = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_icon->prefix_by,token.lexeme);
}

extern void gen_iconproducesnooutput(void)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->flags |= IF_PRODUCES_NO_OUTPUT;
}

extern void gen_iconproducesoutput(void)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->flags |= IF_PRODUCES_OUTPUT;
}

extern void gen_iconnotsaved(void)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->flags |= IF_NOT_SAVED;
}

extern void gen_changesicon(lexer_token token, int updown)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->incdec = token.value.integer;
   gen__current_icon->flags |= updown;
}

extern void gen_extends(int icon)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   application.setup->extends = icon;
   gen__current_icon->flags |= IF_EXTENDS;
}

extern void gen_extendsfrom(lexer_token token)
{
   application.setup->extends_from = token.value.integer;
}

extern void gen_extendsto(lexer_token token)
{
   application.setup->extends_to = token.value.integer;
}

extern void gen_by(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->by = token.value.integer;
}

extern void gen_insertliteral(lexer_token token)
{
   if (gen__current_icon == 0) gen__syserror("no current icondef");
   gen__current_icon->insert = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_icon->insert,token.lexeme);
}

extern void gen_icondefaults(lexer_token token, int icn)
{
   Frontend_icon *icon = find_icon(icn);

   if (icon != 0)
   {
       switch(token.number)
       {
          case s_on:
             icon->dft_value.integer = icon->make_dft_value.integer = 1;
             break;

          case s_off:
             icon->dft_value.integer = icon->make_dft_value.integer = 0;
             break;

          case s_string_value:
             icon->dft_value.string = icon->make_dft_value.string = FEmem_alloc(strlen(token.lexeme)+1);
             strcpy(icon->dft_value.string, token.lexeme);
             break;

          case s_number_value:
             icon->dft_value.integer = icon->make_dft_value.integer = token.value.integer;
             break;

          default:
             break;
       }
   }
}

extern void gen_make_icondefaults(lexer_token token, int icn)
{
   Frontend_icon *icon = find_icon(icn);

   if (icon != 0)
   {
       switch(token.number)
       {
          case s_on:
             icon->make_dft_value.integer = 1;
             break;

          case s_off:
             icon->make_dft_value.integer = 0;
             break;

          case s_string_value:
             icon->make_dft_value.string = FEmem_alloc(strlen(token.lexeme)+1);
             strcpy(icon->make_dft_value.string, token.lexeme);
             break;

          case s_number_value:
             icon->make_dft_value.integer = token.value.integer;
             break;

          default:
             break;
       }
   }
}

extern void gen_icon_setdeselects(lexer_token token)
{
   gen__deselexcl_icon = find_icon(token.value.integer);
}

extern void gen_icon_deselects(lexer_token token, int menu_or_icon)
{
   Frontend_deselection *d;

   d = FEmem_alloc(sizeof(Frontend_deselection));
   d->menu_or_icon = menu_or_icon;
   d->deselect = token.value.integer;
   if (gen__deselexcl_icon == 0) gen__syserror("no current deselection");
   gen__deselexcl_icon->deselections = slist_addend(gen__deselexcl_icon->deselections, (void *)d);
}

extern void gen_icon_setexcludes(lexer_token token)
{
   gen__deselexcl_icon = find_icon(token.value.integer);
}

extern void gen_icon_excludes(lexer_token token, int menu_or_icon)
{
   Frontend_exclusion *e;

   e = FEmem_alloc(sizeof(Frontend_exclusion));
   e->menu_or_icon = menu_or_icon;
   e->exclude = token.value.integer;
   if (gen__deselexcl_icon == 0) gen__syserror("no current exclusion");
   gen__deselexcl_icon->exclusions = slist_addend(gen__deselexcl_icon->exclusions, (void *)e);
}

extern void gen_make_excludes(lexer_token token, int menu_or_icon)
{
   Frontend_icon *i;
   Frontend_menuentry *m;

   if (menu_or_icon == IS_ICON)
   {
      i = find_icon(token.value.integer);
      i->flags |= IF_MAKE_EXCLUDES;
   }
   else
   {
      m = find_menuentry(token.value.integer+1);
      m->flags |= IF_MAKE_EXCLUDES;
   }
}

extern void gen_menu_setdeselects(lexer_token token)
{
   gen__deselexcl_menuentry = find_menuentry(token.value.integer+1);
}

extern void gen_menu_deselects(lexer_token token, int menu_or_icon)
{
   Frontend_deselection *d;

   d = FEmem_alloc(sizeof(Frontend_deselection));
   d->menu_or_icon = menu_or_icon;
   d->deselect = token.value.integer;
   if (gen__deselexcl_menuentry == 0) gen__syserror("no current deselection");
   gen__deselexcl_menuentry->deselections = slist_addend(gen__deselexcl_menuentry->deselections, (void *)d);
}

extern void gen_menu_setexcludes(lexer_token token)
{
   gen__deselexcl_menuentry = find_menuentry(token.value.integer+1);
}

extern void gen_menu_excludes(lexer_token token, int menu_or_icon)
{
   Frontend_exclusion *e;

   e = FEmem_alloc(sizeof(Frontend_exclusion));
   e->menu_or_icon = menu_or_icon;
   e->exclude = token.value.integer;
   if (gen__deselexcl_menuentry == 0) gen__syserror("no current exclusion");
   gen__deselexcl_menuentry->exclusions = slist_addend(gen__deselexcl_menuentry->exclusions, (void *)e);
}

extern void gen_wildcard(lexer_token token)
{
   application.setup->wild_card = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(application.setup->wild_card, token.lexeme);
}

extern void gen_dragto(lexer_token token)
{
   Frontend_dragto *d;

   d = FEmem_alloc(sizeof(Frontend_dragto));
   gen__current_drag = d;
   d->inserts = 0;
   d->separator = '\0';
   d->drag = (token.number == s_any)?ANY_ICON:
             (token.number == s_iconbar)?ICONBAR_ICON:token.value.integer;
   application.setup->drags = slist_addend(application.setup->drags, (void *)d);
}

extern void gen_insert(lexer_token token)
{
   Frontend_insert *i;

   i = FEmem_alloc(sizeof(Frontend_insert));
   i->insert = token.value.integer;
   if (gen__current_drag == 0) gen__syserror("no current drag");
   gen__current_drag->inserts = slist_addend(gen__current_drag->inserts, (void *)i);
}

extern void gen_dragseparator(lexer_token token)
{
   if (gen__current_drag == 0) gen__syserror("no current drag");
   gen__current_drag->separator = token.lexeme[0];
}

extern void gen_menuentry(void)
{
   Frontend_menuentry *e;

   e = FEmem_alloc(sizeof(Frontend_menuentry));
   gen__current_menuentry = e;
   e->number = entry_num++;
   e->flags = 0;
   e->text = 0;
   e->subtext = 0;
   e->maps_to = 0;
   e->make_dft_buffer = 0;
   e->buffer = 0;
   e->prefix_by = 0;
   e->bufsize = 0;
   e->exclusions = 0;
   e->deselections = 0;
   application.setup->menu.entries = slist_addend(application.setup->menu.entries, (void *)e);
}

extern void gen_addmenutext(lexer_token token)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->text = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_menuentry->text, token.lexeme);
}

extern void gen_menumapsto(lexer_token token)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->maps_to = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_menuentry->maps_to, token.lexeme);
}

extern void gen_subtext(lexer_token token)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->subtext = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_menuentry->subtext, token.lexeme);
}

extern void gen_menubufsize(lexer_token token)
{
   int i;

   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->bufsize = token.value.integer;
   gen__current_menuentry->buffer = FEmem_alloc(gen__current_menuentry->bufsize);
   gen__current_menuentry->save_buffer = FEmem_alloc(gen__current_menuentry->bufsize);
   for (i=0; i<gen__current_menuentry->bufsize; i++)
   {
      gen__current_menuentry->buffer[i] = 0;
      gen__current_menuentry->save_buffer[i] = 0;
   }
}

extern void gen_menu_prefix(lexer_token token)
{

   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->prefix_by = FEmem_alloc(strlen(token.lexeme)+1);
   strcpy(gen__current_menuentry->prefix_by, token.lexeme);
}

extern void gen_menuproducesnooutput(void)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->flags |= IF_PRODUCES_NO_OUTPUT;
}

extern void gen_menuproducesoutput(void)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->flags |= IF_PRODUCES_OUTPUT;
}


extern void gen_menunotsaved(void)
{
   if (gen__current_menuentry == 0) gen__syserror("no current menu");
   gen__current_menuentry->flags |= IF_NOT_SAVED;
}

extern void gen_menudefaults(lexer_token token, int m)
{
   Frontend_menuentry *menu = find_menuentry(m+1);

   if (menu != 0)
   {
       switch(token.number)
       {
          case s_on:
             menu->make_dft_value = 1;
             menu->flags |= IF_SELECTED;
             break;

          case s_off:
             menu->make_dft_value = 0;
             menu->flags &= ~IF_SELECTED;
             break;

          default:
             break;
       }
   }
}

extern void gen_make_menudefaults(lexer_token token, int m)
{
   Frontend_menuentry *menu = find_menuentry(m+1);

   if (menu != 0)
   {
       switch(token.number)
       {
          case s_on:
             menu->make_dft_value = 1;
             break;

          case s_off:
             menu->make_dft_value = 0;
             break;

          default:
             break;
       }
   }
}

extern void gen_sub_menudefaults(lexer_token token, int m)
{
   Frontend_menuentry *menu = find_menuentry(m+1);

   if (menu != 0)
   {
       strcpy(menu->buffer, token.lexeme);
   }
}

extern void gen_make_sub_menudefaults(lexer_token token, int m)
{
   Frontend_menuentry *menu = find_menuentry(m+1);

   if (menu != 0)
   {
       menu->make_dft_buffer = FEmem_alloc(strlen(token.lexeme)+1);
       strcpy(menu->make_dft_buffer, token.lexeme);
   }
}

extern void gen_orderis(lexer_token token, int menu_or_icn, BOOL make_order)
{
   Frontend_orderentry *p;
   p = FEmem_alloc(sizeof(Frontend_orderentry));
   if (menu_or_icn == IS_ICON || menu_or_icn == IS_MENU)
      p->data.number = token.value.integer;
   else if (menu_or_icn == IS_STRING)
   {
      p->data.string = FEmem_alloc(strlen(token.lexeme)+1);
      strcpy(p->data.string, token.lexeme);
   }
   p->type = menu_or_icn;
   if (make_order)
      application.make_ordering = slist_addend(application.make_ordering, (void *)p);
   else
      application.ordering = slist_addend(application.ordering, (void *)p);
}



