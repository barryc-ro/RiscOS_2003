/* Title:    lexer.h
 * Purpose:  lexical analysis of an application description
 * Author:   IDJ
 * History:  05-Apr-90: IDJ: created
 *           11-May-01: ADH: replaced huge daft list of #defines with enum for
 *                           keywords etc.; no change produced in compiled binary
 *
 */

#ifndef __lexer_h
#define __lexer_h

#ifndef BOOL
#include "bool.h"
#endif

/* This has to be kept in sync with the lexer_tokenstrings array
 * in lexer.c.
 */

enum
{
  /* Keywords */

  s_any = 0,
  s_buffer_size,
  s_by,
  s_command_is,
  s_ctrl_chars,
  s_dbox_end,
  s_dbox_start,
  s_decreases,
  s_defaults,
  s_deselections_end,
  s_deselections_start,
  s_deselects,
  s_display_dft_is,
  s_drag_to,
  s_escape,
  s_excludes,
  s_exclusions_end,
  s_exclusions_start,
  s_extends,
  s_fileoutput_end,
  s_fileoutput_start,
  s_filetype,
  s_followed_by,
  s_from,
  s_has_auto_run,
  s_has_auto_save,
  s_has_extended_cmdline,
  s_has_summary_window,
  s_has_text_window,
  s_hide,
  s_icn,
  s_iconbar,
  s_icons_end,
  s_icons_start,
  s_imports_end,
  s_imports_start,
  s_increases,
  s_inserts,
  s_k,
  s_leafname,
  s_make_defaults,
  s_make_excludes,
  s_make_order_is,
  s_maps_to,
  s_max,
  s_menu,
  s_menu_end,
  s_menu_start,
  s_metaoptions_end,
  s_metaoptions_start,
  s_min,
  s_name,
  s_not_saved,
  s_number,
  s_off,
  s_on,
  s_order_is,
  s_output,
  s_output_dft_is,
  s_output_dft_string,
  s_output_option_is,
  s_prefix_by,
  s_produces_no_output,
  s_produces_output,
  s_quoted_string,
  s_separator_is,
  s_spaces,
  s_string,
  s_sub_menu,
  s_summary,
  s_tab_width,
  s_text,
  s_to,
  s_tool_details_end,
  s_tool_details_start,
  s_toolflags,
  s_version,
  s_wild_card_is,
  s_wimpslot,

  /* If you add something so that s_wimpslot isn't the
   * last keyword any more, don't forget to update the
   * definition below.
   */

  #define NKEYWORDS (s_wimpslot + 1)

  /* The following are lexeme types */

  s_string_value,
  s_number_value,
  s_boolean_value,
  s_eof,
  s_semicolon,
  s_bra,
  s_ket,
  s_comma,
  s_dot,
  s_hat,
  s_keywd,

  s_unknown = -1
};


extern char *lexer_tokenstrings[];

extern int line_number;


#define LEXLEN  64
typedef struct
{
   int number;
   union
   {
      int   integer;
      BOOL  boolean;
   } value;
#if VARIABLE_LENGTH_TOKENS
   char *lexeme;
   unsigned int lexeme_size;
#else
   char lexeme[LEXLEN];
#endif
} lexer_token;

#if VARIABLE_LENGTH_TOKENS
extern void lexer_next_token(lexer_token *token);
extern void lexer_copy_token(lexer_token *dst, lexer_token *src);
#else
extern lexer_token lexer_next_token(void);
#endif

#endif





