/* Title:   FEtask.h
 * Purpose: running multiple tasks under the task window module
 * Author:  IDJ
 * History: 24-Apr-90: IDJ: created
 *
 */

#ifndef __FEtask_h
#define __FEtask_h

#ifndef __os_h
#include "os.h"
#endif

#ifndef __wimpt_h
#include "wimpt.h"
#endif

#ifndef __bool_h
#include "bool.h"
#endif

#ifndef __types_h
#include "types.h"
#endif


#define TaskModuleSWI 0x808C0

typedef enum 
{
      FEtask_input   = TaskModuleSWI,      /* Parent has input for child */
      FEtask_output  = TaskModuleSWI + 1,  /* Child has output for parent */
      FEtask_ego     = TaskModuleSWI + 2,  /* Child tells parent its name */
      FEtask_morio   = TaskModuleSWI + 3,  /* Child dies */
      FEtask_morite  = TaskModuleSWI + 4,  /* Parent kills child */
      FEtask_newtask = TaskModuleSWI + 5,  /* External agent requests task window */
      FEtask_suspend = TaskModuleSWI + 6,  /* Parent halts child */
      FEtask_resume  = TaskModuleSWI + 7   /* Parent continues child */
} FEtask_action;

typedef struct
{
      int    size;
      char * data;
} FEtask_data;


extern os_error * FEtask_sendchar(Frontend_outputwin *t, char c);
extern void FEtask_dispose(Frontend_task *s);
extern char *FEtask_get_cmdline(Frontend_outputwin *t);
extern char *FEtask_get_extcmdline(Frontend_outputwin *t);
extern char *FEtask_get_tmpfile(Frontend_outputwin *t);
extern char *FEtask_get_outfile(Frontend_outputwin *t);
extern void FEtask_continue(Frontend_outputwin *t);
extern void FEtask_pause(Frontend_outputwin *t);
extern void FEtask_abort(Frontend_outputwin *t);
extern void FEtask_abort_and_dispose(Frontend_outputwin *t);
extern void FEtask_killalltasks(void);
extern int  FEtask_getflags(Frontend_outputwin *w);
extern BOOL FEtask_anyactive(void);
extern void FEtask_request_taskwindow(char taskcmd[], char tmpfile[], char outfile[], char *extcmdline);
extern void FEtask_init(void);

#endif
