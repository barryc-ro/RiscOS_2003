
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Wimp
        GET     Hdr:UpCall
        GET     Hdr:EnvNumbers
        GET     VersionAsm

                ^       0, R12
ErrorButtons    #       256
ErrorBlock      #       256
State           #       4
State_Off       *       0
State_On        *       1
ReportErrorRegs #       4*6
OldHandlers     #       4*3*MaxEnvNumber
JumpBlock       #       4*11    ; holds r3-r11,r13,pc for ErrorV handler
SVCStackTop     #       4       ; pointer to top of SVC stack
OldSVCStack     #       4       ; copy of SVC stack in case of errors
WorkspaceSize   *       :INDEX: @

        AREA    |Asm$$Code|, CODE, READONLY

Module_BaseAddr

        DCD     0        ; Start
        DCD     Init     - Module_BaseAddr
        DCD     Final    - Module_BaseAddr
        DCD     Service  - Module_BaseAddr
        DCD     Title    - Module_BaseAddr
        DCD     Helpstr  - Module_BaseAddr
        DCD     0        ; Help and command table
        DCD     0        ; SWI base
        DCD     0        ; SWI decode
        DCD     0        ; SWI names
        DCD     0        ; SWI name decode
        DCD     0        ; Message file
        DCD     Modflgs  - Module_BaseAddr

Init
        Push    "lr"
        LDR     r2, [r12]
        TEQ     r2, #0   ; already got workspace?
        BNE     %FT01
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #WorkspaceSize
        SWI     XOS_Module
        Pull    "pc", VS
        STR     r2, [r12]
01      MOV     r12, r2
        MOV     r0, #State_Off
        STR     r0, State
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #16
        SWI     XOS_ReadSysInfo
        LDRVS   r2, =&01C02000   ; kernels without SysInfo 6 always used this
        STR     r2, SVCStackTop
        MOV     r3, r2, LSR #20
        MOV     r3, r3, LSL #20  ; r3 = SVC stack base
        SUB     r3, r2, r3       ; r3 = SVC stack size
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        STRVC   r2, OldSVCStack
        Pull    "pc"

Final
        Push    "lr"
        LDR     r12, [r12]
        MOV     r0, #ModHandReason_Free
        LDR     r2, OldSVCStack
        SWI     XOS_Module
        Pull    "pc"

Title   =       "DebugButton", 0
Helpstr =       "DebugButton", 9, "$Module_HelpVersion", 0
Modflgs DCD     ModuleFlag_32bit

STable  DCD     0
        DCD     Service2 - Module_BaseAddr
        DCD     Service_ErrorStarting
        DCD     Service_ErrorButtonPressed
        DCD     Service_ErrorEnding
        DCD     0

        DCD     STable   - Module_BaseAddr
Service MOV     r0, r0
        Push    "lr"
        SUB     lr, r1, #&40000
        TEQ     lr, #Service_ErrorStarting      - &40000
        TEQNE   lr, #Service_ErrorButtonPressed - &40000
        TEQNE   lr, #Service_ErrorEnding        - &40000
        Pull    "pc", NE
        B       Service3
Service2
        Push    "lr"
        SUB     lr, r1, #&40000
Service3
        LDR     r12, [r12]
        TEQ     lr, #Service_ErrorStarting      - &40000
        BEQ     ErrorStarting
        TEQ     lr, #Service_ErrorEnding        - &40000
        BEQ     ErrorEnding
        ; else drop through...

ErrorButtonPressed
        LDR     lr, State
        CMP     lr, #State_On   ; one of our error boxes?
        Pull    "pc", NE        ; no, then exit
        SUBS    lr, r2, #3      ; additional button?
        Pull    "pc", CC        ; no, then exit
        Push    "r1,r2"
        MOV     r0, r3
        BEQ     %FT10           ; if first button, then start at beginning
05      LDRB    r1, [r0], #1
        TEQ     r1, #','
        BNE     %BT05
        SUBS    lr, lr, #1
        BNE     %BT05
10      ; compare string of pressed button with ours
        ADR     lr, ButtonString
15      LDRB    r1, [r0], #1
        LDRB    r2, [lr], #1
        TEQ     r1, #','
        CMPNE   r1, #31
        TEQLS   r2, #0
        BEQ     %FT50           ; found a match
        TEQ     r1, r2
        BEQ     %BT15           ; compare next character
        ; not our button, so return
        MOV     r0, #0
        Pull    "r1,r2,pc"
50      ; is our button
        STR     r3, ReportErrorRegs + 4*5
        LDR     r0, ReportErrorRegs + 4*0
        ADD     r0, r0, #4      ; -> error message
        SWI     XWimp_CommandWindow
        ADR     r0, ShowRegsString
        SWI     XOS_CLI
        ADR     r0, WhereString
        SWI     XOS_CLI
        BL      SaveStack
        ADR     r0, JumpBlock
        STMIA   r0, {r3-r11, r13, pc}
        BL      InstallHandlers
        NOP     ; STM {pc} is implementation defined
        ADR     r0, StarDebugString
        SWI     XOS_CLI
        MOV     r0, #-1
        SWI     XWimp_CommandWindow
        BL      RemoveHandlers
        MOV     r0, #1
        MOV     r1, #0
        ADR     r2, ReportErrorRegs
        ADD     sp, sp, #4*2
        Pull    "pc"

ShowRegsString
        =       "ShowRegs", 0
WhereString
        =       "Where", 0
StarDebugString
        =       "Debug", 0
ButtonString
        =       "Debug", 0 ; maybe internationalise this one someday
        ALIGN

InstallHandlers
        Entry   "r3-r4"
        MOV     r0, #0
        ADR     r4, OldHandlers
01      TEQ     r0, #ErrorHandler
        ADREQ   r1, MyErrorHandler
        ADREQ   r3, ErrorBlock
        TEQ     r0, #ExitHandler
        ADREQ   r1, MyExitHandler
        TEQ     r0, #UpCallHandler
        ADREQ   r1, MyUpCallHandler
        TEQNE   r0, #ExitHandler
        TEQNE   r0, #ErrorHandler
        MOVEQ   r2, r12
        SWINE   XOS_ReadDefaultHandler
        SWI     XOS_ChangeEnvironment
        STMIA   r4!, {r1-r3}
        ADD     r0, r0, #1
        CMP     r0, #MaxEnvNumber
        BLT     %BT01
        EXIT

RemoveHandlers
        Entry   "r3-r4"
        MOV     r0, #0
        ADR     r4, OldHandlers
01      LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        ADD     r0, r0, #1
        CMP     r0, #MaxEnvNumber
        BLT     %BT01
        EXIT

MyErrorHandler
        ; We've dropped to USR mode with IRQs on and the SVC stack flattened,
        ; so we must assume that SVC stack contents have been trashed
        SWI     XOS_EnterOS
        MOV     r12, r0
        ADR     r0, ErrorBlock + 8
        SWI     XOS_Write0
        SWI     XOS_NewLine
        LDR     r13, JumpBlock + 4*9 ; so no interrupts trash our restored stack
        BL      RestoreStack
        ADR     r0, JumpBlock
        LDMIA   r0, {r3-r11,r13,pc}  ; reset everything back to the *Debug

MyExitHandler
        MOV     r0, #-1
        SWI     XWimp_CommandWindow
        BL      RemoveHandlers
        SWI     XOS_Exit

MyUpCallHandler
        TEQ     r0, #UpCall_NewApplication
        MOVEQ   r0, #0               ; don't allow corruption of app space!
        MOV     pc, lr

SaveStack
        Entry   "r3-r9"
        LDR     r14, SVCStackTop
        MOV     r0, r14, LSR #20
        MOV     r0, r0, LSL #20
        LDR     r1, OldSVCStack
01      LDMIA   r0!, {r2-r9}
        STMIA   r1!, {r2-r9}
        CMP     r0, r14
        BNE     %BT01
        EXIT

RestoreStack
        ; Can't use any stack ourselves!
        LDR     r10, SVCStackTop
        MOV     r0, r10, LSR #20
        MOV     r0, r0, LSL #20
        LDR     r1, OldSVCStack
01      LDMIA   r1!, {r2-r9}
        STMIA   r0!, {r2-r9}
        CMP     r0, r10
        BNE     %BT01
        MOV     pc, r14

ErrorStarting
        AND     lr, r3, #&F00
        TEQ     lr, #&700       ; program report?
        BEQ     %FT10           ; always add button if so
        LDR     lr, [r2, #0]
        TST     lr, #&80000000  ; exception error?
        Pull    "pc", EQ        ; no, then exit
10
        TST     r3, #1<<8
        TEQNE   r7, #0
        TSTEQ   r3, #3
        ORREQ   r3, r3, #1      ; must always leave at least one original button
        Push    "r0"
        MOV     r0, #State_On
        STR     r0, State
        ADR     r0, ErrorButtons
        TST     r3, #1<<8       ; already "new" style?
        ORREQ   r3, r3, #1<<8   ; make so if not
        MOVEQ   r5, #0
        MOVEQ   r6, #1
        BEQ     %FT50
        ; copy existing button string, if any
        CMP     r7, #-1
        CMPNE   r7, #0
        BEQ     %FT50
40      LDRB    lr, [r7], #1
        CMP     lr, #' '
        STRCSB  lr, [r0], #1
        BCS     %BT40
        MOV     lr, #','
        STRB    lr, [r0], #1
50      ; append our button
        ADRL    r7, ButtonString
60      LDRB    lr, [r7], #1
        STRB    lr, [r0], #1
        TEQ     lr, #0
        BNE     %BT60
        ADR     r7, ErrorButtons
        ADD     r12, r12, #:INDEX: ReportErrorRegs
        STMIA   r12, {r2-r7}
        Pull    "r0,pc"

ErrorEnding
        MOV     lr, #State_Off
        STR     lr, State
        Pull    "pc"

        END
