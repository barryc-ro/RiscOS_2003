#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.DeskMem.h"
#include "Desk.Error2.h"

#include "Event.h"

#if defined( ClipApp_USE_SMALL_EVENT)
	
	Desk_task_handle	Desk_Event_taskhandle;
	const char*		Desk_Event_taskname;
	
	Desk_event_pollblock	Desk_Event_lastevent;
	Desk_event_pollmask	Desk_Event_mask;
	
	
	
	void	Desk_Event_Initialise( const char* taskname)
		{
		_swi( Wimp_Initialise, _INR(0,2)|_OUT(1), 200, *(int*)"TASK", taskname, &Desk_Event_taskhandle);
		Desk_Event_mask.value	= 0;
		Desk_Event_mask.data.null		= 1;
		Desk_Event_mask.data.ptrleave	= 1;
		Desk_Event_mask.data.ptrenter	= 1;
		Desk_Event_mask.data.losecaret	= 1;
		Desk_Event_mask.data.gaincaret	= 1;
		}
	
	void	Desk_Event_CloseDown( void)
		{
		if ( Desk_Event_taskhandle > 0)	_swi( Wimp_CloseDown, _INR(0,1), Desk_Event_taskhandle, *(int*)"TASK");
		Desk_Event_taskhandle = 0;
		}
	
	
	
	
	typedef struct Desk_Event_handler_block	{
		struct Desk_Event_handler_block*	previous;
		Desk_Event_handler			handler;
		void*					reference;
		}
		Desk_Event_handler_block;
	
	static Desk_Event_handler_block*	Desk_Event_lasthandler = NULL;
	
	
	
	void	Desk_Event_MessagesClaim( Desk_Event_handler handler, void* reference)
		{
		Desk_Event_handler_block*	handlerblock = Desk_DeskMem_MallocType( Desk_Event_handler_block);
		handlerblock->handler		= handler;
		handlerblock->reference		= reference;
		handlerblock->previous		= Desk_Event_lasthandler;
		Desk_Event_lasthandler	= handlerblock;
		}
	
	
	void	Desk_Event_MessagesRelease( Desk_Event_handler handlerfn, void* reference)
		{
		Desk_Event_handler_block*	handler;
		Desk_Event_handler_block*	next;
		
		for	(
			handler = Desk_Event_lasthandler, next=NULL;
			handler;
			next = handler, handler = handler->previous
			)
			{
			if ( handler->handler == handlerfn && handler->reference == reference)	{
				if (next)	next->previous			= handler->previous;
				else		Desk_Event_lasthandler	= handler->previous;
				Desk_DeskMem_Free( handler);
				return;
				}
			}
		
		Desk_Debug_Printf( "Desk_Event_ReleaseMessages: Attempt to release unknown handler 0x%p, reference 0x%p", handlerfn, reference);
		}
	
	
	/*
	void	Desk_Event_ReleaseAll()
		{
		Desk_Event_handler_block*	handler;
		Desk_Event_handler_block*	previous;
		
		for	(
			handler = Desk_Event_lasthandler;
			handler;
			handler = previous
			)
			{
			previous = handler->previous;
			DeskMem_Free( handler);
			}
		}
	*/
	
	
	static void	Desk_Event_DispatchMessage( Desk_event_pollblock* event)
		{
		Desk_Event_handler_block*	handler;
		Desk_Event_handler_block*	previous;
		
		for	(
			handler = Desk_Event_lasthandler;
			handler;
			handler = previous
			)
			{
			previous = handler->previous;
			if ( handler->handler( event, handler->reference))	break;
			}
		return;
		}
	
	
	static void	Desk_Event_DispatchNonMessage( Desk_event_pollblock* event)
		{
		Desk_Debug_Printf( Desk_error_PLACE "Desk_Event_DispatchNonMessage: non-message type %i received.\n", event->type);
		}
	
	void	Desk_Event_Poll( void)
		{
		_swi( Wimp_Poll, _INR(0,1)|_OUT(0), Desk_Event_mask, &Desk_Event_lastevent.data, &Desk_Event_lastevent.type);
		
		if	(
			   Desk_Event_lastevent.type == Desk_event_USERMESSAGE
			|| Desk_Event_lastevent.type == Desk_event_USERMESSAGERECORDED
			|| Desk_Event_lastevent.type == Desk_event_ACK
			)
			{
			Desk_Event_DispatchMessage( &Desk_Event_lastevent);
			}
		
		else	Desk_Event_DispatchNonMessage( &Desk_Event_lastevent);
		}
	
#endif	/* #if defined( ClipApp_USE_SMALL_EVENT)	*/
