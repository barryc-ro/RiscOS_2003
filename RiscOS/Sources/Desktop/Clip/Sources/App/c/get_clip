#include "string.h"

#include "Desk.File.h"
#include "Desk.Str.h"
#include "Desk.Wimp.h"
#include "Desk.Debug.h"
#include "Desk.WimpSWIs.h"
#include "Desk.Kbd.h"
#include "Desk.Wimp.h"

#include "Event.Event.h"

#include "App.h"
#include "Import.h"
#include "get_clip.h"
#include "WStructs.h"
#include "Buffer.h"



/*static void	ClaimOrReleaseGetClipboardMessages( event_claimorreleasefn, ClipApp_block* app);*/


static void	ClipApp_ReceiveClipboard_Cleanup( ClipApp_block* app);




static int	ClipApp_FileImporter( Desk_message_dataload* data, Desk_Import_clientinfo* info)
	{
	return ClipApp_Buffer_LoadFromFile( data, info);
	}




static Desk_bool	GetClipboardMessageHandler( Desk_event_pollblock* event, void* reference)
	{
	ClipApp_block*		app	= (ClipApp_block*)		reference;
	
	if ( event->type == Desk_event_ACK && event->data.message.header.myref==app->getclipboard.ourref)	{
		Desk_Debug_Printf( Desk_error_PLACE "DATAREQUEST bounced (ref %i)...\n", app->getclipboard.ourref);
		ClipApp_ReceiveClipboard_Cleanup( app);
		return Desk_bool_TRUE;
		}
	
	if ( event->data.message.header.yourref == app->getclipboard.ourref)	{	/* It is a reply to our previous message	*/
		Desk_Debug_Printf( Desk_error_PLACE "Received message %i reply to our request for clipboard...\n", event->data.message.header.action);
		
		if ( event->data.message.header.sender == Desk_Event_taskhandle)	{
			/* This is our broadcast message...	*/
			return Desk_bool_TRUE;
			}
		
		else if ( event->data.message.header.action == Desk_message_DATASAVE)	{
			#ifdef Desk_DEBUG
				if ( !Desk_Kbd_KeyDown( Desk_inkey_CTRL))	{
					Desk_Debug_Printf( Desk_error_PLACE "Calling Desk_Import_ImportData, with RAM transfer\n");
					Desk_Import_ImportData( 
						event, ClipApp_FileImporter, 
						ClipApp_Buffer_RAMImport_Allocator, 
						ClipApp_Buffer_RAMImport_RAMHandler, 
						reference
						);
					}
				else	{
					Desk_Debug_Printf( Desk_error_PLACE "Calling Desk_Import_ImportData, without RAM transfer\n");
					Desk_Import_ImportData( 
						event, ClipApp_FileImporter,
						NULL,
						NULL,
						reference
						);
					}
			#else
				Desk_Import_ImportData( 
					event, 
					ClipApp_FileImporter, 
					ClipApp_Buffer_RAMImport_Allocator, 
					ClipApp_Buffer_RAMImport_RAMHandler, 
					reference
					);
				Desk_Debug_Printf( Desk_error_PLACE "Calling Desk_Import_ImportData\n");
			#endif
			}
		
		else	{
			Desk_Debug_Printf( Desk_error_PLACE "recieved unexpected message reply, action=%i\n", event->data.message.header.action);
			}
		
		ClipApp_ReceiveClipboard_Cleanup( app);
		return Desk_bool_TRUE;
		}
	
	return Desk_bool_FALSE;
	}






void	ClipApp_ReceiveClipboard( Desk_event_pollblock* event, ClipApp_block* app)
	/*
	Does a 'paste' operation to get clipboard data from whoever has it, and then
	claims the clipboard.
	 */
	{
	Desk_message_block		message;
	Desk_message_datarequest*	datarequest = (Desk_message_datarequest*) &message.data;
	/* Need to use pointer for now because DeskLib's message_block union doesn't have a message_datarequest yet...	*/
	
	if ( app->buffer.info != ClipApp_BufferInfo_EMPTY)	{
		Desk_Debug_Printf( Desk_error_PLACE "Can't get clipboard - already own it.\n");
		return;
		}
	
	if ( app->getclipboard.ourref != -1)	{
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_ReceiveClipboard called twice... aborting first thread.\n");
		ClipApp_ReceiveClipboard_Cleanup( app);
		}
	
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_ReceiveClipboard called...\n");
	
	message.header.size		= sizeof( Desk_message_block);	/* Should calculate this...	*/
	message.header.yourref		= event->data.message.header.myref;
	message.header.action		= Desk_message_DATAREQUEST;
	datarequest->window		= (Desk_window_handle) Desk_Event_taskhandle;	/* So that the clipboard-app can simply reply to the window	*/
	datarequest->reference		= app;
	datarequest->pos.x			= 0;
	datarequest->pos.y			= 0;
	datarequest->flags.value		= 0;
	datarequest->flags.data.clipboard	= 1;
	datarequest->filetypes[0]		= -1;	/* We can handle any filetype	*/
	
	#ifdef Desk_DEBUG
		{
		if ( Desk_Kbd_KeyDown( Desk_inkey_SHIFT))
			{
			datarequest->filetypes[0]		= 0xfff;
			datarequest->filetypes[1]		= -1;
			Desk_Debug_Printf( Desk_error_PLACE "DATAREQUEST File list is 0xfff,-1.\n");
			}
		else	{
			Desk_Debug_Printf( Desk_error_PLACE "DATAREQUEST File list is -1.\n");
			}
		}
	#endif
	
	Desk_Wimp_SendMessage( Desk_event_USERMESSAGERECORDED, (Desk_message_block*) &message, 0, NULL);
	app->getclipboard.ourref = message.header.myref;
	
	Desk_Event_MessagesClaim( GetClipboardMessageHandler, app);
	/*ClaimOrReleaseGetClipboardMessages( Event_Claim, app);*/
	Desk_UNUSED( event);
	}

/*
static void	ClaimOrReleaseGetClipboardMessages( event_claimorreleasefn fn, ClipApp_block* app)
	{
	fn( event_SEND,		event_ANY, event_ANY, GetClipboardMessageHandler, app);
	fn( event_SENDWANTACK,	event_ANY, event_ANY, GetClipboardMessageHandler, app);
	fn( event_ACK,		event_ANY, event_ANY, GetClipboardMessageHandler, app);
	}
*/


static void	ClipApp_ReceiveClipboard_Cleanup( ClipApp_block* app)
	{
	/*ClaimOrReleaseGetClipboardMessages( Event_Release, app);*/
	Desk_Event_MessagesRelease( GetClipboardMessageHandler, app);
	app->getclipboard.ourref = -1;
	}

