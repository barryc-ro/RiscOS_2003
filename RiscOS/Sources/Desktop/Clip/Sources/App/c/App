#include <stdlib.h>
#include <signal.h>

#include "swis.h"

#include "Desk.Event.h"
#include "Desk.Debug.h"
#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.JumpRaw.h"
#include "Desk.Jump.h"
#include "Desk.BackTrace.h"

#include "ModMalloc.ModMalloc.h"

#include "MemCheck.MemCheck.h"

#include "get_clip.h"
#include "send_clip.h"
#include "Test.h"
#include "Buffer.h"
#include "WStructs.h"
#include "AppForMod.h"
#include "Desk.DynamArea.h"






static Desk_bool	ClipApp_HandleMessage_ClaimEntity( Desk_event_pollblock* event, void* reference)
	{
	ClipApp_block*		app	= (ClipApp_block*) reference;
	
	if ( event->data.message.header.sender==Desk_Event_taskhandle)		return Desk_bool_FALSE;	/* We are claiming the clipboard...	*/
	if ( event->data.message.header.action != Desk_message_CLAIMENTITY)	return Desk_bool_FALSE;
	
	ClipApp_Buffer_Free( app);
	return Desk_bool_TRUE;
	}


static Desk_bool	ClipApp_HandleMessage_DataRequest( Desk_event_pollblock* event, void* reference)
/*
Someone wants the clipboard
 */
	{
	ClipApp_block*			app	= (ClipApp_block*)		reference;
	Desk_message_datarequest*	dr	= (Desk_message_datarequest*)	&event->data.message.data;
	
	if ( event->data.message.header.action != Desk_message_DATAREQUEST)	return Desk_bool_FALSE;
	if ( event->data.message.header.sender == Desk_Event_taskhandle)	return Desk_bool_FALSE;
	
	if ( dr->flags.data.clipboard)	{
		if ( app->buffer.info == ClipApp_BufferInfo_CLIPBOARD)	{
			Desk_Debug_Printf( Desk_error_PLACE "ClipApp_HandleMessage_DataRequest - sending clipboard\n");
			ClipApp_SendClipboard( event, app);	/* We currently own the clipboard, so we have to give it up.	*/
			return Desk_bool_TRUE;
			}
		else	{
			Desk_Debug_Printf( Desk_error_PLACE "ClipApp_HandleMessage_DataRequest - not sending clipboard - we don't have it...\n");
			return Desk_bool_FALSE;
			}
			/* 
			Could store the message-sender's task handle here, so we know who owns the clipboard,
			but not sure if this would be reliable because the previous clipboard holder could
			(incorrectly?) acknowledge the broadcast, which might prevent us from seeing it.
			 */
		}
	
	else	return Desk_bool_FALSE;
	}



static Desk_bool	ClipApp_HandleMessage_ReleaseEntity( Desk_event_pollblock* event, void* reference)
/*
Someone wants to give-up the clipboard
 */
	{
	ClipApp_block*			app	= (ClipApp_block*)		reference;
	Desk_message_releaseentity*	ce	= (Desk_message_releaseentity*) &event->data.message.data.words[0];
	
	if ( event->data.message.header.action != Desk_message_RELEASEENTITY)	return Desk_bool_FALSE;
	
	if ( ce->data.clipboardrelease)	{
	
		if ( app->buffer.info == ClipApp_BufferInfo_CLIPBOARD)	{
			Desk_Debug_Printf( 
				Desk_error_PLACE 
				"Received Message_ReleaseEntity from someone wanting to give up the clipboard, but "
				"we own the clipboard. This shouldn't happen...\n"
				);
			return Desk_bool_TRUE;
			}
		else	{
			ClipApp_ReceiveClipboard( event, app);
			return Desk_bool_TRUE;
			}
		}
	
	else	return Desk_bool_FALSE;
	}



static	ClipApp_block	Clip_global_app;




#ifdef Desk__MODULE_CLIENT
static Desk_bool	ClipApp_HandleMessage_MessageQuitHandler( Desk_event_pollblock* event, void* reference)
	{
	ClipApp_block*	app = (ClipApp_block*) reference;
	if ( event->data.message.header.action == Desk_message_QUIT)	{	/* Desktop closing down...	*/
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_MessageQuitHandler detected message_QUIT\n");
		app->quit = Desk_bool_TRUE;
		return Desk_bool_TRUE;
		}
	else	return Desk_bool_FALSE;
	}
#endif




static void	ClipApp_Finalise( ClipApp_block* app)
	{
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Finalise called, app=0x%p, taskhandle=%i\n", app, Desk_Event_taskhandle);
	Desk_Debug_Printf( Desk_error_PLACE "just about to close down task...\n");
	Desk_Event_CloseDown();
	Desk_DynamicArea_DeleteAll();
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Finalise finished.\n");
	}



_kernel_oserror*	ClipApp_ModFinalise( int fatal, int podule, void* pw)
/*
Called when the module is killed.
 */
	{
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_ModFinalise\n");
	ClipApp_Finalise( &Clip_global_app);
	if ( fatal)	ModMalloc_FreeAll();
	return NULL;
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}







_kernel_oserror*	ClipApp_Initialise( const char* args)
	{
	ClipApp_block*	app = (ClipApp_block*) &Clip_global_app;
	static int	staticfirsttime = 1;
	int		firsttime = (staticfirsttime) ? 1 : 0;
	
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Initialise called\n");
	
	staticfirsttime = 0;
	
	Desk_UNUSED( args);
	
	Desk_JumpAuto_Try	{
		
		if (firsttime)	{
			#ifdef Desk__MODULE_CLIENT
				Desk_DeskMem_SetAllocFunctions( ModMalloc_Malloc, ModMalloc_Realloc, ModMalloc_Calloc, ModMalloc_Free, NULL);
				/* These functions use the RMA instead of application space.	*/
			#endif
		
			Desk_Error2_HandleAllSignals();
			}
		
		Desk_Event_Initialise( "ClipHolder");
		
		if (firsttime)	{
			Desk_Debug_Initialise();	/* Do this after Event_Initialise, so that *pipe in taskwindow for debug output is possible.	*/
			Desk_Debug_SetNestingIndentation( "  ");
			}
		
		ClipApp_Buffer_Initialise( app);		/* Creates dynamic area	*/
		app->getclipboard.ourref	= -1;		/* Message ref used in message protocol.	*/
		app->quit			= Desk_bool_FALSE;	/* Set to Desk_bool_TRUE when 'Quit' is chosen from test menu.	*/
		
		Desk_Debug_Printf( Desk_error_PLACE "Called Event_Initialise, firsttime=%i\n", firsttime);
		
		ClipApp_Test_Init( app);
		
		Desk_Debug_Printf( Desk_error_PLACE "Called ClipApp_Test_Init\n");
		
		if (firsttime)	{
		
			#ifdef Desk__MODULE_CLIENT
				Desk_Event_MessagesClaim( ClipApp_HandleMessage_MessageQuitHandler, app);
				/* We handle message_QUIT so that Event_'s handler doesn't simply call exit()	*/
			#endif
			
			Desk_Event_MessagesClaim( ClipApp_HandleMessage_ReleaseEntity,	app);
			Desk_Event_MessagesClaim( ClipApp_HandleMessage_DataRequest,	app);
			Desk_Event_MessagesClaim( ClipApp_HandleMessage_ClaimEntity,	app);
			}
		
		while (!app->quit)	Desk_Event_Poll();
		}
	
	Desk_JumpAuto_Catch	{
		ClipApp_Finalise( app);
		#ifdef Desk_DEBUG
			Desk_Error2_VerboseExit( &Desk_Error2_globalblock);
		#else
			Desk_Error2_Exit( &Desk_Error2_globalblock);
		#endif
		}
	
	Desk_JumpAuto_EndCatch
	
	ClipApp_Finalise( app);
	
return NULL;
	}


#ifndef Desk__MODULE_CLIENT
int	main( void)
	{
	Desk_Error2_Init_JumpSig();
	
	MemCheck_Init();
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_SetStoreMallocFunctions( 1);
	#ifdef MemCheck_MEMCHECK
		atexit( MemCheck_OutputBlocksInfo);
	#endif
	
	ClipApp_Initialise( NULL);
	return 0;
	}
#endif



