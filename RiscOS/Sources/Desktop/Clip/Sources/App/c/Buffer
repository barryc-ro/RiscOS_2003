#include <stdlib.h>
#include <string.h>

#include "Desk.Debug.h"
#include "Desk.DeskMem.h"
#include "Desk.File.h"
#include "Desk.Wimp.h"
#include "Desk.WimpSWIs.h"
#include "Desk.JumpRaw.h"
#include "Desk.DynamArea.h"

#include "Desk.Event.h"

#include "Buffer.h"
#include "WStructs.h"
#include "App.h"






static Desk_bool	ClipApp_BroadcastClaimEntity_NullHandler( Desk_event_pollblock* event, void* reference)
	{
	ClipApp_block*	app = (ClipApp_block*) reference;
	
	
	Desk_message_block		mess;
	Desk_message_claimentity*	ce = (Desk_message_claimentity*) &mess.data;
	
	Desk_Event_Release( Desk_event_NULL, Desk_event_ANY, Desk_event_ANY, ClipApp_BroadcastClaimEntity_NullHandler, app);
	
	mess.header.action	= Desk_message_CLAIMENTITY;
	mess.header.size	= sizeof( Desk_message_block);
	mess.header.yourref	= 0;
	ce->value = 0;
	ce->data.clipboardclaim = 1;
	Desk_Wimp_SendMessage( Desk_event_USERMESSAGE, (Desk_message_block*) &mess, 0, 0);
	Desk_UNUSED( app);
	
	return Desk_bool_FALSE;
	
	Desk_UNUSED( event);
	}




static void	ClipApp_BroadcastClaimEntity( ClipApp_block* app)
	{
	Desk_Event_Claim( Desk_event_NULL, Desk_event_ANY, Desk_event_ANY, ClipApp_BroadcastClaimEntity_NullHandler, app);
	}



void	ClipApp_Buffer_Free( ClipApp_block* app)
	{
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Buffer_Free - freeing clipboard.\n");
	
	if ( app->buffer.info == ClipApp_BufferInfo_EMPTY)	{
		Desk_Debug_Printf( Desk_error_PLACE "Clipboard already empty...\n");
		return;
		}
	
	app->buffer.datasize	= 0;
	app->buffer.info	= ClipApp_BufferInfo_EMPTY;
	
	Desk_DynamicArea_Delete( &app->buffer.dynamicarea);
	//Desk_DeskMem_Free( app->buffer.data);
	
	app->buffer.data = 0;
	}



static void*	ClipApp_Buffer_Realloc( ClipApp_block* app, size_t newsize)
	{
	app->buffer.data = Desk_DynamicArea_SetSize( &app->buffer.dynamicarea, newsize);
	//app->buffer.data = Desk_DeskMem_Realloc( app->buffer.data, newsize);
	return app->buffer.data;
	}


static void*	ClipApp_Buffer_Malloc( ClipApp_block* app, size_t size)
	{
	Desk_DynamicArea_Create( &app->buffer.dynamicarea, size, "ClipHolder");
	app->buffer.data = app->buffer.dynamicarea.data;
	//app->buffer.data = Desk_DeskMem_Malloc( size);
	return app->buffer.data;
	}



int	ClipApp_Buffer_LoadFromFile( Desk_message_dataload* data, Desk_Import_clientinfo* info)
	{
	ClipApp_block*	app = (ClipApp_block*) info->reference;
	void*	buffer;
	int	size;
	
	Desk_JumpAuto_Try	{
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Buffer_LoadFromFile calling ClipApp_Buffer_Free (precaution)\n");
		ClipApp_Buffer_Free( app);	/* Just in case this is allocated...	*/
		size	= Desk_File_Size (data->filename);
		buffer	= ClipApp_Buffer_Malloc( app, size);
		Desk_File_LoadTo( data->filename, buffer, &size);
		}
		
	Desk_JumpAuto_Catch	{
		ClipApp_Buffer_Free( app);
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Buffer_LoadFromFile failed\n");
		return 1;
		}
	
	Desk_JumpAuto_EndCatch
	
	
	ClipApp_BroadcastClaimEntity( app);
	app->buffer.data	= buffer;
	app->buffer.datasize	= size;
	app->filetype		= data->filetype;
	strcpy( app->leafname, info->initialdatasave.data.datasave.leafname);
	app->buffer.info = ClipApp_BufferInfo_CLIPBOARD;
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_FileImporter loaded file. type is %i, leafname '%s', size %i\n", 
		app->filetype, app->leafname, app->buffer.datasize
		);
	return 0;
	}





void*	ClipApp_Buffer_RAMImport_Allocator( size_t* buffsize, Desk_Import_clientinfo* info)
	{
	ClipApp_block*	app = (ClipApp_block*) info->reference;
	int		extra = (info->ram_progress) ? info->initialdatasave.data.datasave.estsize/8 : 1+info->initialdatasave.data.datasave.estsize;
	void*		temp;
	
	if ( info->ram_progress==0)	{
		Desk_Debug_Assert( app->buffer.info != ClipApp_BufferInfo_CLIPBOARD);
		app->buffer.info = ClipApp_BufferInfo_TEMP;	/* Ensure buffer won't be treated as proper data.	*/
		}
	
	if ( extra <= 0)	extra = 256;
	
	Desk_JumpAuto_TryCatch(
		temp = ClipApp_Buffer_Realloc( app, info->ram_progress + extra);
		,
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Import_RAMAllocator couldn't realloc memory for RAM transfer - aborting import\n");
		*buffsize = 0;
		ClipApp_Buffer_Free( app);
		return NULL;
		)
	
	*buffsize = extra;
	return (char*) temp + info->ram_progress;
	}




void	ClipApp_Buffer_RAMImport_RAMHandler( void* buffer, int numbytes, Desk_Import_clientinfo* info)
	{
	ClipApp_block*	app = (ClipApp_block*) info->reference;
	if ( numbytes==0)	{
		/* End of transfer	*/
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Buffer_RAMImport_RAMHandler - succesfull end of transfer\n");
		app->buffer.datasize	= info->ram_progress;
		app->buffer.info	= ClipApp_BufferInfo_CLIPBOARD;
		app->filetype		= info->initialdatasave.data.datasave.filetype;
		ClipApp_BroadcastClaimEntity( app);
		}
	
	else if ( numbytes==-1)	{
		Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Import_RAMHandler - sender aborted...\n");
		ClipApp_Buffer_Free( app);
		}
	
	else	{
		/* Deal with extra data.	*/
		/*
		Nothing to do - all extra data is appended to buffer, so
		we don't have to move it around after each transfer...
		 */
		}
	
	Desk_UNUSED( buffer);
	}



int	ClipApp_Buffer_RAMExporter( Desk_message_block* ramfetch, int progress, void* reference)
	{
	ClipApp_block*	app	= (ClipApp_block*) reference;
	int		n	= Desk_MIN( app->buffer.datasize - progress, ramfetch->data.ramfetch.buffsize);
	
	Desk_Wimp_TransferBlock(
		Desk_Event_taskhandle,
		(char*) app->buffer.data + progress,
		ramfetch->header.sender,
		ramfetch->data.ramfetch.buffer,
		n
		);
	
	Desk_Debug_Printf( Desk_error_PLACE "ClipApp_Buffer_RAMExporter just Wimp_TransferBlock'd %i bytes\n", n);
	return n;
	}




int	ClipApp_Buffer_FileSaver( const char* filename, void* reference)
	{
	ClipApp_block*	app = (ClipApp_block*) reference;
	Desk_File_SaveMemory( filename, app->buffer.data, app->buffer.datasize);
	Desk_File_SetType( filename, app->filetype);
	return 0;
	}



typedef union	{
	int	value;
	struct	{
		unsigned int	access			:  4;
		unsigned int	notbufferable		:  1;
		unsigned int	notcacheable		:  1;
		unsigned int	doublemapped		:  1;
		unsigned int	notdraggable		:  1;
		unsigned int	specificphysicalpages	:  1;
		unsigned int	other9_31		: 23;
		}
		data;
	}
	Desk_dynamicarea_flags;


void	ClipApp_Buffer_Initialise( ClipApp_block* app)
	{
	app->buffer.datasize	= 0;
	app->buffer.info	= ClipApp_BufferInfo_EMPTY;
	
	Desk_DynamicArea_Create( &app->buffer.dynamicarea, -1, "ClipHolder");
	//	app->buffer.data	= 0;
	}

