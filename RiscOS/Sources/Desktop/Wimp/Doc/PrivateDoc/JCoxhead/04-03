*** SCSI::Doves.$.Libra.WIMP.JCoxhead.WStoye03      Fri Oct 30 14:47:38 1992
--- SCSI::Doves.$.Libra.WIMP.JCoxhead.WStoye04      Tue Nov 03 16:26:20 1992
***************
*** 1,2 ****
! Specification for updates to Window Manager and related modules
! ===============================================================
--- 1,2 ----
! Specification for a Proportional System Font under the Window Manager
! =====================================================================
***************
*** 7 ****
--- 8 ----
+ 0.03 WS 03-Nov-92 - more issues added.
***************
*** 14 ****
- 
--- 14 ----
***************
*** 17 ****
- 
--- 16 ----
***************
*** 24 ****
! with the present. Or, leave this decision to documentation people.
--- 23,35 ----
! with the present. At the moment I'm not sure I'm totally consistant on
! this.
! 
! Underlining taken out this time round - not really needed.
! DDV:
! How about the underline character aswell, we may should reserve two
! characters:
!  & <char>       causes the next character to be underlined ( Initialise version > 316 )
!  > <char>       causes following text to be right aligned  ( Initialise version > 316 )
!  &&             inserts &
!  >>             inserts >
! (WS): If we did escapes I'd far rather reserve \, and use it for other things
! too. But, I think we should avoid anything like this this time round.
***************
*** 28 ****
--- 40,73 ----
+ (DDV):This is a good point, the user should be given some control over the aspect
+ ratio, Wimp$XYRatio.
+ This should all be hidden from the user by an application that allows them
+ to manipulate the size, width, font and other characteristics.
+ (WS): should this application be added to this package? Or perhaps this should
+ be added to !3DIcons?
+ 
+ (JCoxhead): Font size: should not be under user control. It is totally
+ impractical to require every application to resize its templates to take
+ account of different sizes of WIMP font. The WIMP font should always be such
+ that the character bbox of the font is 32 by 16 O S units: i e, the size of
+ system font at the moment. Applications that do want to be able to resize
+ their templates (and there won't be many) can do this themselves, in the
+ usual way. This guarantees that all existing dialogue boxes will work with
+ any font. It results in a font slightly narrower than the one in the
+ prototype. There would be no WIMP$FontSize variable in this scenario. No
+ menu- calculation software is required in the WIMP.
+ (DDV):The user should have full control over the font size, users of higher
+ resolution displays should be able to change the size.  Applications should
+ not be expected to resize dialogues, dialogues are designed assuming 12
+ point if the user sets the font to be bigger then it will be clipped unless
+ the application in control is feeling daring.
+ (WS):I would have thought that we provide this setting in order to allow
+ the user to make minor changes, such as to a slightly changed custom variant
+ of homerton, but that we do not envisage or support major changes to this font.
+ Isn't this a reasonable/sensible middle path to take? I think it is what other
+ window systems do. Menu width calculation is quite important in order to
+ bridge the gap between system font and homerton.
+ 
+ JCoxhead: The rule for shortcut detection in menus should be 'if the entry matches
+       ^. <key>
+ (i e, one or more of anything, a space and then a key name), then right
+ justify the key name.
+ WS: don't really understand what this is saying!
***************
*** 45,46 ****
! Define the validation string entry that turns off tabbing in wimp font
! icons.
--- 90,104 ----
! OR (JCoxhead):For up-arrow: how about a new font manager control code, 0x8B,
! which causes an up-arrow to be painted? This would work in all cases for
! everything everywhere, would still work in system font, and generally save a
! lot of fuss. It could also be printed.
! 
! OR (DDV):The Font Manager should not know anything about what the Window Manager is
! doing, plus there are fonts which may make use of characters in this
! character range.
! I suggest we have two system variables:
!  Wimp$Font        used for Window Manager text rendering
!  Wimp$SymbolFont  used for rendering characters in the range of &80 - &8B.
! When the Window Manager is taking a soft copy of the text it simply watches
! for control sequences, and pads them with a font change before and after.
! (WS): so do we invent a new wimp symbol font, with an arrow in the right place
! in those character codes? In Symbol it has a different character code...
***************
*** 50 ****
--- 109,123 ----
+ JCoxhead: Multiple-spaces => TAB should be discarded. It's too silly.
+ DDV: Hmmmm..
+ 
+ Define the validation string entry that turns off tabbing in wimp font
+ icons.
+ 
+ DDV: The described form of delivery to the user is not good enough. Got to
+ find a better way to help users install it.
+ (WS): perhaps as part of creating a desktop boot file, !3DIcons can
+ contribute things which load a new Wimp? But that's too late! I don't see
+ any way of doing it without telling him to hack his !Boot file...
+ Suggestions welcome.
+ 
+ Do we need a validation string item that forces the use of the system font?
+ There is currently no way for an application to do this.
***************
*** 119,123 ****
! the font and point-size which should be used as the surrogate system font
! ('the wimp font'). This font should be used by the Window Manager to plot
! icon text that would otherwise be plotted in the system font. Window titles
! and menu text should also be treated in this way. The existence and values
! of these variables should be checked at startup, and at a mode change.
--- 192,197 ----
! the font and point-size which is used as the surrogate system font ('the
! wimp font'). This font is used by the Window Manager to plot icon text that
! would otherwise be plotted in the system font. Window titles and menu text
! are also treated in this way. The existence and values of these variables is
! checked at startup, and at a mode change, and when the broadcast
! Message_WimpFontChanged (&400XX) is received.
***************
*** 175 ****
--- 250,263 ----
+ Changes are required to the PRM to reflect these facilities, next time
+ the PRM is updated. Such changes will be limited to the Window Manager
+ chapter. Changes required are:
+   the section on system font handling
+   the description of icons under Wimp_CreateIcon
+   the description of menu width and keyboard shortcusts under Wimp_CreateMenu
+   the description of Message_WimpFontChanged under Wimp_SendMessage
+ Any screenshot that shows a window will also have to be changed.
+ 
+ Changes are required to the User Guide, mainly in the screenshots but some
+ small descriptive changes may also be required.
+ 
+ The Wimp command window still uses the built-in system font.
+ 
***************
*** 197 ****
--- 286 ----
+     (due to badly terminated strings)
***************
*** 249 ****
--- 339 ----
+ 
