 [ centralwrap
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; WrappingOpenDir
;
; In    r1 -> full dirname
;       r3, r4 = coords of where to open window (x0, y1)
;       r8 = viewmode
;       r9 = distance to unwrap x coordinate
;
; Out   r0 corrupted
;       r3, r4 = new coords of where window is to open
;
; Performs same function as OpenDir, but wraps at screen edges

WrappingOpenDir ENTRY   "r1-r2,r5-r11"

        ; Open the directory with default size and displaymode
        MOV     r5, #0          ; Open with default size
        BL      OpenDir
        EXIT    VS

        ; Check if made afresh
        TEQ     r7, #0          ; Don't mess if just fronted an old viewer
        EXIT    EQ

        ; Move coords to safe place for later
        MOV     r5, r3
        MOV     r6, r4

        ; r1 points to userdata
        ADR     r1, userdata

        ; Get open block to userdata for window OpenDir openned
        LDR     r0, [r7, #d_handle]
        STR     r0, [r1]
        SWI     XWimp_GetWindowState
        EXIT    VS

        ; For window just got data for, set
        ; r2 = width
        ; r3 = height
        LDR     r2, [r1, #u_wax1]
        LDR     r14, [r1, #u_wax0]
        SUB     r2, r2, r14

        ; Find right hand edge of window and compare it with right hand edge
        ; of screen. If found to be beyond screen edge then set window
        ; horizontal position back a bit.
        ADD     r14, r2, r5
        ADD     r14, r14, #vscroll_width
        LDR     r4, xwindsize
        CMP     r14, r4
        SUBGT   r5, r5, r9

        ; Fill in details of new position (may not even have moved!)
        STR     r5, [r1, #u_wax0]
        ADD     r2, r5, r2
        STR     r2, [r1, #u_wax1]

        ; reopen it there
        SWI     XWimp_OpenWindow
        EXIT    VS

        ; Move new coords back to registers for return
        MOV     r3, r5
        MOV     r4, r6
        ; now invalidate the filetypes cache

        BL      invalidate_filetypes

        EXIT
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; OpenDir
; =======

; In    r1 -> full dirname
;       r3, r4 = coords of where to open window (x0, y1)
 [ openat
;       r5, r6 = (width, height) to open window with.
;                              (0, h) means use defaults.
;       r8 = options to open with.
 ]
 [ centralwrap
;
; Out   r7 -> if VS then random
;          -> if new dir block, then new dir block
;          = 0 if not new dir block 
;
  ]

OpenDir ENTRY "r0-r6,r8-r11"

 [ debug
 DSTRING r1, "OpenDir ",cc
 ]

; Check to see if this directory is already visible

        MOV     r7, #0          ; zero out r7 if return not creating new dir
        ADR     r4, ViewerList - d_link

10      LDR     r4, [r4, #d_link]
        CMP     r4, #Nowt
        BEQ     %FT50                   ; [not existing dirviewer]

        LDR     r14, [r4, #d_handle]
        CMP     r14, #-1                ; don't deal in icons
        BEQ     %BT10

 [ debug
 DREG r4, "comparing with dirviewer "
 ]
        LDR     r2, [r4, #d_dirnamestore] ; r2 -> dirname
        BL      Xstrcmp_excludingspaces  ; May compare 'net:&','net:& (a500)'
        BNE     %BT10                   ; [no match, try next dirviewer]

        LDR     r0, [r4, #d_handle]     ; just front the dirviewer
 [ openat
        ; If the size is given, then force the values passed in
        TST     r5, r5
        BEQ     %FT12

        ; Store the window handle in somewhere handy
        MOV     r7, r0

        ; Work out the new view mode
        LDRB    r2, [r4, #d_viewmode]
        MOV     r1, r2    

        ; Replace the relevant fields of r1 with those of r8
        ; Method used is to first construct a mask in r14, which is used
        ; to mask out r1 and mask in r8.
        TST     r8, #1 :SHL: dbu_displaymode
        MOVEQ   r14, #0
        MOVNE   r14, #db_displaymode
        TST     r8, #1 :SHL: dbu_sortmode
        ORRNE   r14, r14, #db_sortmode
        BIC     r1, r1, r14
        AND     r14, r8, r14
        ORR     r1, r1, r14

        ; If the view mode has changed, do a reshape
        CMP     r1, r2
        BEQ     %FT11
        STRB    r1, [r4, #d_viewmode]
        MOV     r1, r4
        BL      SortDir
      [ centralwrap
        MOV     r1, #db_fpr_reshape
      |
        MOV     r1, #0
      ]
        STRB    r1, [r4, #d_filesperrow]

11      ;

        ; Get the window handle back into r0
        MOV     r0, r7

        ADR     r1, userdata            ; event_open_window expects userdata
        STR     r0, [r1]
        SWI     XWimp_GetWindowState
        BVS     %FT49
        STR     r3, [r1, #u_wax0]
        LDR     r4, [sp, #4*4]          ; restore r4 from the stack
        STR     r4, [r1, #u_way1]
        ADD     r3, r3, r5
        STR     r3, [r1, #u_wax1]
        SUB     r4, r4, r6
        STR     r4, [r1, #u_way0]
        MOV     r3, #-1         ; front
        STR     r3, [r1, #u_bhandle]
        BL      event_open_window
        B       %FT49
12      ;
 ]
        BL      front                   ; at its current screen position

49      STRVS   r0, [sp]
        EXIT


50 ; Need to create new dirviewer

 [ debug
 DLINE "New dirviewer needed"
 ]
        BL      strlen
        ADD     r3, r3, #1              ; +1 for terminator
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        BVS     %BT49
 [ debugalloc
 DREG r2, "got room for dirname block at "
 ]
        MOV     r11, r2                 ; save for later!

        MOV     r2, r1
        MOV     r1, r11
        BL      strcpy                  ; Copy dirname string into our block

 [ OptionsAreInRAM
        LDRB    r3, layout_options
 |
        BL      ReadCMOSBits            ; Read current state to r3
        AND     r3, r3, #sorting_cmos_bits :OR: display_cmos_bits
                                        ; Clear out other bits
                                        ; Always created with current viewmode
 ]

 [ openat
        ; Replace the relevant fields of r3 with those of r8
        ; Method used is to first construct a mask in r14, which is used
        ; to mask out r3 and mask in r8.
        TST     r8, #1 :SHL: dbu_displaymode
        MOVEQ   r14, #0
        MOVNE   r14, #db_displaymode
        TST     r8, #1 :SHL: dbu_sortmode
        ORRNE   r14, r14, #db_sortmode
        BIC     r3, r3, r14
        AND     r14, r8, r14
        ORR     r3, r3, r14
 ]
        BL      CacheDir                ; r7 := copied buffer in RMA block^
        BVS     %FT90

        LDR     r14, ViewerList         ; Add to head of list
        STR     r14, [r7, #d_link]
        STR     r7,  ViewerList

        STR     r11, [r7, #d_dirnamestore]

 [ centralwrap
        MOV     r14, #db_fpr_invalid
 |
        MOV     r14, #0
 ]
        STRB    r14, [r7, #d_filesperrow] ; Ensure size will be calculated

 [ centralwrap
        MOV     r14, #0
 ]
        STRB    r14, [r7, #d_nchildren] ; For offsets at same level

        ADD     r14, sp, #4*3           ; Reload r3,r4in: (x,y) coords
 [ openat
        LDMIA   r14, {r3, r4, r5, r6}
 |
        LDMIA   r14, {r3, r4}
 ]
        BL      MakeDirWindow
 [ ShowOpenDirs
        MOVVC   R0,#refresh_open
        BLVC    RedrawParentIcon        ; Chris - redraw the (open) parent icon
 ]
        EXIT    VC

        STR     r0, [sp]
        LDR     r0, [r7, #d_handle]
        BL      DeleteDirBlock          ; Accumulates V
        EXIT


90      STR     r0, [sp]

        MOV     r2, r11                 ; Free dirname string
        BL      SFreeArea               ; Accumulates V
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r7 -> dirviewer block to open as window
;       r3,r4 = coords (x0,y1) to open at
 [ openat
;       r5,r6 = (width, height) : (0, h) means use default
 ]

MakeDirWindow ENTRY "r0-r11"

 [ centralwrap
        MOV     r14, #db_fpr_invalid    ; First time round
 |
        MOV     r14, #0                 ; First time round
 ]
        STRB    r14, [r7, #d_filesperrow]

        wsaddr  r1, dirwindow           ; Create using our dirviewer template

        LDR     r14, [r7, #d_dirnamestore] ; Indirect title -> dirname
        STR     r14, [r1, #w_title]     ; Always use unmoving dirname
 [ debug
 DSTRING r14, "creating window, title "
 ]

        ADD     r14, sp, #4*3
        LDMIA   r14, {cx0, cy1}         ; r3,r4in
 [ openat
        LDR     cx1, [sp, #4*5]         ; r5 in
        TEQ     cx1, #0
        LDRNE   cy0, [sp, #4*6]         ; r6 in
        ; Downgrade non-default size windows to just reshape
      [ centralwrap
        MOVNE   r14, #db_fpr_reshape
      |
        MOVNE   r14, #0
      ]
        STRNEB  r14, [r7, #d_filesperrow]

      [ fourcolumnwidth
        ; Size window to try and fit 4 columns
        BNE     %FT01
        MOV     r0, r7
        BL      FindLgiWidth
        MOV     cy0, #5                  ; number of columns + 1
        MUL     cx1, r0, cy0
        LDR     cy0, initwindowheight
01
      |
        LDREQ   cx1, initwindowwidth
        LDREQ   cy0, initwindowheight
      ]

 |
        LDR     cx1, initwindowwidth        
        LDR     cy0, initwindowheight
 ]
        ADD     cx1, cx0, cx1
        SUB     cy0, cy1, cy0
 ASSERT w_wax0 = 0
        STMIA   r1, {cx0, cy0, cx1, cy1}
 [ debugredraw
 DREG cx0,"creating window at ",cc,Integer
 DREG cy0,", ",cc,Integer
 DREG cx1,", ",cc,Integer
 DREG cy1,", ",,Integer
 ]
        SWI     XWimp_CreateWindow
        STRVS   r0, [sp]
        EXIT    VS

 [ debugredraw
 DREG r0, "Got window handle ",,Integer
 ]
        STR     r0, [r7, #d_handle]

        BL      front                   ; open at default coords
        EXIT    VC

        STR     r0, [sp]
        LDR     r0, [r7, #d_handle]     ; deallocate window if error
        BL      DeleteWindow
        SETV
        EXIT

 [ hastiny
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r4 -> dirviewer to make tiny

MakeTinyDir ENTRY "r1-r11"

; Create icon on icon bar from our template icon 0

        SUB     sp, sp, #i_size + 4

        LDR     r14, tinydir
        LDMIA   r14, {cx0, cy0, cx1, cy1, x0, y0, x1, y1}
        SUB     cx1, cx1, cx0           ; set this to keep Wimp happy
        MOV     cx0, #0
        SUB     cy1, cy1, cy0
        MOV     cy0, #0

        MOV     r0, #-2                 ; lhs of icon bar
        STMIA   sp, {r0, cx0, cy0, cx1, cy1, x0, y0, x1, y1}
                                        ; window handle (w), icon coords (4w)
                                        ; icon flags (w), icon data (3w)

        LDR     r1, [r4, #d_dirnamestore] ; Point icon indirect text at leafname

;;;;;;;; Extract here + now

 [ debug
 DSTRING r1,"leafname for icon "
 ]
        STR     r1, [sp, #6*4]
        BL      strlen
        STR     r3, [sp, #8*4]          ; And length of leafname in data

        ADR     r1, %FT66               ; Point icon validation string at
        STR     r1, [sp, #7*4]          ; frigged about sprite name

        MOV     r1, sp
        SWI     XWimp_CreateIcon
        ADD     sp, sp, #i_size + 4

 [ debug
 BVS %FT00
 DREG r0, "allocated icon handle "
00
 ]
        LDRVC   r4, [sp, #4*3]          ; r4in
        STRVC   r0, [r4, #d_iconhandle]

; Remove window from screen, but not from dirviewer list

        LDRVC   r0, [r4, #d_handle]
        BLVC    DeleteWindow

        MOVVC   r14, #-2                ; Now bound to the icon bar
        STRVC   r14, [r4, #d_handle]
        EXIT

66
        DCB     "sdirectory", 0         ; 's' not part of sprite name
        ALIGN
 ]

        END
