; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; transfer_bytes
; In    r1 -> source of bytes
;       r3 =  Size of source
;       r7 =  Number of bytes passed over so far
;       r8 =  Number of bytes to not transfer at start
;       r9 -> destination buffer
;       r10 = offset into destination buffer to put bytes
;       r11 = destination buffer size
;
; Out   r7 incremented by number of bytes passed over
;       r8 decremented by number of bytes transfered
;       r10 = offset of byte past last byte transfered
;       HS indicates destination buffer full
;       LO indicates not full
;       bytes transfered to estination buffer

transfer_bytes ENTRY "r1,r3"
10      ; Exit if destination full
        CMP     r10, r11
        EXIT    HS

        ; Exit if source is empty
        TEQ     r3, #0
        BEQ     %FT90

        ; Transfer if no nullcount, else decrement nullcount
        CMP     r8, #0
        LDREQB  r0, [r1]
        STREQB  r0, [r9, r10]
        ADDEQ   r10, r10, #1
        SUBNE   r8, r8, #1
        ADD     r1, r1, #1
        ADD     r7, r7, #1
        SUB     r3, r3, #1

        ; loop
        B       %BT10

        ; exit for source empty
90      CMP     r10, r11
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; transfer_number
; In    r0 = number to transfer
;       r7 =  Number of bytes passed over so far
;       r8 =  Number of bytes to not transfer at start
;       r9 -> destination buffer
;       r10 = offset into destination buffer to put bytes
;       r11 = destination buffer size
;
; Out   r0 -> error if VS, else
;       exit as per transfer_bytes
;
 [ version >= 155
transfer_number ENTRY "r1,r2,r3,r4", 18
 |
transfer_number ENTRY "r1,r2,r3,r4", 16
 ]
        MOV     r1, sp
        MOV     r2, #16

 [ version >= 155
        CMP     r0, #0                  ; negative number?
        MOVLT   r4, #""""               ; then put a quote in
        STRLTB  r4, [r1], #1            ; moving r1 along
 ]

        SWI     XOS_BinaryToDecimal     ; preserves r0, r1
        EXIT    VS

 [ version >= 155
        CMP     r0, #0                  ; negative number?
        STRLTB  r4, [r1, r2]            ; r4 should still hold quote mark
        MOVLT   r1, sp                  ; real start of string
        ADDLT   r2, r2, #2              ; room for two quote marks
 ]

        MOV     r3, r2
        BL      transfer_bytes
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; transfer_a_space
; In    r7 =  Number of bytes passed over so far
;       r8 =  Number of bytes not to transfer at start
;       r9 -> destination buffer
;       r10 = offset into destination buffer to put bytes
;       r11 = destination buffer size
;
; Out   exit as per transfer_bytes
;
a_space DCB     " "
transfer_a_space ENTRY "r1,r3"
        ADR     r1, a_space
        MOV     r3, #1
        BL      transfer_bytes
        EXIT

a_newline DCB   LF
sortmodes DCB "-sn-st-ss-sd"
displaymodes DCB "-li-si-fi"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; savedisplay_fillbuffer
;
; In    r9 -> destination buffer
;       r10 = destination buffer offset
;       r11 = destination buffer size
;
; Out   r10 = offset past last byte transfered. If r10 < r11 then operation
;             has finished.
;       r0 will be corrupted, and if VS then r0 -> error.

savedisplay_fillbuffer ENTRY "r1-r9,r11", 36
     ; Initialise
        ; Go down the viewer list, stopping on viewer first_viewerno.
        ; Viewers are numbered 0 upwards.
        LDR     r6, first_viewerno
        CMP     r6, #Nowt
        EXIT    EQ
        MOV     r0, #0
        LDR     r4, ViewerList
05      CMP     r4, #Nowt
        BEQ     %FT90
        CMP     r0, r6
        BHS     %FT06
        LDR     r4, [r4, #d_link]
        ADD     r0, r0, #1
        B       %BT05

06      ; First viewer found:zero bytes read from it, and read in
        ; number of bytes to not transfer
        MOV     r7, #0
        LDR     r8, next_nullcount

10      ; Main loop. One execution of this loop corresponds to transfering
        ; the details of one viewer. The registers are allocated as
        ; follows:
        ; r4 -> Viewer being transfered
        ; r6 =  Number (starting at 0) of viewer being transfered
        ; r7 =  Number of bytes passed over for this viewer
        ; r8 =  Number of bytes left to ignore for this viewer
        ; r9 -> destination buffer
        ; r10 = offset into destination buffer
        ; r11 = destination buffer size

        ; Filer_OpenDir
        addr    r1, Filer_CommandTable
        BL      strlen
        BL      transfer_bytes
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; <full dirname>
        LDR     r1, [r4, #d_dirnamestore]
        BL      strlen_excludingspaces
        BL      transfer_bytes
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; r0 = x0
        ; r1 = y1
        ; r2 = w
        ; r3 = h
        MOV     r1, sp
        LDR     r0, [r4, #d_handle]
        STR     r0, [r1]
        SWI     XWimp_GetWindowState
        EXIT    VS
        LDR     r0, [r1, #u_wax0]
        LDR     r2, [r1, #u_wax1]
        SUB     r2, r2, r0
        LDR     r3, [r1, #u_way0]
        LDR     r1, [r1, #u_way1]
        SUB     r3, r1, r3

        ; x0
        BL      transfer_number
        EXIT    VS
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; y1
        MOV     r0, r1
        BL      transfer_number
        EXIT    VS
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; w
        MOV     r0, r2
        BL      transfer_number
        EXIT    VS
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; h
        MOV     r0, r3
        BL      transfer_number
        EXIT    VS
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; sortmode
        LDRB    r0, [r4, #d_viewmode]
        AND     r3, r0, #db_sortmode
        MOV     r3, r3, LSR #dbb_sortmode
        ADD     r3, r3, r3, LSL #1              ; r3 = r3*3
        addr    r1, sortmodes
        ADD     r1, r1, r3
        MOV     r3, #3
        BL      transfer_bytes
        BHS     %FT90
        BL      transfer_a_space
        BHS     %FT90

        ; display mode
        LDRB    r0, [r4, #d_viewmode]
        AND     r3, r0, #db_displaymode
        ; The next line should read
        ; MOV     r3, r3, LSR #dbb_displaymode
        ; but the assembler can't cope with zero shifts, so
        ; the line is taken out
        ADD     r3, r3, r3, LSL #1              ; r3 = r3*3
        addr    r1, displaymodes
        ADD     r1, r1, r3
        MOV     r3, #3
        BL      transfer_bytes
        BHS     %FT90
        addr    r1, a_newline
        MOV     r3, #1
        BL      transfer_bytes
        BHS     %FT90

        ; Get pointer to next viewer in the list
        ADD     r6, r6, #1
        LDR     r4, [r4, #d_link]
        CMP     r4, #Nowt
        BEQ     %FT90
        MOV     r7, #0
        B       %BT10

90      ; Finished. May be destination full or source empty.
        STR     r7, next_nullcount
        STR     r6, first_viewerno
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; sortviewers_bystacking
;
; In    Nothing
; Out   r0 corrupted
;       Dir viewers sorted by stacking order, bottom first
;
sortviewers_bystacking ENTRY "r1-r4", u_windowstate
        ; Zero out the sort links
        LDR     r2, ViewerList
        MOV     r1, #0
10      CMP     r2, #Nowt
        BEQ     %FT20
        STR     r1, [r2, #d_sortlink]
        LDR     r2, [r2, #d_link]
        B       %BT10

20      ; Find a viewer with a 'zero' sortlink
        LDR     r2, ViewerList
30      CMP     r2, #Nowt
        BEQ     %FT60
        LDR     r1, [r2, #d_sortlink]
        BIC     r1, r1, #2
        TEQ     r1, #0
        BEQ     %FT40
        LDR     r2, [r2, #d_link]
        B       %BT30

40      ; Store the viewer's window handle in the open block
        LDR     r1, [r2, #d_handle]
        STR     r1, [sp, #u_handle]

        ; Find the next window up the stack
        MOV     r1, sp
50      SWI     XWimp_GetWindowState
        EXIT    VS
        LDR     r0, [sp, #u_bhandle]
        CMP     r0, #-1
        LDREQ   r0, [r2, #d_sortlink]
        ORREQ   r0, r0, #Nowt
        STREQ   r0, [r2, #d_sortlink]
        BEQ     %BT20

        BL      FindDir

        STRNE   r0, [sp, #u_handle]
        BNE     %BT50

        ; Found the dir. Link r2 to r4 (the found dir). Flag r4 that it
        ; is being pointed at.
        LDR     r3, [r2, #d_sortlink]
        ORR     r3, r3, r4
        STR     r3, [r2, #d_sortlink]
        LDR     r3, [r4, #d_sortlink]
        ORR     r3, r3, #2
        STR     r3, [r4, #d_sortlink]
        B       %BT20

60      ; Finished. Find the start and redo the chain.
        LDR     r1, ViewerList
70      CMP     r1, #Nowt
        EXIT    EQ              ; Disaster!! - best leave well alone.
        LDR     r2, [r1, #d_sortlink]
        TST     r2, #2
        BEQ     %FT80
        LDR     r1, [r1, #d_link]
        B       %BT70

80      STR     r1, ViewerList

90      LDR     r2, [r1, #d_sortlink]
        BIC     r2, r2, #2
        STR     r2, [r1, #d_link]
        MOV     r1, r2
        CMP     r1, #Nowt
        BNE     %BT90

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; savedisplay_init
;
; In    Nothing
; Out   Status all set up for a displaysave from the start

savedisplay_init ENTRY "r0,r3"
        MOV     r0, #0
        STR     r0, next_nullcount
        STR     r0, first_viewerno

        ; Simulate last transfer used all of a full buffer
        MOV     r0, #displaysave_buffers
        STR     r0, displaysave_buffer_rover
        STR     r0, displaysave_buffer_bytes_in_it

        ; Sort the viewers
        BL      sortviewers_bystacking

        ; Get a buffer
        MOV     r3, #displaysave_buffers
        ADR     r0, displaysave_bufferp
        BL      SNewArea

        ; If failed, invalidate the viewerno
        MOVVS   r3, #Nowt
        STRVS   r3, first_viewerno

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; In    r1 -> file name

savedisplay_intofile ENTRY "r1,r2,r10,r11"

        ; Open the file for output
        MOV     r0, #2_10000111 ; OPENOUT
        SWI     XOS_Find
        BVS     %FT90

        ; Hold name and handle in r10, r11
        MOV     r11, r0
        MOV     r10, r1

        ; Set the type of the file to obey
        MOV     r0, #OSFile_SetType
        LDR     r2, =FileType_Obey
        SWI     XOS_File
        BVS     %FT70

        MOV     r1, r11
        BL      savedisplay_intofilehandle
        BVS     %FT70

        ; Close the file
        MOV     r0, #0
        MOV     r1, r11
        SWI     XOS_Find
        BVS     %FT80
        EXIT

70      ; Error: close and delete the file
        BLVS    LocalReportError

        MOV     r0, #0
        MOV     r1, r11                 ; file handle
        SWI     XOS_Find

80      ; Error: delete the file
        BLVS    LocalReportError
        MOV     r0, #OSFile_Delete
        MOV     r1, r10                 ; file name
        SWI     XOS_File

90      ; Error: no tidying up to do
        BLVS    LocalReportError
        ADR     r0, ErrorBlock_Filer_FailedSave
        BL      LookupError
        EXIT

        LTORG

        MakeErrorBlock  Filer_FailedSave

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; savedisplay_intofilehandle
;
; In    r1 = file handle
savedisplay_intofilehandle ENTRY "r1-r4,r9-r11"
        ; Init for transfering bytes of filer_opendir commands
        BL      savedisplay_init
        EXIT    VS

        ; Get the details of the buffer
        LDR     r9, displaysave_bufferp
        MOV     r11, #displaysave_buffers

10      ; Extract a next bufferfull  starting at offset 0 into the buffer
        MOV     r10, #0
        BL      savedisplay_fillbuffer
        BVS     %FT95

        ; Save the buffer into the file
        MOV     r0, #2          ; OS_GBPB 2 = put buffer to file
                                ; r1 = handle already
        MOV     r2, r9          ; Buffer location
        MOVS    r3, r10         ; Buffer size = bytes transfered into buffer
        SWINE   XOS_GBPB
        BVS     %FT95
        CMP     r10, r11        ; If buffer was filled, go round again.
        BHS     %BT10

90      ; Junk the buffer
        BL      discard_savedisplaybuffer
        EXIT

95      ; Junk the save buffer (after an error)
        BL      discard_savedisplaybuffer
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Saves the applications in the applications list as a sequence of filer_boots
;
; In r1 = file handle
; Out r0 corrupted and file written
;
saveapps_intofilehandle ENTRY "r1-r6"
        LDR     r5, ApplicList
        MOV     r6, r1
        MOV     r0, #OSGBPB_WriteAtPTR
        B       %FT50
10
        ; Only save boot sequence for booted applications
        LDRB    r1, [r5, #a_wasbooted]
        TEQ     r1, #0
        BEQ     %FT30
        ADR     r1, filer_boot_command
        BL      strlen
        MOV     r2, r1
        MOV     r1, r6
        SWI     XOS_GBPB
        EXIT    VS
        LDR     r2, [r5, #a_dir]
        ADD     r2, r2, #ad_name
        ADR     r1, dirnamebuffer
        BL      strcpy
        ADD     r2, r5, #a_leafname
        BL      AppendLeafnameToDirname
        BL      strlen
        MOV     r2, r1
        MOV     r1, r6
        SWI     XOS_GBPB
        EXIT    VS
        addr    r2, a_newline
        MOV     r3, #1
        SWI     XOS_GBPB
        EXIT    VS
30

        LDR     r5, [r5, #a_link]
50
        CMP     r5, #Nowt
        BNE     %BT10
        EXIT

filer_boot_command
        DCB     "Filer_Boot ",0

        END
