; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Clear all selections in all windows and redraw them

; In    r2 = dirviewer to preserve selections of (or Nowt)

; Out   filebox()() corrupt

ClearAllSelections Entry "r3-r5"

 [ debugsel
 DREG r2, "Clearing all selections except in dirviewer "
 ]
        LDR     r4, ViewerList

10      CMP     r4, #Nowt               ; VClear
 [ debugsel
 DREG r4, "Looking at dirviewer "
 ]
        EXIT    EQ                      ; [end of dirviewer list]

        CMP     r4, r2                  ; Don't do this one ?

        LDRNE   r3, [r4, #d_nfiles]
        TEQNE   r3, #0
        BEQ     %FT70                   ; [no files need updating]

        ADD     r5, r4, #d_headersize   ; Run over all files. VClear

20      LDRB    r14, [r5, #df_state]
 [ debugsel
 DREG r5,"Looking at file "
 ]
        TST     r14, #dfs_selected
        BNE     %FT40                   ; [file selected, so process]

        SUBS    r3, r3, #1
        ADDNE   r5, r5, #df_size
        BNE     %BT20                   ; Process next file

        B       %FT70                   ; Process next dirviewer


; Got mods in this directory, so will have to redraw it

30      LDRB    r14, [r5, #df_state]
 [ debugsel
 DREG r5,"Looking at file "
 ]
        TST     r14, #dfs_selected
        BEQ     %FT50

40      BIC     r14, r14, #dfs_selected ; ep for above
        STRB    r14, [r5, #df_state]
 [ debugsel
 DREG r5, "deselecting file "
 ]
        BL      UpdateFile
        EXIT    VS


50      SUBS    r3, r3, #1              ; Run over rest of files. VClear
        ADDNE   r5, r5, #df_size
        BNE     %BT30                   ; Process next file


70      LDR     r4, [r4, #d_link]
        B       %BT10                   ; Process next dirviewer

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r4,r5 valid

ClearSelectedItem Entry "r1, r3"

        LDRB    r14, [r5, #df_state]
        TST     r14, #dfs_selected
        EXIT    EQ

        BIC     r14, r14, #dfs_selected
        STRB    r14, [r5, #df_state]
 [ debugsel
 DREG r5, "deselecting file "
 ]
        ADD     r1, r4, #d_headersize   ; Calculate file number
        LDR     r3, [r4, #d_nfiles]
10      CMP     r1, r5
        SUBNE   r3, r3, #1
        ADDNE   r1, r1, #df_size
        BNE     %BT10

        BL      UpdateFile
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = window handle. NOT iconbar !

; Out   EQ: found, r4 -> dirviewer block
;       NE: not found, r4 = Nowt

FindDir Entry

        LDR     r4, ViewerList

01      CMP     r4, #Nowt
        BEQ     %FT90

        LDR     r14, [r4, #d_handle]
        CMP     r14, r0
        LDRNE   r4, [r4, #d_link]       ; try next dirviewer
        BNE     %BT01
        EXIT                            ; EQ

90      CMP     pc, #0                  ; NE
        EXIT


 [ version >= 113
 |
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = icon handle

; Out   EQ: found, r4 -> dirviewer block
;       NE: not found

FindIconBarDir Entry

        LDR     r4, ViewerList

01      CMP     r4, #Nowt
        BEQ     %FT90

        LDR     r14, [r4, #d_iconhandle]
        CMP     r14, r0
        LDRNE   r4, [r4, #d_link]       ; try next dirviewer
        BNE     %BT01
 [ debug
 DREG r4, "Found icon bar dir "
 ]
        EXIT                            ; EQ

90      CMP     pc, #0                  ; NE
        EXIT
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r4 -> dirviewer block

; Out   EQ: found;
;             r3 = file number (descending)
;             r5 -> file block
;             filebox()() = bounding boxes of object parts (icon, info)
;       NE: not found
;             r5 = Nowt

 [ version >= 114
FindFile Entry  "x0, y0, x1, y1"
 |
FindFile Entry  "x0, y0, x1, y1, r10, r11"
 ]

        LDR     r3, [r4, #d_nfiles]
        CMP     r3, #0
        BEQ     %FT80                   ; [not found file]

        ADD     r5, r4, #d_headersize

 [ version >= 114
        LDR     x0, relmousex
        LDR     y0, relmousey
        ADD     x1, x0, #1      ; To make into a non-nul rectangle
        ADD     y1, y0, #1
 |
        LDR     r10, relmousex
        LDR     r11, relmousey
 ]

01
 [ version >= 114
        BL      HitsFile
        BNE     %FT90
 |
        BL      GetFileBox              ; get relative to work area origin

        ADR     r14, filebox1
        LDMIA   r14, {x0, y0, x1, y1}
 [ debugredraw
 DREG x0, "FindFile: rel. x0 := ",cc,Integer
 DREG y0, ", y0 := ",cc,Integer
 DREG x1, ", x1 := ",cc,Integer
 DREG y1, ", y1 := ",,Integer
 DREG r10, "relx = ",cc,Integer
 DREG r11, ", rely = ",,Integer
 ]

        CMP     r10, x0
        CMPGE   x1, r10
        CMPGE   r11, y0
        CMPGE   y1, r11
        BGE     %FT90                   ; [found file]
 ]

        ADD     r5, r5, #df_size
        SUBS    r3, r3, #1
        BNE     %BT01

80
 [ debug
 DLINE "No file found"
 ]
        MOVS    r5, #Nowt               ; NE
        EXIT


90
 [ debug
 Push r1
 DREG r5, "Found file: ",cc
 LDR r1, [r4, #d_filenames]
 LDR r14, [r5, #df_fileptr]
 ADD r1, r1, r14, LSR #16
 DSTRING r1, " "
 Pull r1
 ]
        CMP     r0, r0                  ; EQ
        EXIT

 [ version >= 114
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; This checks whether the given rectangle hits the given file
; Rectangle and file box assumed to be inclusive bottom left, exclusive top right
;
; In    r3 = file number
;       r4 -> dirviewer block
;       r5 -> fileinfo block
;       x0, y0, x1, y1 (r6-r9) relative to window origin
;
; Out   NE if hit
;       EQ if missed
;       (filebox1 and filebox3 set for file)
;
dvr_smsprite_width      * 36
dvr_smsprite_gap        * 6     ; Gap to left end of left justification end stop and also
                                ; Gap from from left end to 1st char of string
dvr_lgsprite_width      * 68
HitsFile Entry "r0-r5"
        BL      GetFileBox
        LDRB    r0, [r4, #d_viewmode]
        AND     r0, r0, #db_displaymode
        TEQ     r0, #db_dm_smallicon
        BNE     %FT10

        ; small icon
 [ version >= 116
        ; If item is selected hit box is full width
        LDRB    r0, [r5, #df_state]
        TST     r0, #dfs_selected
        BEQ     %FT05
        LDR     r2, filebox1 + fb_x0
        LDR     r4, filebox1 + fb_x1
        B       %FT07
05
 ]
        ; Hit only up to the end of the text name
        LDR     r1, [r4, #d_filenames]
        LDR     r0, [r5, #df_fileptr]
        ADD     r1, r1, r0, LSR #16
        Push    "r0"
        MOV     R0,#1                   ; get text width in current system font
        MOV     R2,#max_text_size
        SWI     XWimp_TextOp
        LDR     r2, filebox1 + fb_x0
        ADD     r4, r2, r0              ; x0 + strwidth

        ; x0 + strlen(name)*16 + sprite width + gap to string
        ADD     r4, r4, #dvr_smsprite_width + dvr_smsprite_gap + dvr_smsprite_gap

        MOV     r0,#4
        SWI     XWimp_ReadSysInfo
        TEQ     r0,#0
        Pull    "r0"

        RSBNE   r3,r3,#10
        ADDNE   r4,r4,r3,ASL #4
        ADDNE   r2,r2,r3,ASL #4

 [ version >= 116
07
 ]

 [ version >= 115
        ; Bound above by the right hand side of the box
        LDR     r14, filebox1 + fb_x1
        CMP     r4, r14
        MOVGT   r4, r14
 ]
 [ version >= 116
        ; Extend a little bit if string is short
        Push    "r0"
        MOV     r0,#4
        SWI     XWimp_ReadSysInfo
        TEQ     r0,#0
        Pull    "r0"

        LDR     r14, filebox1 + fb_x1
        SUB     r14, r14, r4
        ADDEQ   r4, r4, r14, ASR #3
        SUBNE   r2, r2, r14, ASR #3
 ]

        LDR     r3, filebox1 + fb_y0
        LDR     r5, filebox1 + fb_y1
        CMP     x1, r2
        CMPGT   y1, r3
        CMPGT   r4, x0
        CMPGT   r5, y0
        MOVLES  r2, #0          ; Map LE to EQ, GT is NE anyway
        EXIT

10      TEQ     r0, #db_dm_largeicon
        BNE     %FT20
        ; Large icon
        LDR     r1, [r4, #d_filenames]
        LDR     r0, [r5, #df_fileptr]
        ADD     r1, r1, r0, LSR #16
        [ {FALSE}
        BL      strlen

        ; r0 = string width in OS units
        MOV     r0, r3, ASL #4
        |
        MOV     R0,#1
        MOV     R2,#max_text_size
        SWI     XWimp_TextOp
        ]

        ADR     r14, filebox1
        LDMIA   r14, {r2-r5}

        ; r1 = horizontal centre point of box
        ADD     r1, r2, r4
        MOV     r1, r1, ASR #1
        SUB     r14, r4, r2

        ; r0 bounded above by box width
        CMP     r0, r14
        MOVGT   r0, r14

        SUB     r2, r1, r0, ASR #1      ; left end of string
        ADD     r4, r1, r0, ASR #1      ; right end of string
        ADD     r0, r3, #32             ; Top of string

        ; Check intersection with string box
        CMP     x1, r2
        CMPGT   y1, r3
        CMPGT   r4, x0
        CMPGT   r0, y0
        MOVLES  r2, #0          ; Map LE to EQ, GT is NE anyway
        EXIT    NE

        SUB     r2, r1, #dvr_lgsprite_width/2
        ADD     r4, r1, #dvr_lgsprite_width/2

        ; Check intersection with sprite box
        CMP     x1, r2
        CMPGT   y1, r0
        CMPGT   r4, x0
        CMPGT   r5, y0
        MOVLES  r2, #0          ; Map LE to EQ, GT is NE anyway
        EXIT

20      ; Probably full info mode

        Push    "r0"
        MOV     r0,#4
        SWI     XWimp_ReadSysInfo
        TEQ     r0,#0
        Pull    "r0"
        ADREQ   r14, filebox1
        ADRNE   r14, filebox3

        LDMIA   r14, {r2-r5}
        CMP     x1, r2
        CMPGT   y1, r3
        CMPGT   r4, x0
        CMPGT   r5, y0
        MOVLES  r2, #0          ; Map LE to EQ, GT is NE anyway
        EXIT    NE              ; Hit filebox1 - small icon bit

        Push    "r0"
        MOV     r0,#4
        SWI     XWimp_ReadSysInfo
        TEQ     r0,#0
        Pull    "r0"
        ADREQ   r14, filebox3
        ADRNE   r14, filebox1

        LDMIA   r14, {r2-r5}
        CMP     x1, r2
        CMPGT   y1, r3
        CMPGT   r4, x0
        CMPGT   r5, y0
        MOVLES  r2, #0          ; Map LE to EQ, GT is NE anyway
        EXIT
 ]


        END
