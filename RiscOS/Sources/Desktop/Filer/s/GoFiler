MaximumLengthDateAndTime
        DCD     MaxLengthDateLo
        DCB     MaxLengthDateHi

wn_directory DCB "directory", 0         ; Have to be copied to RAM
wn_daccess   DCB "daccess", 0
wn_faccess   DCB "faccess", 0
wn_csavebox  DCB "xfer_send", 0
wn_newdirbox DCB "newdir", 0
wn_infobox   DCB "FileInfo", 0

        [ version >= 132
        ALIGN
MessagesList    DCD     Message_FilerOpenDir
                DCD     Message_FilerCloseDir
                DCD     Message_FilerOpenDirAt
                DCD     Message_DataSave
                DCD     Message_DataSaveAck
                DCD     Message_RAMFetch
                DCD     Message_DataLoad
                DCD     Message_DataLoadAck
                DCD     Message_ModeChange
                DCD     Message_HelpRequest
                DCD     Message_MenuWarning
                DCD     Message_SaveDesktop
                DCD     Message_MenusDeleted
                DCD     Message_DataOpen
                DCD     Message_FontChanged
                [ version >=186
                DCD     Message_ClaimEntity
                ]
                DCD     0
        ALIGN
        ]

templatefilename
        DCB     "Filer:Templates", 0

messages_file
        DCB     "Filer:Messages", 0

        ALIGN

Filer_Start ROUT

        LDR     wp, [r12]               ; Refuse to play if not had StartWimp
        LDR     r14, mytaskhandle
        CMP     r14, #0
        BLGE    UseDesktopError
        SWIVS   OS_GenerateError

        BL      GrowWorkspace
        SWIVS   OS_GenerateError

        wsaddr  sp, stacktop

        BL      CopyMenus               ; Copy menus into ram

 [ debug
 DLINE "-----------"
 DLINE "Start Filer"
 DLINE "-----------"
 ]
      [ version >= 132
        MOV     r0,#300                 ; We know about wimp 3.00 and have a messages list.
      |
        MOV     r0, #253                ; latest known Wimp version number
      ]
        LDR     r1, taskidentifier
        BL      GetTaskName
      [ version >= 132
        ADR     r3, MessagesList
      ]
        SWI     Wimp_Initialise         ; This can go bang (shouldn't)
                                        ; and will leave block allocated, but
                                        ; who cares ?

 [ debugtask
 DREG r1, "Allocated Filer task handle "
 ]
        STR     r1, mytaskhandle

        MOV     r0, #UpCallV            ; Sit on UpCall to monitor
        ADRL    r1, UpCallHandler       ; changes to file systems
        MOV     r2, wp
        SWI     XOS_Claim

        ; Get memory for writable icon and indirected icon
        BL      InitialiseIconAreas
        SWIVS   OS_GenerateError

        addr    r1, templatefilename, VC
        SWIVC   XWimp_OpenTemplate
        BVS     ErrorAbort

; OSS This has already been done once when the workspace was allocated,
; but anyway as the flag says it is only a quick hack and is actually
; assembled out at the moment.

 [ fonthack
        MOV     r0, #0
        wsaddr  r1, fontrefarray
        MOV     r14, #256
00      STR     r0, [r1], #4
        SUBS    r14, r14, #4
        BNE     %BT00
 ]

; OSS Read templates into buffers previously allocated.

        wsaddr  r1, dirwindow, VC
        wsaddr  r2, userdata, VC        ; We don't want contents of any of the
        ADDVC   r3, r2, #?userdata      ; indirect icons
        addr    r5, wn_directory, VC
        BLVC    load_template
        BVS     ErrorCloseTemplate

; Read template for access windows.

 [ :LNOT: actionwind
        ; Load directory access window
        LDRVC   r1, daccesswindow_ptr
        LDRVC   r2, ind_daccesswindow_ptr
        MOV     r3, r1                  ; Main buffer is indirect limit
        addr    r5, wn_daccess, VC
        BLVC    load_template
        BVS     ErrorCloseTemplate
 ]

        ; Load file access window
        LDRVC   r1, faccesswindow_ptr
        LDRVC   r2, ind_faccesswindow_ptr
        MOV     r3, r1                  ; Main buffer is indirect limit
        addr    r5, wn_faccess, VC
        BLVC    load_template

        ; Load copy save window
        LDRVC   r1, csavebox_ptr
        LDRVC   r2, ind_csavebox_ptr
        MOV     r3, r1                  ; Main buffer is indirect limit
        addr    r5, wn_csavebox, VC
        BLVC    load_template

        ; Load new directory window
        LDRVC   r1, newdirbox_ptr
        LDRVC   r2, ind_newdirbox_ptr
        MOV     r3, r1                  ; Main buffer is indirect limit
        addr    r5, wn_newdirbox, VC
        BLVC    load_template

        ; Load the info box window
        LDRVC   r1, infobox_ptr
        LDRVC   r2, ind_infobox_ptr
        MOV     r3, r1                  ; Main buffer is indirect limit
        addr    r5, wn_infobox, VC
        BLVC    load_template

        ; Fill in pointer to wimp's sprite area
        ADDVC   r1, r1, #(i_size*0)+i_data+ii_buffer+ii_validation
        MOVVC   r0, #0
        STRVC   r0, [r1]

        BVS     ErrorCloseTemplate

        SWI     XWimp_CloseTemplate

        MOV     r0, #0
        STR     r0, h_menuwindow_loc

        BVS     ErrorAbort


        MOV     r14, #1                 ; windows all use common sprite pool
 [ :LNOT: actionwind
        LDR     r0, daccesswindow_ptr
        STR     r14, [r0, #w_areaCBptr]
 ]
        LDR     r0, faccesswindow_ptr
        STR     r14, [r0, #w_areaCBptr]
        LDR     r0, infobox_ptr
        STR     r14, [r0, #w_areaCBptr]
        wsaddr  r0, dirwindow           ; r0 -> dirwindow for a while...
        STR     r14, [r0, #w_areaCBptr]

        MOV     r14, #1                 ; Bonk the minx/miny bits in template
;        ORR     r14, r14, #1 :SHL: 16   ; to make shrinkable below title width
        STR     r14, [r0, #w_minx]
 ASSERT w_miny = w_minx + 2

        MOV     r14, #0                 ; dirwindow has no permanent icons
        STR     r14, [r0, #w_nicons]

; Initial work area coords define where first dirviewer created + size

        wsaddr  r14, dirwindow + w_wax0
        LDMIA   r14, {x0, y0, x1, y1}
        STR     x0, initwindowx
        STR     y1, initwindowy
 [ debug
 DREG x0,"init window coords ",cc,Integer
 DREG y1,",",,Integer
 ]
        SUB     x1, x1, x0              ; width, height +ve
        SUB     y1, y1, y0
        STR     x1, initwindowwidth
        STR     y1, initwindowheight
 [ debug
 DREG x1,"init window dimensions ",cc,Integer
 DREG y1,",",,Integer
 ]


; Initial work area colours define text fg/bg colours

        LDRB    r14, [r0, #w_wfcol]
        STRB    r14, text_fgcolour
        LDRB    r14, [r0, #w_wbcol]
        STRB    r14, text_bgcolour


; Icon 0 (top-left corner) defines offset to next dirviewer window

        LDR     cx0, [r0, #w_icons + 0*i_size + i_bbx0]
        LDR     cy0, [r0, #w_icons + 0*i_size + i_bby1]
        STR     cx0, dvoffsetx
        STR     cy0, dvoffsety
 [ debug
 DREG cx0, "next subdir offset is ",cc,Integer
 DREG cy0, ",",,Integer
 ]


; Icon 1 defines our time and date string

        LDR     r2, [r0, #w_icons + 1*i_size + i_data]
        wsaddr  r1, mydateformat
        BL      strcpy                  ; Terminate with 0 not CR or whatever
                                        ; FormEd creates it with!
 [ debug
 DSTRING r1, "Time/Date string is "
 ]
        addr    r0, MaximumLengthDateAndTime
        ADR     r1, userdata
        MOV     r2, #?userdata
        wsaddr  r3, mydateformat
        SWI     XOS_ConvertDateAndTime
        ADR     r1, userdata
        BL      strlen
        CMP     r3, #loadexeclength     ; Can't be less than this
        MOVLT   r3, #loadexeclength
        MOV     r3, r3, LSL #charx_shf
        STR     r3, mydateformatlen


; Icon 2 defines large icon format

lgi_icon_offset * w_icons + 2*i_size

        ;wsaddr  r10, i_textbuffer       ; Use our ind. buffers, not template's
        LDR     r10, i_textbuffer_ptr
        wsaddr  r11, i_spritebuffer
        MOV     r14, #"s"               ; 's' in validation string -> sprite
        STRB    r14, [r11]

        wsaddr  r0, dirwindow
        STR     r10, [r0, #lgi_icon_offset + i_data + 0]
        STR     r11, [r0, #lgi_icon_offset + i_data + 4]

        wsaddr  r14, dirwindow + lgi_icon_offset + i_bbx0
        LDMIA   r14, {cx0, cy0, cx1, cy1}
        SUB     cx0, cx1, cx0
        SUB     cy0, cy1, cy0
        STR     cx0, lgi_width
        STR     cy0, lgi_height
 [ debug
 DREG cx0, "large icon is ",cc,Integer
 DREG cy0, " x ",,Integer
 ]


; Icon 3 defines small icon format

smi_icon_offset * w_icons + 3*i_size

        STR     r10, [r0, #smi_icon_offset + i_data + 0] ; Use our ind. buffers
        STR     r11, [r0, #smi_icon_offset + i_data + 4]

        wsaddr  r14, dirwindow + smi_icon_offset + i_bbx0
        LDMIA   r14, {cx0, cy0, cx1, cy1}
        SUB     cx0, cx1, cx0
        SUB     cy0, cy1, cy0
        STR     cx0, smi_width
        STR     cy0, smi_height
 [ debug
 DREG cx0, "small icon is ",cc,Integer
 DREG cy0, " x ",,Integer
 ]


; Icon 4 (top-left corner) defines offset to next top level dirviewer window

        LDR     cx0, [r0, #w_icons + 4*i_size + i_bbx0]
        LDR     cy0, [r0, #w_icons + 4*i_size + i_bby1]
        STR     cx0, initwindow_xoff
        STR     cy0, initwindow_yoff
 [ debug
 DREG cx0, "next toplevel offset is ",cc,Integer
 DREG cy0, ",",,Integer
 ]

; Get Indirect text address for icon 1 (in copy/move box)
        LDR     r14, csavebox_ptr
        LDR     r0, [r14, #w_icons + 1*i_size + i_data]
        STR     r0, csavebox_text

; Get Indirect text address for icon 1 (in new directory box)
        LDR     r14, newdirbox_ptr
        LDR     r0, [r14, #w_icons + 1*i_size + i_data]
        STR     r0, newdirbox_text


 [ :LNOT: actionwind
  [ debug
        LDR     r14, daccesswindow_ptr
        LDR     r14, [r14, #w_title] ; This is indirect
        STR     r14, dacstring
 DSTRING r14, "dir access window string is "
  ]
 ]

        BL      cache_lengths           ; find out how wide full info strings are


; Tell the world that the Filer is starting (a la DeskTop startup)
; Now that we can't really go wrong

50      MOV     r1, #Service_StartFiler
        LDR     r0, mytaskhandle        ; Filing systems need to contact me
 [ debugtask
 DREG r0, "sending mytaskhandle "
 ]
        SWI     XOS_ServiceCall
        CMP     r1, #0
        BNE     %FT60                   ; [not claimed, therefore at end]

        SWI     XWimp_StartTask         ; start filing system application

        BLVS    LocalReportError        ; Just complain about it from now on
        B       %BT50


60      MOV     r1, #Service_StartedFiler
        SWI     XOS_ServiceCall

        ADR     r1, userdata
        MOV     r0, #ms_data
        STR     r0, [r1, #ms_size]
        MOV     r0, #0
        STR     r0, [r1, #ms_yourref]
        LDR     r0, =Message_TaskStarted
        STR     r0, [r1, #ms_action]
        MOV     r0, #User_Message
        MOV     r2, #0                  ; Broadcast
        SWI     XWimp_SendMessage

; More boring initialisation

        BL      SetForThisMode

        MOV     r14, #0
        STRB    r14, hourglassstate
        STRB    r14, menu_causedselection
        STR     r14, poll_word
        STR     r14, next_null_event_not_before_time
        
        ; Setup default maximum width for truncation
        MOV     r0, #256
        STR     r0, largeicon_truncation
        MOV     r0, #128
        STR     r0, smallicon_truncation      
        MOV     r0, #128
        STR     r0, fullinfo_truncation
       
        [ version >= 153
        STR     r14, recache_delay
        ]
        MOV     r14, #drag_ignore
        STRB    r14, drag_type

; .............................................................................
; The main polling loop!

repollwimp ROUT

 [ debug
        BVS     %FT99
        LDR     r0, =:INDEX: stackcheck
        LDR     r14, [wp, r0]           ; Is stack fooked?
        LDR     r0, %FT01
        TEQ     r0, r14
        BEQ     %FT02
        LDR     r14, =:INDEX: stackcheck
        STR     r0, [wp, r14]           ; Make it all better again
        ADR     r0, %FT00
        SETV
        B       %FT99
00
        DCD     0
        DCB     "!!! Filer stack fault !!!", 0
        ALIGN
01
        DCB     "stck"

  [ actionwind
02      ;
  |
02      LDR     r14, daccesswindow + w_title ; This is indirect
        LDR     r0, dacstring
        TEQ     r14, r0
        BEQ     %FT99

        ADR     r0, %FT03
        SETV
        B       %FT99
03
        DCD     0
        DCB     "dac string corrupt", 0
        ALIGN
  ]
99
 ]
      [ debugpoll
        BVC     %FT78
        ADD     r0,r0,#4
        DSTRING r0,"repoll error: "
        SUB     r0,r0,#4
78
      ]
        BLVS    LocalReportError

        BL      DiscardTempString

        BVS     repollwimp              ; we can instantly redraw any corrupted
                                        ; windows

        BL      delete_closed_menu_window

        LDR     r0, poll_word
        TEQ     r0, #0

        ; Waiting for a poll word event - no nulls
        LDREQ   r0, =pointerchange_bits :OR: pollword_enable :OR: null_bit
        ADREQ   r3, poll_word

        ; poll word happened - wait for a null event
        MOVNE   r0, #pointerchange_bits
        LDRNE   r2, next_null_event_not_before_time
        ADR     r1, userdata            ; entering/leaving window events
 [ debugpoll
 DREG r2,"Calling XWimp_PollIdle: r2 = ",,Integer
 ]
        SWI     XWimp_PollIdle
 [ Fix002
        BVS     bastardwimpgaveerror
 |
        BVS     repollwimp
 ]

 [ debugpoll
 DREG r0,"Reason from XWimp_PollIdle: ",,Integer
 ]
        ADR     lr, repollwimp

        CMP     r0, #(endpolljumptable-polljumptable)/4
        ADDCC   pc, pc, r0, LSL #2
        B       repollwimp              ; also serves to get addressing right

; In    r1 -> wimp_eventstr

polljumptable
        B       event_null_reason
        B       event_redraw_window
        B       event_open_window
        B       event_close_window
        MOV     pc, lr                  ; pointer_leaving_window
        MOV     pc, lr                  ; pointer_entering_window
        B       event_mouse_click
        B       event_user_dragbox
        B       event_key_pressed
        B       event_menu_select
 [ version >= 113
        MOV     pc, lr                  ; scroll request
        MOV     pc, lr                  ; lose caret
        MOV     pc, lr                  ; gain caret
 [ version >= 116
        B       event_pollword_nonzero
 |
        MOV     pc, lr                  ; reserved 13
 ]
        MOV     pc, lr                  ; reserved 14
        MOV     pc, lr                  ; reserved 15
        MOV     pc, lr                  ; reserved 16
        B       event_user_message      ; user message
        B       event_user_message      ; user message recorded
        B       event_user_message_acknowledge
 ]
endpolljumptable

        LTORG

 [ Fix002
bastardwimpgaveerror
        MOV     r1, r0                  ; Save error while we look up title string.
        ADR     r0, wimperrortoken
        BL      messagetrans_lookup
        MOV     r2, r0                  ; CTRL-char terminated title string.
        MOV     r0, r1                  ; Get back error.
        MOV     r1, #ok_button
        SWI     XWimp_ReportError
        BVS     Abort
        B       repollwimp

wimperrortoken  DCB     "WimpErr",0
                ALIGN
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
discard_savedisplaybuffer ENTRY "r2"

        LDR     r2, displaysave_bufferp
        BL      SFreeArea
        MOV     r2, #Nowt
        STR     r2, displaysave_bufferp
        STR     r2, first_viewerno
        MOV     r2, #0
        STR     r2, displaysave_buffer_rover
        STR     r2, displaysave_buffer_bytes_in_it
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Things done most every poll loop

DiscardTempString ENTRY "r2"

        LDR     r2, TempString          ; Never go out without discarding temp
        CMP     r2, #Nowt               ; VClear
        MOVNE   r14, #Nowt
        STRNE   r14, TempString
        BLNE    SFreeArea
        EXIT

        END
