; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_open_window
; =================

; In    r1 -> wimp_eventstr (not necessarily in userdata)
;             [r1, #0]  window handle
;             [r1, #4]  window x0
;             [r1, #8]         y0
;             [r1, #12]        x1
;             [r1, #16]        y1
;             [r1, #20] scroll x
;             [r1, #24] scroll y
;             [r1, #28] behind handle

; Out   regs preserved as we are called from other places as well as from Poll

event_open_window ENTRY "r1-r11"

        LDR     r0, [r1, #u_handle]     ; r0 = window handle to open
 [ debugredraw
 DREG r0, "open_window: window ",,Integer
 ]
        BL      FindDir                 ; r4 -> dirviewer block
        BNE     %FT80                   ; [not a dirviewer; just open it]


        LDR     r9, [r1, #u_wax0]       ; keep for below
        LDR     r8, [r1, #u_wax1]
        SUB     r8, r8, r9              ; r8 := requested width of window

; Need to know size of dirname in OS units

        LDR     r10, [r4, #d_dirnamestore] ; r10 -> dirname
	MOV	r0, #WimpSysInfo_IconiseButton
	SWI	XWimp_ReadSysInfo
	MOVVS	r0, #0
        ADD     r0, r0, #6*charx        ; add 6 as we have back + close boxes
01
        [ {FALSE}
        LDRB    r14, [r10], #1          ; and lhs/rhs gaps to consider too
        CMP     r14, #space             ; spaces are included here
        ADDHS   r0, r0, #charx
        BHS     %BT01
        |
        MOV     R14,R1
        MOV     R1,r10
        MOV     R10,r0
        MOV     R0,#1
        Push    "R2"
        MOV     R2,#0
        SWI     XWimp_TextOp
        Pull    "R2"
        MOV     R1,R14
        ADD     R0,R0,R10
        ]
        STR     r0, dirnamelength

        BL      GetItemBoxSize          ; r11,r14 := item box size (x, y)
        STR     r11, pboxwidth          ; r14 is not needed here

        ; Find the number of columns which fit into the screen width, less
        ; the width of the vertical scroll bar and the directory viewer
        ; right hand side gap. Minimum allowed 0. Result in r7.
        LDR     r2, xwindsize
 [ bug1596
        SUB     r2, r2, #vscroll_width+dvr_rhsgap
 |
        SUB     r2, r2, #vscroll_width
 ]
        DivRem  r7, r2, r11, r14
        CMP     r7, #1
        MOVLT   r7, #1

        ; From the number of columns, calculate the maximum window width
        ; we're going to allow as
        ; number_of_columns*width_of_column + dvr_rhsgap
        ; Answer stored in maxwidth and r2.
        MUL     r2, r7, r11
        ADD     r2, r2, #dvr_rhsgap
        STR     r2, maxwidth

 [ debugredraw
 DREG r8, "requested window width = ",,Integer
 DREG r0, "dirname length = ",,Integer
 DREG r11, "one object width = ",,Integer
 DREG r7, "max. objects = ",,Integer
 DREG r2, "maxwidth to clip = ",,Integer
 ]
        ; If width requested exceeds maxwidth, then limit it to maxwidth
        ; and set d_filesperrow to 0 to force a re-evaluation of the columns
        ; and window extents.
        CMP     r8, r2
        MOVHI   r8, r2
 [ centralwrap
        MOVHI   r14, #db_fpr_invalid
 |
        MOVHI   r14, #0
 ]
        STRHIB  r14, [r4, #d_filesperrow]
 [ debugredraw
 BLS %FT00
 DREG r8,"reduced window width = ",,Integer
00
 ]

        ; If d_filesperrow if 0 or &ff then recalculate window width, and
        ; force it to be that.
        LDRB    r14, [r4, #d_filesperrow] ; If 0, need a rethink
 [ centralwrap
        TEQ     r14, #db_fpr_invalid
        TEQNE   r14, #db_fpr_stuffed
 |
        TEQ     r14, #0
        TEQNE   r14, #&FF               ; or if stuffed
 ]
        BNE     %FT10

; Ensure dirname and one object always visible when first pop up window
; or go reshape

 [ debugredraw
 DLINE "Need a serious rethink"
 ]
 [ bug1596
        SUB     r8, r8, #dvr_rhsgap     ; Don't include the rhsgap when dividing
 ]
        DivRem  r7, r8, r11, r14        ; r7 := no of boxes that fit across
        CMP     r7, #1                  ; in requested width of window
        MOVLT   r7, #1                  ; at least 1 column! Rounding down
        MUL     r8, r7, r11             ; Set width to accomodate an integer no
 [ bug1596
        ADD     r8, r8, #dvr_rhsgap     ; Add the rhsgap back in.
 ]

        max     r8, r0                  ; r8 = max(dirname, adjusted request)

 [ debugredraw
 DREG r8,"adjusted window width = ",,Integer
 ]
        ADD     r14, r9, r8             ; Adjust width in window block
        STR     r14, [r1, #u_wax1]


10 ; Work out how many objects fit across dirviewer at current window width

 [ bug1596
        ; Remove rhs gap for calculation, include rhs slack to avoid
        ; immediate reshape when user narrows viewer.
        SUB     r8, r8, #dvr_rhsgap-dvr_rhsslack
 |
        ADD     r8, r8, #dvr_rhsgap     ; Nobble rhs gap
 ]
        DivRem  r7, r8, r11, r14        ; r7 := no of boxes that fit across
        CMP     r7, #1                  ; in this width of window
        MOVLT   r7, #1                  ; at least 1 column!

; If this is different to that from last time, then we must reshape contents

        LDRB    r14, [r4, #d_filesperrow]
 [ debugredraw
 DREG r7,"we could filesperrow = ",,Integer
 DREG r14,"old filesperrow = ",,Integer
 ]
        CMP     r14, r7
        BEQ     %FT80                   ; [don't reshape window, just open]

 [ debugredraw
 DREG r7,"Need contents reshaping; new filesperrow := ",,Integer
 ]
        STRB    r7, [r4, #d_filesperrow]

; Calculate new y extent of window (for v scroll bar)

        LDR     r14, [r4, #d_nfiles]    ; If empty directory, set extent
 [ centralwrap
        TEQ     r14, #0                 ; to the same as the minimum height
        MOVEQ   r9, #0
 |
        TEQ     r14, #0                 ; to the same as the requested height
        LDREQ   r9, [r1, #u_way0]
 ]
        BEQ     %FT70

        MOV     r5, #df_size            ; Get at the last file in dirviewer
        MUL     r5, r14, r5
        ADD     r5, r5, #d_headersize - df_size ; File 1 is at offset 0 etc.
        MOV     r3, #1                  ; last file in list!
        BL      GetFileBox              ; get relative to work area origin

        LDR     r9, filebox1 + fb_y0    ; by := y0 of last file
        SUB     r9, r9, #dvr_botgap     ; small gap at bottom of dirviewer


 [ version >= 113
70 ; Calculate new x extent of window:
; min( maxwidth, max( dirnamelength, col_width*nfiles))

        ; r10 = col_width * nfiles + edge gap
        LDR     r14, [r4, #d_nfiles]
        LDR     r10, pboxwidth
        MUL     r10, r14, r10
        ADD     r10, r10, #dvr_rhsgap

        ; r10 = max( r10, dirnamelength )
        LDR     r14, dirnamelength
        max     r10, r14

        ; r10 = min( r10, maxwidth )
        LDR     r14, maxwidth
        min     r10, r14
 |
70 ; Calculate new x extent of window. Never less than dirnamewidth

        ; r10 = dirviewer->nfiles * pboxwidth + dvr_rhsgap
        LDR     r14, [r4, #d_nfiles]
        LDR     r10, pboxwidth
        MUL     r10, r14, r10
   [ bug1596
        ADD     r10, r10, #dvr_rhsgap
   ]

        ; r10 = min( r10, maxwidth ) to clip against screen edge
        LDR     r14, maxwidth
        min     r10, r14

        ; r10 = max( r10, dirnamelength ) to ensure is at least as wide
        ; as title
        LDR     r14, dirnamelength      ; OS units
        max     r10, r14
 ]

        MOV     r8, #0                  ; lx := 0
        MOV     r11, #0                 ; ty := 0

        LDR     r0, [r4, #d_handle]
        STR     r0, [sp, #-80-4]!       ; remember for forcing redraw
        ADD     r1, sp, #4              ; create temp frame
        STMIA   r1, {r8-r11}
 [ debugredraw
 DREG r0,  "Wimp_SetExtent: window ",cc,Integer
 DREG r8,  " lx ",cc,Integer
 DREG r9,  " by ",cc,Integer
 DREG r10, " rx ",cc,Integer
 DREG r11, " ty ",,Integer
 ]
        SWI     XWimp_SetExtent         ; reset size of window
        LDR     r0, [sp], #80+4         ; restore stack, r0

        MOV     r1, #-bignum            ; All of this window needs repainting
        MOV     r2, #-bignum
        MOV     r3, #bignum
        MOV     r4, #bignum
        SWI     XWimp_ForceRedraw


80      LDRVC   r1, [sp, #0*4]
        SWIVC   XWimp_OpenWindow
        EXIT

        END
