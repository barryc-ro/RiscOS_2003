; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                        Menu handling routines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

rom_menustart ; Note - must be defined bottom up

; Display control submenu
; =======================

m_display                       Menu    "MT0T"
mo_display_large                Item    "MT00"
mo_display_small                Item    "MT01"
mo_display_fullinfo             Item    "MT02",,"-"
mo_display_sortname             Item    "MT03"
mo_display_sorttype             Item    "MT04"
mo_display_sortsize             Item    "MT05"
mo_display_sortdate             Item    "MT06"

; Options control submenu
; =======================

 [ OptionsAreInRAM
m_options                       Menu    "MT4T"
mo_options_confirm              Item    "MT40"
mo_options_confirmdeletes       Item    "MT44",,"-"
mo_options_verbose              Item    "MT41"
mo_options_force                Item    "MT42"
mo_options_newer                Item    "MT43"
mo_options_faster               Item    "MT45"
 |
m_options                       Menu    "MT4T"
mo_options_confirm              Item    "MT40"
mo_options_verbose              Item    "MT41"
mo_options_force                Item    "MT42"
mo_options_newer                Item    "MT43"
 ]

; Writeable leafname submenu (for Copy/Rename)
; ==========================

m_writeable_filename            Menu    "MT11T"
mo_writeable_filename           Item    "MT110",,"W"


; Writeable leafname submenu (for CDir - leaves loophole for RuneMeisters)
; ==========================

;m_writeable_cdirname            Menu    "MT5T"
;mo_writeable_cdirname           Item    "MT50",,"W"

; Writeable filetype submenu
; ==========================

m_writeable_filetype            Menu    "MT18T"
mo_writeable_filetype           Item    "MT180",,"W"


 [ version >= 155

; Writeable findname submenu
; ==========================

m_writeable_findname            Menu    "MT17T"
mo_writeable_findname           Item    "MT170",,"W"

 ]

; Access submenu
; ==============

m_file_access                   Menu    "MT13T"
mo_file_access_locked           Item    "MT130"
mo_file_access_unlocked         Item    "MT131",,"-"
mo_file_access_publicread       Item    "MT132"
mo_file_access_nopublicread     Item    "MT133",,"-"
mo_file_access_other            Item    "MT134",,"N"


; File operations submenu
; =======================

m_file                          Menu    "MT1T"
mo_file_copy                    Item    "MT10",,"N"
mo_file_rename                  Item    "MT11",m_writeable_filename
mo_file_delete                  Item    "MT12"
mo_file_access                  Item    "MT13",m_file_access,">"
mo_file_count                   Item    "MT14"
mo_file_help                    Item    "MT15"
mo_file_info                    Item    "MT16",,"N"
 [ version >= 155
mo_file_find                    Item    "MT17",m_writeable_findname
 |
mo_file_find                    Item    "MT17",m_writeable_filename
 ]
mo_file_settype                 Item    "MT18",m_writeable_filetype
mo_file_stamp                   Item    "MT19"


; Main Filer menu
; ================

; Need to put max length names in for indirect objects so we can suss width

m_main                          Menu    "MTT"
mo_main_display                 Item    "MT0",m_display
mo_main_filexxx                 Item    "MT1",m_file,">"
mo_main_selectall               Item    "MT2"
mo_main_clearsel                Item    "MT3"
mo_main_options                 Item    "MT4",m_options
mo_main_newdir                  Item    "MT5",,"N"
;mo_main_newdir                  Item    "MT5",m_writeable_cdirname
mo_main_openparent              Item    "MT6"
 [ AddSetDirectory
mo_main_setdir                  Item    "MT7"
 ]

        DCB     0               ; Indicates end of menu list

; Validation strings (these must be international too).
ms_filetype_validation          DCB     "MTFiletype_Validation", 0
ms_filename_validation_cdir     DCB     "MTDirname_Validation", 0
ms_filename_validation_norm     DCB     "MTFilename_Validation", 0
 [ version >= 155
ms_filename_validation_find     DCB     "MTFindname_Validation", 0
 ]

        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; CopyMenus
; =========

; Copy menu structures into ram, relocating as we go

CopyMenus Entry "r0-r11"

 [ debugmenu
        DLINE   "CopyMenus"
 ]

        ; Prepare some values for messagetrans operations.
        ADR     r0, messagetrans_struct
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0

        ; Point at writeable leafname
        ADRL    r1, ms_writeable_leafname
        STR     r1, m_writeable_filename + m_headersize + mi_icondata + ii_buffer

        ; Get validation string
        ADR     r1, ms_filename_validation_norm
        MOV     r2, #0
        SWI     XMessageTrans_Lookup
        EXIT    VS
        STR     r2, m_writeable_filename + m_headersize + mi_icondata + ii_validation

        ; Store length
        MOV     r1, #?ms_writeable_leafname
        STR     r1, m_writeable_filename + m_headersize + mi_icondata + ii_length

        ; Point at writeable cdirname
      ;[ version >= 138
      ;  ADRL    r1, ms_writeable_dirname
      ;|
      ;  ADRL    r1, ms_writeable_leafname
      ;]
      ;  STR     r1, m_writeable_cdirname + m_headersize + mi_icondata + ii_buffer

        ; Get validation string
        ;ADR     r1, ms_filename_validation_cdir
        ;MOV     r2, #0
        ;SWI     XMessageTrans_Lookup
        ;EXIT    VS
        ;STR     r2, m_writeable_cdirname + m_headersize + mi_icondata + ii_validation

        ; Store length
      ;[ version >= 138
      ;  MOV     r1, #?ms_writeable_dirname
      ;|
      ;  MOV     r1, #?ms_writeable_leafname
      ;]
      ;  STR     r1, m_writeable_cdirname + m_headersize + mi_icondata + ii_length

        ; Point at writeable filetype
        ADR     r1, ms_writeable_filetype
        STR     r1, m_writeable_filetype + m_headersize + mi_icondata + ii_buffer

        ; Get validation string
        ADRL    r1, ms_filetype_validation
        MOV     r2, #0
        SWI     XMessageTrans_Lookup
        EXIT    VS
        STR     r2, m_writeable_filetype + m_headersize + mi_icondata + ii_validation

        ; Store length
        MOV     r1, #?ms_writeable_filetype
        STR     r1, m_writeable_filetype + m_headersize + mi_icondata + ii_length

      [ version >= 155
        ; Point at writeable findname
        ADRL    r1, ms_writeable_findname
        STR     r1, m_writeable_findname + m_headersize + mi_icondata + ii_buffer

        ; Get validation string
        ADR     r1, ms_filename_validation_find
        MOV     r2, #0
        SWI     XMessageTrans_Lookup
        EXIT    VS
        STR     r2, m_writeable_findname + m_headersize + mi_icondata + ii_validation

        ; Store length
        MOV     r1, #?ms_writeable_findname
        STR     r1, m_writeable_findname + m_headersize + mi_icondata + ii_length
      ]

        ; Pull in the menus from the messages file
        ADRL    r1, rom_menustart
        ADR     r2, ram_menustart
        LDR     r3, =ram_menuend - ram_menustart
        SWI     XMessageTrans_MakeMenus

        ; Fill in File 'TenLongxxx' in the relevant main menu item
        ADRL    r1, ms_main_filexxx
        STR     r1, m_main + m_headersize + mi_size*mo_main_filexxx + mi_icondata + ii_buffer

        ; Fill in the magic sub menu numbers for menu warning messages
        MOV     r2, #menuwindow_copysave
        STR     r2, csavesubmenu
csavesubmenu * m_file+m_headersize+mi_size*mo_file_copy+mi_submenu

        MOV     r2, #menuwindow_newdir
        STR     r2, newdirsubmenu
newdirsubmenu * m_main+m_headersize+mi_size*mo_main_newdir+mi_submenu

        MOV     r2, #menuwindow_infobox
        STR     r2, infoboxsubmenu
infoboxsubmenu * m_file+m_headersize+mi_size*mo_file_info+mi_submenu

        MOV     r3, #menuwindow_setaccess
        STR     r3, accesssubmenu
accesssubmenu * m_file_access + m_headersize + mi_size*mo_file_access_other + mi_submenu

      [ version >= 155
        ; Zero the Find string
        ADRL    r1, ms_writeable_findname
        MOV     r0, #0
        STR     r0, [r1]
      ]

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; In    r4 -> dirviewer block
;
; Out   r0 = menu_selchar:
;               -       No selected files
;               S       Many (>1) selected files
;               F       A file is selected
;               D       A directory is selected
;               A       An application is selected
;       r3 -> selected leafname or nul string if not exactly one leaf selected
;       r6 = indication of how many files are selected:
;               0       None
;               1       One
;               42      Many
;       sel_whandle set up
; InitSelection has been performed, hence:
;       These have been set up:
;               sel_dir
;               sel_dirname
;               sel_filenumber
;               sel_fileblock
;               sel_leafname
;               sel_filetype
;       NE: r5 = Nowt if nothing doing
;       EQ: selection set up:
;               r2 -> (first) selected leafname
;               r4 -> (first) selected dirviewer block
;               r5 -> (first) selected fileinfo block
;
InitForMenuCreation     Entry

 [ debugmenu
        DREG    r4,"InitForMenuCreation, dirviewer="
 ]

        ; Set sel_whandle
        LDR     r0, [r4, #d_handle]
        STR     r0, sel_whandle

        ; Find out what's selected
        BL      InitSelection

        ; If nothing selected...
        MOVNE   r6, #0
        BNE     %FT05

        ; Something is selected, is there something else?
        BL      GetSelection

        ; If there's something else, then > 1 object is selected....
        MOVNE   r6, #1                  ; [one selection]
        MOVEQ   r6, #42                 ; [lots of selections]

        ; Restart the selection process
        BL      InitSelection

05      ; r6 now set up as number of selected files indicator
        ; Construct r0 and r3 from this...


        MOV     r0, #"-"                ; No selections (set default of no selections)

        CMP     r6, #1                  ; How many selections?
        MOVGT   r0, #"S"                ; Many selections
        ADRNEL  r3, anull               ; Neither gives a selected item name
        EXIT    NE

        ; One object selected, check which type it is.

        LDREQB  r14, [r5, #df_type]

        CMP     r14, #dft_file
        MOVEQ   r0, #"F"

        CMP     r14, #dft_dir
      [ version >= 143
        TEQNE   r14, #dft_partition
      ]
        MOVEQ   r0, #"D"

        CMP     r14, #dft_applic
        MOVEQ   r0, #"A"

        LDR     r3, sel_leafname

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; EncodeSelectionFileType
;
; Encodes sel_filetype into ms_writeable_filetype

EncodeSelectionFileType Entry   "r0-r3"

 [ debugmenu
        DLINE   "EncodeSelectionFileType"
 ]

        ADR     r1, ms_writeable_filetype

        LDR     r2, sel_filetype
        CMP     r2, #&1000              ; Dated file? VClear
        BHS     %FT05                   ; [no. empty string]

        MOVLO   r0, #FSControl_ReadFileType
        SWILO   XOS_FSControl
        BVS     %FT05

        STMIA   r1!, {r2, r3}

        ; Strip trailing spaces off the string
        ADR     r2, ms_writeable_filetype

        ; Loop over spaces to beginning of string
03      CMP     r2, r1                  ; Paranoia. Someone may return a
        BEQ     %FT05                   ; string comprised of just spaces!
        LDRB    r14, [r1, #-1]!
        CMP     r14, #space
        BEQ     %BT03
        ADD     r1, r1, #1              ; r1 -> end of string (space or CtrlCh)

05      ; Nul terminate at r1
        MOV     r14, #0
        STRB    r14, [r1]

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; RecodeAndRecreateMenu and EncodeAndCreateMenu
;
; In    r4 -> dirviewer block
;
; Recode doesn't set the writeable text fields, but does everything
; else the same as Encode. Recode is for reopening menus after an
; upcall modifying file.


menu_text_1_prefix      DCB     "MT1", 0
menu_text_1t_prefix     DCB     "MT1T", 0
type_number_string      DCB     "(fff)", 0
hex_digits              DCB     "0123456789abcdef"
                        ALIGN

RecodeAndRecreateMenu Entry "r1-r7"

 [ debugmenu
        DREG    r4,"RecodeAndRecreateMenu, dirviewer="
        ADR     lr, ms_writeable_dirname
        DSTRING lr,"dirname: "
 ]

        BL      InitForMenuCreation

        STRB    r0, menu_selchar

        B       %FT10

EncodeAndCreateMenu ALTENTRY

 [ debugmenu
        DREG r4, "EncodeAndCreateMenu, dirviewer="
        ADR     lr, ms_writeable_dirname
        DSTRING lr,"dirname: "
 ]
        BL      InitForMenuCreation

        STRB    r0, menu_selchar

        ; Copy the first selected object's name into the relevant fields.
        ADRL    r1, ms_writeable_leafname
        BL      strcpy
        LDR     r1, csavebox_text
        BL      strcpy
      [ version >= 138
        ADRL    r1, ms_writeable_dirname
        MOV     r2,#0
        STRB    r2,[r1]
      ]

 [ debugmenu
 DSTRING r2,"copied leafname ",cc
 DLINE " to writeable buffer"
 DREG r6,"menu r6 is ",,Integer
 ]

        ; Encode FileType field
        CMP     r6, #0                  ; No selection?
        BLNE    EncodeSelectionFileType


10      ; Encode rest of menu, excluding writeable fields.

 [ debugmenu
        ADR     lr, ms_writeable_dirname
        DSTRING lr,"dirname before main encoding: "
 ]

        ; Construct the relevant token for the selection main menu entry
        ; MT1F
        ;ADR     r1, dirnamebuffer
        LDR     r1, dirnamebuffer
        ADR     r2, menu_text_1_prefix
        BL      strcpy_advance
        STRB    r0, [r1], #1
        MOV     r0, #0
        STRB    r0, [r1]

        ; Lookup and substitute "File 'fred'"
        ADR     r0, messagetrans_struct
        ;ADR     r1, dirnamebuffer
        LDR     r1, dirnamebuffer
        Push    "r4-r7"                 ; Preseve the important registers
        ADRL    r2, ms_main_filexxx
        MOV     r4, r3
        MOV     r3, #?ms_main_filexxx
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        Pull    "r4-r7",VS
        EXIT    VS

        ; Construct the token for the title of the file submenu
        ; MT1TF
        ;ADR     r1, dirnamebuffer
        LDR     r1, dirnamebuffer
        ADR     r2, menu_text_1t_prefix
        BL      strcpy_advance
        LDRB    r2, menu_selchar
        STRB    r2, [r1], #1
        MOV     r2, #0
        STRB    r2, [r1]

        ; Lookup and don't fill in the file submenu title
        ;ADR     r1, dirnamebuffer
        LDR     r1, dirnamebuffer
        ADRL    r2, m_file + m_title
        MOV     r3, #12
        MOV     r4, #0
        SWI     XMessageTrans_Lookup
        Pull    "r4-r7"
        EXIT    VS

20 ; Encode main menu

        ADRL    r1, m_main
        BL      EncodeMenu

        LDR     r14, [r4, #d_nfiles]
        TEQ     r14, #0                 ; No entry if no files to select
        MOVEQ   r2, #mo_main_selectall
        BLEQ    ShadeMenu

        CMP     r6, #0
        MOVEQ   r2, #mo_main_filexxx    ; No submenu if no selected object
        BLEQ    ShadeMenu
        MOVEQ   r2, #mo_main_clearsel   ; Can't clear selection if none exists
        BLEQ    ShadeMenu

        LDR     r2, [r4, #d_filesystem] ; Can't do this if not owner
        TST     r2, #fod_readonly
        MOVNE   r2, #mo_main_newdir
        BLNE    ShadeMenu

        Push    "r1, r3"                ; Can't do this if no parent
        LDR     r1, [r4, #d_dirnamestore] ; r1 -> dirname
        BL      strlen
        BL      TryLeafStrip
        Pull    "r1, r3"
        MOVEQ   r2, #mo_main_openparent
        BLEQ    ShadeMenu


; Encode display submenu

        ADR     r1, m_display
        BL      EncodeMenu

        LDRB    r2, [r4, #d_viewmode]
        AND     r2, r2, #db_displaymode
        BL      TickMenu                ; 0..3

        LDRB    r2, [r4, #d_viewmode]
; ***   AND     r2, r2, #db_sortmode    ; (0..3)<<2
        MOV     r2, r2, LSR #dbb_sortmode
        ADD     r2, r2, #mo_display_sortname ; 0..3 -> 4..7
        BL      TickMenu

; Encode options submenu

        ADR     r1, m_options
        BL      EncodeMenu

 [ OptionsAreInRAM
        LDRB     r3, fileraction_options
        TST     r3, #Action_OptionConfirm
        MOVNE   r2, #mo_options_confirm
        BLNE    TickMenu
        TST     r3, #Action_OptionVerbose
        MOVNE   r2, #mo_options_verbose
        BLNE    TickMenu
        TST     r3, #Action_OptionForce
        MOVNE   r2, #mo_options_force
        BLNE    TickMenu
        TST     r3, #Action_OptionNewer
        MOVNE   r2, #mo_options_newer
        BLNE    TickMenu
        TST     r3, #Action_OptionConfirmDeletes
        MOVNE   r2, #mo_options_confirmdeletes
        BLNE    TickMenu
        TST     r3, #Action_OptionFaster
        MOVNE   r2, #mo_options_faster
        BLNE    TickMenu
 ]

 [ :LNOT:OptionsAreInRAM
        BL      ReadCMOSBits            ; Read current state to r3
        TST     r3, #confirm_cmos_bit   ; 0 -> no confirm
        MOVNE   r2, #mo_options_confirm
        BLNE    TickMenu

        TST     r3, #verbose_cmos_bit   ; 0 -> no verbose
        MOVNE   r2, #mo_options_verbose
        BLNE    TickMenu

        TST     r3, #force_cmos_bit     ; 0 -> don't force
        MOVNE   r2, #mo_options_force
        BLNE    TickMenu

        TST     r3, #newer_cmos_bit     ; 0 -> look, but don't look newer
        MOVNE   r2, #mo_options_newer
        BLNE    TickMenu
 ]


display_cmos_bits * 2_00000011
sorting_cmos_bits * 2_00001100

 [ :LNOT:OptionsAreInRAM
force_cmos_bit    * 2_00010000
confirm_cmos_bit  * 2_00100000
verbose_cmos_bit  * 2_01000000
newer_cmos_bit    * 2_10000000
 ]

; Encode file submenu

        ADR     r1, m_file
        BL      EncodeMenu

        CMP     r6, #0
        BLEQ    ShadeWholeMenu
        BEQ     %FT60

        LDR     r2, [r4, #d_filesystem] ; Can't do these if not owner
        TST     r2, #fod_readonly
        MOVNE   r2, #mo_file_delete
        BLNE    ShadeMenu
        MOVNE   r2, #mo_file_rename
        BLNE    ShadeMenu
 [ Fix001
        MOVNE   r2, #mo_file_access
        BLNE    ShadeMenu
 ]
        MOVNE   r2, #mo_file_settype
        BLNE    ShadeMenu
        MOVNE   r2, #mo_file_stamp
        BLNE    ShadeMenu

 ; encode the infobox information Only if there is only one object selection
        CMP     r6, #1
        BNE     %FT40

        LDR     r0, sel_leafname
        LDR     r2, sel_filetype
    [ {TRUE}
        Push    "r3"
        LDR     r3, sel_fileblock
        BL      FiletypeToSpritename
        Pull    "r3"
    |
        BL      FiletypeToSpritename
    ]
        LDR     r14, infobox_ptr
        LDR     r1, [r14, #w_icons+(i_size*0)+i_data+ii_buffer]
        BL      strcpy
        LDR    r14, infobox_ptr
        LDR     r1, [r14, #w_icons+(i_size*2)+i_data+ii_buffer]
        LDR     r2, sel_filetype
        TEQ     r2, #filetype_application
        TEQNE   r2, #filetype_directory
        TEQNE   r2, #filetype_undated
        BNE     %FT36

        ; Copy from the file submenu title the word Directory or Application
        ADR     r2, m_file + m_title
        BL      strcpy
        B       %FT37
36
        MOV     r0, #FSControl_ReadFileType
        SWI     XOS_FSControl
        ; shouldn't return an error

        ; copy the string into the indirect area
        SUB     sp, sp, #12
        STR     r2, [sp, #0]
        STR     r3, [sp, #4]
        MOV     r2, #0
        STR     r2, [sp, #8]
        MOV     r2, sp
        BL      strcpy
        ADD     sp, sp, #12
        LDRB    r2, [r1]

        ; add "(fff)"
        ADRL    r2, type_number_string
        BL      strcat

        ; Point r1 at the first f
        BL      strlen
        ADD     r1, r1, r3
        SUB     r1, r1, #4

        ; Fill in the hex digits
        ADRL    r3, hex_digits
        LDR     r2, sel_filetype
        AND     r0, r2, #&f00
        LDRB    r0, [r3, r0, ROR #8]
        STRB    r0, [r1], #1
        AND     r0, r2, #&f0
        LDRB    r0, [r3, r0, ROR #4]
        STRB    r0, [r1], #1
        AND     r0, r2, #&f
        LDRB    r0, [r3, r0]
        STRB    r0, [r1], #1
37
        ; construct type string
        LDR     r0, sel_fileblock
        LDR     r0, [r0, #df_length]
        LDR    r14, infobox_ptr
        LDR     r1, [r14, #w_icons+(i_size*4)+i_data+ii_buffer]
        LDR     r2, [r14, #w_icons+(i_size*4)+i_data+ii_length]
        SWI     XOS_ConvertCardinal4
        ; Ignore any error returned

        ; Encode the access
        LDR     r1, infobox_ptr
        ADD     r1, r1, #w_icons+(i_size*8)+i_data+ii_buffer

        ; Get the access
        LDR     r0, sel_fileblock
        LDR     r0, [r0, #df_attr]

        ; Set the owner bits of the string
        TST     r0, #locked_attribute
        MOVNE   r2, #"L"
        STRNEB  r2, [r1], #1
        TST     r0, #write_attribute
        MOVNE   r2, #"W"
        STRNEB  r2, [r1], #1
        TST     r0, #read_attribute
        MOVNE   r2, #"R"
        STRNEB  r2, [r1], #1

        MOV     r2, #"/"
        STRB    r2, [r1], #1
        TST     r0, #public_write_attribute
        MOVNE   r2, #"w"
        STRNEB  r2, [r1], #1
        TST     r0, #public_read_attribute
        MOVNE   r2, #"r"
        STRNEB  r2, [r1], #1

38      ; Terminate the string
        MOV     r2, #0
        STRB    r2, [r1], #1

        ; Fill in the leaf name
        LDR    r14, infobox_ptr
        LDR     r1, [r14, #w_icons+(i_size*5)+i_data + ii_buffer]
        LDR     r2, sel_leafname
        LDR     r3, [r14, #w_icons+(i_size*5)+i_data + ii_length]
	SUB	r3, r3, #1	; space for terminator
        BL      strncpy

        LDR    r14, infobox_ptr

        ; Fill in the date/load and exec address
        LDR     r0, sel_filetype
        TEQ     r0, #filetype_undated
        BEQ     %FT39

        ; Object is dated

        ; Undelete Date: text and date field
        LDR     r1, [r14, #w_icons+(i_size*6)+i_flags]
        BIC     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*6)+i_flags]
        LDR     r1, [r14, #w_icons+(i_size*7)+i_flags]
        BIC     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*7)+i_flags]

        ; Delete load/exec field
        LDR     r1, [r14, #w_icons+(i_size*10)+i_flags]
        ORR     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*10)+i_flags]

        ; Encode date
        LDR     r0, sel_fileblock
        SUB     sp, sp, #8
        LDR     r1, [r0, #df_exec]
        STR     r1, [sp, #0]
        LDR     r1, [r0, #df_load]
        STR     r1, [sp, #4]
        MOV     r0, sp
        LDR     r1, [r14, #w_icons+(i_size*7)+i_data]
        LDR     r2, [r14, #w_icons+(i_size*7)+i_data+8]
        ADRL    r3, mydateformat
        SWI     XOS_ConvertDateAndTime
        ADD     sp, sp, #8

        ADR     r1, m_file
        B       %FT40

39      ; Object is undated

        ; Delete Date: text and date field
        LDR     r1, [r14, #w_icons+(i_size*6)+i_flags]
        ORR     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*6)+i_flags]
        LDR     r1, [r14, #w_icons+(i_size*7)+i_flags]
        ORR     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*7)+i_flags]

        ; Undelete load/exec field
        LDR     r1, [r14, #w_icons+(i_size*10)+i_flags]
        BIC     r1, r1, #is_deleted
        STR     r1, [r14, #w_icons+(i_size*10)+i_flags]

        ; Encode load and exec
        LDR     r1, [r14, #w_icons+(i_size*10)+i_data+ii_buffer]
        LDR     r2, [r14, #w_icons+(i_size*10)+i_data+ii_length]

        LDR     r3, sel_fileblock
        LDR     r0, [r3, #df_load]
        SWI     XOS_ConvertHex8
        BVS     %FT90

        MOV     r0, #space
        STRB    r0, [r1]
        ADD     r1, r1, #4
        SUB     r2, r2, #4

        LDR     r0, [r3, #df_exec]
        SWI     XOS_ConvertHex8
        BVS     %FT90

        ADR     r1, m_file
40

        RSBS    r14, r6, #1             ; Can't do these if 1 < number of selected objects
        MOVLT   r2, #mo_file_copy
        BLLT    ShadeMenu
        MOVLT   r2, #mo_file_rename
        BLLT    ShadeMenu               ; >>>a186<<< ALWAYS set lastitem!
        MOVLT   r2, #mo_file_info
        BLLT    ShadeMenu

        LDR     r14, [r5, #df_helptype] ; If application, may have help entry
 [ debugsel
 DREG r14, "!Help type is "
 ]

        ; Disable help if > 1 selected item or no help available
        CMPGE   r14, #0
        MOVGE   r2, #"H"
        STRGEB  r2, menu_selchar
        MOVLT   r2, #mo_file_help
        BLLT    ShadeMenu

60      ; Encode access submenu dbox
        ADR     r1, m_file_access
        BL      EncodeMenu

        CMP     r6, #0                  ; Shade whole menu if not selected items
        BLEQ    ShadeWholeMenu
        BEQ     %FT90

        LDR     r2, [r4, #d_filesystem]
        TST     r2, #fod_readonly
        BLNE    ShadeWholeMenu
        BNE     %FT90

        ; Tick things only if only one file selected
        CMP     r6, #1
        BNE     %FT90
        LDRB    r14, [r5, #df_type]
        CMP     r14, #dft_file
      [ version >= 143
        CMPNE   r14, #dft_partition
      ]
        BNE     %FT90

        LDR     r3, [r5, #df_attr]

        ; Publicly readable?
        TST     r3, #public_read_attribute :OR: public_write_attribute
        MOVEQ   r2, #mo_file_access_nopublicread
        BLEQ    TickMenu
        TST     r3, #public_read_attribute
        MOVNE   r2, #mo_file_access_publicread
        BLNE    TickMenu

        ; Locked entirely/not at all?
        ANDS    r3, r3, #write_attribute :OR: locked_attribute :OR: public_write_attribute
        TEQ     r3, #locked_attribute
        MOVEQ   r2, #mo_file_access_locked
        BLEQ    TickMenu
        AND     r3, r3, #write_attribute :OR: locked_attribute
        TEQ     r3, #write_attribute
        MOVEQ   r2, #mo_file_access_unlocked
        BLEQ    TickMenu

90 ; Create the menu tree

        LDRVC   r2, absmousex
        LDRVC   r3, absmousey

        SUBVC   r2, r2, #12*charx       ; rather subjective value follows:
        ADDVC   r3, r3, #chary/2        ; +1/2*chary always

 [ debugmenu
        ADR     lr, ms_writeable_dirname
        DSTRING lr,"dirname before Wimp_CreateMenu: "
 ]

        ADRVCL  r1, m_main
        SWIVC   XWimp_CreateMenu

 [ debugmenu
        ADR     lr, ms_writeable_dirname
        DSTRING lr,"dirname after Wimp_CreateMenu: "
 ]

        EXIT

        END
