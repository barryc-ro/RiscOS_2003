; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                      C o m m o n   r o u t i n e s
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strlen
; ======
;
; Find the length of a string (exclusive of terminator, so can't HeapGet (0))

; In    r1 -> CtrlChar terminated string

; Out   r3 = number of chars (can be used as size for Heap)

strlen ENTRY "r0"

        MOV     r3, #0
10      LDRB    r0, [r1, r3]
        CMP     r0, #delete             ; Order, you git! EQ -> ~HI
        CMPNE   r0, #space-1            ; CtrlChar, delete
        ADDHI   r3, r3, #1
        BHI     %BT10
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strlen_excludingspaces
; ======================
;
; Find the length of a string (exclusive of terminator, so can't HeapGet (0))

; In    r1 -> space or CtrlChar terminated string

; Out   r3 = number of chars (can be used as size for Heap)

strlen_excludingspaces ENTRY "r0"

        MOV     r3, #0

10      LDRB    r0, [r1, r3]
        CMP     r0, #delete             ; Order, you git! EQ -> ~HI
        CMPNE   r0, #space              ; space, CtrlChar, delete
        ADDHI   r3, r3, #1
        BHI     %BT10
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strcat
; ======
;
; Concatenate two strings (r1 string assumed to be already 0 term'd for strcat)

; In    r1 -> NULL terminated string
;       r2 -> CtrlChar/r3 terminated string

; Out   new string in r1 = "r1" :CC: "r2" :CC: 0

strcat ENTRY "r1-r3"

        MOV     r3, #space-1

05      LDRB    r14, [r1], #1           ; Find where to stick the appendage
        CMP     r14, #0
        BNE     %BT05
        SUB     r1, r1, #1              ; Point back to the term char

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, r3                 ; Any char <= r3 terminates copy
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        EXITS

; ............................................................................

strcat_excludingspaces ALTENTRY

        MOV     r3, #space
        B       %BT05

; .............................................................................
;
; strcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area
;       r2 -> CtrlChar/r3 terminated src string

strcpy ALTENTRY

        MOV     r3, #space-1
        B       %BT10

; .............................................................................

strcpy_excludingspaces ALTENTRY

        MOV     r3, #space
        B       %BT10

; .............................................................................

strcpyTS ALTENTRY

        B       %BT10

; .............................................................................
;
; AppendLeafnameToDirname
; =======================

; In    r1 -> dest string (non-null), may already contain spaces
;       r2 -> leafname, CtrlChar terminater

AppendLeafnameToDirname ; NOROUT

        ALTENTRY

20      LDRB    r14, [r1], #1           ; Find where to stick the appendage
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, #space-1
        BHI     %BT20

        SUB     r1, r1, #1              ; Point back to the term char
        LDRB    r14, [r1, #-1]          ; If last char was not ':' then do '.'
        CMP     r14, #":"
        MOVNE   r14, #"."
        STRNEB  r14, [r1], #1

        MOV     r3, #space-1            ; Stick on the leafname
        B       %BT10

; .............................................................................
; nul_terminate
;
; In    r1 -> string
;
; Out string nul terminated at 1st char le space or eq delete
;
nul_terminate ENTRY "r1"
10
        LDRB    r14, [r1], #1
        CMP     r14, #delete
        CMPNE   r14, #space
        MOVLS   r14, #0
        STRLSB  r14, [r1, #-1]
        BHI     %BT10
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; strncpy
;
; In    r1 -> dest
;       r2 -> source
;       r3 = max size of string to copy ( <= r3+1 bytes filled )
; Out   Regs preserved and string copied.

strncpy ENTRY   "r1-r3"
        ; Initialise for the main loop
        CMP     r3, #0
        B       %FT20

        ; Main loop starts here
10      LDRB    r14, [r2], #1
        STRB    r14, [r1], #1
        CMP     r14, #delete
        CMPNE   r14, #space-1
        SUBNES  r3, r3, #1
20      BHI     %BT10           ; Loop entered here
        EXITS   NE              ; Exit if terminator is non-delete or < space-1
        TEQ     r3, #0
        EXITS   NE              ; Exit if didn't run out of space
        MOV     r14, #0
        STRB    r14, [r1]       ; Did run out of space, so terminate it now
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strcpy_advance
; ==============

; In    r1 -> dest area
;       r2 -> source string

; Out   r1 -> terminating null

strcpy_advance ENTRY "r2"

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, #space-1           ; Any char < space is a terminator
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        SUB     r1, r1, #1              ; -> null
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strcmp
; ======
;
; Compares two strings (case insensitive)

; In    r1 -> string, CtrlChar/r6 terminated
;       r2 -> string, CtrlChar/r6 terminated

; Out   EQ/NE as appropriate

strcmp ENTRY "r1, r2, r4-r7"

        MOV     r6, #space-1

00      LDR     r7, lower_case_table

10      LDRB    r4, [r1], #1
        CMP     r4, #space-1
        MOVLS   r4, #0
        CMP     r4, r6
        CMPNE   r4, #delete
        MOVEQ   r4, #0
        LDRB    r4, [r7, r4]

        LDRB    r5, [r2], #1
        CMP     r5, #space-1
        MOVLS   r5, #0
        CMP     r5, r6
        CMPNE   r5, #delete
        MOVEQ   r5, #0
        LDRB    r5, [r7, r5]

        CMP     r4, r5
        EXIT    NE                      ; [differ]

        CMP     r4, #0
        BNE     %BT10                   ; [more to come]

        EXIT                            ; [EQ: both finished together]

; .............................................................................

strcmp_excludingspaces ALTENTRY

        MOV     r6, #space
        B       %BT00

 [ disallow_recursive_copies
strcmpTS ALTENTRY
        B       %BT00
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strncmp
; =======
;
; Compares two strings (case insensitive)

; In    r1 -> string, CtrlChar/r6 terminated
;       r2 -> string, CtrlChar/r6 terminated
;       r3 = source span

; Out   EQ/NE as appropriate: if EQ,CC -> span matched, but dest not finished

strncmp ENTRY "r1-r7"

        MOV     r6, #space-1

00      LDR     r7, lower_case_table

10      CMP     r3, #0                  ; Finished source span ?
        BEQ     %FT90

        SUB     r3, r3, #1

        LDRB    r4, [r1], #1
        CMP     r4, #space-1
        MOVLS   r4, #0
        CMP     r4, r6
        CMPNE   r4, #delete
        MOVEQ   r4, #0
        LDRB    r4, [r7, r4]

        LDRB    r5, [r2], #1
        CMP     r5, #space-1
        MOVLS   r5, #0
        CMP     r5, r6
        CMPNE   r5, #delete
        MOVEQ   r5, #0
        LDRB    r5, [r7, r5]

        CMP     r4, r5
        EXIT    NE                      ; [differ]

        CMP     r4, #0
        BNE     %BT10                   ; [more to come]

        EXIT                            ; [EQ,CS: both finished together]


90      LDRB    r5, [r2]                ; Has comparison string now finished ?
        CMP     r5, #delete             ; Order, you git !
        CMPNE   r5, r6
        MOVLS   r5, #1                  ; CS -> span matched, dest finished
        MOVHI   r5, #0                  ; CC -> span matched, dest not finished
        MOVS    r5, r5, LSR #1          ; EQ always
        EXIT

; .............................................................................

strncmp_excludingspaces ALTENTRY

        MOV     r6, #space
        B       %BT00


        END
