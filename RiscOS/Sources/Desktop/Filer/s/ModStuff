; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Table of service calls we want

        ASSERT  Service_StartWimp > Service_Reset
        ASSERT  Service_StartedWimp > Service_StartWimp
        ASSERT  Service_MessageFileClosed > Service_StartedWimp
        ASSERT  Service_ResourceFSStarting > Service_MessageFileClosed
        ASSERT  Service_TerritoryStarted > Service_ResourceFSStarting
        ASSERT  Service_DiscDismounted > Service_TerritoryStarted

ServiceTable

        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartWimp
        DCD     Service_StartedWimp
        DCD     Service_MessageFileClosed
      [ includeresources
        DCD     Service_ResourceFSStarting
      ]
        DCD     Service_TerritoryStarted
        DCD     Service_DiscDismounted
        DCD     0
        DCD     ServiceTable - Module_BaseAddr



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Filer_Service ROUT

        MOV     r0, r0                  ; Indicates there is a service call table

        ; Fast rejection
        TEQ     r1, #Service_Reset
        TEQNE   r1, #Service_StartWimp
        TEQNE   r1, #Service_StartedWimp
      [ includeresources
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        TEQNE   r1, #Service_MessageFileClosed
        TEQNE   r1, #Service_TerritoryStarted
        TEQNE   r1, #Service_DiscDismounted
        MOVNES  pc, lr

ServiceUrsula
        
        [ {FALSE}
        DevMessage     "                Development Filer Module (",$Module_MajorVersion,")          - NOT FOR SALE" 
        ]

        TEQ     r1, #Service_StartWimp
        BEQ     Filer_Service_StartWimp

        TEQ     r1, #Service_Reset
        BEQ     Filer_Service_Reset

        TEQ     r1, #Service_MessageFileClosed
        BEQ     Filer_Service_MessageFileClosed
                              
      [ includeresources

        TEQ     r1, #Service_ResourceFSStarting
        BEQ     Filer_Service_ResourceFSStarting
      ]

        TEQ     r1, #Service_DiscDismounted
        BEQ     Filer_Service_DiscDismounted

        TEQ     r1, #Service_TerritoryStarted
        BEQ     Filer_Service_TerritoryStarted

        TEQ     r1, #Service_StartedWimp
        MOVNE   pc, lr


Filer_Service_StartedWimp ENTRY
        LDR     r14, [r12]
        LDR     r14, mytaskhandle
        CMP     r14, #0
        MOVLT   r14, #0
        STRLT   r14, mytaskhandle       ; Store 0 if was -1 (failed to expand for desktop work)
        EXIT                            ; Keep workspace around for poking in


Filer_Service_Reset ENTRY "r0-r6"
        LDR     r12, [r12]
        LDR     r14, mytaskhandle
        CMP     r14, #0
        BLGT    ShrinkWorkspace
        BLGT    JunkApplicationLists
        MOV     r14, #0
        STR     r14, mytaskhandle
        EXITS

Filer_Service_StartWimp ENTRY
        LDR     r12, [r12]
        LDR     r14, mytaskhandle
        TEQ     r14, #0
        MOVEQ   r14, #-1
        STREQ   r14, mytaskhandle
        ADREQL  r0, Filer_StarCommand
        MOVEQ   r1, #0
        EXIT

        LTORG

Filer_Service_MessageFileClosed ENTRY
        LDR     r12, [r12]
        LDR     r14, mytaskhandle
        TEQ     r14, #0
        EXIT    MI
        EXIT    EQ
        LDR     r14, poll_word
        ORR     r14, r14, #poll_word_messagefile_closed
        STR     r14, poll_word
        EXIT
                  
      [ includeresources
Filer_Service_ResourceFSStarting ENTRY "r0"
        ADRL    r0, ResourceFSFiles
        MOV     lr, pc
        MOV     pc, r2
        EXIT             
      ]

Filer_Service_DiscDismounted ENTRY "r0-r2"

        LDR     r12, [r12]
        LDR     r14, mytaskhandle
        CMP     r14, #0
        EXITS   LS

        MOV     r1, r2
        MOV     r2, #0
        BL      Queue_CloseDir_Request_To_Self

        EXITS

Filer_Service_TerritoryStarted ENTRY "r0"

        LDR     r12, [r12]
        MOV     r0, #-1
        SWI     XTerritory_LowerCaseTable
        STRVC   r0, lower_case_table

        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Initialise the Filer to have a bit of workspace
;

Filer_Init ENTRY

        ; If the private word is non_zero something is wrong
        LDR     r0, [r12]
        CMP     r0, #0
        EXIT    NE              ; Somebody is messing us about!

        ; Get the block
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #Filer_SmallWorkspaceSize
        SWI     XOS_Module
        EXIT    VS              ; Bugger, even the little bit we want didn't allocate!

        ; Hold the private word's address in r1 and set wp for variables
        MOV     r1, r12
        MOV     wp, r2

        ; Ensure block is well formed before attaching it to private word
        STR     r1, privatewordaddr

        MOV     r0, #0
        STR     r0, mytaskhandle
      [ version >= 132
        STR     r0,ctrl_pressed
        STRB    r0,initshiftstate
      ]
        STR     r0, msgtrans_blockptr

        ; Set default FilerAction options
        ORR     r0, r0, #Action_OptionVerbose
        ORR     r0, r0, #Action_OptionNewer
        STRB    r0, fileraction_options

        MOV     r0, #0
        STRB    r0, layout_options
                     
        ; Zero out the various lists we have
        MOV     r0, #Nowt
        STR     r0, ViewerList
        STR     r0, DirRequestList
        STR     r0, ApplicList
        STR     r0, ApplicListEndPointer
        STR     r0, ApplicDirList

        MOV     R0,#0
        STR     r0, wimpextend
        STR     r0, wimpr12
        STR     r0, wimplistat
        STR     r0, wimpsprname
        STR     r0, filetype_cache
        STR     r0, redraw_all

        ADR     r0, DirRequestList
        STR     r0, DirRequestEndLink


        ; Attach block to private word
        STR     wp, [r1]

        ; Get lower case table from Territory Manager but allow to fail as territory
        ; might not be there until Service_TerritoryStarted.
        MOV     r0, #-1
        SWI     XTerritory_LowerCaseTable
        STRVC   r0, lower_case_table

        ; initialise Filer$Path if not already done
        ADR     R0, FilerPath
        MOV     R2, #-1
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal          ; returns R2=0 if doesn't exist
        CMP     R2, #0                  ; clears V as well!

        ADREQ   R0, FilerPath
        ADREQ   R1, PathDefault
        MOVEQ   R2, #?PathDefault
        MOVEQ   R3, #0
        MOVEQ   R4, #VarType_String
        SWIEQ   XOS_SetVarVal
        CLRV

      [ includeresources
        ; Register our resources
        ADRL    r0, ResourceFSFiles
        SWI     XResourceFS_RegisterFiles
        CLRV               
      ]


        EXIT

FilerPath       DCB     "Filer$Path", 0
PathDefault     DCB     "Resources:$.Resources.Filer.", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0-r6 trashable

; Don't distinguish between soft/hard kills, as WindowManager can't cope either

Filer_Die ENTRY

        LDR     wp, [r12]
        BL      FreeWorkspace
        EXITS                           ; Mustn't refuse to die

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Get out of here, deallocating all resources used by Filer

; In    wp valid or 0, sp valid

; Out   r12 -> private word
;       VC: r0-r5 corrupt, sp_usr no longer valid
;       VS: r0 -> error

FreeWorkspace ROUT

        CMP     wp, #0
        MOVLE   pc, lr

        ; Hold lr in r5 as we have no reliable stack and may be in svc mode
        MOV     r5, lr
                      
      [ includeresources
        ; Release our resourcefsfiles.
        ADRL    r0, ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
        CLRV            
      ]

        BL      ShrinkWorkspace

        BL      JunkApplicationLists

        ; Unlink the space from the private word
        MOV     r0, #0
        MOV     r2, wp
        LDR     r12, privatewordaddr
        STR     r0, [r12]

        ; Free the block
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        ; return
        MOV     pc, r5

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; ShrinkWorkspace
;
; This shrinks the workspace to non-desktop size and closes down the wimp session
; sp_usr no longer be valid
;

ShrinkWorkspace ROUT ; NOENTRY as stack in unknown state

        CMP     wp, #0                  ; Are we active ? VClear
        MOVEQ   pc, lr                  ; [no, so nothing to free]

        ; Check task handle, if didn't get started then nothing to discard.
        LDR     r0, mytaskhandle
        CMP     r0, #0
        MOVLE   pc, lr                  ; Condition => VClear

        MOV     r6, lr                  ; Not lr as may be in svc mode or may lose our stack space

        BL      DiscardTempString

        BL      FreeLists

        BL      discard_savedisplaybuffer

        ADR     r0, messagetrans_struct
        SWI     MessageTrans_CloseFile
        MOV     r0, #0
        STR     r0, msgtrans_blockptr

        ; Get off the UpCall vector
        MOV     r0, #UpCallV
        ADRL    r1, UpCallHandler
        MOV     r2, wp
        SWI     XOS_Release

        ; Tell everybody that the Filer is dying
        LDR     r0, mytaskhandle        ; Say goodbye iff task started fully
        MOV     r1, #Service_FilerDying
        SWI     XOS_ServiceCall

        ; Die
        LDR     r0, mytaskhandle        ; CloseDown iff task started fully
        LDR     r1, taskidentifier
        SWI     XWimp_CloseDown

        ; Shrink the workspace to small size
        MOV     r0, #ModHandReason_ExtendBlock
        MOV     r2, wp
        LDR     r3, large_workspace_size        ; OSS Get actual size.
        RSB     r3, r3, #Filer_SmallWorkspaceSize       ; Subract from small.
        SWI     XOS_Module
        MOVVC   wp, r2                  ; If error regs may be corrupted so only load if OK

        ; Point private word at small workspace
        LDR     r2, privatewordaddr
        STR     wp, [r2]

        ; Zero the task handle
        MOV     r2, #0
        STR     r2, mytaskhandle

        MOV     pc, r6                  ; NB. Can't use lr as we may be in svc
                                        ; mode, and no stack as we may be in
                                        ; usr mode after deallocating it!

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; GrowWorkspace
;
; This grows the workspace if it is valid to do so now. It is expected
; that this is in usr mode (and hence SWIs do not corrupt LR).
;
; Out - mucho registers corrupted.
;

GrowWorkspace   ROUT ; NOENTRY due to stack being obtained just at the moment

        ; Only grow if in a start wimp situation
        LDR     r0, mytaskhandle
        CMP     r0, #-1
        EXIT    NE

        LDR     r3, =Filer_WorkspaceSize - Filer_SmallWorkspaceSize
        MOV     r2, wp
        MOV     r0, #ModHandReason_ExtendBlock ; Extend workspace to desktop proportions
        SWI     XOS_Module
        MOVVS   pc, lr

        MOV     r11, lr                 ; We now call other routines
        MOV     wp, r2                  ; intermediate wp
        LDR     r1, privatewordaddr
        STR     wp, [r1]

        wsaddr  sp, stacktop            ; need stack to find template size
        LDR     r0, =Filer_WorkspaceSize
        STR     r0, large_workspace_size

; OSS Find out size needed for template files. Accumulate total size
; needed in r10, and store this accumulating offset in each pointer location
; as we go to make calculating the addresses later trivial. We use a macro
; to do the accumulating, to ensure that all buffers start at a word
; address. Note that the indirect area for a window is always before the
; main area, so we can use the pointer for the main area as the limit for
; the indirect area.

    MACRO
    add_size_r10 $reg
    ADD     r10, r10, $reg
    ADD     r10, r10, #3
    BIC     r10, r10, #3
    MEND

        MOV     r10, #0
        addr    r1, templatefilename
        SWIVC   XWimp_OpenTemplate
        BVS     ErrorAbort

 [ fonthack
        MOV     r0, #0
        wsaddr  r1, fontrefarray
        MOV     r14, #256
00      STR     r0, [r1], #4
        SUBS    r14, r14, #4
        BNE     %BT00
 ]

; Find memory size for directory viewer windows. This one must be first.
; The indirected icons are ignored as they are thrown away.

        MOV     r1, #-1
        addr    r5, wn_directory
        BL      load_template
        BVS     ErrorCloseTemplate
        add_size_r10 r1

; Memory for access windows.

 [ :LNOT: actionwind

        MOV     r1, #-1
        addr    r5, wn_daccess
        BL      load_template
        BVS     ErrorCloseTemplate
        STR     r10, ind_daccesswindow_ptr
        add_size_r10 r2
        STR     r10, daccesswindow_ptr
        add_size_r10 r1
 ]

        ; Memory for file access window
        MOV     r1, #-1
        addr    r5, wn_faccess
        BL      load_template
        BVS     ErrorCloseTemplate
        STR     r10, ind_faccesswindow_ptr
        add_size_r10 r2
        STR     r10, faccesswindow_ptr
        add_size_r10 r1

        ; Memory for copy save window
        MOV     r1, #-1
        addr    r5, wn_csavebox
        BL      load_template
        BVS     ErrorCloseTemplate
        STR     r10, ind_csavebox_ptr
        add_size_r10 r2
        STR     r10, csavebox_ptr
        add_size_r10 r1

        ; Memory for new directory window
        MOV     r1, #-1
        addr    r5, wn_newdirbox
        BL      load_template
        BVS     ErrorCloseTemplate
        STR     r10, ind_newdirbox_ptr
        add_size_r10 r2
        STR     r10, newdirbox_ptr
        add_size_r10 r1

        ; Memory for info box window
        MOV     r1, #-1
        addr    r5, wn_infobox
        BL      load_template
        BVS     ErrorCloseTemplate
        STR     r10, ind_infobox_ptr
        add_size_r10 r2
        STR     r10, infobox_ptr
        add_size_r10 r1

        SWI     XWimp_CloseTemplate
        BVS     ErrorCloseTemplate

; OSS Now grow workspace for template memory.

        MOV     r3, r10
        MOV     r2, wp
        MOV     r0, #ModHandReason_ExtendBlock
        SWI     XOS_Module
        BVS     ErrorAbort

        MOV     wp, r2                  ; Final wp.
        LDR     r1, privatewordaddr
        STR     wp, [r1]

        wsaddr  sp, stacktop            ; New stack.
        LDR     r1, large_workspace_size
        ADD     r0, r10, r1
        STR     r0, large_workspace_size ; New size

; OSS Now turn offsets into pointers.

        ADD     r1, wp, r1              ; Pointer to directory viewer

    MACRO
    make_address $loc
    LDR     r0, $loc
    ADD     r0, r0, r1
    STR     r0, $loc
    MEND

 [ :LNOT: actionwind

        make_address ind_daccesswindow_ptr
        make_address daccesswindow_ptr
 ]

        make_address ind_faccesswindow_ptr
        make_address faccesswindow_ptr

        make_address ind_csavebox_ptr
        make_address csavebox_ptr

        make_address ind_newdirbox_ptr
        make_address newdirbox_ptr

        make_address ind_infobox_ptr
        make_address infobox_ptr

; OSS Normal service is now resumed.

        MOV     r0, #0
        STR     r0, displaysave_buffer_rover
        STR     r0, displaysave_buffer_bytes_in_it

        MOV     r0, #Nowt               ; Not yet claimed any extra ws
        STR     r0, ViewerList
        STR     r0, DirRequestList
        STR     r0, TempString
        STR     r0, displaysave_bufferp

        MOV     R0,#0
        STR     r0, wimpextend
        STR     r0, wimpr12
        STR     r0, wimplistat
        STR     r0, wimpsprname 
        STR     r0, filetype_cache
        STR     r0, redraw_all

        ADR     r0, DirRequestList
        STR     r0, DirRequestEndLink

        ADR     r0, messagetrans_struct
        ADRL    r1, messages_file
        MOV     r2, #0
        SWI     MessageTrans_OpenFile
        STRVC   r0, msgtrans_blockptr

        MOV     pc, r11


taskidentifier
        DCB     "TASK"                  ; Picked up as a word

        END
