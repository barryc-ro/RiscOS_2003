; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_user_message (and _recorded)
; ==================

; In    r1 -> wimp_eventstr
;             [r1, #0]     block size
;             [r1, #12]    your ref
;             [r1, #16]    message action
;             [r1, #20...] message data

; Out   all regs may be corrupted - going back to PollWimp

 [ version >= 113
event_user_message      ENTRY

      [ version >= 134
        Push    "r0-r2"
        MOV     r0, #&81                ; Store initiating SHIFT state
        MOV     r1, #&FF
        MOV     r2, #&FF
        SWI     XOS_Byte
        STRB    r1, initshiftstate      ; &FF -> SHIFT depressed
        Pull    "r0-r2"
      ]

        LDR     r0, [r1, #ms_action]
  [ debugtask
  DREG r0, "Got UserMessage "
  ]
        ADR     r2, messages_processed_start
        B       %FT01
02
        TEQ     r14, r0
        SUBEQ   pc, r2, #4
01
        LDR     r14, [r2], #8
        CMP     r14, #-1
        BNE     %BT02
  [ debugtask
  DLINE "Ignored UserMessage"
  ]
        EXIT

messages_processed_start
        DCD     Message_FilerOpenDir
        B       message_fileropendir_code
        DCD     Message_FilerCloseDir
        B       message_filerclosedir_code
        DCD     Message_FilerOpenDirAt
        B       message_fileropendirat_code
        DCD     Message_DataSave
        B       message_datasave_code
 [ version >= 117
 |
        DCD     Message_DataSaveAck
        B       message_datasaveack_code
        DCD     Message_RAMFetch
        B       message_ramfetch_code
 ]
        DCD     Message_DataLoad
        B       message_dataload_code
        DCD     Message_DataLoadAck
        B       message_dataloadack_code
        DCD     Message_ModeChange
        B       message_modechange_code
        DCD     Message_HelpRequest
        B       message_helprequest_code
        DCD     Message_Quit
        B       message_quit_code
        DCD     Message_MenuWarning
        B       message_menuwarning_code
        DCD     Message_SaveDesktop
        B       message_savedesktop_code
 [ version >= 116
        DCD     Message_MenusDeleted
        B       message_menusdeleted_code
 ]
        DCD     Message_FontChanged
        B       message_fontchanged_code
        [ version >=186
        DCD     Message_ClaimEntity
        B       message_claim_entity
        ]
        DCD     -1
 |
event_user_message ENTRY

        LDR     r0, [r1, #ms_action]
  [ debugtask
  DREG r0, "Got UserMessage "
  ]
        SUBS    r14, r0, #Message_FilerOpenDir
        BEQ     %FA20
        CMP     r14, #Message_FilerCloseDir-Message_FilerOpenDir
        BEQ     %FT30
        CMP     r14, #Message_FilerOpenDirAt-Message_FilerOpenDir
        BEQ     %FA25

        CMP     r0, #Message_DataSave
        BEQ     %FT50
        CMP     r0, #Message_DataSaveAck
        BEQ     %FT51
        CMP     r0, #Message_RAMFetch
        BEQ     %FT53
        CMP     r0, #Message_DataLoad
        BEQ     %FT60
        CMP     r0, #Message_DataLoadAck
        BEQ     %FT70

        LDR     r14, =Message_ModeChange
        CMP     r14, r0
        BEQ     %FT80

  [ interactive_help
        LDR     r14, =Message_HelpRequest
        CMP     r14, r0
        BEQ     %FT86
  ]

        CMP     r0, #Message_Quit
  [ debugtask
  BEQ %FT00
  DLINE "Ignored UserMessage"
00
  ]
        EXIT    NE
 ]
; .............................................................................
; Quit
 [ version >= 113
message_quit_code       ROUT    ; NOENTRY
        BL      ShrinkWorkspace
 |
        BL      FreeWorkspace
 ]
        SWI     XOS_Exit

; .............................................................................
; Filer_OpenDir message format: data+0 filesystem
;                               data+4 bitset
;                               data+8 full dirname - may have space then info
;                                      eg. 'net#arf:& (a500)'

 [ version >= 113
message_fileropendir_code      ROUT    ; NOENTRY

  [ version < 139
        Push    "r1, r2"
        ADD     r1, r1, #ms_data + 8    ; Try to derive filesystem automaticlly
        MOV     r2, #0                  ; Allow funny terms
        MOV     r0, #FSControl_LookupFS
        SWI     XOS_FSControl
 [ debugtask
 DREG r1,"Initial set + filesystem "
 ]
        LDRVC   r1, [r2, #fscb_infoword]
        STRVC   r1, setplusfilesystem
        Pull    "r1, r2"
        EXIT    VS
  ]

        ADD     r1, r1, #ms_data + 8
        MOV     r8, #0                  ; Use default viewmode
        BL      OpenDir_Root

        EXIT
 |
 [ True
  [ version < 139
20      Push    "r1, r2"
        ADD     r1, r1, #ms_data + 8    ; Try to derive filesystem automaticlly
        MOV     r2, #0                  ; Allow funny terms
        MOV     r0, #FSControl_LookupFS
        SWI     XOS_FSControl
 [ debugtask
 DREG r1,"Initial set + filesystem "
 ]
        LDRVC   r1, [r2, #fscb_infoword]
        STRVC   r1, setplusfilesystem
        Pull    "r1, r2"
        EXIT    VS
  ]
 |
20
 ]
        wsaddr  r11, initwindowinfo
        LDMIA   r11, {r3, r4, x1, y1, scx, scy}
 [ :LNOT: centralwrap
 [ debugredraw
 DREG r3,"*** Open topleveldir at ",cc,Integer
 DREG r4,",",,Integer
 DREG x1,"window size is ",cc,Integer
 DREG y1,",",cc,Integer
 DREG scx,", offsets ",cc,Integer
 DREG scy,",",,Integer
 ]
; Wrap position to keep on screen

        LDR     r2, xwindsize
        SUB     r2, r2, #vscroll_width  ; Correct for v. scroll bar
        CMP     r3, #0                  ; if xpos<0 then xpos+:=ww
        ADDLT   r3, r3, x1
        ADD     r14, r3, x1             ; if xpos+ww>sl then xpos:=xpos+ww-sl
 [ debugredraw
 DREG r2, "xwindsize = ",cc,Integer
 DREG r14,", xpos+ww = ",,Integer
 ]
        CMP     r14, r2
        SUBGT   r3, r14, r2

        LDR     r2, ywindsize
        SUB     r2, r2, #title_height   ; Correct for title bar
        SUB     r14, r4, y1             ; Note: windsize +ve
 [ debugredraw
 DREG r2, "ywindsize = ",cc,Integer
 DREG r14,", ypos-wh = ",,Integer
 ]
        CMP     r14, #iconbar_height    ; if ypos-wh<96 then ypos+:=wh
        ADDLT   r4, r4, y1
        CMP     r4, r2                  ; if ypos>sl then ypos:=ypos+wh-sl
        SUBGT   r4, r4, r2
        ADDGT   r4, r4, y1

        ADD     x1, r3, scx             ; Move place where next dirviewer comes
        ADD     y1, r4, scy             ; Usually -ve
        STR     x1, initwindowx
        STR     y1, initwindowy
 [ debugredraw
 DREG x1,"Writing back ",cc,Integer
 DREG y1,",",,Integer
 ]
 ]

 [ False
        LDR     r6,  [r1, #ms_data + 0]
        LDR     r14, [r1, #ms_data + 4]
        ORR     r6, r6, r14, LSL #8     ; r6 := merged set + filesystem
 [ debugtask
 DREG r6,"Initial set + filesystem "
 ]
        STR     r6, setplusfilesystem
 ]

        ADD     r2, r1, #ms_data + 8    ; r2 -> full dirname
        ADR     r1, dirnamebuffer
        BL      strcpy                  ; r1 -> full dirname, copied away
                                        ; including spaces
 [ False
 ADR r2, wally
 BL strcat
 ]
 [ centralwrap
        MOV     r8, #0                  ; Use default viewmode
        MOV     r9, r3                  ; Unwrap by position
        BL      WrappingOpenDir
        ADD     r3, r3, scx
        STR     r3, initwindowx
        ADD     r4, r4, scy
        STR     r4, initwindowy
 |
        BL      OpenDir
 ]
        EXIT

 [ False
wally
 DCB " (a500)", 0
 ALIGN
 ]
 ]

 [ openat
; .............................................................................
; Filer_OpenDirAt message format:       data+0  filesystem
;                                       data+4  bitset
;                                       data+8  x
;                                       data+12 y
;                                       data+16 w
;                                       data+20 h
;                                       data+24 viewmode
;                                       data+25 full dirname - may have
;                                               space then info
;                                               eg. 'net#arf:& (a500)'

 [ version >= 113
message_fileropendirat_code     ROUT    ; NOENTRY
 |
25
 ]
 [ version < 139
        Push    "r1, r2"
        ADD     r1, r1, #ms_data + 25   ; Try to derive filesystem automaticlly
        MOV     r2, #0                  ; Allow funny terms
        MOV     r0, #FSControl_LookupFS
        SWI     XOS_FSControl
        LDRVC   r1, [r2, #fscb_infoword]
        STRVC   r1, setplusfilesystem
        Pull    "r1, r2"
        EXIT    VS
 ]

        ; Load into r3, r4, r5, r6, r8 window parameters from message
        ADD     r11, r1, #ms_data+8
        LDMIA   r11, {r3, r4, r5, r6}
        LDRB    r8, [r1, #ms_data+24]

        ADD     r1, r1, #ms_data + 25   ; r2 -> full dirname

        ; If window position is (0, 0), then go do a wrapping OpenDir
        CMP     r3, #0
        CMPEQ   r4, #0
        BLEQ    OpenDir_Root

        ; Do a normal OpenDir if position and size specified.
        BLNE    OpenDir_At
        EXIT
 ]

OpenDir_Root    ENTRY
        ; Do a normal open dir with default everythings but viewmode.
        ; r1 -> path name
        MOV     r2, r1
        ADR     r1, dirnamebuffer
        BL      strcpy

        LDR     r3, initwindowx
        LDR     r4, initwindowy
      [ centralwrap
        MOV     r9, r3                  ; Unwrap by position
        BL      WrappingOpenDir
      |
        MOV     r5, #0
        BL      OpenDir
      ]
        LDR     r14, initwindow_xoff
        ADD     r3, r3, r14
        STR     r3, initwindowx
        LDR     r14, initwindow_yoff
        ADD     r4, r4, r14
        STR     r4, initwindowy
        EXIT

OpenDir_At      ENTRY
        ; r1 -> path name
        ; r3 = x0, r4 = y0, r5 = width, r6 = height
        ; r8 = viewmode
        MOV     r2, r1
        ADR     r1, dirnamebuffer
        BL      strcpy

        BL      OpenDir
        EXIT

; .............................................................................
; Filer_CloseDir message format: data+0 1 words (reserved)
;                                data+4 1 word:
;                                       bit     meaning when set
;                                       0       'don't canonicalise this before using it'
;                                       1-31    reserved
;                                data+8 full dirname (eg. net#vax:)

 [ version >= 113
message_filerclosedir_code      ROUT    ; NOENTRY
 |
30
 ]
        LDR     r2, [r1, #ms_data+4]
        ADD     r1, r1, #ms_data + 8
        BL      DeleteSubDirs
        EXIT

; .............................................................................
; Got a DataSave; -> someone wants to save a file; give him a name

 [ version >=113
message_datasave_code   ROUT    ; NOENTRY
 |
50
 ]
 [ debugtask
 DREG r0,"Someone wants a dirname appending from window ",,Integer
 ]
        LDR     r0, [r1, #msDataTransfer_window]
        BL      FindDir
        EXIT    NE                      ; [not a dirviewer]


; I have to send a reply to the enquirer after appending leafname to dirname

        SUB     sp, sp, #256
        ADD     r2, r1, #msDataTransfer_filename ; Hide source leafname
        MOV     r1, sp
        BL      strcpy
  [ debugtask
 DSTRING r1, "Copied away his leafname "
  ]
        MOV     r1, r2

        LDR     r2, [r4, #d_dirnamestore] ; r2 -> dirname
        BL      strcpy_excludingspaces  ; send him our full dirname, no spaces

        MOV     r2, sp                  ; after appending his leafname
        BL      AppendLeafnameToDirname
00
        ADD     sp, sp, #256

        BL      strlen
        ADD     r1, r1, r3

        ADD     r1, r1, #3+1            ; round up to word size (remember null)
        BIC     r2, r1, #3
        ADR     r1, userdata
        SUB     r2, r2, r1
        STR     r2, [r1, #ms_size]

        LDR     r0, =Message_DataSaveAck
        BL      SendAck
        EXIT

        LTORG

; .............................................................................
; Got a DataLoad, so just acknowledge it (don't piss about with contents/size)

message_dataload_code   ROUT    ; NOENTRY
        LDR     r0, =Message_DataLoadAck
        BL      SendAck
        EXIT

; .............................................................................
; Got a DataLoadAck (from DataOpen/DataLoad); close dir if appropriate

message_dataloadack_code        ROUT    ; NOENTRY
        BL      CloseInitiatingDir
        EXIT

; .............................................................................
; Mode change ocurred

message_modechange_code ROUT    ; NOENTRY
        BL      SetForThisMode
 [ bug1596
        ; Run round all dirviewers setting their filesperrow to
        ; db_fpr_reshape to force a reshape which also resets their extents.
        LDR     r4, ViewerList          ; Run round dirviewers so we will
                                        ; resize correctly

      [ centralwrap
        MOV     r14, #db_fpr_reshape    ; A filesperrow to cause a reshape
      |
        MOV     r14, #0
      ]

85      TEQ     r4, #Nowt
        EXIT    EQ

        STRB    r14, [r4, #d_filesperrow]
        InvSmiWidth r4

        LDR     r4, [r4, #d_link]
        B       %BT85
 |
        LDR     r4, ViewerList          ; Run round dirviewers so we will
                                        ; resize correctly
85      TEQ     r4, #Nowt
        EXIT    EQ

        MOV     r14, #0
        STRB    r14, [r4, #d_filesperrow]
        STR     r14, [r4, #d_smiwidth]

        LDR     r4, [r4, #d_link]
        B       %BT85
 ]

; .............................................................................
; !Help wants some help

viewer_help_tag                 DCB     "Viewer_Help", 0
infobox_help_tag_prefix         DCB     "Infobox_Help_", 0
copysave_help_tag_prefix        DCB     "Copysave_Help_", 0
access_help_tag_prefix          DCB     "Access_Help_", 0
unknown_help_tag_prefix         DCB     "Unknown_Help_", 0
menu_help_tag_prefix            DCB     "MH", 0
        ALIGN

message_helprequest_code        ROUT    ; NOENTRY
        LDR     r0, [r1, #ms_data + b_window]
        BL      FindDir
        ADREQ   r2, viewer_help_tag
        BEQ     %FT90

        ; One of our menu windows hanging off the menu
        LDR     r14, h_menuwindow_loc
        TEQ     r14, #0
        LDRNE   r14, [r14]
        TEQ     r0, r14
        BNE     %FT10
        LDR     r14, type_menuwindow
        TEQ     r14, #menuwindow_copysave
        ADREQ   r2, copysave_help_tag_prefix
        BEQ     %FT05
        TEQ     r14, #menuwindow_setaccess
        ADREQ   r2, access_help_tag_prefix
        BEQ     %FT05
        TEQ     r14, #menuwindow_infobox
        ADREQ   r2, infobox_help_tag_prefix
        ADRNE   r2, unknown_help_tag_prefix
05      ; r2 contains prefix for help tag
        ; Construct full help tag into dirnamebuffer, preserving
        ; r1 in r0. Full tag consists of tag prefix followed by
        ; "0"+icon
        MOV     r0, r1
        ADR     r1, dirnamebuffer
        BL      strcpy_advance
        LDR     r2, [r0, #msHelp_icon]
        ADD     r2, r2, #"0"
        TEQ     r2, #"/"
        MOVEQ   r2, #"B"
        STRB    r2, [r1], #1
        MOV     r2, #0
        STRB    r2, [r1]
        ADR     r2, dirnamebuffer
        MOV     r1, r0
        B       %FT90

10      ; Must part of the menu structure
        ; Construct into dirnamebuffer the tag for the menu

        ; Hold address of incomming message somewhere handy
        MOV     r4, r1

        ; Copy the prefix
        ADR     r1, dirnamebuffer
        ADR     r2, menu_help_tag_prefix
        BL      strcpy_advance

        ; Add the type of selection character as generated when the menu was created
        LDRB    r2, menu_selchar
        STRB    r2, [r1], #1

        ; Hold the address of the end of tag so far somewhere handy
        MOV     r5, r1

        ; Get the menu tree
        MOV     r0, #1
        ADD     r1, r4, #ms_data
        LDR     r2, [r4, #ms_data + b_window]
        LDR     r3, [r4, #ms_data + b_icon]
        SWI     XWimp_GetMenuState
        EXIT    VS

        ; Move the menu tree details onto the end of the tag
        B       %FT30
20
        ADD     r0, r0, #"0"
        STRB    r0, [r5], #1
30
        LDR     r0, [r1], #4
        TST     r0, r0
        BPL     %BT20

        ; Terminate the tag as determined by the pointer location
        TST     r3, r3
        MOVMI   r0, #"B"
        BMI     %FT40
        Swap    r3, r2
        BL      GetIconState
        TST     r2, #is_shaded
        MOVNE   r0, #"G"
        MOVEQ   r0, #"X"
40
        STRB    r0, [r5], #1
        MOV     r0, #0
        STRB    r0, [r5]

        ; r2 -> tag; r1 -> incomming message (probably pooed a bit)
        MOV     r1, r4
        ADR     r2, dirnamebuffer

90      ; r2 now contains a pointer to the required help string
        ; r2 now contains a pointer to the tag of the help string
        MOV     r8, r1
        ADR     r0, messagetrans_struct
        MOV     r1, r2
        ADD     r2, r8, #ms_data
        MOV     r3, #256 - ms_data
        LDR     r4, sel_leafname
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        EXIT    VS
        MOV     r1, r8

        LDR     r0, [r1, #ms_myref]
        STR     r0, [r1, #ms_yourref]
        LDR     r0, =Message_HelpReply
        STR     r0, [r1, #ms_action]
        MOV     r0, #256
        STR     r0, [r1, #ms_size]
        MOV     r3, r1
        MOV     r0, #User_Message
        MOV     r1, r3
        LDR     r2, [r1, #ms_taskhandle]
        SWI     XWimp_SendMessage
        EXIT

        LTORG

; .............................................................................
;
message_menuwarning_code        ROUT    ; NOENTRY
        BL      delete_closed_menu_window
        LDR     r2, [r1, #ms_data+0]
        STR     r2, type_menuwindow
        CMP     r2, #menuwindow_copysave
        BEQ     message_menuwarning_copysave
        CMP     r2, #menuwindow_setaccess
        BEQ     message_menuwarning_setaccess
        CMP     r2, #menuwindow_infobox
        BEQ     message_menuwarning_infobox
        EXIT

message_menuwarning_copysave    ROUT    ; NOENTRY
        LDR     r4, [r1, #ms_data+4]     ; x coord of sub menu
        LDR     r3, [r1, #ms_data+8]     ; y coord of sub menu

        ; sel dir has disappeared
        LDR     r2, sel_dir
        TEQ     r2, #Nowt
        ADREQL  r2, file_xxx
        BEQ     %FT10

        LDR     r0, sel_leafname
        LDR     r2, sel_filetype
        BL      FiletypeToSpritename

10
saveboxiconname_offset *       w_icons + i_size*2 + i_data
        LDR     r1, csavebox_ptr
        ADD     r1, r1, #saveboxiconname_offset
        BL      strcpy
        LDR     r1, csavebox_ptr
        SWI     XWimp_CreateWindow
        EXIT    VS
        MOV     r1, r0
        MOV     r2, r4
        SWI     XWimp_CreateSubMenu
        EXIT    VS
        ADRL    r14, csavesubmenu
        STR     r14, h_menuwindow_loc
        STR     r1, [r14]
        EXIT

message_menuwarning_setaccess   ROUT    ; NOENTRY
        LDR     r2, [r1, #ms_data+4]     ; x coord of sub menu
        LDR     r3, [r1, #ms_data+8]     ; y coord of sub menu
        LDR     r1, faccesswindow_ptr
        SWI     XWimp_CreateWindow
        EXIT    VS
        MOV     r1, r0
        SWI     XWimp_CreateSubMenu
        EXIT    VS
        ADR     r14, accesssubmenu
        STR     r14, h_menuwindow_loc
        STR     r1, [r14]

      [ version >= 138                  ; If single file, set icons.
is_selected     *       2_00000000001000000000000000000000
if_shaded       *       2_00000000010000000000000000000000
        Push    "r1"
        LDR     r4,sel_dir
        BL      InitForMenuCreation
        CMP     r0,#"F"                 ; Is it a single file ?
      [ version >= 148                  ; Also disable if not interactive.
        MOVNE   R0,#&A1
        MOVNE   R1,#FileSwitchCMOS
        SWINE   XOS_Byte
        MOVVS   R2,#0
        ANDNE   R2,R2,#4
        CMPNE   R2,#4
      ]
        Pull    "r14"
        ADR     r1,userdata
        STR     r14,[r1]
        MOV     r14,#6
        STR     r14,[r1,#4]
        MOV     r2, #if_shaded
        STR     r2, [r1,#12]
        MOVNE   r2,#0
        STR     r2, [r1,#8]
        SWI     XWimp_SetIconState
        EXIT    VS
        EXIT    NE

        ; Get the access
        LDR     r0, sel_fileblock
        LDR     r5, [r0, #df_attr]

        MOV     r2,#is_selected
        STR     r2,[r1,#12]
        MOV     r3,#1

        ; Set the owner bits of the string
        STR     r3, [r1,#4]
        TST     r5, #locked_attribute
        BL      set_access_icon
        EXIT    VS
        TST     r5, #read_attribute
        BL      set_access_icon
        EXIT    VS
        TST     r5, #write_attribute
        BL      set_access_icon
        EXIT    VS
        TST     r5, #public_read_attribute
        BL      set_access_icon
        EXIT    VS
        TST     r5, #public_write_attribute
        BL      set_access_icon
        EXIT    VS

      ]
        EXIT

      [ version >= 138
set_access_icon ROUT
        Push    "lr"
        MOVNE   r2, #is_selected
        MOVEQ   r2, #0
        STR     r2, [r1,#8]
        SWI     XWimp_SetIconState
        EORVC   r2, r2,#is_selected
        STRVC   r2, [r1,#8]
        ADDVC   r3, r3,#6
        STRVC   r3, [r1,#4]
        SWIVC   XWimp_SetIconState
        SUBVC   r3, r3,#5
        STRVC   r3, [r1,#4]
        Pull    "pc"
      ]

message_menuwarning_infobox     ROUT    ; NOENTRY
        LDR     r2, [r1, #ms_data+4]     ; x coord of sub menu
        LDR     r3, [r1, #ms_data+8]     ; y coord of sub menu
        LDR     r1, infobox_ptr
        SWI     XWimp_CreateWindow
        EXIT    VS
        MOV     r1, r0
        SWI     XWimp_CreateSubMenu
        EXIT    VS
        ADRL    r14, infoboxsubmenu
        STR     r14, h_menuwindow_loc
        STR     r1, [r14]
        EXIT

message_savedesktop_code        ROUT ; NOENTRY
        MOV     r2, r1
        LDR     r1, [r2, #ms_data]
        BL      savedisplay_intofilehandle
        MOVVS   r1, r2
        BVS     %FT90
        BL      saveapps_intofilehandle
        MOVVS   r1, r2
        BVS     %FT90
        EXIT

90
        ; Report what went wrong
        BL      LocalReportError

        ; Ack the message to indicate error
        LDR     r14, [r1, #ms_myref]
        STR     r14, [r1, #ms_yourref]

        MOV     r0, #User_Message_Acknowledge
        LDR     r2, [r1, #ms_taskhandle]
        SWI     XWimp_SendMessage
        EXIT

message_menusdeleted_code ROUT ; NOENTRY
        BL      NobbleMenuSelection
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_user_message_acknowledge
; ==============================

; In    r1 -> wimp_eventstr
;             [r1, #0]     block size
;             [r1, #12]    your ref
;             [r1, #16]    message action
;             [r1, #20...] message data

; Out   all regs may be corrupted - going back to PollWimp

event_user_message_acknowledge ENTRY

        LDR     r0, [r1, #ms_action]
 [ debugtask
 DREG r0, "Got UserMessageAck "
 ]
        ; If datasave bounced, discard the buffer we should have claimed
        LDR     r14, =Message_DataSave
        CMP     r14, r0
        BLEQ    discard_savedisplaybuffer
        EXIT    VS

        LDR     r14, =Message_DataOpen
        CMP     r14, r0
 [ debugtask
 BEQ %FT00
 DLINE "Ignored UserMessageAck"
00
 ]
        EXIT    NE

; .............................................................................
; DataOpen bounced; so I get to run/open the file/directory

; In    requires at least dirtoclose set up
;       sel_dir, windowhandle, setforfilesystem are
;       needed for opening subdirectories

 [ debugtask
 DLINE "No one was interested in DataOpen, so I get to run/open the file/dir"
 ]
        LDR     r0, [r1, #msDataTransfer_filetype]
        CMP     r0, #filetype_directory
        BEQ     %FA20                   ; [open directory]

        CMP     r0, #filetype_application
        BNE     %FA10                   ; [run file]

; Run application

        ADD     r1, r1, #msDataTransfer_filename
        ADR     r2, plingrun            ; Do !Run file, save FileSwitch work
        BL      AppendLeafnameToDirname
        SUB     r1, r1, #msDataTransfer_filename ; And drop into ...


10 ; Run file as new task

 [ False ; >>>a816<<<
        LDR     r14, =&FFE              ; Make Command files into Obey
        CMP     r0, r14
        BEQ     %FT15
 ]

        ; If the type is &FFF (text) then use "@RunType_FFF" as it may not be a real text file
        LDR     r14, =&FFF
        CMP     r0, r14
        ADDEQ   r0, r1, #msDataTransfer_filename - 16
        ADDNE   r0, r1, #msDataTransfer_filename - 4
        LDREQ   r14, textrunmess
        LDRNE   r14, runmess
        STR     r14, [r0]
        LDREQ   r14, textrunmess+4
        STREQ   r14, [r0,#4]
        LDREQ   r14, textrunmess+8
        STREQ   r14, [r0,#8]
        LDREQ   r14, textrunmess+12
        STREQ   r14, [r0,#12]

 [ debugtask
 DSTRING r0, "XWimp_StartTask "
 ]
        SWI     XWimp_StartTask
        B       %FA50

 [ version >= 130
textrunmess DCB "@RunType_FFF    "          ; Picked up as 4 words
 ASSERT (textrunmess - Module_BaseAddr) :AND: 3 = 0
 ]
runmess DCB     "Run "                  ; Picked up as word
 ASSERT (runmess - Module_BaseAddr) :AND: 3 = 0


 [ False ; >>>a816<<<
15      ADD     r0, r1, #msDataTransfer_filename - 5
        LDRB    r14, obeymess1
        STRB    r14, [r0, #0]
        LDR     r14, obeymess2
        STR     r14, [r0, #1]
 [ debugtask
 DSTRING r0, "XWimp_StartTask "
 ]
        SWI     XWimp_StartTask
        B       %FA50

obeymess2       DCB     "bey "          ; Picked up as word
 ASSERT (obeymess2 - Module_BaseAddr) :AND: 3 = 0
obeymess1       DCB     "O"
                ALIGN
 ]


; Open directory (must be of form fsprefix:dir or fsprefix:dir.dir.dir etc.,
;                 and never fsprefix: so we can find a leafname for title)

20      ADD     r1, r1, #msDataTransfer_filename ; r1 -> full dirname
 [ debugtask
 DSTRING r1, "Opening dir "
 ]
        ADR     r0, TempString          ; We will abuse userdata in OpenDir
        BL      SGetString
        EXIT    VS

        LDR     r0, windowhandle
 [ debugtask
        DREG    r0, "window handle = "
 ]
        CMP     r0, #0
        BNE     %FT25                   ; If windowhandle = 0 (eg. from Filer_Run) then
        MOV     r8, #0                  ;   use default viewmode
        BL      OpenDir_Root            ;   open root filer viewer
        EXIT
25
        BL      GetWindowCoords         ; r3,r4 := abscoords of window top left
        EXIT    VS

        LDR     r14, dirtoclose         ; open some distance from parent
        TEQ     r14, #Nowt              ; if not closing parent
        LDREQ   r14, sel_dir            ; try to open at a different x pos
        LDREQB  r0, [r14, #d_nchildren]
        ANDEQ   r0, r0, #7              ; Note order; always add 1!
        ADDEQ   r0, r0, #1
        STREQB  r0, [r14, #d_nchildren]
        LDREQ   r14, dvoffsetx
        MULEQ   r14, r0, r14
        ADDEQ   r3, r3, r14
        LDREQ   r14, dvoffsety
        ADDEQ   r4, r4, r14

 [ :LNOT: centralwrap
; Wrap position to keep on screen

        Push    "x1, y1"
        LDR     x1, initwindowwidth
        LDR     y1, initwindowheight

        LDR     r2, xwindsize
        SUB     r2, r2, #vscroll_width  ; Correct for v. scroll bar
        CMP     r3, #0                  ; if xpos<0 then xpos+:=ww
        ADDLT   r3, r3, x1
        ADD     r14, r3, x1             ; if xpos+ww>sl then xpos:=xpos+ww-sl
 [ debugredraw
 DREG r2, "xwindsize = ",cc,Integer
 DREG r14,", xpos+ww = ",,Integer
 ]
        CMP     r14, r2
        SUBGT   r3, r14, r2

        LDR     r2, ywindsize
        SUB     r2, r2, #title_height   ; Correct for title bar
        SUB     r14, r4, y1             ; Note: windsize +ve
 [ debugredraw
 DREG r2, "ywindsize = ",cc,Integer
 DREG r14,", ypos-wh = ",,Integer
 ]
        CMP     r14, #iconbar_height    ; if ypos-wh<96 then ypos+:=wh
        ADDLT   r4, r4, y1
        CMP     r4, r2                  ; if ypos>sl then ypos:=ypos+wh-sl
        SUBGT   r4, r4, r2
        ADDGT   r4, r4, y1
        Pull    "x1, y1"
 ]

        LDR     r1, TempString
 [ centralwrap
        MOV     r8, #0          ; Use default viewmode
        LDR     r9, dvoffsetx
        MOV     r9, r9, LSL #3  ; Unwrap by 8 shifts
        BL      WrappingOpenDir
 |
        BL      OpenDir
 ]


50      BLVC    CloseInitiatingDir      ; Common exit
        EXIT

        LTORG

plingrun
        DCB     "!Run", 0
        ALIGN
access_string   DCB     "LWR/wr ",0
size_string     DCB     "8888",0,0,0,0
length_string   DCB     "8888M ",0,0
applic_string   DCB     "XXXXXXXX ",0
char_string     DCB     "M ",0,0,0
possdatestring  DCB     "88:88:88 30 Mar 1999",0

        ALIGN

        MACRO
        CacheLength     $type
        ADR     R1,$type._string
        MOV     R0,#1
        MOV     R2,#0
        SWI     XWimp_TextOp
        STR     R0,$type._length
        MEND

message_fontchanged_code

        [ version >=186
        ; Get rid of the renaming writeable icon (if it exists)
        BL remove_rename_writeable
        ]

        ; need to update _length variables
        BL      cache_lengths
        ; need to invalidate all dirviewer smi_widths
        LDR     r4,ViewerList
;        MOV     R3,#db_fpr_reshape
        MOV     R14,#0
msg_fontch_loop
        CMP     r4,#Nowt
        BEQ     msg_fontch_end
        STR     R14,[R4,#d_smiwidth]
        STR     R14,[R4,#d_lgiwidth]
;        STRB    R3,[R4,#d_filesperrow]
        LDR     R4,[R4,#d_link]
        B       msg_fontch_loop
msg_fontch_end
        EXIT

cache_lengths
        Push    "R0-R2,lr"
        CacheLength     access
        CacheLength     size
        CacheLength     length                  ; bah!!
        CacheLength     applic
        CacheLength     char

        LDR     R2,mydateformatlen
        MOV     R0,#1
        ADR     R1,possdatestring
        SWI     XWimp_TextOp
        STR     R0,date_length

        LDR     r2, applic_length

        ADRL    r1, dirstring
        BL      cache_length_lookup
        CMP     r2, r0
        MOVCC   r2, r0

        ADRL    r1, applicstring
        BL      cache_length_lookup
        CMP     r2, r0
        STRCC   r0, applic_length
        STRCS   r2, applic_length

        Pull    "R0-R2,PC"

cache_length_lookup
        Push    "r1-r3,lr"

        ADR     r0, messagetrans_struct
        MOV     r2, #0
        SWI     XMessageTrans_Lookup
        MOVVC   r1, r2
        MOV     r0, #1
        MOV     r2, #0
        SWI     XWimp_TextOp

        Pull    "r1-r3,pc"
 
 [ version >=186
message_claim_entity ;ENTRY

        LDR     r0, [r1, #4]              ; load sender's task handle
        LDR     r2, mytaskhandle          ; load my task handle
        CMP     r0, r2                    ; are they the same?
        BEQ     %FT10
        BL      remove_rename_writeable   ; if different, remove the writeable icon

        ;MOV      r0, #7
        ;SWI      OS_WriteC

10
        EXIT

 ]

        END
