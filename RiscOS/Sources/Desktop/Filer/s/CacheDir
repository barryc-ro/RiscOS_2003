; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> full dirname
;       r3 = viewmode
;       r5 = viewer type

; Out   r7 -> dirviewer built in RMA block
;       !Applications sussed, !Boot/!Sprites files exec/loaded as appropriate

; DirViewer block constructed as follows:
; suppose there are N files in the directory, then this is the construction
; of the dirviewr block:
;
; <header>[<df_size>*N]<FS#Special::Disc.$.blah.yak.waffle (A500)><Special>[<name>*N]
;           ...-------> ...------->                     ...------>
;           d_dirname   d_stripname                     d_special
;
; |-------------------------------------------------------------------------------->
; d_size
;
;
; Key to the diagram:
;
; An arrow like this: |-----> indicates an offset.
; An arrow like this: ...---> indicates an absolute address
; The header is a d_ header, of size d_headersize. These fields are filled in in it:
 [ version >= 139
;       d_filesystem    fscb_info for filing system
 |
;       d_filesystem    from setplusfilesystem
 ]
;       d_dirname       address of start of directory name (see diagram)
;       d_special       address of start of special field (see diagram)
;       d_stripname     address of start of FS#Special: stripped directory name (see diagram)
;       d_nfiles        number of files read
;       d_size          exact size of resultant dir block
;       d_viewmode      as supplied by caller
;       d_unsure        0
; These fields are not filled in:
;       d_link
;       d_dirnamestore
;       d_handle
;       d_sortlink
;       d_filesperrow
;       d_nchildren
;

CacheDir ENTRY "r1-r6, r8-r11"

 [ debugrecache
 DSTRING r1, "CacheDir "
 ]

 [ version >= 131
        ; Canonicalise the path before use
        MOV     r0, #FSControl_CanonicalisePath
        ADR     r2, userdata
        MOV     r3, #0
        addr    r4, anull
        MOV     r5, #userdata_size
        SWI     XOS_FSControl
        EXIT    VS

        ADR     r1, userdata
 ]

; Get an initial block from RMA to contain header,dirname,special

        BL      strlen
        ADD     r3, r3, #d_headersize+1 ; for dirname terminator

        MOV     r9, r1
05      LDRB    r14, [r9], #1           ; look for special field
        TEQ     r14, #":"               ; may not be one
        SUBEQ   r9, r9, #1
        TEQNE   r14, #"#"
        BNE     %BT05

        MOV     r7, r9                  ; preserve r9 for below
07      LDRB    r14, [r7], #1           ; find length of special field
        TEQ     r14, #":"
        BNE     %BT07

        SUB     r10, r7, r1             ; offset of stripped name in dirname

        SUB     r7, r7, r9              ; length of special field + 1 for term
 [ debugrecache
 SUB r14, r9, r1
 DREG r14, "offset to special field is ",,Integer
 DREG r7,  "length of special field is ",,Integer
 DREG r10, "offset to stripped name is ",,Integer
 ]

        ADD     r3, r3, r7
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        EXIT    VS
        MOV     r7, r2

        LDR     r3, [sp, #4*2]          ; Fill in the header fields
        STRB    r3, [r7, #d_viewmode]

 [ version >= 139
        ; Pick up fscb_info for filing system based on canonical path
        Push    "r1,r2"
        MOV     r0, #FSControl_LookupFS
        ADR     r1, userdata
        MOV     r2, #0
        SWI     XOS_FSControl
        TEQ     r2, #0
        MOVEQ   r14, #0                 ; if 'not found' let OS_GBPB later generate the error
        LDRNE   r14, [r2, #fscb_infoword]
        Pull    "r1,r2"
 |
        LDR     r14, setplusfilesystem
 ]
        STR     r14, [r7, #d_filesystem]
 [ debugrecache
 DREG r14, "d_filesystem = "
 ]

        MOV     r14, #0
        STR     r14, [r7, #d_nfiles]
        STRB    r14, [r7, #d_unsure]    ; dir will be valid


        ADD     r8, r7, #d_headersize   ; r8 -> where to add filenames

        MOV     r14, #d_headersize
        STR     r14, [r7, #d_dirname]   ; initial offset of dirname in block

        STR     r10, [r7, #d_stripname] ; offset of stripped name in dirname

        MOV     r6, r1
10      LDRB    r14, [r6], #1           ; copy full dirname into buffer
        CMP     r14, #space             ; inclusive of spaces
        MOVLO   r14, #0
        STRB    r14, [r8], #1
        BHS     %BT10
 [ debugrecache
 ADD r0, r7, #d_headersize
 DSTRING r0,"copied full dirname "
 DREG r8,"end of buffer now "
 ]
        SUB     r14, r8, r7             ; initial offset of special field
        SUB     r14, r14, #d_headersize
        STR     r14, [r7, #d_special]   ; kept relative to dirname

15      LDRB    r14, [r9], #1           ; copy special field into buffer. r9^^
        TEQ     r14, #":"
        MOVEQ   r14, #0
        STRB    r14, [r8], #1
        BNE     %BT15



; Read in files, many at a time into [userdata]

        MOV     r14, #1
        STRB    r14, hourglassstate
        SWI     XHourglass_On           ; Ignore errors, may not be there


        MOV     r4, #0                  ; start at the beginning
nextfile
        ; r4 = position through directory
        ; r7 = pointer to start of dir block
        ; r8 = pointer to end+1 of data in dir block

        CMP     r4, #-1
        BEQ     donefiles               ; finished

        LDR     r1, [r7, #d_dirname]    ; r1 -> dirname
        ADD     r1, r7, r1              ; (still an offset here)
        ADR     r2, userdata
        MOV     r3, #&200 / (20 + 6 + 1) ; 6 is about average file length
        MOV     r5, #&200
        MOV     r6, #0                  ; 0 -> all of 'em
        MOV     r0, #OSGBPB_ReadDirEntriesInfo
        SWI     XOS_GBPB
        BVS     %FT99

        CMP     r3, #0                  ; nothing read yet?
        BEQ     nextfile

; Work out how much bigger block needs to be

        Push    "r1, r3-r5"
        MOV     r5, r3

        ; r4 = <# files read> * df_size + space for their names
        MOV     r4, #df_size            ; calculate fixed amount
        MUL     r4, r5, r4

        ADR     r1, userdata
20      ADD     r1, r1, #20             ; skip fixed bits
        BL      strlen
        ADD     r3, r3, #1              ; +terminator
        ADD     r4, r4, r3

        ADD     r1, r1, r3
        ADD     r1, r1, #3              ; align again
        BIC     r1, r1, #3

        SUBS    r5, r5, #1
        BNE     %BT20

        SUB     r8, r8, r7              ; Make relative to start of block
        MOV     r2, r7
        MOV     r3, r4
 [ debugalloc :LOR: debugrecache
 DREG r2, "Extending block ",cc
 DREG r3, " by ",,Integer
 ]
        MOV     r0, #ModHandReason_ExtendBlock
        SWI     XOS_Module

        Pull    "r1, r3-r5"
        BVS     %FT99

 [ debugalloc :LOR: debugrecache
 DREG r2,"Block now at "
 ]
        MOV     r7, r2                  ; New block, probably relocated
        ADD     r8, r8, r7              ; Make back into pointer!

; make room for the new blocks, by copying up the filenames already done

        Push    r4

        LDR     r2, [r7, #d_dirname]    ; r2 -> start of filename data
        ADD     r2, r7, r2              ; (still an offset here)

        MOV     r14, #df_size
        MUL     r14, r3, r14
 [ debugrecache
 DREG r14,"shunt filenames up by "
 ]
        MOV     r1, r8                  ; r1 -> current end of filename data
        ADD     r8, r8, r14             ; r8 -> new end of block
        MOV     r9, r8

01      LDRB    r14, [r1, #-1]!         ; copy filenames up
        STRB    r14, [r9, #-1]!
        CMP     r1, r2
        BGT     %BT01

        SUB     r14, r9, r7             ; new offset
        STR     r14, [r7, #d_dirname]

        LDR     r14, [r7, #d_nfiles]
        ADD     r14, r14, r3
        STR     r14, [r7, #d_nfiles]

; process filename blocks - copy blocks and filenames to right places

; In     r2 -> address to copy blocks into
;        r8 -> address to copy filenames into
;        r9 -> dirname base
;        r3 = number of blocks to process

        ADR     r1, userdata

50      LDMIA   r1!, {r0, r4, r5, r6}   ; load, exec, length, attr from GBPB
        BIC     r6, r6, #2_11000100     ; Bits 7,6,2 of attr underknifed
 [ debugrecache
 DREG r2,"copying fileinfo to "
 ]
 ASSERT df_load = 0
 ASSERT df_exec = 4
 ASSERT df_length = 8
 ASSERT df_attr = 12
        STMIA   r2!, {r0, r4, r5, r6}   ; load, exec, length, attr

 ASSERT df_helptype = 16
        MOV     r14, #-1                ; help type = -1
        STMIA   r2!, {r14}

        LDMIA   r1!, {r14}              ; object type from GBPB
      [ (version >= 133)  :LAND: (version < 143)
        TST     r14,#2                  ; Make MultiFS files a directory.
        MOVNE   r14,#2
      ]
        SUB     r0, r8, r9              ; df_state = 0 initially
        ORR     r14, r14, r0, LSL #16   ; filename ptr relative to dirname base
 ASSERT df_fileptr = 20
        STMIA   r2!, {r14}              ; munged ptr/state/type

 [ debugrecache
 DSTRING r1,"copying filename ",cc
 DREG r8," to "
 ]
60      LDRB    r14, [r1], #1           ; filename goes to a different place
        STRB    r14, [r8], #1
        CMP     r14, #space
        MOVLO   r14, #0                 ; ensure name is null-terminated
        BHS     %BT60

        ADD     r1, r1, #3              ; align r1
        BIC     r1, r1, #3

        SUBS    r3, r3, #1
        BNE     %BT50

        Pull    r4
        B       nextfile

donefiles
        SUB     r3, r8, r7
        STR     r3, [r7, #d_size]       ; real size stored (not aligned)


        LDR     r1, [r7, #d_dirname]    ; absolve dirname
        ADD     r1, r7, r1
        STR     r1, [r7, #d_dirname]
 [ debugrecache
 DSTRING r1, "dirname is "
 ]

        LDR     r14, [r7, #d_stripname] ; absolve stripped name
        ADD     r14, r1, r14            ; was relative to dirname
        STR     r14, [r7, #d_stripname]
 [ debugrecache
 DSTRING r14, "stripped dirname is "
 ]

        LDR     r14, [r7, #d_special]   ; absolve special field
        ADD     r14, r1, r14            ; was relative to dirname
        STR     r14, [r7, #d_special]
 [ debugrecache
 DSTRING r14, "special field is "
 ]


; Loop over objects, suss !Applic type directories.
; Must do BEFORE sorting as we may be sort on modified criteria, eg. Date

        LDR     r3, [r7, #d_nfiles]     ; r3 = no of files to do
        CMP     r3, #0
        BEQ     %FT95                   ; [nothing in this viewer]

     [ version >= 130

; Skip !Applic booting if CTRL is pressed.

        MOV     r0,#121                 ; Keyboard scan
        MOV     r1,#&81                 ; CTRL
        SWI     XOS_Byte
        MOVVS   R1,#0
        STR     R1,ctrl_pressed
     ]

 [ debugapplic :LOR: debugrecache
 DLINE "suss !Applic objects/dir dates"
 ]
        MOV     r4, r7
        ADD     r5, r4, #d_headersize
90
 [ debugapplic
 DREG r3, "number of files left to scan "
 ]
 [ ShowOpenDirs
        LDRB    R14,[R5,#df_type]
        TEQ     R14,#dft_dir
        BLEQ    SetOpenState
 ]
        BL      SussPlingApplic         ; Doesn't return errors
        SUBS    r3, r3, #1
        ADDNE   r5, r5, #df_size
        BNE     %BT90


95      MOV     r1, r7
        BL      SortDir                 ; order by name, date etc after type ok

        MOV     r14, #0
        STRB    r14, hourglassstate
        SWI     XHourglass_Off          ; Ignore errors, may not be there
        EXITS


99 ; Failed, so free RMA block (r1->dirname which failed)

        ; Construct new error block in userdata as
        ; <old error number>, "<old error message> error when reading <dirname>"

      [ {TRUE}
        ; SMC: look up error when reading message, directory and error are substituted.
        ADRL    r2, userdata
        LDR     r14, [r0], #4   ; <old error number>
        STR     r14, [r2], #4
        MOV     r4, r1          ; Substitute %0 with dir name
        MOV     r5, r0          ; Substitute %1 with error text

        ADR     r0, messagetrans_struct
        ADR     r1, errorwhenreading
        MOV     r3, #userdata_size-4
        SWI     XMessageTrans_Lookup
        ADRVCL  r0, userdata    ; Use our error if look up worked
      |
        MOV     r3, r1
        ADRL    r1, userdata
        LDR     r14, [r0], #4   ; <old error number>
        STR     r14, [r1], #4
      [ debug
        DSTRING r0,"error: "
      ]

        ADR     r2, errorwhenreading
        BL      strcpy_advance

        MOV     r2, r3          ; <dirname>
        BL      strcpy_advance

        ADR     r2, donereading
        BL      strcpy_advance

        MOV     r2, r0          ; <old error message>
        BL      strcpy_advance

        ADRL    r0, userdata
      ]

        Push    r0                      ; Preserve error

        MOV     r14, #0
        STRB    r14, hourglassstate
        SWI     XHourglass_Off          ; Ignore errors, may not be there
        Pull    r0

        MOV     r2, r7
        BL      SFreeArea
        SETV
        EXIT

errorwhenreading
      [ {TRUE}
        DCB     "RError",0
      |
        DCB     "Error when reading ", 0

donereading
        DCB     " - ",0
      ]
        ALIGN

        END
