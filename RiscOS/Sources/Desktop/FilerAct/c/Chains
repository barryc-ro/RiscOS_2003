/*
        Chain manipulation routines.
*/

#if 0
#define debugchain
#endif

#include <stdio.h>
#include "debug.h"

#ifndef __chains_h
#include "chains.h"
#endif

void chain_remove_link( chain_link *link )
{
        link->forwards->backwards = link->backwards;
        link->backwards->forwards = link->forwards;
}

void chain_insert_before_link( chain_link *link, void *wrapper, chain_link *before_this )
{
        link->backwards = before_this->backwards;
        link->forwards = before_this;
        before_this->backwards->forwards = link;
        before_this->backwards = link;
        link->wrapper = (char *)wrapper - (char *)link;
}

void chain_insert_after_link( chain_link *link, void *wrapper, chain_link *after_this )
{
        link->backwards = after_this;
        link->forwards = after_this->forwards;
        after_this->forwards->backwards = link;
        after_this->forwards = link;
        link->wrapper = (char *)wrapper - (char *)link;
}

/*
NOT USED
void chain_insert_after_header( chain_link *link, void *wrapper, chain_header *header )
{
        chain_insert_after_link( link, wrapper, (chain_link *)(&header->forwards) );
}
*/

void chain_insert_before_header( chain_link *link, void *wrapper, chain_header *header )
{
        chain_insert_before_link( link, wrapper, (chain_link *)(&header->header_indicator) );
}

void chain_initialise_header( chain_header *header )
{
        header->forwards = (chain_link *)(&header->header_indicator);
        header->header_indicator = NULL;
        header->backwards = (chain_link *)(&header->forwards );
}
