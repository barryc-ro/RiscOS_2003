 [ Version < 69
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Iconized_DragEnd
;
; User has dragged a window icon accross the backdrop.
;
; In: r1 -> Wimp event structure

Iconized_DragEnd ROUT

        SWI     XDragASprite_Stop

        ADR     r1, dataarea           ; What icon is pointer over?
        SWI     XWimp_GetPointerInfo
        Pull    "PC",VS

        LDR     r0,backdrop_handle     ; Check drag was on backdrop
        LDR     r5,[r1,#12]
        CMP     r5,r0
        Pull    "PC",NE

        LDR     r6,drag_icon
        BL      find_iconized          ; find structure for icon we have dragged
        CMP     r7,#0
        Pull    "PC",EQ
        MOV     r11,r7

        STR     r5,[r1,#12]            ; store window handle at r1+12
        STR     r6,[r1,#16]            ; store icon handle   at r1+16
        LDMIA   r1!,{r5-r7}            ; Load r5 (x), r6 (y), r7 (buttons)   Also r1 = r1 + 12
        SWI     XWimp_GetIconState     ; Get Icon state
        ADDVC   r1,r1,#8               ; Get bounding box
        MOVVC   r10,r1
        LDMVCIA r1,{r1-r4}             ; load minx, miny, maxx, maxy from result of GetIconState
        LDRVC   r0,backdrop_handle
        SWIVC   XWimp_ForceRedraw      ; Force redraw of old area

        ADRVC   r0,drag_start
        LDMVCIA r0,{r8-r9}             ; load x and y co-ordinate of start of drag
        SUBVC   r5,r5,r8
        SUBVC   r6,r6,r9               ; Get relative movment.

        ADDVC   r1,r1,r5               ; Adjust bounding box.
        ADDVC   r3,r3,r5
        ADDVC   r2,r2,r6
        ADDVC   r4,r4,r6
        STMVCIA r10,{r1-r4}
        LDMVCIA r10,{r3-r6}
;        BLVC    lock_to_grid
;        STMVCIA r10,{r3-r6}

        SUBVC   r1,r10,#8              ; get window handle
        LDRVC   r0,[r1],#4
        STRVC   r0,[r1]

        Push    R1
        LDMVCIA R1,{R1-R5}
        LDRVC   R1,[R11,#w_icon_handle]
        SWIVC   XWimp_ResizeIcon
        MOVVC   R0,R1
        Pull    R1

        LDRVC   r2,backdrop_handle
        MOVVC   r3,r0
        MOVVC   r4,#0
        MOVVC   r5,#0
        STMVCIA r1,{r2-r5}
        SWIVC   XWimp_SetIconState

        Pull    "PC"
 ]

 [ Version < 69
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Iconized_Drag

Iconized_Drag    ROUT

        ADR     r7,drag_start
        STMIA   r7,{r10,r11}            ; x,y of drag start
        MOV     r6,r2
        STR     r6,drag_icon
        BL      find_iconized

        LDR     r5,backdrop_handle
        ADR     r1,dataarea
        STR     r5,[r1]
        STR     r6,[r1,#4]
        SWI     XWimp_GetIconState
        ADD     r1,r1,#8
        LDMIA   r1,{r3-r6}

        MOV     r14,#DragType_Iconized
        STR     r14,DragType

        Push    "r0-r2"
        MOV     r0,#ReadCMOS
        MOV     r1,#FileSwitchCMOS
        SWI     XOS_Byte
        MOVVS   r14,#0
        ANDVC   r14,r2,#DragASpriteCMOSBit
        Pull    "r0-r2"

        CMP     r14,#0
        BEQ     %FT10
; Do DragASprite
        Push    "r3-r6"
        MOV     R0,#DS_HJustify_Centre :OR: DS_VJustify_Top :OR: DS_BoundTo_Screen :OR: DS_Bound_Pointer :OR: DS_DropShadow_Present
        MOV     r1,#1
        ADD     r2,r7,#w_sprite_name
        MOV     r3,sp
        SWI     XDragASprite_Start
        ADD     sp,sp,#4*4
        Pull    "PC"
10
        ADR     r1, dataarea
        LDR     r0,backdrop_handle

; R3,R4,R5,R6 = bounding coordinates (offset from icon bar window position)
; Create drag box

        MOV     r2, #5
        STMIA   r1!, {r0,r2,r3,r4,r5,r6}
        SUB     r6, r6, r4
        SUB     r5, r5, r3
        ADR     r0, bounding_box
        LDMIA   r0, {r7,r8,r9,r10}
        SUB     r7, r7, r5 ,LSR #1
        SUB     r8, r8, r6 ,LSR #1
        ADD     r9, r9, r5, LSR #1  ; half x size.
        ADD     r10,r10,r6, LSR #1  ; half y size.
        LDR     r8, icon_bar_height
        STMIA   r1!, {r7,r8,r9,r10}
        ADR     r1, dataarea
        SWI     XWimp_DragBox

        Pull    "PC"
 ]


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; IconizedReopen
;
; Reopen an iconized window
;
; In : r1 = window
;      r2 = icon

IconizedReopen  ROUT
        MOV     r6,r2
        BL      find_iconized
        BL      reopen_window
        
        LDR     r0, Window_Icons
        SUB     r0, r0, #1
        STR     r0, Window_Icons
        LDR     r0, Windows_Selected
        SUB     r0, r0, #1
        STR     r0, Windows_Selected
        
        Pull    "PC"

IconizedClose
        MOV     r6,r2
        BL      find_iconized
        BL      delete_window
        Pull    "PC"

; ----------------------------------------------------------------------------------------------------------------------
; Find iconized.
;         r6 = Icon number.
; On Exit:
;         r7 - Pointer to block or 0 if not found.
;
find_iconized
        Push    "LR"


        LDR     r7,iconized_ptr
01      CMP     r7,#0
        Pull    "PC",EQ
        LDR     r14,[r7,#w_icon_handle]
        CMP     r14,r6
        LDRNE   r7,[r7,#w_next_ptr]
        BNE     %BT01

        Pull    "PC"

; Find iconized icon by window handle.
;         r5 = Window handle.
; On Exit:
;         r7 - Pointer to block or 0 if not found.
;
find_window
        Push    "LR"

        LDR     r7,iconized_ptr
01      CMP     r7,#0
        Pull    "PC",EQ
        LDR     r14,[r7,#w_window_handle]
        CMP     r14,r5
        LDRNE   r7,[r7,#w_next_ptr]
        BNE     %BT01

        Pull    "PC"
; ----------------------------------------------------------------------------------------------------------------------
; Find iconized icon by task handle.
;         r5 = Task handle.
; On Exit:
;         r7 - Pointer to block or 0 if not found.
;
find_task
        Push    "LR"

        LDR     r7,iconized_ptr
01      CMP     r7,#0
        Pull    "PC",EQ
        LDR     r14,[r7,#w_task]
        CMP     r14,r5
        LDRNE   r7,[r7,#w_next_ptr]
        BNE     %BT01

        Pull    "PC"

; ----------------------------------------------------------------------------------------------------------------------
; pre quit - reopen all iconized windows.
;            delete backdrop sprite.
ReopenWindows

        Push     "LR"

01      LDR      r7,iconized_ptr
        CMP      r7,#0
        BEQ      %FT02
        BL       reopen_window   ; Shifts the list for us.
        B        %BT01
02

        Pull    "PC"


; ----------------------------------------------------------------------------------------------------------------------
; Delete an icon, don't reopen windo.
;
delete_window
        Push    "LR"

        [ {FALSE}
        ADR      r1,dataarea
        ADD      r0,r7,#w_window_handle
        LDMIA    r0,{r2,r3,r4,r5,r6,r8,r9,r10}
        MOV      r10,#-1
        STMIA    r1,{r2,r3,r4,r5,r6,r8,r9,r10}

        MOV      r0,#3
        LDR      r2,[r7,#w_task]
        Debug    ic,"Task is ",r2
        SWI      XWimp_SendMessage
        ]
        B       delete_window_entry

reopen_window
        Push    "LR"

; ----------------------------------------------------------------------------------------------------------------------
; Click on iconized window.

iconized_click
; Reopen the window
       
       ADR      r1,dataarea
       ADD      r0,r7,#w_window_handle
       LDMIA    r0,{r2,r3,r4,r5,r6,r8,r9,r10}
       MOV      r10,#-1
       STMIA    r1,{r2,r3,r4,r5,r6,r8,r9,r10}

       MOV      r0,#2
       LDR      r2,[r7,#w_task]
       Debug    ic,"Task is ",r2
       SWI      XWimp_SendMessage
       
; Entry point to delete the icon.
delete_window_entry                     ; Must preserve r5 from here down.


; Now delete the icon
 
        ADRL    r1, dataarea+100        ; If this is a result of an Iconize message we must not

        LDR     r0, [r7, #w_icon_id]
 
        STR     r0, [r1]
        LDR     r2, [r7,#w_icon_handle]
        STR     r2, [r1,#4]
        SWI     XWimp_GetIconState
        SWIVC   XWimp_DeleteIcon
        Pull    "pc",VS

        LDR     r0, [r7, #w_icon_id]
 
        ADD     r1,r1,#8
        LDMIA   r1,{r1-r4}
        SWI     XWimp_ForceRedraw
        Pull    "pc",VS

; Remove it from the list.

        LDR     r0,[r7,#w_prev_ptr]
        LDR     r1,[r7,#w_next_ptr]
        Debug   ic,"prev ptr is",r0
        CMP     r0,#0
        STREQ   r1,iconized_ptr
        STRNE   r1,[r0,#w_next_ptr]

        CMP     r1,#0
        STRNE   r0,[r1,#w_prev_ptr]

; And free memory.

        MOV     r0, #ModHandReason_Free
        MOV     r2, r7
        SWI     XOS_Module

       Pull     "PC"

        LNK     s.Save
