;************************************************************************
;*                                                                      *
;* Lists:                                                               *
;*                                                                      *
;* This file contains general purpose linked list handling routines.    *
;*                                                                      *
;* Routines provided:                                                   *
;*                                                                      *
;*                                                                      *
;* AddToList       - Adds a block to a linked list.                     *
;* RemoveFromList  - Removes a block from the list.                     *
;************************************************************************
; Change log:
;
; 30-Apr-1991 Created.
;
;
;

                            
; -----------------------------------------------------------------------------
; AddToList
;       Entry:  
;               R0 =  Pointer to head of list (ADR of stored address of first block)
;               R2 -> block to add to list 
;       Exit:
;               Registers preserved.
;               Block added to front of list 
;

AddToList       ROUT
        Push    "LR"

        LDR     R14,[R0]
        STR     R14,[R2,#ll_next]       ; Next pointer points to first element
        CMP     R14,#0                  ; Is there a next element ?
        STRNE   R2,[R14,#ll_prev]       ; If yes, we are it's previous block.
        MOVNE   R14,#0
        STR     R14,[R2,#ll_prev]       ; No previous element.
        STR     R2,[R0]                 ; List begins with this block

        Pull    "PC",^

; -----------------------------------------------------------------------------
; RemoveFromList
;       Entry:  
;               R0 =  Pointer to head of list (ADR of stored address of first block)
;               R2 -> block to add to list 
;       Exit:
;               Registers preserved.
;               Block removed from list.
;
RemoveFromList  ROUT
        Push    "R0,R1,LR"
                     
        ASSERT  ll_next=0
01
        LDR     R0,[R0,#ll_next]
        CMP     R0,#0
        Pull    "R0,R1,PC",EQ           ; Not found on list.
        CMP     R0,R2
        BNE     %BT01                   ; Try next block

; Found block
        Pull    "R1"                    ; Linked list pointer
                
        LDR     R14,[R0,#ll_next]
        LDR     R0, [R0,#ll_prev]

        CMP     R0,#0
        STRNE   R14,[R0,#ll_next]       ; If there is a previous block, out next is now its next.
        STREQ   R14,[R1]                ; else our next is now the first block.
        CMP     R14,#0
        STRNE   R0,[R14,#ll_prev]       ; If there is a next block, our previous is it's previous
        
        MOV     R0,R1                   ; Restore list pointer
        Pull    "R1,PC",,^

;------------------------------------------------------------------------------------
; FreeList
;       Entry:
;               R0 =  Pointer to head of list (ADR of stored address of first block)
;       Exit:
;               Registers preserved.
;               All blocks freed, [r0]=0
;
; ERRORS ARE IGNORED !
FreeList        ROUT
        Push    "R0-R4,LR"

        LDR     R2,[R0] 
01
        LDR     R4,[R2,#ll_next]
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module
        MOVS    R2,R4
        BNE     %BT01
        
        Pull    "R0"
        STR     R4,[R0]

        Pull    "R1-R4,PC",,^

        END
