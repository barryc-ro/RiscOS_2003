; > s.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     Start          - Module_BaseAddr
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     Helptable      - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     message_filename - Module_BaseAddr
 |
        DCD     0
 ]

; ----------------------------------------------------------------------------------------------------------------------

resourcefsfiles
      [ standalonemessages
        ResourceFile    Messages, Resources.Pinboard.Messages
        ResourceFile    Templates, Resources.Pinboard.Templates
      ]
      [ defaultbackdrop
        ResourceFile    LCDTile, Resources.Pinboard.LCDTile
      ]
        DCD     0

Title   DCB     "Pinboard",0
Helpstr DCB     "Pinboard",9,"$VString ($Date)",0
                ALIGN
Taskid  DCB     "TASK"
                ALIGN

; ----------------------------------------------------------------------------------------------------------------------
;       Handle *Desktop_Pinboard - only enter modules if after a Service_StartWimp

Desktop_Pinboard_Code
        Push    "LR"

        LDR     r12, [r12]
        Debug   ,"Desktop_Pinboard"
        LDR     r14, mytaskhandle
        CMP     r14, #-1
        MOVEQ   r2, r0                  ; r2 --> command tail
        MOVEQ   r0, #ModHandReason_Enter
        ADREQ   r1, Title
        SWIEQ   XOS_Module
01
        ADR     r0, ErrorBlock_CantStartPinboard
        MOV     r1, #0                                  ; Relies on a global message
        MOV     r2, #0
        ADR     r4, Title
        SWI     XMessageTrans_ErrorLookup
        Pull    "PC"

; ----------------------------------------------------------------------------------------------------------------------
;       Error block for use of *Desktop_Pinboard

ErrorBlock_CantStartPinboard
        DCD     0
        DCB     "UseDesk",0
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------

AddTinyDir_Code
        Push    "LR"

        LDR     r12, [r12]              ; Do we have a task active ?
        CMP     r12, #0
        Pull    "PC",LE                 ; No, just return.

        MOV     r1,r0
        ADRL    r0,addtiny_args
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs            ; Read command line args.
        Pull    "PC",VS

        LDR     r0,[r2]
        CMP     r0,#0
        BNE     %FT01

        Debug   td,"AddTinyDirs, no args."

        LDR     r0,Pinboard_options
        ORR     r0,r0,#PinboardOption_TinyDirs
        STR     r0,Pinboard_options

        MOV     r1,#-2
        MOV     r0,#BufferReason_AddTinyDirsIcon
        BL      BufferIcon
        Pull    "PC"
01
        Debug   td,"AddTinyDirs, with path."

        MOV     r0,#37                  ; Canonicalise path
        LDR     r1,[r2]                 ; Pointer to path
        ADR     r2,dataarea
        MOV     r3,#0
        MOV     r4,#0
        MOV     r5,#256
        SWI     XOS_FSControl
        Pull    "PC",VS
        DebugS  pi,"Full Path is : ",r2
        RSB     r3,r5,#&100
        ADD     r3,r3,#1

        MOV     r1,#-2
        BL      GetMonotonicID
        MOV     r0,#BufferReason_Remove
        BL      BufferIcon
        MOV     r0,#BufferReason_AddNewTinyDir
        BL      BufferIcon

        Pull    "PC"
; ----------------------------------------------------------------------------------------------------------------------

Pinboard_Code
        Push    "LR"

        LDR     r12, [r12]              ; Do we have a task active ?
        CMP     r12, #0
        Pull    "PC",LE                 ; No, just return.

        Debug   sa,"*Pinboard called."

        MOV     r1,r0
        ADRL    r0,pinboard_args
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs            ; Read command line args.
        Pull    "PC",VS

        LDR     r0,[r2]
        CMP     r0,#0

        MOVNE   r0,#PinboardOption_Grid

 [ iconise_to_iconbar
        LDR     lr,[r2,#4]
        CMP     lr,#0
        ORRNE   r0,r0,#PinboardOption_IconiseToIconBar

        [ Version >= 67
        CMP     lr, #0
        BNE     %FT20
        ]
 ]

 [ Version >= 67
        Push    "r1-r4"
        MOV     r3, #8
        MOV     r4, #4
        MOV     r5, #0
04
        LDR     r1, [r2, r3]
        CMP     r1, #0
        MOVNE   r4, r5        
        ADD     r3, r3, #4
        ADD     r5, r5, #1
        CMP     r5, #4
        BLT     %BT04
        
        CMP     r4, #3
        BGT     %FT10

        BIC     r0, r0, #PinboardOption_IconiseToIconBar
        TST     r4, #1
        ORRNE   r0, r0, #PinboardOption_WinToCornerTB
        BICEQ   r0, r0, #PinboardOption_WinToCornerTB
        TST     r4, #2
        ORRNE   r0, r0, #PinboardOption_WinToCornerLR
        BICEQ   r0, r0, #PinboardOption_WinToCornerLR
         
        ORR     r0, r0, #PinboardOption_UseWinToCorner
10
        LDR     r1, [r2, #24]
        CMP     r1, #0
        Pull    "r1-r4"
        ORRNE   r0, r0, #PinboardOption_WinToCornerHV
 ]       

20
        STR     r0,Pinboard_options
        
        [ Version >= 67
        MOV     r0, #-1
        STR     r0, IconizeAtX
        STR     r0, IconizeAtY
        ]

        Debug   pi,"Pinboard options are :",r0
 
        ; Clear any pending backdrop recache
        LDR     r0,poll_word
        BIC     r0,r0,#PollWordReason_Recache
        STR     r0,poll_word

        LDR     r1,backdrop_handle
        MOV     r0,#BufferReason_RemoveAllPinboard
        BL      BufferIcon

        Pull    "PC"

; ----------------------------------------------------------------------------------------------------------------------
RemoveTinyDir_Code  ROUT
        Push    "LR"

        LDR     r12, [r12]             ; Do we have a task running ?
        CMP     r12, #0
        Pull    "PC",LE

        MOV     r1,r0
        ADRL    r0,addtiny_args
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs            ; Read command line args.
        Pull    "PC",VS

        LDR     r0,[r2]
        CMP     r0,#0
        BNE     %FT01

        Debug   td,"RemoveTinyDir, no args."

        MOV     r1,#-2
        MOV     r0,#BufferReason_RemoveAllTinyDirs
        BL      BufferIcon
        Pull    "PC"
01
        Debug   td,"RemoveTinyDir with path."


        MOV     r0,#37                  ; Canonicalise path
        LDR     r1,[r2]                 ; Pointer to path
        ADR     r2,dataarea
        MOV     r3,#0
        MOV     r4,#0
        MOV     r5,#256
        SWI     XOS_FSControl
        Pull    "PC",VS
        DebugS  pi,"Full Path is : ",r2
        RSB     r3,r5,#&100
        ADD     r3,r3,#1

        MOV     r1,#-2
        BL      GetMonotonicID
        MOV     r0,#BufferReason_Remove
        BL      BufferIcon

        Pull    "PC"



; ----------------------------------------------------------------------------------------------------------------------
Helptable
; ----------------------------------------------------------------------------------------------------------------------
Pinboardcommand
        Command Desktop_Pinboard,0,0,International_Help
        Command AddTinyDir,1,0,&100:OR: International_Help
        Command RemoveTinyDir,1,0,&100:OR: International_Help

 [ Version >=67
        Command Pinboard,3,0, International_Help
 |
   [ iconise_to_iconbar
        Command Pinboard,2,0, International_Help
   |
        Command Pinboard,1,0, International_Help
   ]
 ]
        Command Pin,3,3,&100:OR: International_Help
        Command BackDrop,3,0,&100:OR: International_Help
        DCB     0
; ----------------------------------------------------------------------------------------------------------------------
        [ International_Help=0

Desktop_Pinboard_Help
        DCB     "The Pinboard utility allows directories and files to appear on the desktop background."
        DCB     13,10
        DCB     "It also provides the TinyDirs utility which allows directories and files to appear on the icon bar."
        DCB     13,10
        DCB     "Do not use *Desktop_Pinboard, use *Desktop instead."
        DCB     13,10
Desktop_Pinboard_Syntax
        DCB     "Syntax: *Desktop_Pinboard",0
; ----------------------------------------------------------------------------------------------------------------------
AddTinyDir_Help
        DCB     "*AddTinyDir adds a file, application or directory to the desktop icon bar."
        DCB     13,10
AddTinyDir_Syntax
        DCB     "Syntax: *AddTinyDir [<pathname>]",0
; ----------------------------------------------------------------------------------------------------------------------
; Optional delete all ????
RemoveTinyDir_Help
        DCB     "*RemoveTinyDir removes a file, application or directory icon from the desktop icon bar."
        DCB     13,10
RemoveTinyDir_Syntax
        DCB     "Syntax: *RemoveTinyDir <pathname>",0
; ----------------------------------------------------------------------------------------------------------------------
Pinboard_Help
        DCB     "*Pinboard clears the pinboard."
        DCB     13,10
Pinboard_Syntax
 [ Version >= 67
        DCB     "Syntax: *Pinboard [-Grid] [-IconiseToIconbar] [-TopLeft | -BottomLeft | -TopRight | -BottomRight] [-StackVertical]",0
 |
        DCB     "Syntax: *Pinboard [-Grid]",0
 ]
; ----------------------------------------------------------------------------------------------------------------------
Pin_Help
        DCB     "*Pin adds a file, application or directory to the desktop pinboard."
        DCB     13,10
Pin_Syntax
        DCB     "Syntax: *Pin <pathname> <x> <y>",0
; ----------------------------------------------------------------------------------------------------------------------
BackDrop_Help
        DCB     "*BackDrop puts a sprite on the desktop background. Use *Backdrop -Remove to clear the background"
        DCB     13,10
BackDrop_Syntax
        DCB     "Syntax: *BackDrop [-Centre | -Tile | -Scale | -Remove] [<pathname>]",0

        |
Desktop_Pinboard_Help   DCB     "HPINDPB",0
Desktop_Pinboard_Syntax DCB     "SPINDPB",0

AddTinyDir_Help         DCB     "HPINADD",0
AddTinyDir_Syntax       DCB     "SPINADD",0

RemoveTinyDir_Help      DCB     "HPINREM",0
RemoveTinyDir_Syntax    DCB     "SPINREM",0

Pinboard_Help           DCB     "HPINPB",0
Pinboard_Syntax         DCB     "SPINPB",0

Pin_Help                DCB     "HPINPIN",0
Pin_Syntax              DCB     "SPINPIN",0

BackDrop_Help           DCB     "HPINBCK",0
BackDrop_Syntax         DCB     "SPINBCK",0

        ]

        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "r0-r3,LR"

        LDR     r0, [r12]                       ; Have we already got a workspace ?
        CMP     r0, #0                          ; clears V
      [ Version >= 29
        MOVNE   r12,r0
        BNE     %FT01
      |
        Pull    "r0-r3,PC",NE
      ]

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace
        ADDVS   sp,sp,#4
        Pull    "r1-r3,PC",VS

        STR     r2, [r12]                       ; Store workspace pointer.
        MOV     r12, r2
01
        Debug   ,"Initialising"
      [ defaultbackdrop :LOR: standalonemessages
        ADRL    r0,resourcefsfiles
        SWI     XResourceFS_RegisterFiles       ; ignore errors
      ]
        MOV     r0,#0                           ; Start when wimp starts up.
        STR     r0,mytaskhandle
        STR     r0,backdrop_path                ; No backdrop picture.
        STR     r0,Buffered_list
        STR     r0,iconized_ptr
        STR     r0,Icon_list
        STR     r0,message_file_block

; initialise Pinboard$Path if not already done

        ADR     R0, Path
        MOV     R2, #-1
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal          ; returns R2=0 if doesn't exist
        CMP     R2, #0                  ; clears V as well!

        ADREQ   R0, Path
        ADREQ   R1, PathDefault
        MOVEQ   R2, #?PathDefault
        MOVEQ   R3, #0
        MOVEQ   R4, #VarType_String
        SWIEQ   XOS_SetVarVal

        Pull    "r0-r3,PC",,^

Path            DCB     "Pinboard$Path"
                DCB     0
PathDefault     DCB     RESPATH
                DCB     0
                ALIGN

; ----------------------------------------------------------------------------------------------------------------------
;       Module service entry point

Service
        LDR     R12, [R12]
        CMP     R12, #0
        MOVEQ   PC, LR

        [ {FALSE}
        DevMessage      "                Development Pinboard Module (",VString,")       - NOT FOR SALE"
        ]

        TEQ     R1,#Service_StartWimp
        BEQ     svc_startwimp

        TEQ     R1,#Service_StartedWimp
        BEQ     svc_startedwimp

        TEQ     R1,#Service_Reset
        BEQ     svc_reset

        TEQ     R1, #Service_StartFiler
        STREQ   R0, Filer_taskid

      [ defaultbackdrop :LOR: standalonemessages
        TEQ     r1, #Service_ResourceFSStarting
        BNE     %FT10
        Push    "r0-r3,lr"
        ADRL    r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
        Pull    "r0-r3,pc",,^
10
      ]

        TEQ     r1, #Service_Memory             ; Wimp wants app workspace
        MOVNE   PC,LR
        Push    "r3,lr"
        ADRL    r3,Module_BaseAddr             ; is it trying to grab ours?
        TEQ     r3,r2
        Pull    "r3,pc",NE
        LDR     r3,backdrop_options
        TST     r3,#bd_OptionActive
        MOVNE   r1,#0                           ; prevent it if we have a backdrop
        Pull    "r3,pc"




; ----------------------------------------------------------------------------------------------------------------------
;       Wimp call to ask task to start up. Claimed by setting task_handle to -1, but only if 0 to start with
svc_startwimp
        Push    "lr"

        Debug   ,"Service_StartWimp"
        LDR     r14, mytaskhandle
        TEQ     r14, #0
        MOVEQ   r14, #-1
        STREQ   r14, mytaskhandle
        ADREQL  r0,  Pinboardcommand
        MOVEQ   R1, #0

        Pull    "pc"

; ----------------------------------------------------------------------------------------------------------------------
;       Wimp has finished starting the tasks. If task handle=-1 then start up failed, so reset to 0.
svc_startedwimp
        Push    "lr"

        Debug   ,"Service_StartedWimp"
;  Test task handle to see if in starting sequence, or if started succesfully
        LDR     r14, mytaskhandle
        CMP     r14, #-1
        MOVEQ   r14, #0                  ; unset flag (so user can retry)
        STREQ   r14, [r12]

        Pull    "pc"

        LTORG

; ----------------------------------------------------------------------------------------------------------------------
;       Reset button pressed. Wimp has shut down. Reset task handle to 0. Release linked lists of icons.
svc_reset
        Push    "r0-r3, LR"

        Debug   ,"Service_Reset"
        MOV     r0, #0                  ; Clear task handle
        STR     r0, mytaskhandle

        BL      msgtrans_closefile

        BL      FreeAll

        Pull    "r0-r3,pc"

; ----------------------------------------------------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "R0-R11,LR"

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "R0-R11,PC",EQ,^

        Debug   ,"Dying"
; Close down the wimp end

        LDR     r0, mytaskhandle
        CMP     r0, #0
        BLE     %FT01

        LDR     r1, Taskid
        SWI     XWimp_CloseDown
01
        BL      msgtrans_closefile

      [ defaultbackdrop :LOR: standalonemessages
        ADRL     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
      ]

        BL      FreeAll

      [ Version <= 29
; Release all workspace
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
      ]

        Pull    "R0-R11,PC",,^           ; don't refuse to die
; ----------------------------------------------------------------------------------------------------------------------

FreeAll
        Push    "r0-r2,lr"

        LDR     r2,backdrop_path
        CMP     r2,#0
        MOVNE   r0,#0
        STRNE   r0,backdrop_path
        MOVNE   r0,#ModHandReason_Free
        SWINE   XOS_Module

        BL      FreeIconList
        BL      FreeBufferedList
        BL      FreeIconisedList

        Pull    "r0-r2,pc"

FreeIconList    ROUT

        Push    "r0-r3,LR"
        LDR     r3,Icon_list
01
        CMP     r3,#0
        STREQ   r3,Icon_list
        Pull    "r0-r3,PC",EQ

        MOV     r2,r3
        LDR     r3,[r3,#ic_next]
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
        B       %BT01

FreeBufferedList    ROUT

        Push    "r0-r3,LR"
        LDR     r3,Buffered_list
01
        CMP     r3,#0
        STREQ   r3,Buffered_list
        Pull    "r0-r3,PC",EQ

        MOV     r2,r3
        LDR     r3,[r3,#ic_next]
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
        B       %BT01

FreeIconisedList        ROUT
        Push    "r0-r3,lr"
        LDR     r3,iconized_ptr
01
        CMP     r3,#0
        STREQ   r3,iconized_ptr
        Pull    "r0-r3,pc",EQ

        MOV     r2,r3
        LDR     r3,[r3,#w_next_ptr]
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
        B       %BT01

; ----------------------------------------------------------------------------------------------------------------------
Pin_Code        ROUT
        Push    "LR"

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "PC",LE

        Debug   sa,"*Pin called."

        MOV     r1,r0
        ADR     r0,pin_args
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs            ; Read command line args.
        Pull    "PC",VS

        LDR     r14,[r2,#4]
        LDRB    r6,[r14,#1]
        LDRB    r0,[r14,#2]
        ORR     r6,r6,r0, LSL #8
        LDRB    r0,[r14,#3]
        ORR     r6,r6,r0, LSL #16
        LDRB    r0,[r14,#4]
        ORR     r6,r6,r0, LSL #24
        Debug   pi,"X = ",r6

        LDR     r14,[r2,#8]
        LDRB    r7,[r14,#1]
        LDRB    r0,[r14,#2]
        ORR     r7,r7,r0, LSL #8
        LDRB    r0,[r14,#3]
        ORR     r7,r7,r0, LSL #16
        LDRB    r0,[r14,#4]
        ORR     r7,r7,r0, LSL #24
        Debug   pi,"Y = ",r7

        MOV     r0,#37                  ; Canonicalise path
        LDR     r1,[r2]                 ; Pointer to path
        ADR     r2,dataarea
        MOV     r3,#0
        MOV     r4,#0
        MOV     r5,#256
        SWI     XOS_FSControl
        Pull    "PC",VS
        DebugS  pi,"Full Path is : ",r2
        RSB     r3,r5,#&100
        ADD     r3,r3,#1

        LDR     r1,backdrop_handle
        Debug   pi,"backdrop handle is ",r1
        BL      GetMonotonicID
        MOV     r0,#BufferReason_Remove
        BL      BufferIcon
        MOV     r0,#BufferReason_AddAtXY
        BL      BufferIcon

        Pull    "PC"

; -----------------------------------------------------------------------------------------------------------
BackDrop_Code
        Push    "LR"

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "PC",LE

        Debug   bd,"*BackDrop called."

        MOV     r1,r0
        ADR     r0,backdrop_args
        ADR     r2,dataarea
        MOV     r3,#&100
        SWI     XOS_ReadArgs
        Pull    "PC",VS

        MOV     r0,#0
        MOV     r1,#0
        LDR     r14,[r2,#4]     ; Centre ?
        CMP     r14,#0
        ADDNE   r1,r1,#1
        ORRNE   r0,r0,#bd_OptionCentred
        LDR     r14,[r2,#8]     ; Tile ?
        CMP     r14,#0
        ADDNE   r1,r1,#1
        ORRNE   r0,r0,#bd_OptionTiled
        LDR     r14,[r2,#12]     ; Scale ?
        CMP     r14,#0
        ADDNE   r1,r1,#1
        ORRNE   r0,r0,#bd_OptionScaled

        LDR     R14,[R2,#20]    ; Remove
        CMP     R14,#0
        LDRNE   R14,poll_word
        ORRNE   R14,R14,#PollWordReason_Remove
        STRNE   R14,poll_word
        Pull    "PC",NE

        CMP     r1,#1
        MOVLT   r0,#bd_OptionScaled     ; If no options then it is scaled.
        ADRGT   r0,ErrorBlock_Pinboard_BadOptions
        BLGT    msgtrans_errorlookup
        Pull    "PC",VS

        LDR     r14,[r12,#16]
        CMP     r14,#0
        ORREQ   r0,r0,#bd_OptionRecache

        STR     r0,backdrop_options
        Debug   bd,"Backdrop options are",r0

        LDR     r0,poll_word
        ORR     r0,r0,#PollWordReason_Recache
        STR     r0,poll_word

        MOV     r0,#37          ; Canonicalise path
        LDR     r1,[r2]         ; Pointer to path
        CMP     r1,#0           ; If no path given then
        Pull    "PC",LE         ;   go and recache the current backdrop
        ADR     r2,dataarea
        MOV     r3,#0
        MOV     r4,#0
        MOV     r5,#256
        DebugS  bd,"FSControl r1 -> ",r1
        SWI     XOS_FSControl
        Pull    "PC",VS

        DebugS  bd,"Full path is ",r2

; Now check that the file exists and is a sprite file.

        MOV     r0,#23          ; Read catalogue info with type / no path
        ADR     r1,dataarea
        SWI     XOS_File
        Pull    "PC",VS

        CMP     r0,#1
        MOVNE   r2,r0
        MOVNE   r0,#19          ; Generate error.
        SWINE   XOS_File
        Pull    "PC",VS

        LDR     r14,=&FF9
        CMP     r6,r14
        ADRNE   r0,ErrorBlock_Pinboard_NotASprite
        ADRNE   r4,dataarea
        BLNE    msgtrans_errorlookup
        Pull    "PC",VS

        LDR     r2,backdrop_path                ; Free old name if there is one.
        CMP     r2,#0
        MOVNE   r0,#ModHandReason_Free
        SWINE   XOS_Module
        Pull    "PC",VS

        ADR     r1,dataarea                     ; Count length of new name
01
        LDRB    r0,[r1],#1
        CMP     r0,#32
        BGE     %BT01

        ADR     r4,dataarea
        SUB     r3,r1,r4
        MOV     r0,#ModHandReason_Claim
        SWI     XOS_Module
        Pull    "PC",VS

        STR     r2,backdrop_path                ; Store name pointer

01                                              ; Now copy name into block
        LDRB    r0,[r4],#1
        STRB    r0,[r2],#1
        CMP     r0,#32
        BGE     %BT01

        Pull    "PC"

backdrop_args   DCB     "path,Centre=C/S,Tile=T/S,Scale=S/S,N=NoRecache/S,Remove=R/S",0
                ALIGN
pin_args        DCB     "path/A,X/E/A,Y/E/A",0
                ALIGN
pinboard_args
 [ Version >= 67
                DCB     "Grid=G/S,"
                DCB     "IconiseToIconBar=ITIB/S,"
                DCB     "TopLeft=TL/S,"
                DCB     "BottomLeft=BL/S,"
                DCB     "TopRight=TR/S,"
                DCB     "BottomRight=BR/S,"
                DCB     "StackVertical=SV/S"
                DCB     0
 |
   [ iconise_to_iconbar
                DCB     "Grid/S,IconiseToIconBar/S",0
   |
                DCB     "Grid/S",0
   ]
 ]
                ALIGN
addtiny_args    DCB     "path",0
                ALIGN

        MakeErrorBlock  Pinboard_BadOptions
        MakeErrorBlock  Pinboard_NotASprite

        LNK     s.StartLoop
