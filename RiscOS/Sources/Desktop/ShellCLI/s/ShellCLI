; > Sources.ShellCLI

;;----------------------------------------------------------------------------
;; *********************
;; ***  CHANGE LIST  ***
;; *********************
;;
;; 20-May-88    0.13    Change list added
;; 20-May-88            OS_ReadDefaultHandler used for boring handlers
;; 20-May-88            Keyboard setup left up to Wimp
;; 20-May-88    0.14    Wimp_CommandWindow used so *cat :foo works properly
;; 23-May-88    0.15    VDU 4 before printing error messages / prompt
;;              0.15    ==== Risc OS 2.00 Release version ====
;;
;; 26-May-88    0.16    Use Service_WimpCloseDown to object to wimp tasks
;; 20-Oct-88            'Make' procedures reorganised, Version file included
;; 20-Oct-88            Conditional assembly for versions 0.15 and 0.16
;;  5-May-89    0.17    Improve error recovery on startup
;;  4-Sep-89    0.18    Improve error handling in readline routine
;; 11-Sep-89    0.19    Only claim application memory while in startup sequence
;;  9-Dec-89    0.20    Check for R0 = -64*&100000 in Service_Memory
;;  3-Sep-90    0.21    Changed New Line printing to VDU 31 sequence to
;;                      move the cursor to bottom of screen.
;;  3-Apr-91    0.22    Internationalised
;; 10-Dec-91    0.25    Shortened message tokens.
;;----------------------------------------------------------------------------

Module_BaseAddr

        GET       hdr:ListOpts
        GET       hdr:Macros
        GET       hdr:System
        GET       hdr:ModHand
;        GET       hdr:vduext
        GET       hdr:Wimp
        GET       hdr:EnvNumbers
        GET       hdr:Services
        GET       hdr:FSNumbers
        GET       hdr:NewErrors
        GET       hdr:MsgTrans
        GET       hdr:Proc
        GET       Version


;=========================================================================
;
; Provides a module to support Shelling a CLI interface from a application.
;
; The module responds to the command Wimp_StartTask(ShellCLI).
;
; Shell will only work under the Wimp, and relies on the appropriate values
; for eg. function and cursor keys being set up by the Wimp beforehand.
;
; It issues the "*" prompt and processes commands, setting up the default
; environment for each of them, with a new quit handler.  It continues to do
; this until a null line is input. This terminates the Shell session.
;
; On exit the Shell will close the command window quietly, and call the
; original exit handler.
;
; The keyboard and screen are reset by the Wimp on exit.
;
;=========================================================================

;=========================================================================
;
; The RM header
;
; As laid down by the founding fathers
;
;=========================================================================

ModuleHeader
        DCD     StartCode                       - Module_BaseAddr
        DCD     0
        DCD     FinalisationCode                - Module_BaseAddr
        DCD     ServiceCall                     - Module_BaseAddr
        DCD     TitleString                     - Module_BaseAddr
        DCD     HelpString                      - Module_BaseAddr
        DCD     HelpAndCommandKeywordTable      - Module_BaseAddr
        DCD     SWIChunkBaseNumber
        DCD     SWIHandlerCode                  - Module_BaseAddr
        DCD     SWIDecodingTable                - Module_BaseAddr
        DCD     0                 ; SWIDecodingCode
 [ International_Help <> 0
        DCD     message_filename                - Module_BaseAddr
 |
        DCD     0
 ]


;=========================================================================

TitleString
;==========
        =       "ShellCLI", 0
        ALIGN


HelpString
;=========
        =       "ShellCLI", 9, "$VString ($Date)", 0
        ALIGN


FinalisationCode ROUT
;===============
; Must preserve r7-r11 and r13
; Only die if we have no instances of Shell's to support
        MOV     r6, lr
        LDR     r12, [r12]
        CMP     r12, #0
        ADRNE   r12, ShellCLIFailure
        BNE     CopyError
        MOVS    pc, r6

        LTORG

ShellCLIFailure
        DCD     &900
        =       "SActive", 0
        ALIGN


IsAnybodyThere    *  -64*&100000        ; magic number used by the Wimp
                                        ; for checking whether an application wants its memory

;mjs: Ursula format service table
;
        ASSERT Service_Memory  <  Service_Reset
        ASSERT Service_Reset   <  Service_WimpCloseDown
;
ServiceTable
        DCD    0                                ; flags
        DCD    UrsServiceCall - Module_BaseAddr
        DCD    Service_Memory
        DCD    Service_Reset
        DCD    Service_WimpCloseDown
        DCD    0                                ; terminator
        DCD    ServiceTable - Module_BaseAddr   ; table anchor
;
ServiceCall ROUT
        MOV     r0, r0                          ; magic instruction for Ursula format
        TEQ     r1, #Service_Memory
        TEQNE   r1, #Service_Reset
        TEQNE   r1, #Service_WimpCloseDown
        MOVNES  PC, LR
;
UrsServiceCall
        CMP     r1, #Service_Reset
        BEQ     svc_reset
        CMP     r1, #Service_WimpCloseDown
        BEQ     svc_wimpclos
;else fall through to svc_memory (must be Service_Memory)
svc_memory
        Push    "lr"
        addr    r14, ModuleHeader
        CMP     r14, r2
        CMPEQ   r0, #IsAnybodyThere   ; only claim if this is the Wimp!
        MOVEQ   r1, #0
        Pull    "pc",,^

svc_reset
; on reset, free all memory
        STMDB   sp!, {r0-r2, r9, lr}
        LDR     r9, [r12]      ; get workspace
        CMP     r9, #0         ; if zero, then no shell
        LDMEQIA sp!, {r0-r2, r9, pc}^
        MOV     r0, #0
        STR     r0, [r12]
        MOV     r0, #ModHandReason_Free
        LDR     r2, [r9, #:INDEX:MyStack]
        SWI     XOS_Module
        MOV     r0, #ModHandReason_Free
        MOV     r2, r9
        SWI     XOS_Module
        LDMIA   sp!, {r0-r2, r9, pc}^

svc_wimpclos
        CMP     R0,#0           ; not allowed to object if this was Wimp_Close
        LDRNE   r12, [r12]
        CMPNE   r12, #0         ; not active unless we have a block,
        MOVEQ   pc, lr          ; and this is our task handle
        LDR     r12, mytaskhandle
        CMP     r2, r12                      ; if we are currently active,
        ADREQ   r0, ErrorBlock_WimpCantKill  ; tell him to get stuffed!
        BEQ     CopyError
        MOV     pc, lr

        MakeInternatErrorBlock WimpCantKill,,WActive


HelpAndCommandKeywordTable
;=========================
; We do all the real work in the *command *ShellCLI.
; The expected client is a Wimp application doing a Wimp_StartTask("ShellCLI")
;
        =       "ShellCLI", 0
        ALIGN
        DCD     StartShellCLI           - Module_BaseAddr
        DCD     International_Help
        DCD     ShellCLIInvalid         - Module_BaseAddr
        DCD     ShellCLIHelpText        - Module_BaseAddr

        DCD     0              ; terminate my *cmd list


 [ International_Help = 0
ShellCLIInvalid
        =      "Syntax: *ShellCLI", 0
ShellCLIHelpText
        =      "ShellCLI - used by a Wimp Program to create a CLI shell", 0
 |
ShellCLIInvalid
        =      "SSCLSCL", 0
ShellCLIHelpText
        =      "HSCLSCL", 0
 ]
        ALIGN

StartShellCLI ROUT
        LDR     r12, [r12]
        CMP     r12, #0
        ADRNE   r0, ShellCLIFailure
        BNE     CopyError

        MOV     r0, #2
        ADR     r1, TitleString
        MOV     r2, #0
        SWI     OS_Module
        SWI     OS_Exit

      [ Version >= 16
taskid  DCB     "TASK"
      ]

;========================================================================
;
StartCode ROUT
;
; The real work goes on here. The Wimp application will have done a
; Wimp_StartTask(*ShellCLI) to get here. Our aim is to create a CLI shell
; which allows the user to execute CLI commands, then exit back to
; the Wimp.
;
; The Wimp will restore the state it requires when we OS_Exit to it, so
; we don't need to maintain the state, and indeed we can't as applications
; may change for you.
;
; On entry we reset the pallette, turn off the mouse etc.
; We also reset the keyboard to do function key expansion, cursor editing,
; and enable Escape.
;
;========================================================================

      [ Version < 16
        MOV     r0, #1
        SWI     Wimp_CommandWindow
      ]
        SWI     Shell_Create         ; try and create a Shell instance

        LDR     r12, [r12]           ; get workspace pointer of new instance
        LDR     sp, MyStack
        ADD     sp, sp, #MyStackSize

     [ Version >= 16
        MOV     R0,#200
        LDR     R1,taskid
        ADR     R2,TitleString
        SWI     Wimp_Initialise      ; goes to our error handler
        STR     R1,mytaskhandle

      [ Version >= 17
        BL      ScreenSetup
        MOVVC   r0, #1               ; tell the Wimp that we're using VDU 4
        SWIVC   XWimp_CommandWindow
        BVS     SetupError
      |
        MOV     r0, #1               ; tell the Wimp that we're using VDU 4
        SWI     Wimp_CommandWindow   ; without actually using the normal window

        BL      ScreenSetup          ; then the screen
      ]
     |
        BL      ScreenSetup          ; version 0.15 and earlier
     ]

      [ Version >= 19
        MOV     R0,#CAOPointer       ; pretend we're not the current application
        ADR     R1,Do_ExitHandler
        MOV     R2,#0
        MOV     R3,#0
        SWI     XOS_ChangeEnvironment
        BVS     SetupError
      ]

CmdPrompt
;========
;
; The inner loop of the Cli.
;
; LOOP
;   WriteF("Shell*")
;   command := READLINE();
;   IF command = " " THEN EXIT; END;
;   OSCLI(command);
; END;
;
        BL      DisplayPrompt
     [ Version >= 17
        ADRVC   r0, CommandBuffer    ; Read a command line
        MOVVC   r1, #(CommandBufferEnd - CommandBuffer)
        MOVVC   r2, #" "
        MOVVC   r3, #255
        SWIVC   XOS_ReadLine
      [ Version >= 18
        BVS     internalerror        ; give it a chance to recover
      |
        BVS     SetupError
      ]
        BCS     EscapeAck            ; CS indicated an Escape key was pressed
     |
        ADR     r0, CommandBuffer    ; Read a command line
        MOV     r1, #(CommandBufferEnd - CommandBuffer)
        MOV     r2, #" "
        MOV     r3, #255
        SWI     OS_ReadLine
        BCS     EscapeAck            ; CS indicated an Escape key was pressed
     ]
        CMP     r1, #0               ; zero length string terminates CLI
        BEQ     CmdPromptExit

        ADR     r0, CommandBuffer
        SWI     XOS_CLI
        BVC     CmdPrompt            ; no error, repeat

internalerror
        ADD     r0, r0, #4           ; error - skip number
        SWI     XOS_Write0           ; and print the error message
      [ Version < 17
        SWI     XOS_NewLine
        B       CmdPrompt
      |
        SWIVC   XOS_NewLine
        BVC     CmdPrompt            ; drop through if error

SetupError
        Push    "R0"
        MOV     r0, #-1              ; ensure error is reported in a box
        SWI     XWimp_CommandWindow  ; ignore errors from this
        Pull    "R0"
        MOV     R1, #6               ; cancel box highlighted
        ADRL    R2, TitleString
        SWI     Wimp_ReportError
      ]

CmdPromptExit ROUT
        SWI     Shell_Destroy        ; lose block (we are now inactive)
      [ Version >= 16
        SWI     Wimp_CloseDown
      ]
        MOV     r0, #-1              ; close down quietly
        SWI     Wimp_CommandWindow   ; (screen will be redrawn because of this)
        SWI     OS_Exit              ; calls Wimp_CloseDown automatically

esc_msg DCB     "Escape", 0

EscapeAck ROUT
;========
;
; Also called if Readline terminates with carry set, indication escape.
;
        MOV     r0, #&7E
        SWI     XOS_Byte               ; Acknowledge the Escape
        SWI     XOS_NewLine
        MOVVC   r0, #0
        ADRVC   r1, esc_msg
        MOVVC   r2, #0
        MOVVC   r4, #0
        MOVVC   r5, #0
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        B       CmdPrompt


Do_ExitHandler ROUT
;=============
;
; The application has died, so return to the Cli prompt
; but I'm paranoid - reset all my handlers first
;
        TEQP    pc, #0                 ; make really sure we are user mode
        MOVNV   r0, r0
        LDR     sp, MyStack
        ADD     sp, sp, #MyStackSize

        BL      SetHandlers

        B       CmdPrompt


ScreenSetup ROUT
;==========
        Push    r14
        MOV     r0, #218
        MOV     r1, #0
        MOV     r2, #0
        SWI     XOS_Byte               ; flush VDU Q.
        ADR     r0, %f1
        ADR     r1, %f2
        SUB     r1, r1, r0
        SWI     XOS_WriteN             ; Write out a VDU String to reset things
        B       %f3
1
        =       6                      ; Enable VDU
        =       4                      ; VDU 4 mode
        =       23,1,1,0,0,0,0,0,0,0   ; enable text cursor
        =       26                     ; text and graphics windows to default
        =       30                     ; text cursor homed
        =       29, 0, 0, 0, 0         ; graphics origin to (0,0)
        =       25, 4, 0, 0, 0, 0      ; graphics cursor to (0,0)
        =       15                     ; Paged mode off
;        =       17, 7                  ; text foreground to colour 7
        =       18, 0, 7               ; graphics foreground to colour 7
;        =       17, 128                ; text background to colour 0
        =       18, 0, 128             ; graphics background to colour 0
2
        ALIGN
3
        MOV     r0, #7
        SWI     XWimp_TextColour       ; set text foreground
        MOV     r0, #&80
        SWI     XWimp_TextColour       ; set text background
        MOV     r0, #160               ; Read VDU variable
        MOV     r1, #9                 ; of bottom row
        SWI     XOS_Byte               ; into r1
      [ Version >= 21
        MOV     r0,#31                 ;goto
        SWI     XOS_WriteC
        MOV     r0,#0                  ;Left column
        SWI     XOS_WriteC
        MOV     r0,r1                  ;Bottom row.
        SWI     XOS_WriteC
        MOV     r0,#10                 ;One extra line.
        SWI     XOS_WriteC
      |
        MOV     r0, #10
4
        SWI     XOS_WriteC             ; do linefeeds
        SUBS    r1, r1, #1             ; to bottom of screen
        BGE     %b4
      ]

        MOV     r0, #106               ; mouse pointer
        MOV     r1, #0                 ; turn it off
        SWI     XOS_Byte

        Pull    pc



DisplayPrompt ROUT
;============
        Push    "lr"
        SWI     XOS_WriteI+4            ; just in case
      [ Version >= 18
        Pull    "pc",VS
      ]
        ADR     r0, CliDPrompt
        ADR     r1, CommandBuffer
        MOV     r2, #(CommandBufferEnd - CommandBuffer)
        MOV     r3, #0
        MOV     r4, #3
        SWI     XOS_ReadVarVal
        ADRVS   r1, DefaultPrompt
        MOVVS   r2, #1
        MOV     r3, #0
1
        LDR     r0, [r1, r3]
        CMP     r3, r2
        SWINE   XOS_WriteC
      [ Version >= 18
        Pull    "pc",VS
      ]
        ADDNE   r3, r3, #1
        BNE     %b1
        Pull    "pc"

CliDPrompt
        =       "CLI$Prompt", 0
DefaultPrompt
        =       "*"
        ALIGN


Do_ErrorHandler ROUT
;==============
;
; An error has occurred, print error msg and exit
;
        MOV     r12, r0                ; get Workspace pointer in correct reg
        TEQP    pc, #0                 ; make really sure we are user mode
        MOVNV   r0, r0
        LDR     r13, MyStack
        ADD     r13, r13, #MyStackSize

        SWI     XOS_WriteI+4           ; just in case
        ADR     r0, ErrorBufferMsg
        SWI     XOS_Write0             ; print the error message
        SWI     XOS_NewLine
        SWI     XOS_Exit               ; exit to ShellCLI's exit handler


;===================================================================
;
; The SWI handlers.
; We have Create and Destroy, used to create and destroy instances
; of the Shell.
;
;===================================================================

SWIChunkBaseNumber            * &40000 + (&40 * ShellSWI)
;=================

Shell_Create                  * SWIChunkBaseNumber
Shell_Destroy                 * SWIChunkBaseNumber + 1


SWIDecodingTable
;===============
        =       "Shell", 0
        =       "Create", 0
        =       "Destroy", 0
        =       0
        ALIGN


SWIHandlerCode ROUT
;==================
        CMP     r11, #1
        BEQ     SWI_Destroy
        BCC     SWI_Create

        ADR     r0, UnknownSWIErrorMsg
        B       CopyError

UnknownSWIErrorMsg
        DCD     &901
        DCB     "BadSWI", 0
        ALIGN


;===================================================================
;
SWI_Create ROUT
;
; We create an instance of a shell. We allocate some workspace in the
; RMA and link it in at the head of the instance chain. We reset the
; handlers, saving the old values for restoration by destroy.
;
;===================================================================
; Can corrupt r10-r12

        Push    "r0-r9, lr"

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =(LastWord - FirstWord)
        SWI     XOS_Module
        BVS     SWI_CreateExit

        MOV     r9, r2
        MOV     r3, #MyStackSize
        SWI     XOS_Module
        BVS     SWI_CreateError

        STR     r9, [r12]
        MOV     r12, r9                 ; point to our workspace
        STR     r2, MyStack

        BL      SetHandlers             ; on exit r1-r3 = old Exit handler pars
                                        ; assume no errors from this
        ADRVC   r0, OldExitHandler
        STMVCIA r0,{r1-r3}

SWI_CreateExit
        STRVS   r0, [sp]
        Pull    "r0-r9, pc"

SWI_CreateError
        STR     r0, [sp]

        MOV     r0, #ModHandReason_Free
        MOV     r2, r9
        SWI     XOS_Module

        Pull    "r0-r9, lr"
        ORRS    pc, lr, #V_bit          ; return with error

;
; set up default environment handlers (ensure none left in yukky state)
;  0 in table ==> leave alone (MemoryLimit,ApplicationSpaceSize)
;  1 in table ==> use default handler
; >1 in table ==> use values in table
;

      [ Version <= 17
maxenv  *       &10
      |
maxenv  *       MaxEnvNumber   ; this keeps changing!
      ]

SetHandlers ROUT
        Push    "R1-R6,LR"              ; R1-R3 pushed later
;
        ADR     R4,defaulthandlers      ; R4 --> data
        MOV     R6,#maxenv
01
        LDR     R1,[R4],#4              ; if zero, it's not an address offset
        TEQ     R1,#0
        RSBEQ   R0,R6,#maxenv     ; R1=0 ==> use default handler
        SWIEQ   XOS_ReadDefaultHandler
        Pull    "R1-R6,PC",VS
        ADDNE   R1,R1,R4                ; R1 --> code address
        MOVNE   R2,R12
        ADRNEL  R3,ErrorBuffer
02
        RSB     R0,R6,#maxenv
        SWI     XOS_ChangeEnvironment
        TEQ     R6,#maxenv-ExitHandler
        STMEQIA sp,{R1-R3}              ; stash old exit handler
        SUBS    R6,R6,#1
        BNE     %BT01
;
        Pull    "R1-R6,PC"

;
; Default settings to pass to SWI XOS_ChangeEnvironment
;       R1 --> code address / buffer pointer
;       R2  =  returned in R12 (if R1 is an address) - maybe
;       R3 --> block           (if R1 is an address)
;

defaulthandlers
        DCD     0                       ; MemoryLimit

        DCD     0                       ; UndefinedHandler
        DCD     0                       ; PrefetchAbortHandler
        DCD     0                       ; DataAbortHandler
        DCD     0                       ; AddressExceptionHandler
        DCD     0                       ; OtherExceptionHandler

        DCD     Do_ErrorHandler-.-4
        DCD     0                       ; CallBackHandler
        DCD     0                       ; BreakPointHandler

        DCD     0                       ; EscapeHandler
        DCD     0                       ; EventHandler
        DCD     Do_ExitHandler-.-4
        DCD     0                       ; UnusedSWIHandler

        DCD     0                       ; ExceptionDumpArea
        DCD     0                       ; ApplicationSpaceSize
        DCD     0                       ; CAO pointer

      [ Version >= 18
        DCD     0                       ; UpCall handler
      ]

        ASSERT  (.-defaulthandlers)/4 = maxenv


;===================================================================
;
SWI_Destroy ROUT
;
; We dismantle this instance of shell, restoring all the old handlers
; and freeing the workspace in the RMA, delinking us from the
; instance chain.
;
;===================================================================
; can corrupt only r10-r12

        Push    "r0-r9, lr"

        MOV     r10, r12             ; save private word
        LDR     r12, [r12]           ; get workspace
        CMP     r12, #0              ; if zero, then no shell
        Pull    "r0-r9, pc",EQ,^

        MOV     r0, #0
        STR     r0, [r10]            ; unchain ourselves - no going back now !

        MOV     r0, #ExitHandler
        ADR     r1, OldExitHandler   ; restore old Exit handler
        LDMIA   r1, {r1-r3}
        SWI     XOS_ChangeEnvironment

        MOV     r0, #ModHandReason_Free
        LDR     r2, MyStack
        SWI     XOS_Module           ; ignore errors

        MOV     r0, #ModHandReason_Free
        MOV     r2, r12
        SWI     XOS_Module           ; ignore errors

        Pull    "r0-r9, pc",,^

;===================================================================

MessageBlockSize EQU 16

CopyError
        ORR     lr, lr, #V_bit
        STMDB   sp!, {r0-r7, lr}
        SUB     sp, sp, #MessageBlockSize
        MOV     r0, sp
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        BVS     CopyError1
        LDR     r0, [sp, #MessageBlockSize]
        MOV     r1, sp
        ADRL    r4, TitleString
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        STR     r0, [sp, #MessageBlockSize]
        MOV     r0, sp
        SWI     XMessageTrans_CloseFile
CopyError1
        ADD     sp, sp, #MessageBlockSize
        LDMIA   sp!, {r0-r7, pc}^

message_filename
        DCB     "Resources:$.Resources.ShellCLI.Messages", 0
        ALIGN

;===================================================================
;
; Instance Data - kept in RMA Heap blocks
;
;===================================================================
        ^ 0, r12
FirstWord              Word 0  ; unused - a placeholder for allocating space

OldExitHandler         Word 3
  [ Version >= 16
mytaskhandle           Word
  ]
ErrorBuffer            Word 0
ErrorBufferPC          Word
ErrorBufferNumber      Word
ErrorBufferMsg         Word 64
CommandBuffer          Word 256  ;mjs changed for Ursula (was 64)
CommandBufferEnd       Word 0
CallbackBuffer         Word 16
MyStack                Word

MyStackSize            * &400

LastWord               Word 0  ; unused - a placeholder for allocating space

        END
