        TTL     > <wini>.arm.Filer.asm.Filerswis

; 0.00  13-Nov-89  JSR  Started.
; 0.01  20-Nov-89  JSR  Remove development version from module title.
; 0.02  10-Jan-90  JSR  Refer to headers by Hdr: rather than &.Hdr.

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:ModHand
        GET     Hdr:Wimp
        GET     Hdr:WimpSpace
        GET     Hdr:Messages
        GET     Hdr:Proc
        GET     Hdr:FilerAct
        GET     Hdr:MsgTrans

        GET     Version

        LEADR   Module_LoadAddr

 ASSERT (.=Module_BaseAddr)

        DCD     0                                       ; No start
        DCD     FilerSWIs_Init          - Module_BaseAddr
        DCD     0                                       ; Dies automagically
        DCD     0                                       ; No services we recognise
        DCD     FilerSWIs_TitleString   - Module_BaseAddr
        DCD     FilerSWIs_HelpString    - Module_BaseAddr
        DCD     0
        DCD     Module_SWISystemBase + FilerSWI * Module_SWIChunkSize  ; SWI chunk base
        DCD     FilerSWIs_SWICode       - Module_BaseAddr
        DCD     FilerSWIs_SWITable      - Module_BaseAddr
        DCD     0                                       ; No SWI decoding code

FilerSWI_BlockSize      *       256 - ms_data
delete                  *       127
space                   *       32

FilerSWIs_TitleString
        DCB     "FilerSWIs", 0

FilerSWIs_HelpString
        =       "FilerSWIs", 9
        =       version," (",date,")"
        =       0

FilerSWIs_SWITable
        DCB     "FilerAction", 0
        DCB     "SendSelectedDirectory", 0
        DCB     "SendSelectedFile", 0
        DCB     "SendStartOperation", 0
        DCB     0

        ALIGN

FilerSWIs_Init  ENTRY
        ; Claim a block for the accumulated selection, then set it to the null string
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #FilerSWI_BlockSize
        SWI     XOS_Module
        STRVC   r2, [r12]
        MOVVC   r0, #0
        STRVCB  r0, [r2]
        EXIT

FilerSWIs_SWICode
        CMP     r11, #SWITableSize :SHR: 2
        ADDLO   pc, pc, r11, LSL #2
        B       SWIIsBad
        ; The branch table for the SWIs
SWITableStart
        B       FilerSWI_SendSelectedDirectory
        B       FilerSWI_SendSelectedFile
        B       FilerSWI_SendStartOperation
SWITableEnd
SWITableSize    *       SWITableEnd - SWITableStart

SWIIsBad Entry "r1-r7"
        ADR     r0, ErrorBlock_ModuleBadSWI
        ADR     r4, FilerSWIs_TitleString
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        MOV     r1, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

        MakeInternatErrorBlock ModuleBadSWI,,BadSWI
        ALIGN

        LTORG

FilerSWI_SendSelectedDirectory ENTRY "r0-r3", 256

        ; Copy dirname into message structure on stack
        MOV     r2, r1
        ADD     r1, sp, #ms_data
        BL      strcpy

        ; Get its length
        BL      strlen

        ; Evaluate the whole structure's length, rounded up to a word
        ADD     r3, r3, #ms_data + 1
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Initialise the other fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerSelectionDirectory
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]
        EXIT

; accumulate a filename
FilerSWI_SendSelectedFile ENTRY "r0-r3"

        ; Get to workspace
        LDR     r12, [r12]

        ; How much have we accumulated so far?
        MOV     r1, r12
        BL      strlen
        MOV     r2, r3

        ; Add the length of the new selection, a spaces separator and the nul terminator
        LDR     r1, [sp, #1*4]
        BL      strlen
        ADD     r2, r2, r3
        ADD     r2, r2, #1+1            ; 1 for the space and 1 for the terminator

        ; If that overflows the buffer, then flush it
        CMP     r2, #FilerSWI_BlockSize
        BLS     %FT10
        BL      flush_selection
        STRVS   r0, [sp]
        EXIT    VS

10      ; The buffer is now guaranteed to hold the new selection

        ; Find out how far to go to place the selection
        MOV     r1, r12
        BL      strlen
        ADD     r1, r12, r3

        ; Add a space seperator on all but the first
        TEQ     r3, #0
        MOVNE   r2, #" "
        STRNEB  r2, [r1], #1

        ; Copy the string into the buffer
        LDR     r2, [sp, #1*4]
        BL      strcpy

        ; All done
        EXITS

;
; flush the accumulated filenames
; r12 points to selection
; r0 is handle to send selection to
flush_selection ENTRY "r0-r3", 256

        ; Copy the selection to ms_data
        MOV     r2, r12
        ADD     r1, sp, #ms_data
        BL      strcpy

        ; Evaluate the size and store it
        BL      strlen
        ADD     r3, r3, #ms_data + 1
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Fill in the other fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerAddSelection
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]

        ; Zero the selection if all went well
        MOVVC   r0, #0
        STRVCB  r0, [r12]

        ; All done
        EXIT



FilerSWI_SendStartOperation ENTRY "r0-r3", 256

        ; Get to workspace
        LDR     r12, [r12]

        ; Flush any buffered selection
        BL      flush_selection
        STRVS   r0, [sp, #256+0*4]
        EXIT    VS

        ; Store the action
        STR     r1, [sp, #ms_data]

        ; Store the options
        STR     r2, [sp, #ms_data + 4]

        ; Store the auxilliary data
        MOV     r2, r3
        MOV     r3, r4
        ADD     r1, sp, #ms_data + 8
        BL      memcpy

        ; Evaluate the length and store it
        ADD     r3, r3, #ms_data + 8
        ADD     r3, r3, #3
        BIC     r3, r3, #3
        STR     r3, [sp, #ms_size]

        ; Fill in the rest of the fields
        MOV     r3, #0
        STR     r3, [sp, #ms_yourref]
        LDR     r3, =Message_FilerAction
        STR     r3, [sp, #ms_action]

        ; Send the message
        MOV     r2, r0
        MOV     r1, sp
        MOV     r0, #17
        SWI     XWimp_SendMessage
        STRVS   r0, [sp, #256+0*4]

        ; All done
        EXIT

; .............................................................................
;
; memcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area
;       r2 -> src area
;       r3 = length to copy

memcpy ENTRY "r1-r3"

        MOVS    r3, r3
        B       %FT20

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        STRB    r14, [r1], #1           ; Copy to *r1++
        SUBS    r3, r3, #1
20      BNE     %BT10

        EXITS

; .............................................................................
;
; strcpy
; ======
;
; Copy a string and terminate with 0

; In    r1 -> dest area
;       r2 -> CtrlChar/r3 terminated src string

strcpy ENTRY "r1-r2"

10      LDRB    r14, [r2], #1           ; Copy from *r2++
        CMP     r14, #delete            ; Order, you git!
        CMPNE   r14, #space-1           ; Any char < space terminates copy
        MOVLS   r14, #0                 ; Terminate dst with 0
        STRB    r14, [r1], #1           ; Copy to *r1++
        BHI     %BT10

        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; strlen
; ======
;
; Find the length of a string (exclusive of terminator, so can't HeapGet (0))

; In    r1 -> CtrlChar terminated string

; Out   r3 = number of chars (can be used as size for Heap)

strlen ENTRY

        MOV     r3, #0
10      LDRB    r14, [r1, r3]
        CMP     r14, #delete            ; Order, you git! EQ -> ~HI
        CMPNE   r14, #space-1           ; CtrlChar, delete
        ADDHI   r3, r3, #1
        BHI     %BT10
        EXITS

        END
