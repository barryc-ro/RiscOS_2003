14 Jun 1996

Added TaskModule_StartTask. Haven't tested callback code yet.


17 Jun 1996

Changed to use allocated SWI chunk (&4D300)


24 Jun 1996

Added code for TaskModule_(De)RegisterBroadcast. Not tested.
Added code for TaskModule_(De)RegisterService. Not tested.

27 Jun 1996

Fixed TaskModule_(De)RegisterBroadcast code.


02 Jul 1996

Name given to ModuleTask_Client structure is now 'TaskModule' (was
'NCTaskModule').

Fixed bug in TaskModule_SWIHandler - was returning from within Try block.



Added code to claim null events after each call to Wimp_SendMessage with
event type 18 (expecting reply). event_NULL claim is released on receipt
of a reply. If a Null gets through, the message-block is freed.

This is to cope with a message getting acknowldeged, (ie a receiver
replies with eventtype 19), which prevents any reply getting through
at all. It replies on event_NULLs only being sent when the message queue
is empty.

Not tested.



22 Jul 1996

Should maybe have a CLI interface for sending messages...



25 Oct 1996

Adding Desk debuging to build - hand-copied selected files from
C:Desk.o.Debugs... into Sources.Libs.Desk.Debug.
Changed debug-uniqfile to output to 'Cache:$.TMOut' - seems that
<Wimp$ScrapDir> isn't set up early enough.

Fixed bug - when pending service-call messages are removed from queue
following a call to TaskModule_DeRegisterService, app->pollword wasn't
being decremented. app->pollword is now decremented for each removed
pending message.


03 Feb 1997

Adding support for sending non-message events. This is done by setting
bit 0 of r0 in call to TaskModule_SendMessage, and putting the event
number into r6.


25 Mar 1997

Template makefile now creates h dir prior to calling cmhg.


27 Mar 1997

Fixed bug where calling (for eg) TaskModule_SendMessage before
TaskModule's task had started resulted in a data abort. This was caused
by the task initialisation function changing the function used to alloc
memory, so causing problems when freeing memory allocated before the
task had started.

-- 0.06 --

-- 0.07 --

01 May 1997

Now calls Wimp_ForceRedraw using _swix - relying on signal to be caught
from error raised from Desk_Wimp_ForceRedraw doesn't work.


17 Jul 1997

Some things to allow modules/apps to cope when taskmodule is quit and
restarted: Should consider sending a servicecall when module inits and
finalises, and broadcast message when taskmodule starts. Provide SWI to
return taskmodule's task handle (allows tasks to lisen for 'app dying'
message to tell when taskmodule quits).


21 Jul 1997

Made TaskModule_SendMessage reenterent. Checked in onto trunk.

-- 0.09 --


22 Jul 1997

Adding TaskModule_AddCallBack and TaskModule_RemoveCallBack.
Reorganising code a lot.

SWI TaskModule_AddCallBack (0x4d307)
	On entry:
		r0 = flags. Must be 0.
		r1 = address of handler routine.
		r2 = r12 value with which to call handler.
	On exit:
		all registers preserved.
		
	The handler routine is called when TaskModule's task
	is next active. This guarantees that one isn't in the
	middle of a redraw loop for example, allowing calls to
	(for example) Wimp_SetCaret.
	
	The conditions for the handler routine are:
		
		On extry:
			ARM is in SVC mode.
			r12 = value passed in r2 to
				TaskModule_AddCallBack
		On exit:
			All registers preserved.
	
	This SWI can be called from within an interrupt
	handler.

SWI TaskModule_RemoveCallBack (0x4d308)
	On entry:
		r0 = flags. Must be 0.
		r1 and r2 are values used in a previous call to
			TaskModule_AddCallBack.
	On exit:
		all registers preserved.
		
	Cancels a callback added previously with TaskModule_AddCallBack.

-- 0.10 --


18 Aug 1997

If r0 bit 0 is set in TaskModule_AddCallBack, then the callback is done
after the next null event instead of after the next nonzero pollword.


-- 0.11 --

18 Mar 1998

If r0 bit 0 is set in TaskModule_RegisterService, then it is guaranteed
that Wimp messages will be delivered to the registered application in
the order that the service calls are received.

-- 0.12 --
