#include "Desk.Debug.h"
#include "Desk.Error2.h"

#include "MemCheck.MemCheck.h"

#include "^.Module.h"
#include "^.Send.h"
#include "^.StartTask.h"
#include "^.Broad.h"
#include "^.Service.h"
#include "^.FRedraw.h"



Desk_os_error*	TaskModule_SWIHandler( int swi_no, _kernel_swi_regs* r, void* pw)
	{
	Desk_Debug_Printf( "SWI %i called\n", swi_no);
	
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	
	Desk_Error2_Try	{
		
		if ( swi_no == TaskModule_SWI_SendMessage)
			TaskModule_Send_SendMessage( 
				(int)				(r->r[0]),
				(Desk_message_block*)		(r->r[1]), 
				(Desk_task_handle)		(r->r[2]), 
				(Desk_icon_handle)		(r->r[3]),
				(TaskModule_messagehandler)	(r->r[4]), 	/* CC warns of cast from non-fn to fn	*/
				(void*)				(r->r[5]),
				(Desk_event_type)		(r->r[6])
				);
		
		else if ( swi_no == TaskModule_SWI_StartTask)
			TaskModule_StartTask_Register(
				(const char*)				r->r[0],
				(TaskModule_starttask_callbackfn)	r->r[1],
				(void*)					r->r[2]
				);
		
		else if ( swi_no == TaskModule_SWI_TaskModule_RegisterService)
			TaskModule_Service_Register( r->r[0], r->r[1], (Desk_task_handle) r->r[2]);
		
		else if ( swi_no == TaskModule_SWI_TaskModule_DeRegisterService)
			TaskModule_Service_DeRegister( r->r[0], r->r[1], (Desk_task_handle) r->r[2]);
		
		else if ( swi_no == TaskModule_SWI_RegisterBroadcastMessage)
			TaskModule_Broad_Register( r->r[0], (Desk_message_action*) r->r[1], (TaskModule_broad_handler) r->r[2], (void*) r->r[3]);
		
		else if ( swi_no == TaskModule_SWI_DeRegisterBroadcastMessage)
			TaskModule_Broad_DeRegister( r->r[0], (Desk_message_action*) r->r[1], (TaskModule_broad_handler) r->r[2], (void*) r->r[3]);
		
		else if ( swi_no == TaskModule_SWI_ForceRedraw)
			TaskModule_ForceRedraw( (Desk_window_redrawblock*) r);
		}
		
	Desk_Error2_Catch	{
		Desk_Debug_DescribeError2( &Desk_Error2_globalblock);
		MemCheck_UnRegisterMiscBlock( r);
		return NULL;
		}
	Desk_Error2_EndCatch
	
	MemCheck_UnRegisterMiscBlock( r);
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_SWIHandler returning\n");
	return NULL;
	
	Desk_UNUSED( pw);
	}
