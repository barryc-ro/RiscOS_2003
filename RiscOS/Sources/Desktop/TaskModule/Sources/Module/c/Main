#include <string.h>
#include <stdio.h>

#include "swis.h"

#include "ModuleTask.ModuleTask.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.Event.h"
#include "Desk.DeskMem.h"
#include "Desk.BackTrace.h"
#include "Desk.Jump.h"

#include "MemCheck.MemCheck.h"

#include "^.Task.h"
#include "^.Module.h"
#include "^.Send.h"
#include "^.Service.h"

#include "moddefs.h"




Desk_os_error*	TaskModule_Finalise( int fatal, int podule_base, void *pw)
/* Return NULL if succeeds.	*/
	{
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_ModuleFinalise called\n");
	MemCheck_OutputBlocksInfo();
	return NULL;
	
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	Desk_UNUSED( fatal);
	}


#define	TaskModule_MODULENAME			"TaskModule"
#define	TaskModule_command_DESKTOP		"Desktop_TaskModule"
#define	TaskModule_command_DESKTOP_NUM		CMD_Desktop_TaskModule	/* Generated by CMHG	*/





Desk_os_error*	TaskModule_ModuleInitialise( const char *cmd_tail, int podule_base, void *pw)
	{
	TaskModule_block*	app = &TaskModule_globalblock;
	
	Desk_Error2_Try	{
		MemCheck_InitNoDebug();
		MemCheck_RedirectToFilename( tmpnam( NULL));
		MemCheck_SetChecking( 0, 0);
		
		MemCheck_Printf( "MemCheck inited...");
		
		ModuleTask_Client.module_commandhandler	= NULL;
		ModuleTask_Client.module_service	= TaskModule_Service_ServiceHandler;
		ModuleTask_Client.module_enter		= TaskModule_Task;
		ModuleTask_Client.module_finalise	= TaskModule_Finalise;
		ModuleTask_Client.module_name		= TaskModule_MODULENAME;
		ModuleTask_Client.command_desktop	= TaskModule_command_DESKTOP;
		ModuleTask_Client.command_desktop_num	= TaskModule_command_DESKTOP_NUM;
		ModuleTask_Client.taskhandle_ptr	= &Desk_Event_taskhandle;
		
		app->pollword = 0;
		Desk_LinkList_Init( &app->messages);
		Desk_LinkList_Init( &app->starttasks);
		Desk_LinkList_Init( &app->broad);
		
		Desk_LinkList_Init( &app->service.registered);
		Desk_LinkList_Init( &app->service.waiting);
		
		Desk_Error2_Init_JumpSig();
		
		Desk_Debug_Initialise();
		Desk_Debug_SetNestingIndentation( "  ");
		Desk_Debug_Printf( Desk_error_PLACE "TaskModule_ModuleInitialise called\n");
		}
	Desk_Error2_Catch	{
		Desk_Error2_ConvertToOS( &Desk_error_global, &Desk_Error2_globalblock);
		Desk_Debug_Printf( Desk_error_PLACE "Returning error\n");
		return &Desk_error_global;
		}
	Desk_Error2_EndCatch
	
	return NULL;
	
	Desk_UNUSED( cmd_tail);
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	}


ModuleTask_client_fns	ModuleTask_Client =
	{
	TaskModule_ModuleInitialise,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	0,
	NULL
	};

