#ifndef __ModuleTask_h
#define __ModuleTask_h
#include "kernel.h"
typedef struct {
_kernel_oserror* (*module_initialise) (const char *cmd_tail, int podule_base, void *pw);
_kernel_oserror* (*module_commandhandler) (const char *arg_string, int argc, int cmd_no, void *pw);
void (*module_service) (int service_no, _kernel_swi_regs *r, void *pw);
_kernel_oserror* (*module_enter) (const char* args);
_kernel_oserror* (*module_finalise) (int fatal, int podule, void* pw);
char* module_name; 
char* command_desktop; 
int command_desktop_num; 
int* taskhandle_ptr; 
}
ModuleTask_client_fns;
extern ModuleTask_client_fns ModuleTask_Client;
_kernel_oserror* ModuleTask__ModuleInitialise(const char *cmd_tail, int podule_base, void *pw);
_kernel_oserror* ModuleTask__ModuleCmdHandler(const char *arg_string, int argc, int cmd_no, void *pw);
void ModuleTask__ModuleService(int service_no, _kernel_swi_regs *r, void *pw);
_kernel_oserror* ModuleTask__ModuleFinalise(int fatal, int podule, void* pw);
#endif
