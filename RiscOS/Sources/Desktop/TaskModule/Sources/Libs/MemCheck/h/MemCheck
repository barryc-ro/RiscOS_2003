/*

	#   #              ###  #                 #
	## ##             #   # #                 #
	# # #  ###  ## #  #     ####   ###   ###  ####
	#   # #   # # # # #     #   # #   # #   # #   #
	#   # ##### # # # #     #   # ##### #     ####
	#   # #     #   # #   # #   # #     #   # #  #
	#   #  ###  #   #  ###  #   #  ###   ###  #   #
	_______________________________________________

Author:		Copyright © 1995, 1996 Julian Smith, Warm
		Silence Software.

Purpose:	Checking of memory accesses.
*/

/*
$Id$
*/

#ifndef __MemCheck_MemCheck_h
#define __MemCheck_MemCheck_h


#ifdef __cplusplus
	extern "C"	{
#endif

#include <stddef.h>
#include <stdio.h>


#if defined( MemCheck_MEMCHECK)
	
	#if !defined( __CC_NORCROFT) || !defined( __arm) || !defined( __riscos) || !defined( __acorn)
		#error MemCheck will only work with the Acorn C compiler.
	#endif
	
	
	#pragma	check_memory_accesses
/*
Makes Acorn's compiler generate special instructions before each read or
write of memory.
 */
	
	
	void	MemCheck_Init( void);
/*
This (or MemCheck_InitNoDebug) should be called at the start of main().

MemCheck_Init will try to load debug data if possible.

If your main uses argc and argv, call MemCheck_RegisterArgs also.
 */
	
	
	void	MemCheck_InitNoDebug( void);
/*
This should be used instead of MemCheck_Init if you don't want MemCheck
to try to load the debug data in the program image.
 */
	
	
	void	MemCheck_RegisterArgs( int argc, char* argv[]);
/*
Call this function to register the parameters given to main() with
MemCheck. Each argument string is registered as a read-only.
 */
	
	
void	MemCheck_InterceptSCLStringFunctions( void);
/*
Intercepts calls to various ANSI str/mem functions in the shared C
library, and checks the array parameters for read/write access.
 */
	
	
	typedef int	MemCheck_checking;
/*
Used to store old checking status.
 */
	
	
	MemCheck_checking	MemCheck_SetReadChecking( int checkreads);
/*
checkreads=1 - turns on checking of memory-reads.

checkreads=0 - turns off checking of memory-reads.

Also see MemCheck_SetWriteChecking, MemCheck_SetChecking.
 */
	
	
	MemCheck_checking	MemCheck_SetWriteChecking( int checkwrites);
/*
checkwrites=1 - turns on checking of memory-writes.

checkwrites=0 - turns off checking of memory-writes.

Also see MemCheck_SetReadChecking, MemCheck_SetChecking.
 */
	
	
	MemCheck_checking	MemCheck_SetChecking( int checkreads, int checkwrites);
/*
Sets whether to check reads or writes. These are initially both set to 1
- ie reads and writes are both checked.

This simply calls MemCheck_SetReadChecking and
MemCheck_SetWriteChecking.
 */
	
	
	void	MemCheck_RestoreChecking( MemCheck_checking checking);
/*
Restores checking status returned by a previous call to
MemCheck_SetReadChecking, MemCheck_SetWriteChecking or
MemCheck_SetChecking.
 */
	
	
	void	MemCheck_SetReadQuitting( int quitread);
/*
quitread=1 - quit after an illegal read of memory.

Also see MemCheck_SetWriteQuitting, MemCheck_SetQuitting.
 */
	
	
	void	MemCheck_SetWriteQuitting( int quitwrite);
/*
quitwrite=1 - quit program after an illegal write of memory.

Also see MemCheck_SetReadQuitting, MemCheck_SetQuitting.
 */
	
	
	void	MemCheck_SetQuitting( int quitread, int quitwrite);
/*
Sets whether to terminate program after a read or write error has been
detected. Initially, quitwrite is 1, quitread is 0 (ie program is
quitted only after a write error).

This simply calls MemCheck_SetReadQuitting and
MemCheck_SetWriteQuitting.
 */
	
	
	void	MemCheck_SetDefaultMallocReadAccess( int readaccess);
/*
readaccess=1	- Subsequent malloc blocks are readable.

readaccess=0	- Subsequent malloc blocks are not readable.

Default read-access is initially 1 (ie reads from malloc blocks are
allowed).

Also see MemCheck_SetDefaultMallocWriteAccess,
MemCheck_SetDefaultMallocAccess.
 */
	
	
	void	MemCheck_SetDefaultMallocWriteAccess( int writeaccess);
/*
writeaccess=1	- Subsequent malloc blocks are writable.
writeaccess=0	- Subsequent malloc blocks are not writable.

Default write-access is initially 1 (ie writes to malloc blocks are
allowed).

Also see MemCheck_SetDefaultMallocReadAccess,
MemCheck_SetDefaultMallocAccess.
 */
	
	
	void	MemCheck_SetDefaultMallocAccess( int readaccess, int writeaccess);
/*
Simply calls MemCheck_SetDefaultMallocReadAccess and
MemCheck_SetDefaultMallocWriteAccess.
 */
	
	
	void	MemCheck_SetDefaultMiscReadAccess( int readaccess);
/*
readaccess=1	- Subsequent misc blocks are readable.

readaccess=0	- Subsequent misc blocks are not readable.

Read-access is initially 1 (ie reads from misc blocks are allowed).

Also see MemCheck_SetDefaultMiscWriteAccess,
MemCheck_SetDefaultMiscAccess.
 */
	
	
	void	MemCheck_SetDefaultMiscWriteAccess( int writeaccess);
/*
writeaccess=1	- Subsequent misc blocks are writable.

writeaccess=0	- Subsequent misc blocks are not writable.

Write-access is initially 1 (ie writes to misc blocks are allowed).

Also see MemCheck_SetDefaultMiscReadAccess,
MemCheck_SetDefaultMiscAccess.
 */
	
	
	void	MemCheck_SetDefaultMiscAccess( int readaccess, int writeaccess);
/*
Simply calls MemCheck_SetDefaultMiscReadAccess and
MemCheck_SetDefaultMiscWriteAccess.
 */
	
	
	void	MemCheck_SetDefaultFlexReadAccess( int readaccess);
/*
readaccess=1	- Subsequent flex blocks are readable.

readaccess=0	- Subsequent flex blocks are not readable.

Read-access is initially 1 (ie reads from flex blocks are allowed).

Also see MemCheck_SetDefaultFlexWriteAccess,
MemCheck_SetDefaultFlexAccess.
 */
	
	
	void	MemCheck_SetDefaultFlexWriteAccess( int writeaccess);
/*
writeaccess=1	- Subsequent flex blocks are writable.

writeaccess=0	- Subsequent flex blocks are not writable.

Write-access is initially 1 (ie writes to flex blocks are allowed).

Also see MemCheck_SetDefaultFlexReadAccess,
MemCheck_SetDefaultFlexAccess.
 */
	
	
	void	MemCheck_SetDefaultFlexAccess( int readaccess, int writeaccess);
/*
Simply calls MemCheck_SetDefaultFlexReadAccess and
MemCheck_SetDefaultFlexWriteAccess.
 */
	
	
	void	MemCheck_SetReadAccessQuitting( int quitreadaccesserror);
/*
quitreadaccesserror=1 - quit program after read of memory set to be
unreadable.

quitreadaccesserror=0 - don't quit program after read of memory set to
be unreadable.

Also see MemCheck_SetWriteAccessQuitting, MemCheck_SetAccessQuitting.
 */
	
	
	void	MemCheck_SetWriteAccessQuitting( int quitwriteaccesserror);
/*
quitwriteaccesserror=1 - quit after write to memory set to be
unwriteable.

quitwriteaccesserror=0 - don't quit program after write of memory set to
be unwriteable.

Also see MemCheck_SetReadAccessQuitting, MemCheck_SetAccessQuitting.
 */
	
	
	void	MemCheck_SetAccessQuitting( int quitreadaccesserror, int quitwriteaccesserror);
/*
Simply calls MemCheck_SetReadAccessQuitting and
MemCheck_SetWriteAccessQuitting.
 */
	
	
	void	MemCheck_SetStoreMallocFunctions( int yesno);
/*
Sets whether function nesting is stored for each subsequent malloc
block.

yesno=1 - store function nesting.

yesno=0 - don't store functio nesting.

Initially, function-nesting is /not/ stored.
 */
	 
	 
	void	MemCheck_RegisterMiscBlock( void* ptr, size_t size);
/*
This will add the specified block to MemCheck's list of read and
writeable blocks of memory.

Useful if (for eg) your program uses RMA memory.

Also see MemCheck_UnRegisterMiscBlock, MemCheck_RegisterFlexBlock.
	 */
	
	
	void	MemCheck_UnRegisterMiscBlock( const void* ptr);
/*
Call when a block of memory is freed. 'ptr' should be identical to the
'ptr' in a previous call to MemCheck_RegisterMiscBlock.

Also see MemCheck_RegisterMiscBlock, MemCheck_UnRegisterFlexBlock.
 */
	
	
	void	MemCheck_RegisterFlexBlock( void** anchor, size_t size);
/*
This will add the specified shifting-heap block to MemCheck's list of
read and writeable blocks of memory.

'*anchor' is assumed to point to the block of memory, and can change
during program execution.

This is for use with shifting-heap memory allocators such as Acorn's
flex library.

Example usage:

{
void*	anchor;

flex_alloc( &anchor, 320);
MemCheck_RegisterFlexBlock( &anchor, 320);
...
flex_extend( &anchor, 400);
MemCheck_ResizeFlexBlock( &anchor, 400);
...
flex_midextend( &anchor, 20, 8);
MemCheck_ResizeFlexBlock( &anchor, 408);
...
flex_free( &anchor);
MemCheck_UnRegisterFlexBlock( &anchor);
}

It is recommended that you use a central set of wrapper-functions for
flex_* functions which call the MemCheck flex-block functions. This will
ensure that MemCheck is always informed of changes to flex blocks.

Also see MemCheck_UnRegisterFlexBlock, MemCheck_RegisterMiscBlock.
 */
	
	
	void	MemCheck_UnRegisterFlexBlock( void** anchor);
/*
Call when a block of memory is freed. 'anchor' should be identical to
the 'anchor' in a previous call to MemCheck_RegisterFlexBlock.

Also see MemCheck_RegisterFlexBlock, MemCheck_ResizeFlexBlock.
 */
	
	
	void	MemCheck_ResizeFlexBlock( void** anchor, size_t newsize);
/*
Call this function when a flex block is resized.

Also see MemCheck_RegisterFlexBlock, MemCheck_UnRegisterFlexBlock.
 */
	
	
	void	MemCheck_SetBlockReadable( void* ptr, int readable);
/*
'ptr' should be pointer to a malloc, misc or flex block known to
MemCheck.

readable=0:	Block is made unreadable (ie attempts to read
		within block are faulted).
		
readable=1:	Makes block readable.

The default read-access for blocks can be set with
MemCheck_SetDefaultMallocReadAccess, MemCheck_SetDefaultMiscReadAccess
and MemCheck_SetDefaultFlexReadAccess.

Also see MemCheck_SetBlockWritable.
 */
	
	
	void	MemCheck_SetBlockWritable( void* ptr, int readable);
/*
'ptr' should be pointer to a malloc, misc or flex block known to
MemCheck.

writable=0:	Block is made unwritable (ie attempts to write
		within block are faulted).

writable=1:	Makes block writableable (the default).

The default write-access for blocks can be set with
MemCheck_SetDefaultMallocWriteAccess, MemCheck_SetDefaultMiscWriteAccess
and MemCheck_SetDefaultFlexWriteAccess.

Also see MemCheck_SetBlockReadable.
 */
	
	
	void	MemCheck_OutputBlocksInfo( void);
/*
Sends information about all known blocks to MemCheck output.
 */
	
	
	void	MemCheck_SetAutoOutputBlocksInfo( int yes);
/*
yes = 1:	Info on all known blocks are output after each MemCheck
		diagnostic, using MemCheck_OutputBlocksInfo.
yes = 0:	Block info not output.

MemCheck initially behaves as though 
MemCheck_SetAutoOutputBlocksInfo( 1) was called - information on all
known blocks /is/ shown after each diagnostic.

This function is provided because the blocks information can make
MemCheck's output very large.
 */
	
	
	int	MemCheck_Printf( const char *fmt, ...);
/*
Behaves exactly like printf, except that sends output to wherever
MemCheck diagnostics are going.

Also see MemCheck_RedirectToStream, MemCheck_RedirectToFilename and
MemCheck_RedirectToFilenamef.
 */
	
	
	void	MemCheck_RedirectToStream( FILE* stream);
/*
Makes subsequent MemCheck diagnostics go to 'stream'.

Also see MemCheck_RedirectToFilename, MemCheck_RedirectToFilenamef.
 */
	
	
	void	MemCheck_RedirectToFilename( const char* filename);
/*
Makes subsequent MemCheck diagnostics go to 'filename'.

Also see MemCheck_RedirectToFilenamef, MemCheck_RedirectToStream.
 */
	
	
	void	MemCheck_RedirectToFilenamef( const char* fmt, ...);
/*
Makes subsequent MemCheck diagnostics go to 'fmt, ...', using
printf-style specification of the filename.

Also see MemCheck_RedirectToFilename, MemCheck_RedirectToStream.
 */


#else

/*
when compilation is without MemCheck_MEMCHECK defined, all MemCheck
calls are removed using the following macros:
 */

	#define	MemCheck_Init()
	#define	MemCheck_InitNoDebug()
	
	#define	MemCheck_RegisterArgs( argc, argv)
	#define	MemCheck_InterceptSCLStringFunctions()
	
	#define	MemCheck_SetReadChecking( checkreads)	0
	#define	MemCheck_SetWriteChecking( checkwrites)	0
	#define	MemCheck_SetChecking( checkreads, checkwrites)	0
	#define	MemCheck_RestoreChecking( checking)
	
	#define	MemCheck_SetReadQuitting( quitread)
	#define	MemCheck_SetWriteQuitting( quitwrite)
	#define	MemCheck_SetQuitting( quitread, quitwrite)
	
	#define	MemCheck_SetDefaultMallocReadAccess( readaccess)
	#define	MemCheck_SetDefaultMallocWriteAccess( writeaccess)
	#define	MemCheck_SetDefaultMallocAccess( readaccess, writeaccess)
	#define	MemCheck_SetDefaultMiscReadAccess( readaccess)
	#define	MemCheck_SetDefaultMiscWriteAccess( writeaccess)
	#define	MemCheck_SetDefaultMiscAccess( readaccess, writeaccess)
	#define	MemCheck_SetDefaultFlexReadAccess( readaccess)
	#define	MemCheck_SetDefaultFlexWriteAccess( writeaccess)
	#define	MemCheck_SetDefaultFlexAccess( readaccess, writeaccess)
	
	#define	MemCheck_SetReadAccessQuitting( quitreadaccesserror)
	#define	MemCheck_SetWriteAccessQuitting( quitwriteaccesserror)
	#define	MemCheck_SetAccessQuitting( quitreadaccesserror, quitwriteaccesserror)
	
	#define	MemCheck_SetStoreMallocFunctions( yesno)
	
	#define	MemCheck_RegisterMiscBlock( ptr, size)
	#define	MemCheck_UnRegisterMiscBlock( ptr)
	
	#define	MemCheck_RegisterFlexBlock( anchor, size)
	#define	MemCheck_UnRegisterFlexBlock( anchor)
	#define	MemCheck_ResizeFlexBlock( anchor, newsize)
	
	#define	MemCheck_SetBlockReadable( ptr, readable)
	#define	MemCheck_SetBlockWritable( ptr, writable)
	
	#define	MemCheck_OutputBlocksInfo()
	#define	MemCheck_SetAutoOutputBlocksInfo( yes)
	
	#define	MemCheck_Printf (1) ? 0 : printf
	
	#define	MemCheck_RedirectToStream( stream)
	#define	MemCheck_RedirectToFilename( filename)
	#define	MemCheck_RedirectToFilenamef (1) ? 0 : printf
	
#endif



#ifdef __cplusplus
	}
#endif

#endif
