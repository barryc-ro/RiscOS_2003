#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "Desk.Debug.h"

#ifdef MemCheck_MEMCHECK
	#include "MemCheck:MemCheck.h"
#endif

#include "ModMalloc.ModMalloc.h"


typedef struct	{
	int	size;
	void*	prev;
	}
	ModMalloc_header;

static ModMalloc_header*	ModMalloc_lastblock = NULL;



#ifdef MemCheck_MEMCHECK
	#pragma -c0
	/* We don't want MemCheck checking accesses from within here...	*/
#endif


void	ModMalloc_FreeDownTo( void* first)
	{
	ModMalloc_header*	firstheader = (first) ? ((ModMalloc_header*) first) - 1 : NULL;
	ModMalloc_header*	header;
	Desk_Debug_Printf( "ModMalloc_FreeAll called\n");
	for	(
		header = ModMalloc_lastblock;
		header;
		header = header->prev
		)
		{
		Desk_Debug_Printf( "ModMalloc_FreeAll: freeing 0x%p\n", header+1);
		ModMalloc_Free( header+1);
		if ( header==firstheader)	break;
		}
	Desk_Debug_Printf( "ModMalloc_FreeAll finished\n");
	}


void	ModMalloc_FreeAll( void)
	{
	ModMalloc_FreeDownTo( NULL);
	}


void*	ModMalloc_Malloc( size_t size)
	{
	ModMalloc_header*	header;
	_kernel_oserror*	e;
	/*
	static int		inited = 0;
	
	if (!inited)	{
		inited = 1;
		atexit( ModMalloc_FreeAll);
		}
	*/
	size += sizeof( ModMalloc_header);
	e = _swix( OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, size, &header);
	if (e)	{
		Desk_Debug_Printf( "ModMalloc_Malloc can't allocate memory\n");
		return NULL;
		}
	
	header->prev	= ModMalloc_lastblock;
	header->size	= size;
	ModMalloc_lastblock = header;
	
	#ifdef MemCheck_MEMCHECK
		MemCheck_RegisterMiscBlock( header+1, size);
	#endif
	return (void*) (header+1);
	}



void	ModMalloc_Free( void* ptr)
	{
	ModMalloc_header*	header = ( (ModMalloc_header*) ptr) - 1;
	ModMalloc_header*	last = header->prev;
	_kernel_oserror*	e = _swix( OS_Module, _IN(0)|_IN(2), 7, header);
	if (e)	{
		Desk_Debug_Printf( "ModMalloc_Free 0x%p failed\n", ptr);
		return;
		}
	
	ModMalloc_lastblock = last;
	#ifdef MemCheck_MEMCHECK
		MemCheck_UnRegisterMiscBlock( ptr);
	#endif
	}


#define	ModMalloc_MIN( x, y)	( (x<y) ? x : y)

void*	ModMalloc_Realloc( void* ptr, size_t newsize)
	{
	ModMalloc_header*	header = ( (ModMalloc_header*) ptr) - 1;
	void*	newptr = ModMalloc_Malloc( newsize);
	if (!newptr)	{
		Desk_Debug_Printf( "ModMalloc_Realloc failed\n");
		return NULL;
		}
	memcpy( newptr, ptr, ModMalloc_MIN( header->size, newsize));
	ModMalloc_Free( ptr);
	/*
	Don't need to call MeMCheck functions 
	here - done by ModMalloc_Malloc/Free
	 */
	return newptr;
	}


void*	ModMalloc_Calloc( size_t n, size_t size)
	{
	void*	ptr = ModMalloc_Malloc( n*size);
	if (!ptr)	{
		Desk_Debug_Printf( "ModMalloc_Calloc failed\n");
		return ptr;
		}
	memset( ptr, 0, n*size);
	/*
	Don't need to call MeMCheck functions 
	here - done by ModMalloc_Malloc/Free
	 */
	return ptr;
	}
