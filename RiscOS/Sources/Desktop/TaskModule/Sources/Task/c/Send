#include "swis.h"
#include "kernel.h"

#include "Desk/WimpSWIs.h"
#include "Desk/Debug.h"
#include "Desk/DeskMem.h"
#include "Desk/Event.h"
#include "Desk/LinkList.h"

#include "^.Interface.h"
#include "^.Send.h"
#include "^.Task.h"



typedef void*	TaskModule_messagehandler;

typedef struct
{
	Desk_linklist_header		header;
	Desk_event_type			eventtype;
	Desk_message_block		message;
	Desk_task_handle		destinee;
	Desk_icon_handle		icon;
	TaskModule_messagehandler	handler;
	void*				reference;
	Desk_bool			sent;
	
	union
	{
		int	value;
		struct
		{
			unsigned int	pollword	: 1;
			unsigned int	null		: 1;
			unsigned int	messages	: 1;
		}
		data;
	}
	handlers;	// Used to keep track of which events need to be released.
}
TaskModule_messageblock;



static void	FreeMessage( TaskModule_messageblock* m);


static Desk_bool	NullHandler( Desk_event_pollblock* event, void* reference)
	{
	TaskModule_messageblock*	m	= (TaskModule_messageblock*) reference;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Send_NullHandler: freeing message at 0x%p\n", m);
	Desk_Debug_Printf( Desk_error_PLACE "action = %i\n", m->message.header.action);
	FreeMessage( m);
	
	return Desk_bool_FALSE;
	
	Desk_UNUSED( event);
	}







void		TaskModule_Send_CallHandler( Desk_event_type type, Desk_message_block* message, void* pw, TaskModule_messagehandler handler);
/*
Assembler veneer for calling handler function in SVC mode, and setting r12=pw.
 */




static Desk_bool	MessageHandler( Desk_event_pollblock* event, void* reference)
{
	TaskModule_messageblock*	m	= (TaskModule_messageblock*) reference;
	
	Desk_Debug3_Printf( Desk_error_PLACE "TaskModule_Send_MessageHandler called\n");
	
	if	(
			(
			event->type != Desk_event_ACK 
			&& event->data.message.header.yourref != 0 
			&& event->data.message.header.yourref == m->message.header.myref
			)
		||
			(
			event->type == Desk_event_ACK
			&& event->data.message.header.myref == m->message.header.myref
			)
		)
	{
		/* A reply to message in 'm'.	*/
		
		if ( m->handler)	{
			Desk_Debug_Printf( Desk_error_PLACE "Calling external message-handler at 0x%p, pw=0x%p\n", m->handler, m->reference);
			Desk_Debug_Printf( Desk_error_PLACE "Message is type %i\n", event->type);
			TaskModule_Send_CallHandler( event->type, &event->data.message, m->reference, m->handler);
			Desk_Debug_Printf( Desk_error_PLACE "Called external message-handler\n");
			}
		else	{
			Desk_Debug_Printf( Desk_error_PLACE "m->handler = 0 (myref=%i)\n", m->message.header.myref);
			}
		
		FreeMessage( m);
		
		return Desk_bool_TRUE;
	}
	
	return Desk_bool_FALSE;
}




static Desk_bool	NonZeroPollWordHandler( Desk_event_pollblock* event, void* reference)
{
	TaskModule_messageblock*	m	= (TaskModule_messageblock*) reference;
	Desk_Debug_Printf( Desk_error_PLACE "NonZeroPollWordHandler called, messageblock = 0x%p\n", m);
	
	if ( m->sent)	Desk_Debug_Printf( Desk_error_PLACE "m->sent = %i - should never happen\n", m->sent);
	
	if ( !m->sent)
	{	/* This message hasn't been sent yet...	*/
		
		Desk_Debug_Printf( Desk_error_PLACE "Calling Wimp_SendMessage. Message data is:\n");
		Desk_Debug_PrintMemory( &m->message, sizeof m->message);
		
		{
			Desk_os_error*	e = _swix( Wimp_SendMessage, _INR(0,3), m->eventtype, &m->message,  m->destinee, m->icon);
			Desk_Debug_Printf( Desk_error_PLACE "Wimp_SendMessage returned %p\n", e);
			if ( e)	Desk_Debug_Printf( Desk_error_PLACE "This is os error %i, '%s'\n", e->errnum, e->errmess);
		}
		
		/* m->event is updated to contain yourref.	*/
		Desk_Debug_Printf( Desk_error_PLACE "myref=%i\n", m->message.header.myref);
		
		TaskModule_globalblock.pollword--;
		m->sent	= Desk_bool_TRUE;
		
		Desk_Debug_Printf( Desk_error_PLACE "pollword = %i\n", TaskModule_globalblock.pollword);
		
		Desk_Event_Release( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollWordHandler, m);
		m->handlers.data.pollword	= 0;
		
		if ( m->eventtype == Desk_event_USERMESSAGERECORDED)
		{
			Desk_Event_Claim( Desk_event_NULL, Desk_event_ANY, Desk_event_ANY, NullHandler, m);
			Desk_Event_MessagesClaim( MessageHandler, m);
			m->handlers.data.null		= 1;
			m->handlers.data.messages	= 1;
		}
		else
		{	/* Not expecting a reply...	*/
			Desk_Debug_Printf( Desk_error_PLACE "Freeing linklist item\n");
			FreeMessage( m);
		}
	}
	Desk_Debug_Printf( Desk_error_PLACE "NonZeroPollWordHandler returning\n");
	return Desk_bool_FALSE;
	Desk_UNUSED( event);
}




typedef union	{
	int	value;
	struct	{
		unsigned int	use_eventtype	:  1;
		unsigned int	unused1to31	: 31;
		}
		data;
	}
	send_flags;

void	TaskModule_Send_SendMessage( _kernel_swi_regs* r, void* pw)
	{
	int				flags0		= (int)				r->r[0];
	Desk_message_block*		message		= (Desk_message_block*) 	r->r[1];
	Desk_task_handle		destinee	= (Desk_task_handle)		r->r[2];
	Desk_icon_handle		icon		= (Desk_icon_handle)		r->r[3];
	TaskModule_messagehandler	handler		= (TaskModule_messagehandler)	r->r[4];
	void*				reference	= (void*)			r->r[5];
	Desk_event_type			eventtype	= (Desk_event_type)		r->r[6];
	
	TaskModule_block*		app	= &TaskModule_globalblock;
	TaskModule_messageblock*	m	= Desk_DeskMem_MallocType( TaskModule_messageblock);
	send_flags			flags;
	
	flags.value = flags0;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Send_SendMessage called\n");
	
	if ( flags.data.use_eventtype)	{
		m->eventtype	= eventtype;
		if ( m->eventtype != Desk_event_USERMESSAGERECORDED)	{
			handler		= NULL;
			reference	= NULL;
			}
		}
	else	m->eventtype = (handler) ? Desk_event_USERMESSAGERECORDED : Desk_event_USERMESSAGE;
	
	m->message.header.myref		= 0;		/* So we know we haven't sent it yet...	*/
	m->message			= *message;
	m->destinee			= destinee;
	m->icon				= icon;
	m->handler			= handler;
	m->reference			= reference;
	m->sent				= Desk_bool_FALSE;
	m->handlers.value		= 0;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Send_SendMessage called\n");
	
	{	// Disable interrupts while Desk_Event_Claim updates its list of event claiments.
		int	irqoff = _kernel_irqs_disabled();
		if ( !irqoff)	_kernel_irqs_off();
		Desk_Event_Claim( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollWordHandler, m);
		m->handlers.data.pollword	= 1;
		app->pollword++;
		if ( !irqoff)	_kernel_irqs_on();
	}
	
	
	Desk_Debug_Printf( Desk_error_PLACE "pollword = %i\n", app->pollword);
	
	return;
	
	Desk_UNUSED( pw);
	}


static void	FreeMessage( TaskModule_messageblock* m)
	{
	if ( m->handlers.data.null)	Desk_Event_Release( Desk_event_NULL, Desk_event_ANY, Desk_event_ANY, NullHandler, m);
	if ( m->handlers.data.pollword)	Desk_Event_Release( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollWordHandler, m);
	if ( m->handlers.data.messages)	Desk_Event_MessagesRelease( MessageHandler, m);
	Desk_DeskMem_Free( m);
	}

