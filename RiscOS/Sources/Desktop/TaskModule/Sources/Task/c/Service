#include <string.h>

#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.LinkList.h"
#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Event.h"
#include "Desk.BackTrace.h"

#include "^.Task.h"
#include "^.Service.h"
#include "^.Module.h"



typedef struct	{
	Desk_linklist_header	header;
	int			service;
	Desk_task_handle	task;
	}
	TaskModule_service_block;


typedef struct	{
	Desk_linklist_header		header;
	TaskModule_service_block*	info;
	_kernel_swi_regs		registers;
	}
	TaskModule_servicewaiting_block;




Desk_bool	TaskModule_Service_NonZeroPollWordHandler( Desk_event_pollblock* event, void* reference)
	{
	TaskModule_block*			app	= (TaskModule_block*) reference;
	TaskModule_servicewaiting_block*	s;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_SendServiceMessages called\n");
	
	for	(
		s = Desk_LinkList_FirstItem( &app->service.waiting);
		s;
		)
		{
		TaskModule_servicewaiting_block*	next = Desk_LinkList_NextItem( &s->header);
		Desk_message_block			message;
		
		Desk_Error2_Try	{
			message.header.size	= 15*4;
			message.header.yourref	= 0;
			message.header.action	= (Desk_message_action) TaskModule_Message_Message_Service;
			
			* (_kernel_swi_regs*) &message.data	= s->registers;
			
			Desk_Debug_Printf( Desk_error_PLACE "Sending service call %i to task %x\n", s->registers.r[1], s->info->task);
			
			Desk_Error2_CheckOS(
				_swix( Wimp_SendMessage, _INR(0,3),
					Desk_event_USERMESSAGE,
					&message,
					s->info->task,
					0
					)
				);
			}
		Desk_Error2_Catch	{
			}
		Desk_Error2_EndCatch
		
		Desk_LinkList_Unlink( &app->service.waiting, &s->header);
		Desk_DeskMem_Free( s);
		app->pollword--;
		s = next;
		}
	
	return Desk_bool_FALSE;
	Desk_UNUSED( event);
	}





void	TaskModule_Service_Register( int flags, int service, Desk_task_handle task)
	{
	TaskModule_block*		app	= &TaskModule_globalblock;
	TaskModule_service_block*	s	= NULL;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_Register called\n");
	
	Desk_Error2_Try	{
		s = Desk_DeskMem_MallocType( TaskModule_service_block);
		s->service	= service;
		s->task		= task;
		Desk_LinkList_AddToTail( &app->service.registered, &s->header);
		Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_Register: list length is %i\n", Desk_LinkList_ListLength( &app->service.registered));
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( s);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_Register returning\n");
	Desk_UNUSED( flags);
	}




void	TaskModule_Service_DeRegister( int flags, int service_no, Desk_task_handle task)
	{
	TaskModule_block*		app	= &TaskModule_globalblock;
	TaskModule_service_block*	service	= NULL;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_DeRegister called for service %i, task 0x%x\n",
		service_no, task
		);
	
	#ifdef Desk_DEBUG
		Desk_BackTrace_OutputToFFunctionWithPrefix( Desk_Debug_PrintfRef, NULL, Desk_error_PLACE);
	#endif
	
	for	(
		service = Desk_LinkList_FirstItem( &app->service.registered);
		service;
		)
		{
		TaskModule_service_block*	next = Desk_LinkList_NextItem( &service->header);
		
		if ( (service==0 || (service->service == service_no)) && (service->task == task))	{
			TaskModule_servicewaiting_block*	wait;
			
			Desk_LinkList_Unlink( &app->service.registered, &service->header);
			Desk_DeskMem_Free( service);
			
			Desk_Debug_Printf( Desk_error_PLACE "Freeing all waiting messages associated with this service and task\n");
			
			for	(
				wait = Desk_LinkList_FirstItem( &app->service.waiting);
				wait;
				)
				{
				TaskModule_servicewaiting_block*	next = Desk_LinkList_NextItem( &wait->header);
				if ( wait->info == service)	{
					Desk_LinkList_Unlink( &app->service.waiting, &wait->header);
					Desk_DeskMem_Free( wait);
					app->pollword--;
					}
				wait = next;
				}
			}
		
		service = next;
		}
	
	Desk_UNUSED( flags);
	}



#define	Service_WimpCloseDown 0x53


void	TaskModule_Service_ServiceHandler( int service_no, _kernel_swi_regs *r, void *pw)
	{
	TaskModule_block*		app	= &TaskModule_globalblock;
	TaskModule_service_block*	service;
	
	#ifdef Desk_DEBUG
		if ( service_no==1)	Desk_Debug_Printf( Desk_error_PLACE "Service 1 recived.\n");
	#endif
	
	if ( service_no == Service_WimpCloseDown && Desk_LinkList_FirstItem( &app->service.registered))	{
		Desk_task_handle	task = r->r[2];
		TaskModule_Service_DeRegister( 0, 0, task);
		}
	
	for	(
		service = Desk_LinkList_FirstItem( &app->service.registered);
		service;
		service = Desk_LinkList_NextItem( &service->header)
		)
		{
		if ( service_no == service->service)	{
			TaskModule_servicewaiting_block*	waiting = Desk_DeskMem_MallocType( TaskModule_servicewaiting_block);
			
			Desk_Debug_Printf( Desk_error_PLACE "Received service call %i - storing for task to send\n", service_no);
			
			waiting->info		= service;
			waiting->registers	= *r;
			
			Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_Register: waiting list length is %i, pollword=%i\n", 
				Desk_LinkList_ListLength( &app->service.waiting),
				app->pollword
				);
			
			Desk_LinkList_AddToTail( &app->service.waiting, &waiting->header);
			app->pollword++;
			
			Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Service_Register: waiting list length is %i, pollword=%i\n", 
				Desk_LinkList_ListLength( &app->service.waiting),
				app->pollword
				);
			}
		}
	
	Desk_UNUSED( pw);
	}
