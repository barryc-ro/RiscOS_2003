#include <stddef.h>
#include "kernel.h"

#include "Desk.Debug.h"
#include "Desk.Event.h"
#include "Desk.DeskMem.h"
#include "Desk.WimpSWIs.h"

#include "ModMalloc.ModMalloc.h"

#include "^.Task.h"
#include "^.Service.h"

#include "StartTask.h"
#include "Send.h"
#include "FRedraw.h"



TaskModule_block	TaskModule_globalblock;


static Desk_bool	QuitHandler( Desk_event_pollblock* event, void* reference)
	{
	if ( event->data.message.header.action == Desk_message_QUIT)	{
		TaskModule_globalblock.quit = Desk_bool_TRUE;
		Desk_Debug_Printf( Desk_error_PLACE "QuitHandler detected message_QUIT\n");
		}
	return Desk_bool_FALSE;
	Desk_UNUSED( reference);
	}




static Desk_bool	NonZeroPollwordHandler( Desk_event_pollblock* event, void* reference)
{
	Desk_Debug_Printf( Desk_error_PLACE "Default nonzero pollword handler called. pollword = %i\n", TaskModule_globalblock.pollword);
	TaskModule_globalblock.pollword	= 0;
	return Desk_bool_TRUE;
	Desk_UNUSED( event);
	Desk_UNUSED( reference);
}


Desk_os_error*	TaskModule_Task( const char *args )
	{
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Task called, taskhandle=%i\n", Desk_Event_taskhandle);
	
	Desk_Debug_Printf( Desk_error_PLACE "Current stack chunk is:\n");
	Desk_Debug_PrintMemory( _kernel_current_stack_chunk(), sizeof( _kernel_stack_chunk));
	
	#ifdef Desk_DEBUG
		{
		void*	p = ModMalloc_Malloc( 32);
		ModMalloc_Free( p);
		}
	#endif
	
	if ( Desk_Event_taskhandle == -1 )	{
		
		TaskModule_globalblock.quit	= Desk_bool_FALSE;
			{
			int	mess[] = { 0};
			Desk_Event_Initialise3( "TaskModule", 310, mess);
			Desk_Debug_Printf( Desk_error_PLACE "Task handle = 0x%x\n", Desk_Event_taskhandle);
			}
		
		Desk_Error2_Try	{
			Desk_Event_Claim( Desk_event_USERMESSAGE, Desk_event_ANY, Desk_event_ANY, QuitHandler, NULL);
			Desk_Event_Claim( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollwordHandler, NULL);
			/*
			We have a default nonzero pollword handler so that code that 
			has claimed a new event from within a SWI handler
			can increment the pollmask so that the new event mask is used.
			 */
			
			while ( !TaskModule_globalblock.quit)	{
				Desk_Wimp_Poll3( Desk_Event_mask, &Desk_Event_lastevent, &TaskModule_globalblock.pollword);
				Desk_Debug3_Printf( Desk_error_PLACE "Received event %i\n", Desk_Event_lastevent.type);
				Desk_Event_Process( &Desk_Event_lastevent);
				Desk_Debug3_Printf( Desk_error_PLACE "Processed event\n");
				}
			
			Desk_Debug_Printf( Desk_error_PLACE "Calling CloseDown, taskhandle=%i\n", Desk_Event_taskhandle);
			Desk_Event_CloseDown();
			Desk_Debug_Printf( Desk_error_PLACE "Called CloseDown, taskhandle=%i\n", Desk_Event_taskhandle);
			}
		
		Desk_Error2_Catch	{
			Desk_Debug_DescribeError2( &Desk_Error2_globalblock);
			Desk_Event_CloseDown();
			}
		Desk_Error2_EndCatch
		
		}
	
	return NULL;
	
	Desk_UNUSED( args );
	}


