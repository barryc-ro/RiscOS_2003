#include <stddef.h>
#include "kernel.h"

#include "Desk.Debug.h"
#include "Desk.Event.h"
#include "Desk.DeskMem.h"
#include "Desk.WimpSWIs.h"

#include "ModMalloc.ModMalloc.h"

#include "^.Task.h"
#include "^.Service.h"

#include "StartTask.h"
#include "Send.h"
#include "FRedraw.h"



TaskModule_block	TaskModule_globalblock;


static Desk_bool	QuitHandler( Desk_event_pollblock* event, void* reference)
	{
	if ( event->data.message.header.action == Desk_message_QUIT)	{
		TaskModule_globalblock.quit = Desk_bool_TRUE;
		Desk_Debug_Printf( Desk_error_PLACE "QuitHandler detected message_QUIT\n");
		}
	return Desk_bool_FALSE;
	Desk_UNUSED( reference);
	}




Desk_os_error*	TaskModule_Task( const char *args )
	{
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Task called, taskhandle=%i\n", Desk_Event_taskhandle);

	Desk_Debug_Printf( Desk_error_PLACE "Current stack chunk is:\n");
	Desk_Debug_PrintMemory( _kernel_current_stack_chunk(), sizeof( _kernel_stack_chunk));

	#ifdef Desk_DEBUG
		{
		void*	p = ModMalloc_Malloc( 32);
		ModMalloc_Free( p);
		}
	#endif

	if ( Desk_Event_taskhandle == -1 )	{

		TaskModule_globalblock.quit	= Desk_bool_FALSE;
			{
			int	mess[] = { 0};
			Desk_Event_Initialise3( "TaskModule", 310, mess);
			Desk_Debug_Printf( Desk_error_PLACE "Task handle = 0x%x\n", Desk_Event_taskhandle);
			}

		Desk_Error2_Try	{
			Desk_Event_Claim( Desk_event_USERMESSAGE, Desk_event_ANY, Desk_event_ANY, QuitHandler, NULL);

			/* 1998-11-02: BAL
			 * Some modules are calling TaskModule_SendMessage before the task section starts. This means that some
			 * calls to Desk_Event_Claim are made before Desk_Event_Initialise is called; Desk does not like this and
			 * the events registered before Desk_Event_Initialise is called are masked out, so we need so alter the
			 * event mask to get things working.
			 */


			/*
			Desk_Event_Claim( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollwordHandler, NULL);
			*/
			/*
			 * We have a default nonzero pollword handler so that code that has claimed a new event from within a SWI
			 * handler can increment the pollmask so that the new event mask is used.
			 */

			/* 1998-11-12: BAL
			 * The comment above caught me out and I broke things, so I'll try to explain it a little better...
			 * The default/dummy non-zero pollword handler was installed (and never removed) so that PollWordNonZero
			 * events were never masked out.  If we didn't do this then if one of our SWIs was called which needed to
			 * communicate with the task using a PollWordNonZero event, and we didn't already have any PollWordNonZero
			 * handlers registered (thus the event would be masked out), then we wouldn't get the event until we next
			 * called EventPoll, since that is when the new event mask would start being used.  Thus you'd need some
			 * other event to 'kick' the PollWordNonZero event.
			 *
			 * I think the idea of a default/dummy handler is messy, so instead I just ensure that PollWordNonZero
			 * is never masked out by setting the poll mask immediately before each call to Wimp_Poll.
			 */

			while ( !TaskModule_globalblock.quit)	{
				Desk_Event_mask.data.nonzeropollword = Desk_bool_FALSE;
				Desk_Event_mask.data.r3ispollwordptr = Desk_bool_TRUE;
				Desk_Wimp_Poll3( Desk_Event_mask, &Desk_Event_lastevent, &TaskModule_globalblock.pollword);
				Desk_Debug3_Printf( Desk_error_PLACE "Received event %i\n", Desk_Event_lastevent.type);
				Desk_Event_Process( &Desk_Event_lastevent);
				Desk_Debug3_Printf( Desk_error_PLACE "Processed event\n");
				}

			Desk_Debug_Printf( Desk_error_PLACE "Calling CloseDown, taskhandle=%i\n", Desk_Event_taskhandle);
			Desk_Event_CloseDown();
			Desk_Debug_Printf( Desk_error_PLACE "Called CloseDown, taskhandle=%i\n", Desk_Event_taskhandle);
			}

		Desk_Error2_Catch	{
			Desk_Debug_DescribeError2( &Desk_Error2_globalblock);
			Desk_Event_CloseDown();
			}
		Desk_Error2_EndCatch

		}

	return NULL;

	Desk_UNUSED( args );
	}


