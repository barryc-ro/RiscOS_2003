#include <limits.h>
#include <string.h>

#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.LinkList.h"
#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Event.h"
#include "Desk.BackTrace.h"

#include "^.Task.h"
#include "^.UpCall.h"
#include "CMHGHead.h"

#define UpCallV 0x1d

typedef struct
{
    Desk_linklist_header  header;
    int                   upcall;
    int                   number_claimants;
} upcall_info_block;


typedef struct
{
    Desk_linklist_header  header;

    union
    {
        struct
        {
            unsigned int  preserve_order : 1;
            unsigned int                 : 31;
        }
        bits;

        unsigned int      value;
    }
    flags;

    int                   upcall;
    Desk_task_handle      task;
    upcall_info_block *   info;
}
TaskModule_upcall_block;


typedef struct
{
    Desk_linklist_header       header;
    TaskModule_upcall_block *  info;
    _kernel_swi_regs           registers;
}
TaskModule_upcallwaiting_block;


#define Message_UpCall            0x4d301
#define UPCALL_FAST_FILTER_LIMIT  288
#define UNSIGNED_INT_BITS         (sizeof (unsigned int) * CHAR_BIT)

static Desk_linklist_header  waiting_messages         = { NULL, NULL };
static Desk_linklist_header  ordered_waiting_messages = { NULL, NULL };
static Desk_linklist_header  upcall_blocks            = { NULL, NULL };
static Desk_linklist_header  upcall_info              = { NULL, NULL };
static int                   upcall_count = 0;
static unsigned int          upcall_mask[UPCALL_FAST_FILTER_LIMIT / UNSIGNED_INT_BITS];

static void  FreeWaitingMessage (TaskModule_upcallwaiting_block *  wait);
static void  FreeOrderedWaitingMessage (TaskModule_upcallwaiting_block *  wait);
static void  RemoveUpCall (TaskModule_upcall_block *  upcall,
                           void *                     pw);




static Desk_bool  OrderedNonZeroPollWordHandler (Desk_event_pollblock *  event,
                                                 void *                  reference)
{
    Desk_linklist_header *            waiting = (Desk_linklist_header*) reference;
    TaskModule_upcallwaiting_block *  upcall;

    Desk_Debug_Printf (Desk_error_PLACE "OrderedNonZeroPollWordHandler called\n");

    upcall = Desk_LinkList_FirstItem (waiting);
    if (upcall)
    {
        Desk_message_block  message;

        Desk_Error2_Try
        {
            message.header.size     = 15*4;
            message.header.yourref  = 0;
            message.header.action   = (Desk_message_action) Message_UpCall;

            * (_kernel_swi_regs*) &message.data = upcall->registers;

            Desk_Debug_Printf (Desk_error_PLACE "Sending UpCall %i to task %x\n",
                               upcall->registers.r[1],
                               upcall->info->task);

            _swix (Wimp_SendMessage,
                   _INR (0 ,3),

                   Desk_event_USERMESSAGE,
                   &message,
                   upcall->info->task,
                   0);
        }
        Desk_Error2_Catch
        {
        }
        Desk_Error2_EndCatch

        FreeOrderedWaitingMessage (upcall);
        return Desk_bool_TRUE;
    }

    return Desk_bool_FALSE;
    Desk_UNUSED (event);
}




static void  FreeOrderedWaitingMessage (TaskModule_upcallwaiting_block *  wait)
{
    Desk_LinkList_Unlink (&ordered_waiting_messages,
                          &wait->header);

    if (Desk_LinkList_ListLength (&ordered_waiting_messages) == 0)
    {
        Desk_Event_Release (Desk_event_NONZEROPOLLWORD,
                            Desk_event_ANY,
                            Desk_event_ANY,
                            OrderedNonZeroPollWordHandler,
                            &ordered_waiting_messages);
    }
    Desk_DeskMem_Free (wait);
    TaskModule_globalblock.pollword--;
}




static Desk_bool  NonZeroPollWordHandler (Desk_event_pollblock *  event,
                                          void *                  reference)
{
    TaskModule_upcallwaiting_block *  upcall   = (TaskModule_upcallwaiting_block *) reference;
    Desk_message_block                message;

    Desk_Debug_Printf (Desk_error_PLACE "NonZeroPollWordHandler called\n");

    Desk_Error2_Try
    {
        message.header.size    = 15*4;
        message.header.yourref = 0;
        message.header.action  = (Desk_message_action) Message_UpCall;

        * (_kernel_swi_regs*) &message.data = upcall->registers;

        Desk_Debug_Printf (Desk_error_PLACE "Sending UpCall call %i to task %x\n",
                           upcall->registers.r[1],
                           upcall->info->task);

        _swix (Wimp_SendMessage,
               _INR (0, 3),

               Desk_event_USERMESSAGE,
               &message,
               upcall->info->task,
               0);
    }
    Desk_Error2_Catch
    {
    }
    Desk_Error2_EndCatch

    FreeWaitingMessage (upcall);

    return Desk_bool_FALSE;
    Desk_UNUSED (event);
}




static void  FreeWaitingMessage (TaskModule_upcallwaiting_block *  wait)
{
    Desk_LinkList_Unlink (&waiting_messages,
                          &wait->header);

    Desk_Event_Release (Desk_event_NONZEROPOLLWORD,
                        Desk_event_ANY,
                        Desk_event_ANY,
                        NonZeroPollWordHandler,
                        wait);

    Desk_DeskMem_Free (wait);
    TaskModule_globalblock.pollword--;
}




void  TaskModule_UpCall_Register (_kernel_swi_regs *  r,
                                  void *              pw)
{
    unsigned int                       flags           = (unsigned int) r->r[0];
    int                                upcall_no       = (int) r->r[1];
    Desk_task_handle                   task            = (Desk_task_handle) r->r[2];
    TaskModule_upcall_block *volatile  upcall_volatile = NULL;
    TaskModule_upcall_block *          upcall;
    upcall_info_block *                info;
    upcall_info_block *volatile        info_volatile   = NULL;

    Desk_Debug_Printf (Desk_error_PLACE "TaskModule_UpCall_Register called\n");

    Desk_Error2_Try
    {
        int  mask_index     = upcall_no / UNSIGNED_INT_BITS;
        int  mask_bit       = upcall_no % UNSIGNED_INT_BITS;

        upcall              = Desk_DeskMem_MallocType (TaskModule_upcall_block);
        upcall_volatile     = upcall;
        upcall->flags.value = flags;
        upcall->upcall      = upcall_no;
        upcall->task        = task;

        if (mask_index < sizeof (upcall_mask) / sizeof (upcall_mask[0]))
        {
            upcall_mask[mask_index] |= 1 << mask_bit;
        }

        Desk_LinkList_AddToTail (&upcall_blocks,
                                 &upcall->header);

        if (upcall_count++ == 0)
        {
            /* First UpCall to be claimed, so hook onto the vector */
            Desk_Error2_CheckOS (_swix (OS_Claim,
                                        _INR (0, 2),

                                        UpCallV,
                                        TaskModule_UpCall_UpCallEntry,
                                        pw));
        }

        /* Check whether UpCall is already being claimed */
        info = Desk_LinkList_FirstItem (&upcall_info);
        while (info && info->upcall != upcall_no)
        {
            info = Desk_LinkList_NextItem (&info->header);
        }

        if (info)
        {
            /* UpCall is already being claimed - increment usage count */
            info->number_claimants++;
        }
        else
        {
            /* UpCall is not already being claimed - add new info block */
            info                   = Desk_DeskMem_MallocType (upcall_info_block);
            info_volatile          = info;
            info->upcall           = upcall_no;
            info->number_claimants = 1;

            Desk_LinkList_AddToTail (&upcall_info,
                                     &info->header);
        }

        upcall->info = info;
    }

    Desk_Error2_Catch
    {
        Desk_DeskMem_Free ((void *) upcall_volatile);
        Desk_DeskMem_Free ((void *) info_volatile);
        Desk_Error2_ReThrow ();
    }
    Desk_Error2_EndCatch

    Desk_Debug_Printf (Desk_error_PLACE "TaskModule_UpCall_Register returning\n");

    Desk_UNUSED (flags);
    Desk_UNUSED (pw);
}




void  TaskModule_UpCall_DeRegister (_kernel_swi_regs *  r,
                                    void *              pw)
{
    int                        flags     = (int) r->r[0];
    int                        upcall_no = (int) r->r[1];
    Desk_task_handle           task      = (Desk_task_handle) r->r[2];
    TaskModule_upcall_block *  upcall    = NULL;
    TaskModule_upcall_block *  next;

    Desk_Debug_Printf (Desk_error_PLACE "TaskModule_UpCall_DeRegister called for UpCall %i, task 0x%x\n",
                       upcall_no,
                       task);

    #ifdef Desk_DEBUG
        Desk_BackTrace_OutputToFFunctionWithPrefix (Desk_Debug_PrintfRef,
                                                    NULL,
                                                    Desk_error_PLACE);
    #endif

    upcall = Desk_LinkList_FirstItem (&upcall_blocks);
    while (upcall)
    {
        next = Desk_LinkList_NextItem (&upcall->header);

        if ((upcall_no == 0 || upcall->upcall == upcall_no) && upcall->task == task)
        {
            RemoveUpCall (upcall, pw);

            if (upcall_no != 0)
            {
                /* Specific UpCall removed.  Tasks are only allowed to regsiter
                 * a given UpCall once, so we can stop now.
                 */
                break;
            }
        }

        upcall = next;
    }

    Desk_UNUSED (flags);
    Desk_UNUSED (pw);
}




static void RemoveUpCall (TaskModule_upcall_block *  upcall,
                           void *                    pw)
{
    TaskModule_upcallwaiting_block *  wait;
    TaskModule_upcallwaiting_block *  next;
    int                               mask_index = upcall->upcall / UNSIGNED_INT_BITS;
    int                               mask_bit   = upcall->upcall % UNSIGNED_INT_BITS;


    if (--upcall->info->number_claimants == 0)
    {
        /* UpCall no longer needed by any tasks */
        Desk_LinkList_Unlink (&upcall_info,
                              &upcall->info->header);

        Desk_DeskMem_Free (upcall->info);

        /* If it's in the bounds of the fast filter then mask it out. */
        if (mask_index < sizeof (upcall_mask) / sizeof (upcall_mask[0]))
        {
            upcall_mask[mask_index] &= ~(1 << mask_bit);
        }
    }

    if (--upcall_count == 0)
    {
        /* No more UpCalls being claimed by any task so we can release our
         * claim on the vector.
         */

        Desk_Error2_CheckOS (_swix (OS_Release,
                             _INR (0, 2),

                             UpCallV,
                             TaskModule_UpCall_UpCallEntry,
                             pw));
    }

    Desk_LinkList_Unlink (&upcall_blocks,
                          &upcall->header);

    /* Destroy any UpCall messages waiting to be sent to the task */
    if (upcall->flags.bits.preserve_order)
    {
        wait = Desk_LinkList_FirstItem (&ordered_waiting_messages);
    }
    else
    {
        wait = Desk_LinkList_FirstItem (&waiting_messages);
    }

    while (wait)
    {
        next = Desk_LinkList_NextItem (&wait->header);

        if (wait->info == upcall)
        {
            if (upcall->flags.bits.preserve_order)
            {
                FreeOrderedWaitingMessage (wait);
            }
            else
            {
                FreeWaitingMessage (wait);
            }
        }
        wait = next;
    }
    Desk_DeskMem_Free (upcall);
}




_kernel_oserror *  TaskModule_UpCall_UpCallHandler (_kernel_swi_regs *  r,
                                                    void *              pw)
{
    TaskModule_block *         app = &TaskModule_globalblock;
    TaskModule_upcall_block *  upcall;
    int                        upcall_no  = r->r[0];
    int                        mask_index = upcall_no / UNSIGNED_INT_BITS;
    int                        mask_bit   = upcall_no % UNSIGNED_INT_BITS;


    /* Check fast filter first */
    if (mask_index < sizeof (upcall_mask) / sizeof (upcall_mask[0]) &&
        (upcall_mask[mask_index] & (1 << mask_bit)) == 0)
    {
        return NULL;
    }

    /* Either UpCall is within the bounds of the fast filter and is definitely
     * required or it is outside the bounds of the fast filter and we don't
     * know whether or not it is required.  Either way, walk down UpCall list
     * looking for a handler.
     */

    Desk_Error2_Try
    {
        for (upcall = Desk_LinkList_FirstItem (&upcall_blocks);
             upcall;
             upcall = Desk_LinkList_NextItem (&upcall->header))
        {
            if (upcall_no == upcall->upcall)
            {
                TaskModule_upcallwaiting_block *  waiting = Desk_DeskMem_MallocType (TaskModule_upcallwaiting_block);

                Desk_Debug_Printf (Desk_error_PLACE "Received UpCall %i - storing for task to send\n",
                                   upcall_no);

                waiting->info      = upcall;
                waiting->registers = *r;

                Desk_Debug_Printf (Desk_error_PLACE "TaskModule_UpCall_UpCallHandler: waiting list length is %i, "
                                   "ordered list length is %i, pollword=%i\n",
                                   Desk_LinkList_ListLength (&waiting_messages),
                                   Desk_LinkList_ListLength (&ordered_waiting_messages),
                                   app->pollword);

                if (upcall->flags.bits.preserve_order)
                {
                    if (Desk_LinkList_ListLength (&ordered_waiting_messages) == 0)
                    {
                        Desk_Event_Claim (Desk_event_NONZEROPOLLWORD,
                                          Desk_event_ANY,
                                          Desk_event_ANY,
                                          OrderedNonZeroPollWordHandler,
                                          &ordered_waiting_messages);
                    }
                    Desk_LinkList_AddToTail (&ordered_waiting_messages,
                                             &waiting->header);
                }
                else
                {
                    Desk_Event_Claim (Desk_event_NONZEROPOLLWORD,
                                      Desk_event_ANY,
                                      Desk_event_ANY,
                                      NonZeroPollWordHandler,
                                      waiting);
                    Desk_LinkList_AddToTail (&waiting_messages, &waiting->header);
                }

                app->pollword++;

                Desk_Debug_Printf (Desk_error_PLACE "TaskModule_UpCall_UpCallHandler: waiting list length is %i, "
                                   "ordered list length is %i, pollword=%i\n",
                                   Desk_LinkList_ListLength (&waiting_messages),
                                   Desk_LinkList_ListLength (&ordered_waiting_messages),
                                   app->pollword);
            }
        }
    }
    Desk_Error2_Catch
    {
    }
    Desk_Error2_EndCatch

    return NULL;

    Desk_UNUSED (pw);
}
