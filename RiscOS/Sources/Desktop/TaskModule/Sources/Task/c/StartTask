#include "swis.h"

#include "Desk.LinkList.h"
#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk/Event.h"

#include "StartTask.h"
#include "Task.h"


typedef void*	TaskModule_starttask_callbackfn;


typedef struct	{
	const char*			command;
	TaskModule_starttask_callbackfn	fn;
	void*				pw;
	}
	TaskModule_starttask_block;



void		TaskModule_StartTask_CallStartTaskWithCallback( const char* command, TaskModule_starttask_callbackfn fn, void* pw);

static void	TaskModule_StartTask_FreeBlock( TaskModule_starttask_block* starttask);


static Desk_bool	NonZeroPollWordHandler( Desk_event_pollblock* event, void* reference)
	{
	TaskModule_starttask_block*	starttask = (TaskModule_starttask_block*) reference;
	
	Desk_Debug_Printf( Desk_error_PLACE "Calling Wimp_StartTask\n");
	
	if ( starttask->fn)	TaskModule_StartTask_CallStartTaskWithCallback( starttask->command, starttask->fn, starttask->pw);
	else			_swix( Wimp_StartTask, _IN(0), starttask->command);
	
	TaskModule_StartTask_FreeBlock( starttask);
	
	Desk_Debug_Printf( Desk_error_PLACE "Called Wimp_StartTask\n");
	Desk_Debug_Printf( Desk_error_PLACE "NonZeroPollWordHandler returning\n");
	
	return Desk_bool_FALSE;
	
	Desk_UNUSED( event);
	}


static void	TaskModule_StartTask_FreeBlock( TaskModule_starttask_block* starttask)
	{
	Desk_DeskMem_Free( (void*) starttask->command);
	Desk_DeskMem_Free( starttask);
	TaskModule_globalblock.pollword--;
	Desk_Event_Release( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollWordHandler, starttask);
	}



void	TaskModule_StartTask_Register( _kernel_swi_regs* r, void* pw)
	{
	const char*			command	= (const char*)				r->r[0];
	TaskModule_starttask_callbackfn	fn	= (TaskModule_starttask_callbackfn)	r->r[1];
	void*				fn_pw	= (void*)				r->r[2];
	TaskModule_starttask_block*	starttask;
	
	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_StartTask_Register called for command '%s'\n", command);
	starttask = Desk_DeskMem_MallocType( TaskModule_starttask_block);
	starttask->command = NULL;
	
	Desk_Error2_Try	{
	
		TaskModule_globalblock.pollword++;
		starttask->command	= Desk_strdup( command);
		starttask->fn		= fn;
		starttask->pw		= fn_pw;
		}
	Desk_Error2_Catch	{
		TaskModule_StartTask_FreeBlock( starttask);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_Event_Claim( Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, NonZeroPollWordHandler, starttask);
	
	Desk_UNUSED( pw);
	}



