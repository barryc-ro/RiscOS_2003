#include "Desk.Event.h"
#include "Desk.LinkList.h"
#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Debug.h"

#include "^.Task.h"
#include "^.Broad.h"




typedef void*	TaskModule_broad_handler;


typedef struct	{
	Desk_linklist_header		header;
	Desk_message_action*		messages;
	TaskModule_broad_handler	handler;
	void*				reference;
	}
	TaskModule_broad_block;

static Desk_linklist_header	broad_list = { NULL, NULL};


void	TaskModule_Broad_CallHandler( Desk_event_type type, Desk_message_block* message, void* pw, TaskModule_broad_handler handler);




static Desk_bool	MessageHandler( Desk_event_pollblock* event, void* reference)
	{
	TaskModule_broad_block*	b = (TaskModule_broad_block*) reference;
	int			i;

	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Broad_MessageHandler called for message action 0x%x\n", event->data.message.header.action);

	if ( !b->handler)	return Desk_bool_FALSE;

	for ( i=0; b->messages[i]; i++)	{
		if ( b->messages[i] == event->data.message.header.action)	{
			Desk_Debug_Printf( Desk_error_PLACE "Calling handler at 0x%p, pw=0x%p\n", b->handler, b->reference);
			TaskModule_Broad_CallHandler( event->type, &event->data.message, b->reference, b->handler);
			break;
			}
		}

	return Desk_bool_FALSE;
	}



void	TaskModule_Broad_Register( _kernel_swi_regs* r, void* pw)
	{
	int				flags		= (int)				r->r[0];
	Desk_message_action*		messages	= (Desk_message_action*)	r->r[1];
	TaskModule_broad_handler	handler		= (TaskModule_broad_handler)	r->r[2];
	void*				reference	= (void*)			r->r[3];

	TaskModule_broad_block*		b = NULL;
	int				nummess;
	int				i;

	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Broad_Register called\n");

	if ( flags!=0)	Desk_Error2_HandleTextf( "Bad flags (0x%08x) passed to TaskModule_RegisterBroadcastMessage", flags);

	for ( nummess=0; messages[ nummess] != 0; nummess++)	{
		Desk_Debug_Printf( "0x%x\t", messages[ nummess]);
		}
	Desk_Debug_Printf( "\n");


	b = Desk_DeskMem_MallocType( TaskModule_broad_block);

	Desk_Error2_Try	{
		b->messages	= NULL;
		b->messages	= Desk_DeskMem_CallocType( 1+nummess, Desk_message_action);

		b->handler	= handler;
		b->reference	= reference;

		for ( i=0; i<nummess; i++)	b->messages[i] = messages[i];
		b->messages[i] = (Desk_message_action) 0;

		Desk_Event_MessagesClaim( MessageHandler, b);
		Desk_LinkList_AddToTail( &broad_list, &b->header);

		/*TaskModule_globalblock.pollword++;*/
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( b->messages);
		Desk_DeskMem_Free( b);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch

	Desk_UNUSED( pw);
	}



void	TaskModule_Broad_DeRegister( _kernel_swi_regs* r, void* pw)
	{
	int				flags		= (int)				r->r[0];
	TaskModule_broad_handler	handler		= (TaskModule_broad_handler)	r->r[2];
	void*				reference	= (void*)			r->r[3];

	TaskModule_broad_block*	b;

	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_Broad_DeRegister called\n");

	if ( flags!=0)	Desk_Error2_HandleTextf( "Bad flags (0x%08x) passed to TaskModule_DeRegisterBroadcastMessage", flags);

	for	(
		b = Desk_LinkList_FirstItem( &broad_list);
		b;
		)
		{
		TaskModule_broad_block*	next = Desk_LinkList_NextItem( &b->header);
		if ( b->handler == handler && b->reference == reference)	{
			Desk_Event_MessagesRelease( MessageHandler, b);
			Desk_LinkList_Unlink( &broad_list, &b->header);
			Desk_DeskMem_Free( b->messages);
			Desk_DeskMem_Free( b);
			}
		b = next;
		}

	Desk_UNUSED( pw);
	}


