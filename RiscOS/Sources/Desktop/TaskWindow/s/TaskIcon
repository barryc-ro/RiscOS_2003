; -> Sources.taskicon
; -*- Mode: Assembler -*-

        GET     &.Hdr.ListOpts
        GET     &.Hdr.Macros
        GET     &.Hdr.System
        GET     &.Hdr.ModHand
        GET     &.Hdr.Wimp
        GET     &.Hdr.EnvNumbers

        TTL     Task icon module verson 0.02
        SUBT

        GBLS    Version
Version SETS    "0.02"

        GBLS    ModuleName
ModuleName SETS "TaskIcon"
        GBLS    ModuleHelpName
ModuleHelpName SETS ModuleName
        GBLS    CommandName
CommandName SETS "ShellCLI_TaskIcon"
        GBLS    CommandHelp
CommandHelp SETS "*":CC:CommandName:CC:" installs the task icon on the icon bar"
        GBLS    CommandSyntax
CommandSyntax SETS "Syntax: *":CC:CommandName
        GBLS    CurrentDate
CurrentDate SETS "21 Jul 1988"
        GBLS    CurrentTime
CurrentTime SETS "11:42"

; **************************************************************************

;
; Byte numbers
;
EventDisable *  13
EventEnable *   14
Inkey   *       &81
EscapeChar *    229
EscapeSet *     125
EscapeClear *   124
EscapeAck *     126
ReadExec *      &C6
;
; Args numbers
;
ReadPointer *   0
ReadExtent *    2
;
; Mode numbers
;
SVC_Mode *      3
IntsOff *       &C0000003
;
; Characters
;
TAB     *       9
CR      *       13
Esc     *       27
EventCount *    10
; 
; Wimp poll codes
; There are others, but we're not interested in them
; 
ESend   *       17
ESendRec *      18
EAck    *       19
; 
; Wimp message codes
; 
Quit    *       0        ; Wimp says task must die
        GET     "Sources.Messages"
SpriteSize *   100       ; Room required for my icon sprite
;
; Module service codes
;
Module_Memory * &11
; *********************** Module code starts here *****************************

Code_ModuleBase

        DCD     Code_StartEntry   -Code_ModuleBase
        DCD     Code_InitEntry    -Code_ModuleBase
        DCD     Code_DieEntry     -Code_ModuleBase
        DCD     Code_ServiceEntry -Code_ModuleBase
        DCD     Code_TitleString  -Code_ModuleBase
        DCD     Code_HelpString   -Code_ModuleBase
        DCD     Code_CommandTable -Code_ModuleBase
        DCD     0

Code_TitleString DCB     "$ModuleName", 0

Code_HelpString
        DCB     "$ModuleHelpName"
        DCB     TAB
    [ :LEN: "$ModuleHelpName" < 8
        DCB     TAB
    ]
        DCB     "$Version ($CurrentDate)"
        DCB     0
        ALIGN


Code_CommandTable

        DCB     "$CommandName"
        DCB     0
        ALIGN
        DCD     Code_CommandCode   -Code_ModuleBase
        DCW     0   ; No args required
        DCW     255 ; Up to 255 args permitted
        DCD     Code_CommandSyntax -Code_ModuleBase
        DCD     Code_CommandHelp   -Code_ModuleBase

        DCB     0
        ALIGN

Code_CommandHelp
        DCB     "$CommandHelp"
        DCB     CR

Code_CommandSyntax
        DCB     "$CommandSyntax", 0

        ALIGN

Code_InitEntry
        MOV     pc, r14           ; No initialisation required
        LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Code_DieEntry
; 
; Must preserve r7-r11 and r13
; Only die if we have no instances of Vdu's to support
; 
        LDR     r0, [r12]
        CMP     r0, #0
        ORRNE   r14, r14, #V_bit
        ADRNE   r0, FinaliseFailure
        MOVS    pc, r14

        LTORG

FinaliseFailure
        DCD     1
        =       "A ShellCLI task is still active", 0
        ALIGN

Code_ServiceEntry ROUT
;
; Entry:- r1  = service number
;         r2  = CAO if r1 = &11 (Memory)
;         r12 = private word pointer
;         r13 = stack pointer
;         r14 = return address
;
; Exit:-  All registers preserved unless
;         r1  = 11 and we're active and CAO = us, in which case r1 = 0
;
        MOVS    pc, r14           ; Currently nothing

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Had *command to enter application, so start up via module handler

Code_CommandCode
;
; Entry:- r12 = private word pointer
;
        STMFD   r13!, {r14}
        MOV     r2, r0
        MOV     r0, #ModHandReason_Enter
        ADR     r1, Code_TitleString
        SWI     XOS_Module        ; Shouldn't return
        ADR     r0, Code_ErrorEntry
        LDMFD   r13!, {r14}
        ORRS    pc, r14, #V_bit   ; But if it does, make an error

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Code_ErrorEntry
        DCD     1
        =       "Multiple instantiation not permitted",0
        ALIGN
Code_ErrorHandler ROUT
;
; Handle errors which by getting wimp to print.
; Either user sillies or program bugs.
; Then close down
;
        MOV     r12, r0           ; My workspace pointer
;
; First kill my error handler to avoid reentering
;
        LDR     r0, TaskAborted   ; See if reentering
        TEQ     r0, #0
        MOV     r0, #1            ; We've had an error now
        STRNE   r0, TaskAborted
        SWINE   OS_Exit           ; Leave if so
        MOV     r0, #ErrorHandler ; Getting rid of old handler
        ADR     r1, OldErrorHandler
        LDMIA   r1, {r1 - r3}     ; Previous values
        SWI     XOS_ChangeEnvironment
10
;
; Get the wimp to report for us
;
        ADR     r0, ErrorBuffer+4 ; Point to error number
        MOV     r1, #6            ; Provide Cancel, not OK, and highlight
        ADR     r2, Code_TitleString ; Point to star command we used
        SWI     XWimp_ReportError ; Say what happened
;
; Later we'll need to close down all CLIs
;
        SWI     OS_Exit           ; Should come back to my exit handler
Code_ExitHandler ROUT
        ADR     r13, MyStack+MyStackSize ; Set up my own stack
;
; Now clear up the exit and error handlers
;
        LDR     r0, TaskAborted
        TEQ     r0, #0
        BNE     %f30
        MOV     r0, #ErrorHandler
        ADR     r1, OldErrorHandler
        LDMIA   r1, {r1 - r3}     ; Previous values
        SWI     XOS_ChangeEnvironment
30
        MOV     r0, #ExitHandler
        ADR     r1, OldExitHandler
        LDMIA   r1, {r1 - r3}     ; Previous values
        SWI     XOS_ChangeEnvironment
        BL      ClearWorkspace    ; Free our memory
        SWI     Wimp_CloseDown    ; No more wimp
        SWI     OS_Exit           ; Dead
Code_StartEntry ROUT
;
; Called by Enter or Run
; 
; Entry:- r12 = private word pointer
;         Parameters from GetEnv
; 
        LDR     r0, [r12]         ; Get workspace pointer
        TEQ     r0, #0            ; See if we're active already
        SWINE   OS_Exit           ; No point in multiple incarnations
        LDR     r3, =HeapSize
        MOV     r0, #ModHandReason_Claim
        SWI     OS_Module         ; Let the error happen
        SWI     OS_EnterOS
        STR     r2, [r12]         ; Update private word
        TEQP    pc, #0            ; Back to user mode
        NOP
        STR     r12, [r2, #:INDEX: PrivateWord] ; Remember private word
        MOV     r12, r2           ; Point to our workspace
        STR     r3, FirstWord     ; Save size
        MOV     r0, #0
        STR     r0, Memory        ; NIL pointer
        ADR     r13, MyStack+MyStackSize
;
; Now initialise the wimp
;
        MOV     r0, #200
        LDR     r1, Task
        ADR     r2, Code_TitleString
        SWI     XWimp_Initialise  ; Non error form
        STR     r1, MyTaskId
;
; Now set up error and exit handlers
;
        MOV     r0, #ErrorHandler
        ADR     r1, Code_ErrorHandler
        MOV     r2, r12
        ADR     r3, ErrorBuffer
        SWI     XOS_ChangeEnvironment ;Dunno what we do with an error
        ADR     r0, OldErrorHandler
        STMIA   r0, {r1-r3}
        MOV     r0, #ExitHandler
        ADR     r1, Code_ExitHandler
        MOV     r2, r12
        SWI     XOS_ChangeEnvironment ;Dunno what we do with an error
        ADR     r0, OldExitHandler
        STMIA   r0, {r1-r3}
        MOV     r0, #0
        STR     r0, TaskAborted
;
; Now load my sprite onto the icon bar
;
        BL      CreateIcon
        MOV     r1, #-1
        SWI     XWimp_DragBox
;
; Associate a menu with the icon
;
PollLoop
10
;
; Loop polling the wimp
;
        LDR     r0, =&FFF1FDBF    ; Only allow messages, mouse, menu
        ADR     r1, ScratchBlock
        SWI     XWimp_Poll
        ADDVC   pc, pc, r0, LSL #2 ; Case branch
        BVS     %b10              ; Else loop back on error
        B       %b10              ; 0
        B       %b10              ; 1
        B       %b10              ; 2
        B       %b10              ; 3
        B       %b10              ; 4
        B       %b10              ; 5
        B       ButtonChange      ; mouse button change
        B       %b10              ; 7
        B       %b10              ; 8
        B       MenuSelect        ; 9
        B       %b10              ; 10
        B       %b10              ; 11
        B       %b10              ; 12
        B       %b10              ; 13
        B       %b10              ; 14
        B       %b10              ; 15
        B       %b10              ; 16
        B       ESendHand         ; Message sent
        B       ESendRecHand      ; Message needing Ack
;
; Ack
; Getting an Ack is an error, so we'll just die
;
        SWI     OS_Exit
ESendRecHand
ESendHand
;
; Only interested in die broadcast at the moment
;
        LDR     r0, SMessageAction
        TEQ     r0, #Quit
        SWIEQ   OS_Exit           ; Die if so
        B       %b10              ; Else loop

ButtonChange ROUT
;
; Wimp has reported a button change to us
;
; Entry:- ScratchBlock contains the wimp return block
;
        LDR     r0, SWinHandle
        CMP     r0, #-2           ; See if system window
        BNE     PollLoop          ; Branch if not
        LDR     r0, SNewButtons
        TST     r0, #1:SHL:1      ; Check for menu button
        BNE     %f10              ; Branch if so
        TST     r0, #1:SHL:2      ; Check for left button
        BEQ     PollLoop          ; No action if not one of these
;
; Left button pressed, start up a task window
; For the moment we fake a ctrl shift f9 to arcedit
; How do we find its task id?
;
        MOV     r3, #20           ; Message size so far
        ADR     r5, SMessageData
        ADR     r4, Command
05
        LDRB    r2, [r4], #1
        STRB    r2, [r5], #1      ; Copy the command
        ADD     r3, r3, #1
        TEQ     r2, #0
        BNE     %b05              ; Loop until command copied
        ADD     r3, r3, #3
        BIC     r3, r3, #3        ; Rounded up to word
        MOV     r6, #0            ; No reference
        LDR     r7, =NewTask      ; The action
        ADR     r1, ScratchBlock
        STMIA   r1, {r3-r7}
        MOV     r0, #ESend        ; What to do
        SWI     XWimp_SendMessage ; Note r2 = 0 for broadcast
        B       PollLoop
10
;
; Handle menu request
;
        LDR     r0, SMouseX
        SUB     r0, r0, #32
        ADR     r1, MenuBlock
        ADR     r2, MenuName
        LDMIA   r2, {r2-r4}
        LDR     r5, =&00070207    ; Wk bkg, wk fg, tit bkg, tit fg
        MOV     r6, #196-24       ; Item width
        MOV     r7, #40           ; Item height
        MOV     r8, #0            ; No vertical gap
        STMIA   r1, {r2-r8}       ; Copy the initial part of the block in
        ADD     r2, r1, #28       ; Point to item data
        MOV     r3, #&80          ; Only one item so far
        MOV     r4, #-1           ; No window or submenu
        LDR     r5, =&07000021    ; Icon flags
        ADR     r6, QuitName      ; Data
        LDMIA   r6, {r6-r8}
        STMIA   r2, {r3-r8}
        SUB     r2, r0, #64       ; X position, determined from mouse position
        MOV     r3, #96+40        ; Y position
        SWI     XWimp_CreateMenu
        B       PollLoop
MenuName
        =       "Task", 0
        ALIGN
QuitName
        =       "Quit", 0
Command
        =       TaskModuleCommand, 0
        ALIGN
MenuSelect ROUT
;
; Wimp has reported a menu selection to us
;
; Entry:- ScratchBlock contains the wimp return block
;
        LDR     r0, ScratchBlock  ; Item number (should be 0)
        LDR     r2, ScratchBlock+4 ; Should be -1 for end of list
        TEQ     r0, #0
        CMPEQ   r2, #-1
        BNE     PollLoop          ; Error case (ignore)
        SWI     OS_Exit           ; Quit
        B       PollLoop          ; Rest not yet written
ClearWorkspace ROUT
;
; Entry:- r14 = return address
;         r12 = workspace pointer
;
; Exit:-  r0, r2, r11 corrupt
;
        LDR     r11, Memory
10
        TEQ     r11, #0
        BEQ     %f20              ; Branch if no more CLI buffers
        MOV     r2, r11
        LDR     r11, Next
        MOV     r0, #ModHandReason_Free
        SWI     OS_Module         ; Free it
        B       %b10              ; Loop
20
;
; Now clear the main workspace
;
        MOV     r2, r12
        LDR     r12, PrivateWord
        MOV     r0, #ModHandReason_Free
        SWI     OS_Module         ; Free it
        SWI     OS_EnterOS
        MOV     r0, #0
        STR     r0, FirstWord     ; Clear private word
        TEQP    pc, #0            ; Back to user mode
        NOP
        MOV     pc, r14           ; Return to caller
CreateIcon ROUT
;
; Create the sprite ready to go onto the icon bar
;
; Entry:- r14 = return address
;         r13 = stack pointer for FD stack
;         r12 = workspace pointer
;
; Exit:-  r0 - r9 corrupt
;
        MOV     r0, #-1           ; Window handle
        MOV     r1, #0            ; Min x
        MOV     r2, #0            ; Min y
        MOV     r3, #64           ; Max x
        MOV     r4, #64           ; Max y
        LDR     r5, =&2002        ; Flags (button type 2, sprite)
        ADR     r6, IconName
        LDMIA   r6, {r6-r8}
        ADR     r9, SpriteCB
        STMIA   r9, {r0-r8}       ; Store the data
        MOV     r1, r9
        SWI     XWimp_CreateIcon  ; Create it
        STR     r0, IconHandle
        MOV     pc, r14           ; Return

Task      =     "TASK"
IconName  =     "!taskicon", 0

        LTORG

Code_ModuleEnd
Code_ModuleSize * . -Code_ModuleBase

; 
; Workspace, per instance
; 
        ^       0, r12            ; All relative

FirstWord              Word       ; placeholder, total RMA size
NextBlock              Word       ; Pointer to next piece of RMA
PrivateWord            Word       ; Where our private word is
SpriteCB               Word 9     ; Control block to Wimp_CreateIcon
IconHandle             Word
MyTaskId               Word
Memory                 Word       ; Chain of dynamically allocated CLI blocks
MyStackSize            *    64
MyStack                Word MyStackSize/4 ; A small stack for me
OldErrorHandler        Word 3
OldExitHandler         Word 3
ErrorBuffer            Word 0
ErrorBufferPC          Word
ErrorBufferNumber      Word
ErrorBufferMsg         Word 64
ScratchBlock           Word 64    ; 256 byte block of scratch workspace
MenuBlock              Word 64    ; 256 byte block for menu creation
;
; Definitions for message reception
;
SMessageSize           *    ScratchBlock
SMessageMyTask         *    ScratchBlock+4
SMessageMyRef          *    ScratchBlock+8
SMessageYourRef        *    ScratchBlock+12
SMessageAction         *    ScratchBlock+16
SMessageData           *    ScratchBlock+20
SMessageDataSize       *    SMessageData
SMessageDataData       *    SMessageData+4
;
; Definitions for mouse button presses
;
SMouseX                *    ScratchBlock
SMouseY                *    ScratchBlock+4
SNewButtons            *    ScratchBlock+8
SWinHandle             *    ScratchBlock+12
SIconHandle            *    ScratchBlock+16
SOldButtons            *    ScratchBlock+20
TaskAborted            Word
LastWord               Word 0     ; unused - a placeholder for allocating space
HeapSize               *    :INDEX: @
;
; Now areas sized dynamically. CLI buffers
;
        ^       0, r11
Next                   Word
Size                   Word       ; Total buffer size
Buffer                 Word 64
        END
