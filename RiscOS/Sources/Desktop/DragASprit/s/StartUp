;; Compilation flags for this version of the module

                GBLL    hatching
hatching        SETL    1=1


; StartUp the drag
;
; In    r0 = flags:
;               Bits    Meaning
;               0-1     Horizontal location of sprite in box:
;                       00      Left
;                       01      Centre
;                       10      Right
;                       11      <undefined>
;               2-3     Vertical location of sprite in box:
;                       00      Bottom
;                       01      Centre
;                       10      Top
;                       11      <undefined>
;               4-5     Drag bounding box is:
;                       00      Whole screen
;                       01      Display area of window that the pointer's over
;                       10      User specified
;                       11      <undefined>
;               6       Bounding box applies to:
;                       0       The box
;                       1       The pointer
;               7       Control of drop-shadow:
;                       0       Don't do a drop-shadow
;                       1       Make a drop shadow when copying the sprite
;               8       0       Hatch the sprite
;                       1       Never hatch the sprite
;               9       0       Sprite's position is determined by bits 0-3
;                       1       Sprite is centred on pointer position
;               10-31   Reserved for future use, should be set to 0.
;       r1 = sprite area:
;               0       System sprite area
;               1       Wimp sprite area
;               other   Address of sprite area
;       r2 = sprite name^
;       r3 = Pointer to 16-byte block containing box:
;               Offset  Use
;               0       x0
;               4       y0
;               8       x1
;               12      y1
;       r4 = Pointer to optional (see flags) 16-byte block containing bounding box:
;               Offset  Use
;               0       x0
;               4       y0
;               8       x1
;               12      y1

;       Out:
;       All registers preserved.

DS_DropShadowDistance   *       8       ; OS units

        MACRO
$label  TestAFlag       $reg, $what, $iswhat, $workreg
        AND     $workreg, $reg, #DS_$|what|_Mask
        TEQ     $workreg, #DS_$|what|_$iswhat
        MEND

; Local variables
                ^       0,sp
dragstr         #       dr_size
scale_block     #       16
tx_block        #       16
spr_dragbox     #       16      ; Box to use for sprite dragging calculations
StartUp_frame_size * :INDEX: @

StartUp Entry "r0-r8", StartUp_frame_size
 [ debugstart
        DLINE   "StartUp started"
        DREG    r0, "Flags ",cc
        DREG    r1, "  area ",cc
        DSTRING r2, "  sprite ",cc
        LDR     r8, [r3, #box_x0]
        DREG    r8, "  Box (", cc
        LDR     r8, [r3, #box_y0]
        DREG    r8, ",", cc
        LDR     r8, [r3, #box_x1]
        DREG    r8, ",", cc
        LDR     r8, [r3, #box_y1]
        DREG    r8, ",", cc
        DLINE   ")"
 ]
        BL      Done            ; Junk any drag pending at the moment
        BVS     %FT90

        ; ensure the box passed in is rounded to osunits

        STMFD   R13!,{R0-R2}       ; save R0-R2
        MOV     R0, #-1            ; read for current screen mode
        MOV     R1, #VduExt_XEigFactor
        SWI     XOS_ReadModeVariable
        MOV     R7, R2             ; R7 is the xeig factor
        MOV     R1, #VduExt_YEigFactor
        SWI     XOS_ReadModeVariable
        MOV     R8, R2             ; R8 is the yeig factor
        LDMFD   R13!,{R0-R2}       ; recover the registers we've messed up

        MOV     R6, #1             ; a handy constant for shifts

        TEQ     R7, #0             ; if xeig=0 then no need to round

        MOVNE   R7, R6, LSL R7     ; number of osunits per pixel x
        SUBNE   R7, R7, R6         ; minus one, to give masking value

        LDRNE   R5, [R3, #box_x0]  ; load, mask and store x0
        BICNE   R5, R5, R7
        STRNE   R5, [R3, #box_x0]

        LDRNE   R5, [R3, #box_x1]  ; load, mask and store x1
        BICNE   R5, R5, R7
        STRNE   R5, [R3, #box_x1]

        TEQ     R8, #0             ; if yeig=0 then no need to round

        MOVNE   R8, R6, LSL R8     ; number of osunits per pixel y
        SUBNE   R8, R8, R6         ; minus one for masking value

        LDRNE   R5, [R3, #box_y0]  ; load, mask and store y0
        BIC     R5, R5, R8
        STRNE   R5, [R3, #box_y0]

        LDRNE   R5, [R3, #box_y1]  ; load, mask and store y1
        BIC     R5, R5, R8
        STRNE   R5, [R3, #box_y1]

        ; Get a sprite area big enough for:
        ; 2 background sprites the size of the source sprite
        ; a copy of the source sprite in native screen mode
        ; /* a copy of the source sprite (only used when the screen mode changes) */
        ; a double the source sprite sized buffer sprite for moving
        BL      CoordSizeOfSprite

        ; Probably failed due to missing sprite, hence...
        BVS     ResortToNormalDrag

        ; If there's a drop-shadow grow the size by the required distance
        LDR     r2, [sp, #Proc_LocalStack + 0*4]
        TestAFlag r2, DropShadow, Present, r14
        ADDEQ   r0, r0, #DS_DropShadowDistance
        ADDEQ   r1, r1, #DS_DropShadowDistance
        STR     r0, x_size
        STR     r1, y_size

        ; Convert to bytes needed for the sprite(s)
        BL      ByteSizeOfSprite
        BVS     %FT90

        ; Add enough for the sprite area header
        ADD     r3, r3, #SpriteAreaCBsize

        ; Claim fg, bg0 and bg1 at that size
        ADRL    r1, bg0sa
        BL      MakeSpriteArea
        ADRVCL  r1, bg1sa
        BLVC    MakeSpriteArea

        ; Twice as much space is needed for fg due to the potential need for a mask
        MOVVC   r3, r3, ASL #1
        ADRVCL  r1, fgsa
        BLVC    MakeSpriteArea

        ; Any errors up to here are probably due to memory shortage, hence...
        BVS     ResortToNormalDrag

 [ debugstart
        DLINE   "Gotten areas..doing normal dragasprite"
 ]

        ; Create the foreground sprite (fg)
        LDR     r0, =SpriteReason_GetSpriteUserCoords + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, #0          ; no palette
        MOV     r4, #0
        MOV     r5, #0
        LDR     r6, x_size
        SUB     r6, r6, #1
        LDR     r7, y_size
        SUB     r7, r7, #1
        SWI     XOS_SpriteOp
        BVS     %FT80

        ; Create the two background sprites (bg0 and bg1)
        LDR     r0, =SpriteReason_GetSpriteUserCoords + &100
        LDR     r1, bg0sa
        ADRL    r2, bg_name
        SWI     XOS_SpriteOp
        LDRVC   r1, bg1sa
        ADRVCL  r2, bg_name
        SWIVC   XOS_SpriteOp
        BVS     %FT80

 [ debugstart
        DLINE   "Created sprites"
 ]

        ; Get a scaling table for the user's sprite onto the stack
        MOV     r0, #&100
        LDR     r1, [sp, #Proc_LocalStack + 1*4]
        LDR     r2, [sp, #Proc_LocalStack + 2*4]
        ADR     r6, scale_block
        ADR     r7, tx_block
        SWI     XWimp_ReadPixTrans
        BVS     %FT80

; try and claim memory for pixtable
        Push    "R0-R5"
        LDR     r0, [sp, #4*6 + Proc_LocalStack + 1*4]
        TEQ     R0,#1
        MOVNE   R5,#2                                   ; sprite is a name
        LDRNE   r1, [sp, #4*6 + Proc_LocalStack + 2*4]

        BNE     ego

        MOV     R0, #16
        SWI     XWimp_ReadSysInfo
        SWIVS   XWimp_BaseOfSprites                     ; cater for old Wimps
;        SWI     Wimp_BaseOfSprites
        MOV     R3,R0
        MOV     R0,#24+256                              ; select sprite
        LDR     r2, [sp, #4*6 + Proc_LocalStack + 2*4]
        SWI     XOS_SpriteOp
        MOVVC   R0,R1
        MOVVC   R1,R2
        MOVVC   R5,#3
        BVC     ego

        MOV     R0,#24+256
        MOV     R1,R3
        SWI     XOS_SpriteOp
        MOVVS   R7,#0
        BVS     wibble

        MOV     R5,#3                                   ; pointer
;        LDR     R0,fgsa                                 ; any sprite area
        MOV     R0,R1                                   ;; eh? use the correct sprite area
        MOV     R1,R2                                   ;; and remember to point R1 at the sprite!!

ego

        MOV     R2,#-1
        MOV     R3,#-1
        MOV     R4,#0
        SWI     XColourTrans_SelectTable

    [ debugstart
        DREG    R4," table size"
   ]

        CMP     R4,#17
        BLT     wibble                                  ; wimp table will be ok

        Push    R0
        MOV     R0,#ModHandReason_Claim
        MOV     R3,R4
        SWI     XOS_Module
        Pull    R0,VC
        ADDVS   sp,sp,#4
        MOVVS   R7,#0
        BVS     wibble

        MOV     R4,R2
        MOV     R2,#-1
        MOV     R3,#-1

        SWI     XColourTrans_SelectTable
        MOVVC   R7,R4
        MOVVS   R7,#0

        MOVVS   R2,R4
        MOVVS   R0,#ModHandReason_Free
        SWIVS   XOS_Module
wibble
        CLRV
        Pull    "R0-R5"

        ; Create a transparency mask and fill it in
        LDR     r0, =SpriteReason_CreateMask + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        SWI     XOS_SpriteOp
        BVC     %FT05                   ; masks fail on first version of Medusa
                                        ; so try and carry on drag solidly.
        ; make sure dithering disabled- doesn't look good!
        LDR     R0, [sp, #Proc_LocalStack + 0*4]
        ORR     R0,R0, #DS_NoHatching
        STR     R0, [sp, #Proc_LocalStack + 0*4]

        ; Switch output to the sprite
        MOV     r0, #SpriteReason_SwitchOutputToSprite + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, #0  ; No save area
        SWI     XOS_SpriteOp
        BVS     %FT80
        Push    "r0-r3"

        ; clear it, because we have no mask
        ADRVCL  r0, setcolallset
        MOVVC   r1, #?setcolallset
        SWIVC   XOS_WriteN
        SWIVC   XOS_WriteI+16
        B       %FT35

05

        ; Switch output to the mask
        LDR     r0, =SpriteReason_SwitchOutputToMask + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, #0  ; No save area
        SWI     XOS_SpriteOp
        BVS     %FT80
        Push    "r0-r3"

        ; Clear the mask out and set to writing all bits set
        ADRL    r0, setcolnoneset
        MOV     r1, #?setcolnoneset
        SWI     XOS_WriteN
        SWIVC   XOS_WriteI+16
        ADRVCL  r0, setcolallset
        MOVVC   r1, #?setcolallset
        SWIVC   XOS_WriteN
        BVS     %FT70

        ; Test for drop-shadow
        LDR     r0, [sp, #4*4 + Proc_LocalStack + 0*4]
        TestAFlag r0, DropShadow, Present, r14

        ; Load up common parameters
        LDR     r0, =SpriteReason_PlotMaskScaled
        LDR     r1, [sp, #4*4 + Proc_LocalStack + 1*4]
        LDR     r2, [sp, #4*4 + Proc_LocalStack + 2*4]

        ; Switch on drop-shadow
        BEQ     %FT10

        ; Plot the user's mask in the background colour scaled as specified
        MOV     r3, #0
        MOV     r4, #0
        BL      DoSpriteOp

        B       %FT20

10
        ; Plot a drop shadow style mask
        MOV     r3, #DS_DropShadowDistance
        MOV     r4, #0
        BL      DoSpriteOp
        MOVVC   r3, #0
        MOVVC   r4, #DS_DropShadowDistance
        BLVC    DoSpriteOp

20
        ; Return back to original output location
        BVS     %FT70
        Pull    "r0-r3"
        SWI     XOS_SpriteOp
        BVS     %FT80

30
        ; Plot foreground into fg

        ; Switch output to the sprite
        MOV     r0, #SpriteReason_SwitchOutputToSprite + &100
        LDR     r1, fgsa
        ADRL    r2, fg_name
        MOV     r3, #0  ; No save area
        SWI     XOS_SpriteOp
        BVS     %FT80
        Push    "r0-r3"
35
        ; Test for drop shadow
        LDR     r0, [sp, #4*4 + Proc_LocalStack + 0*4]
        TestAFlag r0, DropShadow, Present, r14

        ; Load up the common parameters
        LDR     r1, [sp, #4*4 + Proc_LocalStack + 1*4]
        LDR     r2, [sp, #4*4 + Proc_LocalStack + 2*4]
        MOV     r5, #8                  ; Overwrite, using transparency mask

        ; Branch on the drop shadow
        BEQ     %FT40

        ; Plot the user's sprite in the background colour scaled as specified
        MOV     r0, #SpriteReason_PutSpriteScaled
        MOV     r3, #0
        MOV     r4, #0
        BL      DoSpriteOp
        B       %FT50

40
        ; Set background to black
        MOV     r0, #&87
        SWI     XWimp_SetColour

        ; Plot the mask there
        MOV     r0, #SpriteReason_PlotMaskScaled
        MOV     r3, #DS_DropShadowDistance
        MOV     r4, #0
        BLVC    DoSpriteOp

        ; Plot the drop-shadow foreground
        MOV     r0, #SpriteReason_PutSpriteScaled
        MOVVC   r3, #0
        MOVVC   r4, #DS_DropShadowDistance
        BL      DoSpriteOp

50

; free temporary pix trans block

        SavePSR R1
        ADR     R14,tx_block
        CMP     R7,#0
        BLE     wibble2
        TEQ     R14,R7
        MOVNE   R0,#ModHandReason_Free
        MOVNE   R2,R7
        SWINE   XOS_Module
        RestPSR R1,,f

;; We need the depth of the sprite so read it

wibble2

      [ hatching
        MOVVC   R0,#-1
        MOVVC   R1,#VduExt_Log2BPP
        SWIVC   XOS_ReadModeVariable
        MOVVC   R7,R2                           ; keep the depth of the sprite

; medusa has 1bpp masks
        Push    "R2-R6"
        MOVVC   R0,#&128
        LDRVC   R1,fgsa
        ADRVCL  R2,fg_name
        SWIVC   XOS_SpriteOp
        MOVVS   R6,#0
        CMP     R6,#255
        MOVGT   R7,R3, LSL #8                   ; put the width (pixels) in here
        Pull    "R2-R6"
      ]

        ; Return back to original output location
        BVS     %FT70
        Pull    "r0-r3"
        SWI     XOS_SpriteOp

;; Pixelate the mask so that we get this funky sort of masking where
;; you can see all alternate pixels.

      [ hatching
        LDR     R0, [sp, #Proc_LocalStack + 0*4]
        TST     R0, #DS_NoHatching
        BNE     %FT53                           ; if no hatching then

        MOV     R3,#0
        CMP     R7,#31
        MOVGT   R3,R7, LSR #8
        MOVGT   R7,#0                           ; 1bit mask, n bit sprite

        MOV     R0,#1
        MOV     R7,R0,LSL R7                    ; R0 = bits per pixel of the sprite (1,2,4,8,16 or 32)
        RSB     R1,R7,#32                       ; R1 = shift to move pixels into bottom bits
        MOV     R5,#-1

        CMP     R0,#32
        MOVNE   R5,R5,LSR R1                    ; bits 0-R0 contain masking bits (AMG)

        MOV     R0,R7
10
        ADD     R0,R0,R0
        ANDS    R0,R0,#31
        ORRNE   R5,R5,R5,LSL R0                 ; combine to make mask
        BNE     %BT10

        LDR     R0,=SpriteReason_SelectSprite +&100
        LDR     R1,fgsa
        ADRL    R2,fg_name
        SWI     XOS_SpriteOp                    ; R2 -> sprite in the area

        TEQ     R3,#0
        LDREQ   R3,[R2,#spWidth]                ; width, height and pixel mask to apply
        ADDNE   R3,R3,#31
        MOVNE   R3,R3, LSR #5                   ; size of mask in words
        SUBNE   R3,R3,#1
        LDR     R4,[R2,#spHeight]
        LDR     R6,[R2,#spTrans]
        ADD     R6,R6,R2                        ; -> mask data

;; R5 contains mask for the current depth
;; R7 contains the shift

        [ {FALSE}
51
        MOV     R5,R5,ROR R7                    ; rotate mask by one for alternate lines
        Push    "R3"
52
        LDR     LR,[R6]
        BIC     LR,LR,R5
        STR     LR,[R6],#4                      ; apply masking data to image

        ;when dealing with 32bpp it's impossible to use the rotating mask bits in
        ;a word trick. Instead we flip the whole word between 0 and &FFFFFFFF
        CMP     R7,#32                          ; is it 32bpp
        MOVEQ   R14,#-1                         ; -1 constant
        SUBEQ   R5,R14,R5                       ; flip between 0 and -1

        SUBS    R3,R3,#1                        ; decrease number of lines to do
        BPL     %BT52                           ; and loop again if more

        Pull    "R3"
        SUBS    R4,R4,#1
        BPL     %BT51                           ; loop back until all lines are done
53

        |
51
        MOV     LR,#-1
        EOR     R5,R14,R5                       ; rotate mask by one for alternate lines

        Push    "R3"                            ; save the line length
52
        LDR     LR,[R6]
        BIC     LR,LR,R5
        STR     LR,[R6],#4                      ; apply masking data to image
;        STR     R5,[R6],#4

        SUBS    R3,R3,#1
        BMI     %FT54

        CMP     R7,#32                          ; if dealing with a 32bpp sprite
        MOVEQ   LR,#-1
        EOREQ   R5,R5,LR

        LDR     LR,[R6]
        BIC     LR,LR,R5
        STR     LR,[R6],#4
;        STR     R5,[R6],#4

        CMP     R7,#32
        MOVEQ   LR,#-1
        EOREQ   R5,R5,LR

        SUBS    R3,R3,#1                        ; decrease number of words to do
        BPL     %BT52                           ; and loop again if more
54
        Pull    "R3"
        SUBS    R4,R4,#1
        BPL     %BT51                           ; loop back until all lines are done
53
               ]
        ]
 [ debugstart
        DLINE   "Generated fg, starting drag..."
 ]

;        MOV     R0,#12+256
;        LDR     R1,fgsa
;        ADRL    R2,savename
;        SWI     OS_SpriteOp

        ; Sprites now claimed, let's start the drag

        ; Fill in the dragstr
        MOV     r14, #dragtype_userfixedbox
        STR     r14, dragstr + dr_type

        ; Calculate the offset from box to sprite
        LDR     r0, [sp, #Proc_LocalStack + 0*4]
        LDR     r3, [sp, #Proc_LocalStack + 3*4]

  [ AtPointerFlag
        ; Check first if flag is set to put sprite at pointer position
        TST       r0, #DS_SpriteAtPointer
        BEQ       %FT54

        ; Get pointer position
        ADR       r1, ptrbuffer
        SWI       XWimp_GetPointerInfo
        BVS       %FT54
        MOV       r2, r1

        ; Work out x offset
        LDR       r1, [r2]
        LDR       r14, [r3, #box_x0]
        SUB       r1, r1, r14
        LDR       r14, x_size
        SUB       r1, r1, r14, LSR #1
        STR       r1, bl_offset_x               ; Store x offset

        ; Work out y offset
        LDR       r1, [r2, #4]
        LDR       r14, [r3, #box_y0]
        SUB       r1, r1, r14
        LDR       r14, y_size
        SUB       r1, r1, r14, LSR #1           ; This value will be stord after next branch
        B         %FT65
54
  ]

        TestAFlag r0, HJustify, Left, r14

        ; Left justify
        MOVEQ   r1, #0
        BEQ     %FT57

        TestAFlag r0, HJustify, Centre, r14
        BNE     %FT55

        ; Centre justify
        LDR     r1, [r3, #box_x1]
        LDR     r2, [r3, #box_x0]
        SUB     r1, r1, r2
        MOV     r1, r1, ASR #1
        LDR     r2, x_size
        TestAFlag r0, DropShadow, Present, r14
        SUBEQ   r2, r2, #DS_DropShadowDistance
        SUB     r1, r1, r2, ASR #1
        B       %FT57

55
        ; Right justify
        LDR     r1, [r3, #box_x1]
        LDR     r2, x_size
        SUB     r1, r1, r2
        TestAFlag r0, DropShadow, Present, r14
        ADDEQ   r1, r1, #DS_DropShadowDistance
        LDR     lr, [r3, #box_x0]
        SUB     r1, r1, lr

57
        STR     r1, bl_offset_x

        TestAFlag r0, VJustify, Bottom, r14
        BNE     %FT60

        ; Bottom justify
        MOV     r1, #0
        TestAFlag r0, DropShadow, Present, r14
        SUBEQ   r1, r1, #DS_DropShadowDistance

        B       %FT65

60
        TestAFlag r0, VJustify, Centre, r14
        BNE     %FT62

        ; Centre justify
        LDR     r1, [r3, #box_y1]
        LDR     r2, [r3, #box_y0]
        SUB     r1, r1, r2
        MOV     r1, r1, ASR #1
        LDR     r2, y_size
        TestAFlag r0, DropShadow, Present, r14
        ADDEQ   r2, r2, #DS_DropShadowDistance
        SUB     r1, r1, r2, ASR #1
        B       %FT65

62
        ; Top justify
        LDR     r1, [r3, #box_y1]
        LDR     r2, y_size
        SUB     r1, r1, r2
        LDR     lr, [r3, #box_y0]
        SUB     r1, r1, lr

65
        STR     r1, bl_offset_y

        ; Given the bl offsets and the original box, generate the sprite's drag box
        TestAFlag r0, DropShadow, Present, r14
        LDR     r1, [r3, #box_x0]
        LDR     r2, bl_offset_x
        ADD     r1, r1, r2
        STR     r1, spr_dragbox + box_x0
        LDR     r2, x_size
        ADD     r1, r1, r2
        SUBEQ   r1, r1, #DS_DropShadowDistance
        STR     r1, spr_dragbox + box_x1
        LDR     r1, [r3, #box_y0]
        LDR     r2, bl_offset_y
        ADD     r1, r1, r2
        ADDEQ   r1, r1, #DS_DropShadowDistance
        STR     r1, spr_dragbox + box_y0
        LDR     r2, y_size
        ADD     r1, r1, r2
        SUBEQ   r1, r1, #DS_DropShadowDistance
        STR     r1, spr_dragbox + box_y1

 [ debugstart
        DLINE   "Generated bl offsets, filling in dragstr"
 ]

        ; The drag routines
        STR     r12, dragstr + dr_userR12
        ADRL    r14, UnPlot
        STR     r14, dragstr + dr_userRemove
        ADRL    r14, Plot
        STR     r14, dragstr + dr_userDraw
        ADRL    r14, Move
        STR     r14, dragstr + dr_userMove

        ADD     r14, sp, #Proc_LocalStack
        LDMIA   r14, {r0-r4}

        B       FinishStartingDrag

70
        ; Switch output back to screen error exit
        STR     r0, [sp, #4*4 + Proc_LocalStack + 0*4]
        Pull    "r0-r3"
        SWI     XOS_SpriteOp
        LDR     r0, [sp, #4*4 + Proc_LocalStack + 0*4]

80
        ; Free the sprite areas error exit
        STR     r0, [sp, #Proc_LocalStack + 0*4]
        BL      Done
        LDR     r0, [sp, #Proc_LocalStack + 0*4]

90
        STR     r0, [sp, #Proc_LocalStack + 0*4]
 [ debugstart
        ADD     r0, r0, #4
        DSTRING r0, "Error return:"
 ]
        EXIT

;savename    DCB "$.sprites.das",0

ResortToNormalDrag
        ; Junk any sprite garbage
        BL      Done

        ; Cancel any error
        CLRV

        ; Store the norml drag specific bits in the dragstr
        MOV     r14, #dragtype_fixedbox
        STR     r14, dragstr + dr_type

        LDMIA   r3, {r5-r8}
        ADR     lr, spr_dragbox
        STMIA   lr, {r5-r8}

        ADD     r14, sp, #Proc_LocalStack
        LDMIA   r14, {r0-r4}

FinishStartingDrag
        ; spr_dragbox - box of thing to appear to be dragged

        ; Construct the common parts of a drag structure and start the drag
 [ debugstart
        DLINE   "Doing common part fo dragstr"
 ]

        ; Box being moved is always the user's supplied box
        LDR     r14, [sp, #Proc_LocalStack + 3*4]
        LDMIA   r14, {r5-r8}
        ADR     r14, dragstr + dr_x0
        STMIA   r14, {r5-r8}

        ; Parent box
        ADR     r3, dragstr + dr_x0
        ADR     r2, spr_dragbox
        BL      GetParentBox
        ADR     r14, dragstr + dr_parentx0
 [ debugstart
        DREG    r5, "Parent = (",cc
        DREG    r6, ",",cc
        DREG    r7, ",",cc
        DREG    r8, ",",cc
        DLINE   ")"
 ]
        STMIA   r14, {r5-r8}

 [ debugstart
        DLINE   "dragstr ready, starting drag"
 ]

        ; Indicate first move will be plot, not move
        MOV     lr, #1
        STRB    lr, FirstMoveIsPlot

        ; Start the drag
        ADR     r1, dragstr
        SWI     XWimp_DragBox
        STRVS   r0, [sp, #Proc_LocalStack + 0*4]
        BLVS    Done

 [ debugstart
        DLINE   "drag started, all done"
 ]
        EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; ByteSizeOfSprite
;
; In    r0 = flags
;       r2 -> box supplied to Wimp_DragBox
;       r3 -> box wish user to 'see'
;       r4 -> optional parent box
;       Mouse pointer has a location (hopefully over a window)
;
; Out   r5-r8 = parent box
;
GetParentBox Entry "r0-r4"
        TestAFlag r0, BoundTo, Screen, r14
        BEQ     %FT10
        TestAFlag r0, BoundTo, Window, r14
        BEQ     %FT20
        TestAFlag r0, BoundTo, UserBox, r14
        BEQ     %FT30
        ADR     r0, ErrorBlock_BadParameters
        MOV     r1, #0
        BL      LookupError
        SETV
        BVS     %FT90

10
        ; Bound to screen - find screen limits
        BL      GetScreenGWindow
        MOV     r5, r0
        MOV     r6, r1
        ADD     r7, r2, #1
        ADD     r8, r3, #1
        LDR     r3, [sp, #Proc_LocalStack + 3*4]
        B       %FT50

20
        ; Bound to window the mouse pointer's over

        ; Get the pointer's window
        SUB     sp, sp, #b_size
        MOV     r1, sp
        SWI     XWimp_GetPointerInfo
        LDR     r1, [sp, #b_window]
        ADD     sp, sp, #b_size
        BVS     %FT90

        ; Get that window's windowstate
        SUB     sp, sp, #u_windowstate
        STR     r1, [sp, #u_handle]
        MOV     r1, sp
        SWI     XWimp_GetWindowState

        ; Get the work area from the windowstate
        ADD     r1, sp, #u_wax0
        LDMIA   r1, {r5-r8}
        ADD     sp, sp, #u_windowstate
        BVS     %FT90

        B       %FT50

30
        ; Bound to user specified box
        LDMIA   r4, {r5-r8}

50
        ; Unadjusted parent box in r5-r8

        ; Pick up flags again
        LDR     r0, [sp, #0*4]

        ; Pick up two boxes again
        LDR     r2, [sp, #2*4]
        LDR     r3, [sp, #3*4]

        TestAFlag r0, Bound, Box, r14
        BNE     %FT60

        ; Bounding the box to the parent - adjust for box differences
        LDR     lr, [r2, #box_x0]
        SUB     r5, r5, lr
        LDR     lr, [r3, #box_x0]
        ADD     r5, r5, lr
        LDR     lr, [r2, #box_y0]
        SUB     r6, r6, lr
        LDR     lr, [r3, #box_y0]
        ADD     r6, r6, lr
        LDR     lr, [r2, #box_x1]
        SUB     r7, r7, lr
        LDR     lr, [r3, #box_x1]
        ADD     r7, r7, lr
        LDR     lr, [r2, #box_y1]
        SUB     r8, r8, lr
        LDR     lr, [r3, #box_y1]
        ADD     r8, r8, lr
        EXIT

60
        ; Else, we must be bounding the pointer, so some faffing to do

        ; Get the pointer's position
        SUB     sp, sp, #b_size
        MOV     r1, sp
        SWI     XWimp_GetPointerInfo
        ADD     r14, sp, #b_x
        LDMIA   r14, {r1,r2}
        ADD     sp, sp, #b_size
        BVS     %FT90

        ; Correct the parent box with a border equal to the distance from the
        ; pointer to the drag box edge.
        LDR     r0, [r3, #box_x0]
        ADD     r5, r5, r0
        SUB     r5, r5, r1
        LDR     r0, [r3, #box_y0]
        ADD     r6, r6, r0
        SUB     r6, r6, r2
        LDR     r0, [r3, #box_x1]
        ADD     r7, r7, r0
        SUB     r7, r7, r1
        Push    "r1,r2"
        MOV     r0, #-1
        MOV     r1, #VduExt_XEigFactor
        SWI     XOS_ReadModeVariable
        MOVVC   r0, r2
        Pull    "r1,r2"
        EXIT    VS
        MOV     lr, #1
        SUB     r7, r7, lr, ASL r0      ; To correct for non-exclusive-top-rightness of mouse's 'box'
        LDR     r0, [r3, #box_y1]
        ADD     r8, r8, r0
        SUB     r8, r8, r2
        Push    "r1,r2"
        MOV     r0, #-1
        MOV     r1, #VduExt_YEigFactor
        SWI     XOS_ReadModeVariable
        MOVVC   r0, r2
        Pull    "r1,r2"
        EXIT    VS
        MOV     lr, #1
        SUB     r8, r8, lr, ASL r0      ; To correct for non-exclusive-top-rightness of mouse's 'box'

        ; Parent box now constructed
        EXIT

90
        STRVS   r0, [sp]
        EXIT

99
        DCD     VduExt_OrgX
        DCD     VduExt_OrgY
        DCD     -1

        LTORG
bg_name         DCB     "bg", 0
fg_name         DCB     "fg", 0
setcolnoneset   DCB     18,0,128,23,17,3,0,0,0,0,0,0,0
setcolallset    DCB     18,0,128+63,23,17,3,&c0,0,0,0,0,0,0

        MakeInternatErrorBlock BadParameters,,BadParm

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; ByteSizeOfSprite
;
; In    r0 = x-OS units
;       r1 = y-OS units
;
; Out   r3 = size of sprite (multiple of words)
;
ByteSizeOfSprite Entry "r0,r1,r2,r5"

        ; Convert x-OS units to pixels per row
        MOV     r0, #-1
        BL      PixToOSUnitFactors
        BVS     %FT10

 [ debugstart
        DREG    r5,"Factors are ",cc
        DREG    r2, ","
 ]
        ; Convert x-OS units to pixels per row
        LDR     r0, [sp]
        MOV     r0, r0, LSR r5

        ; Convert y-OS units to rows
        MOV     r1, r1, LSR r2
        ADD     r1, r1, #1              ; Add one for overlap effects

        ; Convert pixels per row into bytes per row
        Push    "r0,r1"
        MOV     r0, #-1
        MOV     r1, #VduExt_Log2BPP
        SWI     XOS_ReadModeVariable
        ADDVS   sp, sp, #2*4
        BVS     %FT10
        Pull    "r0,r1"
        MOV     r0, r0, ASL r2          ; Bits per row
        MOV     r5, #32
        MOV     r5, r5, LSR r2          ; Pixels per word
        SUB     r5, r5, #1              ; minus one
        MOV     r5, r5, ASL r2          ; convert back to bits
        ADD     r0, r0, r5, ASL #1      ; Add two lots of that for left and right wastage
        MOV     r5, #1
        ADD     r0, r0, r5, ASL r2      ; Add another pixel for overlap effects
        ADD     r0, r0, #31             ; Round to a word
        BIC     r0, r0, #31
        MOV     r0, r0, LSR #3          ; Convert bits to bytes

        ; Multiply up and add the header
        MUL     r3, r0, r1
        ADD     r3, r3, #SpriteCBsize

10
        STRVS   r0, [sp]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; CoordSizeOfSprite
;
; In    (r1,r2)->sprite
;
; Out   (r0,r1) OS unit size of sprite
;
CoordSizeOfSprite Entry "r2-r6"
        MOV     r0, #SpriteReason_ReadSpriteSize
        BL      DoSpriteOp
        MOVVC   r0, r6
        BLVC    PixToOSUnitFactors
        EXIT    VS
        TEQ     r2,#0
        MOVNE   r1, r4, ASL r2
        MOVEQ   r1,r4

        TEQ     r5,#0
        MOVNE   r0, r3, ASL r5
        MOVEQ   r0, r3

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; PixToOSUnitFactors
;
; In    r0 = Mode to get factors for
;
; Out   r2 = Y factor
;       r5 = X factor
;
PixToOSUnitFactors Entry "r1"
        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        MOVVC   r5, r2
        [ {FALSE}
        MOVVC   r1, #VduExt_Log2BPC
        SWIVC   XOS_ReadModeVariable
        ADDVC   r5, r5, r2
        MOVVC   r1, #VduExt_Log2BPP
        SWIVC   XOS_ReadModeVariable
        SUBVC   r5, r5, r2
        ]
        MOVVC   r1, #VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; MakeSpriteArea
;
; In    r1 = pointer to pointer to sprite area
;       r3 = size of sprite area
;
; Out   Sprite area RMA claimed and initialised
;
MakeSpriteArea Entry "r0,r1,r2"
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        STRVS   r0, [sp]
        EXIT    VS
        STR     r2, [r1]
        STR     r3, [r2, #saEnd]
        MOV     r0, #16
        STR     r0, [r2, #saFirst]
        MOV     r1, r2
        LDR     r0, =SpriteReason_ClearSprites + &100
        SWI     XOS_SpriteOp
        EXIT    VC

        ; Error clearing the sprite area - free it and return
        STR     r0, [sp]                ; The error
        LDR     r1, [sp, #1*4]
        LDR     r2, [r1]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        MOV     r2, #Nowt
        STR     r2, [r1]
        EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DoSpriteOp
;
; In    r0 = SpriteOp (Without &100 or &200)
;       r1 = Sprite area:
;               0 - system sprite area
;               1 - Wimp's sprite area
;               other - user sprite area
;       r2 = Sprite name
;
DoSpriteOp Entry
        TEQ     r1, #1
        BEQ     %FT50
        TEQ     r1, #0
        ORRNE   r0, r0, #&100
        SWI     XOS_SpriteOp
        EXIT
50
        SWI     XWimp_SpriteOp
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Junk all allocated sprite areas (should call after drag finished)
;
Done Entry "r0,r1,r2"

 [ debugstart
        DLINE "Done start"
 ]

        ; Kill any drag, just in case it's ours!
        MOV     r1, #0
        SWI     XWimp_DragBox
        CLRV                    ; Cancel any error

        ADRVC   r1, fgsa
        BLVC    CheckedRMAFree
        ADRVC   r1, bg0sa
        BLVC    CheckedRMAFree
        ADRVC   r1, bg1sa
        BLVC    CheckedRMAFree
 [ debugstart
        DLINE "done end"
 ]
        EXIT    VC

        ; Error exit - return the original error and bumble through the rest!
        STR     r0, [sp]
        ADRL    r1, fgsa
        BL      CheckedRMAFree
        ADRL    r1, bg0sa
        BL      CheckedRMAFree
        ADRL    r1, bg1sa
        BL      CheckedRMAFree
        EXIT


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; CheckedRMAFree
;
; In    r1 = pointer to pointer to RMA block to free.
;
; Out   block freed
;
CheckedRMAFree Entry "r0,r2"
        LDR     r2, [r1]
        TEQ     r2, #Nowt
        EXIT    EQ

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        STRVS   r0, [sp]

        ; Clear the block regardless (avoids error loops)
        MOV     r2, #Nowt
        STR     r2, [r1]
        EXIT

        END
