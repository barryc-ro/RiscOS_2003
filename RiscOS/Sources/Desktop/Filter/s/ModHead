; > s.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

MySWIBase       *       Module_SWISystemBase + FilterSWI * Module_SWIChunkSize

        DCD     0                 ;Start - Module_BaseAddr
        DCD     Init              - Module_BaseAddr
        DCD     Die               - Module_BaseAddr
        DCD     Service           - Module_BaseAddr
        DCD     Title             - Module_BaseAddr
        DCD     Helpstr           - Module_BaseAddr
        DCD     Helptable         - Module_BaseAddr
        DCD     MySWIBase
        DCD     Filter_SWIdecode  - Module_BaseAddr
        DCD     Filter_SWInames   - Module_BaseAddr
        DCD     0
 [ International_Help <> 0
        DCD     message_file_name - Module_BaseAddr
 |
        DCD     0
 ]

; ----------------------------------------------------------------------------------------------------------------------
Title   DCB     "FilterManager",0
Helpstr DCB     "Filter Manager",9,"$VString ($Date)",0
                ALIGN
; ----------------------------------------------------------------------------------------------------------------------

prefilter_token         DCB     "PreFT",0
postfilter_token        DCB     "PostFT",0
rectfilter_token        DCB     "RectFT",0
copyfilter_token        DCB     "CopyFT",0
postrectfilter_token	DCB	"PostRectFT",0
posticonfilter_token    DCB     "PostIconFT",0
filter_token            DCB     "Filter",0
task_token              DCB     "Task",0
mask_token              DCB     "Mask",0
all_token               DCB     "All",0
                        ALIGN

min_gap         *       3
min_tab1        *       16
min_tab2        *       16

; ---------------------------------------------------------------------------------------------------------------------
;       Handle *Filters - List all attached filters with the tasks they are attached to.
Filters_Code
        Push    "LR"
        Debug   xx,"*Filters called listing pre_filters"

        LDR     wsptr,[R12]

        ADR     r1, prefilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        Pull    "PC",VS

        MOV     r4, #0                  ; r4 = how much space we are using on the stack to hold column headings.

        ADR     r1, filter_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, filter_text
        ADD     r5, r3, #min_gap        ; r5 = width of column 1
        CMP     r5, #min_tab1
        MOVCC   r5, #min_tab1

        ADR     r1, task_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, task_text
        ADD     r6, r3, #min_gap        ; r6 = width of column 2
        CMP     r6, #min_tab2
        MOVCC   r6, #min_tab2

        ADR     r1, mask_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, mask_text

        ADR     r1, all_token
        BL      lookuptostack
        BVS     %FT05
        STR     sp, all_text

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, pre_filters
        B       %FT02
01
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
	BLVC	Write32
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
02
        CMP     r3, #0
        BNE     %BT01

        SWI     XOS_NewLine

        ADRL    r1, postfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        BVS     %FT05

        LDR     r0, mask_text
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_filters
        B       %FT04
03
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        BVS     %FT05

        LDR     r0, [r3, #f_mask]
        ADR     r1, convert_buffer
        MOV     r2, #10
        SWI     XOS_ConvertHex8
        SWIVC   XOS_Write0
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
04
        CMP     r3, #0
        BNE     %BT03

	SWI	XOS_NewLine
	BVS	%FT05

        ADRL    r1, rectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, rect_filters
        B       %FT11

10
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
11
        CMP     r3, #0
        BNE     %BT10

        SWI     XOS_NewLine
	BVS	%FT05

        ADRL    r1, postrectfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_rect_filters
        B       %FT31

30
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
31
        CMP     r3, #0
        BNE     %BT30

        SWI     XOS_NewLine
	BVS	%FT05


        ADRL    r1, posticonfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, task_text
        MOV     r1, r6
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, post_icon_filters
        B       %FT41

40
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        BVS     %FT05

        LDR     r0, [r3, #f_task]
        CMP     r0, #0
        LDREQ   r0, all_text
        SWINE   XTaskManager_TaskNameFromHandle
        MOVVC   r1, r6
        BLVC    writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
41
        CMP     r3, #0
        BNE     %BT40

        SWI     XOS_NewLine
	BVS	%FT05


        ADRL    r1, copyfilter_token
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r0, filter_text
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, copy_filters
        B       %FT13
12
        LDR     r0, [r3, #f_name]
        MOV     r1, r5
        BL      writefield
        SWIVC   XOS_NewLine
        BVS     %FT05

        LDR     r3, [r3, #next_ptr]
13
        CMP     r3, #0
        BNE     %BT12
05
        ADD     sp, sp, r4
        Pull    "PC"

lookuptostack
; In:   r1->token
;       r4=current size of data on stack
; Out:  r1,r2 corrupted
;       r3=length of text found
;       r4=new size of data on stack
;       sp->text
        MOV     r7, lr                  ; Don't use stack in here (BLs are OK though)
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVS   pc, r7

        ADD     r1, r3, #4              ; Word align length (allow for terminator).
        BIC     r1, r1, #3
        SUB     sp, sp, r1              ; Allocate space on stack.
        ADD     r4, r4, r1

        MOV     r1, sp
06
        LDRB    r0, [r2], #1
        CMP     r0, #" "
        STRCSB  r0, [r1], #1
        BCS     %BT06
        MOV     r0, #0
        STRB    r0, [r1]
        MOV     pc, r7

writefield
; In:   r0 = text to print
;       r1 = field width
; Out:  r0,r2 corrupted
        Push    "lr"
        MOV     r2, r0
        BL	Write32
        Pull    "pc",VS
        SUB     r0, r0, r2
        SUB     r0, r1, r0
07
        SWI     XOS_WriteI+" "
        SUBS    r0, r0, #1
        BGE     %BT07
        Pull    "pc",,^

; ----------------------------------------------------------------------------------------------------------------------
Helptable
; ----------------------------------------------------------------------------------------------------------------------
Filtercommand
        Command "Filters",0,0,International_Help
        DCB     0
; ----------------------------------------------------------------------------------------------------------------------
 [ International_Help=0
Filters_Help
        DCB     "*Filters displays all pre and post Wimp_Poll filters currently active."
        DCB     0
Filters_Syntax
        DCB     "Syntax: *Filters",0
 |
Filters_Help    DCB     "HFLMFLT", 0
Filters_Syntax  DCB     "SFLMFLT", 0
 ]
        ALIGN
; ----------------------------------------------------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "r0-r3,LR"

        LDR     r2, [r12]
        CMP     r2, #0                  ; clears V
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #max_running_work
        SWI     XOS_Module
        ADDVS   sp,sp,#4
        Pull    "r1-r3,PC",VS

        STR     r2, [r12]
01
        MOV     r12, r2

; Clear list pointers

        MOV     r0, #0
        STR     r0, pre_filters
        STR     r0, post_filters
        STR     r0, rect_filters
	STR	r0, copy_filters
	STR	r0, post_rect_filters
	STR	r0, post_icon_filters
        STR     r0, flags               ; Clear flags.

; If we're on a Wimp earlier than 3.86, then we need to fake post-rectangle filters
	MOV	r0, #7
	SWI	Wimp_ReadSysInfo
	SUB	r0, r0, #256
	CMP	r0, #386-256
	MOVLT	r0, #1
	MOVGE	r0, #0
	STR	r0, fake_postrect

        ADR     R0,servicecallback
        MOV     R1,WP                   ; workspace pointer
        SWI     XOS_AddCallBack         ;   install the call back to broadcast we are here message
        MOVVC   R0,#-1
        STRVC   R0,callbackpending      ; and then setup a suitable flag to indicate we have a callback pending

        Pull    "r0-r3,PC",,^           ; No errors

;;-----------------------------------------------------------------------------
;; When the CallBack is granted we then broadcast a service call so that
;;   all Filters can be registered that are required.
;;-----------------------------------------------------------------------------

servicecallback
        ENTRY   "R0-R1"

        MOV     R1,#0                   ; the callback has been granted, so flag as no longer pending
        STR     R1,callbackpending

        LDR     R0,=Version
        MOV     R1,#Service_FilterManagerInstalled
        SWI     XOS_ServiceCall         ; broadcast the service

        EXITS
        LTORG

; ----------------------------------------------------------------------------------------------------------------------
;       Module service entry point
Service
        TEQ     R1,#Service_WimpRegisterFilters
        MOVNE   PC,LR

        LDR     R12, [R12]
        CMP     R12, #0
        MOVEQ   PC, LR                  ; Exit if no workspace

;-------------------------------------
; Register our filters with the Wimp
; In:
;  R12 -> workspace
;
; Out:
;   VC if filters registered

RegisterFilters
        Push    "r0-r2,LR"

	LDR	LR,fake_postrect
	MOVNE	R0,#0
	STRNE	R0,int_get_rectangle_reentry_addr

        LDR     LR,pre_filters
        CMP     LR,#0                   ; Any pre-filters?
        MOVNE   R0,#0                   ; Pre_filter
        ADRNEL  R1,pre_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register pre-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register pre-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,rect_filters
        CMP     LR,#0                   ; Any rect-filters?
	BNE	%FT01

	LDR 	LR,post_rect_filters
	CMP	LR,#0			; how about post-rect-filters?
	BEQ	%FT02
	LDR	LR,fake_postrect
	CMP	LR,#0

01      MOVNE   R0,#3                   ; rect_filter
        ADRNEL  R1,rect_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register rect-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register rect-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

02      LDR     LR,copy_filters
        CMP     LR,#0                   ; Any copy-filters?
        MOVNE   R0,#2                   ; copy_filter
        ADRNEL  R1,copy_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register copy-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register copy-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,post_filters
        CMP     LR,#0                   ; Any post-filters?
        MOVNE   R0,#WimpFilter_PostPoll
        ADRNEL  R1,post_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register post-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

        LDR     LR,post_icon_filters
        CMP     LR,#0                   ; Any post-icon-filters?
        MOVNE   R0,#WimpFilter_PostIconGetRectangle
        ADRNEL  R1,post_icon_filter_handler
        MOVNE   R2,R12

        Debug   register,"Register post-icon-filter",R0,R1,R2,LR

        SWINE   XWimp_RegisterFilter    ; Yes then register

        DebugE  register,"Cant register post-icon-filter "

	ADDVS	r13,r13,#4
        Pull    "r1-r2,PC",VS

	LDR	LR,fake_postrect
	TEQ	LR,#0
	Pull	"r0-r2,PC",NE

	LDR	LR,post_rect_filters
	CMP	LR,#0			; Any post-rect-filters?
	MOVNE	R0,#4			; post_rect_filter
	ADRNEL	R1,post_rect_filter_handler
	MOVNE	R2,R12

        Debug   register,"Register post-rect-filter",R0,R1,R2,LR

	SWINE	XWimp_RegisterFilter
	STRVS	r0,[r13]

	DebugE	register,"Can't register post-rect-filter "

        Pull    "r0-r2,PC"


; ----------------------------------------------------------------------------------------------------------------------
;       Reset button pressed. Wimp has shut down. Release filter handlers. Release linked lists of filters.
      [ Version < 4
svc_reset
        Push    "R0-R2, LR"

        ADR     r2, pre_filters
        BL      free_list               ; Free list of pre filters
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
        ADR     r2, post_filters
        BL      free_list               ; Free list of post filters
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters

        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostPoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_BlockCopy
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostIconGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        Pull    "R0-R2, PC",,^
      ]
; ----------------------------------------------------------------------------------------------------------------------
;       RMKill'ing the module  -  Release filter handlers. Release linked lists of filters.
Die
        Push    "R0-R11,LR"
;
        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "R0-R11,PC",EQ,^

        ADR     r2, pre_filters
        BL      free_list               ; Free list of pre filters
        ADR     r2, rect_filters
        BL      free_list               ; Free list of rect filters
        ADR     r2, post_filters
        BL      free_list               ; Free list of post filters
        ADR     r2, post_rect_filters
        BL      free_list               ; Free list of post rect filters
        ADR     r2, post_icon_filters
        BL      free_list               ; Free list of post icon filters
        ADR     r2, copy_filters
        BL      free_list               ; Free list of copy filters

        MOV     R0,#WimpFilter_PrePoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_GetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostPoll
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_BlockCopy
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        MOV     R0,#WimpFilter_PostIconGetRectangle
        MOV     R1,#0
        MOV     R2,#0
        SWI     XWimp_RegisterFilter    ; Ignore errors.

        LDR     R0,callbackpending
        CMP     R0,#0                   ; do we have a callback pending? (clears V)
        ADRNE   R0,servicecallback      ;   yes, so remove it before its granted
        MOVNE   R1,WP                   ;   as we are going to die
        SWINE   XOS_RemoveCallBack

        MOV     R0,#0
        STR     R0,callbackpending      ; and then remove it

        MOV     R1,#Service_FilterManagerDying
        SWI     XOS_ServiceCall         ; broadcast that the module is dying so you are no longer installed

      [ Version < 5
; Release all workspace
        MOV     r2, r12
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
      ]

        BL      MsgTrans_CloseFile      ; Make sure Messages file is closed.

        Pull    "R0-R11,PC",,^           ; don't refuse to die

; ----------------------------------------------------------------------------------------------------------------------
;       Write32 - output a control character terminated string
;
;       In: R0->Ctrl-terminated string
Write32
        Push    "R1,LR"
;
	MOV	R1,R0
01	LDRB	R0,[R1],#1
	CMPS	R0,#32
	MOVLO	R0,R1
	Pull	"R1,PC",LO
	SWI	XOS_WriteC
	BVC	%BT01
	Pull	"R1,PC"

        LNK     s.SWIs
