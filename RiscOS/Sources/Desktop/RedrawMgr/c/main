/* Title:   main.c
 * Purpose: main module of Redraw module
 * Author:  NK
 * History: 23-Nov-94: NK: created
 *          23-Nov-96: KB: total rewrite using new postrectangle filters
 *          03-Dec-96: KB: service calls added. only claims filter when in use.
 *          13-Mar-97: KB: post-icon callbacks added.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "kernel.h"
#include "swis.h"

#include "tbox:h.wimp"
#ifndef DONT_RMENSURE
#include "rmensure.h"
#endif
#include "tbox:h.wimplib"

#define IGNORE(a) a=a

#define Service_RedrawManagerInstalled 0xA5
#define Service_RedrawManagerDying     0xA6

#define Error_BadSWI                   0x1E6

#define ErrorBase_RedrawManager        0x80B900
#define Error_NoMem                    (ErrorBase_RedrawManager + 0)
#define Error_BadDeRegister            (ErrorBase_RedrawManager + 1)

#define ErrorCode_NoMem                0
#define ErrorCode_BadSWI               1
#define ErrorCode_BadDeRegister        2

#define flag_SetGfxWin       0x02u
#define flag_UseScreenCoords 0x04u
#define flag_PostIcon        0x08u

extern _kernel_oserror *err_nomem, *err_badswi;
extern _kernel_oserror *error_table[];

extern int register_post_rect(void);
extern int register_post_icon(void);
extern void clipping_rectangle(BBox *rect);

static void callout(BBox *warea, WimpGetWindowStateBlock *state,int flags);

static int post_filter_registered;
static int icon_filter_registered;
static void *my_pw;

#ifdef DEBUG
extern int __sl(void);
extern void tube_writec(int x);
static void debug_string(char *s,char *tag)
{
   char *l,label[64] = "RedrawMgr: ",temp[256];
   int *_sl = (int *) __sl();

   _kernel_getenv("RedrawDbg",temp,255);
   if (!strstr(temp,tag)) return;

   l= label;
   while (*l) tube_writec(*l++);
   sprintf(label," %p ",&l);
   l = label;
   while (*l) tube_writec(*l++);
   sprintf(label," %p ",__sl());
   l = label;
   while (*l) tube_writec(*l++);
   sprintf(label," %x %x ",_sl[-536/4],_sl[-540/4]);
   l = label;
   while (*l) tube_writec(*l++);

   while (*s) tube_writec(*s++);
   tube_writec('\n');
   tube_writec('\r');
}

void warning(int a,int b)
{
   char buf[128];
   sprintf(buf,"v3 not preserved - %x %x",a,b);
   debug_string(buf,"");
}

static void debug_output(char *tag,char *fmt,...)
{
   char buf[256];
   va_list list;

   va_start(list,fmt);
   vsprintf(buf,fmt,list);
   debug_string(buf,tag);

}

#endif

#ifdef DEBUG
void my_free(void *p)
{
   int *ip = ((int *) p) - 2;
   char buf[128];

   if (ip[0] != 'Redw') {
     sprintf(buf,"%p not a pointer",p);
     debug_string(buf,"memory");
     return;
   }
   if (ip[1] ==0) {
     sprintf(buf,"%p already freed",p);
     debug_string(buf,"memory");
     return;
   }
   ip[0] = 0;
   p = (void *) ip;
   sprintf(buf,"Freeing pointer %p",ip+2);
   debug_string(buf,"memory");
   free(p);
}
#else
#define my_free(p) free(p)
#endif

#ifdef DEBUG
void *my_malloc(int size)
{
   void *p;
   int *ip;
   char buf[128];
   size += 8;
   p = malloc(size);
   if (!p) return p;
   ip = (int *) p;
   ip[1] = size;
   ip[0] = 'Redw';
   p = (void *) (ip+2);
   sprintf(buf,"Allocated %d bytes to pointer %p",size-8,p);
   debug_string(buf,"memory");
   return p;
}
#else
#define my_malloc(p) malloc(p)
#endif


#define min(a,b) ((a>b) ? b:a)
#define max(a,b) ((a>b) ? a:b)

static _kernel_oserror *msgs_lookup_global_err(int index)
{
    /* Declared as a function to prevent incorrect relocation */
    extern void __module_header(void);
    static _kernel_oserror errblk;
    char *title = (char *)__module_header+((int *) __module_header)[4];

    return _swix(MessageTrans_ErrorLookup, _INR(0,2)|_IN(4), error_table[index], 0, &errblk, title);
}

/* convert work area coords to screen coords */

static void work_to_screen(BBox *wa, WimpGetWindowStateBlock *state)
{
    int offset;

    offset = state->visible_area.xmin - state->xscroll;
    wa->xmin += offset;
    wa->xmax += offset;

    offset = state->visible_area.ymax - state->yscroll;
    wa->ymin += offset;
    wa->ymax += offset;
}

#if 0
/* convert screen coords to work area */

static void screen_to_work(BBox *wa, WimpGetWindowStateBlock *state)
{
    wa->xmin -= state->visible_area.xmin - state->xscroll;
    wa->xmax -= state->visible_area.xmin - state->xscroll;

    wa->ymin -= state->visible_area.ymax - state->yscroll;
    wa->ymax -= state->visible_area.ymax - state->yscroll;

}
#endif


/* set up a graphics clip for work area */

static void graphics_rectangle(WimpGetWindowStateBlock *state, BBox *area)
{
   BBox rect;
   int offset;
   if (!area) return;

   offset = state->visible_area.xmin - state->xscroll;
   rect.xmin = area->xmin + offset;
   rect.xmax = area->xmax + offset - 1;

   offset = state->visible_area.ymax - state->yscroll;
   rect.ymin = area->ymin + offset;
   rect.ymax = area->ymax + offset - 1;

#ifdef DEBUG
   debug_output("clip","Setting graphics window to (%d,%d) - (%d,%d)",
                rect.xmin, rect.ymin,
                rect.xmax, rect.ymax);
#endif

   clipping_rectangle(&rect);
}

/* return the intersection of two rectangles - uses a static so bbox
   will not persist around calls. can go intersection(intersection(a,b),c)
   though.
 */

static BBox *intersection(BBox *a, BBox *b)
{
   static BBox intersect;
   if (!a || !b) return 0;

   if ((a->xmin >= b->xmax) || (a->xmax <= b->xmin) || (a->ymin >= b->ymax) || (a->ymax <= b->ymin)) return 0;
   intersect.xmin = max(a->xmin,b->xmin);
   intersect.xmax = min(a->xmax,b->xmax);
   intersect.ymin = max(a->ymin,b->ymin);
   intersect.ymax = min(a->ymax,b->ymax);

   return &intersect;
}

/* returns -1 -> no intersection
           0  -> intersection
           1  -> area totally inside bound
           */

static int check_bounds(BBox *bound, BBox *area)
{
  if ((bound->xmin >= area->xmax) || (bound->xmax <= area->xmin) ||
        (bound->ymin >= area->ymax) || (bound->ymax <= area->ymin)) return -1;

  if (bound->xmin <= area->xmin && bound->xmax >= area->xmax && bound->ymin <= area->ymin && bound->ymax >= area->ymax) return 1;

  return 0;

}

static int *windows_of_interest;
static int num_windows_of_interest;
#define ALLOC_BLOCK 32



static void do_filter(_kernel_swi_regs *r, int flags)
{
    /* r->r[0] = window, r->r[2] = task, r->r[6-9] = coords */

    WimpGetWindowStateBlock state;
    static const int vdu[] = { 128,129,130,131,4,5,-1 };
    struct
    {
        BBox clip;
        int xeig, yeig;
    } var;
    BBox narea;
    int offset;

    /* preserve graphics window */
    if (_swix(OS_ReadVduVariables, _INR(0,1), &vdu, &var))
    	return;

    var.clip.xmin <<= var.xeig;
    var.clip.ymin <<= var.yeig;
    var.clip.xmax <<= var.xeig;
    var.clip.ymax <<= var.yeig;

    state.window_handle = r->r[0];
    if (wimp_get_window_state(&state))
    	return;

    offset = state.visible_area.xmin - state.xscroll;
    narea.xmin = r->r[6] - offset;
    narea.xmax = r->r[8] - offset;

    offset = state.visible_area.ymax - state.yscroll;
    narea.ymin = r->r[7] - offset;
    narea.ymax = r->r[9] - offset;

    callout(&narea, &state, flags);

    clipping_rectangle(&var.clip);
}


extern void post_rect_filter(_kernel_swi_regs *r)
{
    do_filter(r, 0);
}


extern void post_icon_filter(_kernel_swi_regs *r)
{
#if 0
    _swix(Wimp_SetColour, _IN(0), 15);
    _swix(OS_Plot, _INR(0,2), 4, r->r[6],r->r[7]);
    _swix(OS_Plot, _INR(0,2), 5, r->r[6],r->r[9]-1);
    _swix(OS_Plot, _INR(0,2), 5, r->r[8]-1,r->r[9]-1);
    _swix(OS_Plot, _INR(0,2), 5, r->r[8]-1,r->r[7]);
    _swix(OS_Plot, _INR(0,2), 5, r->r[6],r->r[7]);
#endif
    do_filter(r, flag_PostIcon);
}


typedef struct _rects {
  struct _rects *next;
  BBox box;
  int data;
  int extra;
} Rectangles;

typedef struct _swctr {
  struct _swctr *next;
  Rectangles *rects;
  int SWI;
} SWIList;

typedef struct _winct {
  struct _winct *next;
  int handle;
  SWIList *swis;
} WinCtrl;

static WinCtrl *all_windows = 0;

static void callout(BBox *warea, WimpGetWindowStateBlock *state,int flags)
{
    WinCtrl *winlist;
    int bound=-1;
    BBox wa,*wap;
 #ifdef DEBUG
    char db[256];
    int sp;
    sprintf(db,"Calling out - stack at %p, flags=0x%x", &sp, flags);
    debug_string(db,"call");
 #endif

    for (winlist = all_windows; winlist; winlist = winlist->next)
    {
        if (winlist->handle == state->window_handle)
        {
            SWIList *swis;
            for (swis = winlist->swis; swis; swis = swis->next)
            {
                Rectangles *rects;
                for (rects = swis->rects; rects; rects = rects->next)
                {
                    wap = warea;

                    if (wap &&
                        (rects->extra & flag_PostIcon) == (flags & flag_PostIcon) &&
                        (bound = check_bounds(wap,&rects->box)) >= 0)
                    {
                        if (rects->extra & flag_SetGfxWin)
                            graphics_rectangle(state,intersection(wap,&rects->box));
                        if (rects->extra & flag_UseScreenCoords)
                        {
                            wa = *wap;
                            work_to_screen(&wa,state);
                            wap = &wa;
                        }
                        #ifdef DEBUG
                        debug_output("clip","Area being updated is (%d,%d) - (%d,%d)",
                                     wap->xmin, wap->ymin, wap->xmax, wap->ymax);
                        sprintf(db,"Calling SWI %x for data 0x%x", swis->SWI, rects->data);
                        debug_string(db,"call");
                        #endif
               	        _swix(swis->SWI, _INR(0,4), bound ? 1 : 0,
               	            	    	    	    wap,
               	            	    	    	    state,
               	            	    	    	    &rects->box,
               	            	    	    	    rects->data);
                    }
                }
            }
            return;
        }
    }
}


static void *working_alloc(int size)
{
   void *ptr = NULL;

   _swix(OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, size, &ptr);

   return ptr;

}

static void *working_realloc(void *ptr, int change)
{
   _swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 13, ptr, change, &ptr);

   return ptr;
}

static void working_free(void *ptr)
{
   _swix(OS_Module, _IN(0)|_IN(2), 7, ptr);
}


static char RectFilterName[] = "Redraw Manager";
#define IconFilterName RectFilterName


/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

#ifndef Filter_RegisterPostRectFilter
#define Filter_RegisterPostRectFilter   0x42648
#define Filter_DeRegisterPostRectFilter 0x42649
#endif

#ifndef Filter_RegisterPostIconFilter
#define Filter_RegisterPostIconFilter   0x4264a
#define Filter_DeRegisterPostIconFilter 0x4264b
#endif

static _kernel_oserror *register_post_filter(void)
{
    _kernel_oserror *e;
    e = _swix(Filter_RegisterPostRectFilter, _INR(0,3),
    	    	    	    	    	     RectFilterName,
    	    	    	    	    	     register_post_rect,
    	    	    	    	    	     my_pw,
    	    	    	    	    	     0);
    if (!e)
    	post_filter_registered = 1;
    return e;
}

static _kernel_oserror *register_icon_filter(void)
{
    _kernel_oserror *e;
    e = _swix(Filter_RegisterPostIconFilter, _INR(0,3),
    	    	    	    	    	     IconFilterName,
    	    	    	    	    	     register_post_icon,
    	    	    	    	    	     my_pw,
    	    	    	    	    	     0);
    if (!e)
    	icon_filter_registered = 1;
    return e;
}

static _kernel_oserror *deregister_filters(void)
{
    _kernel_oserror *e;

    if (post_filter_registered)
    {
        e = _swix(Filter_DeRegisterPostRectFilter, _INR(0,3),
        	    	    	    	    	       RectFilterName,
        	    	    	    	    	       register_post_rect,
        	    	    	    	    	       my_pw,
        	    	    	    	    	       0);
        if (e)
            return e;
        post_filter_registered = 0;
    }
    if (icon_filter_registered)
    {
        e = _swix(Filter_DeRegisterPostIconFilter, _INR(0,3),
        	    	    	    	    	       IconFilterName,
        	    	    	    	    	       register_post_icon,
        	    	    	    	    	       my_pw,
        	    	    	    	    	       0);
        if (e)
            return e;
        icon_filter_registered = 0;
    }
    return NULL;
}

#define Service_Error	    	       6
#define Service_FilterManagerInstalled 0x87
#define Service_FilterManagerDying     0x88

extern void Redraw_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    /* No need for switch if only one service call wanted - CMHG does the work */
#ifdef DEBUG
    switch (service_number)
    {
        case Service_FilterManagerInstalled:
#endif
            if (post_filter_registered)
                register_post_filter();
            if (icon_filter_registered)
                register_icon_filter();
#ifdef DEBUG
            break;
        case Service_Error:
            debug_string((char *) r->r[0]+4,"");
            break;
    }
#endif
}

/* If low memory, then some blocks can remain allocated */

static _kernel_oserror *add_interest(int flags,int win, int SWI, BBox *area,int data)
{
    int *list;
    WinCtrl *window;
    SWIList *swil;
    Rectangles *rects;
    _kernel_oserror *e;

    for (list = windows_of_interest; *list != -1 && *list !=win; list++)
       continue;

    if (*list == -1) {
       if (num_windows_of_interest%ALLOC_BLOCK == 0) {
         windows_of_interest = working_realloc (windows_of_interest,4 * ALLOC_BLOCK);

         if (!windows_of_interest) return msgs_lookup_global_err(ErrorCode_NoMem);
       }
       windows_of_interest[num_windows_of_interest-1] = win;
       windows_of_interest[num_windows_of_interest] = -1;
       num_windows_of_interest++;
    }

    for (window = all_windows; window; window = window->next)
    {
       if (window->handle== win) break;
    }

    if (!window) {
       window = my_malloc(sizeof(WinCtrl));
       if (!window) return msgs_lookup_global_err(ErrorCode_NoMem);
       window->next = all_windows;
       window->handle = win;
       window->swis = 0;
       all_windows = window;
    }

    for (swil = window->swis; swil; swil = swil->next)
    {
       if (swil->SWI == SWI) break;
    }
    if (!swil) {
       swil = my_malloc(sizeof(SWIList));
       if (!swil)
          return msgs_lookup_global_err(ErrorCode_NoMem);
       swil->next = window->swis;
       window->swis = swil;
       swil->SWI = SWI;
       swil->rects = 0;
    }
    rects = my_malloc(sizeof(Rectangles));
    if (!rects)
       return msgs_lookup_global_err(ErrorCode_NoMem);
    rects->next = swil->rects;
    swil->rects = rects;
    rects->data = data;
    rects->extra = flags;
    rects->box = *area;

    if (!(flags & flag_PostIcon) && !post_filter_registered)
    {
    	e = register_post_filter();
    	if (e) return e;
    }
    else if ((flags & flag_PostIcon) && !icon_filter_registered)
    {
    	e = register_icon_filter();
    	if (e) return e;
    }

    return NULL;
}

static _kernel_oserror *remove_interest(int flags, int win, int SWI, BBox *area, int data)
{
    WinCtrl    *window, **pw;
    SWIList    *swil,   **ps;
    Rectangles *rects,  **pr;

    /* remove this instance */
    for (pw = &all_windows, window = *pw; window; pw = &window->next, window = *pw)
    {
        if (window->handle == win)
        {
            for (ps = &window->swis, swil = *ps; swil; ps = &swil->next, swil = *ps)
            {
                if (swil->SWI == SWI)
                {
                    for (pr = &swil->rects, rects = *pr; rects; pr = &rects->next, rects = *pr)
                    {
                        if (!memcmp(area, &rects->box, sizeof(BBox)) &&
                             (flags & flag_PostIcon) == (rects->extra & flag_PostIcon))
                        {
                            /* got there remove it */
                            *pr = rects->next;
                            my_free(rects);

                            if (swil->rects == NULL)
                            {
                                /* no more regions for this SWI - remove it */
                                *ps = swil->next;
                                my_free(swil);

                                if (window->swis == NULL)
                                {
                                    /* no more swis for this window... */
                                    *pw = window->next;
                                    my_free(window);
                                }
                            }
                            goto out;
                        }
                    }
                }
            }
        }
    }

    /* If we've gotten here then we still haven't found what we're looking for... */
    return msgs_lookup_global_err(ErrorCode_BadDeRegister);

 out:

    /* Find someone else interested in this window */
    for (window = all_windows; window; window = window->next)
    {
       if (window->handle == win) break;
    }

    /* If no-one else is interested in this window, remove it from our list */
    if (!window)
    {
       int *list;
       for (list = windows_of_interest; *list != -1; list++)
       {
          if (*list == win)
          {
             int *copy = list+1;
             while ((*list++ = *copy++) !=-1);
                num_windows_of_interest--;
             if (num_windows_of_interest%ALLOC_BLOCK == 0)
                windows_of_interest = working_realloc(windows_of_interest,-4 * ALLOC_BLOCK);
             break;
          }
       }
       if (num_windows_of_interest == 1)
       	  return deregister_filters();
    }

    return NULL;
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

extern _kernel_oserror *Redraw_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    switch (swi_no) {
        case 0: /* Redraw_AddCallBack */
            return add_interest(r->r[0],r->r[1],r->r[2],(BBox *) r->r[3],r->r[4]);
        case 1: /* Redraw_RemoveCallBack */
            return remove_interest(r->r[0], r->r[1],r->r[2],(BBox *) r->r[3],r->r[4]);
        default:
            return msgs_lookup_global_err(ErrorCode_BadSWI);
    }
}

#ifdef HAS_CMDS

void print_list(void)
{
   WinCtrl *win;
   SWIList *swis;
   Rectangles *rects;
   int *list;

   for (win = all_windows; win; win = win->next)
   {
     printf("Interests in window %x\n", win->handle);
     for (swis = win->swis; swis; swis = swis->next)
     {
        printf("    For SWI %x\n", swis->SWI);
        for (rects = swis->rects; rects; rects = rects->next)
        {
           printf("        Region (%d,%d) to (%d,%d) (%s)\n",
                  rects->box.xmin, rects->box.ymin,
                  rects->box.xmax, rects->box.ymax,
                  rects->extra & flag_PostIcon ? "post-icon" : "post-rect");
        }
     }
   }

   printf("Summary: No. windows of interest %d\n", num_windows_of_interest -1);

   for (list = windows_of_interest; *list != -1; list++)
       printf("    handle = %x\n", *list);

}



/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *Redraw_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            print_list();
            break;
        default:
            break;
    }

    return NULL;
}
#endif

extern void register_cb(void);

extern _kernel_oserror *Redraw_final (int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);

#ifdef DEBUG
    debug_string("finishing...","init");
#endif

    deregister_filters();

    /* remove callback in case it hasn't gone off */
    _swix(OS_RemoveCallBack, _INR(0,1), register_cb, pw);
    _swix(OS_ServiceCall, _IN(1), Service_RedrawManagerDying);

    if (windows_of_interest) working_free(windows_of_interest);

#ifdef DEBUG
    debug_string("done.","init");
#endif

    return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

extern _kernel_oserror *Redraw_init(char *cmd_tail, int podule_base, void *pw)
{
#ifndef DONT_RMENSURE
    _kernel_oserror *e;

    /* need filter manager with post-icon filter capability */

    e = rmensure("FilterManager","FilterMgr","0.16");
    if (e) return e;
#endif

    if ((windows_of_interest = working_alloc(4*ALLOC_BLOCK)) == NULL)
        return msgs_lookup_global_err(ErrorCode_NoMem);

    windows_of_interest[0] = -1;
    num_windows_of_interest = 1;
    post_filter_registered = 0;
    icon_filter_registered = 0;
    my_pw = pw;

#ifdef DEBUG
    debug_string("starting...","init");
#endif

    return _swix(OS_AddCallBack, _INR(0,1), register_cb, pw);

    IGNORE(cmd_tail);
    IGNORE(podule_base);
}


