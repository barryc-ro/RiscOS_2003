/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

extern int module_insv_entry(_kernel_swi_regs *r, void *pw);
FILE *out;


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
//  out = fopen("pipe:out", "w");
  _swix(OS_Claim, _INR(0,2), 0x14, module_insv_entry, pw );

  return NULL;  
}


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module finalisation entry point.
 */
_kernel_oserror *
module_finalise( char *cmd_tail, int podule_base, void *pw )
{
  _swix(OS_Release, _INR(0,2), 0x14, module_insv_entry, pw);
  fclose(out);

  return NULL;
}



/*------------------------------------------------------------------------------
 * module_insv_handler
 *
 *      Module insv handler
 */
int module_insv_handler(_kernel_swi_regs *r, void *pw)
{
  printf("Buffer %x, byte &%02x\n", r->r[1], r->r[0]);

  return 1;
}


