; > Sources.Macros

;-----------------------------------------------------------------------------
; IRQOff  $reg
;
;       Turn IRQs off and save the PSR in $reg.
;
        MACRO
$label  IRQOff  $reg

$label  MOV     $reg, pc
        TST     $reg, #I_bit
        TEQEQP  $reg, #I_bit
        MEND

;-----------------------------------------------------------------------------
; SetPSR  $reg
;
;       Set the PSR from bits in $reg (normally saved by IRQOff or FIQOff).
;
        MACRO
$label  SetPSR  $reg

$label  TEQP      $reg, #0
        MEND

;-----------------------------------------------------------------------------
; SVCMode $reg
;
;       Set SVC mode with IRQs disabled saving PSR in $reg.
;
        MACRO
$label  SVCMode $reg

$label  MOV     $reg, pc
        TEQP    pc, #SVC_mode
        MEND

;-----------------------------------------------------------------------------
; IOMDBase $reg
;
;       Set $reg to IOMD base address.
;
        MACRO
$label  IOMDBase $reg,$cc
 [ IO_Type = "IOMD"
$label  MOV$cc  $reg, #IOMD_Base
 |
$label  MOV$cc  $reg, #&03000000
        ADD$cc  $reg, $reg, #&8000
        SUB$cc  $reg, $reg, #4
 ]
        MEND

;-----------------------------------------------------------------------------
; ComboBase $reg
;
;       Set $reg to Combo chip base address.
;
        MACRO
$label  ComboBase $reg,$cc

$label  MOV$cc  $reg, #&03000000
        ADD$cc  $reg, $reg, #&10000

        MEND

;-----------------------------------------------------------------------------
; Port1Enable
;
;       Enable keyboard
;
        MACRO
$label  Port1Enable $ra,$rb,$cc

$label  ComboBase $ra, $cc
	MOV$cc    $rb, #command_KBDENABLE
	STR$cc.B  $rb, [$ra, #PS2_COMMAND]
        MEND

;-----------------------------------------------------------------------------
; Port1IRQon
;
;       Enable port1 IRQs
;
        MACRO
$label  Port1IRQon $ra,$rb,$rc

$label  ComboBase $ra
	WaitForInputBufferEmpty $ra, $rc
	MOV	  $rc, #command_READSTAT
	STRB      $rc, [$ra, #PS2_COMMAND]
10	LDRB	  $rc, [$ra, #PS2_COMMAND]
	ANDS	  $rc, $rc, #1
	BEQ	  %BT10	;Wait until something comes back
	LDRB      $rb, [$ra, #PS2_DATA]
	Debug	  macro,"Port1IRQon - read ",$rb
	ORR	  $rb, $rb, #1
	MOV	  $rc, #command_WRITESTAT
	STRB      $rc, [$ra, #PS2_COMMAND]
;	WaitUntilWriteOk $ra, $rc
	WaitForInputBufferEmpty $ra, $rc
	STRB      $rb, [$ra, #PS2_DATA]
	Debug	  macro,"Port1IRQon - wrote ",$rb
        MEND

;-----------------------------------------------------------------------------
; Port1IRQoff
;
;       Disable keyboard IRQs
;
        MACRO
$label  Port1IRQoff $ra,$rb,$rc

$label  ComboBase $ra
	WaitForInputBufferEmpty $ra, $rc
	MOV	  $rc, #command_READSTAT
	STRB      $rc, [$ra, #PS2_COMMAND]
10	LDRB      $rc, [$ra, #PS2_COMMAND]
	ANDS	  $rc, $rc, #1
	BEQ	  %BT10	;Wait until something comes back
	LDRB	  $rb, [$ra, #PS2_DATA]
	BIC	  $rb, $rb, #1
	MOV	  $rc, #command_WRITESTAT
	STRB	  $rc, [$ra, #PS2_COMMAND]
	WaitForInputBufferEmpty $ra, $rc
	STRB	  $rb, [$ra, #PS2_DATA]
        MEND

;-----------------------------------------------------------------------------
; Port1Disable
;
;       Disable keyboard
;
        MACRO
$label  Port1Disable $ra,$rb,$cc

$label  ComboBase $ra, $cc
	MOV$cc    $rb, #command_KBDDISABLE
	STR$cc.B  $rb, [$ra, #PS2_COMMAND]
        MEND

;-----------------------------------------------------------------------------
; Port2Enable
;
;       Enable mouse
;
        MACRO
$label  Port2Enable $ra,$rb,$cc

$label  ComboBase $ra, $cc
	MOV$cc    $rb, #command_MSEENABLE
	STR$cc.B  $rb, [$ra, #PS2_COMMAND]
        MEND

;-----------------------------------------------------------------------------
; Port2IRQon
;
;       Enable mouse IRQs
;
        MACRO
$label  Port2IRQon $ra,$rb,$rc

$label  ComboBase $ra
	WaitForInputBufferEmpty $ra, $rc
	MOV	  $rc, #command_READSTAT
	STRB	  $rc, [$ra, #PS2_COMMAND]
10	LDRB	  $rc, [$ra, #PS2_COMMAND]
	ANDS	  $rc, $rc, #1
	BEQ	  %BT10	;Wait until something comes back
	LDRB	  $rb, [$ra, #PS2_DATA]
	Debug	  macro,"Port2IRQon - read ",$rb
	ORR	  $rb, $rb, #1<<1
	MOV	  $rc, #command_WRITESTAT
	STRB	  $rc, [$ra, #PS2_COMMAND]
;	WaitUntilWriteOk $ra, $rc
	WaitForInputBufferEmpty $ra, $rc
	STRB	  $rb, [$ra, #PS2_DATA]
	Debug	  macro,"Port2IRQon - wrote ",$rb
        MEND

;-----------------------------------------------------------------------------
; Port2IRQoff
;
;       Disable mouse IRQs
;
        MACRO
$label  Port2IRQoff $ra,$rb,$rc

$label  ComboBase $ra, $cc
	WaitForInputBufferEmpty $ra, $rc
	MOV       $rc, #command_READSTAT
	STRB	  $rc, [$ra, #PS2_COMMAND]
10	LDRB	  $rc, [$ra, #PS2_COMMAND]
	ANDS	  $rc, $rc, #1
	BEQ	  %BT10	;Wait until something comes back
	LDRB	  $rb, [$ra, #PS2_DATA]
	BIC	  $rb, $rb, #1<<1
	MOV	  $rc, #command_WRITESTAT
	STRB	  $rc, [$ra, #PS2_COMMAND]
	WaitForInputBufferEmpty $ra, $rc
	STRB	  $rb, [$ra, #PS2_DATA]
        MEND

;-----------------------------------------------------------------------------
; Port2Disable
;
;       Disable mouse state machine.
;
        MACRO
$label  Port2Disable $ra,$rb,$cc

$label  ComboBase $ra, $cc
	MOV$cc    $rb, #command_MSEDISABLE
	STR$cc.B  $rb, [$ra, #PS2_COMMAND]
        MEND

;-----------------------------------------------------------------------------
; ClearPS2
;
;       Clears the input buffer, regardless of stream
;
        MACRO
$label	ClearPS2  $ra,$rb

$label	ComboBase $ra
01	LDRB	  $rb, [$ra, #PS2_COMMAND]
	ANDS	  $rb, $rb, #1
	LDRNEB	  $rb, [$ra, #PS2_DATA]
	BNE	  %BT01

	MEND

;-----------------------------------------------------------------------------
; WaitForInputBufferEmpty
;
;       Waits until bit 1 of the system status is unset
;
        MACRO
$label	WaitForInputBufferEmpty $combobase, $scrap

$label
01	LDRB	  $scrap, [$combobase, #PS2_COMMAND]
	ANDS	  $scrap, $scrap, #1<<1
	BNE	  %BT01
	MEND


;-----------------------------------------------------------------------------
; WaitUntilWriteOk
;
;       Waits until OBF and IBF are 0
;
        MACRO
$label	WaitUntilWriteOk $combobase, $scrap

$label
01	LDRB	  $scrap, [$combobase, #PS2_COMMAND]
	ANDS	  $scrap, $scrap, #3
	BNE	  %BT01
	MEND


;--------------------------------------------------------------
        MACRO
$label  DebugTabInit $nil,$wk1,$wk2
$label
 [ debugtable
        ADR     $wk1, DebugTable
        STR     $wk1, DebugPtr
        ADR     $wk2, DebugTableEnd
$label.clr
        CMP     $wk1, $wk2
        STRCC   $nil, [$wk2, #-4]!
        BCC     $label.clr
 ]
        MEND

        MACRO
$label  DebugTab $wk1,$wk2,$v1,$v2,$v3
$label
 [ debugtable
        LDR     $wk1, DebugPtr
  [ "$v1" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v1
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v2" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v2
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v3" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v3
        STRB    $wk2, [$wk1], #1
  ]
        STR     $wk1, DebugPtr
 ]
        MEND

        END
