; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
 [ mousecmd
        DCD     HelpCmd        - Module_BaseAddr; Helptable
 |
 	DCD	0
 ]
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     0

;---------------------------------------------------------------------------
Title   DCB     "PCPS2Driver",0
Helpstr DCB     "PCPS2Driver",9,"$VString ($Date)",0
                ALIGN

;---------------------------------------------------------------------------
;       Module initialisation point.
;
; May corrupt R0-R6,R12,R14, must preserve R7-R11,R13
;
Init
        ENTRY
;
; Check machine type
;
        MOV     r0, #2                          ;Check main hardware details
        SWI     XOS_ReadSysInfo
        EXIT    VS
	;Ok, so it's a dummy call. So sue me.

;
; Hardware OK
;
        LDR     r2, [r12]                       ; Have we already some workspace?
        CMP     r2, #0
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace.
        EXIT    VS

        STR     r2, [r12]                       ; Store workspace pointer.
01
        MOV     r12, r2



 [ TMLDebug
        InsertTMLInitialisation 1               ;my TML card uses podule slot 1
 ]
       ;DLINE   "PS2 driver module initialisation"

 [ standalone
        ADRL     r0, resourcefsfiles
        SWI     XResourceFS_RegisterFiles
 ]

        MOV     r0, #0                          ;Initialise workspace.
 [ international
        STR     r0, message_file_open
 ]

        MOV     r0, #2                         ;2 ports on Phoebe
;        MOV     r0, #1                         ;Hardwire one port for initial Phoebe
        STR     r0, PortCount

;        BL      StartUp
;        BLVS    ShutDown

        EXIT
;
;Wrong hardware 
;
99
        EXIT


	LTORG
;---------------------------------------------------------------------------
;       Start up code.
;
StartUp
        ENTRY   "r0,r1,r2,channel"

        Debug   mod,"PS2: StartUp"
       ;DLINE   "PS2Driver: StartUp"

	;Init the PS2 controller itself
	ClearPS2 r0, r1

        Debug   mod,"Data port emptied, Resetting PS2 uC"
	ComboBase r1
	MOV	r0, #command_RESETPS2
	STRB	r0, [r1, #PS2_COMMAND]
;PHOEBE Maybe have a wait here, and then just check once, failing to init if not the correct reply?
20	LDRB	r0, [r1, #PS2_COMMAND]
	ANDS	r0, r0, #1
	BEQ	%BT20			;Wait until something comes back
	LDRB	r0, [r1, #PS2_DATA]

        Debug   mod, "After PS2 uC reset, read back ",r0

	MOV	r0, #&F000		;About 0.04s
	BL	DoMicroDelay

	ClearPS2 r0, r1			;Make sure there's nothing in the output register...

        BL      ClaimVectors
        BLVC    KeyInit
        BLVC    MouseInit

        MOV     r0, #2
        ADR     channel, PS2ch2         ;R10 points to channel workspace
        BLVC    StreamInit

        MOV     r0, #1
        ADR     channel, PS2ch1         ;R10 points to channel workspace
        BLVC    StreamInit

   [ {FALSE}
        LDR     r1, PortCount
        CMP     r1, #2
        BLT     %FT20
10
        ADRVC   channel, PS2ch2         ;R10 points to channel workspace
        BLVC    StreamEnable
20
   ]
        ADRVC   channel, PS2ch1         ;R10 points to channel workspace
        BLVC    StreamEnable

        MOVVC   r0, #0                  ; Get current pointer type.
        SWIVC   XOS_Pointer
        MOVVC   r1, r0
        BLVC    PointerSelected         ; Enable if one of ours.

 [ delayedport2
 	MOVVC	r0, #100		;Call after a second
 	ADRVC	r1, delayinit2
 	MOVVC	r2, r12			;wsptr
 	SWIVC	XOS_CallAfter
 ]

        Debug   mod,"PS2: StartUp exited"

        EXIT

 [ delayedport2
delayinit2
	ENTRY	"r0-r13"
        ADR	channel, PS2ch2         ;R10 points to channel workspace
	MOV	r0, #&A000		;About 0.02s
	BL	DoMicroDelay
        BL      StreamEnable
	EXIT
 ]

;---------------------------------------------------------------------------
;       Service handler.
;
Service
        TEQ     r1, #Service_Reset
 [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
 ]
        MOVNES  pc, lr

        LDR     r12, [r12]              ;Get workspace pointer

        TEQ     r1, #Service_Reset
        BEQ     StartUp
;	BEQ	%FT10

 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        MOVNES  pc, lr

        ENTRY   "r0-r3"
        ADR     r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
10
        EXITS
 |
        MOVS    pc, lr
 ]



;---------------------------------------------------------------------------
;       Sit on KEYV for enable call and so that LEDs can be set.
;
KeyVec
       ;TEQ     r0, #2          ;KeyDown
       ;BEQ     keyv_checkhotkeys

        TEQ     r0, #3
        BEQ     keyv_setleds

 [ PortInfo
        TEQ     r0, #KEYV_PortInfo
        BEQ     keyv_portinfo
 ]
        TEQ     r0, #4
        MOVNES  pc, lr

keyv_init
 [ debugtable
        ENTRY   "r0"
        DebugTab r0,lr,#&81
 |
        ENTRY
 ]
        IRQOff  lr
 [ KillAutoRepeat
        BL      ClearKbd
 ]
        LDRB    lr, KeyState            ; Safe to start sending keys.
        BIC     lr, lr, #state_RESET
        STRB    lr, KeyState
        EXITS

;keyv_checkhotkeys
;       ;ENTRY
;      ;;DREG    r1, "KEYV key down &",,LongWord
;       ;EXIT
;
;        TEQ     r1, #&60                ;Check for 'Reset Stork external Keyboard' hotkey
;        MOVNES  pc, lr
;
;        ENTRY   "channel"
;        ADR     channel, PS2ch1
;        BL      SendRESET               ;An asynchronous call
;        EXITS


keyv_setleds
 [ debugtable
        ENTRY   "r1,r2,channel"
        DebugTab r2,lr,#&82
 |
        ENTRY   "r1,channel"
 ]
        MOV     lr, r1
        TST     lr, #4                  ; Swap bits 0 and 2.
        BICEQ   r1, r1, #1
        ORRNE   r1, r1, #1
        TST     lr, #1
        BICEQ   r1, r1, #4
        ORRNE   r1, r1, #4
        STRB    r1, LEDState

        ADR     channel, PS2ch1         ;
        BL      SetLEDs                 ;checks device type
        ADR     channel, PS2ch2
        BL      SetLEDs
        EXITS

 [ PortInfo
;---------------------------------------------------------------------------
;
keyv_portinfo
        ENTRY "r5, channel"

        CMP     r1, #1
        LDRGE   r5, PortCount
        CMPGE   r5, r1
        EXITS   LT

        CMP     r1, #2
        ADRLT   channel, PS2ch1
        ADREQ   channel, PS2ch2

        LDRB    r2, DeviceType

        EXITS
 ]

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        ENTRY

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "pc",EQ,^

        BL      ShutDown

        EXITS

;---------------------------------------------------------------------------
;       Helptable
;
 [ mousecmd
HelpCmd
	=	"MouseOn",0
	ALIGN
        DCD     Cmd_MouseOn - Module_BaseAddr
        DCD	0
        DCD	0
        DCD	0
	DCB	0 ;EOT
	ALIGN
	
Cmd_MouseOn
	ENTRY "r0,channel, workspace"
	LDR	r12, [r12]
        ADR	channel, PS2ch2         ;R10 points to channel workspace
	MOV	r0, #&A000		;About 0.02s
	BL	DoMicroDelay
        BL      StreamEnable
	EXITS	
 ]
;---------------------------------------------------------------------------
;       Tidy up before dying.
;       out:  preserves all registers and flags.
;
ShutDown
        ENTRY   "r0-r2,r9"

        Debug   mod,"SM_ShutDown"

        BL      ReleaseVectors                  ; Don't want to be enabled/get LEDs any more.
;
; Must disable (Medusa) Kbd
;              (Kryten) Mse & Kbd
;
        LDR     r1, PortCount
        CMP     r1, #2
        BLT     %FT20
10
        Port2Disable r0,r1
20
        Port1Disable r0,r1


;>>>test for kbd active???
        MOV     r0, #0
        SWI     XOS_InstallKeyHandler
        SWI     XOS_InstallKeyHandler           ; Reinstall current key handler to clear keys down.
;>>>

 [ international
        LDR     r0, message_file_open           ; Close the message file if it's open.
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
 ]

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
 ]

        EXITS                                   ; Ignore errors, preserve flags.

        END
