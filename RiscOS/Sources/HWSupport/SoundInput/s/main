;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; Description of how the workspace is to be used
                         	^ 0, wp
Flags				# 1
Format				# 1
Frequency			# 1
Gain				# 1
OverrunCount			# 4
BufferHandle			# 4
MessagesWorkspace        	# 16      	; needed for messages routines
 [ counting
LostCount			# 4
ByteCount			# 4
 ]
GrabArea			# 64
workspace               	* :INDEX: @

; Bit definitions for Flags
flag_Present			* 1:SHL:0	; set => device present
flag_OwnIRQ             	* 1:SHL:1       ; set => IRQ owned for device
flag_Stereo			* 1:SHL:2	; set => stereo mode
flag_Boost			* 1:SHL:3	; set => 20dB boost on
flag_InternalBuffer		* 1:SHL:4	; set => allocated buffer
flag_CaptureMode		* 1:SHL:5	; set => currently capturing
flag_HaveMessages		* 1:SHL:6	; set => opened messages file
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

module          & 0
                & init    -module               ; => initalise routine
                & final   -module               ; => finalise routine
 [ standalonemessages
                & service -module               ; => service trap
 |
                & 0                             ; => no services needed!
 ]
                & title -module                 ; => title string
                & help  -module                 ; => help string
                & command_table-module		; => command table

                & &4c940			; => SWI base chunk
                & swi_handler  -module		; => code to handle swi calls
                & swi_table    -module		; => table of supported SWIs
                & 0

 [ :LNOT: No32bitCode
                & 0                             ; => not internationalised
                & flags -module                 ; => module flags
 ]


help            = "SoundInput", 9, "$Module_HelpVersion"
 [ debug
help            = "(debug on)"
 ]
                = 0

title
swi_table       = "SoundInput", 0
                = "Frequency", 0
		= "Format",0
		= "Gain",0
		= "Capture",0
		= "Halt",0
                = 0
		ALIGN

 [ :LNOT: No32bitCode
flags           DCD     ModuleFlag_32bit
 ]

command_table   = "SoundInputInfo", 0
		ALIGN
		DCD	soundinfo_command -module
		DCD	0
		DCD	SoundInfo_Syntax -module
		DCD	SoundInfo_Help   -module
		&	0

SoundInfo_Help    = "*SoundInputInfo will display internal statistics", 13
SoundInfo_Syntax  = "Syntax: *SoundInputInfo", 0


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ debug
Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
Debug_Module	SETL	False
Debug_File      SETS	"$.Debug"
 ]
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Globals
soundinfo_message   = "SoundInfo",0
soundinfo_mode	    = "   Mode           : ",0
soundinfo_freq      = "   Frequency (Hz) : ",0
soundinfo_format    = "   Format index   : ",0
soundinfo_stereo    = "   Stereo         : ",0
soundinfo_gain      = "   Gain           : ",0
soundinfo_boost	    = "   Boost          : ",0
soundinfo_buffer    = "   Buffer handle  : ",0
soundinfo_overrun   = "   Overruns       : ",0
 [ counting
soundinfo_bytes     = "   Bytes          : ",0
soundinfo_lost	    = "   Lost bytes     : ",0
 ]
soundinfo_ster      = "Stereo",0
soundinfo_mono      = "Mono",0
soundinfo_capture   = "Capture",0
soundinfo_idle      = "Idle",0
soundinfo_on	    = "On",0
soundinfo_off       = "Off",0

resource_file = "Resources:$.Resources.SoundInput.Messages", 0

default_frequency	* 2		; 8kHz for default
default_format		* 2		; 16 bit two's complement
default_stereo		* 0		; mono by default
default_gain		* 7		; gain of 7
default_boost		* 1		; boost on
default_sample_rate	* 4		; interupt every 4 samples

timeout 		* 100		; timeout period in centiseconds
default_buffer_size	* 128*1024	; default allocated buffer size

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Error declarations
	MakeErrorBlock SoundInput_BadSWI
	MakeErrorBlock SoundInput_Init
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;
init            ENTRY	"r7-r11"

                LDR     r2, [r12]		; r2 = &wp
                TEQ     r2, #0                  ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace          ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                      ; return if didn't work

                STR     r2, [wp]		; wp = r2
10
                MOV     wp, r2                  ; wp -> workspace

 [ standalonemessages
                ADR     r0, resource_file_block
                SWI     XResourceFS_RegisterFiles
 ]

                MOV     r0, #0
                STRB    r0, Flags
		STRB	r0, Format
		STR	r0, BufferHandle
		STR	r0, OverrunCount
 [ counting
		STR	r0, ByteCount
		STR	r0, LostCount
 ]
		BL	hardware_probe
		BLVC	hardware_initialise
		BLVC 	hardware_claim

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           ENTRY	"r0-r1,r11"

                LDR     wp, [r12]               ; wp -> workspace

; what are we doing at the mo ...
		LDRB	r1, Flags
		TST	r1, #flag_CaptureMode
		MOVNE	r0, #0
		BLNE	swi_halt

; and did we allocate a buffer ourselves
		TST	r1, #flag_InternalBuffer
		LDR	r0, BufferHandle
		SWI	XBuffer_Remove

; now sort the hardware out
		BL	hardware_remove		; release any owned IRQs

 [ standalonemessages
                ADR     R0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
 ]
                CLRV
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;
; Quickly test to see if they are of interest to use and pass on.

 [ standalonemessages

ursula_service
                &       0
                &       fastservice -module
                &       Service_ResourceFSStarting
                &       0
                &       ursula_service -module
service         MOV     r0, r0
                TEQNE   r1, #Service_ResourceFSStarting
                MOVNE   pc, lr
fastservice
                LDR     wp, [r12]	; sort the workspace pointer out

                Push    "r0-r3,lr"
                ADR     r0, resource_file_block
                MOV     lr, pc
                MOV     pc, r2
                Pull    "r0-r3,pc"				; and exit
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle the despatch of SWIs within the system, this simply involves resolving
; the private word pointer and then range checking the specified values. If the
; SWI number is out of range, return the appropriate error message
;
swi_handler	ROUT
                LDR     wp, [r12]      		; wp -> workspace

		CMP	r11, #(%30-%20)/4       ; check modulo swi number
		ADDCC	pc, pc, r11, LSL #2	; dispatch if in range
		B	%30
20
                B     	swi_frequency
		B	swi_format
		B	swi_gain
		B	swi_capture
		B	swi_halt
30
                ADR     r0, ErrorBlock_SoundInput_BadSWI
                SETV
                MOV     pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command DVBInfo
;
soundinfo_command	ENTRY "r0-r3"

                LDR     wp, [r12]   		; wp -> workspace

		ADRL	r0, soundinfo_message	; SoundInfo
		SWI	XOS_Write0
		SWI	XOS_NewLine
; mode
		ADRL	r0, soundinfo_mode
		SWI	XOS_Write0
		LDRB	r0, Flags
		TST	r0, #flag_CaptureMode
		ADRNEL	r0, soundinfo_capture
		ADREQL	r0, soundinfo_idle
		SWI	XOS_Write0
		SWI	XOS_NewLine
; frequency
		ADRL	r0, soundinfo_freq
		SWI	XOS_Write0
		MOV	r0, #0
		MOV	r1, #-1
		BL	swi_frequency
		MOV	r0, r2
		BL	Show_Integer
		SWI	XOS_NewLine
; format
		ADRL	r0, soundinfo_format
		SWI	XOS_Write0
		LDRB	r0, Format
		BL	Show_Integer
		SWI	XOS_NewLine
; stereo
		ADRL	r0, soundinfo_stereo
		SWI	XOS_Write0
		LDRB	r0, Flags
		TST	r0, #flag_Stereo
		ADRNEL	r0, soundinfo_ster
		ADREQL	r0, soundinfo_mono
		SWI	XOS_Write0
		SWI	XOS_NewLine
; gain
		ADRL	r0, soundinfo_gain
		SWI	XOS_Write0
		LDRB	r0, Gain
		BL	Show_Integer
		SWI	XOS_NewLine
; gain boost
		ADRL	r0, soundinfo_boost
		SWI	XOS_Write0
		LDRB	r0, Flags
		TST	r0, #flag_Boost
		ADRNEL	r0, soundinfo_on
		ADREQL	r0, soundinfo_off
		SWI	XOS_Write0
		SWI	XOS_NewLine
; overrun
		ADRL	r0, soundinfo_overrun
		SWI	XOS_Write0
		LDR	r0, OverrunCount
		BL	Show_Integer
		SWI	XOS_NewLine
; buffer handle
		ADRL	r0, soundinfo_buffer
		SWI	XOS_Write0
		LDR	r0, BufferHandle
		BL	Show_Integer
		SWI	XOS_NewLine
 [ counting
		ADRL	r0, soundinfo_bytes
		SWI	XOS_Write0
		LDR	r0, ByteCount
		BL	Show_Integer
		SWI	XOS_NewLine

		ADRL	r0, soundinfo_lost
		SWI	XOS_Write0
		LDR	r0, LostCount
		BL	Show_Integer
		SWI	XOS_NewLine
 ]
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Following routine taken unashamadly from the debug include file. Writes an
; integer to the scren.
;
; in:
;    r0 - value to be displayed

Show_Integer
        Push    "r1-r2, lr"
        SUB     r13, r13, #16
        MOV     r1, r13
        MOV     r2, #16
        SWI     XOS_ConvertInteger4
        SWIVC	OS_Write0
        ADD     r13, r13, #16
        Pull    "r1-r2, pc"

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generalised internationalisation routines, these ensure that messages files
; are correctly opened and then return the relevant data.
;
; Attempt to open the messages file.
; If messages not available, Z is set (and V will be set)
; If messages are available, Z will be clear (V state is unreliable)

open_messages   ENTRY   "r0-r3"
                LDRB    r3, Flags
                TST     r3, #flag_HaveMessages
                EXIT    NE                    ; ensure Z clear

                ADR     r0, MessagesWorkspace
                ADRL    r1, resource_file     ; -> path to be opened
                MOV     r2, #0                ; allocate some wacky space in RMA
                SWI     XMessageTrans_OpenFile
                LDRVCB  r3, Flags
                ORRVCS  r3, r3, #flag_HaveMessages ; ensure Z clear
                STRVCB  r3, Flags
                MOVVSS  r3, #0                ; ensure Z set

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Attempt to close the messages file.

close_messages  ENTRY   "r0"
                LDRB    r0, Flags
                TST     r0, #flag_HaveMessages
                BICNE   r0, r0, #flag_HaveMessages
                STRNE   r0, Flags

                ADRNE   r0, MessagesWorkspace
                SWINE   XMessageTrans_CloseFile
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generate an error based on the error token given.  Does not assume that
; the messages file is open.  Will attempt to open it, then look it up.
; if make_error_with_name is called, the module name is substituted in r4

make_error_with_name ENTRY
		ADRL	r4, title
		B	make_error_entry

make_error      ALTENTRY
                MOV     r4, #0
make_error_entry
                BL      open_messages
                EXIT    EQ                     ; V will be set

                ADR     r1, MessagesWorkspace
                MOV     r2, #0
                MOV     r3, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0
                SWI     XMessageTrans_ErrorLookup
                SavePSR r1
                BL      close_messages
                RestPSR r1,,f

                EXIT                           ; return, r0 -> block, V set

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This bit of appartently harmless code will bind a messages file into the code
; in the case of a standalone module. The macro ResourceFile will create the
; stuff and the label resource_file is used to point to the block required by
; ResourceFS

 [ standalonemessages
resource_file_block
	ResourceFile LocalRes:Messages, Resources.SoundInput.Messages
	DCD     0
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
