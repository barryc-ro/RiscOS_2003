;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

base_address		* &0302b800
sound_interrupt		* 11
irq_5_bit		* 1:SHL:3	; not defined in header files

			^ 0, r11
Index			# 4
Data			# 4
Status			# 4
PIOData			# 4

reg_linput              * 0   		; ADC input control
reg_rinput              * 1
reg_laux1_input         * 2   		; aux #1 input control
reg_raux1_input         * 3
reg_laux2_input         * 4   		; aux #2 input control
reg_raux2_input         * 5
reg_loutput             * 6   		; DAC output control
reg_routput             * 7
reg_data_format         * 8   		; f's and data format
reg_interface           * 9   		; interface configuration
reg_pin_control         * 10  		; pin control
reg_test_init           * 11  		; error status and init
reg_misc_info           * 12  		; mode and ID
reg_loopback            * 13  		; loopback control
reg_upper_base          * 14  		; upper base
reg_play_upper_base     * 14
reg_lower_base          * 15  		; lower base
reg_play_lower_base     * 15
reg_alternate_feature   * 16
reg_mic_mix_enable      * 17
reg_lline_input         * 18
reg_rline_input         * 19
reg_timer_low           * 20
reg_timer_high          * 21
regreserved22           * 22
reg_alt_status          * 24
reg_version_id          * 25
reg_mono_control        * 26
reg_powerdown           * 27
reg_capture_format      * 28
reg_crystal             * 29
reg_capture_upper_base  * 30
reg_capture_lower_base  * 31

index_trd		* 1:SHL:5
index_mce		* 1:SHL:6
index_init		* 1:SHL:7

status_int		* 1:SHL:0	; flags in status register
status_ser		* 1:SHL:4
status_crdy		* 1:SHL:5
status_cpio		* 1:SHL:7

interface_cen		* 1:SHL:1	; flags in register 9
interface_cpio		* 1:SHL:7
pin_ien			* 1:SHL:1	; flags in register 10
test_auto_calib		* 1:SHL:5	; flags in register 11
misc_mode2		* 1:SHL:6	; flags in register 12
alternate_te		* 1:SHL:6	; flags in register 16
powerdown_fren		* 1:SHL:3	; flags in register 27
format_stereo		* 1:SHL:4	; flags in register 28

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_probe
;
hardware_probe  Entry "r0-r1, r11"
 [ debug
   		DLINE	"hardware_probe"
 ]
		LDR 	r11, =base_address
; is init bit clear
		ADR	r0, Index
		MOV	r1, #index_init
		BL	wait_for_low
		BVS	%10

; check for device presence
		MOV	r0, #reg_misc_info
		STRB	r0, Index
		LDRB	r0, Data
		AND	r0, r0, #&f		; look at bottom nibble
		CMP	r0, #&0a		; is it &0a ?
		BEQ	%20
; construct error and set V flag
10
                ADR     r0, ErrorBlock_SoundInput_Present
		STR	r0, [sp]
                PullEnv
                B 	make_error
20
; set flags accordingly
                ; V guaranteed clear to get to here
		LDR	r0, Flags
		ORR	r0, r0, #flag_Present
		STR	r0, Flags

		EXIT

		MakeErrorBlock SoundInput_Present
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_initialise
;

hardware_initialise Entry "r0-r3, r11"

		LDR 	r11, =base_address
; is init bit clear
		ADR	r0, Index
		MOV	r1, #index_init
		BL	wait_for_low
		PullEnv	VS
		BVS	make_error

; ensure we are in mode 2
		MOV	r0, #reg_misc_info
		STRB	r0, Index
		LDRB	r0, Data
		ORR	r0, r0, #misc_mode2
		STRB	r0, Data

; ensure clock frequency divide select is enabled
		MOV	r0, #reg_powerdown
		STRB	r0, Index
		LDRB	r0, Data
		BIC	r0, r0, #powerdown_fren
		STRB	r0, Data

; ensure capture data is via programmed io (PIO)
		MOV	r0, #reg_interface+index_mce
		STRB	r0, Index
		LDRB	r0, Data
		ORR	r0, r0, #interface_cpio
		STRB	r0, Data

; clear MCE, will invoke autocalibration,
		MOV	r0, #0
		STRB	r0, Index

; poll for clear init bit
		ADR	r0, Index
		MOV	r1, #index_init
		BL	wait_for_low
                STRVS   r0, [sp]
		PullEnv	VS
		BVS	make_error

; clearing MCE will invoke autocalibration, poll for this to clear
		MOV	r0, #reg_test_init
		STRB	r0, Index

		ADR	r0, Data
		MOV	r1, #test_auto_calib
		BL	wait_for_low
                STRVS   r0, [sp]
		PullEnv	VS
		BVS	make_error

; program the frequency
		MOV	r0, #1:SHL:0		; set bit 0 to write to device
		MOV	r1, #default_frequency
		BL	swi_frequency

; program the format
		MOV	r0, #default_format
		MOV	r1, #default_stereo
		BL	swi_format

; program the gain and boost
		MOV	r0, #default_gain
		MOV	r1, #default_boost
		BL 	swi_gain
		CLRV
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_claim
;
hardware_claim  Entry	"r0-r4, r11"

 [ debug
   		DLINE	"hardware_claim"
 ]

; code to claim device vector
                LDR     r3, Flags               ; do we own the IRQ vector?
                TST     r3, #flag_OwnIRQ
                BNE     %10                     ; yes, then skip

                MOV     r0, #sound_interrupt
                ADDR    r1, handle_irq          ; -> irq handler routine
                MOV     r2, wp                  ; r2 -> workspace for device IRQ
                SWI     XOS_ClaimDeviceVector   ; and claim the irq routine
                STRVS   r0, [sp]
                PullEnv VS
                BVS	make_error

                LDR     r3, Flags		; modify flags
                ORR     r3, r3, #flag_OwnIRQ
                STR     r3, Flags
10
; IRQ bit in IOMD needs to be set
                SETPSR  I_bit,r1,,lr            ; disable IRQs, old PSR to R14, V clear
                LDR     r1, =IOC		; lets look at IOC
                LDRB    r0, [r1, #IOMD_IOTCR]   ; set our desired I/O speed (in network bits)
                BIC     r0, r0, #3
                ORR     r0, r0, #IOMD_IOTCR_Network_TypeC
                STRB    r0, [r1, #IOMD_IOTCR]
                LDRB    r0, [r1, #IOCIRQMSKB]   ; enable IRQ
                ORR     r0, r0, #irq_5_bit
                STRB    r0, [r1, #IOCIRQMSKB]
                RestPSR lr,,cf                  ; restore IRQs; lr:V was clear
                NOP

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_remove
;
; in:   SVC mode
;
; out:  -
;

hardware_remove	Entry "r0-r4, r11"
 [ debug
   		DLINE	"hardware_remove"
 ]
                LDR     r3, Flags
                TST     r3, #flag_OwnIRQ        ; do we currently own the IRQ
                EXIT    EQ

; release the IRQ
                MOV     r0, #sound_interrupt	; expansion card interrupt
                ADDR    r1, handle_irq          ; irq handler routine
                MOV     r2, wp                  ; r2 -> workspace for device IRQ
                SWI     XOS_ReleaseDeviceVector
                STRVS   r0, [sp]
                PullEnv VS
                BVS	make_error

                LDR     r3, Flags
                BIC     r3, r3, #flag_OwnIRQ    ; mark as not owning the IRQ
                STR     r3, Flags

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Wait for a bit at a memory location to go low
;
; in:  r0 -> location to look at
;      r1 =  match value
; out: r0 preserved
;      r1 preserved

wait_for_low	Entry "r2-r4"
		MOV	r2, r0
		SWI	XOS_ReadMonotonicTime
		ADD	r3, r0, #timeout
10
		LDR	r4, [r2]
		TST	r4, r1
		EXIT	EQ
		SWI	XOS_ReadMonotonicTime
		CMP	r0, r3
		BLE	%10

		ADRL	r0, ErrorBlock_SoundInput_Init
                PullEnv
                B	make_error

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
