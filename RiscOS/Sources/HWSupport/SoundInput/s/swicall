;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_frequency
;
; in:  r0 - flags (set bit 0 to program device with this frequency)
;      r1 - frequency index (-1 to read current)
; out: r0 - preserved
;      r1 - preserved (if r0 != -1 on entry)
;      r2 - frequency (Hz corresponding to index or current if r1 = -1)
;      r3 - number of entries in frequency table
;
swi_frequency 	ENTRY "r4-r7,r11"

; do we want to read the current value
		CMP	r1, #-1
		LDREQB	r1, Frequency		; load current index

		ADR	r4, freq_table		; start of table
		MOV	r5, #12			; calc offset into table
		MUL	r6, r1, r5
		ADD	r4, r4, r6

		LDR	r2, [r4,#0]		; frequency
		LDR	r6, [r4,#4]		; value for device
		LDR	r7, [r4,#8]		; timer value

; see if we should be programming the device with this frequency
		TST	r0, #1:SHL:0		; look for bit 0 set
		BEQ	%10

		STRB	r1, Frequency		; stash value in ws

		LDR 	r11, =base_address
		MOV	r4, #reg_data_format
		STRB	r4, Index
		LDRB	r4, Data		; pull current value
		BIC	r4, r4, #&f		; clear bottom nibble
		ORR	r4, r4, r6		; poke in value
		STRB	r4, Data		; stash result

; now program the timer to give reasonable interrupt frequency
		MOV	r5, #default_sample_rate
		MUL	r6, r7, r5

		MOV	r4, #reg_timer_low
		STRB	r4, Index
		AND	r4, r6, #&ff
		STRB	r4, Data

		MOV	r4, #reg_timer_high
		STRB	r4, Index
		MOV	r6, r6, LSR #8
		AND	r4, r6, #&ff
		STRB	r4, Data

		MOV	r4, #reg_alternate_feature
		STRB	r4, Index
		LDRB	r4, Data
		ORR	r4, r4, #alternate_te
		STRB	r4, Data
10

		MOV	r3, #(freq_table_end-freq_table) / 12
		EXIT

freq_table ; frequency, value for device, timer value
	DCD 5510,  1, 	18
	DCD 6620,  15,  15
	DCD 8000,  0,   13
	DCD 9600,  14,  11
  	DCD 11025, 3,   9
  	DCD 16000, 2,   7
  	DCD 18900, 5,   6
  	DCD 22050, 7,   5
  	DCD 27420, 4,   4
  	DCD 32000, 6,   4
  	DCD 33075, 13,  3
  	DCD 37800, 9,   3
  	DCD 44100, 11,  3
  	DCD 48000, 12,  2
freq_table_end
	ALIGN
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_format
;
; in:  r0 - format index, -1 to read
;      r1 - stereo/mono, -1 to read
; out: r0 - current format
;      r1 - current stereo/mono
;
swi_format 	ENTRY "r2-r3,r11"
; are we busy ?
		LDRB	r2, Flags
		TST	r2, #flag_CaptureMode
		ADRNE	r0, ErrorBlock_SoundInput_Busy
		PullEnv	NE
		BNE	make_error

; range check format index
		CMP	r0, #-1
		CMPNE	r0, #3
		BLE	%5
		ADR	r0, ErrorBlock_SoundInput_Format
		PullEnv
		B	make_error
5
; look at data format register and enable mode change
		LDR 	r11, =base_address
		MOV	r2, #reg_capture_format+index_mce
		STRB	r2, Index
		LDRB	r2, Data

; check for format value of -1 or index value out of range
		CMP	r0, #-1
		BEQ	%10
		CMP	r0, #3
		BGT	%10
		STRB	r0, Format
		MOV	r0, r0, LSL #5
		BIC	r2, r2, #3:SHL:5
		ORR	r2, r2, r0
10
; check for stereo value of -1 (read)
		CMP	r1, #-1
		BEQ	%20
		CMP	r1, #0
		ORRNE	r2, r2, #format_stereo		; we have a 1
		BICEQ	r2, r2, #format_stereo		;   otherwise
		LDRB	r3, Flags
		ORRNE	r3, r3, #flag_Stereo
		BICEQ	r3, r3, #flag_Stereo
		STRB	r3, Flags
20
; store the result back in device
		STRB	r2, Data

; clear MCE, will invoke autocalibration,
		MOV	r2, #reg_capture_format
		STRB	r2, Index

; poll for clear init bit
		ADR	r0, Index
		MOV	r1, #index_init
		BL	wait_for_low
		PullEnv	VS
		BVS	make_error

; clearing MCE will invoke autocalibration, poll for this to clear
		MOV	r2, #reg_test_init
		STRB	r2, Index

		ADR	r0, Data
		MOV	r1, #test_auto_calib
		BL	wait_for_low
		PullEnv	VS
		BVS	make_error

; pack up current state
		LDRB	r0, Format
		LDRB	r1, Flags
		TST	r1, #flag_Stereo
		MOVNE	r1, #1
		MOVEQ	r1, #0
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	MakeErrorBlock SoundInput_Busy
	MakeErrorBlock SoundInput_Format
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_gain
;
; in:  r0 - adc gain (-1 to read)
;      r1 - gain boost (0 disabled, 1 enabled), -1 to read
; out: r0 - current adc gain
;      r1 - current boost
;
swi_gain 	ENTRY "r2-r3,r11"

		MOV	r3, #0

; check for read of gain
		CMP	r0, #-1
		BEQ	%10
		CMP	r0, #&f
		MOVGT	r0, #&f
		STRB	r0, Gain
10
; check for read of boost
		CMP	r1, #-1
		BEQ	%20

		CMP	r1, #0
		LDRB	r1, Flags
		ORRNE	r1, r1, #flag_Boost
		BICEQ	r1, r1, #flag_Boost
		STRB	r1, Flags
20
; look at current values
		LDRB	r0, Gain
		LDRB	r1, Flags
		TST	r1, #flag_Boost
		MOVNE	r1, #1
		MOVEQ	r1, #0

; set up the byte of data
		ORR	r3, r3, r0
		ORR	r3, r3, r1, LSL #5
		ORR	r3, r3, #2:SHL:6

; program the device
		LDR 	r11, =base_address
		MOV	r2, #reg_linput
		STRB	r2, Index
		STRB	r3, Data

		MOV	r2, #reg_rinput
		STRB	r2, Index
		STRB	r3, Data

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_capture
;
; in:  r0 - flags
;      r1 - buffer handle, -1 to allocate
; out: r0 - preserved
;      r1 - buffer handle
;
swi_capture 	ENTRY "r0,r2,r11"

 [ debug
		DLINE	"SWI capture"
 ]
; do we need to allocate a buffer
		CMP	r1, #-1
		STRNE	r1, BufferHandle
		BNE	%10

; check for allocated already
		LDRB	r2, Flags
		TST	r2, #flag_InternalBuffer
		BNE	%10

; allocate buffer
		MOV	r0, #0				; flags
		LDR	r1, =default_buffer_size	; size
		MOV	r2, #-1				; auto allocate
		SWI	XBuffer_Create
                STRVS   r0, [sp]
		PullEnv	VS
		BVS	make_error

		STR	r0, BufferHandle
		LDRB	r2, Flags
		ORR	r2, r2, #flag_InternalBuffer
		STRB	r2, Flags

10
		LDR 	r11, =base_address
; enable card interrupts
		MOV	r2, #reg_interface
		STRB	r2, Index
		LDRB	r2, Data
		ORR	r2, r2, #interface_cen
		STRB	r2, Data

		MOV	r2, #reg_pin_control
		STRB	r2, Index
		LDRB	r2, Data
		ORR	r2, r2, #pin_ien
		STRB	r2, Data

; store state
		LDRB	r2, Flags
		ORR	r2, r2, #flag_CaptureMode
		STRB	r2, Flags

		LDR	r1, BufferHandle
 [ debug
		DREG	r1, "   buffer handle : "
 ]
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_halt
;
; in:  r0 - flags
; out: r0 - preserved
;
swi_halt 	ENTRY "r0-r1, r11"

		LDR 	r11, =base_address
; disable card interrupts
		MOV	r1, #reg_pin_control
		STRB	r1, Index
		LDRB	r1, Data
		BIC	r1, r2, #pin_ien
		STRB	r1, Data

		MOV	r1, #reg_interface
		STRB	r1, Index
		LDRB	r1, Data
		BIC	r1, r1, #interface_cen
		STRB	r1, Data

; reset state
		LDRB	r1, Flags
		BIC	r1, r1, #flag_CaptureMode
		STRB	r1, Flags

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
