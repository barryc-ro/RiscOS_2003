;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_irq
;

handle_irq	EntryS	"r0-r5,r9, r11"

                LDR     r11, =base_address	; r11 -> sound base

		LDR	r0, Status
		TST	r0, #status_crdy	; check for data
		BNE	handle_data		;    and handle
		TST	r0, #status_ser		; check for overruns
		BNE	handle_overrun		;    and handle
		B	handle_exit		; exit otherwise

; entry point when data present for the first pass, setup stuff we need
handle_data
		LDR	r1, BufferHandle	; get buffer handle
		ORR	r1, r1, #1:SHL:31	; block transfer
		MOV	r3, #0			; start at base of grab area
		ADR	r2, GrabArea		; get address of grab area
                MOV     r9, #INSV

; entry point for subsequent passes, stuff data in grab area
loop
		LDRB	r0, PIOData		; load byte from hardware
		STRB	r0, [r2, r3]
		ADD	r3, r3, #1		; increment pointer
                CMP	r3, #64			; grab area full
		BEQ	dump_data
		LDR	r0, Status		; check hardware for more bytes
		TST	r0, #status_crdy
		BNE	loop

; ok, pass block to buffer manager
dump_data
                ASSERT (IRQ_mode :OR: SVC_mode) = SVC_mode
                ASSERT (IRQ32_mode :OR: SVC_mode) = SVC32_mode
                SETPSR SVC_mode,r0,,r5          ; to SVC mode, old PSR in R5
		MOV	r4, r3                  ; non-banked register use
		Push	"lr"
                SWI	XOS_CallAVector
		Pull	"lr"
 [ counting
		LDRCS	r0, LostCount		; have we just lost data
		ADDCS	r0, r0, r4
		STRCS	r0, LostCount

		LDR	r0, ByteCount		; increment byte count
		ADD	r0, r0, r4
		STR	r0, ByteCount
 ]
		RestPSR r5,,cf                  ; followed by non-banked r use
		MOV	r3, #0			; start at base of grab area

; look at hardware to see if any more data is there
		LDR	r0, Status		; check hardware for more bytes
		TST	r0, #status_crdy
		BNE	loop
		CMP	r3, #0			; do we need to save data
		BGT	dump_data
		B	handle_exit

handle_overrun
		LDRNE	r0, OverrunCount
		ADDNE	r0, r0, #1
		STRNE	r0, OverrunCount

handle_exit
		MOV	r0, #0			; clear interrupt
		STRB	r0, Status
		EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END

