/* > standby.h
 *
 *      Standby header.
 */

#define STANDBY_SHUTDOWN_FLAG   (1<<0)
#define STANDBY_BUSY_FLAG       (1<<1)
#define STANDBY_ENABLE_KEYBOARD (1<<2)
#define STANDBY_ENABLE_POINTER	(1<<3)

#define STANDBY_STANDBY_FORCE_FLAG	(1<<0)
#define STANDBY_STANDBY_SKIP_PREQUIT	(1U<<31)

#define STANDBY_LED_NUMBER	1

#define STANDBY_ONLINE_EVENT	0x00000007

/* These grotty bits of preprocessor work as follows:
 * If ENABLE_DELAY is not set in the Makefile then the compiler is passed
 * '-DSTANDBY_ENABLE_DELAY='. This has the effect of defining
 * STANDBY_ENABLE_DELAY to be an empty string, in which case the preprocessor
 * expression has the value:
 *     0 * + 1 i.e. 0 * (+1), which is zero so the default value gets set
 * but if ENABLE_DELAY is set to a value in the Makefile then the compiler is
 * passed '-DSTANDBY_ENABLE_DELAY=<n>' and the expression has the value:
 *     0 * n + 1, which is non-zero so it's left alone.
 */

#if 0 * STANDBY_ENABLE_DELAY + 1 == 0
#undef STANDBY_ENABLE_DELAY
#define STANDBY_ENABLE_DELAY	500
#endif

/* If InitState not defined default to 1 (go into standby) */
#if 0 * STANDBY_INITIAL_STATE + 1 == 0
#undef STANDBY_INITIAL_STATE
#define STANDBY_INITIAL_STATE		1
#endif

extern _kernel_oserror *standby_initialise( void *pw );
extern void standby_finalise( void *pw );
extern _kernel_oserror *standby_state( _kernel_swi_regs *r );
extern _kernel_oserror *standby_standby( _kernel_swi_regs *r, void* pw );
extern _kernel_oserror *standby_online( _kernel_swi_regs *r, void *pw );
