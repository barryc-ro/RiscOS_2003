/* > standby.c
 *
 *	  Standby code.
 */

#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "standby.h"
#include "veneer.h"
#include "iomd.h"
#include "error.h"


static int Flags = 0;
static int PointerType;


static void
SetLEDs( int flag )
{
	int old_irqs = veneer_irqs_off();

	int iolines = (*(char *)IOMD_IOLINES) | IOMD_IOLINES_INPUTS | IOMD_STANDBY_LED_BIT;

	if ( flag == STANDBY_LED_GREEN ) iolines &= ~IOMD_STANDBY_LED_BIT;

	*(char *)IOMD_IOLINES = iolines;

	veneer_irqs_on( old_irqs );
}


static _kernel_oserror *
EnterStandby2( void )
/*
Called (indirectly from wimp-message-handler) by EnterStandby after no
Wimp task has objected to the standby.
 */
{
	int temp;
	_kernel_oserror *err = NULL;

	/* Disable handling of standby IRQ while we try to go into standby. */
	temp = veneer_irqs_off();
	Flags |= STANDBY_DISABLE_FLAG;
	veneer_irqs_on( temp );

	if ( (Flags & STANDBY_SHUTDOWN_FLAG) == 0 )
	{
		err = _swix( OS_UpCall, _IN(0)|_OUT(0), UpCall_Standby, &temp );

		/* Only enter standby if no-one objects. */
		if ( (err == NULL) && (temp != 0) )
		{
			err = _swix( OS_ServiceCall, _IN(1)|_OUT(1), Service_ShutDown, &temp );

			/* Only enter standby if no-one objects. */
			if ( (err == NULL) && (temp != 0) )
			{
				/* Blank the screen. */
				(void)_swix( ScreenBlanker_Control, _IN(0), ScreenBlankerReason_StrictBlank );

				/* Disable keyboard buffering. */
				err = _swix( OS_Byte, _IN(0)|_IN(1)|_IN(2)|_OUT(1), 201, 0xFF, 0, &temp );
				if ( (err == NULL) && (temp == 0) ) Flags |= STANDBY_ENABLE_KEYBOARD;

				/* Disable the mouse. */
				(void)_swix( OS_Pointer, _IN(0)|_OUT(0), 0, &temp );
				if ( temp != 255 )
				{
					PointerType = temp;
					(void)_swix( OS_Pointer, _IN(0)|_IN(1), 1, 255 );
					Flags |= STANDBY_ENABLE_POINTER;
				}

				/* Tell the world we're going into standby. */
				(void)_swix( OS_ServiceCall, _IN(1), Service_ShutDownComplete );

				Flags |= STANDBY_SHUTDOWN_FLAG;
				SetLEDs( STANDBY_LED_RED );

                                /* Tell the world we're now in standby. */
                                (void)_swix( OS_ServiceCall, _INR(0,1), Flags & STANDBY_SHUTDOWN_FLAG, Service_Standby );
				err = NULL;
			}
		}
	}

	/* Allow standby IRQ to work again. */
	temp = veneer_irqs_off();
	Flags &= ~STANDBY_DISABLE_FLAG;
	veneer_irqs_on( temp );

	return err;
}



static void
ExitStandby( void )
{
	/* Disable handling of standby IRQ while we try to go into standby. */
	int temp = veneer_irqs_off();
	Flags |= STANDBY_DISABLE_FLAG;
	veneer_irqs_on( temp );

	/* If we managed to enter standby then come out now. */
	if ( Flags & STANDBY_SHUTDOWN_FLAG )
	{
		/* Re-enable the mouse. */
		if ( Flags & STANDBY_ENABLE_POINTER )
		{
			(void)_swix( OS_Pointer, _IN(0)|_IN(1), 1, PointerType );
			Flags &= ~STANDBY_ENABLE_POINTER;
		}

		/* Re-enable keyboard buffering if required. */
		if ( Flags & STANDBY_ENABLE_KEYBOARD )
		{
			_swix( OS_Byte, _IN(0)|_IN(1)|_IN(2), 201, 0, 0 );
			Flags &= ~STANDBY_ENABLE_KEYBOARD;
		}

		/* Unblank the screen. */
		(void)_swix( ScreenBlanker_Control, _IN(0), ScreenBlankerReason_StrictUnblank );

		/* Tell the world we're coming out. */
		_swix( OS_UpCall, _IN(0), UpCall_Online );

		Flags &= ~STANDBY_SHUTDOWN_FLAG;
		SetLEDs( STANDBY_LED_GREEN );

                /* Tell the world we're out. */
                (void)_swix( OS_ServiceCall, _INR(0,1), Flags & STANDBY_SHUTDOWN_FLAG, Service_Standby );
	}

	/* Allow standby IRQ to work again. */
	temp = veneer_irqs_off();
	Flags &= ~STANDBY_DISABLE_FLAG;
	veneer_irqs_on( temp );
}





typedef struct
	{
	unsigned int		size;
	unsigned int		sender;
	unsigned int		myref;
	unsigned int		yourref;
	unsigned int		action;
	}
	message_header;

typedef struct	{
	message_header	header;
	union	{
		int	value;
		struct	{
			unsigned int	singletask;
			}
			data;
		}
		prequit;
	}
	message_prequit;


void	standby_wimpreplyhandler( _kernel_swi_regs* r, void* pw)
/*
Handler for replies to our message_PREQUIT. Called via assembler
'veneer_standby_wimpreplyhandler'.
 */
	{
	int	eventtype = r->r[0];
	if ( eventtype==19)	{
		/* message_PREQUIT has bounced, so we can proceed with shutdown	*/

		if ( NULL != EnterStandby2())	ExitStandby();
		/* Make sure system is reset to not-standby if an error occurred	*/
		}
	}

#undef TaskModule_SendMessage
#define TaskModule_SendMessage	0x4d300

static _kernel_oserror*	EnterStandby( void* pw )
	{
	message_prequit	message;
	message.header.size		= sizeof( message_prequit);
	message.header.yourref		= 0;
	message.header.action		= 8;	/* Message_PreQuit	*/
	message.prequit.data.singletask	= 0;
		/*
		If 1, task could terminate itself after its files have been saved. Doing things like this
		means that a task could try to send TaskModule a Ctrl-Shift-F12 to try to restart the
		shutdown, but this will be ignored.
		 */
	return _swix( TaskModule_SendMessage, _INR(0,5), 0, &message, 0, 0, veneer_standby_wimpreplyhandler, pw);
	}



static _kernel_oserror *
SwitchStandby( int state, void* pw )
{
	_kernel_oserror *err = NULL;

	if ( state )
	{
		err = EnterStandby( pw);

		if ( err != NULL ) ExitStandby();
	}
	else
		ExitStandby();

	return err;
}


_kernel_oserror *
standby_initialise( void *pw )
{
	_kernel_oserror *err = _swix( OS_ClaimDeviceVector, _IN(0)|_IN(1)|_IN(2),
									STANDBY_DEVNO, veneer_standby_irq, pw );
	if ( err == NULL )
	{
		int old_irqs;

#if 1
                EnterStandby2();
#else
		SetLEDs( STANDBY_LED_GREEN );
#endif

		old_irqs = veneer_irqs_off();
		*(char *)IOMD_IRQMSKC |= IOMD_STANDBY_IRQ_BIT;
		veneer_irqs_on( old_irqs );
	}

	return err;
}


void
standby_finalise( void *pw )
{
	int old_irqs = veneer_irqs_off();
	*(char *)IOMD_IRQMSKC &= ~IOMD_STANDBY_IRQ_BIT;
	veneer_irqs_on( old_irqs );

	_swix( OS_ReleaseDeviceVector, _IN(0)|_IN(1)|_IN(2),
			STANDBY_DEVNO, veneer_standby_irq, pw );

	/* Remove possible pending callback.
	 */
	if ( Flags & STANDBY_BUSY_FLAG )
		_swix( OS_RemoveTickerEvent, _IN(0)|_IN(1), veneer_standby_callback, pw );

	/*
	Should maybe deregister any callback from TaskModule for replies
	to our Message_PreQuit. Why not:

	1) Very unlikely that Standby module will quit while we are waiting for replies
	2) TaskModule doesn't provide a mechanism for cancelling callbacks...
	 */
}


_kernel_oserror *
standby_state( _kernel_swi_regs *r )
{
	r->r[0] = Flags & STANDBY_SHUTDOWN_FLAG;
	return NULL;
}


_kernel_oserror *
standby_standby( _kernel_swi_regs *r, void* pw )
{
	r->r[0] = Flags & STANDBY_SHUTDOWN_FLAG;
	return ( r->r[0] == 0 ) ? EnterStandby( pw ) : NULL;
}


_kernel_oserror *
standby_online( _kernel_swi_regs *r )
{
	r->r[0] = Flags & STANDBY_SHUTDOWN_FLAG;
	if ( r->r[0] ) ExitStandby();
	return NULL;
}


_kernel_oserror *
standby_control( _kernel_swi_regs *r )
{
	SetLEDs( r->r[0] & STANDBY_LED_FLAG );
	return NULL;
}


void
standby_irq( _kernel_swi_regs *r, void *pw )
{
	/* Interrupt from standby button. If we are already handling an interrupt
	 * or standby is disabled then ignore this one.
	 */
	if ( (Flags & (STANDBY_BUSY_FLAG | STANDBY_DISABLE_FLAG)) == 0 )
	{
		if ( _swix(OS_CallAfter, _IN(0)|_IN(1)|_IN(2),
					STANDBY_CALLAFTER, veneer_standby_callback, pw) == NULL )
		Flags |= STANDBY_BUSY_FLAG;
		*(char *)IOMD_IRQMSKC &= ~IOMD_STANDBY_IRQ_BIT;
	}

	NOT_USED( r );
}


void
standby_callback( _kernel_swi_regs *r, void *pw )
{
	int old_irqs;

	/* Only handle the real interrupt once.
	 */
	if ( (Flags & STANDBY_HANDLED_FLAG) == 0 )
	{
		SwitchStandby( (Flags & STANDBY_SHUTDOWN_FLAG) == 0, pw );
		Flags |= STANDBY_HANDLED_FLAG;
	}

	/* If the button is still pressed then keep setting callbacks
	 * until it is released.
	 */
	if ( (*(char *)IOMD_IOLINES & IOMD_STANDBY_IRQ_BIT) == 0 )
	{
		if ( _swix(OS_CallAfter, _IN(0)|_IN(1)|_IN(2),
					STANDBY_CALLAFTER, veneer_standby_callback, pw) == NULL )
			return;
	}

	/* Button has been released (or callback failed to set) so reset
	 * our flags and enable the interrupt again.
	 */
	Flags &= ~(STANDBY_BUSY_FLAG | STANDBY_HANDLED_FLAG);

	old_irqs = veneer_irqs_off();
	*(char *)IOMD_IRQMSKC |= IOMD_STANDBY_IRQ_BIT;
	veneer_irqs_on( old_irqs );

	NOT_USED( r );
}
