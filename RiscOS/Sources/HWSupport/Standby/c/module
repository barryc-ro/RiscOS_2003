/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "header.h"
#include "module.h"
#include "standby.h"
#include "task.h"


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
    _kernel_oserror *  e = NULL;

    standby_finalise( pw );
    e = task_closedown ();

    if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

    return e;

    NOT_USED( fatal );
    NOT_USED( podule );
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( const char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err = standby_initialise( pw );
    task_handle = 0;
    task_stack  = 0;

    /* Try to use TinyStubs if possible.
     */
    if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

    return err;

    NOT_USED( cmd_tail );
    NOT_USED( podule_base );
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
    switch (swi_no)
    {
        case Standby_State - Standby_00:
            return standby_state (r);

        case Standby_Standby - Standby_00:
            return standby_standby( r, pw );

        case Standby_Online - Standby_00:
            return standby_online( r, pw );

        default:
            return error_BAD_SWI;

    }
    NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module Service Call handler.
 */
void
module_service( int service_number, _kernel_swi_regs *r, void *pw )
{
    NOT_USED (pw);

    switch (service_number)
    {
        /* Don't claim service memory.  Don't need to object to it because we
         * don't need any application workspace.
         */

        case Service_StartWimp:
            if (task_handle == 0)
            {
                task_handle = -1;

                /* point to command to start task */
                r->r[0] = (int) MODULE_START_COMMAND;

                /* claim call */
                r->r[1] = 0;
            }
            break;

        case Service_StartedWimp:
            if (task_handle != -1) break;
            /* fall through */

        case Service_Reset:
            task_handle = 0;
            break;

        default:
            break;
    }
}

/*------------------------------------------------------------------------------
 * module_command
 *
 *      Module command handler.
 */
_kernel_oserror *
module_command( const char *arg_string, int argc, int cmd_no, void *pw )
{
    _kernel_oserror *  e = NULL;

    NOT_USED (arg_string);
    NOT_USED (argc);
    NOT_USED (pw);

    switch (cmd_no)
    {
        case CMD_Desktop_Standby:
            if (task_handle <= 0)
            {
                /* Enter our module's start code */
                e = _swix (OS_Module,
                           _INR (0, 1),

                           OS_Module_Enter,
                           Module_Title);
            }
            break;

        default:
            break;
    }

    return e;
}
