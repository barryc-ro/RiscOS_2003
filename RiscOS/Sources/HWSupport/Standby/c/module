/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "header.h"
#include "module.h"
#include "standby.h"
#include "task.h"

#include "DebugLib/DebugLib.h"

static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
    _kernel_oserror *  e = NULL;

    standby_finalise( pw );
    e = task_closedown ();

    if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

    return e;

    NOT_USED( fatal );
    NOT_USED( podule );
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( const char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err;

    /* Initialise DebugLib (if DEBUGLIB defined)
     */
    debug_initialise("Standby", "", "");
    debug_output_device(FILE_OUTPUT);
    debug_atexit();

    err = standby_initialise( pw );
    task_handle = 0;
    task_stack  = 0;

    /* Try to use TinyStubs if possible.
     */
    if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

    return err;

    NOT_USED( cmd_tail );
    NOT_USED( podule_base );
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
    switch (swi_no)
    {
        case Standby_State - Standby_00:
            dprintf(("", "Standby:module_swi: SWI Standby_State called\n"));
            return standby_state (r);

        case Standby_Standby - Standby_00:
            dprintf(("", "Standby:module_swi: SWI Standby_Standby called\n"));
            return standby_standby( r, pw );

        case Standby_Online - Standby_00:
            dprintf(("", "Standby:module_swi: SWI Standby_Online called\n"));
            return standby_online( r, pw );

        default:
            dprintf(("", "Standby:module_swi: Unknown SWI called\n"));
            return error_BAD_SWI;

    }
    NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module Service Call handler.
 */
void
module_service( int service_number, _kernel_swi_regs *r, void *pw )
{
    NOT_USED (pw);

    switch (service_number)
    {
        /* Don't claim service memory.  Don't need to object to it because we
         * don't need any application workspace.
         */

        case Service_StartWimp:
            dprintf(("", "Standby:module_service: Service_StartWimp received\n"));
            if (task_handle == 0)
            {
		_kernel_swi_regs rr;

                task_handle = -1;

                /* point to command to start task */
                r->r[0] = (int) MODULE_START_COMMAND;

                /* claim call */
                r->r[1] = 0;

		/* blanking the screen in initialisation doesn't work
                   as soneone else turns it on afterwards. Therefore
                   if we want to start up in Standby then reissue the
                   blank command here.
		   Check the actual current state in case someone has
		   brought us out of Standby already. */
		standby_state( &rr );
		if ( rr.r[0] )
		{
		    (void) _swix (ScreenBlanker_Control,
				  _IN (0),
				  ScreenBlankerReason_StrictBlank);
		}
            }
            break;

        case Service_StartedWimp:
            dprintf(("", "Standby:module_service: Service_StartedWimp received\n"));
            if (task_handle != -1) break;
            /* fall through */

        case Service_Reset:
            dprintf(("", "Standby:module_service: Service_Reset received\n"));
            task_handle = 0;
            break;

        default:
            dprintf(("", "Standby:module_service: Unknown service call received\n"));
            break;
    }
}

/*------------------------------------------------------------------------------
 * module_command
 *
 *      Module command handler.
 */
_kernel_oserror *
module_command( const char *arg_string, int argc, int cmd_no, void *pw )
{
    _kernel_oserror *  e = NULL;

    NOT_USED (arg_string);
    NOT_USED (argc);
    NOT_USED (pw);

    switch (cmd_no)
    {
        case CMD_Desktop_Standby:
            dprintf(("", "Standby:module_command: *desktop_standby invoked\n"));
            if (task_handle <= 0)
            {
                /* Enter our module's start code */
                e = _swix (OS_Module,
                           _INR (0, 1),

                           OS_Module_Enter,
                           Module_Title);
            }
            break;

        default:
            dprintf(("", "Standby:module_command: unknown * command invoked\n"));
            break;
    }

    return e;
}
