<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
            "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
<title>Comments on SCTransport</title>
<h2>Comments on SCTransport</h2>

<h3>Debugging</h3>
This module may be soft-loaded from Zip disc for debugging purposes,
providing you use the -fullinit flag:
<pre>    RMKill SCTransport
    RMLoad &lt;obey$dir&gt;.SCTrans -fullinit
</pre>

<h3>The Trouble with SCTransport...</h3>
Having just spent a couple of weeks fixing more than 20 bugs in this
module I now realise just how dodgy the whole thing is. I believe that all
of the major faults that Funai reported have now been fixed, but we do not
conform to the ISO spec and do not handle protocol and data transfer
errors very well.<P>

This code was originally ported from a Windows application and modified
for RISC OS. The functionality for the second card slot was added later
and done quite differently to the first card slot. It is therefore quite
likely that a bug on one card slot will not appear on the other card slot.<P>

This is a real mess and has resulted in a lot of wasted time where the
same bug had to be fixed on both slots in quite different ways. We really
need to fix this so that both slots are handled by the same code.<P>

Slot 1 works asynchronously, but slot 2 will often block while it waits
for bytes from the smart card. Slot 1 also handles timeouts much better
although its use of global variables for everything is pretty dire. <P>

<h3>Specific Problems</h3>

<ol>
<li>The blocking_readbyte routines waits indefinitely for serial bytes from
microcontroller. This isn't very safe. If a byte is lost we freeze the
entire machine. The routine has code to return within a second if no bytes
are received and this would seem wise, but it isn't included. It doesn't
completely solve the problem either. If we lose communication completely
when we are expecting 254 bytes we will take 254s to timeout...

<li>The ISO/IEC 7816 defines several timing parameters, such as CWT (Char
Waiting Time). Section 9.5.2.3 defines a block guardtime (BGT) which
defines the minimum period between the leading edge of two consecutive
characters sent in opposite directions. The Funai microcontroller knows
nothing about these delays and it is up us to ensure that the timing
requirements are met.

This version ignores all of the timing parameters returned from the card
in the ATR and appears to work correctly. Note that the first two bytes of
every command, and the ACK byte are interpretted by the microcontroller
and not passed to the card. This will provide a useful delay of several
bytes between the card sending data and receiving new data from us, and
this may be sufficient, although in the worst case, the slowest card might
not have enough of a delay even then. This should be considered if the
baud rate to the microcontroller is increased much above 9600.

<li>We do not fully conform to the ISO7816-3 specification. In particular,
our error handling and timing does not fully conform. We should handle
S(RESYNCH request) and S(WTX request) blocks.

<li>SCTransport_IssueCommand can return an error immediately, although the
CTS application does not expect it or handle it. This used to happen when
SCTransport decided that the card in slot 1 was faulty, but this caused
problems as nobody reported the error. This latest version doesn't mark
cards as faulty so if a command is repeated the operation will be repeated
and it is likely that the same error will occur. This works OK, but
IssueCommand can still return some errors which CTS should trap.

<li>Slot 2 does not check for timeouts at all. 

<li>Slot 2 does not handle unexpected responses for well. For example, if
we send an I-block to slot 2 with the wrong sequence number (for whatever
reason), the card will send an R-block asking for the correct block,
but we ignore this response and freeze.
</ol>

<h3>Fault Finding Notes</h3>

<ol>
<li>See the pmsdebug and db files for details on getting debug output.

<li>This code was originally ported from a Windows application and modified
for RISC OS. The functionality for the second card slot was added later
and done quite differently to the first card slot. It is therefore quite
likely that a bug on one card slot will not appear on the other card slot.
This is a real mess and given more time I would like to combine the code
to use the same routines for both card slots.
</ol><P>
Paul Skirrow, February 2000<P>

</body>
</html>

