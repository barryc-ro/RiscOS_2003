/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * To define those constants and data definitions required within the
 * module t0_sm.c which handles the smart card protocol T=0.
 */

#ifndef __T0__H
#define __T0__H

#define T0_RESP_LEN		2

#define T0_SW1_ERR		0x60
#define T0_SW1_OK		0x90
#define T0_SW2_OK		0x00
#define T0_PROC_NULL		0x60
#define T0_C2_LEN_ERR		0x6C
#define T0_C4_LEN_ERR		0x61
#define MASK_LSN		0xF0
#define MASK_MSN		0x0F

#define T0_CASE1		1
#define T0_CASE2		2
#define T0_CASE3		3
#define T0_CASE4		4

/* transmission states */
/* first S signifies a state, the next digit the command type, either
   case 1, 2, 3 or 4. If no digit it is a general state */
/* case 1 - no data to send, no response expected */
#define S1_WAIT_PROC1        	101
#define S1_WAIT_PROC2		102

/* case 2 - no data to send, response expected */
#define S2_WAIT_PROC1		201
#define S2_WAIT_PROC2		202
#define S2_WAIT_RESP_BLOCK	203
#define S2_WAIT_RESP_BYTE	204

/* case 3 - data to send, no response expected */
#define S3_WAIT_PROC1		301
#define S3_WAIT_PROC2		302

/* case 4 - data to send, response expected */
#define S4_WAIT_PROC1		401
#define S4_WAIT_PROC2		402
#define S4_WAIT_2_PROC1		403
#define S4_WAIT_2_PROC2		404
#define S4_WAIT_RESP_BLOCK	405
#define S4_WAIT_RESP_BYTE	406
#define S4_WAIT_RES_PROC1	407
#define S4_WAIT_RES_PROC2	408

#define S_T0_ENDED		500	/* not expecting any more data */

/* GETRESPONSE PDU constants */
#define GETRESP_CLA		0x00
#define GETRESP_INS		0xC0
#define GETRESP_P1		0x00
#define GETRESP_P2		0x00

#define T0_HDR_LEN		5

/* command header */
typedef struct {
  BYTE cla;
  BYTE ins;
  BYTE p1;
  BYTE p2;
  BYTE len;
} XPORT_HDR;

/* the command response data */
typedef struct {
  BYTE sw1;
  BYTE sw2;
} RESP_DATA;

extern int t0_State;

int  t0_StartCommand(BYTE * cmd_hdr, int data_len,
		      BYTE * data, int exp_len);
int  t0_ProcessByte(BYTE ch);
int  t0_GetData(BYTE * buff, int buff_len, int * rcv_len,
		BYTE * resp);
int  t0_CardStatusChange (bool card_in);
int  t0_Error(int err);
int  t0_OutputSent(void);
int  t0_ScipError(void);
void t0_Close(void);
bool t0_Init(void);

#endif
