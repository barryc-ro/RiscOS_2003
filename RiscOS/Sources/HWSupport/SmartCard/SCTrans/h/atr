/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * To provide the constant and data definitions for the module atr.c
 * which handles card reset and processing of answer-to-reset from the
 * card.
 */

#ifndef __ATR_H
#define __ATR_H

/* answer-to-reset constants */

#define ATR_TA_MASK		0x10
#define ATR_TB_MASK		0x20
#define ATR_TC_MASK		0x40
#define ATR_TD_MASK		0x80
#define ATR_Y_MASK		0xF0
#define ATR_K_MASK		0x0F
#define ATR_T_MASK		0x0F

#define T0_TYPE			0
#define T1_TYPE			1
#define ATR_F_MASK		0xF0
#define ATR_D_MASK		0x0F
#define ATR_I1_MASK		0x60
#define ATR_I2_MASK		0x1F
#define ATR_I1_SHIFT		5

#define MAX_PROTS		10

#define PTS_PTSS		0xFF
#define PTS_ACK			0xFF
#define PTS_DEF_PTS0		0
#define PTS_DEF_TCK		0xFF
#define PTSS_LEN		10
// following constants added for T=1 select
#define PTS_DEF_PTS1		1
#define PTS_ACK_T1		0xFE

/* states */

#define ENUM_ENTRY(y) y
#define ARRAY_ENTRY(y) #y
#define ALL_ATR_STATES(x) x(ATR_WAIT_TS),x(ATR_WAIT_T0),x(ATR_WAIT_TA), \
		x(ATR_WAIT_TB),x(ATR_WAIT_TC),x(ATR_WAIT_TD),		\
		x(ATR_WAIT_HIST),x(ATR_WAIT_TCK),x(ATR_ENDED),		\
		x(ATR_WAIT_PTS_ACK),x(ATR_WAIT_PROT_ECHO),		\
		x(ATR_WAIT_PROT_ACK),x(ATR_PTS_ENDED)

typedef enum {ALL_ATR_STATES(ENUM_ENTRY)} atr_states_t;

#define ATR_DEFAULT_WI		10
#define MS_PER_SEC		1000	/* milli-seconds per second */

typedef struct {
  int clk_rate;
  int bit_rate;
  int pc1;
  int pc2;
  int pv;
  int extra_time;
  int type;
} PROT_PARAMS;

typedef struct {
  BYTE TS;			/* this is the ATR part of the structure */
  BYTE T0;
  BYTE TA1;
  BYTE TB1;
  BYTE TC1;
  BYTE TD1;
  BYTE TA2;
  BYTE TB2;
  BYTE TC2;
  BYTE TD2;
  BYTE TA3;
  BYTE TB3;
  BYTE TC3;
  BYTE HIST[16];	/* these are the history bytes of the ATR */
  BYTE TCK;		/* check character is last byte of the ATR  */
  			/* and is only present for T=1 protocol */
  BOOL card_inserted;	/* is the card inserted */
  int card_type;	/* sync/async/I2C/MicroWire/unknown */
  int protocol;		/* which protocol is to be used T=0 (default) or T=1 */
  int optional_protocol;/* for two protocol cards T=0 (default) or T=1 */
  int BWT;		/* block wating time  */
  int CWT;		/* character wating time  */
  int IFSC;
  int N;
  int WI;
  int K;		/* K number of history bytes */
} card_state_t;

extern card_state_t card_status;
extern atr_states_t AtrState;

int atr_Start (BOOL reset);
int atr_Error (int err);
int atr_ProcessByte (BYTE ch);

#endif
