/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __module_h
#define __module_h

#include "kernel.h"
#include "debug/remote.h"

#ifdef REMOTE_DEBUG
extern debug_session *db;
#elif defined(DEBUG)
#define db stderr
#undef debug_printf
#define debug_printf fprintf
#else
extern void *db;
#endif

#define BOOL   int
#define TRUE   (1)
#define FALSE  (0)
#define DWORD  int
#define WORD   int


/*
 * Funai uC definitions and declarations
 */
#define FUNAI_TWINSLOT TRUE
#define RETRY_BODGE FALSE
#define EVENT_RETRY TRUE
#define OLD_GETATR  FALSE

#if EVENT_RETRY
  extern unsigned int	g_event_busy;
  
  #define EVENT_IDLE		0x00
  #define EVENT_BUSY		0x01
  #define EVENT_BUSYCB		0x02
#endif

#if FUNAI_TWINSLOT
  typedef struct
  {
    unsigned char       NAD;
    unsigned char       PCB;
    unsigned char       LEN;
    unsigned char       LRC;
  } apdu;
  #define DATABLOCK_LEN 4096
  extern char   g_slot2_state;
  extern unsigned char	g_record;
  extern int	g_funai_header;
  extern char	g_slot2_datablock_state;
  extern unsigned char   g_slot2_datablock[DATABLOCK_LEN];
  extern unsigned char  *g_slot2_dataptr;
  extern char	g_uc_state;
  extern BOOL	g_card1_in;
  extern BOOL	g_card2_in;
  extern BOOL	g_card2_insertpending;
  extern unsigned int g_slot2_readtime;
  extern apdu   g_slot2_apdu;

/* Microcontroller state list */
  #define UC_IDLE		0x00
  #define UC_BUSY		0x01
  #define UC_RET_CARDOPEN	0x02
  #define UC_RET_APDU		0x03

/* Slot2 state list */
  #define IDLE			0x00
  #define GET_ATR		0x01
  #define VERIFY_SEND		0x02
  #define VERIFY_RESPONSE	0x03
  #define RECORDREAD_SEND	0x04
  #define RECORDREAD_RESPONSE	0x05
  #define WAITING_INSERT	0x06
  #define ERROR_BUSY		0x07
  #define CMD_RESPONSE_HDR      0x08
  #define CMD_RESPONSE_BODY     0x09
  
/* Slot2 timeout time */
  #define SLOT2_TIMEOUT_TIME	250 /* cS */
 
/* Microcontroller command list */
  #define CMD_CARDOPEN		0x00
  #define RET_CARDOPEN		0x01
  #define CMD_CARDCLOSE		0x02
  #define CMD_APDU		0x03
  #define RET_APDU		0x04 /* Bidirectional */
  #define CMD_NUMSLOTS		0x05
  #define RET_NUMSLOTS		0x06
  #define CMD_SLOTSTATE		0x07
  #define RET_SLOTSTATE		0x08
  #define CMD_CARDSTATE		0x09
  #define RET_CARDSTATE		0x0A
  #define MSG_CARDINSERT	0x0B
  #define MSG_CARDREMOVE	0x0C
  #define RET_ERROR		0x0D
  #define RET_ERROR2		0xFA
  #define ACK			0xFF

  #define NO_HEADER		0xFE /* Should never be generated by uC */
  
  #define UC_ERR_BROKEN		0x00
  #define UC_ERR_NOTPRESENT	0x01
  #define UC_ERR_CLOSED		0x02
  #define UC_ERR_ACCESS		0x03
  
  #define SLOT_1		0x01
  #define SLOT_2		0x02
  #define NO_SLOT		0xFF
#endif


/*
 * event handling declarations
 */
#define UpCallV 0x1d
#define EventV	0x10

#define UpCall_DeviceRxDataPresent (15)
#define UpCall_DeviceThresAbove    (16)
#define UpCall_DeviceThresBelow    (17)

#define Event_Expansion		    (21)
#define Event_Expansion_SCTransport (1)
#define Event_RS423Error 	    (7)

#define Service_SCTransportStarting (0xbb)

#define flag_event_pending     (1<<0) /* set when processing events */
#define flag_timeout_pending   (1<<1) /* set when timeout timer is setup */
#define flag_timeout_to_handle (1<<2) /* set, timeout fired but not processed */
#define flag_initialised       (1<<3) /* set, after post-init */
#define flag_debouncing	       (1<<4) /* set if currently debouncing */
#define flag_data_pending      (1<<5) /* set to defer data until after bounce */
#define flag_dsr_state	       (1<<6) /* set when dsr is active */

typedef enum { SC_Event_Nothing,           /* 0 */
	       SC_Event_DataPresent,	   /* 1 */
	       SC_Event_Timeout,	   /* 2 */
	       SC_Event_SerialError,	   /* 3 */
	       SC_Event_CardIn,		   /* 4 */
	       SC_Event_CardOut		   /* 5 */
	       } t_sctrans_events;

#define SerialEvent_Parity         (1<<5)
#define SerialEvent_Overrun	   (1<<4)
#define SerialEvent_Framing	   (1<<3)
#define SerialEvent_DSR		   (1<<2)
#define SerialEvent_DCD		   (1<<1)
#define SerialEvent_Error 	   (SerialEvent_Parity| \
				   SerialEvent_Overrun| \
				   SerialEvent_Framing)

/*
 * normal module junk
 */
#define ERR_RETURN(err,stmt)   {err = (stmt); if (err) return err;}
#define ERR_GOTO(err,stmt)     {err = (stmt); if (err) goto exit_gracefully;}
#define NOT_USED(v)            ((v)=(v))
#define CLEAR_FLAG(f,b)        (f &= ~b)
#define SET_FLAG(f,b)          (f |= b)


#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43

#define ERROR_NOTINIT          (SCTransport_00+0)
#define ERROR_MEMFAIL	       (SCTransport_00+1)

#define ERROR_STRUCT(name,text) \
  static struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_##name,text}

#define ERROR_EXTERN(name) extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))

void DebugFileInit(char*filename);

#endif
