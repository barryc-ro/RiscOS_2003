<HTML>
<HEAD>
  <TITLE>
    SCTransport Functional Specification
  </TITLE>
</HEAD>

<BODY BGCOLOR="#ffffff">

<CENTER>
  <H1>
    SCTransport Functional Specification
  </H1>
</CENTER>

<HR>
<P ALIGN=CENTER><STRONG>CONFIDENTIAL</STRONG></P>
<HR>

<CENTER>
<TABLE BORDER=0 WIDTH="40%">
<TR><TD>Document ref:	<TD>
<TR><TD>Project:	<TD>Funai III
<TR><TD COLSPAN=2>$Revision$
<TR><TD COLSPAN=2>$Date$
<TR><TD>Author(s):	<TD>Rich Buckley
<TR><TD>Change:		<TD>
<TR><TD>Classification: <TD>
</TABLE>
</CENTER>

<HR>

<H2> Contents </H2>

<TABLE BORDER=0 WIDTH="100%">
<TR><TD WIDTH="8%">1.0	<TD><A HREF="#overview">Overview </A>
<TR><TD>2.0	<TD><A HREF="#outstanding">	Outstanding issues </A>
<TR><TD>3.0	<TD><A HREF="#technical">	Technical background </A>
<TR><TD>3.1	<TD><A HREF="#hardware">	Hardware </A>
<TR><TD>3.2	<TD><A HREF="#software">	Software </A>
<TR><TD>4.0	<TD><A HREF="#user">		User interface </A>
<TR><TD>5.0	<TD><A HREF="#programmer">	Programmer interface </A>
<tR><TD>6.0	<TD><A HREF="#interchange">     Data interchange </A>
<TR><TD>7.0     <TD><A HREF="#formats">         Data formats </A>
<TR><TD>8.0	<TD><A HREF="#acceptance">	Acceptance test </A>
<TR><TD>9.0    <TD><A HREF="#noncompliances">  Non compliances </A>
<TR><TD>10.0	<TD><A HREF="#test">		Development test strategy </A>
<TR><TD>11.0	<TD><A HREF="#organisation">	Product organisation </A>
<TR><TD>12.0	<TD><A HREF="#enhancements">	Future enhancements </A>
<TR><TD>13.0	<TD><A HREF="#glossary">	Glossary </A>
<TR><TD>14.0	<TD><A HREF="#references">	References </A>
<TR><TD>15.0	<TD><A HREF="#history">		History </A>
</TABLE>

<HR>

<H2> <A NAME="overview"> 1.0 Overview </A> </H2>

The Funai NC is fitted with two smart card readers. The primary role for the
smart card is to contain user information which can be used for such
purposes as identification and access control. The smart card can also
contain data with regards to configuring the NC.
<p>

<HR>

<H2> <A NAME="outstanding"> 2.0 Outstanding issues </A> </H2>

None.

<HR>

<H2> <A NAME="technical"> 3.0 Technical background </A> </H2>

<h3> <a name="hardware">3.1 Hardware </a></h3>

The hardware module interfaces the smart card to the ARM using an 8051
micro-controller. It performs the following items of functionality :
<ul>
  <li> Reset smart card on signal from ARM.
  <li> Automatically shutdown smart card when it is removed.
  <li> Perform byte convention interpretation.
  <li> Perform error detection and retransmission automatically.
  <li> Automatically detect two types of synchronous memory cards
  (I<sup>2</sup>C and Microwire protocols). Provide commands for
  reading/writing from/to these cards.
</ul>
<p>
<b>Note the OS currently does not support the reading and writing to
synchronous memory cards.</b>
<p>

The microprocessor firmware is currently frozen at release 1.3.3.
<p>

<h3> <a name="software">3.2 Software</a> </h3>

The smart card interfacing micro-controller communicates with the ARM
using serial port 1. The SCTransport module implements the smart card 
protocol and provides the facility to issue commands to, and receive 
data from one card, and to read the URL data from the other.
<p>

<HR>
<H2> <A NAME="user"> 4.0 User interface </A> </H2>
<code>
<b>
<pre>
<b>SCTransInfo</b>
</pre>
</b>
</code>
Syntax
<br>
<ul>
<b><code>
     *SCTransInfo
</b></code>
</ul>
<br>
<p>
Use
<ul>
Provides status information about the Smartcard slots, such as whether a slot
is open, closed etc.
</ul>
<p>
<HR>

<H2> <A NAME="programmer"> 5.0 Programmer interface </A> </H2>

<!---- SCTransport ---->

The following API is implemented by the SCTransport module. It is used
to allow higher level smart card modules to send/receive T=0 and T=1 protocol
commands.
<p>
<h4> Error handling </h4>

The following is a list of the error responses which may be generated.

<center>
<table border=1>
<tr> <td align=center> Symbolic name <td align=center> Error Number <td
align=center> Description

<tr> <td align=center> SCI_SUCCESS <td align=center> 0 <td> Success

<tr> <td align=center> SCI_E_SEQ <td align=center> 1 <td> Function
called out of sequence. Eg an attempt to read a response before
issuing a command.

<tr> <td align=center> SCI_E_INVAL <td align=center> 2 <td>
Argument(s) invalid.

<tr> <td align=center> SCI_E_NODATA <td align=center> 3 <td> An
attempt has been made to get response data before it is available.

<tr> <td align=center> SCI_E_TRANS <td align=center> 4 <td> Another
process has locked the card using SCTransport_StartTrans

<tr> <td align=center> SCI_E_TRUNC <td align=center> 5 <td> Buffer was
not long enough to contain all the data.

<tr> <td align=center> SCI_E_SYS <td align=center> 6 <td> Unexpected
error returned by the system software.

<tr> <td align=center> SCI_E_API <td align=center> 7 <td> Unexpected
error detected within the API.

<tr> <td align=center> SCI_E_TOOMANY <td align=center> 8 <td> Limit on
number of connections exceeded.

<tr> <td align=center> SCI_E_PROTO <td align=center> 9 <td> Smart card
protocol error.

<tr> <td align=center> SCI_E_COMMS <td align=center> 10 <td>
Communications error with card reader.

<tr> <td align=center> SCI_E_OUT <td align=center> 11 <td> Card removed.

<tr> <td align=center> SCI_E_ISLOT <td align=center> 12 <td> Invalid slot number

<tr> <td align=center> SCI_E_BADCARD <td align=center> 13 <td> Bad card
<tr> <td align=center> SCI_E_NOTURL <td align=center> 14 <td> Not a 'service' card
<tr> <td align=center> SCI_E_BADDATA <td align=center> 15 <td> Data corrupt
</table>
</center>

<h4> SWI's </h4>
<code><b>
<pre>
<b>SCTransport_Open (SWI &4D400)</b>

On Entry - R0 - bits 0 - 30 - message id
           R1 - pointer to buffer to return card handle in

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_Open ( int msge_id, int *chandle)</b>
</pre></b> </code>
<p>
Establish a channel to the smart card transport, returning a handle to
be used for subsequent calls in R1. <code> message id </code> is used to request asynchronous
notification of events using <code> Event_Expansion_SCTransport</code>. 
See the section about <a href="#events">events</a> for more information.
<p>
If <code>message id</code> is zero the event signalling mechanism will not
be used, it is assumed that the caller will poll for the response
data.
<p>
The value returned from <code>SCTransport_Open</code> is either
<code>SCI_SUCCESS (0)</code>, or a pointer to a standard RISC OS error block.<p>
If a channel is opened with a smart card not present,
an error will be returned but a valid card handle will be
allocated. After notification of the error, the application would then 
either wait for asynchronous notification or close the channel and try 
again until a successful response is returned.
<p>
<code><b>
<pre>
<b>SCTransport_RetrieveATR (SWI &4D401)</b>

On Entry - R0 - card handle
           R1 - pointer to buffer to return ATR structure in
           R2 - length of buffer
           R3 - number of bytes written into buffer

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_RetrieveATR ( int chandle, char *atrbuff, int buff_len, int *exp_len)</b>
</pre></b></code>
<p>
Should be the first call after a successful open call. Note that it does not retrieve the
whole ATR, but _only_ the historical ATR data if present.

<p>
<code><b>
<pre>
<b>SCTransport_Close (SWI &4D402)</b>

On Entry - R0 - card handle

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_Close ( int chandle)</b>
</pre></b></code>
<p>
Close an open channel to a smart card.
<p>
<code><b>
<pre>
<b>SCTransport_IssueCommand (SWI &4D403)</b>

On Entry - R0 - card handle
           R1 - pointer to command header (CLA, INS, P1, P2)
           R2 - length of data buffer
           R3 - pointer to data buffer
           R4 - expected length (LC) if required. 0 otherwise.

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_IssueCommand ( int chandle, int *cmd_hdr, int dbuff_len, char *dbuff, int *exp_len)</b>
</pre>
</b></code>
<p>
Send a command to the smart card on the given channel. It is assumed
that the command header complies with the standard defined in <a
href="#references"> ISO 7816-3 </a> consisting of the four bytes
<code>CLA, INS, P1, P2</code>. The other bytes of the standard (NAD, PCB, LEN and the checksum) are automatically generated from the arguments passed in
<code>R2</code> and <code>R4</code>. No check is
performed on the validity of the header or the consistency of the data
and header.
<code><b>
<pre>
<p>
<b>SCTransport_ReadResponse (SWI &4D404)</b>

On Entry - R0 - card handle
           R1 - pointer to buffer, 0 if not expecting data.
           R2 - length of buffer
           R3 - pointer to the number of data bytes to read
           R4 - pointer to 2 byte [SW1:SW2] response buffer

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_ReadResponse ( int chandle, char *buff, int buff_len, int *nbytes, char *resp_buff)</b>
</pre>
</b></code>
<p>
Obtain the smart card response to the previous command issued on a
given channel. This should be invoked after each
<code>SCtransport_IssueCommand</code> call.
<p>
Register R4 should contain a pointer to a buffer of at least 2 bytes 
length which will
contain bytes SW1 and SW2 of the application response PDU as defined
in <a href="#references"> ISO 7816-3 </a>.

<p>
<code><b>
<pre>
<b>SCTransport_StartTrans (SWI &4D405)</b>

On Entry - R0 - card handle

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_StartTrans ( int chandle)</b>
</pre></b></code>
<p>
Locks the card to be unavailable to any channel other than the one
from which this command was invoked (<code>card handle</code>). Unlocking of
the card is performed either by calling <code>SCTransport_EndTrans</code>,
<code>SCTransport_Close</code> or by the card being removed. This call will
only lock the channel for the slot for which <code>card handle</code> relates
to, ie. if <code>card handle</code> relates to slot 0, then this SWI can
still be called with another <code>card handle</code> relating to slot 1.
<p>
<code><b>
<pre>
<b>SCTransport_EndTrans (SWI &4D406)</b>

On Entry - R0 - card handle

On Exit  - R0 - Pointer to error block or 0 for success

C Prototype <b>_kernel_oserror *SCTransport_EndTrans ( int chandle)</b>
</pre></b></code>
<p>
Unlocks a card previously locked by a call to
<code>SCTransport_StartTrans</code>. Any other open channels are
now free to use the card.

<p>
<code><b>
<pre>
<b>SCTransport_Error (SWI &4D407)</b>

On Entry - R0 - card handle

On Exit  - R0 - pointer to standard RISC OS error block
                R0+0  Error Number
                R0+4  Pointer to error string (0 terminated)

C Prototype <b>_kernel_oserror *SCTransport_Error ( int chandle)</b>
</pre></b></code>
<p>
If the last call for channel failed, this SWI will return the error code 
(in <code>R0+0</code>) giving details of the failure.
<p>

<p>
<code><b>
<pre>
<b>SCTransport_SlotInfo (SWI &4D40A)</b>

On Entry - R0 - flags word, all bits currently reserved

On Exit  - R0 - total number of slots available

C Prototype <b>_kernel_oserror *SCTransport_SlotInfo ( int flags, int slot, int *slots)</b>
</pre></b></code>
<p>
This SWI returns the number of smart card slots available. 
<p>

<p>
<code>
<pre>
<b>SCTransport_InitSlot2 (SWI &4D40B)</b>

On Entry - R0 - flags word, all bits currently reserved

On Exit  - R0 - 0 if success, error otherwise.
</PRE></CODE>
<P>
This SWI starts fetching the data off the card in slot 2. If there is no card in the slot,
it will return SCI_E_OUT. Do _NOT_ access slot 1 between issuing this SWI and 
SCTransport_ReadSlot2 returning an error (other than SCI_E_NODATA) or SCI_SUCCESS.

<p>
<code>
<pre>
<b>SCTransport_ReadSlot2 (SWI &4D40C)</b>

On Entry - R0 - flags word, all bits currently reserved
           R1 - pointer to buffer to read data into
	   R2 - length of buffer in bytes

On Exit  - R0 - error code, 0 if success
           R1 - length of data in buffer
           R2 - length of data not in buffer
	   All other registers preserved
</PRE></CODE>
<P>
This SWI returns the data off the card in slot 2, iff it's a URL smartcard. The expected
length of data returned is 256 bytes. If no card/wrong card, returns an error.

<p>
<code>
<pre>
<b>SCTransport_PowerControl (SWI &4D40D)</b>

On Entry - R0 - Reason code:
		0 - Power up
		1 - power down
           R1 - Slot number

On Exit  - R0 - 0
	   All other registers preserved
</PRE></CODE>
<P>
This SWI is provided as a 'get-around' to a known hardware problem.


<h4><a name="events"> Events </a></h4>

Since all the above SWIs complete asynchronously, a RISC-OS event is
generated to indicate command completion plus a number of card in/out
events. The following events are generated :
<p>
The event number is <code>Event_Expansion</code> 21 and a sub-event number 
of <code>Event_Expansion_SCInterface</code> 0. The following table shows
the reason codes.
<p>
<center>
<table border=1>
<tr> <th> Symbolic name <th> Value <th> Description
<tr> <td> SCI_REMOVED <td> 1 <td> Card has been removed
<tr> <td> SCI_INSERTED <td> 2 <td> Card has been inserted
<tr> <td> SCI_TRANS_END <td> 3 <td> Locked transaction has ended so other channels are free to access the card
<tr> <td> SCI_CMD_DONE <td> 4 <td> Previous command completed
<tr> <td> SCI_ERROR <td> 5 <td> An error condition has been detected for the card
<tr> <td> SCI_REMOVED2 <td> 6 <td> Card has been removed
<tr> <td> SCI_INSERTED2 <td> 7 <td> Card has been inserted
<tr> <td> SCI_BADINSERT <td> 8 <td> Badcard/foreign object inserted in slot 1
<tr> <td> SCI_BADINSERT2 <td> 9 <td> Badcard/foreign object inserted in slot 2
<tr> <td> SCI_INIT2_DONE <td> 10 <td> InitSlot2 SWI has completed.
</table>
</center>

The following values are passed in the registers
<code>
<pre>
   R0 - Event_Expansion
   R1 - Event_Expansion_SCInterface
   R2 - Card handle (see note below)
   R3 - Reason code
   R4 - Slot number
</pre>
</code>
<p>
Register R2 contains the card handle, except in the case where a channel has
not been established. In this case R2 will contain -1.
<p>

<h4>Service Calls</h4>

<code><pre><b>Service_SCTransportStarting (Service Call &BB)</b>
<p>
On Entry - R1 = &BB (reason code)
<p>
On Exit  -
</pre></code>
<p>

This service call is made after the module has finished initialising.
<HR>

<H2> <A NAME="interchange"> 6.0 Data interchange </A> </H2>

<h3> Micro-controller </h3>

The micro-controller interfaces to the ARM through serial port 1. This
interface works at 9600 baud. The following signals are used.
<ul>
  <li> <b>DTR</b> signal the micro-controller to reset the smart
  card. This will return an ATR (Answer To Reset) from the card.

  <li> <b>DSR</b> signal indicating the presence of a valid smart card.
  <li> <b>CTS/RTS</b> handshaking signals used during data transfer.
</ul>
<p>

<HR>

<H2> <A NAME="formats"> 7.0 Data formats </A> </H2>

There are no data formats defined by this project.
<p>
<HR>

<H2> <A NAME="acceptance"> 8.0 Acceptance test </A> </H2>

The new smart card interfacing software will be backwards compatible
with cards already in the field. This will be tested using old cards.
<p>
The module will handle T=0 and T=1 protocols transparently.
<p>
The new software is capable of functioning with both slots simulataneously.
<HR>

<H2> <A NAME="noncompliances"> 9.0 Non compliances </A> </H2>

<a href="#references"> ISO 7816-3 </a> has the <b>optional</b>
provision of a programming voltage Vpp supplied to the smart
card. This is not provided in our implementation.
<p>

<HR>

<H2> <a NAME="test"> 10.0 Development test strategy </A> </H2>

Testing will be performed using a number of stand alone test
applications that have been written to intercept smart card commands
and data at various levels in the software stack. Sample cards will be
obtained from the card manufacturers/issuers allowing <a
href="#references"> ISO 7816-4 </a>, T=1, etc to be tested.
<p>
<HR>

<H2> <A NAME="organisation"> 11.0 Product organisation </A> </H2>

The smart card transport module is written in C and ARM assembler.
<p>
<HR>

<H2> <A NAME="enhancements"> 12.0 Future enhancements </A> </H2>
None currently.
<p>
<HR>

<H2> <A NAME="glossary"> 13.0 Glossary </A> </H2>

<TABLE WIDTH="100%" BORDER=0>
<TR><TD WIDTH="20%">API	<TD WIDTH="80%">Application Programmer Interface.
<TR><TD>OS		<TD>Operating System.
<TR><TD>SWI		<TD>Software Interrupt.
<TR><TD>ATR		<TD>Answer To Reset.
</TABLE>
<HR>

<H2> <A NAME="references"> 14.0 References </A> </H2>

<ul>
  <li> ISO-7816 : Identification cards - Integrated circuits with
  contacts.
  <ul>
    <li> Part 1 : Physical characteristics
    <li> Part 2 : Dimensions and location of contacts
    <li> Part 3 : Electronic signals and transmission protocols
    <li> Part 4 : Interindustry commands for interchange
    <li> Part 5 : Numbering system and registration procedure for
    application identifiers
    <li> Part 6 : Interindustry data elements.
  </ul>
</ul>

<HR>

<H2> <A NAME="history"> 15.0 History </A> </H2>

<pre>
Revision 0.7  1999/01/11 18:45:00  WTurner
Added event for notifying end of InitSlot2 SWI.

Revision 0.6  1998/12/11 16:05:00  WTurner
Added a new SWI for power control of cards in the slots
Added 2 new events for insertion of non-cards

Revision 0.5  1998/11/13 16:05:00  WTurner
Added a couple of error values, and added another SWI to
deal with slot 2.

Revision 0.4  1998/10/19 16:00:00  WTurner
Removed multi-slot generality, and added specific SWI to
talk to slot 2. Various typographic changes, added events
for slot 2 insertion/removal.

Revision 0.3  1998/07/31 10:13:18  apirozek
Modified event list and added service call

Revision 0.2  1998/07/30 11:44:07  apirozek
Added new SWI to read slots, error message and C prototypes

Revision 0.1  1998/07/21 17:23:00  apirozek
Modified original spec
</pre>

<HR>

<TABLE BORDER=1 WIDTH="100%">
<TR>
<TD WIDTH="50%" VALIGN=TOP>
<SMALL>
This document is issued under license and must not be copied,
reproduced or disclosed in part or whole outside the terms of the
license.
</SMALL>
<TD WIDTH="50%" VALIGN=TOP>
<SMALL>
For Funai by Acorn Computers, UK.<BR>
&copy; Acorn Computers Ltd 1998<BR>
</SMALL>
</TABLE>

</BODY>
</HTML>
