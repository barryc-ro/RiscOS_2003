/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * To implement those functions which handle the smart card protocol T=0.
 * Although not strictly implemented as a state machine it works in a
 * similar way in that each stage sets a state which determines what
 * happens next.
 */


#include <string.h>
#include <stdio.h>

#include "sci_api.h"
#include "sci_int.h"
#include "t0_sm.h"
#include "atr.h"
#include "com.h"

#include "pmsdebug.h"

static BYTE *RcvData = NULL;	/* received data buffer */
static int ExpLen;		/* expected data length from current command */
static int ActLen;		/* actual data length from current command */
static int RcvNext;		/* position of next byte in receive buffer */
static RESP_DATA Resp;

static XPORT_HDR CmdHdr;
static BYTE *XmitData = NULL;	/* transmit data buffer */
static int XmitLen;		/* length of data in xmit buffer */
static int XmitNext;		/* position of next byte to xmit */

static int XportType;

int t0_State;

/***************************************************************************/
int
t0_ProcessByte (BYTE ch)
/***************************************************************************/
{
  debug_printf (db,"(7) t0_ProcessByte state %d, byte %02X\n", t0_State, ch);

  switch (t0_State)
  {
    case S1_WAIT_PROC1:
      /* we should now be processing a/first procedure byte */
      if (ch == T0_PROC_NULL)
        ; /* do nothing, just present to reset timers */
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S1_WAIT_PROC2;
      }
      else
      {
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");

        return SCI_E_PROTO;
      }

      break;

    case S1_WAIT_PROC2:
      /* we should now be processing the second procedure byte (SW2) */
      Resp.sw2 = ch;
      ActLen = 0;			/* case 1 so can't be any response data */
      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      t0_State = S_T0_ENDED;

      break;
  /* case 2 - no data to send, response expected */
    case S2_WAIT_PROC1:
      /* we should now be processing a/first procedure byte */
      if (ch == T0_PROC_NULL)
        /* do nothing, just present to reset timers */
        ;
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S2_WAIT_PROC2;
      }
      else if (ch == CmdHdr.ins || ch == (CmdHdr.ins + 1))
      {
        /* expect to receive data */
        t0_State = S2_WAIT_RESP_BLOCK;
      }
      else if ((ch & 0xFF) == ((~CmdHdr.ins) & 0xFF) ||
  	     (ch & 0xFF) == ((~(CmdHdr.ins + 1)) & 0xFF))
      {
        /* expect to receive next byte of data */
        t0_State = S2_WAIT_RESP_BYTE;
      }
      else
      {
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");
        return SCI_E_PROTO;
      }

      break;

    case S2_WAIT_PROC2:
      /* we should now be processing the second procedure byte (SW2) */
      Resp.sw2 = ch;

      if (Resp.sw1 == T0_C2_LEN_ERR)
      {
        /* set expected length to actual length and re-issue command */
        ActLen = CmdHdr.len = ch;

        t0_State = S2_WAIT_PROC1;
        /* initiate sending of command header */
        debug_printf (db,"(7) Exiting t0_ProcessByte() via SendBytes(): ActLen %d\n", ActLen);
        return com_SendBytes ((BYTE *) & CmdHdr, T0_HDR_LEN);
      }
      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      debug_printf (db,"(7) Exiting t0_ProcessByte() via SignalTask(): ActLen %d\n", ActLen);

      t0_State = S_T0_ENDED;

      break;

    case S2_WAIT_RESP_BLOCK:
      *(RcvData + RcvNext++) = ch;
      if (RcvNext == ActLen)
        t0_State = S2_WAIT_PROC1;

      break;

    case S2_WAIT_RESP_BYTE:
      *(RcvData + RcvNext++) = ch;
      t0_State = S2_WAIT_PROC1;

      break;

  /* case 3 - data to send, no response expected */
    case S3_WAIT_PROC1:
      /* we should now be processing a/first procedure byte */
      if (ch == T0_PROC_NULL)
        /* do nothing, just present to reset timers */
        ;
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S3_WAIT_PROC2;
      }
      else if (ch == CmdHdr.ins || ch == (CmdHdr.ins + 1))
      {
        /* send command data */
        debug_printf (db,"(7) Exiting t0_ProcessByte() via SendBytes(): ActLen %d\n", ActLen);
        return com_SendBytes ((XmitData + XmitNext), XmitLen);
        /* no state change, next byte expected is procedure byte 1 */
      }
      else if ((ch & 0xFF) == ((~CmdHdr.ins) & 0xFF) ||
  	     (ch & 0xFF) == ((~(CmdHdr.ins + 1)) & 0xFF))
      {
        /* send next byte of command data */
        debug_printf (db,"(7) Exiting t0_ProcessByte() via SendBytes(): ActLen %d\n", ActLen);
        XmitLen--;
        return com_SendBytes ((XmitData + XmitNext++), 1);
        /* no state change, next byte expected is procedure byte 1 */
      }
      else
      {
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");

        return SCI_E_PROTO;
      }

      break;
    case S3_WAIT_PROC2:

      /* we should now be processing the second procedure byte (SW2) */
      Resp.sw2 = ch;

      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      debug_printf (db,"(7) Exiting t0_ProcessByte via SignalTask: ActLen %d\n", ActLen);

      t0_State = S_T0_ENDED;

      break;

  /* case 4 - data to send, response expected */
    case S4_WAIT_PROC1:
      /* we should now be processing a/first procedure byte */
      if (ch == T0_PROC_NULL)
        /* do nothing, just present to reset timers */
        ;
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S4_WAIT_PROC2;
      }
      else if (ch == CmdHdr.ins || ch == (CmdHdr.ins + 1))
      {
        /* send command data */
        debug_printf (db,"(7) Exiting t0_ProcessByte() via SendBytes(): ActLen %d\n", ActLen);
        return com_SendBytes ((XmitData + XmitNext), XmitLen);
        /* no state change, next byte expected is procedure byte 1 */
      }
      else if ((ch & 0xFF) == ((~CmdHdr.ins) & 0xFF) ||
  	     (ch & 0xFF) == ((~(CmdHdr.ins + 1)) & 0xFF))
      {
        /* send next byte of command data */
        debug_printf (db,"(7) Exiting t0_ProcessByte() via SendBytes(): ActLen %d\n", ActLen);
        XmitLen--;
        return com_SendBytes ((XmitData + XmitNext++), 1);
        /* no state change, next byte expected is procedure byte 1 */
      }
      else
      {
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");
        return SCI_E_PROTO;
      }

      break;
    case S4_WAIT_PROC2:
      /* we should now be processing the second procedure byte (SW2) */
      Resp.sw2 = ch;

      if ((Resp.sw1 == T0_SW1_OK && Resp.sw2 == T0_SW2_OK))
      {
        /* generate GETRESPONSE command header */
        CmdHdr.cla = GETRESP_CLA;
        CmdHdr.ins = GETRESP_INS;
        CmdHdr.p1 = GETRESP_P1;
        CmdHdr.p2 = GETRESP_P2;

        CmdHdr.len = ExpLen;
        if (ExpLen == SCI_MAX_EXP_LEN)
  	CmdHdr.len = 0;
        else
  	CmdHdr.len = ExpLen;
        /* continue processing as for case 2 */
        t0_State = S2_WAIT_PROC1;
        /* initiate sending of GETRESPONSE command header */
        debug_printf (db,"(7) Exiting t0_ProcessByte via SendBytes(): ActLen %d\n", ActLen);
        return com_SendBytes ((BYTE *) & CmdHdr, T0_HDR_LEN);
      }

      if (Resp.sw1 == T0_C4_LEN_ERR)
      {
        /* generate GETRESPONSE command header */
        CmdHdr.cla = GETRESP_CLA;
        CmdHdr.ins = GETRESP_INS;
        CmdHdr.p1 = GETRESP_P1;
        CmdHdr.p2 = GETRESP_P2;
        /* set expected length to actual length */
        if (ch == 0)
  	ActLen = SCI_MAX_EXP_LEN;
        else
  	ActLen = ch;

        CmdHdr.len = (ActLen < ExpLen) ? ActLen : ExpLen;
        if (CmdHdr.len == SCI_MAX_EXP_LEN)
  	CmdHdr.len = 0;
        else
  	CmdHdr.len = ExpLen;
        t0_State = S4_WAIT_2_PROC1;
        /* initiate sending of GETRESPONSE command header */
        debug_printf (db,"(7) Exiting t0_ProcessByte via SendBytes(): ActLen %d\n", ActLen);
        return com_SendBytes ((BYTE *) & CmdHdr, T0_HDR_LEN);
      }

      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      debug_printf (db,"(7) Exiting t0_ProcessByte via SignalTask: ActLen %d\n", ActLen);

      t0_State = S_T0_ENDED;

      break;

    case S4_WAIT_2_PROC1:
      /* we should now be processing a/first procedure byte after
         a GET RESPONSE TPDU with La != Le */
      if (ch == T0_PROC_NULL)
        /* do nothing, just present to reset timers */
        ;
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S4_WAIT_PROC2;
      }
      else if (ch == CmdHdr.ins || ch == (CmdHdr.ins + 1))
      {
        /* expecting data block */
        t0_State = S4_WAIT_RESP_BLOCK;
      }
      else if ((ch & 0xFF) == ((~CmdHdr.ins) & 0xFF) ||
  	     (ch & 0xFF) == ((~(CmdHdr.ins + 1)) & 0xFF))
      {
        /* expecting data byte */
        t0_State = S4_WAIT_RESP_BYTE;
      }
      else
      {
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");
        return SCI_E_PROTO;
      }

      break;

    case S4_WAIT_2_PROC2:
      /* we should now be processing the second procedure byte (SW2)
         after a GET RESPONSE TPDU with La != Le */
      Resp.sw2 = ch;

      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      debug_printf (db,"(7) Exiting t0_ProcessByte() via SignalTask(): ActLen %d\n", ActLen);

      t0_State = S_T0_ENDED;

      break;

    case S4_WAIT_RESP_BLOCK:
      /* we should now be receiving response data block */
      *(RcvData + RcvNext++) = ch;
      if (RcvNext == ActLen)
        t0_State = S4_WAIT_RES_PROC1;

      break;

    case S4_WAIT_RESP_BYTE:
      /* we should now be receiving one response data byte */
      *(RcvData + RcvNext++) = ch;
      t0_State = S4_WAIT_2_PROC1;

      break;

    case S4_WAIT_RES_PROC1:
      /* we should now be processing a/first procedure byte */
      if (ch == T0_PROC_NULL)
        ;
      else if ((ch & MASK_LSN) == T0_SW1_ERR ||
  	     (ch & MASK_LSN) == T0_SW1_OK)
      {
        Resp.sw1 = ch;
        t0_State = S4_WAIT_RES_PROC2;
      }
      else
      {
        /* protocol error, there is no more data to send or receive */
        debug_printf (db,"(7) Exiting t0_ProcessByte(): SCI_E_PROTO\n");
        return SCI_E_PROTO;
      }

      break;
    case S4_WAIT_RES_PROC2:
      /* we should now be processing the second procedure byte (SW2)
         after the response data */
      Resp.sw2 = ch;

      sci_State = S_S_USER;
      ChannelTable[current_channel].state = S_C_USER;

      debug_printf (db,"(7) Exiting t0_ProcessByte() via SignalTask(): ActLen %d\n", ActLen);

      t0_State = S_T0_ENDED;

      break;

    default:
      return SCI_E_PROTO;
  }

  if (t0_State == S_T0_ENDED)
    sys_SignalTask(current_channel,SCI_CMD_DONE);

  return (SCI_SUCCESS);
}

/***************************************************************************/
int
t0_StartCommand (BYTE * cmd_hdr, int data_len,
		 BYTE * data, int exp_len)
/***************************************************************************/

{
  debug_printf (db,"(7) t0_StartCommand(): ActLen %d\n", ActLen);

  /* determine transport type - case 1, 2, 3 or 4 */
  if (data_len)
  {
    if (exp_len)
      XportType = T0_CASE4;
    else
      XportType = T0_CASE3;
  }
  else
  {
    if (exp_len)
      XportType = T0_CASE2;
    else
      XportType = T0_CASE1;
  }

  /* construct transport header */
  CmdHdr.cla = *cmd_hdr++;
  CmdHdr.ins = *cmd_hdr++;
  CmdHdr.p1 = *cmd_hdr++;
  CmdHdr.p2 = *cmd_hdr++;
  debug_printf(db,"(7) command %x,%x,%x,%x\n",CmdHdr.cla,CmdHdr.ins,CmdHdr.p1,CmdHdr.p2);

  /* add length to header depending on type, and set next state */
  switch (XportType)
  {
  case T0_CASE1:
    CmdHdr.len = 0;
    t0_State = S1_WAIT_PROC1;

    break;

  case T0_CASE2:
    if (exp_len == SCI_MAX_EXP_LEN)
      CmdHdr.len = 0;
    else
      CmdHdr.len = exp_len;
    t0_State = S2_WAIT_PROC1;

    break;

  case T0_CASE3:
    CmdHdr.len = data_len;
    t0_State = S3_WAIT_PROC1;

    break;

  case T0_CASE4:
    CmdHdr.len = data_len;
    t0_State = S4_WAIT_PROC1;

    break;
  }

  if (XportType == T0_CASE3 || XportType == T0_CASE4)
  {
    /* move data to xmit buffer */
    if (data_len)
      memcpy (XmitData, data, data_len);
    XmitLen = data_len;
    XmitNext = 0;
    ActLen = ExpLen = 0;
  }

  if (XportType == T0_CASE2 || XportType == T0_CASE4)
  {
    /* remember expected length, initialise receive buffer index */
    ActLen = ExpLen = exp_len;
    RcvNext = 0;
  }

  /* flush queues */
  com_FlushComms ();

  /* initiate sending of command header */
  debug_printf (db,"(7) Exiting t0_StartCommand() via SendBytes(): ActLen %d\n", ActLen);

  return com_SendBytes ((BYTE *) & CmdHdr, T0_HDR_LEN);
}

/***************************************************************************/
int
t0_GetData (BYTE * buff, int buff_len, int * rcv_len, BYTE * resp)
/***************************************************************************/

{
  *resp++ = Resp.sw1;
  *resp = Resp.sw2;

  debug_printf(db,"(7) t0 response %x %x\n",Resp.sw1,Resp.sw2);

  if (buff == NULL || buff_len == 0)
  {
    *rcv_len = ActLen;
    if (ActLen > 0)
    {
      debug_printf (db,"(7) exiting t0_GetData() SCI_E_TRUNC\n");

      return (SCI_E_TRUNC);
    }
    else
    {
      debug_printf (db,"(7) exiting t0_GetData() SCI_E_TRUNC\n");

      return (SCI_SUCCESS);
    }
  }
  else if (ActLen > buff_len)
  {
    memcpy (buff, RcvData, buff_len);
    *rcv_len = ActLen;
    debug_printf (db,"(7) exiting t0_GetData() SCI_E_TRUNC\n");

    return (SCI_E_TRUNC);
  }
  else
  {
    memcpy (buff, RcvData, ActLen);
    *rcv_len = ActLen;
    debug_printf (db,"(7) exiting t0_GetData()\n");

    return SCI_SUCCESS;
  }
}

/*  Error on SmartCard Slot 1
    -------------------------

An error has been generated. This may be due to a serial data error or a too many
re-send requests etc.

Before v0.47 this routine marked the card and all of the open channels as being bad. Any
further SCTransport_IssueCommand SWIs on these channels or this card would immediately
return an error without attempting any communiction with the card until it was replaced
with a new card. Define MARKCARDBAD to make it work in this way again.

The problem with this approach was that CTS did not check for errors on SWIs as it
expecting them all to succeed with errors being reported asynchronously via events (the
functional spec is not too clear about whether such errors can be returned immediately
by a SWI).

Rather than changing CTS to handle errors from SWIs I have changed SCTransport so that
it doesn't mark cards and channels as failed. This means that if an operation fails and
it is repeated we will attempt to communicate with the card again, an probably generate
the same error. It is debatable whether this is a better approach but with a final
release schedule for tomorrow it seems to be the safest way of fixing the problem.

Paul Skirrow, 8 Feb 2000
*/

int
t0_Error (int err)
{
  int channel;

  debug_printf (db,"(7) t0_Error err = %d\n",err);
  pms_debug("t0_Error err = %d\n",err);

  /* error condition so signal users */
  for (channel=0; channel<MAX_CARD_CHANNELS; channel++)
  {
    /* check for allocated slots */
    if (ChannelTable[channel].flags & channel_in_use)
    {
#ifdef MARKCARDBAD
      ChannelTable[channel].state = S_C_FAILED;  /* Note that SWIs will return errors if this code is included */
      ChannelTable[channel].last_err = err;
#endif
      sys_SignalTask(channel,SCI_ERROR);
    }
  }
  /* restore current connection slot */

  sys_DiscardEvents ();
  com_FlushComms ();

#ifdef MARKCARDBAD
  sci_State = S_S_FAILED;  /* Note that SWIs will return errors if this code is included */
#else
  sci_State = S_S_OPEN;  /* Clear the error so that future IssueCommand SWIs will work */
#endif

  sci_Errno = err;

  return (SCI_FAIL);
}

/***************************************************************************/
int
t0_CardStatusChange (bool card_in)
/***************************************************************************/
/* card state change */

{
  int channel;

  debug_printf(db, "(7) t0_CardStatusChange(): card %s",(card_in)?"IN":"OUT");

  if (card_in)
  {
    /* prepare for receipt of ATR */
    if (atr_Start (false) != SCI_SUCCESS)
      return SCI_FAIL;
  }
  else
  {
    for (channel=0; channel<MAX_CARD_CHANNELS; channel++)
    {
      if (ChannelTable[channel].flags & channel_in_use)
      {
	sys_SignalTask(channel,SCI_REMOVED);
	if (ChannelTable[channel].state != S_C_OPENING)
	  ChannelTable[channel].state = S_C_REMOVED;
      }
    }
    sci_State = S_S_REMOVED;
    sci_Locked = false;
    sys_DiscardEvents ();
    com_FlushComms ();
  }

  return (SCI_SUCCESS);
}

/***************************************************************************/
int
t0_ScipError (void)
/***************************************************************************/
/* SCIP detected errors */

{
  return t0_Error (SCI_E_COMMS);
}

/***************************************************************************/
bool
t0_Init (void)
/***************************************************************************/

{
  /* allocate buffer for transmitting data */
  if ((XmitData = (BYTE *) sys_Malloc (MAX_XMIT_BUF)) == (BYTE *) NULL)
    return (false);

  /* allocate buffer for receiving data */
  if ((RcvData = (BYTE *) sys_Malloc (MAX_RCV_BUF)) == (BYTE *) NULL)
    return (false);

  return true;
}

/***************************************************************************/
void
t0_Close (void)
/***************************************************************************/

{
  /* free buffer for transmitting data */
  sys_Free (XmitData);

  /* free buffer for receiving data */
  sys_Free (RcvData);

  return;
}
