/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Contains module specific stuff plus the sys_ os hooks required for the port.
 *
 * The event handling is worth describing as it may seem a little weird.
 * Basically the following events are required by the smart card software :
 * timeouts, serial events and serial data. Under windows, these events are all
 * reported using the messaging system, however under riscos we use
 * os_callafters, events and upcalls. To simplify the porting, we claim all the
 * appropriate riscos stuff, filter it to make sure the events are for us,
 * and setup a generic callback to handle it later based on a global event
 * variable. This event handling function sc_event_handler() is analogous to
 * the windows message handler.
 *
 * Modification History
 *---------------------
 *
 * 03-Jun-96  RWB,  Created.
 * 01-Jul-96  RWB,  Allowed api call read_response to have null buffer passed
 * 	      	    in as argument when not expecting any return data.
 * 11-Jul-96  RWB,  During rx data event, loop until buffer is empty. Also only
 * 	      	    add rx data events to the queue if there are less than two
 * 	      	    such events pending.
 * 02-Aug-96  RWB,  Converted the discrete integer flags to a bit mask flag.
 * 07-Aug-96  RWB,  Huge amount of faffing about to get it working from ROM.
 * 	      	    Moved initialisation code to Service_PostInit - not sure if
 *		    this is really necessary but it avoids an Abort on Data
 *		    transfer.
 * 09-Aug-96  RWB,  Added debounce of the card in/out signal. This is controled
 * 	      	    by the #define DEBOUNCE_TIME.
 * 06-Sep-96  RWB,  Now perform full initialisation when flag -fullinit is given
 *                  on the command line.
 * 11-Sep-96  RWB,  Made constant strings static.
 * 26-Sep-96  RWB,  Improved the positioning of the timout cancelation calls.
 * 04-Oct-96  RWB,  Removed the need for the large input buffer by calling
 * 	      	    t0 and atr_ProcessByte directly.
 * 17-Oct-96  RWB,  Check input buffer before generating an error in timeout
 * 	      	    event.
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

#include "Debuglib/Debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "sci_api.h"
#include "sci_int.h"
#include "atr.h"
#include "t0_sm.h"
#include "t1.h"
#include "irqs.h"
#include "serial.h"
#include "serial_ven.h"
#include "com.h"

#include "pmsdebug.h"  /* Paul Skirrow's debug */

/*
 * Funai globals
 */
#ifdef FUNAI_TWINSLOT
  char	g_slot2_state = IDLE;
  BYTE	g_record = 20;
  BYTE	g_nrecords = 20;
  char	g_slot2_datablock_state = SCI_E_OUT;
  unsigned char  g_slot2_datablock[DATABLOCK_LEN];
  unsigned char *g_slot2_dataptr;
  int	g_funai_header = NO_HEADER;
  char	g_uc_state = UC_IDLE;
  bool	g_card1_in = false;
  bool	g_card2_in = false;
  bool	g_card2_insertpending = false;
  unsigned int g_slot2_readtime = 0;
  apdu  g_slot2_apdu;
  #ifdef OLD_GETATR
  int   g_slot2_cardtype = CARD_NOCARD;
  #else
  type_card_descriptor g_card_descriptor;
  #endif
#endif

#ifdef EVENT_RETRY
  unsigned int	g_event_busy = EVENT_IDLE;
  _kernel_swi_regs g_callback_block;
#endif

/*
 * module housekeeping globals and prototypes
 */
void   *workspace_pointer = NULL;
#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/* Set the default output device for debug output to be sent to */
#ifdef DEBUGLIB
  debug_device DebugOutputDevice = FILE_OUTPUT;
#endif /* DEBUGLIB */

/*
 * smart card processing specific globals
 */
#define MAX_EVENTS    (10)
#define DEBOUNCE_TIME (50)

t_sctrans_events Events[MAX_EVENTS];             /* generic event queue */
int next_event = -1;
int free_event = 0;
int iInputStream  = 0;
int iOutputStream = 0;
int num_data_events_pending = 0;
int flags = 0;
/*
 * error declarations
 */
ERROR_STRUCT(NOTINIT,"Not initialised");

static char *strStates[] = {"","closed","starting","opening","open",
       	    		    "cmd","user","failed","removed"};

#ifdef DEBUG
char *strNotifications[] = {"","CardRemoved","CardInserted",
     			 "Transaction end","Command complete","Error"};
#endif

/*
 * serial upcall of interest or serial event of interest
 */
_kernel_oserror *
sc_event_handler(_kernel_swi_regs *r, void *pw)
{
  int this_event = 0;
  int old_irqs;
  int err;
  int ch;

  while (next_event != free_event)
  {
    if (next_event == -1) break;
    this_event = Events[next_event];  /* take a copy since it may change */
    switch(this_event)
    {
      case SC_Event_Timeout :
        debug_printf(db,"(7) event timeout\n");
        if (!(flags & flag_timeout_to_handle))
          break;

        if (sci_State == S_S_OPENING)
        {
	  atr_Error(SCI_E_PROTO);
	  break;
	}
        else
        {
 	  if (serial_size(iInputStream)==0)
 	  {
   	    t0_Error(SCI_E_PROTO);
   	    break;
          }
          /* drop through to checking data presence */
        }

      case SC_Event_DataPresent :
        num_data_events_pending--;  /* show we are processing one event */
        while ((ch=serial_read_byte(iInputStream))!=-1)
        {
          sys_CancelWaitTimer();

          if (sci_State == S_S_OPENING)
          {
            if ((err=atr_ProcessByte(ch))!=SCI_SUCCESS)
    	    {
      	      if (AtrState==ATR_COMPLETE)
                com_FlushComms();
              else
              {
      	        if (err == SCI_E_OUT)
	          t0_CardStatusChange(false); /* TRUE card in, FALSE card out */
                else
                {
	          atr_Error(err);
	          break;
	        }
              }
            }
	    /* are we going to read more bytes - so set wait time */
            if ((AtrState != ATR_COMPLETE) && (AtrState != ATR_WAIT_PTS_ACK))
	      sys_StartWaitTimer (ATR_INIT_WAIT);
          }
          else
          { /* Card initialisation complete - real commands now */
            if (sci_State == S_S_CMD && card_status.protocol==0) {
	      if ((err=t0_ProcessByte(ch))!=SCI_SUCCESS) {
	        if (err == SCI_E_OUT) {
		  t0_CardStatusChange(false); /* TRUE card in, FALSE card out */
		} else {
		  t0_Error(err);
		}
              }
    	      /* going to read more bytes so set wait time */
              if (t0_State != S_T0_ENDED) {
	        sys_StartWaitTimer(WorkWaitTime);
	      }
            } else {
              /* Do t1 stuff */
	      if ((err=t1_ProcessByte(ch))!=SCI_SUCCESS) {
	        if (err == SCI_E_OUT) {
	          debug_printf(db, "Calling t0_cardstatuschange\n");
		  t0_CardStatusChange(false); /* TRUE card in, FALSE card out */
		} else {
		  t0_Error(err);
		}
              }
    	      /* going to read more bytes so set wait time */
              if (t1_State != T1_END) {
	        sys_StartWaitTimer(WorkWaitTime);
	      }
            }
          }
        }

        break;

      case SC_Event_SerialError :
        debug_printf(db,"(7) serial error\n");
        sys_CancelWaitTimer();
        /*
         * don't care about events in initial state
         */
        if (sci_State != S_S_CLOSED && sci_State != S_S_FAILED)
	{
          if (sci_State == S_S_OPENING)
            atr_Error(SCI_E_COMMS);
          else
            t0_Error(SCI_E_COMMS);
        }
        break;

      case SC_Event_CardIn :
        debug_printf(db,"(7) card in\n");
        sys_CancelWaitTimer();
        t0_CardStatusChange(true);
        break;

      case SC_Event_CardOut :
        debug_printf(db,"(7) card out\n");
        sys_CancelWaitTimer();
        t0_CardStatusChange(false);
        break;

      default :
        debug_printf(db,"(7) event %d not handled\n",this_event);
        break;
    }
    old_irqs = irqs_off();
    if (next_event>=0) next_event++;
    if (next_event==MAX_EVENTS) next_event=0;
    irqs_on(old_irqs);
  }

  old_irqs = irqs_off();
  CLEAR_FLAG(flags,flag_event_pending);
  next_event = -1;
  irqs_on(old_irqs);

  return (NULL);
}

/*
 * setup a callback to deal with the serial event.
 */
_kernel_oserror *
setup_event(t_sctrans_events this_event)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int old_irqs;

  if (free_event != next_event)
  {
    old_irqs = irqs_off();
    if (next_event == -1) next_event = free_event;
    Events[free_event++] = this_event;
    if (free_event==MAX_EVENTS) free_event=0;
    irqs_on(old_irqs);
    /*
     * see if event handler needs to be established
     */
    if (!(flags&flag_event_pending))
    {
      reg.r[0] = (int)sc_event_entry;
      reg.r[1] = (int)workspace_pointer;
      ERR_RETURN(err,_kernel_swi(OS_AddCallBack, &reg, &reg));
      SET_FLAG(flags,flag_event_pending);
    }
  }

  return (NULL);
}

/*
 * timeout timer has fired
 */
_kernel_oserror *
timer_handler(_kernel_swi_regs *r, void *pw)
{
  CLEAR_FLAG(flags,flag_timeout_pending);
  SET_FLAG(flags,flag_timeout_to_handle);
  setup_event(SC_Event_Timeout);

  return (NULL);
}

/*
 * handle events, select ones of interest to us and setup a callback to handle
 * them later.
 *
 * due to the way received data flushed from the buffer, ignore any rx data
 * events if there are two or more events already pending in the queue.
 */
int
upcall_handler(_kernel_swi_regs *r, void *pw)
{
  int	eof=0;

  switch (r->r[0])
  {
    case UpCall_DeviceRxDataPresent : case UpCall_DeviceThresAbove :
      if (iInputStream>0)
      {

        if (r->r[1]==iInputStream)
        {
#ifdef EVENT_RETRY
	  /** Well, it's definitely for us... **/
	  if(g_event_busy != EVENT_IDLE)
	  {
	    /** If we're already in the upcall handler and have a callback, leave. **/
	    if(g_event_busy == EVENT_BUSY)
	    {
	      /** If we're in the handler with no callback, set the callback flag, and leave. **/
	      g_event_busy = EVENT_BUSYCB;
	    }
	    return(0); /* This has been 'handled' now */
          }
	  /** Otherwise, handler proceeds **/
	  g_event_busy = EVENT_BUSY;
#endif
#ifdef FUNAI_TWINSLOT
	  if(g_uc_state != UC_BUSY)   /* New serial data is Funai header */
          {
            do {
              /* We have new serial data bytes to process and we are expecting a 2 byte header from
                 the Funai microcontroller.
                 com_ReadFunaiHeader reads the two header header bytes from the microcontroller
                 (one byte per call), and if both bytes are read and it represents new data for
                 slot 2 then it reads and processes the data from the slot 2 Smart Card.
                 Note that slot 1 is treated differently and is not processed by com_ReadFunaiHeader */
              com_ReadFunaiHeader();
  	      _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), 5, r->r[1], &eof);  /* Any more bytes in input stream? */

	    } while(!eof && g_uc_state != UC_BUSY); /* If so, go round again, UNLESS our state has changed and we
	                                               have data to process (bug fix in v0.46) */
          }

          if (g_uc_state == UC_BUSY && !eof)  /* We have unprocessed serial data which is from Smart Card itself */
          {
            if(g_slot2_state != IDLE)
            {
#ifdef EVENT_RETRY
  	      _kernel_irqs_off();
	      if(g_event_busy == EVENT_BUSYCB)
  	      {
  	        g_callback_block = *r; /** Store the register block **/
  	        _swix(OS_AddCallBack, _IN(0)|_IN(1), upcall_callback_entry, pw);
  	      }
  	      g_event_busy = EVENT_IDLE;
  	      _kernel_irqs_on();
#endif
              return(0);   /* Handled */
            }
            else
#endif
            //sys_CancelWaitTimer();
            if (num_data_events_pending<2)
            {
              num_data_events_pending++;

              if (flags&flag_debouncing)  /* if currently debouncing, defer */
                SET_FLAG(flags,flag_data_pending);
              else
                setup_event(SC_Event_DataPresent);
            }
          }
        }
        else
        {
#ifdef EVENT_RETRY
	    _kernel_irqs_off();
	    if(g_event_busy == EVENT_BUSYCB)
	    {
	      g_callback_block = *r; /** Store the register block **/
	      _swix(OS_AddCallBack, _IN(0)|_IN(1), upcall_callback_entry, pw);
	    }
	    g_event_busy = EVENT_IDLE;
	    _kernel_irqs_on();
#endif
          return(1);
        }
      }
      else
      {
#ifdef EVENT_RETRY
	    _kernel_irqs_off();
	    if(g_event_busy == EVENT_BUSYCB)
	    {
	      g_callback_block = *r; /** Store the register block **/
	      _swix(OS_AddCallBack, _IN(0)|_IN(1), upcall_callback_entry, pw);
	    }
	    g_event_busy = EVENT_IDLE;
	    _kernel_irqs_on();
#endif
        return(1);
      }
      break;
    default :
#ifdef EVENT_RETRY
	    _kernel_irqs_off();
	    if(g_event_busy == EVENT_BUSYCB)
	    {
	      g_callback_block = *r; /** Store the register block **/
	      _swix(OS_AddCallBack, _IN(0)|_IN(1), upcall_callback_entry, pw);
	    }
	    g_event_busy = EVENT_IDLE;
	    _kernel_irqs_on();
#endif
      return (1); /* pass on */
  }
#ifdef EVENT_RETRY
	    _kernel_irqs_off();
	    if(g_event_busy == EVENT_BUSYCB)
	    {
	      g_callback_block = *r; /** Store the register block **/
	      _swix(OS_AddCallBack, _IN(0)|_IN(1), upcall_callback_entry, pw);
	    }
	    g_event_busy = EVENT_IDLE;
	    _kernel_irqs_on();
#endif
  return (0); /* handled */
}

/*
 * debounce timer has fired
 */
_kernel_oserror *
debounce_handler(_kernel_swi_regs *r, void *pw)
{
  if (com_CardIn()==true)        /* dsr currently active */
  {
    if (flags&flag_dsr_state)    /* dsr was previously active */
    {
      com_FlushComms();
      sys_DiscardEvents();
    }
    else                         /* dsr has changed */
    {
      SET_FLAG(flags,flag_dsr_state);
      setup_event(SC_Event_CardIn);
      if (flags&flag_data_pending)
        setup_event(SC_Event_DataPresent);
    }
  }
  else                           /* dsr currently inactive */
  {
    if (!(flags&flag_dsr_state)) /* dsr was previously inactive */
    {
      com_FlushComms();
      sys_DiscardEvents();
    }
    else                         /* dsr has changed */
    {
      CLEAR_FLAG(flags,flag_dsr_state);
      setup_event(SC_Event_CardOut);
      if (flags&flag_data_pending)
        setup_event(SC_Event_DataPresent);
    }
  }

  CLEAR_FLAG(flags,(flag_data_pending|flag_debouncing));
  num_data_events_pending = 0;

  return (NULL);
}

/*
 * handle events, select ones of interest to us and setup a callback to handle
 * them later.
 */
int
event_handler(_kernel_swi_regs *r, void *pw)
{
  _kernel_swi_regs reg;

  if (r->r[0] == Event_RS423Error)
  {
    if ((iInputStream>0) && (r->r[2] == iInputStream))
    {
      if (r->r[1] & SerialEvent_Error)
        setup_event(SC_Event_SerialError);
      else if (r->r[1] & SerialEvent_DSR)
      {
        debug_printf(db, "Got SerialEvent_DSR\n");
        if (!(flags&flag_debouncing))
        {
          reg.r[0] = DEBOUNCE_TIME;
          reg.r[1] = (int)debounce_entry;
          reg.r[2] = (int)workspace_pointer;
          if (_kernel_swi(OS_CallAfter, &reg, &reg) == NULL)
            SET_FLAG(flags,flag_debouncing);
        }
      }
      return (0); /* handled */
    }
  }
  return (1); /* pass on */
}

/*
 * claims vectors and enables the events as required
 */
_kernel_oserror *
claim_vectors(void)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  /*
   * claim vectors
   */
  reg.r[0] = EventV;
  reg.r[1] = (int)event_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Claim, &reg, &reg));

  reg.r[0] = UpCallV;
  reg.r[1] = (int)upcall_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Claim, &reg, &reg));

  /*
   * enable RS423 event
   */
  reg.r[0] = 14;
  reg.r[1] = Event_RS423Error;
  ERR_RETURN(err,_kernel_swi(OS_Byte, &reg, &reg));

  return (NULL);
}

/*
 * release vectors, flush any callbacks and disable events
 */
_kernel_oserror *
release_vectors(void)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  /*
   * disable event
   */
  reg.r[0] = 13;
  reg.r[1] = Event_RS423Error;
  ERR_RETURN(err,_kernel_swi(OS_Byte, &reg, &reg));

  /*
   * release vectors
   */
  reg.r[0] = EventV;
  reg.r[1] = (int)event_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Release, &reg, &reg));

  reg.r[0] = UpCallV;
  reg.r[1] = (int)upcall_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Release, &reg, &reg));

  sys_DiscardEvents();

  return (NULL);
}

/*
 * module service, only dealing with Service_PostInit
 */
void
module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
  _kernel_swi_regs reg;

  if (sci_Init() != SCI_SUCCESS)
    return;
  if (!t0_Init())
    return;
  if (!com_Init())
    return;

  /*
   * send service call round to say we have started, do under callback
   */
  reg.r[0] = (int)starting_entry;
  reg.r[1] = (int)workspace_pointer;
  _kernel_swi(OS_AddCallBack, &reg, &reg);

  SET_FLAG(flags,flag_initialised);
}

/*
 * simple printf without using stdio
 */
void
my_printf(char *format, ...)
{
  _kernel_swi_regs reg;
  char strLine[80];
  va_list list;

  va_start(list, format);
  vsprintf(strLine,format,list);
  va_end(list);

  reg.r[0] = (int)strLine;
  _kernel_swi(OS_Write0,&reg,&reg);
  _kernel_swi(OS_NewLine,&reg,&reg);
}

/*
 * cli_handler
 */
_kernel_oserror *
module_cli(CMHG_CONST char *arg_string,int arg_count,int cmd_no,void *pw)
{
  int channel;

  switch (cmd_no)
  {
    case CMD_SCTransInfo :
      my_printf("   state    : %s",strStates[sci_State]);
      my_printf("   protocol : T=%d",card_status.protocol);
      for (channel=0; channel<3; channel++)
      {
        if (ChannelTable[channel].flags & channel_in_use)
        {
          my_printf("   Channel %d",channel);
          my_printf("     State        : %d",
                ChannelTable[channel].state);
          my_printf("     Last error   : %d",ChannelTable[channel].last_err);
          my_printf("     Locked       : %s",
        	(ChannelTable[channel].flags & channel_locked)?"Yes":"No");
          my_printf("     Wait unlock  : %s",
         	(ChannelTable[channel].flags & channel_wait_unlock)?"Yes":"No");
          my_printf("     Async signal : %s",
        	(ChannelTable[channel].flags & channel_async)?"Yes":"No");
        }
      }

      break;
  }
  return (NULL);
}

/*
 * module finalise
 */
_kernel_oserror *
module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror *err = NULL;

  sys_CancelWaitTimer();

  t0_Close();  /* de-allocate buffers */

  com_Close();

  ERR_RETURN(err,release_vectors());

  debug_printf(db,"(5) finalisation\n");

#ifdef USE_TINY
  if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif
  return NULL;

  NOT_USED( fatal );
  NOT_USED( podule );
}

/*    Flush Debug log to output device - called atexit */

void debug_flush()
{
  debug_output_buffer_off(DebugLib_OutputBufferOff_Flag_UseCurrentDevice, DebugOutputDevice);
}


/*
 * module initialise
 */
_kernel_oserror *
module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  static char keyword[]="fullinit/s";
  int arg=0;
  int i;

  workspace_pointer = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
  reg.r[0] = (int)workspace_pointer;
  TinyError = _kernel_swi(TinySupport_Share, &reg, &reg);
#endif

#ifdef DEBUGLIB
  debug_initialise ("SCTransport", "izipfs:$.sctranslog", "");
  debug_output_buffer_on(0, 65536);          /* Write debug log into a buffer to aboid interrupting SmartCard I/O */
  atexit(debug_flush);                       /* We have turned debuglib buffering on, so turn it off atexit */
  debug_atexit ();
  debug_output_device (DebugOutputDevice);
#endif

  pms_debug_start("izipfs:$.PaulDebug");
  pms_debug("SCTransport debug starting");

  sci_State = S_S_CLOSED;

  /*
   * initialise the event queue
   */
  for (i=0; i<MAX_EVENTS; i++) Events[i] = SC_Event_Nothing;

  ERR_RETURN(err,claim_vectors());

  reg.r[0] = (int)keyword;
  reg.r[1] = (int)cmd_tail;
  reg.r[2] = (int)&arg;
  reg.r[3] = sizeof(arg);
  _kernel_swi(OS_ReadArgs, &reg, &reg);

  if (arg==0x7fffffff)
  {
    debug_printf(db,"(7) doing fullinit\n");
    module_service(0x73,&reg,pw);
  }

  return (NULL);
}

/*
 * module swi handler
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
  if (!(flags&flag_initialised))
    return ERROR(NOTINIT);

  switch (swi_no+SCTransport_00)
  {
    case SCTransport_Open :
      r->r[0] = sci_Open(r->r[0], (int*)r->r[1]);
      break;
    case SCTransport_RetrieveATR :
      r->r[0] = sci_RetrieveATR(r->r[0],(BYTE*)r->r[1],r->r[2],(int*)r->r[3]);
      break;
    case SCTransport_Close :
      r->r[0] = sci_Close(r->r[0]);
      break;
    case SCTransport_IssueCommand :
      r->r[0] = sci_IssueCommand(r->r[0], (BYTE*)r->r[1],
  	      	r->r[2], (BYTE*)r->r[3], r->r[4]);
      break;
    case SCTransport_ReadResponse :
      r->r[0] = sci_ReadResponse(r->r[0], (BYTE*)r->r[1], r->r[2],
  	      	(int*)r->r[3], (BYTE*)r->r[4]);
      break;
    case SCTransport_StartTrans :
      r->r[0] = sci_StartTrans(r->r[0]);
      break;
    case SCTransport_EndTrans :
      r->r[0] = sci_EndTrans(r->r[0]);
      break;
    case SCTransport_Error :
      r->r[0] = sci_Error(r->r[0]);
      break;
    case SCTransport_Status :
      r->r[0] = sci_State;
      break;
    case SCTransport_SlotInfo :
      r->r[0] = sci_SlotInfo(r);
      break;
    case SCTransport_InitSlot2 :
      r->r[0] = sci_InitSlot2();
      break;
    case SCTransport_ReadSlot2 :
      r->r[0] = sci_ReadSlot2(r);
      break;
    case SCTransport_PowerControl :
      r->r[0] = sci_PowerControl(r->r[0], r->r[1]);
      break;
  }

  return (NULL);

  NOT_USED( pw );
}
/************************************************************************
 * RiscOS hooks
 *
 * The following functions are expected by the ASE software hence we map
 * them into the way we do things in RiscOS.
 ************************************************************************/

/*
 * broadcast a message using the SCTransport event
 */
int
sys_SignalTask(int channel, int reason)
{
  _kernel_swi_regs reg;

  debug_printf(db, "(7)? signal %d",reason);
  if(ChannelTable[channel].flags & channel_async)
  {
    debug_printf(db, "(!) signal %d on channel %d", reason, channel);
    reg.r[0] = Event_Expansion;
    reg.r[1] = Event_Expansion_SCTransport;
    reg.r[2] = channel;
    reg.r[3] = reason;
    if (_kernel_swi(OS_GenerateEvent,&reg,&reg)) return (SCI_FAIL);
  }
  else
  {
    debug_printf(db,"(7) signal %d not sent\n",reason);
  }

  return (SCI_SUCCESS);
}
/*
 * Broadcast a message using the SCTransport event
 *
 * This is typically used to tell another module (such as the CTS module) that we
 * have data waiting for it from the card.
 */
int
sys_SigBroadcast(int reason)
{
  _kernel_swi_regs reg;

  debug_printf(db, "(7) BROADCAST signal %d",reason);
  pms_debug("BROADCAST signal %d",reason);
  reg.r[0] = Event_Expansion;
  reg.r[1] = Event_Expansion_SCTransport;
  reg.r[2] = 0xffff;
  reg.r[3] = reason;
  if (_kernel_swi(OS_GenerateEvent,&reg,&reg)) return (SCI_FAIL);

  return (SCI_SUCCESS);
}

/*
 * veneer to malloc for some reason
 */
BYTE *
sys_Malloc (int len)
{
  return (BYTE *) malloc ((size_t) (((len / 16) + 1) * 16));
}

/*
 * veneer to realloc for some reason
 */
BYTE *
sys_Realloc (BYTE * old, int len)
{
  return (BYTE *) realloc ((void *) old, (size_t) len);
}

/*
 * veneer to free for some reason
 */
void
sys_Free (BYTE * data)
{
  if (data != NULL) free (data);

  return;
}

/*
 * setup a timeout timer
 */
void
sys_StartWaitTimer(int wait_time)
{
  _kernel_swi_regs reg;
  int old_irqs = irqs_off();

  if (!(flags&flag_timeout_pending))
  {
/*     debug_printf(db,"(7) starting timer %d cs\n",wait_time); */
    reg.r[0] = wait_time;
    reg.r[1] = (int)timer_entry;
    reg.r[2] = (int)workspace_pointer;
    _kernel_swi(OS_CallAfter, &reg, &reg);
    SET_FLAG(flags,flag_timeout_pending);
  }
  irqs_on(old_irqs);

  return;
}

/*
 * cancel a pending timeout timer
 */
void
sys_CancelWaitTimer(void)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;
  int old_irqs = irqs_off();

  CLEAR_FLAG(flags,flag_timeout_to_handle);

  if (flags&flag_timeout_pending)
  {
/*     debug_printf(db,"(7) cancel timer"); */
    reg.r[0] = (int)timer_entry;
    reg.r[1] = (int)workspace_pointer;
    err = _kernel_swi(OS_RemoveTickerEvent, &reg, &reg);

    CLEAR_FLAG(flags,flag_timeout_pending);
  }

  irqs_on(old_irqs);

  return;
}

/*
 * flush any events awaiting to be processed.
 */
void
sys_DiscardEvents(void)
{
  int old_irqs;

  debug_printf(db,"(7) discard events\n");

  old_irqs = irqs_off();
  next_event = -1;
  irqs_on(old_irqs);
}

/*
 * wait a given number of centiseconds
 */
void
sys_Delay(UINT iTime)
{
  _kernel_swi_regs reg;

  _kernel_swi(OS_ReadMonotonicTime, &reg, &reg);
  iTime+=reg.r[0];
  while(reg.r[0]<iTime) {
    _kernel_swi(OS_ReadMonotonicTime, &reg, &reg);
  }
}

/*
 * send service call out to say we are starting
 */
_kernel_oserror *
starting_handler(_kernel_swi_regs *r, void *pw)
{
  _kernel_swi_regs reg;

  reg.r[1] = Service_SCTransportStarting;
  _kernel_swi(OS_ServiceCall, &reg, &reg);

  return (NULL);
}

/** This is a callback to come and pretend to be the original upcall,
    Note that the original reason for the upcall may or may not be valid....
**/
_kernel_oserror *
upcall_callback_handler(_kernel_swi_regs *r, void *pw)
{
  upcall_handler(&g_callback_block,pw);

  return(NULL);
}
