/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
/*
 * To provide the top-level API functions.
 */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "header.h"
#include "module.h"

#include "sci_api.h"
#include "sci_int.h"
#include "t1.h"
#include "t0_sm.h"
#include "atr.h"
#include "chan.h"
#include "com.h"

#include "pmsdebug.h"

extern int max_ifsc;

static void sci_ReleaseLock (void);

/*
 */
int
sci_Open (int msg_id, int *card_channel)
{
  int channel = -1;

  debug_printf(db,"(7) open\n");

  *card_channel = -1;

  if (sci_State == S_S_CMD || sci_State == S_S_USER)
    RETERR(SCI_E_SEQ);

  if (sci_State == S_S_CLOSED)
    if (sci_Init () != SCI_SUCCESS)
      RETERR(SCI_E_API);

  /*
   * get first free channel
   */
  channel = chan_GetNew();
  if (channel == -1)
    RETERR(SCI_E_TOOMANY);

  switch (sci_State)
  {
    case S_S_CLOSED:
      /* prepare for receipt of ATR */
      if (atr_Start(false) != SCI_SUCCESS)
        RETERR_CHAN(channel,SCI_E_API);
      break;

    case S_S_OPENING: case S_S_REMOVED:
      sci_State = S_S_OPENING;
      break;

    case S_S_OPEN:
      /*
       * indicate slot allocated and message notification type
       */
      SET_FLAG(ChannelTable[channel].flags,channel_in_use);
      if (msg_id!=0)
        SET_FLAG(ChannelTable[channel].flags,channel_async);

      /* card already open */
      sys_SignalTask(channel,SCI_CMD_DONE);

      break;

    case S_S_STARTING: case S_S_FAILED:
      sci_Locked = false;

      /* reset SCIP and prepare for receipt of ATR */
      if (atr_Start (true) != SCI_SUCCESS)
        RETERR_CHAN(channel,SCI_E_COMMS);

      break;
  }

  SET_FLAG(ChannelTable[channel].flags,channel_in_use);
  if (msg_id!=0)
    SET_FLAG(ChannelTable[channel].flags,channel_async);
  ChannelTable[channel].last_err = 0;
  ChannelTable[channel].state = S_C_OPENING;

  *card_channel = channel;
  debug_printf(db,"(7) allocated channel %d\n",channel);

  if (!com_CardIn())
    RETERR_CHAN(channel,SCI_E_OUT);

  return (SCI_SUCCESS);
}

/*
 */
int
sci_RetrieveATR (int channel, BYTE * hist,
		 int hist_len, int * rcv_len)
{
  debug_printf(db,"(7) retrieve ATR on channel %d\n", channel);

  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (hist==NULL || rcv_len==NULL)
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (sci_State == S_S_FAILED)
    return (SCI_FAIL);

  if (ChannelTable[channel].state == S_C_FAILED)
    return (SCI_FAIL);

  if (ChannelTable[channel].state != S_C_OPENING)
    RETERR_CHAN(channel,SCI_E_SEQ);

  if (sci_State != S_S_OPEN)
    RETERR(SCI_E_NODATA);

  ChannelTable[channel].state = S_C_OPEN;

  if (sci_HistLen > hist_len)
  {
    memcpy (hist, sci_HistData, hist_len);
    *rcv_len = sci_HistLen;
    RETERR(SCI_E_TRUNC);
  }
  else
  {
    memcpy (hist, sci_HistData, sci_HistLen);
    *rcv_len = sci_HistLen;
  }
  debug_printf(db,"(7) returning ATR, length %d\n",sci_HistLen);
  if (sci_HistLen>0) {
    int i;
    for (i=0; i<sci_HistLen; i++)
      //printf("(7)    ATR[%d] : 0x%x\n",i,sci_HistData[i]);
      debug_printf(db,"(7)    ATR[%d] : 0x%x\n",i,sci_HistData[i]);
  }

  return (SCI_SUCCESS);
}

/*
 */
int
sci_Close (int channel)
{
  debug_printf(db,"(7) close channel %d\n", channel);

  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  /* if this connection is holding the lock free it */
  if (ChannelTable[channel].flags & channel_locked)
  {
    sci_Locked = false;
    sci_ReleaseLock();
  }

  /* initialise slot ready for reuse */
  chan_Init(channel);

  /* reset state machine */
  if (com_CardIn())
      sci_State = S_S_OPEN;

  return (SCI_SUCCESS);
}

/*      SCTransport_IssueCommand SWI
        ----------------------------

On Entry - channel        card handle
           cmd_hdr        pointer to command header (CLA, INS, P1, P2), or 0 to tell card our IFSD.
           data_len       length of data buffer
           data           pointer to data buffer
           exp_len        expected length (Le) of response if required. 0 otherwise.

On Exit:                  Returns pointer to error block or 0 for success

The data_len may be greater than IFSC (Interface Field Size for Card) in which case
it is copied into our own buffer by t1_StartCommand.

Data must fit into our buffer of CMDBUF_MAX bytes, otherwise an SCI_E_TRUNC error is returned.

Note that CTS does not expect this SWI to return an error as it expects all errors to be
repoerted asynchronously as events.

Note that the original code would mark a card and its channels as faulty (in t0_error)
so that future IssueCommand SWIs would immediately return an error. This was changed
in v0.47 (7 Feb 2000) as the CTS application did not expect this.

OUTSTANDING:

There is major confusion between IFSC and IFSD here. The card tells us its
IFSC in its ATR (Answer To Reset) or when it sends an IFSC request.

We tell the card our IFSD (254 bytes) when we send an IFSD request to the card.

In both cases the recipient should acknowledge the IFSC/IFSC request with an
IFSC/IFSD response which echoes the INF field back as confirmation.

Note that this code assumes that IFSC and IFSD are related - they are not.

*/

int
sci_IssueCommand (int channel, BYTE * cmd_hdr,
		  int data_len, BYTE * data, int exp_len)
{
  int err;

  debug_printf(db,"(7) issue command (channel %d)\n",channel);

  if (data_len>CMD_BUF_MAX) RETERR_CHAN(channel,SCI_E_TRUNC);

#ifdef FUNAI_TWINSLOT
  if(channel == -2)
  {
    if(cmd_hdr == 0)
    {
#if 0
      BYTE cmd[10];

      /* This code was removed in v0.48 as it is not correct and is undocumented functionality.
      The idea is that CTS can send an IFSD S-block command by specifying a null cmd_hdr and
      the new IFSD in data[0].

      However, it confuses IFSC and IFSD which should be unrelated.
      It is also used before sending data to the card when it should be used after
      first opening the card or before receiving data from the card.

      Our IFSD should always be 0xFE since the NC and the microcontroller can both accept
      254 bytes from the card */

      /** S-block **/
      g_slot2_state = CMD_RESPONSE_HDR;
      g_uc_state = UC_IDLE;
      g_slot2_dataptr = g_slot2_datablock;
      com_SendFunaiHeader(SLOT_2, CMD_APDU);
      if((*data) < max_ifsc)
      {
        cmd[0]=0x00; cmd[1]=0xC1; cmd[2]=0x01; cmd[3]=*data; cmd[4]=0xC0^(*data);
      }
      else
      {
        cmd[0]=0x00; cmd[1]=0xC1; cmd[2]=0x01; cmd[3]=max_ifsc; cmd[4]=0xC0^max_ifsc;
      }
      com_SendBytes(cmd, 5);
#endif

      return(SCI_SUCCESS);
    }
    else
    {
      g_slot2_state = CMD_RESPONSE_HDR;
      g_uc_state = UC_IDLE;
      g_slot2_dataptr = g_slot2_datablock;
      if(data_len & 0x80000000)
      {
        err=t1_StartCommand(SLOT_2, cmd_hdr,(data_len & 0xffff),data,exp_len, true);
      }
      else
      {
        err=t1_StartCommand(SLOT_2, cmd_hdr,data_len,data,exp_len, false);
      }
      RETERR(err);
    }
  }
#endif

  pms_debug("Channel in use: %d ", (ChannelTable[channel].flags & channel_in_use));
  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (cmd_hdr==NULL || (data==NULL && data_len>0))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (data_len > SCI_MAX_DATA_LEN || exp_len > SCI_MAX_EXP_LEN)
    RETERR_CHAN(channel,SCI_E_INVAL);

  pms_debug("sci_State: %d ", sci_State);
  if (sci_State == S_S_FAILED)
    return (SCI_FAIL);

  if (sci_State == S_S_REMOVED)
    RETERR_CHAN(channel,SCI_E_OUT);

  if (sci_State != S_S_OPEN)
    RETERR_CHAN(channel,SCI_E_SEQ);

  if (ChannelTable[channel].state == S_C_FAILED)
    return (SCI_FAIL);

  /* check if system locked by another connection */
  if (sci_Locked && !(ChannelTable[channel].flags & channel_locked))
    RETERR_CHAN(channel,SCI_E_TRANS);

  pms_debug("Here we go...");

  sci_State = S_S_CMD;
  g_uc_state = UC_IDLE;

  // new to select protocol commands
  switch (card_status.protocol) {
    case 1 :
      if(data_len & 0x80000000)
      {
        err=t1_StartCommand(SLOT_1, cmd_hdr,(data_len & 0xffff),data,exp_len, true);
      }
      else
      {
        err=t1_StartCommand(SLOT_1, cmd_hdr,data_len,data,exp_len, false);
      }
//      err=t1_StartCommand(SLOT_1, cmd_hdr,data_len,data,exp_len, FALSE);
      break;
    default :
      err = t0_StartCommand(cmd_hdr, data_len, data, exp_len);
      break;
  }
  pms_debug("Start command returned err %d", err);
  if (err != SCI_SUCCESS) {
    sci_State = S_S_FAILED;
    ChannelTable[channel].state = S_C_FAILED;
    RETERR_CHAN(channel,err);
  }

  return (SCI_SUCCESS);
}

/*       Read Response from Card
         -----------------------

Handle the SWI to read returned data from the card.
Note that cards (slots) 1 and 2 are treated differently as the slot 2 code was added later.

The data has already been read from the card into our buffer so we copy the buffer into the
caller's buffer, fill in the rcv_len and copy the SW1 and SW2 status bytes into the 2 byte
resp buffer.

The rcv_len indicates the size of the buffer needed to hold the data, or -1 to indicate an
S block response in which case there is no returned data other than SW1 stored at resp[0].

Bug in SCTrans 0.39 fixed (Paul Skirrow):
When reading slot 2, the SW1 and SW2 bytes were included in the copied data, even though they
were not included in the length when the caller asked for the size of buffer required.
*/

int
sci_ReadResponse (int channel, BYTE * buff,
		  int buff_len, int * rcv_len, BYTE * resp)
{
  int err;

   debug_printf(db,"(7) read response (channel %d)\n",channel);
#ifdef FUNAI_TWINSLOT
  if(channel == -2)
  {
    if(buff_len == 0) /** Query about size needed **/
    {
      *rcv_len = (g_slot2_dataptr - g_slot2_datablock)-2;      /* -2 because the SW1 and SW2 data bytes are returned separately and not in the buffer */
      if (*rcv_len<0) *rcv_len=0;
      return(SCI_SUCCESS);
    }
    /* Check there's room for the data */
    if(buff_len < (g_slot2_dataptr - g_slot2_datablock)-2 || buff==NULL)      /* Check for buffer too small or invalid buffer pointer */
    {
      RETERR(SCI_E_TRUNC);
    }
    *rcv_len = (g_slot2_dataptr - g_slot2_datablock)-2;

/*  memcpy(buff, g_slot2_datablock, (g_slot2_dataptr - g_slot2_datablock) ); */
    if (*rcv_len>0) memcpy(buff, g_slot2_datablock, *rcv_len );      /* Bug fix: was returning SW1 and SW2 in data, but not counting in rcv_len */
    *resp=*(g_slot2_dataptr -2);                     /* SW1 status byte - see ISO/IEC 7816-4 page 16 */
    *(resp+1)=*(g_slot2_dataptr -1);                 /* SW2 status byte */
    return(SCI_SUCCESS);
  }
#endif

  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (rcv_len == NULL)
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (sci_State == S_S_REMOVED)
    RETERR_CHAN(channel,SCI_E_OUT);

  if (sci_State == S_S_FAILED)
    return (SCI_FAIL);

  if (sci_State == S_S_CMD)
    RETERR_CHAN(channel,SCI_E_NODATA);

  if (sci_State != S_S_USER)
    RETERR_CHAN(channel,SCI_E_SEQ);

  if (ChannelTable[channel].state == S_C_FAILED)
    return (SCI_FAIL);

  if (ChannelTable[channel].state != S_C_USER)
    RETERR_CHAN(channel,SCI_E_SEQ);

  switch (card_status.protocol) {
    case 1 :
      err = t1_GetData(buff, buff_len, rcv_len, resp);
      break;
    default :
      err = t0_GetData(buff, buff_len, rcv_len, resp);
      break;
  }
  if (err != SCI_SUCCESS) {
    if (err == SCI_E_TRUNC) {/* ensure we go back to correct state */
      sci_State = S_S_OPEN;
    }

    RETERR_CHAN(channel,err);
  }
  sci_State = S_S_OPEN;

  debug_printf(db,"(7) read response successful (channel %d)\n",channel);
#ifdef FUNAI_TWINSLOT
  debug_printf(db, "ReadResponse terminated\n");
  g_uc_state = UC_IDLE;	/** Stream completed, so should be able to get card in/outs now **/
#endif
  return (SCI_SUCCESS);
}

/*
 */
int
sci_StartTrans (int channel)
{
  debug_printf(db,"(7) start trans (channel %d)\n",channel);

  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (sci_State == S_S_FAILED)
    /* error code should already have been set */
    return (SCI_FAIL);

  if (sci_State == S_S_REMOVED)
    RETERR_CHAN(channel,SCI_E_OUT);

  if (sci_State != S_S_OPEN)
    RETERR_CHAN(channel,SCI_E_SEQ);

  if (sci_Locked)
  {
    /* if this connection has already got lock its an error */
    if (ChannelTable[channel].flags & channel_locked)
    {
      RETERR_CHAN(channel,SCI_E_SEQ);
    }
    else
    {
      /* mark connection as waiting */
      SET_FLAG(ChannelTable[channel].flags,channel_wait_unlock);
      RETERR_CHAN(channel,SCI_E_TRANS);
    }
  }

  /* lock out all connections except this one */
  sci_Locked = true;
  SET_FLAG(ChannelTable[channel].flags,channel_locked);
  CLEAR_FLAG(ChannelTable[channel].flags,channel_wait_unlock);
  current_channel = channel;

  return (SCI_SUCCESS);
}

/*
 */
int
sci_EndTrans (int channel)
{
  debug_printf(db,"(7) end trans (channel %d)\n",channel);

  if (!(ChannelTable[channel].flags & channel_in_use))
    RETERR_CHAN(channel,SCI_E_INVAL);

  if (sci_State == S_S_FAILED)
    /* error code should already have been set */
    return (SCI_FAIL);

  if (sci_State == S_S_REMOVED)
    RETERR_CHAN(channel,SCI_E_OUT);

  if (!sci_Locked)
    RETERR_CHAN(channel,SCI_E_SEQ);

  if (sci_State != S_S_OPEN)
    RETERR_CHAN(channel,SCI_E_SEQ);

  /* check that this connection is holding the lock */
  if (!(ChannelTable[channel].flags&channel_locked))
    RETERR_CHAN(channel,SCI_E_SEQ);

  CLEAR_FLAG(ChannelTable[channel].flags,channel_locked);
  current_channel = -1;
  sci_Locked = false;

  /* signal any waiting processes */
  sci_ReleaseLock();

  return (SCI_SUCCESS);
}

/*
 * if caller passes value SCI_FAIL or channel is invalid return last error
 * code generated by any process
 */
int
sci_Error(int channel)
{
  if (channel == SCI_FAIL || channel==-1)
    return (sci_Errno);
  else
    return (ChannelTable[channel].last_err);
}

/*
 * Returns the number of smartcard slots in the system
 */
int
sci_SlotInfo(_kernel_swi_regs *r)
{
#ifdef FUNAI_TWINSLOT
  switch(r->r[0])
  {
    case 1:  if(g_card1_in == false) r->r[1] = 0; else r->r[1] = 3;
             r->r[2] = 0; /** It's got to be an STD-x card in slot 1 **/
             break;
    case 2:  if(g_card2_in == false) r->r[1] = 0; else r->r[1] = 3;
#ifdef OLD_GETATR
             if(g_slot2_cardtype == CARD_BAD) r->r[1] = 2;
             r->r[2] = g_slot2_cardtype;
  #endif
             break;
  }
  return(2); /* Number of slots */
#else
  return(1);
#endif
}

/*
 * Kicks off the background fetch of the slot 2 data
 */
int
sci_InitSlot2(void)
{
  #ifdef FUNAI_TWINSLOT
    if(g_slot2_datablock_state != SCI_E_NODATA)
    {
      return(g_slot2_datablock_state);
    }
    else if(g_card2_in == true)
    {
#ifdef RETRY_BODGE
      _swix(OS_ReadMonotonicTime, _OUT(0), &g_slot2_readtime); /** Log what time we started **/
#endif
      g_slot2_datablock_state = SCI_E_NODATA;
      g_slot2_state = VERIFY_SEND;
      debug_printf(db, "Calling com_StartReadSlot2\n");
      com_StartReadSlot2();
      debug_printf(db, "Returned from calling com_startreadslot2\n");
      return(SCI_SUCCESS);
    }
    else
    {
      return(SCI_E_OUT);
    }
  #else
    return(SCI_E_ISLOT);
  #endif
}

/*
 * It says it reads slot 2, but that's not quite true. It
 * just sorts whatever we have in our pre-read buffer...
 */
int
sci_ReadSlot2
(
  _kernel_swi_regs *regblock
)
{
  #ifdef FUNAI_TWINSLOT
    unsigned char	*ptr;
    int			copylen;
    char		blocks = 0;
#ifdef RETRY_BODGE
    unsigned int	current_time;
#endif

    if(g_slot2_datablock_state != SCI_SUCCESS)
    {
#ifdef RETRY_BODGE
      /** Check to see if we've timed out **/
      if(g_slot2_datablock_state == SCI_E_NODATA)
      {
        _swix(OS_ReadMonotonicTime, _OUT(0), &current_time); /** Log what time we started **/
        if( (current_time - g_slot2_readtime) > SLOT2_TIMEOUT_TIME)
        {
          /** This is bad, m'kaye? **/
          g_slot2_readtime = current_time; /* Nicety, JIC we're re-entered */
          com_SendAck(); /** Send the 'FF' we're missing **/
	  g_record = 20; /** Reset :-) */
	  g_nrecords= 20; /** Reset :-) */
	  g_uc_state = UC_IDLE;
	  g_slot2_state = IDLE;
          g_funai_header = NO_HEADER;		/* reset */
          _swix(SCTransport_InitSlot2, 0); /** Call the initslot again, as if it were for the first time...**/
        }
      }
#endif
      return(g_slot2_datablock_state); /** Get out if not got data for any reason **/
    }

    /** Find the URL block and the CARD block in the data **/
    ptr = g_slot2_datablock;
    do
    {
      if((*ptr) == 0x80)
      {
        /** Is a CARD block **/
        if(*(ptr+3) != '2')
        {
          g_slot2_datablock_state = SCI_E_NOTURL;
          return(SCI_E_NOTURL);
        }

//	printf("Seen 0x80 block at &%08X\n", (unsigned int)ptr);
	ptr+= (*(ptr+1))+2;
//	printf("Moved on to &%08X\n", (unsigned int)ptr);
        blocks++; /** We've seen a 'good' block **/
      }
      else if((*ptr) == 0x8B)
      {
        /** Is a URL block, so copy data to dest block **/
//	printf("Seeing 0x8B block at &%08X\n", (unsigned int)ptr);
        ptr++;
        if(*ptr > regblock->r[2])
        {
          copylen = regblock->r[2];
          regblock->r[2] = regblock->r[2]-copylen;
        }
        else
        {
          copylen = *ptr;
          regblock->r[2] = 0;
        }
        memcpy((void *)regblock->r[1], ptr+1, copylen);
        regblock->r[1] = copylen;
        blocks++; /** We've seen a 'good' block **/
      }
      else
      {
//	printf("Seen &%02X block at &%08X\n", *ptr, (unsigned int)ptr);
        if(*ptr != 0xff) ptr += (*(ptr+1))+2;
      }
    } while( (*ptr != 0xff) & (blocks < 2) & (ptr < (g_slot2_datablock+DATABLOCK_LEN)) );

    if(blocks == 2)
    {
      return(SCI_SUCCESS);
    }
    else return(SCI_E_BADDATA); /** Dodgy card **/
  #else
    return(SCI_E_ISLOT); /** No such slot **/
  #endif

}


/*
 * Kicks off a power-up or power-down of the specified slot
 */
int
sci_PowerControl(int state, int slot)
{
  /** sanity checks **/
  if( (slot!=SLOT_1) & (slot!=SLOT_2) ) return(SCI_FAIL);

  if(state == 0)
  {
    /** If powering up, generate a false 'card inserted' event **/
    g_funai_header = MSG_CARDINSERT;
    com_ProcessCardInserted(slot);
  }
  else if(state == 1)
  {
    /** If powering down, spit a 'powerdown' command at the micro **/
    com_SendFunaiHeader(slot, CMD_CARDCLOSE);
    if(slot == SLOT_1)
    {
      t0_CardStatusChange(false);
      g_card1_in = false;
    }
    else
    {
      g_card2_in = false;
      g_slot2_datablock_state = SCI_E_OUT;
    }
    debug_printf(db, "POWERED DOWN SLOT %d\n",slot);
    g_funai_header = NO_HEADER;		/* reset */
    g_event_busy = EVENT_IDLE;			/* reset */
  }
  else
  {
    return(SCI_FAIL);
  }

  return(SCI_SUCCESS);
}


/*
 * Called from sci_Open() the very first time open is invoked to initialise
 * data areas, open various operating system resources and open a connection
 * to the serial communications system.
 */
int
sci_Init (void)
{
  int channel;

  sci_Errno = 0;
  sci_Locked = false;
  current_channel = -1;

  /* initialise connection table */
  for (channel=0; channel<MAX_CARD_CHANNELS; channel++)
    chan_Init(channel);

  return (SCI_SUCCESS);
}

/*
 * Called from sci_Close() and sci_CloseTrans() to search the connection table
 * for connections which are active and waiting for the transaction lock. The
 * owner of each such connection is signalled to indicate that the lock is now
 * free.
 */
static void
sci_ReleaseLock(void)
{
  int channel;

  /* search connection table for connections waiting for lock */
  for (channel=0; channel<MAX_CARD_CHANNELS; channel++)
  {
    /* look for active slots which are waiting for the lock */
    if (ChannelTable[channel].flags & channel_in_use)
      if (ChannelTable[channel].flags & channel_wait_unlock)
      {
        /*
         * send message to waiting task note that if more than one such channel
         * for the task it will get 1 message per waiting connection
         */
        sys_SignalTask(channel,SCI_TRANS_END);
        CLEAR_FLAG(ChannelTable[channel].flags,channel_wait_unlock);
      }
  }

  return;
}
