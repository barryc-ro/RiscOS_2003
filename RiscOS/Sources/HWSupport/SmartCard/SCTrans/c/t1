/*-------------------------------------------------------------------------

 File: T1.c

 Purpose:
	To implement those functions which handle the smart card protocol
	T=1.

---------------------------------------------------------------------------

	Written by Applied Card Technologies
	Copyright (c) 1997 Applied Card Technologies All Rights Reserved.

-------------------------------------------------------------------------*/

#ifdef _WINDOWS
#include <windows.h>
#endif
#include <stdio.h>
#include <string.h>
#include "sci_api.h"
#include "sci_int.h"
#include "atr.h"
#include "t1.h"
#include "com.h"

#include "pmsdebug.h"  /* Paul Skirrow's debug */


// structures
T1_PCKT Command;
T1_PCKT RXPckt;
T1_RESPDATA Resp;

/* state control variables */
int t1_State;
int TX_SeqNo[3];	// global transmit sequence number variable
int IFSC_Value[3];      // Global current IFSC value - one for each slot
                        // IFSC is Interface Field Size for Card (see ISO/IEC7816-3 page 4)
                        // It specifies max length of information field of blocks which can be
                        // received by the card.

int Exp_SeqNo;

static int RXCNT;

static int BUFFERSIZE = 104;	// 104 bytes

// variables

static int LRC_Len;		// make this a global variable

/* static int IFSC;*/		// global variable for updated IFSC value

static int Retry;		// global variable for retry

int IFS_Count = 0;		// initialise counter

int Alldata;

// flags
/* bool F_IFSC_Updated = false;	*/ // set IFSC_Updated flag to false as default

int SendRBlock(int seq_no, BYTE type);

/**************************************************************************/
int
t1_ProcessByte(BYTE ch)
{
  BYTE Xor_Result;
  int err;

  debug_printf(db, "Entering t1_ReadResponse()\n");
//  pms_debug("%0X", (int) ch);

  switch (t1_State) {

    case T1_NAD:
      RXPckt.NAD = ch;		// store the rec'd NAD byte
      t1_State = T1_PCB;	// update t1_State
      RXCNT = 0;		// reset counter
      debug_printf(db, "t1_ReadResponse(), NAD: %02x\n", RXPckt.NAD);
      break;

    case T1_PCB:
      RXPckt.PCB = ch;		// store the rec'd PCB byte
      t1_State = T1_LEN;	// update t1_State
      debug_printf(db, "t1_ReadResponse(), PCB: %02x\n", RXPckt.PCB);
      break;

    case T1_LEN:
      RXPckt.LEN = ch;		// store the rec'd LEN byte
      if (RXPckt.LEN) {
        t1_State = T1_DATA;	// update t1_State
      } else {
        t1_State = T1_LRC;	// update t1_State
      }
      debug_printf(db, "t1_ReadResponse(), LEN: %02x\n", RXPckt.LEN);
      break;

    case T1_DATA:
      /* tag the data on the end of the buffer */
      RXPckt.DATA[RXCNT + RXPckt.data_start] = ch;
      debug_printf(db, "t1_ReadResponse(), Data Byte:%02d = %02x\n", (RXCNT + RXPckt.data_start), RXPckt.DATA[RXCNT + RXPckt.data_start]);
      RXCNT++;
      if (RXCNT == RXPckt.LEN) {
        t1_State = T1_LRC;
      }
      break;

    case T1_LRC:
      RXPckt.TCK = ch;		// store the rec'd LRC byte
      t1_State = T1_END;	// block now complete
      debug_printf(db, "t1_ReadResponse(), TCK: %02x\n", RXPckt.TCK);
      break;

    case T1_END:
      /* data remaining to be processed but block is complete -  error
       * generate and send error block set state control variables
       * to expect new I_block
       */
      return SCI_ERROR;	/* for now */
  }

  if (t1_State != T1_END) {
    /* finished processing buffer but block not complete so
       return and wait for next comms chunk */
    debug_printf(db, "t1_ReadResponse(), Waiting for more data\n");
    return SCI_SUCCESS;
  }
  Xor_Result = t1_Check(&RXPckt);	// calculate checksum

  if (Xor_Result == RXPckt.TCK)	{ // rec'd checksum = calculated checksum?
    debug_printf(db, "t1_ReadResponse(), Received block correctly\n");
    RXPckt.total_len += RXPckt.LEN;
    RXPckt.data_start += RXPckt.LEN;
    pms_debug("t1_ReadResponse(), Received block correctly, total_len: %d, start: %d", RXPckt.total_len, RXPckt.data_start);
    return t1_DecodeBlk();	// Decode the block and return the error code
                                //  (bug fix: error codes were discarded before v0.41)
  } else {			// not equal so construct and send an R-Blk
    debug_printf(db, "t1_ReadResponse(), Received block, check sum error\n");
    pms_debug("t1_ReadResponse(), Received block, check sum error");

    com_SendAck();
    g_uc_state = UC_IDLE;
    Command.NAD = 0;
    if (Exp_SeqNo == 0) {	// expected sequence number can only be 0 or 1
      Command.PCB = 0x81;		// PCB - Exp_SeqNo = 0, EDC error
    } else {
      Command.PCB = 0x91;		// PCB - Exp_SeqNo = 1, EDC error
    }

    Command.LEN = 0;
    LRC_Len = 3;		// NAD,PCB and LEN (no data bytes)
    Xor_Result = t1_Check(&Command);	// go and calculate the checksum
    Command.TCK = Xor_Result;	// insert the result at the end of the block
    err = SendBlk(&Command);

    return err;
  }

  return SCI_SUCCESS;
}

/*      Send Slot 1 Command
        -------------------

On Entry - slot           card slot number
           cmd_hdr        pointer to command header (CLA, INS, P1, P2)
           data_len       length of data buffer
           data           pointer to data buffer
           exp_len        expected length (Le) of response if required. 0 otherwise.
           t1_extended

On Exit:   Returns pointer to error block or 0 for success


The data_len may be greater than IFSC (Interface Field Size for Card) in which case
it must be sent as several chained I blocks. After each I block we wait for a response
before sending the next I block. This will happen asynchronously, and we return immediately
(after sending the first I block to the serial port). It is therefore necessary to copy the
data into our own

*/

int
t1_StartCommand(int slot, BYTE * cmd_hdr,
		int data_len, BYTE * data, int exp_len, int t1_extended)
{
  static int XportType;
  int i, j;

  debug_printf(db, "Entering t1_StartCommand()\n");

//  com_FlushComms();		/* clear comms buffers */

  Retry = 0;			// initialise the retry counter

  Command.slot = slot;
  /* set variables to handle sending I-block(s) */
  Command.len_sent = 0;
  Command.data_start = 0;

  /* set variables to handle reception of following I-block(s) */
  RXPckt.total_len = 0;
  RXPckt.len_sent = 0;
  RXPckt.data_start = 0;

  // determine transport type - case 1, 2, 3 or 4
  // Check for LC=0 (data_len) AND LE=0 (exp_len)
  if(t1_extended == false)
  {
    if (data_len) {
      if (exp_len) {
        XportType = T1_CASE4;	// Header, Lc, Data, Le
      } else {
        XportType = T1_CASE3;	// Header, Lc, Data
      }
    } else {
      if (exp_len) {
        XportType = T1_CASE2;	// Header, Le
      } else {
        XportType = T1_CASE1;	// Header
      }
    }
  }
  else /* Extended apdu format */
  {
    if (data_len) {
      if (exp_len) {
        XportType = T1_CASE7;	// Header, Lcx2, Data, Lex2
      } else {
        XportType = T1_CASE6;	// Header, Lcx2, Data
      }
    } else {
      if (exp_len) {
        XportType = T1_CASE5;	// Header, Lex2
      } else {
        XportType = T1_CASE1;	// Header
      }
    }
  }

  debug_printf(db, "XportType = %d\n",XportType);
  exp_len = exp_len & 0xffff; /* Ditch the topbit */

  Command.DATA[0] = *cmd_hdr++;
  Command.DATA[1] = *cmd_hdr++;
  Command.DATA[2] = *cmd_hdr++;
  Command.DATA[3] = *cmd_hdr++;

  switch (XportType) {
    case T1_CASE1:
      Command.total_len = 4;
      break;

    case T1_CASE2:
      Command.total_len = 5;
      Command.DATA[4] = exp_len;
      break;

    case T1_CASE3:
      Command.total_len = 5 + data_len;
      Command.DATA[4] = data_len;

      debug_printf(db, "Class: %2x Ins: %2x P1: %2x P2: %2x\n",
      			Command.DATA[0], Command.DATA[1],
      			Command.DATA[2], Command.DATA[3]);

      for (i = 5, j = 0; j < data_len; i++, j++) {
	Command.DATA[i] = data[j];
      }
      break;

    case T1_CASE4:
      Command.total_len = 6 + data_len;
      Command.DATA[4] = data_len;

      debug_printf(db, "Class: %2x Ins: %2x P1: %2x P2: %2x\n",
		   Command.DATA[0], Command.DATA[1],
		   Command.DATA[2], Command.DATA[3]);

      for (i = 5, j = 0; j < data_len; i++, j++) {
	Command.DATA[i] = data[j];
      }
      Command.DATA[i] = exp_len;
      break;

    case T1_CASE5:
      Command.total_len = 7;
      Command.DATA[4] = 0; /* Indicates extended Le */
      Command.DATA[5] = (exp_len & 0xff00)>>8; /* hibyte */
      Command.DATA[6] = exp_len & 0xff;        /* lobyte */
      break;

    case T1_CASE6:
      Command.total_len = 7 + data_len;
      Command.DATA[4] = 0; /* Indicates extended Lc */
      Command.DATA[5] = (data_len & 0xff00)>>8; /* hibyte */
      Command.DATA[6] = data_len & 0xff;        /* lobyte */

      debug_printf(db, "Class: %2x Ins: %2x P1: %2x P2: %2x\n",
      			Command.DATA[0], Command.DATA[1],
      			Command.DATA[2], Command.DATA[3]);

      for (i = 7, j = 0; j < data_len; i++, j++) {
	Command.DATA[i] = data[j];
      }
      break;

    case T1_CASE7:
      Command.total_len = 9 + data_len;
      Command.DATA[4] = 0; /* Indicates extended Lc and Le */
      Command.DATA[5] = (data_len & 0xff00)>>8; /* hibyte */
      Command.DATA[6] = data_len & 0xff;        /* lobyte */

      debug_printf(db, "Class: %2x Ins: %2x P1: %2x P2: %2x\n",
		   Command.DATA[0], Command.DATA[1],
		   Command.DATA[2], Command.DATA[3]);

      for (i = 7, j = 0; j < data_len; i++, j++) {
	Command.DATA[i] = data[j];
      }
      Command.DATA[i] = (exp_len & 0xff00)>>8;
      Command.DATA[i+1] = exp_len & 0xff;
      break;
  }

  return SendIBlock();
}

/**************************************************************************/
int
SendIBlock(void)
{
  int len;
  int err;

  debug_printf(db, "Entering SendIBlock()\n");
  pms_debug("\nSendIBlock, g_slot2_state was %d", g_slot2_state);

  Command.NAD = 0x00;		// NAD will always be 0
  Command.PCB = 0x00;

  len = Command.total_len - Command.len_sent;

/* If sending an I block to slot 2, clear the incoming data pointer.
   This is a precaution to guard against the card sending unexpected data
   before we have initalised it. */
  if(Command.slot == SLOT_2) g_slot2_dataptr = g_slot2_datablock;

  pms_debug("  slot %d, len %d, IFSC %d", Command.slot, len, IFSC_Value[Command.slot]);
  if(len > IFSC_Value[Command.slot]) {
    Command.chaining = true;	// set chaining flag to true
    Command.LEN = IFSC_Value[Command.slot];	// set the length to maximum possible
    Command.PCB |= 0x20;
    if(Command.slot == SLOT_2) g_slot2_state = CMD_CHAIN_LINK; /* Warn slot2 that it should be expecting an R-block */
  } else {
    Command.LEN = len;		// set the length to the whole data
    Command.chaining = false;	// set chaining flag to false

    /* Bug fix, added in 0.41:
       If we are sending the last I block of a chain then we expect an I block response, so if our last state
       was CMD_CHAIN_LINK we move to CMD_RESPONSE_HDR. However we must not do this for every I block that we
       send as we need to send I blocks when we initialise the card, send a PIN and read the URL. While doing this
       we do not receive I block responses and we need to preserve our state */
    if(Command.slot == SLOT_2 && g_slot2_state ==CMD_CHAIN_LINK) g_slot2_state = CMD_RESPONSE_HDR; /* Warn slot2 that it should be expecting an I-block */

    pms_debug("  g_slot2_state state set to %d", g_slot2_state);
  }


  debug_printf(db, "SendIBlock(slot=%d): total_len:%d  len_sent:%d Len: %d TXSeq=%d\n", Command.slot, Command.total_len, Command.len_sent, Command.LEN,TX_SeqNo[Command.slot]);
  pms_debug("  IBlock(slot=%d): total_len:%d  len_sent:%d Len: %d TXSeq=%d", Command.slot, Command.total_len, Command.len_sent, Command.LEN,TX_SeqNo[Command.slot]);

  if (TX_SeqNo[Command.slot] != 0) {
    Command.PCB |= 0x40;	// TX_SeqNo = 1
  }

  Command.TCK = t1_Check(&Command);	// go and calculate the checksum

  TX_SeqNo[Command.slot] = Binary_Increment(TX_SeqNo[Command.slot]);

  // DS: RXCNT = 0;
  //DS: t1_State = T1_NAD;                                                                        // initialise the t1_State

  err = SendBlk(&Command);	// transmit Blk

  debug_printf(db, "Exiting SendIBlock(), returning %d\n", err);

  return err;
}

/**************************************************************************/
int
Chaining_Sequence(int datalength)
{
  BYTE Xor_Result;
  int err;

  if (Alldata > IFSC_Value[Command.slot]) {
    Command.LEN = IFSC_Value[Command.slot]; // NOTE: Command.chaining remains TRUE here

    Alldata = Alldata - Command.LEN;
    if (TX_SeqNo[Command.slot] == 0) {
      Command.PCB = 0x20;		// TX_SeqNo = 0
    } else {
      Command.PCB = 0x60;		// TX_SeqNo = 1
    }
  } else {
    Command.LEN = Alldata;	// set the length to the number of
    				// data bytes remaining
    Command.chaining = false;	// and set chaining flag back to false
    if (TX_SeqNo[Command.slot] == 0) {	// PCB will differ depending on TX_SeqNo
    				// but can only be 0 or 1
      Command.PCB = 0x00;		//PCB set with TX_SeqNo = 0
    } else {
      Command.PCB = 0x40;		//PCB set with TX_SeqNo = 1
    }
  }

  LRC_Len = Command.LEN + 3;	   // same regardless of case (1,2,3 or 4)
  Xor_Result = t1_Check(&Command); // go and calculate the checksum
  Command.TCK = Xor_Result;	   // insert the result at the end of the block

  TX_SeqNo[Command.slot] = Binary_Increment(TX_SeqNo[Command.slot]);
  err = SendBlk(&Command);	   // transmit Blk

  return err;
}


/**************************************************************************/
/*   Decode a Block for Slot 1
     -------------------------

Returns error code on exit (added in v0.42).

Note that slot 2 is handled separately. This function is only ever called for slot 1.

The type of block is determined by the top two bits, b8 and b7 (note bits are numbered b1 to b8 in ISO 7816).

  b8  b7   Block type
   0   X   I-block, Information Block (X is the "send sequence number" and toggles between 0 and 1)
   1   0   R-block, Receive Ready Block - contains positive or negative acknowledgments and expected
           number of next I-block
   0   1   S-block, Supervisory Block contains transmission control information.

*/

int t1_DecodeBlk(void)
{
  int err=SCI_SUCCESS;

  //printf("Entering t1_DecodeBlk()\n");
  if ((RXPckt.PCB & 0x80) == 0x00) {	// is it an I-Blk?
    Process_IBlk();
  } else {
    if ((RXPckt.PCB & 0x40) == 0x40) {
      Process_SBlk();
    } else {
      err=Process_RBlk();		// not I-Block or S-Block so must be an R-Block
    }
  }
  return err;                           /* Return error code to caller - added in v0.42 */
}

/*************************************************************************/
BYTE
t1_Check(T1_PCKT * pkt)
/*************************************************************************/
/* This function calculates a checksum byte which is calculated by performing
   a bitwise XOR operation on NAD, PCB and all INF bytes in packet */
{
  BYTE Xor_Result;
  int Loopcount;

  Xor_Result = pkt->NAD;
  Xor_Result ^= (BYTE) pkt->PCB;
  Xor_Result ^= pkt->LEN;

  for (Loopcount = 0; Loopcount < pkt->LEN; Loopcount++) {
    Xor_Result ^= pkt->DATA[Loopcount + pkt->data_start];
  }

  return Xor_Result;
}

/********************************************************************************/
int
Process_IBlk()
/********************************************************************************/
/* rec'd a valid I-Blk */
/* is this a single block or is it chaining? */
/* if it is the last block of a chain (b6 = 0) - need to set Command.chaining back to FALSE */
{
  BYTE seq;

  //printf("Entering Process_IBlk()\n");

  seq = (RXPckt.PCB & 0x40) >> 6;

  if (seq != Exp_SeqNo) {
    debug_printf(db,"Sequence number not as expected, retry count %d\n",Retry);
    if (Retry < 3) {		// respond with R-Blk
      /* send R-block with error type of 2 */
      com_SendAck();
      g_uc_state = UC_IDLE;
      return SendRBlock(Exp_SeqNo, 2);
    } else {
      return SCI_FAIL;
    }
  }
  Exp_SeqNo = Binary_Increment(Exp_SeqNo);

  if ((RXPckt.PCB & 0x20) == 0x20) {	// chaining??
    /*
     * this I-block is part of a chain so send an R-block to elicit
     * the next I-block
     */
    com_SendAck();
    g_uc_state = UC_IDLE;
    return SendRBlock(Exp_SeqNo, 0);	// generate and transmit R-block
  }
  sci_State = S_S_USER;
  ChannelTable[current_channel].state = S_C_USER;

  /*
   * we have a complete sequence of I-blocks so extract data
   * and signal application
   */
  sys_SignalTask(current_channel,SCI_CMD_DONE);

  //printf("Hurrah, IBlock completed sequence\n");
#ifdef FUNAI_TWINSLOT
  com_SendAck();
  g_uc_state = UC_IDLE; /** Finito, can get insert/remove events now **/
#endif
  return SCI_SUCCESS;
}

/******************************************************************************/
int
SendRBlock(int seq_no, BYTE type)
{
  T1_PCKT cmd;

  debug_printf(db, "Entering SendRBlock()\n");

  cmd.slot = 1; /* Always?! */

  cmd.data_start = 0;
  cmd.total_len = 0;

  cmd.NAD = 0x00;		// NAD will always be 0

  if (seq_no == 0) {		// expected sequence number can only be 0 or 1
    cmd.PCB = type | 0x80;	// PCB - Exp_SeqNo = 0, no error
  } else {
    cmd.PCB = type | 0x90;	// PCB - Exp_SeqNo = 1, no error
  }
  cmd.LEN = 0;
  cmd.TCK = t1_Check(&cmd);	// calculate checksum

  return SendBlk(&cmd);
}

/*****************************************************************************

     Process Received R-Block from Slot 1
     ------------------------------------

If R-block is reporting an error re-send the last command.

If it is a response to I-Blk with chaining - send the next I-Block

*/


int
Process_RBlk(void)
{
  debug_printf(db, "Entering Process_RBlk()\n");

  LRC_Len = 3;			// NAD, PCB and LEN

#ifdef FUNAI_TWINSLOT
  com_SendAck(); /* Ack the last response first! */
  g_uc_state = UC_IDLE; /** Finito, can get insert/remove events now **/
#endif

  if ((RXPckt.PCB > 0x80 && RXPckt.PCB != 0x90))  	/* is the R-Blk an error? */
  {
    debug_printf(db, "ERROR seen in RBlk. PCB=&%02X Retry=%d\n",RXPckt.PCB,Retry);
    if (Retry < 3)
    {
	Retry++;		// increment retry counter
	// no need to copy info into Command structure as still in there from
	// when sent the first time
        if (Command.chaining)
        {
	  Command.data_start -= Command.LEN; /* Rewind, so that we re-send the last block again */
          Command.len_sent   -= Command.LEN;
        }
	return SendBlk(&Command);	// resend the blk
    } else {
      RETERR(SCI_E_INVAL);              /* Return error code */
    }
  }
  else
  {			                   // R-Blk not an error
    if (Command.chaining == true) {        // check if response to chaining
      return SendIBlock();                 // Send the next I_Blk in the chain
    }
    else
    {
      return SCI_SUCCESS;	// not an error so return success
    }
  }
}

/******************************************************************************/
/*
      Process S-Block from Slot 1
      ---------------------------

Supervisory Blocks are defined in figure 15 on page 8 of the ISO/IEC7816-3 spec:

    C0     Resynch request
    E0     Resynch response
    C1     Information Field Size (IFS) Request
    E1     IFS Response
    C2     Abort request - used to stop I-block chaining
    E2     Abort response
    C3     Waiting Time Extension (WTX) request
    E3     WTX response
    C4     Vpp error response
           Other values are reserved

This routine processes an incoming S-block from the card.
We respond by sending an S-block acknowledgment back to the card.
Usuually the response had no data
*/
int
Process_SBlk(void)
{
  BYTE Xor_Result;
  int err;

  debug_printf(db, "Entering Process_SBlk()\n");
  pms_debug("S_blk PCB %X", RXPckt.PCB);

  if (RXPckt.PCB >= 0xC0 && RXPckt.PCB < 0xE0) {// S-Blk is a request
    switch (RXPckt.PCB) {
      case 0xC0:		// Resynchronisation request
	Command.NAD = 00;	// NAD will always be 0
	Command.PCB = 0xE1;	// PCB set for resynchronisation response
	Command.LEN = 0;	// no data
	LRC_Len = 3;		// NAD, PCB, LEN
	Xor_Result = t1_Check(&Command); // calculate checksum
	Command.TCK = Xor_Result;	 // add to end of Blk
        #ifdef FUNAI_TWINSLOT
          com_SendAck(); /* Ack the last response first! */
          g_uc_state = UC_IDLE; /** Finito, can get insert/remove events now **/
        #endif
	err = SendBlk(&Command);	 // transmit blk
	return err;
	//break;

      case 0xC1:		// Information Field Size (IFS) request
	if (IFS_Count == 2) {	// 3rd successive time sent?
	  return SCI_FAIL;	// yes
	} else {
	  if (RXPckt.DATA[0] > BUFFERSIZE) {
	    return SCI_FAIL;
	  } else {
	    IFS_Count++;	// increment counter
	    IFSC_Value[SLOT_1] = RXPckt.DATA[0];	// store the new IFSC

	    Command.NAD = 00;	// NAD will always be 0
	    Command.PCB = 0xE1;	// PCB set for IFSC response
	    Command.LEN = 1;
	    Command.DATA[0] = RXPckt.DATA[0];	// size in bytes of new IFSC

	    LRC_Len = 4;	// NAD, PCB, LEN and one DATA
	    Xor_Result = t1_Check(&Command);	// calculate checksum
	    Command.TCK = Xor_Result;	// add to end of Blk
            #ifdef FUNAI_TWINSLOT
              com_SendAck();            // Ack the last response first!
              g_uc_state = UC_IDLE;     // Finito, can get insert/remove events now
            #endif
	    err = SendBlk(&Command);	// transmit S(Response)Blk

	    return err;
	  }
	}
	// break;

      case 0xC2:		// Abort request. We need to send an Abort response (added in v0.44)
        Command.NAD = 00;	// NAD will always be 0
        Command.PCB = 0xE2;	// PCB set for Abort Response
        Command.LEN = 0;        // No data

       pms_debug("Sending E2 response", g_slot2_state);

        LRC_Len = 3;	        // NAD, PCB, LEN
        Xor_Result = t1_Check(&Command); // calculate checksum
        Command.TCK = Xor_Result;	 // add to end of Blk
        #ifdef FUNAI_TWINSLOT
          com_SendAck();        /* Ack the last response first! */
          g_uc_state = UC_IDLE; /* Finito, can get insert/remove events now */
        #endif
        err = SendBlk(&Command);	// transmit S(Response)Blk
        return SCI_FAIL;

      case 0xC3:		// Extension of BWT (SWTX) request
	Command.NAD = 00;	// NAD will always be 0
	Command.PCB = 0xE3;	// PCB set for SWTX response
	Command.LEN = 1;
	Command.DATA[0] = RXPckt.DATA[0];

	LRC_Len = 4;
	Xor_Result = t1_Check(&Command);	// calculate checksum
	Command.TCK = Xor_Result;	// add to end of Blk
        #ifdef FUNAI_TWINSLOT
          com_SendAck(); /* Ack the last response first! */
          g_uc_state = UC_IDLE; /** Finito, can get insert/remove events now **/
        #endif
	err = SendBlk(&Command);	// transmit Blk

	return err;
	// break;

      case 0xC4:		// VPP error (NOT USED)
	return SCI_FAIL;
	// break;

      default:			// other values RFU
	return SCI_FAIL;
    }
  }

  return (RXPckt.PCB==0xE1)?SCI_SUCCESS:SCI_FAIL; // must be S(response)Blk
}

/*  Send Data Block to Card
    -----------------------

On entry:  command structure contains the command data to send
           and also the slot number (SLOT_1 or SLOT_2).
Returns:   error code (eg SCI_SUCCESS).
*/


int SendBlk(T1_PCKT * command)
{
  int i = 0;
  BYTE blk[1024];
  int len;

  WorkWaitTime = card_status.BWT;	// Setup timeout timer

  debug_printf(db, "SendBlk(): WorkWaitTime:%d centi-seconds, data_start: %d\n", WorkWaitTime, command->data_start);
  /* should probably calculate outgoing checksum in here as well */
  t1_State = T1_NAD;	//DS: Set-up t1_ReadResponse to expect a block in return

  blk[0] = command->NAD;
  blk[1] = command->PCB;
  blk[2] = len = command->LEN;

  for (i = 0; i < len; i++)
    blk[i + 3] = command->DATA[i + command->data_start];
  blk[len + 3] = command->TCK;
  pms_debug("  Sent> %s", pms_convert_hex(blk, len+4)); /* Convert block to hex string for debug */

  /* bug fix - apirozek - added if statement */
  if ( command->chaining)
  {
    command->data_start += len;
    command->len_sent += len;
  }

  #ifdef FUNAI_TWINSLOT
    com_SendFunaiHeader(command->slot, CMD_APDU);
  #endif
  return com_SendBytes(blk, 4 + len);
}

/********************************************************************************/
int
Binary_Increment(int Seq_Number)
/********************************************************************************/
{
  if (Seq_Number == 0) {
    return Seq_Number = 1;
  } else {
    if (Seq_Number == 1) {
      return Seq_Number = 0;
    } else {
      return SCI_FAIL;
    }
  }
}


/***************************************************************************/
int
t1_GetData(BYTE * buff, int buff_len, int *rcv_len, BYTE * resp)
/***************************************************************************/

{
  int len;

  debug_printf(db, "Entering t1_GetData()\n");

  len = RXPckt.total_len - 2;

  Resp.SW1 = RXPckt.DATA[len];
  Resp.SW2 = RXPckt.DATA[len + 1];

  *resp++ = Resp.SW1;
  *resp = Resp.SW2;

  if (buff == NULL || buff_len == 0) {
    *rcv_len = len;
    if (len > 0) {
      debug_printf(db, "Exiting t1_GetData() SCI_E_TRUNC\n");

      return (SCI_E_TRUNC);
    } else {
      debug_printf(db, "Exiting t1_GetData() SCI_SUCCESS\n");

      return (SCI_SUCCESS);
    }
  } else if (len > buff_len) {
    memcpy(buff, RXPckt.DATA, buff_len);
    *rcv_len = len;
    debug_printf(db, "Exiting t1_GetData() SCI_E_TRUNC\n");

    return (SCI_E_TRUNC);
  } else {
    /* memcpy(buff, RcvData, ActLen); */
    memcpy(buff, RXPckt.DATA, len);
    /* *rcv_len = ActLen; */
    *rcv_len = len;
    debug_printf(db, "Exiting t1_GetData()\n");

    return SCI_SUCCESS;
  }
}

/*   Send IFSD to Card
     -----------------

Send IFSD to specified card slot (SLOT_1 or SLOT_2) if it is a JICSAP
card, but not if it is a MiniJIS card.

Returns:  SCI_SUCCESS if command sent and IFSD S-block response expected
          SCI_FAIL if command could not be sent because card was MiniJIS (Reasona) card
          Other SCI error code from SendBlk

The IFSD is the Interface Field Size for the interface Device.
See ISO/IEC7816-3, section 9.5.1.2.

We always send IFSD of 0xFE. This is the maximum that the protocol allows
and the microcontroller is happy with it. It makes sense to use the largest
IFSD that we can to improve performance. There was some concern that long
blocks would make it more likely that card removals would be missed but
this is not the case, as the microcontroller will always complete the block
before reporting card insertion and removal events.
*/

int SendIFSD(int slot)
{
  T1_PCKT cmd;

  debug_printf(db, "Entering SendIFSD()\n");
  if (IFSC_Value[slot]>0x25)   /* If this is a JICSAP card then send an IFSD request.  */
  {                            /* (Funai Spec section 2.2 says don't send IFSD to miniJIS cards which we
                                   can detect as they send IFSC of LESS THAN 0x25. This is incorrect as MiniJIS
                                   cards actually send an IFSC of 0x25 - they mean LESS THAN 0x26) */

    cmd.slot = slot;

    cmd.data_start = 0;
    cmd.total_len = 0;

    cmd.NAD = 0x00;		/* NAD will always be 0 */
    cmd.PCB = 0xC1;
    cmd.LEN = 1;
    cmd.DATA[0]=0xFE;             /* Maximum that is allowed by protocol */

    cmd.TCK = t1_Check(&cmd);	/* calculate checksum */

    return SendBlk(&cmd);
  }
  else
    return SCI_FAIL;
}
