/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Test harness for new serial driver
 *
 * Modification History
 *---------------------
 * 14-May-96 RWB Created
 */
#include "kernel.h"
#include "swis.h"
#include "serial.h"
#include "serial_ven.h"
#include "sci_api.h"
#include "sci_int.h"
#include "module.h"
#include "irqs.h"

#include "pmsdebug.h"  /* Paul Skirrow's debug */

/*
 * open a stream on the given filename
 */
int
serial_open_stream(char *strFilename, int iRights)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = iRights;
  reg.r[1] = (int)strFilename;
  err = _kernel_swi(OS_Find,&reg,&reg);
  if (err) return (0);

  return (reg.r[0]);
}

/*
 * close stream specified by handle
 */
void
serial_close_stream(int iHandle)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Find,&reg,&reg);
}

/*
 * execute an ioctl and return the data
 */
unsigned int
serial_ioctl(int iHandle, ioctl_t *pIOCtlBlock)
{
  _kernel_swi_regs reg;

  reg.r[0] = 9;                    /* ioctl */
  reg.r[1] = iHandle;
  reg.r[2] = (int)pIOCtlBlock;
  _kernel_swi(OS_Args,&reg,&reg);

  return (pIOCtlBlock->data);
}

/*
 * Fill buffer with as much data as will fit, or as much as is in the rx stream.
 * Return amount of data read.
 */
int
serial_read_stream(int iHandle, char *pchDataBlock, int iSize)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iRxDataSize;
  int old_irqs = irqs_off();

  reg.r[0] = 2;                         /* get amount of data in buffer */
  reg.r[1] = iHandle;
  ERR_GOTO(err,_kernel_swi(OS_Args,&reg,&reg));
  iRxDataSize = reg.r[2];

  if (iRxDataSize>0)
  {
    if (iRxDataSize>iSize)
      iRxDataSize = iSize;

    reg.r[0] = 4;	      	                /* read data */
    reg.r[1] = iHandle;
    reg.r[2] = (int)pchDataBlock;
    reg.r[3] = iRxDataSize;
    ERR_GOTO(err,_kernel_swi(OS_GBPB,&reg,&reg));
  }
  irqs_on(old_irqs);

  return (iRxDataSize);

exit_gracefully:
  irqs_on(old_irqs);

  return (-1);
}

/*
 * Get a single byte from the serial stream. Will return -1 for failure.
 */
int
serial_read_byte(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iCarry;
  int old_irqs = irqs_off();

  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err || reg.r[2]) goto exit_gracefully;   /* Exit if EOF or error from SWI */

  err = _kernel_swi_c(OS_BGet,&reg,&reg,&iCarry);
  if (err || iCarry) goto exit_gracefully;       /* Exit if error or no byte (C set) */

  irqs_on(old_irqs);
//  pms_debug(">%0X", (int) reg.r[0]);
  return (reg.r[0]);

exit_gracefully:
  irqs_on(old_irqs);
  return (-1);
}

/*
 * Write to tx stream as much data as given or as much as will fit in the
 * stream. Return amount of data written.
 */
int
serial_write_stream(int iHandle, char *pchDataBlock, int iSize)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iTxFreeSize;
  int old_irqs = irqs_off();

  reg.r[0] = 2;                         /* get amount of free space in buffer */
  reg.r[1] = iHandle;
  ERR_GOTO(err,_kernel_swi(OS_Args,&reg,&reg));
  iTxFreeSize = reg.r[2];
  if (iTxFreeSize==0)
    iSize = 0;
  else
  {
    if (iSize>iTxFreeSize)
      iSize = iTxFreeSize;

    reg.r[0] = 2;	      	                /* write data */
    reg.r[1] = iHandle;
    reg.r[2] = (int)pchDataBlock;
    reg.r[3] = iSize;
    ERR_GOTO(err,_kernel_swi(OS_GBPB,&reg,&reg));
  }
  irqs_on(old_irqs);

  return (iSize);

exit_gracefully:
  irqs_on(old_irqs);
  return (-1);
}

/*
 * Send a single byte to the serial stream. Will return 1 for success
 */
int
serial_write_byte(int iHandle, char chData)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = (int)chData;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_BPut,&reg,&reg);
  if (err) return (-1);

  return (1);
}

/*
 * Return free space/amount of data
 */
int serial_size(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = 2;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err) return (-1);

  return (reg.r[2]);
}

