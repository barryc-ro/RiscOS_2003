/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Provide os specific support to the serial library
 *
 * Modification History
 *---------------------
 *
 * 01-Jul-96 RWB, Fixed card wanking bug due to com_SendBytes fault.
 * 06-Sep-96 RWB, Clear dsr_state flag on com_SetResetInd.
 * 11-Sep-96 RWB, Made constant strings statics.
 * 26-Sep-96 RWB, Increased input buffer size to 256 bytes.
 *
 */

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "sci_api.h"
#include "sci_int.h"
#include "serial.h"
#include "serial_ven.h"


static char serial_config[] = "devices#baud9600;data8;stop1;noparity;nohandshake";

#define SERIAL_PORT   "serial1"
#define COM_RESET_PULSE	(1)	/* centi-seconds */

extern int iInputStream;
extern int iOutputStream;
extern int flags;

/*
 * open serial port streams and set ModemStatus to its initial value
 */
int
com_Init(void)
{
  char strConfig[80];

  com_Close();

  sprintf(strConfig,"%s;size300;thres32:$.%s",serial_config,SERIAL_PORT);
  iInputStream  = serial_open_stream(strConfig,SERIAL_INPUT);
  sprintf(strConfig,"%s;size256;thres32:$.%s",serial_config,SERIAL_PORT);
  iOutputStream = serial_open_stream(strConfig,SERIAL_OUTPUT);

  if (!iInputStream || !iOutputStream)
  {
    debug_printf(db,"(7)    failed to open stream");
    serial_close_stream(iInputStream);
    serial_close_stream(iOutputStream);
    return (FALSE);
  }

  com_SetResetInd();

  return (TRUE);
}

/*
 * toggle DTR for 10ms to perform a reset.
 */
int
com_SetResetInd(void)
{
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;

  debug_printf(db,"(7) resetting card");
  CLEAR_FLAG(flags,flag_dsr_state);

  /* read control lines */
  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.write = 0;
  ioctl_block.read = 1;
  ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);

  /* assert dtr */
  ctrl.bits.dtr = 1;
  ioctl_block.write = 1;
  ioctl_block.data = ctrl.data;
  serial_ioctl(iOutputStream,&ioctl_block);

  /* wait 10ms */
  sys_Delay(COM_RESET_PULSE);

  /* clear dtr */
  ctrl.bits.dtr = 0;
  ioctl_block.write = 1;
  ioctl_block.data = ctrl.data;
  serial_ioctl(iOutputStream,&ioctl_block);

  return (SCI_SUCCESS);
}

/*
 * read bytes into buffer
 */
int
com_ReadBytes(BYTE *data, int len)
{
  return (serial_read_stream(iInputStream, (char*)data, len));
}

/*
 * transmit bytes
 */
int
com_SendBytes(BYTE *data, int len)
{
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;

  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.read = 1;

  while (len--)
  {
    /*
     * wait for CTS to be set and check that card is still in
     */
    do
    {
      ioctl_block.data = ctrl.data;
      ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);
      if (!ctrl.bits.dsr)
      {
        ctrl.bits.rts = 0;
        ioctl_block.write = 1;
        ioctl_block.data = ctrl.data;
        serial_ioctl(iOutputStream,&ioctl_block);
        return (SCI_E_OUT);
      }
    } while (!ctrl.bits.cts);

    sys_Delay(1);
    /*
     * transmit byte
     */
    if (serial_write_byte(iOutputStream,*data) != 1)
    {
      debug_printf(db,"(7) Failed to write char");
      return (SCI_E_OUT);
    }

    data++;
  }
  sys_StartWaitTimer((sci_State==S_S_OPENING ) ? ATR_INIT_WAIT : WorkWaitTime);

  return (SCI_SUCCESS);
}

/*
 *
 */
void
com_FlushComms(void)
{
  while(serial_read_byte(iInputStream)!=-1) ;
}

/*
 * look for the presence of DSR
 */
BOOL
com_CardIn(void)
{
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;

  /* read */
  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.write = 0;
  ioctl_block.read = 1;
  serial_ioctl(iOutputStream,&ioctl_block);
  ctrl.data = ioctl_block.data;

  if (ctrl.bits.dsr == 1) return (TRUE);

  return (FALSE);
}

/*
 * close down streams.
 */
void
com_Close(void)
{
  if (iInputStream)  serial_close_stream(iInputStream);
  if (iOutputStream) serial_close_stream(iOutputStream);
  iInputStream = 0;
  iOutputStream = 0;
}
