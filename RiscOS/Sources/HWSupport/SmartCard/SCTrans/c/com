/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Provide os specific support to the serial library
 *
 * Modification History
 *---------------------
 *
 * 01-Jul-96 RWB, Fixed card wanking bug due to com_SendBytes fault.
 * 06-Sep-96 RWB, Clear dsr_state flag on com_SetResetInd.
 * 11-Sep-96 RWB, Made constant strings statics.
 * 26-Sep-96 RWB, Increased input buffer size to 256 bytes.
 *
 */

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "sci_api.h"
#include "sci_int.h"
#include "serial.h"
#include "serial_ven.h"
#include "com.h"
#include "t0_sm.h"
#include "t1.h"


static char serial_config[] = "devices#baud9600;data8;stop1;noparity;nohandshake";

#define SERIAL_PORT   "serial2"
#define COM_RESET_PULSE	(1)	/* centi-seconds */

extern int iInputStream;
extern int iOutputStream;
extern int flags;

int l_error_slot;

/*
 * open serial port streams and set ModemStatus to its initial value
 */
int
com_Init(void)
{
  char strConfig[80];

  com_Close();

  sprintf(strConfig,"%s;size300;thres32:$.%s",serial_config,SERIAL_PORT);
  iInputStream  = serial_open_stream(strConfig,SERIAL_INPUT);
  sprintf(strConfig,"%s;size256;thres32:$.%s",serial_config,SERIAL_PORT);
  iOutputStream = serial_open_stream(strConfig,SERIAL_OUTPUT);

  if (!iInputStream || !iOutputStream)
  {
    debug_printf(db,"(7)    failed to open stream");
    serial_close_stream(iInputStream);
    serial_close_stream(iOutputStream);
    return (FALSE);
  }

  com_SetResetInd();

  return (TRUE);
}

/*
 * toggle DTR for 10ms to perform a reset.
 */
int
com_SetResetInd(void)
{
#if FUNAI_TWINSLOT != TRUE
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;

  debug_printf(db,"(7) resetting card");
  CLEAR_FLAG(flags,flag_dsr_state);

  /* read control lines */
  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.write = 0;
  ioctl_block.read = 1;
  ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);

  /* assert dtr */
  ctrl.bits.dtr = 1;
  ioctl_block.write = 1;
  ioctl_block.data = ctrl.data;
  serial_ioctl(iOutputStream,&ioctl_block);

  /* wait 10ms */
  sys_Delay(COM_RESET_PULSE);

  /* clear dtr */
  ctrl.bits.dtr = 0;
  ioctl_block.write = 1;
  ioctl_block.data = ctrl.data;
  serial_ioctl(iOutputStream,&ioctl_block);
#endif
  return (SCI_SUCCESS);
}

/*
 * read bytes into buffer
 */
int
com_ReadBytes(BYTE *data, int len)
{
  return (serial_read_stream(iInputStream, (char*)data, len));
}

/*
 * transmit bytes
 */
int
com_SendBytes(BYTE *data, int len)
{
#if FUNAI_TWINSLOT
//  serial_write_stream(iOutputStream, (char *)data, len);
  while (len--) {
    if(serial_write_byte(iOutputStream, *data) != 1) {
//      printf("Error: Failed to write char\n");
      return(SCI_E_OUT);
    }
    data++;
  }
  return(SCI_SUCCESS);
#else
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;
  int pause = 0;

  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.read = 1;

  while (len--) {
    /*
     * wait for CTS to be set and check that card is still in
     */
    if (serial_write_byte(iOutputStream,*data) != 1) {
      debug_printf(db,"(7) Failed to write char");
      return (SCI_E_OUT);
    }

    switch (pause) {
      case 0:
	/* wait for CTS to go high and check card in */
        do {
          ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);
          if (!ctrl.bits.dsr) {
            goto exit_gracefully;
          }
        } while (!ctrl.bits.cts);
	pause = 1;
	break;

      case 1:
	/* wait for CTS to go low and check card in */
        do {
          ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);
          if (!ctrl.bits.dsr) {
            goto exit_gracefully;
          }
        } while (ctrl.bits.cts);
	pause = 2;
	break;

      case 2:
	/* wait for CTS to go high and check card in */
        do {
          ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);
          if (!ctrl.bits.dsr) {
            goto exit_gracefully;
          }
        } while (!ctrl.bits.cts);

	/* wait for CTS to go low and check card in */
        do {
          ctrl.data = serial_ioctl(iOutputStream,&ioctl_block);
          if (!ctrl.bits.dsr) {
            goto exit_gracefully;
          }
        } while (ctrl.bits.cts);
	pause = 2;
	break;
    }
    /* 
     * replacing delay routine with new funky code
     * sys_Delay(1);
     */
    data++;
  }
  sys_StartWaitTimer((sci_State==S_S_OPENING ) ? ATR_INIT_WAIT : WorkWaitTime);

  return (SCI_SUCCESS);
  
exit_gracefully:
  ctrl.bits.rts = 0;
  ioctl_block.write = 1;
  ioctl_block.data = ctrl.data;
  serial_ioctl(iOutputStream,&ioctl_block);
  return (SCI_E_OUT);
#endif
}

/*
 *
 */
void
com_FlushComms(void)
{
  while(serial_read_byte(iInputStream)!=-1) ;
}

/*
 * look for the presence of DSR
 */
BOOL
com_CardIn(void)
{
#if FUNAI_TWINSLOT
  return(g_card1_in);
#else
  ioctl_t ioctl_block;
  serial_ctrl_t ctrl;

  /* read */
  ioctl_block.reason = IOCTL_CTRL_LINES;
  ioctl_block.write = 0;
  ioctl_block.read = 1;
  serial_ioctl(iOutputStream,&ioctl_block);
  ctrl.data = ioctl_block.data;

  if (ctrl.bits.dsr == 1) return (TRUE);

  return (FALSE);
#endif
}

/*
 * close down streams.
 */
void
com_Close(void)
{
  if (iInputStream)  serial_close_stream(iInputStream);
  if (iOutputStream) serial_close_stream(iOutputStream);
  iInputStream = 0;
  iOutputStream = 0;
}


#if FUNAI_TWINSLOT
/* Funai-uController specific routines */

/*
 * com_ReadFunaiHeader - Reads a reply from the Funai uC, and acts on it
 */ 
void
com_ReadFunaiHeader
(
  void
)
{
  int		readbyte;
  
  if(g_funai_header == NO_HEADER)
  {
    /** First, find out what code we have **/
    readbyte = serial_read_byte(iInputStream);
    if(readbyte == -1) return; /** strangely, there was no-one at the door... **/
    if(readbyte == ACK) return; /** an ACK is an ACK. We're not interested. **/

    g_funai_header = readbyte;
    /** This is all we need to know at the moment... **/
  }
  else
  {
    readbyte = serial_read_byte(iInputStream); /** Normally the slot indicator **/
    if(readbyte == -1) return;
    switch(g_funai_header)
    {
      case RET_CARDOPEN:   com_ProcessCardOpen(readbyte);
      			   break;
      case RET_APDU:	   com_ProcessAPDU(readbyte);
      			   break;
      case RET_NUMSLOTS:
      			   break;
      case RET_SLOTSTATE:
      			   break;
      case RET_CARDSTATE:
      			   break;
      case MSG_CARDINSERT: com_ProcessCardInserted(readbyte);
      			   break;
      case MSG_CARDREMOVE: com_ProcessCardRemoved(readbyte);
      			   break;
      case RET_ERROR:	   l_error_slot = readbyte; g_funai_header = RET_ERROR2;
      			   return;
      			   break;
      case RET_ERROR2:	   com_ProcessError(readbyte);
      			   break;
      default:				/** Either a duff code, or a 'fail' from serial_read_byte **/
      			   break;
    }
    g_funai_header = NO_HEADER;		/* reset */
  }
}


/*
 *  com_SendFunaiHeader - Sends the specified header to the given slot. Data dealt with by
 *			  the calling routine.
 */ 
void
com_SendFunaiHeader
(
  char	slot,
  char	command
)
{
  /** Code here */
  if(serial_write_byte(iOutputStream, command) != 1) return;
  
  if(slot != NO_SLOT)
  {
    serial_write_byte(iOutputStream, slot);
  }
}


/*
 *  com_SendAck - sends ACK to the uC
 */ 
void
com_SendAck
(
  void
)
{
  serial_write_byte(iOutputStream, ACK);
}


/*
 *  com_ProcessCardInserted - Processes CardInserted events
 */ 
void
com_ProcessCardInserted
(
  int	slot
)
{
  int   a;
  char	command_block[2];

  g_uc_state = UC_BUSY;
  g_slot2_state = WAITING_INSERT; /** Prevents async events **/
  
//  printf("+++ Card inserted in slot %d .Pending=%d\n",slot,g_card2_insertpending);
  
  /** Do the slot-independant stuff here **/
  if(g_card2_insertpending == FALSE) serial_write_byte(iOutputStream, ACK);
//  g_card2_insertpending = FALSE;
//  printf("%d \n",g_card2_insertpending);

  TX_SeqNo[slot] = 0;
  if(slot == SLOT_1)
  {
    Exp_SeqNo = 0; /* Re-init */
//    printf("b\n");
    /* Wait a moment, to see if there's a card2 insert event too */
    sys_Delay(100);
    
    a = serial_read_byte(iInputStream);
//    printf("c a=%d\n",a);

    switch(a)
    {
      case MSG_CARDINSERT: if(serial_read_byte(iInputStream) == SLOT_2)
      			   {
//			     printf("Got slot2 too. Pending set.\n");
		             /* Flag it for later consumption */
		             g_card2_insertpending = TRUE;
			   }
			   /** Can't get a slot1 insert, cos it's already in... **/
 			   serial_write_byte(iOutputStream, ACK); /** Got to ACK it here or it'll be too late... **/
			   break;
      case MSG_CARDREMOVE: if(serial_read_byte(iInputStream) == SLOT_2)
      			   {
      			     g_card2_insertpending = FALSE; /** don't really need this but what the hell **/
 			     serial_write_byte(iOutputStream, ACK); /** Got to ACK it **/
      			   }
      			   else
      			   {
      			     /** Uh oh, card1 removed before we've accepted it... **/
 			     serial_write_byte(iOutputStream, ACK); /** Got to ACK it **/
 			     g_slot2_state = IDLE;
 			     g_uc_state = UC_IDLE;
 			     return;
      			   }
      			   break;
    }
  }
  g_slot2_state = IDLE; /** Re-enable async events **/
  command_block[0] = CMD_CARDOPEN;
  command_block[1] = slot;
  g_uc_state = UC_RET_CARDOPEN; /** Waiting for response **/
  serial_write_stream(iOutputStream, command_block, 2); /** Open the card **/
//  printf("Sent cardopen stream &%02X, &%02X\n",command_block[0],command_block[1]);
}


/*
 *  com_ProcessCardRemoved - Processes CardRemoved events
 */ 
void
com_ProcessCardRemoved
(
  int	slot
)
{
  
//  printf("+++ Card removed from slot %d\n",slot);
  com_SendAck();
  /** Generate card-removed call **/
  /** Note that if BOTH cards are in, and slot 1 removed, we need to generate a card2 removed too **/
  if(slot == SLOT_1)
  {
    t0_CardStatusChange(FALSE); /** Bye bye, Mr Card (sends service) **/
    g_card1_in = FALSE;
    if(g_card2_in == TRUE)
    {
      g_card2_in = FALSE;
      g_slot2_datablock_state = SCI_E_OUT;
      g_slot2_state = IDLE;
      /** send card2_removed service **/
      sys_SigBroadcast(SCI_REMOVED2);
    }
  }
  else /** Slot 2 **/
  {
    g_card2_in = FALSE;
    g_slot2_datablock_state = SCI_E_OUT;
    g_slot2_state = IDLE;
    /** send card2_removed service **/
    sys_SigBroadcast(SCI_REMOVED2);
  }
}


/*
 *  com_ProcessCardOpen - Processes CardOpen response from uC
 */ 
void
com_ProcessCardOpen
(
  int	slot
)
{
  int channel;
//  printf("CardOpen response from slot %d\n",slot);
  if(slot == SLOT_1)
  {
    g_card1_in = TRUE; /** There's a card in slot 1 now **/
    g_uc_state = UC_BUSY; /** Cos the ATR is streaming in at this point **/
    /** Need to prod the code into reading the ATR **/
    setup_event(SC_Event_CardIn);
    setup_event(SC_Event_DataPresent);
  }
  else
  {
    g_card2_in = TRUE; /** There's a card in slot 2 now **/
    g_uc_state = UC_BUSY; /** Cos the ATR is streaming in at this point **/
    g_slot2_state = GET_ATR; /* Ignore DataPresent events - we're single-tasking */
    /** ditch the ATR as it comes in **/
    if(com_GetATR() == -1)
    {
//      printf("Dodgy ATR\n");
      sys_Delay(50);
      com_FlushComms();
//      printf("END Dodgy ATR\n");
      g_slot2_datablock_state = SCI_E_NOTURL; /* ATR stuffed, so not a URL card */
#if OLD_GETATR
      g_slot2_cardtype = CARD_BAD;            /* Aye! Bad! */
#endif
    }
    else
    {
      g_slot2_datablock_state = SCI_E_NODATA; /* Default to no URL ready yet */
    }
    serial_write_byte(iOutputStream, ACK); /** Ack the ATR, even if we didn't like it **/
    g_slot2_state = IDLE; /* gotit */
    g_uc_state = UC_IDLE;

    if(g_card2_insertpending)
    {
      for (channel=0; channel<MAX_CARD_CHANNELS; channel++) {
        if (ChannelTable[channel].flags & channel_in_use) {
          if (ChannelTable[channel].state == S_C_OPENING) {
            sys_SignalTask(channel,SCI_CMD_DONE);
          }
        }
      }
      g_card2_insertpending = FALSE;
    }
    sys_SigBroadcast(SCI_INSERTED2);
  }
}


/*
 *  com_ProcessAPDU - Process APDU response from uC
 */ 
void
com_ProcessAPDU
(
  int	slot
)
{
//  printf("++APDU response from slot %d\n",slot);
  g_uc_state = UC_BUSY; /** Cos the APDU response is streaming in **/

  if(slot == SLOT_2)
  {
    switch(g_slot2_state)
    {
      case CMD_RESPONSE_HDR:    com_IncomingResponse();
                                break;

      case CMD_RESPONSE_BODY:   com_IncomingResponse();
                                break;

      case CMD_CHAIN_LINK:      com_HandleChainLink();
                                break;

      default:                  com_StartReadSlot2();
                                break;
    }
#if FALSE
    if((g_slot2_state == CMD_RESPONSE_HDR) || (g_slot2_state == CMD_RESPONSE_BODY))
    {
      com_IncomingResponse();
    }
    else
    {
      com_StartReadSlot2(); /** It's for yooo-hooo! **/
      // printf("Returned from StartReadSlot2\n");
    }
#endif
  }
}

int
blocking_readbyte
(
  void
)
{
  int value;
#if FALSE
  unsigned int o_val, n_val;

  _swix(OS_ReadMonotonicTime, _OUT(0), &o_val);

  do {
    value = serial_read_byte(iInputStream);
    _swix(OS_ReadMonotonicTime, _OUT(0), &n_val);
  } while( (value == -1) && ((n_val-o_val) < 100) );
#else
  do {
    value = serial_read_byte(iInputStream);
  } while (value == -1);
#endif
  return(value);
}  


/*
 *  com_ProcessError
 */ 
void
com_ProcessError
(
  int	error
)
{
  int	channel;
  
//  printf("Error - %d in slot %d\n",error, l_error_slot);
  if(l_error_slot == SLOT_1)
  {
    switch(error)
    {
      case UC_ERR_BROKEN:     if(g_card1_in == FALSE) sys_SigBroadcast(SCI_BADINSERT);
      			      break;
      case UC_ERR_NOTPRESENT: g_card1_in = FALSE;
      			      break;
      case UC_ERR_CLOSED:
      			      break;
      case UC_ERR_ACCESS:
      			      break;
    }
    g_card2_insertpending = FALSE; /* May have been pending when it barfed **/
  }
  else
  {
//    printf("tsk. card2 bad.\n");
    if(g_card2_insertpending)
    {
//      printf("Yelling about card1 insert\n");
      for (channel=0; channel<MAX_CARD_CHANNELS; channel++) {
        if (ChannelTable[channel].flags & channel_in_use) {
          if (ChannelTable[channel].state == S_C_OPENING) {
            sys_SignalTask(channel,SCI_CMD_DONE);
          }
        }
      }
    }
    g_card2_insertpending = FALSE; /* May have been pending when it barfed **/
    g_funai_header = NO_HEADER;
    switch(error)
    {
      case UC_ERR_BROKEN:     if(g_card2_in == FALSE) sys_SigBroadcast(SCI_BADINSERT2);
      			      break;
      case UC_ERR_NOTPRESENT: g_card2_in = FALSE;
      			      break;
    }
  }

  com_SendAck();
  g_uc_state = UC_IDLE;
}



/*
 *  com_IncomingResponse - Reads an APDU response, and buffers it away.
 */ 
void
com_IncomingResponse
(
  void
)
{
  BYTE           rblock[5];
  /** Get NAD/PCB/LEN and remember how many more we want **/
  g_slot2_apdu.NAD = blocking_readbyte();
  g_slot2_apdu.PCB = blocking_readbyte();
  g_slot2_apdu.LEN = blocking_readbyte();
  g_slot2_state = CMD_RESPONSE_BODY;
//  printf("Read NAD/PCB/LEN as &%02X, &%02X, &%02X\n",g_slot2_apdu.NAD, g_slot2_apdu.PCB, g_slot2_apdu.LEN);

  do
  {
    *g_slot2_dataptr = blocking_readbyte();
//    printf("Read a data byte of &%02X into &%08X\n",*g_slot2_dataptr,(int)g_slot2_dataptr);
    g_slot2_dataptr++;
    g_slot2_apdu.LEN--;
  } while(g_slot2_apdu.LEN > 0);

  g_slot2_apdu.LRC = blocking_readbyte();
//  printf("Read LRC as &%02X\n", g_slot2_apdu.LRC);

  com_SendAck(); /* Ack the last response... */

  if((g_slot2_apdu.PCB & 0xA0) == 0x20) /** Was it a chained I-block response? **/
  {
    /** Create 'next element' command, and send it **/
    rblock[0] = 0; /* Always 0 for R-blocks */
    if(g_slot2_apdu.PCB & 0x40)
    {
      rblock[1] = 0x80; /** Got a Seq1, so send Seq0 **/
//      Exp_SeqNo = 0;
//      TX_SeqNo[SLOT_2] = 1;
    }
    else
    {
      rblock[1] = 0x90; /** Got a Seq0, so send Seq1 **/
//      Exp_SeqNo = 1; /** We want a 1 back **/
//      TX_SeqNo[SLOT_2] = 0; /** Next time, we send a 0 **/
    }
    rblock[2] = 0; /** LEN */
    rblock[3] = rblock[1]; /* Bound to be! */
    g_uc_state = UC_IDLE;
    g_slot2_state = CMD_RESPONSE_HDR;
    com_SendFunaiHeader(SLOT_2, CMD_APDU);
    com_SendBytes(rblock, 4);
  }
  else if(g_slot2_apdu.PCB == 0xE1)
  {
    /** It's an IFSC response **/
    IFSC_Value[SLOT_2] = *(g_slot2_dataptr-1); /** 'Know' there was only one data byte **/
    g_uc_state = UC_IDLE;
    g_slot2_state = IDLE;
    sys_SigBroadcast(SCI_CMD2_DONE); /** Data is ready for collection **/
  }
  else
  {
    g_uc_state = UC_IDLE;
    g_slot2_state = IDLE;
    sys_SigBroadcast(SCI_CMD2_DONE); /** Data is ready for collection **/
  }
}



/*
 *  com_HandleChainLink - Deals with a chainlink R-block
 */ 
void
com_HandleChainLink
(
  void
)
{
  BYTE           rblock[5];
  /** Get NAD/PCB/LEN and remember how many more we want **/
  rblock[0] = blocking_readbyte(); /* NAD */
  rblock[1] = blocking_readbyte(); /* PCB */
  rblock[2] = blocking_readbyte(); /* LEN */
  rblock[3] = blocking_readbyte(); /* LRC */

  com_SendAck(); /* Ack this response... */
  g_uc_state = UC_IDLE;
  g_slot2_state = CMD_RESPONSE_HDR; /* In case it's the end of the chain */

  /* Read the R-block we're expecting. Best check it's what we think */
  if((rblock[1] && 0x80) && (rblock[2] == 0))
  {
    /** it'll do **/
    SendIBlock();
  }
}



/*
 *  com_StartReadSlot2 - Reads the URL info off the card in slot2
 *  This is a fairly detailed and lengthy process...
 */ 
void
com_StartReadSlot2
(
  void
)
{
  BYTE	cmd[4];
  BYTE  block[10];
  int	retval;

//  printf("=Entered com_startreadslot2 with g_slot2_state = %d\n",g_slot2_state);
  switch(g_slot2_state)
  {
    case VERIFY_SEND:
                        /** Issue APDU for PIN '00000000' against IEF1 **/
                        cmd[0] = 0x00;
                        cmd[1] = 0x20;
                        cmd[2] = 0x00;
                        cmd[3] = 0x94;
                        strcpy((char *)block, "00000000");
                        g_slot2_state = VERIFY_RESPONSE;
    			g_uc_state = UC_IDLE;
                        t1_StartCommand(SLOT_2, cmd, 8, block, 0, FALSE);
    			break;

    case VERIFY_RESPONSE:
    			/** Deal with the response from the VERIFY **/
    			retval = com_DealWithVerify();
                        serial_write_byte(iOutputStream, ACK);
/*    			if(retval == -2)
    			{
                          g_slot2_state = VERIFY_RESPONSE;
                          cmd[0] = 0x00;
                          cmd[1] = 0x20;
                          cmd[2] = 0x00;
                          cmd[3] = 0x94;
                          strcpy((char *)block, "00000000");
                          t1_StartCommand(SLOT_2, cmd, 8, block, 0, FALSE);
    			  g_uc_state = UC_IDLE;
      		 	  break;
    			}
    			else*/ if(retval != 0)
    			{
    			  /** Error of some sort. Tidy up & leave. **/
    			  /** Note that g_slot2_datablock_state is already set up **/
    			  g_slot2_state = IDLE;
    			  g_uc_state = UC_IDLE;
			  sys_SigBroadcast(SCI_INIT2_DONE);
    			  return;
    			}
    			/** NOTDONE: Check whether there's been a card statechange come in after? **/

    			/** Send a readrecord command **/
    			g_record = 20;
    			g_nrecords = 20;
                        cmd[0] = 0x00;
                        cmd[1] = 0xB2;
                        cmd[2] = g_record; /*Record*/
                        cmd[3] = 0xD4;
                        block[0] = 0x1B;
			if(g_slot2_state == IDLE) break; /** Check card in at last possible moment **/
    			g_slot2_state = RECORDREAD_RESPONSE;
    			g_uc_state = UC_IDLE;
                        t1_StartCommand(SLOT_2, cmd, 0, block, 0x1B, FALSE);
    			break;


    case RECORDREAD_RESPONSE:
    			/** Deal with the response **/
    			retval = com_DealWithReadRecord();
                        serial_write_byte(iOutputStream, ACK);
                        if(retval == -3)
                        {
                          g_record=8; /* couldn't find a record, so we magically drop to 7 (-- later!) */
                          g_nrecords=7; /* We _know_ there are 7 records rather than 20 */
                        }
    			if(retval == -2)
    			{
    			  /** Reissue the last read **/
                          cmd[0] = 0x00;
                          cmd[1] = 0xB2;
                          cmd[2] = g_record; /*Record*/
                          cmd[3] = 0xD4;
                          block[0] = 0x1B;
			  if(g_slot2_state == IDLE) break; /** Check card in at last possible moment **/
    			  g_slot2_state = RECORDREAD_RESPONSE;
      			  g_uc_state = UC_IDLE;
                          t1_StartCommand(SLOT_2, cmd, 0, block, 0x1B, FALSE);
      			  break;
    			}
    			else if(retval == -1)
    			{
    			  /** Error of some sort. Tidy up and leave **/
    			  g_slot2_state = IDLE;
    			  g_uc_state = UC_IDLE;
			  sys_SigBroadcast(SCI_INIT2_DONE);
    			  return;
    			}

    			g_record--;
    			/** If it was the last one... **/
    			if(g_record == 0)
    			{
    			  g_record = 20; /** Reset :-) */
    			  g_nrecords = 20; /** Reset :-) */
    			  g_uc_state = UC_IDLE;
    			  g_slot2_state = IDLE;
    			  g_slot2_datablock_state = SCI_SUCCESS;
			  sys_SigBroadcast(SCI_INIT2_DONE);
    			}
    			else
    			{
    			  /** Send the next one **/
                          cmd[0] = 0x00;
                          cmd[1] = 0xB2;
                          cmd[2] = g_record; /*Record*/
                          cmd[3] = 0xD4;
                          block[0] = 0x1B;
			  if(g_slot2_state == IDLE) break; /** Check card in at last possible moment **/
    			  g_slot2_state = RECORDREAD_RESPONSE;
      			  g_uc_state = UC_IDLE;
                          t1_StartCommand(SLOT_2, cmd, 0, block, 0x1B, FALSE);
    			}
    			break;

    default:
    			break;
  }
}


/*
 *  com_DealWithVerify - Reads the response from the uC to Verify, and decodes
 *  			 it. If it's bad for any reason, returns -1, and sets
 *			 g_slot2_datablock_state if required
 */ 
int
com_DealWithVerify
(
  void
)
{
  BYTE	data[6]; /** Max should be 5 **/
  data[0] = blocking_readbyte();
  data[1] = blocking_readbyte();
  data[2] = blocking_readbyte(); /* Length of following data */
//  printf("VERIFY 0,1,2 &%02X, &%02X, &%02X\n",data[0],data[1],data[2]);
  if(data[1] && 0x80)
  {
    /** R-blk, so some sort of error **/
    return(-2);
  }
  if(data[2] != 2)
  {
    /** SHOULD READ THE DATA HERE **/
    g_slot2_datablock_state = SCI_E_BADCARD; /* It confused me... */
    return(-1);
  }
  data[3] = blocking_readbyte();
  data[4] = blocking_readbyte();
  data[5] = blocking_readbyte();
//  printf("VERIFY 3,4 &%02X, &%02X\n",data[3],data[4]);
//  printf("Checksum is &%02X\n",data[5]);
  if( (data[3] != 0x90) | (data[4] != 0x00) )
  { 
    g_slot2_datablock_state = SCI_E_NOTURL;  /* Didn't like the PIN */
    return(-1);
  }
  return(0);
}


/*
 *  com_DealWithReadRecord - Reads the response from the uC to ReadRecord, and
 *			     decodes it. If it's bad, sets g_slot2_datablock_state
 *			     and returns -1
 */ 
int
com_DealWithReadRecord
(
  void
)
{
  BYTE	data[50];
  unsigned char	*dest;
  int	i;

  /** Read the header, and then the rest of the data **/
  data[0] = blocking_readbyte();
  data[1] = blocking_readbyte();
  data[2] = blocking_readbyte(); /* Length of following data */
//  printf("READRECORD 0,1,2 &%02X, &%02X, &%02X\n",data[0],data[1],data[2]);
  if(data[1] > 0x80)
  {
    /** R-blk, so some sort of error **/
//    printf("Error RBlk\n");
//    printf("Error RBlk\n");
    return(-2);
  }
/*
  if(data[2] != 0x1d)
  {
    g_slot2_datablock_state = SCI_E_BADCARD;
    return(-1);
  }
*/  
  for(i=0; i<= data[2]; i++) /* one extra for the checksum */
  {
    data[i+3] = blocking_readbyte();
//    printf("&%02X ",data[i+3]);
  }
//  printf("\ni,SW1,SW2: %d,&%02X,&%02X\n",i,data[i],data[i+1]);
  if( (data[i] != 0x90) || (data[i+1] != 0x00) )
  { 
    if( (data[i] == 0x6A) && (data[i+1] == 0x83) )
    {
//      printf("Can't find block %d\n",g_record);
      return(-3); /* Can't find this block on the card */
    }
    else
    {
      g_slot2_datablock_state = SCI_E_BADCARD;  /* Didn't like the data */
      return(-1);
    }
  }
  /** Header gone, now copy the data across **/
//  printf("g_slot2_datablock = &%08X\n",(unsigned int)g_slot2_datablock);
  dest = g_slot2_datablock + ((g_nrecords-g_record)*25);
//  printf("dest = &%08X\n",(unsigned int)dest);
  memcpy(dest, data+5, data[2]-4);
  return(0);
}



#if OLD_GETATR /* Old GetATR routine **/
      /*
       *  com_GetATR - Gets the ATR off the card in slot2, and ditches it.
       */ 
      int
      com_GetATR
      (
        void
      )
      {
        int     hcount;
        int     tempchar;

        IFSC_Value[SLOT_2] = 0x20; /* seems like a sensible default */
        
        if( blocking_readbyte() != 0x3B) return(-1);  /** Same on all supported cards **/
        tempchar=blocking_readbyte();
        hcount = tempchar & 0x0f; /* number of HIST chars */
        if(tempchar == 0xE0) g_slot2_cardtype=CARD_OLDURL;
        if( blocking_readbyte() != 0x00) return(-1);  /** Same on all supported cards **/
        if( blocking_readbyte() != 0xFF) return(-1);  /** Same on all supported cards **/
        if( blocking_readbyte() != 0x81) return(-1);  /** Same on all supported cards **/
        switch(blocking_readbyte())
        {
          case 0xB1: if(g_slot2_cardtype!=CARD_OLDURL) g_slot2_cardtype=CARD_REASONA;break;
          case 0x31: g_slot2_cardtype=CARD_STD;break;
          default:  return(-1);
        }
        tempchar = blocking_readbyte(); /* Get IFSC value */
//        IFSC_Value[SLOT_2] = tempchar;
        switch(tempchar)
        {
          case 0x25: if((g_slot2_cardtype!=CARD_OLDURL) && (g_slot2_cardtype!=CARD_REASONA)) return(-1);break;
        }
        if( blocking_readbyte() != 0x45) return(-1);  /** Same on all supported cards **/
        if((g_slot2_cardtype == CARD_OLDURL) || (g_slot2_cardtype == CARD_REASONA))
        {
          if( blocking_readbyte() != 0x01) return(-1);
        }
        /** Read HIST here if needed, just to clear the buffer (in a valid case - may not empty it in an invalid case) **/
        while(hcount>0)
        {
          blocking_readbyte();
          hcount--;
        } 
        hcount=blocking_readbyte(); /** Get the LCR, and bin it regardless **/
      
        return(0); /** Card is OK **/
      }
#else /** 'new' GetATR routine **/
/*
 *  'read interface layer' this reads an 'i' set of interface characters as described in
 *  the most significant nibble of the Di-1 and loads them into the tA-D(ith level) updating
 *  the checksum.  This method is only used in GetATR.
 */ 
void read_interface_layer(BYTE Di_1, char *tA_D, char *checksum)
{
    if (Di_1 & 0x10)	// TA(i) exists
    	(*checksum) ^= tA_D[0] = blocking_readbyte();	
    	
    if (Di_1 & 0x20)  	// TB(i) exists
    	(*checksum) ^= tA_D[1] = blocking_readbyte();
    	
    if (Di_1 & 0x40)	// TC(i) exists
    	(*checksum) ^= tA_D[2] = blocking_readbyte();
    	
    if (Di_1 & 0x80)	// TD(i) exists
	(*checksum) ^= tA_D[3] = blocking_readbyte(); 
}

/*
 *  com_GetATR - Gets the ATR off the card in slot2, and ditches it.
 */
#if (supported_HISTORICAL_CHARACTER_LENGTH != 10)
#error comparisons are made on the length of the historical character vectors.
#endif

BYTE hist_char_reasona[supported_HISTORICAL_CHARACTER_LENGTH] = 
	{ 0x80, 0x12, 0x39, 0x2f, 0x31, 0xc0, 0x73, 0x86, 0x21, 0x08 };
	
BYTE hist_char_std_78[supported_HISTORICAL_CHARACTER_LENGTH] = 
	{ 0x80, 0x12, 0x39, 0x2f, 0x31, 0xc0, 0x73, 0xc7, 0x01, 0x49 };

int com_GetATR( void )
{
  int  i, t = 0; 			// counter, protocol type t=0 ?
  char TCK = 0;				// EOR checksum
  int ti;                               // Yi-1 (characters | protocol)
  char tA_D[4];				// i characters
  
  g_card_descriptor.card = card_Unknown;
  g_card_descriptor.hist_characters = 0;
  g_card_descriptor.failure = failure_none;
  
  if( blocking_readbyte() == 0x3B) {			/** TS **/

       	TCK ^= ti = blocking_readbyte();			// begin checksum read t0
    	g_card_descriptor.hist_characters = ti & 0x0f;		// least significant nibble contains the number of historical characters


	// read the interface information to null this has been picked up by the micro.
	while (ti & 0xf0) {
		read_interface_layer( ti, tA_D, &TCK);
					
		ti = tA_D[3];
		if (t!=0) t=tA_D[3] & 0x0f;
	} // layer i+1... read the interface layer out
	
	
	// read the historical characters (into the g_char_descriptor structure)
	for (i=0; i < supported_HISTORICAL_CHARACTER_LENGTH; ++i) {
		if (i <  g_card_descriptor.hist_characters)
			TCK ^= g_card_descriptor.hist[i] =  blocking_readbyte();
		else 	
			g_card_descriptor.hist[i] = 0;
        }
        
        // check that we recognise the card
	if ((t!=0)&&((TCK ^ blocking_readbyte())!=NULL)){// checksum not sent if t=0
		g_card_descriptor.failure = checksum_failure;
	} else {
	  	if (t!=1) {
	  		g_card_descriptor.failure = protocol_not_teq1;
	  	} else {
        		if (g_card_descriptor.hist_characters != supported_HISTORICAL_CHARACTER_LENGTH) {
        			g_card_descriptor.failure = incorrect_hist_chars;
        	        } else {
        	          	for (i=0;i< supported_HISTORICAL_CHARACTER_LENGTH; ++i){
        	          		if (g_card_descriptor.hist[i] != hist_char_reasona[i])
        	          		break;
        	          	}
        	          	
        	          	if (i == supported_HISTORICAL_CHARACTER_LENGTH) {
        	          		g_card_descriptor.card = card_Reasona_256;
        	          	} else {
        	          		for (i=0;i< supported_HISTORICAL_CHARACTER_LENGTH; ++i){
        	          			if (g_card_descriptor.hist[i] != hist_char_std_78[i])
        	          			break;
        	          		}
        	          		
        	          		if (i == supported_HISTORICAL_CHARACTER_LENGTH) {
        	          			g_card_descriptor.card = card_STD_78;
        	          		} else {
        	          			g_card_descriptor.failure = historical_unknown;
        	          		}// std 7/ std 8
				} // reasona 
			} // number of history characters
		} // t=1
	}// checksum					
  }// error in TS
  else
  	g_card_descriptor.failure = TS_byte_ne_3B;
 
  return ((g_card_descriptor.card == card_Unknown) ? -1:0);
}
#endif /* End of old GetATR routine **/




#endif /* funaitwinslot */
