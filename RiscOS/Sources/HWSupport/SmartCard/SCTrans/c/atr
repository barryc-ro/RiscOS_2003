/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
/*
 * To provide the functions for handling card reset and processing of the
 * answer-to-reset sequence sent from the card.
 *
 * Modification History
 *---------------------
 *
 * 04-Oct-96 RWB, Removed need for atr_HandleInput, event handler now
 *                calls atr_ProcessByte directly.
 */

#include <stdio.h>

#include "sci_api.h"
#include "sci_int.h"
#include "com.h"
#include "atr.h"
#include "t1.h"

#include "pmsdebug.h"

atr_states_t AtrState;

static PROT_PARAMS ProtTab[MAX_PROTS];
static BYTE CurrY;
static int HistNext;
static int ProtIndex;
static int ProtCount;
static int AtrCheck;

static bool T0Only; /* flag to indicate card supports T=0 protocol only */
static bool T1Only; /* flag to indicate card supports T=1 protocol only */

static int atr_CalcWorkWaitTime (void);
static bool atr_SendPtss (void);

card_state_t card_status;	// storage for card parameters

char *atr_state_names[] =
	{ALL_ATR_STATES(ARRAY_ENTRY)};


/*     Process ATR Byte
       ----------------

On entry:  byte to process is in ch
On exit:   Returns SCI_SUCCESS or SCI error code (such as SCI_E_COMMS)
           sci_State is set to S_S_OPEN once the ATR has been fully received.

When the card has been reset it sends us its Answer To Reset (ATR)
which we process here, one byte per call.

AtrState contains current state telling us how far through the ATR we are.

When we have fully received the ATR, we can also send a protocol select
and IFSD request. Although they are not strictly part of the ATR we
handle them here before declaring that the card is open and ready
for commands from an application.
*/

int atr_ProcessByte (BYTE ch)
{
  int channel;
  static int ifsd_resp_count;

#ifdef DEBUGLIB
debug_printf(db, "(7) atr_ProcessByte state %s, char %02X, protocol %d\n",
  	atr_state_names[AtrState],ch,card_status.protocol);
#endif /*DEBUGLIB*/
    pms_debug("atr_ProcessByte state %s, char %02X, protocol %d",
  	atr_state_names[AtrState],ch,card_status.protocol);

    switch (AtrState) {
    case ATR_WAIT_TS:
      /* waiting initial byte, this does not concern API */
      /* may get padding characters, ignore and remain in initial state */
      if (ch == 0x00 || ch == 0xFF) {
	break;
      }
      card_status.TS = ch;
      AtrState = ATR_WAIT_T0;
      break;

    case ATR_WAIT_T0:
      /* waiting format character */
      debug_printf(db, "(7) atr_ProcessByte(): T0\n");
      CurrY = ch & ATR_Y_MASK;
      if ((sci_HistLen = (ch & ATR_K_MASK)) > SCI_HIST_LEN) {
        return SCI_E_PROTO;
      }
      debug_printf(db, "(7) atr length %d bytes\n",sci_HistLen);

      IFSC_Value[SLOT_1] = IFSC_DEFAULT;   /* Set default IFSC in case we don't get a TA3 value in ATR */
      card_status.T0 = ch;
      HistNext = 0;
      ProtIndex = 0;
      AtrCheck = ch;
      if (card_status.protocol == 0) {
        debug_printf(db, "(7) setting t0only true (1)\n");
	T0Only = true;
      }

      if (CurrY) {
        ProtCount = 1;
      } else {
        ProtCount = 0;
      }

      if (CurrY & ATR_TA_MASK) {
        AtrState = ATR_WAIT_TA;
      } else if (CurrY & ATR_TB_MASK) {
        AtrState = ATR_WAIT_TB;
      } else if (CurrY & ATR_TC_MASK) {
        AtrState = ATR_WAIT_TC;
      } else if (CurrY & ATR_TD_MASK) {
        AtrState = ATR_WAIT_TD;
      } else {
        if (sci_HistLen == 0) {
	  if (T0Only) {
  	    AtrState = ATR_ENDED;
          } else {
            AtrState = ATR_WAIT_TCK;
          }
        } else {
          AtrState = ATR_WAIT_HIST;
  	}
      }
      break;

    case ATR_WAIT_TA:

      debug_printf(db, "(7) atr_ProcessByte(): TA\n");
      AtrCheck ^= ch;
      ProtTab[ProtIndex].clk_rate = ch & ATR_F_MASK;
      ProtTab[ProtIndex].bit_rate = ch & ATR_D_MASK;

      switch (ProtIndex) {
	case 0 : /* TA1 */
  	  debug_printf(db, "(7) atr_ProcessByte(): TA1:%02x\n", ch);
 	  card_status.TA1 = ch;
 	  break;
        case 1 : /* TA2 */
	  debug_printf(db, "(7) atr_ProcessByte(): TA2:%02x\n", ch);
	  card_status.TA2 = ch;
	  break;
        case 2 : /* TA3 */
	  debug_printf(db, "(7) atr_ProcessByte(): TA3:%02x\n", ch);
	  card_status.TA3 = ch;
//	  card_status.IFSC = card_status.TA3;	/* update IFSC */
          IFSC_Value[SLOT_1] = card_status.TA3;	/* update IFSC */
	  break;
      }

      if (CurrY & ATR_TB_MASK) {
        AtrState = ATR_WAIT_TB;
      } else if (CurrY & ATR_TC_MASK) {
        AtrState = ATR_WAIT_TC;
      } else if (CurrY & ATR_TD_MASK) {
        AtrState = ATR_WAIT_TD;
      } else {
        if (sci_HistLen == 0) {
          if (T0Only) {
  	    AtrState = ATR_ENDED;
  	  } else {
  	    AtrState = ATR_WAIT_TCK;
  	  }
        } else {
          AtrState = ATR_WAIT_HIST;
        }
      }
      break;

    case ATR_WAIT_TB:

      debug_printf(db, "(7) atr_ProcessByte(): TB\n");
      AtrCheck ^= ch;
      ProtTab[ProtIndex].pc1 = (ch & ATR_I1_MASK) >> ATR_I1_SHIFT;
      ProtTab[ProtIndex].pc2 = ch & ATR_I2_MASK;

      switch (ProtIndex) {
        case 0 : 	/* TB1 */
	  debug_printf(db, "(7) atr_ProcessByte(): TB1:%02x\n", ch);
	  card_status.TB1 = ch;
	  break;

        case 1 :	/* TB2 */
	  debug_printf(db, "(7) atr_ProcessByte(): TB2:%02x\n", ch);
	  card_status.TB2 = ch;
	  break;

        case 2 :	/* TB3 */
	  debug_printf(db, "(7) atr_ProcessByte(): TB3:%02x\n", ch);
	  card_status.TB3 = ch;
	  /* update CWT, used to use pow(2,x) */
	  //printf("(7) atr_ProcessByte(): CWI %d\n",card_status.TB3 & 0x0f);
	  //printf("(7) atr_ProcessByte(): BWI %d\n",(card_status.TB3 & 0xf0)>>4);
	  card_status.CWT = 2<<((card_status.TB3 & 0x0f)-1);
  	  /* update BWT, used to use pow(2,x) */
 	  card_status.BWT =
 	    (((((2<<(((card_status.TB3 & 0xf0) >>4)-1))*960))+11)*93)/10000;

  	  debug_printf(db, "(7) atr_ProcessByte(): CWT:%d\n", card_status.CWT);
	  debug_printf(db, "(7) atr_ProcessByte(): BWT:%d\n", card_status.BWT);
          break;
      }

      if (CurrY & ATR_TC_MASK) {
        AtrState = ATR_WAIT_TC;
      } else if (CurrY & ATR_TD_MASK) {
        AtrState = ATR_WAIT_TD;
      } else {
        if (sci_HistLen == 0) {
          if (T0Only) {
  	    AtrState = ATR_ENDED;
  	  } else {
  	    AtrState = ATR_WAIT_TCK;
  	  }
        } else {
    	  AtrState = ATR_WAIT_HIST;
    	}
      }
      break;

    case ATR_WAIT_TC:

      debug_printf(db, "(7) atr_ProcessByte(): TC\n");
      AtrCheck ^= ch;
      ProtTab[ProtIndex].extra_time = ch;

      switch (ProtIndex) {
      	case 0 :	/* TC1 */
	  debug_printf(db, "(7) atr_ProcessByte(): TC1:%02x\n", ch);
	  card_status.TC1 = ch;
	  card_status.N = card_status.TC1;
	  break;

        case 1 :	/* TC2 */
	  debug_printf(db, "(7) atr_ProcessByte(): TC2:%02x\n", ch);
	  card_status.TC2 = ch;
	  card_status.WI = card_status.TC2;
	  break;
      }

      if (CurrY & ATR_TD_MASK) {
        AtrState = ATR_WAIT_TD;
      } else {
        if (sci_HistLen == 0) {
  	  if (T0Only) {
   	    AtrState = ATR_ENDED;
   	  } else {
   	    AtrState = ATR_WAIT_TCK;
   	  }
   	} else {
   	  AtrState = ATR_WAIT_HIST;
   	}
      }

      break;

    case ATR_WAIT_TD:

      debug_printf(db, "(7) atr_ProcessByte(): TD\n");
      AtrCheck ^= ch;
      CurrY = ch & ATR_Y_MASK;
      ProtTab[ProtIndex].type = ch & ATR_T_MASK;

      switch (ProtIndex) {
        case 0 : 	/* TD1 */
	  debug_printf(db, "(7) atr_ProcessByte(): TD1:%02x\n", ch);
	  card_status.TD1 = ch;

	  if ((card_status.TD1 & 0x0F) == 1) {
	    card_status.protocol = 1;	/* update current protocol */
	  }
	  break;
	case 1 :	/* TD2 */
	  debug_printf(db, "(7) atr_ProcessByte(): TD2:%02x\n", ch);
	  card_status.TD2 = ch;

	  if ((card_status.TD2 & 0x0F) == 1) {
	    /*  Optional protocol, need to do PTS */
	    card_status.optional_protocol = 1;
	  }

	  //printf("(7) Card Optional protocol: %d\n", card_status.optional_protocol);
	  break;
      }

      if ((ch & ATR_T_MASK) != T0_TYPE) {
        debug_printf(db, "(7) setting t0only false (1)\n");
        T0Only = false;
      }

      if (CurrY != 0) {
        ProtIndex++;
        ProtCount++;
        if (CurrY & ATR_TA_MASK) {
   	  AtrState = ATR_WAIT_TA;
        } else if (CurrY & ATR_TB_MASK) {
  	  AtrState = ATR_WAIT_TB;
        } else if (CurrY & ATR_TC_MASK) {
  	  AtrState = ATR_WAIT_TC;
        } else {
  	  AtrState = ATR_WAIT_TD;
  	}
      } else {
        if (sci_HistLen == 0) {
	  if (T0Only) {
  	    AtrState = ATR_ENDED;
          } else {
            AtrState = ATR_WAIT_TCK;
          }
        } else {
          AtrState = ATR_WAIT_HIST;
        }
      }
      break;

    case ATR_WAIT_HIST:

      debug_printf(db, "(7) atr_ProcessByte(): HIST %d\n",HistNext);
      AtrCheck ^= ch;

      sci_HistData[HistNext++] = ch;
      if (HistNext == sci_HistLen) {
        if (T0Only) {
          debug_printf(db, "(7) setting ATR_ENDED\n");
  	  AtrState = ATR_ENDED;
  	} else {
          debug_printf(db, "(7) setting ATR_WAIT_TCK\n");
  	  AtrState = ATR_WAIT_TCK;
  	}
      }
      break;

    case ATR_WAIT_TCK:

      debug_printf(db, "(7) atr_ProcessByte(): TCK\n");
      AtrCheck ^= ch;
      if (AtrCheck != 0) {
        return SCI_E_PROTO;
      }
      AtrState = ATR_ENDED;

      break;

    case ATR_WAIT_PTS_ACK:

      debug_printf(db, "(7) atr_ProcessByte(): PTS ACK\n");

      if (ch != PTS_ACK) {
        return SCI_E_PROTO;
      }
      AtrState = ATR_WAIT_PROT_ECHO;
      break;

    case ATR_WAIT_PROT_ECHO:

      debug_printf(db, "(7) atr_ProcessByte(): protocol echo\n");

      if (ch != T1_TYPE) {  /* was T0_TYPE only */
        return SCI_E_PROTO;
      }
      AtrState = ATR_WAIT_PROT_ACK;
      break;

    case ATR_WAIT_PROT_ACK:

      debug_printf(db, "(7) atr_ProcessByte(): protocol ack\n");

      if (ch != PTS_ACK_T1) {  /* was PTS_ACK */
        return SCI_E_PROTO;
      }
      card_status.protocol = 1;

      AtrState = ATR_PTS_ENDED;

      break;

    case ATR_ENDED:
      debug_printf(db, "(7) atr_ProcessByte(): ATR_ENDED\n");
    case ATR_PTS_ENDED:

      debug_printf(db, "(7) atr_ProcessByte(): SCI_E_PROTO\n");

      return SCI_E_PROTO;
      break;

    case ATR_WAIT_IFSD_RESP:
    {
      /* Expected IFSD response from card: E1 is IFSD response, 1 data byte, data is IFSD, checksum: */
      const static char IFSD_response[]={0x00, 0xE1, 0x01, IFSD, 0xE0 ^ IFSD};

      pms_debug("atr_ProcessByte(): IFSD_resp: %02x", ch);
      if (ch!=IFSD_response[ifsd_resp_count++]) return SCI_E_PROTO;      /* Return error if card doesn't return correct IFSD response */

      if (ifsd_resp_count==sizeof(IFSD_response))
        {
          #ifdef FUNAI_TWINSLOT
            com_SendAck();
            g_uc_state = UC_IDLE;
          #endif
          AtrState=ATR_COMPLETE;
        }
      break;
    }
  }

  /* Check for sequence of state machine finishing and initiate next sequence:

     Once the ATR is fully received we may need to send a protocol select command.
     We also send an IFSD request to the card if it is a JICSAP card.
  */

  if (AtrState==ATR_ENDED)
    if (!atr_SendPtss ()) return SCI_E_COMMS; /* Do protocol selection, if required */

  pms_debug("   Switch state %s\n", atr_state_names[AtrState]);

  switch (AtrState)
  {
    case ATR_PTS_ENDED: /* Protocol selection complete, so send IFSD */
      /* ATR is complete, send IFSD S-block request to card */
#ifdef FUNAI_TWINSLOT
      com_SendAck();
      g_uc_state = UC_IDLE;
#endif
      if (IFSC_Value[SLOT_1]>0x25)   /* If this is a JICSAP card then send an IFSD request.
                                        (Funai Spec section 2.2 says don't send IFSD to miniJIS cards which we
                                        can detect as they send IFSC of LESS THAN 0x25. This is incorrect as MiniJIS
                                        cards actually send an IFSC of 0x25 - they mean LESS THAN 0x26) */
      {
        pms_debug("Sending IFSD");
        SendIFSD(SLOT_1);
        ifsd_resp_count=0;
        AtrState=ATR_WAIT_IFSD_RESP; /* Wait for acknowledge from card */
        return SCI_SUCCESS;
        break;
      }
      else
        AtrState=ATR_COMPLETE;       /* Don't send IFSD requests to Reasona/Mini-JIS cards - they don't understand */
      break;
    case ATR_COMPLETE:
      break;  /* Continue below */
    default:
      return SCI_SUCCESS;
      break;
  }

  /* ATR received in full successfully */
  sci_State = S_S_OPEN;

  #ifdef FUNAI_TWINSLOT
  //printf("ATR successfully handled. Card_status at &%08X\n",(int)&card_status);
  com_SendAck();
  g_uc_state = UC_IDLE;

  if(g_card2_insertpending)
  {
    debug_printf(db, "Dealing with Slot2 pending");
    sys_Delay(100);
    debug_printf(db, "...\n");
    com_ProcessCardInserted(SLOT_2);
    /** Note, we've not told anyone about slot1 insertion yet. **/
    /** They get told once we've finished messing with slot2   **/
  }
  else
  {
#endif
  /* Notify application that card is open */

    debug_printf(db, "(7) ATR success, signalling apps\n");
    for (channel=0; channel<MAX_CARD_CHANNELS; channel++) {
      if (ChannelTable[channel].flags & channel_in_use) {
        if (ChannelTable[channel].state == S_C_OPENING) {
          sys_SignalTask(channel,SCI_CMD_DONE);
        }
      }
    }
#ifdef FUNAI_TWINSLOT
  }
#endif
  WorkWaitTime = atr_CalcWorkWaitTime ();

  return (SCI_SUCCESS);
}

/*   Send IFSD to Card
     -----------------

Send IFSD to specified card slot (SLOT_1 or SLOT_2)

The IFSD is the Interface Field Size for the interface Device.
See ISO/IEC7816-3, section 9.5.1.2.

We always send IFSD of 0xFE. This is the maximum that the protocol allows
and the microcontroller is happy with it. It makes sense to use the largest
IFSD that we can to improve performance. There was some concern that long
blocks would make it more likely that card removals would be missed but
this is not the case, as the microcontroller will always complete the block
before repoerting card insertion and removal events.
*/

int SendIFSD(int slot)
{
  T1_PCKT cmd;

  debug_printf(db, "Entering SendIFSD()\n");

  cmd.slot = slot;

  cmd.data_start = 0;
  cmd.total_len = 0;

  cmd.NAD = 0x00;		/* NAD will always be 0 */
  cmd.PCB = 0xC1;
  cmd.LEN = 1;
  cmd.DATA[0]=0xFE;             /* Maximum that is allowed by protocol */

  cmd.TCK = t1_Check(&cmd);	/* calculate checksum */

  return SendBlk(&cmd);
}

/**************************************************************************/
static bool
atr_SendPtss (void)
/*
   This function
   1. determines if it necessary to perform protocol selection
   2. generates protocol selection block
   3. sends protocol selection block
   4. sets next state
   Returns TRUE if everything OK, FALSE if comms error sending PTSS.
   It does not return any indication as to whether PTSS was necessary.

   It also sets AtrState to ATR_WAIT_PTS_ACK if an acknowledge is expected
   or ATR_PTS_ENDED otherwise.
 */
{
  int i=0;
  BYTE ptss[PTSS_LEN];

  debug_printf(db, "(7) atr_SendPtss()\n");

  if (((card_status.TD1 & 0x0F) == 0) && ((card_status.TD2 & 0x0F) == 1)) {

    debug_printf(db, "(7) atr_SendPtss(): Requesting T=1 Protocol\n");

    ptss[i++] = PTS_PTSS;
    ptss[i++] = PTS_DEF_PTS1;
    ptss[i++] = PTS_ACK_T1;

    if (com_SendBytes(ptss, i) != SCI_SUCCESS) {
      return false;
    } else {
      AtrState = ATR_WAIT_PTS_ACK;
      return true;
    }
  }
  if (card_status.protocol == 0) {
    debug_printf(db, "(7) setting t0only true (2)\n");
    T0Only = true;
    AtrState = ATR_PTS_ENDED;
    return true;
  }
  if (card_status.protocol == 1) {
    T1Only = true;
    AtrState = ATR_PTS_ENDED;
    return true;
  }

  return true;
}

/**************************************************************************/
int
atr_Start (bool reset)
{
  /* if card out do nothing, wait for card in and then do the reset */

  debug_printf(db, "(7) ATR Start (%s)\n",reset?"reset":"no reset");
  if (com_CardIn()) {
    if (reset) {
      com_FlushComms ();
      sys_DiscardEvents ();

      if (com_SetResetInd () != SCI_SUCCESS) {
	return atr_Error (SCI_E_COMMS);
      }

      /*
       * waiting for ATR so set wait time
       */
      sys_StartWaitTimer (ATR_INIT_WAIT);
    }
  }

  AtrState = ATR_WAIT_TS;
  sci_State = S_S_OPENING;
  card_status.protocol = 0;
  card_status.optional_protocol = 0;

  return SCI_SUCCESS;
}

/**************************************************************************/
int
atr_Error (int err)
{
  int channel;

  debug_printf (db,"(7) ATR error\n");

  /* remember current connection slot */
  /* error condition so signal users and close everything */
  for (channel=0; channel<MAX_CARD_CHANNELS; channel++) {
    if (ChannelTable[channel].flags & channel_in_use) {
      ChannelTable[channel].state = S_C_FAILED;
      ChannelTable[channel].last_err = err;
      sys_SignalTask(channel,SCI_ERROR);
    }
  }
  /* restore current connection slot */
  com_FlushComms ();

  sci_State = S_S_FAILED;
  sci_Errno = err;

  return (SCI_FAIL);
}

/**************************************************************************/
static int
atr_CalcWorkWaitTime (void)
{
  int wi;

  /* analyse protocol parameters */
  if (ProtCount < 2) {
    /* can't be a TC2 byte */
    wi = ATR_DEFAULT_WI;
  } else {
    if (ProtTab[0].type == ProtTab[1].type) {
      /* protocol with additional parameters */
      wi = ProtTab[1].extra_time;
    } else {
      wi = ATR_DEFAULT_WI;
    }
  }

  return wi * MS_PER_SEC / 100;	/* centi-seconds */
}
