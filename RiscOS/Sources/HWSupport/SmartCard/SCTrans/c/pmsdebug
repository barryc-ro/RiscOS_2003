/*      Debug Routines
        --------------

debug_start(filename)           Start the debug log with specified filename.
debug_log_close                 Close the debug log (called automatically atexit)
debug(msg)                      Debug string

Debug messages are written to buffer in memory.

Note that a large memory buffer is used if PMSDEBUG is defined in pmsdebug.h
Remove the #define if it is not required.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "pmsdebug.h"

#ifdef PMSDEBUG

FILE *debugfile=NULL;			/* Debug file */

#define DEBUGSIZE 0x80000
static char debugstart[DEBUGSIZE];
static char* debugptr=debugstart;
static char pmsdebugfile[256];
#endif

#if 0
/*  Write Byte to Screen for Debugging
    ----------------------------------
*/

void debug_printable(int byte)
{
  switch (byte)
  {
    case -1:
      printf("[null]");break;
    case 10: case 13:
      printf("\n"); break;
    default:
      if (byte>31 && byte<127)
        printf("%c", byte);
      else
        printf("[%d]", byte);
      break;
  }
}
#endif

/*	Record I/O for Debug
	--------------------

serial_debug is called to record all serial I/O in a debug file.

On entry: portid contains the port number, out is TRUE if data is being output to the serial port,
otherwise data is being read from the serial port.
*/

void pms_debug(char *fmtstring, ...)
{
#ifdef PMSDEBUG
  va_list args;
#define MAXDEBUG 1200
  static char buffer[MAXDEBUG];	/* Static so as not to use up stack */


  va_start(args, fmtstring);
  vsprintf(buffer, fmtstring, args);
  va_end(args);

  buffer[MAXDEBUG-1]='\0';

  if (debugptr<debugstart || debugptr+strlen(buffer)+10>=debugstart+DEBUGSIZE) debugptr=debugstart;  /* Wrap round to start of buffer */
  sprintf(debugptr, "%s\n", buffer);     /* Write to debug buffer */
  debugptr+=strlen(buffer)+1;            /* Advance buffer pointer */
#endif
}


/*      Write Debug Log to File
        -----------------------

*/

void pms_debug_dump(void)
{
#ifdef PMSDEBUG
  char *i;
  debugfile=fopen(pmsdebugfile, "wb");
  fprintf(debugfile, "Debug log: %d, %d, %d\n", (int) debugstart, (int) DEBUGSIZE, (int) debugptr);
  if (debugptr<debugstart) debugptr=debugstart;
  if (debugptr>debugstart+DEBUGSIZE) debugptr=debugstart+DEBUGSIZE;
  for (i=debugstart; i<debugptr; i++)
    fputc(*i, debugfile);
  fclose(debugfile);
#endif
}


/*       Convert Block to Hex String
         ---------------------------

*/
char *pms_convert_hex(void* data, int len)
{
#ifdef PMSDEBUG
#define PMS_MAX_HEX 64
  static char hexbuf[PMS_MAX_HEX*3+8];
  char digits[8];
  int i;

  hexbuf[0]='\0';
  if (len>256) len=PMS_MAX_HEX;
  for (i=0; i<len; i++)
  {
    sprintf(digits, "%02X ", (int) ((char *) data) [i]);
    strcat(hexbuf, digits);
  }
  return hexbuf;
#else
    return "";
#endif
}

/*	Start the Debug Log
	-------------------

Opens a debug file for writing */

void pms_debug_start(char *filename)
{
#ifdef PMSDEBUG
  strcpy(pmsdebugfile, filename);   /* Copy the filename */
  debugptr=debugstart;
  atexit(pms_debug_dump);		/* Dump log to file on exit */
  debugfile=NULL;
  pms_debug("Debug starting.");
#endif
}

