/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * provide functions for processing and validating a directory path
 *
 * Modification History
 *---------------------
 *
 * 20-Jun-96  RWB,  Created.
 *
 */
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "scinter.h"

extern t_card_exports *CurrExports;

/*
 * convert a string hex number into an integer
 */
static int
_convert_fileid(char *fileid)
{
  _kernel_swi_regs reg;
  reg.r[0] = 0x10;
  reg.r[1] = (int)fileid;
  _kernel_swi(OS_ReadUnsigned,&reg,&reg);
  return (reg.r[2]);
}

/*
 * process the directory structure and spit file identifiers into an argv/argc
 * type format.
 */
static int
_process_dirs(char *path, int *filec, char **filev)
{
  char *cp;
  *filec = 0;

  cp = path;

  if (*cp!='/')
  {
    /* check for path of the format 'x/y' which is bogus */
    while (*cp!='\0' && *cp!='/') cp++;
    if (*cp=='/') return (SC_FORMAT);
    /* so must be of form 'x' */
    filev[(*filec)++] = path;
  }
  else
  {
    if (*(cp+1) != '\0')
    {
      /* must be of the form /x/y/z, insert '\0's and add to filev */
      while (*cp!='\0')
      {
        while (*cp!='/' && *cp!='\0') cp++;        /* skip file/directory */
        if (*cp=='/' && *(cp+1)=='/') return (SC_FORMAT);  /* case '/x//...' */
        if (*cp=='/' && *(cp+1)=='\0') return (SC_FORMAT); /* case '/x/' */
        if (*cp=='\0')
        {
          break;
        }
        else
        {
          *cp++ = '\0';
          filev[(*filec)++] = cp;
          if (*filec==MAX_SUBDIRS) return (SC_NESTED);
        }
      }
    }
  }
  return (SC_SUCCESS);
}

/*
 * check file id against list of reserved
 */
static int
_check_reserved(int file_id)
{
  int i;

  for (i=0; i<CurrExports->card_num_reserved_files; i++)
    if (file_id == CurrExports->card_reserved_files[i])
      return (SC_RESERVED);

  return (SC_SUCCESS);
}

/*
 * validate each file identifier
 */
static int
_validate_fileid(char *file, int validate)
{
  char *cp;
  int i;

  cp = file;
  i=0;
  while (*cp!='\0')
  {
    int ok=0;
    if (*cp>='0' && *cp<='9') ok=1;
    if (*cp>='a' && *cp<='f') ok=1;
    if (*cp>='A' && *cp<='F') ok=1;
    if (!ok || i>3) return (SC_FORMAT);
    cp++;
    i++;
  }

  return (SC_SUCCESS);
}

/*
 * convert a string path into an array of validated numbers
 */
int
path_process(char *path, int *files, int *num_files, int validate)
{
  char *filev[MAX_SUBDIRS];
  char file_path[20];
  int err;
  int i;

  strncpy(file_path,path,20);

  ERR_RETURN(err,_process_dirs(file_path, num_files, filev));

  for (i=0; i<(*num_files); i++)
  {
    ERR_RETURN(err,_validate_fileid(filev[i],validate));
    files[i] = _convert_fileid(filev[i]);
    if (validate)
    {
      err = _check_reserved(files[i]);
      if (err != SC_SUCCESS)
        return (err);
    }
  }

  return (SC_SUCCESS);
}
