/************************************************************************/
/*                  Copyright 1998 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * provide functions for processing records
 *
 * Modification History
 *---------------------
 *
 * 18-Nov-98  AJP,  Created.
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "irqs.h"
#include "header.h"
#include "records.h"

#include "Debuglib/Debuglib.h"

/* variables for minijis cards */
int  minijis_current  =0;  /* current record being read */
int  minijis_currentw =0;  /* current record being written */
int  minijis_records  =0;  /* number of records on card */
int  minijis_offset   =0;  /* offset into user buffer */
char minijis_buff [ 1024]; /* tmp buffer for card data */
char tmpr[28];

/******************************************************************************/
void memfill ( char *mem, int len, char c)
{
  int n;

  for ( n=0; n<len; n++)
    mem [ n] =c;
}

/******************************************************************************
  reorder a buffer so that its written in reverse order
  parameters: buff   - buffer to convert
              reclen - length of 1 record
              recs   - total number of records
     returns:
 ******************************************************************************/
void reorder_buff ( char *buff, int reclen, int recs)
{
  int head =0, tail =recs -1;

  while (( head !=tail) && ( head <tail))
  {


    memcpy ( tmpr, buff +( head *reclen), reclen);
    memcpy ( buff +( head *reclen), buff +( tail *reclen), reclen);
    memcpy ( buff +( tail *reclen), tmpr, reclen);
    head ++;
    tail --;
  }
}

/******************************************************************************
  convert user buffer to card buffer format
  parameters: userb - buffer to convert
              ulen  - user buffer length
              cardb - buffer ready for card writing
              clen  - card buffer length
              recs  - number of records on card
     returns:
 ******************************************************************************/
void buff_to_records ( char *userb, int ulen, char *cardb, int clen, int recs)
{
  int n,
      userbo =0;  /* user buffer read offset */

  /* fill card buffer with 0xff */
  for ( n=0; n<clen; n++)
    cardb [ n]=FILL_CHAR;

  for ( n =0; n<recs; n++)
  {
    *(cardb +(n*27))   =0;
    *(cardb +(n*27)+1) =25;

    if ( userbo <ulen)
    {
      memcpy ( cardb +((n*27)+2), userb+userbo, ulen-userbo <25?ulen-userbo:25);
      userbo +=ulen -userbo <25?ulen -userbo:25;
    }
  }
}

/******************************************************************************
 convert card buffer to user buffer format
  parameters: userb - buffer to convert
              cardb - buffer ready for card writing
              recs  - number of records on card
     returns:
 ******************************************************************************/
void records_to_buff ( char *userb, char *cardb, int recs)
{
  int n,
      userbo =0;  /* user buffer read offset */

  for ( n =0; n<recs; n++)
  {
    memcpy ( userb +userbo, cardb +((n*27)+2), 25);
    userbo +=25;
  }
}

#ifdef DEBUGLIB
/******************************************************************************/
/* display the contents of a buffer */
void print_rec ( char *buff)
{
  int i,n =0;

  dprintf(("", "print_rec(): Tag: %x ", buff [(n*27)]));
  dprintf(("", "print_rec(): Len: %d ", buff [(n*27)+1]));
  dprintf(("", "print_rec(): Data: "));
  for ( i =2; i<27; i++)
  {
    if (( buff [(n*27)+i]>=32) && ( buff [(n*27)+i]<127))
    {
      dprintf(("", "%c", buff [(n*27)+i]));
    }
    else
    {
      dprintf(("", "[%x]", buff [(n*27)+i]));
    }
  }
  dprintf(("", "\n"));
}

/******************************************************************************/
/* display the contents of a buffer */
void print_buff ( char *buff, int recs)
{
  int i,n;

  for ( n=0; n<recs; n++)
  {
    dprintf(("", "Tag: %x ", buff [(n*27)]));
    dprintf(("", "Len: %d ", buff [(n*27)+1]));
    dprintf(("", "Data: "));
    for ( i =2; i<27; i++)
    {
      if (( buff [(n*27)+i]>=32) && ( buff [(n*27)+i]<127))
      {
        dprintf(("", "%c", buff [(n*27)+i]));
      }
      else
      {
        dprintf(("", "[%x]", buff [(n*27)+i]));
      }
    }
    dprintf(("", "\n"));
  }
  dprintf(("", "\n"));
}
#endif
