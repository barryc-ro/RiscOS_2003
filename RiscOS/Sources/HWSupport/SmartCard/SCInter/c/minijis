/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Provide functions for manipulating files on a minijis smart card.
 *
 * Modification History
 *---------------------
 *
 * 28-Oct-98  RML,  Created, based on c.orga
 * 18-Nov-98  AJP,  Modified
 *
 */

/* Notes:
   1. The MiniJIS cards have nothing called CHV. However, they have a 'key'
      which seems to do the same thing (ie. provide a PIN for overall
      card access.)
   2. The ATR defined below is temporary and will need to be changed
      when we have decided what it is to be. */

#include "kernel.h"
#include "string.h"
#include "module.h"
#include "scinter.h"
#include "sctrans.h"
#ifdef debug
#include "stdio.h"
#include "records.h"
#endif

/******************************************************************************
  prototypes of exported functions to go in table
 ******************************************************************************/
static int _minijis_initialise_table(void);
static int _minijis_select_root(int card_handle);
static int _minijis_select(int card_handle, int file_id);
static int _minijis_read(int card_handle, int offset, int len);
static int _minijis_write(int card_handle, int offset, BYTE *data, int len);
static int _minijis_verify_chv(int card_handle, int access_condition, char *code,
       	   int code_len);
static int _minijis_change_chv(int card_handle, int access_condition,
       	   char *code, int code_len, char *new_code, int new_code_len);
static int _minijis_get_response(int card_handle, int len);

/******************************************************************************
  exported function table
 ******************************************************************************/
t_card_exports minijis_exports =
{
  _minijis_initialise_table,
  _minijis_select_root,                               /* exported functions */
  _minijis_select,
  0,
  0,
  _minijis_read,
  _minijis_write,
  _minijis_verify_chv,
  _minijis_change_chv,
  0,
  0,
  _minijis_get_response,
  0,
  27,                                              /* chunk size in bytes */
  0,
  0,
  0
};

/******************************************************************************
  smart card ATR to match against
  NOTE: there is no defined ATR for the MiniJis and Standard-8, so we leave
        the table here to stop the sw barfing.
 ******************************************************************************/
static t_card_atr minijis_atr = { 0x0,     /* Manufacturer */
       		  	      0x0,     /* OS code */
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x00, 0x00, 0x00, 0x00, 0x00,
		       	        10,    /* ATR length */
  		       	        10};   /* significant bytes in ATR */

/******************************************************************************
  table mapping card response codes to ones we need to know about, structure
  of this table is as follows.

  SCInterface error code, response match

  where response match is encoded as :
  	bits 16-23 : number of nibbles to match
 	bits  8-15 : MSB of card response code
 	bits  0-7  : LSB of card response code
 ******************************************************************************/
#ifdef OLD_MSGS
static t_card_resp minijis_response[] = {
  SC_SUCCESS,         0x049000,
  SC_SUCCESS,         0x029f00,
  SC_SUCCESS,         0x036300,
  SC_SUCCESS,         0x0363c0,
  /* status values for security management */
  SC_NOACCESSCODE,    0x049802,
  SC_FAILACCESSCODE,  0x046982,
  SC_NOACCESSCHANGE,  0x049808,
  SC_BLOCKEDACCESS,   0x049840,
  /* status values for storage management */
  SC_SUCCESS,         0x039200,
  SC_SPACE,           0x049210,
  SC_EXISTS,          0x049220,
  SC_STORAGE,         0x049240,
  /* status values for pointer management */
  SC_NOTVALID,        0x046A80,
  SC_TECHPROBLEM,     0x046A81,
  SC_NOTFOUND,        0x046A82,
  SC_NOTFOUND,        0x046A83,
  SC_SPACE,           0x046A84,
  SC_P3INVALID,       0x046A85,
  SC_P1P2INVALID,     0x046A86,
  SC_P3INVALID,       0x046A87,
  SC_TECHPROBLEM,     0x046A88,
    /* application independent error messages */
  SC_P1P2INVALID,     0x046b00,
  SC_P3INVALID,       0x026700,
  SC_TECHPROBLEM,     0x026f00
};
#else
static t_card_resp minijis_response[] = {
  SC_SUCCESS,         0x049000,
  SC_SUCCESS,         0x029f00,
  SC_SUCCESS,         0x036300,
  SC_SUCCESS,         0x0363c0,
  /* status values for security management */
  SC_NOACCESSCODE,    0x049802,
  SC_FAILACCESSCODE,  0x046982,
  SC_NOACCESSCHANGE,  0x049808,
  SC_BLOCKEDACCESS,   0x049840,
  /* status values for storage management */
  SC_SUCCESS,         0x039200,
  SC_SPACE,           0x049210,
  SC_EXISTS,          0x049220,
  SC_STORAGE,         0x049240,
  /* status values for pointer management */
  SC_NOTVALID,        0x046A80,
  SC_TECHPROBLEM,     0x046A81,
  SC_NOTFOUND,        0x046A82,
  SC_NOTFOUND,        0x046A83,
  SC_SPACE,           0x046A84,
  SC_P3INVALID,       0x046A85,
  SC_P1P2INVALID,     0x046A86,
  SC_P3INVALID,       0x046A87,
  SC_TECHPROBLEM,     0x046A88,
    /* application independent error messages */
  SC_P1P2INVALID,     0x046b00,
  SC_P3INVALID,       0x026700,
  SC_TECHPROBLEM,     0x026f00,
  /* new codes added for minijis */
  SC_CORRUPTED,       0x46281,  /* part of returned data corrupted */
  SC_LEFAILED,        0x46282,  /* file/record failed before Le bytes */
  SC_NOINFO,          0x46300,  /* no information */
  SC_BLOCKEDACCESS,   0x353c0,  /* counter X times */
  SC_NCHANGEEPROM,    0x46400,  /* no change of eeprom condition */
  SC_WRITEERROR,      0x46581,  /* write error of eprom (memory failed) */
  SC_LENGTHWRONG,     0x46700,  /* length is wrong */
  SC_CHANNOTSUPP,     0x46881,  /* theoretical channel is not supported */
  SC_SECUREMNS,       0x46882,  /* sucure messaging is not supported */
  SC_NOCOMPAT,        0x46981,  /* no compatibility beteen structure of file and command */
  SC_FAILACCESSCODE,  0x46982,  /* the conditions of security status is not satisfied */
  SC_CHECKDNE,        0x46984,  /* check data is not effective */
  SC_FAILACCESSCODE,  0x46985,  /* usage condition not satisfied */
  SC_NOTIMPLEMENTED,  0x46a81,  /* function is not supported */
  SC_NOTFOUND,        0x46a82,  /* file not found */
  SC_NOTFOUND,        0x46a83,  /* record not found */
  SC_INCONLCTLV,      0x46a85,  /* LC and TLV structure are not consistent */
  SC_P1P2INVALID,     0x46a86,  /* invalid P1 and P2 */
  SC_INVLCP1P2,       0x46a87,  /* Lc and P1-P2 invalid */
  SC_INSINV,          0x46d00,  /* INS is not provided or not effective */
  SC_WRONGCLASS,      0x46e00,  /* Class not provided */
};
#endif

/* file numbers */
#define USER_PIN_FILE  (0x14)
#define ISP_PIN_FILE   (0x11)
#define DATA_AREA_FILE (0x1a)

/******************************************************************************
  perform static table initialisation as the compiler will not let this happen
  when compiling -zM
 ******************************************************************************/
static int _minijis_initialise_table(void)
{
#ifdef debug
  printf ( "SCINTERFACE: _minijis_initialise_table\n");
#endif
  minijis_exports.card_atr = &minijis_atr;
  minijis_exports.card_responses = minijis_response;
  minijis_exports.card_num_responses = sizeof(minijis_response)/sizeof(t_card_resp);

  return (SC_SUCCESS);
}

/******************************************************************************
  select root directory (master file)
 ******************************************************************************/
static int _minijis_select_root(int card_handle)
{
#ifdef debug
  printf ( "SCINTERFACE: _minijis_select_root\n");
#endif
  return (_minijis_select(card_handle,0x3f00));
}

/******************************************************************************
  select specified directory
 ******************************************************************************/
static int _minijis_select(int card_handle, int file_id)
{
  BYTE hdr[4];
  BYTE data[2];
  int exp_len = 0;

#ifdef debug
  printf ( "SCINTERFACE: _minijis_select: file id:%x\n", file_id);
#endif
  hdr[0] = 0x00;
  hdr[1] = 0xA4;
  hdr[2] = 0x00;
  hdr[3] = 0x00;

  file_id =0x3f00;

  data[0] = file_id / 256;
  data[1] = file_id % 256;

  if ( file_id ==0x3f00)
  {
#ifdef debug
    printf ( "SCINTERFACE: _minijis_select selecting root\n");
#endif
    return sctransport_issue_command (card_handle,hdr,0,NULL,exp_len);
  }

  return sctransport_issue_command (card_handle,hdr,sizeof(data),data,exp_len);
}

/******************************************************************************
  read a chunk of data from the card
 ******************************************************************************/
static int _minijis_read(int card_handle, int record, int len)
{
  BYTE hdr[4];

#ifdef debug
  printf ( "SCINTERFACE: _minijis_read (rec:%d)(len:%d)\n", record, len);
#endif
  hdr[0] = 0x00;
  hdr[1] = 0xB2;
  hdr[2] = record;
  hdr[3] = 4 | ((DATA_AREA_FILE <<3 ) &0xff);
  //hdr[3] = 5 | ((DATA_AREA_FILE <<3 ) &0xff);

  return sctransport_issue_command (card_handle, hdr, 0, 0, len);
}

/************************************************************************
 * write a chunk of data to the card
 */
static int _minijis_write(int card_handle, int offset, BYTE *data, int len)
{
  BYTE hdr[4];

#ifdef debug
  printf ( "SCINTERFACE: Buffer address: %p\n", data);
  printf ( "SCINTERFACE: _minijis_write\n");
  print_buff (( char *)data, 1);
#endif

  hdr[0] = 0x00;
  hdr[1] = 0xe2;
  hdr[2] = 0;
  hdr[3] = (DATA_AREA_FILE <<3) & 0xff;

  return sctransport_issue_command(card_handle, hdr, len, data, 0);
}

/************************************************************************
 * submit a CHV password to the card for verification
 */
static int _minijis_verify_chv(int card_handle, int access_condition,
                               char *code, int code_len)
{
  BYTE hdr[4];
#ifdef debug
  printf ( "SCINTERFACE: _minijis_verify_chv: pwd:'%s' len:%d\n", code, code_len);
#endif
  hdr[0] = 0x00;
  hdr[1] = 0x20;
  hdr[2] = 0;
  hdr[3] = 0x94;

  return sctransport_issue_command(card_handle, hdr, code_len,
                                   (BYTE *)code, 0);
}

/************************************************************************
 * submit existing CHV and a new CHV to the card for change
 */
static int _minijis_change_chv(int card_handle, int access_condition,
       	    char *code, int code_len, char *new_code, int new_code_len)
{
  BYTE hdr[4];
#ifdef debug
  printf ( "SCINTERFACE: _minijis_change_chv\n");
#endif
  hdr[0] = 0x80;
  hdr[1] = 0x32;
  hdr[2] = 0;
  hdr[3] = 1<<7| (USER_PIN_FILE & 0x1f);

  return sctransport_issue_command(card_handle, hdr,
                                   new_code_len, (BYTE *)new_code, 0);
}

/************************************************************************
 * get the response data giving file information following a successful select
 * command
 */
static int _minijis_get_response(int card_handle, int exp_len)
{
  BYTE hdr[4];
#ifdef debug
  printf ( "SCINTERFACE: _minijis_get_response\n");
#endif
  hdr[0] = 0x00;
  hdr[1] = 0xC0;
  hdr[2] = 0;
  hdr[3] = 0;

  return sctransport_issue_command (card_handle, hdr, 0, 0, exp_len);
}
