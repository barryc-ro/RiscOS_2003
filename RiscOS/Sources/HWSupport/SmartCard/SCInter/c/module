/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * This module provides an abstraction to the smart card transport module by
 * implementing some primitive filing system operations.
 *
 * Modification History
 *---------------------
 *
 * 14-Jun-96  RWB,  Created.
 * 28-Jun-96  RWB,  Fixed a few bugs in the card read/write routines.
 * 07-Aug-96  RWB,  Backoff if SCTransport module not ready yet.
 * 28-Aug-96  RWB,  Removed redundant parameter in unblockchv functions.
 * 28-Aug-96  RWB,  Check for never access condition before a verifychv.
 * 29-Aug-96  RWB,  Added Status swi for polled operation.
 * 08-Oct-96  RWB,  Modified the ordering of InternalAuthenticate
 * 22-May-97  RWB,  get_atr does not check atr length
 * 03-Nov-98  RML,  *SCInterInfo now shows current card type (corresponds
 *                  to value of i in CARDS_POPULATE, in h.cards).
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "sctrans.h"
#include "module.h"
#include "irqs.h"
#include "header.h"
#include "scinter.h"
#include "machine.h"
#include "cards.h"
#include "path.h"
#include "records.h"

/*
 * table used to identify which card is present
 */
t_card_exports *CardExports[SUPPORTED_CARDS];
t_card_exports *CurrExports = NULL;

/*
 * special chimpanzee processing
 */
int ChimpanzeeClassByte=0xa0;

int current_card_type=-1;

#ifdef REMOTE_DEBUG
debug_session *db=NULL;
#endif

/*
 * module housekeeping globals
 */
void   *workspace_pointer = NULL;
#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif
int card_handle = -1;
t_card_atr ATR;

#ifdef debug
char *strNotifications[] = {"CardOK","CardBad","CardRemoved","Complete"};
char *strState[] = {"WaitingOpen","WaitingATR","WaitingRemoval","Idle",
"SelectingDir","SelectingFile","GettingResponse","GettingAuthResponse",
"Creating","Deleting","ReadingFile","WritingFile","VerifyingCHV","ChangingCHV",
"EnablingCHV","UnBlockingCHV","WaitingInternalAuth","WaitingTrans","WaitingStandby"};
char *strTransitions[] = {"Done","Error","Removed","ReStart","TransEnd",
"CreateSWI","DeleteSWI","ReadSWI","WriteSWI","GetATRSWI","ChangeCHVSWI",
"EnableCHVSWI","UnBlockCHVSWI","FileInfoSWI","InternalAuthSWI","StatusSWI","Shutdown","Standby"};
#else
char *strNotifications[] = {""};
char *strState[] = {""};
char *strTransitions[] = {""};
#endif
/*
 * event handling globals
 */
t_event Events[MAX_EVENTS];             /* generic event queue */
int next_event = -1;
int free_event = 0;
int flag_event_pending = FALSE;
t_states state = WaitingOpen;
t_transitions entry_trans;

/******************************************************************************
  process the asynchronous events
 ******************************************************************************/
_kernel_oserror *sc_event_handler(_kernel_swi_regs *r, void *pw)
{
  int  this_event = 0;
  int  this_handle = 0;
  int  old_irqs;

  while (next_event != free_event)
  {
    if (next_event == -1) break;

    /* need to protect against queue changing behind our backs */
    old_irqs = irqs_off();
    this_handle = Events[next_event].handle;
    this_event = Events[next_event].event;
    irqs_on(old_irqs);

    if (this_handle == card_handle)
    {
      switch(this_event)
      {
        case SCI_REMOVED:
#ifdef debug
          printf("SCINTERFACE: event SCI_REMOVED\n");
#endif
          machine(Removed,r);
          break;

        case SCI_TRANS_END:
#ifdef debug
          printf("SCINTERFACE: event SCI_TRANS_END\n");
#endif
          machine(TransEnd,r);
          break;

        case SCI_CMD_DONE :
          machine(Done,r);
          break;

        case SCI_ERROR :
#ifdef debug
          printf("SCINTERFACE: event SCI_ERROR\n");
#endif
          machine(Error,r);
          break;
      }
    }

    /* need to protect against queue changing behind our backs */
    old_irqs = irqs_off();
    if (next_event>=0) next_event++;
    if (next_event==MAX_EVENTS) next_event=0;
    irqs_on(old_irqs);
  }

  old_irqs = irqs_off();
  flag_event_pending = FALSE;
  next_event = -1;
  irqs_on(old_irqs);

  return (NULL);
}

/******************************************************************************
  setup a callback to deal with the serial event.
 ******************************************************************************/
_kernel_oserror *setup_event(int iHandle, int ithis_event)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int old_irqs;

  if (free_event != next_event)
  {
    old_irqs = irqs_off();
    if (next_event == -1) next_event = free_event;
    Events[free_event].handle = iHandle;
    Events[free_event].event = ithis_event;
    free_event++;
    if (free_event==MAX_EVENTS) free_event=0;
    irqs_on(old_irqs);
    /*
     * see if event handler needs to be established
     */
    if (!flag_event_pending)
    {
      reg.r[0] = (int)sc_event_entry;
      reg.r[1] = (int)workspace_pointer;
      ERR_RETURN(err,_kernel_swi(OS_AddCallBack, &reg, &reg));
      flag_event_pending = TRUE;
    }
  }

  return (NULL);
}


/******************************************************************************
  handle events, select ones of interest to us
 ******************************************************************************/
int event_handler(_kernel_swi_regs *r, void *pw)
{
  if (r->r[0] == Event_Expansion)
  {
    if (r->r[1] == Event_Expansion_SCTransport)
    {
      setup_event(r->r[2],r->r[3]);
    }
  }

  return (1); /* pass on */
}

/******************************************************************************
  claims vectors and enables the events as required
 ******************************************************************************/
_kernel_oserror *claim_vectors(void)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  /*
   * claim vectors
   */
  reg.r[0] = EventV;
  reg.r[1] = (int)event_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Claim, &reg, &reg));

  /*
   * enable Expansion event
   */
  reg.r[0] = 14;
  reg.r[1] = Event_Expansion;
  ERR_RETURN(err,_kernel_swi(OS_Byte, &reg, &reg));

  return (NULL);
}

/******************************************************************************
  release vectors, flush any callbacks and disable events
 ******************************************************************************/
_kernel_oserror *release_vectors(void)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;

  /*
   * disable event
   */
  reg.r[0] = 13;
  reg.r[1] = Event_Expansion;
  ERR_RETURN(err,_kernel_swi(OS_Byte, &reg, &reg));

  /*
   * release vectors
   */
  reg.r[0] = EventV;
  reg.r[1] = (int)event_entry;
  reg.r[2] = (int)workspace_pointer;
  ERR_RETURN(err,_kernel_swi(OS_Release, &reg, &reg));

  return (NULL);
}

/******************************************************************************
  module service, only dealing with service_NCTransportStarting
 ******************************************************************************/
void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
#ifdef debug
  printf("SCINTERFACE: module service %x\n",r->r[1]);
#endif
  switch (service_number)
  {
  case Service_SCTransportStarting:
      machine(ReStart,r);
      break;

#ifdef MONITOR_STANDBY
#ifdef MINIJIS_CARD
  case Service_ShutdownComplete:
      /* SJM: 8Dec97: Need to forget about card when we shutdown as
         Funai micro doesn't notify us of events that occur whilst int
         is in standby */
      if (card_handle != -1)
	  machine(Shutdown,r);
      break;
#endif
#ifdef MINIJIS_CARD
  case Service_Standby:
      /* SJM: 8Dec97: */
      if ((r->r[0] & 1) == 0) /* box waking up */
	  machine(Standby,r);
      break;
#endif
#endif
  }
}

/******************************************************************************
  broadcast a message using the SCInterface event
 ******************************************************************************/
void module_notify(int reason,int param)
{
  _kernel_swi_regs reg;

#ifdef debug
  printf("SCINTERFACE: notify '%s', 0x%x\n",
  	strNotifications[reason],param);
#endif

  reg.r[0] = Event_Expansion;
  reg.r[1] = Event_Expansion_SCInterface;
  reg.r[2] = reason;
  reg.r[3] = param;
  _kernel_swi(OS_GenerateEvent,&reg,&reg);
}

/******************************************************************************
  simple printf without using stdio
 ******************************************************************************/
void my_printf(char *format, ...)
{
  _kernel_swi_regs reg;
  char strLine[80];
  va_list list;

  va_start(list, format);
  vsprintf(strLine,format,list);
  va_end(list);

  reg.r[0] = (int)strLine;
  _kernel_swi(OS_Write0,&reg,&reg);
  _kernel_swi(OS_NewLine,&reg,&reg);
}

/******************************************************************************
  cli_handler
 ******************************************************************************/
_kernel_oserror *module_cli ( const char *arg_string, int arg_count,
                              int cmd_no, void *pw)
{
  switch (cmd_no)
  {
    case CMD_SCInterInfo :
      my_printf("   State       : %d",state);
      my_printf("   Entry trans : %d",entry_trans);
      my_printf("   Card type   : %d",current_card_type);

      break;
  }
  return (NULL);
}

/******************************************************************************
  module finalise
 ******************************************************************************/
_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror *err = NULL;

  if (card_handle>=0) sctransport_close(card_handle);

  ERR_RETURN(err,release_vectors());

#ifdef debug
  printf("SCINTERFACE: finalisation");
#endif
#ifdef REMOTE_DEBUG
  remote_debug_close(db);
#endif

#ifdef USE_TINY
  if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif

  return NULL;

  NOT_USED( fatal );
  NOT_USED( podule );
}

/******************************************************************************
  module initialise
 ******************************************************************************/
_kernel_oserror *module_initialise ( const char *cmd_tail, int podule_base,
                                     void *pw)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int i;

  workspace_pointer = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
  reg.r[0] = (int)workspace_pointer;
  TinyError = _kernel_swi(TinySupport_Share, &reg, &reg);
#endif

  /*
   * initialise the event queue
   */
  for (i=0; i<MAX_EVENTS; i++)
  {
    Events[i].handle = 0;
    Events[i].event = 0;
  }

  /*
   * initialise the system
   */
#ifdef REMOTE_DEBUG
  remote_debug_open(Module_Title,&db);
#endif

  ERR_RETURN(err,claim_vectors());

  /*
   * populate array of card exports here and initialise them
   */
  CARDS_POPULATE(CardExports);

  for (i=0; i<SUPPORTED_CARDS; i++)
    (*(CardExports[i])->card_initialise_table)();

  machine(ReStart,&reg);

  return (NULL);
}

/******************************************************************************
  module swi handler
 ******************************************************************************/
_kernel_oserror *module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
  switch (swi_no+SCInterface_00)
  {
    case SCInterface_Create :
      if (CurrExports->card_create == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(CreateSWI,r);
      break;

    case SCInterface_Delete :
      if (CurrExports->card_delete == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(DeleteSWI,r);
      break;

    case SCInterface_Read :
      if (CurrExports->card_read == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(ReadSWI,r);
      break;

    case SCInterface_Write :
      if (CurrExports->card_write == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(WriteSWI,r);
      break;

    case SCInterface_GetATR :
      machine(GetATRSWI,r);
      break;

    case SCInterface_ChangeCHV :
      if (CurrExports->card_change_chv == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(ChangeCHVSWI,r);
      break;

    case SCInterface_EnableCHV :
      if (CurrExports->card_enable_chv == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(EnableCHVSWI,r);
      break;

    case SCInterface_UnBlockCHV :
      if (CurrExports->card_unblock_chv == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(UnBlockCHVSWI,r);
      break;

    case SCInterface_FileInfo :
      if (CurrExports->card_get_response == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(FileInfoSWI,r);
      break;

    case SCInterface_InternalAuth :
      if (CurrExports->card_internal_auth == NULL)
        r->r[0] = SC_NOTIMPLEMENTED;
      else
        machine(InternalAuthSWI,r);
      break;

    case SCInterface_Status :
      machine(StatusSWI,r);
      break;
  }
  return (NULL);

  NOT_USED( pw);
}

/******************************************************************************
  copy the values in r_old into r_new only r0-r10
 ******************************************************************************/
void _copy_regs(_kernel_swi_regs *r_new, _kernel_swi_regs *r_old)
{
  int i=9;
  do { r_new->r[i] = r_old->r[i]; } while (i--);
}

/******************************************************************************
  retrieve the cards ATR and try to obtain a match against the table of known
  ATRs

  sets CurrExports if ATR matched.

  will return SC_SUCCESS if ATR matches, SCFS otherwise
 ******************************************************************************/
int get_atr(void)
{
  int iCard,i;
  int iMisMatch;
  int ret;

  ret=sctransport_retrieve_atr(card_handle,ATR.hist,sizeof(ATR.hist),&ATR.len);
#ifdef debug
  printf("SCINTERFACE: ATR length %d ret %d\n",ATR.len,ret);
#endif
#ifdef MINIJIS_CARD
  /* if theres no atr then its a minijis :-) */
  if ( ATR.len >=0)
  {
    iCard =3;
    CurrExports = CardExports[iCard];
    current_card_type = iCard;
    return (SC_SUCCESS);
  }
#endif
  if (ret == SCI_SUCCESS)
  {
    for (iCard=0; iCard<SUPPORTED_CARDS; iCard++)
    {
      iMisMatch = 0;
      i=0;
      while (i<CardExports[iCard]->card_atr->significant && !iMisMatch)
      {
        if (ATR.hist[i]!=CardExports[iCard]->card_atr->hist[i])
          iMisMatch++;
        i++;
      }

      if (iMisMatch == 0)
      {
        CurrExports = CardExports[iCard];
        current_card_type = iCard;
        return (SC_SUCCESS);
      }
    }
  }
  return (SC_UNDERSTAND);
}

/******************************************************************************
  attempt to open a smart card connection

  will return SC_SUCCESS for success, SC_TRANSPORT for SCTransport errors,
  SC_UNDERSTAND for unrecognised card.
 ******************************************************************************/
int open_card(void)
{
  int ret;
  int err;

  current_card_type = -1;
  CurrExports = NULL;

  ret = sctransport_open(1,&card_handle);
#ifdef debug
  printf("SCINTERFACE: open card channel result %d\n", ret);
#endif
  if (ret==SCI_FAIL)
  {
    err = sctransport_error(card_handle);
#ifdef debug
    printf("SCINTERFACE: open card channel returned error %d\n", err);
#endif
    if (err==SCI_FAIL)
      return (SC_TRANSPORT);
  }

#ifdef debug
  printf("SCINTERFACE: opened card channel %d\n",card_handle);
#endif
#ifdef wibble
  ret =sctransport_start_trans( card_handle);
  if (ret==SCI_FAIL)
  {
    err = sctransport_error(card_handle);
    if (err==SCI_FAIL)
      return (SC_TRANSPORT);
  }
#endif
#ifdef debug
  printf("SCINTERFACE: started transport (ret:%d)\n", ret);
#endif

  if (ret==SCI_FAIL && err!=SCI_E_OUT)
  {
#ifdef debug
    printf("SCINTERFACE: don't understand card\n");
#endif
    card_handle = -1;
    return (SC_UNDERSTAND);
  }

  return (SC_SUCCESS);
}

/******************************************************************************
  does a read response into the given data area and checks the response
  codes against the ones given. Returns success if response codes match.
  response code should be -1 to ignore.
 ******************************************************************************/
int handle_response(BYTE *card_data, int data_len, int *length, BYTE resp[2])
{
  int ret;
  int i,j;
  int swA;
  int swB;
  int req_match;

  ret=sctransport_read_response(card_handle,card_data,data_len,length,resp);
  if (ret != SCI_SUCCESS)
  {
    ret = sctransport_error(card_handle);
#ifdef debug
    printf("SCINTERFACE: sctransport_error %d (0x%x)\n",ret,ret);
#endif
    if (ret != SCI_E_TRUNC) /* ignore truncation errors */
      return (SC_TRANSPORT);
  }

#ifdef debug
  printf("SCINTERFACE: received response %02x %02x\n",resp[0],resp[1]);
#endif
  /* printf("  Received response %02x %02x\n", resp[0], resp[1]); */

  swA = resp[0]<<8 | resp[1];

  for (i=0; i<CurrExports->card_num_responses; i++)
  {
    int match = 0;
    j=16;
    req_match = CurrExports->card_responses[i].sw>>16 & 0xff;
    swB = CurrExports->card_responses[i].sw & 0xffff;

    do
    {
      j-=4;
      if ((swB>>j & 0xf) == (swA>>j & 0xf))
        match++;
      else
        break;
    } while (j);
    if (match >= req_match)
      return (CurrExports->card_responses[i].err);
  }
#ifdef debug
  printf("SCINTERFACE: response 0x%x unknown\n",swA);
#endif
  /* printf("  Unknown response.\n"); */

  return (SC_UNKNOWNRESP);
}
