/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 * Provide functions for manipulating files on an schlumb smart card.
 *
 * Modification History
 *---------------------
 *
 * 05-Sep-96  RWB,  Created
 *
 */
#include "kernel.h"
#include "string.h"
#include "module.h"
#include "scinter.h"
#include "sctrans.h"

extern int ChimpanzeeClassByte;

/*
 * prototypes of exported functions to go in table
 */
static int _schlumb_initialise_table(void);
static int _schlumb_select_root(int card_handle);
static int _schlumb_select(int card_handle, int file_id);
static int _schlumb_read(int card_handle, int offset, int len);
static int _schlumb_write(int card_handle, int offset, BYTE *data, int len);
static int _schlumb_verify_chv(int card_handle, int access_condition,char *code,
       	   int code_len);
static int _schlumb_change_chv(int card_handle, int access_condition,
       	   char *code, int code_len, char *new_code, int new_code_len);
static int _schlumb_enable_chv(int card_handle,int access_condition,int enable,
       	   char *code, int code_len);
static int _schlumb_unblock_chv(int card_handle,int access_condition,
       	   char *unblock_code, int unblock_code_len,
      	   char *new_code, int new_code_len);
static int _schlumb_get_response(int card_handle, int len);
static int _schlumb_internal_auth(int card_handle, int key, BYTE *challange,
       	   int challenge_len);

/*
 * exported function table
 */
t_card_exports schlumb_exports = {
  _schlumb_initialise_table,
  _schlumb_select_root,                               /* exported functions */
  _schlumb_select,
  0,
  0,
  _schlumb_read,
  _schlumb_write,
  _schlumb_verify_chv,
  _schlumb_change_chv,
  _schlumb_enable_chv,
  _schlumb_unblock_chv,
  _schlumb_get_response,
  _schlumb_internal_auth,
  255,                                              /* chunk size in bytes */
  0,
  0,
  0
};

/*
 * smart card ATR to match against
 */
static t_card_atr schlumb_atr = {0x07,    /* Manufacturer */
       		  	         0x0,     /* OS code */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  		       	          15,     /* ATR length */
  		       	          2};	  /* significant bytes in ATR */

/*
 * table mapping card response codes to ones we need to know about, structure
 * of this table is as follows.
 *
 * SCInterface error code, response match
 *
 * where response match is encoded as :
 * 	bits 16-23 : number of nibbles to match
 *	bits  8-15 : MSB of card response code
 *	bits  0-7  : LSB of card response code
 */
static t_card_resp schlumb_response[] = {
  SC_SUCCESS,         0x049000,
  SC_SUCCESS,         0x029f00,
  /* application independent error messages */
  SC_P1P2INVALID,     0x046b00,
  SC_P3INVALID,       0x026700,
  /* status values for storage management */
  SC_SUCCESS,         0x039200,
  SC_SPACE,           0x049210,
  SC_EXISTS,          0x049220,
  SC_STORAGE,         0x049240,
  /* status values for pointer management */
  SC_NOSELECT,        0x049400,
  SC_NOTVALID,        0x049402,
  SC_NOTFOUND,        0x049404,
  SC_INCONSIST,       0x049408,
  /* status values for security management */
  SC_NOACCESSCODE,    0x049802,
  SC_FAILACCESSCODE,  0x049804,
  SC_NOACCESSCHANGE,  0x049808,
  SC_BLOCKEDACCESS,   0x049840,
  SC_TECHPROBLEM,     0x026f00,
  SC_WRONGCLASS,      0x046e00
};

/*
 * perform static table initialisation as the compiler will not let this happen
 * when compiling -zM
 */
static int
_schlumb_initialise_table(void)
{
  schlumb_exports.card_atr = &schlumb_atr;
  schlumb_exports.card_responses = schlumb_response;
  schlumb_exports.card_num_responses = sizeof(schlumb_response)/sizeof(t_card_resp);

  return (SC_SUCCESS);
}

/*
 * select root directory (master file)
 */
static int
_schlumb_select_root(int card_handle)
{
  return (_schlumb_select(card_handle,0x3f00));
}

/*
 * select specified directory
 */
static int
_schlumb_select(int card_handle, int file_id)
{
  BYTE hdr[4];
  BYTE data[2];
  int exp_len = 0;

  debug_printf(db,"Schlum select 0x%x\n",file_id);

  hdr[0] = 0xa0;
  hdr[1] = 0xa4;
  hdr[2] = 0x00;
  hdr[3] = 0x00;

  data[0] = file_id / 256;
  data[1] = file_id % 256;

  return sctransport_issue_command (card_handle, hdr, 2, data, exp_len);
}

/*
 * read a chunk of data from the card
 */
static int
_schlumb_read(int card_handle, int offset, int len)
{
  BYTE hdr[4];

  debug_printf(db,"Schlum read %d bytes\n",len);

  hdr[0] = 0xa0;
  hdr[1] = 0xb0;
  hdr[2] = offset / 256;
  hdr[3] = offset % 256;

  return sctransport_issue_command (card_handle, hdr, 0, 0, len);
}

/*
 * write a chunk of data to the card
 */
static int
_schlumb_write(int card_handle, int offset, BYTE *data, int len)
{
  BYTE hdr[4];

  debug_printf(db,"Schlum write %d\n",len);

  hdr[0] = 0xa0;
  hdr[1] = 0xd6;
  hdr[2] = offset / 256;
  hdr[3] = offset % 256;

  return sctransport_issue_command(card_handle, hdr, len, data, 0);
}

/*
 * submit a CHV password to the card for verification
 */
static int
_schlumb_verify_chv(int card_handle, int access_condition,
		     char *code, int code_len)
{
  BYTE hdr[4];
  BYTE data[8];

  debug_printf(db,"Schlum verify chv %d\n",access_condition);

  hdr[0] = 0xa0;
  hdr[1] = 0x20;
  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (code_len>sizeof(data)) code_len = sizeof(data);
  memcpy(data,code,code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * submit existing CHV and a new CHV to the card for change
 */
static int
_schlumb_change_chv(int card_handle, int access_condition,
       	   char *code, int code_len, char *new_code, int new_code_len)
{
  BYTE hdr[4];
  BYTE data[16];

  hdr[0] = ChimpanzeeClassByte;
  hdr[1] = 0x24;
  hdr[2] = 0;
  hdr[3] = access_condition;

  debug_printf(db,"Schlum change chv\n");

  memset(data,0xff,sizeof(data));
  if (code_len>(sizeof(data)/2)) code_len = sizeof(data)/2;
  if (new_code_len>(sizeof(data)/2)) new_code_len = sizeof(data)/2;
  memcpy(data,code,code_len);
  memcpy(data+8,new_code,new_code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * enable or disable the chv password checking
 */
static int
_schlumb_enable_chv(int card_handle, int access_condition, int enable,
		   char *code, int code_len)
{
  BYTE hdr[4];
  BYTE data[8];

  debug_printf(db,"Schlum enable chv\n");

  hdr[0] = 0xa0;
  if (enable)        /* enable */
    hdr[1] = 0x28;
  else               /* disable */
    hdr[1] = 0x26;

  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (code_len>sizeof(data)) code_len = sizeof(data);
  memcpy(data,code,code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * reset the CHV blocking counter and optionally set a new password
 */
static int
_schlumb_unblock_chv(int card_handle, int access_condition,
       	   char *unblock_code, int unblock_code_len,
      	   char *new_code, int new_code_len)
{
  BYTE hdr[4];
  BYTE data[16];

  debug_printf(db,"Schlum unblock chv %d : ",access_condition);

  hdr[0] = ChimpanzeeClassByte;
  hdr[1] = 0x2C;
  hdr[2] = 0;
  hdr[3] = access_condition;

  memset(data,0xff,sizeof(data));
  if (unblock_code_len>(sizeof(data)/2)) unblock_code_len = sizeof(data)/2;
  if (new_code_len>(sizeof(data)/2)) new_code_len = sizeof(data)/2;
  memcpy(data,unblock_code,unblock_code_len);
  memcpy(data+8,new_code,new_code_len);

  return sctransport_issue_command(card_handle, hdr, sizeof(data), data, 0);
}

/*
 * get the response data giving file information following a successful select
 * command
 */
static int
_schlumb_get_response(int card_handle, int exp_len)
{
  BYTE hdr[4];

  debug_printf(db,"Schlum get response (len %d)",exp_len);

  hdr[0] = 0xa0;
  hdr[1] = 0xc0;
  hdr[2] = 0;
  hdr[3] = 0;

  return sctransport_issue_command (card_handle, hdr, 0, 0, exp_len);
}

/*
 * send a challenge to the smart card to resieve a response
 */
static int
_schlumb_internal_auth(int card_handle, int key, BYTE *challenge,
		      int challenge_len)
{
  BYTE hdr[4];

  hdr[0] = 0xa0;
  hdr[1] = 0x88;
  hdr[2] = 0;
  hdr[3] = key;

  return sctransport_issue_command(card_handle,hdr,challenge_len,challenge,0);
}
