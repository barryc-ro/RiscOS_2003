/************************************************************************/
/*                  Copyright 1998 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <ctype.h>
#include "swis.h"
#include "constants.h"
#include "sctrans.h"

char *progname ="scitest";
static char kbuff [ 256];

#ifndef FALSE
#define FALSE 0
#endif

#ifndef ERROR
#define ERROR -1
#endif

#ifndef SUCCESS
#define SUCCESS TRUE
#endif

#ifndef FAILURE
#define FAILURE FALSE
#endif

/* reported from swis and events */
#define SC_SUCCESS        (0x0)   /* command successful */

/* reported from swis only */
#define SC_NOCARD	  (0x01)   /* smart card not inserted */
#define SC_FORMAT	  (0x02)   /* file path format error */
#define SC_NESTED	  (0x03)   /* too many nexted subdirectories */
#define SC_UNDERSTAND	  (0x04)   /* do not understand inserted card */
#define SC_BUSY		  (0x05)   /* still processing previous command */
#define SC_RESERVED	  (0x06)   /* smart card reserved filename specified */
#define SC_NOTIMPLEMENTED (0x07)   /* command not implemented on this card */

/* reported from events only */
#define SC_NOTFOUND       (0x10)   /* requested file not found */
#define SC_TRANSPORT	  (0x11)   /* error returned from SCTransport */
#define SC_SPACE	  (0x12)   /* not enough space to fit requested data */
#define SC_EXISTS	  (0x13)   /* file already exists */
#define SC_STORAGE	  (0x14)   /* storage problem */
#define SC_NOSELECT	  (0x15)   /* no file selected */
#define SC_NOTVALID	  (0x16)   /* outside valid area */
#define SC_INCONSIST	  (0x17)   /* file type is inconsistant with command */
#define SC_UNKNOWNRESP    (0x18)   /* unknown response code returned */
#define SC_P1P2INVALID    (0x19)   /* incorrect parameter values p1,p2 */
#define SC_P3INVALID	  (0x1a)   /* incorrect parameter value p3 */
#define SC_TECHPROBLEM	  (0x1b)   /* technical problem with no diagnostics */
#define SC_WRONGCLASS	  (0x1c)   /* wrong instruction class */

/* reported from events and relating to access conditions */
#define SC_NOACCESSCODE	  (0x20)   /* no access code defined */
#define SC_FAILACCESSCODE (0x21)   /* failed access code verification */
#define SC_NOACCESSCHANGE (0x22)   /* change CHV not possible */
#define SC_BLOCKEDACCESS  (0x23)   /* CHV failure counter has blocked */
#define SC_NEVERACCESS	  (0x24)   /* file has NVR access defined */

/* new codes for MiniJIS */
#define SC_CORRUPTED      (0x25)   /* part of returned data corrupted */
#define SC_LEFAILED       (0x26)   /* file record failed before Le bytes */
#define SC_NOINFO         (0x27)   /* no informtaion */
#define SC_NCHANGEEPROM   (0x28)   /* no change of eeprom condition */
#define SC_WRITEERROR     (0x29)   /* write error of eeprom */
#define SC_LENGTHWRONG    (0x2a)   /* length is wrong */
#define SC_CHANNOTSUPP    (0x2b)   /* theoretical channel is not supported */
#define SC_NOCOMPAT       (0x2c)   /* no compatibility beteen structure of file and command */
#define SC_SECUREMNS      (0x2d)   /* sucure messaging is not supported */
#define SC_CHECKDNE       (0x2e)   /* check data is not effective  */
#define SC_INCONLCTLV     (0x2f)   /* LC and TLV structure are not consistent */
#define SC_INVLCP1P2      (0x30)   /* Lc and P1-P2 invalid */
#define SC_INSINV         (0x31)   /* INS is not provided or not effective */

#define SCInterface_Read      0x4d342
#define SCInterface_Write     0x4d343
#define SCInterface_GetATR    0x4d344
#define SCInterface_ChangeCHV 0x4d345
#define SCInterface_FileInfo  0x4d348

typedef struct
{
  char *err;     /* SCInterface error number */
  int 	sw;      /* match qualtity plus two byte response code */
} t_card_resp;

static t_card_resp response[] =
{
  "SC_SUCCESS",        SC_SUCCESS,  /* Success */
  "SC_CORRUPTED",      SC_CORRUPTED,  /* part of returned data corrupted */
  "SC_LEFAILED",       SC_LEFAILED,  /* file/record failed before Le bytes */
  "SC_NOINFO",         SC_NOINFO,  /* no information */
  "SC_BLOCKEDACCESS",  SC_BLOCKEDACCESS,  /* counter X times */
  "SC_NCHANGEEPROM",   SC_NCHANGEEPROM,  /* no change of eeprom condition */
  "SC_WRITEERROR",     SC_WRITEERROR,  /* write error of eprom (memory failed) */
  "SC_LENGTHWRONG",    SC_LENGTHWRONG,  /* length is wrong */
  "SC_CHANNOTSUPP",    SC_CHANNOTSUPP,  /* theoretical channel is not supported */
  "SC_SECUREMNS",      SC_SECUREMNS,  /* sucure messaging is not supported */
  "SC_NOCOMPAT",       SC_NOCOMPAT,  /* no compatibility beteen structure of file and command */
  "SC_FAILACCESSCODE", SC_FAILACCESSCODE,  /* the conditions of security status is not satisfied */
  "SC_CHECKDNE",       SC_CHECKDNE,  /* check data is not effective */
  "SC_FAILACCESSCODE", SC_FAILACCESSCODE,  /* usage condition not satisfied */
  "SC_NOTIMPLEMENTED", SC_NOTIMPLEMENTED,  /* function is not supported */
  "SC_NOTFOUND",       SC_NOTFOUND,  /* file not found */
  "SC_NOTFOUND",       SC_NOTFOUND,  /* record not found */
  "SC_INCONLCTLV",     SC_INCONLCTLV,  /* LC and TLV structure are not consistent */
  "SC_P1P2INVALID",    SC_P1P2INVALID,  /* invalid P1 and P2 */
  "SC_INVLCP1P2",      SC_INVLCP1P2,  /* Lc and P1-P2 invalid */
  "SC_INSINV",         SC_INSINV,  /* INS is not provided or not effective */
  "SC_WRONGCLASS",     SC_WRONGCLASS,  /* Class not provided */
  "EOT",               -99
};

typedef struct _sc_record
{
  char tag;
  char length;
  char data[25];
} sc_record;

sc_record sc_records[7];
char itoa_str[10];

/******************************************************************************
  display an error returned from a swi
 */
static int err ( _kernel_oserror *e)
{
  if ( e)
  {
    printf ( "error: %d %s\n", e -> errnum, e -> errmess);
    return TRUE;
  }
  return FALSE;
}

/*****************************************************************************
 * copy an array
 */
void bcpy ( char *dest, char *src, int len)
{
  int n;

  for ( n=0; n<len; n++)
    dest [ n] =src [ n];
}

/******************************************************************************
  test for key press using OS_Byte
 */
int readkey ( int delay)
{
  _kernel_swi_regs in,
                   out;
  in.r [ 0] =129;
  in.r [ 1] =delay%100;
  in.r [ 2] =delay/100;
  err ( _kernel_swi( OS_Byte, &in, &out));

  return out.r [ 1];
}

/****************************************************************************/
char *itoa ( int i)
{
  sprintf ( itoa_str, "%d", i);
  return itoa_str;
}

/****************************************************************************
  convert a hex number in a string, into an integer
 */
int hexstr_int ( char *str)
{
  int   value  =0,
        offset = strlen ( str),
        shift  = 0;
  char *hex    = "0123456789abcdef";

  if ( offset <1)
    return 0;

  offset --;
  while (( offset >=0) && ( strchr ( hex, str [ offset]) !=NULL))
  {
    value  += ((strchr ( hex, str [ offset]) - hex) << shift);
    shift  +=4;
    offset --;
  }

  return value;
}

/******************************************************************************/
void make_ub ( char *userb)
{
  int n;

  for ( n=0; n<7; n++)
  {
    *(userb +(n*27))   =0x80 +n;
    *(userb +(n*27)+1) =25;
    switch ( n)
    {
      case 0:
        bcpy ( userb +((n*27)+2), "0123456789012345678901234", 25);
        break;
      case 1:
        bcpy ( userb +((n*27)+2), "-22222222222222222222222-", 25);
        break;
      case 2:
        bcpy ( userb +((n*27)+2), "-33333333333333333333333-", 25);
        break;
      case 3:
        bcpy ( userb +((n*27)+2), "-44444444444444444444444-", 25);
        break;
      case 4:
        bcpy ( userb +((n*27)+2), "-55555555555555555555555-", 25);
        break;
      case 5:
        bcpy ( userb +((n*27)+2), "-66666666666666666666666-", 25);
        break;
      case 6:
        bcpy ( userb +((n*27)+2), "-77777777777777777777777-", 25);
        break;
    }
  }
}

/******************************************************************************/
/* display the contents of a buffer */
void print_buff ( char *buff, int recs)
{
  int i,n;

  for ( n=0; n<recs; n++)
  {
    printf ( "Tag: %x ", buff [(n*27)]);
    printf ( "Len: %d ", buff [(n*27)+1]);
    printf ( "Data: ");
    for ( i =2; i<27; i++)
    {
      if (( buff [(n*27)+i]>=32) && ( buff [(n*27)+i]<127))
        printf ( "%c", buff [(n*27)+i]);
      else
        printf ( "[%x]", buff [(n*27)+i]);
    }
    printf ( "\n");
  }
  printf ( "\n");
}


/*****************************************************************************
 *
 */
static char *response_msge ( int err)
{
  int index =0;

  do
  {
    if ( response [ index].sw == err)
      return response [ index].err;
    index++;
  }  while ( response [ index].sw !=-99);

  return "SC_UNKNOWNRESP";
}

/*****************************************************************************
  terminate a string with a NULL
 */
void terminate ( char *str)
{
  int count =0;

  while ( str [ count] >=32)
    count ++;
  str [ count] =0;
}

/*****************************************************************************
  read an integer from the command line
 */
int read_int ( void)
{
  _kernel_swi_regs r;

  kbuff [ 0] =NULL;
  r.r [ 0] =( int)kbuff|(unsigned int)1<<31;
  r.r [ 1] =256;
  r.r [ 2] =32;
  r.r [ 3] =127;
  r.r [ 4] =0;
  err ( _kernel_swi( OS_ReadLine, &r, &r));

  terminate ( kbuff);
  if ( kbuff [ 0] =='&')
    return hexstr_int ( kbuff +1);

  return atoi ( kbuff);
}

/*****************************************************************************
  read a string from the command line
 */
char *read_str ( char *buff, int len)
{
  _kernel_swi_regs r;

  kbuff [ 0] =NULL;
  buff  [ 0] =NULL;
  r.r [ 0] =( int)buff|(unsigned int)1<<31;
  r.r [ 1] =len;
  r.r [ 2] =32;
  r.r [ 3] =127;
  r.r [ 4] =0;
  err ( _kernel_swi( OS_ReadLine, &r, &r));

  terminate ( buff);
  return buff;
}

/*****************************************************************************/
static int cstimer ( void)
{
  _kernel_swi_regs r;

  _kernel_swi ( OS_ReadMonotonicTime, &r, &r);
  return r.r [ 0];
}

/*****************************************************************************/
static void waitcs ( int cs)
{
  int tnow;

  tnow =cstimer();
  while ( cstimer () <tnow +cs);
}

/****************************************************************************
  return a pointer to a string for a given error number
 */
char *err_to_str(int err)
{
  switch (err)
  {
    case SCI_E_SEQ :
      return "Function called out of sequence";
    case SCI_E_INVAL :
      return "Argument(s) invalid";
    case SCI_E_NODATA :
      return "No response data available";
    case SCI_E_TRANS :
      return "Card has been locked";
    case SCI_E_TRUNC :
      return "Buffer not long enough";
    case SCI_E_SYS :
      return "Unexpected error returned";
    case SCI_E_API :
      return "Error detected within the API";
    case SCI_E_TOOMANY :
      return "Limit on number connections exceeded";
    case SCI_E_PROTO:
      return "Smart card protocol error";
    case SCI_E_COMMS:
      return "Comms error with card reader";
    case SCI_E_OUT:
      return "Card removed";

    default :
      return (char*)"Unknown error";
  }
}

char *getmem ( int bytes)
{
  return (( char *) malloc ( bytes * sizeof ( char)));
}

void fmem ( char *mem)
{
  free (( void *) mem);
}

/****************************************************************************
    purpose: returns a sub-string (refered to by a number and separator) from
             a string.
             eg. with str ="mary had a little_lamb"
                        c ="_ "
                        n =4
             would return with sub="little"
  variables: str - pointer to string containing sub-string
             sub - pointer to string to return sub-string in
             c   - pointer to string containing separators
             n   - the number of the sub-string to be copied (from 1)
    returns: returns ERROR if an error occured
             else returns TRUE;
 ****************************************************************************/
int sub_string ( char *str, char *sub, char *c, int n)
{
  int  current_word =0;
  char *tmp_wrd,
       *tmp_str = getmem ( strlen ( str) +1);

  if ( tmp_str ==NULL)
    return ERROR;

  strcpy ( tmp_str, str);
  tmp_wrd = strtok ( tmp_str, c);
  if ( tmp_wrd ==NULL)
  {
    fmem ( tmp_str);
    return ERROR;
  }
  else
    current_word ++;

  while (( current_word !=n) && (( tmp_wrd = strtok ( NULL, c)) !=NULL))
    current_word ++;

  if ( current_word == n)
  {
    strcpy ( sub, tmp_wrd);
    fmem ( tmp_str);
    return TRUE;
  }
  fmem ( tmp_str);
  return ERROR;
}

/******************************************************************************/
char *ipstoipb ( char *ips, char *ipb)
{
  char tmp [ 10];

  sub_string ( ips, tmp, ".", 1);
  ipb[0] =atoi ( tmp);
  sub_string ( ips, tmp, ".", 2);
  ipb[1] =atoi ( tmp);
  sub_string ( ips, tmp, ".", 3);
  ipb[2] =atoi ( tmp);
  sub_string ( ips, tmp, ".", 4);
  ipb[3] =atoi ( tmp);

  return ipb;
}

/******************************************************************************/

void padpin(char *pin)
{
  int len = strlen(pin);
  if (len < 8)
  {
    memset(pin + len, 0xff, 8 - len);
    pin[8] = 0;
  }
}

/******************************************************************************/
void add_record ( char *buff, int *offset, int tag, int length, char *record)
{
  *(buff +(*offset)) =tag;
  *offset +=1;
  *(buff +(*offset)) =length;
  *offset +=1;
  bcpy ( buff +(*offset), record, length);
  *offset +=length;
}

/******************************************************************************/
int readin_fields ( char *card_buff)
{
  int card_type =0,   /* MiniJIS or JICSAP */
      card_function,
      buff_offset =0;
  char tmp [ 256], ipn [ 30];

  printf ( "\n    Make Card\n");
  printf ( "Card function 1=ID Card 2=URL Card: ");
  card_function =read_int ();

  itoa ( card_type & 0xff);
  tmp [ 0] =itoa_str[0];

  itoa ( card_function & 0xff);
  tmp [ 1] =itoa_str[0];

  if ( card_function ==2)
    tmp [ 2] ='0';
  else
    tmp [ 2] ='2';

  tmp [ 3] ='0';
  tmp [ 3] =0;
  add_record ( card_buff, &buff_offset, 0x80, 4, tmp);

  if ( card_function ==2)
  {
    printf ( "URL: ");
    read_str ( tmp, 200);
    add_record ( card_buff, &buff_offset, 0x8b, strlen ( tmp), tmp);
    return buff_offset;
  }

  printf ( "Phone number: ");
  read_str ( tmp, 50);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x81, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Account ID: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x82, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Account Password: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x83, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "DNS 1 (IP Number): ");
  read_str ( tmp, 15);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x84, 4, ipstoipb ( tmp, ipn));
  else
    printf ( "Ignored\n");

  printf ( "DNS 2 (IP Number): ");
  read_str ( tmp, 15);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x85, 4, ipstoipb ( tmp, ipn));
  else
    printf ( "Ignored\n");

  printf ( "Email ID: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x86, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Email Password: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x87, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Email Address: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x88, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "POP Server: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x89, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "SMTP Server: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x8a, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Gateway: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x8c, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Proxy: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x8d, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Time Server: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x8e, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  printf ( "Web Mail URL: ");
  read_str ( tmp, 200);
  if ( tmp[0] >31)
    add_record ( card_buff, &buff_offset, 0x8f, strlen ( tmp), tmp);
  else
    printf ( "Ignored\n");

  return buff_offset;
}

/****************************************************************************
  display the main menu
 */
void display_mm ( void)
{
  printf ( "\n    Smart card test program\n");
  printf ( "    1 - Change PIN\n");
  printf ( "    2 - Read\n");
  printf ( "    3 - Write\n");
  printf ( "    4 - Pin Counter\n");
  printf ( "    5 - Make Card\n");
  printf ( "    6 - Read Loop\n");
  printf ( "    C - Clear Screen\n");
  printf ( "    X - Exit\n");
}

/****************************************************************************
  clear the screen
 */
void cls( void)
{
  _kernel_swi_regs r;
  _kernel_swi( OS_WriteI|12, &r, &r);
}

/****************************************************************************
  main loop
 */
int main(int argc, char* argv[])
{
  _kernel_swi_regs r;
  char buff [ 1024];
  char pin1 [ 10], pin2 [ 10];
  int n, i, key, quit =FALSE, result, fnum;

  printf ( "Enter password (00000000): ");
  read_str ( pin1, 8);
  if ( pin1[0] < 32)
    strcpy ( pin1, "00000000");
  padpin(pin1);

  for ( n=0; n<512; n++)
    buff [ n] ='\0';
  r.r [ 0] =0;
  r.r [ 1] =0x1a;
  r.r [ 2] =n;
  r.r [ 3] =( int)buff;
  r.r [ 4] =27*6;
  r.r [ 5] =( int)pin1;
  r.r [ 6] =strlen(pin1);
  r.r [ 7] =0;
  err ( _kernel_swi( SCInterface_Read, &r, &r));
  printf ( "Called SCInterface_Read (%x)\n", SCInterface_Read);
  display_mm ();

  while ( quit ==FALSE)
  {
    key =readkey ( 1);
    switch ( key)
    {
      case 49: /* 1 - Change PIN */
        printf ( "Old pin (%s): ", pin1);
        read_str ( buff, 8);
        if ( buff[0] <32)
          printf ( "Using %s\n", pin1);
        else
        {
          strcpy ( pin1, buff);
      	  padpin(pin1);
      	}
      	  
        printf ( "New pin: ");
        read_str ( pin2, 8);
        printf ( "File number (0x14): ");
        fnum = read_int ();
        if (fnum == 0)
          fnum = 0x14;

    	padpin(pin2);

        printf ( "PIN1:   '%s'\n", pin1);
        printf ( "PIN2:   '%s'\n", pin2);
        printf ( "FILE: 0x'%x'\n", fnum);

        r.r [ 0] =0;
        r.r [ 1] =( int)fnum;
        r.r [ 2] =1;
        r.r [ 3] =( int)pin1;
        r.r [ 4] =strlen ( pin1);
        r.r [ 5] =( int)pin2;
        r.r [ 6] =strlen ( pin2);
        
        err ( _kernel_swi( SCInterface_ChangeCHV, &r, &r));
        printf ( "Result: %s\n", response_msge ( r.r[0]));
        strcpy ( pin1, pin2);
        break;

      case 50: /* 2 - read */
        for ( n=0; n<512; n++)
          buff [ n] ='\0';
        r.r [ 0] =0;
        r.r [ 1] =0x1a;
        r.r [ 2] =n;
        r.r [ 3] =( int)buff;
        r.r [ 4] =27*6;
        r.r [ 5] =( int)pin1;
        r.r [ 6] =strlen(pin1);
        r.r [ 7] =0;
        err ( _kernel_swi( SCInterface_Read, &r, &r));
        printf ( "Wait...\n");
        waitcs ( 100*3);
        printf ( "Result: %s\n", response_msge ( r.r[0]));
        printf ( "Length: %d\n", r.r[4]);
        print_buff ( buff, 6);
        break;

      case 51: /* 3 - write */
        make_ub ( buff);
        r.r [ 0] =0;
        r.r [ 1] =0x1a;
        r.r [ 2] =n;
        r.r [ 3] =(int)buff;
        r.r [ 4] =6*27;
        r.r [ 5] =( int)pin1;
        r.r [ 6] =strlen(pin1);
        err ( _kernel_swi( SCInterface_Write, &r, &r));
        printf ( "Result: %s\n", response_msge ( r.r[0]));
        break;

      case 52: /* 4 - pin counter */
        i =-99;
        r.r [ 0] =(int)&i;
        err ( _kernel_swi( SCInterface_FileInfo, &r, &r));
        printf ( "Result: %s\n", response_msge ( r.r[0]));
        printf ( "Wait...\n");
        waitcs ( 300);
        printf ( "Pin counter: %d\n", i);
        break;

      case 53: /* 5 - make a card */
        for ( n=0; n<1023; n++)
          buff [ n] ='\0';
        i =readin_fields ( buff);
        r.r [ 0] =0;
        r.r [ 1] =0x1a;
        r.r [ 2] =n;
        r.r [ 3] =(int)buff;
        r.r [ 4] =i;
        r.r [ 5] =( int)pin1;
        r.r [ 6] =strlen(pin1);
        err ( _kernel_swi( SCInterface_Write, &r, &r));
        printf ( "Result: %s\n", response_msge ( r.r[0]));
        break;

      case 54: /* 6 - read loop */
        while (( key !=88) && ( key !=120))
        {
          for ( n=0; n<512; n++)
            buff [ n] ='\0';
          r.r [ 0] =0;
          r.r [ 1] =0x1a;
          r.r [ 2] =n;
          r.r [ 3] =( int)buff;
          r.r [ 4] =27*6;
          r.r [ 5] =( int)pin1;
          r.r [ 6] =strlen(pin1);
          r.r [ 7] =0;
          err ( _kernel_swi( SCInterface_Read, &r, &r));
          cls();
          printf ( "\n   Wait");
          key =readkey ( 1);
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".");
          waitcs ( 100*1);
          printf ( ".\n");
          result = r.r[0];
          printf ( "Result: %s\n", response_msge ( r.r[0]));
          if ( result !=SC_SUCCESS)
          {
            printf ( "Loop stopped\n");
            break;
          }
          printf ( "Length: %d\n", r.r[4]);
          print_buff ( buff, 6);
          waitcs ( 100*2);
        }
        break;

      case 99: /* c - clear screen */
      case 67:
        cls();
        display_mm ();
        break;

      case 88: /* X or x */
      case 120:
        printf ( "\nbye\n");
        quit =TRUE;
        break;

      default:
        if ( key !=255)
          printf ( "Invalid selection (%d)\n", key);
        break;
    }
  }
  return (1);
}
