/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __module_h
#define __module_h

#include "debug/remote.h"
#include "kernel.h"

#ifdef REMOTE_DEBUG
extern debug_session *db;
#else
extern void *db;
#endif

/*
 * typedefs and structs
 */
typedef unsigned char BYTE;
typedef int BOOL;
#define TRUE   (1)
#define FALSE  (0)

typedef struct                /* contains a cards ATR */
{
  BYTE  hist[15];
  int	len;                  /* size of the atr */
  int   significant;	      /* number of significant bytes in atr */
} t_card_atr;

typedef struct
{
  int       err;     /* SCInterface error number */
  int 	    sw;      /* match qualtity plus two byte response code */
} t_card_resp;

/*
 * function table containing functions to support smart card commands
 */
typedef struct {
  int (*card_initialise_table)(void);
  int (*card_select_root)(int card_handle);
  int (*card_select)(int card_handle, int file_id);
  int (*card_create)(int card_handle, int file_id, int dir, int file_size,
      int access_condition);
  int (*card_delete)(int card_handle, int file_id);
  int (*card_read)(int card_handle, int offset, int len);
  int (*card_write)(int card_handle, int offset, BYTE *data, int len);
  int (*card_verify_chv)(int card_handle, int access_condition, char *code,
      int code_len);
  int (*card_change_chv)(int card_handle, int access_condition,
      char *code, int code_len, char *new_code, int new_code_len);
  int (*card_enable_chv)(int card_handle, int access_condition, int enable,
      char *code, int code_len);
  int (*card_unblock_chv)(int card_handle, int access_condition,
      char *unblock_code, int unblock_code_len,
      char *new_code, int new_code_len);
  int (*card_get_response)(int card_handle, int len);
  int (*card_internal_auth)(int card_handle, int key, BYTE *challange,
      			    int challenge_len);
  int chunk_size;
  t_card_atr *card_atr;
  t_card_resp *card_responses;
  int card_num_responses;
} t_card_exports;

/*
 * event handling declarations
 */
#define MAX_EVENTS                  (10)     /* size of event queue */
#define EventV	                    (0x10)  /* vector number */
#define Event_Expansion		    (21)    /* event number */
#define Event_Expansion_SCInterface (0)	    /* sub-event numbers */
#define Event_Expansion_SCTransport (1)
#define Service_SCTransportStarting (0xbb)
#define Service_ShutdownComplete    (0x80)
#define Service_Standby		    (0xAD)

/*
 * structure to hold smart card events
 */
typedef struct {int handle; int event; } t_event;

/*
 * states used to within the state machine
 */
typedef enum {WaitingOpen,           /* 0 */
  	      WaitingATR,	     /* 1 */
	      WaitingRemoval,	     /* 2 */
	      Idle,		     /* 3 */
	      SelectingDir,	     /* 4 */
	      SelectingFile,	     /* 5 */
	      GettingResponse,	     /* 6 */
	      GettingAuthResponse,   /* 7 */
	      Creating,		     /* 8 */
	      Deleting,		     /* 9 */
	      ReadingFile,	     /* 10 */
	      WritingFile,	     /* 11 */
	      VerifyingCHV,	     /* 12 */
	      ChangingCHV,	     /* 13 */
	      EnablingCHV,	     /* 14 */
	      UnBlockingCHV,	     /* 15 */
	      WaitingInternalAuth,   /* 16 */
	      WaitingTrans,
	      WaitingStandby
} t_states;

/*
 * transitions used to drive the state machine
 */
typedef enum {Done,                  /* 0 */
	      Error,		     /* 1 */
	      Removed,		     /* 2 */
	      ReStart,		     /* 3 */
	      TransEnd,		     /* 4 */
	      CreateSWI,	     /* 5 */
	      DeleteSWI,	     /* 6 */
	      ReadSWI,		     /* 7 */
	      WriteSWI,		     /* 8 */
	      GetATRSWI,	     /* 9 */
	      ChangeCHVSWI,	     /* 10 */
	      EnableCHVSWI,	     /* 11 */
	      UnBlockCHVSWI,	     /* 12 */
	      FileInfoSWI,	     /* 13 */
	      InternalAuthSWI,	     /* 14 */
	      StatusSWI,	     /* 15 */
	      Shutdown,
	      Standby
} t_transitions;

/*
 * normal module junk
 */
#define ERR_RETURN(err,stmt)   {err = (stmt); if (err) return err;}
#define ERR_GOTO(err,stmt)     {err = (stmt); if (err) goto exit_gracefully;}
#define NOT_USED(v)            ((v)=(v))

#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43


#define ERROR_STRUCT(name,text) \
  struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_##name,text}

#define ERROR_EXTERN(name) extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))

extern t_states state;
extern t_transitions entry_trans;
extern t_card_exports *CardExports[];
extern t_card_exports *CurrExports;
extern int card_handle;
extern t_card_atr ATR;
extern int ChimpanzeeClassByte;
extern int current_card_type;

#ifdef debug
extern char *strNotifications[];
extern char *strState[];
extern char *strTransitions[];
#endif

extern int get_atr(void);
extern int open_card(void);
extern int handle_response(BYTE *card_data, int data_len, int *length, BYTE *resp);
extern void module_notify(int reason,int param);
extern void _copy_regs(_kernel_swi_regs *r_new, _kernel_swi_regs *r_old);

#endif
