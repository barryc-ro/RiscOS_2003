/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef __scinterface_h
#define __scinterface_h

/* ------------------------------------------------------------------------
 * swi:           SCInterface_Create
 *
 * Description:   Create a file/directory on the smart card
 *
 * Input:         r0 -  flags word with bit meanings
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 *		     	  bit 1 : 0 - create file, 1 - create directory
 * 		  r1 -> file path string in the form '/x/y/z' where x,y,z are
 *		     	two byte hex numbers. For example /4e43/0001
 *                r2 -  size of file or directory to create
 *		  r3 -  code access conditions for various operations coded as
 *
 *		     	     	      for files	         for directories
 *		     	  nibble 0 - update            unused
 *			  	 1 - read/seek	       execute
 *				 2 - create            create/extend
 *				 3 - delete            delete
 *				 4 - invalidate	       invalidate
 *				 5 - rehabilitate      rehabilitate
 *
 *			where each nibble is either
 *		     	  0x0 : ALW,  0x1 : CHV1,  0x2 : CHV2
 *			  0xa : ADM1, 0xb : ADM2,  0xc : ADM3
 *			  0xd : ADM4, 0xe : ADM5,  0xf : NEV
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_Create    0x04d340

/* ------------------------------------------------------------------------
 * swi:           SCInterface_Delete
 *
 * Description:   Deletes a file/directory on the smart card.
 * 		  Not yet implemented.
 *
 * Input:         r0 -  flags word with bit meanings
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		  r1 -> file path string in the form '/x/y/z' where x,y,z are
 *		     	two byte hex numbers.
 *		  r2 -> chv access code
 *		  r3 -  number of bytes in CHV access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_Delete    0x04d341


/* ------------------------------------------------------------------------
 * swi:           SCInterface_Read
 *
 * Description:   Reads data from a file on the smart card
 *
 * Input:         r0 -  flags word with bit meaning
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		  r1 -> file path string in the form '/x/y/z' where x,y,z are
 *		     	two byte hex numbers.
 *                r2 -  byte offset into file to start read
 *                r3 -> data area to copy results
 *                r4 -  number of bytes to read
 *		  r5 -> chv access code
 *		  r6 -  number of bytes in CHV access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_Read      0x04d342

/* ------------------------------------------------------------------------
 * swi:           SCInterface_Write
 *
 * Description:   Write data to a file on the smart card
 *
 * Input:         r0 -  flags word with bit meaning
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		  r1 -> file path string in the form '/x/y/z' where x,y,z are
 *		     	two byte hex numbers.
 *                r2 -  byte offset into file to start write
 *                r3 -> data area containg data to write
 *                r4 -  number of bytes to write
 *		  r5 -> chv access code
 *		  r6 -  number of bytes in CHV access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_Write     0x04d343

/* ------------------------------------------------------------------------
 * swi:           SCInterface_GetATR
 *
 * Description:   Returns the smart card ATR used to identify the card and type
 *
 * Input:         r0 -  flags word with bit meaning
 *
 * Returns:       r0 -  return code as documented below
 * 		  r1 -> struct {BYTE hist[15]; int hist_len}
 */
#define  SCInterface_GetATR     0x04d344

/* ------------------------------------------------------------------------
 * swi:           SCInterface_ChangeCHV
 *
 * Description:   Change the access code for a given access condition.
 *
 * Input:         r0 -  flags word with bit meaning
 *
 * 		  r1 -> directory path string in the form '/x/y/z' where x,y,z
 *		     	are two byte hex numbers.
 *		  r2 -  code access conditions
 *			  0x1 : CHV1
 *			  0x2 : CHV2
 *                r3 -> existing access code
 *		  r4 -  number of bytes in existing access code
 *		  r5 -> new access code
 *		  r6 -  number of bytes in new access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_ChangeCHV    0x04d345

/* ------------------------------------------------------------------------
 * swi:           SCInterface_EnableCHV
 *
 * Description:   Enable/disable CHV access code
 *
 * Input:         r0 -  flags word with bit meaning
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		          bit 1 : 0 - disable access code test
 *			      	  1 - enable access code test
 * 		  r1 -> directory path string in the form '/x/y/z' where x,y,z
 *		     	are two byte hex numbers.
 *		  r2 -  code access conditions
 *			  0x1 : CHV1
 *			  0x2 : CHV2
 *	          r3 -> access code
 *		  r4 -  number of bytes in access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_EnableCHV    0x04d346

/* ------------------------------------------------------------------------
 * swi:           SCInterface_UnBlockCHV
 *
 * Description:   Will unblock the CHV access code fail attempt counter
 *
 * Input:         r0 -  flags word with bit meaning
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		  r1 -> directory path string in the form '/x/y/z' where x,y,z
 *		     	are two byte hex numbers.
 *		  r2 -  code access conditions
 *		     	  0x1 : CHV1
 *			  0x2 : CHV2
 *                r3 -> unblock CHV access code
 *		  r4 -  number of bytes in unblock CHV access code
 *		  r5 -> new CHV access code
 *		  r6 -  number of bytes in new CHV access code
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_UnBlockCHV     0x04d347

/* ------------------------------------------------------------------------
 * swi:           SCInterface_FileInfo
 *
 * Description:   Will return a block of data relating to a file or directory.
 * 		  Block is formatted as documented in the Orga manual page 90
 *		  or the InCard manual page 26.
 *
 *                Items of interest to Ant maybe
 *		  	file size = data[2]<<8 | data[3]
 *
 * Input:         r0 -  flags word with bit meaning
 *			  bit 0 : 0 - validate filenames, 1 - ignore validation
 * 		  r1 -> directory path string in the form '/x/y/z' where x,y,z
 *		     	are two byte hex numbers.
 *		  r2 -> data area to copy results
 *                r3 -  size of data area
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_FileInfo     0x04d348

/* ------------------------------------------------------------------------
 * swi:           SCInterface_InternalAuth
 *
 * Description:   Will encrypt a block of data using a specified key number
 * 		  typically this would be a challenge response type thing.
 *
 * Input:         r0 -  flags word with bit meaning
 *		  r2 -  logical key number
 *		  r3 -> challenge
 *		  r4 -  size of challenge
 *		  r5 -> data area to hold response
 *                r6 -  size of data area
 *
 * Returns:       r0 -  return code as documented below
 */
#define  SCInterface_InternalAuth     0x04d349

/* ------------------------------------------------------------------------
 * swi:           SCInterface_Status
 *
 * Description:   Will return the current status of the SCInterface module.
 *                To be used in polled mode operation. Performing this swi
 *                will clear the error condition flag.
 *
 * Input:
 *
 * Returns:       r0 -  status word with meaning given by
 */
typedef enum {StatusIdle, StatusNoCard,
              StatusBusy, StatusError} t_interface_status;
/*
 *                r1 -  error status if r0==StatusError
 */
#define  SCInterface_Status     0x04d34a


/*
 * return codes to be found in r0 on exit from the above swis and in r3 on
 * receipt of a SCInterface event.
 */

/* reported from swis and events */
#define SC_SUCCESS        (0x0)   /* command successful */

/* reported from swis only */
#define SC_NOCARD	  (0x01)   /* smart card not inserted */
#define SC_FORMAT	  (0x02)   /* file path format error */
#define SC_NESTED	  (0x03)   /* too many nexted subdirectories */
#define SC_UNDERSTAND	  (0x04)   /* do not understand inserted card */
#define SC_BUSY		  (0x05)   /* still processing previous command */
#define SC_RESERVED	  (0x06)   /* smart card reserved filename specified */
#define SC_NOTIMPLEMENTED (0x07)   /* command not implemented on this card */

/* reported from events only */
#define SC_NOTFOUND       (0x10)   /* requested file not found */
#define SC_TRANSPORT	  (0x11)   /* error returned from SCTransport */
#define SC_SPACE	  (0x12)   /* not enough space to fit requested data */
#define SC_EXISTS	  (0x13)   /* file already exists */
#define SC_STORAGE	  (0x14)   /* storage problem */
#define SC_NOSELECT	  (0x15)   /* no file selected */
#define SC_NOTVALID	  (0x16)   /* outside valid area */
#define SC_INCONSIST	  (0x17)   /* file type is inconsistant with command */
#define SC_UNKNOWNRESP    (0x18)   /* unknown response code returned */
#define SC_P1P2INVALID    (0x19)   /* incorrect parameter values p1,p2 */
#define SC_P3INVALID	  (0x1a)   /* incorrect parameter value p3 */
#define SC_TECHPROBLEM	  (0x1b)   /* technical problem with no diagnostics */
#define SC_WRONGCLASS	  (0x1c)   /* wrong instruction class */

/* reported from events and relating to access conditions */
#define SC_NOACCESSCODE	  (0x20)   /* no access code defined */
#define SC_FAILACCESSCODE (0x21)   /* failed access code verification */
#define SC_NOACCESSCHANGE (0x22)   /* change CHV not possible */
#define SC_BLOCKEDACCESS  (0x23)   /* CHV failure counter has blocked */
#define SC_NEVERACCESS	  (0x24)   /* file has NVR access defined */

#define MAX_SUBDIRS       (4)

/*
 * riscos event numbers used for async notification
 */
#define Event_Expansion		    (21)      /* r0 on receipt of an event */
#define Event_Expansion_SCInterface (0)	      /* r1 on receipt of an event */

/*
 * event reason codes passed in r2 on receipt of a SCInterface event.
 */
#define Event_CardOK      (0) /* card inserted and understood */
#define Event_CardBad     (1) /* card inserted and not understood */
#define Event_CardRemoved (2) /* card has been removed */
#define Event_Complete    (3) /* previous command completed */

#endif
