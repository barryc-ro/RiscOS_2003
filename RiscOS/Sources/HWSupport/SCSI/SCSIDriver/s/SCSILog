;------------------------------------------------------------------------------
;
; RISC OS SCSI log module
;
; Author : R.C.Manby
; © Acorn Computers Ltd
;
; History
;   4-Jul-88: RCM: Started
;
;------------------------------------------------------------------------------

                GBLL true
                GBLL false
true            SETL 1=1
false           SETL 1=0

                GBLL trace
trace           SETL false




Module_BaseAddr

        GET Hdr:ListOpts  ; These first three must be in this order
        GET Hdr:Macros
        GET Hdr:System

        GET Hdr:ModHand
;        GET Hdr:Services
        GET Hdr:File ;amg 24/10/91 - needed for current hdr.newerrors
        GET Hdr:NewErrors
        GET Hdr:NewSpace
;        GET Hdr:Proc
;        GET Hdr:Tokens
;        GET Hdr:DevNos

        GET Hdr:SCSI
        GET Hdr:SCSIErr    ;Insert me in Hdr.NewErrors?
        GET Version


;------------------------------------------------------------------------------
;
; Register names
; ==============
;
;WsPtr          RN 12
StkPtr          RN 13
Link            RN 14
;PC             RN 15


;------------------------------------------------------------------------------
;
; Access to stacked registers - TO BE USED WITH CAUTION!
; ===========================

 ^ 0,StkPtr
StackedR0   # 4
StackedR1   # 4
StackedR2   # 4
StackedR3   # 4
StackedR4   # 4
StackedR5   # 4
StackedR6   # 4
StackedR7   # 4



Podule0SlowAccess       EQU &03240000
PoduleSpeedMask         EQU &00180000


LF      *   10
CR      *   13
SPACE   *   32


;==============================================================================
;
; Macro definitions
; =================
;
;------------------------------------------------------------------------------
;
        MACRO
        MySWI   $swiname
        ASSERT  SCSILog_SWIbase+(.-SCSILog_SWItable)/4 = $swiname
        B       SWI_$swiname
        MEND
;
;
;------------------------------------------------------------------------------
;
        MACRO
        mess    $cond,$s1,$s2,$s3,$s4,$s5
 [ trace
        B$cond  %F11
        BAL     %F21
11
        Push    "LR"
        SWI     OS_WriteS
 [ "$s1"="NL"
 = CR,LF
 |
 = "ScsiLog: $s1"
 ]
 [ "$s2"=""
 |
  [ "$s2"="NL"
  = CR,LF
  |
  = "$s2"
  ]
  [ "$s3"=""
  |
   [ "$s3"="NL"
   = CR,LF
   |
   = "$s3"
   ]
   [ "$s4"=""
   |
    [ "$s4"="NL"
    = CR,LF
    |
    = "$s4"
    ]
    [ "$s5"=""
    |
     [ "$s5"="NL"
     = CR,LF
     |
     = "$s5"
     ]
    ]
   ]
  ]
 ]
        =       0
        ALIGN
        Pull    "LR"
21
 ]
        MEND


        MACRO
        traceswi $s1
        mess , "SWI_SCSI_$s1", NL
        MEND


        MACRO
        tracerc $s1
        mess , "   $s1", NL
        MEND
;
;
;==============================================================================



;==========================================================================
;
; Module start
;
        LEADR Module_LoadAddr

        ASSERT (.=Module_BaseAddr)      ;Winge if we've generated code

SCSILog_SWIbase * Module_SWISystemBase + (SCSILogSWI * Module_SWIChunkSize)
                                            
;amg 24/10/91 added '-Module_BaseAddr' to keep later AASMs happy

        DCD 0                 ; 0  Start - Not an application
        DCD ModInit-Module_BaseAddr           ; 4  Initialisation
        DCD 0                 ; 8  Die (aka Finalisation)
        DCD 0                 ; C  Service
        DCD ModTitleStr-Module_BaseAddr       ; 10 Title
        DCD ModHelpStr-Module_BaseAddr        ; 14 Help string
        DCD 0                 ; 18 Combined Help/* command table
        DCD SCSILog_SWIbase   ; 1C Chunk number of SWIs intercepted (MySWIBase)
        DCD SCSILog_SWIdecode-Module_BaseAddr ; 20 Offset of code to handle SWIs (MySWIDecode)
        DCD SCSILog_SWInames-Module_BaseAddr  ; 24 SWI Decoding table (MySWINames)
        DCD 0                 ; 28 SWI Decoding code
        DCD 0
        DCD 0


ModTitleStr
        DCB     "SCSILog",0
        ALIGN

ModHelpStr
        DCB     "SCSILog",&09,&09,"$VString ($Date)",0
        ALIGN



;==============================================================================
;
; ModInit - Module Initialisation entry
; =======
;
; On entry (in supervisor mode)
;   R10 -> environment string
;   R11  = 0            if loaded from filing system
;        > &03000000    if loaded from a podule and is the base of the podule
;        = 1..&02FFFFFF if being reincarnated and is the number of other
;                       incarnations
;   R12 -> private word (private word <> 0 implies reinitialisation)
;   R13  = supervisor stack pointer (FD stack)
;
; Must preserve processor mode, interrupt state, R7..R11,R13
; Can corrupt R0..R6,R12,R14 and flags
;
; Return by MOV PC,R14 with VC or VS & R0->error
;
ModInit
        mess ,"ModInit",NL
        Push "R10,R11,Link"

        LDR R2,[R12]            ;If reinitialisation,
        TEQ R2,#0               ;
        BNE exitModInit         ; do nothing

        CMP R11,#Podule0SlowAccess      ;Loaded from a podule,
        BHS ModIn_20                    ; R11 is podule base address
        CMP R11,#0
        BNE exitModInit         ;If <>0, new incarnation, do nothing

;
; R11=0, means loaded from filing system, so look for a single digit podule
; number in the environment string (R10 points after the module name).
;
ModIn_10
        LDRB R0,[R10],#1        ;Skip leading spaces
        CMP R0,#" "             ;
        BEQ ModIn_10            ;

        SUBS R0,R0,#"0"         ;Accept "0".."3",
        MOVLT R0,#0             ; assume anything else ("4".."9",non-digit
        CMP R0,#3               ; or unspecified is podule zero).
        MOVGT R0,#0             ;
        MOV R11,#Podule0SlowAccess
        ADD R11,R11,R0,LSL #14

;
; R11 holds the podule base address
; (&03240000, &03244000, &03248000 or &0324C000) (slow access)
; (&032C0000, &032C4000, &032C8000 or &032CC000) (medium access)
; (&03340000, &03344000, &03348000 or &0334C000) (fast access)
; (&033C0000, &033C4000, &033C8000 or &033CC000) (sync. access)
;
ModIn_20
        BIC R11,R11,#PoduleSpeedMask    ;Reduce to slow access address
                                        
        SWI XSCSI_List          ;Ask ScsiDriver for a list of Podule base
        MOVVS R0,#0             ; addresses
        MOV R3,#0

        Push R0
        BVS ModIn_40            ;ScsiDriver not installed (or knows nothing???)
ModIn_30
        LDR R1,[R0],#4          ;Count number of podule addresses in list
        TEQ R1,R11              ; (If R11 is a duplicate of one of the list
        MOVEQ R11,#0            ;   values, kill it).
        TEQ R1,#0               ;Don't count if null terminator
        ADDNE R3,R3,#4
        BNE ModIn_30
ModIn_40
        Pull "R1"
        CMP R11,#0              ;Include latest entry?
        ADDNE R3,R3,#4
        ADD R3,R3,#4            ;And space for null terminator

        MOV R0,#ModHandReason_Claim
        SWI XOS_Module          ;In R3=size, Out R2->block
        BVS err_NoRoom_forworkspace

        STR R2,[R12]            ;Store ->WorkSpace in private word

        TEQ R1,#0               ;If no list obtained from ScsiDriver
        BEQ ModIn_60            ; then skip
ModIn_50
        LDR R0,[R1],#4          ;else Copy null terminated list
        TEQ R0,#0
        STRNE R0,[R2],#4
        BNE ModIn_50

ModIn_60
        CMP R11,#0
        STRNE R11,[R2],#4       ;Add our podule address to end of list
        MOV R11,#0
        STR R11,[R2],#4         ;Terminate the list

exitModInit
        Pull "R10,R11,PC"

err_NoRoom_forworkspace
        XError SCSI_NoRoom
        B exitModInit

        MakeErrorBlock SCSI_NoRoom   ;"No room for SCSI workspace"
;
;
;==============================================================================


;==============================================================================
;
; SCSILog SWI names and SWI dispatch
;
;------------------------------------------------------------------------------
;
SCSILog_SWInames
        DCB "SCSI",0
        DCB "LogVersion",0
        DCB "LogList",0
        DCB 0
        ALIGN
;
;
;------------------------------------------------------------------------------
;
; SWI decoding
; ============
;
; On entry
;   R11  = SWI number within SCSILog_SWI block
;   R12 -> private word
;   R13  = Stack pointer
;
; On exit
;   R0..R7 return results, or are preserved
;
; Entered in SVC_mode with callers interrupt state
;
; May corrupt R10..R12, return with MOVS PC,R14
;
SCSILog_SWIdecode
        mess ,"SCSILog_SWIdecode - Entry", NL
        Push "R0-R9,Link"

        LDR WsPtr,[R12]
;        CMP WsPtr,#0
;        BEQ                     ;No workspace, report "No hardware"

        CMP R11,#maxSWI
        ASSERT (SCSILog_SWItable-. =8)     ;Table must follow code
        ADDCC PC,PC,R11,ASL #2
        B err_SWIunkn


SCSILog_SWItable
        MySWI SCSI_LogVersion
        MySWI SCSI_LogList

maxSWI  * (.-SCSILog_SWItable):SHR:2

err_SWIunkn
        XError SCSI_SWIunkn
        B exitSWIdecode

        MakeErrorBlock SCSI_SWIunkn  ;"Unknown SCSI SWI number"

exitSWIdecode
        STRVS R0,StackedR0      ;Overwrite stacked R0 with ->error
        Pull "R0-R9,Link"
        ORRVS Link,Link,#V_bit  ;Stacked Link had VClear, so set if error
        mess ,"SCSILog_SWIdecode - Exit", NL
        MOVS PC,Link
;
;
;==============================================================================


;==============================================================================
;
; SWI_SCSI_LogVersion
; ===================
;
; On exit
;   R0 bits 0..7  software minor version number
;      bits 8..31 software major version number (100 for 1.00)
;   R1 bitset of  software features
;
SWI_SCSI_LogVersion
        traceswi "LogVersion"
        ADR R0,VersionBlk
        LDMIA R0,{R0,R1}                ;Pickup return values
        STMIA StkPtr,{R0,R1}            ;Write to StackedR0..StackedR1
        B exitSWIdecode                 ; will be popped on return

VersionBlk
        DCD SoftwareVersionNumber
        DCD SoftwareExtensions
;
;
;==============================================================================


;==============================================================================
;
; SWI SCSI_LogList
; ================
;
; On exit
;   R0 -> Null terminated list of podule addresses
;
SWI_SCSI_LogList
        traceswi "LogList"
        MOV R0,WsPtr
        STR R0,StackedR0

        B exitSWIdecode
;
;
;==============================================================================

        END

