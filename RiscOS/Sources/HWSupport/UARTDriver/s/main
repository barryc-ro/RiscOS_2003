; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : main
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : May 1995
;    Description  : Handle usual module stuff, initialisation, finalisation,
;                   service calls and top level hardware initialisation.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; Description of how the workspace is to be used
                         	^ 0, wp
ExpansionCardBaseAddress 	# 4	; set by hardware detect routine
UARTBaseAddress			# 4	; set by hardware detect routine
InterruptAddress		# 4	; set by hardware detect routine
BuffManWkSpace          	# 4	; buffer manager workspace
BuffManService          	# 4     ; address of buffer manager routine
InputBufferPrivId      		# 4	; buffer managers private buffer id
OutputBufferPrivId		# 4	; buffer managers private buffer id
 [ interrupt_counting
IntCount			# 4
 ]
 [ error_counting
OverrunError			# 4
ParityError			# 4
FramingError			# 4
 ]
UARTDeviceFlags       		# 4     ; UART flags
UARTThreshold         		# 4     ; threshold value being used
FIFOControl			# 1	; trigger level in FIFO control register
Dummy2				# 1
Dummy3				# 1
Dummy4				# 1
DeviceHandle			# 4	; Device handle as returned form DeviceFS

Flags                    	# 1	; general flags
UARTBaud			# 1	; baud rate (8bit) for RX and tx
UARTXONXOFFChar       		# 1     ; serial XON/XOFF character (8bit)
UARTTxByteCount       		# 1     ; used by TX IRQ routine

InputStreamHandle             	# 4     ; DeviceFS handle used for input stream
OutputStreamHandle            	# 4     ; DeviceFS handle used for output stream

InputBufferHandle       	# 4     ; buffer handle used for input stream
OutputBufferHandle      	# 4     ; buffer handle used for output stream

MessagesWorkspace        	# 16    ; workspace needed for messages routines
workspace               	* :INDEX: @

; Define global flags etc used by the module

; Bit definitions for Flags
flag_UARTPresent		* 1:SHL:0	; set => hardware is present
flag_HaveMessages        	* 1:SHL:1       ; set => have messages
flag_FIFOsSupported		* 1:SHL:2	; set => FIFOs are supported
flag_FIFOsEnabled          	* 1:SHL:3       ; set => FIFOs are enabled
flag_OwnIRQ             	* 1:SHL:4       ; set => IRQ owned for device
flag_UpCallVector		* 1:SHL:5	; set => registered with UpCall
flag_SerialVector		* 1:SHL:6	; set => when serialV claimed

UART_baud_rate_max		* 18 + 1	; the maximum baud rate index supported + 1

osbyte_insert_buffer		* 138	; insert character info given buffer
osbyte_remove_buffer		* 145	; remove character from given buffer

input_buffer_size		* 2048	; input buffer size
output_buffer_size		* 400	; output buffer size
buffer_threshold		* 1024	; threshold value for setting up buffers


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

module          & 0
                & init    -module               ; => initalise routine
                & final   -module               ; => finalise routine
                & service -module               ; => service trap

                & title -module                 ; => title string
                & help  -module                 ; => help string
                & command_table -module		; => command table

                & &83900			; => SWI base chunk
                & swi_handler  -module		; => code to handle swi calls
                & swi_table    -module		; => table of supported SWIs
                & 0

title           = "UARTDeviceDriver", 0
help      	= "UARTDeviceDriver", 9, "$VString ($Date)", 0

swi_table       = "UART", 0
                = "SerialOp", 0			; compatable with OS_SerialOps
		= "GetBufferHandles", 0		; return buffer handles
		= "FIFOTrigger",0		; set the FIFO trigger
                = 0

                ALIGN

command_table = "UARTInfo",0
		ALIGN
		DCD	uartinfo_command -module
		DCD	0
		DCD	uartinfo_syntax -module
		DCD	uartinfo_help -module
		& 0

uartinfo_syntax = "Syntax *UARTInfo",0
uartinfo_help   = "*UARTInfo shows UARTDeviceDriver status.",0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Globals
uartinfo_hardware = "   Not found.",0
uartinfo_podule   = "   Card          : ",0
uartinfo_input    = "   Input buffer  : ",0
uartinfo_output   = "   Output buffer : ",0
 [ interrupt_counting
uartinfo_count	  = "   Interrupts    : ",0
 ]
 [ error_counting
uartinfo_overrun  = "   Overruns      : ",0
uartinfo_parity   = "   Parity        : ",0
uartinfo_framing  = "   Framing       : ",0
 ]
podule_offset		* Modem_DefaultPodule:SHL:24
easi_space_base		* &88000000
interrupt_mask		* 1:SHL:0
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ debug

Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
Debug_Module	SETL	False
;Debug_File      SETS	"$.Debug"

 ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DeviceFS declarations
device_name     = "UART", 0
                ALIGN

device_block    & device_name - device_block
                & DeviceFlag_BufferedDevice + DeviceFlag_DefinePathVariable
                & 0                             ; default RX buffer flags
                & 256                           ; default RX buffer size
                & 0                             ; default TX buffer flags
                & 192                           ; default TX buffer size
                & 0                             ; reserved field (must be zero)

                & 0                             ; end of table

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; ResourceFS declarations

              [ international
                ! 0, "   messages internationalised"
resource_file   = "Resources:$.Resources.UART.Messages", 0
              ]
                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Error declarations
                MakeErrorBlock UART_BadBaud
                MakeErrorBlock UART_BadSWI
		MakeErrorBlock UART_NotPresent

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;
init            ENTRY	"r7-r11"

                LDR     r2, [r12]		   ; r2 = &wp
                TEQ     r2, #0                     ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace             ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                              ; return if didn't work

                STR     r2, [wp]			; wp = r2
10
                MOV     wp, r2                          ; wp -> workspace

 [ standalonemessages
                ADRL    r0, resource_file_block
                SWI     XResourceFS_RegisterFiles
 ]
                MOV     r0, #0
		STR	r0, ExpansionCardBaseAddress
		STR	r0, UARTBaseAddress
		STR	r0, InterruptAddress
		STR	r0, UARTDeviceFlags
		STR	r0, UARTThreshold
		STR	r0, DeviceHandle
		STR	r0, InputStreamHandle
		STR	r0, OutputStreamHandle
                STRB    r0, Flags
		STRB	r0, UARTBaud
		STRB	r0, UARTXONXOFFChar
		STRB	r0, UARTTxByteCount
		STRB	r0, FIFOControl
		STR	r0, BuffManWkSpace
		STR	r0, BuffManService

 [ interrupt_counting
		STR	r0, IntCount
 ]
 [ error_counting
		STR	r0, OverrunError
		STR	r0, ParityError
		STR	r0, FramingError
 ]
                MOV     r0, #-1
                STR     r0, InputBufferHandle
                STR     r0, OutputBufferHandle
		STR	r0, InputBufferPrivId
		STR	r0, OutputBufferPrivId

		BL 	hardware_detect	 ; routine to perform hardware detection
		LDR	r0, Flags	 ; see if hardware is present
		TST	r0, #flag_UARTPresent
		EXITS	EQ

		BL	register_device
		BL	get_vectors
		BL	initialise_uart

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           ENTRY	"r7-r11"

                LDR     wp, [r12]

		LDR	r0, Flags
		TST	r0, #flag_UARTPresent
		BEQ	%10

		BL	free_vectors

                LDR     r0, DeviceHandle
                TEQ     r0, #0
                BEQ     %10

                SWI     XDeviceFS_Deregister
                MOV     r0, #0
                STR     r0, DeviceHandle
10
		BL	hardware_remove

              [ international
                BL      close_messages
              ]

 [ standalonemessages
                ADRL    R0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
 ]
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;
; Quickly test to see if they are of interest to use and pass on.

service         ROUT
                TEQ     r1, #Service_DeviceFSStarting
                TEQNE   r1, #Service_DeviceFSDying
		TEQNE	r1, #Service_PreReset
 [ standalonemessages
                TEQNE   r1, #Service_ResourceFSStarting
 ]
                MOVNES  pc, lr

                LDR     wp, [r12]

                TEQ     r1, #Service_DeviceFSStarting
                BEQ     register_device

                TEQ     r1, #Service_DeviceFSDying
                STREQ   r0, DeviceHandle

		TEQ	r1, #Service_PreReset
		BEQ	standby_state				; drop DTR etc

 [ standalonemessages
                TEQ     r1, #Service_ResourceFSStarting
                BNE     %FT30
                Push    "r0-r3,lr"
                ADRL    r0, resource_file_block
                MOV     lr, pc
                MOV     pc, r2
                Pull    "r0-r3,pc",,^
30
 ]
                MOVS  	pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle the despatch of SWIs within the system.
;
swi_handler	ROUT
                LDR     wp, [r12]

		Push	"r0"
		LDR	r0, Flags
		TST	r0, #flag_UARTPresent
		Pull	"r0"

		BNE	%10
                ADR     r0, ErrorBlock_UART_NotPresent
		DoError
10
		CMP	r11, #(%30-%20)/4  	; check modulo swi number
		ADDCC	pc, pc, r11, LSL #2	; dispatch if in range
		B	%30
20
                B     	swi_handle_serialop	; UART_SerialOp
		B	swi_handle_get_buffers	; UART_GetBufferHandles
		B	swi_handle_fifo_trigger	; UART_SetFIFOTrigger
30
                ADR     r0, ErrorBlock_UART_BadSWI
 [ international
                B       make_error_with_name
 |
                ORRS    pc, lr, #V_bit
 ]
		MOV	pc, lr					; exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; get_vectors
;
get_vectors	ENTRY	"r0-r3"

		LDR	r3, Flags
		TST	r3, #flag_UpCallVector
		EXITS	NE

		MOV	r0, #UpCallV
		ADDR	r1, handle_upcall
                MOV     r2, wp
                SWI     XOS_Claim

		ORRVC	r3, r3, #flag_UpCallVector
                STR     r3, Flags

                STRVS   r0, [sp]
                PullEnv
                BICVCS  pc, lr, #V_bit
                ORRS    pc, lr, #V_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; free_vectors
;
free_vectors	ENTRY	"r0-r3"

		LDR	r3, Flags
		TST	r3, #flag_UpCallVector
		EXITS	EQ
		MOV	r0, #UpCallV
		ADDR	r1, handle_upcall
                MOV     r2, wp
                SWI     XOS_Release

		BICVC	r3, r3, #flag_UpCallVector
                STR    	r3, Flags
                PullEnv
                BICS  	pc, lr, #V_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; register device
;
register_device ENTRY "r0-r7"
                MOV     r0, #ParentFlag_FullDuplex
                ADRL    r1, device_block
                ADDR    r2, handle_device_call
                MOV     r3, #0
                MOV     r4, wp               	; -> workspace for the device
                MOV     r5, #0                  ;    special fields are allowed
                MOV     r6, #1			; maximum number of RX devices
                MOV     r7, #1                  ; maximum number of TX devices
                SWI     XDeviceFS_Register
                STRVS   r0, [sp]
                EXITS   VS
                STR     r0, DeviceHandle
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standby_state
;
standby_state	ENTRY "r0-r2,r11"

		MOV	r0, #0
		MOV	r1, #(1:SHL:SF_DTROff)		; Drop DTR XOR mask
		MVN	r2, r1				; AND mask
		BL	swi_change_status
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; register device
;
initialise_uart ENTRY "r0-r2"

		MOV     r0, #0			 ; set r0 to 0
  		LDR     r1, Flags		 ; copy Flags into r1
                TST     r1, #flag_FIFOsSupported ; if we can use FIFOs then
                MOVNE   r0, #1:SHL:SF_UseFIFOs	 ; set flag in device flags
		STR     r0, UARTDeviceFlags

                LDR   	r1, =buffer_threshold  	; use a default value
                STR     r1, UARTThreshold    	; and store it away in workspace

		BL	hardware_reset	 	; reset the UART

                MOV     r1, #0			; default to 9600
                BL 	swi_set_baud

                MOV	r1, #0			; default to 8.n.1
                BL      swi_data_format

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

uartinfo_command ENTRY "r0-r1"
                LDR     wp, [r12]                       ; wp -> workspace

; check if we have a podule present
		LDR	r0, Flags
		TST	r0, #flag_UARTPresent
		ADREQL	r0, uartinfo_hardware	; hardware not found message
		SWIEQ	XOS_Write0
		SWIEQ	XOS_NewLine
		EXITS	EQ			; exit with no more info
; display podule number
		ADRL	r0, uartinfo_podule	; podule number message
		SWI	XOS_Write0
		LDR	r0, =easi_space_base
		LDR	r1, ExpansionCardBaseAddress
		SUB	r0, r1, r0		; work out podule offset
		MOV	r0, r0, LSR #24		; work out podule number
		BL	show_integer
		SWI	XOS_NewLine

; display input buffer handle
		ADRL	r0, uartinfo_input	; input buffer handle
		SWI	XOS_Write0
		LDR	r0, InputBufferHandle
		BL	show_integer
		SWI	XOS_NewLine
; display output buffer handle
		ADRL	r0, uartinfo_output	; output buffer handle
		SWI	XOS_Write0
		LDR	r0, OutputBufferHandle
		BL	show_integer
		SWI	XOS_NewLine
 [ interrupt_counting
; count
		ADRL	r0, uartinfo_count
		SWI	XOS_Write0
		LDR	r0, IntCount
		BL	show_integer
		SWI	XOS_NewLine
 ]

 [ error_counting
		ADRL	r0, uartinfo_overrun
		SWI	XOS_Write0
		LDR	r0, OverrunError
		BL	show_integer
		SWI	XOS_NewLine

		ADRL	r0, uartinfo_parity
		SWI	XOS_Write0
		LDR	r0, ParityError
		BL	show_integer
		SWI	XOS_NewLine

		ADRL	r0, uartinfo_framing
		SWI	XOS_Write0
		LDR	r0, FramingError
		BL	show_integer
		SWI	XOS_NewLine
 ]

		EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Writes an integer to the screen.
;
; in:
;    r0 - value to be displayed

show_integer	ENTRY "r1-r2"
        	SUB     r13, r13, #16
        	MOV     r1, r13
        	MOV     r2, #16
        	SWI     XOS_ConvertInteger4
        	SWIVC	OS_Write0
        	ADD     r13, r13, #16
        	EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generalised internationalisation routines, these ensure that messages files
; are correctly opened and then return the relevant data.
;
 [ international


; Attempt to open the messages file.

open_messages   ENTRY   "r0-r3"
                LDR     r3, Flags
                TST     r3, #flag_HaveMessages
                EXITS   NE                      ; yes, so don't bother again

                ADR     r0, MessagesWorkspace
                ADRL    r1, resource_file    ; -> path to be opened
                MOV     r2, #0               ; allocate some wacky space in RMA
                SWI     XMessageTrans_OpenFile
                LDRVC   r3, Flags
                ORRVC   r3, r3, #flag_HaveMessages
                STRVC   r3, Flags
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Attempt to close the messages file.

close_messages  ENTRY   "r0"
                LDR     r0, Flags
                TST     r0, #flag_HaveMessages      ; do we have any messages?
                EXITS   EQ                          ; and return if not!

                ADR     r0, MessagesWorkspace
                SWI     XMessageTrans_CloseFile     ; yes, so close the file
                LDRVC   r0, Flags
                BICVC   r0, r0, #flag_HaveMessages
                STRVC   r0, Flags                   ; mark as we don't have them
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generate an error based on the error token given.  Does not assume that
; the messages file is open.  Will attempt to open it, then look it up.
; if make_error_with_name is called, the module name is substituted in r4

make_error_with_name ENTRY "r1-r7"
		ADRL	r4, title
		B	make_error_entry

make_error      ENTRY 	"r1-r7"
                MOV     r4, #0
make_error_entry
                LDR     r1, Flags
                TST     r1, #flag_HaveMessages          ; are messages closed?
                BLEQ    open_messages

                LDR     r1, Flags
                TST     r1, #flag_HaveMessages
                PullEnv EQ
                ORREQS  pc, lr, #VFlag

                ADR     r1, MessagesWorkspace
                MOV     r2, #0
                MOV     r3, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0
                SWI     XMessageTrans_ErrorLookup
                BL      close_messages

                EXIT

 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This bit of appartently harmless code will bind a messages file into the code
; in the case of a standalong module. The macro ResourceFile will create the
; stuff and the label resource_file is used to point to the block required by
; ResourceFS
 [ standalonemessages
resource_file_block
		ResourceFile Resources.<Locale>.Messages, Resources.UART.Messages
                DCD     0
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
