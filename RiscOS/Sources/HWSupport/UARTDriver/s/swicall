; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : swicall
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : May 1995
;    Description  : This code should handle all the swis provided by this module.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_swi_call
;
; in:   r0  = reason code
;               	= 0, read/write serial status
;                       = 1, read/write data format
;                       = 2, send break
;                       = 3, send byte
;                       = 4, read byte
;                       = 5, read/write receive baud rates
;                       = 6, read/write transmit baud rates
;                       = 8, set handshake exten
;			= 9, enumerate baud rates
;
; out:  V clear => registers defined as for SWI.
;       V set => r0 -> error block.
;
; This call handles the SerialOp swi calls. It is called from the SWI dispatcher.
;
swi_handle_serialop ROUT
                BIC     lr, lr, #V_bit          ; ensure V clear on exit

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2      ; if the call is valid then issue
                B       %20
10
                B	swi_change_status  	; 0, read/write serial status (s.hardware)
                B       swi_data_format		; 1, read/write data format
                B       swi_send_break		; 2, send break
                B       swi_send_byte		; 3, send byte
                B       swi_read_byte		; 4, read byte
                B       swi_set_baud		; 5, read/write receive baud rates, same values each time.
                B       swi_set_baud		; 6, read/write transmit baud rates
                MOVS    pc, lr                  ; 7, ignored
                B       swi_handshake_extent	; 8, set handshake extent
                B       swi_enumerate_speeds	; 9, enumerate baud rates
20
                ADDR    r0, ErrorBlock_UART_BadReasonCode
                DoError                                         ; return error about naff op code

		MakeErrorBlock UART_BadReasonCode

		MOV	pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_handle_get_buffers
;
; in:
;
; out: r0 - Input buffer handle
;      r1 - Output buffer handle
;
; It is called from the SWI dispatcher, it returns the allocated buffer handles
; allowing direct user control of the buffers.
;
swi_handle_get_buffers ROUT

		LDR	r0, InputBufferHandle
		LDR	r1, OutputBufferHandle

		MOV	pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_handle_fifo_trigger
;
; in:  r0 - Trigger value (1/4/8/14) (-1 to read)
;
; out: r0 - Actual value
;
; This allows the FIFO trigger value to be altered. The Trigger value is held
; as bits 6 and 7 in the UART_FIFO_control register.
;
swi_handle_fifo_trigger ENTRY "r1-r3, r11"

                LDR     r11, UARTBaseAddress                   		; r11 -> UART base

		CMP	r0, #-1						; do we want to read
		BEQ	%20
		CMP	r0, #1						; check for valid trigger value
		MOVEQ	r1, #FCR_RX_trigger_1
		BEQ	%10
		CMPNE	r0, #4
		MOVEQ	r1, #FCR_RX_trigger_4
		BEQ	%10
		CMPNE	r0, #8
		MOVEQ	r1, #FCR_RX_trigger_8
		BEQ	%10
		CMPNE	r0, #14
		MOVEQ	r1, #FCR_RX_trigger_14
		BEQ	%10

                ADDR    r0, ErrorBlock_UART_BadTrigger
                DoError
; Set the trigger value for FIFOs
10
		LDRB	r2, FIFOControl					; load soft copy
		MVN	r3, #FCR_RX_trigger_14				; create mask
		AND	r2, r2, r3					; clear trigger bits
		ORR	r2, r2, r1
		STRB	r2, FIFOControl					; store back in soft copy
                TEQP    pc, #SVC_mode + I_bit                           ; disable IRQs
		STRB	r2, UART_FIFO_control
		EXITS
; Read the trigger value and return it
20
		LDRB	r1, FIFOControl
		AND	r1, r1, #FCR_RX_trigger_14			; mask off other bits
		CMP	r1, #FCR_RX_trigger_1				; is it value 1
		MOVEQ	r0, #1						; yes
		BEQ	%30
		CMP	r1, #FCR_RX_trigger_4				; is it value 1
		MOVEQ	r0, #4						; yes
		BEQ	%30
		CMP	r1, #FCR_RX_trigger_8				; is it value 1
		MOVEQ	r0, #8						; yes
		BEQ	%30
		CMP	r1, #FCR_RX_trigger_14				; is it value 1
		MOVEQ	r0, #14						; yes
30
                EXITS

		MakeErrorBlock UART_BadTrigger

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_change_status
;
; in:   r0  = reason code
;       r1  = EOR mask
;       r2  = AND mask
;       SVC mode
;
; out:  r1  = OLD flags
;       r2  = NEW flags
;
; This code will modify the flags within the UART controller, it is also used to return the state
; in the top 16 bits.  When called the routine will attempt to reprogram the values as required,
; it also compiles the status bits.
;
; This call is used to read/write the serial status.
;
;       bit     rw / ro         value   meaning
;
;       0       r/w             0       No software control. Use RTS handshaking if bit 5 clear.
;
;                               1       Use XON/XOFF protocol. Bit 5 ignored.
;
;       1       r/w             0       Use ~DCD bit.  If ~DCD bit in the status
;                                       register goes high, then cause a serial
;                                       event.  Also, if a character is received when
;                                       ~DCD is high then cause a serial event, and do not enter the
;                                       character into the buffer.
;
;                               1       Ignore the ~DCD bit.  Note that some serial chips (GTE and CMD)
;                                       have reception and transmission problems if this bit is high.
;
;       2       r/w             0       Use the ~DSR bit.  If the ~DSR bit in the status
;                                       register is high, then do not transmit characters.
;
;                               1       Ignore ~DSR bit.
;
;       3       r/w             0       DTR on (normal operation).
;                               1       DTR off (on 6551 cannot use serial in this state).
;
;       4       r/w             0       Use the ~CTS bit. If the ~CTS bit in the status
;                                       register is high, then do not transmit characters.
;
;                               1       Ignore ~CTS bit (not supported on 6551 hardware).
;
;       5       r/w             0       Use RTS handshaking if bit 0 is clear.
;                               1       Do not use RTS handshaking.
;                                       This bit is ignored if bit 0 is set.
;
;       6       r/w             0       Input not suppressed.
;                               1       Input is suppressed.
;
;       7       r/w             0       RTS controlled by handshaking system (low if no RTS handshaking)
;                               1       RTS high.
;                                       Users should only modify this bit if RTS handshaking is NOT in use.
;
;       8       r/w             0       Do not use FIFOs (if present)
;                               1       Use FIFOs (if present)
;
;       9..15   ro              0       Reserved for future expansion.
;
;       16      ro              0       XOFF not received
;                               1       XOFF has been received.  Transmission is stopped by this occurence.
;
;       17      ro              0       The other end is intended to be in XON state.
;                               1       The other state is intended to be in XOFF state.  When this
;                                       bit is set, then it means that an XOFF has been sent and it will be cleared
;                                       when an XON is sent by the buffering software.  Note that the fact that this
;                                       bit is set does not imply that the other end has received
;                                       an XOFF yet.
;
;       18      ro              0       The ~DCD bit is low, ie. carrier present.
;                               1       The ~DCD bit is high, ie. no carrier.
;                                       This bit is stored in the variable and updated on modem status interrupts
;
;       19      ro              0       The ~DSR bit is low, ie. 'ready' state.
;                               1       The ~DSR bit is high, ie. 'not-ready' state.
;                                       This bit is stored in the variable and updated on modem status interrupts
;
;       20      ro              0       The ring indicator bit is low.
;                               1       The ring indicator bit is high.
;                                       This bit is not stored in the variable but is read directly from the hardware.
;
;       21      ro              0       CTS low -> clear to send
;                               1       CTS high -> not clear to send
;                                       This bit is stored in the variable and updated on modem status interrupts.
;
;       22      ro              0       User has not manually sent an XOFF
;                               1       User has manually sent an XOFF
;
;       23      ro              0       Space in receive buffer above threshold
;                               1       Space in receive buffer below threshold
;
;       24..27  ro              0       Reserved for future expansion.
;
;       28      ro              0       Not using serial FIFOs
;                               1       Using serial FIFOs
;
;       29      ro              0       We have normal characters to transmit
;                               1       No normal characters to transmit (excluding breaks, XON/XOFFs)
;
;       30      ro              0       Not sending a break signal
;                               1       Currently sending a break signal
;
;       31      ro              0       Not trying to stop a break
;                               1       Trying to stop sending a break
;

swi_change_status ENTRY   "r8-r11"

                LDR     r11, UARTBaseAddress                   		; r11 -> UART base

                LDR     r10, = :NOT: SF_ModifyBits
                BIC     r1, r1, r10                                     ; EOR mask cannot modify these bits
                ORR     r2, r2, r10                                     ; AND mask must preserve these bits

; disable IRQs round this bit because
; a) we are updating UARTDeviceFlags, which gets modified under IRQ
; b) if ModemStatus changes (and generates an IRQ) after we read it but before we update UARTDeviceFlags,
;    we'd be writing an old state into the flags

                TEQP    pc, #SVC_mode + I_bit                           ; disable IRQs
                LDRB    r8, UART_modem_status				; load modem status register into r8

                LDR     r10, UARTDeviceFlags                            ; get global UART state flags

                BIC     r10, r10, #(1:SHL:SF_DCDHigh):OR:(1:SHL:SF_DSRHigh):OR:(1:SHL:SF_Ringing):OR:(1:SHL:SF_CTSHigh)

                TST     r8, #MSR_CTS_active                                  ; OR in state of CTS
                ORREQ   r10, r10, #1:SHL:SF_CTSHigh

                TST     r8, #MSR_DSR_active                                  ; OR in state of DSR
                ORREQ   r10, r10, #1:SHL:SF_DSRHigh

                TST     r8, #MSR_RI_active                                   ; OR in state of RI
                ORRNE   r10, r10, #1:SHL:SF_Ringing

                TST     r8, #MSR_DCD_active
                ORREQ   r10, r10, #1:SHL:SF_DCDHigh

                AND     r9, r10, r2					; r9 = UARTDeviceFlags & AND_mask
                EOR     r2, r9, r1					; r2 = r9 ^ EOR_mask
                MOV     r1, r10                                         ; r1 = Old UARTDeviceFlags
                STR     r2, UARTDeviceFlags                             ; store serial device flags (new!)

;		DREG	r2, "New flags : "

                TEQ     r1, r2                                          ; any change ?
                BLNE    hardware_set_FIFO                               ; if so, then update FIFO
                BLNE    update_DTRRTSTXI

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		LTORG				; save place to dump literals

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_data_format
;
; in:   r0  = reason code (1)
;       r1  = -1 to read, else set to new value
;
; out:  r1  = old value.
;
; This call is used to modify the serial data formats, the following bits are defined within r1.
; It will setup the stop bits, word length and parity checking bits.
;
; r1 bits     line control reg    rw/ro      meaning
; -------     ----------------    -----      -------
;
;  b0, b1         b1, b0		    word length
;  0   0          1   1            rw       8 bit word
;  0   1          1   0            rw       7 bit word
;  1   0          0   1            rw       6 bit word
;  1   1          0   0            rw       5 bit word
;
;  b2             b2      		    stop bits
;  0              0                rw       1 stop bit
;  1              1                         2 top bits in most cases
;                                           1 stop bit if 8 bit word with parity
;                                           1.5 stop bits if 5 bit word without parity
;
;  b3             b3               rw       parity
;  0              0       		    disabled
;  1       	  1                         enabled
;
;  b4, b5         b4, b5           rw       parity type
;  0   0          0   0                     odd parity
;  1   0          1   0                     even parity
;  0   1          0   1                     parity always 1 on TX
;  1   1          1   1   		    parity always 0 on TX
;
;                 b6, b31          ro       always 0, reserved for future expansion
;

swi_data_format     ENTRY   "r9-r11"

                LDR     r11, UARTBaseAddress    ; r11 -> UART base
                TEQP    pc,  #SVC_mode + I_bit	; disable IRQs round this
                LDRB    r10, UART_line_control  ; UART line control register

; need to mangle bits 0,1 to convert to old format using an EXOR with 3 :

                AND     r9, r10, #2_00111111	; r9 = bottom 5 bits of r10
                EOR     r9, r9, #3              ; mangle chip's bits into user format (EXOR with 3)
                CMP     r1, #-1                         ; if writing then
                ANDNE   r1, r1, #2_00111111             ; mask out strange bits
                CMPNE   r1, r9                          ; if reading or if writing the same state
                BEQ     %FT10                           ; then don't update

                EOR     r1, r1, #3                      ; mangle user bits into chip's format
                BIC     r10, r10, #2_00111111
                ORR     r10, r10, r1
                STRB    r10, UART_line_control
10
                MOV     r1, r9  			; copy read/old value into r1

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_send_break
;
; in:   r0  = reason code (2)
;       r1  = length of break in centi-seconds.
;
; out:  -
;
; This call send_bytes a break for the specified length of time in centi-seconds, this is done by
; enabling IRQs and then send_byteing a start break, waiting for the metronome to reach the required
; value and then send_byteing a stop break.
;
; The device can then handle things as required.
;

swi_send_break  ENTRY   "r0-r3"

; need to do a start break (break710)
                TEQP    pc, #SVC_mode + I_bit                   ; disable IRQs round this bit

                LDR     r11, UARTBaseAddress           		; r11 -> UART base
                MOV     r3, #0                                  ; stick a null in
                STRB    r3, UART_data_word			; transmit data register now

                LDRB    r3, UART_interrupt_enable               ; read contents of interrupt enable register
                ORR     r3, r3, #IER_transmit_empty		; mask on interrupt for tx register empty
                STRB    r3, UART_interrupt_enable		; store back in interrupt enable register

                LDR     r3, UARTDeviceFlags                     ; read contents of UARTDeviceFlags
                ORR     r3, r3, #1:SHL:SF_BreakOn		; mask on bit for breakon
                STR     r3, UARTDeviceFlags			; store back in UARTDeviceFlags

; do that timing thing
                MOV     r2, pc
                TEQP    pc, #SVC_mode                           ; enable IRQs

                SWI     XOS_ReadMonotonicTime                   ; r0 = monotonic time
                ADD     r1, r1, r0                              ; r1 = destination time
10
                SWI     XOS_ReadMonotonicTime
                CMP     r0, r1                                  ; have we reached the required time?
                BMI     %BT10                                   ; nope.  (NB: NOT BLT - these are clock numbers!)

                TEQP    r2, #0                                  ; restore old IRQ state

; need to do a stop break
                MOV     lr, pc
                AND     lr, lr, #I_bit
                EOR     lr, lr, #I_bit                  ; value to EOR with PC to toggle between IRQs off & entry state
                TEQP    lr, pc                          ; disable IRQs first

                LDR     r3, UARTDeviceFlags                     ; read contents of UARTDeviceFlags
                ORR     r3, r3, #1:SHL:SF_StoppingBreak 	; indicate that we wish to stop break
                STR     r3, UARTDeviceFlags			; store back in UARTDeviceFlags

                LDRB    r3, UART_interrupt_enable               ; read contents of interrupt enable register
                BIC     r3, r3, #IER_transmit_empty		; clear interrupt for tx register empty
                STRB    r3, UART_interrupt_enable		; store back in interrupt enable register

; now go into a loop, polling the transmitter empty bit, but processing any line status errors we get
; (since reading line status clears these!)

20
                LDRB    r3, UART_line_status
                TST     r3, #LSR_overrun :OR: LSR_parity :OR: LSR_framing :OR: LSR_break
                BNE     %FT50                           	; if a line status error, then process it
30
                TST     r3, #LSR_TX_shift_empty
                BNE     %FT40                           	; transmitter has finished shifting, so clear break bit
                TEQP    lr, pc                          	; restore IRQ state for a bit
                TEQP    lr, pc                          	; then disable them again
                B       %BT20

40
                LDRB    r3, UART_line_control			; read contents of line control register
                BIC     r3, r3, #LCR_break_enable       	; disable break signal
                STRB    r3, UART_line_control			; store back in line control register

                LDR     r3, UARTDeviceFlags			; read contents of UARTDeviceFlags
                BIC     r3, r3, #(1:SHL:SF_BreakOn):OR:(1:SHL:SF_StoppingBreak) ; finished the break completely
                STR     r3, UARTDeviceFlags			; store back in UARTDeviceFlags

                LDRB    lr, UART_interrupt_enable		; read contents of interrupt enable register
                ORR     lr, lr, #IER_transmit_empty       	; enable transmit interrupts again
                STRB    lr, UART_interrupt_enable		; store back in interrupt enable register

		EXIT	VC
                ADD     sp, sp, #4                              ; junk stacked r0
                Pull    "r1,r2,r3, lr"
                ORRS    pc, lr, #V_bit
50
                Push    "lr"
                BL      process_line_status_error
                Pull    "lr"
                B       %BT30

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_send_byte
;
; in:   r0  = reason code (3)
;       r1  = character to be sent
;
; out:  C set, character not sent.
;       C clear, character was sent.
;
; insert a character into the output buffer for transmission
;


swi_send_byte	ENTRY   "r0-r2,r9"

                LDR     r1, OutputBufferHandle
                CMP     r1, #-1                         ; check if we have a serial output stream open
                BNE     %FT10                           ; if we have, then it's OK

                MOV     r0, #open_write			; reason code for OSFind_OpenOut
                ADR     r1, UARTfilename		; filename given in DeviceFS
                SWI     XOS_Find			; open that file
                STRVS   r0, [sp]
                EXIT    VS

                LDR     r1, OutputBufferHandle          ; now check buffer handle again
                CMP     r1, #-1                         ; if still -1 then we didn't open stream
                EXIT    EQ                              ; so exit, CS
10
		MOV	r0, #osbyte_insert_buffer
                LDR     r2, [sp, #1*4]                  ; reload character to send
		SWI	XOS_Byte
                STRVS   r0, [sp]

                EXIT                                    ; exit with flags as on exit from os byte

UARTfilename  = "UART:", 0
                ALIGN

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_read_byte
;
; in:   r0  = reason code (4)
;
; out:  C clear => r1  = character
;       C set => no character obtained
;
; remove a character from the input buffer
;

swi_read_byte   ENTRY   "r0-r2,r9"

                LDR     r1, InputBufferHandle
                CMP     r1, #-1    ; if no serial input stream open, r1 = -1, so C=1
                EXIT    EQ

		MOV	r0, #osbyte_remove_buffer
                SWI     XOS_Byte
                STRVS   r0, [sp, #0*4]
                EXIT    VS                ; shouldn't get an error, but still...
                STRCC   r2, [sp, #1*4]    ; if got char then store into stack

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_set_baud
;
; in:   r0  = reason code (5)
;       r1  = new baud rate / -1 to read
;
; out:  r1  = previous state
;
; This call allows you to modify the serial receive baud rate.
;

swi_set_baud    ENTRY	"r0,r2,r11"

                LDRB    r2, UARTBaud	; r2 = current baud rate
                CMP     r1, #0          ; if setting to zero
                MOVEQ   r1, #7          ; then use 7 (9600)
                CMP     r1, #-1         ; if reading
                MOVEQ   r1, r2          ; then use old value from r2

                TEQ     r1, r2          ; will the call invoke any change?
                EXITS   EQ              ; no, so don't bother return now!

; now r1 contains the new value to set, r2 contains the old value

                CMP     r1, #UART_baud_rate_max
                PullEnv CS
                ADRCSL  r0, ErrorBlock_UART_BadBaud
                DoError CS

                PHPSEI				; disable IRQs macro

                STRB    r1, UARTBaud            ; store the actual baud rate

                LDR     r11, UARTBaseAddress	; r11 -> uart base

                ADR     r0, baud_divisors	; table found below
                LDR     r1, [r0, r1, LSL #2]    ; get baud rate crystal divisor

                CMP     r1, #6			; 6 = 19200 baud, need FIFOs
                LDR     r0, UARTDeviceFlags
                ORRCC   r0, r0, #1:SHL:SF_FillTXFIFO	; set fill TX FIFOs bit
                BICCS   r0, r0, #1:SHL:SF_FillTXFIFO	; clear TX FIFOs bit
                STR     r0, UARTDeviceFlags

                LDRB    r0, UART_line_control
                ORR     r0, r0, #LCR_address_divisor	; set DRAB
                STRB    r0, UART_line_control

                STRB    r1, UART_baud_divisor_LSB	; store lower byte
                MOV     r1, r1, LSR #8			; shift down one byte
                STRB    r1, UART_baud_divisor_MSB       ; write upper byte

                BIC     r0, r0, #LCR_address_divisor	; clear DRAB bit
                STRB    r0, UART_line_control

                PLP				; another wacky macro
		MOV	r1, r2	; copy previous baud rate into r1 for exit

                EXITS
; table used to convert the specified baud value into a clock divisor as used
; by the UART.

baud_divisors
                & 12    ; 9600
                & 1536  ; 75
                & 768   ; 150
                & 384   ; 300
                & 96    ; 1200
                & 48    ; 2400
                & 24    ; 4800
                & 12    ; 9600
                & 6     ; 19200
                & 2304  ; 50
                & 1047  ; 110
                & 857   ; 134.5
                & 192   ; 600
                & 64    ; 1800
                & 32    ; 3600
                & 16    ; 7200
                & 3     ; 38400
                & 2     ; 57600
                & 1     ; 115200

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_handshake_extent
;
; in:   r0  = reason code (8)
;       r1  = handshaking extent / -1 to read
;
; out:  r1  = previous value
;
; This routine will set the threshold value for the input buffer
;

swi_handshake_extent ENTRY   "r0-r1"

                LDR     r3, UARTThreshold
                CMP     r1, #-1                 ; are we just reading?
                BEQ     %FT10                   ; yes, so return

                STR     r1, UARTThreshold
                LDR     r0, InputBufferHandle
                TEQ     r0, #0
                BEQ     %FT10                  	; if no input buffer then ignore

                SWI     XBuffer_Threshold
                STRVS   r0, [sp]                ; it went wrong so
                PullEnv VS
                DoError VS                      ; return error
10
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: swi_enumerate_speeds
;
; in:   r0  = reason code (9)
;
; out:  r0 preserved
;       r1 -> table of words containing supported speeds in 0.5bit/sec
;       r2 = number of entries in table
;
; This routine returns a pointer to a table of supported serial speeds.
;

swi_enumerate_speeds

                ADRL    r1, baud_rates
                MOV     r2, #(end_baud_rates - baud_rates) :SHR: 2

                MOV     pc, lr

baud_rates	; Table of supported baud rates (in 0.5 bit units).
                & 75 * 2
                & 150 * 2
                & 300 * 2
                & 1200 * 2
                & 2400 * 2
                & 4800 * 2
                & 9600 * 2
                & 19200 * 2
                & 50 * 2
                & 110 * 2
                & 134 * 2 + 1
                & 600 * 2
                & 1800 * 2
                & 3600 * 2
                & 7200 * 2
                & 38400 * 2
                & 57600 * 2
                & 115200 * 2
end_baud_rates

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: process_line_status_error
;
; in:   r0 = line status register
;       r11 -> C710_UART
;       IRQ or SVC mode
;
; Generate serial error event from line status
;
process_line_status_error ENTRY "r1, r2"
        	TST     r0, #LSR_data_ready      ; if there's a character
        	LDRNEB  r2, UART_data_word       ; read it and pass to event
 [ error_counting
		TST	r0, #LSR_overrun
		LDRNE	r1, OverrunError
		ADDNE	r1, r1, #1
		STRNE	r1, OverrunError

		TST	r0, #LSR_parity
		LDRNE	r1, ParityError
		ADDNE	r1, r1, #1
		STRNE	r1, ParityError

		TST	r0, #LSR_parity
		LDRNE	r1, FramingError
		ADDNE	r1, r1, #1
		STRNE	r1, FramingError
 ]
; now translate error bits, SerialError_* taken from RS423 include file
        	ANDS    r1, r0, #LSR_overrun
        	MOVNE   r1, #SerialError_Overrun
        	TST     r0, #LSR_parity
        	ORRNE   r1, r1, #SerialError_Parity
; map framing or break errors onto framing
        	TST     r0, #LSR_framing :OR: LSR_break
        	ORRNE   r1, r1, #SerialError_Framing
        	BL      give_error

        	EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: give_error
;
; in:   r1 = PE, OV and FE bits where you want them
;       r2 = character if there was one (pretty useless since you don't know if
;	     there was!)
; out:  must preserve flags
;
; This code generates an event about a serial error ie framing error, overrun,
; parity error or DCD high
;

give_error      ENTRY   "r0-r3"

                LDR     lr, UARTDeviceFlags
                TST     lr, #1:SHL:SF_DCDHigh
                ORRNE   r1, r1, #SerialError_DCD
                TST     lr, #1:SHL:SF_DSRHigh
                ORRNE   r1, r1, #SerialError_DSR

                MOV     lr, pc
                AND     lr, lr, #3
                EOR     r3, lr, #SVC_mode       ; switch into SVC mode
                TEQP    r3, pc
                NOP

                Push    "lr"
                MOV     r0, #Event_RS423Error
                SWI     XOS_GenerateEvent	; and then generate event
                Pull    "lr"                    ; preserve SVC LR

                TEQP    r3, pc                  ; restore original mode
                NOP

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
