; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : hardware
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : May 1995
;    Description  : Declarations of all the UART registers and bits and provide
;                   the routine for hardware detection, hardware initialisation
;		    and hardware reset.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Declarations of all the registers used to access the UART
                        ^ 0, r11
UART_data_word		# 4	; 0 RX buffer register and TX holding buffer
UART_interrupt_enable	# 4	; 1 IER interrupt enable register
UART_interrupt_ident 	# 4	; 2 IIR interrupt identification register
UART_line_control 	# 4	; 3 LCR line control register
UART_modem_control 	# 4	; 4 MCR modem control register
UART_line_status 	# 4	; 5 LSR line status register
UART_modem_status 	# 4	; 6 MSR modem status register
UART_scratch 		# 4	; 7 SCR scratchpad register

                        ^ 0, r11
UART_baud_divisor_LSB 	# 4	; 0 DLL baud rate divisor latch LSB only accessed when DLAB = 1
UART_baud_divisor_MSB 	# 4	; 1 DLM baud rate divisor latch MSB only accessed when DLAB = 1
UART_FIFO_control	# 4	; 2 FCR FIFO control register (on 550s only)

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_interrupt_enable

IER_receive_available  	* 1 :SHL: 0	; set bit to enable receive interrupts
IER_transmit_empty 	* 1 :SHL: 1   	; set bit to enable transmit interrupts
IER_line_status    	* 1 :SHL: 2   	; set bit to enable error interrupts (Overrun, Parity, Framing, Break)
IER_modem_status    	* 1 :SHL: 3   	; set bit to enable modem line change interrupts

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_FIFO_control

FCR_enable       	* 1:SHL:0	; enable TX and RX FIFOs
FCR_RX_reset      	* 1:SHL:1	; reset RX FIFO
FCR_TX_reset      	* 1:SHL:2	; reset TX FIFO
FCR_RX_trigger_1   	* 2_00:SHL:6	; RX interrupt trigger level
FCR_RX_trigger_4  	* 2_01:SHL:6
FCR_RX_trigger_8   	* 2_10:SHL:6
FCR_RX_trigger_14  	* 2_11:SHL:6

FIFO_trigger    	* FCR_RX_trigger_4	; default to 1 byte trigger
FIFO_size       	* 16			; 16 byte FIFO


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Values in UART_interrupt_ident

IIR_no_interrupt  	* 1		; bit 0 is clear when interrupt pending
IIR_line_status   	* 6  		; 0110 highest priority interrupt
IIR_RX_full       	* 4  		; 0100 second highest priority interrupt
IIR_char_timeout	* 12		; 1100 seconf highest priotity interrupt
IIR_TX_empty      	* 2  		; 0010 third hightst priotity interrupt
IIR_modem        	* 0  		; 0000 lowest priority interrupt
IIR_IRQBits      	* 15 		; 1111
IIR_FIFOs_enabled	* 2_11:SHL:6	; set to indicate FIFOs enabled

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_line_control

LCR_break_enable	* 1 :SHL: 6	; set to enable break signal
LCR_address_divisor	* 1 :SHL: 7	; set to access baud rate divisors

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_modem_control

MCR_DTR_active		* 1 :SHL: 0	; set turn DTR active, clear disable DTR
MCR_RTS_active		* 1 :SHL: 1	; set turn RTS active, clear disable RTS
MCR_out_1         	* 1 :SHL: 2	; control OUT1 line
MCR_out_2         	* 1 :SHL: 3	; control OUT2 line
MCR_loopback     	* 1 :SHL: 4	; turn on loopback facility

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_line_status

LSR_data_ready		* 1 :SHL: 0	; 1 => character is in receive buffer
LSR_overrun		* 1 :SHL: 1	; 1 => overrun error
LSR_parity		* 1 :SHL: 2	; 1 => parity error
LSR_framing		* 1 :SHL: 3	; 1 => framing error
LSR_break		* 1 :SHL: 4	; 1 => break error
LSR_TX_empty		* 1 :SHL: 5	; 1 => transmit buffer empty
LSR_TX_shift_empty 	* 1 :SHL: 6	; 1 => both Transmit buffer and shift register are empty

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_modem_status

MSR_CTS_changed		* 1 :SHL: 0	; 1 => CTS has changed state
MSR_DSR_changed		* 1 :SHL: 1	; 1 => DSR has changed state
MSR_TERI_changed	* 1 :SHL: 2	; 1 => TERI has gone from 0 to 1
MSR_DCD_changed		* 1 :SHL: 3	; 1 => DCD has changed state
MSR_CTS_active		* 1 :SHL: 4	; CTS state
MSR_DSR_active		* 1 :SHL: 5	; DSR state
MSR_RI_active		* 1 :SHL: 6	; RI  state
MSR_DCD_active		* 1 :SHL: 7	; DCD state

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_detect
;
; in:   - r11, as passed into module initialisation - where the module has come
;          from if zero, assume we are in podule 1 otherwise use given address.
;
; out:  -
;
; others: sets ExpansionCardBaseAddress (workspace variable).
;	  sets UARTBaseAddress (workspace variable).
;	  sets the Hardware present bit in Flags
; 	  sets the FIFOs bit in Flags
;
hardware_detect ENTRY

; Work out the address of the UART, if loaded from podule r11 = i/o base
; address, otherwise 0

		TEQ	r11, #0
		BEQ	%5

; we are loaded from podule therefore work out the hardware addresses
		MOV	r0, # 1:SHL:9			; get EASI space address
		ADR 	r1, ExpansionCardBaseAddress	; stash results here
		MOV	r2, #4				; 4 bytes of space
		MOV	r3, r11				; use i/o base address
		SWI	XPodule_ReadInfo
		BVC	%10

; calculate base address for default podule by adding to EASI space base address
5
		MOV	r11, #podule_offset
		LDR	r11, =easi_space_base
		ADD	r11, r11, #podule_offset
		STR	r11, ExpansionCardBaseAddress	; store actual address
10

; UART register set and interrupt status
		LDR	r0, =Modem_InterruptStatusOffset
		LDR	r11, ExpansionCardBaseAddress
		ADD	r10, r11, r0
		STR	r10, InterruptAddress

		LDR	r0, =Modem_RegisterSetOffset
		ADD	r11, r11, r0
		STR	r11, UARTBaseAddress

; perform hardware detection
		MOV	r0, #&F				; set counter for loop
		LDR	r1, ExpansionCardBaseAddress	; load base address
		MOV	r2, #0
20
		STRB	r0, UART_scratch	; write r0 to scratch register
		STR	r2, [r1]
		LDRB	r3, UART_scratch	; read back scratch register
		TEQ	r0, r3			; compare values
		BNE	%30			; hardware not present
		SUBS	r0, r0, #1		; decrement counter
		BNE	%20

		LDR	r0, Flags
		ORR	r0, r0, #flag_UARTPresent
		STR	r0, Flags

; now check for FIFOs, a UART looking like a 16450 will not have FIFOs, a UART
; looking like a 16550 will have FIFOs enable FIFOs
		MOV	r1, #FCR_enable		; need to set bit 0
		STRB	r1, UART_FIFO_control	; write out the byte

; look to see if FIFOs have been enabled
		LDRB	r1, UART_interrupt_ident	; now read FIFO bit
		TST	r1, #IIR_FIFOs_enabled		; check bit 7
		BEQ	%30

; set the relavent bit in our flags word
		ORR	r0, r0, #flag_FIFOsSupported
		STR	r0, Flags			; Store Flags word
30
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		LTORG
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_reset
;
; in:
;
; out:  -
;
; others - UARTDeviceFlags, SF_TXDormant, SF_NoSplitBaudRates
;	   Flags,           flag_OwnIRQ
;
; This code is called to reset the UART, it will reset the modem control
; registers, enable the relevant interrupts and setup the IRQ handler for RISC
; OS.

; This routine may be called at other times than reset, if the power to the
; serial bits has been switched off and then re-applied.
;

hardware_reset  ENTRY	"r0-r4, r11"

; Set the expansion card timing to type C (fastest). We don't use the proper
; SWI here as our podule will not be recognised by the podule manager.
; Need to work out the podule number from first principles ie, from EASI space
; address as code might be on an EPROM and therefore not in the specified
; podule slot.
		LDR	r0, =easi_space_base
		LDR	r1, ExpansionCardBaseAddress
		SUB	r1, r1, r0		; work out podule offset
		MOV	r1, r1, LSR #24		; work out podule number
		MOV	r0, #1			; set 1st bit to start mask
		MOV	r0, r0, LSL r1		; calculate mask
                LDR     r1, =IOC		; lets look at IOC
		LDR	r2, =IOMD_ECTCR		; expansion card speed register

		LDR	r3, [r1,r2]		; load contents of speed register
		ORR	r3, r3, r0		; mask on podule bit
		STR	r3, [r1,r2]		; store back in IOMD

; Now for the rest of the reset.
                LDR     r11, UARTBaseAddress 	; r11 -> UART base

                LDR     r2, UARTDeviceFlags	; load UART device flags into r2
                ORR     r2, r2, #(1:SHL:SF_TXDormant):OR:(1:SHL:SF_NoSplitBaudRates)
                STR     r2, UARTDeviceFlags

                MVN     r1, r2
                BL      hardware_set_FIFO

; Code to claim device vector sitting on expansion bus.
                LDR     r3, Flags           ; do we already own the IRQ vector?
                TST     r3, #flag_OwnIRQ
                BNE     %FT10

; poke in 0xff to the scratch register as some builds require this
		MOV	r0, #&ff
		STRB	r0, UART_scratch

                MOV     r0, #Podule_DevNo	; expansion card interrupt
                ADDR    r1, handle_irq          ; -> irq handler routine
                MOV     r2, wp                  ; r2 -> workspace for device IRQ
		LDR	r3, InterruptAddress	; base address
		MOV	r4, #interrupt_mask					; interrupt mask
                SWI     XOS_ClaimDeviceVector   ; and claim the irq routine
                STRVS   r0, [sp]
                PullEnv VS
                DoError VS                  ; return error (V set, r0 -> block)

                LDR     r3, Flags
                ORR     r3, r3, #flag_OwnIRQ
                STR     r3, Flags
10
; podule IRQ bit needs to be set in IOCIRQMSKB
                MOV     lr, pc			; disable IRQs whilst doing this
                ORR     r1, lr, #I_bit
                TEQP    r1, #0
                LDR     r1, =IOC		; lets look at IOC
                LDRB    r0, [r1, #IOCIRQMSKB]
                ORR     r0, r0, #podule_IRQ_bit
                STRB    r0, [r1, #IOCIRQMSKB]
		TEQP	lr, #0			; restore IRQs now we have dun

; enable all interrupts on podule card, this itself will generate an interrupt so watchout !
                MOV     r0, #IER_receive_available :OR: IER_transmit_empty :OR: IER_line_status :OR: IER_modem_status
                STRB    r0, UART_interrupt_enable

                MOV     r0, #MCR_DTR_active:OR:MCR_out_2:OR:MCR_RTS_active
                STRB    r0, UART_modem_control

                MOV     r1, #0   ; ensure CTS and DSR are updated in SerialFlags
                MOV     r2, #-1
                BL      swi_change_status

; now create a buffer to hold rx data
		MOV	r0, #BufferFlags_SendThresholdUpCalls
		LDR	r1, =input_buffer_size
		MOV	r2, #-1
		SWI	XBuffer_Create
		BVS	%20

		STR	r0, InputBufferHandle
; find internal buffer info
		SWI	XBuffer_InternalInfo
		STR	r0, InputBufferPrivId
		STR	r1, BuffManService
		STR	r2, BuffManWkSpace

                LDR     r1, UARTThreshold
		SWI	XBuffer_Threshold
20
; and one to hold tx data
		MOV	r0, #BufferFlags_SendThresholdUpCalls
		LDR	r1, =output_buffer_size
		MOV	r2, #-1
		SWI	XBuffer_Create
		BVS	%30

		STR	r0, OutputBufferHandle
; find internal buffer info
		SWI	XBuffer_InternalInfo
		STR	r0, OutputBufferPrivId

		BL	buffer_link_device
30
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_remove
;
; in:   SVC mode
;
; out:  -
;
; others - Flags,           flag_OwnIRQ
;	   InputBufferHandle set to -1
;
; This code is called when the device should detach itself from the various vectors that mean that
; it has a grasp on IRQ chains.
;

hardware_remove	ENTRY

; disable card interrupts
                LDR     r11, UARTBaseAddress
                MOV     r0, #0
                STRB    r0, UART_interrupt_enable

                LDR     r3, Flags
                TST     r3, #flag_OwnIRQ	; do we currently own the IRQ
                EXITS   EQ

; release the IRQ
                MOV     r0, #Podule_DevNo	; expansion card interrupt
                ADDR    r1, handle_irq          ; irq handler routine
                MOV     r2, wp
		LDR	r3, InterruptAddress	; base address
		MOV	r4, #interrupt_mask					; interrupt mask
                SWI     XOS_ReleaseDeviceVector
                STRVS   r0, [sp]
                PullEnv VS
                DoError VS

                BIC     r3, r3, #flag_OwnIRQ    ; mark as not owning the IRQ
                STR     r3, Flags

; now remove the buffers
		LDR	r0, InputBufferHandle	; input buffer handle
		SWI	XBuffer_Remove		; ignore errors
		LDR	r0, OutputBufferHandle	; output buffer handle
		SWI	XBuffer_UnlinkDevice	; remove wakeup routine
		SWI	XBuffer_Remove		; ignore errors

		MOV	r0, #-1			; invalidate buffer handles
		STR	r0, InputBufferHandle
		STR	r0, OutputBufferHandle

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;       hardware_set_FIFO
;
; Update state of FIFO
;
; in:   r1 = old flags
;       r2 = new flags
;       r11 -> UART base address
;
; out:  r2 possibly updated
;       All other regs preserved (including flags)
;

hardware_set_FIFO ENTRY

                EOR     lr, r1, r2               	; if not changed then
                TST     lr, #1:SHL:SF_UseFIFOs
                EXITS   EQ                              ; nothing to do

                LDR     lr, Flags
                TST     lr, #flag_FIFOsSupported
                BICEQ   r2, r2, #1:SHL:SF_UseFIFOs
                BEQ     %FT20

                MOV     r1, #FIFO_size
10
                LDRB    lr, UART_data_word
                SUBS    r1, r1, #1
                BNE     %BT10

                TST     r2, #1:SHL:SF_UseFIFOs

                MOVEQ   lr, #0
                MOVNE   lr, #FCR_enable:OR:FCR_RX_reset:OR:FCR_TX_reset:OR:FIFO_trigger
		STRB	lr, FIFOControl
                STRB    lr, UART_FIFO_control
20
                STR     r2, UARTDeviceFlags
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
