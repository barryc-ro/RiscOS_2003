; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : devicecall
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : May 1995
;    Description  : This code should handle all the device calls from DeviceFS.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_device_call
;

handle_device_call ROUT

                BIC     lr, lr, #VFlag          ; clear V flag in link register

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2 	; despatch as required by reason code
		B	%20
10
                B       initialise              ; 0  initialise
                B       finalise                ; 1  finalise
                B       wakeup_TX               ; 2  wake up for TX
                MOVS    pc, lr                  ; 3  wake up for RX
                MOVS    pc, lr                  ; 4  sleep rx
                MOVS    pc, lr                  ; 5  enumerate  directory
                B       create_TX_buffer        ; 6  create buffer for TX
                B       create_RX_buffer        ; 7  create buffer for RX
                B       threshold_halt          ; 8  halt
                B       threshold_resume	; 9  resume
                MOVS    pc, lr                  ; 10 end of data
                B       stream_created		; 11 stream created
20
                ADDR    r0, ErrorBlock_UART_BadDeviceReasonCode
                DoError                   ; return error about naff reason code

		MakeErrorBlock UART_BadDeviceReasonCode
                MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: initialise
;
; in:   r0 = reason code
;       r2 = DeviceFS stream handle
;       r3 = flags for opening the stream : bit 0 - 0 opened for RX, 1 opened
;            for TX
;
; out:  r2 = internal stream handle
;
; This routine is called as a stream is being opened onto the device by
; DeviceFS. It must store the relevant handles and setup the device.
;

initialise      ENTRY  "r0"

                TST     r3, #2_1                ; is it a RX or TX stream?
                STREQ   r2, InputStreamHandle	; input handle passed in r2
                STRNE   r2, OutputStreamHandle  ; output handle passed in r2

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: finalise
;
; in:   r0 = reason code
;       r2 = device driver stream handle, or 0 for all streams
;
; out:  -
;
; This routine is called when a stream is being closed by DeviceFS. When
; received then we should halt the relevant transmission type until the stream
; is re-opened.
;

finalise        ENTRY	"r0-r4"

                MOV     lr, #-1
                MOV     r1, #0
                LDR     r0, InputStreamHandle

                TEQ     r0, r2                  ; check for input stream
                TEQNE   r2, #0                  ; or all streams to close - 0
                STREQ   r1, InputStreamHandle   ; invalidate the input handle
                BLEQ    update_RTS              ; and update RTS

                MOV     lr, #-1
                LDR     r0, OutputStreamHandle

                TEQ     r0, r2                  ; check for output stream
                TEQNE   r2, #0                  ; or all streams to close - 0
		EXITS	NE
                STR     r1, OutputStreamHandle  ; invalidate the output handle

; now establish a call back to link to buffer, as DeviceFS unlinks after this
; is finished - I know, I looked at the sources.

		ADDR	r0, buffer_link_device	; routine to call back
		MOV	r1, r12			; workspace pointer
		SWI	XOS_AddCallBack

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: wakeup_TX
;
; in:   r0 = reason code
;	r2 = device driver stream handle
;
; out:  r0  = 0 is driver wishes to remain dormant, else preserved
;
; This routine is called when data is ready to be transmitted. Data should start
; being passed to the device

wakeup_TX       ENTRY

                LDR     r11, UARTBaseAddress  		; r11 -> UART base
                TEQP    pc, #SVC_mode + I_bit
                LDR     r2, UARTDeviceFlags
                BIC     r2, r2, #1:SHL:SF_TXDormant	; TX buffer not dormant
                STR     r2, UARTDeviceFlags

                BL      update_DTRRTSTXI
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: create_TX_buffer
;
; in:   r0  = reason code
;       r2  = device driver stream handle
;       r3  = suggested flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually create, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.
;

create_TX_buffer ROUT
                CMP     r5, #-1
		LDREQ	r5, OutputBufferHandle	; -1 if not already allocated
 		MOVS	pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: create_RX_buffer
;
; in:   r0  = reason code
;       r2  = device driver stream handle
;       r3  = suggested flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually create, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.
;

create_RX_buffer ROUT
                CMP     r5, #-1
		LDREQ	r5, InputBufferHandle	; -1 if not already allocated
                ORR     r3, r3, #BufferFlags_SendThresholdUpCalls
                LDR     r6, UARTThreshold       ; modify the threshold value
                MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: threshold_halt
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;
; out:  -
;
; This routine is called when the free space in the buffer has dropped below
; the specified threshold. Data receipt should be halted by asserting the
; RTS line and wait until resume point is called

threshold_halt  ENTRY	"r2,r11"

                LDR     lr, InputStreamHandle  ; only interested on input stream
                TEQ     lr, r2		       ; check handles
                EXITS   NE		       ; exit if not input stream

                LDR     r11, UARTBaseAddress   ; r11 -> UART base
                TEQP    PC, #SVC_mode + I_bit  ; disable IRQs
                LDR     r2, UARTDeviceFlags    ; r2 = UART device flags
                ORR     r2, r2, #1:SHL:SF_Thresholded

                TST     r2, #1:SHL:SF_XONXOFFOn       ; if doing XON/XOFF
                ORRNE   r2, r2, #1:SHL:SF_IXOFFedHim  ; indicate XOFFing him
                STR     r2, UARTDeviceFlags	      ; store UART device flags

                MOVNE   lr, #XOFFChar
                STRNEB  lr, UARTXONXOFFChar           ; try to send an XOFF

                BL      update_DTRRTSTXI

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: threshold_resume
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;
; out:  -
;
; This routine is called when the free space in the buffer has risen above the
; specified threshold.

threshold_resume ENTRY	"r2, r11"

                LDR     lr, InputStreamHandle   ; interested on input stream
                TEQ     lr, r2			; check handles
                EXITS   NE			; exit if not input stream

                LDR     r11, UARTBaseAddress    ; r11 -> UART base
                TEQP    PC, #SVC_mode + I_bit   ; disable IRQs
                LDR     r2, UARTDeviceFlags	; r2 = UART device flags
                BIC     r2, r2, #1:SHL:SF_Thresholded

                TST     r2, #1:SHL:SF_XONXOFFOn
                BICNE   r2, r2, #1:SHL:SF_IXOFFedHim ; clear my XOFF bit
                STR     r2, UARTDeviceFlags	     ; store UART device flags
                BEQ     %FT10

                TST     r2, #1:SHL:SF_UserXOFFedHim  ; if user not XOFFing him
                MOVEQ   lr, #XONChar                 ; then send an XON
                STREQB  lr, UARTXONXOFFChar	     ; store UART device flags
10
                BL      update_DTRRTSTXI

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: stream_created
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;       r3 = buffer handle
;
; out:  -
;
; This routine is called after the stream has been created, it gives me a chance
; to setup the device correctly and start transmission etc, etc...
;

stream_created  ENTRY	"r0-r3"
                LDR     r0, InputStreamHandle        ; is it the input stream?
                TEQ     r0, r2
		BNE	%10
                STREQ   r3, InputBufferHandle        ; save buffer handle
		B	%20
10
                STRNE   r3, OutputBufferHandle
20
                BLEQ    update_RTS         ; if opening input stream update RTS
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: update_RTS
;
update_RTS 	ENTRY   "r2, r11"

                TEQP    pc, #SVC_mode + I_bit; update RTS call requires IRQs off
                LDR     r2, UARTDeviceFlags	; and r2 = UARTDeviceFlags
                LDR     r11, UARTBaseAddress	; and r11 -> UART
                BL      update_DTRRTSTXI

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: update_DTRRTSTXI
;
; in: r11 - UARTBaseAddress
;     r2  - UARTDeviceFlags
;

update_DTRRTSTXI	ENTRY   "r0"

                LDRB    r0, UART_modem_control	; get status and control reg

; first work out DTR state
                TST     r2, #1:SHL:SF_DTROff            ; change DTR?
                BICNE   r0, r0, #MCR_DTR_active	        ; set DTR bit if on
                ORREQ   r0, r0, #MCR_DTR_active	        ; clear bit if off

; now work out RTS state
                TST     r2, #1:SHL:SF_UserRTSHigh    ; if user forcing RTS high
                BNE     set_RTS_high		     ; then set high

; if not using RTS handshaking
                TST     r2, #(1:SHL:SF_XONXOFFOn):OR:(1:SHL:SF_NoRTSHandshake)
                BNE     set_RTS_low		   ; then set low
                TST     r2, #1:SHL:SF_Thresholded  ; if no space in RX buffer
                BNE     set_RTS_high 		   ; then set high
                LDR     lr, InputBufferHandle	   ; check we have input
                CMP     lr, #-1
                BEQ     set_RTS_high
set_RTS_low
                ORR     r0, r0, #MCR_RTS_active		; resume
                B       %FT10
set_RTS_high
                BIC     r0, r0, #MCR_RTS_active		; stop
10
                STRB    r0, UART_modem_control	; write back modem control reg

; now update TXI state
                TST     r2, #1:SHL:SF_StoppingBreak	; if stopping break
                BNE     disable_TXI              ; then don't transmit anything
                TST     r2, #1:SHL:SF_BreakOn    ; if transmitting break
                BNE     enable_TXI               ; then always enable it

                TST     r2, #1:SHL:SF_CTSHigh    ; if CTS low, then skip
                BEQ     %FT20
                TST     r2, #1:SHL:SF_CTSIgnore  ; else CTS high and not ignoring CTS
                BEQ     disable_TXI              ; disable TXI
20
                TST     r2, #1:SHL:SF_DSRHigh    ; if DSR low, then skip
                BEQ     %FT30
                TST     r2, #1:SHL:SF_DSRIgnore  ; else DSR high and not ignoring DSR
                BEQ     disable_TXI              ; disable TXI
30
                LDRB    lr, UARTXONXOFFChar      ; if XON or XOFF to send
                TEQ     lr, #0
                BNE     enable_TXI               ; then enableTXI

                TST     r2, #1:SHL:SF_HeXOFFedMe ; if he XOFFed me
                TSTEQ   r2, #1:SHL:SF_TXDormant  ; or if no chars to send
                BNE     disable_TXI              ; then disableTXI
enable_TXI
                LDRB    lr, UART_interrupt_enable   ; interrupt enable register
                BIC     lr, lr, #IER_transmit_empty
                STRB    lr, UART_interrupt_enable

                ORR     lr, lr, #IER_transmit_empty ; enable tx empty ints
                STRB    lr, UART_interrupt_enable   ; store back in register
                EXITS

disable_TXI
                LDRB    lr, UART_interrupt_enable
                BIC     lr, lr, #IER_transmit_empty ; disable tx empty ints
                STRB    lr, UART_interrupt_enable   ; store back in register

                MOV     lr, #0               ; make sure we put no more in FIFO
                STRB    lr, UARTTxByteCount  ; store in workspace variable
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; buffer_wakeup
;
; in:  r12 - workspace pointer
;
; out:
;
; This routine is registered with the buffer manager in hardware_reset routine.
; It is called when data enters the output buffer. It is used to kick the UART
; into transmitting data.

buffer_wakeup   ENTRY	"r11, r2"
                LDR     r11, UARTBaseAddress        ; r11 -> UART base
                TEQP    pc, #SVC_mode + I_bit
                LDR     r2, UARTDeviceFlags
                BIC     r2, r2, #1:SHL:SF_TXDormant ; TX no longer dormant
                STR     r2, UARTDeviceFlags
                BL      update_DTRRTSTXI            ; enable TXI if appropriate
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; buffer_owner_change
;
; in:  r12 - workspace pointer
;
; out:
;
; This routine is registered with the buffer manager in hardware_reset routine.

buffer_owner_change ROUT
		MOV	pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; buffer_link_device
;
; in:  r12 - pointing to workspace
;
; out: all registers preserved
;
; Register ourselves with the output buffer. This routine will be called by
; hardware_reset and via a callback setup in devicefs finalise.

buffer_link_device ENTRY "r0-r4"
		LDR	r0, OutputBufferHandle
		ADDR	r1, buffer_wakeup	; link to wakeup routine
		ADDR	r2, buffer_owner_change	; link to ownwe change routine
		MOV	r4, r12			; workspace pointer
		SWI	XBuffer_LinkDevice
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
