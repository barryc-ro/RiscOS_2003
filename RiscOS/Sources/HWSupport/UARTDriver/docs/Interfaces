     UART Device Driver, version 0.13 © Online Media - software interfaces
     ---------------------------------------------------------------------


 				Contents.
 
	1.  	Software interfaces.
	2.  	SWI UART_GetBufferHandles
	3.  	SWI UART_SerialOp
	3.0 	UART_SerialOp (reason 0) - change serial status flags
	3.1 	UART_SerialOp (reason 1) - change data format
	3.2 	UART_SerialOp (reason 2) - send break
	3.3 	UART_SerialOp (reason 3) - send byte
	3.4 	UART_SerialOp (reason 4) - read byte
	3.5 	UART_SerialOp (reason 5,6) - set baud
	3.6 	UART_SerialOp (reason 8) - handshake extent
	3.7 	UART_SerialOp (reason 9) -enumerate speeds
	4.	UART_FIFOTrigger - set trigger threshold
	5. 	Podule location.
	6.      Commands provided.
	7.	Standby state.

     ---------------------------------------------------------------------
 

1. Software interfaces.

   SWI calls 	UART_SerialOp          (0x83900)
   		UART_GetBufferHandles  (0x83901)
		UART_FIFOTrigger       (0x83902)
	
   DeviceFS	File streams opened/closed onto path UART:
	
   Buffers	Direct insertion/removal/flushing of software buffers.

   *UARTInfo    Provide status information.
   
     ---------------------------------------------------------------------

2. SWI UART_GetBufferHandles

   This SWI returns the allocated buffer handles allowing direct control of 
   the buffers.

 	in:
 	out: r0 - Input buffer handle
	     r1 - Output buffer handle
	     
     ---------------------------------------------------------------------

3. SWI UART_SerialOp

   This call has a reason code passed in r0. The call is directly compatible 
   with the OS_SerialOp SWIs found in RiscOS as standard and documented in the
   Programmers Reference Manuals. Due to the number of different reason codes,
   this call will be docuented in sections.

     ---------------------------------------------------------------------

3.0 UART_SerialOp (reason 0) - change serial status flags

 	in:  	r0  = 0
       		r1  = EOR mask
       		r2  = AND mask

	out:  	r1  = OLD flags
       		r2  = NEW flags


	New flags  = (Old flags AND <and mask>) EOR <eor mask>
	
   This code will modify the flags within the UART controller, it is also used
   to return the state in the top 16 bits.  When called the routine will 
   attempt to reprogram the values as required, it also compiles the status 
   bits.

   This call is used to read/write the serial status flags as listed below.

   bit  rw/ro  value   meaning

    0   r/w      0     No software control. Use RTS handshaking if bit 5 clear.

                 1     Use XON/XOFF protocol. Bit 5 ignored.

    1   r/w      0     Use ~DCD bit. If ~DCD bit in the status register goes 
    		       high, then cause a serial event.  Also, if a character 
    		       is received when ~DCD is high then cause a serial event,
    		       and do not enter the character into the buffer.

                 1     Ignore the ~DCD bit. Note that some  serial chips (GTE 
                       and CMD) have reception and transmission problems if 
                       this bit is high.

    2   r/w      0     Use the ~DSR bit. If the ~DSR bit in the status register
    		       is high, then do not transmit characters.

                 1     Ignore ~DSR bit.

    3   r/w      0     DTR on (normal operation).
                 1     DTR off (on 6551 cannot use serial in this state).

    4   r/w      0     Use the ~CTS bit. If the ~CTS bit in the status register
    		       is high, then do not transmit characters.

                 1     Ignore ~CTS bit (not supported on 6551 hardware).

    5   r/w      0     Use RTS handshaking if bit 0 is clear.
                 1     Do not use RTS handshaking. This bit is ignored if bit 0
                       is set.

    6   r/w      0     Input not suppressed.
                 1     Input is suppressed.

    7   r/w      0     RTS controlled by handshaking system (low if no RTS 
    		       handshaking)
                 1     RTS high. Users should only modify this bit if RTS 
                       handshaking is NOT in use.

    8   r/w      0     Do not use FIFOs (if present)
                 1     Use FIFOs (if present)

    9..15 ro     0     Reserved for future expansion.

    16  ro       0     XOFF not received
                 1     XOFF has been received. Transmission is stopped by this
                       occurence.

    17  ro       0     The other end is intended to be in XON state.
                 1     The other state is intended to be in XOFF state. When 
                       this bit is set, then it means that an XOFF has been 
                       sent and it will be cleared when an XON is sent by the 
                       buffering software.  Note that the fact that this bit is
                       set does not imply that the other end has received an 
                       XOFF yet.

    18  ro       0     The ~DCD bit is low, ie. carrier present.
                 1     The ~DCD bit is high, ie. no carrier. This bit is stored
                       in the variable and updated on modem status interrupts

    19  ro       0     The ~DSR bit is low, ie. 'ready' state.
                 1     The ~DSR bit is high, ie. 'not-ready' state. This bit is
                       stored in the variable and updated on modem status 
                       interrupts

    20  ro       0     The ring indicator bit is low.
                 1     The ring indicator bit is high. This bit is not stored 
                       in the variable but is read directly from the hardware.

    21  ro       0     CTS low -> clear to send.
                 1     CTS high -> not clear to send. This bit is stored in the
                       variable and updated on modem status interrupts.

    22  ro       0     User has not manually sent an XOFF
                 1     User has manually sent an XOFF

    23  ro       0     Space in receive buffer above threshold
                 1     Space in receive buffer below threshold

    24..27  ro   0     Reserved for future expansion.

    28  ro       0     Not using serial FIFOs
                 1     Using serial FIFOs

    29  ro       0     We have normal characters to transmit
                 1     No normal characters to transmit (excluding breaks, 
                       XON/XOFFs)

    30  ro       0     Not sending a break signal
                 1     Currently sending a break signal

    31  ro       0     Not trying to stop a break
                 1     Trying to stop sending a break

     ---------------------------------------------------------------------

3.1 UART_SerialOp (reason 1) - change data format

 	in:   	r0  = 1
       		r1  = -1 to read, else set to new value

 	out:  	r1  = old value.

   This call is used to modify the serial data formats, the following bits are
   defined within r1. It will setup the stop bits, word length and parity 
   checking bits.

 r1 bits  line control reg  rw/ro   meaning
 -------  ----------------  -----   -------

  b0, b1      b1, b0		    word length
  0   0       1   1          rw     8 bit word
  0   1       1   0          rw     7 bit word
  1   0       0   1          rw     6 bit word
  1   1       0   0          rw     5 bit word

  b2          b2      	            stop bits
  0           0              rw     1 stop bit
  1           1                     2 top bits in most cases
                                    1 stop bit if 8 bit word with parity
                                    1.5 stop bits if 5 bit word without parity

  b3          b3             rw     parity
  0           0       		    disabled
  1           1                     enabled

  b4, b5      b4, b5         rw     parity type
  0   0       0   0                 odd parity
  1   0       1   0                 even parity
  0   1       0   1                 parity always 1 on TX
  1   1       1   1   		    parity always 0 on TX

  b6, b31                    ro     always 0, reserved for future expansion

     ---------------------------------------------------------------------

3.2 UART_SerialOp (reason 2) - send break

 	in:   	r0  = 2
       		r1  = length of break in centi-seconds.

 	out:  -

   This call send_bytes a break for the specified length of time in centi-
   seconds, this is done by enabling IRQs and then send_byteing a start break,
   waiting for the metronome to reach the required value and then send_byteing
   a stop break.

     ---------------------------------------------------------------------

3.3 UART_SerialOp (reason 3) - send byte

 	in:   	r0  = 3
       		r1  = character to be sent

 	out:  	C set, character not sent.
       		C clear, character was sent.

     ---------------------------------------------------------------------

3.4 UART_SerialOp (reason 4) - read byte

  	in:   	r0  = 4

 	out:  	C clear => r1  = character
       		C set => no character obtained

     ---------------------------------------------------------------------

3.5 UART_SerialOp (reason 5,6) - set baud

 	in:   	r0  = 5 or 6
       		r1  = new baud rate / -1 to read

 	out:  	r1  = previous state

   This call allows you to modify the receive/transmit baud rate using the 
   following table.

                0  - 9600
                1  - 75
                2  - 150
                3  - 300
                4  - 1200
                5  - 2400
                6  - 4800
                7  - 9600
                8  - 19200
                9  - 50
                10 - 110
                11 - 134.5
                12 - 600
                13 - 1800
                14 - 3600
                15 - 7200
                16 - 38400
                17 - 57600
                18 - 115200
                
     ---------------------------------------------------------------------

3.6 UART_SerialOp (reason 8) - handshake extent

 	in:   	r0  = 8
       		r1  = handshaking extent / -1 to read

 	out:  	r1  = previous value

   This routine is used to change the threshold value. This call when made will
   change the handshaking extent on input streams.  The code then call 
   DeviceFS, which in turn calls the Buffer Manager to set things up correctly.

     ---------------------------------------------------------------------

3.7 UART_SerialOp (reason 9) -enumerate speeds

 	in:   	r0  = 9

 	out:  	r0 preserved
       		r1 -> table of words containing supported speeds in 0.5bit/sec
       		r2 = number of entries in table

   This routine returns a pointer to a table of supported serial speeds.

     ---------------------------------------------------------------------
4. UART_FIFOTrigger.

   SWI interface to change the trigger level in the FIFO buffer. The modem card
   will generate an IRQ whenever the number of bytes in the FIFO equals or exceeds
   the threshold value. By default this is set to 4.
   
   	in:	r0 = threshold value (-1 to read)
   	out:	r0 = current value
   	
   Valid threshold values are 1,4,8,14
   
5. Podule location.

   This version of the driver software has been compiled to recognise the modem
   hardware in podule 1. This will be the correct location in a Roadster STB2
   and as the driver will be part of the OS ROM, this is the required behaviour.
   If the driver is included on an EPROM on the podule, it will automatically
   know its EASI space address as it is passed in by RISC OS - hence the podules
   will be relocatable.
   
6. Commands provided

   A command UARTInfo has been added to help diagnostics when using the driver.
   The command provides the following information.
   	Expansion card       : <podule slot number>
   	UART base address    : <address of UART in EASI space>
   	Input buffer handle  : <buffer number>
   	Output buffer handle : <buffer number>
   	
   If the modem hardware cannot be found, the information message expansion card
   not found will be displayed.
   
7. Standby state.

   When the STB goes into its standby state, a service call PreReset is issued.
   This is picked up by the UARTDeviceDriver and the DTR line is asserted low.
   This is a legal method of terminating a connection.
   

Document history :
	Draft version - Wed 05th July 1995,
	Modified      - Fri 28th July 1995.
	Modified      - Mon 4th September 1995
	Added SWI     - Fri 10th November 1995
	Terminate call on standby - Mon 13th November 1995
	Changed FIFO trigger threshold - Fri 12th January 1996
	Added UARTInfo command - Tue 30th January 1996
	
Rich Buckley.