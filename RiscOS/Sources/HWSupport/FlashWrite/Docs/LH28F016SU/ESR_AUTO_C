int ESR_automatic_erase_suspend_to_write(int *write_address, int *erase_address, int data)
/* This procedure writes to one block while another is erasing.            */
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.                 */
int *block_base = base(erase_address);
/* Find pointer to base of block being erased.                             */

*erase_address = 0x7171;
*/ Read Extended Status Register command                                   */
while (BIT_3 & *(block_base + 1));
*/ Poll BSR until BSR.3 of targer address = 0 (queue available).           */
*/ BSR is 1 word above base of target block in ESR space.                  */
*erase_address = 0x2020;
*/ Erase Block command                                                     */
*erase_address = 0xD0D0;
*/Confirm command                                                          */
*erase_address = 0x7171;
*/ Read Extended Status Register command                                   */
While (BIT_3 & *(block_base + 1));
*/ Poll BSR until BSR.3 of target address = 0 (queue available).           */
*/ BSR is 1 word above base of target block in ESR space.                  */
*write_address = 0x4040;
*/ Word write command                                                      */
*write_address = data;
*/ Write actual data.                                                      */
*/ Erase suspends, write takes place, then erase resumes.                  */
*erase_address = 0x7171;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 1)));
*/ Poll BSR until BSR.7 of erase address = 1 (block ready).                */
*/ BSR is 1 word above base of target block in status reg space.           */

ESR = (*(block_base + 2) << 8) + (*(block_base + 1) & LOW_BYTE);
*/ Put GSR  in top byte and BSR  in bottom byte of return value.           */
*block_base = 0x5050;
*/ Clear Statue Registers command                                          */
*block_base = 0xFFFF;
*/ Write FFH after last operation to reset device to read array mode.      */
return(ESR);
}

