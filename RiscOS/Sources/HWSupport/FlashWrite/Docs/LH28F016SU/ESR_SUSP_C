int ESR_suspend_to_read_array(int *address, int *result)
/* This procedure suspends an erase on the LH28F016SA.                     */
{
/* Address is assumed to point to location to be read.                     */
/* result is used to hold read value until proecedure is complete.         */
int ESR;
/* ESR variable is used to return contents of GSR and BSR.                 */
int *block_base = base(address);

*address = 0x7171;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target address = 1 (block ready).               */
/* BSR is 1 word above base of target block in ESR space.                  */
*address = 0xB0B0;
/* Operation Suspend command                                               */
*address = 0x7171;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 2)));
/* Poll GSR until GSR.7 =1 (WSM ready).                                    */
if (BIT_6 & *(block_base + 2)) {
/* GSR.6 = 1 indicates an operation was suspended on this device,          */
        *address = 0xFFFF;
        /* Read Flash Array command                                        */
        *result = *address;
        /* Read the data                                                   */
        *address = 0xD0D0;
        /* Resume the operation.                                           */
} else {
        *address = 0xFFFF;
        /* Read Flash Array command                                        */
        *result = *address;
        /* Read the data.                                                  */
}

*address = 0x7171;
/* Read Extended Status Registers command                                  */
ESR = (*(block_base + 2) << 8) + (*(block_base + 1) & LOW_BYTE);
/* Put GSR in top byte and BSR in bottom byte of return value.             */
*address = 0x5050;
/* Clear Status Registers command                                          */
return(ESR);
}
