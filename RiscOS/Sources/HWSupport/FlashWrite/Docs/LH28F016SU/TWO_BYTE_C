int two_byte_write(char *address, char *data, int byte_count)
/* This routine is used when BYTE# is low, i.e. the LH28F016SA             */
/* is in byte mode, to emulate a word write.                               */
/* Because of this, commands are given as 0x00XY instead of 0xXYXY as in   */
/* the rest of the code presented here.                                    */
/* *data is a byte array containg the low byte, high byte consecutively of */
/* each word.                                                              */
{
int counter, ESR;
/* ESR variable is used to return contents of GSR and BSR.                 */
char *block_base = byte_base(address);
/* Find pointer to base of block.                                          */

for (counter = 0; counter < byte_count; counter++) {
        *address = 0x0071 ;
        /* Read Extended Status Registers command                          */
        while (BIT_3 & *(block_base + 2));
        /* Poll BSR until BSR.3 of target address = 0 (queue available).   */
        *address = 0x00FB;
        /* Two-byte Write command                                          */
        *address = data[counter++];
        /* Load one byte of data register; A0 = 0 loads low byte, A1 high  */
        *address = data[counter];
        /* LH28F016SA automatically loads alternate byte of data register  */
}

/* Write is intiated. Now we poll for successful completion.               */
*address = 0x0071;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 2)));
/* Poll BSR until BSR. 7 of target address = 1 (block ready).              */
/* BSR is 1 word above base of target block in status reg space.           */

ESR = (*(block_base + 4) << 8) + (*(block_base + 2) & LOW_BYTE);
/* Put GSR  in top byte and BSR in bottom byte of return value.            */
*address = 0x0050;
/* Clear Status Registers command                                          */
*address = 0x00FF;
/* Write FFH after last operation to reset device to read array mode.      */
return(ESR);
}
