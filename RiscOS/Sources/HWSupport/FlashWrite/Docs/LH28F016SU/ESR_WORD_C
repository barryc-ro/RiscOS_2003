int ESR_word_write(int *write_address, int *data, int word_count)
/* This procedure writes a word to the LH28F016SA.                         */
{
int counter, ESR;
/* counter is used to loop through data array                              */
/* ESR variable is used to return contents of GSR and BSR.                 */
int *block_base = base(write_address);

for (counter = 0, counter < word_count; counter++) {
        *write_address = 0x7171;
        /* Read Extended Status Registers command                          */
        while (BIT_3 & *(block_base + 1));
        /* Poll BSR until BSR.3 of target address = 0 (queue available).   */
        /* BSR is 1 word above base of target block in status reg space.   */
        *write_address = 0x1010;
        /* Write word command                                              */
        *write_address = data[counter];
        /* Write actual data.                                              */
}

*write_address = 0x7171;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 1))):
/* Poll BSR until BSR.7 of target address = 1 (block ready).               */
ESR = (*(block_base + 2) << 8) + (*(block_base + 1) & LOW_BYTE);
/* Put GSR in top byte and BSR in bottom byte of return value.             */
*write_address = 0x5050;
/* Clear Status Registers command                                          */
*write_address = 0xFFFF;
/* Write FFH after last operation to reset device to read array mode.      */
return(ESR);
}
