int CSR_erase_suspend_to_read(int *read_address, int *erase_address, int *result)
{
/* This procedure suspends an erase operation to do a read.                */
int CSR;
/* CSR variable is used to return contents of CSR register.                */

/* Assume erase is underway in block beginning at erase_address.           */
*erase_address = 0xB0B0;
/* Erase Suspend cmmand                                                    */
while (!(BIT_7 & *erase_address));
/* Poll CSR until CSR.7 = 1 (WSM ready)                                    */
if (BIT_6 & *erase_address) {
/* If CSR.6 = 1 (erase incomplete)                                         */
        *erase_address = 0xFFFF;
        /* Read Flash Array command                                        */
        *result = *read_address;
        /* Do the actual read. Any number of reads can be done here.       */
        *erase_address = 0xD0D0;
        /* Erase Resume command                                            */
} else {
        *erase_address = 0xFFFF;
        /* Read Flash Array command                                        */
        *result = *read_address;
        /* Do the actual read. Any number of reads can be done here.       */
}
*erase_address = 0x7070;
/* Read CSR command                                                        */
CSR = *erase_address;
/* Save CSR before clearing it.                                            */
*erase_address = 0x5050;
/* Clear Status Registers command                                          */
return(CSR);
/* Return CSR to be checked for status of operation.                       */
}

