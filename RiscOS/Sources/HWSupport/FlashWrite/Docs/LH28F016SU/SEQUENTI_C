void sequential_load_to_pagebuffer(int *device_address, char *start_address, int word_count, int* data)
/* This procedure loads multiple words to a page buffer.                   */
/* device_address points to base of chip.                                  */
{
/* Low byte of word_count must be 127 or fewer, high must be 0.            */
/* word_count is zero-based counting, i.e word_count == 0 loads 1 word,    */
/* word_count == 1 loads 2 words etc.                                      */
/* High byte of word_count exists for future Page Buffer expandability.    */
char counter;
/* counter is used to keep track of words written.                         */

*device_address = 0x7171;
/* Read Extended Status Registers command                                  */
while (BIT_2 & *(device_address + 2));
/* Poll GSR until GSR.2 = 0 (page buffer available).                       */
*device_address = 0xE0E0;
/* Sequential Page Buffer Load command                                     */
*start_address = word_count;
*start_address = 0;
/* Automatically loads high byte of count register                         */
for (counter = 0; counter <= word_count; counter++)
        *(start_address + counter) = data[counter];
/* Loop through data, writing to page buffer.                              */
/* This routine does not affect status registers.                          */
*device_address = 0xFFFF;
/* Write FFH after last operation to reset device to read array mode.      */
}

