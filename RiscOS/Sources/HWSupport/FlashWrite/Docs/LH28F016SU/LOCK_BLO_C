int lock_block(int *lock_address)
/* This procedure locks a block on the LH28F016SA.                         */
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.                 */

int *block_base = base(lock_address);
/* Find pointer to base of block being locked.                             */

*lock_address = 0x7171;
/* Read Extended Status Registers command                                  */
while (BIT_3 & *(block_base + 2));
/* Poll GSR until GSR.3 = 0 (queue available).                             */
set_pin(WPB, HIGH);
/* Disable write protection by setting WPB high.                           */
set_pin(VPP, HIGH);
/* Enable Vpp, wait for ramp if necessary in this system.                  */
*lock_address = 0x7777;
/* Lock Block command                                                      */
*lock_address = 0xD0D0;
/* Confirmation command                                                    */
*lock_address = 0x7171;
/* Read Extended Status Registers command                                  */
while (!(BIT_7 & *(block_base + 2)));
/* GSR is 2 words above 0; poll GSR  until GSR.7 = 1 (WSM ready).          */

ESR = (*(block_base + 2) << 8) + (*(block_base + 1) & LOW_BYTE);
/* Put GSR in top byte and BSR in bottom byte of return value.             */
*lock_address = 0x5050;
/* Clear Status Registers command                                          */
*lock_address = 0xFFFF;
/* Write FFH after last operation to reset device to read array mode.      */
return(ESR);
}
