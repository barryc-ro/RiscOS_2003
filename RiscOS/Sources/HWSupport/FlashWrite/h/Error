/* error.h
 *
 *      General purpose error header.
 */

#ifndef __error_h
#define __error_h

#define ERROR_BADSWI	0x00000112
#define ERROR_BADTYPES	0x000000AF
#define ERROR_BADPARAMS	0x000001ED
#define ERROR_LOCKED	0x000000C3
#define ERROR_BADHARD	0x00000603

#define Error_NumberBase       0x00815A00

#define Error_Generic_InvalidOffset_Num           (Error_NumberBase)
#define Error_Generic_InvalidOffset_Text          "Invalid Offset."

#define Error_WriteWord_Error_Num                 (Error_NumberBase + 1)
#define Error_WriteWord_Error_Text                "Error writing word."

#define Error_WriteWord_VoltageRangeError_Num     (Error_NumberBase + 2)
#define Error_WriteWord_VoltageRangeError_Text    "Voltage Range Error writing word."

#define Error_WriteWord_DeviceProtectError_Num    (Error_NumberBase + 3)
#define Error_WriteWord_DeviceProtectError_Text   "Device Protect Error writing word."

#define Error_WriteWord_ProgrammingError_Num      (Error_NumberBase + 4)
#define Error_WriteWord_ProgrammingError_Text     "Programming Error writing word."

#define Error_WriteBuffer_BufferBusy_Num          (Error_NumberBase + 5)
#define Error_WriteBuffer_BufferBusy_Text         "Page buffer busy."

#define Error_WriteBuffer_Error_Num               (Error_NumberBase + 6)
#define Error_WriteBuffer_Error_Text              "Error writing page buffer."

#define Error_WriteBuffer_VoltageRangeError_Num   (Error_NumberBase + 7)
#define Error_WriteBuffer_VoltageRangeError_Text  "Voltage Range Error writing buffer."

#define Error_WriteBuffer_DeviceProtectError_Num  (Error_NumberBase + 8)
#define Error_WriteBuffer_DeviceProtectError_Text "Device Protect Error writing buffer."

#define Error_WriteBuffer_ProgrammingError_Num    (Error_NumberBase + 9)
#define Error_WriteBuffer_ProgrammingError_Text   "Programming Error writing buffer."

#define Error_EraseBlock_Error_Num                (Error_NumberBase + 10)
#define Error_EraseBlock_Error_Text               "Error erasing block."

#define Error_EraseFlash_Error_Num                (Error_NumberBase + 11)
#define Error_EraseFlash_Error_Text               "Error erasing flash."


#define ERROR_CREATE(name)     error_create (name##_Num, name##_Text)

/* Declare the given error in a memory efficient way.
 */
#define ERROR_STRUCT(name,text) \
        struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_##name,text}

/* Declare the given error as external.
 */
#define ERROR_EXTERN(name) \
        extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))

_kernel_oserror *error_create (int, char *);

#endif

/* end of error.h */
