/* FlashProg.c */

/* ANSI includes */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/* Risc OS includes */
#include "kernel.h"
#include "swis.h"

/* Other libraries */
#include "DebugLib/debuglib.h"

/* Local includes */
#include "module.h"
#include "flashprog.h"
#include "error.h"

#undef  GIDEON
#define FUNAI2

#ifdef GIDEON
  #define SA   /* Define the chip as an SA type chip */
  #define ROM0 /* Define the chip as residing at ROM space 0 */
  #define ROM_BASE      0x03800000u /* Address of the base of ROM bank 0 */
  #define IMAGE_SIZE    0x00100000u /* Size of flash image (in words) */   /* [4MBytes] */
  #define PB_NO_WORDS          128u /* Number of words that fit in page buffer */
  #define NUM_DEVICES            1u /* Number of paired 32bit devices */
#endif

#ifdef FUNAI2
  #define S5   /* Define the chip as an S5 type chip */
  #define ROM1 /* Define the chip as residing at ROM space 1 */
  #define ROM_BASE      0x81000000u /* Address of ROM bank 2 in the copy of physical space*/
  #define IMAGE_SIZE    0x00200000u /* Size of flash image (in words) */   /* [8MBytes] */
  #define PB_NO_WORDS           16u /* Number of words that fit in page buffer */
  #define NUM_DEVICES            2u /* Number of paired 32bit devices */
#endif

/*********/
/* Sizes */

#define BLOCK_NO_WORDS  0x00008000u /* Size of a block (in words)  [32Kwords] */
#define PBS_PER_BLOCK   (BLOCK_NO_WORDS / PB_NO_WORDS) /* Number of page buffer writes
                                                          needed for each block of flash */
#define NUM_BLOCKS      (IMAGE_SIZE / BLOCK_NO_WORDS)  /* Number of blocks in a device */


/*************/
/* Addresses */

#ifdef ROM0
  #define ROMCONTROL	0x03200080u /* Address of the 7500(FE) ROMCR0 register */
#endif

#ifdef ROM1
  #define ROMCONTROL	0x03200084u /* Address of the 7500(FE) ROMCR1 register */
#endif

#define IOLINES_ADDRESS 0x0320000cu /* Address of the 7500(FE) IOLINES register */


/******************/
/* Offsets for SA */

#define BSR_OFFSET      0x00000001u /* Offset from block base */
#define GSR_OFFSET      0x00000002u /* Offset from flash base */
/* CSR is available at any address after many commands */

#define MANUFACTURER_ID_OFFSET  0x000000000u /* Offset from flash base */
#define DEVICE_ID_OFFSET        0x000000001u /* Offset from flash base */


/******************/
/* Offsets for S5 */

#define S5_BSR_OFFSET   0x00000002u /* Offset from block base */
/* XSR is available at any address after a write to buffer command */
/* SR is available at any address after many commands */

#define S5_QUERY_OFFSET         0x00000055u /* Offset from flash base */
#define S5_QUERY_STRING_OFFSET  0x00000010u /* Offset from flash base */


/****************/
/* Masks for SA */

#define GSR_1_MASK      0x00020002u
#define GSR_2_MASK	0x00040004u
#define GSR_5_MASK      0x00200020u

#define BSR_3_MASK      0x00080008u
#define BSR_5_MASK	0x00200020u
#define BSR_7_MASK	0x00800080u

#define CSR_4_MASK	0x00100010u
#define CSR_5_MASK	0x00200020u
#define CSR_7_MASK      0x00800080u


/****************/
/* Masks for S5 */

#define S5_SR_1_MASK    0x00020002u
#define S5_SR_3_MASK    0x00080008u
#define S5_SR_4_MASK    0x00100010u
#define S5_SR_5_MASK    0x00200020u
#define S5_SR_7_MASK    0x00800080u

#define S5_XSR_7_MASK   0x00800080u

#define S5_BSR_0_MASK   0x00010001u


/********************************************************/
/* 28F160S5 commands (16bit-wide, replicated to 32bits) */

#define S5_FULLCHIP_ERASE        0x00300030u
#define S5_ERASE_CONFIRM         0x00D000D0u
#define S5_ERASE_BLOCK           0x00200020u
#define S5_WRITE_TO_BUFFER       0x00E800E8u
#define S5_BUFFER_WRITE_CONFIRM  0x00D000D0u
#define S5_WRITE_WORD            0x00400040u
#define S5_QUERY                 0x00980098u
#define S5_CLEAR_STATUS_REG      0x00500050u


/*******************************************************************/
/* 28F008SA-compatible commands (16bit-wide, replicated to 32bits) */

#define WRITE_WORD	0x40404040u
#define READ_ID		0x00900090u
#define READ_ARRAY	0x00FF00FFu
#define ERASE_BLOCK     0x20202020u
#define READ_CSR        0x00700070u


/***********************************************************/
/* 28F016SA/SV commands (16bit-wide, replicated to 32bits) */

#define CLEAR_SR	0x50505050u
#define READ_ESR	0x00710071u
#define ERASE_ALL	0x00A700A7u
#define ERASE_CONFIRM	0x00D000D0u
#define LOAD_PB		0xE0E0E0E0u
#define WRITE_PB	0x0C0C0C0Cu


/********************/
/* Type definitions */

typedef unsigned int volatile * address_t;


/***********/
/* Globals */

static address_t chip_address = (address_t) ROM_BASE;


/**********/
/* Macros */

#define flash_write_command(address, command) (*(address_t) address) = (unsigned int) command


/**********************/
/* Assembler routines */

extern void irqs_off (void);
extern void irqs_on (void);
extern void led_on (void *);
extern void write_enable (void *);
extern void write_disable (void *);
extern void reset (void);


/*****************************/
/* Local function prototypes */

static _kernel_oserror *flash_write_word (address_t, unsigned int);
static _kernel_oserror *flash_write_pagebuffer (address_t, address_t, unsigned int *);
static _kernel_oserror *flash_write_block (address_t, unsigned int *);
static _kernel_oserror *flash_erase_block (address_t);
static _kernel_oserror *flash_erase_all (address_t);
static void vpp_on (int);

static address_t flash_chip_base (address_t);


/*********************/
/* Init and finalise */

_kernel_oserror *flash_initialise (void *pw, int podule_base)
{
  /* Nothing to do here */

  /* Auto-detect device info??? */

  return NULL;

  NOT_USED (pw); NOT_USED (podule_base);
}


_kernel_oserror *flash_finalise (void *pw)
{
  /* Nothing to do here */
  return NULL;

  NOT_USED (pw);
}


/****************/
/* SWI handlers */


/* FlashWrite_DeviceInfo SWI */
_kernel_oserror *flash_swi_deviceinfo (_kernel_swi_regs *r)
{
  r->r[0] = IMAGE_SIZE * sizeof (unsigned int);
  r->r[1] = NUM_DEVICES;
  r->r[2] = BLOCK_NO_WORDS * sizeof (unsigned int);
  r->r[3] = PB_NO_WORDS * sizeof (unsigned int);

  return NULL;
}


/* FlashWrite_WriteWord SWI */
_kernel_oserror *flash_swi_writeword (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  address_t location;
  unsigned int word_offset;

  /* If the offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
    return ERROR_CREATE (Error_Generic_InvalidOffset);

  /* Take word byte-offset and turn it into a word-offset. */
  word_offset = r->r[0] / sizeof (unsigned int);

  /* If the offset is off the end of the flash space, return an error */
  if (word_offset >= IMAGE_SIZE)
    return ERROR_CREATE (Error_Generic_InvalidOffset);


#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

/* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  /* Take word byte-offset and turn it into word-offset. */
  location = chip_address + word_offset;

  er = flash_write_word (location, (unsigned int) r->r[1]);
  dprintf (("SWI", "write_word = %p\n", er));

  /* Return flash to read array mode */
  flash_write_command (flash_chip_base (location), READ_ARRAY);

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);
  /* Turn off programming voltage */
  vpp_on (0);

  return er;
}


/* FlashWrite_EraseBlock SWI */
_kernel_oserror *flash_swi_eraseblock (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  address_t location;
  unsigned int block_offset;

  /* If the offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
    return ERROR_CREATE (Error_Generic_InvalidOffset);

  /* Take block byte-offset and turn it into a word-offset. */
  block_offset = r->r[0] / sizeof (unsigned int);

  /* If the offset is off the end of the flash space, return an error */
  if (block_offset > (IMAGE_SIZE - BLOCK_NO_WORDS))
    return ERROR_CREATE (Error_Generic_InvalidOffset);

  /* If the offset isn't on a block boundary, return an error */
  if ((block_offset % BLOCK_NO_WORDS) != 0)
    return ERROR_CREATE (Error_Generic_InvalidOffset);

#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

  /* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  /* Calculate block location */
  location = chip_address + block_offset;

  er = flash_erase_block (location);
  dprintf (("SWI", "erase_block = %p\n", er));

  /* Return flash to read array mode */
  flash_write_command (flash_chip_base (location), READ_ARRAY);

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);
  /* Turn off programming voltage */
  vpp_on (0);

  return er;
}


/* FlashWrite_EraseFlash SWI */
_kernel_oserror *flash_swi_eraseflash (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  int i;
  address_t location;

#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

  /* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  er = flash_erase_all (chip_address);

  location = chip_address;

  for (i = 0; i < NUM_DEVICES; i++)
  {
    /* Return flash to read array mode */
    flash_write_command (flash_chip_base (location), READ_ARRAY);

    location += (IMAGE_SIZE / NUM_DEVICES);
  }

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);
  /* Turn off programming voltage */
  vpp_on (0);

  return er;
  NOT_USED (r);
}


/* FlashWrite_WriteFlash SWI */
_kernel_oserror *flash_swi_writeflash (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  int i;
  address_t block_address, location;

  unsigned int *words;  /* Pointer to the image data to write to flash */
  unsigned int *block_data;

  words = (unsigned int *) r->r[0];

#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

  /* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  block_address = chip_address; /* Start at the base of the chip */
  block_data = words;

  /* NUM_BLOCKS "blocks" of flash */
  for (i = 0; i < NUM_BLOCKS; i++)
  {
    er = flash_write_block (block_address, block_data);
    if (er != NULL)
      break;

    block_address += BLOCK_NO_WORDS;
    block_data += BLOCK_NO_WORDS;
  }

  location = chip_address;

  for (i = 0; i < NUM_DEVICES; i++)
  {
    /* Return flash to read array mode */
    flash_write_command (flash_chip_base (location), READ_ARRAY);

    location += (IMAGE_SIZE / NUM_DEVICES);
  }

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);

  return er;
}


/* FlashWrite_WriteBuffer SWI */
_kernel_oserror *flash_swi_writebuffer (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  unsigned int block_offset, pb_offset;

  unsigned int *words;  /* Pointer to the image data to write to flash */

  /* If the buffer offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
  {
    dprintf (("Error", "Non-word aligned offset\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* Take page buffer byte-offset and turn it into a word-offset. */
  pb_offset = r->r[0] / sizeof (unsigned int);

  /* Take page buffer offset and work out the block offset for the corresponding block */
  block_offset = (pb_offset / BLOCK_NO_WORDS) * BLOCK_NO_WORDS;

  /* If the block offset takes the block off the end of the flash space, return an error */
  if (block_offset > (IMAGE_SIZE - BLOCK_NO_WORDS))
  {
    dprintf (("Error","Block offset off end of flash\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* If the buffer offset takes the buffer off the end of a flash device, return an error */
  if ((pb_offset % (IMAGE_SIZE / NUM_DEVICES)) > ((IMAGE_SIZE / NUM_DEVICES) - PB_NO_WORDS))
  {
    dprintf (("Error","Buffer offset off end of flash device\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

/*************************************************************/

  words = (unsigned int *) r->r[1];

#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

  /* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  er = flash_write_pagebuffer (chip_address + block_offset,
                               chip_address + pb_offset, words);

  /* Return flash to read array mode */
  flash_write_command (flash_chip_base (chip_address + block_offset), READ_ARRAY);

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);
  /* Turn off programming voltage */
  vpp_on (0);

  return er;
}


/* FlashWrite_WriteBlock SWI */
_kernel_oserror *flash_swi_writeblock (_kernel_swi_regs *r)
{
  _kernel_oserror *er = NULL;
  unsigned int block_offset;

  unsigned int *words;  /* Pointer to the image data to write to flash */

  /* If the block offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
  {
    dprintf (("Error", "Non-word aligned offset\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* Take the block byte-offset and turn it into word-offset. */
  block_offset = r->r[0] / sizeof (unsigned int);

  /* If the block offset takes the block off the end of the flash space, return an error */
  if (block_offset > (IMAGE_SIZE - BLOCK_NO_WORDS))
  {
    dprintf (("Error", "Block offset off end of flash\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* If the block offset isn't on a block boundary, return an error */
  if ((block_offset % BLOCK_NO_WORDS) != 0)
  {
    dprintf (("Error", "Block offset not on block boundary\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }


  words = (unsigned int *) r->r[1];

#ifdef GIDEON
  /* Disable ROM caching */
  /* Disable IRQs */
  irqs_off ();
#endif

  /* Enable writes to ROM */
  write_enable ((void *)ROMCONTROL);
  /* Turn on programming voltage */
  vpp_on (1);

  er = flash_write_block (chip_address + block_offset, words);

  /* Return flash to read array mode */
  flash_write_command (flash_chip_base (chip_address + block_offset), READ_ARRAY);

#ifdef GIDEON
  /* Enable ROM caching */
  /* Enable IRQs */
  irqs_on ();
#endif

  /* Disable writes to ROM */
  write_disable ((void *)ROMCONTROL);
  /* Turn off programming voltage */
  vpp_on (0);

  return er;
}


/* FlashWrite_ReadWord SWI */
_kernel_oserror *flash_swi_readword (_kernel_swi_regs *r)
{
  unsigned int word_offset;

  /* If the offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
    return ERROR_CREATE (Error_Generic_InvalidOffset);

  /* Take word byte-offset and turn it into a word-offset. */
  word_offset = r->r[0] / sizeof (unsigned int);

  /* If the offset is off the end of the flash space, return an error */
  if (word_offset >= IMAGE_SIZE)
    return ERROR_CREATE (Error_Generic_InvalidOffset);

  r->r[1] = chip_address[word_offset];

  return NULL;
}


/* FlashWrite_ReadBuffer SWI */
_kernel_oserror *flash_swi_readbuffer (_kernel_swi_regs *r)
{
  unsigned int pb_offset;
  unsigned int *data_return;

  data_return = (unsigned int*) r->r[1];

  /* If the buffer offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
  {
    dprintf (("Error", "Non-word aligned offset\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* Take page buffer byte-offset and turn it into a word-offset. */
  pb_offset = r->r[0] / sizeof (unsigned int);

  /* If the buffer offset takes the buffer off the end of a flash device, return an error */
  if ((pb_offset % (IMAGE_SIZE / NUM_DEVICES)) > ((IMAGE_SIZE / NUM_DEVICES) - PB_NO_WORDS))
  {
    dprintf (("Error","Buffer offset off end of flash device\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  memcpy ((char *)data_return, (char *) &chip_address[pb_offset],
          PB_NO_WORDS * sizeof (unsigned int));

  return NULL;
}


/* FlashWrite_ReadBlock SWI */
_kernel_oserror *flash_swi_readblock (_kernel_swi_regs *r)
{
  unsigned int block_offset;
  unsigned int *data_return;

  data_return = (unsigned int*) r->r[1];

  /* If the block offset isn't even word-aligned, return an error */
  if ((r->r[0] % sizeof (unsigned int)) != 0)
  {
    dprintf (("Error", "Non-word aligned offset\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* Take the block byte-offset and turn it into word-offset. */
  block_offset = r->r[0] / sizeof (unsigned int);

  /* If the block offset takes the block off the end of the flash space, return an error */
  if (block_offset > (IMAGE_SIZE - BLOCK_NO_WORDS))
  {
    dprintf (("Error", "Block offset off end of flash\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  /* If the block offset isn't on a block boundary, return an error */
  if ((block_offset % BLOCK_NO_WORDS) != 0)
  {
    dprintf (("Error", "Block offset not on block boundary\n"));
    return ERROR_CREATE (Error_Generic_InvalidOffset);
  }

  memcpy ((char *)data_return, (char *) &chip_address[block_offset],
          BLOCK_NO_WORDS * sizeof (unsigned int));

  return NULL;
}


/**********************/
/* Internal functions */


#ifdef SA

/* Function to read the SA Common Status Register */
static unsigned int flash_read_csr (address_t address, char bit)
{
  unsigned int mask;
  address_t chip_base;

  switch (bit)
  {
    case 4:
      mask = CSR_4_MASK;
      break;

    case 5:
      mask = CSR_5_MASK;
      break;

    case 7:
    default:
      mask = CSR_7_MASK;
      break;
  }

  chip_base = flash_chip_base (address);

  return (*chip_base & mask);
}


/* Function to read the SA Block Status Register */
static unsigned int flash_read_bsr (address_t block_base, char bit)
{
  unsigned int mask;

  switch (bit)
  {
    case 3:
      mask = BSR_3_MASK;
      break;

    case 5:
      mask = BSR_5_MASK;
      break;

    case 7:
    default:
      mask = BSR_7_MASK;
      break;
  }

  return (*(address_t) block_base + BSR_OFFSET) & mask;
}


/* Function to read the SA Global Status Register */
static unsigned int flash_read_gsr (address_t address, char bit)
{
  unsigned int mask;
  address_t chip_base;

  switch (bit)
  {
    case 1:
      mask = GSR_1_MASK;
      break;

    case 2:
      mask = GSR_2_MASK;
      break;

    case 5:
    default:
      mask = GSR_5_MASK;
      break;
  }

  chip_base = flash_chip_base (address);

  return (*(address_t) chip_base + GSR_OFFSET) & mask;
}

#endif

#ifdef S5

/* Function to read the S5 Status Register */
static unsigned int flash_read_s5_sr (address_t location, char bit)
{
  unsigned int mask;
  address_t chip_base;

  switch (bit)
  {
    case 1:
      mask = S5_SR_1_MASK;
      break;

    case 3:
      mask = S5_SR_3_MASK;
      break;

    case 4:
      mask = S5_SR_4_MASK;
      break;

    case 5:
      mask = S5_SR_5_MASK;
      break;

    default:
    case 7:
      mask = S5_SR_7_MASK;
  }

  chip_base = flash_chip_base (location);

  return (*chip_base & mask);
}


/* Function to read the S5 Extended Status Register */
static unsigned int flash_read_s5_xsr (address_t location, char bit)
{
  unsigned int mask;
  address_t chip_base;

  switch (bit)
  {
    default:
    case 7:
      mask = S5_XSR_7_MASK;
  }

  chip_base = flash_chip_base (location);

  return (*chip_base & mask);
}


/* Not used yet, so commented out, so we don't get a compiler warning */
#if 0
/* Function to read the S5 Block Status Register */
static unsigned int flash_read_s5_bsr (address_t block_base, char bit)
{
   unsigned int mask;

  switch (bit)
  {
    default:
    case 0:
      mask = S5_BSR_0_MASK;
  }

  return (*(address_t) block_base + S5_BSR_OFFSET) & mask;
}
#endif

#endif


/* Function returns the chip base address for an address inside the flash address space */
static address_t flash_chip_base (address_t location)
{
  address_t chip_base;
  unsigned int i_location;

  if (NUM_DEVICES > 1)
  {
    int device_num;

    i_location = (unsigned int) location;

    device_num = (i_location - ROM_BASE) / (IMAGE_SIZE / NUM_DEVICES);

    chip_base = (address_t) (ROM_BASE + (device_num * IMAGE_SIZE / NUM_DEVICES));
  }
  else
    chip_base = (address_t) ROM_BASE;

  return chip_base;
}


/* Turns VPP on, only as controlled in Funai2 at the moment */
static void vpp_on (int on)
{
  address_t iolines = (address_t) IOLINES_ADDRESS;
  unsigned int value;

  value = *iolines;
  if (on == 1)
    value &= (~4);
  else
    value |= 4;
  *iolines = value;
}


/* Function to write a page buffer's worth of data to flash */
static _kernel_oserror *flash_write_pagebuffer (address_t block_base, address_t pb_base,
                                                unsigned int *words)
{
  _kernel_oserror *er = NULL;
  int i;
  unsigned int *page_buffer = words;
  address_t position;

#ifdef SA

  /* "Read Extended Status Registers" command */
  flash_write_command (pb_base, READ_ESR);

  /* Poll GSR until GSR.2 = 1 (page buffer available). */
  while (flash_read_gsr (pb_base, 2) != GSR_2_MASK);

  /* Check GSR.1 for Page Buffer status */
  if (flash_read_gsr (pb_base, 1) != 0)
  {
    /* Page buffer is busy, return an error */
    return ERROR_CREATE (Error_WriteBuffer_BufferBusy);
  }

  /* "Sequential load to page buffer" command */
  flash_write_command (pb_base, LOAD_PB);

  /* Send low byte of number of words to write (Replicated to 32 bits) */
  flash_write_command (pb_base, ((((PB_NO_WORDS & 0x00FF) - 1) << 16)
                                + ((PB_NO_WORDS & 0x00FF) - 1));

  /* Send high byte of number of words to write (Replicated to 32 bits) */
  flash_write_command (pb_base, ((((PB_NO_WORDS & 0xFF00) - 1) << 16)
                                + ((PB_NO_WORDS & 0xFF00) - 1));

  position = pb_base;

  /* Write data to buffer */
  for (i = 0; i < PB_NO_WORDS; i++)
  {
    flash_write_command (position, page_buffer[i]);

    position++;
  }

  /* "Read Extended Status Registers" command */
  flash_write_command (pb_base, READ_ESR);

  /* Poll BSR until BSR.3 of target address = 0 (queue available) */
  while (flash_read_bsr (block_base, 3) != 0);

  /* "Write page buffer to flash" command */
  flash_write_command (pb_base, WRITE_PB);

  /* Send low byte of number of words to write (Replicated to 32 bits) */
  flash_write_command (pb_base, ((((PB_NO_WORDS & 0x00FF) - 1) << 16)
                                + ((PB_NO_WORDS & 0x00FF) - 1));

  /* Send high byte of number of words to write (Replicated to 32 bits) */
  flash_write_command (pb_base, ((((PB_NO_WORDS & 0xFF00) - 1) << 16)
                                + ((PB_NO_WORDS & 0xFF00) - 1));

  /* "Read Extended Status Registers" command */
  flash_write_command (pb_base, READ_ESR);

  /* Poll BSR until BSR.7 of target address = 1 (block ready). */
  while (flash_read_bsr (block_base, 7) != BSR_7_MASK);

  if (flash_read_bsr (block_base, 5) != 0)
  {
    /* Error in write, return an error */
    er = ERROR_CREATE (Error_WriteBuffer_Error);
  }

  /* "Clear Status register" command */
  flash_write_command (pb_base, CLEAR_SR);

#endif

#ifdef S5

  /* set buffer timeout.... ? */

  /* Issue write to buffer command */
  flash_write_command (block_base, S5_WRITE_TO_BUFFER);

  /* Poll XSR.7 for readiness */
  while (flash_read_s5_xsr (block_base, 7) != S5_XSR_7_MASK);

  /* Write word count (is the -1 correct?) */
  flash_write_command (block_base, (PB_NO_WORDS - 1) | ((PB_NO_WORDS - 1) << 16));

  position = pb_base;

  /* Write data to buffer */
  for (i = 0; i < PB_NO_WORDS; i++)
  {
    flash_write_command (position, page_buffer[i]);

    position++;
  }

  /* Buffer write to flash confirm command */
  flash_write_command (block_base, S5_BUFFER_WRITE_CONFIRM);

  /* Poll for completion (SR.7) */
  while (flash_read_s5_sr (block_base, 7) != S5_SR_7_MASK);

  /* Check for voltage range error (SR.3) */
  if (flash_read_s5_sr (block_base, 3) != 0)
  {
    dprintf (("Error","writebuffer: Voltage Range Error\n"));
    er = ERROR_CREATE (Error_WriteBuffer_VoltageRangeError);
  }

  /* Check for device protect error (SR.1) */
  if (flash_read_s5_sr (block_base, 1) != 0)
  {
    dprintf (("Error", "writebuffer: Device Protect Error\n"));
    er = ERROR_CREATE (Error_WriteBuffer_DeviceProtectError);
  }

  /* Check for programming error (SR.4) */
  if (flash_read_s5_sr (block_base, 4) != 0)
  {
    dprintf (("Error", "writebuffer: Programming Error\n"));
    er = ERROR_CREATE (Error_WriteBuffer_ProgrammingError);
  }

  if (er != NULL)
  {
    /* Clear status register command */
    flash_write_command (block_base, S5_CLEAR_STATUS_REG);
  }

#endif

  return er;
}


/* Function to write a "block" of data to flash */
static _kernel_oserror *flash_write_block (address_t block_base, unsigned int *block_data)
{
  _kernel_oserror *er = NULL;
  int  count;
  address_t pb_address;

  pb_address = block_base;

  /* Do a page buffer sized section PBS_PER_BOCK times, to write whole block */
  for (count = 0; count < PBS_PER_BLOCK; count++)
  {
    er = flash_write_pagebuffer (block_base, pb_address, block_data);
    if (er != NULL)
      break;

    pb_address += PB_NO_WORDS;
    block_data += PB_NO_WORDS;
  }

  return er;
}


/* Function to write a 32bit word to flash */
static _kernel_oserror *flash_write_word (address_t address, unsigned int data)
{
  _kernel_oserror *er = NULL;

#ifdef SA

  /* "32 bit word write" command */
  flash_write_command (address, WRITE_WORD);

  /* Write 32 bit word to flash */
  flash_write_command (address, data);

  /* Poll CSR until CSR.7 = 1 (WSM ready) */
  while (flash_read_csr (address, 7) != CSR_7_MASK);

  /* Check CSR.4 for write failure */
  if (flash_read_csr (address, 4) != 0)
  {
    /* Bit set, therefore write failed.  Set error flag */
    er = ERROR_CREATE (Error_WriteWord_Error);
  }

  /* "Clear Status register" command */
  flash_write_command (address, CLEAR_SR);

#endif

#ifdef S5

  /* "32 bit word write" command */
  flash_write_command (address, S5_WRITE_WORD);

  /* Write 32 bit word to flash */
  flash_write_command (address, data);

  /* Poll for completion (SR.7) */
  while (flash_read_s5_sr (address, 7) != S5_SR_7_MASK);

  /* Check for voltage range error (SR.3) */
  if (flash_read_s5_sr (address, 3) != 0)
  {
    dprintf (("Error", "WriteWord: Voltage Range Error\n"));
    er = ERROR_CREATE (Error_WriteWord_VoltageRangeError);
  }

  /* Check for device protect error (SR.1) */
  if (flash_read_s5_sr (address, 1) != 0)
  {
    dprintf (("Error", "WriteWord: Device Protect Error\n"));
    er = ERROR_CREATE (Error_WriteWord_DeviceProtectError);
  }

  /* Check for programming error (SR.4) */
  if (flash_read_s5_sr (address, 4) != 0)
  {
    dprintf (("Error", "WriteWord: Programming Error\n"));
    er = ERROR_CREATE (Error_WriteWord_ProgrammingError);
  }

  /* If there was an error, clear the status register */
  if (er != NULL)
  {
    /* Clear status register command */
    flash_write_command (address, S5_CLEAR_STATUS_REG);
  }

#endif

  return er;
}


/* Function to erase a "block" of flash */
static _kernel_oserror *flash_erase_block (address_t block_base)
{
  _kernel_oserror *er = NULL;

#ifdef SA

  /* "Single block erase" command */
  flash_write_command (block_base, ERASE_BLOCK);

  /* Confirm erase command */
  flash_write_command (block_base, ERASE_CONFIRM);

  /* Poll CSR until CSR.7 = 1 (WSM ready). */
  while (flash_read_csr (block_base, 7) != CSR_7_MASK);

  /* Check CSR.5 for erase error */
  if (flash_read_csr (block_base, 5))
  {
    /* Error in erase, set error flag true */
    er = ERROR_CREATE (Error_EraseBlock_Error);
  }

#endif

#ifdef S5

  /* "Single block erase" command */
  flash_write_command (block_base, S5_ERASE_BLOCK);

  /* Confirm erase command */
  flash_write_command (block_base, S5_ERASE_CONFIRM);

  /* Poll for completion (SR.7) */
  while (flash_read_s5_sr (block_base, 7) != S5_SR_7_MASK);

  /* Check SR.5 for erase error */
  if (flash_read_s5_sr (block_base, 5) != 0)
    er = ERROR_CREATE (Error_EraseBlock_Error);

#endif

  return er;
}


/* Function to erase the whole flash */
static _kernel_oserror *flash_erase_all (address_t flash_base)
{
  _kernel_oserror *er = NULL;
  int i;

#ifdef SA

  for (i = 0; i < NUM_DEVICES; i++)
  {
    /* "Read Extended Status Registers" command */
    flash_write_command (flash_base, READ_ESR);

    /* Poll BSR until BSR.3 of target address = 0 (queue available) */
    while (flash_read_bsr (flash_base, 3) != 0);

    /* "Erase all unlocked blocks" command */
    flash_write_command (flash_base, ERASE_ALL);

    /* Confirm erase */
    flash_write_command (flash_base, ERASE_CONFIRM);

    /* Check GSR.5 for erase error */
    if (flash_read_gsr (flash_base, 5) != 0)
    {
      /* Error in erase, return error */
      er = ERROR_CREATE (Error_EraseFlash_Error);
    }

    if (er != NULL)
      break;

    flash_base += (IMAGE_SIZE / NUM_DEVICES);
  }

#endif

#ifdef S5

  for (i = 0; i < NUM_DEVICES; i++)
  {
    /* Full chip erase command */
    flash_write_command (flash_base, S5_FULLCHIP_ERASE);

    /* Confirm erase command */
    flash_write_command (flash_base, S5_ERASE_CONFIRM);

    /* Poll for completion (SR.7) */
    while (flash_read_s5_sr (flash_base, 7) != S5_SR_7_MASK);

    /* Check SR.5 for erase error */
    if (flash_read_s5_sr (flash_base, 5) != 0)
      er = ERROR_CREATE (Error_EraseFlash_Error);

    if (er != NULL)
      break;

    flash_base += (IMAGE_SIZE / NUM_DEVICES);
  }

#endif

  return er;
}

#if 0
static void flash_identify (void)
{
  unsigned int query[3];
  address_t position;

  /* Read query command */
  flash_write_command ((address_t)(chip_address + S5_QUERY_OFFSET), S5_QUERY);

  position = chip_address + S5_QUERY_STRING_OFFSET;

  /* Read the query string */
  query[0] = *(position++);
  query[1] = *(position++);
  query[1] = *position;

  if (query[0] == 'Q' && query[1] == 'R' && query[2] == 'Y')
  {
    /* Device is CFI compliant */

    /* Read device size ? */
    /* Read write buffer size ? */
    /* Read timeout values ? */
  }
  else
  {
    unsigned int manu_id, device_id;

    /* Intelligent identifier command */
    flash_write_command (chip_address, READ_ID);

    /* Read manufacturer id */
    position = chip_address + MANUFACTURER_ID_OFFSET;
    manu_id = *position;

    /* Read device id */
    position = chip_address + DEVICE_ID_OFFSET;
    device_id = *position;
  }

  /* Return flash to read array mode */
  flash_write_command (chip_address, READ_ARRAY);
}
#endif
