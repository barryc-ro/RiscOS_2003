#include <stdlib.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "flashprog.h"
#include "error.h"

/* Sizes */
#define BLOCK_SIZE	0x00020000 /* Size of block (in bytes) */
#define PB_SIZE		0x00000200 /* Size of page buffer (in bytes) */
#define PB_NO_WORDS            128 /* Number of words that fit in page buffer */
#define PBS_PER_BLOCK          256 /* Number of page buffer writes needed
                                       for each block of flash */

/* Addresses */
#define ROM_BASE	0x03800000 /* Address of the base of ROM */
#define ROMCR0		0x03200080 /* Address of ROMCR0 */
#define LED		0x0320000c /* Address of the LED control */

/* Offsets */
#define BSR_OFFSET      0x00000001
#define GSR_OFFSET      0x00000002

/* Masks */
#define GSR_1_LOW_MASK	0x00000002
#define GSR_1_HIGH_MASK 0x00020000
#define GSR_2_MASK	0x00040004
#define GSR_5_LOW_MASK	0x00000020
#define GSR_5_HIGH_MASK 0x00200000

#define BSR_3_LOW_MASK	0x00000008
#define BSR_3_HIGH_MASK 0x00080000
#define BSR_5_MASK	0x00200020
#define BSR_7_MASK	0x00800080

#define CSR_4_MASK	0x00100010
#define CSR_5_MASK	0x00200020
#define CSR_7_MASK      0x00800080

/* 28F008SA-compatible commands (16bit-wide, replicated to 32bits) */
#define WRITE_WORD	0x40404040
#define READ_ID		0x00900090
#define READ_ARRAY	0x00FF00FF
#define ERASE_BLOCK     0x20202020
#define READ_CSR        0x00700070

/* 28F016SA/SV commands (16bit-wide, replicated to 32bits) */
#define CLEAR_SR	0x50505050
#define READ_ESR	0x00710071
#define ERASE_ALL	0x00A700A7
#define ERASE_CONFIRM	0x00D000D0
#define LOAD_PB		0xE0E0E0E0
#define WRITE_PB	0x0C0C0C0C

/* Assembler routines */
extern void irqs_off (void);
extern void irqs_on (void);
extern void led_on (void *);
extern void write_enable (void *);
extern void write_disable (void *);
extern void reset (void);

/* Local functions */
static int block_write (unsigned int *volatile block, unsigned int **data);
static int wholeflash_erase (void);
static int block_erase (unsigned int *block);

/*
 * Functions
 */

_kernel_oserror *flash_initialise( void *pw, int podule_base )
{
  /* Nothing to do here */
  return NULL;
}

extern void flash_finalise( void *pw )
{
  /* Nothing to do here */
}

/*
 * SWI Flash_Write
 *
 * Write a new ROM to flash
 *
 *   IN
 *     r0:  Base address of 4MEG data block
 *
 */
_kernel_oserror *flash_write (_kernel_swi_regs *r)
{
  /* Address of block, initially at the base of ROM */
  unsigned int *volatile block = (unsigned int *) ROM_BASE;
  /* Address of data */
  unsigned int *data = (unsigned int *) r->r[0];

  int i, er;

  /* Enable writes to Flash ROM */
  write_enable ((void *)ROMCR0);

  /* Turn off cache */
  _swix (OS_CLI, _IN (0), "cache off");
  /* Turn off interrupts */
  irqs_off ();

  while (1)
  {
    /* Erase whole Flash */
    er = wholeflash_erase ();
    if (!er)
      /* No error in erase, continue to writing stage */
      break;
    /* Else, try the erase again */
  }

  /* Loop through all 32 blocks of flash, writing the ROM */
  for (i = 0; i < 32; i++)
  {
    while (1)
    {
      /* Write a block */
      er = block_write (block, &data);
      if (!er)
        /* Block wrote successfully, continue */
        break;
      /* Else erase block and start write again */
      while (1)
      {
        er = block_erase (block);
        if (!er)
          /* Block erased successfully, free to re-write block */
          break;
        /* Else try to erase again */
      }
    }
    /* Move onto next block of Flash */
    block = (unsigned int*)(((char *)block) + BLOCK_SIZE);
  }

  /* Return to read array mode */
  *block = READ_ARRAY;

  /* Turn backlight off to inform user the write has finished */
  led_on ((void *)LED);

  /* Disable writes to the flash */
  write_disable ((void *)ROMCR0);

  /* Would be nice to be able to do a reset here, but can't get it to work */
/*  reset ();*/

  /* Freeze machine, to allow user to reset */
  while (1);

  /* Return to code that called SWI. (Should never get here)*/
  return NULL;
}

/* A function to write a block of flash */
static int block_write (unsigned int *volatile block, unsigned int **data_ptr)
{
  unsigned int *volatile address = block; /* Address of block */
  unsigned int *volatile gsr = block + GSR_OFFSET; /* Address of GSR */
  unsigned int *volatile bsr = block + BSR_OFFSET; /* Address of BSR */
  unsigned int *data;

  int count, i, er = 0;

  data = *data_ptr;

  /* Do a page buffer sized section PBS_PER_BOCK times, to write whole block */
  for (count = 0; count < PBS_PER_BLOCK; count++)
  {
    /* "Read Extended Status Registers" command */
    *block = READ_ESR;

    /* Poll GSR until GSR.2 = 1 (page buffer available). */
    while ((*gsr & GSR_2_MASK) != GSR_2_MASK);

    /* Check GSR.1 for Page Buffer status */
    if (!(*gsr & GSR_1_LOW_MASK) || !(*gsr & GSR_1_HIGH_MASK))
      /* Page buffer is busy, set error flag true */
      er = 1;

    /* "Sequential load to pager buffer" command */
    *address = LOAD_PB;

    /* Send low byte of number of words to write (Replicated to 32 bits) */
    *address = ((PB_NO_WORDS - 1) << 16) + (PB_NO_WORDS - 1) ;
    /* Send high byte of number of words to write (Replicated to 32 bit) */
    *address = 0;

    /* Write data to buffer */
    for (i = 0; i < PB_NO_WORDS; i++)
      address[i] = *(data++);

    /* "Read Extended Status Registers" command */
    *block = READ_ESR;

    /* Poll BSR until BSR.3 of target address = 0 (queue available) */
    while ((*bsr & BSR_3_LOW_MASK) || (*bsr & BSR_3_HIGH_MASK));

    /* "Write page buffer to flash" command */
    *address = WRITE_PB;

    /* Send low byte of number of words to write (Replicated to 32 bits) */
    *address = ((PB_NO_WORDS - 1) << 16) + (PB_NO_WORDS - 1);
    /* Send high byte of number of words to write (Replicated to 32 bit) */
    *address = 0;

    /* "Read Extended Status Registers" command */
    *block = READ_ESR;

    /* Poll BSR until BSR.7 of target address = 1 (block ready). */
    while ((BSR_7_MASK & *bsr) != BSR_7_MASK);

    /* Check BSR.5 for block operation status */
    if (*bsr & BSR_5_MASK)
      /* Error in write, set error flag to true */
      er = 1;

    /* "Clear Status Registers" command */
    *block = CLEAR_SR;

    /* Increment write address by Page Buffer size */
    address = (unsigned int*)(((char *)address) + PB_SIZE);
  }

  *data_ptr = data;

  return er;
}

/* A function to erase a block of flash */
static int block_erase (unsigned int *block)
{
  int er = 0;
  unsigned int *volatile address = block;

  *address = ERASE_BLOCK;    /* "Single block erase" command */
  *address = ERASE_CONFIRM;  /* Confirm erase */

  /* Poll CSR until CSR.7 = 1 (WSM ready). */
  while ((*address & CSR_7_MASK) != CSR_7_MASK);

  /* Check CSR.5 for erase error */
  if (*address & CSR_5_MASK)
    /* Error in erase, set error flag true */
    er = 1;

  return er;

}

/* A function to erase the whole Flash ROM */
static int wholeflash_erase (void)
{
  unsigned int *volatile flash = (unsigned int*) ROM_BASE; /* Address of ROM */
  unsigned int *volatile bsr = flash + BSR_OFFSET; /* Address of BSR */
  unsigned int *volatile gsr = flash + GSR_OFFSET; /* Address of GSR */

  /* "Read Extended Status Registers" command */
  *flash = READ_ESR;

  /* Poll BSR until BSR.3 of target address = 0 (queue available) */
  while ((*bsr & BSR_3_LOW_MASK) || (*bsr & BSR_3_HIGH_MASK));

  /* "Erase all unlocked blocks" command */
  *flash = ERASE_ALL;
  /* Confirm erase */
  *flash = ERASE_CONFIRM;

  /* Check GSR.5 to ensure erase was successful */
  if ((*gsr & GSR_5_LOW_MASK) || (*gsr & GSR_5_HIGH_MASK))
    /* Error in erase, return error flag true */
    return 1;
  else
    /* No error */
    return 0;
}

/*******************************************/
/* Extra SWI routines from here onwards    */
/*******************************************/

/*
 * SWI Flash_WordWrite
 *
 * Write a word to flash
 *
 *   IN
 *     r0:  Offset from start of free block in Flash ROM
 *     r1:  Word to write
 *
 *   OUT
 *     r0:  Status flag  (0=no error, 1=error)
 *
 */
_kernel_oserror *flash_wordwrite (_kernel_swi_regs *r)
{
  unsigned int *volatile chip = (unsigned int *) (0x3bc0000 + r->r[0]);
  int data = r->r[1];
  int er = 0;

  /* Enable writes to the Flash ROM */
  write_enable ((void *)ROMCR0);

  /* Turn the cache off */
  _swix (OS_CLI, _IN (0), "cache off");
  /* Turn interrupts off */
  irqs_off ();

  *chip = WRITE_WORD;      /* "32 bit word write" command */
  *chip = data;            /* Write 32 bit word to flash */

  /* Poll CSR until CSR.7 = 1 (WSM ready) */
  while ((*chip & CSR_7_MASK) != CSR_7_MASK);

  /* Check CSR.4 for write failure */
  if ((*chip & CSR_4_MASK))
    /* Bit set, therefore write failed.  Set error flag */
    er = 1;

  *chip = CLEAR_SR;	   /* "Clear Status register" command */
  *chip = READ_ARRAY;      /* Return flash to read array mode */

  /* Turn interrupts back on */
  irqs_on ();
  /* Turn cache back on */
  _swix (OS_CLI, _IN (0), "cache on");

  /* Disable writes to the Flash ROM */
  write_disable ((void *)ROMCR0);

  /* Put the error flag in R0 */
  r->r[0] = er;

  return NULL;
}

/*
 * SWI Flash_Status
 *
 * Read the status of a flash block (along with CSR and GSR)
 *
 *   IN
 *     r0:  Address of block (not implemented yet)
 *
 *   OUT
 *     r0:  CSR   (Compatible Status Register)
 *     r1:  GSR   (Global Status Register)
 *     r2:  BSR   (Block Status Register)
 *
 */
_kernel_oserror *flash_status (_kernel_swi_regs *r)
{
  unsigned int *volatile block = (unsigned int *) 0x3bc0000;
  unsigned int *volatile gsr = block + GSR_OFFSET; /* Address of GSR */
  unsigned int *volatile bsr = block + BSR_OFFSET; /* Address of BSR */

  /* Turn off interrupts and fast interrupts */
  irqs_off ();
  /* Do the reset */
  reset ();

  return NULL;

  /* Enable writes to the Flash ROM */
  write_enable ((void *)ROMCR0);

  /* Turn the cache off */
  _swix (OS_CLI, _IN (0), "cache off");
  /* Turn interrupts off */
  irqs_off ();

  *block = READ_CSR; /* Send the "Read CSR" command to the flash */
  r->r[0] = *block;  /* Put CSR in R0 */

  /* Send the "Read Extended status registers" command to the flash */
  *block = READ_ESR;
  r->r[1] = *gsr;    /* Put GSR in R1 */
  r->r[2] = *bsr;    /* Put BSR in R2 */

  *block = CLEAR_SR; /* Clear the extended status registers */

  /* Return the flash to Read Array mode */
  *block = READ_ARRAY;

  /* Turn interrupts back on */
  irqs_on ();
  /* Turn the cache back on */
  _swix (OS_CLI, _IN (0), "cache on");

  /* Disable writes to Flash ROM */
  write_disable ((void *)ROMCR0);

  return NULL;
}

 /*
 * SWI Flash_EraseBlock
 *
 * Erases a block of flash
 *
 *   IN
 *     r0:  Address of block (not implemented yet)
 *
 *   OUT
 *     r0:  Status flag  (0=no error, 1=error)
 */
_kernel_oserror *flash_eraseblock (_kernel_swi_regs *r)
{
  /* Address of block */
  unsigned int *volatile block = (unsigned int *) 0x3bc0000;

  int er;

  /* Enable writes to the Flash ROM */
  write_enable ((void *)ROMCR0);

  /* Turn the cache off */
  _swix (OS_CLI, _IN (0), "cache off");
  /* Turn interrupts off */
  irqs_off ();

  /* Erase the block */
  er = block_erase (block);

  /* Put flash back in Read Array mode */
  *block = READ_ARRAY;

  /* Turn interrupts back on */
  irqs_on ();
  /* Turn the cache back on */
  _swix (OS_CLI, _IN (0), "cache on");

  /* Disable writes to the Flash ROM */
  write_disable ((void *)ROMCR0);

  /* Return the error status in R0 */
  r->r[0] = er;

  return NULL;
}
