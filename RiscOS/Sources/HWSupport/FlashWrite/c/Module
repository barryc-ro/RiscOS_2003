/* module.c - RISC OS module related code. */

/* ANSI Includes */
#include <stdio.h>
#include <stdlib.h>

/* Risc OS Includes */
#include "kernel.h"
#include "swis.h"

/* Other libraries */
#include "Debuglib/Debuglib.h"
#ifdef MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Local Includes */
#include "module.h"
#include "flashprog.h"
#include "error.h"

ERROR_STRUCT (BADSWI, "BadSWI");

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise (char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *er;

#ifdef MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("RAM::0.$.fl_memch");
  atexit (MemCheck_OutputBlocksInfo);
  MemCheck_SetReadChecking (0);
#endif

  debug_initialise ("FlashWrite", "ram:$.cddb_out","");
  debug_output_device (PRINTF_OUTPUT);
  /* debug_output_device (FILE_OUTPUT); */
  debug_atexit ();

  er = flash_initialise (pw, podule_base);

  return er;

  NOT_USED (cmd_tail);
  NOT_USED (podule_base);
}

/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  return flash_finalise (pw);

  NOT_USED (fatal);
  NOT_USED (podule);
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *module_swi (int swi_no, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *er;

  switch (swi_no)
  {
    case 0:
      er = flash_swi_writeflash (r);
      break;
    case 1:
      er = flash_swi_writeblock (r);
      break;
    case 2:
      er = flash_swi_writebuffer (r);
      break;
    case 3:
      er = flash_swi_writeword (r);
      break;
    case 4:
      er = flash_swi_eraseflash (r);
      break;
    case 5:
      er = flash_swi_eraseblock (r);
      break;
    default:
      er = _swix (MessageTrans_ErrorLookup,
		  _IN(0) | _IN(1) | _IN(2) | _IN(3) | _IN(4),
		  ERROR (BADSWI), 0, 0, 0, MODULE_NAME);
  }

  return er;
  NOT_USED (pw);
}
