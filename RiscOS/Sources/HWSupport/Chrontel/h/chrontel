/* > chrontel.c */

/* Chrontel specific header - defines magic locations and bit-fields */

#define CHRONTEL_CONTROL		((volatile unsigned char *)0x0302B000)

#define CHRONTEL_CONTROL_VIDEOCLOCK	0x0F
#define CHRONTEL_CONTROL_UP		(1<<4)
#define CHRONTEL_CONTROL_DOWN		(1<<5)
#define CHRONTEL_CONTROL_LEFT		(1<<6)
#define CHRONTEL_CONTROL_RIGHT		(1<<7)

#define CHRONTEL_CONTROL_DIRMASK	(CHRONTEL_CONTROL_UP | CHRONTEL_CONTROL_DOWN | \
					 CHRONTEL_CONTROL_LEFT | CHRONTEL_CONTROL_RIGHT)

#define CHRONTEL_CONTROL_DEFAULT	CHRONTEL_CONTROL_DIRMASK

#define CHRONTEL_RESET			(1<<8)

#define CHRONTEL_MAXX			32
#define CHRONTEL_MAXY			32

#define CHRONTEL_POWERUP		0
#define CHRONTEL_POWERDOWN		1

#define CHRONTEL_VAR			"Alias$URLOpenCLI_Chrontel_Move"
#define CHRONTEL_VARVAL			"Chrontel_Move %*0"
#define CHRONTEL_VARVALLEN		(sizeof(CHRONTEL_VARVAL)-1)

#define CHRONTEL_VIDEOCLOCKRATE         "VideoClockRate"
#define CHRONTEL_DISPLAYXPOSITION       "DisplayXPosition"
#define CHRONTEL_DISPLAYYPOSITION       "DisplayYPosition"


typedef struct _dirmapping {
	char *name;		/* Parameter string. */
	int dx, dy;		/* Movement delta (0, 0 => reset). */
} dirmapping;


_kernel_oserror *chrontel_initialise( void );
void chrontel_finalise( void );
void chrontel_move( char *direction, int length );
_kernel_oserror *chrontel_status( void );
_kernel_oserror *chrontel_clocks( void );
void chrontel_power( int reason );
void chrontel_setup( void );
void chrontel_newmode( void );
int get_vclock_div( void );
int get_modeclock( void );
extern unsigned int clock_rate[16];
