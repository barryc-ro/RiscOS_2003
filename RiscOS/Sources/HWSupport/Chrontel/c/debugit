/* File:    DebugIt.c
 * Purpose: C veneers for the DebugIt module
 * Author:  Matt Cloke
 * History: 16-Sep-93: IDJ:   created toolbox variant
 *          19-Sep-94: MCC:   Hacked and bludgeoned to work with the DebugIt MOD
 *
 */

#include "debugit.h"

#include "swis.h"
#include "kernel.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#define DebugIt_Register   0x49ec0
#define DebugIt_DeRegister 0x49ec1
#define DebugIt_WriteC     0x49ec2
#define DebugIt_GetString  0x49ec3

#ifdef DEBUG

static char output_buffer[256];
static char var_val[256] = "";
static char debug_var[256] = "";

extern void debug_set_var_name (char *var_name)
{
    strcpy (debug_var, var_name);
}


extern void debug_output (char *allow, char *string, ...)
{
    /*
     * Function to output the given variable list down the tube.  String is a
     * printf format string.  String is only printed if the given allow string
     * appears in the system variable debug_var
     *
     */

    _kernel_swi_regs regs;
    va_list args;
    char *p;

    va_start(args, string);

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;
    regs.r[3] = 0;
    regs.r[4] = 3;

    _kernel_swi (OS_ReadVarVal, &regs, &regs);
    var_val[regs.r[2]] = '\0';

    if ((strstr (var_val, allow) != NULL) || !strcmp (allow, "force"))
    {
        vsprintf (output_buffer, string, args);

        for (p = output_buffer; *p != '\0'; p++)
        {
            if ((*p >= ' ' && *p <= '~') || *p == '\n')
                regs.r[0] = (int)*p;
            else
                regs.r[0] = '*';
            _kernel_swi (DebugIt_WriteC, &regs, &regs);
        }
        regs.r[0] = '\0';
        _kernel_swi(DebugIt_WriteC, &regs, &regs);
    }

    va_end(args);
}

#endif
