/* > chrontel.c								*/
/**/
/*		Provide support for Chrontel hardware.			*/
/**/

#include <stddef.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "chrontel.h"
#include "iomd.h"
#include "nvram.h"
#include "standby.h"

#include "debugit.h"


static int CurrentX = 0, CurrentY = 0, LastReset, State;
static int vclock, divider;

static dirmapping Directions[5] = {
	{ "up",		0,	1 },
	{ "down",	0,	-1 },
	{ "left",	-1,	0 },
	{ "right",	1,	0 },
	{ NULL,		0,	0 }
};

static char print_buffer[128];

/* Modify IOLINES register. */
/**/
static void
ModifyIOLINES( int bits, int xor )
{
#ifndef DEBUG
	int iolines, irqs_on = !_kernel_irqs_disabled();

	if ( irqs_on ) _kernel_irqs_off();
	iolines = *(char *)IOMD_IOLINES;
	*(char *)IOMD_IOLINES = ((iolines & ~bits) ^ xor) | IOMD_IOLINES_INPUTS;
	if ( irqs_on ) _kernel_irqs_on();
#endif
}


/* Read current video clock rate from NV-RAM. */
/**/
static int
ReadVClock( void )
{
#ifndef DEBUG
        int vclock, err;

        if ( _swix(NVRAM_Read, _INR(0,2)|_OUT(0), CHRONTEL_VIDEOCLOCKRATE, &vclock, 0, &err) == NULL )
                if ( err > 0 ) return vclock;
#endif
        return 0;
}


/* Move the display according to parameter 'directions' which is a bit	*/
/* field which can be written to the direction control bits in our	*/
/* 'magic' location.							*/
/**/
static void
MoveOne( int directions )
{
	int irqs_on = !_kernel_irqs_disabled();

	TRACE( "move" _ "Moving, directions = 0x%02X\n" _ directions );

	/* Invert 'directions' as we need to go high->low to drive Chrontel	*/
	/* and or in the current video clock value.				*/
	directions = (~directions & CHRONTEL_CONTROL_DIRMASK) | vclock;

	TRACE( "move" _ "Writing 0x%02X to control reg\n" _ (char)directions );

#ifndef DEBUG
	if ( irqs_on ) _kernel_irqs_off();

	/* Write to 'magic' location. */
	*(volatile char *)CHRONTEL_CONTROL = (char)directions;

	/* Reset 'magic' location to default all lines high + current video clock value. */
	*(volatile char *)CHRONTEL_CONTROL = CHRONTEL_CONTROL_DEFAULT | vclock;

	if ( irqs_on ) _kernel_irqs_on();
#endif

	TRACE( "move" _ "Reset control reg to 0x%02X\n" _ CHRONTEL_CONTROL_DEFAULT | vclock );
}


/* Get current X, Y values. */
/**/
static void
GetCurrent( int *x, int *y )
{
#ifndef DEBUG
        int cx, cy, ret;

        if ( _swix(NVRAM_Read, _INR(0,2)|_OUT(0), CHRONTEL_DISPLAYXPOSITION, &cx, 0, &ret) == NULL )
                if ( (ret > 0) && (_swix(NVRAM_Read, _INR(0,2)|_OUT(0), CHRONTEL_DISPLAYYPOSITION, &cy, 0, &ret) == NULL) )
                        if ( ret > 0 )
                        {
                        	/* Sign extend configured values. */
                        	*x = (cx << 24) >> 24;
                        	*y = (cy << 24) >> 24;
                        	return;
                        }
#endif
        *x = *y = 0;
}


/* Set current X, Y values. */
/**/
static void
SetCurrent( int x, int y )
{
	CurrentX = x;
	CurrentY = y;
#ifndef DEBUG
        _swix( NVRAM_Write, _INR(0,2), CHRONTEL_DISPLAYXPOSITION, &CurrentX, 0 );
        _swix( NVRAM_Write, _INR(0,2), CHRONTEL_DISPLAYYPOSITION, &CurrentY, 0 );
#endif
}


static void
MoveDisplay( int x, int y )
{
	int nx, ny, dirx, diry, old_state = State;

	/* Power up Chrontel device if it's powered down. */
	if ( old_state == CHRONTEL_POWERDOWN )
		chrontel_power( CHRONTEL_POWERUP );

	/* Determine absolute X movement and direction. */
	nx = x - CurrentX;
	if ( nx < 0 )
	{
		nx = -nx;
		dirx = CHRONTEL_CONTROL_LEFT;
	} else
		dirx = CHRONTEL_CONTROL_RIGHT;

	/* Determine absolute Y movement and direction. */
	ny = y - CurrentY;
	if ( ny < 0 )
	{
		ny = -ny;
		diry = CHRONTEL_CONTROL_DOWN;
	} else
		diry = CHRONTEL_CONTROL_UP;

	/* Move in X and Y at the same time and stop when no more movement required. */
	while ( (nx > 0) || (ny > 0) )
	{
		int dirs = 0;
		if ( nx-- > 0 ) dirs |= dirx;
		if ( ny-- > 0 ) dirs |= diry;
		MoveOne( dirs );
	}

	/* If we powered up the Chrontel device then power it down again. */
	if ( old_state == CHRONTEL_POWERDOWN )
		chrontel_power( CHRONTEL_POWERDOWN );
}


/* Set the display position to X, Y */
/**/
static void
SetDisplay( int x, int y )
{
	/* Limit X position. */
	if ( x > CHRONTEL_MAXX ) x = CHRONTEL_MAXX;
	else if ( x < -CHRONTEL_MAXX ) x = -CHRONTEL_MAXX;

	/* Limit Y position. */
	if ( y > CHRONTEL_MAXY ) y = CHRONTEL_MAXY;
	else if ( y < -CHRONTEL_MAXY ) y = -CHRONTEL_MAXY;

	/* Move to the desired position. */
	MoveDisplay( x, y );

	/* Set current values in NV-RAM. */
	SetCurrent( x, y );
}


/* Define our own function for lowercasing characters as the __ctype	*/
/* does not seem to be set correctly when sharing C library statics	*/
/* via TinyStubs.							*/
static char
Lower( char c )
{
	return ((c < 'A') || (c > 'Z')) ? c : c - 'A' + 'a';
}

 
/* Perform case insensitive string comparison - returns true if the same */
/**/
static int
StrNNoCaseCmp( char *str1, char *str2, int len )
{
	while ( len && (Lower(*str1) == Lower(*str2)) )
	{
		str1++; str2++; len--;
	}

	/* Return true if the strings are the same. */
	return len==0;
}


/* Scan the Directions table to try to find a match. Return the deltas	*/
/* and non-zero if a match is found otherwise return 0.			*/
/**/
static int
FindDeltas( char *direction, int length, int *dx, int *dy )
{
	int i;

	for ( i = 0; Directions[i].name != NULL; i++ )
		if ( StrNNoCaseCmp(Directions[i].name, direction, length) && Directions[i].name[length]==0 )
		{
			*dx = Directions[i].dx;
			*dy = Directions[i].dy;
			return -1;
		}

	return 0;
}


/* Move the display based on one of the strings in the Directions table.	*/
/* These are case insensitive.							*/
/**/
void
chrontel_move( char *direction, int length )
{
	if ( length==5 && StrNNoCaseCmp("reset", direction, length) )
		SetDisplay( 0, 0 );
	else
	{
		/* Get movement deltas. */
		int dx, dy;

		if ( FindDeltas(direction, length, &dx, &dy) )
			/* Add the deltas from the table to the current position to set the new position. */
			SetDisplay( CurrentX + dx, CurrentY + dy );
	}
}


/* Write out a string. */
_kernel_oserror *
os_write0(const char *str)
{
	_kernel_swi_regs r;
	r.r[0]=(int)str;
	return _kernel_swi(OS_Write0, &r, &r);
}


/* Report on the status of the Chrontel device and FSynth. */
_kernel_oserror *
chrontel_status( void )
{
	sprintf(print_buffer, "Current offsets: X=%+d Y=%+d\r\n"
	       "Mode clock: %6d  Clock%2d=%6d      Divider=%2d          Current=%6d\r\n",
	       CurrentX, CurrentY, get_modeclock(), vclock, clock_rate[vclock], divider,
	       divider==0?0:clock_rate[vclock]/divider);
	return os_write0(print_buffer);
}


/* List the available clocks. */
_kernel_oserror *
chrontel_clocks( void )
{
	int i;
	_kernel_oserror *err;

	for(i=0; i<16; i+=4) {
		sprintf(print_buffer, "%6d    %6d    %6d    %6d\r\n", clock_rate[i],
		        clock_rate[i+1], clock_rate[i+2], clock_rate[i+3]);
		err=os_write0(print_buffer);
		if(err) return err;
	};
	return 0;
}


/* Power up/down the Chrontel device. Powering up means resetting the	*/
/* configured display position.						*/
void
chrontel_power( int reason )
{
	ModifyIOLINES( IOMD_IOLINES_VIDEOPOWERUP, (reason == CHRONTEL_POWERUP) ? IOMD_IOLINES_VIDEOPOWERUP : 0 );
	State = reason;
}


void
chrontel_setup( void )
{
	int x, y;

	TRACE( "init" _ "chrontel_setup: LastReset = %d\n" _ LastReset );

	/* Read configured x and y movements from NV-RAM. */
	GetCurrent( &x, &y );

	if ( LastReset == 1 )
	{
		/* Power-on reset so display needs to be positioned. */
		/* Set display to the configured position.           */ 
		SetDisplay( x, y );
	}
	else
	{
		CurrentX = x;
		CurrentY = y;
	}

}

void
chrontel_newmode( void )
{
	_kernel_swi_regs r;
	int clk_div=get_vclock_div(); /* Get the clock index and divider. */

	if(clk_div==0) clk_div=ReadVClock(); /* Just in case it failed */
	
	vclock = clk_div & 0xf;
	divider = clk_div >> 4;
	r.r[0]=divider-1;
	if(divider && _kernel_swi(OS_VIDCDivider, &r, &r))
		return;

	/* Do a dummy move to set all position controls and video clock to defaults. */
	MoveOne( 0 );
}

_kernel_oserror *
chrontel_initialise( void )
{
	/* Set system variable to allow positioning from HTML pages. */
	_swix( OS_SetVarVal, _INR(0,4), CHRONTEL_VAR, CHRONTEL_VARVAL, CHRONTEL_VARVALLEN, 0, 0 );

	/* Read last reset type (1 = power on, 2 = hard reset). */
	_swix( OS_Byte, _INR(0,2)|_OUT(1), 253, 0, 255, &LastReset );

	TRACE( "init" _ "chrontel_initialise: LastReset = %d\n" _ LastReset );

	chrontel_newmode();

	/* Power up Chrontel device. */
	chrontel_power( CHRONTEL_POWERUP );

	CurrentX = CurrentY = 0;

	if ( LastReset == 1 )
	{
		/* Power-on reset so display needs to be positioned.        */
		/* Set default position (experimentation suggests -6 in X). */
		MoveDisplay( -6, 0 );
	}

	return NULL;
}


void
chrontel_finalise( void )
{
	/* Maybe shouldn't do this but... */
	chrontel_power( CHRONTEL_POWERDOWN );
}
