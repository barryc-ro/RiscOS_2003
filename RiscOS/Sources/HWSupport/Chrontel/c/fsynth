#include "kernel.h"
#include "swis.h"

#include "chrontel.h"

#if defined(FSYNTH_CHRONTEL) /* Boca box */

unsigned int clock_rate[16] = {
   25180,  28320,  40000,  72000,  50000,  77000,  36000,  44900,
  130000, 120000,  80000,  31500, 110000,  65000,  75000,  94500
};

#elif defined(FSYNTH_ICS) /* Funii/II box */

unsigned int clock_rate[16] = {
   25175,  28322,  31500,  36000,  40000,  44900,  50000,  65000,
   75000,  77500,  80000,  90000, 100000, 110000, 126000, 136000
};

#elif defined(FSYNTH_ICS2) /* Unknown */

unsigned int clock_rate[16] = {
   50350,  56644,  65000,  72000,  80000,  89800,  63000,  75000,
   25175,  28322,  31500,  36000,  40000,  44900,  50000,  65000
};

#elif defined(FSYNTH_NONE)

unsigned int clock_rate[16] = {
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

#else
#error Unknown clock chip.
#endif

/* Read the requested mode clock from the kernel. */
int
get_modeclock( void )
{
	_kernel_swi_regs r;
	static const unsigned int rvvtab[2]={ 173, -1 };
	int result[2];
	
	r.r[0]=(int)rvvtab;
	r.r[1]=(int)result;
	if(_kernel_swi(OS_ReadVduVariables, &r, &r))
		return 0;
	return result[0];
}

#ifndef FSYNTH_NONE

/* Attempt to deal with a new screen mode.  Cannot do anything with errors. */
int
get_vclock_div( void )
{
	int i;
	int best_clock=0;
	int best_divider=1;
	unsigned int mode_clock;

	mode_clock=get_modeclock();
	if(mode_clock==0)
		return 0;

	/* Try all the clocks. */
	for(i=0; i<16; i++)
	{
		int divider, error1, error2, target;
		
		/* Find the best divider. */
		divider=(2*clock_rate[i]/mode_clock+1)/2;
		if(divider==0)
			divider = 1;
		else if(divider>8)
			divider = 8;

		/* Calculate error*divider1*divider2 for both. */
		target=mode_clock*best_divider*divider;
		error1=(clock_rate[i])*best_divider - target;
		error2=(clock_rate[best_clock])*divider - target;

		/* If this clock is better... */
		if((error1<0?-error1:error1) <
		   (error2<0?-error2:error2))
		{
			/* Then select it. */
			best_clock=i;
			best_divider=divider;
		}
	}
	
	return best_clock | (best_divider<<4);
}

#else

int
get_vclock_div( void ) {
	return 0;
}

#endif
