/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "chrontel.h"


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	chrontel_finalise();
	
	if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
	
	return NULL;
	
	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
	_kernel_oserror *err = chrontel_initialise();
	
	/* Try to use TinyStubs if possible.
	 */
	if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );
	
	return err;
	
	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	char *param = arg_string;

	/* Find end of parameters and terminate properly. */
	while ( *param >= ' ' ) param++;
	*param = '\0';

	/* We currently only have one command so don't bother checking 'cmd_no'. */

	/* Pick out parameter following "Chrontel_Move:". */
	if ((param = strchr(arg_string, ':')) != NULL)
	{
		/* Let Chrontel code deal with it from here. */
		chrontel_move( param+1 );
	}

	return NULL;

	NOT_USED( argc );
	NOT_USED( cmd_no );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
	/* We currently only pick up Service_Standby so don't bother checking 'service_no'. */

	chrontel_power( r->r[0] ? CHRONTEL_POWERDOWN : CHRONTEL_POWERUP );

	NOT_USED( service_no );
	NOT_USED( pw );
}
