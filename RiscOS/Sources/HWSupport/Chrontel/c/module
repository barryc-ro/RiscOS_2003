/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "Global/Services.h"
#include "PortMan.h"

#include "module.h"
#include "chrontel.h"
#include "header.h"

#include "debugit.h"


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	chrontel_finalise();

	if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

	return NULL;

	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( const char *cmd_tail, int podule_base, void *pw )
{
	_kernel_oserror *err = chrontel_initialise();

	TRACE_VAR( MODULE_NAME "$Debug" );
	TRACE( "init" _ "Chrontel module initialising\n" );

	/* Try to use TinyStubs if possible.
	 */
	if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

	return err;

	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( const char *arg_string, int argc, int cmd_no, void *pw )
{
	int arg_len;
	char *param;

	for(arg_len=0; arg_string[arg_len] >=' ' && arg_string[arg_len] != '?';
	    arg_len++)
		/* Nothing */;

	TRACE( "command" _ "Cmd=%d Parameter = '%.*s'\n" _ cmd_no _ arg_len _
	       arg_string );

	switch(cmd_no)
	{
	case CMD_Chrontel_Move:
		/* Pick out parameter following "Chrontel_Move:". */
		if ((param = memchr(arg_string, ':', arg_len)) != NULL)
		{
			/* Let Chrontel code deal with it from here. */
			chrontel_move( param+1, arg_len-(param+1-arg_string) );
		}
		break;

	case CMD_Chrontel_Status:
		return chrontel_status();

	case CMD_Chrontel_Clocks:
		return chrontel_clocks();
	}

	return NULL;
	NOT_USED( argc );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
	switch ( service_no )
	{
		case Service_Standby:
			chrontel_power( r->r[0] ? CHRONTEL_POWERDOWN : CHRONTEL_POWERUP );
			break;

		case Service_Reset:
			chrontel_setup();
			break;
		case Service_ModeChange:
			chrontel_newmode();
			break;
		case Service_PortMan:
			if (r->r[0] == PORTMAN_SERVICE_STARTING)
				chrontel_power(CHRONTEL_POWERRESET);
			break;
	}

	NOT_USED( pw );
}
