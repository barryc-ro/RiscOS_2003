        SUBT    Module start -> Source.Module

; Change record
; =============
;
; CDP - Christopher Partington, Cambridge Systems Design
;
;
; 29-Jan-92  13:09  CDP
; First version.
;
; 04-Feb-92  16:57  CDP
; Changed Service_MessageFileClosed code as semantics of service call changed.
;
; 11-Mar-92  10:42  CDP
; ScreenBlanker service call code changed to check flags in R0, not R2.
;
; 02-Apr-92  10:40  CDP
; New specification: rewrite started.
; Monitor type now read using OS_ReadSysInfo instead of CMOS OS_Byte.
;
; 19-May-92  12:08  CDP
; Added embedded copyright message and removed VersionStr symbol used by
; task info box (now defined in Task source file).
;
;
;*End of change record*

;******************************************************************************

; Module header

Module_BaseAddr
        DCD     Start   - Module_BaseAddr
        DCD     Init    - Module_BaseAddr
        DCD     Die     - Module_BaseAddr
        DCD     Service - Module_BaseAddr
        DCD     Title   - Module_BaseAddr
        DCD     Help    - Module_BaseAddr
        DCD     CmdTab  - Module_BaseAddr
        DCD     0                               ; no SWIs
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     MessageFile - Module_BaseAddr
 |
        DCD     0
 ]

;******************************************************************************

        ALIGN
TASK    DCB     "TASK"

Help    DCB     "BatMgr",9,9
 [ Test
        DCB     "$version ($date) $time - DEVELOPMENT VERSION"
 |
        DCB     "$version ($vdayno $vmon $vyear)"
 ]
        DCB     0                       ; terminator


StartCommand    DCB     "*Desktop_"     ; shares Title string
Title           DCB     "BatMgr",0
ShutdownCommand DCB     "Shutdown",0    ; i.e. *Shutdown


; Module command table

CmdTab
        Command Desktop_BatMgr,0,0,International_Help   ; no parameters
        Command BatMgr_AddIcon,0,0,International_Help   ; no parameters
ValidationString                                        ; and end of CmdTab
        DCD     0


; Help text etc.

 [ International_Help <> 0
Desktop_BatMgr_Help     DCB     "HBMGDBM",0
Desktop_BatMgr_Syntax   DCB     "SBMGDBM",0
BatMgr_AddIcon_Help     DCB     "HBMGADI",0
BatMgr_AddIcon_Syntax   DCB     "SBMGADI",0
 |
Desktop_BatMgr_Help
        DCB     "The Battery Manager maintains information about battery",13,10
        DCB     " condition and warns of impending power loss.",13,10
        DCB     "Do not use *Desktop_BatMgr, use *Desktop instead."
        DCB     0

Desktop_BatMgr_Syntax
        DCB     "Syntax: *Desktop_BatMgr"
        DCB     0

BatMgr_AddIcon_Help
        DCB     "*BatMgr_AddIcon adds the Battery Manager icon to the icon bar."
        DCB     0

BatMgr_AddIcon_Syntax
        DCB     "Syntax: *BatMgr_AddIcon"
        DCB     0
 ]

;******************************************************************************

; Resource file names

; International_Help requires Message file path to be word aligned.

                ALIGN
MessageFile     DCB     "BatMgr:Messages",0
TemplateFile    DCB     "BatMgr:Templates",0
SpriteFile      DCB     "BatMgr:Sprites",0

Path            DCB     "BatMgr$Path",0
DefPath         DCB     "Resources:$.Resources.BatMgr.",0

;******************************************************************************

        ALIGN
ErrorBlock_NoStart
        DCD     0
        DCB     "ErrNoStart",0
        ALIGN

ErrorBlock_OldWimp
        DCD     ErrorNumber_WimpNotPresent
        DCB     "ErrOldWimp",0
        ALIGN

ErrorBlock_NoTemplate
        DCD     ErrorNumber_WimpNoTemplate
        DCB     "ErrNoTemplate",0
        ALIGN

ErrorBlock_BadTemplate
        DCD     ErrorNumber_WimpBadTemplate
        DCB     "ErrBadTemplate",0
        ALIGN

;******************************************************************************

Init    ROUT
;
; Entry:
;    R12 -> private word
;
; Exit:
;    R7-R11, R13 preserved

        Push    "LR"
 [ OnStork
        SWI     XPortable_ReadFeatures
        Pull    "PC",VS                         ; quit if error, cos we're not on a portable
 ]
        LDR     R2,[R12]
        TEQS    R2,#0                           ; got work space?
        BNE     %FT10                           ; branch if so

; get workspace

        MOV     R0,#ModHandReason_Claim
        LDIMM   R3,ModuleWorkspace
        SWI     XOS_Module
        Pull    "PC",VS                         ; quit if error

; got workspace ok

        STR     R2,[R12]                        ; store in private word
        MOV     R0,#0
        STR     R0,[R2,#:INDEX:TaskWorkspacePtr]
10
        MOV     MWP,R2                          ; set module workspace pointer
        MOV     R0,#0                           ; flag not active
        STR     R0,TaskHandle
        STRB    R0,WimpShutdown_Started

; read monitor type

        MOV     R0,#1
        SWI     XOS_ReadSysInfo
        Pull    "PC",VS

        STRB    R1,MonitorType

 [ StandaloneResources :LOR: PartialResources
        ADRL    R0,ResFileList
        SWI     XResourceFS_RegisterFiles
 ]

 [ HotKeyTasks
; initialise Path variable if null
        ADR     R0,Path
        ADR     R1,DefPath
        MOV     R2,#?DefPath
        BL      EnsureVariableExists

; and set default commands for the 'ToolBox'
        ADRL    R0,Task1VarName
        ADRL    R1,Task1DefValue
        MOV     R2,#?Task1DefValue
        BL      EnsureVariableExists

; and the 'Heart' keys
        ADRL    R0,Task2VarName
        ADRL    R1,Task2DefValue
        MOV     R2,#?Task2DefValue
        BL      EnsureVariableExists
 |
; initialise Path variable if null

        addr    R0,Path
        MOV     R2,#-1
        MOV     R3,#0
        MOV     R4,#VarType_Expanded
        SWI     XOS_ReadVarVal                  ; returns R2=0 if doesn't exist

        CMPS    R2,#0                           ; if null, set it
        addr    R0,Path,EQ
        addr    R1,DefPath,EQ
        MOVEQ   R2,#?DefPath
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal
 ]

; open messages file

        wsaddr  R0,MsgTransBlk
        addr    R1,MessageFile
        MOV     R2,#0                           ; no buffer supplied
        SWI     XMessageTrans_OpenFile

 [ StandaloneResources :LOR: PartialResources
        MOVVS   R6,R0
        BVS     %FT20
 |
        Pull    "PC",VS
 ]

; initialise BMU interface

        BL      BMUBegin
        Pull    "PC",VC                         ; all done if no error

; error: close message file
; R0 = error code

        MOV     R6,R0                           ; save error

        wsaddr  R0,MsgTransBlk
        SWI     XMessageTrans_CloseFile
20

 [ StandaloneResources :LOR: PartialResources
        ADRL    R0,ResFileList
        SWI     XResourceFS_DeregisterFiles
 ]

        MOV     R0,R6                           ; restore error
        SETV
        Pull    "PC"

 [ HotKeyTasks
;
; R0  = Pointer to variable name
; R1  = Pointer to value to set iff variable does not exist
; R2  = Length of value to set
;
EnsureVariableExists
        Push    "R0, R1, R2, LR"
        MOV     R2,#-1
        MOV     R3,#0
        MOV     R4,#VarType_Expanded
        SWI     XOS_ReadVarVal                  ; returns R2=0 if doesn't exist
        CMPS    R2,#0                           ; if null, set it

        Pull    "R0, R1, R2"
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal
        Pull    "PC"
 ]

;******************************************************************************

Die     ROUT
;
; Entry:
;    R12 -> private word
;
; Exit:
;    R7-R11, R13 preserved

        LDR     MWP,[R12]
        TEQS    MWP,#0                          ; got workspace
        MOVEQ   PC,LR                           ; return if so

        Push    "LR"

        BL      BMUEnd
        Pull    "PC",VS                         ; abort if something failed

; remove restore speaker state call after

        ADR     R0,Ticker_RestoreSpeakerState
        MOV     R1,MWP
        SWI     XOS_RemoveTickerEvent

; remove restore speaker state callback
; R1 preserved

        ADRVC   R0,TickerCB_RestoreSpeakerState
        SWIVC   XOS_RemoveCallBack
        Pull    "PC",VS

; shut down task if active

        LDR     R0,TaskHandle
        CMPS    R0,#0                           ; active?
        LDRGT   R1,TASK                         ; if so, closedown
        SWIGT   XWimp_CloseDown

; if have got task workspace free it

        LDR     R2,TaskWorkspacePtr             ; got task workspace?
        TEQS    R2,#0
        BEQ     %FT10                           ; branch if not

; free task workspace
; R2 -> task workspace

        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module
        MOV     R0,#0
        STR     R0,TaskWorkspacePtr

10

; close message file

        wsaddr  R0,MsgTransBlk
        SWI     XMessageTrans_CloseFile

 [ StandaloneResources :LOR: PartialResources
        ADRL    R0,ResFileList
        SWI     XResourceFS_DeregisterFiles
 ]

        Pull    "PC"

;******************************************************************************

Service ROUT
;
; Entry:
;    R12 -> private word
; Exit:
;    R1 = 0 => service claimed
;    All other registers preserved unless returning values

        ASSERT  Service_Serviced = 0

        LDR     MWP,[R12]
        TEQS    MWP,#0
        MOVEQS  PC,LR                           ; can't handle if no workspace

; check service type

        TEQS    R1,#Service_StartWimp
        BEQ     %FT10
        TEQS    R1,#Service_StartedWimp
        BEQ     %FT20
        TEQS    R1,#Service_ShutDownComplete
        BEQ     %FT25
        TEQS    R1,#Service_MessageFileClosed
        BEQ     %FT30
 [ StandaloneResources :LOR: PartialResources
        TEQS    R1,#Service_ResourceFSStarting
        BEQ     %FT40
 ]
        TEQS    R1,#Service_ScreenBlanked
        BEQ     %FT50
        TEQS    R1,#Service_ScreenRestored
        BEQ     %FT60
        TEQS    R1,#Service_ModeChange
        BEQ     %FT70
 [ CycleBattery
        TEQS    R1,#Service_Portable
        BEQ     %FT80
 ]
        TEQS    R1,#Service_Reset
        MOVNES  PC,LR

; Service_Reset

        Push    "R0-R2,LR"
        MOV     LR,#0
        STR     LR,TaskHandle

; determine whether it was a soft reset

        MOV     R0,#&FD                         ; read reset type
        MOV     R1,#0
        MOV     R2,#&FF
        SWI     XOS_Byte
        Pull    "R0-R2,PC",VS,^                 ; quit if error
        TEQS    R1,#0                           ; soft?
        BLEQ    BMUBegin                        ; if yes, init BMU interface
        Pull    "R0-R2,PC",,^

;~~~~~~~~~~~~~~~

10
; Service_StartWimp

        Push    "LR"
        LDR     LR,TaskHandle                   ; active already?
        TEQS    LR,#0
        MOVEQ   LR,#-1
        STREQ   LR,TaskHandle
        addr    R0,StartCommand,EQ
        MOVEQ   R1,#0                           ; claim call
        Pull    "PC",,^

;~~~~~~~~~~~~~~~

20
; Service_StartedWimp
;
; Check task handle to see if starting

        Push    "LR"
        LDR     LR,TaskHandle
        CMPS    LR,#-1
        MOVEQ   LR,#0
        STREQ   LR,TaskHandle
        Pull    "PC",,^

;~~~~~~~~~~~~~~~

25
; Service_ShutDownComplete
;
; Wimp shutdown has completed - check if we initiated it and remove
; power if so

        Push    "LR"
        LDRB    LR,WimpShutdown_Started
        TEQS    LR,#0
        Pull    "PC",EQ,^                       ; quit if not started by us

; we started the shutdown so remove the power

        B       PowerOff

;~~~~~~~~~~~~~~~

30
; Service_MessageFileClosed
;
; R0 -> MessageTrans block

        Push    "R0,TWP,LR"

; Check if task is active

        LDR     LR,TaskHandle
        CMPS    LR,#0
        Pull    "R0,TWP,PC",LE,^

; Our task IS active (so must have workspace)

 [ T

; New semantics: only get this service call when our file has been closed
 
        LDR     TWP,TaskWorkspacePtr            ; set task workspace ptr
        BL      MakeMenu                        ; ...and reinit menu structure

 |

; See if it was our message file that was closed

        wsaddr  LR,MsgTransBlk
        TEQS    LR,R0                           ; our file?
        LDREQ   TWP,TaskWorkspacePtr            ; yes, set task workspace ptr
        BLEQ    MakeMenu                        ; ...and reinit menu structure

 ]

        Pull    "R0,TWP,PC",,^

;~~~~~~~~~~~~~~~

 [ StandaloneResources :LOR: PartialResources
40
; Service_ResourceFSStarting
; R2 -> address inside ResourceFS module to call
; R3 = workspace pointer for module

        Push    "R0-R3,LR"

        ADRL    R0,ResFileList
        MOV     LR,PC                           ; get return address
        MOV     PC,R2                           ; R2 = address to call

        Pull    "R0-R3,PC",,^

 ]

;~~~~~~~~~~~~~~~

50
; Service_ScreenBlanked

        TSTS    R0,#1                           ; beeping?
        MOVNE   R1,#Service_Serviced            ; claim call if so
        MOVS    PC,LR

;~~~~~~~~~~~~~~~

60
; Service_ScreenRestored

        TSTS    R0,#1                           ; beeping?
        MOVEQS  PC,LR                           ; return if not

; it is the beep service call - are we beeping?

        LDRB    R1,T1BeepActive                 ; get flag
        TEQS    R1,#0                           ; beeping?
        MOVEQ   R1,#Service_ScreenRestored      ; if not, restore R1
        MOVEQS  PC,LR                           ; ...and quit

; we are beeping

        Push    "R0,R2,R3,LR"

; we should beep (ok to do this here rather than on a callback as the
; service call is issued on a callback by the screen blanker)

; switch speaker on, saving previous enable state

        MOV     R0,#2                           ; speaker on
        SWI     XSound_Speaker                  ; returns prev state in R0
        STRB    R0,SpeakerState                 ; save previous state

; beep

        LDIMM   R0,&017F0001                    ; amplitude/channel
        LDIMM   R1,&00085A00                    ; duration/pitch
        SWI     XSound_ControlPacked

        MOV     R0,#20                          ; sync with prev event
        MOV     R1,#0                           ; Sound_ControlPacked
        LDIMM   R2,&017F0001                    ; amplitude/channel
        LDIMM   R3,&00085A00                    ; duration/pitch
        SWI     XSound_QSchedule

; add a callafter to restore speaker state when sound has gone out

        MOV     R0,#100                         ; centiseconds
        ADR     R1,Ticker_RestoreSpeakerState
        MOV     R2,MWP
        SWI     XOS_CallAfter

        MOV     R1,#Service_Serviced            ; claim call
        Pull    "R0,R2,R3,PC",,^

;~~~~~~~~~~~~~~~

70
; Service_ModeChange

        Push    "LR"
        STRB    R3,MonitorType                  ; save monitor type

; cause event for task (if active) so it will update colours if necessary

        MOV     LR,#PollWordReason_BMUEvent
        STR     LR,PollWord                     ; force task reschedule

        Pull    "PC",,^

 [ CycleBattery
;~~~~~~~~~~~~~~~

80
; Service_Portable

        TEQS    R2, #ServicePortable_FreezeRequest
        MOVNES  PC,LR 

; inhibit any attempt to freeze the machine (SWI Portable_Stop) if cycling the battery
; because we need to stay awake to control the cycles

        Push    "LR"

        LDRB    LR, CycleCount                  ; are we cycling?
        TEQS    LR, #0                          ;
        MOVNE   R1,#Service_Serviced            ; claim call if so
       
        Pull    "PC",,^
 ]
;******************************************************************************

Desktop_BatMgr_Code     ROUT
;
; Entry:
;    R0 -> command tail
;    R1 = parameter count
;    R12 -> private word

        Push    "LR"

        LDR     MWP,[R12]
        TEQS    MWP,#0
        Pull    "PC",EQ

; check if called after Wimp started

        LDR     LR,TaskHandle
        CMPS    LR,#-1
        MOVEQ   R2,R0                           ; R2 -> command tail
        MOVEQ   R0,#ModHandReason_Enter
        addr    R1,Title,EQ
        SWIEQ   XOS_Module

; if OS_Module returns, error

        addr    R0,ErrorBlock_NoStart
        BL      ErrorLookup
        Pull    "PC"

;******************************************************************************

BatMgr_AddIcon_Code     ROUT
;
; Entry:
;    R0 -> command tail
;    R1 = parameter count
;    R12 -> private word

; if got workspace, tell task to add the icon

        LDR     MWP,[R12]                       ; get module workspace ptr
        TEQS    MWP,#0
        MOVNE   R0,#PollWordReason_AddIcon
        STRNE   R0,PollWord
        MOV     PC,LR

;******************************************************************************

ErrorLookup     ENTRY   "R1-R7"
;
; Entry:
;    R0 -> error block with tokenised message
;
; Exit:
;    R0 -> error block with real message
;    V set

        wsaddr  R1,MsgTransBlk
        MOV     R2,#0                           ; use internal buffer
        MOV     R4,#0                           ; no parameter 0
        MOV     R5,#0                           ; no parameter 0
        MOV     R6,#0                           ; no parameter 0
        MOV     R7,#0                           ; no parameter 0
        SWI     XMessageTrans_ErrorLookup
        EXIT

;******************************************************************************

StarShutdown    ROUT
;
; Entry:
;    R12 -> workspace
;    MODE: SVC
;    IRQs enabled
;
; Exit:
;    Does not return (so LR not saved)

; *shutdown the machine

        addr    R0,ShutdownCommand
        SWI     XOS_CLI

PowerOff

; wait a while

        SWI     XOS_ReadMonotonicTime
        ADD     R1,R0,#50*3
10
        SWI     XOS_ReadMonotonicTime
        CMPS    R0,R1
        BLO     %BT10

; tell the BMU to remove power

        MOV     R0,#PortableBMUC_RemovePower
        SWI     XPortable_CommandBMU

; wait for power to go

        TEQP    PC,#SVC_mode :OR: I_bit :OR: F_bit
20      B       %BT20

;******************************************************************************

TickerCB_RestoreSpeakerState    ENTRY   "R0"
;
; CallBack routine to restore speaker state from SpeakerState
;
; Entry:
;    MWP -> workspace
;    MODE: SVC
;    IRQs enabled
;
; Exit:
;    All registers and flags preserved

        LDRB    R0,SpeakerState
        SWI     XSound_Speaker
        EXITS

;******************************************************************************

Ticker_RestoreSpeakerState      ENTRY   "R0"
;
; CallAfter routine to restore speaker state from SpeakerState
;
; Entry:
;    MWP -> workspace
;    MODE: IRQ or SVC
;    IRQs disabled
;
; Exit:
;    All registers and flags preserved

; add callback to do work

        addr    R0,TickerCB_RestoreSpeakerState
        BL      AddCallBack
        EXITS

;******************************************************************************

        END
