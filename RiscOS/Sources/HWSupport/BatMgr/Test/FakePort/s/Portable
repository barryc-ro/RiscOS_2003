        TTL     Source.Portable

        GBLL    T
T       SETL    {TRUE}
        GBLL    F
F       SETL    {FALSE}


        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:Portable
        OPT     OptList+OptNoMacros

        GBLS    version
version SETS    "1.11"
        GET     s.date/time   

; Module header

Module_BaseAddr
        DCD     0
        DCD     Init     - Module_BaseAddr
        DCD     Die      - Module_BaseAddr
        DCD     Service  - Module_BaseAddr
        DCD     Title    - Module_BaseAddr
        DCD     Help     - Module_BaseAddr
        DCD     0
        DCD     Module_SWISystemBase + PortableSWI * Module_SWIChunkSize
        DCD     SWIEntry - Module_BaseAddr
        DCD     SWINames - Module_BaseAddr
        DCD     0

;******************************************************************************

Title   DCB     "Portable",0
Help    DCB     "CDP's Portable",9,"$version ($date) $day $time",0
        ALIGN
        MakeErrorBlock  BadVarNam
        ALIGN

;******************************************************************************

                ^       0,R12
variables       #       PortableBMU_Num_Variables*4
ProcessorSpeed  #       4
PowerState      #       4
MemNeeded       *       :INDEX:@


Defaults
        DCD     0
        DCD     100
        DCD     100
        DCD     0
        DCD     100
        DCD     100
        DCD     0
        DCD     0
        DCD     0
        DCD     0
        DCD     &60
        DCD     0
        ASSERT  (. - Defaults) = (PortableBMU_Num_Variables * 4)

;******************************************************************************

Init    ROUT
;
; Exit:
;    R7-R11, R13 preserved

        Push    "LR"

        LDR     R2,[R12]
        TEQS    R2,#0                           ; got work space?
        BNE     %FT10                           ; branch if so

; get workspace

        MOV     R0,#ModHandReason_Claim
        MOV     R3,#MemNeeded
        SWI     XOS_Module
        Pull    "PC",VS                         ; quit if error

; got workspace ok

        STR     R2,[R12]                        ; store in private word
10
        MOV     R12,R2

; initialise variables

        MOV     R1,#PortableBMU_Num_Variables   ; number to do
        addr    R2,Defaults
        wsaddr  R3,variables
20
        LDR     R0,[R2],#4
        STR     R0,[R3],#4
        SUBS    R1,R1,#1
        BNE     %BT20

        MOV     R0,#0
        STR     R0,PowerState

        Pull    "PC"

;******************************************************************************

Die     ROUT
;
; Exit:
;    R7-R11, R13 preserved

        MOVS    PC,LR

;******************************************************************************

Service ROUT
;
; Exit:
;    R1 = 0 => service claimed
;    All other registers preserved unless returning values

        MOVS    PC,LR

;******************************************************************************

SWIEntry        ROUT
        LDR     R12,[R12]
        CMPS    R11,#(EndSWIJmpTable - SWIJmpTable) /4
        ADDCC   PC,PC,R11,LSL #2
        B       SWIUnknown

SWIJmpTable
        B       SWISpeed
        B       SWIControl
        B       SWIReadBMUVariable
        B       SWIWriteBMUVariable
        B       SWIBMUControl
EndSWIJmpTable


;******************************************************************************

SWINames
        =       "Portable",0
        =       "Speed",0
        =       "Control",0
        =       "ReadBMUVariable",0
        =       "WriteBMUVariable",0
        =       "BMUControl",0
        =       0
        ALIGN

;******************************************************************************

        MakeErrorBlock  OutOfRange
SWIUnknown      ROUT
        addr    R0,ErrorBlock_OutOfRange
        ORRS    PC,LR,#V_bit

;******************************************************************************

SWISpeed
        Push    "LR"
        LDR     LR,ProcessorSpeed
        AND     R1,LR,R1
        EOR     R1,R1,R0
        STR     R1,ProcessorSpeed
        MOV     R0,LR
        Pull    "PC",,^

;******************************************************************************

SWIControl      ROUT
        Push    "LR"
        LDR     LR,PowerState
        AND     R1,LR,R1
        EOR     R1,R1,R0
        STR     R1,PowerState
        MOV     R0,LR
        Pull    "PC",,^

;******************************************************************************

SWIReadBMUVariable      ROUT
        CMPS    R0,#PortableBMU_Num_Variables
        addr    R0,ErrorBlock_BadVarNam,HS
        ORRHSS  PC,LR,#V_bit

        wsaddr  R1,variables
        ADD     R1,R1,R0,ASL #2
        LDR     R1,[R1]
        BICS    PC,LR,#V_bit

;******************************************************************************

SWIWriteBMUVariable     ROUT
        CMPS    R0,#PortableBMU_Num_Variables
        addr    R0,ErrorBlock_BadVarNam,HS
        ORRHSS  PC,LR,#V_bit

        Push    "R0,LR"

        wsaddr  LR,variables
        ADD     LR,LR,R0,ASL #2
        STR     R1,[LR]
        TEQS    R0,#PortableBMUV_Flags
        MOVEQ   R0,#Event_PortableBMU
        SWIEQ   XOS_GenerateEvent

        Pull    "R0,LR"
        BICS    PC,LR,#V_bit

;******************************************************************************

SWIBMUControl   ROUT
        Push    "R1-R2,LR"
        TEQS    R0,#2                   ; set part charge?
        BNE     %FT10

; set part charged i.e. 4/5 of full charge used

        LDR     LR,variables+1*4
        MOV     LR,LR,ASL #2            ; *4
        DivRem  R1,LR,#5,R2             ; /5
        STR     R1,variables+3*4

        LDR     LR,variables+4*4
        MOV     LR,LR,ASL #2            ; *4
        DivRem  R1,LR,#5,R2             ; /5
        STR     R1,variables+6*4

        LDR     LR,variables+10*4
        ORR     LR,LR,#&20
        STR     LR,variables+10*4

        Pull    "R1-R2,LR"
        BICS    PC,LR,#V_bit

;~~~~~~~~~~~~~~~
10
        TEQS    R0,#3                   ; set full?
        Pull    "R1-R2,PC",NE,^

        MOV     LR,#0
        STR     LR,variables+3*4
        STR     LR,variables+6*4

        LDR     LR,variables+10*4
        ORR     LR,LR,#&20
        STR     LR,variables+10*4

        Pull    "R1-R2,LR"
        BICS    PC,LR,#V_bit

;******************************************************************************

        END
