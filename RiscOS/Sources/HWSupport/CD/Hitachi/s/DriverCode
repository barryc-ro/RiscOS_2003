; DriverCode.s

; HITACHI   CDR-1750S
; HITACHI   ???????

;     NEVER CHANGE R7 or R11









; This carries out the CD_ SWI commands


















;-----------------------------------------------------------------------------------------------
driver_handler_code ROUT
;
; on entry:
;          r0  - r6= Whatever values the various CD_ SWIs use
;          r7 -> control block
;                control block + 0   = SCSI device id (0-7)
;                control block + 4   = SCSI card number (0-3 usually 0)
;                control block + 8   = Logical Unit Number (0-7 usually 0)
;                control block + 12  = Drive type for this module
;          r11 = the number of the CD_ SWI, ie/ 0 = CD_ReadData, 1 = CD_SeekTo etc;
;          r12 -> workspace for this module
;          r13 -> a full descending stack, approx. 1024 bytes
;          r14 = address to return to
; on exit:
;          r0 must be preserved or be return value for the particular SWI
;          r1 - r12 & r14 corrupted
;-----------------------------------------------------------------------------------------------

;--------------------
; Special tag
;--------------------
 DCD       &EE50EE50

;--------------------
; Code
;--------------------

 STASH     "r0, r14"

;----------------------------------------------------------
; Branch to the correct piece of code to handle the command
; The two top bits of R11 (SWIN) are used to indicate the
; number of retries
;----------------------------------------------------------

 BIC       r14, SWIN, #3:SHL:30
 ADR       r10, jump_table_start
 LDR       r14, [ r10, r14, LSL #1 ]
 MOV       r14, r14, LSL #16
 ADD       pc, pc, r14, LSR #16


jump_table_start
 DCW (notsupported    - jump_table_start - 4)      ;  0   OK  ReadData
 DCW (notsupported    - jump_table_start - 4)      ;  1   OK  SeekTo
 DCW (notsupported    - jump_table_start - 4)      ;  2   OK  DriveStatus
 DCW (notsupported    - jump_table_start - 4)      ;  3   OK  DriveReady
 DCW (GetParameters   - jump_table_start - 4)      ;  4   OK
 DCW (SetParameters   - jump_table_start - 4)      ;  5   OK
 DCW (OpenDrawer      - jump_table_start - 4)      ;  6   OK  
 DCW (EjectButton     - jump_table_start - 4)      ;  7   OK  
 DCW (EnquireAddress  - jump_table_start - 4)      ;  8   OK
 DCW (EnquireDataMode - jump_table_start - 4)      ;  9   OK
 DCW (PlayAudio       - jump_table_start - 4)      ; 10   OK
 DCW (PlayTrack       - jump_table_start - 4)      ; 11   OK
 DCW (AudioPause      - jump_table_start - 4)      ; 12   OK
 DCW (EnquireTrack    - jump_table_start - 4)      ; 13   OK
 DCW (ReadSubChannel  - jump_table_start - 4)      ; 14   OK
 DCW (notsupported    - jump_table_start - 4)      ; 15   OK  CheckDrive
 DCW (DiscChanged     - jump_table_start - 4)      ; 16   OK
 DCW (StopDisc        - jump_table_start - 4)      ; 17   OK  
 DCW (notsupported    - jump_table_start - 4)      ; 18   OK  DiscUsed
 DCW (AudioStatus     - jump_table_start - 4)      ; 19   OK
 DCW (notsupported    - jump_table_start - 4)      ; 20   OK  Inquiry
 DCW (DiscHasChanged  - jump_table_start - 4)      ; 21   OK
 DCW (notsupported    - jump_table_start - 4)      ; 22   OK  Control
 DCW (Supported       - jump_table_start - 4)      ; 23   OK
 DCW (notsupported    - jump_table_start - 4)      ; 24   OK  Prefetch
 DCW (notsupported    - jump_table_start - 4)      ; 25   OK  Reset
 DCW (notsupported    - jump_table_start - 4)      ; 26   OK  CloseDrawer
 DCW (IsDrawerLocked  - jump_table_start - 4)      ; 27   OK
 DCW (notsupported    - jump_table_start - 4)      ; 28   OK  AudioControl
 DCW (notsupported    - jump_table_start - 4)      ; 29   OK  AudioLevel
 DCW (Identify        - jump_table_start - 4)      ; 30   OK

notsupported
 ADR       r0, not_supported_error
 B         error_handler_lookup

;-----------------------------------------------------------------------------------------------
;ReadData ROUT
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r2 =   number of blocks
;          r3 ->  where to put data
;          r4 =   number of bytes from each block wanted
;          r7 ->  control block
;          r12 -> my workspace
;          r13 -> full descending stack
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
;SeekTo ROUT
;
; on entry:
;          
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
;DriveStatus ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = status { 1=OK, 2=BUSY, 4=NOTREADY, 8=UNAVAILABLE }
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
;DriveReady ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          r0 = 0 if drive is OK, else r0 = 1
;
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
GetParameters ROUT
;
; on entry:
;          r0 -> parameter block
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 MOV       r6, #1

SetParameters_jumps_in_here
EnquireDataMode_jumps_in_here

;--------------------------------
; SCSI ModeSense command
;--------------------------------

 STASH     r0

 BL        space_saver

 MOV       r3, #&1a
 ORR       r3, r3, r10, LSL #8+5
 MOV       r4, #28
 STMIA     r2, { r3, r4 }

 ORR       r0, r0, #readdata

 ADR       r3, buffer + 16

 SWI       XSCSI_Op

 GRAB      r5

 BVS       error_handler

 TEQ       r6, #1
 BNE       SetParameters_jumps_back

;-----------------------------
; Inactivity timer multiplier 
;-----------------------------
 MOV       r1, #0

;-----------------
; read retry count
;-----------------
 LDRB      r2, buffer + 16 + 12 + 8 + 3

;----------
; data mode
;----------
 LDR       r14, buffer + 16 + 4 + 4

 BIC       r14, r14, #255
 TEQ       r14, #mode1datasizeHBLB
 MOVEQ     r3, #1
 MOVNE     r3, #2

;-----------------
; RESERVED / speed
;-----------------
 MOV       r4, #0

 STMIA     r5, { r1, r2, r3, r4 }

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
SetParameters ROUT
;
; on entry:
;          r0 -> parameter block
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------


;---------------------------------
; First get the current parameters
;---------------------------------
 MOV       r6, #0
 B         SetParameters_jumps_in_here

SetParameters_jumps_back
; r5 -> parameter block

;-------------------
; Change the params
;-------------------

; not used in ModeSelect

 MOV       r1, #0
 STRB      r1, buffer + 16 + 0

;------------------------
; Check for reserved word
;------------------------
 LDMIA     r5, { r0, r1, r2, r3 }
 TEQ       r3, #0
 BNE       invalidparameter

;------------------------
; Read retry count
;------------------------
 STRB      r1, buffer + 16 + 12 + 3

;--------------------
; Mode 1 or mode 2
;--------------------
 TEQ       r2, #1
 MOVEQ     r2, #mode1datasizeHBLB
 LDRNE     r2, =mode2datasizeHBLB

 STR       r2, buffer + 16 + 4 + 4

;-------------------
; Set the parameters
;-------------------

 BL        space_saver

 MOV       r3, #&15
 ORR       r3, r3, r10, LSL #8+5
 MOV       r4, #28
 STMIA     r2, { r3, r4 }

 ORR       r0, r0, #writedata

 ADR       r3, buffer + 16

 SWI       XSCSI_Op

 BVS       error_handler

 TEQ       r6, #2
 BEQ       EnquireDataMode2_jumps_back

 TEQ       r6, #3
 BEQ       EnquireDataMode3_jumps_back

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
OpenDrawer ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

;-------------------
; Stop audio
;-------------------
 LDMIA     r7, { r3, r4, r5 }
 ADR       r7, temp_control_block
 STMIA     r7, { r3, r4, r5, r8 }
 SWI       XCD_StopDisc

;-------------------
; Start/Stop command
;-------------------
 BL        space_saver

 MOV       r9, #&1b
 ORR       r9, r9, r10, LSL #8+5
 ORR       r9, r9, #1:SHL:8
 MOV       r14, #2
 STMIA     r2, { r9, r14 }

 SWI       XSCSI_Op

 GRABS     "r0, pc", VC

;-------------------------------------------------
; If error is illegalrequest then drawer is locked
;-------------------------------------------------

 LDR       r1, [ r0 ]
 LDR       r2, =IllegalRequest
 TEQ       r2, r1
 addr      r0, drawer_locked_error, EQ
 BEQ       error_handler_lookup
 B         error_handler

;-----------------------------------------------------------------------------------------------
EjectButton ROUT
;
; on entry:
;          r0 = 0 to allow eject, 1 to prevent
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

;-----------------------
; Check for valid switch
;-----------------------
 CMP       r0, #2
 BCS       invalidparameter

;-----------------------

 MOV       r6, r0

;--------------------------------
; SCSI Prevent/allow command
;--------------------------------

 BL        space_saver

 MOV       r4, #&1e
 ORR       r4, r4, r10, LSL #8+5
 STMIA     r2, { r4, r6 }

 MOV       r4, #0

 SWI       XSCSI_Op

 BVS       error_handler

 MOV       r0, r6
 BL        SetDrawerStatus

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
EnquireAddress ROUT
;
; on entry:
;          r0 = addressing mode for returned data
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = current laser position
;-----------------------------------------------------------------------------------------------

 STASH     r0


; r3 -> store here

;--------------------------------
; SCSI ReadSubChannel command
;--------------------------------

01
 BL        space_saver

 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 MOV       r1, #12

 MOV       r4, #&e5
 ORR       r4, r4, r10, LSL #8+5
 MOV       r6, #0
 STMIA     r2, { r4, r5, r6 }

 ADR       r3, buffer + 16

 MOV       r4, #11

 SWI       XSCSI_Op

 GRAB      r6

 BVS       error_handler


;----------------------------------------------------
; Kludge 'cause sometimes it returns the wrong data !
;----------------------------------------------------
 LDRB      r14, buffer + 16 + 1
 AND       r14, r14, #7
 TEQ       r14, #1
 STASH     r6, NE
 BNE       %BT01

;-----------------------------------
; Get the MSFFormat absolute address
;-----------------------------------
 LDRB      r1, buffer + 16 + 10    ; Frames
 LDRB      r2, buffer + 16 + 9     ; Seconds
 LDRB      r3, buffer + 16 + 8     ; Minutes
 ORR       r1, r1, r2, LSL #8
 ORR       r1, r1, r3, LSL #16

 TEQ       r6, #MSFFormat
 MOVNE     r0, #MSFFormat
 SWINE     XCD_ConvertToLBA      ; R0 = format, R1 = address, RETURNS R1 = address
 BVS       error_handler

 TEQ       r6, #PBFormat
 ADDEQ     r0, r1, #( MaxNumberOfBlocks + 1 ) * 2

 MOVNE     r0, r1

 GRABS     "r1, pc"

;-----------------------------------------------------------------------------------------------
EnquireDataMode ROUT
;
; on entry:
;          r0 = addressing mode for returned data
;          r1 = block
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = addressing mode (1 for mode 1, 2 for mode 2, 3 for mode 2 form 1)
;-----------------------------------------------------------------------------------------------

;----------------------------------
; Store all of the entry parameters
;----------------------------------
 STMIA     r12, { r0, r1, r7, r8 }

;-----------------
; Change to mode 1
;-----------------
 ADR       r0, mode_1_block
 MOV       r6, #2
 B         EnquireDataMode_jumps_in_here


EnquireDataMode2_jumps_back

;---------------
; Read some data
;---------------
 LDMIA     r12, { r0, r1, r2, r8 }
 LDMIA     r7, { r4, r5, r6 }
 ADR       r7, temp_control_block
 STMIA     r7, { r4, r5, r6, r8 }
 MOV       r2, #1
 ADR       r3, buffer + 128
 MOV       r4, #1
 SWI       XCD_ReadData

;-----------------------------
; No error - so must be mode 1
;-----------------------------
 MOVVC     r0, #1
 GRABS     "r1, pc", VC

;-----------------
; Change to mode 2
;-----------------
 ADR       r0, mode_2_block
 MOV       r6, #3
 B         EnquireDataMode_jumps_in_here

EnquireDataMode3_jumps_back

;-------------------------
; Read some data
;-------------------------
 LDMIA     r12, { r0, r1, r2, r8 }
 LDMIA     r7, { r4, r5, r6 }
 ADR       r7, temp_control_block
 STMIA     r7, { r4, r5, r6, r8 }
 MOV       r2, #1
 ADR       r3, buffer + 128
 MOV       r4, #1
 SWI       XCD_ReadData

;-----------------------------
; No error - so must be mode 2
;-----------------------------
 MOVVC     r0, #2
 GRABS     "r1, pc", VC

;----------------------
; What error occured ?
;----------------------
 LDR       r1, [ r0 ]

 LDR       r2, =&00803400 + 20   ; Compact disc is faulty
 TEQ       r1, r2
 MOVEQ     r0, #0
 GRABS     "r1, pc", EQ

 B         error_handler

;-----------------------------------------------------------------------------------------------
PlayAudio ROUT
;
; on entry:
;          r0 = addressing mode
;          r1 = start address
;          r2 = end address
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 MOV       r9, r0
 LDMIA     r7, { r3, r4, r5 }
 ADR       r7, temp_control_block
 STMIA     r7, { r3, r4, r5, r8 }
 SWI       XCD_StopDisc


 MOV       r0, r9
 SWI       XCD_ConvertToLBA
 ADDVC     r1, r1, #( MaxNumberOfBlocks + 1 ) * 2
 MOVVC     r0, #LBAFormat
 SWIVC     XCD_ConvertToMSF

 MOVVC     r5, r1

;-------------------------------------------
; Store MSF start address in parameter block
;-------------------------------------------

 MOVVC     r1, r2
 MOVVC     r0, r9
 SWIVC     XCD_ConvertToLBA
 ADDVC     r1, r1, #( MaxNumberOfBlocks + 1 ) * 2
 MOVVC     r0, #LBAFormat
 SWIVC     XCD_ConvertToMSF

;-------------------------------
; Store end of play ( in M S F )
;-------------------------------


;-------------------------------
; Reverse byte order of
; start and end MSF
;-------------------------------
 MOVVC     r14, #&ff00
 ORRVC     r14, r14, r14, LSL #16
 ANDVC     r8, r14, r5, ROR #8
 ANDVC     r5, r14, r5
 ORRVC     r5, r8, r5, ROR #24

 ANDVC     r8, r14, r1, ROR #8
 ANDVC     r6, r14, r1
 ORRVC     r6, r8, r6, ROR #24

;--------------------------------
; SCSI PlayMSF command
;--------------------------------
; r5 = FSM0  start
; r6 = FSM0  end


; BLVC      GetStereoStatus          
; MOVVC     r0, r0, LSL #8+1
; ORRVC     r0, r0, #1:SHL:8                  ; Return immediately initiated

 STASH     "r0, r5", VC
 BLVC      space_saver
 GRAB      "r3, r9", VC

;-------------------------------------------
; ; Left / Right mute bits
;-------------------------------------------

 MOVVC     r3, #&e0 + (1:SHL:8)
 ORRVC     r3, r3, r10, LSL #8+5
 ORRVC     r3, r3, r9, LSL #8
 MOVVC     r4, r9, LSR #24
 ORRVC     r4, r4, r6, LSL #16
 MOVVC     r9, r6, LSR #16
 STMVCIA   r2, { r3, r4, r9 }

 MOVVC     r1, #12

 MOVVC     r3, #0

 MOVVC     r4, #0

 SWIVC     XSCSI_Op

;------------------------------------
; On DataProtect must be playing data
;------------------------------------
 GRABS     "r0, pc", VC

 LDR        r1, [ r0 ]
 LDR        r2, =DataProtect
 TEQ        r1, r2
 BEQ        notaudiotrack

 B          error_handler

;-----------------------------------------------------------------------------------------------
PlayTrack ROUT
;
; on entry:
;          r0 = track number
;          r1 = &ff end of disc, &fe play to end of track
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 MOV       r3, #1
 B         PlayTrack_jumps_here

PlayTrack_jumps_back ; returns with r1=r0, r2=r1, r3=r2

 ; data or audio ?
 ; LoadBuffer+3+(track number * 3)
 ADR       r14, buffer + 16 + 3
 ADD       r5, r1, r1, LSL #1

 LDRB      r14, [ r14, r5 ]
 TST       r14, #128
 BNE       notaudiotrack

;----------------------
; Valid track to play ?
;----------------------
 LDRB      r14, buffer + 16 + 1
 LDRB      r5, buffer + 16 + 2 
 CMP       r14, r1
 CMPLE     r1, r5
 BGT       nosuchtrack

;--------------------------------
; SCSI PlayTrack command
;--------------------------------

 TEQ       r2, #&ff

 LDMIA     r7, { r8, r9, r10 }

 ADR       r2, buffer

; BL        GetStereoStatus
; MOV       r0, r0, LSL #8+1
 MOV       r0, #&e2
 ORR       r0, r0, #(1:SHL:8)             ; immediate return bit
 ORR       r0, r0, r10, LSL #8+5
 ORR       r0, r0, r1, LSL #16
 MOVEQ     r1, r5, LSL #24                ; end of disc
 MOVNE     r1, r1, LSL #24                ; end of track
 MOV       r3, #0
 STMIA     r2, { r0, r1, r3 }

 BL        space_saver

 MOV       r1, #12

 MOV       r4, #0

 SWI       XSCSI_Op

 BVS       error_handler

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
AudioPause ROUT
;
; on entry:
;          r0 = 0 to resume, 1 to pause
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 STMIA     r12, { r0 }

 LDMIA     r7, { r2, r3, r4 }
 ADR       r7, temp_control_block
 STMIA     r7, { r2, r3, r4, r8 }

 SWI       XCD_AudioStatus
 BVS       error_handler

 LDMIA     r12, { r1 }

; If already playing and pausing off then ignore
 TEQ       r0, #PLAYINGAUDIO
 TEQEQ     r1, #0
 GRABS     "r0, pc", EQ

; If already paused and pausing then ignore
 TEQ       r0, #PAUSED
 TEQEQ     r1, #1
 GRABS     "r0, pc", EQ

; If pause on, then stop the disc and set a bit in the list
 TEQ       r1, #1
 BEQ       %FT02

; If pause off then play from current position

; Get current pos.
 MOV       r0, #LBAFormat
 SWI       XCD_EnquireAddress

; Get last pos.
 MOVVC     r2, r0
 MOVVC     r0, #LBAFormat
 ADRVC     r1, buffer + 100
 SWIVC     XCD_DiscUsed

; PlayAudio
 MOVVC     r1, r2
 LDRVC     r2, buffer + 100
 SWIVC     XCD_PlayAudio

; Pause off in the list
 MOVVC     r0, #0
 BLVC      SetPauseStatus

 BVS       error_handler

 GRABS     "r0, pc"




; Pause on
02

 SWI       XCD_StopDisc
 BVS       error_handler

 MOV       r0, #1
 BL        SetPauseStatus

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
EnquireTrack ROUT
;
; on entry:
;          r0 = 0 start/end track, 1 to 99 info on that track
;          r1 -> storage area
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 MOV       r3, #0

PlayTrack_jumps_here

 CMP       r0, #100
 BCS       invalidparameter

;----------------------------------------------------------
; Build up a parameter block with the real drive type in it
;----------------------------------------------------------
 LDMIA     r7, { r2, r4, r5 }
 ADR       r7, temp_control_block
 STMIA     r7, { r2, r4, r5, r8 }

 STASH     r0-r3

;----------------------------------------------------------
; Stop the disc - ignore any errors
;----------------------------------------------------------
 MOV       r2, r0
 SWI       XCD_StopDisc


;----------------------------------------------------------



;--------------------------------------------
; Allocation length = 6 + (track number * 3 )
;--------------------------------------------
 ADD       r4, r2, r2, LSL #1
 ADD       r4, r4, #6

;--------------------------------
; SCSI DiscInformation command
;--------------------------------

 BL        space_saver

 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 MOV       r1, #12

 MOV       r3, #&e3
 ORR       r3, r3, r10, LSL #8+5
 MOV       r5, #0
 AND       r6, r4, #255:SHL:8                  ; allocation length
 AND       r14, r4, #255                       ;
 ORR       r6, r6, r14, LSL #16                ;
 STMIA     r2, { r3, r5, r6 }

 ADR       r3, buffer + 16

 SWI       XSCSI_Op
 GRAB      r1-r4
 BVS       error_handler

 TEQ       r4, #0
 BNE       PlayTrack_jumps_back

;----------------------------
; Return the data to the User
;----------------------------
 
; If R0 = 0
; byte number      description
; -----------      ----------------------
;     0            First track number
;     1            Last track number

; ELSE
;   0 to 3         Start address of track
;     4            Control bits

; R6 -> storagearea

 MOV       r6, r2

 TEQ       r1, #0
 LDRB      r14, buffer + 16 + 1           ; First track
 STREQB    r14, [ r6 ]
 LDRB      r2, buffer + 16 + 2            ; Last track
 STREQB    r2, [ r6, #1 ]
 GRABS     "r0, pc", EQ


 CMP       r14, r1                        ; start track < R0 ?
 CMPLE     r1, r2                         ; R0 > end track ?
 BGT       nosuchtrack

;----------------------------------------------
; R5 -> start of track information in memory
; R5 = R12 + LoadBuffer_offset + ( R0 * 3 ) + 3
;----------------------------------------------

 ADD       r5, r1, r1, LSL #1              ; R5 = R0 * 3
 ADD       r5, r5, #:INDEX:buffer + 16 + 3 ; R5 = ( R0 * 3 ) + buffer + 16 + 3

 LDRB      r4, [ r5, r12 ]!                ; R4 = Minutes + Data bit
 LDRB      r3, [ r5, #1 ]                  ; R3 = Seconds
 LDRB      r2, [ r5, #2 ]                  ; R2 = Frames

;---------------------------------------------
; Control bits - data bit is on top of Minutes
;---------------------------------------------
 MOV       r4, r4, ROR #7          ; Leave minutes in top bits 31 to 25
 STRB      r4, [ r6, #4 ]

;-----------------------------
; Address
;-----------------------------
 MOV       r0, #MSFFormat
 ORR       r1, r2, r3, LSL #8
 ORR       r1, r1, r4, LSR #9
 SWI       XCD_ConvertToLBA
 BVS       error_handler

 STR       r1, [ r6 ]

 GRABS     "r0, pc"


mode_1_block
 DCD 0
 DCD 10
 DCD 1
 DCD 0

mode_2_block
 DCD 0
 DCD 10
 DCD 2
 DCD 0


;-----------------------------------------------------------------------------------------------
ReadSubChannel ROUT
;
; on entry:
;          r0 = sub-channel = 64
;          r1 -> storage area
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 MOV       r6, #0

AudioStatus_jumps_in_here
AudioPause_jumps_in_here
 STASH     "r1, r6"

; r3 -> store here

;--------------------------------
; SCSI ReadSubChannel command
;--------------------------------
01
 BL        space_saver

 ORR       r0, r0, #escapepolloff + readdata   ; prevent 'escape key'

 MOV       r1, #12

 MOV       r4, #&e5
 ORR       r4, r4, r10, LSL #8+5
 MOV       r6, #0
 STMIA     r2, { r4, r5, r6 }

 ADR       r3, buffer + 16

 MOV       r4, #11

 SWI       XSCSI_Op

 GRAB      "r6, r10"

 BVS       error_handler

;-------------------------------
; Pass back the sub-channel data
; bytes       description
; -----       -----------
; 0 to 3      Relative LBA
; 4 to 7      Absolute LBA
;   8         Control bits
;   9         Track number
;  10         Index number

;-------------------------------


;----------------------------------
; Is Hitachi drive giving me crap ?
;----------------------------------
 LDRB      r14, buffer + 16 + 1
 AND       r14, r14, #7
 TEQ       r14, #1
 STASH     "r6, r10", NE
 BNE       %BT01


; Doing this command for someone else ?
 TEQ       r10, #0
 MOVNE     pc, r10

;-----------------------------------
; Get the MSFFormat relative address
;-----------------------------------

 LDRB      r1, buffer + 16 + 6     ; Frames
 LDRB      r2, buffer + 16 + 5     ; Seconds
 LDRB      r3, buffer + 16 + 4     ; Minutes
 ORR       r1, r1, r2, LSL #8
 ORR       r1, r1, r3, LSL #16

 MOV       r0, #MSFFormat
 SWI       XCD_ConvertToLBA          ; R0 = format, R1 = address, RETURNS R1 = address
 BVS       error_handler

 ADD       r1, r1, #PhysicalBlockDifference

 STR       r1, [ r6 ]

;-----------------------------------
; Get the MSFFormat absolute address
;-----------------------------------
 LDRB      r1, buffer + 16 + 10    ; Frames
 LDRB      r2, buffer + 16 + 9     ; Seconds
 LDRB      r3, buffer + 16 + 8     ; Minutes
 ORR       r1, r1, r2, LSL #8
 ORR       r1, r1, r3, LSL #16

 SWI       XCD_ConvertToLBA          ; R0 = format, R1 = address, RETURNS R1 = address
 BVS       error_handler

 ADD       r1, r1, #PhysicalBlockDifference

 STR       r1, [ r6, #4 ]

;----------------
; Control bits
;----------------
 LDRB      r14, buffer + 16 + 1
 MOV       r14, r14, LSR #6
 STRB      r14, [ r6, #8 ]

;----------------
; Track number
;----------------
 LDRB      r14, buffer + 16 + 2
 STRB      r14, [ r6, #9 ]

;-------------
; Index number
;-------------
 LDRB      r14, buffer + 16 + 3
 STRB      r14, [ r6, #10 ]


;-------------------------------

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
;CheckDrive ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = drive status bits
;-----------------------------------------------------------------------------------------------

; This is handled by a general CDFSDriver function

;-----------------------------------------------------------------------------------------------
DiscChanged ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = 0 if not changed, 1 if changed
;-----------------------------------------------------------------------------------------------

 LDMIA     r7, { r8, r9, r10 }

; r3 -> store here

;--------------------------------
; SCSI TestUnitReady command
;--------------------------------

 BL        space_saver

 MOV       r4, r10, LSL #8+5
 STMIA     r2, { r4, r5 }

 MOV       r4, #8

 SWI       XSCSI_Op


; Error
 BVS       error_handler

; No error
 BL        HasDiscChanged

 GRABS     "r1, pc"

;-----------------------------------------------------------------------------------------------
StopDisc ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

;-------------------
; AudioPause command
;-------------------
 BL        space_saver

 MOV       r3, #&e1
 ORR       r3, r3, r10, LSL #8+5
 MOV       r4, #0
 STMIA     r2, { r3, r4, r5 }

 MOV       r1, #12

 SWI       XSCSI_Op

 BVS       error_handler

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
;DiscUsed ROUT
;
; on entry:
;          r0 =  addressing mode that the disc length should be returned in
;          r1 -> storage area to put data in
;          r7 -> control block
; on exit:
;
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
AudioStatus ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = 0 playing audio, 1 paused, 2 muted, 3 play completed, 4 error, 5 not requested
;-----------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------
; Do a slight pause to allow for Hitachi being slow on realizing that it's playing audio !
;-----------------------------------------------------------------------------------------
 SWI       XOS_ReadMonotonicTime
 MOV       r1, r0
01
 SWI       XOS_ReadMonotonicTime
 SUB       r0, r0, r1
 CMP       r0, #20
 BLT       %BT01

;----------------------
; Do a read sub-channel
;----------------------

 ADR       r6, AudioStatus_jumps_back_here
 B         AudioStatus_jumps_in_here

AudioStatus_jumps_back_here

;-----------------------------
; Is the drive playing audio ?
;-----------------------------
 LDRB      r0, buffer + 16 + 0
 TST       r0, #1
 MOVNE     r0, #PLAYINGAUDIO
 GRABS     "r1, pc", NE

;-----------------------------
; Is it paused ?
;-----------------------------
 BL        GetPauseStatus

 TEQ       r0, #1
 MOVNE     r0, #NOPLAY          ; NOPLAY = 5, PAUSE = 1

 GRABS     "r1, pc"

;-----------------------------------------------------------------------------------------------
;Inquiry ROUT
;
; on entry:
;          r0 -> place to put the inquiry data
;          r7 -> control block
; on exit:
; 
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
DiscHasChanged ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

 BL        SetDiscChanged

 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
;Control ROUT
;
; on entry:
;          r0 =  0, 1 or 2 to set SCSI error response
;          r7 -> control block
; on exit:
;          usual error stuff
;-----------------------------------------------------------------------------------------------

; This is never called - the CDFSDriver internal routine is used instead

;-----------------------------------------------------------------------------------------------
Supported ROUT
;
; on entry:
;          r7 -> control block
; on exit:
;          usual error stuff
;          r0 = information word with bits set to indicate level of support
;-----------------------------------------------------------------------------------------------
 MOV       r0, #HITACHIVERSIONBITS
 GRABS     "r1, pc"

;-----------------------------------------------------------------------------------------------
;Prefetch ROUT
;
; on entry:
;          r0 =   addressing mode
;          r1 =   block number
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; This is never called as the CDFSDriver internal routines are used

;-----------------------------------------------------------------------------------------------
;Reset ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; This is never called as the CDFSDriver internal routines are used

;-----------------------------------------------------------------------------------------------
;CloseDrawer ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; not supported

;-----------------------------------------------------------------------------------------------
IsDrawerLocked ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;          r0 = 0 if unlocked, 1 if locked
;
;-----------------------------------------------------------------------------------------------

 BL        GetDrawerStatus
 GRABS     "r1, pc"

;-----------------------------------------------------------------------------------------------
;AudioControl ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; not supported

;-----------------------------------------------------------------------------------------------
;AudioLevel ROUT
;
; on entry:
;          r7 ->  control block
; on exit:
;          if error then r0-> error block, else all regs preserved
;
;-----------------------------------------------------------------------------------------------

; not supported

;-----------------------------------------------------------------------------------------------
Identify ROUT
; on entry:
;           r0  -> 36 byte SCSI inquiry data or 0
;           r1  -> if r0 =0 THEN this -> an error block ie/ the reason inquiry data failed
;           r7  -> control block, ignore the driver type, ie/ control block + 20
;           r11 =  reason code for CD_Identify
;           r12 -> their workspace
;           r13 -> full descending stack
; on exit:
;           r2 = -1 if not recognized, else internal drive type
;           r0-r1, r3-12 can be corrupted
;-----------------------------------------------------------------------------------------------

;----------------------------
; Is there any inquiry data ?
;----------------------------
 TEQ       r0, #0
 BEQ       not_hitachi

;----------------------------
; Removable media ?
;----------------------------
 LDRB      r1, [ r0 ]
 LDRB      r2, [ r0, #1 ]
 TST       r2, #128

;----------------------------
; Funny LUN ?
;----------------------------
 TEQNE     r1, #&7f
 BEQ       not_hitachi

;---------------------------- 
; Is it a Hitachi drive ?
;---------------------------- 
; r1 -> manufacturers name
 MOV       r4, r0

 ADD       r0, r0, #8
 ADR       r1, hitachi_name
 MOV       r2, #?hitachi_name
 BL        CompareStrings
 BNE       not_hitachi

;---------------------------- 
; Check description either 1650S or 1750S
;---------------------------- 
 ADD       r0, r4, #16
 ADR       r1, hitachi_description1
 MOV       r2, #?hitachi_description1
 BL        CompareStrings

 ADRNE     r1, hitachi_description2
 MOVNE     r2, #?hitachi_description2
 BLNE      CompareStrings

 MOVEQ     r2, #0
 GRABS     "r0, pc", EQ

;---------------------------- 
not_hitachi
 MOV       r2, #-1
 GRABS     "r0, pc"

;-----------------------------------------------------------------------------------------------
hitachi_name        = "HITACHI"
hitachi_description1 = "CDR-3650/1650S"
hitachi_description2 = "CDR-1750S"
 ALIGN

;-----------------------------------------------------------------------------------------------
; Routine to load default values and save space
;-----------------------------------------------------------------------------------------------
space_saver ROUT
 LDMIA     r7, { r8, r9, r10 }

 ORR       r0, r8, r9,  LSL #3                 ; card number
 ORR       r0, r0, r10, LSL #5                 ; lun
 ORR       r0, r0, #escapepolloff + nodata     ; prevent 'escape key'
 MOV       r1, #6
 ADR       r2, buffer
 MOV       r3, #0
 MOV       r5, #0
 MOV       r8, #1

 MOV       pc, r14

;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------

 END
