; -> module















; This contains the following routines:

; initialisingcode
; finalisingcode















;-----------------------------------------------------------------------------------------------
initialisingcode ROUT
; on entry:
;          r10 -> enviroment string ( see page 631 )
;          r11 = I/O base or instantiation number
;          r12 -> currently preferred instantiation of module ( private word )
;          r13 -> supervisor stack
; on exit:
;          
;
;        Set up variables with default values
;-----------------------------------------------------------------------------------------------

 STASH      r14

;----------------------------
; Check for re-initialisation
;----------------------------
 LDR        r1, [ r12 ]
 TEQ        r1, #0
 BLNE       FreeWorkspace


;----------------------------
; Claim space from RMA
;----------------------------

 MOV        r0, #6
 MOV        r3, #SizeOfWorkSpace
 SWI        XOS_Module

 GRAB       r14, VS
 ORRVSS     pc, r14, #Overflow_Flag


 STR        r2, [ r12 ]
 STASH      r12                         ; save private word pointer in case we need it later
 MOV        r12, r2

;----------------------------
; Clear workspace
;----------------------------

 MOV        r1, #0

clear_workspace
 STR        r1, [ r2 ], #4
 SUBS       r3, r3, #4
 BGT        clear_workspace

;------------------------------------
; Set the disc changed bits, 32 bytes
;------------------------------------
 MOV        r0, #&ffffffff
 MOV        r1, #&ffffffff
 MOV        r2, #&ffffffff
 MOV        r3, #&ffffffff
 ADR        r4, disc_changed_list
 STMIA      r4!, { r0, r1, r2, r3 }
 STMIA      r4, { r0, r1, r2, r3 }

;-------------------------------------------------
; Build the registration block
;-------------------------------------------------
 ADR        r0, register_block
 LDR        r1, =INFORMATION_WORD
 MOV        r2, #0
 MOV        r3, #DRIVE_TYPES
 STMIA      r0, { r1, r2, r3 }

;-------------------------------------------------
; Register as a soft-loadable device driver
;-------------------------------------------------
 addr       r1, driver_handler_code
 MOV        r2, r12
 SWI        XCD_Register

;-------------------------------------------------
 GRAB       "r12,r14"
 BICVCS     pc, r14, #Overflow_Flag     ; Return if registered successfully.

; Otherwise drop into finalisation to free workspace and wait to be kicked into
; life by CDFSDriver module (CD_Unregister will also fail but we don't care).


;-----------------------------------------------------------------------------------------------
finalisingcode
FreeWorkspace  ROUT
;
; on entry:
;          r12 -> private word
;          r13 -> Full descending stack
; on exit:
;          r0-r2, r6 & r14 corrupted
;
;        Set up variables with default values
;-----------------------------------------------------------------------------------------------

 LDR        r2, [ r12 ]      
 MOV        r6, r14

;---------------------------------------------------------------------------
; Unregister as a CDFS device driver
;---------------------------------------------------------------------------
 MOV        r3, r12
 ADD        r0, r2, #:INDEX:register_block
 addr       r1, driver_handler_code
 MOV        r12, r2
 SWI        XCD_Unregister
 MOV        r12, r3

;---------------------------------------------------------------------------
; Free workspace - don't report an error 'cause that really screws things up
;---------------------------------------------------------------------------
 MOV        r0, #7
 SWI        XOS_Module

 MOV        r0, #0
 STR        r0, [r12]

 BICS       pc, r6, #Overflow_Flag

;**************************************************************************

 LTORG

 END
