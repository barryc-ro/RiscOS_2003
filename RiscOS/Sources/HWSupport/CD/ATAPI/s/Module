;******************************************************************************
;
; Module.s
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; This handles the module bits of the ATAPI driver.
;
; Change record
; =============
; 12-Mar-95  19:23  cpartington (Cambridge Systems Design)
; * Added code to IDENTIFY to recognise Sony CDU50E 0.3n and handle
;   incorrect data returned.
; * Added debug.
;
; 14-Mar-95  16:49  cpartington (Cambridge Systems Design)
; * Moved Sony CDU50E 0.3n recognition string to s.Strings.
; * Added code to decode the CMD DRQ bits of the configuration word and
;   update DriveFlags accordingly.
; * Removed code to save configuration word - it's not used and new
;   DriveFlags can more efficiently be checked.
;
;*end of change record*
;
;******************************************************************************


; ******************************************************************************
; *                                                                            *
; * Routines in here:                                                          *
; *                   Module_InitialisingCode                                  *
; *                   Module_FinalisingCode                                    *
; *                   Module_SWIHandler                                        *
; *                   Module_SWITable                                          *
; *                   Module_CallBackHandler                                   *
; *                                                                            *
; *                                                                            *
; ******************************************************************************


;***********************************************************************************************
Module_InitialisingCode ROUT
; on entry:
;          r10 -> enviroment string ( see page 631 )
;          r11 = I/O base or instantiation number
;          r12 -> currently preferred instantiation of module ( private word )
;          r13 -> supervisor stack
; on exit:
;          r7 - r11 and r13 preserved
;
;        Set up variables with default values
;***********************************************************************************************

 STASH      r14

     STRIM      "Initialise"
     DisplayNewLine

;----------------------------
; Check for re-initialisation
;----------------------------
 LDR        r1, [ r12 ]
 TEQ        r1, #0
 BLNE       FreeWorkspace


;----------------------------
; Claim space from RMA
;----------------------------

     STRIM      "Claim space"
     DisplayNewLine

 MOV        r0, # 6
 LDR        r3, = SizeOfWorkSpace
 SWI        XOS_Module

 GRAB       r14, VS
 ORRVSS     pc, r14, #Overflow_Flag


 STR        r2, [ r12 ]
 STASH      r12                 ; Save private word pointer in case we need it later.
 MOV        r12, r2

;----------------------------
; Clear workspace
;----------------------------

     STRIM      "Clear workspace"
     DisplayNewLine

 MOV        r1, #0

clear_workspace
 STR        r1, [ r2 ], #4
 SUBS       r3, r3, #4
 BGT        clear_workspace

;------------------------------------
; Set the disc changed bits
;------------------------------------
 MOV        r0, # 1
 ADR        r4, disc_changed_list
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]

;-----------------------------------------
; Set the default data mode to 1 (normal)
;-----------------------------------------
 ADR        r4, DriveMode
 MOV        r0, # 1
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]

;-------------------------------------------------
; Default variable values
;-------------------------------------------------
 LDR        r1, =TASKFILE_BASE_ADDRESS
 STR        r1, TBA

;-------------------------------------------------
; Build the registration block
;-------------------------------------------------
 ADR        r0, register_block
 LDR        r1, =INFORMATION_WORD
 MOV        r2, #0
 MOV        r3, #DRIVE_TYPES
 STMIA      r0, { r1, r2, r3 }

;-------------------------------------------------
; Register as a soft-loadable device driver
;-------------------------------------------------

     STRIM      "Register with CDFSDriver"
     DisplayNewLine

 addr       r1, driver_handler_code
 MOV        r2, r12
 SWI        XCD_Register
 BVS        MIC_NoDrivesFound                 ; If failed to register then start up but with no workspace
                                              ; (CDFSDriver can then kick us into life later).

;-------------------------------------------------
; Work out what machine I'm running on
;-------------------------------------------------

     STRIM      "What machine ?"
     DisplayNewLine


 MOV        r0, # 2
 SWI        XOS_ReadSysInfo
 MOVVS      r0, # 0
 TST        r0, # &ff:SHL:8                   ; i/o control chip, =0 then IOC, =1 then IOMD
 MOVEQ      r0, # IOC__IDE_INTERRUPT_BIT      ; IOC
 MOVNE      r0, # IOMD__IDE_INTERRUPT_BIT     ; IOMD
 STR        r0, IrqFlag

;----------------------------------------------------------------
; Look to see if ADFS_LockIDE is known
;----------------------------------------------------------------
 ADRL       r1, STRING__ADFS_LockIDE
 SWI        XOS_SWINumberFromString
 MOVVC      r0, # TRUE
 MOVVS      r0, # FALSE
 STRB       r0, UseLockSWI

;-------------------------------------------------
; Work out what ATAPI drives are connected
;-------------------------------------------------

 MOV        r0, # 0
 ADR        r1, DriveRecognizedStatus
 MOV        r2, # TRUE
 MOV        r3, # FALSE

MIC_IdentifyLoop

;---------------------------------------------------------------------------------
; Do the Identify drive command, so that I can find out some more about the drive
;---------------------------------------------------------------------------------

 [ cdebug
        CDebug_StrReg2  "Do IDENTIFY ",r0
 ]
     STASH         "r0-r8"

     STRIM         "call ATAPI_Control"
     DisplayNewLine

     ORR           r0, r0, # readdata + ATAPIOP__IDENTIFY_DEVICE + ATAPIOP__DONT_USE_R7 + ATAPIOP__DONT_RETRY
     MOV           r1, # 0
     MOV           r2, # 0
     ADR           r3, buffer
     MOV           r4, # ATAPIID__STRUCTURE_SIZE

     MOV           r8, # ATAPICONTROL__SEND_COMMAND

     BL            ATAPI_Control


     GRAB          "r0-r8"

;---------------------------------------------------------------------------------

     STRVSB        r3, [ r1, r0 ]
     BVS           MIC_DoneCheckForATAPI

; Check for ATAPI CD-ROM drive with removable medium
; r0 = drive number (0/1)
; r1 -> DriveRecognizedStatus
; r2 = TRUE
; r3 = FALSE

 [ sony_50_id_bodge

; compare IDENTIFY string (firmware and model) with that for Sony
; drive that returns configuration word with the bytes in the wrong
; order

        STASH   "r0-r2"
        ADR     r0,buffer + ATAPIID__GENERAL_CONFIGURATION + &2E
        ADRL    r1,sony_50_03n_string
        MOV     r2,#?sony_50_03n_string
        BL      memcmp
        GRAB    "r0-r2"
  [ cdebug
        BEQ     %F11
        CDebug_WriteS   "It's NOT the funny Sony drive"
        BNE     %F12
11
        CDebug_WriteS   "It IS the funny Sony drive"
12
  ]

; if it is the Sony, load configuration bytes in wrong order

        LDRNEB  r14,buffer + ATAPIID__GENERAL_CONFIGURATION
        LDRNEB  r8,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        LDREQB  r14,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        LDREQB  r8,buffer + ATAPIID__GENERAL_CONFIGURATION
 |
        LDRB    r14,buffer + ATAPIID__GENERAL_CONFIGURATION
        LDRB    r8,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
 ]
        ORR           r6,r14,r8,LSL # 8
 [ cdebug
        CDebug_StrReg4      "IDENTIFY complete, config=",r6
 ]

; check it's ATAPI
; r6 = configuration word

        MOV     r5,r6,LSR #14
        TEQ     r5,#2_10
        BNE     MIC_DoneCheckForATAPI   ; branch if not ATAPI

; check it's got removable medium

        TST     r6,#1:SHL:7
        BEQ     MIC_DoneCheckForATAPI   ; branch if not removable

; check it's a CD-ROM drive

        MOV     r5,r6,LSR #8
        AND     r5,r5,#2_00011111
        TEQ     r5,#5
        BNE     MIC_DoneCheckForATAPI

; check the CMD DRQ type and save a flag to indicate which it is
; note: this assumes that a "microprocessor DRQ" drive can be treated like
; an "accelerated DRQ" - I've not seen one
; r0 = drive (0/1)

        AND     r6,r6,#2_01100000       ; get CMD DRQ bits
        TEQS    r6,#2_00100000          ; interrupt DRQ
        MOVEQ   r6,#DriveFlag_InterruptDRQ
        MOVNE   r6,#0                   ; treat others as accelerated DRQ
        ADR     r5,DriveFlags           ; r5 -> drive flags
        STRB    r6,[r5,r0]
 [ cdebug
        BNE     %F01
        CDebug_WriteS   "This is an interrupt DRQ drive"
        B       %F02
01
        CDebug_WriteS   "This is an accelerated DRQ drive"
02
 ]
        STRB    r2,[ r1, r0 ]           ; flag this drive is present

; remember that I found one

        ORR     r3,r3,#1:SHL:16


MIC_DoneCheckForATAPI
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_IdentifyLoop


;-------------------------------------------------
; If none were found, then start up but with no workspace
;-------------------------------------------------
 TST        r3, # 1:SHL:16
 BEQ        MIC_NoDrivesFound

;-------------------------------------------------
; Clear the drive map list
;-------------------------------------------------

MIC_DrivesChecked

 MOV        r0, # 0
 ADR        r1, DriveMapList
 MOV        r2, # -1
 MOV        r3, # -1
 MOV        r4, # -1
 MOV        r5, # -1

MIC_ClearListLoop
 STMIA      r1!, { r2, r3, r4, r5 }
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_ClearListLoop

;-------------------------------------------------
; Exit OK
;-------------------------------------------------

 GRAB       "r12,r14"
 BICS       pc, r14, #Overflow_Flag

STRING__ADFS_LockIDE
 DCB        "ADFS_LockIDE", 0
 ALIGN

;-------------------------------------------------
; Exit - NoDrivesFound so free off workspace
;-------------------------------------------------

MIC_NoDrivesFound
 GRAB       "r12,r14"           ; Get back private word pointer and return address.

 ; Drop through to...

;***********************************************************************************************
Module_FinalisingCode
FreeWorkspace  ROUT
;
; on entry:
;          r12 -> private word
;          r13 -> Full descending stack
; on exit:
;          r0-r2, r6 & r14 corrupted
;
;        Set up variables with default values
;***********************************************************************************************

 LDR        r2, [ r12 ]

 MOV        r6, r14

;---------------------------------------------------------------------------
; Unregister as a CDFS device driver
;---------------------------------------------------------------------------
 MOV        r3, r12
 ADD        r0, r2, #:INDEX:register_block
 addr       r1, driver_handler_code
 MOV        r12, r2
 SWI        XCD_Unregister
 MOV        r12, r3

;---------------------------------------------------------------------------
; Free workspace - don't report an error 'cause that really screws things up
;---------------------------------------------------------------------------
 MOV        r0, #7
 SWI        XOS_Module

 MOV        r0, #0      ; Set private word to 0 so that Kernel doesn't try to free it again!
 STR        r0, [r12]

 BICS       pc, r6, #Overflow_Flag

;***********************************************************************************************
;
Module_SWIHandler ROUT
;
; on entry:
;          r11 = SWI number MOD 64
;          r12 = private word pointer
;          r13 = supervisor stack
;          r14 = return register
; on exit:
;          r10 - r12 corrupted
;
;    This performs the ATAPI_.. SWI
;
;***********************************************************************************************

      MACRO__ENTER_DRIVER

;---------------------------
; Load the workspace pointer
;---------------------------
      LDR         r12, [ r12 ]

;---------------------------
; Jump to the SWI
;---------------------------
      TEQ         r11, # XATAPI_GetDrives - XATAPI_BaseNumber

      ADRNE       r0, not_supported_error                  ; [ swi not known - so exit ]
      BNE         error_handler_lookup


      ; Allow to fall through 'cause there's only one SWI

;***********************************************************************************************
;
SWI__ATAPI_GetDrives
;
; on entry:
;          r11 =  0
;          r12 -> workspace
;          r13 =  supervisor stack
;          r14 =  return register
; on exit:
;          r0  =  number of drives found by ATAPI driver
;          r10 - r12 corrupted
;
;    This performs the ATAPI_GetDrives SWI
;
;***********************************************************************************************

;---------------------------
; Do the ATAPI_GetDrives SWI
;---------------------------

      MOV         r11, # 0

      TEQ         r12, #0               ; If no workspace then no drives.
      BEQ         %FT10

      LDRB        r14, DriveRecognizedStatus + 0
      TEQ         r14, # TRUE
      ADDEQ       r11, r11, # 1
      LDRB        r14, DriveRecognizedStatus + 1
      TEQ         r14, # TRUE
      ADDEQ       r11, r11, # 1
10
      MACRO__EXIT_DRIVER_OK
      MOV         r0, r11
      BICS        pc, r14, # Overflow_Flag


;******************************************************************************
;
Module_SWITable
;
;******************************************************************************

      =           "ATAPI", 0               ; Group name

      =           "GetDrives", 0           ; ATAPI SWI + 0

      =           0                        ; Terminator
      ALIGN

;******************************************************************************

memcmp ROUT
;
; Compare two lumps of memory
;
; Entry:
;    r0 -> string
;    r1 -> string
;    r2 = length > 0
;
; Exit:
;    r0,r1 preserved
;    r2 undefined
;    EQ => strings equal

        STASH   "r3,r14"
01
        SUBS    r2,r2,#1
        BMI     %F02
        LDRB    r3,[r0,r2]
        LDRB    r14,[r1,r2]
        TEQS    r3,r14
        BEQ     %B01

; NE => strings don't match

        GRAB    "r3,pc"

;;;;;;;;;;;;;;;;;

02

; return EQ => strings match

        TEQS    r0,r0
        GRAB    "r3,pc"

;******************************************************************************

 LTORG
 END
