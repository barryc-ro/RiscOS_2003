; -> ByteCopy.s













; This provides the CD_ByteCopy routine




















;**************************************************************************
; This is a highly optimised routine to move blocks of memory
; It will deal with unword-aligned source and destinations

; copied from pages 1000 to 1005 of PRM

; R1 -> source                                    RCM was ere
; R2 -> destination
; R3 = number of bytes to copy

;**************************************************************************

cd_bytecopyinternal ROUT
     STASH   "r0-r11, r14"

cd_bytecopy

;--------------------------
; Any bytes to copy ?
;--------------------------
     TEQ     r3, #0
     GRABS   "r0-r11, pc", EQ

;--------------------------

copy_bytes

     TST r2, #3
     BNE MovByt100                  ; destination not word aligned

MovByt20       ; destination now word aligned. branched back to from below

     TST r1, #3
     BNE MovByt200                  ; source not word aligned

; source & destination are now both word aligned
; count is a byte value ( may not be a whole number of words )

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4         ; Four whole words to do (or more) ?
     BLT MovByt40                      ; no

     SUBS r3, r3, #8 * 4 - 4 * 4 ; Eight whole words to do (or more) ?
     BLT MovByt30


MovByt25

     LDMIA r1!, { r0, r4 - r9, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r9, r14 }

     SUBS r3, r3, #8 * 4
     BGE MovByt25                      ; do another 8 words

     CMP r3, #-8 * 4                ; Quick test rather that chaining down
     GRABS "r0-r11, pc", EQ         ; finished


MovByt30

     ADDS r3, r3, #8 * 4 - 4 * 4 ; Four whole words to do ?
     BLT MovByt40

     LDMIA r1!, { r0, r4 - r5, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r5, r14 }

     GRABS "r0-r11, pc", EQ         ; finished

     SUB r3, r3, #4 * 4


MovByt40

     ADDS r3, r3, #4 * 4 - 2 * 4   ; Two whole words to go ?
     BLT MovByt50

     LDMIA r1!, { r0, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r14 }

     GRABS "r0-r11, pc", EQ         ; finished

     SUB r3, r3, #2 * 4


MovByt50

     ADDS r3, r3, #2*4-1*4       ; One whole word to do ?
     BLT MovByt60

     LDR r0, [ r1 ], #4
     STR r0, [ r2 ], #4

     GRABS "r0-r11, pc", EQ         ; finished

     SUB r3, r3, #1 * 4


MovByt60

     ADDS r3, r3, #1*4 - 0*4      ; No more to do ?
     GRABS "r0-r11, pc", EQ         ; finished

     LDR r0, [ r1 ]           ; store remaining 1,2 or 3 bytes


MovByt70


     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt70

     GRABS "r0-r11, pc"                 ; finished



;Initial destination not word aligned.Loop doing bytes(1,2, or 3 )until it is

MovByt100

     LDRB r0, [ r1 ], #1
     STRB r0, [ r2 ], #1
     SUBS r3, r3, #1
     GRABS "r0-r11, pc", EQ                ; finished

     TST r2, #3
     BNE MovByt100

     B MovByt20                      ; Back to mainline code


MovByt200;destination now word aligned,but source isn't. just r14 stacked here

     AND r12, r1, #3       ; offset
     BIC r1, r1, #3      ; Align source

     MOV r12, r12, LSL #3    ; rshft = 0, *, 16 or 24 only

     RSB r11, r12, #32       ; lshft = 32, 24, 16 or 8 only

     LDR r0, [ r1 ], #4
     MOV r0, r0, LSR r12 ; Always have r0 prepared

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4       ; Four whole words to do (or more) ?
     BLT MovByt240                   ; no

     SUBS r3, r3, #8*4-4*4     ; Eight whole words to do (or more) ?
     BLT MovByt230                   ; no



MovByt225

     LDMIA r1!, { r4 - r10, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r7, LSL r11

     MOV r7, r7, LSR r12
     ORR r7, r7, r8, LSL r11

     MOV r8, r8, LSR r12
     ORR r8, r8, r9, LSL r11

     MOV r9, r9, LSR r12
     ORR r9, r9, r10, LSL r11

     MOV r10, r10, LSR r12
     ORR r10, r10, r14, LSL r11

     STMIA r2!, { r0, r4 - r10 }

     MOV r0, r14, LSR r12          ; keep r0 prepared

     SUBS r3, r3, #8 * 4
     BGE MovByt225                            ; do another 8 words

     CMP r3, #-8 * 4                       ; Quick test
     GRABS   "r0-r11, pc", EQ


MovByt230

     ADDS r3, r3, #8*4 - 4*4             ; Four whole words to do ?
     BLT MovByt240

     LDMIA r1!, { r4 - r6, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r14, LSL r11

     STMIA r2!, { r0, r4 - r6 }

     GRABS   "r0-r11, pc", EQ

     SUB r3, r3, #4*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt240

     ADDS r3, r3, #2*4           ; Two whole words to do ?
     BLT MovByt250


     LDMIA r1!, { r4, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r14, LSL r11

     STMIA r2!, { r0, r4 }

     GRABS   "r0-r11, pc", EQ


     SUB r3, r3, #2*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt250

     ADDS r3, r3, #2*4 - 1*4     ; One whole word to go ?
     BLT MovByt260

     LDR r14, [ r1 ], #4
     ORR r0, r0, r14, LSL r11

     STR r0, [ r2 ], #4

     GRABS   "r0-r11, pc", EQ

     SUB r3, r3, #1*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt260

     ADDS r3, r3, #1*4 - 0*4
     GRABS   "r0-r11, pc", EQ

     LDR r14, [ r1 ]          ; store remaining 1..3 bytes
     ORR r0, r0, r14, LSL r11


MovByt270

     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt270

     GRABS   "r0-r11, pc"



 END
