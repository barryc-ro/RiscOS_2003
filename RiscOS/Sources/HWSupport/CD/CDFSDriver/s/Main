; -> Case


 LEADR &FFFFFA00
 NOFP









;   This is the main part of the CDFSDriver module





; routines in here:
;                  SWIentry








;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;                       MODULE HEADER
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------

startofheader
 DCD 0
 DCD initialisingcode - startofheader
 DCD finalisingcode   - startofheader
 DCD 0
 DCD title            - startofheader
 DCD help             - startofheader
 DCD 0
 DCD SWIBaseNumber
 DCD SWIentry         - startofheader
 DCD tableofswinames  - startofheader
 DCD 0
 DCD 0
 DCD 1 ; infoword 
 DCD 0
 DCD 0                     

;
; Global hdrs:
;
 GET Hdr:ListOpts
 GET Hdr:Macros
 GET Hdr:System
;
; Interface hdrs:
;
 GET Hdr:SCSI
 GET Hdr:CDROM      ; CDROM SWIs
 GET Hdr:MsgTrans
 GET Hdr:HostFS
;
; Local hdrs:
;
 GET hdr.Hashes     ; all hashes (incl. configuration flags)
 GET hdr.CDMacros   ; local macros

 GET Version    ; date/version number

 GET S.Strings    ; contains errors and strings
 GET S.Tables     ; contains info for setting up blocks
 GET S.Module     ; Init/Final code
 GET S.Register   ; CD_Register code
 GET S.Unregister ; CD_Unregister code
 GET S.Identify   ; CD_Unregister code
 GET S.CD_Routs   ; the internal SWI CD_ routines
 GET S.OnError    ; deal with errors
 GET S.ExtraBits  ; Extra routines
 GET S.ByteCopy   ; RCM's fast block copy routine
 GET S.Variables  ; layout of workspace



switoobig DCD &1E6
            = "UnkCDOp", 0
 ALIGN
;-----------------------------------------------------------------------------------------------
;
SWIentry ROUT
;
; on entry:
;          r11 = SWI number % 64
;          r12 = private word pointer
;          r13 = supervisor stack
;          r14 = return register
; on exit:
;          r10 - r12 corrupted
;          
;    This performs the CD_.. SWI
;-----------------------------------------------------------------------------------------------

;---------------------------
; Load the workspace pointer
;---------------------------
 LDR       r12, [ r12 ]


SWIentry_after_wp

 BIC       r14, r14, #Overflow_Flag
 STASH     "r0-r11, r14"

 BIC       r11, r11, #3:SHL:30

;---------------------------
; Turn irqs on
;---------------------------
 MVN       r10, #I_bit
 TSTP      r10, pc

; STASH "r5, r11"
; STRIM " SWI Number = "
; Display r11
; STRIM  " Drive type = "
; LDR r5, [ r7, #12 ]
; Display r5
; SWI XOS_NewLine
; GRAB  "r5, r11"

;---------------------------
; Check the SWI number
;---------------------------
 CMP       r11, #NUMBEROFSWIS
 addr      r0, switoobig, GE
 BGE       error_handler_lookup

;---------------------------------------------
; If the SWI is CD_Version then do this myself
;---------------------------------------------
 SUBS      r11, r11, #1
 BMI       cd_version

;----------------------------------------------------------
; CD_Register, CD_Unregister, CD_LastError or CD_ByteCopy ?
;----------------------------------------------------------
 TEQ       r11, #(XCD_Register - XCD_BaseNumber) - 1
 BEQ       cd_register

 TEQ       r11, #(XCD_Unregister - XCD_BaseNumber) - 1
 BEQ       cd_unregister

 TEQ       r11, #(XCD_ByteCopy   - XCD_BaseNumber) - 1
 BEQ       cd_bytecopy         

 TEQ       r11, #(XCD_Identify   - XCD_BaseNumber) - 1
 BEQ       cd_identify

 TEQ       r11, #(XCD_ConvertToLBA   - XCD_BaseNumber) - 1
 BEQ       cd_converttolba

 TEQ       r11, #(XCD_ConvertToMSF   - XCD_BaseNumber) - 1
 BEQ       cd_converttomsf

 CMP       r11, #(XCD_ReadAudio  - XCD_BaseNumber) - 1
 SUBGE     r11, r11, # 5

 CMP       r11, #(XCD_LastError  - XCD_BaseNumber) - 1
 SUBGE     r11, r11, #1
 BEQ       cd_lasterror



;----------------------------------
; Which driver should handle this ?
;----------------------------------
; r8  =  drive type
; r9  -> soft loadable driver handler
; 

 LDR       r14, [ r7, #drivetypeoffset ]

 MOV       r9, r14, LSR #2
 CMP       r9, #MAX_NUMBER_OF_DRIVERS
 BGT       driver_not_present_error


; Check that there is a driver
 ADR       r9, sld_list

 BIC       r8, r14, #3

 LDR       r9, [ r9, r8 ]

 TEQ       r9, #0
 BEQ       driver_not_present_error

; Check for special tag before handler
 LDR       r8, [ r9, #0 ]
 MOV       r10, #&50
 ORR       r10, r10, #&EE00
 ORR       r10, r10, r10, LSL #16
 TEQ       r10, r8
 BNE       driver_not_present_error


 ADR       r10, block_list
 BIC       r8, r14, #3
 LDR       r10, [ r10, r8 ]

; Make sure that there are this many sub-drivers
 STASH     r10
 LDRB      r8, [ r10, #RCB_DRIVETYPES ]
 AND       r10, r14, #3


 CMP       r10, r8
 GRAB      r10
 BGE       driver_not_present_error


; Make sure that the driver supports this CD_ SWI
 LDR       r8,  [ r10, #RCB_INFOWORD ]

; **** This is complete crap. Use flag bits instead  MEW ****
; AND       r10, r8, #255
; CMP       r11, r10
; addr      r0, swi_not_supported, GT
; BGT       error_handler_lookup
; ****                                                   ****

;----------------------------------------------------------
; Should I carry out the read data or seek command myself ?
;----------------------------------------------------------
 EOR       r8, r8, #USE_SCSI_READ + USE_SCSI_SEEK + USE_SCSI_INQUIRY + USE_SCSI_CAPACITY + USE_SCSI_READY + USE_SCSI_STOPOPEN + USE_SCSI_STATUS + USE_SCSI_CHECK
 EOR       r8, r8, #USE_SCSI_CONTROL + USE_SCSI_PREFETCH + USE_SCSI_RESET + USE_PROPRIETARY_RUD + USE_PROPRIETARY_SUD

 TEQ       r11, #(XCD_ReadData   - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_READ
 BEQ       cd_readdata

 TEQ       r11, #(XCD_SeekTo     - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_SEEK
 BEQ       cd_seekto

 TEQ       r11, #(XCD_Inquiry    - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_INQUIRY
 BEQ       cd_inquiry

 TEQ       r11, #(XCD_DiscUsed   - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_CAPACITY
 BEQ       cd_discused

 TEQ       r11, #(XCD_DriveReady - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_READY
 BEQ       cd_driveready

 TEQ       r11, #(XCD_StopDisc   - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_STOPOPEN
 BEQ       cd_stopdisc

 TEQ       r11, #(XCD_OpenDrawer - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_STOPOPEN
 BEQ       cd_opendrawer

 TEQ       r11, #(XCD_DriveStatus - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_STATUS
 BEQ       cd_drivestatus

 TEQ       r11, #(XCD_Control     - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_CONTROL
 BEQ       cd_control

 TEQ       r11, #(XCD_Prefetch    - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_PREFETCH
 BEQ       cd_prefetch

 TEQ       r11, #(XCD_Reset       - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_RESET
 BEQ       cd_reset

 TEQ       r11, #(XCD_CheckDrive  - XCD_BaseNumber) - 1
 TSTEQ     r8, #USE_SCSI_CHECK
 BEQ       cd_checkdrive

; Make sure that CD_Get/SetAudioParms supported if its being called
 [ Version >= 232
 TEQ       r11, # DRIVER__GetAudioParms
 TEQNE     r11, # DRIVER__SetAudioParms
 BNE       IDC_Go

 STASH     "r0, r14"
 SWI       XCD_Supported
 TST       r0, # SUPPORT__AUDIO_PARMS
 GRAB      "r0, r14"
 addr      r0, swi_not_supported, EQ
 BEQ       error_handler_lookup

IDC_Go
 ]

;-----------------------------------------------
; Sort out SeekUserData
;-----------------------------------------------

; Does the caller want to do their own SeekUserData ?
 TEQ       r11, # DRIVER__SeekUserData
 BNE       UPS_jump

 TST       r8, # USE_PROPRIETARY_SUD
 BEQ       UPS_jump                       ; [ yes ]

; Should this be a complex SeekUserData ?
 TST       r8, # USE_COMPLEX_SUD
 BEQ       cd_seekuserdata_plain          ; [ no ]

 B         cd_seekuserdata

UPS_jump

;-----------------------------------------------
; Sort out ReadUserData
;-----------------------------------------------

; Does the caller want to do their own ReadUserData ?
 TEQ       r11, # DRIVER__ReadUserData
 BNE       UPR_jump

 TST       r8, # USE_PROPRIETARY_RUD
 BEQ       UPR_jump                       ; [ yes ]

; Should this be a complex ReadUserData ?
 TST       r8, # USE_COMPLEX_RUD
 BEQ       cd_readuserdata_plain          ; [ no ]

 B         cd_readuserdata

UPR_jump
;-----------------------------------------------



; Make up a new control block for the driver with its drive type
; Must be after calling the CD routines so that they can call other CD SWIs - see cd_seekto
 STASH     "r8, r9, r10, r14"
 LDMIA     r7, { r8, r9, r10, r14 }
 AND       r14, r14, #3
 ADR       r7, control_block
 STMIA     r7, { r8, r9, r10, r14 }
 GRAB      "r8, r9, r10, r14"

;----------------------------------------------------------
; Get the soft-loadable modules private workspace pointer
;----------------------------------------------------------




; STASH "r0-r11,r14"
; STRIM " SWI Number = "
; Display r11
; STRIM  " Drive type = "
; LDR r5, [ r7, #12 ]
; Display r5
; SWI XOS_NewLine
; GRAB  "r0-r11,r14"






 STASH     r12

 ADR       r10, wsp_list
 BIC       r12, r14, #3
 LDR       r12, [ r10, r12 ]

;-------------------------------------------------
; Despatch the command to the soft-loadable driver
;-------------------------------------------------
; r0 - r6 =  parameters used in CD_ SWI
; r7      -> control block
; r8      =  large drive type
; r9      -> special tag and handler code
; r10
; r11     =  the CD_... SWI to perform - 1, ie/ no CD_Version
; r12     -> their workspace
; r13     -> stack
; r14     =  return address (to me)

 MOV       r10, pc
 AND       r10, r10, #255:ROL:26

 MOV       r8, r14

 ADR       r14, come_back_here
 ORR       r14, r14, r10
 ADD       pc, r9, #4

come_back_here
 NOP

;-------------------------------
; Remember the last error number
;-------------------------------
 GRAB      r12

 BVS       error_handler

 STR       r0, [ r13 ]
 GRABS     "r0-r11, pc"

;-----------------------------------------------------------------------------------------------

 END
