; -> macros
; =============================================
; Macros should be kept in ALPHABETICAL order !
; =============================================

        MACRO
        AddError $name,$text,$value
   [    "$value" = ""
ErrorNumber_$name # 1
   |
ErrorNumber_$name * $value
   ]
        GBLS ErrorString_$name
ErrorString_$name SETS "$text"
        MEND

; **************************************************************
; ***  Generate File type name labels assuming ^ type defs   ***
; **************************************************************
;
;          Generates a label of the form "FileType_Text" with the
;       value &FFF, or "FileType_PostScript" with the value &FF5.
;       Also generates a global string variable (GBLS) of the form
;       "FileTypeText_FFF" with the value "Text    ", or 
;       "FileTypeText_FF5" with the value "PoScript".  If the second
;       argument is given then it will be used as the text value, if
;       not then the FileType will be used.

        MACRO
$Value  AddFile  $FileType,$FileTypeName,$PostValue
  [     ("$FileType" = "") :LOR: (("$Value" <> "") :LAND: ("$PostValue" <> ""))
        !       1, "Syntax: [<value>] AddFileAscending <File Type> [< File Type Name>]"
        !       1, "    Or: AddFileAscending <File Type> [< File Type Name> [<value>]]"
        MEXIT
  ]
  [     ("$Value" = "") :LAND: ("$PostValue" = "")
FileType_$FileType # 1
  |
  [     "$Value" = ""
FileType_$FileType * $PostValue
  |
FileType_$FileType * $Value
  ]
  ]
  [     FileType_$FileType > &FFF
        !       1, "Value out of range"
  ]
        LCLS    Number
Number  SETS    (:STR: FileType_$FileType) :RIGHT: 3
        GBLS    FileTypeText_$Number
  [     "$FileTypeName" = ""
FileTypeText_$Number SETS ("$FileType" :CC: "        ") :LEFT: 8
  |
FileTypeText_$Number SETS ("$FileTypeName" :CC: "        ") :LEFT: 8
  ]
        MEND

        MACRO
$Value  AddFileDescending  $FileType,$FileTypeName,$PostValue
  [     ("$FileType" = "") :LOR: (("$Value" <> "") :LAND: ("$PostValue" <> ""))
        !       1, "Syntax: [<value>] AddFileAscending <File Type> [< File Type Name>]"
        !       1, "    Or: AddFileAscending <File Type> [< File Type Name> [<value>]]"
        MEXIT
  ]
  [     ("$Value" = "") :LAND: ("$PostValue" = "")
        #       -1
FileType_$FileType # 1
        #       -1
  |
  [     "$Value" = ""
FileType_$FileType * $PostValue
  |
FileType_$FileType * $Value
  ]
  ]
  [     FileType_$FileType > &FFF
        !       1, "Value out of range"
  ]
        LCLS    Number
Number  SETS    (:STR: FileType_$FileType) :RIGHT: 3
        GBLS    FileTypeText_$Number
  [     "$FileTypeName" = ""
FileTypeText_$Number SETS ("$FileType" :CC: "        ") :LEFT: 8
  |
FileTypeText_$Number SETS ("$FileTypeName" :CC: "        ") :LEFT: 8
  ]
        MEND

; ***************************************************
; ***  Put address of $dest in $reg; $dest > .    ***
; ***  !!! Please use addr wherever possible !!!  ***
; ***************************************************
        MACRO
$label  ADDR    $reg, $dest, $cond
$label  ADR$cond.L $reg, $dest
        MEND

; *****************************************************************************
; ***  Optimising ADR/ADRL for addressing object backwards from current pc  ***
; ***  or register relative symbol. Symbol MUST be defined on first pass    ***
; *****************************************************************************
                GBLA    addr_verbose
addr_verbose    SETA    1

        MACRO
$label  addr    $reg, $object, $cc
        LCLA    value
value   SETA    .-$object+8
        Immediate &$value
 [ immediate
$label  ADR$cc  $reg, $object
  [ addr_verbose :AND: 1 <> 0
 ! 0,"addr saved a word"
  ]
 |
$label  ADR$cc.L $reg, $object
  [ addr_verbose :AND: 2 <> 0
 ! 0,"addr didn't save a word"
  ]
 ]
        MEND

        MACRO
$label  wsaddr    $reg, $object, $cc
        LCLA    value
value   SETA    :INDEX: $object
        Immediate &$value
 [ immediate
$label  ADR$cc  $reg, $object
  [ addr_verbose :AND: 1 <> 0
 ! 0,"wsaddr saved a word"
  ]
 |
$label  ADR$cc.L $reg, $object
  [ addr_verbose :AND: 2 <> 0
 ! 0,"wsaddr didn't save a word"
  ]
 ]
        MEND


; ***************************************************
; ***  Generate SWI labels assuming ^ type defs   ***
; ***  Also assumes the global variable SWIClass  ***
; ***************************************************
        GBLS    SWIClass
        MACRO
        AddSWI  $SWIName,$value
  [     "$value" = ""
$SWIClass._$SWIName # 1
  |
$SWIClass._$SWIName * $value
  ]
X$SWIClass._$SWIName * $SWIClass._$SWIName + Auto_Error_SWI_bit
        MEND


; *******************************************************************
; ***  Align workspace to given power-of-two boundary and offset  ***
; *******************************************************************
        MACRO
$label  AlignSpace $value, $offset
 [ "$value" = ""
$label  #       3 :AND: ($offset-:INDEX: @)
 |
$label  #       (($value)-1) :AND: ($offset-:INDEX: @)
 ]
        MEND


        MACRO
$label  AlignForModule
        ALIGN   16,12                   ; So $label at offset 0 when RMLoaded
$label
        MEND


        MACRO
$label  ASL     $reg, $val, $cc
$label  MOV$cc  $reg, $reg, ASL #$val
        MEND

        MACRO
$label  ASR     $reg, $val, $cc
$label  MOV$cc  $reg, $reg, ASR #$val
        MEND

; *************************************************
; ***  Put address of $dest in $reg; $dest < .  ***
; *************************************************
        MACRO
$label  BADDR   $reg, $dest, $cond
$label  ADR$cond.L $reg, $dest
        MEND


; ****************************************************
; ***   Macro JSR - Jump to subroutine saving R14  ***
; ****************************************************
        MACRO
$label  JSR     $dest
$label  Push    R14
        BL      $dest
        Pull    R14
        MEND

; *******************************
; ***  Add byte to workspace  ***
; *******************************
        MACRO
$label  Byte    $value, $count
  [     "$label" = ""
    [   "$count" = ""
$value  # 1
  |
$value  # ($count)
    ]
  |
    [   "$value" = ""
$label  # 1
    |
$label  # ($value)
    ]
  ]
        MEND

; ********************************************
; ***  Macro BYTEWS - Point to OsbyteVars  ***
; ********************************************
        MACRO
        BYTEWS  $reg
        Immediate OsbyteVars
 [ immediate
        MOV     $reg, #OsbyteVars
 |
        MOV     $reg, #(OsbyteVars :AND: &FF)
        ORR     $reg, $reg, #(OsbyteVars :AND: :NOT: &FF)
 ]
        MEND

        MACRO
$label  CallAVector $cond
     [ AssemblingArthur
$label  B$cond   CallVector
     |
      [ Module
$label  B$cond  %FT10
        Push    "R8,R9"
        MOV     R8, PC
        AND     R8, R8, #3              ; just get mode bits
        EOR     R8, R8, #SVC_mode       ; eored with SVC mode
        TEQP    R8, PC
;        MOVNV   R0, R0
        NOP
        Push    R14
        MOV     R9, R10
        SWI     XOS_CallAVector
        Pull    R14
        TEQP    R8, PC
        MOVNV   R0, R0
        Pull    "R8,R9"
        MOV     PC, R14
10
      |
$label  LDR$cond PC, =CallVecAddr
       [ "$cond" = ""
        LTORG     ; Can't conditionally execute constants ! Use your own LTORG
       ]
      ]
     ]
        MEND

;************************************
; This allows nice errors from CDFS driver
;************************************
        MACRO
$label  CDFSDriverError $name, $message
$name DCD CDFSDriverErrorNumber
       = "$message"
       = 0
CDFSDriverErrorNumber SETA CDFSDriverErrorNumber + 1
 ALIGN
        MEND

; ******************************************
; ***  Clear carry flag - will set nzcv  ***
; ******************************************
        MACRO
$label  CLC     $cond
$label  CMN$cond PC, #0
        MEND

; **************************************************************************
; ***  Clear bits in PSR from the mask in $bits, using register $regtmp  ***
; **************************************************************************
        MACRO
$label  CLRPSR  $bits, $regtmp, $cond
$label  MVN$cond   $regtmp, #$bits
        TST$cond.P $regtmp, PC
        MEND

; *******************************************
; *** Clear overflow flag - will set nzCv ***
; *******************************************
        MACRO
$label  CLV    $cond
$label  EORVSS pc, pc, #Overflow_Flag
        MEND

; *********************************************
; *** Generates a help/syntax/command block ***
; ***    for a Module star command table    ***
; *** Needs a variable Module_BaseAddr set  ***
; *********************************************
        GBLA    Command_LastName ; Offset to command string within module
        MACRO
        Command $cmd, $max, $min, $optbits, $cmdlabel
        LCLA    temp
        LCLS    cmdlab
 [ "$optbits" = ""
temp    SETA    0
 |
temp    SETA    $optbits
 ]
 [ "$cmdlabel" = ""
cmdlab  SETS    "$cmd"
 |
cmdlab  SETS    "$cmdlabel"
 ]
Command_LastName SETA .-Module_BaseAddr
        DCB     "$cmd", 0
        ALIGN
        DCD     $cmdlab._Code  -Module_BaseAddr
        DCD     ($min) + (($max) :SHL: 16) + temp
        DCD     $cmdlab._Syntax-Module_BaseAddr
        DCD     $cmdlab._Help  -Module_BaseAddr
        MEND

;******************************************************************
; This converts a 2 digit BCD into a normal number
;
; $con = condition
; entry:
;       $bcd = bcd value to convert
; exit:
;       $bcd = normal number
;       $temp = corrupted
;       $temp2 = corrupted
;******************************************************************
        MACRO
$label  ConvertBCDToNormal $bcd, $temp, $con
$label  MOV$con $temp, $bcd, LSR #4
        AND$con $bcd, $bcd, #2_1111
        ADD$con $temp, $temp, $temp, LSL #2     ; * 5
        ADD$con $bcd, $bcd, $temp, LSL #1       ; * 2 + byte
        MEND

;******************************************************************
; This converts a normal number to a 2 digit BCD
;
; entry:
;       $normal = number to convert
; exit:
;******************************************************************
        MACRO
$label  ConvertNormalToBCD $normal, $temp1, $temp2
$label;  DivRem $temp1, $normal, #10, $temp2
;        ORR $normal, $normal, $temp1, LSL #4
        DivideBy10 $normal, $temp1, $temp2
        ORR $normal, $temp1, $normal, LSL #4
        MEND

; **********************************************************
; This will print a message if 'debug' = ON. R14 corrupted !
; **********************************************************
        MACRO
$label  Debug $string
$label  [ debug=ON
        STASH r14
        SWI XOS_WriteS
        = "$string", 0
        ALIGN
        GRAB r14
        ]
        MEND

; **********************************************************
; This will perform a XOS_Write0 if 'debug' = ON. R14 corrupted !
; **********************************************************
        MACRO
$label  Debug0 $string
$label  [ debug=ON
        SWI XOS_Write0
        ]
        MEND

; **********************************************************
; This will perform a Display if 'debug' = ON. R14 corrupted !
; **********************************************************
        MACRO
$label  DebugDisplay $string
$label  [ debug=ON
        Display $string
        ]
        MEND

; **********************************************************
; This will perform a wait-for-key if 'debug' = ON. R14 corrupted !
; **********************************************************
        MACRO
$label  DebugWaitForAKey
$label  [ debug=ON
        STASH r0 - r2
        MOV r0, #122
01
        SWI XOS_Byte
        CMP r1, #&FF
        BEQ %BT01
        GRAB r0 - r2
        ]
        MEND


        MACRO
$label  DEC     $reg,$by
        [ "$by" = ""
$label  SUB     $reg,$reg,#1
        |
$label  SUB     $reg,$reg,#$by
        ]
        MEND

        MACRO
$label  DECS    $reg,$by
        [ "$by" = ""
$label  SUBS    $reg,$reg,#1
        |
$label  SUBS    $reg,$reg,#$by
        ]
        MEND

; **********************************************************
; **********************************************************

;     This macro will display the contents of a register in hex

; Only 8 digits are displayed

; Must have an area setup called 'letters' with "0123456789ABCDEF" in

; !!!!!!!!!!!!! R14 is corrupted !!!!!!!!!!!!!!

; **********************************************************
; **********************************************************
        MACRO
$label  Display $reg
        [ $reg <= r3
 ! 0,"Cannot use R0 - R3 in Display macro !"
        ]
$label  STASH r0 - r3
        ADRL r3, letters
        MOV r2, #8              ; altering this figure affects the number of

01      MOV $reg, $reg, ROR #28  ; characters displayed
        AND r1, $reg, #15

        LDRB r0, [ r1, r3 ]

        SWI XOS_WriteC

        SUBS r2, r2, #1

        BNE %BT01

        GRAB r0 - r3

        MEND

; **********************************************************
; ***                  Unsigned divide by 10             ***
; on entry:
;          $number = value to divide by 10
; on exit:
;          $number=$number / 10
;          $temp1 =$number MOD 10
; **********************************************************
  MACRO
$label DivideBy10 $number, $temp1, $temp3
$label MOV     $temp1,$number
       MOV     $number,$number,LSR #1
       ADD     $number,$number,$number,LSR #1
       ADD     $number,$number,$number,LSR #4
       ADD     $number,$number,$number,LSR #8
       ADD     $number,$number,$number,LSR #16
       MOV     $number,$number,LSR #3
       ADD     $temp3,$number,$number,LSL #2
       SUB     $temp1,$temp1,$temp3,LSL #1
       CMP     $temp1,#10
       ADDGE   $number,$number,#1
       SUBGE   $temp1,$temp1,#10
  MEND

; **********************************************************
; ***   Macro DIVREM - rc := ra DIV rb; ra := ra MOD rb  ***
; ***   rb preserved, rtemp corrupt                      ***
; ***   Now up to 37% faster                             ***
; **********************************************************

; ra = ra MOD rb
; rc = ra DIV r6

; rtepm = corrupt

        MACRO
$label  DivRem  $rc, $ra, $rb, $rtemp
$label
        MOV     $rtemp, $rb
        CMP     $rtemp, $ra, LSR #1
01
        MOVLS   $rtemp, $rtemp, LSL #1
        CMPLS   $rtemp, $ra, LSR #1
        BLS     %BT01
        MOV     $rc, #0
02
        CMP     $ra, $rtemp
        SUBCS   $ra, $ra, $rtemp
        ADC     $rc, $rc, $rc
        MOV     $rtemp, $rtemp, LSR #1
        CMP     $rtemp, $rb
        BCS     %BT02
        MEND

; **********************************************************
; ***   Macro DIVREM - rc := ra DIV rb; ra := ra REM rb  ***
; ***   OLD version NB. rb, rtemp corrupt                ***
; **********************************************************
;        MACRO
;$label  DivRem  $rc, $ra, $rb, $rtemp
;$label  MOV     $rtemp, #1
;01      CMP     $rb, #&80000000
;        CMPCC   $rb, $ra
;        MOVCC   $rb, $rb, ASL #1
;        MOVCC   $rtemp, $rtemp, ASL #1
;        BCC     %BT01
;        MOV     $rc, #0
;02      CMP     $ra, $rb
;        SUBCS   $ra, $ra, $rb
;        ADDCS   $rc, $rc, $rtemp
;        MOVS    $rtemp, $rtemp, LSR #1
;        MOVNE   $rb, $rb, LSR #1
;        BNE     %BT02
;        MEND

        MACRO
$label  DoCallTable $jumpreg, $tablename, $work
$label  Push    "$work, PC"
        ADR     $work, $tablename
        LDR     lr, [$work, $jumpreg, LSL #2]
        ADD     $work, $work, lr
        STR     $work, [stack, #4]
        MOV     lr, PC ; ADR lr, %FT99 with correct mode bits
        Pull    "$work, PC"
;                0      4
        ASSERT $jumpreg <> $work
        ASSERT $jumpreg <> lr
        ASSERT $jumpreg <> PC
99 ; Return here from called routine
        MEND

; ****************************************************************************
; ***  Probably the fastest jump table mechanism for PIC - a mere 4S + 2N  ***
; ***  cycles.  Jump table directly follows the macro, and is a list of    ***
; ***  offsets done by eg.  DCD routine_address-table-4. Needs only one    ***
; ***  register temp (Use lr mostly).                                      ***
; ****************************************************************************
        MACRO
$label  DoFastJumpTable $jumpreg, $trash
$label  LDR     $trash, [PC, $jumpreg, LSL #2]
        ADD     PC, PC, $trash
        MEND

; *********************************************
; ***  Jump table preserving all registers  ***
; *********************************************
        MACRO
$label  DoJumpTable $jumpreg, $tablename, $work1, $work2
$label  Push    "$work1, $work2, PC"      ; PC is just a dummy reg here
        ADR     $work1, $tablename
        LDR     $work2, [$work1, $jumpreg, LSL #2]
        ADD     $work1, $work1, $work2
        STR     $work1, [stack, #8]
        Pull    "$work1, $work2, PC"
;                0       4       8
        ASSERT $jumpreg <> $work1
        ASSERT $jumpreg <> $work2
        ASSERT $jumpreg <> PC
        MEND

        MACRO
$label  DoSVCCallTable $jumpreg, $tablename
$label  ADR     SVCWK1, $tablename
        LDR     SVCWK0, [SVCWK1, $jumpreg, LSL #2]
        MOV     lr, PC ; ADR lr, %FT99 with correct mode bits
        ADD     PC, SVCWK1, SVCWK0
        ASSERT $jumpreg <> lr
        ASSERT $jumpreg <> PC
99 ; Return here from called routine
        MEND

; ***************************************************************************
; ***  Jump table using SVC mode temporary registers. Use with caution !  ***
; ***************************************************************************
        MACRO
$label  DoSVCJumpTable $jumpreg, $tablename
$label  ADR     SVCWK1, $tablename
        LDR     SVCWK0, [SVCWK1, $jumpreg, LSL #2]
        ADD     PC, SVCWK1, SVCWK0
        ASSERT $jumpreg <> lr
        ASSERT $jumpreg <> PC
        MEND

        MACRO
$label  Error   $errno, $errstr
$label  ADR     R0, %FT01
        SWI     OS_GenerateError
01
        &       $errno
        =       "$errstr", 0
        ALIGN
        MEND

        MACRO
$label  XError     $errsym, $c1, $c2
$label  ADR$c1$c2  R0,ErrorBlock_$errsym
        SETV       $c1
        MEND

; ***********************************************************************
; ***  Exit macro for SWI handlers.                                   ***
; ***  Jump to 17M in the Sam-hacked Brazil, for installed handlers.  ***
; ***  Do it directly if really in system                             ***
; ***********************************************************************
SWIHandlerExit * 17*1024*1024
CallVecAddr    * SWIHandlerExit+4
        MACRO
$label  ExitSWIHandler $cond
        [ AssemblingArthur
$label  B$cond   SLVK
        |
        [ Module
$label  LDR$cond PC, =BranchToSWIExit
        |
$label  MOV$cond PC, #SWIHandlerExit
        ]
        ]
        MEND

        MACRO
$label  GRAB    $reglist, $cond, $hat
$label  LDM$cond.FD r13!, {$reglist}$hat
        MEND


;****************************************************************************
;***  Pull registers and restore PSR (if R15 loaded). Use with extreme     **
;***  caution : there are bugs in 3um ARM with PSR update in non-USR modes.**
;****************************************************************************
        MACRO
$label  GRABS   $reglist, $cond
$label  LDM$cond.FD r13!, {$reglist}^
        [ :LEN: "$reglist" <= 3
 ! 0,"GRABS used dangerously - check your code !"
        ]
        MEND

        MACRO
$label  INC     $reg,$by
        [ "$by" = ""
$label  ADD     $reg,$reg,#1
        |
$label  ADD     $reg,$reg,#$by
        ]
        MEND

        MACRO
$label  INCS    $reg,$by
        [ "$by" = ""
$label  ADDS    $reg,$reg,#1
        |
$label  ADDS    $reg,$reg,#$by
        ]
        MEND

; ****************************************************
; ***  Generates the InfoWord for a command table  ***
; ****************************************************
        MACRO
        InfoWord $max, $min, $optbits
 [ "$optbits" = ""
        DCD     ($min) + (($max) :SHL: 16)
 |
        DCD     ($min) + (($max) :SHL: 16) + $optbits
 ]
        MEND

; **********************************************************
; ***  Macro Immediate - set flag if value is immediate  ***
; **********************************************************
        GBLL    immediate

        MACRO
        Immediate $var
immediate SETL  {FALSE}
        LCLA    count
        LCLA    varcopy
varcopy SETA    $var
        WHILE   count <= 30
 [ ((varcopy:SHL:count) + (varcopy:SHR:(32-count))) :AND: (:NOT: &FF) = 0
immediate SETL  {TRUE}
        MEXIT
 ]
count   SETA    count + 2
        WEND
        MEND

;****************************************************************************
;****** Macro jump table
;****** the table must follow this
;****** table should be:  DCW label - startoftable - 4
;****************************************************************************

       MACRO
$label JumpTableWith16BitOffset $counter, $temp
$label ADR $temp, %FT01
       LDR $temp, [ $temp, $counter, LSL #1 ]
       MOV $temp, $temp, LSL #16
       ADD PC, PC, $temp, LSR #16
01
       MEND

; *********************************************
; ***  Macro LDROSB - Load Osbyte variable  ***
; *********************************************
        MACRO
$label  LDROSB  $reg, $var, $cond
$label  MOV$cond $reg, #0
        LDR$cond.B $reg, [$reg, #OsbyteVars+$var-OSBYTEFirstVar]
        MEND

; ******************************************************
; ***  Macro LDW - Load word from unknown alignment  ***
; ******************************************************
        MACRO
$label  LDW     $dest, $addr, $temp1, $temp2
        ASSERT  $dest < $temp2
$label  BIC     $temp1, $addr, #3
        LDMIA   $temp1, {$dest, $temp2}
        AND     $temp1, $addr, #3
        MOVS    $temp1, $temp1, LSL #3
        MOVNE   $dest, $dest, LSR $temp1
        RSBNE   $temp1, $temp1, #32
        ORRNE   $dest, $dest, $temp2, LSL $temp1
        MEND

; ***********************************************************************
; ***  Lowercasing macro. Needs temp register; only lowercases A-Z !  ***
; ***********************************************************************
        MACRO
$label  LowerCase $reg, $wrk
$label  CMP     $reg, #"A"
        RSBGES  $wrk, $reg, #"Z"        ; inverse compare
        ADDGE   $reg, $reg, #"a"-"A"
        MEND

        MACRO
$label  LSL     $reg, $val, $cc
$label  MOV$cc  $reg, $reg, LSL #$val
        MEND

        MACRO
$label  LSR     $reg, $val, $cc
$label  MOV$cc  $reg, $reg, LSR #$val
        MEND

        MACRO
$label  MakeErrorBlock $name, $noalign
        ALIGN
$label
ErrorBlock_$name
        DCD     ErrorNumber_$name
        DCB     ErrorString_$name
        DCB     0
    [   "$noalign" = ""
        ALIGN
    ]
        MEND



; ****************************************
; ***  Macro MULTIPLY - rc := ra * rb  ***
; ***       NB. ra, rb corrupt         ***
; ****************************************
        MACRO
$label  MULTIPLY $rc, $ra, $rb

    [ {FALSE}                  ; old boring one
$label  MOV     $rc, #0
01      MOVS    $ra, $ra, LSR #1
        ADDCS   $rc, $rc, $rb
        ADD     $rb, $rb, $rb
        BNE     %BT01
    |
$label  MUL     $rc, $rb, $ra ; sexy 2u version with regs in the right order
    ]
        MEND

; *******************************************************
; ***  Sweet FA macro to keep Tutu out of mischief !  ***
; *******************************************************
        MACRO
$label  NOP
;$label  MOVNV   R0, R0   ; Illegal to use 'NV' !!!!!1
$label  MOV R0, R0
        MEND

        MACRO
$label  Overlap $master, $slave
  [     "$label" = ""

        ^ :INDEX:$master, wp
$slave  # ?$master
  |
        ! 0, "You what?"
  ]
        MEND

; **********************************************************************
; ***  Disable IRQs, saving an old interrupt state indicator in R14  ***
; ***  NB This macro preserves the C and V flags                     ***
; **********************************************************************
        MACRO
$lab    PHPSEI  $register
  [     "$register" = ""
$lab    MOV     R14, #I_bit
        TST     R14, PC                 ; is I_bit set ?
        TEQEQP  R14, PC                 ; no, then set it (and R14 = I_bit)
        MOVNE   R14, #0                 ; yes, then leave alone (and R14=0)
  |
$lab    MOV     $register, #I_bit
        TST     $register, PC           ; is I_bit set ?
        TEQEQP  $register, PC           ; no, then set it (and $reg. = I_bit)
        MOVNE   $register, #0           ; yes, then leave alone (and R14=0)
  ]
        MEND

; ************************************************************************
; ***  Restore IRQ state from the indicator in R14 (set up by PHPSEI)  ***
; ***  NB This macro preserves the C and V flags                       ***
; ************************************************************************
        MACRO
$lab    PLP     $register
  [     "$register" = ""
$lab    TEQP    R14, PC
  |
$lab    TEQP    $register, PC
  ]
        MEND

; *****************************************
; ***  Pull registers given in reglist  ***
; *****************************************
        MACRO
$label  Pull    $reglist, $cond, $hat
$label  LDM$cond.FD R13!, {$reglist}$hat
        MEND

; *****************************************
; ***  Push registers given in reglist  ***
; *****************************************
        MACRO
$label  Push   $reglist, $cond
$label  STM$cond.FD R13!, {$reglist}
        MEND

;        MACRO            ; Restores values and leaves stack at base
;$label  RESTOREALL $cond
;$label  LDR$cond R13, emptystackpointer
;        LDM$cond.FD R13, { R0 - R9, R14 }
;        MEND

        MACRO
$label  RETURNS $cond
$label  MOV$cond.S PC, lr
        MEND

        MACRO
$label  RTS  $cond
$label  MOV$cond PC, lr
        MEND

        MACRO
$label  ROR     $reg, $val, $cc
$label  MOV$cc  $reg, $reg, ROR #$val
        MEND

; **************************************************
; ***  Set and clear bits in PSR from the masks  ***
; ***  $set, $clr, using register $regtmp        ***
; **************************************************
        MACRO
$label  SCPSR   $set, $clr, $regtmp, $cond
$label  MOV$cond   $regtmp, PC
        ORR$cond   $regtmp, $regtmp, #($set) :OR: ($clr)
        TEQ$cond.P $regtmp, #$clr
        MEND

; ****************************************
; ***  Set carry flag - will set nzCv  ***
; ****************************************
        MACRO
$label  SEC     $cond
$label  CMP$cond PC, #0
        MEND

; ************************************************************************
; ***  Set bits in PSR from the mask in $bits, using register $regtmp  ***
; ************************************************************************
        MACRO
$label  SETPSR  $bits, $regtmp, $cond
$label  MOV$cond   $regtmp, PC
        ORR$cond   $regtmp, $regtmp, #$bits
        TEQ$cond.P $regtmp, #0
        MEND

; *******************************************
; ***  Set overflow flag - will set NzcV  ***
; *******************************************
        MACRO
$label  SEV    $cond
$label  CMP$cond PC, #&80000000
        MEND

        MACRO
$label  STASH   $reglist, $cond, $hat
$label  STM$cond.FD r13!, {$reglist}$hat
        MEND



; *******************************
; ***  String immediate out.  ***
; *******************************
        MACRO
$label  STRIM   $string
        [ :LEN: "$string" = 1
$label  SWI     XOS_WriteI+"$string"
        |
$label  SWI     XOS_WriteS
        DCB     "$string", 0
        ALIGN
        ]
        MEND

; **********************************************
; ***  Macro STROSB - Store Osbyte variable  ***
; **********************************************
        MACRO
$label  STROSB  $reg, $var, $temp, $cond
$label  MOV$cond $temp, #0
        STR$cond.B $reg, [$temp, #OsbyteVars+$var-OSBYTEFirstVar]
        MEND

; *****************************************
; ***  Macro Swap - Swap two registers  ***
; *****************************************
        MACRO
$label  Swap    $ra, $rb, $cc
$label  EOR$cc  $ra, $ra, $rb
        EOR$cc  $rb, $ra, $rb
        EOR$cc  $ra, $ra, $rb
        MEND

; ***************************************************************************
; ***  Toggle bits in PSR from the mask in $bits, using register $regtmp  ***
; ***************************************************************************
        MACRO
$label  TOGPSR  $bits, $regtmp, $cond
$label  MOV$cond   $regtmp, PC
        TEQ$cond.P $regtmp, #$bits
        MEND

; ***********************************************************************
; ***  Uppercasing macro. Needs temp register; only uppercases a-z !  ***
; ***********************************************************************
        MACRO
$label  UpperCase $reg, $wrk
$label  CMP     $reg, #"a"
        RSBGES  $wrk, $reg, #"z"        ; inverse compare
        SUBGE   $reg, $reg, #"a"-"A"
        MEND

; **********************************************************
; ***  Macro VDWS - Point to our new VduDriverWorkSpace  ***
; **********************************************************
        MACRO
        VDWS    $reg
 [ AssemblingArthur :LOR: Module
        MOV     $reg, #VduDriverWorkSpace
 |
 ! 0, "This is a real waste if using Hdr.NewSpace"
        MOV     $reg, #(VduDriverWorkSpace :AND: &FF000000)
        ORR     $reg, $reg, #(VduDriverWorkSpace :AND: &00FF0000)
        ORR     $reg, $reg, #(VduDriverWorkSpace :AND: &0000FFFF)
 ]
        MEND

; *******************************
; ***  Add word to workspace  ***
; *******************************
        MACRO
$label  Word    $value, $count
  [     ( ( :INDEX: @ ) :AND: 3 ) <> 0
        #       4 - ( ( :INDEX: @ ) :AND: 3 )
  ]
  [     "$label" = ""
    [   "$count" = ""
      [ "$value" = ""
      |
$value  #       4
      ]
    |
$value  #       ($count) * 4
    ]
  |
    [   "$value" = ""
$label  #       4
    |
$label  #       ($value) * 4
    ]
  ]
        MEND

; *************************
; ***  WriteLn a string ***
; *************************
        MACRO
$label  WRLN    $string
$label  SWI     XOS_WriteS
        DCB     "$string", 10,13, 0
        ALIGN
        MEND

; ****************************************************************************
; ***  |#| - macro for allocating workspace downwards rather than upwards  ***
; ****************************************************************************

        MACRO
$var    |#|     $bytes
 [ "$bytes" = ""
        !       1, "Syntax: [<variable>] |#| <bytes>"
        MEXIT
 ]
        #       -($bytes)
 [ "$var" <> ""
$var    #       $bytes          ; Declare correct size
        #       -($bytes)
 ]
        MEND


;        OPT OldOpt
        END
            