; > EEROMDoc

The EEROM module is designed to be loaded onto an NC running NC OS 1.06 or
earlier. Its function is to intercept the OS_Byte calls (161 and 162
respectively) to read and write the non-volatile RAM, and replace them with
code that works more reliably with EEROM devices that have very slow write
cycles. These devices refuse to acknowledge the device address byte until
they have finished any previous write cycle. Therefore the code in the NC OS
1.06 kernel restarts the IIC operation up to 15 times, sending the start
condition followed by the device address each time.

Unfortunately this is not quite enough retries for some slow devices (which
can take 10ms to do a write cycle). This module therefore increases the
number of tries to 45. (It's not very scientific but it seems to work). The
module provides a command *EEROMStats which prints out the highest number of
tries that has proved necessary so far (up to the limit of 45).

If the NC OS 1.06 kernel has attempted to reset the EEROM locations (due to
earlier writes not working properly, invalidating the checksum byte), then
this too will fail before the EEROM module gets loaded. Therefore the EEROM
module on initialisation goes through each location comparing it with the
version in the kernel's cache. If they differ, it writes the cached version
back using its own code.

The module has the secondary function of providing access to up to 2K of
EEROM, which NC OS 1.06 does not cope with. However the checksum byte
contains only the checksum of the bottom 240 bytes, so that on reset the NC
OS 1.06 kernel (which only knows about the bottom 240 bytes) will verify that
the checksum byte is correct, and not try to reset everything again.

 Tim Dobson
 28-May-97
