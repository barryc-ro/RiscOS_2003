; > ROMExtend

        [       ExtensionROMs
; OSS *** NOTE. Throughout the entire of the code in this file, r12 points
; at the private word instead of pointing at the workspace held in the
; private word. Thus calling copy_error_one() could be awkward. Fortunately
; it currently does not need calling.

ROMIDLo RN      6
ROMIDHi RN      7
P0      RN      8
P1      RN      9
P2      RN      10
P3      RN      11

ROMChunkSize *  64*1024

             GBLS       ROMValidationString
ROMValidationString     SETS    "ExtnROM0"

        GBLL    DebugROMExtend
DebugROMExtend  SETL    ( :LNOT: ReleaseVersion ) :LAND: {FALSE}

        MACRO
$label  dreg    $reg, $string, $cc, $routine
 [ DebugROMExtend
$label  DREG    $reg, $string, $cc, $routine
 ]
        MEND

        MACRO
$label  dline   $string, $cc, $inverse
 [ DebugROMExtend
$label  DLINE   $string, $cc, $inverse
 ]
        MEND

; Header offsets

        ^       0
ROMExtension_ID         |#|     8
ROMExtension_Checksum   |#|     4
ROMExtension_Size       |#|     4

; *********************************************************************************
;
;       FindExtensionROMs - Find any extension ROMs and add to structure
;
; in:   R2 -> workspace
;       R12 -> private word
;
; out:  R0,R1,R3-R5 corrupted
;       R2 -> workspace (not necessarily where it used to be)
;       All others must be preserved

FindExtensionROMs Entry "R6-R11"
        STR     R2, [R12]               ; point private word at workspace
        ADR     P0, EndOfROM
        MOV     P1, P0
        MOV     P2, P0
        MOV     P3, P0
        ADRL    R0, ValidROMId
        LDMIA   R0, {ROMIDLo, ROMIDHi}

; Main loop - find thing to look for, use semi-highest pointer

ROMScanMainLoop
        SUBS    R0, P0, P1
        MOVCC   R0, #1
        MOVHI   R0, #2

        CMP     P1, P2
        ADDCC   R0, R0, #3
        ADDHI   R0, R0, #6

        CMP     P2, P3
        ADDCC   R0, R0, #9
        ADDHI   R0, R0, #18

        LDR     R0, [PC, R0, LSL #2]
        ADD     PC, PC, R0

ROMScanDispatchTable
        &       DoP0123- ROMScanDispatchTable -4        ; P0 = P1 = P2 = P3
        &       DoP1   - ROMScanDispatchTable -4        ; P0 < P1 = P2 = P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 = P2 = P3
        &       DoP23  - ROMScanDispatchTable -4        ; P0 = P1 < P2 = P3
        &       DoP23  - ROMScanDispatchTable -4        ; P0 < P1 < P2 = P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 < P2 = P3
        &       DoP01  - ROMScanDispatchTable -4        ; P0 = P1 > P2 = P3
        &       DoP1   - ROMScanDispatchTable -4        ; P0 < P1 > P2 = P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 > P2 = P3
        &       DoP3   - ROMScanDispatchTable -4        ; P0 = P1 = P2 < P3
        &       DoP3   - ROMScanDispatchTable -4        ; P0 < P1 = P2 < P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 = P2 < P3
        &       DoP3   - ROMScanDispatchTable -4        ; P0 = P1 < P2 < P3
        &       DoP3   - ROMScanDispatchTable -4        ; P0 < P1 < P2 < P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 < P2 < P3
        &       DoP01  - ROMScanDispatchTable -4        ; P0 = P1 > P2 < P3
        &       DoP1   - ROMScanDispatchTable -4        ; P0 < P1 > P2 < P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 > P2 < P3
        &       DoP01  - ROMScanDispatchTable -4        ; P0 = P1 = P2 > P3
        &       DoP1   - ROMScanDispatchTable -4        ; P0 < P1 = P2 > P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 = P2 > P3
        &       DoP2   - ROMScanDispatchTable -4        ; P0 = P1 < P2 > P3
        &       DoP2   - ROMScanDispatchTable -4        ; P0 < P1 < P2 > P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 < P2 > P3
        &       DoP01  - ROMScanDispatchTable -4        ; P0 = P1 > P2 > P3
        &       DoP1   - ROMScanDispatchTable -4        ; P0 < P1 > P2 > P3
        &       DoP0   - ROMScanDispatchTable -4        ; P0 > P1 > P2 > P3

; Look for a 32-bit header at P0123
; If fail, then goto P01

DoP0123 ROUT
        TEQ     P0, #StartOfROM         ; if all pointers at start of ROM
        LDREQ   R2, [R12]               ; then point R2 at workspace
        EXIT    EQ                      ; and finish

        dreg    P0, "Looking for P0123 header at "
        LDMDB   P0, {R0-R3}     ; R0 = size, R1 = checksum, R2 = idlo, R3 = idhi
        CMP     R2, ROMIDLo
        CMPEQ   R3, ROMIDHi
        BNE     DoP01

        dline   "Found 32-bit ID"

; now check 32-bit checksum

        ADD     R1, R2, R1, LSL #1      ; add in last 3 words to checksum
        ADD     R1, R1, R3              ; so it accounts for all of ROM

        SUB     R0, P0, R0              ; R0 -> first word
10
        LDMDB   P2!, {R2-R9}            ; load 8 words at a time
        SUB     R1, R1, R2              ; subtract all the words from checksum
        SUB     R1, R1, R3
        SUB     R1, R1, R4
        SUB     R1, R1, R5
        SUB     R1, R1, R6
        SUB     R1, R1, R7
        SUB     R1, R1, R8
        SUB     R1, R1, R9
        TEQ     P2, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

; failed checksum, but there was a header so can't be any other width headers at this address
; so move all pointers down to start of next chunk

        dline   "32-bit checksum failed"

        SUB     P3, P3, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P3, P3, R0
        MOV     P0, P3
        MOV     P1, P3
        MOV     P2, P3
        B       DoP0123                 ; pointers still equal so look for another 32-bit wide header

; checksum was OK so add modules

20
        dline   "32-bit checksum OK"

        LDR     R1, [P3, #ROMExtension_Checksum]        ; reload checksum to put in node

        MOV     P0, R0                  ; first update ROM pointers
        MOV     P1, P0
        MOV     P2, P0
        MOV     P3, P0

        ADR     R4, ByteOffsets32bit
        BL      AddROMNode
        B       DoP0123

ByteOffsets32bit
        &       4                       ; offset between words
        &       1, 2, 3                 ; offsets from start of word to bytes 1,2,3

ValidROMId
        =       ROMValidationString
        ALIGN

        LTORG

; Look for 16-bit wide header at P01

DoP01   ROUT
        dreg    P0, "Looking for P01 header at "
        MOV     R14, #-1
        MOV     R14, R14, LSR #16       ; R14 = &FFFF
        LDMDB   P0!, {R2,R3,R4,R5}      ; R2,R3 = idlo, R4,R5 = idhi
        AND     R2, R2, R14
        ORR     R2, R2, R3, LSL #16     ; R2 = idlo
        AND     R3, R4, R14
        ORR     R3, R3, R5, LSL #16     ; R3 = idhi

        CMP     R2, ROMIDLo
        CMPEQ   R3, ROMIDHi
        MOVNE   P0, P1
        BNE     DoP0

        dline   "Found 16-bit ID"

        LDMDB   P0!, {R0,R1,R4,R5}      ; R0,R1 = size, R4,R5 = checksum
        AND     R0, R0, R14
        ORR     R0, R0, R1, LSL #16     ; R0 = size
        AND     R1, R4, R14
        ORR     R1, R1, R5, LSL #16     ; R1 = checksum
        Push    "R1"                    ; save real checksum for later

        ADD     R1, R2, R1, LSL #1      ; add in last 3 words to checksum
        ADD     R1, R1, R3              ; so it accounts for all of ROM

        SUB     R0, P1, R0, LSL #1      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P1"                    ; save P1 for later

10
        LDMDB   P1!, {R2-R7,P0,R14}
        MOV     R2, R2, LSL #16
        SUB     R1, R1, R2, LSR #16
        SUB     R1, R1, R3, LSL #16
        MOV     R4, R4, LSL #16
        SUB     R1, R1, R4, LSR #16
        SUB     R1, R1, R5, LSL #16
        MOV     R6, R6, LSL #16
        SUB     R1, R1, R6, LSR #16
        SUB     R1, R1, R7, LSL #16
        MOV     P0, P0, LSL #16
        SUB     R1, R1, P0, LSR #16
        SUB     R1, R1, R14, LSL #16
        TEQ     P1, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P1"                    ; and reload P1

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

; failed checksum, but was header, so move P0 and P1 down to start of next chunk, then goto main loop

        dline   "16-bit checksum failed"

        ADD     sp, sp, #4              ; junk stacked checksum
        SUB     P1, P1, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P1, P1, R0
        MOV     P0, P1
        B       ROMScanMainLoop

; checksum was OK, so add 16-bit wide modules

20
        dline   "16-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum to put in node

        MOV     P0, R0                  ; first update ROM pointers
        MOV     P1, P0

        ADR     R4, ByteOffsets16bit
        BL      AddROMNode
        B       ROMScanMainLoop

ByteOffsets16bit
        &       8                       ; offset between words
        &       1, 4, 5                 ; offsets from start of word to bytes 1,2,3

; Look for 16-bit wide header at P23

DoP23   ROUT
        dreg    P2, "Looking for P23 header at "
        MOV     R14, #-1
        MOV     R14, R14, LSL #16       ; R14 = &FFFF0000
        LDMDB   P2!, {R2,R3,R4,R5}      ; R2,R3 = idlo, R4,R5 = idhi
        AND     R3, R3, R14
        ORR     R2, R3, R2, LSR #16     ; R2 = idlo
        AND     R3, R5, R14
        ORR     R3, R3, R4, LSR #16     ; R3 = idhi

        CMP     R2, ROMIDLo
        CMPEQ   R3, ROMIDHi
        MOVNE   P2, P3
        BNE     DoP2

        dline   "Found 16-bit ID"

        LDMDB   P2!, {R0,R1,R4,R5}      ; R0,R1 = size, R4,R5 = checksum
        AND     R1, R1, R14
        ORR     R0, R1, R0, LSR #16     ; R0 = size
        AND     R1, R5, R14
        ORR     R1, R1, R4, LSR #16     ; R1 = checksum
        Push    "R1"                    ; save checksum for later

        ADD     R1, R2, R1, LSL #1      ; add in last 3 words to checksum
        ADD     R1, R1, R3              ; so it accounts for all of ROM

        SUB     R0, P3, R0, LSL #1      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P3"                    ; save P3 for later

10
        LDMDB   P3!, {R2-R7,P2,R14}
        SUB     R1, R1, R2, LSR #16
        MOV     R3, R3, LSR #16
        SUB     R1, R1, R3, LSL #16
        SUB     R1, R1, R4, LSR #16
        MOV     R5, R5, LSR #16
        SUB     R1, R1, R5, LSL #16
        SUB     R1, R1, R6, LSR #16
        MOV     R7, R7, LSR #16
        SUB     R1, R1, R7, LSL #16
        SUB     R1, R1, P2, LSR #16
        MOV     R14, R14, LSR #16
        SUB     R1, R1, R14, LSL #16
        TEQ     P3, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P3"                    ; and reload P3

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

; failed checksum, but was header, so move P2 and P3 down to start of next chunk, then goto main loop

        dline   "16-bit checksum failed"
        dreg    R1, "Checksum residue = "

        ADD     sp, sp, #4              ; junk stacked checksum
        SUB     P3, P3, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P3, P3, R0
        MOV     P2, P3
        B       ROMScanMainLoop

; checksum was OK, so add 16-bit wide modules

20
        dline   "16-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum to put in node

        MOV     P2, R0                  ; first update ROM pointers
        MOV     P3, P2
        ADD     R0, R0, #2              ; point at actual byte start
        ADR     R4, ByteOffsets16bit
        BL      AddROMNode
        B       ROMScanMainLoop

; 8-bit macros

        GBLS    Byte0
        GBLS    Byte1
        GBLS    Byte2
        GBLS    Byte3

        MACRO
        GetWord0 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF
        AND     $b1, $b1, #&FF
        ORR     $b0, $b0, $b1, LSL #8
        AND     $b2, $b2, #&FF
        ORR     $b0, $b0, $b2, LSL #16
        ORRS    $dest, $b0, $b3, LSL #24
        MEND

        MACRO
        SubWord0 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF
        SUB     $dest, $dest, $b0
        AND     $b1, $b1, #&FF
        SUB     $dest, $dest, $b1, LSL #8
        AND     $b2, $b2, #&FF
        SUB     $dest, $dest, $b2, LSL #16
        SUB     $dest, $dest, $b3, LSL #24
        MEND

        MACRO
        GetWord1 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF00
        AND     $b1, $b1, #&FF00
        ORR     $b0, $b1, $b0, LSR #8
        AND     $b2, $b2, #&FF00
        ORR     $b0, $b0, $b2, LSL #8
        AND     $b3, $b3, #&FF00
        ORRS    $dest, $b0, $b3, LSL #16
        MEND

        MACRO
        SubWord1 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF00
        SUB     $dest, $dest, $b0, LSR #8
        AND     $b1, $b1, #&FF00
        SUB     $dest, $dest, $b1
        AND     $b2, $b2, #&FF00
        SUB     $dest, $dest, $b2, LSL #8
        AND     $b3, $b3, #&FF00
        SUB     $dest, $dest, $b3, LSL #16
        MEND

        MACRO
        GetWord2 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF0000
        AND     $b1, $b1, #&FF0000
        AND     $b2, $b2, #&FF0000
        AND     $b3, $b3, #&FF0000
        ORR     $b0, $b2, $b0, LSR #16
        ORR     $b0, $b0, $b1, LSR #8
        ORRS    $dest, $b0, $b3, LSL #8
        MEND

        MACRO
        SubWord2 $dest, $b0, $b1, $b2, $b3
        AND     $b0, $b0, #&FF0000
        SUB     $dest, $dest, $b0, LSR #16
        AND     $b1, $b1, #&FF0000
        SUB     $dest, $dest, $b1, LSR #8
        AND     $b2, $b2, #&FF0000
        SUB     $dest, $dest, $b2
        AND     $b3, $b3, #&FF0000
        SUB     $dest, $dest, $b3, LSL #8
        MEND

        MACRO
        GetWord3 $dest, $b0, $b1, $b2, $b3
        AND     $b1, $b1, #&FF000000
        AND     $b2, $b2, #&FF000000
        AND     $b3, $b3, #&FF000000
        ORR     $dest, $b3, $b0, LSR #24
        ORR     $dest, $dest, $b1, LSR #16
        ORRS    $dest, $dest, $b2, LSR #8
        MEND

        MACRO
        SubWord3 $dest, $b0, $b1, $b2, $b3
        SUB     $dest, $dest, $b0, LSR #24
        AND     $b1, $b1, #&FF000000
        SUB     $dest, $dest, $b1, LSR #16
        AND     $b2, $b2, #&FF000000
        SUB     $dest, $dest, $b2, LSR #8
        AND     $b3, $b3, #&FF000000
        SUB     $dest, $dest, $b3
        MEND

; Look for 8-bit wide header at P0

DoP0    ROUT
        dreg    P0, "Looking for P0 header at "
        LDMDB   P0!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idhi
        GetWord0 R2, R2, R3, R4, R5     ; R2 = idhi
        CMP     R2, ROMIDHi
        ADDNE   P0, P0, #16
        BNE     DecrementP0

        LDMDB   P0!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idlo
        GetWord0 R2, R2, R3, R4, R5     ; R2 = idlo
        CMP     R2, ROMIDLo
        ADDNE   P0, P0, #32
        BNE     DecrementP0

        dline   "Found 8-bit ID"

        LDMDB   P0!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = checksum
        GetWord0 R1, R2, R3, R4, R5     ; R1 = checksum
        Push    "R1"                    ; save checksum for later

        LDMDB   P0!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = size
        GetWord0 R0, R2, R3, R4, R5     ; R0 = size

        ADD     R1, ROMIDLo, R1, LSL #1 ; add in last 3 words to checksum
        ADD     R1, R1, ROMIDHi         ; so it accounts for all of ROM

        ADD     P0, P0, #64             ; move P0 back to byte after this ROM
        SUB     R0, P0, R0, LSL #2      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P0,P1"                 ; save P0 for later, and P1 as workspace

10
        LDMDB   P0!, {R2-R7,P1,R14}
        SubWord0 R1, R2, R3, R4, R5
        SubWord0 R1, R6, R7, P1, R14
        TEQ     P0, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P0,P1"                 ; and reload P0 and P1

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

        dline   "8-bit checksum failed"
        ADD     sp, sp, #4              ; junk stacked checksum

; failed checksum or header, so move P0 down to start of next chunk, then goto main loop

DecrementP0
        SUB     P0, P0, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P0, P0, R0
        B       ROMScanMainLoop

; checksum was OK, so add 8-bit wide modules

20
        dline   "8-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum
        MOV     P0, R0                  ; first update ROM pointer
        ADR     R4, ByteOffsets8bit
        BL      AddROMNode
        B       ROMScanMainLoop

; Look for 8-bit wide header at P1

DoP1    ROUT
        dreg    P1, "Looking for P1 header at "
        LDMDB   P1!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idhi
        GetWord1 R2, R2, R3, R4, R5     ; R2 = idhi
        CMP     R2, ROMIDHi
        ADDNE   P1, P1, #16
        BNE     DecrementP1

        LDMDB   P1!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idlo
        GetWord1 R2, R2, R3, R4, R5     ; R2 = idlo
        CMP     R2, ROMIDLo
        ADDNE   P1, P1, #32
        BNE     DecrementP1

        dline   "Found 8-bit ID"

        LDMDB   P1!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = checksum
        GetWord1 R1, R2, R3, R4, R5     ; R1 = checksum
        Push    "R1"                    ; save checksum for later

        LDMDB   P1!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = size
        GetWord1 R0, R2, R3, R4, R5     ; R0 = size

        ADD     R1, ROMIDLo, R1, LSL #1 ; add in last 3 words to checksum
        ADD     R1, R1, ROMIDHi         ; so it accounts for all of ROM

        ADD     P1, P1, #64             ; move P1 back to byte after this ROM
        SUB     R0, P1, R0, LSL #2      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P0,P1"                 ; save P0 for workspace, and P1 for later

10
        LDMDB   P1!, {R2-R7,P0,R14}
        SubWord1 R1, R2, R3, R4, R5
        SubWord1 R1, R6, R7, P0, R14
        TEQ     P1, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P0,P1"                 ; and reload P0 and P1

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

        dline   "8-bit checksum failed"
        ADD     sp, sp, #4              ; junk stacked checksum

; failed checksum or header, so move P1 down to start of next chunk, then goto main loop

DecrementP1
        SUB     P1, P1, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P1, P1, R0
        B       ROMScanMainLoop

; checksum was OK, so add 8-bit wide modules

20
        dline   "8-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum
        MOV     P1, R0                  ; first update ROM pointer
        ADD     R0, R0, #1
        ADR     R4, ByteOffsets8bit
        BL      AddROMNode
        B       ROMScanMainLoop

ByteOffsets8bit
        &       16                      ; offset between words
        &       4, 8, 12                ; offsets from start of word to bytes 1,2,3

; Look for 8-bit wide header at P2

DoP2    ROUT
        dreg    P2, "Looking for P2 header at "
        LDMDB   P2!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idhi
        GetWord2 R2, R2, R3, R4, R5     ; R2 = idhi
        CMP     R2, ROMIDHi
        ADDNE   P2, P2, #16
        BNE     DecrementP2

        LDMDB   P2!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idlo
        GetWord2 R2, R2, R3, R4, R5     ; R2 = idlo
        CMP     R2, ROMIDLo
        ADDNE   P2, P2, #32
        BNE     DecrementP2

        dline   "Found 8-bit ID"

        LDMDB   P2!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = checksum
        GetWord2 R1, R2, R3, R4, R5     ; R1 = checksum
        Push    "R1"                    ; save checksum for later

        LDMDB   P2!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = size
        GetWord2 R0, R2, R3, R4, R5     ; R0 = size

        ADD     R1, ROMIDLo, R1, LSL #1 ; add in last 3 words to checksum
        ADD     R1, R1, ROMIDHi         ; so it accounts for all of ROM

        ADD     P2, P2, #64             ; move P2 back to byte after this ROM
        SUB     R0, P2, R0, LSL #2      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P2,P3"                 ; save P2 for later, and P3 for workspace

10
        LDMDB   P2!, {R2-R7,P3,R14}
        SubWord2 R1, R2, R3, R4, R5
        SubWord2 R1, R6, R7, P3, R14
        TEQ     P2, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P2,P3"                 ; and reload P2 and P3

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

        dline   "8-bit checksum failed"
        ADD     sp, sp, #4              ; junk stacked checksum

; failed checksum or header, so move P2 down to start of next chunk, then goto main loop

DecrementP2
        SUB     P2, P2, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P2, P2, R0
        B       ROMScanMainLoop

; checksum was OK, so add 8-bit wide modules

20
        dline   "8-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum
        MOV     P2, R0                  ; first update ROM pointer
        ADD     R0, R0, #2
        ADR     R4, ByteOffsets8bit
        BL      AddROMNode
        B       ROMScanMainLoop

; Look for 8-bit wide header at P3

DoP3    ROUT
        dreg    P3, "Looking for P3 header at "
        LDMDB   P3!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idhi
        GetWord3 R2, R2, R3, R4, R5     ; R2 = idhi
        CMP     R2, ROMIDHi
        ADDNE   P3, P3, #16
        BNE     DecrementP3

        LDMDB   P3!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = idlo
        GetWord3 R2, R2, R3, R4, R5     ; R2 = idlo
        CMP     R2, ROMIDLo
        ADDNE   P3, P3, #32
        BNE     DecrementP3

        dline   "Found 8-bit ID"

        LDMDB   P3!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = checksum
        GetWord3 R1, R2, R3, R4, R5     ; R1 = checksum
        Push    "R1"                    ; save checksum for later

        LDMDB   P3!, {R2,R3,R4,R5}      ; R2,R3,R4,R5 = size
        GetWord3 R0, R2, R3, R4, R5     ; R0 = size

        ADD     R1, ROMIDLo, R1, LSL #1 ; add in last 3 words to checksum
        ADD     R1, R1, ROMIDHi         ; so it accounts for all of ROM

        ADD     P3, P3, #64             ; move P3 back to byte after this ROM
        SUB     R0, P3, R0, LSL #2      ; R0 -> first word (NB R0 was compact size)

; now check checksum

        Push    "P2,P3"                 ; save P2 for workspace, and P3 for later

10
        LDMDB   P3!, {R2-R7,P2,R14}
        SubWord3 R1, R2, R3, R4, R5
        SubWord3 R1, R6, R7, P2, R14
        TEQ     P3, R0
        BNE     %BT10

        ADRL    R2, ValidROMId          ; reload ROMIDlo and hi whether or not we passed
        LDMIA   R2, {ROMIDLo, ROMIDHi}
        Pull    "P2,P3"                 ; and reload P2 and P3

        TEQ     R1, #0
        BEQ     %FT20                   ; good checksum

        dline   "8-bit checksum failed"
        ADD     sp, sp, #4              ; junk stacked checksum

; failed checksum or header, so move P3 down to start of next chunk, then goto main loop

DecrementP3
        SUB     P3, P3, #1
        LDR     R0, =ROMChunkSize-1
        BIC     P3, P3, R0
        B       ROMScanMainLoop

; checksum was OK, so add 8-bit wide modules

20
        dline   "8-bit checksum OK"

        Pull    "R1"                    ; pull stacked checksum
        MOV     P3, R0                  ; first update ROM pointer
        ADD     R0, R0, #3
        ADR     R4, ByteOffsets8bit
        BL      AddROMNode
        B       ROMScanMainLoop

; *****************************************************************************************************************
;
;       AddROMNode - Code to add an extension ROM to list
;
; in:   R0 -> start of ROM
;       R1 = checksum
;       R4 -> table of 4 offsets from byte to byte
;       R12 -> private word
;
; out:  VS => R0 -> error block
;       VC => all preserved
;

AddROMNode Entry   "R0-R4, R9-R11"

; first check that ROM is not a ghost duplicate

        LDR     R2, [R12]               ; R2 -> workspace
        MOV     R10, #:INDEX: ROMNodeChainHead
        ASSERT  PoduleNode_Link = 0
        LDR     R9, [R10, R2]!
10
        TEQ     R9, #0                  ; if head is null
        BEQ     %FT20                   ; then no nodes
        MOV     R10, R9
        LDR     R9, [R10, R2]!
        LDR     R14, [R10, #PoduleNode_Checksum]
        CMP     R14, R1                 ; exit if checksum matches
        BNE     %BT10
        dline   "ROM is a ghost"
        EXIT                            ; NB V=0 from CMP

20
        SUB     R10, R10, R2            ; convert last node ptr to offset

        dreg    R2, "Trying to extend workspace at "

; OSS We are about to extend (ie. MOVE) the workspace. MessageTrans remembers
; the address of our message_file_block in the workspace. This address may
; change, so we had better close the message file if it is open. It will
; get re-opened on demand the next time it is needed.

; ** NOTE currently I believe that the Messages file is always closed here,
; but I have put the code in for completeness.

        Push    wp
        MOV     wp, r2                                          ; make wp -> workspace
        BL      close_message_file                              ; close message file if open, and mark it closed
        Pull    wp

        MOVVC   r0, #ModHandReason_ExtendBlock
        MOVVC   r3, #ROMNode_Size
        SWIVC   XOS_Module
        STRVS   r0, [sp]
        EXIT    VS

        dline   "Succeeded in extending workspace"
        STR     R2, [R12]                       ; update private word pointer
        LDR     R9, [R2, #:INDEX: OffsetOfNextLoader]
        ADD     R11, R2, R9                     ; R11 -> new node
        MOV     R0, #0
        STR     R0, [R11, #PoduleNode_Link]     ; zero link
        [       EASISpace
;        STR     r0, [ r11, #PoduleNode_EASIPhysical ]
;        STR     r0, [ r11, #PoduleNode_EASILogical ]
        STR     r0, [ r11, #PoduleNode_EASIAddress ]
        ]
        STR     r0, [ r11, #PoduleNode_DescriptionOffset ]
        STR     r0, [ r11, #PoduleNode_Type ]   ; Does Flags and Spare
        STR     r0, [ r11, #PoduleNode_CMOS ]
        MOV     r0, #&000000FF
        STR     r0, [ r11, #PoduleNode_IDByte ] ; Does IntValue, FIQasIntValue and FIQValue
        LDR     r0,  [ sp ]                     ; Restore stacked ROM start address
        STR     r0, [ r11, #PoduleNode_ROMAddress ]
        STR     r0, [ r11, #PoduleNode_BaseAddress ] ; store in base address as well
        STR     r0, [ r11, #PoduleNode_CombinedAddress ] ; and combined address
        STR     r1, [ r11, #PoduleNode_Checksum ]
        MOV     r0, #NIL                        ; No loader at the moment
        STR     r0, [ r11, #PoduleNode_LoaderOffset ]
        MOV     r0, #maxint
        STR     r0, [ r11, #PoduleNode_PoduleLimit ]
        MOV     r0, #-1
        STR     r0, [ r11, #PoduleNode_EnumerationLimit ]
        LDMIA   r4, { r0, r1, r4, r14 }         ; Copy offsets
        STR     r0, [ r11, #PoduleNode_WordOffset ]
        ADD     r11, r11, #PoduleNode_ByteOffsets
        MOV     r0, #0                          ; Offset to byte 0 is always 0
        STMIA   r11!, { r0, r1, r4, r14 }

        STR     r9, [ r2, r10 ]                 ; Update previous link pointer
        ADDS    r9, r9, #ROMNode_Size           ; Update pointer to end of workspace
                                                ; (and clear V in the process)
        STR     r9, [ r2, #:INDEX:OffsetOfNextLoader ]

; OSS Increment workspace count of number of Extension ROMs. This is for
; SWI Podule_ReturnNumber which returns the number of podules (ie. 4) and
; the number of extension ROMs. This is for the *Podules command.

        LDR     r0, [ r2, #:INDEX:number_of_extension_roms ]
        ADD     r0, r0, #1
        STR     r0, [r2, #:INDEX:number_of_extension_roms]

        EXIT

        ]
        END
