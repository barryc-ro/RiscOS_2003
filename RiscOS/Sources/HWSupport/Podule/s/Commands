 SUBT => &.Arthur.Podule.Commands

CommandTable
        = "Podules", 0
        ALIGN
        DCD     DoStarPodules - Origin
        InfoWord 0, 0, International_Help
        DCD     SyntaxOfStarPodules - Origin
        DCD     HelpForStarPodules - Origin

        = "PoduleLoad", 0
        ALIGN
        DCD     DoStarPoduleLoad - Origin
        InfoWord 3, 2, International_Help
        DCD     SyntaxOfStarPoduleLoad - Origin
        DCD     HelpForStarPoduleLoad - Origin

        = "PoduleSave", 0
        ALIGN
        DCD     DoStarPoduleSave - Origin
        InfoWord 4, 3, International_Help
        DCD     SyntaxOfStarPoduleSave - Origin
        DCD     HelpForStarPoduleSave - Origin
null_string
        DCB     0
        ALIGN

; 8 Bytes of stack for the return of the description pointer and
; the podule number as a string.
;
; This is a *Command handler, so r0-r6 can be trashed. r7-r11 have to
; be preserved. Register allocation during this routine is:

; r8    Exclusive podule number limit (ie. 9 for Podules, -N for ROMs)
; r7    Podule number progression (+1 for Podules, -1 for Extension ROMs)
; r6    Current podule number (r3 tends to hold this for a while too)
; r5    Pointer to the generated description string
; r4    MessageTrans file token address.
; r0-r3 Much used for many things.


DoStarPodules   ENTRY "r7-r8", 8                        ; Stack frame for text conversions etc.
        LDR     wp, [ r12 ]

; Get Messages file open up front. This way we know we will not get
; "File not found" type errors when making Podule Manager SWIs.

        BL      open_message_file
        SWIVC   XPodule_ReturnNumber                    ; out: r0 = number of podules, r1 = number of extension ROMs
        EXIT    VS

        MOVS    r8, r0                                  ; Number of podules in R8 (limit)
        BEQ     switch_to_extn_roms                     ; There are zero podules

; Set up for doing Podules

        MOV     r7, #1                                  ; Current number direction
        MOV     r6, #0                                  ; Current Podule number in R6

next_podule_loop
        TEQ     r7, #1
        ADRNE   r4, Token_ExtROM                        ; or ExtROM as appropriate
        ADRNE   r5, null_string
        BNE     got_podule_message
        ADR     r4, Token_PodStd                        ; Set MsgTrans token for PodStd
        [       NetworkPodule
        TEQ     r6, #NumberOfPodules
        ADREQ   r4, Token_PodNet
        ]
        MOV     r0, #Podule_ReadInfo_Description
        MOV     r1, sp                                  ; Place to return address
        MOV     r2, #4                                  ; Size of return buffer
        MOV     r3, r6                                  ; Podule number
  [  DebugCommands
        DLINE   "Calling SWI XPodule_ReadInfo"
  ]
        LDR     r12, AddressOfMyPrivateWord             ; Keep this
        SWI     XPodule_ReadInfo
        LDR     wp, [ r12 ]                             ; In case the workspace moves
  [  DebugCommands
        DLINE   "SWI XPodule_ReadInfo returns ", cc
        BVS     %16
        DLINE   "OK"
        B       %17
16
        DLINE   "an error: ", cc
        ADD     r14, r0, #4
        DSTRING r14
17
  ]
        ADDVS   r5, r0, #4                              ; Error becomes podule message
        LDRVC   r5, [ sp, #0 ]                          ; Get the returned pointer
  [  DebugCommands
        DREG    r5, "Description pointer is &"
  ]
        TEQ     r5, #0
        ADREQ   r5, null_string                         ; MessageTrans requires an empty string

; Having got the message, we now need to convert the podule number
; into a string before we can call MessageTrans. The number may be
; multi digit if we are dealing with extension ROMs here.

got_podule_message
        TEQ     r7, #1
        MOVEQ   r0, r6                                  ; Use actual podule number
        MVNNE   r0, r6                                  ; Extn. ROM, ~Number (-2->1, -3->2)
        MOV     r1, sp                                  ; Buffer on stack
        MOV     r2, #7                                  ; Size of buffer
        SWI     XOS_ConvertCardinal4
  [  DebugCommands
        DSTRING r0, "Podule number converts to: "
  ]

; At last we are in a position to make the call to translate and print
; the string!

        MOVVC   r0, r4                                  ; Token
        MOVVC   r1, r5                                  ; %0 -> Message for this podule, or null string
        MOVVC   r2, sp                                  ; %1 -> Podule number on stack
        BLVC    gs_lookup_print_string_two
        EXIT    VS

; OK, now it's time to go on to the next podule

        ADD     r6, r6, r7                              ; Increment/decrement podule number
        TEQ     r6, r8                                  ; Limit is exclusive (ie. 4 for 0-3)
        BNE     next_podule_loop                        ; Not got to limit yet
        CMP     r7, #-1                                 ; Have we done Extension ROMs yet?
        EXIT    EQ                                      ; If yes, then we are all done!

; Drop through - time to switch from podules to Extension ROMs

switch_to_extn_roms
        SWI     XPodule_ReturnNumber
        TEQ     r1, #0                                  ; Are there any Extension ROMs?
        BEQ     check_if_nothing_printed

        MOV     r6, #-2                                 ; Extension ROMs start from -2
        SUB     r8,  r6, r1                             ; Limit is exclusive, so 1 -> -3
        MOV     r7, #-1                                 ; Direction is now negative
        B       next_podule_loop                        ; Go and do the first extension ROM!

; We only get here when there are no Extension ROMs. We check how many
; podules there were (still in R8), and if there were none then we
; have not yet printed anything. This is poor - users like to get some
; output so we had better say something!

check_if_nothing_printed
        TEQ     r8, #0
        EXIT    NE                                      ; There were some podules
        ADR     r0, Token_NoPodsOrROMs
        MOV     r1, #0
        MOV     r2, #0
        BL      gs_lookup_print_string_two
        EXIT

        LTORG

; Data blocks for the MessageTrans tokens used for *Podules

Token_ExtROM
        DCB     "ExtROM", 0
        ALIGN

Token_NoPodsOrROMs
        DCB     "NoPods", 0
        ALIGN

Token_PodStd
        DCB     "PodStd", 0
        ALIGN

Token_PodNet
        DCB     "PodNet", 0
        ALIGN

DoStarPoduleLoad ROUT
        ;       Syntax: *PoduleLoad <podule number> <filename> [<offset>]
        MOV     r6, lr
        LDR     wp, [ r12 ]
        MOV     r5, r1                                  ; Number of arguments
        MOV     r1, r0                                  ; Command tail
        MOV     r0, #10                                 ; Base
        SWI     XOS_ReadUnsigned
        MOVVS   pc, r6
        MOV     r3, r2
        [ DebugCommands
        DREG    r3, "Podule # = &"
        ]
        SUBS    r5, r5, #2                              ; Was there an offset ??
        BEQ     %60                                     ; With correct offset in R5
        MOV     r4, r1                                  ; Hold onto the name pointer
45                                                      ; Skip to the file name
        LDRB    r0, [ r1, #1 ] !
        TEQ     r0, #" "
        BEQ     %45
55                                                      ; Skip to spaces
        LDRB    r0, [ r1, #1 ] !
        TEQ     r0, #" "
        BNE     %55
        MOV     r0, #16
        SWI     XOS_ReadUnsigned
        MOVVS   pc, r6
        MOV     r5, r2                                  ; Save the offset
        MOV     r1, r4
60
        MOV     r0, #open_read :OR: open_mustopen :OR: open_nodir
        SWI     XOS_Find
        MOVVS   pc, r6
        MOV     r4, r0
        [ DebugCommands
        DREG    r4, "File handle = &"
        ]
        DEC     sp, 16
        MOV     r2, sp
        SWI     XPodule_ReadHeader
        INC     sp, 16
        BVS     CloseExit
        Push    "r0-r2"                                 ; save around call to ConvertR3ToPoduleNode
        BL      ConvertR3ToPoduleNode                   ; r3 on output = offset to podule node
        ADDVS   sp, sp, #3*4                            ; if error then junk stacked r0-r2
        BVS     CloseExit                               ; and exit
        Pull    "r0-r2"
        MOV     r0, r5                                  ; Offset
        ADD     r3, wp, r3
        LDR     r5, [ r3, #PoduleNode_LoaderOffset ]    ; offset in workspace of loader
        TEQ     r5, #NIL                                ; TMD 16-Oct-91: test for NIL before adding wp
        ADREQ   Error, ErrorBlock_NoLdr
        BLEQ    copy_error_zero                         ; Sets the V bit
        BVS     CloseExit
        ADD     r5, wp, r5
        INC     r5, 4                                   ; Use the WriteByte entry
        Push    "r7-r11"
        MOV     r7, r4
        MOV     r9, r0                                  ; Offset
        LDR     r11, [ r3, #PoduleNode_CombinedAddress ]
 ; R5  = Call address
 ; R6  = Return address
 ; R7  = Handle
 ; R9  = Write address
 ; R10 = Trashable
 ; R11 = Hardware
        [ DebugCommands
        DREG r5, "Call address  = &"
        DREG r7, "Handle        = &"
        DREG r9, "Write address = &"
        DREG r11, "Hardware      = &"
        ]
20
        MOV     r1, r7
        SWI     XOS_BGet
        BVS     PullCloseExit
        BCS     PoduleExit                              ; End of file
        MOV     r1, r9
        MOV     lr, pc
        MOV     pc, r5
        INC     r9
        BVC     %20
PullCloseExit
        MOV     r4, r7
        Pull    "r7-r11"
CloseExit
        MOV     r5, Error
        MOV     r1, r4                                  ; Handle
        MOV     r0, #0                                  ; Close
        SWI     XOS_Find
        MOVVC   Error, r5
        ORRS    pc, r6, #VFlag

PoduleExit
  [  DebugCommands
        DLINE "Closing"
  ]
        MOV     r4, r7
        Pull    "r7-r11"
        MOV     r1, r4                                  ; Handle
        MOV     r0, #0                                  ; Close
        SWI     XOS_Find
  [  DebugCommands
        DLINE "OK"
  ]
        MOV     pc, r6

DoStarPoduleSave
        ;       Syntax: *PoduleSave <podule number> <filename> <size> [<offset>]
        MOV     r6, lr
        LDR     wp, [ r12 ]
        MOV     r5, r1                                  ; Number of arguments
        MOV     r1, r0                                  ; Command tail
        MOV     r0, #10                                 ; Base
        SWI     XOS_ReadUnsigned
        MOVVS   pc, r6
        MOV     r3, r2                                  ; Podule number as read in
        [ DebugCommands
        BREG    r3, "Podule # = &"
        ]
        MOV     r4, r1                                  ; Hold onto the name pointer
40                                                      ; Skip to the file name
        LDRB    r0, [ r1, #1 ] !
        TEQ     r0, #" "
        BEQ     %40
50                                                      ; Skip to spaces
        LDRB    r0, [ r1, #1 ] !
        TEQ     r0, #" "
        BNE     %50
        MOV     r0, #16
        SWI     XOS_ReadUnsigned
        MOVVS   pc, r6
        SUBS    r0, r5, #3                              ; Check for offset argument
        MOV     r5, r2                                  ; Save the size away
        [ DebugCommands
        DREG    r5, "Size = &"
        ]
        BEQ     %75                                     ; No argument
        MOV     r0, #16
        SWI     XOS_ReadUnsigned
        MOVVS   pc, r6
        MOV     r0, r2
75
        MOV     r1, r4                                  ; File name pointer
        MOV     r4, r0                                  ; Offset
        MOV     r0, #open_write :OR: open_mustopen :OR: open_nodir
        SWI     XOS_Find
        MOVVS   pc, r6
        MOV     r1, r4                                  ; Offset
        MOV     r4, r0                                  ; Handle
        [ DebugCommands
        BREG    r4, "File handle = &"
        ]
        DEC     sp, 16
        MOV     r2, sp
        SWI     XPodule_ReadHeader
        INC     sp, 16
        BVS     CloseExit
        [ DebugCommands
        DLINE   "Header read from podule"
        ]
        Push    "r0-r2"                                 ; save around call to ConvertR3ToPoduleNode
        BL      ConvertR3ToPoduleNode                   ; r3 on output = offset to podule node
        ADDVS   sp, sp, #3*4                            ; if error then junk stacked r0-r2
        BVS     CloseExit                               ; and exit
        Pull    "r0-r2"
        [ DebugCommands
        DREG    r3, "Podule node offset = &"
        ]
        MOV     r0, r5                                  ; The size
        ADD     r3, wp, r3                              ; Convert to address of podule node
        LDR     r5, [ r3, #PoduleNode_LoaderOffset ]    ; offset in workspace of loader
        TEQ     r5, #NIL                                ; TMD 16-Oct-91: test for NIL BEFORE adding on wp
        ADREQ   Error, ErrorBlock_NoLdr
        BLEQ    copy_error_zero                         ; Always sets the V bit
        BVS     CloseExit
        ADD     r5, wp, r5
        [ DebugCommands
        DREG    r5, "Address of loader = &"
        ]
        Push    "r7-r11"
        MOV     r7, r4
        ADD     r8, r0, r1                              ; The end address
        MOV     r9, r1                                  ; Offset
        LDR     r11, [ r3, #PoduleNode_CombinedAddress ]
 ; R5  = Call address
 ; R6  = Return address
 ; R7  = Handle
 ; R8  = End address
 ; R9  = Read address
 ; R10 = Trashable
 ; R11 = Hardware
30
        TEQ     r8, r9
        BEQ     PoduleExit                              ; All done
        MOV     r1, r9
        MOV     lr, pc
        MOV     pc, r5
        INC     r9
        BVS     PullCloseExit
        MOV     r1, r7
        SWI     XOS_BPut
        BVC     %30                                     ; Get some more
        B       PullCloseExit

        END
