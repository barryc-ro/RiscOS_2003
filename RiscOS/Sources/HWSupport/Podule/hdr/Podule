        SUBT    Exported Podule constants => &.Hdr.Podule

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 12-May-87  BC    Added DeviceType_Link to allow for adding ROMS
; 19-Jun-87  BC    Removed speed/access stuff
; 15-Sep-87  BC    Put in EXPORT of masking constants
;
; 20-Aug-87  BC    Left RawRead and RawWrite in permanently
; 10-May-88  BC    Added SWI Podule_HardwareAddress
; 11-Jan-91  TMD   Added SWI Podule_EnumerateChunksWithInfo
; 15-Jan-91  TMD   Added SWI Podule_HardwareAddresses
; 22-Mar-91  OSS   Added SWI Podule_ReturnNumber
; 28-Apr-93  BC    Added two new SWIs for Medusa
;
; 23-Jul-87  BC    Added DeviceType_PartNumber
; 15-Mar-90  BC    Added DeviceType_EthernetID, &F7
; 15-Mar-90  BC    Added DeviceType_HardwareRev, &F8
; 04-Mar-94  BC    Added DeviceType_ROMCRC
;
; 12-May-93  BC    Added reason codes for ReadInfo
; 23-Jun-93  BC    Added more reason codes for ReadInfo
; 23-Jun-93  BC    Changed partitioning of the combined address  *!*!*!*!*!*
; 30-Jun-93  BC    Added DeviceVector reason code for ReadInfo
; 05-Aug-93  BC    Added extra reason codes for ReadInfo
; 12-Jan-94  BC    Updated the reason codes for ReadInfo
; 20-Jan-94  BC    Added new reason codes (Ethernet) for ReadInfo
; 21-Jan-94  BC    Added new reason code Podule_ReadInfo_MEMC
;
; 05-Jan-94  BC    Changed masks to be 32 bit not 26 bit
; 18-Feb-94  BC    Changed symbol for SWI base
; 29-Jun-94  AMcC  Replaced "Podule" with PoduleSWI_Name 
; 29-Jun-94  AMcC  Removed Country codes (Country_) (no longer used)
; 29-Jun-94  AMcC  Moved Manufacturer codes (Manf_), Podule types (ProdType_)
;                  and Simple types (SimpleType_) to HdrSrc.Register.PoduleReg

SWIClass                SETS    PoduleSWI_Name
                        ^       PoduleSWI_Base

                        AddSWI  ReadID
                        AddSWI  ReadHeader
                        AddSWI  EnumerateChunks
                        AddSWI  ReadChunk
                        AddSWI  ReadBytes
                        AddSWI  WriteBytes
                        AddSWI  CallLoader
                        AddSWI  RawRead
                        AddSWI  RawWrite
                        AddSWI  HardwareAddress
                        AddSWI  EnumerateChunksWithInfo
                        AddSWI  HardwareAddresses
                        AddSWI  ReturnNumber
                        AddSWI  ReadInfo 
                        AddSWI  SetSpeed
PoduleSWICheckValue     *       @

 ; Bits for the reason code (R0) of SWI Podule_ReadInfo

Podule_ReadInfo_Number           *       1 :SHL: 0
Podule_ReadInfo_SyncBase         *       1 :SHL: 1
Podule_ReadInfo_CMOSAddress      *       1 :SHL: 2
Podule_ReadInfo_CMOSSize         *       1 :SHL: 3
Podule_ReadInfo_ROMAddress       *       1 :SHL: 4
Podule_ReadInfo_ID               *       1 :SHL: 5
Podule_ReadInfo_Type             *       1 :SHL: 6
Podule_ReadInfo_CombinedAddress  *       1 :SHL: 7
Podule_ReadInfo_Description      *       1 :SHL: 8
Podule_ReadInfo_EASILogical      *       1 :SHL: 9
Podule_ReadInfo_EASISize         *       1 :SHL: 10
Podule_ReadInfo_DMAPrimary       *       1 :SHL: 11
Podule_ReadInfo_DMASecondary     *       1 :SHL: 12
Podule_ReadInfo_IntStatus        *       1 :SHL: 13
Podule_ReadInfo_IntRequest       *       1 :SHL: 14
Podule_ReadInfo_IntMask          *       1 :SHL: 15
Podule_ReadInfo_IntValue         *       1 :SHL: 16
Podule_ReadInfo_IntDeviceVector  *       1 :SHL: 17
Podule_ReadInfo_FIQasIntStatus   *       1 :SHL: 18
Podule_ReadInfo_FIQasIntRequest  *       1 :SHL: 19
Podule_ReadInfo_FIQasIntMask     *       1 :SHL: 20
Podule_ReadInfo_FIQasIntValue    *       1 :SHL: 21
Podule_ReadInfo_FIQasIntDeviceVector *   1 :SHL: 22
Podule_ReadInfo_FIQStatus        *       1 :SHL: 23
Podule_ReadInfo_FIQRequest       *       1 :SHL: 24
Podule_ReadInfo_FIQMask          *       1 :SHL: 25
Podule_ReadInfo_FIQValue         *       1 :SHL: 26
Podule_ReadInfo_EthernetAddressLow *     1 :SHL: 27
Podule_ReadInfo_EthernetAddressHigh *    1 :SHL: 28
Podule_ReadInfo_EthernetAddress  *       3 :SHL: 27     ; Two bits => 48 bits
Podule_ReadInfo_MEMC             *       1 :SHL: 29
Podule_ReadInfo_30               *       1 :SHL: 30
Podule_ReadInfo_31               *       1 :SHL: 31


 ; The hardware address handed to loaders by the Podule manager consists of
 ; two parts, the Synchronous base address, and the CMOS base address.
 ; These two parts are combined into a single word as with the CMOS address
 ; (the first of four bytes) in the bottom 10 bits.  The remainder is the
 ; hardware address.
 ;
 ;  31                                    10 9               0
 ;  +---------------------------------------+----------------+
 ;  |  Hardware base address (Synchronous)  |  CMOS address  |
 ;  +---------------------------------------+----------------+
 ;
 ; So this means that entry points expecting the hardware base address
 ; should now mask the incoming register value;
 ;
 ;        LDR    Rmv, =2_00000000000000000000001111111111
 ;        BIC    Rba, Rha, Rmv
 ; OR
 ;        LDR    Rmv, =2_11111111111111111111110000000000
 ;        AND    Rba, Rha, Rmv
 ;
 ; To obtain the true base address, and they should also mask to obtain the
 ; CMOS address for use in R1 in the SWI XOS_Byte for ReadCMOS or WriteCMOS;
 ;
 ;        LDR    Rmv, =2_11111111111111111111110000000000
 ;        BIC    Rca, Rha, Rmv
 ; OR
 ;        LDR    Rmv, =2_00000000000000000000001111111111
 ;        AND    Rca, Rha, Rmv
 ;
 ; These four constants are exported below.

Podule_BaseAddressBICMask * 2_00000000000000000000001111111111
Podule_BaseAddressANDMask * 2_11111111111111111111110000000000

Podule_CMOSAddressBICMask * 2_11111111111111111111110000000000
Podule_CMOSAddressANDMask * 2_00000000000000000000001111111111

 ; Operating system identity bytes for load chunks
 ^ 2_10000000 ; OS=0, RISCOS
OSType_Loader           # 1     ; &80 The loader for the rest of the image
OSType_Module           # 1     ; &81 A Relocatable Module
OSType_BBCROM           # 1     ; &82 Use to support the ROM Card
OSType_Sprite           # 1     ; &83
OSType_File             # 1     ; &84 General get out mechanism

 ^ 2_10010000 ; OS=1, ARX
ARXType_Loader          # 1     ; &90

 ^ 2_10100000 ; OS=2, RISCiX
UnixType_Loader         # 1     ; &A0

 ^ 2_10110000 ; OS=3, Helios
HeliosType_Loader       # 1     ; &B0

 ^ 2_11110000 ; OS=7, Device data
DeviceType_Link         # 1     ; &F0 Used to link directory sections together
DeviceType_SerialNumber # 1     ; &F1
DeviceType_Date         # 1     ; &F2
DeviceType_Modification # 1     ; &F3
DeviceType_Place        # 1     ; &F4
DeviceType_Description  # 1     ; &F5
DeviceType_PartNumber   # 1     ; &F6
DeviceType_EthernetID   # 1     ; &F7
DeviceType_HardwareRev  # 1     ; &F8
DeviceType_ROMCRC       # 1     ; &F9

DeviceType_Empty        * &FF   ; Used to patch ROMS

        ASSERT @ <= DeviceType_Empty

        OPT     OldOpt
        END
