SWI DMA_RegisterChannel extended as follows:
  R0 bits 0-3 = post-transfer channel delay
  R0 bit 4 set => disable burst transfers
  R0 bit 5 set => disable DMA request synchronisation to clock
  R6 = peripheral read/receive physical address, or -1 to disallow reads
  R7 = peripheral write/transmit physical address, or -1 to disallow writes
  (R6,R7 ignored for IOMD implementations and memory-to-memory DMA, but
  otherwise required for L7200 and CL9200)

SWIs DMA_ClaimChannel and DMA_ReleaseChannel reinstated, but modified so
as to take the logical channel as a parameter and not returning any
information about the physical channel. These allow a logical channel to
temporarily gain sole use of a physical channel, typically to guarantee
reception of incoming data.

int HAL_DMAActivate(struct device *);
void HAL_DMADeactivate(struct device *);
void HAL_DMAReset(struct device *);
int HAL_DMASleep(struct device *, state);
int HAL_DMAClaim(struct device *, int intno, myfunc, handle);
void HAL_DMARelease(struct device *, int intno, myfunc, handle);
  Standard functions as defined in Docs.HAL.NewAPI
  Only intno=0 is implemented

unsigned int HAL_DMAFeatures(struct device *);
  First parameter is ignored
  Returns a flag word:
    all bits reserved, should be zero

__value_in_regs struct { struct device **channel, unsigned int count }
HAL_DMAEnumeratePhysical(struct device *);
  First parameter is ignored
  Returns a static list of available physical DMA channel HAL devices
  count may be 0 to indicate that no DMA facility is available

__value_in_regs struct { unsigned int *channel, unsigned int count }
HAL_DMAEnumerateLogical(struct device *);
  First parameter is ignored
  Returns a static list of logical DMA channels supported on the current
  hardware

struct device *HAL_DMAAllocate(struct device *, unsigned int channel);
  First parameter is ignored
  Returns pointer to the physical DMA channel struct to associate with the
  given logical DMA channel. If the hardware requires a particular logical-
  physical mapping, this will be obeyed; otherwise one will be allocated at
  the whim of the HAL (typically: physical channels grouped according to
  priority of logical channel, then within each group logical channels are
  allocated on a one-to-one mapping until no physical channels remain,
  after which logical channels are arbitrarily doubled up)
  Return value NULL => this logical channel not supported on this hardware

  DMA priorities:
    High: sound DMA
    Medium: other device DMA
    Low: memory-to-memory DMA

void HAL_DMADeallocate(struct device *, unsigned int channel);
  First parameter is ignored
  The partner of HAL_DMAAllocate(), this lets the HAL know that a
  particular logical channel is no longer being used

void HAL_DMASetSize(struct device *, unsigned int width);
  |width| is typically 1, 2 or 4 bytes (may be 16 for IOMD)

void HAL_DMASetSpeed(struct device *, unsigned int speed);
  |speed| is on an arbitrary scale from 0 (slowest) upwards
  Does nothing on L7200 or CL9200, but maps to A-D cycles for IOMD

void HAL_DMASetDirection(struct device *, unsigned int direction);
  direction = 0: device to memory
  direction = 1: memory to device
  Call is ignored by the memory-to-memory DMA channel

void HAL_DMASetAddress(struct device *, unsigned int address);
  Sets the physical address of the peripheral to DMA to/from
  Call is ignored by the memory-to-memory DMA channel

void HAL_DMASetDMARequest(struct device *, unsigned int channel);
  Takes the logical DMA channel number, and uses it to set the DMA request
  line that will control transfers
  Call is ignored by the memory-to-memory DMA channel

void HAL_DMASetBurstEnable(struct device *, unsigned int burst);
  burst = 0: disable burst transfers for this channel (if possible)
  burst = 1: enable burst transfers for this channel (if possible)

void HAL_DMASetSyncBypass(struct device *, unsigned int bypass);
  bypass = 0: synchronise request to clock before initiating transfer
  bypass = 1: disable synchronisation (for synchronous peripherals)
  Currently only has effect for L7200

void HAL_DMASetPostTransferDelay(struct device *, unsigned int gap);
  Sets the minimum delay required after a DMA transfer before the same
  physical channel is reused - required for L7200 and CL9200

void HAL_DMASetTransfer(struct device *, unsigned int address,
unsigned int length, unsigned int flags);
  This sets up the next transfer to be executed for this channel
  address = physical address to start transfer from
  length = number of bytes to transfer
  flags bit 0 set => stop when this transfer completes
  address and length should be multiples of the transfer unit size, and must
  not cross a page boundary

__value_in_regs struct { unsigned int address, unsigned int length }
HAL_DMATransferState(struct device *);
  This reads the progress of the current transfer on this channel

HAL_DMASetTransfer2() / HAL_DMATransferState2() are same as above but with two
address arguments and one length argument. For use in memory-to-memory
transfers only. DMA activity where the memory read has completed but the memory
write has not will not be counted as having occurred - this may involve
winding back the read address

void HAL_DMAIRQEnable(struct device *);
  Enables interrupt generation for this physical DMA channel

void HAL_DMAIRQDisable(struct device *);
  Disables interrupt generation for this physical DMA channel

void HAL_DMAIRQClear(struct device *);
  Clears the interrupt for this physical DMA channel (if necessary)

unsigned int HAL_DMAStatus(struct device *);
  Returns status bits for the current channel:
  bit 0 set => channel is attempting to raise an interrupt
  bit 1 set => channel is in over/underrun state

void HAL_DMAEnable(struct device *);
  Enables this physical DMA channel

void HAL_DMADisable(struct device *);
  Immediately ceases any active DMA on this channel and returns any state
  machine to its default state


struct dmachannel
{
  /* Public interface */

  struct device dev;
  unsigned int physical_channel; /* numbered from 0 upwards */
  /* List of public function pointers as described above */

  /* Private interface */

  struct dmacontroller *controller; /* stuff common to all channels */
  /* Addresses of all registers relevant to this channel */
}
