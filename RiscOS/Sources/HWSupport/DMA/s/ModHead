; > Sources.ModHead

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     Module_SWISystemBase + DMAManagerSWI * Module_SWIChunkSize
        DCD     SWIhandler     - Module_BaseAddr
        DCD     SWInames       - Module_BaseAddr
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     ModFlags       - Module_BaseAddr

;---------------------------------------------------------------------------
Title   DCB     "DMAManager",0
Helpstr DCB     "DMAManager",9,"$Module_HelpVersion",0
                ALIGN

ModFlags
      [ No32bitCode
        DCD     0
      |
        DCD     ModuleFlag_32bit
      ]

;---------------------------------------------------------------------------
;       Module initialisation point.
;
Init
        Entry

        Debug   mod,"Init"

        LDR     r2, [r12]                       ; Have we already got a workspace ?
        TEQ     r2, #0
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace.
        EXIT    VS

        STR     r2, [r12]                       ; Store workspace pointer.
01
        MOV     r12, r2

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_RegisterFiles
 ]
        BLVC    InitWS
        BLVC    InitHardware

        BLVS    ShutDown
        EXIT

;---------------------------------------------------------------------------
; InitWS
;
;       Out:    r0 corrupted
;
;       Initialise our workspace.
;
InitWS
        Entry   "r1,r2"

        Debug   mod,"InitWS"

        MOV     r0, #0                          ; Initialise workspace.
 [ international
        STR     r0, message_file_open
 ]
        STR     r0, DMABlockHead
        STR     r0, FreeBlock
        STR     r0, TagIndex
        STR     r0, UnsafePageTable
        STR     r0, UnsafePageCount

      [ HAL

        STR     r0, DMAQueues
        STR     r0, ChannelBlock                ; Don't free anything silly in error cases.
        STR     r0, VectorTramps

        CallHAL DMAEnumeratePhysical
        TEQ     r0, #0
        ADREQ   r0, ErrorBlock_DMA_BadHard
        PullEnv EQ
        DoError EQ                              ; Error if hardware doesn't do DMA.
        STR     r0, DMADevices
        STR     r1, PhysicalChannels
        ASSERT  DMAQSize=16
        MOV     r0, #ModHandReason_Claim        ; Create and initialise DMA queues.
        MOV     r3, r1, LSL #4
        SWI     XOS_Module
        EXIT    VS
        STR     r2, DMAQueues
        MOV     r4, #0
10      SUBS    r3, r3, #4
        STRCS   r4, [r2, r3]
        BCS     %BT10

        CallHAL DMAEnumerateLogical
        STR     r0, LogicalList
        STR     r1, LogicalChannels
        ASSERT  LCBSize=32
        MOV     r0, #ModHandReason_Claim        ; Create and initialise logical channel table.
        MOV     r3, r1, LSL #5
        SWI     XOS_Module
        EXIT    VS
        STR     r2, ChannelBlock
20      SUBS    r1, r1, #1
        STRCS   r4, [r2], #LCBSize
        BCS     %BT20
        ; V will be clear

      |

        ADR     r1, ChannelBlock + lcb_Flags    ; Initialise logical channel table.
        MOV     r2, #NoLogicalChannels
10
        SUBS    r2, r2, #1
        STRCS   r0, [r1], #LCBSize              ; Initialise all lcb_Flags to 0.
        BCS     %BT10

        ADR     r1, DMAQueues                   ; Initialise DMA queues.
        MOV     r2, #NoPhysicalChannels * DMAQSize / 4
20
        SUBS    r2, r2, #1
        STRCS   r0, [r1], #4                    ; Zero all pointers.
        BCS     %BT20

      ]

 [ debugtab
        MOV     r0, #0
        DebugTabInit r0,r1,lr
        Debug   tab,"Debug table at",r1
 ]

        EXIT

;---------------------------------------------------------------------------
; InitHardware
;
;       Out:    r0 corrupted
;     [ HAL
;               r1-r6 corrupted
;     ]
;
;       Initialise DMA hardware.
;
InitHardware
      [ HAL
        Entry
        ; Check for bad hardware now done in InitWS
        LDR     r4, DMADevices
        LDR     r5, PhysicalChannels
01      LDR     r0, [r4], #4
        CallHAL DMAActivate
        SUBS    r5, r5, #1
        BGT     %BT01
      |
        Entry   "r1,r2"

        MOV     r0, #2                          ; Read system information.
        SWI     XOS_ReadSysInfo
        EXIT    VS
        AND     r0, r0, #&0000FF00
        TEQ     r0, #&00000100                  ; If no IOMD
        ANDEQS  r2, r2, #&0000FF00              ;   or IOMD variant does not support DMA
        ADRNE   r0, ErrorBlock_DMA_BadHard      ; then return error.
        PullEnv NE
        DoError NE

        IOMDBase r1

        IRQOff  r2, lr
        LDRB    r0, [r1, #IOMD_DMAMSK]          ; Disable all but sound channels.
        BIC     r0, r0, #IOMD_DMA_IO0 :OR: IOMD_DMA_IO1 :OR: IOMD_DMA_IO2 :OR: IOMD_DMA_IO3
        STRB    r0, [r1, #IOMD_DMAMSK]
        SetPSR  lr

        MOV     r0, #&0C                        ; Channels 2 and 3 are external peripherals.
        STRB    r0, [r1, #IOMD_DMAEXT]
      ]

        BL      ClaimVectors

        EXIT

        MakeErrorBlock  DMA_BadHard

;---------------------------------------------------------------------------
; ClaimVectors
;
;       Out:    r0 corrupted
;     [ HAL
;               r1-r6 corrupted
;     ]
;
;       Claim device vectors for DMA interrupts.
;
ClaimVectors
      [ HAL
        Entry
        ; Create an array of trampolines
        LDR     r4, DMADevices
        LDR     r5, PhysicalChannels
        MOV     r0, #ModHandReason_Claim
        MOV     r3, r5, LSL #3
        ADD     r3, r3, #4                      ; size of block is 2*PhysicalChannels+1 words
        SWI     XOS_Module
        EXIT    VS
        STR     r2, VectorTramps

        ADR     lr, DMAInterruptCommon          ; first word is address of common IRQ handler
        STR     lr, [r2], #4
        MOV     r6, r2                          ; r6 = base address for IRQ handlers
        MOV     r3, r5
        LDR     r0, =&E3A02000                  ; MOV R2, #0
        LDR     r1, =&E51FF010                  ; LDR PC, [PC, #-16]
01      STMIA   r2!, {r0,r1}
        ADD     r0, r0, #1                      ; increment constant to assign to R2
        ADD     r1, r1, #8                      ; PC-relative address is 8 bytes more distant
        SUBS    r3, r3, #1
        BGT     %BT01

        ; Synchronise code areas for trampolines
        MOV     r0, #1
        MOV     r1, r6
        SUB     r2, r2, #4
        SWI     XOS_SynchroniseCodeAreas

        ; Claim device vectors
01      LDR     r0, [r4], #4                    ; r0 -> HAL device
        MOV     r1, #0                          ; r1 = interrupt number (always 0)
        MOV     r2, r6                          ; r2 -> trampoline
        MOV     r3, r12                         ; r3 = module ws ptr
        CallHAL DMAClaim
        ADD     r6, r6, #2*4                    ; point at next trampoline
        SUBS    r5, r5, #1
        BGT     %BT01
        ; V will be clear

        EXIT
      |
        Entry   "r1,r2"

        MOV     r0, #IOMD_DMAChannel0_DevNo
        ADRL    r1, DMAInterruptChannel0
        MOV     r2, r12
        SWI     XOS_ClaimDeviceVector

        MOVVC   r0, #IOMD_DMAChannel1_DevNo
        ADRVCL  r1, DMAInterruptChannel1
        SWIVC   XOS_ClaimDeviceVector

        MOVVC   r0, #IOMD_DMAChannel2_DevNo
        ADRVCL  r1, DMAInterruptChannel2
        SWIVC   XOS_ClaimDeviceVector

        MOVVC   r0, #IOMD_DMAChannel3_DevNo
        ADRVCL  r1, DMAInterruptChannel3
        SWIVC   XOS_ClaimDeviceVector

        EXIT
      ]

;---------------------------------------------------------------------------
; ReleaseVectors
;
;       Out:    all registers preserved
;
;       Release device vectors for DMA interrupts.
;
ReleaseVectors
        Entry   "r0-r2"

        MOV     r0, #IOMD_DMAChannel0_DevNo
        ADRL    r1, DMAInterruptChannel0
        MOV     r2, r12
        SWI     XOS_ReleaseDeviceVector

        MOV     r0, #IOMD_DMAChannel1_DevNo
        ADRL    r1, DMAInterruptChannel1
        SWI     XOS_ReleaseDeviceVector

        MOV     r0, #IOMD_DMAChannel2_DevNo
        ADRL    r1, DMAInterruptChannel2
        SWI     XOS_ReleaseDeviceVector

        MOV     r0, #IOMD_DMAChannel3_DevNo
        ADRL    r1, DMAInterruptChannel3
        SWI     XOS_ReleaseDeviceVector

        EXIT

;---------------------------------------------------------------------------
;       Service handler.
;
ServiceTable
        DCD     0                          ; flags
        DCD     Service2 - Module_BaseAddr
        DCD     Service_Reset              ; &27
      [ HAL
        DCD     Service_PreReset           ; &45
      ]
 [ standalone
        DCD     Service_ResourceFSStarting ; &60
 ]
        DCD     Service_PagesUnsafe        ; &8E
        DCD     Service_PagesSafe          ; &8F
        DCD     0                          ; terminator

        DCD     ServiceTable - Module_BaseAddr
Service
        MOV     r0, r0
        TEQ     r1, #Service_Reset
      [ HAL
        TEQNE   r1, #Service_PreReset
      ]
 [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
 ]
        TEQNE   r1, #Service_PagesUnsafe
        TEQNE   r1, #Service_PagesSafe
        MOVNE   pc, lr

Service2
        LDR     r12, [r12]

        TEQ     r1, #Service_PagesUnsafe
        BEQ     DMAPagesUnsafe
        TEQ     r1, #Service_PagesSafe
        BEQ     DMAPagesSafe
 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        BNE     %FT10
        Entry   "r0-r3"
        ADR     r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
        EXIT
10
 ]
      [ HAL
        TEQ     r1, #Service_PreReset
        BNE     %FT10

        Entry   "r0-r5"
        LDR     r4, DMADevices
        LDR     r5, PhysicalChannels
01      LDR     r0, [r4], #4
        CallHAL DMAReset
        SUBS    r5, r5, #1
        BGT     %BT01
        EXIT
10
      ]

        Debug   mod,"Service_Reset"

        Entry   "r0-r2"
        MOV     r0, #&FD                        ; Read last reset type.
        MOV     r1, #0
        MOV     r2, #&FF
        SWI     XOS_Byte
        TEQ     r1, #0
        EXIT    NE                              ; Do nothing if hard reset.

        Debug   mod," soft"

        BL      FreePageTables
        BL      FreeBuffers
        BL      InitWS
        EXIT

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        Entry

        Debug   mod,"Die"

        LDR     r12, [r12]
        CMP     r12, #0
        EXIT    EQ

        BL      ShutDown

        CLRV
        EXIT

;---------------------------------------------------------------------------
; ShutDown
;
;       Out:    preserves all registers and flags
;
;       Tidy up before dying.
;
ShutDown
        Entry   "r0,r2"

        Debug   mod,"Shutdown"

        BL      DeregisterChannels
        BL      FreeBuffers

        BL      ReleaseVectors

      [ HAL
        LDR     r2, ChannelBlock
        TEQ     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module

        LDR     r2, DMAQueues
        TEQ     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
      ]

 [ international
        LDR     r0, message_file_open           ; Close the message file if it's open.
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
 ]

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
 ]

        SETV
        EXIT                                    ; Flags ignored by Die, V must be set for Init

;---------------------------------------------------------------------------
;       Deregister all registered logical DMA channels, purge their queues
;       and free any page tables.
;
DeregisterChannels
        Entry   "r6-r8"

        MOV     r6, #NoLogicalChannels
        MOV     r7, #-1                         ; On DMAPurge calls do not start new transfers.
        ADR     r8, ChannelBlock-LCBSize
10
        SUBS    r6, r6, #1                      ; If no more channels to do then
        EXIT    CC                              ;   exit.

        ADD     r8, r8, #LCBSize
        LDR     lr, [r8, #lcb_Flags]
        TST     lr, #lcbf_Registered            ; If this channel has not been registered then
        BEQ     %BT10                           ;   try next.
        MOV     lr, #0                          ; Mark channel as no longer registered.
        STR     lr, [r8, #lcb_Flags]
        BL      DMAPurge                        ; Purge the queue of requests for this channel.
        B       %BT10

;---------------------------------------------------------------------------
;       Free any page tables attached to DMA requests.
;
FreePageTables
        Entry   "r0-r2,r9,r10"

        MOV     r1, #NoPhysicalChannels
        ADR     r9, DMAQueues-DMAQSize
10
        SUBS    r1, r1, #1
        EXIT    CC

        ADD     r9, r9, #DMAQSize
        LDR     r10, [r9, #dmaq_Head]
        TEQ     r10, #0
        BEQ     %BT10
20
        LDR     r2, [r10, #dmar_PageTable]
        TEQ     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
        LDR     r10, [r10, #dmar_Next]
        TEQ     r10, #0
        BNE     %BT20
        B       %BT10

;---------------------------------------------------------------------------
;       Free DMA request block buffers.
;
FreeBuffers
        Entry   "r0-r2"
        LDR     r2, DMABlockHead                ; Free all DMA request block buffers.
10
        TEQ     r2, #0
        EXIT    EQ
        LDR     r1, [r2, #block_Next]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        MOV     r2, r1
        B       %BT10
        EXIT

        END
