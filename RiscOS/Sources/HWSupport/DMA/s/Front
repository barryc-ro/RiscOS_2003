; > Sources.Front

;-----------------------------------------------------------------------------
;       Structures and declarations.
;

NoLogicalChannels       * 7
NoPhysicalChannels      * 6

; Logical channel block.
                        ^ 0
lcb_Flags               # 4                     ; Logical channel flags (see below).
lcb_Vector              # 4                     ; Pointer to 4 routine addresses.
lcb_R12                 # 4                     ; Value to pass in r12.
lcb_Queue               # 4                     ; Pointer to DMA queue.
lcb_Physical            # 4                     ; Physical channel number.

LCBSize                 * :INDEX:@

; Logical channel flags.
lcbf_TransferSize       * &0000001F             ; Mask off DMA transfer size.
lcbf_DMASpeed           * &00000060             ; Mask off DMA cycle speed.
lcbf_Blocked            * &40000000             ; Logical channel blocked.
lcbf_Registered         * &80000000             ; Logical channel has been registered.

; Vector offsets.
                        ^ 0
vector_Enable           # 4                     ; Called to enable device DMA.
vector_Disable          # 4                     ; Called to disable device DMA.
vector_Start            # 4                     ; Called before a DMA is started.
vector_Completed        # 4                     ; Called when a DMA is completed.
vector_DMASync          # 4                     ; Called after every N bytes transferred.

; Physical channel DMA queue.
                        ^ 0
dmaq_Head               # 4                     ; Pointer to DMA queue head.
dmaq_Tail               # 4                     ; Pointer to DMA queue tail.
dmaq_Active             # 4                     ; Pointer to DMA active on physical channel.
dmaq_LastBuff           # 4                     ; Pointer to last buffer programmed.

DMAQSize                * :INDEX:@

; Data held for a programmed buffer.
                        ^ 0
buff_Ptp                # 4                     ; Pointer to page table entry.
buff_Off                # 4                     ; Offset into scatter list entry.
buff_Len                # 4                     ; Length of transfer.

BuffDataSz              * :INDEX:@

; DMA request block.
                        ^ 0
dmar_Tag                # 4                     ; DMA tag.
dmar_PhysBits           * &00000007             ; Bottom 3 bits of tag hold physical channel number.
dmar_Prev               # 4                     ; Pointer to previous DMA request in queue.
dmar_Next               # 4                     ; Pointer to next DMA request in queue.
dmar_Flags              # 4                     ; DMA request flags (see below).
dmar_R11                # 4                     ; Value to be passed in r11.
dmar_ScatterList        # 4                     ; Scatter list pointer.
dmar_Length             # 4                     ; Length of transfer left (in bytes).
dmar_BuffSize           # 4                     ; Size of circular buffer (if used).
dmar_SyncGap            # 4                     ; Number of bytes between DMASync calls (if used).
dmar_Done               # 4                     ; Amount of transfer done.
dmar_LCB                # 4                     ; Pointer to logical channel block.
dmar_PageTable          # 4                     ; Pointer to page table.
dmar_PageCount          # 4                     ; Number of entries in page table.
dmar_BuffA              # BuffDataSz            ; Data programmed into buff A.
dmar_BuffB              # BuffDataSz            ; Data programmed into buff B.
dmar_BuffLen            # 4                     ; Amount of circular buffer left (if used).
dmar_ProgGap            # 4                     ; Amount of gap left to program (if used).
dmar_Gap                # 4                     ; Amount of gap completed (if used).

DMARSize                * :INDEX:@

; DMA request flags.
dmarf_Direction         * &00000001             ; Direction bit (0=read, 1=write).
dmarf_Circular          * &00000002             ; Scatter list is a circular buffer.
dmarf_Sync              * &00000004             ; Call DMASync callback.
dmarf_Infinite          * &00000008             ; Transfer is infinite length (must be circular).
dmarf_Uncacheable       * &04000000             ; Pages for transfer have been marked as uncacheable.
dmarf_Halted            * &08000000             ; Transfer has been halted due to Service_PagesUnsafe.
dmarf_Blocking          * &10000000             ; DMA request blocking logical queue.
dmarf_BeenActive        * &20000000             ; DMA request has been active before.
dmarf_Suspended         * &40000000             ; DMA request suspended.
dmarf_Completed         * &80000000             ; DMA request has completed.

; Free block.
                        ^ 0
free_Next               # 4                     ; Pointer to next free block.
free_Size               # 4                     ; Size of this free block.

; DMA request buffer block.
                        ^ 0
block_Next              # 4                     ; Pointer to next DMA request buffer block.
block_Data              # NoPhysicalChannels * DMARSize

BlockSize               * :INDEX:@

IOMD_IOxCURA            * IOMD_IO0CURA-IOMD_IO0CURA
IOMD_IOxENDA            * IOMD_IO0ENDA-IOMD_IO0CURA
IOMD_IOxCURB            * IOMD_IO0CURB-IOMD_IO0CURA
IOMD_IOxENDB            * IOMD_IO0ENDB-IOMD_IO0CURA
IOMD_IOxCR              * IOMD_IO0CR-IOMD_IO0CURA
IOMD_IOxST              * IOMD_IO0ST-IOMD_IO0CURA

PAGESHIFT       * 12
PAGESIZE        * 1:SHL:PAGESHIFT

; Page table entry.
                        ^ 0
ptab_Len                # 4                     ; Length of transfer in this page.
ptab_Logical            # 4                     ; Logical address to start transfer.
ptab_Physical           # 4                     ; Corresponding physical address.

PTABSize                * :INDEX:@

ptabf_Unsafe            * &80000000             ; Combined with ptab_Len to mark a page as unsafe.

Memory_LogicalGiven     * 1:SHL:9               ; OS_Memory flags.
Memory_PhysicalGiven    * 1:SHL:10
Memory_PhysicalWanted   * 1:SHL:13
Memory_SetUncacheable   * 2:SHL:14
Memory_SetCacheable     * 3:SHL:14

;-----------------------------------------------------------------------------
;       Workspace layout.
;
workspace       RN      R12
                ^       0,workspace
wsorigin                # 0
 [ international
message_file_open       # 4                             ; Non-0 => message file open.
message_file_block      # 4*4                           ; Message file id block.
 ]
ChannelBlock            # NoLogicalChannels * LCBSize   ; Logical channel blocks.
DMAQueues               # NoPhysicalChannels * DMAQSize ; DMA queue information.
FreeBlock               # 4                             ; Pointer to linked list of free blocks.
DMABlockHead            # 4                             ; Pointer to list of DMA request block buffers.
TagIndex                # 4                             ; Index for generating DMA request tags.
UnsafePageTable         # 4                             ; Pointer to 3-word per entry table of unsafe pages.
UnsafePageCount         # 4                             ; Number of entries in UnsafePageTable.
 [ :LNOT: IOMD
IOMDFirst               * IOMD_DMATCR
IOMDArea                # IOMD_DMAMSK-IOMDFirst+4
 ]
 [ debugtab
DebugTableCur           # 4
DebugTable              # 1024
DebugTableEnd           # 0
 ]

max_running_work   *       :INDEX:@

        ! 0, "DMA module workspace is ":CC:(:STR:(:INDEX:@)):CC:" bytes"

        END

