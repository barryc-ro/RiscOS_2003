; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : main
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : Dec 1995
;    Description  : Handle usual module stuff
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; Description of how the workspace is to be used
                         	^ 0, wp
ExpansionCardBaseAddress 	# 4		; set by hardware_claim
EASISpaceBaseAddress		# 4		; set by hardware_claim
FPGABaseAddress			# 4		; set by hardware_claim
MatchMaskStart			# 4		; set by hardware_claim
BufferStart			# 4		; set by hardware_claim
InputControl			# 4		; input control register
PacketCounter			# 4		; number of requested packets
APacketCounter			# 4		; actual A packet counter
BPacketCounter			# 4		; actaul B packet counter
OverrunCount			# 4		; count of DVB overrun errors
BankACount			# 4		; count of bank A interrupts
BankBCount			# 4		; count of bank B interrupts
DescriptorA			# 4		; MPEG buffer descriptor pointer
DescriptorB			# 4		; MPEG buffer descriptor pointer
MPEGControlStream		# 4		; from MPEGControl_OpenStream
StreamFlags			# 4		; flags passed to OpenStream, ResetStream
Flags				# 4		; general module flags
 [ dump_counting
MPEGDescDump			# 4		; count of dumped descriptors
ReleaseCount			# 4
 ]
workspace               	* :INDEX: @

; Bit definitions for Flags
flag_OwnIRQ             	* 1:SHL:0       ; set => IRQ owned for device
flag_DescriptorABusy		* 1:SHL:1
flag_DescriptorBBusy		* 1:SHL:2
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

module          & 0
                & init    -module               ; => initalise routine
                & final   -module               ; => finalise routine
                & service -module               ; => service trap

                & title -module                 ; => title string
                & help  -module                 ; => help string
                & command_table-module		; => command table

                & DVBControlSWI_Base		; => SWI base chunk
                & swi_handler  -module		; => code to handle swi calls
                & swi_table    -module		; => table of supported SWIs
                & 0

title           = "DVBControl", 0

 [ debug
help            = "DVBControl", 9, "$VString ($Date) © Online Media (Debug on)", 0
 |
help            = "DVBControl", 9, "$VString ($Date) © Online Media", 0
 ]

swi_table       = "DVBControl", 0
                = "MatchMask", 0
		= "MatchMaskDisable", 0
		= "OpenStream", 0
		= "CloseStream", 0
		= "PacketCounter", 0
		= "ResetStream", 0
                = 0
		ALIGN

command_table   = "DVBInfo", 0
		ALIGN
		DCD	dvbinfo_command -module
		DCD	0
		DCD	DVBInfo_Syntax -module
		DCD	DVBInfo_Help   -module
		&	0

DVBInfo_Help    = "*DVBInfo will display internal statistics", 13
DVBInfo_Syntax  = "Syntax: *DVBInfo", 0


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ debug
Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
Debug_Module	SETL	False
Debug_File      SETS	"$.Debug"
 ]
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Globals
dvbinfo_message   = "DVBInfo",0
dvbinfo_overrun   = "   DVB overruns       : ",0
dvbinfo_bank_a    = "   Bank A interrupts  : ",0
dvbinfo_bank_b    = "   Bank B interrupts  : ",0
dvbinfo_packet    = "   Packet counter     : ",0
 [ dump_counting
dvbinfo_desc      = "   MPEG desc. chucked : ",0
dvbinfo_release   = "   Desc. releases     : ",0
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Error declarations
                MakeErrorBlock DVB_BadSWI
		MakeErrorBlock DVB_BadPacketCount
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;
init            ENTRY	"r7-r11"

                LDR     r2, [r12]		; r2 = &wp
                TEQ     r2, #0                  ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace          ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                      ; return if didn't work

                STR     r2, [wp]		; wp = r2
10
                MOV     wp, r2                  ; wp -> workspace

 [ debug
		DLINE	"init"
 ]

                MOV     r0, #0
		STR	r0, ExpansionCardBaseAddress
		STR	r0, EASISpaceBaseAddress
		STR	r0, FPGABaseAddress
		STR	r0, MatchMaskStart
		STR	r0, BufferStart
		STR	r0, InputControl
		STR	r0, OverrunCount
		STR	r0, BankACount
		STR	r0, BankBCount
                STR     r0, Flags
		STR	r0, PacketCounter
		STR	r0, DescriptorA
		STR	r0, DescriptorB
		STR	r0, MPEGControlStream
		STR	r0, StreamFlags
 [ dump_counting
		STR 	r0, MPEGDescDump
		STR	r0, ReleaseCount
 ]

		BL	hardware_initialise
		BL	hardware_disable_all_matches

		BL	claim_descriptor
		STRVC	r0, DescriptorA
		BLVC	claim_descriptor
		STRVC	r0, DescriptorB

		BLVC 	hardware_claim

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           ENTRY	"r7-r11"

                LDR     wp, [r12]               ; wp -> workspace
 [ debug
		DLINE	"final"
 ]
		BL	hardware_remove		; release any owned IRQs

; free the MPEG descriptors
		MOV     r0, #ModHandReason_Free		; free area
		LDR	r2, DescriptorA
                SWI     XOS_Module
		MOV     r0, #ModHandReason_Free		; free area
		LDR	r2, DescriptorB
              	SWI     XOS_Module

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;
; Quickly test to see if they are of interest to use and pass on.

service         ROUT
		TEQ	r1, #Service_PreReset
                MOVNES  pc, lr

                LDR     wp, [r12]		; sort the workspace pointer out

		TEQ	r1, #Service_PreReset	; entry into standby state
		BEQ	hardware_remove		; detach ourselves from IRQs
                MOVS  	pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle the despatch of SWIs within the system, this simply involves resolving
; the private word pointer and then range checking the specified values. If the
; SWI number is out of range, return the appropriate error message
;
swi_handler	ROUT
                LDR     wp, [r12]      		; wp -> workspace

		CMP	r11, #(%30-%20)/4       ; check modulo swi number
		ADDCC	pc, pc, r11, LSL #2	; dispatch if in range
		B	%30
20
                B     	swi_match_mask		; DVBControl_MatchMask
		B	swi_match_mask_disable	; DVBControl_MatchMaskDisable
		B	swi_open_stream		; DVBControl_OpenStream
		B	swi_close_stream	; DVBControl_CloseStream
		B	swi_packet_counter	; DVBControl_PacketCounter
		B	swi_reset_stream	; DVBControl_ResetStream
30
                ADR     r0, ErrorBlock_DVB_BadSWI

		MOV	pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; claim_descriptor
;
; routine to claim memory for MPEG descriptor blocks. Will initialise block.
;
; in -
;
; out - r0 : descriptor pointer
claim_descriptor ENTRY "r1-r3"

; claim MPEG descriptor area
		MOV     r0, #ModHandReason_Claim	; claim area
                LDR     r3, =BufferDescriptorSize	; size
                SWI     XOS_Module
		EXITS	VS

; initialise the descriptor
		MOV	r0, #0
		STR	r0,  [r2, #BufferDescriptor_Link]
		STR	r0,  [r2, #BufferDescriptor_Start]
		STR	r0,  [r2, #BufferDescriptor_Length]
		STR	r0,  [r2, #BufferDescriptor_Packets]

		ADRL	r0,  descriptor_release
		STR	r0,  [r2, #BufferDescriptor_FreeRoutine]
		STR	r12, [r2, #BufferDescriptor_FreeWorkspace]
		MOV	r0, r2
		EXIT
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command DVBInfo
;
dvbinfo_command	ENTRY
                LDR     wp, [r12]   		; wp -> workspace

		ADRL	r0, dvbinfo_message	; DVBInfo
		SWI	XOS_Write0
		SWI	XOS_NewLine

		ADRL	r0, dvbinfo_overrun	;    Overrun count     :
		SWI	XOS_Write0		; write message
		LDR	r0, OverrunCount	; load value of count
		BL	Show_Integer		; display value
		SWI	XOS_NewLine		; write a new line

		ADRL	r0, dvbinfo_bank_a	;    Bank A interrupts :
		SWI	XOS_Write0
		LDR	r0, BankACount
		BL	Show_Integer
		SWI	XOS_NewLine

		ADRL	r0, dvbinfo_bank_b	;    Bank B interrupts :
		SWI	XOS_Write0
		LDR	r0, BankBCount
		BL	Show_Integer
		SWI	XOS_NewLine
 [ dump_counting
		ADRL	r0, dvbinfo_desc
		SWI	XOS_Write0
		LDR	r0, MPEGDescDump
		BL	Show_Integer
		SWI	XOS_NewLine

		ADRL	r0, dvbinfo_release
		SWI	XOS_Write0
		LDR	r0, ReleaseCount
		BL	Show_Integer
		SWI	XOS_NewLine
 ]
		ADRL	r0, dvbinfo_packet
		SWI	XOS_Write0
		LDR	r0, PacketCounter
		BL	Show_Integer
		SWI	XOS_NewLine
		EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Following routine taken unashamadly from the debug include file. Writes an
; integer to the screen.
;
; in:
;    r0 - value to be displayed

Show_Integer
        Push    "r1-r2, lr"
        SUB     r13, r13, #16
        MOV     r1, r13
        MOV     r2, #16
        SWI     XOS_ConvertInteger4
        SWIVC	OS_Write0
        ADD     r13, r13, #16
        Pull    "r1-r2, pc",,^

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
