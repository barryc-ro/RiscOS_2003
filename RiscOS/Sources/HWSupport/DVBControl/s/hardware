; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : hardware
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : Dec 1995
;    Description  : Hardware initialisation and hardware reset.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

podule_number		* 2		; podule number to be used on Roadster
podule_offset		* podule_number:SHL:24
fpga_offset		* &800000
easi_space_base		* &88000000

			^ 0, r11
DVB_irq_source		# 4		; Read - interrupt source
DVB_fiq_source		# 4		; Read - interrupt source
DVB_irq_mask		# 4		; Write - irq interrupt mask
DVB_fiq_mask		# 4		; Write - fiq interrupt mask
DVB_int_latch		# 4		; Write - interrupt latch
DVB_raw_interrupt	# 4		; Raw interrupt
DVB_timestamp		# 4		; Read - 90kHz timestamp
DVB_dummy1		# 4
DVB_input_control	# 4		; Write - control bits
DVB_a_address		# 4		; Write - A address pointer
DVB_a_counter		# 4		; Write - A packet counter
DVB_b_address		# 4		; Write - B address pointer
DVB_b_counter		# 4		; Write - B packet counter
DVB_header_select	# 4		; Write - header selector
DVB_processing		# 4		; Write - set to 1 to start processing
DVB_interrupt_enable	# 4		; Write - set to 1 to enable interrupts

DVB_buffer_start	* &C00000       ; Base for the dual bank buffer
DVB_match_mask_start	* &C80000-&100 	; Base for the match mask values

invert_clock_bit	* 1:SHL:0
invert_start_bit	* 1:SHL:1
invert_rss_bit		* 1:SHL:6
tei_bit			* 1:SHL:7

packet_counter_a	* 1:SHL:0
packet_counter_b	* 1:SHL:1
rssync			* 1:SHL:2
internal_overrun	* 1:SHL:3

interrupt_mask		* packet_counter_a :OR: packet_counter_b :OR: internal_overrun

buffer_a_start     	* &0		; Start of RAM
buffer_b_start     	* &FFE0		; Mid RAM
max_packet_counter     	* &0554		; Number of packets to stuff in bank
init_packet_counter	* 1		; Just one packet initially (for low frequency stuff such as PAT, PMT)

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_initialise
;
hardware_initialise ENTRY "r0-r3, r11"

 [ debug
   		DLINE	"hardware_initialise"
 ]
; Find the start address of easi space
		MOV	r0, # 1:SHL:9 			; get EASI space address
		ADR 	r1, EASISpaceBaseAddress	; stash results here
		MOV	r2, #4				; 4 bytes for results
		MOV	r3, #0				; look at podule 0
		SWI	XPodule_ReadInfo
		LDRVS	r0, =easi_space_base		; default on error
		STRVS	r0, EASISpaceBaseAddress

; Work out the address of the UART, if loaded from podule r11 = i/o base
; address, otherwise 0
		TEQ	r11, #0				; if r11 = 0, Z=1
		BEQ	%5				; r11 = 0

; we are not loaded from podule therefore work out the hardware addresses from
; scratch, assuming podule 1
		MOV	r0, # 1:SHL:9			; get EASI space address
		ADR 	r1, ExpansionCardBaseAddress	; stash results here
		MOV	r2, #4				; 4 bytes for results
		MOV	r3, r11				; use i/o base address
		SWI	XPodule_ReadInfo
		BVC	%10

; calculate base address for default podule by adding to EASI space base address
5
		LDR	r11, EASISpaceBaseAddress
		ADD	r11, r11, #podule_offset
		STR	r11, ExpansionCardBaseAddress	; store actual address
10
 [ debug
		DREG	r11, "  Expansion card base address "
 ]
		LDR	r0, =fpga_offset	; load the hardware offset
		ADD	r0, r11, r0
		STR	r0, FPGABaseAddress	; stash away for safe keeping
 [ debug
		DREG	r0, "  FPGA base address "
 ]
		LDR	r0, =DVB_match_mask_start
		ADD	r0, r11, r0
		STR	r0, MatchMaskStart
 [ debug
		DREG	r0, "  Match mask start "
 ]
		LDR	r0, =DVB_buffer_start
		ADD	r0, r11, r0
		STR	r0, BufferStart
 [ debug
		DREG	r0, "  Buffer start "
 ]
; Set the expansion card timing to type C (fastest). We don't use the proper
; SWI here as our podule will not be recognised by the podule manager.
; Need to work out the podule number from first principles ie, from EASI space
; address as code might be on an EPROM and therefore not in the specified podule
; slot.

		LDR	r0, EASISpaceBaseAddress
		LDR	r1, ExpansionCardBaseAddress

		SUB	r1, r1, r0		; work out podule offset
		MOV	r1, r1, LSR #24		; work out podule number
		MOV	r0, #1			; set 1st bit to start mask
		MOV	r0, r0, LSL r1		; calculate mask
                LDR     r1, =IOC		; lets look at IOC
		LDR	r2, =IOMD_ECTCR		; expansion card speed register

		LDR	r3, [r1,r2]		; load content of speed register
		ORR	r3, r3, r0		; mask on podule bit
		STR	r3, [r1,r2]		; store back in IOMD

; Now for the rest of the stuff
                LDR     r11, FPGABaseAddress	; look at the FPGA registers

		MOV	r0, #0
		STR	r0, DVB_header_select
; input control flags
		MOV	r0, #invert_clock_bit:OR:invert_start_bit:OR:tei_bit
		STR	r0, DVB_input_control	; stash in register
		STR	r0, InputControl	; store soft copy in workspace

; setup the packet counter registers and soft copies
		LDR	r0, =init_packet_counter ; initialise the packet counters
		STR	r0, PacketCounter	; stash copy in workspace
		STR	r0, APacketCounter	; store actual copies
		STR	r0, BPacketCounter
		SUB	r0, r0, #1		; number of packets = +1
		STR	r0, DVB_a_counter
		STR	r0, DVB_b_counter

; setup the buffer pointers
		LDR	r0, =buffer_a_start	; packet buffer pointers
		STR	r0, DVB_a_address
		LDR	r0, =buffer_b_start
		STR	r0, DVB_b_address

; now the interrupts

; first clear any interrupts which may have been latched due to A & B flip-flops not being reset on startup
; this must be done after the packet counters have been written to actually clear the flip-flops
; Note interrupts are not *actually* fully enabled until hardware_claim, which sets the global interrupt_enable
; register.

		MOV	r0, #interrupt_mask	; interrupts we want
		STR	r0, DVB_int_latch	; clear any pending interrupts
		STR	r0, DVB_irq_mask	; then enable these in the mask
		MOV	r0, #0			; and we don't care about FIQs
		STR	r0, DVB_fiq_mask

		EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_claim
;
hardware_claim  ENTRY	"r0-r4, r11"

 [ debug
   		DLINE	"hardware_claim"
 ]

; Code to claim device vector sitting on expansion bus.
                LDR     r3, Flags               ; do we own the IRQ vector?
                TST     r3, #flag_OwnIRQ
                BNE     %FT30                   ; yes, then skip

                LDR     r11, FPGABaseAddress	; look at the FPGA registers
                MOV     r0, #Podule_DevNo	; expansion card interrupt
                ADDR    r1, handle_irq          ; -> irq handler routine
                MOV     r2, wp                  ; r2 -> workspace for device IRQ
		ADR	r3, DVB_irq_source
		MOV	r4, #interrupt_mask
                SWI     XOS_ClaimDeviceVector   ; and claim the irq routine
                STRVS   r0, [sp]
                PullEnv VS
                DoError VS                      ; return error

                LDR     r3, Flags
                ORR     r3, r3, #flag_OwnIRQ	; and we now have the IRQ vector
                STR     r3, Flags		; stash the Flags away again
30
                LDR     r11, FPGABaseAddress
		MOV	r0, #&F			; ensure all interrupts off
		STR	r0, DVB_int_latch

; podule IRQ bit needs to be set in IOCIRQMSKB
                MOV     lr, pc			; disable IRQs
                ORR     r1, lr, #I_bit
                TEQP    r1, #0
                LDR     r1, =IOC		; lets look at IOC
                LDRB    r0, [r1, #IOCIRQMSKB]
                ORR     r0, r0, #podule_IRQ_bit
                STRB    r0, [r1, #IOCIRQMSKB]
		TEQP	lr, #0			; restore IRQs now we have dun

                MOV     r0, #1			; enable all interrupts
                STR     r0, DVB_interrupt_enable

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_remove
;
; in:   SVC mode
;
; out:  -
;

hardware_remove	ENTRY "r0-r4, r11"
 [ debug
   		DLINE	"hardware_remove"
 ]

; disable card interrupts
                LDR     r11, FPGABaseAddress
                MOV     r0, #0			; disable all interrupts
                STR     r0, DVB_interrupt_enable

                LDR     r3, Flags
                TST     r3, #flag_OwnIRQ        ; do we currently own the IRQ
                EXITS   EQ

; release the IRQ
                MOV     r0, #Podule_DevNo	; expansion card interrupt
                ADDR    r1, handle_irq          ; irq handler routine
                MOV     r2, wp                  ; r2 -> workspace for device IRQ
		ADR	r3, DVB_irq_source
		MOV	r4, #interrupt_mask
                SWI     XOS_ReleaseDeviceVector
                STRVS   r0, [sp]
                PullEnv VS
                DoError VS

                LDR     r3, Flags
                BIC     r3, r3, #flag_OwnIRQ    ; mark as not owning the IRQ
                STR     r3, Flags

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

hardware_disable_all_matches Entry "r0-r2"
		LDR	lr, MatchMaskStart
		MOV	r0, #0			; EOR value
		MOV	r1, #-1			; AND value
		MOV	r2, #32
10
		STMIA	lr!, {r0,r1}
		SUBS	r2, r2, #1
		BNE	%BT10
		EXIT

		END
