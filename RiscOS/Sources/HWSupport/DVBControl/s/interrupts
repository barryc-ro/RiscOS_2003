; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : interrupts
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : Dec 1995
;    Description  : This code should handle all irq interrupts.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_irq
;

handle_irq	ENTRY	"r0-r5, r11"

                LDR     r11, FPGABaseAddress		; r11 -> DVB base
irq_poll_loop
		LDR	r5, DVB_irq_source		; read int source
		AND	r5, r5, #interrupt_mask		; mask of interrupts
		TST	r5, #internal_overrun
		BNE	handle_overrun
		TST	r5, #rssync
		BNE	handle_rssync
		TST	r5, #packet_counter_a
		BNE	handle_bank_a
		TST	r5, #packet_counter_b
		BNE	handle_bank_b
		EXITS

handle_bank_a
		LDR	r4, =buffer_a_start	; load start offset
		STR	r4, DVB_a_address	; re-initialise the address

		LDR	r4, PacketCounter	; load packet counter
		SUB	r4, r4, #1		; value of 0 = 1 packet
		STR	r4, DVB_a_counter	; stash in packet counter

		MOV	r5, #packet_counter_a
		STR	r5, DVB_int_latch		; clear interrupt

; have we finished existing callback for bank A ?
		LDR     r0, Flags		; load flags
                TST     r0, #flag_DescriptorABusy
 [ dump_counting
		BEQ	%10
		LDR	r0, MPEGDescDump
		ADD	r0, r0, #1
		STR	r0, MPEGDescDump
10
 ]
		BNE	irq_poll_loop

; now setup the callback
		MOV	r4, pc			; push supervisor link register
		ORR	r0, r4, #SVC_mode
		TEQP	r0, #0
		NOP

		Push	"lr"
		ADDR	r0, callback_bank_A	; routine to call back
		MOV	r1, r12			; workspace pointer
		SWI	XOS_AddCallBack
		Pull	"lr"

		TEQP	r4, #0
		NOP

		LDR     r0, Flags		; set callback pending flag
                ORR     r0, r0, #flag_DescriptorABusy
		STR	r0, Flags

; increment interrupt counter
		LDR	r1, BankACount
		ADD	r1, r1, #1
		STR	r1, BankACount
		B	irq_poll_loop

handle_bank_b
		LDR	r4, =buffer_b_start	; load start offset
		STR	r4, DVB_b_address	; re-initialise the address

		LDR	r4, PacketCounter	; load packet counter
		SUB	r4, r4, #1		; value of 0 = 1 packet
		STR	r4, DVB_b_counter	; stash in packet counter

		MOV	r5, #packet_counter_b
		STR	r5, DVB_int_latch		; clear interrupt

; have we finished existing callback for bank A ?
		LDR     r0, Flags		; load flags
                TST     r0, #flag_DescriptorBBusy
 [ dump_counting
		BEQ	%20
		LDR	r0, MPEGDescDump
		ADD	r0, r0, #1
		STR	r0, MPEGDescDump
20
 ]
		BNE	irq_poll_loop

; now setup the callback
		MOV	r4, pc			; push supervisor link register
		ORR	r0, r4, #SVC_mode
		TEQP	r0, #0
		NOP

		Push	"lr"
		ADDR	r0, callback_bank_B	; routine to call back
		MOV	r1, r12			; workspace pointer
		SWI	XOS_AddCallBack
		Pull	"lr"

		TEQP	r4, #0
		NOP

		LDR     r0, Flags		; set callback pending flag
                ORR     r0, r0, #flag_DescriptorBBusy
		STR	r0, Flags

		LDR	r1, BankBCount		; increment interrupt counter
		ADD	r1, r1, #1
		STR	r1, BankBCount
		B	irq_poll_loop

handle_rssync
		LDR	r1, InputControl	; soft copy of interrupt control
		EOR	r1, r1, #invert_rss_bit	; change the invert_rss_bit
		STR	r1, InputControl	; store soft copy again
		STR	r1, DVB_input_control	; this clears interrupt source
		MOV	r5, #rssync
		STR	r5, DVB_int_latch		; clear interrupt
		B	irq_poll_loop

handle_overrun
		MOV	r5, #internal_overrun
		STR	r5, DVB_int_latch		; clear interrupt
		LDR	r1, OverrunCount	; increment interrupt counter
		ADD	r1, r1, #1
		STR	r1, OverrunCount

		MOV	r4, pc
		ORR	r0, r4, #SVC_mode
		TEQP	r0, #0
		NOP

		Push	"lr"
		BL	swi_close_stream
		BL	hardware_remove
		;BL	hardware_initialise
		;BL 	hardware_claim
		Pull	"lr"

		TEQP	r4, #0
		NOP
		B	irq_poll_loop



; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; callback_bank_A
callback_bank_A ENTRY "r0-r2"

; now setup the MPEG descriptor

		LDR	r0, BufferStart		; point to podule memory
		LDR	r1, =buffer_a_start	; offset within buffer
		ADD	r0, r0, r1, LSL #2	; address in bytes

		LDR	r2, APacketCounter	; load number of packets
		MOV	r1, #48*4		; number of bytes in a packet
		MUL	r1, r2, r1		; calc number of bytes in total

		LDR	r2, DescriptorA		; look at MPEG descriptor
		STR	r0,  [r2, #BufferDescriptor_Start]	; start addr
		STR	r1,  [r2, #BufferDescriptor_Length]	; no. of bytes

; update softcopy of packet counter
		LDR	r0, PacketCounter
		STR	r0, APacketCounter

		MOV	r0, #0
		LDR	r1, MPEGControlStream
		TEQ	r1, #0				; check stream actually open
		SWINE	XMPEGControl_FullBuffers

		EXIT
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; callback_bank_B
callback_bank_B ENTRY "r0-r2"
; now setup the MPEG descriptor

		LDR	r0, BufferStart		; point to podule memory
		LDR	r1, =buffer_b_start	; offset within buffer
		ADD	r0, r0, r1, LSL #2	; address in bytes

		LDR	r2, BPacketCounter	; load number of packets
		MOV	r1, #48*4		; number of bytes in a packet
		MUL	r1, r2, r1		; calc number of bytes in total

		LDR	r2, DescriptorB		; look at MPEG descriptor
		STR	r0,  [r2, #BufferDescriptor_Start]	; start addr
		STR	r1,  [r2, #BufferDescriptor_Length]	; no. of bytes

; update softcopy of packet counter
		LDR	r0, PacketCounter
		STR	r0, BPacketCounter

		MOV	r0, #0
		LDR	r1, MPEGControlStream
		TEQ	r1, #0				; check stream actually open
		SWINE	XMPEGControl_FullBuffers

		EXIT
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; descriptor_release
;
; called by the MPEGTrans module with the following registers
;
; in - r0  =  3
;      r1  -> descriptor
;      r12 -> workspace
;
descriptor_release ENTRY "r0-r2"
		MOV	lr, pc
		ORR	lr, lr, #I_bit
		TEQP	lr, #0

; which descriptor was this ?
		LDR	r2, Flags
		LDR	r0, DescriptorA
		CMP	r0, r1
		BICEQ	r2, r2, #flag_DescriptorABusy
		BICNE	r2, r2, #flag_DescriptorBBusy
		STR	r2, Flags

; re-initialise the descriptor
		MOV	r2, #0
		STR	r2,  [r1, #BufferDescriptor_Link]
		STR	r2,  [r1, #BufferDescriptor_Packets]

 [ dump_counting
		LDR	r0, ReleaseCount
		ADD	r0, r0, #1
		STR	r0, ReleaseCount
 ]

		EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END

