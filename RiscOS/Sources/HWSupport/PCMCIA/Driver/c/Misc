/*****************************************************************************************/
/***                                                                                   ***/
/***  Misc.c                                                                           ***/
/***                                                                                   ***/
/***  Application:   PCMCIA_Drv Module                                                 ***/
/***  Version:       0.01                                                              ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          30th July 1993                                                    ***/
/***                                                                                   ***/
/***  Purpose:       Contains various miscellaneous routine used by the PCMCIA driver. ***/
/***                                                                                   ***/
/***  History:       0.01 30th July 1993 - Original version                            ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:                                                                        ***/
/***    RegisterWithManager()                                                          ***/
/***    DeregisterWithManager()                                                        ***/
/***    InstallInterrupts()                                                            ***/
/***    RemoveInterrupts()                                                             ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "Misc.h"
#include "Error.h"
#include "Hardware.h"
#include "Functions.h"
#include "HWOps.h"
#include "Interrupts.h"
#include "Debug.h"



/*****************************************************************************************/
/***                                                                                   ***/
/***  RegisterWithManager()                                                            ***/
/***                                                                                   ***/
/***  Calls the PCMCIA Support Code to register the driver's jump table of routines.   ***/
/***  If the SWI does not exist, the driver will ignore it and must stay resident, as  ***/
/***  the PCMCIA Support Code will issue a service call (&9c, subcode 1) when started. ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
void RegisterWithManager()
    {
    _kernel_swi_regs    regs;

    regs.r[0] = PCMCIA_DRIVERS__REGISTER_INTERFACE_DRIVER;
    regs.r[1] = (int) &PCMCIADriver_Function;
    regs.r[2] = (int) PrivateWord;
    if (_kernel_swi(PCMCIA_Drivers, &regs, &regs) == NULL) {
        #if Debug == TRUE
            DebugMessage("yK","PCMCIA HW Driver sucessfully registered with PCMCIA Support Code.\n\n");
        #endif
    }
    else
    {
        #if Debug == TRUE
            DebugMessage("yK","PCMCIA HW Driver not registered with PCMCIA Support Code.\n\n");
        #endif
    }
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  DeregisterWithManager()                                                          ***/
/***                                                                                   ***/
/***  Calls the PCMCIA Manager in order to de-register the driver                      ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
void DeregisterWithManager()
    {
    _kernel_swi_regs    regs;

    regs.r[0] = PCMCIA_DRIVERS__DEREGISTER_INTERFACE_DRIVER;
    regs.r[1] = (int) &PCMCIADriver_Function;
    regs.r[2] = (int) PrivateWord;
    _kernel_swi(PCMCIA_Drivers, &regs, &regs);

    WaitingToRegister = TRUE;
    }



/*****************************************************************************************/
/***                                                                                   ***/
/***  InstallInterrupts(podule index)                                                  ***/
/***                                                                                   ***/
/***  Sets up the Interrupt handlers used for the PCMCIA Driver.                       ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    - Installs IRQ handler for Card's IRQs                                         ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    TRUE, if IRQs successfully installed                                           ***/
/***    FALSE, if IRQs not installed                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *InstallInterrupts(int podule)
    {
    _kernel_swi_regs            inregs;
    _kernel_oserror            *error = NULL;

    inregs.r[0] = CLAIM_DEVICE_VECTOR__PODULE_IRQS;
    inregs.r[1] = (int) IRQ;                               /* pointer to IRQ veneer code */
    inregs.r[2] = (int) PrivateWord;
    inregs.r[3] = PODULE_SPACE__BASE + (podule * PODULE_CHUNK__SIZE) + ADAPTOR_REGISTER_BASE + ADAPTOR__IRQ_REQUEST_REG__OFFSET;
    inregs.r[4] = ADAPTOR_IRQREQ_MASK;
    if (_kernel_swi(OS_ClaimDeviceVector, &inregs, &inregs) != NULL) error = SetError(ERROR__PCMCIA_HARDWARE_FAILURE);

    #if Debug == TRUE
        DebugMessage("yK"," -- IRQs installed at &%8X\n", inregs.r[3]);
        DebugMessage("yK"," -- IRQs Mask is &%8X\n", inregs.r[4]);
        if (error != NULL) DebugMessage("yK","Interrupts Not actually installed\n");
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  RemoveInterrupts(podule)                                                         ***/
/***                                                                                   ***/
/***  Removes the Interrupt handlers used for the PCMCIA Driver.                       ***/
/***                                                                                   ***/
/***  Performs:                                                                        ***/
/***    - Remove IRQ handler for Card's IRQs                                           ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    TRUE, if IRQs successfully installed                                           ***/
/***    FALSE, if IRQs not installed                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/

int RemoveInterrupts(int podule)
    {
    _kernel_swi_regs    inregs, outregs;
    int                 error = NO_ERROR;

    inregs.r[0] = CLAIM_DEVICE_VECTOR__PODULE_IRQS;
    inregs.r[1] = (int) IRQ;                       /* pointer to IRQ veneer code */
    inregs.r[2] = (int) PrivateWord;
    inregs.r[3] = PODULE_SPACE__BASE + (podule * PODULE_CHUNK__SIZE) + ADAPTOR_REGISTER_BASE + ADAPTOR__IRQ_REQUEST_REG__OFFSET;
    inregs.r[4] = ADAPTOR_IRQREQ_MASK;
    if (_kernel_swi(OS_ReleaseDeviceVector, &inregs, &outregs) != NULL) error = ERROR__PCMCIA_HARDWARE_FAILURE;
    return(error);
}





