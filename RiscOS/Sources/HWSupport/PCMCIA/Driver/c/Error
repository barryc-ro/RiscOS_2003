/*****************************************************************************************/
/***                                                                                   ***/
/***  Error.c                                                                          ***/
/***                                                                                   ***/
/***  Application:   PCMCIA_Drv Module                                                 ***/
/***  Version:       0.01                                                              ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          15th July 1993                                                    ***/
/***                                                                                   ***/
/***  Purpose:       Contains all the code needed to handle any error messages         ***/
/***                 generated by the PCMCIA driver.                                   ***/
/***                                                                                   ***/
/***  History:       0.01 15th July 1993 - Original version                            ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:                                                                        ***/
/***    SetError()                                                                     ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include <string.h>

#include "Defs.h"
#include "Structs.h"
#include "Error.h"
#include "Debug.h"
#include "Variables.h"


/*****************************************************************************************/
/***                                                                                   ***/
/***  SetError(error_code)                                                             ***/
/***                                                                                   ***/
/***  Takes a PCMCIA Driver Error code value and returns a pointer to a standard RISC  ***/
/***  OS error message block.                                                          ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    pointer to a global _kernel_oserror datablock for specified error.             ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *SetError(PCMCIADriver_ErrorCode error_code)
    {
    _kernel_swi_regs    callregs;

    if (error_code != NO_ERROR) {
        #if Debug == TRUE
            DebugMessage("yK", "Trying to look up error %d\n", error_code);
        #endif
        KernErrorBlock.errnum = ERROR_BASE + error_code;
        #if Debug == TRUE
            DebugMessage("yK", "Reckon it's real error number is %d\n", KernErrorBlock.errnum);
        #endif
        sprintf(KernErrorBlock.errmess, ERROR_MESSAGE_TOKEN_STRING, error_code);
        #if Debug == TRUE
            DebugMessage("yK", "So, it's token is %s\n", KernErrorBlock.errmess);
        #endif
        callregs.r[0] = (int)&KernErrorBlock;
        callregs.r[1] = (int)Message_FileDescriptor;
        callregs.r[2] = (int)&KernErrorBlock;
        callregs.r[3] = 0;
        callregs.r[4] = 0;
        callregs.r[5] = 0;
        callregs.r[6] = 0;
        callregs.r[7] = 0;
        _kernel_swi(MessageTrans_ErrorLookup, &callregs, &callregs);
        if(KernErrorBlock.errnum != ERROR_BASE + error_code) {
            KernErrorBlock.errnum = ERROR_BASE;
            strcpy(KernErrorBlock.errmess, "Waargh, I've lost my mind!");
        }

        #if Debug == TRUE
            DebugMessage("yK", "\n\n>>>>>  Error: &%8X, \"", KernErrorBlock.errnum);
            DebugMessage("yK", "%s", KernErrorBlock.errmess);
            DebugMessage("yK", "\"  <<<<<\n\n");
        #endif
    }
    return(&KernErrorBlock);
}
