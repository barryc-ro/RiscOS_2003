/* File:    debug.c
 * Purpose: debugging routines for the Toolbox
 * Author:  Ian Johnson
 * History: 16-Sep-93: IDJ:   created
 *          07-Jul-94: WT :   changed fn names
 *          05-Aug-94: WT :   added ability to colourise output
 *
 */

#include "swis.h"
#include "kernel.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

/*#define HostFS_HostVDU   0x40100
#define HostFS_TubeVDU   0x40101
#define HostFS_WriteC    0x40102
*/
#define BLACK           0x00
#define DARK_BLUE       0x04
#define RED             0x01
#define GREEN           0x02
#define MAGENTA         0x05
#define CYAN            0x06
#define YELLOW          0x03
#define WHITE           0x07

static char output_buffer[256];
static char var_val[256];
static char debug_var[256] = "";


extern void Set_DebugVar_Name (char *var_name)
{
    strcpy (debug_var, var_name);
}


extern void DebugMessage (char *allow, char *string, ...)
{
    /*
     * Function to output the given variable list down the tube.  String is a
     * printf format string.  String is only printed if the given colour id char
     * appears in the system variable debug_var
     *
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    va_list args;
    char *p;

    va_start(args, string);

    regs.r[0] = (int)debug_var;
    regs.r[1] = 0;
    regs.r[2] = 0x80000000;     /* check variable exists */
    regs.r[3] = 0;
    regs.r[4] = 3;
    _kernel_swi (OS_ReadVarVal, &regs, &regs);
    if (regs.r[2] == 0)
        return;

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;     /* check variable exists */
    regs.r[3] = 0;
    regs.r[4] = 3;
    if ((e = _kernel_swi (OS_ReadVarVal, &regs, &regs)) != NULL)
        return;
    if (regs.r[2] == 0)
        return;
    var_val[regs.r[2]] = '\0';

    if (strstr (var_val, allow) != NULL)
    {
/** Mod to colourise by W.Turner **/
        switch(allow[0]) {
            case 'b': regs.r[1] = DARK_BLUE;
                      break;
            case 'r': regs.r[1] = RED;
                      break;
            case 'g': regs.r[1] = GREEN;
                      break;
            case 'm': regs.r[1] = MAGENTA;
                      break;
            case 'c': regs.r[1] = CYAN;
                      break;
            case 'y': regs.r[1] = YELLOW;
                      break;
            case 'w': regs.r[1] = WHITE;
                      break;
            default: regs.r[1] = BLACK;
        }
        regs.r[0] = 17; /** VDU 17 - change text colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        regs.r[0] = (int)regs.r[1]; /** And this is the colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        switch(allow[1]) {
            case 'B': regs.r[1] = DARK_BLUE;
                      break;
            case 'R': regs.r[1] = RED;
                      break;
            case 'G': regs.r[1] = GREEN;
                      break;
            case 'M': regs.r[1] = MAGENTA;
                      break;
            case 'C': regs.r[1] = CYAN;
                      break;
            case 'Y': regs.r[1] = YELLOW;
                      break;
            case 'K': regs.r[1] = BLACK;
                      break;
            default: regs.r[1] = WHITE;
        }
        regs.r[0] = 17; /** VDU 17 - change text colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
        regs.r[0] = ((int)regs.r[1])+128; /** And this is the background colour **/
        _kernel_swi (HostFS_WriteC, &regs, &regs);
/** End of mod **/

        vsprintf (output_buffer, string, args);

        for (p = output_buffer; *p != '\0'; p++)
        {
            if ((*p >= ' ' && *p <= '~') || *p == '\n')
                regs.r[0] = (int)*p;
            else
                regs.r[0] = '*';
            _kernel_swi (HostFS_WriteC, &regs, &regs);
            if (*p == '\n')
            {
                regs.r[0] = '\r';
                _kernel_swi (HostFS_WriteC, &regs, &regs);
            }
        }
    }

    va_end(args);
}


