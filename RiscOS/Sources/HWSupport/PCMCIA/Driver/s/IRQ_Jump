
;*****************************************************************************************
;***                                                                                   ***
;***  IRQ_Jump.s                                                                       ***
;***                                                                                   ***
;***  Application:   PCMCIA Interface Driver Module                                    ***
;***  Version:       0.01                                                              ***
;***                                                                                   ***
;***  By:            William Turner, Acorn Computers Ltd.                              ***
;***  Date:          1st February 1994                                                 ***
;***                                                                                   ***
;***  Purpose:       Contains machine code routines to support the transfer of         ***
;***                 interrupt control from the interface driver to the support code.  ***
;***                                                                                   ***
;***  History:       0.01 1st February 1994 - Original version                         ***
;***                                                                                   ***
;***                                                                                   ***
;*****************************************************************************************

;*****************************************************************************************
;***                                                                                   ***
;***    Export global symbols                                                          ***
;***                                                                                   ***
;*****************************************************************************************
        EXPORT  IRQ_Jump


;*****************************************************************************************
;***                                                                                   ***
;***    Imported global symbols                                                        ***
;***                                                                                   ***
;*****************************************************************************************


;*****************************************************************************************
;
; Register Definitions
;
;*****************************************************************************************
r0      RN      0
r1      RN      1
r2      RN      2
r3      RN      3
r4      RN      4
r5      RN      5
r6      RN      6
r7      RN      7
r8      RN      8
r9      RN      9
r10     RN      10
sl      RN      10
r11     RN      11
fp      RN      11
r12     RN      12
ip      RN      12
r13     RN      13
sp      RN      13
r14     RN      14
lr      RN      r14
r15     RN      15
pc      RN      r15

; Use the FN directive to define floating point register names

f0      FN      0
f1      FN      1
f2      FN      2
f3      FN      3
f4      FN      4
f5      FN      5
f6      FN      6
f7      FN      7





;*****************************************************************************************
;***                                                                                   ***
;***    Constants                                                                      ***
;***                                                                                   ***
;*****************************************************************************************

I_bit_number    *       27
F_bit_number    *       26
I_bit           *       1 :SHL: I_bit_number
F_bit           *       1 :SHL: F_bit_number


USR_mode        *      2_00                    ; Processor mode bits
FIQ_mode        *      2_01
IRQ_mode        *      2_10
SVC_mode        *      2_11


IOC             *       &03200000
IOCIRQMSKB      *       &28                     ;       Mask
podule_IRQ_bit  *       1 :SHL: 5               ; Podule IRQ request








;*****************************************************************************************
;***                                                                                   ***
;***    Various macros used by this code.                                              ***
;***        - CLRV              clears V flag                                          ***
;***        - SETV              sets V flags                                           ***
;***                                                                                   ***
;*****************************************************************************************


;   *************************************************************************************
;   ***         Clear overflow flag - will set nzCv ***                               ***
;   *************************************************************************************

        MACRO
$label  CLRV    $cond
$label  CMP$cond pc, #0
        MEND

;   *************************************************************************************
;   ***  Set overflow flag - will set NzcV  ***                                       ***
;   *************************************************************************************

        MACRO
$label  SETV    $cond
$label  CMP$cond pc, #&80000000
        MEND






;*****************************************************************************************
;***                                                                                   ***
;***    Data Structures, copied from 'C'  - update these as well as 'C' versions       ***
;***                                                                                   ***
;*****************************************************************************************


Reg0                                            EQU      0
Reg1                                            EQU      4
Reg2                                            EQU      8
Reg3                                            EQU     12
Reg4                                            EQU     16
Reg5                                            EQU     20
Reg6                                            EQU     24
Reg7                                            EQU     28
Reg8                                            EQU     32
Reg9                                            EQU     36


;*****************************************************************************************
;***                                                                                   ***
;***    Area name C$$code advisable as wanted to link with C output                    ***
;***                                                                                   ***
;***    Code can begin here                                                            ***
;***                                                                                   ***
;*****************************************************************************************
        AREA    |C$$code|, CODE, READONLY



;*****************************************************************************************
;***                                                                                   ***
;***  IRQ_Jump(jump address, r12 value, address of register block)                     ***
;***                                                                                   ***
;***  (NB. Routine is written in Assembler, but looks and acts as a 'C' rouitne.)      ***
;***                                                                                   ***
;***  Return:                                                                          ***
;***    NULL                                                                           ***
;***                                                                                   ***
;*****************************************************************************************
IRQ_Jump

        STMFD   sp!, {r3 - r12, lr}             ; Stack non-parameter registers

	MOV	r6, r0				; Jump address shifted into R6
        MOV     r12, r1                         ; Set the private word pointer for irq routine

	LDMIA	r2, {r0 - r2}			; Copy the relevant registers from the block

        MOV     lr, pc                          ; Setup return address  - Do not LDR/ADR this value
        MOV     pc, r6                          ; Call the driver NOW!


;*****************************************************************************************
;***    The support code should return control back here. The return values are:....   ***
;*****************************************************************************************
IRQJump_Return

        MOV     r0, #0                          ; Return 0 if successful (of course!)
        LDMFD   sp!, {r3 - r12, pc}^            ;...and back we go.


        END


