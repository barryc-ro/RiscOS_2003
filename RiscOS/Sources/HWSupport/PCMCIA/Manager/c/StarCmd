/*****************************************************************************************/
/***                                                                                   ***/
/***  StarCmd.c                                                                        ***/
/***                                                                                   ***/
/***  Application:   PCMCIA SupportCode Module                                         ***/
/***  Version:       0.01                                                              ***/
/***                                                                                   ***/
/***  By:            William Turner, Acorn Computers Ltd.                              ***/
/***  Date:          25th March 1994                                                   ***/
/***                                                                                   ***/
/***  Purpose:       Contains the code to parse, interpret and handle the *Command     ***/
/***                 supplied by this module.                                          ***/
/***                                                                                   ***/
/***  History:       0.01 25th March 1994 - Original version                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCMCIASupCode_CommandHandler()                                                 ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "Error.h"
#include "Cis.h"
#include "StarCmd.h"
#include "Driver.h"

#include "Debug.h"



/*****************************************************************************************/
/***                                                                                   ***/
/***  PCMCIAManager_CommandHandler(arg_string, argc, command_no, pw)                   ***/
/***                                                                                   ***/
/***  This function will parse the *command information passed into this function and  ***/
/***  will provide the apropriate functionality accordingly.                           ***/
/***                                                                                   ***/
/***  *Commands:                                                                       ***/
/***    *SlotInfo                                                                      ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    NULL pointer, if *Command was succesfully handled.                             ***/
/***    ErrorBlock, if an error occured.                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *PCMCIAManager_CommandHandler(char *arg_string, int argc, int command_no, void *pw)
    {
    _kernel_oserror            *error = NULL;

    switch(command_no) {
        case COMMAND__SlotInfo:
            if(HardwarePresent) error = Command_SlotInfo(arg_string, argc);
            else error = SetError(ERROR__NO_HARDWARE_REGISTERED);
            break;

        default:
            break;
    }
    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  Command_SlotInfo()                                                               ***/
/***                                                                                   ***/
/***  This function performs the actions neccesary to implement the "*SlotInfo"        ***/
/***  command.                                                                         ***/
/***  Its purpose is to list information on the currently inserted cards               ***/
/***                                                                                   ***/
/***  Perform:                                                                         ***/
/***    Various gubbins to read the info from the CIS of each card, format it & output ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    NULL pointer, if *Command was succesfully handled.                             ***/
/***    ErrorBlock, if an error occured.                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *Command_SlotInfo(char *arg_string, int argc)
    {
    _kernel_oserror            *error = NULL; /** And this is the way it'll stay! **/
    PCMCIAManager_ErrorCode     ciserror = NO_ERROR;
    char                        hwdriver_loop = 0;
    char                        slot_loop = 0;
    int                         slot_handle = -1;
    int                         current_slot = 0;
    char                        loop = 0;
    char                        type[11];
    char                        capacity[11];
    char                        vendor[11];
    char                        prodinfo[21];
    char                        driverinfo[17];
    char                        tupbuff[257];
    DRIVER_REGISTERS            driver_regs;
    _kernel_swi_regs            kernregs;


    /*** Well, we can print the header...... ***/
    printf("Slot  Type      Capacity     Vendor      Product Information  Driver & version\n");
    /* e.g    0   Harddisc  2048 MBytes  Mitsubishi  WD Caviar Ultralite  PCMCIAIde 1.79    */


    /** Now let's go through the slots, one by one **/
    for(hwdriver_loop = 0; hwdriver_loop < MAX_HARDWARE_DRIVERS; hwdriver_loop++) {
        for(slot_loop = 0; slot_loop < HardwareDriver[hwdriver_loop].NumberOfSlots; slot_loop++) {
            /** Find the slot handle for the stated physical slot... **/
            SetUpHWDriver_CallRegs(hwdriver_loop, &driver_regs);
            driver_regs.r[1] = slot_loop;
            HardwareFunction(HARDWARE_FUNCTION__CARD_PRESENT, &driver_regs, &DRV_Error);
            if(driver_regs.r[0] != 0) { /* Bingo, there's a card in this slot */
                slot_handle = driver_regs.r[1];
                /** Setup default responses **/
                strcpy(type, "Unknown");
                strcpy(vendor, "Unknown");
                strcpy(prodinfo, "Unknown");
                strcpy(driverinfo, "Unknown");

                printf(" %2d   ", current_slot);     /** physical slot number (and carddrive) **/

                if(CardDrive[current_slot].PCCardDriver == MAX_PCCARD_DRIVERS) {
                    /** It's handled by the default drivers - we need to get more info to save this poor wretch from a lifetime of misery **/
                    #if Debug == TRUE
                        DebugMessage("mK","Its.... a defaultly (?) driven card in slot %d\n",current_slot);
                    #endif
                    switch(CardDrive[current_slot].DeviceType) {
                        case 0: strcpy(type, "Null"); break;
                        case 1: strcpy(type, "ROM"); break;
                        case 2: strcpy(type, "OTPROM"); break;
                        case 3: strcpy(type, "UV EPROM"); break;
                        case 4: strcpy(type, "EEPROM"); break;
                        case 5: strcpy(type, "Flash"); break;
                        case 6: strcpy(type, "SRAM"); break;
                        case 7: strcpy(type, "DRAM"); break;
                        case 8: strcpy(type, "Reserved"); break;
                        case 9: strcpy(type, "Reserved"); break;
                        case 10:strcpy(type, "Reserved"); break;
                        case 11:strcpy(type, "Reserved"); break;
                        case 12:strcpy(type, "Reserved"); break;
                        case 13:strcpy(type, "I/O"); break;
                        case 14:strcpy(type, "Extended"); break;
                        case 15:strcpy(type, "Reserved"); break;
                        default:strcpy(type, "Unknown!"); break;
                    }
                    if((CardDrive[current_slot].DeviceType<8) && (CardDrive[current_slot].DeviceType!=0)) strcpy(driverinfo, "Default (1.00)");
                    else strcpy(driverinfo, "No Driver");
                    /*** Get required info from CIS here (vendor, prodinfo)  **/
                    /** First, save the state of the slot - it's in a right state! **/
                    driver_regs.r[7] = current_slot;
                    HardwareFunction(HARDWARE_FUNCTION__SAVE_SLOT_STATE, &driver_regs, &DRV_Error);
                    /** Right, now it's down to biznes, and spelinng **/
                    kernregs.r[0] = 5;
                    kernregs.r[1] = current_slot;
                    kernregs.r[2] = 0; /** look directly on the card, and turn to stone **/
                    kernregs.r[3] = 0xffff; /** The CIS _MUST_ be shorter than this! */
                    kernregs.r[4] = 0; /** 'cos there isn't one **/
                    kernregs.r[5] = CISTPL_VERS_1;
                    kernregs.r[6] = 1;
                    ciserror = Cis_FindTuple(&kernregs);
                    if(ciserror == NO_ERROR) {
                        kernregs.r[0] = 3;
                        kernregs.r[7] = (int)tupbuff;
                        Cis_ReadTuple(&kernregs);
                        loop = 0;
                        strncpy(vendor, tupbuff+4, 10);
                        strncpy(prodinfo, tupbuff+strlen(tupbuff+4)+5, 19);
                    }
                    /** put capacity into driver_regs.r[0] **/
                    driver_regs.r[0] = CardDrive[current_slot].PartitionLength;
                }
                else
                {
                    /** It's some driven card **/
                    #if Debug == TRUE
                        DebugMessage("mK","Its a driven card in slot %d\n",current_slot);
                    #endif
                    SetUpPCCDriver_CallRegs(loop, &driver_regs);
                    driver_regs.r[0] = PCCARD_FUNCTION__DEVICE_INFORMATION;
                    driver_regs.r[1] = CardDrive[loop].SlotHandle;
                    driver_regs.r[2] = (int)(&(HardwareDriver[CardDrive[current_slot].HardwareDriver].NumberOfSlots));
                    PCCardFunction(PCCardDriver[CardDrive[current_slot].PCCardDriver].FunctionAddress,
                                   PCCardDriver[CardDrive[current_slot].PCCardDriver].R12Value,
                                   &driver_regs,
                                   &DRV_Error);
                    strcpy(prodinfo, (char *)driver_regs.r[1]);
                    strcpy(driverinfo, (char *)driver_regs.r[2]);
                    strcpy(type, (char *)driver_regs.r[3]);
                    strcpy(vendor, (char *)driver_regs.r[4]);
                }

                /** Got all the info now, so print it nicely formatted **/
                printf("%-8s  ", type);    /** Type string **/
                if(driver_regs.r[0] > 1) {
                    kernregs.r[0] = driver_regs.r[0];
                    kernregs.r[1] = (int)capacity;
                    kernregs.r[2] = 21;
                    error = _kernel_swi(OS_ConvertFixedFileSize, &kernregs, &kernregs);
                }
                else
                {
                    if(driver_regs.r[0] == 0) strcpy(capacity, "N/A");
                    else strcpy(capacity, "Unformatted");
                }
                printf("%-10s  ", capacity);            /** Capacity    **/
                printf("%-10s  ", vendor);              /** Vendor      **/
                printf("%-19s  ", prodinfo);            /** Prod info   **/
                printf("%-16s\n", driverinfo);          /** Driver info **/

                /****************************************************************************************/
                /** Ok, that's the basic info printed for the card, but what if -full was specified... **/
                /** Well, in that case, we'd best show all the FS partitions on the cards...           **/
                /****************************************************************************************/
                if(!strcmp(strtok(arg_string, " "), "-full")) {
                    /** Well, it was... **/
                    #if Debug == TRUE
                        DebugMessage("mk", "-full was specified on the *slotinfo\n");
                    #endif

                    /** So, search through all the carddrives linked to this card/slot **/
                    driver_regs.r[1] = 0; /** This'll be the partition number counter **/
                    for(loop = 0; loop < IO_CARDDRIVE; loop++) {
                        if(CardDrive[loop].SlotHandle == slot_handle) {
                            /** Whoo hoo, we've found an FS partition on this card... **/
                            printf("      Partition   Size        Drive\n");
                            /** Right, now find the info to fill in this space **/
                            printf("         %2d      ", driver_regs.r[1]);
                            kernregs.r[0] = CardDrive[loop].PartitionLength;
                            kernregs.r[1] = (int)capacity;
                            kernregs.r[2] = 21;
                            error = _kernel_swi(OS_ConvertFixedFileSize, &kernregs, &kernregs);
                            printf("%-10s    ", capacity);
                            printf("%2d\n",loop);
                            driver_regs.r[1]++; /** Next partition please! **/
                        }
                    }
                }
            }
            else printf(" %2d   Empty\n",slot_loop);
            current_slot++;
        }
    }
    return(error);
}

