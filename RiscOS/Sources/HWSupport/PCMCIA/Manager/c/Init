/*****************************************************************************************/
/***                                                                                   ***/
/***  Init.c                                                                           ***/
/***                                                                                   ***/
/***  Application:   PCMCIA_Support Code Module                                        ***/
/***  Version:       0.01                                                              ***/
/***                                                                                   ***/
/***  By:            Neil Critchell, Acorn Computers Ltd.                              ***/
/***  Date:          22nd July 1993                                                    ***/
/***                                                                                   ***/
/***  Purpose:       Contains the code to initialise the module and also kill the      ***/
/***                 module when requested to do so.                                   ***/
/***                                                                                   ***/
/***  History:       0.01 22nd July 1993 - Original version                            ***/
/***                                                                                   ***/
/*****************************************************************************************/

/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***    PCMCIAManager_Initialise()                                                     ***/
/***    PCMCIAManager_Terminate()                                                      ***/
/***    Initialise_Variables()                                                         ***/
/***    Send_Started_ServiceCallHandler()                                              ***/
/***                                                                                   ***/
/*****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Defs.h"
#include "Structs.h"
#include "Variables.h"
#include "Init.h"
#include "Resources.h"
#include "Error.h"
#include "Misc.h"
#include "Driver.h"
#include "Services.h"

#include "Debug.h"



/*****************************************************************************************/
/***                                                                                   ***/
/***  PCMCIAManager_Initialise(cmd_tail, podule_base, pw)                              ***/
/***                                                                                   ***/
/***  This function will install and initialise the PCMCIA Manager module. It is       ***/
/***  called by the OS when the module is started.                                     ***/
/***  The cmd_tail, podule_base and private_word will all be ignored. The code will    ***/
/***  perform the following:-                                                          ***/
/***    1) Register an exit routine, which is called when the module quits.            ***/
/***    2) Initialise all fixed variables.                                             ***/
/***    3) Attempt to initialise the resource messages.                                ***/
/***    4) Initialise the hardware.                                                    ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    NULL pointer, if installed succesfully.                                        ***/
/***    ErrorBlock, if an error occured.                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
_kernel_oserror *PCMCIAManager_Initialise(char *cmd_tail, int podule_base, void *pw)
    {
    _kernel_oserror            *error = NULL;
    _kernel_swi_regs            callregs;

    #if Debug == TRUE
        Set_DebugVar_Name("pcmciamanagerdebug");
        DebugMessage("mK","*****    Initalising PCMCIA Manager    ****\n\n");
    #endif


    /*************************************************************************************/
    /**   The following code will always be executed.                                   **/
    /*************************************************************************************/

    atexit(&PCMCIAManager_Terminate);                   /* register exit routine         */

    Private_Word = pw;

    error = InitialiseWorkspace();                      /* Claim workspace */
    if(error == NULL) InitialiseVariables();            /* Initialise fixed variables & contents of workspace */
    if(error == NULL) error = InitialiseResources();

    if(error == NULL) {
        callregs.r[0] = (int)Send_Started_ServiceCall;
        callregs.r[1] = (int)Private_Word;
        _kernel_swi(OS_AddCallBack, &callregs, &callregs); /** Tell the world we're up & running */
    }

    if(error) PCMCIAManager_Terminate();
    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  PCMCIAManager_Terminate()                                                        ***/
/***                                                                                   ***/
/***  This function will be called whenever the driver is about to be terminated. It   ***/
/***  wil ensure that the driver exits cleanly. It performs the following:-            ***/
/***                                                                                   ***/
/***    1) Release any calimed RMA Space                                               ***/
/***                                                                                   ***/
/*****************************************************************************************/
void PCMCIAManager_Terminate(void)
    {
    DRIVER_REGISTERS            drv_regs;
    _kernel_swi_regs            callregs;
    int                         loop;

    #if Debug == TRUE
        DebugMessage("mK","Terminating the module.\n");
    #endif

    /*************************************************************************************/
    /***        Quit all the device drivers nicely if they ever got loaded             ***/
    /*************************************************************************************/
    if(PCCardDriver != NULL) {
        while(loop < MAX_PCCARD_DRIVERS) {
            SetUpPCCDriver_CallRegs(loop, &drv_regs);
            if(PCCardDriver[loop].FunctionAddress != 0) {
                drv_regs.r[0] = PCCARD_FUNCTION__QUIT;
                PCCardFunction(PCCardDriver[loop].FunctionAddress, PCCardDriver[loop].R12Value, &drv_regs, &DRV_Error);
                #if Debug == TRUE
                    DebugMessage("mK","    Quitting a PCCard driver\n");
                #endif
            }
            loop++;
        }
        #if Debug == TRUE
            DebugMessage("mK","    PCCard drivers all quit\n");
        #endif
    }

    /*************************************************************************************/
    /***        Release Workspace Memory                                               ***/
    /*************************************************************************************/
    if (HardwareDriver != NULL) {
        ReleaseRMAWorkspace((char *)HardwareDriver);
        #if Debug == TRUE
            DebugMessage("mK","    Released claimed memory for hardware registeration\n");
        #endif
    }

    /*************************************************************************************/
    /***        Release Bufferspace Memory                                             ***/
    /*************************************************************************************/
    if (BufferSpace != NULL) {
        ReleaseRMAWorkspace(BufferSpace);
        #if Debug == TRUE
            DebugMessage("mK","    Released claimed memory for Bufferspace\n");
        #endif
    }

    /*************************************************************************************/
    /***        Release PCCard driver Memory                                           ***/
    /*************************************************************************************/
    if (PCCardDriver != NULL) {
        ReleaseRMAWorkspace((char *)PCCardDriver);
        #if Debug == TRUE
            DebugMessage("mK","    Released claimed memory for PCCard drivers\n");
        #endif
    }

    /*************************************************************************************/
    /***        Release Card drive Memory                                              ***/
    /*************************************************************************************/
    if (CardDrive != NULL) {
        ReleaseRMAWorkspace((char *)CardDrive);
        #if Debug == TRUE
            DebugMessage("mK","    Released claimed memory for Card drives\n");
        #endif
    }

    /*************************************************************************************/
    /***        Close Messages File                                                    ***/
    /*************************************************************************************/
    callregs.r[0] = (int)Message_FileDescriptor;
    _kernel_swi(MessageTrans_CloseFile, &callregs, &callregs);

    #if Debug == TRUE
        DebugMessage("mK","*****    Terminating PCMCIA Support Code    ****\n\n");
    #endif
}




/*****************************************************************************************/
/***                                                                                   ***/
/***  InitialiseWorkspace()                                                            ***/
/***                                                                                   ***/
/***  Will claim and initialise modules workspace areas. Pointers to the various       ***/
/***  workspace sections are also initialised.                                         ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    NULL - Workspace claimed and initialised.                                      ***/
/***    Otherwise - pointer to errorblock.                                             ***/
/***                                                                                   ***/
/*****************************************************************************************/

_kernel_oserror *InitialiseWorkspace(void)
    {
    _kernel_oserror            *error = NULL;

    #if Debug == TRUE
        DebugMessage("mK","Initialising workspace.\n");
    #endif

    if ((BufferSpace = ClaimRMAWorkspace(BufferSize)) == NULL) error = SetError(ERROR__NO_RMA);
    #if Debug == TRUE
        DebugMessage("mK","    Claimed Bufferspace memory of &%4X bytes ", BufferSize);
        DebugMessage("mK","at address &%8X\n", (int)BufferSpace);
    #endif


    if((HardwareDriver = (HARDWAREDRV_BLOCK *)ClaimRMAWorkspace(MAX_HARDWARE_DRIVERS * sizeof(HARDWAREDRV_BLOCK))) == NULL) error = SetError(ERROR__NO_RMA);
    #if Debug == TRUE
        DebugMessage("mK","    Claimed hardware registration space of &%4X bytes, ", MAX_HARDWARE_DRIVERS * sizeof(HARDWAREDRV_BLOCK));
        DebugMessage("mK","at address &%8X\n", (int)HardwareDriver);
    #endif


    if((PCCardDriver = (PCCARDDRV_BLOCK *)ClaimRMAWorkspace(MAX_PCCARD_DRIVERS * sizeof(PCCARDDRV_BLOCK))) == NULL) error = SetError(ERROR__NO_RMA);
    #if Debug == TRUE
        DebugMessage("mK","    Claimed PCCard registration space of &%4X bytes, ", MAX_PCCARD_DRIVERS * sizeof(PCCARDDRV_BLOCK));
        DebugMessage("mK","at address &%8X\n", (int)PCCardDriver);
    #endif


    if((CardDrive = (CARDDRIVE_BLOCK *)ClaimRMAWorkspace(MAX_CARDDRIVES * sizeof(CARDDRIVE_BLOCK))) == NULL) error = SetError(ERROR__NO_RMA);
    #if Debug == TRUE
        DebugMessage("mK","    Claimed card drive space of &%4X bytes, ", MAX_CARDDRIVES * sizeof(CARDDRIVE_BLOCK));
        DebugMessage("mK","at address &%8X\n", (int)CardDrive);
    #endif

    return(error);
}



/*****************************************************************************************/
/***                                                                                   ***/
/***  InitialiseVariables()                                                            ***/
/***                                                                                   ***/
/***  Will set default values to specific variables.                                   ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
void InitialiseVariables(void)
    {
    int         loop;

    Rand_Number = (int)&InitialiseVariables + (rand() & 0x00F30FFF);

    /*************************************************************************************/
    /***        Initialise Workspace Areas & associated Globals                        ***/
    /*************************************************************************************/
    /*************************************************************************************/
    /***        Driver Registration Area                                               ***/
    /*************************************************************************************/
    for(loop=0; loop <MAX_HARDWARE_DRIVERS; loop++) {
        HardwareDriver[loop].Functions = 0;
        HardwareDriver[loop].NumberOfSlots = 0;
    }
    #if (Debug == TRUE) && (Verbose == TRUE)
        DebugMessage("mK","    Initialised Hardware drivers - No drivers registered\n");
    #endif

    /*************************************************************************************/
    /***        PCCard Driver Registration Area                                        ***/
    /*************************************************************************************/
    for(loop=0; loop <MAX_PCCARD_DRIVERS; loop++) PCCardDriver[loop].FunctionAddress = 0; /* signifies unused */
    #if (Debug == TRUE) && (Verbose == TRUE)
        DebugMessage("mK","    Initialised PCCard Driver Registration Block Area - No drivers registered\n");
    #endif

    /*************************************************************************************/
    /***        Card Drive 'emptying'                                                  ***/
    /*************************************************************************************/
    for(loop=0; loop <MAX_CARDDRIVES; loop++) {
        CardDrive[loop].HardwareDriver = -1; /* signifies unused to the manager */
        CardDrive[loop].PartitionLength = 0; /* signifies unused to PCCardFS **/
        CardDrive[loop].DeviceType = 6; /** All cards are SRAM until proven otherwise **/
        CardDrive[loop].Status = PARTITION_STATUS__DRIVEEMPTY;     /** All slots are empty until filled **/
    }
    #if (Debug == TRUE) && (Verbose == TRUE)
        DebugMessage("mK","    Initialised Card Drives - No drives used\n");
    #endif
}




/*****************************************************************************************/
/***                                                                                   ***/
/***  Send_Started_ServiceCallHandler()                                                ***/
/***                                                                                   ***/
/***  Sends the 'Manager started' service call                                         ***/
/***                                                                                   ***/
/***  Return Value:                                                                    ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/
int Send_Started_ServiceCallHandler(_kernel_swi_regs *regs, void *pw)
    {
    _kernel_swi_regs    callregs;

    callregs.r[0] = __SVC__MANAGER_STARTED;
    callregs.r[1] = SERVICE__PCMCIA;
    _kernel_swi(OS_ServiceCall, &callregs, &callregs); /** Tell the world we're up & running */

    return(1);
}
