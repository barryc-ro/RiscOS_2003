;*****************************************************************************************
;***                                                                                   ***
;***  LLWrite.s                                                                        ***
;***                                                                                   ***
;***  Application:   PCMCIA Support Code Module                                        ***
;***  Version:       0.01                                                              ***
;***                                                                                   ***
;***  By:            William Turner, Acorn Computers Ltd.                              ***
;***  Date:          8th February 1994                                                 ***
;***                                                                                   ***
;***  Purpose:       Contains a machine code routine to sit between the PCMCIA_Write   ***
;***                 and the device driver's write routine.                            ***
;***                 Also contains the default write routines.                         ***
;***                                                                                   ***
;***  History:       0.01 8th February 1994 - Original version                         ***
;***                                                                                   ***
;*****************************************************************************************

;*****************************************************************************************
;***    Export global symbols                                                          ***
;*****************************************************************************************
        EXPORT  LowLevel__Write
        EXPORT  Default_Write_Routine

;*****************************************************************************************
; Register Definitions                                                                 ***
;*****************************************************************************************
r0      RN      0
r1      RN      1
r2      RN      2
r3      RN      3
r4      RN      4
r5      RN      5
r6      RN      6
r7      RN      7
r8      RN      8
r9      RN      9
r10     RN      10
sl      RN      10
r11     RN      11
fp      RN      11
r12     RN      12
ip      RN      12
r13     RN      13
sp      RN      13
r14     RN      14
lr      RN      r14
r15     RN      15
pc      RN      r15


;*****************************************************************************************
;                                                                                      ***
; General Definitions                                                                  ***
;                                                                                      ***
;*****************************************************************************************
Access_32_bit   *       8
Access_16_bit_U *       4
Access_16_bit_L *       2
Access_8_bit    *       1

Bit_8           *       0
Bit_16_low      *       1
Bit_16_high     *       2
Bit_32          *       3

Attribute_bit   *       1<<5
Scatter_bit	*	1<<4

Upper_Lower_Read_bit  * 1<<1
Upper_Lower_Write_bit * 0<<2

;*****************************************************************************************
; Macro Defininitions                                                                  ***
;*****************************************************************************************
;**** SetAccessMode macro   - Returns data in R0 - All others preserved ***********
        MACRO
        SetAccessMode   $mode
        STMFD   sp!, {r1 - r12}                 ;Stack all our registers, EXCEPT r0!
        MOV     r0, #6                          ;Function 6 in the interface driver
        MOV     r1, #$mode                      ;Select the correct data mode
	MOV	r2, #1<<31			;Ignore R2
;what about r7 (slot handle)? Should be permanently set up from entry block....
        MOV     r12, r9                         ;
        MOV     lr, pc                          ;
        MOV     pc, r10                         ;Call the interface driver!

        LDMFD   sp!, {r1 - r12}                 ;Unstack all our stacked registers
        MEND



;*****************************************************************************************
;***                                                                                   ***
;***    Area name C$$code advisable as wanted to link with C output                    ***
;***                                                                                   ***
;***    Code can begin here                                                            ***
;***                                                                                   ***
;*****************************************************************************************


        AREA    |C$$code|, CODE, READONLY


;*****************************************************************************************
;***                                                                                   ***
;***  LowLevel__Write(write routine address, write routine R12, register block address)***
;***                                                                                   ***
;***  Calls the (possibly device-driver based) write routine that actually transfers   ***
;***  the data from source to destination.                                             ***
;***                                                                                   ***
;***  routine address - obvious really.                                                ***
;***  routine R12     - value of R12 to pass to the routine                            ***
;***  registers       - block of registers (R0-R10) to be passed to the write routine. ***
;***                                                                                   ***
;***  Return:                                                                          ***
;***    NO_ERROR, if function performed sucessfully.                                   ***
;***    ERROR_MESSAGE, if error occured.                                               ***
;***                                                                                   ***
;*****************************************************************************************
LowLevel__Write

        STMFD   sp!, {r4 - r12, lr}             ;Stack regs on entry
        STR     r2, [sp, #-4]!                  ;Store the ptr to the reg block seperately

        MOVS    r11, r0                         ;Put write routine addr into R11 & check if zero
        ADREQ   r11, Default_Write_Routine      ;Use the default write routine if zero.

        MOV     r12, r1                         ;Copy routine R12 ino R12

        ADD     r0, r2, #4                      ;R0 points to reg. R1 in reg. block
        LDMIA   r0, {r1 - r8}                  ;Copy reg. block into actual regs.
	MOV	r9, r6                            ;
	MOV	r10, r5				  ;Can't be bothered rewriting the job lot...

        MOV     lr, pc                          ;Set return address for write routine
;*** At moment, no check that stack is min. of 256 bytes *********************************
        MOV     pc, r11                         ;And go!


;*****************************************************************************************
;***    Write routine returns here once it has done its work                           ***
;***                                                                                   ***
;***    R0     = Pointer to error block (if V set), else 0                             ***
;***    R1, R2 = Preserved                                                             ***
;***    R3     = Amount transferred                                                    ***
;***    R4     = Amount untransferred                                                  ***
;*****************************************************************************************
LowLevel__Write_Return

        LDR     r2, [sp], #4                    ;Pop R2 into R2 (ptr to reg. block)

        MVNVC   r0, #0                          ;R0 is 'NO_ERROR' if no error occured

        STR     r0, [r2, #0]                    ;Store R0 in the reg. block
        STR     r3, [r2, #12]                   ;Store R3 in the reg. block
        STR     r4, [r2, #16]                   ;Store R4 in the reg. block

        LDMFD   sp!, {r4 - r12, pc}^            ;Back to the C






;*** Default write routine for memory cards *********************************

Default_Write_Routine

        STMFD   sp!, {r0 - r2, r5 - r11, lr}             ;Stack R0 to R11, lr


        TST     r1, #Attribute_bit              ;Are we accessing Attribute memory?
        MOVNE   r8, #1                          ;if so, we can only do 8-bit accesses


;** The actual write routines use r2, r3, r4 for src, dest, num.
;** r7 - r10 are set up for interface driver calls on entry.
;** All other registers are freely usable.

        TST     r8, #Access_32_bit              ;32-bit access available?
        BNE     Default_Write_Routine_32           ;if so, use it

        TST     r8, #Access_16_bit_U            ;Upper byte 16-bit access available?
        BNE     Default_Write_Routine_16           ;if so, use it

        TST     r8, #Access_16_bit_L            ;Lower byte 16-bit access available?
        BNE     Default_Write_Routine_16           ;if so, use it

        ;If none available, drop through to 8-bit


;*********************
Default_Write_Routine_8
        TEQ     r4, #0                          ;check we have something to do
        BEQ     Label8                          ;If not, end

        SetAccessMode   Bit_8

        CMP     r1, #Attribute_bit              ;Attribute mode?
        MOVEQ   r1, #2                          ;If so, item offset is 2 (even bytes only)
        MOVNE   r1, #1                          ;R1 contains the next item offset

Loop8   LDRB    r0, [r3], #1                    ;Read a byte from R3, R3++
        STRB    r0, [r2], r1                    ;store the self-same byte at R2, R2++R1
        SUBS    r4, r4, #1                      ;one less to transfer now
        BNE     Loop8                           ;do another?

Label8  LDMFD   sp!, {r0 - r2, r5 - r11, lr}             ;Unstack R0 to R11, lr

        MOV     pc, lr                          ;Back to the other routine



;***********************
Default_Write_Routine_16

        SetAccessMode   Bit_16_low              ;Just to get the data layout info!

        B       copy_bytes_16


Label16
        LDMFD   sp!, {r0 - r2, r5 - r11, lr}             ;Unstack R0 to R11, lr
        MOV     pc, lr


copy_bytes_16
        TEQ     r4, #0                          ;check we have something to do
        BEQ     Label16                         ;If not, end

        TST     r2, #3                          ;Destination word aligned?
        BNE     aligndest_16                       ;If not, go sort it out


label16_02                                      ;Destination now word aligned
        AND     r11, r4, #3                     ;Store the number of bytes over a word in r11
        BIC     r4, r4, #3                      ;round r4 down to the nearest word multiple
        TEQ     r4, #0                          ;Do we have less than 4 bytes to put?
        BEQ     trailing16                       ;If so, go to the end bit
        TST     r3, #3                          ;Is the source 0 bytes out?
        BEQ     bytes0out16                      ;If so, go do the copy
        TST     r3, #2                          ;Source 1 byte out (ie xDDD DDDD <etc>)
        BEQ     bytes1out16                        ;If so, go do the copy
        TST     r3, #1                          ;Source 2 bytes out (ie xxDD DDDD <etc>)
        BEQ     bytes2out16                        ;If so, go do the copy


bytes3out16                                     ;None of the above, :. must be 3 bytes out
        BIC     r3, r3, #3                      ;Make source word-aligned
        STMFD   sp!, {r2, r3, r4}               ;Stack src, dest, amount
        SetAccessMode   Bit_16_low              ;Set to write the lower 16 bits

bytes3a
        LDR     r5, [r3], #4                    ;Read high pair & point to next word
        MOV     r5, r5, LSR #24                 ;Move it down 3 bytes (thus clearing unwanted bytes)
        LDR     r6, [r3]                        ;Read low pair from the next word
        ORR     r5, r5, r6, LSR #8              ;Combine the two (DDxx)
        STR     r5, [r2], #4                    ;Stuff it away
        SUBS    r4, r4, #4                      ;4 less to do (yes, 4 :-)
        BNE     bytes3a

        SetAccessMode   Bit_16_high             ;Set to write the upper 16 bits
        LDMFD   sp!, {r2, r3, r4}               ;Unstack the originals
        ADD     r3, r3, #4                      ;Increase src to point to 1st full word
bytes3b
        LDR     r5, [r3], #4                    ;Read source word & point to next word
        MOV     r5, r5, LSR #8                  ;Now we have DDxx
        TST     r0, #Upper_Lower_Write_bit      ;Do we want it DDxx or xxDD?
        MOVNE   r5, r5, LSL #16                 ;If xxDD, move it!
        STR     r5, [r2], #4                    ;Stuff the end result away
        SUBS    r4, r4, #4                      ;4 less bytes to do
        BNE     bytes3b

        ADD     r3, r3, #3                      ;Un-word align R3
        B       trailing16





bytes2out16
        BIC     r3, r3, #3                      ;Make r2 word-aligned
        STMFD   sp!, {r2, r3, r4}
        SetAccessMode   Bit_16_low              ;Set to write the lower 16 bits

bytes2a
        LDR     r5, [r3], #4                    ;Read the source from memory
        MOV     r5, r5, LSR #16                 ;We're interested in the upper 16 bits
        STR     r5, [r2], #4
        SUBS    r4, r4, #4                      ;We've stored 4 bytes (oh, yes we have!)
        BNE     bytes2a

        SetAccessMode   Bit_16_high             ;Set to write the upper 16 bits
        LDMFD   sp!, {r2, r3, r4}               ;Restore the originals

        ADD     r3, r3, #4                      ;We start on the word above the high bytes

bytes2b
        LDR     r6, [r3], #4                    ;Read source (interested in lower 16 bits)
        TST     r0,#Upper_Lower_Write_bit       ;To write, upper or lower 16-bits?
        MOVNE   r5, r5, LSL #16                 ;If to be sent in upper, move it!
        STR     r5, [r2], #4
        SUBS    r4, r4, #4                      ;2 16-bit values stored :. 4 bytes less left
        BNE     bytes2b

        ADD     r3, r3, #2
        B       trailing16                      ;r3 pts to correct _word_, must +2




bytes1out16
        BIC     r3, r3, #3                      ;Make source word-aligned
        STMFD   sp!, {r2, r3, r4}               ;Stack src, dest, amount
        SetAccessMode   Bit_16_low              ;Set to write the lower 16 bits

bytes1a
        LDR     r5, [r3], #4                    ;Read source word & point to next word
        MOV     r5, r5, LSR #8                  ;Move it down 1 byte (DDxx)
        STR     r5, [r2], #4                    ;Stuff it away
        SUBS    r4, r4, #4                      ;4 less to do (oh yes it is!)
        BNE     bytes1a

        SetAccessMode   Bit_16_high             ;Set to read the upper 16 bits
        LDMFD   sp!, {r2, r3, r4}               ;Unstack the originals
bytes1b
        LDR     r5, [r3], #4                    ;Read source word & point to next word
        MOV     r5, r5, LSR #24                 ;Now have Dxxx
        LDR     r6, [r3]                        ;Read the first byte of the next word
        ORR     r5, r5, r6, LSL #8              ;Combine to get DDxx
        TST     r0, #Upper_Lower_Write_bit      ;Want it in upper/lower 16 bits?
        MOVNE   r5, r5, LSL #16                 ;If upper, put it there!
        STR     r5, [r2], #4                    ;Stuff the end result away
        SUBS    r4, r4, #4                      ;4 less bytes to do
        BNE     bytes1b

        ADD     r3, r3, #1                      ;Un-word align R2
        B       trailing16



bytes0out16
        STMFD   sp!, {r2, r3, r4}
        SetAccessMode   Bit_16_low              ;First do all the 'low' 16-bits

bytes0a
        LDR     r5, [r3], #4                    ;Read low pair & point to next word
        STR     r5, [r2], #4                    ;Store low pair &  "    "   "    "
        SUBS    r4, r4, #4                      ;2 16-bit values stored (supposedly!)
        BNE     bytes0a                         ;Keep going until all done

        SetAccessMode   Bit_16_high             ;Now for the 'high' 16-bits
        LDMFD   sp!, {r2, r3, r4}               ;Pop the originals back

bytes0b
        LDR     r6, [r3], #4                    ;Read high pair from source, & point to next word

        TST     r0, #Upper_Lower_Write_bit
        MOVEQ   r6, r6, LSR #16                 ;If to be sent in lower 16 bits, put into lower 16 bits
        STR     r6, [r2], #4
        SUBS    r4, r4, #4                      ;2 16-bit values stored
        BNE     bytes0b                         ;Keep going until all done

        B       trailing16                      ;r3 pts to correct word, must +0



trailing16
;on entry r3 points to correct byte to read from, r2 to correct byte to write to
;r11 is the number of bytes to transfer
        CMP     r11, #0                         ;Do we need to do anything?
        BEQ     Label16                           ;No, so branch away

        SetAccessMode   Bit_8                   ;Change to 8-bit mode

traillp LDRB    r5, [r3], #1
        STRB    r5, [r2], #1
        SUBS    r11, r11, #1
        BNE     traillp
        B       Label16                         ;Note, still in 8-bit mode


aligndest_16
        SetAccessMode   Bit_8
label16_01
        LDRB    r0, [ r3 ], #1
        STRB    r0, [ r2 ], #1
        SUBS    r4, r4, #1
        BEQ     Label16                         ;Finished - Note, will still be in 8-bit data mode

        TST     r2, #3                          ;Are we still un-aligned on the destination (card)?
        BNE     label16_01                      ;if so, do it again
        B       label16_02                      ;else go back












;**********************
Default_Write_Routine_32

	STMFD	sp!, {r3,r4}
        MOV     r1, r3
        MOV     r2, r2                          ;I know this does nothing, but it is useful to see!
        MOV     r3, r4                          ;Move the src, dest, amnt into r1, r2, r3
        B       copy_bytes_32                   ;Call the copy_bytes routine

Label32
	LDMFD	sp!, {r3,r4}
	ADD	r3, r3, r4			; Ie return dest+amnt wanted to read in r3
	MOV	r4, #0				; All read!
        LDMFD   sp!, {r0 - r2, r5 - r11, lr}

        MOV     pc, lr


;***************************** copy_bytes_32 ROUTINE

; This is a highly optimised routine to move blocks of memory
; It will deal with unword-aligned source and destinations

; copied (& modified) from pages 1000 to 1005 of RISC OS 2.00 PRMs (Volume III)

; R1 -> source
; R2 -> destination
; R3 = number of bytes to copy

;**************************************************************************
; Any bytes to copy ?
;--------------------------
     TEQ     r3, #0
     BEQ     Label32    ;Nope!
;--------------------------

copy_bytes_32

     TST r2, #3
     BNE MovByt100                  ; destination not word aligned

MovByt20       ; destination now word aligned. branched back to from below

     SetAccessMode      Bit_32      ;Set us to 32-bit data access

     TST r1, #3
     BNE MovByt200                  ; source not word aligned

; source & destination are now both word aligned
; count is a byte value ( may not be a whole number of words )

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4         ; Four whole words to do (or more) ?
     BLT MovByt40                      ; no

     SUBS r3, r3, #8 * 4 - 4 * 4 ; Eight whole words to do (or more) ?
     BLT MovByt30


MovByt25

     LDMIA r1!, { r0, r4 - r9, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r9, r14 }

     SUBS r3, r3, #8 * 4
     BGE MovByt25                      ; do another 8 words

     CMP r3, #-8 * 4                ; Quick test rather that chaining down
     BEQ Label32        ; finished


MovByt30

     ADDS r3, r3, #8 * 4 - 4 * 4 ; Four whole words to do ?
     BLT MovByt40

     LDMIA r1!, { r0, r4 - r5, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r4 - r5, r14 }

     BEQ Label32        ; finished

     SUB r3, r3, #4 * 4


MovByt40

     ADDS r3, r3, #4 * 4 - 2 * 4   ; Two whole words to go ?
     BLT MovByt50

     LDMIA r1!, { r0, r14 } ; NB. Order ! (?)
     STMIA r2!, { r0, r14 }

     BEQ Label32         ; finished

     SUB r3, r3, #2 * 4


MovByt50

     ADDS r3, r3, #2*4-1*4       ; One whole word to do ?
     BLT MovByt60

     LDR r0, [ r1 ], #4
     STR r0, [ r2 ], #4

     BEQ Label32        ; finished

     SUB r3, r3, #1 * 4


MovByt60

     ADDS r3, r3, #1*4 - 0*4      ; No more to do ?
     BEQ Label32         ; finished

     LDR r0, [ r1 ]           ; store remaining 1,2 or 3 bytes


MovByt70


     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt70

     B Label32                 ; finished



;Initial destination not word aligned.Loop doing bytes(1,2, or 3 )until it is

MovByt100

     SetAccessMode      Bit_8

MovByt100a
     LDRB r0, [ r1 ], #1
     STRB r0, [ r2 ], #1
     SUBS r3, r3, #1
     BEQ Label32               ; finished - Note, will still be in 8-bit data mode

     TST r2, #3
     BNE MovByt100a

     B MovByt20                      ; Back to mainline code (change to 32-bit there)


MovByt200;destination now word aligned,but source isn't. just r14 stacked here

     AND r12, r1, #3       ; offset
     BIC r1, r1, #3      ; Align source

     MOV r12, r12, LSL #3    ; rshft = 0, 8, 16 or 24 only

     RSB r11, r12, #32       ; lshft = 32, 24, 16 or 8 only

     LDR r0, [ r1 ], #4
     MOV r0, r0, LSR r12 ; Always have r0 prepared

; Quick sort out of what we've got left to do

     SUBS r3, r3, #4 * 4       ; Four whole words to do (or more) ?
     BLT MovByt240                   ; no

     SUBS r3, r3, #8*4-4*4     ; Eight whole words to do (or more) ?
     BLT MovByt230                   ; no



MovByt225

     LDMIA r1!, { r4 - r10, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r7, LSL r11

     MOV r7, r7, LSR r12
     ORR r7, r7, r8, LSL r11

     MOV r8, r8, LSR r12
     ORR r8, r8, r9, LSL r11

     MOV r9, r9, LSR r12
     ORR r9, r9, r10, LSL r11

     MOV r10, r10, LSR r12
     ORR r10, r10, r14, LSL r11

     STMIA r2!, { r0, r4 - r10 }

     MOV r0, r14, LSR r12          ; keep r0 prepared

     SUBS r3, r3, #8 * 4
     BGE MovByt225                            ; do another 8 words

     CMP r3, #-8 * 4                       ; Quick test
     BEQ Label32


MovByt230

     ADDS r3, r3, #8*4 - 4*4             ; Four whole words to do ?
     BLT MovByt240

     LDMIA r1!, { r4 - r6, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r5, LSL r11

     MOV r5, r5, LSR r12
     ORR r5, r5, r6, LSL r11

     MOV r6, r6, LSR r12
     ORR r6, r6, r14, LSL r11

     STMIA r2!, { r0, r4 - r6 }

     BEQ Label32

     SUB r3, r3, #4*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt240

     ADDS r3, r3, #2*4           ; Two whole words to do ?
     BLT MovByt250


     LDMIA r1!, { r4, r14 } ; NB. Order !
     ORR r0, r0, r4, LSL r11

     MOV r4, r4, LSR r12
     ORR r4, r4, r14, LSL r11

     STMIA r2!, { r0, r4 }

     BEQ Label32


     SUB r3, r3, #2*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt250

     ADDS r3, r3, #2*4 - 1*4     ; One whole word to go ?
     BLT MovByt260

     LDR r14, [ r1 ], #4
     ORR r0, r0, r14, LSL r11

     STR r0, [ r2 ], #4

     BEQ Label32

     SUB r3, r3, #1*4
     MOV r0, r14, LSR r12   ; keep r0 prepared


MovByt260

     ADDS r3, r3, #1*4 - 0*4
     BEQ Label32

     LDR r14, [ r1 ]          ; store remaining 1..3 bytes
     ORR r0, r0, r14, LSL r11


MovByt270

     STRB r0, [ r2 ], #1
     MOV r0, r0, LSR #8
     SUBS r3, r3, #1
     BGT MovByt270

     B Label32


;***************************** END OF INSERTED ROUTINE





        END

