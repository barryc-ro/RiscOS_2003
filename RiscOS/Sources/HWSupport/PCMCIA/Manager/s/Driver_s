
;*****************************************************************************************
;***                                                                                   ***
;***  Driver.s                                                                         ***
;***                                                                                   ***
;***  Application:   PCMCIA Support Code Module                                        ***
;***  Version:       0.01                                                              ***
;***                                                                                   ***
;***  By:            Neil Critchell, Acorn Computers Ltd.                              ***
;***  Modified:      WTurner, 9th June 1994                                            ***
;***  Date:          20th August 1993                                                  ***
;***                                                                                   ***
;***  Purpose:       Contains machine code routines to support the Driver.C module.    ***
;***                 Some of the routines need to be written in machine code, whilst   ***
;***                 others are here for speed.                                        ***
;***                                                                                   ***
;***  History:       0.01 20th August 1993 - Original version                          ***
;***                                                                                   ***
;***                                                                                   ***
;*****************************************************************************************






;*****************************************************************************************
;***                                                                                   ***
;***    Export global symbols                                                          ***
;***                                                                                   ***
;*****************************************************************************************

        EXPORT  HardwareFunction
        EXPORT  PCCardFunction




;*****************************************************************************************
;***                                                                                   ***
;***    Importted global symbols                                                       ***
;***                                                                                   ***
;*****************************************************************************************





;*****************************************************************************************
;
; Register Definitions
;
;*****************************************************************************************

r0      RN      0
r1      RN      1
r2      RN      2
r3      RN      3
r4      RN      4
r5      RN      5
r6      RN      6
r7      RN      7
r8      RN      8
r9      RN      9
r10     RN      10
sl      RN      10
r11     RN      11
fp      RN      11
r12     RN      12
ip      RN      12
r13     RN      13
sp      RN      13
r14     RN      14
lr      RN      r14
r15     RN      15
pc      RN      r15

; Use the FN directive to define floating point register names

f0      FN      0
f1      FN      1
f2      FN      2
f3      FN      3
f4      FN      4
f5      FN      5
f6      FN      6
f7      FN      7





;*****************************************************************************************
;***                                                                                   ***
;***    Constants                                                                      ***
;***                                                                                   ***
;*****************************************************************************************

I_bit_number    *       27
F_bit_number    *       26
I_bit           *       1 :SHL: I_bit_number
F_bit           *       1 :SHL: F_bit_number


USR_mode        *      2_00                    ; Processor mode bits
FIQ_mode        *      2_01
IRQ_mode        *      2_10
SVC_mode        *      2_11


IOC             *       &03200000
IOCIRQMSKB      *       &28                     ;       Mask
podule_IRQ_bit  *       1 :SHL: 5               ; Podule IRQ request

HostFS_WriteC   *       &40102





;*****************************************************************************************
;***                                                                                   ***
;***    Various macros used by this code.                                              ***
;***        - CLRV              clears V flag                                          ***
;***        - SETV              sets V flags                                           ***
;***                                                                                   ***
;*****************************************************************************************


;   *************************************************************************************
;   ***         Clear overflow flag - will set nzCv ***                               ***
;   *************************************************************************************

        MACRO
$label  CLRV    $cond
$label  CMP$cond pc, #0
        MEND

;   *************************************************************************************
;   ***  Set overflow flag - will set NzcV  ***                                       ***
;   *************************************************************************************

        MACRO
$label  SETV    $cond
$label  CMP$cond pc, #&80000000
        MEND






;*****************************************************************************************
;***                                                                                   ***
;***    Data Structures, copied from 'C'  - update these as well as 'C' versions       ***
;***                                                                                   ***
;*****************************************************************************************


Reg0                                            EQU      0
Reg1                                            EQU      4
Reg2                                            EQU      8
Reg3                                            EQU     12
Reg4                                            EQU     16
Reg5                                            EQU     20
Reg6                                            EQU     24
Reg7                                            EQU     28
Reg8                                            EQU     32
Reg9                                            EQU     36



;*****************************************************************************************
;***                                                                                   ***
;***    Area name C$$code advisable as wanted to link with C output                    ***
;***                                                                                   ***
;***    Code can begin here                                                            ***
;***                                                                                   ***
;*****************************************************************************************


        AREA    |C$$code|, CODE, READONLY





;*****************************************************************************************
;***                                                                                   ***
;***  DriverFunction(function, registers, DriverErrorPointer)                          ***
;***                                                                                   ***
;***  Calls the driver; performing the specified function. This should only be called  ***
;***  after calling "SetUpDriverCalls" as the neccesary information will already have  ***
;***  been obtained and placed in the registers r7 - r10.                              ***
;***                                                                                   ***
;***                                                                                   ***
;***  function  - driver's function value. Put into R0 before driver called.           ***
;***  registers - an array of registers (_kernel_swi_registers), which to set the      ***
;***              register values to.                                                  ***
;***  DriverErrorPointer - An error pointer, which is set when an error occured.       ***
;***                                                                                   ***
;***  (NB. Routine is written in Assembler, but looks and acts as a 'C' rouitne.)      ***
;***                                                                                   ***
;***  Return:                                                                          ***
;***    NULL, if function performed sucessfully.                                       ***
;***    ERROR_MESSAGE, if error occured.                                               ***
;***                                                                                   ***
;*****************************************************************************************

HardwareFunction

        STMFD   sp!, {r4 - r12, lr}
        STR     r2, [sp, #-4]!                  ; store r2 separately

        ADD     r11, r1, #4                     ; point to registers, offset r1
        LDMIA   r11, {r1 - r10}                 ; copy all registers values into actual registers
                                                ; R0 set when function entered.
        SUB     r11, r11, #4                    ; point to registers, offset r0

        MOV     r12, r9                         ; Set the private word pointer for driver
        MOV     lr, pc                          ; Setup return address  - Do not LDR/ADR this value
        MOV     pc, r10                         ; Call the driver NOW!




;*****************************************************************************************
;***    The driver should return control back here. The return values are:....         ***
;***                                                                                   ***
;***    R0 - R6 = returned parameters.                                                 ***
;***    R8 0    = Function execueted correctly                                         ***
;***    R8 !0   = Function returned error, R8 = pointer to error block                 ***
;***                                                                                   ***
;*****************************************************************************************
DriverFunction_Return

        LDR     r9, [sp], #4                    ; restore r2 value, into r9

        CMP     r8, #0                          ; check if error occured
        STMEQIA r11, {r0 - r6}                  ; copy all return values into register block but only
                                                ; if no error occured, R7 not changed

        STRNE   r8, [r9, #0]                    ; store the error condition in the variable

        MOV     r0, r8                          ; Return NULL if, sucessful - Non NULL if error
        LDMFD   sp!, {r4 - r12, pc}^




;*****************************************************************************************
;***                                                                                   ***
;***  DeviceFunction(call address, R12 value, register block ptr)                      ***
;***                                                                                   ***
;***  Calls the device driver via the address specified in the function call.          ***
;***                                                                                   ***
;***  address   - driver's call address.                                               ***
;***  registers - an array of registers (_kernel_swi_registers), which to set the      ***
;***              register values to (R0-R7)                                           ***
;***                                                                                   ***
;***  (NB. Routine is written in Assembler, but looks and acts as a 'C' rouitne.)      ***
;***                                                                                   ***
;***  Return:                                                                          ***
;***    NULL, if function performed sucessfully.                                       ***
;***    ERROR_MESSAGE, if error occured.                                               ***
;***                                                                                   ***
;*****************************************************************************************

PCCardFunction

        STMFD   sp!, {r4 - r12, lr}
        MOV     r11, r0                         ; Stuff call address in R11
        MOV     r12, r1                         ; Set the private word pointer for driver
	MOV	r10, r2				; Remember the reg bas addr

        LDMIA   r10, {r0 - r7}                  ; copy all registers values into actual registers

        MOV     lr, pc                          ; Setup return address  - Do not LDR/ADR this value
        MOV     pc, r11                         ; Call the driver NOW!




;*****************************************************************************************
;***    The driver should return control back here. The return values are:....         ***
;***                                                                                   ***
;***    R0 - R5 = returned parameters.                                                 ***
;***    V clear = Function execueted correctly                                         ***
;***    V set   = Function returned error, R0 = pointer to error block                 ***
;***                                                                                   ***
;*****************************************************************************************
PCCardFunction_Return

        MOVVS   r6, r0                          ; Put error pointer in R6 if error
        MOVVC   r6, #0                          ; Zero it otherwise (it was only the reason code)

        STMIA   r10, {r0 - r7}                  ; copy all return values into register block

        LDMFD   sp!, {r4 - r12, pc}^




        END
