
; OSS Message file handling code, created for Internationalisation.
; The workspace usage in WaveSynth is somewhat unconventional, which
; means that I can't easily use the workspace to open the Messages
; file so I open and close it on demand on the stack.


; Lookup a string in the message file, and return a direct pointer to it.
; If file handle (R11) is zero then return zero as looked up string.
; Entry: R0 -> Token
;        R11 -> message file block
; Exit:  R0 -> String or V set error return

lookup_zero_file_r11 Entry "r1-r7"
        MOV     r1, r0                          ; Token
        SUBS    r0, r11, #0                     ; File handle (clears V!)
        EXIT    EQ                              ; No file so return zero

        MOV     r2, #0                          ; Direct pointer please
        MOV     r4, #0                          ; No %0
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_Lookup
        MOVVC   r0, r2                          ; Result if no error
        EXIT


; OSS Size of temporary block for when we do a lookup with subsitution.

temp_block_size         *       512


; OSS Print a GS Transed string from the Messages file, with four parameters.
; Temporarily claims a block of RMA for the buffer. The 16 bytes of stack
; is to pass down to the open/close message file functions for them to use
; for the stupid 16 byte MessageTrans block. This is held in R11.

; In:           r0 -> token
;               r1 -> %0
;               r11 -> 16 byte file block
; Out:          r0 undefined, all other registers preserved, flags undefined
; Error:        r0 -> error block, V set

gs_lookup_print_string_one_file_r11 Entry "r1-r7"
        TEQ     r11, #0
        BNE     %FT10
        SWI     XOS_Write0                      ; No file so print the token
        SWIVC   XOS_NewLine                     ; and an LF/CR pair.
        EXIT
10

; Move input parameters. "Fortunately", OS_Module Claim needs r0, r2 and r3
; which just "happen" to be the ones we don't need yet. (I spy careful design
; of the MessageTrans interface!)

        MOV     r4, r1                          ; -> %0
        MOV     r1, r0                          ; Message token

; Claim the temporary block

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #temp_block_size
        SWI     XOS_Module
        BLVS    close_message_file_r11          ; Preserves R0 and V set
        EXIT    VS

; r2 -> block, r3 = size of block as required by MessageTrans

        MOV     r0, r11                         ; Message file handle in R11
        MOV     r5, #0                          ; -> No %1
        MOV     r6, #0                          ; -> No %2
        MOV     r7, #0                          ; -> No %3
        SWI     XMessageTrans_GSLookup
        MOVVS   r6, r0                          ; Squirrel error away
        BVS     free_block
        MOV     r6, #0                          ; Flag no error

; Now print the string from the block

        MOV     r0, r2                          ; Resulting string
        MOV     r1, r3                          ; String length
        SWI     XOS_WriteN
        MOVVS   r6, r0                          ; Squirrel error away

free_block ; r2 still points to the block!

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        TEQ     r6, #0                          ; Was there an earlier error?
        EXIT    EQ
        MOV     r0, r6                          ; Restore it and set V
        SETV
        EXIT


message_filename
        DCB     "Resources:$.Resources.WaveSynth.Messages", 0
        ALIGN


; Open the message file, using the 16 byte block passed in R11.
; Preserves all registers, if error then R0->error block, V set.

open_message_file_r11 Entry "r0-r2"
        MOV     r0, r11                         ; Block passed for file
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile          ; Open the file
        STRVS   r0, [sp]
        MOVVS   r11, #0                         ; Set handle to 0 on error
        EXIT


; Close the message file block passed in R11 (or ignore if 0).
; Preserves all registers, if error then R0->error block, V set.

close_message_file_r11 Entry "r0"
        SUBS    r0, r11, #0                     ; File handle (clears V!)
        EXIT    EQ                              ; No file so return.

        SWI     XMessageTrans_CloseFile         ; Close the file.
        STRVS   r0, [sp]
        EXIT

        END
