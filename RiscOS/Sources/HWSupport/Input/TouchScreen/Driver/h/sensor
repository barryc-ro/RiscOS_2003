



#ifndef  _SENSOR_H
#define  _SENSOR_H


typedef enum pressure_level  {ZERO, VLIGHT, LIGHT, FIRM} PRESSURE_LEVEL;
typedef enum pressure_status {INCREASING, DECREASING, STATIC} PRESSURE_STATUS;



typedef enum measurement_type {CONFIGURED_FOR_X_MEASUREMENT,
        		       CONFIGURED_FOR_Y_MEASUREMENT,
        		       CONFIGURED_FOR_RESISTANCE_MEASUREMENT,
        		       CONFIGURED_FOR_PRESSURE_MEASUREMENT
} MEASUREMENT_TYPE;



// sensor is an abstract class used to describe the fundamental properties
// of all sensors.
class sensor
{
     protected:
        void measurement(void);
        MEASUREMENT_TYPE type;
        unsigned int measurement_data;

};


// used to measure x-position
class x_sensor : public sensor
{
     public:
        x_sensor();
        unsigned int get_x_position(void);
};

// used to measure y-position
class y_sensor : public sensor
{
     public:
        y_sensor();
        unsigned int get_y_position(void);

};


// used to measure pressure
class pressure_sensor : public sensor
{
    public:
       pressure_sensor();
       PRESSURE_LEVEL get_pressure_level(void);
       void set_light_threshold(unsigned int p) {light_pressure_threshold = p;}
       void set_firm_threshold(unsigned int p)  {firm_pressure_threshold = p;}
      private:
       unsigned int vlight_pressure_threshold;
       unsigned int light_pressure_threshold;
       unsigned int firm_pressure_threshold;
};



// used to measure resistance
class resistance_sensor : public sensor
{
    public:
       resistance_sensor();
       unsigned int get_resistance();
};


#endif



