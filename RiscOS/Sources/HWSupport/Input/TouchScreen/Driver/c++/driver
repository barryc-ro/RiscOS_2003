/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/

#include <stdbool.h>
#include "touchscr.h"
#include "display.h"

#include "driver.h"
#include "module.h"
#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "swis.h"
#include "halveneer.h"

extern "C" {
#include "header.h"
}


extern "C" void ______main();

int Driver(_kernel_swi_regs *r, void *pw);

static unsigned monotime()
{
    unsigned t;
    _swix(OS_ReadMonotonicTime, _OUT(0), &t);
    return t;
}

// local function prototypes
static PRESSURE_STATUS pressure_gradient(PRESSURE_LEVEL &current_pressure,
                                         PRESSURE_LEVEL last_pressure);

static void inform_kernel(unsigned int x, unsigned int y);


// local macros
#define LEFT_MOUSE_BUTTON(states)       (states & 4)
#define MIDDLE_MOUSE_BUTTON(states)     (states & 2)
#define RIGHT_MOUSE_BUTTON(states)      (states & 1)

#define BYTE_1(x)     ((x) & 0x000000ff)
#define BYTE_2(x)    (((x) & 0x0000ff00) >> 8)


// these are defined here, but mouse button values may be already be defined in a .h file.
#define LEFT_MOUSE_BUTTON_KEYCODE    0x70
#define MIDDLE_MOUSE_BUTTON_KEYCODE  0x71
#define RIGHT_MOUSE_BUTTON_KEYCODE  0x72
#define PROG_KEYCODE 0x7e
#define FN_KEYCODE   0x7f



display     display_device;      // create a display object
touchscreen tscreen;             // create a touchscreen object
void *module_pw;

unsigned int timer1_rate, timer1_device;

static bool prog_down, fn_down;

int keyevent_handler(_kernel_swi_regs *r, void *pw)
{
    int key = r->r[2];
    int down = r->r[1];

    (void)pw;

    if (key != FN_KEYCODE && key != PROG_KEYCODE)
        return 1;

    if (down != 0 && down != 1)
        return 1;

    if (key == PROG_KEYCODE)
        prog_down = down;
    else
        fn_down = down;

    return 1;
}

#ifdef USE_TIMER1
_kernel_oserror *timer1_handler(_kernel_swi_regs *, void *)
{
    HAL_IRQClear(timer1_device);
    tscreen.ticker();
    return NULL;
}
#else
int tickerv_handler(_kernel_swi_regs *, void *)
{
    tscreen.ticker();

    return 1;
}
#endif

_kernel_oserror *irq_handler(_kernel_swi_regs *, void *)
{
    tscreen.irq();
    return NULL;
}


int pointerv_handler(_kernel_swi_regs *r, void *pw)
{
#ifdef TEST
     return Driver(r, pw);
#else

     switch (r->r[0])
     {
        case 0:
          if (r->r[1] != POINTER_TYPE)
            return 1;
          return Driver(r, pw);
        case 1:
        {
          pointer_record *record_ptr = NULL;
          int record_size = sizeof(pointer_record) + strlen(POINTER_NAME);
          _swix(OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, record_size, &record_ptr);
          if (record_ptr)
          {
              record_ptr->next = (pointer_record *) r->r[1];
              record_ptr->device_flags = 0;
              record_ptr->device_type = POINTER_TYPE;
              strcpy(&record_ptr->device_name, POINTER_NAME);
              r->r[1] = (int) record_ptr;
              return 1;
          }
        }
        case 2:
          /* Should activate and deactivate here. Kernel bug - doesn't call on boot? */
          break;

        default:
          ;
     }

     return 1;

#endif
}

/*************************************************************************************
   Driver currently runs off PointerV. Its operation is quite straight forward,
   simply determine if the screen is being touched with sufficient tscreen.pressure, if it is,
   then report to the OS where the screen is being touched.
**************************************************************************************/
int Driver(_kernel_swi_regs *r, void *)
{

     TOUCH_SCREEN_POSITION           touched_position;         // will contain data returned by HAL
     DISPLAY_POSITION                display_position;         // will contain HAL data translated to pixels
     static TOUCH_SCREEN_POSITION    last_position;
     static PRESSURE_LEVEL           last_pressure = ZERO;
     PRESSURE_LEVEL                  current_pressure;
     PRESSURE_STATUS                 status;
     static bool                     left_down, middle_down, right_down;
     static unsigned                 last_press_time;
     static bool                     new_left, new_middle, new_right;
     static bool                     active;
     int                             irqs_off;

     if (!display_device.is_calibrated())
         return 1;

     // report button changes from last call (ensuring moves always happen first)
     // order is significant - we want left-button changes to happen first so
     // any changes from left to middle don't overlap (causing spurious double-clicks).
     if (left_down != new_left)
     {
        left_down = new_left;
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), left_down ? KeyV_KeyDown : KeyV_KeyUp,
                                                LEFT_MOUSE_BUTTON_KEYCODE, KeyV);
     }

     if (middle_down != new_middle)
     {
        middle_down = new_middle;
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), middle_down ? KeyV_KeyDown : KeyV_KeyUp,
                                                MIDDLE_MOUSE_BUTTON_KEYCODE, KeyV);
     }

     if (right_down != new_right)
     {
        right_down = new_right;
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), right_down ? KeyV_KeyDown : KeyV_KeyUp,
                                                RIGHT_MOUSE_BUTTON_KEYCODE, KeyV);
     }

     if (!tscreen.is_reporting())
         return 1;

     irqs_off = _kernel_irqs_disabled();
     if (!irqs_off)
        _kernel_irqs_off();

     if (active)  // don't re-enter ourselves
     {
         if (!irqs_off) _kernel_irqs_on();
         return 1;
     }

     /* Atomic read of p,x,y */
     current_pressure = tscreen.pressure_measure.get_pressure_level(tscreen.p);
     touched_position.x = tscreen.x;
     touched_position.y = tscreen.y;


     active = true;
     _kernel_irqs_on();  // enable interrupts - we may be some time

     status = pressure_gradient(current_pressure, last_pressure);
     // here we need to convert the measured x and y data to a screen position
     display_position = display_device.translate_position(touched_position);


     if(current_pressure != ZERO)
     {
        /* If pressure is "NONZERO", measurements are likely to be reliable, so don't send
         * any position updates. Keep the buttons held down until we reach "ZERO" though.
         */
        if (current_pressure >= VLIGHT)
        {
            // if clicking always report position, else only report if moved by more than 4 units
            if (status == INCREASING || display_device.significant_change(last_position, touched_position))
            {
#ifdef TEST
            // inform the os where the screen was pressed
            inform_kernel(display_position.x, display_position.y);
#else
            r->r[2] = display_position.x;
            r->r[3] = display_position.y;
            r->r[4] = 0x6F736241; /* Magic word: "Abso" - indicates absolute coordinates */
#endif
            last_position = touched_position;
            }
        }

        if(status == INCREASING && current_pressure >= LIGHT)
        {
           if(!left_down && !middle_down && !right_down)
               last_press_time = monotime();

           // only allow increasing pressure to cause menu if less than half a second since
           // initial contact
           if((current_pressure == FIRM && (monotime() - last_press_time < 50)) || fn_down)
           {
                new_left = false;
                new_right = false;
                new_middle = true;
           }

           else if (prog_down)
           {
                new_right = true;
           }
           else
           {
                new_left = true;
           }
        }

     }

     else  // this code executes when screen is not being touched at all
     {
           new_right = new_middle = new_left = false;

           tscreen.intmode_on();

     }

     last_pressure = current_pressure;

     active = false;

     if (irqs_off)
         _kernel_irqs_off();  // restore interrupt status

     return 1;
}

// function to detect if the screen is being pressed harder or softer that at last measurement
PRESSURE_STATUS pressure_gradient(PRESSURE_LEVEL &current_pressure,
                                  PRESSURE_LEVEL last_pressure)
{
         if (current_pressure == last_pressure)
             return STATIC;
         else if (current_pressure < last_pressure)
         {
             if (current_pressure != ZERO)
             {
                 /* Stickyness - they're not allowed to let go partially */
                 current_pressure = last_pressure;
                 return STATIC;
             }
             else
                 return DECREASING;
         }
         else
             return INCREASING;
}





#ifdef TEST
// inform the os of the new mouse position
void inform_kernel(unsigned int x, unsigned int y)
{
     unsigned char parameter_block[5];

     parameter_block[0] = 5;
     parameter_block[1] = BYTE_1(x);
     parameter_block[2] = BYTE_2(x);
     parameter_block[3] = BYTE_1(y);
     parameter_block[4] = BYTE_2(y);

     _swix(OS_Word, _INR(0,1), 21, parameter_block);


}
#endif

void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
    (void) service_number;
    (void) r;
    (void) pw;

    // only Service_ModeChange at the moment

    display_device.display_dimensions();
}

static struct { int errno; char errmess[8]; } BadHardError = { 0x603, "BadHard" };

/*************************************************************************************
   module_initialise claims the vector PointerV
**************************************************************************************/
_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e;
  unsigned int flags;
  unsigned int gran;

  (void)cmd_tail;
  (void)podule_base;
  module_pw = pw;

  e = _swix(OS_Hardware, _INR(8,9)|_OUT(0), 0, EntryNo_HAL_TouchscreenType, &flags);
  if (e || (flags & 0xFF) == 0)
    return _swix(MessageTrans_ErrorLookup, _INR(0,2), &BadHardError, 0, 0);

  // Need to get these veneers initialised before all the constructors are called.
  // Which is nice.
  e = halveneer_init();
  if (e) return e;

  ______main();


#ifdef USE_TIMER1
  e = _swix(OS_Hardware, _IN(0)|_INR(8,9)|_OUT(0), 1, 0, EntryNo_HAL_TimerGranularity, &gran);
  if (e) return e;

  timer1_rate = gran / 300; /* We'd like 300 ticks per second, please */

  e = _swix(OS_Hardware, _IN(0)|_INR(8,9)|_OUT(0), 1, 0, EntryNo_HAL_TimerDevice, &timer1_device);
  if (e) return e;

#endif

  // yeah, yeah - error handling...

  e = _swix(OS_Claim, _INR(0,2), EventV, keyevent_entry, pw);
  if (e) return e;

  e = _swix(OS_Byte, _INR(0,1), 14, Event_Keyboard);
  if (e) return e;

  e = _swix(OS_ClaimDeviceVector, _INR(0,2), TS_INTNO, irq_entry, pw);
  if (e) return e;

  //e = _swix(OS_Claim, _INR(0,2), TickerV, tickerv_entry, pw);
  //if (e) return e;

#ifdef TEST
  return _swix(OS_Claim, _INR(0, 2), TickerV, pointerv_entry, pw);
#else
  return _swix(OS_Claim, _INR(0, 2), PointerV, pointerv_entry, pw);
#endif
}


/*************************************************************************************
   module_initialise releases the vector TickerV
**************************************************************************************/
_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  (void)fatal;
  (void)podule;

  _swix(OS_Byte, _INR(0,1), 13, Event_Keyboard);
  _swix(OS_Release, _INR(0,2), EventV, keyevent_entry, pw);

#ifdef USE_TIMER1
  _swix(OS_ReleaseDeviceVector, _INR(0,2), timer1_device, timer1_entry, pw);
#else
  _swix(OS_Release, _INR(0,2), TickerV, tickerv_entry, pw);
#endif
  _swix(OS_ReleaseDeviceVector, _INR(0,2), TS_INTNO, irq_entry, pw);

#ifdef TEST
  return _swix(OS_Release, _INR(0, 2), TickerV, pointerv_entry, pw);
#else
  return _swix(OS_Release, _INR(0, 2), PointerV, pointerv_entry, pw);
#endif

}


/*************************************************************************************
   swi handler
*************************************************************************************/
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
  (void)pw;
  (void)r;

  TOUCH_SCREEN_POSITION pos;
  DISPLAY_POSITION disp;
  unsigned int pres;
  PRESSURE_LEVEL pres_level;
  _kernel_oserror* error_code = 0;

  int irqsoff = _kernel_irqs_disabled();
  if (!irqsoff) _kernel_irqs_off();
  pos.x = tscreen.get_x();
  pos.y = tscreen.get_y();
  pres = tscreen.get_p();
  if (!irqsoff) _kernel_irqs_on();

  pres_level = tscreen.pressure_measure.get_pressure_level(pres);

  r->r[0] = 0; // r0 is used to pass info back to the calibration app.
               // always reset to 0 just to be safe.

  disp.x = r->r[2];
  disp.y = r->r[3];

  switch(swi_no)
  {
         case TSDriver_Calibrate - TSDriver_00:
              tscreen.intmode_off();
              switch(r->r[1])
              {
                     case 0:       // the user is pressing nothing
                       r->r[0] = tscreen.pressure_measure.calibrate_release(pres);
                       break;

                     case 1:       // the user is pressing the centre of the display
                       r->r[0] = display_device.calibrate_centre(pos, disp, pres);
                       break;

                     case 2:       // the user is pressing a corner of the display
                     case 3:
                     case 4:
                     case 5:
                       r->r[0] = display_device.calibrate_corner(pos, disp, pres);
                       break;

                     case 6:       // r2 contains the light pressure threshold
                       tscreen.pressure_measure.set_light_threshold((unsigned int) r->r[2] >> 20);
                       r->r[0] = 1;
                       break;

                     case 7:       // r2 contains the firm pressure threshold
                       tscreen.pressure_measure.set_firm_threshold((unsigned int) r->r[2] >> 20);
                       r->r[0] = 1;
                       break;

                     default:
                       error_code = error_BAD_SWI;
              }
              break;

         default:
              error_code = error_BAD_SWI;
  }
  return error_code;

}

/*************************************************************************************
   command_handler
**************************************************************************************/
_kernel_oserror *command_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{

  (void)arg_string;
  (void)argc;
  (void)pw;

  (void)cmd_no;  // will need to delete this line before switching

//  switch(cmd_no)
//  {

//  }

  printf("Transformation matrix: (%8d,%8d)\n", display_device.get_xx(), display_device.get_xy());
  printf("                       (%8d,%8d)\n", display_device.get_yx(), display_device.get_yy());
  printf("ADC centre:            (%8d,%8d)\n", display_device.get_centre_adc().x, display_device.get_centre_adc().y);
  printf("ADC sample deviation:  (%8d,%8d)\n", display_device.get_centre_adc_sd().x, display_device.get_centre_adc_sd().y);
  printf("Screen centre:         (%8d,%8d)\n", display_device.get_centre_pos().x, display_device.get_centre_pos().y);
  printf("Zero pressure:         %5d\n", tscreen.pressure_measure.get_zero_pressure());
  printf("Release pressure:      %5d\n", tscreen.pressure_measure.get_release_pressure());
  printf("VLight pressure:       %5d\n", tscreen.pressure_measure.get_vlight_pressure());
  printf("Light pressure:        %5d\n", tscreen.pressure_measure.get_light_pressure());
  printf("Firm pressure:         %5d\n\n", tscreen.pressure_measure.get_firm_pressure());
  printf("Centre pressure:       %5d\n", tscreen.pressure_measure.get_centre_pressure());
#if 0
  printf("Pressure adjustments:  (%d,%d,%d,%d)\n", tscreen.pressure_measure.get_pressure_adjust(0),
                                                   tscreen.pressure_measure.get_pressure_adjust(1),
                                                   tscreen.pressure_measure.get_pressure_adjust(2),
                                                   tscreen.pressure_measure.get_pressure_adjust(3));
#endif
  printf("Corner pressures:      (%5d,%5d,%5d,%5d)\n", tscreen.pressure_measure.get_corner_pressure(0),
                                                       tscreen.pressure_measure.get_corner_pressure(1),
                                                       tscreen.pressure_measure.get_corner_pressure(2),
                                                       tscreen.pressure_measure.get_corner_pressure(3));



  return 0;
}

