/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/

//#include <stdio.h>
#include <stdlib.h>
#include "display.h"
#include "sensor.h"
#include "Global/HALEntries.h"
#include "swis.h"






/***********************************************************************/
/*    SENSOR MEMBER FUNCTIONS. SENSOR IS AN ABSTRACT CLASS            */
/**********************************************************************/

// read the output of the adc and record the data
void sensor::measurement(void)
{
     PRESSURE_LEVEL touch = LIGHT;

#ifdef TEST
     unsigned int mouse_x_pos, mouse_y_pos;
     unsigned int mouse_buttons;

     // for test purposes, the mouse and pointer have been
     // dis-associated. here we will need to determine first
     // what we are supposed to be measuring and then read the actual
     // mouse position and return the appropriate position

     _swix(OS_Mouse, _OUTR(0, 2), &mouse_x_pos, &mouse_y_pos,
                                    &mouse_buttons);

     switch(type)
     {

            case CONFIGURED_FOR_X_MEASUREMENT:
                 measurement_data = mouse_x_pos;
                 break;

            case CONFIGURED_FOR_Y_MEASUREMENT:
                 measurement_data = mouse_y_pos;
                 break;

            case CONFIGURED_FOR_X_RESISTANCE_MEASUREMENT:
                 measurement_data = 1000;
                 break;

            case CONFIGURED_FOR_Y_RESISTANCE_MEASUREMENT:
                 measurement_data = 1000;
                 break;

            case CONFIGURED_FOR_PRESSURE_MEASUREMENT:
                 measurement_data = touch;
                 break;

            default:
                 ; // this is an error condition,
                  // might be good idea to attempt recovery

     }
#else

     _swix(OS_Hardware, _IN(0)|_INR(8,9)|_OUT(0),
                        type, 0, EntryNo_HAL_TouchscreenRead,
                        &measurement_data);
     measurement_data >>= 20; // truncate to 12 bits
#endif

}






/***********************************************************************/
/*    X_SENSOR MEMBER FUNCTIONS                                        */
/***********************************************************************/

x_sensor::x_sensor()
{
     type = CONFIGURED_FOR_X_MEASUREMENT;
}

unsigned int x_sensor::get_x_position(void)
{
     measurement();
     return measurement_data;
}




/***********************************************************************/
/*    Y_SENSOR MEMBER FUNCTIONS                                        */
/***********************************************************************/

y_sensor::y_sensor()
{
     type = CONFIGURED_FOR_Y_MEASUREMENT;
}

unsigned int y_sensor::get_y_position(void)
{
     measurement();
     return measurement_data;
}



/***********************************************************************/
/*    PRESSURE SENSOR MEMBER FUNCTIONS                                 */
/***********************************************************************/

pressure_sensor::pressure_sensor()
{
     type = CONFIGURED_FOR_PRESSURE_MEASUREMENT;

     // some default values
     release_pressure_threshold = 0x1C0;
     vlight_pressure_threshold  = 0x3C0;
     light_pressure_threshold   = 0x3C0;
     firm_pressure_threshold    = 0x520;
}

PRESSURE_LEVEL pressure_sensor::get_pressure_level(unsigned int pres)
{
     PRESSURE_LEVEL pressure;

     if(pres >= release_pressure_threshold)
     {
         if(pres >= firm_pressure_threshold)
         {
            pressure = FIRM;
         }
         else if(pres >= light_pressure_threshold)
         {
            pressure = LIGHT;
         }
         else if (pres >= vlight_pressure_threshold)
         {
            pressure = VLIGHT;
         }
         else
         {
            pressure = NONZERO;
         }
     }

     else
     {
         pressure = ZERO;
     }

     return pressure;
}


// this is now just used as a basic "are they touching" check
PRESSURE_LEVEL pressure_sensor::get_pressure_level(void)
{

     measurement();

     return get_pressure_level(measurement_data);
}

unsigned int pressure_sensor::get_raw_pressure(void)
{
     measurement();
     return measurement_data;
}

#define MEASUREMENTS 64

int pressure_sensor::calibrate_release(unsigned int pres)
{
    static int count;
    static unsigned int sum, sum2;
    static int variance, mean;

    _swix(OS_Byte, _IN(0), 19);

    if (++count < MEASUREMENTS)
    {
        sum += pres;
        sum2 += pres*pres; // 24-bits - up to 256 measurements

        return 1;
    }

    variance = int_sqrt((sum2 - sum / MEASUREMENTS * sum) / (MEASUREMENTS - 1));
    mean = sum / MEASUREMENTS;

    if (variance > 0x40)
    {
        count = sum = sum2 = 0;
        return 0;
    }

    //printf("pressure sd = %03x, mean = %03x\n", variance, mean);

    zero_pressure = mean;
    release_pressure_threshold = mean + 5 * variance;
    vlight_pressure_threshold = mean + 15 * variance;
    light_pressure_threshold = vlight_pressure_threshold;

    count = sum = sum2 = 0;

    return 3;
}


/* an added complexity of a resistive touch screen is that the same
   pressure level will give different readings depending on what part
   of the touch screen the pressure was applied to. this function attempts
   to calibrate pressure.

   the assumed relation is:

          p  =  (p  - p ) D/a + p
           u      c    0         0

   where p  = uncalibrated pressure,  p = calibrated pressure (ie calibrated to match centre)
          u                            c
         p  = zero pressure,          D = distance from centre of screen
          0

               a(p  - p )
                  u    0
   so    p  =  ----------  + p
          c         D         0

*/
PRESSURE_LEVEL pressure_sensor::get_pressure_level(int corner, DISPLAY_POSITION pos)
{
     int xdist, ydist, dist, adj;

     measurement();

    /* xdist = pos.x - pos_centre.x;
     ydist = pos.y - pos_centre.y;

     dist = abs(xdist) + abs(ydist);

     measurement_data = measurement_data - zero_pressure; // 12-bit signed

     adj = pressure_adjust[corner] / dist;

     measurement_data = ((int) measurement_data * adj) >> 16;

     measurement_data = measurement_data + zero_pressure;

     // now the pressure has been calibrated*/

     return get_pressure_level(measurement_data);

}

void pressure_sensor::set_thresholds()
{
    unsigned int p, p_max, p_min;
    int i;

    p = (2 * pressure_centre + pressure_corner[0] + pressure_corner[1] + pressure_corner[2] + pressure_corner[3]) / 6;

    p_max = pressure_centre + 2*pressure_centre_sd;
    p_min = pressure_centre;

    for (i=0; i<4; i++)
    {
        if (pressure_corner[i] + 2*pressure_corner_sd[i] > p_max)
            p_max = pressure_corner[i] + 2*pressure_corner_sd[i];
        if (pressure_corner[i] < p_min)
            p_min = pressure_corner[i];
    }

    light_pressure_threshold = (1*zero_pressure + 2*p_min) / 3;
    vlight_pressure_threshold = light_pressure_threshold;
    release_pressure_threshold = (2*zero_pressure + 1*p_min) / 3;
    firm_pressure_threshold = p_max;

}

void pressure_sensor::set_centre_pressure(unsigned int p, unsigned int p_sd, DISPLAY_POSITION pos)
{
//    light_pressure_threshold = p - 2 * p_sd;
//    vlight_pressure_threshold = light_pressure_threshold;
//    firm_pressure_threshold = p + 5 * p_sd;
//
//    release_pressure_threshold = (light_pressure_threshold + zero_pressure) / 2;
//
    pos_centre = pos;
    pressure_centre = p;
    pressure_centre_sd = p_sd;

}

void pressure_sensor::set_corner_pressure(int corner, unsigned int p, unsigned int p_sd, DISPLAY_POSITION pos)
{
    //int xdist, ydist, dist, adj;

    pressure_corner[corner] = p;
    pressure_corner_sd[corner] = p_sd;

    //xdist = pos.x - pos_centre.x;
    //ydist = pos.y - pos_centre.y;

    //dist = abs(xdist) + abs(ydist);

    // get the inverse of the factor that the corner is higher than the centre (24.8)
    //adj = ((pressure_centre - zero_pressure) << 16) / (p - zero_pressure);

    // adjustment per distance (16.16)
    //pressure_adjust[corner] = adj * dist;
}





/***********************************************************************/
/*    RESISTANCE MEMBER FUNCTIONS                                      */
/***********************************************************************/

x_resistance_sensor::x_resistance_sensor()
{
     type = CONFIGURED_FOR_X_RESISTANCE_MEASUREMENT;
}


unsigned int x_resistance_sensor::get_x_resistance(void)
{
     measurement();
     return measurement_data;
}

y_resistance_sensor::y_resistance_sensor()
{
     type = CONFIGURED_FOR_Y_RESISTANCE_MEASUREMENT;
}


unsigned int y_resistance_sensor::get_y_resistance(void)
{
     measurement();
     return measurement_data;
}



