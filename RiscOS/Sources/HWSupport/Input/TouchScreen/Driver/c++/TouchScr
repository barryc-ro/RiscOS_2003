/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdbool.h>
#include "touchscr.h"
#include "swis.h"


// local macros
#define BYTE_1(x)     ((x) & 0x000000ff)
#define BYTE_2(x)    (((x) & 0x0000ff00) >> 8)


// touchscreen constructor
// on creation of a touchscreen object, the resistance of the touchscreen
// is measured, and calibration for pressure is done automatically
touchscreen::touchscreen()
{
     int r1;
     unsigned int resistance;
     // here we need to disassociate the mouse and the pointer

     r1 = 0x00000081;        // 80 = pointer off,  81 = pointer on
     _swix(OS_Byte, _INR(0, 2), 106, r1);

     init_ts_hardware();

     resistance = resistance_measure.get_resistance();

     // do some calculations here
     // set_light_threshold(pl);
     // set_firm_threshold(ph);
     // threshold values will really need to be determined by experiment
}



// this function configures the UCB1200 to be in touchscreen mode
void touchscreen::init_ts_hardware(void)
{
     // initialisation of UCB1200 registers to be in touch screen mode
}





// inform the os of the new mouse position
void touchscreen::inform_kernel(unsigned int x, unsigned int y)
{
     unsigned char parameter_block[5];

     parameter_block[0] = 5;
     parameter_block[1] = BYTE_1(x);
     parameter_block[2] = BYTE_2(x);
     parameter_block[3] = BYTE_1(y);
     parameter_block[4] = BYTE_2(y);

     _swix(OS_Word, _INR(0,1), 21, parameter_block);


}















