/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdbool.h>
#include "swis.h"
#include "Global/RISCOS.h"

#include "module.h"
#include "touchscr.h"
#include "driver.h"
#include "halveneer.h"
extern "C" {
#include "header.h"
}



// touchscreen constructor
// on creation of a touchscreen object, the resistance of the touchscreen
// is measured, and calibration for pressure is done automatically
touchscreen::touchscreen()
{
//     unsigned int resistance;
     // here we need to disassociate the mouse and the pointer

#ifdef TEST
     int r1 = 0x00000081;    // 80 = pointer off,  81 = pointer on
     _swix(OS_Byte, _INR(0, 2), 106, r1);
#endif

     init_ts_hardware();

     intmode_on();
 //    resistance = resistance_measure.get_resistance();

     // do some calculations here
     // set_light_threshold(pl);
     // set_firm_threshold(ph);
     // threshold values will really need to be determined by experiment
}



// this function configures the UCB1200 to be in touchscreen mode
void touchscreen::init_ts_hardware(void)
{
     // initialisation of UCB1200 registers to be in touch screen mode
}

void touchscreen::ticker()
{
    switch (state)
    {
      case MODE_X:
        pending_x = x_position_measure.get_x_position();
        y_position_measure.set_mode();
        state = MODE_Y;
        break;

      case MODE_Y:
        pending_y = y_position_measure.get_y_position();
        pressure_measure.set_mode();
        state = MODE_P;
        break;

      case MODE_P:
        /* Atomic update of x,y,p */
        p = pressure_measure.get_raw_pressure();
        x = pending_x; y = pending_y;
        reporting = true;
        count++;

        /* Fall through */
      case MODE_W:
        x_position_measure.set_mode();
        state = MODE_X;
        break;
    }
}

void touchscreen::irq()
{
    if (state != MODE_I)
        return; // ahem

    intmode_off();
}

void touchscreen::intmode_on()
{
    if (state != MODE_I)
    {
        reporting = false;

        state = MODE_I;
#ifdef USE_TIMER1
        _swix(OS_ReleaseDeviceVector, _INR(0,2), timer1_device, timer1_entry, module_pw);
#else
        _swix(OS_Release, _INR(0,2), TickerV, tickerv_entry, module_pw);
#endif
        HAL_TouchscreenMode(5);
        HAL_IRQEnable(TS_INTNO);
    }
}

void touchscreen::intmode_off()
{
    if (state == MODE_I)
    {
        HAL_IRQDisable(TS_INTNO);
#ifdef USE_TIMER1
        HAL_IRQClear(timer1_device);
        _swix(OS_ClaimDeviceVector, _INR(0,2), timer1_device, timer1_entry, module_pw);
        HAL_TimerSetPeriod(1, timer1_rate);
        HAL_IRQEnable(timer1_device);
#else
        _swix(OS_Claim, _INR(0,2), TickerV, tickerv_entry, module_pw);
#endif

        x_position_measure.set_mode();
        state = MODE_X;
        //state = MODE_W;
    }
}

