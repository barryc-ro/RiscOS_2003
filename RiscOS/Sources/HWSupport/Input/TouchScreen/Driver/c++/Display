/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdbool.h>
//#include <stdio.h>

#include "swis.h"
#include "display.h"
#include "driver.h"
#include "touchscr.h"


display::display()
{
     display_size_x = 1280;
     display_size_y = 960;

     // because calibration application is not yet up and running...

     TOUCH_SCREEN_POSITION p;
     DISPLAY_POSITION d;

     /* Yum - matches my screen, anyway */
     p.x = 0x793; p.y = 0x7A3;
     d.x = display_size_x / 2; d.y = display_size_y / 2;
     set_centre(p, d);

     p.x = 0xDB5; p.y = 0xD8D;
     d.x = 0; d.y = 0;
     set_bottom_left(p, d);

     p.x = 0x16E; p.y = 0xD8D;
     d.x = display_size_x - 1; d.y = 0;
     set_bottom_right(p, d);

     p.x = 0xDB5; p.y = 0x1B2;
     d.x = 0; d.y = display_size_y - 1;
     set_top_left(p, d);

     p.x = 0x16E; p.y = 0x1B2;
     d.x = display_size_x - 1; d.y = display_size_y - 1;
     set_top_right(p, d);


     display_dimensions();  // ask RISC OS for the display size


};


void display::set_centre(TOUCH_SCREEN_POSITION adc, DISPLAY_POSITION pos)
{
    centre_pos = pos;
    centre_adc = adc;

    calibrated = 1;
    //printf("set_centre: pos = (%d,%d), adc = (%03u,%03u)\n");
}

int display::which_corner(TOUCH_SCREEN_POSITION adc)
{
    int which = 0;

    if (adc.x >= centre_adc.x) which += 1;
    if (adc.y >= centre_adc.y) which += 2;

    return which;
}

void display::set_corner(TOUCH_SCREEN_POSITION adc, DISPLAY_POSITION pos)
{
    int corner = which_corner(adc);

    corner_pos[corner] = pos;
    corner_adc[corner] = adc;

    //mult[corner].x = ((pos.x - centre_pos.x) << 16) / ((int) adc.x - (int) centre_adc.x);
    //mult[corner].y = ((pos.y - centre_pos.y) << 16) / ((int) adc.y - (int) centre_adc.y);

    calibrated |= (2 << corner);
    //printf("set_corner(%d): mult = (%d,%d)\n", corner, mult[corner].x, mult[corner].y);

    if (calibrated == 31)
    {
        int D;
        int x_pos1, y_pos1, x_pos2, y_pos2;
        int x_adc1, y_adc1, x_adc2, y_adc2;


        /* We're going to do an affine transformation, fixing the centre point,
         * and shearing/rotating to map the average of the two pairs of parallel sides.
         * The formula is:
         *                   x_pos = x_off + xx * x_adc + xy * y_adc
         *                   y_pos = y_off + yx * x_adc + yy * y_adc
         *
         * x_off and y_off are subsumed by making all coordinates relative to the centre point.
         * By taking two samples, which are offsets based on the midlines of the opposite sides, we
         * get:
         *                   x1 * xx + y1 * xy = x_pos1
         *                   x2 * xx + y2 * xy = x_pos2
         *                   x1 * yx + y1 * yy = y_pos1
         *                   x2 * yx + y2 * yy = y_pos2
         *
         * solving using inverse matrices:
         *
         *                   xx = (1/D) * (y2 * x_pos1 - y1 * x_pos2)
         *                   xy = (1/D) * (-x2 * x_pos1 + x1 * x_pos2)
         *                   yx = (1/D) * (y2 * y_pos1 - y1 * y_pos2)
         *                   yy = (1/D) * (-x2 * y_pos1 + x1 * y_pos2)      where D = (x1*y2-x2*y1)
         *
         */

        // These values will be 12-bit signed
        x_adc1 = (int) ((corner_adc[1].x + corner_adc[3].x) - (corner_adc[0].x + corner_adc[2].x) + 1) / 2;
        y_adc1 = (int) ((corner_adc[1].y + corner_adc[3].y) - (corner_adc[0].y + corner_adc[2].y) + 1) / 2;
        x_adc2 = (int) ((corner_adc[2].x + corner_adc[3].x) - (corner_adc[0].x + corner_adc[1].x) + 1) / 2;
        y_adc2 = (int) ((corner_adc[2].y + corner_adc[3].y) - (corner_adc[0].y + corner_adc[1].y) + 1) / 2;

        // These values will be 16-bit signed
        x_pos1 = ((corner_pos[1].x + corner_pos[3].x) - (corner_pos[0].x + corner_pos[2].x) + 1) / 2;
        y_pos1 = ((corner_pos[1].y + corner_pos[3].y) - (corner_pos[0].y + corner_pos[2].y) + 1) / 2;
        x_pos2 = ((corner_pos[2].x + corner_pos[3].x) - (corner_pos[0].x + corner_pos[1].x) + 1) / 2;
        y_pos2 = ((corner_pos[2].y + corner_pos[3].y) - (corner_pos[0].y + corner_pos[1].y) + 1) / 2;

        D = x_adc1 * y_adc2 - x_adc2 * y_adc1; // 24-bit signed

        if (D == 0) return; // hmmm

        x_adc1 = ((x_adc1 << 16) + D/2) / D; // 16.16 fixed point - whole part will be zero or small
        y_adc1 = ((y_adc1 << 16) + D/2) / D;
        x_adc2 = ((x_adc2 << 16) + D/2) / D;
        y_adc2 = ((y_adc2 << 16) + D/2) / D;

        xx =  y_adc2 * x_pos1 - y_adc1 * x_pos2;
        xy = -x_adc2 * x_pos1 + x_adc1 * x_pos2;
        yx =  y_adc2 * y_pos1 - y_adc1 * y_pos2;
        yy = -x_adc2 * y_pos1 + x_adc1 * y_pos2;

        //printf("Transform: (%8d,%8d)\n", xx, yx);
        //printf("           (%8d,%8d)\n", xy, yy);

    }
}

void display::display_dimensions(void)
{
  struct sizereq { int xsize, ysize, xeig, yeig, terminator; };
  static const sizereq in = { 11,12,4,5,-1 };
  sizereq out;
  int new_x, new_y;

  _swix(OS_ReadVduVariables, _INR(0,1), &in, &out);

  new_x = (out.xsize+1) << out.xeig;
  new_y = (out.ysize+1) << out.yeig;

  centre_pos.x = centre_pos.x * new_x / display_size_x;
  centre_pos.y = centre_pos.y * new_y / display_size_y;
  for (int i=0; i<4; i++)
  {
      mult[i].x = mult[i].x * new_x / display_size_x;
      mult[i].y = mult[i].y * new_y / display_size_y;
  }

  display_size_x = new_x;
  display_size_y = new_y;
}

/*
 *
 * To interpolate (or extrapolate) the pixel values (x_p, y_p) from the
 * ADC values (x_a, y_a), given the values (x0_p, y0_p), (x1_p, y1_p)
 * corresponding to ADC values (x0_a, y0_a), (x1_a, y1_a) at 2 known
 * points, the calculation is
 *
 *   xp = (x_a - x0_a) * (x1_p - x0_p) / (x1_a - x0_a) + x0_p,
 *        and similarly for y.
 *
 * Defining  x_mult = (x1_p - x0_p) * 2^16 / (x1_a - x0_a), this becomes
 *
 *          xp = (x_a - x0_a) * x_mult / 2^16 + x0_p.
 *
 *
 * If we use 12-bit ADC values, given typical RISC OS screen sizes there
 * should be no danger of overflow (TM).
 *
 * If we take (x0, y0) to be the centre point for all interpolations, we
 * need to store:
 *             - x_a, x_p, y_a, y_p for the centre point
 *             - x_mult and y_mult for each corner point
 *
 * The multipliers are keyed by the ADC values, so the correct one can be selected by comparing
 * the values read with those for the centre point. They are in the following order:
 *             0: Low  x_a, Low  y_a
 *             1: High x_a, Low  y_a
 *             2: Low  x_a, High y_a
 *             3: High x_a, High y_a
 *
 */


// all corrections touch screen mis-alignments will be made here
DISPLAY_POSITION display::translate_position(TOUCH_SCREEN_POSITION in)
{
       DISPLAY_POSITION translated, pos;

       //int corner = which_corner(in);

       pos.x = in.x - centre_adc.x;
       pos.y = in.y - centre_adc.y;

       translated.x = ((pos.x * xx + pos.y * xy) >> 16) + centre_pos.x;
       translated.y = ((pos.x * yx + pos.y * yy) >> 16) + centre_pos.y;

       // signed right shifts do sign extend
       //translated.x = ((((int) in.x - (int) centre_adc.x) * mult[corner].x) >> 16) + centre_pos.x;
       //translated.y = ((((int) in.y - (int) centre_adc.y) * mult[corner].y) >> 16) + centre_pos.y;

       return translated;
}


int display::get_display_size_x(void)
{
    return display_size_x;
}


int display::get_display_size_y(void)
{
    return display_size_y;
}

int int_sqrt(unsigned int a)
{
    int i;

    for (i=0; i*i<a; i += 64)
        continue;

    for (i-=64; i*i<a; i += 8)
        continue;

    for (i-=8; i*i<a; i++)
        continue;

    return i-1;
}

#define MEASUREMENTS 64

int display::calibrate_point(TOUCH_SCREEN_POSITION adc, unsigned int pres,
                            unsigned int &x_mean, unsigned int &y_mean, unsigned int &p_mean, unsigned int &p_sd)
{
    static int count1, count2, count3;
    static unsigned int x_sum, x_sum2, y_sum, y_sum2, p_sum, p_sum2;
    int x_sd, y_sd;
    PRESSURE_LEVEL pres_level = tscreen.pressure_measure.get_pressure_level(pres);

    _swix(OS_Byte, _IN(0), 19);

    if (pres_level >= VLIGHT)
    {
        if (count1 < 16) // wait for steady input
        {
            count1++;
            return 0;
        }

        if (count2 < MEASUREMENTS)
        {
            count2++;
            x_sum += adc.x;
            x_sum2 += adc.x * adc.x;
            y_sum += adc.y;
            y_sum2 += adc.y * adc.y;
            p_sum += pres;
            p_sum2 += pres * pres;

            return 1;
        }

        x_sd = int_sqrt((x_sum2 - x_sum / MEASUREMENTS * x_sum) / (MEASUREMENTS - 1));
        y_sd = int_sqrt((y_sum2 - y_sum / MEASUREMENTS * y_sum) / (MEASUREMENTS - 1));

        //printf("x sd = %u, y sd = %u\n", x_sd, y_sd);

        if (x_sd > 0x080 || y_sd > 0x080)
        {
            // reset and start again
            x_sum = x_sum2 = y_sum = y_sum2 = p_sum = p_sum2 = count1 = count2 = count3 = 0;
            return 1;
        }

        return 2;
    }

    if (count2 < MEASUREMENTS)
    {
        // reset
        x_sum = x_sum2 = y_sum = y_sum2 = p_sum = p_sum2 = count1 = count2 = count3 = 0;
        return 0;
    }

    x_sd = int_sqrt((x_sum2 - x_sum / MEASUREMENTS * x_sum) / (MEASUREMENTS - 1));
    y_sd = int_sqrt((y_sum2 - y_sum / MEASUREMENTS * y_sum) / (MEASUREMENTS - 1));
    p_sd = int_sqrt((p_sum2 - p_sum / MEASUREMENTS * p_sum) / (MEASUREMENTS - 1));

    x_mean = x_sum / MEASUREMENTS;
    y_mean = y_sum / MEASUREMENTS;
    p_mean = p_sum / MEASUREMENTS;

    //printf("x sd = %03x, x mean = %03x\n", x_sd, x_mean);
    //printf("y sd = %03x, y mean = %03x\n", y_sd, y_mean);
    //printf("p sd = %03x, p mean = %03x\n", p_sd, p_mean);

    // reset
    x_sum = x_sum2 = y_sum = y_sum2 = p_sum = p_sum2 = count1 = count2 = count3 = 0;

    return 3;
}

int display::calibrate_centre(TOUCH_SCREEN_POSITION adc, DISPLAY_POSITION pos, unsigned int pres)
{
    int result;
    TOUCH_SCREEN_POSITION mean;
    unsigned int p, p_sd;

    result = calibrate_point(adc, pres, mean.x, mean.y, p, p_sd);
    if (result < 3) return result;

    set_centre(mean, pos);

    tscreen.pressure_measure.set_centre_pressure(p, p_sd, pos);

    return 3;
}

int display::calibrate_corner(TOUCH_SCREEN_POSITION adc, DISPLAY_POSITION pos, unsigned int pres)
{
    int result;
    TOUCH_SCREEN_POSITION mean;
    unsigned int p, p_sd;

    result = calibrate_point(adc, pres, mean.x, mean.y, p, p_sd);
    if (result < 3) return result;

    set_corner(mean, pos);

    tscreen.pressure_measure.set_corner_pressure(which_corner(mean), p, p_sd, pos);

    if (calibrated == 31)
        tscreen.pressure_measure.set_thresholds();

    return 3;
}

