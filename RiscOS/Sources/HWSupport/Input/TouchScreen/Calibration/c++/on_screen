/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/
#include <stdio.h>

#include <stdlib.h>
#include <stdbool.h>

#include "calibrate.h"
#include "on_screen.h"
#include "graphics.h"
#include "swis.h"




/*************************************************************************/
/*             MEMBER FUNCTIONS FOR target CLASS                         */
/*************************************************************************/



// default constructor
target::target()
{
     target_size = 50;
     inverted = false;
}


// constructor
target::target(unsigned int size)
{
     target_size = size;
     inverted = false;
     visible = false;
}


// draw the target with the centre at co-ordinates x, y
void target::display(void)
{
     // draw the cross
     _swix(OS_Plot, _INR(0, 2), 4, target_x - (target_size / 2), target_y);
     _swix(OS_Plot, _INR(0, 2), 1, target_size, 0);
     _swix(OS_Plot, _INR(0, 2), 4, target_x , target_y - (target_size / 2));
     _swix(OS_Plot, _INR(0, 2), 1, 0, target_size);

     draw_circle(target_x, target_y, target_size + 5, 1, false);

     visible = true;

}


// used to set the onscreen position of target
void target::set_position(unsigned int x, unsigned int y)
{
     if(visible == true)
     {
        erase();
        target_x = x;
        target_y = y;
        display();
     }

     else
     {
         target_x = x;
         target_y = y;
     }
}


// accessor function for target_x
unsigned int target::get_x(void) const
{
     return target_x;
}

// accessor function for target_y
unsigned int target::get_y(void) const
{
     return target_y;
}


// accessor function for target_size
unsigned int target::get_size(void) const
{
     return target_size;
}




void target::invert(void)
{

     draw_circle(target_x, target_y, target_size + 5, 1, true);

     // draw the cross
     _swix(OS_Plot, _INR(0, 2), 4, target_x - (target_size / 2), target_y);
     _swix(OS_Plot, _INR(0, 2), 3, target_size, 0);
     _swix(OS_Plot, _INR(0, 2), 4, target_x , target_y - (target_size / 2));
     _swix(OS_Plot, _INR(0, 2), 3, 0, target_size);

     inverted = true;
}



// function to check that the user touched somewhere near the cross
bool target::range_check(unsigned int x, unsigned int y) const
{
     bool in_range;

     if(x < (target_x - target_size) || x > (target_x + target_size) ||
        y < (target_y - target_size) || y > (target_y + target_size))
     {
        in_range = false;
     }

     else
     {
        in_range = true;
     }

     return in_range;
}



void target::erase(void) const
{
     // erase the circle
     draw_circle(target_x, target_y, target_size + 5, 3, true);

}





/************************************************************************/
/*            MEMBER FUNCTIONS FOR progess_bar CLASS                    */
/************************************************************************/

progress_bar::progress_bar()
{
         height     = 30;
         width      = 400;
         x_position = 0;
         y_position = 0;
         minimum_value = 0;
         maximum_value = 100;
         progress = minimum_value;
         displayed_progress = 0;
         bar_orientation = HORIZONTAL;

}

progress_bar::progress_bar(unsigned int bar_height,
                           unsigned int bar_width,
                           PROGRESS_BAR_ORIENTATION orientation)
{
         height     = bar_height;
         width      = bar_width;
         x_position = 0;
         y_position = 0;
         minimum_value = 0;
         maximum_value = 100;
         progress = minimum_value;
         displayed_progress = 0;
         bar_orientation = orientation;

}



void progress_bar::set_size(unsigned int x, unsigned int y)
{
        width  = x;
        height = y;
}


void progress_bar::set_position(unsigned int x, unsigned int y)
{
         x_position = x;
         y_position = y;
}


bool progress_bar::check_coords(unsigned int x, unsigned int y)
{
     bool status;

     if( (x > x_position) && (x < x_position + width) &&
         (y > y_position) && (y < y_position + height) )
     {
         status = true;
     }

     else
     {
         status = false;
     }

     return status;
}



void progress_bar::display(void)
{
     draw_rectangle(x_position, y_position, width, height, 1, false);
}


void progress_bar::update(void)
{
     unsigned int start_x, start_y;



     if(progress >= displayed_progress)
     {
           if(bar_orientation == HORIZONTAL)
           {
              start_x = x_position;
              start_y = y_position;
              draw_rectangle(start_x, start_y,
                            (width * progress) / 100,
                             height,
                             1, true);
           }

           else
           {
              start_x = x_position;
              start_y = y_position;
              draw_rectangle(start_x, start_y,
                             width,
                             (height * progress) / 100,
                             1, true);
           }

     }

     else if(progress < displayed_progress)
     {
           if(bar_orientation == HORIZONTAL)
           {
              start_x = x_position + ((width / 100) * progress);
              start_y = y_position;
              draw_rectangle(start_x,
                             start_y,
                             ((width / 100) * (displayed_progress - progress)),
                             height,
                             3, true);
           }

           else
           {
              start_x = x_position;
              start_y = y_position + ((height / 100) * progress);
              draw_rectangle(start_x, start_y,
                             width,
                            (height * (displayed_progress - progress)) / 100,
                             3, true);
           }


     }

     displayed_progress = progress;
     display();

}



void progress_bar::erase(void)
{
      set_progress(0);      // set progress to 0%
      update();

      // then erase the progress bar outline
      draw_rectangle(x_position,
                     y_position,
                     width,
                     height,
                     3, false);
}



void progress_bar::set_minimum_value(unsigned int percentage)
{
     if(percentage <= 100)
     {
        minimum_value = percentage;
     }

}



void progress_bar::set_maximum_value(unsigned int percentage)
{
     if(percentage <= 100)
     {
        maximum_value = percentage;
     }
}


unsigned int progress_bar::get_minimum_value(void)
{
     return minimum_value;
}


unsigned int progress_bar::get_maximum_value(void)
{
     return maximum_value;
}


void progress_bar::set_progress(unsigned int percentage)
{
     if(percentage >= minimum_value && percentage <= maximum_value)
     {
        progress = percentage;
     }

}



unsigned int progress_bar::get_progress(void)
{
     return progress;
}

unsigned int progress_bar::get_x_position(void)
{
     return x_position;
}

unsigned int progress_bar::get_y_position(void)
{
     return y_position;
}

unsigned int progress_bar::get_height(void)
{
     return height;
}

unsigned int progress_bar::get_width(void)
{
     return width;
}




/************************************************************************/
/*            MEMBER FUNCTIONS FOR pressure_dot CLASS                   */
/************************************************************************/



pressure_dot::pressure_dot()
 :select(20, 100, VERTICAL), menu(20, 100, VERTICAL)
{
         dot_radius = 50;
         x_pos = 100;
         y_pos = 100;
         scale_parts();
         visible = false;
}


pressure_dot::pressure_dot(unsigned int radius)
{
         dot_radius = radius;
         x_pos = 100;
         y_pos = 100;
         scale_parts();
         visible = false;
}


void pressure_dot::scale_parts(void)
{
         // set button thickness to 30% of radius
         button_thickness = (dot_radius * 30) / 100;

         // set finish dot radius to 10% of radius
         finish_dot_thickness = (dot_radius * 10) / 100;
}


void pressure_dot::set_position(unsigned int x, unsigned int y)
{

         if(visible == true)
         {
            erase();
            x_pos = x;
            y_pos = y;
            display();
         }

         else
         {
             x_pos = x;
             y_pos = y;
         }

}



void pressure_dot::set_size(unsigned int radius)
{
         dot_radius = radius;
         scale_parts();
}



void pressure_dot::display(void)
{
         // draw the outer circle
         draw_circle(x_pos, y_pos, dot_radius, 1, false);

         // draw the two buttons
         draw_circle(x_pos, y_pos, dot_radius - button_thickness, 1, false);

         // draw the centre dot
         draw_circle(x_pos, y_pos, finish_dot_thickness, 1, true);

         draw_circle(x_pos - dot_radius + 30, y_pos, 10, 1, true);
         draw_circle(x_pos + dot_radius - 30, y_pos, 10, 1, true);

         select.set_size((dot_radius * 15 / 100), dot_radius);
         menu.set_size((dot_radius * 15 / 100), dot_radius);

         select.set_position(x_pos - ((dot_radius * 35) / 100),
                             y_pos - ((dot_radius * 47) / 100));

         menu.set_position(x_pos + ((dot_radius * 24) / 100),
                           y_pos - ((dot_radius * 47) / 100));

         draw_line(x_pos, y_pos + dot_radius - button_thickness,
                   x_pos, y_pos + dot_radius, 5);

         draw_line(x_pos, y_pos - dot_radius + button_thickness,
                   x_pos, y_pos - dot_radius, 5);


         select.display();
         menu.display();

         select.update();
         menu.update();

         visible = true;
}


void pressure_dot::erase(void)
{
         draw_circle(x_pos, y_pos, dot_radius, 3, true);
         visible = false;
}


DOT_AREA pressure_dot::touched(unsigned int x, unsigned int y)
{
         DOT_AREA area =  NOT_TOUCHED;

         if(select.check_coords(x, y) == true)
         {
            area = SELECT_SET;
         }

         else if(menu.check_coords(x, y) == true)
         {
            area = MENU_SET;
         }

         else if((x > x_pos - finish_dot_thickness) &&
                 (x < x_pos + finish_dot_thickness) &&
                 (y > y_pos - finish_dot_thickness) &&
                 (y < x_pos + finish_dot_thickness))
         {
            area = FINISH;
         }

         else if((x > x_pos - dot_radius) &&
                 (x < x_pos - dot_radius + button_thickness))
         {
            area = SELECT_BUTTON;
         }

         else if((x < x_pos + dot_radius) &&
                 (x > x_pos + dot_radius - button_thickness))
         {
            area = MENU_BUTTON;
         }


         return area;
}



void pressure_dot::set_select_threshold(unsigned int v)
{
     unsigned int bar_base, bar_height;

     bar_base   = select.get_y_position();
     bar_height = select.get_height();

     select.set_progress((v - bar_base) / (bar_height / 100));


     if(select.get_progress() < select.get_minimum_value())
     {
        select.set_progress(select.get_minimum_value());
     }

     if(select.get_progress() > select.get_maximum_value())
     {
        select.set_progress(select.get_maximum_value());
     }

     if(select.get_progress() > menu.get_progress())
     {
        menu.set_progress(menu.get_progress() + 10);
     }

     if(select.get_progress() > (menu.get_progress() - 10))
     {
        menu.set_progress(menu.get_progress() + 1);
     }

     if(select.get_progress() > select.get_maximum_value())
     {
        select.set_progress(select.get_maximum_value());
     }

     select.update();
     menu.update();
}



void pressure_dot::set_menu_threshold(unsigned int v)
{
     unsigned int bar_base, bar_height;

     bar_base   = select.get_y_position();
     bar_height = select.get_height();

     menu.set_progress((v - bar_base) / (bar_height / 100));


     if((menu.get_progress() < (select.get_progress() + 10)))
     {
        select.set_progress(select.get_progress() - 1);
     }

     if(select.get_progress() < menu.get_minimum_value())
     {
        select.set_progress(menu.get_minimum_value());
     }

     if(menu.get_progress() < select.get_minimum_value() + 10)
     {
        menu.set_progress(select.get_minimum_value() + 10);
     }

     select.update();
     menu.update();
}


// function returns the pressure threshold as a percentage
unsigned int pressure_dot::get_select_threshold()
{
     return select.get_progress();
}

// function returns the pressure threshold as a percentage
unsigned int pressure_dot::get_menu_threshold()
{
     return menu.get_progress();
}



void pressure_dot::set_select_minimum_threshold(unsigned int percentage)
{
     select.set_minimum_value(percentage);
}

void pressure_dot::set_select_maximum_threshold(unsigned int percentage)
{
     select.set_maximum_value(percentage);
}


void pressure_dot::initialise_pressure_thresholds(unsigned int select_percentage,
                                                  unsigned int menu_percentage)
{
     select.set_progress(select_percentage);
     menu.set_progress(menu_percentage);

     select.update();
     menu.update();

}


void pressure_dot::highlight_select_button(void)
{
     _swix(OS_Plot, _INR(0, 2), 141, x_pos - dot_radius + 3, y_pos);
     draw_circle(x_pos - dot_radius + 30, y_pos, 10, 3, true);
}


void pressure_dot::highlight_menu_button(void)
{
     _swix(OS_Plot, _INR(0, 2), 141, x_pos + dot_radius - 3, y_pos);
     draw_circle(x_pos + dot_radius - 30, y_pos, 10, 3, true);

}




















