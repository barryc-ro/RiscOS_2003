/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "calibrate.h"
#include "on_screen.h"

#include "swis.h"


// local macros
#define BYTE_1(x)     (x & 0x000000ff)
#define BYTE_2(x)    ((x & 0x0000ff00) >> 8)


#define LEFT_MOUSE_BUTTON(states)        (states & 4)
#define MIDDLE_MOUSE_BUTTON(states)      (states & 2)
#define RIGHT_MOUSE_BUTTON(states)       (states & 1)

#define NO_PRESSURE_APPLIED(mouse_buttons)  (!PRESSURE_APPLIED(mouse_buttons))
#define PRESSURE_APPLIED(mouse_buttons)     (MIDDLE_MOUSE_BUTTON(mouse_buttons))

#define SCREEN_OFFSET 75


struct sizereq {int xsize, ysize, xeig, yeig, terminator;};



int calibrate_position(unsigned int screen_width,
                       unsigned int screen_height);

int calibrate_pressure(unsigned int screen_width,
                       unsigned int screen_height);

static unsigned int get_system_time(void);

static void inform_kernel(unsigned int x_position,
                          unsigned int y_position);

static void configure_mode(unsigned int mode);
static void clear_screen(void);
static void output_text(char* text);
static void create_text_window(unsigned int x1, unsigned int y1,
                               unsigned int x2, unsigned int y2);

static void display_error_message(int error_code);
static void close_down(void);




int main(void)
{
    int error_code;
    unsigned int screen_width, screen_height;
    static const sizereq in = {11, 12, 4, 5, -1};
    sizereq out;

    atexit(close_down);

    configure_mode(27);  // configure the screen mode

    // read screen width and height here
    _swix(OS_ReadVduVariables, _INR(0, 1), &in, &out);

    screen_width  = (out.xsize + 1) << out.xeig;
    screen_height = (out.ysize + 1) << out.yeig;

    error_code = calibrate_position(screen_width, screen_height);

    if(error_code == 0)  // calibrated ok
    {
        clear_screen();
        error_code = calibrate_pressure(screen_width, screen_height);
    }

    else
    {
        clear_screen();
        display_error_message(error_code);
    }

    exit(EXIT_SUCCESS);
}


// on close down do not ask the user to press any key
void close_down(void)
{
     _swix(Wimp_CommandWindow, _IN(0), -1);
}




/* function will put five crosses on the display one at a time. */
int calibrate_position(unsigned int screen_width,
                       unsigned int screen_height)
{
    int x_position, y_position, mouse_buttons;
    target targets[NUMBER_OF_POSITION_TESTS];
    progress_bar bar(30, 400, HORIZONTAL);
    unsigned int system_time, start_time;
    unsigned int driver_return_code;


    create_text_window(25, 37, 60, 35);
    output_text("     please press the target");


    // here we initialise the positions of each target to be displayed
    targets[0].set_position(screen_width / 2, screen_height / 2);
    targets[1].set_position(screen_width / 2, SCREEN_OFFSET);
    targets[2].set_position(screen_width / 2, screen_height - SCREEN_OFFSET);
    targets[3].set_position(SCREEN_OFFSET, screen_height / 2);
    targets[4].set_position(screen_width - SCREEN_OFFSET, screen_height / 2);

    // set the position of the timer bar
    bar.set_position(460,320);


    // need to flush the mouse buffer.
    _swix(OS_Byte, _INR(0, 1), 21, 9);


    for(unsigned int i = 0; i < NUMBER_OF_POSITION_TESTS; i++)
    {
        bar.set_progress(100);    // set progress to 100%
        targets[i].display();
        bar.display();
        bar.update();

        start_time = get_system_time();

        do
        {
            // get the system time
            system_time = get_system_time();

            if(system_time - start_time > 10) // if 0.1 seconds has elapsed
            {
               if(bar.get_progress() > 0)
               {
                  bar.set_progress(bar.get_progress() - 1);
                  bar.update();
                  start_time = get_system_time();
               }

               else // timeout has occured
               {
                    return 1;
               }
            }

            _swix(OS_Mouse, _OUTR(0, 2), &x_position, &y_position, &mouse_buttons);
            inform_kernel(x_position, y_position);
            _swix(0x054b40, _OUT(0) | _INR(1, 3), &driver_return_code, i, x_position, y_position);
        }
        while(NO_PRESSURE_APPLIED(mouse_buttons));


        targets[i].invert();

        do
        {
            // get the system time
            system_time = get_system_time();

            if(system_time - start_time > 10) // if 0.1 seconds has elapsed
            {
               if(bar.get_progress() > 0)
               {
                  bar.set_progress(bar.get_progress() - 1);
                  bar.update();
                  start_time = get_system_time();
               }

               else // timeout has occured
               {
                    return 1;
               }
            }
            // read the mouse status
            _swix(OS_Mouse, _OUTR(0, 2), &x_position, &y_position, &mouse_buttons);

        }
        while(PRESSURE_APPLIED(mouse_buttons));

        targets[i].erase();

     }
     return 0;
}



int calibrate_pressure(unsigned int screen_width,
                       unsigned int screen_height)
{

    unsigned int x_position, y_position, mouse_buttons;
    unsigned int pressure_threshold;
    bool select_button_set = false, menu_button_set = false;
    pressure_dot p;

    p.set_size(300);
    p.set_position(screen_width / 2, screen_height / 2);
    p.display();

    p.set_select_minimum_threshold(10);
    p.set_select_maximum_threshold(90);
    p.initialise_pressure_thresholds(10, 20);


    do
    {
       _swix(OS_Mouse, _OUTR(0, 2), &x_position, &y_position, &mouse_buttons);
       inform_kernel(x_position, y_position);
       if(p.touched(x_position, y_position) == SELECT_SET)
       {
          p.set_select_threshold(y_position); // set progress bar to y (absolute co-ords)
          pressure_threshold = p.get_select_threshold(); // returns progress as a percentage
          // need to inform ts driver here of light pressure threshold
          _swix(0x054b40, _INR(1, 2), LIGHT_PRESSURE_CALIBRATE, (0xffffffff / 100) * pressure_threshold);


       }
       else if(p.touched(x_position, y_position) == MENU_SET)
       {
          p.set_menu_threshold(y_position);    // set progress bar to y (absolute co-ords)
          pressure_threshold = p.get_menu_threshold();  // returns progress as a percentage
          // need to inform ts driver here of firm pressure threshold
          _swix(0x054b40, _INR(1, 2), FIRM_PRESSURE_CALIBRATE, (0xffffffff / 100) * pressure_threshold);

       }
       else if(p.touched(x_position, y_position) == SELECT_BUTTON &&
               LEFT_MOUSE_BUTTON(mouse_buttons))
       {
          p.highlight_select_button();
          select_button_set = true;
       }
       else if(p.touched(x_position, y_position) == MENU_BUTTON &&
               MIDDLE_MOUSE_BUTTON(mouse_buttons))
       {
          p.highlight_menu_button();
          menu_button_set = true;
       }
       else if(p.touched(x_position, y_position) == FINISH &&
               MIDDLE_MOUSE_BUTTON(mouse_buttons))
       {
          exit(0);
       }
       else
       {
           if(select_button_set || menu_button_set)
           {
              p.erase();
              p.display();
              select_button_set = false;
              menu_button_set = false;
           }
       }


    }
    while(1);

    return 0;
}



void display_error_message(int error_code)
{
     // display the error message, and after ten seconds exit.
     (void)error_code;
}






// create a text window
void create_text_window(unsigned int x1, unsigned int y1,
                        unsigned int x2, unsigned int y2)
{
    _swix(OS_WriteC, _IN(0), 28);
    _swix(OS_WriteC, _IN(0), x1);
    _swix(OS_WriteC, _IN(0), y1);
    _swix(OS_WriteC, _IN(0), x2);
    _swix(OS_WriteC, _IN(0), y2);
}



// outputs text to screen
void output_text(char* text)
{
    unsigned int count = 0;

    do
    {
      _swix(OS_WriteC, _IN(0), text[count]);
    }
    while(text[count++] != '\0');
}




static unsigned int get_system_time(void)
{
       unsigned long int system_time = 0;
       unsigned char parameter_block[5];

       _swix(OS_Word, _INR(0,1), 1, parameter_block);

       // the 5th msb of the system time is ignored.
       system_time = ((parameter_block[3]) << 24) +
                     ((parameter_block[2]) << 16) +
                     ((parameter_block[1]) << 8)  +
                      (parameter_block[0]);

       return system_time;

}




// inform the os of the new pointer position
void inform_kernel(unsigned int x_position, unsigned int y_position)
{
     unsigned char parameter_block[5];

     parameter_block[0] = 5;
     parameter_block[1] = BYTE_1(x_position);
     parameter_block[2] = BYTE_2(x_position);
     parameter_block[3] = BYTE_1(y_position);
     parameter_block[4] = BYTE_2(y_position);

     _swix(OS_Word, _INR(0,1), 21, parameter_block);

}



// configure the screen mode
void configure_mode(unsigned int mode)
{

        int r1;

        _swix(OS_WriteC, _IN(0), 22);
        _swix(OS_WriteC, _IN(0), mode);

        _swix(OS_WriteC, _IN(0), 23);
        _swix(OS_WriteC, _IN(0), 1);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);
        _swix(OS_WriteC, _IN(0), 0);

        r1 = 0x00000081;
        _swix(OS_Byte, _INR(0,1), 106, r1);

}


void clear_screen(void)
{
     _swix(OS_WriteC, _IN(0), 16);
}




