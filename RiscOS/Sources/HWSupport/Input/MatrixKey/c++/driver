/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdio.h>
#include <stdbool.h>

#include "DebugLib/DebugLib.h"

#include "keyboard.h"
#include "module.h"

#include "Global/RISCOS.h"
#include "Global/IOCtl.h"
#include "Global/HALEntries.h"

#include "swis.h"

extern "C" {
#include "header.h"
}


static bool keyboard_enabled = false;

static keyboard kbd;    // create a keyboard object

int refresh(_kernel_swi_regs *r, void *pw)
{
    (void)pw;

    switch(r->r[0])
    {
           case 0: // keyboard present
             break;

           case 1: // key released
             break;

           case 2: // key pressed
             break;

           case 3: // led status flags
             break;

           case 4: // Enable keyboard device drivers
             kbd.flush_all();
             keyboard_enabled = true;
             break;
    }

    return 1; // pass on all reason cades
}


// this is the driver function which is called on an event from a timer
int Driver(_kernel_swi_regs *r, void *pw)
{
  (void)r;
  (void)pw;

  if(keyboard_enabled == true)
  {
     if(kbd.get_number_of_mapping_tables() > 0)
     {
        kbd.poll_keys();          // scan all keys and record and translate the keys that have changed
        kbd.inform_kernel();      // inform kernel of new key states
     }
  }

  return 1;
}





struct { int errno; char errmess[8]; } BadHardError = { 0x603, "BadHard" };

extern "C" void ______main();

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e;
  int columns;

  (void)cmd_tail;
  (void)podule_base;
  (void)pw;

  ______main();

   debug_initialise("keyboard","adfs::mjenn.$.keyboard.debug","");
   debug_set_device(DEBUGIT_OUTPUT);

  e = _swix(OS_Hardware, _INR(8,9) | _OUT(0), 0, EntryNo_HAL_MatrixColumns, &columns);
  if (e || columns == 0)
  {
     e = _swix(MessageTrans_ErrorLookup, _INR(0,2), BadHardError, 0, 0);
  }
  else
  {
      e = _swix(OS_CallAVector, _INR(0,1)|_IN(9), KeyV_KeyboardPresent, Keyboard_Type, KeyV);
      if(!e)
      {
          e = _swix(OS_Claim, _INR(0, 2), TickerV, tickerv_entry, pw);
          if(!e)
          {
              e = _swix(OS_Claim, _INR(0, 2), KeyV, keyv_entry, pw);
          }
      }
  }
  return e;
}


_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  (void)fatal;
  (void)podule;
  (void)pw;
  _kernel_oserror* e, p;

  e = _swix(OS_Release, _INR(0, 2), TickerV, tickerv_entry, pw);
  p = _swix(OS_Release, _INR(0, 2), KeyV, keyv_entry, pw);

  // return e unless p is in error
  if(!p)
  {
      return e;
  }
  return p;

}



_kernel_oserror *command_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  (void)pw;

  switch(cmd_no)
  {
         case CMD_keyboard_load:
              kbd.extract_layouts(arg_string);
              break;

         default:
              ;
  }

  return 0;
}


