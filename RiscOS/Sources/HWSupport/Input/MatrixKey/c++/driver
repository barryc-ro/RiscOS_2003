/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include <stdio.h>
#include <stdbool.h>

#include "DebugLib/DebugLib.h"

#include "keyboard.h"
#include "module.h"

#include "Global/RISCOS.h"
#include "Global/IOCtl.h"
#include "Global/HALEntries.h"

#include "swis.h"

extern "C" {
#include "header.h"
}




// this is the driver function which is called on an event from a timer
int Driver(_kernel_swi_regs *r, void *pw)
{
  (void)r;
  (void)pw;

  static keyboard kbd1;    // create a keyboard object

  kbd1.poll_keys();          // scan all keys and record and translate the keys that have changed
  kbd1.inform_kernel();      // inform kernel of new key states


  return 1;
}

struct { int errno; char errmess[8]; } BadHardError = { 0x603, "BadHard" };

extern "C" void ______main();

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e;
  int columns;

  cmd_tail = cmd_tail;
  podule_base = podule_base;

  ______main();

   debug_initialise("keyboard","adfs::mjenn.$.keyboard.debug","");
   debug_set_device(DEBUGIT_OUTPUT);

  e = _swix(OS_Hardware, _INR(8,9) | _OUT(0), 0, EntryNo_HAL_MatrixColumns, &columns);
  if (e || columns == 0)
    return _swix(MessageTrans_ErrorLookup, _INR(0,2), BadHardError, 0, 0);

  e = _swix(OS_CallAVector, _INR(0,1)|_IN(9), KeyV_KeyboardPresent, Keyboard_Type, KeyV);
  if (e) return e;

  return _swix(OS_Claim, _INR(0, 2), TickerV, tickerv_entry, pw);
}


_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  (void)fatal;
  (void)podule;
  (void)pw;


  return _swix(OS_Release, _INR(0, 2), TickerV, tickerv_entry, pw);

}





_kernel_oserror *command_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{

  (void)arg_string;
  (void)argc;
  (void)pw;

  switch (cmd_no)
  {
    case CMD_test:
      ;
      break;
  }

  return 0;
}

















