/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/



#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include "keyboard.h"

#include "module.h"
#include "Global/RISCOS.h"

#include "Global/IOCtl.h"
#include "Global/HALEntries.h"

#include "swis.h"



// description
// the keyboard is scanned ideally 100 times / sec. at the moment, every key on the keyboard is scanned and if a key has
// changed state the translated key code is pushed onto one of two stacks depending on wether the key is now up or dowm.
// although this is not the simplest way of doing it, it does at least keep the functions to buffer the keypresses and
// send keypresses to kernel as isolated as possible.



// local macros
#define OS_RECOGNISABLE(c) (c < 0xf0)
#define SPECIAL_KEY(c)     (c == SPEC)



/*********************************************************************************************************************/
/* to provide a level of abstraction, the mapping table object was created.                                          */
/*********************************************************************************************************************/


mapping_table::mapping_table()
{
        translation_table = new int[200];
        states_of_keys = new KEY_STATES[200];
        size_of_translation_table = 200;
        number_of_loaded_key_codes = 0;

        for(int p = 0; p < 200; p++)
        {
            translation_table[p] = 0xff; // start by filling tt with NEQV characters
        }
}


mapping_table::~mapping_table()
{
        delete(translation_table);
        delete(states_of_keys);
}


void mapping_table::erase(void)
{
     number_of_loaded_key_codes = 0;

     for(int p = 0; p < 200; p++)
     {
         translation_table[p] = 0xff;
     }
     flush();
}


// returns error code. true if error.
bool mapping_table::load_key_code(int key_code)
{
     bool error_code;

     if(number_of_loaded_key_codes < size_of_translation_table)
     {
        translation_table[number_of_loaded_key_codes++] = key_code;
        error_code = false;
     }
     else
     {
        error_code = true;
     }
     return error_code;
}



// function returns true if state has changed
bool mapping_table::set_key_state(unsigned int row, unsigned int column, KEY_STATES state)
{
     bool status = false;
     unsigned int index = (row * column) - 1;

     if(states_of_keys[index] != state)
     {
        states_of_keys[index] = state;
        status = true;
     }
     return status;
}

KEY_STATES mapping_table::get_key_state(unsigned int row, unsigned int column) const
{
     unsigned int index = (row * column) - 1;
     return states_of_keys[index];
}

int mapping_table::translate(unsigned int row, unsigned int column) const
{
     unsigned int index = (row * column) - 1;
     return translation_table[index];
}

void mapping_table::flush(void)
{
     for(int i = 0; i < size_of_translation_table; i++)
     {
         states_of_keys[i] = KEY_UP;
     }
}




/*********************************************************************************************************************/
/* keyboard member functions                                                                                         */
/*********************************************************************************************************************/


keyboard::keyboard()      // keyboard constructor
  : keys_up(10), keys_down(10)
{
    // fix the number of mapping tables here
    mapping_tables = new mapping_table[2];

    if(mapping_tables)
    {
       number_of_mapping_tables = 2;
    }
    else
    {
       number_of_mapping_tables = 0;
    }
}


// returns true if successful, otherwise false
bool keyboard::extract_layouts(const char* pathname)
{


      char line[200];
      char key_code[5];
      unsigned int line_pos = 0;
      mapping_table* current_table;
      unsigned int table_pos;

      FILE* file_ptr;

      if(!(file_ptr = fopen(pathname, "r")))
      {
           return false;
      }


      for(unsigned int current_layer = 0; current_layer < 2; current_layer++)
      {
          current_table = &mapping_tables[current_layer];
          current_table->erase();
          table_pos = 0;

          do
          {
             line_pos = 0;
             do
             {
                 // read in first line of file
                 fscanf(file_ptr, "%c", &line[line_pos]);
             }
             while(line[line_pos] != '\n' && line_pos++ < 200);

             if(strncmp(line, "ROW", 3) == 0) // if starts with ROW
             {
                line_pos = 0; // go to beginning of line
                do
                {
                      if(line[line_pos] == ' ')
                      {
                         strncpy(key_code, &line[line_pos + 1], 4);
                         if(strncmp(key_code, "NEQV", 4) == 0)
                         {
                            current_table->load_key_code(0xff);
                         }
                         else if(strncmp(key_code, "SPEC", 4) == 0)
                         {
                            current_table->load_key_code(0xfe);
                         }
                         else
                         {
                             current_table->load_key_code((int)strtol(key_code,NULL,16));
                         }
                         printf("%d", current_table[table_pos]);
                         table_pos++;
                      }

                }
                while(line[line_pos++] != '\n'); // run to end of line

             }
          }
          while(strncmp(line, "END", 3) != 0);
      }

      fclose(file_ptr);
      return true;
}






// when this function is called it scans each key on the keyboard and buffers it before forwarding to kernel
void keyboard::poll_keys(void)
{
   unsigned int row, column, row_data;
   unsigned char key_code;
   int mask;

   for(column = 1; column <= number_of_columns; column++)
   {
          mask = 1;
          row_data = scan_matrix(column);
          for(row = 1; row <= number_of_rows; row++)  // loop to see which bits are set
          {
              if(row_data & mask)
              {
                 if(mapping_tables[current_mapping_table].set_key_state(row, column, KEY_DOWN))
                 {
                    key_code = mapping_tables[current_mapping_table].translate(row, column);

                    if(SPECIAL_KEY(key_code))
                    {
                       current_mapping_table++;
                    }

                    if(OS_RECOGNISABLE(key_code))
                    {
                        // push onto keys down stack
                        keys_down.push(key_code);
                    }
                 }
              }
              else
              {
                 if(mapping_tables[current_mapping_table].set_key_state(row, column, KEY_UP))
                 {
                    key_code = mapping_tables[current_mapping_table].translate(row, column);

                    if(SPECIAL_KEY(key_code))
                    {
                       current_mapping_table--;
                    }

                    if(OS_RECOGNISABLE(key_code))
                    {
                       // push onto keys up stack
                       keys_up.push(key_code);
                    }

                 }
              }

              mask = mask << 1;
          }

  }


}


void keyboard::flush_all(void)
{
     for(int p = 0; p < number_of_mapping_tables; p++)
     {
         mapping_tables[current_mapping_table].flush();
     }
}


void keyboard::inform_kernel(void)
{

  int key;

  // send to the kernel the codes of all of the keys that have been released
  while(keys_up.keys_buffer_size() > 0)
  {
        // send to kernel keys_up.top();
        key = (int)keys_up.top();
        _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyUp, key, KeyV);
        keys_up.pop();
  }

  // send to the kernel the codes of all of the keys that have been pressed
  while(keys_down.keys_buffer_size() > 0)
  {
        // send to kernel keys_down.down();
        key = (int)keys_down.top();
        _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyDown, key, KeyV);
        keys_down.pop();
  }

}


// function used to access HAL
unsigned int keyboard::scan_matrix(int column)
{
   unsigned int rows = 0;

   (void)column;
   (void)rows;
   _swix(OS_Hardware, _IN(0)|_INR(8,9)|_OUT(0), column-1, 0, EntryNo_HAL_MatrixScan, &rows);
   return rows;
}




