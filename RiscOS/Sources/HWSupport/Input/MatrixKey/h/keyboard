/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include "ADTs.h"
#include "FKB1406.h"


#ifndef _KEYBOARD_H
#define _KEYBOARD_H



#define MAX_KEYS       128


#define RSVD 0xFF     /* Reserved keys that have no mapping */
#define NEQV 0xFF     /* Keys in RCMM that have no RISC OS equivalent */
#define UDEF 0xFF     /* Keys that are undefined (although these do have valid mappings defined by Philips) */



typedef enum key_states {KEY_UP, KEY_DOWN} KEY_STATES;

// prototypea
void DriverInit(void);
void Driver(void);



class keyboard
{
        public:
               keyboard();                            // constructor
               void poll_keys(void);
               void inform_kernel(void);
        private:
               void init_kbd_hardware(void) const;
               void buffer_key(unsigned int row, unsigned int column, KEY_STATES key_state);
               unsigned int get_layer(void) const;
               unsigned char translate_key_code(unsigned int row, unsigned int column) const;
               KEY_STATES kbd_states[ROW_SIZE][COLUMN_SIZE];          // used to hold the states of the keys
               keys_buffer keys_up;
               keys_buffer keys_down;
               unsigned int number_of_keys_down;         // variable to keep track of number of keys down

};







#endif
