/*************************************************************************
Copyright [2000] Pace Micro Technology PLC. All rights reserved.

The copyright in this material is owned by Pace Micro Technology PLC
("Pace"). This material is regarded as highly confidential trade secret
of Pace. It may not be reproduced, used, sold or in any other way exploited
or transferred to any third party without the prior written permission of
Pace.
*************************************************************************/


#include "ADTs.h"


#ifndef _KEYBOARD_H
#define _KEYBOARD_H


#define NUMBER_OF_KEYCODES 0x80


#define RSVD 0xFF     /* Reserved keys that have no mapping */
#define NEQV 0xFF     /* Keys in RCMM that have no RISC OS equivalent */
#define UDEF 0xFF     /* Keys that are undefined (although these do have valid mappings defined by Philips) */
#define SPEC 0x7F     /* FN key. when this key is down mapping table will be switched to one above it. */


typedef unsigned char KEY_STATES;

enum key_states {KEY_UP, KEY_DOWN};

// prototypes
void DriverInit(void);
void Driver(void);



class mapping_table
{
      public:
             mapping_table();
             ~mapping_table();
             void erase(void);
             bool load_key_code(int key_code);
             int translate(unsigned int row, unsigned int column) const;
             void set_number_of_columns(unsigned int n) { number_of_columns = n; }
      private:
             int calc_index(int row, int column) const { return (row-1)*number_of_columns+(column-1); }
             unsigned char* translation_table;
             unsigned int size_of_translation_table;
             unsigned int number_of_loaded_key_codes;
             unsigned int number_of_columns;

};


class keyboard
{
        public:
               keyboard();
               ~keyboard();
               bool extract_layouts(const char* pathname);
               void poll_keys(void);
               void inform_kernel(void);
               unsigned int get_number_of_mapping_tables(void) {return number_of_mapping_tables;};
               bool set_key_state(unsigned int row, unsigned int column, KEY_STATES state);
               KEY_STATES get_key_state(unsigned int row, unsigned int column) const;
               unsigned int number_of_rows;
               unsigned int number_of_columns;
               mapping_table* mapping_tables;    // array of mapping table objects
               void flush(void);

        private:
               int calc_index(int row, int column) const { return (row-1)*number_of_columns+(column-1); }
               unsigned int scan_matrix(int column);
               void layer_change(int new_layer);
               unsigned int size_of_state_table;
               keys_buffer keys_up, keys_down;
               unsigned int number_of_mapping_tables;
               unsigned int current_mapping_table;
               KEY_STATES* states_of_keys;
};







#endif
