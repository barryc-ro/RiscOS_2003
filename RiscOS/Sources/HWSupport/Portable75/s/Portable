;******************************************************************************
;
; Module header
;
Module_BaseAddr
        DCD     0
        DCD     Init     - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     Title    - Module_BaseAddr
        DCD     Help     - Module_BaseAddr
        DCD     0
        DCD     Module_SWISystemBase + PortableSWI * Module_SWIChunkSize
        DCD     SWIEntry - Module_BaseAddr
        DCD     SWINameTable - Module_BaseAddr
        DCD     0

Help    DCB     "Portable",9,"$Module_MajorVersion ($Module_Date) Non-portable version",0
        ALIGN

Title ; Share the string
SWINameTable
        =       "Portable",0
        =       "Speed",0
        =       "Control",0
        =       "ReadBMUVariable",0
        =       "WriteBMUVariable",0
        =       "CommandBMU",0
        =       "ReadFeatures",0
        =       "Idle",0
        =       "Stop",0
        =       "Status",0
        =       0
        ALIGN

;******************************************************************************
;
; Init - Module initialisation code
;
; Exit
;   R7-R11, R13 preserved
;
Init    ENTRY   "R7"
;
; Check machine type
;
        MOV     r0, #2                          ;Check main hardware details
        SWI     XOS_ReadSysInfo
        EXIT    VS
                                                ;R0 bits 8..15 give I/O control chip type
        AND     r0, r0, #&0000FF00              ;  0=IOC, 1=IOMD
        TEQ     r0,     #&00000100              ;  must have IOMD
                                                ;R2 bits 0..7 give LCD controller type
        ANDEQ   r2, r2, #&000000FF              ;  0=absent, 1=A4, 2=Stork
        TEQEQ   r2,     #&00000000              ;  must be absent
        BNE     %FT99

        MOV     r0, #IOMD_Base                  ; Read IOMD's ID register
        LDRB    r1, [r0, #IOMD_ID0]
        LDRB    r2, [r0, #IOMD_ID1]

        TEQ     r1, #IOMD_7500 :AND: &FF        ; We work on ARM 7500
        TEQEQ   r2, #IOMD_7500 :SHR: 8
        EXITS   EQ

        TEQ     r1, #IOMD_7500FE :AND: &FF      ; or ARM 7500FE
        TEQEQ   r2, #IOMD_7500FE :SHR: 8
        EXITS   EQ

;
;Wrong hardware for Portable module
;
99
        ADR     r0, ErrorBlock_BadHard
        MOV     r1, #0                          ;only use global message file
        MOV     r2, #0                          ;use MessageTrans buffer
        MOV     r3, #0                          ;buffer size (irrelevant)
        MOV     r4, #0                          ;don't substitute anything
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

;******************************************************************************

SWIEntry        ROUT
        LDR     R12,[R12]
        CMPS    R11,#(EndSWIJmpTable - SWIJmpTable) /4
        ADDCC   PC,PC,R11,LSL #2
        B       SWIUnknown

SWIJmpTable
        B       SWISpeed
        B       SWIControl
        B       SWI_ReadBMUVariable
        B       SWI_WriteBMUVariable
        B       SWI_CommandBMU
        B       SWIReadFeatures
        B       SWIIdle
        B       SWIStop
        B       SWIStatus
EndSWIJmpTable

;******************************************************************************


SWIUnknown
SWISpeed
SWIControl
SWI_ReadBMUVariable
SWI_WriteBMUVariable
SWI_CommandBMU
SWIStop
SWIStatus
        ENTRY   "R1-R7"
        ADR     R0, ErrorBlock_ModuleBadSWI
        MOV     R1, #0                          ; only use global message file
        MOV     R2, #0                          ; use internal buffer
        ADR     R4, Title
        MOV     R5, #0                          ; no parameter 0
        MOV     R6, #0                          ; no parameter 0
        MOV     R7, #0                          ; no parameter 0
        SWI     XMessageTrans_ErrorLookup
        Pull    "R1-R7,pc"


;******************************************************************************
;
; SWI Portable_ReadFeatures
;
; Exit
;   R1  = bit 4 set to indicate SWI Portable_Idle is implemented
;
; All other bits in R1 zeroed, all other registers preserved.
;
SWIReadFeatures ROUT
        MOV     R1, #PortableFeature_Idle
        MOVS    PC, LR

;******************************************************************************
;
; SWI Portable_Idle - Places the system into idle mode.
;
; The CPU clock is stopped, but all other clocks run normally. This means the
; Video display and all the IO channels are active, the DRAM is refreshed, but
; the system consumes less power as the CPU is inactive. The CPU remains in
; this state until it receives a FIQ or IRQ interrupt (eg from the keyboard,
; floppy, centi-second timer etc).
;
SWIIdle ROUT
        MOV     R11, #0                         ;0 will stop Fclk, Clk2, Clk8, Ref8 and Clk16
        MOV     R10, #IOMD_Base                 ;1 will stop Fclk (the CPU core clock) only
 [ Debug
        LDRB    R12, [R10, #IOMD_CLINES]
        ORR     R12, R12, #2_01110101           ; keep inputs as inputs
        EOR     R12, R12, #2_00001000           ; toggle LED
        STRB    R12, [R10, #IOMD_CLINES]
 ]
        STRB    R11, [R10, #IOMD_IDLEMODE]
 [ Debug
        EOR     R12, R12, #2_00001000
        STRB    R12, [R10, #IOMD_CLINES]        ; put LED back
 ]
        MOVS    PC, LR

        MakeErrorBlock  BadHard
        MakeErrorBlock  ModuleBadSWI

        END
