; > FastCent

; Driver for chips which support fast Centronics mode (eg. C&T 82C735 or
; SMC FDC37C665).  On output the chip will handshake for us using STROBE
; and BUSY and will normally use an on chip FIFO.

; Define default settings for control registers.

fast_ctrl_output        * pp_ctrl_slctin :OR: pp_ctrl_init
fast_ecr_output         * pp_ecr_flag_FIFO :OR: pp_ecr_errintdis

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: FastDevice
;
; in:   r0  = reason code
;       r8  = private word
;       wp -> workspace
;
; out:  V clear, registers setup correctly
;       V set, r0 -> error block
;
; This entry point is provided to allow the device to do what it needs to
; do, this is called by DeviceFS to pass events and control operations to the
; device driver.
;

FastDevice      ROUT

                BIC     lr, lr, #V_bit+ C_bit                   ; just ensure that all is OK
                CMP     r0, #(%10-%00)/4
                ADDCC   pc, pc, r0, LSL #2                      ; despatch the event
                B       %10                                     ; if not valid then give an error
00
                B       fast_open                               ; open a stream
                B       fast_close                              ; close the stream
                B       fast_wakeupTX                           ; wake up because someones transfering
                MOVS    pc, lr
                MOVS    pc, lr
                MOVS    pc, lr
                B       common_createTX                         ; create buffer for TX
                MOVS    pc, lr
                MOVS    pc, lr
                MOVS    pc, lr
                MOVS    pc, lr
                B       fast_created                            ; output or input stream created
                B       ioeb_monitorTX                          ; check sending is okay
                MOVS    pc, lr                                  ; monitor rx
                MOVS    pc, lr                                  ; ioctl
10
                ADRL    r0, ErrorBlock_Parallel_BadCall         ; if not within valid range
                DoError                                         ; then generate an error



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: fast_open
;
; in:   r0  = reason code
;       r2  = external handle
;       r3  = flags
;       r6 -> special field block
;
; out:  r1  = internal handle
;
; This call attempts to open a stream onto the specified device.
;

fast_open       ENTRY   "r0,r1"
                Debug   open,"fast_open"
 [ StorkPower
                BL      SetPower_On             ;Should be powered down, so power up
 ]
                MOV     r0, #IOEB_PrinterIRQ_DevNo
                ADRL    r1, fast_irqwrite
                BL      common_open
 [ StorkPower
                BLVS    SetPower_Off            ;If openning failed, try powering down. If failure occurred
                                                ;because port was in use, the service call will be faulted
                                                ;and the port will remain powered (as it should be).
 ]
                EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: fast_close
;
; in:   r0  = reason code
;       r2  = internal handle
;
; out:  -
;
; This routine handles the closing of a stream.
;

fast_close      ENTRY   "r0-r2"
                Debug   close,"fast_close"
                MOV     r0, #IOEB_PrinterIRQ_DevNo
                ADRL    r1, fast_irqwrite
                MOV     r2, #0
                BL      common_close
                BL      IOEBreset
 [ StorkPower
                BL      SetPower_Off            ;Will be powered up, so power down
 ]
                EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: fast_created
;
; in:   r0 = reason code (11)
;       r2 = internal handle
;       r3 = buffer handle
;
; out:  -
;
; This routine is called when an input or output stream has been created.
;

fast_created    ENTRY   "r0-r2"

                Debug   open,"fast_created, buffer handle =",r3

                STR     r3, BufferHandle        ; store buffer handle for read or write

 [ FastBufferMan
                MOV     r0, r3
                SWI     XBuffer_InternalInfo
                STRVS   r0, [sp]
                EXIT    VS
                STR     r0, BufferId
                STR     r1, BuffManService
                STR     r2, BuffManWkSpace
 ]

                ClearPINTR r0,lr                ; clear pending interrupt

                MOV     lr, pc
                TST     lr, #I_bit              ; if IRQs enabled then
                TEQEQP  lr, #I_bit              ;   disable them

                LDR     lr, =pp_ecr
                MOV     r0, #fast_ecr_output
                STRB    r0, [lr]

                LDR     lr, =pp_ctrl
                MOV     r0, #fast_ctrl_output   ; set up for output
                STRB    r0, [lr]

                EXITS



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: fast_wakeupTX
;
; in:   r0  = reason code
;       r2  = internal handle
;
; out:  -
;
; Handle waking up the device, something has happened to it.
;

fast_wakeupTX   ENTRY   "r0"

                ORR     lr, lr, #I_bit + F_bit  ; disable IRQs and FIQs round this bit
                TEQP    lr, #0

                MOV     r0, #IOC                ; just enable device interrupts so we can fill FIFO
                LDRB    lr, [r0, #IOCIRQMSKA]
                ORR     lr, lr, #pbusy_bit
                STRB    lr, [r0, #IOCIRQMSKA]

                EXITS



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This interrupt is generated when the parallel port FIFO contains a number of
; bytes less than or equal to the configured threshold (set up by the system
; kernel).  All we have to do is fill the FIFO and exit.  If we run out of
; bytes to send then we disable the interrupt and wait to be woken up by
; fast_wakeupTX.
;

fast_irqwrite   ENTRY

                ClearPINTR r0,r1                                ; clear interrupt

                LDR     r0, =pp_ecr                             ; reenable service interrupts in pp_ecr
                MOV     r1, #fast_ecr_output
                STRB    r1, [r0]
10
 [ FastBufferMan
                MOV     r0, #BufferReason_RemoveByte
                LDR     r1, BufferId
                CallBuffMan
 |
                MOV     r2, pc
                BIC     r2, r2, #C_bit + V_bit                  ; clear C&V for entering mode
                ORR     lr, r2, #SVC_mode                       ; derive SVC mode (NB if entered in SVC mode, then
                                                                ; we've already saved lr_svc, so we can junk it now)
                TEQP    lr, #0                                  ; change to SVC mode with C and V clear
                LDR     r1, StreamHandle
                Push    "lr"                                    ; preserve SVC_LR
                SWI     XDeviceFS_TransmitCharacter             ; get character to send
                Pull    "lr"

                ORRCS   r2, r2, #C_bit                          ; ensure C flag reflected correctly
                TEQP    r2, #0                                  ; back to original mode (IRQ or SVC)
 ]
                BCS     %FT20                                   ; if no byte to send then disable IRQ and wait for wakeupTX

                LDR     r3, =pp_fifo
                STRB    byte, [r3]                              ; send byte (we know FIFO has space for at least 1 byte)
                LDRB    lr, [r3, #pp_ecr-pp_fifo]
                TST     lr, #pp_ecr_full                        ; if FIFO is still not full then
                BEQ     %BT10                                   ; send another byte
                EXITS
20
                MOV     lr, pc
                TST     lr, #F_bit                              ; FIQs currently enabled?
                TEQEQP  lr, #F_bit                              ; ensure that they are no longer

                MOV     r3, #IOC
                LDRB    lr, [r3, #IOCIRQMSKA]
                BIC     lr, lr, #pbusy_bit                      ; disable printer interrupts
                STRB    lr, [r3, #IOCIRQMSKA]

                EXITS                                           ; no character so exit restoring FIQs


                END

