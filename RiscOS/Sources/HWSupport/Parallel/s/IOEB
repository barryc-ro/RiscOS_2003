; > IOEB

;time delay multipliers (times approx 0.5 us) for handshaking timeouts
;
TimeoutPACKhigh     *  40   ;40
TimeoutBusyAfterAck *  40   ;20

; Define information about the printer control port.

pp_base                 * C710 + (&278 * 4)

pp_data                 * pp_base +0                    ; data port in non-FIFO mode
pp_stat                 * pp_base +4                    ; status register
pp_ctrl                 * pp_base +8                    ; control register
pp_fifo                 * pp_base + (&400 * 4)          ; FIFO data port (may depend on the chip being used)
pp_ecr                  * pp_base + (&402 * 4)          ; extended control register

pp_stat_notbusy         * 1:SHL:7       ; set => ready for data,                clear => busy
pp_stat_ack             * 1:SHL:6       ; goes low during acknowledge pulse
pp_stat_pe              * 1:SHL:5       ; set => no paper,                      clear => paper
pp_stat_slct            * 1:SHL:4       ; set => online,                        clear => off line
pp_stat_error           * 1:SHL:3       ; set => no error,                      clear => error

pp_ctrl_dir             * 1:SHL:5       ; set => input, clear => output
pp_ctrl_irqen           * 1:SHL:4       ; set => irq gen when ACK low,          clear => irq disabled
pp_ctrl_slctin          * 1:SHL:3       ; set => select printer,                clear => off line
pp_ctrl_init            * 1:SHL:2       ; set => normal operation,              clear => reset printer (min 50µs)
pp_ctrl_autofd          * 1:SHL:1       ; set => generate auto feed,            clear => no autofeed
pp_ctrl_strobe          * 1:SHL:0       ; set => active low pulse,              clear => no strobe

pp_ecr_mode             * 7:SHL:5       ; mask out mode bits
pp_ecr_errintdis        * 1:SHL:4       ; set => irq disabled,                  clear => irq gen on error
pp_ecr_dmaen            * 1:SHL:3       ; set => DMA enabled,                   clear => DMA disabled
pp_ecr_servintdis       * 1:SHL:2       ; set => irq disabled,                  clear => irq gen on service interrupt
pp_ecr_full             * 1:SHL:1       ; set => FIFO is full,                  clear => >=1 free byte in FIFO
pp_ecr_empty            * 1:SHL:0       ; set => FIFO is empty,                 clear => >=1 byte in FIFO

; Define default settings for control registers.

pp_ctrl_default         * pp_ctrl_init :OR: pp_ctrl_slctin
pp_ecr_default          * 2_001:SHL:5 :OR: pp_ecr_errintdis

ioeb_ctrl_output        * pp_ctrl_irqen :OR: pp_ctrl_slctin :OR: pp_ctrl_init
ioeb_ctrl_input         * pp_ctrl_dir :OR: pp_ctrl_irqen :OR: pp_ctrl_slctin :OR: pp_ctrl_init :OR: pp_ctrl_autofd


; Clear printer interrupt depending on hardware type (IOMD has clear bit).
                MACRO
$label          ClearPINTR $v0,$v1

$label          LDRB    $v0, InterruptBit
                LDR     $v1, InterruptClear
                STRB    $v0, [$v1]
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: IOEBdevice
;
; in:   r0  = reason code
;       r8  = private word
;       wp -> workspace
;
; out:  V clear, registers setup correctly
;       V set, r0 -> error block
;
; This entry point is provided to allow the IOEB device to do what it needs to
; do, this is called by DeviceFS to pass events and control operations to the
; device driver.
;

IOEBdevice      ROUT

                Push    lr
                SavePSR lr
                BIC     lr, lr, #V_bit+ C_bit                   ; just ensure that all is OK
                Push    lr
                JumpAddress lr, device_call_exit, forward       ; load return address
                CMP     r0, #(%10-%00)/4
                ADDCC   pc, pc, r0, LSL #2                      ; despatch the event
                B       %10                                     ; if not valid then give an error
00
                B       ioeb_open                               ; open a stream
                B       ioeb_close                              ; close the stream
                B       ioeb_wakeupTX                           ; wake up because someones transfering
                MOV     pc, lr                                  ; wakeup RX
                MOV     pc, lr                                  ; sleep RX
                MOV     pc, lr                                  ; enum dir
                B       common_createTX                         ; create buffer for TX
                B       common_createRX                         ; create buffer for RX
                MOV     pc, lr                                  ; halt
                B       ioeb_resume                             ; start sender sending again
                MOV     pc, lr                                  ; end of data
                B       ioeb_created                            ; output or input stream created
                B       ioeb_monitorTX                          ; check sending is okay
                MOV     pc, lr                                  ; monitor rx
                MOV     pc, lr                                  ; ioctl
10
                Pull    lr
                ADRL    r0, ErrorBlock_Parallel_BadCall         ; if not within valid range
                Pull    lr
                B       make_error

device_call_exit
                Pull    lr
                ORRVS   lr, lr, #V_bit
                ORRCS   lr, lr, #C_bit
                RestPSR lr,,f
                Pull    pc

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: IOEBreset
;
; in:   -
;
; out:  -
;
; This routine allows the module to reset the hardware being controlled
; by the device to a nice set of defaults.
;

IOEBreset       EntryS   "r0,r1"

                ClearPINTR r0,r1                                ; attempt to clear any pending interrupts

        [ FastCentronics
                LDRB    r0, Flags
                TST     r0, #f_UseFIFO                          ; if FIFO hardware is there then
                LDRNE   r0, =pp_ecr
                MOVNE   r1, #pp_ecr_default                     ;   program default value
                STRNEB  r1, [r0]
        ]

                LDR     r0, =pp_base
                STR     r0, HardwareBase                        ; setup the hardware base for device

                MOV     r1, #pp_ctrl_default                    ; program default value into control register
                STRB    r1, [r0, #pp_ctrl-pp_base]

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_open
;
; in:   r0  = reason code
;       r2  = external handle
;       r3  = flags
;       r6 -> special field block
;
; out:  r1  = internal handle
;
; This call attempts to open a stream onto the specified device.
;

ioeb_open       ENTRY   "r0,r1"
                Debug   open,"ioeb_open"
 [ StorkPower
                BL      SetPower_On             ;Should be powered down, so power up
 ]
                LDRB    r0, DeviceNo
                TST     r3, #&01
                ADREQL  r1, ioeb_irqread
                ADRNEL  r1, ioeb_irqwrite
                BL      common_open
 [ StorkPower
                BLVS    SetPower_Off            ;If openning failed, try powering down. If failure occurred
                                                ;because port was in use, the service call will be faulted
                                                ;and the port will remain powered (as it should be).
 ]
                EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_close
;
; in:   r0  = reason code
;       r2  = internal handle
;
; out:  -
;
; This routine handles the closing of a stream onto IOEB.
;

ioeb_close      ENTRY   "r0-r2"
                Debug   close,"ioeb_close"
                LDRB    r0, DeviceNo
                LDRB    r1, Flags
                TST     r1, #f_OpenForRead
                ADRNEL  r1, ioeb_irqread
                ADREQL  r1, ioeb_irqwrite
                ADRL    r2, ioeb_busy_check_callafter
                BL      common_close
                BL      IOEBreset
 [ StorkPower
                BL      SetPower_Off            ;Will be powered up, so power down
 ]
                EXIT



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_created
;
; in:   r0 = reason code (11)
;       r2 = internal handle
;       r3 = buffer handle
;
; out:  -
;
; This routine is called when an input or output stream has been created.
;

ioeb_created    EntryS  "r0-r2"

                Debug   open,"ioeb_created, buffer handle =",r3

                STR     r3, BufferHandle        ; store buffer handle for read or write

        [ FastBufferMan
                MOV     r0, r3
                SWI     XBuffer_InternalInfo
                STRVS   r0, [sp, #Proc_RegOffset]
                EXIT    VS
                STR     r0, BufferId
                STR     r1, BuffManService
                STR     r2, BuffManWkSpace
        ]

                ClearPINTR r0,lr                ; attempt to clear any pending interrupts

                SETPSR  I_bit,lr                ; Disable interrupts

                LDRB    r0, Flags
                TST     r0, #f_OpenForRead
                LDR     r0, =pp_ctrl

                MOVEQ   r1, #ioeb_ctrl_output   ; set up for output
                STREQB  r1, [r0]
                EXITS   EQ                      ; do nothing else if open for output

                MOV     r1, #ioeb_ctrl_input
                STRB    r1, [r0]                ; set up for input

                MOV     r0, #IOC
                LDRB    r2, InterruptBit

                SETPSR  F_bit,lr                ; disable FIQs

                LDRB    r1, [r0, #IOCIRQMSKA]
                ORR     r1, r1, r2              ; enable device interrupts
                STRB    r1, [r0, #IOCIRQMSKA]

                EXITS


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_monitorTX
;
; in:	r0  = reason code (12)
; 	r1  =
;       r2  = internal handle
;
; out:  r0-r2 corrupted
;
; This routine is called by DeviceFS to check the device if the TX buffer is
; almost full. It can therefore be used to report printer error conditions

;Message tokens
paper		=		"Paper", 0
online		=		"OnLine", 0
printer		=		"Printer", 0
continue	=		"Continue",0
cancel		=		"Cancel",0
		ALIGN

; Now the real code: make an upcall on printer error, resuming if it's handled properly.

ioeb_monitorTX	ROUT
		LDR 		r0, =pp_stat
		LDRB		r0, [r0]		; read status register byte

		ENTRY		"r1-r9"			; OS_UpCall needs up to r6, but we can corrupt up to r2

	; This tests for an error if it is detected looks at it for a test period to ensure it is stable

		TST		R0, #pp_stat_slct
		MOVEQ		r1, #pp_stat_slct	; off-line?  set = online
		BLEQ		test_NSet_loop		; if it is offline check that this is stable not noise
		BEQ		off_line

		TST		r0, #pp_stat_pe		; out of paper? set = no paper
		MOVNE		r1, #pp_stat_pe
		BLNE		test_Set_loop		; check that it stays set for 1 micro sec.
		BNE		paper_out

		TST		r0, #pp_stat_error	; pp_stat_error clear for any other error
		MOVEQ		r1, #pp_stat_error	; set = no error
		BLEQ		test_NSet_loop		; if it is an error check that this is stable not noise
		BEQ		not_working

		EXIT

;+++++++++++++++++++++++++++++++++++++++++++++ test stable errors Start

	; ADD a wait loop and check that the error is stable
	; r0 ppstat, r1 is the error
	; r3 is the address of the ppstat this needs to be read on each loop

test_Set_loop
		Push 	"r2,r3,lr"

		LDR 	r3, =pp_stat
		LDR	r2, LoopFactor				; Get CPU speed rating
		MOV	r2, r2, LSR #2
20
		LDRB	r0, [r3]				; read status register byte
		TST	R0,R1
		BEQ	%FT25					; test to see if the ppstat clears
                SUBS    r2, r2, #1
                BNE     %BT20					; this leaves the loop on EQ
		MOVS	R1, R1		;Set the NE condition,		stable error
                Pull	"r2,r3 ,pc"
25
		Pull	"r2,r3 ,pc"	;EQ condition is set	Not a stable error

test_NSet_loop
		Push 	"r2,r3,lr"

		LDR 	r3, =pp_stat
		LDR	r2, LoopFactor				; Get CPU speed rating
		MOV	r2, r2, LSR #2
20
		LDRB	r0, [r3]				; read status register byte
		TST	R0,R1
		BNE	%FT25					; this sets the condition to NE
                SUBS    r2, r2, #1
                BNE     %BT20					; this sets the returning condition to EQ
25								; this is the error condition
                Pull	"r2,r3,pc"

;+++++++++++++++++++++++++++++++++++++++++++++ test stable errors END
paper_out
		Debug		j, "paper out"
		MOV		r4, #0			;iteration count
		ADR		r6, paper
		B		do_lookup_and_upcall

off_line
		Debug		j, "printer not connected"
		MOV		r4, #0			;iteration count
		ADRL		r6, online
		B		do_lookup_and_upcall

not_working
		Debug		j, "printer not working"
		MOV		r4, #0			;iteration count
		ADRL		r6, printer
		;fall through

do_lookup_and_upcall
		;Convert token in r6 to message in r6
		BL		OpenMessages
		ADDVS		r6, r0, #4
		BVS		do_upcall		;if it went wrong, use the error as the message

		ADRL		r0, MessagesWorkspace
		MOV		r1, r6
		ADRL		r2, localerrorblock
		MOV		r3, #?localerrorblock
		SWI		XMessageTrans_Lookup
		MOVVC		r6, r2
		ADDVS		r6, r0, #4		;if it went wrong, use the error as the message

do_upcall	;Make the upcall

		MOV		r0, #UpCall_MediaNotPresent
		MOV		r1, #fsnumber_DeviceFS
		MOV		r2, #-1			;message in r6 (not media type)
		MOV		r3, #-1			;device number irrelevant
		;r4 cleared first time, incremented subsequently
		MOV		r5, #&7FFFFFFF		;timeout (very big)
		;r6 set up depending on reason for upcall

		Debug		j, "OS_UpCall called", r0
		SWI		XOS_UpCall
		Debug		j, "OS_UpCall returned", r0
		EXIT		VS

		CMP		r0, #-1
		BNE		not_cancel	;if this falls through it does not call exit with message

		Debug		j, "SHOULD EXIT WITH MESSAGE"
		ADRL		r6, cancel		;move the specific error "cancel"
		BL		exit_with_message	; send exit message then exit
		EXIT		VS

		;Try to report the error state as it is now, but make sure that some error
		;is reported even if all conditions have been (coincidentally) cleared.
set_errorblock
		LDR 		r0, =pp_stat
		LDRB		r0, [r0]		; read status register byte

		; now we've got an error, so what type is it?
		TST		r0, #pp_stat_pe		; paper out?
		ADRNEL		r0, ErrorBlock_Parallel_PaperOut
		BNE		make_error

		TST		r0, #pp_stat_slct	; off-line?
		ADREQL		r0, ErrorBlock_Parallel_Offline
		ADRNEL		r0, ErrorBlock_Parallel_OtherError
		;fall through

make_error
		;r0 -> error block
		PullEnv
		[		international
		B		MakeError
		|
		RETURNVS
		]

not_cancel
                ; New strategy. Just exit with continuing message and let the higher levels
                ; raise the error again if necessary. This should be cleaner and provides
                ; more feedback to the user.

                ADRL            r6, continue            ;move the specific error "continue"
                BL              exit_with_message       ; All o k
                EXIT                                    ;This is the actual correct exit of this routine

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

exit_with_message

		ENTRY 		"R1-R6"
		Debug		j, "exit with message"

		BL		OpenMessages
		ADDVS		r6, r0, #4
		BVS		send_exit		;if it went wrong, use the error as the message

		ADRL		r0, MessagesWorkspace
		MOV		r1, r6
		ADRL		r2, localerrorblock
		MOV		r3, #?localerrorblock
		SWI		XMessageTrans_Lookup
		MOVVC		r6, r2
		ADDVS		r6, r0, #4

send_exit	; call the end media search call

		MOV		R1, R6
		MOV		r0, #UpCall_MediaSearchEndMessage
		Debug		j, "OS_UpCall called", r0
		SWI		XOS_UpCall
		Debug		j, "OS_UpCall returned", r0
		EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_wakeupTX
;
; in:   r0  = reason code
;       r2  = internal handle
;
; out:  -
;
; Handle waking up the device, something has happened to it.
;

ioeb_wakeupTX   EntryS  "r0-r3"

                SETPSR  I_bit, lr               ; disable IRQs round this bit

                MOV     r3, #IOC
                BL      ioeb_busy               ; returns EQ if not busy
                BLEQ    ioeb_strobe
                EXITS   EQ

                MOV     r0, #0                  ; indicate we wish to remain dormant
                STR     r0, [sp, #Proc_RegOffset]
                LDRB    r3, IRQFlags
                TST     r3, #if_PendingCallAfter ; if we've already asked for a callafter
                EXITS   NE                      ; then exit

                LDR     r0, =BusyCheckInterval
                ADR     r1, ioeb_busy_check_callafter
                MOV     r2, wp
                SWI     XOS_CallAfter
                ORRVC   r3, r3, #if_PendingCallAfter
                STRVCB  r3, IRQFlags

                EXITS

                ; CallAfter routine.  Entered in SVC mode with IRQs disabled.
                ; Must preserve all registers and exit with MOV pc, lr (PRM 1-429)
ioeb_busy_check_callafter EntryS "r0"
                LDRB    r0, IRQFlags
                BIC     r0, r0, #if_PendingCallAfter    ; indicate no pending callafter any more
                STRB    r0, IRQFlags
                BL      ioeb_wakeupTX                   ; and call wakeup routine
                EXITS                                   ; and exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioeb_busy
;
; in:   r3 -> IOC
;       IRQs disabled
;
; out:  EQ if printer busy, else NE
;
; This routine will simply read the state of the busy pin from the 710.
;

ioeb_busy       ENTRY   "r0,r1"
                LDR     lr, =pp_stat
                LDRB    lr, [lr]                                ; lr  = status byte
                AND     r1, lr, #pp_stat_notbusy                ; is the port busy? =0 if so
                EORS    r1, r1, #pp_stat_notbusy                ; invert Z to be correct for any exit
                EXIT    EQ                                      ; return EQ, ie. port free

                LDRB    r1, InterruptBit

                ; disable FIQs round updates to IOCIRQMSKA
                SETPSR  F_bit,r0,,lr                            ; old PSR into lr (note: Z clear in lr!)
                LDRB    r0, [r3, #IOCIRQMSKA]
                ORR     r0, r0, r1
                STRB    r0, [r3, #IOCIRQMSKA]
                RestPSR lr,,cf                                  ; restores PSR

                EXIT                                            ; Z=0, ie. printer is busy, NE

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Strobe characters to the printer port for the 82c710.  Routine can be
; called from anymode, assumes that BufferHandle contains the buffer
; to be examined and character to be strobed.
;
; Also assumes that the direction bit within pp_ctrl has been setup correctly
; so that the port is defined for output rather than input.

;Entry
;	IRQ mode, interrupts off
;	r3 -> base of IOC memory space
;	r12 -> workspace
;	Not currently threaded (non-reentrant)
;Exit
;	Interrupt serviced
;	r0--r3, r12 corrupted
;Notes
;	Execution time <= 100µs
;	SWI's called by method on P R M p1-127 (X SWI's only)
;	Error stored---somewhere???
;	Calls re-entrant SWI's only

ioeb_irqwrite   ROUT

; The acknowledge interrupt is triggered on the falling (leading) edge of PACK, and some printers'
; manuals indicate that the printer is only ready when the pulse is completed (ie when PACK has gone high again).
; So now we should wait for PACK to go high, and then clear our interrupt

                LDR     r1, =pp_stat
		LDR	r2, LoopFactor				; Get CPU speed rating and loop until PACK is high
10
                LDRB    r0, [r1]
                TST     r0, #pp_stat_ack
                BNE     %FT15
                SUBS    r2, r2, #1
                BNE     %BT10

                ClearPINTR r0,r1                                ; PACK not gone high (probably printer off)
                MOV     pc, lr                                  ; so clear interrupt and exit (printer on will start again)

15
        [ CheckBusyAfterAck
		LDR	r2, LoopFactor				; Get CPU speed rating
20
                LDRB    r0, [r1]
                TST     r0, #pp_stat_notbusy                    ; 0 => busy
                BNE     ioeb_strobe                             ; not busy, so carry on
                SUBS    r2, r2, #1
                BNE     %BT20

                ClearPINTR r0,r1                                ; clear interrupt anyway

                LDRB    r2, IRQFlags
                TST     r2, #if_PendingCallAfter                ; if we already have a pending callafter
                MOVNE   pc, lr                                  ; then exit

                ASSERT  (IRQ_mode :EOR: SVC_mode) = (IRQ32_mode :EOR: SVC32_mode)
                TOGPSR  (IRQ_mode :EOR: SVC_mode),r0,,r3        ; move from IRQ into SVC mode.

                LDR     r0, =BusyCheckInterval                  ; takes place of NOP
                Push    "r2, lr"
                ADR     r1, ioeb_busy_check_callafter
                MOV     r2, wp
                SWI     XOS_CallAfter
                Pull    "r2, lr"
                ORRVC   r2, r2, #if_PendingCallAfter
                STRVCB  r2, IRQFlags

                RestPSR r3,,cf                                  ; restore IRQ mode
                NOP
                MOV     pc, lr                                  ; and exit

        ]

; in: r3 -> IOC
;     SVC_mode or IRQ_mode
;     IRQs disabled (this is needed (a) because may enable pack IRQ (b) mustn't have F=1 and I=0
;
; out: r0-r2 corrupted
;

ioeb_strobe     EntryS

                ClearPINTR r0,r1                                ; clear interrupt after PACK has gone high again
                                                                ; note this is done inside the strobe routine in order
                                                                ; to clear any fake acknowledges generated on printer
                                                                ; power-on

        [ FastBufferMan
                MOV     r0, #BufferReason_RemoveByte
                LDR     r1, BufferId
                CallBuffMan
        |
                SavePSR r2
                BIC     r2, r2, #C_bit + V_bit                  ; clear C&V for entering mode
                BIC     lr, r2, #2_01100
                ORR     lr, lr, #SVC_mode                       ; derive SVC mode (NB if entered in SVC mode, then
                                                                ; we've already saved lr_svc, so we can junk it now)
                RestPSR lr                                      ; change to SVC mode with C and V clear
                LDR     r1, StreamHandle
                Push    "lr"                                    ; preserve SVC_LR
                SWI     XDeviceFS_TransmitCharacter             ; get character to send
                Pull    "lr"

                ORRCS   r2, r2, #C_bit                          ; ensure C flag reflected correctly
                RestPSR r2
                NOP                                             ; back to original mode (IRQ or SVC)
        ]

                LDRB    r1, InterruptBit

                SETPSR  F_bit,tmp,,lr                           ; set F bit, old PSR into lr

                LDRB    tmp, [r3, #IOCIRQMSKA]
                ORRCC   tmp, tmp, r1                            ; re-enable printer interrupts
                BICCS   tmp, tmp, r1
                STRB    tmp, [r3, #IOCIRQMSKA]

                EXITS   CS                                      ; if no character then exit
                RestPSR lr,,c                                   ; restore FIQ status (IRQs still disabled)

                LDR     lr, =IOEB_ASICPresent                   ; a safe place to read in IOC controlled
                                                                ; space to give us at least 5 ticks delay

                LDR     r1, =pp_data                            ; r1 -> port to write to
                STRB    byte, [r1]                              ; write character

; now do set up time of 0.5µs, so read dummy location

                LDRB    r0, [lr]

                LDRB    r2, [r1, #pp_ctrl-pp_data]
                ORR     r0, r2, #pp_ctrl_strobe                 ; enable strobing
                STRB    r0, [r1, #pp_ctrl-pp_data]

; now leave strobe high for at least 1µs, so do two dummy reads

                LDRB    r0, [lr]
                LDRB    r0, [lr]

                STRB    r2, [r1, #pp_ctrl-pp_data]              ; disable strobing

; no need to explicitly wait for 1µs with data valid, there's no way we can send another character within 1µs
; since we have to call SWI XDeviceFS_TransmitChar to get each char.
		[	FastBufferMan				; but not if we're using FastBufferMan JRC 14-Apr-1997
                LDRB    r0, [lr]
                LDRB    r0, [lr]
		]

; now cancel any pending callafter, since we've just transmitted a char

                LDRB    r0, IRQFlags
                TST     r0, #if_PendingCallAfter
                EXITS   EQ

                SavePSR r2
                BIC     lr, r2, #2_01100
                ORR     lr, lr, #SVC_mode                       ; force SVC mode
                RestPSR lr

                MOV     r1, wp
                Push    "r0,lr"
                ADR     r0, ioeb_busy_check_callafter
                SWI     XOS_RemoveTickerEvent
                Pull    "r0,lr"

                RestPSR r2                                      ; switch back

                BIC     r0, r0, #if_PendingCallAfter
                STRB    r0, IRQFlags

                EXITS



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; call: ioeb_irqread
;
;       Process incoming bytes.
;

ioeb_irqread    EntryS  "r0-r3"

                LDR     r1, =pp_data
                LDRB    byte, [r1]                      ; get input byte

                LDRB    tmp, [r1, #pp_ctrl-pp_data]
                BIC     tmp, tmp, #pp_ctrl_slctin :OR: pp_ctrl_autofd
                STRB    tmp, [r1, #pp_ctrl-pp_data]     ; signal busy using SLCTIN (+ AUTOFD for ECP cables)

                ClearPINTR r1,tmp                       ; clear interrupt

buffer_byte
        [ FastBufferMan
                MOV     r0, #BufferReason_InsertByte
                LDR     r1, BufferId
                CallBuffMan
        |
                SavePSR r3
                BIC     lr, r3, #2_01100 + C_bit + V_bit
                ORR     lr, lr, #SVC_mode
                RestPSR lr,,cf                          ; change to SVC mode (C & V clear)

                LDR     r1, BufferHandle
                Push    "r9,lr"
                MOV     r9, #INSV                       ; call vector directly for speed
                SWI     XOS_CallAVector                 ; buffer the byte
                Pull    "r9,lr"

                ORRCS   r3, r3, #C_bit                  ; reflect C flag in PSR
                RestPSR r3                              ; back to old mode
                MOV     r3, #IOC                        ; restore r3
        ]

                LDRB    r1, InterruptBit

                SETPSR  F_bit,tmp,,lr                   ; disable FIQs

                LDR     tmp, [r3, #IOCIRQMSKA]
                BICCS   tmp, tmp, r1                    ; if buffer is full, disable device interrupts
                ORRCC   tmp, tmp, r1                    ; else ensure they are enabled
                STRB    tmp, [r3, #IOCIRQMSKA]

                BICCC   lr, lr, #C_bit
                ORRCS   lr, lr, #C_bit
                RestPSR lr,,c                           ; restore FIQs

                STRCS   byte, ByteBuffer                ; remember the byte that couldn't be buffered
                LDRCSB  r0, IRQFlags
                ORRCS   r0, r0, #if_ReadHalted          ; set halted flag
                STRCSB  r0, IRQFlags
                EXITS   CS

                LDR     r2, =pp_ctrl
                LDRB    r0, [r2]
                ORR     r1, r0, #pp_ctrl_strobe
                STRB    r1, [r2]                        ; acknowledge using STROBE

                LDRB    r1, [r2]
                LDRB    r1, [r2]                        ; leave for at least 1µs

                ORR     r0, r0, #pp_ctrl_slctin :OR: pp_ctrl_autofd
                STRB    r0, [r2]                        ; remove STROBE and busy (SLCTIN and AUTOFD)

                EXITS



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; call: ioeb_resume
;
; If DeviceFS has failed to buffer a byte and returned above with C set then
; this entry point will eventually be called when the buffer has enough space.
; In the mean time the writer has not been acknowledged and its BUSY line has
; been left high so that it cannot send.
;

ioeb_resume     ALTENTRY                        ; needs to push same stuff as ioeb_irqread

                SETPSR  I_bit,lr                ; disable IRQs

                LDRB    r0, IRQFlags
                TST     r0, #if_ReadHalted
                EXITS   EQ

                Debug   in,"Resuming RX"

                BIC     r0, r0, #if_ReadHalted
                STRB    r0, IRQFlags

                LDR     byte, ByteBuffer        ; get the byte we couldn't buffer
                MOV     r3, #IOC
                B       buffer_byte             ; try again



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: IOEB_ReadDataStatus
;
; in:   r0 = 0
;
; out:  r0 preserved
;       r1 = contents of data register
;       r2 = contents of status register
;
; This routine reads the contents of the data and status registers.
;

IOEB_ReadDataStatus
                EntryS
                SETPSR  I_bit,r2                        ; disable IRQs

                LDR     r1, =pp_data
                LDRB    r2, [r1, #pp_stat-pp_data]
                LDRB    r1, [r1]

                EXITS


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: IOEB_WriteData
;
; in:   r0 = 1
;       r1 = data to be written
;
; out:  r0 preserved
;       r1 preserved
;
; This routine writes the contents of the data register.
;

IOEB_WriteData
                ENTRY
                LDR     lr, =pp_data            ; no need to disable IRQs
                STRB    r1, [lr]                ; it's atomic
                EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: IOEB_ReadWriteCtrl
;
; in:   r0 = 2
;       r1  = EOR mask
;       r2  = AND mask
;
; out:  r0 preserved
;       r1 = old state
;       r2 = new state
;
; This routine will read/write the control register based on the AND and EOR
; values specified.
;
; ctrl = (ctrl AND r2) EOR r1
;

IOEB_ReadWriteCtrl
                EntryS   "r0"

                SETPSR  I_bit, r0                               ; disable IRQs

                LDR     r0, =pp_ctrl                            ; -> control port
                LDRB    lr, [r0]
                AND     r2, lr, r2
                EOR     r2, r2, r1                              ; r2 = new state of control reg
                STRB    r2, [r0]                                ; update control register
                MOV     r1,lr

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: UpdateIOEBCtrl
;
; in:   r0  = EOR mask
;       r1  = AND mask
;
; out:  -
;
; This routine will adjust the control register based on the AND and EOR
; values specified.
;
; control = (control AND r1) EOR r0
;

UpdateIOEBCtrl  EntryS  "r2"

                SETPSR  I_bit,r2                                ; disable IRQs

                LDR     r2, =pp_ctrl                            ; -> control port
                LDRB    lr, [r2]
                AND     lr, lr, r1
                EOR     lr, lr, r0                              ; lr = new state of control reg
                STRB    lr, [r2]                                ; update control register (hardware)

                EXITS                                           ; exit, restoring original IRQ state

                END
