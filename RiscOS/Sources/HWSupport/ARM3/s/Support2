; > $.ARM3.Support2

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date                Description
; ----                -----------
; 21-Mar-89           Started
; 30-Oct-89           Upgraded to Aleph One functionality
; 01-Nov-89           Completed modifications
; 14-Mar-91       ECN Internationalised
; 23-May-91       ECN Close message file after error in init
; 22-Jul-91       ECN Turn off caching on RAM Disc. Loaded a file from RAM
;                     disc is faster with caching off.
; 11-Dec-91  1.09 SMC Now uses global BadSWI message for SWI num out of range.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Proc
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:MsgTrans

        LEADR   Module_LoadAddr

TAB     *       9
LF      *       10
FF      *       12
CR      *       13

UndefVec *      &00000004

ARM3CMOS * SystemSpeedCMOS
ConCacheBit *   &20

CacheOn *       3
CacheOff *      2

Arm3Cop CP      15

CR_Dummy        CN      0
CR_ID           CN      0
CR_Flush        CN      1
CR_Control      CN      2
CR_Cacheable    CN      3
CR_Updateable   CN      4
CR_Disruptive   CN      5

; Default cacheable areas
;
; ROM                   Cacheable       (&03400000..&03FFFFFF)
; I/O                   Not cacheable   (&03000000..&033FFFFF)
; Phys RAM              Not cacheable   (&02000000..&02FFFFFF)
; Log RAM (screen)      Not cacheable   (&01E00000..&01FFFFFF)
; Log RAM (RAM Disc)    Not cacheable   (&01000000..&013FFFFF)
;                       (No point in caching RAM Disc)
; Log RAM (non-screen)  Cacheable       (&00000000..&01DFFFFF)

Cacheable_Default *     2_11111100000000000111110011111111

; Default updateable areas
;
; ROM/CAM               Not updateable  (&03800000..&03FFFFFF)
; ROM/DAG               Not updateable  (&03400000..&037FFFFF)
; I/O                   Not updateable  (&03000000..&033FFFFF)
; Phys RAM              Not updateable  (&02000000..&02FFFFFF)
; Log RAM (screen)      Not updateable  (&01E00000..&01FFFFFF)
; Log RAM               Updateable      (&00000000..&01DFFFFF)

Updateable_Default *    2_00000000000000000111111111111111

; Default disruptive areas
;
; CAM                   Disruptive      (&03800000..&03FFFFFF)
; DAG                   Not disruptive  (&03400000..&037FFFFF)
; I/O                   Not disruptive  (&03000000..&033FFFFF)
; Phys RAM              Not disruptive  (&02000000..&02FFFFFF)
; Log RAM               Not disruptive  (&00000000..&01FFFFFF)

Disruptive_Default *    2_11110000000000000000000000000000

        MACRO
        SetCop  $reg, $cop
        MCR     Arm3Cop, 0, $reg, $cop, CR_Dummy
        MEND

        MACRO
        ReadCop $reg, $cop
        MRC     Arm3Cop, 0, $reg, $cop, CR_Dummy
        MEND

        MACRO
        FlushCache
        SetCop  R0, CR_Flush
        MEND

        MACRO
        SetControl $reg
        SetCop  $reg, CR_Control
        MEND

        MACRO
        SetCacheable    $reg
        SetCop  $reg, CR_Cacheable
        MEND

        MACRO
        SetUpdateable   $reg
        SetCop  $reg, CR_Updateable
        MEND

        MACRO
        SetDisruptive   $reg
        SetCop  $reg, CR_Disruptive
        MEND

        MACRO
        ReadControl $reg
        ReadCop  $reg, CR_Control
        MEND

        MACRO
        ReadCacheable    $reg
        ReadCop  $reg, CR_Cacheable
        MEND

        MACRO
        ReadUpdateable   $reg
        ReadCop  $reg, CR_Updateable
        MEND

        MACRO
        ReadDisruptive   $reg
        ReadCop  $reg, CR_Disruptive
        MEND

        ^       0, wp

CacheState        #      4
MessageFile_Block #     16
MessageFile_Open  #      4

ARM3_WorkspaceSize * :INDEX: @

; **************** Module code starts here **********************

Module_BaseAddr

        &       0                               ; no app start entry
        &       ARM3_Init    -Module_BaseAddr
        &       ARM3_Die     -Module_BaseAddr
        &       ARM3_Service -Module_BaseAddr
        &       ARM3_Title   -Module_BaseAddr
        &       ARM3_HelpStr -Module_BaseAddr
        &       ARM3_HC_Table-Module_BaseAddr
        &       ARM3CacheSWI * Module_SWIChunkSize
        &       ARM3_SWIHandler-Module_BaseAddr
        &       ARM3_SWITable-Module_BaseAddr
        &       0                               ; no swi name decode entry
 [ International_Help <> 0
        &       message_filename-Module_BaseAddr
 |
        &       0
 ]

ARM3_Title
        =       "ARM3Support", 0

ARM3_HelpStr
        =       "ARM3 Support", TAB, "1.14 (28 Oct 1994)", 0
        ALIGN

ARM3_HC_Table
        Command Cache, 1, 0, International_Help
        Command Cache, 1, 0, Status_Keyword_Flag:OR:International_Help, ConCache
        &       0

 [ International_Help = 0
Cache_Help
        =       "*Cache turns the cache on or off,"
        =       " or gives the cache state.", 13
Cache_Syntax
        =       "Syntax: *Cache [on|off]", 0
 |
Cache_Help              DCB     "HA3SCAC", 0
Cache_Syntax            DCB     "SA3SCAC", 0
 ]

        ALIGN                           ; so can be ADRed to
CacheOnString
        =       "M01", 0

        ALIGN                           ; so can be ADRed to
CacheOffString
        =       "M02", 0

        ALIGN
Cache_SyntaxError
        &       ErrorNumber_Syntax
 [ International_Help = 0
        =       "Syntax: *Cache [on|off]", 0
 |
        =       "SA3SCAC", 0
 ]

 [ International_Help = 0
ConCache_Help
        =       "*Configure Cache determines the default state"
        =       " of the cache.", 13
ConCache_Syntax
        =       "Syntax: *Configure Cache on|off", 0
 |
ConCache_Help           DCB     "HA3SCCA", 0
ConCache_Syntax         DCB     "SA3SCCA", 0
 ]

        ALIGN
ConCacheOnString
        =       "M03", 0

        ALIGN
ConCacheOffString
        =       "M04", 0

        ALIGN
ConCacheOnOffString
 [ International_Help = 0
        =       "Cache      on|off", 10, 13, 0
 |
        =       "M05", 0
 ]

        ALIGN
ConCache_SyntaxError
        &       ErrorNumber_Syntax
 [ International_Help = 0
        =       "Syntax: *Configure Cache on|off", 0
 |
        =       "SA3SCCA", 0
 ]
        ALIGN

ARM3_SWITable
        =       "Cache", 0
        =       "Control", 0
        =       "Cacheable", 0
        =       "Updateable", 0
        =       "Disruptive", 0
        =       "Flush", 0
        =       0
        ALIGN

; *****************************************************************************
;
;       ARM3_Init - Initialisation entry
;

ARM3_Init ENTRY
        LDR     R2, [R12]               ; have we got workspace yet ?
        TEQ     R2, #0
        BNE     %FT05

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #ARM3_WorkspaceSize
        SWI     XOS_Module
        EXIT    VS

; R2 -> workspace

        STR     R2, [R12]               ; save address in my workspace pointer,
                                        ; so Tutu can free it for me when I die
05
        MOV     R12, R2

        MOV     R0, #UndefVec
        LDR     R1, [R0]
        LDR     R2, MyUndefVec
        ADR     R3, MyUndefCode
        MOV     R5, #0          ; ensure failure if no transfer takes place
        STR     r5, MessageFile_Open
        MOV     R4, PC
        TEQP    PC, #SVC_mode + I_bit + F_bit   ; no IRQs or FIQs making undefs
        STR     R2, [R0]
        ReadCop R5, CR_ID
        STR     R1, [R0]
        TEQP    R4, #0

; now make sure that the ID says it's an ARM3 (or backwards-compatible)

        AND     R5, R5, #&FF00
        TEQ     R5, #&0300
        BLEQ    InitCache               ; if think we have ARM3, init cache
        BNE     NoARM3                  ; exit with error if failed to read id
                                        ; or if registers didn't read back OK
        FlushCache
        MOV     R0, #ReadCMOS
        MOV     R1, #ARM3CMOS
        SWI     XOS_Byte                ; read configuration bit
        EXIT    VS

        TST     R2, #ConCacheBit
        BLEQ    EnableCache             ; 0 => enable
        BLNE    DisableCache            ; 1 => disable

        CLRV
        EXIT

MyUndefVec
        MOV     PC, R3

MyUndefCode
        STR     R1, [R0]
        TEQP    R4, #0
NoARM3
        BL      open_messagefile
        ADRVS   R0, ErrorBlock_English_ARM3NotPresent ; the english text
        EXIT    VS
        ADR     R0, ErrorBlock_ARM3NotPresent
        MOV     R1, #0
        BL      CopyError
        STMDB   sp!, {r0}
        ADR     r0, MessageFile_Block
        SWI     XMessageTrans_CloseFile
        LDMIA   sp!, {r0}
        SETV
        EXIT

        MakeInternatErrorBlock ARM3NotPresent,,M00

ErrorBlock_English_ARM3NotPresent
        DCD     ErrorNumber_ARM3NotPresent
        DCB     ErrorString_ARM3NotPresent
        DCB     0
        ALIGN

; *****************************************************************************
;
;       ARM3_Die - Die entry
;

ARM3_Die ENTRY
        LDR     wp, [R12]
        BL      DisableCache
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        ADRNE   r0, MessageFile_Block
        SWINE   XMessageTrans_CloseFile
        CLRV
        EXIT

; *****************************************************************************
;
;       ARM3_Service - Main entry point for services
;
; in:   R1 = service reason code
;
; out:  R1 = 0 if we claimed it
;

ARM3_Service ENTRY R0
        CMP     R1, #Service_PreReset
        TEQNE   R1, #Service_Reset :SHL: 2, 2
        EXIT    NE

        LDR     wp, [R12]
        MOVCS   R0, #CacheOff           ; pre-reset, so turn cache off
        LDRCC   R0, CacheState          ; reset, so reensure cache state
        SetControl R0
        EXIT

; *****************************************************************************
;
;       Cache_Code - Process *Cache command
;

Cache_Code ENTRY
        LDR     wp, [R12]
        TEQ     R1, #0                  ; just *Cache
        BNE     %FT10

; just display whether cache is on or off

        LDR     R0, CacheState
        TEQ     R0, #CacheOn
        ADREQ   R0, CacheOnString
        ADRNE   R0, CacheOffString
        BL      write_r0_message
        EXIT

10
        BL      GetOnOff
        ADRVS   R0, Cache_SyntaxError
 [ International_Help <> 0
        BLVS    CopyError
 ]
        EXIT    VS

        BLEQ    DisableCache
        BLNE    EnableCache
        EXIT

; *****************************************************************************
;
;       ConCache_Code - Process *Configure Cache, *Status Cache commands
;

ConCache_Code ENTRY
        LDR     wp, [R12]
        CMP     R0, #1                  ; find out what we're doing
        BCC     %FT10                   ; 0 => Configure nowt
        BEQ     %FT20                   ; 1 => Status

; *Configure Cache on or off - check syntax then set CMOS

        BL      GetOnOff
        ADRVS   R0, ConCache_SyntaxError
 [ International_Help <> 0
        BLVS    CopyError
 ]
        EXIT    VS

        MOV     R3, PC                  ; save PSR state
        MOV     R0, #ReadCMOS
        MOV     R1, #ARM3CMOS
        SWI     XOS_Byte
        EXIT    VS
        TEQP    R3, #0                  ; restore PSR state
        ORREQ   R2, R2, #ConCacheBit    ; EQ => off, so set bit
        BICNE   R2, R2, #ConCacheBit    ; NE => on, so clear bit
        MOV     R0, #WriteCMOS
        SWI     XOS_Byte
        EXIT

; *Configure nowt - print syntax message

10
        ADR     R0, ConCacheOnOffString
 [ International_Help = 0
        SWI     XOS_Write0
 |
        BL      write_r0_message
 ]
        EXIT

; *Status - print current CMOS state

20
        MOV     R0, #ReadCMOS
        MOV     R1, #ARM3CMOS
        SWI     XOS_Byte
        EXIT    VS
        TST     R2, #ConCacheBit
        ADREQ   R0, ConCacheOnString
        ADRNE   R0, ConCacheOffString
        BL      write_r0_message
        EXIT

; *****************************************************************************
;
;       GetOnOff - Check for on or off on the command line
;
; in:   R0 -> command line (spaces skipped)
;
; out:  VS => not on or off
;       VC, EQ => off found
;       VC, NE => on found
;       R0,R1 corrupted
;

GetOnOff ROUT
        BIC     R14, R14, #V_bit        ; prepare to exit VC
        LDRB    R1, [R0], #1
        TEQ     R1, #"O"
        TEQNE   R1, #"o"
        ORRNES  PC, R14, #V_bit

        LDRB    R1, [R0], #1
        TEQ     R1, #"N"
        TEQNE   R1, #"n"
        BNE     %FT10                   ; try off

        LDRB    R1, [R0], #1
        CMP     R1, #" "
        ORRHIS  PC, R14, #V_bit
        BICS    PC, R14, #Z_bit         ; found ON

10
        TEQ     R1, #"F"
        TEQNE   R1, #"f"
        ORRNES  PC, R14, #V_bit

        LDRB    R1, [R0], #1
        TEQ     R1, #"F"
        TEQNE   R1, #"f"
        ORRNES  PC, R14, #V_bit

        LDRB    R1, [R0], #1
        CMP     R1, #" "
        ORRHIS  PC, R14, #V_bit
        ORRS    PC, R14, #Z_bit         ; found OFF

; *****************************************************************************
;
;       ARM3_SWIHandler - SWI handler
;

ARM3_SWIHandler ENTRY
        LDR     wp, [R12]
        CMP     R11, #(SWIJumpTableEnd - SWIJumpTable) :SHR: 2
        ADDCC   PC, PC, R11, LSL #2
        B       UnknownCacheSWIError

SWIJumpTable
        B       SWIControl
        B       SWICacheable
        B       SWIUpdateable
        B       SWIDisruptive
        B       SWIFlush
SWIJumpTableEnd

UnknownCacheSWIError
        ADR     R0, ErrorBlock_UnknownCacheSWI
        ADR     R1, ARM3_Title
        BL      CopyError
        Pull    R14
        ORRS    PC, R14, #V_bit

        MakeInternatErrorBlock UnknownCacheSWI,,BadSWI

; *****************************************************************************
;
;       SWIControl - Turn cache on/off
;
; in:   R0 = EOR mask
;       R1 = AND mask
;
;       new value = (old value AND R1) EOR R0
;
; out:  R0 = old value (0 => off, 1 => on)
;

SWIControl
        TEQP    PC, #SVC_mode + I_bit   ; protect against IRQs issuing call
        ReadControl R11
        AND     R10, R11, R1            ; AND with user R1
        EOR     R10, R10, R0            ; EOR with user R0
        AND     R10, R10, #1            ; only affect bit 0
        ORR     R10, R10, #2            ; force combined USR/SVC spaces
        STR     R10, CacheState
        SetControl R10
        AND     R0, R11, #1             ; only return bit 0
        EXITS

; *****************************************************************************
;
;       SWICacheable - Set cacheable areas
;
; in:   R0 = EOR mask
;       R1 = AND mask
;
;       new value = (old value AND R1) EOR R0
;
; out:  R0=old value (bit n set => 2MB chunk starting at n*2MB was cacheable)
;

SWICacheable
        TEQP    PC, #SVC_mode + I_bit   ; protect against IRQs issuing call
        ReadCacheable R11
        AND     R10, R11, R1            ; AND value with R1
        EOR     R10, R10, R0            ; EOR value with R0
        SetCacheable R10
        MOV     R0, R11
        EXITS

; *****************************************************************************
;
;       SWIUpdateable - Set updateable areas
;
; in:   R0 = EOR mask
;       R1 = AND mask
;
;       new value = (old value AND R1) EOR R0
;
; out:  R0=old value (bit n set => 2MB chunk starting at n*2MB was updateable)
;

SWIUpdateable
        TEQP    PC, #SVC_mode + I_bit   ; protect against IRQs issuing call
        ReadUpdateable R11
        AND     R10, R11, R1            ; AND value with R1
        EOR     R10, R10, R0            ; EOR value with R0
        SetUpdateable R10
        MOV     R0, R11
        EXITS

; *****************************************************************************
;
;       SWIDisruptive - Set disruptive areas
;
; in:   R0 = EOR mask
;       R1 = AND mask
;
;       new value = (old value AND R1) EOR R0
;
; out:  R0=old value (bit n set => 2MB chunk starting at n*2MB was disruptive)
;

SWIDisruptive
        TEQP    PC, #SVC_mode + I_bit   ; protect against IRQs issuing call
        ReadDisruptive R11
        AND     R10, R11, R1            ; AND value with R1
        EOR     R10, R10, R0            ; EOR value with R0
        SetDisruptive R10
        MOV     R0, R11
        EXITS

; *****************************************************************************
;
;       SWIFlush - Flush cache
;
; in:   -
;
; out:  -
;

SWIFlush
        FlushCache
        EXITS

; *****************************************************************************
;
;       EnableCache - Turn cache on
;
; out:  PSR preserved
;

EnableCache ROUT
        MOV     R0, #CacheOn
SetControlAndCopy
        TEQP    PC, #SVC_mode + I_bit           ; protect against IRQs
        STR     R0, CacheState
        SetControl R0
        MOVS    PC, R14

; *****************************************************************************
;
;       DisableCache - Turn cache off
;
; out:  PSR preserved
;

DisableCache ROUT
        MOV     R0, #CacheOff
        B       SetControlAndCopy

; *****************************************************************************
;
;       InitCache - Set Cacheable, Updateable, Disruptive to default
;
; out:  EQ => registers read back correctly
;       NE => registers read back incorrectly
;       R0-R5 corrupted
;

InitCache ENTRY
        LDR     R0, =Cacheable_Default
        LDR     R1, =Updateable_Default
        LDR     R2, =Disruptive_Default
        SetCacheable R0
        SetUpdateable R1
        SetDisruptive R2
        ReadCacheable R3
        ReadUpdateable R4
        ReadDisruptive R5
        TEQ     R0, R3
        TEQEQ   R1, R4
        TEQEQ   R2, R5
        EXIT

CopyError ENTRY r1-r7
        BL      open_messagefile
        EXIT    VS
        ADR     R1, MessageFile_Block
        MOV     R2, #0
        LDR     R4, [sp]        ; R1 (parameter) -> R4
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

write_r0_message ENTRY r0-r7
        BL      open_messagefile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r1, r0
        ADR     r0, MessageFile_Block
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        STRVS   r0, [sp]
        EXIT    VS
10      LDRB    r0, [r2], #1
        CMP     r0, #32
        SWICS   XOS_WriteC
        STRVS   r0, [sp]
        EXIT    VS
        BCS     %B10
        SWI     XOS_NewLine
        EXIT

message_filename
        DCB     "Resources:$.Resources.ARM3.Messages", 0
        ALIGN

open_messagefile ENTRY r0-r2
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    NE
        ADR     R0, MessageFile_Block
        ADR     R1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r0, #1
        STR     r0, MessageFile_Open
        EXIT

        END
