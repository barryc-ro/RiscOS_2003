/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "led.h"
#include "error.h"
#include "msgfile.h"


ERROR_STRUCT( BADSWI, "BadSWI" );


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	led_finalise( pw );

	msgfile_close();

	if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

	return NULL;

	NOT_USED( fatal );
	NOT_USED( podule );
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
	_kernel_oserror *err = led_initialise( pw );

	/* Try to use TinyStubs if possible.
	 */
	if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

	return err;

	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *
module_swi( int swi_no, _kernel_swi_regs *r, void *pw )
{
	switch ( swi_no )
	{
		case 0: return led_control( r, pw );
		case 1: return led_flashrate( r, pw );
		default:
			return _swix( MessageTrans_ErrorLookup, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4),
					ERROR(BADSWI), 0, 0, 0, MODULE_NAME );
	}
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	char *param = arg_string;

	/* Find end of parameters and terminate properly. */
	while ( (*param >= ' ') && (*param != '?') ) param++;
	*param = '\0';

	/* We currently only have one command so don't bother checking 'cmd_no'. */

	/* Pick out parameters following "LEDSet:". */
	if ((param = strchr(arg_string, ':')) != NULL)
	{
		/* Let LED code deal with it from here. */
		led_set( param+1, pw );
	}

	return NULL;

	NOT_USED( argc );
	NOT_USED( cmd_no );
}
