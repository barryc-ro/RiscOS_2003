; > coresrc.s.fpadefs
;
; Assembler source for FPA support code and emulator
; ==================================================
; Definitions for FPA instructions and registers
;
; Copyright (C) Advanced RISC Machines Limited, 1992-3. All rights reserved.

;===========================================================================

; FPSR fields
; -----------

IOC_pos         EQU     0
IOC_bit         EQU     1:SHL:IOC_pos
DZC_pos         EQU     1
DZC_bit         EQU     1:SHL:DZC_pos
OFC_pos         EQU     2
OFC_bit         EQU     1:SHL:OFC_pos
UFC_pos         EQU     3
UFC_bit         EQU     1:SHL:UFC_pos
IXC_pos         EQU     4
IXC_bit         EQU     1:SHL:IXC_pos
ND_pos          EQU     8
ND_bit          EQU     1:SHL:ND_pos
NE_pos          EQU     9
NE_bit          EQU     1:SHL:NE_pos
SO_pos          EQU     10
SO_bit          EQU     1:SHL:SO_pos
EP_pos          EQU     11
EP_bit          EQU     1:SHL:EP_pos
AC_pos          EQU     12
AC_bit          EQU     1:SHL:AC_pos
IOE_pos         EQU     16
IOE_bit         EQU     1:SHL:IOE_pos
DZE_pos         EQU     17
DZE_bit         EQU     1:SHL:DZE_pos
OFE_pos         EQU     18
OFE_bit         EQU     1:SHL:OFE_pos
UFE_pos         EQU     19
UFE_bit         EQU     1:SHL:UFE_pos
IXE_pos         EQU     20
IXE_bit         EQU     1:SHL:IXE_pos
SysID_pos       EQU     24
SysID_mask      EQU     &FF:SHL:SysID_pos

SysID_oldFPE    EQU     &00
SysID_FPE       EQU     &01
SysID_FPPC      EQU     &80
SysID_FPA       EQU     &81

;===========================================================================

; FPCR fields - many also valid for CPDO and CPRT instructions
; ------------------------------------------------------------

S2_pos          EQU     0
S2_mask         EQU     &F:SHL:S2_pos
S2_Ibit         EQU     &8:SHL:S2_pos
Op3_pos         EQU     4
Op3_mask        EQU     &1:SHL:Op3_pos
RM_pos          EQU     5
RM_mask         EQU     &3:SHL:RM_pos
Pr2_pos         EQU     7
Pr2_mask        EQU     &1:SHL:Pr2_pos
DA_pos          EQU     8
DA_bit          EQU     1:SHL:DA_pos
RE_pos          EQU     9
RE_bit          EQU     1:SHL:RE_pos
AB_pos          EQU     10
AB_bit          EQU     1:SHL:AB_pos
SB_pos          EQU     11
SB_bit          EQU     1:SHL:SB_pos
Ds_pos          EQU     12
Ds_mask         EQU     &7:SHL:Ds_pos
Op2_pos         EQU     15
Op2_mask        EQU     &1:SHL:Op2_pos
S1_pos          EQU     16
S1_mask         EQU     &7:SHL:S1_pos
Pr1_pos         EQU     19
Pr1_mask        EQU     &1:SHL:Pr1_pos
Op1_pos         EQU     20
Op1_mask        EQU     &F:SHL:Op1_pos
EO_pos          EQU     26
EO_bit          EQU     1:SHL:EO_pos
MO_pos          EQU     27
MO_bit          EQU     1:SHL:MO_pos
IE_pos          EQU     28
IE_bit          EQU     1:SHL:IE_pos
RU_pos          EQU     31
RU_bit          EQU     1:SHL:RU_pos

Pr_mask         EQU     Pr1_mask+Pr2_mask
Op_mask         EQU     Op1_mask+Op2_mask+Op3_mask

; Rounding mode values

RM_Nearest      EQU     0:SHL:RM_pos
RM_PlusInf      EQU     1:SHL:RM_pos
RM_MinusInf     EQU     2:SHL:RM_pos
RM_Zero         EQU     3:SHL:RM_pos

;===========================================================================

; Instruction fields - all coprocessor instructions
; -------------------------------------------------
;
; The following bit distinguishes CPRTs from CPDOs.

RTnotDO_pos     EQU     4
RTnotDO_bit     EQU     1:SHL:RTnotDO_pos

; The two recognised coprocessor numbers and the position and mask of the
; field in the instruction.

Coproc_pos      EQU     8
Coproc_mask     EQU     &F:SHL:Coproc_pos
Coproc_1        EQU     1:SHL:Coproc_pos
Coproc_2        EQU     2:SHL:Coproc_pos

; The following bit distinguishes CPDTs from CPRT/CPDOs.

RTDOnotDT_pos   EQU     25
RTDOnotDT_bit   EQU     1:SHL:RTDOnotDT_pos

; For instructions that take the undefined instruction exception vector, the
; following bit distinguishes coprocessor instructions from genuinely
; undefined instructions.

NotUndef_pos    EQU     27
NotUndef_bit    EQU     1:SHL:NotUndef_pos

Cond_pos        EQU     28
Cond_mask       EQU     &F:SHL:Cond_pos
Cond_EQ         EQU     &0:SHL:Cond_pos
Cond_NE         EQU     &1:SHL:Cond_pos
Cond_CS         EQU     &2:SHL:Cond_pos
Cond_CC         EQU     &3:SHL:Cond_pos
Cond_MI         EQU     &4:SHL:Cond_pos
Cond_PL         EQU     &5:SHL:Cond_pos
Cond_VS         EQU     &6:SHL:Cond_pos
Cond_VC         EQU     &7:SHL:Cond_pos
Cond_HI         EQU     &8:SHL:Cond_pos
Cond_LS         EQU     &9:SHL:Cond_pos
Cond_GE         EQU     &A:SHL:Cond_pos
Cond_LT         EQU     &B:SHL:Cond_pos
Cond_GT         EQU     &C:SHL:Cond_pos
Cond_LE         EQU     &D:SHL:Cond_pos
Cond_AL         EQU     &E:SHL:Cond_pos
Cond_NV         EQU     &F:SHL:Cond_pos

; CPDT-specific instruction fields
; --------------------------------

DT_offset_pos   EQU     0
DT_offset_mask  EQU     &FF:SHL:DT_offset_pos
DT_src_pos      EQU     12
DT_src_mask     EQU     &7:SHL:DT_src_pos
DT_dst_pos      EQU     12
DT_dst_mask     EQU     &7:SHL:DT_dst_pos
DT_pr2_pos      EQU     15
DT_pr2_mask     EQU     &1:SHL:DT_pr2_pos
DT_ARMreg_pos   EQU     16
DT_ARMreg_mask  EQU     &F:SHL:DT_ARMreg_pos
DT_LnotS_pos    EQU     20
DT_LnotS_bit    EQU     1:SHL:DT_LnotS_pos
DT_wb_pos       EQU     21
DT_wb_bit       EQU     1:SHL:DT_wb_pos
DT_pr1_pos      EQU     22
DT_pr1_mask     EQU     &1:SHL:DT_pr1_pos
DT_UnotD_pos    EQU     23
DT_UnotD_bit    EQU     1:SHL:DT_UnotD_pos
DT_PreIndex_pos EQU     24
DT_PreIndex_bit EQU     1:SHL:DT_PreIndex_pos

; CPRT-specific instruction fields
; --------------------------------
;
; The following FPCR fields also apply to CPRTs: S2_pos, S2_mask, S2_Ibit,
; Op3_pos, Op3_mask, RM_pos, RM_mask, Pr2_pos, Pr2_mask, S1_pos, S1_mask,
; Pr1_pos, Pr1_mask, Op1_pos, Op1_mask. (Note Op2_pos and Op2_mask are not
; included in this list.)

RT_ARMreg_pos   EQU     12
RT_ARMreg_mask  EQU     &F:SHL:RT_ARMreg_pos
RT_SnotL_pos    EQU     20
RT_SnotL_bit    EQU     1:SHL:RT_SnotL_pos

; The following is the full opcode mask for a CPRT, in which the Pr2_mask
; field is part of an ARM register number rather than of the opcode. It
; includes the Pr3_mask field, whose only purpose is to tell us that this
; *is* a CPRT rather than a CPDO

OpRT_mask       EQU     Op1_mask+Op3_mask

; The following bit distinguishes CMF(E)s from CNF(E)s.

CompNeg_pos     EQU     21
CompNeg_bit     EQU     1:SHL:CompNeg_pos

; The following bit distinguishes exception-causing comparisons from
; non-exception causing comparisons.

CompExc_pos     EQU     22
CompExc_bit     EQU     1:SHL:CompExc_pos

; CPDO-specific instruction fields
; --------------------------------
;
; The following FPCR fields also apply to CPDOs: S2_pos, S2_mask, S2_Ibit,
; Op3_pos, Op3_mask, RM_pos, RM_mask, Pr2_pos, Pr2_mask, Ds_pos, Ds_mask,
; Op2_pos, Op2_mask, S1_pos, S1_mask, Pr1_pos, Pr1_mask, Op1_pos, Op1_mask.

; The bit to indicate that the operation is monadic and not dyadic.

DO_monad_pos    EQU     15
DO_monad_bit    EQU     1:SHL:DO_monad_pos

; The bit to indicate that this is a subtraction (SUF or RSF) rather than an
; addition (ADF).

SubNotAdd_pos   EQU     21
SubNotAdd_bit   EQU     1:SHL:SubNotAdd_pos

; The bit to indicate that this is a reverse subtraction (RSF) rather than
; an addition or ordinary subtraction (ADF or SUF).

RSF_pos         EQU     20
RSF_bit         EQU     1:SHL:RSF_pos

; The bit to indicate that this is a reverse division (RDF or FRD) rather
; than a normal division (DVF or FDV).

RevDiv_pos      EQU     20
RevDiv_bit      EQU     1:SHL:RevDiv_pos

; The bit to indicate that this is a "fast" multiplication or division (FML,
; FDV or FRD), rather than the normal version (MUF, DVF or RDF).

Fast_pos        EQU     23
Fast_bit        EQU     1:SHL:Fast_pos

; The bit to indicate that a move-type instruction (MVF, MNF or ABS) is an
; MNF.

MNF_pos         EQU     20
MNF_bit         EQU     1:SHL:MNF_pos

; The bit to indicate that a move-type instruction (MVF, MNF or ABS) is an
; ABS.

ABS_pos         EQU     21
ABS_bit         EQU     1:SHL:ABS_pos

; The bit to indicate that this is a COS instruction rather than a SIN.

COSnotSIN_pos   EQU     20
COSnotSIN_bit   EQU     1:SHL:COSnotSIN_pos

; The bit to indicate that this is a ACS instruction rather than an ASN.

ACSnotASN_pos   EQU     22
ACSnotASN_bit   EQU     1:SHL:ACSnotASN_pos

; The bit to indicate that this is a LOG instruction rather than an LGN.

LOGnotLGN_pos   EQU     20
LOGnotLGN_bit   EQU     1:SHL:LOGnotLGN_pos

; The bit to indicate that this is a RPW instruction rather than a POW.

RPWnotPOW_pos   EQU     20
RPWnotPOW_bit   EQU     1:SHL:RPWnotPOW_pos

;===========================================================================

; The following table summarises the standard internal format for numbers:
;   Uncommon   Units   Exponent   Fraction   What it is
;     bit       bit
;      0         0      0x0000       0        A zero
;      0         0      0x0000    non-zero    Should not happen
;      0         0      0x4016       x        Result of URD
;      0         0      0x4033       x        Result of URD
;      0         0      0x403E       x        Result of URD
;      0         0      other        x        Should not happen
;      0         1      0x7FFF       x        Should not happen
;      0         1      other        x        Normalised number
;      1         0      0x0000       0        Should not happen
;      1         0      0x0000    non-zero    Extended denorm. number
;      1         0      0x7FFF       0        Extended infinity
;      1         0      0x7FFF    non-zero    Extended NaN
;      1         0      other        0        Extended unnormalised zero
;      1         0      other     non-zero    Extended unnorm. number
;      1         1      0x3C00       0        Should not happen
;      1         1      0x3C00    non-zero    Double denormalised number
;      1         1      0x3F80       0        Should not happen
;      1         1      0x3F80    non-zero    Single denormalised number
;      1         1      0x407F       0        Single infinity
;      1         1      0x407F    non-zero    Single NaN
;      1         1      0x43FF       0        Double infinity
;      1         1      0x43FF    non-zero    Double NaN
;      1         1      0x7FFF       0        Anomalous ext. infinity
;      1         1      0x7FFF    non-zero    Extended NaN
;      1         1      other        x        Should not happen

;===========================================================================

; Fields in top words of numbers
; ------------------------------

; Single precision fields:

SFrc_pos        EQU     0
SFrc_len        EQU     23
SFrc_mask       EQU     ((1:SHL:SFrc_len) - 1):SHL:SFrc_len
SExp_pos        EQU     23
SExp_len        EQU     8
SExp_mask       EQU     ((1:SHL:SExp_len) - 1):SHL:SExp_pos

; Double precision fields:

DFhi_pos        EQU     0
DFhi_len        EQU     20
DFhi_mask       EQU     ((1:SHL:DFhi_len) - 1):SHL:DFhi_len
DExp_pos        EQU     20
DExp_len        EQU     11
DExp_mask       EQU     ((1:SHL:DExp_len) - 1):SHL:DExp_pos

; Extended and internal precision fields:

EIExp_pos       EQU     0
EIExp_len       EQU     15
EIExp_mask      EQU     ((1:SHL:EIExp_len) - 1):SHL:EIExp_pos
IRsv_pos        EQU     15
IRsv_mask       EQU     &7FFF:SHL:IRsv_pos
ERsv_pos        EQU     15
ERsv_mask       EQU     &FFFF:SHL:ERsv_pos
Uncommon_pos    EQU     30
Uncommon_bit    EQU     1:SHL:Uncommon_pos

EIExp_mask_pt1  EQU     EIExp_mask:AND:&FF
EIExp_mask_pt2  EQU     EIExp_mask:AND:&FF00
                ASSERT  EIExp_mask_pt1:OR:EIExp_mask_pt2 = EIExp_mask
                ASSERT  EIExp_mask_pt1:AND:EIExp_mask_pt2 = 0

IRsv_mask_pt1   EQU     IRsv_mask:AND:&3FC000
IRsv_mask_pt2   EQU     IRsv_mask:AND:&3FC00000
                ASSERT  IRsv_mask_pt1:OR:IRsv_mask_pt2 = IRsv_mask
                ASSERT  IRsv_mask_pt1:AND:IRsv_mask_pt2 = 0

; The following immediate mask will reduce a sign/uncommon/exponent word to
; just the exponent.

ToExp_mask      EQU     &FFFFFFFF - Sign_bit - Uncommon_bit
                ASSERT  EIExp_pos = 0   ;This mask won't do its job otherwise

; Shared fields:

Sign_pos        EQU     31
Sign_bit        EQU     1:SHL:Sign_pos

; The minimum and maximum allowed exponents for single, double and extended
; precision numbers held in internal format.

SMin_Exp        EQU     &3F81
SMax_Exp        EQU     &407E
DMin_Exp        EQU     &3C01
DMax_Exp        EQU     &43FE
EMin_Exp        EQU     &0000
EMax_Exp        EQU     &7FFE

; The normal exponent bias in a single, a double and an extended or internal
; precision number. In the first two cases, the bias for a denormalised
; number is one smaller.

SExp_bias       EQU     &7F
DExp_bias       EQU     &3FF
EIExp_bias      EQU     &3FFF

; The special exponents for NaNs and infinities of various precisions.

NaNInfExp_Single        EQU     &407F
NaNInfExp_Double        EQU     &43FF
NaNInfExp_Extended      EQU     &7FFF

; The special exponents for denormalised numbers of various precisions.

DenormExp_Single        EQU     &3F80
DenormExp_Double        EQU     &3C00
DenormExp_Extended      EQU     &0000

; The bias adjustments for entry to overflow and underflow trap handlers.

TrapBiasAdjust_Single   EQU     &C0
TrapBiasAdjust_Double   EQU     &600
TrapBiasAdjust_Extended EQU     &6000

;===========================================================================

; Fields in other words of numbers
; --------------------------------

EIUnits_pos     EQU     31
EIUnits_bit     EQU     1:SHL:EIUnits_pos
EIFracTop_pos   EQU     30
EIFracTop_bit   EQU     1:SHL:EIFracTop_pos

;===========================================================================

; Comparison results
; ------------------

Comp_GT         EQU     &20000000
Comp_EQ         EQU     &60000000
Comp_LT         EQU     &80000000
Comp_Un_Orig    EQU     &10000000
Comp_Un_Alt     EQU     &30000000

;===========================================================================

; Invalid operation reason codes
; ------------------------------
;   InvReas_InitNaN is not an invalid operation reason code; however, like
; all the others, it is used to construct NaNs. It is therefore placed in
; the same set of numbers.
;   InvReas_MsvOverflow and InvReas_MsvUnderflow are similar: NaNs
; constructed from them are used on entry to overflow and underflow trap
; handlers respectively to indicate that the result is so massively out of
; range that the IEEE-specified exponent bias adjustment (&C0 for single,
; &600 for double and &6000 for extended) is not enough to bring it in
; range.

InvReas_SigNaN          EQU     0       ;An operand is a signalling NaN
InvReas_InitNaN         EQU     1       ;(Used to generate initial NaNs)
InvReas_MsvOverflow     EQU     2       ;(Used for massive overflow)
InvReas_MsvUnderflow    EQU     3       ;(Used for massive underflow)
InvReas_MagSubInf       EQU     4       ;Magnitude subtraction of infinities
InvReas_InfTimes0       EQU     5       ;Infinity times zero
InvReas_0TimesInf       EQU     6       ;Zero times infinity
InvReas_0Div0           EQU     7       ;Zero divided by zero
InvReas_InfDivInf       EQU     8       ;Infinity divided by infinity
InvReas_InfRemX         EQU     9       ;RMF with 1st operand infinite
InvReas_XRem0           EQU     10      ;RMF of non-infinite number by zero
InvReas_SqrtNeg         EQU     11      ;Square root of a negative number
InvReas_FixQNaN         EQU     12      ;FIX applied to a quiet NaN
InvReas_FixInf          EQU     13      ;FIX applied to an infinity
InvReas_FixRange        EQU     14      ;FIX on an out-of-range number
InvReas_CompQNaN        EQU     15      ;CMFE/CNFE on a quiet NaN
InvReas_SinCosRange     EQU     16      ;SIN/COS on too big an argument
InvReas_SinCosInf       EQU     17      ;SIN/COS on an infinity
InvReas_TanRange        EQU     18      ;TAN on too big an argument
InvReas_TanInf          EQU     19      ;TAN on an infinity
InvReas_AsnAcsRange     EQU     20      ;ASN/ACS on too big an argument
InvReas_AsnAcsInf       EQU     21      ;ASN/ACS on an infinity
InvReas_PolZeroZero     EQU     22      ;POL on two zeros
InvReas_PolInfInf       EQU     23      ;POL on two infinities
InvReas_LgnLogNeg       EQU     24      ;LGN/LOG of a negative argument
InvReas_NegPowX         EQU     25      ;POW/RPW to do (negative)^X
InvReas_0PowNonpos      EQU     26      ;POW/RPW to do (zero)^(non-positive)
InvReas_BadInfPow       EQU     27      ;POW/RPW to do 1^(+/-infinity) or
                                        ; (+infinity)^0

;===========================================================================

        END
