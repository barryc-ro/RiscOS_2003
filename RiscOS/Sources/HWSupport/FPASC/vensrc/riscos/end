; >riscos.end
;
; Copyright (c) 1993 Acorn Computers Ltd., Cambridge, England.
;
; Assembler source for FPA support code and emulator
; ==================================================
; RISCOS veneer code assembled after the core routines
;

;
; **********************************************************************
;
; declare help string from module header here as $CoreVersion has been
; declared and initialised by now.
;
FPEHelp
        DCB     "FPEmulator", TAB, "$Module_MajorVersion ($Module_Date) ($CoreVersion)",NULL
        ALIGN

;
; **********************************************************************
;
; veneer_newhandlers - install routine on undefined instruction vector
;
; On entry: r1 = new undefined instruction handler
; On exit:  All registers preserved
;
veneer_newhandlers      ROUT
  [   Arm600

; In the case of a 32-bit handler, we don't support the core attempting
; to change the handler dynamically. Version 1.07 won't ever do this (we hope).
;
        STMFD   sp!, {r10, lr}

        ASSERT  Rwp = r10
        AdrWS   r10

;
; Make sure the veneer is only installed on the vector once. (This case will be the common
; one hit on almost every context switch.)
;
        [ {CONFIG}=26
        ;
        ; save the address of the true handler for the veneer to use
        ;
        STR     r1, CoreVector
        ]

        LDRB    lr, OnVector
        TEQ     lr, #0
        LDMNEFD sp!, {r10, pc}

        [ {CONFIG}=32
        STMFD   sp!, {r0-r2}
        |
        STMFD   sp!, {r0-r1}
        ]

        [ {CONFIG}=32
        ;
        ; Save the address of the handler so we can use OS_ClaimProcessorVector to remove it
        ;
        STR     r1, CoreVector
        ]

;
; the new 32-bit PC machines now have a SWI for installing
; a vector - use it to install the veneer
;
    [   {CONFIG}=32
        ; Install directly
        MRS     r2, CPSR        ; calling SWI will probably chuck us into SVC26 (we were entered
                                ; in SVC32), so save the CPSR
    |
        ; Install our pre-veneer
        ADR     r1, UI_veneer
    ]

        MOV     r0, #1
        ORR     r0, r0, #1 :SHL: 8      ; claiming undef. instr. vector

        SWI     XOS_ClaimProcessorVector


    [   {CONFIG}=32
        MSR     CPSR_all, r2            ; back into original mode
    ]

;
; save old vector in module workspace
;
        STR     r1, UIVector

;
; mark veneer as installed upon system vector.
;
        MOV     lr, #1
        STRB    lr, OnVector

;
; finished
;
    [   {CONFIG}=32
        LDMFD   sp!, {r0-r2, r10, pc}
    |
        LDMFD   sp!, {r0-r1, r10, pc}
    ]

  | ; Arm600
        STMFD   sp!, {r0-r2, r10, lr}

        ASSERT  Rwp = r10
        AdrWS   r10

        LDRB    r2, OnVector

;
; convert from address to branch instruction
;
        SUB     r1, r1, #12             ; allow for pipelining & instr. address
        MOV     r1, r1, LSR #2          ; byte offset -> word offset
        ORR     r1, r1, #&ea000000      ; add opcode for branch

        MOV     r0, #Undef_vector
        LDR     lr, [r0]
        STR     r1, [r0]

;
; be careful not to install the vector twice, thereby
; losing the true value of the old vector.
;
        TEQ     r2, #0
        LDMNEFD sp!, {r0-r2, r10, pc}^

        STRB    r0, OnVector            ; r0 != at this point

;
; save old vector in module workspace
;
        STR     lr, UIVector

;
; finished
;
        LDMFD   sp!, {r0-r2, r10, pc}^
  ] ; Arm600

;
; **********************************************************************
;
; veneer_restorehandlers - replace original undefined instruction vector
;
; On entry: (nothing)
; On exit:  All registers preserved
;
veneer_restorehandlers  ROUT
  [  Arm600
        [ {CONFIG} = 32
        STMFD   sp!, {r0-r3, r10, lr}
        |
        STMFD   sp!, {r0-r2, r10, lr}
        ]

;
; load old vector from module workspace...
;
        AdrWS   r10
        LDR     r1, UIVector

;
; fetch flags word and check that we are installed on the system vector
;
        LDRB    lr, OnVector
        TEQ     lr, #0
     [ {CONFIG}=32
        LDMEQFD sp!, {r0-r3, r10, pc}
     |
        LDMEQFD sp!, {r0-r2, r10, pc}
     ]

     [ {CONFIG}=32
        MRS     r3, CPSR                ; Calling SWI will probably chuck us into SVC26
        LDR     r2, CoreVector
     |
        ADR     r2, UI_veneer
     ]
        MOV     r0, #1
        SWI     XOS_ClaimProcessorVector

;
; mark module as off the undef. instr. vector if the SWI succeeded.
;
     [ {CONFIG}=32
        MSR     CPSR_all, r3            ; Back into SVC32
     ]

;
; done - save new flags away and return
;
        MOV     r0, #0
        STRB    r0, OnVector

     [ {CONFIG}=32
        LDMFD   sp!, {r0-r3, r10, pc}
     |
        LDMFD   sp!, {r0-r2, r10, pc}
     ]

  | ; Arm600

        STMFD   sp!, {r0, r10, lr}

        AdrWS   r10
;
; fetch flags word and check that we are installed on the system vector
;
        LDRB    lr, OnVector
        TEQ     lr, #0
        LDMEQFD sp!, {r0, r10, pc}^

;
; load old vector from module workspace...
;
        LDR     r0, UIVector

;
; ... and put it back
;
        MOV     lr, #Undef_vector
        STR     r0, [lr]

;
; mark the module as being off the undef. instr. vector
;
        MOV     r0, #0
        STRB    r0, OnVector

;
; done - return
;
        LDMFD   sp!, {r0, r10, pc}^
  ]

;
; **********************************************************************
;
; veneer_coredisabled - cope with undefined instructions following a
;                       core_disabled call.  this should never happen
;                       under RISC OS, but be prepared in any case.
;
; On entry: r12 = pointer to stack frame containing user registers
; On exit:  all user registers reloaded and faulting instruction restarted
;
veneer_coredisabled     ROUT

;
; recover user registers from stack
;
   [ {CONFIG}=32
        LDR     r0, [r12, #-4]
        MSR     SPSR_all, r0
   ]
        MOV     sp, r12
        LDMFD   sp, {r0-r14}^
        NOP                              ; NOP after banked reg. access

;
; move stack pointer past user registers and restart instruction
;
        ADD     sp, sp, #15 * 4
        LDMFD   sp!, {pc}^

;
; **********************************************************************
;
; exception trap handlers: all the different flavours of exception trap
; are grouped according to exception type and then raise OS_GenerateError
; with an internationalised error message according to the type.
;

;
; Invalid operation
;
veneer_invalidop        ROUT
veneer_invalidop1_single
veneer_invalidop2_single
veneer_invalidop1_double
veneer_invalidop2_double
veneer_invalidop1_extended
veneer_invalidop2_extended
veneer_invalidop1_integer
veneer_invalidop2_integer
veneer_invalidop1_packed
veneer_invalidop2_packed
veneer_invalidop1_xpacked
veneer_invalidop2_xpacked
veneer_invalidop1_ldfp
veneer_invalidop1_ldfpx
        ADR     r0, ivo_error
        B       handle_exception

veneer_zerodivide       ROUT
veneer_zerodivide1_single
veneer_zerodivide2_single
veneer_zerodivide1_double
veneer_zerodivide2_double
veneer_zerodivide1_extended
veneer_zerodivide2_extended
        ADR     r0, dvz_error
        B       handle_exception

veneer_overflow         ROUT
veneer_overflow_single
veneer_overflow_double
veneer_overflow_extended
        ADR     r0, ofl_error
        B       handle_exception

veneer_underflow        ROUT
veneer_underflow_single
veneer_underflow_double
veneer_underflow_extended
        ADR     r0, ufl_error
        B       handle_exception

veneer_inexact          ROUT
veneer_inexact_single
veneer_inexact_double
veneer_inexact_extended
veneer_inexact_integer
veneer_inexact_packed
veneer_inexact_xpacked
        ADR     r0, inx_error
        B       handle_exception

inx_error
        DCD     ErrorBase_FloatingPoint + 4
        DCB     "Inexact", NULL
        ALIGN

ufl_error
        DCD     ErrorBase_FloatingPoint + 3
        DCB     "UFlow", NULL
        ALIGN

dvz_error
        DCD     ErrorBase_FloatingPoint + 2
        DCB     "DivZero", NULL
        ALIGN

ofl_error
        DCD     ErrorBase_FloatingPoint + 1
        DCB     "OFlow", NULL
        ALIGN

ivo_error
        DCD     ErrorBase_FloatingPoint + 0
        DCB     "InvalOp", NULL
        ALIGN

;
; **********************************************************************
;
; handle_exception - common routine for dealing with floating point
;                    exceptions.  note that this routine raises
;                    OS_GenerateError, and does not return
;
; On entry: r0 points to error block with message tag
;           r12 points to stack frame containg user-mode register dump
; On exit:  (There is no exit)
;
handle_exception        ROUT

;
; wind back the stack using frame pointer, then recover user's
; registers
;
        ADD     sp, r12, #8                     ; lose r0, r1
        LDMFD   sp!, {r2-r12}
        ADD     sp, sp, #8                      ; lose r13, r14
        LDMFD   sp!, {r1}                       ; really r14_und

; flatten Supervisor stack

    [   {CONFIG}=32
        SetMode SVC26_mode, r14
        LDR     sp, =SVCSTK
    ]

;
; (I think because we are raising the SWI in SVC mode) OS_GenerateError
; expects a certain pattern of registers at the top of the SVC stack, so
; generate this pattern
;
        STMFD   sp!, {r1, r10-r12}

;
; read the error message from the tags file, there
; is no %0 argument, so clear r1.
;
        MOV     r1, #0
        BL      copy_error_one

;
; error block is filled in, raise the error
;
        SWI     OS_GenerateError

;
; **********************************************************************
;
; veneer_corefaulty - called when core detects a hardware failure; will
;                     address an appropriate error block and branch to
;                     the same common routine used by exception trap
;                     handlers.  this routine will never come back.
;
; On entry: r12 points to stack frame containg user-mode register dump
; On exit:  (There is no exit)
;
veneer_corefaulty       ROUT
        ADR     r0, fpc_sick
        B       handle_exception

fpc_sick
        DCD     ErrorBase_FloatingPoint + 5
        DCB     "BadFPC", NULL

;
; **********************************************************************
;
; copy_error_one - lookup message token in msgtrans file
;
; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute
;
; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one Entry "r2-r7"
        MOV     r4, r1                          ; Move input %0
        BL      open_message_file_stack         ; Open the file
        EXIT    VS                              ; Return the error

        MOV     r1, sp                          ; Messages file handl on stack
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        BL      close_message_file_stack        ; Close the file
        EXIT

;
; **********************************************************************
;

message_filename
        DCB     "Resources:$.Resources.FPEmulator.Messages", 0
        ALIGN

;
; open_message_file_stack -
;
; Carve the message file block off the stack, open the Messages file,
; and exit with the open file block on the stack unless there was an error.
; Preserves r0 (token to be looked up) unless error. Trashes R1, R2, R6, R7.

open_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR
        MOV     r6, r0                  ; Save token/error block
        SUB     sp, sp, #16             ; Carve message file handle off stack

        MOV     r0, sp                  ; File handle on stack
        ADR     r1, message_filename    ; Filename
        MOV     r2, #0                  ; Direct access/buffer in RMA
        SWI     XMessageTrans_OpenFile  ; Open the file

        ADDVS   sp, sp, #16             ; Error - put stack back
        MOVVC   r0, r6                  ; Not error - restore token block
        MOV     pc, r7                  ; Return

;
; **********************************************************************
;
; close_message_file_stack -
;
; Close the message file block on the stack, restore the stack, and return.
; Preserves R0 (error block) and V bit. Trashes R6 and R7.

close_message_file_stack ROUT
        MOV     r7, lr                  ; Save LR (and V bit)
        MOV     r6, r0                  ; Save translated error block

        MOV     r0, sp                  ; Message file block is on stack
        SWI     XMessageTrans_CloseFile ; Close the file (ignore error)

        ADD     sp, sp, #16             ; Put stack back
        MOV     r0, r6                  ; Restore translated error
        MOVS    pc, r7                  ; Return and preserve V bit

;
; **********************************************************************
;
;
; The following routines are only used on an Arm600 based system
;
    [   Arm600

     [  {CONFIG}=26
;
; **********************************************************************
;
; UI_veneer - entry point for Undefined Instruction handler, entered
;             in undef32 mode, call passed along to core handlers in
;             svc26 mode.
;
UI_veneer       ROUT

        STR     r10, [sp, #-4]!         ; STR faster than STM of one register on many ARMs
        AdrWS   r10

        STR     lr_undef, SavedLR
        MRS     lr_undef, SPSR
        STR     lr_undef, SavedPSR

        LDR     r10, [sp], #4            ; restore sp_undef before mode change

        MRS     lr_undef, CPSR
        BIC     lr_undef, lr_undef, #2_11100     ; switch from UND32 to SVC26
        MSR     CPSR_all, lr_undef

;
; build svc26 mode lr from saved components of undef32 state and pass
; the call along to the core handlers
;
        SUB     sp, sp, #4
        STMFD   sp!, {r1-r2, r10}

        AdrWS   r10
        LDR     lr, SavedLR
        LDR     r1, SavedPSR
        AND     r2, r1, #&f0000003      ; get saved NZCV and 26 bit mode bits
        ORR     lr, lr, r2              ; and merge with lr
        AND     r2, r1, #I32_bit + F32_bit      ; extract I & F from new place
        ORR     lr, lr, r2, LSL #IF32_26Shift   ; and merge with lr, in
                                                ; old place

        LDR     r1, CoreVector
        STR     r1, [sp, #3*4]
        LDMFD   sp!, {r1-r2, r10, pc}
    ]

    [   {CONFIG}=26
;
; **********************************************************************
;
; PassAlong_veneer - Pass along undefined instruction to next handler in
;                    the chain.  The next handler should be entered as
;                    if the current one did not exist, i.e. revert from
;                    svc26 to undef32 mode, taking care to preserve all
;                    registers.
;
PassAlong_veneer        ROUT

;
; Disable IRQs - this guarantees the safety of the registers
; dumped on the r13_svc stack.
;
        TEQP    pc, #SVC26_mode :OR: I_bit
        NOP

        STMDB   sp, {r1-r4, r10, lr, pc}     ; XXX no writeback
        SUB     r3, sp, #7 * 4          ; r3 -> base of register dump

;
; load address of next handler
;
        AdrWS   r10
        LDR     r2, UIVector

;
; calculate value for lr_undef
;
        BIC     r1, lr, #&fc000003

;
; switch mode (keeping IRQs disabled)
;
        MRS     r4, CPSR_all
        ORR     r4, r4, #UND32_mode     ; Go from SVC26 to UND32 mode
        MSR     CPSR_all, r4

;
; place values for lr and pc onto stack
;
        ADD     r4, r3, #5 * 4
        STMIA   r4, {r1, r2}

;
; pop registers and pass call along to next handler
;
        LDMIA   r3, {r1-r4, r10, lr, pc}
     ]
    ]

;
; **********************************************************************
;

    [   debug > 0
        InsertDebugRoutines
    ]

        END

;
; EOF riscos.end
;
