; > Init

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                        ^ 0, wp
; word variables

Flags                   # 4
Platform                # 4             ;  = platform ID for hardware (0 = 6551, 1 = 82C710)
DeviceVector            # 4             ; -> routine to call to access device
DeviceHandle            # 4             ;  = handle for DeviceFS calls

; very device specific variables

SerialDeviceFlags       # 4             ;  = serial flags
SerialRXBaud            # 1             ;  = baud rate (8bit) for RX
SerialTXBaud            # 1             ;  = baud rate (8bit) for TX
SerialXONXOFFChar       # 1             ;  = serial XON/XOFF character (8bit)
SerialCurrentError      # 1             ;  = current internal error code (8bit)
SerialThreshold         # 4             ;  = threshold value being used
 [ :LNOT: NewTXStrategy
SerialBaudDivisor       # 4             ;  = current baud divisor (for 710/711/665)
 ]
SerialTxByteCount       # 1             ;  = used by TX IRQ routine to count bytes left to send
                        # 1             ;  = unused
                        # 1             ;  = unused
                        # 1             ;  = unused

InputHandle             # 4             ;  = DeviceFS handle used for input stream
OutputHandle            # 4             ;  = DeviceFS handle used for output stream

InputBufferHandle       # 4             ;  = buffer handle used for input stream  (-1 if none)
OutputBufferHandle      # 4             ;  = buffer handle used for output stream (-1 if none)

PutCharOutputFileHandle # 4             ;  = file handle for putchar stream (0 if none)

; now some power control variables (only valid on machines with 82C710/711)

portable_present        # 4             ;  = 0 if we don't think the Portable module is present
                                        ;  = 1 if we do
power_state             # 4             ;  bit 3  set if power to serial buffer enabled
                                        ;  bit 12 set if power to 711 oscillator must be enabled
                                        ;  all other bits clear

                      [ international
                        AlignSpace
MessagesWorkspace       # 16            ;  = workspace needed for messages routines
                      ]

workspace               * :INDEX: @


; define global flags etc used by the module

f_SerialIRQ             * 1:SHL:0       ; set => IRQ owned for serial device
f_SerialFIQ             * 1:SHL:1       ; set => FIQ owned for serial device
f_WeHaveMessages        * 1:SHL:2       ; set => we have messages
f_UseFIFOs              * 1:SHL:3       ; set => we can use FIFOs
f_FIFOsEnabled          * 1:SHL:4       ; set => FIFOs are enabled

f_IRQmask               * 2_11

hw_6551                 * 0             ; hardware type
hw_IOEB                 * 1

OSByte_InsertESC	* 153           ; OS_Byte to insert into buffer, checking for escape
OSByte_RemoveChar	* 145           ; OS_Byte to remove from buffer

CMOS_SerCompat		* &0b
SerCompat_Mask		* 2_10000000

SerialPowerBits * PortableControl_SerialEnable

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

module          & 0
                & init -module                          ; => initalise routine
                & final -module                         ; => finalise routine
                & service -module                       ; => service trap

                & title -module                         ; => title string
                & help -module                          ; => help string
                & 0

title           = "SerialDeviceDriver", 0
help            = "Serial Device", 9, "$Module_HelpVersion"
              [ debug
                = " Development version"
              ]
                = 0
                ALIGN

printertype     = "Set PrinterType$2 devices#buffer3:$."
devicename      = "Serial", 0

              [ international
                ! 0, "Internationalised"
resource_file   = "Resources:$.Resources.Serial.Messages", 0
              ]
                ALIGN

deviceblock     & devicename -deviceblock
                & DeviceFlag_BufferedDevice+ DeviceFlag_DefinePathVariable
                & 0                                     ; default RX buffer flags
                & 256                                   ; default RX buffer size
                & 0                                     ; default TX buffer flags
                & 192                                   ; default TX buffer size
                & 0                                     ; reserved field (must be zero)

                & 0                                     ; end of table

                MakeErrorBlock Serial_BadHardware
                MakeErrorBlock Serial_BadControlOp
                MakeErrorBlock Serial_BadBaud
                MakeErrorBlock Serial_InUse

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine most claim the
; required workspace and then initialise the driver (via a callback).
;

init            Entry
                Debug   init, "Device being installed"

 [ CMOS_BackCompat
 		MOV	r0, #161
 		MOV	r1, #CMOS_SerCompat
 		SWI	XOS_Byte
 		EXIT	VS
 		TST	r2, #SerCompat_Mask
 		EXIT	EQ				;bitclear == not backwards compatible, so quit
 ]

                LDR     r2, [wp]
                TEQ     r2, #0                          ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace                  ; r3  = amount of workspace
                SWI     XOS_Module
                EXIT    VS                              ; return if didn't work

                Debug   init, "Workspace allocated at:", r2

                STR     r2, [wp]
10
                MOV     wp, r2                          ; wp -> workspace

 [ standalonemessages
                ADRL    r0, resourcefsfiles
                SWI     XResourceFS_RegisterFiles   ; ignore errors (starts on Service_ResourceFSStarting)
 ]

                MOV     r0, #0
                STR     r0, Flags                       ; reset flags + device handle
                STR     r0, DeviceHandle
                STR     r0, InputHandle                 ; no streams open currently
                STR     r0, OutputHandle
                STRB    r0, SerialXONXOFFChar           ; and current errors and serial codes
                STRB    r0, SerialCurrentError
                STRB    r0, SerialTxByteCount
                STR     r0, PutCharOutputFileHandle     ; don't have a stream open for putchar
 [ :LNOT: NewTXStrategy
                STR     r0, SerialBaudDivisor
 ]

                MOV     r0, #-1
                STR     r0, InputBufferHandle
                STR     r0, OutputBufferHandle

                MOV     r0, #2                          ; =2, read machine hardware type
                SWI     XOS_ReadSysInfo
                EXIT    VS                              ; return if it went wrong!!!

                BIC     r0, r0, #&FF :SHL: 24           ; Not interested in video controller
                BIC     r0, r0, #&FF :SHL: 16           ;   or memory controller.
                AND     r1, r1, #&FF                    ; Only interested in I/O chip type.

 [ OldHardware
                TEQ     r0, #&0000                      ; is it IOC with no IOEB (ie. A1)?
                MOVEQ   r0, #hw_6551
                ADDR    r1, SerialACIA, EQ
                BEQ     %15                             ; yes.
 ]
 [ NewHardware
                TEQ     r0, #&0001                      ; no, so does it have IOEB
                TEQNE   r0, #&0100                      ; or an IOMD
                TEQEQ   r1, #&01                        ; and a 82C710/711 (or similar)?
                BNE     init_BadHardware                ; No then jump, bad hardware

                MOV     r0, #3
                SWI     XOS_ReadSysInfo                 ; Read hardware particulars
                BVS     init_BadHardware                ; Jump if error

                AND     r0, r0, #(15:SHL:12)            ; Get serial h/w type
                TEQ     r0, #(1:SHL:12)                 ; Do we understand it?
                BNE     init_BadHardware                ; No then jump, bad hardware

                AND     r1, r1, #(15:SHL:12)            ; Get serial extra features
                TEQ     r1, #(1:SHL:12)                 ; If it has FIFOs then
                LDREQ   r0, Flags
                ORREQ   r0, r0, #f_UseFIFOs             ;   set flag
                STREQ   r0, Flags

                MOV     r0, #hw_IOEB                    ; h/w recognized (covers IOMD too)
                ADDR    r1, Serial710                   ; Handler address
                B       %FT15
init_BadHardware
                ADR     r0, ErrorBlock_Serial_BadHardware ; H/w not recognized
                PullEnv                               ; tidy stack
                DoError                               ; and return an error
 ]

15
                ASSERT  DeviceVector = Platform + 4
                ADR     r2, Platform
                STMIA   r2, {r0, r1}                    ; write device type + vector

                Debug   init, "Hardware platform:", r0, r1
                Debug   init, "Resetting the platform"

                MOV     r0, #-1
                STRB    r0, SerialRXBaud                ; reset copies of baud settings
                STRB    r0, SerialTXBaud

                BL      RegisterDevice
                BL      InitialiseSerial
                EXITS

; initialise serial drivers, set baud rate and data format from CMOS

InitialiseSerial Entry
                MOV     r0, #0
                STR     r0, power_state                 ; set power_state to OFF
                MOV     r1, #1                          ; and pretend portable module present
                STR     r1, portable_present            ; at least until we know better
                LDR     r1, Flags
                TST     r1, #f_UseFIFOs                 ; if we can use FIFOs then
                MOVNE   r0, #1:SHL:SF_UseFIFOs          ;    flag in device flags
                STR     r0, SerialDeviceFlags           ; but just store 0 from above if we can't

                MOV     r0, #serialctrl_Reset
                BL      CallDevice                      ; reset the serial device

                MOV     r0, #ReadCMOS
                MOV     r1, #PSITCMOS
                SWI     XOS_Byte
                MOVVC   r2, r2, LSR #2                  ; if succeeded, shift bits down
                ANDVC   r2, r2, #2_111                  ; extract relevant bits (0 => 75, ... ,7 => 19200)
                ADDVC   r2, r2, #1                      ; 1 => 75, ... ,8 => 19200
                MOVVS   r2, #0                          ; use 9600 if error

                Debug   init, "RX/TX baud rates:", r2

                MOV     r0, #serialctrl_ChangeBaud
                MOV     r1, r2                          ; RX = TX
                BL      CallDevice

                MOV     r0, #ReadCMOS
                MOV     r1, #DBTBCMOS
                SWI     XOS_Byte
                MOVVC   r2, r2, LSR #5
                ANDVC   r2, r2, #2_111                  ; r2 => serial data format
                MOVVS   r2, #4                          ; default to 8n2 if error
                ADR     r1, datatable
                LDRB    r1, [r1, r2]                    ; convert from configured value to usable value

                Debug   init, "Data format word:", r1

                MOV     r0, #serialctrl_ChangeDataFormat
                BL      CallDevice                      ; call device informing of format changes

                MOV     r0, #&CB
                MOV     r1, #0
                MOV     r2, #&FF                        ; read buffer minimum space
                SWI     XOS_Byte
                MOVVS   r1, #17                         ; if that failed then setup a value
                STR     r1, SerialThreshold             ; and store it away in workspace

                BL      SetPower_Off                    ; power not needed

                EXITS

datatable
                = (1:SHL:0)+ (1:SHL:4)+ (1:SHL:2)+ (1:SHL:3)
                = (1:SHL:0)+ (0:SHL:4)+ (1:SHL:2)+ (1:SHL:3)
                = (1:SHL:0)+ (1:SHL:4)+ (0:SHL:2)+ (1:SHL:3)
                = (1:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (1:SHL:3)
                = (0:SHL:0)+ (0:SHL:4)+ (1:SHL:2)+ (0:SHL:3)
                = (0:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (0:SHL:3)
                = (0:SHL:0)+ (1:SHL:4)+ (0:SHL:2)+ (1:SHL:3)
                = (0:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (1:SHL:3)

                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           Entry
                LDR     wp, [wp]                        ; -> workspace claimed


                LDR     r0, OutputHandle
                TEQ     r0, #0                          ; Output stream open?
                LDREQ   r0, InputHandle
                TEQEQ   r0, #0                          ; Or input stream open?

                PullEnv NE
                ADDR    r0, ErrorBlock_Serial_InUse, NE
                DoError NE                              ; yes, so return error

                LDR     r0, DeviceHandle                ; am I registered with DeviceFS?
                TEQ     r0, #0
                BEQ     %FT10                           ; no, then jump

                SWI     XDeviceFS_Deregister            ; Closes all streams, ignore errors
                MOV     r0, #0
                STR     r0, DeviceHandle                ; zero the device handle

10              MOV     r1, #Service_SerialDevice
                MOV     r2, #0                          ; from the Serial Device to Serial Support module
                SWI     XOS_ServiceCall                 ; tell them I have died

                MOV     r0, #serialctrl_Dying
                BL      CallDevice                      ; ensure device quiescent

              [ international
                BL      CloseMessages                   ; close any messages files
              ]

 [ standalonemessages
                ADRL    R0, resourcefsfiles
                SWI     XResourceFS_DeregisterFiles
 ]
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;

                ASSERT  Service_Reset < Service_ResourceFSStarting
                ASSERT  Service_ResourceFSStarting < Service_DeviceFSStarting
                ASSERT  Service_DeviceFSStarting < Service_DeviceFSDying
                ASSERT  Service_DeviceFSDying < Service_SerialDevice
                ASSERT  Service_SerialDevice < Service_DeviceFSCloseRequest
                ASSERT  Service_DeviceFSCloseRequest < Service_Portable
servicetable    DCD     0
                DCD     serviceentry -module
                DCD     Service_Reset
                DCD     Service_ResourceFSStarting
                DCD     Service_DeviceFSStarting
                DCD     Service_DeviceFSDying
                DCD     Service_SerialDevice
                DCD     Service_DeviceFSCloseRequest
                DCD     Service_Portable
                DCD     0

                DCD     servicetable -module
service         ROUT
                MOV     r0, r0
                TEQ     r1, #Service_DeviceFSStarting
                TEQNE   r1, #Service_DeviceFSDying
                TEQNE   r1, #Service_DeviceFSCloseRequest
                TEQNE   r1, #Service_SerialDevice
                TEQNE   r1, #Service_Portable
                TEQNE   r1, #Service_Reset
 [ standalonemessages
                TEQNE   r1, #Service_ResourceFSStarting
 ]
                MOVNES  pc, lr

serviceentry    LDR     wp, [wp]

                TEQ     r1, #Service_DeviceFSStarting
                BEQ     RegisterDevice                  ; attempt to register the device

                TEQ     r1, #Service_DeviceFSDying
                STREQ   r0, DeviceHandle

                TEQ     r1, #Service_DeviceFSCloseRequest
                BNE     %FT20

                Push    "r0-r1,lr"
                LDR     r1, PutCharOutputFileHandle
                TEQ     r1, r2
                Pull    "r0-r1,pc",NE,^                 ; if not our handle, then pass on service

                MOV     r0, #0                          ; our file handle is not in use any more
                STR     r0, PutCharOutputFileHandle     ; so zero it
                SWI     XOS_Find                        ; close file, ignore errors

                MOV     r1, #0                          ; indicate we've closed it
                Pull    "r0,lr,pc",,^                   ; restore r0, junk r1 and exit

20
 [ standalonemessages
                TEQ     r1, #Service_ResourceFSStarting
                BNE     %FT30
                Push    "r0-r3,lr"
                ADRL    r0, resourcefsfiles
                MOV     lr, pc
                MOV     pc, r2
                Pull    "r0-r3,pc",,^
30
 ]
                TEQ     r1, #Service_SerialDevice
                CMPEQ   r2, #-1                         ; is it from Serial Support?
                LDREQ   r0, DeviceHandle                ; yes, so setup device handle
                MOVEQ   r1, #Service_Serviced

                TEQ     r1, #Service_Portable
                BNE     %FT40
                TEQ     r2, #ServicePortable_PowerDown
                BNE     %FT35

                Push    "r0,r2,lr"
                MOV     lr, #1
                STR     lr, portable_present            ; indicate portable module present
                LDR     lr, =SerialPowerBits
                TST     r3, lr                          ; are they trying to power down serial
                Pull    "r0,r2,pc",EQ,^                 ; no then just pass on the service

                LDR     r0, InputHandle                 ; if either input stream
                LDR     r2, OutputHandle                ; or output stream are open (non-zero handle)
                ORRS    r0, r0, r2                      ; then complain
                BEQ     %FT32                           ; [both closed, so OK]
                BICS    r3, r3, lr                      ; by clearing the serial bits
                MOVEQ   r1, #0                          ; and if there are no more bits being turned off
                Pull    "r0,r2,pc",,^                   ; then claim service to save time
32
                LDR     r0, power_state                 ; update our record of which bits are on
                BIC     r0, r0, r3
                STR     r0, power_state
                Pull    "r0,r2,pc",,^

35
                TEQ     r2, #ServicePortable_PowerUp    ; bits being powered up
                MOVNES  pc, lr
                Push    "r0,r3,lr"
                MOV     lr, #1
                STR     lr, portable_present            ; indicate portable module present
                LDR     lr, =SerialPowerBits
                AND     r3, r3, lr                      ; just get serial bits which are being powered up
                LDR     r0, power_state
                ORR     r0, r0, r3                      ; and or them into our current state
                STR     r0, power_state
                Pull    "r0,r3,pc",,^

40
                TEQ     r1, #Service_Reset              ; is it a Service_Reset?
                MOVNES  pc, lr

                Push    "r0-r2, lr"                     ; yes, so check it's a soft reset

                MOV     r0, #&FD
                MOV     r1, #0
                MOV     r2, #&FF
                SWI     XOS_Byte
                TEQ     r1, #0

                Pull    "r0-r2, pc",NE,^                ; not soft reset, so ignore

                LDR     r0, Flags
                BIC     r0, r0, #f_IRQmask
                STR     r0, Flags                       ; mark vectors as not owned

                MOV     r0, #0
                STR     r0, PutCharOutputFileHandle

                BL      InitialiseSerial                ; set up baud rates etc from CMOS

                Pull    "r0-r2, pc",,^

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; RegisterDevice, this code handles the registering of a device within
; DeviceFS.  Once installed the code will then attempt to setup the device
; handle and then issue the service call that informs the world that
; DeviceFS is now present.
;

RegisterDevice  Entry   "r0-r7"
                MOV     r0, #ParentFlag_FullDuplex      ;    device is full duplex
                ADRL    r1, deviceblock                 ; -> device information block
                LDR     r2, DeviceVector                ; -> code to call for device
                MOV     r3, #0
                MOV     r4, wp                          ; -> workspace for the device
                MOV     r5, #0                          ;    special fields are allowed
                MOV     r6, #1
                MOV     r7, #1                          ; number of input and output streams
                SWI     XDeviceFS_Register
                STRVS   r0, [sp]
                EXITS   VS                              ; return if it did not work

                Debug   init, "device handle", r0

                STR     r0, DeviceHandle                ; stash the device handle

                MOV     r1, #Service_SerialDevice
                MOV     r2, #0                          ; from me to Serial Support module
                SWI     XOS_ServiceCall

                ADDR    r0, printertype
                SWI     XOS_CLI                         ; define the system variable for printing
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;       Power management routines
;

SetPower_On     Entry   "r0,r1"
                LDR     r0, =SerialPowerBits
                B       SetPower                        ; turn on power


SetPower_Off    ALTENTRY
                MOV     r0, #0                          ; turn power off

; and drop thru to...

SetPower        ROUT
                LDR     lr, portable_present            ; if no portable module present
                TEQ     lr, #0
                EXITS   EQ                              ; then do nothing

                LDR     lr, power_state                 ; if current state = new state, do nothing
                TEQ     r0, lr
                EXITS   EQ

                LDR     r1, =:NOT: SerialPowerBits
                SWI     XPortable_Control               ; new = (old AND r1) EOR r0
                STRVC   r1, power_state
                EXITS   VC

                MOV     r0, #0                          ; if we got an error
                STR     r0, portable_present            ; then set portable_present = FALSE
                LDR     r0, =SerialPowerBits
                STR     r0, power_state                 ; and set power_state = ON
                EXITS

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generalised internationalisation routines, these ensure that messages files
; are correctly opened and then return the relevant data.
;
              [ international


; Attempt to open the messages file.

OpenMessages    Entry   "r0-r3"
                LDR     r3, Flags
                TST     r3, #f_WeHaveMessages                   ; do we have an open messages block?
                EXITS   NE                                      ; yes, so don't bother again

                ADR     r0, MessagesWorkspace
                ADRL    r1, resource_file                       ; -> path to be opened
                MOV     r2, #0                                  ; allocate some wacky space in RMA
                SWI     XMessageTrans_OpenFile
                LDRVC   r3, Flags
                ORRVC   r3, r3, #f_WeHaveMessages
                STRVC   r3, Flags                               ; assuming it worked mark as having messages
                EXITS                                           ; always return VC, cos don't want to corrupt r0
                                                                ; (will hold a real error pointer)

; Attempt to close the messages file.

CloseMessages   Entry   "r0"
                LDR     r0, Flags
                TST     r0, #f_WeHaveMessages                   ; do we have any messages?
                EXITS   EQ                                      ; and return if not!

                ADR     r0, MessagesWorkspace
                SWI     XMessageTrans_CloseFile                 ; yes, so close the file
                LDRVC   r0, Flags
                BICVC   r0, r0, #f_WeHaveMessages
                STRVC   r0, Flags                               ; mark as we don't have them
                EXITS

; Generate an error based on the error token given.  Does not assume that
; the messages file is open.  Will attempt to open it, then look it up.

MakeError       Entry   "r1-r7"
                LDR     r1, Flags
                TST     r1, #f_WeHaveMessages                   ; has the messages file been closed?
                BLEQ    OpenMessages

                LDR     r1, Flags
                TST     r1, #f_WeHaveMessages
                PullEnv EQ
                ORREQS  pc, lr, #VFlag                          ; if still not open then return with V set

                ADR     r1, MessagesWorkspace                   ; -> message control block
                MOV     r2, #0
                MOV     r3, #0
                MOV     r4, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0                                  ; no substitution + use internal buffers
                SWI     XMessageTrans_ErrorLookup

                BL      CloseMessages                           ; attempt to close the doofer

                EXIT                                            ; return, r0 -> block, V set

              ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: CallDevice
;
; in:   r0  = reason code
;   r1..r7  = parameters
;
; out:  -
;
; This routine will call the device with the parameters setup in r1..r7.
;

CallDevice      Entry   "r1-r7"
                MOV     r2, sp                                  ; -> return frame to be used
                MOV     lr, pc
                LDR     pc, DeviceVector                        ; call device with return frame setup
                EXIT                                            ; and return back to the caller!

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GBLS    conditionalgetbodge
 [ standalonemessages
                GBLS    ApplicationName
ApplicationName SETS    "Serial"
conditionalgetbodge SETS "GET s.ResFiles"
resourcefsfiles
 |
conditionalgetbodge SETS ""
 ]
                $conditionalgetbodge
 [ standalonemessages
                DCD     0
 ]
                END
