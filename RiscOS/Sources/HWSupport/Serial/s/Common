; > Common

 [ {FALSE}

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: GetStatus - OBSOLETE CALL
;
; in:   r0  = reason code
;
; out:  r1  = error code
;       r2  = 16bit status flags
;
; This call is used to return the status of the serial device currently being used,
; on exit r1 contains an error code, if the value is zero then there is no pending
; error, else the reason can be converted to an ascii string via 'get6551error',
; r2 contains a 16bit value describing the current status of the serial line driver.
;

GetStatus       ROUT
                LDRB    r1, SerialCurrentError          ;  = current error code
                LDR     r2, SerialDeviceFlags           ;  = status bits
                MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: GetError - OBSOLETE CALL
;
; in:   r0  = reason code
;       r1  = error status returned:
;                       -1 read current status and return
;                        0 no error
;                       >0 describe error
;
; out:  if r1=0 on entry, r0 preserved, V clear.
;       if r1>0 on entry, r0 -> error block, V set.
;
; This call is used to return an error in a user readable form from the device
; driver.
;

GetError        ROUT
                CMP     r1, #serialerror_GetCurrent     ; read the current error
                LDREQB  r1, SerialCurrentError

                TEQ     r1, #serialerror_None           ; is there any error pending?
                MOVEQS  pc, lr

                Push    "lr"
                ADR     lr, errortable                  ; r1 -> error table
                LDR     r0, [lr, r1, LSL #2]
                ADD     r0, r0, lr                      ; r0 -> error from error table
                Pull    "lr"
                DoError                                 ; return an error


; errors generatable by this device driver.

errortable
                &       0
                ErrorTable Serial_BadParity, errortable
                ErrorTable Serial_BadFraming, errortable
                ErrorTable Serial_RXOverrun, errortable

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ]


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: SetExtent
;
; in:   r0  = reason code
;       r1  = new extent / =-1 to read
;
; out:  r1  = old value
;
; This call when made will change the handshaking extent on output streams.  The
; code will reset my copy and then call DeviceFS, which in turn calls the Buffer
; Manager to set things up correctly.
;

SetExtent       Entry   "r0,r2-r3"
                LDR     r3, SerialThreshold
                CMP     r1, #-1                                 ; are we just reading?
                BEQ     %FT10                                   ; yes, so return

                STR     r1, SerialThreshold
                MOV     r2, r1                                  ; setup new version
                LDR     r1, InputHandle
                TEQ     r1, #0
                BEQ     %FT10                                   ; if no input stream then ignore

                SWI     XDeviceFS_Threshold
                STRVS   r0, [sp]                                ; it went wrong so
                PullEnv VS
                DoError VS                                      ; return error
10
                MOV     r1, r3                                  ; setup return threshold
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: CreateForTX
;
; in:   r0  = reason code
;       r2  = internal handle
;       r3  = flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually create, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.
;

CreateForTX     ROUT
                CMP     r5, #-1
                MOVEQ   r5, #Buff_RS423Out                      ; use original serial buffer handle
                MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: CreateForRX
;
; in:   r0  = reason code
;       r2  = internal handle
;       r3  = flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually create, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.
;

CreateForRX     ROUT
                ORR     r3, r3, #BufferFlags_SendThresholdUpCalls ; interested in thresholds for receive buffer
                CMP     r5, #-1
                MOVEQ   r5, #Buff_RS423In                       ; use original serial buffer handle
                LDR     r6, SerialThreshold                     ; modify the serial threshold value
                MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;       getchar - Perform OS_SerialOp 4 (get character)
;
; in:   r0 = device reason
;
; out:  C=0, r1=char if there was one
;       C=1, r1 preserved if there wasn't
;

getchar         Entry   "r0-r2,r9"
                LDR     r1, InputBufferHandle
                CMP     r1, #-1                         ; if no serial input stream open, r1 = -1, so C=1
                EXIT    EQ

                MOV     r9, #REMV
                SWI     XOS_CallAVector                 ; NB V=0 from CMP, so remove not examine
                STRVS   r0, [sp, #0*4]
                EXIT    VS                              ; shouldn't get an error, but still...
                STRCC   r0, [sp, #1*4]                  ; if got char then store into stack frame
                EXIT                                    ; and exit with flags on exit from RemV

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;       putchar - Perform OS_SerialOp 3 (put character)
;
; in:   r0 = device reason
;       r1 = character to send
;
; out:  C=0 => character sent
;       C=1 => no room in buffer
;

putchar         Entry   "r0-r2,r9"
                LDR     r1, OutputBufferHandle
                CMP     r1, #-1                         ; check if we have a serial output stream open
                BNE     %FT10                           ; if we have, then it's OK

                MOV     r0, #open_write
                ADR     r1, serialfilename
                SWI     XOS_Find
                STRVS   r0, [sp]
                EXIT    VS

                TEQ     r0, #0
                STRNE   r0, PutCharOutputFileHandle

                LDR     r1, OutputBufferHandle          ; now check buffer handle again
                CMP     r1, #-1                         ; if still -1 then we didn't open stream
                EXIT    EQ                              ; so exit, CS
10
                LDR     r0, [sp, #1*4]                  ; reload character to send
                MOV     r9, #INSV
                SWI     XOS_CallAVector
                STRVS   r0, [sp]
                EXIT                                    ; exit with flags as on exit from InsV


serialfilename
                =       "Serial:", 0
                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

BaudRates       ; Table of supported baud rates (in 0.5 bit units).
                & 75 * 2
                & 150 * 2
                & 300 * 2
                & 1200 * 2
                & 2400 * 2
                & 4800 * 2
                & 9600 * 2
                & 19200 * 2
                & 50 * 2
                & 110 * 2
                & 134 * 2 + 1
                & 600 * 2
                & 1800 * 2
                & 3600 * 2
                & 7200 * 2
EndOldRates
 [ NewBaudRates
                & 38400 * 2
                & 57600 * 2
                & 115200 * 2
 ]
EndNewRates


                END


