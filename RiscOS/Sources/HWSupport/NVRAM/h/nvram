/* > nvram.h */

/* NV-RAM specific header file. */

#ifndef __kernel_h
#include "kernel.h"
#endif


#define OSBYTE_READCMOS			161
#define OSBYTE_WRITECMOS		162

#define NVMEMORY_SIZE                   0
#define NVMEMORY_READBYTE               1
#define NVMEMORY_WRITEBYTE              2
#define NVMEMORY_READBLOCK              3
#define NVMEMORY_WRITEBLOCK             4

#define DEFAULT_NVRAM_SIZE              2048
#define TMPBUF_SIZE			128

#define NVRAM_FLAGS_WRITECACHE		(1<<0)
#define NVRAM_FLAGS_WRITETHROUGH	(1<<1)

/* The following locations are hardcoded into the module and it	*/
/* is assumed that they will never change.			*/
#define NVRAM_LASTRESET_BYTE		0xC3
#define NVRAM_LASTRESET_BIT		2
#define NVRAM_CHECKSUM_BYTE		0xEF

#define NVRAM_READ_TAGERR		(-1)
#define NVRAM_READ_BUFERR		(-4)

#define NVRAM_WRITE_TAGERR		(-1)
#define NVRAM_WRITE_LOCKERR		(-2)

#define LOCATION_FLAGS_PROTECTED	(1<<0)
#define LOCATION_FLAGS_LOCKED		(1<<1)

#define DEFAULT_START_BIT	0
#define DEFAULT_LENGTH		8
#define DEFAULT_VALUE		0
#define DEFAULT_FLAGS		0

#define SEPARATOR		','


typedef struct _location {
	unsigned int location, start_bit, length;
	unsigned int value;
	unsigned int flags;
} location;


_kernel_oserror *nvram_initialise( void );
void nvram_finalise( void );
_kernel_oserror *nvram_read( _kernel_swi_regs *r );
_kernel_oserror *nvram_write( _kernel_swi_regs *r );
