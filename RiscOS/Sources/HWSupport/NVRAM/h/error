/* error.h
 *
 *      General purpose error header.
 */

/* We use top bit of error number to flag whether error needs	*/
/* to be looked up before being returned to the OS.		*/
#define ERROR_LOOKUP_BIT	(1U<<30)

#define ERROR_BASE		0x00819200

/* Some specific OS errors. */
#define ERROR_BADSWI            0x00000112

/* Our errors. */
#define ERROR_NOMEM		(ERROR_BASE+0)
#define ERROR_NOTAG             (ERROR_BASE+1)
#define ERROR_LOCKED            (ERROR_BASE+2)
#define ERROR_READBUF           (ERROR_BASE+4)
#define ERROR_NOTBYTE           (ERROR_BASE+5)

/* Declare the given error in a memory efficient way. */
#define ERROR_STRUCT(name,text) \
        struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_LOOKUP_BIT|ERROR_##name,text}

/* Declare the given error as external. */
#define ERROR_EXTERN(name) \
        extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))
