/* > msgfile.c
 *
 *	General purpose message lookup code adapted for use with our
 *      Tags file. If in the future we want to lookup our own errors
 *	too then this code should be enhanced to provide multiple
 *	open message files.
 */

#include <stddef.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "msgfile.h"
#include "error.h"

#include "trace.h"


/****************************************************************************
 * Message file definitions and structures.
 */


/* Location of our Tags file. */
#define MSGFILE_NAME	"Resources:$.Resources.NVRAM.Tags"


/* Pointer to message block and message block itself (pointer starts as 0 so
 * we still get Global messages even when our file has not been opened).
 */
static int *MBPtr = 0;
static int MsgBlock[4];


/****************************************************************************
 * Static functions.
 */


/* Read up to 4 parameters using varargs, lastparm points to the last parameter
 * before the varargs and lastsize gives its size. The result is 4 character
 * pointers in p[] (some of which may be NULL).
 */
static void
GetParameters( char *lastparm, int lastsize, char *p[] )
{
	va_list args;
	int i;

	/* Can't use va_start as pointer to parameters has been passed in. */
	*args = lastparm + lastsize;
	for ( i = 0; i < 4; i++ )
		if ( (p[i] = va_arg(args, char *)) == NULL ) break;
	va_end( args );
	while ( ++i < 4 ) p[i] = NULL;
}


/****************************************************************************
 * msgfile_open
 *
 *	In:	fname = pointer to file name of message file
 *		buffer = optional buffer to open file into (can be NULL)
 *
 *	Opens the given message file. Any currently open file will be closed.
 */
_kernel_oserror *
msgfile_open( char *fname, char *buffer )
{
	_kernel_oserror *err;

	if ( MBPtr ) msgfile_close();
	err = _swix( MessageTrans_OpenFile, _INR(0,2), MsgBlock, fname, buffer );
	if ( !err ) MBPtr = MsgBlock;
	return err;
}


/****************************************************************************
 * msgfile_lookup
 *
 *	In:	token = pointer to token to look up
 *		buffer = optional buffer to look up string into (can be NULL)
 *		bufsz = size of buffer if buffer != NULL
 *		... up to 4 substitution parameters
 *
 *	Out:	returns the looked up string (or NULL if not found)
 *
 *	Looks up the given token in the currently open message file.
 */
char *
msgfile_lookup( char *token, char *buffer, int bufsz, ... )
{
	char *p[4];
	char *result;

	if ( !MBPtr ) msgfile_open( MSGFILE_NAME, NULL );

	GetParameters( (char *)&bufsz, sizeof(bufsz), p );

	return _swix( MessageTrans_Lookup, _INR(0,7)|_OUT(2), MBPtr, token, buffer, bufsz,
			p[0], p[1], p[2], p[3], &result )
		? NULL
		: result;
}


/****************************************************************************
 * msgfile_error_lookup
 *
 *	In:	err = pointer to error token block
 *
 *	Out:	returns an expanded error
 *
 *	Looks up the given error token block and returns the resulting error.
 */
_kernel_oserror *
msgfile_error_lookup( _kernel_oserror *err, ... )
{
	if ( err != NULL )
	{
		if ( err->errnum & ERROR_LOOKUP_BIT )
		{
			char *p[4];

			/* Don't explicitly open message file for errors as in our case	*/
			/* it isn't a real Messages file, it's our Tags file.		*/
			/* if ( !MBPtr ) msgfile_open( MSGFILE_NAME, NULL );		*/
		
			GetParameters( (char *)&err, sizeof(err), p );
			TRACE( "Error parameters are %s, %s, %s, %s\n" _ p[0] _ p[1] _ p[2] _ p[3] );

			return _swix( MessageTrans_ErrorLookup, _INR(0,7), err, MBPtr, 0, 0, p[0], p[1], p[2], p[3] );
		}
	}
	return err;
}


/****************************************************************************
 * msgfile_enumerate
 *
 *	In:	token = pointer to wildcarded token
 *		buffer = pointer to buffer for result
 *		bufsz = size of buffer
 *		index = pointer to index variable
 *
 *	Out:	returns buffer filled and index set to next index if successful
 *
 *	Enumerates massage file tokens.
 */
_kernel_oserror *
msgfile_enumerate( char *token, char *buffer, int bufsz, int *index )
{
	_kernel_oserror *err = NULL;

	if ( !MBPtr ) err = msgfile_open( MSGFILE_NAME, NULL );

	if ( MBPtr )
	{
		err = _swix( MessageTrans_EnumerateTokens, _INR(0,4)|_OUT(2)|_OUT(4),
				MBPtr, token, buffer, bufsz, *index, &bufsz, index );

		if ( bufsz == 0 ) *index = 0;
	}
	return err;
}


/****************************************************************************
 * msgfile_close
 *
 *	  Closes the currently open message file.
 */
void
msgfile_close( void )
{
	if ( MBPtr )
	{
		(void)_swix( MessageTrans_CloseFile, _IN(0), MBPtr );
		MBPtr = 0;
	}
}
