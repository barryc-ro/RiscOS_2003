/* > parse.c */

#include <ctype.h>

#include "nvram.h"

#include "trace.h"


static char *
SkipSpaces(char *cp)
{
	while (isspace(*cp)) cp++;
	return cp;
}

static char *
SkipPast(char *cp, char c)
{
	/* Skip past char c but stop at '\0'. */
	while ((*cp != '\0') && (*cp != c)) cp++;
	return (*cp == '\0') ? cp : cp + 1;
}

static int
GetValue(char **ppd, int default_value)
{
	int base = 10, value = default_value;
	char *pd = SkipSpaces(*ppd);

	if (*pd == '&')
	{
		base = 16;
		pd++;
	}
	if ((*pd != '\0') && (*pd != SEPARATOR))
	{
		value = 0;
		do
		{
			int digit = *pd - '0';
			if (base == 16)
			{
				/* Adjust for 'A' to 'F'. */
				if (digit > 9) digit -= 'A'-'9'-1;
				/* Adjust for 'a' to 'f'. */
				if (digit > 15) digit -= 'a'-'A';
			}
			if ((digit < 0) || (digit >= base)) break;
			value = value * base + digit;
			pd++;
		}
		while ((*pd != '\0') && (*pd != SEPARATOR));

		pd = SkipSpaces(pd);
		if ((*pd != '\0') && (*pd != SEPARATOR))
			value = default_value;
	}
	*ppd = SkipPast(pd, SEPARATOR);
	return value;
}

static int
GetFlags(char *pd, int default_flags)
{
	int flags = 0;
	pd = SkipSpaces(pd);

	/* Assume that flags is the last field ie. is terminated with '\0'. */
	while (1)
	{
		switch (*pd)
		{
		case 'L':
		case 'l':
			flags |= LOCATION_FLAGS_LOCKED;
			break;

		case 'P':
		case 'p':
			flags |= LOCATION_FLAGS_PROTECTED;
			break;

		default:
			if (isspace(*pd)) break;

			return (*pd != '\0') ? default_flags : flags;
		}
		pd++;
	}
	/* Compiler might whinge but don't worry. */
}

int
parse_description(char *pd, location *ploc)
{
	/* Get values for all fields, providing defaults for missing or	*/
	/* broken fields.						*/
	ploc->location = GetValue(&pd, -1);
	ploc->start_bit = GetValue(&pd, DEFAULT_START_BIT);
	ploc->length = GetValue(&pd, DEFAULT_LENGTH);
	ploc->value = GetValue(&pd, DEFAULT_VALUE);
	ploc->flags = GetFlags(pd, DEFAULT_FLAGS);

	TRACE( "location = &%03X, start_bit = %d, length = %d, value = %d, flags = %d\n" _ \
		ploc->location _ ploc->start_bit _ ploc->length _ ploc->value _ ploc->flags );

	return (ploc->location != -1);
}
