#ifndef DRIVERS_H
#define DRIVERS_H

#ifndef REGISTRY_H
#include "registry.h"
#endif

#ifndef IR_API_H
#include "ir_api.h"
#endif


#define DRIVER_FLAGS_LOADED 1
#define DRIVER_FLAGS_INITIALISED 2

typedef struct outstanding_packet_list_node_t
{
    struct outstanding_packet_list_node_t *next;
    unsigned int tag_number;
    unsigned int registry_number;
    unsigned int packet;
}outstanding_packet_list_node_t;


typedef struct driver_list_node_t
{
    struct driver_list_node_t *next;
    unsigned int driver_number;
    unsigned int revision_number;
    ir_client_callbacks_t *callbacks;
    void *pw;
    unsigned int location;
    outstanding_packet_list_node_t *outstanding_packets;

    char description[REG_DESCRIPTION_BUFFER_LENGTH];
    char filename[REG_PATH_BUFFER_LENGTH];
    unsigned int flags;

}driver_list_node_t;

extern driver_list_node_t *drv_driver_list;

extern unsigned int drv_load_driver(driver_list_node_t *node);
extern driver_list_node_t *drv_add_driver(driver_list_node_t *head, unsigned int registry_number);
extern driver_list_node_t *drv_remove_driver(driver_list_node_t *head, unsigned int driver_number);
extern driver_list_node_t *drv_find_driver_by_registry_number(driver_list_node_t *head, unsigned int registry_number);
extern driver_list_node_t *drv_find_driver_by_driver_number(driver_list_node_t *head, unsigned int driver_number);

extern unsigned int drv_add_outstanding_packet(driver_list_node_t *drv, unsigned int registry_number, unsigned int tag_number, unsigned int packet);
extern void drv_send_outstanding_packets(driver_list_node_t *drv, unsigned int bother_sending);
extern void drv_send_data_packet(driver_list_node_t *drv, unsigned int registry_number, unsigned int tag_number, unsigned int packet);


extern void drv_load_entry(void);
extern int drv_load_handler(_kernel_swi_regs *r, void *pw);

extern void drv_send_entry(void);
extern int drv_send_handler(_kernel_swi_regs *r, void *pw);


#endif

