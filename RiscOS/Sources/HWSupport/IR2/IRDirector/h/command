#ifndef COMMAND_H
#define COMMAND_H


typedef union
{
    unsigned char byte_array[3];

    struct
    {
        unsigned int owner :4;
        unsigned int sbdt  :4;

        unsigned int id    :1;
        unsigned int ed    :1;
        unsigned int ie    :1;
        unsigned int ee    :1;
        unsigned int tri   :4;

        unsigned int pir   :1;
        unsigned int pr    :1;
        unsigned int pn    :1;
        unsigned int ps    :1;
        unsigned int g     :1;
        unsigned int sl    :1;
        unsigned int r     :1;
        unsigned int tbd   :1;
    }bits;
}setup_and_run_t;

typedef union
{
    unsigned char byte_array[3];

    struct
    {
        unsigned int delay  :4;
        unsigned int ports  :3;
        unsigned int leds   :1;

        unsigned int number :7;
        unsigned int repeat :1;

        unsigned int filler :7;
        unsigned int tbc    :1;
    }bits;

}ir_blasting_setup_t;

typedef union
{
    unsigned char byte_array[3];

    struct
    {
        unsigned int number :7;
        unsigned int filler :16;
        unsigned int tbc :1;
    }bits;

}ir_blasting_continuation_t;

typedef union
{
    unsigned char byte_array[3];

    struct
    {
        signed int fp :8;
        signed int ap :8;
    }bits;

}ir_detector_tuning_t;

typedef union
{
    unsigned char byte_array[3];
    struct
    {
        unsigned int n0:4;
        unsigned int n1:4;
        unsigned int n2:4;
        unsigned int n3:4;
        unsigned int n4:4;
        unsigned int n5:4;
    }nibbles;
}ir_non_twirp_t;


typedef union
{
    unsigned int word;

    unsigned char byte_array[4];

    struct
    {
        unsigned int command        : 4;
        unsigned int b3_7           : 1;
        unsigned int b2_7           : 1;
        unsigned int b1_7           : 1;
        unsigned int b0_filler      : 1;
        unsigned int b1             : 7;
        unsigned int b1_filler      : 1;
        unsigned int b2             : 7;
        unsigned int b2_filler      : 1;
        unsigned int b3             : 7;
        unsigned int b3_filler      : 1;

    } generic;

}command_packet_t;

/*
    The different command numbers
*/
typedef enum
{
    CMD_OUT_DATA_DOWNLINK            = 0x00,
    CMD_OUT_SETUP_AND_RUN            = 0x01,
    CMD_OUT_HALT                     = 0x02,
    CMD_OUT_DEBUG                    = 0x03,
    CMD_OUT_IR_BLASTING_SETUP        = 0x04,
    CMD_OUT_IR_BLASTING_DATA         = 0x05,
    CMD_OUT_IR_BLASTING_CONTINUATION = 0x06,
    CMD_OUT_IR_DETECTOR_TUNING       = 0x07,
    CMD_OUT_NON_TWIRP                = 0x08
} outbound_command_number_t;

typedef enum
{
    CMD_IN_DATA                = 0x00,
    CMD_IN_TAG_STATUS_REPORT   = 0x01,
    CMD_IN_CTRL_STATUS_REPORT  = 0x02,
    CMD_IN_COMMS_STATUS_REPORT = 0x03,
    CMD_IN_COMP_STATUS_REPORT  = 0x04
} inbound_command_number_t;

/*
    the bit flags for the halt command
*/
#define HALT_FLAG_HALT            0x40
#define HALT_FLAG_CANCEL_BLASTING 0x20
#define HALT_FLAG_CANCEL_DOWNLOAD 0x10




extern void send_setup_and_run(unsigned int family);
extern void send_status_report_request(unsigned char);
extern void send_halt(unsigned int);
extern void send_ir_blasting_setup(ir_blasting_setup_t bs);
extern void send_ir_blasting_continuation(ir_blasting_continuation_t bc);
extern void send_ir_blasting_data(unsigned char data[3]);
extern void send_data_downlink(unsigned char data[3]);
extern void send_ir_detector_tuning(ir_detector_tuning_t dt);
extern void send_non_twirp_configuration(void);

#endif
