/*
* registry.c	- List of IR peripherals and manufacturers
*/

/*
* 		Copyright 1996 Acorn Network Computing
*
* This material is the confidential trade secret and proprietary
* information of Acorn Network Computing. It may not be reproduced,
* used, sold, or transferred to any third party without the prior
* written consent of Acorn Network Computing. All rights reserved.
*
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "utils.h"

#include "irp.h"
#include "registry.h"
#include "drivers.h"
#include "irtags.h"



static FILE *fp=NULL;
static registry_file_header_t h;

static void close_local_file(void)
{
    fclose(fp);
    fp = NULL;
}

static unsigned int initialise_local_file(void)
{
    fp = fopen("IRRegistry:registry","rb");

    if (fp == NULL)
    {
        DEBUGFN(3,db_printf("failed to open ir registry file\n"));
        return 0;
    }

    if (fread(&h,sizeof(registry_file_header_t),1,fp) != 1)
    {
        DEBUGFN(3,db_printf("failed to read ir registry header\n"));
        close_local_file();
        return 0;
    }

    return 1;

}




unsigned int reg_get_device_info(unsigned int registry_number,
                                 unsigned int *driver_number,
                                 char *description)
{
    unsigned int loop;
    registry_entry_t reg;
    unsigned int count;


    DEBUGFN(3,db_printf("reg_get_device_info\n"));
    if (fp == NULL)
    {
        if (initialise_local_file() == 0)
        {
            DEBUGFN(3,db_printf("reg:initialise_local_file_failed\n"));

            return 0;
        }
    }

    if (fseek(fp,h.reg_offset,SEEK_SET)!= 0)
    {
        DEBUGFN(3,db_printf("reg:seek 1 failed\n"));
        close_local_file();
        return 0;
    }


    if (fread(&count,sizeof(unsigned int),1,fp) != 1)
    {
        DEBUGFN(3,db_printf("reg:read 1 failed\n"));
        close_local_file();
        return 0;
    }


    for (loop = 0; loop < count; loop ++)
    {
        if (fread(&reg,sizeof(registry_entry_t),1,fp) != 1)
        {
            DEBUGFN(3,db_printf("reg:read 2 failed\n"));

            close_local_file();
            return 0;
        }

        if (reg.registry_number == registry_number)
        {
            if (driver_number != NULL)
            {
                *driver_number = reg.driver_number;
            }
            if (description != NULL)
            {
                if (fseek(fp,reg.desc_offset,SEEK_SET)!= 0)
                {
        DEBUGFN(3,db_printf("reg:seek 2 failed\n"));
        close_local_file();
                    return 0;
                }
                if (fread(description,reg.desc_len,1,fp) != 1)
                {
        DEBUGFN(3,db_printf("reg:read 3 failed\n"));
        close_local_file();
                    return 0;
                }
            }
        close_local_file();
            return 1;
        }
    }
        close_local_file();
    return 0;
}

unsigned int reg_get_driver_info(unsigned int driver_number,
                                 unsigned int *revision_number,
                                 char *description,
                                 unsigned int *location,
                                 char * filename)
{
    unsigned int loop;
    unsigned int count;
    driver_entry_t drv;

    DEBUGFN(3,db_printf("reg_get_driver_info\n"));

    if (fp == NULL)
    {
        if (initialise_local_file() == 0)
        {
            return 0;
        }
    }

    if (fseek(fp,h.drv_offset,SEEK_SET)!= 0)
    {
        close_local_file();
        return 0;
    }


    if (fread(&count,sizeof(unsigned int),1,fp) != 1)
    {
        close_local_file();
        return 0;
    }


    for (loop = 0; loop < count; loop ++)
    {
        if (fread(&drv,sizeof(driver_entry_t),1,fp) != 1)
        {
        close_local_file();
            return 0;
        }

        if (drv.driver_number == driver_number)
        {
            if (revision_number != NULL)
            {
                *revision_number = drv.revision_number;
            }
            if (location != NULL)
            {
                *location = REG_LOCATION_ROM;
            }
            if (description != NULL)
            {
                if (fseek(fp,drv.desc_offset,SEEK_SET)!= 0)
                {
                    close_local_file();
                    return 0;
                }
                if (fread(description,drv.desc_len,1,fp) != 1)
                {
                    close_local_file();
                    return 0;
                }
            }
            if (filename != NULL)
            {
                if (fseek(fp,drv.filename_offset,SEEK_SET)!= 0)
                {
                    close_local_file();
                    return 0;
                }
                if (fread(filename,drv.filename_len,1,fp) != 1)
                {
            close_local_file();
                    return 0;
                }
            }
            close_local_file();
            return 1;
        }
    }
    close_local_file();
    return 0;

}


reg_outstanding_packet_list_node_t *reg_outstanding_packet_list=NULL;

unsigned int reg_add_outstanding_packet(unsigned int registry_number,
                                        unsigned int tag_number,
                                        unsigned int packet)
{
    reg_outstanding_packet_list_node_t *tail=reg_outstanding_packet_list;
    reg_outstanding_packet_list_node_t *new_node;

    new_node = malloc(sizeof(reg_outstanding_packet_list_node_t));
    if (new_node == NULL)
    {
        return FALSE;
    }
    new_node->next = NULL;
    new_node->registry_number = registry_number;
    new_node->tag_number = tag_number;
    new_node->packet = packet;

    if (tail)
    {
        while (tail->next != NULL)
        {
            tail = tail->next;
        }
        tail->next = new_node;
    }
    else
    {
        reg_outstanding_packet_list = new_node;
    }
    return TRUE;

}

void reg_send_outstanding_packets(void)
{
    reg_outstanding_packet_list_node_t *node = reg_outstanding_packet_list;
    reg_outstanding_packet_list_node_t *next, *prev=NULL;
    tag_info_t *tag;


    while(node != NULL)
    {
        tag = tags_find_tag(node->tag_number);
        if ((tag == NULL) || (tag->registry_number != node->registry_number))
        {
            tag = tags_find_tag_by_registry_number(node->registry_number);
        }

        if ((tag != NULL) && (tag->driver_number != REG_UNASSIGNED_NUMBER))
        {
            driver_list_node_t *drv;
            drv = drv_find_driver_by_driver_number(drv_driver_list,
                                                   tag->driver_number);
            if (drv != NULL)
            {
                drv_send_data_packet(drv,
                                     node->registry_number,
                                     node->tag_number,
                                     node->packet);
                next = node->next;
                if (reg_outstanding_packet_list == node)
                {
                    reg_outstanding_packet_list = next;
                }
                else
                {
                    prev->next = next;
                }

                free(node);
                node = next;
                continue;
            }
        }
        prev = node;
        node = node->next;
    }

}



reg_unknown_device_list_node_t *reg_unknown_device_list=NULL;

unsigned int reg_add_unknown_device(unsigned int registry_number, unsigned int tag_number)
{
    reg_unknown_device_list_node_t *tail=reg_unknown_device_list;
    reg_unknown_device_list_node_t *new_node;
    unsigned int loop;

    new_node = reg_find_unknown_device(registry_number);
    if (new_node == NULL)
    {

        new_node = malloc(sizeof(reg_unknown_device_list_node_t));
        if (new_node == NULL)
        {
            return FALSE;
        }
        new_node->next = NULL;
        new_node->registry_number = registry_number;

        for (loop = 0; loop < 14; loop ++)
        {
            new_node->tag_numbers[loop] = FALSE;
        }

        if (tail)
        {
            while (tail->next != NULL)
            {
                tail = tail->next;
            }
            tail->next = new_node;
        }
        else
        {
            reg_unknown_device_list = new_node;
        }
    }

    new_node->tag_numbers[tag_number%14] = TRUE;

    return TRUE;
}

reg_unknown_device_list_node_t *reg_find_unknown_device(unsigned int registry_number)
{
    reg_unknown_device_list_node_t *node=reg_unknown_device_list;
    while(node != NULL)
    {
        if (node->registry_number == registry_number)
        {
            return node;
        }
        node = node->next;
    }
    return NULL;
}

void reg_remove_unknown_device(unsigned int registry_number)
{
    reg_unknown_device_list_node_t *node=reg_unknown_device_list;
    reg_unknown_device_list_node_t *prev=NULL;
    while (node != NULL)
    {

        if (node->registry_number == registry_number)
        {
            if (prev == NULL)
            {
                reg_unknown_device_list = node->next;
            }
            else
            {
                prev->next = node->next;
            }
            free(node);
            return;
        }

        prev=node;
        node=node->next;
    }
}

int reg_load_handler(_kernel_swi_regs *r, void *pw)
{
    reg_unknown_device_list_node_t *dev = reg_unknown_device_list, *next_dev;
    driver_list_node_t *drv;
    unsigned int driver_number;
    unsigned int loop;

    NOT_USED(r);
    NOT_USED(pw);

    DEBUGFN(3,db_printf("\nreg_load_handler\n\n"));

    while (dev != NULL)
    {
        next_dev = dev->next;

        DEBUGFN(3,db_printf("looking in registry for device %x...\n",
                            dev->registry_number));

        if (!reg_get_device_info(dev->registry_number, &driver_number, NULL))
        {
            /*
                We don't have a record of the device in the registry...
                associate with number 7, the default driver.

                The business of re-associating the device with the
                correct driver will have to wait until the registry stuff
                is more advanced.
            */
            DEBUGFN(3,db_printf("failed to find device %x in registry!\n"
                                "associating with default.\n",
                                dev->registry_number));
            driver_number = 7;
        }
        else
        {
            DEBUGFN(3,db_printf("registry file says device %x needs driver %x\n",
                                dev->registry_number,
                                driver_number));
        }

        drv = drv_find_driver_by_driver_number(drv_driver_list,driver_number);
        if (drv == NULL)
        {
            /*
                This driver isn't loaded.
                Add a node to the driver list and then load
                it into RAM.
            */
            drv = drv_add_driver(drv_driver_list,driver_number);
            if (drv == NULL)
            {
                DEBUGFN(1,db_printf("Failed to add driver %x\n",driver_number));
            }
            else
            {

                drv_load_driver(drv);
                if (!drv->flags & DRIVER_FLAGS_LOADED)
                {
                    DEBUGFN(1,db_printf("Failed to load driver:%x!\n",driver_number));
                }
                else
                {
                    /*
                        It loaded...
                    */
                    DEBUGFN(3,db_printf("Driver %x loaded successfully\n",driver_number));
                }
            }

        }
        /*
            Associate the tags.
        */
        for (loop = 0; loop < 14; loop ++)
        {
           if (dev->tag_numbers[loop])
           {
               tags_associate_tag(loop,
                                  dev->registry_number,
                                  driver_number);
           }
        }
        /*
           If we're using the default driver, then we want
           to hang on to the unknown device node so we can
           have a go later. Otherwise, we remove the device
           from the unknown device list.
        */
        if (drv->driver_number != 7)
        {
            reg_remove_unknown_device(dev->registry_number);
        }

        dev = next_dev;
    }


    /*
        By this point, we should have loaded all the
        drivers we can.

        Send some outstanding packets.
    */

    reg_send_outstanding_packets();


    return 1;

}





