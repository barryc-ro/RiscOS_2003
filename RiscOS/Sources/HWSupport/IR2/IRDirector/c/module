/*
* 	module.c	- RISC OS module related code.
*/

/*
* 		Copyright 1996 Acorn Network Computing
*
* This material is the confidential trade secret and proprietary
* information of Acorn Network Computing. It may not be reproduced,
* used, sold, or transferred to any third party without the prior
* written consent of Acorn Network Computing. All rights reserved.
*
*/

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "module.h"
#include "ir_api.h"
#include "ir.h"

#include "drivers.h"
#include "command.h"


/*
* Globals
*/
#ifndef DEBUG
static _kernel_oserror *TinyError;	/* For tinystubs */
#endif

extern void module_loader_entry(void);
extern int module_loader_handler(_kernel_swi_regs *r, void *pw);

extern void module_startup_entry(void);
int module_startup_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED(r);
    NOT_USED(pw);

    _swix(OS_ServiceCall,_IN(1),Service_IRDirectorStarting);
    return 1;
}

/*------------------------------------------------------------------------------
*
*	Module initialisation entry point.
*/
_kernel_oserror *module_initialise( char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err;
    NOT_USED(cmd_tail);
    NOT_USED(podule_base);

DEBUGFN(1,db_printf("IR Director:module_initialise...\n"));

    err = ir_initialise(pw);
#ifndef DEBUG
    if ( !err ) TinyError = _swix( TinySupport_Share, _IN(0), pw );
#endif

    if ( !err ) err = _swix(OS_AddCallBack,_INR(0,1),module_startup_entry,pw);

    return err;
}


/*------------------------------------------------------------------------------
*
*	Module finalisation entry point.
*/
_kernel_oserror *module_finalise( char *cmd_tail, int podule_base, void *pw )
{
    NOT_USED(cmd_tail);
    NOT_USED(podule_base);

DEBUGFN(1,db_printf("IR Director:module_finalise...\n"));
    ir_finalise(pw);

#ifndef DEBUG
    if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif

    return NULL;
}


/*------------------------------------------------------------------------------
*
*	Module CLI handler
*
*/

enum
{
    CLI_CFG_IRFAMILY,
    CLI_CFG_IRTUNING
};


_kernel_oserror *module_cli_handler(char *arg_string, int arg_count,
                                    int cmd_no, void *pw)
{
    char buffer[20], *c;
    int family;

    NOT_USED(pw);
    NOT_USED(arg_count);

    switch (cmd_no)
    {
        case CLI_CFG_IRFAMILY:
        {
            if ((int) arg_string == 0)		/* Configure with no args */
            {
                _swix(OS_Write0, _IN(0), "IRFamily   <1-15> | Any\r\n");
            }

            else if ((int) arg_string == 1)	/* Status */
            {
                _swix(OS_Write0, _IN(0), "IRFamily   ");
                family = get_irfamily();
                if (family != 0)
                {
                    _swix(OS_ConvertCardinal1, _INR(0,2)|_OUT(1), family, &buffer, 4, &c);
                    *(c++) = '\r'; *(c++) = '\n'; *c = '\0'	;	/* Add CRLF */
                    _swix(OS_Write0, _IN(0), buffer);
                }
                else
                {
                    _swix(OS_Write0, _IN(0), "Any\r\n");
                }
            }
            else					/* Configure with args */
            {
                _kernel_oserror *err = _swix(OS_ReadUnsigned, _INR(0,2)|_OUT(2),
                                             10|(1<<29), arg_string, 15, &family);
                if (err)
                {
                    int i;

                    for (i=0; i<3; i++)
                    {
                        arg_string[i] = tolower(arg_string[i]);
                    }
                    if (!strncmp(arg_string, "any", 3))
                    {
                        set_irfamily(0);
                    }
                    else
                    {
                        return (err);
                    }
                }
                else
                {
                    set_irfamily(family);
                }
            }
            break;
        }
        case CLI_CFG_IRTUNING:
        {
            int first, all;

            if ((int) arg_string == 0)		/* Configure with no args */
            {
                _swix(OS_Write0, _IN(0), "IRTuning   <-128...127> [<-128...127>]\r\n");
            }

            else if ((int) arg_string == 1)	/* Status */
            {
                first = get_first_edge_offset();
                all = get_all_edges_offset();

                _swix(OS_Write0, _IN(0), "IRTuning   ");
                _swix(OS_ConvertInteger1, _INR(0,2)|_OUT(1), all, buffer, 5, &c);
                *(c++) = ' ';
                _swix(OS_ConvertInteger1, _INR(0,2)|_OUT(1), first, c, 5, &c);
                *(c++) = '\r';
                *(c++) = '\n';
                *c = '\0'	;	/* Add CRLF */
                _swix(OS_Write0, _IN(0), buffer);
            }
            else					/* Configure with args */
            {
                _kernel_oserror *err;
                c = arg_string;
                while (*c != 13)
                {
                    c++;
                }
                *c = '\0';

                if (*arg_string == '-')
                {
                    err = _swix(OS_ReadUnsigned,
                                _INR(0,2)|_OUTR(1,2),
                                10|(1<<29), arg_string+1, 128,
                                &c, &all);

                    all = -all;

                }
                else
                {
                    err = _swix(OS_ReadUnsigned,
                                _INR(0,2)|_OUTR(1,2),
                                10|(1<<29), arg_string, 127,
                                &c, &all);
                }

                if (err)
                {
                    return err;
                }

                first = all;
                if (*c != '\0')
                {
                    while (*c == ' ')c++;

                    if (*c == '-')
                    {
                        err = _swix(OS_ReadUnsigned, _INR(0,2)|_OUT(2),
                                                 10|(1<<29), c+1, 128, &first);
                        first = -first;
                    }
                    else
                    {
                        err = _swix(OS_ReadUnsigned, _INR(0,2)|_OUT(2),
                                                 10|(1<<29), c, 127, &first);
                    }

                    if (err)
                    {
                        return err;
                    }
                }
                set_edge_offsets(first,all);
            }
            break;
        }
    }

    return NULL;
}


/*------------------------------------------------------------------------------
*
*	Module service call entry point.
*/
void module_service(int service_no, _kernel_swi_regs *r, void *pw)
{
    NOT_USED(pw);
    NOT_USED(r);

    if (service_no == Service_ShutDownComplete)
    {
        Flags |= STANDBY;
    }
#ifdef SCALE
    else if (service_no == Service_ModeChange)
        ir_modechange();
#endif
}


/*------------------------------------------------------------------------------
*
*	Module upcall handler. Called with IRQs enabled.
*/
int module_upcall_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED( pw );

    if (((r->r[0] == UpCall_DeviceRxDataPresent) ||
        (r->r[0] == UpCall_DeviceThresAbove)) &&
        (r->r[1] == in_handle))
    {
#if DEBUG>0
        if (r->r[0] == UpCall_DeviceThresAbove) db_printf("Threshhold!\n");
#endif
        ir_DeviceRxDataPresent();
    }
    else if ((r->r[0] == UpCall_File) &&
        (r->r[9] == UpCall_File_Closing))	/* Handle streams *shutted */
    {
#ifndef FAKEINPUT
        if (r->r[1] == in_handle)		/* Fatal condition! */
            Disable();			/* Panic! */
#endif
        if (r->r[1] == out_handle)
            out_handle = -1;			/* Can recover from this later */
    }
    else if (r->r[0] == UpCall_Online)
        Flags &= ~STANDBY;

    return 1;
}




/*------------------------------------------------------------------------------
*
*	Module timeout handler.
*
* In:
*	r0 = tag value of device that timed out.
*
* Called by timeout_preveneer via the C IRQ handler module_timeout_entry.
* Must return 1 so that timeout_preveneer can restore r0.
*/
int module_timeout_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED( pw );
    ir_timeout(r->r[0]);
    return 1;
}




_kernel_oserror *module_swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    NOT_USED(pw);

    switch(swi_no)
    {
        case 0:
        {
            ir_api_initialise_client(r);
            break;
        }
        default:
        {
            DEBUGFN(1,db_printf("Unknown SWI number:%08x\n",swi_no));
            break;
        }
    }
    return NULL;
}



