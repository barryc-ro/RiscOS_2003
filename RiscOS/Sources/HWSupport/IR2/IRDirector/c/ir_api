#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"
#include "command.h"

#include "ir_api.h"
#include "drivers.h"
#include "veneers.h"
#include "blast.h"
#include "ir.h"
#include "irtags.h"


static ir_director_functions_t functions=
{
    IR_API_VERSION,

    veneer_ir_api_blast,
    veneer_ir_api_cancel_blast,
    veneer_ir_api_data_download,
    veneer_ir_api_cancel_data_download,
    veneer_ir_api_request_report_packet,
    veneer_ir_api_finalise_client,
};

extern void *PrivateWord;

/*
    Entry: r0 = unique driver id
           r1 = pointer to ir_client_callbacks_t containing callbacks
                and flags
           r2 = driver's pw

    Exit:  r0 = pointer to table of server side functions
           r1 = director's pw
*/
void ir_api_initialise_client(_kernel_swi_regs *r)
{
    driver_list_node_t *drv;

DEBUGFN(3,db_printf("ir_api_initialise_client called from driver %08x, revision %x\n",r->r[0],r->r[3]));
    drv = drv_find_driver_by_driver_number(drv_driver_list,r->r[0]);
    if (drv == NULL)
    {
        DEBUGFN(3,db_printf("adding reference to driver %08x, revision %x\n",r->r[0],r->r[3]));
        drv_driver_list = drv_add_driver(drv_driver_list, r->r[0], r->r[3]);
        drv = drv_driver_list;
    }

    if (drv == NULL)
    {
        /*
            Horrible death
        */
    }
    else
    {
        drv->callbacks = (ir_real_callbacks_t *)r->r[1];
        drv->pw = (void *)r->r[2];

        DEBUGFN(3,db_printf("Driver %08x uses API version %d\n",
                            drv->driver_number, drv->callbacks->api_version));

        drv->flags |= DRIVER_FLAGS_INITIALISED | DRIVER_FLAGS_LOADED;

        r->r[0] = (int)(&functions);
        r->r[1] = (int)PrivateWord;

    }
}

/*
    Entry: r0 = unique driver id
*/
void ir_api_finalise_client(_kernel_swi_regs *r)
{
    tag_info_t *tag;
    drv_driver_list = drv_remove_driver(drv_driver_list,r->r[0]);

    do
    {
        tag = tags_find_tag_by_driver_number(r->r[0]);
        if (tag)
        {
            tags_retire_tag(tag->tag_number);
        }
    }while (tag!=NULL);


}



/*
    Entry: r0 = unique driver id
           r1 = pointer to data to blast
           r2 = length of data to blast
           r3 = ir_blast_setup_t containing flags
*/
void ir_api_blast(_kernel_swi_regs *r)
{
    ir_blast_setup_t setup;
    setup.word = r->r[3];

    blast_queue_blast_data(r->r[0],
                           (unsigned char *)r->r[1],
                           (unsigned int)r->r[2],
                           setup);

}

/*
    Entry: r0 = unique driver id
*/
void ir_api_cancel_blast(_kernel_swi_regs *r)
{
    NOT_USED(r);
    /*
        @@@@@ check to see if we've got data being
        transmitted at the moment, or if it's just queued,
        or even haven't got any at all.
    */
    send_halt(HALT_FLAG_CANCEL_BLASTING);
}

/*
    Entry: r0 = unique driver id
           r1 = pointer to data to blast
           r2 = length of data to blast
*/
void ir_api_data_download(_kernel_swi_regs *r)
{
    NOT_USED(r);
}

/*
    Entry: r0 = unique driver id
*/
void ir_api_cancel_data_download(_kernel_swi_regs *r)
{
    NOT_USED(r);
}

/*
    Entry: r0 = unique driver id
           r1 = requested report type
*/
void ir_api_request_report_packet(_kernel_swi_regs *r)
{
    send_status_report_request((r->r[1])&7);
}

