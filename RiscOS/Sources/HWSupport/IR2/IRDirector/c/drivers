#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "drivers.h"
#include "veneers.h"


unsigned int drv_non_twirp_driver_number = DRIVER_UNUSED_NUMBER;

driver_list_node_t *drv_driver_list=NULL;

unsigned int drv_load_driver(driver_list_node_t *node)
{
    _kernel_oserror *err;
    char filename[100];


    if (reg_get_driver_info(node->driver_number,
                            &node->revision_number,
                            &node->description[0],
                            &node->location,
                            &node->filename[0]))
    {

        strcpy(filename,"IRDrivers:");
        strcat(filename,node->filename);
        DEBUGFN(DBG_REGISTRY,printf("Attempting to load driver \"%s\" from %s\n",
                         node->description,
                         filename));

        err = _swix(OS_Module,_INR(0,1),1,filename);
        if (err==NULL)
        {
            node->flags |= DRIVER_FLAGS_LOADED;
            DEBUGFN(DBG_REGISTRY,db_printf("Leaving drv_load_driver (1)\n"));
            return 1;
        }
        else
        {
            DEBUGFN(DBG_REGISTRY,db_printf("Failed:%x,%s\n",err->errnum,err->errmess));
        }
    }
    DEBUGFN(DBG_REGISTRY,db_printf("Leaving drv_load_driver (0)\n"));

    return 0;
}


driver_list_node_t *drv_add_driver(driver_list_node_t *head, unsigned int driver_number, unsigned int revision_number)
{
    driver_list_node_t *new_node;
    new_node = malloc(sizeof(driver_list_node_t));
    if (new_node == NULL)
    {
        return NULL;
    }
    new_node->next = head;
    new_node->driver_number = driver_number;
    new_node->revision_number = revision_number;
    new_node->flags = 0;
    return new_node;
}


driver_list_node_t *drv_remove_driver(driver_list_node_t *head, unsigned int driver_number)
{
    driver_list_node_t *node, *prev=NULL;

    DEBUGFN(DBG_REGISTRY,db_printf("Trying to remove driver with number %x\n",driver_number));

    node = drv_find_driver_by_driver_number(head,driver_number);
    if (node != NULL)
    {
        if (head != node)
        {
            for (prev = head; prev->next != node; prev = prev->next);
        }

        if (prev != NULL)
        {
            prev->next = node->next;
        }
        else
        {
            head = node->next;
        }

        /*
            If this driver has announced itself as the Non-TWIRP
            driver, then allow others to claim that privelidge.
        */
        if (drv_non_twirp_driver_number == node->driver_number)
        {
            drv_non_twirp_driver_number = DRIVER_UNUSED_NUMBER;
        }

        free(node);

        DEBUGFN(DBG_REGISTRY,db_printf("Driver %x removed successfully\n",driver_number));
    }
    return head;
}

driver_list_node_t *drv_find_driver_by_driver_number(driver_list_node_t *head, unsigned int driver_number)
{
    for (;head != NULL; head = head->next)
    {
        if (head->driver_number == driver_number)
        {
            break;
        }
    }
    return head;
}


void drv_send_data_packet(driver_list_node_t *drv, unsigned int registry_number, unsigned int tag_number, unsigned int packet)
{
    _kernel_swi_regs r;
    if (drv->flags & DRIVER_FLAGS_INITIALISED)
    {
        if (drv->callbacks->accept_data_packet != NULL)
        {
            r.r[0] = registry_number;
            r.r[1] = tag_number;
            r.r[2] = packet;
            call_function (drv->callbacks->accept_data_packet,&r, drv->pw);
        }
    }
}

