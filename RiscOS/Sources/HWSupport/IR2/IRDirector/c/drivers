#include <stdio.h>
#include <stdlib.h>
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "drivers.h"
#include "veneers.h"



driver_list_node_t *drv_driver_list=NULL;

unsigned int drv_load_driver(driver_list_node_t *node)
{
    if (reg_get_driver_info(node->driver_number,
                            &node->revision_number,
                            &node->description[0],
                            &node->location,
                            &node->filename[0]))
    {
        DEBUGFN(2,printf("Attempting to load driver \"%s\" from %s\n",node->description,node->filename));
        if (_swix(OS_Module,_INR(0,1),1,node->filename)==NULL)
        {
            node->flags |= DRIVER_FLAGS_LOADED;
            return 1;
        }
    }
    return 0;
}

driver_list_node_t *drv_add_driver(driver_list_node_t *head, unsigned int driver_number)
{
    driver_list_node_t *new_node;
    new_node = malloc(sizeof(driver_list_node_t));
    if (new_node == NULL)
    {
        return NULL;
    }
    new_node->next = head;
    new_node->driver_number = driver_number;
    new_node->outstanding_packets = NULL;
    new_node->flags = 0;
    return new_node;
}

driver_list_node_t *drv_remove_driver(driver_list_node_t *head, unsigned int driver_number)
{
    driver_list_node_t *node, *prev=NULL;

    node = drv_find_driver_by_driver_number(head,driver_number);
    if (node != NULL)
    {
        if (head != node)
        {
            for (prev = head; prev->next != node; prev = prev->next);
        }

        if (prev != NULL)
        {
            prev->next = node->next;
        }
        else
        {
            head = node->next;
        }
        drv_send_outstanding_packets(node,0);
        free(node);
    }
    return head;
}

driver_list_node_t *drv_find_driver_by_driver_number(driver_list_node_t *head, unsigned int driver_number)
{
    for (;head != NULL; head = head->next)
    {
        if (head->driver_number == driver_number)
        {
            break;
        }
    }
    return head;
}


unsigned int drv_add_outstanding_packet(driver_list_node_t *drv, unsigned int registry_number, unsigned int tag_number, unsigned int packet)
{
    outstanding_packet_list_node_t *tail=drv->outstanding_packets;
    outstanding_packet_list_node_t *new_node;

    new_node = malloc(sizeof(outstanding_packet_list_node_t));
    if (new_node == NULL)
    {
        return FALSE;
    }
    new_node->next = NULL;
    new_node->registry_number = registry_number;
    new_node->tag_number = tag_number;
    new_node->packet = packet;

    if (tail)
    {
        while (tail->next != NULL)
        {
            tail = tail->next;
        }
        tail->next = new_node;
    }
    else
    {
        drv->outstanding_packets = new_node;
    }
    return TRUE;
}

void drv_send_outstanding_packets(driver_list_node_t *drv, unsigned int bother_sending)
{
    outstanding_packet_list_node_t *node=drv->outstanding_packets;
    outstanding_packet_list_node_t *next;
DEBUGFN(3,db_printf("Sending outstanding packets for driver %d\n",drv->driver_number));
    while (node != NULL)
    {
        if (bother_sending)
        {
            drv_send_data_packet(drv,
                                 node->registry_number,
                                 node->tag_number,
                                 node->packet);
        }
        next = node->next;
        free(node);
        node = next;
    }
    drv->outstanding_packets = NULL;
}

void drv_send_data_packet(driver_list_node_t *drv, unsigned int registry_number, unsigned int tag_number, unsigned int packet)
{
    _kernel_swi_regs r;
    if (drv->flags & DRIVER_FLAGS_INITIALISED)
    {
        if (drv->callbacks->accept_data_packet != NULL)
        {
            r.r[0] = registry_number;
            r.r[1] = tag_number;
            r.r[2] = packet;
            call_function (drv->callbacks->accept_data_packet,&r, drv->pw);
        }
    }
}


int drv_load_handler(_kernel_swi_regs *r, void *pw)
{
    /*
        Load any required driver modules.
    */
    driver_list_node_t *node;

    NOT_USED(r);
    NOT_USED(pw);

    for(node = drv_driver_list;node != NULL;node = node->next)
    {
        if (!node->flags & DRIVER_FLAGS_LOADED)
        {
            drv_load_driver(node);
            if (!node->flags & DRIVER_FLAGS_LOADED)
            {
                DEBUGFN(1,db_printf("Failed to load driver:%s!\n",node->filename));
            }
        }
    }
    return 1;
}


int drv_send_handler(_kernel_swi_regs *r, void *pw)
{
    /*
        Send any outstanding packets to the relevant driver modules.
    */
    driver_list_node_t *node;

    NOT_USED(r);
    NOT_USED(pw);

    for(node = drv_driver_list;node != NULL;node = node->next)
    {
        if (node->flags & DRIVER_FLAGS_INITIALISED)
        {
            drv_send_outstanding_packets(node,1);
        }
    }

    return 1;
}



