#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "module.h"
#include "ir.h"
#include "irqs.h"
#include "registry.h"
#include "irp.h"
#include "command.h"
#include "drivers.h"
#include "irtags.h"


static tag_info_t tags[TAG_COUNT];

void tags_initialise_tags(void)
{
    unsigned int i;
    extern void *PrivateWord;

    for (i=0; i<TAG_COUNT; i++)
    {
        tags[i].registry_number = REG_UNASSIGNED_NUMBER;
        tags[i].driver_number = REG_UNASSIGNED_NUMBER;
        tags[i].context.word = INACTIVE;
        tags[i].PrivateWord = PrivateWord;
        tags[i].tag_number = i;
    }
}




void tags_associate_tag(unsigned char tag_number, unsigned int registry_number, unsigned int driver_number)
{
    if (tags[tag_number].registry_number != registry_number)
    {
        DEBUGFN(DBG_REGISTRY,db_printf("Associating new tag %d with registry %x, driver %x\n",
                            tag_number, registry_number, driver_number));
        tags_retire_tag(tag_number);
        tags[tag_number].registry_number = registry_number;
    }
    else
    {
        DEBUGFN(DBG_REGISTRY,db_printf("Re-associating tag %d with driver %x\n",
                            tag_number, driver_number));
    }
    tags[tag_number].driver_number = driver_number;
}






void tags_retire_tag(unsigned char tag_number)
{
    tag_info_t *tag = tags+tag_number;

    if ((tag->registry_number != REG_UNASSIGNED_NUMBER) ||
        (tag->driver_number != REG_UNASSIGNED_NUMBER))
    {
        DEBUGFN(DBG_REGISTRY, db_printf("Retiring tag %d\n", tag_number));
        if (tag->context.word != INACTIVE)
        {
            ir_timeout(tag_number);			/* Force cleanup */
            ir_cancel_timeout(tag_number);
        }
        tag->registry_number = REG_UNASSIGNED_NUMBER;
        tag->driver_number = REG_UNASSIGNED_NUMBER;
    }
}


tag_info_t *tags_find_tag(unsigned char tag_number)
{
    return &tags[tag_number];
}

tag_info_t *tags_find_tag_by_registry_number(unsigned int registry_number)
{
    unsigned int loop;
    DEBUGFN(DBG_REGISTRY,db_printf("Looking for tag with registry number %x\n",registry_number));
    for (loop = 0; loop < TAG_COUNT; loop ++)
    {
        if (tags[loop].registry_number == registry_number)
        {
            return &tags[loop];
        }
    }
    return NULL;
}

tag_info_t *tags_find_tag_by_driver_number(unsigned int driver_number)
{
    unsigned int loop;
    DEBUGFN(DBG_REGISTRY,db_printf("Looking for tag with driver number %x\n",driver_number));
    for (loop = 0; loop < TAG_COUNT; loop ++)
    {
        if (tags[loop].driver_number == driver_number)
        {
            return &tags[loop];
        }
    }
    return NULL;
}


