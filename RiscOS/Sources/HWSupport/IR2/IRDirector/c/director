/*
* director.c
*/

/*
* 		Copyright 1997 Acorn Network Computing
*
* This material is the confidential trade secret and proprietary
* information of Acorn Network Computing. It may not be reproduced,
* used, sold, or transferred to any third party without the prior
* written consent of Acorn Network Computing. All rights reserved.
*
*/

#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"


#include "utils.h"
#include "serial.h"

#include "module.h"
#include "ir.h"
#include "irqs.h"
#include "registry.h"
#include "irp.h"
#include "command.h"
#include "drivers.h"
#include "tags.h"
#include "veneers.h"
#include "blast.h"


#define MIN(a,b)	(((a)<(b)) ? (a) : (b))
#define MAX(a,b)	(((a)>(b)) ? (a) : (b))

#if 0
void
db_printf(char *format, ...)
{
    _kernel_swi_regs reg;
    char strLine[80];
    va_list list;


    va_start(list,format);
    vsprintf(strLine,format,list);
    va_end(list);

    reg.r[0] = (int)strLine;
    _kernel_swi(OS_Write0,&reg,&reg);
    _kernel_swi(OS_NewLine,&reg,&reg);
}
#endif

/*
* Constants
*/

#ifdef USE_PSION

#define SERIAL_PORT	"1"
#define SERIAL_BAUD	"19200"
#define SERIAL_DEVICE	"devices#baud" SERIAL_BAUD ";data8;stop1;noparity;rts;size64;thres48:$.serial" SERIAL_PORT

#else

#define SERIAL_PORT	"2"
#define SERIAL_BAUD	"9600"
#define SERIAL_DEVICE	"devices#baud" SERIAL_BAUD ";data8;stop1;noparity;nohandshake;size64;thres48:$.serial" SERIAL_PORT

#endif


#define NV_BYTE		0xE8		/* Our byte in non-volatile memory */
#define NV_BITS		0x0F		/* Bitmask of our bits in that byte */



static unsigned int halt_flags = HALT_FLAG_HALT | HALT_FLAG_CANCEL_BLASTING | HALT_FLAG_CANCEL_DOWNLOAD;




/*
 * Globals
 */
int in_handle=-1, out_handle=-1;	/* DeviceFS serial: handles */
int Flags = 0;

void *PrivateWord;
static _kernel_oserror *err;
static unsigned char buffer[4], *next;	/* Read buffer and first free space */


/*
 * Prototypes
 */
static void process_raw(unsigned int raw);
static void process_tag_status_report(unsigned int raw);



/*------------------------------------------------------------------------------
*
*	Clean-up code
*/
void Disable( void )
{
    send_halt(halt_flags);     		/* Tell micro to stop sending */

    Flags &= ~ENABLED;			/* Must do this before closing files */

    if (in_handle != -1)
    {
        _swix(OS_Find, _INR(0,1), 0, in_handle);	/* Close input stream. */
        in_handle = -1;
    }

    if (out_handle != -1)
    {
        _swix(OS_Find, _INR(0,1), 0, out_handle);	/* Close output stream. */
        out_handle = -1;
    }

    process_tag_status_report(0);			/* Reset tag stuff and cancel timeouts*/

    _swix(OS_Release, _INR(0,2), UpcallV, module_upcall_entry, PrivateWord);
}


/*------------------------------------------------------------------------------
*
*	Grab vectors etc
*/
static _kernel_oserror *Enable( void )
{
    int i;
    ioctl_t ioctlblock = { IOCTL_FIFO_TRIG, 0, 0, 0, 1, 4 };
    in_handle = out_handle = -1;		/* Reset handles */

    /* Reset tag stuff */
    tags_initialise_tags();

    err = _swix(OS_Claim, _INR(0,2), UpcallV, module_upcall_entry, PrivateWord);

    if (!err) err = _swix(OS_Find, _INR(0,1)|_OUT(0),
                          SERIAL_INPUT, SERIAL_DEVICE, &in_handle);
    /* set fifo trigger level to 4 on input */
    if (!err) err = _swix(OS_Args, _INR(0,2),
                          OSArgs_IOCtl, in_handle, &ioctlblock);
    if (!err) err = _swix(OS_Find, _INR(0,1)|_OUT(0),
                          SERIAL_OUTPUT, SERIAL_DEVICE, &out_handle);
    DEBUGFN(2, if (!err) db_printf("Handles: in=%d, out=%d, pw=%p\n",
                                   in_handle, out_handle, PrivateWord));

    if (!err)
    {
        Flags |= ENABLED;
        next = buffer;
        send_setup_and_run(ir_getfamily());
    }
    else
    {
        Disable();
    }

    return err;
}


/*------------------------------------------------------------------------------
*
*	Module finalisation
*/
void ir_finalise( void *pw )
{
    NOT_USED( pw );

    if (Flags & ENABLED)
        Disable();
}



/*------------------------------------------------------------------------------
*
*	Module initialisation
*/
_kernel_oserror *ir_initialise(void *pw)
{
    PrivateWord = pw;

    err = Enable();

    return NULL;
}


/*------------------------------------------------------------------------------
*
*	Read and process data from serial stream. Called with irqs on.
*/
int ir_DeviceRxDataPresent(void)
{
    static int busy = FALSE, reentered = FALSE;
    int extent, i, notok;
    unsigned char *first;

    /* Prevent re-entry */
    if (busy)
    {
        reentered = TRUE;
        return TRUE;
    }
    busy = TRUE;

    /* How much data? */
    _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), OSArgs_Extent, in_handle, &extent);

    while (extent)
    {
    /* Get up to a (raw) packet's worth of data.
        * We should have 1 to 4 bytes in the buffer after this call */
        if (_swix(OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_OUT(2),
            OSGBPB_Read, in_handle, next, MIN(extent,4-(next-buffer)),
            &next) )
        {
            DEBUGFN(1, db_printf("Read returned error!\n"));
            Disable();
            return TRUE;
        }
        /* Check validity of the raw packet */


        /* Check bit 7 of 1st byte set */
        if (!(*buffer & 0x80))
        {
            DEBUGFN(1, db_printf("Not a header!\n"));

            /* Find the first header packet */
            for (first=buffer+1; first<next; first++)
                if (*buffer & 0x80)
                break;

            /* Shift the data up so header packet is at the start of the buffer */
            for (i=0; i<(next-first); i++)
                buffer[i] = first[i];

            next += (buffer - first);
        }


        if ((buffer[0] & 0x0f) != CMD_IN_COMP_STATUS_REPORT)
        {
            /* Check bits 7 of remaining bytes clear */
            do
            {
                notok = FALSE;
                for (first=buffer+1; first<next; first++)
                {
                    if (*first & 0x80)
                    {
                        DEBUGFN(1, db_printf("Not a whole packet!\n"));

                        /*
                        Shift the data up so header packet
                        is at the start of the buffer
                        */

                        for (i=0; i<(next-first); i++)
                        {
                            buffer[i] = first[i];
                        }

                        next += (buffer - first);
                        notok = TRUE;
                        break;
                    }
                }
            } while (notok);
        }
        /* If we've got a (raw) packet then process it */
        if (((next-buffer) == 4) ||
            ((buffer[0] & 0x0f) == CMD_IN_COMP_STATUS_REPORT))
        {
/*            printf("#");*/
            process_raw(*((unsigned int *) buffer));
            next = buffer;
        }

        /* More data? */
        /* Can be re-entered during OSArgs call so have to ensure correct extent:
        * if we miss the Upcall we won't be told about data being present again */
        do
        {
            reentered = FALSE;
            _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), OSArgs_Extent, in_handle, &extent);
#if 0	/* XXX test: force reentry */
            db_printf("X"); for (i=0; i<1000000; i++); db_printf(reentered ? "!\n" : "Y\n");
#endif
        }
        while (reentered);
    };
    busy = FALSE;

    return TRUE;
}


/*------------------------------------------------------------------------------
*
*	Read configured family
*/
int ir_getfamily(void)
{
    int byte;
    _swix(OS_Byte, _INR(0,1)|_OUT(2), 0xA1, NV_BYTE, &byte);
    return(byte &= NV_BITS);
}


/*------------------------------------------------------------------------------
*
*	Set configured family
*/
void ir_setfamily(int family)
{
    int byte;

    /* Read, modify, write */
    _swix(OS_Byte, _INR(0,1)|_OUT(2), 0xA1, NV_BYTE, &byte);
    byte = (byte & ~NV_BITS) | (family & NV_BITS);
    _swix(OS_Byte, _INR(0,2), 0xA2, NV_BYTE, byte);

    /* Inform the micro of the change */
    if (Flags & ENABLED)
        send_setup_and_run(family);
}


/*------------------------------------------------------------------------------
*
*	Send a command to micro
*/
static void put_command(command_packet_t command, size_t size)
{
    unsigned int count;
    /*
    Reopen our stream if it got shut
    */
    if (out_handle == -1)
    {
        _swix(OS_Find,
            _INR(0,1)|_OUT(0),
            SERIAL_OUTPUT, SERIAL_DEVICE,
            &out_handle);
    }


    /*
    Output the command, byte by byte.
    */
    DEBUGFN(1, db_printf("put_command: "));
    for (count = 0; count < size; count++)
    {
        DEBUGFN(2, db_printf("%02x ", command.byte_array[count]));
        _swix(OS_BPut, _INR(0,1), command.byte_array[count], out_handle);
    }
    DEBUGFN(1, db_printf("\n"));
}

/*------------------------------------------------------------------------------
*
*	munge an outgoing command packet
*/
command_packet_t munge(outbound_command_number_t command, unsigned char data[3])
{
    command_packet_t packet;

    packet.generic.b0_filler = 1;
    packet.generic.b1_7 = data[0]&0x80?1:0;
    packet.generic.b2_7 = data[1]&0x80?1:0;
    packet.generic.b3_7 = data[2]&0x80?1:0;
    packet.generic.command = command;

    packet.byte_array[1] = data[0]&0x7f;
    packet.byte_array[2] = data[1]&0x7f;
    packet.byte_array[3] = data[2]&0x7f;

    return packet;
}

/*------------------------------------------------------------------------------
*
*	Send ir data downlink command to micro
*/
void send_data_downlink(unsigned char data[3])
{
    put_command(munge(CMD_OUT_DATA_DOWNLINK,data),4);
}

/*------------------------------------------------------------------------------
*
*	Send reset command to micro
*/
void send_setup_and_run(unsigned int family)
{
    setup_and_run_t sr;

    sr.bits.owner = family;
    sr.bits.r = 1;
    sr.bits.ps = 0;
    sr.bits.pn = 1;
    sr.bits.pr = 0;
    sr.bits.pir = 0;

    put_command(munge(CMD_OUT_SETUP_AND_RUN,sr.byte_array),4);
}


/*------------------------------------------------------------------------------
*
*	Send halt command to micro
*/
void send_halt(unsigned int halt_flags)
{
    command_packet_t cmd;
    cmd.byte_array[0] = 0x80 | halt_flags | CMD_OUT_HALT;
    put_command(cmd,1);
}


/*------------------------------------------------------------------------------
*
*	Send status report request command to micro
*/
void send_status_report_request(unsigned char request_code)
{
    command_packet_t cmd;
    cmd.byte_array[0] = 0x80 | (request_code<<4) | CMD_OUT_DEBUG;
    put_command(cmd,1);
}


/*------------------------------------------------------------------------------
*
*	Send ir blasting setup command to micro
*/
void send_ir_blasting_setup(ir_blasting_setup_t bs)
{
    put_command(munge(CMD_OUT_IR_BLASTING_SETUP,bs.byte_array),3);
}

/*------------------------------------------------------------------------------
*
*	Send ir blasting continuation command to micro
*/
void send_ir_blasting_continuation(ir_blasting_continuation_t bc)
{
    bc.byte_array[2] = 0; /* to clear B1.5 */

    put_command(munge(CMD_OUT_IR_BLASTING_CONTINUATION,bc.byte_array),2);
}

/*------------------------------------------------------------------------------
*
*	Send ir blasting data command to micro
*/
void send_ir_blasting_data(unsigned char data[3])
{
    put_command(munge(CMD_OUT_IR_BLASTING_DATA,data),4);
}





/*------------------------------------------------------------------------------
*
*	de-munge an incoming raw data packet (which is assumed to be valid)
*/
static packet_t demunge(unsigned int raw)
{
    packet_t packet;

    packet.word = (raw >> 8) |
        ((raw & 0x40) << 1) |
        ((raw & 0x20) << 10) |
        ((raw & 0x10) << 19);
    return packet;
}





/*------------------------------------------------------------------------------
*
*	Process a de-munged packet
*
* The registry packet handling stuff is pretty gross:
* Some registry entries come in two packets; an extended followed by a basic,
* while other ones just come in a single basic packet. This means that when we
* get an extended registry packet we have to remember it so we can compare
* its tag value with later basic packets and glue them together if they match.
* Because we can be talking to 2 separate devices simulataneously, we have to
* remember the last 2 extended packets received. This scheme will break if we
* receive an extended packet with tag t, never receive the companion basic tag
* (for whatever reason), and then later receive a basic packet from a different
* device but which has been assigned the same tag t. If this happens we end up
* with a bogus registry number for the second device.
*/
static void process(packet_t packet)
{
    driver_list_node_t *drv=NULL;
    tag_info_t *tag;
    int i, next_ext=0;
    unsigned int registry_number;

    static struct
    {
        unsigned int ext_bits, ext_tag;
    } ext_state[2] = {{ -1, -1 }, { -1, -1 }};	/* A bit of state */

    DEBUGFN(3, db_printf("Data: %06x\n", packet.word));

    switch (packet.generic.tag)
    {
        case TAG_ID_EXTEND:
        {
            /*
                Hold the information until we get a basic id packet
            */
            ext_state[next_ext].ext_tag = packet.reg_extended.new_tag;
            ext_state[next_ext].ext_bits = (packet.reg_extended.num_hi << 24) |
                                           (packet.reg_extended.num_15 << 15) |
                                           (packet.reg_extended.num_lo << 16);
            DEBUGFN(2, db_printf("Remembering extended info for tag %d\n",
                                 ext_state[next_ext].ext_tag));
            next_ext = 1 - next_ext;
            break;
        }
        case TAG_ID_BASIC:
        {
            unsigned int driver_number;

            /*
                If there's an extended id packet macthing the
                basic one, then construct the id from it.
                Otherwise, just use the basic id.
            */
            if (packet.reg_basic.new_tag == ext_state[0].ext_tag)
            {
                registry_number = (packet.reg_basic.num_hi << 8) |
                                  packet.reg_basic.num_lo |
                                  ext_state[0].ext_bits;
                ext_state[0].ext_tag = -1;
                next_ext = 0;
            }
            else if (packet.reg_basic.new_tag == ext_state[1].ext_tag)
            {
                registry_number = (packet.reg_basic.num_hi << 8) |
                                  packet.reg_basic.num_lo |
                                  ext_state[1].ext_bits;
                ext_state[1].ext_tag = -1;
                next_ext = 1;
            }
            else
            {
                registry_number = (packet.reg_basic.num_hi << 8) |
                                  packet.reg_basic.num_lo;
            }


            /*
                Try and find the driver in the list of loaded drivers.
                First attempt to use the list of tags to see if we can get
                a registry number/driver number pair, so we don't have
                to use the registry where possible.

                If the driver's not there, attempt to load it into RAM. This
                is done via a callback, which means any data packets
                to be sent to the driver need to be held onto for a while.
            */
            DEBUGFN(3,db_printf("looking in tag table...\n"));
            tag = tags_find_tag_by_registry_number(registry_number);
            if (tag == NULL)
            {

                DEBUGFN(3,db_printf("looking in registry...\n"));
                /*
                    We don't already have a reference to the driver...
                    look in the registry
                */
                if (!reg_get_device_info(registry_number, &driver_number, NULL))
                {
                    /*
                        We don't have a record of the device in the registry...
                        This is bad news!

                        @@@@ implement stuff to handle this case.
                    */
                    DEBUGFN(3,db_printf("failed to find entry in registry!\n"));
                }
            }
            else
            {
                driver_number = tag->driver_number;
            }

            DEBUGFN(3,db_printf("looking in driver list...\n"));
            drv = drv_find_driver_by_driver_number(drv_driver_list, driver_number);
            if (drv == NULL)
            {
                DEBUGFN(2,db_printf("Adding driver %d...\n",driver_number));
                drv_driver_list = drv_add_driver(drv_driver_list, driver_number);
                drv = drv_driver_list;
                _swix(OS_AddCallBack,
                      _INR(0,1),
                      drv_load_entry,
                      PrivateWord);
            }

            /*
               If we still haven't got a reference to it,
               something has gone horribly wrong.
            */
	    if (drv == NULL)
	    {
                DEBUGFN(1,db_printf("Failed to find driver\n"));
	    }
	    else
	    {
	        /*
	            Now mark the tag as being assigned to this driver.

	            If the tag is already assigned to a different driver,
	            retire it.
	        */

	        tags_associate_tag(packet.reg_basic.new_tag, registry_number, driver_number);
	    }

            break;
        }
        default:
        {
            tag = tags_find_tag(packet.generic.tag);

            if (tag->registry_number != REG_UNASSIGNED_NUMBER)
            {
                drv = drv_find_driver_by_driver_number(drv_driver_list,tag->driver_number);
                if (drv != NULL)
                {

                    if (drv->flags&DRIVER_FLAGS_INITIALISED)
                    {
                        drv_send_data_packet(drv,tag->registry_number,tag->tag_number,packet.word);
                    }
                    else
                    {
                        DEBUGFN(3,db_printf("Saving packet %06x for registry %d\n",packet.word,tag->registry_number));
                        drv_add_outstanding_packet(drv,tag->registry_number,tag->tag_number,packet.word);
                    }
                }
                else
                {
                    DEBUGFN(1,db_printf("Failed to find driver for device_number %08x\n",
                                        tag->driver_number));
                }
            }
            else
            {
                DEBUGFN(1,db_printf("Received packet from device with unassigned tag %d!\n",
                                    tag->tag_number));
            }
        }
    }
}







/*------------------------------------------------------------------------------
*
* Process a tag status report
*
* Tags which are not in use are 0 in the bitmask.
*/
static void process_tag_status_report(unsigned int raw)
{
    driver_list_node_t *node;
    int i, b;
    packet_t packet = demunge(raw);
    unsigned int tag_usage = (packet.tag_status_report.a7_a0) |
        (packet.tag_status_report.a13_a8 << 8);


    for (i=0, b=1; i<TAG_COUNT; i++, b+=b)
    {
        if (!(tag_usage & b))
        {
            tags_retire_tag(i);
        }
    }


    for (node = drv_driver_list; node != NULL; node = node->next)
    {
        if (node->callbacks->notify_flags.bits.notify_on_tag_status_report)
        {
            if (node->callbacks->accept_report_packet)
            {
                _kernel_swi_regs r;
                r.r[0] = 0; /* tag status report*/
                r.r[1] = packet.word;
                call_function(node->callbacks->accept_report_packet,
                              &r,
                              node->pw);
            }
        }
    }
}


void process_controller_status_report(unsigned int raw)
{
    driver_list_node_t *node;
    packet_t packet = demunge(raw);

    for (node = drv_driver_list; node != NULL; node = node->next)
    {
        if (node->callbacks->notify_flags.bits.notify_on_ctrl_status_report)
        {
            if (node->callbacks->accept_report_packet)
            {
                _kernel_swi_regs r;
                r.r[0] = 1; /* controller status report*/
                r.r[1] = packet.word;
                call_function(node->callbacks->accept_report_packet,
                              &r,
                              node->pw);
            }
        }
    }
}

void process_comms_status_report(unsigned int raw)
{
    driver_list_node_t *node;
    packet_t packet = demunge(raw);

    for (node = drv_driver_list; node != NULL; node = node->next)
    {
        if (node->callbacks->notify_flags.bits.notify_on_comms_status_report)
        {
            if (node->callbacks->accept_report_packet)
            {
                _kernel_swi_regs r;
                r.r[0] = 2; /* comms status report*/
                r.r[1] = packet.word;
                call_function(node->callbacks->accept_report_packet,
                              &r,
                              node->pw);
            }
        }
    }
}

void process_completion_status_report(unsigned int raw)
{
    driver_list_node_t *drv;
    packet_t packet = demunge(raw);

    DEBUGFN(3,db_printf("comp status:%06x\n",packet.word));
    /*
        Is this a completion of blasting?
    */
    if (packet.comp_status_report.db)
    {
        /*
            If the whole blast string has been sent,
            alert the driver that wanted it blasted.
        */
        if (blast_complete())
        {
            unsigned int driver_number = blast_get_driver_number();
            driver_list_node_t *drv = drv_find_driver_by_driver_number(drv_driver_list,
                                                                       driver_number);
DEBUGFN(3,db_printf("blast_complete\n"));
            if (drv != NULL)
            {
DEBUGFN(3,db_printf("found driver\n"));
                if (drv->callbacks->notify_flags.bits.notify_on_comp_status_report)
                {
DEBUGFN(3,db_printf("driver wants completion status reoorts\n"));
                    if (drv->callbacks->accept_report_packet)
                    {
                        _kernel_swi_regs r;
                        r.r[0] = 3; /* completion status report*/
                        r.r[1] = packet.word;
                        call_function(drv->callbacks->accept_report_packet,
                                      &r,
                                      drv->pw);
                    }
                }
            }
            blast_end();
            blast_start();
        }
        else
        {
DEBUGFN(3,db_printf("blast didn't complete\n"));
            blast_next_block();
        }
    }

}

/*------------------------------------------------------------------------------
*
*	Process a raw packet
*/
static void process_raw(unsigned int raw)
{
    switch (raw & 0x0f)
    {
        case CMD_IN_DATA:
        {
            process(demunge(raw));
            break;
        }
        case CMD_IN_TAG_STATUS_REPORT:
        {
            DEBUGFN(1, db_printf("Received tag status report\n"));
            process_tag_status_report(raw);
            break;
        }
        case CMD_IN_CTRL_STATUS_REPORT:
        {
            DEBUGFN(1, db_printf("Received controller status report\n"));
            process_controller_status_report(raw);
            break;
        }
        case CMD_IN_COMMS_STATUS_REPORT:
        {
            DEBUGFN(1, db_printf("Received communications status report\n"));
            process_comms_status_report(raw);
            break;
        }
        case CMD_IN_COMP_STATUS_REPORT:
        {
            DEBUGFN(1, db_printf("Received completion status report\n"));
            process_completion_status_report(raw);
            break;
        }
        default:
        {
            DEBUGFN(1, db_printf("Bogus raw packet: type %d!\n", raw & 0X0f));
            break;
        }
    }
}


/*------------------------------------------------------------------------------
*
*	Set a device timeout
*/
void ir_set_timeout(char tag_number, context_t context)
{
    tag_info_t *tag = tags_find_tag(tag_number);
    tag->context = context;
    _swix(OS_CallAfter,_INR(0,2),
        TIMEOUT_DELAY, timeout_preveneer, &(tag->PrivateWord));
}


/*------------------------------------------------------------------------------
*
*	Cancel device timeout
*
* Also sets device's context to INACTIVE
*/
void ir_cancel_timeout(char tag_number)
{
    tag_info_t *tag = tags_find_tag(tag_number);
    _swix(OS_RemoveTickerEvent, _INR(0,1),
        timeout_preveneer, &(tag->PrivateWord));
    tag->context.word = INACTIVE;
}


/*------------------------------------------------------------------------------
*
*	Device has timed out, do appropriate cleanup.
*/
void ir_timeout(char tag_number)
{
    tag_info_t *tag = tags_find_tag(tag_number);
    context_t *context = &(tag->context);

    DEBUGFN(1, (DEBUG<=1 ? db_printf("#") : db_printf("Device with tag %d timed out!\n", tag_number)));

    /* Timeout happened while being cancelled? */
    if (context->word == INACTIVE)
    {
        DEBUGFN(2, db_printf("no context to clean up!\n"));
        return;
    }

    /*
        @@@@ have to deal with a keyup or whatever here.
    */

    context->word = INACTIVE;
}
