#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "utils.h"
#include "blast.h"
#include "command.h"


static unsigned int flags=0;

static blast_list_node_t *blast_list=NULL;
static blast_list_node_t *blast_tail=NULL;


void blast_end(void)
{
    blast_list_node_t *temp;

DEBUGFN(3,db_printf("\n\nblast_end\n"));

    flags &=~(BLAST_FLAGS_IN_USE|BLAST_FLAGS_END_OF_DATA);

    temp = blast_list;
    /*
        Only node?
    */
    if (temp == blast_tail)
    {
        blast_list = NULL;
        blast_tail = NULL;
    }
    else
    {
        blast_list = blast_list->next;
    }
    free(temp->header);
    free(temp);
}

void blast_start(void)
{
DEBUGFN(3,db_printf("\n\nblast_start\n"));
    if (blast_list != NULL)
    {
        flags |= BLAST_FLAGS_IN_USE;
        blast_next_block();
    }
}

unsigned int blast_get_driver_number(void)
{
    return blast_list->driver_number;
}

unsigned int blast_complete(void)
{
    DEBUGFN(3,db_printf("\n\nblast_list = %p\nflags=%d\n",blast_list,flags));
    return (blast_list != NULL) &&
           ((flags&(BLAST_FLAGS_IN_USE | BLAST_FLAGS_END_OF_DATA)) ==
            (BLAST_FLAGS_IN_USE | BLAST_FLAGS_END_OF_DATA));
}

unsigned int blast_add_list_node(unsigned int driver_number,
                                 unsigned char *data,
                                 unsigned int length,
                                 ir_blast_setup_t setup)
{
    blast_list_node_t *node;
    node = malloc(sizeof(blast_list_node_t));
    if (node == NULL)
    {
        return 0 ;
    }


    node->next = NULL;
    node->header = malloc(length);
    if (node->header == NULL)
    {
        free(node);
        return 0;
    }
    node->driver_number = driver_number;
    node->length = length;
    memcpy(node->header,data,length);
    node->data = ((unsigned char *)node->header) + node->header->block_count + 1;
    node->setup = setup;
    node->block = 0;


    if (blast_tail == NULL)
    {
        blast_list = node;
        blast_tail = node;
    }
    else
    {
        blast_tail->next = node;
        blast_tail = node;
    }
    return 1;
}


void blast_queue_blast_data(unsigned int driver_number,
                            unsigned char *data,
                            unsigned int length,
                            ir_blast_setup_t setup)
{
    if (blast_add_list_node(driver_number,data,length,setup))
    {
        if (!(flags&BLAST_FLAGS_IN_USE))
        {
            blast_start();
        }
    }
}

void blast_next_block(void)
{
    unsigned int full_packets, remaining_bytes;
    unsigned int loop;

DEBUGFN(3,db_printf("\n\nin blast_next_block\n"));
    if (blast_list == NULL)
    {
        return;
    }
DEBUGFN(3,db_printf("block = %d, block_count = %d\n",blast_list->block,blast_list->header->block_count));

    /*
        If this is the first block, we need to sent an IR Blast
        Setup packet. Otherwise, send an IR Blast Continuation
        packet.
    */
    if (blast_list->block == 0)
    {
        /*
            Send a blast setup packet
        */
        ir_blasting_setup_t setup;

        if (blast_list->header->block_count > 1)
        {
            setup.bits.tbc = 1;
        }
        setup.bits.delay = blast_list->setup.bits.delay;
        setup.bits.ports = (blast_list->setup.bits.p2 << 2) |
                           (blast_list->setup.bits.p1 << 1) |
                           blast_list->setup.bits.p0;

        setup.bits.leds = blast_list->setup.bits.leds;

        setup.bits.number = blast_list->header->block_sizes[0] & 0x7f;
        setup.bits.repeat = blast_list->setup.bits.repeat;
        send_ir_blasting_setup(setup);

    }
    else
    {
        /*
            Any more data to blast?
        */
        if (blast_list->block < blast_list->header->block_count)
        {
            /*
                Send a blast continuation packet
            */
            ir_blasting_continuation_t cont;
            if (blast_list->block < blast_list->header->block_count-1)
            {
                cont.bits.tbc = 1;
            }
            cont.bits.number = blast_list->header->block_sizes[blast_list->block] & 0x7f;
            send_ir_blasting_continuation(cont);
        }
        else
        {
            return;
        }
    }

    /*
        Now send the data for this block.
        Do this by sending a load of full packets,
        then a fractional one if required
    */

    remaining_bytes = ((blast_list->header->block_sizes[blast_list->block]+1)>>1)%3;
    full_packets = (((blast_list->header->block_sizes[blast_list->block]+1)>>1)-remaining_bytes)/3;
    DEBUGFN(3,db_printf("Full=%d, remain=%d\n",full_packets,remaining_bytes));
    for (loop = 0;loop < full_packets;loop++)
    {
        send_ir_blasting_data(blast_list->data);
        blast_list->data +=3;
    }

    if (remaining_bytes != 0)
    {
        send_ir_blasting_data(blast_list->data);
        blast_list->data += remaining_bytes;
    }

    blast_list->block++;
    if (blast_list->block >= blast_list->header->block_count-1)
    {
        /*
            The blast is finished.
        */
        flags|=BLAST_FLAGS_END_OF_DATA;
    }

}
