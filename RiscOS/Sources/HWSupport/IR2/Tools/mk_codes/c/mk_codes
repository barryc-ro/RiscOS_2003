#include <stdio.h>
#include <string.h>

#include "types.h"

device_type_t device_types[]=
{
    {1,"Video Recorder"},
    {2,"Television"},
    {3,"Hi-fi"}
};

manufacturer_t manufacturers[]=
{
    {1,"Philips"},
    {2,"Sony"},
    {3,"Grundig"},
    {4,"Technics"},
    {5,"RCA"},
    {6,"Furguson"}
};

device_manufacturer_t device_manufacturers[]=
{
    {1,3,{2,5,6}},
    {2,5,{1,2,3,5,6}},
    {3,4,{1,2,3,4}}
};

device_manufacturer_model_list_t model_list[]=
{
    {1,2,2,{1,2}},
    {1,5,1,{3}},
    {1,6,1,{4}},

    {2,1,1,{5}},
    {2,2,1,{6}},
    {2,3,1,{7}},
    {2,4,1,{8}},
    {2,5,1,{9}},

    {3,1,1,{10}},
    {3,2,1,{11}},
    {3,3,1,{12}},
    {3,4,1,{13}},

};
model_code_t model_codes[]=
{
    {1,2,{8,9}},
    {2,9,{1,2,3,4,5,6,7,8,9}},
    {3,0},
    {4,0},
    {5,0},
    {6,0},
    {7,0},
    {8,0},
    {9,0},
    {10,0},
    {11,0},
    {12,0},
    {13,0},
    {14,0},
    {15,0},
    {16,0},
    {17,0},
    {18,0},
    {19,0},
    {20,0}
};


model_t models[]=
{
    {1,"Model 1"},
    {2,"Model 2"},
    {3,"Model 3"},
    {4,"Model 4"},
    {5,"Model 5"},
    {6,"Model 6"},
    {7,"Model 7"},
    {8,"Model 8"},
    {9,"Model 9"},
    {10,"Model 10"},
    {11,"Model 11"},
    {12,"Model 12"},
    {13,"Model 13"},
    {14,"Model 14"},
    {15,"Model 15"},
    {16,"Model 16"},
    {17,"Model 17"},
    {18,"Model 18"},
    {19,"Model 19"},
    {20,"Model 20"}
};


code_t codes[]=
{
    {1,"Play"},
    {2,"Record"},
    {3,"Rewind"},
    {4,"Forward"},
    {5,"Stop"},
    {6,"Pause"},
    {7,"Eject"},
    {8,"Channel +"},
    {9,"Channel -"}
};

blast_code_t blast_codes[]=
{
    {1,8,4,"M1B8"},
    {1,9,4,"M1B9"},
    {2,1,4,"M2B1"},
    {2,2,4,"M2B2"},
    {2,3,4,"M2B3"},
    {2,4,4,"M2B4"},
    {2,5,4,"M2B5"},
    {2,6,4,"M2B6"},
    {2,7,4,"M2B7"},
    {2,8,4,"M2B8"},
    {2,9,4,"M2B9"}
};


#define DEVICE_TYPE_COUNT (sizeof(device_types)/sizeof(device_type_t))
#define MANUFACTURER_COUNT (sizeof(manufacturers)/sizeof(manufacturer_t))
#define DEVICE_MANUFACTURER_COUNT (sizeof(device_manufacturers)/sizeof(device_manufacturer_t))


#define ROUND_UP(x) ((x+3u)&(~3u))


FILE *fp;

void write_word(unsigned int word)
{
    fwrite(&word,4,1,fp);
}

void write_string(char *string)
{
    unsigned int size;
    unsigned int pad;

    size = strlen(string)+1;
    fwrite(string,size,1,fp);
    pad = (4-(size&3))&3;

    for (;pad!=0; pad--)
    {
        fputc(0,fp);
    }

}


int main(void)
{
    header_t h;
    unsigned int loop,loop2;
    unsigned int offset,size;

    /*
        Open the file.
    */
    fp = fopen("codes","wb");
    if (fp == NULL)
    {
        printf("Failed to open file!");
        return 1;
    }



    /*
        Calculate the sizes and offsets for the header.
    */
    h.dtt_offset = sizeof(header_t);
    h.dtt_size = 4+(4*2*DEVICE_TYPE_COUNT);
    for (loop = 0; loop < DEVICE_TYPE_COUNT; loop++)
    {
        h.dtt_size += ROUND_UP(strlen(device_types[loop].device_name)+1);
    }


    h.mft_offset = h.dtt_offset + h.dtt_size;
    h.mft_size = 4+(4*2*MANUFACTURER_COUNT)+(4*3*DEVICE_MANUFACTURER_COUNT);
printf("%x\n",h.mft_size);
    for (loop = 0; loop < DEVICE_MANUFACTURER_COUNT; loop ++)
    {
        h.mft_size += 4*(device_manufacturers[loop].manufacturer_count);
    }
printf("%x\n",h.mft_size);

    for (loop = 0; loop < MANUFACTURER_COUNT; loop ++)
    {
        h.mft_size += ROUND_UP(strlen(manufacturers[loop].manufacturer_name)+1);
    }
printf("%x\n",h.mft_size);

    h.mot_offset = h.mft_offset + h.mft_size;


    /*
        Write the header.
    */
    write_word(h.dtt_offset);
    write_word(h.dtt_size);

    write_word(h.mft_offset);
    write_word(h.mft_size);

    write_word(h.mot_offset);
    write_word(h.mot_size);

    write_word(h.cot_offset);
    write_word(h.cot_size);

    write_word(h.mct_offset);
    write_word(h.mct_size);


    /*
        Write the device types table.
    */
    write_word(DEVICE_TYPE_COUNT);

    offset = h.dtt_offset+4+(4*2*DEVICE_TYPE_COUNT);
    for (loop = 0; loop < DEVICE_TYPE_COUNT; loop++)
    {
        write_word(device_types[loop].device_number);
        write_word(offset);
        offset+=ROUND_UP(strlen(device_types[loop].device_name)+1);
    }

    for (loop = 0; loop < DEVICE_TYPE_COUNT; loop++)
    {
        write_string(device_types[loop].device_name);
    }

    /*
        Write the manufacturers table.
    */
    write_word(MANUFACTURER_COUNT);

    offset = h.mft_offset + 4+(4*2*MANUFACTURER_COUNT)+(4*3*DEVICE_MANUFACTURER_COUNT);
    for (loop = 0; loop < DEVICE_MANUFACTURER_COUNT; loop ++)
    {
        offset += 4*(device_manufacturers[loop].manufacturer_count);
    }

    for (loop = 0; loop < MANUFACTURER_COUNT; loop ++)
    {
        write_word(manufacturers[loop].manufacturer_number);
        write_word(offset);
        offset += ROUND_UP(strlen(manufacturers[loop].manufacturer_name)+1);
    }

    offset = h.mft_offset + 4+(4*2*MANUFACTURER_COUNT)+(4*3*DEVICE_MANUFACTURER_COUNT);
    for (loop = 0; loop < DEVICE_MANUFACTURER_COUNT; loop++)
    {
        write_word(device_manufacturers[loop].device_number);
        write_word(offset);
        write_word(device_manufacturers[loop].manufacturer_count);
        offset += 4*(device_manufacturers[loop].manufacturer_count);
    }

    for (loop = 0; loop < DEVICE_MANUFACTURER_COUNT; loop ++)
    {
        for (loop2 = 0; loop2 < device_manufacturers[loop].manufacturer_count; loop2++)
        {
            write_word(device_manufacturers[loop].manufacturer_numbers[loop2]);
        }
    }

    for (loop = 0; loop < MANUFACTURER_COUNT; loop ++)
    {
        write_string(manufacturers[loop].manufacturer_name);
    }



    fclose (fp);
    return 0;
}

