#include <stdio.h>
#include <string.h>

#include "registry.h"



static registry_entry_t registry[] =
{
    {0x00000000,0x00000001,"Standard A-Z Handset"},
    {0x00000001,0x00000003,"Standard A-Z Handset with I-Point"},
    {0x00000002,0x00000002,"Relative Pointer + Buttons (Navis)"},
    {0x00000003,0x00000003,"A-Z with relative pointer"},
    {0x00000004,0x00000000,"Relative pointer and buttons for Trackboard"},
    {0x00000006,0x00000003,"Akai tablet keyboard"},
    {0x00000008,0x00000003,"Akai Relative pointer & buttons"},
    {0x00000009,0x00000003,"I-Point keyboard"},
    {0x0000000a,0x00000003,"I-Point relative pointer and buttons"},
    {0x0000000b,0x00000003,"Akai multiway switch keyboard"},
    {0x0000000c,0x00000003,"Akai multiway switch relative pointer and buttons"},
    {0x0000000d,0x00000005,"RCA CRK93H1 Handset"},
    {0x0000000e,0x00000003,"RCA IRKB4 Keyboard"},
    {0x0000000f,0x00010000,"Curtis Mathes Handset"}

};


static driver_entry_t drivers[] =
{
    {0x00000000,0,"Relative pointer driver",   "IRDrivers:IRRelPtr"},
    {0x00000001,0,"Model 1 A-Z Handset driver","IRDrivers:IRHandset"},
    {0x00000002,0,"Model 1 Keyboard driver",   "IRDrivers:IRKeyboard"},
    {0x00000003,0,"Display dump",              "IRDrivers:IRDisplay"},
    {0x00000004,0,"Generic IR Blasting driver","IRDrivers:IRBlast"},
    {0x00000005,0,"RCA CRK93H1 Handset driver","IRDrivers:CRK93H1"},
    {0x00000006,0,"RCA IR Blasting driver",    "IRDrivers:RCABlast"},
    {0x00000007,0,"Default driver",            "IRDrivers:IRDefault"},

    {0x00010000,0,"Curtis Mathes Handset driver","IRDrivers:IRHandsetC"}





};

static unsigned int driver_entry_count = sizeof(drivers) / sizeof(driver_entry_t);
static unsigned int registry_entry_count = sizeof(registry) / sizeof(registry_entry_t);

#define ROUND_UP(x) ((x+3u)&(~3u))


FILE *fp;

void write_word(unsigned int word)
{
    fwrite(&word,4,1,fp);
}

void write_string(char *string)
{
    unsigned int size;
    unsigned int pad;

    size = strlen(string)+1;
    fwrite(string,size,1,fp);
    pad = (4-(size&3))&3;

    for (;pad!=0; pad--)
    {
        fputc(0,fp);
    }

}


int main(void)
{
    registry_file_header_t h;
    unsigned int loop;
    unsigned int offset,len;

    /*
        Open the file.
    */
    fp = fopen("data.registry","wb");
    if (fp == NULL)
    {
        printf("Failed to open file!");
        return 1;
    }



    /*
        Calculate the sizes and offsets for the header.
    */
    h.version = 1;
    h.reg_offset = sizeof(registry_file_header_t);
    h.reg_size = 4+(4*4*registry_entry_count);

    h.drv_offset = h.reg_offset + h.reg_size;
    h.drv_size = 4+(4*6*driver_entry_count);

    h.str_offset = h.drv_offset + h.drv_size;
    h.str_size = 0;

    for (loop = 0; loop < registry_entry_count; loop ++)
    {
        h.str_size += ROUND_UP(strlen(registry[loop].description)+1);
    }

    for (loop = 0; loop < driver_entry_count; loop++)
    {
        h.str_size += ROUND_UP(strlen(drivers[loop].description)+1);
        h.str_size += ROUND_UP(strlen(drivers[loop].filename)+1);
    }


    /*
        Write the header.
    */
    write_word(h.version);

    write_word(h.reg_offset);
    write_word(h.reg_size);

    write_word(h.drv_offset);
    write_word(h.drv_size);

    write_word(h.str_offset);
    write_word(h.str_size);

    offset = h.str_offset;

    /*
        Write the registry table.
    */
    write_word(registry_entry_count);

    for (loop = 0; loop < registry_entry_count; loop++)
    {
        write_word(registry[loop].registry_number);
        write_word(registry[loop].driver_number);
        write_word(offset);
        len = strlen(registry[loop].description)+1;
        write_word(len);
        offset += ROUND_UP(len);
    }

    /*
        Write the driver table.
    */
    write_word(driver_entry_count);

    for (loop = 0; loop < driver_entry_count; loop++)
    {
        write_word(drivers[loop].driver_number);
        write_word(drivers[loop].revision_number);
        write_word(offset);
        len = strlen(drivers[loop].description)+1;
        write_word(len);
        offset += (ROUND_UP(len));
        write_word(offset);
        len = strlen(drivers[loop].filename)+1;
        write_word(len);
        offset += (ROUND_UP(len));
    }


    /*
        Write the string table.
    */
    for (loop = 0; loop < registry_entry_count; loop++)
    {
        write_string(registry[loop].description);
    }

    for (loop = 0; loop < driver_entry_count; loop++)
    {
        write_string(drivers[loop].description);
        write_string(drivers[loop].filename);
    }


    fclose (fp);
    return 0;
}

