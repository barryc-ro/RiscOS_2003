#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"

static ir_director_functions_t funcs;
static void *director_pw;

_kernel_oserror *ir_initialise(ir_client_callbacks_t *callbacks,void *pw)
{
    ir_director_functions_t *pfuncs;
    _kernel_oserror *err;
    DEBUGFN(3,db_printf("ir_initialise:driver %d\n",ir_driver_id));
    /*
        Call the SWI IRDirector_Initialise which is handled by the director.
    */
    err = _swix(IRDirector_Initialise,_INR(0,2)|_OUTR(0,1),ir_driver_id,callbacks,pw,&pfuncs,&director_pw);


    if (!err)
    {
        DEBUGFN(3,db_printf("SWI returned NULL\n"));
        funcs = *pfuncs;
    }
    else
    {
        DEBUGFN(1,db_printf("SWI returned %d:%s\n",err->errnum,err->errmess));
    }

    return err;
}

_kernel_oserror *ir_finalise(void)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    call_function(funcs.ir_finalise,&r,director_pw);

    return NULL;
}





void ir_blast(void *data, unsigned int length, ir_blast_setup_t setup)
{
    _kernel_swi_regs r;

    r.r[0] = ir_driver_id;
    r.r[1] = (int)data;
    r.r[2] = length;
    r.r[3] = setup.word;
    call_function(funcs.ir_blast,&r,director_pw);
}

void ir_cancel_blast(void)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    call_function(funcs.ir_cancel_blast,&r,director_pw);
}

void ir_data_download(void *data, unsigned int length)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    r.r[1] = (int)data;
    r.r[2] = length;

    call_function(funcs.ir_data_download,&r,director_pw);
}

void ir_cancel_data_download(void)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    call_function(funcs.ir_cancel_data_download,&r,director_pw);
}

void ir_request_report_packet(unsigned char report_code)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    r.r[1] = report_code;
    call_function(funcs.ir_request_report_packet,&r,director_pw);
}
