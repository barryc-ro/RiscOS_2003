/*
 * 	driver.c	- blasting driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "driver.h"
#include "veneers.h"

/*
 * Globals
 */
unsigned int ir_driver_id = 0x00000004;
static ir_client_callbacks_t callbacks =
{
    veneer_accept_data_packet,
    veneer_accept_report_packet,
    0
};

static unsigned char flags;

static unsigned char blast_data[]=
{
    3,
    11,6,11,
    'C','h','r','i','s',' ','B','e','r','r','y',
    's','m','e','l','l','s',
    'r','e','a','l','l','y',' ','b','a','d','!'
};

_kernel_oserror *driver_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;

    callbacks.notify_flags.bits.notify_on_comp_status_report=1;

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
        ir_blast_setup_t setup;
        setup.word = 0xffffffff;
        ir_blast(blast_data,sizeof(blast_data),setup);
        ir_blast(blast_data,sizeof(blast_data),setup);
    }
    return err;
}

_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}




void driver_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    NOT_USED(registry_number);
    NOT_USED(tag_number);
    NOT_USED(data[0]);

    DEBUGFN(3,db_printf("IRBlast:driver_accept_data_packet called!\n"));

}




void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    if (report_code == 3)/* completion status */
    {
        if (data[0]&0x20)/* blast complete */
        {
            DEBUGFN(3,db_printf("Blasting complete!\n"));
        }
    }
}


void generic_accept_data_packet(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[2];

    driver_accept_data_packet((unsigned int)r->r[0],
                              (unsigned char)r->r[1],
                              data);
}



void generic_accept_report_packet(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[1];
    driver_accept_report_packet((unsigned int)r->r[0],
                                data);
}

