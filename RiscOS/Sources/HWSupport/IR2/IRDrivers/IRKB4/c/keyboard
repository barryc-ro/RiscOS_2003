/*
 * 	keyboard.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"
#include "irqs.h"

#include "keyboard.h"
#include "module.h"

extern void *private_word;
extern unsigned int flags;

/*
 * lookup tables for keyboard scancodes
 * (worked out from Sejin UK kbd model SWK-8695WT)
 */
static unsigned char keyboard_table[2][KEYBOARDCODES] =
{
  /* No modifiers */
    {
        NK,	NK,	NK,	NK,	/*  0:					*/
        NK,	NK,	NK,	NK,	/*  4:					*/
        NK,	NK,	NK,	NK,	/*  8:					*/
        NK,	NK,	NK,	NK,	/*  C:					*/
        0x52,	0x3C,	0x27,	0x4e,	/* 10:	B	A	Q	Z	*/
        NK,	0x00,	0x11,	0x90,	/* 14:	Func	Esc	1	Fwd	*/
        0x26,	0x3D,	0x28,	0x4F,	/* 18:	Tab	S	W	X	*/
        PWR,	0x10,	0x12,	0x5D,	/* 1C:	Power	`~	2@	Caps	*/
        0x64,	0x3E,	0x29,	0x50,	/* 20:	Right	D	E	C	*/
        NK,	NK,	0x13,	0x88,	/* 24:	AltL	Ctrl	3#	Search	*/
        0x5F,	0x3F,	0x2A,	0x51,	/* 28:	Space	F	R	V	*/
        0x15,	0x40,	0x14,	0x2B,	/* 2C:	5%	G	4$	T	*/
        0x46,	0x42,	0x2D,	0x54,	/* 30:	'@	J	U	M	*/
        0x16,	0x41,	0x17,	0x2C,	/* 34:	6^	H	7&	Y	*/
        NK,	NK,	NK,	NK,	/* 38:	Shift			Shift	*/
        0x94,	NK,	0x92,	NK,	/* 3C:	Guide		Rec		*/
        0x1B,	0x43,	0x2e,	0x55,	/* 40:	-_	K	I	,<	*/
        0x82,	0x83,	0x18,	0x86,	/* 44:	Sound	Who	8*	Save	*/
        0x31,	0x44,	0x2F,	0x56,	/* 48:	[{	L	O	.>	*/
        0x0D,	0x84,	0x19,	0x85,	/* 4C:	Print	Reload	9(	Fav	*/
        0x47,	0x45,	0x30,	0x57,	/* 50:	Return	;:	P	/?	*/
        0x1C,	0x33,	0x1A,	0x87,	/* 54:	=+	#~	0)	Goto	*/
        0x93,	0x8B,	0x32,	0x4D,	/* 58:	Menu	Info	]}	\|	*/
        0x1E,	0x59,	0x63,	0x89,	/* 5C:	BkSp	Up	Down	Send	*/
        0x62,	0x8C,	0x20,	0x53,	/* 60:	Left	Go Back	Home	N	*/
        0x21,	0x36,	NK,	0x8A,	/* 64:	PgUp	PgDn		Mail	*/
        NK,	0x91,	NK,	NK,	/* 68:		Stop			*/
        NK,	0x8E,	0x8D,	0x8F	/* 6C:		Rev	Pause	Play	*/
        				/* 70:					*/
        				/* 74:					*/
        				/* 78:					*/
        				/* 7C:					*/
    },

  /* +Fn */
    {
        NK,	NK,	NK,	NK,	/*  0:					*/
        NK,	NK,	NK,	NK,	/*  4:					*/
        NK,	NK,	NK,	NK,	/*  8:					*/
        NK,	NK,	NK,	NK,	/*  C:					*/
        0x52,	0x3C,	0x27,	0x4e,	/* 10:	B	A	Q	Z	*/
        NK,	0x00,	0x01,	0x90,	/* 14:	Func	Esc	1	Fwd	*/
        0x26,	0x3D,	0x28,	0x4F,	/* 18:	Tab	S	W	X	*/
        PWR,	0x10,	0x02,	0x5D,	/* 1C:	Power	`~	2@	Caps	*/
        0x64,	0x3E,	0x29,	0x50,	/* 20:	Right	D	E	C	*/
        NK,	NK,	0x03,	0x88,	/* 24:	AltL	Ctrl	3#	Search	*/
        0x5F,	0x3F,	0x2A,	0x51,	/* 28:	Space	F	R	V	*/
        0x05,	0x40,	0x04,	0x2B,	/* 2C:	5%	G	4$	T	*/
        0x46,	0x42,	0x2D,	0x54,	/* 30:	'@	J	U	M	*/
        0x06,	0x41,	0x07,	0x2C,	/* 34:	6^	H	7&	Y	*/
        NK,	NK,	NK,	NK,	/* 38:	Shift			Shift	*/
        0x94,	NK,	0x92,	NK,	/* 3C:	Guide		Rec		*/
        0x1B,	0x43,	0x2e,	0x55,	/* 40:	-_	K	I	,<	*/
        0x82,	0x83,	0x08,	0x86,	/* 44:	Sound	Who	8*	Save	*/
        0x31,	0x44,	0x2F,	0x56,	/* 48:	[{	L	O	.>	*/
        0x0D,	0x84,	0x09,	0x85,	/* 4C:	Print	Reload	9(	Fav	*/
        0x47,	0x45,	0x30,	0x57,	/* 50:	Return	;:	P	/?	*/
        0x1C,	0x33,	0x0A,	0x87,	/* 54:	=+	#~	0)	Goto	*/
        0x93,	0x8B,	0x32,	0x4D,	/* 58:	Menu	Info	]}	\|	*/
        0x1E,	0x59,	0x63,	0x89,	/* 5C:	BkSp	Up	Down	Send	*/
        0x62,	0x8C,	0x20,	0x53,	/* 60:	Left	Go Back	Home	N	*/
        0x21,	0x36,	NK,	0x8A,	/* 64:	PgUp	PgDn		Mail	*/
        NK,	0x91,	NK,	NK,	/* 68:		Stop			*/
        NK,	0x8E,	0x8D,	0x8F	/* 6C:		Rev	Pause	Play	*/
        				/* 70:					*/
        				/* 74:					*/
        				/* 78:					*/
        				/* 7C:					*/
    }};




extern void keyboard_power_entry(void);
int keyboard_power_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED(r);
    NOT_USED(pw);
DEBUGFN(3, db_printf("Toggling standby\n"));

    if (flags&KEYBOARD_FLAGS_STANDBY_MODE)
    {
        _swix(Standby_Online, _IN(0), 0);
    }
    else
    {
        _swix(Standby_Standby, _IN(0), 0);
    }


    return 1;
}


/*
 * Convert an IR keyboard scan code to a low-level key number (see PRM 1-156).
 * Returns -1 if the supplied code & mods does not map to a key.
 * Handles Standby keypress internally (if present on keyboard).
 */
int keyboard_lookup(int code, int mods, state_t *device_state)
{
    int key_no;

/*
    DEBUGFN(2,db_printf("code = %d, mods = %d\n",code,mods));
*/

    if (code >= KEYBOARDCODES)
    {
        DEBUGFN(2,db_printf("bad code\n"));
        return -1;
    }

    if (mods & KEY_MOD_FN)
    {
        key_no = keyboard_table[1][code];
    }
    else
    {
        key_no = keyboard_table[0][code];
    }

    if (key_no == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (key_no == PWR)
    {
        /*
            If Ctrl is held as well as Power,
            reboot
        */
        if (mods & KEY_MOD_CTRL)
        {
            return 0x0f;
        }

        /*
            Toggle standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        _swix(OS_AddCallBack,_INR(0,1),keyboard_power_entry,private_word);
        return PWR;
    }
    else
    {
        return key_no;
    }
}
