/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "handset.h"
#include "veneers.h"

/*
 * Globals
 */
unsigned int ir_driver_id = 0x00000001;
static ir_client_callbacks_t callbacks =
{
    handset_accept_data_packet,
    handset_accept_report_packet,
    0
};

unsigned char flags=0;
static unsigned char handset_table[NUMTABLES][3][HANDSETCODES] =
{
        /*
            Table 0
        */
        {
            /*
                No modifiers
            */
            {
                0x0D, 0xC2, 0x9E, 0x9F,		/* Sel   Open  PgDn  PgUp  */
                0x8D, 0x80, ':',  '@',		/* Right Print :     @     */
                PWR,  0xC3, 0x1E, 0x8E,		/* Power Stop  Home  Down  */
                0x8C, 0x8F, '/',  '.',		/* Left  Up    /     .     */
                0x0D, 0xC5, 0xC4, 0xBE,		/* Sel   Forw  Back  LnDn  */
                0xBF, 0xC1, 0xC6, 0xC0,		/* LnUp  Menu  Tool  Help  */
                NK,   'y',  't',  'o',		/* Ctrl  y     t     o     */
                'j',  'e',  '0',  '5',		/* j     e     0     5     */
                8,    'x',  's',  'n',		/* Del   x     s     n     */
                'i',  'd',  '9',  '4',		/* i     d     9     4     */
                'z',  'w',  'r',  'm',		/* z     w     r     m     */
                'h',  'c',  '8',  '3',		/* h     c     8     3     */
                ' ',  'v',  'q',  'l',		/* Space v     q     l     */
                'g',  'b',  '7',  '2',		/* g     b     7     2     */
                NK,   'u',  'p',  'k',		/* Shift u     p     k     */
                'f',  'a',  '6',  '1'		/* f     a     6     1     */
            },

            /*
                + Shift
            */
            {
                0x0A, NK,   0x8E, 0x8F,		/* Sel   Open  PgDn  PgUp  */
                0x9D, 0x90, ',',  '*',		/* Right Print :     @     */
                PWR,  NK,   0x1E, 0x9E,		/* Power Stop  Home  Down  */
                0x9C, 0x9F, '_',  '=',		/* Left  Up    /     .     */
                0x0A, NK,   NK,   0xAE,		/* Sel   Forw  Back  LnDn  */
                0xAF, NK,   NK,   NK,		/* LnUp  Menu  Tool  Help  */
                NK,   'Y',  'T',  'O',		/* Ctrl  y     t     o     */
                'J',  'E',  ')',  '%',		/* j     e     0     5     */
                0x7F, 'X',  'S',  'N',		/* Del   x     s     n     */
                'I',  'D',  '(',  '$',		/* i     d     9     4     */
                'Z',  'W',  'R',  'M',		/* z     w     r     m     */
                'H',  'C',  '?',  '£',		/* h     c     8     3     */
                ' ',  'V',  'Q',  'L',		/* Space v     q     l     */
                'G',  'B',  '&',  '"',		/* g     b     7     2     */
                NK,   'U',  'P',  'K',		/* Shift u     p     k     */
                'F',  'A',  '^',  '!'		/* f     a     6     1     */
            },

            /*
                + Ctrl
            */
            {
                0x0A, NK,   0xBE, 0xBF,		/* Sel   Open  PgDn  PgUp  */
                0xAD, 0xA0, '>',  '<',		/* Right Print :     @     */
                PWR,  NK,   0x1E, 0xAE,		/* Power Stop  Home  Down  */
                0xAC, 0xAF, ';',  '+',		/* Left  Up    /     .     */
                0x0A, NK,   NK,   0x9E,		/* Sel   Forw  Back  LnDn  */
                0x9F, NK,   NK,   NK,		/* LnUp  Menu  Tool  Help  */
                NK,   0x19, 0x14, 0x0f,		/* Ctrl  y     t     o     */
                0x0A, 0x05, ']',  '\'',		/* j     e     0     5     */
                0x7F, 0x18, 0x13, 0x0E,		/* Del   x     s     n     */
                0x09, 0x04, '[',  '~', 		/* i     d     9     4     */
                0x1A, 0x17, 0x12, 0x0D,		/* z     w     r     m     */
                0x08, 0x03, '}',  '\\', 	/* h     c     8     3     */
                0x20, 0x16, 0x11, 0x0C,		/* Space v     q     l     */
                0x07, 0x02, '{',  '#', 		/* g     b     7     2     */
                NK,   0x15, 0x10, 0x0B,		/* Shift u     p     k     */
                0x06, 0x01, '-',  0x1B		/* f     a     6     1     */
            }
        }
};


static void *private_word;

_kernel_oserror *handset_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;

    if (reason == 0)
    {
        unsigned int state;

        private_word = pw;

        _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        if (state&Standby_InStandby)
        {
            flags |= HANDSET_FLAGS_STANDBY_MODE;
        }
    }

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
    }
    return err;
}

_kernel_oserror *handset_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}


extern void handset_power_entry(void);
int handset_power_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED(r);
    NOT_USED(pw);
DEBUGFN(3, db_printf("Toggling standby\n"));

    if (flags&HANDSET_FLAGS_STANDBY_MODE)
    {
        _swix(Standby_Online, _IN(0), 0);
    }
    else
    {
        _swix(Standby_Standby, _IN(0), 0);
    }


    return 1;
}


/*
    Convert an IR handset scan code to a keyboard buffer code (see PRM 1-892).
    Returns -1 if the supplied table, code & mods does not map to a key.
    Handles Standby keypress internally.
*/
static int handset_lookup(int code, int mods, int tableno)
{
    int modifier, buffer_code;

    DEBUGFN(2,db_printf("code = %d, mods = %d, tableno = %d\n",code,mods,tableno));

    if ((tableno >= NUMTABLES) || (code >= HANDSETCODES))
    {
        DEBUGFN(2,db_printf("bad tableno or code\n"));
        return -1;
    }

    /*
        The handset tables only have entries for Shift or Control modifiers
    */
    switch (mods)
    {
        case 0:
        {
            modifier = 0;
            break;
        }
        case KEY_MOD_SHIFT:
        {
            modifier = 1;
            break;
        }
        case KEY_MOD_CTRL:
        {
            modifier = 2;
            break;
        }
        default:
        {
            DEBUGFN(2,db_printf("bad mods\n"));
            return -1;
        }
    }

    buffer_code = (unsigned int) handset_table[tableno][modifier][code];
    if (buffer_code == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (buffer_code == PWR)
    {
        int state;

        /*
            Toggle standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        _swix(OS_AddCallBack,_INR(0,1),handset_power_entry,private_word);

        return -1;
    }
    else
    {
        return buffer_code;
    }
}




void handset_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    unsigned int buffer_code;

    NOT_USED(registry_number);
    NOT_USED(tag_number);

    buffer_code = handset_lookup(data[1], (data[2]&0xf8)>>3,0);

    /*
        If not in Standby mode, insert buffer_code into keyboard buffer
    */
    if ((buffer_code != -1) &&
        !(flags & HANDSET_FLAGS_STANDBY_MODE))
    {
        /*
            Special case. Need to escape £ so it doesn't look like Ctrl-F3
            May need to escape other top-bit-set characters
        */
        if (buffer_code == '£')
        {
            _swix(OS_Byte, _INR(0,2), 153, 0, 0);
        }

        _swix(OS_Byte, _INR(0,2), 153, 0, buffer_code);
        DEBUGFN(2, db_printf("BufferCode: %x\n", buffer_code));
    }
}


void handset_accept_report_packet(unsigned char report_code,
                                  unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}
