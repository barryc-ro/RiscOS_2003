#ifndef MODULE_H
#define MODULE_H

/*
 * module.h	- Public interface of module.c
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */



/* Misc RiscOS things */
#define Service_ModeChange	0x46
#define Service_Standby 0xad

#define OSArgs_Extent		2
#define OSArgs_IOCtl		9

#define OSGBPB_Read		4

#define EventV			0x10

#define KeyV			0x13
#define Key_KeyboardPresent	0
#define Key_KeyUp		1
#define Key_KeyDown		2
#define Key_Notify		3
#define Key_Enable		4
#define Key_CtrlL		0x3b
#define Key_ShiftL		0x4c
#define Key_AltL		0x5e
#define Key_Select		0x70
#define Key_Menu		0x71
#define Key_Adjust		0x72

#define KEYV_DummyKeyboard	11

#define UpcallV			0x1d
#define UpCall_File		0x03
#define UpCall_File_Closing	259
#define UpCall_Online		0x0d
#define UpCall_DeviceRxDataPresent	0x0f
#define UpCall_DeviceThresAbove	0x10

#define PointerV		0x26
#define Pointer_Status		0
#define Pointer_Enumerate	1
#define Pointer_Selected	2

#define TinySupport_Init	0x82c40
#define TinySupport_Die		0x82c41
#define TinySupport_Init2	0x82c42
#define TinySupport_Share	0x82c43



/*
 * Public functions
 */
extern _kernel_oserror *module_finalise( char *cmd_tail, int podule_base, void *pw);
extern _kernel_oserror *module_initialise(char *cmd_tail, int podule_base, void *pw);
extern _kernel_oserror *module_cli_handler(char *arg_string, int arg_count,
                                           int cmd_no, void *pw);
extern int module_service(int service_no, _kernel_swi_regs *r, void *pw);
extern int module_upcall_entry(_kernel_swi_regs *r, void *pw);
extern int module_upcall_handler(_kernel_swi_regs *r, void *pw);
extern int module_timeout_handler(_kernel_swi_regs *r, void *pw);
extern int module_keyv_entry(_kernel_swi_regs *r, void *pw);
extern int module_keyv_handler(_kernel_swi_regs *r, void *pw);
extern int module_pointerv_entry(_kernel_swi_regs *r, void *pw);
extern int module_pointerv_handler(_kernel_swi_regs *r, void *pw);
//extern int module_openin_entry(_kernel_swi_regs *r, void *pw);
extern int module_event_entry(_kernel_swi_regs *r, void *pw);

#endif

