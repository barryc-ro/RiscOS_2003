/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"
#include "irqs.h"

#include "keyboard.h"
#include "module.h"


/*
 * Globals
 */
unsigned int ir_driver_id = 0x00000002;
unsigned int ir_driver_revision = 0x0105;

static ir_client_callbacks_t callbacks =
{
    driver_accept_data_packet,
    driver_accept_report_packet,
    0
};

unsigned char flags=0;

static tag_info_t tags[NUM_TAGS];


/*
    reason: 0 = startup
            1 = re-initiailise after service call from IR Director
*/
_kernel_oserror *driver_initialise(void *pw, unsigned int reason)
{
    _kernel_oserror *err=NULL;
    unsigned int loop;


    if (reason == 0)
    {

        unsigned int state;

        err = _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        if (err != NULL)
        {
            err = NULL;
            state = 0;
        }

        if (state&Standby_InStandby)
        {
            flags |= KEYBOARD_FLAGS_STANDBY_MODE;
        }


        err = _swix(OS_Claim, _INR(0,2),KeyV,module_keyv_entry,pw);
        if (err)
        {
            DEBUGFN(3,db_printf("Couldn't claim KeyV!(%d:%s)\n",err->errnum,err->errmess));
            return err;
        }


        for (loop = 0; loop< NUM_TAGS; loop++)
        {
            tags[loop].PrivateWord = pw;
            tags[loop].tag_number = loop;
        }
    }

    err = ir_initialise(&callbacks,pw);


    if (reason == 0)
    {
        if (!err)
        {
            err = _swix(OS_CallAVector,
                        _INR(0,1)|_IN(9),
                        Key_KeyboardPresent,
                        2,
                        KeyV);
        }

#ifdef US_LAYOUT
        if (!err)
        {
            unsigned int kbstat;
            /*
                Switch off the NumLock key, 'cos it screws up the
                keyboard otherwise.
            */

            err = _swix(OS_Byte,_INR(0,2)|_OUT(1),202,0,255,&kbstat);
            if (err)
            {
                DEBUGFN(3,db_printf("Couldn't read kb status!(%d:%s)\n",err->errnum,err->errmess));
                return err;
            }
            kbstat |=4;

            err = _swix(OS_Byte,_INR(0,2),202,kbstat,1);
            if (err)
            {
                DEBUGFN(3,db_printf("Couldn't write kb status!(%d:%s)\n",err->errnum,err->errmess));
                return err;
            }

            err = _swix(OS_Byte,_IN(0),118);
            if (err)
            {
                DEBUGFN(3,db_printf("Couldn't set Keyboard LEDs!(%d:%s)\n",err->errnum,err->errmess));
                return err;
            }
        }
#endif
    }
    return err;
}

_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
        err = _swix(OS_Release, _INR(0,2), KeyV, module_keyv_entry, pw);
    }
    return err;
}



/*------------------------------------------------------------------------------
 *
 *	Send key up / downs
 */
void ir_keyb(int direction, unsigned int keyno, unsigned int mods)
{
    DEBUGFN(2, db_printf("%s: %x,%x\n",
                         (direction==Key_KeyUp ? "KeyUp" : "KeyDown"),
                         keyno, mods));
    if (direction == Key_KeyUp)
    {
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, keyno, KeyV);
    }

    if (mods & KEY_MOD_CTRL)
    {
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, Key_CtrlL, KeyV);
    }
    if (mods & KEY_MOD_SHIFT)
    {
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, Key_ShiftL, KeyV);
    }
    if (mods & KEY_MOD_ALT)
    {
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, Key_AltL, KeyV);
    }

    if (direction == Key_KeyDown)
    {
        _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, keyno, KeyV);
    }
}


/*------------------------------------------------------------------------------
 *
 *	Device has timed out, do appropriate cleanup.
 */
void ir_timeout(int tag_number)
{
    context_t *context = &(tags[tag_number].context);

    DEBUGFN(1, db_printf("Device with tag %d timed out!\n", tag_number));

    /*
        Timeout happened while being cancelled?
    */
    if (context->word != INACTIVE)
    {
        ir_keyb(Key_KeyUp, context->keyboard.keyno, context->keyboard.mods);
        context->word = INACTIVE;
    }
    else
    {
        DEBUGFN(2, db_printf("no context to clean up!\n"));
    }
}


/*------------------------------------------------------------------------------
 *
 *	Set a device timeout
 */
void ir_set_timeout(int tag_number, context_t context)
{
  tags[tag_number].context = context;
  _swix(OS_CallAfter,_INR(0,2),
        TIMEOUT_DELAY, timeout_preveneer, &(tags[tag_number].PrivateWord));
}


/*------------------------------------------------------------------------------
 *
 *	Cancel device timeout
 *
 * Also sets device's context to INACTIVE
 */
void ir_cancel_timeout(int tag_number)
{
  _swix(OS_RemoveTickerEvent, _INR(0,1),
        timeout_preveneer, &(tags[tag_number].PrivateWord));
  tags[tag_number].context.word = INACTIVE;
}


void driver_accept_data_packet(unsigned int registry_number,
                               unsigned char tag_number,
                               unsigned char data[3])
{
    packet_t packet;
    context_t context, *old_context = &(tags[tag_number].context);

    NOT_USED(registry_number);

    packet.byte_array[0] = data[0];
    packet.byte_array[1] = data[1];
    packet.byte_array[2] = data[2];

    context.keyboard.keyno = keyboard_lookup(packet.keyboard.scancode,
                                             packet.keyboard.mods,
                                             &tags[tag_number].device_state);


    if (context.keyboard.keyno == -1)
    {
        DEBUGFN(1, db_printf("Scancode %x, mods %x do not map to a key!\n",
                             packet.keyboard.scancode,
                             packet.keyboard.mods));

        if (old_context->word != INACTIVE)
        {
            ir_keyb(Key_KeyUp,old_context->keyboard.keyno,old_context->keyboard.mods);
            ir_cancel_timeout(tag_number);
        }
        return;
    }
    context.keyboard.mods = packet.keyboard.mods;


    /*
        Don't do anything on receipt of a packet resent due to missed ACK
    */
    if (!(packet.keyboard.resend && (old_context->word == context.word)))
    {
        if (packet.keyboard.repeat && (context.word == old_context->word))
        {
            /*
                Auto-repeat: Cancel the pending timeout, set a new one
            */
            ir_cancel_timeout(tag_number);
            ir_set_timeout(tag_number, context);
        }
        else
        {
            /*
                Don't do anything if its a resend due to lack of receipt of ACK
            */

            /*
                Different keys: Old key(s) up, cancel timeout
            */
            if (old_context->word != INACTIVE)
            {
                ir_keyb(Key_KeyUp, old_context->keyboard.keyno,
                        old_context->keyboard.mods);
                ir_cancel_timeout(tag_number);
            }

            /*
                If not in standby: New key(s) down, set timeout
            */
            if (!(flags & KEYBOARD_FLAGS_STANDBY_MODE))
            {
                ir_keyb(Key_KeyDown, context.keyboard.keyno, context.keyboard.mods);
                ir_set_timeout(tag_number, context);
            }
        }
    }
}




void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}


