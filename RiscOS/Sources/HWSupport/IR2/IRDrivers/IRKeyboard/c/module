/*
 * 	module.c	- RISC OS module related code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"
#include "ir_api.h"

#include "module.h"
#include "keyboard.h"

/*
 * Globals
 */
#if !DEBUG
static _kernel_oserror *TinyError;	/* For tinystubs */
#endif

extern unsigned int flags;

/*------------------------------------------------------------------------------
 *
 *	Module initialisation entry point.
 */
_kernel_oserror *module_initialise( char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err=NULL;/* = ir_initialise(pw);*/

    NOT_USED(cmd_tail);
    NOT_USED(podule_base);

    DEBUGFN(3,db_printf("IRKeyboard module started...\n"));
#if !DEBUG
    /* Try to use TinyStubs if possible. */
    if ( !err ) TinyError = _swix( TinySupport_Share, _IN(0), pw );
#endif

    /*
        Initialise for startup
    */
    err = driver_initialise(pw,0);

    return err;
}


/*------------------------------------------------------------------------------
 *
 *	Module finalisation entry point.
 */
_kernel_oserror *module_finalise( char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err=NULL;
    NOT_USED(cmd_tail);
    NOT_USED(podule_base);
    NOT_USED(pw);

    DEBUGFN(3,db_printf("IRKeyboard module dying...\n"));

    err = driver_finalise(pw);

#if !DEBUG
    if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif

    return err;
}

/*------------------------------------------------------------------------------
 *
 *	Module service call entry point.
 */
int module_service(int service_no, _kernel_swi_regs *r, void *pw)
{
    NOT_USED(pw);
    NOT_USED(r);

    DEBUGFN(3,db_printf("IRKeyboard module service...\n"));

    if (service_no == Service_Standby)
    {
        /*
            Service_Standby
            if bit 0 of r1 is clear, then we're coming out of standby.
        */
        if ((r->r[0]&1))
        {
            flags |= KEYBOARD_FLAGS_STANDBY_MODE;
        }
        else
        {
            flags &= ~KEYBOARD_FLAGS_STANDBY_MODE;
        }
    }
    else if (service_no == Service_IRDirectorStarting)
    {
        /*
            Re-initialise
        */
        driver_initialise(pw,1);
    }
    return -1;
}

/*------------------------------------------------------------------------------
 *
 *	Module KeyV handler.
 */
int module_keyv_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED( pw );

  DEBUGFN(3,db_printf("IRKeyboard module KeyV handler...\n"));

  /* Enable / flush drivers */
  if (r->r[0] == Key_Enable)
  {
    /* Cancel pending timeout & make us and OS forget which key(s) are down */
/* XXX Should do: */
// for tag=0 to n
//   if registry.device_type==(d_keyboard||d_pointer) && context!=INACTIVE
//     ir_timeout(tag)
//     ir_cancel_timeout(tag)
  }
  return 1;				/* Don't claim */
}


/*------------------------------------------------------------------------------
 *
 *	Module timeout handler.
 *
 * In:
 *	r0 = tag value of device that timed out.
 *
 * Called by timeout_preveneer via the C IRQ handler module_timeout_entry.
 * Must return 1 so that timeout_preveneer can restore r0.
 */
int module_timeout_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED( pw );
  ir_timeout(r->r[0]);
  return 1;
}

