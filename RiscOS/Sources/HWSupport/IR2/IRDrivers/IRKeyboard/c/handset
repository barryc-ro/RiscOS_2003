/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"
#include "irqs.h"

#include "keyboard.h"
#include "module.h"

extern unsigned int flags;

static unsigned char handset_table[3][HANDSETCODES] =
{
            /*
                No modifiers
            */
            {
                0x47, 0000, 0x36, 0x21,		/* Sel   Open  PgDn  PgUp  */
                0x64, 0000, 0x45, 0x46,		/* Right Print :     @     */
                PWR,  0000, 0x20, 0x63,		/* Power Stop  Home  Down  */
                0x62, 0x59, 0x57, 0x56,		/* Left  Up    /     .     */
                0x47, 0000, 0000, 0000,		/* Sel   Forw  Back  LnDn  */
                0000, 0000, 0000, 0000,		/* LnUp  Menu  Tool  Help  */
                NK,   0x2C, 0x2B, 0x2F,		/* Ctrl  y     t     o     */
                0x42, 0x29, 0x1A, 0x15,		/* j     e     0     5     */
                0x1E, 0x4F, 0x3D, 0x53,		/* Del   x     s     n     */
                0x2E, 0x3E, 0x19, 0x14,		/* i     d     9     4     */
                0x4E, 0x28, 0x2A, 0x54,		/* z     w     r     m     */
                0x41, 0x50, 0x18, 0x13,		/* h     c     8     3     */
                0x5F, 0x51, 0x27, 0x44,		/* Space v     q     l     */
                0x40, 0x52, 0x17, 0x12,		/* g     b     7     2     */
                NK,   0x2D, 0x30, 0x43,		/* Shift u     p     k     */
                0x3F, 0x3C, 0x16, 0x11		/* f     a     6     1     */
            },

            /*
                + Shift
            */
            {
                0x47, 0xD2, 0x8E, 0x8F,		/* Sel   Open  PgDn  PgUp  */
                0x9D, 0xD8, ',',  '*',		/* Right Print :     @     */
                PWR,  0xD3, 0xD7, 0x9E,		/* Power Stop  Home  Down  */
                0x9C, 0x9F, '_',  '=',		/* Left  Up    /     .     */
                0x0A, 0xD5, 0xD4, 0xAE,		/* Sel   Forw  Back  LnDn  */
                0xAF, 0xD1, 0xD6, 0xD0,		/* LnUp  Menu  Tool  Help  */
                NK,   'Y',  'T',  'O',		/* Ctrl  y     t     o     */
                'J',  'E',  ')',  '%',		/* j     e     0     5     */
                0x7F, 'X',  'S',  'N',		/* Del   x     s     n     */
                'I',  'D',  '(',  '$',		/* i     d     9     4     */
                'Z',  'W',  'R',  'M',		/* z     w     r     m     */
                'H',  'C',  '?',  '£',		/* h     c     8     3     */
                ' ',  'V',  'Q',  'L',		/* Space v     q     l     */
                'G',  'B',  '&',  '"',		/* g     b     7     2     */
                NK,   'U',  'P',  'K',		/* Shift u     p     k     */
                'F',  'A',  '^',  '!'		/* f     a     6     1     */
            },

            /*
                + Ctrl
            */
            {
                NK,   0xE2, 0xBE, 0xBF,		/* Sel   Open  PgDn  PgUp  */
                0xAD, 0xE8, '>',  '<',		/* Right Print :     @     */
                PWR,  0xE3, 0xE7, 0xAE,		/* Power Stop  Home  Down  */
                0xAC, 0xAF, ';',  '+',		/* Left  Up    /     .     */
                0x0A, 0xE5, 0xE4, 0x9E,		/* Sel   Forw  Back  LnDn  */
                0x9F, 0xE1, 0xE6, 0xE0,		/* LnUp  Menu  Tool  Help  */
                NK,   0x19, 0x14, 0x0f,		/* Ctrl  y     t     o     */
                0x0A, 0x05, ']',  '\'',		/* j     e     0     5     */
                0x7F, 0x18, 0x13, 0x0E,		/* Del   x     s     n     */
                0x09, 0x04, '[',  '~', 		/* i     d     9     4     */
                0x1A, 0x17, 0x12, 0x0D,		/* z     w     r     m     */
                0x08, 0x03, '}',  '\\', 	/* h     c     8     3     */
                0x20, 0x16, 0x11, 0x0C,		/* Space v     q     l     */
                0x07, 0x02, '{',  '#', 		/* g     b     7     2     */
                NK,   0x15, 0x10, 0x0B,		/* Shift u     p     k     */
                0x06, 0x01, '-',  0x1B		/* f     a     6     1     */
            }
};


int handset_lookup(int code, int mods)
{
    int key_no;
    int modifier;


    DEBUGFN(2,db_printf("code = %d, mods = %d\n",code,mods));

    if (code >= HANDSETCODES)
    {
        DEBUGFN(2,db_printf("bad code\n"));
        return -1;
    }

    /*
        The handset tables only have entries for Shift or Control modifiers
    */
    switch (mods)
    {
        case 0:
        {
            modifier = 0;
            break;
        }
        case KEY_MOD_SHIFT:
        {
            modifier = 1;
            break;
        }
        case KEY_MOD_CTRL:
        {
            modifier = 2;
            break;
        }
        default:
        {
            DEBUGFN(2,db_printf("bad mods\n"));
            return -1;
        }
    }

    key_no = handset_table[modifier][code];
    if (key_no == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (key_no == PWR)
    {
        int state;

        /*
            Toggle standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        _swix((state & Standby_InStandby) ? Standby_Online : Standby_Standby, _IN(0), 0);
        flags ^= KEYBOARD_FLAGS_STANDBY_MODE;
        return -1;
    }
    else
    {
        return key_no;
    }

}
