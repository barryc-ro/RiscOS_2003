/*
 * 	keyboard.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"
#include "irqs.h"

#include "keyboard.h"
#include "module.h"


extern unsigned int flags;



/*
 * lookup tables for keyboard scancodes
 */
static unsigned char keyboard_table[2][2][KEYBOARDCODES] =
{
    /*
        US layout (0)
    */
    {
        /* No modifiers */
        {
                NK,	NK,	NK,	NK,	/*  0:					*/
                NK,	NK,	NK,	NK,	/*  4:			Fn		*/
                NK,	NK,	NK,	NK,	/*  8:			AltGr		*/
                0x34,	NK,	NK,	NK,	/*  C:	Del			AltL	*/
                0x52,	0x3C,	0x27,	0x4e,	/* 10:	B	A	Q	Z	*/
                0x03,	0x02,	0x11,	0x10,	/* 14:	F3	F2	1	`¬	*/
                0x26,	0x3D,	0x28,	0x4F,	/* 18:	Tab	S	W	X	*/
                0x00,	0x01,	0x12,	0x5D,	/* 1C:	Esc	F1	2"	Caps	*/
                0x64,	0x3E,	0x29,	0x50,	/* 20:	Right	D	E	C	*/
                0x05,	0x04,	0x13,	0x22,	/* 24:	F5	F4	3#	NumLock	*/
                0x5F,	0x3F,	0x2A,	0x51,	/* 28:	Space	F	R	V	*/
                0x15,	0x40,	0x14,	0x2B,	/* 2C:	5%	G	4$	T	*/
                0x46,	0x42,	0x2D,	0x54,	/* 30:	'@	J	U	M	*/
                0x16,	0x41,	0x17,	0x2C,	/* 34:	6^	H	7&	Y	*/
                NK,	NK,	NK,	NK,	/* 38:	Shift			Shift	*/
                NK,	NK,	NK,	NK,	/* 3C:					*/
                0x1B,	0x43,	0x2e,	0x55,	/* 40:	-_	K	I	,<	*/
                0x06,	0x07,	0x18,	0x0B,	/* 44:	F6	F7	8*	F11	*/
                0x31,	0x44,	0x2F,	0x56,	/* 48:	[{	L	O	.>	*/
                0x08,	0x09,	0x19,	0x0A,	/* 4C:	F8	F9	9(	F10	*/
                0x47,	0x45,	0x30,	0x57,	/* 50:	Return	;:	P	/?	*/
                0x1C,	0x33,	0x1A,	0x0C,	/* 54:	=+	#~	0)	F12	*/
                0x1F,	0x36,	0x32,	0x4D,	/* 58:	Ins	PgDn	]}	\|	*/
                0x1E,	0x59,	0x63,	0x0D,	/* 5C:	BkSp	Up	Down	Print	*/
                0x62,	0x35,	0x0F,	0x53,	/* 60:	Left	End	Break	N	*/
                0x20,	0x21,	0x71,	0x0E	/* 64:	Home	PgUp	Menu	Scroll	*/
                				/* 68:		Win			*/
                				/* 6C:					*/
                				/* 70:					*/
                				/* 74:		Ctrl			*/
                				/* 78:					*/
                				/* 7C:					*/
        },

        /*
            +Fn
        */
        {
                NK,	NK,	NK,	NK,	/*  0:					*/
                NK,	NK,	NK,	NK,	/*  4:					*/
                NK,	NK,	NK,	NK,	/*  8:					*/
                NK,	NK,	NK,	NK,	/*  C:					*/
                NK,	NK,	NK,	NK,	/* 10:					*/
                NK,	NK,	NK,	NK,	/* 14:					*/
                NK,	NK,	NK,	NK,	/* 18:					*/
                NK,	NK,	NK,	NK,	/* 1C:					*/
                NK,	NK,	NK,	NK,	/* 20:					*/
                NK,	NK,	NK,	0x22,	/* 24:				NumLock	*/
                NK,	NK,	NK,	NK,	/* 28:					*/
                NK,	NK,	NK,	NK,	/* 2C:					*/
                NK,	0x5A,	0x48,	0x65,	/* 30:		1	4	0	*/
                NK,	NK,	0x37,	NK,	/* 34:			7		*/
                NK,	NK,	NK,	NK,	/* 38:					*/
                NK,	NK,	NK,	NK,	/* 3C:					*/
                NK,	0x5B,	0x49,	NK,	/* 40:		2	5		*/
                NK,	NK,	0x38,	NK,	/* 44:			8		*/
                NK,	0x5C,	0x4A,	0x56,	/* 48:		3	6	.	*/
                NK,	NK,	0x39,	NK,	/* 4C:			9		*/
                0x67,	0x4B,	0x3A,	0x23,	/* 50:	Enter	+	-	/	*/
                NK,	NK,	0x24,	NK,	/* 54:			*		*/
                NK,	NK,	NK,	NK,	/* 58:					*/
                NK,	NK,	NK,	NK,	/* 5C:					*/
                NK,	NK,	NK,	NK,	/* 60:					*/
                NK,	NK,	NK,	NK,	/* 64:					*/
        }
    },

    /*
        UK layout (1)
    */
    {
        /*
            No modifiers
        */
        {
                NK,	NK,	NK,	NK,	/*  0:					*/
                NK,	NK,	NK,	NK,	/*  4:					*/
                NK,	NK,	NK,	NK,	/*  8:					*/
                0x71,	NK,	NK,	NK,	/*  C:	Menu				*/
                0x52,	0x3C,	0x27,	0x4e,	/* 10:	B	A	Q	Z	*/
                0x03,	0x02,	0x11,	0x10,	/* 14:	F3	F2	1	`¬¬	*/
                0x26,	0x3D,	0x28,	0x4F,	/* 18:	Tab	S	W	X	*/
                0x00,	0x01,	0x12,	0x5D,	/* 1C:	Esc	F1	2"	Caps	*/
                0x64,	0x3E,	0x29,	0x50,	/* 20:	Right	D	E	C	*/
                0x05,	0x04,	0x13,	0x0F,	/* 24:	F5	F4	3#	Break	*/
                0x5F,	0x3F,	0x2A,	0x51,	/* 28:	Space	F	R	V	*/
                0x15,	0x40,	0x14,	0x2B,	/* 2C:	5%	G	4$	T	*/
                0x46,	0x42,	0x2D,	0x54,	/* 30:	'@	J	U	M	*/
                0x16,	0x41,	0x17,	0x2C,	/* 34:	6^	H	7&	Y	*/
                NK,	NK,	NK,	NK,	/* 38:	Shift			Shift	*/
                NK,	NK,	NK,	NK,	/* 3C:					*/
                0x1B,	0x43,	0x2e,	0x55,	/* 40:	-_	K	I	,<	*/
                0x06,	0x07,	0x18,	0x0B,	/* 44:	F6	F7	8*	F11	*/
                0x31,	0x44,	0x2F,	0x56,	/* 48:	[{	L	O	.>	*/
                0x08,	0x09,	0x19,	0x0A,	/* 4C:	F8	F9	9(	F10	*/
                0x47,	0x45,	0x30,	0x57,	/* 50:	Return	;:	P	/?	*/
                0x1C,	0x33,	0x1A,	0x0C,	/* 54:	=+	#~	0)	F12	*/
                0x4D,	0x36,	0x32,	NK,	/* 58:	\|	PgDn	]}		*/
                0x1E,	0x59,	0x63,	0x0D,	/* 5C:	BkSp	Up	Down	Print	*/
                0x62,	0x35,	0x34,	0x53,	/* 60:	Left	End	Del	N	*/
                0x20,	0x21,	0x60,	0x1F	/* 64:	Home	PgUp	AltGr	Ins	*/
                				/* 68:					*/
                				/* 6C:					*/
                				/* 70:					*/
                				/* 74:					*/
                				/* 78:					*/
                				/* 7C:					*/
        },

        /*
            +Fn
        */
        {
                NK,	NK,	NK,	NK,	/*  0:					*/
                NK,	NK,	NK,	NK,	/*  4:					*/
                NK,	NK,	NK,	NK,	/*  8:					*/
                NK,	NK,	NK,	NK,	/*  C:					*/
                NK,	NK,	NK,	NK,	/* 10:					*/
                NK,	NK,	NK,	NK,	/* 14:					*/
                NK,	NK,	NK,	NK,	/* 18:					*/
                NK,	NK,	NK,	NK,	/* 1C:					*/
                NK,	NK,	NK,	NK,	/* 20:					*/
                NK,	NK,	NK,	NK,	/* 24:					*/
                NK,	NK,	NK,	NK,	/* 28:					*/
                NK,	NK,	NK,	NK,	/* 2C:					*/
                NK,	0x5A,	0x48,	0x65,	/* 30:		1	4	0	*/
                NK,	NK,	0x37,	NK,	/* 34:			7		*/
                NK,	NK,	NK,	NK,	/* 38:					*/
                NK,	NK,	NK,	NK,	/* 3C:					*/
                NK,	0x5B,	0x49,	NK,	/* 40:		2	5		*/
                NK,	NK,	0x38,	NK,	/* 44:			8		*/
                NK,	0x5C,	0x4A,	0x56,	/* 48:		3	6	.	*/
                NK,	NK,	0x39,	0x22,	/* 4C:			9	NumLock	*/
                0x67,	0x4B,	0x3A,	0x23,	/* 50:	Enter	+	-	/	*/
                NK,	NK,	0x24,	NK,	/* 54:			*		*/
                NK,	NK,	NK,	NK,	/* 58:					*/
                0x0E,	NK,	NK,	NK,	/* 5C:	ScrlLk				*/
                NK,	NK,	NK,	NK,	/* 60:					*/
                NK,	NK,	NK,	NK,	/* 64:					*/
        }
    }
};


/*
 * Convert an IR keyboard scan code to a low-level key number (see PRM 1-156).
 * Returns -1 if the supplied code & mods does not map to a key.
 * Handles Standby keypress internally (if present on keyboard).
 */
int keyboard_lookup(int code, int mods, state_t *device_state)
{
    int key_no;
    unsigned int kbstat=0, country=0, layout;
    _kernel_oserror *err;

    if (code >= KEYBOARDCODES)
    {
        return -1;
    }
    err = _swix(OS_Byte,_INR(0,2)|_OUT(1),240,0,255,&country);
    if (err)
    {
        DEBUGFN(3,db_printf("Couldnt read country code!(%d:%s)\n",err->errnum,err->errmess));
    }

    err = _swix(OS_Byte,_INR(0,2)|_OUT(1),202,0,255,&kbstat);
    if (err)
    {
        DEBUGFN(3,db_printf("Couldnt read kb status!(%d:%s)\n",err->errnum,err->errmess));
    }
    device_state->keyboard.fnlock = (kbstat&4)?0:1;


    if (country == 48)  /* USA */
    {
        layout = 0;    /* use US layout */
    }
    else
    {
        layout = 1;    /* use UK layout */
    }

    if ((mods & KEY_MOD_FN) ||
        (device_state->keyboard.fnlock))
    {
        key_no = keyboard_table[layout][1][code];
    }
    else
    {
        key_no = keyboard_table[layout][0][code];
    }

    if (key_no == NK)
    {
        return -1;
    }
    else
    {
        return key_no;
    }
}
