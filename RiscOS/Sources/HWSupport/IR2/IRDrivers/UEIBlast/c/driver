/*
 * 	driver.c	- blasting driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "driver.h"
#include "veneers.h"
#include "ueiblast.h"
#include "tqueue.h"




static ir_client_callbacks_t callbacks =
{
    driver_accept_data_packet,
    driver_accept_report_packet,
    0
};

unsigned int ir_driver_id = 0x00000009;
unsigned int ir_driver_revision = 0x0104;


static unsigned char blast_data[500];


/*
    Use a message file thing in future.
*/
static _kernel_oserror errors[]=
{
    {UEIIRBlast_Error_Block + UEIIRBlast_Error_UnknownDevice,"Attempted to blast to unknown device type"},
    {UEIIRBlast_Error_Block + UEIIRBlast_Error_DeviceNumberOutOfRange,"Device number not supported"},
    {UEIIRBlast_Error_Block + UEIIRBlast_Error_CodeNumberOutOfRange,"Code number not supported"}
};

#define NVRAM_Read 0x4ee00
#define NVRAM_Write 0x4ee01

#define NV_IRTVCode    "IRTVCode"
#define NV_IRVCRCode   "IRVCRCode"
#define NV_IRCableCode "IRCableCode"
#define NV_IRSatelliteCode "IRSatelliteCode"


/*
    Make a block of data suitable for blasting.

    Returns the maximum length of the string, in bytes.
*/
static unsigned int make_blast_data(unsigned int type,
                                    unsigned int number,
                                    unsigned char *table,
                                    unsigned int command)
{
    unsigned int loop;
    unsigned int dsn;
    unsigned int dsb;
    unsigned char *data,*p;
    unsigned int length;
    unsigned int offset;
    unsigned int num_strings;
    unsigned int total_string_length=0;

    data = table+ 9 + (command*6) + 3;
#if (DEBUG > 0)
    printf("Command is %d (%c%c%c)\n\n",command,*(data-3),*(data-2),*(data-1));
#endif
    length = *(data+2);
    p = data;
    offset = *p;
    offset <<=8;
    offset+= *(p+1);

    data = table+offset;

    memcpy(&blast_data[0],data,length);

    num_strings = blast_data[0];
    for (loop = 0; loop < num_strings; loop++)
    {
        dsn = blast_data[1+loop];
        dsb = (dsn+1)>>1;
        total_string_length += dsb;
    }




#ifdef SWAP_NIBBLE_ORDER
    for (loop = 0; loop < (total_string_length<<1);loop+=2)
    {
        unsigned char c = blast_data[1+num_strings+(loop>>1)]&0x0f;
        c <<= 4;
        c |=  ((blast_data[1+num_strings+(loop>>1)]&0xf0)>>4);

        blast_data[1+num_strings+(loop>>1)]=c;

    }
#endif

#if (DEBUG > 0)
    {
        printf("\n\nUEIBlast Module:\n");
        printf("total size of data: &%02x bytes\n",length);
        printf("contents:           &%02x ",num_strings);
        for (loop = 0; loop < num_strings; loop++)
        {
            printf("&%02x ",blast_data[1+loop]);
        }
        printf("\n(%d string", num_strings);
        if (num_strings!=1)
        {
            printf("s");
        }
        printf(" of length ");
        for (loop = 0; loop < num_strings; loop++)
        {
            printf("%d ",blast_data[1+loop]);
        }
        printf("nibbles).\n");


        for (loop = 0; loop < (total_string_length<<1);loop++)
        {
            if ((loop&7) == 0)
            {
                if (loop == 0)
                {
                    printf("data:               ");
                }
                else
                {
                    printf("                    ");
                }
            }


            if (loop&1)
            {
                printf("&%x ",blast_data[1+num_strings+(loop>>1)]&0x0f);
            }
            else
            {
                printf("&%x ",(blast_data[1+num_strings+(loop>>1)]&0xf0)>>4);
            }

            if ((loop&7) == 7)
            {
                printf("\n");
            }
        }
        printf("\n");

    }
#endif

    return total_string_length+num_strings+1;
}

/*
    Called by module_initialise and module_service.
    reason can used to determine whether we are starting,
    or merely reinitialising the connection to the IR
    Director.
*/
_kernel_oserror *driver_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err=NULL;
    unsigned int loop,loop2;
    ir_blast_setup_t bs;
    NOT_USED(reason);

    callbacks.notify_flags.bits.notify_on_comp_status_report=1;

    tq_initialise();
    err = ir_initialise(&callbacks,pw);

    return err;
}

/*
    Called by module_finalise.
    Disconnects from IR Director.
*/
_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}


/*
    Callback for accepting a data packet from a peripheral.
    Shouldn't be required by a blasting driver.
*/
void driver_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    NOT_USED(registry_number);
    NOT_USED(tag_number);
    NOT_USED(data[0]);

    DEBUGFN(3,db_printf("UEIBlast: driver_accept_data_packet called!\n"));

}



/*
    Callback for accepting a report packet from the TWIRP
    controller.

    In the context of a blasting driver, this tells us about
    blasting related events.

*/
void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    if (report_code == 3)   /* completion status report */
    {
        if (data[0]&0x20)   /* blast complete */
        {
            DEBUGFN(3,db_printf("UEIBlast: Blasting complete!\n"));
        }
    }
}




static _kernel_oserror *blast_to_tv(unsigned int tv_number,
                                    unsigned int code_number,
                                    unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    table_queue_node_t *table;

    DEBUGFN(3,db_printf("UEIBlast: blast_to_tv(%d,%d,%x)\n",tv_number,code_number,flags));
    bs.word = flags;

    table = tq_find_table(0,tv_number);
    if (table == NULL)
    {
        table = tq_add_table(0,tv_number);
        if (table == NULL)
        {
            err = &errors[UEIIRBlast_Error_DeviceNumberOutOfRange];
            return err;
        }
    }

    if (code_number > table->table[8]||
        table->table[9+(6*code_number)+5] == 0)
    {
        err = &errors[UEIIRBlast_Error_CodeNumberOutOfRange];
        return err;
    }

    ir_blast(blast_data,
             make_blast_data(0,tv_number,table->table,code_number),
             bs);
    tq_log_usage(table);

    return err;
}

static _kernel_oserror *blast_to_vcr(unsigned int vcr_number,
                                     unsigned int code_number,
                                     unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    table_queue_node_t *table;

    DEBUGFN(3,db_printf("UEIBlast: blast_to_vcr(%d,%d,%x)\n",vcr_number,code_number,flags));
    bs.word = flags;

    table = tq_find_table(1,vcr_number);
    if (table == NULL)
    {
        table = tq_add_table(1,vcr_number);
        if (table == NULL)
        {
            err = &errors[UEIIRBlast_Error_DeviceNumberOutOfRange];
            return err;
        }
    }

    if (code_number > table->table[8]||
        table->table[9+(6*code_number)+5] == 0)
    {
        err = &errors[UEIIRBlast_Error_CodeNumberOutOfRange];
        return err;
    }

    ir_blast(blast_data,
             make_blast_data(1,vcr_number,table->table,code_number),
             bs);
    tq_log_usage(table);

    return err;
}

static _kernel_oserror *blast_to_cable(unsigned int cable_number,
                                       unsigned int code_number,
                                       unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    table_queue_node_t *table;

    DEBUGFN(3,db_printf("UEIBlast: blast_to_cable(%d,%d,%x)\n",cable_number,code_number,flags));
    bs.word = flags;

    table = tq_find_table(2,cable_number);
    if (table == NULL)
    {
        table = tq_add_table(2,cable_number);
        if (table == NULL)
        {
            err = &errors[UEIIRBlast_Error_DeviceNumberOutOfRange];
            return err;
        }
    }

    if (code_number > table->table[8]||
        table->table[9+(6*code_number)+5] == 0)
    {
        err = &errors[UEIIRBlast_Error_CodeNumberOutOfRange];
        return err;
    }

    ir_blast(blast_data,
             make_blast_data(2,cable_number,table->table,code_number),
             bs);
    tq_log_usage(table);

    return err;
}

static _kernel_oserror *blast_to_satellite(unsigned int satellite_number,
                                           unsigned int code_number,
                                           unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    table_queue_node_t *table;

    DEBUGFN(3,db_printf("UEIBlast: blast_to_satellite(%d,%d,%x)\n",satellite_number,code_number,flags));
    bs.word = flags;

    table = tq_find_table(3,satellite_number);
    if (table == NULL)
    {
        table = tq_add_table(3,satellite_number);
        if (table == NULL)
        {
            err = &errors[UEIIRBlast_Error_DeviceNumberOutOfRange];
            return err;
        }
    }

    if (code_number > table->table[8]||
        table->table[9+(6*code_number)+5] == 0)
    {
        err = &errors[UEIIRBlast_Error_CodeNumberOutOfRange];
        return err;
    }

    ir_blast(blast_data,
             make_blast_data(3,satellite_number,table->table,code_number),
             bs);

    tq_log_usage(table);
    return err;
}

/*
    SWI Handler for SWI UEIIRBlast_BlastToDevice

    These #define values are for masking out the
    device type and number.
*/
#define BLAST_TO_DEVICE_TYPE_MASK   0xc0000000
#define BLAST_TO_DEVICE_TYPE_SHIFT  30
#define BLAST_TO_DEVICE_NUMBER_MASK 0x3fffffff

_kernel_oserror *swi_blast_to_device(_kernel_swi_regs *r)
{
    _kernel_oserror *err;
    unsigned int type,number;

    type = (r->r[0]&BLAST_TO_DEVICE_TYPE_MASK)>> BLAST_TO_DEVICE_TYPE_SHIFT;
    number = r->r[0]&BLAST_TO_DEVICE_NUMBER_MASK;

    switch(type)
    {
        case 0:
        {
            err = blast_to_tv(number,r->r[1],r->r[2]);
            break;
        }
        case 1:
        {
            err = blast_to_vcr(number,r->r[1],r->r[2]);
            break;
        }
        case 2:
        {
            err = blast_to_cable(number,r->r[1],r->r[2]);
            break;
        }
        case 3:
        {
            err = blast_to_satellite(number,r->r[1],r->r[2]);
            break;
        }
        default:
        {
            err = &errors[UEIIRBlast_Error_UnknownDevice];
            break;
        }
    }

    return err;
}

/*
    SWI Handler for SWI UEIIRBlast_BlastToTV
*/
_kernel_oserror *swi_blast_to_tv(_kernel_swi_regs *r)
{
    unsigned int tv_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRTVCode, &tv_number, 0);
    if (!err)
    {
        err = blast_to_tv(tv_number,r->r[0],r->r[1]);
    }

    return err;
}


/*
    SWI Handler for SWI UEIIRBlast_BlastToVCR
*/
_kernel_oserror *swi_blast_to_vcr(_kernel_swi_regs *r)
{
    unsigned int vcr_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRVCRCode, &vcr_number, 0);
    if (!err)
    {
        err = blast_to_vcr(vcr_number,r->r[0],r->r[1]);
    }

    return err;
}


/*
    SWI Handler for SWI UEIIRBlast_BlastToCable
*/
_kernel_oserror *swi_blast_to_cable(_kernel_swi_regs *r)
{
    unsigned int cable_box_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRCableCode, &cable_box_number, 0);
    if (!err)
    {
        err = blast_to_cable(cable_box_number,r->r[0],r->r[1]);
    }

    return err;
}


/*
    SWI Handler for SWI UEIIRBlast_BlastToSatellite
*/
_kernel_oserror *swi_blast_to_satellite(_kernel_swi_regs *r)
{
    unsigned int satellite_box_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRSatelliteCode, &satellite_box_number, 0);
    if (!err)
    {
        err = blast_to_satellite(satellite_box_number,r->r[0],r->r[1]);
    }

    return err;
}








