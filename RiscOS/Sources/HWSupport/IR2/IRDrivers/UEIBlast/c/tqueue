#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "tqueue.h"
#include "utils.h"

static unsigned char file_types[4] = {'T','V','C','S'};


static table_queue_node_t queue[TABLE_QUEUE_SIZE];



void tq_initialise(void)
{
    unsigned int loop;
    for (loop = 0; loop < TABLE_QUEUE_SIZE; loop ++)
    {
        queue[loop].type = 0xffffffff;
        queue[loop].number = 0xffffffff;
        queue[loop].table = NULL;

    }

}

static void shuffle_up(unsigned int start, unsigned int finish)
{
    unsigned int loop;

    for (loop = finish; loop >= start; loop --)
    {
        DEBUGFN(3,db_printf("Shuffling table from location %d to location %d\n",loop-1, loop));
        queue[loop] = queue[loop-1];
    }
}


table_queue_node_t *tq_find_table(unsigned int type, unsigned int number)
{
    unsigned int loop;

    for (loop = 0; loop < TABLE_QUEUE_SIZE; loop++)
    {
        if (queue[loop].type == type &&
            queue[loop].number == number)
        {
            DEBUGFN(3, db_printf("Found table at location %d\n",loop));
            return &queue[loop];
        }
    }
    return NULL;

}


table_queue_node_t *tq_add_table(unsigned int type, unsigned int number)
{
    char filename[100];
    _kernel_oserror *err;
    unsigned int r0;
    unsigned int size;
    FILE *fp;

    type &=3;
    number %=999;
    sprintf(filename,"IRBlastTables:%c%03d/eir",file_types[type],number);

    DEBUGFN(3,db_printf("Filename:%s\n",filename));

    err = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4),
                17, filename,
                &r0,&size);

    if (err != NULL)
    {
        DEBUGFN(3, db_printf("OS_File 17:%x:%s\n",err->errnum, err->errmess));
        return NULL;
    }
    else if (r0 == 0)
    {
        DEBUGFN(3, db_printf("OS_File 17:file not found\n"));
        return NULL;
    }
    DEBUGFN(3, db_printf("Size:%x\n",size));

    free(queue[TABLE_QUEUE_SIZE-1].table);
    queue[TABLE_QUEUE_SIZE-1].table = malloc(size);
    if (queue[TABLE_QUEUE_SIZE-1].table == NULL)
    {
        DEBUGFN(3, db_printf("malloc failed!\n"));
        return NULL;
    }


    fp = fopen(filename,"rb");
    if (fp == NULL)
    {
        DEBUGFN(3,db_printf("fopen failed\n"));
        return NULL;
    }

    if (fread(queue[TABLE_QUEUE_SIZE-1].table,1,size,fp) != size)
    {
        DEBUGFN(3,db_printf("fread failed\n"));
        fclose(fp);
        return NULL;
    }

    fclose(fp);

    queue[TABLE_QUEUE_SIZE-1].type = type;
    queue[TABLE_QUEUE_SIZE-1].number = number;
    DEBUGFN(3, db_printf("Adding table at location %d\n",TABLE_QUEUE_SIZE-1));
    return &queue[TABLE_QUEUE_SIZE-1];

}

void tq_log_usage(table_queue_node_t *node)
{
    table_queue_node_t temp=*node;

    unsigned int number;

    for (number = 0; number <TABLE_QUEUE_SIZE; number++)
    {
        if (node == &queue[number])
        {
            break;
        }
    }

    if ((number != 0) && (number != TABLE_QUEUE_SIZE))
    {
        shuffle_up(1,number);
        queue[0] = temp;
        DEBUGFN(3,db_printf("Moved table from location %d to location 0\n",number));
    }

}
