/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "driver.h"
#include "veneers.h"

/*
 * Globals
 */

unsigned int ir_driver_id = 7;

static ir_client_callbacks_t callbacks =
{
    veneer_accept_data_packet,
    veneer_accept_report_packet,
};

unsigned char flags=0;
static unsigned char handset_table[HANDSETCODES] =
{
    /*
        Note that the power key has no effect.
    */
    NK,   NK,   NK,   NK,           /*                         */
    0x8D, NK,   NK,   NK,           /* right                   */
    NK,   NK,   NK,   0x8E,         /*                   down  */
    0x8C, 0x8F, NK,   NK,           /* left  up                */
    0x0D, NK,   NK,   NK,           /* ok                      */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   '0',  '5',          /*             0     5     */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   '9',  '4',          /*             9     4     */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   '8',  '3',          /*             8     3     */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   '7',  '2',          /*             7     2     */
    NK,   NK,   NK,   NK,           /*                         */
    NK,   NK,   '6',  '1',          /*             6     1     */
    NK,   NK,   NK,   NK,           /*       power             */
};


_kernel_oserror *driver_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;
    NOT_USED(reason);

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
    }
    return err;
}

_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}




/*
    Convert an IR scan code to a keyboard buffer code (see PRM 1-892).
    Returns -1 if the supplied table, code & mods does not map to a key.
    Handles Standby keypress internally.
*/
static int handset_lookup(int code, int mods)
{
    int buffer_code;

    NOT_USED(mods);

    DEBUGFN(2,db_printf("code = %d, mods = %d\n",code,mods));

    if (code >= HANDSETCODES)
    {
        DEBUGFN(2,db_printf("bad code\n"));
        return -1;
    }

    buffer_code = (unsigned int) handset_table[code];
    if (buffer_code == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (buffer_code == PWR)
    {
        /*
            Switch on standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        if (flags&DRIVER_FLAGS_STANDBY_MODE)
        {
            _swix(Standby_Online, _IN(0), 0);
        }
        else
        {
            _swix(Standby_Standby, _IN(0), 0);
        }
        return -1;
    }
    else
    {
        return buffer_code;
    }
}




void driver_accept_data_packet(unsigned int registry_number,
                               unsigned char tag_number,
                               unsigned char data[3])
{
    unsigned int buffer_code;

    NOT_USED(registry_number);
    NOT_USED(tag_number);

    buffer_code = handset_lookup(data[1], (data[2]&0xf8)>>3);

    /*
        If not in Standby mode, insert buffer_code into keyboard buffer
    */
    if ((buffer_code != -1) &&
        !(flags & DRIVER_FLAGS_STANDBY_MODE))
    {
        _swix(OS_Byte, _INR(0,2), 153, 0, buffer_code);
        DEBUGFN(2, db_printf("BufferCode: %x\n", buffer_code));
    }
}




void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}


void generic_accept_data_packet(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[2];

    driver_accept_data_packet((unsigned int)r->r[0],
                              (unsigned char)r->r[1],
                              data);
}



void generic_accept_report_packet(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[1];
    driver_accept_report_packet((unsigned int)r->r[0],
                                data);
}

