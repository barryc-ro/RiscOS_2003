 /*
 * 	driver.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "irqs.h"
#include "ir_api.h"
#include "driver.h"
#include "veneers.h"

/*
 * Globals
 */

unsigned int ir_driver_id = 0x0000000C;
unsigned int ir_driver_revision = 0x0100;

static ir_client_callbacks_t callbacks =
{
    driver_accept_data_packet,
    driver_accept_report_packet,
};

#define MES  MK_MES(6000)
#define NCES 3
#define NCPL 3


unsigned short ces[NCES] =
{
    MK_CES(THRESHOLD_MIN((TIME_SYNC+TIME_SPACE))),
    MK_CES(THRESHOLD_MIN((TIME_BURST_0+TIME_SPACE))),
    MK_CES(THRESHOLD_MIN((TIME_BURST_1+TIME_SPACE)))
};

unsigned char cpl[NCPL] =
{
    MK_CPL(THRESHOLD_MIN(TIME_SYNC)),
    MK_CPL(THRESHOLD_MIN(TIME_BURST_0)),
    MK_CPL(THRESHOLD_MIN(TIME_BURST_1))
};

non_twirp_recognition_params_t non_twirp_params =
{
    MES,
    NCES-1,
    NCPL-1,
    NULL,
    NULL
};


static unsigned char the_data[1000]; /* need to work out the right value for this */
static unsigned char *data_pos;
static unsigned int packet_count=0;
static unsigned int total_packets=0;

static void *private_word;

unsigned char flags=0;


_kernel_oserror *driver_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err=NULL;
    unsigned int state;
    unsigned int loop;

    DEBUGFN(1,db_printf("%x,",MES));
    DEBUGFN(1,db_printf("%x,",NCES-1));
    DEBUGFN(1,db_printf("%x,",NCPL-1));
    DEBUGFN(1,db_printf("%x,",ces[0]));
    DEBUGFN(1,db_printf("%x,",ces[1]));
    DEBUGFN(1,db_printf("%x,",ces[2]));
    DEBUGFN(1,db_printf("%x,",cpl[0]));
    DEBUGFN(1,db_printf("%x,",cpl[1]));
    DEBUGFN(1,db_printf("%x\n",cpl[2]));

    if (reason == 0)
    {

        private_word = pw;

        data_pos=the_data;
        total_packets=0;
        packet_count=0;

        err = _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        if (err != NULL)
        {
            err = NULL;
            state = 0;
        }

        if (state&Standby_InStandby)
        {
            flags |= DRIVER_FLAGS_STANDBY_MODE;
        }

    }

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
        unsigned int retval;
        non_twirp_params.ces = ces;
        non_twirp_params.cpl = cpl;

        retval = ir_configure_non_twirp_recognition(&non_twirp_params);
        DEBUGFN(1,db_printf("\nir_configure_non_twirp_recognition returned %d\n",retval));



    }
    return err;
}



_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}


int handset_lookup(unsigned int value)
{
    int key;
    switch(value)
    {
        case 0x56f:
        {
            key = PWR;
            break;
        }
        case 0xf6f:
        {
            key = 0x9f;
            break;
        }
        case 0x76f:
        {
            key = 0x9e;
            break;
        }
        case 0x6ef:
        {
            key = 0x30;
            break;
        }
        case 0xfef:
        {
            key = 0x31;
            break;
        }
        case 0x7ef:
        {
            key = 0x32;
            break;
        }
        case 0xbef:
        {
            key = 0x33;
            break;
        }
        case 0x3ef:
        {
            key = 0x34;
            break;
        }
        case 0xdef:
        {
            key = 0x35;
            break;
        }
        case 0x5ef:
        {
            key = 0x36;
            break;
        }
        case 0x9ef:
        {
            key = 0x37;
            break;
        }
        case 0x1ef:
        {
            key = 0x38;
            break;
        }
        case 0xeef:
        {
            key = 0x39;
            break;
        }
        case 0x2ef:
        {
            key = 0xc4;
            break;
        }
        case 0xa2f:
        {
            key = 0xd8;
            break;
        }
        case 0x5af:
        {
            key = 0xd0;
            break;
        }
        default:
        {
            key = 0xff;
            break;
        }
    }
    return key;
}


#define BITS_PER_FIELD 2
void driver_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    unsigned int size;
    int buffer_code;

    NOT_USED(registry_number);
    NOT_USED(tag_number);

    DEBUGFN(3,db_printf("in driver_accept_data_packet\n"));

    /*
        if this is the first packet of the stream, extract
        the size field.
    */
    if (data_pos == the_data)
    {
        size = data[1];
        /*
            size*2 + sizeof(size)+sizeof(tbd)+sizeof(em)
        */
        total_packets = (((size*2)+2+1+1)+3)/4;
        DEBUGFN(2,db_printf("first packet!\ntotal_packets=%d\n",total_packets));
    }

    packet_count++;
    DEBUGFN(3,db_printf("got packet %d of %d\n",packet_count, total_packets));


    *(data_pos++)=data[1];
    *(data_pos++)=data[2];

    if (total_packets == packet_count)
    {
        /*
            We've got the last packet.
        */
        DEBUGFN(2,db_printf("last packet!\ndata is:"));


        {
            unsigned int count;
            unsigned int loop;
            count=data_pos-the_data;

            for (loop = 0;loop < count; loop ++)
            {
                DEBUGFN(2,db_printf("%02x ",the_data[loop]));
            }
            DEBUGFN(2,db_printf("\n"));

        }

        /*
            Check the value of <EM>
        */
        if ((the_data[1]&0x0f)==0)
        {
            /*
                Compressed...

                We just pull out the individual fields, which are
                indexes into the tables of CES and CPL... given that
                this is a 1-bit codeset, these indexes should be the
                same as the bits in the code.
            */
            unsigned int ne;
            unsigned int el,bl;
            unsigned int bit_index;
            unsigned int value=0;
            unsigned int field=0;

            DEBUGFN(1,db_printf("compressed\n"));

            ne = the_data[2];
            DEBUGFN(3,db_printf("<NE>=%d\n",ne));

            data_pos = the_data+3;
            bit_index = 7;


            for (el = 0; el < ne; el ++)
            {

                DEBUGFN(3,db_printf("["));


                for (bl=0; bl < BITS_PER_FIELD; bl++)
                {
                    field<<=1;
                    if ((*data_pos)&(1<<bit_index))
                    {
                        field|=1;
                    }

                    DEBUGFN(3,db_printf(((*data_pos)&(1<<bit_index))?"1":"0"));

                    bit_index--;
                    bit_index&=7;
                    if(bit_index == 7)
                    {
                        data_pos++;
                    }
                }
                DEBUGFN(3,db_printf("]"));

                DEBUGFN(3,db_printf("("));
                for (bl=0; bl < BITS_PER_FIELD; bl++)
                {
                    DEBUGFN(3,db_printf(((*data_pos)&(1<<bit_index))?"1":"0"));

                    bit_index--;
                    bit_index&=7;
                    if(bit_index == 7)
                    {
                        data_pos++;
                    }
                }
                DEBUGFN(3,db_printf(")"));



                if (field)
                {
                    value<<=1;
                    if (field == 2)
                    {
                        value|=1;
                    }
                    field=0;
                }
            }
            DEBUGFN(3,db_printf("<end>\n\n"));
            DEBUGFN(1,db_printf("Value is:%x\n\n",value));

            if (ne == 12 || ne ==13)
            {
                value &= 0xfff;

                buffer_code = handset_lookup(value);

                /*
                    If not in Standby mode, insert buffer_code into keyboard buffer
                */
                if (buffer_code != 0xff)
                {
                    /*
                        Special case. Need to escape £ so it doesn't look like Ctrl-F3
                        May need to escape other top-bit-set characters
                    */
                    if (buffer_code == '£') /* this is a pound sterling symbol */
                    {
                        _swix(OS_Byte, _INR(0,2), 153, 0, 0);
                    }

                    _swix(OS_Byte, _INR(0,2), 153, 0, buffer_code);
                }
            }


        }
        else
        {
            /*
                Raw...

                We have to look at the edges themselves. Not really
                relevent at this point.
            */
            DEBUGFN(1,db_printf("raw\n"));


        }


        /*
            reset the handy things.
        */
        data_pos = the_data;
        total_packets=0;
        packet_count=0;

    }
}




void driver_accept_report_packet(unsigned char report_code,
                                  unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}

