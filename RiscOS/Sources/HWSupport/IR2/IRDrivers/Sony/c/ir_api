#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"

void ir_gadp(_kernel_swi_regs *r);
void ir_garp(_kernel_swi_regs *r);


unsigned char ir_call_finalise = 1;

static ir_director_functions_t funcs;
static ir_client_callbacks_t *client_callbacks;

extern void ir_vadp(_kernel_swi_regs *);
extern void ir_varp(_kernel_swi_regs *);

static ir_real_callbacks_t real_callbacks=
{
    IR_API_VERSION,
    ir_vadp,
    ir_varp,
    0
};

static void *director_pw;

void ir_gadp(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[2];

    client_callbacks->accept_data_packet((unsigned int)r->r[0],
                                         (unsigned char)r->r[1],
                                         data);
}

void ir_garp(_kernel_swi_regs *r)
{
    unsigned char data[4];
    *(unsigned int *)(data) = r->r[1];
    client_callbacks->accept_report_packet((unsigned int)r->r[0],
                                           data);
}


/*
    v1 functions
*/
_kernel_oserror *ir_initialise(ir_client_callbacks_t *callbacks,void *pw)
{
    ir_director_functions_t *pfuncs;
    _kernel_oserror *err;

    DEBUGFN(3,db_printf("ir_initialise:driver %08x\n",ir_driver_id));

    /*
        Make good copies of the callback data.
    */
    client_callbacks = callbacks;
    real_callbacks.notify_flags.word = callbacks->notify_flags.word;


    /*
        Call the SWI IRDirector_Initialise which is handled by the director.
    */
    err = _swix(IRDirector_Initialise,_INR(0,3)|_OUTR(0,1),ir_driver_id,&real_callbacks,pw,ir_driver_revision,&pfuncs,&director_pw);


    if (!err)
    {
        funcs = *pfuncs;
        DEBUGFN(3,db_printf("Director is using API version %d\n", funcs.api_version));
    }
    else
    {
        DEBUGFN(1,db_printf("SWI returned %d:%s\n",err->errnum,err->errmess));
    }

    return err;
}

_kernel_oserror *ir_finalise(void)
{
    _kernel_swi_regs r;
    if (ir_call_finalise)
    {
        r.r[0] = ir_driver_id;
        call_function(funcs.ir_finalise,&r,director_pw);
    }
    return NULL;
}





void ir_blast(void *data, unsigned int length, ir_blast_setup_t setup)
{
    _kernel_swi_regs r;

    r.r[0] = ir_driver_id;
    r.r[1] = (int)data;
    r.r[2] = length;
    r.r[3] = setup.word;
    call_function(funcs.ir_blast,&r,director_pw);
}

void ir_cancel_blast(void)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    call_function(funcs.ir_cancel_blast,&r,director_pw);
}

void ir_data_download(void *data, unsigned int length)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    r.r[1] = (int)data;
    r.r[2] = length;

    call_function(funcs.ir_data_download,&r,director_pw);
}

void ir_cancel_data_download(void)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    call_function(funcs.ir_cancel_data_download,&r,director_pw);
}

void ir_request_report_packet(unsigned char report_code)
{
    _kernel_swi_regs r;
    r.r[0] = ir_driver_id;
    r.r[1] = report_code;
    call_function(funcs.ir_request_report_packet,&r,director_pw);
}

unsigned int ir_get_director_api_version(void)
{
    return funcs.api_version;
}

/*
    v2 functions
*/
unsigned int ir_configure_non_twirp_recognition(non_twirp_recognition_params_t *params)
{
    _kernel_swi_regs r;
    /*
        Check for to see if we're using a v2 or above IR Director
    */
    if (funcs.api_version < 2)
    {
        return IR_CONFIGURE_NON_TWIRP_NOT_SUPPORTED;
    }

    r.r[0] = ir_driver_id;
    r.r[1] = (int)params;
    call_function(funcs.ir_configure_non_twirp_recognition,&r,director_pw);

    DEBUGFN(1,db_printf("returning %x\n",r.r[0]));
    return r.r[0];
}
