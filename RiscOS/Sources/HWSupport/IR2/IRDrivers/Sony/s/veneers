;------------------------------------------------------------------------------
;
;  veneers.s - veneers for calling between modules.
;
;------------------------------------------------------------------------------
;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
;------------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand

;
; Global functions
;

        AREA    |veneer$$code|,REL,CODE,READONLY


; Macro for defining input veneers.
;
        MACRO
$label  InputVeneer $function
        EXPORT  $label
        IMPORT  $function
$label.Indirect
        DCD     $function
$label  Push    "r10-r12,lr"
        LDR     r11, $label.Indirect
        B       CallC
        MEND



;veneer_name		InputVeneer	function_name
ir_vadp			InputVeneer	ir_gadp
ir_varp			InputVeneer	ir_garp


















	EXPORT	veneer_callback
veneer_callback
; In:   r0 = flags
;       r1 = function to call
;       r2 = r12 value
;
;       Calls an external function with a flags word and an r12 value.
;
        Push    "r12,lr"
        MOV     r12, r2
        MOV     lr, pc
        MOV     pc, r1
        Pull    "r12,pc"

	EXPORT	veneer_suicide
veneer_suicide
; In:   r12 = pointer to module name
;
;       Kills our module.
;
        Push    "sp,lr"             ; Store current sp (must be first) and return address.
        Push    "r0-r2"             ; Store other registers we will use.
        ADR     lr, SuicideCode     ; Load suicide code.
        LDMIA   lr, {r0-r2}
        Push    "r0-r2"             ; Put on the stack.
        MOV     r0, #0              ; Clear out caches etc. on ARM800, StrongARM
        SWI     &2006E              ;   (allowed to fail for current machines).
        MOV     r0, #4              ; Set up registers for OS_Module SWI.
        MOV     r1, r12
        MOV     pc, sp              ; Jump into stack.

SuicideCode
        SWI     XOS_Module          ; Kill our module, allowed to fail - at least we tried!
        ADD     r0, sp, #12         ; Point to stacked registers.
        LDMIA   r0, {r0-r2,sp,pc}^  ; Restore stacked registers, stack pointer and return from callback.


        IMPORT  |_Lib$Reloc$Off$DP|


UserModeCall
;       Get into SVC mode from user mode for C call.
;
        SWI XOS_EnterOS
        B   %FT10

CallC
; In:   r11->routine to call
;       r12->private word
;       registers "r10-r12,lr" stacked
;
        MOV     r10, pc                 ; Ensure SVC mode, saving old mode in r10.
        TST     r10, #3
        BEQ     UserModeCall            ; If in user mode then we need to call SWI (shouldn't happen often).
        TST     r10, #1
        ORREQ   lr, r10, #3             ; If in IRQ mode then switch to SVC mode.
        TEQEQP  lr, #0
        NOP
10
        Push    "r0-r10,lr"             ; Save regs r0-r9 (for call) + old mode in r10 + SVC_lr
        MOV     r10, r13, LSR #20
        MOV     r10, r10, ASL #20
        LDMIA   r10, {r4,r5}            ; Save old relocation modifiers.
        MOV     r9, r11
        LDR     r12, [r12]              ; Set up our relocation modifiers.
        LDMIB   r12, {r11,r12}
        STMIA   r10, {r11,r12}
        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000
        MOV     r11, #0                 ; Halt C backtrace here!

        MOV     r0, sp                  ; Parameter is _kernel_swi_regs *
        MOV     lr, pc                  ; Branch to the code.
        MOV     pc, r9

        ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000
        STMIA   r10, {r4,r5}            ; Restore old relocation modifiers.
        Pull    "r0-r10,lr"             ; Get output registers + old mode in r10 + SVC_lr

        TEQP    r10, #0                 ; Restore old processor mode.
        NOP
        Pull    "r10-r12,pc",,^         ; Return to caller.






	EXPORT	call_function

call_function
	Push		"r0-r12,lr"
	MOV		r12, r2
	LDMIA		r1, {r0-r9}
	MOV		lr, pc
	LDR		pc, [sp]
	LDR		lr, [sp, #4]
	STMIA		lr, {r0-r9}
	Pull		"r0-r12,pc",,^


        END
