#ifndef IR_API_H
#define IR_API_H

#ifndef __kernel_h
#include "kernel.h"
#endif

/*
    SWI numbers
    Only one required at present is IRDirector_Initialise
*/
enum
{
    IRDirector_SWI_Base = 0x4EF00,
    IRDirector_Initialise = IRDirector_SWI_Base
};

/*
    Service call numbers
*/
enum
{
    Service_IRDirectorStarting = 0xAA,
    Service_IRDirectorDying = 0xC1
};


/*
    Current API level
*/
#define IR_API_VERSION 2

/*
    Possible errors for ir_configure_non_twirp_recognition
*/
enum
{
    IR_CONFIGURE_NON_TWIRP_SUCCESS,
    IR_CONFIGURE_NON_TWIRP_NOT_SUPPORTED,
    IR_CONFIGURE_NON_TWIRP_IN_USE
};


/*
    ir_client_callbacks_t

    Structure passed to ir_initialise, which gives the address
    of all the required callback within the client code.

*/
typedef struct
{
    void (*accept_data_packet)(unsigned int registry_number,
                               unsigned char tag_number,
                               unsigned char data[3]);
    void (*accept_report_packet)(unsigned char report_code,
                                 unsigned char data[3]);
    union
    {
        unsigned int word;
        struct
        {
            unsigned int notify_on_tag_status_report   : 1;
            unsigned int notify_on_ctrl_status_report  : 1;
            unsigned int notify_on_comms_status_report : 1;
            unsigned int notify_on_comp_status_report  : 1;
        }bits;
    }notify_flags;
}ir_client_callbacks_t;

/*
    ir_real_callbacks_t

    Structure passed to ir_initialise, which gives the address
    of all the required callback within the client code.

*/
typedef struct
{
    unsigned int api_version;
    void (*accept_data_packet)(_kernel_swi_regs *r);
    void (*accept_report_packet)(_kernel_swi_regs *r);
    union
    {
        unsigned int word;
        struct
        {
            unsigned int notify_on_tag_status_report   : 1;
            unsigned int notify_on_ctrl_status_report  : 1;
            unsigned int notify_on_comms_status_report : 1;
            unsigned int notify_on_comp_status_report  : 1;
        }bits;
    }notify_flags;
}ir_real_callbacks_t;



/*
    ir_director_functions_t
*/
typedef struct
{
    unsigned int api_version;
    /*
        From API v1
    */
    void (*ir_blast)(_kernel_swi_regs *r);
    void (*ir_cancel_blast)(_kernel_swi_regs *r);
    void (*ir_data_download)(_kernel_swi_regs *r);
    void (*ir_cancel_data_download)(_kernel_swi_regs *r);
    void (*ir_request_report_packet)(_kernel_swi_regs *r);
    void (*ir_finalise)(_kernel_swi_regs *r);
    /*
        From API v2
    */
    void (*ir_configure_non_twirp_recognition)(_kernel_swi_regs *r);
}ir_director_functions_t;


typedef union
{
    unsigned int word;
    struct
    {
        unsigned int leds   : 1;
        unsigned int p0     : 1;
        unsigned int p1     : 1;
        unsigned int p2     : 1;
        unsigned int delay  : 4;
        unsigned int repeat : 1;
    }bits;
}ir_blast_setup_t;

typedef struct
{
    unsigned char mes;
    unsigned char nces;
    unsigned char ncpl;
    unsigned short *ces;
    unsigned char *cpl;
}non_twirp_recognition_params_t;

#ifdef IR_CLIENT

extern unsigned int ir_driver_id;
extern unsigned int ir_driver_revision;
extern unsigned char ir_call_finalise;

/*
    Client-side API functions to send messages to the IR controller.
*/

/*
    API v1
*/
extern void ir_blast(void *data, unsigned int length, ir_blast_setup_t setup);
extern void ir_cancel_blast(void);
extern void ir_data_download(void *data, unsigned int length);
extern void ir_cancel_data_download(void);
extern void ir_request_report_packet(unsigned char report_code);
extern _kernel_oserror *ir_initialise(ir_client_callbacks_t *callbacks,void *pw);
extern _kernel_oserror *ir_finalise(void);
extern unsigned int ir_get_director_api_version(void);

/*
    API v2
*/

extern unsigned int ir_configure_non_twirp_recognition(non_twirp_recognition_params_t *params);


#else
/*
    Server-side functions.
*/

/*
    API v1
*/
extern void ir_api_initialise_client(_kernel_swi_regs *r);
extern void ir_api_finalise_client(_kernel_swi_regs *r);
extern void ir_api_blast(_kernel_swi_regs *r);
extern void ir_api_cancel_blast(_kernel_swi_regs *r);
extern void ir_api_data_download(_kernel_swi_regs *r);
extern void ir_api_cancel_data_download(_kernel_swi_regs *r);
extern void ir_api_request_report_packet(_kernel_swi_regs *r);

/*
    API v2
*/
extern void ir_api_configure_non_twirp_recognition(_kernel_swi_regs *r);

#endif
#endif
