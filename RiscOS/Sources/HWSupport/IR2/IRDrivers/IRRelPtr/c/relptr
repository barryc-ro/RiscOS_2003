/*
 * 	relptr.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "veneers.h"
#include "irqs.h"

#include "relptr.h"
#include "module.h"

unsigned int ir_driver_id = 0x00000000;

/*
 * Globals
 */

static ir_client_callbacks_t callbacks =
{
    veneer_accept_data_packet,
    veneer_accept_report_packet,
};

static int pointer_relx=0;
static int pointer_rely=0;

unsigned char flags=0;
static unsigned int handle;

static tag_info_t tags[NUM_TAGS];

_kernel_oserror *driver_initialise(void *pw, unsigned int reason)
{
    _kernel_oserror *err=NULL;
    unsigned int loop;

    if (reason == 0)
    {
        err = _swix(OS_Claim, _INR(0,2),PointerV,module_pointerv_entry,pw);
        for (loop = 0; loop< NUM_TAGS; loop++)
        {
            tags[loop].PrivateWord = pw;
            tags[loop].tag_number = loop;
        }
    }

    if (!err)
    {
        err = ir_initialise(&callbacks,pw);
    }
    return err;
}

_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    _swix(OS_Release, _INR(0,2), PointerV, module_pointerv_entry, pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}



/*------------------------------------------------------------------------------
 *
 *	Send key up / downs
 */
void ir_keyb(int direction, unsigned int keyno)
{
    DEBUGFN(3, db_printf("%s: %x\n",
                         (direction==Key_KeyUp ? "KeyUp" : "KeyDown"),
                         keyno));

    _swix(OS_CallAVector, _INR(0,1)|_IN(9), direction, keyno, KeyV);
}


/*------------------------------------------------------------------------------
 *
 *	Device has timed out, do appropriate cleanup.
 */
void ir_timeout(int tag_number)
{
    context_t *context = &(tags[tag_number].context);

    DEBUGFN(1, db_printf("Device with tag %d timed out!\n", tag_number));

    /*
        Timeout happened while being cancelled?
    */
    if (context->word != INACTIVE)
    {
        if (context->pointer.buttons & BUT_SELECT)
        {
            ir_keyb(Key_KeyUp, Key_Select);
        }

        if (context->pointer.buttons & BUT_MENU)
        {
            ir_keyb(Key_KeyUp, Key_Menu);
        }
        context->word = INACTIVE;
    }
    else
    {
        DEBUGFN(2, db_printf("no context to clean up!\n"));
    }
}


/*------------------------------------------------------------------------------
 *
 *	Set a device timeout
 */
void ir_set_timeout(int tag_number, context_t context)
{
  tags[tag_number].context = context;
  _swix(OS_CallAfter,_INR(0,2),
        TIMEOUT_DELAY, timeout_preveneer, &(tags[tag_number].PrivateWord));
}


/*------------------------------------------------------------------------------
 *
 *	Cancel device timeout
 *
 * Also sets device's context to INACTIVE
 */
void ir_cancel_timeout(int tag_number)
{
  _swix(OS_RemoveTickerEvent, _INR(0,1),
        timeout_preveneer, &(tags[tag_number].PrivateWord));
  tags[tag_number].context.word = INACTIVE;
}


void driver_accept_data_packet(unsigned int registry_number,
                               unsigned char tag_number,
                               unsigned int data)
{
    packet_t packet;
    unsigned int irq_status;
    context_t context, *old_context = &(tags[tag_number].context);


    packet.word = data;

    if (packet.relative.buttons != 0)
    {
        context.pointer.buttons = packet.relative.buttons;
    }
    else
    {
        context.word = INACTIVE;
    }

    /*
        Don't do anything on receipt of a packet resent due to missed ACK
    */
    if (!(packet.relative.resend && (old_context->word == context.word)))
    {
        /*
            Critical section: don't want a PointerV while we're updating our counters
        */
        irq_status = irqs_off();
        pointer_relx += packet.relative.x<<SCALE;
        pointer_rely += packet.relative.y<<SCALE;
        irqs_restore(irq_status);

        if ((context.word != INACTIVE) && (old_context->word == context.word))
        {
            /*
                Cancel the pending timeout, set a new one
            */
            ir_cancel_timeout(tag_number);
            ir_set_timeout(tag_number, context);
        }
        else
        {
            /*
                Different button(s): Old button(s) up, cancel timeout
            */
            if (old_context->word != INACTIVE)
            {
                if (old_context->pointer.buttons & BUT_SELECT)
                {
                    ir_keyb(Key_KeyUp, Key_Select);
                }
                if (old_context->pointer.buttons & BUT_MENU)
                {
                    ir_keyb(Key_KeyUp, Key_Menu);
                }
                ir_cancel_timeout(tag_number);
            }

            /*
                If not in standby: New button(s) down, set timeout
            */
            if ((context.word != INACTIVE) && !(flags & POINTER_FLAGS_STANDBY_MODE))
            {
                if (context.pointer.buttons & BUT_SELECT)
                {
                    ir_keyb(Key_KeyDown, Key_Select);
                }
                if (context.pointer.buttons & BUT_MENU)
                {
                    ir_keyb(Key_KeyDown, Key_Menu);
                }
                ir_set_timeout(tag_number, context);
            }
        }
    }
}

/*------------------------------------------------------------------------------
 *
 *	Report pointer movement. Called with IRQs off.
 *
 * Returns non-zero if we had some movement to report.
 */
int ir_pointer_status(int *relx, int *rely)
{
  if (pointer_relx || pointer_rely)
  {
    *relx = pointer_relx;
    *rely = pointer_rely;
    pointer_relx = pointer_rely = 0;		/* Reset our counters */
    return TRUE;
  }
  return FALSE;
}



void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}


void generic_accept_data_packet(_kernel_swi_regs *r)
{

    driver_accept_data_packet((unsigned int)r->r[0],
                              (unsigned char)r->r[1],
                              (unsigned int)r->r[2]);
}



void generic_accept_report_packet(_kernel_swi_regs *r)
{
    unsigned char data[4];
    * ((unsigned int *)data) = r->r[1];
    driver_accept_report_packet((unsigned int)r->r[0],
                                data);
}

