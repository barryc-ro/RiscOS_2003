#ifndef KEYBOARD_H
#define KEYBOARD_H

/*
 * handset.h	- Public interface of handset.c
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */
#define BUT_SELECT	2
#define BUT_MENU	1

#define SCALE           1       /* pointer offset << SCALE */

#define Standby_State		0x4c7c0
#define Standby_Standby		0x4c7c1
#define Standby_Online		0x4c7c2
#define Standby_InStandby	1


#define KeyV			0x13
#define Key_KeyboardPresent	0
#define Key_KeyUp		1
#define Key_KeyDown		2
#define Key_Notify		3
#define Key_Enable		4
#define Key_CtrlL		0x3b
#define Key_ShiftL		0x4c
#define Key_AltL		0x5e
#define Key_Select		0x70
#define Key_Menu		0x71
#define Key_Adjust		0x72

#define TIMEOUT_DELAY	20              /* Do a keyup 0.2s after we last saw the key
                                           @@@@ this maybe should be worked out at
                                           runtime and should be < KeyDelCMOS ??? */
#define INACTIVE	-1		/* Value for timeout_t.word */


#define POINTER_FLAGS_STANDBY_MODE 1



typedef union
{
    unsigned int word;

    struct
    {
        unsigned int tag        : 4;	/* Byte 1 */
        unsigned int buttons    : 2;
        unsigned int resend     : 1;
        unsigned int unused     : 1;
        signed int x            : 8;	/* Byte 2 */
        signed int y            : 8;	/* Byte 3 */
    } relative;

}packet_t;


typedef union
{
  int word;			/* If != INACTIVE then a timeout has been set */

  typedef struct
  {
    signed int keyno	:16;		/* Low-level key number */
    unsigned int mods	:8;		/* Modifiers */
  } keyboard;

  typedef struct
  {
    unsigned int buttons;		/* BUT_SELECT and/or BUT_MENU */
  } pointer;

} context_t;

typedef struct
{
    context_t context;
    void *PrivateWord;			/* These two words must be adjacent */
    int tag_number;			/*   so that the timeout veneer works */
}tag_info_t;

#define NUM_TAGS 14


extern void generic_accept_data_packet(_kernel_swi_regs *r);
extern void generic_accept_report_packet(_kernel_swi_regs *r);

extern void driver_accept_data_packet(unsigned int registry_number,
                                      unsigned char tag_number,
                                      unsigned int data);

extern void driver_accept_report_packet(unsigned char report_code,
                                        unsigned char data[3]);


extern _kernel_oserror *driver_initialise(void *pw, unsigned int reason);
extern _kernel_oserror *driver_finalise(void *pw);

extern int ir_pointer_status(int *relx, int *rely);


#endif

