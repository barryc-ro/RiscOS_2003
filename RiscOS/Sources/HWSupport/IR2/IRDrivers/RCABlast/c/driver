/*
 * 	driver.c	- blasting driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "driver.h"
#include "veneers.h"
#include "rcablast.h"
#include "codetables.h"

/*
 * Globals
 */
unsigned int ir_driver_id = 0x00000006;
static ir_client_callbacks_t callbacks =
{
    driver_accept_data_packet,
    driver_accept_report_packet,
    0
};


/*
    Use a message file thing in future.
*/
static _kernel_oserror errors[]=
{
    {RCAIRBlast_Error_Block + RCAIRBlast_Error_UnknownDevice,"Attempted to blast to unknown device type"},
    {RCAIRBlast_Error_Block + RCAIRBlast_Error_DeviceNumberOutOfRange,"Device number out of range"},
    {RCAIRBlast_Error_Block + RCAIRBlast_Error_CodeNumberOutOfRange,"Code number out of range"}
};

#define NVRAM_Read 0x4ee00
#define NVRAM_Write 0x4ee01

#define NV_IRTVCode    "IRTVCode"
#define NV_IRVCRCode   "IRVCRCode"
#define NV_IRCableCode "IRCableCode"


static unsigned char blast_data[100]= {1};          /* always 1 string */




_kernel_oserror *driver_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;

    NOT_USED(reason);

    DEBUGFN(3,db_printf("RCABlast: initialise\n"));
    callbacks.notify_flags.bits.notify_on_comp_status_report=1;

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
    }
    return err;
}

_kernel_oserror *driver_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    DEBUGFN(3,db_printf("RCABlast: finalise\n"));
    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}

/*
    Make a block of data suitable for blasting:

    1 <size in nibbles> <header> <data>

    Returns the maximum length of the string, in bytes.
*/

static unsigned int make_blast_data(unsigned int type,
                                    unsigned int number,
                                    code_table_t *table,
                                    unsigned int command)
{
    unsigned int loop;
    unsigned int hs = (table->header_size+1)>>1;
    unsigned int ds = (table->data_size+1)>>1;
    unsigned int type_number;
    unsigned char *header=(unsigned char *)(table->header);
    unsigned char *data=(unsigned char *)(table->data);
    unsigned int tds=table->data_size;

    type &= 7;
    number &= 1023;

    if (tds&1)tds++;

    type_number = (type<<13)|number;


    blast_data[1] = table->header_size+tds+4;
    blast_data[2] = (unsigned char)((type_number&0xff00)>>8);
    blast_data[3] = (unsigned char)(type_number&0xff);

    memcpy(&blast_data[4],header,hs);

DEBUGFN(3,db_printf("type=%d, number=%d, command=%d\n",type,number,command));

    if ((type == 1) && (number == 36) && ((command == 2) || (command == 3)))
    {
    	DEBUGFN(3,db_printf("Exception! SYNC = 134\n"));
        blast_data[9] = 134;
    }

    if (!(blast_data[4]&0x80))
    {

        if ((!(blast_data[6]&0x80)) &&
            ((type == 0) && ((command == 1) || (command == 2))) ||
            ((type == 1) && ((command == 8) || (command == 9))))
        {
            DEBUGFN(3,db_printf("ChUp or ChDn... Forcing repeat.\n"));
            blast_data[6] |= 0x80;
        }
        else if (type == 2)
        {
            if((/*(number == 1) ||*/
                (number == 3) ||
                (number == 4) ||
                (number == 5) ||
                (number == 7) ||
                (number == 8) ||
                (number == 11) ||
                (number == 12) ||
                (number == 13) ||
                (number == 15) ||
                (number == 17) ||
/*                (number == 22) ||*/
                (number == 27) ||
                (number == 31)/* ||
                (number == 34) ||*/
/*                (number == 35) ||
                (number == 42)*/) && ((command == 1) || (command == 2)))
            {
                DEBUGFN(3,db_printf("ChUp or ChDn... Forcing repeat.\n"));
                blast_data[6] |= 0x80;

            }
            else if ((/*(number == 1) ||*/
                      (number == 4) ||
                      (number == 5) ||
                      (number == 7) ||
                      (number == 8) ||
                      (number == 15) ||
                      (number == 31) ||
                      (number == 42)) && (command >= 3))
            {
                DEBUGFN(3,db_printf("Digit... Forcing repeat.\n"));
                blast_data[6] |= 0x80;
            }
            else if ((number == 42) && ((command == 1) || (command == 2)))
            {
                DEBUGFN(3,db_printf("ChUp or ChDn... Forcing no repeat.\n"));
                blast_data[6] &= 0x7f;
            }
        }
/*
        if (type == 2)
        {
            if ((22 == number) || (35 == number) || (42 == number))
            {
                DEBUGFN(3,db_printf("Exception! Forcing no repeat.\n"));
                blast_data[6] &= 0x7f;
            }
            else if (13 == number)
            {
                DEBUGFN(3,db_printf("Exception! Forcing repeat.\n"));
                blast_data[6] |= 0x80;
            }
        }
*/
    }

    if (table->header_size&1)
    {
        /*
            Odd number of nibbles in the header... need to
            shift the string along by a nibble.
        */
        unsigned char *src,*dest;
        unsigned int loop;

        src = &data[command*ds];            /* src  --> 1234 (start of command) */
        dest = &blast_data[3+hs];           /* dest --> 56xx (last byte in header) */

        for (loop = 0; loop < table->data_size; loop +=2)
        {
            *dest &=0xf0;                   /* dest --> 5xxx */
            *dest |= (*src)>>4;             /* dest --> 51xx */
            dest++;                         /* dest --> xxxx */
            *dest = ((*src) & 0x0f) << 4;   /* dest --> 2xxx */
            src++;                          /* src  --> 34xx */
        }
    }
    else
    {
        /*
            Even number of nibbles in header. Easy.
        */
        memcpy(&blast_data[4+hs],&data[command*ds],ds);
    }

#ifdef SWAP_NIBBLE_ORDER
    for (loop = 0; loop < table->header_size + table->data_size+4;loop+=2)
    {
        unsigned char c = blast_data[2+(loop>>1)]&0x0f;
        c <<= 4;
        c |=  ((blast_data[2+(loop>>1)]&0xf0)>>4);

        blast_data[2+(loop>>1)]=c;

/*
        if ((table->data_size&1)&&
            (loop == table->header_size+table->data_size-1))
	{
        }
        else
        {
	    blast_data[4+(loop>>1)]=c;
        }
*/
    }
#endif

#if (DEBUG > 0)
    {
        printf("\n\nRCABlast Module:\n");
        printf("total size of data: &%02x bytes\n",hs+ds+4);
        printf("contents:           &01 &%02x (1 string of length %d nibbles)\n",
                blast_data[1],
                blast_data[1]);

        printf("device type & no.:  &%x &%x &%x &%x\n",
               (blast_data[2]&0xf0)>>4,
               blast_data[2]&0x0f,
               (blast_data[3]&0xf0)>>4,
               blast_data[3]&0x0f);

        for (loop = 0; loop < table->header_size + tds;loop++)
        {
            if ((loop&7) == 0)
            {
                if (loop == 0)
                {
                    printf("data:               ");
                }
                else
                {
                    printf("                    ");
                }
            }


            if (loop&1)
            {
                printf("&%x ",blast_data[4+(loop>>1)]&0x0f);
            }
            else
            {
                printf("&%x ",(blast_data[4+(loop>>1)]&0xf0)>>4);
            }

            if ((loop&7) == 7)
            {
                printf("\n");
            }
        }
        printf("\n");

    }
#endif

    return hs+ds+4;
}

static _kernel_oserror *blast_to_tv(unsigned int tv_number,
                                    unsigned int code_number,
                                    unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    DEBUGFN(3,db_printf("RCABlast: blast_to_tv(%d,%d,%x)\n",tv_number,code_number,flags));
    if (tv_number < total_tv_tables)
    {
        DEBUGFN(3,db_printf("RCABlast: good tv_number\n"));

        bs.word = flags;
        if (code_number < tv_tables[tv_number].num_commands)
        {
            DEBUGFN(3,db_printf("RCABlast: good code_number\n"));
            ir_blast(blast_data,
                     make_blast_data(0,tv_number,&tv_tables[tv_number],code_number),
                     bs);
        }
        else
        {
            err = &errors[RCAIRBlast_Error_CodeNumberOutOfRange];
        }
    }
    else
    {
        err = &errors[RCAIRBlast_Error_DeviceNumberOutOfRange];
    }

    return err;
}

static _kernel_oserror *blast_to_vcr(unsigned int vcr_number,
                                     unsigned int code_number,
                                     unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    if (vcr_number < total_vcr_tables)
    {
        bs.word = flags;
        if (code_number < vcr_tables[vcr_number].num_commands)
        {
            ir_blast(blast_data,
                     make_blast_data(1,vcr_number,&vcr_tables[vcr_number],code_number),
                     bs);
        }
        else
        {
            err = &errors[RCAIRBlast_Error_CodeNumberOutOfRange];
        }
    }
    else
    {
        err = &errors[RCAIRBlast_Error_DeviceNumberOutOfRange];
    }

    return err;
}

static _kernel_oserror *blast_to_cable(unsigned int cable_number,
                                       unsigned int code_number,
                                       unsigned int flags)
{
    _kernel_oserror *err=NULL;
    ir_blast_setup_t bs;
    if (cable_number < total_cable_tables)
    {
        bs.word = flags;
        if (code_number < cable_tables[cable_number].num_commands)
        {
            ir_blast(blast_data,
                     make_blast_data(2,cable_number,&cable_tables[cable_number],code_number),
                     bs);
        }
        else
        {
            err = &errors[RCAIRBlast_Error_CodeNumberOutOfRange];
        }
    }
    else
    {
        err = &errors[RCAIRBlast_Error_DeviceNumberOutOfRange];
    }
    return err;
}


/*
    SWI Handler for SWI RCAIRBlast_BlastToDevice

    These #define values are for masking out the
    device type and number.
*/
#define BLAST_TO_DEVICE_TYPE_MASK   0xc0000000
#define BLAST_TO_DEVICE_TYPE_SHIFT  30
#define BLAST_TO_DEVICE_NUMBER_MASK 0x3fffffff

_kernel_oserror *swi_blast_to_device(_kernel_swi_regs *r)
{
    _kernel_oserror *err;
    unsigned int type,number;

    type = (r->r[0]&BLAST_TO_DEVICE_TYPE_MASK)>> BLAST_TO_DEVICE_TYPE_SHIFT;
    number = r->r[0]&BLAST_TO_DEVICE_NUMBER_MASK;

    switch(type)
    {
        case 0:
        {
            err = blast_to_tv(number,r->r[1],r->r[2]);
            break;
        }
        case 1:
        {
            err = blast_to_vcr(number,r->r[1],r->r[2]);
            break;
        }
        case 2:
        {
            err = blast_to_cable(number,r->r[1],r->r[2]);
            break;
        }
        default:
        {
            err = &errors[RCAIRBlast_Error_UnknownDevice];
            break;
        }
    }

    return err;
}

/*
    SWI Handler for SWI RCAIRBlast_BlastToTV
*/
_kernel_oserror *swi_blast_to_tv(_kernel_swi_regs *r)
{
    unsigned int tv_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRTVCode, &tv_number, 0);
    if (!err)
    {
        err = blast_to_tv(tv_number,r->r[0],r->r[1]);
    }

    return err;
}


/*
    SWI Handler for SWI RCAIRBlast_BlastToVCR
*/
_kernel_oserror *swi_blast_to_vcr(_kernel_swi_regs *r)
{
    unsigned int vcr_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRVCRCode, &vcr_number, 0);
    if (!err)
    {
        err = blast_to_vcr(vcr_number,r->r[0],r->r[1]);
    }

    return err;
}


/*
    SWI Handler for SWI RCAIRBlast_BlastToCable
*/
_kernel_oserror *swi_blast_to_cable(_kernel_swi_regs *r)
{
    unsigned int cable_box_number;
    _kernel_oserror *err;

    err = _swix(NVRAM_Read, _INR(0,2), NV_IRCableCode, &cable_box_number, 0);
    if (!err)
    {
        err = blast_to_cable(cable_box_number,r->r[0],r->r[1]);
    }

    return err;
}









void driver_accept_data_packet(unsigned int registry_number,
                               unsigned char tag_number,
                               unsigned char data[3])
{
    NOT_USED(registry_number);
    NOT_USED(tag_number);
    NOT_USED(data[0]);

    DEBUGFN(3,db_printf("RCABlast: Got a data packet!\n"));


}




void driver_accept_report_packet(unsigned char report_code,
                                 unsigned char data[3])
{
    if (report_code == 3)/* completion status */
    {
        if (data[0]&0x20)/* blast complete */
        {
            DEBUGFN(3,db_printf("RCABlast: Blasting complete\n"));
        }
    }
}

