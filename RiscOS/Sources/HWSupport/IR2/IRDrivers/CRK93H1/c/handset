/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "ir_api.h"
#include "handset.h"
#include "veneers.h"

/*
 * Globals
 */

unsigned int ir_driver_id = 5;

static ir_client_callbacks_t callbacks =
{
    handset_accept_data_packet,
    handset_accept_report_packet,
};

unsigned char flags=0;
static unsigned char handset_table[NUMTABLES][HANDSETCODES] =
{
            /*
                No modifiers
            */
            {
                NK,   NK,   0x9E, 0x9F,         /*             pg-   pg+   */
                0x8D, NK,   NK,   NK,           /* right                   */
                NK,   NK,   0xC7, 0X8E,         /*             home  down  */
                0X8C, 0X8F, NK,   NK,           /* left  up                */
                0X0D, NK,   0XC4, NK,           /* ok          back        */
                NK,   0XC1, NK,   NK,           /*       menu              */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '0',  '5',          /*             0     5     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '9',  '4',          /*             9     4     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '8',  '3',          /*             8     3     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '7',  '2',          /*             7     2     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '6',  '1',          /*             6     1     */
                NC,   PWR,  0xE2, 0XD8,         /* n|c   power guide info  */
                0XCF, 0XD0, 0XDE, 0XDF,         /* sound who   rev   play  */
                0XE0, 0XE1, 0XC3, 0XD9,         /* fwd   rec   stop  pause */
                NK,   NK,   NK,   NK            /* clear                   */
            }
};


_kernel_oserror *handset_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;

    if (reason == 0)
    {
        unsigned int state;
        _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        if (state&Standby_InStandby)
        {
            flags |= HANDSET_FLAGS_STANDBY_MODE;
        }
    }

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
    }
    return err;
}

_kernel_oserror *handset_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    NOT_USED(pw);

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}




/*
    Convert an IR handset scan code to a keyboard buffer code (see PRM 1-892).
    Returns -1 if the supplied table, code & mods does not map to a key.
    Handles Standby keypress internally.
*/
static int handset_lookup(int code, int mods, int tableno)
{
    int modifier, buffer_code;

    DEBUGFN(2,db_printf("code = %d, mods = %d, tableno = %d\n",code,mods,tableno));

    if ((tableno >= NUMTABLES) || (code >= HANDSETCODES))
    {
        DEBUGFN(2,db_printf("bad tableno or code\n"));
        return -1;
    }

    /*
        The handset tables only have entries for Shift or Control modifiers
    */
    switch (mods)
    {
        case 0:
        {
            modifier = 0;
            break;
        }
        case KEY_MOD_SHIFT:
        {
            modifier = 1;
            break;
        }
        case KEY_MOD_CTRL:
        {
            modifier = 2;
            break;
        }
        default:
        {
            DEBUGFN(2,db_printf("bad mods\n"));
            return -1;
        }
    }

    buffer_code = (unsigned int) handset_table[tableno][code];
    if (buffer_code == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (buffer_code == PWR)
    {
        /*
            Switch on standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        _swix(Standby_Standby, _IN(0), 0);
        return -1;
    }
    else if (buffer_code == NC)
    {
        /*
            Switch off standby state
        */
        DEBUGFN(2,db_printf("n|c\n"));
        _swix(Standby_Online, _IN(0), 0);
        return -1;
    }
    else
    {
        return buffer_code;
    }
}




void handset_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    unsigned int buffer_code;

    NOT_USED(registry_number);
    NOT_USED(tag_number);

    buffer_code = handset_lookup(data[1], (data[2]&0xf8)>>3,0);

    /*
        If not in Standby mode, insert buffer_code into keyboard buffer
    */
    if ((buffer_code != -1) &&
        !(flags & HANDSET_FLAGS_STANDBY_MODE))
    {
        /*
            Special case. Need to escape £ so it doesn't look like Ctrl-F3
            May need to escape other top-bit-set characters
        */
        if (buffer_code == '£')
        {
            _swix(OS_Byte, _INR(0,2), 153, 0, 0);
        }

        _swix(OS_Byte, _INR(0,2), 153, 0, buffer_code);
        DEBUGFN(2, db_printf("BufferCode: %x\n", buffer_code));
    }
}




void handset_accept_report_packet(unsigned char report_code,
                                  unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}

