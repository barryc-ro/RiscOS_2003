/*
 * 	handset.c	- device driver code.
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "utils.h"

#include "irqs.h"
#include "ir_api.h"
#include "handset.h"
#include "veneers.h"

/*
 * Globals
 */

unsigned int ir_driver_id = 0x00000005;
unsigned int ir_driver_revision = 0x0110;

static ir_client_callbacks_t callbacks =
{
    handset_accept_data_packet,
    handset_accept_report_packet,
};


static tag_info_t tags[NUM_TAGS];

static void *private_word;

unsigned char flags=0;
static unsigned char handset_table[NUMTABLES][HANDSETCODES] =
{
            /*
                No modifiers
            */
            {
                NK,   NK,   0x9E, 0x9F,         /*             pg-   pg+   */
                0x8D, NK,   NK,   NK,           /* right                   */
                NK,   NK,   0x1E, 0x8E,         /*             home  down  */
                0x8C, 0x8F, NK,   NK,           /* left  up                */
                0x0D, NK,   0xC4, NK,           /* ok          back        */
                NK,   NK,   0xC1, NK,           /*             menu        */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '0',  '5',          /*             0     5     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '9',  '4',          /*             9     4     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '8',  '3',          /*             8     3     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '7',  '2',          /*             7     2     */
                NK,   NK,   NK,   NK,           /*                         */
                NK,   NK,   '6',  '1',          /*             6     1     */
                NC,   PWR,  0xE2, 0xD8,         /* n|c   power guide info  */
                0xCF, 0xD0, 0xDE, 0xDF,         /* sound who   rev   play  */
                0xE0, 0xE1, 0xC3, 0xD9,         /* fwd   rec   stop  pause */
                0x1B, NK,   NK,   NK            /* clear                   */
            }
};


_kernel_oserror *handset_initialise(void *pw,unsigned int reason)
{
    _kernel_oserror *err;
    unsigned int state;
    unsigned int loop;


    if (reason == 0)
    {

        private_word = pw;

        err = _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
        if (err != NULL)
        {
            err = NULL;
            state = 0;
        }

        if (state&Standby_InStandby)
        {
            flags |= HANDSET_FLAGS_STANDBY_MODE;
        }

        for (loop = 0; loop< NUM_TAGS; loop++)
        {
            tags[loop].PrivateWord = pw;
            tags[loop].tag_number = loop;
            tags[loop].ignore_keys = 0;
            tags[loop].last_buffer_code = 0xff;
            tags[loop].context.word = INACTIVE;
        }

    }

    err = ir_initialise(&callbacks,pw);
    if (!err)
    {
    }
    return err;
}



_kernel_oserror *handset_finalise(void *pw)
{
    _kernel_oserror *err=NULL;
    unsigned int loop;
    NOT_USED(pw);

    for (loop = 0; loop< NUM_TAGS; loop++)
    {
        if (tags[loop].context.word != INACTIVE)
        {
            ir_cancel_timeout(loop);
        }
    }

    err = ir_finalise();
    if (!err)
    {
    }
    return err;
}




extern void handset_power_entry(void);
int handset_power_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED(r);
    NOT_USED(pw);

DEBUGFN(3, db_printf("Entering standby\n"));
    _swix(Standby_Standby, _IN(0), 0);

    return 1;
}


extern void handset_nc_entry(void);
int handset_nc_handler(_kernel_swi_regs *r, void *pw)
{
    NOT_USED(r);
    NOT_USED(pw);

DEBUGFN(3, db_printf("Coming out of standby\n"));
    _swix(Standby_Online, _IN(0), 0);
    return 1;
}



/*
    Convert an IR handset scan code to a keyboard buffer code (see PRM 1-892).
    Returns -1 if the supplied table, code & mods does not map to a key.
    Handles Standby keypress internally.
*/
static int handset_lookup(int code, int mods, int tableno)
{
    int modifier, buffer_code;

/*
    DEBUGFN(2,db_printf("code = %d, mods = %d, tableno = %d\n",code,mods,tableno));
*/
    if ((tableno >= NUMTABLES) || (code >= HANDSETCODES))
    {
        DEBUGFN(2,db_printf("bad tableno or code\n"));
        return -1;
    }

    /*
        The handset tables only have entries for Shift or Control modifiers
    */
    switch (mods)
    {
        case 0:
        {
            modifier = 0;
            break;
        }
        case KEY_MOD_SHIFT:
        {
            modifier = 1;
            break;
        }
        case KEY_MOD_CTRL:
        {
            modifier = 2;
            break;
        }
        default:
        {
            DEBUGFN(2,db_printf("bad mods\n"));
            return -1;
        }
    }

    buffer_code = (unsigned int) handset_table[tableno][code];
    if (buffer_code == NK)
    {
        DEBUGFN(2,db_printf("not known\n"));
        return -1;
    }
    else if (buffer_code == PWR)
    {
        /*
            Switch on standby state
        */
        DEBUGFN(2,db_printf("power\n"));
        _swix(OS_AddCallBack,_INR(0,1),handset_power_entry,private_word);
        return 0xC9;
    }
    else if (buffer_code == NC)
    {
        /*
            Switch off standby state
        */
        DEBUGFN(2,db_printf("n|c\n"));
        _swix(OS_AddCallBack,_INR(0,1),handset_nc_entry,private_word);
        return 0xC9;
    }
    else
    {
        return buffer_code;
    }
}



void ir_set_timeout(int tag_number, context_t context, unsigned int delay)
{
    context.word = delay;
    tags[tag_number].context = context;

  _swix(OS_CallAfter,_INR(0,2),
        delay, timeout_preveneer, &(tags[tag_number].PrivateWord));


}


void ir_cancel_timeout(int tag_number)
{
    if (tags[tag_number].context.word != INACTIVE)
    {
        _swix(OS_RemoveTickerEvent, _INR(0,1),
              timeout_preveneer, &(tags[tag_number].PrivateWord));
        tags[tag_number].context.word = INACTIVE;
    }
}

void ir_timeout(int tag_number)
{
    context_t *context = &(tags[tag_number].context);

    if (context->word != INACTIVE)
    {
        context->word = INACTIVE;
    }
    switch (tags[tag_number].ignore_keys)
    {
        case ACCEPT_NO_KEYS:
        {
            tags[tag_number].ignore_keys = ACCEPT_NEW_KEYS;
            DEBUGFN(3,db_printf("\nNow accepting new keys\n"));
            ir_set_timeout(tag_number,tags[tag_number].context,ABS(REPEAT_DELAY-BOUNCE_DELAY));
            break;
        }
        case ACCEPT_NEW_KEYS:
        {
            tags[tag_number].ignore_keys = ACCEPT_ALL_KEYS;
            DEBUGFN(3,db_printf("\nNow accepting all keys\n"));
            break;
        }
    }
}



void handset_accept_data_packet(unsigned int registry_number,
                                unsigned char tag_number,
                                unsigned char data[3])
{
    unsigned int buffer_code;
    tag_info_t *tag = &tags[tag_number];
    context_t context = tags[tag_number].context;

    NOT_USED(registry_number);


    if (!(data[0] & 0x80))
    {
/*
        DEBUGFN(3,db_printf("NR."));
*/
        if (ACCEPT_NO_KEYS != tag->ignore_keys)
        {
            ir_cancel_timeout(tag_number);
            tag->ignore_keys = ACCEPT_THIS_KEY; /* start ignoring from the next one. */
            ir_set_timeout(tag_number, context, BOUNCE_DELAY);
        }
    }
    else
    {
/*
        DEBUGFN(3,db_printf("R."));
*/    }


    if ((ACCEPT_ALL_KEYS == tag->ignore_keys) ||
        ((ACCEPT_NEW_KEYS == tag->ignore_keys) && (!(data[0] & 0x80))) ||
        (ACCEPT_THIS_KEY == tag->ignore_keys))
    {
        if (ACCEPT_THIS_KEY == tag->ignore_keys)
        {
            tag->ignore_keys = ACCEPT_NO_KEYS;
            DEBUGFN(3,db_printf("\nNow accepting no keys\n"));

        }

        buffer_code = handset_lookup(data[1], (data[2]&0xf8)>>3,0);

        /*
            If not in Standby mode, insert buffer_code into keyboard buffer
        */
        if ((buffer_code == 0xc9) || ((buffer_code != -1) && (!(flags & HANDSET_FLAGS_STANDBY_MODE))))
        {
            /*
                Special case. Need to escape £ so it doesn't look like Ctrl-F3
                May need to escape other top-bit-set characters
            */
            if (buffer_code == '£') /* this is a pound sterling symbol */
            {
                _swix(OS_Byte, _INR(0,2), 153, 0, 0);
            }

            _swix(OS_Byte, _INR(0,2), 153, 0, buffer_code);
        }
    }
    else
    {
/*
        DEBUGFN(3,db_printf("IG."));
*/
    }

}




void handset_accept_report_packet(unsigned char report_code,
                                  unsigned char data[3])
{
    NOT_USED(data[0]);
    NOT_USED(report_code);

}

