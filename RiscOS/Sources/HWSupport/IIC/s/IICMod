; > adfs::TimSource.!IIC.IICMod

; *********************************
; ***    C h a n g e   L i s t  ***
; *********************************

; Date          Description
; ----          -----------
; 11-Mar-88     Started
; 15-Mar-88     Disable IRQs around SetC1C0 (uses IOCControlSoftCopy)
; 15-Mar-88     Added code to check for clock syncronisation
; 23-Nov-89     Added 'GET <Hdr>.File' so it assembles again
;               - no change to object
; 08-Jul-91     Look up messages in messages file
; 23-Apr-92 0.11 LRust,SWI errors no longer corrupt R1
;                 * Fixes to IIC transations for BMU
; 28-Apr-92 0.12 LRust, RxByte disables interupts for BMU
; 18-May-92 0.13 TMD - put bodges in for BMU, so interrupt latency isn't awful

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Proc
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:MsgTrans
        GET     Hdr:IIC
	GET	VersionASM

        LEADR   Module_LoadAddr

TAB     *       9
LF      *       10
FF      *       12
CR      *       13

IOCControlSoftCopy * &106       ; Address of soft copy of IOC control register

; Module workspace allocation

        ^ 0, R12

MessageFile_Block # 16
MessageFile_Open  # 4
IRQDisableFlag  # 4             ; 0 if we're talking to Alex, otherwise I_bit

IIC_WorkspaceSize * :INDEX: @

; **************** Module code starts here **********************

Module_BaseAddr

        DCD     0
        DCD     IIC_Init    -Module_BaseAddr
        DCD     IIC_Die     -Module_BaseAddr
        DCD     IIC_Service -Module_BaseAddr
        DCD     IIC_Title   -Module_BaseAddr
        DCD     IIC_HelpStr -Module_BaseAddr
        DCD     IIC_HC_Table-Module_BaseAddr
        DCD     IICSWI * Module_SWIChunkSize
        DCD     IIC_SWIHandler-Module_BaseAddr
        DCD     IIC_SWINameTable-Module_BaseAddr
        DCD     0 ; Code to manually decode swi name (not needed)

IIC_SWINameTable
IIC_Title
        =       "IIC", 0
        =       "Control", 0
        =       0

IIC_HelpStr =       "IIC",9,"$Module_MajorVersion ($Module_Date)"
        ALIGN

; *****************************************************************************

IIC_HC_Table * Module_BaseAddr

IIC_Service * Module_BaseAddr

IIC_Init
        STMDB   sp!, {lr}

        LDR     r2, [r12]               ; Hard or soft init ?
        TEQ     r2, #0
        BNE     %FT00

; Hard init

        LDR     r3, =IIC_WorkspaceSize
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        LDMVSIA sp!, {pc}

        STR     r2, [r12]

00      MOV     r12, r2

        MOV     r14, #0
        STR     r14, MessageFile_Open

        LDMIA   sp!, {pc}^

IIC_Die STMDB   sp!, {lr}
        LDR     r12, [r12]
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        ADRNE   r0, MessageFile_Block
        SWINE   XMessageTrans_CloseFile
        LDMIA   sp!, {pc}^

; *****************************************************************************
;
;       IIC_SWIHandler - Handler for my SWIs
;
; in:   R11 = SWINumber MOD 64 (only 0 is recognised)
;       R0 = device address (bit 0 set => read, clear => write)
;       R1 -> data block
;       R2 = length of data block
;
; out:  R10-R12 may be corrupted

IIC_SWIHandler ROUT
        LDR     r12, [r12]
        MOV     R10, LR
        TEQ     R11, #0                 ; we only have one SWI
        ADRNE   R0, ErrorBlock_NoSuchSWI
        ADRNE   R11, IIC_Title
        BLNE    CopyError
        ORRVSS  PC, R10, #V_bit

        Push    R14
        LDR     lr, IRQDisableFlag      ; save IRQ disable flag around operations
        Push    "lr"

        BIC     r11, r0, #1             ; r11 = address without R/W bit
        EORS    lr, r11, #IICAddress_AcornBMUMicrocontroller    ; lr = 0 if we're talking to the BMU
        EORNES  lr, r11, #IICAddress_AcornBMUMicrocontroller2
        MOVNE   lr, #I_bit
        STR     lr, IRQDisableFlag      ; 0 if talking to BMU, else I_bit

        BL      Start
        BL      TXCheckAck              ; transmit device address

        MOV     R11, R1
        MOVS    R10, R2
        BEQ     %FT30

        TST     R0, #1                  ; Z => write, NZ => read
        BNE     %FT20
10
        LDRB    R0, [R11], #1           ; read byte from data block
        BL      TXCheckAck              ; transmit, checking for ack
        SUBS    R10, R10, #1            ; decrement byte count
        BNE     %BT10                   ; loop until finished
        BEQ     %FT30                   ; then stop

20
        BL      RXByte                  ; read byte from bus
        STRB    R0, [R11], #1           ; store in data block
        SUBS    R10, R10, #1            ; is it last byte ?
        MOVNE   R0, #0                  ; no, then acknowledge with 0 bit
        MOVEQ   R0, #1                  ; yes, then don't acknowledge
        BL      ClockData               ; but always send ack clock pulse
        BNE     %BT20
30
        BL      Stop
        Pull    "lr"
        STR     lr, IRQDisableFlag      ; restore IRQ disable flag
        Pull    R14
        BICS    PC, R14, #V_bit

TXCheckAck ROUT
        Push    R14
        BL      TXByte
        BL      Acknowledge
        Pull    R14
        MOVVC   PC, R14                 ; acknowledged ok, so return

        BL      Stop                    ; error, so tidy up
        ADR     R0, ErrorBlock_IIC_NoAcknowledge
        MOV     R11, #0
        BL      CopyError
        Pull    "lr"
        STR     lr, IRQDisableFlag      ; restore IRQ disable flag
        Pull    R14                     ; pull real return address
        ORRS    PC, R14, #V_bit

        MakeInternatErrorBlock NoSuchSWI,,BadSWI
        MakeInternatErrorBlock IIC_NoAcknowledge,,NoAck

; *****************************************************************************
;
;       SetC1C0 - Set clock and data lines to values in R1 and R0 respectively
;
; out:  All registers preserved, including PSR
;

SetC1C0 ROUT
        Push    "R0-R2,R14"
        BIC     R14, R14, #Z_bit                ; indicate not checking clock
SetOrCheck
        ORR     R14, R14, #I_bit                ; disable interrupts round access to IOCControlSoftCopy
        TEQP    R14, #0

        ADD     R0, R0, R1, LSL #1              ; R0 := C0 + C1*2

        MOV     R2, #0                          ; prepare to index soft copy
        LDRB    R1, [R2, #IOCControlSoftCopy]   ; read soft copy
        BIC     R1, R1, #&03                    ; clear clock and data
        ORR     R1, R1, R0                      ; put in new clock and data
        ORR     R1, R1, #&C0                    ; make sure two test bits are
                                                ; always set to 1 !
        STRB    R1, [R2, #IOCControlSoftCopy]   ; store back to soft copy

        MOV     R2, #IOC
        STRB    R1, [R2, #IOCControl]
10
        LDREQB  R1, [R2, #IOCControl]           ; if EQ, then wait for clock
        TSTEQ   R1, #i2c_clock_bit              ; to read high
        BNE     %FT30                           ; if not checking, or it went high straight away, skip

        LDR     lr, [sp, #3*4]                  ; reload original lr
        LDR     r1, IRQDisableFlag
        ORR     lr, lr, r1
        TEQP    lr, #0                          ; restore IRQs if we're talking to BMU

20
        LDRB    R1, [R2, #IOCControl]           ; now wait for clock to go high
        TST     R1, #i2c_clock_bit
        BEQ     %BT20

30
        MOV     R0, #10                         ; delay for >= 10/2 microsecs
        BL      DoMicroDelay

        Pull    "R0-R2,PC",,^

; Set clock and data lines to R1 and R0 and then wait for clock to be high

SetC1C0CheckClock ROUT
        Push    "R0-R2,R14"
        ORR     R14, R14, #Z_bit                ; indicate checking clock
        B       SetOrCheck


; *****************************************************************************
;
;       DoMicroDelay - Delay for >= R0/2 microseconds
;
; in:   R0 = time delay in 1/2 microsecond units
;       R2 -> IOC
;
; out:  R0,R1 corrupted
;

DoMicroDelay ROUT
        Push    R14
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R1, [R2, #Timer0CL]     ; R1 := low output latch
10
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R14, [R2, #Timer0CL]    ; R14 := low output latch
        TEQ     R14, R1                 ; unchanged ?
        MOVNE   R1, R14                 ; copy anyway
        BEQ     %BT10                   ; then loop
        SUBS    R0, R0, #1              ; decrement count
        BNE     %BT10                   ; loop if not finished
        Pull    PC

; *****************************************************************************
;
;       ClockData - Clock a bit of data down the IIC bus
;
; in:   R0 = data bit
;
; out:  All registers preserved, including PSR
;

ClockData ROUT
        Push    "R1,R2,R14"

        MOV     R1, #0                  ; clock LO
        BL      SetC1C0

; Disable interrupts if not talking to BMU to ensure clock hi with data hi is only transient
; This allows BMU to detect idle condition by polling

        LDR     r1, IRQDisableFlag
        ORR     r1, r1, pc
        TEQP    r1, #0

        MOV     R1, #1                  ; clock HI
        BL      SetC1C0CheckClock

; Delay here must be >= 4.0 microsecs

        MOV     R1, #0                  ; clock LO
        BL      SetC1C0

        Pull    "R1,R2,PC",,^

; *****************************************************************************
;
;       Start - Send the Start signal
;
; out:  All registers preserved, including PSR
;

Start   ROUT
        Push    "R0-R2,R14"

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      SetC1C0

; Hold start condition for BMU

        MOV     R2, #IOC
        MOV     R0,#10
        BL      DoMicroDelay

; Delay here must be >= 4.7 microsecs

        MOV     R0, #0                  ; clock LO, data LO
        MOV     R1, #0
        BL      SetC1C0

        Pull    "R0-R2,PC",,^

; *****************************************************************************
;
;       Acknowledge - Check acknowledge after transmitting a byte
;
; out:  All registers preserved
;       V=0 => acknowledge received
;       V=1 => no acknowledge received
;

Acknowledge ROUT
        Push    "R0-R2,R14"

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      SetC1C0

; Disable interrupts if not talking to BMU to ensure clock hi with data hi is only transient
; This allows BMU to detect idle condition by polling

        MOV     R1,PC
        Push    "R1"
        LDR     r0, IRQDisableFlag
        ORR     r1, r1, r0
        TEQP    r1, #0

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SetC1C0CheckClock

; Delay here must be >= 4.0 microsecs

        MOV     R2, #IOC
        LDRB    R2, [R2, #IOCControl]   ; get the data from IOC

        MOV     R0, #0                  ; clock LO, data LO
        MOV     R1, #0
        BL      SetC1C0

        Pull    "R1"
        TEQP    PC,R1

        TST     R2, #1                  ; should be LO for correct acknowledge
        MOV     R2, PC
        BICEQ   R2, R2, #V_bit          ; clear V if correct acknowledge
        ORRNE   R2, R2, #V_bit          ; set V if no acknowledge
        TEQP    R2, #0

        Pull    "R0-R2,PC"

; *****************************************************************************
;
;       Stop - Send the Stop signal
;
; out:  All registers preserved, including PSR
;

Stop    ROUT
        Push    "R0,R1,R14"

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SetC1C0

        Pull    "R0,R1,PC",,^

; *****************************************************************************
;
;       TXByte - Transmit a byte
;
; in:   R0 = byte to be transmitted
;
; out:  All registers preserved, including PSR
;

TXByte  ROUT
        Push    "R0-R2,R14"
        MOV     R2, R0                  ; byte goes into R2
        MOV     R1, #&80                ; 2^7   the bit mask
10
        ANDS    R0, R2, R1              ; zero if bit is zero
        MOVNE   R0, #1
        BL      ClockData               ; send the bit
        MOVS    R1, R1, LSR #1
        BNE     %BT10
        Pull    "R0-R2,PC",,^

; *****************************************************************************
;
;       RXByte - Receive a byte
;
; out:  R0 = byte received
;       All other registers preserved, including PSR
;

RXByte  ROUT
        Push    "R1-R4, R14"
        MOV     R3, #0                  ; byte:=0
        MOV     R2, #IOC
        MOV     R4, #7

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      SetC1C0
10
        MOV     LR, PC
        Push    "LR"
        LDR     r0, IRQDisableFlag
        ORR     LR, LR, r0
        TEQP    LR, #0                  ; Disable ints if not talking to BMU

        MOV     R0, #1                  ; pulse clock HI
        MOV     R1, #1
        BL      SetC1C0CheckClock

        LDRB    R1, [R2, #IOCControl]   ; get the data from IOC
        AND     R1, R1, #1
        ADD     R3, R1, R3, LSL #1      ; byte:=byte*2+(IOC?0)AND1

        MOV     R0, #1                  ; return clock LO
        MOV     R1, #0
        BL      SetC1C0

        Pull    "LR"
        TEQP    PC, LR                  ; restore interrupt state

        SUBS    R4, R4, #1
        BCS     %BT10

        MOV     R0, R3                  ; return the result in R0
        Pull    "R1-R4, PC",,^

CopyError ENTRY r1-r7
        BL      open_messagefile
        EXIT    VS
        MOV     R4,R11                  ; (parameter) -> R4
CopyError0
        ADR     R1, MessageFile_Block
        MOV     R2, #0
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

message_filename
        DCB     "Resources:$.Resources.IIC.Messages", 0

        ALIGN

open_messagefile ENTRY r0-r2
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    NE
        ADR     R0, MessageFile_Block
        ADR     R1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r0, #1
        STR     r0, MessageFile_Open
        EXIT

        END
