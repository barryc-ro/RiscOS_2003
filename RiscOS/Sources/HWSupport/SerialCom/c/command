/* > command.c
 *
 *      Command line related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "command.h"
#include "error.h"
#include "msgfile.h"
#include "trace.h"


ERROR_EXTERN( NOMEM );
ERROR_EXTERN( BUFOFLO );
ERROR_EXTERN( BADPARM );

static int rx_handle = 0;
static int tx_handle = 0;
static int old_input = 0;


/*------------------------------------------------------------------------------
 * ReadArgs
 *
 *	In:	arg_string	= pointer to argument string
 *		keywords	= pointer to keyword string
 *		keybuf		= pointer to output buffer
 *		keybusz		= size of output buffer
 *
 *	Out:	returns error or fills in output buffer
 *
 *	Veneer to SWI OS_ReadArgs.
 */
#define ReadArgs( arg_string, keywords, keybuf, keybufsz )	_swix( OS_ReadArgs, _INR(0,3), keywords, arg_string, keybuf, keybufsz )


#if 0
/*------------------------------------------------------------------------------
 * command_readeval
 *
 *	In:	ptype		= pointer to value type
 *
 *	Out:	returns value
 *
 *	Reads a value output by SWI OS_ReadArgs (of the form 1 byte value type
 *	followed by 4 byte value).
 */
int
command_readeval( char *ptype )
{
	int value = *(++ptype);
	value += *(++ptype) << 8;
	value += *(++ptype) << 16;
	value += *(++ptype) << 24;
	return value;
}
#endif


/*------------------------------------------------------------------------------
 * command_readstring
 *
 *	In:	plen		= pointer to string length
 *		ppbuffer	= address of buffer pointer to fil in
 *
 *	Out:	fills in ppbuffer or returns an error
 *
 *	Returns a string output by SWI OS_ReadArgs (of the form 2 byte length
 *	followed by unterminated string). The returned string must be freed
 *	by free().
 */
_kernel_oserror *
command_readstring( char *plen, char **ppbuffer )
{
	/* Read string length. */
	int len = *plen + (*(plen+1)<<8);

	/* Allocate space for the string. */
	char *pbuffer = malloc( len + 1 );

	if ( pbuffer != NULL )
	{
		strncpy( pbuffer, plen+2, len );
		*(pbuffer+len) = '\0';
		*ppbuffer = pbuffer;
	}
	else
	{
		return ERROR( NOMEM );
	}

	return NULL;
}


static _kernel_oserror *
OpenRX( void )
{
	_kernel_oserror *err;

	/* Ignore ~DCD and ~DSR, hardware handshake. */
	err = _swix( OS_SerialOp, _INR(0,2), 0, 0x00000006, 0xFFFFFFF0 );

	/* 8 bit word, 1 stop bit, no parity. */
	if ( err == NULL ) err = _swix( OS_SerialOp, _INR(0,1), 1, 0 );

	/* Set RX baud rate to 9600. */
	if ( err == NULL ) err = _swix( OS_SerialOp, _INR(0,1), 5, 7 );

	/* Open the serial port. */
	if ( err == NULL ) err = _swix( OS_Find, _INR(0,2)|_OUT(0), 0x4F, "serial:", NULL, &rx_handle );

	/* Switch to serial input. */
	if ( err == NULL ) err = _swix( OS_Byte, _INR(0,1)|_OUT(1), 2, 1, &old_input );

	return err;
}


static void
CloseRX( void )
{
	/* Switch back to old input. */
	_swix( OS_Byte, _INR(0,1), 2, old_input );

	/* Close the serial port. */
	_swix( OS_Find, _INR(0,1), 0, rx_handle );
	rx_handle = 0;
}


static _kernel_oserror *
OpenTX( void )
{
	_kernel_oserror *err;

	/* Ignore ~DCD and ~DSR, hardware handshake. */
	err = _swix( OS_SerialOp, _INR(0,2), 0, 0x00000006, 0xFFFFFFF0 );

	/* 8 bit word, 1 stop bit, no parity. */
	if ( err == NULL ) err = _swix( OS_SerialOp, _INR(0,1), 1, 0 );

	/* Set TX baud rate to 9600. */
	if ( err == NULL ) err = _swix( OS_SerialOp, _INR(0,1), 6, 7 );

	/* Open the serial port. */
	if ( err == NULL ) err = _swix( OS_Find, _INR(0,2)|_OUT(0), 0xCF, "serial:", NULL, &tx_handle );

	return err;
}


static void
CloseTX( void )
{
	/* Close the serial port. */
	_swix( OS_Find, _INR(0,1), 0, tx_handle );
	tx_handle = 0;
}


static _kernel_oserror *
Send( char *pbytes )
{
	_kernel_oserror *err = NULL;

	TRACE( "Send: pbytes = '%s'\n" _ pbytes );

	/* Go through the string byte by byte. */
	while ( (*pbytes != '\0') && (err == NULL) )
	{
#if 1
		err = _swix( OS_BPut, _INR(0,1), *pbytes++, tx_handle );
#else
		int flags;

		err = _swix( OS_SerialOp, _INR(0,1)|_OUT(_FLAGS), 3, *pbytes++, &flags );
		if ( flags & 2 ) err = ERROR( BUFOFLO );
#endif
	}

	return err;
}


/*------------------------------------------------------------------------------
 * command_serialclose
 *
 *	In:	argc		= number of arguments
 *		arg_string	= pointer to argument string
 *
 *	Close any open serial stream.
 */
_kernel_oserror *
command_serialclose( int argc, char *arg_string )
{
	if ( tx_handle ) CloseTX();
	if ( rx_handle ) CloseRX();
	return NULL;

	NOT_USED( argc );
	NOT_USED( arg_string );
}


/*------------------------------------------------------------------------------
 * command_serialopen
 *
 *	In:	argc		= number of arguments
 *		arg_string	= pointer to argument string
 *
 *	Open the serial port for either RX or TX (but not both).
 */
_kernel_oserror *
command_serialopen( int argc, char *arg_string )
{
	_kernel_oserror *err = NULL;
	command_serialopen_keybuf keybuf;

	/* Read our arguments. */
	err = ReadArgs( arg_string, COMMAND_SERIALOPEN_KEYWORDS, (void *)&keybuf, COMMAND_SERIALOPEN_KEYBUFSZ );

	if ( err == NULL )
	{
		if ( keybuf.rx_flag )
		{
			if ( tx_handle ) CloseTX();
			err = OpenRX();
		}
		else
		{
			if ( keybuf.tx_flag )
			{
				if ( rx_handle ) CloseRX();
				err = OpenTX();
			}
			else
			{
				err = ERROR( BADPARM );
			}
		}
	}
	return err;

	NOT_USED( argc );
}


/*------------------------------------------------------------------------------
 * command_serialsend
 *
 *	In:	argc		= number of arguments
 *		arg_string	= pointer to argument string
 *
 *	Send bytes out of the serial port.
 */
_kernel_oserror *
command_serialsend( int argc, char *arg_string )
{
	_kernel_oserror *err;
	command_serialsend_keybuf *keybuf;

	TRACE( "command_serialsend: argc = %d, arg_string = '%s'\n" _ argc _ arg_string );

	keybuf = (command_serialsend_keybuf *)malloc( COMMAND_SERIALSEND_KEYBUFSZ );
	if ( keybuf != NULL )
	{
		err = ReadArgs( arg_string, COMMAND_SERIALSEND_KEYWORDS, (void *)keybuf, COMMAND_SERIALSEND_KEYBUFSZ );
		if ( err == NULL )
		{
			char *pbytes;

			err = command_readstring( keybuf->pbytes, &pbytes );
			if ( err == NULL )
			{
				err = Send( pbytes );
				free( pbytes );
			}
		}
		free( keybuf );
	}
	else
	{
		err = ERROR( NOMEM );
	}

	return err;

	NOT_USED( argc );
}
