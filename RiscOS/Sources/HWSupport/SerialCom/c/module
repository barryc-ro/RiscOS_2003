/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include "kernel.h"

#include "module.h"
#include "command.h"
#include "msgfile.h"
#include "trace.h"


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
	command_serialclose( 0, NULL );
	return NULL;

	NOT_USED( fatal );
	NOT_USED( podule );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
	return NULL;

	NOT_USED( cmd_tail );
	NOT_USED( podule_base );
	NOT_USED( pw );
}


/*------------------------------------------------------------------------------
 * module_command
 *
 *	Module command handler.
 */
_kernel_oserror *
module_command( char *arg_string, int argc, int cmd_no, void *pw )
{
	char *param = arg_string;
	_kernel_oserror *err;

	/* Find end of parameters and terminate properly. */
	while ( (*param >= ' ') && (*param != '?') ) param++;
	*param = '\0';

	TRACE( "module_command: arg_string = '%s', argc = %d, cmd_no = %d\n" _ arg_string _ argc _ cmd_no );

	/* Do the right thing.
	 */
	switch ( cmd_no )
	{
		case 0:
			err = command_serialopen( argc, arg_string );
			break;

		case 1:
			err = command_serialsend( argc, arg_string );
			break;

		case 2:
			err = command_serialclose( argc, arg_string );
			break;

		default:
			err = NULL;
			break;
	}

	return msgfile_error_lookup( err, NULL );

	NOT_USED( argc );
	NOT_USED( cmd_no );
	NOT_USED( pw );
}
