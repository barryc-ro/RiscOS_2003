/*
 * driver.h
 */

/************************************************************************/
/*              Copyright 1999 Pace Micro Technology PLC                */
/************************************************************************/

#ifndef __driver_h
#define __driver_h

/* Includes */
#include <stdint.h>
#include "Global/Keyboard.h"
#include "Global/Pointer.h"

/* Definitions */
#define DRIVER_ENABLED   (1<<0)                                                 /* Enable flag */
#define KEYBOARD_ENABLED (1<<1)                                                 /* Keyboard enable flag */
#define POINTER_ENABLED  (1<<2)                                                 /* Pointer enable flag */

#define KEYBOARD_TYPE KeyboardID_RCMM                                           /* Keyboard type */
#define POINTER_TYPE  PointerDevice_RCMM                                        /* Pointer type */
#define POINTER_NAME  "RCMM mouse"                                              /* Pointer name */

#define LONG_CUST_ID       0  /* Supplied by Philips RCS */                     /* Customer ID (long OEM messages only) */
#define SHORT_CUST_ID_ALBA 38 /* Supplied by Philips RCS */                     /* Customer ID (Alba short OEM messages only) */
#define SHORT_CUST_ID_PACE 39 /* Supplied by Philips RCS */                     /* Custoner ID (Pace short OEM messages only) */
#define SYSTEM_ID          40 /* Supplied by Philips RCS */                     /* System ID (OEM RC messages only) */

/* RCMM Standard Mode: bit masks */
#define MODE_SHIFT                      30
#define MODE_MASK                       (3u << MODE_SHIFT)

#define MODE_EXTENDED                   (0u << MODE_SHIFT)
#define MODE_MOUSE                      (1u << MODE_SHIFT)
#define MODE_KEYBOARD                   (2u << MODE_SHIFT)
#define MODE_GAMEPAD                    (3u << MODE_SHIFT)

/* RCMM Extended Mode: bit masks */
#define EXT_MODE_SHIFT                  28
#define EXT_MODE_MASK                   (3u << EXT_MODE_SHIFT)
#define EXT_MODE_MASK_1                 (2u << EXT_MODE_SHIFT)                 /* top bit only - for matching OEM_LONG_0 */

#define EXT_MODE_EXTENDED               (0u << EXT_MODE_SHIFT)
#define EXT_MODE_RESERVED               (1u << EXT_MODE_SHIFT)
#define EXT_MODE_OEM_LONG_0             (2u << EXT_MODE_SHIFT)
#define EXT_MODE_OEM_LONG_1             (3u << EXT_MODE_SHIFT)

/* RCMM Extended Extended Mode: bit masks */
#define EXT_EXT_MODE_SHIFT              26
#define EXT_EXT_MODE_MASK               (3u << EXT_EXT_MODE_SHIFT)

#define EXT_EXT_MODE_EXTENDED           (0u << EXT_EXT_MODE_SHIFT)
#define EXT_EXT_MODE_RESERVED_0         (1u << EXT_EXT_MODE_SHIFT)
#define EXT_EXT_MODE_RESERVED_1         (2u << EXT_EXT_MODE_SHIFT)
#define EXT_EXT_MODE_OEM_SHORT          (3u << EXT_EXT_MODE_SHIFT)


/* RCMM Basic mode: bit masks */
#define ADDRESS_SHIFT                   28
#define ADDRESS_MASK                    (3u << ADDRESS_SHIFT)

#define MOUSE_SPEED_SHIFT               24
#define MOUSE_SPEED_MASK                (15u << MOUSE_SPEED_SHIFT)

#define MOUSE_DIRECTION_SHIFT           20
#define MOUSE_DIRECTION_MASK            (15u << MOUSE_DIRECTION_SHIFT)

#define KEYBOARD_BREAK_SHIFT            27
#define KEYBOARD_BREAK_MASK             (1u << KEYBOARD_BREAK_SHIFT)

#define KEYBOARD_KEY_SHIFT              20
#define KEYBOARD_KEY_MASK               (127u << KEYBOARD_KEY_SHIFT)

/* RCMM OEM Long ID Mode: bit masks */
#define OEM_LONG_CUST_ID_SHIFT          20
#define OEM_LONG_CUST_ID_MASK           (511u << OEM_LONG_CUST_ID_SHIFT)

/* RCMM OEM Short ID Mode: bit masks */
#define OEM_SHORT_CUST_ID_SHIFT         20
#define OEM_SHORT_CUST_ID_MASK          (63u << OEM_SHORT_CUST_ID_SHIFT)

/* RCMM OEM Modes: common bit masks */
#define OEM_SUBMODE_SHIFT               18
#define OEM_SUBMODE_MASK                (3u << OEM_SUBMODE_SHIFT)

#define OEM_SUBMODE_REMOTE              (0u << OEM_SUBMODE_SHIFT)
#define OEM_SUBMODE_MOUSE               (1u << OEM_SUBMODE_SHIFT)
#define OEM_SUBMODE_KEYBOARD            (2u << OEM_SUBMODE_SHIFT)
#define OEM_SUBMODE_GAMEPAD             (3u << OEM_SUBMODE_SHIFT)

#define OEM_ADDRESS_SHIFT               16
#define OEM_ADDRESS_MASK                (3u << OEM_ADDRESS_SHIFT)

#define OEM_REMOTE_SYSTEM_SHIFT         8
#define OEM_REMOTE_SYSTEM_MASK          (255u << OEM_REMOTE_SYSTEM_SHIFT)

#define OEM_REMOTE_OPTDATA_SHIFT        0
#define OEM_REMOTE_OPTDATA_MASK         (255u << OEM_REMOTE_OPTDATA_SHIFT)

#define OEM_MOUSE_SPEED_SHIFT           12
#define OEM_MOUSE_SPEED_MASK            (15u << OEM_MOUSE_SPEED_SHIFT)

#define OEM_MOUSE_DIRECTION_SHIFT       8
#define OEM_MOUSE_DIRECTION_MASK        (15u << OEM_MOUSE_DIRECTION_SHIFT)

#define OEM_KEYBOARD_BREAK_SHIFT        15
#define OEM_KEYBOARD_BREAK_MASK         (1u << OEM_KEYBOARD_BREAK_SHIFT)

#define OEM_KEYBOARD_KEY_SHIFT          8
#define OEM_KEYBOARD_KEY_MASK           (127u << OEM_KEYBOARD_KEY_SHIFT)


/* Public globals */
extern int flags;                                                               /* General flags word */
extern int i_handle;                                                            /* Serial stream handle */

/* Public functions */
void driver_disable(void);
void driver_device_data_present(void);
void driver_finalise(void);
_kernel_oserror *driver_initialise(void);
void driver_set_timeout(void);
void driver_cancel_timeout(void);

/* Types */
typedef struct pointer_record                                                   /* Mouse enumeration record */
{
  struct pointer_record *next;
  uint32_t device_flags;
  uint8_t device_type;
  char device_name;  /* Variable length char array, 0 terminated */
} pointer_record_t;

/* Functions */
extern int module_pointerv_handler(_kernel_swi_regs *r, void *pw);
extern int module_keyv_handler(_kernel_swi_regs *r, void *pw);
extern int module_upcall_handler(_kernel_swi_regs *r, void *pw);

#endif

/* End of driver.h */
