/*
 * driver.c
 */

/************************************************************************/
/*              Copyright 1999 Pace Micro Technology PLC                */
/************************************************************************/

/* Includes */
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include "kernel.h"
#include "swis.h"

#include "Global/IOCtl.h"
#include "module.h"
#include "header.h"
#include "driver.h"
#include "key.h"
#include "mouse.h"


/* Definitions */
#define PORT "2"                                                                /* Serial port number */
#define BAUD "9600"                                                             /* Baud rate to use; our IR micro uses 9600  */

#define SERIAL_PORT  "Devices#baud" BAUD ";data8;stop1;noparity;nohandshake;size64;thres1:$.Serial" PORT
#define SERIAL_INPUT (0x4f)

/* Global variables */
int flags = 0;                                                                  /* General flags word */
int i_handle = -1;                                                              /* DeviceFS serial stream handle */

static int address = -1;                                                        /* RCMM device address */
static _kernel_oserror *error;                                                  /* Error returns */

extern void *mod_wsp;

/* Function prototypes */
static unsigned int driver_message_length(unsigned int message);
static void driver_handle_message(unsigned int message);
static void driver_handle_extended_message(unsigned int message);
static void driver_handle_extended_extended_message(unsigned int message);
static void driver_handle_basic_mouse(unsigned int message);
static void driver_handle_basic_keyboard(unsigned int message);
static void driver_handle_basic_gamepad(unsigned int message);
static void driver_handle_oem_long_message(unsigned int message);
static void driver_handle_oem_short_message(unsigned int message);
static void driver_handle_oem_message(unsigned int message);
static void driver_handle_oem_remotectrl(unsigned int message);
static void driver_handle_oem_mouse(unsigned int message);
static void driver_handle_oem_keyboard(unsigned int message);
static void driver_handle_oem_gamepad(unsigned int message);

/*----------------------------------------------------------------------------*/

/* Functions */

_kernel_oserror *driver_flush_buffer(int handle)
{
  ioctl_t ioctlblock;

  if (handle > 0 && handle < 256)                                               /* Check that specified stream handle is valid */
  {
    ioctlblock.reason   = IOCTL_SERIAL_FLUSH_STREAM;                            /* Flush stream reason code */
    ioctlblock.group    = IOCTL_GROUP_SERIAL;                                   /* IOCtl group code (serial) */
    ioctlblock.reserved = 0;
    ioctlblock.read     = 0;                                                    /* Read & write flags */
    ioctlblock.write    = 1;
    ioctlblock.data     = 0;                                                    /* Data, in this case there isn't any */

    error = _swix(OS_Args, _INR(0, 2), OSArgs_IOCtl, handle, &ioctlblock);      /* Flush specified stream */
  }
  else
  {
    return NULL;                                                                /* Exit cleanly if stream handle is invalid */
  }

  return error;                                                                 /* Exit, returning the error if applicable */
}


void driver_disable(void)
{
  key_finalise();
  mouse_finalise();

  if (i_handle != -1)
  {
    driver_flush_buffer(i_handle);                                              /* Flush the input buffer */
    _swix(OS_Find, _INR(0, 1), 0, i_handle);                                    /* Close serial input stream */
    i_handle = -1;                                                              /* Invalidate the handle */
  }

  address = -1;                                                                 /* Invalidate the device address */

  _swix(OS_Release, _INR(0, 2), UpCallV, module_upcall_entry, mod_wsp);         /* Release UpCallV vector */
  _swix(OS_Release, _INR(0, 2), KeyV, module_keyv_entry, mod_wsp);              /* Release KeyV vector */
  _swix(OS_Release, _INR(0, 2), PointerV, module_pointerv_entry, mod_wsp);      /* Release PointerV vector */
  dprintf((NULL, "Driver disabled\n"));
}


_kernel_oserror *driver_enable(void)
{
  i_handle = -1;                                                                /* Reset serial stream handle */

  /* Vector claims */
  error = _swix(OS_Claim, _INR(0, 2), UpCallV, module_upcall_entry, mod_wsp);
  if (!error)
    error = _swix(OS_Claim, _INR(0, 2), KeyV, module_keyv_entry, mod_wsp);
  if (!error)
    error = _swix(OS_Claim, _INR(0, 2), PointerV, module_pointerv_entry, mod_wsp);

  /* Serial streams */
  if (!error)
    error = _swix(OS_Find, _INR(0, 1) | _OUT(0), SERIAL_INPUT,
                                                 SERIAL_PORT, &i_handle);       /* Open serial input stream */
  dprintf(("Serial_0", "Stream handle: input = %d\n", i_handle));

  /* Serial setup */
  if (!error)
    error = driver_flush_buffer(i_handle);                                      /* Flush the serial input buffer */

  if (error)
  {
    driver_disable();                                                           /* If an error occurred, then tidy up */
  }
  else
  {
    flags |= DRIVER_ENABLED;                                                    /* Set our "enabled" flag */
    dprintf((NULL, "Driver enabled\n"));
  }

  return error;                                                                 /* Exit, returning the error if applicable */
}


void driver_finalise(void)
{
  if (flags & DRIVER_ENABLED)                                                   /* If we're enabled, then disable the driver */
    driver_disable();
}


_kernel_oserror *driver_initialise(void)
{
  error = driver_enable();                                                      /* Enable the driver */
  if (!error)
    error = _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyboardPresent,
                  KEYBOARD_TYPE, KeyV);                                         /* Inform the Kernel of the new keyboard */

  return error;                                                                 /* Exit, returning the error if applicable */
}


void driver_device_data_present(void)
{
  unsigned int byte, extent;
  static unsigned int byte_count = 0, message = 0, bytes_expected = 0;

  _swix(OS_Args, _INR(0, 1) | _OUT(2), OSArgs_Extent, i_handle, &extent);       /* Is there really any data? */

  while (extent)                                                                /* Iterate until all bytes read */
  {
    _swix(OS_BGet, _IN(1) | _OUT(0), i_handle, &byte);                          /* Obtain the byte */
    dprintf(("Serial_1", "Byte read = 0x%X\n", byte));

    message |= (byte << (24 - byte_count * 8));                                 /* Add new bytes to the message */
    byte_count++;                                                               /* Increment counter */
    if (byte_count == 2)
        bytes_expected = driver_message_length(message);                        /* Calculate how many bytes are expected */

    if (byte_count == bytes_expected)                                           /* We have a whole message, so... */
    {
      if (flags & KEYBOARD_ENABLED)                                             /* ...if we're enabled... */
      {
        dprintf(("RCMM_0", "Complete message; passing to handler...\n"));
        driver_handle_message(message);                                         /* ...then decode the message */
      }
      message = 0;                                                              /* Reset the status variables */
      byte_count = 0;
      bytes_expected = 0;
    }
    _swix(OS_Args, _INR(0, 1) | _OUT(2), OSArgs_Extent, i_handle, &extent);     /* Any more data? */
  }
}


static bool driver_valid_device_address(unsigned int message, unsigned int mask, unsigned int shift)
{
  if (address == -1)                                                            /* If this is the first message we've seen... */
  {
    address = (message & mask) >> shift;                                        /* ...then store the device address */
    dprintf(("RCMM_1,RCMM_4", "First message: device address set to '%d'\n", address));
  }

  if (((message & mask) >> shift) == address)                                   /* Does the message match the stored address? */
    return true;                                                                /* If so, return TRUE... */
  else
    return false;                                                               /* ...otherwise return FALSE */
}


/* Given the first two bytes of a message, how long will it be in total? */
static unsigned int driver_message_length(unsigned int message)
{
  if ((message & MODE_MASK) == MODE_EXTENDED)
  {
    if ((message & EXT_MODE_MASK_1) == EXT_MODE_OEM_LONG_0 ||
        (message & EXT_MODE_MASK) == EXT_MODE_EXTENDED && (message & EXT_EXT_MODE_MASK) == EXT_EXT_MODE_OEM_SHORT)
    {
      if ((message & OEM_SUBMODE_MASK) == OEM_SUBMODE_REMOTE)                   /* OEM remote messages are 4 bytes */
        return 4;
    }
    return 3;                                                                   /* Other OEM & extended are 3 bytes */
  }
  else
    return 2;                                                                   /* Non-extended are 2 bytes */
}


static void driver_handle_message(unsigned int message)
{
  switch (message & MODE_MASK)                                                  /* Decode the message mode */
  {
    case MODE_EXTENDED:                                                         /* Extended RCMM mode */
      dprintf(("RCMM_1", "** Extended RCMM message **\n"));
      driver_handle_extended_message(message);                                  /* Call the handler */
      break;

    case MODE_MOUSE:                                                            /* Basic mouse mode */
      dprintf(("RCMM_1", "** Basic Mouse RCMM message **\n"));
      if (driver_valid_device_address(message, ADDRESS_MASK, ADDRESS_SHIFT))    /* If the device address matches ours... */
        driver_handle_basic_mouse(message);                                     /* ...then call the handler */
      break;

    case MODE_KEYBOARD:                                                         /* Basic keyboard mode */
      dprintf(("RCMM_1", "** Basic Keyboard RCMM message **\n"));
      if (driver_valid_device_address(message, ADDRESS_MASK, ADDRESS_SHIFT))    /* If the device address matches ours... */
        driver_handle_basic_keyboard(message);                                  /* ...then call the handler */
      break;

    case MODE_GAMEPAD:                                                          /* Basic gamepad mode */
      dprintf(("RCMM_1", "** Basic Gamepad RCMM message **\n"));
      if (driver_valid_device_address(message, ADDRESS_MASK, ADDRESS_SHIFT))    /* If the device address matches ours... */
        driver_handle_basic_gamepad(message);                                   /* ...then call the handler */
      break;
  }
}


static void driver_handle_extended_message(unsigned int message)
{
  switch (message & EXT_MODE_MASK)                                              /* Decode the extended message mode */
  {
    case EXT_MODE_EXTENDED:
      dprintf(("RCMM_2", "** Extended Extended RCMM message **\n"));
      driver_handle_extended_extended_message(message);                         /* Doubly-extended RCMM mode */
      break;

    case EXT_MODE_RESERVED:
      dprintf(("RCMM_2", "** Extended Reserved RCMM message **\n"));
      /* Not handled */                                                         /* Reserved in RCMM protocol */
      break;

    case EXT_MODE_OEM_LONG_0:
    case EXT_MODE_OEM_LONG_1:
      dprintf(("RCMM_2", "** OEM Long ID RCMM message **\n"));
      driver_handle_oem_long_message(message);                                  /* OEM Long ID mode */
      break;
  }
}


static void driver_handle_extended_extended_message(unsigned int message)
{
  switch (message & EXT_EXT_MODE_MASK)                                          /* Decode the doubly-extended message mode */
  {
    case EXT_EXT_MODE_EXTENDED:
      dprintf(("RCMM_3", "** Extended Extended Extended RCMM message **\n"));
      /* Not handled */                                                         /* Triply-extended RCMM mode; no modes defined */
      break;

    case EXT_EXT_MODE_RESERVED_0:
    case EXT_EXT_MODE_RESERVED_1:
      dprintf(("RCMM_3", "** Extended Extended Reserved RCMM message **\n"));
      /* Not handled */                                                         /* Reserved in RCMM protocol */
      break;

    case EXT_EXT_MODE_OEM_SHORT:
      dprintf(("RCMM_3", "** OEM Short ID RCMM message **\n"));
      driver_handle_oem_short_message(message);                                 /* OEM Short ID mode */
      break;
  }
}


static void driver_handle_basic_mouse(unsigned int message)
{
  int speed = (message & MOUSE_SPEED_MASK) >> MOUSE_SPEED_SHIFT;                /* Obtain the mouse speed from the RCMM message */
  int direction = (message & MOUSE_DIRECTION_MASK) >> MOUSE_DIRECTION_SHIFT;    /* And the direction of travel */

  mouse_handle_mouse(speed, direction);                                         /* Decode the speed and direction */
}


static void driver_handle_basic_keyboard(unsigned int message)
{
  int direction = message & KEYBOARD_BREAK_MASK ? KeyV_KeyUp : KeyV_KeyDown;    /* Is it a key make or a key break? */
  int key = (message & KEYBOARD_KEY_MASK) >> KEYBOARD_KEY_SHIFT;                /* And which key is it? */

  key_handle_key(direction, key);                                               /* Decode the key press */
}


static void driver_handle_basic_gamepad(unsigned int message)
{
  /* Unsupported */
  return;
}


static void driver_handle_oem_long_message(unsigned int message)
{
  if (((message & OEM_LONG_CUST_ID_MASK) >> OEM_LONG_CUST_ID_SHIFT) == LONG_CUST_ID)
    driver_handle_oem_message(message);                                         /* Pass on to the general OEM message handler */
}


static void driver_handle_oem_short_message(unsigned int message)
{
  if (((message & OEM_SHORT_CUST_ID_MASK) >> OEM_SHORT_CUST_ID_SHIFT) == SHORT_CUST_ID)
    driver_handle_oem_message(message);                                         /* Pass on to the general OEM message handler */
}


static void driver_handle_oem_message(unsigned int message)
{
  switch (message & OEM_SUBMODE_MASK)                                           /* Decode the OEM message mode */
  {
    case OEM_SUBMODE_REMOTE:                                                    /* OEM remote control message */
      dprintf(("RCMM_4", "** OEM Remote Control message **\n"));
      if (driver_valid_device_address(message, OEM_ADDRESS_MASK, OEM_ADDRESS_SHIFT))
        driver_handle_oem_remotectrl(message);                                  /* Call the handler */
      break;

    case OEM_SUBMODE_MOUSE:                                                     /* OEM mouse message */
      dprintf(("RCMM_4", "** OEM Mouse message **\n"));
      if (driver_valid_device_address(message, OEM_ADDRESS_MASK, OEM_ADDRESS_SHIFT))
        driver_handle_oem_mouse(message);                                       /* Call the handler */
      break;

    case OEM_SUBMODE_KEYBOARD:                                                  /* OEM keyboard message */
      dprintf(("RCMM_4", "** OEM Keyboard message **\n"));
      if (driver_valid_device_address(message, OEM_ADDRESS_MASK, OEM_ADDRESS_SHIFT))
        driver_handle_oem_keyboard(message);                                    /* Call the handler */
      break;

    case OEM_SUBMODE_GAMEPAD:                                                   /* OEM gamepad message */
      dprintf(("RCMM_4", "** OEM Gamepad message **\n"));
      if (driver_valid_device_address(message, OEM_ADDRESS_MASK, OEM_ADDRESS_SHIFT))
        driver_handle_oem_gamepad(message);                                     /* Call the handler */
      break;
  }
}


static void driver_handle_oem_remotectrl(unsigned int message)
{
  int system = (message & OEM_REMOTE_SYSTEM_MASK) >> OEM_REMOTE_SYSTEM_SHIFT;
  int data = (message & OEM_REMOTE_OPTDATA_MASK) >> OEM_REMOTE_OPTDATA_SHIFT;

  if (system == SYSTEM_ID)                                                      /* Check the system ID is ours */
    key_handle_rc(KeyV_KeyDown, data);                                          /* If so, process the RC data */
}


static void driver_handle_oem_mouse(unsigned int message)
{
  int speed = (message & OEM_MOUSE_SPEED_MASK) >> OEM_MOUSE_SPEED_SHIFT;        /* Obtain the mouse speed from the RCMM message */
  int direction = (message & OEM_MOUSE_DIRECTION_MASK) >> OEM_MOUSE_DIRECTION_SHIFT;

  mouse_handle_mouse(speed, direction);                                         /* Decode the speed and direction */
}


static void driver_handle_oem_keyboard(unsigned int message)
{
  int direction = message & OEM_KEYBOARD_BREAK_MASK ? KeyV_KeyUp : KeyV_KeyDown;
  int key = (message * OEM_KEYBOARD_KEY_MASK) >> OEM_KEYBOARD_KEY_SHIFT;

  key_handle_key(direction, key);
}


static void driver_handle_oem_gamepad(unsigned int message)
{
  /* Unsupported */
  return;
}

/* End of driver.c */
