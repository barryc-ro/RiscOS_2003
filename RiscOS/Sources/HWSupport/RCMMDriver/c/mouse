/*
 * mouse.c
 */

/************************************************************************/
/*              Copyright 1999 Pace Micro Technology PLC                */
/************************************************************************/

/* Includes */
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "kernel.h"
#include "swis.h"

#include "header.h"
#include "mouse.h"
#include "module.h"

/* Definitions */
#define MOUSE_TIMEOUT 6 /* centi-seconds */

/* Macros */

/* Global variables */
static int ptr_x_offset = 0, ptr_y_offset = 0;                                  /* Relative pointer offsets */
static int x_1, y_1;                                                            /* Filtered (calculated) pointer offsets */
static bool have_previous_coords = false;                                       /* Flag to enable/disable filtering appropriately */

/* Function prototypes */
static void mouse_set_timeout(void);
static void mouse_cancel_timeout(void);

/* Mouse speed table (as defined in the RCMM protocol documentation) */
static unsigned char speed_table[16] =
{
  1, 2, 3, 4, 5, 6, 8, 10, 12, 16, 22, 30, 40, 54, 72, 127
};

/* Encoded mouse direction table (as defined in the RCMM protocol documentation) */
static signed char direction_table[16][2] =
{
  { 2,  0},
  { 2,  1},
  { 2,  2},
  { 1,  2},
  { 0,  2},
  {-1,  2},
  {-2,  2},
  {-2,  1},
  {-2,  0},
  {-2, -1},
  {-2, -2},
  {-1, -2},
  { 0, -2},
  { 1, -2},
  { 2, -2},
  { 2, -1}
};

void mouse_handle_mouse(int speed, int direction)
{
  int x, y;

  speed = speed_table[speed];                                                   /* Obtain the speed from the table */
  x = (speed * direction_table[direction][0]) / 2;                              /* Calculate the X offset */
  y = (speed * direction_table[direction][1]) / 2;                              /* Calculate the Y offset */

  if (have_previous_coords)                                                     /* If we have the old coordinates available... */
  {
    x_1 = (x_1 + x) / 2;                                                        /* ...then apply the filtering algorithm... */
    y_1 = (y_1 + y) / 2;
  }
  else
  {
    have_previous_coords = true;                                                /* ...otherwise just use the raw values */
    x_1 = x;
    y_1 = y;
  }

  ptr_x_offset += x_1;                                                          /* Update the pointer offsets appropriately */
  ptr_y_offset += y_1;

  mouse_set_timeout();                                                          /* Schedule a mouse timeout */
}


void mouse_status(int *x, int *y)
{
  *x = ptr_x_offset;                                                            /* Return the current X offset */
  *y = ptr_y_offset;                                                            /* Return the current Y offset */

  ptr_x_offset = ptr_y_offset = 0;                                              /* Reset both offsets */
}


void mouse_reset(void)
{
  ptr_x_offset = ptr_y_offset = 0;                                              /* Reset the state of the mouse world */
  have_previous_coords = false;
}


void mouse_finalise(void)
{
  mouse_cancel_timeout();                                                       /* Cancel any pending mouse timeout */
  mouse_reset();                                                                /* Reset the internal mouse state */
}


/* Timeout handling */
static bool timeout_pending = false;

static void mouse_set_timeout(void)                                             /* Timeout flag */
{
  mouse_cancel_timeout();                                                       /* Cancel any previously scheduled timeout */
  if (_swix(OS_CallAfter, _INR(0, 2), MOUSE_TIMEOUT, mouse_timeout_entry, mod_wsp) == NULL);
    timeout_pending = true;                                                     /* And schedule the new timeout */
}


static void mouse_cancel_timeout(void)
{
  if (timeout_pending)                                                          /* If there's a timeout currently scheduled... */
  {
    _swix(OS_RemoveTickerEvent, _INR(0, 1), mouse_timeout_entry, mod_wsp);      /* ...then remove the event... */
    timeout_pending = false;                                                    /* ...and reset our pending flag */
  }
}


_kernel_oserror *mouse_timeout_handler(_kernel_swi_regs *r, void *pw)
{
  timeout_pending = false;                                                      /* We're handling the timeout: reset the flag */
  have_previous_coords = false;                                                 /* Now we can't rely on the old coordinates */
  return NULL;
}

/* End of mouse.c */
