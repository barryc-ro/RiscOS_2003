/*
 * key.c
 */

/************************************************************************/
/*              Copyright 1999 Pace Micro Technology PLC                */
/************************************************************************/

/* Includes */
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "kernel.h"
#include "swis.h"
#include "bitstring.h"

#include "header.h"
#include "key.h"
#include "module.h"
#include "driver.h"

/* Definitions */
#define RSVD 0xFF     /* Reserved keys that have no mapping */
#define NEQV 0xFF     /* Keys in RCMM that have no RISC OS equivalent */
#define UDEF 0xFF     /* Keys that are undefined (although these do have valid mappings defined by Philips) */

#define MAX_KEYS_KEYBOARD   129
#define MAX_KEYS_REMOTECTRL 256
#define MAX_KEYS (MAX_KEYS_KEYBOARD + MAX_KEYS_REMOTECTRL)

#define KEYBOARD_TIMEOUT 20 /* centi-seconds */

/* Locals */
static bitstr_t bit_decl(key_state, MAX_KEYS);   /* Bitfield of key/button states; 0 = up, 1 = down */

/* Macro definitions */
#define members(a) ((sizeof (a))/(sizeof (a[0])))

/* Function prototypes */
static void key_set_timeout(void);
static void key_cancel_timeout(void);
static void key_all_keys_up(void);

/* Key mapping table: maps RCMM key codes -> RISC OS low-level key codes.  The RCMM key code
 * is used as an index into this array containing the RISC OS low-level key codes.  (For remote
 * control keys an offset is added to reference the table locations that contain the remote control
 * mapping codes.)
 */

static unsigned char mapping_table[MAX_KEYS] =
{
  /* Keyboard */
  RSVD, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,       /*   0 ->   7  =>  None        -> F6           */
  0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, NEQV, NEQV,       /*   8 ->  15  =>  F7          -> F14          */
  NEQV, NEQV, NEQV, NEQV, 0x10, 0x11, 0x12, 0x13,       /*  16 ->  23  =>  F15         -> '3'          */
  0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,       /*  24 ->  31  =>  '4'         -> '-'          */
  0x1C, 0x1E, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B,       /*  32 ->  39  =>  '='         -> 'T'          */
  0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33,       /*  40 ->  47  =>  'Y'         -> '\'          */
  0x5D, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42,       /*  48 ->  55  =>  Caps        -> 'J'          */
  0x43, 0x44, 0x45, 0x46, 0x47, 0x4C, 0x4E, 0x4F,       /*  56 ->  63  => 'K'          -> 'X'          */
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,       /*  64 ->  71  => 'C'          -> '/'          */
  0x58, 0x6F, 0x3B, 0x68, 0x5E, 0x5F, 0x60, 0x69,       /*  72 ->  79  =>  Shift (R)   -> Win95 (R)    */
  0x6A, 0x61, 0x0D, 0x0E, 0x0F, 0x1F, 0x20, 0x21,       /*  80 ->  87  =>  Win95 App   -> Page Up      */
  0x34, 0x35, 0x36, NEQV, NEQV, NEQV, 0x1D, 0x59,       /*  88 ->  95  =>  Delete      -> Arrow Up     */
  0x4D, 0x62, 0x63, 0x64, 0x22, 0x23, 0x24, 0x3A,       /*  96 -> 103  =>  UK '\'      -> - (Num)      */
  0x37, 0x38, 0x39, 0x4B, 0x48, 0x49, 0x4A, 0x5A,       /* 104 -> 111  =>  7 (Num)     -> 1 (Num)      */
  0x5B, 0x5C, 0x67, 0x65, 0x66, NEQV, 0x6E, NEQV,       /* 112 -> 119  =>  2 (Num)     -> K107         */
  0x6B, 0x6C, 0x6D, NEQV, NEQV, 0x71, 0x72, 0x70,       /* 120 -> 127  =>  No Convert  -> Left (Mouse) */
  0x90,                                                 /* 128         =>  Alba's `~ key               */

  /* Remote control */
  0x1A, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,       /*   0 ->   7  =>  '0'         -> '7'          */
  0x18, 0x19, 0xD0, UDEF, 0xD1, 0xD2, UDEF, UDEF,       /*   8 ->  15  =>  '8'         -> <undefined>  */
  0xD3, 0xD4, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  16 ->  23  =>  Volume +    -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  24 ->  31  =>  <undefined> -> <undefined>  */
  0xD5, 0xD6, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  32 ->  39  =>  Programme + -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, 0xD7,       /*  40 ->  47  =>  <undefined> -> Internet     */
  0x95, UDEF, 0x96, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  48 ->  55  =>  Toolbar     -> <undefined>  */
  0xD8, UDEF, UDEF, UDEF, 0xD9, UDEF, UDEF, 0x47,       /*  56 ->  63  =>  AV          -> Select (pad) */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  64 ->  71  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /*  72 ->  79  =>  <undefined> -> <undefined>  */
  0xDA, UDEF, UDEF, UDEF, 0xDB, UDEF, UDEF, UDEF,       /*  80 ->  87  =>  Stereo/Mono -> <undefined>  */
  0x59, 0x63, 0x62, 0x64, UDEF, UDEF, UDEF, UDEF,       /*  88 ->  95  =>  Up (pad)    -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, 0xCA,       /*  96 -> 103  =>  <undefined> -> Hold/Right   */
  UDEF, UDEF, UDEF, UDEF, UDEF, 0xDC, 0xDD, 0xDE,       /* 104 -> 111  =>  <undefined> -> Fastext (Y)  */
  0xDF, 0xE0, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 112 -> 119  =>  Fastext (B) -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, 0x59,       /* 120 -> 127  =>  <undefined> -> Time/Up      */
  UDEF, 0x63, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 128 -> 135  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 136 -> 143  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 144 -> 151  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 152 -> 159  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 160 -> 167  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 168 -> 175  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 176 -> 183  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 184 -> 191  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 192 -> 199  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 200 -> 207  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 208 -> 215  =>  <undefined> -> <undefined>  */
  0xE1, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 216 -> 223  =>  Expand      -> <undefined>  */
  UDEF, UDEF, UDEF, 0x62, UDEF, UDEF, UDEF, UDEF,       /* 224 -> 231  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, 0xE2, UDEF, UDEF, UDEF,       /* 232 -> 239  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF,       /* 240 -> 247  =>  <undefined> -> <undefined>  */
  UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF, UDEF        /* 248 -> 255  =>  <undefined> -> <undefined>  */
};

/*----------------------------------------------------------------------------*/

/* Functions */

int key_lookup(unsigned int code)
{
  int key_no = -1;

  if (code >= MAX_KEYS)                                                         /* Range checking */
    return -1;                                                                  /* Exit if out of range; -1 indicates invalid */

  key_no = (int)mapping_table[code];                                            /* Obtain the low-level key number */
  if (key_no == RSVD || key_no == UDEF || key_no == NEQV)                       /* If reserved, undefined or no equivalent... */
    return -1;                                                                  /* ...then return -1, indicating no key found */

  return key_no;                                                                /* (Otherwise) return the low-level key number */
}


void key_handle_key(int direction, int key)
{
  int first_key_down;
  int riscos_key = key_lookup(key);                                             /* Find the RISC OS low-level key number */

  if (direction == KeyV_KeyUp)                                                  /* Work out whether it's a key-up or key-down */
  {
    /* Key-up event */
    if (bit_test(key_state, key))                                               /* If key-up and key was previously down... */
    {
      bit_clear(key_state, key);                                                /* ...mark as up in the key state table... */

      bit_ffs(key_state, MAX_KEYS, &first_key_down);                            /* Timeout handling: are any keys pressed? */
      if (first_key_down == -1)                                                 /* If all keys are released... */
        key_cancel_timeout();                                                   /* ...then cancel the timeout */
    }
    else
      riscos_key = -1;                                                          /* ...otherwise mark as invalid */
  }
  else
  {
    /* Key-down event */
    if (!bit_test(key_state, key))                                              /* If key-down and key was previously up... */
      bit_set(key_state, key);                                                  /* ...mark as down in the key state table... */
    else
      riscos_key = -1;                                                          /* ...otherwise mark as invalid */
  }

  if (riscos_key != -1)                                                         /* If not an invalid RISC OS key... */
    _swix(OS_CallAVector, _INR(0, 1) | _IN(9), direction, riscos_key, KeyV);    /* ...notify the kernel of the key state */

  if (direction == KeyV_KeyDown)
    key_set_timeout();                                                          /* Schedule a new timeout */
}


void key_handle_rc(int direction, int key)
{
  key += MAX_KEYS_KEYBOARD;                                                     /* Add the RC table offset */
  if (!bit_test(key_state, key))                                                /* If key isn't already down... */
    key_all_keys_up();                                                          /* ...then reset all keys */

  key_handle_key(direction, key);                                               /* Handle remote control button presses */
}


void key_finalise(void)
{
  key_cancel_timeout();                                                         /* Cancel any pending keyboard timeout */
  key_all_keys_up();                                                            /* Restore all keys to the "up" state */
}


/* Timeout handling */
static bool timeout_pending = false;                                            /* Timeout flag */

static void key_set_timeout(void)
{
  key_cancel_timeout();                                                         /* Cancel any previously scheduled timeout */
  if (_swix(OS_CallAfter, _INR(0, 2), KEYBOARD_TIMEOUT, key_timeout_entry, mod_wsp) == NULL)
    timeout_pending = true;                                                     /* And schedule the new timeout */
}


static void key_cancel_timeout(void)
{
  if (timeout_pending)                                                          /* If there's a timeout currently scheduled... */
  {
    _swix(OS_RemoveTickerEvent, _INR(0, 1), key_timeout_entry, mod_wsp);        /* ...then remove the event... */
    timeout_pending = false;                                                    /* ...and reset our pending flag */
  }
}


_kernel_oserror *key_timeout_handler(_kernel_swi_regs *r, void *pw)
{
  timeout_pending = false;                                                      /* We're handling the timeout; reset the flag */
  key_all_keys_up();                                                            /* Restore all keys to the "up" state */
  return NULL;
}


static void key_all_keys_up(void)
{
  for (;;)                                                                      /* Start to restore all keys to the "up" state */
  {
    int key, riscos_key;

    bit_ffs(key_state, MAX_KEYS, &key);                                         /* Find the next key held down in the key table */
    if (key == -1)                                                              /* If there aren't any... */
       break;                                                                   /* ...then exit; all keys have been released */

    riscos_key = key_lookup(key);                                               /* Otherwise obtain the RISC OS key number */
    if (riscos_key != -1)                                                       /* If not an invalid RISC OS key... */
      _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyUp, riscos_key, KeyV); /* ...notify the kernel that the key is released */

    bit_clear(key_state, key);                                                  /* Then update the key state table appropriately */
  }
}

/* End of key.c */
