/*
 * module.c
 */

/************************************************************************/
/*              Copyright 1999 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#include "Global/Upcall.h"
#include "Global/Services.h"
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "driver.h"
#include "key.h"
#include "mouse.h"

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

/* Module housekeeping globals */
void   *mod_wsp = NULL;

/* Currently selected keyboard layout - bit of a layering violation */
int    current_keyboard;

/*----------------------------------------------------------------------------*/

/* Functions */

_kernel_oserror * module_finalise(int fatal, int podule, void *pw)
{
  driver_finalise();                                                            /* Close down */

  dprintf(("Module_0", "Module finalisation...\n"));

  return NULL;
}


_kernel_oserror * module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *error = NULL;

  mod_wsp = pw;

  /* Initialise debugging routines */
  debug_initialise("RCMM Driver", "RCMM-Debug", NULL);
  debug_atexit();
  debug_output_device(PDEBUG_OUTPUT); /* Must ensure use of an interrupt-safe debugging device (i.e, PDebug or TML only) */

  dprintf(("Module_0", "Module initialisation...\n"));

  _swix(OS_Byte, _INR(0,1) | _OUT(1), 71, 255, &current_keyboard);              /* Obtain the current keyboard layout */

  error = driver_initialise();                                                  /* Attempt to initialise the driver */

  return error;
}


void module_service(int service_number, _kernel_swi_regs *reg, void *pw)
{
  /* Only service call in CMHG file is Service_International */
  switch (reg->r[2])                                                            /* Which international service call? */
  {
    case Inter_Keyboard:                                                        /* Keyboard layout changed... */
      current_keyboard = reg->r[3];                                             /* ...therefore update our view of the world */
      break;
  }
}


int module_upcall_handler(_kernel_swi_regs *reg, void *pw)
{
  dprintf(("Upcall_0", "Module Upcall handler...\n"));

  if (((reg->r[0] == UpCall_DeviceRxDataPresent) ||                             /* Is it an upcall we're interested in? */
       (reg->r[0] == UpCall_DeviceThresAbove)) &&
       (reg->r[1] == i_handle))                                                 /* And is it destined for us? */
  {
    dprintf(("Upcall_1", "Upcall %d detected; read data...\n", reg->r[0]));
    driver_device_data_present();                                               /* Handle the data in the input stream */
  }
  else if ((reg->r[0] == UpCall_ModifyingFile) &&
           (reg->r[9] == upfsclose))                                            /* Stream *Shut behind our back? */
  {
    dprintf(("Upcall_1", "Upcall %d detected\n", reg->r[0]));
    if (reg->r[1] == i_handle)                                                  /* If it's our input stream... */
      driver_disable();                                                         /* ...then disable the driver */
  }

  return 1;                                                                     /* Pass on the upcall */
}


int module_keyv_handler(_kernel_swi_regs *reg, void *pw)
{
  dprintf(("KeyV_0", "Module KeyV handler...\n"));

  if (reg->r[0] == KeyV_Enable)
  {
    dprintf(("KeyV_1", "KeyV %d detected; enable keyboard device...\n", reg->r[0]));
    flags |= KEYBOARD_ENABLED;                                                  /* If "enable" call, then enable our keyboard */
    key_finalise();                                                             /* Reset all keys and timeouts */
  }
  return 1;
}


int module_pointerv_handler(_kernel_swi_regs *reg, void *pw)
{
  dprintf(("PointerV_0", "Module PointerV handler...\n"));

  switch (reg->r[0])                                                            /* Which PointerV call is it? */
  {
    case PointerV_Status:                                                       /* Call from kernel to update the pointer state */
      dprintf(("PointerV_1", "** PointerV_Status **\n"));
      if (reg->r[1] == POINTER_TYPE)                                            /* If our pointer type is selected... */
      {
        mouse_status(&reg->r[2], &reg->r[3]);                                   /* ...then obtain the new mouse coordinates... */
        return 0;                                                               /* ...and intercept the call */
      }
      break;

    case PointerV_Enumerate:                                                    /* Call to enumerate pointer devices */
      dprintf(("PointerV_1", "** PointerV_Enumerate **\n"));
      {
        int record_size = 0;
        pointer_record_t *record_ptr = NULL;
        _kernel_oserror *error;

        record_size = offsetof(pointer_record_t, device_name)                   /* Calculate the record size... */
                      + strlen(POINTER_NAME) + 1;                               /* ...(include the null terminator) */

        error = _swix(OS_Module, _IN(0) | _IN(3) | _OUT(2), OSModule_Claim,     /* We claim the memory... */
                      record_size, &record_ptr);                                /* ...the caller of PointerV frees it */
        if (!error)                                                             /* Check that the claim was successful */
        {
          record_ptr->next = (pointer_record_t *) reg->r[1];                    /* Set up pointer to next record */
          record_ptr->device_flags = 0;                                         /* Flags word; must be zero */
          record_ptr->device_type = POINTER_TYPE;                               /* Declare pointer type value */
          strcpy(&record_ptr->device_name, POINTER_NAME);                       /* Declare pointer name */
          reg->r[1] = (int) record_ptr;
          return 1;                                                             /* Pass on the call */
        }
      }
      break;

    case PointerV_Selected:                                                     /* Call to notify driver of pointer selection */
      dprintf(("PointerV_1", "** PointerV_Selected **\n"));
      mouse_reset();                                                            /* Reset the internal mouse state */
      if (reg->r[1] == POINTER_TYPE)                                            /* If our pointer type is selected... */
        flags |= POINTER_ENABLED;                                               /* ...then set our pointer enable flag... */
      else
        flags &= ~POINTER_ENABLED;                                              /* ...otherwise ensure we are disabled */
      break;

    default:                                                                    /* Another PointerV call? */
      return 1;                                                                 /* Pass on the call: we're not interested */
  }
  return 1;                                                                     /* Ensure that the call is passed on */
}

/* End of module.c */
