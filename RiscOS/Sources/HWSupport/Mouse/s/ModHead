; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     0

;---------------------------------------------------------------------------
Title   DCB     "Mouse",0
Helpstr DCB     "Mouse",9,9,"$VString ($Date)",0
                ALIGN

;---------------------------------------------------------------------------
;       Module initialisation point.
;
Init
        ENTRY
;
; Check machine type
;

        MOV     r0, #2                          ;Check main hardware details
        SWI     XOS_ReadSysInfo
        EXIT    VS
                                                ;R0 bits 8..15 give I/O control chip type
        AND     r0, r0, #&0000FF00              ;  0=IOC, 1=IOMD
        TEQ     r0,     #&00000100              ;  must have IOMD
        BNE     %FT99                           ;NE, wrong h/w

        ANDS    r2, r2, #&0000FF00              ;Look at IOMD variant field,
                                                ; we need one with quadrature mouse support
        BNE     %FT99                           ;NE, wrong h/w
;
; Hardware OK
;
        LDR     r2, [r12]                       ; Have we already got a workspace ?
        CMP     r2, #0
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace.
        EXIT    VS

        STR     r2, [r12]                       ; Store workspace pointer.
01
        MOV     r12, r2

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_RegisterFiles
 ]

        MOV     r0, #0                          ; Initialise workspace.
 [ international
        STR     r0, message_file_open
 ]

        BL      StartUp
        BLVS    ShutDown
        EXIT


; come here if inappropriate hardware for mouse module to operate

99
        ADR     r0, ErrorBlock_BadHard
        MOV     r1, #0                  ; only use global message file
        MOV     r2, #0                  ; use MessageTrans buffer
        MOV     r3, #0                  ; buffer size (irrelevant)
        MOV     r4, #0                  ; don't substitute anything
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

        MakeErrorBlock  BadHard


;---------------------------------------------------------------------------
;       Start up code.
;
StartUp
        ENTRY   "r1,r2"

        Debug   mod,"QM_StartUp"

        BL      ClaimVectors

        MOVVC   r0, #0                          ; Get current pointer type.
        SWIVC   XOS_Pointer
        MOVVC   r1, r0
        BLVC    PointerSelected                 ; Enable if it is one of ours.

        EXIT

;---------------------------------------------------------------------------
;       Claim vectors.
;
ClaimVectors
        ENTRY   "r0-r2"

        MOV     r0, #PointerV
        ADR     r1, PointerRequest
        MOV     r2, r12
        SWI     XOS_Claim

        EXIT

;---------------------------------------------------------------------------
;       Release vectors.
;
ReleaseVectors
        ENTRY   "r0-r2"

        MOV     r0, #PointerV
        ADR     r1, PointerRequest
        MOV     r2, r12
        SWI     XOS_Release

        EXITS

;---------------------------------------------------------------------------
;       Service handler.
;
Service
        LDR     r12, [r12]
        CMP     r12, #0
        MOVEQS  pc, lr                          ;Quit if dormant

        TEQ     r1, #Service_Reset
        BEQ     StartUp

 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        MOVNES  pc, lr

        ENTRY   "r0-r3"
        ADR     r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
        EXITS
 |
        MOVS    pc, lr
 ]

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        ENTRY

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "pc",EQ,^

        BL      ShutDown

        EXITS

;---------------------------------------------------------------------------
;       Tidy up before dying.
;       out:  preserves all registers and flags.
;
ShutDown
        ENTRY   "r0-r2"

        Debug   mod,"QM_ShutDown"

        BL      ReleaseVectors                  ; Release vectors if claimed.

 [ international
        LDR     r0, message_file_open           ; Close the message file if it's open.
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
 ]

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
 ]

        EXITS                                   ; Ignore errors, preserve flags.

        END
