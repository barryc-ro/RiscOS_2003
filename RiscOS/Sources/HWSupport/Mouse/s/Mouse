; > Sources.Mouse

;---------------------------------------------------------------------------
; PointerRequest
;       In:     r0 = reason code 0
;               r1 = device type
;       Out:    r2 = signed 32-bit X movement
;               r3 = signed 32-bit Y movement
;
;       Handle PointerV request calls or pass on others.
;
PointerRequest
        TEQ     r0, #PointerReason_Request      ; If not requesting then
        BNE     PointerIdentify                 ;   try identify.
        TEQ     r1, #PointerDevice_QuadMouse    ; If not ours then
        MOVNES  pc, lr                          ;   pass on call.

        Push    "r10,r11"

        IOMDBase lr
        ADD     lr, lr, #IOMD_MOUSEX
        LDMIA   lr, {r2,r3}                     ; Get X,Y counters.

        LDR     lr, LastX                       ; Get last X counter value.
        STR     r2, LastX                       ; Remember current for next time.
        MOV     r2, r2, LSL #16                 ; Only interested in bottom 16 bits.
        SUB     r2, r2, lr, LSL #16             ; Subtract old from new.
        MOV     r2, r2, ASR #16                 ; Return signed X movement.

        LDR     lr, LastY                       ; Get last X counter value.
        STR     r3, LastY                       ; Remember current for next time.
        MOV     r3, r3, LSL #16                 ; Only interested in bottom 16 bits.
        SUB     r3, r3, lr, LSL #16             ; Subtract old from new.
        MOV     r3, r3, ASR #16                 ; Return signed X movement.

        ReadButtons r10                         ; Get button states into r10.
        LDRB    r11, LastButtons                ; Get last states.
        EORS    r11, r11, r10                   ; Get differences.
        Pull    "r10,r11,pc",EQ                 ; Claim call if none.

        STRB    r10, LastButtons
        Push    "r0,r1,r9"

        TST     r11, #4                          ; Check left (SELECT).
        BEQ     %FT10

        TST     r10, #4
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&70
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
10
        TST     r11, #2                          ; Check centre (MENU).
        BEQ     %FT20

        TST     r10, #2
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&71
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
20
        TST     r11, #1                          ; Check right (ADJUST).
        Pull    "r0,r1,r9-r11,pc",EQ

        TST     r10, #1
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&72
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
        Pull    "r0,r1,r9-r11,pc"                ; Claim call.

;---------------------------------------------------------------------------
; PointerIdentify
;       In:     r0 = reason code 1
;               r1 = pointer to device type record (or 0)
;       Out:    r1 = pointer to updated list
;
;       Identify our pointer device.
;
PointerIdentify
        TEQ     r0, #PointerReason_Selected     ; If selected then
        BEQ     PointerSelected                 ;   initialise.
        TEQ     r0, #PointerReason_Identify     ; If not identify then
        MOVNES  pc, lr                          ;   pass on call.

        ENTRY   "r0-r3"

        Debug   mod,"QM_PointerIdentify"

        ADR     r1, DeviceName
  [ international
        MOV     r2, #0
        BL      MsgTrans_Lookup                 ; r2->device name looked up
        EXITS   VS                              ; If lookup fails then don't add our record to list.

        BL      strlen                          ; r3=length of string pointed to by r2
        ADD     r3, r3, #MinPointerRecordSize   ; Includes byte for string terminator.
        MOV     r1, r2
  |
        MOV     r3, #DeviceNameEnd-DeviceName+MinPointerRecordSize
  ]
        MOV     r0, #ModHandReason_Claim        ; Claim space for a device type record.
        SWI     XOS_Module
        EXITS   VS

        LDR     r0, [sp, #4]                    ; Get back pointer to list we were passed.
        STR     r0, [r2, #PointerNext]          ; Tag it onto ours.
        MOV     r0, #0
        STR     r0, [r2, #PointerFlags]         ; No flags.
        MOV     r0, #PointerDevice_QuadMouse    ; Set device type.
        STRB    r0, [r2, #PointerType]

        ADD     r0, r2, #PointerName
        BL      strcpy                          ; Copy name into record (r1 to r0).
        STR     r2, [sp, #4]                    ; Pass on updated record pointer.

        EXITS

DeviceName
 [ international
        DCB     "DevName",0
 |
        DCB     "Standard mouse"
DeviceNameEnd
        DCB     0
 ]
        ALIGN

strlen
; In:   r2->control char terminated string
; Out:  r3=length of string
        ENTRY   "r2"
        MOV     r3, #0
01
        LDRB    lr, [r2], #1
        CMP     lr, #" "
        ADDCS   r3, r3, #1
        BCS     %BT01
        EXIT

strcpy
; In:   r0->null terminated destination string
;       r1->control char terminated source string
        ENTRY   "r0,r1"
01
        LDRB    lr, [r1], #1
        CMP     lr, #" "
        STRCSB  lr, [r0], #1
        BCS     %BT01
        MOV     lr, #0
        STRB    lr, [r0]
        EXIT

;---------------------------------------------------------------------------
; PointerSelected
;       In:     r1 = device type
;
;       Initialise mouse driver.
;
PointerSelected
        TEQ     r1, #PointerDevice_QuadMouse    ; If not ours then
        MOVNES  pc, lr                          ;   pass on call.

        ENTRY   "r0"

        Debug   mod,"QM_PointerSelected"

        IOMDBase lr
        MOV     r0, #0
        STR     r0, [lr, #IOMD_MOUSEX]          ; Set counters to 0.
        STR     r0, [lr, #IOMD_MOUSEY]

        STR     r0, LastX                       ; Set last values to 0.
        STR     r0, LastY
        STRB    r0, LastButtons

        EXIT

        END
