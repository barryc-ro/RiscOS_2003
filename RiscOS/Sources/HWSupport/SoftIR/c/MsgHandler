/*
 * MsgHandler.c

 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

/*
 * This contains all the message processing functions
 */

#include "targetsys.h"

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"
#include "global/services.h"
#include "global/HALEntries.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "MsgHandler.h"

#include "DevFSIntFc.h"


/* MsgHandler_Tol_Check(int value, int spec, int tolerance)
 * This function checks if the passed value is within the tolerance limit of the spec value
 * returns 0 if failed, 1 if passed
 */



// Message stats here
int message_count=0, message_invalid=0, message_12=0, message_24=0,message_32=0;

int timing_value[]={330,583,636,752,1100,80,275,386,502,553,669,720,836,886,1002,-1};

enum timing_name
{
  RCMM_HEADER_ON_MIN,
  RCMM_HEADER_ON_MAX,
  RCMM_HEADER_MIN,
  RCMM_HEADER_MAX,
  RCMM_TIMEOUT,
  RCMM_DATA_ON_MIN,
  RCMM_DATA_ON_MAX,
  RCMM_DATA_00_MIN,
  RCMM_DATA_00_MAX,
  RCMM_DATA_01_MIN,
  RCMM_DATA_01_MAX,
  RCMM_DATA_10_MIN,
  RCMM_DATA_10_MAX,
  RCMM_DATA_11_MIN,
  RCMM_DATA_11_MAX
};

void MsgHandler_initialise(void)
{
  // need to adjust the timing values according to the hardware clock speed
  double adjust;
  int index=0;

  unsigned int granularity;

  _swix(OS_Hardware,_IN(0) | _INR(8,9) | _OUT(0),
        1,0,EntryNo_HAL_TimerGranularity,&granularity);

  adjust=(double)granularity/1000000.0;
  while (timing_value[index]!=-1)
  {
    timing_value[index]=(int) ((double)timing_value[index]*adjust);
    index++;
  }
}

int MsgHandler_Tol_Check(int value, int spec_min, int spec_max)
{
  int result=0;
  // Don't need to check lower 16bits as the value passed to function must only contain the value
  // not the state value

  // There can be a glitch where the value will be 50 above the normal
  if ( value >= timing_value[spec_min] && value <= timing_value[spec_max])
    result=1;

  return(result);
}

/* This function will check the buffer for any messages
 * Any valid (16/24/32 bit length) messages found will be passed using the DevFSIntFc_SendByte call
 */

void MsgHandler_Check_Buffer(void)
{

  int loop_count=0;
  int byte_value;

  /* this specifies that a dummy value will be used on the last read to indicate it timed out
   * this is necessary as there will not be a value at the end of the buffer when we timeout
   */
  int timeout=1;

  unsigned int data_start, data_end, data_ptr,data_max,msg_start=NULL;
  unsigned int state=0, data_value,last_value=0, msg_value=0;
  unsigned int bits_received=0;

  // Read data header from cyclic_buffer and adjust values for 32bit int array rather than byte array
  data_start =  (cyclic_buffer[0])>>2;
  data_end   =  (cyclic_buffer[1])>>2;
  data_max   =  (cyclic_buffer[2])>>2;

  // set the ptr to the first data value in buffer
  data_ptr=data_start;

  // end the loop if we reach the end and we have taken account of the timeout
  // ensure we never go into an inifite loop by having a loop_count

  while ((data_ptr!=data_end || timeout==1 ) && loop_count<1000) {
    loop_count++;
    // if we got irq then we timed out so the last value read should be a default timeout value

    // if at end of data block and we timedout, generate a fake value
    if (data_ptr==data_end && timeout==1)
    {
      data_value=65535;
      timeout=2; // ensure we exit next time by setting timeout flag
      // timeout=2 indicates that we've reached the end of the buffer and we've set the data_value to be
      // the timeout indicator so don't go on to next value in buffer but exit next loop
    }
    else
      data_value = cyclic_buffer[data_ptr];

    switch (state)
    {
    case 0 : // attempting to find start pointer
      // check for on flag and within tolerance for header on value
      if ((data_value & (1<<16)) &&  MsgHandler_Tol_Check(data_value & 0xffff,RCMM_HEADER_ON_MIN,RCMM_HEADER_ON_MAX))
      {
        // found valid data so change state and record position
        state=1;
        msg_start=data_ptr; // record start position so we can roll back if not a valid message
        msg_value=0;        // reset message value and bitlength
        bits_received=0;
        last_value=data_value & 0xffff;      // remove the state flag
      } // if ((data_value & (1<<16)) && MsgHandler_Tol_Check(data_value,0,RCMM_HEADER_ON_MIN,RCMM_HEADER_ON_MAX))
      break;

    case 1 : // attemping to find valid header_off
      // check for low flag, tolerance
      if ( !(data_value & (1<<16)) && MsgHandler_Tol_Check(data_value+last_value,RCMM_HEADER_MIN,RCMM_HEADER_MAX))
      {
        state=2;
      } // if ( !(data_value & (1<<16)) && MsgHandler_Tol_Check(data_value,last_value,RCMM_HEADER_MIN,RCMM_HEADER_MAX))
      else // not valid so roll back pointer and re-attempt to find start
      {
        state=0;
        data_ptr=msg_start;     // roll back
      } // if ( !(data_value & (1<<16)) && MsgHandler_Tol_Check RCMM_HEADER_OFF else

      break;

    case 2 : // looking for high edge and valid data_on
      if ( (data_value & (1<<16)) && MsgHandler_Tol_Check(data_value & 0xffff,RCMM_DATA_ON_MIN, RCMM_DATA_ON_MAX))
      {
        state=3;
        last_value=data_value & 0xffff;         // remove the state flag
      }
      else // not valid length so roll back pointer and re-attempt to find start
      {
        state=0;
        data_ptr=msg_start;      // roll back
      }
      break;
      case 3 : // looking for low edge
        if ( !(data_value & (1<<16)))
        {
          data_value=last_value+(data_value & 0xffff);      // combine to get message length without state flag
          // low edge found so attempt to identify what data value
          if (MsgHandler_Tol_Check(data_value,RCMM_DATA_00_MIN,RCMM_DATA_00_MAX))
            msg_value=(msg_value<<2)+0;
          else if (MsgHandler_Tol_Check(data_value,RCMM_DATA_01_MIN,RCMM_DATA_01_MAX))
            msg_value=(msg_value<<2)+1;
          else if (MsgHandler_Tol_Check(data_value,RCMM_DATA_10_MIN,RCMM_DATA_10_MAX))
            msg_value=(msg_value<<2)+2;
          else if (MsgHandler_Tol_Check(data_value,RCMM_DATA_11_MIN,RCMM_DATA_11_MAX))
            msg_value=(msg_value<<2)+3;
          else // not a valid value
          {
            // see if enough time has passed for it to have been an end of message
            if (data_value>(timing_value[RCMM_TIMEOUT]))
            {
              state=10;     // woohoo!  Message found, process it
            } // if (data_value>(timing_value[RCMM_TIMEOUT]))
            else // nope so roll back pointer and re-attempt to find start
            {
              state=0;
              data_ptr=msg_start;
            } // if (data_value>(timing_value[RCMM_TIMEOUT]))
          } // if ( !(data_value & (1<<16))) else

          if (state==3)
          {
            // state was unchanged by TIMEOUT or invalid value so correctly found data value
            bits_received+=2;      // find next data value and increase number of bits found
            state=2;
            // need to place check for >32bit values somewhere around here
          }
        } // if ( !(data_value & (1<<16)))
        else  // wasn't a low edge so roll back pointer and re-attempt to find start
        {
          state=0;
          data_ptr=msg_start;
        } // if ( !(data_value & (1<<16))) else

        break;

    } // switch (state)

    /* test if found message state before incrementing pointer
     * This is to ensure that the message is transmitted before any further data blocks tested
     * or potentially the loop ending due to reaching end
     */

    if (state==10)
    {

      dprintf(("","Msg (%2d) %08x->", bits_received, msg_value));

      msg_value=msg_value<<(32-bits_received);       // shift message so it starts on upmost bit

      message_count++;


      if (bits_received==12 || bits_received==24 || bits_received==32)   // valid length?
      {
        // valid message so increase respective count
        if (bits_received==12)
          message_12++;
        if (bits_received==24)
          message_24++;
        if (bits_received==32)
          message_32++;
        // only send the number of bits received to 8bit boundry
        // for each 8 bit section, shift right to occupy one byte, mask off other bits and then send
        if (bits_received>0)
        {
          byte_value=(msg_value>>24) & 0xff;
          dprintf(("",":%02x",byte_value));
          DevFSIntFc_SendByte(byte_value);
        }
        if (bits_received>8)
        {
          byte_value=(msg_value>>16) & 0xff;
          dprintf(("",":%02x",byte_value));
          DevFSIntFc_SendByte(byte_value);
        }
        if (bits_received>16)
        {
          byte_value=(msg_value>>8) & 0xff;
          DevFSIntFc_SendByte(byte_value);
          dprintf(("",":%02x",byte_value));
        }
        if (bits_received>24)
        {
          byte_value=(msg_value>>0) & 0xff;
          dprintf(("",":%02x",byte_value));
          DevFSIntFc_SendByte(byte_value);
        }
      } // if (bits_received==12,24,32)
      else                                 // Not a valid length
        message_invalid++;

      dprintf(("",": start=%04d, ptr=%04d, max=%04d\n",msg_start,data_ptr,data_max));

      state=0;                  // reset state after processing message
      data_start=data_ptr;      // update the data start to ensure next time, the message isn't found again

      if (data_start==data_max) // wrapping around if necessary
        data_start=(20>>2);     // shifting it to convert from byte array format to word array format

      cyclic_buffer[0]=(data_start<<2); // place it back into cyclic buffer in byte array format


    } //  if (state==10)
    // don't increment data_ptr if just found a message (state=10) as we need to check the currently
    // value again
    else
    {
      if (timeout!=2) // don't increment pointer if timeout flag just read
        data_ptr+=1;  // increment data_ptr to next then check

      if (data_ptr==data_max && data_ptr!=data_end) // if at end of buffer then wrap to start
        data_ptr=(20>>2); // shifting it to convert from byte array format to word array format
    } // if (state==10) else

     // finished checking states so loop back until we've checked all the buffer
  } // while (data_ptr!=data_end && loop_count<1000);

  if (loop_count==999)
    printf("infinite loop detected\n");


} // MsgHandler_Check_Buffer()
