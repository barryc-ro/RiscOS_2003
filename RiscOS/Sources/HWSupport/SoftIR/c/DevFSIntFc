/*
 * DevFSIntFc.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

/*
 * This contains the interfaces between the Software IR and DeviceFS
 */

#include "targetsys.h"

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"

#include "interface/devicefs.h"
#include "DevFSIntFc.h"
#include "IntHandler.h"

int device_handle=-1;
static const char *device_name="RCMM";


typedef struct {
  unsigned int device_name_offset;
  unsigned int device_flags;
  unsigned int rx_buffer_flags;
  unsigned int rx_buffer_size;
  unsigned int tx_buffer_flags;
  unsigned int tx_buffer_size;
  unsigned int reserved;
  unsigned int end_marker;
} DEVICEFS_CREATE_STRUCT;

DEVICEFS_CREATE_STRUCT device_struct;

int device_devfs_handle=0;
int device_devfs_ref=-1;
int device_devfs_flag=0;
int device_devfs_control=0;

int device_devfs_bufferhandle =-1;

void DevFSIntFc_SendByte(unsigned char data)
{
  _swix(OS_Byte,_INR(0,2),138,device_devfs_bufferhandle,data);
}

_kernel_oserror *DevFSIntFc_Create_Device(void)
{
  int  device_flags;
  int no_rx_dev,no_tx_dev;
  _kernel_oserror *error=NULL;

  dprintf(("","Test\n"));

  device_flags=0; // character device and not full duplex
  no_rx_dev=1; // 1 device for user to read from
  no_tx_dev=0; // 0 device for user to write to

  device_struct.device_name_offset=device_name - ((char*)&device_struct);
  device_struct.device_flags=3;  // create a pseudo fs
  device_struct.rx_buffer_flags=0; // see Buffer_register man entry
  device_struct.rx_buffer_size=64;
  device_struct.tx_buffer_flags=0;
  device_struct.tx_buffer_size=32;
  device_struct.reserved=0;
  device_struct.end_marker=0;


  error=_swix(DeviceFS_Register,_INR(0,7) | _OUT(0), device_flags, &device_struct,
        device_entry,0,mod_wsp,0,no_rx_dev,no_tx_dev,&device_handle);
  dprintf(("","Device handle %d\n",device_handle));
  if (error!=NULL)
    device_handle=-1;
  return(error);
}

_kernel_oserror * device_handler(_kernel_swi_regs *reg, void *pw)
{
  dprintf(("","Got here\n"));

  switch (reg->r[0]) {
  case DeviceCall_Initialise : // pre open data stream
    // check if already opened
    dprintf(("device handler","creating stream #1\n"));
    if (device_devfs_ref==-1)
    {
      device_devfs_ref=1;
      device_devfs_handle=reg->r[2];
      device_devfs_flag=reg->r[3];
      device_devfs_control=reg->r[6];
      reg->r[2]=device_devfs_ref;
    }
    break;

  case DeviceCall_Finalise : // finished with data stream
    dprintf(("device handler","closing stream %d\n",reg->r[2]));
    if (reg->r[2]==device_devfs_ref || reg->r[2]==0) // our stream or all streams
    {
      device_devfs_ref=-1;

      // if the FIQ has been claimed then stop it

      if (IntHandler_Get_Status(SoftIR_FIQ_Test) & SoftIR_FIQ_Claimed)
        IntHandler_FIQ_Control(SoftIR_FIQ_UnInstall,SoftIR_ServiceCall);
      // Need to specify we don't want it either
      IntHandler_Set_Status(SoftIR_Disable);
    }
    break;

  case DeviceCall_StreamCreated : // stream created
    dprintf(("","Stream created\n"));
    if (reg->r[2]==device_devfs_ref) // our stream
    {
      device_devfs_bufferhandle=reg->r[3];

      // initiate fiq
      if (!(IntHandler_Get_Status(SoftIR_FIQ_Test) & SoftIR_FIQ_Claimed))
      {
        dprintf(("","Installing fiq\n"));
        IntHandler_Set_Status(SoftIR_Enable);
        IntHandler_FIQ_Control(SoftIR_FIQ_Install,SoftIR_ServiceCall);
      }
    }
    dprintf(("device handler","stream created, buffer handler=%d\n",device_devfs_bufferhandle));
    break;


  case DeviceCall_WakeUpRX : // request for data

    dprintf(("device handler","stream %d requesting rx data\n",device_devfs_ref));

    if (reg->r[2]==device_devfs_ref) {  // our device stream
      // generate some data
 //     _swix(DeviceFS_ReceivedCharacter,_INR(0,1),rand() % 255 ,device_devfs_handle);
      // need to find out how to get C flag and check if call worked
    } // if (reg_r[1]==device_handle)

     break;
  default :
    dprintf(("DevEntry","device_entry, r0=>%d, r2=>%d, r3=>%d, r4=>%d, r5=>%d, r6=>%d\n",
            reg->r[0],reg->r[2],reg->r[3],reg->r[4],reg->r[5],reg->r[6]));
    // do something else
    break;
  } // switch (reg->r[0])

  return NULL;

}

_kernel_oserror *DevFSIntFc_Remove_Device(void)
{
  _kernel_oserror *error=NULL;

  error=_swix(DeviceFS_Deregister,_IN(0),device_handle);
  if (error==NULL)
    device_handle=-1;
  return (error);
}

/*
 * DevFSIntFc_Get_Status returns whether or not the RCMM device has been created
 * It returns either SoftIR_DevFS_Claimed or SOFTIR_DevFS_UnClaimed
 *
 */

int DevFSIntFc_Get_Status(void)
{
  int result=SoftIR_DevFS_UnClaimed;
  if (device_devfs_ref!=-1)
    result=SoftIR_DevFS_Claimed;

  return(result);
}
