/*
 * MsgHandler.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

/*
 * This contains all the message processing functions
 */

#include "targetsys.h"

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"
#include "global/services.h"
#if SoftIR_System!=SoftIR_RPC
  #include "global/HALEntries.h"
#endif

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "MsgHandler.h"

#include "DevFSIntFc.h"


int push_bit(int bit);
int get_bits(char *buffer, int buffer_bit_length, int start_bit, int bit_len);
void decode_key(int lead_code, char *buffer, int bit_len);
void decode_mouse(int lead_code,char *buffer, int bit_len);

int timing_value[]={1750,1950,575,1170,500,1000,240,-1};

enum timing_name
{
  MSI_PRELEAD_MIN,
  MSI_PRELEAD_MAX,
  MSI_LOW_ONE,
  MSI_LOW_TWO,
  MSI_HIGH_ONE,
  MSI_HIGH_TWO,
  TOLERANCE
};


// Message stats here
int message_count=0, message_invalid=0, message_12=0, message_24=0,message_32=0;

_kernel_oserror *MsgHandler_initialise(void)
{
  /* need to adjust the timing values according to the hardware clock speed
   * for RPC, can't have fp stuff in here, for 32bit versions fp can be enabled
   */
  int index=0;

  #if SoftIR_System==SoftIR_RPC

    while (timing_value[index]!=-1)
    {
      timing_value[index]*=2;
      index++;
    }

  #else
    double adjust;
    unsigned int granularity;

    _swix(OS_Hardware,_IN(0) | _INR(8,9) | _OUT(0),
                SoftIR_Timer,0,EntryNo_HAL_TimerGranularity,&granularity);

    adjust=(double)granularity/1000000.0;
    while (timing_value[index]!=-1)
    {
      timing_value[index]=(int) ((double)timing_value[index]*adjust);
      index++;
    } /*     while (timing_value[index]!=-1) */
  #endif

  return(NULL);
}

/* tol_check(int value, int spec, int tolerance)
 * This function checks if the passed value is within the tolerance limit of the spec value
 * returns 0 if failed, 1 if passed
 */

int tol_check(int value, int spec_min, int spec_max)
{
  int result=0;
  // Don't need to check lower 16bits as the value passed to function must only contain the value
  // not the state value


  if ( value >= timing_value[spec_min] && value <= timing_value[spec_max])
  {
//    dprintf(("","tol check %d,[%d,%d]\n",value,timing_value[spec_min],timing_value[spec_max]));
    result=1;
  }

  return(result);
}

int get_length(int value, int time_state)
{
  int length=-1;
  int tolerance=timing_value[TOLERANCE];
//  dprintf(("","get length function, value=%d, time_state=%d,",value,time_state));
  switch (time_state)
  {
  case 0 :
    if (abs(value-timing_value[MSI_LOW_ONE])<tolerance)
      length=1;
    else if (abs(value-timing_value[MSI_LOW_TWO])<tolerance)
      length=2;
    break;
  case 1 :
    if (abs(value-timing_value[MSI_HIGH_ONE])<tolerance)
      length=1;
    else if (abs(value-timing_value[MSI_HIGH_TWO])<tolerance)
      length=2;
    break;
  } /* switch (time_state) */
//  dprintf((""," length=%d\n",length));

  return(length);
}

void MsgHandler_Check_Buffer(void)
{

  int loop_count=0;

  /* this specifies that a dummy value will be used on the last read to indicate it timed out
   * this is necessary as there will not be a value at the end of the buffer when we timeout
   */
  int finish_flag=0;

  unsigned int data_start, data_end, data_ptr,data_max;
  unsigned int state=0, data_value, msg_value=0, msg_start=0;
  unsigned int time_state, encoding_state=0;
  unsigned int bits_received=0,bit_count=0;
  int length,pushbit_result=SoftIR_Message_Ok;

//  printf("Checking buffer\n");
  // Read data header from cyclic_buffer and adjust values for 32bit int array rather than byte array
  data_start =  (cyclic_buffer[0])>>2;
  data_end   =  (cyclic_buffer[1])>>2;
  data_max   =  (cyclic_buffer[2])>>2;

  // set the ptr to the first data value in buffer
  data_ptr=data_start;

  // end the loop if we reach the end and we have taken account of the timeout
  // ensure we never go into an inifite loop by having a loop_count


  /* Don't bother doing anything if start=end (means no data) */
  if (data_start==data_end)
    finish_flag=1;
  else
    finish_flag=0;

//  dprintf(("","**** Pre loop, ds=%d, de=%d, dm=%d\n",data_start,data_end,data_max));

  while (loop_count<1000 && finish_flag==0)
  {
    loop_count++;

    if (data_ptr==(cyclic_buffer[1]>>2))
    {
      finish_flag=1;
      data_value=65535;
    }
    else
    {
      data_value = cyclic_buffer[data_ptr];
    }

//    dprintf(("","Dp=%d,de=%d,dv=%d,state=%d,msgstart=%d,finish_flag=%d\n",
//                 data_ptr,(cyclic_buffer[1]>>2),(data_value & 0xffff),state,msg_start,finish_flag));

    switch (state)
    {
    case 0 : /* looking for prelead */
      if (tol_check(data_value & 0xffff,MSI_PRELEAD_MIN,MSI_PRELEAD_MAX)==1)
      {
//        printf("Found prelead [%d] at %d\n",data_value & 0xffff, data_ptr);

        state=1;
        encoding_state=1;
        bits_received=0;
        bit_count=0;
        pushbit_result=SoftIR_Message_Ok;
        msg_start=data_ptr;
        push_bit(-2);
      } /* tol_check for prelead */
      break;

    case 1 : /* looking for header */
      time_state=(data_value & 1<<16) ? 1 : 0;
      data_value = (data_value & 0xffff);
      length=get_length(data_value,time_state);

      while (length>0 && pushbit_result==SoftIR_Message_Ok)
      {
        pushbit_result=push_bit((msg_value<<1) | (encoding_state ^ time_state));
        encoding_state ^= 1;
        length--;
        bits_received++;
      } /* while (length>0) */

      /* test for end of message */
      if (length==-1 && pushbit_result!=SoftIR_Message_Corrupt)
      {
        pushbit_result=push_bit(-1);     /* send end of message flag */


        state=0;                       /* reset state after processing message */
        data_start=data_ptr;            /* move data start to end of this message */

        if (data_start==data_max) // wrapping around if necessary
          data_start=(20>>2);     // shifting it to convert from byte array format to word array format

        cyclic_buffer[0]=(data_start<<2); // place it back into cyclic buffer in byte array format


      } //  if (length==-1) */

      /* if corrupted message then reset pointer and state
       * will also catch corrupted messages from above
       */
      if (pushbit_result==SoftIR_Message_Corrupt)
      {
//        dprintf(("","Message corrupt flag set, moving data_ptr to %d\n",msg_start));

        /* Move start pointer to next position so that if we checked buffer  *
         * mid loop, next buffer check will find this message                */

        data_ptr=msg_start+1;
        if (data_ptr==data_max)
          data_ptr=20>>2;

        cyclic_buffer[0]=(data_ptr<<2);


        data_ptr=msg_start;    /* Move data_ptr back */
        state=0;
      } /* if (pushbit_result==SoftIR_Message_Corrupt) */

      break;




    } /* switch (state) */


    if (finish_flag==0)
      data_ptr+=1;

    /* Loop back to start if reach the end of the buffer, not forgetting that data_ptr is in word format */
    if (data_ptr==data_max)
      data_ptr=(20>>2);

  } /* while (loop_count<1000 && finish_flag==0) */

  if (msg_start==0)
  {
//    dprintf(("","No pre-lead found, resetting start pointer\n"));
    cyclic_buffer[0]=data_ptr<<2;
  }

  if (loop_count==999)
    dprintf(("","infinite loop detected\n"));


} // MsgHandler_Check_Buffer()


/* This function takes in a stream of bits and combines them to form a message
 * if the message is still valid then it will return SoftIR_Message_Ok
 * if it is not valid then it will return            SoftIR_Message_Corrupt
 * It takes 0,1, -1 and -2.
 *  If bit is set to -1 this signifies end of message
 * If bit is set to -2 this signifies prepare for new message
 */

int push_bit(int bit)
{
  static int state=0;
  static char array[12],array_bitlen;
  static int array_ptr=0;
  static int bitlen=0;
  static int last_bit;
  int result=SoftIR_Message_Ok,i=0;
  int lead_code;

//  dprintf(("","state=%d, array_ptr=%d, bitlen=%d\n",state,array_ptr,bitlen));

  /* Test for new message value */
  if (bit==-2)
  {
    for (array_ptr=0;array_ptr<12;array_ptr++)
      array[array_ptr]=0;
    array_ptr=bitlen=last_bit=state=0;
    return(SoftIR_Message_Ok);
  }

  switch (state)
  {
  case 0 :
    if (bit==1)
      state=1;
    else
    {
      result=SoftIR_Message_Corrupt;
      state=0;
    }
    break;
  case 1 :
    if (bit==0)
      state=2;
    else
    {
      result=SoftIR_Message_Corrupt;
      state=0;
    }
    break;
  case 2 :
    if (bit==0)
    {
      state=3;
      bitlen=array_ptr=array_bitlen=0;
      for (i=0;i<10;i++)
        array[i]=0;
//      dprintf(("","Found valid header\n"));
    }
    else
    {
      result=SoftIR_Message_Corrupt;
      state=0;
    }
    break;
  case 3 :
    if (bit==-1)
      state=10;
    else
    {
      last_bit=bit;
      state=4;
    }
    break;
  case 4 :
    if (bit==last_bit || bit==-1)
    {
      array[array_ptr]=(array[array_ptr]<<1) | last_bit;
      array_bitlen++;
      bitlen++;
      if (bitlen==8)
      {
        bitlen=0;
        array_ptr++;
        /* Test that bit stream doesn't overflow buffer */
        if (array_ptr==10)
          result=SoftIR_Message_Corrupt;
      } /* if (bitlen==8) */
      /* Test that we're still ok, continue state machine if true */
      if (result==SoftIR_Message_Ok)
        state=3;
    } /* if (bit==last_bit || bit==-1) */
    else
    { /* doesn't match so go to end state */
      state=10;
    } /* if (bit==last_bit || bit==-1) else */
    break;

  } /* switch (state) */

  /* reached end state, see if valid message can be created */
  if (state==10 || bit==-1)
  {
    /* must be at least 16 bits long */
    if (array_ptr<2)
      result=SoftIR_Message_Corrupt;
    else
    {
      /* Time to decode message */
      lead_code=get_bits(array,array_bitlen,0,4);

//      printf("Lead code=%x [%02x%02x%02x%02x]\n",lead_code,array[0],array[1],array[2],array[3]);
      if (lead_code && 8)
        decode_mouse(lead_code,array,array_bitlen);
      else
        decode_key(lead_code,array,array_bitlen);

    } /* if (bitlen<16) else */
    state=0;
  } /* if (state==10) */

  return(result);
}

unsigned int table[256] =
{
0x15, 0x16, 0x17, 0x18, 0x04, 0x05, 0x01, 0x02, 0x03, 0x19, 0x59, 0x50, 0x00, 0x00, 0x3D, 0x1a,
0x23, 0x24, 0x25, 0x26, 0x09, 0x0A, 0x06, 0x07, 0x08, 0x27, 0x3C, 0x00, 0x00, 0x4B, 0x3C, 0x17,
0x31, 0x32, 0x33, 0x34, 0x0C, 0x0D, 0x2D, 0x2E, 0x0B, 0x35, 0x62, 0x5F, 0x4A, 0x00, 0x16, 0x00,
0x3E, 0x3F, 0x40, 0x41, 0x2F, 0x21, 0x4D, 0x1F, 0x20, 0x42, 0x3B, 0x63, 0x00, 0x1a, 0x61, 0x25,
0x53, 0x00, 0x00, 0x00, 0x1D, 0x1E, 0x1A, 0x1B, 0x1C, 0x14, 0x61, 0x58, 0x00, 0x5f, 0x48, 0x63,
0x64, 0x00, 0x2f, 0x00, 0x2B, 0x2C, 0x28, 0x29, 0x2A, 0x22, 0x5A, 0x52, 0x00, 0x62, 0x27, 0x4C,
0x00, 0x00, 0x00, 0x00, 0x39, 0x3A, 0x36, 0x37, 0x38, 0x30, 0x56, 0x55, 0x4F, 0x49, 0x63, 0x4E,
0x00, 0x00, 0x00, 0x00, 0x46, 0x47, 0x43, 0x44, 0x45, 0x00, 0x57, 0x54, 0x00, 0x61, 0x19, 0x18,

0x95, 0x96, 0x97, 0x98, 0x84, 0x85, 0x81, 0x82, 0x83, 0x99, 0xD9, 0xD0, 0x00, 0x00, 0xBD, 0x9a,
0xA3, 0xA4, 0xA5, 0xA6, 0x89, 0x8A, 0x86, 0x87, 0x88, 0xA7, 0xBC, 0x00, 0x00, 0xCB, 0xBC, 0x97,
0xB1, 0xB2, 0xB3, 0xB4, 0x8C, 0x8D, 0xAD, 0xAE, 0x8B, 0xB5, 0xE2, 0xDF, 0xCA, 0x00, 0x96, 0x00,
0xBE, 0xBF, 0xC0, 0xC1, 0xAF, 0xA1, 0xCD, 0x9F, 0xA0, 0xC2, 0xBB, 0xE3, 0x00, 0x9a, 0xE1, 0xa5,
0xD3, 0x00, 0x00, 0x00, 0x9D, 0x9E, 0x9A, 0x9B, 0x9C, 0x94, 0xE1, 0xD8, 0x00, 0xDF, 0xC8, 0xE3,
0xE4, 0x00, 0x00, 0x00, 0xAB, 0xAC, 0xA8, 0xA9, 0xAA, 0xA2, 0xDA, 0xD2, 0x00, 0xE2, 0xa7, 0xCC,
0x00, 0x00, 0x00, 0x00, 0xB9, 0xBA, 0xB6, 0xB7, 0xB8, 0xB0, 0xD6, 0xD5, 0xCF, 0xC9, 0xE3, 0xCE,
0x00, 0x00, 0x00, 0x00, 0xC6, 0xC7, 0xC3, 0xC4, 0xC5, 0x00, 0xD7, 0xD4, 0x00, 0xE1, 0x99, 0x98
};

unsigned int special_keys[]=
{
  0x7f,0x49,0xff,0xc9,      // goto button
  0x7e,0x49,0xfe,0xc9,      // email button
  0x3f,0x49,0xbf,0xc9,      // menu button
  0x1f,0x49,0x9f,0xc9,      // vol+ button (next)
  0x2e,0x49,0xae,0xc9,      // vol- button (prev)
  0x5e,0x49,0xde,0xc9,      // game button (toolbar)

  -1,-1
};


void decode_mouse(int lead_code,char *buffer, int bit_len)
{
  int x_raw, y_raw,checksum, x_real,y_real;
  unsigned int direction, speed;
  x_raw=get_bits(buffer,bit_len,4,6);
  y_raw=get_bits(buffer,bit_len,10,6);
  checksum=get_bits(buffer,bit_len,16,4);

  x_real=x_raw<0x20 ? x_raw : x_raw-0x3f;
  y_real=y_raw<0x20 ? -y_raw : 0x3f-y_raw;

  if (x_real>0 && y_real==0)
    direction=0;
  else if (x_real>0 && y_real>0)
    direction=2;
  else if (x_real==0 && y_real>0)
    direction=4;
  else if (x_real<0 && y_real>0)
    direction=6;
  else if (x_real<0 && y_real==0)
    direction=8;
  else if (x_real<0 && y_real<0)
    direction=10;
  else if (x_real==0 && y_real<0)
    direction=12;
  else if (x_real>0 && y_real<0)
    direction=14;
  else
    direction=-1;

  if (abs(x_real)>abs(y_real))
    speed=abs(x_real);
  else
    speed=abs(y_real);

  speed=speed<<1;

  if (speed>12)
    speed=12;

  /* handle direction */
  if (direction!=-1)
  {
    DevFSIntFc_SendByte(0x0e);
    DevFSIntFc_SendByte(0x64);
    DevFSIntFc_SendByte((speed<<4)+(direction));

    dprintf(("","Sending [0e:64:%02x]\n",(speed<<4)+(direction)));

  }
  /* Now do buttons */

//  button_state=lead_code & 3;
//  if (button_state!=last_button_state)
//  {
    /* test if left button changed state */
//    if ((last_button_state ^ button_state) & 2)
//    {
      DevFSIntFc_SendByte(0x0e);
      DevFSIntFc_SendByte(0x68);

      if (lead_code & 2)
        DevFSIntFc_SendByte(127);
      else
        DevFSIntFc_SendByte(128+127);
//    } /* left button test */

    /* test if right button changed state */
//    if ((last_button_state ^ button_state) & 1)
//    {
      DevFSIntFc_SendByte(0x0e);
      DevFSIntFc_SendByte(0x68);

      if (lead_code &1)
        DevFSIntFc_SendByte(126);
      else
        DevFSIntFc_SendByte(128+126);
//    } /* right button test */

//    last_button_state=button_state;
//  } /* if (button_state!=last_button_state) */

 dprintf(("","Mouse lb=%d, rb=%d, x_raw=%x, y_raw=%x, x_real=%d, y_real=%d,checksum=%x\n",
               (lead_code & 2)>>1,(lead_code &1),x_raw,y_raw,x_real,y_real,checksum));
}



int check_special(int key_code)
{
  int ptr=0,pre_key=-1;
  while (special_keys[ptr]!=-1 && pre_key==-1)
  {
    if (special_keys[ptr]==key_code)
      pre_key=special_keys[ptr+1];
    ptr++;
  } /*   while (special_keys[ptr]!=-1 && pre_key==-1) */

  return(pre_key);
}

void decode_key(int lead_code, char *buffer, int bit_len)
{
  int key_code, checksum;
  int pre_key=-1;

  key_code=get_bits(buffer,bit_len,4,8);
  checksum=get_bits(buffer,bit_len,12,4);

  /* Special case for power button + sleep, need to stuff 32bit message not 24 */
  if (key_code==0x52 || key_code==0x2f)
  {
      DevFSIntFc_SendByte(0x0e);
      DevFSIntFc_SendByte(0x60);
      DevFSIntFc_SendByte(0x28);
      DevFSIntFc_SendByte(0x2f);
      dprintf(("","key keycode=%x, checksum=%x, Sending [0e:60:28:2f]\n",key_code,checksum));
      return;
  }


  if (key_code>=0 && key_code<=255)
  {
    pre_key=check_special(key_code);
    if (pre_key!=-1)
    {
      DevFSIntFc_SendByte(0x0e);
      DevFSIntFc_SendByte(0x68);
      DevFSIntFc_SendByte(pre_key);
      dprintf(("","Prekey:[0e:68:%02x]\n",pre_key));
    }

    if (table[key_code]!=0)
    {
      dprintf(("","key keycode=%x, checksum=%x, Sending [0e:68:%02x]\n",key_code,checksum,table[key_code]));

      DevFSIntFc_SendByte(0x0e);
      DevFSIntFc_SendByte(0x68);
      DevFSIntFc_SendByte(table[key_code]);
    } /* if (table[key_code]!=0) */
  }
}

int get_bits(char *buffer, int buffer_bit_length, int start_bit, int bit_len)
{
  int b_ptr=0;
  int result=0,result_index;
  int bit_count=0,value=0;
  while (start_bit>=8)
  {
    b_ptr++;
    start_bit-=8;
    buffer_bit_length-=8;
  }

  if (b_ptr>=10)
    return(-1);

  value=buffer[b_ptr]<<start_bit;
  result=result_index=0;

  bit_count=8-start_bit;

  while (bit_len>0 && b_ptr<10 && buffer_bit_length>0)
  {
    result=result | (((value & 128)>>7) << result_index);
    result_index++;
    value=value<<1;
    bit_len--;
    bit_count--;
    buffer_bit_length--;
    if (bit_count==0)
    {
      bit_count=8;
      b_ptr++;
      value=buffer[b_ptr];
    } /* if (bit_count==0) */
  } /* while (bit_len>0 && b_ptr<10) */

  return(result);
}



