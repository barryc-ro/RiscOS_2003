/*
 * module.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include "targetsys.h"

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"

#include "MsgHandler.h"
#include "IntHandler.h"
#include "DevFSIntFc.h"

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

/* Module housekeeping globals */
void   *mod_wsp = NULL;
int   fiq_wanted=0;

// global values
//_kernel_oserror *my_globalerror;
int dynamic_area=-1;
unsigned int *cyclic_buffer=NULL;



/*----------------------------------------------------------------------------*/


/* Functions */



_kernel_oserror * module_finalise(int fatal, int podule, void *pw)
{

  _kernel_oserror *error=NULL;

  if (DevFSIntFc_Get_Status()==SoftIR_DevFS_Claimed)
  {
    dprintf(("","Removing devicefs device\n"));
    error=DevFSIntFc_Remove_Device();
  }

  if (IntHandler_Get_Status(SoftIR_IRQ_Test) & SoftIR_IRQ_Claimed)
  {
    dprintf(("","Removing irq handler\n"));

    error=IntHandler_Remove_IRQ();

  }
  dprintf(("","Removing dynamic area %d\n",dynamic_area));
  _swix(OS_DynamicArea,_INR(0,1),1,dynamic_area);

//  free(my_globalerror);

  return NULL;
}



_kernel_oserror * module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *error = NULL;

  mod_wsp = pw;

  debug_initialise (Module_Title, "", "");
  debug_set_device(PDEBUG_OUTPUT); //DEBUGIT_OUTPUT);
  debug_set_unbuffered_files (TRUE);

  dprintf(("","Module starting\n"));

//  my_globalerror=(_kernel_oserror*) malloc(sizeof(_kernel_oserror));

  error=DevFSIntFc_Create_Device();
  if (error==NULL)
    dprintf(("","Created RCMM device\n"));

  // if successfully created a devicefs device then attempt to create the cyclic buffer
  // note if you change the size of the area you will need to modify the boundry
  // checking parts of the fiq handler
  if (error==NULL)
  {
    error=_swix(OS_DynamicArea,_INR(0,8) | _OUT(1) | _OUT(3),0,-1,4096,-1,0xa0,4096,0,-1,"IR",&dynamic_area, &cyclic_buffer);
//    if (error==NULL)
//      printf("Created dynamic area %d[%p]\n",dynamic_area,cyclic_buffer);
  }

  if (error==NULL)
  {
    // created dynamic area without problems, place internal data references at start
    memset(cyclic_buffer,0,4096);
    cyclic_buffer[0]=20;   // data_start
    cyclic_buffer[1]=20;   // data_ptr
    cyclic_buffer[2]=0x200; // data_max
  }

  // Set the system variable RCMMDriver$Device to be set to RCMM
  _kernel_setenv("RCMMDriver$Device","RCMM");

  return error;
}

/* This function handles the service calls that the module receives.
 * It is currently configured to only get ReleaseFIQ, ClaimFIQ and ClaimFIQinBackgroun
 */

void module_service(int service_number, _kernel_swi_regs *reg, void *pw)
{
  dprintf(("","Service number :%x\n",service_number));
  switch (service_number)
  {
  case Service_ReleaseFIQ :   // Must claim FIQ now if we want it

    dprintf(("","Service_ReleaseFIQ\n"));
    if (fiq_wanted==1 && (IntHandler_Get_Status(SoftIR_FIQ_Test) & SoftIR_FIQ_Claimed)==0)
    {
      // we had the fiq before we were rudely interrupted so reclaim it
      dprintf(("","*Reclaiming fiq\n"));
      reg->r[1]=0;
      /* This function will fail if in between Claim and Release, something called
       * the IntHandler_Set_Status function with SoftIR_Disable
       * This is likely to have been done if RCMM device is closed thus
       * we do want this call to fail
       */
      IntHandler_FIQ_Control(SoftIR_FIQ_Install,SoftIR_NoServiceCall); // install fiq and don't use service call
      fiq_wanted=0;  // Don't care if it succeeded or failed, just don't try to claim again
    }
    break;

  case Service_ClaimFIQinBackground :
    dprintf(("","Background"));
  case Service_ClaimFIQ :
    dprintf(("","Service_ClaimFIQ\n"));
    // somebody wants to claim FIQ, test if we have it claimed

    if (IntHandler_Get_Status(SoftIR_FIQ_Test) & SoftIR_FIQ_Claimed)
    {
      dprintf(("","*Releasing fiq\n"));
      IntHandler_FIQ_Control(SoftIR_FIQ_UnInstall,SoftIR_NoServiceCall);
      reg->r[1]=0;           // Specify that we've freed it up
      fiq_wanted=1;          // When we get the next ReleaseFIQ call than attempt to claim it
    } // if (IntHandler_Get_Status(SoftIR_FIQ_Test) & SoftIR_FIQ_Claimed)
    break;
  } // switch (service_number)
}

/*
_kernel_oserror *SoftIR_swi(int swi_number, _kernel_swi_regs *reg, void *pw)
{
  _kernel_oserror *error = NULL;

  switch (swi_number) {
  case 0 : // Tolerance
    dprintf(("","Setting tolerance to %d\n",reg->r[0]));
    MsgHandler_Set_Tolerance(reg->r[0]);
    break;

  case 1 : // CheckBuffer
    if (cyclic_buffer!=NULL)
      MsgHandler_Check_Buffer();
    break;

  case 2 : // ClearBuffer
    dprintf(("","Clear buffer %p\n",cyclic_buffer));
    if (cyclic_buffer!=NULL)
    {
      // reset the buffer back to start state
      cyclic_buffer[0]=20;
      cyclic_buffer[1]=20;
    }
    break;

  // any other swi calls
  default:
    my_globalerror->errnum=800002; // **** need to get valid error number
    strcpy(my_globalerror->errmess,"Unsupport SoftIR SWI");
    error=my_globalerror;
    break;  } // switch (swi_number)

  return(error);
}
*/

extern int message_count, message_invalid, message_12, message_24,message_32;

_kernel_oserror *cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *error=NULL;

  switch (cmd_no)
  {
  case 0 : //SoftIR_Status
    printf("SoftIR Message status:\n\n");
    printf("RCMM Device is ");
    if (DevFSIntFc_Get_Status()==SoftIR_DevFS_Claimed)
      printf("open.\n");
    else
      printf("closed.\n");
    printf("Message count....\n");
    printf("Total   : %d\n",message_count);
    printf("Invalid : %d\n",message_invalid);
    printf("12 bit  : %d\n",message_12);
    printf("24 bit  : %d\n",message_24);
    printf("32 bit  : %d\n",message_32);
    break;
  }

  return(error);
}

/* End of module.c */
