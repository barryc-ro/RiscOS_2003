; rpc.s
; this file contains the fiq handler code for the RPC softir podule

fiq_handler_code
; r13 is preset to IOMD base
; r12 is preset to flag
; r8  is preset to data word


; toggle edge and led by reading our internal flag, xor bits 4/5
	mov r9,#&89000000           ; podule base

;	r12 is still set to flag
	ldr r12,flag

	mov r10,r12,lsr #6	    ; reduce flag down to 1 bit on or off
	eor r12,r12,#&60            ; r12 = flag, toggle bits 4 and 5 for LED and XOR gate
	str r12,[r9]
	str r12,flag

	str r13,[r13,#&5C]            ; latch timer1, r13 is still IOMD base
	ldrb r9,[r13,#&50]           ; get low bit
	ldrb r11,[r13,#&54]          ; get high bit
	add r9,r9,r11,lsl #8        ; combine low and high bits

;	cmp r9,#&2000
	rsb r9,r9,#&2000            ; calculate how much time taken since last interrupt
;	movgt r9,#&3F00

	orr r9,r9,r10,lsl #16       ; add state change flag to time word

; reset timer to 2000, r13 is still IOMD base
	mov r10,#&00
	str r10,[r13,#&50]           ; low
	mov r10,#&20
	str r10,[r13,#&54]           ; high
	str r10,[r13,#&58]           ; go

; enable irq for timer 1, r13 is still IOMD base
	ldrb r10,[r13,#&18]
	orr r10,r10,#1<<6
	strb r10,[r13,#&18]

; store timer value
;	r8 is still set to data block base
	ldmia r8,{r10-r12}         ; r10 = data _start, r11 = data_ptr, r12 = data_max
;
	str r9,[r8,r11]            ; store timer value at data_adr+data_ptr value
;
	add r11,r11,#4              ; increment data_ptr
	cmp r11,r12                 ; test if data_ptr=data_end
	moveq r11,#20               ; reset back to start if true (offset 20 is start)
;
	cmp r11,r10                 ; test if data_ptr=data_start
	addeq r10,r10,#4            ; increment data_start to reflect new start position
;
	cmp r10,r12                 ; test if data_start=data_end
	moveq r10,#20               ; reset back to start if true

	stmia r8,{r10-r11}         ; store data_start, data_ptr, data_max to data structure

;finished
	subs pc,r14,#4

	END
