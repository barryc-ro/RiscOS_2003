; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     0

;---------------------------------------------------------------------------
Title   DCB     "PS2Driver",0
Helpstr DCB     "PS2Driver",9,"$VString ($Date)",0
                ALIGN

;---------------------------------------------------------------------------
;       Module initialisation point.
;
; May corrupt R0-R6,R12,R14, must preserve R7-R11,R13
;
Init
        ENTRY
;
; Check machine type
;
        MOV     r0, #2                          ;Check main hardware details
        SWI     XOS_ReadSysInfo
        EXIT    VS
                                                ;R0 bits 8..15 give I/O control chip type
        AND     r0, r0, #&0000FF00              ;  0=IOC, 1=IOMD
        TEQ     r0,     #&00000100              ;  must have IOMD
        BNE     %FT99
;
; Hardware OK
;
        LDR     r2, [r12]                       ; Have we already some workspace?
        CMP     r2, #0
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace.
        EXIT    VS

        STR     r2, [r12]                       ; Store workspace pointer.
01
        MOV     r12, r2

 [ TMLDebug
        InsertTMLInitialisation 0               ;my TML card uses podule slot 0
 ]
       ;DLINE   "PS2 driver module initialisation"

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_RegisterFiles
 ]

        MOV     r0, #0                          ;Initialise workspace.
 [ international
        STR     r0, message_file_open
 ]

 [ 1 = 1
        SWI     XPortable_ReadFeatures          ;If this call works,
        MOVVC   r0, #3                          ; assume we're running on a Stork - don't ask
        BVC     %FT20                           ; ReadSysInf0(2), cos we communicate via Portable module

        MOV     r1, #IOMD_Base
        LDRB    r0, [r1, #IOMD_ID0]
        CMP     r0, #&E7
        LDRB    r0, [r1, #IOMD_ID1]
        CMPEQ   r0, #&D4
        MOVEQ   r0, #1                          ;IOMD (Risc PC)
        MOVNE   r0, #2                          ;else assume Morris
20
 |
        MOV     r0, #1                          ;Hardwire Medusa
 ]
        STR     r0, PortCount

        BL      StartUp
        BLVS    ShutDown
        EXIT
;
;Wrong hardware for PS2Driver module
;
99
        EXIT

;---------------------------------------------------------------------------
;       Start up code.
;
StartUp
        ENTRY   "r0,r1,r2,channel"

        Debug   mod,"SM_StartUp"
       ;DLINE   "PS2Driver: StartUp"

        BL      ClaimVectors
        BLVC    KeyInit
        BLVC    MouseInit

        MOV     r0, #3
        ADR     channel, PS2ch3         ;R10 points to channel workspace
        BLVC    StreamInit

        MOV     r0, #2
        ADR     channel, PS2ch2         ;R10 points to channel workspace
        BLVC    StreamInit

        MOV     r0, #1
        ADR     channel, PS2ch1         ;R10 points to channel workspace
        BLVC    StreamInit

        LDR     r1, PortCount
        CMP     r1, #2
        BEQ     %FT10
        BLT     %FT20

        ADRVC   channel, PS2ch3         ;R10 points to channel workspace
        BLVC    StreamEnable
10
 [ SecondPort
        ADRVC   channel, PS2ch2         ;R10 points to channel workspace
        BLVC    StreamEnable
 ]
20
        ADRVC   channel, PS2ch1         ;R10 points to channel workspace
        BLVC    StreamEnable

        MOVVC   r0, #0                  ; Get current pointer type.
        SWIVC   XOS_Pointer
        MOVVC   r1, r0
        BLVC    PointerSelected         ; Enable if one of ours.

        EXIT

;---------------------------------------------------------------------------
;       Service handler.
;
Service
        TEQ     r1, #Service_Reset
        TEQNE   r1, #Service_Portable
 [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
 ]
        MOVNES  pc, lr

        LDR     r12, [r12]              ;Get workspace pointer

        TEQ     r1, #Service_Portable
        BEQ     ServicePortablePower

        TEQ     r1, #Service_Reset
        BEQ     StartUp

 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        MOVNES  pc, lr

        ENTRY   "r0-r3"
        ADR     r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
        EXITS
 |
        MOVS    pc, lr
 ]

ServicePortablePower
        TEQS    r2,#ServicePortable_PowerDown   ; Portable power down?
        TEQNES  r2,#ServicePortable_PowerUp     ; Or portable power up?
        MOVNES  pc, lr                          ; No then exit

        TEQ     r2, #ServicePortable_PowerUp    ; Portable power up?
        BNE     ServPortPwrDown
;Powering up
        ENTRY   "channel"
;
; Channel 1 connects directly to the external keyboard port - look for it powering up
;
        TST     r3, #PortableControl_ExtPowerEnable
        ADRNE   channel, PS2ch1
        BLNE    SendRESET                       ;Reset device and channel
;
; Channel 2 is switched to either the internal trackerball or external mouse port
;
        TST     r3, #(PortableControl_IntTBallEnable :OR: PortableControl_ExtMouseEnable)
        ADRNE   channel, PS2ch2
        BLNE    SendRESET                       ;Reset device and channel

        EXITS


ServPortPwrDown
;Powering down
        ENTRY   "channel"
;
; Channel 1 connects directly to the external keyboard port
;
        TST     r3, #PortableControl_ExtPowerEnable
        ADRNE   channel, PS2ch1
        BLNE    SuspendChannel
;
; Channel 2 is switched to either the internal trackerball or external mouse port
;
        TST     r3, #(PortableControl_IntTBallEnable :OR: PortableControl_ExtMouseEnable)
        ADRNE   channel, PS2ch2
        BLNE    SuspendChannel

        EXITS


;---------------------------------------------------------------------------
;       Sit on KEYV for enable call and so that LEDs can be set.
;
KeyVec
       ;TEQ     r0, #2          ;KeyDown
       ;BEQ     keyv_checkhotkeys

        TEQ     r0, #3
        BEQ     keyv_setleds

        TEQ     r0, #KEYV_PseudoRXInt
        BEQ     keyv_pseudoRXint

        TEQ     r0, #KEYV_PseudoTXInt
        BEQ     keyv_pseudoTXint

 [ PortInfo
        TEQ     r0, #KEYV_PortInfo
        BEQ     keyv_portinfo
 ]
        TEQ     r0, #4
        MOVNES  pc, lr

keyv_init
 [ debugtable
        ENTRY   "r0"
        DebugTab r0,lr,#&81
 |
        ENTRY
 ]
        IRQOff  lr
 [ KillAutoRepeat
        BL      ClearKbd
 ]
        LDRB    lr, KeyState            ; Safe to start sending keys.
        BIC     lr, lr, #state_RESET
        STRB    lr, KeyState
        EXITS

;keyv_checkhotkeys
;       ;ENTRY
;      ;;DREG    r1, "KEYV key down &",,LongWord
;       ;EXIT
;
;        TEQ     r1, #&60                ;Check for 'Reset Stork external Keyboard' hotkey
;        MOVNES  pc, lr
;
;        ENTRY   "channel"
;        ADR     channel, PS2ch1
;        BL      SendRESET               ;An asynchronous call
;        EXITS


keyv_setleds
 [ debugtable
        ENTRY   "r1,r2,channel"
        DebugTab r2,lr,#&82
 |
        ENTRY   "r1,channel"
 ]
        MOV     lr, r1
        TST     lr, #4                  ; Swap bits 0 and 2.
        BICEQ   r1, r1, #1
        ORRNE   r1, r1, #1
        TST     lr, #1
        BICEQ   r1, r1, #4
        ORRNE   r1, r1, #4
        STRB    r1, LEDState

        ADR     channel, PS2ch1         ;
        BL      SetLEDs                 ;checks device type
        ADR     channel, PS2ch2
        BL      SetLEDs
        ADR     channel, PS2ch3
        BL      SetLEDs
        EXITS

 [ PortInfo
;---------------------------------------------------------------------------
;
keyv_portinfo
        ENTRY "r5, channel"

        CMP     r1, #1
        LDRGE   r5, PortCount
        CMPGE   r5, r1
        EXITS   LT

        CMP     r1, #2
        ADRLT   channel, PS2ch1
        ADREQ   channel, PS2ch2
        ADRGT   channel, PS2ch3

        LDRB    r2, DeviceType

        EXITS
 ]

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        ENTRY

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "pc",EQ,^

        BL      ShutDown

        EXITS

;---------------------------------------------------------------------------
;       Tidy up before dying.
;       out:  preserves all registers and flags.
;
ShutDown
        ENTRY   "r0-r2,r9"

        Debug   mod,"SM_ShutDown"

        BL      ReleaseVectors                  ; Don't want to be enabled/get LEDs any more.
;
; Must disable (Medusa) Kbd
;              (Kryten) Mse & Kbd
;              (Stork)  Psd, Mse & Kbd
;
        LDR     r1, PortCount
        CMP     r1, #2
        BEQ     %FT10
        BLT     %FT20

        PsdDisable      ;corrupts R0,R1,R9
10
 [ SecondPort
        MseDisable r0,r1
 ]
20
        KbdDisable r0,r1


;>>>test for kbd active???
        MOV     r0, #0
        SWI     XOS_InstallKeyHandler
        SWI     XOS_InstallKeyHandler           ; Reinstall current key handler to clear keys down.
;>>>

 [ international
        LDR     r0, message_file_open           ; Close the message file if it's open.
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
 ]

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
 ]

        EXITS                                   ; Ignore errors, preserve flags.

        END
