; > Sources.PS2Driver


;---------------------------------------------------------------------------
; ClaimVectors
;       Out:    corrupts r0
;
;       Claim vectors for keyboard and mouse input.
;
ClaimVectors
        ENTRY   "r1-r4,r9"

        Debug   mod,"ClaimVectors"

        IRQOff  r4                              ; Disable keyboard IRQs.

        LDR     r1, PortCount
        CMP     r1, #2
        BEQ     %FT10
        BLT     %FT20

        PsdRxOffTxOff   ;corrupts R0,R1,R9
10
 [ SecondPort
        MseRxOffTxOff r1,r2
 ]
20
        KbdRxOffTxOff r1,r2

        SetPSR  r4

        LDR     r1, PortCount
        CMP     r1, #2
       ;BEQ     %FT30
        BLT     %FT40

;
; Stream 3 is the Pseudo PS2 stream which communicates through KEYV, claimed below.
;

;
; Claim RX & TX interrupts for stream 2 (the MORRIS MSE port).
;
30
 [ SecondPort
        MOV     r0, #IOMD_MouseTxEmpty_DevNo    ;Mouse serial transmit register empty
        ADRL    r1, TXIRQHandler
        ADR     r2, PS2ch2                      ;Pass channel workspace, IRQroutine recovers
        SWI     XOS_ClaimDeviceVector           ; module workspace from a field within it.
       ;BVS     %FT99
        BVS     %FT40

        MOV     r0, #IOMD_MouseRxFull_DevNo     ;Mouse serial receive register full
        ADRL    r1, RXIRQHandler
       ;ADR     r2, PS2ch2
        SWI     XOS_ClaimDeviceVector
       ;BVS     %FT99
 ]
;
; Claim RX & TX interrupts for stream 1 (the IOMD/MORRIS KBD port).
;
40
        MOV     r0, #14                         ;Keyboard serial transmit register empty
        ADRL    r1, TXIRQHandler
        ADR     r2, PS2ch1                      ;Pass channel workspace, IRQroutine recovers
        SWI     XOS_ClaimDeviceVector           ; module workspace from a field within it.
        BVS     %FT99

        MOV     r0, #15                         ;Keyboard serial receive register full
        ADRL    r1, RXIRQHandler
       ;ADR     r2, PS2ch1
        SWI     XOS_ClaimDeviceVector
        BVS     %FT99

        MOV     r0, #PointerV                   ; Claim PointerV during lifetime.
        ADR     r1, PointerRequest
        MOV     r2, r12
        SWI     XOS_Claim
        BVS     %FT99

        MOV     r0, #KEYV
        ADR     r1, KeyVec
       ;MOV     r2, r12
        SWI     XOS_Claim

        Debug   mod," vectors claimed"
99
        EXIT

;---------------------------------------------------------------------------
; ReleaseVectors
;       Out:    corrupts r0
;
;       Release vectors for keyboard input.
;
ReleaseVectors
        ENTRY   "r1-r4"

        Debug   mod,"ReleaseVectors"

        LDR     r1, PortCount
        CMP     r1, #2
       ;BEQ     %FT10
        BLT     %FT20
;
; Stream 3 is the Pseudo PS2 stream which communicates through KEYV, released below.
;

;
; Stream 2 is the MORRIS MSE port
;
10
 [ SecondPort
        MOV     r0, #IOMD_MouseTxEmpty_DevNo    ;Mouse serial transmit register empty
        ADRL    r1, TXIRQHandler
        ADR     r2, PS2ch2
        SWI     XOS_ReleaseDeviceVector

        MOV     r0, #IOMD_MouseRxFull_DevNo     ;Mouse serial receive register full
        ADRL    r1, RXIRQHandler
       ;ADR     r2, PS2ch2
        SWI     XOS_ReleaseDeviceVector
 ]
20
        MOV     r0, #14                         ;Keyboard serial transmit register empty
        ADRL    r1, TXIRQHandler
        ADR     r2, PS2ch1
        SWI     XOS_ReleaseDeviceVector

        MOV     r0, #15                         ;Keyboard serial receive register full
        ADRL    r1, RXIRQHandler
       ;ADR     r2, PS2ch1
        SWI     XOS_ReleaseDeviceVector


        MOV     r0, #KEYV
        ADRL    r1, KeyVec
        MOV     r2, r12
        SWI     XOS_Release

        MOV     r0, #PointerV
        ADR     r1, PointerRequest
       ;MOV     r2, r12
        SWI     XOS_Release

        Debug   mod," vectors released"

        EXITS

;-----------------------------------------------------------------------------
; KeyInit
;
;       Initialise the keyboard.
;
KeyInit
        ENTRY   "r0"

        Debug   key,"KeyInit"
        MOV     r0, #state_RESET
        STRB    r0, KeyState
 [ KillAutoRepeat
        BL      ClearKbd
 ]

        EXITS

 [ KillAutoRepeat
;-----------------------------------------------------------------------------
; ClearKbd
;
;       Clear the key flag table.
;
ClearKbd
        ENTRY   "r0"
        MOV     r0, #0
        ADR     lr, KeyFlags
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        EXIT
 ]


;-----------------------------------------------------------------------------
; MouseInit
;
;       Initialise the mouse.
;
MouseInit
        ENTRY   "r0"
        Debug   key,"MouseInit"
        EXIT

;---------------------------------------------------------------------------
; PointerInit
;       r1 = mouse type
;
;       Initialise mouse position and button data.
;
PointerInit
        ENTRY

        Debug   mod,"SM_PointerInit"

        MOV     lr, #0                          ; Initialise mouse data.
        STR     lr, DeltaX
        STR     lr, DeltaY
        STR     lr, Buttons

        EXIT

;---------------------------------------------------------------------------
; StreamInit
;
;       In: R0 indicates PortName
;           channel (R10) points to channel workspace block
;
;       Initialise the PS2 I/O stream.
;
StreamInit
        ENTRY   "r0"
       ;DLINE   "PS2Driver: StreamInit"

        STR     workspace, moduleworkspace      ;so that interrupt routine can recover main R12
        STRB    r0, PortName
 [ 1 = 1
        MOV     r0, #state_WANTBAT              ; Enter reset state.
 |
        MOV     r0, #state_RESET :OR: state_WANTBAT     ; Enter reset state.
 ]
        STRB    r0, KBState

        ADR     r0, TxBuffer                    ; Clear TxBuffer.
        STR     r0, TxInsert
        STR     r0, TxPtr

        MOV     r0, #resend_count
        STRB    r0, ResendCount

        MOV     r0, #0
        STRB    r0, DeviceType
        EXITS

;---------------------------------------------------------------------------
; StreamEnable
;
;       In: channel (R10) points to channel workspace block
;
;       Enable the PS2 I/O stream, then send RESET to any connected device.
;
StreamEnable
        ENTRY   "r0,r1,r9"                      ;NB Psd macros corrupt r0,r1,r9
       ;DLINE   "PS2Driver: StreamEnable - In"

        IRQOff  lr

        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        KbdEnable r0,lr,LT                      ;   when KbdDat
        MseEnable r0,lr,EQ                      ;   when MseDat
        PsdEnable GT    ;corrupts r0,r1,r9      ;   when PsdDat

        IOMDBase lr                             ; Make sure we can transmit.
        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        LDRLTB  lr, [lr, #IOCSERRX]             ;   when KbdDat
        LDREQB  lr, [lr, #IOMD_MSEDAT]          ;   when MseDat

        ADRL    r0, PS2_GetACKforRESET
        STR     r0, RXStateHandler
        MOV     r0, #command_RESET              ; Send reset command.
        BL      SendByte

        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        KbdRxOffTxOn r0,lr,LT                   ;   when KbdDat
        MseRxOffTxOn r0,lr,EQ                   ;   when MseDat
        PsdRxOffTxOn GT ;corrupts r0,r1,r9      ;   when PsdDat

       ;DLINE   "PS2Driver: StreamEnable - Out"
        EXITS

;---------------------------------------------------------------------------
; PointerRequest
;       In:     r0 = reason code (0 = request state)
;               r1 = device type (0 for us)
;       Out:    r2 = signed 32-bit X movement
;               r3 = signed 32-bit Y movement
;
;       Handle requests for mouse movements etc from the Kernel.
;
PointerRequest
        TEQ     r0, #PointerReason_Request              ; If not requesting then
        BNE     PointerIdentify                         ;   try identify.
        TEQ     r1, #PointerDevice_PS2Mouse             ; If not a PS2 mouse then
        MOVNES  pc, lr                                  ;   pass on call.

        Push    "r10,r11"

        ADR     lr, MouseData                   ; Get DeltaX, DeltaY and Buttons.
        LDMIA   lr, {r2,r3,r10}

        MOV     lr, #0                          ; Zero DeltaX and DeltaY.
        STR     lr, DeltaX
        STR     lr, DeltaY

        LDRB    r11, LastButtons                ; Get button states on last poll.
        EORS    r11, r11, r10                   ; Get differences.
        Pull    "r10,r11,pc",EQ                 ; Claim vector if none.

        STRB    r10, LastButtons
        Push    "r0,r1,r9"

        TST     r11, #4                         ; Check left (SELECT).
        BEQ     %FT10

        TST     r10, #4
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&70
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
10
        TST     r11, #2                          ; Check centre (MENU).
        BEQ     %FT20

        TST     r10, #2
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&71
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
20
        TST     r11, #1                          ; Check right (ADJUST).
        Pull    "r0,r1,r9-r11,pc",EQ

        TST     r10, #1
        MOVEQ   r0, #1
        MOVNE   r0, #2
        MOV     r1, #&72
        MOV     r9, #KEYV
        SWI     XOS_CallAVector
        Pull    "r0,r1,r9-r11,pc"                ; Claim call.

;---------------------------------------------------------------------------
; PointerIdentify
;       In:     r0 = reason code 1
;               r1 = pointer to device type record (or 0)
;       Out:    r1 = pointer to updated list
;
;       Identify our pointer device.
;
PointerIdentify
        TEQ     r0, #PointerReason_Selected     ; If selected then
        BEQ     PointerSelected                 ;   initialise.
        TEQ     r0, #PointerReason_Identify     ; If not identify then
        MOVNES  pc, lr                          ;   pass on call.

        ENTRY   "r2"

        Debug   mod,"SM_PointerIdentify"

        ADR     r2, PS2Data
        BL      AddPointerStruct
;        EXITS   VS
;
;        ADR     r2, MSCData
;        BL      AddPointerStruct
;        EXITS   VS
;
;        ADR     r2, MSData
;        BL      AddPointerStruct
        EXITS

AddPointerStruct
; In:   r1 = pointer to device type record list or 0
;       r2 = pointer to device data
; Out:  r1 = pointer to extended list
        ENTRY   "r0-r4"

        LDRB    r4, [r2], #1                    ; r4=device type, r2->device name/token

  [ international
        MOV     r1, r2
        MOV     r2, #0
        BL      MsgTrans_Lookup                 ; r2->device name looked up
        EXIT    VS                              ; If lookup fails then don't add our record to list.
  ]
        MOV     r1, r2                          ; Save pointer to device name.
        BL      strlen                          ; r3=length of string pointed to by r2
        ADD     r3, r3, #MinPointerRecordSize   ; Includes byte for string terminator.
        MOV     r0, #ModHandReason_Claim        ; Claim space for a device type record.
        SWI     XOS_Module
        EXIT    VS

        LDR     r0, [sp, #4]                    ; Get back pointer to list we were passed.
        STR     r0, [r2, #PointerNext]          ; Tag it onto ours.
        MOV     r0, #0
        STR     r0, [r2, #PointerFlags]         ; No flags.
        STRB    r4, [r2, #PointerType]

        ADD     r0, r2, #PointerName
        BL      strcpy                          ; Copy name into record (r1 to r0).
        STR     r2, [sp, #4]                    ; Pass on updated record pointer.

        EXIT

strlen
; In:   r2->control char terminated string
; Out:  r3=length of string
        ENTRY   "r2"
        MOV     r3, #0
01
        LDRB    lr, [r2], #1
        CMP     lr, #" "
        ADDCS   r3, r3, #1
        BCS     %BT01
        EXIT

strcpy
; In:   r0->null terminated destination string
;       r1->control char terminated source string
        ENTRY   "r0,r1"
01
        LDRB    lr, [r1], #1
        CMP     lr, #" "
        STRCSB  lr, [r0], #1
        BCS     %BT01
        MOV     lr, #0
        STRB    lr, [r0]
        EXIT

PS2Data
        DCB     PointerDevice_PS2Mouse
 [ international
        DCB     "PS2Name",0
 |
        DCB     "PS2 mouse",0
 ]

;MSCData
;        DCB     PointerDevice_MSCMouse
; [ international
;        DCB     "MSCName",0
; |
;        DCB     "Mouse Systems Corp mouse",0
; ]
;
;MSData
;        DCB     PointerDevice_MicrosoftMouse
; [ international
;        DCB     "MSName",0
; |
;        DCB     "Microsoft mouse",0
; ]
        ALIGN

;---------------------------------------------------------------------------
; PointerSelected
;       In:     r1 = device type
;
;       Enable PS2 mouse if the type is one of ours, disable if not.
;
PointerSelected
        TEQ     r1, #PointerDevice_PS2Mouse     ; If not ours then
        BNE     Disable                         ;   make sure we're disabled.
;
; One or more ports may have a mouse attached, in which case,
; each is already running a 'mouse state machine'.
; Enabling is simply a case of zeroing the position deltas.
;
EnableMouse
        ENTRY
        Debug   mod,"SM_Enable"
        BL      PointerInit                     ; Initialise mouse position and button data.
        EXITS
;
; No action, state machines left running.
;
Disable
        ENTRY
        Debug   mod,"SM_Disable"
        EXITS

;-----------------------------------------------------------------------------
; SuspendChannel
;
;       In:     channel (R10) points to channel workspace block
;
SuspendChannel
        ENTRY
        ADR     lr, PS2_SinkBytes
        STR     lr, RXStateHandler
        MOV     lr, #0
        STRB    lr, DeviceType                  ;DeviceType Unknown
        EXITS

;-----------------------------------------------------------------------------
; SendRESET
;
;       In:     channel (R10) points to channel workspace block
;
;       Send PS/2 RESET command through channel.
;
SendRESET
        ENTRY   "r0"
       ;DLINE   "PS2driver SendRESET"

        IRQOff  lr

        LDR     r0, TxInsert                    ;Flush any unsent commands
        STR     r0, TxPtr

        MOV     r0, #0
        STRB    r0, DeviceType                  ;DeviceType Unknown

        ADRL    r0, PS2_GetACKforRESET
        STR     r0, RXStateHandler
        MOV     r0, #command_RESET              ;Reset the mouse
        BL      SendByte
        BL      StartTX

        EXITS

;-----------------------------------------------------------------------------
; SetLEDs - Set LED state.
;
;       In:     channel (R10) points to channel workspace block
;
SetLEDs
        ENTRY   "r0"

        LDRB    r0, DeviceType
        CMP     r0, #2                  ;Only keyboards have LEDs
        EXIT    NE

        Debug   key,"Setting LED states"

        IRQOff  lr

        MOV     r0, #command_SETLEDS
        BL      SendByte
        LDRB    r0, LEDState
        BL      SendByte
        BL      StartTX

        EXITS

;-----------------------------------------------------------------------------
; SendByte
;
;       In:     r0 = byte to send
;               channel (R10) points to channel workspace block
;               interrupts should be off
;
;       Insert the given byte into TxBuffer.
;
SendByte
        ENTRY

        Debug   key,"SendByte",r0
       ;DREG    r0, "SendByte &",,LongWord

        LDR     lr, TxInsert                    ; Get position to insert.
        STRB    r0, [lr], #1                    ; Store the byte, increment pointer.
        ADR     r0, TxBufferEnd
        TEQ     r0, lr                          ; If reached the end then
        ADREQ   lr, TxBuffer                    ;   wrap to the start.
        STR     lr, TxInsert                    ; Update the pointer.

        EXIT

;-----------------------------------------------------------------------------
; PrependByte
;
;       In:     r0 = byte to send (or -1 to send byte already there)
;               interrupts should be off
;
;       Insert the given byte into TxBuffer before next byte to be sent.
;
PrependByte
        ENTRY   "r1"

        Debug   key,"PrependByte",r0
       ;DREG    r0, "PrependByte",,LongWord

        LDR     r1, TxPtr
        ADR     lr, TxBuffer
        TEQ     r1, lr                          ; If at the start then
        ADREQ   r1, TxBufferEnd                 ;   wrap to the end.
        SUB     r1, r1, #1
        STR     r1, TxPtr
        CMP     r0, #-1                         ; If we have a byte to insert then do it.
        STRNEB  r0, [r1]

        EXIT

;-----------------------------------------------------------------------------
; StartTX
;
;       In:     interrupts should be disabled
;
;       Start to send a command to the keyboard.
;
StartTX         ROUT
        ENTRY   "r0,r1,r9"                      ;NB Psd macros corrupt r0,r1,r9

        Debug   key,"Sending command"

        LDR     r0, TxPtr
        LDR     lr, TxInsert
        TEQ     r0, lr                          ; If nothing to send then
        EXIT    EQ                              ;   do nothing.

        LDRB    r0, KBState
        TST     r0, #state_WANTACK :OR: state_WANTBAT   ; Only enable TX irq if we're not waiting to hear from keyboard
        EXIT    NE                                      ;   (RX irq will do it for us).

        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        KbdRxOffTxOn r0,lr,LT                   ;   when KbdDat
        MseRxOffTxOn r0,lr,EQ                   ;   when MseDat
        PsdRxOffTxOn GT                         ;   when PsdDat

        EXIT

;-----------------------------------------------------------------------------
; keyv_pseudoTXint
;
; Called via KEYVEC
;
; In:   R0 = ? reason code
;       R1 = channel wsptr
;
; Out:  R2 = byte to feed to pseudo TX stream
;
keyv_pseudoTXint
        Pull    "R14"                   ;Pull stacked PC value into R14, so that
        ENTRY   "r9,channel,r11"        ; EXIT will return directly to caller
        MOV     channel, R1             ; rather than passing on the call
        B       ep2             ;entry point into TXIRQHandler, which
                                ; must leave byte to transmit in R2

; TXIRQHandler
;       In:     r0-r3,r11 corruptible
;
;       Send a byte to the keyboard.
;
TXIRQHandler
        ENTRY   "r9,channel,r11"
        MOV     channel, workspace
        LDR     workspace, moduleworkspace

ep2                                     ;Entry point for Pseudo PS/2 stream

        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        KbdRxOnTxOff r0,r1,LT                   ;   when KbdDat
        MseRxOnTxOff r0,r1,EQ                   ;   when MseDat
        PsdRxOnTxOff GT                         ;   when BatDat

        LDR     r0, TxPtr
        LDR     r1, TxInsert
        TEQ     r0, r1                          ; If no bytes to send then we shouldn't be here but check anyway.
        MOVEQ   r1, #-1                         ; indicate nothing to transmit
        EXITS   EQ

        LDRB    r1, [r0], #1                    ; Get byte to send, increment pointer.
        ADR     r2, TxBufferEnd
        TEQ     r0, r2                          ; If reached the end then
        ADREQ   r0, TxBuffer                    ;   wrap to the start.
        STR     r0, TxPtr                       ; Update pointer.

        LDRB    r3, KBState
        ORR     r3, r3, #state_WANTACK          ; Flag that we want to hear from keyboard before we can send again.
        STRB    r3, KBState

        IOMDBase r11                            ; Send the byte through appropriate channel
        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        STRLTB  r1, [r11, #IOCSERTX]            ;   when KbdDat
        STREQB  r1, [r11, #IOMD_MSEDAT]         ;   when MseDat
        MOVGT   r2, r1                          ;   when BatDat return byte in R2

        ;DebugTab r2,r3,#&01,r1

        EXITS

;-----------------------------------------------------------------------------
;
; Called via KEYVEC
;
; In:   R0 = ? reason code
;       R1 = channel wsptr
;       R2 = byte received
;       R3 = status (parity etc)
;
; Out   R1
;
keyv_pseudoRXint
        Pull    "R14"                   ;Pull stacked PC value into R14, so that
        ENTRY   "r9, channel,r11"       ; EXIT will return directly to caller
        MOV     channel, R1             ; rather than passing on the call
        MOV     r1, r3
        MOV     r0, r2
        B       ep1

; RXIRQHandler
;       In:     r0-r3,r11 corruptible >>>EH  R0-R3,R12 surely
;
;       Service keyboard receive interrupts.
;
RXIRQHandler    ROUT
        ENTRY   "r9, channel,r11"
        MOV     channel, workspace
        LDR     workspace, moduleworkspace

; r1 Get status so we can check parity.
; r0 Get byte that was sent.

        IOMDBase r11
        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        LDRLTB  r1, [r11, #IOMD_KBDCR]          ;   when KbdDat
        LDRLTB  r0, [r11, #IOCSERRX]            ;
        LDREQB  r1, [r11, #IOMD_MSECR]          ;   when MseDat
        LDREQB  r0, [r11, #IOMD_MSEDAT]         ;

        ;DebugTab r2,r3,#&00,r0

        LDRB    r3, KBState                     ; Get current state.
        BIC     r3, r3, #state_WANTACK          ; Heard from keyboard so no longer want an ACK.

        EOR     lr, r0, r0, LSR #4              ; Build parity in bit 0.
        EOR     lr, lr, lr, LSR #2
        EOR     lr, lr, lr, LSR #1
        EOR     lr, lr, r1, LSR #2              ; Combine with received parity.
        TST     lr, #1
        BEQ     parityerror                     ; Should be odd parity.

ep1                                     ;Entry point for Pseudo PS/2 stream
        LDRB    r3, KBState                     ; Get current state.
        BIC     r3, r3, #state_WANTACK          ; Heard from keyboard so no longer want an ACK.


      ;;DREG    r0, "Received &",,LongWord
        STRB    r3, KBState
        LDR     pc, RXStateHandler              ;Got byte, so branch to handler for current state.


parityerror
        LDRB    r0, ResendCount                 ; Limit the number of times we ask to resend one byte.
        SUBS    r0, r0, #1
        MOVCC   r0, #resend_count
        STRB    r0, ResendCount
        MOVCS   r0, #command_RESEND             ; Ask keyboard to resend.
        BCS     prependTX
clearTX
        LDR     r0, TxInsert                    ; Got severe problems receiving so stop sending and clear TX buffer.
        STR     r0, TxPtr
        B       RXIRQExitState

resend
        LDRB    r0, ResendCount                 ; Limit the number of times we resend one byte.
        SUBS    r0, r0, #1
        MOVCC   r0, #resend_count
        STRB    r0, ResendCount
        BCC     clearTX                         ; Got severe problems sending so clear TX buffer.
        MOV     r0, #-1
prependTX
        BL      PrependByte
        B       RXIRQExitState


; r0 = time delay in 1/2 microsecond units
; r1 = command
; r2 = new state handler
delay_send_continue
        BL      DoMicroDelay
                                ;drop into...
; r1 = command
; r2 = new state handler
send_continue
        MOV     r0, r1
        BL      SendByte
                                ;drop into...
; r2 = new state handler
continue
        STR     r2, RXStateHandler

        LDRB    r3, KBState
       ;B       RXIRQExit

RXIRQExitState
        STRB    r3, KBState
RXIRQExit
        LDR     r0, TxPtr
        LDR     r1, TxInsert
        TEQ     r0, r1
        EXITS   EQ
        TST     r3, #state_WANTACK
        EXITS   NE

        LDRB    r0, PortName                    ; case PortName of
        CMP     r0, #2                          ;
        KbdRxOffTxOn r0,r1,LT                   ;   when KbdDat
        MseRxOffTxOn r0,r1,EQ                   ;   when MseDat
        PsdRxOffTxOn GT                         ;   when PsdDat
        EXITS


;-----------------------------------------------------------------------------
;
;       DoMicroDelay - Delay for >= R0/2 microseconds
;
; in:   R0 = time delay in 1/2 microsecond units
;       On ARM600, we may or may not be in a 32-bit mode
;
; out:  R0 corrupted
;
DoMicroDelay ENTRY "R1,R2"
        MOV     R2, #IOC
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R1, [R2, #Timer0CL]     ; R1 := low output latch
10
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R14, [R2, #Timer0CL]    ; R14 := low output latch
        TEQ     R14, R1                 ; unchanged ?
        BEQ     %BT10                   ; then loop
        MOV     R1, R14                 ; copy anyway
        SUBS    R0, R0, #1              ; decrement count
        BNE     %BT10                   ; loop if not finished

        EXITS


;-----------------------------------------------------------------------------

;
; State routines called by RXIRQHandler
; -------------------------------------

;
; sent   command_RESET (&FF)
; expect keybd_ACK     (&FA)
; then   keybd_BAT     (&AA)
; then                 (&00) - mouse only
;
PS2_GetACKforRESET
       ;DREG    r0, "PS2_ACKforRESET &",,LongWord
        TEQ     r0, #keybd_ACK
        ADREQ   r2, PS2_GetBAT
        BEQ     continue
        B       unexpected                      ;if device says keybd_BAT, we branch back to PS2_GetBAT

;
; expect keybd_BAT (&AA)
; then             (&00) - mouse only
;
; we branch here from unexpected if we receive keybd_BAT out of sequence
;
PS2_GetBAT
       ;DREG    r0, "PS2_GetBAT &",,LongWord
        TEQ     r0, #keybd_BAT
;
; Delay a while, incase another byte is being received.
; Send a SETRATE command.
; If a mouse is connected, we should receive (&00) (&FA).
; If we don't receive a Zero, assume a keyboard is connected.
;

 [ 1 = 1
        BIC     r3, r3, #state_WANTBAT          ;   no longer want BAT
        STRB    r3, KBState                     ; Store state as KEYV call may change it.
 ]

        MOVEQ   r1, #command_SETRATE
        ADREQ   r2, PS2_GetZero
 [ 1 = 1
        LDREQ   R0, =20000-1    ; R0 = Timer delay (units of 0.5 microsecond)
                                ; 20000*0.5E-6 = 0.01 Seconds (100Hz ticker)
        BEQ     delay_send_continue
 |
        BEQ     send_continue
 ]
        B       unexpected                      ;check for keybd_RESEND etc

;
; received keybd_BAT       (&AA)
; sent     command_SETRATE (&F3)
; expect                   (&00)
; then     keybd_ACK       (&FA)
;
PS2_GetZero
       ;DREG    r0, "PS2_GetZero &",,LongWord
        TEQ     r0, #0                          ;Device ID for mouse
        BNE     keyboard                        ;assume keyboard

       ;DLINE   "PS2driver has found a mouse"
        MOV     r2, #1
        STRB    r2, DeviceType

        ADREQ   r2, PS2_GetACKforSETRATE
        BEQ     continue
        B       unexpected

;
; State routines for mouse
; ------------------------

;
; sent   command_SETRATE (&F3)
; expect keybd_ACK       (&FA)
;
PS2_GetACKforSETRATE
       ;DREG    r0, "PS2_GetACKforSETRATE &",,LongWord
        TEQ     r0, #keybd_ACK
        MOVEQ   r1, #&64        ;default sampling rate
        ADREQ   r2, PS2_GetACKforRATEVALUE
        BEQ     send_continue
        B       unexpected

PS2_GetACKforRATEVALUE
       ;DREG    r0, "PS2_GetACKforRATEVALUE &",,LongWord
        TEQ     r0, #keybd_ACK
 [ SetMouseStep
        MOVEQ   r1, #command_SETCOUNT
        ADREQ   r2, PS2_GetACKforSETCOUNT
        BEQ     send_continue
        B       unexpected

PS2_GetACKforSETCOUNT
       ;DREG    r0, "PS2_GetACKforSETCOUNT &",,LongWord
        TEQ     r0, #keybd_ACK
        MOVEQ   r1, #&03        ;default resolution is 02, try 03 ie twice the count
        ADREQ   r2, PS2_GetACKforCOUNTVALUE
        BEQ     send_continue
        B       unexpected

PS2_GetACKforCOUNTVALUE
       ;DREG    r0, "PS2_GetACKforCOUNTVALUE &",,LongWord
        TEQ     r0, #keybd_ACK
 ]
        MOVEQ   r1, #command_ENABLE
        ADREQ   r2, PS2_GetACKforENABLE
        BEQ     send_continue
        B       unexpected

;
; sent   command_ENABLE (&F4)
; expect keybd_ACK      (&FA)
;
PS2_GetACKforENABLE
       ;DREG    r0, "PS2_ACKforENABLE &",,LongWord
        TEQ     r0, #keybd_ACK
        ADREQ   r2, PS2_GetByte1
        BEQ     continue
        B       unexpected

;
; expecting mouse data reports
;
; normally the state machine executes PS2_GetByte1, PS2_GetByte2, PS2_GetByte3,
;                                     PS2_GetByte1, PS2_GetByte2, PS2_GetByte3,
;                                     PS2_GetByte1, PS2_GetByte2, PS2_GetByte3, ...
;
; If the user unplugs the mouse, then reconnects it, the mouse sends AA 00, so...
; If we receive AA 00 at any time, we might be in a mouse power on reset sequence,
; but then again, it might be a mouse position report that happens to contain those bytes.
;
; Each state checks if the current byte is AA and chooses a different next state handler
; if so. This alternate next state handler (xxx_afterBAT) checks for 00 and calls
; ForceRESET if found.
; This ensures that even if the AA 00 was actually a mouse position report that the
; mouse and the state machine end up in a sane state.
;
PS2_GetByte1_afterBAT                           ;Abnormal entry point :-
        TEQ     r0, #00                         ; previous byte was AA, if current one is 00
        BEQ     ForceRESET                      ;   then hit mouse with a big stick.
PS2_GetByte1                                    ;Normal entry point
       ;DREG    r0, "PS2_GetByte1 &",,LongWord
        STRB    r0, Byte1                       ;Store first byte of a 3byte position report
        TEQ     r0, #keybd_BAT
        ADREQ   r2, PS2_GetByte2_afterBAT       ;Choose alternate handler only if suspect data
        ADRNE   r2, PS2_GetByte2
        B       continue

PS2_GetByte2_afterBAT
        TEQ     r0, #00
        BEQ     ForceRESET                      ;Looks like a mouse power-on-reset
PS2_GetByte2
       ;DREG    r0, "PS2_GetByte2 &",,LongWord
        STRB    r0, Byte2
        TEQ     r0, #keybd_BAT
        ADREQ   r2, PS2_GetByte3_afterBAT
        ADRNE   r2, PS2_GetByte3
        B       continue

PS2_GetByte3_afterBAT
        TEQ     r0, #00
        BEQ     ForceRESET                      ;Looks like a mouse power-on-reset
PS2_GetByte3
       ;DREG    r0, "PS2_GetByte3 &",,LongWord
        STRB    r0, Byte3


        STRB    r3, KBState             ; already stored???
        LDRB    r2, Byte1
                                                ;Build Y movement into r1
        AND     r1, r2, #&20                    ; extract Y data sign
        ORR     r1, r0, r1, LSL #3              ; combine with Byte3 to give 9-bit signed number
        MOV     r1, r1, LSL #23                 ;
        MOV     r1, r1, ASR #23                 ; sign extend it to 32 bits.

        LDRB    r3, Byte2                       ;Build X movement into r0
        AND     r0, r2, #&10                    ; extract X data sign
        ORR     r0, r3, r0, LSL #4              ; combine with Byte2 to give 9-bit signed number
        MOV     r0, r0, LSL #23                 ;
        MOV     r0, r0, ASR #23                 ; sign extend it to 32 bits.

                                                ;Build button states in r2 (r2 = xxxx1MRL)
        AND     r2, r2, #07                     ; r2 now 00000MRL
        ORR     r2, r2, r2, LSL #3              ; r2 now 0000LMRL
        MOV     r2, r2, LSR #1                  ; r2 now 00000LMR

        ADR     lr, MouseData
        LDMIA   lr, {r3,r9}                     ;Accumulate DeltaX,DeltaY and Buttons.
        ADD     r0, r3, r0
        ADD     r1, r9, r1
        STMIA   lr, {r0-r2}

        LDRB    r3, KBState             ;reloaded by continue???

        LDRB    r0, Byte3
        TEQ     r0, #keybd_BAT
        ADREQ   r2, PS2_GetByte1_afterBAT
        ADRNE   r2, PS2_GetByte1
        B       continue


unexpected
        STRB    r3, KBState             ;already saved???

        TEQ     r0, #keybd_RESEND               ; If RESEND then
        BEQ     resend                          ;   resend last byte.

        TEQ     r0, #keybd_BAT                  ; If BAT complete code then
        BEQ     PS2_GetBAT                      ;   handle it.

        B       ForceRESET


ForceRESET
       ;DLINE   "PS2 mouse ForceRESET"
        LDR     r0, TxInsert                    ;Flush any unsent commands
        STR     r0, TxPtr

        MOV     r0, #0
        STRB    r0, DeviceType                  ;DeviceType Unknown

        MOV     r0, #command_RESET              ;Reset the device
        BL      SendByte
        ADR     r2, PS2_GetACKforRESET
        B       continue

;
; State routines for keyboard
; ---------------------------

;
; we branch here from PS2_GetZero if keybd_BAT (&AA) is not followed by the mouse id (&00)
; the byte received is probably keybd_ACK (&FA)
;
; received keybd_BAT       (&AA)
; sent     command_SETRATE (&F3)
; expect   keybd_ACK       (&FA) - but not checked, just assume its a keyboard
;
keyboard
 [ Fix_MED_04434
       ;DLINE   "PS2 driver has found a keyboard"
        MOV     r2, #2
        STRB    r2, DeviceType

        Push    "R0"                            ;Preserve received byte for later use
        MOV     r0, #&7F        ;Value part of set rate/delay command (repeat as slow as possible).
        BL      SendByte

        SVCMode r11
        MOV     r0, #0                          ; Notify keyboard present (may call our enable entry).
        MOV     r1, #2
        MOV     r9, #KEYV
        Push    "lr"
        SWI     XOS_CallAVector
        Pull    "lr"
        SetPSR  r11
        NOP
        Pull    "R0"                            ;Restore recently received byte

        LDRB    r3, KBState                     ;Reload cos value changed if our enble entry was called
        ADR     r2, PS2_GetKBD                  ;Until next keybd_BAT (&AA) arrives, all keyboard data
        STR     r2, RXStateHandler              ; (including byte currently in R0) is processed by PS2_GetKBD
        B       PS2_GetKBD_NP                   ;Alternate entry to PS2_GetKBD avoiding duplicate debug output
 |
       ;DLINE   "PS2 driver has found a keyboard"
        MOV     r2, #2
        STRB    r2, DeviceType

        MOV     r0, #&7F        ;Value part of set rate/delay command (repeat as slow as possible).
        BL      SendByte

        SVCMode r11
        MOV     r0, #0                          ; Notify keyboard present (may call our enable entry).
        MOV     r1, #2
        MOV     r9, #KEYV
        Push    "lr"
        SWI     XOS_CallAVector
        Pull    "lr"
        SetPSR  r11

        ADR     r2, PS2_GetKBD
        B       continue
 ]

;
; main keyboard handler
;
PS2_GetKBD
       ;DREG    r0, "PS2_GetKBD &",,LongWord
PS2_GetKBD_NP                                   ;EP from keyboard, to avoid duplicate debug output
        TEQ     r0, #keybd_BAT                  ; If BAT complete code then
        BEQ     PS2_GetBAT                      ;   handle it.

        TEQ     r0, #keybd_ACK                  ; If ACK then
        BEQ     RXIRQExitState                  ;   we can send the next byte.

        TEQ     r0, #keybd_ERROR                ; If ERROR then
        BEQ     RXIRQExitState                  ;   deal with it.

        LDRB    r2, KeyState
        TST     r2, #state_RESET                ; If we are in a reset state then
        BNE     RXIRQExitState                  ;   can't process key events.

        TEQ     r0, #keybd_KEYUP                ; If this is a key up then
        ORREQ   r3, r3, #state_KEYUP            ;   mark next code as key up.
        BEQ     RXIRQExitState

        TST     r3, #state_BREAK                ; If break flagged then
        BICNE   r3, r3, #state_BREAK            ;   come out of break
        ORRNE   r3, r3, #state_SPECIAL          ;   into special code sequence
        BNE     RXIRQExitState                  ;   and ignore byte &14 in break sequence.

        TEQ     r0, #keybd_SPECIAL              ; If this is a special key then
        ORREQ   r3, r3, #state_SPECIAL          ;   mark code as special.
        BEQ     RXIRQExitState

        TEQ     r0, #keybd_BREAK                ; If break key start code then
        ORREQ   r3, r3, #state_BREAK            ;   mark as break key.
        BEQ     RXIRQExitState

 [ StorkExtraKeys
        ASSERT (SpecialTable - KeyTable) = &A0
        CMP     r0, #&A0                        ; If outside table then
 |
        ASSERT (SpecialTable - KeyTable) = &88
        CMP     r0, #&88                        ; If outside table then
 ]
        MOVCS   r3, #0                          ;   reset state
        BCS     RXIRQExitState                  ;   and throw away code.

        TST     r3, #state_SPECIAL              ; If in special code sequence then
        ADRNEL  r2, SpecialTable                ;   use special code table
        BICNE   r3, r3, #state_SPECIAL          ;   and clear special code flag
 [ debugint
        ADREQL  r2, KeyTable
 |
        ADREQL  r2, KeyTable                    ; else use normal key table.
 ]

        LDRB    r1, [r2, r0]                    ; Get the internal key code.
        TEQ     r1, #&FF                        ; If key does not translate then
        MOVEQ   r3, #0                          ;   reset state
        BEQ     RXIRQExitState                  ;   and throw away code.

 [ KillAutoRepeat
        ADR     r9, KeyFlags
        MOV     r2, r1, LSR #5
        LDR     r0, [r9, r2, LSL #2]!           ; Load appropriate key flags word.
        MOV     r2, #&80000000
 ]

        TST     r3, #state_KEYUP                ; If key has gone up then
        BICNE   r3, r3, #state_KEYUP            ;   clear flag for next byte,
 [ KillAutoRepeat
        BICNE   r0, r0, r2, ROR r1              ;   clear key flag
        STRNE   r0, [r9]
        MOVNE   r0, #1                          ;   and signal key up to KEYV
        BNE     %FT05

        TST     r0, r2, ROR r1                  ; If already down then
        BNE     RXIRQExitState                  ;   throw away code
        ORR     r0, r0, r2, ROR r1              ; else set flag
        STR     r0, [r9]
        MOV     r0, #2                          ;   and signal key down to KEYV.
05
 |
        MOVNE   r0, #1                          ;   and signal up to KEYV
        MOVEQ   r0, #2                          ; else signal down to KEYV.
 ]

        STRB    r3, KBState                     ; Store new state as it may get changed by KEYV call.

        MOV     r9, #KEYV                       ; Call KEYV.
        SVCMode r11                             ; Go into SVC mode for SWI.
        NOP
        Push    "lr"                            ; Save r14_svc.
        SWI     XOS_CallAVector
        Pull    "lr"                            ; Restore r14_svc.
        SetPSR  r11                             ; Go back to IRQ mode.
        NOP

        LDRB    r3, KBState
        B       RXIRQExit


;
; Absorb any bytes that arrive. Used when a device is
; being powered down, to suppress any spurious data.
;
PS2_SinkBytes
        ADR     r2, PS2_SinkBytes
        B       continue


;-----------------------------------------------------------------------------
;       Table for converting PC-AT codes to key numbers.
;
KeyTable
        DCB     &FF, &09, &FF, &05, &03, &01, &02, &0C  ; 00-07
        DCB     &FF, &0A, &08, &06, &04, &26, &10, &FF  ; 08-0F
        DCB     &FF, &5E, &4C, &FF, &3B, &27, &11, &FF  ; 10-17
        DCB     &FF, &FF, &4E, &3D, &3C, &28, &12, &FF  ; 18-1F
        DCB     &FF, &50, &4F, &3E, &29, &14, &13, &FF  ; 20-27
        DCB     &FF, &5F, &51, &3F, &2B, &2A, &15, &FF  ; 28-2F
        DCB     &FF, &53, &52, &41, &40, &2C, &16, &FF  ; 30-37
        DCB     &FF, &FF, &54, &42, &2D, &17, &18, &FF  ; 38-3F
        DCB     &FF, &55, &43, &2E, &2F, &1A, &19, &FF  ; 40-47
        DCB     &FF, &56, &57, &44, &45, &30, &1B, &FF  ; 48-4F
        DCB     &FF, &FF, &46, &FF, &31, &1C, &FF, &FF  ; 50-57
        DCB     &5D, &58, &47, &32, &FF, &33, &FF, &FF  ; 58-5F
        DCB     &FF, &4D, &FF, &FF, &FF, &FF, &1E, &FF  ; 60-67
        DCB     &FF, &5A, &FF, &48, &37, &FF, &FF, &FF  ; 68-6F
        DCB     &65, &66, &5B, &49, &4A, &38, &00, &22  ; 70-77
        DCB     &0B, &4B, &5C, &3A, &24, &39, &0E, &FF  ; 78-7F
        DCB     &FF, &FF, &FF, &07, &0D, &FF, &FF, &FF  ; 80-87
 [ StorkExtraKeys
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 88-8F
        DCB     &75, &76, &77, &78, &79, &7A, &7B, &7C  ; 90-97
        DCB     &7D, &7F, &73, &74, &6E, &6F, &FF, &FF  ; 98-9F
 ]

SpecialTable
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 00-07
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 08-0F
        DCB     &FF, &60, &FF, &FF, &61, &FF, &FF, &FF  ; 10-17
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 18-1F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 20-27
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 28-2F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 30-37
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 38-3F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 40-47
        DCB     &FF, &FF, &23, &FF, &FF, &FF, &FF, &FF  ; 48-4F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 50-57
        DCB     &FF, &FF, &67, &FF, &FF, &FF, &FF, &FF  ; 58-5F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 60-67
        DCB     &FF, &35, &FF, &62, &20, &FF, &FF, &FF  ; 68-6F
        DCB     &1F, &34, &63, &FF, &64, &59, &FF, &0F  ; 70-77
        DCB     &FF, &FF, &36, &FF, &0D, &21, &0F, &FF  ; 78-7F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 80-87
 [ StorkExtraKeys
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 88-8F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 90-97
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 98-9F
 ]

;-----------------------------------------------------------------------------

        END
