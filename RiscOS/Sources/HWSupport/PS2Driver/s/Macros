; > Sources.Macros

;-----------------------------------------------------------------------------
; IRQOff  $reg
;
;       Turn IRQs off and save the PSR in $reg.
;
        MACRO
$label  IRQOff  $reg, $reg2

$label  mrs    ,$reg, CPSR
        ORR     $reg2, $reg, #I32_bit
        msr    ,CPSR_c, $reg2
        MEND

;-----------------------------------------------------------------------------
; SetPSR  $reg
;
;       Set the PSR from bits in $reg (normally saved by IRQOff or FIQOff).
;
        MACRO
$label  SetPSR  $reg

$label  msr    ,CPSR_c, $reg
        MEND

;-----------------------------------------------------------------------------
; SVCMode $reg
;
;       Set SVC mode with IRQs disabled saving PSR in $reg.
;       Assumes in IRQ/FIQ/SVC mode to start with.
;
        MACRO
$label  SVCMode $reg, $reg2

$label  mrs    ,$reg, CPSR
        ORR     $reg2, $reg, #I32_bit+SVC_mode  ; 26 or 32 as appropriate
        msr    ,CPSR_c, $reg2
        MEND

;-----------------------------------------------------------------------------
; IOMDBase $reg
;
;       Set $reg to IOMD base address.
;
        MACRO
$label  IOMDBase $reg,$cc
$label  MOV$cc  $reg, #IOMD_Base
        MEND

;-----------------------------------------------------------------------------
; KbdEnable
;
;       Enable keyboard state machine.
;
        MACRO
$label  KbdEnable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #IOMD_KBDCR_Enable
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
        MEND

;-----------------------------------------------------------------------------
; KbdDisable
;
;       Disable keyboard state machine.
;
        MACRO
$label  KbdDisable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #0
        STR$cc.B $rb, [$ra, #IOMD_KBDCR]
        MEND

;-----------------------------------------------------------------------------
; KbdRxOffTxOff
;
;       Disable RX irqs, disable TX irqs.
;
        MACRO
$label  KbdRxOffTxOff $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        msr $cc, CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        BIC$cc   $rb, $rb, #serial_Rx_bit + serial_Tx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        msr $cc, CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; KbdRxOnTxOff
;
;       Enable RX irqs, disable TX irqs.
;
        MACRO
$label  KbdRxOnTxOff $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        msr $cc, CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        ORR$cc   $rb, $rb, #serial_Rx_bit
        BIC$cc   $rb, $rb, #serial_Tx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        msr $cc, CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; KbdRxOffTxOn
;
;       Enable TX irqs, disable RX irqs.
;
        MACRO
$label  KbdRxOffTxOn $ra,$rb,$rc,$cc

$label  IOMDBase $ra,$cc
        mrs $cc, $rc, CPSR                      ; must disable FIQs when
        ORR$cc   $rb, $rc, #I32_bit+F32_bit     ; manipulating IRQA+B regs
        msr $cc, CPSR_c, $rb
        LDR$cc.B $rb, [$ra, #IOCIRQMSKB]
        ORR$cc   $rb, $rb, #serial_Tx_bit
        BIC$cc   $rb, $rb, #serial_Rx_bit
        STR$cc.B $rb, [$ra, #IOCIRQMSKB]
        msr $cc, CPSR_c, $rc
        MEND

;-----------------------------------------------------------------------------
; MseEnable
;
;       Enable mouse state machine.
;
        MACRO
$label  MseEnable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #IOMD_MSECR_Enable
        STR$cc.B $rb, [$ra, #IOMD_MSECR]
        MEND

;-----------------------------------------------------------------------------
; MseDisable
;
;       Disable mouse state machine.
;
        MACRO
$label  MseDisable $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        MOV$cc   $rb, #0
        STR$cc.B $rb, [$ra, #IOMD_MSECR]
        MEND

;-----------------------------------------------------------------------------
; MseRxOffTxOff
;
;       Disable mouse RX irqs, disable mouse TX irqs.
;
        MACRO
$label  MseRxOffTxOff $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        BIC$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit + IOMD_MouseTxEmpty_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; MseRxOnTxOff
;
;       Enable mouse RX irqs, disable mouse TX irqs.
;
        MACRO
$label  MseRxOnTxOff $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        ORR$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit
        BIC$cc   $rb, $rb, #IOMD_MouseTxEmpty_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; MseRxOffTxOn
;
;       Enable mouse TX irqs, disable mouse RX irqs.
;
        MACRO
$label  MseRxOffTxOn $ra,$rb,$cc

$label  IOMDBase $ra,$cc
        LDR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        ORR$cc   $rb, $rb, #IOMD_MouseTxEmpty_IRQ_bit
        BIC$cc   $rb, $rb, #IOMD_MouseRxFull_IRQ_bit
        STR$cc.B $rb, [$ra, #IOMD_IRQMSKD]
        MEND

;-----------------------------------------------------------------------------
; PsdEnable
;       Enable pseudo PS/2 port
;
        MACRO
$label  PsdEnable $cc

$label  MOV$cc  r0, #KEYV_PseudoEnable
        MOV$cc  r1, channel
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdDisable
;       Disable pseudo PS/2 port
;
        MACRO
$label  PsdDisable $cc

$label  MOV$cc  r0, #KEYV_PseudoDisable
        MOV$cc  r1, channel
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOffTxOff
;
;       Disable pseudo RX irqs, disable pseudo TX irqs.
;
        MACRO
$label  PsdRxOffTxOff $cc

$label  MOV$cc  r0, #KEYV_PseudoIntMask
        MOV$cc  r1, #2_00
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOnTxOff
;
;       Enable pseudo RX irqs, disable pseudo TX irqs.
;
        MACRO
$label  PsdRxOnTxOff $cc

$label  MOV$cc  r0, #KEYV_PseudoIntMask
        MOV$cc  r1, #2_01
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------
; PsdRxOffTxOn
;
;       Enable pseudo TX irqs, disable pseudo RX irqs.
;
        MACRO
$label  PsdRxOffTxOn $cc

$label  MOV$cc  r0, #KEYV_PseudoIntMask
        MOV$cc  r1, #2_10
        MOV$cc  r9, #KEYV
        SWI$cc  XOS_CallAVector
        MEND

;-----------------------------------------------------------------------------

        MACRO
$label  DebugTabInit $nil,$wk1,$wk2
$label
 [ debugtable
        ADR     $wk1, DebugTable
        STR     $wk1, DebugPtr
        ADR     $wk2, DebugTableEnd
$label.clr
        CMP     $wk1, $wk2
        STRCC   $nil, [$wk2, #-4]!
        BCC     $label.clr
 ]
        MEND

        MACRO
$label  DebugTab $wk1,$wk2,$v1,$v2,$v3
$label
 [ debugtable
        LDR     $wk1, DebugPtr
  [ "$v1" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v1
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v2" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v2
        STRB    $wk2, [$wk1], #1
  ]
  [ "$v3" <> ""
        ADR     $wk2, DebugTableEnd
        TEQ     $wk1, $wk2
        ADREQ   $wk1, DebugTable
        MOV     $wk2, $v3
        STRB    $wk2, [$wk1], #1
  ]
        STR     $wk1, DebugPtr
 ]
        MEND

        END
