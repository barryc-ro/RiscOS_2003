
; RISC OS configuration
podule_number           *   0
 [ Machine="STB400"
USB_Podule_DevNo        *   8
 |
USB_Podule_DevNo        *   IOMD_Podule_DevNo
 ]
isp1161_offset          *   &800000


pinfo           RN 5

                ^ 0, pinfo
easi_space      # 4
irq_request     # 4
irq_mask        # 4
irq_bitmask     # 4
pinfo_size      * :INDEX:@

pinfo_request   * Podule_ReadInfo_EASILogical:OR:Podule_ReadInfo_IntRequest:OR:Podule_ReadInfo_IntMask:OR:Podule_ReadInfo_IntValue

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Initialise the hardware
;

all_ones
                DCB     &ff
                ALIGN

hardware_claim
                Entry "R0-R5",pinfo_size

                ; Get info for podule
                LDR     R0, =pinfo_request
                MOV     R1, sp
                MOV     R2, #pinfo_size
                MOV     R3, #podule_number
                SWI     XPodule_ReadInfo
                BVS     %f99
                MOV     R5, R1

                ; Record base address
                LDR     R11, easi_space
                ADD     R11, R11, #isp1161_offset
                STR     R11, BaseAddress

                ; We need fast access to the chip
                MOV     R3, #podule_number
                MOV     R0, #Podule_Speed_TypeC
                SWI     XPodule_SetSpeed
                BVS     %f99

                ; Is the chip there?  Read the top byte of the chip id (allowing for a few changes)
                MOV     R0, #HcChipID
                HCLDRH  R1, R0
                AND     R1, R1, #&ff00
                TEQ     R1, #&6100
                EXIT    NE              ; die silently if not present

                ; Turn IOMD interrupt off
                LDR     R3, irq_mask
 [ Machine="STB400"
                MOV     R2, #1
 |
                LDR     R2, irq_bitmask
 ]
                PHPSEI
                LDRB    R0, [R3]
                BIC     R0, R0, R2
                STRB    R0, [R3]
                PLP

                ; Turn HC interrupts off
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #0
                HCSTRH  R1, R0

                MOV     R0, #HcInterruptDisable
                MOV     R1, #-1
                HCSTR   R1, R0

                ; Claim the interrupt
 [ Machine="STB400"
                MOV     R4, #1
                ADR     R3, all_ones
 |
                LDR     R4, irq_bitmask
                LDR     R3, irq_request
 ]
                MOV     R2, R12
                ADR     R1, interrupt_handler
                MOV     R0, #USB_Podule_DevNo
                SWI     XOS_ClaimDeviceVector
                BVS     %f99

                ; Set up hardware correctly.
                MOV     r0, #HcControl
                MOV     r1, #0
                HCSTR   r1, r0

                MOV     r0, #HcHardwareConfiguration
                LDR     r1, =AnalogOCEnable:OR:HcHardConfReserved:OR:EOTInputPolarity:OR:DataBusWidth:OR:InterruptOutputPolarity:OR:InterruptPinEnable
                HCSTRH  r1, r0

                MOV     r0, #HcFmInterval   ; set fs largest packet - needed for low speed as well
                LDR     r1, =&20002edf
                HCSTR   r1, r0

                ; Set up device hardware properly
                MOV     r0, #WCONF
                LDR     r1, =NOLAZY:OR:(3 * CKDIV):OR:DRQPOL:OR:INTPOL
                DCSTRH  r1, r0

                ; Turn off power
                MOV     r0, #HcRhStatus
                MOV     r1, #&1
                HCSTR   r1, r0

                ; Turn off port power
                MOV     r1, #&200
                MOV     r0, #HcRhPortStatus1
                HCSTR   r1, r0
                MOV     r0, #HcRhPortStatus2
                HCSTR   r1, r0

                ; set descriptor to have per port power
                MOV     r0, #HcRhDescriptorA
                LDR     r1, =&1000901   ; per port power
                HCSTR   r1, r0

                ; set all ports as ganged
                LDR     r1, =&40004
                MOV     r0, #HcRhDescriptorB
                HCSTR   r1, r0

                ; Set ATL buffer to max
                MOV     r0, #HcATLBufferLength
                MOV     r1, #&1000
                HCSTRH  r1, r0

                ; Zero the ATL buffer
                MOV     r0, #HcTransferCounter
                HCSTRH  r1, r0
                MOV     r0, #HcATLBufferPort:OR:&80
                STR     r0, HCCommand
                MOV     r2, #0
10              STR     r2, HCData
                SUBS    r1, r1, #2
                BHI     %b10

                ; Reenable IOMD interrupt
                LDR     R3, irq_mask
 [ Machine="STB400"
                MOV     R2, #1
 |
                LDR     R2, irq_bitmask
 ]
                PHPSEI
                LDRB    R0, [R3]
                ORR     R0, R0, R2
                STRB    R0, [R3]
                PLP

                ; Start the controller.  We use repeated writes until it's ready (maybe we should use the ClkReady IRQ?)
                MOV     R3, #HcControl
                SWI     OS_ReadMonotonicTime
                ADD     R2, R0, #100
20
                MOV     R1, #&80
                HCSTR   R1, R3
                SWI     OS_ReadMonotonicTime
                CMP     R0, R2
                MOV     R0, #6
                MOV     R1, #0
                SWILE   XOS_UpCall
                BGT     %f30
                HCLDR   R1, R3
                TEQ     R1, #&80
                BNE     %b20
30
                Debug   module, "Last read from HcControl: ", R1

                ; Clear all interrupts
                MOV     R0, #HcuPInterrupt
                HCLDRH  R1, R0
                HCSTRH  R1, R0

                ; Turn HC interrupts on
                PHPSEI
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #HCAllInts
                HCSTRH  R1, R0
                PLP

                EXIT
99
                STR     R0, [sp, #Proc_RegOffset]
                EXIT

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Shutdown the hardware
;

hardware_release
                Entry   "R0-R5", pinfo_size
                LDR     R11, BaseAddress

                ; Turn HC interrupts off
                MOV     R0, #HcuPInterruptEnable
                MOV     R1, #0
                HCSTRH  R1, R0

                ; Release the interrupt
 [ Machine="STB400"
                MOV     R4, #1
                ADR     R3, all_ones
 |
                ; Get info for podule
                LDR     R0, =pinfo_request
                MOV     R1, sp
                MOV     R2, #pinfo_size
                MOV     R3, #podule_number
                SWI     XPodule_ReadInfo
                BVS     %f99
                MOV     R5, R1

                LDR     R4, irq_bitmask
                LDR     R3, irq_request
 ]
                MOV     R2, R12
                ADR     R1, interrupt_handler
                MOV     R0, #USB_Podule_DevNo
                SWI     XOS_ReleaseDeviceVector

                EXIT

99
                STR     R0, [sp, #Proc_RegOffset]
                EXIT

                END
