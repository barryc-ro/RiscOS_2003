 [ USBDevice
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; device endpoint structure

                        ^ 0, r2
dev_ep_next             # 4
dev_ep_prev             # 4
dev_ep_devicefs         # 4
dev_ep_fileswitch       # 4
dev_ep_buffer           # 4
dev_ep_buffer_priv      # 4
dev_ep_buffer_size      # 4
dev_ep_usb_endpoint     # 1 ; \ a USB descriptor
dev_ep_usb_attributes   # 1 ;    for the endpoint
dev_ep_usb_maxpacket    # 2 ;
dev_ep_usb_interval     # 1 ; /
dev_ep_interval_count   # 3 ; 2 bytes to space it out.
dev_ep_scratch          # 4
dev_ep_workspace        * :INDEX:@

handle_device_call ROUT

                Push    lr
                SavePSR lr
                Push    lr
                JumpAddress lr, device_call_exit, forward       ; load return address
		MOV	r11, r8			; sort out port workspace

                Debug   devicecall, "device call: ", r0, r2

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2 	; despatch
		B	%20
10
                B       dev_initialise          ; 0  initialise
                B       dev_finalise            ; 1  finalise
                MOV     pc, lr                  ; 2  wake up for TX
                MOV     pc, lr                  ; 3  wake up for RX
                MOV     pc, lr                  ; 4  sleep rx
                MOV     pc, lr                  ; 5  enumerate directory
                B       dev_create_tx_buffer    ; 6  create buffer for TX
                B       dev_create_rx_buffer    ; 7  create buffer for RX
                MOV     pc, lr                  ; 8  halt - below threshold
                B       dev_threshold_resume	; 9  resume - above threshold
                MOV     pc, lr                  ; 10 end of data
                B       dev_stream_created	; 11 stream created
                MOV     pc, lr
                MOV     pc, lr
20
                Pull    lr
                ORR     lr, lr, #V_bit
                RestPSR lr,,cf
;                ADDR    r0, ErrorBlock_Serial_BadDeviceReasonCode
                Pull    lr
                B	make_error

;		MakeErrorBlock Serial_BadDeviceReasonCode

device_call_exit
                Pull    lr
                ORRVS   lr, lr, #V_bit
                RestPSR lr,,cf
                NOP
                Pull    pc

dev_initialise  Entry "r0-r5"

                ; Create new endpoint structure and zero it
                MOV     r3, #ep_workspace
                MOV     r0, #ModHandReason_Claim
                SWI     XOS_Module
                EXIT    VS

                MOV     r0, #0
10
                SUBS    r3, r3, #1
                STRNEB  r0, [r2, r3]
                BNE     %b10

                ; record handles
                LDR     r0, [sp, #Proc_RegOffset + 2*4]
                STR     r0, ep_devicefs
                STR     r4, ep_fileswitch

                ; set up descriptors
                LDR     r3, [sp, #Proc_RegOffset + 3*4]
                ADR     r5, ep_usb_endpoint
                BL      decode_validation

                ; Link into chain
                LDR     r0, DevEPHead
                TEQ     r0, #0
                STRNE   r2, [r0, #:INDEX:ep_prev]
                MOV     r0, #0
                STR     r0, ep_prev
                ADR     r0, DevEPHead
                STR     r2, [r0, r3, LSL#2]
                STR     r2, [sp, #Proc_RegOffset + 2*4]     ; pass stream handle back to DeviceFS

                ; Turn on our interrupt

                MOV     r0, #RIRQEN
                DCLDR   r1, r0
                LDRB    r0, ep_usb_endpoint
                TEQ     r0, #&0
                BIC     r0, r0, #&80
                MOV     r2, #IEP0IN
                MOVEQ   r2, #IEP0OUT
                ORR     r1, r1, r2, LSL r0
                MOV     r0, #WIRQEN
                DCSTR   r1, r0

		Debug	devicecall, "initialising stream: ", R2

                EXIT

dev_finalise    Entry "r0-r5"

                TEQ     r2, #0
                BEQ     %f10

                ; Turn off our interrupt
                MOV     r0, #RIRQEN
                DCLDR   r1, r0
                LDRB    r0, ep_usb_endpoint
                TEQ     r0, #&0
                BIC     r0, r0, #&80
                MOV     r2, #IEP0IN
                MOVEQ   r2, #IEP0OUT
                BIC     r1, r1, r2, LSL r0
                MOV     r0, #WIRQEN
                DCSTR   r1, r0

                ; Relink the chain
                LDR     r0, ep_next
                LDR     r1, ep_prev
                Debug   devicecall, "next, prev: ", r0, r1
                TEQ     r0, #0
                STRNE   r1, [r0, #:INDEX:ep_prev]
                TEQ     r1, #0
                STRNE   r0, [r1, #:INDEX:ep_next]

                ; If we were head of the chain, reset the head
                LDR     r0, DevEPHead
                TEQ     r0, r2
                LDREQ   r0, ep_next
                STREQ   r0, DevEPHead

                ; Remove the structure
                MOV     r0, #ModHandReason_Free
                SWI     XOS_Module

                EXIT

                ; Here we're removing all streams
10
                ; Turn off all interrupts
                MOV     R0, #WIRQEN
                MOV     R1, #0
                DCSTR   R1, R0

                ; Free all stream structures
                MOV     r0, #ModHandReason_Free
                LDR     r2, DevEPHead
20
                TEQ     r2, #0
                EXIT    EQ
                LDR     r3, ep_next
                SWI     XOS_Module
                MOV     r2, r3
                B       %b20

dev_wakeuptx
                LDR     r1, ep_usb_endpoint
                BIC     r1, r1, #&80
                ADD     r1, r1, #CHECK_EP
                DCLDRH  r0, r1
                B       write_fifo

; buffer size set to 8 times max packet size
dev_create_tx_buffer
dev_create_rx_buffer
                LDR     r4, ep_usb_maxpacket
                MOV     r4, r4, LSL#3
                MOV     r6, #-1
                MOV     pc, lr

dev_threshold_resume
                LDR     r1, ep_usb_endpoint
                BIC     r1, r1, #&80
                ADD     r1, r1, #CHECK_EP
                DCLDRH  r0, r1
                B       read_fifo

dev_stream_created
                STR     r3, ep_buffer
		MOV	r4, r2			; save stream handle
		MOV	r0, r3			; need buffer handle
		SWI	XBuffer_InternalInfo
                STRVS  	r0, [sp]
		EXIT	VS
		STR	r1, BuffManService
		STR	r2, BuffManWkSpace
                MOV     r2, r4
                STR     r0, ep_buffer_priv
                MOV     pc, lr

; call: read_fifo
;
; read from the fifo into the buffer
; E:    r0 = status
;       r2 = stream
read_fifo       Entry   "r0-r6", 4

                LDR     r6, ep_usb_endpoint
                BIC     r6, r6, #&80
10
                TST     r0, #EPFULL1:OR:EPFULL0
                EXIT    EQ

                TST     r0, #EPSTAL
                DebugIf NE, device, "Endpoint has stalled"
                EXIT    NE

                ADD     r0, r6, #REP_BUF
                DCLDRH  r5, r0

                MOV     r0, #BufferReason_FreeSpace
                LDR     r1, ep_buffer_priv
                CallBuffMan

                CMP     r2, r5
                BGE     %f20

                MOV     r1, r2
                LDR     r2, [sp, #Proc_RegOffset + 4*2]
                LDR     r0, ep_buffer
                SWI     XBuffer_Threshold
                EXIT
20
                MOV     r0, #BufferReason_InsertBlock
                MOV     r2, sp
                MOV     r3, #2
30
                LDR     r4, DCData
                STR     r4, [sp]
                CallBuffMan

                SUB     r5, r5, #2
                CMP     r5, #1
                BGT     %b30
                BLT     %f40

                MOV     r0, #BufferReason_InsertByte
                LDR     r2, DCData
                CallBuffMan
40
                ADD     r0, r6, #CLEAR_EP
                STR     r0, DCCommand

                ADD     r2, r6, #STATUS_EP
                DCLDRH  r0, r2

                LDR     r2, [sp, #Proc_RegOffset + 4*2]

                B       %b10


write_fifo      Entry   "r0-r6", 4

                LDR     r6, ep_usb_endpoint
                BIC     r6, r6, #&80
10
                TST     r0, #EPFULL0
                TSTNE   r0, #EPFULL1
                EXIT    NE

                TST     r0, #EPSTAL
                DebugIf NE, device, "Endpoint has stalled"
                EXIT    NE

                MOV     r0, #BufferReason_UsedSpace
                LDR     r1, ep_buffer_priv
                CallBuffMan
                MOV     r3, r2

                LDR     r2, [sp, #Proc_RegOffset + 2*4]

                LDR     r4, ep_scratch
                LDR     r5, ep_usb_maxpacket
                TEQ     r5, r4
                BEQ     %f20

                TEQ     r3, #0
                DebugIf EQ, device, "End of transfer"
                EXIT    EQ
20
                CMP     r3, r5
                MOVGT   r3, r5
                STR     r3, ep_scratch

                ADD     r0, r6, #WEP_BUF
                STR     r0, DCCommand

                MOV     r0, #BufferReason_RemoveBlock
                SUB     sp, sp, r5
                MOV     r2, sp
                CallBuffMan
                MOV     r2, sp
                LDR     r3, ep_scratch
30
                LDR     r1, [r2], #2
                STR     r1, DCData
                SUBS    r3, r3, #2
                BHI     %b30

                ADD     sp, sp, r5

                ADD     r0, r6, #VALID_EP
                STR     r0, DCCommand

                ADD     r1, r6, #STATUS_EP
                DCLDRH  r0, r1

                B       %b10
 ] ; endof USB Device

                END
