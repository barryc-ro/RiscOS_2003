
usb_data
                = &00, &08          ; blank except for active bit
                = &08, &1c          ; max packet 16, last PTD, low speed, endpoint 1
                = &08, &08          ; 16 bytes, out
                = &05, &00          ; address 5

                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
usb_data_end

; Increment a location in workspace, using lr as a temporary register
                MACRO
                TSTIRQ  $irq
                TST     R4, #$irq
                LDRNE   lr, $irq.Count
                ADDNE   lr, lr, #1
                STRNE   lr, $irq.Count
                BLNE    $irq._handler
                MEND

interrupt_handler
                EntryS  "R0,R4,R11"
                LDR     R11, BaseAddress

                ; Read and Acknowledge interrupts as soon as possible
                MOV     R0, #HcuPInterrupt
                HCLDRH  R4, R0
                HCSTRH  R4, R0

                ; Dispatch interrupts
                TSTIRQ  ClkReady
                TSTIRQ  HCSuspended
                TSTIRQ  OPR_Reg
                TSTIRQ  AllEOTInt
                TSTIRQ  ATLInt
                TSTIRQ  SOFITLInt

                EXITS


ClkReady_handler
HCSuspended_handler
                MOV     pc, lr

OPR_Reg_handler
                Entry "R4"
                ; Read, and acknowledge immediately.
                MOV     R0, #HcInterruptStatus
                HCLDR   R4, R0
                HCSTR   R4, R0

;                MOV     R0, #138
;                LDR     R1, RHInterruptBuffer
;                MOV     R2, R4
;                SWI     XOS_Byte

                ; Scheduling overrun
                TST     R4, #OHCI_SO

                ; There is no writeback done head for PHCI

                ; Start of frame
                TST     R4, #OHCI_SF

                ; Resume detected
                TST     R4, #OHCI_RD

                ; Unrecoverable error
                TST     R4, #OHCI_UE

                ; Frame number overflow
                TST     R4, #OHCI_FNO

                ; Root hub status change
                TST     R4, #OHCI_RHSC
                BLNE    OHCI_RHSC_handler

                ; Ownership change
                TST     R4, #OHCI_OC

                EXIT

OHCI_RHSC_handler
                Entry
                ; Build up the change bits
                MOV     R2, #0

                ; Check the root hub for changes
                MOV     R0, #HcRhStatus
                HCLDR   R1, R0
                TST     R1, #&30000
                ORRNE   R2, R2, #1

                ; Check ports for changes
                MOV     R0, #HcRhPortStatus1
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #2

                MOV     R0, #HcRhPortStatus2
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #4

                ; If there's any change, put it in the buffer
                TEQ     R2, #0
                EXIT    EQ

                ; Insert byte into buffer
                MOV     R0, #BufferReason_InsertByte
                LDR     R1, RHInterruptBuffer
                CallBuffMan
                EXIT

AllEOTInt_handler
ATLInt_handler
SOFITLInt_handler
                MOV     pc, lr








; Read from the ATL buffer
                MOV     R0, #HcTransferCounter
                MOV     R1, #usb_data_end - usb_data
                HCSTRH  R1, R0

                MOV     R0, #HcATLBufferPort
                STR     R0, HCCommand
10
                LDR     R0, HCData
                SUBS    R1, R1, #2
                BHI     %b10

; Write to the ATL buffer
                MOV     R0, #HcTransferCounter
                MOV     R1, #usb_data_end - usb_data
                HCSTRH  R1, R0

                MOV     R0, #HcATLBufferPort:OR:&80
                STR     R0, HCCommand

                ADR     R2, usb_data
20
                LDR     R0, [R2], #2
                STR     R0, HCData
                SUBS    R1, R1, #2
                BHI     %b20

                ; If there are any interrupts pending, disable them, as we've run out of CPU time
;                MOV     R0, #HcuPInterrupt
;                HCLDRH  R1, R0
;                TST     R1, #1
;                EXITS   EQ

;                MOV     R0, #HcuPInterruptEnable
;                MOV     R1, #0
;                HCSTRH  R1, R0

;                EXITS


                END
