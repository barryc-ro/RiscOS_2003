
SVC_Mode        *       3

usb_data
                = &00, &08          ; blank except for active bit
                = &08, &1c          ; max packet 16, last PTD, low speed, endpoint 1
                = &08, &08          ; 16 bytes, out
                = &05, &00          ; address 5

                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
                = 0,   0,   0,   0
usb_data_end

; Increment a location in workspace, using lr as a temporary register
                MACRO
                TSTIRQ  $irq
                TST     R4, #$irq
                LDRNE   lr, $irq.Count
                ADDNE   lr, lr, #1
                STRNE   lr, $irq.Count
                BLNE    $irq._handler
                MEND

interrupt_handler
                EntryS  "R0-R2,R4,R11"
                LDR     R11, BaseAddress
 [ SafeSVC
                MRS     r2, CPSR                ; get hold of the flags (or NOP)
                ORR     r1, r2, #SVC_Mode       ; force SVC mode (preserve 32-bitness)
                MSR     CPSR_c, r1              ; switch mode, preserve flags
                MOV     r1, r14_svc
 ]
                ; Read and Acknowledge interrupts as soon as possible
                MOV     R0, #HcuPInterrupt
                HCLDRH  R4, R0
                HCSTRH  R4, R0

                ; Dispatch interrupts
                TSTIRQ  ClkReady
                TSTIRQ  HCSuspended
                TSTIRQ  OPR_Reg
                TSTIRQ  AllEOTInt
                TSTIRQ  ATLInt
                TSTIRQ  SOFITLInt
 [ SafeSVC
                MOV     r14_svc, r1
                MSR     CPSR_c, r2
 ]
                EXITS


ClkReady_handler
HCSuspended_handler
                MOV     pc, lr

OPR_Reg_handler
                Entry "R4"
                ; Read, and acknowledge immediately.
                MOV     R0, #HcInterruptStatus
                HCLDR   R4, R0
                HCSTR   R4, R0

                ; Scheduling overrun
                TST     R4, #OHCI_SO

                ; There is no writeback done head for PHCI

                ; Start of frame
                TST     R4, #OHCI_SF

                ; Resume detected
                TST     R4, #OHCI_RD

                ; Unrecoverable error
                TST     R4, #OHCI_UE

                ; Frame number overflow
                TST     R4, #OHCI_FNO

                ; Root hub status change
                TST     R4, #OHCI_RHSC
                BLNE    OHCI_RHSC_handler

                ; Ownership change
                TST     R4, #OHCI_OC

                EXIT

OHCI_RHSC_handler
                Entry "R0-R3"
                ; Build up the change bits
                MOV     R2, #0

                ; Check the root hub for changes
                MOV     R0, #HcRhStatus
                HCLDR   R1, R0
                TST     R1, #&30000
                ORRNE   R2, R2, #1

                ; Check ports for changes
                MOV     R0, #HcRhPortStatus1
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #2

                MOV     R0, #HcRhPortStatus2
                HCLDR   R1, R0
                TST     R1, #&1f0000
                ORRNE   R2, R2, #4

                ; If there's any change, put it in the buffer
                TEQ     R2, #0
                EXIT    EQ

                ; Insert byte into buffer
                MOV     R0, #BufferReason_InsertByte
                LDR     R3, RHInterrupt
                LDR     R1, [R3, #:INDEX:ep_buffer_priv]
                Debug   module, "byte, buffer", R2, R1
                CallBuffMan
                EXIT

AllEOTInt_handler
                MOV     pc, lr
ATLInt_handler
                Entry   "r0-r2"

                ; Don't proceed if in test mode
                LDR     r0, Flags
                TST     r0, #flag_Testing
                EXIT    NE

; Read from the ATL buffer
                MOV     R0, #HcTransferCounter
                LDR     R1, ATLBufferSize
                HCSTRH  R1, R0

                ADR     R2, SoftATLBuffer

                MOV     R0, #HcATLBufferPort
                STR     R0, HCCommand
10
                LDR     R0, HCData
                STRB    R0, [R2], #1
                MOV     R0, R0, LSR#8
                STRB    R0, [R2], #1
                SUBS    R1, R1, #2
                BHI     %b10

                LDR     r0, Flags
                BIC     r0, r0, #flag_ATLBufferFilled
                STR     r0, Flags

                BL      parse_atl_buffer
                BL      _write_atl_buffer
                EXIT

SOFITLInt_handler
                Entry   "r0, r1"

                ; Only fill a buffer if the pending flag is set and a buffer isn't already full
                LDR     r0, Flags
                AND     r1, r0, #flag_ATLBufferFilled:OR:flag_ATLBufferPending:OR:flag_Testing
                TEQ     r1, #flag_ATLBufferPending
                EXIT    NE

                BIC     r0, r0, #flag_ATLBufferPending
                STR     r0, Flags

                BL      _write_atl_buffer

                ; Test: disable interrupt now.
;                MOV     r0, #HcuPInterruptEnable
;                MOV     r1, #0
;                HCSTRH  r1, r0
                EXIT

_write_atl_buffer
                Entry   "r0-r2"
                BL      build_atl_buffer
                STR     r0, ATLBufferSize
                TEQ     r0, #0
                DebugIf EQ, module, "no more data to write"
                EXIT    EQ

;                Debug   module, "ATL buffer size ", r0

                MOV     R1, #HcTransferCounter
                HCSTRH  R0, R1

                MOV     R1, #HcATLBufferPort:OR:&80
                STR     R1, HCCommand

                ADR     R2, SoftATLBuffer
20
                LDR     R1, [R2], #2
                STR     R1, HCData
                SUBS    R0, R0, #2
                BHI     %b20

                LDR     r0, Flags
                ORR     r0, r0, #flag_ATLBufferFilled
                STR     r0, Flags

                EXIT

                END
