;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Sets border colour
;
colour_off   * &40000000
colour_red   * &400000ff
colour_blue  * &40ff0000
colour_green * &4000ff00

        	MACRO
$label  	SetColour $colour
$label
 [ debug
		Push	"r0-r1"
		MOV	r0, #&3500000
		LDR	r1, =colour_$colour
		STR	r1, [r0]
		Pull	"r0-r1"
 ]
        	MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Calls buffer manager service routine
;
                MACRO
$label          CallBuffMan     $cc

$label          Push    "r12,lr"		; save our workspace ptr
 [ SafeSVC
 |
                Push    "r10,r11"
                MRS     r10, CPSR                ; get hold of the flags (or NOP)
                ORR     r11, r10, #SVC_Mode       ; force SVC mode (preserve 32-bitness)
                MSR     CPSR_c, r11              ; switch mode, preserve flags
                Push    "r10,r14_svc"
 ]
                ADR$cc   r12, BuffManWkSpace    ; buffman workspace and entry
                MOV$cc   lr, pc                 ; return address
                ASSERT  BuffManService = BuffManWkSpace+4
                LDM$cc.IA r12, {r12, pc}        ; load buffman wkspace and entry
 [ SafeSVC
 |
                Pull    "r10,r14_svc"
                MSR     CPSR_c, r10
                Pull    "r10,r11"
 ]
                Pull    "r12,lr"                ; restore our workspace ptr

                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; read 32 bits from a host controller register
;
; specify a register with the command value, and a temporary register
; on entry r11 contains BaseAddress
;
                MACRO
$label          HCLDR   $rd, $rn, $reg
                LCLS    tmp
                [ "$reg"=""
tmp             SETS    "R14"
                |
tmp             SETS    "$reg"
                ]
$label          BIC     $rn, $rn, #&80
                STR     $rn, HCCommand
                LDR     $rd, HCData
                MOV     $rd, $rd, LSL#16      ; Clear top 16 bits of r0
                MOV     $rd, $rd, LSR#16
                LDR     $tmp, HCData
                ORR     $rd, $rd, $tmp, LSL#16
                MEND
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; read 16 bits from a host controller register
; on entry r11 contains BaseAddress
;
;
                MACRO
$label          HCLDRH  $rd, $rn
$label          BIC     $rn, $rn, #&80
                STR     $rn, HCCommand
                LDR     $rd, HCData
                MOV     $rd, $rd, LSL#16      ; Clear top 16 bits of r0
                MOV     $rd, $rd, LSR#16
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; write 32 bits to a host controller register
; on entry r11 contains BaseAddress
;
                MACRO
$label          HCSTR   $rd,  $rn
$label          ORR     $rn, $rn, #&80
                STR     $rn, HCCommand
                STR     $rd, HCData
                MOV     $rd, $rd, ROR#16
                STR     $rd, HCData
                MOV     $rd, $rd, ROR#16
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; write 16 bits to a host controller register
;
; in : rn = register, rd = value
; on entry r11 contains BaseAddress
;
                MACRO
$label          HCSTRH  $rd, $rn
$label          ORR     $rn, $rn, #&80
                STR     $rn, HCCommand
                STR     $rd, HCData
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; read 32 bits from a device controller register
;
; specify a register with the command value, and a temporary register
; on entry r11 contains BaseAddress
;
                MACRO
$label          DCLDR   $rd, $rn, $reg
                LCLS    tmp
                [ "$reg"=""
tmp             SETS    "R14"
                |
tmp             SETS    "$reg"
                ]
$label          STR     $rn, DCCommand
                LDR     $rd, DCData
                MOV     $rd, $rd, LSL#16      ; Clear top 16 bits of r0
                MOV     $rd, $rd, LSR#16
                LDR     $tmp, DCData
                ORR     $rd, $rd, $tmp, LSL#16
                MEND
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; read 16 bits from a device controller register
; on entry r11 contains BaseAddress
;
;
                MACRO
$label          DCLDRH  $rd, $rn
$label          STR     $rn, DCCommand
                LDR     $rd, DCData
                MOV     $rd, $rd, LSL#16      ; Clear top 16 bits of r0
                MOV     $rd, $rd, LSR#16
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; write 32 bits to a device controller register
; on entry r11 contains BaseAddress
;
                MACRO
$label          DCSTR   $rd,  $rn
$label          STR     $rn, DCCommand
                STR     $rd, DCData
                MOV     $rd, $rd, ROR#16
                STR     $rd, DCData
                MOV     $rd, $rd, ROR#16
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; write 16 bits to a device controller register
;
; in : r0 = register, r1 = value
; on entry r11 contains BaseAddress
;
                MACRO
$label          DCSTRH  $rd, $rn
$label          STR     $rn, DCCommand
                STR     $rd, DCData
                MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                END
