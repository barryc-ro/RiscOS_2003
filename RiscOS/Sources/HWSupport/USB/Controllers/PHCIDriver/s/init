;
; 		Copyright 2001 Pace Microtechnology plc
;

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Global header files
;
                GET     Hdr:ListOpts
		OPT	OptNoList
                GET     Hdr:NdrDebug		; definition of true
                GET     Hdr:DDVMacros
                GET     Hdr:Macros		; system wide macro definitions
                GET     Hdr:System		; swis and hardware declarations
		GET	Hdr:Machine.<Machine>	; for machine-specific flags
                GET     Hdr:ModHand		; Module handler reason codes
                GET     Hdr:FSNumbers           ; for NewErrors
                GET     Hdr:NewErrors           ; for global errors
                GET     Hdr:HighFSI		; high level filing system
                GET     Hdr:DevNos		; device no for new IRQ handling
                GET     Hdr:Services		; service call info
                GET     Hdr:Symbols		; constants TRUE, FALSE, VFlag
                GET     Hdr:MsgTrans		; MessageTrans constants
                GET     Hdr:Proc                ; ENTRY and EXIT macros
		GET	Hdr:Buffer
                GET     Hdr:ResourceFS
                GET     Hdr:DeviceFS		; reason code definitions
                GET     Hdr:Podule
		GET     Hdr:IO.IOEB
                GET     <Lib$Dir>.USB.Hdr.OHCIReg
		$GetIO				; I need IOMD declarations etc

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Global variables
;
		OPT 	OptList
                        GBLL    test
 		 	GBLL	debug
		 	GBLL	border_handshake
			GBLL	counting
                        GBLL    SafeSVC
                        GBLL    USBDevice
                        GBLL    DummyLastPTD
 [ :DEF:debugging
debug                   SETL    true
 ]
test                    SETL    true    ; include test *commands
debug_module            SETL    true    ; use debug it output
border_handshake 	SETL	false	; to flash border when handshaking
counting		SETL	false	; to count stuff
SafeSVC                 SETL    true    ; only drop into SVC around buffman
USBDevice               SETL    true    ; support the Device side of the ISP1161
DummyLastPTD            SETL    true   ; add a dummy last PTD to avoid multiple interrupt transaction attempts

devicecall              SETD    true
module                  SETD    false
atlbuffer               SETD    false
roothub                 SETD    false
device                  SETD    false
interrupt               SETD    true
control                 SETD    true

XDebugIt_WriteC     *   0x4ba82 + Auto_Error_SWI_bit

PTD_MaxErrorCount   *   4              ; number of errors in a row before reporting


                GBLL    standalonemessages
 [ :DEF: standalone
standalonemessages SETL standalone
 |
standalonemessages SETL {FALSE}
 ]


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; User header files
;

                GET     VersionASM
                GET     Hdr.Registers
		GET 	s.errors	; error handling stuff
		GET	s.macros	; some useful macros
                GET     s.main		; module interfaces
		GET 	s.hardware	; hardware detection and irq stuff
		GET 	s.interrupts	; handle irqs
		GET	s.hostcall 	; handle devicefs stuff for host
;		GET	s.devicecall 	; handle devicefs stuff for device
;                GET     s.swis
                GET     s.root_hub

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Debug routine code
;
 [ debug
                ALIGN
      		InsertNDRDebugRoutines     ; ensure this is after module header !
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                END
