; ISP1161 communication ports

                        ^   0, r11
HCData                  #   4       ; The data port for the host controller
HCCommand               #   4       ; The command port for the host controller
DCData                  #   4       ; The data port for the device controller
DCCommand               #   4       ; The command port for the device controller

; ISP1161 Host controller registers

HcRevision              *   &00
HcControl               *   &01
HcCommandStatus         *   &02
HcInterruptStatus       *   &03
HcInterruptEnable       *   &04
HcInterruptDisable      *   &05
HcFmInterval            *   &0d
HcFmRemaining           *   &0e
HcFmNumber              *   &0f
HcLSThreshold           *   &11
HcRhDescriptorA         *   &12
HcRhDescriptorB         *   &13
HcRhStatus              *   &14
HcRhPortStatus1         *   &15
HcRhPortStatus2         *   &16

HcHardwareConfiguration *   &20
HcDMAConfiguration      *   &21
HcTransferCounter       *   &22
HcuPInterrupt           *   &24
HcuPInterruptEnable     *   &25
HcChipID                *   &27
HcScratch               *   &28
HcSoftwareReset         *   &29
HcITLBufferLength       *   &2a
HcATLBufferLength       *   &2b
HcBufferStatus          *   &2c
HcReadBackITL0Length    *   &2d
HcReadBackITL1Length    *   &2e
HcITLBufferPort         *   &40
HcATLBufferPort         *   &41

; HcHardwareConfiguration bits
DownStreamPort15KresistorSel    * (1:SHL:12)
SuspendClkNotStop               * (1:SHL:11)
AnalogOCEnable                  * (1:SHL:10)
HcHardConfReserved              * (1:SHL:9)   ; Must be 1
DACKMode                        * (1:SHL:8)
EOTInputPolarity                * (1:SHL:7)
DACKInputPolarity               * (1:SHL:6)
DREQOutputPolarity              * (1:SHL:5)
DataBusWidth                    * (1:SHL:3)   ; Must be 1
InterruptOutputPolarity         * (1:SHL:2)
InterruptPinTrigger             * (1:SHL:1)
InterruptPinEnable              * (1:SHL:0)

; uP Interrupt bits
ClkReady                        * (1:SHL:6)
HCSuspended                     * (1:SHL:5)
OPR_Reg                         * (1:SHL:4)
AllEOTInt                       * (1:SHL:2)
ATLInt                          * (1:SHL:1)
SOFITLInt                       * (1:SHL:0)
HCAllInts                       * &77

; Device part (as for ISP 1181)
WCONTROL_OUT_CONF   * &20
WCONTROL_IN_CONF    * &21
WEP_CONF            * &22    ;  + endpoint number - 1
RCONTROL_OUT_CONF   * &30
RCONTROL_IN_CONF    * &31
REP_OUT_CONF        * &32    ;  + endpoint number - 1
FIFOEN              * (1:SHL:7)  ;  enable fifos
EPDIR               * (1:SHL:6)  ;  endpoint direction 0=OUT, 1=IN
DBLBUF              * (1:SHL:5)  ;  1 => double buffering
FFOISO              * (1:SHL:4)  ;  1 => isochronous endpoint
FFOSZ               * (1:SHL:0)  ;  4bit fifo size 8 * 2^n for non-iso
WADDRESS            * &b6
RADDRESS            * &b7
WMODE               * &b8
RMODE               * &b9
DMAWD               * (1:SHL:7)
SNDRSU              * (1:SHL:6)
GOSUSP              * (1:SHL:5)
INTENA              * (1:SHL:3)
DBGMOD              * (1:SHL:2)
DISGLBL             * (1:SHL:1)
SOFTCT              * (1:SHL:0)
WCONF               * &ba
RCONF               * &bb
EXTPUL              * (1:SHL:14)
NOLAZY              * (1:SHL:13)
CLKRUN              * (1:SHL:12)
CKDIV               * (1:SHL:8)
DAKOLY              * (1:SHL:7)
DRQPOL              * (1:SHL:6)
DAKPOL              * (1:SHL:5)
EOTPOL              * (1:SHL:4)
WKUPCS              * (1:SHL:3)
PWROFF              * (1:SHL:2)
INTLVL              * (1:SHL:1)
INTPOL              * (1:SHL:0)
WIRQEN              * &c2
RIRQEN              * &c3
IEPN                * (1:SHL:10) ;  + endpoint number - 1
IEP0IN              * (1:SHL:9)  ;  input control 0
IEP0OUT             * (1:SHL:8)  ;  output control 0
IEBSTAT             * (1:SHL:7)  ;  current bus status - i suspend if = 1
IESOFN              * (1:SHL:5)  ;  loss of SOF
IESOF               * (1:SHL:4)  ;  start of frame
IEEOT               * (1:SHL:3)  ;  end of transmission
IESUSP              * (1:SHL:2)  ;  detection of suspend
IERESM              * (1:SHL:1)  ;  detection of bus resume
IERST               * (1:SHL:0)  ;  detection of bus reset
WDMACONF            * &f0
RDMACONF            * &f1
CNTREN              * (1:SHL:15)
SHORTP              * (1:SHL:14)
EPIDX               * (1:SHL:8)
DMAEN               * (1:SHL:4)
AUTOLD              * (1:SHL:2)
BURSTL              * (1:SHL:0)
WDMACOUNT           * &f2
RDMACOUNT           * &f3
RESET               * &f6

;  Data flow commands
WCONTROL_OUT_BUF    * &00    ;  illegal
WCONTROL_IN_BUF     * &01
WEP_BUF             * &02    ;  + endpoint number - 1
RCONTROL_OUT_BUF    * &10
RCONTROL_IN_BUF     * &11
REP_BUF             * &12    ;  + endpoint number - 1
STALL_CONTROL_OUT   * &40
STALL_CONTROL_IN    * &41
STALL_EP            * &42    ;  + endpoint number - 1
STATUS_CONTROL_OUT  * &50
STATUS_CONTROL_IN   * &51
STATUS_EP           * &52    ;  + endpoint number - 1
EPSTAL              * (1:SHL:7)  ;  endpoint is stalled
EPFULL1             * (1:SHL:6)  ;  secondary endpoint buffer full
EPFULL0             * (1:SHL:5)  ;  primaray endpoint buffer is full
OVERWRITE           * (1:SHL:3)  ;  setup has been overwritten
SETUPT              * (1:SHL:2)  ;  the buffer contains a setup packet
CPUBUF              * (1:SHL:1)  ;  current buffer, 0 = primary, 1 = scond
VALID_CONTROL_OUT   * &60    ;  illegal
VALID_CONTROL_IN    * &61
VALID_EP            * &62    ;  + endpoint number - 1
CLEAR_CONTROL_OUT   * &70
CLEAR_CONTROL_IN    * &71    ;  illegal
CLEAR_EP            * &72    ;  + endpoint number - 1
UNSTALL_CONTROL_OUT * &80
UNSTALL_CONTROL_IN  * &81
UNSTALL_EP          * &82    ;  + endpoint number - 1
CHECK_CONTROL_OUT   * &D0
CHECK_CONTROL_IN    * &D1
CHECK_EP            * &D2    ;  + endpoint number - 1
ACK_SETUP           * &F4

;  General commands
ERROR_CONTROL_OUT   * &A0
ERROR_CONTROL_IN    * &A1
ERROR_EP            * &A2    ;  + endpoint number - 1
UNREAD              * (1:SHL:7)  ;  new event occured before previous read
DATA01              * (1:SHL:6)  ;  data toggle of last packet
RTOK                * (1:SHL:0)  ;  last transmission successful
UNLOCK              * &b0
UNLOCK_MAGIC        * &aa37
WSCRATCH            * &b2
RSCRATCH            * &b3
FMNUMBER            * &b4
CHIPID              * &b5
IRQSTATUS           * &c0


    END
