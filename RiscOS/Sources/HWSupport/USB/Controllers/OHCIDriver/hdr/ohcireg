; Register definitions for OHCI chip.

OHCI_num_ports          * 2

                        ^ 0
OHCI_revision           # 4
; OHCI_REV_LO(rev)       ((rev) :AND: &f)
; OHCI_REV_HI(rev)       (((rev) :SHR: 4) :AND: &f)
; OHCI_REV_LEGACY(rev)   ((rev) :AND: &100)

OHCI_control            # 4
OHCI_command_status     # 4
OHCI_interrupt_status   # 4
OHCI_interrupt_enable   # 4
OHCI_interrupt_disable  # 4
OHCI_hcca               # 4
OHCI_period_current_ed  # 4
OHCI_control_head_ed    # 4
OHCI_control_current_ed # 4
OHCI_bulk_head_ed       # 4
OHCI_bulk_current_ed    # 4
OHCI_done_head          # 4
OHCI_fm_interval        # 4
OHCI_fm_remaining       # 4
OHCI_fm_number          # 4
OHCI_periodic_start     # 4
OHCI_ls_threshold       # 4
OHCI_rh_descriptor_a    # 4
OHCI_rh_descriptor_b    # 4
OHCI_rh_status          # 4
OHCI_rh_port_status     # 4 * OHCI_num_ports
OHCI_regs_size          * :INDEX:@

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_control

OHCI_CBSR_MASK          * &00000003 ; Control/Bulk Service Ratio
OHCI_RATIO_1_1          * &00000000
OHCI_RATIO_1_2          * &00000001
OHCI_RATIO_1_3          * &00000002
OHCI_RATIO_1_4          * &00000003
OHCI_PLE                * &00000004 ; Periodic List Enable
OHCI_IE                 * &00000008 ; Isochronous Enable
OHCI_CLE                * &00000010 ; Control List Enable
OHCI_BLE                * &00000020 ; Bulk List Enable
OHCI_HCFS_MASK          * &000000c0 ; HostControllerFunctionalState
OHCI_HCFS_RESET         * &00000000
OHCI_HCFS_RESUME        * &00000040
OHCI_HCFS_OPERATIONAL   * &00000080
OHCI_HCFS_SUSPEND       * &000000c0
OHCI_IR                 * &00000100 ; Interrupt Routing
OHCI_RWC                * &00000200 ; Remote Wakeup Connected
OHCI_RWE                * &00000400 ; Remote Wakeup Enabled

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_command

OHCI_HCR                * &00000001 ; Host Controller Reset
OHCI_CLF                * &00000002 ; Control List Filled
OHCI_BLF                * &00000004 ; Bulk List Filled
OHCI_OCR                * &00000008 ; Ownership Change Request
OHCI_SOC_MASK           * &00030000 ; Scheduling Overrun Count

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_interrupts

OHCI_SO                 * &00000001 ; Scheduling Overrun
OHCI_WDH                * &00000002 ; Writeback Done Head
OHCI_SF                 * &00000004 ; Start of Frame
OHCI_RD                 * &00000008 ; Resume Detected
OHCI_UE                 * &00000010 ; Unrecoverable Error
OHCI_FNO                * &00000020 ; Frame Number Overflow
OHCI_RHSC               * &00000040 ; Root Hub Status Change
OHCI_OC                 * &40000000 ; Ownership Change
OHCI_MIE                * &80000000 ; Master Interrupt Enable

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_frame_interval

;OHCI_GET_IVAL(s)        ((s) :AND: &3fff)
;OHCI_GET_FSMPS(s)       (((s) :SHR: 16) :AND: &7fff)
;OHCI_FIT                &80000000

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_rh_descriptorA

;OHCI_GET_NDP(s)         ((s) & 0xff)
OHCI_PSM                * &0100     ; Power Switching Mode
OHCI_NPS                * &0200     ; No Power Switching
OHCI_DT                 * &0400     ; Device Type
OHCI_OCPM               * &0800     ; Overcurrent Protection Mode
OHCI_NOCP               * &1000     ; No Overcurrent Protection
;OHCI_GET_POTPGT(s)      ((s) >> 24)

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits for OHCI_rh_status

OHCI_LPS                * &00000001 ; Local Power Status
OHCI_OCI                * &00000002 ; OverCurrent Indicator
OHCI_DRWE               * &00008000 ; Device Remote Wakeup Enable
OHCI_LPSC               * &00010000 ; Local Power Status Change
OHCI_CCIC               * &00020000 ; OverCurrent Indicator Change
OHCI_CRWE               * &80000000 ; Clear Remote Wakeup Enable

;#define OHCI_LES (OHCI_PLE | OHCI_IE | OHCI_CLE | OHCI_BLE)
;#define OHCI_ALL_INTRS (OHCI_SO | OHCI_WDH | OHCI_SF | OHCI_RD | OHCI_UE | \
;                        OHCI_FNO | OHCI_RHSC | OHCI_OC)
;#define OHCI_NORMAL_INTRS (OHCI_SO | OHCI_WDH | OHCI_RD | OHCI_UE | OHCI_RHSC)
;
;#define OHCI_FSMPS(i) (((i-210)*6/7) << 16)
;#define OHCI_PERIODIC(i) ((i)*9/10)
;
;typedef u_int32_t ohci_physaddr_t;

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Host controller communications area (HCCA)

OHCI_NO_INTRS           * 32

                        ^ 0
HCCA_interrupt_table    # OHCI_NO_INTRS * 4
HCCA_frame_number       # 4
HCCA_done_head          # 4 ; bit 0 signifies other interrupts as well

OHCI_HCCA_SIZE          * &100
OHCI_HCCA_ALIGN         * &100


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Endpoint descriptor

                        ^ 0
ed_flags                # 4
ed_tailp                # 4
ed_headp                # 4
ed_nexted               # 4
ed_size                 * :INDEX: @

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Endpoint flags

;OHCI_ED_GET_FA(s)       ((s) & 0x7f)
OHCI_ED_ADDRMASK        * &0000007f
;OHCI_ED_SET_FA(s)       (s)
;OHCI_ED_GET_EN(s)       (((s) >> 7) & 0xf)
;OHCI_ED_SET_EN(s)       ((s) << 7)
OHCI_ED_DIR_MASK        * &00001800
OHCI_ED_DIR_TD          * &00000000
OHCI_ED_DIR_OUT         * &00000800
OHCI_ED_DIR_IN          * &00001000
OHCI_ED_SPEED           * &00002000
OHCI_ED_SKIP            * &00004000
OHCI_ED_FORMAT_GEN      * &00000000
OHCI_ED_FORMAT_ISO      * &00008000
;OHCI_ED_GET_MAXP(s)     (((s) >> 16) & 0x07ff)
;OHCI_ED_SET_MAXP(s)     ((s) << 16)
;OHCI_ED_MAXPMASK        (0x7ff << 16)

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Endpoint headp flags

OHCI_HALTED             * &00000001
OHCI_TOGGLECARRY        * &00000002
OHCI_HEADMASK           * &fffffffc


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Standard transfer descriptor

                        ^ 0
td_flags                # 4
td_cbp                  # 4 ; Current Buffer Pointer
td_nexttd               # 4 ; Next TD
td_buffer_end           # 4
td_size                 # :INDEX: @

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Standard transfer descriptor flags

OHCI_TD_R               * &00040000
OHCI_TD_DP_MASK         * &00180000
OHCI_TD_SETUP           * &00000000
OHCI_TD_OUT             * &00080000
OHCI_TD_IN              * &00100000
;OHCI_TD_GET_DI(x)       (((x) >> 21) & 7)       /* Delay Interrupt */
;OHCI_TD_SET_DI(x)       ((x) << 21)
OHCI_TD_NOINTR          * &00e00000
OHCI_TD_INTR_MASK       * &00e00000
OHCI_TD_TOGGLE_CARRY    * &00000000
OHCI_TD_TOGGLE_0        * &02000000
OHCI_TD_TOGGLE_1        * &03000000
OHCI_TD_TOGGLE_MASK     * &03000000
;OHCI_TD_GET_EC(x)       (((x) >> 26) & 3)       /* Error Count */
;OHCI_TD_GET_CC(x)       ((x) >> 28)             /* Condition Code */
OHCI_TD_NOCC            * &f0000000

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Isochronous transfer descriptor

OHCI_ITD_NOFFSET                * 8

                                ^ 0
itd_starting_frame              # 2
itd_flags                       # 2
itd_bp0                         # 4 ; Buffer Page 0
itd_nextitd                     # 4 ; Next ITD
itd_buffer_end                  # 4 ; Buffer End
itd_offsets                     # 2 * OHCI_ITD_NOFFSET ;   /* Buffer offsets */
itd_size                        # :INDEX: @

; #define itd_pswn itd_offset                             /* Packet Status Word*/
; #define OHCI_ITD_PAGE_SELECT    0x00001000
; #define OHCI_ITD_MK_OFFS(len)   (0xe000 | ((len) & 0x1fff))
; #define OHCI_ITD_PSW_LENGTH(x)  ((x) & 0xfff)           /* Transfer length */
; #define OHCI_ITD_PSW_GET_CC(x)  ((x) >> 12)             /* Condition Code */
;
; #define OHCI_ITD_GET_SF(x)      ((x) & 0x0000ffff)
; #define OHCI_ITD_SET_SF(x)      ((x) & 0xffff)
; #define OHCI_ITD_GET_DI(x)      (((x) >> 21) & 7)       /* Delay Interrupt */
; #define OHCI_ITD_SET_DI(x)      ((x) << 21)
; #define  OHCI_ITD_NOINTR        0x00e00000
; #define OHCI_ITD_GET_FC(x)      ((((x) >> 24) & 7)+1)   /* Frame Count */
; #define OHCI_ITD_SET_FC(x)      (((x)-1) << 24)
;                 MACRO
; $label          ITD_GET_CC(x)      ((x) >> 28)             /* Condition Code */

OHCI_ITD_NOCC                   * 0xf0000000


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Return codes from transfers

OHCI_CC_NO_ERROR                * 0
OHCI_CC_CRC                     * 1
OHCI_CC_BIT_STUFFING            * 2
OHCI_CC_DATA_TOGGLE_MISMATCH    * 3
OHCI_CC_STALL                   * 4
OHCI_CC_DEVICE_NOT_RESPONDING   * 5
OHCI_CC_PID_CHECK_FAILURE       * 6
OHCI_CC_UNEXPECTED_PID          * 7
OHCI_CC_DATA_OVERRUN            * 8
OHCI_CC_DATA_UNDERRUN           * 9
OHCI_CC_BUFFER_OVERRUN          * 12
OHCI_CC_BUFFER_UNDERRUN         * 13
OHCI_CC_NOT_ACCESSED            * 15

;/* Some delay needed when changing certain registers. */
;#define OHCI_ENABLE_POWER_DELAY 5
;#define OHCI_READ_DESC_DELAY    5

                END

