#include "controller.h"
#include "bufman.h"
#include "swis.h"
#include "memory.h"
#include "modhead.h"
#include "debuglib/debuglib.h"
#include "cmodule.h"
#include "Global/HALEntries.h"
#include "Global/UpCall.h"
#include "Interface/DeviceFS.h"
#include "callx/callx.h"
#include "tboxlibint/messages.h"
#include "usbd.h"

#ifdef EMULATE
#define OHCIEmulator_GetBus                 0x054a80
#define OHCIEmulator_ClaimDeviceVector      0x054a81
#define OHCIEmulator_ReleaseDeviceVector    0x054a82
#define OHCIEmulator_ReadWord               0x054a83
#define OHCIEmulator_WriteWord              0x054a84
static int OREAD(int ADDRESS)
{
    int VALUE;
    _swix (OHCIEmulator_ReadWord, _IN(0) | _OUT(1), ADDRESS, &VALUE);
    return VALUE;
}

#define OWRITE(ADDRESS,VALUE) \
_swix (OHCIEmulator_WriteWord, _INR(0,1), ADDRESS, VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OHCIEmulator_ClaimDeviceVector, _INR(1,2), FUNCTION, WS)

#define RELEASE(FUNCTION,WS) \
_swix (OHCIEmulator_ReleaseDeviceVector, _INR(1,2), FUNCTION, WS)


#else
#define OREAD(ADDRESS) (OHCI_BASE[ADDRESS / 4])
#define OWRITE(ADDRESS,VALUE) (OHCI_BASE[ADDRESS / 4] = (int) VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OS_ClaimDeviceVector, _INR(0,2), DevNo_USB, FUNCTION, WS); \
_swix (OS_Hardware, _IN(0) | _INR(8,9), DevNo_USB, 0, EntryNo_HAL_IRQEnable)

#define RELEASE(FUNCTION,WS) \
_swix (OS_ReleaseDeviceVector, _INR(0,2), DevNo_USB, FUNCTION, WS)

#endif

/* Private functions */
typedef void (TransferComplete) (Stream*, OHCI_TD*);
void bulk_complete (Stream*, OHCI_TD* );
void intr_complete (Stream*, OHCI_TD* );
void isoc_complete (Stream*, OHCI_TD* );
void ctrl_complete (Stream*, OHCI_TD* );

volatile int sofs = 0;
volatile int wdh = 0;
volatile int rhsc = 0;
volatile int overrun = 0;
volatile int data_received = 0;
volatile int request_complete = 0;


static enum state {
    port_detached,
    port_attached,
    port_powered,
    port_default,
    port_address,
    port_devdesc_size,
    port_devdesc_read,
    port_confdesc_size,
    port_confdesc_read,
    port_configured,
    port_MAX_STATE
} port_state = port_detached;

static char* port_state_str[port_MAX_STATE] =
{
    "Port Detached",
    "Port Attached",
    "Port Powered",
    "Port Default",
    "Port Address",
    "Port Devdesc size",
    "Port Devdesc read",
    "Port Confdesc size",
    "Port Confdesc read",
    "Port Configured",
};

static char* completion_codes[16] =
{
    "NoError (0)",
    "CRC (1)",
    "BitStuffing (2)",
    "DataToggleMismatch (3)",
    "Stall (4)",
    "DeviceNotResponding (5)",
    "PIDCheckFailure (6)",
    "UnexpectedPID (7)",
    "DataOverRun (8)",
    "DataUnderrun (9)",
    "Reserved (10)",
    "Reserved (11)",
    "BufferOverrun (12)",
    "BufferUnderrun (13)",
    "Not Accessed (14)",
    "Not Accessed (15)"
};

/* host controller communications area must be 256 byte aligned */
static OHCI_Hcca* hccap;
static FreeStream* freeing_list = 0;

/*****************************************************************************
* Controller management
*****************************************************************************/

_kernel_oserror* initialise_controller (OHCI_Hcca* hcp, void* pw)
{
    uint32_t w;

    /* Reset the controller, put it into operational mode, and turn on global
    power */
    OWRITE(OHCI_COMMAND_STATUS, OHCI_HCR);
    OWRITE(OHCI_RH_STATUS, OHCI_LPSC);

    /* disable all list processing */
    w = OREAD(OHCI_CONTROL);
    OWRITE(OHCI_CONTROL, w & ~(OHCI_PLE | OHCI_CLE | OHCI_BLE));

    hccap = hcp;
    hccap->donehead.pointer = 0;
    OWRITE(OHCI_HCCA, hccap - phys_offset);

    OWRITE(OHCI_CONTROL_HEAD_ED, 0);
    OWRITE(OHCI_BULK_HEAD_ED, 0);

    w = OREAD(OHCI_FM_INTERVAL);
    OWRITE(OHCI_FM_INTERVAL,
        (w & 0xffff) |                  /* the frame interval */
        (1024 << 16) |                  /* fs largest data packet */
        (w & ~(1u << 31)) ^ (1u << 31)    /* frame interval toggle */
        );

    /* only make the controller operational once we've setup the registers */
    OWRITE(OHCI_CONTROL, OHCI_HCFS_OPERATIONAL);

    /* enable periodic list processing */
    w = OREAD(OHCI_CONTROL);
    OWRITE(OHCI_CONTROL, w | OHCI_CLE | OHCI_BLE | OHCI_PLE);

    OWRITE(OHCI_INTERRUPT_DISABLE, OHCI_ALL_INTRS);
    OWRITE(OHCI_INTERRUPT_ENABLE, OHCI_MIE | OHCI_WDH | OHCI_RHSC);

    CLAIM(usb_irq_entry, pw);

    return 0;
}

void controller_finalise (void* pw)
{
    RELEASE(usb_irq_entry, pw);

    OWRITE(OHCI_CONTROL, 0);
    OWRITE(OHCI_INTERRUPT_DISABLE, OHCI_ALL_INTRS);
}


static _kernel_oserror* do_request (CtrlStream* str, USBRequest* req, char* data)
{
    int w;
    clock_t t;
    OHCI_TD* next = &str->setup;
    if (req->length > 0) next = &str->data;

    dprintf(("","Executing request for stream %p\n", str));
    str->setup.currentBuffer = claim_phys_address (req);
    str->setup.bufferEnd = claim_phys_address ((char*) req + 7);
    str->setup.dataToggle = 2; /* force DATA0 */
    str->setup.conditionCode = OHCI_CC_NOT_ACCESSED;
    str->setup.errorCount = 0;

    if (req->length > 0) {
        str->setup.nextTD = (void*) VTOPHYS (&str->data);
        str->data.direction = (req->requestType & UT_READ)? 2: 1;
        str->data.dataToggle = 3; /* force DATA1 */
        str->data.conditionCode = OHCI_CC_NOT_ACCESSED;
        str->data.nextTD = (void*) VTOPHYS (&str->status);
        str->data.currentBuffer = claim_phys_address (data);
        str->data.bufferEnd =
            claim_phys_address ((char*) data + req->length - 1);
    } else {
        str->setup.nextTD = (void*) VTOPHYS (&str->status);
    }

    str->status.nextTD = 0;
    str->status.direction = (req->requestType & UT_READ)? 1: 2;
    str->status.currentBuffer = 0;
    str->status.bufferEnd = 0;
    str->status.dataToggle = 3; /* force DATA1 */
    str->status.conditionCode = OHCI_CC_NOT_ACCESSED;
    str->status.errorCount = 0;

    str->ed.head.pointer.normal = (void*) VTOPHYS (&str->setup);
    str->ed.skip = 0;

    w = OREAD(OHCI_COMMAND_STATUS);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);

    t = clock ();
    str->complete = 0;
    while (str->complete == 0 && clock () - t < 50)
        _swix (OS_UpCall, _INR(0,1), UpCall_Sleep, &str->complete);

    dprintf (("", "Completed request, code %d\n", str->status.conditionCode));

    if (str->status.conditionCode != OHCI_CC_NO_ERROR) {
        char buf[5];
        sprintf (buf, "%d", str->status.conditionCode);
        return make_error (ProtoOHCI_FailedRequest, 1, buf);
    }

    return 0;
}

static void update_bulk_input (BulkStream* str, OHCI_TD* td) {
    int start, end, insert, remove, free, used, w;
    _kernel_swi_regs r;
    OHCI_ED* ed = &str->ed;

    dprintf (("", "Updating bulk input, str = %p, td = %p\n", str, td));

    /* when a transfer descriptor is retired, the buffer should be
    updated to reflect that the new data has arrived, and the
    buffer pointer should be incremented to the next chunk of data
    in the buffer */
    r.r[0] = BM_InsertBlock;
    r.r[1] = str->buffer_privid;
    r.r[2] = (int) (str->buffer_start + str->buffer_insertion);

    /* if the transfer completed then currentBuffer will be zero */
    if (td->currentBuffer == 0)
        r.r[3] = str->transfer_length;
    else
        r.r[3] = td->currentBuffer - td->currentBuffer;

    dprintf (("", "About to report %d bytes inserted\n", r.r[3]));

    CallBufMan(&r);

    /* this is a problem as Buffer_Info isn't reentrant */
    _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,6),

        str->buffer,

        &start,
        &end,
        &insert,
        &remove,
        &free,
        &used);
    str->buffer_insertion = insert;

    dprintf(("", "There are %d bytes in the next block\n", free));
    /* we only set up another transfer if there's some space in the buffer */
    if (free != 0) {
        /* We obviously set the buffer current pointer to the insertion point */
        td->currentBuffer = claim_phys_address ((char*) (start + insert));

        /* we need to set the end of the transfer descriptor, this will be the
        end of the buffer, if removal point is before the insert, or the
        removal point if it is after the insert. */
        td->bufferEnd = (remove <= insert)?
            claim_phys_address ((char*) (end - 1)):
            claim_phys_address ((char*) (start + remove - 1));

        str->transfer_length = td->bufferEnd - td->currentBuffer + 1;
        dprintf(("", "%d bytes queued for transfer\n", str->transfer_length));

        /* refresh the descriptor */
        td->conditionCode = OHCI_CC_NOT_ACCESSED;

        /* rehook the transfer */
        ed->tailPointer = 0;
        ed->head.pointer.normal = (void*) VTOPHYS (str->td);

        /* keep track of insertion point */
        str->buffer_insertion = insert;

        /* notify the controller that there's more data */
        w = OREAD(OHCI_COMMAND_STATUS);
        OWRITE(OHCI_COMMAND_STATUS, w | OHCI_BLF);
    }
}

static int count = 0;

/* we've heard nothing for a second, so we'd better clean up */
static _kernel_oserror* pipe_timeout (_kernel_swi_regs* r, void* pw, void* data)
{
//    ((Stream*) data)->flags.bits.timed_out = 1;

    return 0;

    NOTUSED (r);
    NOTUSED (pw);
    NOTUSED (data);
}

static void update_bulk_output (BulkStream* str, OHCI_TD* td) {
    /* when an output transfer descriptor has been retired, we must
    inform the buffer manager that we've removed the data */
    _kernel_swi_regs r;
    int w;
    OHCI_ED* ed = &str->ed;

    dprintf (("", "Updating bulk output, str = %p, td = %p\n", str, td));

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = str->buffer_privid;

    /* if the last transfer succeeded then current buffer is zero */
    r.r[3] = str->buffer_insertion;

    count += r.r[3];

    dprintf (("", "About to purge %d bytes, total %d bytes\n", r.r[3], count));

    CallBufMan(&r);

    dprintf(("", "There are %d bytes in the next block\n", r.r[3]));

    /* if we're flushing the stream, we don't care how many bytes are in the
    transfer, else we have to ensure the right size */
    if (r.r[3] != 0) {
        str->buffer_insertion = r.r[3];
    } else {
        /* remember how many bytes we inserted */
        str->buffer_insertion = r.r[3] - r.r[3] % (ed->maxPacketSize);

        /* Only set up another transfer if there's more data */
        if (str->buffer_insertion == 0) return;
    }

    dprintf(("", "Setting up output transfer for %d bytes from %x\n",
        str->buffer_insertion, r.r[2]));

    td->currentBuffer = claim_phys_address ((char*) r.r[2]);
    td->bufferEnd = (char*)
        claim_phys_address ((char*) r.r[2] + str->buffer_insertion - 1);

    /* refresh the descriptor */
    td->conditionCode = OHCI_CC_NOT_ACCESSED;
    td->dataToggle = 0;

    /* rehook the transfer */
    ed->tailPointer = 0;
    if (ed->head.flags.toggleCarry) {
        ed->head.pointer.normal = (void*) VTOPHYS (td);
        ed->head.flags.toggleCarry = 1;
    } else
        ed->head.pointer.normal = (void*) VTOPHYS (td);

    ed->skip = 0;

    w = OREAD(OHCI_COMMAND_STATUS);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_BLF);
    str->flags.bits.timed_out = 0;
    if (str->timeout) callx_add_callafter (str->timeout, pipe_timeout, str);
    return;
}

static void update_intr_input (IntrStream* str, OHCI_TD* td) {
    int start, end, insert, remove, free, used;
    _kernel_swi_regs r;
    OHCI_ED* ed = &str->ed;

    dprintf (("", "Updating interrupt input, str = %p, td = %p\n", str, td));

    /* only insert data if last transfer successful */
    if (td->conditionCode == OHCI_CC_NO_ERROR) {
        /* when a transfer descriptor is retired, the buffer should be
        updated to reflect that the new data has arrived, and the
        buffer pointer should be incremented to the next chunk of data
        in the buffer */
        r.r[0] = BM_InsertBlock;
        r.r[1] = str->buffer_privid;
        r.r[2] = (int) (str->buffer_start + str->buffer_insertion);

        /* if the transfer completed then currentBuffer will be zero */
        if (td->currentBuffer == 0)
            r.r[3] = str->transfer_length;
        else
            r.r[3] = (int) (td->bufferEnd - td->currentBuffer + 1);

        dprintf (("", "About to report %d bytes inserted\n", r.r[3]));

        CallBufMan(&r);
    }

    /* this is a problem as Buffer_Info isn't reentrant */
    _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,6),

        str->buffer,

        &start,
        &end,
        &insert,
        &remove,
        &free,
        &used);
    str->buffer_insertion = insert;

    dprintf(("", "There are %d bytes free\n", free));
    /* we only set up another transfer if there's some space in the buffer */
    if (free != 0 && td->conditionCode == OHCI_CC_NO_ERROR || td->conditionCode == OHCI_CC_NOT_ACCESSED) {
        /* We obviously set the buffer current pointer to the insertion point */
        td->currentBuffer = claim_phys_address ((char*) (start + insert));

        /* we need to set the end of the transfer descriptor, this will be the
        end of the buffer, if removal point is before the insert, or the
        removal point if it is after the insert. */
        td->bufferEnd = (remove <= insert)?
            claim_phys_address ((char*) (end - 1)):
            claim_phys_address ((char*) (start + remove - 1));

        str->transfer_length = td->bufferEnd - td->currentBuffer + 1;
        dprintf(("", "%d bytes queued for transfer\n", str->transfer_length));

        /* refresh the descriptor */
        td->conditionCode = OHCI_CC_NOT_ACCESSED;

        /* rehook the transfer */
        ed->tailPointer = 0;
        ed->head.pointer.normal = (void*) VTOPHYS (&str->td);

        /* keep track of insertion point */
        str->buffer_insertion = insert;
    }
}

static void update_intr_output (IntrStream* str, OHCI_TD* td) {
    /* when an output transfer descriptor has been retired, we must
    inform the buffer manager that we've removed the data */
    _kernel_swi_regs r;
    OHCI_ED* ed = &str->ed;

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = str->buffer_privid;

    /* if the last transfer succeeded then current buffer is zero */
    r.r[3] = str->buffer_insertion;

    count += r.r[3];

    dprintf (("", "About to purge %d bytes, total %d bytes\n", r.r[3], count));

    CallBufMan(&r);

    dprintf(("", "There are %d bytes in the next block\n", r.r[3]));

    /* if we're flushing the stream, we don't care how many bytes are in the
    transfer, else we have to ensure the right size */
    if (r.r[3] != 0) {
        str->buffer_insertion = r.r[3];
    } else {
        /* remember how many bytes we inserted */
        str->buffer_insertion = r.r[3] - r.r[3] % (ed->maxPacketSize);

        /* Only set up another transfer if there's more data */
        if (str->buffer_insertion == 0) return;
    }

    dprintf(("", "Setting up output transfer for %d bytes from %x\n",
        str->buffer_insertion, r.r[2]));

    td->currentBuffer = (char*) claim_phys_address ((char*) r.r[2]);
    td->bufferEnd = (char*)
        claim_phys_address ((char*) r.r[2] + str->buffer_insertion - 1);

    /* refresh the descriptor */
    td->conditionCode = OHCI_CC_NOT_ACCESSED;
    td->dataToggle = 0;

    /* rehook the transfer */
    ed->tailPointer = 0;
    if (ed->head.flags.toggleCarry) {
        ed->head.pointer.normal = (void*) VTOPHYS (td);
        ed->head.flags.toggleCarry = 1;
    } else
        ed->head.pointer.normal = (void*) VTOPHYS (td);

    ed->skip = 0;
}

static void update_isoc_input (IsocStream* str, OHCI_TD* td) {
    NOTUSED (str);
    NOTUSED (td);
}

static void update_isoc_output (IsocStream* str, OHCI_TD* td) {
    NOTUSED (str);
    NOTUSED (td);
}

_kernel_oserror* reset_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    OWRITE(OHCI_RH_PORT_STATUS(1), UPS_RESET);
    return 0;

    NOTUSED(data);
    NOTUSED(pw);
    NOTUSED(r);
}

_kernel_oserror *usb_irq_handler(_kernel_swi_regs *r, void *pw)
{
    int w;
    OHCI_TD* dh;

//    w = OREAD(OHCI_INTERRUPT_STATUS);
    dh = hccap->donehead.pointer;
    if (dh) {
        w = (unsigned int) dh & 1;
        dh = (OHCI_TD*) ((unsigned int) dh & ~1);
        if (w) {
            w = OREAD(OHCI_INTERRUPT_STATUS);
        }
        else
            w = OHCI_WDH;
    }
    else {
        w = OREAD(OHCI_INTERRUPT_STATUS);
    }

    if (w & OHCI_WDH) {
        OHCI_TD* td, *td_list = 0;
        Stream* str;
        wdh++;
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_WDH);
        dprintf(("", "writeback done, dh = %p\n", dh));

        /* traverse the done list, reversing it in the structures */
        while (dh) {
            td = (OHCI_TD*) PHYSTOV(dh);
            dh = td->nextTD;
            td->nextTD = td_list;
            td_list = td;
            dprintf (("", "td = %p, dh = %p, td_list = %p\n", td, dh, td_list));
        }

        while (td_list) {
            str = (Stream*) ((int) td_list & ~0x7f);
            dprintf (("", "about to call %p for str = %p, td = %p\n",
                str->transfer_complete, str, td_list));
            str->transfer_complete (str, td_list);
            td_list = td_list->nextTD;
        }
        hccap->donehead.pointer = 0;
    }

    if (w & OHCI_RHSC) {
        int w;

        /* find out what's happened */
        w = OREAD(OHCI_RH_PORT_STATUS(1));

        /* turn off the interrupt in case we cause any more */
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_RHSC);

        /* Reset port (to enable it) if we've connected */
        if (w & UPS_C_CONNECT_STATUS) {
            if (w & UPS_CURRENT_CONNECT_STATUS) {
                dprintf(("", "Device connected\n"));
                port_state = port_powered;
                callx_add_callafter (USB_DELAY_RESET, reset_cb, 0);
            } else {
                dprintf(("","Device disconnected\n"));
                callx_add_callback (usbd_device_removed, 0);
                port_state = port_detached;
            }

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_CONNECT_STATUS);
        }

        /* Once we've finished resetting, address it */
        if (w & UPS_C_PORT_RESET) {// && (w & UPS_RESET == 0)) {
            dprintf(("", "Port has reset, now addressing\n"));
//            initialise_descriptors ();
            port_state = port_default;

            /* sends port status to communicate speed (only word sized so don't
            need to put in a struct) */
            callx_add_callafter (USB_DELAY_ADDRESS, usbd_new_device, (void*) w);

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_PORT_RESET);
        }

        rhsc++;
    }

    /* the start of frame IRQ is only used for tidying up lists */
    if (w & OHCI_SF) {
        OHCI_ED* bulk_current =
            (OHCI_ED*) PHYSTOV(OREAD(OHCI_BULK_CURRENT_ED));
        OHCI_ED* ctrl_current =
            (OHCI_ED*) PHYSTOV(OREAD(OHCI_CONTROL_CURRENT_ED));
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SF);
        OWRITE(OHCI_INTERRUPT_DISABLE, OHCI_SF);
        sofs++;
        while (freeing_list) {
            FreeStream* next = freeing_list->next;
            dprintf (("", "Freeing stream %p\n", freeing_list));
            /* if we're on the current endpoint, then move onto the next one */
            if (bulk_current == &((Stream*) freeing_list)->ed) {
                OWRITE(OHCI_BULK_CURRENT_ED,
                    (bulk_current = bulk_current->nextED));
                dprintf (("", "Replacing current bulk pointer with %p\n",
                    bulk_current));
            } else if (ctrl_current == &((Stream*) freeing_list)->ed) {
                OWRITE(OHCI_CONTROL_CURRENT_ED,
                    (ctrl_current = ctrl_current->nextED));
                dprintf (("", "Replacing current control pointer with %p\n",
                    ctrl_current));
            }

            free_stream (freeing_list);
            freeing_list = next;
        }

        /* turn back on list processing, and turn off SF IRQs */
        OWRITE(OHCI_CONTROL, OREAD(OHCI_CONTROL) | OHCI_CLE | OHCI_BLE);
    }

    if (w & OHCI_SO) {
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SO);
        overrun++;
    }

    return 0;

    NOTUSED(pw);
    NOTUSED(r);
}

/*****************************************************************************/

/*****************************************************************************
* DeviceFS interface management
*****************************************************************************/

static _kernel_oserror* initialise_device (
    USBDeviceFSEndpoint* dev,
    void (*transfer_complete) (Stream*, OHCI_TD*),
    void** ret_str
) {
    OHCI_ED* ed;
    Stream* str;

    str = alloc_stream ();
    if (str == 0) return make_error (ProtoOHCI_NoMem, 0);
    ed = &str->ed;

    str->devicefs_stream = (int) *ret_str;
    dprintf (("", "setting up completion function as: %p\n",
        transfer_complete));
    str->transfer_complete = transfer_complete;
    *ret_str = (void*) str;

    ed->functionAddress = dev->dev->address;
    ed->speed = dev->dev->port_status.bits.lowspeed;
    ed->skip = 1;
    ed->format = 0;
    ed->tailPointer = 0;

    /* if the endpoint pointer is null, then we're the default control
       endpoint */
    if (dev->ed == 0) {
        dprintf (("", "Setting default control endpoint\n"));
        ed->endpointNumber = 0;
        ed->maxPacketSize = dev->dev->dev.maxPacketSize;
        ed->direction = 0;
        dev->dev->default_stream = (int) str;
    } else {
        dprintf (("", "Setting endpoint number %x\n", dev->ed->address));
        ddumpbuf ("", dev->ed, sizeof *dev->ed, 0);
        ed->endpointNumber = dev->ed->address & 0xf;
        ed->maxPacketSize = dev->ed->maxPacketSize & 0xff;
        ed->direction = dev->ed->address & 0x80? 1: 2;
    }

    return 0;
}

static _kernel_oserror* usb_request (
    USBDeviceFSEndpoint*    ed,
    USBRequest*             req,
    char*                   data
) {
    /* convert into request for this interface/endpoint */
    return do_request ((CtrlStream*) ed->dev->default_stream, req, data);
}

_kernel_oserror* bulk_driver (_kernel_swi_regs* r, void* pw)
{
    _kernel_oserror* e = 0;
    BulkStream* str = (BulkStream*) r->r[2];
    USBDeviceFSEndpoint* dev = (USBDeviceFSEndpoint*) r->r[8];

    dprintf (("", "Calling bulk driver reason = %d, stream = %p\n",
        r->r[0], str));

    if (str == 0) return 0;

    switch (r->r[0]) {
    case DeviceCall_Initialise:
        e = initialise_device (
            dev,
            (TransferComplete*) ((r->r[3] & 1)?
                update_bulk_output: update_bulk_input),
            (void*) (r->r + 2));
        if (e) return e;

        ((BulkStream*) r->r[2])->devicefs_stream = (int) str;
        str = (BulkStream*) r->r[2];
        str->ed.direction = (r->r[3] & 1)? 1: 2;
        str->ed.nextED = (void*) OREAD(OHCI_BULK_HEAD_ED);
        if (str->ed.nextED)
            ((CtrlStream*) ((int) PHYSTOV (str->ed.nextED) &~ 0x1f))->prevED =
                &str->ed;
        str->td[0].direction = str->td[1].direction = (r->r[3] & 1)? 1: 2;
        str->prevED = 0;
        OWRITE(OHCI_BULK_HEAD_ED, VTOPHYS (&str->ed));
        break;

    case DeviceCall_Finalise:
        /* turn off list, relink */
        if (str->ed.nextED &&
            str->ed.nextED != (OHCI_ED*) OHCI_BASE + OHCI_BULK_HEAD_ED
        ) {
            BulkStream* next =
                ((BulkStream*) ((int) PHYSTOV (str->ed.nextED) & ~0x1f));
            next->prevED = str->prevED;
        }

        if (str->prevED) {
            BulkStream* prev =
                ((BulkStream*) ((int) PHYSTOV (str->prevED) & ~0x1f));
            prev->ed.nextED = str->ed.nextED;
        } else {
            /* we must have been the head */
            OWRITE(OHCI_CONTROL_HEAD_ED, str->ed.nextED);
        }

        /* turn off list for freeing in IRQ handler (generate a SOF irq) */
        ((FreeStream*) str)->next = freeing_list;
        freeing_list = (FreeStream*) str;
        OWRITE(OHCI_CONTROL, OREAD(OHCI_CONTROL) &~ OHCI_BLE);
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SF);
        OWRITE(OHCI_INTERRUPT_ENABLE, OHCI_SF);
        break;

    case DeviceCall_WakeUpTX:
        /* if no output was produced, then we return that we wish to remain
        dormant */
        update_bulk_output (str, &str->td[0]);
        break;
    case DeviceCall_WakeUpRX:
        update_bulk_input (str, &str->td[0]);
        str->ed.skip = 0;
        break;
    case DeviceCall_SleepRX:
        str->ed.skip = 1;
        break;
    case DeviceCall_EnumDir:
    case DeviceCall_Halt:
    case DeviceCall_Resume:
    case DeviceCall_EndOfData:
        break;
    case DeviceCall_StreamCreated: {
        int end;
        /* record the buffer and find it's private id */
        str->buffer =  r->r[3];
        _swix (Buffer_InternalInfo, _IN(0)|_OUTR(0,2),

             r->r[3],

             &str->buffer_privid,
             &BuffManService,
             &BuffManWS);

        /* we need to know this about the buffer so that we can sort out the
        TD buffer */
        _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,3),

            r->r[3],

            &str->buffer_start,
            &end,
            &str->buffer_insertion);

        str->td[0].currentBuffer = claim_phys_address (str->buffer_start);

        /* only if less than 8k away */
        str->td[0].bufferEnd = claim_phys_address ((char*) (end - 1));
        str->td[0].conditionCode = OHCI_CC_NOT_ACCESSED;
        str->td[1].conditionCode = OHCI_CC_NOT_ACCESSED;

        } break;
    case DeviceCall_MonitorTX:
        if (str->flags.bits.timed_out) {
//            _kernel_swi_regs r;
//            /* make the endpoint skip, and empty its list */
//            str->ed.skip = 1;
//            str->ed.head.pointer.normal = 0;
//
//            /* empty the buffer so that we return */
//            r.r[0] = BM_PurgeBuffer;
//            r.r[1] = str->buffer_privid;
//            CallBufMan (&r);
//
//            str->flags.bits.timed_out = 0;
//            return make_error (ProtoOHCI_USBPipeTimeout, 0);
        }
        break;
    case DeviceCall_IOCtl: {

        /* here we do control transfers */
        }break;
    case DeviceCall_USBControl:
        return usb_request (dev, (USBRequest*) r->r[3], (char*) r->r[4]);
        break;
    }

    return 0;

    NOTUSED(pw);
}

_kernel_oserror* intr_driver (_kernel_swi_regs* r, void* pw)
{
    int i = 0;
    _kernel_oserror* e = 0;
    IntrStream* str = (IntrStream*) r->r[2];
    USBDeviceFSEndpoint* dev = (USBDeviceFSEndpoint*) r->r[8];

    dprintf (("", "Calling interrupt driver reason = %d, stream = %p\n",
        r->r[0], str));

    if (str == 0) return 0;

    switch (r->r[0]) {
    case DeviceCall_Initialise:
        e = initialise_device (dev,
           (TransferComplete*) ((r->r[3] & 1)?
                update_intr_output: update_intr_input),
           (void*) (r->r + 2));
        if (e) return e;

        ((IntrStream*) r->r[2])->devicefs_stream = (int) str;
        str = (IntrStream*) r->r[2];
        str->ed.direction = (r->r[3] & 1)? 1: 2;
        str->td.direction = (r->r[3] & 1)? 1: 2;
        str->ed.nextED = 0;
        /* naive addition of endpoints to interrupt queue */
        if (hccap->interruptTable[0] != 0) i = 1;
        for (; i < OHCI_NUM_INTERRUPTS; i += dev->ed->interval)
            hccap->interruptTable[i] = (OHCI_ED*) VTOPHYS (&str->ed);

        break;

    case DeviceCall_Finalise:
        /* turn of list, relink */
        for (i = 0; i < OHCI_NUM_INTERRUPTS; i += dev->ed->interval)
            hccap->interruptTable[i] = 0;
        free_stream (str);
        break;

    case DeviceCall_WakeUpTX:
        /* if no output was produced, then we return that we wish to remain
        dormant */
        update_intr_output (str, &str->td);
        break;
    case DeviceCall_WakeUpRX:
        update_intr_input (str, &str->td);
        str->ed.skip = 0;
        break;
    case DeviceCall_SleepRX:
        str->ed.skip = 1;
        break;

    /* create buffers which are the size of the max packet */
    /* hack limiting to 255 because there appears to be crap in the upper byte*/
    case DeviceCall_CreateBufferTX:
        r->r[4] = dev->ed->maxPacketSize & 0xff;// + 1;
        break;
    case DeviceCall_CreateBufferRX:
        r->r[4] = dev->ed->maxPacketSize & 0xff;// + 1;
        break;

    case DeviceCall_StreamCreated: {
        int end;
        /* record the buffer and find it's private id */
        str->buffer =  r->r[3];
        _swix (Buffer_InternalInfo, _IN(0)|_OUTR(0,2),

             r->r[3],

             &str->buffer_privid,
             &BuffManService,
             &BuffManWS);

        /* we need to know this about the buffer so that we can sort out the
        TD buffer */
        _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,3),

            r->r[3],

            &str->buffer_start,
            &end,
            &str->buffer_insertion);

        str->td.currentBuffer = claim_phys_address (str->buffer_start);

        /* only if less than 8k away */
        str->td.bufferEnd = claim_phys_address ((char*) (end - 1));
        str->td.conditionCode = OHCI_CC_NOT_ACCESSED;

        } break;
    case DeviceCall_USBRequest:
        return usb_request (dev, (USBRequest*) r->r[3], (char*) r->r[4]);
        break;
    }
    return 0;

    NOTUSED (pw);
}

void isoc_complete (Stream* str, OHCI_TD* td)
{
    if (str->ed.direction == 1)
        update_isoc_output ((IsocStream*) str, td);
    else
        update_isoc_input ((IsocStream*) str, td);
}

_kernel_oserror* isoc_driver (_kernel_swi_regs* r, void* pw)
{
    _kernel_oserror* e = 0;
    BulkStream* str = (BulkStream*) r->r[2];
    USBDeviceFSEndpoint* dev = (USBDeviceFSEndpoint*) r->r[8];

    if (str == 0) return 0;

    dprintf (("", "Calling isoc driver reason = %d, stream = %p\n",
        r->r[0], str));

    switch (r->r[0]) {
    case DeviceCall_Initialise:
        e = initialise_device (dev, isoc_complete, (void*) (r->r + 2));
        if (e) return e;
        break;

    case DeviceCall_Finalise:
        free_stream (str);
        break;

    case DeviceCall_USBRequest:
        return usb_request (dev, (USBRequest*) r->r[3], (char*) r->r[4]);
        break;
    }
    return 0;

    NOTUSED (pw);
}

void ctrl_complete (Stream* str, OHCI_TD* td)
{
    /* only report complete if the status stage has completed successfully */
    if (td == &((CtrlStream*) str)->status && td->conditionCode == OHCI_CC_NO_ERROR)
        str->complete = 1;
}

_kernel_oserror* ctrl_driver (_kernel_swi_regs* r, void* pw)
{
    _kernel_oserror* e = 0;
    CtrlStream* str = (CtrlStream*) r->r[2];
    USBDeviceFSEndpoint* dev = (USBDeviceFSEndpoint*) r->r[8];

    dprintf (("", "Calling control driver reason = %d, stream = %p\n",
        r->r[0], str));

    if (str == 0) return 0;

    switch (r->r[0]) {
    case DeviceCall_Initialise:
        e = initialise_device (dev, ctrl_complete, (void*) (r->r + 2));
        if (e) return e;
        ((CtrlStream*) r->r[2])->devicefs_stream = (int) str;
        str = (CtrlStream*) r->r[2];
        str->ed.nextED = (void*) OREAD(OHCI_CONTROL_HEAD_ED);
        if (str->ed.nextED)
            ((CtrlStream*) ((int) PHYSTOV (str->ed.nextED) &~ 0x1f))->prevED =
                &str->ed;

        str->prevED = 0;
        OWRITE(OHCI_CONTROL_HEAD_ED, VTOPHYS (&str->ed));
        break;

    case DeviceCall_Finalise:
        if (str->ed.nextED &&
            str->ed.nextED != (OHCI_ED*) OHCI_BASE + OHCI_CONTROL_HEAD_ED
        ) {
            CtrlStream* next;
            next =
                ((CtrlStream*) ((int) PHYSTOV (str->ed.nextED) &~ 0x1f));
            dprintf (("", "Next endpoint is at: %p\n", next));
            next->prevED = str->prevED;
        }

        if (str->prevED) {
            CtrlStream* prev =
                ((CtrlStream*) ((int) PHYSTOV (str->prevED) &~ 0x1f));
            dprintf (("", "Previous endpoint is at: %p\n", prev));
            prev->ed.nextED = str->ed.nextED;
        } else {
            /* we must have been the head */
            OWRITE(OHCI_CONTROL_HEAD_ED, str->ed.nextED);
        }

        /* turn off list for freeing in IRQ handler (generate a SOF irq) */
        ((FreeStream*) str)->next = freeing_list;
        freeing_list = (FreeStream*) str;
        OWRITE(OHCI_CONTROL, OREAD(OHCI_CONTROL) &~ OHCI_CLE);
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SF);
        OWRITE(OHCI_INTERRUPT_ENABLE, OHCI_SF);
        break;

    case DeviceCall_CreateBufferTX:
        break;
    case DeviceCall_CreateBufferRX:
        break;
    case DeviceCall_USBControl:
        return do_request (str, (USBRequest*) r->r[3], (char*) r->r[4]);
        break;

    case DeviceCall_USBRequest:
        /* always make sure we use the speed specified for the device,
        and the max packet size */
        ((CtrlStream*) dev->dev->default_stream)->ed.speed =
            dev->dev->port_status.bits.lowspeed;
        ((CtrlStream*) dev->dev->default_stream)->ed.maxPacketSize =
            dev->dev->dev.maxPacketSize;
        return usb_request (dev, (USBRequest*) r->r[3], (char*) r->r[4]);
        break;
    }
    return 0;

    NOTUSED (pw);
}

/*****************************************************************************/
