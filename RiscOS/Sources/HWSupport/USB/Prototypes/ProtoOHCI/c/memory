#include <string.h>
#include "memory.h"
#include "cmodule.h"
#include "modhead.h"
#include "swis.h"
#include "USB/OHCI.h"
#include "debuglib/debuglib.h"

/*****************************************************************************
* Memory management
*****************************************************************************/

int         dyn_number;
char*       dyn_base;
uintptr_t   dyn_base_phys = -1;
int         phys_mem_page;
int         phys_offset = 0;


static FreeStream* free_stream_head = 0;

typedef struct {
        uint32_t    page;
        void*       logical;
        void*       physical;
} MemBlock;

_kernel_oserror *dyn_handler(_kernel_swi_regs *r, void *pw)
{
    int i;
    MemBlock* block = (void*) r->r[1];

    /* we're only interested in pregrow */
    if (r->r[0] != 0) return 0;

    /* fill in the required page numbers */
    for (i = 0; i < r->r[2]; ++i, ++phys_mem_page)
        block[i].page = phys_mem_page;

    return 0;

    NOTUSED (pw);
}

_kernel_oserror* initialise_memory (void** hcca, void* pw)
{
    _kernel_oserror* e;
    FreeStream* stream;
    MemBlock block;
    /* Claim our memory. */
#ifndef EMULATE
    /* First we need to find a locked down page */
    e = _swix (OS_Memory, _INR(0,2) | _OUT(3),

        12,                 /* reason code for recommending physical pages */
        OHCID_SIZE,         /* size of RAM required */
        8,                  /* log2 of alignement */

        &phys_mem_page);     /* page number recommended */
    if (e) return e;
#endif

    /* Now create the dynamic area */
    e = _swix (OS_DynamicArea, _INR(0,8) | _OUT(1) | _OUT(3),

        0,                  /* reason, create area */
        -1,                 /* we're given an area number */
        OHCID_SIZE,         /* initial size */
        -1,                 /* we're given the base address */
#ifdef EMULATE
        0,
#else
        (1<<4) |            /* area is not bufferable */
        (1<<5) |            /* area is not cacheable */
        (1<<7) |            /* area size may not be dragged in taskmanager */
        (1<<8),             /* area requires specific pages */
#endif
        OHCID_SIZE,         /* maximum size */
#ifdef EMULATE
        0,
#else
        dyn_entry,          /* handler */
#endif
        pw,                 /* workspace for handler */
        "OHCI Driver",      /* name of area */

        &dyn_number,         /* dynamic area number */
        &dyn_base);          /* base address of area */
    if (e) return e;

    /* this gives the offset to add to a physical address to get to logical */
#ifdef EMULATE
    phys_offset = 0;
#else
    block.logical = (void *) dyn_base;
    _swix (OS_Memory, _INR (0, 2),

        (1<<9)  |   /* we're providing a logical address */
        (1<<13),   /* we want a physical address filled in */
        &block,
        1           /* one entry in the block */
        );
    dyn_base_phys = (int) block.physical;

    phys_offset = (int) dyn_base - dyn_base_phys;
#endif

    /* initialise list of free streams */
    memset (dyn_base, 0, OHCID_SIZE);
    free_stream_head = (FreeStream*) (dyn_base + sizeof (OHCI_Hcca));

    stream = free_stream_head;
    while ((int) (stream + 1) < (int) dyn_base + OHCID_SIZE) {
        stream->next = stream + 1;
        stream++;
    }

    dprintf (("memory", "Dynamic base at %x, physical base at %x, offset %x\n",
        dyn_base, dyn_base_phys, phys_offset));


    *hcca = dyn_base;

    return 0;
}

void finalise_memory (void)
{
    /* remove our dynamic area */
    _swix (OS_DynamicArea, _INR(0,1), 1, dyn_number);
}

void* claim_phys_address (void* v)
{
#ifdef EMULATE
    return v;
#else
    MemBlock block;
    block.logical = (void *) v;
    _swix (OS_Memory, _INR (0, 2),

        (1<<9)  |   /* we're providing a logical address */
        (1<<13) |   /* we want a physical address filled in */
        (2<<14),    /* make the page uncacheable */
        &block,
        1           /* one entry in the block */
        );


    return block.physical;
#endif
}

void free_phys_address (void* v)
{
#ifdef EMULATE
    return;
#else
    MemBlock block;
    block.logical = (void *) v;

    _swix (OS_Memory, _INR (0, 2),

        (1<<10) |   /* we're providing a physical address */
        (3<<14),    /* make the page cacheable */
        &block,
        1           /* one entry in the block */
        );
#endif
}

void* alloc_stream () {
    FreeStream* ret = free_stream_head;
    dprintf (("memory", "Allocating stream at %p\n", ret));
    if (ret != 0) {
        free_stream_head = ret->next;
        memset (ret, 0, sizeof *ret);
    }
    return ret;
}

void free_stream (void* str) {
    FreeStream* this_str = (FreeStream*) str;
    if (this_str) {
        this_str->next = free_stream_head;
        free_stream_head = this_str;
    }
}

/*****************************************************************************/

