#include <string.h>
#include <time.h>
#include "usbd.h"
#include "stdlib.h"
#include "DebugLib/DebugLib.h"
#include "tboxlibint/messages.h"
#include "cmodule.h"
#include "stdio.h"
#include "swis.h"
#include "modhead.h"
#include "wimplib.h"
#include "callx/callx.h"
#include "Global/Services.h"
#include "devicefs.h" /* included after swis.h to avoid conflict */

/* transfer descriptor data */

static USBRequest
    setAddress  = { UT_WRITE_DEVICE, UR_SET_ADDRESS, 0, 0, 0 },
    setConfig   = { UT_WRITE_DEVICE, UR_SET_CONFIG, 1, 0, 0 },
    devDesc     = { UT_READ_DEVICE,  UR_GET_DESCRIPTOR, UDESC_DEVICE<<8, 0, 8},
    confDesc    = { UT_READ_DEVICE,  UR_GET_DESCRIPTOR, UDESC_CONFIG<<8, 0, 8};

static int                  default_file_handle = 0;
static USBDeviceFSDevice    first_dev;

typedef struct DeviceListNode DeviceListNode;
struct DeviceListNode {
    DeviceListNode*     next;
    DeviceListNode*     prev;
    USBDeviceFSDevice*  dev;
    int                 default_file_handle;
};
static DeviceListNode *head_node = 0;

static struct {
    devicefs_device dev;
    int             null;
} devfs;

static _kernel_oserror* remove_device (DeviceListNode* node);

static _kernel_oserror* create_devicefs_entry (
    void                    (*driver) (void),
    USBDeviceFSEndpoint*    ws,
    char*                   name,
    void*                   pw
) {
    devfs.dev.name_offset = name - (char*) &devfs;
    dprintf (("usbd", "Creating devicefs entry for '%s'\n", name));
    return _swix (DeviceFS_Register, _INR (0, 7) | _OUT(0),
        0,
        &devfs,
        driver,
        ws,
        pw,
        0,
        1,
        1,
        &ws->device_handle);
}

_kernel_oserror* usbd_initialise (void* pw)
{
    _kernel_oserror* e = 0;
    char filename[255];
    /* These are required for setting up the default endpoint */

    /* set up a default descriptor for addressing */
    memset (&first_dev, 0, sizeof first_dev);
    first_dev.port_status.bytes[0] = 3;
    first_dev.dev.length = sizeof first_dev.dev;
    first_dev.dev.type = UDESC_DEVICE;
    first_dev.dev.maxPacketSize = 8;
    first_dev.default_ep.dev = &first_dev;

    /* *** need to sort out buffers *** */
    memset (&devfs, 0, sizeof devfs);
    devfs.dev.flags = 1;
    devfs.dev.tx_flags = 0x0;
    devfs.dev.tx_buffer_size = 1024;
    devfs.dev.rx_flags = 0x0;
    devfs.dev.rx_buffer_size = 1024;

    /* Set up devicefs entry */
    e = create_devicefs_entry (
        ctrl_driver_entry,
        &first_dev.default_ep,
        "USB.0.0",
        pw);

    /* Open the default address endpoint */
    if (!e) e = _swix (OS_Find, _INR(0,1) | _OUT(0),

        0x80, /* Open existing file with read-only access */
        "Devices:$.USB.0.0",

        &default_file_handle);

    return e;

    NOTUSED(pw);
}

_kernel_oserror* usbd_finalise (void* pw) {
    dprintf (("", "Finalising USBD\n"));
    /* remove all our devicefs devices and structures */
    while (head_node) {
        DeviceListNode* next = head_node->next;
        remove_device (head_node);
        head_node = next;
    }

    /* close the default device if we opened it */
    if (default_file_handle)
        _swix (OS_Find, _INR(0,1), 0, default_file_handle);

    if (first_dev.default_ep.device_handle) {
        dprintf (("usbd", "Removing device driver %x\n",
            first_dev.default_ep.device_handle));
        _swix (DeviceFS_Deregister, _IN (0),
            first_dev.default_ep.device_handle);
    }

    return 0;
    NOTUSED (pw);
}

/* read one config descriptor into the device structure */
static _kernel_oserror* read_config_descriptor (
    USBDeviceFSDevice*      dev,
    int                     config,
    void*                   pw
) {
    _kernel_oserror*        e;
    int                     i, j;
    char*                   p;
    USBEndpointDescriptor*  en;
    USBInterfaceDescriptor* in;
    USBConfigDescriptor*    cdesc;

    dprintf (("", "Reading config descriptor %d\n", config));

    /* the config index is given in the lower 8 bits */
    confDesc.value &= 0xff00;
    confDesc.value |= config - 1;

    /* First of all read the beginning of the descriptor to find out the
    total length */
    confDesc.length = 8;
    cdesc = calloc (confDesc.length, 1);
    if (cdesc == 0) return make_error (ProtoOHCI_NoMem, 0);

    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        dev->default_ep.device_handle,
        &confDesc,
        cdesc);

    if (e) return e;

    /* Now retrieve the whole descriptor */
    confDesc.length = cdesc->totalLength;
    cdesc = realloc (cdesc, confDesc.length);
    if (cdesc == 0) return make_error (ProtoOHCI_NoMem, 0);

    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        dev->default_ep.device_handle,
        &confDesc,
        cdesc);

    if (e) return e;

    /* Make a copy of configuration pointer, and assign to the structure */
    p = (char*) cdesc;
    dev->conf = cdesc;

    ddumpbuf ("", 0, confDesc.length, (int) p);

    if (cdesc->type != UDESC_CONFIG) {
        dprintf (("usbd", "Not a config descriptor\n"));
        return 0;
    }
    dprintf(("Descriptor",
        "Total length      : %d\n"
        "Num interfaces    : %d\n"
        "Config value      : %d\n"
        "Config name       : %d\n"
        "Attributes        : %d\n"
        "Max power         : %dmA\n\n",
        cdesc->totalLength,
        cdesc->numInterfaces,
        cdesc->configurationValue,
        cdesc->config_string,
        cdesc->attributes,
        cdesc->maxPower * 2));
    p += cdesc->length;
    dev->ifaces =
        calloc (cdesc->numInterfaces, sizeof (USBInterfaceDescriptor*));
    if (dev->ifaces == 0) return make_error (ProtoOHCI_NoMem, 0);

    dev->eds = calloc (cdesc->numInterfaces, sizeof (USBDeviceFSEndpoint**));
    if (dev->eds == 0) return make_error (ProtoOHCI_NoMem, 0);

    for (i = 0; i < cdesc->numInterfaces; ++i) {

        /* validate this descriptor, and skip over any unidentified ones */
        do {
            in = (USBInterfaceDescriptor*) p;
            p += in->length;
        } while (in->type != UDESC_INTERFACE &&
            (p - cdesc->totalLength) < (char*) cdesc);

        if ((p - cdesc->totalLength) > (char*) cdesc)
            return make_error (ProtoOHCI_InvalidDescriptor, 1, "Interface");

        dprintf(("Descriptor",
            "Interface Number  : %d\n"
            "Alternate setting : %d\n"
            "Num endpoints     : %d\n"
            "Interface class   : %d\n"
            "Interface subclass: %d\n"
            "Interface protocol: %d\n"
            "String            : %d\n\n",
            in->number,
            in->alternateSetting,
            in->numEndpoints,
            in->devclass,
            in->devsubClass,
            in->protocol,
            in->interface_string));

        /* set up pointers */
        dev->ifaces[i] = in;

        dev->eds[i] = calloc (in->numEndpoints, sizeof (USBDeviceFSEndpoint));
        if (dev->eds[i] == 0) return make_error (ProtoOHCI_NoMem, 0);

        /* now loop over endpoints */
        for (j = 0; j < in->numEndpoints; ++j) {
            void (*driver) (void);

            /* validate this descriptor, and skip over any unidentified ones */
            do {
                en = (USBEndpointDescriptor*) p;
                p += en->length;
            } while (en->type != UDESC_ENDPOINT &&
                (p - cdesc->totalLength) < (char*) cdesc);

            if ((p - cdesc->totalLength) > (char*) cdesc)
                return make_error (ProtoOHCI_InvalidDescriptor, 1, "Endpoint");

            dprintf(("Descriptor",
                "Address           : %d %s\n"
                "Attributes        : ",
                en->address & 0xf,
                en->address & 0x80? "In": "Out"));


            switch (en->attributes & 3) {
            case 0:
                dprintf (("Descriptor", "Control\n"));
                driver = ctrl_driver_entry;
                break;
            case 1:
                dprintf (("Descriptor", "Isochronous (%x)\n", en->attributes));
                driver = isoc_driver_entry;
                break;
            case 2:
                dprintf (("Descriptor", "Bulk\n"));
                driver = bulk_driver_entry;
                break;
            case 3:
                dprintf (("Descriptor", "Interrupt\n"));
                driver = intr_driver_entry;
                break;
            }

            dprintf(("Descriptor",
                "Max packet size   : %d\n"
                "Interval          : %d\n\n",
                en->maxPacketSize,
                en->interval));

            /* set up pointers */
            dev->eds[i][j].dev = dev;
            dev->eds[i][j].iface = i;
            dev->eds[i][j].ed = en;

            /* Set up devicefs entry */
            sprintf (dev->eds[i][j].device_name, "USB.%d.%d%s",
                dev->address,
                en->address & 0xf,
                en->address & 0x80? "IN": "OUT");

            e = create_devicefs_entry (
                driver,
                &dev->eds[i][j],
                dev->eds[i][j].device_name,
                pw);

            if (e) return e;

        }
    }

    return 0;
}

_kernel_oserror* remove_device_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    /* need to remove appropriate device here */
//    _swix (DeviceFS_Deregister, _IN (0), driver_handle);

    return 0;

    NOTUSED(pw);
    NOTUSED(data);
    NOTUSED(r);
}

static _kernel_oserror* read_device_descriptor (USBDeviceFSDevice* dev) {
    _kernel_oserror* e;

    dprintf (("usbd", "About to read device descriptor\n"));
    /* the device must support a max packet size of at least 8 */
    devDesc.length = 8;
    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        dev->default_ep.device_handle,
        &devDesc,
        &dev->dev);
    if (e) return e;

    /* the max packet size will have been set correctly now */
    devDesc.length = dev->dev.length;
    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        dev->default_ep.device_handle,
        &devDesc,
        &dev->dev);
    if (e) return e;

    dprintf(("Descriptor",
        "USB release     : %x\n"
        "Device class    : %d\n"
        "Device subclass : %d\n"
        "Device protocol : %d\n"
        "Max packet size : %d\n"
        "Vendor          : %x\n"
        "Product         : %d\n"
        "Release         : %d\n"
        "Manufacturer    : %d\n"
        "Product         : %d\n"
        "Serial number   : %d\n"
        "Num configs     : %d\n",
        dev->dev.specRelease,
        dev->dev.devclass,
        dev->dev.devsubclass,
        dev->dev.protocol,
        dev->dev.maxPacketSize,
        dev->dev.vendor,
        dev->dev.product,
        dev->dev.release,
        dev->dev.manufacturer_string,
        dev->dev.product_string,
        dev->dev.serial_string,
        dev->dev.num_configs));

    return 0;
}

/* We've been notified that a new device has been attached. */
/* first we must read its device descriptor, then create a new entry for it
before reading its configuration descriptor */
static _kernel_oserror* _usbd_new_device (_kernel_swi_regs* r, void* pw, void* data) {
    _kernel_oserror* e = 0;
    USBDeviceFSDevice* new_dev = 0;
    DeviceListNode* new_node;
    char filename[255];
    clock_t t;

    dprintf (("usbd", "Allocating new device\n"));

    /* data contains port status */
    first_dev.port_status.bytes[0] = (int) data & 0xff;
    first_dev.port_status.bytes[1] = (int) data >> 8;

    /* very dumb algorithm for address alocation at the moment */
    setAddress.value++;

    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        first_dev.default_ep.device_handle,
        &setAddress,
        0);

    if (e) return e;

    t = clock ();
    while (clock() - t < USB_DELAY_CONFIG);

    /* create a new node */
    new_node = calloc (1, sizeof *new_node);
    if (new_node == 0) return make_error (ProtoOHCI_NoMem, 0);

    /* add the new node onto the chain, putting it at the head if there isn't
    a head already */
    new_node->next = head_node;
    new_node->prev = 0;

    /* create the device structure */
    new_dev = calloc (1, sizeof *new_dev);
    if (new_dev == 0) {
        e = make_error (ProtoOHCI_NoMem, 0);
        goto fail_node;
    }

    new_node->dev = new_dev;

    /* initialise the endpoint structure for the device */
    new_dev->default_ep.dev = new_dev;

    new_dev->address = setAddress.value;
    new_dev->port_status = first_dev.port_status;
    new_dev->dev.maxPacketSize = 8;

    /* Set up devicefs entry */
    sprintf (new_dev->device_name, "USB.%d.0", setAddress.value);
    e = create_devicefs_entry (
        ctrl_driver_entry,
        &new_dev->default_ep,
        new_dev->device_name,
        pw);
    if (e) goto fail_device_structure;

    /* only add the node to the list if everything's gone alright to here */
    if (head_node != 0) head_node->prev = new_node;
    head_node = new_node;

    sprintf (filename, "Devices:$.%s", new_dev->device_name);
    /* Open the default address endpoint, we need to remember the file handle
    to close it later */
    dprintf (("usbd", "About to open %s\n", new_dev->device_name));
    e = _swix (OS_Find, _INR(0,1) | _OUT(0),

        0x80, /* Open existing file with read-only access */
        filename,

        &new_node->default_file_handle);
    if (e) return e;

    e = read_device_descriptor (new_dev);
    if (e) return e;

    setConfig.value = 1;
    e = _swix (DeviceFS_CallDevice, _INR(0,1) | _INR(3,4),

        DeviceCall_USBRequest,
        new_dev->default_ep.device_handle,
        &setConfig,
        0);
    if (e) return e;

    /* we only try the first configuration at the moment */
    e = read_config_descriptor (new_dev, 1, pw);
    if (e) return e;

    /* announce it to the world */
    _swix (OS_ServiceCall, _INR(1,2),

        Service_USB,
        new_dev);

    return 0;

fail_device_structure:
    free (new_dev);
fail_node:
    free (new_node);
    return e;

    NOTUSED(r);
}

static _kernel_oserror* remove_device (DeviceListNode* node)
{
    int                     i, j;

    dprintf (("", "Removing node %p\n", node));

    _swix (OS_Find, _INR(0,1), 0, node->default_file_handle);
    _swix (DeviceFS_Deregister, _IN(0), node->dev->default_ep.device_handle);

    if (node->dev->conf && node->dev->ifaces)
        for (i = node->dev->conf->numInterfaces - 1; i >= 0 ; --i) {
            for (j = node->dev->ifaces[i]->numEndpoints - 1; j >= 0 ; --j)
                _swix (DeviceFS_Deregister, _IN(0),
                    node->dev->eds[i][j].device_handle);
            free (node->dev->eds[i]);
        }

    free (node->dev->eds);
    free (node->dev->ifaces);
    free (node->dev->conf);

    /* unlink from list */
    if (node->prev) node->prev->next = node->next;
    if (node->next) node->next->prev = node->prev;

    free (node);
    return 0;
}

_kernel_oserror* __usbd_new_device (_kernel_swi_regs* r, void* pw, void* data)
{
    _kernel_oserror* e;
    e = _usbd_new_device (r, pw, data);
    if (e) {
        dprintf (("usbd", "Error creating new device: %s (%p)\n", e->errmess, e));
        wimp_report_error (e, 0, "USBD");
    }
    return 0;
}

_kernel_oserror* usbd_new_device (_kernel_swi_regs* r, void* pw, void* data)
{
    callx_add_callback (__usbd_new_device, data);

    return 0;
}

_kernel_oserror* usbd_device_removed (_kernel_swi_regs* r, void* pw, void* data)
{
    _kernel_oserror* e;
    e = remove_device (head_node);
    if (e) {
        dprintf (("usbd", "Error removing device: %s (%p)\n", e->errmess, e));
        wimp_report_error (e, 0, "USBD");
    }
    head_node = 0;
    return 0;
}

