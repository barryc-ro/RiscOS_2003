#include "modhead.h"
#include "swis.h"
#include <string.h>
#include "debuglib/debuglib.h"
#include <stdlib.h>
#include "Global/RISCOS.h"
#include "callx/callx.h"
#include "cmodule.h"
#include "tboxlibint/messages.h"

#include "memory.h"
#include "controller.h"
#include "usbd.h"

/* Time out pipe transmission after a second */
#define USB_PIPE_TIMEOUT 100

/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/

/* this function is generated by resgen from the resource files */
extern void* resource_files (void);

/*****************************************************************************
* Module management
*****************************************************************************/

_kernel_oserror* module_init (const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror* e = 0;
    void* hcca;

    if ((int) cmd_tail == -1) goto finalise;

    /* set up debugging */
    debug_initialise (Module_Title, "", "");
    debug_set_device(DEBUGIT_OUTPUT);
    debug_set_unbuffered_files (TRUE);

    callx_init (pw);

    e = _swix (ResourceFS_RegisterFiles, _IN (0), resource_files ());
    if (e) goto fin_callx;

    e = messages_file_open (Module_MessagesFile);
    if (e) goto fin_resources;

    e = initialise_memory (&hcca, pw);
    if (e) goto fin_messages;

    e = initialise_controller (hcca, pw);
    if (e) goto fin_memory;

    e = usbd_initialise (pw);
    if (e) goto fin_controller;

    return 0;

finalise:
    usbd_finalise (pw);
fin_controller:
    controller_finalise (pw);
fin_memory:
    finalise_memory ();
fin_messages:
    messages_file_close ();
fin_resources:
    _swix (ResourceFS_DeregisterFiles, _IN (0), resource_files ());
fin_callx:
    callx_remove_all_callbacks ();

    return e;

    NOTUSED(podule_base);
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    module_init ((const char*) -1, 0, pw);

    return 0;

    NOTUSED(podule);
    NOTUSED(fatal);
}

_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    switch (cmd_no) {
    case CMD_USBStatus:
        printf ("Write back done head   : %d\n", wdh);
        printf ("Start of frames        : %d\n", sofs);
        printf ("Root hub status change : %d\n", rhsc);
        printf ("Data received          : %d\n", data_received);
        printf ("Overruns               : %d\n", overrun);
//        printf ("Port status            : %s\n", port_state_str[port_state]);
        break;
   }

    return 0;

    NOTUSED(pw);
    NOTUSED(argc);
    NOTUSED(arg_string);
}

/*****************************************************************************/

