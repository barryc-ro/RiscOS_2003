#ifndef OHCI_CONTROLLER_H
#define OHCI_CONTROLLER_H

#include <stdint.h>
#include <time.h>
#include "kernel.h"

#include "USB/OHCI.h"
#include "USB/USB.h"

#ifdef ALBA2
#define DevNo_USB 30
#define OHCI_BASE ((volatile int*) 0xf9020000)
#else
#define DevNo_USB 34 /* L7205 */
#define OHCI_BASE ((volatile int*) 0xf99f6000)
#endif

extern volatile int sofs;
extern volatile int wdh;
extern volatile int rhsc;
extern volatile int overrun;
extern volatile int data_received;
extern volatile int request_complete;

/* Private structures */
typedef struct Stream Stream;
typedef struct BulkStream BulkStream;
typedef struct IntrStream IntrStream;
typedef struct CtrlStream CtrlStream;
typedef struct IsocStream IsocStream;

struct Stream
{
    uint32_t        devicefs_stream;
    OHCI_ED*         prevED;
    void (*transfer_complete) (Stream*, OHCI_TD*);
    uint32_t        complete;
    OHCI_ED         ed;
};

struct BulkStream
{
    uint32_t        devicefs_stream;
    OHCI_ED*        prevED;
    void (*transfer_complete) (BulkStream*, OHCI_TD*);
    uint32_t        complete;
    OHCI_ED         ed;
    OHCI_TD         td[2];
    union {
        struct {
            int      timed_out:1;
        } bits;
        uint32_t word;
    } flags;
    uint32_t        buffer;
    uint32_t        buffer_privid;
    char*           buffer_start;
    int             transfer_length;
    uint32_t        buffer_insertion;
    clock_t         timeout;
};

struct IntrStream
{
    uint32_t        devicefs_stream;
    OHCI_ED*        prevED;
    void (*transfer_complete) (IntrStream*, OHCI_TD*);
    uint32_t        complete;
    OHCI_ED         ed;
    OHCI_TD         td;
    uint32_t        buffer;
    uint32_t        buffer_privid;
    char*           buffer_start;
    int             transfer_length;
    uint32_t        buffer_insertion;
    uint32_t        flags;
    clock_t         timeout;
};

struct IsocStream
{
    uint32_t        devicefs_stream;
    OHCI_ED*        prevED;
    void (*transfer_complete) (IsocStream*, OHCI_TD*);
    uint32_t        complete;
    OHCI_ED         ed;
    OHCI_IsoTD      td[2];
    uint32_t        buffer;
    uint32_t        buffer_privid;
    char*           buffer_start;
    uint32_t        buffer_insertion;
};

/* size of stream = 8 * 16 = 128 bytes, 7 bits */

struct CtrlStream
{
    uint32_t        devicefs_stream;
    OHCI_ED*        prevED;
    void (*transfer_complete) (CtrlStream*, OHCI_TD*);
    uint32_t        complete;       /* zero until completed - pollword */
    OHCI_ED         ed;
    OHCI_TD         setup;
    OHCI_TD         data;
    OHCI_TD         status;
};



/*
 * State information for each stream
 */

extern _kernel_oserror* initialise_controller (OHCI_Hcca* hccap, void* pw);
extern void controller_finalise (void* pw);
extern _kernel_oserror* bulk_driver (_kernel_swi_regs* r, void* pw);
extern _kernel_oserror* intr_driver (_kernel_swi_regs* r, void* pw);
extern _kernel_oserror* isoc_driver (_kernel_swi_regs* r, void* pw);
extern _kernel_oserror* ctrl_driver (_kernel_swi_regs* r, void* pw);

#endif
