
#ifndef __USBD_OHCI_H
#define __USBD_OHCI_H

#include <stdint.h>
#include "USB/USB.h"
#include "kernel.h"

#define USB_DELAY_RESET   20
#define USB_DELAY_ADDRESS 1
#define USB_DELAY_CONFIG  5

/* DeviceFS numbers */

/* issue a control transfer with r3 pointing to the setup, r4 the data */
#define DeviceCall_USBControl       0x80000000

/* issue a control transfer with r3 pointing to the setup, r4 the data */
#define DeviceCall_USBRequest       0x80000001

typedef struct USBDeviceFSDevice USBDeviceFSDevice;

/* DeviceFS endpoint definition (passed in R8) */
typedef struct USBDeviceFSEndpoint {
    USBDeviceFSDevice*          dev;
    uint8_t                     iface;
    uint8_t                     altiface;
    USBEndpointDescriptor*      ed;
    int                         device_handle;
    char                        device_name[20];
} USBDeviceFSEndpoint;

struct USBDeviceFSDevice {
    uint8_t                     address;
    USBPortStatus               port_status;
    USBDeviceFSEndpoint         default_ep;
    USBDeviceDescriptor         dev;
    USBConfigDescriptor*        conf;
    USBInterfaceDescriptor**    ifaces;
    USBDeviceFSEndpoint**       eds;
    int                         default_stream;
    char                        device_name[20];
};

extern _kernel_oserror* usbd_initialise (void* pw);
extern _kernel_oserror* usbd_finalise (void* pw);

extern _kernel_oserror* reset_cb (_kernel_swi_regs* r, void* pw, void* handle);
extern _kernel_oserror* usbd_new_device (_kernel_swi_regs* r, void* pw, void* handle);
extern _kernel_oserror* usbd_device_removed (_kernel_swi_regs* r, void* pw, void* handle);
_kernel_oserror* remove_device_cb (_kernel_swi_regs* r, void* pw, void* data);

#endif
