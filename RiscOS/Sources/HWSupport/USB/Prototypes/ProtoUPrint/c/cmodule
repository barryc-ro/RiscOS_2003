#include "modhead.h"
#include "USB/OHCI.h"
#include "swis.h"
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "debuglib/debuglib.h"
#include <stdlib.h>
#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "Global/UpCall.h"
#include "Interface/DeviceFS.h"
#include "callx/callx.h"
#include "devicefs.h"
#include "cmodule.h"

#define NOTUSED(V) ((V)=(V))


#define USB_DELAY_RESET   20
#define USB_DELAY_ADDRESS 1
#define USB_DELAY_CONFIG  1


#ifdef EMULATE
#define OHCIEmulator_GetBus             0x054a80
#define OHCIEmulator_ClaimDeviceVector  0x054a81
#define OHCIEmulator_ReleaseDeviceVector  0x054a82
#define OHCIEmulator_ReadWord           0x054a83
#define OHCIEmulator_WriteWord          0x054a84
#define OREAD(ADDRESS,VALUE) \
_swix (OHCIEmulator_ReadWord, _IN(0) | _OUT(1), ADDRESS, VALUE)

#define OWRITE(ADDRESS,VALUE) \
_swix (OHCIEmulator_WriteWord, _INR(0,1), ADDRESS, VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OHCIEmulator_ClaimDeviceVector, _INR(1,2), FUNCTION, WS)

#define RELEASE(FUNCTION,WS) \
_swix (OHCIEmulator_ReleaseDeviceVector, _INR(1,2), FUNCTION, WS)

#else
static int* const ohci_base = (int*) 0xf99f6000;
#define OREAD(ADDRESS,VALUE) (*VALUE = ohci_base[ADDRESS / 4])
#define OWRITE(ADDRESS,VALUE) (ohci_base[ADDRESS / 4] = (int) VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OS_ClaimDeviceVector, _INR(0,2), 34, FUNCTION, WS); \
_swix (OS_Hardware, _IN(0) | _INR(8,9), 34, 0, EntryNo_HAL_IRQEnable)

#define RELEASE(FUNCTION,WS) \
_swix (OS_ReleaseDeviceVector, _INR(0,2), 34, FUNCTION, WS)
#endif

static volatile int sofs = 0;
static volatile int wdh = 0;
static volatile int rhsc = 0;
static volatile int overrun = 0;
static volatile int data_received = 0;
static volatile int request_complete = 0;
Stream InputStream, OutputStream;

/* host controller communications area must be 256 byte aligned */
static OHCI_Hcca hcca[2];
static OHCI_Hcca* hccap;

/* we'll need 4 endpoints and transfer descriptors */
static OHCI_ED ed[5];
static OHCI_ED* edp;
static OHCI_TD td[7];
static OHCI_TD* tdp;
static void* tda[6]; /* physical addresses */

/* transfer descriptor data */

static struct usbRequest {
    uint8_t     requestType;
    uint8_t     request;
    uint16_t    value;
    uint16_t    index;
    uint16_t    length;
} setAddress = { 0, 5, 1, 0, 0 },
  setConfig = { 0, 9, 1, 0, 0 },
  devDesc = { 0x80, 6, 0x100, 0, 8},
  confDesc = { 0x80, 6, 0x200, 0, 8};

typedef struct {
    uint8_t     length;
    uint8_t     type;
    uint16_t    specRelease;
    uint8_t     devclass;
    uint8_t     devsubclass;
    uint8_t     protocol;
    uint8_t     maxPacketSize;
    uint16_t    vendor;
    uint16_t    product;
    uint16_t    release;
    uint8_t     manufacturer_string;
    uint8_t     product_string;
    uint8_t     serial_string;
    uint8_t     num_configs;
} DeviceDescriptor;

static DeviceDescriptor device_descriptor;

typedef struct {
    uint8_t     length;
    uint8_t     type;
    uint16_t    totalLength;
    uint8_t     numInterfaces;
    uint8_t     configurationValue;
    uint8_t     config_string;
    uint8_t     attributes;
    uint8_t     maxPower;
} ConfigDescriptor;

typedef struct {
    uint8_t     length;
    uint8_t     type;
    uint8_t     number;
    uint8_t     alternateSetting;
    uint8_t     numEndpoints;
    uint8_t     devclass;
    uint8_t     devsubClass;
    uint8_t     protocol;
    uint8_t     interface_string;
} InterfaceDescriptor;

typedef struct {
    uint8_t     length;
    uint8_t     type;
    uint8_t     address;
    uint8_t     attributes;
    uint16_t    maxPacketSize;
    uint8_t     interval;
} EndpointDescriptor;

static ConfigDescriptor* config_descriptor = 0;

static char* name = "USB";
static struct {
    devicefs_device dev;
    int null;
} dev;

static int driver_handle;

void (*BuffManService)(void);
void *BuffManWS;

static enum state {
    port_detached,
    port_attached,
    port_powered,
    port_default,
    port_address,
    port_devdesc_size,
    port_devdesc_read,
    port_confdesc_size,
    port_confdesc_read,
    port_configured,
    port_MAX_STATE
} port_state = port_detached;

static char* port_state_str[port_MAX_STATE] =
{
    "Port Detached",
    "Port Attached",
    "Port Powered",
    "Port Default",
    "Port Address",
    "Port Devdesc size",
    "Port Devdesc read",
    "Port Confdesc size",
    "Port Confdesc read",
    "Port Configured",
};

static char* completion_codes[16] =
{
    "NoError (0)",
    "CRC (1)",
    "BitStuffing (2)",
    "DataToggleMismatch (3)",
    "Stall (4)",
    "DeviceNotResponding (5)",
    "PIDCheckFailure (6)",
    "UnexpectedPID (7)",
    "DataOverRun (8)",
    "DataUnderrun (9)",
    "Reserved (10)",
    "Reserved (11)",
    "BufferOverrun (12)",
    "BufferUnderrun (13)",
    "Not Accessed (14)",
    "Not Accessed (15)"
};

static void* vtophys (void* v)
{
#ifdef EMULATE
    return v;
#else
    struct {
        uint32_t    page;
        void*       logical;
        void*       physical;
    } block;
    block.logical = v;

    _swix (OS_Memory,

        _INR (0, 2),

        (1<<9) | (1<<13) | (2<<14),
        &block,
        1
        );


    return block.physical;
#endif
}

static void initialise_descriptors (void)
{
    /* endpoint[0] is for the input data */
    InputStream.ed = &edp[0];
    edp[0].functionAddress = 1;
    edp[0].endpointNumber = 1;
    edp[0].direction = 2;
    edp[0].speed = 0;
    edp[0].skip = 1;
    edp[0].format = 0;
    edp[0].maxPacketSize = 64;
    edp[0].tailPointer = 0;
    InputStream.tda =
        (uintptr_t) (edp[0].head.pointer.normal = tda[0] = vtophys (&tdp[0]));
    edp[0].nextED = vtophys(&edp[3]);

    InputStream.td = &tdp[0];
    tdp[0].bufferRounding = 1;
    tdp[0].direction = 2;
    tdp[0].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[0].nextTD = 0;
    tdp[0].currentBuffer = 0;
    tdp[0].bufferEnd = 0;

    /* endpoint [3] is for the output data */
    OutputStream.ed = &edp[3];
    edp[3] = edp[0];
    edp[3].endpointNumber = 1;
    edp[3].direction = 1;
    OutputStream.tda =
        (uintptr_t) (edp[3].head.pointer.normal = tda[5] = vtophys (&tdp[5]));
    edp[3].nextED = 0;

    OutputStream.td = &tdp[5];
    tdp[5] = tdp[0];
    tdp[5].direction = 1;

    /* endpoint[1] is for the setting of address */
    edp[1].functionAddress = 0;
    edp[1].endpointNumber = 0;
    edp[1].direction = 0;
    edp[1].speed = 0;
    edp[1].skip = 1;
    edp[1].format = 0;
    edp[1].maxPacketSize = 8;
    edp[1].tailPointer = 0;
    edp[1].head.pointer.normal = tda[1] = vtophys (&tdp[1]);
    edp[1].nextED = vtophys (&edp[2]);

    tdp[1].bufferRounding = 1;
    tdp[1].direction = 0;
    tdp[1].dataToggle = 2; /* force DATA0 */
    tdp[1].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[1].nextTD = vtophys (&tdp[3]);
//    tdp[1].nextTD = 0;
    tdp[1].currentBuffer = vtophys (&setAddress);
    tdp[1].bufferEnd = (char*) tdp[1].currentBuffer + sizeof setAddress - 1;

    /* endpoint[2] is for the setting of configuration */
    edp[2].functionAddress = 1;
    edp[2].endpointNumber = 0;
    edp[2].direction = 0;
    edp[2].speed = 0;
    edp[2].skip = 1;
    edp[2].format = 0;
    edp[2].maxPacketSize = 8;
    edp[2].tailPointer = 0;
    edp[2].head.pointer.normal = tda[2] = vtophys (&tdp[2]);
    edp[2].nextED = 0;

    tdp[2].bufferRounding = 1;
    tdp[2].direction = 0;
    tdp[2].dataToggle = 2; /* force DATA0 */
    tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[2].nextTD = tda[3] = vtophys (&tdp[3]);
    tdp[2].currentBuffer = vtophys (&setConfig);
    tdp[2].bufferEnd = (char*) tdp[2].currentBuffer + sizeof setConfig - 1;

    /* termination for request transfers */
    tdp[3].bufferRounding = 1;
    tdp[3].direction = 2;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].nextTD = 0;
    tdp[3].currentBuffer = (char*) 1;
    tdp[3].bufferEnd = 0;
}

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
    uint32_t w;

    /* set up debugging */
    debug_initialise (Module_Title, "", "");
    debug_set_device(FILE_OUTPUT);
    debug_set_unbuffered_files (TRUE);

    dprintf (("Module", "Starting Module\n"));

    callx_init (pw);

    /* Reset the controller, put it into operational mode, and turn on global
    power */
    OWRITE(OHCI_COMMAND_STATUS, OHCI_HCR);
    OWRITE(OHCI_CONTROL, OHCI_HCFS_OPERATIONAL);
    OWRITE(OHCI_RH_STATUS, OHCI_LPSC);

    /* disable all list processing */
    OREAD(OHCI_CONTROL, &w);
    OWRITE(OHCI_CONTROL, w & ~(OHCI_PLE | OHCI_CLE | OHCI_BLE));

    /* HCCA must be 256 byte aligned */
    hccap = (OHCI_Hcca*) (((uintptr_t) &hcca[1]) & ~0xff);
    edp = (OHCI_ED*) (((uintptr_t) &ed[1]) & ~0xf);
    tdp = (OHCI_TD*) (((uintptr_t) &td[1]) & ~0xf);

    memset (hccap, 0, sizeof *hccap);
    memset (&ed[0], 0, sizeof ed);
    memset (&td[0], 0, sizeof td);

    OWRITE(OHCI_HCCA, vtophys (hccap));

    initialise_descriptors ();

    OWRITE(OHCI_CONTROL_HEAD_ED, vtophys (&edp[1]));
    OWRITE(OHCI_BULK_HEAD_ED, vtophys (&edp[0]));

    OREAD(OHCI_FM_INTERVAL, &w);
    OWRITE(OHCI_FM_INTERVAL,
        (w & 0xffff) |                  /* the frame interval */
        (1024 << 16) |                  /* fs largest data packet */
        (w & ~(1u << 31)) ^ (1u << 31)    /* frame interval toggle */
        );

    /* enable periodic list processing */
    OREAD(OHCI_CONTROL, &w);
    OWRITE(OHCI_CONTROL, w | OHCI_CLE | OHCI_BLE);

    OWRITE(OHCI_INTERRUPT_DISABLE, OHCI_ALL_INTRS);
    OWRITE(OHCI_INTERRUPT_ENABLE, OHCI_MIE | OHCI_WDH | OHCI_RHSC);

    CLAIM(usb_irq_entry, pw);

    callx_add_callafter (USB_DELAY_RESET, reset_cb, 0);

    memset (&dev, 0, sizeof dev);
    dev.dev.name_offset = name - (char*) &dev;
    dev.dev.flags = 1;
    dev.dev.tx_flags = 0x0;
    dev.dev.tx_buffer_size = 1024;
    dev.dev.rx_flags = 0x0;
    dev.dev.rx_buffer_size = 1024;

    return 0;

    NOTUSED(podule_base);
    NOTUSED(cmd_tail);
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    RELEASE(usb_irq_entry, pw);

    OWRITE(OHCI_CONTROL, 0);
    OWRITE(OHCI_HCCA, 0);
    OWRITE(OHCI_CONTROL_HEAD_ED, 0);
    OWRITE(OHCI_BULK_HEAD_ED, 0);


    callx_remove_all_callbacks ();

    if (driver_handle) _swix (DeviceFS_Deregister, _IN (0), driver_handle);

    if (config_descriptor != 0) free (config_descriptor);

    return 0;

    NOTUSED(podule);
    NOTUSED(fatal);
}


_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    clock_t t;
    int w;
    short* ptr = (short*) strtoul (arg_string, 0, 16);
    OHCI_ED** edpp;
    switch (cmd_no) {
    case CMD_USBStatus:
        printf ("Write back done head   : %d\n", wdh);
        printf ("Start of frames        : %d\n", sofs);
        printf ("Root hub status change : %d\n", rhsc);
        printf ("Input     condition    : %s\n", completion_codes[tdp[0].conditionCode]);
        printf ("Address condition      : %s\n", completion_codes[tdp[1].conditionCode]);
        printf ("Config  condition      : %s\n", completion_codes[tdp[2].conditionCode]);
        printf ("Status condition       : %s\n", completion_codes[tdp[3].conditionCode]);
        printf ("Request condition      : %s\n", completion_codes[tdp[4].conditionCode]);
        printf ("Data received          : %d\n", data_received);
        printf ("Overruns               : %d\n", overrun);
        printf ("Transfers              : %8p\n", tdp);
        printf ("Port status            : %s\n", port_state_str[port_state]);
        break;
    case CMD_USBIntr:
        edpp = hccap->interruptTable + atoi (arg_string);
        *edpp = *edpp? 0: vtophys (edp);
        break;
    case CMD_USBStart:
        break;
    case CMD_USBAddress:
        set_address_cb (0,0,0);
        break;
    case CMD_USBConfig:
        set_config_cb (0,0,0);
        break;
    case CMD_USBDevice:
        new_device_cb (0,0,0);
        break;
    case CMD_USBRequest:
        request_complete = 0;
        edp[2].head.pointer.normal = tda[2];
        edp[2].skip = 0;

        tdp[2].nextTD = tda[4] = vtophys (&tdp[4]);
        tdp[2].currentBuffer = vtophys (ptr);
        tdp[2].bufferEnd = tdp[2].currentBuffer + 7;
        tdp[2].dataToggle = 2; /* force DATA0 */
        tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
        tdp[2].errorCount = 0;

        tdp[4].direction = (ptr[0] & 0x80)? 2: 1;
        tdp[4].dataToggle = 3; /* force DATA1 */
        tdp[4].conditionCode = OHCI_CC_NOT_ACCESSED;
        tdp[4].nextTD = tda[3];
        tdp[4].currentBuffer = vtophys (ptr + 8);
        /* we have to convert again as we might not be on the same physical
        page */
        tdp[4].bufferEnd = vtophys ((char*) ptr + 16 + ptr[3] - 1);

        tdp[3].nextTD = 0;
        tdp[3].direction = (ptr[0] & 0x80)? 1: 2;
        tdp[3].dataToggle = 3; /* force DATA1 */
        tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
        tdp[3].errorCount = 0;
        OREAD(OHCI_COMMAND_STATUS, &w);
        OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);
        t = clock();
        printf ("About to send %d bytes from %p\n", ptr[3], ptr);
        while (request_complete == 0 && clock () - t < 50)
            _swix (OS_UpCall, _INR(0,1), UpCall_Sleep, &request_complete);
        if (request_complete == 0) puts ("Request failed");
        if (tdp[3].conditionCode != OHCI_CC_NO_ERROR)
            printf ("Request failed, completion code %d\n",
                tdp[3].conditionCode);
        break;

   }

    return 0;

    NOTUSED(pw);
    NOTUSED(argc);
}

_kernel_oserror* new_device_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    if (driver_handle != 0) return 0;

    return _swix (DeviceFS_Register, _INR (0, 7) | _OUT(0),
        0, &dev, driver_entry, pw, pw, 0, 1, 1,
        &driver_handle);

    NOTUSED(data);
    NOTUSED(r);
}

_kernel_oserror* remove_device_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    if (driver_handle == 0) return 0;
    _swix (DeviceFS_Deregister, _IN (0), driver_handle);
    driver_handle = 0;

    return 0;

    NOTUSED(pw);
    NOTUSED(data);
    NOTUSED(r);
}

_kernel_oserror* reset_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    OWRITE(OHCI_RH_PORT_STATUS(1), UPS_RESET);
    return 0;

    NOTUSED(data);
    NOTUSED(pw);
    NOTUSED(r);
}

_kernel_oserror* set_config_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    int w;
    dprintf(("", "Setting config\n"));
    edp[2].head.pointer.normal = tda[2];
    edp[2].skip = 0;

    tdp[2].nextTD = tda[3];
    tdp[2].currentBuffer = vtophys (&setConfig);
    tdp[2].bufferEnd = vtophys ((char*) (&setConfig) + 7);
    tdp[2].dataToggle = 2; /* force DATA0 */
    tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[2].errorCount = 0;

    tdp[3].nextTD = 0;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].errorCount = 0;
    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);

    return 0;

    NOTUSED(data);
    NOTUSED(pw);
    NOTUSED(r);
}

static void do_request (struct usbRequest* req, char* data)
{
    int w;
    dprintf(("","Executing request\n"));
    edp[2].head.pointer.normal = tda[2];
    edp[2].skip = 0;

    tdp[2].nextTD = tda[4] = vtophys (&tdp[4]);
    tdp[2].currentBuffer = vtophys (req);
    tdp[2].bufferEnd = vtophys (((char*)(req) + 7));
    tdp[2].dataToggle = 2; /* force DATA0 */
    tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[2].errorCount = 0;

    tdp[4].direction = (req->requestType & 0x80)? 2: 1;
    tdp[4].dataToggle = 3; /* force DATA1 */
    tdp[4].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[4].nextTD = tda[3];
    tdp[4].currentBuffer = vtophys (data);
    /* we have to convert again as we might not be on the same physical
    page */
    tdp[4].bufferEnd = vtophys (data + req->length - 1);

    tdp[3].nextTD = 0;
    tdp[3].direction = 3 - tdp[4].direction;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].errorCount = 0;
    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);
}

_kernel_oserror* set_address_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    int w;
    dprintf(("", "Setting address\n"));

    edp[1].head.pointer.normal = tda[1];
    edp[1].skip = 0;

    tdp[1].nextTD = tda[3];
    tdp[1].currentBuffer = vtophys (&setAddress);
    tdp[1].bufferEnd = vtophys ((char*) (&setAddress) + 7);
    tdp[1].dataToggle = 2; /* force DATA0 */
    tdp[1].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[1].errorCount = 0;

    tdp[3].nextTD = 0;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].errorCount = 0;
    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);
    return 0;

    NOTUSED(data);
    NOTUSED(pw);
    NOTUSED(r);
}

static void update_input (Stream* str) {
    int start, end, insert, remove, free, used, w;
    _kernel_swi_regs r;
    OHCI_TD* td = str->td;
    OHCI_ED* ed = str->ed;

    /* when a transfer descriptor is retired, the buffer should be
    updated to reflect that the new data has arrived, and the
    buffer pointer should be incremented to the next chunk of data
    in the buffer */
    r.r[0] = BM_InsertBlock;
    r.r[1] = str->buffer_privid;
    r.r[2] = (int) (str->buffer_start + str->buffer_insertion);

    /* if the transfer completed then currentBuffer will be zero */
    if (td->currentBuffer == 0)
        r.r[3] = (int) (td->bufferEnd - (int) vtophys ((char*) r.r[2])) + 1;
    else
        r.r[3] = (int) (td->currentBuffer - (int) vtophys ((char*) r.r[2]));

    CallBufMan(&r);

    /* this is a problem as Buffer_Info isn't reentrant */
    _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,6),

        str->buffer,

        &start,
        &end,
        &insert,
        &remove,
        &free,
        &used);

    /* we only set up another transfer if there's some space in the buffer */
    if (free != 0) {
        /* We obviously set the buffer current pointer to the insertion point */
        td->currentBuffer = (char*) vtophys ((char*) (start + insert));

        /* we need to set the end of the transfer descriptor, this will be the
        end of the buffer, if removal point is before the insert, or the
        removal point if it is after the insert. */
        td->bufferEnd = (remove < insert)?
            (char*) vtophys ((char*) (end - 1)):
            (char*) vtophys ((char*) (remove - 1));

        /* refresh the descriptor */
        td->conditionCode = OHCI_CC_NOT_ACCESSED;

        /* rehook the transfer */
        ed->tailPointer = 0;
        ed->head.pointer.normal = (void*) str->tda;

        /* keep track of insertion point */
        str->buffer_insertion = insert;

        /* notify the controller that there's more data */
        OREAD(OHCI_COMMAND_STATUS, &w);
        OWRITE(OHCI_COMMAND_STATUS, w | OHCI_BLF);
    }
}

int count = 0;

/* returns - 1 of output produced, 0 if not */
static int update_output (Stream* str, int flush) {
    /* when an output transfer descriptor has been retired, we must
    inform the buffer manager that we've removed the data */
    _kernel_swi_regs r;
    int w;
    OHCI_TD* td = str->td;
    OHCI_ED* ed = str->ed;

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = str->buffer_privid;

    /* if the last transfer succeeded then current buffer is zero */
    r.r[3] = str->buffer_insertion;

    count += r.r[3];

    dprintf (("", "About to purge %d bytes, total %d bytes\n", r.r[3], count));


    CallBufMan(&r);

    dprintf(("", "There are %d bytes in the next block\n", r.r[3]));

    /* if we're flushing the stream, we don't care how many bytes are in the
    transfer, else we have to ensure the right size */
    if (flush && r.r[3] != 0) {
        str->buffer_insertion = r.r[3];
    } else {
        /* remember how many bytes we inserted */
        str->buffer_insertion = r.r[3] - r.r[3] % (str->ed->maxPacketSize);

        /* Only set up another transfer if there's more data */
        if (str->buffer_insertion == 0) return 0;
    }

    dprintf(("", "Setting up output transfer for %d bytes from %x\n",
        str->buffer_insertion, r.r[2]));

    td->currentBuffer = (char*) vtophys ((char*) r.r[2]);
    td->bufferEnd = (char*)
        vtophys ((char*) r.r[2] + str->buffer_insertion - 1);

    /* refresh the descriptor */
    td->conditionCode = OHCI_CC_NOT_ACCESSED;
    td->dataToggle = 0;

    /* rehook the transfer */
    ed->tailPointer = 0;
    if (ed->head.flags.toggleCarry) {
        ed->head.pointer.normal = tda[5];
        ed->head.flags.toggleCarry = 1;
    } else
        ed->head.pointer.normal = tda[5];

    ed->skip = 0;

    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_BLF);
    return 1;
}

static void read_device_descriptor (DeviceDescriptor* d) {
    dprintf(("Descriptor",
             "USB release     : %x\n"
             "Device class    : %d\n"
             "Device subclass : %d\n"
             "Device protocol : %d\n"
             "Max packet size : %d\n"
             "Vendor          : %x\n"
             "Product         : %d\n"
             "Release         : %d\n"
             "Manufacturer    : %d\n"
             "Product         : %d\n"
             "Serial number   : %d\n"
             "Num configs     : %d\n",
             d->specRelease,
             d->devclass,
             d->devsubclass,
             d->protocol,
             d->maxPacketSize,
             d->vendor,
             d->product,
             d->release,
             d->manufacturer_string,
             d->product_string,
             d->serial_string,
             d->num_configs));
}

static void read_config_descriptor (ConfigDescriptor* c) {
    int i, j;
    char* p = (char*) c;
    InterfaceDescriptor* in;
    EndpointDescriptor* en;
    dprintf(("Descriptor",
        "Total length      : %d\n"
        "Num interfaces    : %d\n"
        "Config value      : %d\n"
        "Config name       : %d\n"
        "Attributes        : %d\n"
        "Max power         : %dmA\n\n",
        c->totalLength,
        c->numInterfaces,
        c->configurationValue,
        c->config_string,
        c->attributes,
        c->maxPower * 2));
    p += c->length;
    for (i = 0; i < c->numInterfaces; ++i) {
        in = (InterfaceDescriptor*) p;
        p += in->length;
        dprintf(("Descriptor",
            "Interface Number  : %d\n"
            "Alternate setting : %d\n"
            "Num endpoints     : %d\n"
            "Interface class   : %d\n"
            "Interface subclass: %d\n"
            "Interface protocol: %d\n"
            "String            : %d\n\n",
            in->number,
            in->alternateSetting,
            in->numEndpoints,
            in->devclass,
            in->devsubClass,
            in->protocol,
            in->interface_string));

        for (j = 0; j < in->numEndpoints; ++j) {
            en = (EndpointDescriptor*) p;
            p += en->length;

            if (en->address & 0x80) {
                InputStream.ed->endpointNumber = en->address & 0xf;
                InputStream.ed->maxPacketSize = en->maxPacketSize;
                dprintf (("", "Setting input endpoint\n"));
            } else {
                OutputStream.ed->endpointNumber = en->address & 0xf;
                OutputStream.ed->maxPacketSize = en->maxPacketSize;
                dprintf (("", "Setting output endpoint\n"));
            }
            dprintf(("Descriptor",
                "Address           : %d %s\n"
                "Attributes        : %x\n"
                "Max packet size   : %d\n"
                "Interval          : %d\n\n",
                en->address & 0xf,
                en->address & 0x80? "In": "Out",
                en->attributes,
                en->maxPacketSize,
                en->interval));
        }
    }
}

_kernel_oserror *usb_irq_handler(_kernel_swi_regs *r, void *pw)
{
    int w;
    OREAD(OHCI_INTERRUPT_STATUS, &w);

    if (w & OHCI_WDH) {
        OHCI_TD* dh = hccap->donehead.pointer;

        /* we have to clear the bottom bit of the RDH because it signifies
        that there are other interrupts */
        dh = (OHCI_TD*) ((int) dh & ~1);

        wdh++;
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_WDH);
        dprintf(("", "writeback done\n"));
        switch (port_state) {

        case port_default:
                port_state = port_address;
                /* configure device */
                callx_add_callafter (USB_DELAY_CONFIG, set_config_cb, 0);
            break;

        case port_address:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR) {
                port_state = port_devdesc_size;
                edp[2].maxPacketSize = 8;
                devDesc.length = 8;
                do_request (&devDesc, (char*) &device_descriptor);
            }
            break;

        case port_devdesc_size:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR) {
                port_state = port_devdesc_read;

                edp[2].maxPacketSize = device_descriptor.maxPacketSize;
                /* don't allow silly packet sizes */
                if (edp[2].maxPacketSize == 0) edp[2].maxPacketSize = 8;

                devDesc.length = device_descriptor.length;
                do_request (&devDesc, (char*) &device_descriptor);
            }
            break;

        case port_devdesc_read:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR) {
                read_device_descriptor (&device_descriptor);

                /* read first 8 bytes of configuration descriptor */
                port_state = port_confdesc_size;
                confDesc.length = 8;
                if (config_descriptor != 0) free (config_descriptor);
                config_descriptor = malloc (8);
                do_request (&confDesc, (char*) config_descriptor);
            }
            break;

        case port_confdesc_size:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR) {

                /* now read the descriptor */
                port_state = port_confdesc_read;
                confDesc.length = config_descriptor->totalLength;
                config_descriptor =
                    realloc (config_descriptor, config_descriptor->totalLength);
                do_request (&confDesc, (char*) config_descriptor);
            }
            break;

        case port_confdesc_read:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR) {
                read_config_descriptor (config_descriptor);

                port_state = port_configured;
                /* create our devicefs entries */
                callx_add_callback (new_device_cb, 0);
            }
            break;

        case port_configured:

            /* transfer 0 is for the input */
            if (dh == tda[0] || (dh == tda[2] && tdp[2].nextTD == tda[0]))
                update_input (&InputStream);

            /* transfer 5 is for the output */
            if (dh == tda[5] || (dh == tda[2] && tdp[2].nextTD == tda[5])) {
                if (tdp[5].conditionCode == OHCI_CC_NO_ERROR) {
                    /* if no output was produced, then we must become dormant */
                    if (update_output (&OutputStream, 1) == 0)
                        _swix (Buffer_ModifyFlags, _INR(0,2),
                            OutputStream.buffer,
                            0,
                            ~1);
                } else
                    dprintf(("", "Output failed, condition code %s",
                        completion_codes[tdp[5].conditionCode]));
            }

            /* transfer 3 is for the *usbrequest (or LEDs), status complete */
            if (dh == tda[3] || (dh == tda[0] && tdp[0].nextTD == tda[3]))
                request_complete = 1;

            break;
        }
    }

    if (w & OHCI_RHSC) {
        int w;

        /* find out what's happened */
        OREAD(OHCI_RH_PORT_STATUS(1), &w);

        /* turn off the interrupt in case we cause any more */
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_RHSC);

        /* Reset port (to enable it) if we've connected */
        if (w & UPS_C_CONNECT_STATUS) {
            if (w & UPS_CURRENT_CONNECT_STATUS) {
                dprintf(("", "Device connected\n"));
                port_state = port_powered;
                callx_add_callafter (USB_DELAY_RESET, reset_cb, 0);
            } else {
                dprintf(("","Device disconnected\n"));
                port_state = port_detached;
            }

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_CONNECT_STATUS);
        }


        /* Once we've finished resetting, address it */
        if (w & UPS_C_PORT_RESET) {// && (w & UPS_RESET == 0)) {
            dprintf(("", "Port has reset, now addressing\n"));
            initialise_descriptors ();
            port_state = port_default;
            callx_add_callafter (USB_DELAY_ADDRESS, set_address_cb, 0);

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_PORT_RESET);
        }

        rhsc++;
    }

    if (w & OHCI_SF) {
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SF);
        sofs++;
    }

    if (w & OHCI_SO) {
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SO);
        overrun++;
    }

    return 0;

    NOTUSED(pw);
    NOTUSED(r);
}

_kernel_oserror* driver (_kernel_swi_regs* r, void* pw)
{
    int w;
    Stream* str = (Stream*) r->r[2];
    NOTUSED(pw);
    switch (r->r[0]) {
    case DeviceCall_Initialise:
        count = 0;
        /* in, is in to the host, out is out from the host */
        if (r->r[3] & devicefs_OPEN_FOR_TX) {
            OutputStream.devicefs_stream = r->r[2];
            r->r[2] = (int) &OutputStream;
        } else {
            InputStream.devicefs_stream = r->r[2];
            r->r[2] = (int) &InputStream;
        }
        break;

    case DeviceCall_Finalise:
        /* clear our devices */
        if (str == 0) {
            memset (&InputStream, 0, sizeof InputStream);
            memset (&OutputStream, 0, sizeof OutputStream);
        } else {
            str->buffer = 0;
        }
        break;

    case DeviceCall_WakeUpTX:
        /* if no output was produced, then we return that we wich to remain
        dormant */
        if (update_output (str, 1) == 0) r->r[0] = 0;
        break;
    case DeviceCall_WakeUpRX:
        break;
    case DeviceCall_SleepRX:
    case DeviceCall_EnumDir:
    case DeviceCall_CreateBufferTX:
    case DeviceCall_CreateBufferRX:
    case DeviceCall_Halt:
    case DeviceCall_Resume:
    case DeviceCall_EndOfData:
        break;
    case DeviceCall_StreamCreated: {
        int end;
        /* record the buffer and find it's private id */
        str->buffer =  r->r[3];
        _swix (Buffer_InternalInfo, _IN(0)|_OUTR(0,2),

             r->r[3],

             &str->buffer_privid,
             &BuffManService,
             &BuffManWS);

        /* we need to know this about the buffer so that we can sort out the
        TD buffer */
        _swix (Buffer_GetInfo, _IN(0)|_OUTR(1,3),

            r->r[3],

            &str->buffer_start,
            &end,
            &str->buffer_insertion);

        tdp[0].currentBuffer = vtophys (str->buffer_start);

        /* only if less than 8k away */
        tdp[0].bufferEnd = vtophys ((char*) (end - 1));


        if (str == &InputStream) {
            OREAD(OHCI_COMMAND_STATUS, &w);
            OWRITE(OHCI_COMMAND_STATUS, w | OHCI_BLF);
            str->ed->skip = 0;
        }
        } break;
    case DeviceCall_MonitorTX:
        break;

    }

    return 0;
}
