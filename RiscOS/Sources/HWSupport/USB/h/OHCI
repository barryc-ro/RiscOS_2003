#if !defined(OHCI_H) /* file used if not already included */
#define OHCI_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Daniel R Ellis
* Project(s): Next Generation (331)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Data structures pertinent to the Open Host Controller
*           Interface, as specified in OpenHCI release 1.0a available from
*           http://www.compaq.com/productinfo/development/openhci.html
*
*           Note that these data structures are ARM architecture dependant,
*           i.e. 32-bit little endian
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/

#include <stdint.h>
typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
#include "NetBSD/dev/usb/ohcireg.h"

/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/* Isochronous transfer descriptor */
typedef struct OHCI_IsoTD {
    unsigned int    startFrame:16;      /* Frame in which to send */
    unsigned int    :5;
    unsigned int    delayInterrupt:3;   /* HC may wait this many frames */
    unsigned int    frameCount:3;       /* number of packets in this TD - 1 */
    unsigned int    :1;
    unsigned int    conditionCode:4;    /* Status of last transaction */
    char*           bufferPage0;        /* bottom 12 bits zero */
    struct OHCI_IsoTD*  nextTD;         /* the next transfer descriptor */
    char*           bufferEnd;          /* the end of the buffer */
    unsigned short  offset[8];          /* buffer offsets for transfers */
} OHCI_IsoTD;

/* General transfer descriptor */
typedef struct OHCI_TD {
    int             :18;
    unsigned int    bufferRounding:1;   /* 1=> don't error unfilled buffer */
    unsigned int    direction:2;        /* SETUP/OUT/IN/reserved */
    unsigned int    delayInterrupt:3;   /* HC may wait this many frames */
    unsigned int    dataToggle:2;       /* for PID DATA0/DATA1 */
    unsigned int    errorCount:2;       /* incremented before recording */
    unsigned int    conditionCode:4;    /* Status of last transaction */
    char*           currentBuffer;      /* next transfer memory location */
    struct OHCI_TD* nextTD;             /* the next transfer descriptor */
    char*           bufferEnd;          /* the end of the buffer */
} OHCI_TD;

/* Endpoint descriptor */
typedef struct OHCI_ED {
    unsigned int    functionAddress:7;  /* USB address of function */
    unsigned int    endpointNumber:4;   /* Address within function */
    unsigned int    direction:2;        /* 00,11=>TD, 01 OUT, 10 IN */
    unsigned int    speed:1;            /* 0 full, 1 low */
    unsigned int    skip:1;             /* skip this endpoint */
    unsigned int    format:1;           /* 1 => isochronous */
    unsigned int    maxPacketSize:11;   /* max bytes in a single packet */
    unsigned int    :5;
    OHCI_TD*        tailPointer;        /* end of TD list */
    union {
        union {
            OHCI_TD*        normal;     /* next TD to process on list */
            OHCI_IsoTD*     iso;        /* next TD to process on list */
        } pointer;
        struct {
            unsigned int    halted:1;       /* set if halted (error) */
            unsigned int    toggleCarry:1;  /* LSb of TD data Toggle field */
        } flags;
    } head;
    struct OHCI_ED* nextED;             /* next endpoint */
} OHCI_ED;

/* The Host Controller Communications Area */
#define OHCI_NUM_INTERRUPTS 32
typedef struct OHCI_Hcca {
    OHCI_ED*        interruptTable[OHCI_NUM_INTERRUPTS]; /* Table of interrupt EDs */
    unsigned short  frameNumber;        /* updated before processing */
    unsigned short  pad1;               /* zeroed upon frameNumber Update */
    union {
        OHCI_TD*        pointer;        /* current value of hcdone head */
        unsigned int    flag:1;         /* other interrupts also set */
    } donehead;
    unsigned char   reserved[116];
} OHCI_Hcca;

/* These are the registers of the OHCI controller */
typedef struct OHCI_Registers {
    unsigned int    revision;

    struct {
        unsigned int    CBSR:2;         /* Control/Bulk service ration */
        unsigned int    PLE:1;          /* Periodic list enable */
        unsigned int    IE:1;           /* Isochronous enable */
        unsigned int    CLE:1;          /* Control list enable */
        unsigned int    BLE:1;          /* Bulk list enable */
        unsigned int    HCFS:2;         /* host controller functional state */
        unsigned int    IR:1;           /* Interrupt routing */
        unsigned int    RWC:1;          /* Remote wakeup connected */
        unsigned int    RWE:1;          /* Remote wakeup enabled */
        unsigned int    :21;
    } control;

    union {
        struct {
            unsigned int    HCR:1;          /* Host controller reset */
            unsigned int    CLF:1;          /* Control list filled */
            unsigned int    BLF:1;          /* Bulk list filled */
            unsigned int    OCR:1;          /* Ownership change request */
            unsigned int    :12;
            unsigned int    SOC:2;          /* Scheduling overrun count */
            unsigned int    :14;
        } bits;
        unsigned int word;
    } command_status;

    union {
        struct {
            unsigned int    SO:1;           /* Scheduling overrun */
            unsigned int    WDH:1;          /* Writeback done head */
            unsigned int    SF:1;           /* Start of frame */
            unsigned int    RD:1;           /* Resume detected */
            unsigned int    UE:1;           /* Unrecoverable error */
            unsigned int    FNO:1;          /* Frame number overflow */
            unsigned int    RHSC:1;         /* Root hub status changed */
            unsigned int    :22;
            unsigned int    OC:1;           /* Ownership change */
            unsigned int    MIE:1;          /* Master interrupt enable */
        } bits;
        unsigned int word;
    } status, enable, disable;

    OHCI_Hcca*      hcca;
    OHCI_ED*        period_current_ED;
    OHCI_ED*        control_head_ED;
    OHCI_ED*        control_current_ED;
    OHCI_ED*        bulk_head_ED;
    OHCI_ED*        bulk_current_ED;
    OHCI_TD*        done_head;

    struct {
        unsigned int    FI:14;          /* Frame interval in 12MHz periods */
        unsigned int    :2;
        unsigned int    FSMPS:15;       /* Scheduler max packet size */
        unsigned int    FIT:1;          /* Frame interval toggle */
    } fm_interval;

    struct {
        unsigned int    FR:14;          /* Frame remaining */
        unsigned int    :17;
        unsigned int    FRT:1;          /* Frame remaining toggle */
    } fm_remaining;

    struct {
        unsigned int    FN:14;          /* Frame number */
        unsigned int    :16;
    } fm_number;

    unsigned int    periodic_start;     /* delay before doing periodic data */
    unsigned int    ls_threshold;       /* low speed threshold */

    struct RootHub {
        unsigned int    descriptorA;
        unsigned int    descriptorB;
        unsigned int    status;
/* Allow specification of number of root hub ports by includer of this file */
#ifndef OHCI_ROOT_HUB_PORTS
#define OHCI_ROOT_HUB_PORTS 1
#endif

#define UPS_CURRENT_CONNECT_STATUS	0x00000001
#define UPS_PORT_ENABLED		0x00000002
#define UPS_SUSPEND			0x00000004
#define UPS_OVERCURRENT_INDICATOR	0x00000008
#define UPS_RESET			0x00000010
#define UPS_PORT_POWER			0x00000100
#define UPS_LOW_SPEED			0x00000200
#define UPS_C_CONNECT_STATUS		0x00010000
#define UPS_C_PORT_ENABLED		0x00020000
#define UPS_C_SUSPEND			0x00040000
#define UPS_C_OVERCURRENT_INDICATOR	0x00080000
#define UPS_C_PORT_RESET		0x00100000
        union {
            struct {
                int CCS:1;          /* Current connect status & ClearPortEnable */
                int PES:1;          /* Port enable status & SetPortEnable */
                int PSS:1;          /* port suspend status & SetPortSuspend */
                int POCI:1;         /* port over current & ClearPortSuspend */
                int PRS:1;          /* port rest status & SetPortReset */
                int :3;
                int PPS:1;          /* port power status & SetPortpower */
                int LSDA:1;         /* low spd dev attach & ClearPortPower */
                int :6;
                int CSC:1;          /* connect status change */
                int PESC:1;         /* port enable status change */
                int PSSC:1;         /* port suspend status change */
                int OCIC:1;         /* port over current indicator change */
                int PRSC:1;         /* port reset status change */
                int :11;
            } bits;
            unsigned int word;
        } port_status[OHCI_ROOT_HUB_PORTS];
    } rootHub;
} OHCI_Registers;

/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* FunctionName
*
* Description of the function
*
* Assumptions
*  State any assumptions and side effects (eg. globals changed)
*
* Inputs
*  variablename: describe variable, range of inputs, etc.
*
* Outputs
*  variablename: describe variable, range of outputs, etc.
*
* Returns
*  describe possible return values, etc.
*****************************************************************************/


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
