#include "modhead.h"
#include "^.^.OHCI.h"
#include "swis.h"
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "debuglib/debuglib.h"
#include <stdlib.h>
#include "Global/RISCOS.h"
#include "Global/Keyboard.h"
#include "Global/Pointer.h"
#include "devicefs.h"
#include "Global/HALEntries.h"
#include "callx/callx.h"

#define NOTUSED(V) ((V)=(V))

#define PointerDevice_USB 7

#define USB_DELAY_RESET   20
#define USB_DELAY_ADDRESS 1
#define USB_DELAY_CONFIG  1


#ifdef EMULATE
#define OHCIEmulator_GetBus             0x054a80
#define OHCIEmulator_ClaimDeviceVector  0x054a81
#define OHCIEmulator_ReleaseDeviceVector  0x054a82
#define OHCIEmulator_ReadWord           0x054a83
#define OHCIEmulator_WriteWord          0x054a84
#define OREAD(ADDRESS,VALUE) \
_swix (OHCIEmulator_ReadWord, _IN(0) | _OUT(1), ADDRESS, VALUE)

#define OWRITE(ADDRESS,VALUE) \
_swix (OHCIEmulator_WriteWord, _INR(0,1), ADDRESS, VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OHCIEmulator_ClaimDeviceVector, _INR(1,2), FUNCTION, WS)

#define RELEASE(FUNCTION,WS) \
_swix (OHCIEmulator_ReleaseDeviceVector, _INR(1,2), FUNCTION, WS)

#else
static int* const ohci_base = (int*) 0xf99f6000;
#define OREAD(ADDRESS,VALUE) (*VALUE = ohci_base[ADDRESS / 4])
#define OWRITE(ADDRESS,VALUE) (ohci_base[ADDRESS / 4] = (int) VALUE)

#define CLAIM(FUNCTION,WS) \
_swix (OS_ClaimDeviceVector, _INR(0,2), 34, FUNCTION, WS); \
_swix (OS_Hardware, _IN(0) | _INR(8,9), 34, 0, EntryNo_HAL_IRQEnable)

#define RELEASE(FUNCTION,WS) \
_swix (OS_ReleaseDeviceVector, _INR(0,2), 34, FUNCTION, WS)
#endif

/* host controller communications area must be 256 byte aligned */
static OHCI_Hcca hcca[2];
static OHCI_Hcca* hccap;

/* we'll need 3 endpoints and transfer descriptors */
static OHCI_ED ed[4];
static OHCI_ED* edp;
static OHCI_TD td[5];
static OHCI_TD* tdp;
static void* tda[4]; /* physical addresses */

static volatile int sofs = 0;
static volatile int wdh = 0;
static volatile int rhsc = 0;
static volatile int data_received = 0;
static volatile int state = 0;
static int prev_pointer = 0;

static int relx = 0, rely = 0;
static uint8_t buttons;

_kernel_oserror* reset_cb (_kernel_swi_regs* r, void* pw, void* data);
_kernel_oserror* pointer_cb (_kernel_swi_regs* r, void* pw, void* data);
_kernel_oserror* set_address_cb (_kernel_swi_regs* r, void* pw, void* data);
_kernel_oserror* set_config_cb (_kernel_swi_regs* r, void* pw, void* data);


/* transfer descriptor data */

static struct {
    uint8_t  buttons;
    int8_t   relx;
    int8_t   rely;
    int8_t   relwheel;
} data;

static struct {
    uint8_t     requestType;
    uint8_t     request;
    uint16_t    value;
    uint16_t    index;
    uint16_t    length;
} setAddress = { 0, 5, 1, 0, 0 },
  setConfig = { 0, 9, 1, 0, 0 };

static enum state {
    port_detached,
    port_attached,
    port_powered,
    port_default,
    port_address,
    port_configured,
    port_MAX_STATE
} port_state = port_detached;

static char* port_state_str[port_MAX_STATE] =
{
    "Port Detached",
    "Port Attached",
    "Port Powered",
    "Port Default",
    "Port Address",
    "Port Configured",
};

static void* vtophys (void* v)
{
    struct {
        uint32_t    page;
        void*       logical;
        void*       physical;
    } block;
    block.logical = v;

    _swix (OS_Memory,

        _INR (0, 2),

        (1<<9) | (1<<13) | (2<<14),
        &block,
        1
        );


    return block.physical;
}

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
    int w;
    NOTUSED(cmd_tail);
    NOTUSED(podule_base);

    /* set up debugging */
    debug_initialise (Module_Title, "", "");
    debug_set_device(FILE_OUTPUT);
    debug_set_unbuffered_files (TRUE);

    dprintf (("Module", "Starting Module\n"));

    callx_init (pw);

    /* Reset the controller, put it into operational mode, and turn on global
    power */
    OWRITE(OHCI_COMMAND_STATUS, OHCI_HCR);
    OWRITE(OHCI_CONTROL, OHCI_HCFS_OPERATIONAL);
    OWRITE(OHCI_RH_STATUS, OHCI_LPSC);

    /* disable all list processing */
    OREAD(OHCI_CONTROL, &w);
    OWRITE(OHCI_CONTROL, w & ~(OHCI_PLE | OHCI_CLE | OHCI_BLE));

    /* HCCA must be 256 byte aligned */
    hccap = (OHCI_Hcca*) (((uintptr_t) &hcca[1]) & ~0xff);
    edp = (OHCI_ED*) (((uintptr_t) &ed[1]) & ~0xf);
    tdp = (OHCI_TD*) (((uintptr_t) &td[1]) & ~0xf);

    memset (hccap, 0, sizeof *hccap);
    memset (&ed[0], 0, sizeof ed);
    memset (&td[0], 0, sizeof td);

    for (w = 0; w < 32; w += 10)
        hccap->interruptTable[w] = vtophys (edp);

    OWRITE(OHCI_HCCA, vtophys (hccap));

    /* endpoint[0] is for the mouse data */
    edp[0].functionAddress = 1;
    edp[0].endpointNumber = 1;
    edp[0].direction = 2;
    edp[0].speed = 1;
    edp[0].skip = 1;
    edp[0].format = 0;
    edp[0].maxPacketSize = 8;
    edp[0].tailPointer = 0;
    edp[0].head.pointer.normal = tda[0] = vtophys (&tdp[0]);
    edp[0].nextED = 0;

    tdp[0].bufferRounding = 1;
    tdp[0].direction = 2;
    tdp[0].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[0].nextTD = 0;
    tdp[0].currentBuffer = vtophys (&data);
    tdp[0].bufferEnd = (char*) tdp[0].currentBuffer + sizeof data - 1;

    /* endpoint[1] is for the setting of address */
    edp[1].functionAddress = 0;
    edp[1].endpointNumber = 0;
    edp[1].direction = 0;
    edp[1].speed = 1;
    edp[1].skip = 1;
    edp[1].format = 0;
    edp[1].maxPacketSize = 64;
    edp[1].tailPointer = 0;
    edp[1].head.pointer.normal = tda[1] = vtophys (&tdp[1]);
    edp[1].nextED = vtophys (&edp[2]);

    tdp[1].direction = 0;
    tdp[1].dataToggle = 2; /* force DATA0 */
    tdp[1].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[1].nextTD = vtophys (&tdp[3]);
    tdp[1].currentBuffer = vtophys (&setAddress);
    tdp[1].bufferEnd = (char*) tdp[1].currentBuffer + sizeof setAddress - 1;

    /* endpoint[2] is for the setting of configuration */
    edp[2].functionAddress = 1;
    edp[2].endpointNumber = 0;
    edp[2].direction = 0;
    edp[2].speed = 1;
    edp[2].skip = 1;
    edp[2].format = 0;
    edp[2].maxPacketSize = 64;
    edp[2].tailPointer = 0;
    edp[2].head.pointer.normal = tda[2] = vtophys (&tdp[2]);
    edp[2].nextED = 0;

    tdp[2].direction = 0;
    tdp[2].dataToggle = 2; /* force DATA0 */
    tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[2].nextTD = tda[3] = vtophys (&tdp[3]);
    tdp[2].currentBuffer = vtophys (&setConfig);
    tdp[2].bufferEnd = (char*) tdp[2].currentBuffer + sizeof setConfig - 1;

    /* termination for request transfers */
    tdp[3].direction = 2;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].nextTD = 0;
    tdp[3].currentBuffer = 0;
    tdp[3].bufferEnd = 0;

    OWRITE(OHCI_CONTROL_HEAD_ED, vtophys (&edp[1]));

    CLAIM(usb_irq_entry, pw);

    _swix (OS_Claim, _INR(0,2), PointerV, pointerv_entry, pw);

    buttons = 0;

    _swix (OS_Pointer, _IN(0) | _OUT(0), 0, &prev_pointer);

    /* enable periodic list processing */
    OREAD(OHCI_CONTROL, &w);
    OWRITE(OHCI_CONTROL, w | OHCI_PLE | OHCI_CLE);

    /* enable hc interrupts */
    OWRITE(OHCI_INTERRUPT_DISABLE, OHCI_ALL_INTRS);
    OWRITE(OHCI_INTERRUPT_ENABLE, OHCI_MIE |  OHCI_WDH | OHCI_RHSC | OHCI_SF);

    return 0;
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    NOTUSED(fatal);
    NOTUSED(podule);
    _swix (OS_Release, _INR(0,2), PointerV, pointerv_entry, pw);

    RELEASE(usb_irq_entry, pw);

    callx_remove_all_callbacks ();

    return 0;
}

int pointerv (_kernel_swi_regs* r, void* pw)
{
    _kernel_oserror* e;
    NOTUSED(pw);

    switch (r->r[0]) {
    case PointerReason_Request:
        if (r->r[1] == PointerDevice_USB) {
            /* Turn off interrupts while updating */
            _kernel_irqs_off ();
            r->r[2] = relx;
            r->r[3] = rely;
            relx = rely = 0;
            _kernel_irqs_on ();
            }
        break;

#define RECORD "\x0\x0\x0\x0\x0\x0\x0\x0\x4USB Mouse"
    case PointerReason_Identify:
        e = _swix (OS_Module, _IN(0) | _IN(3) | _OUT(2), 6,
            strlen(RECORD)+1, r->r + 1);

        if (!e) strcpy ((char*) r->r[1], RECORD);
        break;

    case PointerReason_Selected:
        if (r->r[1] == PointerDevice_USB) {
            edp[0].skip = 0;
            edp[0].head.flags.halted = 0;
            tdp[0].conditionCode = OHCI_CC_NOT_ACCESSED;
            state = 1;
            dprintf (("", "USB mouse enabled\n"));
        } else {
            edp[0].skip = 1;
            state = 0;
            dprintf (("", "USB mouse disabled\n"));
        }
        break;
    }

    return 1;
}

_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    NOTUSED(arg_string);
    NOTUSED(argc);
    NOTUSED(pw);

    switch (cmd_no) {
    case CMD_USBStatus:
        printf ("Write back done head   : %d\n", wdh);
        printf ("Start of frames        : %d\n", sofs);
        printf ("Root hub status change : %d\n", rhsc);
        printf ("Interrupt condition    : %d\n", tdp[0].conditionCode);
        printf ("Address condition      : %d\n", tdp[1].conditionCode);
        printf ("Config  condition      : %d\n", tdp[2].conditionCode);
        printf ("Status condition       : %d\n", tdp[3].conditionCode);
        printf ("Data received          : %d\n", data_received);
        printf ("Transfers              : %8p\n", tdp);
        printf ("Port status            : %s\n", port_state_str[port_state]);
        break;
    case CMD_USBAddress:
        set_address_cb (0,0,0);
        break;
    case CMD_USBConfig:
        set_config_cb (0,0,0);
        break;
    }

    return 0;
}

/* Callback function to set the pointer type */
_kernel_oserror* pointer_cb (_kernel_swi_regs* r, void* pw, void* cur_pointer)
{
    NOTUSED(r);
    NOTUSED(pw);
    return _swix (OS_Pointer, _INR(0,1), 1, cur_pointer);
}

_kernel_oserror* reset_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    NOTUSED(r);
    NOTUSED(pw);
    NOTUSED(data);

    OWRITE(OHCI_RH_PORT_STATUS(1), UPS_RESET);
    return 0;
}

_kernel_oserror* set_config_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    int w;
    NOTUSED(r);
    NOTUSED(pw);
    NOTUSED(data);

    edp[2].head.pointer.normal = tda[2];
    edp[2].skip = 0;

    tdp[2].nextTD = tda[3];
    tdp[2].currentBuffer = vtophys (&setConfig);
    tdp[2].dataToggle = 2; /* force DATA0 */
    tdp[2].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[2].errorCount = 0;

    tdp[3].nextTD = 0;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].errorCount = 0;
    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);

    return 0;
}

_kernel_oserror* set_address_cb (_kernel_swi_regs* r, void* pw, void* data)
{
    int w;
    NOTUSED(r);
    NOTUSED(pw);
    NOTUSED(data);

    edp[1].head.pointer.normal = tda[1];
    edp[1].skip = 0;

    tdp[1].nextTD = tda[3];
    tdp[1].currentBuffer = vtophys (&setAddress);
    tdp[1].dataToggle = 2; /* force DATA0 */
    tdp[1].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[1].errorCount = 0;

    tdp[3].nextTD = 0;
    tdp[3].dataToggle = 3; /* force DATA1 */
    tdp[3].conditionCode = OHCI_CC_NOT_ACCESSED;
    tdp[3].errorCount = 0;
    OREAD(OHCI_COMMAND_STATUS, &w);
    OWRITE(OHCI_COMMAND_STATUS, w | OHCI_CLF);
    return 0;
}

static void read_data () {
    uint8_t change;
    relx += data.relx;
    rely -= data.rely;
    dprintf(("",
    "data.relx = %d, data.rely = %d, relx = %d, rely = %d, buttons = %x\n",
        data.relx, data.rely, relx, rely, data.buttons));
    if ((change = buttons ^ data.buttons) != 0) {
        buttons = data.buttons;
        dprintf (("", "change = %x, state = %d\n", change.byte,
            state));
        if (state == 1) {
            if (change & 1) _swix (OS_CallAVector, _INR(0,1) | _IN(9),
                1 + ((buttons & 1) == 1), KeyNo_LeftMouse, KEYV);

            if (change & 2) _swix (OS_CallAVector, _INR(0,1) | _IN(9),
                1 + ((buttons & 2) == 2), KeyNo_RightMouse, KEYV);

            if (change & 4) _swix (OS_CallAVector, _INR(0,1) | _IN(9),
                1 + ((buttons & 4) == 4), KeyNo_CentreMouse, KEYV);
        }
    }
    data_received++;
}

_kernel_oserror *usb_irq_handler(_kernel_swi_regs *r, void *pw)
{
    int w;
    NOTUSED(r);
    NOTUSED(pw);

    OREAD(OHCI_INTERRUPT_STATUS, &w);

    if (w & OHCI_WDH) {
        OHCI_TD* dh = hccap->donehead.pointer;
        wdh++;
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_WDH);
        dprintf(("", "writeback done, condition = %d\n",
            tdp[0].conditionCode));
        switch (port_state) {
        case port_default:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR &&
                port_state == port_default
            ) {
                port_state = port_address;
                /* configure device */
                callx_add_callafter (USB_DELAY_CONFIG, set_config_cb, 0);
            }
            break;

        case port_address:
            if (tdp[3].conditionCode == OHCI_CC_NO_ERROR &&
                port_state == port_address
            ) {
                port_state = port_configured;
                /* activate keyboard operation */
                edp[0].skip = 0;
                edp[0].head.flags.halted = 0;
                tdp[0].conditionCode = OHCI_CC_NOT_ACCESSED;
            }
            break;

        case port_configured:

            /* transfer 0 is for the report interrupt */
            if (dh == tda[0] || (dh == tda[2] && tdp[2].nextTD == tda[0])) {
                read_data ();
                tdp[0].conditionCode = OHCI_CC_NOT_ACCESSED;
                tdp[0].currentBuffer = (char*) vtophys (&data);
                edp[0].tailPointer = 0;
                edp[0].head.pointer.normal = tda[0];
            }
            break;
        }

    }

    if (w & OHCI_RHSC) {
        int w;

        /* find out what's happened */
        OREAD(OHCI_RH_PORT_STATUS(1), &w);

        /* turn off the interrupt in case we cause any more */
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_RHSC);

        /* Reset port (to enable it) if we've connected */
        if (w & UPS_C_CONNECT_STATUS) {
            if (w & UPS_CURRENT_CONNECT_STATUS) {
                port_state = port_powered;
                callx_add_callafter (USB_DELAY_RESET, reset_cb, 0);
            } else {
                port_state = port_detached;
                edp[0].skip = 1;
                callx_add_callback (pointer_cb, (void*) prev_pointer);
            }

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_CONNECT_STATUS);
        }

        /* Once we've finished resetting, address it */
        if (w & UPS_C_PORT_RESET) {// && (w & UPS_RESET == 0)) {
            port_state = port_default;
            callx_add_callafter (USB_DELAY_ADDRESS, set_address_cb, 0);

            OWRITE(OHCI_RH_PORT_STATUS(1), w & UPS_C_PORT_RESET);
        }

        rhsc++;
    }

    if (w & OHCI_SF) {
        OWRITE(OHCI_INTERRUPT_STATUS, OHCI_SF);
        sofs++;
    }

    return 0;
}


