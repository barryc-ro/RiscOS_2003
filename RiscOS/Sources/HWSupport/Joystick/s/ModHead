; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               	; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr  	; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               	; Helptable
        DCD     &43f40                          	; SWIbase
        DCD     SWIhandler     - Module_BaseAddr
        DCD     SWInames       - Module_BaseAddr
        DCD     0                               	; SWIdecode
        DCD     0
        DCD     0

; ---------------------------------------------------------------------------------------------------
Title   DCB     "Joystick",0
Helpstr DCB     "Joystick",9,"$VString ($Date)",0
                ALIGN

; ---------------------------------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "lr"
        Debug   mod,"Initialising"

        LDR     r0,[r12]                		; Have we already got a workspace ?
        CMP     r0,#0                   		; clears V
        MOVNE   r12,r0
        BNE     %FT01

        MOV     r0,#6
        LDR     r3,=max_running_work
        SWI     XOS_Module              		; Claim workspace
        Pull    "pc",VS

        STR     r2,[r12]                		; Store workspace pointer.
        MOV     r12,r2
01
        MOV     r0,#0
        STR     r0,message_file_open

 [ IOMD_C_JoystickDetectBits <> 0

; Test for existance & type of hardware. Read from the Type detection address
; If bit 3 is set, then digital. If bits 4-7 = 1000 then present

        Debug   mod,"Checking hardware"
        LDR     r0, =AnaDigiDetect
        LDRB    r1, [r0]				; Read the port
 [ False
	MOV	r0, #1<<5
	ADR	r1, magic_chan_one			;safe to use this temporarily
	MOV	r2, #4
	MOV	r3, #8					;network slot is podule 8
	SWI	XPodule_ReadInfo
	MOVVS	r1, #0
	LDRVC	r1, magic_chan_one			;r1 contains the podule id byte in bits 0->7
 ]
        Debug   wt,"Read back from type detect:",r1
        TST     r1, #DetectHardwareBit			; Check for hardware first
	BNE	NoHware
        ANDS    r1, r1, #DetectAnaDigiBit		; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag			; Set the (different) bit in misc_flags if analogue
;	ORR	r1, r1, #RstFlags			; Set the reset flags too 
        STRB    r1, misc_flags          		; And store it away, zeroing the rest of the misc flags too.
	BLNE	init_analogue				; And then go set it in action...
 |
        MOV     r1, #AnalogueFlag
        STRB    r1, misc_flags
        BL      init_analogue
 ]

;Initialise any other flags
        LDRB    r1, misc_flags
        ORR     r1, r1, #FirstTimeFlag          	; Set the first-time flag
        STRB    r1, misc_flags
        Debug   wt,"Misc flags stored as:",r1

;Ok, lets bung some 'sensible' defaults into the ranges...
	MOV	r1, #defaultrange << 16
	ORR	r1, r1, #defaultmin
	STR	r1, range_chan_one
	STR	r1, range_chan_two
	STR	r1, range_chan_three
	STR	r1, range_chan_four
;And set up the polarities for a TL min, BR max (like most PC analogue sticks)
;to give BL min, TR max as in the SWI
	MOV	r1, #default_polarities
	STRB	r1, range_polarity


        Pull    "pc"	                		; Hardware is there so initialise successfully.


 [ IOMD_C_JoystickDetectBits <> 0

NoHware
        Debug   mod,"No hardware"
        ADR     r0,ErrorBlock_NoHardware
        BL      msgtrans_errorlookup
        BL      Shut_Down
        SETV
        Pull    "pc"

ErrorBlock_NoHardware
        DCD     &43f40
        DCB     "NoHWare",0
                ALIGN

 ]

; ---------------------------------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "r4,lr"

        MOV     r4, r12                    	     	; So we can release the ticker if need be
        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "r4, pc",EQ,^				; Looks like we didn't even get as far as claiming workspace!

        MOV     r0,#7
	MOV	r2,r12
        SWI     XOS_Module              		; Clear workspace
 [  Codec_Type <> "AD1816"
        BL      StopTickyRoutine
 ]       
        BL      Shut_Down

        Pull    "r4,pc",,^


 [ Codec_Type <> "AD1816"
StopTickyRoutine
        Push    "r0-r2,lr"

        LDRB    r0, misc_flags
        Debug   wt,"Misc flags read as",r0
        TST     r0, #FirstTimeFlag
        Pull    "r0-r2,pc",NE                      	; If set, then no ticker to stop!

        Debug   wt,"Um, think we have a vector registered"
        MOV     r0, #13
        MOV     r1, #4
        SWI     XOS_Byte                         	; Disable VSync event
        MOV     r0, #&10                        	; Event vector
        ADR     r1, TickerRoutine
        MOV     r2, r4
        SWI     XOS_Release                      	; Release the ticker routine

        Pull    "r0-r2,pc"
 ]

Shut_Down
        Push    "r0,lr"

        Debug   mod,"Module dying"
; Close the message file if it's open
        LDR     r0,message_file_open
        TEQ     r0,#0
        ADRNE   r0,message_file_block
        SWINE   XMessageTrans_CloseFile

        Pull    "r0,pc"

; ---------------------------------------------------------------------------------------------------
;      Initialising the analogue registers in Morris
init_analogue
 [ Codec_Type = "AD1816"
        LDR     r0, =AD1816_SSBase
        LDRB    r1, [r0, #SS_JoystkCtrl]
        ORR     r1, r1, #SS_JWRP :OR: (SS_JMSK_Mask :SHL: SS_JMSK_Shift)
        STRB    r1, [r0, #SS_JoystkCtrl]                 ; set sampling off circa every 16 ms
        STRB    r1, [r0, #SS_JoystkPos]
        STRB    r1, [r0, #SS_JoystkPos + 4]    
 |       
	LDR	r1, =AnalogueIrqReg
	MOV	r0, #&0f		;Enable all channels, but don't allow irqs
	STRB	r0, [r1]		;

	LDR	r1, =AnalogueControlReg
	MOV	r0, #&0f		;Counters on, discharge off
	STRB	r0, [r1]
 ]
	MOV	pc,lr



        LNK     s.ticky
