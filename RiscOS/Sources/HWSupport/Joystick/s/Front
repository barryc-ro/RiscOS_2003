; > Sources.Front

;;-----------------------------------------------------------------------------
;; Joystick device driver.
;;
;; Change list
;; 0.01           SMC   Created
;; 0.02 12-Mar-92 SMC   No longer refuses to initialise if the message file can't
;;                        be opened (now only opened if required).
;;                      Read location twice when checking for hardware.
;; 0.03 08-Feb-93 SMC   Use Hdr: to get headers.
;; 0.04 14-Jan-94 SMC   Don't free workspace in finalisation (could break RMTidy).
;; 0.09 31-Mar-94 WT    Analogue support added, and digital support rewritten
;;                      for Kryten/Morris joystick interface board.
;; 0.10 12-May-94 WT    Analogue support altered to support optional returning
;;                      of the full 16-bit value for analogue joysticks.
;; 0.20  2-Feb-95 JRH   Changed addresses and bit patterns for Falcon
;; 0.25	22-Aug-96 TMD	Added variant for Peregrine (STB2/2)
;;
;;-----------------------------------------------------------------------------

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:NdrDebug
	GET	Hdr:Podule

        GET     Version

        GBLL    hostvdu
        GBLL    debugmod
        GBLL    debugtmp
        GBLL    debugwt

debug    SETL   false
debugmod SETL   false            ; Module debug
debugtmp SETL   false            ; Temporary debug
debugwt  SETL   false            ; Misc debugging by WT
hostvdu  SETL   false

; ----------------------------------------------------------------------------------------------------------------------

; On Omega machines there is no digital joystick and hence no auto-detect support.
;
 [ IOMD_C_JoystickDetectBits <> 0

  [ FakePodule0 = &121		; STB2/2
DigitalJoystickAddress	*	&88600004	; new offset in podule for MPEG 2 machine
  |
DigitalJoystickAddress  *       &88c00004	; hardwired to podule 0 EASI space
  ]

AnaDigiDetect           *       &0320000c
DetectAnaDigiBit        *       1 :SHL: 5
DetectHardwareBit       *       1 :SHL: 6

AnalogueJoyFire         *       DigitalJoystickAddress

 |

AnalogueJoyFire         *       &03220000

 ]

AnalogueIrqReg		*	&032000e0	; Provisional MORRIS address
AnalogueStatusReg       *       &032000e4       ;      "        "       "
AnalogueControlReg      *       &032000e8       ;      "        "       "
AnalogueChan1Count      *       &032000ec       ;      "        "       "
AnalogueChan2Count      *       &032000f0       ;      "        "       "
AnalogueChan3Count      *       &032000f4       ;      "        "       "
AnalogueChan4Count      *       &032000f8       ;      "        "       "

AnalogueJoyCnt		*	&0f
AnalogueJoyDchg		* 	&f0
AnalogueJoy0Cnt         *       &03
AnalogueJoy1Cnt         *       &0C
AnalogueJoy0Dchg        *       &30
AnalogueJoy1Dchg        *       &C0
AnalogueChn1Cnt         *       &01
AnalogueChn2Cnt         *       &02
AnalogueChn3Cnt         *       &04
AnalogueChn4Cnt         *       &08
AnalogueChn1Dchg        *       &10
AnalogueChn2Dchg        *       &20
AnalogueChn3Dchg        *       &40
AnalogueChn4Dchg        *       &80


Joy0_Completed          *       3 :SHL: 0
Joy1_Completed          *       3 :SHL: 2
Chn1_Completed          *       1 :SHL: 4
Chn2_Completed          *       1 :SHL: 5
Chn3_Completed          *       1 :SHL: 6
Chn4_Completed          *       1 :SHL: 7
Any_Completed           *      15 :SHL: 4

 [ IOMD_C_JoystickDetectBits <> 0

DigitalUpBit            *       1 :SHL: 0
DigitalDownBit          *       1 :SHL: 1
DigitalLeftBit          *       1 :SHL: 2
DigitalRightBit         *       1 :SHL: 3
DigitalFireBit          *       1 :SHL: 4

 ]

AnalogueJoy0Fire        *       &0f :SHL: 0
AnalogueJoy1Fire        *       &0f :SHL: 8
AnalogueAdvalFireA	*	1 :SHL: 0
AnalogueAdvalFireB	*	1 :SHL: 8

UpCode                  *       &00040          ; 64 in byte 0
DownCode                *       &000C0          ; -64 in byte 0 (signed)
LeftCode                *       &0C000          ; -64 in byte 1 (signed)
RightCode               *       &04000          ; 64 in byte 1
FireCode                *       &10000          ; 1 in byte 2

Top8Bits                *       &FF00           ;For sig bit test
Bottom8Bits             *       &00FF           ;

MaxADCChannel           *       4               ;Highest logical ADC channel

Service_UKByte          *       &07             ;Service call claimed to support ADVAL
Service_UKCommand	*	&04		;Unknown command service call


; ----------------------------------------------------------------------------------------------------------------------
;       Workspace layout

workspace       RN      R12
                ^       0,workspace
message_file_open       #       4
message_file_block      #       4*4
magic_chan_one          #       4
magic_chan_two          #       4
magic_chan_three        #       4
magic_chan_four         #       4
range_chan_one		#	4	;Split XXXXYYYY where XXXX is max-min, YYYY is min
range_chan_two		#	4	;
range_chan_three	#	4       ;
range_chan_four		#	4       ;
range_polarity		#	1	;Stores the polarity of each axis
misc_flags              #       1
adc_numchanstosample    #       1
adc_lastconversion      #       1

defaultrange		*	&1000	;These happen to suit Quickshot Warrior (cheap & nasty!)
defaultmin		*	&30     ;PC-compatible joysticks

SixteenBitFlag          *       1	;This is a SWI entry flag, _NOT_ a misc flag

NoJoystickFlag          *       1 :SHL: 0 ;However, these _ARE_ the misc flags!
FirstTimeFlag           *       1 :SHL: 1
CalibrateFlag		*	1 :SHL: 2
AnalogueFlag            *       1 :SHL: 3
RstChan1Flag		*	1 :SHL: 4
RstChan2Flag		*	1 :SHL: 5
RstChan3Flag		*	1 :SHL: 6
RstChan4Flag		*	1 :SHL: 7
RstFlags		*      15 :SHL: 4

polarity_chan_one	*	1 :SHL: 0
polarity_chan_two	*	1 :SHL: 1
polarity_chan_three	*	1 :SHL: 2
polarity_chan_four	*	1 :SHL: 3
default_polarities	*       &A	;ie reverse Y-axes only (suits most PC joysticks)

max_running_work   *       :INDEX:@

        ! 0, "Module workspace is &":CC:(:STR:(:INDEX:@)):CC:" bytes"

; ----------------------------------------------------------------------------------------------------------------------
        LNK     s.ModHead

