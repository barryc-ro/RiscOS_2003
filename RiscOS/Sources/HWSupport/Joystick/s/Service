; > Sources.Service

; ---------------------------------------------------------------------------------------------------
Service
	ROUT
        TEQ     R1, #Service_UKByte
        MOVNE   pc, lr                  ;Nowt to do with us then...

        Push    "r0,r12,lr"

	MOV	r14, r12		;Bung R12 into R14 in case we have to start the ticker routine
        LDR     r12, [r12]              ;Get workspace address into R12

        ;Check the interface is analogue. If not, we don't want to get involved
        LDRB    r0, misc_flags
        TST     r0, #AnalogueFlag       ;Check the ana/digi flag
        Pull    "r0,r12,pc",EQ          ;It's a digital i/f, so ignore the service
	TST	r0, #CalibrateFlag	;and the 'calibrate' flag
        Pull    "r0,r12,pc",NE          ;It's being calibrated at the mo, so ignore the service

        TST     r0, #FirstTimeFlag      ;Is the ticky routine going yet?
        Push    "r0-r5",NE
	MOV	r4, r14			;Grab the value of R12 into R4 from R14
        BLNE    StartTickyRoutine       ;Nope, so go start it
        Pull    "r0-r5",NE

;I know I should be claiming ByteV, but doing it this way is the easiest
;way to ensure that if present, the I/O podule will get to the UKByte first...
;However, it does mean that we can't indicate any errors :-(

        AND     r2, r2, #&ff		;OS_Byte number
        AND     r3, r3, #&ff            ;Parameter 1
	AND	r4, r4, #&ff		;Parameter 2

        TEQ     r2, #16
        BEQ     OSByte16                ;Select ADC channels to sample

        TEQ     r2, #17
        BEQ     OSByte17                ;Force an ADC conversion

        TEQ     r2, #128
        BEQ     OSByte128               ;Read ADC channel (ADVAL)

        TEQ     r2, #188
        BEQ     OSByte188               ;Read currently-converting ADC channel

        TEQ     r2, #189
        BEQ     OSByte189               ;Read maximum ADC channel number

        TEQ     r2, #190
        BEQ     OSByte190               ;Read ADC conversion type

05      MOV     r1, #Service_UKByte     ;Pass it on if it's none of these...
        Pull    "r0,r12,pc"             ;

;-----------------
OSByte16
        CMP     r3, #4                  ; Is r1 greater than 4?
        MOVGT   r3, #4                  ; If so, fix it to 4
        STRB    r3, adc_numchanstosample; Stuff r1 away

10      MOV     r1, #0                  ; Claim the service call
        Pull    "r0,r12,pc"             ; and return

;-----------------
OSByte17
        B       %BT10                   ; Claim service & quit, but pretend we did something

;-----------------
OSByte128
; 	CMP	r3, #4
;	BLT	%BT05			;Bzzt, wrong answer!
        CMP     r3, #0
        BNE     %FT15
	;Do the fire bit reading here
	LDR	r3, =AnalogueJoyFire
        LDR     r4, [r3]                ; Latch &
        LDR     r4, [r3]                ; load
	AND	r3, r4, #AnalogueAdvalFireA
	AND	r4, r4, #AnalogueAdvalFireB
	ORR	r3, r3, r4, LSR #7
	LDRB	r4, adc_lastconversion
	B	%FT20

15      TEQ     r3, #1
        ADREQ   r0, magic_chan_one
        TEQ     r3, #2
        ADREQ   r0, magic_chan_two
        TEQ     r3, #3
        ADREQ   r0, magic_chan_three
        TEQ     r3, #4
        ADREQ   r0, magic_chan_four

        STRB    r3, adc_lastconversion
        LDR     r0, [r0]                ; R0 now contains the channel reading (16bit)
        AND     r3, r0, #&ff            ; R3 (X) contains the low 8 bits
	AND	r0, r0, #&ff00		; Clear all but the 2nd 8 bits
        MOV     r4, r0, LSR #8          ; R4 (Y) contains the high 8 bits now

        B       %FT20                   ; Claim & quit

;-----------------
OSByte188
	LDRB	r3, adc_lastconversion	; Give 'em any old junk - they'll believe it!
        B       %FT20

;-----------------
OSByte189
        LDRB    r3, adc_numchanstosample

20      MOV     r1, #0
        Pull    "r0,r12,pc"             ; Claim service & quit

;-----------------
OSByte190
	MOV	r3, #0			; We're doing the default (16bit)
        B       %BT20                   ; Claim & quit



;------------------------------------------------
        LNK     s.Tail
