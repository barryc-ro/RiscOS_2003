; > &.CMOSreset.s.Module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:Debug
        GET     Hdr:Proc
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:MsgTrans
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors

	GBLS	GetPod1
	GBLS	GetPod2
	GBLS	GetPod3

 [ FakePodule0 <> 0
GetPod1	SETS	"GET Hdr:Podule"
GetPod2	SETS	"GET Hdr:PoduleReg"
 ]
	$GetPod1
	$GetPod2
 [ FakePodule0 <> 0
  [ FakePodule0 = ProdType_STB2_MPEG1
GetPod3	SETS	"GET Hdr:MPEGCard"
  ]
 ]
	$GetPod3

        GET     VersionASM

	GBLL	ReleaseVersion
ReleaseVersion	SETL	{TRUE}

	GBLL	Debug
Debug	SETL    :LNOT: ReleaseVersion

;
;	Misc constants
;
DefaultMode	*	12
PALMode		*	50
NTSCMode	*	55

;
;	Workspace
;
        ^ 0, wp
PoduleBase		#	0			; overlap with next
PoduleHeaderBuffer      #       16			; used to read podule headers
        AlignSpace

RAMSpaceRequired       * :INDEX: @

	AREA	|CMOSReset$$Code|, CODE, READONLY

ModuleStart
        DCD     0                                       ; StartCode
        DCD     InitialisationCode-ModuleStart
        DCD     0					; FinalisationCode
        DCD     0					; Service
        DCD     TitleString-ModuleStart
        DCD     HelpString-ModuleStart
        DCD     0                                       ; HelpAndCommandKeywordTable
        DCD     0					; WIChunkBase
        DCD     0					; SWIHandlerCode
        DCD     0					; SWIDecodingTable
        DCD     0                                       ; SWIDecodingCode


TitleString
        DCB     "CMOSreset", 0

                GBLS    OsString
OsString        SETS    ""

HelpString
        DCB     "CMOSreset", 9, Module_MajorVersion
  [	ReleaseVersion
        !       0, "Assembling CMOSreset $Module_MajorVersion"
  |
        DCB     "/", Module_MinorVersion
        !       0, "Assembling CMOSreset $Module_MajorVersion/$Module_MinorVersion"
  ]
        DCB     " (", Module_Date, ") "
        DCB     Module_MinorVersion, 0
        ALIGN

;
; Init code
;
InitialisationCode Push "lr"

 [ FakePodule0 <> 0
  [ FakePodule0 = ProdType_STB2_MPEG1
; Only do this if MPEG 1 machine
; If MPEG 2, then has new style interlace module that doesn't have the numbered modes, so give up!

;	Claim some workspace (temporarily, so don't save pointer in wp)
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #RAMSpaceRequired
        SWI     XOS_Module
        EXIT    VS
        MOV     r12, r2

;	Check out podule 0
        ADR     r2, PoduleHeaderBuffer
	MOV	r3, #0
        SWI     XPodule_ReadHeader
        BVS     ErrorExit
        LDRB    r0, [r2, #3]
        LDRB    r1, [r2, #4]
        ORR     r0, r0, r1, LSL #8			; r0 now holds product type

;	See if we recognise podule 0
	LDR	r1, =ProdType_STB2_MPEG0
	CMP	r0, r1
	LDRNE	r1, =ProdType_STB2_MPEG1
	CMPNE	r0, r1
	MOVNE	r1, #DefaultMode			; default mode if unrecognised podule hardware
	BNE	FreeWkSp

;	Get the EASI address of podule 0
        MOV     r0, #Podule_ReadInfo_EASILogical
        ADR     r1, PoduleBase
        MOV     r2, #4
        SWI     XPodule_ReadInfo			; r3 is still 0
	BVS	ErrorExit

;	Set r1 to the reqd screen mode according to the PAL/NTSC bit from the status register
        LDR     r0, PoduleBase
	ADD	r0, r0, #Offset_Podule_ControlStatus
	LDR	r1, [r0]
   [ Debug
	DREG	r0, "Byte @ &", cc
	BREG	r1, " is &"
   ]
	TST	r1, #MPEGPoduleStatus_NTSCnotPAL
	MOVEQ	r1, #PALMode
	MOVNE	r1, #NTSCMode

;	Free the workspace
FreeWkSp
	MOV	r0, #ModHandReason_Free
	MOV	r2, r12
	SWI	XOS_Module

;	Set configured mode to r1
SetMode
	ADRL	r0, WimpMode+2
  [ {FALSE}
	MOV	r1, #DefaultMode			; use mode 12 for debug cos less memory allows softload to work
  ]
; TMD 06-Nov-96 I've just noticed that the following instruction pokes the module code area, so won't
; work in ROM! Sack that hacker Jonathan Harris!
	! 0, "This module won't work for direct execution from ROM (ie main or extension ROM)"

	STRB	r1, [r0]

  ] ; FakePodule0 = ProdType_STB2_MPEG1
 ] ; FakePodule0

CheckSettings
	ADR	r3, SettingsTable			; r3 points to entries in the settings table
	MOV	r0, #ReadCMOS

; TMD 07-Nov-96 There was another JHarris bug here - it used to behave incorrectly on bits that were supposed to be
; preserved - if the value in the bits to be modified was not correct, it would set the whole value of the byte to the
; desired state of the modified bits, ie zeroing the other bits (bug ANC-00918).

CheckLoop
	LDR	r5, [r3], #4				; get the setting entry and point to the next one
	AND	r1, r5, #&ff				; r1 = ByteAddr
	CMP	r1, #&FF				; end of table?
	EXIT	EQ

	SWI	XOS_Byte				; ReadCMOS -> r2 = contents of CMOS
	AND	lr, r2, r5, LSR #8			; get the bits that we're trying to modify
	CMP	lr, r5, LSR #16				; compare it with our value
        BEQ	CheckLoop				; same?

NonMatch
  [	Debug
	BREG	r1, "Non-match @ &", cc
	BREG	r2, ", was &", cc
	MOV	r0, r5, LSR #16
	BREG	r0, ", should be &"
  ]
	MOV	r0, #WriteCMOS
	BIC	r2, r2, r5, LSR #8			; knock out bits we're modifying
	ORR	r2, r2, r5, LSR #16			; then put in new bits
	SWI	XOS_Byte				; WriteCMOS, r1 still holds ByteAddr

	MOV	r0, #ReadCMOS				; set this up for next iteration
	B	CheckLoop

;	Exit with an error, freeing our workspace first
ErrorExit
 [ FakePodule0 <> 0
  [ FakePodule0 = ProdType_STB2_MPEG1
	MOV	r0, #ModHandReason_Free
	MOV	r2, r12
	SWI	XOS_Module
  ]
 ]
	SETV
        EXIT


;
; Settings entry format - assumed by code
;
;	^	0
;
;ByteAddr	#	1				; CMOS logical address as passed to OS_Byte 161/162
;InterestMask	#	1				; bitmask of values we're interested in. 1=we're interested
;Value		#	1				; value we expect & insist on
;Padding	#	1				; padding to make each entry fit in a word
;
;SettingsEntrySize	*	:INDEX: @		; size of an entry
;
;	ASSERT	SettingsEntrySize = 4			; code assumes word aligned entries


;
; Set macro for adding settings table entries
;
; Usage:	Set address [, [mask] [, value]]
; Entries for mask and value default to &ff and 0 respectively
;
	MACRO
$label	Set	$ByteAddr, $Mask = &ff, $Value = 0
	LCLA	mask
	LCLA	value
  [	"$Mask" <> ""
mask	SETA	$Mask
  |
mask	SETA	&ff
  ]
  [	"$Value" <> ""
value	SETA	$Value
  |
value	SETA	0
  ]
;	ASSERT	(:INDEX: . :AND: 3) = 0			; call me paranoid, but each entry should be word aligned
	DCB	$ByteAddr, mask, value :AND: mask, 0
	MEND

; The table of required settings
	GET	s.<Machine>.Settings

  [	Debug
	InsertDebugRoutines
  ]
	END
