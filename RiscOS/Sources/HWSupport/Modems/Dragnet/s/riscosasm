
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:CPU.Generic32
	GET	Hdr:APCS.<APCS>

;----------------------------------------------------------------------------
; CARD_BASE * &88000000
;----------------------------------------------------------------------------

	AREA	|ObjAsm$$Code|,CODE,READONLY,PIC

;----------------------------------------------------------------------------

	EXPORT	call_buffermanager
call_buffermanager
;	STMFD	R13!,{R4,R5,LR}
	FunctionEntry "R4,R5"
	MOV	R4,R0
	MOV	R5,R1
	MOV	R12,R2
	LDMIA	R4!,{R0-R3}
	MOV	LR,PC
	MOV	PC,R5
	STMDB	R4,{R2-R3}
	MRS	R0,CPSR
;	LDMFD	R13!,{R4,R5,PC}^
	Return  "R4,R5"

;----------------------------------------------------------------------------

;	; output8 ( address , value )
;	EXPORT	output8
;output8
;	STRB	R1,[R0]
;;        MOV	PC,LR
;	Return  ,LinkNotStacked

	; output8 ( address , value )
	EXPORT	output8
output8
	SWI	OS_EnterOS			; Change to SVC mode

	STRB	a2,[a1]

        MRS     a4, CPSR			; Back into user mode
        BIC     a4, a4, #2_01111		;
        MSR     CPSR_c, a4                      ;

;        MOV	PC,LR
	Return  ,LinkNotStacked

;----------------------------------------------------------------------------

;	; value = input8 ( address )
;	EXPORT	input8
;input8
;	LDRB	R0,[R0]
;;	MOV	PC,LR
;	Return  ,LinkNotStacked

	; value = input8 ( address )
	EXPORT	input8
input8

	SWI	OS_EnterOS			; Change to SVC mode

	LDRB	a1,[a1]

        MRS     a4, CPSR			; Back into user mode
        BIC     a4, a4, #2_01111		;
        MSR     CPSR_c, a4                      ;

;	MOV	PC,LR
	Return  ,LinkNotStacked

;----------------------------------------------------------------------------
	EXPORT	call_in_user
call_in_user
        STMFD   sp!, {v1,v2,sl,fp,lr}
        SUB     a2, sl, #540
        LDMIA   a2, {a2, a3}                    ; Get magic words
        MRS     a4, CPSR
        BIC     a4, a4, #2_01111
        MSR     CPSR_c, a4                      ; In to user mode
        MOV     v1, sp                          ; Preserve USR r13 and r14
        MOV     v2, lr
        MOV     fp, #0                          ; Break frame backtrace
        ADR     sl, usr_stack_base
        STMIA   sl, {a2, a3}                    ; Pop magic words in our stack
        ADD     sp, sl, #8192
        ADD     sl, sl, #540                    ; Set up sl and sp
        MOV     lr, pc
        MOV     pc, a1                          ; Call the function
        MOV     sp, v1                          ; Restore USR r13 and r14
        MOV     lr, v2
        SWI     OS_EnterOS                      ; Back to supervisor mode
        LDMFD   sp!, {v1,v2,sl,fp,pc}           ; Restore everything


usr_stack_base
        %       8192
usr_stack_top




;----------------------------------------------------------------------------
;----------------------------------------------------------------------------
;----------------------------------------------------------------------------
;	EXPORT	irqs_off[LEAF]
;irqs_off
;	AND	R0,LR,#I_bit
;	ORRS	PC,LR,#I_bit
;----------------------------------------------------------------------------
;	EXPORT	irqs_on[LEAF]
;irqs_on
;	AND	R0,LR,#I_bit
;	BICS	PC,LR,#I_bit
;----------------------------------------------------------------------------
;	EXPORT	irqs_restore[LEAF]
;irqs_restore
;	BIC	LR,LR,#I_bit
;	ORRS	PC,LR,R0
;----------------------------------------------------------------------------

;	EXPORT	user_mode_do_nothing
;user_mode_do_nothing
;	STMFD 	r13!,{lr}
;
;	; Execute a SWI in user mode to trigger callbacks
;	TEQP 	pc, #0			; To user mode
;	MOV 	r0, #0
;	MOV 	r1, #1
;	SWI 	XOS_Byte		; Read OS version
;	SWI 	XOS_EnterOS		; Back to SVC mode
;
; 	LDMFD 	r13!,{pc}^

;----------------------------------------------------------------------------

;	EXPORT	enable_iomd_interrupts
;enable_iomd_interrupts
;	TEQP	pc, #I_bit:OR:F_bit:OR:SVC_mode
;	MOV	r0, #IOC
;	LDR	r1, [r0, #IOCIRQMSKB]
;	ORR	r1, r1, #podule_IRQ_bit
;	STR	r1, [r0, #IOCIRQMSKB]
;	MOVS	pc, lr

;----------------------------------------------------------------------------

;	EXPORT	disable_iomd_interrupts
;disable_iomd_interrupts
;	TEQP	pc, #I_bit:OR:F_bit:OR:SVC_mode
;	MOV	r0, #IOC
;	LDR	r1, [r0, #IOCIRQMSKB]
;	BIC	r1, r1, #podule_IRQ_bit
;	STR	r1, [r0, #IOCIRQMSKB]
;	MOVS	pc, lr

;----------------------------------------------------------------------------

;	EXPORT	enable_timer1_interrupts
;enable_timer1_interrupts
;	TEQP	pc, #I_bit:OR:F_bit:OR:SVC_mode
;	MOV	r0, #IOC
;	LDR	r1, [r0, #IOCIRQMSKA]
;	ORR	r1, r1, #timer1_bit
;	STR	r1, [r0, #IOCIRQMSKA]
;	MOVS	pc, lr

;----------------------------------------------------------------------------

;        EXPORT  main_dnld_flash_amd
;        EXPORT  main_dnld_flash_atmel
;        EXPORT  write_serial_number_amd
;        EXPORT  write_serial_number_atmel
;        EXPORT  set_7_wait_states
;main_dnld_flash_amd
;main_dnld_flash_atmel
;write_serial_number_amd
;write_serial_number_atmel
;set_7_wait_states
;        MOVS    pc, lr

;----------------------------------------------------------------------------
	END
