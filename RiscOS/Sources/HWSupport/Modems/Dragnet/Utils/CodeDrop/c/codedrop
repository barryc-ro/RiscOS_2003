#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#define MAXLEAFNAME (512)
#define MAXPATHNAME (1024*4)


typedef struct
{
  int load_address;
  int exec_address;
  int length;
  int attributes;
  int object_type;
  char object_name[MAXLEAFNAME+1];
}
os_gbpb10_record;

int os_gbpb10_single_read( os_gbpb10_record *record, char *directory_name, char *filespec, int *item )
{
  _kernel_oserror *e;
  _kernel_swi_regs r;
  
  /* check args */
  if ( !record || !item ) { return 0; }

  /* setup defaults for directory and filespec */
  if ( !directory_name) { directory_name = ""; }
  if ( !filespec )      { filespec = ""; }
    
  /* clear record details */
  record->load_address = 0;
  record->exec_address = 0;
  record->length = 0;
  record->attributes = 0;
  record->object_type = 0;
  record->object_name[0] = (char)0;

  /* setup and call os_gbpb 10 */
  r.r[0] = 10;                               /* gbpb 10 */
  r.r[1] = (int)directory_name;
  r.r[2] = (int)record;
  r.r[3] = 1;                                /* read 1 record */
  r.r[4] = *item;
  r.r[5] = (int)sizeof(os_gbpb10_record);
  r.r[6] = (int)filespec;

  e=_kernel_swi(OS_GBPB,&r,&r);
  if (e) { return 0; }

  *item = r.r[4];

  /* return 0 == no more objects to scan */
  return *item != -1 ;
}

/*******************************************************************/

#define TOLOWER(x) ((x)>='A'&&(x)<='Z'?(x)-('A'-'a'):(x))
int strcmp_i(const char *a, const char *b)
{
  register int i;
  
  for( ; (i=(TOLOWER(*a)-TOLOWER(*b)))==0 && *a ; a++,b++ ) { };
  return i; 
}
/*
{
  register char ca;
  register char cb;
  register int i;
  
  for(;;)
  {
    ca = *a++;    
    cb = *b++;
    if ( (i=(TOLOWER(ca)-TOLOWER(cb)))!=0 || !ca )
    { 
      return i; 
    }
  }
}
*/

/*******************************************************************/


typedef struct
{
  char *from;  char *to;
} 
map_t;

map_t extension_map[] = 
{
/*from    to 
  ----    -- */
  "/c",    "c",       /* X/c => c.X */
  "/h",    "h",       /* X/h => h.X */
  "/ven",  "ven",     /* Venus dsp codefile */
  NULL,    "other",   /* Default mapping: everything else is put here. ext not striped */
                      /*  -- processing stops at default mapping entry --  */
  NULL,    NULL       /* Terminate table again... just to be sure */
};

/*
 * filename mapping function: 
 *
 *   known extensions map "fred/c" to "c.fred"            ("c","c")
 *   other extensions map "bill/?" to "other.bill/?"      (NULL,"other")
 */
char *map_filename ( char *to, const char *from )
{
  register map_t *map = extension_map;
  const char *from_ext;

  /* check args */
  if (!from || !to) { return NULL; }  

*to=(char)0;
  
  /* find extension seperator in from name */
  for ( from_ext=from ; *from_ext && *from_ext!='/' ; from_ext++ ) { } ;

printf("map_filename ( \"%s\", \"%s\" ) [%s]\n",from,to,from_ext);

  for ( ; map->to ; map++ )
  {
    if( !map->from )
    {
      printf("use default : maps to %s\n",map->to);
      break;
    }
    else if( strcmp_i( from_ext, map->from ) == 0 )
    {
      printf("matched %s : maps to %s\n",map->from, map->to );
      break;
    }
  
  }

  return to;
}

/*******************************************************************/






int process_file (os_gbpb10_record *grec, char *path_name, char *leaf_name)
{
  char new_name[MAXLEAFNAME+1];
  
printf ( "process_file ( %p, \"%s\", \"%s\" )\n", grec,path_name,leaf_name );

  map_filename(new_name,leaf_name);

  return 1;
}









int scan_directory ( char *directory )
{
  os_gbpb10_record    grec;                          /* os_gbpb10 object details record */
  int                 item = 0;                      /* scan object number: 0 to start */
  char                full_name[MAXPATHNAME+1];      /* full name = path.leaf */
  char                *leaf_pointer = full_name;     /* place to copy leafname to */


printf("scan_directory( \"%s\" )\n", directory );

  sprintf(full_name,"%s.",directory);                /* copy big path once */
  for ( ; *leaf_pointer ; leaf_pointer++ ) { } ;     /* setup pointer to leaf append location */

  /* loop through directory entries */
  while(os_gbpb10_single_read( &grec, directory, NULL, &item ))
  {
    strcpy(leaf_pointer,grec.object_name);           /* update full_name for this object */

    if ( grec.object_type == 2 ) 
    { 
      /* deal with directory object */
      scan_directory(full_name);                      /* recurse */
    }
    else if( grec.object_type == 1  ) 
    { 
      /* deal with file object */
      *(leaf_pointer-1) = (char)0;                    /* split full_name */
      process_file(&grec,full_name,leaf_pointer);     /*  ( gbpb10_rec , path, leaf ) */
      *(leaf_pointer-1) = '.';                        /* rejoin full_name */
    }
  }

  return 1;  
}


int main(int ac, char *av[])
{

//  printf("%d\n",strcmp_i("xa","xb"));
//  printf("%d\n",strcmp_i("xb","xa"));
//  printf("%d\n",strcmp_i("xb","xb"));
  scan_directory("$.workbench.winmodem"); 



  return EXIT_SUCCESS;
}
