/*name and version number:@(#)dpdraco.c	1.8*/
/*date of get: 		  09/06/00 16:58:52*/
/*date of delta:	  03/02/00 10:02:08*/
/****************************************************************
File :  dpdraco.c
Description :	This file contains the main loop and supporting
				functions for Synchronous Data Mode.  Also included
				are parsing routines for AT test commands for testing
				primitive Draco hardware functionality.
Procedures Contained :	

	at_draco_write_parse()
	at_draco_read_parse()
	sync_valv34_host_write()
	sync_valv34_host_read()
	sync_set_b3c7_out()
	sync_valv34_core_write()
	sync_valv34_core_read()
	sync_apollo_write()
	sync_apollo_read()
	at_draco_valv_test()
	at_draco_apollo_test()
	at_synch_timing()
	at_synch_baud()
	sync_dualport_tx ()
	sync_dualport_rx ()
	sync_valv_rx()
	sync_valv_tx()
	sync_dsp_timing()
	sync_valv_loopback()
	sync_dial_q2q3()
	sync_q2q3_dial_loop()
	sync_handle_remote_retrain()
	sync_handle_local_retrain()
	sync_master_timing_loop()
	synch_patch_download()
	sync_set_venus_clock()
	sync_set_valv_bit_and_baud_rate()
	sync_valv_setup()

Revision History :
    Initials        Date            Change
	SES				02/26/98		Initial
*****************************************************************/
#define x_debug_msg(x) (ddputs_24l(x))
#include "llglob_d.h"
//msm// #include "z80glob.h"

#ifdef SYNCH_MODE
#include "atglob.h"
#include "dpglob.h"
#include "dp_synch.h"
#include "allglobs.h"

//#define 	SYNC_TX_ONLY			//Test Mode for Transmit only
//#define	SYNC_RX_ONLY			//Test Mode for Receive only
//#define	LOCAL_LOOPBACK_TEST		//Local Loopback Test from Valv34 to DTE
#define	DISABLE_TEST_CMD			//Increases code efficency
//#define   DISABLE_LOOP_STROBE			//Increases code efficency
#define HANDLE_RETRAINS

typedef struct {
	byte loc ;
	byte val ;
	byte *cmd_ptr;
} parsed_params ;

#define SYNC_BUF_SIZE	16
byte syncRx_buff[SYNC_BUF_SIZE];	// Receive Buffer
byte *syncRx_sptr;					// Rx buffer start pointer
byte *syncRx_eptr;					// Rx buffer end pointer
byte *syncRx_wptr;					// Rx buffer write pointer
byte *syncRx_rptr;					// Rx buffer read pointer
byte syncTx_buff[SYNC_BUF_SIZE];	// Transmit Buffer
byte *syncTx_sptr;					// Tx buffer start pointer
byte *syncTx_eptr;					// Tx buffer end pointer
byte *syncTx_wptr;					// Tx buffer write pointer
byte *syncTx_rptr;					// Tx buffer read pointer

byte syncBaudRate;
byte syncTimingMode;
byte posUpdate;
byte negUpdate;
BOOL q2Dial,q3Dial;
BOOL remote_hangup;

extern void at_cmd_err_ret(void);
extern byte at_atohex(byte string[], word *num);
extern void venus_reg_wrt ( byte, byte ) ;
extern void venus_reg_rd ( byte ) ;
extern void sync_master_timing_loop(void);
extern void sync_valv_setup(void);
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_draco_write_parse(byte *at_cmd_ptr)
//	DESCRIPTION:  	
//****************************************************************
parsed_params at_draco_write_parse(byte *at_cmd_ptr)
{
	byte string[3] ;
	word reg_word ;
	parsed_params _parsed_params;

	string[0] = *at_cmd_ptr++ ;
	string[1] = *at_cmd_ptr++ ;
	string[2] = '\0' ;

	if ( at_atohex(string, &reg_word) == FALSE )
	{
		at_cmd_err_ret ();
		return;
	}
	_parsed_params.loc = (byte) reg_word;

	if ( *at_cmd_ptr == ',' )
	{
		at_cmd_ptr++ ;
		string[0] = *at_cmd_ptr++ ;
		string[1] = *at_cmd_ptr++ ;
		string[2] = '\0' ;

		if ( at_atohex(string, &reg_word) == FALSE )
		{
			at_cmd_err_ret ();
			return;
		}
		else
		{
			_parsed_params.val = (byte) reg_word ;
		}
	}
	else
	{
		at_cmd_err_ret ();
	}
	_parsed_params.cmd_ptr = at_cmd_ptr;
	return(_parsed_params);
}
/*************** End of at_draco_write_parse()*******************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_draco_read_parse(byte *at_cmd_ptr)
//	DESCRIPTION:  	
//****************************************************************
parsed_params at_draco_read_parse(byte *at_cmd_ptr)
{
	byte string[3] ;
	word reg_word ;
	parsed_params _parsed_params;

	string[0] = *at_cmd_ptr++ ;
	string[1] = *at_cmd_ptr++ ;
	string[2] = '\0' ;

	if ( at_atohex(string, &reg_word) == FALSE )
	{
		at_cmd_err_ret ();
		return;
	}
	else
	{
		_parsed_params.loc = (byte) reg_word ;
		_parsed_params.val = 0x00; //dummy value
	}

	_parsed_params.cmd_ptr = at_cmd_ptr;
	return(_parsed_params);
}
/*************** End of at_draco_read_parse()*******************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_valv34_host_write(byte reg, byte val)
//	DESCRIPTION:  	This function provides write access to
//					the host interface of the Valve34 chip on the
//					Draco board.
//****************************************************************
byte* sync_valv34_host_write(byte *at_cmd_ptr, byte loc, byte val, byte mode)
{
	parsed_params _parsed_params;

	//x_debug_msg("sync_valv34_host_write()");
#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )	// if test command, get params from
	{							// at command pointer
		_parsed_params = at_draco_write_parse(at_cmd_ptr);
	}
	else		// otherwise parameters are provided
#endif
	{							// in function call
		_parsed_params.loc = loc;
		_parsed_params.val = val;
	}

	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 0
	output8( BaseAddressData, 0xe5 ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 0
	output8( BaseAddressData, 0x5d ) ;

	output8(0x91,0xff);			// Core Write Address
	output((_parsed_params.loc+0x80),_parsed_params.val);
#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )
		return	(_parsed_params.cmd_ptr);
	else
#endif
		return (NULL);
}
//******************* End of sync_valv34_host_write() Function ********
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_valv34_host_read(byte reg)
//	DESCRIPTION:  	This function provides read access to
//					the host interface of the Valve34 chip on the
//					Draco board.
//****************************************************************
byte* sync_valv34_host_read(byte *at_cmd_ptr, byte loc, byte val, byte mode)
{
	dp_reg _dp_reg ;
	parsed_params _parsed_params;

#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )	// if test command, get params from
	{							// at command pointer
		_parsed_params = at_draco_read_parse(at_cmd_ptr);
	}
	else						// otherwise parameters are provided
#endif
	{							// in function call
		_parsed_params.loc = loc;
		_parsed_params.val = val;
	}

	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 0
	output8( BaseAddressData, 0xe5 ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 0
	output8( BaseAddressData, 0x5d ) ;
#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )
	{
		venus_reg_rd((_parsed_params.loc + 0x80)) ;
		return	(_parsed_params.cmd_ptr);
	}
	else
#endif
	{
		val = input(_parsed_params.loc + 0x80) ;
		return (&val);
	}
}
//******************* End of sync_valv34_host_read() Function ********
//////////////////////////////////////////////////////////////////
//	FUNCTION:		void sync_set_b3c7_out(void) 	
//	DESCRIPTION:    Turns on Venus clock and sets BIOB3 and
//					BIOC7 up for outputs. 
//****************************************************************
void sync_set_b3c7_out(void)
{
	dp_regwrite(0xc0,0x12);		// Turn Clock On
	dp_regwrite(0xba,0xab);	// Set BIOB3 - Output
	dp_regwrite(0xdb,0xc2); // Set BIOC7 - Output
	return;
}
//******************* End of sync_set_b3c7_out() Function ********
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_valv34_core_write(byte reg, byte val)
//	DESCRIPTION:  	This function provides write access to
//					the core interface of the Valve34 chip on the
//					Draco board.
//****************************************************************
byte* sync_valv34_core_write(byte *at_cmd_ptr, byte loc, byte val, byte mode)
{
	parsed_params _parsed_params;

#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )	// if test command, get params from
	{							// at command pointer
		_parsed_params = at_draco_write_parse(at_cmd_ptr);
	}
	else						// otherwise parameters are provided
#endif
	{							// in function call
		_parsed_params.loc = loc;
		_parsed_params.val = val;
	}
	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 0
	output8( BaseAddressData, 0xe5 ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 1
	output8( BaseAddressData, 0xdd ) ;

	output8(0x80,_parsed_params.loc);			// Core Write Address

	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 1
	output8( BaseAddressData, 0xed ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 0
	output8( BaseAddressData, 0x5d ) ;

	output8(0x80,_parsed_params.val);			// Core Write Data

	//if (_parsed_params.loc == 0x0e)
	//	sendHexByte(_parsed_params.val);
#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )
		return	(_parsed_params.cmd_ptr);
	else
#endif
		return (NULL);
}
//******************* End of sync_valv34_core_write() Function ********
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_valv34_core_read(byte reg)
//	DESCRIPTION:  	This function provides read access to
//					the host interface of the Valve34 chip on the
//					Draco board.
//****************************************************************
byte* sync_valv34_core_read(byte *at_cmd_ptr, byte loc, byte val, byte mode)
{
	dp_reg _dp_reg;
	parsed_params _parsed_params;

#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )	// if test command, get params from
	{							// at command pointer
		_parsed_params = at_draco_read_parse(at_cmd_ptr);
	}
	else						// otherwise parameters are provided
#endif
	{							// in function call
		_parsed_params.loc = loc;
		_parsed_params.val = val;
	}

	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 0
	output8( BaseAddressData, 0xe5 ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 1
	output8( BaseAddressData, 0xdd ) ;

	output8(0x80,_parsed_params.loc);			// Core Write Address

	output8( BaseAddress, 0xbb ) ;		// Set BIOB3 = 1
	output8( BaseAddressData, 0xed ) ;

	output8( BaseAddress, 0xdc ) ;		// Set BIOC7 = 0
	output8( BaseAddressData, 0x5d ) ;
#ifndef DISABLE_TEST_CMD
	if ( mode == SYNC_TST_CMD )
	{
		venus_reg_rd(0x80) ;
		return	(_parsed_params.cmd_ptr);
	}
	else
#endif
	{
		val = input(0x80) ;
		return (&val);
	}
}
//******************* End of sync_valv34_core_read() Function ********
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_apollo_write(byte reg, byte val)
//	DESCRIPTION:  	This function provides write access to
//					the BAMIL of the Apollo on the Draco board.
//****************************************************************
byte* sync_apollo_write(byte *at_cmd_ptr)
{
	//set BIOB3 = 1
	//set BIOC7 = 1
	//write Apollo BAMIL register to I/O 0x80
	//write value to I/O 0x81
	x_debug_msg("sync_apollo_write()");
	//at_cmd_ptr = at_draco_write_parse(at_cmd_ptr,0x00);
	return(at_cmd_ptr);
}
//******************* End of sync_apollo_write() Function *************
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		sync_apollo_read(byte reg)
//	DESCRIPTION:  	This function provides read access to
//					the BAMIL of the Apollo on the Draco board.
//****************************************************************
byte* sync_apollo_read(byte *at_cmd_ptr)
{
	//set BIOB3 = 1
	//set BIOC7 = 1
	//write Apollo BAMIL register to I/O 0x80
	//read value from I/O 0x81
	x_debug_msg("sync_apollo_read()");
	//at_cmd_ptr = at_draco_read_parse(at_cmd_ptr,0x00);
	return(at_cmd_ptr);
}
//******************* End of sync_apollo_read() Function **************
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_draco_valv_test(byte *at_cmd_ptr)
//	DESCRIPTION:	Part of the draco test command parsing 
//					function set for Valv34.
//****************************************************************
byte* at_draco_valv_test(byte *at_cmd_ptr)
{
	sync_set_b3c7_out();
	
	if ( *at_cmd_ptr == 'H' )
	{
		at_cmd_ptr++;
		if ( *at_cmd_ptr == 'R' )
		{
			at_cmd_ptr++;
			at_cmd_ptr = sync_valv34_host_read(at_cmd_ptr,0,0,SYNC_TST_CMD);
		}
		else if ( *at_cmd_ptr == 'W' )
		{
			at_cmd_ptr++;
			at_cmd_ptr = sync_valv34_host_write(at_cmd_ptr,NULL,NULL,SYNC_TST_CMD);
		}
		else
			at_cmd_err_ret();
	}
	else if ( *at_cmd_ptr == 'C')
	{
		at_cmd_ptr++;
		if ( *at_cmd_ptr == 'R' )
		{
			at_cmd_ptr++;
			at_cmd_ptr = sync_valv34_core_read(at_cmd_ptr,0,0,SYNC_TST_CMD);

		}
		else if ( *at_cmd_ptr == 'W' )
		{
			at_cmd_ptr++;
			at_cmd_ptr = sync_valv34_core_write(at_cmd_ptr,0,0,SYNC_TST_CMD);
		}
		else
			at_cmd_err_ret();
	}
	else
		at_cmd_err_ret();

	return(at_cmd_ptr);
}
/******************* End of at_draco_valv_test() *********************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_draco_apollo_test(byte *at_cmd_ptr)
//	DESCRIPTION:	Part of the draco test command parsing 
//					function set for Apollo.
//****************************************************************
byte* at_draco_apollo_test(byte *at_cmd_ptr)
{
	if ( *at_cmd_ptr == 'W' )
	{
		at_cmd_ptr++;
		at_cmd_ptr = sync_apollo_write(at_cmd_ptr);
	}
	else if ( *at_cmd_ptr == 'R' )
	{
		at_cmd_ptr++;
		at_cmd_ptr = sync_apollo_read(at_cmd_ptr);
	}
	else
		at_cmd_err_ret();

	return(at_cmd_ptr);
}
/******************* End of at_draco_apollo_test() *********************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_synch_timing(byte *at_cmd_ptr)
//****************************************************************
byte* at_synch_timing(byte *at_cmd_ptr)
{
	switch ( *at_cmd_ptr)
	{
	case '0':	// No update test mode
	case '1':	// Free-Running
	case '2':	// Slave Timing
	case '3':	// External Timing
		syncTimingMode = (byte)*at_cmd_ptr++;
		break;
	default:
		at_cmd_err_ret();
	}
	return(at_cmd_ptr);
}
/******************* End of at_synch_timing() *********************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		byte* at_synch_baud(byte *at_cmd_ptr)
//****************************************************************
byte* at_synch_baud(byte *at_cmd_ptr)
{
	switch ( *at_cmd_ptr)
	{
	case '0':	//auto
	case '1':	//2400
	case '2':	//2743
	case '3':	//2800
	case '4':	//3000
	case '5':	//3200
	case '6':	//3429
		syncBaudRate = (byte)*at_cmd_ptr++;
		break;
	default:
		at_cmd_err_ret();
	}
	return(at_cmd_ptr);
}
/******************* End of at_synch_baud() *********************/
/****************************************************************
Routine : sync_dualport_tx ( void )
Description:	Transfers 16 bytes from syncTx_buff[] to
				transmit dualport register and triggers DSP
				to read data block.
****************************************************************/
void sync_dualport_tx ( void )
{
	byte  dp_dsp_tx_ptr;
	byte  temp;

	dp_dsp_tx_ptr = 0x80 ;
	while (dp_dsp_tx_ptr <= 0x8f ) // contents of 16 byte buffer 
	{								// to Tx dualport register
		output8 ( BaseAddress, dp_dsp_tx_ptr++ ) ;
		//temp = *syncTx_rptr++;	//in for debug
		output8 ( BaseAddressData, (byte)*syncTx_rptr++ ) ; //out for debug
		//output8 ( BaseAddressData, (byte)temp ) ;	// in for debug
		//sendHexByte(temp); // in for debug
	}
	output8 ( BaseAddress, 0xb0 ) ; // trigger DSP to read 16 bytes
	output8 ( BaseAddressData,16 ) ;
	syncTx_wptr = syncTx_buff;		// reset buffer pointers
	syncTx_rptr = syncTx_buff;

	return;
}
/**************** End of sync_dualport_tx() ********************/
/****************************************************************
Routine : sync_dualport_rx ( void )
Description:	Reads number of bytes available in
				receive dualport register and transfers them
				to syncRx_buff[], then triggers DSP to write
				more data.
****************************************************************/
void sync_dualport_rx ( void )
{
	byte dp_count, dp_rx_ptr, i, test;

	output8 ( BaseAddress, 0xb0 ) ;
	dp_count = (byte) input ( BaseAddressData );
	{
		dp_rx_ptr = 0x90 ;
		// copy data into fifo
		while ( dp_count-- )  // write data block from dualport
		{					  // reg to Rx buffer
			output8 ( BaseAddress2, (byte) ( dp_rx_ptr++ ) ) ;
			*syncRx_wptr++ = (byte) input ( BaseAddressData ) ;
		}
		// 2nd dummy read to trigger dsp to write more data
		output8 ( BaseAddress, 0xb0 ) ;
		input ( BaseAddressData ) ;
	}
	return ;
}
/******************* End of sync_dualport_rx() *****************/
/****************************************************************
Routine : sync_valv_rx ( void )
Description:	Transfers bytes from syncRx_buff[] to
				Valv34 receive FIFO, then read and write pointers
				to buffer when finished writing.
****************************************************************/
BOOL sync_valv_rx( void )
{
	byte maxRxFifo, RxRead, i, test;
	byte *rxStat;
	// write them to Rx FIFO

	rxStat = sync_valv34_core_read(NULL,0x0f,0,SYNC_Z80_CMD);
	maxRxFifo = 0x06 - ((*rxStat) & 0x07);		// num bytes free in Rx FIFO
	
	if((syncRx_wptr - syncRx_rptr) < maxRxFifo ) // set RxRead to min of
		RxRead = syncRx_wptr - syncRx_rptr;		// num bytes available in
	else									  // buffer and empty Rx FIFO
		RxRead = maxRxFifo;					// bytes

	if (RxRead >= 2)
		RxRead = 2;

	for (i = 0; i < RxRead; i++)  // write RxRead bytes from Rx buff to Rx FIFO
	{
		sync_valv34_core_write(NULL,0x0e,*syncRx_rptr++,SYNC_Z80_CMD);
	}
	
	if (syncRx_rptr == syncRx_wptr)
	{	// if finished writing entire buffer (or no data in buffer)
		// reset read/write pointers
		syncRx_rptr = syncRx_buff;
		syncRx_wptr = syncRx_buff;
		return( TRUE );
	}		
	else
		return( FALSE ) ;
}
/******************* End of sync_valv_rx() *****************/
/****************************************************************
Routine : sync_valv_tx ( void )
Description:	Transfers bytes from Valv34 transmit FIFO to
				syncTx_buff[], and returns true if buffer is full.
****************************************************************/
BOOL sync_valv_tx( void )
{
	byte TxWrite, maxTxFifo, maxTxBuff, i, test;
	byte *data, *txStat;
	// find num of free bytes in syncTx[]
	// read up to that many bytes from Valv Tx FIFO
	// write them to syncTx[]
	txStat = sync_valv34_core_read(NULL,0x05,0,SYNC_Z80_CMD); // Tx stat
	//sendHexByte(*txStat);

	maxTxFifo = ((*txStat) & 0x07); // num bytes in Tx FIFO
	maxTxBuff = syncTx_buff + SYNC_BUF_SIZE - syncTx_wptr;  // free bytes
															//in Tx buffer
	if(maxTxFifo < maxTxBuff )  // set num bytes to write to min of
		TxWrite = maxTxFifo;	// free bytes in Tx buffer and num bytes
	else						// in Tx FIFO
		TxWrite = maxTxBuff;

	if (TxWrite >= 2)
		TxWrite = 2;

	for (i = 0; i < TxWrite; i++) // write TxWrite bytes from Tx FIFO
	{							  // to Tx buffer
		data = sync_valv34_core_read(NULL,0x0e,0,SYNC_Z80_CMD);
		*syncTx_wptr++ = *data;
	//	test = *data;
	//	sendHexByte(test);
	}

	if ( syncTx_wptr < (syncTx_buff + SYNC_BUF_SIZE) )
		return( FALSE ); // if Tx buffer not full return FALSE
	else
		return( TRUE );
}
/******************* End of sync_valv_tx() *****************/
/****************************************************************
Routine : sync_dsp_timing ( void )
Description:	Transfers synchronous timing information from
				DSP to Valv34.
****************************************************************/
void sync_dsp_timing( void )
{
	byte tim_b1, tim_b2, tim_b3;
	byte *temp;

if (syncTimingMode == '1')
{
	output8 ( BaseAddress, 0xb2 ) ;
	tim_b2 = input ( BaseAddressData  ) ;	// Read CAMIL B2
	sync_valv34_core_write(NULL,0x20,tim_b2,SYNC_Z80_CMD); // Write to Valv
	output8 ( BaseAddress, 0xb3 ) ;
	tim_b3 = input ( BaseAddressData  ) ;	// Read CAMIL B3
	sync_valv34_core_write(NULL,0x21,tim_b3,SYNC_Z80_CMD); // Write to Valv
} else if (syncTimingMode == '2')
{
	output8 ( BaseAddress, 0xb1 ) ;
	tim_b1 = input ( BaseAddressData  ) ;	// Read CAMIL B1
	sync_valv34_core_write(NULL,0xb,tim_b1,SYNC_Z80_CMD); // Write to Valv
} else if (syncTimingMode == '3')
{
	output8 ( BaseAddress, 0xb2 ) ;
	tim_b2 = input ( BaseAddressData  ) ;	// Read CAMIL B2
	sync_valv34_core_write(NULL,0x20,tim_b2,SYNC_Z80_CMD); // Write to Valv
	output8 ( BaseAddress, 0xb3 ) ;
	tim_b3 = input ( BaseAddressData  ) ;	// Read CAMIL B3
	sync_valv34_core_write(NULL,0x21,tim_b3,SYNC_Z80_CMD); // Write to Valv

	temp = sync_valv34_core_read(NULL,0x21,0,SYNC_Z80_CMD); // Read from Valv
	if (!(*temp&0x04))
	{
		if (*temp&0x02)
		{
			sync_valv34_core_write(NULL,0xb,0x02,SYNC_Z80_CMD); // Write to Valv
			dp_modem_command_long ( 0x03, 0x0b, 0x00, posUpdate, 0 ) ;
		} else
		{
			sync_valv34_core_write(NULL,0xb,0x12,SYNC_Z80_CMD); // Write to Valv
			dp_modem_command_long ( 0x03, 0x0b, 0x00, negUpdate, 0 ) ;
		}
	}
}
	return;
}
/******************* End of sync_dsp_timing() *****************/
/****************************************************************
Routine : sync_valv_loopback ( void )
Desctiption:	Test function for local synchronous data
				loopback from the Valv34.
****************************************************************/
void sync_valv_loopback( void )
{
	byte *data;
	byte test;

	data = sync_valv34_core_read(NULL,0x0e,0,SYNC_Z80_CMD);
	test = *data;
	sync_valv34_core_write(NULL,0x0e,*data,SYNC_Z80_CMD); // Write to Valv
	return;
}
/******************* End of sync_valv_loopback() ********************/
extern non_banked void  io_init_dce_tx_fifo ( void ) ;
extern non_banked void  io_init_dce_rx_fifo ( void ) ;
extern void UART_Flush ( word ) ;
/****************************************************************
Routine : sync_dial_q2q3 ( void )
****************************************************************/
void sync_dial_q2q3( void )
{
	byte at_dial_string[4];
	
	if (q2Dial)
	{
		at_dial_string[0] = 'S';
		at_dial_string[1] = '=';
		at_dial_string[2] = '0';
		at_dial_string[3] = 0;
	}
	else if (q3Dial)
		at_dial_string[0] = 0;

	io_init_dce_tx_fifo () ;	// init dce transmit fifo
	io_init_dce_rx_fifo () ;	// init dce receive  fifo
	UART_Flush ( 0 ) ;      	// init dte receive  fifo
	x_send_mail ( MC_DIAL, DP_TASK, at_dial_string, 4 ) ;
	
	return;
}
/******************* End of sync_dial_q2q3() ********************/
byte dtrLoCount,dtrHiCount;
/****************************************************************
Routine : sync_q2q3_dial_loop ( void )
****************************************************************/
void sync_q2q3_dial_loop( void )
{
	byte dteStat;

	dtrLoCount = 0;
	dtrHiCount = 0;
	sync_set_b3c7_out();
	sync_valv34_core_write(NULL,0x19,0x80,SYNC_Z80_CMD); // Mux Valv to DTE
	dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
	x_debug_msg("Q2 Dial");
	if (dteStat)
	{
		x_debug_msg("DTR ON");
		while(dtrLoCount < 100)
		{
			dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
			if (!dteStat)
				dtrLoCount++;
			if (dteStat)
				dtrLoCount = 0;
		}
	}
	if(!dteStat)
	{
		x_debug_msg("DTR OFF");
		while(dtrHiCount < 100)
		{
			dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
			if(dteStat)
				dtrHiCount++;
			if(!dteStat)
				dtrHiCount = 0;
		}
	}
	sync_dial_q2q3();
	sync_valv34_core_write(NULL,0x19,0x00,SYNC_Z80_CMD); // Mux Venus to DTE
	return;
}
/******************* End of sync_q2q3_dial_loop() ********************/
extern void sync_set_valv_bit_and_baud_rate(void);
/****************************************************************
Routine : sync_handle_remote_retrain ( void )
****************************************************************/
void sync_handle_remote_retrain( void )
{
	byte dpStat, dteStat;
	word txRate, rxRate, time1, time2;

	enable_interrupt();
	output8( BaseAddress, DP_STATUS_REG ) ;
	dpStat = input( BaseAddressData );
	dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
	sync_valv34_host_write(NULL,0x10,0x01,SYNC_Z80_CMD);// Turn off DCD
	x_debug_msg("Remote Retrain");
	//dp_write_dsp_ram( 0x80d, (dp_read_dsp_ram(0x80d) & 0x7F) ) ; // disable asymmetric rates
	time1 = x_current_time();
	time2 = time1;
	remote_hangup = FALSE;
	while( (dpStat&RETRAIN_STATUS)&&(dteStat)&&(!remote_hangup) )
	{
		output8( BaseAddress, DP_STATUS_REG ) ;
		dpStat = input( BaseAddressData );
		dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
		time2 = x_current_time();
		if ( (time2-time1) > SECOND30 )
			remote_hangup = TRUE;
#if defined( WATCHDOG_TIMER )
		//x_debug_msg("watchdog");
		// strobe sanity timer
		output8( 0xda, 0x1f ) ;
		output8( 0xdb, 0xe5 ) ;
#endif
	}

	if(dp_read_dsp_ram(0x3a)&0x0001)
		remote_hangup = TRUE;
	txRate = (dp_read_dsp_ram(0x36)&0x0F00) >> 8 ;	// Get new Transmit Rate
	rxRate = dp_read_dsp_ram(0x36)&0x000F ;	// Get new Receive Rate
/*	while (txRate != rxRate)
	{
		txRate = (dp_read_dsp_ram(0x36)&0x0F00) >> 8 ;	// Get new Transmit Rate
		rxRate = dp_read_dsp_ram(0x36)&0x000F ;	// Get new Receive Rate
	}*/
	x_debug_msg("New Rx =");
	sendHexWord(rxRate);
	x_debug_msg(" ");
	x_debug_msg("New Tx =");
	sendHexWord(txRate);
	x_debug_msg(" ");
	sync_set_valv_bit_and_baud_rate();
	sync_valv34_host_write(NULL,0x10,0x00,SYNC_Z80_CMD);// Turn on DCD
	disable_interrupt();
	return;
}
/******************* End of sync_handle_remote_retrain() ********************/
/****************************************************************
Routine : sync_handle_local_retrain ( void )
****************************************************************/
void sync_handle_local_retrain( void )
{
	byte dpStat, dteStat;
	word txRate, rxRate;

	enable_interrupt();
	output8( BaseAddress, DP_STATUS_REG ) ;
	dpStat = input( BaseAddressData );
	dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
	sync_valv34_host_write(NULL,0x10,0x01,SYNC_Z80_CMD);// Turn off DCD
	x_send_mail ( DSP_RETRAIN, DP_TASK, NULL, 0 ) ;
	x_debug_msg("Local Retrain");
	//dp_write_dsp_ram( 0x80d, (dp_read_dsp_ram(0x80d) & 0x7F) ) ; // Disable Assymetric Rates
	while ( (dpStat&FALLBACK_STATUS)&&(dteStat) )
	{
		output8( BaseAddress, DP_STATUS_REG ) ;
		dpStat = input( BaseAddressData );
		dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;
#if defined( WATCHDOG_TIMER )
				// strobe sanity timer
				output8( 0xda, 0x1f ) ;
				output8( 0xdb, 0xe5 ) ;
#endif
	}
	txRate = (dp_read_dsp_ram(0x36)&0x0F00) >> 8 ;	// Get new Transmit Rate
	rxRate = dp_read_dsp_ram(0x36)&0x000F ;	// Get new Receive Rate
/*	while (txRate != rxRate)
	{
		txRate = (dp_read_dsp_ram(0x36)&0x0F00) >> 8 ;	// Get new Transmit Rate
		rxRate = dp_read_dsp_ram(0x36)&0x000F ;	// Get new Receive Rate
	}*/
	x_debug_msg("New Rx =");
	sendHexWord(rxRate);
	x_debug_msg(" ");
	x_debug_msg("New Tx =");
	sendHexWord(txRate);
	x_debug_msg(" ");
	sync_set_valv_bit_and_baud_rate();
	sync_valv34_host_write(NULL,0x10,0x00,SYNC_Z80_CMD);// Turn on DCD
	disable_interrupt();
	return;
	
}
/******************* End of sync_handle_local_retrain() ********************/
extern byte dp_carrier_loss ( void );
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		void sync_master_timing_loop()
//	DESCRIPTION:	Main loop for Synchronous Mode.
//****************************************************************
void sync_master_timing_loop(void)
{
	byte tim_trig, dp_isr_status, dp_isr_regd7, dteStat;
	byte dpStat, trigBit, temp, temp1;

	syncRx_rptr = syncRx_buff;
	syncRx_wptr = syncRx_buff;
	syncTx_rptr = syncTx_buff;
	syncTx_wptr = syncTx_buff;

	sync_set_b3c7_out();
	remote_hangup = FALSE;
	sync_valv34_core_write(NULL,0x0d,0xc0,SYNC_Z80_CMD); // clear status reg
	disable_interrupt();
	x_debug_msg("Enter synch");
	// Initialization
	sync_valv34_core_write(NULL,0x0a,0x50,SYNC_Z80_CMD);	
	sync_valv34_core_write(NULL,0x19,0x80,SYNC_Z80_CMD); // Mux Valv to DTE

	output8 ( BaseAddress, 0xb0 ) ;	//goose address
	input ( BaseAddressData );		//goose read
	output8 ( BaseAddressData,16 ) ;	//goose write
	dteStat = (*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80;

	if (syncTimingMode == '2')
		trigBit = 0x20;
	else
		trigBit = 0x80;

	//S.ModemOptions.DTRControl = 0 ;
	output8( BaseAddress, 0xc0 ) ;	//Turn On constellation display
	temp1 = input( BaseAddressData );
	temp1 |= 0x04;
	output8( BaseAddress, 0xc0 ) ;	//Turn On constellation display
	output8( BaseAddressData, temp1 ) ;

	sync_valv34_core_write(NULL,0x14,0x08,SYNC_Z80_CMD);// CTS locked to RTS 
	sync_valv34_core_write(NULL,0x13,0x03,SYNC_Z80_CMD);// Turn on DSR AND
	sync_valv34_core_write(NULL,0x16,0x10,SYNC_Z80_CMD);// Turn on DSR
	sync_valv34_host_write(NULL,0x10,0x00,SYNC_Z80_CMD);// Turn on DCD
	dteStat = 0;

	while((dteStat<100)&&(!remote_hangup))
	{
		output8 ( BaseAddress, 0xb7 ) ;
		tim_trig = input ( BaseAddressData  ) ;
		if ((tim_trig&trigBit) == trigBit)	// if timing data from DSP available
		{
			sync_dsp_timing();
#ifdef LOCAL_LOOPBACK_TEST
			sync_valv_loopback();
#endif
			// poll interrupt registers
			output8 ( BaseAddress2, 0xd7 ) ;
			dp_isr_regd7 = (byte) input ( BaseAddressData ) ;
			output8 ( BaseAddress, 0xb6 ) ;
			dp_isr_status = (byte) input ( BaseAddressData ) ;

			// Empty contents of syncRx_buff, then get more data from
			// Rx dualport registers.  dp_isr_regd7&04 means dualport
			// interrupt, and dp_isr_status&0x10 means Rx data ready
			// for read.
#ifndef LOCAL_LOOPBACK_TEST
//beginRx
#ifdef SYNC_TX_ONLY
			if((dp_isr_regd7&0x04)&&(dp_isr_status&0x10))
#else
			if((sync_valv_rx())&&(dp_isr_regd7&0x04)&&(dp_isr_status&0x10))
#endif
			{
				output8 ( BaseAddress, 0xd8 ) ;
				output8 ( BaseAddressData, 0xff ) ;	//reset dp_isr* interrupt
#ifdef SYNC_TX_ONLY
				output8 ( BaseAddress, 0xb0 ) ;
				input ( BaseAddressData ) ;
#else
				sync_dualport_rx () ;
#endif
			}

			// Fill contents of syncTx_buff, then send 16 byte block to
			// Tx dualport registers.  dp_isr_regd7&04 means dualport
			// interrupt, and dp_isr_status&0x01 means Rx data ready
			// for more data.
//beginTx
#ifdef SYNC_RX_ONLY
			if((dp_isr_regd7&0x04)&&(dp_isr_status&0x01))
#else
			if((sync_valv_tx())&&(dp_isr_regd7&0x04)&&(dp_isr_status&0x01))
#endif
			{
				output8 ( BaseAddress, 0xd8 ) ;
				output8 ( BaseAddressData, 0xff ) ;	//reset dp_isr* interrupt
#ifndef SYNC_RX_ONLY
				sync_dualport_tx () ;
#endif
			}
#endif

#ifdef HANDLE_RETRAINS
			//Handle Retrains
			output8( BaseAddress, DP_STATUS_REG ) ;
			dpStat = input( BaseAddressData );
			if ( dpStat & RETRAIN_STATUS )
			{
				sync_handle_remote_retrain();
				sync_valv34_core_write(NULL,0x0d,0xc0,SYNC_Z80_CMD);
				syncRx_rptr = syncRx_buff;
				syncRx_wptr = syncRx_buff;
				syncTx_rptr = syncTx_buff;
				syncTx_wptr = syncTx_buff;
				output8 ( BaseAddress, 0xd8 ) ;
				output8 ( BaseAddressData, 0xff ) ;	//reset dp_isr* interrupt
				output8 ( BaseAddress, 0xb0 ) ;
				input ( BaseAddressData ) ;
				output8 ( BaseAddress, 0xb0 ) ;	//goose address
				input ( BaseAddressData );		//goose read
				output8 ( BaseAddressData,16 ) ;	//goose write
			}
			if ( dpStat & FALLBACK_STATUS )
			{
				sync_handle_local_retrain();
				sync_valv34_core_write(NULL,0x0d,0xc0,SYNC_Z80_CMD);
				syncRx_rptr = syncRx_buff;
				syncRx_wptr = syncRx_buff;
				syncTx_rptr = syncTx_buff;
				syncTx_wptr = syncTx_buff;
				output8 ( BaseAddress, 0xd8 ) ;
				output8 ( BaseAddressData, 0xff ) ;	//reset dp_isr* interrupt
				output8 ( BaseAddress, 0xb0 ) ;
				input ( BaseAddressData ) ;
				output8 ( BaseAddress, 0xb0 ) ;	//goose address
				input ( BaseAddressData );		//goose read
				output8 ( BaseAddressData,16 ) ;	//goose write
			}
#endif

#if defined( WATCHDOG_TIMER )
				// strobe sanity timer
				output8( 0xda, 0x1f ) ;
				output8( 0xdb, 0xe5 ) ;
#endif
 		}
		if(!((*sync_valv34_host_read(NULL,0x2b,0,SYNC_Z80_CMD))&0x80))
			dteStat++;
		else
			dteStat = 0;
	}
	x_debug_msg("Exit synch");
	sync_valv34_core_write(NULL,0x19,0x00,SYNC_Z80_CMD); // Mux Venus to DTE
	enable_interrupt();
	dp_cleardown_cmd();
	dp_onhook_cmd();
	dp_modem_command ( ON_HOOK, 0, 0 ) ;
	//S.ModemOptions.DTRControl = 1 ;
	sync_valv34_core_write(NULL,0x16,0x00,SYNC_Z80_CMD);// Turn off DSR
	
	return;
}
/******************* End of sync_master_timing_loop() *********************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		void sync_patch_download()
//	DESCRIPTION:	Downloads DSP patch for synch mode operation.
//****************************************************************
void sync_patch_download(void)
{
	//dp_dsp_int_regwrite(8, 0x03DE);		// x-y page register
	//dp_dsp_int_regwrite(1, 0x6800);		// IOC register
	dp_modem_command ( MODEM_IDLE, 0, 0 ) ;
	DOWNLOAD_DSP(wSYNCH);
	x_debug_msg("Synch Mode DSP patch loaded");
	return;
}

//******************** End of sync_patch_download() ***************/
const word draco_BAUD_RATE [] =
{	2400,2743,2800,3000,3200,3429 };

extern non_banked word dp_getROMwd( byte, byte * ) ;
/****************************************************************
Routine : sync_set_venus_clock ( void )
****************************************************************/
void sync_set_venus_clock( void )
{
	// Set Venus 29Mhz input clock to output to Valve32
	output8( BaseAddress, 0x34 ) ;
	output8( BaseAddressData, 0x00 ) ;
	output8( BaseAddress, 0x35 ) ;
	output8( BaseAddressData, 0x6c ) ;
	output8( BaseAddress, 0x36 ) ;
	output8( BaseAddressData, 0x01 ) ;
	output8( BaseAddress, 0x37 ) ;
	output8( BaseAddressData, 0x31 ) ;
	return;
}
/******************* End of sync_set_venus_clock() ********************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		void sync_set_valv_bit_and_baud_rate()
//****************************************************************
void sync_set_valv_bit_and_baud_rate(void)
{
	word i;
	byte rxRate,txRate,reg0,reg1,reg2,reg4,reg5,reg6,reg7;

	rxRate = (byte)dp_read_dsp_ram(0x36)&0x000F ;	// Get new Receive Rate
	txRate = (dp_read_dsp_ram(0x36)&0x0F00) >> 8 ;	// Get new Transmit Rate
	i =	dp_read_dsp_ram(0x080a);	// Get Baud Rate chosen by DSP
	sync_set_venus_clock();
	sendHexWord(rxRate);
	switch (rxRate) // Set Valv Rx Clock current Rx line rate
	{
	case 0x02: 	//	1200 Hz
		x_debug_msg("rx 1200");
		reg6 = 0x00;
		reg7 = 0x4a;
		break;
	case 0x03:		//	2400 Hz 
		x_debug_msg("rx 2400");
		reg6 = 0x00;
		reg7 = 0x3a;
		break;
	case 0x04:		//	4800 Hz 
		x_debug_msg("rx 4800");
		reg6 = 0x00;
		reg7 = 0x2a;
		break;
	case 0x05:		//	7200 Hz 
		x_debug_msg("rx 7200");
		reg6 = 0x00;
		reg7 = 0x3e;
		break;
	case 0x06:		//	9600 Hz
		x_debug_msg("rx 9600");
		reg6 = 0x00;
		reg7 = 0x1a;
		break;
	case 0x07:	//	12000 Hz 
		x_debug_msg("rx 12000");
		reg6 = 0x04;
		reg7 = 0x3b;
		break;
	case 0x08:	//	14400 Hz 
		x_debug_msg("rx 14400");
		reg6 = 0x00;
		reg7 = 0x2e;
		break;
	case 0x09:	//	16800 Hz 
		x_debug_msg("rx 16800");
		reg6 = 0x86;
		reg7 = 0x3b;
		break;
	case 0x0a:	//	19200 Hz
		x_debug_msg("rx 19200");
		reg6 = 0x00;
		reg7 = 0x0a;
		break;
	case 0x0b:	//	21600 Hz
		x_debug_msg("rx 21600");
		reg6 = 0x82;
		reg7 = 0x18;
		break;
	case 0x0c:	//	24000 Hz
		x_debug_msg("rx 24000");
		reg6 = 0x04;
		reg7 = 0x2b;
		break;
	case 0x0d:	//	26400 Hz
		x_debug_msg("rx 26400");
		reg6 = 0x8a;
		reg7 = 0x26;
		break;
	case 0x0e:	//	28800 Hz
		x_debug_msg("rx 28800");
		reg6 = 0x00;
		reg7 = 0x2f;
		break;
	case 0x0f:	//	31200 Hz
		x_debug_msg("rx 31200");
		reg6 = 0x03;
		reg7 = 0x02;
		break;
	case 0x10:	//	33600 Hz
		x_debug_msg("rx 33600");
		reg6 = 0x86;
		reg7 = 0x4b;
		break;
	}
	sendHexWord(txRate);
	if(!V34Mode)
		txRate = rxRate;
	switch (txRate) // Set Valv Rx Clock current Rx line rate
	{
	case 0x02: 	//	1200 Hz
		x_debug_msg("tx 1200");
		reg4 = 0x00;
		reg5 = 0x4a;
		break;
	case 0x03:		//	2400 Hz 
		x_debug_msg("tx 2400");
		reg4 = 0x00;
		reg5 = 0x3a;
		break;
	case 0x04:		//	4800 Hz 
		x_debug_msg("tx 4800");
		reg4 = 0x00;
		reg5 = 0x2a;
		break;
	case 0x05:		//	7200 Hz 
		x_debug_msg("tx 7200");
		reg4 = 0x00;
		reg5 = 0x3e;
		break;
	case 0x06:		//	9600 Hz
		x_debug_msg("tx 9600");
		reg4 = 0x00;
		reg5 = 0x1a;
		break;
	case 0x07:	//	12000 Hz 
		x_debug_msg("tx 12000");
		reg4 = 0x04;
		reg5 = 0x3b;
		break;
	case 0x08:	//	14400 Hz 
		x_debug_msg("tx 14400");
		reg4 = 0x00;
		reg5 = 0x2e;
		break;
	case 0x09:	//	16800 Hz 
		x_debug_msg("tx 16800");
		reg4 = 0x86;
		reg5 = 0x3b;
		break;
	case 0x0a:	//	19200 Hz
		x_debug_msg("tx 19200");
		reg4 = 0x00;
		reg5 = 0x0a;
		break;
	case 0x0b:	//	21600 Hz
		x_debug_msg("tx 21600");
		reg4 = 0x82;
		reg5 = 0x18;
		break;
	case 0x0c:	//	24000 Hz
		x_debug_msg("tx 24000");
		reg4 = 0x04;
		reg5 = 0x2b;
		break;
	case 0x0d:	//	26400 Hz
		x_debug_msg("tx 26400");
		reg4 = 0x8a;
		reg5 = 0x26;
		break;
	case 0x0e:	//	28800 Hz
		x_debug_msg("tx 28800");
		reg4 = 0x00;
		reg5 = 0x2f;
		break;
	case 0x0f:	//	31200 Hz
		x_debug_msg("tx 31200");
		reg4 = 0x03;
		reg5 = 0x02;
		break;
	case 0x10:	//	33600 Hz
		x_debug_msg("tx 33600");
		reg4 = 0x86;
		reg5 = 0x4b;
		break;
	}

	sync_valv34_core_write(NULL,0x04,reg4,SYNC_Z80_CMD);
	sync_valv34_core_write(NULL,0x05,reg5,SYNC_Z80_CMD);
	sync_valv34_core_write(NULL,0x06,reg6,SYNC_Z80_CMD);
	sync_valv34_core_write(NULL,0x07,reg7,SYNC_Z80_CMD);
	// End set valve clock
	// Enable Tx and Rx clocks
	sync_valv34_core_write(NULL,0x15,0x44,SYNC_Z80_CMD);
	// Disable clock source %2
	sync_valv34_core_write(NULL,0x2c,0x50,SYNC_Z80_CMD);
	// Setup baud clocks
	if (!V34Mode)
	{
		x_debug_msg("Not V.34");
		reg0 = 0x60;
		reg1 = 0x1e;
		reg2 = 0x3d;
		posUpdate = 0x02;
		negUpdate = 0x12;
	}
	else
	{
		byte b = (byte) (address_24_of(draco_BAUD_RATE) >> 16);

		switch (dp_getROMwd(b, (byte *) &draco_BAUD_RATE[i]))
		{
		case 2400:
			x_debug_msg("2400 baud");
			reg0 = 0x00;
			reg1 = 0x1e;
			reg2 = 0x3d;
			posUpdate = 0x02;
			negUpdate = 0x12;
			break;
		case 2743:
			x_debug_msg("2743 baud");
			reg0 = 0xa1;
			reg1 = 0x1a;
			reg2 = 0x38;
			posUpdate = 0x08;
			negUpdate = 0x18;
			break;
		case 2800:
			x_debug_msg("2800 baud");
			reg0 = 0x06;
			reg1 = 0x1a;
			reg2 = 0x39;
			posUpdate = 0x0e;
			negUpdate = 0x1e;
			break;
		case 3000:
			x_debug_msg("3000 baud");
			reg0 = 0x24;
			reg1 = 0x1c;
			reg2 = 0x3b;
			posUpdate = 0x0a;
			negUpdate = 0x1a;
			break;
		case 3200:
			x_debug_msg("3200 baud");
			reg0 = 0x01;
			reg1 = 0x1e;
			reg2 = 0x3d;
			posUpdate = 0x04;
			negUpdate = 0x14;
			break;	
		case 3429:
			x_debug_msg("3429 baud");
			reg0 = 0x24;
			reg1 = 0x1d;
			reg2 = 0x36;
			posUpdate = 0x0a;
			negUpdate = 0x1a;
			break;
		}
		sync_valv34_core_write(NULL,0x00,reg0,SYNC_Z80_CMD);
		sync_valv34_core_write(NULL,0x01,reg1,SYNC_Z80_CMD);
		sync_valv34_core_write(NULL,0x02,reg2,SYNC_Z80_CMD);
	}
	return;
}
//******************** End of sync_set_valv_bit_and_baud_rate() ***************/
//////////////////////////////////////////////////////////////////
//	FUNCTION: 		void sync_valv_setup()
//	DESCRIPTION:	Initialization of Venus and Valv34 clocks for
//					synch mode.
//****************************************************************
void sync_valv_setup(void)
{
	word i, rxRate;
	
	sync_set_b3c7_out();
//	sync_set_venus_clock();
	sync_set_valv_bit_and_baud_rate();
	sync_valv34_core_write(NULL,0x03,0x60,SYNC_Z80_CMD);
	sync_valv34_core_write(NULL,0x24,0x80,SYNC_Z80_CMD);
	sync_valv34_core_write(NULL,0x25,0x18,SYNC_Z80_CMD);	

	return;
}
//******************** End of sync_valv_setup() ***************/
#endif //  SYNCH_MODE
