/*name and version number:@(#)atv25ter.c	1.46*/
/*date of get: 		  10/31/00 12:01:12*/
/*date of delta:	  10/31/00 10:43:53*/
/****************************************************************
File : v25ter.c
Description :
        This file implements the V.25ter commands.
*****************************************************************/

#include "llglob_d.h"
#include "atglob.h"
#include "sync.h"

#include "v25ter.h"
#include "dpglob.h"
//msm// #include "z80glob.h"
#include "allglobs.h"

V25_OPT v25teroptions;
byte V25ter_DteRate;
typedef const byte *CBP;
#if defined (V25TER) || defined (V80)
static char *tmpCp;		// temp char pointer for Z80 opt
#endif // V25TER || V80

#if defined (V25TER) || defined (V80) || defined (V8BIS)

const byte * const DteRate_String[] =
{
	(CBP) "110", (CBP) "300", (CBP) "600", (CBP) "1200", (CBP) "2400",
	(CBP) "4800", (CBP) "9600", (CBP) "14400", (CBP) "19200",
	(CBP) "38400", (CBP) "57600", (CBP) "115200", (CBP) "230400"
};


/****************************************************************
Routine : at_px_strcpy
Description :
	copy string from *src to *dest except the characters (i,x)
*****************************************************************/
void at_px_strcpy(byte *dest, const byte *src )
{
	while ( *src != 0 )
	{
		*dest = *src++ ;
		if ((*dest != 'x') && (*dest != 'i'))
			dest++;
	} 		
	*dest = 0 ;
}
#endif	//V25ter || V80 || V8BIS
#if defined (V25TER) || defined (V80)
/****************************************************************
Routine : at_error_control_sw
Description :
	AT+ES command for the modem EC mode, (LAPM, MNP, buffered)
*****************************************************************/
#define ES		   "+ES: "
#if defined(V80)
 #define ES_RANGE	ES "(0-6),(0-4),(0-8)"
#else
 #define ES_RANGE	ES "(0-4),(0-4),(0-6)"
#endif
void at_error_control_sw(byte *ch)
{
	short int siNums[10];

	switch ( ch[2] )
	{
	case '=':
		if ( ch[3] == '?' )
		{  			
			at_output_msg2((byte *) ES_RANGE);
		}
		else
		{
			if (at_SIwithinrange(&ch[3], (byte *) ES_RANGE, siNums))
			{
				signed char nb[3];

				nb[0] = (signed char) siNums[0];
				nb[1] = (signed char) siNums[1];
				nb[2] = (signed char) siNums[2];

				// Buffer mode	    1,0,1 - \N0
				if ((nb[0] == 1) && (nb[1] == 0) && (nb[2] == 1))
				{
					G(S).ModemOptions.V42 = V42_BUFFER_MODE ;
					break;
				}

				if (4 == nb[0] && 6 == nb[2])
				{
					// MNP or disconnect  4,4,6 - \N2
					if (4 == nb[1])
					{
						G(S).ModemOptions.V42 = V42_MNP_DISC;
						break;
					}
					// MNP or buffer mode 4,0,6
					if (0 == nb[1])
					{
						G(S).ModemOptions.V42 = V42_MNP_BUFFER;
						break;
					}
				}

				// initiate V.42 with detection phase
				if (3 == nb[0])
				{
					// LAPM or disconnect  3,3,5 - \N4
					if ((nb[1]== 3) && (nb[2]==5))
					{
						G(S).ModemOptions.V42 = V42_LAPM_ONLY;
						break;
					}
					// LAPM, MNP or buffer 3,0,2 - \N3 - (default)
					if ((nb[1]== 0) && (nb[2]==2))
					{
						G(S).ModemOptions.V42 = V42_LAPM_MNP_BUFFER ;
						break;
					}
					//   LAPM, MNP, or disconnect 3,2,4
					if ((nb[1]== 2) && (nb[2]==4))
					{
						G(S).ModemOptions.V42 = V42_LAPM_MNP_DISC ;
						break;
					}
				}
#ifdef V80					
				// V42 Sync Buffer  6 or ,,8 or 6,,8
				if ( ( (nb[0] == 6 ) && (nb[1] == -1) && (nb[2] == -1) ) ||
					 ( (nb[0] == -1 ) && (nb[1] == -1) && (nb[2] == 8) ) ||
					 ( (nb[0] == 6 ) && (nb[1] == -1) && (nb[2] == 8) ) )
				{
					G(S).ModemOptions.V42 = V42_SYNC_BUFFERED;
					break;
				}
#endif
				// anything else => error
				at_cmd_err_ret();
				return;
			}
			else
			{
				at_cmd_err_ret();
				return;
			} 
		}			
		break ;
	case '?':
	{
		switch ( S.ModemOptions.V42 )
		{
		case V42_MNP_DISC :
			tmpCp = "4,4,6";
			break ;
		case V42_LAPM_ONLY :
			tmpCp = "3,3,5";
			break ;
		case V42_MNP_BUFFER :
			tmpCp = "4,0,6";
			break ;
		case V42_LAPM_BUFFER :
			tmpCp = "2,0,2";
			break ;
		case V42_LAPM_MNP_BUFFER :
			tmpCp = "3,0,2";
			break ;
		case V42_LAPM_MNP_DISC :
			tmpCp = "3,2,4";
			break ;
		case V42_SYNC_BUFFERED :
			tmpCp = "6,,8";
			break;
		case V42_BUFFER_MODE :
		default:
			tmpCp = "1,0,1";
			break;
		}
		
		at_output_msg_strstr(ES, tmpCp);
	}
	break;
#ifdef V80		
	case 'A':
		at_sync_access_mode (ch) ;			// this is esa in 
		return;
		//	 break;													   
#endif
	default:						    // not '=' or '?'  so might be 'a' 
		at_cmd_err_ret();
		return;			

	}
	G(at_result_code) = OK;
}

#endif	//V25ter || V80

#if defined (V25TER)
/****************************************************************
Routine : at_v25ter_options_init
Description :
	init v25ter options
*****************************************************************/
void at_v25ter_options_init (void)
{
	v25teroptions.mr = 0;
	v25teroptions.dr = 0;
	v25teroptions.ilrr = 0;
	v25teroptions.er = 0;
	G(S).ModemOptions.CommStdSetting = 0 ;
}

/****************************************************************
Routine : at_comp_sw
Description :
	AT+DS, AT+DS44 commands for V.42bis and
	V.44 data compression parameters.
*****************************************************************/
void at_comp_sw (byte *ch)
{
	byte txchar[120];
	short int siNums[10];

	switch (ch[2])
	{
	case '=':
		if ( ch[3] == '?' )
		{
			at_output_msg2((byte *) DS_RANGE);
		}
		else 
		{  			
			if (at_SIwithinrange(&ch[3], (byte *) DS_RANGE, siNums))
			{
				if (siNums[0] == 3)
					G(S).ModemOptions.Compression |= V42BIS_COMP;	//+DS=3,0
				else
					G(S).ModemOptions.Compression &= ~V42BIS_COMP;	//+DS=0,0
			}
			else
			{
				at_cmd_err_ret();
				return; 
			}
		}
		break;
	case '?':
		x_strcpy(txchar, (CBP) DS);
#ifdef MODEM_Z80
		if ( G(S).ModemOptions.Compression & V42BIS_COMP )
			x_strcat(txchar, (CBP) "3,0,1024,32");
		else
			x_strcat(txchar, (CBP) "0,0,1024,32");
#else
		if ( G(S).ModemOptions.Compression & V42BIS_COMP )
			x_strcat(txchar, (CBP) "3,0,2048,32");
		else
			x_strcat(txchar, (CBP) "0,0,2048,32");
#endif	//MODEM_Z80
		at_output_msg2(txchar);
		break;
		
#if defined(V44)
	case '4':
		if ('4' != ch[3]
#if defined(MODEM_Z80)
			|| !(1 & z80_v92cap)
#endif // MODEM_z80
			)
		{
			at_cmd_err_ret();
			return;
		}

		switch (ch[4])
		{
		case '=':				// AT+DS44=
			if ( ch[5] == '?' )
			{
				// AT+DS44=? - print possible values for V.44 parameters
				at_output_msg2((byte *) DS44_RANGE);
			}
			else 
			{  			
				// if modem is not on line and user's entries are
				// within range then update the global data.
				if (MS_ON_DIAL != G(x_modem_state) &&
					at_SIwithinrange(&ch[5], (byte *) DS44_RANGE, siNums))
				{
					if (siNums[0] != 0)
						G(S).ModemOptions.Compression |= V44_COMP;
					else
						G(S).ModemOptions.Compression &= ~V44_COMP;

					// let's set the rest of the parameters.

					// max_codewords_tx
					if (-1 == siNums[3])
						siNums[3] = V44_P1T;

					// max_codewords_rx
					if (-1 == siNums[4])
						siNums[4] = V44_P1R;

					// max_string_tx
					if (-1 == siNums[5])
						siNums[5] = V44_P2T;

					// max_string_rx
					if (-1 == siNums[6])
						siNums[6] = V44_P2R;

					// max_history_tx
					if (-1 == siNums[7])
						siNums[7] = (word) V44_P3T;

					// max_history_rx
					if (-1 == siNums[8])
						siNums[8] = (word) V44_P3R;

#if defined(MODEM_Z80)
					if ( v44_set_params( siNums[3], siNums[4], (byte) siNums[5],
							(byte) siNums[6], siNums[7], siNums[8] ) != TRUE ) {
						at_cmd_err_ret();
						return; 
					}
#endif // MODEM_Z80
				}
				else
				{
					at_cmd_err_ret();
					return; 
				}
			}
			break;
		case '?':	// AT+DS44? - print current values
			x_strcpy(txchar, (CBP) DS44);
			if (G(S).ModemOptions.Compression & V44_COMP)
				x_strcat(txchar, (CBP) "3,0,0,");
			else
				x_strcat(txchar, (CBP) "0,0,0,");

			// max codewords, TX and RX
			(void) at_cat_num(txchar, (word)G(v44_en_n2), ',');
			(void) at_cat_num(txchar, (word)G(v44_de_n2), ',');

			// max string length, TX and RX
			(void) at_cat_num(txchar, (word)G(v44_en_n7), ',');
			(void) at_cat_num(txchar, (word)G(v44_de_n7), ',');

			// max history size, TX and RX
			(void) at_cat_num(txchar, (word)G(v44_en_n8), ',');
			(void) at_cat_num(txchar, (word)G(v44_de_n8), 0);

			at_output_msg2(txchar);
			break;
		default:
			at_cmd_err_ret();
			return;
		}
		break;
#endif // V44 - DS44
	default:					  // error
		at_cmd_err_ret();
		return;	
	}
	G(at_result_code) = OK;
}
#endif //V25TER

#if defined (V25TER) || defined (V80)
/****************************************************************
Routine : at_data_remain
Description :
	+ETBM command - call termination buffer management
*****************************************************************/
void at_data_remain(byte *ch)
{
	short int siNums[10];

	//we support only option 0, so the only accepted value will be 0,0,0
	switch ( ch[4] )
	{
	case '=':
		if ( ch[5] == '?' )
		{
			at_output_msg2((byte *) ETBM_RANGE);
			G(at_cmd_ptr)++ ;
			break ;
		}
		else 
		{  			
			if (!at_SIwithinrange( &ch[5], (byte *) ETBM_RANGE, siNums))
			{
				at_cmd_err_ret();
				return; 
			}
		} 
		break ;
		
	case '?':
		at_output_msg2((byte *) "+ETBM: 0,0,0");
		break;
		
	default:
		at_cmd_err_ret();
		return; 
	}
	G(at_result_code) = OK;
}

/****************************************************************
Routine : at_break_sel
Description :
	+EB command: break handling in error control operation
*****************************************************************/
void at_break_sel ( byte *ch)	
{
	byte buf[50], bVal;
	short int siNums[10];
	signed char scVal;

	switch (ch[2])
	{
	case '=':
		if ( ch[3] == '?' )
		{
			at_output_msg2((byte *) EB_RANGE);
		}
		else
		{	
			if (at_SIwithinrange( &ch[3], (byte *) EB_RANGE, siNums))
			{
				bVal = (byte) siNums[0]; // opt for Z80
				switch (bVal)
				{
				case 0 :
					G(S).ModemOptions.BreakControl = 0;
					break;
				case 1 :
					G(S).ModemOptions.BreakControl = 5;
					break;
				case 2 :
					G(S).ModemOptions.BreakControl = 3;
					break;
				case 3 :
					G(S).ModemOptions.BreakControl = 1;
					break;
				}
				
				scVal = (signed char) siNums[2];
				if (scVal >= 0)
				{
					G(S).ModemOptions.BreakLength = (byte) (scVal/10);
				}
			}			
			else 
			{
				at_cmd_err_ret();
				return;
			}
		}
		break ;
		
	case '?':
		x_strcpy(buf, (CBP) "+EB: ");
		switch ( S.ModemOptions.BreakControl )
		{
		case 0:
		case 4:
		case 2:
			x_strcat(buf, (CBP) "0,0,");
			break ;
		case 5:
			x_strcat(buf, (CBP) "1,0,");
			break ;
		case 3:
			x_strcat(buf, (CBP) "2,0,");
			break ;
		case 1:
			x_strcat(buf, (CBP) "3,0,");
			break ;
		}
		at_output_msg_strdec((char *) buf,
							 (word)(G(S).ModemOptions.BreakLength*10));
		break;
		
	default:
		at_cmd_err_ret();
		return ;
	}
	G(at_result_code) = OK;
}

#if defined(HOMOL)
// The countries below are ordered acording to their
// values in the #define country codes in llglob_d.h
const byte at_CountryTbl[]=
{
	0x09,//Australia
	0x0F,//Belgium
	0x31,//Denmark
	0x3C,//Finland
	0x3D,//France
	0x04,//Germany
	0x7B,//Netherlands
	0x59,//Italy
	0x7E,//NewZealand
	0x82,//Norway
	0xA0,//Spain
	0xA5,//Sweden
	0xA6,//Switzerland
	0xB4,//UK
	0x0A,//Austria
	0x00,//Japan
	0x26,//China
	0x61,//Korea
	0x6C,//Malaysia
	0x9C,//Singapore
	0x26,//Taiwan(China)
	0xA9,//Thailand
	0x54,//Indonesia
	0x8B,//Portugal
	0xB5,//USA
	0x57,//Ireland
	0x42,//Germany (former GDR)
	0xFF//<- End Of List
};
#endif //HOMOL
#endif	//V25TER || V80

#ifdef V25TER

// +G table for the items that have a string to send
struct at_plusg_str
{
	const char *gname;
	const char *infoStr;
};

const struct at_plusg_str at_plusg_tbl[] =
{
	{ "CAP",	MODEM_CAPABILITIES },
	{ "MI",		"Lucent Technologies" },
	{ "MR",		VERSION_STR },
	{ "SN",		V25TER_IDSTRING },
	{ "MM",		NULL },

	// +GCI.  this special case must be last in this table
	{ "CI",		NULL }
};

// number of elements in at_plusg_tbl is AT_PGSIZE
#define AT_PGSIZE		(sizeof(at_plusg_tbl) / sizeof(struct at_plusg_str))
extern void at_display_id(void);

//*****************************************************************************
// Routine : at_v25ter_g
// Description :
//        This routine parses the V.25ter "AT+G" commands.
//****************************************************************************/
void at_v25ter_g(byte *ch)
{
	byte txchar[100], i, *pTbl, *pUser = NULL;
	struct at_plusg_str *pAtTbl = (struct at_plusg_str *) at_plusg_tbl;
#if defined(HOMOL)
	byte j, bVal;
	word val;
#endif
	
	// search for the user-entered string in the at_plusg_tbl table.
	for (i=0; i<AT_PGSIZE; i++, pAtTbl++)
	{
		pTbl = (byte *) pAtTbl->gname;
		pUser = &ch[1];

		while (*pUser && *pTbl && *pTbl == *pUser)
		{
			pTbl++;
			pUser++;
		}

		if (!*pTbl)
			break;
	}

	if (AT_PGSIZE == i)
	{
		x_debug_msg("didn't find this at+g command");
		at_cmd_err_ret();
		return;
	}

	// set up for the '+Gxx: ' display string
	// that's usually needed.
	txchar[0] = '+';
	txchar[1] = 'G';
	txchar[2] = 0;
	x_strcat(txchar, (CBP) pAtTbl->gname);
	x_strcat(txchar, (CBP) ": ");

	// special case for AT+GCI
	if (AT_PGSIZE - 1 == i)
	{
#ifdef HOMOL
		if ('=' == *pUser)
		{	
			pUser++;
			if ('?' == *pUser)  // display list of supported countries
			{
				x_strcat(txchar, (CBP) "(");
				j=7; // next char position
				for (i=0; at_CountryTbl[i]!=0xFF; i++) 
				{
					j = (byte) (j + at_itoa(at_CountryTbl[i], &txchar[j], HEX));
					txchar[j++] = ',';
				}
				txchar[j-1]=')';
				txchar[j]=0; // end of line
				at_output_msg2(txchar);
			}
			else      // set country Id - AT+GCI=xx
			{
				if (2 != at_atoi(&ch[4], &val, HEX))
				{
					at_cmd_err_ret ();
					return;
				}
				bVal = (byte) val;
				if (bVal == 0x42)
					bVal = 4;// former GDR is now Germany
				i=0;
				while (at_CountryTbl[i++] != bVal)
				{
					if (at_CountryTbl[i]==0xFF)	// end of supported values?
					{ 
						at_cmd_err_ret();
						return;
					}
				}
				write_eeprom(COUNTRY_ID, i);	// use index as country
				G(x_test_mode_on) = FALSE;
				x_init_modem_options();
				ll_save_modem_options(); 				
				x_output(IO_OUTPUT_INIT);  // init bamil & mercury I/O pins
				dp_init_blacklist();
				G(at_result_code) = OK;
			}
		}
		else // AT+GCI? (or other, not checking final character)
		{
			// display current country id
			at_itoa(at_CountryTbl[(G(S).ModemOptions.CountryId)-1],
					&txchar[6], HEX);
			at_output_msg2(txchar);
		}
#endif
		return;
	}

	// must end with NULL or '?' or '=?'
	if (*pUser && ('?' != *pUser || 0 != pUser[1]) &&
		('=' != *pUser || '?' != pUser[1] || 0 != pUser[2]))
	{
		x_debug_msg("bad ending for at+g command");
		at_cmd_err_ret();
		return;
	}

	// for AT+GMM, we'll give the same Idstring as the ati command
	if (4 == i)
	{
		at_output_msg2(txchar);
		at_display_id();
	}
	else
	{
		// Not the special case.  we now need to display
		// the '+Gxx: ' string followed by the information.
		x_strcat(txchar, (CBP) pAtTbl->infoStr);
		at_output_msg2(txchar);
	}

	G(at_result_code) = OK;
}


/****************************************************************
Routine : at_v25ter_dte_rate
 Description : displays current DTE rate in V25ter format
*****************************************************************/
void at_v25ter_dte_rate(void)
{
	if (v25teroptions.ilrr)      // if +ILRR enabled
	{
		at_output_msg_strstr(
			ILRR,
			(char *) DteRate_String[G(S).ModemOptions.DteRate-1]);
	}
}

/****************************************************************
Routine : at_v25ter_dr
 Description : displays current data compression protocol
*****************************************************************/
void at_v25ter_dr ( void )
{
	if (v25teroptions.dr)      // if +DR enabled
	{
		if ( G(x_modem_ec) == EC_V42V44 )
		{
			at_output_msg2((byte *) V44_ENABLED);
		}
		else if ( G(x_modem_ec) == EC_V42B )
		{
			at_output_msg2((byte *) V42BIS_ENABLED);
		}
		else
		{
			at_output_msg2((byte *) V42BIS_DISABLED);
		}
	}
}

/****************************************************************
Routine : at_v25ter_er
 Description : displays current error control protocol
*****************************************************************/
void at_v25ter_er ( void )
{
	if(v25teroptions.er)      // if +ER enabled
	{
		switch (G(x_modem_ec))
		{
		case EC_V42V44:
		case EC_V42B:
		case EC_V42:
			tmpCp = "LAPM";
			break;
		case EC_MNP5:
		case EC_MNP4:
		case EC_MNP3:
		case EC_MNP2:
			tmpCp = "ALT";
			break;
		default:
			tmpCp = "NONE";
		}
		at_output_msg_strstr(ER, tmpCp);
	}
}

#endif	//V25TER

#if defined (V25TER) || defined (V80)
/****************************************************************
Routine : at_dte_rate
Description :
	handles the +IPR command
*****************************************************************/
void at_dte_rate(byte *ch)							//+ipr
{
	byte buf[100] ;
	long i;
  
	switch ( ch[3] )
	{
	case '=':
		if ( ch[4] == '?' )
		{
			at_output_msg2((byte *) IPR_RANGE);
		}
		else
		{		
			if ( !at_atoint( &ch[4], &i, DECIMAL ) )
			{	
				at_cmd_err_ret();
				return;
			}
			else
			{
				V25ter_DteRate = 0;
				if ( i >= 115200 )
					G(S).ModemOptions.DteRate = DTE_115200 ;	
				else if ( i >= 57600 )
					G(S).ModemOptions.DteRate = DTE_57600 ;
				else
				{
					// since i is in the 16-bit range
					// we'll use words here to save space on Z80
					word iw = (word) i;

					if (iw >= 38400 )
						G(S).ModemOptions.DteRate = DTE_38400 ;	
					else if (iw >= 19200 )
						G(S).ModemOptions.DteRate = DTE_19200 ;	
					else if (iw >= 14400 )
						G(S).ModemOptions.DteRate = DTE_14400 ;	
					else if (iw >= 9600 )
						G(S).ModemOptions.DteRate = DTE_9600 ;	
					else if (iw >= 4800 )
						G(S).ModemOptions.DteRate = DTE_4800 ;	
					else if (iw >= 2400 )
						G(S).ModemOptions.DteRate = DTE_2400 ;	
					else if (iw >= 1200 )
						G(S).ModemOptions.DteRate = DTE_1200 ;	
					else if (iw >= 600 )
						G(S).ModemOptions.DteRate = DTE_600 ;	
					else if (iw >= 300 )
						G(S).ModemOptions.DteRate = DTE_300 ;	
					else if (iw >= 110 )
						G(S).ModemOptions.DteRate = DTE_110 ;	
					else
					{
						G(S).ModemOptions.DteRate = DTE_115200 ;
						V25ter_DteRate = 1;
					}
				}
			}				
		} 				  
		break ;		  
		
	case '?':
		x_strcpy(buf, (CBP) IPR ) ;
		if ( V25ter_DteRate == 0 )
			x_strcat(buf, DteRate_String[G(S).ModemOptions.DteRate-1]);
		else
			x_strcat(buf, (CBP) "0");
		at_output_msg2(buf);
		break;
						
	default:
		at_cmd_err_ret();
		return;				 
	}   								  
	G(at_result_code)=OK;	      
}
#endif //V25TER || V80

#if defined (V25TER) || defined (V80)
//*****************************************************************************
// Routine : at_v25ter_i
// Description :
//        This routine parses the V.25ter "AT+I" commands.
//****************************************************************************/
void at_v25ter_i(byte *ch)
{
	byte txchar[25];
	short int siNums[10];
 
	//	AT+IFC - DTE-DCE local flow control
	if (( ch[1] == 'F') && (ch[2] == 'C'))
	{	 		
		if ( ch[3] == '=' )   // set flow control
		{  			
			if (  ch[4] == '?' )  // display list of supported values
			{
				at_output_msg2((byte *) IFC_RANGE);
			}
			else      // set flow control value
			{
				if (at_SIwithinrange(&ch[4], (byte *) IFC_RANGE, siNums))
				{
					if (siNums[0] == siNums[1])
					{
						byte n = (byte) siNums[0];	// byte => smaller on Z80

						switch (n)
						{
						case 0:
							G(S).ModemOptions.FlowControl = NO_FLOWCTRL ;
							break;
						case 1:
							G(S).ModemOptions.FlowControl = SW_FLOWCTRL ;
							break;
						case 2:
							G(S).ModemOptions.FlowControl = HW_FLOWCTRL ;
							break;
						default:
							at_cmd_err_ret();
							return;
						}
						G(at_result_code) = OK;
						return;
					}
				}

				at_cmd_err_ret();
				return;
			}																    
		}
		else if ( ch[3] == '?' )
		{
			x_strcpy(txchar, (CBP) IFC);
			(void) at_cat_num(txchar, (word)G(S).ModemOptions.FlowControl,',');
			(void) at_cat_num(txchar, (word)G(S).ModemOptions.FlowControl, 0);
			at_output_msg2(txchar);
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
		G(at_result_code) = OK;
		return;
	}  // end of AT+IFC
	
	//  AT+ILRR - DTE-DCE local rate reporting
	else if (( ch[1] == 'L') && (ch[2] == 'R')&& (ch[3] == 'R'))
	{
		at_v250_OneByte(ch, 1, &v25teroptions.ilrr);
		return;
	} // end of AT+ILRR
	
	//	 AT+IPR - Fixed DTE rate
	else if (( ch[1] == 'P') && (ch[2] == 'R'))
	{
		at_dte_rate(ch);
	} // end of AT+IPR
	else
	{
#ifdef V80
		at_sync_flow_control(ch);
#else
		at_cmd_err_ret();
#endif	
		return;
	}	   
}
#endif	//V25TER || V80

#ifdef V25TER
//*****************************************************************************
// Routine : at_v25ter_m
// Description :
//        This routine parses the V.25ter "AT+M" commands.
//****************************************************************************/
void at_v25ter_m(byte *ch)
{
	if ( ch[1] == 'R')	 //	AT+MR 
	{  
		at_v250_OneByte(ch, 1, &v25teroptions.mr);
		return;
	}  // end of AT+MR
	else if ( ch[1] =='S' )
	{ 
		at_modulation(ch); // handle the AT+MS command
	}
	else
	{
		at_cmd_err_ret();
		return;
	}
}

//*****************************************************************************
// Routine : at_v25ter_d
// Description :
//        This routine parses the V.25ter "AT+D" commands.
//****************************************************************************/
void at_v25ter_d(byte *ch)
{
#if defined(V44) //msm//
	short int siNums[10];	 // array of integers for the parameters
#endif //msm//

	if ( ch[1] == 'R')	 //	AT+DR - Data Compression Reporting Control
	{  
		at_v250_OneByte(ch, 1, &v25teroptions.dr);
		return;
	}  // end of AT+DR
#if defined(V44)
	else if (ch[1] =='C' &&	// AT+DCS - selection of data compression alg.
			 ch[2] =='S')
	{
		if (ch[3] == '=')			 // +DCS=
		{	 	
			// +DCS=?    display list of supported values
			if (ch[4] == '?')
			{ 	
				at_output_msg2((byte *) DCS_RANGE);
			}
			else      // set compression algorithm
			{  			
				if (at_SIwithinrange(&ch[4], (byte *) DCS_RANGE, siNums) &&
			  		siNums[0] >=0 && siNums[1] >= 0)
				{
					byte v44 = (byte) siNums[1];
					byte comp = (byte) (((byte) siNums[0]) ? V42BIS_COMP:0);

					if (v44)
					{
						comp |= V44_COMP;
						if (2 == v44)
							comp |= V44S_COMP;	// 'smart'
					}
#if defined(MODEM_Z80)
					// don't allow V.44 unless we're V.92 capable
					if (!(1 & z80_v92cap) && v44)
					{
						at_cmd_err_ret();
						return;
					}
#endif // MODEM_Z80

					G(S).ModemOptions.Compression = comp;
				}
				else
				{
					at_cmd_err_ret();
					return; 
				}
			} 
		}
		else if (ch[3] == '?')	// AT+DCS?
		{
			byte txchar[12];

			// current value of compression algorithms
			x_strcpy(txchar, (CBP) "+DCS: 1,1");

			// replace the '1' above with a '0' for the
			// algorithm(s) that are not enabled.
			if (!(G(S).ModemOptions.Compression & V42BIS_COMP))
				txchar[6] = '0';

			if (!(G(S).ModemOptions.Compression & V44_COMP))
				txchar[8] = '0';

			if (G(S).ModemOptions.Compression & V44S_COMP)
				txchar[8] = '2';		// smart V.44

			at_output_msg2(txchar);
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
		G(at_result_code) = OK;
	}	// end of +DCS
#endif // V44
	else if ( ch[1] =='S' )
	{ 
		at_comp_sw(ch);	// AT+DS, AT+DS44
	}
	else
	{
		at_cmd_err_ret();
		return;
	}
}
#endif	//V25TER

#if defined ( V25TER ) || defined ( V80 )
//*****************************************************************************
// Routine : at_v25ter_e
// Description :
//        This routine parses the V.25ter "AT+E" commands.
//****************************************************************************/
void at_v25ter_e(byte *ch)
{
	byte dummyByte = 0;

	if ( ch[1] == 'R')			 //AT+ER - Error Control Reporting
	{  	
		at_v250_OneByte(ch, 1, &v25teroptions.er);
		return;
	}  // end of AT+ER
	else if ( (ch[1] == 'T') && (ch[2] == 'B') && (ch[3] == 'M' ))
	{  		
		at_data_remain (ch) ; // AT+ETBM command 
	}
	else if ( ch[1] == 'B')
	{  		
		at_break_sel (ch) ; // AT+EB command
	}
	else if ( ch[1] == 'F' && ch[2] == 'C' && ch[3] == 'S' )
	{  		
		// AT+EFCS command 
		at_v250_OneByte(ch, 0, &dummyByte);
		return;
	}
	else if ( ch[1] == 'S'  )
	{  		
		if ( ch[2] == 'R' )
		{  			
			// AT+ESR command
			at_v250_OneByte(ch, 0, &dummyByte);
			return;
		}
		else
			at_error_control_sw(ch); 		// AT+ES command
	}
	else
	{
		at_cmd_err_ret();
		return;
	}
}
#endif //V25TER || V80

#ifdef V25TER
/****************************************************************
Routine : at_display_v25ter_connect_msg
Description :
	display the AT-V25ter connect message
*****************************************************************/
void at_display_v25ter_connect_msg ( void )
{
	at_v25ter_mod_carrier();   // +MR
	at_v25ter_er();            // +ER
	at_v25ter_dr();            // +DR
	at_v25ter_dte_rate();      // +ILRR
}
#endif // V25TER

#if defined (V25TER) || defined (V80)
/****************************************************************
Routine : at_v25ter
Description :
	process the AT-V25ter  command
*****************************************************************/
void at_v25ter(void)
{
	byte ch[ATMAX];				// v25ter cmd buffer
	byte *v25ter_cmd_ptr;		// v25ter cmd pointer
	byte txchar[60] ;
	byte more_cmd  ;
	
	more_cmd = 0 ;
	v25ter_cmd_ptr = ch;
	G(at_cmd_ptr)--;
	txchar[0] = *G(at_cmd_ptr)++;
	while ( (txchar[0] != 0) && (txchar[0] != ';') )
	{
		*v25ter_cmd_ptr++ = txchar[0];		  // put one v25ter command to ch
		txchar[0] = *G(at_cmd_ptr)++;
	}
	*v25ter_cmd_ptr = 0;          // terminate ch with NULL

	// this mechanism has the disadvantage that it ignores anything
	// beyond a good command ie a second command if not separated by a
	// ';' will be ignored. pww
	if (txchar[0] == ';')
		more_cmd = 1;           // not end yet

	// command parsing goes here
	switch (ch[0])
	{
	case 'E':
		at_v25ter_e(ch);
		break;
	case 'I':
		at_v25ter_i(ch);
		break;
#ifdef V25TER	
	case 'D':
		at_v25ter_d(ch);
		break;
	case 'G':
		at_v25ter_g(ch);
		break;
	case 'M':
		at_v25ter_m(ch);
		break;
	case 'P':
		at_v25ter_p(ch);
		break;
#endif //V25TER
	case 'A':
#ifdef V25TER	
		if ((ch[1] == 'S') && (ch[2] == 'T') && (ch[3] == 'O'))
			at_v25ter_asto(ch);
		else
#endif //V25TER
		{
#if defined (V80) || defined (V8BIS)
			at_v8_v8bis_cmd(ch);
#endif	//V80 || V8BIS
		}
		break;
	default:
		at_cmd_err_ret();
		return;  // returns if invalid command
	}
	
	if ( G(at_result_code) == ERROR )
		return;
	
	if (more_cmd)			 // was good so if there is more.
		atparse_cmd();
	else
	{
		if ( G(at_result_code) != NO_MSG )
			at_output_msg(NULL, 0);
		G(at_state) = AT_IDLE;
	}
}
#endif // V25TER || V80
