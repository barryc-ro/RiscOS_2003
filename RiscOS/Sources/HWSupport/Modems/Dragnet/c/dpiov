/*name and version number:@(#)dpiov.c	1.108*/
/*date of get: 		  01/12/01 11:49:16*/
/*date of delta:	  01/11/01 13:14:01*/
/****************************************************************
File :	dpiov.c
Description :
	Contains library routines for IO functions for VENUS.
Procedures Contained :
	x_input
	x_output
Revision History :
	Initials	Date		Change
	ATV     	11/14/95	Initial
	MAH     	10/01/96	VENUS
	G.LIU     	12/15/97	major changes for homol
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "dpglob.h"
#include "z80glob.h"
#include "v32vterb.h"
#include "z80usb.h"

#if !defined(CS_MODEM) || defined (CLASS2_FAX)
# include "dpdspvfx.h"
# include "fax_c2.h"
#endif

#if defined(CIDCW)
# include "dpvcid2.h"
  extern void dp_cidcw(void);
#endif

#if defined(V92_MODEM_ON_HOLD)
# include "z80flash.h"
# if defined(VENUS_AT_CS) || defined(CS_MODEM) || defined (COPERNICUS)
#  include "dpv92cs0.h" // server v.92 modem on hold
# else // Client
#  include "dpv92mh0.h"	// v.92 modem-on-hold on call-waiting
# endif
#endif

#include "dpv17wa.h"	// receive drop-out workaround
#include "allglobs.h"

#define IO_ON	0
#define IO_OFF	1
#define NOT_USED 0xFFFF

/********************************************************************
	Use folowing defines to assign BIO pins to product specific
   functions. The pin information is encoded as follows
   xxxx xxxx xxxx xxxx
   | |    bits 0-7.. : bio pin (1=bio0, 2=bio1, 4=bio3,...)
   | bits 7-11 ..... : port (0=BIOA, 1=BIOB, 2=BIOC, 3=BOM)
   bit 12 .......... : 0=active low, 1=active high.
********************************************************************/
#define BIOA0_AL	0x0001	//BIOA bit 0 active low
#define BIOA0_AH	0x1001	//BIOA bit 0 active high
#define BIOA1_AL	0x0002	//BIOA bit 1 active low
#define BIOA1_AH	0x1002	//BIOA bit 1 active high
#define BIOA2_AL	0x0004	//BIOA bit 2 active low
#define BIOA2_AH	0x1004	//BIOA bit 2 active high
#define BIOA3_AL	0x0008	//BIOA bit 3 active low
#define BIOA3_AH	0x1008	//BIOA bit 3 active high
#define BIOA4_AL	0x0010	//BIOA bit 4 active low
#define BIOA4_AH	0x1010	//BIOA bit 4 active high
#define BIOA5_AL	0x0020	//BIOA bit 5 active low
#define BIOA5_AH	0x1020	//BIOA bit 5 active high
#define BIOA6_AL	0x0040	//BIOA bit 6 active low
#define BIOA6_AH	0x1040	//BIOA bit 6 active high
#define BIOA7_AL	0x0080	//BIOA bit 7 active low
#define BIOA7_AH	0x1080	//BIOA bit 7 active high

#define BIOB0_AL	0x0101	//BIOB bit 0 active low
#define BIOB0_AH	0x1101	//BIOB bit 0 active high
#define BIOB1_AL	0x0102	//BIOB bit 1 active low
#define BIOB1_AH	0x1102	//BIOB bit 1 active high
#define BIOB2_AL	0x0104	//BIOB bit 2 active low
#define BIOB2_AH	0x1104	//BIOB bit 2 active high
#define BIOB3_AL	0x0108	//BIOB bit 3 active low
#define BIOB3_AH	0x1108	//BIOB bit 3 active high
#define BIOB4_AL	0x0110	//BIOB bit 4 active low
#define BIOB4_AH	0x1110	//BIOB bit 4 active high
#define BIOB5_AL	0x0120	//BIOB bit 5 active low
#define BIOB5_AH	0x1120	//BIOB bit 5 active high
#define BIOB6_AL	0x0140	//BIOB bit 6 active low
#define BIOB6_AH	0x1140	//BIOB bit 6 active high
#define BIOB7_AL	0x0180	//BIOB bit 7 active low
#define BIOB7_AH	0x1180	//BIOB bit 7 active high

#define BIOC0_AL	0x0201	//BIOC bit 0 active low
#define BIOC0_AH	0x1201	//BIOC bit 0 active high
#define BIOC1_AL	0x0202	//BIOC bit 1 active low
#define BIOC1_AH	0x1202	//BIOC bit 1 active high
#define BIOC2_AL	0x0204	//BIOC bit 2 active low
#define BIOC2_AH	0x1204	//BIOC bit 2 active high
#define BIOC3_AL	0x0208	//BIOC bit 3 active low
#define BIOC3_AH	0x1208	//BIOC bit 3 active high
#define BIOC4_AL	0x0210	//BIOC bit 4 active low
#define BIOC4_AH	0x1210	//BIOC bit 4 active high
#define BIOC5_AL	0x0220	//BIOC bit 5 active low
#define BIOC5_AH	0x1220	//BIOC bit 5 active high
#define BIOC6_AL	0x0240	//BIOC bit 6 active low
#define BIOC6_AH	0x1240	//BIOC bit 6 active high
#define BIOC7_AL	0x0280	//BIOC bit 7 active low
#define BIOC7_AH	0x1280	//BIOC bit 7 active high

/* Mercury control pin definitions */
#define BOM0_AL	0x0302	//BOM0 active low
#define BOM0_AH	0x1302	//BOM0 active high
#define BOM1_AL	0x0304	//BOM1 active low
#define BOM1_AH	0x1304	//BOM1 active high
#define BOM2_AL	0x0308	//BOM2 active low
#define BOM2_AH	0x1308	//BOM2 active high

/****************************************************************
All apollo products are expected to use following predefined 
IO pin assignments :

LINESENSE	:BIOB5 - Parallel handset (and loop current) sense (I).
CALLERID	:BIOA6 - Caller ID relay (O).
DATAVOICE	:BIOA5 - Data-Voice relay (O).
AUDIOCODEC	:BIOB7 - Audio codec request (O).
ACOHRLY		:BOM0  - Provides AC path, used in conjunction with DC
					 OH relay (O).
SHUNTRLY	:BOM1  - Pulse shaping relay (O).
EEPROMDATA	:BIOC0 - NVRAM data (I/O) - initialize as input.
EEPROMCLOCK	:BIOC1 - NVRAM clock (I/O) - initialize as input,
					define as output when reading/writing and
					then set back as input after read/write.
RS232_RI	:BIOB2 - Ring Indicate to DTE for external modem
RS232_DSR	:BIOB1 - Ring Indicate to DTE for external modem
RS232_CD	:BIOB0 - Carrier Detect to DTE for external modem.
Hardware detection : BIOB6, BIOB4, BIOB3 (I)
****************************************************************/

#define EEPROMCLOCK BIOC1_AL
#define EEPROMDATA  BIOC0_AL

#if defined(ATHENA_LEDS)
# define USB_OH_LED	BIOC4_AL
# define DATA_LED	BIOC3_AL
# define READY_LED	BIOC2_AL
#else
# define USB_OH_LED	BIOC7_AL
#endif

#if defined(EXT_MODEM) || defined(THUNDER)
# define RS232_RI	BIOB2_AL
# define RS232_DSR	BIOB1_AL
# define RS232_CD	BIOB0_AL
#endif

#if defined(CS_4)
# define GREEN_LED	BIOB7_AL
# define YELLOW_LED	BIOA6_AL
#endif

#define TADOUT		BIOC6_AL
#define CALLERID	BIOA6_AL
#define LINESENSE	BIOB4_AL
#if !defined(TQFP128) || !defined(USB_MODEM)
# define LOCFON		BIOB5_AL	// USB in 128 pin device uses B5
								// as an Interrupt from ATLAS
#endif

#define AUDIOCODEC	BIOB7_AL

//-----------------------------------------------------
// BIOA direction definitions. 0 = input, 1 = output
//-----------------------------------------------------
// A6 is caller ID - CIDN
//-----------------------------------------------------
#if defined(COPERNICUS) || defined(CS_MODEM) || defined(CS_4)
# define BIOAINIT		0x00	// BIOA - no A outputs for Central Site
#elif defined(USB_MODEM)
# define BIOAINIT		0x80	// BIOA - B7 is Rdy (green) LED
								//		  B6 is Soft-Disconnect from USB
								//			  Leave as input for now!!
#elif defined(VENUS_WORLD_DAA) && defined(DC0)
# define BIOAINIT		0x60	// BIOA - 5,6 output
#else
# define BIOAINIT		0x40	// BIOA - 6 output
#endif
//-----------------------------------------------------

//-----------------------------------------------------
// BIOB direction definitions. 0 = input, 1 = output
//-----------------------------------------------------
// B7 is MUTE
// B5 is LOCFON
// B4 is LINESENSE
// B2 is RI  for External Modem
// B1 is DSR for External Modem
// B0 is DCD for External Modem
//-----------------------------------------------------
#if defined(EXT_MODEM)
# define BIOBINIT		0xA7
#elif defined(USB_MODEM)
# define BIOBINIT		0x81	// B7 is RAM on switch
								//   (always on after Bus enumeration)
								// B0 is LED2 (red data LED)
#elif defined(CS_4)
# define BIOBINIT		0x07	//  B0-2 is Red LED on Claudia
#else
# if defined(COPERNICUS)
	// for copernicus we don't have these as outputs
#  define BIOBINIT		0x20	// BIOB5 output for MCT testing
# elif defined( CS_MODEM )
#  define BIOBINIT		0x00
# else
#  define BIOBINIT		0xA0
# endif
#endif
//-----------------------------------------------------

//-----------------------------------------------------
// BIOC direction definitions. 0 = input, 1 = output
//-----------------------------------------------------
// C7 is Off Hook LED
// C6 is TADOUT
// C1 is EECK
// C0 is EEDIO
//-----------------------------------------------------
#if defined(CS_MODEM)
# define BIOCINIT		0x80
#elif defined(CS_4)
# define BIOCINIT		0x00
#elif defined(USB_MODEM)
# define BIOCINIT		0x80
#elif defined(EXT_MODEM) && defined(ATHENA_LEDS)
# define BIOCINIT		0x5e	// 0x42 plus bits 2,3,4 for LEDs
#elif defined(SHUNT)
# define BIOCINIT		0xC2	// enable BIOC7 also
#else
# define BIOCINIT		0x42
#endif
//-----------------------------------------------------

//-----------------------------------------------------
// Initial BIO state (this only matters for outputs)
//-----------------------------------------------------
//  BIOA reg
//-----------------------------------------------------
#if defined(USB_MODEM)
# define BIOAINITSTATE	0x00 // A7 is Rdy LED (0 is ON)
#elif (CS_4)
# define BIOAINITSTATE	0x00
#else
# define BIOAINITSTATE	0x60
#endif
//-----------------------------------------------------

//-----------------------------------------------------
//  BIOB reg
//-----------------------------------------------------
#if defined(EXT_MODEM)
# define BIOBINITSTATE	0xA5
#elif defined(CS_4)
# define BIOBINITSTATE	0x07
#elif defined(USB_MODEM)
# if defined(INVERTED_POWER_MODE)
#  define BIOBINITSTATE	0x00
# else
#  define BIOBINITSTATE	0x80
# endif
#else
# define BIOBINITSTATE	0xA0
#endif
//-----------------------------------------------------

//-----------------------------------------------------
//  BIOC reg
//-----------------------------------------------------
#if defined(USB_MODEM)
# define BIOCINITSTATE		0xC0
#elif defined(CS_4)
# define BIOCINITSTATE		0x07
#elif defined(SHUNT)
# define BIOCINITSTATE		0xC0 // active BIOC7 also
#elif defined(ATHENA_LEDS)
# define BIOCINITSTATE		0x5c // for leds
#else
# define BIOCINITSTATE		0x40
#endif
//-----------------------------------------------------

#ifdef VENUS_WORLD_DAA
# define COMPLEX_ALSB	0x06
# define REAL_ALSB		0x0c
# define LOOPLIMIT		BOM1_AL
# define LOOPVI			BOM2_AL
# define LOOPVI_German	BOM2_AH
# define SHUNTRLY		BIOC7_AL
# define PSTN			BIOA5_AL
# define OVERCURRENT	BIOB6_AL
#endif

#ifndef DATAVOICE	
# define DATAVOICE	NOT_USED
#endif
#ifndef CALLERID	
# define CALLERID	NOT_USED
#endif
#ifndef LINESENSE	
# define LINESENSE	NOT_USED
#endif
#ifndef AUDIOCODEC	
# define AUDIOCODEC	NOT_USED
#endif
#ifndef ACOHRLY	
# define ACOHRLY		NOT_USED
#endif
#ifndef SHUNTRLY
# define SHUNTRLY	NOT_USED
#endif
#ifndef RINGIMPEDANCE 	
# define RINGIMPEDANCE 	NOT_USED
#endif
#ifndef LOOPLIMIT
# define LOOPLIMIT	NOT_USED
#endif
#ifndef LOOPVI
# define LOOPVI		NOT_USED
#endif
#ifndef LOCFON
# define LOCFON		NOT_USED
#endif
#ifndef COMPLEXIMP
# define COMPLEXIMP	NOT_USED
#endif

#ifndef COMPLEX_ALSB
# define COMPLEX_ALSB	0x06
#endif
#ifndef REAL_ALSB
# define REAL_ALSB	0x0c
#endif
#ifndef COMPLEX_BOARD 
# define COMPLEX_BOARD 0
#endif

/****************************************************************
Routine : x_output_init
Description : This function is used to initialize the BIO 
*****************************************************************/
void x_output_init(void)
{
	//-------------------------------------------------
	// Initialize direction registers, input or output,
	// for the Bit I/O's, and set the initial states.
	//-------------------------------------------------
#if defined(THUNDER)
	if ( z80_modem_type == USB_INTERFACE )
	{
		// Direction registers for USB modem
		dp_regwrite( 0xb8, 0x80 );
		dp_regwrite( 0xba, 0x81 );
		dp_regwrite( 0xdb, 0x80 );

		// and initial states for USB modem
		dp_regwrite( 0xb9, 0x00 );
# if defined(INVERTED_POWER_MODE)
		dp_regwrite( 0xbb, 0x00 );
# else
		dp_regwrite( 0xbb, 0x80 );
# endif
		dp_regwrite( 0xdc, 0xC0 );
	}
	else // if ( z80_modem_type == EXT_INTERFACE )
	{
		// Direction registers for Serial modem
		dp_regwrite( 0xb8, 0x40 );      // BIO-A
		dp_regwrite( 0xba, 0xA7 );      // BIO-B
# if defined(ATHENA_LEDS)
		dp_regwrite( 0xdb, 0x5e );      // BIO-C
# else
		dp_regwrite( 0xdb, 0x42 );      // BIO-C
# endif

		// and initial states for Serial modem
		dp_regwrite( 0xb9, 0x60 );
		dp_regwrite( 0xbb, 0xA5 );
# if defined(ATHENA_LEDS)
		dp_regwrite( 0xdc, 0x5c );
# else
		dp_regwrite( 0xdc, 0x40 );
	}
# endif
#else
	dp_regwrite(0xb8, BIOAINIT);      // BIO-A
	dp_regwrite(0xba, BIOBINIT);      // BIO-B
	dp_regwrite(0xdb, BIOCINIT);      // BIO-C

# if !defined(CS_MODEM)
	// initialize states
	dp_regwrite(0xb9, BIOAINITSTATE);
	dp_regwrite(0xbb, BIOBINITSTATE);
	dp_regwrite(0xdc, BIOCINITSTATE);
# endif
#endif	// !THUNDER
}

/****************************************************************
Routine : readbio  
Description :
	This function is used to read status of a specified BIO pin.
Parameters in :
	portbit - port & bit information encoded in a word 
Parameters out :
	byte -  the actual bit value read (0 or 1)
*****************************************************************/
static byte readbio ( word portbit )
{
	byte bioreg ;
	byte biobit ;
	word port ;

	port =  (word) (portbit & 0xf00);
	bioreg = 0xb9 ;		//BIOA
	if ( port == 0x100 ) 
		bioreg = 0xbb ;		//BIOB
	else if ( port == 0x200 ) 
		bioreg = 0xdc ;		//BIOC

	biobit = (byte)(portbit & 0x0ff) ;
	return (byte) (dp_regread (bioreg) & biobit);
}

#if defined(VENUS_WORLD_DAA)
/****************************************************************
Routine : writebiom  
Description :
	This function is used to toggle a specified Mercury pin.
Parameters in :
	biom - BOM pin information encoded in a byte 
	value	- the bit value to be written
*****************************************************************/
static void writebiom(word portbit , byte state)
{
	byte bom = (byte) (portbit & 0x0f);

	if ( ( (state == IO_OFF) && !(portbit & 0x1000) )		// active low
		 || ( (state == IO_ON) && (portbit & 0x1000) ) )	// active high
	{
		G(S).ModemOptions.LineGainBLSB =
			(byte) (G(S).ModemOptions.LineGainBLSB | bom);
	}
	else
	{
		G(S).ModemOptions.LineGainBLSB =
			(byte)(G(S).ModemOptions.LineGainBLSB & (~bom));
	}

	dp_set_mercury_gain();
}
#endif // VENUS_WORLD_DAA

/****************************************************************
Routine : writebio  
Description :
	This function is used to write to a specified BIO pin.
Parameters in :
	portbit - port & bit information encoded in a word 
	value	- the bit value to be written
*****************************************************************/
static void writebio ( word portbit, byte state )
{
	byte bioreg ;
	byte biobit ;
	byte data ;
	word port ;

	biobit = (byte)(portbit & 0x0ff) ;
	if (biobit > 0x80)	// invalid bit
		return ;

	port =  (word) (portbit & 0xf00) ;
	bioreg = 0xb9;			//BIOA
	if ( port == 0x100 ) 
		bioreg = 0xbb ;		//BIOB
	else if ( port == 0x200 ) 
		bioreg = 0xdc ;		//BIOC
#ifdef VENUS_WORLD_DAA	
	else if ( port == 0x300 )	// BOM
	{
		writebiom ( portbit , state ) ;
		return ;
	}
#endif

	if ( ( (state == IO_OFF) && !(portbit & 0x1000) )		// active low
		 || ( (state == IO_ON) && (portbit & 0x1000) ) )	// active high

		data = (byte) (dp_regread (bioreg) | biobit);
	else
		data = (byte) (dp_regread (bioreg) & (~biobit));

	dp_regwrite (bioreg, data) ;
}

/****************************************************************
Routine : x_set_hardware_options

Description : Initialize all hardware dependent requirements
		for Mercury-based DAA
*****************************************************************/
void x_set_hardware_options(void)
{
#if defined(VENUS_WORLD_DAA)
    if (!G(dp_daa_is_perseus))
    {
	    if ( G(S).ModemOptions.ComplexImpedance & 0x02 ) //complex
	    {
		    x_debug_msg ( "dp - i/o complex imp selected" ) ;
		    G(S).ModemOptions.LineGainALSB = COMPLEX_ALSB;// Mercury Gn - CIOCA LSB
		    G(S).ModemOptions.LineGainBLSB |= 0x01 ;   //Mercury - CIOCB LSB - SELC
	    }
	    else
	    {
		    G(S).ModemOptions.LineGainBLSB &= 0xfe;   // Mercury - CIOCB LSB - SELC
	 	    G(S).ModemOptions.LineGainALSB = REAL_ALSB;// Mercury Gain - CIOCA LSB
	    }
	    x_debug_msg ( "dp - i/o homolgation board selected" ) ;
	    if ( G(S).ModemOptions.LoopLimitRly )		//BOM1
		    writebio(LOOPLIMIT, IO_ON);
	    if ( G(S).ModemOptions.LoopViRly )			//BOM2
		    writebio(LOOPVI, IO_ON);
	    if ( G(S).ModemOptions.RingImpedanceRly )	//BOM0
		    writebio(RINGIMPEDANCE, IO_ON);

	    dp_set_mercury_gain();
    }
#endif
}

/****************************************************************
Routine : x_input
Description :
	This function is used to read (input) hardware pins.
Parameters in :
	cmd - the output control command
Parameters out :
	byte -  the actual bit value read ( 0 or 1 )
*****************************************************************/
byte x_input(IO_COMMAND cmd)
{
	switch (cmd)
	{
		case IO_LOCAL_PHONE_OFFHOOK :
#if defined(CS_DIGITAL) || defined(PCMCIA_MODEM) || defined(KASHMIR) || !defined(MODEM_Z80)
			return FALSE;
#else
			// allow user to ignore "local phone" for
			// platforms that don't have a local phone
			if ((G(S).ModemOptions.wHayes95 & 2048) ||
				(readbio(LINESENSE) == 0))
			{
				return FALSE;
			}
			else
				return TRUE;
			break ;
#endif

		case IO_LOCAL_PHONE_ONHOOK :
#if defined(CS_DIGITAL) || defined(PCMCIA_MODEM) || defined(KASHMIR) || !defined(MODEM_Z80)
			return TRUE;
#else
			if ((G(S).ModemOptions.wHayes95 & 2048) ||
				(readbio ( LINESENSE ) == 0))
			{
				return TRUE;
			}
			else
				return FALSE;
			break ;
#endif

		case IO_EEPROM_DATA :
			return readbio( EEPROMDATA ) ;

#if defined(COPERNICUS) && !defined(CS_MODEM)
	case IO_RING_INDICATE_ON:
		return readbio((G(S).ModemOptions.NewCoperRing & 1) ? BIOA6_AL : BIOB7_AL);
#endif
#if defined(OCP)//Over current protection
		case IO_OVERCURRENT_DET :
			if (G(dp_daa_is_perseus))
			{
				// check dc_status DSP ram location
				if (dp_read_dsp_ram(0x1a07) & 1)
					return TRUE;
				return FALSE;
			}
			else
			{
				if (((readbio(OVERCURRENT) != 0) && (OVERCURRENT & 0x1000))
					|| ((readbio(OVERCURRENT) == 0) && !(OVERCURRENT & 0x1000)))
				{	
					x_debug_msg("IO OCP detected");
					return TRUE; // Over current detected
				}
				x_debug_msg("Fail IO OCP");
				return FALSE;
			}
#endif // OCP
	}
	return FALSE;
}

#if defined(COPERNICUS) && !defined(CS_MODEM)
/****************************************************************
Routine : dp_copernicus_dial()
Description :
		 Take care of everything necessary to let the VxD know
		 that we want to dial a phone number
*****************************************************************/
void dp_copernicus_dial(void)
{
	char *cp = G(dp_dial_string);

	// if we get to ';' before meaningful
	// digits then ignore this guy
	while (*cp)
	{
		if (';' == *cp)
		{
			// quit, this is just an offhook command.
			// we will ignore this.
			G(dp_state) = DP_WAIT_FOR_RING ;
			G(x_modem_state) = MS_IDLE;
			x_send_mail(IO_IDLE_STATE, IO_TASK, 0, 0); 
			x_send_mail(DP_AT_DIALDONE, AT_TASK, 0, 0);
			return;
		}

		if ((*cp >= '0') && (*cp <= '9'))
			break;		// go on, this is a good guy

		cp++;
	}

	G(dp_state) = DP_CALL_PROGRESS;
	G(dp_timer1) = G(dp_timer);
	x_set_current_time(&G(dp_long_timer));
	G(dp_threshold) = G(S).ModemOptions.CallProgressThreshold ;   
	dp_offhook_cmd();

	if (G(S).ModemOptions.NewCoperRing & 2)
	{
		x_output(IO_LOCAL_PHONE_ON);	// Tell ISDN VxD we want to call
	}
}

/****************************************************************
Routine : setComPort()
Description :

 Set com port sets the com port for the
 copernicus board based on the B4 and B3
 BIO pins
  B4  B3
  --  --
   0   0  COM1 - 0x03f8
   0   1  COM2 - 0x02f8
   1   0  COM3 - 0x03e8
   1   1  COM4 - 0x02e8
*****************************************************************/
void setComPort(void)
{
	byte hi;
	byte lo;

	hi = readbio(BIOB3_AL) ? 2 : 3;

	lo = readbio(BIOB4_AL) ? 0xe8 : 0xf8;

	// reprogram MCAD
	dp_regwrite(0xC3, lo);		// MCAD lower byte
	dp_regwrite(0xC4, hi);		// MCAD upper byte

	ddputs_nnl(" MCAD = ");
	sendHexByte(hi);
	sendHexByte(lo);
	sendDumbChar(0x0A); sendDumbChar(0x0D);
}
#else

/****************************************************************
Routine : dp_copernicus_dial() - (non-copernicus_at)
Description :
		non-copernicus z80 specific functions for dialing
*****************************************************************/
void dp_copernicus_dial(void)
{
}


#endif

#if defined(INT_MODEM) && !defined(COPERNICUS) && !defined(CS_MODEM)
/****************************************************************
Routine : setComPort()
Description :

 Set com port sets the com port for the ISA board
 based on the jumpers.

 BIOB6 -> 1 - Plug and play
		  0 - non-PnP.  Use jumpers as specified below.
			  (Note that user must also select IRQ jumper
			  manually as desired.)
 BIO pin  97 - RADIN  (BIOB3)
		  53 - RADOUT (BIOA5)

 1-2  B3 3-4 A5  port  
  --  -  --  -- ----
  OUT 1  OUT 1  COM1 - 0x03f8
   IN 0  OUT 1  COM2 - 0x02f8
  OUT 1   IN 0  COM3 - 0x03e8
   IN 0   IN 0  COM4 - 0x02e8
*****************************************************************/
void setComPort(void)
{
	byte hi;
	byte lo;

	// (Assume that B6 is an input.)

	// First see if plug and play is desired and
	// if so then we'll get out.
	if (readbio(BIOB6_AL))
	{
		ddputs_nnl("Plug and play ISA.  ");
		return;
	}

	// B3 is an input, don't need to do anything
	hi = readbio(BIOB3_AL) ? 3 : 2;

	// A5 is an input, don't need to do anything
	lo = readbio(BIOA5_AL) ? 0xf8 : 0xe8;

	// reprogram MCAD
	dp_regwrite(0xC3, lo);		// MCAD lower byte
	dp_regwrite(0xC4, hi);		// MCAD upper byte
	dp_regwrite(0xCC, 0x0D);	// Assign MIMIC IRQ B(=3) for this mode
								// then from there the jumper selects
								// which IRQ we're on.
	dp_regwrite(0xd6, 0x0D);	// IRQ B Driven always

	dp_regwrite(0xDE, dp_regread(0xde) | 0x40);	// disable FUGU
	ddputs_nnl("non-pnp, MCAD = ");
	sendHexByte(hi);
	sendHexByte(lo);
	sendDumbChar(0x0A); sendDumbChar(0x0D);
}
#endif

// Perseus initialization routines
#include "dpv2ps0.h"
#include "dpv2ps10.h"

word dp_dc_offset;

/****************************************************************
Routine : dp_set_homol_options
		(perseus)
*****************************************************************/
void dp_set_homol_options(void)
{
	dp_write_dsp_ram(0x19fe,
					 (word) (dp_dc_offset - G(S).ModemOptions.DCOffset1));

	dp_write_dsp_ram ( 0x1a3f, 0x1004) ; // Control Reg #1 with BIO2 on
	if ( G(S).ModemOptions.ComplexImpedance & 0x02 ) //complex
	{
		dp_write_dsp_ram ( 0x1a32, 0x261c) ; // AC1 - gain
		dp_write_dsp_ram ( 0x1a33, 0x024e) ; // AC2 - freq
		dp_write_dsp_ram ( 0x1a39, 0x000a) ; // 6.67 ma LMG & turn on emulation

		dp_write_dsp_ram ( 0x1a34, 0xfef1) ; //EQL1
		dp_write_dsp_ram ( 0x1a35, 0xf5e4) ; //EQL2
		dp_write_dsp_ram ( 0x1a36, 0x3e5e) ; //EQL3
		dp_write_dsp_ram ( 0x1a37, 0xf5e4) ; //EQL4
		dp_write_dsp_ram ( 0x1a38, 0xfef1) ; //EQL5
	}
	else
	{
		dp_write_dsp_ram ( 0x1a32, 0x0fe0) ; // AC1 - gain
		if ( G(S).ModemOptions.CountryId == INDIA )
			dp_write_dsp_ram ( 0x1a33, 0x0009) ; // AC2 - freq
		else
			dp_write_dsp_ram ( 0x1a33, 0x000f) ; // AC2 - freq
		dp_write_dsp_ram ( 0x1a39, 0x0008) ; //Turn on imp. emulation
	}
	// set current limit to 135mA when no offset is required
	dp_write_dsp_ram(0x1a3a,
					 (word) (0x5aeb - G(S).ModemOptions.ILimitOffset));
}

/****************************************************************
Routine : dp_detect_codec
Description :
	Detect which codec is present (mercury or perseus)
	and set the dp_daa_is_perseus variable.

	Interrupts must be enabled.
	DSP must be functional.
*****************************************************************/
byte dp_detect_codec(void)
{
	// Check Ring Detect pin.  Mercury always has pull-up so will read 0.
	G(dp_daa_is_perseus) = (dp_dsp_regread(0x26) & 0x80) ? 1 : 0;

#if defined(Z80_DEBUG_PRINT)
	if (2 != G(dp_byte_f))
		G(dp_daa_is_perseus) = 0;		// override for failure case

	x_debug_msg("dp_dsp_regread(0x26)=");
	sendHexByte(dp_dsp_regread(0x26));
	sendCrLf();

	if (G(dp_daa_is_perseus))
	{
		x_debug_msg("Perseus");
	}
	else
	{
		x_debug_msg("Mercury");
	}

	G(dp_daa_is_perseus) = 0;		// assume mercury for now
#endif // Z80_DEBUG_PRINT

	return G(dp_daa_is_perseus);
}

// initialize perseus DAA.
void dp_init_perseus(void)
{
	x_debug_msg("Init perseus");
	// signal dsp to perseus mode
	dp_write_dsp_ram(0x1ff2, (word) (dp_read_dsp_ram(0x1ff2)|0x0004));
	DOWNLOAD_DSP(wV2P_Ps10); // load v2Ps1
	dp_modem_command(GOTO_CMD, PERSEUS_BASE, PERSEUS_INIT); // Perseus init
#if defined(MODEM_Z80) && !defined(USB_MODEM)
# if defined(THUNDER)
	if ( z80_modem_type == EXT_INTERFACE )
# endif
		Oscr_delay();
#endif
}

// called once to measure line conditions
void dp_first_init_perseus(void)
{
	DOWNLOAD_DSP(wV2P_Ps0); // load v2Ps (permanent)
	dp_init_perseus();
	dp_write_dsp_ram(0x14c6,0x1200); // new patch to store dc offset
	dp_modem_command ( GOTO_CMD, PERSEUS_BASE, PERSEUS_ONHOOKDC ) ; // Perseus dc measurement
	x_sleep(200); // 200ms required to measure line
	dp_dc_offset=dp_read_dsp_ram ( 0x19fe ) ; // store locally DC measurement
	dp_write_dsp_ram(0x1a28,0x0400); // adjust RINGDET_THR_LEVEL
	dp_set_homol_options() ; // Set VI, AC impedance
}

/****************************************************************
Routine : x_output
Description :
	This function is used for output control of hardware (relays etc.)
Parameters in :
	cmd - the output control command
*****************************************************************/
void x_output(IO_COMMAND cmd)
{
	switch (cmd)
	{
	case IO_OUTPUT_INIT:
		x_output_init();
		x_set_hardware_options();		// only useful for WORLD_DAA
		break ;

#if defined(ATHENA_LEDS)
	case IO_DATA_LED_OFF:
		writebio( DATA_LED, 1);
		break;
	case IO_DATA_LED_TOGGLE:
		writebio( DATA_LED, readbio(DATA_LED) ? 0 : 1);
		break;
#endif // ATHENA_LEDS

#if defined(USB_MODEM) || defined(ATHENA_LEDS) || defined(THUNDER)
	case IO_OFF_HOOK_LED_OFF :
		writebio( USB_OH_LED, IO_OFF ) ;
		break ;

	case IO_OFF_HOOK_LED_ON :
		writebio( USB_OH_LED, IO_ON ) ;
		break ;
#endif // USB_MODEM || ATHENA_LEDS || defined(THUNDER)

	case IO_OFF_HOOK :
#if defined(PERSEUS_CODEC_CONTROL_H)
        if (G(dp_daa_is_perseus))
        {
		    dp_regwrite(PERSEUS_CODEC_CONTROL_H, 0x21); // enable perseus clock
		    dp_regwrite(PERSEUS_CODEC_CONTROL_L, 0x80);
		    dp_modem_command(GOTO_CMD, PERSEUS_BASE, PERSEUS_OFFHOOK);
        }
        else
#endif
        {
		    dp_modem_command(OFF_HOOK, 0, 0);
        }
		break ;

	case IO_ON_HOOK :
        if (G(dp_daa_is_perseus))
        {
		    dp_init_perseus(); // re-load code
		    // restore perseus dc_offset in case location was overwritten
		    dp_write_dsp_ram(0x19fe,
							 (word) (dp_dc_offset-G(S).ModemOptions.DCOffset1));
		    dp_modem_command(GOTO_CMD, PERSEUS_BASE, PERSEUS_ONHOOK);
        }
        else
        {
		    dp_modem_command(ON_HOOK, 0, 0);
        }
		break ;

#if !defined(CS_MODEM) || defined(CS_CID_ENABLE)
	case IO_CALLER_ID_ON :
#if defined(CALLERID_MERCURY) || defined(CALLERID_3V_MERCURY)
#if defined(CALLERID_3V_MERCURY)
		dp_change_mercury_gain(
			0,
			0,
			G(S).ModemOptions.LineGainBMSB,
			G(S).ModemOptions.LineGainBLSB | 0x20);
#else
		dp_change_mercury_gain(
			G(S).ModemOptions.LineGainAMSB,
			0x82,
			G(S).ModemOptions.LineGainBMSB,
			G(S).ModemOptions.LineGainBLSB);
#endif
#else
		writebio ( CALLERID, IO_ON ) ;
#endif
		break ;

	case IO_CALLER_ID_OFF :
#if defined(CALLERID_MERCURY) || defined(CALLERID_3V_MERCURY)
		dp_set_mercury_gain();
#else
		writebio ( CALLERID, IO_OFF ) ;
#endif
		break ;
#endif //!CS_MODEM || CS_CID_ENABLE

#if !defined(CS_MODEM)
#if defined( CS_4 )
	case IO_YELLOW_LED_ON :
		writebio( YELLOW_LED, IO_ON);
		break ;

	case IO_YELLOW_LED_OFF :
		writebio( YELLOW_LED, IO_OFF);
		break ;

	case IO_GREEN_LED_ON :
		writebio( GREEN_LED, IO_ON);
		break ;

	case IO_GREEN_LED_OFF :
		writebio( GREEN_LED, IO_OFF);
		break ;
#endif // CS_4
	case IO_SPEAKER_ON :
		x_output(IO_SPEAKER_HIGH);		// set volume base on ATLX
		dp_modem_command(0x27, 0x02, 0); // enable call progress.
		x_output(IO_AUDIO_CODEC_ON);
		break ;

	case IO_SPEAKER_OFF :
		dp_modem_command(0x27, 0x01, 0);	//disable call progress.
        dp_dsp_int_regwrite(0x6, 0x00);		//shut down PWM outputs-sam 10/31/00
		x_output(IO_AUDIO_CODEC_OFF);
		break ;

	case IO_SPEAKER_LOW :
	case IO_SPEAKER_MEDIUM :
	case IO_SPEAKER_HIGH :
		// We'll just process things according
		// to the SpeakerVolume option (set by ATLX)
		switch (G(S).ModemOptions.SpeakerVolume)
		{
		default: // LOW
			dp_write_dsp_ram(0x0D, 0x80);
			break;
		case 2:	// MEDIUM
			dp_write_dsp_ram(0x0D, 0x100);
			break;
		case 3: // HIGH
			dp_write_dsp_ram(0x0D, 0x200);
			break;
		}
		break;

	case IO_EXT_SPEAKER_ON :
	case IO_AUDIO_CODEC_ON :
#if !defined(SA_DIGITAL)
		writebio(AUDIOCODEC, IO_ON);
#endif
		break ;

	case IO_EXT_SPEAKER_OFF :
	case IO_AUDIO_CODEC_OFF :
#if !defined(SA_DIGITAL)
		writebio(AUDIOCODEC, IO_OFF);
#endif
		break ;

	case IO_DV_RLY_ON :
		// disconnect local phone from line
		writebio(TADOUT, IO_ON);
		break ;

	case IO_DV_RLY_OFF :
		// connect local phone to line
		writebio(TADOUT, IO_OFF);
		break ;

	case IO_EEPROM_DATA_OUTPUT :
		// change direction to output for BIOC0
		dp_regwrite(0xdb, (byte) (dp_regread(0xdb) | 1));
		break ;

	case IO_EEPROM_DATA_INPUT :
		// change direction to input for BIOC0
		dp_regwrite(0xdb, (byte) (dp_regread(0xdb) & ~1));
		break ;

	case IO_EEPROM_DATA_HIGH :
		writebio(EEPROMDATA, IO_OFF);
		break ;

	case IO_EEPROM_DATA_LOW :
		writebio(EEPROMDATA, IO_ON);
		break ;

	case IO_EEPROM_CLOCK_HIGH :
		writebio(EEPROMCLOCK, IO_OFF);
		break ;

	case IO_EEPROM_CLOCK_LOW :
		writebio(EEPROMCLOCK, IO_ON);
		break ;

	case IO_EEPROM_CLOCK_INPUT :
		// change direction to input for BIOC1
		dp_regwrite(0xdb, (byte) (dp_regread(0xdb) & ~2));
		break;

	case IO_EEPROM_CLOCK_OUTPUT :
		// strip off all but the scenario bits to
		// return BIOC0 & BIOC1 to default (DSP
		// has a bad habit of changing this).
#if defined(SHUNT) || defined(USB_MODEM)
		dp_regwrite(0xc0, dp_regread(0xc0) & 0x0b); // leave off hook led
#elif defined(THUNDER)
		if ( z80_modem_type == USB_INTERFACE )
		{
			dp_regwrite(0xc0, dp_regread(0xc0) & 0x0b); // leave off hook led
		}
		else
		{
			dp_regwrite(0xc0, (byte) (dp_regread(0xc0) & 3));
		}
#else
		dp_regwrite(0xc0, (byte) (dp_regread(0xc0) & 3));
#endif

		// change direction to output for BIOC1
		dp_regwrite(0xdb, (byte) (dp_regread(0xdb) | 2));
		break;
#if defined(EXT_MODEM) || defined(THUNDER)
	case IO_CARRIER_DETECT_ON :
		writebio(RS232_CD, IO_ON);
		break ;

	case IO_CARRIER_DETECT_OFF :
		writebio(RS232_CD, IO_OFF);
		break ;

	case IO_RING_INDICATE_ON :
		writebio(RS232_RI, IO_ON);
		break ;

	case IO_RING_INDICATE_OFF :
		writebio(RS232_RI, IO_OFF);
		break ;

	case IO_DSR_ON :
		writebio(RS232_DSR, IO_ON);
# if defined(ATHENA_LEDS)
		writebio(READY_LED, IO_ON);
# endif
		break ;

	case IO_DSR_OFF :
		writebio(RS232_DSR, IO_OFF);
# if defined(ATHENA_LEDS)
		writebio(READY_LED, IO_OFF);
# endif
		break ;
#endif // EXT_MODEM || THUNDER

	case IO_AC_OH_RLY_ON :
		writebio ( ACOHRLY, IO_ON );
		break ;

	case IO_AC_OH_RLY_OFF :
		writebio ( ACOHRLY, IO_OFF );
		break ;

	case IO_LOCAL_PHONE_ON ://voice_local_phone_connect
#if defined(THUNDER) && !defined(TQFP128)
		if ( z80_modem_type == USB_INTERFACE )
		{
			writebio( BIOB5_AL, IO_ON );
		}
#else
		writebio(LOCFON, IO_ON);
#endif
		break;

	case IO_LOCAL_PHONE_OFF :
#if defined(THUNDER) && !defined(TQFP128)
		if ( z80_modem_type == USB_INTERFACE )
		{
			writebio( BIOB5_AL, IO_OFF );
		}
#else
		writebio(LOCFON, IO_OFF);
#endif
		break;

#if defined(VENUS_WORLD_DAA)
	case IO_SHUNT_ON :
		if (G(S).ModemOptions.OffhookShuntTime )		// enabled
			writebio ( LOOPVI_German, IO_ON ) ;
#if defined (SHUNT)
		writebio ( SHUNTRLY, IO_ON ) ;
#endif
		break ;

	case IO_SHUNT_OFF :
		if (G(S).ModemOptions.OffhookShuntTime )		// enabled 
			writebio ( LOOPVI_German, IO_OFF ) ;
#if defined (SHUNT)
		writebio ( SHUNTRLY, IO_OFF ) ;
#endif
		break ;

#if defined(DC0)
	case IO_PSTN_ON :
		writebio(PSTN, IO_ON);
		x_debug_msg("dp - i/o PSTN on");
		break ;

	case IO_PSTN_OFF :
		writebio(PSTN, IO_OFF);
		x_debug_msg("dp - i/o PSTN off");
		break ;
#endif //DC0
#endif // VENUS_WORLD_DAA
#endif // !defined(CS_MODEM)
	}
}

#if !defined(CS_MODEM) || defined (CLASS2_FAX)
/****************************************************************
Routine : dp_download_fax
Description : download the fax dsp code
*****************************************************************/
void dp_download_fax ( void )
{
	dp_fax_modem_idle_cmd ();
	DOWNLOAD_DSP(wDspFax);
  	DOWNLOAD_DSP(wDpV17wa);		// receive drop out workaround
	x_debug_msg("fax loaded. ver=");
	sendHexWord( dp_read_dsp_ram( 0x2700 ) );	//print DP code version reg
	sendDumbChar(':');
	sendHexWord( dp_read_dsp_ram( 0x2701 ) );
	sendCrLf();
	dp_modem_command_long ( PDM, ASYNC_MARK, 0x01, 0x87, 0 ) ;
	dp_fax_modem_idle_cmd ();

//  slow way to initialize the FAX DSP RAM
//	{
//		unsigned int i;
//		for (i=0x481; i < 0x60a; i++)
//			dp_write_dsp_ram(i, 0x0000);
//	}

	// this is DSP code to initialize the FAX DSP RAM
	dp_write_dsp_ram(0x400, 0x1200);
	dp_write_dsp_ram(0x401, 0x5020);
	dp_write_dsp_ram(0x402, 0x0481);
	dp_write_dsp_ram(0x403, 0x70e4);
	dp_write_dsp_ram(0x404, 0x6059);
	dp_write_dsp_ram(0x405, 0x7064);
	dp_write_dsp_ram(0x406, 0x7064);
	dp_write_dsp_ram(0x407, 0x705e);
	dp_write_dsp_ram(0x408, 0xc000);
	dp_modem_command(GOTO_CMD, 0xc4, 0x00);
}
#endif // !defined(CS_MODEM) || defined (CLASS2_FAX

#if defined(V92_MODEM_ON_HOLD)
/****************************************************************
Routine : dp_download_mh()
		Download DSP code for Modem on Hold
*****************************************************************/
void dp_download_mh(void)
{
	dp_disable_workaround(); // DPRAM_BAUD(0xf20) = DSP_NUL(0x8ece)
	DOWNLOAD_DSP_SLOW(wMdmHld0);
	x_debug_msg("after dp_download_mh()");
}

/****************************************************************
Routine : dp_modem_on_hold()
		When call waiting tone is detected, download and
		start MOH state machine
*****************************************************************/
void dp_modem_on_hold(void)
{
	if (G(dp_mh_state)==MH_NULL) // avoid recurrent calls
	{
		dp_modem_command(MODEM_IDLE,0,0); // idle is inital condition for MOH
		dp_download_mh();
		G(dp_mh_state)=MH_I_INIT; // start initiator mode
	}
}
#endif

#if !defined(CS_DIGITAL)
 #if defined(COMPRESS_TABLES)
  #include "dpclwait.h"			// DSP download for call waiting
 #endif

/****************************************************************
Routine : dp_call_waiting
Description : We've received a call waiting tone.
		Take care of platform-specific actions.  This
		function does not need to take care of the retrain.
*****************************************************************/
void
dp_call_waiting( void )
{
	DP_PUTS("dp_call_waiting() - call waiting tone detected.\n");
//	x_output(IO_SPEAKER_ON);
	z80_uart_ri_on(); // ring indicator ON
#if defined(CIDCW)
	if (G(S).ModemOptions.CallerId)
		dp_cidcw(); // collect Caller ID info.
#endif
	x_sleep(250); // give ring indicator some time
	z80_uart_ri_off(); // ring indicator OFF
#if defined(V92_MODEM_ON_HOLD)
	// if disconnect after cidcw, then don't try moh
	if (G(S).ModemOptions.MHOptions & MH_ENABLED &&
		G(dp_CallWaitingEnable) != 1)
		dp_modem_on_hold();
#endif
}

/****************************************************************
Routine : dp_download_call_waiting
Description : Download the V.34 call waiting workaround
		Must later write dp_write_dsp_ram(0x7c, 0xd800);
		(AuxVector1) to enable the workaround.
*****************************************************************/
void
dp_download_call_waiting()
{
#if defined(COMPRESS_TABLES)
	DOWNLOAD_DSP_SLOW(wCallWait0);
#endif // COMPRESS_TABLES
}

#if defined(CIDCW)
/****************************************************************
Routine : dp_download_cidcw_patch
Description : Download the cid on cw patch to improve fsk decoding
*****************************************************************/
void
dp_download_cidcw2(void)
{
	DOWNLOAD_DSP(wVCID20);
}
#endif // CIDCW
#endif // !CS_DIGITAL

// ***************************************************************
void dp_download_V32Turbo ( void ) 
{
	// Download the terbo1, terbo2, terbo3 code
	// for V.32 turbo mode.
	DOWNLOAD_DSP(wV32Turbo);
}
