/*name and version number:@(#)dp56kv.c	1.305*/
/*date of get: 		  04/24/01 14:14:23*/
/*date of delta:	  04/23/01 17:55:34*/
/****************************************************************
File :	dp56kv.c
Description :
	V.90 VENUS data pump interface.

*****************************************************************/

#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "atglob.h"
#include "dpglob.h"
#include "z80glob.h"
#include "sync.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "allglobs.h"


#define AD24(x)	(address_24_of(x))

extern byte dp_k56_rbs_check ( void );
extern void dp_print_mse_debug_values (void);
extern void vp_free_mem( void );
extern void dp_56k_startup_cmd(void);
extern void dp_restore_v34_mode_and_state(void);
extern non_banked word dp_getROMwd( byte, byte * );
extern void vp_initiate_fast_retrain();
extern void x_line_probe_point(short x, short y);
void dp_run_rom (void);
void dp_reset_venus(void);
void dp_56k_v34_mode(void);
extern byte dp_56k_map(void);
extern void dp_56k_setFill(byte);
extern void dp_print_cm_tx ( void );
extern void dp_print_jm_rx ( void );


#if defined(VENUS_AT_CS)
 #define VENUS_CENTRAL_SITE
 #define K56V_VERSION_RAM		0x2017
#else
 #define K56V_VERSION_RAM		PcmV_Version	// KfaV_version
#endif

#ifdef VPCM_CLIENT
//	client defines
#define V8VpcmCapLocal			0x1ffb
#define	Agc_gain				0x0221		// DSP RAM location
#define K56V_MODE_RAM			KfEnable	// KfEnable
#endif	// VPCM_CLIENT

#ifdef VPCM_SERVER
//	server defines
#define VPCM_GOTO_ROM_ADRH		0xd0
#define VPCM_GOTO_ROM_ADRL		0xcb
#define K56V_GOTO_ROM_ADRH		0xd0
#define K56V_GOTO_ROM_ADRL		0xcb
#define K56V_GOTO_STARTUP_ADRL	0xce
#define K56V_MODE_RAM			0x1ff0
#endif	// VPCM_SERVER

/****************************************************************
Routine : dp_56k_map()

return:  true if using 56k memory map
*****************************************************************/
byte dp_56k_map(void)
{
#if defined(VPCM_CLIENT) || defined(VPCM_SERVER)
	return (byte) (
#if !defined(DRAGNET2)	// no map switching on dragnet2
		!VENUS_BASE_MAP ||
#endif // !DRAGNET2
		(G(dp_56k_state) != DP_56K_INIT));
#else
	return 0;
#endif
}

/****************************************************************
Routine : dp_lapm_error_check_init
Description : initialize lapm error counters
*****************************************************************/
void dp_lapm_error_check_init ( void ) 
{
#if defined(VPCM_SERVER)
	G(lapm_counter) = 0;
	G(tx_lapm_counter) = 0;
	G(tx_lapm_errors) = TX_LAPM_ERRORS;
	G(tx_lapm_frames) = TX_LAPM_FRAMES;
	G(dp_lapm_tx_timer) = x_current_time();
	G(dp_lapm_rx_timer) = x_current_time();
#else
	G(lapm_counter) = 300;
#endif
	G(lapm_errors) = RX_LAPM_ERRORS;
	G(lapm_frames) = RX_LAPM_FRAMES;

	G(dp_count) = 0;
	G(dp_bad_crc_count) = 0;
}

#if defined(TCP_IP)
/****************************************************************
Routine dp_print_state_vars
Description: Print io /lapm & dp state vars
*****************************************************************/
void dp_print_state_vars(void)
{
	if (G(p_dp_state) != G(dp_state))
	{
		G(p_dp_state) = G(dp_state);
		x_debug_msg("dp_state =");
		sendDecByte((byte) G(dp_state));
		sendCrLf();
	}
	if (G(lst_io_state) != G(io_state))
	{
		G(lst_io_state) = G(io_state);
		x_debug_msg("io_state =");
		sendDecByte((byte) G(io_state));
		sendCrLf();
	}
	if (G(lst_lapm_state) != G(lapm_state))
	{
		G(lst_lapm_state) = G(lapm_state);
		x_debug_msg("lapm_state =");
		sendDecByte((byte) G(lapm_state));
		sendCrLf();
	}
}
#endif // TCP_IP

#if !defined(NEW_QMP_AUX_INTFC)
/****************************************************************
Routine : dp_print_ram_on_change
		  print DSP ram location on change

		  ramloc - DSP RAM location to print
		  msg    - 24 bit pointer to string - msg to print
		  tempVar- variable that holds the last value of this
				RAM location

	 Returns:  TRUE -> this location changed
*****************************************************************/
byte
#if defined(MODEM_Z80)
dp_print_ram_on_change(word ramloc, long msg, word *tempVar)
#else
dp_print_ram_on_change(word ramloc, char *msg, word *tempVar)
#endif
{
	word newRAM = dp_read_dsp_ram(ramloc);

	if (*tempVar != newRAM)
	{
		// print changes only if debug user has asked for it
		if (2 & G(venusDebugToDTE))
		{
			if (ramloc != G(dp_lastSent))
			{
				sendCrLf();
				dp_puts(msg);send_debug_char(' ');
				dp_puts_hex(ramloc);send_debug_char('=');
			}
			dp_puts_hex(newRAM);

			// print time difference
			DP_PUTS("-time=");
			dp_puts_dec(x_elapsed_time(G(dp_lastSentTime)));
			send_debug_char(' ');
			G(dp_lastSent) = ramloc;
			G(dp_lastSentTime) = x_current_time();
		}

		*tempVar = newRAM;
		return TRUE;
	}

	return FALSE;
}

/****************************************************************
Routine : dp_print_state_pointers()
	  Print data pump states for debug.
*****************************************************************/
void dp_print_state_pointers(void)
{
#if defined(TCP_IP)
	dp_print_state_vars();
#endif

	if (x_elapsed_time(G(dp_sp_timer)) < MS20)
		return;

#ifdef PHASE1_DEBUG
	if (1 == dp_read_dsp_ram(STARTUP_PHASE))
	{
		if (dp_print_ram_on_change(0x0b33, AD24("cjm_state"), &G(cjm_state)))
		{
			if (G(cjm_state) > 2 && G(cjm_state) < 6)
			{
				dp_print_cm_tx();
				dp_print_jm_rx();
			}
		}
	}
#endif	//PHASE1_DEBUG

	// See if we've downloaded the EROM.
	// if not, then do it.
	if (!G(dp_downloadedEROM))
	{
#if defined(PCMCIA_MODEM)
		extern byte corFlag;

		if (0x55 != corFlag)
			return;
#endif

#if defined(K56FLEX)
        if (!G(dp_daa_is_perseus))
        {
			dp_download_K56EROM();
			x_debug_msg("finished downloading k56flex ERAM");
        }
#endif
		G(dp_downloadedEROM) = 1;
	}

#if defined(Z80_DEBUG_PRINT)
#if !defined(CS_4) && !defined(TCP_IP)
	if (G(p_dp_state) != G(dp_state))
	{
		G(p_dp_state) = G(dp_state);
		x_debug_msg("dp_state =");
		sendDecByte((byte) G(dp_state));
		sendCrLf();
	}
#endif

	dp_print_ram_on_change(0x0a53, AD24("MP"), &G(dp_mp));
	dp_print_ram_on_change(0x0a54, AD24("MP'"), &G(dp_mpp));
	dp_print_ram_on_change(0x0a55, AD24("E"), &G(dp_e_stat));
	dp_print_ram_on_change(S_PTR, AD24("S_PTR"), &G(dp_s_ptr));
	dp_print_ram_on_change(R_PTR, AD24("R_PTR"), &G(dp_r_ptr));
	dp_print_ram_on_change(BR_PTR, AD24("BR_PTR"), &G(dp_br_ptr));

#ifdef VPCM_CLIENT
	dp_print_ram_on_change(V92DnLdCtr, AD24("V92DnLdCtr"), &G(dp_v92dnldctr));
	dp_print_ram_on_change(DP_ADD_HOST, AD24("DP_ADD_HOST"), &G(dp_add_host));
	dp_print_ram_on_change(DP_ADD_LL_HOST, AD24("DP_ADD_LL_HOST"), &G(dp_add_ll_host));
	dp_print_ram_on_change(DP_ADD_JVAL, AD24("DP_ADD_JVAL"), &G(dp_add_jval));
	dp_print_ram_on_change(V92Status, AD24("V92Status"), &G(dp_v92status));
	dp_print_ram_on_change(0xcb, AD24("0xcb"), &G(vpcm_0xcb));
	dp_print_ram_on_change(0x82f, AD24("0x82f"), &G(vpcm_0x82f));
	dp_print_ram_on_change(V92Status, AD24("V92Status"), &G(vpcm_0x820));

	if (G(dp_cur_phase) > 2)
		dp_print_ram_on_change(0x0221, AD24("agc_gain"), &G(dp_agc_gain));
#endif // VPCM_CLIENT

	// How about startup phase?
	if (dp_print_ram_on_change(STARTUP_PHASE,
							   AD24("startup phase"), &G(dp_cur_phase)))
	{
#ifdef QUICK_CONNECT_TIME_DEBUG
		sendCrLf();
		x_debug_msg("***dp_time_to_connect_time=");
		dp_puts_dec(x_elapsed_time(G(dp_time_to_connect_timer)));
		sendCrLf();
#endif	// QUICK_CONNECT_TIME_DEBUG

		G(dp_lastSent) = 0;

#if defined(LINE_PROBING_RESULTS)
		// if we're in phase 3 then
		// we can store the line probing results
		if (3 == G(dp_cur_phase))
		{
			byte i;

			for (i=0; i<49; i++)
			{
				G(signal_dB)[i] = dp_read_dsp_ram((word) (0x83f + i));
				G(noise_dB)[i]  = dp_read_dsp_ram((word) (0x871 + i));
				G(SNR_k)[i]     = dp_read_dsp_ram((word) (0x907 + i));
#if defined(WIN32)
				x_line_probe_point(i, G(SNR_k)[i]);
#else
				dp_puts_hex(G(signal_dB)[i]);
				dp_puts_hex(G(noise_dB)[i]);
				dp_puts_hex(G(SNR_k)[i]);
				sendCrLf();
#endif
			}
		}
#endif  // LINE_PROBING_RESULTS

#if !defined(V34ONLY)
		// if we're in phase 4 then
		// we may be able to show the DSP version
		// of the V.9x/K56FLEX code
		if (4 == G(dp_cur_phase))
		{
			word ver = dp_read_dsp_ram(K56V_VERSION_RAM);

			if (ver
#if !defined(DRAGNET2)	// no map switching on dragnet2
				&& !VENUS_BASE_MAP
#endif // !DRAGNET2
				)
			{
				x_debug_msg("Phase 4. K56_VERSION_RAM=");
				sendHexWord(ver); sendCrLf();
			}
		}
#endif // !V34ONLY
	}
#else
	G(dp_s_ptr) = dp_read_dsp_ram(S_PTR);
	G(dp_r_ptr) = dp_read_dsp_ram(R_PTR);
	G(dp_cur_phase) = dp_read_dsp_ram(STARTUP_PHASE);
#endif  // ! Z80_DEBUG_PRINT

	G(dp_sp_timer) = x_current_time ();

	// Update last PCM S PTR for ATI11 purposes.
	// This will show the last S pointer while
	// we still thought that we could be going to PCM mode.
	if (DP_56K == G(dp_state))
		G(x_status).lastPCMSptr = G(dp_s_ptr);
}
#endif // !NEW_QMP_AUX_INTFC

#if defined(Z80_DEBUG_PRINT)
extern word at_itoa(word num, byte *str, byte format);

/****************************************************************
Routine : dp_puts_hex
	Send ASCII representation of HEX word 'n'
	to the debug port.
*****************************************************************/
void dp_puts_hex(word n)
{
	sendHexWord(n);
	send_debug_char(' ');
}

/****************************************************************
Routine : dp_puts_dec
	Send ASCII representation of decimal word 'n'
	to the debug port.
*****************************************************************/
void dp_puts_dec(word n)
{
#if defined(CS_4)
	U32 curIflag = G(InstanceFlag);

	G(InstanceFlag) = FALSE;
	printf("%0d ", n);
	G(InstanceFlag) = curIflag;
#else
	char buf[12], *bp;

	bp = buf;
	bp += at_itoa(n, (byte *) bp, DECIMAL);
	*bp++ = ' ';
	*bp++ = 0;
	ddputs_nnl(buf);
#endif
}

/****************************************************************
Routine : dp_puts_sdec
	Send ASCII representation of signed decimal word 'n'
	to the debug port.
*****************************************************************/
void dp_puts_sdec(word n)
{
	char buf[12], *bp;
	byte neg = 0, i, len;

	if (n & 0x8000)
	{
		// negative number
		neg = 1;
		n = (word) ((~n) + 1);
	}

	bp = buf;
	len = (byte) at_itoa(n, (byte *) bp, DECIMAL);
	bp += len;
	*bp++ = ' ';
	*bp++ = 0;

	len = (byte) (8 - len);		// pad with leading spaces to fill 8 columns

	if (neg)
		len--;			// one less space needed for negative numbers

	for (i=0; i < len; i++)
	{
		send_debug_char(' ');
	}

	if (neg)
		send_debug_char('-');

	ddputs_nnl(buf);
}

#if defined(MODEM_Z80)
/****************************************************************
Routine : dp_puts
Description :
	Print string to debug port.
*****************************************************************/
void dp_puts(long lp)
{
	ddputs_24_nnl(lp);
}
#endif	// MODEM_Z80
#endif // Z80_DEBUG_PRINT

// Table of receive signal levels vs dBm.
// Used by dp_lin_to_db, below.
static const word rcv_lvl_tbl[] =
{
21814, 		/* -5.5 dBm */
19442,		/* -6.5 dBm */
17328,15443,13764,12267,10933, 9744, 8684, 7740,
 6898, 6148, 5479, 4884, 4352, 3879, 3457, 3081,
 2746, 2448, 2181, 1944, 1733, 1544, 1376, 1227,
 1093,  974,  868,  774,  690,  615,  548,  488,
  435,  388,  346,  308,
  275,		/* -44.5 dBm			*/
  245		/* -45.5 dBm			*/
};

#if !defined(MODEM_Z80)	// {
/****************************************************************
Routine : convert linear signal levels to dB
*****************************************************************/
word dp_lin_to_db( word linear )
{
	word *r, lvl;

	lvl = 46;
	r = (word *) &rcv_lvl_tbl[(sizeof(rcv_lvl_tbl)/2)-1];

	while ( (*r < linear) && (lvl-- > 5) )
	{
		r--;
	}

	return lvl;
}
#else 	// } {
/****************************************************************
Routine : convert linear signal levels to dB
*****************************************************************/
word dp_lin_to_db( word linear )
{
	word *r, lvl;
	byte b = (byte) (address_24_of(rcv_lvl_tbl) >> 16);

	lvl = 46;
	r = &rcv_lvl_tbl[(sizeof(rcv_lvl_tbl)/2)-1];

	while ((dp_getROMwd(b, (byte *) r) < linear) && lvl-- > 5)
	{
		r--;
	}

	return lvl;
}
#endif	// } MODEM_Z80


#if defined(VPCM_CLIENT) || defined(VPCM_SERVER)

/****************************************************************
Routine : dp_56k_idle

		Take care of getting the DSP out
		of K56/V90 mode if that's where it's at.
*****************************************************************/
void dp_56k_idle ( void )
{
#if !defined(VPCM_SERVER)
	word checkData, checkLoc = K56V_MODE_RAM;
#endif

	x_debug_msg("dp_56k_idle()");

#ifdef VPCM_CLIENT
	dp_write_dsp_ram(AP_DPRAM_BAUD, AP_DSP_NUL);
#endif	// VPCM_CLIENT

	if (dp_56k_map())
	{
		dp_run_rom();
		G(dp_56k_state) = DP_56K_INIT;
	}

#if !defined(VPCM_SERVER)
	vp_free_mem();	// free memory used by slicer calculations
	checkLoc = V8VpcmCapLocal;
	checkData = dp_read_dsp_ram(checkLoc);		// save checkLoc data
	dp_write_dsp_ram(checkLoc, 0x5aa5);
	if (0x5aa5 != dp_read_dsp_ram(checkLoc))
	{
		MODEM_STATE modemState = G(x_modem_state);

		x_debug_msg("dp - dp_56k_idle - write_dsp_ram fails, reset venus()");
		dp_reset_venus();
		G(x_modem_state) = MS_IDLE;		// so checksum is done normally
		dp_init_modem();
		G(x_modem_state) = modemState;
	}
	else
	{
		dp_write_dsp_ram(checkLoc, checkData);	// restore checkLoc data
	}

#else	// VPCM_SERVER
	G(vpcm_retrain_count) = 0;

	dp_write_dsp_ram(K56V_MODE_RAM , 0x0000);
	dp_write_dsp_ram(0x003b , 0x0000);

#if !defined(SA_DIGITAL)
	// re-init DSP clock speed = 58.3680 MHz @ 36 MHz
	dp_modem_command_long(0x2e, 0x01, 0x3e, 0x71, 0);
	x_sleep(30); //allow some time to stabilize
#endif // !SA_DIGITAL
#endif // VPCM_SERVER

#if defined(COPERNICUS)
	if (G(x_modem_originate))
		x_output(IO_LOCAL_PHONE_OFF);	// Tell ISDN VxD that call has dropped
#endif

	G(S).ModemOptions.Enabled56K = FALSE;
	G(dp_56k_user_retrain) = G(dp_56k_connected) = 0;

#ifdef VPCM_CLIENT
	// clear retrain count due to dsp ram 0x1ff9
	G(vpcm_count_1ff9) = 0;
	// clear retrain count due to bad mse frame
	G(vpcm_bad_mse) = 0;
	G(vp_initial_connect_msg_done) = 0;
	G(vpcm_remote_qc_parameter) = 0;
	G(vpcm_v92_status) = 0;
	G(vpcm_v92_control) = 0;
	G(vpcm_connection_status) = 0;
	dp_write_dsp_ram(V92Status, 0x0);
	if (G(dp_daa_is_perseus))
		dp_write_dsp_ram(K56Opt, 0x4);
	else
		dp_write_dsp_ram(K56Opt, 0x0);
	G(vpcm_0xcb) = 0;
	G(vpcm_0x82f) = 0;
	G(vpcm_0x820) = 0;
	G(vpcm_getgain_fail) = 0;
	G(vpcm_homol_testing) = 0;
#endif //VPCM_CLIENT

#ifdef PHASE1_DEBUG
	G(cjm_state) = 0;
#endif	//PHASE1_DEBUG
}

/****************************************************************
Routine : dp_reset_dpram
		  Clear the dual port RAM before v.9x/k56
*****************************************************************/
void dp_reset_dpram(void)
{
	word i;

	for (i=0x2000; i<=0x27FF; i++)
		dp_write_dsp_ram(i, 0);
}

/****************************************************************
Routine : dp_56k_init - Operations that are
		common to initializing the client and
		central site for the answer or originate command
*****************************************************************/
void dp_56k_init(void)
{
	x_debug_msg("dp_56k_init");
	G(dp_state) = DP_56K;
	G(dp_line_state) = DP_LINE_TRAINING;
	G(dp_s_ptr) = G(dp_tmp2011) = G(dp_r_ptr) = G(dp_br_ptr) = 0;

#if defined K56FLEX
	if (G(vpcm_mode) == 0)
	{
		x_debug_msg("download K56VenWk");
		dp_download_K56VenWk();
	}
#endif	//K56FLEX

#if defined(CALL_WAITING)
	G(vpcm_call_waiting) = 0;	// no call waiting in progress now
#endif

	DP_WRITE_XYPAGE();
	DP_WRITE_IOC();

	dp_modem_idle_cmd();
	dp_update_modem_options();
	G(dp_56k_user_retrain) = G(dp_56k_connected) = 0;

#if defined(VENUS_CENTRAL_SITE)
	G(dp_rx_pwr_lvl_high) = 0;
	dp_transmit_level(14);
	G(old_000c) = dp_read_dsp_ram(0x000c);
#else
	// need a high tx level for v92
	dp_transmit_level(10);
#endif

#if defined (K56FLEX)
	if (G(vpcm_mode) == 0)
	{
		dp_disable_33600();
	}
#endif	//K56FLEX

	G(dp_timer1) = G(dp_timer) = x_current_time ();
	x_set_current_time(&G(dp_long_timer));

	// write 0 to version indicating that we're in ROM now
	dp_write_dsp_ram(K56V_VERSION_RAM, 0);

	// bypass bulk delay initialization
	dp_write_dsp_ram(0x000C, 0x007F);

#if defined(K56FLEX)
	if (!G(vpcm_mode))
		dp_write_dsp_ram(AP_DPRAM_BAUD, 0xd0c8);
#endif	//K56FLEX

	dp_reset_dpram();

	dp_56k_startup_cmd();

	// We use goto command instead of ORIGINATE
	// so we need to do some of the work that dp_modem_command()
	// normally does in getting things ready for data.
	dp_startup_prime_pump();	// Get CAMIL ready for data intrpts

	if (G(vpcm_mode) == 1)
	{
		vpcm_init();
	}
#if defined (K56FLEX)
	else
	{
		dp_modem_command(GOTO_CMD, 0xd0, K56V_GOTO_STARTUP_ADRL);// startup K56
	}
#endif	//K56FLEX
}

/****************************************************************
Routine :	dp_run_rom()

	DSP could be executing out of ERAM (external RAM), and
	we want to hang up this call.

	Check to see if we are indeed in ERAM, and if so give the
	appropriate GOTO command to the DSP to get back to ROM
	so that we can hang up without locking up the DSP.
	(It's a very bad idea to give random idle commands to the
	DSP while it's running out of ERAM.)
*****************************************************************/
void dp_run_rom(void)
{
#if defined(DRAGNET2)
	if (dp_56k_map())
#else
	if (!(VENUS_BASE_MAP))
#endif
	{
		x_debug_msg("dp_run_rom() - switch back to irom");

		// This is our way to get back to V.34
		if (G(vpcm_mode) == 1)
		{
#if defined(VPCM_CLIENT)
			dp_modem_command(MODEM_IDLE,0,0);
#     if !defined(DRAGNET2)	// no map switching needed for dragnet2
#        if defined(DRAGNET)
			// for dragnet we'll switch maps manually
			dp_dsp_int_regwrite(1, (word) (dp_dsp_int_regread(1) & 0xfdff));
#        else
			dp_modem_command(0xab, 0, 0);	// switch back to map 1
#        endif // DRAGNET
#     endif // !dragnet2

#else
			// central site
			dp_modem_command(GOTO_CMD,
							 VPCM_GOTO_ROM_ADRH,
							 VPCM_GOTO_ROM_ADRL);
#endif // VPCM_CLIENT

#if defined(Z80_DEBUG_PRINT) && !defined(DRAGNET2)
			if (!VENUS_BASE_MAP)
			{
				x_debug_msg("problem-didn't switch maps!");
			}
#endif
		}
#if defined(K56FLEX)
		else
		{
			dp_modem_command(GOTO_CMD,
						 K56V_GOTO_ROM_ADRH,
						 K56V_GOTO_ROM_ADRL);
		}
#endif // K56FLEX

		x_sleep(MS20);

		dp_modem_command(MODEM_IDLE,0,0);
		dp_write_dsp_ram(K56V_VERSION_RAM, 0);	// we've switched

		if (!dp_read_dsp_ram(S_PTR))
		{
			x_debug_msg("0080 = 0, dead dsp");
		}
	}
	else
	{
		x_debug_msg("dp_run_rom() - no switch, already in IROM");
	}
}


/****************************************************************
Routine : dp_56k_v34_training_state
		  set up the V.34 state that we're going to
		  for this retrain based on where we are.
*****************************************************************/
void dp_56k_v34_training_state(void)
{
	// do different things depending on whether we've
	// already given a connect message.
	x_debug_msg("dp_state=");
	if (G(dp_56k_connected))
	{
		if (G(dp_56k_user_retrain))
		{
			// CONNECT message but no protocol negotiation.
			G(dp_count) = 1;
			G(dp_state) = DP_RETRAIN;
			x_debug_msg("DP_RETRAIN");
		}
		else
		{
			// No CONNECT message.
			G(dp_state) = DP_V34_RETRAIN;
			x_debug_msg("DP_V34_RETRAIN");
		}
		G(dp_line_state) = DP_LINE_RETRAINING;
	}
	else
	{
		// This is the path for first time startup.
		// CONNECT message and protocol negotiation.
		G(dp_state) = DP_TRAINING;
		x_debug_msg("DP_TRAINING");
	}
}

/****************************************************************
Routine : dp_56k_setFill
		  set fill character.  HDLC or Async mode
*****************************************************************/
void dp_56k_setFill(byte oldFill)
{
	if (oldFill == 0x7e)
	{
		x_debug_msg("dp_56k_setFill-setting HDLC mode");
		dp_hdlc_mode();
	}
	else
	{
		x_debug_msg("dp_56k_setFill-setting Async mode");
		dp_async_user_mode();
	}
}

/****************************************************************
Routine : dp_56k_retrain_cmd
		  take care of 56k retrain.  This assumes it's being
		  called by dp so it should give a connect message
		  except in the originator=0 case when it shouldn't

Parameter:
		0 - V.34 retrain
		1 - K56/V.90 retrain
		2 - K56/V.90 fast rate change

		If the upper nibble of this is set, it means that
		the command is coming due to an automatic retrain,
		initiated because of bad mse, etc.  This means
		that the previous software has picked the rates
		for maxrate and we shouldn't be messing with it.

		lastRetrain will be the kind of retrain we're initiating.
				0x01 - retrain
				0xX2 - fast rate change
						X=0  pick speed here.
						X=1  caller has picked speed already.
*****************************************************************/
byte dp_56k_retrain_cmd(byte originator)
{
#if !defined(VENUS_CENTRAL_SITE)
	byte oldFill = G(DpIdleFillChar);
#ifdef V92_PCM_TESTING
	byte orig_cmd;
#endif	// V92_PCM_TESTING
#endif

	if (!dp_56k_map())
	{
		// We're not taking any action.  let somebody know
		return FALSE;
	}

	G(dp_line_state) = DP_LINE_RETRAINING;

	// Things common to central site and client.
	// Take care of retrain counters.
	if (2 == (originator & 0x0f))
		LOCAL_RR_INCREMENT;		// locally-initiated rate reneg
	else
		LOCAL_RET_INCREMENT;	// locally-initiated retrain

	// If S38 has been set manually to 0 by the user
	// then any ato1/3 will result in V.34 fallback
	if (!G(S).ModemOptions.Rate56K)
		originator = 0;

#if !defined(VENUS_CENTRAL_SITE)
	x_debug_msg("dp_56k_retrain_cmd()");

	G(dp_timer1) = G(dp_timer) = x_current_time ();
	G(dp_56k_user_retrain) = 1;
	G(dp_count) = 1;

#ifdef V92_PCM_TESTING
	orig_cmd = originator;
#endif	// V92_PCM_TESTING

	originator &= 0x0f;
	G(lastRetrain) = originator;

	switch (originator)
	{
	default:
	case 0:
		// if we're not in command mode then we
		// shouldn't give the connect message
		if (FALSE == G(io_at_esc_detect))
			G(dp_56k_user_retrain) = 0;

		dp_56k_fallback();
		break;
	case 1:
		// client retrain command
#if !defined(DRAGNET2)
			dp_write_dsp_ram(DP_V34_DATA_RATE, 0xbfff);		// ram 0x80d
			if (VENUS_BASE_MAP)
			{
				// Already in map 1a.
				// This shouldn't be necessary since we just
				// checked this above.

				dp_write_dsp_ram(DP_V34_SYMBOLRATE, 0x3ff);		// ram 0x823
				// need to clear vpcm up-stream enable bit in 0x1ff2
				dp_write_dsp_ram(K56Opt, (word) (dp_read_dsp_ram(K56Opt) & 0xffdf));

				dp_56k_fallback();
			}
			else
			{
				// retrain command - forces us back to 1a
				x_debug_msg("v.9x retrain");
				G(k56_timer) = x_current_time();
				G(dp_56k_state) = VPCM_WAIT_FOR_PHASE3;

				// since v92 pcm upstream is not stable, do v90 retrain for now
				// for v90 retrain only,
				// need to clear vpcm up-stream enable bit in 0x1ff2
				dp_write_dsp_ram(K56Opt, (word) (dp_read_dsp_ram(K56Opt) & 0xffdf));

#ifdef V92_PCM_TESTING
				// for testing only, if someone enters ato1 command,
				// we will honor the VpcmOption ( S109 )
				if ( !( orig_cmd & 0xf0 ) 
					&& ( dp_read_dsp_ram(KfEnable) == 5 ) )
				{
					// from ato1 command
					if (G(S).ModemOptions.VpcmOption & BIT3)
					{
						// v92 pcm upstream
						dp_write_dsp_ram(K56Opt,
										 (dp_read_dsp_ram(K56Opt) | BIT5));
					}
					else
					{
						// v90
						dp_write_dsp_ram(K56Opt,
										 (dp_read_dsp_ram(K56Opt) & 0xffdf));
					}
				}
#endif	// V92_PCM_TESTING

				x_debug_msg("v90 retrain,0x1ff2=");
				sendHexWord(dp_read_dsp_ram(K56Opt)); sendCrLf();

				dp_write_dsp_ram(KfEnable, 0x1);		//0x1ff1
				dp_write_dsp_ram(PcmV_Version, 0x0);
				dp_write_dsp_ram(0x1ff0, 0x0);			//Host_flg
				dp_modem_command(RETRAIN, 0, 0);

				dp_download_PCM_V92P2();
				dp_write_dsp_ram(V92DnLdCtr, 0x2);		// ram 0x1ff8
			}
#else	// DRAGNET2
			{
				// retrain command - forces us back to 1a
				x_debug_msg("v.9x retrain");
				G(k56_timer) = x_current_time();
				G(dp_56k_state) = VPCM_WAIT_FOR_PHASE3;
				dp_write_dsp_ram(KfEnable, 0x1);		//0x1ff1
				dp_write_dsp_ram(PcmV_Version, 0x0);
				dp_write_dsp_ram(0x1ff0, 0x0);			//Host_flg
				dp_modem_command(GOTO_CMD,
							 VPCM_GOTO_ROM_ADRH,
							 VPCM_GOTO_ROM_ADRL);
			}
#endif	// DRAGNET2
		x_sleep(MS50);
		break;
	case 2:
		// (still) client
		x_debug_msg("fast rate change");
		vp_initiate_fast_retrain();
		break;
	}

	dp_56k_setFill(oldFill);
	return TRUE;

#else	// central site
	G(dp_56k_user_retrain) = G(io_at_esc_detect) ? TRUE : FALSE;

	switch(originator)
	{
	default:
	case 0:
	case 1:
		dp_56k_retrain();
		break;
	case 2:
		x_debug_msg("dp - 56k fast rate change");
		dp_modem_command(FAST_RATE_CHANGE, 0, 0);
		G(dp_56k_state) = DP_56K_ANS_PHASE3;	// check this.
		if ( G(vpcm_mode) == 1 )
		{
			G(dp_56k_state) = VPCM_RATECHANGE;
			x_debug_msg("vpcm - goto WAIT_FOR_PHASE3");
			dp_write_dsp_ram(0x1ff0, 0x0);			//Host_flg
		}
		break;
	}

	return TRUE;
#endif  // VENUS_CENTRAL_SITE
}


/****************************************************************
Routine : dp_56k_v34_mode
		  We're heading back to V.34 mode, take care of things
*****************************************************************/
void dp_56k_v34_mode(void)
{
	x_debug_msg("dp_56k_v34_mode()");

#if defined(VPCM_CLIENT)
	// Make sure we reinitialize any memory
	// that might be being used for slicer table
	// calculations.
	vp_free_mem();
	dp_write_dsp_ram(KfEnable, 0);
#endif
#if defined(CS_4)
	sa_dspInitQMP( V34_MODE );
#endif

	dp_write_dsp_ram(K56V_VERSION_RAM, 0);
	G(dp_56k_state) = DP_56K_INIT;
	G(dp_state) = DP_ON_DIAL;
	G(V34Mode) = 1;
	G(dp_bV34WkState) = WRK_NULL;
	G(dp_count) = 1;
	G(vpcm_mode) = 0;
	G(vpcm_datamode) = 0;
}

/****************************************************************
Routine : dp_pcm_common_connect
		Common things done when connecting
		in k56/v90 for server/client
*****************************************************************/
void dp_pcm_common_connect(void)
{
	if ( (G(S).ModemOptions.SpeakerControl == 1) ||
		 (G(S).ModemOptions.SpeakerControl == 3) )
	{
		// Turn off call progress speaker since we've connected.
		x_output(IO_SPEAKER_OFF);
	}
	G(dp_count) = 0;
	G(dp_line_state) = DP_LINE_CONNECTED;
	G(x_modem_state) = MS_ON_DIAL;
	G(dp_timer1) = G(dp_timer) = x_current_time();
	dp_lapm_error_check_init();

	// update info for ATI11
	dp_56k_update_connect_status();
	dp_update_diagnostics();

	// Give the connect message if we haven't already
	if (!G(dp_56k_connected))
	{
		G(x_status).IniTransmitRate = (word) G(x_line_rate_tx);
		G(x_status).IniReceiveRate = (word) G(x_line_rate);

		// Sending the DP_IO_CONNECT to IO_TASK starts the
		// ball rolling for protocol negotiation and (eventually)
		// gives a CONNECT message to the DTE.
		x_send_mail(DP_IO_CONNECT, IO_TASK, NULL, 0);
		G(dp_56k_connected) = 1;
		G(dp_v90_ff).secs = 12;	// seconds of perfection required for FF

#ifdef QUICK_CONNECT_TIME_DEBUG
		sendCrLf();
		x_debug_msg("***dp_time_to_connect_time=");
		dp_puts_dec(x_elapsed_time(G(dp_time_to_connect_timer)));
		sendCrLf();
#endif	// QUICK_CONNECT_TIME_DEBUG
#ifdef VPCM_CLIENT
		G(dp_connect_time) = x_elapsed_time(G(dp_time_to_connect_timer));
#endif	// VPCM_CLIENT
	}
	else
	{
		if (G(dp_56k_user_retrain))
		{
			// This is the path for atoX commands
			// where the user needs to see another
			// CONNECT message but we don't need
			// to negotiate LAPM.
			x_debug_msg("vpcm_connect - dp_56k_user_retrain");
			x_send_mail(DP_IO_RETRAIN_OVER, IO_TASK, NULL, 0);
			x_send_mail(AT_IO_ON_LINE, IO_TASK, NULL, 0);
			G(dp_56k_user_retrain) = 0;
		}

		dp_56k_setFill(G(DpIdleFillChar));
		G(dp_v90_ff).secs = G(dp_v90_ff).perfection;
	}
}


#if defined(EXT_MODEM) || defined(USB_MODEM) || \
	defined(THUNDER) || defined(MODEM_ARM)
# define Oscr_delay()
#endif

/****************************************************************
Routine : dp_disable_dspints

Description :
	Mask the DSP interrupts for the various configurations
	(USB_MODEM, THUNDER, etc.).
*****************************************************************/
void dp_disable_dspints ( void )
{
#if defined(THUNDER)
	if ( dte_modem_type == USB_INTERFACE )
	{
		dp_regwrite( 0xd7, 0xbf );		// disable all but ATLAS interrupts
		dp_regwrite( 0xd8, 0xbf );		// clear all but ATLAS interrupts
	}
	else
	{
		dp_regwrite( 0xd7, 0xff );		// disable all interrupts
		dp_regwrite( 0xd8, 0xff );		// clear all interrupts
	}
#elif defined(USB_MODEM)
	dp_regwrite( 0xd7, 0xbf );		// disable all but ATLAS interrupts
	dp_regwrite( 0xd8, 0xbf );		// clear all but ATLAS interrupts
#else
	dp_regwrite( 0xd7, 0xff );		// disable all interrupts
	dp_regwrite( 0xd8, 0xff );		// clear all interrupts
#endif	// !THUNDER
}

/****************************************************************
Routine : dp_reset_venus
Description :
	Reset the Venus DSP to get everything happy again.

	We've had lots of problems with this function.  If the
	DSP is reset when we're in the middle of certain MIMIC
	operations then the PC's comm driver will lock up, forcing
	the user to quit the comm application and restart to be
	able to talk to the modem again.

	Also, for PC Card if this is done there are '%' characters
	coming out for native DOS and Win 3.1 PC's.  So for the
	PC Card platform this is done only as a last resort.
*****************************************************************/
void
dp_reset_venus(void)
{
#if !defined( MODEM_Z80 )
	return;
#else
	extern void venus_init(void);
	byte oldDE = dp_regread(0xDE);

#if defined(PCMCIA_MODEM) || defined(EXT_MODEM) || defined(USB_MODEM) \
		 || defined(PCI_MODEM) || defined(THUNDER)
	// For modems above we don't do this unless
	// we're dead because bad things come out
	// the PC interface. (percent character problem)
	dp_write_dsp_ram(K56V_MODE_RAM, 0x5a5a);
	if (0x5a5a == dp_read_dsp_ram(K56V_MODE_RAM))
	{
		x_debug_msg ("dp - dp_reset_venus() - no reset when DSP sane.");
		return;
	}
	dp_write_dsp_ram(K56V_MODE_RAM, 0x0);
#endif
	x_debug_msg ("dp - dp_reset_venus()");

	disable_interrupt();

	dp_disable_dspints();

	dp_regwrite(0xDE, oldDE | 1);	// reset DSP
	dp_regwrite(0xDF, 0);			// reset pin master
	Oscr_delay();
	dp_regwrite(0xDE, oldDE);		// unreset DSP

	while (!(dp_regread(0xdf) & 1))
	{
		Oscr_delay();
	}

#if defined(PCMCIA_MODEM)
#if defined(Z80_DEBUG_PRINT)
	dp_regwrite(0x61, 8);		// allow IOCS for printing
#endif
	dp_regwrite(0xc0, 0x01);	// Set scenario bits in MMI Cntrl Register
	dp_regwrite(0x57, 0x00);	// clear ready to host
	dp_regwrite(0x57, 0x01);	// Set READY to host
#endif

#if defined(THUNDER)
	if ( dte_modem_type == EXT_INTERFACE )
	{
		dp_regwrite(0xca, 0x00);	// disable host pc access to MIMIC (MCAD)
									// and DIA (for DSP access)
		dp_regwrite(0xda, 0x16);	// call progress through SIO and
									// IOCS2 for Serial Dumb Terminal
		dp_regwrite(0xc0, 02);		// enable SERIAL Scenario
		dp_regwrite(0xdf, 1);		// enable pin master
	}
#elif defined(EXT_MODEM)
	// Serial
	dp_regwrite(0xca, 0x00);	// disable host pc access to MIMIC (MCAD)
								// and DIA (for DSP access)
	dp_regwrite(0xda, 0x16);	// call progress through SIO and
								// IOCS2 for Serial Dumb Terminal
	dp_regwrite(0xc0, 02);		// enable SERIAL Scenario
	dp_regwrite(0xdf, 1);		// enable pin master
#endif	// !THUNDER

	// initialize parallel port registers, all output pins on camil etc.
#if defined (VENUS_WORLD_DAA)
	{
		extern void x_output_init (void);
		x_output_init();		// for International
	}
#else
	x_output(IO_OUTPUT_INIT);
#endif

	dp_disable_dspints();

	enable_interrupt();
	venus_init();

#if defined(CS_DIGITAL)
	if ( G(vpcm_mode) == 0 )
	{
		if (G(S).ModemOptions.DigitalLoss56K & 1)
		{
			x_debug_msg("dp - A-law");
			#if defined(CS_4)
			dp_write_dsp_ram(0x826, 0x1440);
			#else
			dp_write_dsp_ram(0x826, 0x0440);
			#endif
		}
		else
		{
			x_debug_msg("dp - u-law");
			#if defined(CS_4)
			dp_write_dsp_ram(0x826, 0x1040);
			#else
			dp_write_dsp_ram(0x826, 0x0040);
			#endif
		}

	}
	dp_write_dsp_ram(0x102f, 0x00);
#endif	// CS_DIGITAL
	x_debug_msg ("dp - done with dp_reset_venus()");
#endif	//} MODEM_Z80
}

#endif // VPCM_CLIENT || VPCM_SERVER

