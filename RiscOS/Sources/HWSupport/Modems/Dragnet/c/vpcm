/*name and version number:@(#)vpcm.c	1.117*/
/*date of get: 		  12/15/00 10:10:29*/
/*date of delta:	  11/30/00 17:00:13*/
/****************************************************************
File :	vpcm.c
Description :
	vpcm VENUS data pump interface.

Procedures Contained :

Revision History :
	Initials	Date		Change
*****************************************************************/

/****************************************************************
List of vpcm Venus files:


*****************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"

#if defined (VPCM_CLIENT) || defined(VPCM_SERVER)
#include "atglob.h"
#include "dpglob.h"
//msm// #include "z80glob.h"
#include "ioglob_d.h"
#if defined(CS_MODEM)
# include "csglob.h"
#endif

#include "allglobs.h"

extern void dp_pcm_common_connect(void);
extern void dp_56k_setFill(byte oldFill);
extern void dp_56k_v34_training_state(void);
extern void read_dpram_d500 ( void );


#ifndef VPCM_CLIENT // SERVER defines
# define V8VpcmCapLocal			0x1ff8
# define K56_bits_tx			0x1ff0
# define Tx_ena					0x2008
# define Rx_ena					0x2009
# define INFO0_tx_Wd2			0x2004
# define K56V_VERSION_RAM		0x2017
# define VPCM_FINAL_CHK_LOC		K56V_VERSION_RAM
#endif	// !VPCM_CLIENT

/****************************************************************
Routine : vpcm_download_phase1_phase2 - client & server
*****************************************************************/
void vpcm_download_phase1_phase2(void)
{
	dp_modem_idle_cmd();

	G(k56_timer) = x_current_time();
	dp_download_PCM_P12();
	x_debug_msg("vpcm_download_phase1_phase2 - done time=");
	dp_puts_dec(x_elapsed_time(G(k56_timer)));
	sendCrLf();
	G(vpcm_download) = 1;
}

/****************************************************************
Routine : vpcm_download_phase3_phase4 - client & server
*****************************************************************/
void vpcm_download_phase3_phase4(void)
{
	x_debug_msg("vpcm_download_phase3_phase4");

	// setup DPRAM_baud to NULL (0x0f20 to 0x8ece)
	dp_write_dsp_ram(AP_DPRAM_BAUD, AP_DSP_NUL);
	dp_download_PCM_34iram();

	// setup DPRAM_baud to go to 0xd0c8
	dp_write_dsp_ram(AP_DPRAM_BAUD, 0xd0c8);
}

/****************************************************************
Routine : vpcm_hangup() - client & server

		Called from dp_onhook_cmd(), make sure variables
		are properly cleaned up as we've hung up the v.90
		call.
*****************************************************************/
void vpcm_hangup(void)
{
	if (G(vpcm_mode) == 1 || G(vpcm_download) == 1)
	{
		x_debug_msg("vpcm_hangup()");

#if defined(K56FLEX) &&	!defined(CS_MODEM) && !defined(CS_4)
        if( !G( dp_daa_is_perseus ))
        {
		    // re-download K56FLEX ERAM here
		    dp_download_K56EROM();
        }
#endif
		G(vpcm_mode) = 0 ;
		G(vpcm_datamode) = 0;
		G(vpcm_download) = 0;

		// put the data pump in parallel async mode
		dp_async_8bit_mode();
	}
}

/****************************************************************
Routine : vpcm_connect - client & server
	  Connecting in V.9x mode.
*****************************************************************/
void vpcm_connect(void)
{
	x_debug_msg("vpcm_connect()");
#if defined(VPCM_CLIENT)
# if defined(CALL_WAITING)
	G(vpcm_call_waiting) = 0;	// no call waiting in progress now
	if (G(dp_CallWaitingEnable) != 2)
	{
		// enable V.90 call waiting
		dp_write_dsp_ram(K56Opt, (dp_read_dsp_ram (K56Opt) | 1));
	}
# endif  // CALL_WAITING

#else
	// (server)
	G(vpcm_retrain_count) = 0;
# if defined(CS_4)
	sa_dspInitQMP( V90_MODE );
# endif
#endif // VPCM_CLIENT

	//------------------------------------------------
	// For Server: 0x2017 cleared upon retrain and
	// set in phase 4 if VPCM successfull.
	// For Client: 0x1ff1 is the RAM Location used.
	//------------------------------------------------
	if (0 == dp_read_dsp_ram(VPCM_FINAL_CHK_LOC))
	{
		// didn't make it to v.90 mode.
		dp_56k_v34_mode();
		dp_56k_v34_training_state();
		return;
	}
	else
	{
		G(vpcm_datamode) = 1;
		G(dp_56k_state) = VPCM_DATA_MODE;
#if !defined(CS_MODEM)
		G(x_status).Connection = AT_MOD_V90;

# if defined(VPCM_CLIENT)
		vpcm_bad_mse = 0;
		x_debug_msg("KfEnable (0x1ff1)=");
		sendHexWord(dp_read_dsp_ram(KfEnable));

		G(vpcm_v92_control) = dp_read_dsp_ram(K56Opt);
		x_debug_msg(" vpcm_v92_control (0x1ff2)=");
		sendHexWord(G(vpcm_v92_control));

		G(vpcm_v92_status) = dp_read_dsp_ram(0x820);
		x_debug_msg(" vpcm_v92_status (0x820)=");
		sendHexWord(G(vpcm_v92_status));

		x_debug_msg("\r\nvpcm_remote_qc_parameter=");
		sendHexWord(G(vpcm_remote_qc_parameter));

		if ( G(vpcm_v92_status) & 0x1000 )
			G(vpcm_connection_status) = G(vpcm_connection_status) | 0x4;
		x_debug_msg(" vpcm_connection_status=");
		sendHexWord(G(vpcm_connection_status));
		sendCrLf();

		if ((G(vpcm_v92_status) & 0x8000) &&
			(G(S).ModemOptions.VpcmOption & BIT4))
		{
			G(x_status).Connection = AT_MOD_V92;
		}
# endif // VPCM_CLIENT
#endif
		cs_insert_error_tag(0xcf00,0);
	}

	dp_pcm_common_connect();
	G(k56_timer) = x_current_time();
}

#if defined(VPCM_CLIENT)
/****************************************************************
Routine : vpcm_download_client - client only
*****************************************************************/
void vpcm_download_client(void)
{
	x_debug_msg("vpcm_download_client()");
	vpcm_download_phase1_phase2();

	G(k56_timer) = x_current_time();
	vpcm_download_eram();	// download V.92 erom
	x_debug_msg("Done downloading ERAM, time=");
	dp_puts_dec(x_elapsed_time(G(k56_timer)));sendCrLf();
}

/****************************************************************
Routine : vpcm_startup - client only
*****************************************************************/
void vpcm_startup(void)
{
	x_debug_msg("vpcm_startup()");

	// vpcm enabled
	G(vpcm_mode) = 1;

	vpcm_download_phase1_phase2();

	// Check whether we're in calling mode
	// or answering mode.  In answering mode
	// we need to download the EROM image.
	if (G(vpcm_camode) == ANSWER)
	{
		vpcm_download_eram();	// vpcm erom
	}

	dp_56k_init();
}

/****************************************************************
Routine : vpcm_init  - client only.

	Called by dp_56k_init() just before the DSP is told to
	do the startup.
*****************************************************************/
void vpcm_init(void)
{
	byte *temp_ptr1, *temp_ptr2, i;
	byte dial_string_not_equal;

	x_debug_msg("vpcm_init()");

	G(vpcm_datamode) = 0;

	dp_write_dsp_ram(KfEnable, 0);	// 0x1ff1

	// startup v.90 - extra parameter for calling or answering mode
	dp_modem_command_long(GOTO_CMD, 0xd0, 0xc8, G(vpcm_camode), 0);

	// Maximum downstream rate allowed in V.90
	// After connecting this can be reduced if we
	// have troubles with the autorated speed.
	G(dp_pcm_max_rate) = MRV_53333 - MR_60000;		// 53.3 kbps

	// setup v92 parameters for dsp if enable
	if (G(S).ModemOptions.VpcmOption & BIT4)	// V.92 enable
	{
		G(vpcm_v92_control) = dp_read_dsp_ram(K56Opt); // P1 QC may be enabled
		G(vpcm_v92_control) |= BIT6;				// V.92 enabled

		// Should we do short phase 2 ?

		// Did we dial the same phone number?
		dial_string_not_equal = 0;
		temp_ptr1 = G(dp_dial_string);
		temp_ptr2 = G(dp_saved_dial_string);
		temp_ptr1++;	// skip tone/pulse dial symbol
		temp_ptr2++;	// skip tone/pulse dial symbol
		while ((*temp_ptr2) && (*temp_ptr1) && (dial_string_not_equal == 0))
		{
			if ( *temp_ptr1 != *temp_ptr2 )
			{
				dial_string_not_equal = 1;	// we dial different phone no
			}
			temp_ptr1++;	 
			temp_ptr2++;	 
		}
		if (dial_string_not_equal == 1)
		{
			x_debug_msg("different dial string");
			G(vpcm_remote_info) = 0;	// clear remote info
		}
		x_debug_msg("vpcm_remote_info=");
		sendHexWord(G(vpcm_remote_info));sendCrLf();

		if  ( ( (G(S).ModemOptions.VpcmOption & 0x30) == 0x30 )
				&& ( dial_string_not_equal == 0 )
				&& ( ( G(vpcm_remote_info) & 0xc000 ) == 0xc000 )
			)
		{
			// V.92 enable, QC short phase 2 locally,
			//	and dial the same number
			//	and remote indicates v92 and short phase 2 capabilities
			//  then, write back 11 saved dsp rams for short phase 2
			// setup for v92 short phase2
			for (i=0; i<11; i++)
			{
				dp_write_dsp_ram((word)(0x24cc + i), G(dp_short_phase2)[i]);
				dp_puts_hex(G(dp_short_phase2)[i]);
			}
			x_debug_msg("vpcm - QC P2 11 dsp rams written (0x24cc - 0x24d6)");
			G(vpcm_v92_control) |= BIT7;
		}

		if (G(S).ModemOptions.V42 & V42_LAPM_BIT)
		{
			G(vpcm_v92_control) |= 0x0400;			// BIT10
		}
		else
		{
			G(vpcm_v92_control) &= 0xfbff;			// BIT10
		}

		dp_write_dsp_ram(K56Opt, G(vpcm_v92_control));
		x_debug_msg("vpcm_v92_control/K56Opt/0x1ff2=");
		sendHexWord(G(vpcm_v92_control));sendCrLf();
	}
 	G(dp_56k_state) = VPCM_MONITOR_V8 ;

#if defined(HOMOL)
	dp_write_dsp_ram(GermanyFix, 0);
	// Enable germany fix for germany only.
	// Germany fix accounts for null at 4 kHz.
	if (G(S).ModemOptions.CountryId == GERMANY)
	{
		x_debug_msg("vpcm - germany fix enabled");
		dp_write_dsp_ram(GermanyFix, 1);
	}
#endif  // HOMOL
}

/****************************************************************
Routine : vpcm_in_retrain_state - client only
*****************************************************************/
byte vpcm_in_retrain_state(void)
{
	if (!(dp_read_dsp_ram(DSP_STATUS_RAM) & 0x0008))		// data mode bit
	{
		return TRUE;
	}
	return FALSE;
}
#endif	// VPCM_CLIENT

#if defined(VPCM_SERVER)
/****************************************************************
Routine : vpcm_startup - server only
*****************************************************************/
void vpcm_startup ( void )
{
	x_debug_msg("vpcm - startup ") ;

	if ( G(S).ModemOptions.VpcmOption == 0 )
	{
		// forced k56flex, vpcm disabled
		G(vpcm_mode) = 0 ;
		x_debug_msg ( "vpcm - vpcm disabled" ) ;
	}
	else
	{
		// vpcm enabled
		G(vpcm_mode) = 1 ;
		x_debug_msg ( "vpcm - vpcm enabled" ) ;
		G(S).ModemOptions.Enabled56K = FALSE ;
	}
	if ( G(vpcm_mode) == 1 )
	{
		// download phase 1 and phase 2
		vpcm_download_phase1_phase2 () ;

		// download vpcm erom
		vpcm_download_eram () ;
	}
	dp_56k_init() ;
}

/****************************************************************
Routine : vpcm_init - server only
*****************************************************************/
void vpcm_init ( void )
{
	word temp ;
	
	x_debug_msg("vpcm - init ") ;

	// copy local vpcm digital availability and digital network connection
	dp_write_dsp_ram( V8VpcmCapLocal, 0x000d );		// 0x1ff8
#if defined(VPCM_TESTING)
	// force to fallback to v34 if   S25 == 1
	if (G(S).ModemOptions.Dummy25 == 1)
		dp_write_dsp_ram( V8VpcmCapLocal, 0x000c );
#endif	// VPCM_TESTING

        //Add initiliaztion for downstream rate for use w/ dsp 1.45 or later
        // =======================
        // 0x1ff6   |  MAX RATE	 |
        // =======================
        //   1:			28000    |   
        //   2:			29333    |   
        //   3:			30666    |   
        //   4:			32000    |   
        //   5:			33333    |   
        //   6:			34666    |   
        //   7:			36000    |
        //   8:			37333    |
        //   9:			38666    |
        //   10:		40000    |
        //   11:		41333    |
        //   12:		42666    |
        //   13:		44000    |
        //   14:		45333    |
        //   15:		46666    |
        //   16:		48000    |
        //   17:		49333    |
        //   18:		50666    |
        //   19:		52000    |
        //   20:		53333    |
        //   21:		54666    |
        //   22:		56000    |
        // =======================
                
	dp_write_dsp_ram ( 0x1ff6, 0x16 );
	G(dp_pcm_max_rate) = 0; G(dp_pcm_min_rate) = 0x16;
	G(dp_lcl_rx_ratechange) = G(dp_lcl_tx_ratechange) = 0;
	G(dp_tx_rateincrease) = 0; G(dp_pcm_lst_rate) = 0;

	// enable vpcm
	dp_write_dsp_ram ( K56_bits_tx, 0x0001 ) ;			// 0x1ff0

	dp_write_dsp_ram(0x1ff9, (word)(G(x_line_rate) - 4));	//0x1ff9
	
	// load INFO0 Wd2
	dp_write_dsp_ram ( INFO0_tx_Wd2, 0x06f0 );			// 0x2004  

	// disable PCM transmitter
	dp_write_dsp_ram ( Tx_ena, 0x0000 )	;				// 0x2008

	// enable V34 RCV selection
	dp_write_dsp_ram ( Rx_ena, 0x0001 )	;				// 0x2009

	dp_write_dsp_ram ( 0x0821, 0x0358 );

	if (G(S).ModemOptions.DigitalLoss56K & 1)
	{
		x_debug_msg("dp - A-law");
		dp_write_dsp_ram ( 0x200D, 0x0001 );	// A-law
		dp_write_dsp_ram ( INFO0_tx_Wd2, 0x0eec );			// 0x2004
	}
	else
	{
		x_debug_msg("dp - u-law");
		dp_write_dsp_ram ( 0x200D, 0x0000 );	// u-law

		// load INFO0 Wd2
		dp_write_dsp_ram ( INFO0_tx_Wd2, 0x06f0 );			// 0x2004  
	}

	read_dpram_d500 () ;
	temp = dp_read_dsp_ram( V8VpcmCapLocal ) ;
	if ( temp != 0xd )
	{
		x_debug_msg("vpcm : dead dsp ");
	}

#ifdef CS_CALLBACK
	x_debug_msg("vpcm : clear KfEnable");
	dp_write_dsp_ram( G(dp_KfEnable), 0x0);
#endif

	// startup vpcm
	dp_modem_command_long(GOTO_CMD, 0xd5, 0x00, G(vpcm_camode), 0);

	x_debug_msg("vpcm_camode =");sendHexByte(G(vpcm_camode));sendCrLf(); 
	x_debug_msg("vpcm : issued dsp startup cmd : server ");

	G(dp_56k_state) = VPCM_MONITOR_V8 ;
	x_debug_msg("vpcm - goto MONITOR_V8 state ") ;
}

/****************************************************************
Routine : vpcm_data_mode - server only
		  central site checks in data mode
*****************************************************************/
void vpcm_data_mode ( void )
{
	word temp;

	if (dp_lapm_error_check())
	{
		temp = dp_read_dsp_ram(0x834);
		// Do not reduce rate below 14400, to stop spiraling rate changes.
		if (temp > 7)
		{
			// Set bit rate selection bit (12) to manually force rate
			// change down
			dp_write_dsp_ram( 0x821, (word) (dp_read_dsp_ram( 0x0821 ) | 0x1000));
			dp_write_dsp_ram( 0x1ff9, --temp );

			#if defined(MODEM_ARM)
			PM_PRINTING_ON(1);
			printf("vpcm: max upstream errors, new rate=%d\n",(U32)temp*2400);
			PM_PRINTING_OFF();
			#else
			x_debug_msg("vpcm: max upstream errors, new rate =");
			sendDecByte((byte) temp); sendCrLf();
			#endif

			dp_v90_fast_retrain_cmd();
			cs_insert_error_tag( 0xeb00,0 );
			x_sleep(2);	// don't let SA read data mode bit too fast
		}
	}
	else if (dp_tx_lapm_error_check())
	{
		#if defined(Z80_DEBUG_THIS_FILE)
		PM_PRINTING_ON(1);
		x_debug_msg("vpcm - new Upper limit(1ff6)=");
		sendHexWord(G(dp_pcm_max_rate)); sendCrLf();
		PM_PRINTING_OFF();
		#endif

		// set new upper limit
		dp_write_dsp_ram( 0x1ff6, G(dp_pcm_max_rate) );
		dp_56k_retrain_cmd(1) ;
	}
	else
	{
		if ( DSP_IN_RATECHANGE() )
		{
			word retrain_status = DP_READ_DSP_3A();

			if (retrain_status & 0x2) // retrain 
			{
				PM_PRINTING_ON(1);
				x_debug_msg("vpcm_data - retrain detected!");
				PM_PRINTING_OFF();
#if defined(CS_MODEM)
				//update msi retain count and remote/local
				G(dp_cs_local_retrain_ratechange) = 2;
				cs_k56_remote_or_local(RETRAIN);
#else
				REMOTE_RET_INCREMENT ; // update the retrain status
#endif
				// clear retrain bit
				dp_write_dsp_ram(0x3a, (word) (retrain_status & ~0x0002));
				G(dp_56k_state) = VPCM_RETRAIN ;
				x_debug_msg("vpcm_data - go to VPCM_RETRAIN state");
				// Fix for connect messages displayed on a retrain after
				// an ATO3
				G(dp_56k_user_retrain) = 0;
				dp_56k_retrain();
			}
			else if (retrain_status & 0x4) // fast rate change 
			{
#if defined(CS_MODEM)
				if (G(k56_ratechange_detected) == NO)
				{
					//update msi retain count and remote/local
					cs_k56_remote_or_local(FAST_RATE_CHANGE);
					G(k56_ratechange_detected) = YES;
				}
#else
				REMOTE_RR_INCREMENT;
#endif
				// Fix for connect messages displayed on a retrain after
				// an ATO3.
				G(dp_56k_user_retrain) = 0;
				PM_PRINTING_ON(1);
				x_debug_msg ("dp - vpcm fast rate change detected");
				PM_PRINTING_OFF();
				G(dp_56k_state) = VPCM_RATECHANGE ;
			}
		}
		else
		{
#if defined(CS_MODEM)
			// NewMSI update MSI and reset msi timer
			cs_msi_update();
			if (G(k56_ratechange_detected) == YES)
			{
				if (dp_read_dsp_ram(0x3A) & 0x0008)
				{
					G(k56_ratechange_detected) = NO;
					cs_msi_update();	
					cs_compose_forward_or_back();
				}
			}
#endif
			G(dp_timer) = x_current_time();
		}

		// Every second, look at the received line quality and rate
		// change or retrain as appropriate.
		if (x_elapsed_time(G(k56_timer)) >= SECOND1) 
		{
			G(k56_timer) = x_current_time () ;

#if !defined(CS_MODEM)
			G(x_status).NoiseLevel = dp_read_dsp_ram(0x4c);
#endif
			if (dp_read_dsp_ram(sq_status) & 0x4)
			{
				if (G(dp_count) > 6)
				{
					// If the bad_mse count goes to 7 four times within
					// 40 seconds then the 3 ratechanges didn't work so
					// we do a full retrain instead of a 4th ratechange.
					if (x_elapsed_time(G(vpcm_rc_timer)) >= SECOND40)
					{
						G(vpcm_ratechange_count) = 0;
						G(vpcm_rc_timer) = x_current_time () ;
					}
					else
						G(vpcm_ratechange_count)++;
				
					if (G(vpcm_ratechange_count) < 3) 
					{
						PM_PRINTING_ON(1);
						x_debug_msg("vpcm: bad MSE threshold, do rate change");
						PM_PRINTING_OFF();
						dp_v90_fast_retrain_cmd();
						cs_insert_error_tag ( 0xf000,0 );
					}
					else
					{
						G(vpcm_ratechange_count) = 0;
						PM_PRINTING_ON(1);
						x_debug_msg("vpcm : 3 consecutive bad ratechanges");
						PM_PRINTING_OFF();

						#if defined(CS_MODEM)
						G(dp_cs_local_retrain_ratechange) = 1;
						cs_k56_remote_or_local(RETRAIN);	
						#endif
						G(dp_56k_state) = VPCM_RETRAIN ;
						dp_56k_retrain_cmd(1) ;
						cs_insert_error_tag ( 0xef00,0 );
					}
				}
				else
				{
					++G(dp_count) ;
					x_debug_msg("dp - mse++ =");
					sendDecByte(G(dp_count)); sendCrLf();
				}
			}
			// MSE was good this second, dec dp_count
			// as appropriate.
			else if ( G(dp_count) != 0 )
			{
				--G(dp_count) ;
				x_debug_msg("dp - mse-- =");
				sendDecByte(G(dp_count)); sendCrLf();
			}
		}
	}
}

/****************************************************************
Routine : vpcm_retrain_monitor - server only
*****************************************************************/
void vpcm_retrain_monitor ( void )
{
	if ( DSP_IN_RATECHANGE() )
	{
		word retrain_status = DP_READ_DSP_3A();

		if (retrain_status & 0x2) // retrain 
		{
			cs_insert_error_tag ( 0xee00,0 );
			x_debug_msg("vpcm_data - retrain detected during retrain!");
#if defined(CS_MODEM)
			//update msi retain count and remote/local
			G(dp_cs_local_retrain_ratechange) = 2;
			cs_k56_remote_or_local(RETRAIN);	
#else
			REMOTE_RET_INCREMENT ; // update the retrain status
#endif
			// clear retrain bit
			dp_write_dsp_ram(0x3a, (word) (retrain_status & ~0x0002));
			G(dp_56k_state) = VPCM_RETRAIN ;
			x_debug_msg("vpcm_data - go to VPCM_RETRAIN state");
			dp_56k_retrain();
		}
	} 
}

#if !defined(CS_4)
/****************************************************************
Routine : vpcm_in_retrain_state - server only
	This function does NOT appear to be called by NON CS_MODEM
	baseline.
*****************************************************************/
byte vpcm_in_retrain_state ( void )
{
	if ( ( G(dp_56k_state) == VPCM_RETRAIN_WAIT_FOR_CONNECT )
		|| ( G(dp_56k_state) == VPCM_RATECHANGE_WAIT_FOR_CONNECT )
		|| ( G(dp_56k_state) == VPCM_RETRAIN )
		|| ( G(dp_56k_state) == VPCM_RATECHANGE )
		|| ( G(dp_state) == DP_TRAINING )
		|| ( G(dp_state) == DP_V34_RETRAIN )
		|| ( G(dp_56k_state) == DP_56K_ANS_AFTER_MP )
		|| ( G(dp_56k_state) == DP_56K_ANS_PHASE3 )
		|| ( G(dp_56k_state) == DP_56K_ANS_PHASE1 )
		|| ( G(dp_56k_state) == VPCM_WAIT_FOR_CONNECT ) )
	{
		if ( !G(vpcm_in_retrain_state_detected) )
		{
			cs_insert_error_tag	(0xd500,0);
			x_debug_msg("lapm - got ratechange or retrain during lapm negotiation");
			G(vpcm_in_retrain_state_detected) = 1;
		}
		return (TRUE);
	}
	return (FALSE);
}
#endif	// !CS_4
#endif	// VPCM_SERVER

#if defined(CS_CALLBACK)
/****************************************************************
Routine : vpcm_set_calling_mode - client & server
*****************************************************************/
void vpcm_set_calling_mode ( void )
{
	G(vpcm_camode) = ORIGINATE; // 1
}

/****************************************************************
Routine : vpcm_set_answering_mode - client & server
*****************************************************************/
void vpcm_set_answering_mode ( void )
{
	// setup camode to be answering mode
	G(vpcm_camode) = ANSWER;   // 0
}
#endif  // CS_CALLBACK
#endif	// VPCM_SERVER || VPCM_CLIENT
