/*name and version number:@(#)iodce.c	1.79*/
/*date of get: 		  09/06/00 16:59:13*/
/*date of delta:	  05/17/00 15:33:49*/
/****************************************************************
File :	iodce.c
Description :
	Contains all dce fifo functions.

Procedures Contained :
	io_init_dce_tx_fifo
	io_init_dce_rx_fifo
	io_get_dce_rx_count
	io_read_dce_fifo
	io_start_dce_transmit
	io_write_dce_fifo 
	io_get_dce_tx_count
	io_get_dce_queue_count
	io_dce_tx_fifo_empty
	io_tx_hdlc_frame
	io_tx_hdlc_flags

Revision History :
	Initials	Date		Change
	VR      	06/17/93	Initial
	RHD      	01/05/96	Computed size for io_get_dce_tx_count
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "z80glob.h"
#include "allglobs.h"

/****************************************************************
Routine : io_init_dce_tx_fifo
	Reset dce transmit fifo.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void io_init_dce_tx_fifo ( void )
{
	G(io_dce_tx_sptr) = G(io_dce_tx_buff) ;
	G(io_dce_tx_eptr) = ( G(io_dce_tx_buff) + IO_DCE_TX_BUFF_SIZE ) ;
	G(io_dce_tx_wptr) = G(io_dce_tx_sptr) ;
	G(io_dce_tx_rptr) = G(io_dce_tx_sptr) ;
	#if defined(HDLC_FRAMES_BY_REFERENCE)
	lapm_clrTXflags();
	#endif	//HDLC_FRAMES_BY_REFERENCE
}

/****************************************************************
Routine : io_init_dce_rx_fifo
	Reset dce receive fifo.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void io_init_dce_rx_fifo ( void )
{
	G(io_dce_rx_sptr) = G(io_dce_rx_buff) ;
	G(io_dce_rx_eptr) = ( G(io_dce_rx_buff) + IO_DCE_RX_BUFF_SIZE ) ;
	G(io_dce_rx_wptr) = G(io_dce_rx_sptr) ;
	G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;
}

/****************************************************************
Routine : io_get_dce_rx_count 
	Calculates the number of bytes available to read.
*****************************************************************/
non_banked word io_get_dce_rx_count ( void )
{
	word  size;
	word  *wptr ;

	size = (word) (G(io_dce_rx_eptr) - G(io_dce_rx_sptr));	// end minus start
	wptr = G(io_dce_rx_wptr) ;
	if ( wptr >= G(io_dce_rx_rptr) )
		return (word) ( wptr - G(io_dce_rx_rptr) ) ;
	else
		return (word) ( size + (wptr - G(io_dce_rx_rptr)) ) ;
}

/****************************************************************
Routine : io_read_dce_fifo 
Parameters in :
	to -	pointer to write data 
	count-	count of bytes to read
Parameters out :
	rx_count- actual bytes read	
*****************************************************************/
non_banked byte io_read_dce_fifo ( byte count, word* to )
{
	byte rx_count = 0 ;

	if ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) )
	{
		rx_count = count ;
		do 
		{
			*to++ = *G(io_dce_rx_rptr)++ ;
			if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
				G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;
			--count;
		} while ( ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) ) && ( count > 0 ) ) ;
		rx_count = (byte) (rx_count - count);
	}
	return rx_count;
}

/****************************************************************
Routine : io_start_dce_transmit
	tell dp task to start dce transmission
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void io_start_dce_transmit ( void )
{
	// If dp is already sending data, there is no
	// reason to tell it to start sending.
	//
	// This test is here for performance reasons, speeding
	// things up a little.  The penalty is that if someone
	// changes the implementation in dp, this may need to
	// change as well.
	if ( !G(dp_dsp_data_in_progress) )
	{
		x_send_mail ( DP_START_TRANSMIT, DP_TASK, 0, 0 ) ;
	}
}

/****************************************************************
Routine : io_write_dce_fifo 
Parameters in :
	from -	pointer to write data 
	count-	count of bytes to write 
Parameters out :
	none
*****************************************************************/
non_banked void io_write_dce_fifo ( byte count, word* from )
{
	word  *wptr ;

	wptr = G(io_dce_tx_wptr) ;
	while ( count-- )
	{
		*wptr++ = (word) (*from++) ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
	}
	G(io_dce_tx_wptr) = wptr ;

	io_start_dce_transmit() ;
}

/****************************************************************
Routine : io_get_dce_tx_count
Description :
	This routine returns the free bytes available on the dce transmit queue.
Parameters in :
	none
Parameters out :
	bytes available on the dce transmit queue to be written
*****************************************************************/
non_banked word io_get_dce_tx_count ( void )
{
	word size;
	word count ;
	word  *rptr ;

	rptr = G(io_dce_tx_rptr) ;
	if ( G(io_dce_tx_wptr) >= rptr ) {
		size = (word) (G(io_dce_tx_eptr) - G(io_dce_tx_sptr));
		count = (word) ( size - (G(io_dce_tx_wptr) - rptr) ) ;
	}
	else {
		count = (word) (rptr - G(io_dce_tx_wptr)) ;
	}
	return ( count-1 ) ;
}

/****************************************************************
Routine : io_get_dce_queue_count
Description :
	This routine returns the number of bytes on the dce transmit queue
	yet to be transmitted.
Parameters in :
	none
Parameters out :
	bytes in the dce transmit queue
*****************************************************************/
non_banked word io_get_dce_queue_count ( void )
{
	word size ;
	word count ;
	word  *rptr ;

	rptr = G(io_dce_tx_rptr) ;
	if ( G(io_dce_tx_wptr) >= rptr ) {
		count = (word) (G(io_dce_tx_wptr) - rptr);
	}
	else {
		size = (word) (G(io_dce_tx_eptr) - G(io_dce_tx_sptr));	// end minus start
		count = (word) (size - (rptr - G(io_dce_tx_wptr)));
	}
	return ( count ) ;
}

/****************************************************************
Routine : io_dce_tx_fifo_empty
	return TRUE if dce transmit fifo is empty
*****************************************************************/
non_banked byte io_dce_tx_fifo_empty ( void )
{
	byte empty ;

	empty = FALSE ;

	if ( G(io_dce_tx_wptr) == G(io_dce_tx_rptr) )
		x_send_mail ( DP_TX_FIFO_EMPTY, DP_TASK, &empty, 1 ) ;
	return ( empty ) ;
}

/****************************************************************
Routine : io_tx_hdlc_frame
	Insert Start-of-frame and End-of-frame for hdlc transmission to dce.
Parameters in :
	from -	pointer to write data 
	count-	count of bytes to write 
Parameters out :
	none
*****************************************************************/
non_banked void io_tx_hdlc_frame ( byte count, byte* from )
{
	word  *wptr ;

	wptr = G(io_dce_tx_wptr) ;
	while ( count > 1 )
	{
		*wptr++ = (word) (*from++) ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
		--count;
	}

	*wptr = (word) (*from++) ;
	*G(io_dce_tx_wptr) |= HDLC_START_OF_FRAME ;
	*wptr++ |= HDLC_END_OF_FRAME ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	G(io_dce_tx_wptr) = wptr ;

	io_start_dce_transmit () ;
} // io_tx_hdlc_frame()


/****************************************************************
Routine : io_tx_hdlc_flags
	Insert flags for hdlc transmission to dce.
Parameters in :
	count-	count of flags to send
Parameters out :
	none
*****************************************************************/
non_banked void io_tx_hdlc_flags ( byte count )
{
	word *wptr ;

	wptr = G(io_dce_tx_wptr) ;
	while ( count-- )
	{
		*wptr++ = (word) (HDLC_TX_ANY_CHAR | 0x7e) ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
	}
	G(io_dce_tx_wptr) = wptr ;

	io_start_dce_transmit () ;
}
