/*name and version number:@(#)mnp_dte.c	1.82*/
/*date of get: 		  12/15/00 10:10:42*/
/*date of delta:	  11/30/00 16:59:06*/
/****************************************************************
File :	mnp_dte.c
Description :
	Contains two routines to transfer mnp data to or from the DTE.

Procedures Contained :
	mnp_build_lt_frame
	mnp_process_lt_frame

Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "atglob.h"
#include "ioglob_d.h"
#include "z80glob.h"
#include "lapm.h"
#include "mnp.h"
#include "allglobs.h"

#if defined(CS_DEBUG)
# include "mnp_dte.h"
#endif

#if defined(CS_4)
# define Z80_DEBUG_THIS_FILE
#endif	// CS_4

//==============================================================
// debug for LRQ tickers - Eventually remove (leaving else case)
//==============================================================
#if defined(Z80_DEBUG_THIS_FILE)
# define INC_LRQ_CNT()							\
  do {											\
	if ( ++G(lapm_rx_lrq_count) > G(mnp_k) ) {	\
		x_debug_msg("LRQ OVERFLOW");			\
	}											\
  } while (0)
# define DEC_LRQ_CNT()							\
  do {											\
	if ( G(lapm_rx_lrq_count) ) {				\
		sendHexWord(x_current_time());			\
		if ( --G(lapm_rx_lrq_count) ) {			\
			x_debug_msg(": LRQ--");				\
		} else {								\
			x_debug_msg(": LRQ=0");				\
		}										\
	} else {									\
		x_debug_msg("LRQ UNDERFLOW");			\
	}											\
  } while (0)

#else
# define INC_LRQ_CNT() ++G(lapm_rx_lrq_count)
# define DEC_LRQ_CNT() --G(lapm_rx_lrq_count)
#endif	// !Z80_DEBUG_THIS_FILE

#define MNP_DTE_OK_TO_LOOP		(1)

/****************************************************************
Routine : mnp_next_tx_wframep
Description :
	Get next mnp transmit frame for writing data.
Parameters in :
	none
Parameters out :
	pointer to next transmit frame to write data to if available.
	NULL if no frames available.
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked LAPM_FRAME* mnp_next_tx_wframep ( void )
{
	byte i ;

	LTFP = &LTF[0] ;
	for ( i = 0 ; i < G(mnp_k) ; ++i )	/* get index of frame to build */
	{
		if ( LTFP->txstatus == EMPTY )
		{
			LTFP->data[1] = PDU_LT ;

			if ( G(mnp_fixed_field_opt_flag) == TRUE )
			{
				LTFP->data[0] = 2 ; //header length
				LTFP->data[2] = G(mnp_vs)++ ;
				LTFP->len = 3 ;
			}
			else
			{
				LTFP->data[0] = 4 ; //header length
				LTFP->data[2] = 1 ;
				LTFP->data[3] = 1 ;
				LTFP->data[4] = G(mnp_vs)++ ;
				LTFP->len = 5 ;
			}
			return LTFP ;
		}
		LTFP ++ ;
	}
	return  NULL ;
}

/****************************************************************
Routine : mnp_build_lt_frame
Description :
	build lt frames to transmit to the dce
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_build_lt_frame ( void )
{
	byte hdr_len, mnp_framesize ;

	// check if frame currently being built
	if ( LTFP == NULL )
	{
		// get next frame pointer to build i-frame
		LTFP = mnp_next_tx_wframep() ;

		// return if no buffers available
		if ( LTFP == NULL )
			return ;

		// initial value of len is header length
		hdr_len = LTFP->len ;
		G(lapm_data_ptr) = &(LTFP->data[ hdr_len ]) ;
	}
	else
	{
		// header length
		hdr_len = LTFP->data[ 0 ] + 1 ;
	}

	#ifndef NO_MNP5
	if ( G(mnp_data_compression) == TRUE ) //mnp5 enabled
	{
		mnp_framesize = (byte)(G(mnp_max_info_octets) - 4) ;

		if ( G(S).ModemOptions.Parity && (G(S).ModemOptions.DataBits == 7) )
		{
			while ( ((LTFP->len - hdr_len) < mnp_framesize)
					&& !IS_DTE_RX_EMPTY() )
			{
				mnp5_encode( x_parity( *I(io_dte_rx_rptr)++ ) ) ;
				DTE_RX_UPDATE() ;
			}
		}
		else
		{
			while ( ((LTFP->len - hdr_len) < mnp_framesize)
					&& !IS_DTE_RX_EMPTY() )
			{
				mnp5_encode ( *I(io_dte_rx_rptr)++ ) ;
				DTE_RX_UPDATE() ;
			}
		}
		mnp5_encode_flush() ;
	}
	else // no mnp5 data compression
	#endif
	{
		mnp_framesize = (byte)(G(mnp_max_info_octets) + hdr_len) ;

		if ( G(S).ModemOptions.Parity && (G(S).ModemOptions.DataBits == 7) )
		{
			while ( (LTFP->len < mnp_framesize) && !IS_DTE_RX_EMPTY() )
			{
				//read data from dte receive queue
				*G(lapm_data_ptr)++ = x_parity ( *I(io_dte_rx_rptr)++ ) ;
				LTFP->len++ ;
				DTE_RX_UPDATE() ;
			}
		}
		else
		{
			while ( (LTFP->len < mnp_framesize) && !IS_DTE_RX_EMPTY() )
			{
				//read data from dte receive queue
				*G(lapm_data_ptr)++ = *I(io_dte_rx_rptr)++ ;
				LTFP->len++ ;
				DTE_RX_UPDATE() ;
			}
		}
	}

	if ( LTFP->len > hdr_len )
	{
		LTFP->txstatus = FULL ;
		LTFP = NULL ;

		TX_LAPM_FRAMES++;

		if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
			mnp_tx_hdlc_frame () ;
		else
			mnp_tx_octet_frame () ;


	}
}

/****************************************************************
Routine : mnp_rx_frame_in_window
Description :
	is incoming lt frame in future or past
Parameters in :                                                            
	cur_ns:		N(S) of current lt frame
Parameters out :
	BOOL:		TRUE if in future
Revision History :
	Initials	Date		Change
*****************************************************************/
non_banked byte mnp_rx_frame_in_window ( byte cur_ns )
{
	word ns ;

	if ( cur_ns < G(mnp_vr) )		// e.g. ns=1, vr=255
		ns = cur_ns + 256;
	else
		ns = cur_ns;

	return  (byte)(ns - (word)G(mnp_vr)) <= G(mnp_k) ? TRUE : FALSE ;
}

/****************************************************************
Routine : mnp_decode_lt_frame
Description :
	process incoming lt frames received from the dce
Parameters in :                                                            
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked byte mnp_decode_lt_frame ( MNP_RX_FRAME *ptr )
{
	word count, len;
	byte *wptr, *rptr, rx_ns ;

	// process new mnp frame
	if ( ptr->status == FULL )
	{
		RX_LAPM_FRAMES++;

		// if new lt-frame, check sequence number
		if ( G(mnp_fixed_field_opt_flag) )
			rx_ns = ptr->data[2] ;
		else
			rx_ns = ptr->data[4] ;

		if ( rx_ns != G(mnp_vr) ) //out of sequence lt frame
		{
			if ( mnp_rx_frame_in_window ( rx_ns ) )
			{
				 RX_LAPM_ERRORS++;

				#if defined(Z80_DEBUG_THIS_FILE)
				PM_PRINTING_ON(1);
				sendHexWord(x_current_time());
				x_debug_msg(": mnp rx seq err: ns="); sendDecByte(rx_ns);
				x_debug_msg(", vr="); sendDecByte(G(mnp_vr));
				sendCrLf();
				PM_PRINTING_OFF();
				#endif
			}
			return TRUE;
		}

		// increment ack state var (no modulus 256 needed)
		G(mnp_vr)++ ;

 		// correct in-sequence lt frame received
		rptr = &ptr->data [(ptr->data[0]+1)] ; //past hdr.

		// get only information field length
		len = (word) (ptr->len - (ptr->data[0] + 1));
		G(mnp_seq_recover_flag) = TRUE ;
	}
	else 	//	frame in progress
	{
		// point to the previous data field
		rptr = &ptr->data [ptr->len - ptr->rlen] ;
		len = ptr->rlen ;    	// get length of bytes left over
	}

	// get the count of bytes available to transmit to the dte
	count = io_get_dte_tx_count () ;

	G(lapm_dte_wptr) = (byte *) I(io_dte_tx_wptr) ;	// get dte tx buffer

#ifndef NO_MNP5
	if ( G(mnp_data_compression) == TRUE )
 	{
 		while ( ( count >= 256 ) && ( len ) ) 
 		{
 			count = (word) (count - mnp5_decode ( *rptr++ ));
 			--len ;
 		}
	}
	else	// no data compression
#endif
	{
		while ( ( count > 0 ) && ( len ) )
		{
			*G(lapm_dte_wptr)++ = *rptr++ ;
			if ( G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )
				G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
			--count ;
			--len ;
		}
	}

	#if defined(SA_SEQUENCE_TEST)
	{
		// run sequence test
		wptr = (byte *)I(io_dte_tx_wptr);
		while ( wptr != G(lapm_dte_wptr) )
		{
			sa_tstSequence( *wptr++ );
			if ( wptr >= I(io_dte_tx_eptr) )
				wptr = (byte *) I(io_dte_tx_sptr);
		}
	}
	#endif

	if ( G(S).ModemOptions.Parity && (G(S).ModemOptions.DataBits == 7) )
	{
		// delete the parity bit
		wptr = (byte *) I(io_dte_tx_wptr);
		while ( wptr != G(lapm_dte_wptr) )
		{
			*wptr++ = (byte) (*wptr & 0x7f);
			if ( wptr >= I(io_dte_tx_eptr) )
				wptr = (byte *) I(io_dte_tx_sptr);
		}
	}
	I(io_dte_tx_wptr) = G(lapm_dte_wptr) ;	// save dte transmit buffer pointer

	// if frame completly processed - no bytes left over
	if ( len == 0 )
	{
		ptr->status = EMPTY ;
		ptr->len = 0 ;
		return TRUE;
	}
	else
	{
		ptr->status = IN_PROGRESS ;	// mark frame as in progress
		ptr->rlen = len ;	// save length of bytes left in frame to be read
		return ( FALSE ) ;
	}
}

/****************************************************************
Routine : mnp_get_rx_framep_from_queue
Description :
	Get ptr to next mnp receive frame from queue
Parameters in :
	none
Parameters out :
	receive frame pointer if available
	NULL - otherwise
*****************************************************************/
non_banked MNP_RX_FRAME* mnp_get_rx_framep_from_queue ( void )
{
	byte i, nsOffset ;

	for (	i = 0, G(rxMNPfptr) = &MRQ(0);
			i < NO_OF_MNP_RECEIVE_FRAMES;
			++i, G(rxMNPfptr)++ )
	{
		if ( G(rxMNPfptr) -> status == IN_PROGRESS )
			return ( G(rxMNPfptr) );
	}

	nsOffset = G(mnp_fixed_field_opt_flag) ? 2 : 4;
	for (	i = 0, G(rxMNPfptr) = &MRQ(0);
			i < NO_OF_MNP_RECEIVE_FRAMES;
			++i, G(rxMNPfptr)++ )
	{
		// if new i-frame, check sequence number 
		if ( G(rxMNPfptr) -> status == FULL )
		{
			// if new lt-frame, check sequence number
			if ( G(rxMNPfptr) -> data[ nsOffset ] == G(mnp_vr) )
			{
				#if defined(Z80_DEBUG_THIS_FILE)
				sendHexWord(x_current_time());
				x_debug_msg(": mnp-gffq, seq=");
				sendDecByte(G(mnp_vr)); sendCrLf();
				#endif // Z80_DEBUG_THIS_FILE

				return ( G(rxMNPfptr) );
			}
		}
	}

	// clear all frames that are out of sequence
	if ( G(lapm_rx_lrq_count) )
	for (	i = 0, G(rxMNPfptr) = &MRQ(0);
			i < NO_OF_MNP_RECEIVE_FRAMES;
			++i, G(rxMNPfptr)++ )
	{
		#if defined(Z80_DEBUG_THIS_FILE)
		if ( G(rxMNPfptr) -> status != EMPTY )
		{
			x_debug_msg(" N(S)=");
			sendDecByte(G(rxMNPfptr) -> data[ nsOffset ]);
		}
		#endif
		G(rxMNPfptr) -> status = EMPTY ;
	}

	#if defined(Z80_DEBUG_THIS_FILE)
	x_debug_msg(" ZEROED LRQ was=");
	sendDecByte(G(lapm_rx_lrq_count));
	sendCrLf(); sendCrLf();
	#endif

	G(lapm_rx_lrq_count) = 0;
	return NULL;
}

/****************************************************************
Routine : mnp_put_frame_on_queue
Description :
	Put the mnp receive frame on queue.  (If there is
	no room on the queue, this function will fail.)

	This is nearly a duplicate of lapm_put_frame_on_queue()
	but we know at call time whether we're mnp or lapm
	and things need to be slightly different because of the
	different sizes of the frames.
*****************************************************************/
non_banked void mnp_put_frame_on_queue ( void )
{
	byte i, nsOffset ;
	MNP_RX_FRAME *freep = NULL;
	#if defined(Z80_DEBUG_THIS_FILE)
	byte cnt = 1;	// this audits the number of frames in LRQ
					// and is used as a sanity chk on LRQ macros
					// Throw away when convinced macros o.k.
	#endif

	nsOffset = G(mnp_fixed_field_opt_flag) ? 2 : 4;

	for (	i = 0, G(rxMNPfptr) = &MRQ(0);
			i < NO_OF_MNP_RECEIVE_FRAMES;
			++i, G(rxMNPfptr)++ )
	{
		if ( G(rxMNPfptr) -> status == EMPTY )
		{
			if ( freep == NULL )
			{
				// save location of 1st empty
				freep = G(rxMNPfptr);
			}
		}
		else
		{
			if ( G(rxMNPfptr) -> data[ nsOffset ] == LRF.data[ nsOffset ] )
			{
				#if defined(Z80_DEBUG_THIS_FILE)
				x_debug_msg("mnp - rx frame ALREADY in LRQ=");
				sendDecByte( LRF.data[ nsOffset ] ); sendCrLf();
				#endif
				return ;
			}
			#if defined(Z80_DEBUG_THIS_FILE)
			cnt++;
			#endif
		}
	}

	if ( freep != NULL )
	{
		x_memcpy (	(byte *)freep,
					(byte *)&LRF,
					(word)(LRF.len +
							(sizeof(MNP_RX_FRAME) -
							 (MNP_FRAME_SIZE + 1))) ) ;

		#if defined(Z80_DEBUG_THIS_FILE)
		sendHexWord(x_current_time());
		x_debug_msg(": mnp Q="); sendDecByte(cnt);
		x_debug_msg("; ns="); sendDecByte( LRF.data[ nsOffset ] );
		x_debug_msg(", vr="); sendDecByte(G(mnp_vr));
		if ( LRF.status == FULL )
			x_debug_msg(", new");
		else if ( LRF.status == IN_PROGRESS )
			x_debug_msg(", in prog");
		else 
			x_debug_msg(", ?????");
//		sendCrLf();
		#endif // Z80_DEBUG_THIS_FILE

		INC_LRQ_CNT();
	}
	else x_debug_msg("mnp - LRQ full");
}

/****************************************************************
Routine : mnp_send_pdu_la_frame
Description :
	send remote an RR/RNR
Parameters in :                                                            
	number of credits
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
non_banked void mnp_send_pdu_la_frame ( byte credits )
{
	G(mnp_nk) = credits ;
	mnp_tx_control_frame ( PDU_LA ) ; //la w/ current nr & nk

	G(mnp_seq_recover_flag) = FALSE ;
	mnp_reset_flow_timer () ;
}

/****************************************************************
Routine : mnp_send_RNR
Description :
	send remote an RNR
Parameters in :                                                            
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
non_banked void mnp_send_RNR ( void )
{
	if ( !G(lapm_local_busy) )
	{
		//  send RNR (local busy) to remote
		x_debug_msg ( "mnp - snd RNR");
		mnp_send_pdu_la_frame( 0 ) ;
		G(lapm_local_busy) = TRUE ;
	}
}

/****************************************************************
Routine : mnp_send_RR
Description :
	send remote an RR
Parameters in :                                                            
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
non_banked void mnp_send_RR ( void )
{
	if ( G(lapm_local_busy) && !G(lapm_rx_lrq_count) )
	{
		// if processing done on old frame - we can accept more frames
		x_debug_msg ( "mnp - snd RR");
		mnp_send_pdu_la_frame( G(mnp_rk) ) ;
		G(lapm_local_busy) = FALSE ;
	}
}

/****************************************************************
Routine : mnp_process_lt_frame
Description :
	process incoming lt frames received from the dce
Parameters in :                                                            
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
non_banked void mnp_process_lt_frame ( void )
{
	// check if any old frames to process
	if (G(lapm_rx_lrq_count))
	{
		do {
			G(rxMNPfptr) = mnp_get_rx_framep_from_queue () ;
			if ( G(rxMNPfptr) == NULL)
			{
				//----------------------------------------
				// nxt in sequence frame NOT found
				//----------------------------------------
				return;
			}

			// process frame on queue
			if ( mnp_decode_lt_frame( G(rxMNPfptr) ) != TRUE )
			{
				//----------------------------------------
				// frame not done :
				// Note: LRQ(i).status set to IN_PROGRESS
				//       in mnp_decode_lt_frame()
				//----------------------------------------
				break;
			}

			//----------------------------------------
			// frame now fully processed
			// Note: LRQ(i).status set to EMPTY in
			//       mnp_decode_lt_frame()
			//----------------------------------------
			DEC_LRQ_CNT();

			if ( !G(lapm_rx_lrq_count) ) break ;

		} while ( MNP_DTE_OK_TO_LOOP );

		// if we receive a new frame while working off the Q
		if ( LRF.status == FULL )
		{
			#if 0
			// put new receive frame on queue
			if ( mnp_rx_frame_in_window(
							LRF.data[G(mnp_fixed_field_opt_flag) ? 2 : 4]
							) )
			#endif
			{
				mnp_put_frame_on_queue () ;

				mnp_send_RNR () ;
			}
		}
		return ;
	}

	// process new lapm frame
	if ( LRF.status == FULL )
	{
		if ( mnp_decode_lt_frame ( &LRF ) == FALSE )
		{
			// if new frame not fully processed
			mnp_put_frame_on_queue () ;

			//  send RNR (local busy) to remote
			mnp_send_RNR () ;
		}
	}
	else
	{
		//----------------------------------------
		// If lo water mark crossed - send RR
		//----------------------------------------
		mnp_send_RR();
	}
}
