/*name and version number:@(#)dpvts.c	1.19*/
/*date of get: 		  09/06/00 16:59:06*/
/*date of delta:	  05/16/00 08:53:39*/
/****************************************************************
File :	dpvts.c
Description :
	parsing of the at+vts command


  mah - 4/5/96 - I'm sorry this is so convoluted.  I've
  rewritten this to save ROM for the z80 platforms.

  The processing is very state oriented.

  Things start at the dp_vts() routine.

*****************************************************************/

#include "llglob_d.h"

#ifdef VOICE
#include "dpglob.h"
#include "allglobs.h"

extern byte convert_dtmf_digit(byte *ptr, byte *dtmf_digit);
extern word atoi(byte *str, word *num);

/* Get the next vts atom and update G(dp_vts_ptr).
 *
 * If G(vtsParseMax) is zero then assume that
 * dtmf digits are allowed.
 *
 * Otherwise, numbers are allowed in the range
 * G(vtsParseMin) <= num <= G(vtsParseMax).
 * We'll put the value of the parsed number in
 * G(vts_parsed_number).
 */
VTS_ATOMS
parseVts()
{
	VTS_ATOMS rv;
	
	switch(*G(dp_vts_ptr))
	{
	case 0:
		return ATOM_DONE;

	case '}':
	case '{':
	case ']':
	case '[':
	case ',':
		rv = (VTS_ATOMS)(*G(dp_vts_ptr)++); //msm//
		break;
	default:
		if (0 == G(vtsParseMax))
		{
			/* could be hook-flash */
			if ( *G(dp_vts_ptr) == '!' )
			{
				G(vts_parsed_number) = (word) *G(dp_vts_ptr)++ ;
				rv = ATOM_NUMBER ;
			}
			else /* could be a dtmf tone */
				rv = convert_dtmf_digit(G(dp_vts_ptr)++,
					(byte *) &G(vts_parsed_number)) ?
						 ATOM_NUMBER :
						 ATOM_ILLEGAL;
		}
		else
		{
			byte count = 0;
			G(vts_parsed_number) = 0;
			
			/* hopefully it's a number in the correct range
			 * that's been set up for now.
			 * Convert the ASCII to int.
			 */
			for (;(*G(dp_vts_ptr) >= '0') &&
			     (*G(dp_vts_ptr) <= '9'); count++)
			{
				G(vts_parsed_number) *= 10;
				G(vts_parsed_number) =
					(word) (G(vts_parsed_number) +
							(*G(dp_vts_ptr)++ - '0'));
			}
				
			if (!count ||
			    G(vts_parsed_number) < G(vtsParseMin) ||
			    G(vts_parsed_number) > G(vtsParseMax))
			{
				return ATOM_ILLEGAL;
			}
		
			rv = ATOM_NUMBER;
		}
	}
	
	return rv;
}


/* Expecting a duration or a G(right) brace/G(right) bracket.
 * If we get a duration, it goes in the BeepToneTimer
 * option, which everybody else should use for the duration.
 */
byte
vts_b_dur()
{
	byte p;

	G(vtsParseMax) = 400;
	G(vtsParseMin) = 0;

	switch(parseVts())
	{
	case ATOM_R_BRAK:
	case ATOM_R_BRACE:
		return TRUE;
		
	case ATOM_NUMBER:
		G(S).ModemOptions.BeepToneTimer = G(vts_parsed_number);
		p = (byte) parseVts();
		return (byte) (ATOM_R_BRAK == p || ATOM_R_BRACE == p);

	default:
		x_debug_msg("expecting R_BRAK/R_BRACE or dur, saw neither\n");
		break;
	}

	return FALSE;
}


/* We expect frequency fNum (0 or 1) next.
 * (This is part of the bracket processing.)
 */
byte
vts_expect_freq(byte fNum)
{
	byte p = (byte) parseVts();

	if (ATOM_NUMBER == p)
	{
		G(vtsFreq)[fNum] = G(vts_parsed_number);
		p = (byte) parseVts();
	}
	
	switch(p)
	{
	case ATOM_COMMA:
		return (byte) (fNum ? vts_b_dur() : vts_expect_freq(1));

	case ATOM_R_BRAK:
		return TRUE;
		
	default:
		x_debug_msg("looking for COMMA or R_BRAK saw neither\n");
		break;
	}

	return FALSE;
}


//****************************************************************************
// Routine : vts_brackets
// Description :
//	This routine parses the "at+vts=[...]" command.
//	  MAH       02/17/96		Now supports the following elements:
//                                      [x],[x,y],[x,y,z],[],[,y] and [,,z]
//                                      according to the IS-101 specs.
//***************************************************************************/
byte
vts_brackets()
{
	G(vtsFreq)[0] = G(vtsFreq)[1] = 0;
	G(vtsParseMax) = 3000;
	G(vtsParseMin) = 300;
	
	if (vts_expect_freq(0))
	{
		dp_generate_tones( G(vtsFreq)[0], G(vtsFreq)[1] ) ;
		G(dp_state) = DP_GENERATE_TONES ;
		return TRUE;
	}
	
	return FALSE;
}


//*****************************************************************************
// Routine : vts_braces
// Description :
//	This routine parses the "at+vts={...}" command.
//
// Revision History :
//	Initials	Date		Change
//	MAH		02/17/96	Now supports the following elements:
//					{x},{x,},{x,y},{,y} and {}
//					according to the IS-101 specs.
//****************************************************************************/
byte vts_braces()
{
	byte txchar, rv, p;
	byte tmp_dial_speed ;
        
	txchar = '*';
	rv = 0;
	
	p = (byte) parseVts();

	if (ATOM_R_BRACE == p)
	{
		txchar = 0;	/* special case of silence for default time */
	}
	
	if (ATOM_NUMBER == p)
	{
		txchar = (byte) G(vts_parsed_number);
		p = (byte) parseVts();
	}
	
	if (ATOM_COMMA == p)
	{
		rv = vts_b_dur();
	}
	else
	{
		if (ATOM_R_BRACE == p)
			rv = 1;
	}
	
	if (rv)
	{
		if (txchar){
			if ( G(x_modem_mode) == MODEM_VOICE )
				dp_stop_tad ( ) ;
			 
			tmp_dial_speed = G(S).ModemOptions.DtmfDialSpeed ;
			G(S).ModemOptions.DtmfDialSpeed = (byte) (10*G(S).ModemOptions.BeepToneTimer);
			dp_DTMF_dial_cmd(txchar);
			G(S).ModemOptions.DtmfDialSpeed = tmp_dial_speed ;
		}
	
		G(dp_state) = DP_GENERATE_TONES ;
		return TRUE;
	}
	
	return FALSE;
}

void dp_vts_end(MODEM_COMMAND cmd)
{
	/* if we are offhook, goback to TAD IDLE mode */
	if ( G(x_modem_state) == MS_TAD_FAR )
	{
		dp_start_tad( TAD_IDLE ) ;
		G(dp_state) = DP_VOICE ;
	}
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
	else if ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
	{
		if ( ( dp_read_dsp_ram ( FDSP_CNTRL_ADDR ) & 0x4000 ) == 0 ) // in hdsp
		{
			// turn on the tone detectors
			dp_write_dsp_ram ( 0x85, 0x9205 ) ;     
		}
		else
			dp_write_dsp_ram ( 0x85, 0x1205 ) ;
		if ( dp_local_phone_detect () == FALSE ) // on-hook
			G(dp_state) = DP_SPEAKER_PHONE_HDX ; 
		else
			G(dp_state) = DP_SPEAKER_PHONE_WAIT ; 
	}
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
	else
		G(dp_state) = DP_IDLE ;

	x_send_mail(cmd, AT_TASK, 0, 0);
}
/****************************************************************
Routine : dp_vts
Description : Process the VTS tone generation command 
the variable rate playback.

Precondition:
  G(dp_vts_ptr) starts with the character after the =
  for the at+vts= command.
*****************************************************************/
void dp_vts ( void )
{
	byte p;
	byte tmp_dial_speed ;
	
	x_debug_msg("dp_vts()\n");
	G(vtsParseMax) = 0;	/* this causes parseVts()
						 * to look for dtmf 'numbers'
						 * rather than integers
						 */
	p = (byte) parseVts();

	G(dp_count) = FALSE ;
	
	switch(p)
	{
	case ATOM_DONE:
		dp_vts_end(AT_OK); /* end of command, send OK to DTE */
		break;

	case ATOM_COMMA:
		dp_vts () ;
		break;

	case ATOM_L_BRAK:
		if (!vts_brackets())
		{
			x_debug_msg("vts_brackets fails\n");
			goto failure;
		}
		break;

	case ATOM_L_BRACE:
		if (!vts_braces())
		{
			x_debug_msg("vts_braces fails\n");
			goto failure;
		}
		break;

	case ATOM_NUMBER:
		if ( G(x_modem_mode) == MODEM_VOICE )
			dp_stop_tad ( ) ;
			
		if ( (byte) G(vts_parsed_number) == '!' )
		{
			G(dp_count) = TRUE ;
			dp_spkpn_onhook () ;
		}
		else
		{
			tmp_dial_speed = G(S).ModemOptions.DtmfDialSpeed ;
			G(S).ModemOptions.DtmfDialSpeed = (byte) (10*G(S).ModemOptions.BeepToneTimer);
			dp_DTMF_dial_cmd((byte) G(vts_parsed_number));
			G(S).ModemOptions.DtmfDialSpeed = tmp_dial_speed ;
		}
		G(dp_state) = DP_GENERATE_TONES ;
		break;

	default:
		goto failure;
	}
	return;
			
 failure:
	dp_vts_end(AT_ERROR);
}
#endif // VOICE
