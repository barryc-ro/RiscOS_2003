/*name and version number:@(#)lapm_dte.c	1.140*/
/*date of get: 		  01/10/01 16:57:59*/
/*date of delta:	  12/19/00 10:06:22*/
/****************************************************************
File :	lapm_dte.c
Description :
	Contains all routines in LAPM to transfer data to or from the DTE.

Procedures Contained :
	lapm_build_iframe
	lapm_decode_iframe
	lapm_get_rx_framep_from_queue
	lapm_process_iframe

Revision History :
	Initials	Date		Change
	VR     		02/11/93	Initial
*****************************************************************/

//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "atglob.h"
#include "ioglob_d.h"
#include "lapm.h"
//msm// #include "z80glob.h"
#include "v42bis.h"
#include "iouart_d.h"
#ifdef CS_DEBUG
# include "lapm_dte.h"
#endif
#include "allglobs.h"

#if defined(MODEM_ARM)
# define Z80_DEBUG_THIS_FILE
#elif defined(CS_LAPM_DEBUG)
# define x_debug_msg(x) (ddputs_24l(x))
#endif

//==============================================================
//		LRQ tickers
//==============================================================
# define INC_LRQ_CNT(d)								\
  do {												\
	if ( ++G(lapm_rx_lrq_count) > (G(lapm_k)+1) ) {	\
		G(lapm_rx_lrq_count) = G(lapm_k)+1;			\
		sendHexByte(d);								\
		x_debug_msg(": LRQ OVFLO");					\
	}												\
  } while (0)

# define DEC_LRQ_CNT()							\
  do {											\
	if ( !G(lapm_rx_lrq_count) ) {				\
		x_debug_msg("LRQ UNFLO");				\
	} else {									\
		 -- G(lapm_rx_lrq_count);				\
		if ( !G(lapm_rx_lrq_count) ) 			\
			x_debug_msg("LRQ Zero");			\
	}											\
  } while (0)

# define INC_SREJ_CNT()								\
  do {												\
	if (++G(lapm_rx_srej_count) > (G(lapm_k)+1)) {	\
		G(lapm_rx_srej_count) = G(lapm_k)+1;		\
		x_debug_msg("SREJ OVFLO");					\
	}												\
  } while (0)

# define DEC_SREJ_CNT()							\
  do {											\
	if ( !G(lapm_rx_srej_count) ) {				\
		x_debug_msg("SREJ UNDFLO");				\
	} else {									\
		-- G(lapm_rx_srej_count);				\
		if ( !G(lapm_rx_srej_count) ) 			\
			x_debug_msg("SREJ Zero");			\
	}											\
  } while (0)


/****************************************************************
Routine : lapm_next_tx_wframe
Description :
	Get next lapm transmit frame to write data to.
Parameters in :
	none
Parameters out :
	pointer to next lapm transmit frame to write data to if available.
	NULL if no frames available.
*****************************************************************/
_Inline
non_banked LAPM_FRAME* lapm_next_tx_wframe ( void )
{
	byte i ;

	LTFP = G(lapm_prev_empty_ltfp);
	for ( i=0; i<G(lapm_k); ++i )
	{
		if ( ++LTFP >= G(lapm_last_ltfp) ) {
			LTFP =  &LTF[0];
		}
		if ( LTFP->txstatus == EMPTY )
		{
			LTFP->len = 0;
			LTFP->data[0] = G(x_modem_originate) ? 0x03 : 0x01;

			// insert the dlci value..
			LTFP->data[0] |= (LAPM_DATA_DLCI() <<2);

			// insert V(S) - the next expected sequence number
			LTFP->data[1] = G(lapm_vs) << 1 ;
			G(lapm_vs) = ( G(lapm_vs) + 1 ) & 127 ;
			G(lapm_prev_empty_ltfp) = LTFP;
			return ( LTFP );
		}
	}
	return ( NULL ) ;
}

/****************************************************************
Routine : lapm_build_iframe
Description :
	build i-frames to transmit to the dce
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void lapm_build_iframe ( void )
{
	/* check if a frame is currenty being built */
	if ( LTFP == NULL )
	{
		/* get next frame pointer to build i-frame */
		LTFP = lapm_next_tx_wframe () ;
		/* return if no buffers available */
		if ( LTFP == NULL )
			return ;
		G(lapm_data_ptr) = &(LTFP->data[3]) ;
	}

	/* copy data from dte receive buffer to lapm frame */
#if defined(V44)
	if ( G(v44_P0) & ENCODER )		/* if V.44 enabled */
	{
		if ( !IS_DTE_RX_EMPTY() )
		{
			// Set flag to trigger a flush next time around,
			// in case we fill the LAPM frame this time.
			G(lapm_rx_dte_char) = TRUE ;

			// Empty DTE RX buffer or fill LAPM frame.
			// whichever comes first.
			v44_encode () ;
		}
		else if ( G(lapm_rx_dte_char) == TRUE )
		{

			v44_encode_flush () ;
			G(lapm_rx_dte_char) = FALSE ;
		}
	}
	else
#endif // V44
	if ( G(v42bis_P0) & ENCODER )		/* if v42 bis enabled */
	{
		if ( !IS_DTE_RX_EMPTY() )
		{
			// Set flag to trigger a flush next time around,
			// in case we fill the LAPM frame this time.
			G(lapm_rx_dte_char) = TRUE ;

			// Empty DTE RX buffer or fill LAPM frame.
			// whichever comes first.

#ifdef V42BIS_RAM_CODE
			// If routine has been moved to RAM then go through
			// a call-table located in the ROOT segment.
			// Unfortunately the IAR Compiler does not support a
			// pointer to a non_banked function.
			v42bis_encodep () ;
#else
			v42bis_encode () ;
#endif
		}
		else if ( G(lapm_rx_dte_char) == TRUE )
		{

			v42bis_flush () ;
			G(lapm_rx_dte_char) = FALSE ;
		}
	}
	else					/* if v42 bis disabled */
	{
#if defined(CS_4)
		byte maxLen = MAX_QMP_DATA_BYTES < G(lapm_n401)
					? (MAX_QMP_DATA_BYTES - 3)
					: G(lapm_n401) ;
#else
		byte maxLen = G(lapm_n401);
#endif
		if ( (G(S).ModemOptions.Parity) && (G(S).ModemOptions.DataBits == 7) )
		{
			while ( (LTFP->len < maxLen) && !IS_DTE_RX_EMPTY() )
			{
				/* read data from dte receive queue */
				*G(lapm_data_ptr)++ = x_parity ( *I(io_dte_rx_rptr)++ ) ;
				LTFP->len ++ ;
				DTE_RX_UPDATE() ;
			}
		}
		else
		{
			while ( (LTFP->len < maxLen) && !IS_DTE_RX_EMPTY() )
			{
				/* read data from dte receive queue */
				*G(lapm_data_ptr)++ = *I(io_dte_rx_rptr)++ ;
				LTFP->len ++ ;
				DTE_RX_UPDATE() ;
			}
		}
	}

	// Check for empty iframes.  This change was made since when
	// we send empty iframes to some (USR) modems they choke.
	if ( LTFP->len )
	{
		LTFP->txstatus = FULL ;
		LTFP->len += 3 ;
		LTFP = NULL ;

		TX_LAPM_FRAMES++;
	}
	else if ( G(io_uart_status) & UART_DTE_BREAK_ON )
	{
		/* if no data - check for break signal set by dte */

		lapm_send_break(TRUE);	/* set command/response param to true */
		UART_stop_break () ;
	}
}

/****************************************************************
Routine : lapm_get_srej_frame_from_queue
Description :
	If SREJ has been sent for frame vr, return the
	corresponding frame on the receive queue.
Parameters in :
	vr - V(R)
Parameters out :
	receive frame pointer if available
	NULL - otherwise
*****************************************************************/
non_banked LAPM_RX_FRAME* lapm_get_srej_frame_from_queue(byte vr)
{
	byte i;
	LAPM_RX_FRAME *fptr;

	for (i=0, fptr=&LRQ(0) ; i < NO_OF_LAPM_RECEIVE_FRAMES; ++i, fptr++ )
	{
		if ( (fptr->len == SREJ_LEN) &&
			 (fptr->rxstatus == FULL) &&
			 ((byte)(fptr->data[1] >> 1) == vr) )
		{
			return fptr;
		}
	}

	return NULL;
}

/****************************************************************
Routine : lapm_rx_frame_in_window
Description :
	Verifys that the current received frame (in LRF) is within
	the negotiated window (lapm_k), and returns the delta
	between this frame and the last one received (using input
	parameter last_ns to represent the last one received).
Parameters in :
	last_ns:  N(S) of last in-sequence frame that has arrived.
	LRF:	  Contains current frame (global)

Parameters out :
	the gap between the current received frame (in LRF) and
	  the last received frame (input param last_ns), or
	128 if not in range.
*****************************************************************/
non_banked byte lapm_rx_frame_in_window ( byte last_ns )
{
	byte outstanding, cur_ns;

	cur_ns = LRF.data[1] >> 1;

	outstanding = (cur_ns < last_ns ? 128 : 0) + cur_ns - last_ns;

	return  outstanding <= G(lapm_k) ? outstanding : 128;
}

/****************************************************************
Routine : lapm_empty_rx_queue
Description :
	Erase the LRQ Array
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void lapm_empty_rx_queue ( void )
{
	byte i ;
	LAPM_RX_FRAME* fptr ;

	for (i=0, fptr=&LRQ(0) ; i < NO_OF_LAPM_RECEIVE_FRAMES; ++i, fptr++ )
	{
		#if defined(xxxxMODEM_ARM) && defined(DEBUG_PRINTF)	// for debug
		if ( fptr -> rxstatus != EMPTY )
			printf("Found Frm on Q, Len=%d; N(S)=%d; N(R)=%d, V(R)=%d\n",
				fptr->len, fptr->data[1]>>1, fptr->data[2]>>1, G(lapm_vr));
		#endif //MODEM_ARM
		fptr -> rxstatus = EMPTY;
	}

	#if defined(Z80_DEBUG_THIS_FILE) || defined(MODEM_ARM)
	x_debug_msg("ZEROED LRQ was=");
	dp_puts_dec((word)G(lapm_rx_lrq_count)); sendCrLf(); sendCrLf();
	#endif

	G(lapm_rx_lrq_count) = 0;
	G(lapm_rx_srej_count) = 0;
	G(lapm_local_busy) = FALSE ;
}

/****************************************************************
Routine : lapm_send_reject
Description :
	Frame too far ahead, or Selective Reject not negotiated
	- toss it and send reject frame.
*****************************************************************/
non_banked void lapm_send_reject ( void )
{
	if ( G(lapm_local_busy) )
	{
		lapm_send_control_frame(RNR, FALSE, FALSE);
	}
	else if ( !G(lapm_reject_sent) )
	{
		// Send regular reject for this frame
		lapm_send_control_frame(REJ, FALSE, FALSE);
		G(lapm_reject_sent) = TRUE ;
	}

	//-----------------------------------------
	// flush the receive Q
	//-----------------------------------------
	lapm_empty_rx_queue();

	G(lapm_rcv_timer) = x_current_time();
}

/****************************************************************
Routine : lapm_send_srejs
Description :
	For the case of Selective reject, place out of sequence frame
	in the Q (LRF buffer pool) and fill the gap(s) with SREJ
	placeholder(s), sending SREJ supervisory frame(s) for (each)
	missing I Frame.
Parameters in :

	last_ns:	 N(S) of last in-sequence frame that has arrived.
	outstanding: Number of frames missing between current and last
	LRF:		 Current frame (global)

Parameters out :
	None
*****************************************************************/
non_banked void lapm_send_srejs ( byte last_ns, byte outstanding )
{
	byte tmp_vr;

	#if defined(Z80_DEBUG_THIS_FILE)
	# if defined(DEBUG_PRINTF)
		printf("lapm-rx seq er, vr=%d; rcv=%d\n",
				last_ns, LRF.data[1] >> 1);
	# else
		x_debug_msg("lapm-rx seq er, vr="); sendDecByte(last_ns);
		x_debug_msg(" rcv="); sendDecByte(LRF.data[1] >> 1); sendCrLf();
	# endif
	#endif

	#if defined(CS_MODEM) || defined(COPERNICUS)
	if( G(cs_rmp_level2_debug_on) )
			// cb+ 05-22-00
		cs_insert_error_tag( (0x7a00|last_ns), 0 ) ;
			// cb- 05-22-00
	#endif

	// Start the timeout clock
	if ( !G(lapm_rx_lrq_count) )
	{
		G(lapm_rcv_timer) = x_current_time();
	}

	//----------------------------------------------------
	// We're doing selective reject.  Add entries to the
	// receive Q for the frames not yet received
	// (if the entries aren't already there).
	// We'll mark them as not having been received yet,
	// which implies that we've sent an SREJ for them.
	//----------------------------------------------------
	if (lapm_put_frame_on_queue())
	{
		INC_LRQ_CNT(1);
	}

	// we'll use G(lapm_vr) to count through the
	// sequence numbers of the frames that need to be
	// resent, save it here.
	tmp_vr = G(lapm_vr);
	G(lapm_vr) = last_ns;

	LRF.len = SREJ_LEN;	// indicate SREJ
	while (outstanding--)
	{
		// Send SREJ and add to queue if we
		// haven't already done so.
		if (NULL == lapm_get_srej_frame_from_queue( G(lapm_vr) ))
		{
			LRF.data[1] = (byte)(G(lapm_vr) << 1);

			(void)lapm_put_frame_on_queue();

			INC_SREJ_CNT();

			// send the selective reject.
			// lapm_send_control_frame() uses
			// G(lapm_vr) to fill in N(R)
			lapm_send_control_frame(SREJ, FALSE, FALSE);
		}
		#if defined(DEBUG_PRINTF)
		else
		{
			printf("SREJ ALREADY ON Q; N(S) = %d\n", G(lapm_vr));
		}
		#endif // DEBUG_PRINTF

		G(lapm_vr) = (G(lapm_vr) + 1) & 127;
	}
	// restore V(R)
	G(lapm_vr) = tmp_vr;
}

/****************************************************************
Routine : lapm_decode_iframe
Description :
	decode i-frames received from the dce
Parameters in :
	ptr - receive frame to be decoded.

	We assume that if ptr is pointing to a frame on the receive
	queue it will be the correct sequence number.  If ptr is
	pointing to lapm_receive_frame it could be out of
	order and an incorrect sequence number will be dealt with
	appropriately.

Parameters out :
	TRUE - if frame completed
	FALSE - if bytes are left over to be saved
*****************************************************************/
non_banked byte lapm_decode_iframe ( LAPM_RX_FRAME *ptr )
{
	word count ;
	byte *wptr, *rptr, gap;
	word len;

	// process new lapm frame
	if ( ptr->rxstatus == FULL )
	{
		RX_LAPM_FRAMES++;

		// If new I frame is next one expected,
		// work it, otherwise send REJ/SREJ(s) to remote.
		if ( (byte) (ptr->data[1] >> 1) == G(lapm_vr) )
		{
			// increment V(R) ack state variable
			// (next in-sequence I frame expected).
			G(lapm_vr) = (G(lapm_vr) + 1) & 127 ;
			G(lapm_rx_iframe) = TRUE ;	// acknowledge if needed in _bg
			G(lapm_reject_sent) = FALSE ;
			rptr = &ptr->data[3] ;	// point to i-frame data field
			len = ptr->len - 3 ;	// get only information field length
		}
		else
		{
			// At this point we know that ptr == &lapm_receive_frame
			// since we can't have gotten the wrong sequence number
			// from the queue.  We're taking advantage of that so that
			// the Z80 code can be faster and smaller.

			//--------------------------------------------------
			// If the received I Frame is within the window
			//  and Selective Reject is negotiated :
			//		Place the frame on the Q and put
			//		"SREJ Placeholders" in between.
			//	Else
			//		Send a REJ supervisory frame.
			//--------------------------------------------------
			if ( G(lapm_srej_negotiated) )
			{
				gap = lapm_rx_frame_in_window( G(lapm_vr) );
				if ( gap < 4 )
				{
					G(lapm_pseudo_vr) = LRF.data[1] >> 1;
					lapm_send_srejs( G(lapm_vr), gap );
				}
				else
				{
					#if defined(DEBUG_PRINTF)
					printf("RX Seq. Err 1; gap=%d; vr=%d; ns=%d\n",
							gap, G(lapm_vr), LRF.data[1] >> 1);
					#endif // DEBUG_PRINTF

					if ( gap != 128 ) lapm_send_reject();
				}
			}
			else
			{
				#if defined(DEBUG_PRINTF)
				printf("RX Seq. Err 2; vr=%d; ns=%d\n",
						G(lapm_vr), LRF.data[1] >> 1);
				#endif // DEBUG_PRINTF
				lapm_send_reject();
			}

			RX_LAPM_ERRORS++;

			// clean out this frame, (throw it away)
			LRF.status = EMPTY;
			LRF.len = 0;
			return TRUE;
		}
	}
	else 	//	frame in progress
	{
		// point to the previous data field
		rptr = &ptr->data [ptr->len - ptr->rlen] ;
		len = ptr->rlen ;    	// get length of bytes left over
	}

	// get the count of bytes available to transmit to the dte
	count = io_get_dte_tx_count () ;

	G(lapm_dte_wptr) = (byte *) I(io_dte_tx_wptr) ;	// dte transmit buffer

	// copy data from lapm frame to dte transmit buffer

#if defined(V44)
	if ( G(v44_P0) & DECODER ) {
		len = v44_decode ( rptr, count, (byte) len );
	}
	else
#endif // V44
	if ( G(v42bis_P0) & DECODER )		// if v42bis is enabled
	{
#ifdef V42BIS_RAM_CODE
		// If routine is in RAM then go through a call-table
		len = v42bis_decodep ( rptr, count, (byte)len ) ;
#else
		len = v42bis_decode ( rptr, count, (byte)len ) ;
#endif
	}
	else
	{
		while ( ( count > 0 ) && ( len ) )
		{
			*G(lapm_dte_wptr)++ = *rptr++ ;
			if ( G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )
				G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
			--count ;
			--len ;
		}
	}

	#if defined(SA_SEQUENCE_TEST)
	{
		// run sequence test
		wptr = (byte *)I(io_dte_tx_wptr);
		while ( wptr != G(lapm_dte_wptr) )
		{
			sa_tstSequence( *wptr++ );
			if ( wptr >= I(io_dte_tx_eptr) )
				wptr = (byte *) I(io_dte_tx_sptr);
		}
	}
	#endif

	if ( ( G(S).ModemOptions.Parity ) && ( G(S).ModemOptions.DataBits == 7 ) )
	{
		// delete the parity bit
		wptr = (byte *) I(io_dte_tx_wptr);
		while ( wptr != G(lapm_dte_wptr) )
		{
//msm:begin//
//			*wptr++ = ( *wptr & 0x7f ) ;
			*wptr = ( *wptr & 0x7f ) ;
			wptr++;
//msm:end//
			if ( wptr >= I(io_dte_tx_eptr) )
				wptr = (byte *) I(io_dte_tx_sptr);
		}
	}

	I(io_dte_tx_wptr) = G(lapm_dte_wptr) ;	// save dte transmit buffer pointer

	// if frame completly processed - no bytes left over
	if ( len == 0 )
	{
		ptr->rxstatus = EMPTY ;
		ptr->len = 0 ;
		return TRUE;
	}
	else
	{
		ptr->rxstatus = IN_PROGRESS ;	// mark frame as in progress
		ptr->rlen = len ;	// save length of bytes left in frame to be read
		return FALSE;
	}
}

/****************************************************************
Routine : lapm_get_rx_framep_from_queue
Description :
	Get a lapm receive frame from queue
Parameters in :
	none
Parameters out :
	receive frame pointer if available
	NULL - otherwise
*****************************************************************/
_Inline
non_banked LAPM_RX_FRAME* lapm_get_rx_framep_from_queue ( void )
{
	byte i ;
	LAPM_RX_FRAME* fptr ;

	// First try for partially processed frame.
	for (i=0, fptr=&LRQ(0) ; i < NO_OF_LAPM_RECEIVE_FRAMES; ++i, fptr++ )
	{
		if ( fptr -> rxstatus == IN_PROGRESS )
			return fptr;
	}

	// Next look for next frame in sequence.
	for (i=0, fptr=&LRQ(0) ; i < NO_OF_LAPM_RECEIVE_FRAMES; ++i, fptr++ )
	{
		// if new i-frame, check sequence number 
		if ((fptr -> rxstatus == FULL) &&
			( (byte) (fptr -> data[1] >> 1) == G(lapm_vr)))
		{
			if (SREJ_LEN == fptr -> len)
				return NULL;	// don't give back SREJ placeholder

			#if defined(Z80_DEBUG_THIS_FILE)
			x_debug_msg("lapm-gffq, seq=");
			dp_puts_dec((word) G(lapm_vr));
			sendCrLf();
			#endif // Z80_DEBUG_THIS_FILE
				// cb+ 05-22-00
			cs_insert_error_tag(0x7b00,0);
				// cb- 05-22-00

			return fptr;
		}
	}

	// Since there are no more frames in sequence,
	// everything else must be bad.
	lapm_empty_rx_queue();

	return NULL;
}

/****************************************************************
Routine : lapm_isnew_iframe
Description :
	Check LRF for presence of new I Frame
Parameters in :
	none
Parameters out :
	TRUE - if frame present in LRF
*****************************************************************/
_Inline
non_banked BOOL lapm_isnew_iframe ( void )
{
	return ((LRF.status == FULL)
			&& ((LRF.data[0] >> 2) == LAPM_DATA_DLCI())
				&& ((LRF.data[1] & 0x1) == 0))
			? TRUE
			: FALSE;
}

/****************************************************************
Routine : lapm_process_iframe
Description :
	process i-frames received from the dce
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void lapm_process_iframe ( void )
{
	LAPM_RX_FRAME *ptr ;

	// check if any old frames to process
	if (G(lapm_rx_lrq_count))
	{
		do {
			ptr = lapm_get_rx_framep_from_queue();
			if (ptr == NULL)
			{
				//----------------------------------------
				// found SREJ placeholder - wait for new
				// frames received to fill in this cell.
				//----------------------------------------
				break;
			}

			// process frame on Q (not SREJ placeholder)
			if ( lapm_decode_iframe(ptr) != TRUE )
			{
				//----------------------------------------
				// frame not done :
				// Note: LRQ(i).rxstatus set to IN_PROGRESS
				//		 in lapm_decode_iframe()
				//----------------------------------------
				break;
			}

			//----------------------------------------
			// frame now fully processed
			// Note: LRQ(i).rxstatus set to EMPTY in
			//       lapm_decode_iframe()
			//----------------------------------------
			DEC_LRQ_CNT();

			if ( !G(lapm_rx_lrq_count) ) return;

			ptr = NULL ;

		} while ( LAPM_DTE_OK_TO_LOOP );

		// if we received a new i-frame
		if (lapm_isnew_iframe())
		{
			// if this new frame is not in the window toss it
			if ( lapm_rx_frame_in_window( G(lapm_vr) ) == 128 )
			{
				#if defined(DEBUG_PRINTF)
				printf("Frame NOT in Window; ns=%d; nr=%d; vr=%d\n",
						LRF.data[1] >> 1,
						LRF.data[2] >> 1, G(lapm_vr));
				#endif // DEBUG_PRINTF

				LRF.status = EMPTY;
				LRF.len = 0;
				return;
			}

			// if this new frame matches a selective reject frame
			// (a frame that we asked to be resent) then put it on
			// the receive queue in the right place.
			if ( G(lapm_rx_srej_count) )
			{
				ptr = lapm_get_srej_frame_from_queue( (byte) (LRF.data[1] >> 1));
				if (NULL != ptr)
				{
					#if defined(Z80_DEBUG_THIS_FILE)
					x_debug_msg("got SREJ'ed ifrm seq=");
					dp_puts_dec((word)(LRF.data[1] >> 1)); sendCrLf();
					#endif
					INC_LRQ_CNT(2);
					DEC_SREJ_CNT();

					x_memcpy (	(byte *)ptr,
								(byte *)&LRF,
								(word)(LRF.len +
									   (sizeof(LAPM_RX_FRAME) -
										(LAPM_FRAME_SIZE + 1))) ) ;
					LRF.status = EMPTY;
					LRF.len = 0;
					return;
				}
				else
				{
					byte this_ns = LRF.data[1] >> 1;

					// Test for frame out of sequence
					G(lapm_pseudo_vr) = (G(lapm_pseudo_vr) + 1) & 127;
					if ( !(this_ns == G(lapm_pseudo_vr)) )
					{
						byte gap;

						gap = lapm_rx_frame_in_window( G(lapm_pseudo_vr) );
						if ( gap < 4 )
						{
							lapm_send_srejs( G(lapm_pseudo_vr), gap );
							G(lapm_pseudo_vr) = this_ns;
						}
						else
						{
							#if defined(DEBUG_PRINTF)
							printf("RX Seq. Err 3; gap=%d; vr=%d; ns=%d\n",
										gap, G(lapm_pseudo_vr), this_ns);
							#endif // DEBUG_PRINTF

							// Send Reject and clean out this frame
							lapm_send_reject();
						}
						RX_LAPM_ERRORS++;

						LRF.status = EMPTY;
						LRF.len = 0;
						return;
					}
				}
			}

			//--------------------------------------------------------
			//	Put new lapm receive frame on queue.
			//--------------------------------------------------------
			if (lapm_put_frame_on_queue())
			{
				INC_LRQ_CNT(3);

				if (G(lapm_rx_lrq_count) > G(lapm_k))
				{
					//----------------------------------------------
					// Send RNR (Receive Not Ready - local busy)
					// to remote We should never go into a not busy
					// state if we're waiting for a frame to be
					// retransmitted because of selective reject.
					//----------------------------------------------
					G(lapm_local_busy) = TRUE ;
					lapm_send_control_frame ( RNR, FALSE, FALSE ) ;
				}
			}
			else
			{
				LRF.status = EMPTY;
				LRF.len = 0;
			}
		}
		else if ( G(lapm_rx_srej_count) )
		{
			if ( x_elapsed_time( G(lapm_rcv_timer) ) >= SECOND1 )
			{
				//-----------------------------------------
				// If Reception of SREJ taking too long,
				// Send REJ - addresses USR BUG!!!
				//-----------------------------------------
				x_debug_msg("SREJ Timeout: Send REJ!!!");
				lapm_send_reject();
			}
			else if (0x7f == (x_elapsed_time( G(lapm_rcv_timer) ) & 0x7f))
			{
				//--------------------------------------
				// send another SREJ every 128 msec
				//--------------------------------------
				x_debug_msg("SREJ timeout-resend");
				lapm_send_control_frame(SREJ, FALSE, FALSE);

				if ( G(lapm_local_busy) )
					lapm_send_control_frame(RNR, FALSE, FALSE);
			}
		}
		else if ( G(lapm_reject_sent) )
		{
			if (0xff == (x_elapsed_time( G(lapm_rcv_timer) ) & 0xff))
			{
				//--------------------------------------
				// send another REJ every 256 msec
				//--------------------------------------
				x_debug_msg("REJ timeout-resend");
				lapm_send_control_frame(REJ, FALSE, FALSE);

				if ( G(lapm_local_busy) )
					lapm_send_control_frame(RNR, FALSE, FALSE);
			}
		}
		return ;
	}

	// process new lapm i-frame
	if (lapm_isnew_iframe())
	{
		if( !lapm_decode_iframe( /* (LAPM_RX_FRAME *) */(void *)&LRF ) )
		{
			//--------------------------------------------
			// frame NOT fully processed - save on queue
			// Note: LRQ(i).rxstatus set to IN_PROGRESS
			//		 in lapm_decode_iframe()
			//--------------------------------------------
			if( lapm_put_frame_on_queue() )
			{
				INC_LRQ_CNT(4);
			}
			#if defined(MODEM_ARM) && defined(DEBUG_PRINTF)
			else
			{
				PM_PRINTING_ON(1);
				printf("lapm - THIS FRAME MUST FIT on LRQ!!!\n");
				PM_PRINTING_OFF();
			}
			#endif

			LRF.status = EMPTY;
			LRF.len = 0;
		}
	}
	else if ( G(lapm_local_busy) && (G(lapm_rx_lrq_count) <= (G(lapm_k)-1)) )
	{
		// if processing done on old frame - we can accept more frames
		x_debug_msg("lapm - local not busy sent RR");
		lapm_send_control_frame(RR, TRUE, FALSE);
		G(lapm_local_busy) = FALSE ;
	}
}
