/*name and version number:@(#)vp_slice.c	1.64*/
/*date of get: 		  01/10/01 16:57:56*/
/*date of delta:	  01/10/01 10:41:39*/
/*----------------------------------------------------------------------------
 *	FILE: vp_slicer.c
 *  FUNCTION: The program works on the client site of an VPCM modem.  It down 
 *            loads the CP Header, CP constellation bit maps and the slicer 
 *            tables from the host to given DSP RAM locations.
 *
 *  AUTHORS:  J. Xi and Jerry Wang  
 *
 *  History:  2/23/1998
 *  
 *  USAGE:   The DSP board address on Host was inputed as the argument in 
 *           the command line.
 *==========================================================================
 * This program performs:
 * 1. Get all the above DSP address by reading the parameter file;
 * 2. Reset the YellowStone board;
 * 3. Wait for the DSP State flag to reach the point PcmaSlicer_tbl.
 * 4. Read the following parameters from the DSP RAM:
 *	  int aLaw,		//  0=u-law, 1=a-law
 *	  int digLoss,	//  digital loss type, {0-4}={0dB,3dB,6dB,3dBP,2dB}
 *	  int *rbs,		//  RBS_pattern[6]: 0=RBS0, 1=RBSA, 2=RBSB
 *	  int mse,		//  measured mse
 *	  int maxRate,	//  maximal data rate
 *	  double maxPow, //  power limitation in L*L
 *	  int powComp,	//  1=power compemsated, 0=uncompensated
 * 5. Calculate the constellation bit maps and slicer tables based on the
 *    above informatin.
 * 6. Initialize the CP/CPt Header and download to the DSP ram
 * 8. Download the resulting CP bit maps to DSP RAM.
 * 9. Download the resulting slicer tables to the DSP RAM.
 * 
 -----------------------------------------------------------------------*/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#if defined(VPCM_CLIENT)
#include "Vpcmcnst.h"
#include "ioglob_d.h"
#include "z80flash.h"
#include "allglobs.h"

#if defined(MODEM_Z80)
sfr ramlbr_port=0xe7;
#endif

//==============================================================
                      
word k56_timer1;
word *levelMse;	// array of 128 words  JERRY CHANGE 8/17/98
word *lrnTbli, *tbl;
#if !defined(MODEM_Z80)
word lrnTblGlob[896];
word levelMseArray[128];
word lrnTbliGlob[769];
word tblGlob[588];
CPCPT_PARA_VALUE	cptcp;
#else
 #if !defined(V42BIS_RAM_CODE)
	word lrnTblGlob[896];
 #endif
#endif // MODEM_Z80

byte vp_rxAlaw;	// saved over rate reneg's
extern word io_dce_tx_buff[];
extern non_banked word dp_getRAMwd( byte, byte * ) ;
extern int initV42RamCode();
byte vp_slice();
extern void vp_setUpstreamSpeedMask(void);

extern byte vpcm_count_1ff9 ;
void vpcm_retrain_or_fallback(void);

// VP_STATE are the different states for
// the level learning state machine.  They
// represent the different steps of the
// V.90 training that deal with level learning.
// See the different cases in the vp_slice()
// function.
typedef enum {
	VP_STATE_NULL,		// no memory allocated, needs initializing.
	VP_WAIT_FOR_END_OF_2LEVELS,
	VP_WAIT_FOR_DIL,	// waiting for first part of DIL.
	VP_WAIT_FOR_CPt,	// CPt parameters

	VP_WAIT_FOR_CP,		// CP parameters
	VP_FAST_RETRAIN,
	VP_WAIT_FOR_EQ		// Waiting for 8 level equalization to
						// flatten so we can make an accurate
						// estimate of mse and thereby accurately
						// autorate.
} VP_STATE;

VP_STATE vp_state;

// ----------------------------------------
// Used below in vp_digital_loss()
//
// This table is used here and we're assuming
// 16-bit addresses for now.  This is the most
// significant 8 bits of the powRatio word for
// each dB loss from 0 to 6.  This table
// gives the value for the 1/2 dB points, and
// we use these for the thresholds between the
// different digital losses.
const byte vp_dig_loss_tbl[] = {
	0x22,		// 0.5 dB - 0x21E5
	0x26,		// 1.5 dB - 0x2608
	0x2B,		// 2.5 dB - 0x2AAC
	0x30,		// 3.5 dB - 0x2FE1
	0x36,		// 4.5 dB - 0x35B8
	0x3C		// 5.5 dB - 0x3C46
};
// ----------------------------------------

/****************************************************************
Routine : vp_digital_loss()

	Return the approximate digital loss of the
	v.90 connection in dB. (formula is

	dB = 20 log   ratio.  where ratio = powRatio/0x2000.
		       10

	We assume that powRatio has already been written
	to its place in cpheader+2.
*****************************************************************/
word vp_digital_loss(void)
{
	byte i, powRatio = (byte) (rram(DP_ADD_HEADER + 2) >> 8);

	for (i=0; i<6; i++)
	{
		if (powRatio < vp_dig_loss_tbl[i])
			break;
	}

	return i;
}

/****************************************************************
Routine : vp_free_mem

	Reinitialize memory after we're all done.
	Do nothing if we're not currently using the
	memory for slicer table calculations.
*****************************************************************/
void vp_free_mem( void )
{
	if (VP_STATE_NULL == vp_state)
		return;

	x_debug_msg("vp_free_mem");
	io_init_dce_tx_fifo();
	io_init_dce_rx_fifo();

#if defined(V44)
	if ( G(v44_P0) ) {
		v44_init_ram_code();	// Recopy V.44 code to RAM
	}
#endif
#if defined(V44) && defined(V42BIS_RAM_CODE)
	else	// yuck!!
#endif
#if defined(V42BIS_RAM_CODE)
	if ( G(v42bis_P0) ) {
		initV42RamCode();			// Recopy V.42bis code to RAM
	}
#endif

	// reenable dual-port data interrupts from the data pump
	dp_bamil_rd7 &= ~BIT2;
	dp_regwrite(0xd7, dp_bamil_rd7);

	// Let IO task know it can use all of memory again
	x_send_mail(DP_IO_RETRAIN_OVER, IO_TASK, NULL, 0);
	vp_state = VP_STATE_NULL;
}

#if defined(MODEM_Z80)
/****************************************************************
Routine : rram2(word adr)

	Read external DSP RAM.  For addresses that are
	in external RAM, read the memory directly
	using the controller.  This is much faster than
	using the dp_read_dsp_ram() method.
*****************************************************************/
word rram2(word adr)
{
	byte bbr = BBR0;

	adr -= 0x8000;		// get offset into external mem
	adr <<= 1;			// DSP address (words) -> controller address (bytes)

	// now figure out bank and offset based
	// on how many banks this address is into
	// the external memory
	while (adr > 0x2fff)
	{
		bbr += 3;
		adr -= 0x3000;
	}

	// finally we can get the data, compensating
	// for the beginning bank number of the external
	// RAM, and the offset of the banked region of memory.
	return dp_getRAMwd(bbr, (byte *) (adr + BANKOFFSET));
}
#else
// For non-Z80, Reads from external RAM
// can be accomplished by using the DSP.
// This could be done through RMP/QMP
// but that's not implemented.
#define rram2(x)		rram((x))
#endif

/****************************************************************
Routine : vp_initiate_fast_retrain()
		initiate a v90 rate renegotiation
*****************************************************************/
void vp_initiate_fast_retrain()
{
	x_debug_msg("vp_initiate_fast_retrain()");

	if (VP_STATE_NULL != vp_state)
	{
		x_debug_msg("retrain already in progress");
		return;
	}

	if (MS_ON_DIAL == x_modem_state)
	{
		// disable dual-port data interrupts from the data pump so it
		// won't be sending in any characters to us.
		dp_bamil_rd7 |= BIT2;
		dp_regwrite(0xd7, dp_bamil_rd7);

		// if this is a retrain then we'll have
		// to let IO task know so that it can know
		// to not call V.42 or use the DCE buffers.
		x_send_mail(DP_IO_RETRAIN_START, IO_TASK, NULL, 1);
	}

	vp_state = VP_FAST_RETRAIN;
	vp_slice();
}

/****************************************************************
Routine : vp_fast_retrain_work()
		do the work associated with a fast retrain.
		This is called by the vp_slice() code.
*****************************************************************/
void vp_fast_retrain_work(
	word *lrnTbl,
	CPCPT_PARA_VALUE *para_value
	)
{
	word state, txBM[48], rxBM[48], i;

	x_debug_msg("vp_fast_retrain_work()");

#if !defined(DRAGNET)
	// For DRAGNET2 there is no ERAM that these values are saved in so
	// we use our own memory to store these.  We'll just use our own
	// memory for all dragnet cases.
#if defined(MODEM_Z80) && defined(PCMCIA_MODEM) && !defined(ROM_FLASH)
	//---------------------------------------------
	// save RAM lower boundary register
	//---------------------------------------------
	byte currlb = ramlbr_port ;

	//------------------------------------------
	// write lower boundary register
	// to gain access to "hidden ROM and RAM"
	// (normally in the non-boot block PCMCIA
	// this memory is not available because
	// the first part of RAM is CIS)
	//------------------------------------------
	ramlbr_port = 0xf0 ;
#endif
	// Read back the learned levels for this line.
	for (i=0;i<768;i++)
	{
		lrnTbl[i] = rram2(DP_ADD_LRNDTBLOUT+i);
	}
#if defined(MODEM_Z80) && defined(PCMCIA_MODEM) && !defined(ROM_FLASH)
	ramlbr_port = currlb;	// restore RAM lower boundary register
#endif

	// read back levelMse[128]
	for (i=0; i<128; i++)
	{
		levelMse[i] = rram(LevelMseAddr+i);
	}
#endif  // DRAGNET

	para_value->powRatio = rram(DP_ADD_HEADER + 2);

	// read back rbs
	for (i=0; i < 6; i++)
	{
		para_value->rbs[i] = (byte) rram(DP_V90_ADD_RBS + i);
		para_value->phGain[i] = (0 == para_value->rbs[i]) ? 1.0 : 1.5;
	}

	// Read back other interesting parameters
	// that have been saved in the DSP RAM
	// for the constellation table calculations
	para_value->digLossGain = rram(DP_ADD_DIGLOSSGAIN) ;
	para_value->digLoss = rram(DP_ADD_DIGLOSS);

	para_value->rxAlaw = vp_rxAlaw;	// Saved earlier during retrain.

	// we'll limit the maximum downstream rate to the
	// current rate.  If we don't do this we'll base the
	// new rate on current mse, which is lower than the 8-level
	// mse the equations are based on.
	// This is overridden if the user has set S38 greater than 1.
	para_value->maxRate = (byte) (x_line_rate + 1 - MRV_28000);

	// if we're falling forward, however, we don't want
	// to limit ourselves to the current rate.
	if (0 == dp_v90_ff.secs)
	{
		para_value->maxRate = dp_pcm_max_rate;
	}

	// Account for cases when we're trying to fall back
	if (para_value->maxRate > dp_pcm_max_rate)
		para_value->maxRate = dp_pcm_max_rate;

	// Calculate the slicer tables for the V.90 constellation.
	// This time consuming operation is done in its
	// entirety before we interrupt the data flow below
	// with the FAST_RATE_CHANGE command to the DSP.
	vp_calculate_tables(lrnTbl, para_value, txBM, rxBM);

	// disable equalizer
	dp_write_dsp_ram(0x8a, 0x0);

	dp_modem_command(FAST_RATE_CHANGE, 0, 0);
	k56_timer1 = x_current_time();
	dp_write_dsp_ram(DP_ADD_HOST, 0);			//Host_flg

	x_debug_msg("wait for phase 3");
	state = TRUE;

	while (state)
	{
		if (x_elapsed_time (k56_timer1) >= SECOND5)
		{
			G(dp_56k_user_retrain) = 0;
			// try 1 v90 retrain first before fallback to V.34
			x_debug_msg("vpcm-timeout for PcmV_Version");
			// count this as dsp failure
			vpcm_retrain_or_fallback();
			return;
		}

		dp_print_state_pointers();

		if (dp_read_dsp_ram(PcmV_Version))
		{
			dp_write_dsp_ram(0x008c, 0);	// tone detect init
			state = FALSE;
		}
	}

	x_debug_msg("wait for ready");
	state=rram(DP_ADD_HOST);  
	k56_timer1 = x_current_time();

	// Wait for the DSP state pointer for CP start
	while (state!=para_value->ready) 
	{
		if (x_elapsed_time (k56_timer1) >= SECOND5)
		{
			G(dp_56k_user_retrain) = 0;
			// do 1 v90 retrain first before fallback to V.34
			x_debug_msg("vpcm-timeout for CP start");
			// count this as dsp failure
			vpcm_retrain_or_fallback();
			return;
		}

		dp_print_state_pointers();

		state=rram(DP_ADD_HOST);
		x_sleep(5);
	}

	vp_download_tables(para_value, txBM, rxBM);

	vp_free_mem();
	dp_56k_state = VPCM_WAIT_FOR_CONNECT;
}

/****************************************************************
Routine : vp_jd_maxRate()

Figure out maxRate based on what the central site has in Jd bits
18-33 and 35-40.

These bits contain the data rate capability mask.  The means the
digital modem (central site) can use to let us know the maximum
downstream rate it can/will support in its transmitter

This method is limited to finding the maximum rate such that the
central site claims to support all rates including and below that
rate.  Thus if there are 'holes' in the rates, we don't allow rates
higher than the first hole.

Parameter: maxRate is the maximum rate so far
		accounting for other things.

Return value: will always be less than or equal
		to the input parameter maxRate.
*****************************************************************/
byte vp_jd_maxRate(byte maxRate)
{
	byte jdMax;
	word bits18_33 = rram(0x1f39);
	word bits35_40 = (word) (rram(0x1f3a) & 0x003f);
	word bitMask;
	byte i;

	//x_debug_msg("vp_jd_maxRate()  Jd bits18_33=");
	//dp_puts_hex(bits18_33);

	//x_debug_msg("bits35_40=");
	//dp_puts_hex(bits35_40);
	//sendCrLf();

	// If there are any unsupported speeds in this range then figure
	// out which one's the highest supported.  Bit 18 corresponds to
	// 28000 bps and we'll assume that one's supported.
	if (0xffff != bits18_33)
	{
		bitMask = 2;
		for (i=0; i<15; i++)
		{
			if (!(bitMask & bits18_33))
			{
				x_debug_msg("Jd - found 18-33 no bit with bitMask=");
				dp_puts_hex(bitMask);
				sendCrLf();

				jdMax = i;
				return (byte) (jdMax < maxRate ? jdMax : maxRate);
			}
			bitMask <<= 1;
		}
	}

	// Now work on bits 35-40 since we've determined
	// all the lower speeds are supported:
	//
	// bit 35 - 49333 bps - maxSpeed 17
	// bit 36 - 50666 bps - maxSpeed 18
	// bit 37 - 52000 bps - maxSpeed 19
	// bit 38 - 53333 bps - maxSpeed 20
	// bit 39 - 55466 bps - maxSpeed 21
	// bit 40 - 56000 bps - maxSpeed 22
	if (0x003f != bits35_40)
	{
		bitMask = 1;
		for (i=16; i<21; i++)
		{
			if (!(bitMask & bits35_40))
			{
				x_debug_msg("Jd - found 35-46 no bit with bitMask=");
				dp_puts_hex(bitMask);
				sendCrLf();

				jdMax = i;
				return (byte) (jdMax < maxRate ? jdMax : maxRate);
			}
			bitMask <<= 1;
		}
	}

	return maxRate;
}

/****************************************************************
Routine : vp_slice()

	Main state machine for vp_slice functions.  handle the calling of
	the different parts of the slicer table.  CPt, CP

	This function doesn't take care of timing out due to errors.  It
	relies on dp_56k_background() for that.

 Return Value:
    FALSE means we're not done with level learning process yet.

	TRUE means we're done and the V.90 state machine (in
	  dp56clnt.c) can go on to wait for data mode.
*****************************************************************/
byte vp_slice()
{
	byte k;
	byte j;
	int i, state;
	CPCPT_PARA_VALUE	*cptcp_value;
	word *lrnTbl;

	// must do initialization

#if defined(MODEM_Z80)
	// set up the pointers for the big arrays.
	// We'll just do this every time.

	// we'll take over the io_dce_ buffers and their variables.
	// we have to make sure to reinitialize things when we're done.
	// This assumes we won't have any tx or rx data pump interrupts
	// in the middle of this routine.  If they were to come in,
	// the memory used by this routine would obviously be corrupted.
	lrnTbli = (word *) &io_dce_tx_buff[0];
	tbl = &lrnTbli[768];
	cptcp_value = (CPCPT_PARA_VALUE *) &tbl[588];
#if defined(V42BIS_RAM_CODE)
	// Also we'll take over the V42BIS code that's in RAM (if it is)
	// This means after this we'll have to recopy the code into RAM.
	// We know it's OK to use this memory because the code is only
	// called from the main loop, not from any interrupt handler.
	{
		extern byte RamCode[];

		// need 768 words for lrnTbl[]
		lrnTbl = (word *) &RamCode[0];
	}
#else
	lrnTbl = (word *) &lrnTblGlob[0];
#endif
	// borrow the io_dce_buf space.
	levelMse = (word *) &io_dce_buf[0];
#else
	// (non Z80)
	cptcp_value = &cptcp;
	levelMse = levelMseArray;
	lrnTbl = lrnTblGlob;
	tbl = tblGlob;
	lrnTbli = lrnTbliGlob;
#endif

	cptcp_value->cpt = (byte) (vp_state < VP_WAIT_FOR_CP);
	vp_get_parameters(cptcp_value);
	cptcp_value->testFlag = 2;
	cptcp_value->aLaw = (byte) rram(DP_ADD_ALAW);

	switch(vp_state)
	{
	case VP_STATE_NULL:
		x_debug_msg("Waiting for DIL...");

		if (MS_ON_DIAL == x_modem_state)
		{
			// if this is a retrain then we'll have
			// to let IO task know so that it can know
			// to not call V.42 or use the DCE buffers.
			x_send_mail(DP_IO_RETRAIN_START, IO_TASK, NULL, 1);
		}
		for (i=0;i<768;i++)
		{
			lrnTbl[i] = 0;
			lrnTbli[i] = 0;
		}
		for (i=0; i<128; i++)
		{
			levelMse[i] = 0;
		}

		// For startup and retrain, autorate maximum is set here.

		// Joe wants to set this to max. speed ( 53.3 kbps )
		// maxRate 17-> 49.3 kbps     maxRate 20-> 53.3 kbps
		cptcp_value->maxRate = 20;

		// Account for cases when we're trying to fall back
		if (cptcp_value->maxRate > dp_pcm_max_rate)
			cptcp_value->maxRate = dp_pcm_max_rate;

		vp_state = VP_WAIT_FOR_END_OF_2LEVELS;
		break;

	case VP_WAIT_FOR_END_OF_2LEVELS:
	case VP_WAIT_FOR_DIL:
		state=rram(DP_ADD_HOST);
		if (state == 1)
		{
#if defined(MODEM_Z80) && defined(PCMCIA_MODEM) && !defined(ROM_FLASH)
			// See earlier comments on LBR in non-boot block PCMCIA modem.
			byte currlb = ramlbr_port;

			ramlbr_port = 0xf0;
#endif
			x_debug_msg("done waiting for DIL seg 3,4,5");
			vp_state = VP_WAIT_FOR_CPt;

			// Read in the level learn table that has been done so far
			// in the DSP.  GetGain() uses this much of the table to
			// calculate digital loss and RBS.
			for (i=48;i<88;i++)
			{
				for (j=0; j<6; j++)
				{
					lrnTbl[i+(j<<7)]=
						rram2(DP_ADD_LRNDTBLOUT+120*j+i);
#if !defined(MODEM_Z80)
					if (!lrnTbl[i+(128*j)])
					{
						// It is a failure if somehow we haven't
						// gotten a value in the lrnTbl.
						sendCrLf();
						DP_PUTS("zero lrnTbl for i=");
						dp_puts_dec((word) i);
						DP_PUTS(" j=");
						dp_puts_dec((word) j);
						sendCrLf();
						return TRUE;
					}
#endif
				}
			}
#if defined(Z80_DEBUG_PRINT)
			if (S.ModemOptions.Dummy20 & BIT3)
			{
				x_debug_msg("print lrnTbl from ( 48 to 88 ) ");
				sendCrLf();
				for (i=48;i<88;i++)
				{
					for (j=0; j<6; j++)
					{
						dp_puts_dec ((word) (lrnTbl[i+(j<<7)]) );
					}
					sendCrLf();
				}
			}
#endif
			// For Korea fix we need more levels for GetGain()
			for (i=88;i<112;i+=2)
			{
				for (j=0; j<6; j++)
				{
					lrnTbl[i+(j<<7)]=
						rram2(DP_ADD_LRNDTBLOUT+120*j+i);
				}
			}
#if defined(Z80_DEBUG_PRINT)
			if (S.ModemOptions.Dummy20 & BIT3)
			{
				x_debug_msg("print lrnTbl from ( 88 to 112 ) ");
				sendCrLf();
				for (i=88;i<112;i+=2)
				{
					for (j=0; j<6; j++)
					{
						dp_puts_dec ((word) (lrnTbl[i+(j<<7)]) );
					}
					sendCrLf();
				}
			}
#endif
			Wram(DP_ADD_HOST, 0);

#if defined(MODEM_Z80) && defined(PCMCIA_MODEM) && !defined(ROM_FLASH)
			ramlbr_port = currlb ;
#endif
			cptcp_value->NLev = 119;
			for (i=0; i<= 768; i+=128)
				lrnTbl[i]=0;
			cptcp_value->aLaw = (byte) rram(DP_ADD_ALAW);
			cptcp_value->maxPow = (byte) rram(DP_ADD_MAXPOW);

			if (GetGain(lrnTbl, cptcp_value) == FALSE)
			{
				x_debug_msg("GetGain fails");
				sendCrLf();
				G(vpcm_getgain_fail) = 1;
			}

			if (!cptcp_value->pass)
			{
#if !defined(MODEM_Z80)
				for (i=48; i<112; i++)
				{
					sendCrLf();
					DP_PUTS("i=");
					dp_puts_dec((word) i);
					for (j=0; j<6; j++)
					{
						dp_puts_hex((word) lrnTbl[i+(j<<7)]);
					}
				}
				sendCrLf();
#endif
				return TRUE;	// things will time out and fall to V.34
			}
			vp_rxAlaw = cptcp_value->rxAlaw;	// save for use by rate reneg.
			dp_timer = k56_timer1 = x_current_time();
		}
		break;
	case VP_WAIT_FOR_CPt:
		// Don't do the read RAM's too often,
		// that might hog MIPS from the DSP.
		if (x_elapsed_time(dp_timer) < MS10)
			break;

		dp_timer = x_current_time();
		state=rram(DP_ADD_LL_HOST);

		// Wait for the DSP state pointer for DIL done
		if (state==DP_LL_HOST_DONE)
		{
			Wram(DP_ADD_LL_HOST,0);			// hostLL=0
#if defined(DRAGNET)
			// joe said to do this, but it doesn't seem
			// to work for the venus modems.  (lockup)
			// mah - 5/16/00
			Wram(DP_ADD_HOST, 0);
#endif // DRAGNET

			vp_state = VP_WAIT_FOR_CP;

			{
				for (i=1;i<48;i++)
				{
					for (j=0; j<6; j++)
					{
						lrnTbl[i+(j<<7)]=
							rram2(DP_ADD_LRNDTBLOUT+120*j+i);
					}
				}
				for (i=88;i<120;i++)
				{
					for (j=0; j<6; j++)
					{
						lrnTbl[i+(j<<7)]=
							rram2(DP_ADD_LRNDTBLOUT+120*j+i);
					}
				}
			}
#if defined(Z80_DEBUG_PRINT)
			if (S.ModemOptions.Dummy20 & BIT3)
			{
				x_debug_msg("print lrnTbl from ( 1 to 48 ) ");
				sendCrLf();
				for (i=1;i<48;i++)
				{
					for (j=0; j<6; j++)
					{
						dp_puts_dec ((word) (lrnTbl[i+(j<<7)]) );
					}
					sendCrLf();
				}
				x_debug_msg("print lrnTbl from ( 88 to 120 ) ");
				sendCrLf();
				for (i=88;i<120;i++)
				{
					for (j=0; j<6; j++)
					{
						dp_puts_dec ((word) (lrnTbl[i+(j<<7)]) );
					}
					sendCrLf();
				}
			}
#endif

			// Take into account the desires of the central
			// site for max rate that it may have put in Jd
			// Jd comes in phase 3 so we can't do this up
			// in the initialization code VP_STATE_NULL.
			cptcp_value->maxRate = vp_jd_maxRate(cptcp_value->maxRate);

			vp_GetGainPost(lrnTbl, cptcp_value);
			vp_cpcptinit(lrnTbl, cptcp_value);

			k56_timer1 = x_current_time();
		}
		break;

	case VP_WAIT_FOR_CP:
		// Don't do the read RAM's too often,
		// that might hog MIPS from the DSP.
		if (x_elapsed_time(dp_timer) < MS10)
			break;

		dp_timer = x_current_time();
		state=rram(DP_ADD_HOST);

		// Wait for the DSP state pointer for CP start
		if (state==cptcp_value->ready)
		{
			for (i=0;i<768;i++)
			{
				lrnTbli[i] = lrnTbl[i];
			}
			k56_timer1 = x_current_time();
			vp_state = VP_WAIT_FOR_EQ;	// wait for equalizer to converge

#if !defined(DRAGNET)
			// save the shifted lrnTbl into RAM
			// so that if a rate renegotiation happens
			// we can use these values.
			vp_DownLoad(lrnTbl, DP_ADD_LRNDTBLOUT, 768);
			vp_DownLoad(levelMse, LevelMseAddr, 128);
#endif // MODEM_Z80

			x_debug_msg("Wait for eq. to converge");
		}
		break;

	case VP_FAST_RETRAIN:
		// This state is called directly from the
		// vp_initiate_fast_retrain() function.
		vp_fast_retrain_work(lrnTbl, cptcp_value);
		break;

	case VP_WAIT_FOR_EQ:

		// dsp takes care the delay
		//if (x_elapsed_time(k56_timer1) >= (4*MS100))
		{
			cptcp_value->mse=rram(DP_MSE_LOC);		// current mse
			if (cptcp_value->mse > 0x500)
			{
				x_debug_msg("mse>0x500-goto V.34 mse=");
				dp_puts_hex(cptcp_value->mse);
				sendCrLf();
				vp_free_mem();
				dp_56k_fallback();
				return FALSE;
			}

			// Calculate CP and download everything.
			vp_cpcptinit(lrnTbl, cptcp_value);

			vp_free_mem();	// takes care of setting vp_state

			return TRUE;		// done with vp_slice()
		}
		break;
	}
	return FALSE;
}


short int vp_iabs(short int x)
{
	if (x >= 0)
		return x;
	else 
		return (short int) (-x);
}

/************************************************************************/


/****************************************************************
Routine : vp_DownLoad()

	Download 'length' words of DSP memory from
	'table' into the DSP RAM starting with
	address dsp_addr.
*****************************************************************/
void vp_DownLoad(word *table, word dsp_addr, int length)
{
	int i=0;
	while (i < length)
	{
		Wram(dsp_addr, table[i]);
		i++; dsp_addr++;
	}
} 

/************************************************************************/
// Routine: vp_get_parameters
//
//    Initialize structures and variables for slicer table calculations.
/************************************************************************/
void vp_get_parameters(CPCPT_PARA_VALUE *cpt_value)
{
	/*======= get Level Learning parameters ===============*/

	// for aggressive initial connection
	if ( ( G(vp_initial_connect_msg_done) == 0 )
			&& ( G(S).ModemOptions.Aggressive_Connection_Enable == 1) )
	{
		// these 2 scale factors control the aggressive of the connection
		// the lower it is, the more aggressive the connect rate
		// the range : tblMseFac ( 1.0 - 4.0 ), dspMseFac ( 0.2 - 0.5 )
		cpt_value->dspMseFac = (float) 0.425;
	}
	else
	{
		cpt_value->dspMseFac = (float) 0.475;
	}
	cpt_value->tblMseFac = 3.0;

	/*======= get CPt parameters ===============*/
	if(cpt_value->cpt == 1) 
	{
		cpt_value->ready = 1;				// cp_host value for ready
	}
	else
	{
		/*=======    get CP parameters  ======================*/
		cpt_value->ready = 2;			// cp_host value for ready
	}
}
/****************************************************************
Routine : vpcm_retrain_or_fallback
*****************************************************************/
void vpcm_retrain_or_fallback(void)
{
	word temp = dp_read_dsp_ram(0x1ff9);
	x_debug_msg("vpcm - DSP gives 1ff9=");
	dp_puts_hex(temp);
	sendCrLf();

	// try 1 v90 retrain first before fallback to V.34
	vpcm_count_1ff9++;
	if ( ( vpcm_count_1ff9 < 2 ) && ( temp != 0xbad )
		&& (G(vpcm_getgain_fail) == 0) )
	{
		x_debug_msg("vpcm - # retrain due to dsp ram 0x1ff9 =");
		dp_puts_dec(vpcm_count_1ff9);
		sendCrLf();
		vp_state = VP_STATE_NULL;
		dp_56k_retrain_cmd(0x11);
	}
	else
	{
		dp_56k_fallback();
	}
}
#endif // VPCM_CLIENT
