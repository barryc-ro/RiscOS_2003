/*name and version number:@(#)atv9x.c	1.23*/
/*date of get: 		  11/22/00 14:16:14*/
/*date of delta:	  11/21/00 17:24:54*/
/****************************************************************
File : atv9x.c
Description :
	V.90 and V.92 V.250 commands and misc
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "atglob.h"
#include "sync.h"

#include "v25ter.h"
#include "dpglob.h"
#include "z80glob.h"
#include "allglobs.h"

#if defined(V92_MODEM_ON_HOLD)
extern void dp_do_flash(void), dp_modem_on_hold(void);
extern byte dp_mh_timer_idx(void);
#endif
extern const word io_line_rate[];
typedef const byte *CBP;

/****************************************************************
Routine : at_output_msg2
Description :
	Send the NULL-terminated string buf to DTE.
*****************************************************************/
void at_output_msg2(byte *buf)
{
	byte rambuf[150];

#if defined(Z80_DEBUG_THIS_FILE) || !defined(MODEM_Z80)
	if (x_strlen(buf) >= 150)
	{
		x_strcpy(rambuf, (CBP) "at_output_msg2 failure");
		at_output_msg(rambuf, x_strlen(rambuf));
		return;
	}
#endif

	x_strcpy(rambuf, buf);		// deal with possible bank problems
	at_output_msg(rambuf, x_strlen(rambuf));
}

/****************************************************************
Routine : at_output_msg_strstr
Description :
	Send the NULL-terminated strings buf1 and buf2 to DTE.
*****************************************************************/
void at_output_msg_strstr(char *buf1, char *buf2)
{
	x_send_at_io_crlf();
	x_send_at_io_data((byte *) buf1);
	x_send_at_io_data((byte *) buf2);
	x_send_at_io_crlf();
}

/****************************************************************
Routine : at_output_msg_strdec
Description :
	Send the NULL-terminated string buf and
	decimal number dec to DTE.
*****************************************************************/
void at_output_msg_strdec(char *buf, word dec)
{
	char decChars[6];

	x_send_at_io_crlf();
	x_send_at_io_data((byte *) buf);
	at_itoa(dec, (byte *) decChars, DECIMAL);
	x_send_at_io_data((byte *) decChars);
	x_send_at_io_crlf();
}

/****************************************************************
Routine : at_cat_num()
Description :
	Concatenate the decimal numeric representation of
	'num' onto the string in 'buf'.

	If 'followedBy' is not 0, we also append this character
	it to the string.

	Assume that there is enough space to concatenate.

Return:
	Next available byte in 'buf'.
*****************************************************************/
byte *at_cat_num(byte *buf, word num, byte followedBy)
{
	byte *bp, asciiNum[10];

	at_itoa(num, asciiNum, DECIMAL);
	x_strcat(buf, asciiNum);
	bp = &buf[x_strlen(buf)];

	if (followedBy)
	{
		*bp++ = followedBy;
		*bp = 0;
	}

	return bp;
}

#if defined (V25TER) || defined (V80) || defined (V8BIS)

/****************************************************************
Routine : at_atoint_digit
Description :
	helper function for at_atoint(), saves space for Z80

	factor in the next digit of the user-entered text
	being converted to decimal.
*****************************************************************/
static void at_atoint_digit(long *num, byte format, byte ad)
{
	*num = *num * format + ad;
}

/****************************************************************
Routine : at_atoint
Description :
	This routine will convert the ASCII string to a integer long

Arguments:
	str	:pointer to the ASCII sring to be converted
	num :poiner to an integer in wich the converted integer will be held
	format: either HEX or DECIMAL

Return:
	length in bytes of the integer in the ASCII string
*****************************************************************/
word at_atoint(byte *str, long *num, byte format)
{
	byte count = 0;

	*num = 0;

	if (HEX == format)
	{
		for ( ; (((*str>='0') && (*str<='9')) ||
				 ((*str>='A') && (*str<='F'))); ++count, str++ )
		{
			if (*str >= 'A')
				at_atoint_digit(num, format, (byte) (*str-'A'+10));
			else
				at_atoint_digit(num, format, (byte) (*str-'0'));
		}
	}
	else
	{
		// assume DECIMAL format
		for ( ; ((*str>='0') && (*str<='9')); ++count, str++ )
			at_atoint_digit(num, format, (byte) (*str-'0'));
	}

	return count;
}

/****************************************************************
Routine : at_get_vals
Description :
	 get the value of the input string.

	 This is called by at_withinrange() below.  We get
	 a single value from the input string, which
	 should terminate with either comma, or NULL.

Return:
	The number of characters read for this input value
	including any trailing comma.

	-1 means the user's string couldn't be completely
	parsed as a number. (invalid user entry)
*****************************************************************/
static signed char at_get_vals(byte *str, long *num, byte base)
{
	byte len = 0;

	*num = -1;

	if (0 == *str)
	{
		return 0;		// no value
	}

	if (*(str ) == ',')
	{
		return 1;		// still no value
	}	   // atoint would give zero if char is ','

	if (0 == base)
	{
		// Just scan to the next range, we don't
		// need a numerical value here.
		while ((*(str+len) != ',' ) && ( *(str+len) != 0))
			len++;
	}
	else
	{
		// convert the user's string to a number
		len = (byte) at_atoint(str, num, base);
		if (*(str+len) != ',' && *(str+len) != 0 )
		{
			return -1;	// bad input string
		}
	}

	if (*(str+len) == ',')
		len++;
	return len;
}

/****************************************************************
Routine : at_get_range
Description :
	 get the range number rangenum
	 valid range of the input value from the range string 'str
	 and copy the result into 'str'
*****************************************************************/
static BOOL at_get_range(byte *str, byte *src, byte rangenum, byte *base)
{
	BOOL outside;
	int i = rangenum;	

	*base = 10;
	outside = TRUE;
	while (*src != ' ')
		src++;
	src++;

	while ( i > 0 )
	{
	 	if (*src ==',' && outside )
			i--;
	 	if (*src == '(' )
			outside = FALSE;
	 	if (*src == ')' )
			outside = TRUE;
	 	if (*src == 0 )
		{
			*str = 0;
			return 0;	// didn't have that many ranges in 'src'
		}
		src++;
	}
	outside = TRUE;
	if (*src=='x') {*base=16; src++; }			// 'x' prefix means hex
	else if (*src== 'i') {*base = 0; src++;}
	else *base=10;								// no prefix means decimal
		 
	while (1)      
	{
	 	*str = *src;
	 	if (*str == ',' && outside)
		{
			*str = 0;
			return 1;
		}
		if (*str == 0 )
		{
			return 1;	// end of 'src'
		}

		if ( *src == '(' )
			outside = FALSE;
	 	else if ( *src == ')' )
			outside = TRUE;
	 	else
			str++;

	 	src++;
	}
}

/****************************************************************
Routine : at_OneByte()
Description :
	Convert an ASCII decimal number to the number.

	Update *pStr to the character after the last digit of the number.

	*pStr - input string
	*val - value.  input with maximum allowed value.  The new
		value is the value entered by the user.

Return Value:
	TRUE - success.  the value entered is less than
		or equal to the input value.
	FALSE - parsing problem or value too big.
		In this case, an error message has been taken care of.
*****************************************************************/
BOOL at_OneByte(byte **pStr, byte *val)
{
	byte maxVal = *val, count;
	word userVal;

	count = (byte) at_atoi(*pStr, &userVal, DECIMAL);

	if (userVal > (word) maxVal || 0 == count)
	{
		at_cmd_err_ret();
		return FALSE;
	}

	*val = (byte) userVal;
	*pStr = *pStr + count;
	return TRUE;
}

/****************************************************************
Routine : at_v250_OneByte()
Description :
	Special case of V.250 command with one decimal parameter
	that fits in one byte.  This function handles the
	"+xy?", "+xy=?", and "+xy=val" cases.

	str - input string starting at first char after '+'
	maxVal - maximum allowed value.
	*val - value.  input with current value, if a new
		value is entered by the user, it is returned in *val.

Returns:
	TRUE - success
	FALSE - failure.  error message given to user.
*****************************************************************/
BOOL at_v250_OneByte(byte *str, byte maxVal, byte *val)
{
	byte buf[20], *bp = &buf[1];

	G(at_result_code) = OK;

	// first get the command string for later possible printing
	buf[0] = '+';
	while (*str && '=' != *str && '?' != *str)
	{
		*bp++ = *str++;
	}

	if (!*str)
	{
		// no input string - ERROR
		at_cmd_err_ret();
		return FALSE;
	}

	// fill in ": " into buf[] so we can print things out nicely
	// later if necessary.
	*bp++ = ':';
	*bp++ = ' ';
	*bp = 0;

	if ('?' == *str)	// "+xx?"
	{
		if (str[1])
		{
			// we don't allow characters after '+xx?'
			at_cmd_err_ret();
			return FALSE;
		}

		// print current value
		at_output_msg_strdec((char *) buf, (word) *val);
		return TRUE;
	}
	
	// now *str must be '='.  We have two legal cases to deal with:
	// '=value' and '=?'
	str++;		// skip '='
	if ('?' == *str)	// "+xx=?" case.  print out allowed values
	{
		if (maxVal > 0)
			x_strcat(buf, (CBP) "(0-");	// append beginning of range string
		else
			x_strcat(buf, (CBP) "(");	// special case, need only open paren

		// make a string out of maxVal so we can print it out
		(void) at_cat_num(buf, (word) maxVal, ')');
		at_output_msg2(buf);
		return TRUE;
	}

	// one more case to deal with, '+xx=value'.
	// Parse the value, make sure it's in range
	// and then store in *val below.
	if (!at_OneByte(&str, &maxVal))
		return FALSE;

	// If there are more characters on the line
	// after a valid value, that's an error.
	if (0 != *str)
	{
		at_cmd_err_ret();
		return FALSE;
	}

	*val = maxVal;
	return TRUE;
}

/****************************************************************
Routine : at_SIwithinrange
Description :
	Same as at_withinrange but uses 'short int' parameters

	str - input value.
	sRange - range string (could be ROM in this bank).
	num - array of 10 'short int's to put the result.
*****************************************************************/
BOOL at_SIwithinrange(byte *str, byte *sRange, short int *num)
{
	byte i;
	long larray[10];

	if (!at_withinrange(str, sRange, larray))
		return FALSE;

	for (i=0; i<10; i++)
	{
		num[i] = (short int) (larray[i]);
	}

	return TRUE;
}

/****************************************************************
Routine : at_withinrange
Description :
	Check input value against its valid range of the value.

	str - input value.
	sRange - range string (could be ROM in this bank).
	num - array of 10 longs to put the result.
*****************************************************************/
BOOL at_withinrange(byte *str, byte *sRange, long *num)
{
	word len;
	long start, stop;
	byte buf[100], *ptr1, i, base;
	BOOL good, numrange;	
	signed char nlen;

	for (i=0; i<10; i++)
	{
		num[i] = -1;
	}
 	for (i=0; i<10;i++)		 //  do for up to 10 parameters
 	{ 
		// get i'th range string into 'buf'. base = 10 or 16 or 0
		// for ignore
		numrange = at_get_range(buf, sRange, i, &base);

		// get input values. -1 for error, 0 for no values left or 1.
		nlen = at_get_vals(str, &num[i], base);
		str += nlen;		

		if ((nlen==0) && (numrange ==0 ))
			return TRUE;  // no more numbers, no more ranges

		ptr1 = buf;
		good=FALSE; 
		
		if (nlen == -1)
			return FALSE;	  // error in parameter string

		if (nlen == 0)
		{
			num[i] = -1;
			return TRUE;		  // no more numbers input
		}
 		if  (base == 0)
			good = TRUE; 
		if  (*(num+i) == -1)
			good = TRUE;	// no parameter specified

		while ((*ptr1 != 0) && (good !=TRUE))
	 	{
	 		start= -1;
	 		stop =-1;
			len = at_atoint(ptr1, &start, base);

			ptr1 += len;
			if  (*ptr1 == '-')
			{
				ptr1++; 		
				at_atoint(ptr1, &stop, base);
			}

			if ((stop != -1) && (*(num+i) >= start) && (*(num+i)<= stop))
				good = TRUE;
	 		if ((stop == -1 ) && (*(num+i) == start))
				good = TRUE;
		   	if (*ptr1 == ',')
				ptr1++;
		}	   // end of while  tried a whole parameter template

		if ( good == FALSE )
		{
			return FALSE;
		}
  	}	// end of for loop
	return FALSE;		// (get rid of warning)
}	  //end of routine
	
#endif // (V25TER) || (V80) || (V8BIS)

// table describes each modulation's maximum rx and tx rates
struct at_mod_str
{
	const char *modName;
	const byte maxTx;
	const byte maxRx;
};

const struct at_mod_str at_mod_tbl[] =
{
	//  name        maxTx    maxRx
	{ "Failure",	0,		  0 },				// 0
	{ "V23C",		MR_75,	MR_1200 },			// 1 - (vals for not reversed)
	{ "V21",		MR_300, MR_300 },			// 2
	{ "BELL103",	MR_300, MR_300 },			// 3
	{ "BELL212A",	MR_1200, MR_1200 },			// 4
	{ "V22",		MR_1200, MR_1200 },			// 5
	{ "V22B",		MR_2400, MR_2400 },			// 6
	{ "V32",		MR_14400, MR_14400 },		// 7
	{ "V32B",		MR_19200, MR_19200 },		// 8
	{ "V34",		MR_33600, MR_33600 },		// 9
	{ "K56",		MR_31200, MR_56000 },		// 10
	{ "V90",		MR_31200, MRV_56000 },		// 11
	{ "V92",		MR_31200, MRV_56000 }		// 12
};

// number of elements in at_mod_tbl is AT_MTSIZE
#define AT_MTSIZE		(sizeof(at_mod_tbl) / sizeof(struct at_mod_str))

/****************************************************************
Routine : at_current_mod()
Description:
	Fill in 'str' with the current modulation string.

Precondition:
	'str' has enough room to fit the modulation string.

Return Value:
	modulation value (AT_MOD_INDEX)
*****************************************************************/
AT_MOD_INDEX at_current_mod(byte *str)
{
	// Use modulation/connection type set when the data pump connected.
	x_strcpy(str, (CBP) at_mod_tbl[G(x_status).Connection].modName);

#if defined(V92) && defined (VPCM_CLIENT)
	if (AT_MOD_V92 == G(x_status).Connection)
	{
		// Add quick connect info to mod string
		if (BIT4 & G(vpcm_connection_status))
		{
			x_strcat(str, (CBP) " QCV.8bis");
		}

		if (BIT2 & G(vpcm_connection_status))
		{
			x_strcat(str, (CBP) " QCV.8");
		}
	}
#endif

	return (AT_MOD_INDEX) G(x_status).Connection;
}

#if defined(V25TER)

//*****************************************************************************
// Routine : at_v25ter_p
// Description :
//      "AT+P" commands for V.92 call waiting and quick connect.
//		ch[0] is the 'P'.
//****************************************************************************/
void at_v25ter_p(byte *ch)
{
	byte val, er = 0;		// error?

	G(at_result_code) = OK;

#if defined(MODEM_Z80)
	// don't allow these commands unless V.92 capable
	if (!(1 & z80_v92cap))
	{
		at_cmd_err_ret();
		return;
	}
#endif // MODEM_Z80

	switch (ch[1])
	{
	case 'C':	// +PCW - call waiting
		if ('W' != ch[2])
		{
			er = 1;
			break;
		}
		at_v250_OneByte(ch, 2, &G(dp_CallWaitingEnable));
		break;
#if defined(V92_MODEM_ON_HOLD)
	case 'M':	// +PMHx - V.92 Modem on Hold commands
		if ('H' != ch[2])
		{
			// Only know about +PMHx, no other +PM's supported.
			er = 1;
			break;
		}

		if ('T' == ch[3])			// +PMHT - Modem on Hold Timer
		{
			val = 0;
			if (at_v250_OneByte(ch, 13, &val))
			{
			}
			return;
		}

		if ('R' == ch[3])			// +PMHR - Initiate Modem on Hold
		{
			if (G(x_modem_state) != MS_ON_DIAL ||
				G(x_modem_mode) != MODEM_DATA ||
				!(G(S).ModemOptions.MHOptions & MH_ENABLED))
			{
				// Not offhook or not in data mode or MOH disabled
				// Not ready/able to do modem on hold.
				x_debug_msg("bad state.  can't initiate modem on hold");
				er = 1;
				break;
			}

			dp_modem_on_hold();
			val = dp_mh_timer_idx();
			at_output_msg_strdec("+PMHR:",val);
			break;
		}

		if ('F' == ch[3])			// +PMHF - Modem on Hold Flash
		{
			dp_do_flash();
			break;
		}

		// +PMH - enable/disable modem on hold
		val = (byte) ((G(S).ModemOptions.MHOptions & MH_ENABLED) ? 0 : 1);
		if (at_v250_OneByte(ch, 1, &val))
		{
			if (!val)
				G(S).ModemOptions.MHOptions |= MH_ENABLED; // 0=enable
			else
				G(S).ModemOptions.MHOptions &= ~MH_ENABLED;	// 1=disable
		}
		return;
#endif
	case 'Q':	// +PQC - V.92 Phase 1 and Phase 2 Control
		if ('C' != ch[2])
		{
			er = 1;
			break;
		}

		val = 0;
		if (0 == (G(S).ModemOptions.VpcmOption & BIT2))
		{
			// phase 1 QC disabled
			val = 2;
		}
		if (0 == (G(S).ModemOptions.VpcmOption & BIT5))
		{
			// phase 2 QC disabled
			val |= 1;
		}

		if (at_v250_OneByte(ch, 3, &val))
		{
			G(S).ModemOptions.VpcmOption &= ~(BIT2|BIT5);
			if (0 == (val & 2))
			{
				// enabling phase 1 QC
				G(S).ModemOptions.VpcmOption |= BIT2;
			}
			if (0 == (val & 1))
			{
				// enabling phase 2 QC
				G(S).ModemOptions.VpcmOption |= BIT5;
			}
		}
		break;

	case 'I':	// +PIG - IGnore PCM upstream
		if ('G' != ch[2])
		{
			er = 1;
			break;
		}
		// +PIG
		val = (byte) ((G(S).ModemOptions.VpcmOption & BIT3) ? 1 : 0);
		//if (at_v250_OneByte(ch, 1, &val))
		if (at_v250_OneByte(ch, 0, &val)) // PCM upstream not allowed now
		{
			if (val)
				G(S).ModemOptions.VpcmOption |= BIT3;	// enable PCM upstream
			else
				G(S).ModemOptions.VpcmOption &= ~BIT3;	// disable
		}
		return;
	default:
		er = 1;
		break;
	}

	if (er)
		at_cmd_err_ret();
}

/****************************************************************
Routine : at_v25ter_mod_carrier
Description:

	Display current negotiated modulation carrier in data mode
*****************************************************************/
void at_v25ter_mod_carrier(void)
{
	byte txchar[40], rate[15];

	if (!v25teroptions.mr ||				// +MR enabled
		MS_ON_DIAL != G(x_modem_state))		// data mode
	{
		return;
	}

	(void) at_current_mod(&txchar[0]);
	at_output_msg_strstr(MCR, (char *) txchar);

	// display current DCE tx rate,rx rate
	x_strcpy(txchar, (CBP) "+MRR: ");

	// add speed to +MRR for the standard cases
	if (G(x_line_rate_tx) != G(x_line_rate))
	{
		at_dce_speed_code(G(x_line_rate_tx));
		at_form_connect_rate((char *) rate);
		x_strcat(txchar, rate);
		x_strcat(txchar, (CBP) ",");
	}
	at_dce_speed_code(G(x_line_rate));
	at_form_connect_rate((char *) rate);
	x_strcat(txchar, rate);
	at_output_msg2(txchar);		// send out +MRR string
}

#define MS		   "+MS: "
#define MS_RANGE	MS "i(BELL103,V21,BELL212A,V22,V22B,V23C,V32,V32B,V34,V90,V92,K56),(0,1),(0),i(0-33600),(0),i(0-56000)"
#define MS_RANGE_NO_BELL	MS "i(V21,V22,V22B,V23C,V32,V32B,V34,V90,V92,K56),(0,1),(0),i(0-33600),(0),i(0-56000)"

/****************************************************************
Routine : at_set_max_rate
Description :
	save max rate parameters for +MS command

	direction - 1=transmit, 0=receive

Return Value:
	0 - error
	2 - OK
*****************************************************************/
byte at_set_max_rate(word wVal, byte direction, byte newMod)
{
	byte error = 0;
	byte lineRate, maxLineRate;

	if (0 == wVal)
		return 2;			// don't need to do anything, use default max

	// first find a line rate for this val
	lineRate = 1;
	if (0 == direction)
	{
		if (AT_MOD_K56 == newMod)
			lineRate = MR_32000;
		if (AT_MOD_V90 == newMod || AT_MOD_V92 == newMod)
			lineRate = MRV_28000;
	}

	for (; lineRate <= MRV_56000; lineRate++)
	{
		if (io_line_rate[lineRate] == wVal)
			break;
	}

	// rate can't be higher than the highest rate
	// allowed by this modulation.
	if (0 == direction)	// receive
		maxLineRate = at_mod_tbl[newMod].maxRx;
	else
		maxLineRate = at_mod_tbl[newMod].maxTx;

	if (MRV_56000+1 == lineRate ||
		lineRate > maxLineRate)
	{
		// invalid line rate
		error = 1;
	}

	if (newMod < AT_MOD_V32)
	{
		// only one rate allowed for these older modulations
		if (lineRate != maxLineRate)
		{
			// invalid line rate
			error = 1;
		}
	}

	if (newMod > AT_MOD_V34 && 0 == direction)
	{
		// receive direction for V.90/V.92 & K56FLEX are special
		if (newMod >= AT_MOD_V90)
		{
			G(at_v25ter_56kRate) = (byte) (lineRate - MRV_28000 + 2);
		}
		else
		{
			G(at_v25ter_56kRate) = (byte) (lineRate - MR_32000 + 2);
		}
	}
	else
	{
		G(at_v25ter_DialLineRate) = (byte) (lineRate + 1);
	}
	
	if (error)
	{
		at_cmd_err_ret();
		return 0;
	}

	return 2;
}

/****************************************************************
Routine : at_display_ms_rate
Description :
	Display the +MS subparameter settings for +MS?
*****************************************************************/
void at_display_ms_rate(byte *buf)
{
	char sRate[10];
	byte nCarrier = AT_MOD_V34;
	byte wMax_rate, wMax_rx_rate;
	
	// start with the V.34 rate for S37 as our maximum transmit rate
	if (0 == G(S).ModemOptions.DialLineRate)
		wMax_rate = MR_33600;
	else
		wMax_rate = (byte) (G(S).ModemOptions.DialLineRate - 1);

	wMax_rx_rate = wMax_rate;

	if (G(S).ModemOptions.bV34Enable)
	{
		// Maybe FLEX or V.90, V.92
		if (wMax_rate >= MR_4800 &&
			G(S).ModemOptions.Rate56K != 0)				// S38
		{
			byte lineRate;

			if (G(S).ModemOptions.VpcmOption & 0xfe)	// S109
			{
				// V.90/V.92
				nCarrier = AT_MOD_V90;
				if (G(S).ModemOptions.VpcmOption & BIT4)
					nCarrier = AT_MOD_V92;
				lineRate = MRV_28000 - 2;
				wMax_rx_rate = MRV_56000;
			}
			else
			{
				// K56FLEX
				nCarrier = AT_MOD_K56;
				lineRate = MR_32000 - 2;
				wMax_rx_rate = MR_56000;
			}

			if (1 != G(S).ModemOptions.Rate56K)			// S38
			{
				// not autorate for receive.
				wMax_rx_rate = (byte) (lineRate + G(S).ModemOptions.Rate56K);
			}
		}
	}
	else
	{
		// V.34 not enabled, must be V32B or below.
		if (wMax_rate <= MR_14400)
			nCarrier = AT_MOD_V32;
		else
			nCarrier = AT_MOD_V32B;
	}

	switch (G(S).ModemOptions.DialLineRate)		// S37
	{
	case 6:
		if (!G(S).ModemOptions.bV34Enable)
			nCarrier = AT_MOD_V22B;	// V.32 can't do 2400, must go to V22B
		break;
	case 5:
		if (G(S).ModemOptions.CommStdSetting == 1)
			nCarrier = AT_MOD_BELL212A;
		else
			nCarrier = AT_MOD_V22;
		break;
	case 3:
		if (G(S).ModemOptions.CommStdSetting == 1)
			nCarrier = AT_MOD_BELL103;
		else
			nCarrier = AT_MOD_V21;
		break;
	case 2:
		nCarrier = AT_MOD_V23C;
		if (G(S).ModemOptions.V23Reverse == 0 )
		{
			wMax_rate = MR_75;
			wMax_rx_rate = MR_1200;
		}
		else
		{
			wMax_rate = MR_1200;
			wMax_rx_rate = MR_75;
		}
		break;
	}

	if (wMax_rate > MR_2400)
	{
		if (wMax_rate > at_mod_tbl[nCarrier].maxTx)
			wMax_rate = at_mod_tbl[nCarrier].maxTx;

		if (wMax_rx_rate > at_mod_tbl[nCarrier].maxRx)
			wMax_rx_rate = at_mod_tbl[nCarrier].maxRx;
	}

	x_strcpy(buf, (CBP) MS);
	x_strcat(buf, (CBP) at_mod_tbl[nCarrier].modName);
	x_strcat(buf, (CBP) ",");
	at_cat_num(buf, G(S).ModemOptions.AutoMode, 0);
	x_strcat(buf, (CBP) ",0,");			// min_rate

	at_dce_speed_code(wMax_rate);
	at_form_connect_rate(sRate);
	x_strcat(buf, (CBP) sRate);			// max_rate

	x_strcat(buf, (CBP) ",0,");			// min_rx_rate

	at_dce_speed_code(wMax_rx_rate);
	at_form_connect_rate(sRate);
	x_strcat(buf, (CBP) sRate);			// max_rx_rate

	// ready for calling function to send out 'buf'
}

/****************************************************************
Routine : at_search_for_mod()
Description :
	Search for modulation in at_mod_tbl[] table.

	nCarrier is table index or AT_MTSIZE if not found
*****************************************************************/
byte at_search_for_mod(byte **pMod, byte *nCarrier)
{
	byte i;
	byte *pT, *p;

	for (i=0; i<AT_MTSIZE; i++)
	{
		pT = (byte *) at_mod_tbl[i].modName;
		p = *pMod;

		// check to see if the modName for this table
		// entry matches pMod.
		while (*p && *pT && *p != ',' && *p == *pT)
		{
			p++;
			pT++;
		}
		if ((*p == ',' || *p == 0) && !*pT)
		{
			*nCarrier = i;
			*pMod = p;

#if defined(MODEM_Z80)
			// make sure we're V.92 capable
			if (AT_MOD_V92 == i && !(1 & z80_v92cap))
			{
				at_cmd_err_ret();
				return;
			}
#endif // MODEM_Z80

			return TRUE;
		}
	}
	return FALSE;
}

/****************************************************************
Routine : at_check_end_of_parameter
Description :
	Check to see if this is the last parameter on the
	+MS command line.

Return Value:
	0 - error
	1 - end of line - values have been saved
	2 - more characters on the line
*****************************************************************/
byte at_check_end_of_parameter(byte *str)
{
	if (str[0] == 0)	// no next character, everything's OK
	{
		// save temporary's into the real options
		G(S).ModemOptions.VpcmOption = G(at_v25ter_VpcmOption);
		G(S).ModemOptions.Rate56K = G(at_v25ter_56kRate);
		G(S).ModemOptions.bV34Enable = G(at_v25ter_bV34Enable);
		G(S).ModemOptions.AutoRate = G(at_v25ter_AutoRate);
		G(S).ModemOptions.DialLineRate = G(at_v25ter_DialLineRate);
		G(S).ModemOptions.AutoMode = G(at_v25ter_AutoMode);
		G(S).ModemOptions.CommStdSetting = G(at_v25ter_CommStdSetting);
		G(at_result_code) = OK;
		return 1;
	}

	if ( ( ( str[0] == ',') && ( str[1] == 0 ) ) ||		// ends with ","
		 ( ( str[0] != ',' ) && ( str[1] != 0 ) ) )		// no comma before next
	{
		// should reject at+ms=, command
		at_cmd_err_ret();
		return 0;
	}

	return 2;	// another parameter follows
}

/****************************************************************
Routine : at_modulation
Description :
	+MS - Select Modulation command.
*****************************************************************/
void at_modulation(byte *ch)
{
	byte buf[200], *ptr, nCarrier;
	byte bVal, len;
	word wVal;

	switch (ch[2])
	{
	case '=':
		if ( ch[3] == '?' )
		{
			if ( G(S).ModemOptions.BellModePermited )
				at_px_strcpy(buf, (CBP) MS_RANGE ) ;
			else
				at_px_strcpy(buf, (CBP) MS_RANGE_NO_BELL ) ;
			at_output_msg2 ( buf ) ;
			G(at_result_code) = OK;
			break;
		}

		ptr = &ch[3];
		if (!at_search_for_mod(&ptr, &nCarrier))
		{
			at_cmd_err_ret();
			return;
		}

		G(at_v25ter_CommStdSetting) = G(S).ModemOptions.CommStdSetting;
		G(at_v25ter_DialLineRate) = 0;	//auto rate
		G(at_v25ter_VpcmOption) = 0;	//disable V90/V92
		G(at_v25ter_56kRate) = 0;		//disable 56K
		G(at_v25ter_bV34Enable) = 0;	//disable V34
		G(at_v25ter_AutoRate) = 1;
		G(at_v25ter_AutoMode) = 1;

		switch (nCarrier)
		{
		case AT_MOD_V23C:
			G(at_v25ter_DialLineRate) = 2;
			break;
		case AT_MOD_V21:
			G(at_v25ter_DialLineRate) = 3;
			G(at_v25ter_CommStdSetting) = 0;
			break;
		case AT_MOD_BELL103:
			G(at_v25ter_DialLineRate) = 3;
			G(at_v25ter_CommStdSetting) = 1;
			break;
		case AT_MOD_BELL212A:
			G(at_v25ter_DialLineRate) = 5;
			G(at_v25ter_CommStdSetting) = 1;
			break;
		case AT_MOD_V22:
			G(at_v25ter_DialLineRate) = 5;
			G(at_v25ter_CommStdSetting) = 0;
			break;
		case AT_MOD_V22B:
			G(at_v25ter_DialLineRate) = 6;
			G(at_v25ter_CommStdSetting) = 0;
			break;
		case AT_MOD_V32:
			G(at_v25ter_DialLineRate) = 11;
			break;
		case AT_MOD_V32B:
			// we disabled V.34, that's enough at this point
			break;
		case AT_MOD_V34:
			G(at_v25ter_bV34Enable) = 1;	//enable V34
			break;
		case AT_MOD_K56:
			G(at_v25ter_VpcmOption) = 1;	// K56 - disable v90/v92
			G(at_v25ter_56kRate) = 1;		// S38=auto
			G(at_v25ter_bV34Enable) = 1;	// enable V34
			break;
		case AT_MOD_V90:
		case AT_MOD_V92:
			if (AT_MOD_V92 == nCarrier)
			{
				// Enable V90 and V92 but
				// don't disable quick connect if it's set.
				G(at_v25ter_VpcmOption) = (byte) ((BIT4|BIT1) |
					(G(S).ModemOptions.VpcmOption & BIT2));
			}
			else
			{
				G(at_v25ter_VpcmOption) = 2;			// ena V90, disable V92
			}
			G(at_v25ter_56kRate) = 1;					// S38=auto
			G(at_v25ter_bV34Enable) = 1;				// enable V34
			break;
		default:
			// modulation not found
			at_cmd_err_ret();
			return;
		}
		if (at_check_end_of_parameter(ptr) < 2)
			return;

		ptr++;	// skip ','
		// take care of auto mode
		G(at_v25ter_AutoMode) = 1;
		if (!at_OneByte(&ptr, &G(at_v25ter_AutoMode)))
			return;

		if (at_check_end_of_parameter(ptr) < 2)
			return;

		// min tx rate, must be '0'
		ptr++;	// skip ','
		bVal = 0;
		if (!at_OneByte(&ptr, &bVal))
			return;

		if (at_check_end_of_parameter(ptr) < 2)
			return;

		// max tx rate
		ptr++;	// skip ','
		len = (byte) at_atoi(ptr, &wVal, DECIMAL);
		ptr += len;

		if (0 == at_set_max_rate(wVal, 1, nCarrier))
			return;

		if (at_check_end_of_parameter(ptr) < 2)
			return;

		// min rx rate, must be '0'
		ptr++;	// skip ','
		bVal = 0;
		if (!at_OneByte(&ptr, &bVal))
			return;

		if (at_check_end_of_parameter(ptr) < 2)
			return;

		// max rx rate
		ptr++;	// skip ','
		len = (byte) at_atoi(ptr, &wVal, DECIMAL);
		ptr += len;
		if (0 == at_set_max_rate(wVal, 0, nCarrier))
		{
			return;
		}

		if (2 == at_check_end_of_parameter(ptr))
		{
			at_cmd_err_ret();			// shouldn't have more parms.
		}
		break;	// done with AT+MS=
		
	case '?':
		at_display_ms_rate(buf);
		at_output_msg2(buf);
		G(at_result_code) = OK;
		break;
		
	default:
		at_cmd_err_ret();
		break;
	}
}

#endif // V25TER
