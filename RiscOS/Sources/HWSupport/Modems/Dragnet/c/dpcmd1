/*name and version number:@(#)dpcmd1.c	1.107*/
/*date of get: 		  04/12/01 11:56:22*/
/*date of delta:	  04/09/01 14:22:52*/
/****************************************************************
File :	dpcmd1.c
Description :
	Contains commands to Venus/Dragnet DSP.

Procedures Contained :
	dp_modem_command
	dp_write_dsp_ram
	dp_read_dsp_ram
	dp_write_dsp_block
	dp_write_dsp_array
	dp_regandor
	dp_dsp_int_regread
	dp_dsp_int_regwrite
*****************************************************************/

#include "llglob_d.h"
#include "dpglob.h"
#include "z80glob.h"
#include "allglobs.h"

/****************************************************************
Routine : wait_for_core_read()
Description :

    Wait for the DSP to read the command.

    This command times out on failure with a debug message
	if #ifdef'ed.

	Often a failure here means the DSP is dead or not
	connected properly.
*****************************************************************/
non_banked void wait_for_core_read(void)
{
	// One quick read since usually the
	// DSP is done before we're able to even
	// check its response.
 	if (DP_IS_CORE_RD_INT(CRBANK))
	{
		return;
	}

	G(dp_cmd_timer) = x_current_time();

	// Wait for DSP to read the command
	// or a timeout time.
 	while (!DP_IS_CORE_RD_INT( CRBANK ) &&
		   (x_elapsed_time(G(dp_cmd_timer)) < MS200))
	{
	}

	DP_CHKDSP();

#if defined(Z80_DEBUG_THIS_FILE) || !defined(MODEM_Z80)
	if (x_elapsed_time(G(dp_cmd_timer)) >= MS200)
	{
		x_debug_msg("DP - wait_for_core_read failure");

#if defined(WIN32)
		{
			extern byte dpFailure, winFailure;

			winFailure = dpFailure = 1;
		}
#endif // WIN32
	}
#endif // Z80_DEBUG_THIS_FILE || !MODEM_Z80
}

/****************************************************************
Routine : dp_modem_command
Description : Send a command to the modem.
Parameters in :
	command	- command sent to DSP
	param1	- first parameter for the command  - 0x36
	param2	- second parameter for the command - 0x37
*****************************************************************/
non_banked void dp_modem_command(byte command, byte param1, byte param2)
{
	if ( ( command == STARTUP ) || ( command == LL_TEST ) )
	{
		// Get CAMIL ready for data interrupts.
		dp_startup_prime_pump();
	}

	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK );

	dp_regwrite(0x35, param2);
	dp_regwrite(0x36, param1);
	dp_regwrite(0x37, command);

	// Wait for the DSP to read the command
	wait_for_core_read();
}

/****************************************************************
Routine : dp_modem_command_long
Description : Send a command to the modem.
Parameters in : command	-	the command to be executed
		param1	-	the first parameter for the command
		param2	-	the second parameter for the command
		param3	-	the third parameter for the command
		param4	-	the fourth parameter for the command
*****************************************************************/
non_banked void dp_modem_command_long(byte command, byte param1,
									  byte param2,byte param3, byte param4)
{
	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK );

	dp_regwrite ( 0x33, param4 );
	dp_regwrite ( 0x34, param3 );
	dp_modem_command(command, param1, param2);
}

/****************************************************************
Routine : dp_apollo_command
Description : Send a command to the modem.
Parameters in : command	-	the command to be executed, register 0x37
		p1	-	writes to register 0x36
		p2	-	writes to register 0x35
		p3	-	writes to register 0x34
		p4	-	writes to register 0x33
		p5	-	writes to register 0x32
		p6	-	writes to register 0x31
		p7	-	writes to register 0x30
*****************************************************************/
non_banked void dp_apollo_command(byte command, byte p1, byte p2, byte p3,
								  byte p4, byte p5, byte p6, byte p7)
{
	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite ( 0x30, p7 );
	dp_regwrite ( 0x31, p6 );
	dp_regwrite ( 0x32, p5 );
	dp_modem_command_long(command, p1, p2, p3, p4);
}

/****************************************************************
Routine : dp_write_dsp_ram
Description :
	Write a word 'value' to DSP RAM location 'loc'
*****************************************************************/
non_banked void dp_write_dsp_ram(word loc, word value)
{
	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite(0x32, (byte) value );
	dp_regwrite(0x33, (byte) (value >> 8) );
	dp_regwrite(0x34, (byte) loc );
	dp_regwrite(0x35, (byte) (loc >> 8) );
	dp_regwrite(0x37, 0x01);
	wait_for_core_read();
}

/****************************************************************
Routine : dp_read_dsp_ram
Description :
	Read a word from DSP RAM location 'loc'.

	A failure here usually means either the DSP is dead
	or not hooked up correctly.
*****************************************************************/
non_banked word dp_read_dsp_ram(word loc)
{
	G(dp_byte_f) = 0;

	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite ( 0x34, (byte) loc );
	dp_regwrite ( 0x35, (byte) (loc >> 8) );
	dp_regwrite ( 0x37, 0x04 );
	G(dp_cmd_timer) = x_current_time();

	// wait for interrupt from DSP - response code = 0x01
	while ( ( G(dp_byte_f) == 0 ) &&
			( x_elapsed_time (G(dp_cmd_timer)) <= MS200 ) )
	{
		DP_CHKDSP();
	}

	if (G(dp_byte_f) != 0x01)	// if command failed
	{
#if !defined(MODEM_Z80)
		if ( x_elapsed_time (G(dp_cmd_timer)) > MS200 )
		{
			x_debug_msg("DP - Timed out in dp_read_dsp_ram()");
		}
#endif
#if defined(Z80_DEBUG_PRINT) || !defined(MODEM_Z80)
		x_debug_msg("dp_read_dsp_ram() failure.  addr=");
		sendHexWord(loc);
		sendCrLf();
		DP_DELETE_TASK();
#endif
#if defined(WIN32)
		{
			extern byte dpFailure, winFailure;
			winFailure = dpFailure = 1;
		}
#endif
		DP_CLR_CORE_INTS( 0xff );
		G(dp_byte_e) = 0;
		G(dp_byte_d) = 0;
	}

	return (word) ((((word)G(dp_byte_e)) << 8 ) | G(dp_byte_d));
}

#if defined(KORTEX)
/****************************************************************
Routine : dp_regandor
	Modify BAMIL Register
		And with and mask then
		Or with or mask
*****************************************************************/
non_banked void dp_regandor ( byte reg, byte and_mask, byte or_mask )
{
	byte tmp;

	tmp = dp_regread ( reg );
	tmp = tmp & and_mask;
	tmp = tmp | or_mask;
	dp_regwrite ( reg, tmp );
}
#endif // KORTEX

/****************************************************************
Routine : dp_dsp_int_regread
This command is used to read the internal dsp register
and the only parameter tells which DSP register to read
and the codes are
	0 - mwait
	1 - ioc
	2 - pioc
	3 - inc
	4 - pllc
	5 - powerc
	6 - spkr
*****************************************************************/
non_banked word	dp_dsp_int_regread ( byte reg )
{
	G(dp_byte_f) = 0;
	dp_regwrite(0x36,reg);
	dp_regwrite(0x37,0x30);
	G(dp_cmd_timer) = x_current_time();

	/* wait for interrupt from DSP - response code = 0xA */
	while ( ( G(dp_byte_f) == 0 ) &&
			( x_elapsed_time (G(dp_cmd_timer)) <= MS200 ) )
	{
		DP_CHKDSP();
	}

	if ( G(dp_byte_f) != 0xa )	// if command failed
	{
		x_debug_msg ( "DP - dp_dsp_int_regread() failure" );
		DP_CLR_CORE_INTS( 0xff );
		DP_DELETE_TASK();
		G(dp_byte_e) = 0;
		G(dp_byte_d) = 0;
	}

	return (word) ((((word)G(dp_byte_e)) << 8 ) | G(dp_byte_d));
}

/****************************************************************
Routine : dp_dsp_int_regwrite
This command is used to write the internal DSP register
The first parameter tells which DSP register to read
and the codes are:
	0 - mwait
	1 - ioc
	2 - pioc
	3 - inc
	4 - pllc
	5 - powerc
	6 - spkr
and the second parameter is value to write in the DSP register
*****************************************************************/
non_banked void dp_dsp_int_regwrite ( byte reg, word value )
{
	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite ( 0x34, (byte) value );
	dp_regwrite ( 0x35, (byte) (value >> 8) );
	dp_regwrite(0x36,reg);
	dp_regwrite(0x37,0x31);

	wait_for_core_read();
}
