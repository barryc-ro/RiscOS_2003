/*name and version number:@(#)dpdspinv.c	1.33*/
/*date of get: 		  09/06/00 16:59:01*/
/*date of delta:	  03/23/00 16:50:18*/
/****************************************************************
File :  dpdspinv.c
Description :
	Venus DSP download for k56

Procedures Contained :

Revision History :
	Initials    Date        Change
		MAH		9/24/96			created
*****************************************************************/

//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"

#include "dpglob.h"
#include "z80glob.h"
#include "z80flash.h"

#ifdef CS_DEBUG
# include "dpdspinv.h"
#endif
#include "allglobs.h"


#if defined(K56FLEX)
# if defined(VENUS_AT_CS) || defined(CS_MODEM)
#  if defined(CS_MODEM)
#   include "cs56vwkd.h"
#  else
#   include "dp56vwkd.h"
#  endif //CS_MODEM
# else
#  include "dp56vwk0.h"
# endif

/****************************************************************
Routine : dp_download_K56VenWk()
Description : 
	Download K56FLEX "venus workaround" into DPRAM
*****************************************************************/
void dp_download_K56VenWk( void )
{
	#if defined(NEW_QMP_AUX_INTFC)
	dp_modem_idle_cmd();
	#endif

	DOWNLOAD_DSP( wK56VenWk0 ) ;
	dp_modem_command_long ( PDM, ASYNC_MARK, 0x01, 0x87, 0 ) ;
}
#endif // K56FLEX

/****************************************************************
Routine : dp_write_dsp_block
Description : Write a block of data to dsp ram
			block example :
			{ loc, value,
			  loc, value }
			bp  = pointer to block
			len = length of block
*****************************************************************/
void dp_write_dsp_block ( const word *bp, word len )
{
	word i, j ;

	do {
		i = *bp++ ; 
		j = *bp++ ;
		dp_write_dsp_ram ( i, j ) ;
	} while ( --len ) ;
}

#if !defined(CS_4)
// (CS_4 has its own version of this using the AUX processor)
/****************************************************************
Routine : dp_write_dsp_array
Description : Write to continous array of data to dsp ram
			array example :
			{ value,
			  value }
			loc = starting location
			bp  = pointer to array
			len = length of array
*****************************************************************/
void dp_write_dsp_array ( word loc, const word *bp, byte len )
{
	do {
		dp_write_dsp_ram ( loc++, *bp++ ) ;
	} while ( --len ) ;

	DP_WITHIN_WRITE_RAM(0);
}
#endif // !CS_4

#if defined(COMPRESS_TABLES) && defined(MODEM_Z80)
/****************************************************************
Routine : dp_download_dsp
Description : download dsp code by using dsp download command
		through mailbox - 6 bytes at a time.  This is for
		uncompressed data.
*****************************************************************/
void dp_download_dsp ( const byte *DspFilePtr, word wSize )
{
	byte *bPtr = (byte *) DspFilePtr ;
	word wCntr ;
	byte i, k, tmp_rd7 ;

	tmp_rd7 = G(dp_bamil_rd7) ;

	G(dp_bamil_rd7) = 0xff ;
	dp_regwrite ( 0xd8, 0xff ) ;	// clear all interrupts on camil
	dp_regwrite ( 0xd7, 0xff ) ;	// disable all interrupts on camil

	// disable parallel data mode
	dp_modem_command_long ( PDM, 0, 0, 0, 0 ) ;
	dp_write_dsp_ram ( 0x39, 0x0 ) ;		// clear fax options word
	
	while (wSize)
	{
		wCntr = ((DspFileHdr *)bPtr)->wFileSize ;
		wSize -= (wCntr+3) ;
		// copy address, length and checksum.
		dp_regwrite ( 0x30, 0x01 ) ; // for external ram download set to 1
		for (i = 0; i < 6 ; i++ )
		{	
			dp_regwrite ( (byte)(i+0x31), *bPtr++ ) ;
		}
		dp_regwrite ( 0xd8, 0x18 ); // clear core read/write bank bit - CRBNKI
		dp_regwrite ( 0x37, 0x1a ); // initial program download.
		wait_for_core_read () ;

		while ( wCntr )
		{
			if ( wCntr >= 3 )
			{
				k = 6 ;
				wCntr -= 3 ;
			}
			else
			{
				k = (byte)(2*wCntr) ;
				wCntr = 0 ;
			}
		
			// copy 6 bytes of data
			for (i = 0; i < k ; i++ )
			{
				dp_regwrite ( (byte)(0x30+i), *bPtr++ ) ;
			}
			dp_regwrite ( 0xd8, 0x18 ) ; // clear core read/write bank bit - CRBNKI
			if ( wCntr )
			{
				dp_regwrite ( 0x37, (byte)(0xc0|k) ) ;
			}
			else
			{
				dp_regwrite ( 0x37, (byte)(0xc8|k) ) ;//end of section
			}
			wait_for_core_read () ;
		}
	}

	dp_regwrite(0xb7, 0xff); // clear interrupt NCWTB
	dp_regwrite ( 0xd8, 0xff ) ;	// clear all interrupts on camil

	// enable the dsp interrupts
	G(dp_bamil_rd7) = tmp_rd7 ;
	dp_regwrite ( 0xd7, G(dp_bamil_rd7) ) ;

	// set ioc back to correct value for venus
	DP_WRITE_IOC();
	DP_WITHIN_WRITE_RAM(0);
}

#include "cplut.h"

sfr ramlbr_port=0xe7;

extern non_banked word dp_getROMwd1(long *srcLong);
extern non_banked word dp_getROMwd( byte, byte * ) ;
extern non_banked void dp_putRAMwd( byte, byte *, word ) ;
extern non_banked word dp_getRAMwd( byte, byte * ) ;

extern short decode_word_long(word *ptr);
extern non_banked short decode_word_l2(word *ptr, byte n);
extern non_banked void dp_putRAMwds(byte len, byte dstBank,
								   byte *dstPtr, byte *dPtr);

word cp_flag;
short cp_cur, cp_next;
byte cplutHigh;
char cp_zero_zone, cp_cur_flag_ctr;

long pcp_pcnt, pcp_pflag, pcp_pcode;

/****************************************************************
Routine : decode_word_long()
Description :
	Decode the next word of the compressed DSP code.
*****************************************************************/
short decode_word_long(word *ptr)
{
	if ((cp_cur--) <= cp_next)
	{
		cp_next = dp_getROMwd1( &pcp_pcnt ) ;
		cp_zero_zone = (!cp_zero_zone);
	}
	if (cp_cur < 0)
		return(0);

	if (cp_zero_zone)
	{
		*ptr = 0;		// zero's are treated as a special case
	}
	else
	{
		if (!cp_cur_flag_ctr)
		{
			cp_cur_flag_ctr = 16;
			cp_flag = dp_getROMwd1( &pcp_pflag ) ;
		}
		cp_cur_flag_ctr--;
		if (cp_flag&0x1)
		{
//			byte index = (byte)dp_getROMwd1( pcp_pcode );
//			*ptr = dp_getROMwd(cplutHigh, (byte *)(cplut+index));
//			pcp_pcode +=1;

			// dp_getROMcplut() is an optimized version of the
			// commented out lines above.  (dp56kasm.asm file).
			extern non_banked word dp_getROMcplut(void);
			*ptr = dp_getROMcplut();
		}
		else
		{
			*ptr = dp_getROMwd1( &pcp_pcode );
		}
			
		cp_flag >>=1;
	}

	// sendHexWord(*ptr);

	return(1);
}

/****************************************************************
Routine : init_ptrs_long()
Description :
	Initialize the pointers to begin the decompression
	of the DSP code.
*****************************************************************/
void init_ptrs_long(long in)
{
  pcp_pcnt = in;
  cp_cur = dp_getROMwd( pcp_pcnt>>16 , (byte *)pcp_pcnt ) ; pcp_pcnt +=2;   
  cp_next = dp_getROMwd( pcp_pcnt>>16 , (byte *)pcp_pcnt ) ; pcp_pcnt +=2;   

  while (dp_getROMwd( in >>16 , (byte *)in ))
	  in +=2;
  in +=2;
  pcp_pflag = in+2;

  pcp_pcode = (in + 2 + 2 * dp_getROMwd( in >>16 , (byte *)in ));

  if (cp_cur & 0x8000)
  {
	  cp_cur = cp_cur & 0x7FFF;
	  cp_zero_zone = 1;
  }
  else
	  cp_zero_zone = 0;
  cp_cur_flag_ctr = 0;

  // this calculation is done once here so it doesn't
  // have to be done every time in decode_word_long()
  cplutHigh = (byte)(address_24_of(cplut) >> 16);
}

/****************************************************************
Routine : dp_download_cp_dsp_long
Description : decompress and download DSP code
	into dual port ram.
*****************************************************************/
void dp_download_cp_dsp_long(long addr24)
{
	word bPtrBuf[3];
	byte *bPtr ;
	word wCntr ;
	byte i, k, tmp_rd7 ;

	tmp_rd7 = G(dp_bamil_rd7) ;

	G(dp_bamil_rd7) = 0xff ;
	dp_regwrite ( 0xd8, 0xff ) ;	// clear all interrupts on camil
	dp_regwrite ( 0xd7, 0xff ) ;	// disable all interrupts on camil

	// disable parallel data mode
	dp_modem_command_long ( PDM, 0, 0, 0, 0 ) ;
	dp_write_dsp_ram ( 0x39, 0x0 ) ;		// clear fax options word

	init_ptrs_long(addr24);
	
	while (decode_word_long(&bPtrBuf[0]) &&
		   decode_word_long(&bPtrBuf[1]) &&
		   decode_word_long(&bPtrBuf[2]))
	{
		bPtr = (byte *)bPtrBuf ;
		wCntr = ((DspFileHdr *)bPtr)->wFileSize ;
		
		// copy address, length and checksum.
		dp_regwrite ( 0x30, 0x01 ) ; // for external ram download set to 1
		for (i = 0; i < 6 ; i++ )
		{	
			dp_regwrite ( (byte)(i+0x31), *bPtr++ ) ;
		}
		dp_regwrite ( 0xd8, 0x18 );	// clear core read/write bank bit - CRBNKI
		dp_regwrite ( 0x37, 0x1a ); // initial program download.
		wait_for_core_read () ;

		while ( wCntr )
		{
			if ( wCntr >= 3 )
			{
				k = 6 ;
				wCntr -= 3 ;
			}
			else
			{
				k = (byte)(2*wCntr) ;
				wCntr = 0 ;
			}
		
			bPtr = (byte *)bPtrBuf ;
			for (i = 0; i < (k>>1) ; i++ )
				decode_word_long(&bPtrBuf[i]);

			// copy 6 bytes of data
			for (i = 0; i < k ; i++ )
			{
				dp_regwrite ( (byte)(0x30+i), *bPtr++ ) ;
			}
			dp_regwrite(0xd8, 0x18); // clear core read/write bank bit - CRBNKI
			if ( wCntr )
			{
				dp_regwrite ( 0x37, (byte)(0xc0|k) ) ;
			}
			else
			{
				dp_regwrite ( 0x37, (byte)(0xc8|k) ) ;//end of section
			}
			wait_for_core_read () ;
		}
	}

	dp_regwrite ( 0xb7, 0xff ) ; // clear interrupt NCWTB
	dp_regwrite ( 0xd8, 0xff ) ;	// clear all interrupts on camil

	// enable the dsp interrupts
	G(dp_bamil_rd7) = tmp_rd7 ;
	dp_regwrite ( 0xd7, G(dp_bamil_rd7) ) ;

	// set ioc back to correct value for venus
	DP_WRITE_IOC();
	DP_WITHIN_WRITE_RAM(0);
}

/****************************************************************
Routine : dp_download_cp_dsp_slow
Description : decompress and download DSP code
	into dual port RAM.  This function uses write_ram commands
	so that we don't interfere with the data pump
*****************************************************************/
void dp_download_cp_dsp_slow(long addr24)
{
	byte *bPtr;
	word wCntr, wAdr, dat, bPtrBuf[3];

	init_ptrs_long(addr24);
	
	while (decode_word_long(&bPtrBuf[0]) &&
		   decode_word_long(&bPtrBuf[1]) &&
		   decode_word_long(&bPtrBuf[2]))
	{
		bPtr = (byte *)bPtrBuf;
		wCntr = ((DspFileHdr *)bPtr)->wFileSize;		// size
		wAdr = ((DspFileHdr *)bPtr)->wPhAddr;			// address
		
		while (wCntr--)
		{
			decode_word_long(&dat);
			dp_write_dsp_ram(wAdr++, dat);
		}
	}
}

/****************************************************************
Routine : dp_download_dspk56_long - (decompression version)
Description : 
		Decompress the DSP code at 'srcadr' and copy it into
		RAM bank dstBank.  A verification of the copy is done
		if the global variable G(dp_downloadedEROM) is not set
		and if debug printing is enabled.
*****************************************************************/
void dp_download_dspk56_long ( long srcadr, byte dstBank )
{
	byte currlb ;
	word data, data2 ;
	word datBuf[32], *dbptr;
	byte *dstPtr, len;
	word dl_timer = x_current_time();

	//---------------------------------------------
	// save RAM lower boundary register
	//---------------------------------------------
	currlb = ramlbr_port ;

#if defined(PCMCIA_MODEM) && !defined(ROM_FLASH)
	//------------------------------------------
	// For non-boot block PC Card,
	// adjust the RAMLBR
	// to gain access to "hidden" DSP RAM
	//------------------------------------------
	ramlbr_port = 0xf0 ;
#endif

	//------------------------------------------
	// set dest starting offset
	//------------------------------------------
    dstPtr = (byte *)BANKOFFSET ;

	init_ptrs_long(srcadr);

	while ( len = decode_word_l2(&datBuf[0], 32) )	   // get decompressed data
	{
		//----------------------------------
		// place words in DSP RAM
		//----------------------------------
		dp_putRAMwds(len, dstBank, dstPtr, (byte *) &datBuf[0]);
		dstPtr += (len * 2);
	}

#if defined( Z80_DEBUG_PRINT )
	if (!G(dp_downloadedEROM))
	{
		// For debugging, check that everything was written correctly.
		init_ptrs_long(srcadr);
		dstPtr = (byte *)BANKOFFSET ;

		while (decode_word_long(&data))  // get decompressed word from far ROM
		{
			//------------------------------------------
			// compare the data 
			//------------------------------------------
			data2 = dp_getRAMwd( dstBank, dstPtr ) ;
			if ( data != data2 )
			{
				x_debug_msg( "DSP EXT RAM download FAILED at adr=" ) ;
				sendHexWord( (word)dstPtr );
				x_debug_msg( "\r\nROM =" ) ; sendHexWord( (word)data );
				x_debug_msg( "\r\nRAM =" ) ; sendHexWord( (word)data2 );
				x_debug_msg( "\r\n" ) ;
				break ;
			}
			dstPtr +=2 ;
		}
	}
	x_debug_msg("dp_download_dspk56_long time=");
	sendHexWord(x_elapsed_time(dl_timer));
	sendCrLf();
#endif // Z80_DEBUG_PRINT
	ramlbr_port = currlb ;
}
#endif  // COMPRESS_TABLES && MODEM_Z80
