/*name and version number:@(#)mnp_ctl.c	1.69*/
/*date of get: 		  12/15/00 10:10:41*/
/*date of delta:	  11/30/00 16:59:01*/
/****************************************************************
File :	mnp_ctl.c
Description :
	Contains functions to build, send, and receive mnp control frames

Procedures Contained :
	mnp_build_lr_frame
	mnp_build_control_frame
	mnp_rx_frame_type
	mnp_tx_control_frame

Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
#include "z80glob.h"
#include "lapm.h"
#include "mnp.h"

#ifdef CS_DEBUG
 #include "mnp_ctl.h"
#endif
#include "allglobs.h"

/****************************************************************
Routine : mnp_build_lr_frame
Description :
	Builds lr frame for mnp link establishment phase
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change                                        
	MB			06/15/93	Initial
*****************************************************************/
non_banked void mnp_build_lr_frame ( void )
{
	LAPM_FRAME *frameptr ;
	byte index_ptr, optimization_byte = 0x0 ;
	
	x_debug_msg("MNP - mnp_build_lr_frame") ;
	frameptr = &LUF;

	frameptr->txstatus = EMPTY ;
	frameptr->len = 0 ;

	frameptr->data[0]  = 20 ;  //header length
	frameptr->data[1] = PDU_LR ;  //pdu type
	frameptr->data[2]  = 2 ;
	frameptr->data[3]  = 1; 
	frameptr->data[4]  = 6; 
	frameptr->data[5]  = 1; 
	frameptr->data[6]  = 0; 
	frameptr->data[7]  = 0; 
	frameptr->data[8]  = 0; 
	frameptr->data[9]  = 0; 
	frameptr->data[10]  = 255; 
	frameptr->data[11]  = 2 ;
	frameptr->data[12] = 1;
	frameptr->data[13] = G(mnp_framing_mode) ;  //mnp_negotiated_class
	frameptr->data[14] = 3; 
	frameptr->data[15] = 1; 
	frameptr->data[16] = G(mnp_k) ;  //k in the spec
	frameptr->data[17] = 4; 
	frameptr->data[18] = 2; 
#if defined(MNP_OFRAMES_BY_REFERENCE)
	frameptr->data[19] = (byte) (G(mnp_max_info_octets) & 0x00ff) ;
	frameptr->data[20] = (byte) ( G(mnp_max_info_octets) >> 8 ) ;
#else
//	frameptr->data[19] = (byte) (G(mnp_max_info_octets) & 0x00ff) ;
//	frameptr->data[20] = (byte) ( G(mnp_max_info_octets) >> 8 ) ;
	// Always negotiate 64 as maximum information field length
	// otherwise, some modems do not work. (011-81-357104600)
	frameptr->data[19] = 64 ;
	frameptr->data[20] = 0 ;
#endif
	index_ptr = 21 ;
	if ( G(mnp_data_opt_flag) == TRUE )
	{
		frameptr->data[0] += 3 ; //increment hdr length
		frameptr->data[index_ptr++] = 8;
		frameptr->data[index_ptr++] = 1; 
		if (G(mnp_stream_opt_flag))
			optimization_byte |= 0x01 ;
		if (G(mnp_fixed_field_opt_flag))
			optimization_byte |= 0x02 ;
		frameptr->data[index_ptr++] = optimization_byte ;
	}
	if ( G(mnp_data_compression) == TRUE )
	{
		frameptr->data[0] += 3 ;
		frameptr->data[index_ptr++] = 9 ;
		frameptr->data[index_ptr++] = 1 ;
		frameptr->data[index_ptr++] = 1 ;
	}
	frameptr->len = (byte) (frameptr->data[0] + 1) ;
	frameptr->txstatus = FULL ;
}

/****************************************************************
Routine : mnp_build_control_frame
Description :
	Builds all mnp control frames (except LR frames)
Parameters in :
	byte pdu - frame type (protocol data unit) to be built
Parameters out :
	none
Revision History :
	Initials	Date		Change                                        
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_build_control_frame ( byte pdu )
{
	LAPM_CONTROL_FRAME *frameptr ;
	
	frameptr = &LCF;

	frameptr->status = EMPTY ;
	frameptr->len = 0 ;
	frameptr->data[1] = pdu ;  //data[1] is always pdu type
	
	switch (pdu)
	{
		case PDU_LA: //loads lapm_control_frame
			//x_debug_msg("Build PDU_LA") ;
			#if defined(Z80_DEBUG_THIS_FILE)
			if ( ! G(mnp_nk) ) x_debug_msg("snd-RNR");
			else sendDumbChar('r'); // x_debug_msg("send-RR");
			#endif
			if (G(mnp_fixed_field_opt_flag))
			{
				frameptr->data[0] = 3 ;
				frameptr->data[2] = (byte) (G(mnp_vr) - 1);
				frameptr->data[3] = G(mnp_nk) ;
			}
			else
			{
				frameptr->data[0] = 7 ;
				frameptr->data[2] = 1 ;
				frameptr->data[3] = 1 ;
				frameptr->data[4] = (byte) (G(mnp_vr) - 1);
				frameptr->data[5] = 2 ;
				frameptr->data[6] = 1 ;
				frameptr->data[7] = G(mnp_nk) ;
			}
			break ;

		case PDU_LD:
			x_debug_msg("MNP - building LD frame") ;
			frameptr->data[0] = 4 ;
			frameptr->data[2] = 1 ;
			frameptr->data[3] = 1 ;
			frameptr->data[4] = G(mnp_disconnect_code) ;
			if (G(mnp_disconnect_code) == 255) //a user disconnect code...
			{
				frameptr->data[5] = 2 ;
				frameptr->data[6] = 1 ;
				frameptr->data[7] = G(mnp_user_disconnect_code) ;
				frameptr->data[0] += 3 ;
			}
			G(mnp_disconnect_code) = 0 ;
			G(mnp_user_disconnect_code) = 0 ;
			break ;
			
		case PDU_LNA:
			x_debug_msg("MNP - building LNA frame") ;
			frameptr->data[0] = 4 ;
			frameptr->data[2] = 1 ;
			frameptr->data[3] = 1 ;
			frameptr->data[4] = (byte) (G(mnp_vra) - 1);
			break ;
			

		case PDU_LN:
			x_debug_msg("MNP - building LN frame") ;
			frameptr->data[0]  = 7 ;
			frameptr->data[2]  = 1 ;
			frameptr->data[3]  = 1; 
			frameptr->data[4]  = G(mnp_vsa) ; 
			frameptr->data[5]  = 2; 
			frameptr->data[6]  = 1; 
			frameptr->data[7]  = G(mnp_attention_type) ;
			break ;
	}
	frameptr->len = (byte) (frameptr->data[0] + 1);
	frameptr->status = FULL ; //finished making control frame
}

/****************************************************************
Routine : mnp_rx_frame_type
Description :
	Identify the type of mnp frame last received
Parameters in :
	none
Parameters out :
	frame type
Revision History :
	Initials	Date		Change                                        
	MB			07/15/93	Initial
*****************************************************************/
non_banked byte mnp_rx_frame_type ( void ) 
{
	MNP_RX_FRAME *frameptr ;
	byte rx_nr, rx_sk, frames_acknowledged, ns_index, i ;
	word len ;		//ttttt
	word count, max_oct1, max_oct2 ;
	word ns, nr ;

#if defined( MODEM_ARM )
	len = 0 ;
#endif

	if ( G(lapm_receive_frame).status == EMPTY )
		return ( EMPTYFRM ) ;
	
	frameptr = &LRF;
	if ( frameptr->data[1] != PDU_LT )
	{
		len = frameptr->len ;
		lapm_clear_rx_frame() ;
	}

	switch ( frameptr->data[1] )
	{
		case PDU_LR:
			x_debug_msg("rx PDU_LR") ;
			count = (word) (frameptr->data[0] - 2);
			i = 3 ;
			while ((count != 0) && ((count & 128) == 0)) 
			{
				switch (frameptr->data[i]) 
				{
	    			case 1 :
	    				if ( (len = frameptr->data[++i]) != 6 )
							return( EMPTYFRM ) ;
					    count = (word) (count - ( len + 2 ));
					    i = (byte) (i + len);
	    				break;

	    			case 2 :
	    				if ( frameptr->data[++i] != 1)
							return( EMPTYFRM ) ;
	    				count -= 3 ;
	    				G(mnp_rx_framing_mode) = frameptr->data[++i] ;
	    				break;

	    			case 3 : // send & receive credits
	    				if ( frameptr->data[++i] != 1 )
							return( EMPTYFRM ) ;
	    				count -= 3 ;
		    			G(mnp_rx_k) = frameptr->data[++i] ;
						#if defined(Z80_DEBUG_THIS_FILE)
						x_debug_msg("mnp - rx send credits=") ;
						sendHexByte(G(mnp_rx_k)); sendCrLf();
						#endif
	    				break;

	    			case 4 : // max data octets
					    if ( frameptr->data[++i] != 2 )
							return( EMPTYFRM ) ;
	    				count -= 4 ;
						max_oct1 = frameptr->data[++i] ;
						max_oct2 = frameptr->data[++i] ;
						G(mnp_rx_max_info_octets) =
								(word) (max_oct1 | (max_oct2 << 4));
						#if defined(Z80_DEBUG_THIS_FILE)
						x_debug_msg("mnp - rx max octets=") ;
						sendHexByte(G(mnp_rx_max_info_octets)); sendCrLf();
						#endif
	    				break;

				    case 8 : // data optimization
	    				if ( frameptr->data[++i] != 1)
							return(EMPTYFRM) ;
	    				count -=3 ;
	    				G(mnp_rx_data_opt_flag) = TRUE ;
							x_debug_msg("mnp - rx stream_opt in lr=") ;
						if ( (frameptr->data[++i] & 0x1) == 0x1 )
						{
							G(mnp_rx_stream_opt_flag) = TRUE ;
							x_debug_msg("TRUE");
						}
						else
						{
							x_debug_msg("FALSE");
							G(mnp_rx_stream_opt_flag) = FALSE ;
						}
						x_debug_msg("mnp - rx fixed_opt in lr=") ;
						if ( (frameptr->data[i] & 0x2) == 0x2 )
						{
							x_debug_msg("TRUE");
							G(mnp_rx_fixed_field_opt_flag) = TRUE ;
						}
						else
						{
							x_debug_msg("FALSE");
							G(mnp_rx_fixed_field_opt_flag) = FALSE ;
						}
						break ;
						
					case 9 : // mnp5 data compression
						if ( frameptr->data[++i] != 1)
							return ( EMPTYFRM ) ;
	    				count -=3 ;
	    				G(mnp_rx_data_compression) = frameptr->data[++i] ;
		    			break;

					default:
	    				count = (word) (count - (frameptr->data[++i] + 2));
		    			i = (byte) (i + frameptr->data[i]);
		    			break ;
				}
				i++ ;
			}
			break ;

		case PDU_LA:
			//x_debug_msg("rx PDU_LA") ;
			if ( (len != 4) && (len != 8) )
			{
				x_debug_msg("mnp - bad LA length") ;
				return ( EMPTYFRM ) ;
			}

			if ( frameptr->data[0] == 3 )//optimized LA frame length
			{
				rx_nr = frameptr->data[2] ;
				rx_sk = frameptr->data[3] ;
				ns_index = 2 ; //nr index from lt frames
			}
			else
			{
				rx_nr = frameptr->data[4] ;
				rx_sk = frameptr->data[7] ;
				ns_index = 4 ; //nr index from lt frames
			}
			
			if ( G(mnp_ns) < G(mnp_last_ack) )
				ns = (word) (G(mnp_ns) + MNP_MOD);
			else
				ns = G(mnp_ns) ;
			if ( rx_nr < G(mnp_last_ack) )
				nr = (word) (rx_nr + MNP_MOD);
			else
				nr = rx_nr ;

			if ( ! ((nr >= G(mnp_last_ack) ) && (nr <= ns)) )
			{
				x_debug_msg("mnp - nr sequence error");
				#if defined(DEBUG_PRINTF)
				printf("nr=%d; ns=%d; lastAck=%d <= N(R)=%d <= V(S)=%d\n",
							nr, ns, G(mnp_last_ack), rx_nr, G(mnp_ns));
				#elif defined(Z80_DEBUG_THIS_FILE)
				x_debug_msg("Ack="); sendDecByte(G(mnp_last_ack));
				x_debug_msg("nr="); sendDecByte(nr);
				x_debug_msg("ns="); sendDecByte(ns);
				sendCrLf();
				#endif
				return ( EMPTYFRM ) ;
			}

			frames_acknowledged = (byte) ( nr - G(mnp_last_ack) ) ;

			G(mnp_last_ack) = (byte) (G(mnp_last_ack) + frames_acknowledged);

			//update send credits 
			if ( rx_sk == 0 )
			{
				x_debug_msg("rcv-RNR");
				G(lapm_remote_busy) = TRUE ;
				G(mnp_sk) = 0 ;
			}
			else
			{
				if ( G(mnp_ns) < rx_nr )
					nr = (word) (G(mnp_ns) + MNP_MOD);
				else
					nr = G(mnp_ns) ;
				G(mnp_sk) = (byte) (rx_sk - (byte) ( nr - rx_nr ));
				G(lapm_remote_busy) = FALSE ;
			}

			while ( frames_acknowledged-- )
			{
      			for (i = 0 ; i < G(mnp_k) ; i++)
					if ( G(lapm_transmit_frame)[i].data[ns_index] == rx_nr )
					{
						G(lapm_transmit_frame)[i].txstatus = EMPTY ;
						G(lapm_transmit_frame)[i].len = 0 ;
						rx_nr-- ;
						G(lapm_retransmit) = 0 ;	// reset retransmit count
						break ;
					}
				lapm_reset_timer() ;
			}
			break ;
			
		case PDU_LT:
			return ( PDU_LT ) ;
			
		case PDU_LD:
			x_debug_msg("rx PDU_LD") ;
			if ( (len != 5) && (len !=8) )
				return ( EMPTYFRM ) ;
			G(mnp_rx_disconnect_code) = frameptr->data[4] ;
			if ( frameptr->data[4] == 255 )
				G(mnp_rx_user_disconnect_code) = frameptr->data[7] ;
			x_debug_msg("mnp - received LD") ;
			break ;
			
		case PDU_LN:
			if ( len != 8 )
				return ( EMPTYFRM ) ; 
			x_debug_msg("MNP - [correct] LN frame received") ;
			G(mnp_vra) = (byte) (frameptr->data[4] + 1);
			mnp_tx_control_frame(PDU_LNA) ;
			x_debug_msg("mnp - sent LNA") ;
			UART_dce_break_on() ;

			//we don't check for an in-sequence ln frame...
			if ( frameptr->data[7] == 1 )
			{
				/* D&E break, reset */
				x_debug_msg("MNP4 - D&E break") ;
				G(mnp_vs) = 1 ; //number of next lt frame to be built
				G(mnp_ns) = 0 ; //number of last lt frame that was sent
				G(mnp_vr) = 1 ;//number of last received in-sequence lt frame
				G(mnp_last_ack) = 0 ;
				G(mnp_rk) = G(mnp_k) ; 
				G(mnp_nk) = G(mnp_k) ;
				G(mnp_sk) = G(mnp_k) ;
				lapm_init_variables () ;
#ifndef NO_MNP5
				mnp5_ad_frq_init () ;
#endif
			}
			break ;
			
		case PDU_LNA:
			x_debug_msg("rx PDU_LNA") ;
			if ( len != 5 )
				return ( EMPTYFRM ) ;
			if ( frameptr->data[4] == G(mnp_vsa) )
				G(mnp_vsa)++ ;
			x_debug_msg("mnp - received LNA") ;
			break ;
			
		default:
			x_debug_msg("mnp - received ILGFRM") ;
			//return ( ILGFRM ) ;
			return ( EMPTYFRM ) ;
	}
	return ( frameptr->data[1] ) ; //return pdu type
}

/****************************************************************
Routine : mnp_tx_control_frame
Description :
	Checks for byte-mode vs bit-mode mnp, and transmits a control frame
Parameters in :
	byte pdu - frame type (protocol data unit) to be transmitted
Parameters out :
	none
Revision History :
	Initials	Date		Change                                        
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_tx_control_frame ( byte pdu )
{
	mnp_build_control_frame ( pdu ) ;
	if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
		mnp_tx_hdlc_frame() ;
	else
		mnp_tx_octet_frame() ;
}
