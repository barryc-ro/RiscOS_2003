/*name and version number:@(#)atradish.c	1.34*/
/*date of get: 		  09/06/00 16:58:47*/
/*date of delta:	  01/05/99 15:04:00*/

//*****************************************************************************
//  File : atradish.c
//  Description :
//	Contains all the parse and command routines for the RADISH
//	commands ( AT-Sxx ).
//
//  Functions Contained :
//      void AtRadish(void)
//      char GetRadishCommand(void)
//      byte StrCmp(char *s, char *d)
//      void PhoneMuteControl(void)
//      void InitVoiceViewParameters(void)
//      void InitVvParam(void)
//      void InitVvCapabilities(void)
//      void SetQueryResponseControl(void)
//      void SetCapabilitiesData(void)
//      void DisplayCapabilitiesInfo(void)
//      byte InsertCapabilitiesInfo(void)
//      void EraseCapabilitiesInfo(void)
//      void GetErrorReport(void)
//      void SetTransmissionSpeed(void)
//      void SetSequenceResponseControl(void)
//      void SetTransactionToneControl(void)
//      void DisableSwitchhookStatus(void)
//      void SetRejectOverflowMessages(void)
//      void SetNotificationTimer(void)
//      void SetDate(void)
//      void SetTime(void)
//
//
//
//  Revision History :
//	Initials	Date		Change
//	  Eli T.	09/30/94	Initial
//*****************************************************************************

#include "llglob_d.h"           // contains the RADISH definition
#ifdef RADISH

#include "atglob.h"
#include "radish.h"             // contain various RADISH definitions.
#include "allglobs.h"

//-----------------------------------------------------------------------------
// Private function prototypes
//-----------------------------------------------------------------------------
void AtRadish(void);
byte GetRadishCommand(void);
byte StrCmp(char *s, char *d);
void PhoneMuteControl(void);
void InitVoiceViewParameters(void);
void SetQueryResponseControl(void);
void SetCapabilitiesData(void);
void DisplayCapabilitiesInfo(void);
byte InsertCapabilitiesInfo(void);
void EraseCapabilitiesInfo(void);
void GetErrorReport(void);
void SetTransmissionSpeed(void);
void SetSequenceResponseControl(void);
//void SetTransactionToneControl(void);
void DisableSwitchhookStatus(void);

#ifdef RADISH_MESSAGE
//-----------------------------------------------------------------------------
// These 4 functions are associated with with the 'message storage system'
// option, which is not supported yet. They'll be commented out for now.
//-----------------------------------------------------------------------------
 void SetRejectOverflowMessages(void);
 void SetNotificationTimer(void);
 void SetDate(void);
 void SetTime(void);
#endif


//-----------------------------------------------------------------------------
//  private data
//-----------------------------------------------------------------------------
byte *ScdDataPtr;                        // pointer to end of data in ScdData buf.
byte VoiceViewModeSet;                   // flag to determine whether VV has
byte ModemModeSet;
byte FaxModeSet;
//byte ProprietaryModeSet;
                                         // been set in the CAP data buffer.
const RADISH_CMD cmd_str[NUM_RADISH_CMDS]=
{
   {"VV", AT_SVV},
   {"AC", AT_SAC},
   {"IP", AT_SIP},
   {"IC", AT_SIC},
   {"SQ", AT_SSQ},
   {"DA", AT_SDA},
   {"FX", AT_SFX},
   {"MT", AT_SMT},
   {"QR", AT_SQR},
   {"CD", AT_SCD},
   {"ER", AT_SER},
   {"SP", AT_SSP},
   {"SR", AT_SSR},
#ifdef RADISH_MESSAGE  
   {"OR", AT_SOR},
   {"NO", AT_SNO},
   {"DT", AT_SDT},
   {"TM", AT_STM},
   {"RM", AT_SRM},
   {"EM", AT_SEM},
#endif
//   {"TT", AT_STT},
   {"DS", AT_SDS}
};

const byte ScdDefault[SCD_DEFAULT_LEN] = SCD_DEFAULT;

//-----------------------------------------------------------------------------
// Public function prototypes
//-----------------------------------------------------------------------------
void InitVvParam(void);
void InitVvCapabilities(void);
void AtRadishTask(RADISH_TASK task, byte *resp);


//-----------------------------------------------------------------------------
// public variables
//-----------------------------------------------------------------------------
RADISH_OPTIONS RadishOptions;
byte at_ssq_rcvd;
byte at_svv_rcvd;
byte at_sda_rcvd;
byte at_sfx_rcvd;
//extern byte PhoneOffHook(void);
byte vv_data_mode_options;
#ifdef RADISH_TEST
extern word dp_second_count;
#endif
//*****************************************************************************
// Routine : AtRadishTask
// Description :
//          AT tasks
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void AtRadishTask(RADISH_TASK task, byte *resp)
{
    byte str[11]={0};

    switch ( task )
    {
       case REPORT_RADISH_EVENT:
               switch ( *resp)
               {
                 case EV_SSV:
                    x_strcpy(str,"-SSV\r\n");
                    break;

                 case EV_SMD:
                    x_strcpy(str,"-SMD\r\n");
                    break;

                 case EV_SFA:
                    x_strcpy(str,"-SFA\r\n");
                    break;

                 case EV_SRA:
                    x_strcpy(str,"-SRA\r\n");
                    break;

                 case EV_SRQ:
                    x_strcpy(str,"-SRQ\r\n");
                    break;

                 case EV_SRC:
                    x_strcpy(str,"-SRC\r\n");
                    break;

                 case EV_STO:
#ifdef RADISH_TEST
                    x_strcpy(str,"-STO");
			if(dp_second_count < 0x100)
			{
				str[4] = '0';
				str[5] = '0';
				at_itoa(dp_second_count,&str[6],HEX);

			}
			else
				at_itoa(dp_second_count,&str[4],HEX);
			x_strcpy(&str[8],"\r\n");
#else
                    x_strcpy(str,"-STO\r\n");
#endif
                    break;

                 case EV_SVM:
                    x_strcpy(str,"-SVM\r\n");
                    break;

                 case EV_CAN:
			str[0]=DLE;
			str[1]=CAN;
			str[2]=NULL;
			break;

                 case EV_EOT:
			str[0]=DLE;
			str[1]=EOT;
			str[2]=NULL;
			break;

               }
               x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
               break;

       case RADISH_AT_CONNECT:
               x_debug_msg("AT - received CONNECT");
               at_result_code = CONNECT;
               at_output_msg( NULL, 0 );
               break;

       case RADISH_ERROR:
               x_debug_msg("AT - received radish error");
#ifdef DEBUGGING
		sprintf(szBuffer,"ERROR=%x",RadishOptions.ErrorReport);
		x_debug_msg(szBuffer);		
#endif
               x_send_mail (RADISH_DP_TASK,DP_TASK,0,RADISH_RETURN_TO_VOICE);
               at_result_code = ERROR;
               at_output_msg( NULL, 0 );
               break;
    } 

}




//*****************************************************************************
// Routine : AtRadish
// Description :
//	This routine parses the "at-s" commands
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void AtRadish(void)
{
  byte state;
  byte onhook_state;
  x_send_mail(RADISH_DP_TASK,DP_TASK, &state, RADISH_ACTIVE);
  if (state == FALSE)
  {
	at_cmd_err_ret();
	return;
  }
  state = FALSE;
  x_send_mail(RADISH_DP_TASK,DP_TASK, &onhook_state, RADISH_ONHOOK);
  switch(GetRadishCommand())
  {

    case AT_SVV:
       if ( (onhook_state == FALSE) || (!RadishOptions.SwitchhookStatus) )// && VoiceViewModeSet)
       {
         x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_INIT_VARS);
         at_svv_rcvd = TRUE;
         x_modem_originate = TRUE;
         x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_START_TONE);
       }
       // set ErrorReport var and return
       else
       {
         RadishOptions.ErrorReport = CANT_INIT_DMODE_SWITCH_ONHOOK;
				//	(!VoiceViewModeSet) ?
                                //      CANT_INIT_DMODE_CAP_INACTIVE :
                                //      CANT_INIT_DMODE_SWITCH_ONHOOK;
         at_cmd_err_ret();
       }
       return;

    case AT_SAC:
       x_send_mail(RADISH_IO_TASK,IO_TASK, &state, RADISH_IS_WAITING_FOR_ATSAC);
       if (state)
       {
           x_send_mail(RADISH_IO_TASK,IO_TASK, 0,RADISH_ATSAC_RCVD);
           x_modem_originate = FALSE;
       }
       else
       {
         RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
         at_cmd_err_ret();
       }
       return;

    case AT_SIP:
       InitVoiceViewParameters();
       break;

    case AT_SIC:
       InitVvCapabilities();
       break;

    case AT_SSQ:
       if ( (onhook_state == FALSE) || (!RadishOptions.SwitchhookStatus) )
       {
         x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_INIT_VARS);
         at_ssq_rcvd = TRUE;
         x_modem_originate = TRUE;
         x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_START_TONE);
       }
       else
       {
         RadishOptions.ErrorReport = CANT_INIT_DMODE_SWITCH_ONHOOK;
         at_cmd_err_ret();
       }
       return;

    case AT_SMT:
       PhoneMuteControl();
       break;

    case AT_SQR:
       SetQueryResponseControl();
       break;

    case AT_SCD:
       SetCapabilitiesData();
       break;

    case AT_SER:
       GetErrorReport();
       break;

    case AT_SSP:
       SetTransmissionSpeed();
       break;

    case AT_SSR:
       SetSequenceResponseControl();
       break;

//    case AT_STT:
//       SetTransactionToneControl();
//       break;

    case AT_SDS:
       DisableSwitchhookStatus();
       break;

#ifdef RADISH_MESSAGE
   //--------------------------------------------------------------------------
   // these 6 commands are associated with the 'message storage system' option
   // which is not supported yet.
   //--------------------------------------------------------------------------
    case AT_SOR:
       SetRejectOverflowMessages();
       break;

    case AT_SNO:
       SetNotificationTimer();
       break;

    case AT_SDT:
       SetDate();
       break;

    case AT_STM:
       SetTime();
       break;

    case AT_SRM:  // retrieveMessage();
    case AT_SEM:  // eraseMessage();
#endif

   //--------------------------------------------------------------------------
   // these 2 commands are associated with 'Start Modem Data Mode (AT-SDA) and
   // 'Start Fax Data Mode (AT-SFX) which are not supported yet.
   //--------------------------------------------------------------------------
    case AT_SFX:
        //the variable "state" is set to FALSE at beginning of function to save 
        //space
	state = AT_SFX;
	//Beware!! Falling through!!

    case AT_SDA:
       if ( (onhook_state == FALSE) || (!RadishOptions.SwitchhookStatus) ) //&& VoiceViewModeSet)
       {
		x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_INIT_VARS);
		if( state == AT_SFX)
		{
			if(FaxModeSet)
			{
				at_sfx_rcvd = TRUE;
			}
			else
			{
				RadishOptions.ErrorReport = CANT_INIT_DMODE_CAP_INACTIVE ;
				at_cmd_err_ret();
				return;
			}
		}
		else
		{
			if(ModemModeSet)
			{
				at_sda_rcvd = TRUE;
			}
			else
			{
				RadishOptions.ErrorReport = CANT_INIT_DMODE_CAP_INACTIVE ;
				at_cmd_err_ret();
				return;
			}
		}
		x_modem_originate = TRUE;
		x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_START_TONE);
       }
       // set ErrorReport var and return
       else
       {
		RadishOptions.ErrorReport = CANT_INIT_DMODE_SWITCH_ONHOOK;
					//(!VoiceViewModeSet) ?
                                      //CANT_INIT_DMODE_CAP_INACTIVE :
                                      //CANT_INIT_DMODE_SWITCH_ONHOOK;
         at_cmd_err_ret();
       }
       return;


    default:
       at_cmd_err_ret() ;
       return;

  }

  atparse_cmd();

}


//*****************************************************************************
// Routine : GetRadishCommand
// Description :
//	This routine identifies the RADISH command and return the
//      corresponding value. If there is no match it returns -1.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
byte GetRadishCommand(void)
{
  byte cmd[3];                         // temp buffer for radish command.
  byte i;                              // temp variable.

  for (i=0; i < 2; ++i)                // copy radish command to buffer
    cmd[i]= *at_cmd_ptr++;
  cmd[2] = 0;                          // terminate string.


  for (i=0; i < NUM_RADISH_CMDS; ++i)
    if (StrCmp(cmd,cmd_str[i].verbose))
        return cmd_str[i].numeric;

  return (NO_MATCH);                     // no match
}



//*****************************************************************************
// Routine : StrCmp
// Description :
//	This routine compares  2 strings.
//      It returns 1 if strings are equal and 0 otherwise.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
byte StrCmp(char *s, char *d)
{

  for ( ; *s == *d; s++, d++ )
    if( *s == NULL ) return TRUE;

  return FALSE;
}



//*****************************************************************************
// Routine : PhoneMuteControl
// Description :
//	This routine controls the manual isolating of the local
//      phone from the line.
//
//      AT-SMT0 unmutes the local phone from the line.
//      AT-SMT1 mutes (isolates) the local phone from the line.
//
//      Response to AT-SMT command
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void PhoneMuteControl(void)
{

  switch(*at_cmd_ptr)
  {
     case '2':
     case '3':
     case '4':
     case '5':
     case '6':
     case '7':
     case '8':
     case '9':
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

     case '1':
       at_cmd_ptr++;
	RadishOptions.PhoneMuteControl = 1;
        x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
       break;

     case '0':
       at_cmd_ptr++;

     default:
	RadishOptions.PhoneMuteControl = 0;
        x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
       break;

  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : InitVoiceViewParameters
// Description :
//	This routine sets all the VoiceView specific parameters to
//      their default settings.
//
//      AT-SIP0 reset VoiceView parameters to default.
//      AT-SIP1 same as AT-SIP0 and audit messages  (not supported)
//      AT-SIP2 same as AT-SIP0 and erase message  (not supported)
//
//      Response to AT-SIP command
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void InitVoiceViewParameters(void)
{

  switch(*at_cmd_ptr)
  {
     case '1':
     case '2':
     case '3':
     case '4':
     case '5':
     case '6':
     case '7':
     case '8':
     case '9':
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

     case '0':
       at_cmd_ptr++;

     default:
       InitVvCapabilities();
       InitVvParam();
       break;
  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}


//*****************************************************************************
// Routine : InitVvParam
// Description :
//	This routine sets all the VoiceView (-S) parameters to their
//      default values.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void InitVvParam(void)
{

  RadishOptions.QueryResponseControl = SQR_DEFAULT_VAL;            // SQR
  RadishOptions.ErrorReport = SER_DEFAULT_VAL;                     // SER
  RadishOptions.SequenceResponseControl = SSR_DEFAULT_VAL;         // SSR
//  RadishOptions.TransactionToneControl = STT_DEFAULT_VAL;          // STT
  RadishOptions.SwitchhookStatus = SDS_DEFAULT_VAL;                // SDS
  RadishOptions.TxSpeed.Burst = BURST_SPEED_DEFAULT;               // SSP
  RadishOptions.TxSpeed.Recovery = RECOVERY_SPEED_DEFAULT;
  RadishOptions.TxSpeed.Priority = PRIORITY_SPEED_DEFAULT;

  // for system storage option only
#ifdef RADISH_MESSAGE
  RadishOptions.RejectOverflowMessages = SOR_DEFAULT_VAL;          // SOR
  RadishOptions.NotificationTimer = SNO_DEFAULT_VAL;               // SNO
  RadishOptions.date.year=0;                                       // SDT
  RadishOptions.date.month=0;
  RadishOptions.date.day=0;
  RadishOptions.time.hour=0;                                       // STM
  RadishOptions.time.minute=0;
#endif

}



//*****************************************************************************
// Routine : InitVvCapabilities
// Description :
//	This routine initialize the capabilities data structure to
//      the default settings.
//
//      Response to AT-SIC command
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void InitVvCapabilities(void)
{

  byte len;

  //---------------------------------------------------------------------------
  // set default capabilities.
  // The default capabilities are: a VoiceView Data Mode, no message
  // storage, DTE interface and V.17 14.4/12/9.6/7.2 Kbps transfer rate.
  //---------------------------------------------------------------------------
  x_memcpy(RadishOptions.ScdData,(byte *)ScdDefault,(word)SCD_DEFAULT_LEN);
  len = (byte)SCD_DEFAULT_LEN-1;
  ScdDataPtr=RadishOptions.ScdData + len;

  //--------------------------------------------------------------------
  // initialize the mode indicator types
  //--------------------------------------------------------------------
  ModeInd[VV_V21_300].byte1 = V21_300_MI_B1;
  ModeInd[VV_V21_300].byte2 = V21_300_MI_B2;
  ModeInd[VV_V21_300].supported = TRUE;

  ModeInd[VV_V27TER_4800].byte1 = VV_MI_B1;
  ModeInd[VV_V27TER_4800].byte2 = V27TER_4800_MI_B2;
  ModeInd[VV_V27TER_4800].supported = TRUE;

  ModeInd[VV_V29_9600].byte1 = VV_MI_B1;
  ModeInd[VV_V29_9600].byte2 = V29_9600_MI_B2;
  ModeInd[VV_V29_9600].supported = TRUE;

  ModeInd[VV_V29_4800].byte1 = VV_MI_B1;
  ModeInd[VV_V29_4800].byte2 = V29_4800_MI_B2;
  ModeInd[VV_V29_4800].supported = FALSE;

  ModeInd[VV_V17_7200].byte1 = VV_MI_B1;
  ModeInd[VV_V17_7200].byte2 = V17_7200_MI_B2;
  ModeInd[VV_V17_7200].supported = FALSE;

  ModeInd[VV_V17_9600].byte1 = VV_MI_B1;
  ModeInd[VV_V17_9600].byte2 = V17_9600_MI_B2;
  ModeInd[VV_V17_9600].supported = FALSE;

  ModeInd[VV_V17_12000].byte1 = VV_MI_B1;
  ModeInd[VV_V17_12000].byte2 = V17_12000_MI_B2;
  ModeInd[VV_V17_12000].supported = FALSE;

  ModeInd[VV_V17_14400].byte1 = VV_MI_B1;
  ModeInd[VV_V17_14400].byte2 = V17_14400_MI_B2;
  ModeInd[VV_V17_14400].supported = FALSE;

  ModeInd[VV_MODEM].byte1 = MODEM_DMODE_MI_B1;
  ModeInd[VV_MODEM].byte2 = MODEM_DMODE_MI_B2;
  ModeInd[VV_MODEM].supported = TRUE;

  ModeInd[VV_FAX].byte1 = FAX_DMODE_MI_B1;
  ModeInd[VV_FAX].byte2 = FAX_DMODE_MI_B2;
  ModeInd[VV_FAX].supported = TRUE;


  //---------------------------------------------------------------------------
  // set flag if VoiceView mode is set in the CAP data buf
  //---------------------------------------------------------------------------
  VoiceViewModeSet = ModemModeSet = FaxModeSet = TRUE;
  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : SetQueryResponseControl
// Description :
//	This routine updates the QueryResponseControl variable.
//      Response to AT-SQR command
//
//      AT-SQR=0  While responding to cap. query the modem won't
//                request capabilities info.
//      AT-SQR=1  While responding to cap. query the modem will
//                request cap. info.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetQueryResponseControl(void)
{
  byte ch,error=0;
  byte str[2]={0};


  switch(ch=*at_cmd_ptr++)
  {
    case '?':
       at_itoa(RadishOptions.QueryResponseControl,str,DECIMAL);
       at_output_msg(str,1);
       break;

    case '=':
       switch(ch=*at_cmd_ptr++)
       {

         case '0':
         case '1':
           RadishOptions.QueryResponseControl = ch-'0';
           break;

         case '?':
           at_output_msg(SQR_RANGE,x_strlen(SQR_RANGE));
           break;

         default:
           error = 1;
           break;
       }
       if (!error)
        break;

    default:
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}


//*****************************************************************************
// Routine : SetCapabilitiesData
// Description :
//	This routine updates the capabilities data structure.
//
//      Response to AT-SCD command
//
//      AT-SCD?    display current cap. info.
//      AT-SCD=?   display num of bytes that the parameter can hold
//      AT-SCD=""  erase all cap. info
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetCapabilitiesData(void)
{
  byte str[4];
  byte error=0;

  switch(*at_cmd_ptr++)
  {
     case '?':                              // in case of AT-SCD? command.
       DisplayCapabilitiesInfo();           // display current capabilities.
       break;

     case '=':                              // 'AT-SCD=' command
       switch(*at_cmd_ptr++)
       {
           case '?':                        // in case of AT-SCD=? command.
             at_itoa(SCD_DATA_SIZE-1,str,DECIMAL);
		str[3] = 0;	//null terminate
             at_output_msg(str,x_strlen(str));
             break;

           case '"':                         // AT-SCD=" command insert new
             if (!InsertCapabilitiesInfo())  // capabilities.
             {
               RadishOptions.ErrorReport = INVALID_CAP_INFO;
               at_result_code = ERROR;
               return;
             }
             break;

           default:
             error = TRUE;
             break;
       }
       if (!error)
        break;

     default:
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;
  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : DisplayCapabilitiesInfo
// Description :
//	This routine displays the current capabilities.
//
//      Response to AT-SCD? command
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void DisplayCapabilitiesInfo(void)
{
  byte i,length;
  byte *strPtr;
  byte str[((SCD_DATA_SIZE)*3)+3];


  // initialize the string pointer.
  strPtr=str;

  // get length of SCD capabilities data.
  length=RadishOptions.ScdData[1];

	*strPtr++ = S.ModemOptions.CRChar ;
	*strPtr++ = S.ModemOptions.LFChar ;
 
 // if no CAP data then display '""'
  if (length == 0)
  {
    *strPtr++ = '"';
    *strPtr++ = '"';
    *strPtr = 0;	//Null terminate
  }
  else
  {
	*strPtr++ = '"';
	for (i = 0; i < length; ++i)
	{
		at_itoa(RadishOptions.ScdData[i+2],strPtr,HEX);
		strPtr+=2;

		// add space to all but the last char.
		if ( i < length-1)
			*strPtr++ = SPACE;
	}
	*strPtr++ = '"';
	*strPtr = 0;	//null Terminate
  }
	x_send_mail ( AT_IO_DATA, IO_TASK, str, x_strlen(str) ) ;
//  at_output_msg(str,x_strlen(str));
}



//*****************************************************************************
// Routine : InsertCapabilitiesInfo
// Description :
//	This routine lets the user insert new capabilities
//
// Return value:
//    0 -  if new value already exists or there was no ending quote
//    1 -  otherwise
//
//      Response to AT-SCD="xx xx..." command.
//      xx - any pair of hex numbers.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
byte InsertCapabilitiesInfo(void)
{
  byte ch,format,length;
  word cap,i;
  byte buf[3]={0};
  byte DataBuf[255];
  byte *strPtr;
  length = 0;
  //---------------------------------------------------------------------------
  //     if Null string (AT-SCD="") then erase capabilities info.
  //---------------------------------------------------------------------------
  if(*at_cmd_ptr == '"')
  {
     EraseCapabilitiesInfo();
     at_cmd_ptr++;
     return TRUE;
  }


  //---------------------------------------------------------------------------
  // verify that there is a trailing '"'. Also calculate length of cap data
  //---------------------------------------------------------------------------
  strPtr=at_cmd_ptr;
  while ((ch=*strPtr++) != '"')
  {
    if ( ch == 0 )
         return FALSE;

    // calculate CAP data length ( this is the ASCII length)
    if (ch != SPACE)
    {
      // if not a HEX char than error
      if ( !(((ch >='0') && (ch <='9')) ||
            ((ch >='a') && (ch <='f'))  ||
            ((ch >='A') && (ch <='F'))) )
         return FALSE;

       length++;
    }
  }


  //---------------------------------------------------------------------------
  // length of CAP data must be modulo 2
  //---------------------------------------------------------------------------
  if ( (length % 2) != 0 )
     return FALSE;

  //---------------------------------------------------------------------------
  //    no room for new capabilities
  //---------------------------------------------------------------------------
  length = length >> 1;                                 // CAP data length in int.
  if ( length + RadishOptions.ScdData[1] > SCD_DATA_SIZE-1 )
     return FALSE;


  //---------------------------------------------------------------------------
  //     Insert new capabilities information
  //---------------------------------------------------------------------------
  strPtr=DataBuf;
  while ((ch=*at_cmd_ptr++) != '"' )
  {
      // skip spaces
      if ( ch == SPACE )
             continue;

      // read 2 characters into buf
      buf[0]=ch;
      buf[1]=*at_cmd_ptr++;

      at_atoi(buf,&cap,HEX);           // convert ASCII chars to int.
      *strPtr++ = (byte)cap;           // save this option.

      format = (byte)cap >> 6;         // num of bytes in this element.
      switch ( format )
      {
         case SINGLE_FORMAT:
		x_debug_msg("AT-radish single format");
            switch ( cap & CAP_TYPE )
            {
               // As of now we support defualt data and fax
               case  FAX_MODE:
			if(FaxModeSet)
				return(FALSE);
			FaxModeSet = TRUE;
			ModeInd[VV_FAX].supported = TRUE;
			break;

               case  MODEM_MODE:
			if(ModemModeSet)
				return(FALSE);
			ModemModeSet = TRUE;
			ModeInd[VV_MODEM].supported = TRUE;
			break;

               case  ADSI_SERVER_MODE:
               case  ADSI_CPE_MODE:
		return (FALSE);

               default:
                  // single format can't be VOICE_VIEW_MODE or PROPRIETARY_MODE.
		return (FALSE);
            }
	break;	

         case DOUBLE_FORMAT:

            switch ( cap & CAP_TYPE )
            {
               case  VOICE_VIEW_MODE:
                  if (VoiceViewModeSet)
                     return FALSE;


                  // read next 2 chars into buf
                  buf[0]= *at_cmd_ptr++;
                  buf[1]= *at_cmd_ptr++;
                  buf[2]=0;
                  at_atoi(buf,&cap,HEX);       // convert ASCII chars to int.

                  // check for errors
                  if ( (cap & (MSG_STORAGE_OPT|VV_RESERVED_OPT|V17_14400_OPT|
			V17_12000_OPT|V17_9600_OPT|V17_7200_OPT) ) ||
			( !(cap & DTE_INTRFACE_OPT) ) )
                     return FALSE;
                  VoiceViewModeSet = TRUE;
		ModeInd[VV_V27TER_4800].supported = TRUE;
		ModeInd[VV_V29_9600].supported = TRUE;

                  *strPtr++ = (byte)cap;       // save this option.
                  break;

               case  FAX_MODE:
			if(FaxModeSet)
				return(FALSE);


			buf[0] = *at_cmd_ptr++;
			buf[1] = *at_cmd_ptr++;
			buf[2] = 0;
			at_atoi(buf,&cap,HEX);
			if(cap)	//can't except ECM mode
				return(FALSE);
			FaxModeSet = TRUE;
			ModeInd[VV_FAX].supported = TRUE;
			*strPtr++ = (byte)cap;
			break;

               case  MODEM_MODE:
			if(ModemModeSet)
				return(FALSE);


			buf[0] = *at_cmd_ptr++;
			buf[1] = *at_cmd_ptr++;
			buf[2] = 0;
			at_atoi(buf,&cap,HEX);
			if( cap & (0xe0 | RADISH_VFC) )
				return(FALSE);
			ModemModeSet = TRUE;
			ModeInd[VV_MODEM].supported = TRUE;
			*strPtr++ = (byte)cap;
			break;

               case  ADSI_SERVER_MODE:
               case  ADSI_CPE_MODE:
               default:
                  return FALSE;
            }
            break;


         case TRIPLE_FORMAT:
            return FALSE;


         case VAR_FORMAT:

            switch ( cap & CAP_TYPE )
            {
		case  PROPRIETARY_MODE:
			
			buf[0] = *at_cmd_ptr++;
			buf[1] = *at_cmd_ptr++;
			buf[2] = 0;		//get the length
			at_atoi(buf,&i,HEX);
			if(i < 1)
				return(FALSE);

			*strPtr++ = (byte)i;		//make sure to insert length
			while( i )
			{
				ch = *at_cmd_ptr++;	//increment past space
				if(ch == SPACE)
					continue;
				buf[0] = ch;
				buf[1] = *at_cmd_ptr++;
				at_atoi(buf,&cap,HEX);
				*strPtr++ = (byte)cap;
				i--;
			}
			break;

               default:
                  return FALSE;
            }
            break;

      }
  }

  RadishOptions.ScdData[1] += length;
  x_memcpy(ScdDataPtr,DataBuf,(word)length);
  ScdDataPtr = RadishOptions.ScdData + RadishOptions.ScdData[1] + 2;
  return TRUE;

}



//*****************************************************************************
// Routine : EraseCapabilitiesInfo
// Description :
//	This routine erases the current capabilities.
//
//      Response to AT-SCD="" command
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void EraseCapabilitiesInfo(void)
{

   RadishOptions.ScdData[1] = 0;          // set length to 0;
   ScdDataPtr = RadishOptions.ScdData+2;  // set ScdData pointer.
   ModemModeSet = FaxModeSet = VoiceViewModeSet = FALSE;              // VV isn't set in the CAP data buf.
//   ModeInd[VV_V27TER_4800].supported = FALSE;
//   ModeInd[VV_V29_9600].supported = FALSE;
   ModeInd[VV_FAX].supported = FALSE;
   ModeInd[VV_MODEM].supported = FALSE;
}



//*****************************************************************************
// Routine : GetErrorReport
// Description :
//	This routine returns the error code. It is updated every
//      time an ERROR result is returned to the DTE.
//
//      Response to AT-SER? command
//
//      AT-SER?  display the error report code in HEX
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void GetErrorReport(void)
{
  byte str[3]={0};
  byte len;

  // if not '?' then erronous command, so get out.
  if(*at_cmd_ptr++ != '?')
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  len = (byte)at_itoa(RadishOptions.ErrorReport,str,HEX);
  at_output_msg(str,len) ;
  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}


//*****************************************************************************
// Routine : SetTransmissionSpeed
// Description :
//	This routine updates the TransSpeed variable which represents
//      the data modulation schemes that are associated with the
//      VoiceView mode tones.
//
//      Response to AT-SSP command.
//
//      AT-SSP=<compound value>
//      for example:   AT-SSP=0,1,2
//
//      The TransSpeed variable is a struct that contains
//      3 fileds, each represents different speed:
//        1st field: Burst Speed
//        2nd field: Recovery Speed
//        3rd field: Priority Speed
//      each field may have the values of 0-7 except of
//      fields 2 and 3 which may not receive the value of 0
//      because of timing considerations.
//
//      0     V.21      300 bps FSK
//      1     V.27ter  4800 DPSK
//      2     V.29     9600 bps QAM
//      3     V.29     4800 bps QAM     // this speed is not supported by our dsp.
//      4     V.17     7200 bps TCM
//      5     V.17     9600 bps TCM
//      6     V.17    12000 bps TCM
//      7     V.17    14400 bps TCM
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetTransmissionSpeed(void)
{
  byte ch;
  byte burst,recovery;
  byte str[21];
  byte *strPtr;

  // if '?' then display parameter
  if ((ch = *at_cmd_ptr++) == '?')
  {
    strPtr=str;
    at_itoa(RadishOptions.TxSpeed.Burst,strPtr,DECIMAL);
    *++strPtr=COMMA;
    at_itoa(RadishOptions.TxSpeed.Recovery,++strPtr,DECIMAL);
    *++strPtr=COMMA;
    at_itoa(RadishOptions.TxSpeed.Priority,++strPtr,DECIMAL);
    strPtr++;
    *strPtr=0;
    at_output_msg(str,x_strlen(str));
    RadishOptions.ErrorReport = NO_ERROR;
    at_result_code = OK;
    return;

  }

  // if not '=' then erronous command, so get out.
  if( ch  != '=')
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // get the first field which represent the Burst Speed.
  switch(ch=*at_cmd_ptr++)
  {

    case '0':
//    case '1':
//    case '2':
//    case '4':
//    case '5':
//    case '6':
//    case '7':
      burst = ch-'0';
      break;

    case '?':
      at_output_msg(SSP_RANGE,x_strlen(SSP_RANGE));
      RadishOptions.ErrorReport = NO_ERROR;
      at_result_code = OK;
      return;

    // Can't accept V29 4800 since it is not supported by the DSP.
    case 3:
    default:
      RadishOptions.ErrorReport = UNSUPPORTED_PARAMETER;
      at_result_code = ERROR;
      return;

  }

  // if not a comma then an ERROR
  if ( *at_cmd_ptr++ != ',' )
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // get the second field which represent the Recovery Speed.
  switch(ch=*at_cmd_ptr++)
  {

    case '1':
    case '2':
//    case '4':
//    case '5':
//    case '6':
//    case '7':
      recovery = ch-'0';
      break;

    // Do not allow Recovery and Priority speeds to be set to 0 (V.21 300 bps)
    // because of timing consideration. It also can't be V29 4800 since it is
    // supported by the dsp.
    case 0:
    case 3:
    default:
      RadishOptions.ErrorReport = UNSUPPORTED_PARAMETER;
      at_result_code = ERROR;
      return;

  }

  // if not a comma the an ERROR
  if ( *at_cmd_ptr++ != ',' )
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // get the third field which represent the Priority Speed.
  switch(ch=*at_cmd_ptr++)
  {

    case '1':
    case '2':
//    case '4':
//    case '5':
//    case '6':
//    case '7':
      RadishOptions.TxSpeed.Priority = ch-'0';
      break;

    // Do not allow Recovery and Priority speeds to be set to 0 (V.21 300 bps)
    // because of timing consideration. It also can't be V29 4800 since it is
    // supported by the dsp.
    case 0:
    case 3:
    default:
      RadishOptions.ErrorReport = UNSUPPORTED_PARAMETER;
      at_result_code = ERROR;
      return;

  }

  RadishOptions.TxSpeed.Burst = burst;
  RadishOptions.TxSpeed.Recovery = recovery;
  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : SetSequenceResponseControl
// Description :
//	This routine updates the SequenceResponseControl variable.
//
//      Response to AT-SSR command
//
//      AT-SSR=0   send no response (UA/RR/RNR/DISC frame) when
//                 VoiceView start sequence is received.
//      AT-SSR=1   respond to VoiceView start sequence.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetSequenceResponseControl(void)
{
  byte ch,error=0;
  byte str[2]={0};


  switch(ch=*at_cmd_ptr++)
  {
    case '?':
       at_itoa(RadishOptions.SequenceResponseControl,str,DECIMAL);
       at_output_msg(str,1);
       break;

    case '=':

       switch(ch=*at_cmd_ptr++)
       {

         case '0':
         case '1':
           RadishOptions.SequenceResponseControl = ch-'0';
           break;

         case '?':
           at_output_msg(SSR_RANGE,x_strlen(SSR_RANGE));
           break;

         default:
            error = 1;
            break;
       }
       if (!error)
        break;

    default:
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

  }

  at_result_code = OK;
  RadishOptions.ErrorReport = NO_ERROR;

}



//*****************************************************************************
// Routine : SetTransactionToneControl
// Description :
//	This routine updates the TransactionToneControl variable.
//
//      Response to AT-STT command.
//
//      AT-STT=0   disable handset tone during data transfer
//      AT-STT=1   enable handset tone during data transfer
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
//void SetTransactionToneControl(void)
//{
//  byte ch,error=0;
//  byte str[2]={0};


//  switch(ch=*at_cmd_ptr++)
//  {
//    case '?':
//       at_itoa(RadishOptions.TransactionToneControl,str,DECIMAL);
//       at_output_msg(str,1);
//       break;

//    case '=':
//       switch(ch=*at_cmd_ptr++)
//       {

//         case '0':
//         case '1':
//           RadishOptions.TransactionToneControl = ch-'0';
//           break;

//         case '?':
//           at_output_msg(STT_RANGE,x_strlen(STT_RANGE));
//           break;

//         default:
//           error = 1;
//           break;
//       }
//       if (!error)
//         break;

//    default:
//       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
//       at_result_code = ERROR;
//       return;

//  }

//  RadishOptions.ErrorReport = NO_ERROR;
//  at_result_code = OK;

//}



//*****************************************************************************
// Routine : DisableSwitchhookStatus
// Description :
//	This routine updates the SwitchhookStatus variable.
//
//      Response to AT-SDS command.
//
//      AT-SDS=0   Disable switchhook status monitoring feature
//      AT-SDS=1   Enable switchhook status monitoring feature
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       10/31/94          Initial
//*****************************************************************************
void DisableSwitchhookStatus(void)
{
  byte ch,error=0;
  byte str[2]={0};


  switch(ch=*at_cmd_ptr++)
  {
    case '?':
       at_itoa(RadishOptions.SwitchhookStatus,str,DECIMAL);
       at_output_msg(str,1);
       break;

    case '=':
       switch(ch=*at_cmd_ptr++)
       {

         case '0':
         case '1':
           RadishOptions.SwitchhookStatus = ch-'0';
           break;

         case '?':
           at_output_msg(SDS_RANGE,x_strlen(SDS_RANGE));
           break;

         default:
           error = 1;
           break;
       }
       if (!error)
         break;

    default:
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//-----------------------------------------------------------------------------
// these 4 functions are associated with the 'message storage system' option
// which is not supported yet. They'll be commented out for now.
//-----------------------------------------------------------------------------

#ifdef RADISH_MESSAGE

//*****************************************************************************
// Routine : SetRejectOverflowMessages
// Description :
//	This routine updates the RejectOverflowMessages variable.
//
//      Response to AT-SOR command.
//      For message storage option only.
//
//      AT-SOR=0   Reject incoming VoiceView data on overflow
//      AT-SOR=1   Overflow incoming VoiceView data on overflow
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetRejectOverflowMessages(void)
{
  byte ch,error=0;
  byte str[2]={0};


  switch(ch=*at_cmd_ptr++)
  {
    case '?':
       at_itoa(RadishOptions.RejectOverflowMessages,str,DECIMAL);
       at_output_msg(str,1);
       break;

    case '=':
       switch(ch=*at_cmd_ptr++)
       {

         case '0':
         case '1':
           RadishOptions.RejectOverflowMessages = ch-'0';
           break;

         case '?':
           at_output_msg(SOR_RANGE,x_strlen(SOR_RANGE));
           break;

         default:
           error = 1;
           break;
       }
       if (!error)
        break;

    default:
       RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
       at_result_code = ERROR;
       return;

  }

  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : SetNotificationTimer
// Description :
//	This routine updates the NotificationTimer variable.
//
//      Response to AT-SNO command.
//      For message storage option only.
//
//      AT-SNO=<value>
//      value = 0-255
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetNotificationTimer(void)
{
  byte ch,i=0;
  byte str[4]={0};
  word num;

  // if '?' then display parameter.
  if ((ch = *at_cmd_ptr++) == '?')
  {
      at_itoa(RadishOptions.NotificationTimer,str,DECIMAL);
      at_output_msg(str,x_strlen(str));
      RadishOptions.ErrorReport = NO_ERROR;
      at_result_code = OK;
      return;
  }


  // if not '=' then erronous command, so get out.
  if ( ch != '=')
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }


  do
  {
      // read char if it is a digit.
      if (((ch=*at_cmd_ptr) >= '0') && (ch<='9'))
      {
        str[i++]=ch;
        at_cmd_ptr++;
        continue;
      }

      // if not a digit and it is the first char then issue an error.
      if (i == 0)
      {
         RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
         at_result_code = ERROR;

         // if '?' then display range of values and get out.
         if (ch == '?')
         {
              at_output_msg(SNO_RANGE,x_strlen(SNO_RANGE));
              RadishOptions.ErrorReport = NO_ERROR;
              at_result_code = OK;
         }

         ++at_cmd_ptr;
         return;
      }

      // if not the first digit then just break from loop and continue.
      break;


  } while( i < 3 );

  at_atoi(str,&num,DECIMAL);
  if (num > 255 )
  {
    RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
    at_result_code = ERROR;
    return;
  }

  RadishOptions.NotificationTimer=(byte)num;
  RadishOptions.ErrorReport = NO_ERROR;
  at_result_code = OK;

}



//*****************************************************************************
// Routine : SetDate
// Description :
//	This routine updates the Date variable.
//
//      Response to AT-SDT=YYMMDD command.
//      YY=00 to 99
//      MM=01 to 12
//      DD=01 to 31
//
//      For message storage option only.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetDate(void)
{
  byte ch,i;
  byte *strPtr,str[9]={0};
  word year,month,day;

  strPtr=str;

  // if '?' then display parameter.
  if ((ch = *at_cmd_ptr++) == '?')
  {
      at_itoa(RadishOptions.date.year,strPtr,DECIMAL);
      strPtr+=2;
      *strPtr++=SLASH;
      at_itoa(RadishOptions.date.month,strPtr,DECIMAL);
      strPtr+=2;
      *strPtr++=SLASH;
      at_itoa(RadishOptions.date.day,strPtr,DECIMAL);

      at_output_msg(str,8);
      RadishOptions.ErrorReport = NO_ERROR;
      at_result_code = OK;
      return;
  }

  // if not '=' then erronous command, so get out.
  if( ch != '=')
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // read date into buffer
  for (i=0; i<6; ++i)
  {
      if (((ch=*at_cmd_ptr++) >= '0') && (ch <= '9'))
      {
          if ((i == 2) || (i == 4))
          {
             *++strPtr = ch;
             ++strPtr;
          }
          else
             *strPtr++ = ch;
      }

      // if '?' then display SDT range and get out.
      else if ((ch == '?') && (i == 0))
      {
        at_output_msg(SDT_RANGE,x_strlen(SDT_RANGE));
        RadishOptions.ErrorReport = NO_ERROR;
        at_result_code = OK;
        return;
      }

      // if not a digit and not '?' then ERROR.
      else
      {
        RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
        at_result_code = ERROR;
        return;
      }

  }

  // verify that valid date.
  at_atoi(str,&year,DECIMAL);
  at_atoi(str+3,&month,DECIMAL);
  at_atoi(str+6,&day,DECIMAL);

  if ((month > 12) || (month < 1) ||
      (day > 31) || (day < 1))
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // update date.
  RadishOptions.date.year=(byte)year;
  RadishOptions.date.month=(byte)month;
  RadishOptions.date.day=(byte)day;

}


//*****************************************************************************
// Routine : SetTime
// Description :
//	This routine updates the Date variable.
//
//      Response to AT-STM=HHMM command.
//      HH=00 to 23
//      MM=00 to 59
//
//      For message storage option only.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       9/30/94          Initial
//*****************************************************************************
void SetTime(void)
{
  byte ch,i;
  byte *strPtr,str[6]={0};
  word hour,minute;


  strPtr=str;

  // if '?' then display parameter.
  if ((ch = *at_cmd_ptr++) == '?')
  {
      at_itoa(RadishOptions.time.hour,strPtr,DECIMAL);
      strPtr+=2;
      *strPtr++=COLON;
      at_itoa(RadishOptions.time.minute,strPtr,DECIMAL);

      at_output_msg(str,5);
      at_result_code = OK;
      return;
  }

  // if not '=' then erronous command, so get out.
  if( ch != '=')
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // read date into buffer
  for (i=0; i<4; ++i)
  {
      if (((ch = *at_cmd_ptr++) >= '0') && (ch <= '9'))
      {
          if (i == 2)
          {
             *++strPtr = ch;
             ++strPtr;
          }
          else
             *strPtr++ = ch;
      }

      // if '?' then display STM range and get out.
      else if ((ch == '?') && (i == 0))
      {
         at_output_msg(STM_RANGE,x_strlen(STM_RANGE));
         at_result_code = OK;
         return;
      }

      // if not a digit and not '?' then ERROR.
      else
      {
        RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
        at_result_code = ERROR;
        return;
      }

  }

  // verify that valid date.
  at_atoi(str,&hour,DECIMAL);
  at_atoi(str+3,&minute,DECIMAL);
  if ((hour > 23) || (minute > 59))
  {
      RadishOptions.ErrorReport = UNRECOGNIZED_CMD;
      at_result_code = ERROR;
      return;
  }

  // update time.
  RadishOptions.time.hour=(byte)hour;
  RadishOptions.time.minute=(byte)minute;

}
#endif




#endif



