/*name and version number:@(#)atmain.c	1.188*/
/*date of get: 		  12/15/00 10:10:16*/
/*date of delta:	  11/30/00 16:56:21*/
/****************************************************************
File : atmain.c
Description :
	Contains the main entry point to start at task.
	Initalize variables and some utility functions.

Procedures Contained :
	at_init_variables
	at_atoi
	at_itoa
	at_output_msg
	at_task

Revision History :
	Initials	Date		Change
	J.S.Xu		10/07/92	Initial
*****************************************************************/

#include "llglob_d.h"
#include "iouart_d.h"
#include "atglob.h"
#include "ioglob_d.h"
#include "z80glob.h"
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
	#include "fax_c2.h"
#endif

#if defined(V34_FAX)
# include "faxv34.h"
#endif

#include "allglobs.h"

extern void at_display_v25ter_connect_msg ( void );
const byte str_convert[] = "0123456789ABCDEF";

/****************************************************************
Routine : at_init_variables
Description :
	Initialize global variables for AT TASK.
Parameters in :
	none
Parameters out :
	none
Revision History :
*****************************************************************/
void at_init_variables ( void )
{
	G(at_state) = AT_IDLE;
	G(at_result_code) = NO_MSG;
	G(at_cmd_ptr) = G(at_cmd_buf);
	G(at_cmd_ptr)[0] = 0;
	G(at_cmd_len) = 0;
	G(at_connect_code_flag) = 0;
	G(at_view_more) = 0 ;
	G(at_timer) = 0 ;
}

/**************************************************************************
Routine : at_atoi
Description :
	This routine converts the string pointed to by "str" into
	an unsigned integer value pointed to by "num". It also
	returns the length of the integer.
	The number may be terminated by any character that cannot be
	part of an integer.

        The string can represent either HEX or DECIAML number. The
        format parameter is the indication for the function as to
        the kind of string.
        format = 10   convert DECIMAL string
        format = 16   convert HEX string.

Parameters in :
	str, format

Parameters out :
	num

Revision History :
	Initials	Date		Change
	Eli T.          10/24//94       Added code to handle HEX num in str.
***************************************************************************/
word at_atoi ( byte *str, word *num, byte format )
{
   word count = 0;
   word tmp = 0;

   switch ( format )
   {
     case HEX:
       for (count=0;  (((str[count]>='0') && (str[count]<='9')) ||
                       ((str[count]>='A') && (str[count]<='F'))); ++count)
       {
          if ((str[count] >= 'A') && (str[count] <= 'F'))
             tmp = (word) (tmp*format + (str[count]-'A'+10));
          else
             tmp = (word) (tmp*format + (str[count]-'0'));
       }
       break;

     case DECIMAL:
       for (count=0;  ((str[count]>='0') && (str[count]<='9')); ++count)
             tmp = (word) (tmp*format + (str[count]-'0'));
       break;

   }

   *num = tmp;
   return count;
}

/**************************************************************************
Routine : at_itoa
Description :
	This routine converts the integer "num" into its string
	equivalent and places the result in the string pointed to by
	"str". It also returns the length of the string.

        The number can be converted to either DECIMAL or HEX, depending
        on the format value.
        format = 10  DECIMAL conversion
        format = 16  HEX conversion

Parameters in :
	num, format
Parameters out :
	str

Revision History :
	Initials	Date		Change
	Eli T.          10/24/94        Added code to handle HEX numbers.
***************************************************************************/
word at_itoa( word num, byte *str, byte format)
{
   byte i;
   byte strLength;
   word val;

   // get the string length
   switch ( format )
   {
      case DECIMAL:
         if ( num < 10 )
              strLength = 1;
         else if (num < 100)
              strLength = 2;
         else if (num < 1000)
              strLength = 3;
         else if (num < 10000)
              strLength = 4;
         else
              strLength = 5;
         break;

      case HEX:
         if ( num < 0x100 )
             strLength = 2;
         else
         if ( num < 0x10000 )
             strLength = 4;
         else
             return 0;
         break;

      default:
        return 0;
   }

   i = strLength;

   do
   {
      val = (word) (num % format);
      if ( val >= 0x0A )       // Happens only if num is in HEX format.
         str[--i] = (byte)(val+'7');
      else
         str[--i] = (byte)(val+'0');

      num = (word) (num / format);

   } while (i != 0);

   str[strLength] = 0;
   return ( strLength );
}

/**************************************************************************
Routine : at_dtoa
Description :
	This routine converts the dword "num" into its string
	equivalent and places the result in the string pointed to by
	"str". It also returns the length of the string.

        The number can be converted to either DECIMAL or HEX, depending
        on the format value.
        format = 10  DECIMAL conversion
        format = 16  HEX conversion

Parameters in :
	num, format
Parameters out :
	str

Revision History :
	Initials	Date		Change
	Eli T.          10/24/94        Added code to handle HEX numbers.
***************************************************************************/
word at_dtoa( dword num, byte *str, byte format)
{
   byte i;
   byte strLength;
   word val;

   // get the string length
   switch ( format )
   {
      case DECIMAL:
         if ( num < 10 )
              strLength = 1;
         else if (num < 100)
              strLength = 2;
         else if (num < 1000)
              strLength = 3;
         else if (num < 10000)
              strLength = 4;
         else if (num < 100000)
              strLength = 5;
         else if (num < 1000000)
              strLength = 6;
         else if (num < 10000000)
              strLength = 7;
         else if (num < 100000000)
              strLength = 8;
         else if (num < 1000000000)
              strLength = 9;
         else if (num < 4294967295)
              strLength = 10;
         else
              return 0;   // can't handle a number > 4294967295
         break;

      case HEX:
         if ( num < 0x100 )
             strLength = 2;
         else if ( num < 0x10000 )
             strLength = 4;
         else if ( num < 0x1000000 )
             strLength = 6;
		 else
			 strLength = 8;
         break;

      default:
        return 0;
   }

   i = strLength;

   do
   {
      val = (word) (num % format);
      if ( val >= 0x0A )       // Happens only if num is in HEX format.
         str[--i] = (byte)(val+'7');
      else
         str[--i] = (byte)(val+'0');

      num /= format;

   } while (i != 0);

   str[strLength] = 0;
   return ( strLength );
}

typedef const byte *CBP;

// This is needed for the Z80 environment to
// allow the result_msg structure to be
// defined outside the function.
struct at_result_msg_str
{
	const byte *str;			/* text result message */
	const byte numericCode;		/* numeric result */
};

// The result message array corresponding to the result codes
// in the AT_RESULT_CODE at_result_code
const struct at_result_msg_str result_msg[] =
{
	{ (CBP) "OK", 0 },			// 0
	{ (CBP) "CONNECT", 1 },		// 1
	{ (CBP) "RING", 2 },		// 2
	{ (CBP) "NO CARRIER", 3 },	// 3
	{ (CBP) "ERROR", 4 },		// 4
	{ (CBP) "1200", 5 },		// 5
	{ (CBP) "NO DIALTONE", 6 },	// 6
	{ (CBP) "BUSY", 7 },		// 7
	{ (CBP) "NO ANSWER", 8 },	// 8
	{ (CBP) "75", 9 },			// 9
	{ (CBP) "300", 40 },		// 10
	{ (CBP) "600", 11 },		// ?? 600 and 4800 the same?
	{ (CBP) "2400", 10 },		// 12
	{ (CBP) "4800", 11 },		// 13
	{ (CBP) "7200", 24 },		// 14
	{ (CBP) "9600", 12 },		// 15
	{ (CBP) "12000", 25 },		// 16
	{ (CBP) "14400", 13 },		// 17
	{ (CBP) "16800", 86 },		// 18
	{ (CBP) "19200", 14 },		// 19
	{ (CBP) "21600", 55 },		// 20
	{ (CBP) "24000", 56 },		// 21
	{ (CBP) "26400", 57 },		// 22
	{ (CBP) "28800", 58 },		// 23
	{ (CBP) "31200", 59 },		// 24
	{ (CBP) "33600", 60 },		// 25
	{ (CBP) "38400", 28 },		// 26
	{ (CBP) "57600", 18 },		// 27
	{ (CBP) "115200", 87 },		// 28
	{ (CBP) "230400", 91 },		// 29
	{ (CBP) "+FCERROR", 0 },
	{ (CBP) "DELAYED", 88 },	// 88
	{ (CBP) "BLACKLISTED", 89 },// 89
	{ (CBP) "BLACKLIST FULL", 90 },	// 90
	{ (CBP) "32000", 70 },		//100
	{ (CBP) "34000", 71 },		//101
	{ (CBP) "36000", 72 },		//102
	{ (CBP) "38000", 73 },		//103
	{ (CBP) "40000", 74 },		//104
	{ (CBP) "42000", 75 },		//105
	{ (CBP) "44000", 76 },		//106
	{ (CBP) "46000", 77 },		//107
	{ (CBP) "48000", 78 },		//108
	{ (CBP) "50000", 79 },		//109
	{ (CBP) "52000", 80 },		//110
	{ (CBP) "54000", 81 },		//111
	{ (CBP) "56000", 82 },		//112
	{ (CBP) "58000", 83 },		//113
	{ (CBP) "60000", 84 },		//114

	{ (CBP) "28000", 100 },		// here starts V.90 unique speeds
	{ (CBP) "29333", 101 },
	{ (CBP) "30666", 102 },
	{ (CBP) "33333", 103 },
	{ (CBP) "34666", 104 },
	{ (CBP) "37333", 105 },
	{ (CBP) "38666", 106 },
	{ (CBP) "41333", 107 },
	{ (CBP) "42666", 108 },
	{ (CBP) "45333", 109 },
	{ (CBP) "46666", 110 },
	{ (CBP) "49333", 111 },
	{ (CBP) "50666", 112 },
	{ (CBP) "53333", 113 },
	{ (CBP) "54666", 114 }
};		// all possible result messages


// Set G(at_result_code) according to the
//		dce rate passed.
void at_dce_speed_code(MODEM_LINE_RATE line_rate)
{
#if defined(CS_V110)
	if (G(cs_v110_on) == 1)		// v110 call is being processed
		G(cs_v110_on) = 2;		// v110 call is connected

	if (G(cs_v110_on))
	{
		switch (G(S).ModemOptions.V110Speed)
		{
			case 58:
				G(at_result_code) = CONNECT_2400;
				break;
			case 59:
				G(at_result_code) = CONNECT_4800;
				break;
			case 61:
				G(at_result_code) = CONNECT_9600;
				break;
			case 64:
				G(at_result_code) = CONNECT_19200;
				break;
			case 67:
				G(at_result_code) = CONNECT_38400;
				break;
		}
		return;
	}
#endif	// CS_V110
	switch (line_rate)
	{
	default :
	case MR_TRAINING :
		G(at_result_code) = CONNECT;
		break;
	case MR_75 :
		G(at_result_code) = CONNECT_75;
		break;
	case MR_300 :
		G(at_result_code) = CONNECT_300;
		break;
	case MR_600 :
		G(at_result_code) = CONNECT_600;
		break;
	case MR_1200 :
		G(at_result_code) = CONNECT_1200;
		break;
	case MR_2400 :
		G(at_result_code) = CONNECT_2400;
		break;
	case MR_4800 :
		G(at_result_code) = CONNECT_4800;
		break;
	case MR_7200 :
		G(at_result_code) = CONNECT_7200;
		break;
	case MR_9600 :
		G(at_result_code) = CONNECT_9600;
		break;
	case MR_12000 :
		G(at_result_code) = CONNECT_12000;
		break;
	case MR_14400 :
		G(at_result_code) = CONNECT_14400;
		break;
	case MR_16800 :
		G(at_result_code) = CONNECT_16800;
		break;
	case MR_19200 :
		G(at_result_code) = CONNECT_19200;
		break;
	case MR_21600 :
		G(at_result_code) = CONNECT_21600;
		break;
	case MR_24000 :
		G(at_result_code) = CONNECT_24000;
		break;
	case MR_26400 :
		G(at_result_code) = CONNECT_26400;
		break;
	case MR_28800 :
		G(at_result_code) = CONNECT_28800;
		break;
	case MR_31200 :
		G(at_result_code) = CONNECT_31200;
		break;
	case MR_33600 :
		G(at_result_code) = CONNECT_33600;
		break;
	case MR_32000 :
	case MRV_32000 :
		G(at_result_code) = CONNECT_32000;
		break;
	case MR_34000 :
		G(at_result_code) = CONNECT_34000;
		break;
	case MR_36000 :
	case MRV_36000 :
		G(at_result_code) = CONNECT_36000;
		break;
	case MR_38000 :
		G(at_result_code) = CONNECT_38000;
		break;
	case MRV_40000 :
	case MR_40000 :
		G(at_result_code) = CONNECT_40000;
		break;
	case MR_42000 :
		G(at_result_code) = CONNECT_42000;
		break;
	case MRV_44000 :
	case MR_44000 :
		G(at_result_code) = CONNECT_44000;
		break;
	case MR_46000 :
		G(at_result_code) = CONNECT_46000;
		break;
	case MRV_48000 :
	case MR_48000 :
		G(at_result_code) = CONNECT_48000;
		break;
	case MR_50000 :
		G(at_result_code) = CONNECT_50000;
		break;
	case MRV_52000 :
	case MR_52000 :
		G(at_result_code) = CONNECT_52000;
		break;
	case MR_54000 :
		G(at_result_code) = CONNECT_54000;
		break;
	case MRV_56000 :
	case MR_56000 :
		G(at_result_code) = CONNECT_56000;
		break;
	case MR_58000 :
		G(at_result_code) = CONNECT_58000;
		break;
	case MR_60000 :
		G(at_result_code) = CONNECT_60000;
		break;

	case MRV_28000 :
		G(at_result_code) = CONNECT_28000;
		break;
	case MRV_29333 :
		G(at_result_code) = CONNECT_29333;
		break;
	case MRV_30666 :
		G(at_result_code) = CONNECT_30666;
		break;
	case MRV_33333 :
		G(at_result_code) = CONNECT_33333;
		break;
	case MRV_34666 :
		G(at_result_code) = CONNECT_34666;
		break;
	case MRV_37333 :
		G(at_result_code) = CONNECT_37333;
		break;
	case MRV_38666 :
		G(at_result_code) = CONNECT_38666;
		break;
	case MRV_41333 :
		G(at_result_code) = CONNECT_41333;
		break;
	case MRV_42666 :
		G(at_result_code) = CONNECT_42666;
		break;
	case MRV_45333 :
		G(at_result_code) = CONNECT_45333;
		break;
	case MRV_46666 :
		G(at_result_code) = CONNECT_46666;
		break;
	case MRV_49333 :
		G(at_result_code) = CONNECT_49333;
		break;
	case MRV_50666 :
		G(at_result_code) = CONNECT_50666;
		break;
	case MRV_53333 :
		G(at_result_code) = CONNECT_53333;
		break;
	case MRV_54666 :
		G(at_result_code) = CONNECT_54666;
		break;
	}
}

// Set G(at_result_code) according to the
//		dte rate.
void at_dte_speed_code()
{
	switch ( G(S).ModemOptions.DteRate )
	{
	case DTE_300 :
	case DTE_110 :
		G(at_result_code) = CONNECT_300;
		break;
	case DTE_600 :
		G(at_result_code) = CONNECT_600;
		break;
	case DTE_1200 :
		G(at_result_code) = CONNECT_1200;
		break;
	case DTE_2400 :
		G(at_result_code) = CONNECT_2400;
		break;
	case DTE_4800 :
		G(at_result_code) = CONNECT_4800;
		break;
	case DTE_9600 :
		G(at_result_code) = CONNECT_9600;
		break;
	case DTE_14400 :
		G(at_result_code) = CONNECT_14400;
		break;
	case DTE_19200 :
		G(at_result_code) = CONNECT_19200;
		break;
	case DTE_38400 :
		G(at_result_code) = CONNECT_38400;
		break;
	case DTE_57600 :
		G(at_result_code) = CONNECT_57600;
		break;
	default :
	case DTE_115200 :
		G(at_result_code) = CONNECT_115200;
		break;
	case DTE_230400 :
		G(at_result_code) = CONNECT_230400;
		break;
	}
}

// at_form_connect_rate()
//
// Based on the G(at_result_code) and G(at_connect_code_flag), form
// the connect speed string.
void at_form_connect_rate(char *msg)
{
	*msg = 0;

	// If it's a connect code that needs a speed we'll
	// first take care of the "CONNECT "
	if (G(at_connect_code_flag) && CONNECT != G(at_result_code))
	{
		x_strcat((byte *) msg, (CBP) result_msg[CONNECT].str);
		x_strcat((byte *) msg, (CBP) " ");	// space
	}

	// Append the speed to connect messages or for
	// other things we get the result itself here.
	x_strcat((byte *) msg, (CBP) result_msg[ G(at_result_code)].str);
}

#define AT_S95	(G(S).ModemOptions.wHayes95)

// This is the special stuff for Hayes S95 register
// This is called when the S95 register is non-zero.
//
// At this point the msg string contains things
// that were put there apart from the S95 option
// but including processing for the ATW command.
void at_hayes_s95(byte *msg)
{
	byte *cp;

	if (AT_S95 & 1)
	{
		// there might be a DTE speed in there (from ATW0 or ATW1)
		// so we'll redo it with DCE (receive) speed
		at_dce_speed_code(G(x_line_rate));
		at_form_connect_rate((char *) msg);
	}

	if ((AT_S95 & 2) && (AT_S95 & 0x600))
	{
		// Enable the Carrier result codes.  Previous
		// processing has already put in something.
		// bits 9 or 10 set mean we have to give
		// transmit DCE speed first.  Then if bit
		// 10 is set we'll append the receive line
		// speed.
		at_dce_speed_code(G(x_line_rate_tx));
		at_form_connect_rate((char *) msg);

		if (AT_S95 & 0x400)
		{
			// append receive speed as well
#ifdef VPCM_CLIENT
			// if aggressive connection enabled ( S17=1 ), display the
			// initial connect rate to users for the 1st time upon
			// connection
			if ( ( G(vp_initial_connect_msg_done) == 0 )
				&& ( G(S).ModemOptions.Aggressive_Connection_Enable == 1) )
			{
				x_debug_msg ("AT - initial connect msg");
				// display the initial connect rate
				at_dce_speed_code(G(x_status).IniReceiveRate);
				vp_initial_connect_msg_done = 1;
			}
			else
#endif	//VPCM_CLIENT
			{
				at_dce_speed_code(G(x_line_rate));		// new at_result_code
			}
			x_strcat(msg, (const byte *) "/");
			x_strcat(msg, result_msg[ G(at_result_code)].str);
		}
	}

	if ((AT_S95 & 2) && (EC_NO != G(x_modem_ec)))
	{
		// Append /ARQ if protocol is not NONE
		x_strcat(msg, (const byte *) "/ARQ");
	}

	// modulation
	if (AT_S95 & 0x100)
	{
		byte l;
		x_strcat(msg, "/");
		l = (byte) x_strlen(msg);
		(void) at_current_mod(&msg[l]);
	}

	// error control protocol
	if (AT_S95 & 8)
	{
		switch (G(x_modem_ec))
		{
		case EC_V42V44:
		case EC_V42B:
		case EC_V42:
			cp = (byte *) "/LAPM";
			break;
		case EC_MNP5:
		case EC_MNP4:
		case EC_MNP3:
		case EC_MNP2:
			cp = (byte *) "/MNP";
			break;
		default:
			cp = (byte *) "/PROTOCOL: NONE";
		}
		x_strcat(msg, cp);
	}

	// compression
	if (AT_S95 & 0x20)
	{
		switch (G(x_modem_ec))
		{
		case EC_V42V44:
			cp = (byte *) "/V44";
			break;
		case EC_V42B:
			cp = (byte *) "/V42BIS";
			break;
		case EC_MNP5:
			cp = (byte *) "/MNP5";
			break;
		default:
			cp = (byte *) "/COMPRESSION: NONE";
		}
		x_strcat(msg, cp);
	}
}

// based on G(at_result_code) put the
// numeric result code into msg and
// return the length of the message
word at_numericFormatResult(byte *msg)
{
	word msg_len;

	if ( G(at_result_code) == FAX_FCERROR )
	{
		msg_len = 3;
		x_memcpy(msg, (CBP) "+F4", msg_len);
	}
	else
	{
		msg_len = at_itoa((word)result_msg[ G(at_result_code)].numericCode,
						  msg, DECIMAL);
	}

	return msg_len;
}

/****************************************************************
Routine : at_output_msg
Description :
	This routine will send DTE the msg pointed by "msg_ptr" or if
	*msg_ptr is NULL, it sends DTE the result code or result message.
Parameters in :
	none
Parameters out :
	none
Revision History :
*****************************************************************/
void at_output_msg ( const byte *msg_ptr, word msg_len )
{
	char *cp;
	byte txmsg[AT_MAXMSG];
	byte *txmsg_ptr;
	byte tmpparity ;

	/* if no msg or result code to display, return immediately*/
	if ( (msg_ptr == NULL) && (G(S).ModemOptions.ResultCode == 1) )
		return ;
	txmsg_ptr = txmsg;
	if ( G(S).ModemOptions.ResultCodeFormat == 1 )
	{
		*txmsg_ptr++ = G(S).ModemOptions.CRChar;
		*txmsg_ptr++ = G(S).ModemOptions.LFChar;
	}
	if ( msg_ptr)
	{		// send msg pointed to by *msg_ptr
		x_memcpy ( txmsg_ptr, msg_ptr, msg_len ) ;
	}
	else
	{			// send  result code or result text
#if defined(V34_FAX)
		if( (G(S).ModemOptions.ResultCode == 0)
			|| ((G(x_modem_mode) == MODEM_FAX)
	#if defined(CLASS20_FAX)      // NOTE: Only Class 2.1 can be used with V.34
				&& CLASS_2_OR_20  // Class 2.1 (V.34 & non-V.34) ifc with host?
	#endif
				)
			) // V.17 fax mode
#else
		if ( (G(S).ModemOptions.ResultCode == 0) ||
			 (G(x_modem_mode) == MODEM_FAX) )
#endif // V34_FAX
		{
			if (G(S).ModemOptions.ResultCodeFormat == 0) //numeric format
			{
				msg_len = at_numericFormatResult(txmsg_ptr);
			}
			else  // text format
			{
				at_form_connect_rate((char *) txmsg_ptr);
				msg_len = x_strlen(txmsg_ptr);

				if (G(S).ModemOptions.wHayes95 && G(at_connect_code_flag))
				{
					// We'll process this in completely
					// here.  No need for more strings below
					at_hayes_s95(txmsg_ptr);
					G(at_connect_code_flag) = 0;
				}

				if (G(at_connect_code_flag) &&
					(1 == G(S).ModemOptions.ExtResultCode))
				{
					// FOR CONNECT MESSAGES with extended results
					*(txmsg_ptr + msg_len) = 0;   // null-terminate the msg.
					switch ( G(x_modem_ec) ) {
					case EC_V42V44:
						cp = " V44";// add extended suffix
						break;
					case EC_V42B:
						cp = " V42bis";// add extended suffix
						break;
					case EC_V42:
						cp = " V42";// add extended suffix
						break;
					case EC_MNP5:
						cp = " MNP5" ;
						break;
					case EC_MNP4:
						cp = " MNP4" ;
						break;
					case EC_MNP3:
						cp = " MNP3" ;
						break;
					case EC_MNP2:
						cp = " MNP2" ;
						break;
					default:
						cp = " NoEC";// add extended suffix
					}
					x_strcat(txmsg_ptr, (CBP) cp);
#ifdef CS_ETC
					if( G(cell_active) )
						x_strcat(txmsg_ptr, " Cellular Protocol");
#endif
#ifdef DC0
					if ( G(S).ModemOptions.CellConnectMsg == 22 &&
						 ( G(ETC_mode) & ETC_MODE_MASK ))
						x_strcat(txmsg_ptr, " Cellular Protocol");
#endif
#ifdef CS_V110
					if (G(cs_v110_on) == 2)
						x_strcat(txmsg_ptr, " V110");
#endif
				}
			}
		}
		msg_len = x_strlen (txmsg_ptr);	// compute new msg_len
		G(at_connect_code_flag) = 0;	// reset the connect code flag
	}

	txmsg_ptr = txmsg_ptr + msg_len;
	*txmsg_ptr++ = G(S).ModemOptions.CRChar;
	msg_len += 1 ; //for the above cr
	if ( (G(S).ModemOptions.ResultCodeFormat == 1) || (msg_ptr != NULL) )
	{
		*txmsg_ptr++ = G(S).ModemOptions.LFChar;
		if ( G(S).ModemOptions.ResultCodeFormat == 1 )
			msg_len += 3 ;	//for this lf, and cr-lf preceding the string...
		else
			msg_len += 1 ;  //for this lf
	}
	*txmsg_ptr = 0 ;

#if defined(Z80_DEBUG_PRINT) && defined(MODEM_Z80)
	{
		if (!G(venusDebugToDTE))
			ddputs_nnl ( txmsg ) ;	// DEBUG
	}
#endif

#if defined(CS_4)
	_INT_DISABLE();
		++sa_overridePrnting;
		if ( x_strlen( txmsg ) > 6 )
		{
			x_debug_msg(txmsg) ;
		}
		if (sa_overridePrnting) --sa_overridePrnting;
	_INT_ENABLE();
#else
	x_debug_msg((char *) txmsg);
#endif

	G(io_uart_status) |= UART_AT_CMD_RESPONSE ;

	txmsg_ptr = txmsg ;
	tmpparity = G(S).ModemOptions.Parity ;
	G(S).ModemOptions.Parity = G(at_parity) ;
	while ( *txmsg_ptr != 0 )
	{
		*txmsg_ptr = x_parity ( *txmsg_ptr ) ;
		txmsg_ptr++ ;
	}
	G(S).ModemOptions.Parity = tmpparity ;

	x_send_mail ( AT_IO_DATA, IO_TASK, txmsg, msg_len ) ;
}

/****************************************************************
Routine : at_connect_code
Description :
	This routine determines what result code we got according to
	the global variable G(x_line_rate).
Parameters in :
	none
Parameters out :
	none
Revision History :
*****************************************************************/
void at_connect_code(void)
{
	// If we're not giving results codes now
	// then there's no sense in fooling with this.
	// If we did leave miscellaneous result codes hanging
	// around in global variables then we'd have to clean
	// them up when we came out Q1 mode.
	if (1 == G(S).ModemOptions.ResultCode)
	{
		G(at_connect_code_flag) = 0;
		G(at_result_code) = NO_MSG;
		return;
	}

	G(at_connect_code_flag) = 1;

	if ( G(S).ModemOptions.ExtResultCode == 0 )
	{
		G(at_result_code) = CONNECT;
		G(at_connect_code_flag) = 0;
	}
	else
	{
		if ( G(S).ModemOptions.ConnectDteRate == 0 ) // display DCE rate
		{
#ifdef VPCM_CLIENT
			// if aggressive connection enabled ( S17=1 ), display the
			// initial connect rate to users for the 1st time upon
			// connection
			if ( ( G(vp_initial_connect_msg_done) == 0 )
				&& ( G(S).ModemOptions.Aggressive_Connection_Enable == 1) )
			{
				x_debug_msg ("AT - initial connect msg");
				at_dce_speed_code(G(x_status).IniReceiveRate);
				G(vp_initial_connect_msg_done) = 1;
			}
			else
#endif	//VPCM_CLIENT
			{
				at_dce_speed_code(G(x_line_rate));
			}
		}
		else // Display DTE rate
		{
			at_dte_speed_code();
		}
	}
}

/****************************************************************
Routine : at_task
Description :
	The main entry routine for at task.
Parameters in :
	cmd			-	the modem command to execute
	mail_ptr	-	mail text pointer (parameters)
	mail_len	-	length of text
Parameters out :
	none
Revision History :
	Initials	Date		Change
	VR			09/22/92	Initial
*****************************************************************/
void at_task ( MODEM_COMMAND cmd, byte *mail_ptr, word mail_len )
{
	byte tx_char[3] ;

	switch ( cmd )
	{
		case MC_INIT :
			/* initialize variables */
			x_debug_msg ( "AT - received init command" ) ;
			at_init_variables () ;
			mail_len = mail_len ;
			break ;

		case MC_PERIODIC :
		case MC_RESET :
		case MC_OPTION_CHANGE :
			break ;

		case DP_RING :
			if ( G(x_modem_mode) == MODEM_VOICE )
			{
				if ( G(S).ModemOptions.VoiceEventMask & EVENT_RING )
				{
					tx_char [0] = DLE ;
					tx_char [1] = 'R' ;
					x_send_mail ( AT_IO_DATA, IO_TASK, tx_char, 2 ) ;
				}
			}
			else
			{
				G(x_status).ud_TerminationCause = UD_TC_INCOMING_CALL;
				G(at_result_code) = RING;
				at_output_msg( NULL, 0 );
			}
			break ;

		case DP_AT_DIALDONE :
			x_debug_msg ("AT - received dial done command");
			atparse_cmd() ;		// continue parsing after ';'
			break ;

		case IO_AT_DATA :
			if ( G(at_view_more) > 0 && G(at_view_more) < 12)
			{
				if ( (*mail_ptr & 0x7f) == 0x1b ) // esc char
				{
					G(at_result_code) = OK;
					at_output_msg( NULL, 0);
					G(at_view_more) = 0 ;
				}
				else
					at_view () ;

				// For serial modem we need this
				// so we will autobaud on the next
				// command.
				if ( G(at_view_more) > 11 )
				{
					G(at_view_more) = 0;
				}
			}
			else
			{
				if ( G(at_view_more) > 11 )
				{
					G(at_view_more) = 0 ;
					return ;
				}
				
#if defined(Z80_DEBUG_PRINT) && !defined(CS_4)
				if (0 == (1 & G(venusDebugToDTE)))
				{
					if (13 == *mail_ptr)
					{
						sendDumbChar(10);
					}
					sendDumbChar(*mail_ptr);
				}
#endif

				atparse_state ( (byte)(*mail_ptr) ) ; 
			}
			break ;

		case IO_AT_CONNECT :
			x_debug_msg("AT - received CONNECT");
			cs_msi_update();	// NewMSI update MSI and reset msi timer
#if defined(V34_FAX)
			if ( G(x_modem_mode) == MODEM_FAX
					&& NON_V34 == G(x_fax_v34mode) ) // V.17 fax mode
#else
			if ( G(x_modem_mode) == MODEM_FAX ) // fax mode
#endif // V34_FAX
			{
				if (G(x_fax_rate) == G(x_line_rate))
				{
					G(at_result_code) = CONNECT;
					if ( G(S).ModemOptions.CDControl == 1 )
						UART_cd_on () ;
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
					if (CLASS_2_OR_20)
						return;
#endif
				}
				 else
					G(at_result_code) = FAX_FCERROR;
			}
#if defined(V34_FAX)
			else if( G(x_fax_v34mode) != NON_V34 )
			{
				G(at_result_code) = CONNECT;

				if( S.ModemOptions.CDControl == 1 )
					UART_cd_on () ;

				// send +A8J:1 for V.25ter
				if( V8_WITH_INDICATIONS )
				{
					x_send_mail( AT_IO_DATA, IO_TASK, "\r\n+A8J:1\r\n", 10 );
				}

				at_v34fax_msg();	// send +F34:<prate>,<crate> indication
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
				if (CLASS_2_OR_20)		// Using Class 2/2.0/2.1 fax?
					return;				      // Don't display CONNECT message
#endif
			}
#endif // V34_FAX
			else
			{
#if defined(V25TER)
				at_display_v25ter_connect_msg();		// V.25ter codes
#endif
				at_connect_code();
#if defined(CS_V110)
				if (!( G(cs_v110_on) ))		// not V.110 call
#endif
					x_send_mail ( AT_IO_CD_ON, IO_TASK, NULL, 0 ) ;
			}
			at_output_msg( NULL, 0 );
			break;

		case IO_AT_DISCONNECT :
			x_debug_msg ( "AT - disconnect" ) ;
			cs_msi_update();		// NewMSI update MSI and reset msi timer
#ifdef CS_V110
			G(cs_v110_on) = 0;		// v.110 call is disconnected
#endif
			switch ( G(x_dial_residual) )
			{
				case MR_NO_DIAL_TONE :
					G(at_result_code) = NO_DIALTONE ;
					break ;

				case MR_BUSY_SIGNAL :
					G(at_result_code) = BUSY ;
					break ;

				case MR_NO_ANSWER_TONE :
					G(at_result_code) = NO_ANSWER ;
					break ;

				case MR_OK :
					G(at_result_code) = OK ;
					break ;

				case MR_DELAYED :
					G(at_result_code) = DELAYED ;
					break ;

				case MR_BLACKLISTED :
					G(at_result_code) = BLACKLISTED ;
					break ;

				case MR_BLACKLIST_FULL :
					G(at_result_code) = BLACKLIST_FULL ;
					break ;

				case MR_CD_DISCONNECT :		// carrier loss
				default :
					G(at_result_code) = NO_CARRIER ;
					break ;
			}
			at_output_msg( NULL, 0 );
			break;

		case AT_OK :		// put out OK result code
			G(at_result_code) = OK;
			at_output_msg( NULL, 0 );
			break;

		case AT_ERROR :		// put out ERROR result code
			G(at_result_code) = ERROR;
			at_output_msg( NULL, 0 );
			break;

		case FAX_END_OF_DATA :
			x_debug_msg("AT - received fax end of data");

			if ( (G(x_fax_state) == FAX_TX_HDLC) ||
			     (G(x_fax_state) == FAX_TX) )
			{
				x_send_mail ( FAX_DROP_CARRIER, DP_TASK, NULL, 0 ) ;
			}
			G(at_result_code) = OK;
			at_output_msg( NULL, 0 );
			break;

		case FAX_ERROR :
			x_debug_msg("AT - received fax tx error");
			x_send_mail ( FAX_DROP_CARRIER, DP_TASK, NULL, 0 ) ;
			G(at_result_code) = ERROR;
			at_output_msg( NULL, 0 );
			break;

		default:
			x_debug_msg ( "AT Task - Unknown Mail" ) ;
			break;
	}
}
