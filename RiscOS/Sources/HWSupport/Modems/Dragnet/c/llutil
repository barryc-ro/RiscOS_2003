/*name and version number:@(#)llutil.c	1.99*/
/*date of get: 		  12/15/00 10:10:18*/
/*date of delta:	  11/30/00 22:06:48*/
/****************************************************************
File :	llutil.c
Description :
	Contains library routines that are global to the system.

Procedures Contained :
	x_debug_msg
	x_set_current_time
	x_elapsed_minutes
	x_sleep
	x_memcpy

Revision History :
	Initials	Date		Change
	VR       	09/21/92	Initial
*****************************************************************/

/*for Compaq PNP BIOS on NT we need the sprintf function. so define Debugging here */
#if defined(CS_4)
#include "mqx.h"
#endif	// CS_4
#include "llglob_d.h"
#include "atglob.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "mnp.h"
#include "allglobs.h"

/*****************************************************************************
	Routine : x_set_current_time
Description :
	Set minutes to current minutes count and msecond to 
	elapsed msec since last minute count update.
Parameters in :
	Pointer to TIME_MIN_SEC structure	
Parameters out :
	None	
Revision History :
	Initials	Date		Change
	ATV			05/23/95	Initial
*****************************************************************************/
void x_set_current_time ( TIME_MIN_SEC *current_time )
{
	current_time->minutes = G(x_minute_count) ;
	current_time->mseconds = (word) x_elapsed_time(G(x_minute_timer)) ;
}

/*****************************************************************************
	Routine : x_elapsed_minutes
Description :
	Used to determine the time elapsed minutes 
Parameters in :
	timer	-	start time in minutes & msec
Parameters out :
	time elapsed in minutes 
Revision History :
	Initials	Date		Change
	ATV			05/23/95	Initial
*****************************************************************************/
word x_elapsed_minutes ( TIME_MIN_SEC reference_time )
{
	if ( G(x_minute_count) == reference_time.minutes )
		return (0) ;

	if ( (word)x_elapsed_time(G(x_minute_timer)) >= reference_time.mseconds )
		return( (word)(G(x_minute_count) - reference_time.minutes) ) ;
	else
		return( (word)(G(x_minute_count) - reference_time.minutes - 1) ) ;
}

/*****************************************************************************
	Routine : x_elapsed_long_time 
Description :
	Used to determine the elapsed time in multiples of 0.1 seconds 
Parameters in :
	timer	-	start time in minutes & msec
Parameters out :
	time elapsed in multiples of 0.1 seconds
Revision History :
	Initials	Date		Change
	ATV			09/15/95	Initial
*****************************************************************************/
word x_elapsed_long_time ( TIME_MIN_SEC reference_time )
{
	word current_msecs ;

	current_msecs = (word)x_elapsed_time(G(x_minute_timer)) ;

	if ( current_msecs >= reference_time.mseconds )
		return( 600 * (G(x_minute_count) - reference_time.minutes) 
				+ ( ( current_msecs - reference_time.mseconds )/100 ) ) ;
	else
		return( 600 * (G(x_minute_count) - reference_time.minutes) 
				- ((reference_time.mseconds - current_msecs)/100) ) ;
}
/****************************************************************

Routine : x_sleep
Description :
	wait till the time has elapsed
Parameters in :
	timer	-	time to sleep in msec
Parameters out :
	none
*****************************************************************/
void x_sleep ( word timer )
{
#if defined(SA_MULTI_INSTANCE)
	// Task gives up CPU for specified interval
	_time_delay( (U32)timer ) ;
#else
	// Spin wait
	word current_time ;
	current_time = x_current_time () ;
	while ( x_elapsed_time ( current_time ) < timer )
		;
#endif	//SA_MULTI_INSTANCE
}

#if defined(CS_MODEM)
/****************************************************************
Routine : x_strcpy_len
Description :
	string copy for a fixed length source string
Parameters in :
	dest	-	destination pointer
	src		-	source pointer
	len		-  length of string
Parameters out :
	none
*****************************************************************/
void x_strcpy_len ( byte *dest, const byte *src, byte len )
{
	while ( len )
	{
		*dest++ = *src++ ;
		--len ;
	}
	*dest = 0 ;
}
#endif	// defined(CS_MODEM)

#if !defined( MODEM_Z80 )
/****************************************************************
Routine : x_memcpy
Description :
	memory copy
Parameters in :
	dest	-	destination pointer
	src		-	source pointer
	len		-	length of string
Parameters out :
	none
*****************************************************************/
void x_memcpy ( byte *dest, const byte *src, word len )
{
	while ( len )
	{
		*dest++ = *src++ ;
		--len ;
	}
}
#endif
