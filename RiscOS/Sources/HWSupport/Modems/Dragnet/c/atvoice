/*name and version number:@(#)atvoice.c	1.126*/
/*date of get: 		  09/06/00 16:58:48*/
/*date of delta:	  05/02/00 11:53:47*/
/****************************************************************
File : atvoice.c
Description :
	Contains all the parse and command routines for the voice
	commands ( AT+Vxx ).

Procedures Contained :
	at_voice

*****************************************************************/

#include "llglob_d.h"

#ifdef VOICE
#include "atglob.h"
#ifdef MODEM_Z80
#include "z80glob.h"
#endif
#ifdef G729A
#include "dpctad.h"
#endif
#include "allglobs.h"

typedef const byte *CBP;

#if defined (V253) && defined (V25TER)
extern BOOL at_withinrange(byte *str, byte *def, long *num);

#ifdef G729A
	#define VSM_RANGE	"+VSM: (0,1,2,3,4,5),(7200,8000,11025),(0),(0)"
#else
	#define VSM_RANGE	"+VSM: (0,1,2,4,5),(7200,8000,11025),(0),(0)"
#endif	//G729A

// defines for Voice Compression Method for the V.253 commands
#define VCM_SIGNED_LINEAR_V253		0
#define VCM_1ST_VAL_V253			VCM_SIGNED_LINEAR_V253
#define VCM_UNSIGNED_LINEAR_V253	1
#define VCM_IMA_ADPCM_V253			2
#define VCM_G729_V253				3
#define VCM_ULAW_V253				4
#define VCM_ALAW_V253				5
#define VCM_LAST_VAL_V253			VCM_ALAW_V253
#endif	//V253 && V25TER

/****************************************************************************
 Routine : at_output_decbyte
 Description :
	Send to DTE: CR, LF, decimal conversion of 'b', CR, LF
****************************************************************************/
void at_output_decbyte(byte b)
{
	byte txchar[5];

	at_itoa(b, txchar, DECIMAL);
	at_output_msg2(txchar);
}

/****************************************************************************
 Routine : at_voice_variable
 Description :
	Take care of the simple case of setting a variable
	or giving its value or range.  All values are assumed
	decimal.

	cmd_ptr - points to the next character
	after the command.

	"?" - print the current value of *optionPtr
	"=val" - assign val to *optionPtr
	"=?" - print the allowed range "(0-255)"

	Return TRUE if success, FALSE if failure.
****************************************************************************/
byte at_voice_variable(byte *cmd_ptr, byte *optionPtr)
{
	byte len;
	word num;

	if ( (cmd_ptr[0] == '?') && (cmd_ptr[1] == 0) )
	{
		at_output_decbyte(*optionPtr);
	}
	else if ( cmd_ptr[0] == '=' )
	{
		if ( (cmd_ptr[1] == '?') && (cmd_ptr[2] == 0) )
		{
			at_output_msg2((byte *) "(0-255)");
		}
		else
		{
			len = (byte) at_atoi(&cmd_ptr[1], &num, DECIMAL);
			if ( !len || (num>255) )
			{
				at_cmd_err_ret();
				return FALSE;
			}
			else
			{
				// Assign the value
				*optionPtr = (byte)num ;
			}
		}
	}
	else
	{
		at_cmd_err_ret();
		return FALSE;
	}

	G(at_result_code) = OK;
	return TRUE;
}

/****************************************************************************
 Routine : at_voice
 Description :
	This routine parses the "at+v" commands.

****************************************************************************/
void at_voice(void)
{
	byte ch[ATMAX];         // voice command buffer
	byte *voice_cmd_ptr;    // voice command pointer
	byte txchar[50] ;
	byte more_cmd, len=0;
	word len1;
	word num=0, num1;

#if defined (V253) && defined (V25TER)
	long nums[10];
	byte temp_VoiceSamplingRate=0;
#endif	//V253 && V25TER

	more_cmd = 0 ;
	voice_cmd_ptr = ch;
	txchar[0] = *G(at_cmd_ptr)++;
	while ( (txchar[0] != 0) && (txchar[0] != ';') )
	{
		/*
		 * put one voice command to ch
		 */
		*voice_cmd_ptr++ = txchar[0];
		txchar[0] = *G(at_cmd_ptr)++;
	}
	*voice_cmd_ptr = 0;          // terminate ch with NULL

	if (txchar[0] == ';')
		more_cmd = 1;           // not end yet

	G(at_result_code) = OK;		// think positive.

#ifdef CALLER_ID
	/*
	 * AT+VCID? AT+VCID=? AT+VCID=value
	 */
	if ( (ch[0] == 'C') && (ch[1] == 'I') && (ch[2] == 'D') )
	{
		if ( (ch[3] == '?') && (ch[4] == 0) )
		{
			at_output_decbyte(G(S).ModemOptions.CallerId);
		}
		else if ( ch[3] == '=' )
		{
			if ( (ch[4] == '?') && (ch[5] == 0) )
			{
				at_output_msg2((byte *) "(0-2)");
			}
			else
			{
				len = (byte) at_atoi(&ch[4], &num,DECIMAL);
				if ( (ch[4+len] != 0) || (num > 2) )
				{
					at_cmd_err_ret();
					return;
				}
				G(S).ModemOptions.CallerId = (byte) num;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
#endif	//CALLER_ID
	/*
	 * AT+VDR? AT+VDR=? AT+VDR=enable,report - Distinctive ring
	 */
	else if ( (ch[0] == 'D') && ( ch[1] == 'R') )
	{
		if ( ch[2] == '?' )
		{
			byte report[5];

			at_itoa ( G(S).ModemOptions.DistinctiveRing, txchar,DECIMAL);
			x_strcat ( txchar, (CBP) "," ) ;
			at_itoa(G(S).ModemOptions.RingReportInterval, report, DECIMAL);
			x_strcat(txchar, report);
			at_output_msg2(txchar);
		}
		else if ( ch[2] == '=' )
		{
			if ( ch[3] == '?' )
			{
				at_output_msg2((byte *) "(0,1),(0-255)");
			}
			else
			{
				len = (byte) at_atoi( &ch[3], &num,DECIMAL);
				if ( (ch[3+len] != ',') || ((num != 0) && (num != 1)) )
				{
					at_cmd_err_ret () ;
					return ;
				}
				len1 = at_atoi( &ch[4+len], &num1,DECIMAL);
				if ( ( ch[4+len+len1] != 0 ) || ( num1 > 255 ) )
				{
					at_cmd_err_ret () ;
					return ;
				}
				G(S).ModemOptions.DistinctiveRing = (byte) num ;
				G(S).ModemOptions.RingReportInterval = (byte) num1 ;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+VNH? AT+VNH=? AT+VNH=<hook> - Automatic Hang-up Control 
	 */
	else if ( (ch[0] == 'N') && ( ch[1] == 'H') )
	{
		if ( ch[2] == '?' )
		{
			at_output_decbyte(G(S).ModemOptions.HangupControl);
		}
		else if ( ch[2] == '=' )
		{
			if ( ch[3] == '?' )
			{
				at_output_msg2((byte *) "(0,2)");
			}
			else
			{
				len = (byte) at_atoi(&ch[3], &num,DECIMAL);
				if ( (ch[3+len] != 0) || ((num!=0)&&(num!=2)) )
				{
					at_cmd_err_ret();
					return;
				}
				G(S).ModemOptions.HangupControl = (byte) num;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+VIT? AT+VIT=? AT+VIT=<timer> - DTE/DCE Inactivity Timer 
	 */
	else if ( (ch[0] == 'I') && (ch[1] == 'T') )
	{
		if (!at_voice_variable(&ch[2], &G(S).ModemOptions.DteInactivityTimer))
			return;
	}
	//----------------------------------------------------------------
	// The rest of the VOICE commands will operate only in Voice mode.
	//----------------------------------------------------------------
	else if ((G(x_modem_mode) != MODEM_VOICE)
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
		&& (G(x_modem_mode) != MODEM_SPEAKER_PHONE)
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
		)
	{
		at_cmd_err_ret();
		return;
	}
	

	//  AT+VEM? AT+VEM=? AT+VEM=<mask> - Event Reporting and Masking 
	else if ( (ch[0] == 'E') && (ch[1] == 'M') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			len1 = 8 ;		// 8 hex digits

			/* convert the Event Mask to 9 hex digits */
			for (len=1;  len <=len1; len++ )
			{
				/* map the Event Mask to hex digit */
				num = 0 ;
				switch ( len )
				{
					case 1 :
						/* hex digit 1: 0123 <= 0230 0000 0000 0000 */
						num |= (G(S).ModemOptions.VoiceEventMask>>12)&0x8;
						num |= (G(S).ModemOptions.VoiceEventMask>>13)&0x3;
						break ;
					case 2 :
						/* hex digit 2: 4567 => 0234 6700 0000 0000 */
						num |= (G(S).ModemOptions.VoiceEventMask>>9)&0x8 ;
						num |= (G(S).ModemOptions.VoiceEventMask>>10)&0x3 ;
						break ;
					case 3 :
						/* hex digit 3: 8901 => 0234 6789 0000 0000 */
						/*                11                        */
						num |= (G(S).ModemOptions.VoiceEventMask>>6)&0xC ;
						break ;
					case 4 :
						/* hex digit 4: 2345 => 0234 6789 0000 0000 */
						/*              1111                        */
						break ;
					case 5 :
						/* hex digit 5: 6789 => 0234 6789 9000 0000 */
						/*              1111              1         */
						num |= (G(S).ModemOptions.VoiceEventMask>>7)&0x1;
						break ;
					case 6 :
						/* hex digit 6: 0123 => 0234 6789 9000 0000 */
						/*              2222              12        */
						num |= (G(S).ModemOptions.VoiceEventMask>>3)&0x8;
						break ;
					case 7 :
						/* hex digit 7: 4567 => 0234 6789 9000 0000 */
						/*              2222              12        */
						break ;
					case 8 :
						/* hex digit 8: 8901 => 0234 6789 9000 0000 */
						/*              2233              12        */
						break ;
					}
					if ( num >= 0x0A )
						txchar[len-1] = (byte)(num+'7');
					else
						txchar[len-1] = (byte)(num+'0');
		 	}
			txchar[len1] = 0 ;
			at_output_msg2(txchar);
		}
		else if ( ch[2] == '=' )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				x_send_at_io_data((byte *) "\r\n\"C\"\r\n");
				x_send_at_io_data((byte *) "0BC01800\r\n");
				x_send_at_io_data((byte *) "0BC01800\r\n");
				x_send_at_io_data((byte *) "BBC01800\r\n");
			}
			else
			{
				len1 = 8 ;		// 8 hex digits

				if ( ch[3+len1] != 0 )
				{
					at_cmd_err_ret() ;
					return ;
				}
				/* convert the 9 hex digit to 5 bytes */
				num1 = 0 ;
				for (len=1;  len <=len1; len++ )
				{
					if ( (ch[2+len]>='0') && (ch[2+len]<='9') )
             			num = (word) (num*16 + (ch[2+len]-'0'));
					else if ( (ch[2+len]>='A') && (ch[2+len]<='F') )
							num = (word) (num*16 + (ch[2+len]-'A'+10));
					else 
					{
						at_cmd_err_ret() ;
						return ;
					}
					/* map the hex digits to the Event Mask */
					switch ( len )
					{
						case 1 :
							/* hex digit 1: 0123 => 0230 0000 0000 0000 */
							num = (word) (num << 12);
							num1 |= (num&0x8000);
							num1 |= ((num<<1)&0x6000);
							break ;
						case 2 :
							/* hex digit 2: 4567 => 0234 6700 0000 0000 */
							num = (word) (num << 9);
							num1 |= (num&0x1000);
							num1 |= ((num<<1)&0x0C00);
							break ;
						case 3 :
							/* hex digit 3: 8901 => 0234 6789 0000 0000 */
							/*                11                        */
							num = (word) (num << 6);
							num1 |= (num&0x0300);
							break ;
						case 4 :
							/* hex digit 4: 2345 => 0234 6789 0000 0000 */
							/*              1111                        */
							break ;
						case 5 :
							/* hex digit 5: 6789 => 0234 6789 9000 0000 */
							/*              1111              1         */
							num = (word) (num << 7);
							num1 |= (num&0x0080);
							break ;
						case 6 :
							/* hex digit 6: 0123 => 0234 6789 9000 0000 */
							/*              2222              12        */
							num = (word) (num << 3);
							num1 |= (num&0x0040);
							break ;
						case 7 :
							/* hex digit 7: 4567 => 0234 6789 9000 0000 */
							/*              2222              12        */
							break ;
						case 8 :
							/* hex digit 8: 8901 => 0234 6789 9000 0000 */
							/*              2233              12        */
							break ;
					}
				}
				G(S).ModemOptions.VoiceEventMask = num1 ;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+VGR? AT+VGR=? AT+VGR=value - rx volume gain
	 */
	else if ( (ch[0] == 'G') && ((ch[1] == 'R')||(ch[1] == 'M')) )
	{
		if (!at_voice_variable(&ch[2], &G(S).ModemOptions.VoiceMicGainControl))
			return;

		// Update DP on assignment of new value
		if ( (ch[2] == '=') && (ch[3] != '?') )
			x_send_mail_dp1(VOICE_MIC_GAIN_CONTROL);
	}
	/*
	 * AT+VGT? AT+VGT=? AT+VGT=value - tx volume gain - VGS
	 */
	else if ( (ch[0] == 'G') && ((ch[1] == 'T')||(ch[1] == 'S')) )
	{
		if (!at_voice_variable(&ch[2], &G(S).ModemOptions.VoiceVolumeControl))
			return;

		// Update DP on assignment of new value
		if ( (ch[2] == '=') && (ch[3] != '?') )
			x_send_mail_dp1(VOICE_GAIN_CONTROL);
	}
	/*
	 * AT+VIP - initialize voice parameters
	 */
	else if ( (ch[0] == 'I') && (ch[1] == 'P') && (ch[2] == 0) )
	{
		byte reg1,reg2 ;
		// preserve flow control across reset for VoiceView
		reg1 = G(S).ModemOptions.FlowControl ;
		reg2 = G(S).ModemOptions.EchoToDTE ;
		x_init_modem_options ();
		G(S).ModemOptions.FlowControl = reg1 ;
		G(S).ModemOptions.EchoToDTE = reg2 ;
	}
	/*
	 * AT+VPR=<rate> - DTE/DCE interface rate 
	 */
	else if ( (ch[0] == 'P') && (ch[1] == 'R') && (ch[2] == '=') )
	{
   		len = (byte) at_atoi(&ch[3], &num,DECIMAL);
   		if ( !len )
   		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+VLS? AT+VLS=? AT+VLS=value - voice line selection
	 */
	else if ( (ch[0] == 'L') && (ch[1] == 'S') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			at_output_decbyte(G(S).ModemOptions.VoiceLineSelection);
		}
		else if ( ch[2] == '=' )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				x_send_at_io_data(
					(byte *) "\r\n0,\"\",B0000000,B0000000,B0000000\r\n");
				x_send_at_io_data(
					(byte *) "1,\"T\",0BC01800,0BC01800,0BC01800\r\n");
				x_send_at_io_data(
					(byte *) "2,\"L\",00000000,00000000,B0000000\r\n");
				x_send_at_io_data(
					(byte *) "3,\"LT\",0BC01800,0BC01800,0BC01800\r\n");
				x_send_at_io_data(
					(byte *) "4,\"S\",00000000,00000000,B0000000\r\n");
				x_send_at_io_data(
					(byte *) "5,\"ST\",0BC01800,0BC01800,0BC01800\r\n");
				x_send_at_io_data(
					(byte *) "6,\"M\",00000000,00000000,B0000000\r\n");
				x_send_at_io_data(
					(byte *) "7,\"MST\",0BC01800,0BC01800,0BC01800\r\n");
			}
			else
			{
				len = (byte) at_atoi(&ch[3], &num,DECIMAL);
				if ( !len || (num > 7) ) //only phone line
				{
					at_cmd_err_ret() ;
					return ;
				}
				G(S).ModemOptions.VoiceLineSelection = (byte)num;
				switch ( num )
				{
					case 0 :
						/* DCE on-hook, local phone connected to telco*/
						x_send_mail_dp1(MC_ONHOOK);
						G(x_modem_mode) = MODEM_VOICE ;
						break ;
					case 1 :
						// DCE off-hook, DCE connected to Telco
						// for Far-end playback, or record
						// if we are already in speaker phone mode - return
						// to TAD mode
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
						if ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
						{
							x_send_mail_dp1(VOICE_STOP_SPKR_PHONE);
							G(x_modem_mode) = MODEM_VOICE ;
						}
						else
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
							x_send_mail_dp1(MC_OFFHOOK);
						break ;
					case 2 :	// DCE on-hook,local phone connected to DCE
						/* record/playback greeting from/to local phone */
						x_send_mail_dp1(VOICE_LOCAL_PHONE_CONNECT);
						break ;
					case 3 :	// DCE off-hook,local phone connected to telco
						/* simple voice connection */
						x_send_mail_dp1(MC_OFFHOOK);
						break ;
					case 4 :	// Speaker connected to DCE,DCE on-hook
						/* Near-end playback */
						break ;
					case 5 :	// Speaker connected to DCE,DCE off-hook
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
						if ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
						{
							// mute speaker phone
							x_send_mail_dp1(VOICE_MUTE_SPKR_PHONE);
						}
						else
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
						{
							/* Screen In or Screen Out */
							x_send_mail_dp1(MC_OFFHOOK);
							x_send_mail_dp1(VOICE_SCREEN_OUT);
						}
						break ;
					case 6 :	// Mic connected to DCE, DCE onhook
						/* Near-end record */
						break ;
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
					case 7 :	//mic and speaker connected, DCE off-hook
						// For taking speaker phone off-hook, AND
						// returning to non-mute mode for call-in-progress
						if ( G(x_modem_mode) != MODEM_SPEAKER_PHONE )
						{
							G(x_modem_mode) = MODEM_SPEAKER_PHONE ;
							x_send_mail_dp1(VOICE_SPEAKER_PHONE);

						}
						else //already in speaker phone mode - unmute mic
						{
							x_send_mail_dp1(VOICE_UNMUTE_SPKR_PHONE);
						}
						break ;
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
				}
			}
		}
		else
		{
			at_cmd_err_ret() ;
			return ;
		}
	}
	/*
	 * AT+VRA? AT+VRA=? AT+VRA=value - ringback go away timer
	 * AT+VRN? AT+VRN=? AT+VRN=value - ringback never came timer
	 */
	else if ( (ch[0] == 'R') && (( ch[1] == 'A')||(ch[1] == 'N')) )
	{
		if (!at_voice_variable(&ch[2],
							   (ch[1] == 'A') ?
							   &G(S).ModemOptions.RingbackGoAway :
							   &G(S).ModemOptions.RingbackNeverCame))
		{
			return;
		}
	}
	/*
	 * AT+VRX & AT+VTX - voice receive and transmit
	 */
	else if ( (ch[1] == 'X') &&
		  		(( ch[0] == 'T') || (ch[0] == 'R')) && (ch[2]==0) )
	{
		switch ( ch[0])
		{
			case 'R':
				x_send_mail ( VOICE_RX, IO_TASK, NULL, 0 ) ;
				if ( G(S).ModemOptions.VoiceLineSelection == 1 )
				{
					/* line record */
					x_send_mail_dp1(VOICE_LINE_RECORD);
				}
				else if ( G(S).ModemOptions.VoiceLineSelection == 2 )
				{
					/* local phone record */
					x_send_mail_dp1(VOICE_LOCAL_PHONE_RECORD);
				}
				else if ( G(S).ModemOptions.VoiceLineSelection == 5 ) 
				{
					/* screen in */
					x_send_mail_dp1(VOICE_SCREEN_IN);
				}
				else if ( G(S).ModemOptions.VoiceLineSelection == 7 )
				{
					/* screen in */
					x_send_mail_dp1(VOICE_SCREEN_IN);
				}
				else
				{
					/* Near-end record */
					x_send_mail_dp1(VOICE_NEAR_RECORD);
				}
				break ;

			case 'T':
				x_send_mail ( VOICE_TX, IO_TASK, NULL, 0 ) ;
				if ( G(S).ModemOptions.VoiceLineSelection == 1 )
				{
					/* line play back */
					x_send_mail_dp1(VOICE_LINE_PLAYBACK);
				}
				else if ( G(S).ModemOptions.VoiceLineSelection == 2 )
				{
					/* local phone play back */
					x_send_mail_dp1(VOICE_LOCAL_PHONE_PLAYBACK);
				}
				else if ( ( G(S).ModemOptions.VoiceLineSelection == 5 ) ||
						( G(S).ModemOptions.VoiceLineSelection == 7 ) )
				{
					/* screen out */
					x_send_mail_dp1(VOICE_SCREEN_OUT);
				}
				else
				{
					/* Near-end playback */
					x_send_mail_dp1(VOICE_NEAR_PLAYBACK);
				}
				break ;
		}
		G(at_result_code) = CONNECT;
	}

	/*
	 * AT+VSD? AT+VSD=? AT+VSD=<sds>,<sdi> - Silence Detection Timer
	 */
	else if ( (ch[0] == 'S') && (ch[1] == 'D') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			byte tmpch[5] ;

			at_itoa ( (word) G(S).ModemOptions.SilenceSensitivity, txchar,DECIMAL);
			x_strcat ( txchar, (CBP) ",") ;
			at_itoa ( (word) G(S).ModemOptions.SilenceDetectTimer, tmpch,DECIMAL);
			x_strcat ( txchar, tmpch ) ; 
			at_output_msg2(txchar);
		}
		else if ( (ch[2] == '=') && (ch[3] == '?') )
		{
			at_output_msg2((byte *) "(0-255),(0-255)");
		}
		else
		{
			len = (byte) at_atoi(&ch[3], &num,DECIMAL);
			if ( (ch[3+len] != ',') || (num >255) )
			{
				at_cmd_err_ret();
				return;
			}
			len1 = at_atoi(&ch[4+len], &num1,DECIMAL);
			if ( (ch[4+len+len1] != 0) || (num1 > 255) )
			{
				at_cmd_err_ret();
				return;
			}
			G(S).ModemOptions.SilenceSensitivity = (byte) num;
			G(S).ModemOptions.SilenceDetectTimer = (byte) num1;
		}
	}
	/*
	 * AT+VSM? AT+VSM=? AT+VSM=value
	 */
#if defined (V253) && defined (V25TER)
	else if ( (ch[0] == 'S') && (ch[1] == 'M') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			x_send_at_io_crlf();
			switch ( G(S).ModemOptions.VoiceCompression )
			{
			case VCM_LINEAR8:
				x_send_at_io_data((byte *) "1,\"UNSIGNED PCM\",8,0,") ;
				break ;
			case VCM_LINEAR16:
				x_send_at_io_data((byte *) "0,\"SIGNED PCM\",16,0,") ;
				break ;
			case VCM_ALAW8:
				x_send_at_io_data((byte *) "5,\"G.711A\",8,0,") ;
				break ;
			case VCM_ULAW8:
				x_send_at_io_data((byte *) "4,\"G.711U\",8,0,") ;
				break ;
			case VCM_IMA_ADPCM:
				x_send_at_io_data((byte *) "2,\"IMA ADPCM\",4,0,") ;
				break ;
#ifdef G729A
			case VCM_G729:
				x_send_at_io_data((byte *) "3,\"G.729A\",1,0,") ;
				break ;
#endif	//G729A
			}//end switch

			if ( G(S).ModemOptions.VoiceSamplingRate == VSM_7KHZ )
				x_send_at_io_data((byte *) "7200") ;
			if ( G(S).ModemOptions.VoiceSamplingRate == VSM_8KHZ)
				x_send_at_io_data((byte *) "8000") ;
			if ( G(S).ModemOptions.VoiceSamplingRate == VSM_11KHZ )
				x_send_at_io_data((byte *) "11025") ;

			x_send_at_io_data((byte *) ",0,0") ;
			x_send_at_io_crlf();
		}//end +vsm?
		else if ( (ch[2] == '=') )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				x_send_at_io_crlf();
				x_send_at_io_data(
					(byte *) "0,\"SIGNED PCM\",16,0,(7200,8000,11025),0,0");
				x_send_at_io_crlf();
				x_send_at_io_data(
					(byte *) "1,\"UNSIGNED PCM\",8,0,(7200,8000,11025),0,0");
				x_send_at_io_crlf();
				x_send_at_io_data(
					(byte *) "2,\"IMA ADPCM\",4,0,(7200,8000,11025),0,0");
#ifdef G729A
				x_send_at_io_crlf();
				x_send_at_io_data((byte *) "3,\"G.729A\",1,0,(8000),0,0");
#endif	//G729A
				x_send_at_io_crlf();
				x_send_at_io_data((byte *) "4,\"ULAW\",8,0,(8000),0,0");
				x_send_at_io_crlf();
				x_send_at_io_data((byte *) "5,\"ALAW\",8,0,(8000),0,0");
				x_send_at_io_crlf();
			}//end +vsm=?
			else
			{
				x_strcpy(txchar, (CBP) VSM_RANGE ) ;
				if (at_withinrange( &ch[3], txchar, nums))
				{
					if ( ( nums[0] < 0 ) || ( nums[1] < 0 )
						|| ( nums[2] < 0 ) || ( nums[3] < 0 ) )
					{
						at_cmd_err_ret() ;
						return ;
					}//end if

					switch ( nums[0] )		//VoiceCompression
					{
					case VCM_UNSIGNED_LINEAR_V253:
					case VCM_SIGNED_LINEAR_V253:
					case VCM_IMA_ADPCM_V253:
						switch ( nums[1] )
						{
						case 7200:
							temp_VoiceSamplingRate = VSM_7KHZ ;
							break ;
						case 8000:
							temp_VoiceSamplingRate = VSM_8KHZ ;
							break ;
						case 11025:
							temp_VoiceSamplingRate = VSM_11KHZ ;
							break ;
						}//end switch nums[1]
						break;
					case VCM_ALAW_V253:
					case VCM_ULAW_V253:
#ifdef G729A
					case VCM_G729_V253:
#endif	//G729A
						switch ( nums[1] )
						{
						case 8000:
							temp_VoiceSamplingRate = VSM_8KHZ ;
							break ;
						default:
							at_cmd_err_ret() ;
							return ;
						}//end switch nums[1]
						break;
					}//end switch nums[0]
					//convert the V.253 format value into original format
					num = (byte) nums[0];
					switch ( nums[0] )
					{
						case VCM_SIGNED_LINEAR_V253:
							num =  VCM_LINEAR16 ;
							break ;
						case VCM_UNSIGNED_LINEAR_V253:
							num =  VCM_LINEAR8 ;
							break ;
						case VCM_IMA_ADPCM_V253:
							num =  VCM_IMA_ADPCM ;
							break ;
						case VCM_ULAW_V253:
							num =  VCM_ULAW8 ;
							break ;
						case VCM_ALAW_V253:
							num =  VCM_ALAW8 ;
							break ;
#ifdef G729A
						case VCM_G729_V253:
							num =  VCM_G729 ;
							break ;
#endif	//G729A
					}//end switch

					// save the inputs here
					G(S).ModemOptions.VoiceCompression = (byte) num;
					G(S).ModemOptions.VoiceSamplingRate = temp_VoiceSamplingRate ;

#ifdef G729A
					if (G(S).ModemOptions.VoiceCompression == VCM_G729)
						dp_ctad_download();
#endif	//G729A
				}//end if (withinrange)
				else
				{
					at_cmd_err_ret();
					return;
				}//end if withinrange
			}//end +vsm=? +vsm=xxx
		}//end +vsm? +vsm=
		else
		{
			at_cmd_err_ret();
			return;
		}//end +vsm? +vsm=
	}//end +vsm
#else	//V253 && V25TER
	// do the original way
	else if ( (ch[0] == 'S') && (ch[1] == 'M') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			at_itoa ( (word) G(S).ModemOptions.VoiceCompression, txchar,DECIMAL);
			if ( G(S).ModemOptions.VoiceCompression == VCM_LINEAR8 )
				x_strcat ( txchar, ",\"8-BIT LINEAR\",") ;
			else if ( G(S).ModemOptions.VoiceCompression == VCM_LINEAR16 )
				x_strcat ( txchar, ",\"16-BIT LINEAR\",") ;
			else if ( G(S).ModemOptions.VoiceCompression == VCM_ALAW8 )
				x_strcat ( txchar, ",\"8-BIT A-LAW\",") ;
			else if ( G(S).ModemOptions.VoiceCompression == VCM_ULAW8 )
				x_strcat ( txchar, ",\"8-BIT U-LAW\",") ;
			else if ( G(S).ModemOptions.VoiceCompression == VCM_IMA_ADPCM )
				x_strcat ( txchar, ",\"IMA ADPCM\",") ;
#ifdef G729A
			else if (G(S).ModemOptions.VoiceCompression == VCM_G729 )
				x_strcat( txchar, ",\"G.729A\",") ;
#endif

			if ( G(S).ModemOptions.VoiceSamplingRate == VSM_7KHZ )
				x_strcat ( txchar, "7200") ;
			else if ( G(S).ModemOptions.VoiceSamplingRate == VSM_8KHZ)
				x_strcat ( txchar, "8000") ;
			else if ( G(S).ModemOptions.VoiceSamplingRate == VSM_11KHZ )
				x_strcat ( txchar, "11025") ;
			at_output_msg2(txchar);
		}
		else if ( (ch[2] == '=') )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				len1 = (word) G(S).ModemOptions.ResultCodeFormat ;
				G(S).ModemOptions.ResultCodeFormat = 0 ;
				at_output_msg ("\r", 1) ;
				at_itoa ( (word) VCM_LINEAR8, txchar,DECIMAL);
				x_strcat(txchar, ",\"8-BIT LINEAR\",");
				x_strcat(txchar, "(7200,8000,11025)");
				at_output_msg(txchar, x_strlen(txchar));
				at_itoa ( (word) VCM_LINEAR16, txchar,DECIMAL);
				x_strcat(txchar, ",\"16-BIT LINEAR\",");
				x_strcat(txchar, "(7200,8000,11025)");
				at_output_msg(txchar, x_strlen(txchar));
				at_itoa ( (word) VCM_ALAW8, txchar,DECIMAL);
				x_strcat(txchar, ",\"8-BIT ALAW\",");
				x_strcat(txchar, "(8000)");
				at_output_msg(txchar, x_strlen(txchar));
				at_itoa ( (word) VCM_ULAW8, txchar,DECIMAL);
				x_strcat(txchar, ",\"8-BIT ULAW\",");
				x_strcat(txchar, "(8000)");
				at_output_msg(txchar, x_strlen(txchar));
				at_itoa ( (word) VCM_IMA_ADPCM, txchar,DECIMAL);
				x_strcat(txchar, ",\"IMA ADPCM\",");
				x_strcat(txchar, "(7200,8000,11025)");
				at_output_msg(txchar, x_strlen(txchar));
#ifdef G729A
				at_itoa ( (word) VCM_G729, txchar,DECIMAL);
				x_strcat(txchar, ",\"G.729A\",");
				x_strcat(txchar, "(8000)");
				at_output_msg(txchar, x_strlen(txchar));
#endif
				G(S).ModemOptions.ResultCodeFormat = (byte) len1 ;
			}
			else
			{
				len = (byte) at_atoi(&ch[3], &num,DECIMAL);
				if ( ((ch[3+len] != 0) &&
					  (ch[3+len] != ',' )) ||
					 (num < VCM_1ST_VAL) || (num > VCM_LAST_VAL) )
				{
					at_cmd_err_ret();
					return;
				}
				if ( ch[3+len] == ',' )
				{
					at_atoi (&ch[3+len+1], &num1,DECIMAL);
					switch ( num1 )
					{
						case 7200:
							G(S).ModemOptions.VoiceSamplingRate = VSM_7KHZ ;
							break ;
						case 8000:
							G(S).ModemOptions.VoiceSamplingRate = VSM_8KHZ ;
							break ;
						case 11025:
							G(S).ModemOptions.VoiceSamplingRate = VSM_11KHZ ;
							break ;
						default:
							at_cmd_err_ret() ;
							return ;
					}
				}
				G(S).ModemOptions.VoiceCompression = (byte) num;
				if ( (G(S).ModemOptions.VoiceCompression == VCM_ALAW8) ||
					 (G(S).ModemOptions.VoiceCompression == VCM_ULAW8) 
#ifdef G729A
					|| (G(S).ModemOptions.VoiceCompression == VCM_G729) )
#else
					)
#endif
						 G(S).ModemOptions.VoiceSamplingRate = VSM_8KHZ ;
#ifdef G729A
				if (G(S).ModemOptions.VoiceCompression == VCM_G729)
					dp_ctad_download();
#endif
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
#endif	//V253 && V25TER
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
	/*
	 * AT+VSP=value
	 */
	else if ((ch[0]=='S')&&(ch[1]=='P')&&(ch[2]=='=')&&(ch[4]==0))
	{
		if ( ch[3] == '1' )
		{
			G(S).ModemOptions.VoiceLineSelection = 7;
			// For taking speaker phone off-hook, AND
			// returning to non-mute mode for call-in-progress
			if ( G(x_modem_mode) != MODEM_SPEAKER_PHONE )
			{
				G(x_modem_mode) = MODEM_SPEAKER_PHONE ;
				x_send_mail_dp1(VOICE_SPEAKER_PHONE);
			}
			else //already in speaker phone mode - unmute mic
			{
				x_send_mail_dp1(VOICE_UNMUTE_SPKR_PHONE);
			}
		}
		else if ( ch[3] == '0' )
		{
			if ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
			{
				G(S).ModemOptions.VoiceLineSelection = 5;
				// mute speaker phone
				x_send_mail_dp1(VOICE_MUTE_SPKR_PHONE);
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
	/*
	 * AT+VTD? AT+VTD=? AT+VTD=<dur> - Beep Tone Duration Timer
	 */
	else if ( (ch[0] == 'T') && ( ch[1] == 'D') )
	{
		if ( (ch[2] == '?') && (ch[3] == 0) )
		{
			// word value for BeepToneTimer, can't use at_output_decbyte()
			at_itoa(G(S).ModemOptions.BeepToneTimer, txchar,DECIMAL);
			at_output_msg2(txchar);
		}
		else if ( (ch[2] == '=') )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				at_output_msg2((byte *) "(0-400)");
			}
			else
			{
				len = (byte) at_atoi(&ch[3], &num,DECIMAL);
				if ( (ch[3+len] != 0) || (num > 400) )
				{
					at_cmd_err_ret();
					return;
				}
				G(S).ModemOptions.BeepToneTimer = num;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+VTS=? AT+VTS=<string> - DTMF and tone generation
	 */
	else if ( (ch[0] == 'T') && ( ch[1] == 'S') )
	{
		if ( (ch[2] == '=') )
		{
			if ( (ch[3] == '?') && (ch[4] == 0) )
			{
				at_output_msg2((byte *) "(300-3000),(300-3000),(0-400)");
			}
			else
			{
				len = (byte) x_strlen ( &ch[3] ) ;
  				x_send_mail(VOICE_GENERATE_TONES,DP_TASK,&ch[3],len);
				G(at_result_code) = NO_MSG;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	else
	{
		at_cmd_err_ret();
		return;
	}

	if (more_cmd)
		atparse_cmd();
	else
	{
		if ( G(at_result_code) != NO_MSG )
			at_output_msg(NULL, 0);
		G(at_state) = AT_IDLE;
	}
}
#endif // VOICE
