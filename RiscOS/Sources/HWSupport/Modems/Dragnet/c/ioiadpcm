/*name and version number:@(#)ioiadpcm.c	1.11*/
/*date of get: 		  09/06/00 16:59:16*/
/*date of delta:	  01/05/99 12:31:30*/
/****************************************************************
File :	ioiadpcm.c
Description :
	Contains all routines for IMA ADPCM.

	This compression/decompression is done in line
	on the host processor.

Procedures Contained :
	io_ima_adpcm_coder() - compress
	io_ima_adpcm_decoder() - decompress

Revision History :
	Initials	Date		Change
	MAH		9/27/95		originated
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "allglobs.h"

#ifdef VOICE
/*
** Intel/DVI ADPCM coder/decoder.
**
** The algorithm for this coder was taken from the IMA Compatability Project
** proceedings, Vol 2, Number 2; May 1992.
**
** Version 1.2, 18-Dec-92.
**
*/

#ifndef __STDC__
#define signed
#endif

#define LOWER_FIRST

/* Intel ADPCM step variation table */
const signed char indexTable[16] = {
    -1, -1, -1, -1, 2, 4, 6, 8,
    -1, -1, -1, -1, 2, 4, 6, 8,
};

const short stepsizeTable[89] = {
    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,
    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,
    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,
    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,
    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,
    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,
    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,
    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,
    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767
};
    
struct 
{
	int val;		/* Current input sample value */
	byte sign;		/* Current adpcm sign bit */
	byte delta;		/* Current adpcm output value */
	int diff;		/* Difference between val and valprev */
	int step;		/* Stepsize */
	int valpred;		/* Predicted output value */
	int vpdiff;		/* Current change to valpred */
	signed char index;	/* Current step change index */
	byte bufferstep;	/* toggle between outputbuffer/output */
} IMA;


void
io_ima_adpcm_coder(word *indata, byte *outdata, int len,
		   struct ima_adpcm_state *state)
{
    short *inp;		/* Input buffer pointer */
    byte *outp;		/* output buffer pointer */
    byte outputbuffer;	/* place to keep previous 4-bit value */

#if defined( MODEM_ARM )
    outputbuffer = 0 ;
#endif
    outp = (byte *)outdata;
    inp = (short *) indata;

    IMA.valpred = state->valprev;
    IMA.index = state->index;
    IMA.step = stepsizeTable[IMA.index];
    
    IMA.bufferstep = 1;

    for ( ; len > 0 ; len-- ) {
	IMA.val = *inp++;

	/* Step 1 - compute difference with previous value */
	if (IMA.val < IMA.valpred)
	{
		IMA.delta = IMA.sign = 8;
		IMA.diff = IMA.valpred - IMA.val;
	}
	else
	{
		IMA.delta = IMA.sign = 0;
		IMA.diff = IMA.val - IMA.valpred;
	}
	
	/* Step 2 - Divide and clamp */
	/* Note:
	** This code *approximately* computes:
	**    delta = diff*4/step;
	**    vpdiff = (delta+0.5)*step/4;
	** but in shift step bits are dropped. The net result of this is
	** that even if you have fast mul/div hardware you cannot put it to
	** good use since the fixup would be too expensive.
	*/

	IMA.vpdiff = (IMA.step >> 3);
	
	if ( IMA.diff >= IMA.step ) {
	    IMA.delta |= 4;
	    IMA.diff -= IMA.step;
	    IMA.vpdiff += IMA.step;
	}
#if defined(__IAR_SYSTEMS_ICC)
        {
            int tmp = IMA.step >> 1;
            IMA.step = tmp;
        }
#else        
	IMA.step >>= 1;
#endif        
	if ( IMA.diff >= IMA.step  ) {
	    IMA.delta |= 2;
	    IMA.diff -= IMA.step;
	    IMA.vpdiff += IMA.step;
	}
#if defined(__IAR_SYSTEMS_ICC)
        {
            int tmp = IMA.step >> 1;
            IMA.step = tmp;
        }
#else        
	IMA.step >>= 1;
#endif        
	if ( IMA.diff >= IMA.step ) {
	    IMA.delta |= 1;
	    IMA.vpdiff += IMA.step;
	}

	/* Step 3 - Update previous value */
	if ( IMA.sign )
	  IMA.valpred -= IMA.vpdiff;
	else
	  IMA.valpred += IMA.vpdiff;

#ifndef MODEM_Z80
	/* Step 4 - Clamp previous value to 16 bits.
	 * (I'm skipping this for the Z80 case since
         * it has an internal 16 bit word - MAH
	 */
	if ( IMA.valpred > 32767 )
	  IMA.valpred = 32767;
	else if ( IMA.valpred < -32768 )
	  IMA.valpred = -32768;
#endif

	/* Step 5 - Update index and step values */
	
	IMA.index += indexTable[IMA.delta];
	if ( IMA.index < 0 ) IMA.index = 0;
	if ( IMA.index > 88 ) IMA.index = 88;
	IMA.step = stepsizeTable[IMA.index];

	/* Step 6 - Output value */
	if ( IMA.bufferstep )
	{
#ifdef LOWER_FIRST
		outputbuffer = IMA.delta;
#else
		outputbuffer = IMA.delta << 4;
#endif
	} else {
#ifdef LOWER_FIRST
		*outp++ = (IMA.delta << 4) | outputbuffer;
#else
		*outp++ = IMA.delta | outputbuffer;
#endif
	}
	IMA.bufferstep ^= 1;
    }

    /* Output last step, if needed */
    if ( !IMA.bufferstep )
      *outp++ = outputbuffer;
    
    state->valprev = IMA.valpred;
    state->index = IMA.index;
}

//KX <<AM_DS
#ifdef KORTEX
void 
io_ima_adpcm_decoder(byte *indata, word *outdata, int len,
		     struct ima_adpcm_state *state, word wAmResetCompression)
#else	 // AM_DS
void
io_ima_adpcm_decoder(byte *indata, word *outdata, int len,
		     struct ima_adpcm_state *state)
#endif			
//KX AM_DS>>
{
    byte *inp;  		/* Input buffer pointer */
    word *outp; 		/* output buffer pointer */
    byte inputbuffer;		/* place to keep next 4-bit value */

#if defined( MODEM_ARM )
    inputbuffer = 0 ;
#endif
    outp = (word *) outdata;
    inp = (byte *) indata;

    IMA.valpred = state->valprev;
    IMA.index = state->index;
//KX <<AM_DS
#ifdef KORTEX
	 if (wAmResetCompression)
	 {
		 IMA.valpred = 0;
		 IMA.index = 0;
	 }
#endif			
//KX AM_DS>>
    IMA.step = stepsizeTable[IMA.index];

    IMA.bufferstep = 0;
    
    for ( ; len > 0 ; len-- ) {
	
	/* Step 1 - get the delta value */
	if ( IMA.bufferstep ) {
#ifdef LOWER_FIRST
	    IMA.delta = (inputbuffer >> 4) & 0xf;
#else
	    IMA.delta = inputbuffer & 0xf;
#endif
	} else {
	    inputbuffer = *inp++;
#ifdef LOWER_FIRST
	    IMA.delta = inputbuffer & 0xf;
#else
	    IMA.delta = (inputbuffer >> 4) & 0xf;
#endif
	}
	IMA.bufferstep ^= 1;

	/* Step 2 - Find new index value (for later) */
	IMA.index += indexTable[IMA.delta];
	if ( IMA.index < 0 ) IMA.index = 0;
	if ( IMA.index > 88 ) IMA.index = 88;

	/* Step 3 - Separate sign and magnitude */
	IMA.sign = IMA.delta & 8;
	IMA.delta = IMA.delta & 7;

	/* Step 4 - Compute difference and new predicted value */
	/*
	** Computes 'vpdiff = (delta+0.5)*step/4', but see comment
	** in adpcm_coder.
	*/
	IMA.vpdiff = IMA.step >> 3;
	if ( IMA.delta & 4 ) IMA.vpdiff += IMA.step;
	if ( IMA.delta & 2 ) IMA.vpdiff += IMA.step>>1;
	if ( IMA.delta & 1 ) IMA.vpdiff += IMA.step>>2;

	if ( IMA.sign )
	  IMA.valpred -= IMA.vpdiff;
	else
	  IMA.valpred += IMA.vpdiff;

	/* Step 5 - clamp output value */
#ifndef MODEM_Z80
	if ( IMA.valpred > 32767 )
	  IMA.valpred = 32767;
	else if ( IMA.valpred < -32768 )
	  IMA.valpred = -32768;
#endif

	/* Step 6 - Update step value */
	IMA.step = stepsizeTable[IMA.index];

	/* Step 7 - Output value */
	*outp++ = IMA.valpred;
    }

    state->valprev = IMA.valpred;
    state->index = IMA.index;
}
#endif
