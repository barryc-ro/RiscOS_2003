/*name and version number:@(#)mnp_bg.c	1.74*/
/*date of get: 		  12/15/00 10:10:41*/
/*date of delta:	  11/30/00 16:58:58*/
/****************************************************************
File :	mnp_bg.c

Description :
	Contains all mnp background functions (mnp states).
Procedures Contained :
	mnp_init
	mnp_disconnect
	mnp_background
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "mnp.h"

#ifdef CS_MODEM
#include "csglob.h"
#endif

#ifdef CS_DEBUG
 #include "mnp_bg.h"
#endif
#include "allglobs.h"


/****************************************************************
Routine : mnp_init
Description :
	init mnp variables - transmit initial LR frame if originator.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
void mnp_init ( void )
{
	G(lapm_state) = LAPM_IDLE ;
	G(io_state) = IO_MNP;
	mnp_init_variables () ;
	io_init_dce_tx_fifo () ;	// init dce transmit fifo
	x_send_mail ( DP_ASYNC_8BIT_MODE, DP_TASK, NULL, 0 ) ;
	if ( G(x_modem_originate) == TRUE )
	{
		mnp_build_lr_frame() ;
		mnp_tx_octet_frame() ;
		G(mnp_state) = MNP_ORIG_WAIT_LR ;
		x_debug_msg("mnp - entering MNP_ORIG_WAIT_LR") ;
	}
	else
	{
		G(mnp_state) = MNP_ANSW_INITIAL ;
		x_debug_msg("mnp - entering MNP_ANSW_INITIAL") ;
	}
	lapm_reset_timer () ;
}

/****************************************************************
Routine : mnp_disconnect
Description :
	send disconnect frame to remote
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
void mnp_disconnect ( void )
{
	G(mnp_state) = MNP_DISC_CMD ;
	lapm_reset_timer() ;
}

/****************************************************************
Routine : mnp_background
Description :
	mnp background state process
Parameters in :
	none
Parameters out :
	TRUE - stay in mnp state 
	FALSE - mnp init failed, return to buffered mode
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
byte mnp_background ( void )
{
	byte frametype ;
	word tmp_int ;

	switch ( G(mnp_state) )
	{
		case MNP_ORIG_INITIAL:
			mnp_build_lr_frame() ;
			mnp_tx_octet_frame() ;
			lapm_reset_timer() ;
			G(mnp_state) = MNP_ORIG_WAIT_LR ;
			x_debug_msg("mnp - entering MNP_ORIG_WAIT_LR") ;
			break ;
			
		case MNP_ORIG_WAIT_LR: //originator has sent lr and awaits a response
			mnp_rx_data() ;
			if ( (frametype = mnp_rx_frame_type()) == PDU_LR )
			{
				if ( mnp_negotiate_params() == TRUE )
				{
 					x_debug_msg("mnp - org. negotiation OK") ;
					//build and send confirming la frame
					if ( G(mnp_fixed_field_opt_flag) == FALSE )
					{
						LCF.data[0] = 7 ;
						LCF.data[1] = PDU_LA ;
						LCF.data[2] = 1 ;
						LCF.data[3] = 1 ;
						LCF.data[4] = 0 ;
						LCF.data[5] = 2 ;
						LCF.data[6] = 1 ;
						LCF.data[7] = 0 ; //G(mnp_rk) ;
					}
					else //fixed field optimization for la frames
					{
						LCF.data[0] = 3 ;
						LCF.data[1] = PDU_LA ;
						LCF.data[2] = 0 ;
						LCF.data[3] = 0 ; //G(mnp_rk) ;
					}						
					LCF.status = FULL ;
					LCF.len = (byte) LCF.data[0] + 1 ;
					mnp_tx_octet_frame() ; //first la must go in octet mode
					lapm_reset_timer () ;
					
					if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
 					{
						G(mnp_state) = MNP_WAIT_FIFO_EMPTY ;
						x_debug_msg("mnp - bit mode; entering MNP_WAIT_FIFO_EMPTY") ;
					}
					else
					{
						G(mnp_state) = MNP_PRE_CONNECT ;
						x_debug_msg("mnp - byte mode; entering MNP_PRE_CONNECT") ;
					}
				}
				else //negotiation fails
				{
					x_debug_msg("mnp - org. negotiation failed") ;
					mnp_build_control_frame( PDU_LD ) ;
					mnp_tx_octet_frame() ;
#ifdef CS_MODEM
					disconnect_reason = MNP_BAD_PARAMETER;
#endif
					return ( FALSE ) ;
				}
			}
			else if ( lapm_timer_expired ( SECOND1 ) == TRUE )
			{
				x_debug_msg("mnp - org. timer expired waiting for LR") ;
				++G(mnp_retransmit) ;
				if ( (( G(S).ModemOptions.V42 == V42_MNP_DISC ) ||
				      ( G(S).ModemOptions.V42 == V42_LAPM_MNP_DISC )) &&
					 ( G(mnp_retransmit) < 5 ) )
						G(mnp_state) = MNP_ORIG_INITIAL ;
				else if ( G(mnp_retransmit) < 2 ) //V42 or MNP or buffer mode
						G(mnp_state) = MNP_ORIG_INITIAL ;
				else //timer expired and no retries left...
				{
#ifdef CS_MODEM
					disconnect_reason = MNP_RETRY_LIMIT;
#endif
					G(mnp_retransmit) = 0 ;
					G(mnp_state) = MNP_IDLE ;
					return ( FALSE ) ;
				}
			}                       
			break ;
				
		case MNP_WAIT_FIFO_EMPTY :
			if ( io_dce_tx_fifo_empty() == TRUE )
			{
 				if ( lapm_timer_expired ( MS400 ) )
				{
					x_send_mail ( DP_HDLC_MODE, DP_TASK, NULL, 0 ) ;
					G(mnp_state) = MNP_PRE_CONNECT ;
					x_debug_msg("mnp - bit mode; entering MNP_PRE_CONNECT") ;
				}
			}
			break ;
			
		case MNP_ANSW_INITIAL : //answerer is set & awaiting initial lr
			//following guard needed for correct V42-MNP link establishment
			if ( LRF.status != FULL )
				mnp_rx_data() ;
 			if ( (frametype = mnp_rx_frame_type()) == PDU_LR )
			{
				if ( mnp_negotiate_params() == TRUE )
				{
					x_debug_msg("mnp - answ. negotiation OK") ;
					mnp_build_lr_frame() ;
					mnp_tx_octet_frame() ; //must go out in octet mode
					lapm_reset_timer() ;
					G(mnp_state) = MNP_ANSW_WAIT_LA ;
					x_debug_msg("mnp - entering MNP_ANSW_WAIT_LA") ;
				}
				else //negotiation fails
				{
					x_debug_msg("mnp - answ. negotiation failed") ;
					mnp_build_control_frame( PDU_LD ) ;
					mnp_tx_octet_frame() ;
#ifdef CS_MODEM
					disconnect_reason = MNP_BAD_PARAMETER;
#endif
					return ( FALSE ) ; 
				}
			}
			else if ( frametype == ILGFRM ) // non-expected pdu arrives
			{
				x_debug_msg("mnp - bad frame type") ;
				G(mnp_disconnect_code) = 1 ;
				mnp_build_control_frame(PDU_LD) ;
				mnp_tx_octet_frame() ;
#ifdef CS_MODEM
				disconnect_reason = MNP_NOT_LR;
#endif
				return ( FALSE ) ; 
			}
			else if ( lapm_timer_expired ( T401 ) == TRUE )
				return ( FALSE ) ; //no lr arrives, back to buffer mode

			break ;

		case MNP_ANSW_WAIT_LA:
			mnp_rx_data() ;
			if ( (frametype = mnp_rx_frame_type()) == PDU_LA )
			{
				G(mnp_retransmit) = 0 ; //in case we sent out two LRs
				x_debug_msg("mnp - good confirming LA received") ;
				G(mnp_vs) = G(mnp_vr) = G(mnp_vsa) = G(mnp_vra) = 1 ;
				G(mnp_rk) = G(mnp_sk) = G(mnp_k) ;
				if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
				{
					x_send_mail ( DP_HDLC_MODE, DP_TASK, NULL, 0 ) ;
					x_debug_msg("mnp - entering MNP_CONNECT in hdlc mode") ;
				}
#ifdef DEBUGGING
				else
					x_debug_msg("mnp - entering MNP_CONNECT in byte mode") ;
#endif
				//send LA frame with 0 send credits for flow control
				G(mnp_k) = 0 ;
				mnp_tx_control_frame (PDU_LA) ;
				mnp_reset_flow_timer () ;
				G(mnp_state) = MNP_ANSW_PRE_CONNECT ;
				lapm_reset_timer() ;
			}
			else if ( ((lapm_timer_expired ( T401 ) == TRUE) &&
						(G(mnp_retransmit) == 0)) || (frametype == PDU_LR) )
			{
				//we'll ultimately use retransmit only if using mnp ONLY mode...
				x_debug_msg("la timer expired, one retry left") ;
				mnp_build_lr_frame() ;
				mnp_tx_octet_frame() ;
				G(mnp_retransmit)++ ;
				lapm_reset_timer() ;
				//stay in this state awaiting confirming la
			}
			else if ( lapm_timer_expired ( T401 ) == TRUE ) 
			//timer expired and no retries left...
			{
				x_debug_msg("timer expired awaiting confirming LA") ;
				G(mnp_retransmit) = 0 ; 
				mnp_build_control_frame( PDU_LD ) ;
				mnp_tx_octet_frame() ;
#ifdef CS_MODEM
				disconnect_reason = MNP_RETRY_LIMIT;
#endif
				return ( FALSE ) ;
			}
			else if (frametype == ILGFRM) //unexpected pdu
			{
				x_debug_msg("unexpected pdu instead of confirming LA") ;
				mnp_build_control_frame(PDU_LD) ;
				mnp_tx_octet_frame() ;
				return ( FALSE ) ;
			}
			break ;

		case MNP_ANSW_PRE_CONNECT:
 			if ( lapm_timer_expired ( MS300 ) )
			{
				G(mnp_state) = MNP_CONNECT ;
				G(mnp_first_lt_flag) = FALSE ;
				G(mnp_k) = G(mnp_sk) ;	//reset proper send credits
				mnp_tx_control_frame ( PDU_LA ) ;
				mnp_reset_flow_timer () ;
				G(x_modem_ec) = (MODEM_EC) G(mnp_negotiated_service) ;  //EC_MNP4 ;
#ifdef MODEM_VXD
				// need to change queue size from 256 bytes to 512 bytes for
				// dos box apps - mnp codeword size could be 256 bytes
				vxdDosChangeQueue ( 512 ) ;
#endif
				x_send_mail(IO_AT_CONNECT, AT_TASK, NULL, 0) ;
			}
			break ;
				
		case MNP_PRE_CONNECT:
			G(mnp_state) = MNP_CONNECT ; //data phase in octet mode
			G(mnp_first_lt_flag) = FALSE ;
			G(mnp_vr) = G(mnp_vs) = G(mnp_vra) = G(mnp_vsa) = 1 ;
			G(mnp_nk) = G(mnp_rk) = G(mnp_sk) = G(mnp_k) ;
			mnp_tx_control_frame ( PDU_LA ) ;
			mnp_reset_flow_timer () ;
			G(x_modem_ec) = (MODEM_EC) G(mnp_negotiated_service) ;  //EC_MNP4 ;
			x_debug_msg("mnp - entering MNP_CONNECT") ;
#ifdef MODEM_VXD
			// need to change queue size from 256 bytes to 512 bytes for
			// dos box apps - mnp codeword size could be 256 bytes
			vxdDosChangeQueue ( 512 ) ;
#endif
			x_send_mail (IO_AT_CONNECT, AT_TASK, NULL, 0) ;
			break ;
			
		case MNP_CONNECT:
			while ( TRUE )
			{
				//-----------------------------------------------------
				// First handle the Receive side...
				//-----------------------------------------------------
				// get new receive frame from DCE ring buffer and
				// place it in the lapm_receive_frame (LRF).
				mnp_rx_data () ;	/* receive new frame */
			
				/* get frame type and check for disconnect */
				frametype = mnp_rx_frame_type() ;
				if ( frametype == EMPTYFRM )
				{
					break ;
				}

				if ( frametype == PDU_LD )
				{
					G(mnp_state) = MNP_DISC_RSP ;
					lapm_reset_timer () ;
					break;
				}

				if ( frametype == PDU_LT )
				{
					if ( G(io_at_esc_detect) == FALSE )
					{
						mnp_process_lt_frame () ;
					}
					lapm_clear_rx_frame();

					if	( G(mnp_seq_recover_flag) )
					{
						mnp_send_pdu_la_frame ( (byte) MNP_NUM_OF_CREDITS ) ;
					}
				}
			}

			//-----------------------------------------------------
			// Then look to the transmit side.
			//-----------------------------------------------------
			if ( G(io_at_esc_detect) == FALSE )
			{
				/* process data in receive temp buffer */
				mnp_process_lt_frame () ;

				/* build new lt frames */
				#if !defined(CS_4)
				if ((x_elapsed_time(G(lapm_xmit_timer))) >= 05)
				#endif
				{
					mnp_build_lt_frame () ;
					G(lapm_xmit_timer) = x_current_time();
				}
			}

			/* transmit any control frame or lt frame (if remote not busy) */
			if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
				mnp_tx_hdlc_frame () ;
			else
				mnp_tx_octet_frame () ;

			if	( mnp_flow_timer_expired ( T404 ) == TRUE )
			{
				mnp_send_pdu_la_frame ( (byte) MNP_NUM_OF_CREDITS ) ;
			}

//			if ( lapm_timer_expired ( T401 ) == TRUE ) /* rwf 06/06/00 */
			if ( lapm_timer_expired ( G(lapm_t401) ) == TRUE )
			{
				lapm_reset_timer () ;	// reset timer T401

				if ( (G(lapm_remote_busy) == FALSE) &&
 					 (G(mnp_ns) != G(mnp_last_ack)) )
				{
					x_debug_msg("MNP - tx timer expired") ;
					if ( G(mnp_ns) < G(mnp_last_ack) )
						tmp_int = G(mnp_ns) + MNP_MOD ;
					else
						tmp_int = G(mnp_ns) ;
					G(mnp_sk) += (byte) (tmp_int - G(mnp_last_ack)) ;
					++G(lapm_retransmit) ;
					// if retransmissions exceeded N400 count then disconnect
					if ( G(lapm_retransmit) >= N400 )
					{
#ifdef CS_MODEM
						disconnect_reason = MNP_RETRY_LIMIT;
#endif
						G(mnp_state) = MNP_DISC_RSP ;
					}
					else
						G(mnp_ns) = G(mnp_last_ack) ;		// retransmit
				}
			}
			break ;

		case MNP_DISC_CMD :
			mnp_tx_control_frame ( PDU_LD ) ;
			
			if ( lapm_timer_expired ( MS200 ) == TRUE )
			{
#ifdef MODEM_VXD
				vxdDosChangeQueue ( 0 ) ;	// back to default queue size
#endif
				// try a cleardown sequence and then send OK
				G(mnp_state) = MNP_DOWN ;
				x_send_mail ( MC_DISCONNECT, DP_TASK, NULL, 0 ) ;
			}
			break ;

		case MNP_DISC_RSP :
			mnp_tx_control_frame ( PDU_LD ) ;
			if ( lapm_timer_expired ( MS100 ) == TRUE )
			{
#ifdef MODEM_VXD
				vxdDosChangeQueue ( 0 ) ;	// back to default queue size
#endif
				// remote disconnect - go on hook and send NO CARRIER
				G(mnp_state) = MNP_DOWN ;
				x_send_mail ( V42_REMOTE_DISC, DP_TASK, NULL, 0 ) ;
			}
			break ;

		case MNP_DOWN :
			/*	do not do anything - wait for response from dp task after 
				clear down sequence - io will receive disconnect & switch 
				back to io idle state */
			break ;
	}			
	return ( TRUE ) ;  // stay in mnp state
}

/***************************************************************************
Routine : mnp_read_octet_from_dce_buf
Description :
	receive mnp octet frame from dce buffer
Parameters in :
	none
Parameters out :
	TRUE - a whole frame was received 
	FALSE - not the end of frame yet
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
void mnp_read_octet_from_dce_buf ( void )
{
	word rx_ch ;

	while ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) )
	{
		rx_ch = *G(io_dce_rx_rptr)++ ;
		if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;

		if ( LRF.len > (G(mnp_max_info_octets) + 6) ) // max lt length
		{
			//frame too long; start over.
			x_debug_msg("mnp frame too long");
			G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
			LRF.len = 0 ;
		}

		switch (G(mnp_rx_octet_state))
		{
			case MNP_RX_OCTET_SYNC:
				if ( rx_ch == SYNC )
					G(mnp_rx_octet_state) = MNP_RX_OCTET_START_DLE ;
				break ;					

			case MNP_RX_OCTET_START_DLE:
				if ( rx_ch == DLE ) //go to next state
					G(mnp_rx_octet_state) = MNP_RX_OCTET_STX ;
				else if (rx_ch == SYNC) //another sync, expect dle again
					G(mnp_rx_octet_state) = MNP_RX_OCTET_START_DLE ;
				else //something totally out of line, wait for new sync
					G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
				break ;					

			case MNP_RX_OCTET_STX:
				if ( rx_ch == STX )//go to next state
				{
					// initialize everything before receiving frame data
					LRF.len = 0 ;
					G(receive_crc) = 0 ;
					G(rx_crc) = 0 ;
					G(last_char) = '\0' ;
					G(mnp_rx_octet_state) = MNP_RX_OCTET_DATA ;
				}
				else if ( rx_ch == SYNC )//another sync, expect dle next
					G(mnp_rx_octet_state) = MNP_RX_OCTET_START_DLE ;
				else //something totally out of line, wait for new sync
					G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
				break ;

			case MNP_RX_OCTET_DATA: //write data to receive buffer
				LRF.data[ LRF.len++] = (byte) rx_ch ;
				if ( rx_ch == DLE ) //if dle, prepare for transparency byte
				{
					G(mnp_rx_octet_state) = MNP_RX_OCTET_DATA_DLE ;
					if ( G(last_char) == SYNC )
						G(reset_flag) = TRUE ;
				}
				else
					G(receive_crc) = mnp_crc ( (byte) rx_ch, G(receive_crc) ) ;

				G(last_char) = (byte) rx_ch ;
				break ;

			case MNP_RX_OCTET_DATA_DLE:
				if (rx_ch == DLE) //transparency byte recd, go back to data state
				{
					G(receive_crc) = mnp_crc (DLE, G(receive_crc)) ;
					G(mnp_rx_octet_state) = MNP_RX_OCTET_DATA ;
				}
				else if ( rx_ch == ETX )//data has ended, look for fcs next
				{
					LRF.len-- ; //take last DLE out of frame.len
					G(receive_crc) = mnp_crc(ETX, G(receive_crc)) ;
					G(mnp_rx_octet_state) = MNP_RX_OCTET_FCS1 ;
				}
				else if ( rx_ch == SYNC )//sync received, start over expecting dle
					G(mnp_rx_octet_state) = MNP_RX_OCTET_START_DLE ;
				else if ( (rx_ch == STX) && (G(reset_flag) == TRUE) )
				{
					LRF.len = 0 ;
					G(receive_crc) = 0 ;
					G(mnp_rx_octet_state) = MNP_RX_OCTET_DATA ;
				}
				else //something totally out of line, wait for new sync
					G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;

				G(reset_flag) = FALSE ;  //set to FALSE in all cases
				break ;

			case MNP_RX_OCTET_FCS1:
				G(last_char) = (byte) rx_ch ; //L.G(S). Byte of FCS
				G(rx_crc) = rx_ch ; //L.G(S). Byte of FCS
				G(mnp_rx_octet_state) = MNP_RX_OCTET_FCS2 ;
				break ;

			case MNP_RX_OCTET_FCS2:
				G(rx_crc) |= ( rx_ch << 8 ) ; //create whole fcs

				if ( G(rx_crc) == G(receive_crc) ) //good crc - a valid frame is completed!
				{
					LRF.status = FULL ;
					G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
					return ; //we've completed a whole frame
				}
				else //fcs does not check...
				{
					if (rx_ch == SYNC)
						G(mnp_rx_octet_state) = MNP_RX_OCTET_START_DLE ;
					else if ( (rx_ch == DLE) && (G(last_char) == SYNC) )
						G(mnp_rx_octet_state) = MNP_RX_OCTET_STX ;
					else //totally unexpected data, so start over...
						G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
				}
				break ;

			default :
				// totally unexpected data, so start over...
				G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
				break ;

		}	// end G(mnp_rx_octet_state) switch

	} // we've exhausted data in dce buffer
}

extern void UART_stop_break ( void ) ;

/****************************************************************
Routine : mnp_tx_break
Description :
	send mnp break command to remote
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void mnp_tx_break ( void )
{
	mnp_tx_control_frame (PDU_LN) ; 
	x_debug_msg("MNP - tx PDU_LN") ;
	UART_stop_break () ;
}
