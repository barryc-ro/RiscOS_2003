/*name and version number:@(#)dpradish.c	1.100*/
/*date of get: 		  09/06/00 16:59:04*/
/*date of delta:	  01/22/99 09:09:39*/
//*****************************************************************************
// File :	dpradish.c
// Description :
//	Contains all radish functions related to the dsp16a
//      data pump interface.
//
// Functions Contained :
//   XmtStartTone
//   XmtCasTone
//   DetectStartTone
//   ToneDetected(byte)
//   DpRadishStartup(byte, byte, byte)
//   DPRadishXmtAnswerTone
//   GetDspSpeedValue(byte)
//   ReturnToVoice
//   SwitchToData
//   ReportEvent(RADISH_EVENT event)
//   dp_radish_bg
//
//
// Revision History :
//	Initials	Date		Change
//	 Eli T.       09/30/94          Initial
//*****************************************************************************

#include "llglob_d.h"
#ifdef RADISH
#include "dpglob.h"
#include "ioglob_d.h"
#include "radish.h"
#include "radishco.h"
#ifdef DEBUGGING
#include <stdlib.h>
#endif
#include "allglobs.h"
//-----------------------------------------------------------------------------
//  function prototypes
//-----------------------------------------------------------------------------
void XmtStartTone(void);
void XmtCasTone(void);
void DetectStartTone(void);
void DpRadishStartup(byte mode, byte speed, byte tones, byte v_17);
void DPRadishXmtAnswerTone(void);
void ReturnToVoice(void);
void SwitchToData(void);
void SwitchToVoice(void);
void ReportEvent(RADISH_EVENT event);
void DpRadishTask(RADISH_TASK task, byte *resp);
byte dp_radish_bg(void);
void dp_init_radish_speaker_phone_det(void);
byte dp_radish_start_tone_detected(byte);	//,word,word);

//-----------------------------------------------------------------------------
// private variables
//-----------------------------------------------------------------------------

#define	THRESHHOLD1	0x400	//1024
#define	THRESHHOLD2	0xa00	//2560
#define	THRESHHOLD3	0x78	//120
#define	THRESHHOLD4	0x120	//288
#define	THRESHHOLD5	0xc4	//0xaa
#define	THRESHHOLD6	0x230	//0x17c
#define BALANCE		28	//2.8*10
#define XMT_START_TONE_DURATION	0xC8
#define XMT_CAS_TONE_DURATION	0x4a
#define RCV_START_TONE_DURATION	100
#define MAX_NOISE_1	0x2000	//200	
#define MAX_NOISE_2	0x2000	
#define NO_OF_RADISH_FILTERS	13
#define NO_OF_RADISH_ENERGY_BINS	24
#define NO_OF_RADISH_ENERGY_BINS1	50
#define NO_OF_RADISH_ENERGY_BINS2	91
#define RADISH_FILTER_AVG_LNGTH	312	//120 ms<=>960; 60 ms<=>528; 30 ms<=>312
#define RADISH_START_TONE_BIT	0x0010
#define RADISH_START_TONE_DET	0x0020
#define NO_OF_RADISH_TAPS	0x5a

#define RADISH_BASE_ADR			0x900
#define RADISH_AVG_LNGTH_ADR		(RADISH_BASE_ADR)
#define	RADISH_ENERGY_BINS_ADDR		(RADISH_BASE_ADR + 0x1b)
#define RADISH_FILTER_ADDR		(RADISH_BASE_ADR + 0x33)
#define	AUC_SHADOW_ADDR			(RADISH_BASE_ADR + 0x15e)
#define RADISH_ENERGY_BINS_ADDR1	(RADISH_BASE_ADR + 0x1)
#define RADISH_ENERGY_BINS_ADDR2	(RADISH_BASE_ADR + 0x103)

//#define RADISH_AVG_LNGTH_ADR		0x7ff
//#define RADISH_ENERGY_BINS_ADDR	0x81a
//#define RADISH_FILTER_ADDR		0x832
//#define AUC_SHADOW_ADDR		0x95d

#define RADISH_TAPS_ADDR		0x902

const word RADISH_DFLT_PROGRAM_PARAMS[] = {
THRESHHOLD1,
THRESHHOLD2,
THRESHHOLD3,
THRESHHOLD4,
THRESHHOLD5,
THRESHHOLD6,
BALANCE,
FILTER_CONSTANT1,
FILTER_CONSTANT2,
FILTER_CONSTANT3,
FILTER_CONSTANT4,
FILTER_CONSTANT5,
FILTER_CONSTANT6,
FILTER_CONSTANT7,
FILTER_CONSTANT8,
FILTER_CONSTANT9,
FILTER_CONSTANT10,
FILTER_CONSTANT11,
FILTER_CONSTANT12,
FILTER_CONSTANT13,
XMT_START_TONE_DURATION,
XMT_CAS_TONE_DURATION,
RCV_START_TONE_DURATION,
MAX_NOISE_1,
MAX_NOISE_2
};
dword   ta,tb,t1,t2,t3;
byte    begn;
//#cf 02-feb-95 end...gfh
//#cf 02-feb-95 start...gfh
typedef enum
{
  DP_RADISH_IDLE,				//0
  DP_RADISH_WAIT_FOR_START_TONE,		//1
  DP_RADISH_WAIT_FOR_START_TONE_DELAY,		//2
#ifdef VOICE
  DP_RADISH_SPEAKER_PHONE_IDLE,			//3
  DP_RADISH_SPEAKER_PHONE_SWITCH_TO_HDSP,	//4
  DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE_DELAY,  //5
  DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE,	//6
#endif
  DP_RADISH_WAIT_FOR_V21_OR_CAS_TONE,		//7
  DP_RADISH_WAIT_FOR_ATSAC_CMD,			//8
  DP_RADISH_TX_START_TONE,			//9
  DP_RADISH_WAIT_FOR_END_START_TONE,		//A
  DP_RADISH_TX_CAS_TONE,			//B
  DP_RADISH_WAIT_FOR_END_CAS_TONE,		//C
  DP_RADISH_STARTUP_TX,				//D
  DP_RADISH_WAIT_FOR_END_STARTUP_TX,		//E
  DP_RADISH_CONNECT,				//F
  DP_RADISH_ANSWER_BILL_DELAY,			//10
  DP_RADISH_WAIT_FOR_END_ANSWER_TONE,		//11
  DP_RADISH_STARTUP_RX_EXPEDITE,		//12
  DP_RADISH_ONHOOK,				//13
  DP_WAIT_CAS_SILENCE,				//14
  DP_RADISH_NULL				//

}DP_RADISH_STATE ;
DP_RADISH_STATE DpRadishState;
//#cf 02-feb-95 end...gfh



word ToneTimer;
word timeout;
byte error;
byte prev_local_phone_status;
DP_DIALING_STATUS dp_radish_dialing_status;
byte x_radish_delay;
//-----------------------------------------------------------------------------
// extern variables;
//-----------------------------------------------------------------------------
extern byte dp_reg2b ;
extern void dp_init_fax_data_detect ( void );
#ifdef RADISH_TEST
extern word at_dtoa( dword , byte *, byte );
extern word at_itoa( word , byte *, byte );
#endif

//*****************************************************************************
// Routine : InitVvDpParam
// Description :
//	This routine sets all the VoiceView DP parameters to their
//      default values.
//
//
// Revision History :
//	Initials	Date		Change
//	 gfh           3/13/95          Initial
//*****************************************************************************
void InitVvDpParam(void)
{
	int i;

	for(i=0;i<NUMBER_OF_RADISH_PRG_PARAMS;i++)
	{
		RadishProgramStruct.RadishProgramData[i] = RADISH_DFLT_PROGRAM_PARAMS[i];
	}
	RadishOptions.PhoneMuteControl = 0;
	prev_local_phone_status = DONTKNOW;
	x_radish_state= RADISH_OFF;
}
//*****************************************************************************
// Routine : XmtStartTone
// Description :
//      This routine transmit the start tone.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void XmtStartTone(void)
{

  // Transmit VoiceView start dual tone for 180-200 ms
  dp_write_dsp_ram(0x5,F2312_5S);                    // set tones coefficients for
  dp_write_dsp_ram(0x6,F2312_5C);                    // 2312.5 Hz and 2912.5 Hz.
  dp_write_dsp_ram(0x7,F2912_5S);
  dp_write_dsp_ram(0x8,F2912_5C);
  dp_write_dsp_ram(0x17,RadishProgramStruct.RadishProgramParams.XmtStartToneDuration);        // tone duration=190 msec
  dp_write_dsp_ram(0x11,S.ModemOptions.TxLevel);     // tone 1 power level=-13dBm
  dp_write_dsp_ram(0x12,S.ModemOptions.TxLevel);     // tone 2 power level=-13dBm
  dp_modem_command(GENERATE_TONES, 2, NULL);

}



//*****************************************************************************
// Routine : XmtCasTone
// Description :
//      This routine transmit the ADSI CAS tone.
//      This notifies the far end modem to reply with its data capabilities
//      in V.21 UI frame.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void XmtCasTone(void)
{
  // transmit the ADSI-CAS (query) tone.
  dp_write_dsp_ram(0x5,F2130_0S);                    // set tones coefficients for
  dp_write_dsp_ram(0x6,F2130_0C);                    // 2130Hz and 2750Hz
  dp_write_dsp_ram(0x7,F2750S);
  dp_write_dsp_ram(0x8,F2750C);
  dp_write_dsp_ram(0x17,RadishProgramStruct.RadishProgramParams.XmtCASToneDuration);                     // tone duration=80 msec
  dp_write_dsp_ram(0x11,S.ModemOptions.TxLevel);   // power level for tone 1
  dp_write_dsp_ram(0x12,S.ModemOptions.TxLevel);   // power level for tone 2
  dp_modem_command(GENERATE_TONES, 2, NULL);
}

//*****************************************************************************
// Routine : DetectStartTone
// Description :
//      This routine configures the DSP to detect the VoiceView start tone.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void DetectStartTone(void)
{
	byte    i;
	word    status;

	// Clear bit 5 of 0x39
	status=dp_read_dsp_ram(0x39);
	status &= ~RADISH_START_TONE_DET;
	dp_write_dsp_ram(0x39,status);

	x_debug_msg("dp - download radish code");
	dp_download_radish () ;
	
	//Clear the start tone bit
	status=dp_read_dsp_ram(0x39);
	status &= ~RADISH_START_TONE_BIT;
	dp_write_dsp_ram(0x39,status);

	/*Set the filter coefficients*/
	for(i=0;i<NO_OF_RADISH_FILTERS*16;i++)
	{
		dp_write_dsp_ram( (word)(RADISH_FILTER_ADDR+i),radish_filter_coef[i]);
	}

	for(i=0;i<NO_OF_RADISH_FILTERS;i++)
	{
		dp_write_dsp_ram( (word)(RADISH_FILTER_ADDR + (i*16)),RadishProgramStruct.RadishProgramData[i+7] );
	}
	//Set the length of time to average the received start tone
	dp_write_dsp_ram(RADISH_AVG_LNGTH_ADR,RADISH_FILTER_AVG_LNGTH);
	dp_write_dsp_ram(AUC_SHADOW_ADDR, 0x1);         //need to set for DSP


	ta=tb=t1=t2=t3=0;
	begn=0;
	//Clear out any residual in energy bins
	for(i=0;i<NO_OF_RADISH_ENERGY_BINS1;i++)
	{
		dp_write_dsp_ram( (word)(RADISH_ENERGY_BINS_ADDR1+i),0);
	}
	for(i=0;i<NO_OF_RADISH_ENERGY_BINS2;i++)
	{
		dp_write_dsp_ram( (word)(RADISH_ENERGY_BINS_ADDR2+i),0);
	}

	status=dp_read_dsp_ram(0x39);
	status |= RADISH_START_TONE_DET;
	dp_write_dsp_ram(0x39,status);

	// Start detecting tones
	x_debug_msg("dp - radish start on");
	dp_modem_command(DETECT_TONES,8,0);

	// this tone generation is needed only for 7525 on the line
	/*
	dp_write_dsp_ram(0x5,0x02cb);
	dp_write_dsp_ram(0x6,0x3ff0);
	dp_write_dsp_ram(0x17,0);
	dp_write_dsp_ram(0x11,0x20);
	dp_modem_command(0x07, 1, NULL);
	*/
}

//*****************************************************************************
// Routine : dp_radish_handset_start_tone
// Description :
//      This routine queries the DSP on the reception of a valid
//      START tone in handset mode.
//
// Revision History :
//      Initials        Date            Change
//        Eli T.       09/30/94         Initial
//      gfh             02-feb-95       Changed for new MQ DSP algorithm
//*****************************************************************************
byte dp_radish_handset_start_tone(void)
{
byte    i,cen23,cen29;
word    status;
dword   usvar1,usvar2,wa,wb,i1,i2,e23[5],e29[5];
#ifdef RADISH_TEST
byte	str[20];
word	strlength;
byte	ret_val = FALSE;
#endif

	if( (dp_read_dsp_ram(0x39) & RADISH_START_TONE_BIT) )
	{
		//x_debug_msg("dp -got start tone");
		usvar1=(unsigned long)dp_read_dsp_ram(RADISH_ENERGY_BINS_ADDR);
		usvar2=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+1));

		wa=( (usvar1<<6)+(usvar2>>10) );

		usvar1=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xe));
		usvar2=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xf));


		wb=( ( (usvar1<<6)+(usvar2>>10) )*RadishProgramStruct.RadishProgramParams.Balance )/10;



		usvar1=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xa));
		usvar2=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xb));
		i1=( (usvar1<<6)+(usvar2>>10) );

		usvar1=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xc));
		usvar2=(unsigned long)dp_read_dsp_ram((word)(RADISH_ENERGY_BINS_ADDR+0xd));
		i2=( (usvar1<<6)+(usvar2>>10) );
		for(i=cen23=cen29=0;i<3;i++)
		{
			//find the max enegry around 2312.5 Hz
			usvar1=(unsigned long)dp_read_dsp_ram( (word)((RADISH_ENERGY_BINS_ADDR+2)+(i*2)) );
			e23[i]=usvar1<<6;
			usvar2=(unsigned long)dp_read_dsp_ram( (word)((RADISH_ENERGY_BINS_ADDR+3)+(i*2)) );
			e23[i]+=usvar2>>10;

			//find the max enegry around 2912.5 Hz
			usvar1=(unsigned long)dp_read_dsp_ram( (word)((RADISH_ENERGY_BINS_ADDR+0x10)+(i*2)) );
			e29[i]=usvar1<<6;
			usvar2=(unsigned long)dp_read_dsp_ram( (word)((RADISH_ENERGY_BINS_ADDR+0x11)+(i*2)) );
			e29[i]+=usvar2>>10;
			e29[i]=( (e29[i]*RadishProgramStruct.RadishProgramParams.Balance)/10 );

			if(e23[i]>wa)
			{
				wa=e23[i];
				cen23=i+1;
			}
			if(e29[i]>wb)
			{
				wb=e29[i];
				cen29=i+1;
			}
		}

		status=dp_read_dsp_ram(0x39);
		status&=~RADISH_START_TONE_BIT;
		dp_write_dsp_ram(0x39,status);
		//This is where we scale up t1 by 1000
		t1=(i1*30)+(i2*20);

		tb=ta;
		ta=( ((ta*93)/100)+((t1*7)/100) );
		if(begn==0)
		{
			ta=t1;
			begn=1;
		}
		if( (t1>5*tb) || (t1<(tb/5)) )
		{
			ta=( ((tb*7)/10)+((t1*3)/10) );
		}
		//This is where we scale up t2 and t3 by 1000
		t2= (10000*wa)/(ta+1);
		t3= (10000*wb)/(ta+1);
		if( wb || wa )
		{

#ifdef DEBUGGING
			sprintf ( szBuffer, "wa=%d",(unsigned long)wa) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "wb=%d",(unsigned long)wb) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "i1=%d",(unsigned long)i1) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "i2=%d",(unsigned long)i2) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "ta=%d",(unsigned long)ta) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "t2=%d",(unsigned long)t2) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "t3=%d",(unsigned long)t3) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "cen23=%d",cen23) ;
			x_debug_msg ( szBuffer ) ;
			sprintf ( szBuffer, "cen29=%d",cen29) ;
			x_debug_msg ( szBuffer ) ;

#endif
		}

		if( ( (cen23 == 0 ) || (cen23 == 2) ) && ( (cen29 == 0) || (cen29 == 2) ) )
		{
			if( (wa>=RadishProgramStruct.RadishProgramParams.ThreshHold5)
				&& (wb>=RadishProgramStruct.RadishProgramParams.ThreshHold5) 
				&& ((wa+wb)>RadishProgramStruct.RadishProgramParams.ThreshHold6) )
			{
				x_debug_msg("dp -simply start tone");
#ifdef RADISH_TEST
				ret_val = TRUE;
#else
				return(TRUE);
#endif
			}
			// make sure we scale this up by 1000
			else if( ((t1)<RadishProgramStruct.RadishProgramParams.MaxNoise1) && 
				((ta)<RadishProgramStruct.RadishProgramParams.MaxNoise1) )
			{
				if( (t2>=RadishProgramStruct.RadishProgramParams.ThreshHold1) 
					&& (t3>=RadishProgramStruct.RadishProgramParams.ThreshHold1) )
				{
					x_debug_msg("dp - STtone over background");
#ifdef RADISH_TEST
					ret_val = TRUE;
#else
					return(TRUE);
#endif
				}
			}
			else if( (t2>=RadishProgramStruct.RadishProgramParams.ThreshHold1)
				&& (t3>=RadishProgramStruct.RadishProgramParams.ThreshHold1)
				&& ((t2+t3)>=RadishProgramStruct.RadishProgramParams.ThreshHold2) 
				&& (wa>=RadishProgramStruct.RadishProgramParams.ThreshHold3)
				&& (wb>=RadishProgramStruct.RadishProgramParams.ThreshHold3) )
			{
				x_debug_msg("dp - STtone over voice");
#ifdef RADISH_TEST
				ret_val = TRUE;
#else
				return(TRUE);
#endif
			}
		}
		else
		{
			if( ((t1)<RadishProgramStruct.RadishProgramParams.MaxNoise2) && 
				((ta)<RadishProgramStruct.RadishProgramParams.MaxNoise2) )
			{
				if( (t2>=RadishProgramStruct.RadishProgramParams.ThreshHold4) 
					&& (t3>=RadishProgramStruct.RadishProgramParams.ThreshHold4) )
				{
					x_debug_msg("dp - Off Freq. STtone over background");
#ifdef RADISH_TEST
					ret_val = TRUE;
#else
					return(TRUE);
#endif
				}
			}
		}


	}
#ifdef RADISH_TEST
	if(ret_val == TRUE)
	{
		SwitchToData();
			strlength = at_dtoa(wa,str,DECIMAL);
			x_strcpy(&str[strlength],"wa\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_dtoa(wb,str,DECIMAL);
			x_strcpy(&str[strlength],"wb\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_dtoa(ta,str,DECIMAL);
			x_strcpy(&str[strlength],"ta\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_dtoa(t2,str,DECIMAL);
			x_strcpy(&str[strlength],"t2\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_dtoa(t3,str,DECIMAL);
			x_strcpy(&str[strlength],"t3\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_itoa((word)cen23,str,DECIMAL);
			x_strcpy(&str[strlength],"cen23\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
			strlength = at_itoa((word)cen29,str,DECIMAL);
			x_strcpy(&str[strlength],"cen29\r\n\0");
			x_send_mail(AT_IO_DATA,IO_TASK,str,x_strlen(str));
	}
	return(ret_val);
#else
	//x_debug_msg("dp -failed start tone");
	return(FALSE);
#endif
}

#ifdef VOICE
//*****************************************************************************
// Routine : dp_init_radish_speaker_phone_det
// Description :
//      This routine assumses the data pump is set up in half duplex
//      and has previously called dp_init_fax_data_detect() so we need
//      only overwrite the two filter constants
//
//
// Revision History :
//      Initials        Date            Change
//        gfh          02-feb-95        Initial
//*****************************************************************************
void dp_init_radish_speaker_phone_det(void)
{
	dp_init_fax_data_detect();
	dp_write_dsp_ram ( 0x1c, F2312_5C8 );
	dp_write_dsp_ram ( 0x1d, F2912_5C8 );   /* Radish Start Tone*/
	dp_write_dsp_ram ( 0x85, ( (word)(dp_read_dsp_ram(0x85) | 0x8000 )) );	//make sure Tone Dets. on!!
	ToneEnergyState=TONE_ENERGY_INIT;
}
#endif
//*****************************************************************************
// Routine : dp_radish_start_tone_deteced
// Description :
//      This routine checks for the presence of start tone when not in
//      handset mode.  Please note that we use tone detector 3 and 4
//
//
// Revision History :
//      Initials        Date            Change
//        gfh          02-feb-95        Initial
//*****************************************************************************
byte dp_radish_start_tone_detected(byte tone_reg)	//,word tone1_addr,word tone2_addr)
{
  switch ( ToneEnergyState )
  {
      case TONE_ENERGY_INIT:
	 if ((tone_reg & 0x0c) == 0x0c)
	 {
	   x_debug_msg("DP - detected init tone");
	   ToneTimer = x_current_time();
	   ToneEnergyState = TONE_ENERGY_ON;
	 }
	 break;

      case TONE_ENERGY_ON:
	 if ((tone_reg & 0x0c) == 0x0c)
	 {
	    x_debug_msg("DP - tone is still on");
	    if ( x_elapsed_time(ToneTimer) >= RadishProgramStruct.RadishProgramParams.RcvStartToneDuration )
	    {
	       x_debug_msg("DP - tone detected");
		ToneEnergyState = TONE_ENERGY_INIT;
	       return (TRUE);
	    }
	 }
	 else
	 {
		ToneEnergyState = TONE_ENERGY_INIT;
	 }
	 break;
  }
  return (FALSE);
}
//*****************************************************************************
// Routine : dp_radish_CAS_deteced
// Description :
//      This routine checks for the presence of CAS tone after successfully
//      detecting start tone in either half duplex or handset mode
//
//
// Revision History :
//      Initials        Date            Change
//        gfh          02-feb-95        Initial
//*****************************************************************************
byte dp_radish_CAS_detected(void)
{
word    high_power, low_power;
	if ((dp_read_dsp_ram(0x28) & 0x03) == 0x03)
	{
		high_power = 0 ;
		low_power = 0 ;
		high_power = dp_read_dsp_ram ( 0x29 ) ;
		low_power = dp_read_dsp_ram ( 0x2a ) ;
#ifdef DEBUGGING
		sprintf ( szBuffer, "h=%d",high_power) ;
		x_debug_msg ( szBuffer ) ;
		sprintf ( szBuffer, "l=%d",low_power) ;
		x_debug_msg ( szBuffer ) ;
#endif
		if ( (high_power >= 250) && (low_power >=250) )
		{
#ifdef DSP_MN
			return(TRUE);
#else
			if(high_power >= low_power)
			{
				//check to see if high/2 <= low
				if((high_power>>1) <= low_power)
					return(TRUE);
			}
			else
			{
				//check to see if low/2 <= high
				if((low_power>>1) <= low_power)
					return(TRUE);
			}
#endif
		}
	}
	return(FALSE);
}


//*****************************************************************************
// Routine : DpRadishStartup
// Description :
//      This routine does VoiceView startup for answer/originate mode
//      In V21 answer mode, the dsp can detect either the ADSI CAS tone
//      or V.21 frame.
//
//
//
// Parameters in :
//      mode      -  ANSWER, ORIGINATE
//      modulaion -  FAX_9600   V.29 9600 bps
//                   FAX_7200   V.29 7200 bps
//                   FAX_4800   V.27ter 4800 bps
//                   FAX_2400   V.27ter 2400 bps
//                   FAX_300    V.21 Ch. 2 300 bps
//      tones     -  2  only with V21 ANSWER, when CAS TONE has to be
//                      detected with V21 receiver.
//                   0  otherwise
//	v_17	-    
//		     0	NON_V17,
//		     1	V17_LONG_TRAIN,
//		     2	V17_SHORT_TRAIN
// Parameters out :  
//      none
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void DpRadishStartup(byte mode, byte speed, byte tones , byte v_17)
{

	dp_modem_idle_cmd();
	x_fax_v17 = v_17;
	switch (speed)
	{
		// low speed rate selection
		case VV_V21_300:
			x_fax_rate = MR_300;
			break;

		case VV_V27TER_4800:
			x_fax_rate = MR_4800;
			break;

		case VV_V29_9600:
			x_fax_rate = MR_9600;
			//NOTE: no v.17 yet but late will need to update v_fax_v17
			break;


		// V17 speed selection
		case VV_V17_7200:
			x_fax_rate = MR_7200;
			break;
			
		case VV_V17_9600:
			x_fax_rate = MR_9600;


		case VV_V17_12000:
			x_fax_rate = MR_12000;
			break;


		case VV_V17_14400:
			x_fax_rate = MR_14400;
			break;
	}



	switch( mode )
   	{
		case ANSWER:
			x_fax_state = FAX_RX_HDLC;
			break;

		case ORIGINATE:
			x_fax_state = FAX_TX_HDLC;
			break;
	}

	dp_fax_startup(tones);
	//-------------------------------------------------------------
	// for V21, set the frequency constant for CAS tone and enable
	// VoiceView mode.
	//-------------------------------------------------------------
	if (speed == VV_V21_300)
	{	
		dp_write_dsp_ram( 0x39,((word)(dp_read_dsp_ram(0x39) | VV_MODE)) );
		if ((mode == ANSWER) && ( tones == 2))
		{
			//---- enable VoiceView mode.
			x_debug_msg("DPRADISH-V21 RX");
			//--- set the frequency constant for CAS tone detection.
			//assume we are always in 7.2 KHz sampling at this time
			dp_write_dsp_ram(0x1c, F2130_0C);
			dp_write_dsp_ram(0x1d, F2750C);
		}

	}
}



//*****************************************************************************
// Routine : XmtAnswerTone
// Description :
//	This routine  transmits the VoiceView answer tone. It is
//      called in auto-attendant mode after an ATA command.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void DPRadishXmtAnswerTone(void)
{
  dp_write_dsp_ram(0x5,F628S);                 // set tones coefficients for
  dp_write_dsp_ram(0x6,F628C);                 // 628Hz (answer tone)
  dp_write_dsp_ram(0x17,ANS_TONE_DURATION);    // tone duration=3 seconds
  dp_write_dsp_ram(0x11,ANS_TONE_LEVEL);       // power level for answer tone
  dp_modem_command(GENERATE_TONES, 1, NULL);
}




//*****************************************************************************
// Routine : ReturnToVoice
// Description :
//      Connect Local Phone, put modem in ON-HOOK state
//      and return to idle mode.
// Parameters in :
//	none
// Parameters out :
//      none
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void ReturnToVoice(void)
{
	SwitchToVoice();
	x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_INIT_VARS);
	dp_init_local_phone_state () ;
}



//*****************************************************************************
// Routine : SwitchToData
// Description :
//      put modem in OFF-HOOK state and disconnect local phone.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void SwitchToData(void)
{
   x_output(IO_OFF_HOOK);         // modem off-hook only in HANDSET mode.
   x_output( IO_CALLER_ID_OFF);                            // disconnect local phone
   x_output( IO_DV_RLY_ON );
	if ( S.ModemOptions.SpeakerControl == 2 )
		x_output ( IO_SPEAKER_ON ) ;
}
//*****************************************************************************
// Routine : SwitchToVoice
// Description :
//      Put modem in Voice mode according to parameters.  Note that
//	if phone mute is enabled that we actually go off hook but
//	do not set x_modem_state equal to OFF_HOOK in case we got there
//	from, e.g. ATH1.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void SwitchToVoice(void)
{
	if(RadishOptions.PhoneMuteControl)
	{
		x_output(IO_OFF_HOOK);
	   	x_output(IO_CALLER_ID_OFF);   // connect local phone
		x_output( IO_DV_RLY_ON );
	}
	else
	{
		x_output( IO_DV_RLY_OFF );
#ifdef TWO_RELAY_SCHEME
	   	x_output(IO_CALLER_ID_ON);   // must do this here for Harrier in order to hold the network
#endif
		if(x_modem_state == MS_ON_DIAL)
			x_output(IO_ON_HOOK);
		else
			x_output(IO_OFF_HOOK);
	   	x_output(IO_CALLER_ID_ON);	//This was put here since on BANZAI MS Caller ID was
						//on LAGC0 and had to follow the onhook command for
						//some timing reason

	}
	x_output(IO_SPEAKER_OFF);
}



//*****************************************************************************
// Routine : ReportEvent
// Description :
//      report Event to DTE
//
// Parameters in :
//      event - type of event
// Parameters out :
//      none
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void ReportEvent(RADISH_EVENT event)
{
  x_send_mail(RADISH_AT_TASK,AT_TASK,(byte *)&event,REPORT_RADISH_EVENT);
}

//*****************************************************************************
// Routine : DpRadishTask
// Description :
//          DP tasks
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void DpRadishTask(RADISH_TASK task, byte *resp)
{
word	status;
int i;
    switch ( task )
    {
#ifdef VOICE
	// in radish and want to go to speaker/radish
	case SWITCH_TO_SPEAKER_RADISH:
		//temporarily set x_modem_mode so radish will start Hdsp--
		//will be set to correct mode below
		x_modem_mode = MODEM_SPEAKER_RADISH;
		//WARNING! falling through!!
#endif
	case SWITCH_TO_RADISH:
		dp_init_local_phone_state () ;
#ifdef VOICE
		if( (x_modem_mode == MODEM_SPEAKER_PHONE)
		 || (x_modem_mode == MODEM_SPEAKER_RADISH) )
		{
			if(x_modem_mode == MODEM_SPEAKER_RADISH)
			{
				DpRadishState = DP_RADISH_SPEAKER_PHONE_IDLE;
				x_modem_mode = MODEM_SPEAKER_PHONE;     //go back to MODEM_SPEAKER_PHONE
			}
			else
			{
				DpRadishState = DP_RADISH_SPEAKER_PHONE_SWITCH_TO_HDSP;
			}
		}
		else
		{
			if( (x_modem_mode == MODEM_VOICE) && (x_modem_state == MS_TAD_FAR) )
			{
				SwitchToData();                         // modem off-hook, phone disconnected.
				x_modem_state = MS_ON_DIAL;
				x_radish_rate = VV_V21_300;
				DpRadishStartup(ANSWER,(byte)x_radish_rate,2,NON_V17); // set DSP to receive CAS or V21 frame
				ToneEnergyState = TONE_ENERGY_INIT;     // for ToneDetected function.
				DpRadishState = DP_RADISH_WAIT_FOR_V21_OR_CAS_TONE;
				x_debug_msg ( "DP - CID off. start tone detected");


			}
			else
#endif
			{
				x_modem_state = MS_ON_DIAL;
   	       		DpRadishState = DP_RADISH_IDLE;
			}
            		dp_timer  = x_current_time();           // start timer
			x_debug_msg( "DP-switch to radish");
			x_modem_mode = MODEM_RADISH;
#ifdef VOICE
		}
#endif
		dp_state=DP_RADISH_BG;
		x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_INIT_VARS);
		break;

        case RADISH_START_TONE:
			x_debug_msg ( "DP - CID off, START tone command" );
#if defined(VOICE)
			if ( x_modem_mode == MODEM_SPEAKER_PHONE )
				dp_stop_fdsp () ;
			else
#endif
				dp_modem_idle_cmd();
			SwitchToData();
			x_radish_status = RADISH_STATUS_DATA;
			DpRadishState = DP_RADISH_TX_START_TONE;
			dp_timer = x_current_time();
			break;

        case RADISH_STARTUP_TX:
		dp_modem_idle_cmd();
               DpRadishState = DP_RADISH_STARTUP_TX;
               dp_timer = x_current_time();
		if(x_radish_rate == VV_FAX_4800)
		{
			x_radish_delay = 250;
		}
		else
		{
			x_radish_delay = 100;
		}
               break;

        case RADISH_STARTUP_TX_CAP:
               x_radish_state = RADISH_TX_CAP;
               x_radish_rate = VV_V21_300;
               DpRadishState = DP_RADISH_STARTUP_TX;
#ifdef MODEM_Z80
		x_radish_delay = 95+30;
#else
		x_radish_delay = 95;
#endif
               dp_timer = x_current_time();
               break;


        case RADISH_STARTUP_TX_RESPONSE:
               x_radish_rate = (byte)RadishOptions.TxSpeed.Burst;
		x_radish_delay = 95;
               DpRadishState = DP_RADISH_STARTUP_TX;
               dp_timer = x_current_time();
               break;

	case RADISH_STARTUP_TX_MODE_IND_IDLE:
		dp_modem_idle_cmd();
		//warning--falling through!!!!!!!!!!!!!!!!!!!

        case RADISH_STARTUP_TX_MODE_IND:
               x_radish_state = RADISH_TX_MODE_IND;
               x_radish_rate = VV_V21_300;
               DpRadishState = DP_RADISH_STARTUP_TX;
		x_radish_delay = 95;
               dp_timer = x_current_time();
               break;


       case RADISH_RETURN_TO_VOICE:
		x_debug_msg("DP- radish return to voice");
		dp_modem_idle_cmd();
#ifdef VOICE
		if( (x_modem_mode == MODEM_SPEAKER_RADISH) 
			|| (x_modem_mode == MODEM_SPEAKER_PHONE) )
		{
			x_send_mail (RADISH_DP_TASK, DP_TASK, 0, SWITCH_TO_SPEAKER_RADISH);
		}
		else
#endif
		{
			x_send_mail (RADISH_DP_TASK, DP_TASK, 0, SWITCH_TO_RADISH);
		}
		x_send_mail (RADISH_IO_TASK, IO_TASK, 0, RADISH_IO_DISCONNECT);
               break;

       case RADISH_CHECK_FOR_SILENCE:
               *resp = (dp_read_dsp_ram(TOTAL_ENERGY_ADDR) < 160) ? TRUE : FALSE;
               break;

       case RADISH_CHECK_FOR_CARRIER_LOSS:
//               *resp =  ( ( dp_regread ( 0x2B ) & 0x04 ) == 0 ) ? TRUE : FALSE;
		*resp = dp_fax_carrier_loss();
               break;

	case RADISH_END_RADISH:
		dp_onhook_cmd () ;
		DeactivateCid();
		dp_modem_idle_cmd();
	//caution falling through!!!!

	case RADISH_OFF_RADISH:
		status = dp_read_dsp_ram(0x39);
		status &= ~RADISH_START_TONE_DET;
		status &= ~VV_MODE;
		status &= ~RADISH_START_TONE_BIT;
		dp_write_dsp_ram(0x39,status);
	//caution falling through!!!!

	case RADISH_INIT_RADISH:
		prev_local_phone_status = DONTKNOW;	//Makesure we reset this variable for next time
		x_radish_state = RADISH_OFF;
		x_debug_msg("DP-stop radish detection");
		break;

	case RADISH_ANSWER:
		x_debug_msg("DP - RADISH answer");
		dp_timer = x_current_time();
		dp_state = DP_RADISH_BG;
		DpRadishState = DP_RADISH_ANSWER_BILL_DELAY;
		break;

	case RADISH_CONNECT:
		x_send_mail ( RADISH_AT_TASK, AT_TASK, 0, RADISH_AT_CONNECT );
		x_modem_state = MS_OFFHOOK;
		x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
		break;

	case RADISH_STARTUP_RX_EXPEDITE:
		x_debug_msg ("DP - Expedite Startup Rx");
#if defined(VENUS)
		// dummy reads needed for delays for VENUS
		for(i=0;i<10;i++)
		{
			dp_read_dsp_ram(0x3A);
		}
#endif
		DpRadishStartup(ANSWER,(byte)x_radish_rate,0,NON_V17);
		DpRadishState = DP_RADISH_STARTUP_RX_EXPEDITE;
		dp_timer = x_current_time();
		break;		

#ifdef VOICE
	case RADISH_SWITCH_TO_SPEAKER_DATA:
		dp_timer  = x_current_time();           // start timer
		x_modem_mode = MODEM_SPEAKER_RADISH;
		dp_save_aec_coef();
		dp_stop_fdsp();
		SwitchToData();                         // modem off-hook, phone disconnected.
		x_radish_rate = VV_V21_300;
		DpRadishStartup(ANSWER,(byte)x_radish_rate,2,NON_V17); // set DSP to receive CAS or V21 frame
		ToneEnergyState = TONE_ENERGY_INIT;      //for ToneDetected function.
		DpRadishState = DP_RADISH_WAIT_FOR_V21_OR_CAS_TONE;
		break;
#endif

	case RADISH_ACTIVE:
               *resp = (x_radish_state != RADISH_OFF)
                       ? TRUE : FALSE;
               break;

	case RADISH_DETECT_TONES:
		dp_modem_command (DETECT_TONES,2,NULL);
		break;

	case RADISH_ONHOOK:
		*resp = (DpRadishState == DP_RADISH_ONHOOK)
			?TRUE : FALSE;
		break;

#ifdef VOICE
	case RADISH_SWITCH_TO_NORMAL_SPEAKER_PHONE:
		dp_timer1 = x_current_time();
		dp_state = DP_SPEAKER_PHONE_WAIT;
		dp_init_fax_data_detect () ;
		x_radish_state = RADISH_OFF;
		x_modem_mode = MODEM_SPEAKER_PHONE;
		break;
#endif
    }

}



//*****************************************************************************
// Routine : dp_radish_bg
// Description :
//      The RADISH dp background routine
//
// returns:
//      1 -  if dp_state should stay in DP_RADISH_BG
//      0 -  dp_state should change to DP_IDLE.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
byte dp_radish_bg(void)
{
#ifdef VOICE
  byte curr_local_phone_status;
#endif
  byte silence;

  switch (DpRadishState)
  {

     case DP_RADISH_IDLE:
            dp_modem_idle_cmd();                // set DSP in idle mode
	        SwitchToVoice();
            DetectStartTone();			// set DSP to detect start tone
            ToneEnergyState = TONE_ENERGY_INIT; // for ToneDetected function.
            DpRadishState = DP_RADISH_WAIT_FOR_START_TONE_DELAY;
            x_debug_msg ( "DP - CID on. Phone off-hook, Ready for start tone...");
	       dp_timer = x_current_time();
	       dp_fax_downloaded = FALSE ;
         break;

#ifdef VOICE
     case DP_RADISH_SPEAKER_PHONE_IDLE:

	// the order of next two lines is important - first stay off hook
	// and then start speaker phone - audio codec on lead will be set
	SwitchToVoice();
	dp_start_hdsp_tone_det();
	dp_write_dsp_ram ( SPKR_THRESHOLD_ADDR, 0x40 ) ; //speaker agc threshold
	//Beaware--falling through!!!

     case DP_RADISH_SPEAKER_PHONE_SWITCH_TO_HDSP:

	//It is assumed we have already done a dp_start_hdsp at least
	dp_init_radish_speaker_phone_det();
	x_debug_msg( "DP-switch to radish speaker phone");
	ToneEnergyState = TONE_ENERGY_INIT; // for ToneDetected function.
	dp_timer = x_current_time();
	DpRadishState = DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE_DELAY;
	dp_fax_downloaded = FALSE ;
	break;
#endif

     case DP_RADISH_WAIT_FOR_START_TONE_DELAY:
	if(x_elapsed_time(dp_timer) > 230)	//add in delay to let DSP to settle our
		DpRadishState = DP_RADISH_WAIT_FOR_START_TONE;
	break;

     case DP_RADISH_WAIT_FOR_START_TONE:

	 if ( dp_radish_handset_start_tone() )
         {
            dp_timer  = x_current_time();           // start timer
            SwitchToData();                         // modem off-hook, phone disconnected.
            dp_modem_idle_cmd();
            x_radish_rate = VV_V21_300;
            DpRadishStartup(ANSWER,(byte)x_radish_rate,2,NON_V17); // set DSP to receive CAS or V21 frame
            ToneEnergyState = TONE_ENERGY_INIT;     // for ToneDetected function.
            DpRadishState = DP_RADISH_WAIT_FOR_V21_OR_CAS_TONE;
            x_debug_msg ( "DP - CID off. start tone detected");
		break;
         }
		
	//if we are in handset radish and the local phone is hung up, we should hang up
	//caller id to protect against an incoming ring.  However, if we are muting the local
	//phone, we lose its status but we know the modem circuit is alway off hook so we don't
	//need to monitor the local phone.
	if( (RadishOptions.SwitchhookStatus)
	&& (x_modem_state == MS_ON_DIAL) 
	&& (dp_local_phone_detect() == FALSE)
	&& ( !RadishOptions.PhoneMuteControl ) 
	)
	{
		DpRadishState = DP_RADISH_ONHOOK;	//local phone was hungup so suspend
		dp_ring_int = FALSE ;
		dp_calling_tone_disable = FALSE ;
		dp_enable_ring_int () ;
		x_modem_state = MS_IDLE;
		dp_onhook_cmd();
	}
         break;

     case DP_RADISH_ONHOOK:
	if(dp_ring_int == TRUE)
	{
		dp_state = DP_WAIT_FOR_RING;
	}
	if ((dp_local_phone_detect() == TRUE) || (!RadishOptions.SwitchhookStatus))
	{
		x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
	}
	break;

#ifdef VOICE
     case DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE_DELAY:
	if( dp_radish_start_tone_detected( (byte)(dp_read_dsp_ram(0x28)<<2) ) ) //,0x0,0x0 ) )
	{
		x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_SWITCH_TO_SPEAKER_DATA);
		break;
	}
	curr_local_phone_status = dp_local_phone_detect();
	if(curr_local_phone_status != DONTKNOW)
	{
		if (  curr_local_phone_status == FALSE )
		{
			x_debug_msg("DPRADISH-Phone onhook to start");
			DpRadishState = DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE;
			break;
		}
		else if( prev_local_phone_status == FALSE)
		{
			//user has picked up the local phone and current status must be true
			x_debug_msg("DPRADISH-User picked up phone");
			DpRadishState = DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE;
			break;
		}
		prev_local_phone_status = curr_local_phone_status;
	}
	break;

     case DP_RADISH_SPEAKER_PHONE_WAIT_FOR_START_TONE:
	if( dp_radish_start_tone_detected( (byte)(dp_read_dsp_ram(0x28)<<2) ) )	//,0x0,0x0 ) )
	{
		x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_SWITCH_TO_SPEAKER_DATA);
		break;
	}
	curr_local_phone_status = dp_local_phone_detect();
	if( (curr_local_phone_status == TRUE) &&
		(prev_local_phone_status == FALSE) )
	{
		x_debug_msg("DP- user picked up local phone");
		dp_stop_fdsp () ;
		dp_onhook_cmd () ;
		x_modem_state = MS_ON_DIAL;
		x_modem_mode = MODEM_RADISH;
		DpRadishState = DP_RADISH_IDLE;
		prev_local_phone_status = TRUE;
		break;
	}
	if(curr_local_phone_status != DONTKNOW)
		prev_local_phone_status = curr_local_phone_status;

	if ( S.ModemOptions.SpeakerPhoneMode < 2 )  //FDX
	{
		if( (dp_read_dsp_ram(FDSP_CNTRL_ADDR) & 0x4000) == 0 )
		{
			if ( ( S.ModemOptions.RingCount > 0 )		// incoming call
				|| ( x_elapsed_time ( dp_timer1 ) > SECOND20 )
				|| (dp_radish_dialing_status != DP_INITIAL_DIAL) )
			{
				if ( dp_cancellation() )
				{
					dp_radish_dialing_status = DP_SUBSEQUENT_DIAL;
					dp_switch_fdsp () ;             // fdsp mode
					dp_init_radish_speaker_phone_det();
				}
			}
		}
		dp_spk_echotest () ;
	}
	break;
#endif

     case DP_RADISH_WAIT_FOR_V21_OR_CAS_TONE:
         //--------------------------------------------------------------------
         //  here we expect a CAS tone.
         //--------------------------------------------------------------------
	 if ( dp_radish_CAS_detected() )
         {
              x_debug_msg ( "DP - CAS tone detected");
		DpRadishState = DP_WAIT_CAS_SILENCE;
		dp_timer = x_current_time();
              ReportEvent(EV_SRQ);
         }
         //--------------------------------------------------------------------
         //  here we expect a V21 Mode Indicator frame.
         //--------------------------------------------------------------------
         else if ( dp_fax_connect_success() )
         {
                x_debug_msg ( "DP - connect with remote" );
                x_radish_rate = VV_V21_300;
                DpRadishState = DP_RADISH_NULL;
                x_radish_state = RADISH_RX_MODE_IND;
                x_send_mail( RADISH_IO_TASK, IO_TASK, 0, RADISH_IO_CONNECT );
                x_send_mail( RADISH_IO_TASK, IO_TASK,0,RADISH_START_IO_TIMER);

         }
         //--------------------------------------------------------------------
         //  timeout. Neither CAS tone nor V21 frame has been received.
         //--------------------------------------------------------------------
         else if ( x_elapsed_time(dp_timer) > 600 ) // CAS_TIMEOUT
         {
                    ReportEvent(EV_STO);
		x_send_mail (RADISH_DP_TASK, DP_TASK, 0, SWITCH_TO_RADISH);		
         }
         break;

    case DP_WAIT_CAS_SILENCE:
		x_send_mail(RADISH_DP_TASK,DP_TASK,&silence,RADISH_CHECK_FOR_SILENCE);
#ifdef DEBUGGING
		if(silence)
			x_debug_msg("DP-RADISH-got silence");
#endif
		if( silence || (x_elapsed_time(dp_timer)>200) )
		{
			x_radish_state = RADISH_TX_CAP;
			//---------------------------------------------------
			// rate must be V21 300 for CAP and Mode Ind frames
			// regardless of the SSP settings.
			//---------------------------------------------------
			x_radish_rate = VV_V21_300;
			dp_modem_idle_cmd();
			DpRadishStartup(ORIGINATE,(byte)x_radish_rate,0,NON_V17);
			DpRadishState = DP_RADISH_WAIT_FOR_END_STARTUP_TX;
		}
		break;

    case DP_RADISH_TX_START_TONE:
         // wait for before transmitting the Start Tone.
         if ( x_elapsed_time(dp_timer) >= 115 )
         {
           x_debug_msg("DP - transmitting START tone");
           XmtStartTone();
           DpRadishState = DP_RADISH_WAIT_FOR_END_START_TONE;
         }
         break;

     case DP_RADISH_WAIT_FOR_END_START_TONE:
         if ( !(dp_read_dsp_ram(0x3a) & 0x10) )
         {
           dp_timer = x_current_time();
           if (at_ssq_rcvd)
           {
              DpRadishState = DP_RADISH_TX_CAS_TONE;
              at_ssq_rcvd = FALSE;
           }
           else if (at_svv_rcvd  || at_sda_rcvd || at_sfx_rcvd)
           {
              x_radish_state = RADISH_TX_MODE_IND;
              x_radish_rate = VV_V21_300;

              x_debug_msg("DP - Startup originate");
              DpRadishState = DP_RADISH_STARTUP_TX;
#ifdef MODEM_Z80
		x_radish_delay = 95+30;
#else
		x_radish_delay = 95;
#endif

           }
         }
         break;

     case DP_RADISH_TX_CAS_TONE:
         if ( x_elapsed_time(dp_timer) >= 75)
         {
           x_debug_msg("DP - transmitting CAS tone");
           XmtCasTone();
           DpRadishState = DP_RADISH_WAIT_FOR_END_CAS_TONE;
         }
         break;

     case DP_RADISH_WAIT_FOR_END_CAS_TONE:
         if ( !(dp_read_dsp_ram(0x3a) & 0x10) )
         {
		x_debug_msg("DP- CAS tone done");
		x_radish_state = RADISH_RX_CAP;
		x_radish_rate = VV_V21_300;
		DpRadishStartup(ANSWER,(byte)x_radish_rate,2,NON_V17);
		DpRadishState = DP_RADISH_STARTUP_RX_EXPEDITE;
         }
         break;

     case DP_RADISH_STARTUP_TX:
         if ( x_elapsed_time(dp_timer) > x_radish_delay )
         {
           x_debug_msg("DP - Startup originate");
           dp_modem_idle_cmd();
           DpRadishStartup(ORIGINATE,(byte)x_radish_rate,0,NON_V17);
           DpRadishState = DP_RADISH_WAIT_FOR_END_STARTUP_TX;
         }
         break;

     case DP_RADISH_WAIT_FOR_END_STARTUP_TX:
#if defined(VENUS)
		 // VENUS needs this
		 dp_read_dsp_ram(0x3A);
#endif
        // we do not need to look for data mode during tx startup
        // if ( dp_read_dsp_ram(0x3a) & 0x08 )
         {
           x_debug_msg("DP - End of Startup originate");
           DpRadishState = DP_RADISH_NULL;
           x_send_mail( RADISH_IO_TASK, IO_TASK, 0, RADISH_IO_CONNECT );

           // start T303 timer after sending CONNECT message to DTE
           if ( x_radish_state == RADISH_TX_DATA )
              x_send_mail( RADISH_IO_TASK,IO_TASK,0,RADISH_START_IO_TIMER );
         }
         break;

     case DP_RADISH_STARTUP_RX_EXPEDITE:
            x_debug_msg ( "DP - RX EXPEDITE" );

            DpRadishState = DP_RADISH_NULL;
            x_send_mail (RADISH_IO_TASK, IO_TASK, 0, RADISH_IO_CONNECT);

            // start io timer for all receive cases. See DP_RADISH_STARTUP_RX state.
            x_send_mail(RADISH_IO_TASK,IO_TASK,0,RADISH_START_IO_TIMER);
           break;

     case DP_RADISH_ANSWER_BILL_DELAY:
		if(x_elapsed_time(dp_timer) >= SECOND2)
		{
			DPRadishXmtAnswerTone();
			DpRadishState = DP_RADISH_WAIT_FOR_END_ANSWER_TONE;
		}
		break;

     case DP_RADISH_WAIT_FOR_END_ANSWER_TONE:
		if ( !(dp_read_dsp_ram(0x3a) & 0x10) )
		{
			x_debug_msg ( "DP - answer tone done" ) ;
			x_send_mail ( RADISH_AT_TASK, AT_TASK, 0, RADISH_AT_CONNECT );
			x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
			x_modem_state = MS_OFFHOOK;
		}
		break;

     case DP_RADISH_NULL:
         break;

  }
  return (TRUE);
}
#endif
