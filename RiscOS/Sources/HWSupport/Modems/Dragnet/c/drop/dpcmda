/*name and version number:@(#)dpcmda.c	1.9*/
/*date of get: 		  12/15/00 10:10:52*/
/*date of delta:	  11/30/00 16:56:37*/
/****************************************************************
File :	dpcmda.c
Description :
	Contains all command functions related to the cs-4 data pump interface.

Procedures Contained :
	dp_read_rom_fw_ver
	wait_for_core_read
	dp_modem_command
	dp_modem_command_long
	dp_write_dsp_ram
	dp_read_dsp_ram
	dp_dsp_int_regread
	dp_dsp_int_regwrite
	dp_dsp_regread 
	dp_isr_idle
	dp_command1
	dp_command3
	dp_enter_voice_mode
	dp_idle
	dp_dial_dtmf
	dp_voice_startup
	dp_gen_tone

Revision History :
	Initials	Date		Change
*****************************************************************/

#include "llglob_d.h"

#if defined(CS_4)
#include "dpglob.h"
#include "sa_glob.h"
#include <mqx.h>
#include "sa_mqx.h"

#include "allglobs.h"

/****************************************************************
Routine : wait_for_core_read()
Description :

    Wait for the DSP to read the command.

    This command silently (with a debug print)
	times out on failure.
*****************************************************************/
void
wait_for_core_read ( void )
{
	word dp_timer = x_current_time() ;

	_sched_yield();

 	while ( !DP_IS_CORE_RD_INT( CRBANK ) &&
			(x_elapsed_time( dp_timer ) < SECOND1) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	if ( x_elapsed_time( dp_timer ) >= SECOND1 )
	{
		printf("DP - wait_for_core_read failure\n");
		DP_DELETE_TASK();
	}
}

/****************************************************************
Routine : dp_modem_command
Description : Send a command to the modem.
Parameters in : command	-	the command to be executed
		param1	-	the first parameter for the command
		param2	-	the second parameter for the command
*****************************************************************/
void
dp_modem_command ( byte command, byte param1, byte param2 )
{
	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK ) ;

	dp_regwrite( 0x35, param2 ) ;
	dp_regwrite( 0x36, param1 ) ;
	dp_regwrite( 0x37, command ) ;

	wait_for_core_read() ;
}

/****************************************************************
Routine : dp_modem_command_long
Description : Send a command to the modem.
Parameters in : command	-	the command to be executed
		param1	-	the first parameter for the command
		param2	-	the second parameter for the command
		param3	-	the third parameter for the command
		param4	-	the fourth parameter for the command
*****************************************************************/
void
dp_modem_command_long ( byte command,
						byte param1,
						byte param2,
						byte param3,
						byte param4 )
{
	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK ) ;

	dp_regwrite( 0x33, param4 );
	dp_regwrite( 0x34, param3 );
	dp_modem_command( command, param1, param2 );
}

/****************************************************************
Routine : dp_write_dsp_ram
Description : Write to dsp ram location
*****************************************************************/
void
dp_write_dsp_ram ( word loc, word value )
{
	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite( 0x32, (byte)value );
	dp_regwrite( 0x33, (byte)(value >> 8) );
	dp_regwrite( 0x34, (byte)loc );
	dp_regwrite( 0x35, (byte)(loc >> 8) );
	dp_regwrite( 0x37, 0x01 );

	wait_for_core_read();
}

/****************************************************************
Routine : dp_read_dsp_ram
Description : Read from dsp ram location
*****************************************************************/
word
dp_read_dsp_ram ( word loc )
{
	byte dp_byte_d, dp_byte_e;
	word dp_timer;

	DP_CLR_CORE_INTS( CWBANK|CRBANK );
	dp_regwrite( 0x34, (byte)loc );
	dp_regwrite( 0x35, (byte)(loc >> 8) );
	dp_regwrite( 0x37, 0x04 );
	dp_timer = x_current_time();

	_sched_yield();

	// wait for response from dsp - response code = 0x01
	while ( !(dp_regread16( 0xe5 ) & CWBANK)
			&& (x_elapsed_time( dp_timer ) <= MS200) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	_INT_DISABLE();
		dp_byte_d = DP_INT_REGREAD( 0x33 ) ;
		dp_byte_e = DP_INT_REGREAD( 0x34 ) ;
		G(dp_byte_f) = DP_INT_REGREAD( 0x35 ) ;
		DP_INT_REGWRITE( 0xe5, CWBANK ) ;
	_INT_ENABLE();

	if ( G(dp_byte_f) != 0x01 )	// if command failed
	{
		if ( x_elapsed_time( dp_timer ) > MS200 )
		{
			printf("DP - Timed out in dp_read_dsp_ram()\n") ;
		}
		printf("dp_read_dsp_ram() failure.  addr=0x%x\n", loc);
		DP_DELETE_TASK();
	}

	return (word)((((word)dp_byte_e) << 8) | dp_byte_d);
}

/****************************************************************
Routine : dp_dsp_int_regread
This command is used to read the internal dsp register
and the only parameter tells which dsp register to read
and the codes are
	0 - mwait
	1 - ioc
	2 - pioc
	3 - inc
	4 - pllc
	5 - powerc
	6 - spkr
*****************************************************************/
non_banked word	dp_dsp_int_regread ( byte reg )
{
	byte dp_byte_d, dp_byte_e ;
	word dp_timer;

	dp_modem_command( 0x30, reg, 0 );
	dp_timer = x_current_time () ;

	/* wait for interrupt from dsp - response code = 0xA */
	while ( !(dp_regread16( 0xe5 ) & CWBANK)
			&& (x_elapsed_time( dp_timer ) <= MS200) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	_INT_DISABLE();
		dp_byte_d = DP_INT_REGREAD( 0x33 ) ;
		dp_byte_e = DP_INT_REGREAD( 0x34 ) ;
		G(dp_byte_f) = DP_INT_REGREAD( 0x35 ) ;
		DP_INT_REGWRITE( 0xe5, CWBANK ) ;
	_INT_ENABLE();

	if ( G(dp_byte_f) != 0xa )	// if command failed
	{
		if ( x_elapsed_time( dp_timer ) > MS200 )
		{
			printf("DP - Timed out in dp_dsp_int_regread\n") ;
		}

		printf ( "DP - dp_dsp_int_regread() failure\n" ) ;
		DP_DELETE_TASK();
	}

	return (word) ((((word)dp_byte_e) << 8) | dp_byte_d) ;
}

/****************************************************************
Routine : dp_dsp_int_regwrite
This command is used to write the internal dsp register
and the first parameter tells which dsp register to read
and the codes are
	0 - mwait
	1 - ioc
	2 - pioc
	3 - inc
	4 - pllc
	5 - powerc
	6 - spkr
and the second parameter is value to write in the dsp register
*****************************************************************/
void
dp_dsp_int_regwrite ( byte reg, word value )
{
	dp_regwrite( 0x34, (byte)value );
	dp_modem_command( 0x31, reg, (byte)(value >> 8) );
}

/****************************************************************
Routine : dp_dsp_regread 
Description : Read from dsp side bamil registers
*****************************************************************/
byte dp_dsp_regread ( byte loc )
{
	byte dp_byte_e;
	word dp_timer;

	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK ) ;

	dp_regwrite( 0x36, loc );
	dp_regwrite( 0x37, 0x06 );
	wait_for_core_read() ;
	dp_timer = x_current_time () ;

	while ( !(dp_regread16( 0xe5 ) & CWBANK)
			&& (x_elapsed_time( dp_timer ) <= MS200) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	_INT_DISABLE();
		dp_byte_e = DP_INT_REGREAD( 0x34 ) ;
		G(dp_byte_f) = DP_INT_REGREAD( 0x35 ) ;
		DP_INT_REGWRITE( 0xe5, CWBANK ) ;
	_INT_ENABLE();

	if ( G(dp_byte_f) != 0x02 )
	{
		printf("DP - dp_dsp_regread() failure\n");
		DP_CLR_CORE_INTS( 0xff ) ;
		return 0;
	}
	return dp_byte_e;
}

static
void
dp_isr_modem_command ( byte command, byte param1, byte param2 )
{
	volatile U32 i = 0;

	// clear core read/write int bank bits
	DP_CLR_CORE_INTS( CWBANK|CRBANK ) ;

	dp_regwrite( 0x35, param2 ) ;
	dp_regwrite( 0x36, param1 ) ;
	dp_regwrite( 0x37, command ) ;

	//wait_for_core_read() ;
 	while ( !DP_IS_CORE_RD_INT( CRBANK ) && (i++ < 0xffff) )
		;
	//printf("dp_isr_modem_command(): i = %d\n", i);
}

static
word
dp_isr_dsp_int_regread ( byte reg )
{
	byte dp_byte_d, dp_byte_e, dp_byte_f;
	volatile U32 i = 0;

	dp_isr_modem_command( 0x30, reg, 0 );

	// wait for interrupt from dsp - response code = 0xA
	while ( !(dp_regread16( 0xe5 ) & CWBANK) && (i++ < 0xffff) )
			;

	//printf("dp_isr_dsp_int_regread(): i = %d\n", i);

	dp_byte_d = dp_regread( 0x33 ) ;
	dp_byte_e = dp_regread( 0x34 ) ;
	dp_byte_f = dp_regread( 0x35 ) ;
	dp_regwrite( 0xe5, CWBANK ) ;

	if ( dp_byte_f != 0xa )	// if command failed
	{
		if ( i > 0xfffe )
		{
			printf("dp_isr_dsp_int_regread() timeout\n");
		}
		else
			printf("dp_isr_dsp_int_regread() failure\n");

		return (word) 0;
	}

	return (word) ((((word)dp_byte_e) << 8) | dp_byte_d);
}

#define VPCM_GOTO_ROM_ADRH		0xd0
#define VPCM_GOTO_ROM_ADRL		0xcb
#define K56V_GOTO_ROM_ADRH		0xd0
#define K56V_GOTO_ROM_ADRL		0xcb

/****************************************************************
Routine : dp_isr_idle
Description : Voice or data, make sure DSP is in IROM
*****************************************************************/
void dp_isr_idle( void )
{
	if ( is_data_call(GET_MODEM()) )
	{
		if ( dp_isr_dsp_int_regread(8) & 0x0800 )
		{
			printf("Data in ERAM, Get out...\n");

			if (G(vpcm_mode) == 1)
			{
				dp_isr_modem_command(GOTO_CMD,
									VPCM_GOTO_ROM_ADRH,
									VPCM_GOTO_ROM_ADRL);
			}
#if defined(K56FLEX)
			else
			{
				dp_isr_modem_command(GOTO_CMD,
									K56V_GOTO_ROM_ADRH,
									K56V_GOTO_ROM_ADRL);
			}
#endif // K56FLEX
		}
	}
	else if ( is_voice_call(GET_MODEM()) )
	{
		printf("Voice in ERAM, Get out...\n");
		dp_isr_modem_command( 0x13, 0, 0 );
	}
}


/******************************************************************************
** Function : dp_command3
*******************************************************************************
** Description :
**  a dsp command API that takes 3 args
*******************************************************************************
** Arguments :
**  cmd: the host to DSP command.
**  a1-3: 
** mailbox correspondence:
**    0x37: cmd
**    0x36: a1
**    0x35: a2
**    0x34: a3
**
** NOTE: if a parameter is not required by the issued command, it should be
**       passed as zero to this function.
**
******************************************************************************/
void dp_command3(U8 cmd, U8 a1, U8 a2, U8 a3)
{
  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);

  dp_regwrite16(0x34, a3);
  dp_regwrite16(0x35, a2);
  dp_regwrite16(0x36, a1);
  dp_regwrite16(0x37, cmd);

  wait_for_core_read();
}

/******************************************************************************
* Function : dp_command1
*******************************************************************************
* Description :                                                              *
*  a dsp command API that takes 1 args  
*******************************************************************************
* Arguments :
*  cmd: the host to DSP command.
*  a1-1: 
* mailbox correspondence:
*    0x37: cmd
*    0x36: a1
*
* NOTE: if a parameter is not required by the issued command, it should be   *
*       passed as zero to this function.                             *
*
*******************************************************************************/
void dp_command1(U8 cmd, U8 a1)
{
  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);

  dp_regwrite16(0x36, a1);
  dp_regwrite16(0x37, cmd);

  wait_for_core_read();
}

/******************************************************************************
* Function : dp_read_rom_fw_ver
*******************************************************************************
* Description :
*   read the ROM code firmware version.release and return it as a U32
*******************************************************************************
* Arguments :
*   none
*******************************************************************************/
U32 dp_read_rom_fw_ver()
{
  U8 ver, h_rel, l_rel;

  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);

  dp_regwrite16(0x37, 0x10);  /* issue report fw command */

  wait_for_core_read();

  ver = dp_regread(0x32);
  l_rel = dp_regread(0x33);
  h_rel = dp_regread(0x34);

  return ((ver << 16) | (h_rel << 8) | l_rel);
}

/*
*******************************************************************************
* Function : dp_dial_dtmf
*******************************************************************************
* Description :   
*   dial a string of dtmf digits
*******************************************************************************
* Arguments :
*   digits: a string of DTFM digits
*   len: length/bytes of the digits
*******************************************************************************
*/
void dp_dial_dtmf(U8 digits[], U16 len)
{
  U16 i;

  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);

  for (i = 0; i < len; i++)
  {
    if (digits[i] >= '0' && digits[i] <= '9')
    { // digit: 0 - 9, reg val: 0 - 9 
      dp_regwrite16(0x36, digits[i] - '0');
    }
    else if (digits[i] >= 'A' && digits[i] <= 'D')
    { // digit: A - D, reg val: 0x0c - 0x0f 
      dp_regwrite16(0x36, 0x0c + (digits[i] - 'A'));
    }
    else if (digits[i] >= 'a' && digits[i] <= 'd')
    { // digit: a - d, reg val: 0x0c - 0x0f 
      dp_regwrite16(0x36, 0x0c + (digits[i] - 'a'));
    }
    else if (digits[i] == '*')
    { // digit: *, reg val: 0x0a 
      dp_regwrite16(0x36, 0x0a);
    }
    else if (digits[i] == '#')
    { // digit: #, reg val: 0x0b 
      dp_regwrite16(0x36, 0x0b);
    }
    else
      ;  /* unknown digit, skip */
    
    dp_regwrite16(0x37, 0x0a);        /* dtmf command */
    wait_for_core_read();
    SLEEP(1000);
  }  /* for */
}

/*
*****************************************************************************
* Function : dp_idle
******************************************************************************
******************************************************************************
* Description :
*   instruct the DSP to be in idle mode: command 0x13 
******************************************************************************
* Arguments :
*   none
*****************************************************************************
*/
void dp_idle()
{
  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);

  dp_regwrite16(0x37, 0x13);

  wait_for_core_read();
}

/*
*****************************************************************************
* Function : dp_enter_voice_mode
******************************************************************************
******************************************************************************
* Description :
*   set CS RAM 0x102f to 1 - TAD/TAM mode, then put DSP in TAD mode
* command: 0x20
* mailbox: 0x36 - 0x30 as follow:
* 0x36 - 0x35: VT_CNTRL_H, VT_CNTRL_L,
* 0x34 - 0x33: Rx level, Tx level, 
* 0x32 - 0x30: 0, FDSP_CNTL_H, FDSP_CNTL_L 
*
******************************************************************************
* Arguments :
* vt_ctrl: mode of operation, high order byte of vt_ctrl
* rx_level: gain level at receive
* tx_level: gain level at transmit
* fdsp_ctrl: sampling rate: for example, 0x0004: 8K Hz
*****************************************************************************
*/
void dp_enter_voice_mode(U8 vt_ctrl, U8 g729_mode, U8 rx_level, U8 tx_level, U16 fdsp_ctrl)
{
	// Attempt to synchronize all DSP's to 10ms boundary
	// This will make interrupt service more efficient
	// by allowing the ISR to service multiple interrupts per vector
	// Raise priority to get accurate synch timing
	// (might take long time to hit the right ms in a busy system)
	TIME_STRUCT time;
	uint_32 old_pri;
	_task_set_priority(_task_get_id(), SA_VOIP_SYNCH_PRI, &old_pri);  
	do {
		_time_delay(1);
		_time_get_elapsed(&time);
	} while ( ( time.MILLISECONDS % 10 ) > 0 );
	_task_set_priority(_task_get_id(), SA_VOIP_NORMAL_PRI, &old_pri);  

  dp_regwrite16(UM_HINT_REG, CRBANK | CWBANK);
  dp_regwrite16(0x30, (U8) (fdsp_ctrl & 0xff));
  dp_regwrite16(0x31, (U8) (fdsp_ctrl >> 8));
  dp_regwrite16(0x32, 0x00);
  dp_regwrite16(0x33, tx_level);
  dp_regwrite16(0x34, rx_level);
  dp_regwrite16(0x35, g729_mode);
  dp_regwrite16(0x36, vt_ctrl);
  dp_regwrite16(0x37, 0x20);

  wait_for_core_read();
}

/*
*****************************************************************************
* Function : dp_gen_tone
******************************************************************************
******************************************************************************
* Description :
*   test function to generate DTMF tone without TAM code
******************************************************************************
* Arguments :
*   DTMF tone/digit to generate: 0 to 16
*****************************************************************************
*/
void dp_gen_tone(U8 digit)
{
  if (digit >= 16)
  {
    return;
  }

#if 0
  if (digit == 1)
  {
    dp_command1(0x12, 0x0);          // on-hook
    SLEEP(4000);                        
  }
  dp_command1(0x11, 0x0);          // off-hook
  SLEEP(4000);                      // wait for dial tone 
  dp_dial_dtmf("101", 3);
#else 
  // use training to test loop
  dp_command1(0x11, 0x0);          // off-hook
  SLEEP(4000);
  dp_command1(0x0e, 0);            // start up the modem to answer 
  // dp_command1(0x0a, digit);     // gen tone
#endif
}

/*
*****************************************************************************
* Function : dp_voice_startup
******************************************************************************
******************************************************************************
* Description :
*   Update the DSP ROM code status area to enable analog mode
*   Set up procedure can be found in 
*   Venus-1 DD ROM FW Specification, Issue 1.0, 02/14/97, Charles Zheng
*
******************************************************************************
* Arguments :
*    NONE
*****************************************************************************
*/
void dp_voice_startup()
{

  dp_write_dsp_ram(0x1FFC, 0x0000);  //  
  dp_write_dsp_ram(0x0826, 0x1040);  // must be u-law 
  // IoStreamIndex,
  // 0x01: analog both modem and voice 
  // 0x02: digital for modem/data
  // 0x03: digital for voice/voip
  dp_write_dsp_ram(0x102E, 0x0003);
  dp_write_dsp_ram(0x102F, 0x0000);    // always set it to 0

  dp_write_dsp_ram(0x0801, 0x21ff);    // Info0_tx
  dp_write_dsp_ram(0x0821, 0x0800);    // V34 option

  dp_write_dsp_ram(0x003D, 0x0200);    // HDLC opt
}
#endif // CS_4
