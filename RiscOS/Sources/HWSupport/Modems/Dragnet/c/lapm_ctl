/*name and version number:@(#)lapm_ctl.c	1.117*/
/*date of get: 		  12/15/00 10:10:38*/
/*date of delta:	  11/30/00 16:58:31*/
/****************************************************************
File :	lapm_ctl.c
Description :
	Contains all routines to process lapm control frames:
	Supervisorry frames and Unnumbered frames.

Procedures Contained :
	lapm_process_ack
	lapm_rx_frame_type
	lapm_send_control_frame
	lapm_process_xid_parameter 
	lapm_process_xid
	lapm_send_break
	lapm_process_break 

Revision History :
	Initials	Date		Change
	J. Xu    	02/09/93	Initial
*****************************************************************/

//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
//msm// #include "z80glob.h"
#include "dpglob.h"
#include "ioglob_d.h"
#include "atglob.h"
#include "lapm.h"
#include "v42bis.h"
//msm// #include "v44.h"
#if defined(CS_DEBUG)
# include "lapm_ctl.h"
#endif
#include "allglobs.h"

#if defined(Z80_DEBUG_THIS_FILE)
//# define Z80_DEBUG_LAPM_CTL	// extra LAPM debug info
# define XID_DUMP	// extra XID debug info
#endif

#if defined(CS_LAPM_DEBUG) || defined(CS_4) // || defined(MODEM_ARM)
# define Z80_DEBUG_LAPM_CTL
# if defined(MODEM_Z80)
#  define x_debug_msg(x) (ddputs_24l(x))
# endif
# if defined(CS_4)
#  define LAPM_SREJ_DEBUG
# endif
#endif

/****************************************************************
Routine : lapm_process_ack
Description :
	Process the ack sequence number of i-frame N(R) from remote.
Parameters in :
	the ack sequence number N(R) received from remote in 
	iframe, rr, rnr or rej frames.  Note that the N(R) received
	in an SREJ frame does not indicate acknowledgement of any
	I frames and therefore shouldn't be sent to this function.

	Also note that the lapm_nr parameter is the shifted byte
	actually representing N(R)
Parameters out :
	none
Revision History :
	Initials	Date		Change
	VR     		02/10/93	Initial
*****************************************************************/
non_banked byte lapm_process_ack ( byte lapm_nr )
{
	byte i, vs, nr ;
	LAPM_FRAME *fptr;

	if ( G(lapm_vs) < G(lapm_va) )		// e.g. vs=1, va=125
		vs = (byte) (G(lapm_vs) + 128);
	else
		vs = G(lapm_vs) ;

	if ( lapm_nr < G(lapm_va) )			// e.g. vs=1, va=125, nr=0
		nr = (byte) (lapm_nr + 128);
	else
		nr = lapm_nr ;

	// Check for valid sequence number.  From the ITU-T
	// V.42 specification:  V(A) <= N(R) <= V(S)
	if ( ! ((G(lapm_va) <= nr) && (nr <= vs)) )
	{
		x_debug_msg ( "lapm - nr sequence error" ) ;
		#if defined(Z80_DEBUG_LAPM_CTL) && defined(DEBUG_PRINTF)
		printf("vs=%d; nr=%d;  V(A)=%d <= N(R)=%d <= V(S)=%d\n",
						vs, nr, G(lapm_va), lapm_nr, G(lapm_vs));
		#endif
		cs_insert_error_tag (0x7700,0);
		return FALSE;		/* invalid sequence number */
	}

	while ( lapm_nr != G(lapm_va) )
	{
		// delete all frames that have been acked
		for ( i=0, fptr = G(lapm_prev_ack_ltfp) ; i < G(lapm_k) ; i++ )
		{
			if ( ++fptr >= G(lapm_last_ltfp) ) {
				fptr =  &LTF[0];
			}
			//--------------------------------------------------------
			// Must handle Selective reject as well.
			// Code assumes txstatus has only three states;
			//		[EMPTY, FULL, and SREJ]
			//--------------------------------------------------------
			if ( ( fptr -> txstatus != EMPTY ) &&
			 	( (fptr -> data[1] >> 1) == G(lapm_va) ) )
			{
				#if defined(SA_LAPM_DEBUG)
				if ( G(sa_lapm_debug) == SA_LAPM_DEBUG_QMP_ON )
				{
					printf("Ack %d\n", G(lapm_va));

					//-----------------------------------------------
					// to debug a client modem that stops receiving
					// e.g. USR sends perpetual SREJs
					// uncomment the next line
					//-----------------------------------------------
					//G(sa_lapm_debug_timer) = x_current_time();
				}
				#endif
				fptr -> txstatus = EMPTY ;
				fptr -> len = 0 ;
				G(lapm_retransmit) = 0 ;
				G(lapm_prev_ack_ltfp) = fptr;
				break;
			}
		}
		G(lapm_va) = (byte) (( G(lapm_va) + 1 ) & 127);
		lapm_reset_timer () ;		/* reset timer T401 */
	}
	return ( TRUE ) ;
}

/****************************************************************
Routine : lapm_rx_frame_type
Description :
	Check to see what frame we received, and return a frame type.
Parameters in :
	none
Parameters out :
	frame type
Revision History :
	Initials	Date		Change
	J.Xu     	02/10/93	Initial
*****************************************************************/
non_banked byte lapm_rx_frame_type ( void )
{
	byte nr, i;
	word len;

    if ( (LRF.status != FULL) || ((LRF.data[0] >> 2) != LAPM_DATA_DLCI()) )
	{
		return ILGFRM;
	}

	// N(R) for those frames where it makes sense
	nr = (byte) (LRF.data[2] >> 1);
	len = LRF.len;

	/* I frames */
	if ( ! ((LRF.data[1]) & 0x1) ) 
	{
		/* I-frames can only be Commands */
		if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
		    (!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
		{
			/* check for valid length - 0 thru 128 */
			if ( (len >= 3) && (len <= LAPM_FRAME_SIZE) )
			{
				G(lapm_poll) = (byte) (LRF.data[2] & PF);
				if ( lapm_process_ack( nr ) )
				{
					#if defined(xxxxxZ80_DEBUG_LAPM_CTL) && defined(DEBUG_PRINTF) // Placeholder for useful debug
					printf("Rcv Ns=%d Nr=%d\n",
								LRF.data[1]>>1, LRF.data[2]>>1);
					#endif // CS_4

					#if defined(SA_LAPM_DEBUG)
					if ( G(sa_lapm_debug) == SA_LAPM_DEBUG_QMP_ON )
					{
						//-------------------------------------------
						// to debug a client modem that stops sending
						// e.g. Diamond MM
						// uncomment the next line
						//-------------------------------------------
						//G(sa_lapm_debug_timer) = x_current_time();
					}
					#endif // SA_LAPM_DEBUG
					return IFRM;
				}
			}
		}
		x_debug_msg("lapm - rcv - ILG IFRM 1");
		cs_insert_error_tag (0x7800,0);
		lapm_clear_rx_frame () ;
		return ( ILGFRM ) ;
	}

	/* clear all frames except i-frames */
	lapm_clear_rx_frame () ;

	// We do not accept 2 byte dlci (not yet...)
	if ( (LRF.data[0] & E_A) != E_A )
	{
		x_debug_msg("lapm - rcv - ILG FRM 2") ;
		cs_insert_error_tag (0x7900,0);
		return ( ILGFRM ) ;
	}

	#if defined (CS_MODEM) || defined (COPERNICUS)
	if (G(cs_rmp_level2_debug_on))
		cs_insert_error_tag((0x6600 | ((word)(LRF.data[1]))),0);
	#endif

	#if defined(Z80_DEBUG_LAPM_CTL)
	switch ( LRF.data[1] )
	{
		case RR :
			//x_debug_msg("rcv-RR");
			break ;
		case RNR :
			x_debug_msg("rcv-RNR N(R)=") ; dp_puts_dec((word) nr);
			sendCrLf();
			break ;
		case REJ :
			x_debug_msg("rcv - REJ N(R)="); dp_puts_dec((word) nr);
			sendCrLf();
			break ;
		case SREJ:
			x_debug_msg("rcv-SREJ N(R)=");
			dp_puts_dec((word) nr);
			sendCrLf();
			break ;
		case SABME :
			x_debug_msg("rcv-SABME") ;
			break ;
		case DISC :
			x_debug_msg("rcv-DISC") ;
			break ;
		case TEST :
			x_debug_msg("rcv-TEST") ;
			break ;
		case DM :
			x_debug_msg("rcv-DM") ;
			break ;
		case DM_F :
			x_debug_msg("rcv-DM_F") ;
			break ;
		case UA :
			x_debug_msg("rcv-UA") ;
			break ;
		case FRMR :
			x_debug_msg("rcv-FRMR") ;
			break ;
		case FRMR_F :
			x_debug_msg("rcv-FRMR_F") ;
			break ;
		case XID :
			x_debug_msg("rcv-XID") ;
			break ;
		case UI :
			x_debug_msg("rcv-UI") ;
			break ;
		default :
			x_debug_msg("rcv-ILGFRM 3");
			break ;
	}
	#endif // Z80_DEBUG_LAPM_CTL

	switch ( LRF.data[1] )
	{
	/* Supervisory frames, can be Commands or Responses */
	case RR :
	case RNR :
	case REJ :
		if ( len != 3 )
			return ( ILGFRM ) ;

		if ( lapm_process_ack( nr ) == FALSE )
		{
			#if defined(Z80_DEBUG_LAPM_CTL) && defined(DEBUG_PRINTF)
			printf("\nGOT %s\n", (LRF.data[1] == RNR) ? "RNR" :
								(LRF.data[1] == RR) ? "RR" : "REJ" );
			#endif // Z80_DEBUG_LAPM_CTL
			return ILGFRM;
		}

		if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
		    (!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
			G(lapm_poll) = (byte) (LRF.data[2] & PF);

		return ( LRF.data[1] ) ;

	case SREJ:
		// Selective reject.  PF bit always 1 for SREJ frame.
		if (len != 3)
		{
			#if defined(Z80_DEBUG_LAPM_CTL)
			x_debug_msg("bad SREJ len=");
			dp_puts_dec((word) len);
			sendCrLf();
			#endif
			return ILGFRM;
		}

		if (LRF.data[2] & PF)
		{
			x_debug_msg("bad SREJ PF==1");
			return ILGFRM;
		}

		// N(R) indicates the packet that needs to be resent.
		// We must mark this frame as needing to be resent in
		// the lapm_transmit_frame[] array.
		for (i=0; i<G(lapm_k); i++)
		{
			if ( (LTF [i].txstatus != EMPTY) &&
					((LTF [i].data[1] >> 1) == nr) )
			{
				if ( LTF [i].txstatus == FULL )
				{
					#if defined(HDLC_FRAMES_BY_REFERENCE)
					if ( LTF[i].cnt )
					{
						// frame is already Queued in Ring Buffer
						#if defined(Z80_DEBUG_LAPM_CTL)
						x_debug_msg("TX SREJ frame ALREADY Q'ed");
						#endif // Z80_DEBUG_LAPM_CTL
						break;
					}
					#endif // HDLC_FRAMES_BY_REFERENCE

					LTF [i].txstatus = SREJ;

					++G(lapm_tx_srej_count);
					#if defined(Z80_DEBUG_LAPM_CTL)
					x_debug_msg("Inc TX SREJ cnt=");
					dp_puts_dec((word)G(lapm_tx_srej_count)); sendCrLf();
					#endif
				}
				else // if ( LTF [i].txstatus == SREJ )
				{
					#if defined(Z80_DEBUG_LAPM_CTL)
					x_debug_msg("SREJ ALREADY in TX Q  nr=");
					dp_puts_dec((word)nr); sendCrLf();
					#endif
				}
				break;
			}
		}

		if (i == G(lapm_k))
		{
			#if defined(Z80_DEBUG_LAPM_CTL)
			x_debug_msg("lapm ERROR: SREJ frame not in xmt q");
			#endif // Z80_DEBUG_LAPM_CTL
			return ILGFRM;
		}
		return SREJ;

	/* Unnumbered frames that can only be Commands */
	case SABME :
	case DISC :
	case TEST :
		if ( len != 2 )
			return ( ILGFRM ) ;
		if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
			(!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
			return ( LRF.data[1] ) ;
		else
			return ( ILGFRM ) ;

	/* Unnumbered frames that can only be Responses */
	case DM :
	case DM_F :
	case UA :
	case FRMR :
	case FRMR_F :
		if ( len != 2 )
			return ( ILGFRM ) ;

		if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
			(!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
			return ( ILGFRM ) ;

		return ( LRF.data[1] ) ;

	case XID :
#if defined(Z80_DEBUG_LAPM_CTL)
	{
		byte i;

		x_debug_msg("rx lapm XID=");
		for ( i = 0; i < len; i++ )
		{
			sendHexByte(LRF.data[i]);
			sendDumbChar(' ');
		}
		sendCrLf();
	}
#endif // Z80_DEBUG_LAPM_CTL
	return ( XID ) ;

	case UI :
		return ( UI ) ;

	default :
		return ( ILGFRM ) ;
	}
}

/****************************************************************
Routine : lapm_send_control_frame
Description :
	Build Supervisory and Unnumbered frames and transmit out.
Parameters in :
	cmd - the command or rersponse in the control field
	cr - command/response bit in the address field
	pf - Pull/Final bit
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/09/93	Initial
*****************************************************************/
non_banked void lapm_send_control_frame ( byte cmd, byte cr, byte pf )
{
	if ( LCF.status == FULL )
		lapm_tx_hdlc_frame() ;

	if ( LCF.status == FULL )
	{
		#if defined(Z80_DEBUG_LAPM_CTL) && defined(LAPM_SREJ_DEBUG)
		x_debug_msg("lapmsndctl fail q full.count=");
		dp_puts_dec(io_get_dce_queue_count());
		x_debug_msg("cmd=");
		sendHexByte(cmd);
		x_debug_msg(" old ctl=");
		sendHexByte(LCF.data[1]);
		if (RR == LCF.data[1])
		{
			x_debug_msg(" N(R)=");
			sendDecByte(LCF.data[2]>>1);
		}
		if (G(lapm_remote_busy))
			x_debug_msg(" remote busy");
		else
			sendCrLf();
		#endif
		return;
	}

	#if defined(CS_MODEM) || defined(COPERNICUS)
	if (G(cs_rmp_level2_debug_on))
		cs_insert_error_tag((0x5500 | ((word)(cmd))),0);
	#endif

#if defined(Z80_DEBUG_LAPM_CTL)
	switch ( cmd )
	{
		case RR :
			//x_debug_msg("send-RR");	// usually commented out
			break ;
		case RNR :
			x_debug_msg("send-RNR");
			break ;
		case REJ :
			x_debug_msg("send-REJ N(R)=");
			dp_puts_dec((word) G(lapm_vr));	sendCrLf();
			break ;
		case SREJ:
			x_debug_msg("send-SREJ N(R)=");
			dp_puts_dec((word) G(lapm_vr));	sendCrLf();
			break ;
		case SABME :
			x_debug_msg("send-SABME") ;
			break ;
		case DISC :
			x_debug_msg("send-DISC") ;
			break ;
		case TEST :
			x_debug_msg("send-TEST") ;
			break ;
		case DM :
			x_debug_msg("send-DM") ;
			break ;
		case UA :
			x_debug_msg("send-UA") ;
			break ;
		case FRMR :
			x_debug_msg("send-FRMR") ;
			break ;
		default :
			x_debug_msg("send-ILGFRM") ;
			break ;
	}
#endif // Z80_DEBUG_LAPM_CTL

	/* address field */
	if ( cr == TRUE )
	{
		if ( G(x_modem_originate) )
			LCF.data[0] = 0x03 ;
		else
			LCF.data[0] = 0x01 ;
	}
	else
	{
		if ( G(x_modem_originate) )
			LCF.data[0] = 0x01 ;
		else
			LCF.data[0] = 0x03 ;
	}
	// insert the dlci value..
	LCF.data[0] |= (LAPM_DATA_DLCI() <<2);
	
	if ( ( cmd & U_FORMAT ) == U_FORMAT )		/* Unnumbered format */
	{
		LCF.len = 2 ;
		LCF.data[1] = cmd ;
		if ( pf == TRUE )
			LCF.data[1] |= U_PF ;
	}
	else							/* Supervisory format */
	{
		LCF.len = 3 ;
		LCF.data[1] = cmd ;
		LCF.data[2] = (byte) (G(lapm_vr) << 1);	/* nr = vr */
		if ( pf == TRUE )
			LCF.data[2] |= PF ;		/* poll-final bit */
	}
	LCF.status = FULL ;

	lapm_tx_hdlc_frame() ;
}


non_banked void
lapm_process_v42bis_xid( byte *frame_ptr, word comp_len )
{
	byte *end_ptr;
	word total;

#if defined(Z80_DEBUG_LAPM_CTL)
	x_debug_msg("Found V.42bis param group");
#endif // Z80_DEBUG_LAPM_CTL

	// Feature must be enabled to bother
	if ( ! ( G(S).ModemOptions.Compression & V42BIS_COMP ) )
		return ;

	// Stopping point for parsing
	end_ptr = frame_ptr + comp_len;

	// Process V.42bis params in the compression group
	if ( *frame_ptr++ != COMPsid )
		return ;

	frame_ptr++;
	if ( *frame_ptr++ != 'V' )
		return ;
	if ( *frame_ptr++ != '4' )
		return ;
	if ( *frame_ptr++ != '2' )
		return ;

	while ( frame_ptr < end_ptr )
	{
		switch ( *frame_ptr++ )
		{
			// V.42bis Parameters
			case COMPp0id :
#if defined(Z80_DEBUG_LAPM_CTL)
				x_debug_msg("v42bis-P0");
#endif
				frame_ptr++;
				G(v42bis_P0) = (byte) (*frame_ptr++ & V42bisP0);
				break ;

			case COMPp1id :
#if defined(Z80_DEBUG_LAPM_CTL)
				x_debug_msg("v42bis-P1");
#endif
				frame_ptr++;
				total = 0;
				total = (word) ((*frame_ptr++ << 8) & 0xff00);
				total = (word) (total + (*frame_ptr++ & 0x00ff));
				if (total >= V42bis_MinP1)
				{
					if ( total < G(v42bis_N2) )
						G(v42bis_N2) = total;
				}		/* else illegal ??? */
				break ;

			case COMPp2id :
#if defined(Z80_DEBUG_LAPM_CTL)
				x_debug_msg("v42bis-P2");
#endif
				frame_ptr++;
				total = (word) (*frame_ptr++ & 0x00ff);
				if ((total >= V42bis_MinP2) && (total <= V42bis_MaxP2))
				{
					if ( total < G(v42bis_N7) )
						G(v42bis_N7) = (byte) total ;
				}	/* else illegal ???? */
				break ;
		}
	}
}

#if defined(V44)
/****************************************************************
Routine : lapm_process_v44_xid
*****************************************************************/
non_banked void
lapm_process_v44_xid( byte *frame_ptr )
{
	word total;

	#if defined(XID_DUMP)
	x_debug_msg("Found V.44 param group");
	#endif // XID_DUMP


	// Feature must be enabled to bother
	if ( ! ( G(S).ModemOptions.Compression & V44_COMP ) )
		return ;

	// Parse V.44 params in User Data Sub-field
	// Assume frame_ptr points to first param id of UDS
	if ( *frame_ptr++ !=  V44psid )
		return;
	frame_ptr++;	// skip length field
	if ( *frame_ptr++ !=  'V' )
		return;
	if ( *frame_ptr++ !=  '4' )
		return;
	if ( *frame_ptr++ !=  '4' )
		return;

	while (1)
	{
		switch ( *frame_ptr++ )
		{
		case COMP_v44_c0id:
			frame_ptr++;	// skip length field
			frame_ptr++;	// skip value for now
			break;

		case COMP_v44_p0id:
			frame_ptr++;	// skip length field
			G(v44_P0) = (byte) (*frame_ptr++ & V44P0);
			#if defined(XID_DUMP)
			x_debug_msg("V44-P0=");
			sendHexByte( G(v44_P0) );
			sendCrLf();
			#endif // XID_DUMP
			break;

		case COMP_v44_p1tid:
			frame_ptr++;	// skip length field

			// P1T
			total = 0;
			total = (word) ((*frame_ptr++ << 8) & 0xff00);
			total = (word) (total + (*frame_ptr++ & 0x00ff));
			if ( total >= V44_MIN_P1 ) {
				if ( total < G(v44_de_n2) ) {
					G(v44_de_n2) = total;
				}
			}
			#if defined(XID_DUMP)
			x_debug_msg("V44-P1T=");
			sendHexWord( total );
			sendCrLf();
			#endif // XID_DUMP

			break;

		case COMP_v44_p1rid:
			frame_ptr++;	// skip length field

			// P1R
			total = 0;
			total = (word) ((*frame_ptr++ << 8) & 0xff00);
			total = (word) (total + (*frame_ptr++ & 0x00ff));
			if ( total >= V44_MIN_P1 ) {
				if ( total < G(v44_en_n2) ) {
					G(v44_en_n2) = total;
				}
			}
			#if defined(XID_DUMP)
			x_debug_msg("V44-P1R=");
			sendHexWord( total );
			sendCrLf();
			#endif // XID_DUMP
			break;

		case COMP_v44_p2tid:
			frame_ptr++;	// skip length field

			// P2T
			total = (word) *frame_ptr++;
			if ( total >= V44_MIN_P2 && total <= V44_MAX_P2 ) {
				G(v44_de_n7) = total;
			}
			#if defined(XID_DUMP)
			x_debug_msg("V44-P2T=");
			sendDecByte( (byte) total );
			sendCrLf();
			#endif // XID_DUMP

			break;

		case COMP_v44_p2rid:
			frame_ptr++;	// skip length field

			// P2R
			total = (word) *frame_ptr++;
			if ( total >= V44_MIN_P2 && total <= V44_MAX_P2 ) {
				G(v44_en_n7) = total;
			}
			#if defined(XID_DUMP)
			x_debug_msg("V44-P2R=");
			sendDecByte( (byte) total );
			sendCrLf();
			#endif // XID_DUMP
			break;

		case COMP_v44_p3tid:
			frame_ptr++;	// skip length field

			// P3T
			total = 0;
			total = (word) ((*frame_ptr++ << 8) & 0xff00);
			total = (word) (total + (*frame_ptr++ & 0x00ff));
			#if defined(XID_DUMP)
			x_debug_msg("V44-P3T=");
			sendHexWord( total );
			sendCrLf();
			#endif // XID_DUMP
			if ( total >= V44_MIN_P3 ) {
				if ( total < G(v44_de_n8) ) {
					G(v44_de_n8) = total;
				}
			}

			break;

		case COMP_v44_p3rid:
			frame_ptr++;	// skip length field

			// P3R
			total = 0;
			total = (word) ((*frame_ptr++ << 8) & 0xff00);
			total = (word) (total + (*frame_ptr++ & 0x00ff));
			#if defined(XID_DUMP)
			x_debug_msg("V44-P3R=");
			sendHexWord( total );
			sendCrLf();
			#endif // XID_DUMP
			if ( total >= V44_MIN_P3 ) {
				if ( total < G(v44_en_n8) ) {
					G(v44_en_n8) = total;
				}
			}
			break;

		default:
			// Uncharted territory, bail
			#if defined(XID_DUMP)
			x_debug_msg("INVALID param id=");
			sendHexByte( *(frame_ptr - 1) );
			sendCrLf();
			#endif // XID_DUMP
			return;
		}
	}
}
#endif // V44

/****************************************************************
Routine : lapm_process_xid_parameter
Description :
	This routine compares the parameters from the received XID frame
	with our requested parameters and choose the smallest value as
	the final negotiated parameters.
Parameters in :
	frame - pointer to the xid frame received
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/10/93	Initial
*****************************************************************/
non_banked void lapm_process_xid_parameter ( LAPM_RX_FRAME *frame )
{
	byte j;
	word total ;
	byte *frame_ptr;
	byte *end_ptr;
	word index;

	#if defined(XID_DUMP)
	x_debug_msg("recv XID DUMP");
	for (frame_ptr = &frame->data[0]; frame_ptr < &frame->data[78];
		 frame_ptr++)
	{
		sendHexByte( *frame_ptr );
		sendDumbChar( ' ' );
	}
	sendCrLf();
	#endif // XID_DUMP

	// Process HDLC Parameters
	frame_ptr = &frame->data[6];
	index = (word) (6 + ( (word) frame->data[4] << 8) + (word) frame->data[5]);
	end_ptr = &frame->data[ index ];

	while (frame_ptr < end_ptr)
	{
       	total = 0;
		switch ( *frame_ptr++ )
		{
			case XIDopt:
				if ( *frame_ptr++ != 3 )
					return ;	/* len field */

				// see if the other side wants selective reject.
				if (*frame_ptr++ & XIDsrej)	// pv1
				{
#if defined(Z80_DEBUG_LAPM_CTL)
					x_debug_msg("prc xid-got SREJ");
#endif
				}
				else
				{
					G(lapm_srej_negotiated) = FALSE;
				}
				frame_ptr++ ;		/* skip pv2 */
				G(lapm_extended_fcs) = (byte) (*frame_ptr++ & 0x01); /* pv3 */
				break;

			case XIDtn401:
			case XIDrn401:
				j = *frame_ptr++;
				while (j != 0)
				{
					total = (word) ((total << 8) + *frame_ptr++);
					j--;
				}
				total = (word) (total >> 3);
				if ( (total < G(lapm_n401)) && (total > 0) )
				{
					G(lapm_n401) = (byte) total;
				}
				#if defined(Z80_DEBUG_LAPM_CTL) && defined(DEBUG_PRINTF)
				printf("Negotiated i-frame size = %d\n", G(lapm_n401));
				#endif
				break;

			case XIDtk:
			case XIDrk:
				j = *frame_ptr++;
				while (j != 0)
				{
					total = (word) ((total << 8) + *frame_ptr++);
					j--;
				}
				if ( (total < G(lapm_k)) && (total > 0) )
				{
					G(lapm_k) = (byte) total ;
					G(lapm_last_ltfp) =  &G(lapm_transmit_frame)[ G(lapm_k) ];
				}
				#if defined(Z80_DEBUG_LAPM_CTL) && defined(DEBUG_PRINTF)
				printf("Negotiated # RX Frames = %d\n", G(lapm_k));
				#endif
				break;
		}
	}

	// V.42bis proposals
	G(v42bis_P0) = 0 ;
	G(v42bis_N2) = V42bisP1 ;
	G(v42bis_N7) = V42bisP2 ;

	// Check for Compression Group,
	// which contains V.42bis but not V.44 parms
	if ( *frame_ptr == COMPgid ) {
		word group_len;
		frame_ptr++;
		group_len = (word) ((*frame_ptr++ << 8) & 0xff00);
		group_len = (word) (group_len + (*frame_ptr++ & 0x00ff));
		lapm_process_v42bis_xid( frame_ptr, group_len );
		frame_ptr += group_len;

	}
	if ( G(v42bis_P0) != 0 ) {
		v42bis_init_variables () ;
	}

#if defined(V44)
	// V.44 proposals
	G(v44_P0) = 0;

	// Check for User Data Sub-field Group,
	// which contains V.44 parms
	if ( *frame_ptr++ == UDSgid ) {
		lapm_process_v44_xid( frame_ptr );
	}

	if ( G(v44_P0) != 0 ) {
		v44_init_variables ();
	}
#endif // V44
}

/****************************************************************
Routine : lapm_process_xid
Description :
	Process the XID frame received.
Parameters in :
	none.  Assumes received XID is in lapm_receive_frame.
Parameters out :
	Modifies global variables according to the XID received.
*****************************************************************/
non_banked void lapm_process_xid(void)
{
#if defined(XID_DUMP)
	x_debug_msg("XID LRF.len=");
	sendHexWord(LRF.len);
	sendCrLf();
#endif
	if ( ( LRF.data[2] != XIDfid ) || 
	     ( LRF.data[3] != XIDgid ) )
	{
		// Received frame isn't XID, can't do anything.
		return;
	}

	// Process the received XID, adjust our negotiated parameters.
	lapm_process_xid_parameter((void *) &LRF);

	if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
		(!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
	{
		// Received XID was a command, we respond with our own XID.
		lapm_send_xid(FALSE);
	}
}
