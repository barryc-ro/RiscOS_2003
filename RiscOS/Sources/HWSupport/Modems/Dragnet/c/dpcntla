/*name and version number:@(#)dpcntla.c	1.3*/
/*date of get: 		  12/15/00 10:10:53*/
/*date of delta:	  11/30/00 16:56:40*/
/****************************************************************
File :	dpcntla.c
Description :
	Contains functions specific to the CS-4 data pump interface.

Procedures Contained :
	dpv_init
	dp_set_pllc
	dp_dsp_version
	dp_startup_prime_pump
	dp_dsp_checksum
	dsp_version_info
	dp_write_dsp_array

*****************************************************************/

#include "llglob_d.h"
#if defined(CS_4)
# include "dpglob.h"
# include "sa_glob.h"
# include "sa_addr.h"
# include <memory.h>
# include "v_glob.h"
# include "vg729_xx.h"
# include "allglobs.h"

# define SETTLE_TIME	50

/****************************************************************
Function : dpv_init
Description : 
	Init for voip task
*****************************************************************/
void dpv_init(VGLOB *vglob_ptr)
{
	DP_SET_CORE_INTS( ALLINTS );	// disable all interrupts on camil
	DP_CLR_CORE_INTS( ALLINTS );	// clear all interrupts on camil

	memset((void *)&(Dsp_Dbg[ModemNum]), 0, sizeof(dsp_dbg_t));
	printf("dpv_init %d entered\n", ModemNum);

	// with CS4, DIA is enabled by default
	//dp_set_pllc(PLLC70MHz);  
	dp_set_pllc(PLLC100MHz);  

	// mwait = 0 to for access to OCRAM with 0 wait states
	// (defaults to 0x1111 after reset, for 1 wait state)
	//dp_dsp_int_regwrite(0, 0x0000);   

	// this is needed for G729 as it is using 0x8000 and beyond
	dp_dsp_int_regwrite(8, 0x0000);   

	// Dsp_Dbg[ModemNum].rom_ver = dp_read_rom_fw_ver();

	// always before download so as to support different DSP code
	dp_voice_startup();  

	//** download
	Dsp_Dbg[ModemNum].code_size = v_download_dsp(&(Dsp_VG729_Image[0]), VG729_IMAGE_NUM);
	printf("dpv_init %d: (download done) \n", ModemNum);
	//** end download

#if defined(DUMP_IMAGE)
	dp_dump_image(&Dsp_VG729_Image[0], VG729_IMAGE_NUM);
#endif

	V(dsp_ready) = 1;

	DP_SET_CORE_INTS( ALLINTS );	// disable all interrupts on camil
	printf("dpv_init %d exited\n", ModemNum);
}

/****************************************************************
Function : dp_set_pllc
Description : 
	set/change Phase Loop Lock Clock to a specific clock frequency
	Please refer to Venus-1 DD Rom Code Firmware Specification
	Issue 1.0 02/14/97, Charles ZhenG
Arguments :
	freq: clock frequency representation in hex, caller is
	responsible for the calculation of the correct freq.
*****************************************************************/
void dp_set_pllc(U16 freq)
{
	U8 h_byte = (U8) (freq >> 8); 
	U8 l_byte = (U8) (freq & 0xff); 

	// we must insert delay to allow PLLC to lock
	dp_dsp_int_regwrite(0x05, 0x4000);    // set powerc to 0x4000 per C.Zheng
	_time_delay(SETTLE_TIME);
	dp_command3(0x2e, 0x01, h_byte, l_byte); 
	_time_delay(SETTLE_TIME);
	dp_dsp_int_regwrite(0x05, 0x0000);   // powerc back to 0000 
	_time_delay(SETTLE_TIME);
}

/****************************************************************
Routine : dp_dsp_version
Description : 
	used by at task in atcmd.c to display the dsp version
*****************************************************************/
word dp_dsp_version ( void )
{
	word dp_timer;

	dp_modem_command( REPORT_VERSION, 0, 0 );
	dp_timer = x_current_time() ;

	while ( !(dp_regread16( 0xe5 ) & CWBANK)
			&& (x_elapsed_time( dp_timer ) < MS100) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	_INT_DISABLE();
		G(dp_byte_c) = DP_INT_REGREAD( 0x32 ) ;
		G(dp_byte_d) = DP_INT_REGREAD( 0x33 ) ;
		G(dp_byte_e) = DP_INT_REGREAD( 0x34 ) ;
		G(dp_byte_f) = DP_INT_REGREAD( 0x35 ) ;
		DP_INT_REGWRITE( 0xe5, CWBANK ) ;
	_INT_ENABLE();

	if ( G(dp_byte_f) == 0x05 )
		return  (word)((word)(G(dp_byte_e)<<8) | G(dp_byte_d));
	else
	{
		printf("dp_dsp_version() fails\n");
		return 0;
	}
}

/****************************************************************
Routine : dp_startup_prime_pump()
Description : 'prime the pump' for the startup command
		to the DSP.  These operations are done so that
		the CAMIL is in a state where the DSP will interrupt
		the controller properly on data.
*****************************************************************/
void dp_startup_prime_pump( void )
{
	byte regB5;

	printf("dp - prime the read/write pump\n") ;
	regB5 = dp_dsp_regread( 0xb5 ) ;

	if ( (regB5 & BIT0) == 0 )
	{
		// set host read trigger bit
		printf("dp - host read b0\n") ;
		dp_regread( 0xb0 ) ;
	}

	if ( (regB5 & BIT4) == 0 )
	{
		//---------------------------------------
		// disable New Core Read 0 Trigger Byte
		//---------------------------------------
		G(dp_bamil_re6) |= NCRTB1;
		DP_SET_CORE_INTS( G(dp_bamil_re6) );

		// backdoor read of dsp register
		dp_dsp_regread( 0xb0 );

		// data length of zero to clear interrupt
		printf("dp - host write b0\n");
		dp_regwrite( 0xb0, 0 );
	}

	//---------------------------------------
	// enable New Core Read Trigger Byte One
	//---------------------------------------
	DP_CLR_CORE_INTS( NCRTB1 );

	// Allow core Read/Write trigger byte interrupts
	G(dp_bamil_re6) &= (word)~(NCWTB1 | NCRTB1);
	DP_SET_CORE_INTS( G(dp_bamil_re6) );

	G(dp_dsp_data_in_progress) = FALSE ;
}

/****************************************************************
Routine : dp_dsp_checksum
Description : 
	used by at task in atcmd.c to display the dsp checksum
*****************************************************************/
word dp_dsp_checksum ( void ) 
{
	word dp_timer;

	if ( G(x_modem_state) == MS_ON_DIAL )
	{
		return dp_read_dsp_ram(0x49);
	}

	dp_modem_command( CHECK_DSP, 0, 0 );
	dp_timer = x_current_time() ;

	// wait for response from DSP
	// response code = 0x03
	while ( !(dp_regread16( 0xe5 ) & CWBANK)
			&& (x_elapsed_time( dp_timer ) < MS200) )
	{
		DP_MQX_CHKTIME( dp_timer );
	}

	_INT_DISABLE();
		G(dp_byte_c) = DP_INT_REGREAD( 0x32 ) ;
		G(dp_byte_d) = DP_INT_REGREAD( 0x33 ) ;
		G(dp_byte_e) = DP_INT_REGREAD( 0x34 ) ;
		G(dp_byte_f) = DP_INT_REGREAD( 0x35 ) ;
		DP_INT_REGWRITE( 0xe5, CWBANK ) ;
	_INT_ENABLE();

	if ( G(dp_byte_f) == 0x03 )
	{
		return ( dp_read_dsp_ram( 0x49 ) ) ;
	}
	else
	{
		printf("dp_dsp_checksum() fails\n");
		return 0;
	}
}

/****************************************************************
Routine : dsp_version_info
	get and print dsp version information
	a la the ap_ver command on DOS
*****************************************************************/
void dsp_version_info( void )
{
	/* read version and stuff */
	word Delta, VerLow, VerHigh, Platform, CodeType;
	word old3d = dp_read_dsp_ram( 0x3d );

	dp_write_dsp_ram( 0x3d, 0x4000 );

	(void) dp_dsp_version();
	Delta = G(dp_byte_c);
	VerLow = G(dp_byte_d);
	VerHigh = G(dp_byte_e);

	(void) dp_dsp_checksum();
	Platform=G(dp_byte_c);
	CodeType=G(dp_byte_d);

	sendCrLf();
	printf("DSP Code Version = %d.%d.%d.%x%x\n",
			Platform, CodeType, Delta, VerHigh, VerLow);

	/* restore 0x3d */
	dp_write_dsp_ram( 0x3d, old3d );
}

/****************************************************************
Routine : dp_write_dsp_array
Description : Write to continous array of data to dsp ram
	1) using new AUX dsp download command through QMP
		- up to 128 bytes at a time, or
	2) by using dsp download command through mailbox
		- 6 bytes at a time.
			array example :
			{ value,
			  value }
			loc = starting location in DSP RAM
			bp  = pointer to array to download
			len = length of array in words
*****************************************************************/
void dp_write_dsp_array ( word loc, const word *bp, byte len )
{
	extern void dp_sendAuxCmd ( byte ) ;

	printf("dp_write_dsp_array(0x%x, 0x%x, 0x%x)\n", loc, bp, len);

	#if defined(NEW_QMP_AUX_INTFC)
	if ( G(sa_aux_processorON) )
	{
		word *wAddr = (word *)bp;
		word wCntr = len;

		dp_regwrite16( 0xe5, 0x00ff ) ;

		//---------------------------------------------
		// Send starting address of DSP RAM
		//---------------------------------------------
		_INT_DISABLE();
			qmp_write( &loc, DSP_BLOCK_WRITE, 1 ) ;
			qmp_TXwait() ;
		_INT_ENABLE();

		//---------------------------------------------
		// Send SetUp Program DwnLd Cmd to DSP
		//---------------------------------------------
		dp_sendAuxCmd( AUX_SETUP_DNLD_CMD );
	
		while ( wCntr >= 64 )
		{
			//-------------------------
			// write the data for dwnld
			//-------------------------
			_INT_DISABLE();
				qmp_write( wAddr, DSP_BLOCK_WRITE, 64 ) ;
				qmp_TXwait() ;
			_INT_ENABLE();
	
			//-------------------------
			// write the cmd for dwnld
			//-------------------------
			dp_sendAuxCmd( AUX_DNLD_CMD | 64 );
	
			wAddr += 64 ;
			wCntr -= 64 ;
			_sched_yield();
		}

		if ( wCntr )
		{
			//-------------------------
			// write the data for dwnld
			//-------------------------
			_INT_DISABLE();
				qmp_write( wAddr, DSP_BLOCK_WRITE, wCntr ) ;
				qmp_TXwait() ;
			_INT_ENABLE();
	
			//-------------------------
			// write the cmd for dwnld
			//-------------------------
			dp_sendAuxCmd( AUX_DNLD_CMD | wCntr );
		}
	}
	else
	#endif // NEW_QMP_AUX_INTFC
	do {
		dp_write_dsp_ram( loc++, *bp++ );
	} while ( --len );
}
#endif // CS_4
