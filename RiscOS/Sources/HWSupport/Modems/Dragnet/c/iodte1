/*name and version number:@(#)iodte1.c	1.93*/
/*date of get: 		  02/26/01 15:09:38*/
/*date of delta:	  02/24/01 16:05:32*/
/****************************************************************
File :	iodte1.c
Description :
	Contains all hardware interface routines for the dte (UART interface).

Procedures Contained :
	UART_dsr_on
	UART_dsr_off
	UART_cd_off
	UART_cd_on
	UART_ri_off
	UART_ri_on
	UART_dtr_off
	UART_dtr_on
	UART_dtr_blocked
	UART_start_break
	UART_stop_break
	UART_dce_break_on
	UART_data_bits
	UART_stop_bits
	UART_parity

Revision History :
	Initials	Date		Change
*****************************************************************/

// #define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
#include "iouart_d.h"
#include "z80glob.h"
//msm// #include "z80usb.h"
#include "allglobs.h"


/****************************************************************
Routine : UART_dsr_on
Description :
	Modem turns DSR ON (towards DTE)
*****************************************************************/
void UART_dsr_on(void)
{
	x_debug_msg( "DSR ON" );
	z80_uart_dsr_on();
}

/****************************************************************
Routine : UART_dsr_off
Description :
	Modem turns DSR OFF (towards DTE)
*****************************************************************/
void UART_dsr_off (void)
{
	x_debug_msg("DSR OFF");
	z80_uart_dsr_off();
}

/****************************************************************
Routine : UART_cd_off
Description :
	Modem turns CD OFF (towards DTE)
*****************************************************************/
void UART_cd_off (void)
{
	G(io_uart_status) &= ~UART_CD_ON;

	z80_uart_cd_off();
}

/****************************************************************
Routine : UART_cd_on
Description :
	Modem turns CD ON (towards DTE)
*****************************************************************/
void UART_cd_on (void)
{
	G(io_uart_status) |= UART_CD_ON;

	z80_uart_cd_on();
}

/****************************************************************
Routine : UART_ri_off
Description :
	Modem turns RING INDICATE OFF (towards DTE)
*****************************************************************/
void UART_ri_off (void)
{
	G(io_uart_status) &= ~UART_RING_ON;

	z80_uart_ri_off();
}

/****************************************************************
Routine : UART_ri_on
Description :
	Modem turns RING INDICATE ON (towards DTE)
*****************************************************************/
void UART_ri_on(void)
{
	G(io_uart_status) |= UART_RING_ON;

	z80_uart_ri_on();
}

/****************************************************************
Routine : UART_dtr_off
Description :
	DTE has turned DTR OFF.

	Perform the operations required on the
	transition according to S.ModemOptions.DTRControl.
	This is controlled by AT&Dx command.
*****************************************************************/
void UART_dtr_off(void)
{
	if (!(G(io_uart_status) & UART_DTR_ON))
		return;	// Already knew that DTR was off, don't need more processing.

	if ((G(x_modem_state) != MS_IDLE)
		&& (G(x_modem_state) != MS_RING_INDICATE))
	{
		switch (G(S).ModemOptions.DTRControl)
		{
		case 1:
			// AT&D1  - If on-line, go to command mode,
			// give OK, remain connected
			if ( ( G(x_modem_mode) == MODEM_DATA ) &&
				 ( G(io_at_esc_detect) == FALSE ) )
			{
				x_debug_msg("IO - command mode via DTR OFF");
				G(io_at_esc_detect) = TRUE;
				x_send_mail(AT_OK, AT_TASK, 0, 0);
			}
			break;

		case 2:
			// AT&D2  - (default) we should disconnect
			x_debug_msg("IO-DTR OFF disconnect");
			// Start timer to delay DTR action until DTE buff is empty.
			// io_periodic_task() at io_dtr_timer and does the disconnect
			G(io_dtr_timer) = x_current_time();
			break;
		}
	}

	// AT&D3 - reset modem
	if (3 == G(S).ModemOptions.DTRControl)
	{
		x_debug_msg("IO - DTR OFF. Resetting");
		// load factory default settings
		x_init_modem_options();
		// load settings if saved in eeprom
		ll_load_modem_options();
		x_send_mail(AT_IO_DISCONNECT, IO_TASK, 0, 0);
	}

	G(io_uart_status) &= ~UART_DTR_ON;
}
/****************************************************************
Routine : UART_dtr_on
Description :
	DTE has turned DTR ON.
*****************************************************************/
void UART_dtr_on(void)
{
	G(io_uart_status) |= UART_DTR_ON;
}

/****************************************************************
Routine : UART_dtr_blocked
Description :
	Returns DTR status.  TRUE means DTR OFF is blocking us
	from what we want to do (dial or answer call).
*****************************************************************/
BOOL UART_dtr_blocked(void)
{
#if defined(THUNDER) || defined(EXT_MODEM) || defined(MODEM_ARM)
	if ( !((G(io_uart_status) & UART_DTR_ON)
			|| (G(S).ModemOptions.DTRControl != 2)) )
	{
#if defined(THUNDER) || defined(MODEM_ARM)
		if (dte_modem_type == EXT_INTERFACE)
#endif
		{
			return TRUE;
		}
	}
#endif
	return FALSE;
}

/****************************************************************
Routine : UART_start_break
Description :
	Received break from DTE
*****************************************************************/
void UART_start_break(void)
{
	x_debug_msg("UART_start_break");
	x_send_mail(AT_IO_BREAK, IO_TASK, 0, 0);
}

/****************************************************************
Routine : UART_stop_break
Description :
	Clear break received from DTE
*****************************************************************/
void UART_stop_break(void)
{
	x_debug_msg("UART_stop_break");
	G(io_uart_status) &= ~UART_DTE_BREAK_ON;
}

/****************************************************************
Routine : UART_dce_break_on
Description :
	Received break from dce
*****************************************************************/
void UART_dce_break_on(void)
{
	if ( (G(S).ModemOptions.BreakControl == 0) ||
	     (G(S).ModemOptions.BreakControl == 1) )
	{
		UART_Flush(1);
	}
	G(io_uart_status) |= UART_DCE_BREAK_ON;

	// write a null (zero) character to the DTE transmit queue
	io_put_dte_tx_char(0);

	z80_uart_break_on();
}

/****************************************************************
Routine : UART_data_bits
Description :
	set # of data bits
*****************************************************************/
void UART_data_bits(byte data_bits)
{
	G(S).ModemOptions.DataBits = data_bits;
}

/****************************************************************
Routine : UART_parity
Description :
	set parity bit
*****************************************************************/
void UART_parity(byte parity)
{
	G(S).ModemOptions.Parity = parity;
}

/****************************************************************
Routine : UART_stop_bits
Description :
	set # of stop bits
*****************************************************************/
void UART_stop_bits(byte stop_bits)
{
	G(S).ModemOptions.StopBits = stop_bits;
	x_send_mail ( MC_OPTION_CHANGE, IO_TASK, 0, 0 );
}
