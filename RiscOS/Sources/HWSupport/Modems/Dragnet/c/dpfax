/*name and version number:@(#)dpfax.c	1.140*/
/*date of get: 		  09/20/00 14:48:44*/
/*date of delta:	  09/20/00 12:47:00*/
/****************************************************************
File :	dpfax.c
Description :
	Contains all functions related to fax for the data pump.

Procedures Contained :
	dp_fax_ced_tone_cmd
	dp_fax_cng_tone_cmd
	dp_fax_startup
	dp_fax_connect_success
	dp_fax_carrier_loss
	dp_report_voice_event
	dp_init_local_phone_timer
	dp_init_local_phone_state
	dp_init_local_phone_onhook
	dp_local_phone_detect

Revision History :
	Initials	Date		Change
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "dpglob.h"
//msm// #include "z80glob.h"
#include "atglob.h"
#include "faxv34.h"  
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
	#include "fax_c2.h"
#endif                  
#include "allglobs.h"

#if !defined(CS_MODEM) || defined(CLASS2_FAX)
/*****************************************************************************
	Local Bit definitions
*****************************************************************************/
#define CD_DROPOUT_BIT	0x01
#define CD_RETURNED_BIT 0x02
#define V21_VALID_TIMER_BIT	0x04
#define CD_RETURNED_TIMER_BIT	0x08

/*****************************************************************************
	Function : dp_fax_ced_tone_cmd
*****************************************************************************/
void dp_fax_ced_tone_cmd ( void )
{
	/* reg05 - sin(k), reg06 - cos(k), k=2PI*f/7200, f=2100Hz */
	dp_write_dsp_ram (0x5, F2100S) ;
	dp_write_dsp_ram (0x6, F2100C) ;

	dp_write_dsp_ram (0x17, 0xf55) ;	/* reg17 - tone duration=3.925sec*/
	dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */

	dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
}

/*****************************************************************************
	Function : dp_fax_cng_tone_cmd
*****************************************************************************/
void dp_fax_cng_tone_cmd ( void )
{
	/* ram05 - sin(k), ram06 - cos(k), k=2PI*f/7200, f=1100Hz */
	dp_write_dsp_ram (0x5, F1100S) ;
	dp_write_dsp_ram (0x6, F1100C) ;

	dp_write_dsp_ram (0x17, 0x1f4) ;	/* reg17 - tone duration=0.5sec*/
	dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */

	dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
}

/*****************************************************************************
	Function : dp_fax_startup
*****************************************************************************/
void dp_fax_startup ( byte param2 )
{
#ifdef DC0 	// if direct connect
	extern void enable_cell_filter ( void ) ;
#endif // if direct connect
	word reg2 ;

	G(V34Mode) = 0 ;	// clear v34 mode - used in dp_modem_rate function
	dp_write_dsp_ram ( 0x080d, 0x0000 ) ;

	if ( G(dp_fax_downloaded) == FALSE )
	{
		dp_download_fax () ;
		G(dp_fax_downloaded) = TRUE ;
	}
	G(fax_mse_count) = 0 ;
	dp_write_dsp_ram ( 0x003c, 0x0122 ) ; //constellation I value
	dp_write_dsp_ram ( 0x0047, 0x0123 ) ; //constellation Q value

	dp_write_dsp_ram ( VF_BAUD, 0x0 ) ;       /* clear VF_BAUD(0x82a) */
	dp_write_dsp_ram ( VF_AUTOMODE, 0x0 ) ;   /*clear VF_AUTOMODE(0x828) */

	G(cl1_flag) = 0;		//clear the dropout flag
	dp_write_dsp_ram ( 0x01, 0x0 ) ;	/* clear v.32 rate selection */
	dp_write_dsp_ram ( 0x2, 0x0 ) ;		/* clear low-speed */
	dp_write_dsp_ram ( 0xc, 0x0 ) ;		/* clear v.17 rate selection*/
	dp_write_dsp_ram ( 0x39, 0x800) ;	/* set DP_RTS to be H_RTS*/
	dp_write_dsp_ram ( 0x48, 2000) ;	/* drop out timeout set to 2 secs*/

	// rev signal threshold - actual threshold is off 
	// the dsp - real value = 43dB
	dp_write_dsp_ram ( 0x37, (word)(G(S).ModemOptions.FaxRxLevel - 7)) ;

	dp_transmit_level ( (byte)(G(S).ModemOptions.TxLevel) ) ;

	G(fax_mse_thresh) = 6500 ;
	switch ( G(x_fax_rate) )
	{
		case MR_300 :
			reg2 = FAX_300 ;
			break ;
		case MR_2400 :
			reg2 = FAX_2400 ;
			break ;
		case MR_4800 :
			reg2 = FAX_4800 ;
			break ;
		case MR_7200 :
			if (G(x_fax_v17) != NON_V17)
				reg2 = V17_FAX_7200 ;
			else
				reg2 = FAX_7200 ;
			break ;
		case MR_9600 :
			if (G(x_fax_v17) != NON_V17)
				reg2 = V17_FAX_9600 ;
			else
				reg2 = FAX_9600 ;
			break ;
		case MR_12000 :
			reg2 = V17_FAX_12000 ;
			G(fax_mse_thresh) = 450 ;
			break ;
		case MR_14400 :
			reg2 = V17_FAX_14400 ;
			G(fax_mse_thresh) = 220 ;
			break ;
		default :
			reg2 = FAX_300 ;
			break ;
	}

	if ( ( G(x_fax_rate) >= MR_7200 ) && ( G(x_fax_v17) != NON_V17 ) )
	{
		dp_write_dsp_ram ( 0xc, reg2 ) ;	                /* V.17 rate selection */
		if ( G(x_fax_v17) == V17_SHORT_TRAIN )
			dp_write_dsp_ram (0x39, (SHORTTRAIN|0x802) );   // Short train with Echo Protection Tone (EPT)
		else
			dp_write_dsp_ram (0x39, 0x802);                 // Long train with EPT
	}
	else
	{
		dp_write_dsp_ram ( 0x2, reg2 ) ;	 /* low-speed rate selection */
		if ( (G(x_fax_rate) == MR_4800) || // Use EPT for line speeds for 4800 and 2400 only
			 (G(x_fax_rate) == MR_2400) )
			dp_write_dsp_ram (0x39, 0x802);  // Enable EPT for non-V.17 modulations
	}

	if ( (G(x_fax_state) == FAX_TX_HDLC) || (G(x_fax_state) == FAX_RX_HDLC) )
	{
		x_debug_msg ( "DP - Fax HDLC" ) ;
		dp_hdlc_mode () ;
	}
	else
	{
		x_debug_msg ( "DP - Fax SYNC" ) ;
		dp_sync_mode () ;
	}

	if ( (G(x_fax_state) == FAX_TX_HDLC) || (G(x_fax_state) == FAX_TX) )
	{
		x_debug_msg ( "DP - startup fax originate" ) ;
		dp_modem_command ( STARTUP, ORIGINATE, param2 ) ;
	}
	else
	{
		if( reg2 != FAX_300 )
		{
				// use dropout workaround for fax receive
			x_debug_msg ( "DP - startup dropout wa receive" ) ;
			dp_write_dsp_ram(0x0F20, 0xdd96);
		}

		x_debug_msg ( "DP - startup fax receive" ) ;
		dp_modem_command ( STARTUP, ANSWER, param2 ) ;

		if ( (reg2 == FAX_7200) || (reg2 == FAX_9600) )   // V.29 Used?
			dp_write_dsp_ram (0x05E0, 0x0110);              // Do this for Sagem
	}

#ifdef DC0 	// if direct connect
	enable_cell_filter();
#endif
}

/*****************************************************************************
	Function : dp_fax_connect_success
*****************************************************************************/
byte dp_fax_connect_success ( void )
{
	if ( (dp_read_dsp_ram ( 0x8e )) & 0x02) // FSK_CTRL - carrier detect
	{
		/* 
		 * double read, to make sure that register 0x20 has the new
		 * line rate information
		 */
		G(dp_dsp_status) = dp_regread ( DP_STATUS_REG ) ; // DSP_V34
		if ( dp_regread(DP_STATUS_REG) == G(dp_dsp_status) )
		{
			if ( (G(dp_dsp_status) & RETRAIN_STATUS) == 0 )	// data mode
			{
				if ( (G(S).ModemOptions.SpeakerControl == 1) ||
				     (G(S).ModemOptions.SpeakerControl == 3) )
					x_output ( IO_SPEAKER_OFF ) ;

			  	if( dp_read_dsp_ram(0x3b) & 0x4000 )	// v21 rate
						G(x_line_rate) = MR_300 ;

				return ( TRUE ) ;
			}
		}
	}
#ifdef HOMOL
	else if ( ((G(S).ModemOptions.CountryId==FRANCE)||
	           (G(S).ModemOptions.CountryId==AUSTRIA)||
	           (G(S).ModemOptions.CountryId==SPAIN)||
			   (G(S).ModemOptions.CountryId==BELGIUM)) &&
			  (dp_read_dsp_ram(0x3b) & 0x0800) )
	{
		// v21 signal detected instead of v27, v29 or v17
		G(x_line_rate) = MR_300 ;
		return ( TRUE ) ;
	}
#endif
	return ( FALSE ) ;
}

/*****************************************************************************
	Function : dp_fax_carrier_loss
*****************************************************************************/
byte dp_fax_carrier_loss ( void )
{
	// check bit 1 in FSK_CTRL - carrier detect 
	if( (dp_read_dsp_ram( 0x8e ) & 0x02) == 0)
		return ( TRUE ) ;

	// read ram location 0x1ad every 50ms, if it is set for
	// continuous 100ms, carrier loss is detected.
	if ( x_elapsed_time (G(dp_timer1)) > MS50 )
	{
		if ( dp_read_dsp_ram ( FAX_DOUT_FLAG ) == 1 )
		{
			if ( !(G(cl1_flag) & CD_DROPOUT_BIT) )
			{
				G(cl1_flag) |= CD_DROPOUT_BIT;
				G(cl1_flag) &= ~CD_RETURNED_BIT;
				G(cd_dropout_timer) = x_current_time();	//setup CD dropout timer for
								//a 920 ms timeout
								//800ms + 120 ms carrier validation
				G(cl1_flag) &= ~V21_VALID_TIMER_BIT;
					G(cl1_flag) &= ~CD_RETURNED_TIMER_BIT;
				//turn off receiver
				//dp_write_dsp_ram( 0x3d, (dp_read_dsp_ram(0x3d) & ~0x0100) );
	
				//setup a threshold of 6 dB less than current rx level
				G(fax_cd_threshold) = (word) (dp_read_dsp_ram(LINEAR_RCV_LVL)/2);
				if(G(x_fax_v17) == NON_V17)
				{
					//renable the v.21 tone detector
					//At this point tone 1 detector is set for 1800 Hz
					//and tone 2 detector is set for 1650 Hz.  So to enble
					//tone detectors by simply writing 3 to td_ena
					dp_write_dsp_ram(TONE_DETECT_ENABLE,0x3);
				}
			}
			if(G(x_fax_v17) == NON_V17)
			{
				//is v.21 detected??
				if( (dp_read_dsp_ram(DETECTED_TONES) & 0x02) )
				{
					//v.21 validation timer active?
					if( !(G(cl1_flag) & V21_VALID_TIMER_BIT) )
					{
						G(cl1_flag) |= V21_VALID_TIMER_BIT;
						G(v21_valid_timer) = x_current_time();
					}
					if( x_elapsed_time(G(v21_valid_timer)) > 60 )
					{
						//v21 has come on so carrier dropped
						return(TRUE);
					}
				}
				else
				{
					G(cl1_flag) &= ~V21_VALID_TIMER_BIT;
				}
			}
			//has carrier returned?
			if( dp_read_dsp_ram(LINEAR_RCV_LVL2) > G(fax_cd_threshold) )
			{
				if( !(G(cl1_flag) & CD_RETURNED_TIMER_BIT) )
				{
					//activate the cd_returned_timer
					G(cl1_flag) |= CD_RETURNED_TIMER_BIT;
					G(cd_returned_timer) = x_current_time();
				}
				//has carrier been back for 120 msec?
				if( x_elapsed_time(G(cd_returned_timer)) > 120 )
				{
					if( !(G(cl1_flag) & CD_RETURNED_BIT) )
					{
						G(cl1_flag) |= CD_RETURNED_BIT;
						//dp_write_dsp_ram( 0x3d, (dp_read_dsp_ram(0x3d) | 0x0100) );
					}
					return(FALSE);	//carrier is now valid
				}
			}
			else
			{
				//deactivate the cd_returned_timer
				G(cl1_flag) &= ~CD_RETURNED_TIMER_BIT;
			}
			if( x_elapsed_time(G(cd_dropout_timer)) > 920 )
			{
				//carrier has been gone for 800 + 120 msec
				return(TRUE);
			}

		}
		else
		{
			G(cl1_flag) &= ~CD_DROPOUT_BIT;
		}
#ifdef HOMOL
		/*
		 * If MSE continuously high for 500ms, release line
		 */
		if ( G(S).ModemOptions.CountryId == PORTUGAL )
		{
			if ( (G(x_line_rate) != MR_300) &&
		    	 (dp_read_dsp_ram(0x4c) >= G(fax_mse_thresh)) )
			{
				x_debug_msg("dp - fax mse high") ;
				if ( G(fax_mse_count)++ >= 10 )
					return ( TRUE ) ;
			}
			else
				G(fax_mse_count) = 0 ;
		}
#endif
		G(dp_timer1) = x_current_time () ;
	}
	return(FALSE);	//CD_VALID
}

/****************************************************************
Routine : dp_init_local_phone_timer
*****************************************************************/
void dp_init_local_phone_timer ( void )
{
	G(dp_local_phone_timer) = x_current_time () ;
}

/****************************************************************
Routine : dp_init_local_phone_state
Description : init local phone hook state & detection timer
*****************************************************************/
void dp_init_local_phone_state ( void )
{
	G(dp_local_phone_state) = DP_PHONE_INIT ;
	dp_init_local_phone_timer () ;
	G(S).ModemOptions.LocalHandset = 0 ;
}

/****************************************************************
Routine : dp_init_local_phone_onhook
Description : init local phone hook state to onhook
*****************************************************************/
void dp_init_local_phone_onhook ( void )
{
#if !defined(CS_MODEM)
	G(dp_local_phone_state) = DP_PHONE_ONHOOK ;
	dp_init_local_phone_timer () ;
	G(S).ModemOptions.LocalHandset = 0 ;
#endif //if !defined(CS_MODEM)
}

/****************************************************************
Routine : dp_report_voice_event
Description : report events if in voice mode and enabled
*****************************************************************/
void dp_report_voice_event ( byte event )
{
#ifdef VOICE
	byte event_code[2] ;

	if (
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
		(G(x_modem_mode) == MODEM_SPEAKER_PHONE) ||
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
		 (G(x_modem_mode) == MODEM_VOICE) )
	{
		switch ( event )
		{
			case 'h' :
			case 'H' :
	   	 		if (!(G(S).ModemOptions.VoiceEventMask & EVENT_LOCAL_PHONE_HOOK))
					return ;
				break ;
			case 'd' :
				if (!(G(S).ModemOptions.VoiceEventMask & EVENT_DIAL_TONE))
					return ;
				x_debug_msg("dp - dial tone detected") ;
				break ;
			case 'b' :
				if (!(G(S).ModemOptions.VoiceEventMask & EVENT_BUSY_TONE))
					return ;
				x_debug_msg("dp - busy tone detected") ;
				break ;
			case 's' :
				if (!(G(S).ModemOptions.VoiceEventMask & EVENT_SILENCE))
					return ;
				x_debug_msg("dp - silence detected") ;
				break ;
		}

		if ( event != 0 )
		{
			event_code[0] = DLE ;
			event_code[1] = event ; 
			x_send_mail ( AT_IO_DATA, IO_TASK, event_code, 2 ) ;
		}
		if ( ( event == '.' ) || ( event == 0 ) )
		{
			event_code[0] = G(S).ModemOptions.CRChar ;
			event_code[1] = G(S).ModemOptions.LFChar ;
			x_send_mail ( AT_IO_DATA, IO_TASK, event_code, 2 ) ;
		}
	}
#endif
}

#if !defined(CS_MODEM)
/****************************************************************
Routine : dp_local_phone_detect
Description : detect local phone hook condition.
	report to DTE if in voice (or) speaker phone mode.
Parameters out :
	TRUE  - if detected offhook
	FALSE - if detected onhook
	DONTKNOW - if local phone state is currently undecided
*****************************************************************/
byte dp_local_phone_detect ( void )
{
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
	if ( ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
		&& ( G(S).ModemOptions.LocalPhoneDetect == 1 ) )		// off
		return ( FALSE ) ;
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM

	switch ( G(dp_local_phone_state) )
	{
		case DP_PHONE_INIT :
			if ( x_elapsed_time(G(dp_local_phone_timer)) > MS500 ) 
			{
				if ( x_input ( IO_LOCAL_PHONE_ONHOOK ) )
				{
					G(dp_local_phone_state) = DP_PHONE_ONHOOK ;
					G(S).ModemOptions.LocalHandset = 0 ;
				}
				else
				{
					G(dp_local_phone_state) = DP_PHONE_OFFHOOK ;
					G(S).ModemOptions.LocalHandset = 1 ;
				}
				dp_init_local_phone_timer () ;
			}
			break ;

		case DP_PHONE_ONHOOK :
			if ( x_input ( IO_LOCAL_PHONE_OFFHOOK ) )	// off-hook
			{
				if ( x_elapsed_time(G(dp_local_phone_timer)) > SECOND1 )
				{
					dp_report_voice_event ( 'H' ) ;
					x_debug_msg ( "dp - local phone off-hook detected" ) ;
					dp_init_local_phone_timer () ;
					G(dp_local_phone_state) = DP_PHONE_OFFHOOK ;
					G(S).ModemOptions.LocalHandset = 1 ;
					// switch audio codec only to local phone if present
					x_output ( IO_LOCAL_PHONE_ON ) ;
					return ( TRUE ) ;
				}
			}
			else if ( x_elapsed_time(G(dp_local_phone_timer)) > MS100 )
			{
				dp_init_local_phone_timer () ;
				return ( FALSE ) ;
			}
			break ;

		case DP_PHONE_OFFHOOK :
			if ( x_input ( IO_LOCAL_PHONE_ONHOOK ) )	// on-hook
			{
				if ( x_elapsed_time(G(dp_local_phone_timer)) > SECOND1 )
				{
					dp_report_voice_event ( 'h' ) ;
					x_debug_msg ( "dp - local phone on-hook detected" ) ;
					dp_init_local_phone_timer () ;
					G(dp_local_phone_state) = DP_PHONE_ONHOOK ;
					G(S).ModemOptions.LocalHandset = 0 ;
					// switch audio codec only to disable local phone if present
					x_output ( IO_LOCAL_PHONE_OFF ) ;
					return ( FALSE ) ;
				}
			}
			else if ( x_elapsed_time(G(dp_local_phone_timer)) > MS100 )
			{
				dp_init_local_phone_timer () ;
				return ( TRUE ) ;
			}
			break ;
	}
	return ( DONTKNOW ) ;
}
#endif

/*****************************************************************************
	Function : dp_fax_silence_detect
*****************************************************************************/
void dp_fax_silence_detect ( void )
{
	dp_write_dsp_ram (0x27, 0) ;		/* ram27-clr number_of_tones to 0 */
	dp_write_dsp_ram (0x28, 0) ;		/* ram28-clr tones_found to 0 */
	dp_write_dsp_ram (0x26, (word)G(S).ModemOptions.ToneThreshold);	/* set threshold */
	dp_write_dsp_ram (0x1c, F480C) ;	/* ram1c-busy tone1 480 hz 	*/
	dp_write_dsp_ram (0x1d, F620C) ;	/* ram1d-busy tone2 620 hz	*/
	dp_write_dsp_ram (0x1e, F350C) ;	/* ram1e-dial tone1 350 hz 	*/
	dp_write_dsp_ram (0x1f, F440C) ; 	/* ram1f-dial tone2 440 hz 	*/
	dp_write_dsp_ram (0x20, F375C) ;	/* ram20-dial tone 375 hz 	*/

	dp_write_dsp_ram (0x23, F2100C) ; 	/* ram23-answer tone 2100 hz	*/
	dp_write_dsp_ram (0x24, F2225C) ; 	/* ram24-answer tone 2225 hz	*/
	dp_write_dsp_ram (0x25, F2250C) ; 	/* ram25-answer tone 2250 hz	*/

	dp_write_dsp_ram (0x21, F1180C) ;  /* V.21 1180 hz  */
	dp_write_dsp_ram (0x22, F980C) ;   /* V.21 980 hz  */
	dp_write_dsp_ram (0xFC0, F1850C) ;	/* V.21 1850	*/
	dp_write_dsp_ram (0xFC1, F1650C) ;	/* V.21 1650	*/
	dp_modem_command ( DETECT_TONES, 12, 0 ) ;
}

/*****************************************************************************
	Function : init_cng_detect
*****************************************************************************/
void init_cng_detect ( void )
{
	if ( (G(x_modem_mode) == MODEM_FAX) ||       // FAX mode?
			((G(x_modem_mode) == MODEM_DATA ) && ((G(S).ModemOptions.AdaptiveAnswer == TRUE))))  // Class 1/1.0 to data Auto-answer?
	{
		dp_write_dsp_ram (0x26, 40);              // Detect threshold @ -40 dbm
		dp_write_dsp_ram (0x1C, 9162);	          // 16,384 * cos( (2*pi*1120)/7200)
		dp_write_dsp_ram (0x1D, 9397);	          // 16,384 * cos( (2*pi*1100)/7200)
		dp_write_dsp_ram (0x1E, 9630);	          // 16,384 * cos( (2*pi*1080)/7200)
    dp_write_dsp_ram (0x1F, 6924);            // 16,384 * cos( (2*pi*1300)/7200) -- Data calling tone
		dp_modem_command (DETECT_TONES, 4, 0); // Detect four tones
		G(dp_fax_tone_on) = 0 ;
		G(dp_fax_tone_off) = 0 ;
		G(dp_fax_tone_state) = 0 ; 
		G(dp_timer1) = x_current_time ();			  // Start timer
	}
}

/****************************************************************
Routine : set_ans_mode
Description : Set data mode or FAX Class.  Provide the necessary
							indication to the host.
*****************************************************************/
/*
	Modem is in Data Mode; +FAA=0 (No auto-answer)
		Data modem calls: Connect as data modems. No indication (look_4_cng returns TRUE immediately)
		FAX modem calls: No connection; time-out in dpmain.c (look_4_cng returns TRUE immediately)

	Modem is in Data Mode; +FAA=1 (Auto-answer)
		Data modem calls: Connect as data modems.  DATA/+A8C: indication
		FAX modem calls: Connect as FAX modems.  FAX/+A8C: indication

	Modem is in FAX Mode; +FAA=0 (No auto-answer)
		Data modem calls: No connection; time-out in dpmain.c
		FAX modem calls: Connect as FAX modems. No indication

	Modem is in FAX Mode; +FAA=1 (Auto-answer)
		Data modem calls: Connect as data modems.  DATA/+A8C: indication
		FAX modem calls: Connect as FAX modems.  FAX/+A8C: indication
*/

extern void set_fax_modulation (void);

byte set_ans_mode (char mode)
{
	byte r = 1;    // Normally, return TRUE to calling function
	byte msg[30];
	byte len = 2;
#if defined(V34_FAX) //msm//
	static const char a8c[] = {'+', 'A', '8', 'C', ':', 0};   // Null terminated string
#endif //msm//

	msg[0] = G(S.ModemOptions.CRChar);  // Initial return & line feed
	msg[1] = G(S.ModemOptions.LFChar);

	if (mode == 'F')  // FAX CNG tone detected?
	{
		G(x_modem_mode) = MODEM_FAX;				// Indicate FAX mode
		G(x_fax_state) = FAX_TX_HDLC;	      // Send CSI/DIS to calling FAX
		G(x_fax_rate) = MR_300;					    // at 300 bps HDLC

		if ( (G(S).ModemOptions.AdaptiveAnswer == TRUE))  // Auto-answer enabled?
		{
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
			if (G(c2p.fclass) == 0)  // Was modem originally in data mode?
			{
	#if defined (CLASS2_FAX) && !defined (CLASS20_FAX)
				G(c2p.fclass) = 2;     // Set service class to Class 2 FAX
	#endif
	#ifdef CLASS20_FAX
				G(c2p.fclass) = 0x20;  // Set service class to Class 2.0/2.1 FAX
		#ifdef V34_FAX
				if (G(c2p.fdis.ps.br) <= 5)  // A V.34 rate has not been specified (with +FCC or +FIS)?
					G(c2p.fdis.ps.br) = 13;     // Set maximum rate
		#endif
	#endif
				set_fax_modulation (); // Set modem for V.34 FAX, if compiled in
			}
#endif
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
			if (!CLASS_2_OR_20                          // Class 1/1.0 FAX interface?
	#if defined(V34_FAX)
					|| (G(S.ModemOptions.V8_Answer) == 5)   // Display indication for or V.8?
	#endif
				 )
#endif
			{
	#if defined(V34_FAX)
				if (G(S.ModemOptions.V8_Answer) == 5)  // Issue V.25ter +A8x: indication?
				{
					byte i = 0;

					while (a8c[i])
						msg[len++] = a8c[i++];  // Load "+A8C:" part of indication

					msg[len++] = '1';  // CNG tone indication
				}

				else 	// non-V.8 mode, with AdaptiveAnswer
	#endif
				{
					msg[len++] = 'F';
					msg[len++] = 'A';
					msg[len++] = 'X';
				}

				msg[len++] = G(S.ModemOptions.CRChar);  // Final return & line feed
				msg[len++] = G(S.ModemOptions.LFChar);
				at_output_msg (msg, len);               // Send message to host
			}
		}
	}

	else   // FAX CNG tone was not detected
	{
		if ( (G(S).ModemOptions.AdaptiveAnswer == TRUE))  // Class 1/1.0 auto-answer enabled?
		{
			G(x_modem_mode) = MODEM_DATA;  // Set data mode
#if defined(V34_FAX)
			G(x_fax_v34mode) = NON_V34;
			G(S.ModemOptions.V8_CI_Octet) = 0xC1;

			if( G(S.ModemOptions.V8_Answer) == 5 )  // Issue V.25ter +A8x: indication?
			{
				byte i = 0;

				while (a8c[i])
					msg[len++] = a8c[i++];  // Load "+A8C:" part of indication

				if (mode == 'C')     // Data Calling Tone detected?
					msg[len] = '2';    // Indicate Data Calling Tone

				else
					msg[len] = '0';    // No calling tone indication

				len++;
			}

			else // non-V.8 mode, with AdaptiveAnswer
#endif
#ifdef CLASS20_FAX
			if (G(c2p.fclass) != 0x20)  // Class 2.0/2.1 interface not used?
#endif
			{
				msg[len++] = 'D';
				msg[len++] = 'A';
				msg[len++] = 'T';
				msg[len++] = 'A';
			}

#ifdef CLASS20_FAX
			if (G(c2p.fclass) == 0x20)  // Class 2.0/2.1 interface used?
			{
	#if defined(V34_FAX)
				if( G(S.ModemOptions.V8_Answer) == 5 )  // Issue V.25ter +A8x: indication too?
				{
					msg[len++] = G(S.ModemOptions.CRChar);  // Another return & line feed
					msg[len++] = G(S.ModemOptions.LFChar);
				}
	#endif
				msg[len++] = '+';
				msg[len++] = 'F';
				msg[len++] = 'D';
				msg[len++] = 'M';
			}

			G(c2p.fclass) = 0;  // Indicate data mode
#endif
			msg[len++] = G(S.ModemOptions.CRChar);  // Final return & line feed
			msg[len++] = G(S.ModemOptions.LFChar);
			at_output_msg (msg, len);               // Send message to host
		}

//		else      // Data modem called a FAX modem
//			r = 0;  // Time-out in dpmain.c
	}

	return (r);  // Results of auto-answer
}

/****************************************************************
Routine : valid_call_tone ()
Description : See if a 1,300 hz tone meets the specifications for
							data calling tone.
*****************************************************************/

byte valid_call_tone (void)
{
	G(dp_timer1) = x_current_time ();		 // Reset timer first

	return ( (G(dp_fax_tone_on)  >  500) &&  // Min ON time?
					 (G(dp_fax_tone_on)  <  700) &&  // Max ON time?
					 (G(dp_fax_tone_off) > 1500) &&  // Min OFF time?
					 (G(dp_fax_tone_off) < 2200)     // Max OFF time?
				 );
}

/****************************************************************
Routine : look_4_cng
Description : See if a fax calling tone (1100Hz) or data calling
							tone (1300Hz) is present
*****************************************************************/
/*
	Calling Tone Specification:
		Frequency:     1,300 hz  +/- 15 hz
		On Duration:   .6 sec    +/- .1 second
		Off Duration:  1.75 sec  +/- .25 second

	CNG Specification:
		Frequency:     1,100 hz  +/- 38 hz
		On Duration:  .5 sec     +/- 15%
		Off Duration:  3 sec     +/- 15%
		Level:       -20 db      +11db, -20db

	Note: Using a signal generator, it was determined that detecting
	tones at 1080, 1100 and 1120 will allow detecting a CNG tone
	with a tolerance of +/- 38Hz.
*/

byte look_4_cng ( void )
{
	byte r = 0;
	word tone_det;

	if ( (G(x_modem_mode) != MODEM_FAX) &&       // Not FAX mode?
			((G(x_modem_mode) != MODEM_DATA ) || ((G(S).ModemOptions.AdaptiveAnswer == FALSE))))  // Class 1/1.0 to data disabled?
		return (TRUE);

	switch (G(dp_fax_tone_state))
	{
		case 0:	 // Wait for DSP tone detect delay to expire
			if (x_elapsed_time (G(dp_timer1)) > 45)  // DSP tone detect delay?
			{
				tone_det = dp_read_dsp_ram (0x28);

				if (tone_det & 0x0007)                 // CNG tone detected?
					G(dp_fax_tone_state) = 1;						 // Measure CNG tone ON duration

				else if (tone_det & 0x0008)            // Data Calling Tone detected?
					G(dp_fax_tone_state) = 7;            // Measure Data calling tone ON duration

				else
					G(dp_fax_tone_state) = 2; 					 // Measure silence duration

				G(dp_timer1) = x_current_time ();			 // Start timer
			}

			break;

		case 3:	 // Measure CNG tone duration after silence
		case 1:  // Measure CNG tone duration before silence
			if (!(dp_read_dsp_ram (0x28) & 0x0007))       // Tone gone?
			{
				if (x_elapsed_time (G(dp_timer1)) > 350)    // Tone on long enough?
					G(dp_fax_tone_state) = (G(dp_fax_tone_state) >> 1) + 4;			// State 1->4 or state 3->5
				else
					G(dp_fax_tone_state) = 2;						      // Tone too short, measure silence before tone

				G(dp_timer1) = x_current_time ();	          // Reset timer
			}
			break;

		case 4:	 // Measure silence duration after tone
		case 2:  // Measure silence duration before tone
			tone_det = dp_read_dsp_ram (0x28);

			if (tone_det & 0x0007)	        // CNG Tone present?
			{
				if (x_elapsed_time (G(dp_timer1)) > 2260)   // Silence long enough?
					G(dp_fax_tone_state)++;							      // State 2->3 or state 4->5
				else
					G(dp_fax_tone_state) = 1;						      // Silence too short, measure tone before silence

				G(dp_timer1) = x_current_time ();		        // Reset timer
			}

			else if (tone_det & 0x0008)    // Calling tone present?
			{
				G(dp_fax_tone_off) = x_elapsed_time (G(dp_timer1));  // Save 1,300 Hz OFF time

				if (valid_call_tone ())                             // Check if valid calling tone
				{
					r = set_ans_mode ('C');
					G(dp_fax_tone_state) = 6;
					dp_modem_command (MODEM_IDLE, 0, 0);  // Turn off tone detect
				}

				else
					G(dp_fax_tone_state) = 7;  // Measure 1,300 Hz ON time
			}

			break;

		case 5:	// Use selected FAX class (1/1.0/2/2.0/2.1)
			if (dp_read_dsp_ram (0x28) & 0x0007)	// Tone present?
				G(dp_timer1) = x_current_time ();		// Reset timer

			else if (x_elapsed_time (G(dp_timer1)) > 500)  // Wait 1/2 second after tone is gone
			{
				r = set_ans_mode ('F');               // Set FAX class; generate indication if necessary
				G(dp_fax_tone_state) = 6;             // Go to null state
				dp_modem_command (MODEM_IDLE, 0, 0);  // Turn off tone detect
			}
			break;

		case 6:  // Null state
			break;

		case 7:  // Measure data calling tone on duration
			if (!(dp_read_dsp_ram (0x28) & 0x0008))   // Tone gone?
			{
				G(dp_fax_tone_on) = x_elapsed_time (G(dp_timer1));  // Save 1,300 Hz ON time

				if (valid_call_tone ())                             // Check if valid calling tone
				{
					r = set_ans_mode ('C');
					G(dp_fax_tone_state) = 6;
					dp_modem_command (MODEM_IDLE, 0, 0);  // Turn off tone detect
				}

				else
					G(dp_fax_tone_state) = 4;  // Measure 1,300 Hz OFF time
			}

			break;
	}

	if (G(dp_fax_tone_state) != 6)                     // Still looking for CNG?
	{
		if ((x_elapsed_time (G(dp_timer)) > 7200) ||  // Invalid signal for 7.2 seconds?
			(x_elapsed_time (G(dp_timer1)) > 4040))     // No state change for 4.04 sec?
		{
			r = set_ans_mode ('D');               // Set DATA mode; generate indication if necessary
			G(dp_fax_tone_state) = 6;             // Go to null state
			dp_modem_command (MODEM_IDLE, 0, 0);  // Turn off tone detect
		}
	}

	return (r);	 // Indicate status of search
}
#endif

