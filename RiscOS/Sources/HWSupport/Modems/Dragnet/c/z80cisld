/*name and version number:@(#)z80cisld.c	1.7*/
/*date of get: 		  09/06/00 16:59:27*/
/*date of delta:	  01/05/99 15:21:54*/
/****************************************************************
File :	z80cisld.c
Description :
	Card Information Structure copy function. Copies the CIS from ROM
	to Attribute Memory (starting at location 0 in RAM). As per the
	PC Card 95 standard, Only even locations in RAM contain values.

Procedures Contained :
	z80_cis_load ()
	z80_base_adr ()

Revision History :
	Initials	Date		Change
	rwf    		08/14/96	Initial
	rwf    		08/27/96	Added z80_base_adr()
	rwf    		09/23/96	Added Serial EEPROM stuff.
*****************************************************************/

#include	"llglob_d.h"
#include	"z80glob.h"
#include	"allglobs.h"

// PCMCIA Serial EEPROM externals
extern	word MIMIC_B1;
extern	word MIMIC_B2;
extern	word MIMIC_B3;
extern	word MIMIC_B4;
#if defined( MULTI_FUNCTION )
extern	word RMP_B1;
extern	word RMP_B2;
#endif

extern	byte CIS_BEGIN[];
extern	byte CIS_DATA[] ;
extern	word CIS_LEN ;

// PCMCIA Serial EEPROM internals
byte *CisFrmp ;
byte *CisTop ;
word CisCnt ;

// PCMCIA Serial EEPROM definitions
#define CIS_TPLMID_MANF_BIT		(1<<0)
#define CIS_TPLMID_CARD_BIT		(1<<1)
#define CIS_TPLLV1_INFO_BIT		(1<<2)

#define CIS_START_LOC			(0)
#define CIS_BITMAP				(CIS_START_LOC)
#define CIS_TPLMID_MANF_CODE	(CIS_BITMAP + 1)
#define CIS_TPLMID_CARD_CODE	(CIS_TPLMID_MANF_CODE +2 )
#define CIS_TPLLV1_INFO_SIZE	(CIS_TPLMID_CARD_CODE +2 )
#define CIS_TPLLV1_INFO_DATA	(CIS_TPLLV1_INFO_SIZE +1 )
#define CIS_CHKSUM				(CIS_TPLLV1_INFO_DATA +134 )


/****************************************************************
	Function : z80_CIS_chksum()
	Returns calculated chksum over CIS fields stored
	in the Serial EEPROM.
*****************************************************************/
byte z80_CIS_chksum ( void )
{
	word loc ;
	byte data ;

	// calculate actual checksum
	data = 0 ;
	for ( loc=CIS_START_LOC; loc<CIS_CHKSUM; loc++ )
	{
		data += read_eeprom ( loc ) ;
	}
	return( data ) ;
}

/****************************************************************
	Function : z80_CIS_eeprom()
	Validates and returns the bitmap of CIS fields stored in
	the Serial EEPROM.
*****************************************************************/
byte z80_CIS_eeprom ( void )
{
	byte bitmap ;

	// get bitmap of CIS parameters
	bitmap = read_eeprom ( CIS_BITMAP ) ;

	// if CIS parameters present, check integrity.
	if ( bitmap )
	{
		if ( z80_CIS_chksum() == read_eeprom( CIS_CHKSUM ) )
		{
			return( bitmap ) ;
		}
		else
		{
			// Can't write here because interrupts are
			// enabled.  eeprom_ack() (called by write_eeprom())
			// has a timeout based on x_elapsed_time() which
			// requires that interrupts be enabled.
			//write_eeprom ( CIS_BITMAP, 0 ) ;
		}
	}
	return( 0 ) ;
}

/****************************************************************
	Function : z80_cpy_cis
	Copies a segment (possibly all) of Card Information Structure
	(CIS) from ROM to Attribute Memory (RAM)
	Globals Used:
		CisTop	- Destination "to" pointer in RAM
		CisFrmp	- Source "from" pointer in ROM
	Parameter passed:
		cnt		- number of bytes to copy.
*****************************************************************/
void z80_cpy_cis ( word cnt )
{
	while ( cnt-- )
	{
		*CisTop = *CisFrmp++ ;
		CisTop += 2 ;
	}
}

/****************************************************************
	Function : z80_var_load
	Copies Card Information Structure from ROM to Attribute
	Memory (RAM) folding in one or more variable parameters
	from the Serial EEPROM.
*****************************************************************/
void z80_var_load ( byte bitmap )
{
	byte *bp, loop_cnt, opcode, link, size ;
	byte safety_valve = 0;

	while ( CisCnt )
	{
		if ( safety_valve++ > 100 )
		{
			// too many tuples!!! we are broken
			// load default table and get out!!
			CisCnt = CIS_LEN ;
			CisFrmp = CIS_BEGIN ;
			CisTop  = CIS_DATA ;
			z80_cpy_cis( CisCnt ) ;
			return ;
		}

		// Get Tuple Opcode
		opcode = *CisFrmp ;

		// Get Tuple Link field
		link = *(CisFrmp+1) ;

		// special case - end of chain tuple
		if ( opcode == CISTPL_END )
		{
			z80_cpy_cis( 1 ) ;
			CisCnt -- ;
			if ( !CisCnt )
			{
				// only to satisfy dtpl.exe
				*CisTop = 1 ;
				*(CisTop+2) = CISTPL_END ;
				return ;
			}
			continue ;
		}

		// Now check opcode for variable fields
		if ( opcode == CISTPL_MANFID )
		{
			// link will not change size, store
			// opcode & link in Attribute Memory.
			z80_cpy_cis( 2 ) ;
			CisCnt -= 2 ;

			if ( bitmap & CIS_TPLMID_MANF_BIT )
			{
				*CisTop = read_eeprom( CIS_TPLMID_MANF_CODE ) ;
				*(CisTop+2) = read_eeprom( CIS_TPLMID_MANF_CODE+1 ) ;

				CisTop += 4 ;
				CisFrmp += 2 ;
				CisCnt -= 2 ;
			}
			else
			{
				// copy default PC Card Manufacturer
				// Code to Attribute Memory.
				z80_cpy_cis( 2 ) ;
				CisCnt -= 2 ;
			}

			if ( bitmap & CIS_TPLMID_CARD_BIT )
			{
				*CisTop = read_eeprom( CIS_TPLMID_CARD_CODE ) ;
				*(CisTop+2) = read_eeprom( CIS_TPLMID_CARD_CODE+1 ) ;

				CisFrmp += 2 ;
				CisTop += 4 ;
				CisCnt -= 2 ;
			}
			else
			{
				// copy default Manufacturer Information
				// Code to Attribute Memory.
				z80_cpy_cis( 2 ) ;
				CisCnt -= 2 ;
			}
		}
		else if ( (opcode == CISTPL_VERS_1) &&
				  (bitmap & CIS_TPLLV1_INFO_BIT) )
		{
			// copy first 4 fields of Version Tuple to CIS. Save the ptr
			// to link field for modification below.
			// Also adjust ROM ptr (CisFrmp) and count (CisCnt) to
			// beginning of next Tuple.
			bp = CisTop + 2 ;
			z80_cpy_cis( 4 ) ;
			CisCnt  -= (link + 2) ;
			CisFrmp += (link - 2) ;

			// Adjust link size to include 2 bytes already copied and
			// store it on top of previously stored link.
			size = read_eeprom( CIS_TPLLV1_INFO_SIZE ) ;
			*bp = size + 2 ;

			// Now get the manufacturers' data from the Serial EEprom
			// and store it in Attribute Memory.
			loop_cnt = CIS_TPLLV1_INFO_DATA ;
			while ( size-- )
			{
				*CisTop = read_eeprom( loop_cnt++ ) ;
				CisTop += 2 ;
			}
		}
		else
		{
			// no change in this tuple, simply
			// copy it from ROM to RAM.
			link += 2 ;
			z80_cpy_cis( (word)link ) ;
			CisCnt -= link ;
		}
	}
}

/****************************************************************
	Function : z80_cis_load
	Copies Card Information Structure from ROM to Attribute
	Memory (RAM).
*****************************************************************/
void z80_cis_load ( void )
{
	byte bitmap ;

	CisCnt = CIS_LEN ;
	CisFrmp = CIS_BEGIN ;
	CisTop  = CIS_DATA ;

	// check for variable fields in eeprom
	bitmap = z80_CIS_eeprom() ;
	if ( !bitmap )
	{
		// No Variable parameters in Serial EEPROM
		// Copy the entire CIS from ROM to Attribute Memory
		z80_cpy_cis( CisCnt ) ;
	}
	else
	{
		z80_var_load( bitmap ) ;
	}
}

/****************************************************************
	Function : z80_base_adr
	Returns I/O base address for a given CIS Index.
*****************************************************************/
word z80_base_adr ( byte index )
{
	switch (index )
	{
	case 1:
		return MIMIC_B1 ;
	case 2:
		return MIMIC_B2 ;
	case 3:
		return MIMIC_B3 ;
	case 4:
		return MIMIC_B4 ;
#if defined( MULTI_FUNCTION )
	case 0x11:
		return RMP_B1 ;
	case 0x12:
		return RMP_B2 ;
#endif 
	default:
		return 0 ;
	}
}
