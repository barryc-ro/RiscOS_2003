/*name and version number:@(#)atsync.c	1.51*/
/*date of get: 		  09/06/00 16:58:48*/
/*date of delta:	  08/03/00 16:56:16*/
/***************************************************************** 
File : atsync.c
Description :
 This file contains all the at commands related to v.80 (v.ib), v.25 annex a

Procedures Contained :
	at_v8_cmd
	at_sync_mode
	at_sync_access_mode
	at_plus_GMM

Revision History :
	Initials        Date            Change
	R.H.Decker	08/18/95	Added V42_SYNC_BUFFERED
	A.Cheng 	02/21/96	Added v80 options
	                    	Added at_sync_access_mode
*****************************************************************/

#include "llglob_d.h"

#include "atglob.h"
#include "dpglob.h"
#ifdef V80
#include "sync.h"
#endif	//V80
#include "allglobs.h"

typedef const byte *CBP;

#if defined (V25TER) || defined (V80) || defined (V8BIS)
/****************************************************************
Routine : at_v8_chk_end_of_parameter
Description :
	This routine check end of parameter of the ( at+a8e ) commands. 
*****************************************************************/
static byte at_v8_chk_end_of_parameter(byte *str)
{
	if ( str[0] == 0 )
	{
		G(at_result_code) = OK;
		return 1;
	}

	if ( ( ( str[0] == ',') && ( str[1] == 0 ) ) ||		// ends with ","
		 ( ( str[0] != ',' ) && ( str[1] != 0 ) ) )		// no comma before next
	{
		at_cmd_err_ret();
		return 0;
	}

	return 2;
}
/****************************************************************
Routine : at_v8_cmd
Description :
	This routine process the ( at+a8e ) commands. 
*****************************************************************/
#define A8E	"+A8E: "
#define COMMA	","
#define V8_ORIG_VAL    6
#define V8_ANS_VAL     5
#define CI_OCTET_MAX_VAL 0xff

#ifdef V80
#ifdef V8BIS
#define A8E_RANGE A8E "(1,6),(1,5),x(0-FF),(0-2)"
#else
#define A8E_RANGE A8E "(1,6),(1,5),x(0-FF)"
#endif	//V8BIS
#else
#define A8E_RANGE A8E "(0),(0),x(0),(0-1)"
#endif	//V80
#if !defined (V80)
#define V8BIS_DCE_CONTROL	1
#endif	//V80

void at_v8_cmd(byte *ch)
{
	byte msg[40], *ptr, bVal;

	switch ( ch[3] )
	{
		case '?' :      // AT+A8E?
			msg[0] = (byte) ('0' + G(S).ModemOptions.V8_Orig);
			msg[1] = ',';
			msg[2] = (byte) ('0' + G(S).ModemOptions.V8_Answer);
			msg[3] = ',';
			at_itoa(((word)G(S).ModemOptions.V8_CI_Octet), &msg[4], HEX);
#ifdef V8BIS
			msg[6] = ',';
			msg[7] = (byte) ('0' + G(S).ModemOptions.V8bis);
			msg[8] = 0;
#else
			msg[6] = 0;
#endif //V8BIS define
			at_output_msg2(msg);
			G(at_cmd_ptr)++;
			G(at_result_code) = OK;
			break;

		case '=' :
			if ( ch[4] == '?' )     // AT+A8E=?
			{
				at_px_strcpy(msg, (const byte *) A8E_RANGE);
				at_output_msg2(msg);
				G(at_result_code) = OK;
				break;
			}
			else  
			{  			
				// <v8o>
				ptr = &ch[4];
				if ( ( *ptr != ',' ) &&
					 ( *ptr != 0 ) )     // new < v8a >
				{
					bVal = V8_ORIG_VAL;
					if (!at_OneByte(&ptr, &bVal))
						return;
#ifdef V80
					if ( ( bVal != 1 ) && ( bVal != V8_ORIG_VAL ) )
#else
					if ( bVal != 0 ) 
#endif	//V80
					{
						at_cmd_err_ret();
						return;
					}
					G(S).ModemOptions.V8_Orig = bVal;
					if ( G(S).ModemOptions.V8_Orig == V8_ORIG_VAL )
						G(S).ModemOptions.DataCallingTone = 1;
				}

				if (at_v8_chk_end_of_parameter(ptr) != 2)
					return;

				ptr++;	// skip ','
				if ( ( *ptr != ',' ) &&
					 ( *ptr != 0 ) )     // new < v8a >
				{
					bVal = V8_ANS_VAL;
					if (!at_OneByte(&ptr, &bVal))
						return;
#ifdef V80
					if ( ( bVal != 1 ) && ( bVal != V8_ANS_VAL ) )
#else
					if ( bVal != 0 )
#endif	//V80
					{
						at_cmd_err_ret();
						return;
					}
					G(S).ModemOptions.V8_Answer = bVal;
				}
				if (at_v8_chk_end_of_parameter(ptr) != 2)
					return;

				ptr++;
				if ( ( *ptr != ',' ) &&
					 ( *ptr != 0 ) )   // new < ci octet >
				{
					word wVal;

					ptr = ptr + at_atoi(ptr, &wVal, HEX);
					if (wVal > 0xff)
					{
						at_cmd_err_ret();
						return;
					}
					G(S).ModemOptions.V8_CI_Octet = (byte) wVal;
				}
				if ( at_v8_chk_end_of_parameter(ptr) != 2)
					return;
#ifdef V8BIS	
				ptr++;
				if ( *ptr != 0 )   // new < v8bis negotiation >
				{
#ifdef V80
					bVal = V8BIS_DTE_CONTROL;
#else
					bVal = V8BIS_DCE_CONTROL;
#endif	//V80
					if (!at_OneByte(&ptr, &bVal))
						return;

					G(S).ModemOptions.V8bis = bVal;
#ifdef V80
					x_send_mail ( DP_V8BIS_DETECTION, DP_TASK, NULL,0 );
#endif	//V80
				}
#endif //V8BIS 
		 	} 
			G(at_result_code) = OK;	
			break;

		default :
			at_cmd_err_ret();
			break;
	}
}
#endif	//V25TER || V80 || V8BIS
#ifdef V80
/****************************************************************
Routine : at_sync_access_mode()
Description : Synchronous Access Mode AT Command parser
		- This routine process the ( at+esa ) commands.

Revision History :
	Initials    Date        Change
	A.Cheng     02/20/96    Initial
*****************************************************************/
#define  trans_idle_max     0
#define  frame_idle_max     1
#define  frame_under_max    0
#define  half_duplex_max    0
#define  crc_type_max       1
#define  nrzi_en_max        0																						
#define  sync1_max          0
#define  sync2_max          0
#define  ESA				"+ESA: "
#define  ESA_RANGE			ESA "(0),(0-1),,,(0-1),(0),,"

void at_sync_access_mode ( byte *ch )
{
	byte  buf[100];
	long nums[10];
	
	switch ( ch[3] )
	{
	case '?' :      // AT+ESA?
			
		x_strcpy(buf, (CBP) ESA);
			
		x_strcat( buf, (CBP) "0,");
		if ( G(V80_Options).FrameIdle <= frame_idle_max )
		{
			at_cat_num(buf, (word)G(V80_Options).FrameIdle, 0);
		} 
		x_strcat( buf, (CBP) ",,,");
		if ( G(V80_Options).CrcType <= crc_type_max )
		{
			at_cat_num(buf, (word)G(V80_Options).CrcType, 0);
		}
		x_strcat(buf, (CBP) ",0,,");
		at_output_msg2(buf);
		break;

	case '=' :
				
		if ( ch[4] == '?' )     // AT+ESA=?
		{
			x_strcpy(buf, (CBP) ESA_RANGE);
			at_output_msg2(buf);
			break;
		}
		else
		{
			x_strcpy(buf, (CBP) ESA_RANGE);
			if (at_withinrange( &ch[4], buf, nums))
			{
				if ( nums[0] >= 0 )
					G(V80_Options).TransIdle = (byte) nums[0];
				if ( nums[1] >= 0 )
					G(V80_Options).FrameIdle = (byte) nums[1];
				if ( nums[4] >= 0 )
					G(V80_Options).CrcType = (byte) nums[4];
				if ( nums[5] >= 0 )
					G(V80_Options).NrziEn = (byte) nums[5];
				G(at_result_code) = OK;
				return;
			}
			else
			{
				at_cmd_err_ret();
				return;
			}		
		}
	default :
		at_cmd_err_ret();
		return;
	}
	G(at_result_code) = OK;
}

#ifdef V8BIS
/**************************************************************************
Routine : get_V8bis_parameter
Description :
	This routine converts the information fields of the at+a8t command to HEX.
***************************************************************************/
byte get_v8bis_parameter ( byte *str, word *num )
{
	byte count;
	word tmp = 0;
	
	for (count=0;  ( (((str[count]>='0') && (str[count]<='9')) ||
						((str[count]>='A') && (str[count]<='F'))) &&
						( count < 2 ) ); ++count)
	{
		if ((str[count] >= 'A') && (str[count] <= 'F'))
			tmp = (word) (tmp*16 + (str[count]-'A'+10));
		else
			tmp = (word) (tmp*16 + (str[count]-'0'));
	}
	*num = tmp;

	return count;
}

/****************************************************************
Routine : get_v8bis_msg
Description :
	This routine parses the information fields of the at+a8t command.
*****************************************************************/
byte get_v8bis_msg ( byte msg_no, byte *str )
{
	word temp;
	byte len;
	byte index;

	index = 0;
	len = 1;

	while ( len >0 )
	{
		len = get_v8bis_parameter ( &str[index], &temp );
		if ( len == 2 )
		{
			if ( msg_no == 1 )
			{
				G(v8bis_msg1)[ G(v8bis_ptr)->v8bis_msg1_cnt] = (byte) temp;
				( G(v8bis_ptr)->v8bis_msg1_cnt )++;
			}
			else
			{
				G(v8bis_msg2)[ G(v8bis_ptr)->v8bis_msg2_cnt] = (byte) temp;
				( G(v8bis_ptr)->v8bis_msg2_cnt )++;
			}
			index +=2;
		}
		else
		{
			if ( len == 1 )
			{
				index++;
				len = 0;
				if ( (byte)temp == 0 )
				{
					if ( msg_no == 1 )
					{
						G(v8bis_msg1)[ G(v8bis_ptr)->v8bis_msg1_cnt] = 0;
						( G(v8bis_ptr)->v8bis_msg1_cnt )++;
					}
					else
					{
						G(v8bis_msg2)[ G(v8bis_ptr)->v8bis_msg2_cnt] = 0;
						( G(v8bis_ptr)->v8bis_msg2_cnt )++;
					}
				}
				else
				{	
					index = 0;
				}
			}
		}
	}
	return index;
}

/****************************************************************
Routine : at_get_a8t_msg
Description :
	This routine get v8bis msg for the at+a8t commands.
*****************************************************************/
byte at_get_a8t_msg ( byte *ch, byte index, byte base, byte msg_no )
{
	byte msg_len;

	if ( ( ( ch[base+index] >= '0' ) && ( ch[base+index] <= '9' ) ) ||
		( ( ch[base+index] >= 'A' ) && ( ch[base+index] < 'F' ) ) ||
		( ( ch[base+index] >= 'a' ) && ( ch[base+index] <= 'f' ) ) )
		// new < v8bis_message >
	{
		msg_len = get_v8bis_msg(msg_no, &ch[base+index]);
		if ( msg_len == 0 )
		{
			at_cmd_err_ret();
			return 0;
		}
		index = (byte) (index + msg_len);
		return index;
	}	
	else
	{
		if ( ch[base+index] == 0 )
		{
			at_cmd_err_ret();
			return 0;
		}
	}
	return index;
}
/****************************************************************
Routine : at_v8bis_a8t_cmd
Description :
	This routine parses the at+a8t commands.
*****************************************************************/
#define v8bis_signal		10
#define v8bis_sig_en		1
#define v8bis_msg_en		1
#define v8bis_supp_delay	1
#define A8T	"+A8T: "
#define A8T_RANGE A8T "(0-10),i(64),i(64),(0-1),(0-1),(0-1)"

void at_v8bis_a8t_cmd ( byte *ch )
{
	byte txchar[50];
	long nums[10];		// array of integers for the parameters
	word index;
	byte request_to_send_a8t_cmd;
	byte msg_len = 0;
	long val;

	request_to_send_a8t_cmd = FALSE;	
	index = 0;

	switch ( ch[3] )
	{
		case '?' :      // AT+A8T?
			x_strcpy(txchar,(CBP) A8T);	// display currently set value
			x_strcat(txchar,(CBP) ",,,");
			if ( G(V8bis_Options).V8bis_Sig_En != 99 )
			{
				at_cat_num(txchar, (word)G(V8bis_Options).V8bis_Sig_En, 0);
			}
			x_strcat(txchar,(CBP) COMMA);
			at_cat_num(txchar, (word)G(V8bis_Options).V8bis_Msg_En, ',');
			at_cat_num(txchar, (word)G(V8bis_Options).V8bis_Supp_Delay, 0);
			at_output_msg2(txchar);
			G(at_result_code) = OK;
			break;

		case '=' :
			if ( ch[4] == '?' )     // AT+A8T=?
			{
				at_px_strcpy(txchar, (CBP) A8T_RANGE);
				at_output_msg2(txchar);
				G(at_result_code) = OK;
				break;
			}
			else
			{
				// get all parameters except the message 1 and 2
				x_strcpy(txchar, (CBP) A8T_RANGE);   // this is the template
				if (at_withinrange( &ch[4], txchar, nums))
				{
					if (nums[0] >=0)
					{
						G(V8bis_Options).V8bis_Signal = (byte) nums[0];
						request_to_send_a8t_cmd = TRUE ;
					}
					if (nums[3] >=0)
						G(V8bis_Options).V8bis_Sig_En = (byte) nums[3];
					if (nums[4] >=0)
						G(V8bis_Options).V8bis_Msg_En = (byte) nums[4];
					if (nums[5] >=0)
						G(V8bis_Options).V8bis_Supp_Delay = (byte) nums[5];
					G(at_result_code) = OK;
				}
		 		else
		 		{
		  			G(at_result_code) = ERROR;	
					return; 
		 		}

				// parse the message 1 and 2 here
				// move the pointer to point to v8bis msg1
				index = (word) at_atoint(&ch[4], &val, DECIMAL);
				index++;

				// get v8bis msg1 
				msg_len = at_get_a8t_msg (ch, (byte) index, 4, 1) ;
				if (msg_len == 0)
					return;
				if ( msg_len != index )
				{
					request_to_send_a8t_cmd = TRUE ;
					index = msg_len;
				}

				if ( ch[4+index] == 0 )
				{
					G(at_result_code) = OK;
					return;
				}
					
				index++;

				// get v8bis msg 2
				msg_len = at_get_a8t_msg (ch, (byte) index, 4, 2) ;
				if (msg_len == 0)
					return;
				if ( msg_len != index )
				{
					request_to_send_a8t_cmd = TRUE ;
					index = msg_len;
				}

				if ( ( ch[4+index] == 0 ) || ( ch[4+index] == ',' ) )
				{
					G(at_result_code) = OK;
					return;
				}
			}
			
		default :
			at_cmd_err_ret();
			break;
	}
	if ( request_to_send_a8t_cmd )
	{
		x_send_mail ( DP_SEND_A8T_CMD, DP_TASK, NULL,0 );
	}
	else
	{
		x_debug_msg ( "send DP_A8T_CMD mail to DP" );
		x_send_mail ( DP_A8T_CMD, DP_TASK, NULL,0 );
	}
	return;
}
#endif 	// V8BIS define
#endif	// V80
#if defined (V80) || defined (V8BIS)
/****************************************************************
Routine : at_v8_v8bis_cmd
Description :
	This routine parses the ( at+a8e, at+a8t ) commands. 
*****************************************************************/
void at_v8_v8bis_cmd ( byte *ch )
{
	if ( ch[1] == '8' )
	{
		switch ( ch[2] )
		{
		case 'E' :	
			at_v8_cmd(ch);			// at+a8e command
			break;
#if defined (V80) && defined (V8BIS)
		case 'T' : 	
			at_v8bis_a8t_cmd(ch);	// at+a8t command
			break;
#endif //V80 && V8BIS
		default :
			at_cmd_err_ret();
			break;
		}
	}
	else
		at_cmd_err_ret();
	return;
}
#endif	//V80 || V8BIS
#ifdef V80
/****************************************************************
Routine : at_sync_flow_control
Description :
	This routine parses the ( at+itf ) command.
*****************************************************************/
#define  v80_xoff_max          1024
#define  v80_xon_max           1024
#define  v80_xoff_min          0
#define  v80_xon_min           0
#define ITF		   "+ITF: "
#define ITF_RANGE	ITF "(0-1024),(0-1024)"
void at_sync_flow_control(byte *ch)
{
	byte  msg[20], txchar[50];
	word temp ;
	word temp1 = 0;
	long nums[10];

	if (ch[1] != 'T' || ch[2] != 'F')
	{
		at_cmd_err_ret();
		return;
	}
 
	switch( ch[3] )
	{
	case '?' :      // AT+ITF?
		msg[0] = 0;
		at_cat_num(msg, (word)G(V80_Options).Xoff, ',');
		at_cat_num(msg, (word)G(V80_Options).Xon, 0);
		at_output_msg2(msg);
		break;

	case '=' :  		   
		if ( ch[4] == '?' )     // AT+ITF=?
		{
			x_strcpy(txchar, (CBP) ITF_RANGE);
			at_output_msg2(txchar);
		}
		else
		{
			x_strcpy(txchar, (CBP) ITF_RANGE);
			if (at_withinrange(&ch[4],txchar,nums))
			{
				temp= G(V80_Options).Xoff;
				temp1= G(V80_Options).Xon;
				if( nums[0] !=-1)
					G(V80_Options).Xoff = (byte) nums[0];
				if( nums[1] !=-1)
					G(V80_Options).Xon = (byte) nums[1];
			}
			else
			{
				at_cmd_err_ret();
				return;
			} 				
		}
		break;
			
	default:
		at_cmd_err_ret();
		return; 
	}
	if ( ( G(V80_Options).Xon == 0 ) || ( G(V80_Options).Xoff == 0 ) )
	{
		G(V80_Options).Xoff = 0 ;
		G(V80_Options).Xon = 0 ;
	}
	else
	{
		if ( G(V80_Options).Xon >= G(V80_Options).Xoff )
		{
			G(V80_Options).Xoff = temp1 ;
			at_cmd_err_ret() ;
			return ;
		}
	}	   
	G(at_result_code) = OK;
}

#endif	// V80 define

#ifdef V25TER
#define ASTO		"+ASTO: "
#define ASTO_RANGE	ASTO "(0-2),(40)"
/****************************************************************
Routine : at_v25ter_asto
Description :
	AT+ASTO - store telephone number
*****************************************************************/
void at_v25ter_asto(byte *ch)
{
	byte i, index, *ptr;
	byte msg[70];

	index = 0;
	if ( ch[4] == '=')
	{
		if ( ch[5] == '?' )  // display list of supported values
		{
			// +ASTO=? - display valid range of location numbers and
			// maximum length of dial string.
			x_strcpy(msg, (CBP) ASTO_RANGE);
			at_output_msg2(msg);
			G(at_result_code) = OK;
		}
		else
		{
			// +ASTO=<location>,<dial string>
			ptr = &ch[5];
			i = MAX_PHONE_NUMBERS - 1;
			if (!at_OneByte(&ptr, &i))	// parse location
				return;

			// now we should see an ',' followed by phone number
			if (*ptr++ != ',' || x_strlen(ptr) > MAX_PHONE_LENGTH)
			{
				at_cmd_err_ret ();
				return;
			}

			// now put it someplace where we won't forget it
			if (!store_number(i, ptr))
			{
				at_cmd_err_ret();
				return;
			}

			G(at_result_code) = OK;
		}
	}
	else
	{
		if (ch[4] == '?' )
		{
			// +ASTO? - display stored phone numbers
			x_send_at_io_crlf();
			for (i=0; i<MAX_PHONE_NUMBERS; i++)
			{
				// '+ASTO: 0,' = 9 characters:  msg[0] - msg[8]
				x_strcpy(msg, (CBP) "+ASTO: 0,");
				msg[7] = (byte) (i + '0');

				load_number(i, msg + 9);
				x_send_at_io_data(msg);
				x_send_at_io_crlf();
			}
			G(at_result_code) = OK;
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
}
#endif	//V25TER
