/*name and version number:@(#)iocid.c	1.80*/
/*date of get: 		  10/17/00 14:20:54*/
/*date of delta:	  10/16/00 10:45:10*/
/****************************************************************
File :	iocid.c
Description :
	Contains all routines for the data transmition between
	DTE and DCE when receiving caller id information.

Procedures Contained :
	io_cid_init
	io_rx_cid 

Revision History :
	Initials	Date		Change
	MV      	03/8/94		Initial
*****************************************************************/

#include "llglob_d.h"

#ifdef VOICE
#ifdef CALLER_ID
#include "ioglob_d.h"
#include "atglob.h"
#include "allglobs.h"

/* Message Type definitions */
#define CNDI	0x04	// Calling Number Delivery Information
#define CLIP 	0xC0	// Calling Number Delivery Information for Japan
#define CNAM	0x80	// Calling Name Delivery 

/* external Global Variables and Functions  */
extern void io_compute_crc ( byte data_byte ) ; 

/****************************************************************
Routine : io_cid_put_msg
Description : puts specified number of characters to DTE
 Parameters in : pointer to byte.  These msg is arranged
 in words, however, so we have to skip every other character
*****************************************************************/
void io_cid_put_msg(byte* msg, byte len)
{
    while (len)
    {
		io_put_dte_tx_char ( *msg ) ;
		msg++ ;
		msg++ ;
		len--;
    }
}

/****************************************************************
Routine : io_cid_init
Description : Initialization routine for caller id receiver
*****************************************************************/
void io_cid_init ( void )
{
	io_cid_state = IO_CID_TYPE ;
	if ( S.ModemOptions.CallerIdType == 1 )	  // Japan
		io_cid_state = IO_CID_HEADER ;
	io_timer = x_current_time () ;
	io_init_dce_rx_fifo () ;	// init dce receive  fifo
}

/****************************************************************
Routine : io_single_data_msg
Description : Process the single data message.
Parameters in : none
Parameters out : none
*****************************************************************/
void io_single_data_msg ( void )
{
	io_cid_ptr += 2 ; // skip message length
	x_send_at_io_data((byte *) "DATE=");
	io_cid_put_msg ( (byte*)io_cid_ptr, 4);
	io_cid_ptr += 4 ;
	x_send_at_io_crlf () ;
	x_send_at_io_data((byte *) "TIME=");
	io_cid_put_msg ( (byte*)io_cid_ptr, 4);
	io_cid_ptr += 4 ;
	x_send_at_io_crlf () ;
	x_send_at_io_data((byte *) "NMBR=");
	io_cid_msg_len = (byte) (io_cid_msg_len - 11);
	while ( io_cid_msg_len-- )
	{
		io_put_dte_tx_char ( (byte) *io_cid_ptr++ ) ;
	}
	x_send_at_io_crlf () ;
}

/****************************************************************
Routine : io_multi_data_msg 
Description : Process the mutil data message.
Parameters in : none
Parameters out : none
*****************************************************************/
void io_multi_data_msg ( void )
{
	byte para_num_len=0, para_name_len ;

	io_cid_msg_len = (byte) io_dce_buf[1] ;
	io_cid_ptr = &(io_dce_buf[2]) ;
	while ( io_cid_msg_len )
	{
		switch ( (byte)*io_cid_ptr++ )
		{
		case 0x01 :
			x_send_at_io_data((byte *) "DATE=");
			++io_cid_ptr ;//skipping parameter length
			io_cid_put_msg ( (byte*)io_cid_ptr, 4);
			io_cid_ptr += 4 ;
			x_send_at_io_crlf () ;
			x_send_at_io_data((byte *) "TIME=");
			io_cid_put_msg ( (byte*)io_cid_ptr, 4);
			io_cid_ptr += 4 ;
			x_send_at_io_crlf () ;
			io_cid_msg_len -= 10 ;
			break ;

		case 0x02 :		// number is available
			x_send_at_io_data((byte *) "NMBR=");
			para_num_len =  (byte) *io_cid_ptr++  ;
			io_cid_msg_len = (byte) (io_cid_msg_len - (para_num_len + 2));
			while ( para_num_len-- )
			{
				io_put_dte_tx_char((byte)*io_cid_ptr++);
			}
			x_send_at_io_crlf () ;
			break ;

		case 0x04 :		// reason for abseance num
			x_send_at_io_data((byte *) "NMBR=");
			++io_cid_ptr ;//skipping parameter length
			io_put_dte_tx_char ((byte) *io_cid_ptr++);
			io_cid_msg_len -= 3 ;
			x_send_at_io_crlf () ;
			break ;

		case 0x07 :		// name is available
			x_send_at_io_data((byte *) "NAME=");
			para_name_len =  (byte) *io_cid_ptr++  ;
			io_cid_msg_len = (byte) (io_cid_msg_len - (para_name_len + 2));
			while ( para_name_len-- )
			{
				io_put_dte_tx_char((byte)*io_cid_ptr++);
			}
			x_send_at_io_crlf () ;
			break ;

		case 0x08 :		// reason for abseance name
			x_send_at_io_data((byte *) "NAME=");
			++io_cid_ptr ;//skipping parameter length
			io_put_dte_tx_char ((byte) *io_cid_ptr++);
			io_cid_msg_len -= 3  ;
			x_send_at_io_crlf () ;
			break ;

		default :
			para_num_len = (byte) *io_cid_ptr++;
			io_cid_msg_len = (byte) (io_cid_msg_len - (para_num_len + 2));
			break ;
		}
	}
}

/****************************************************************
Routine : io_process_data
Description : Process the caller id data.

*****************************************************************/
void io_process_data(void)
{
	byte buf[5], inbyte;

	if ( S.ModemOptions.CallerId == 2 )	// unformated format
	{
		x_send_at_io_data((byte *) "MESG=");
		while ( io_cid_msg_len-- )
		{
			inbyte = (byte) *io_cid_ptr++;

			at_itoa((word) inbyte, buf, HEX);
			x_send_at_io_data(buf);
		}
		x_send_at_io_crlf () ;
	}
	else if ( io_dce_buf[0] == CNDI )
	{
		x_debug_msg("IO - CNDI") ;
		io_single_data_msg ( ) ;
	}
	else if ( io_dce_buf[0] == CNAM )
	{
		x_debug_msg("IO - CNAM") ;
		io_multi_data_msg ( ) ;
	}
}

/****************************************************************
Routine : io_process_jcid_data
Description : Process Japan caller id data.
*****************************************************************/
void io_process_jcid_data ( void )
{
	byte buf[5], inbyte;
	byte para_name_len ;

	if ( S.ModemOptions.CallerId == 2 )	// unformated format
	{
		x_send_at_io_data((byte *) "MESG=");
		io_cid_msg_len = (byte) ( (io_dce_buf[4] & 0x7f) + 9 ) ;
		io_cid_ptr = io_dce_buf ;
		while ( io_cid_msg_len-- )
		{
			inbyte = (byte) *io_cid_ptr++ ;

			at_itoa((word) inbyte, buf, HEX);
			x_send_at_io_data(buf);
		}
		x_send_at_io_crlf () ;
	}
	else 
	{
		io_cid_msg_len = (byte) (io_dce_buf[4] & 0x7f) ;
		io_cid_ptr = &(io_dce_buf[5]) ;
		if ( ( (byte)*io_cid_ptr == 0x05 ) || ( (byte)*io_cid_ptr == 0x82 )
			|| ( (byte)*io_cid_ptr == 0x84 ) )
		{
			x_send_at_io_data((byte *) "NMBR=");
			io_cid_ptr++ ;
			para_name_len = (byte) (0x7f & (byte) *io_cid_ptr++);
			while ( para_name_len-- )
			{
				io_put_dte_tx_char((byte) (0x7f & (byte) *io_cid_ptr++));
			}
			x_send_at_io_crlf () ;
		}
	}
}
/****************************************************************
Routine : io_rx_jcid
Description : Receive the Japan caller id.
Parameters in : none
Parameters out :
	FALSE - if end of data or timed out. 
	TRUE  - if still processing data
*****************************************************************/
byte io_rx_jcid ( void )
{
	byte rx_byte;

	 // wait for upto 3.5 sec to start receiving cid data, and up to
	 // 5 sec to receive all the data.
	if ( ( io_cid_state == IO_CID_HEADER )	&&	// channel seizure state
		 ( x_elapsed_time ( io_timer ) >= SECOND4 ) )
	{
		return FALSE;
	}
	else if ( x_elapsed_time ( io_timer ) >= SECOND5 )
	{
		return FALSE;
	}

	// wait for the data from the UART
	while ( io_dce_rx_rptr != io_dce_rx_wptr )
	{
		rx_byte = (byte) (*io_dce_rx_rptr++) ;
		if ( io_dce_rx_rptr >= io_dce_rx_eptr )
			io_dce_rx_rptr = io_dce_rx_sptr ;
		switch ( io_cid_state )
		{
			case IO_CID_HEADER :	// look for HEADER
				if ( rx_byte == 0x87 )
				{
					io_cid_ptr = io_dce_buf ;
					*io_cid_ptr++ = rx_byte ;
					io_crc = 0 ;
					io_compute_crc ( rx_byte ) ;  // include header in CRC
					io_cid_state = IO_CID_DLE ;
				}
				break ;
			case IO_CID_DLE :	// look for DLE
				if ( rx_byte == 0x90 )
				{
					*io_cid_ptr++ = rx_byte ;
					io_compute_crc ( rx_byte ) ;  // include DLE in CRC
					io_cid_state = IO_CID_TYPE ;
				}
				break ;
			case IO_CID_TYPE :	// look for calling number or calling name id
				if ( rx_byte == CLIP )
				{
					*io_cid_ptr++ = 0x82 ;
					io_compute_crc ( 0x82) ; // include the STX  preceeding service type in CRC
					*io_cid_ptr++ = rx_byte ;
					io_compute_crc ( rx_byte ) ; // include service type in CRC
					io_cid_state = IO_CID_MSG_LENGTH ; 
				}
				break ;

			case IO_CID_MSG_LENGTH:
				*io_cid_ptr++ = rx_byte ;
				io_compute_crc ( rx_byte ) ; // include msg length in CRC
				io_cid_msg_len = (byte) ((rx_byte & 0x7f) + 4);	// add DLE, ETX, & CRC bytes
				io_cid_state = IO_CID_DATA ;
				break ;

			case IO_CID_DATA:
				*io_cid_ptr++ = rx_byte ;
				io_compute_crc ( rx_byte ) ; // include all bytes including CRC bytes in CRC
				if ( --io_cid_msg_len == 0 )	// we got all the data for cid
				{
					if ( S.ModemOptions.CallerId == 1 )	// formated
					{
						if ( io_crc ) // not 0
						{
							x_debug_msg("CID - CRC error") ;
						}
					}

					if ( x_modem_mode == MODEM_VOICE )
					{
						io_put_dte_tx_char ( DLE ) ;
						io_put_dte_tx_char ( 'X' ) ;
					}
					x_send_at_io_crlf () ;
					io_process_jcid_data() ;
					if ( x_modem_mode == MODEM_VOICE )
					{
						io_put_dte_tx_char ( DLE ) ;
						io_put_dte_tx_char ( '.' ) ;
					}
					return FALSE;
				}
				break ;				// for the data case
		}
	}

	return TRUE;
}

/****************************************************************
Routine : io_rx_cid
Description : Receive the caller id.
Parameters in : none
Parameters out :
	FALSE - if end of data or timed out. 
	TRUE  - if still processing data
*****************************************************************/
byte io_rx_cid ( void )
{
	byte rx_byte;

	if (S.ModemOptions.CallerIdType == 1 )	  // Japan
		return ( io_rx_jcid ( ) ) ;

	//check if the time interval between the first and second ring has passed
	
	if ( ( io_cid_state == IO_CID_TYPE )	&&	// channel seizure state
		 ( x_elapsed_time ( io_timer ) >= SECOND2 ) )
	{
		return FALSE;
	}
	else
	if ( x_elapsed_time ( io_timer ) >= SECOND4 )
	{
		return FALSE;
	}

	// wait for the data from the UART
	while ( io_dce_rx_rptr != io_dce_rx_wptr )
	{
		rx_byte = (byte) (*io_dce_rx_rptr++) ;
		if ( io_dce_rx_rptr >= io_dce_rx_eptr )
			io_dce_rx_rptr = io_dce_rx_sptr ;
		switch ( io_cid_state )
		{
			case IO_CID_TYPE :	// look for calling number or calling name id
				if ( ( rx_byte == CNDI ) || ( rx_byte == CNAM ) )
				{
					io_cid_ptr = io_dce_buf ;
					io_cid_msg_len = 0 ;
					io_cid_checksum = rx_byte ;
					*io_cid_ptr++ = rx_byte ;
					io_cid_state = IO_CID_MSG_LENGTH ; 
				}
				break ;

			case IO_CID_MSG_LENGTH:
				io_cid_checksum = (byte) (io_cid_checksum + rx_byte);
				*io_cid_ptr++ = rx_byte ;
				io_cid_msg_len = (byte) (rx_byte + 1);	// add check sum byte
				io_cid_state = IO_CID_DATA ;
				break ;

			case IO_CID_DATA:
				io_cid_checksum = (byte) (io_cid_checksum + rx_byte);
				*io_cid_ptr++ = (word) rx_byte ;
				if ( --io_cid_msg_len == 0 )	// we got all the data for cid
				{
					if ( S.ModemOptions.CallerId == 1 )	// formated
					{
						if ( io_cid_checksum != 0 )
							return FALSE;
					}

					io_cid_msg_len = (byte) ( io_dce_buf[1] + 3 ) ;
					io_cid_ptr = io_dce_buf ;
					if ( x_modem_mode == MODEM_VOICE )
					{
						io_put_dte_tx_char ( DLE ) ;
						io_put_dte_tx_char ( 'X' ) ;
					}
					x_send_at_io_crlf () ;
					io_process_data() ;
					if ( x_modem_mode == MODEM_VOICE )
					{
						io_put_dte_tx_char ( DLE ) ;
						io_put_dte_tx_char ( '.' ) ;
					}
					return FALSE;
				}
				break ;				// for the data case
		}
	}

	return TRUE;
}
#endif	//CALLER_ID
#endif  // VOICE
