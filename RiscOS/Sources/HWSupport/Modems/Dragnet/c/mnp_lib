/*name and version number:@(#)mnp_lib.c	1.73*/
/*date of get: 		  12/15/00 10:10:42*/
/*date of delta:	  11/30/00 16:59:09*/
/****************************************************************
File :	mnp_lib.c
Description :
	Contains all mnp library functions.

Procedures Contained :
	mnp_init_variables
	mnp_negotiate_params
	mnp_reset_flow_timer
	mnp_flow_timer_expired

Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
#include "z80glob.h"
#include "lapm.h"
#include "mnp.h"

#ifdef CS_DEBUG
 #include "mnp_lib.h"
#endif
#include "allglobs.h"

#if defined(CS_4)
# define Z80_DEBUG_THIS_FILE
#endif //CS_4

/****************************************************************
Routine : mnp_init_variables
Description :
	Initialize all mnp data variables and frames
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
void mnp_init_variables ( void ) 
{

	x_debug_msg("MNP - mnp_init_variables") ;
	lapm_init_variables() ;
	
	/* variables to keep track of frames sent or acknowldeged */
	G(mnp_vs) = 0 ; //number of next lt frame to be built
	G(mnp_ns) = 0 ; //number of last lt frame that was sent
	G(mnp_vr) = 0 ;//number of last received in-sequence lt frame
	G(mnp_vsa) = 0 ;//number of next ln frame to be built
	G(mnp_nsa) = 0 ;//number of next ln frame to be sent
	G(mnp_vra) = 0 ;//number of last received ln frame that was acknowledged
	G(mnp_nra) = 0 ;//number of last ln frame that was received
	G(mnp_rk) = 0 ; //amount of lt frames that can still be received
	G(mnp_nk) = 0 ;//amount of frames that receiver tells sender he can still send
	G(mnp_sk) = 0 ; //amount of frames that sender thinks he can still send
	
	/* mnp operation parameters initialized to our own capabilities */
	G(mnp_framing_mode) = MNP_BIT_MODE ; 

	//limit on outstanding lt frames
	G(mnp_k) = NO_OF_MNP_TRANSMIT_FRAMES ;
	#if defined(Z80_DEBUG_THIS_FILE)
	x_debug_msg("mnp - default lt frames=") ;
	sendHexByte(G(mnp_k)); sendCrLf();
	#endif // Z80_DEBUG_THIS_FILE

	// max frame size being set
	G(mnp_max_info_octets) = G(S).ModemOptions.MNPMaxOctets;
	#if defined(Z80_DEBUG_THIS_FILE)
	x_debug_msg("mnp - default max octets=") ;
	sendHexByte(G(mnp_max_info_octets)); sendCrLf();
	#endif // Z80_DEBUG_THIS_FILE

	G(mnp_data_opt_flag) = TRUE ;
	G(mnp_stream_opt_flag) = TRUE ;
	G(mnp_fixed_field_opt_flag) = TRUE ;
#ifndef NO_MNP5
    if ( ( G(S).ModemOptions.Compression & MNP_COMP ) )
		G(mnp_data_compression) = TRUE ;
	else
#endif
		G(mnp_data_compression) = FALSE ;
	G(mnp_attention_type) = MNP_ATTN_NOD_E ;
	G(mnp_disconnect_code) = 0 ;
	G(mnp_user_disconnect_code) = 0 ;
	G(mnp_retransmit) = 0 ;
	G(mnp_first_lt_flag) = TRUE ;
	G(mnp_last_ack) = 0 ;
	G(mnp_seq_recover_flag) = TRUE ;

	G(mnp_negotiated_mode) = MNP_OCTET_MODE ; //because we always start in OCTET mode

	G(mnp_rx_data_opt_flag) = FALSE;
	G(mnp_rx_stream_opt_flag) = FALSE ;
	G(mnp_rx_fixed_field_opt_flag) = FALSE ;
	G(mnp_rx_data_compression) = FALSE ;
	G(mnp_rx_disconnect_code) = 0 ; 
	G(mnp_rx_user_disconnect_code) = 0 ;
	
	G(mnp_state) = MNP_IDLE ;	
}

/****************************************************************
Routine : mnp_negotiate_params
Description :
	Negotiate parameters for mnp connection.
Parameters in :
	none
Parameters out :
	TRUE - successful negotiation
	FALSE - negotiation fails
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
byte mnp_negotiate_params ( void  )
{
	/* check for constant parameter 1 */
	if ( G(lapm_receive_frame).data[2] != 2 )
	{
		x_debug_msg("MNP - bad const. parm 1") ;
		G(mnp_disconnect_code) = 2; 
		return FALSE ;
	}

	/* check for presence of constant parameter 2 */
	if ( (G(lapm_receive_frame).data[3] != 1) ||
		 (G(lapm_receive_frame).data[4] != 6) )
	{
		if ( G(x_modem_originate) == TRUE )
			G(mnp_disconnect_code) = 3 ;
		x_debug_msg("MNP - bad const. parm 2") ;
		return FALSE ;
	}

	/* negotiate framing mode */
	if ( (G(mnp_rx_framing_mode) != MNP_BIT_MODE) &&
		 (G(mnp_rx_framing_mode) != MNP_OCTET_MODE) )
	{
		if ( G(x_modem_originate) == TRUE )
			G(mnp_disconnect_code) = 3 ;
		x_debug_msg("MNP - bad framing mode parm") ;
		return FALSE ;
	}

	if ( G(mnp_rx_framing_mode) < G(mnp_framing_mode) )
		G(mnp_negotiated_mode) = G(mnp_rx_framing_mode) ;
	else
		G(mnp_negotiated_mode) = G(mnp_framing_mode) ;

	/* negotiate number of outstanding LT frames */
	if ( (G(mnp_rx_k) < 1) || (G(mnp_rx_k) > (MNP_MOD - 1)) )
	{
		if ( G(x_modem_originate) == TRUE )
			G(mnp_disconnect_code) = 3 ;
		x_debug_msg("MNP - bad mnp_k parm") ;
		return FALSE ;
	}

	if ( G(mnp_rx_k) < G(mnp_k) )
		G(mnp_k) = G(mnp_rx_k) ;
	#if defined(Z80_DEBUG_THIS_FILE)
	x_debug_msg("mnp - negot: max lt frames=") ;
	sendHexByte(G(mnp_k)); sendCrLf();
	#endif // Z80_DEBUG_THIS_FILE

	// For Apollo 
	// Do not change the max infomation field length. the thruput
	// is better with 128 length than 64. This seems to be working
	// even if the negotiated length is 64.
#if defined( MODEM_Z80 ) || defined( MODEM_ARM )
	/* negotiate maximum information field length, N401 */
	if ( G(mnp_rx_max_info_octets) < G(mnp_max_info_octets) )
	{
		G(mnp_max_info_octets) = G(mnp_rx_max_info_octets) ;
	}
	#if defined(Z80_DEBUG_THIS_FILE)
	x_debug_msg("mnp - negot: octets=") ;
	sendHexByte(G(mnp_max_info_octets)); sendCrLf();
	#endif // Z80_DEBUG_THIS_FILE
#endif

	/* negotiate the data optimization facilities */
	x_debug_msg("mnp - negot: data_opt_flag=") ;
	if ( G(mnp_rx_data_opt_flag) && G(mnp_data_opt_flag) )
	{
		G(mnp_data_opt_flag) = TRUE ;
		x_debug_msg("TRUE") ;
	}
	else
	{
		G(mnp_data_opt_flag) = FALSE ;
		x_debug_msg("FALSE") ;
	}

	x_debug_msg("mnp - negot: stream_opt_flag=") ;
	if ( G(mnp_rx_stream_opt_flag) && G(mnp_stream_opt_flag) )
	{
		G(mnp_stream_opt_flag) = TRUE ;
		x_debug_msg("TRUE") ;
	}
	else
	{
		G(mnp_stream_opt_flag) = FALSE ;
		x_debug_msg("FALSE") ;
	}

	x_debug_msg("mnp - negot: fixed_fld_opt_flag=") ;
	if ( G(mnp_rx_fixed_field_opt_flag) && G(mnp_fixed_field_opt_flag) )
	{
		G(mnp_fixed_field_opt_flag) = TRUE ;
		x_debug_msg("TRUE") ;
	}
	else
	{
		G(mnp_fixed_field_opt_flag) = FALSE ;
		x_debug_msg("FALSE") ;
	}

#ifndef NO_MNP5
	/* negotiate mnp5 data compression */
	if ( G(mnp_rx_data_compression) && G(mnp_data_compression) )
	{
		G(mnp_data_compression) = TRUE ;
		mnp5_ad_frq_init() ;
		x_debug_msg("mnp - negot: data_compression = TRUE") ;
	}
	else
#endif
	{
		G(mnp_data_compression) = FALSE ;
		x_debug_msg("mnp - negot: data_compression = FALSE") ;
	}
	
	/* determine mnp service in use */
	if ( G(mnp_data_compression) == TRUE )
		G(mnp_negotiated_service) = EC_MNP5 ;
	else if ( (G(mnp_fixed_field_opt_flag)) || (G(mnp_stream_opt_flag)) )
		G(mnp_negotiated_service) = EC_MNP4 ;
	else if ( G(mnp_negotiated_mode) == MNP_BIT_MODE )
		G(mnp_negotiated_service) = EC_MNP3 ;
	else
		G(mnp_negotiated_service) = EC_MNP2 ;
	return TRUE ;
}

/****************************************************************
Routine : mnp_reset_flow_timer
Description :
	reset mnp flow control timer
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
void mnp_reset_flow_timer ( void )
{
	G(mnp_flow_timer) = x_current_time () ;
}

/****************************************************************
Routine : mnp_flow_timer_expired
Description :
	function to check if mnp flow control timer expired
Parameters in :
	the time interval to check
Parameters out :
	TRUE - if timer has expired
	FALSE -	otherwise
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
byte mnp_flow_timer_expired ( word duration )
{
	if ( ( x_elapsed_time ( G(mnp_flow_timer) ) ) >= duration )
		return ( TRUE ) ;
	else
		return ( FALSE ) ;
}

#if !defined(CS_4) && defined(MNP_OFRAMES_BY_REFERENCE)
/****************************************************************
			CALLED WITH INTERRUPTS DISABLED!

Routine : mnp_dual_port_tx 
Description :
	Extension to DSP ISR
	It's an MNP Octet Data Frame with a three word structure
	in the TX DCE Ring Buffer representing the frame.

	Format of the MNP Octet Data Frame "by reference" structure:
		1st wd:		(FLAG  |  count)
		2nd wd:		(   data ptr   )
		3rd wd:		(calculated CRC)

Parameters in :
	firstWord - (global) contains flags and count field from
				MNP Octet framep in TX DCE ring buffer.
Parameters out :
	dp_dsp_tx_ptr - mailbox address (ptr) of next empty cell.
					used to calculate count by calling fcn;
Revision History :
	Initials	Date		Change

			CALLED WITH INTERRUPTS DISABLED!
*****************************************************************/
byte mnp_dual_port_tx ( void )
{
	byte ch, dp_dsp_tx_ptr ;
	extern byte *datap, dp_isr_count ;
	extern word firstWord, *datapp ;

	//------------------------------------------
	// Get the count from the DCE ring buffer.
	//------------------------------------------
	dp_isr_count = (byte) firstWord;

	//------------------------------------------
	// Get the MNP data Frame ptr from DCE ring
	// buffer (must handle end of buffer wrap).
	//------------------------------------------
	datapp = io_dce_tx_rptr+1 ;
	if ( datapp >= io_dce_tx_eptr )
		datapp = io_dce_tx_sptr ;
	datap = (byte *) (*datapp);

	//-------------------------------------------
	// If new frame Send start of frame sequence.
	//-------------------------------------------
	if ( firstWord & HDLC_START_OF_FRAME )
	{
		Z80_Ch0_DMA() ;
		// frame start flag
		DP_INT_REGWRITE( 0x80, SYNC );
		DP_INT_REGWRITE( 0x81, DLE );
		DP_INT_REGWRITE( 0x82, STX );
		dp_dsp_tx_ptr = 0x83;

		// clear flag for "LAPM" layer.
		*(datap-1) = 0;
	}
	else
	{
		dp_dsp_tx_ptr = 0x80;
	}

	//------------------------------------------
	// Copy data into TX Mailbox area (80-8f)
	// (leave room for DLE stuffing)
	//------------------------------------------
	while ( dp_isr_count )
	{
		ch = *datap++;

		DP_INT_REGWRITE( dp_dsp_tx_ptr++, ch ) ;
		dp_isr_count-- ;

		//------------------------------------------
		// perform byte stuffing (DLEs), as required
		//------------------------------------------
		if ( ch == DLE )
		{
			DP_INT_REGWRITE( dp_dsp_tx_ptr++, DLE ) ;
		}

		Z80_Ch0_DMA() ;

		if ( dp_dsp_tx_ptr < 0x8f )
			continue ;

		// mailbox area is full (or 1 byte short of full)
		if ( (dp_dsp_tx_ptr == 0x8f) && dp_isr_count && (*datap != DLE) )
		{
			DP_INT_REGWRITE( dp_dsp_tx_ptr++, *datap++ ) ;
			dp_isr_count-- ;
		}
		break;
	}

	//-----------------------------------------------
	// Done with this frame ??
	// (including room for 4 byte EOF sequence)
	//-----------------------------------------------
	if ( dp_isr_count == 0 )
	{
		if ( dp_dsp_tx_ptr < 0x8d )
		{
			//-----------------------------------------------
			//		Yes ...
			//-----------------------------------------------
			// ..... send 4 byte End of Frame Flag Sequence:
			//		DLE, ETX, CRC Lo, and CRC Hi, 
			// and skip over three word DCE structure
			//-----------------------------------------------
			// frame eof flag
			DP_INT_REGWRITE( dp_dsp_tx_ptr,		DLE );
			DP_INT_REGWRITE( (dp_dsp_tx_ptr+1), ETX );

			//------------------------------------------
			// point to the MNP data Frame's CRC value
			//------------------------------------------
			datapp = datapp+1 ;
			if ( datapp >= io_dce_tx_eptr )
				datapp = io_dce_tx_sptr ;

			// Get CRC (overloading of firstWord
			// variable done for z80 optimization)
			firstWord = *datapp;

			// write CRC lo byte
			DP_INT_REGWRITE( (dp_dsp_tx_ptr+2), (byte)firstWord );
			// write CRC hi byte
			DP_INT_REGWRITE( (dp_dsp_tx_ptr+3), (byte)(firstWord>>8) );
			dp_dsp_tx_ptr += 4;

			//------------------------------------------
			// skip over this framep
			//------------------------------------------
			if ( ++datapp >= io_dce_tx_eptr )
				io_dce_tx_rptr = io_dce_tx_sptr ;
			else
				io_dce_tx_rptr = datapp ;

			//---------------------------------------------
			// Signal lapm task to place another
			// iframep in DCE Ring Buffer.
			// Chk for zero is sanity test - should
			// never happen.
			//---------------------------------------------
			if ( lapm_max_iframes ) lapm_max_iframes -- ;
		}
		else
		{
			//-----------------------------------------------
			// Done, but not enough room for EOF sequence.
			// Count (lower byte) will be zero for next
			// time so only the EOF sequence will be sent
			//---------------------------------------------
			*io_dce_tx_rptr = (word)(MNP_OFRAME_PLACEHLDR);
			*(datapp) = (word)(datap);
		}
	}
	else
	{
		//-----------------------------------------------
		// Still more data in LTF buffer.
		//-----------------------------------------------
		// adjust the count and datap in the
		// three word DCE ring Buffer structure
		// (removing the SOF flag).
		//-----------------------------------------------
		*io_dce_tx_rptr = (word)(MNP_OFRAME_PLACEHLDR | dp_isr_count);
		*(datapp) = (word)(datap);
	}

	return  dp_dsp_tx_ptr ;
}
#endif	// !CS_4 && MNP_OFRAMES_BY_REFERENCE
