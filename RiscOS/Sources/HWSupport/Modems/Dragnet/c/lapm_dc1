/*name and version number:@(#)lapm_dc1.c	1.3*/
/*date of get: 		  09/06/00 16:59:37*/
/*date of delta:	  07/25/00 12:46:43*/
/****************************************************************
File :	lapm_dce.c
Description :
	Contains all non realtime routines in LAPM to transfer data to
	or from DCE.

Procedures Contained :
	lapm_transmit_odp
	lapm_transmit_adp
	lapm_adp_detected
	lapm_odp_detected
	lapm_mnp_lr_detected

Revision History :
	Initials	Date		Change
	J. Xu    	02/09/93	Initial
*****************************************************************/

//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "lapm.h"
#include "ioglob_d.h"
#include "mnp.h"
//msm// #include "z80glob.h"
#include "allglobs.h"

/****************************************************************
Routine : lapm_transmit_odp
Description :
	transmit the ODP sequence to dce
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void lapm_transmit_odp ( void )
{
	byte i, j ;

	if ( io_get_dce_tx_count() < 60 )
		return ;			/* return - fifo is full */

	j = 0 ;
	for ( i = 0 ; i < 10 ; ++i )
	{
		/* LSB is transmitted first - start bit is MSB followed by DC1 */
		G(io_dce_buf) [(0+j)] = HDLC_TX_ANY_CHAR | 0x7f ;	/* start bit */
		G(io_dce_buf) [(1+j)] = HDLC_TX_ANY_CHAR | 0x11 ;	/* DC1 - even parity */
		G(io_dce_buf) [(2+j)] = HDLC_TX_ANY_CHAR | 0xff ;	/* tx marks */
		G(io_dce_buf) [(3+j)] = HDLC_TX_ANY_CHAR | 0x7f ;	/* start bit */
		G(io_dce_buf) [(4+j)] = HDLC_TX_ANY_CHAR | 0x91 ;	/* DC1 - odd parity */
		G(io_dce_buf) [(5+j)] = HDLC_TX_ANY_CHAR | 0xff ;	/* tx marks */
		j = (byte) (j + 6);
	}
	io_write_dce_fifo ( 60, G(io_dce_buf) ) ;
}

/****************************************************************
Routine : lapm_transmit_adp
Description :
	transmit the ADP sequence to dce
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void lapm_transmit_adp ( void )
{
	byte i, j ;

	if ( io_get_dce_tx_count() < 60 )
		return ;			/* return - fifo is full */

	x_debug_msg("LAPM - send ADP");

	j = 0 ;
	for ( i = 0 ; i < 10 ; ++i )
	{
		G(io_dce_buf) [(0+j)] = HDLC_TX_ANY_CHAR | 0x7f ;	/* start bit */
		G(io_dce_buf) [(1+j)] = HDLC_TX_ANY_CHAR | 0x45 ;	/* 'E' */
		G(io_dce_buf) [(2+j)] = HDLC_TX_ANY_CHAR | 0xff ;	/* tx marks */
		G(io_dce_buf) [(3+j)] = HDLC_TX_ANY_CHAR | 0x7f ;	/* start bit */
		G(io_dce_buf) [(4+j)] = HDLC_TX_ANY_CHAR | 0x43 ;	/* 'C' */
		G(io_dce_buf) [(5+j)] = HDLC_TX_ANY_CHAR | 0xff ;	/* tx marks */
		j = (byte) (j + 6);
	}
	io_write_dce_fifo ( 60, G(io_dce_buf) ) ;
}

/****************************************************************
Routine : lapm_adp_detected
Description :
	receive ADP sequence from dce
Parameters in :
	none
Parameters out :
	TRUE - if ADP detected
	FALSE - otherwise
*****************************************************************/
byte lapm_adp_detected ( void )
{
	byte rx_ch ;

	// we look for "ECEC" pattern or hdlc flags
	// if remote is set for reliable mode - no adp negotiation then
	// we start looking for hdlc flags "0x7e"
	// in async mode hdlc flags appear as continuous "~?~?~?"

	while ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) )
	{
		rx_ch = (byte) (*G(io_dce_rx_rptr)++) ;
		if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;
		
		switch ( G(lapm_adp_state) )
		{
			// look for EC (or) hdlc flags
			case LAPM_E1 :
				if ( rx_ch == 'E' )
					G(lapm_adp_state) = LAPM_C1 ;
				else if ( rx_ch == '~' )
					G(lapm_adp_state) = LAPM_ADP_HDLC_FLAG1 ;
				break ;					
			
			case LAPM_C1 :
				if ( rx_ch == 'C' )
					G(lapm_adp_state) = LAPM_E2 ;
				else
					G(lapm_adp_state) = LAPM_E1 ;
				break ;
			
			case LAPM_E2 :
				if ( rx_ch == 'E' )
					G(lapm_adp_state) = LAPM_C2 ;
				else
					G(lapm_adp_state) = LAPM_E1 ;
				break ;
			
			case LAPM_C2 :
				G(lapm_adp_state) = LAPM_E1 ;
				if ( rx_ch == 'C' )
				{
					x_debug_msg ( "lapm - adp detected" ) ;
					return ( TRUE ) ;	// ADP detected
				}
				break ;

			case LAPM_ADP_HDLC_FLAG1 :
				if ( rx_ch == '?' )
					G(lapm_adp_state) = LAPM_ADP_HDLC_FLAG2 ;
				else
					G(lapm_adp_state) = LAPM_E1 ;
				break ;

			case LAPM_ADP_HDLC_FLAG2 :
				if ( rx_ch == '~' )
					G(lapm_adp_state) = LAPM_ADP_HDLC_FLAG3 ;
				else
					G(lapm_adp_state) = LAPM_E1 ;
				break ;

			case LAPM_ADP_HDLC_FLAG3 :
				G(lapm_adp_state) = LAPM_E1 ;
				if ( rx_ch == '?' )
				{
					x_debug_msg ( "lapm - hdlc flags detected" ) ;
					return ( TRUE ) ;	// ADP detected
				}
				break ;

			default :
				G(lapm_adp_state) = LAPM_E1 ;
				break ;					
		}
	}

	return ( FALSE ) ;
}

/****************************************************************
Routine : lapm_odp_detected
Description :
	receive ODP sequence from remote dce in answer mode
Parameters in :
	none
Parameters out :
	TRUE - if ODP detected
	FALSE - otherwise
*****************************************************************/
byte lapm_odp_detected ( void )
{
	byte rx_ch ;

	/* we need to use a different dce buffer read pointer - the
	   dce buffer read pointer will be updated by the mnp function
	   mnp_read_octet_from_dce_buf - we are monitoring in answer mode for
	   the odp pattern or for an mnp link request frame from the remote */

	while ( G(lapm_odp_rptr) != G(io_dce_rx_wptr) )
	{
		rx_ch = (byte) (*G(lapm_odp_rptr)++) ;
		if ( G(lapm_odp_rptr) >= G(io_dce_rx_eptr) )
			G(lapm_odp_rptr) = G(io_dce_rx_sptr) ;
		
		switch ( G(lapm_odp_state) )
		{
			// look for DC1, DC1 (or) hdlc flags
			case LAPM_DC1_EVEN :
				if ( rx_ch == 0x11 )
					G(lapm_odp_state) = LAPM_DC1_ODD ;
				else if ( rx_ch == '~' )
					G(lapm_odp_state) = LAPM_HDLC_FLAG1 ;
				break ;					
			
			case LAPM_DC1_ODD :
				if ( rx_ch == 0x91 )
					G(lapm_odp_state) = LAPM_DC1_EVEN2 ;
				else
					G(lapm_odp_state) = LAPM_DC1_EVEN ;
				break ;

			case LAPM_DC1_EVEN2 :
				G(lapm_odp_state) = LAPM_DC1_EVEN ;
				if ( rx_ch == 0x11 )
				{
					G(lapm_odp_rptr) = G(io_dce_rx_sptr) ;
					return rx_ch;	// ODP detected
				}
				break ;					
			
			case LAPM_HDLC_FLAG1 :
				if ( rx_ch == '?' )
					G(lapm_odp_state) = LAPM_HDLC_FLAG2 ;
				else
					G(lapm_odp_state) = LAPM_DC1_EVEN ;
				break ;
			
			case LAPM_HDLC_FLAG2 :
				G(lapm_odp_state) = LAPM_DC1_EVEN ;
				if ( rx_ch == '~' )
				{
					G(lapm_odp_rptr) = G(io_dce_rx_sptr) ;
					return rx_ch;	// continuous hdlc flags detected
				}
				break ;

			default :
				G(lapm_odp_state) = LAPM_DC1_EVEN ;
				break ;					
		}
	}

	return ( FALSE ) ;
}

/****************************************************************
Routine : lapm_mnp_lr_detected
Description :
	receive MNP link request frame from remote
Parameters in :
	none
Parameters out :
	TRUE - if MNP link request frame detected
	FALSE - otherwise
*****************************************************************/
byte lapm_mnp_lr_detected ( void )
{
	mnp_read_octet_from_dce_buf () ;
	if ( G(lapm_receive_frame).status == FULL )
		return ( TRUE ) ;
	else
		return ( FALSE ) ;
}
