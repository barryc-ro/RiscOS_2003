/*name and version number:@(#)dptest.c	1.297*/
/*date of get: 		  01/12/01 11:49:16*/
/*date of delta:	  01/11/01 13:14:16*/
/****************************************************************
File :	dptest.c
Description :
	Contains all functions related to test for homologation.

Procedures Contained :
	dp_test_cmd
        check_country_block 
        country_block_initialized 

Revision History :
	Initials	Date		Change
*****************************************************************/

#include "llglob_d.h"
#include "dpglob.h"
//msm// #include "z80glob.h"
//msm// #include "z80usb.h"
#include "ioglob_d.h"
#ifdef V34_FAX
# include "faxv34.h"
#endif
#include "allglobs.h"

extern void dp_set_homol_options(void);
extern word at_itoa(word num, byte *str, byte format); //msm//

#if defined(V92_MODEM_ON_HOLD)
extern void dp_modem_on_hold(void);
extern void dp_do_flash(void);
#endif

/*************************************************************************
	This function puts modem in offhook state  
*************************************************************************/
void go_offhook() 
{
	x_output ( IO_DV_RLY_ON ) ;
	x_output ( IO_AC_OH_RLY_ON ) ;
	x_output ( IO_OFF_HOOK ) ;
	G(dp_state) = DP_NULL ;
}

/*************************************************************************
	This function  generates continuous DTMF tones.
*************************************************************************/
void test_dtmf( byte digit )
{
	dp_write_dsp_ram (0x17, 0) ;	// continuous tone
	dp_write_dsp_ram (0x18, 70) ;	// inerdigit delay, default 70
	dp_write_dsp_ram (0x11, G(S).ModemOptions.DtmfLevel) ; // tone1 power 
	dp_write_dsp_ram (0x12,
			  (word)(G(S).ModemOptions.DtmfLevel +
					 G(S).ModemOptions.DtmfToneDiff) ) ;	// tone2 power
	go_offhook() ;
	dp_modem_command ( DTMF_DIALING, digit, 0 ) ;
}
/*************************************************************************/
#if !defined(CS_MODEM)

#if defined( MODEM_Z80 ) && defined( COUNTRY_BLOCKING )
/*************************************************************************
Routine country_block_initialized

This routines checks the checksum of country blocking. The first time
that it is seen the country block bytes are initialized to 0
*************************************************************************/

void country_block_initialized(void)
{
    // country blocks have not been initialized 
    if ( read_eeprom (CHKSUM_C_BLOCK_LOC) != CHKSUM_COUNTRY_BLOCK ) 
    {
         byte index;
         write_eeprom(CHKSUM_C_BLOCK_LOC, CHKSUM_COUNTRY_BLOCK);
         for ( index = START_COUNTRY_BLOCK; index <= END_COUNTRY_BLOCK;
               index++)
             write_eeprom(index,0x00);
    }
  
}
/*************************************************************************
Routine check_country_block

This returns a boolean of true if the country code is blocked
and false if noblocking.
*************************************************************************/
//Check for Country Block 
BOOL check_country_block( word test_val)
{
    BOOL c_block = FALSE;
    byte * ptr1 = "COUNTRY BLOCKED";
    word store_block = 0;  
    word bitShift = 0;

    country_block_initialized();

    // deterimine which storage bit country block flags are in
    if ( (test_val % ONE_WORD) > 0 && 
         (test_val > 0)) 
         store_block = test_val/ONE_WORD; 
    // value is even multiple of 8
    else if (test_val != 0) 
         store_block = (test_val/ONE_WORD) - 1; 

    // range of valid country codes
    // an invalid value will fall through and North America will be
    // initialized
    if (test_val !=0 && test_val <= LAST_COUNTRY)
         bitShift = 1 << ((test_val -1) - ( ONE_WORD * store_block ));

    // Country is a blocked country
    if  (bitShift  & read_eeprom (START_COUNTRY_BLOCK + store_block) )
    {

         c_block = TRUE;                            
         // write blocking condition
         at_output_msg(ptr1, x_strlen(ptr1));

    }
    // Country is not a blocked country
    else
    {
         c_block  = FALSE;
    }
    return (c_block);
}
#endif // MODEM_Z80 && COUNTRY_BLOCKING

/*************************************************************************
	This function generates mark symbols, space symbols, carrier signals
*************************************************************************/
void fax_test_signals(word reg2, word regc)
{
	dp_write_dsp_ram ( 0x080d, 0x00) ;
    if( G( dp_daa_is_perseus ))
    {
	    go_offhook() ;
    }
	dp_download_fax () ;

	dp_write_dsp_ram ( VF_BAUD, 0x0 ) ;       /* clear VF_BAUD(0x82a) */
	dp_write_dsp_ram ( VF_AUTOMODE, 0x0 ) ;   /*clear VF_AUTOMODE(0x828) */

	dp_write_dsp_ram ( 0x0001, 0x00) ;
	dp_write_dsp_ram ( 0x0039, 0x800) ;	/* set DP_RTS to be H_RTS*/
	dp_write_dsp_ram ( 0x003d, SYNC_DATA_MODE ) ;		// sync mode
	G(dp_reg2b) = G(dp_reg2b) | 0x80 ;		// set RTS
	dp_regwrite ( 0x2B, G(dp_reg2b) ) ;	// set RTS for fax originate
	dp_write_dsp_ram ( 0x0002, reg2 ) ;
	dp_write_dsp_ram ( 0x000c, regc ) ;
	dp_write_dsp_ram ( 0x3, G(S).ModemOptions.TxLevel) ;

	dp_modem_command ( STARTUP, ORIGINATE, 0 ) ;

	while ( !( dp_read_dsp_ram ( 0x003a ) & 0x0008 ) );
    if( !G( dp_daa_is_perseus ))
    {
	    go_offhook() ;
    }
}

void test_signals ( byte space, byte originate )
{
	word wd ;

	G(S).ModemOptions.AutoRate = 0 ;
	G(S).ModemOptions.AutoMode = 0 ;
	dp_update_modem_options () ;
	dp_download_V32Turbo ();	// SH 060199: required for v32terbo modes
	if ( space == TRUE )
		dp_write_dsp_ram ( 0x3d, SYNC_DATA_MODE ) ;// sync mode
	else
		dp_write_dsp_ram ( 0x3d, 0x0187 ) ;	// async 8bit mode
	wd = dp_read_dsp_ram(0x080d) & 0x7fff ;	// disable asymetric rate

    if( G( dp_daa_is_perseus ))
    {
	    go_offhook() ;
    }

	if ( wd )
	{
		if ( wd & 0x3000 ) // if V34bis, enable 3429 symbol rate.
		{
			wd |= 0x0800 ; // dsp workaround
			dp_write_dsp_ram ( 0x0823, 0x0400 ) ;
			dp_write_dsp_ram ( 0x0821, 0x0d50 ) ;
		}
		else if ( wd == 0x0001 ) // if 2400 line rate
			dp_write_dsp_ram ( 0x0821, 0x0000 ) ;
		else
			dp_write_dsp_ram ( 0x0823, 0x0100 ) ;	// enable 3200 symbol rate only
		dp_write_dsp_ram ( 0x080d, wd ) ;
		dp_modem_command ( LL_TEST, 0, 0 ) ;
	}
	else
		dp_modem_command ( LL_TEST, originate, 0 ) ;
	while ( !( dp_read_dsp_ram ( 0x003a ) & 0x0008 ) );

	// mah/sam 7/15/98
	// Set DSP receive state to NULL
	// to disable retrain detector.
	dp_write_dsp_ram(0x00cf, 0x1ffd);

    if( !G( dp_daa_is_perseus ))
    {
	    go_offhook() ;
    }
}

/*****************************************************************************
	Function : dp_test_cmd

		This is called as a result of the at%t command.
*****************************************************************************/
word dp_test_cmd ( word test_num, dsp_ram *test_data )
{
#if !defined( CS_4 )

# if defined(MODEM_Z80)
	static byte *bp, test ;
	word wdata;
# endif
	word resp;

	#if defined(TCP_IP)
	//---------------------------------------------------------
	// Call TCP / IP debug utility for cases 400 and above
	//---------------------------------------------------------
	if ( test_num > 399 )
	{
		extern word mn_test_cmd ( word, dsp_ram * );
		return mn_test_cmd( test_num, test_data );
	}
	#endif	// TCP_IP
#else	// CS_4
	word resp;

	//---------------------------------------------------------
	// Call StrongArm debug utility for all but selected cases.
	//---------------------------------------------------------
	if ( (test_num < 23)
		|| ((test_num > 99) && (test_num < 136))
		|| ((test_num > 143) && (test_num != 146)) )
	{
		return sa_test_cmd( test_num, test_data );
	}
	_INT_DISABLE();
		++sa_overridePrnting;
	_INT_ENABLE();
#endif

	resp = 0xffff ;  // default response, asuming valid resonse 
					 // will not match this value
	switch ( test_num )
	{
#if !defined(CS_4)		// {
		case 1 :
			x_output( IO_DSR_ON ) ;
			break ;

		case 2 :
			x_output( IO_DSR_OFF ) ;
			break ;

#if defined(MODEM_Z80) // {
		case 3 :		// Modify Zinger I/O Registers.
			{
				extern void venus_reg_wrt ( byte, byte ) ;
				venus_reg_wrt( (byte)test_data->loc, (byte)test_data->val ) ;
				G(SaveDPState) = TRUE ;
			}
			break ;

		case 4 :		// Print Zinger I/O Registers.
			{
				extern void venus_reg_rd ( byte ) ;
				venus_reg_rd( (byte)test_data->loc ) ;
				G(SaveDPState) = TRUE ;
			}
			break ;
#endif // } MODEM_Z80

#if defined(USB_MODEM)
		case 5 :		// Print Atlas USB Registers.
			{
				byte ndx ;

				ndx = (byte)test_data->loc ;
				if ( !(0 <= ndx && ndx < 8) )
				{
					ndx = 0 ;
				}
				DP_PUTS( "\t\tDISPLAYING EP " ) ;
				sendHexByte( ndx ) ;
				DP_PUTS( "\r\n" ) ;
				usb_reg_display( TRUE, ndx ) ;
			}
			break ;

		case 6 :		// Dump of last Setup Request
			{
				extern byte setupPkt[ 8 ] ;
				DP_PUTS( "Setup Packet = " ) ;
				sendHexByte( setupPkt[ 0 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 1 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 2 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 3 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 4 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 5 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 6 ] ) ; sendDumbChar(' ');
				sendHexByte( setupPkt[ 7 ] ) ; DP_PUTS("\n\r");
			}
			break ;

		case 7 :		// Cause a USB interrupt
			{
				byte sbi, sbie, bit ;

				sbi = input8( SBI_USB ) ;  sbie = input8( SBIE_USB ) ;
				bit = (byte)test_data->loc & 7 ;
				bit = 1 << bit ;
				output8( SBIE_USB, bit ) ; output8( SBI_USB, bit ) ;
				output8( SBI_USB, sbi ) ;  output8( SBIE_USB, sbie ) ;
			}
			break ;

		case 8 :		// go thru reset with lo power mode set
			{
				byte reg ;

				reg = (byte)test_data->loc ;
				DP_PUTS( "Going Down (ndx=" ) ; sendHexByte( reg ) ;
				DP_PUTS( ")\r\n" ) ;

				output8( SCRATCH_USB, (input8( SCRATCH_USB ) & 0x80) | reg ) ;

				//----------------------------------
				// All done. enable sanity timer
				// and wait for the hammer to fall.
				//----------------------------------
				disable_interrupt() ;
				output8( 0xda, 0x41 ) ;
				output8( 0xdb, 0xe5 ) ;
				while ( TRUE )
					;
			}
		case 9 :		// go thru reset with lo power mode set
			DP_PUTS( "Red ON\n\r" ) ;
			RED_ON() ;
			break ;
		case 10 :		// go thru reset with lo power mode set
			DP_PUTS( "Red Off\n\r" ) ;
			RED_OFF() ;
			break ;
		#if defined( ZMODEM_TEST )
		case 11 :		// toggle zmodem test on/off
			{
				void initIt ( void ) ;
				extern BOOL startIt ;

				DP_PUTS( "Toggle Zmodem file test " ) ;
				if ( startIt )
				{
					initIt () ;
					DP_PUTS( "OFF\r\n" ) ;
				}
				else
				{
					startIt = TRUE ;
					DP_PUTS( "ON\r\n" ) ;
				}
				GREEN_OFF() ;
			}
			break ;
		#endif	// ZMODEM_TEST
#endif	// USB_MODEM

		//-------------------------------------------------
		// cases 5 through 18 are available for VENUS
		// (9 through 18 for USB Modem)
		//-------------------------------------------------
#if defined(MODEM_Z80)
		case 19 :	// modified to protect PnP region - rwf
			{
				BOOL country_block = FALSE;
#if defined( COUNTRY_BLOCKING )
				// Check if Country Blocked
				country_block =  check_country_block(test_data->val);
#endif
				if (!country_block)
				{
					wdata = (word)(test_data->loc) + COUNTRY_ID ;
					write_eeprom ( wdata,(byte)test_data->val ) ;
				}

				if ( ( (byte)test_data->val != G(S).ModemOptions.CountryId )
					&& (test_data->loc == 0) && !country_block )
				{
					byte reg1,reg2 ;
					// preserve flow control 
					reg1 = G(S).ModemOptions.FlowControl ;
					reg2 = G(S).ModemOptions.EchoToDTE ;
					G(x_test_mode_on) = FALSE ;
					x_init_modem_options () ;

					ll_save_modem_options () ;
					G(S).ModemOptions.FlowControl = reg1 ;
					G(S).ModemOptions.EchoToDTE = reg2 ;
					x_send_mail ( MC_ONHOOK, DP_TASK, NULL, 0 ) ;
					dp_set_mercury_gain();
#ifdef HOMOL 
					dp_init_blacklist() ;
#endif
                    if( G( dp_daa_is_perseus ))
                    {
				        dp_set_homol_options();//update line conditions
                    }
				}
			}
			break ;

		case 20 :	// modified to protect PnP region - rwf
			wdata = (word)(test_data->loc) + COUNTRY_ID ;
			if ( wdata <= MAX_LOC )
				resp = (word) read_eeprom ( wdata ) ;
			break ;
#endif	// MODEM_Z80

		case 21 :
			if ((byte) test_data->loc > 0)
				*((byte *) &G(S).ModemOptions.CountryId + test_data->loc) = 
											(byte) test_data->val;
			G(x_test_mode_on) = TRUE ;
			x_send_mail ( MC_ONHOOK, DP_TASK, NULL, 0 ) ;
			break ;

		case 22 :
				resp = (word) *((byte *) &G(S).ModemOptions.CountryId + test_data->loc);
			break ;
#endif	// } !CS_4

		/*
		 * 23 - 38 are DTMF tone generation test commands
		 */
		case 23 :	// digit 0
		case 24 :	// digit 1
		case 25 :	// digit 2
		case 26 :	// digit 3
		case 27 :	// digit 4
		case 28 :	// digit 5
		case 29 :	// digit 6
		case 30 :	// digit 7
		case 31 :	// digit 8
		case 32 :	// digit 9
		case 33 :	// digit * 
		case 34 :	// digit #
		case 35 :	// digit A
		case 36 :	// digit B
		case 37 :	// digit C
		case 38 :	// digit D
			test_dtmf ( (byte)(test_num-23) ) ;
			break ;
		/*
		 * 39 - 43 are tone generation test commands
		 */
		case 39 :		// V.25 Answer tone 2100
			dp_write_dsp_ram (0x17, 0 ) ;	// continuous
			dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */
			dp_write_dsp_ram (0x05, F2100S ) ;
			dp_write_dsp_ram (0x06, F2100C ) ;
			go_offhook() ;
			dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
			break ;
		case 40 :		// data calling tone 1300
			dp_write_dsp_ram (0x17, 0 ) ;	// continuous
			dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */
			dp_write_dsp_ram (0x05, F1300S ) ;
			dp_write_dsp_ram (0x06, F1300C ) ;
			go_offhook() ;
			dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
			break ;
		case 41 :		// fax calling tone 1100
			dp_write_dsp_ram (0x17, 0 ) ;	// continuous
			dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */
			dp_write_dsp_ram (0x05, F1100S ) ;
			dp_write_dsp_ram (0x06, F1100C ) ;
			go_offhook() ;
			dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
			break ;
		case 42 :		// Guard tone 1800
			dp_write_dsp_ram (0x17, 0 ) ;	// continuous
			dp_write_dsp_ram (0x11, G(S).ModemOptions.TxLevel) ; /* tone power */
			dp_write_dsp_ram (0x05, F1800S ) ;
			dp_write_dsp_ram (0x06, F1800C ) ;
			go_offhook() ;
			dp_modem_command ( GENERATE_TONES, 1, 0 ) ;
			break ;
#ifdef V34_FAX
		case 73:  // V.34 FAX ANSam signalling
			G(x_fax_v34mode) = V34_SOURCE;
			G(x_fax_maxp) = 12;	            // default to 28.8K
			G(x_fax_minp) = 0;
			G(x_fax_prefc) = 0;
			dp_write_dsp_ram (0x1fd9, 0x0);	// detect ANSam mode
			dp_v34fax_ans ();					      // start v34 answer

			{
				word wait = x_current_time ();

				while (x_elapsed_time (wait) < 5000)  // Wait up to 5 seconds
				{
					if (dp_read_dsp_ram (0x80) == 0x5AF5)  // DSP in correct state yet?
					{
						G(dp_state) = DP_V34FAX_TEST_ANSam;  // Monitor DSP RAM 0xB7 (V25_counter)
						break;
					}
				}
			}

			break;
#endif
		case 74:  // V.17 7200 signalling
			fax_test_signals (0, V17_FAX_7200);
			break;
		case 75:  // V.17 9600 signalling
			fax_test_signals (0, V17_FAX_9600);
			break;
		case 76 :	// v.27 2400 signalling
			fax_test_signals ( FAX_2400, 0 ) ;
			break ;
		case 77 :	// v.27ter 4800 signalling
			fax_test_signals ( FAX_4800, 0 ) ;
			break ;
		case 78 :	// v.29 7200 signalling
			fax_test_signals ( FAX_7200, 0 ) ;
			break ;
		case 79 :	// v.29 9600 signalling
			fax_test_signals ( FAX_9600, 0 ) ;
			break ;
		case 80 :	// v.17 12000 signalling
			fax_test_signals ( 0, V17_FAX_12000 ) ;
			break ;
		case 81 :	// v.17 14400 signalling
			fax_test_signals ( 0, V17_FAX_14400 ) ;
			break ;
		case 82 :	// unconditional off-hook 
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
			if ( G(x_modem_mode) != MODEM_SPEAKER_PHONE )
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
			{
				if ( G(S).ModemOptions.SpeakerVolume == 3 )
					x_output ( IO_SPEAKER_HIGH ) ;
				else if ( G(S).ModemOptions.SpeakerVolume == 2 )
					x_output ( IO_SPEAKER_MEDIUM ) ;
				else
					x_output ( IO_SPEAKER_LOW ) ;
				if ( G(S).ModemOptions.SpeakerControl )
					x_output ( IO_SPEAKER_ON ) ;
			}
			go_offhook() ;
			break ;
#ifdef VOICE
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
		case 84 :	// Speakerphone Mic gain & muting adjustment 
			if ( test_data->loc == 0 ) 
				resp = G(S).ModemOptions.SpeakerphoneMicGain ;
			else
			{
				G(S).ModemOptions.SpeakerphoneMicGain = test_data->loc ;
				G(S).ModemOptions.SpeakerphoneMicMute = test_data->val ;
				if ( G(x_modem_mode) == MODEM_SPEAKER_PHONE )
				{
					dp_write_dsp_ram ( MIC_GAIN_ADDR, G(S).ModemOptions.SpeakerphoneMicGain ) ;
					dp_set_speakerphone_gain () ;
				}
			}
			break ;
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
#endif
#if defined( MODEM_Z80 )
		case 88 :	// for support of PnP
			write_eeprom ((word) test_data->loc, (byte) test_data->val);
			G(x_test_mode_on) = FALSE ;
			break ;
		case 89 :	// for support of PnP
			if ((word) test_data->loc <= MAX_LOC)
				resp = (word) read_eeprom ((word) test_data->loc);
			G(x_test_mode_on) = FALSE ;
			break ;
#endif
		case 90 :	// originate signalling
			test_signals ( FALSE, TRUE ) ;
			break ;
		case 91 :	// answer signalling
			test_signals ( FALSE, FALSE ) ;
			break ;
		case 92 :	// originate space signalling
			test_signals ( TRUE, TRUE ) ;
			break ;
		case 93 :	// answer space signalling
			test_signals ( TRUE, FALSE ) ;
			break ;
#if defined(DP_BASHER_TEST)
		case 99:
		{
			extern void dp_basher_start(void);

			// enable/disable basher test:  1-enable
			G(dp_basher_test_enabled) = (byte)(test_data->loc && 1);

			if ( G(dp_basher_test_enabled) )
			{
				dp_basher_start();
			}
			else
			{
				dp_async_user_mode();		// back to async mode
			}
		}
		break;
#endif // DP_BASHER_TEST
#if defined( MODEM_Z80 )
		case 100 :		// hex dump of 0x80 bytes of memory at loc
			test = 1;
			goto doit;
		case 101 :		// hex dump of Next 0x80 bytes of memory
			test = 6;
			goto doit;
		case 103 :		// hex dump of 80 bytes of serial eeprom
			test = 2;
			goto doit;
		case 115 :		// Change ROM to 2 Wait States
			test = 5;
			goto doit;
#endif
#if defined( Z80_DEBUG_PRINT )
#if defined( MODEM_Z80 )
		case 110 :		// hex dump of next 0x80 bytes of memory
						// to debug terminal
			test = 3;
			goto doit;
		case 111 :		// hex dump of next 0x80 bytes of memory
						// to debug terminal
			{
				word cnt = test_data->val ;
				while ( cnt >= 0x80 )
				{
					resp = z80_memory ( 3, test_data ) ;
					test_data->loc += 0x80 ;
					cnt -= 0x80 ;
				}
			}
		break ;
#endif
#if !defined( CS_4 )
		case 112:
		{
			// enable/disable debug printing heading to DTE:  1-enable
			G(venusDebugToDTE) = (byte) test_data->loc;
		}
		break;
#endif

#if defined( ROM_FLASH ) && !defined(HOMOL)
		case 121 :		// hex dump of next 0x20 bytes of ROM
						// to debug terminal
			{
				extern non_banked void ddgets_24 ( long ) ;
				long adr24 ;

				adr24 = (test_data->loc & 0xff) << 16 ; // bank
				adr24 += test_data->val ;				// loc

				ddgets_24( adr24 ) ;
			}
			break ;
		case 122 :		// dump of first sector parameters
						// for ROM resident Flash Loader
			{
				extern non_banked void z80_sector1 ( void ) ;

				z80_sector1() ;
			}
			break ;
#endif  // ROM_FLASH && !HOMOL

	// display multiple dsp ram locations
#if defined(Z80_DEBUG_PRINT)
	case 136:
	{
		x_send_mail(IO_DUMP_DSP_MEM, IO_TASK,
					(byte *) test_data, sizeof(dsp_ram));
	}
	break;

	// display dsp registers
	case 137:
	{
		extern word at_itoa( word num, byte *str, byte format);

		byte i;
		byte msg[80];
		word regValue;

		for (i=0; i<9; i++)
		{
			regValue = dp_dsp_int_regread(i);
			msg[0] = (byte) (i + '0');
			msg[1] = ' ';
			msg[2] = '=';
			msg[3] = ' ';
			regValue = at_itoa(regValue, &msg[4], HEX);
			msg[regValue + 4] = 0;
			ddputs((char *)msg); //msm//
		}
	}
	break;
#endif // Z80_DEBUG_PRINT

	case 138: //set the DSP clock speed on the fly.
	{			
		byte Pram34,Pram35;
		word Value ;
		Value= test_data->loc;
		Pram34=(byte)Value;
		Pram35=(byte)(Value>>8);

		DP_PUTS("writing pllc to ");
		dp_puts_hex(Value);
		sendCrLf();
		dp_modem_command_long(0x2e, 0x01, Pram35, Pram34, 0); // pllc=0xXXXX
		x_sleep(30); //allow some time to stabilize
	}
	break ;

	case 139: //write to arbitary "dsp" register using dp_dsp_int_regwrite()
	{			
		DP_PUTS("dp_dsp_int_regwrite(");
		dp_puts_hex(test_data->loc);
		DP_PUTS(", ");
		dp_puts_hex(test_data->val);
		DP_PUTS(");\n\r");
		dp_dsp_int_regwrite((byte) test_data->loc, test_data->val);
	}
	break ;

#if defined(VPCM_CLIENT)
	case 140 :
		G(vpcm_v92_status) = 0x70;	// enable pcm upstream, start phase 2, v92 capability ( bits 4,5,6 in dsp ram 0x1ff2 )
	break ;
	case 141 :
		G(vpcm_v92_status) = 0x10;	// enable pcm upstream ( bit 4 in dsp ram 0x1ff2 )
	break ;
	case 142 :
		G(vpcm_v92_status) = 0x20;	// enable short phase 2 ( bit 5 in dsp ram 0x1ff2 )
	break ;
	case 143 :
		G(vpcm_v92_status) = 0x40;	// enable v92 capability ( bit 6 in dsp ram 0x1ff2 )
	break ;
#endif	// V92 && VPCM_CLIENT

#if defined(MODEM_Z80) && defined(VENUS2)
	case 144:
		// put venus2 into legacy mode
		DP_PUTS("Setting Venus2 to legacy mode ");
		output8(0xdc, 0x10);
		DP_PUTS("after legacy mode ");
		break;
	case 145:
		// put venus2 into turbo mode
		DP_PUTS("Setting Venus2 to turbo mode ");
		output8(0xdc, 0x0);		// mah 5/4/99 - used to be 0x40 for debug
		DP_PUTS("after turbo mode ");
		break;
#endif // VENUS2

#if defined(Z80_DEBUG_PRINT)
	case 146:
		// Select stuff for vconstel rightmost window
		// By default, this window displays timing recovery
		// information.  It can optionally display
		// the transmit constellation or a series of DPRAM
		// locations.
		switch (test_data->loc)
		{
		case 0:
			G(dp_vc_right).mode = 0;	// default - timing recovery
			break;
		case 1:
			G(dp_vc_right).mode = 1;	// transmit constellation
			break;
		case 2:
			G(dp_vc_right).mode = 2;	// RAM values (skip every other loc)
			G(dp_vc_right).len = test_data->val;	// number of locs
			G(dp_vc_right).start = 0x535;
			G(dp_vc_right).current = G(dp_vc_right).start;
			break;
		case 3:
			G(dp_vc_right).mode = 2;	// RAM values (skip every other loc)
			G(dp_vc_right).start = test_data->val;
			G(dp_vc_right).current = G(dp_vc_right).start;
			break;
		}
		break;
#if defined(MODEM_Z80) && !defined(CS_DIGITAL)
	case 148:
	{
		// samples in test code.  Get RAW samples from CODEC.
		extern void dpsamin(dsp_ram *test_data);
		dpsamin(test_data);
	}
	break;
#endif
#endif  // Z80_DEBUG_PRINT

#if defined(MODEM_Z80)
	case 147:
		// halt so that Zinger won't be messing with things
		disable_interrupt();
		sleep();					// put Zinger into sleep mode
		enable_interrupt();
		break;
#endif

#if defined(V34_FAX)
	case 149:	// reset the DP...this is a debug thing to help
				// with reseting the DSP between calls
			x_send_mail( DP_RESUME, DP_TASK, NULL, 0 );
	break;
#endif // V34_FAX

	case 150: // enable perseus clk and psd circuit
		x_debug_msg("PSD enabled ");
		dp_modem_command(GOTO_CMD,PERSEUS_BASE,PERSEUS_RING_EN);// enable ring detection
		dp_modem_command ( GOTO_CMD, PERSEUS_BASE, PERSEUS_PSD_EN ) ; // enable parallel set detection
		if (test_data->loc) x_sleep(test_data->loc);
		dp_modem_command ( GOTO_CMD, PERSEUS_BASE, PERSEUS_PSD_DIS ) ; // disable parallel set detection
		if (test_data->val) x_sleep(test_data->val);
		sendHexWord(dp_read_dsp_ram(0x19f2));
		dp_modem_command ( GOTO_CMD, PERSEUS_BASE, PERSEUS_PSD_EN ) ; // enable parallel set detection
		break;
	case 151: // disable psd circuit
		x_debug_msg("PSD disabled ");
		dp_modem_command ( GOTO_CMD, PERSEUS_BASE, PERSEUS_PSD_DIS ) ; // disable parallel set detection
		break;
	case 152:
		{
			word current, voltage1, voltage2;
			byte msg[4], i ;

			current = dp_read_dsp_ram(0x1a05) ; // dc_loop_out_val
			for (i=0; i <10; i++) current = (current + dp_read_dsp_ram(0x1a05) ) /2 ;
			current = (current >> 7) + 10 ;
			voltage1 = (current * 22 + 350)/100 ;
			voltage2 = (current * 22 + 350) - (100*voltage1) ;
			at_itoa(current, msg, DECIMAL);
			x_send_mail( AT_IO_DATA, IO_TASK,(byte *)"Current: ", 9); //msm//
			x_send_mail( AT_IO_DATA, IO_TASK,msg, x_strlen(msg) );
			x_send_mail( AT_IO_DATA, IO_TASK,(byte *)" ma ", 4); //msm//
			x_send_mail( AT_IO_DATA, IO_TASK,(byte *)"Voltage: ", 9); //msm//
			at_itoa(voltage1, msg, DECIMAL);
			x_send_mail( AT_IO_DATA, IO_TASK,msg, x_strlen(msg) );
			x_send_mail( AT_IO_DATA, IO_TASK,(byte *)".", 1); //msm//
			at_itoa(voltage2, msg, DECIMAL);
			x_send_mail( AT_IO_DATA, IO_TASK,msg, x_strlen(msg) );
			x_send_mail( AT_IO_DATA, IO_TASK,(byte *)" v ", 3); //msm//
		}
		break ;

#if defined( MODEM_Z80 )
#if !defined(EXT_MODEM) && !defined(USB_MODEM) && !defined(THUNDER)
		case 113 :		// Print MIMIC Registers.
			{
				extern void mimic_reg_display ( void ) ;
				mimic_reg_display() ;
				G(SaveDPState) = TRUE ;
			}
			break ;
		case 114 :		// Set MIMIC Registers.
			{
				extern void mimic_reg_set ( byte, byte ) ;
				mimic_reg_set( (byte)test_data->loc,
									(byte)test_data->val ) ;
				G(SaveDPState) = TRUE ;
			}
			break ;
#endif  // !EXT_MODEM && !USB_MODEM
#endif  // MODEM_Z80
#endif // DEBUG_PRINT

#if defined( MODEM_Z80 )
		case 102 :		// hex dump of next 0x80 bytes of memory
						// or serial eeprom
			bp  += 0x80 ;
			test_data->loc  = (word)bp ;
			// falls thru
		doit:
			resp = z80_memory ( test, test_data ) ;
			bp = (byte *)test_data->loc ;
			G(SaveDPState) = TRUE ;
			break ;
#endif // MODEM_Z80

#if defined(V44)
		case 160:
			v44_display();
			break;
#endif // V44

	}
#if defined(CS_4)
	_INT_DISABLE();
		if (sa_overridePrnting) --sa_overridePrnting;
	_INT_ENABLE();
#endif // CS_4

	return resp;
}

#if defined(DP_BASHER_TEST)
extern word at_itoa( word num, byte *str, byte format);

// start the basher test
void dp_basher_start(void)
{
	char buf[140];
	word x;

	G(dp_basher_reportTime) = x_current_time();
	G(dp_basher_framesTransmitted) = G(dp_basher_framesReceived) =
		G(dp_basher_sendSeq) = G(dp_basher_rcvSeq) = 0;
	G(dp_basher_totErrors) = G(dp_basher_errors) = 0;
	G(dp_basher_totSeconds) = 0;
	G(dp_basher_frameLength) = 126;
	if (G(S).ModemOptions.Dummy20)
		G(dp_basher_frameLength) = G(S).ModemOptions.Dummy20;
	dp_hdlc_mode();				// go to hdlc mode

	x_send_at_io_data("\n\r\n\rStarting basher: transmit frame len=");
	x = at_itoa(G(dp_basher_frameLength), buf, DECIMAL);
	buf[x] = 0;
	x_send_at_io_data(buf);
	x_send_at_io_crlf();
}

// background processing when basher test is in progress
void dp_basher_test(void)
{
	byte c;
	char buf[140];
	word dceBuf[21], *pB;

	// see if it's time for reporting
	// if so, send report to DTE.
	if ( x_elapsed_time( G(dp_basher_reportTime) ) >= SECOND5 )
	{
		word x;

		x_send_at_io_data("basher: s=");
		G(dp_basher_totSeconds) += 5;				// elapsed time
		x = at_itoa(G(dp_basher_totSeconds), buf, DECIMAL);
		buf[x] = 0;
		x_send_at_io_data(buf);

		if (G(dp_basher_framesTransmitted))
		{
			x_send_at_io_data(" TxFrms=");
			x = at_itoa(G(dp_basher_framesTransmitted), buf, DECIMAL);
			buf[x] = 0;
			x_send_at_io_data(buf);
		}
		if (G(dp_basher_framesReceived))
		{
			x_send_at_io_data(", RxFrms=");
			x = at_itoa(G(dp_basher_framesReceived), buf, DECIMAL);
			buf[x] = 0;
			x_send_at_io_data(buf);
		}
		if (G(dp_basher_errors))
		{
			x_send_at_io_data(" ****** RxErrs=");
			x = at_itoa(G(dp_basher_errors), buf, DECIMAL);
			buf[x] = 0;
			x_send_at_io_data(buf);
			G(dp_basher_totErrors) += G(dp_basher_errors);
		}
		if (G(dp_basher_totErrors))
		{
			x_send_at_io_data(", TotErrs=");
			x = at_itoa(G(dp_basher_totErrors), buf, DECIMAL);
			buf[x] = 0;
			x_send_at_io_data(buf);
		}
		x_send_at_io_crlf();
		
		G(dp_basher_framesReceived) = G(dp_basher_framesTransmitted) = 0;
		G(dp_basher_errors) = 0;
		G(dp_basher_reportTime) = x_current_time();
	}

	// RECEIVE:
	// take chars out of receive buffer
	// count frames and errors
	while (io_get_dce_rx_count())
	{
		c = io_read_dce_fifo(20, dceBuf);
		pB = dceBuf;
		while (c--)
		{
			if (*pB & HDLC_END_OF_FRAME)
			{
				G(dp_basher_framesReceived)++;
				if (*pB & HDLC_CRC_ERROR)
				{
					G(dp_basher_errors)++;
				}
			}
			pB++;
		}
	}

	// TRANSMIT:
	// If there is room in our transmit queue
	// send more frames.
	while (io_get_dce_tx_count() > G(dp_basher_frameLength))
	{
		buf[0] = G(dp_basher_sendSeq)++;
		io_tx_hdlc_frame(G(dp_basher_frameLength), buf);
		G(dp_basher_framesTransmitted)++;
	}
}
#endif // DP_BASHER_TEST
#endif	// CS_MODEM
