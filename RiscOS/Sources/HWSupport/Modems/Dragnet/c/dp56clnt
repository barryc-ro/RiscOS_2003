/*name and version number:@(#)dp56clnt.c	1.52*/
/*date of get: 		  12/15/00 10:10:44*/
/*date of delta:	  11/29/00 10:17:30*/
/****************************************************************
File :	dp56clnt.c
Description :
	V.90/V.92 client VENUS data pump interface.

*****************************************************************/

/****************************************************************
List of V.90 client files:

DPDL56V0 C          download function, includes dp56vd0/dp56ve0 (first array)
DPDL56V1 C          includes dp56vd1/dp56ve1 const (second array)
DPDL56V2 C          includes dp56vd2/dp56ve2 const (third array)
DP56CLNT C          client code
DP56K1   C          other client code
DP56KV   C          shared client/server code

vpcm     c		v.90 setup, etc. (shared client/server)
cpcptini c		slicer tables
vpcmcnst c		slicer tables - calculate constellation
vpgetgn  c		slicer tables - figure out gain, rbs, A-law, etc.
vp_slice c		slicer tables - startup and retrain
*****************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "atglob.h"
#include "dpglob.h"
#include "z80glob.h"
#include "sync.h"
#include "lapm.h"
#include "allglobs.h"

#define AD24(x)	(address_24_of(x))


/**************************************************************************
	Function declarations
***************************************************************************/
extern void vp_initiate_fast_retrain();
extern byte vp_jd_maxRate(byte maxRate);
extern void vp_free_mem( void );
extern void dp_56k_connect(void);
extern void dp_56k_v34_mode(void);
extern non_banked void lapm_reset_timer ( void ) ;
extern void dp_56k_data_mode(void);
extern void dp_56k_v34_training_state(void);
extern void dp_56k_setFill(byte);
extern byte lapm_disconnecting(void);
extern byte dp_recent_call_waiting(void);
extern word dp_check_call_waiting(word ram3a);
extern void dp_call_waiting(void);
extern byte vp_slice();


#if defined(VPCM_CLIENT)

/****************************************************************
Routine : dp_restore_v34_dsp_ram (client)
		  Restore RAM locations.
*****************************************************************/
void dp_restore_v34_dsp_ram(void)
{
	dp_write_dsp_ram(MSE_SCALE, V34_MSE_SCALE); // BER threshold for v34

	// restore the v.34 transmit level
	dp_transmit_level(G(S).ModemOptions.TxLevel);

	// clear bit 5 - transmit slave timing - not used in normal v.34
	dp_write_dsp_ram(0x38, (word) (0xdf & dp_read_dsp_ram(0x38)));
}

/****************************************************************
Routine : dp_restore_v34_mode_and_state (client)
		  take care of 56k fallback to v.34
*****************************************************************/
void dp_restore_v34_mode_and_state(void)
{
	byte oldFill = G(DpIdleFillChar);

	dp_56k_setFill(oldFill);
	dp_56k_v34_mode();
	x_set_current_time(&G(dp_long_timer));
	G(dp_timer1) = G(dp_timer) = x_current_time();

	dp_56k_v34_training_state();

	// fix bug where sometimes INFO0 receive bit 12
	// was wrong on fallback.
	dp_write_dsp_ram(0x802, (word) (0xefff & dp_read_dsp_ram(0x802)));
}

/****************************************************************
Routine : dp_vpcm_restore_v34 (client)
		  take care of 56k fallback to v.34
*****************************************************************/
void dp_vpcm_restore_v34(void)
{
	x_debug_msg("dp_vpcm_restore_v34()");
	dp_restore_v34_dsp_ram();
	dp_restore_v34_mode_and_state();
}
/****************************************************************
Routine : dp_vpcm_mse_check (client)
*****************************************************************/
byte dp_vpcm_mse_check(void)
{
	if (x_elapsed_time(vpcm_mse_check_timer) < MS30)
		return FALSE;

	vpcm_mse_check_timer = x_current_time();

	dp_56k_data_mode();
	
	if (vpcm_bad_mse)
		return TRUE;

	return FALSE;
}

/****************************************************************
Routine : dp_v90_bad_sec()

	The last second had errors in it.  The V.90 connection
	wasn't perfect.  This routine notes that so we don't
	try to fall forward in the very near future.
*****************************************************************/
void dp_v90_bad_sec(void)
{
	if (dp_v90_ff.perfection < 120)
		dp_v90_ff.perfection += 3;	// perfection is a little harder to attain

	if (dp_v90_ff.secs < (255-dp_v90_ff.perfection))
		dp_v90_ff.secs += dp_v90_ff.perfection;
	else
		dp_v90_ff.secs = 255;	// pegged at 255
}

/****************************************************************
Routine : dp_56k_startup_cmd - client.  Called for V.90.
*****************************************************************/
void dp_56k_startup_cmd(void)
{
	word dp_old_x_line_rate;

	x_debug_msg("dp_56k_startup_cmd()");

	// set up the fallback v.34 rate
	if ( G(x_line_rate) == MR_33600 )
		G(x_line_rate) = MR_31200 ;

	dp_old_x_line_rate = (word) ((G(x_line_rate) - 4) << 2);
	dp_write_dsp_ram(MP_tx1, dp_old_x_line_rate);
	dp_write_dsp_ram(DP_V34_SYMBOLRATE, 0x0fff);	// symbol rate
	G(V34Mode) = 0;
	G(lastRetrain) = 0;
	dp_v90_ff.secs = 15;		// first time perfection
	dp_v90_ff.perfection = 20;	// normal perfect time for FF
}

extern byte dp_56k_retrain_cmd(byte originator);

/****************************************************************
Routine : dp_56k_fallback (client)
		  take care of K56/V.90 fallback to v.34
*****************************************************************/
void dp_56k_fallback(void)
{
#if defined(CALL_WAITING)
	// in a v.90 call waiting situation, we don't
	// fallback to v.34 if a call waiting tone has
	// recently been issued.
	if (G(vpcm_mode))
	{
		if (dp_recent_call_waiting())
		{
			byte userRetrain = G(dp_56k_user_retrain);	// save for later

			x_debug_msg("dp_56k_fallback() - recent call waiting - try v.90");
			G(vpcm_call_waiting) = 0;	// avoid infinite recursion
			dp_56k_retrain_cmd(0x11);
			G(dp_56k_user_retrain) = userRetrain;
			return;
		}
	}
#endif // CALL_WAITING

	x_debug_msg("dp_56k_fallback() - to V.34");

	// fine tune the echo cancellers ( system delay ) for v34 and u-test
	dp_write_dsp_ram(0x0ee4, 0x00ab);
	dp_write_dsp_ram(0x0ee5, 0xffab);

	dp_restore_v34_dsp_ram();

#if !defined(DRAGNET2)	// no map switching on DRAGNET2
	if (VENUS_BASE_MAP)
	{
		x_debug_msg("already in map 1a");

		dp_write_dsp_ram(KfEnable, 0);	//0x1ff1=0 means V.34

		// Joe said the dsp will ignore this retrain cmd if the dsp is
		// not in data mode
		dp_modem_command(RETRAIN, 0, 0);
	}
	else
#endif
	{
		G(vpcm_datamode) = 0;
		dp_write_dsp_ram(PcmV_Version, 0);
		dp_write_dsp_ram(KfEnable, 0);	//0x1ff1=0 means V.34
#if defined(DRAGNET2)
		dp_modem_command(GOTO_CMD,
						 VPCM_GOTO_ROM_ADRH,
						 VPCM_GOTO_ROM_ADRL);
#else
		dp_modem_command(RETRAIN, 0, 0);
#endif
	}

	x_sleep(MS50);		// (client)

	if (!dp_read_dsp_ram(S_PTR))
		x_debug_msg("0080 = 0, dead dsp");

	dp_restore_v34_mode_and_state();
}

/****************************************************************
Routine : dp_56k_retrain_detect()
   check for remote retrains and respond accordingly
*****************************************************************/
byte dp_k56_retrain_detect(void)
{
	word r;

	if (x_elapsed_time(G(dp_timer)) < MS10)
		return FALSE;
    
    if( G( dp_daa_is_perseus ))
    {
	    // check if parallel set has gone offhook
	    if (dp_read_dsp_ram(0x19f2) < 0x0800)
	    {
		    x_debug_msg("PSD offhook:dc_filt_out=");
		    sendHexWord(dp_read_dsp_ram(0x19f2));sendCrLf();
		    G(dp_state) = DP_CALL_FAILURE;
		    G(x_status).ud_TerminationCause = UD_TC_NO_CARRIER;
		    G(x_dial_residual) = MR_CD_DISCONNECT;
		    G(x_status).TerminationCause = 1;	// remote terminate
		    return TRUE;
	    }
    }

	G(dp_timer) = x_current_time();

	r = dp_read_dsp_ram(DSP_STATUS_RAM);

#if defined(CALL_WAITING) && defined(COMPRESS_TABLES)
	if (G(dp_CallWaitingEnable) != 2)
	{
		// V.90 call waiting detection
		r = dp_check_call_waiting(r);	// check, reset bit, return modified 3a
	}
#endif // CALL_WAITING && COMPRESS_TABLES

	// Check for retrain or rate reneg.
	// Use RAM location because sometimes it seems
	// CAMIL register 0x32 isn't being updated correctly.
	if (r & 6)
	{
		// clear retrain and startup bits to avoid rolling retrains.
		dp_write_dsp_ram(DSP_STATUS_RAM, (word) (r & ~0x0006));

		// fast rate renegotiation ?
		if (0x8000 & dp_read_dsp_ram(0x20c7))
		{
			x_debug_msg("v90-rate reneg detected");
			G(dp_timer1) = G(dp_timer);	// current time from above
			G(k56_timer) = G(dp_timer);
			G(lastRetrain) = 0x12;
			REMOTE_RR_INCREMENT;

			G(dp_56k_state) = VPCM_WAIT_FOR_PHASE3 ;
			dp_write_dsp_ram(0x1ff0, 0);			//Host_flg

			// if we're about to do a fallforward (rate reneg) then
			// we'll just do it here as long as the upstream guy has
			// decided to be so kind.
			if (dp_v90_ff.secs < 3)
			{
				byte rate = (byte) G(x_line_rate) - (MRV_28000 - 1);

				G(dp_pcm_max_rate) = vp_jd_maxRate((byte) (rate + 1));
				if (G(dp_pcm_max_rate) > rate)
				{
					x_debug_msg("go with the flow.  fall forward.");
					dp_v90_ff.secs = 0;
					vp_initiate_fast_retrain();
				}
			}
		}
		else
		{
			// if not fast rate change assume it's a retrain
			x_debug_msg("v90-retrain detected");

			// adjust counters
			REMOTE_RET_INCREMENT;
			dp_56k_retrain_cmd(1);		// k56 retrain
			--G(x_status).LocalRetrain;	// false count in dp_56k_retrain_cmd
		}
		G(dp_56k_user_retrain) = 0;	// no connect message

		return TRUE;
	}

	return FALSE;
}

/****************************************************************
Routine : dp_56k_data_mode - client
		  client checks to make sure everything's ok
*****************************************************************/
void dp_56k_data_mode(void)
{
	word temp;
	byte rate = (byte) G(x_line_rate);

	rate -= (MRV_28000 - 1);	// V90/V.92

	if (dp_k56_retrain_detect())
		return;

	// We'll check lapm errors and go to a lower speed if things are
	// bad and we're autorating.
	if ((1 == G(S).ModemOptions.Rate56K) && dp_lapm_error_check() &&
		G(S).ModemOptions.AutoRate)
	{
		if ( ( G(vpcm_mode ) ) && ( rate >= 1 ) )
		{
			// in v90 mode, step down one rate at a time
			G(dp_pcm_max_rate) = (byte) (rate - 1);
			dp_56k_retrain_cmd(0x12);	// rate reneg
			G(dp_56k_user_retrain) = 0;
		}
		else
		{
			// back to V.34
			dp_56k_fallback();
		}

		lapm_reset_timer();
		vpcm_bad_mse = 1;
		return;
	}

	if (dp_56k_state == VPCM_DATA_MODE)
	{
		if (x_elapsed_time(G(k56_timer)) < SECOND1)
			return;

		// if aggressive connection enabled ( S17 ),
		// do 1 fast rate change to step down to normal rate here
		if ( ( rate >= 1 )
			 && ( G(x_status).LocalRR == 0 )
			 && ( G(x_status).LocalRetrain == 0 )
			 && ( G(S).ModemOptions.Aggressive_Connection_Enable == 1)
			 && ( G(vp_initial_connect_msg_done) == 1 ) )
		{
			// for v90 connection only, do auto fast rate change once
			x_debug_msg("vpcm: first rate change");
			G(dp_pcm_max_rate) = rate;
			dp_56k_retrain_cmd(0x12);	// rate reneg
			G(dp_56k_user_retrain) = 0;
		}

		G(k56_timer) = x_current_time();
	}

	G(x_status).NoiseLevel = dp_read_dsp_ram(DP_MSE_LOC);

	// look to see if we've been getting
	// lots of bad CRC's on incoming HDLC packets.
	// This variable is incremented in the DSP interrupt handler.
	if (G(dp_bad_crc_count) > 2)
	{
		if (lapm_disconnecting())
		{
			// Looks like the other side went away.  Hang up.
			x_debug_msg("v90-lapm_disconnecting()");
			x_send_mail(V42_LOCAL_DISC, DP_TASK, NULL, 0);
			return;
		}

		G(dp_count)++;
		x_debug_msg("dp_count++=");dp_puts_dec(G(dp_count));
		x_debug_msg("bad_crc_count=");dp_puts_dec(G(dp_bad_crc_count));
		x_debug_msg("mse=");dp_puts_hex(G(x_status).NoiseLevel);
		sendCrLf();
		dp_v90_bad_sec();

		if (G(dp_count) > 5)
		{
			// looks like something's wrong with the line.
			// We'll retrain or rate reneg down one rate
			// in hopes that things will be better there.
			if (rate >= 1)
			{
				byte retrainCmd = 0x12;	// default - fast rate change

				G(dp_pcm_max_rate) = (byte) (rate - 1);	// down one

				// if MSE has blown up we want to retrain,
				// otherwise fast rate change.  
				if (G(x_status).NoiseLevel > 0x500)
				{
					x_debug_msg("MSE too high - retraining");
					retrainCmd = 0x11;	// retrain
				}

				dp_56k_retrain_cmd(retrainCmd);
				G(dp_56k_user_retrain) = 0;		// no connect msg.
			}
			else
			{
				// No room to fall back in V.90, go back to V.34
				dp_56k_fallback();
			}
			
			lapm_reset_timer();
			vpcm_bad_mse = 1;
			return;
		}
	}
	else if (VPCM_DATA_MODE == G(dp_56k_state))
	{
		// the line looked OK for the last second.
		if ( G(dp_count) != 0 )
		{
			G(dp_count)--;
			x_debug_msg("dp_count--=");sendDecByte(G(dp_count));sendCrLf();
		}
		else if (G(S).ModemOptions.Dummy20 & BIT2) // testing FF S20=4
		{
			// Fall Forward Logic...
			if (0 != dp_v90_ff.secs)
			{
				dp_v90_ff.secs--;	// one second closer to falling forward
#if defined(Z80_DEBUG_PRINT)
				if (0 == dp_v90_ff.secs % 5)
				{
					x_debug_msg(" ff=");
					sendDecByte(G(dp_v90_ff).secs);
				}
#endif // Z80_DEBUG_PRINT
			}
			else if (G(S).ModemOptions.AutoRate &&
					 1 == G(S).ModemOptions.Rate56K &&
					 rate < 20)
			{
				// Try to fall forward one rate if central
				// site will support the higher rate.
				G(dp_pcm_max_rate) = vp_jd_maxRate((byte) (rate + 1));
				if (G(dp_pcm_max_rate) > rate)
				{
					x_debug_msg("\r\ntry FF");
					dp_56k_retrain_cmd(0x12);	// rate reneg
					G(dp_56k_user_retrain) = 0;
				}
			}
		}
	}

	G(dp_bad_crc_count) = 0;

	// Carrier Loss detection
	temp = dp_read_dsp_ram(DP_SIGNAL_LEVEL_LOC);	// receive signal level
	if ((temp >= 0x3000) ||
		(temp < 0x100))
	{
		if ( x_elapsed_time ( G(dp_timer1) ) >=
			 ( 100 * (word)G(S).ModemOptions.NoCarrierDisc ) )
		{
			x_debug_msg("V.90-carrier loss");
			G(dp_state) = DP_CALL_FAILURE;
			G(x_status).ud_TerminationCause = UD_TC_NO_CARRIER;
			G(x_dial_residual) = MR_CD_DISCONNECT;
			G(x_status).TerminationCause = 1;	// remote terminate
			return;
		}
	}
	else
	{
		G(dp_timer1) = x_current_time();
	}
}

/****************************************************************
Routine : dp_vpcm_dsp_timeout

 For V.90 client, check to see if DSP has
 indicated a timeout during startup by setting
 DSP RAM 0x1ff9.  If it does, print the value
 on debug printting, then fall back to V.34.

 Use dp_timer1 to make sure we don't read
 RAM too often.

Return:  TRUE means timeout
*****************************************************************/
byte dp_vpcm_dsp_timeout ( void )
{
	if (x_elapsed_time(G(dp_timer1)) >= MS100)
	{
		word timeout = dp_read_dsp_ram(0x1ff9);

		G(dp_timer1) = x_current_time();

		if (timeout)
		{
			sendCrLf();
			x_debug_msg(" 1ff9=");dp_puts_hex(timeout); sendCrLf();

			// do 1 v90 retrain before fallback to v34
			vpcm_count_1ff9++;
			if ( (6 != dp_read_dsp_ram(0x1ffe)) &&
				 ( vpcm_count_1ff9 < 2 ) && ( timeout != 0xbad )
				 && (G(vpcm_getgain_fail) ==0) )
			{
				// try one more retrain cmd before fallback to v.34
				G(dp_timer) = x_current_time();
				dp_write_dsp_ram(0x1ff9 , 0);
				vp_free_mem();	// free memory used by slicer calculations
				dp_56k_retrain_cmd(0x11);	// retrain
				G(dp_56k_user_retrain) = 0;
				return TRUE;
			}
			else
			{
				x_debug_msg("Fail V90 retrain...V34 ");
				dp_56k_fallback();
				return TRUE;
			}
		}
	}
	return FALSE;
}

/****************************************************************
Routine : dp_56k_background
		  background states
*****************************************************************/
void dp_56k_background ( void )
{
	word temp ;

	DP_CHKDSP();	// When in polled mode - check for DSP I/O

	if (G(dp_56k_state) != VPCM_DATA_MODE)
	{
		// check this timer to drop the call to prevent staying in
		// training forever.
		if ( ( x_elapsed_long_time( G(dp_long_timer) ) >=
			   ( 10 * (word)G(S).ModemOptions.NoAnsTimeOut ) ) )
		{
			x_debug_msg("v90 - Training failure, dp_long_timer expired");
			G(x_status).TerminationCause = 3;	// training failure
			G(dp_state) = DP_CALL_FAILURE;
			G(x_dial_residual) = MR_CD_DISCONNECT;
		}
	}

	switch (G(dp_56k_state))
	{
	default:
		break;
	case VPCM_DATA_MODE :
		// reset the timer when we are in data mode
		x_set_current_time(&G(dp_long_timer));
		dp_56k_data_mode();
		break;

	case VPCM_MONITOR_V8 :
		G(k56_timer) = x_current_time();
		G(dp_56k_state) = VPCM_CK_V8 ;
		break ;

	case VPCM_CK_V8 :
		// extend V8 timer.  When this timer was 5 seconds we would
		// get occassional no connects when V.8 was extended.
		if (x_elapsed_time(G(k56_timer)) >= SECOND15)
		{
			x_debug_msg("dp - CK_V8 timeout. no v34 in v8. status 0x800=");
			sendHexWord(dp_read_dsp_ram(DP_V8_STATUS));sendCrLf();
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
			break;
		}

		if (G(S).ModemOptions.VpcmOption & BIT2)
		{
			// V.92 Phase 1 QC enabled
			x_debug_msg("v90 - V92 P1 QC enabled");
			G(dp_56k_state) = VPCM_CK_V90;
			G(k56_timer) = x_current_time();
			break;
		}

		// If we've fallen back to a real low speed
		// while answering we may already be in data mode before
		// the above timer times out.  If so, get outta' here.
		if (dp_read_dsp_ram(DSP_STATUS_RAM) & 0x0008)		// data mode bit
		{
			x_debug_msg("v90 - already in data mode...");
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
			break;
		}

		// At DSP_oam_1sec we've decided if we're V.34/V.90 or
		// an older modulation.  If we're doing an older
		// one we know we want to go back to the mainline
		// DP code.
		// Need to reset bulk delay for answer mode too,
		// let's use common dsp state ab256 ( ab tone for 256 symbols )
		if (DSP_ab256 == G(dp_s_ptr))
		{
			if (0 == dp_read_dsp_ram(0x0831))
			{
				// make sure we didn't falsely detect v.32
				// we know we can't be v.32 if we've passed
				// v.8bis successfully.
#if defined(V8BIS)
				if (G(product_capabilities))
				{
					dp_write_dsp_ram(0x831, 1);	// overwrite
				}
				else
#endif
				{
					x_debug_msg("v90 - 831==0 means v.32 or below");
					dp_disable_workaround();
					x_sleep(MS10);		// (client)
					// we could be in V32, enable back bulk delay
					dp_write_dsp_ram(0x000C, 0x0);
					dp_56k_v34_mode();
					dp_56k_v34_training_state();
					break;
				}
			}
		}
		if (DSP_o_456ms == G(dp_s_ptr))
		{
			// we are in V22bis/v22
			x_debug_msg("v90 - we got back to v22bis/v22");
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
			break;
		}

		// DSP RAM 0x800 - V.8 status
		temp = dp_read_dsp_ram(DP_V8_STATUS);
		if ( (temp & 0x30) == 0x0010 )
		{
			x_debug_msg("v90 - goto CK_75MS, got v34 in v8 status=");
			dp_puts_hex(temp); sendCrLf();
			
			G(dp_56k_state) = VPCM_CK_75MS;
			G(k56_timer) = x_current_time();
			break;
		}

		break;

	case VPCM_CK_75MS:
		// Here we're looking to see if we're going
		// to V.90 or V.34.  If we're going to V.90
		// we'll find TA_75ms_2 which indicates we've
		// reversed roles (client acting like answerer).

		if (G(vpcm_camode) == 1)
		{
			// Client in calling mode.  (normal path)
			// Look for TC_75ms_2 or timeout indicating V.34.
			// Make sure TC_75ms_2 has been there for at least 30 ms.
			// Anthony says the DSP could be there momentarily even in
			// the V.90 case.
			if (((TC_75ms_2 == G(dp_s_ptr)) &&
				 (x_elapsed_time (G(k56_timer)) > MS30)) ||
				(x_elapsed_time (G(k56_timer)) >= SECOND7))
			{
				if (TC_75ms_2 == G(dp_s_ptr))
					x_debug_msg("v90 - found TC_75ms_2 (V.34)");
				else
					x_debug_msg("v90 - no TA_75ms_2");

				x_debug_msg("KfEnable=");
				sendDecByte((byte) dp_read_dsp_ram(KfEnable));sendCrLf();

				x_debug_msg("No V90, try V34");
				dp_56k_v34_mode();
				dp_56k_v34_training_state();
				break;
			}

			if (TA_75ms_2 == G(dp_s_ptr))	// TA_75ms_2
			{
				x_debug_msg("v90 - caller found TA_75ms_2 (V.90) time=");
				dp_puts_dec(x_elapsed_time(G(k56_timer)));
				sendCrLf();

				G(dp_56k_state) = VPCM_CK_V90;
				G(k56_timer) = x_current_time();
				break;
			}
		}
		else
		{
			// client in answer mode (not the normal path).
			// Look for TA_75ms_2 or timeout indicating V.34
			if (x_elapsed_time (G(k56_timer)) >= SECOND2)
			{
				x_debug_msg("v90 - no TA_75ms_2");
				dp_56k_v34_mode();
				dp_56k_v34_training_state();
				break;
			}
			if (TA_75ms_2 == G(dp_s_ptr))	// TA_75ms_2
			{
				if (1 == dp_read_dsp_ram(KfEnable))
				{
					x_debug_msg("v90 - ans found TA_75ms_2 goto CK_V90 time=");
					dp_puts_dec(x_elapsed_time(G(k56_timer)));
					sendCrLf();

					G(dp_56k_state) = VPCM_CK_V90;
					G(k56_timer) = x_current_time();

					// Now that we've determined we're really heading
					// for V.90, we'll adjust the transmit level.
					dp_transmit_level(14);
				}
				else
				{
					x_debug_msg("v90 - KfEnable==0, found TA_75ms_2");
					dp_56k_v34_mode();
					dp_56k_v34_training_state();
				}
			}
		}
		break;

	case VPCM_INFO0_ERROR_RECOVERY:
	case VPCM_CK_V90 :
		if (G(S).ModemOptions.VpcmOption & BIT2)	// V.92 QC enable
		{
			temp = SECOND12;
		}
		else
		{
			temp = SECOND6;
		}

		// look to see if we're in error recovery
		if ((VPCM_INFO0_ERROR_RECOVERY != G(dp_56k_state)) &&
			(dp_read_dsp_ram(0x0cc8) & 1))  // DPSK_ERFLAG
		{
			x_debug_msg("INFO0 error recovery");
			G(dp_56k_state) = VPCM_INFO0_ERROR_RECOVERY;
		}

		if (VPCM_INFO0_ERROR_RECOVERY == G(dp_56k_state))
		{
			// If we're in INFO0 error recovery give ourselves an
			// extra 6 seconds before we time out.
			temp = SECOND12;
		}

		// Here we're waiting to get back into ROM
		// so that we can download the phase3/phase4
		// DPRAM for V90.  The INFO0-0a sequence (phase2)
		// is in DPRAM so we have to wait for it to finish
		// so we don't overwrite code that is executing!
		if (x_elapsed_time(G(k56_timer)) >= temp)
		{
			x_debug_msg("timeout for TA_A1_3, TA_LP1");
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
			break;
		}

		if (1 == dp_read_dsp_ram(KfEnable))
		{
			// Wait for download until after TA_A1_3 so we can respond
			// to info0 error recovery.
			// Check for TA_LP1 in case we miss TA_A1_3.
			// for v92 QC, we need to check 0x2730 = comm_ret for QC
			if ( (G(dp_s_ptr) == TA_A1_3)
				 || (G(dp_s_ptr) == TA_LP1)
				 || ( (dp_read_dsp_ram(BR_PTR)) == 0x2730)
				)
			{
				// Change tx level for phase 3.
				dp_transmit_level(14);

				// download vpcm phase 3 & 4 & E-RAM
				vpcm_download_phase3_phase4();
				G(k56_timer) = x_current_time();
				G(dp_56k_state) = VPCM_WAIT_FOR_PHASE3 ;
				x_debug_msg("v90-VPCM_WAIT_FOR_PHASE3");
				break;
			}
		}

		// additional error case.
		// If we've somehow made our way to data mode
		// here it must be v.34 (or below).
		if (dp_read_dsp_ram(DSP_STATUS_RAM) & 0x0008)		// data mode bit
		{
			x_debug_msg("v90 - in data mode while waiting for INFO0");
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
			break;
		}
		break ;

	case VPCM_WAIT_FOR_PHASE3 :
		if (x_elapsed_time(dp_timer) < 2)
			break;

		// check memory map switch or
		//   x-y page register IROM bit set.
		if (dp_read_dsp_ram(PcmV_Version)
#if !defined(DRAGNET2)	// no map switching on dragnet2
			|| !VENUS_BASE_MAP
#endif // DRAGNET2
			)
		{
			byte i;

			x_debug_msg("v90 - switched to map 1b, EIALoopNum=");
			dp_puts_dec(dp_read_dsp_ram(0x1ffe));
			x_debug_msg("time=");dp_puts_dec(x_elapsed_time(G(k56_timer)));

			// save dial string for short phase2
			x_strcpy(G(dp_saved_dial_string), G(dp_dial_string));

			// save remote info for short phase 2
			G(vpcm_remote_info) = dp_read_dsp_ram(V92Status);
			x_debug_msg("\r\nvpcm - vpcm_remote_info=");
			dp_puts_hex(G(vpcm_remote_info));

			// save 11 dsp rams for next short phase 2
			x_debug_msg("\r\nvpcm - 11 DSP words saved=");
			for (i=0; i<11; i++)
			{
				G(dp_short_phase2)[i] = dp_read_dsp_ram((word) (0x24cc + i));
				dp_puts_hex(G(dp_short_phase2)[i]);
			}
			sendCrLf();

			G(k56_timer) = x_current_time();
			G(dp_56k_state) = VPCM_DOWNLOAD_SLICER_TABLE ;

			dp_write_dsp_ram(0x008c, 0);	// tone detect init
			break;
		}

		if (1 != dp_read_dsp_ram(KfEnable))
		{
			// Joe said that controller should not issue v34 retrain
			//   if the DSP falls back to v34 by itself
			//	 v34 retrain command will kill the dsp training
			x_debug_msg("DSP cleared KfEnable, go to v34");
			dp_vpcm_restore_v34();
			break;
		}

		if (dp_vpcm_dsp_timeout())			// timeout from DSP?
			break;

		if (vpcm_count_1ff9 != 0)
		{
			temp = SECOND20;
		}
		else
		{
			// timeout 10 sec due to phase 2 error recovery
			temp = SECOND10;
		}

		if (x_elapsed_time( G(k56_timer) ) >= temp)
		{
			x_debug_msg("Timeout switching to map 1b");
			dp_56k_fallback();
		}
		break;

	case VPCM_DOWNLOAD_SLICER_TABLE :
		if (x_elapsed_time(G(k56_timer)) >= SECOND30)
		{
			x_debug_msg("VPCM_DOWNLOAD_SLICER_TABLE timeout");
			dp_56k_fallback();
			break;
		}

		if (dp_vpcm_dsp_timeout())			// timeout from DSP?
		{
            if( G( dp_daa_is_perseus ))
            {
			//this line will cause v90 retrain failure in Venus/Mercury
			dp_write_dsp_ram(KfEnable, 0); //signal dp_vpcm_restore_v34
            }
			break;
		}

		if (0x12 == G(lastRetrain))
		{
			// If remote modem (central site) initiated a
			// rate renegotiation then we can skip the slicer
			// table downloads, we'll keep everything the
			// same.
			x_debug_msg("v90-skip slicer table downloads...");
			G(k56_timer) = x_current_time();
			G(dp_56k_state) = VPCM_WAIT_FOR_CONNECT;
			break;
		}

		// vp_slice() does the slicer table calculations,
		// taking care of DIL, level learning, and downloading
		// slicer tables for CPt and CP.
		if (vp_slice())
		{
			x_debug_msg("v90-WAIT_FOR_CONNECT") ;
			G(k56_timer) = x_current_time();
			G(dp_56k_state) = VPCM_WAIT_FOR_CONNECT;
		}
		break ;
			
	case VPCM_WAIT_FOR_CONNECT :
		if (x_elapsed_time(dp_timer) < MS10)
			break;

		dp_timer = x_current_time();
		if ((dp_read_dsp_ram(DSP_STATUS_RAM) & 0x0008)		// data mode bit
			&& dp_read_dsp_ram(0x0a55))						// wait for E
		{
			x_debug_msg("v90-DATA_MODE_1 time=");
			dp_puts_dec(x_elapsed_time(G(k56_timer)));
			sendCrLf();

			// If we're already connected, we won't
			// reset the timer.  That will cause us
			// to immediately execute the vpcm_connect()
			// code below and go on to the next state.
			if (!G(dp_56k_connected))
				G(k56_timer) = x_current_time();

			G(dp_56k_state) = VPCM_DATA_MODE_1 ;

			// clear retrain count due to dsp ram 0x1ff9
			vpcm_count_1ff9 = 0;
			vpcm_mse_check_timer = x_current_time();
			vpcm_bad_mse = 0;
			break;
		}

		if (dp_vpcm_dsp_timeout())			// timeout from DSP?
			break;
		break ;

	case VPCM_DATA_MODE_1 :
		if (dp_vpcm_mse_check())
			break;

		// change for the 507 287 9681 number.
		// This number seemed to time out waiting for
		// ODP very quickly.  If we didn't send it
		// fast enough then we would go to NoEC.
		if (x_elapsed_time(G(k56_timer)) >= MS50)
		{
			vpcm_connect();
		}
		break;
	}
}

#endif  // VPCM_CLIENT

#if !defined(VPCM_SERVER)
/****************************************************************
Routine : dp_lapm_error_check
Description : Check the lapm frame error
		Return TRUE when lapm things are bad and
		we should go to a lower rate.
*****************************************************************/
BOOL dp_lapm_error_check( void ) 
{
	// used to just return FALSE without initializing
	// If LAPM FIFO's are full then we could get erroneous error
	// counts so we'll reinitialize things here.
	if (G(lapm_local_busy))
	{
		G(lapm_counter) = 300 ;
		G(lapm_errors) = RX_LAPM_ERRORS ;
		G(lapm_frames) = RX_LAPM_FRAMES ;
		return FALSE;
	}

	if ( RX_LAPM_ERRORS != G(lapm_errors) )
	{
		G(dp_bGoodAuto) = 0;	// reset V.34 fallforward count
	}

	if (G(S).ModemOptions.AutoRate == 1)
	{
		if ( G(lapm_frames) != RX_LAPM_FRAMES) 
			G(lapm_counter)++ ;

		if ( G(lapm_counter) > 400 )
			G(lapm_counter) = 400 ; 

		G(lapm_frames) = RX_LAPM_FRAMES ;

		if ( G(lapm_errors) != RX_LAPM_ERRORS)
		{
#if defined(VPCM_CLIENT)
			dp_v90_bad_sec();
#endif
			G(lapm_errors) = RX_LAPM_ERRORS ;
			if ( G(lapm_counter) >= 50  )
			{
				G(lapm_counter) -= 10;
			}
			else
			{
				x_debug_msg("dp - rx lapm errors.. retrain");  
				return TRUE;
			}
		}
	}

	return FALSE;
}

#endif // !VPCM_SERVER




