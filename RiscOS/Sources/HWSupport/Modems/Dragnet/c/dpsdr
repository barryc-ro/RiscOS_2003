/*name and version number:@(#)dpsdr.c	1.5*/
/*date of get: 		  09/06/00 16:59:36*/
/*date of delta:	  04/19/00 14:53:36*/
/****************************************************************
File :  dpsdr.c
Description :
	This file was created to support the special distinctive ring feature.

	Ring   Ring
	Type   Cadence Detect Criteria
	1      2.0 sec ON, 4.0 sec OFF.
	2      0.8 sec ON, 0.4 sec OFF, 0.8 sec ON, 4.0 sec OFF.
	3      0.4 sec ON, 0.2s OFF, 0.4s ON, 0.2s OFF, 0.8s ON, 4.0 sec OFF.


	+/- 15% (-50ms on intial on time).

Procedures Contained :
	dp_sdr_parse
	dp_sdr_ring
	dp_sdr_report
	dp_sdr_ring_init

Revision History :
	Initials    Date        Change
	JMG			03/00		Initial
	JMG			04/19/00	Adjust tolerance to count pulses.
*****************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"

#if defined( SDR_RING_DETECT)

#include "dpglob.h"
#include "v42bis.h"		// use the v42bis buffer
#include "z80glob.h"
#include "allglobs.h"

extern byte dp_sdr_parse();

// SDR Ring Table.
// Supported rings are listed with tolerance bands.
// The 4000ms off time is not included.

// Made tolerances so wide that the algorithm effectively only
// counts ring pulses in the ON portion of the ring.  The algorithm
// was changed to allow it to detect rings from a Panasonic PBX
// that uses 1.25/3.5s ring cadance (rather than the standard 2/4s).
// Consequently, the algorithm is now overkill, but allows for a more
// dicriminating ring selection in the future. (jmg 041900)
const word SDR_Table[3][11] =
{
	// +/- 15% (not less than 100ms) tolerance.  -50 for report delay.
		// 2000ms ON.  4000ms OFF
	//1550, 2400, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,
			// One pulse (RING1)
	  10, 3500, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,
		// 800ms ON, 400ms OFF, 800ms ON, 4000ms OFF
	 //630,  920,  300,  500,  630,  920, 9999, 9999, 9999, 9999, 9999,
	 		// Two pulse (RING2)
	  10, 3500,  10, 3500,   10, 3500, 9999, 9999, 9999, 9999, 9999,
		// 400ms ON, 200ms OFF, 400ms ON, 200ms OFF, 800ms ON, 4000ms OFF
	 //250,  500,  100,  300,  250,  500,  100,  300,  630,  920, 9999
	 		// Three pulse (RING3)
	  10, 3500,  10, 3500,   10, 3500,   10, 3500,   10, 3500, 9999,
};


// dp_sdr_ring_init() - init sdr variables and state machine
void dp_sdr_ring_init(void)
{
	G(sdr_ring_valid) = 0;
	G(sdr_ring_state) = SDR_INIT;
}

// dp_sdr_ring() -  Measure ring intervals and store in array
//                  for later report.
void dp_sdr_ring(void)
{
	switch( G(sdr_ring_state) )
	{
		case SDR_INIT:	// no ring detected
			if( dp_ring_detected() == TRUE )	// wait for first on cycle
			{
				G(sdr_ptr) = (word *)G(right);		// use v42 BIS buffer
				G(sdr_timer) = x_current_time();
				G(sdr_ring_state) = SDR_RING_ON;
			}
			break;

		case SDR_RING_ON:		// Ring is on...wait for off.
			if( dp_ring_detected() == FALSE )
			{
				*G(sdr_ptr)++ = x_elapsed_time(G(sdr_timer));
				G(sdr_timer) = x_current_time();
				G(sdr_ring_state) = SDR_RING_OFF;
			}
			break;

		case SDR_RING_OFF:		// Ring is off...wait for on.
			if( dp_ring_detected() == TRUE )
			{
				*G(sdr_ptr)++ = x_elapsed_time(G(sdr_timer));
				G(sdr_timer) = x_current_time();
				G(sdr_ring_state) = SDR_RING_ON;
			}
			break;

		default:
			G(sdr_ring_state) = SDR_INIT;
			break;
	}
}

// dp_sdr_report() - check SDR pattern, issue ring report and reset.
void dp_sdr_report(void)
{
	byte	msg[10];
	byte	rtype;

	rtype = dp_sdr_parse();
	G(sdr_ring_state) = SDR_INIT;

	if( rtype == 0 )	// invalid ring type
		return;

	msg[0] = G(S).ModemOptions.CRChar ;
	msg[1] = G(S).ModemOptions.LFChar ;
	msg[2] = 'R';
	msg[3] = 'I';
	msg[4] = 'N';
	msg[5] = 'G';
	msg[6] = 0x30 +  rtype;
	msg[7] = G(S).ModemOptions.CRChar ;
	msg[8] = G(S).ModemOptions.LFChar ;
	x_send_mail ( AT_IO_DATA, IO_TASK, msg, 9 ) ;
}

// dp_sdr_parse() - parse ring time buffer for ring type
//    Return 0 if not in table.
//    Return (1+table_index) if found.
byte dp_sdr_parse()
{
	word	*tptr;	// table of cadence values
	word	*mptr;	// measured ring tones
	byte	i;
	byte	found;

	if( sdr_ptr == (word *)G(right) )	// empty sample buffer
	{
		x_debug_msg("sdr_parse: empty sample buffer");
		return 0;
	}

	for( i = 0 ; i < 3 ; ++i )
	{
		tptr = SDR_Table[i];		// point to ring i
		mptr = (word *)G(right);	// start of measured ring chunks

		found = 1;	// assume ring found for ring i.
		while( mptr != sdr_ptr && found == 1 )
		{
			if( *mptr < *tptr++ )	// test lower bound of ring chunk
				found = 0 ;
			if( *mptr > *tptr++ )	// test upper bound of ring chunk
				found = 0 ;
			++mptr;					// next ring chunk
		}
			// make sure ring was valid for each and every chunk.
		if( found == 1 && *tptr == 9999 )
			break;			// ring found at i
		else
			found = 0;
	} // for

	if( found == 1 )
	{
		found = 0x01;	// compare found ring signal with bit field
		found = found << i;
		if( found & G(SDR_Ring_Select) == 0 )	// ring type not enabled...
			G(sdr_ring_valid) = 0;
		else
			G(sdr_ring_valid) = i+1;
	}
	else
	{
		G(sdr_ring_valid) = 0;
	}
	return G(sdr_ring_valid);
}
#endif
