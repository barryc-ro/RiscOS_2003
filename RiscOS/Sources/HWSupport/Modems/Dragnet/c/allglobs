/*name and version number:@(#)allglobs.c	1.18*/
/*date of get: 		  12/15/00 10:10:53*/
/*date of delta:	  11/30/00 22:10:00*/
/****************************************************************
File :	allglobs.c
Description :
	Contains globals for SA and zinger.

Revision History :
	Initials	Date		Change
	RWF			11/12/98	Initial
*****************************************************************/

#define __CREATE_GLOBALS
#include "allglobs.h"
#include "string.h"

#if defined( CS_4 )
#if defined( SA_MULTI_INSTANCE )

//=====================================
// Global Structures
//=====================================
GLOBALS GlobArray [ LASTMODEM + 1 ] ;
GLOBALS *GlobPtr;

//=====================================
// DTE Global Structures
//=====================================
IGLOBALS *IGlobPtr;

/****************************************************************
	Function : init_SA_struct
*****************************************************************/
void
init_SA_struct ( void )
{
	U32 modemNum ;
	void *Pci_mem = (void *) IGlobArray ;
	void *Pci_mem1 = (void *) BGlobArray ;
//	void *Db_mem1 = (void *) GlobArray ;

	//------------------------------------------------------------
	// Initialize PCI Shared area to zero
	// Note: memset clears all of the DTR/RTS pairs
	// as well, but it should not be a problem as long
	// as the "aps" are restarted after a download
	//------------------------------------------------------------
	memset( Pci_mem,  0x00, (sizeof(IGLOBALS)*(LASTMODEM+1)) );
	memset( Pci_mem1, 0x00, (sizeof(BGLOBALS)*(LASTMODEM+1)) );
//	memset( Db_mem1,  0x00, (sizeof(GLOBALS)*(LASTMODEM+1)) );

	for ( modemNum=FIRSTMODEM; modemNum<LASTMODEM+1; modemNum++ )
	{
		InstanceArray[ modemNum ].ModemOffset  = XBUS1 | ( (modemNum * 0x10) << 2) ;
		InstanceArray[ modemNum ].globalPtr  = &GlobArray[ modemNum ] ;
		InstanceArray[ modemNum ].iglobalPtr = &IGlobArray[ modemNum ] ;

		//-------------------------------------------------
		// for use in I() and G() macros
		//-------------------------------------------------
		GlobPtr  = InstanceArray[ modemNum  ].globalPtr ;
		IGlobPtr = InstanceArray[ modemNum  ].iglobalPtr ;

		//-------------------------------------------------
		// for debug - turn on all modems printing
		//-------------------------------------------------
		G(EDUPortPresent)	= TRUE ;
		G(InstanceFlag)		= TRUE;
	}
}

/****************************************************************
	Function : sa_switchModem
*****************************************************************/
void
sa_switchModem( U32 modemNum )
{
	if ( modemNum > LASTMODEM )
	{
		printf( "%s:%d:  ", __FILE__, __LINE__ ) ;
		printf( "Bad Modem # (%d); Going back to EDU\r\n", modemNum );
		_mqx_exit(0);
	}

	_INT_DISABLE() ;
	//-------------------------------------------------
	// for use in I() and G() macros
	//-------------------------------------------------
	GlobPtr     = InstanceArray[ modemNum ].globalPtr ;
	IGlobPtr    = InstanceArray[ modemNum ].iglobalPtr ;

	//-------------------------------------------------
	// for use in XBUS macros
	//-------------------------------------------------
	ModemOffset = InstanceArray[ modemNum ].ModemOffset ;
	ModemNum    = modemNum;
	_INT_ENABLE() ;
}
#else
void
init_SA_struct ( void )
{
	void *Pci_mem = (void *) IGlobArray ;
	void *Pci_mem1 = (void *) BGlobArray ;
	memset( Pci_mem,  0x00, (sizeof(IGLOBALS)*(LASTMODEM+1)) );
	memset( Pci_mem1, 0x00, (sizeof(BGLOBALS)*(LASTMODEM+1)) );
	G(EDUPortPresent) = TRUE ;
}
void
sa_switchModem( U32 modemNum )
{
	ModemNum    = 0 ;
	ModemOffset = MODEM1 ;
}
#endif	// SA_MULTI_INSTANCE
#endif	// CS_4 
