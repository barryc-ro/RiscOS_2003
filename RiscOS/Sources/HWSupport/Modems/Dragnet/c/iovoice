/*name and version number:@(#)iovoice.c	1.104*/
/*date of get: 		  09/06/00 16:59:17*/
/*date of delta:	  06/14/00 14:17:26*/
/****************************************************************
File :	iovoice.c
Description :
	Contains all routines for the data transmition between
	DTE and DCE in VOICE TAD mode.

Procedures Contained :
	io_voice_dte_to_dce 
	io_voice_dce_to_dte
	io_voice_init
	io_voice_background

Revision History :
	Initials	Date		Change
*****************************************************************/
#include "llglob_d.h"

#ifdef KORTEX
 #include "AMDebug.h"
 #include "AmDs.h"
#endif

#ifdef VOICE
 #include "ioglob_d.h"
 #include "dpglob.h"
 #include "z80glob.h"
 #include "allglobs.h"

/****************************************************************
Routine : io_voice_dte_to_dce
Description :
	Transfer voice data from the dte queue to the dce fifo.
	First check if space is available to write to the dce fifo.
	Removes all character pairs begining with <DLE>.
	Recognize <DLE><DLE> and reinsert a single <DLE> in its place.
	Recognize <DLE><SUB> and reinsert two <DLE> in its place.
	Recognize <DLE><ETX> as the stream terminator.
Parameters in :
	none
Parameters out :
	TRUE		-	end of data - detected <DLE><ETX>
	FALSE		-	if more data is available to transmit to the dce
*****************************************************************/
byte io_voice_dte_to_dce ( void )
{
	byte rx_ch ;
	byte *wptr ;
	word voice_count_max;
#ifdef KORTEX
	word wAmResetCompression;
	wAmResetCompression = 0; // Pas de reset
#endif			

#ifdef G729A
	voice_count_max = VOICE_G729_DSP_XFR_CNT;
#else
	voice_count_max = VOICE_PLAY_DSP_XFR_CNT;
#endif


#ifdef G729A
	if ( G(io_voice_count) >= VOICE_G729_DSP_XFR_CNT )
#else
	if ( G(io_voice_count) >= VOICE_PLAY_DSP_XFR_CNT )
#endif
	{
		return ( FALSE ) ;		// dce fifo is full
	}

	if ( G(io_voice_count) == 0 )
		G(io_dce_rx_wptr) = G(io_dce_rx_sptr) ;
	
#ifdef KORTEX
	switch (G(S).ModemOptions.VoiceCompression)
	{
	case VCM_IMA_ADPCM :
		voice_count_max = VOICE_PLAY_DSP_XFR_CNT >> 2; // VOICE_PLAY_DSP_XFR_CNT / 2 * 4 / 8
		if (0 == G(io_voice_count))
		{
			G(io_dce_rx_wptr) = G(io_dce_tx_sptr);
		}
		break;
		
	default :
		break;
	}
#else
	if (VCM_IMA_ADPCM == G(S).ModemOptions.VoiceCompression)
	{
		/* If we're doing in-line IMA ADPCM decompression then
		 * we only get cnt/4 bytes, then we decompress
		 * that into cnt bytes.  (Decompress one byte
		 * [two 4 bit samples] into four bytes [two
		 * 16 bit samples]).
		 */
		voice_count_max = VOICE_PLAY_DSP_XFR_CNT / 4;

		/* Also for in-line decompression we'll put the
		 * compressed data in the G(io_dce_tx_buff)[] and
		 * then decompress it into G(io_dce_rx_buff)[] (which
		 * is where the dsp routines are looking for it.
		 */
		if (0 == G(io_voice_count))
			G(io_dce_rx_wptr) = G(io_dce_tx_sptr) ;
	}
#endif // KORTEX

	if(!IS_DTE_RX_EMPTY() )	G(io_timer) = x_current_time() ;

	wptr = (byte *)G(io_dce_rx_wptr) ;
	while ( (G(io_voice_count) < voice_count_max) && !IS_DTE_RX_EMPTY() )
	{
		rx_ch = *I(io_dte_rx_rptr)++ ;
		DTE_RX_UPDATE() ;
		if ( rx_ch == DLE )
		{ 
			if ( G(io_dte_rx_last_ch) == DLE ) // <DLE><DLE>
			{
				G(io_dte_rx_last_ch) = 0xff ;
				*wptr++ = DLE ;
				++G(io_voice_count) ;
			}
			else 
				G(io_dte_rx_last_ch) = DLE ;
		}
		else if ( G(io_dte_rx_last_ch) == DLE )
		{
			G(io_dte_rx_last_ch) = 0xff ;
			if ( rx_ch == ETX ) /* End-Of-Data */
			{
				return ( TRUE ) ;
			}
			else if ( rx_ch == SUB )	/* <DLE><SUB> insert 2 DLE's */
			{
				*wptr++ = DLE ;
				*wptr++ = DLE ;
				G(io_voice_count) = (word) (G(io_voice_count) + 2);
			}
			else if ( rx_ch == 'u' )	/* volume up */
			{
				if ( G(S).ModemOptions.VoiceVolumeControl <= 249 )
				{
					G(S).ModemOptions.VoiceVolumeControl += 6 ;
					x_send_mail_dp1(VOICE_GAIN_CONTROL);
				}
			}
			else if ( rx_ch == 'd' )	/* volume down */
			{
				if ( G(S).ModemOptions.VoiceVolumeControl  > 6 )
				{
					G(S).ModemOptions.VoiceVolumeControl -= 6 ;
					x_send_mail_dp1(VOICE_GAIN_CONTROL);
				}
			}
#ifdef KORTEX
			else if ( rx_ch == FS )	/* Reset compression ADPCM */
			{
				wAmResetCompression ++;
			}
			else if ( rx_ch == VCM_IMA_ADPCM )	/* ADPCM 4 bits = 132 */
			{
				G(S).ModemOptions.VoiceCompression = VCM_IMA_ADPCM;
			}
			else if ( rx_ch == VCM_G729 )	
			{
				G(S).ModemOptions.VoiceCompression = VCM_G729;
			}
#endif // KORTEX
			else
			{
				// invalid dle command - send it as part of data
				*wptr++ = DLE ;
				*wptr++ = rx_ch ;
				G(io_voice_count) = (word) (G(io_voice_count) + 2);
			}
		}
		else
		{
			*wptr++ = rx_ch ;
			++G(io_voice_count) ;
		}
	}

#ifdef KORTEX			
	if (bAmDsDirect)
	{
		if (AM_DS_DirectPlayToDce((byte *) G(io_dce_rx_wptr), voice_count_max))
		{
			// fin du fichier
			return FALSE;
		}
		G(io_voice_count) = voice_count_max;
	}
	else
#endif // KORTEX
	{
		G(io_dce_rx_wptr) = (word *) wptr ;
	}

	if ( G(io_voice_count) >= voice_count_max )
	{
		/* Before tranfering the data to the DSP first
		 * do in-line decompression if needed.  We decompress
		 * VOICE_PLAY_DSP_XFR_CNT/2 samples into
		 * VOICE_PLAY_DSP_XFR_CNT bytes.
		 */
#ifdef KORTEX
		switch (G(S).ModemOptions.VoiceCompression)
		{
		case VCM_IMA_ADPCM :
			io_ima_adpcm_decoder((byte *) G(io_dce_tx_sptr),
					     (word *) G(io_dce_rx_sptr),
					     (int) VOICE_PLAY_DSP_XFR_CNT/2,
					     &ima_Adpcm_State, wAmResetCompression);
			/* Other code (dsp isr) looks at this to make sure
			 * the G(right) number of samples are in there
			 */
			G(io_voice_count) = VOICE_PLAY_DSP_XFR_CNT;
			break;

		default :
			break;
		}
#else
		if (VCM_IMA_ADPCM == G(S).ModemOptions.VoiceCompression)
		{
			io_ima_adpcm_decoder((byte *) G(io_dce_tx_sptr),
					     (word *) G(io_dce_rx_sptr),
					     (int) VOICE_PLAY_DSP_XFR_CNT/2,
					     &ima_Adpcm_State);

			/* Other code (dsp isr) looks at this to make sure
			 * the G(right) number of samples are in there
			 */
			G(io_voice_count) = VOICE_PLAY_DSP_XFR_CNT;
		}
#endif // KORTEX
	}

	return FALSE;
}

/****************************************************************
Routine : io_voice_dce_to_dte
Description :
	Receive voice data from the dce fifo to the dte transmit queue.
	First check if space is available to write to the dte transmit queue.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void io_voice_dce_to_dte ( void )
{
	byte  rx_ch, *wptr, *rptr ;

#ifdef KORTEX			
	// This allows for a *2 expansion due to DLE shielding.
	if ((!bAmDsDirect  &&
		 (io_get_dte_tx_count() >= VOICE_RECORD_DSP_XFR_CNT) &&
		 (G(io_voice_count)))  ||
	    (bAmDsDirect  &&  G(io_voice_count)))
#else
	// This allows for a *2 expansion due to DLE shielding.
	if ((io_get_dte_tx_count() >= VOICE_RECORD_DSP_XFR_CNT) &&
		(G(io_voice_count)))
#endif			
	{
		wptr = (byte *) I(io_dte_tx_wptr) ;
		rptr = (byte *) G(io_dce_rx_sptr) ;

#ifdef KORTEX
		if (! bAmDsDirect)
		{
			switch (G(S).ModemOptions.VoiceCompression)
			{
			case VCM_IMA_ADPCM :
				io_ima_adpcm_coder((word *) G(io_dce_rx_sptr),
					   (byte *) G(io_dce_tx_sptr),
					   (int) (G(io_voice_count) >> 1),
					   &ima_Adpcm_State);

				rptr = (byte *) G(io_dce_tx_sptr);	/* compressed */
				G(io_voice_count) >>= 2; // G(io_voice_count) / 2 * 4 / 8;
				break;
			
			default :
				break;
			}
		}
#else
		if (VCM_IMA_ADPCM == G(S).ModemOptions.VoiceCompression)
		{
			/* For IMA ADPCM we'll first compress the samples
			 * into the G(io_dce_tx_buff)[] buffer then we can
			 * dig them out of there.
			 */
			io_ima_adpcm_coder((word *) G(io_dce_rx_sptr),
					   (byte *) G(io_dce_tx_sptr),
					   (int) G(io_voice_count)/2,
					   &ima_Adpcm_State);

			rptr = (byte *) G(io_dce_tx_sptr);	/* compressed */
			G(io_voice_count) /= 4;
		}
#endif // KORTEX

#ifdef KORTEX			
		if (bAmDsDirect)
		{
			AM_DS_WriteEx( rptr, G(io_voice_count), G(S).ModemOptions.VoiceCompression, &ima_Adpcm_State);
			G(io_voice_count) = 0;
		}
		else
#endif // KORTEX
		{
			do 
			{
				rx_ch = *rptr++ ;
				if ( rx_ch == DLE )		// insert a <DLE>
				{
					*wptr++ = DLE ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr);
				}
				*wptr++ = rx_ch ;
				if ( wptr >= I(io_dte_tx_eptr) )
					wptr = (byte *) I(io_dte_tx_sptr);
			}
			while ( --G(io_voice_count) ) ;
			I(io_dte_tx_wptr) = wptr ;
		}		
	}
}

/****************************************************************
Routine : io_voice_init
Description :
	The initialization routin for io voice .
Parameters in :
	voice state	
Parameters out :
	none
*****************************************************************/
void io_voice_init ( IO_VOICE_STATE state )
{
	G(io_timer) = x_current_time () ;
	G(io_dte_rx_last_ch) = 0xff ;
	G(io_voice_state) = state ;
	G(io_voice_count) = 0 ;
	io_init_dce_tx_fifo () ;
	io_init_dce_rx_fifo () ;
	ima_Adpcm_State.valprev = 0;
	ima_Adpcm_State.index = 0;
}

/****************************************************************
Routine : io_voice_background
Description :
	The periodic routine for voice .
Parameters in :
	none
Parameters out :
	FALSE - if voice data tx or rx done
	TRUE  - if background task is still processing data
*****************************************************************/
byte io_voice_background(void)
{
	byte dte_rx_char;

	switch (G(io_voice_state))
	{
		case IO_VOICE_RX :
			io_voice_dce_to_dte();
			if(G(io_voice_count) == 0) G(io_voice_state) = IO_VOICE_RX_DSP;
			if ( io_get_dte_rx_char(&dte_rx_char))
			{
				if (dte_rx_char == DLE)
					G(io_voice_state) = IO_VOICE_RX_END;
			}
			break;

		case IO_VOICE_RX_DSP:
			x_send_mail ( DP_DPORT_RX, DP_TASK, &dte_rx_char, 1 ) ;
			if( dte_rx_char==TRUE) G(io_voice_state) = IO_VOICE_RX ;
			if ( io_get_dte_rx_char ( &dte_rx_char ) )
			{
				if ( dte_rx_char == DLE ) G(io_voice_state) = IO_VOICE_RX_END;
			}
			break;

		case IO_VOICE_RX_END:
			// Got DLE from DTE, this could be the end.
			io_voice_dce_to_dte();
			if (io_get_dte_rx_char(&dte_rx_char))
			{
				if (dte_rx_char == 0x1B)		// ESC
				{
					// V.253 ends the voice receive state with DLE-ESC.
					io_put_dte_tx_char(DLE);
					io_put_dte_tx_char(0x1B);
					io_init_dce_rx_fifo();
					return FALSE;
				}

				if (dte_rx_char == '!') 
				{
					x_debug_msg("io - voice end voice rx");
					io_put_dte_tx_char(DLE);
					io_put_dte_tx_char(ETX);
					io_init_dce_rx_fifo();
					return FALSE;
				}

				G(io_voice_state) = IO_VOICE_RX;
			}
			break ;

		case IO_VOICE_TX :
			if (io_voice_dte_to_dce() == TRUE)
			{
				x_debug_msg("io - voice tx, etx from dte");
				G(io_voice_state) = IO_VOICE_TX_END;
				G(io_timer) = x_current_time();
			}
			else
			{
#ifdef G729A
				if(G(io_voice_count) >= VOICE_G729_DSP_XFR_CNT)
#else
				if(G(io_voice_count) >= VOICE_PLAY_DSP_XFR_CNT)
#endif
				{
				    G(io_voice_state) = IO_VOICE_TX_DSP ;
				}
				else
				if ( IS_DTE_RX_EMPTY() &&	
					 ( x_elapsed_time(G(io_timer)) >= SECOND10 ) )
				{
					x_debug_msg("io - voice 10 seconds inactivity time out") ;
					io_init_dce_rx_fifo () ;
					return ( FALSE ) ;
				}
			}		
		
			break ;

	   	case IO_VOICE_TX_DSP:
			x_send_mail ( DP_DPORT_TX, DP_TASK, &dte_rx_char, 1 ) ;
			if( dte_rx_char==TRUE)
				G(io_voice_state) = IO_VOICE_TX ;
			break ;

	   	case IO_VOICE_TX_END :
			// wait for dsp fifo to empty
			G(dp_dsp_data_in_progress) = FALSE ;
			x_send_mail ( DP_TX_FIFO_EMPTY, DP_TASK, &dte_rx_char, 1 ) ;
			if ( ( dte_rx_char == TRUE ) ||
					 ( x_elapsed_time(G(io_timer)) >= MS200 ) )
			{
				io_init_dce_rx_fifo () ;
				return ( FALSE ) ;
			}
			break ;
	}
	return ( TRUE ) ;
}
#endif // VOICE
