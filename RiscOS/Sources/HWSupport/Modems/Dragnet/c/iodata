/*name and version number:@(#)iodata.c	1.73*/
/*date of get: 		  09/06/00 16:59:13*/
/*date of delta:	  03/21/00 14:55:17*/
/****************************************************************
File :	iodata.c
Description :
	Contains all routines in data mode to the dce interface.

Procedures Contained :
	io_tx_dte_to_dce_data
	io_tx_dce_to_dte_data
	io_dte_loopback
	io_tx_v54
	io_dce_loopback

Revision History :
	Initials	Date		Change
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "iouart_d.h"
#include "allglobs.h"

/****************************************************************
Routine : io_tx_break
Description :
	send break based on the length received from the \B command
*****************************************************************/
byte io_tx_break ( void )
{
	word  count ;
	word  *wptr ;

	if ( !(G(io_uart_status) & UART_DTE_BREAK_ON) )
		return (FALSE) ;
	count = io_get_dce_tx_count () ;
	wptr = G(io_dce_tx_wptr) ;
	if ( G(io_break_length) < count )
		count = G(io_break_length) ;
	G(io_break_length) = (word) (G(io_break_length) - count);
	if ( G(io_break_length) == 0 )
		UART_stop_break () ; // do not send any break anymore.

	while ( count-- )
	{
		*wptr++ = HDLC_TX_ANY_CHAR ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
	}
	G(io_dce_tx_wptr) = wptr ;
	io_start_dce_transmit () ;
	return ( TRUE ) ;
}

/****************************************************************
Routine : io_tx_dte_to_dce_data
Description :
	Transmit data from the dte queue to the dce fifo.
	First check if space is available to write to the dce fifo.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void io_tx_dte_to_dce_data ( void )
{
	word  count ;
	word  *wptr ;

	if ( io_tx_break () )
		return ;

	count = io_get_dce_tx_count () ;	// get amount of free space on tx
	wptr = G(io_dce_tx_wptr) ;

	while ( !IS_DTE_RX_EMPTY() && ( count > 0 ) )
	{
		*wptr++ = (word) (*I(io_dte_rx_rptr)++) ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
		DTE_RX_UPDATE();
		--count ;
	}

	if ( G(io_dce_tx_wptr) != wptr )
	{
		G(io_dce_tx_wptr) = wptr ;
		io_start_dce_transmit () ;
	}
}

/****************************************************************
Routine : io_dce_to_dte_data
Description :
	Transmit data from the dce fifo to the dte transmit queue.
	First check if space is available to write to the dte transmit queue.
	Used only for analog loopback.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void io_dce_to_dte_data ( void )
{
	word  count ;
	byte  *wptr ;

	count = io_get_dte_tx_count () ;
	wptr = (byte *) I(io_dte_tx_wptr);

	while ( ( count-- ) && ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) ) )
	{
		*wptr++ = (byte) (*G(io_dce_rx_rptr)++);
		if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;
		if ( wptr >= I(io_dte_tx_eptr) )
			wptr = (byte *) I(io_dte_tx_sptr);
	}

	I(io_dte_tx_wptr) = wptr;	// update write pointer
}

/****************************************************************
Routine : io_tx_dce_to_dte_data
Description :
	Transmit data from the dce fifo to the dte transmit queue.
	First check if space is available to write to the dte transmit queue.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void io_tx_dce_to_dte_data ( void )
{
	io_dce_to_dte_data () ;
}

#if !defined(CS_MODEM)
/****************************************************************
Routine : io_dte_loopback
Description :
	Transmit data from the dte receive queue to the dte transmit queue.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void io_dte_loopback ( void )
{
	word  count ;
	byte  *wptr ;

	count = io_get_dte_tx_count () ;
	wptr = (byte *) I(io_dte_tx_wptr);
	while ( !IS_DTE_RX_EMPTY() && ( count-- ) )
	{
#if defined(VENUS2) && defined(IO_CHECK_LOOPBACK_DATA)
		// This checks the loopback data to determine
		// if it's the known pattern that mloop sends.

		static byte lastCh;
		byte ch;
		*wptr++ = ch = *I(io_dte_rx_rptr)++ ;
		if ((lastCh + 1) != ch)
		{
			// no error for wrap around
			if ((lastCh != 0x6f) || (ch != 0x30))
			{
				sendDumbChar(ch);sendDumbChar(' ');
			}
		}
		lastCh = ch;
#else
		*wptr++ = *I(io_dte_rx_rptr)++ ;
#endif
		DTE_RX_UPDATE();
		if ( wptr >= I(io_dte_tx_eptr) )
			wptr = (byte *) I(io_dte_tx_sptr);
	}
	I(io_dte_tx_wptr) = wptr ;
}

/****************************************************************
Routine : io_tx_v54
Description :
	Transmit V.54 loop2 preparatory pattern and termination pattern
Parameters in :
	data_bit
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.G(S).Xu		10/02/93	Initial
*****************************************************************/
void io_tx_v54 ( byte data_bit )
{
	byte shift_reg, tx_byte, tx_bit, j ;
	word  *wptr ;
	word byte_count, i ;

	if ( data_bit == 0 )	// preparatory, 2048 bits
		byte_count = 256 ;
	else					// termination, 8192 bits
		byte_count = 1023 ;
	wptr = G(io_dce_tx_wptr) ;
	shift_reg = 0xaa ;
	tx_byte = 0 ;
	for ( i = 0; i < byte_count; i++ )
	{
		for ( j = 0; j < 8; j++ )
		{
			if ( shift_reg & 0x10 )		// bit4
				tx_bit = 1 ;
			else
				tx_bit = 0 ;
			if ( shift_reg & 0x02 ) 	// bit7
				tx_bit = (byte) (tx_bit ^ 1);
			else
				tx_bit = (byte) (tx_bit ^ 0);		// bit4 ^ bit7
			tx_bit = (byte) (tx_bit ^ data_bit);	// tx_bit ^ data_bit
			shift_reg = (byte) (shift_reg >> 1);
			if ( tx_bit )
				shift_reg |= 0x80 ;
			tx_bit = (byte) (tx_bit << 7);
			tx_byte = (byte) (tx_byte >> 1);
			tx_byte |= tx_bit ;
		}
		*wptr++ = (word) (tx_byte | HDLC_TX_ANY_CHAR);
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
	}
	G(io_dce_tx_wptr) = wptr ;
	io_start_dce_transmit () ;
}

/****************************************************************
Routine : io_dce_loopback
Description :
	Transmit data from the dce receive queue to the dce transmit queue.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials    Date        Change
	AC          01/30/96    Initial
*****************************************************************/
void io_dce_loopback ( void )
{
//    x_debug_msg ("in io_dce_loopback");
	
	word dce_rx_count, dce_tx_count;
	byte count;

	// # of bytes available to read from dce receive queue
	dce_rx_count = io_get_dce_rx_count() ;

	// # 0f free bytes available in the dce transmit queue
	dce_tx_count = io_get_dce_tx_count() ;

	if ( ( dce_rx_count > 0 ) && ( dce_tx_count > 0 ) )
	{
		if ( dce_rx_count <= dce_tx_count )
			count = (byte) dce_rx_count ;
		else
			count = (byte) dce_tx_count ;

		while ( count-- )
		{
			*G(io_dce_tx_wptr)++ = *G(io_dce_rx_rptr)++ ;
			
			if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
				G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;

			if ( G(io_dce_tx_wptr) >= G(io_dce_tx_eptr) )
				G(io_dce_tx_wptr) = G(io_dce_tx_sptr) ;
		}
		io_start_dce_transmit() ;
	}
}
#endif //CS_MODEM
