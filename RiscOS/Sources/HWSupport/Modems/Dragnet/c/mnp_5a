/*name and version number:@(#)mnp_5a.c	1.62*/
/*date of get: 		  09/06/00 16:59:21*/
/*date of delta:	  06/30/00 10:29:12*/
/****************************************************************
File : mnp_5a.c
Description :
	Contains MNP5 data compression routines

Procedures Contained :
	mnp5_ad_frq_init
	mnp5_encode
	mnp5_encode_flush
	mnp5_decode

Revision History :
	Initials	Date		Change
	M.B			07/15/93	Initial
*****************************************************************/
#include "llglob_d.h"

#ifndef NO_MNP5

#include "ioglob_d.h"
#include "lapm.h"
#include "mnp.h"
#include "v42bis.h"

#ifdef CS_DEBUG
 #include "mnp_5a.h"
#endif
#include "allglobs.h"


#define mnp5_token_table_max 512

//token table format: Header , Body  (left justified)
const byte mnp5_token_table[mnp5_token_table_max] = {
	00	,	 00		 ,
	00	,	 0x80	 ,
	01	,	 00		 ,
	01	,	 0x80	 ,
	02	,	 00		 ,
	02	,	 0x40	 ,
	02	,	 0x80	 ,
	02	,	 0xC0	 ,
	03	,	 00		 ,
	03	,	 0x20	 ,
	03	,	 0x40	 ,
	03	,	 0x60	 ,
	03	,	 0x80	 ,
	03	,	 0xA0	 ,
	03	,	 0xC0	 ,
	03	,	 0xE0	 ,
	04	,	 00		 ,
	04	,	 0x10	 ,
	04	,	 0x20	 ,
	04	,	 0x30	 ,
	04	,	 0x40	 ,
	04	,	 0x50	 ,
	04	,	 0x60	 ,
	04	,	 0x70	 ,
	04	,	 0x80	 ,
	04	,	 0x90	 ,
	04	,	 0xA0	 ,
	04	,	 0xB0	 ,
	04	,	 0xC0	 ,
	04	,	 0xD0	 ,
	04	,	 0xE0	 ,
	04	,	 0xF0	 ,
	05	,	 00		 ,
	05	,	 0x8	 ,
	05	,	 0x10	 ,
	05	,	 0x18	 ,
	05	,	 0x20	 ,
	05	,	 0x28	 ,
	05	,	 0x30	 ,
	05	,	 0x38	 ,
	05	,	 0x40	 ,
	05	,	 0x48	 ,
	05	,	 0x50	 ,
	05	,	 0x58	 ,
	05	,	 0x60	 ,
	05	,	 0x68	 ,
	05	,	 0x70	 ,
	05	,	 0x78	 ,
	05	,	 0x80	 ,
	05	,	 0x88	 ,
	05	,	 0x90	 ,
	05	,	 0x98	 ,
	05	,	 0xA0	 ,
	05	,	 0xA8	 ,
	05	,	 0xB0	 ,
	05	,	 0xB8	 ,
	05	,	 0xC0	 ,
	05	,	 0xC8	 ,
	05	,	 0xD0	 ,
	05	,	 0xD8	 ,
	05	,	 0xE0	 ,
	05	,	 0xE8	 ,
	05	,	 0xF0	 ,
	05	,	 0xF8	 ,
	06	,	 00		 ,
	06	,	 04		 ,
	06	,	 0x8	 ,
	06	,	 0xC	 ,
	06	,	 0x10	 ,
	06	,	 0x14	 ,
	06	,	 0x18	 ,
	06	,	 0x1C	 ,
	06	,	 0x20	 ,
	06	,	 0x24	 ,
	06	,	 0x28	 ,
	06	,	 0x2C	 ,
	06	,	 0x30	 ,
	06	,	 0x34	 ,
	06	,	 0x38	 ,
	06	,	 0x3C	 ,
	06	,	 0x40	 ,
	06	,	 0x44	 ,
	06	,	 0x48	 ,
	06	,	 0x4C	 ,
	06	,	 0x50	 ,
	06	,	 0x54	 ,
	06	,	 0x58	 ,
	06	,	 0x5C	 ,
	06	,	 0x60	 ,
	06	,	 0x64	 ,
	06	,	 0x68	 ,
	06	,	 0x6C	 ,
	06	,	 0x70	 ,
	06	,	 0x74	 ,
	06	,	 0x78	 ,
	06	,	 0x7C	 ,
	06	,	 0x80	 ,
	06	,	 0x84	 ,
	06	,	 0x88	 ,
	06	,	 0x8C	 ,
	06	,	 0x90	 ,
	06	,	 0x94	 ,
	06	,	 0x98	 ,
	06	,	 0x9C	 ,
	06	,	 0xA0	 ,
	06	,	 0xA4	 ,
	06	,	 0xA8	 ,
	06	,	 0xAC	 ,
	06	,	 0xB0	 ,
	06	,	 0xB4	 ,
	06	,	 0xB8	 ,
	06	,	 0xBC	 ,
	06	,	 0xC0	 ,
	06	,	 0xC4	 ,
	06	,	 0xC8	 ,
	06	,	 0xCC	 ,
	06	,	 0xD0	 ,
	06	,	 0xD4	 ,
	06	,	 0xD8	 ,
	06	,	 0xDC	 ,
	06	,	 0xE0	 ,
	06	,	 0xE4	 ,
	06	,	 0xE8	 ,
	06	,	 0xEC	 ,
	06	,	 0xF0	 ,
	06	,	 0xF4	 ,
	06	,	 0xF8	 ,
	06	,	 0xFC	 ,
	07	,	 00		 ,
	07	,	 02		 ,
	07	,	 04		 ,
	07	,	 06		 ,
	07	,	 0x8	 ,
	07	,	 0xA	 ,
	07	,	 0xC	 ,
	07	,	 0xE	 ,
	07	,	 0x10	 ,
	07	,	 0x12	 ,
	07	,	 0x14	 ,
	07	,	 0x16	 ,
	07	,	 0x18	 ,
	07	,	 0x1A	 ,
	07	,	 0x1C	 ,
	07	,	 0x1E	 ,
	07	,	 0x20	 ,
	07	,	 0x22	 ,
	07	,	 0x24	 ,
	07	,	 0x26	 ,
	07	,	 0x28	 ,
	07	,	 0x2A	 ,
	07	,	 0x2C	 ,
	07	,	 0x2E	 ,
	07	,	 0x30	 ,
	07	,	 0x32	 ,
	07	,	 0x34	 ,
	07	,	 0x36	 ,
	07	,	 0x38	 ,
	07	,	 0x3A	 ,
	07	,	 0x3C	 ,
	07	,	 0x3E	 ,
	07	,	 0x40	 ,
	07	,	 0x42	 ,
	07	,	 0x44	 ,
	07	,	 0x46	 ,
	07	,	 0x48	 ,
	07	,	 0x4A	 ,
	07	,	 0x4C	 ,
	07	,	 0x4E	 ,
	07	,	 0x50	 ,
	07	,	 0x52	 ,
	07	,	 0x54	 ,
	07	,	 0x56	 ,
	07	,	 0x58	 ,
	07	,	 0x5A	 ,
	07	,	 0x5C	 ,
	07	,	 0x5E	 ,
	07	,	 0x60	 ,
	07	,	 0x62	 ,
	07	,	 0x64	 ,
	07	,	 0x66	 ,
	07	,	 0x68	 ,
	07	,	 0x6A	 ,
	07	,	 0x6C	 ,
	07	,	 0x6E	 ,
	07	,	 0x70	 ,
	07	,	 0x72	 ,
	07	,	 0x74	 ,
	07	,	 0x76	 ,
	07	,	 0x78	 ,
	07	,	 0x7A	 ,
	07	,	 0x7C	 ,
	07	,	 0x7E	 ,
	07	,	 0x80	 ,
	07	,	 0x82	 ,
	07	,	 0x84	 ,
	07	,	 0x86	 ,
	07	,	 0x88	 ,
	07	,	 0x8A	 ,
	07	,	 0x8C	 ,
	07	,	 0x8E	 ,
	07	,	 0x90	 ,
	07	,	 0x92	 ,
	07	,	 0x94	 ,
	07	,	 0x96	 ,
	07	,	 0x98	 ,
	07	,	 0x9A	 ,
	07	,	 0x9C	 ,
	07	,	 0x9E	 ,
	07	,	 0xA0	 ,
	07	,	 0xA2	 ,
	07	,	 0xA4	 ,
	07	,	 0xA6	 ,
	07	,	 0xA8	 ,
	07	,	 0xAA	 ,
	07	,	 0xAC	 ,
	07	,	 0xAE	 ,
	07	,	 0xB0	 ,
	07	,	 0xB2	 ,
	07	,	 0xB4	 ,
	07	,	 0xB6	 ,
	07	,	 0xB8	 ,
	07	,	 0xBA	 ,
	07	,	 0xBC	 ,
	07	,	 0xBE	 ,
	07	,	 0xC0	 ,
	07	,	 0xC2	 ,
	07	,	 0xC4	 ,
	07	,	 0xC6	 ,
	07	,	 0xC8	 ,
	07	,	 0xCA	 ,
	07	,	 0xCC	 ,
	07	,	 0xCE	 ,
	07	,	 0xD0	 ,
	07	,	 0xD2	 ,
	07	,	 0xD4	 ,
	07	,	 0xD6	 ,
	07	,	 0xD8	 ,
	07	,	 0xDA	 ,
	07	,	 0xDC	 ,
	07	,	 0xDE	 ,
	07	,	 0xE0	 ,
	07	,	 0xE2	 ,
	07	,	 0xE4	 ,
	07	,	 0xE6	 ,
	07	,	 0xE8	 ,
	07	,	 0xEA	 ,
	07	,	 0xEC	 ,
	07	,	 0xEE	 ,
	07	,	 0xF0	 ,
	07	,	 0xF2	 ,
	07	,	 0xF4	 ,
	07	,	 0xF6	 ,
	07	,	 0xF8	 ,
	07	,	 0xFA	 ,
	07	,	 0xFC	 ,
	07	,	 0xFE	 ,
};

/****************************************************************
Routine : mnp5_ad_frq_tx_init
Description :
	Initializes mnp5 character and frequency tables, and 
	variables used for transmitting MNP5 frames.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/15/93	Initial
*****************************************************************/
non_banked void mnp5_ad_frq_tx_init ( void )
{
	x_debug_msg("MNP5 - mnp5_ad_frq_tx_init()") ;    
	cs_debug_liv(MNP5_AD_FREQ_TX_INIT);
	G(mnp5_run_length_match_char) = 00;
	G(mnp5_run_length_count) = 03;
	G(mnp5_run_length_repeat_count) = 00;
	G(mnp5_run_length_flag) = 00;
	G(mnp5_repeat_count) = 00;
	G(mnp5_bitpos) = 0x80;
	G(mnp5_tx_token_byte) = 0;
}

/****************************************************************
Routine : mnp5_ad_frq_rx_init
Description :
	Initializes	variables used for receiving MNP5 frames.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked void mnp5_ad_frq_rx_init ( void )
{
	x_debug_msg("MNP5 - mnp5_ad_frq_rx_init()") ;    
	cs_debug_liv(MNP5_AD_FREQ_RX_INIT);
	G(mnp5_rx_loop_count) = 00;
	G(mnp5_rx_match_char) = 00;
	G(mnp5_rx_run_length_count) = 03;
	G(mnp5_shift_pos) = 0x80;
	G(mnp5_rx_head_hold) = 0;
	G(mnp5_rx_head_pos) = 0x04;
}

// Definition of addresses in v.42bis memory
#define MNP5_CHAR_TABLE	V42BIS_MEM_START
#define MNP5_TX_FREQ_TABLE	(MNP5_CHAR_TABLE + 1024)
#define MNP5_RX_FREQ_TABLE	(MNP5_TX_FREQ_TABLE + 1024)

/****************************************************************
Routine : mnp5_ad_frq_init
Description :
	Calls routines to initialize MNP5 send and receive variables.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked void mnp5_ad_frq_init ( void )
{
	word i,j;

	// Init both tx and rx memory area
	j = 0;
	for (i=0; i<256; i++)
	{
		MNP5_CHAR_TABLE[i] = (byte) i;
		MNP5_TX_FREQ_TABLE[j]
			= MNP5_RX_FREQ_TABLE[j] = 00;
		j++;
		MNP5_TX_FREQ_TABLE[j]
			= MNP5_RX_FREQ_TABLE[j] = (byte)i;
		j++;
	}

	mnp5_ad_frq_tx_init();
	mnp5_ad_frq_rx_init();
}

/****************************************************************
Routine : div_frq_table
Description :
	Divides frequency table values in half.  Called when any 
	frequency reaches 255.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked void mnp5_div_freq_table ( void )
{	
	for (G(mnp5_div_hold1) = 0; G(mnp5_div_hold1) < 256; G(mnp5_div_hold1)++)
	{
		*G(mnp5_fptr) = (byte) (*G(mnp5_fptr) / 2);
		G(mnp5_fptr) += 2;
		if (*G(mnp5_fptr) == 0)
			return;
	}
}

/****************************************************************
Routine : mnp5_run_length_encoding
Description :
	Examines data waiting for transmission and applies run length
	encoding.
Parameters in :
	none
Parameters out :
	Flag to signal whether a character is available for packing
	into an MNP5 frame, or whether still in the middle of a "run".
	Maintains run length encoding variable values.
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked byte mnp5_run_length_encoding ( void )
{
	G(mnp5_run_length_return) = G(mnp5_char_hold1);
	if (G(mnp5_run_length_count) == 3) 
	{
		G(mnp5_run_length_count)--;
		G(mnp5_run_length_repeat_count) = 0;
		G(mnp5_run_length_match_char) = G(mnp5_char_hold1);
		return(CHAR_AVAIL);
	}
	else if (G(mnp5_char_hold1) == G(mnp5_run_length_match_char))
	{
		if (G(mnp5_run_length_count) != 0)
		{
			G(mnp5_run_length_count)--;
			return(CHAR_AVAIL);
		}
		else
		{
			G(mnp5_run_length_repeat_count)++;
			if (G(mnp5_run_length_repeat_count) == 250)
			{
				G(mnp5_repeat_count) = TRUE;
				G(mnp5_run_length_count) = 3;
				G(mnp5_run_length_return) = 250;
				return(CHAR_AVAIL);	// max repeat count
			}
			return(CHAR_NOT_AVAIL);
		}
	}
	else if (G(mnp5_run_length_count) == 0) // chars do not match
	{
		G(mnp5_run_length_flag) = TRUE;
		G(mnp5_repeat_count) = TRUE;
		G(mnp5_run_length_match_char) = G(mnp5_char_hold1);
		G(mnp5_run_length_count) = 2;
		G(mnp5_run_length_return) = G(mnp5_run_length_repeat_count);
		G(mnp5_run_length_repeat_count) = 0;
		return(CHAR_AVAIL);
	}
	else 
	{
		G(mnp5_run_length_count) = 2;
		G(mnp5_run_length_match_char) = G(mnp5_char_hold1);
		return(CHAR_AVAIL);
	}
}

/****************************************************************
Routine : mnp5_run_length_flush
Description :
	Checks to see if the last character in a frame is a
	run-length repeat value.  If so, reset run length
	variables for the next frame.
Parameters in :
	none
Parameters out :
	Flag to indicate whether a run length repeat value is waiting
	to be sent.
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked byte mnp5_run_length_flush ( void )
{
	if (G(mnp5_run_length_count) == 0) 
	{
		G(mnp5_run_length_flag) = FALSE;
		G(mnp5_run_length_count)= 3;
		G(mnp5_run_length_return) = G(mnp5_run_length_repeat_count);
		G(mnp5_run_length_repeat_count) = 0;
		G(mnp5_repeat_count) = TRUE ;
		return(CHAR_AVAIL);
	}
	else
		return(CHAR_NOT_AVAIL);
}

/****************************************************************
Routine : mnp5_ad_frq_xmt
Description :
	Packs data to be sent into an MNP5 bit stream.  Along the way,
	updates tx frequency table by sorting and dividing the table,
	as needed.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked void mnp5_ad_frq_xmt ( void )
{
	if (G(mnp5_repeat_count) != 00)	// char is a repeat count
	{
		G(mnp5_tok_hdr) = mnp5_token_table[ G(mnp5_tx_inchar) * 2];
		G(mnp5_tok_body) = mnp5_token_table[(G(mnp5_tx_inchar) * 2) + 1];
		G(mnp5_repeat_count) = 0;
	}
	else
	{
		G(mnp5_token_offset) = MNP5_CHAR_TABLE[ G(mnp5_tx_inchar)];
		G(mnp5_tok_hdr) = mnp5_token_table[ G(mnp5_token_offset) * 2];	// header of token
		G(mnp5_tok_body) = mnp5_token_table[(G(mnp5_token_offset) * 2) + 1];	//body of token

		G(mnp5_fptr) = &MNP5_TX_FREQ_TABLE[ G(mnp5_token_offset) * 2];
		*G(mnp5_fptr) = (byte) (*G(mnp5_fptr) + 1);
		if (G(mnp5_token_offset) != 00)
		{
			G(mnp5_char_hold1) = *G(mnp5_fptr);
			G(mnp5_char_hold2) = *(G(mnp5_fptr)+1);
			G(mnp5_tokptr) = G(mnp5_fptr) - 2;
			while ( (G(mnp5_char_hold1) > *G(mnp5_tokptr)) && (G(mnp5_token_offset) != 0))
			{
				*(G(mnp5_fptr)+1) = *(G(mnp5_tokptr)+1);	// contents of ptr - 1
				MNP5_CHAR_TABLE[*(G(mnp5_fptr) + 1)]++;
				*G(mnp5_fptr) = *G(mnp5_tokptr);			// contents of ptr - 2
				G(mnp5_fptr) = G(mnp5_tokptr);
				G(mnp5_tokptr) -= 2;
				G(mnp5_token_offset)--;
			}
			*G(mnp5_fptr) = G(mnp5_char_hold1);
			G(mnp5_fptr)++;
			*G(mnp5_fptr) = G(mnp5_char_hold2);
			MNP5_CHAR_TABLE[ G(mnp5_char_hold2)] = G(mnp5_token_offset);	// ptr to char table
			//end sort_freq_table
		}
		if (MNP5_TX_FREQ_TABLE[0] == 0xff)
		{
			G(mnp5_fptr) = MNP5_TX_FREQ_TABLE;
			mnp5_div_freq_table();	// scale down freq table by factor of 2
		}
	}
	//end ad_freq_encode
	G(mnp5_token_count) = G(mnp5_tok_hdr);
	if ( G(mnp5_tok_hdr) == 00)
		G(mnp5_token_count) = 1;
	else if ((G(mnp5_tok_hdr) == 07) && (G(mnp5_tok_body) == 0xfe))
		G(mnp5_token_count) = 8;

	G(mnp5_token_count) += 3;
	G(mnp5_token_hold) = (word) ( ((word) G(mnp5_tok_hdr) << 13) + ((word) G(mnp5_tok_body) << 5)) ;

	//ad_token_store() follows
	while (G(mnp5_token_count) != 00) 
	{
		G(mnp5_token_count)--;
		if (G(mnp5_token_hold) & 0x8000)
			G(mnp5_tx_token_byte) = (byte) (G(mnp5_tx_token_byte) + G(mnp5_bitpos));
		G(mnp5_bitpos) = (byte) (G(mnp5_bitpos) >> 1);
		G(mnp5_token_hold) = (word) (G(mnp5_token_hold) << 1);
		if (G(mnp5_bitpos) == 0)
		{
			*G(lapm_data_ptr)++ = (byte) G(mnp5_tx_token_byte) ;
			G(lapm_iframe_ptr)->len++ ;
			G(mnp5_tx_token_byte) = 0;
			G(mnp5_bitpos) = 0x80;
		}
	}
	//end ad_token_store
}

/****************************************************************
Routine : mnp5_encode
Description :
	Encodes a byte to be transmitted into MNP5 compressed format.
Parameters in :
	uncompressed byte to be encoded
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/15/93	Initial
*****************************************************************/
non_banked void mnp5_encode ( byte inval )
{
	G(mnp5_char_hold1) = inval ;

	if (mnp5_run_length_encoding() == CHAR_AVAIL) 
	{
		//x_debug_msg("MNP5 - run_len_enc == CHAR_AVAIL") ;
		G(mnp5_tx_inchar) = G(mnp5_run_length_return);
		mnp5_ad_frq_xmt();
	}
	
	while (G(mnp5_run_length_flag))
	{
		//x_debug_msg("MNP5 - run_len_flag == TRUE") ;
		G(mnp5_run_length_flag) = FALSE;
		G(mnp5_tx_inchar) = G(mnp5_run_length_match_char);
		mnp5_ad_frq_xmt();
	}
}

/****************************************************************
Routine : mnp5_encode_flush
Description :
	Finishes MNP5 encoding process by checking for run-length
	and flush token to send.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	M.B.		07/15/93	Initial
*****************************************************************/
non_banked void mnp5_encode_flush ( void ) 
{
	if (mnp5_run_length_flush() == CHAR_AVAIL) 
	{
		//x_debug_msg("MNP5 - run_len_flush == CHAR_AVAIL") ;
		G(mnp5_tx_inchar) = G(mnp5_run_length_return);
		mnp5_ad_frq_xmt();
	}
	//ad_token_flush();
	if (G(mnp5_bitpos) != 0x80)
	{
		//x_debug_msg("MNP5 - ad_token_flush") ;
		G(mnp5_token_count) = 11;
		G(mnp5_token_hold) = 0xffff;
		
		//ad_token_store()
		while (G(mnp5_token_count) != 00) 
		{
			G(mnp5_token_count)--;
			if (G(mnp5_token_hold) & 0x8000)
				G(mnp5_tx_token_byte) = (byte) (G(mnp5_tx_token_byte) + G(mnp5_bitpos));
			G(mnp5_bitpos) = (byte) (G(mnp5_bitpos) >> 1);
			G(mnp5_token_hold) = (word) (G(mnp5_token_hold) << 1);
			if (G(mnp5_bitpos) == 0)
			{
				G(lapm_iframe_ptr)->len++ ;
				*G(lapm_data_ptr)++ = (byte) G(mnp5_tx_token_byte) ;
				G(mnp5_tx_token_byte) = 0;
				G(mnp5_bitpos) = 0x80;
			}
		}
		//end ad_token_store

		if (G(mnp5_bitpos) != 0x80)
		{
			//x_debug_msg("MNP5 - flush padding") ;
			*G(lapm_data_ptr)++ = (byte) 0xff ;
			G(lapm_iframe_ptr)->len++ ;
			G(mnp5_tx_token_byte) = 0;
			G(mnp5_bitpos) = 0x80;
		}
		G(mnp5_run_length_count) = 03;
	}
	//end ad_token_flush
}

/****************************************************************
Routine : mnp5_ad_frq_rcv
Description :
	Unpacks data coming in from an MNP5 bit stream.  Along the way,
	updates rx frequency table by sorting and dividing the table,
	as needed.
Parameters in :
	none
Parameters out :
	Flag indicating whether a receive character is available
	for dte, or whether it is part of a run (not available) .
Revision History :
	Initials	Date		Change
	M.B.		07/05/93	Initial
*****************************************************************/
non_banked byte mnp5_ad_frq_rcv ( void )
{
	while (G(mnp5_rx_head_pos) != 0)
	{
		if ((G(mnp5_rx_intoken) & G(mnp5_shift_pos)) == G(mnp5_shift_pos))
			G(mnp5_rx_head_hold) = (byte) (G(mnp5_rx_head_hold) + G(mnp5_rx_head_pos));

		G(mnp5_shift_pos) = (byte) (G(mnp5_shift_pos) >> 1);
		G(mnp5_rx_head_pos) = (byte) (G(mnp5_rx_head_pos) >> 1);

		if (G(mnp5_rx_head_pos) == 0)
		{
			G(mnp5_rx_body_hold) = G(mnp5_rx_body_count) = 0;
			G(mnp5_rx_body_pos) = 0x80;
			G(mnp5_rx_body_max) = G(mnp5_rx_head_hold);
			if (G(mnp5_rx_body_max) == 0)
				G(mnp5_rx_body_max) = 1;
			else if (G(mnp5_rx_body_max) == 7)
				G(mnp5_rx_body_max)++;
		}

		if (G(mnp5_shift_pos) == 0)
		{
			G(mnp5_shift_pos) = 0x80;
			return(CHAR_NOT_AVAIL);
		}
	}

	while ((G(mnp5_rx_body_count) < G(mnp5_rx_body_max)) && (G(mnp5_shift_pos) != 0))
	{
		if ((G(mnp5_rx_intoken) & G(mnp5_shift_pos)) == G(mnp5_shift_pos))
			G(mnp5_rx_body_hold) = (byte) (G(mnp5_rx_body_hold) + G(mnp5_rx_body_pos));
		else if (G(mnp5_rx_body_max) == 8)
			G(mnp5_rx_body_max) = 7;

		G(mnp5_rx_body_pos) = (byte) (G(mnp5_rx_body_pos) >> 1);
		G(mnp5_shift_pos) = (byte) (G(mnp5_shift_pos) >> 1);

		G(mnp5_rx_body_count)++;
	}

	if (G(mnp5_shift_pos) == 0)
	{
		G(mnp5_shift_pos) = 0x80;
		if (G(mnp5_rx_body_count) < G(mnp5_rx_body_max))
			return(CHAR_NOT_AVAIL); //we haven't finished the character
	}

	if (G(mnp5_rx_body_hold) == 0xff)
	{
		G(mnp5_rx_head_hold) = 0;
		G(mnp5_rx_head_pos) = 0x04;
		G(mnp5_shift_pos) = 0x80;
		G(mnp5_rx_run_length_count) = 3;
		return(CHAR_NOT_AVAIL); //we have a flush token...
	}

	switch (G(mnp5_rx_head_hold))
	{
		case (0):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 7) + 0);
			break;

		case (1):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 7) + 2);
			break;

		case (2):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 6) + 4);
			break;

		case (3):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 5) + 8);
			break;

		case (4):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 4) + 16);
			break;

		case (5):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 3) + 32);
			break;

		case (6):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 2) + 64);
			break;

		case (7):
			G(mnp5_rx_save) = (byte) ((G(mnp5_rx_body_hold) >> 1) + 128);
			break;
	}

	if ( G(mnp5_rx_run_length_count) != 0 ) //if this char not a repeat count...
	{
		G(mnp5_fptr) = &MNP5_RX_FREQ_TABLE[ G(mnp5_rx_save) * 2] + 1; //"G(parent)" is MNP rx frequency table
		G(mnp5_rx_save) = *G(mnp5_fptr);
		G(mnp5_fptr)--;
		*G(mnp5_fptr) = (byte) (*G(mnp5_fptr) + 1);	//increment the frequency
		if (*G(mnp5_fptr) != 00) // sort routine
		{
			G(mnp5_char_hold1) = *G(mnp5_fptr);
			G(mnp5_char_hold2) = *(G(mnp5_fptr)+1);
			G(mnp5_tokptr) = G(mnp5_fptr) - 2;
			while ( (G(mnp5_char_hold1) > *G(mnp5_tokptr)) &&
					(G(mnp5_tokptr) >= MNP5_RX_FREQ_TABLE )) 
			{
				*(G(mnp5_fptr)+1) = *(G(mnp5_tokptr)+1);	// contents of ptr - 1
				*G(mnp5_fptr) = *G(mnp5_tokptr);			// contents of ptr - 2
				G(mnp5_fptr) = G(mnp5_tokptr);
				G(mnp5_tokptr) -= 2;
			}
			*G(mnp5_fptr) = G(mnp5_char_hold1);
			G(mnp5_fptr)++;
			*G(mnp5_fptr) = G(mnp5_char_hold2);
			//end desort_freq_table
		}
		if (MNP5_RX_FREQ_TABLE[0] == 0xff)
		{
			G(mnp5_fptr) = MNP5_RX_FREQ_TABLE;
			mnp5_div_freq_table();				// scale down freq table by 2
		}
	}
	// end ad_frq_decode

	G(mnp5_rx_head_hold) = 0;
	G(mnp5_rx_head_pos) = 0x4;
	return(CHAR_AVAIL); //we have a character to return
}

/****************************************************************
Routine : mnp5_decode
Description :
	Decodes a single compressed MNP5 byte coming in from dce.
Parameters in :
	byte to be decoded
Parameters out :
	number of uncompressed bytes written to dte
Revision History :
	Initials	Date		Change
	M.B.		07/15/93	Initial
*****************************************************************/
non_banked byte mnp5_decode ( byte inval )
{
	byte ret_val = 0 ;
	
	G(mnp5_rx_intoken) = inval ;

	do
	{
		if ( mnp5_ad_frq_rcv() == CHAR_AVAIL )
		{
			//rx_run_length_decode() follows...
			if ( G(mnp5_rx_run_length_count) == 3 )
	 		{
				G(mnp5_rx_match_char) = G(mnp5_repeat_character) = G(mnp5_rx_save) ;
				G(mnp5_rx_run_length_count)-- ;
				G(mnp5_rx_loop_count) = 1 ;
			}
			else
			{
				if ( G(mnp5_rx_run_length_count) == 0 ) //char is a repeat count
				{
					G(mnp5_rx_run_length_count) = 3 ;
					G(mnp5_rx_loop_count) = G(mnp5_rx_save) ;
					G(mnp5_repeat_character) = G(mnp5_rx_match_char) ;
				}
				else
				{                                         
					if ( G(mnp5_rx_save) == G(mnp5_rx_match_char) )
					{
						G(mnp5_rx_run_length_count)-- ;
						G(mnp5_rx_loop_count) = 1 ;
						G(mnp5_repeat_character) = G(mnp5_rx_save) ;
					}
					else
					{
						G(mnp5_rx_run_length_count) = 2 ;
						G(mnp5_rx_loop_count) = 1 ;
						G(mnp5_rx_match_char) = G(mnp5_repeat_character) = G(mnp5_rx_save) ;
					}
				}
			} //end if-else on run_length decoding
			ret_val = (byte) (G(mnp5_rx_loop_count) + ret_val);
		} //end if on mnp5_ad_frq_rcv() == CHAR_AVAIL
		while ( G(mnp5_rx_loop_count) != 0 )
		{
			//x_debug_msg("MNP5 - in while(G(mnp5_rx_loop_count))") ;
			*G(lapm_dte_wptr)++ = G(mnp5_repeat_character) ;
			if ( G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )
				G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
			--G(mnp5_rx_loop_count) ;
 		}
	} while ( G(mnp5_shift_pos) != 0x80 ) ;
	return ( ret_val ) ;
}
#endif
