/*name and version number:@(#)lapm_lbb.c	1.22*/
/*date of get: 		  11/06/00 11:32:30*/
/*date of delta:	  11/03/00 11:07:35*/
/****************************************************************
File :	lapm_lbb.c
Description :
	lapm library banked.  Banked LAPM functions
	that aren't called too often and don't
	call other banked LAPM functions.

Procedures Contained :
	lapm_init_variables
	lapm_init
	lapm_rx_xid_frame
	lapm_disconnecting
	lapm_setup_ETC_modem_rate
	lapm_build_xid_parameter
	lapm_send_xid 

Revision History :
	Initials	Date		Change
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE
#if defined(Z80_DEBUG_THIS_FILE)
#define XID_DUMP
#endif

#include "llglob_d.h"
#include "ioglob_d.h"
#include "atglob.h"
#include "lapm.h"
#include "v44.h"
#include "mnp.h"
#include "z80glob.h"
#include "allglobs.h"

#if defined(CS_4)
# define Z80_DEBUG_THIS_FILE
#endif // CS_4

/****************************************************************
Routine : lapm_init_variables
Description :
	Initialize all lapm data variables and frames
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void lapm_init_variables ( void )
{
	byte i ;
	word j ;

	for ( i = 0 ; i < ALLOC_NO_OF_TX_FRAMES ; ++i )
	{
		G(lapm_transmit_frame) [i].txstatus = EMPTY ;
		G(lapm_transmit_frame) [i].len = 0 ;
		// clear poll bit in a i-frame - used by radish
		G(lapm_transmit_frame)[i].data[2] = 0 ;
	}
	G(lapm_prev_empty_ltfp) =  &G(lapm_transmit_frame)[0];
	G(lapm_prev_full_ltfp) =  &G(lapm_transmit_frame)[0];
	G(lapm_prev_ack_ltfp) =  &G(lapm_transmit_frame)[0];

	if (LAPM_MODE)
	{
		for (i = 0 ; i < NO_OF_LAPM_RECEIVE_FRAMES ; ++i)
		{
			LRQ(i).rxstatus = EMPTY;
			LRQ(i).len = 0;
		}
	}
	else
	{
		for (i = 0 ; i < NO_OF_MNP_RECEIVE_FRAMES ; ++i)
		{
			MRQ(i).status = EMPTY;
			MRQ(i).len = 0;
		}
	}

	LRF.status = EMPTY ;
	LRF.len = 0 ;
	for ( j = 0 ; j < LAPM_FRAME_SIZE ; ++j ) LRF.data[j] = 0 ;

	LCF.status = EMPTY ;
	LCF.len = 0 ;

	G(lapm_ui_frame).txstatus = EMPTY ;
	G(lapm_ui_frame).len = 0 ;

#if defined(NEED_VARIABLE_DLCI)
	G(lapm_data_dlci) = LAPM_DEFAULT_DLCI;
#endif // NEED_VARIABLE_DLCI

	G(lapm_vs) = 0 ;
	G(lapm_va) = 0 ;
	G(lapm_vr) = 0 ;
	G(lapm_ns) = 0 ;
	G(lapm_vrb) = 0 ;
	G(lapm_vsb) = 0 ;

	// T401 is the amount of time we will wait for an acknowledgement
	// before assuming the frame was lost.
	// 11/1/99 - mah/rwf - used to be 3 seconds.  This lets
	// us recover faster from lost packets, seems to help.
	// 04/13/00 - rwf - Allow receive side SREJ to operate.
	G(lapm_t401) = SECOND2;

	// lapm_k is maximum number of outstanding frames.
	// we want this to be the smaller of our transmit and
	// receive buffer sizes.  (we use the same lapm_k for
	// both the transmit and receive window sizes.)
	// The way the code is, this must be at least one less than
	// the number of slots in the receive queue, since
	// a partially processed frame is acknowledged as having
	// been received, but still could take up a slot in the
	// array.
	G(lapm_k) = NO_OF_LAPM_RECEIVE_FRAMES - 1;
	G(lapm_last_ltfp) =  &G(lapm_transmit_frame)[ NO_OF_LAPM_RECEIVE_FRAMES - 1 ];

	// lapm_srej_negotiated indicates whether we've negotiated
	// s-SREJ procedure with the other modem.
	G(lapm_srej_negotiated) = TRUE;

	// maximum number of bytes in a i-frame
	if ( (G(ETC_mode) & ETC_MODE_MASK) == ETC_MODE_CELL_MASK_BIT ) //+ #ETC
	{
		G(lapm_n401) = 64 ;		// max size for cellular calls
	}
	else
	{
		G(lapm_n401) = LAPM_IFRAME_SIZE ;
	}

	G(lapm_retransmit) = 0 ;
	G(lapm_xmit_timer) = 0 ;
	G(lapm_remote_busy) = FALSE ;
	G(lapm_local_busy) = FALSE ;
	G(lapm_reject_sent) = FALSE ;
	G(lapm_rx_iframe) = FALSE ;
	G(lapm_iframe_ptr) = 0 ;
	G(lapm_rx_dte_char) = FALSE ;
	G(lapm_data_ptr) = 0 ;
	G(lapm_v42b_err) = 0 ;
	G(lapm_detected_odp) = 0;
	G(lapm_rx_lrq_count) = 0;
	G(lapm_rx_srej_count) = 0;
	G(lapm_tx_srej_count) = 0;

	G(lapm_state) = LAPM_IDLE ;
	G(mnp_rx_octet_state) = MNP_RX_OCTET_SYNC ;
	G(lapm_odp_rptr) = G(io_dce_rx_sptr) ;

	#if defined(HDLC_FRAMES_BY_REFERENCE)
	lapm_clrTXflags();
	#endif	//HDLC_FRAMES_BY_REFERENCE
}

/****************************************************************
Routine : lapm_init
Description :
	init lapm variables - transmit odp if originator.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void lapm_init ( void )
{
	G(io_state) = IO_V42;
	mnp_init_variables();
	lapm_init_variables();
	// switch to async 8 bit, no parity
	x_send_mail ( DP_ASYNC_8BIT_MODE, DP_TASK, NULL, 0 ) ;
	if ( G(x_modem_originate) == TRUE )
	{
		G(lapm_state) = LAPM_TX_ODP ;
		x_debug_msg("lapm_init : goto LAPM_TX_ODP");
	}
	else
	{
		G(lapm_state) = LAPM_RX_ODP ;
		x_debug_msg("lapm_init : goto LAPM_RX_ODP");
	}
	lapm_reset_timer();
}

#if defined(HDLC_FRAMES_BY_REFERENCE)
/****************************************************************
Routine : lapm_clrTXflags
Description :
	Clear TX in DCE Ring Buffer flag.

Revision History :
	Initials	Date		Change
	rwf			04/19/00	Initial
*****************************************************************/
void lapm_clrTXflags ( void )
{
	byte i;

	for (i = 0; i < G(lapm_k) ; i++)
	{
		LTF[ i ].cnt = 0;
	}
	G(lapm_max_iframes) = 0 ;
}
#endif	//HDLC_FRAMES_BY_REFERENCE

/****************************************************************
Routine : lapm_rx_xid_frame
Description :
	receive XID HDLC or SABME frame from DCE.

Revision History :
	Initials	Date		Change
	rwf			02/01/00	Initial
*****************************************************************/
void lapm_rx_xid_frame ( void )
{
	word rx_ch;

	if ( (LRF.status == FULL) && (LRF.len != 0) )
	{
		//x_debug_msg ( "lapm - previous not processed yet... " ) ;
		return ;
	}

	while ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) )
	{
		rx_ch = *G(io_dce_rx_rptr)++ ;
		if ( G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;

		if ( rx_ch & HDLC_CRC_ERROR )	
		{
			x_debug_msg("CRC ERROR");
			LRF.len = 0 ;
		}
		else if ( (rx_ch & HDLC_START_OF_FRAME) || (LRF.len == 0xffff) )
		{
			#if defined(Z80_DEBUG_THIS_FILE)
			if ( rx_ch & HDLC_START_OF_FRAME )
			{
				x_debug_msg("START:: ");
			}
			#endif	// Z80_DEBUG_THIS_FILE

			// looking for XID frame
			if ( (byte)rx_ch == XID )
			{
				x_debug_msg("Got embedded XID: ");
				LRF.len = 2 ;
				LRF.data[ 1 ] = XID ;
			}
			else if ( (byte)rx_ch == SABME )
			{
				x_debug_msg("Got embedded SABME: ");
				LRF.len = 2 ;
				LRF.data[ 1 ] = SABME ;
				if ( rx_ch & HDLC_END_OF_FRAME ) 
				{
					LRF.status = FULL ;
					x_debug_msg("FRAME Complete");
					return ;
				}
			}
			else
			{
				// async fragment - probably ODP
				LRF.data[ 0 ] = (byte)rx_ch ;
				LRF.len = 0xffff ;
			}

			sendHexWord(rx_ch); sendDumbChar(' ');
		}
		else if ( LRF.len > 0 )
		{
			LRF.data[ LRF.len++ ] = (byte)rx_ch ;

			sendHexWord(rx_ch); sendDumbChar(' ');

			if ( rx_ch & HDLC_END_OF_FRAME ) 
			{
				x_debug_msg("END");
				if ( rx_ch & HDLC_CRC_ERROR )	
				{
					LRF.len = 0 ;
					x_debug_msg("CRC-ERROR");
				}
				else
				{
					LRF.status = FULL ;
					x_debug_msg("FRAME Complete");
					return ;
				}
			}

			if ( LRF.len >= LAPM_FRAME_SIZE )
			{
				x_debug_msg("FRAME TOO LONG");
				LRF.len = 0 ;
			}
		}
	}
}

/****************************************************************
Routine : lapm_disconnecting
Description :
	return true iff we're in the process of disconnecting
	Right now this only takes LAPM into account
*****************************************************************/
byte lapm_disconnecting(void)
{
	return (byte) ((IO_V42 == G(io_state)) &&
				   (LAPM_DISC_CMD == G(lapm_state)));
}


/****************************************************************
Routine : lapm_setup_ETC_modem_rate
Description :
	update modem rate after successful ETC negotiation

*****************************************************************/
void lapm_setup_ETC_modem_rate ( void )
{
	if ( G(ETC_mode) )
	{
#ifdef CS_ETC
		x_debug_msg("lapm_setup_ETC_modem_rate()");
#endif
		x_send_mail ( UPDATE_MODEM_RATE, DP_TASK, NULL, 0 ) ;
	}
}

/****************************************************************
Routine : lapm_send_break
Description :
	Build break frames and send out. Right now when we transmit
	we assume default break length and Non-destructive/non_expedited
	break type.
Parameters in :
	cr - Command or Response. ( 1 - Command )
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/12/93	Initial
*****************************************************************/
void lapm_send_break ( byte cr )
{
	if ( cr == TRUE ) 	 /* break command */
	{
		x_debug_msg("lapm - send break cmd") ;

		/* address field */
		if ( G(x_modem_originate) )
			LUF.data[0] = 0x03 ;
		else
			LUF.data[0] = 0x01 ;
		
		// insert the dlci value..
		LUF.data[0] |= (LAPM_DATA_DLCI() <<2);
		
		LUF.data[1] = UI ;
		LUF.data[2] = (byte) (BRK | G(lapm_vsb));
		LUF.data[3] = 0x00 ;
		LUF.len = 4 ;
	}
	else	/* break acknowledgement */
	{
		x_debug_msg("lapm - send break response") ;

		/* address field */
		if ( G(x_modem_originate) )
			LUF.data[0] = 0x01 ;
		else
			LUF.data[0] = 0x03 ;
	
		// insert the dlci value..
		LUF.data[0] |= (LAPM_DATA_DLCI() <<2);

		LUF.data[1] = UI ;
		LUF.data[2] = (byte) (BRKACK | G(lapm_vrb));
		LUF.len = 3 ;
	}
	LUF.txstatus = FULL ;
	lapm_b_tx_hdlc_frame() ;
}

/****************************************************************
Routine : lapm_process_break
Description :
	This routine will process the break frame received.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/12/93	Initial
*****************************************************************/
void lapm_process_break ( void )
{
	byte tmp_lapm_k, tmp_lapm_n401, tmp_lapm_vrb ;

	if ( ((LRF.data[0] & C_R) && !G(x_modem_originate)) ||
		(!(LRF.data[0] & C_R) &&  G(x_modem_originate)) )
	{
		/* It is a command, It should be BRK, we send BRKACK */
		x_debug_msg("lapm - rcv break cmd") ;

		if ( ( LRF.data[2] & 0x7f ) != BRK ) 
			return ;
		if ( LRF.data[2] & 0x80 )
			G(lapm_vrb) = 0x00 ;
		else
			G(lapm_vrb) = 0x80 ;
		lapm_send_break ( FALSE ) ;
		UART_dce_break_on () ;	/* set uart status bit */
		/* 
		 * If the break we received is Destructive/expedited, All the state 
		 * variables pertaining to control function
		 * and error control function operation, except those pertaining
		 * to break transfer, are reset to their initial values
		 */
		if ( LRF.data[3] & 0x80 )
		{
			tmp_lapm_k = G(lapm_k) ;
			tmp_lapm_n401 = G(lapm_n401) ;
			tmp_lapm_vrb = G(lapm_vrb) ;
			lapm_init_variables () ;
			v42bis_init_variables () ;
			G(lapm_state) = LAPM_CONNECT ;
			G(lapm_k) = tmp_lapm_k ;
			G(lapm_n401) = tmp_lapm_n401 ;
			G(lapm_vrb) = tmp_lapm_vrb ;
		}
	}
	else
	{
		/* It is a response, that should be BRKACK */
		x_debug_msg("lapm - rcv break ack") ;

		if ( (byte)( LRF.data[2] & 0x7f ) != BRKACK ) 
			return ;
		if ( G(lapm_vsb) )
			G(lapm_vsb) = 0x00 ;
		else
			G(lapm_vsb) = 0x80 ;
	}
}

/****************************************************************
Routine : lapm_build_xid_parameter
Description :
	Build XID Parameter field. Called by lapm_send_xid().
*****************************************************************/
static byte lapm_build_xid_parameter(byte *ptr, byte parm_id, word parm_val)
{
	byte i, parm_length, flag;
	byte *hold_ptr;
	word temp;

	*ptr++ = parm_id ;
	hold_ptr = ptr;
	ptr++;

	parm_length = 0;
	flag = FALSE;

	for ( i = 0; i < 2; i++ )
	{
		temp = (word) (parm_val & 0xff00);

		if ( (temp != 0) || flag )
		{
			flag = TRUE ;
			*ptr++ = (byte) (temp >> 8) ;
			parm_length += 1;
		}
		parm_val = (word) (parm_val << 8);
	}
	*hold_ptr = parm_length;

	return (byte) (parm_length+2);
}

/****************************************************************
Routine : lapm_send_xid
Description :
	Build XID frame and send to the remote modem.
Parameters in :
	cr - command/response bit
*****************************************************************/
void lapm_send_xid(byte cr)
{
	#if defined(XID_DUMP)
	byte i;
	#endif // XID_DUMP
	byte j;

	if ( LUF.txstatus == FULL )
		return;			// Already UI outstanding, don't overwrite.

	/* address field */
	if ( cr == TRUE )
	{
		if ( G(x_modem_originate) )
			LUF.data[0] = 0x03 ;
		else
			LUF.data[0] = 0x01 ;
	}
	else
	{
		if ( G(x_modem_originate) )
			LUF.data[0] = 0x01 ;
		else
			LUF.data[0] = 0x03 ;
	}
	
	// insert the dlci value..
	LUF.data[0] |= (LAPM_DATA_DLCI() <<2);

	/* control field */
	LUF.data[1] = XID ;

	/* information field */
	LUF.data[2] = XIDfid ;	/* format identifier subfield */

	/* data link layer subfield */
	LUF.data[3] = XIDgid ;	/* group identifier */

	LUF.data[6] = XIDopt ;	/* optional functions */
	LUF.data[7] = 0x3 ;

	// Indicate we want selective reject (s-SREJ) if it hasn't been
	// negotiated away.
	LUF.data[8] = (byte) (G(lapm_srej_negotiated) ?
						  (XIDpv1 | XIDsrej) : XIDpv1);

	if ( (cr == FALSE) && G(lapm_extended_fcs) )
		LUF.data[9] = XIDpv2 & 0x7f ;
	else
		LUF.data[9] = XIDpv2 ;
	LUF.data[10] = 0x0 ;

	j = 11 ;
	j = (byte) (j + lapm_build_xid_parameter(&LUF.data[j], XIDtn401,
											 (word)(G(lapm_n401)*8)));
	j = (byte) (j + lapm_build_xid_parameter(&LUF.data[j], XIDrn401,
											 (word)(G(lapm_n401)*8)));

	// window sizes
	j = (byte) (j + lapm_build_xid_parameter(&LUF.data[j], XIDtk, G(lapm_k)));
	j = (byte) (j + lapm_build_xid_parameter(&LUF.data[j], XIDrk, G(lapm_k)));

	LUF.data[4] = 0x0 ;
	LUF.data[5] = (byte) ((j - 6) & 0xff);

	/*
	 * if we are originating or if we are responding and someone asked
	 * for V.42bis but not V.44, put the V42bis section in the XID
	 * frame */
	if ( (cr == TRUE ) ||
		 ( G(v42bis_P0) != 0
#if defined(V44)
		   && G(v44_P0) == 0
#endif // V44
			 ) )
	{
		/* Negotiation parameters for V.42bis Data Compression */
        if ( ( G(S).ModemOptions.Compression & V42BIS_COMP ) )  // checks bit1
		{
			LUF.data[j++] = COMPgid;
			LUF.data[j++] = 0;
			LUF.data[j++] = 0xf;
			LUF.data[j++] = COMPsid;
			LUF.data[j++] = 0x3;
			LUF.data[j++] = 'V';
			LUF.data[j++] = '4';
			LUF.data[j++] = '2';
			LUF.data[j++] = COMPp0id;		/* parameter P0 */
			LUF.data[j++] = 0x1;
			if ( cr == TRUE )
				LUF.data[j++] = V42bisP0 ;	/* request value */
			else
				LUF.data[j++] = G(v42bis_P0) ;	/* negotiated value */
			LUF.data[j++] = COMPp1id;		/* parameter P1 */
			LUF.data[j++] = 2;
			if ( cr == TRUE )
			{
				LUF.data[j++] = V42bisP1 >> 8 ;	/* request value */
				LUF.data[j++] = V42bisP1 & 0x00ff ;
			}
			else
			{
				LUF.data[j++] = (byte)(G(v42bis_N2) >> 8) ; // negt. value
				LUF.data[j++] = (byte)(G(v42bis_N2) & 0x00ff) ;
			}
			LUF.data[j++] = COMPp2id;	/* parameter P2 */
			LUF.data[j++] = 0x1;
			if ( cr == TRUE )
				LUF.data[j++] = V42bisP2 ;	/* request value */
			else
				LUF.data[j++] = G(v42bis_N7) ;	/* negotiated value */
		}
		if ( cr == FALSE )
		{
			if( G(v42bis_P0) == 0x1 )		/* remote to local */
				G(v42bis_P0) = DECODER ;	/* do decoder */
			else if ( G(v42bis_P0) == 0x2 )	/* local to remote */
				G(v42bis_P0) = ENCODER ;	/* do encoder */
		}
	}

#if defined(V44)
	/*
	 * if we originated or if we are responding and someone asked for V.44,
	 * put the V.44 section in the XID frame 
	 */
	if ( cr == TRUE || G(v44_P0) != 0 ) {
		// Negotiation params for V.44 compression
		if ( (G(S).ModemOptions.Compression & V44_COMP) &&
			 (!(G(S).ModemOptions.Compression & V44S_COMP) 
#if !defined (CS_MODEM)
			|| (AT_MOD_V92 == G(x_status).Connection)
#endif
			))
		{
			x_debug_msg("sending V.44 XID");

			// Set V.44 XID params in User Data Subfield
			// This must be the last parameter group prior to FCS
			LUF.data[j++] = UDSgid;	// User Data Sub-field id
			LUF.data[j++] = V44psid;	// V.44 parameter set id
			LUF.data[j++] = 0x03;	// Length of string
			LUF.data[j++] = 'V';
			LUF.data[j++] = '4';
			LUF.data[j++] = '4';

			// V.44 Capability (C0)
			LUF.data[j++] = COMP_v44_c0id;
			LUF.data[j++] = 0x1;
			LUF.data[j++] = 0x00;	// negotiate in XID

			// P0
			LUF.data[j++] = COMP_v44_p0id;
			LUF.data[j++] = 0x1;
			if ( cr == TRUE )
				LUF.data[j++] = V44P0 ;	/* request value */
			else {
				// For responses only,
				// Invert P0 if compression in one direction only
				if ( G(v44_P0) == ENCODER ) {
					G(v44_P0) = DECODER;
				}
				else if ( G(v44_P0) == DECODER ) {
					G(v44_P0) = ENCODER;
				}
				LUF.data[j++] = G(v44_P0) ;	/* negotiated value */
			}

			// P1T
			LUF.data[j++] = COMP_v44_p1tid;
			LUF.data[j++] = 2;
			LUF.data[j++] = (byte)(G(v44_en_n2) >> 8) ;
			LUF.data[j++] = (byte) G(v44_en_n2) ;

			// P1R
			LUF.data[j++] = COMP_v44_p1rid;
			LUF.data[j++] = 2;
			LUF.data[j++] = (byte)(G(v44_de_n2) >> 8) ;
			LUF.data[j++] = (byte) G(v44_de_n2) ;

			// P2T
			LUF.data[j++] = COMP_v44_p2tid;
			LUF.data[j++] = 0x1;
			LUF.data[j++] = (byte) G(v44_en_n7) ;

			// P2R
			LUF.data[j++] = COMP_v44_p2rid;
			LUF.data[j++] = 0x1;
			LUF.data[j++] = (byte) G(v44_de_n7) ;

			// P3T
			LUF.data[j++] = COMP_v44_p3tid;
			LUF.data[j++] = 0x2;
			LUF.data[j++] = (byte)(G(v44_en_n8) >> 8) ;
			LUF.data[j++] = (byte) G(v44_en_n8);
			//printf("v44_en_n8=0x04%x, LUF.data = 0x%02x, 0x%02x\n", G(v44_en_n8), LUF.data[j-2], LUF.data[j-1] );

			// P3R
			LUF.data[j++] = COMP_v44_p3rid;
			LUF.data[j++] = 0x2;
			LUF.data[j++] = (byte)(G(v44_de_n8) >> 8) ;
			LUF.data[j++] = (byte) G(v44_de_n8);
		}
	}
#endif // V44

	#if defined(XID_DUMP)
	x_debug_msg("send XID DUMP");
	for (i = 0; i < j; i++) {
		sendHexByte( LUF.data[i] );
		sendDumbChar( ' ' );
	}
	sendCrLf();
	#endif // XID_DUMP

	LUF.len = j ;
	LUF.txstatus = FULL ;
	lapm_b_tx_hdlc_frame() ;
}

