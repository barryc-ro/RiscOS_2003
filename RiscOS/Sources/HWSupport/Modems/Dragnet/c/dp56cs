/*name and version number:@(#)dp56cs.c	1.31*/
/*date of get: 		  12/15/00 10:10:40*/
/*date of delta:	  11/30/00 16:56:28*/
/****************************************************************
File :	dp56cs.c
Description :
	k56flex/V.90 VENUS central site data pump interface.

*****************************************************************/

#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"

#if defined(VPCM_SERVER)
#include "atglob.h"
#include "dpglob.h"
#include "z80glob.h"
#include "sync.h"
#include "lapm.h"
#ifdef CS_DEBUG
# include "dp56kv.h"
#endif

#if defined(CS_MODEM)
# include "csglob.h"
#endif
#include "allglobs.h"

#if defined(HCF_WORKAROUND)
byte dp_k56_rbs_check ( void );
#endif

#if defined(CS_MODEM)
extern word cs_lineprob_buf[100];		
extern word *cs_lineprob_ptr;
#endif // CS_MODEM

#ifdef COP_ADV_DEBUG					//Ro
void dp_print_mse_debug_values (void);
#endif

extern byte dp_copernicus_hangup(void);
extern void dp_56k_connect(void);
extern byte dp_56k_dial_connect_success ( void );

// In the venus base map (normal V.34)
#if !defined(DRAGNET)
#define VENUS_BASE_MAP	(!(dp_dsp_int_regread(8) & 0x0800))
#endif // !DRAGNET
#define VENUS_CENTRAL_SITE
#define K56V_VERSION_RAM	0x2017
#define TC_LP1				0x7435

//	server defines
#define EIA_LOOP_67_THRESH	0x14a0 
#define EIA_LOOP_45_THRESH	0x04a0
#define EIA_LOOP_67_MSE		0x2400
#define EIA_LOOP_45_MSE		0x3000
#define VPCM_GOTO_ROM_ADRH		0xd0
#define VPCM_GOTO_ROM_ADRL		0xcb
#define A_75MS				0x9123

#define K56V_GOTO_ROM_ADRH		0xd0
#define K56V_GOTO_ROM_ADRL		0xcb
#define K56V_MODE_RAM			0x1ff0

#define MSE_SCALE		0x0825

/**************************************************************************
	Function declarations
***************************************************************************/
extern void dp_56k_v34_mode(void);
extern void dp_56k_v34_training_state(void);
extern void dp_56k_setFill(byte);

#define CHK_VF_PP	0xdc01	//chk_VF_PP
// near echo cancellor work around 
// applies to cs (numeric) copernicus and cs4


/****************************************************************
Routine : dp_56k_startup_cmd - central site
*****************************************************************/
void dp_56k_startup_cmd(void)
{
	word temp;

	x_debug_msg("dp - dp_56k_startup_cmd - central site");
	dp_write_dsp_ram ( 0x2007, 0x0000 );
	dp_write_dsp_ram ( 0x2008, 0x0001 );
	dp_write_dsp_ram ( 0x2009, 0x0000 );

//Change for K56flex bug workaround in association with 255 flex dsp code
	dp_write_dsp_ram ( 0x1ff6, 15 );

	if (G(S).ModemOptions.DigitalLoss56K & 1)
	{
		x_debug_msg("dp - A-law");
		dp_write_dsp_ram ( 0x200D, 0x0001 );	// A-law
		dp_write_dsp_ram(K56V_MODE_RAM, 0x0005);	// k56 enable
	}
	else
	{
		x_debug_msg("dp - u-law");
		dp_write_dsp_ram ( 0x200D, 0x0000 );	// u-law
		dp_write_dsp_ram(K56V_MODE_RAM, 0x0001);	// k56 enable
	}

	dp_write_dsp_ram ( 0x0046, 0x00ff );	// for kannan

	if (G(S).ModemOptions.Dummy9)
	{
		// do some good stuff for far echo canceller taps
		// far echo canceller taps different for digital case
		// This is now for debugging only and not needed
		// in the normal case.

		word v = (word) G(S).ModemOptions.Dummy9 << 1;

		if (v & 0x0080)
			v |= 0xff00;

		x_debug_msg("dp - writing 0x1ff5=");
		sendHexWord(v); sendCrLf();
		
		dp_write_dsp_ram(0x1ff5, v);
	}

#if defined(CS_DIGITAL)
	dp_write_dsp_ram ( 0x1ffc, 0x0000 );
#else
	dp_write_dsp_ram ( 0x1ffc, 0x0001 );
#endif

	dp_write_dsp_ram(0x1ffa, 0);	// not lucent proprietary
	dp_write_dsp_ram(0x200E, 0);	// no RBS
	dp_write_dsp_ram(0x1ffb, 0);

	if (250 == G(S).ModemOptions.Rate56K)
	{
		G(k56_version) |= 2;
	}

	x_debug_msg("k56_version=");
	sendHexByte(G(k56_version));
	sendCrLf();

	dp_write_dsp_ram(0x1ff2, 0);	// clear error recovery indication
	dp_write_dsp_ram(0x1ff1, 2);	// Set up for 1.1 - overwrite below
									// for 1.0 mode.

	if (!(G(k56_version) & 0x2))
	{
		if ( ( G(k56_version) & 0x21 ) != 0x21 )
		{
			x_debug_msg("Programming DSP for 1.0 mode.");
			dp_write_dsp_ram(0x1ff1, 1);	//program dsp for 1.0
		}
	}

	dp_write_dsp_ram(0x1ff9, (word) 0x0D);
	
	G(dp_56k_state) = DP_56K_ANS_PHASE1 ;
	
#if defined(CS_MODEM)
	dp_write_dsp_ram(MSE_SCALE, G(S).ModemOptions.wV34MSEScale);
#else
	dp_write_dsp_ram(MSE_SCALE, V34_MSE_SCALE);
#endif

	// Set up MP words for fallback to V.34
	if ( G(x_line_rate) == MR_33600 )
		G(x_line_rate) = MR_31200 ;
	temp = (G(x_line_rate) - 4) << 2 ;
	dp_write_dsp_ram(0x1ff3, temp);
	temp = dp_read_dsp_ram ( 0x80d ) ;
	dp_write_dsp_ram ( 0x1ff4, temp ) ;

	G(V34Mode) = 0;
	G(triedEvenThoughBad) = 0;
}

/****************************************************************
Routine : dp_56k_retrain (central site)
		  take care of 56k retrain.  Could go to either
		  PCM mode or V.34.
*****************************************************************/
void dp_56k_retrain(void)
{
	byte oldFill = G(DpIdleFillChar);

	x_debug_msg("dp_56k_retrain()");

	G(dp_line_state) = DP_LINE_RETRAINING ;

	// If we're in v.34 mode then we shouldn't do
	// the GOTO_CMD to do the retrain.  We'll
	// assume that a normal V.34 retrain should be
	// done in that case.
	if (VENUS_BASE_MAP)
	{
		// already in map 1
		dp_disable_workaround();
		dp_retrain_cmd();
		x_debug_msg("dp - already in map 1 - trying regular retrain");

		x_sleep(MS50);

		dp_write_dsp_ram(K56V_MODE_RAM, 0);
		// Fixes lock up retrain problem where V90
		// state machine runs indefinitely
		G(vpcm_mode) = 0;
	}
	else
	{
		if (G(vpcm_mode) == 1)
		{
			G(vpcm_datamode) = 0 ;
			x_debug_msg("dp_56k_retrain() - vpcm retrain (goto cmd)");
			dp_modem_command(GOTO_CMD,
							 VPCM_GOTO_ROM_ADRH,
							 VPCM_GOTO_ROM_ADRL);
			G(dp_56k_state) = VPCM_RETRAIN;
			dp_write_dsp_ram ( K56V_VERSION_RAM, 0x0000 );
		}
		else
		{
			x_debug_msg("dp_56k_retrain() - k56flex retrain (goto cmd)");

			// Nitin says for 1.202 we should reset
			// these to 0.  (I think he meant
			// for 1.0 mode only - mah).
			dp_write_dsp_ram(0x1ffb, 0);
			dp_write_dsp_ram(0x200e, 0);

			dp_modem_command(GOTO_CMD,
						 K56V_GOTO_ROM_ADRH,
						 K56V_GOTO_ROM_ADRL);
			G(dp_56k_state) = DP_56K_ANS_PHASE1;
		}

		x_sleep(MS50);

		if (!dp_read_dsp_ram (0x0080))
		{
			x_debug_msg("0080 = 0, dead dsp");
		}

		dp_56k_setFill(oldFill);
		G(dp_timer1) = G(dp_timer) = x_current_time ();
		x_set_current_time(&G(dp_long_timer));
	}

	if ((0 == G(vpcm_mode)) && (0 == dp_read_dsp_ram(K56V_MODE_RAM)))
	{
		x_debug_msg("dp_56k_retrain() - heading for V.34");
		dp_56k_v34_mode();
		dp_56k_v34_training_state();
	}
}

/****************************************************************
Routine : dp_56k_data_mode
		  central site checks in data mode
*****************************************************************/
void dp_56k_data_mode(void)
{
	word temp;

	if (dp_lapm_error_check())
	{
		temp = dp_read_dsp_ram (0x0821);
		dp_write_dsp_ram (0x821, (word) (temp | 0x1000));  // Set bit rate selection bit (12) to manually force rate change down
		dp_write_dsp_ram(0x1ff9,(word) (((dp_read_dsp_ram(0x834)) - 1)));
		G(dp_cs_local_retrain_ratechange) = 1;
		dp_56k_retrain_cmd(1) ;
	}

	if ( DSP_IN_RATECHANGE() )
	{
		word retrain_status = DP_READ_DSP_3A();

		if (retrain_status & 0x2) // retrain 
		{
#if defined(CS_MODEM)
			//update msi retain count and remote/local
			cs_k56_remote_or_local(RETRAIN);	
#else
			REMOTE_RET_INCREMENT;
#endif
			// clear retrain bit
			dp_write_dsp_ram(0x3a, (word) (retrain_status & ~0x0002));
			dp_56k_retrain();
		}
		else if (retrain_status & 0x4) // fast rate change 
		{
			#if defined(CS_MODEM)
			if (G(k56_ratechange_detected) == NO)
			{
				if (G(dp_cs_local_retrain_ratechange))
				{
					cs_k56_remote_or_local(RETRAIN);	
				}
				else
				{
					//update msi retain count and remote/local
					cs_k56_remote_or_local(FAST_RATE_CHANGE);
					G(k56_ratechange_detected) = YES;
				}
			}
			#endif // CS_MODEM

			if (!G(fastRateChangeMessagePrinted))
			{
				// - this value is non-zero for Rockwell client
				#ifdef HCF_WORKAROUND
				if ( G(dp_v8bis_rockwell_client) )
				{
					if ( dp_k56_rbs_check() == TRUE )  // only do this on RBS lines 
						G(dp_v8bis_rockwell_client)++;    // increment count, if 2, drop one rate and then retrain
													   // when ratechange is complete, if more than 2 just retrain
				}
				#endif
				x_debug_msg ("dp - 56k fast rate change detected");
				G(fastRateChangeMessagePrinted) = 1;
				if (G(dp_cs_local_retrain_ratechange))
					G(dp_cs_local_retrain_ratechange) = 0;
				else
				{
					#if !defined(CS_MODEM) 
					REMOTE_RR_INCREMENT;
					#endif
				}
			}

			// If we've been in a fast rate change situation
			// for too long then issue a retrain.
			if (x_elapsed_time (G(dp_timer)) >= (SECOND3))
			{
				cs_insert_error_tag ( 0xf500 , 0 );
				x_debug_msg ("dp - too long in fast rate change");
				dp_56k_retrain();
			}
		}
	}
	//*********************************************************************
	// The following workaround is intended for Rockwell HCF modems where 
	// on certain lines, these modems would continuously issue rate changes
	// in Flex, without any improvement or change in the rate.
	// Therefore, if we have observed 2 ratechanges by the Rockwell client,
	// we drop the rate by 1 and then issue a retrain.
	//*********************************************************************
	#ifdef HCF_WORKAROUND
	// has there been another rate change ?
	else if (G(dp_v8bis_rockwell_client) > G(p_rock_client))
	{
		// Wait about 1/2 second before issuing a retrain to make sure that
		// the remote has fully completed the rate change
		x_sleep (500);

		G(p_rock_client) = G(dp_v8bis_rockwell_client);
		if (G(dp_v8bis_rockwell_client) == 2)
		{
			cs_insert_error_tag (0xd700 , 0);
			x_debug_msg ("dp - k56flex ratechange with Rockwell client, drop 1 rate and do retrain");
			temp = dp_read_dsp_ram( 0x1ff6 );  // decrement flex rate by 1
            if (temp > 1)
				dp_write_dsp_ram( 0x1ff6 , (temp - 1) );
		}
		else
		{
			cs_insert_error_tag (0xd600 , 0);
			x_debug_msg ("dp - k56flex ratechange with Rockwell client, do retrain");
		}
		#if defined(CS_MODEM)
		//update msi retain count and remote/local
		G(dp_cs_local_retrain_ratechange) = 1; 
		cs_k56_remote_or_local(RETRAIN);	
		#else
		LOCAL_RET_INCREMENT;
		#endif
		dp_56k_retrain();
	}
	#endif // HCF_WORKAROUND
	else
	{
		#if defined(CS_MODEM)
		cs_msi_update();	//NewMSI update MSI and reset msi timer
		if (G(k56_ratechange_detected) == YES)
		{
			if (dp_read_dsp_ram(0x3A) & 0x0008)
			{
				G(k56_ratechange_detected) = NO;
				dp_get_line_rate();
				cs_msi_update();	
				cs_compose_forward_or_back();
			}
		}
		#endif
		G(dp_timer) = x_current_time();
		G(fastRateChangeMessagePrinted) = 0;
	}

	if (x_elapsed_time(G(k56_timer)) >= SECOND1) 
	{
		G(k56_timer) = x_current_time () ;

		#if !defined(CS_MODEM)
		G(x_status).NoiseLevel = dp_read_dsp_ram(0x4c);
		#endif
		if (dp_read_dsp_ram(0x835) & 0x4)
		{
			if (G(dp_count) > 6)
			{
				#if !defined(CS_MODEM)
				LOCAL_RET_INCREMENT; 
				#endif
				dp_56k_retrain();
			}
			else
			{
				++G(dp_count) ;
				x_debug_msg("dp - 56k : bad_mse++ : dp_count=");
				sendDecByte(G(dp_count)); sendCrLf();
			}
		}
		else
		{
			if ( G(dp_count) != 0 )
			{
				--G(dp_count) ;
				x_debug_msg("dp - 56k : bad_mse-- : dp_count=");
				sendDecByte(G(dp_count)); sendCrLf();
			}
		}
	}
}

/****************************************************************
Routine : dp_56k_background
		  background states
*****************************************************************/
void dp_56k_background ( void )
{
	word temp ;

	// for non-RTOS CS-4 in polled mode - check for DSP I/O
	#if !defined(MQX)
		DP_CHKDSP() ;
	#endif

	#if defined(CS_4)
	if ( G(p_dp_56k_state) != G(dp_56k_state) )
	{
		G(p_dp_56k_state) = G(dp_56k_state);
		x_debug_msg("56K_STATE=");
		sendDecByte(G(dp_56k_state));sendCrLf();
	}
	#endif

	switch ( G(dp_56k_state) )
	{
	default:
		break;

	case DP_56K_DATA_MODE:
		dp_56k_data_mode();
		break;

	case DP_56K_ANS_AFTER_MP :
		// Wait here for data mode or timeout
		if (x_elapsed_time (G(dp_timer)) >= (SECOND10))
		{
			cs_insert_error_tag ( 0xff00 , 0 );
			x_debug_msg("dp - timeout waiting for K56 data mode");
			dp_56k_retrain();
		}
		else
		{
			if (dp_56k_dial_connect_success())
			{
				G(dp_56k_state) = DP_56K_ANS_AFTER_MP_WAIT;
				G(dp_timer) = x_current_time();
			}
		}
		break;

	case DP_56K_ANS_AFTER_MP_WAIT :
		// Wait here for 500 ms - (mah - 4/6/99 - this used
		// to be a 500 ms sleep in the ANS_AFTER_MP state
		// but we've rearranged it here to handle CS4/ARM, etc.)
		if (x_elapsed_time(G(dp_timer)) >= MS500)
		{
			x_debug_msg("dp - after 500 MS wait");
			dp_56k_connect();
		}
		break;

	case DP_56K_ANS_PHASE3 :
		// Wait here for data mode or timeout
		if (x_elapsed_time (G(dp_timer)) >= (15*SECOND1))
		{
			cs_insert_error_tag ( 0xfe00 , 0 );
			x_debug_msg("dp - timeout waiting for MP");
			dp_56k_retrain();
		}
		else
		{
			// Look to see if we've gone back to phase 1 or 2.
			// If so, this is some kind of error recovery (maybe the
			// client did a retrain) which means we need to go back
			// to looking for phase 3 and reset the timers.
			if (dp_read_dsp_ram(STARTUP_PHASE) < 3)
			{
				cs_insert_error_tag ( 0xca00 , 0 );
				G(dp_timer1) = G(dp_timer) = x_current_time();
				G(dp_56k_state) = DP_56K_ANS_PHASE1;
				x_debug_msg("dp - back to previous phase - resetting timer");
			}

			// Look for MP detect
			if (dp_read_dsp_ram(0x0a53))
			{
				G(dp_timer1) = G(dp_timer) = x_current_time () ;
				G(dp_56k_state) = DP_56K_ANS_AFTER_MP;
				x_debug_msg("dp - got MP");
			}

			// See if we're in an error state
			// and if so, issue a retrain
			if (dp_read_dsp_ram(0x1ff2))
			{
				cs_insert_error_tag ( 0xf300 , 0 );
				x_debug_msg("dp - error recovery case.  0x1ff2=");
				sendHexWord(dp_read_dsp_ram(0x1ff2));
				sendCrLf();
				dp_write_dsp_ram(0x1ff2, 0);	// clear indication
				dp_56k_retrain();
#if defined(CS_MODEM)
				G(dp_cs_local_retrain_ratechange) = 2; 
				cs_k56_remote_or_local(RETRAIN);	
#else
				REMOTE_RET_INCREMENT ; 
#endif
			}

		}
		break;

	case DP_56K_ANS_PHASE1 :
		// Wait here for data mode or timeout
		if (x_elapsed_time (G(dp_timer)) >= (20*SECOND1))
		{
			cs_insert_error_tag ( 0xfd00 , 0 );
			x_debug_msg("dp - timeout waiting for phase 3");
			G(triedEvenThoughBad)++;

			if (G(triedEvenThoughBad) < 3)
			{
				dp_56k_retrain();
			}
			else
			{
				x_debug_msg("we've tried too many times, back to V.34");
				dp_56k_retrain();
				dp_56k_v34_mode();
				dp_56k_v34_training_state();
			}
		}
		else
		{
			// Look for phase 3
			if (3 == dp_read_dsp_ram(STARTUP_PHASE))
			{
				G(dp_timer) = x_current_time () ;
				G(triedEvenThoughBad) = 0;
				G(dp_56k_state) = DP_56K_ANS_PHASE3;
				// if we're back in V.34 mode then
				// skip this stuff and go to V.34
				// processing.
				if (0 == dp_read_dsp_ram(K56V_MODE_RAM))
				{
					cs_insert_error_tag ( 0xcb00 , 0 );
					x_debug_msg("dp - in V.34 mode - exiting k56 code...");
					dp_56k_v34_mode();
					dp_56k_v34_training_state();
				}
			}
		}
		break;

	case VPCM_MONITOR_V8 :
		G(k56_timer) = G(dp_timer) = x_current_time ();
		cs_insert_error_tag(0xd400 , 0);
		G(dp_56k_state) = VPCM_CK_V8;
		x_debug_msg("vpcm - goto CK_V8");
		break;

	case VPCM_CK_V8 :
		#ifdef CS_CALLBACK  
		if ( ! G(vpcm_camode) )
		#endif
		{
#if defined(V92_MODEM_ON_HOLD)
			G(dp_mh_state) = MH_NULL;
			x_debug_msg("vpcm - reset dp_mh_state to MH_NULL ") ;
#endif
			// server in answer mode
			temp = DP_READ_DSP_K56V();
			if (temp == 1)		// V90 capable client
			{
				cs_insert_error_tag ( 0xe500 , 0 );
				x_debug_msg("vpcm - got 0x1ff1 = 1, goto VPCM_CK_V90");
				G(dp_56k_state) = VPCM_CK_V90 ;
				G(dp_timer) = x_current_time () ;
				#if defined(CS_4)
				sa_dspDisableQMP();
				#endif
				break;
			}
			else if (temp == 2)	  // V34 only client
			{
				cs_insert_error_tag ( 0xe400 , 0 );
				x_debug_msg("vpcm - got 0x1ff1 = 2, goto DP_TRAINING");
				dp_download_monitor_nc_gain(0xdc00); // near canceller
				// clear dp_56k_state so that dp_v34_workaround()
				// can be called
				G(dp_56k_state) = DP_56K_INIT;
				G(dp_state) = DP_TRAINING ;
				break;
			}
			temp = DP_READ_DSP_SPTR();
			if ((x_elapsed_time(G(dp_timer)) >= SECOND6) || (temp == A_75MS))
			{
				if ( temp == A_75MS )
				{
					// Remove to prevent connect failures to V.32
					// modems and Server to Server V.34 calls
				   	dp_write_dsp_ram(0x000c, G(old_000c));
					x_debug_msg ("vpcm - got A_75MS");
				}
				x_debug_msg("vpcm - timeout for v34 in v8 satatus");
				cs_insert_error_tag(0xd200 , 0);
				dp_56k_retrain();	

				x_debug_msg("*** v8 status *** 800=") ;
				temp = dp_read_dsp_ram (0x800) ;
				sendHexWord(temp);sendCrLf();
			}
			else
			{
				vpcm_retrain_monitor();
			}
#if defined(PHASE1_DEBUG)
			temp = dp_read_dsp_ram (0xb33) ;
			if ( temp != G(cjm_state) )
			{
				x_debug_msg("**cjm_state** b33=");
				sendHexWord(temp);sendCrLf();
				G(cjm_state) = temp;
			}
#endif // PHASE1_DEBUG
		}
		#ifdef CS_CALLBACK  
		else
		{
			// server in calling mode
			temp = DP_READ_DSP_SPTR();
			if ( temp == 0xd600 )   // wait for PcmdTC_75MS_2
			{
				x_debug_msg ("vpcm - got PcmdTC_75MS_2");
				temp = DP_READ_DSP_K56V();
				if ( temp == 0x1 )
				{
					x_debug_msg("vpcm - KfEnable (0x1ff1) == 1") ;
					G(dp_56k_state) = VPCM_CK_V90 ;
					G(dp_timer) = x_current_time () ;
					x_debug_msg("vpcm - goto CK_V90 state ") ;
				}
				else
				{
					x_debug_msg("vpcm - KfEnable (0x1ff1) == 0, back to v34");
					#ifndef CS_MODEM
					dp_56k_v34_mode(); 
					#endif
					G(dp_state) = DP_TRAINING ;
					x_debug_msg("vpcm - goto DP_TRAINING");

					x_debug_msg("*** v8 status *** 800=");
					temp = dp_read_dsp_ram(0x800);
					sendHexWord(temp);sendCrLf();
				}
			}
			if ( x_elapsed_time( G(dp_timer) ) >= SECOND4 )
			{
				cs_insert_error_tag ( 0xfc00 , 0 );
				x_debug_msg("vpcm - timeout for PcmdTC_75MS_2");
				#ifndef CS_MODEM
				dp_56k_v34_mode(); 
				#endif
				G(dp_state) = DP_TRAINING ;
				x_debug_msg("vpcm - goto DP_TRAINING") ;
			}
			else
			{
				vpcm_retrain_monitor();
			}
#if defined(PHASE1_DEBUG)
			temp = dp_read_dsp_ram (0xb33) ;
			if ( temp != G(cjm_state) )
			{
				x_debug_msg("*** cjm_state ***  b33=");
				sendHexWord(temp); sendCrLf();
				G(cjm_state) = temp ;
			}
#endif
		}
		#endif // CS_CALLBACK  
		break ;

	case VPCM_CK_V90 :
		temp = DP_READ_DSP_SPTR();
		if ( (temp == TC_B2_3) || (temp == TC_LP1) )
		{
			x_debug_msg("vpcm - got TC_B2_3 - goto WAIT_FOR_PHASE3");
			dp_56k_adjust_mse(0);	  
			#ifdef CS_MODEM
			dp_dsp_int_regwrite(8, 0x0084);	// x-y page for V.90 CS
			DP_WRITE_IOC();
			#endif
			// download vpcm phase 3 & 4 & E-RAM
			vpcm_download_phase3_phase4();
			cs_insert_error_tag(0xd100 , 0);
			G(dp_56k_state) = VPCM_WAIT_FOR_PHASE3 ;
			G(dp_timer) = x_current_time () ;
		}
		else if (x_elapsed_time(G(dp_timer)) >= SECOND8)
		{
			x_debug_msg("vpcm - timeout for TC_B2_3, retrain");
			dp_56k_retrain();
		}
		else
		{
			vpcm_retrain_monitor();
		}
		break ;

	case VPCM_WAIT_FOR_PHASE3 :
		if ( (dp_read_dsp_ram (STARTUP_PHASE)) == 3)
		{
			cs_insert_error_tag(0xd000 , 0);
			x_debug_msg("vpcm - phase3 - goto WAIT_FOR_CONNECT");
			G(dp_56k_state) = VPCM_WAIT_FOR_CONNECT ;
			G(dp_timer) = x_current_time () ;
		}
		else
		{
			// V90 capable client chooses V34
			if (4 == DP_READ_DSP_K56V())
			{
				cs_insert_error_tag ( 0xfa00 , 0 );
				x_debug_msg("vpcm - timeout for PHASE3, got 0x1ff1 = 4");
				x_debug_msg("MSE scale to 3300");
				dp_write_dsp_ram(0x0825, 0x3300); // MSE_SCALE
				dp_download_monitor_nc_gain(0xdc01);
				dp_56k_v34_mode();
				dp_56k_v34_training_state();
			}
			else 
			{
				temp = dp_read_dsp_ram(0x1ff2);
				if (temp)	//error recovery timeout
				{
					cs_insert_error_tag ( 0xe300 , 0 );
					x_debug_msg("vpcm - timeout for PHASE3, 0x1ff2 =");
					sendHexWord(temp);sendCrLf();

					// clear error recovery indication
					dp_write_dsp_ram (0x1ff2, 0);
					if (2 == DP_READ_DSP_K56V())
						dp_download_monitor_nc_gain(0xdc00);
					dp_56k_v34_mode();
					dp_56k_v34_training_state();
				}
				else
				{
					vpcm_retrain_monitor();
				}
			}
		}
		break;

	case VPCM_WAIT_FOR_CONNECT :
		if ( DP_READ_DSP_3A() & 0x0008 )	// data mode
		{
			//--------------------------------------------------------
			// The following workaround addresses over aggressive USR
			// client modems that connect at low V90 rates on lines
			// where they should be more stable at V.34.
			// If we detect a connect rate in the range of 29333 to
			// 34666, we force them down to 28000 and issue a retrain.
			// This way the previously unstable V90 connection at this
			// range should be more stable at 28000.
			//--------------------------------------------------------
#ifdef USR_WORKAROUND
			temp = dp_read_dsp_ram (0x833);
			if ( ( temp < 7 ) && ( temp > 1 ) )  // if range is 29333 - 34666
			{
				cs_insert_error_tag (0xd800 , 0);
				x_debug_msg ("vpcm - initial connect rate is 29333 to 34666, retrain to 28000");
				dp_write_dsp_ram(0x1ff6,1);			   // force to 28000
				dp_write_dsp_ram(0x3a, (dp_read_dsp_ram(0x3a) & ~0x0002));
#ifdef CS_MODEM
				//update msi retain count and remote/local
				G(dp_cs_local_retrain_ratechange) = 1;  
				cs_k56_remote_or_local(RETRAIN);	
#endif
				G(dp_56k_state) = VPCM_RETRAIN ;
				x_debug_msg("vpcm_data - go to VPCM_RETRAIN state");
				dp_56k_retrain_cmd(1) ;
			}
			else
#endif
			{
				x_debug_msg("vpcm - goto VPCM_DATA_MODE.  time=");
				dp_puts_dec(x_elapsed_time(G(dp_timer)));
				sendCrLf();
				vpcm_connect();
			}
		}
		else if ( DP_READ_DSP_K56V() == 4 )
		{
			cs_insert_error_tag ( 0xe100 , 0 );
			x_debug_msg("vpcm - startup wait for connect, got 0x1ff1 =4"); 
			dp_write_dsp_ram(0x000c, 0x0000);	
			x_debug_msg("vpcm - setting MSE scale to 3300");
			dp_write_dsp_ram(0x0825, 0x3300); // MSE_SCALE
			dp_download_monitor_nc_gain(0xdc01);
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
		}	
		else if (dp_read_dsp_ram(0x1ff2))
		{
			cs_insert_error_tag ( 0xf200 , 0 );
			x_debug_msg("dp - v90 startup error recovery case.  0x1ff2=");
			sendHexWord(dp_read_dsp_ram(0x1ff2));sendCrLf();
			dp_write_dsp_ram(0x1ff2, 0);	// clear indication
#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 2; 
			cs_k56_remote_or_local(RETRAIN);	
#else
			REMOTE_RET_INCREMENT ; 
#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain();	
		}
		else if ( x_elapsed_time ( G(dp_timer) ) >= SECOND20+SECOND5 )
		{
			cs_insert_error_tag ( 0xf900 , 0 );
			x_debug_msg("vpcm - timeout for connect, issue retrain");
#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 1; 
			cs_k56_remote_or_local(RETRAIN);	
#else
			LOCAL_RET_INCREMENT ; // update the retrain status
#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain ( ) ;
		}
		else
		{
			vpcm_retrain_monitor();
		}
		break ;

	case VPCM_DATA_MODE :
		vpcm_data_mode ();
		break ;

	case VPCM_RETRAIN :
		G(dp_line_state) = DP_LINE_RETRAINING ;
		G(k56_timer) = x_current_time () ;
		cs_insert_error_tag(0xce00 , 0);
		G(dp_56k_state) = VPCM_RETRAIN_WAIT_FOR_CONNECT ;
		x_debug_msg("vpcm - goto WAIT_FOR_CONNECT state ") ;
		break ;

	case VPCM_RETRAIN_WAIT_FOR_CONNECT :
		if ( DP_READ_DSP_3A() & 0x0008 )	// data mode
		{
			x_debug_msg("vpcm - goto VPCM_DATA_MODE.  time=");
			dp_puts_dec(x_elapsed_time(G(dp_timer)));
			sendCrLf();
			vpcm_connect();
		}
		else if ( DP_READ_DSP_K56V() == 4 )
		{
			cs_insert_error_tag ( 0xe200 , 0 );
			x_debug_msg("vpcm - retrain wait for connect, got 0x1ff1 =4"); 
			dp_write_dsp_ram(0x000c, 0x0000);	
			x_debug_msg("vpcm - setting MSE scale to 3300");
			dp_write_dsp_ram(0x0825, 0x3300); // MSE_SCALE
			dp_download_monitor_nc_gain(0xdc01);
			dp_56k_v34_mode();
			dp_56k_v34_training_state();
		}
		else if (dp_read_dsp_ram(0x1ff2))
		{
			cs_insert_error_tag ( 0xf400 , 0 );
			x_debug_msg("dp - v90 retrain error recovery case.  0x1ff2=");
			sendHexWord(dp_read_dsp_ram(0x1ff2));sendCrLf();
			dp_write_dsp_ram(0x1ff2, 0);	// clear indication
			#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 2; 
			cs_k56_remote_or_local(RETRAIN);	
			#else
			REMOTE_RET_INCREMENT ; 
			#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain();	
		}
		else if ( x_elapsed_time ( G(k56_timer) ) >= SECOND30 ) 
		{
			cs_insert_error_tag ( 0xf600 , 0 );
			x_debug_msg("vpcm - retrain, 30 second timeout, issue retrain");
			G(vpcm_retrain_count)++;
			if ( G(vpcm_retrain_count) > 1 )
			{
				x_debug_msg ( "vpcm - retrain failure, > 60 sec" ) ;
				#ifndef CS_MODEM
				G(x_status).ud_TerminationCause = UD_TC_RETRAIN_FAIL;
				#endif
				G(dp_state) = DP_CALL_FAILURE ;
				G(x_dial_residual) = MR_CD_DISCONNECT ;
			}
			#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 1; 
			cs_k56_remote_or_local(RETRAIN);	
			#else
			LOCAL_RET_INCREMENT ; // update the retrain status
			#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain ( ) ;
		}
		else
		{
			vpcm_retrain_monitor();
		}
		break ;

		//Add logic to monitor a retrain during wait for rate change
		//to complete.
	case VPCM_RATECHANGE :
		G(k56_timer) = x_current_time () ;
		cs_insert_error_tag(0xcd00 , 0);
		G(dp_56k_state) = VPCM_RATECHANGE_WAIT_FOR_CONNECT ;
		G(dp_line_state) = DP_LINE_RETRAINING ;
		x_debug_msg("vpcm - goto VPCM_RATECHANGE_WAIT_FOR_CONNECT state");
		break ;

	case VPCM_RATECHANGE_WAIT_FOR_CONNECT :
		if ( DP_READ_DSP_3A() & 0x0008 )	// data mode
		{
			x_debug_msg("vpcm - goto VPCM_DATA_MODE.  time=");
			dp_puts_dec(x_elapsed_time(G(dp_timer)));
			sendCrLf();
			vpcm_connect();
		}
		else if (dp_read_dsp_ram(0x1ff2))
		{
			cs_insert_error_tag ( 0xf100 , 0 );
			x_debug_msg("v90 ratechange error recovery case.  0x1ff2=");
			sendHexWord(dp_read_dsp_ram(0x1ff2));sendCrLf();
			dp_write_dsp_ram(0x1ff2, 0);	// clear indication
			#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 2; 
			cs_k56_remote_or_local(RETRAIN);	
			#else
			REMOTE_RET_INCREMENT ; 
			#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain();	
		}
		else if ( x_elapsed_time ( G(k56_timer) ) >= SECOND10 ) 
		{
			cs_insert_error_tag ( 0xf800 , 0 );
			G(vpcm_ratechange_count) = 0; 
			x_debug_msg("vpcm - ratechange 10 second timeout, V.90 retrain");
			#if defined(CS_MODEM)
			G(dp_cs_local_retrain_ratechange) = 1; 
			cs_k56_remote_or_local(RETRAIN);	
			#else
			LOCAL_RET_INCREMENT ; // update the retrain status
			#endif
			G(dp_56k_state) = VPCM_RETRAIN ;
			dp_56k_retrain ( ) ;
		}
		else
		{
			vpcm_retrain_monitor();
		}
		break ;
	}
}

#if defined(COPERNICUS) && !defined(CS_MODEM)
/****************************************************************
Routine : dp_copernicus_hangup
Description :
	Assume we're on line and go to disconnect
	if the ISDN line drops.

Return:
	TRUE if we have hung up
*****************************************************************/
byte
dp_copernicus_hangup(void)
{
	// Don't do anything if we're the originating modem.
	if (G(x_modem_originate))
		return FALSE;

	// don't do anything unless we're
	// in one of the proper states
	switch(G(dp_state))
	{
	case DP_56K :
	case DP_ON_DIAL :
	case DP_V34_RETRAIN :
	case DP_TRAINING :
	case DP_RETRAIN :
	case DP_RETRAIN_START :
	case DP_DATA_WAIT :
	case DP_ANSWERING :
	case DP_CALL_PROGRESS :
	case DP_DIAL :
		break;
	default:
		return FALSE;
	}

	// watch for the ISDN line hanging up
	if (!x_input(IO_RING_INDICATE_ON))
	{
		x_debug_msg ( "dp - isdn line hangs up");
		G(dp_state) = DP_CALL_FAILURE ;
		G(x_status).ud_TerminationCause = UD_TC_NO_CARRIER;
		G(x_dial_residual) = MR_CD_DISCONNECT ;
		return TRUE;
	}

	return FALSE;
}

/****************************************************************
Routine : dp_copernicus_ring
Description :
	Take care of ring indication for copernicus
*****************************************************************/
void
dp_copernicus_ring(void)
{
	byte ri = x_input(IO_RING_INDICATE_ON);
	static byte dp_copernicus_online;

	if (dp_copernicus_online != ri)
	{
		dp_copernicus_online = ri;

		// we got our ring
		if (ri)
		{
			//Enable the Copernicus call counter at all times			
			G(dp_call_counter)++; // This value is cleared only by a H/W reset. 
			x_debug_msg("DP - copernicus ring, call =");sendHexWord(G(dp_call_counter));sendCrLf();
			x_sleep(MS500);
			x_send_mail(DP_RING, AT_TASK, NULL, 0);
			if (G(S).ModemOptions.AutoAnswer)
				x_send_mail(MC_ANSWER, DP_TASK, NULL, 0);
		}
		else
		{
			x_debug_msg( "DP - copernicus isdn line drops");
		}
	}
}
#endif // COPERNICUS && !CS_MODEM

/****************************************************************
Routine : read_dpram_d500
*****************************************************************/
void read_dpram_d500(void)
{
	word i;
	word temp ;

	sendCrLf();

	for (i=0x1500; i<0x150a; i++)
	{
		temp = dp_read_dsp_ram ( i ) ;
		sendHexWord(i);sendDumbChar('=');
		sendHexWord(temp);sendDumbChar(' ');
		sendCrLf();
	}
	sendCrLf();
}

/****************************************************************
Routine : dp_56k_adjust_mse

Description:	This routine detects loop conditions and adjusts
				the MSE threshold value accordingly.
*****************************************************************/
void dp_56k_adjust_mse(byte v34call)
{
	word temp,temp1,temp2;

	x_debug_msg("dp - dp_56k_adjust_mse()");

	temp1 = dp_read_dsp_ram(0x8de);
	temp2 = dp_read_dsp_ram(0x8fb);

	sendHexWord(0x8de);sendDumbChar('=');sendHexWord(temp1);sendCrLf();	   
	sendHexWord(0x8fb);sendDumbChar('=');sendHexWord(temp2);sendCrLf();	   

	if(temp1 > temp2)			
	{								
		temp = temp1 - temp2;
		if (temp > EIA_LOOP_45_THRESH)
		{
			sendCrLf();
			x_debug_msg("dp - loop 4/5 encountered, setting MSE=");
			if (v34call)
			{
				dp_write_dsp_ram(MSE_SCALE, EIA_LOOP_45_MSE);
				sendHexWord(EIA_LOOP_45_MSE); sendCrLf();
			}
			else
			{
				dp_write_dsp_ram(MSE_SCALE, 0x3300);
				sendHexWord(0x3300); sendCrLf();
			}
		}
	}

	temp1 = dp_read_dsp_ram(0x8ee);
	temp2 = dp_read_dsp_ram(0x905);

	sendHexWord(0x8ee);sendDumbChar('=');sendHexWord(temp1);sendCrLf();	   
	sendHexWord(0x905);sendDumbChar('=');sendHexWord(temp2);sendCrLf();	   

	if(temp1 > temp2)				
	{								
		temp = temp1 - temp2;

#if defined (COPERNICUS) || defined (SA_DIGITAL)
		// manually set loop 6/7 threshold by
		// S23 (high byte), S20 (low byte)
		temp1 = ((G(S).ModemOptions.Dummy23 << 8)
					| (G(S).ModemOptions.Dummy20));
		//if loop 6/7 threshold not manually set then use default #define
		if (temp1 == 0)
#endif
			temp1 = EIA_LOOP_67_THRESH;

		if (temp > temp1)
		{
			sendCrLf();
			x_debug_msg("dp - loop 6/7 encountered, setting MSE=");
			if (v34call)
			{
				dp_write_dsp_ram(MSE_SCALE, EIA_LOOP_67_MSE);
				sendHexWord(EIA_LOOP_67_MSE); sendCrLf();
			}
			else
			{
				dp_write_dsp_ram(MSE_SCALE, 0x3300);
				sendHexWord(0x3300); sendCrLf();
			}
		}
	}
}

/****************************************************************
Routine : dp_lapm_error_check
Description : Check the lapm frame error
		Return TRUE when lapm things are bad and
		we should go to a lower rate.
*****************************************************************/
BOOL dp_lapm_error_check( void ) 
{
	if ((G(S).ModemOptions.AutoRate != 1) || (G(dp_lcl_rx_ratechange) > 2))
		return FALSE;

	//-------------------------------------------------
	// Every second, look at the received line quality.
	// Adjust downward for excessive CRCs from DSP.
	// Called by :
	//		vpcm_data_mode() for v90; or
	//		dp_56k_data_mode() for KFlex.
	//		dp_periodic(), DP_ON_DIAL for V34.
	//-------------------------------------------------
	if ( (x_elapsed_time( G(dp_lapm_rx_timer) ) >= SECOND1)
		|| (G(lapm_counter) > 10) )
	{
		G(dp_lapm_rx_timer) = x_current_time();

		// any lapm or dsp errors incurred
		if ( G(dp_bad_crc_count)
			|| (G(lapm_errors) != RX_LAPM_ERRORS)
			|| (G(lapm_counter) > 10) )
		{
#if defined(V92_MODEM_ON_HOLD)
			// maybe the bad MSE is due to a modem on hold event on the
			// other side.  if enabled, we need to get ready to do modem
			// on hold procedures.
			if (G(S).ModemOptions.MHOptions & MH_ENABLED
				&& G(dp_mh_state) == MH_NULL)
			{
				G(dp_mh_state)=MH_R_INIT; // start respondent mode
				x_debug_msg("dp56cs : start MOH respondent mode");
				return FALSE;
			}
#endif
			G(lapm_errors) = RX_LAPM_ERRORS ;

			G(lapm_counter) += 2;

			#if defined(Z80_DEBUG_THIS_FILE)
			x_debug_msg("dp : crc++ =");
			sendDecByte( (byte) G(lapm_counter) ); sendCrLf();
			#endif //Z80_DEBUG_THIS_FILE

			if ( G(lapm_counter) > 8 )
			{
				G(lapm_counter) = G(dp_bad_crc_count) = 0;
				G(dp_lcl_rx_ratechange)++;
				return TRUE;
			}
		}
		else if ( G(lapm_counter) )
		{
			-- G(lapm_counter);

			#if defined(Z80_DEBUG_THIS_FILE)
			x_debug_msg("dp : crc-- =");
			sendDecByte((byte) G(lapm_counter)); sendCrLf();
			#endif //Z80_DEBUG_THIS_FILE
		}

		G(dp_bad_crc_count) = 0;
	}

	return FALSE;
}

/****************************************************************
Routine : dp_tx_lapm_error_check
Description : Check the lapm tx frame error rate.
		Return TRUE when lapm "things" (such as srejs, rejs, and
		timeouts currently) are bad and we should go to a lower rate.
*****************************************************************/
BOOL dp_tx_lapm_error_check( void ) 
{
	if ((G(S).ModemOptions.AutoRate != 1) || (G(dp_lcl_tx_ratechange) > 2))
		return FALSE;

	//-----------------------------------------------------
	// Every second, look at the transmit line quality.
	// Adjust downward for "excessive" errors from client.
	//-----------------------------------------------------
	if ( x_elapsed_time( G(dp_lapm_tx_timer) ) >= SECOND1 )
	{
		G(dp_lapm_tx_timer) = x_current_time();

		//----------------------------------------------
		// establish Min/Max/Lst TX line rates observed.
		//----------------------------------------------
		G(dp_833) = DP_READ_DSP_833();
		if ( G(dp_833) < G(dp_pcm_min_rate) )
		{
			#if defined(Z80_DEBUG_THIS_FILE)
			PM_PRINTING_ON(1);
			x_debug_msg("New Min Rate="); sendHexWord(G(dp_833)); sendCrLf();
			PM_PRINTING_OFF();
			#endif
			G(dp_pcm_min_rate) = G(dp_833);
		}
		else if ( G(dp_833) > G(dp_pcm_max_rate) )
		{
			#if defined(Z80_DEBUG_THIS_FILE)
			PM_PRINTING_ON(1);
			x_debug_msg("New Max Rate="); sendHexWord(G(dp_833)); sendCrLf();
			PM_PRINTING_OFF();
			#endif
			G(dp_pcm_max_rate) = G(dp_833);
		}
		else if ( G(dp_pcm_lst_rate) != G(dp_833) )
		{
			if ( G(dp_pcm_lst_rate) < G(dp_833) )
			{
				++G(dp_tx_rateincrease);
			}

			#if defined(CS_4)
			PM_PRINTING_ON(1);
			printf("New Rate=%x(was %x); Max=%x; Min=%x; Ttl=%d; Lcl=%d\n",
					G(dp_833), G(dp_pcm_lst_rate),
					G(dp_pcm_max_rate), G(dp_pcm_min_rate),
					G(dp_tx_rateincrease), G(dp_lcl_tx_ratechange));
			PM_PRINTING_OFF();
			#elif defined(Z80_DEBUG_THIS_FILE)
			PM_PRINTING_ON(1);
			x_debug_msg("New Rate="); sendHexWord(G(dp_833)); sendCrLf();
			PM_PRINTING_OFF();
			#endif
			G(dp_pcm_lst_rate) = G(dp_833);

			//---------------------------------
			// is the client over aggressive ?
			//---------------------------------
			if ( G(dp_tx_rateincrease) > 2 )
			{
				G(dp_pcm_max_rate) =
						(G(dp_pcm_max_rate) + G(dp_pcm_min_rate))/2;

				// nothing over 50.666k
				if ( G(dp_pcm_max_rate) > 0x12 )
					G(dp_pcm_max_rate) = 0x12;

				//---------------------------------
				// yes, force retrain next second
				//---------------------------------
				G(tx_lapm_counter) = 20;
				TX_LAPM_ERRORS++;

				PM_PRINTING_ON(1);
				x_debug_msg("dp - tx lapm errors...retrain in 1 second");
				PM_PRINTING_OFF();
				return FALSE;
			}
		}

		//------------------------------------
		// Had an errored second ?
		//------------------------------------
		if ( TX_LAPM_ERRORS == G(tx_lapm_errors) )
		{
			//------------------------------
			// NO - decrement cnt 
			//------------------------------
			if ( G(tx_lapm_counter) )
			{
				G(tx_lapm_counter) -- ;

				#if defined(SA_LAPM_DEBUG)
				if ( G(sa_lapm_debug) != SA_LAPM_DEBUG_OFF )
				{
					PM_PRINTING_ON(0);
						sendDumbChar('-');
					PM_PRINTING_OFF();
				}
				#endif // SA_LAPM_DEBUG
			}
		}
		else
		{
			//-----------------------------------------
			// YES we've had an errored second - add it
			//-----------------------------------------
			G(tx_lapm_counter) += 2;
			G(tx_lapm_errors) = TX_LAPM_ERRORS ;

			#if defined(SA_LAPM_DEBUG)
			if ( G(sa_lapm_debug) != SA_LAPM_DEBUG_OFF )
			{
				PM_PRINTING_ON(0);
					sendDumbChar('+');
				PM_PRINTING_OFF();
			}
			#endif // SA_LAPM_DEBUG

			//----------------------------------------------
			// Have we seen different rates from the client?
			//----------------------------------------------
			if ( (G(dp_pcm_max_rate) - G(dp_pcm_min_rate)) > 0 )
			{
				//-----------------------------
				// Have we had too many errors?
				//-----------------------------
				if ( G(tx_lapm_counter) > 12 )
				{
					//-------------------------------------------
					// set new max tx line rate in the algorithm
					// it should never go above this value again.
					//-------------------------------------------
					G(dp_pcm_max_rate) = (G(dp_pcm_max_rate)
											+ G(dp_pcm_min_rate)) / 2;
	
					PM_PRINTING_ON(1);
					x_debug_msg("dp - tx lapm errors...retrain");
					PM_PRINTING_OFF();
	
					G(dp_lcl_tx_ratechange) ++;
					G(dp_tx_rateincrease) = 0;
					G(tx_lapm_counter) = 0;
					return TRUE;
				}
			}
		}
	}
	return FALSE;
}

#ifdef HCF_WORKAROUND
/****************************************************************
Routine : dp_k56_rbs_check
Description : returns true if there is an RBS line
*****************************************************************/
byte dp_k56_rbs_check ( void )
{
	byte k;
	for (k=0; k<6; k++)
	{
		if (dp_read_dsp_ram (0x222D + k))
		{
			return TRUE;
		}
	}
	return FALSE;
}
#endif // HCF_WORKAROUND

/*****************************************************************/
#ifdef COP_ADV_DEBUG
byte dp_lapm_dsp_debug (void)
{
	word temp, temp1, temp2, temp3;


	temp = dp_read_dsp_ram(0x334);
	temp1 = dp_read_dsp_ram(0x46);
	temp2 = dp_read_dsp_ram(0x311);
	temp3 = dp_read_dsp_ram(0x310);

	if ( (G(p_ram334) != temp) || (G(p_ram46) != temp1) || (G(p_ram311) != temp2) || (G(p_ram310) != temp3) )
	{
		sendCrLf();
		x_debug_msg("0x334 =");sendHexWord(temp);sendCrLf();
		x_debug_msg("0x46 =");sendHexWord(temp1);sendCrLf();
		x_debug_msg("0x311 =");sendHexWord(temp2);sendCrLf();
		x_debug_msg("0x310 =");sendHexWord(temp3);sendCrLf();

		G(p_ram334)	= temp;
		G(p_ram46)	= temp1;
		G(p_ram311)	= temp2;
		G(p_ram310)	= temp3;
	}

	if(temp != 0x24)
	{
		return TRUE;
	}
	else
		return FALSE;
}

void dp_print_mse_debug_values (void)
{
	word temp;
	x_debug_msg("Echo correlator level (0x44) =");sendHexWord(dp_read_dsp_ram(0x0044));sendCrLf();
	x_debug_msg("Rx Signal Level (0x4a) =");sendHexWord(dp_read_dsp_ram(0x004a));sendCrLf();
	x_debug_msg("RMSE (0x4c) =");sendHexWord(dp_read_dsp_ram(0x004c));sendCrLf();
	x_debug_msg("RTD (0x54) =");sendHexWord(dp_read_dsp_ram(0x0054));sendCrLf();
	x_debug_msg("Near Echo level (0x55) =");sendHexWord(dp_read_dsp_ram(0x0055));sendCrLf();
	x_debug_msg("Far Echo level (0x56) =");sendHexWord(dp_read_dsp_ram(0x0056));sendCrLf();
}
#endif // COP_ADV_DEBUG
#endif // VPCM_SERVER
