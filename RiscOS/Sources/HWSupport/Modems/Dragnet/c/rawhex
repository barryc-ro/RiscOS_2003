/*name and version number:@(#)rawhex.c	1.1*/
/*date of get: 		  09/06/00 16:59:28*/
/*date of delta:	  07/20/98 12:10:48*/
/*name and version number:@(#)rawhex.c	1.1*/
/*date of get: 		  09/06/00 16:59:28*/
/*date of delta:	  07/20/98 12:10:48*/
//------------------------------------------------------------------------------
//
//	Description:
//		Open the the controller code hex file(modem.hex), read it, process it and 
//			write it back to cmc.hex.
//
//	Initial: MWang			Date: 05-07-97
//------------------------------------------------------------------------------
#include <string.h>
#include <io.h>
#include <memory.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <conio.h>
#include <dos.h>
#include <sys\timeb.h>

#define TRUE	1 
#define FALSE	0 
#define ASCII_NULL		0x00
#define ASCII_BEL       0x07
#define ASCII_BS        0x08
#define ASCII_LF        0x0A
#define ASCII_CR        0x0D
#define ASCII_XON       0x11
#define ASCII_XOFF      0x13

typedef	unsigned char	BYTE ;
typedef	unsigned int	WORD ;
typedef	unsigned long	DWORD ;

FILE	*intelFile ;
FILE	*rawFile ;

BYTE atoh(BYTE *hexData) ;
void endProc(void) ;

void main()
{

	char	IntelHexFile[20] ;
	char	RawHexFile[20] ;
	char	hexData[10] ;
	BYTE	rawData ;
	BYTE	endOfFile = FALSE ;
	BYTE	j ;
	BYTE	i = 0 ;

	strcpy(IntelHexFile, "modem.hex") ;
	strcpy(RawHexFile, "csm.hex") ;

	// Open the intel and raw hex files
	if( (intelFile = fopen( IntelHexFile, "rb" )) == NULL)
	{
		printf("Fail to open intel controller file(modem.hex).\n");
		exit(0);
	}

	if( (rawFile = fopen( RawHexFile, "wb")) == NULL )
	{
		printf("Fail to open CSM raw hex file(csm.hex)\n");
		exit(0) ;
	}


	// Process the file
	else
	{
		fread(hexData, sizeof(char), 3, intelFile) ;
		fseek(intelFile, 0, SEEK_SET) ;

		// Check if it is Intel Hex File
		if(!((*hexData == ':')&&(*(hexData + 1) == '2')
										 &&(*(hexData + 2) == '0')))
		{
			printf("This is not the right intel hex file.\n") ;
		}

		else
		{
			do
			{
				fread(hexData, sizeof(char), 1, intelFile) ;
				switch(*hexData)
				{
					case ':':
					{
						fread(hexData, sizeof(char), 1, intelFile) ;
						switch(*hexData)
						{
							case '2':					// Intel Hex Line (32 col.fromat)
							{
								fread(hexData, sizeof(char), 7, intelFile) ;

								for(j=0; j<32; j++)
								{
									fread(hexData, sizeof(char), 2, intelFile) ;
									rawData = atoh(hexData) ;
									fwrite( &rawData, sizeof(char), 1, rawFile ) ;
								}
							}
							break ;

							case '1':					// Intel Hex Line (16 col.format)
							{
								fread(hexData, sizeof(char), 7, intelFile) ;

								for(j=0; j<16; j++)
								{
									fread(hexData, sizeof(char), 2, intelFile) ;
									rawData = atoh(hexData) ;
									fwrite( &rawData, sizeof(char), 1, rawFile ) ;
								}
							}
							break ;

							case '0':					// EOP or EOF
							{
								fread(hexData, sizeof(char), 1, intelFile) ;
								switch(*hexData)
								{
									case '0':		// End of the Intel Hex File
										endOfFile = TRUE ;
									//	printf("EOF\n");
									break ;

									case '2':
									{			// End of the Intel Hex Page
									//	printf("EOP");
									}
									break;

									default :
										printf("Bad EOF info\n");
										endProc();
								}
							}
							break ;

							default:
								printf("Bad data format. Process abort\n");
								endProc();
						}
					}
					break;
				}
			} while(endOfFile != TRUE);

		}
			
	}

	endProc() ;
}



void endProc(void)
{
	fclose(intelFile);
	fclose(rawFile);
	exit(0) ;
}	


			
//------------------------------------------------------------------------------
//	BYTE atoh(BYTE *hexData)
//
//	Description:
//		Convert 2 ASCII bytes into 1 binary hex byte
//			or convert 1 ASCII byte into 1 hex nibble
//
//	Parameter:
//		BYTE *hexData
//
//	Return:
//		One binary hex byte
//
//	Date:	12-11-96
//
//------------------------------------------------------------------------------
BYTE atoh(BYTE *hexData)
{
BYTE	i ;
BYTE	data ;
BYTE	hexByte = 0 ;

	for(i=0; i<2; ++i)
	{
		// parse char string to hex value
		data=*(hexData + i);

		if(((data>='0')&(data<='9'))|			// digits 0to9
			((data>='A')&(data<='F'))|			// upper Alpha
			((data>='a')&(data<='f')))			// lower Alpha
		{
			if ((data>='0')&(data<='9'))
				data -= '0' ;

			if ((data>='A')&(data<='F'))
				data = data - 'A' + 10 ;

			if ((data>='a')&(data<='f'))
				data = data - 'a' + 10 ;

			data &= 0x0F ;
			hexByte <<= 4 ;
			hexByte |= data ;
		}
		else if(data != ASCII_NULL)
		{
			printf( "ASCII value out of range.\n" );
		}
	}

	return(hexByte) ;

}	// End of atoh()

