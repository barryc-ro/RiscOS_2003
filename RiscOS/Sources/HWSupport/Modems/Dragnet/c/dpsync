/*name and version number:@(#)dpsync.c	1.31*/
/*date of get: 		  09/06/00 16:59:05*/
/*date of delta:	  06/28/00 11:44:35*/
/****************************************************************
File :  dpsync.c
Description :
	Contains all functions related to v.80, v.25 annex a, v.8

Procedures Contained :
	v8_ci_ans_init
	v8_ci_sequence_detected
	v8_ci_orig
	dp_detect_v8_tones_cmd
	dp_v8_tone_detected

Revision History :
	Initials        Date            Change
	AC              12/29/95        Initial
*****************************************************************/

#include "llglob_d.h"

#ifdef V80

#include "dpglob.h"
#include "radish.h"           //for V.8 CI seq.
#include "ioglob_d.h"         //for V.8 CI seq.
#include "atglob.h"           //for at_v8_cmd
#include "sync.h"
#include "allglobs.h"

/*****************************************************************************
	Function : dp_a8_msg
*****************************************************************************/
void dp_a8_msg ( void )
{
	byte msg[5] ; 

	msg[0] = G(S).ModemOptions.CRChar ;
	msg[1] = G(S).ModemOptions.LFChar ;
	msg[2] = '+' ;                 // send +A8
	msg[3] = 'A' ;
	msg[4] = '8' ;
	x_send_mail ( AT_IO_DATA, IO_TASK, msg, 5 ) ;
}
/*****************************************************************************
	Function : dp_a8a_msg
*****************************************************************************/
void dp_a8a_msg ( byte ans_msg )
{
	byte msg[5] ; 

	// DSVD or Video phone call
	if ( G(S).ModemOptions.V8_Orig == DCE_V8_ORIG_ENABLE )
	{
		x_debug_msg ( "dpsync - send +A8A: msg" );
		dp_a8_msg() ;
		msg[0] = 'A' ;              
		msg[1] = ':' ;
		msg[2] = ans_msg ;
		msg[3] = G(S).ModemOptions.CRChar ;
		msg[4] = G(S).ModemOptions.LFChar ;
		x_send_mail ( AT_IO_DATA, IO_TASK, msg, 5 ) ;
	}
}

/*****************************************************************************
	Function : v8_ci_ans_init
*****************************************************************************/
void v8_ci_ans_init ( void )
{
	byte temp, temp1, temp2;

	dp_modem_idle_cmd () ;
	G(v8_ci_seq_state) = V8_CI_SEQ1;

	temp = G(S).ModemOptions.DialLineRate;     // save the orig. value
	temp1 = G(S).ModemOptions.CommStdSetting;  // save the orig. value
	temp2 = (byte) G(x_modem_mode);                   // save the orig. value            
			
	G(S).ModemOptions.DialLineRate = 3;
	G(S).ModemOptions.CommStdSetting = 0;
	G(x_modem_mode) = MODEM_DATA ;

	// set rate to v.21 300 bps Ch 1 - quick startup - no answer tone
	dp_update_modem_options();

	G(S).ModemOptions.DialLineRate = temp;     // restore the orig. value
	G(S).ModemOptions.CommStdSetting = temp1;  // restore the orig. value
	G(x_modem_mode) = temp2;                   // restore the orig. value        

	// set voiceview bit for dsp - quick startup of v.21
	dp_write_dsp_ram ( 0x39, ((word)(dp_read_dsp_ram(0x39) | VV_MODE)) ) ;
	G(x_line_rate) = MR_300;

	dp_modem_command ( STARTUP, ANSWER, 0 ) ;
}

/*****************************************************************************
	Function : v8_ci_sequence_detected
*****************************************************************************/
byte v8_ci_sequence_detected (void)
{
	word rx_ch ;
	byte msg[6] ; 

	if ( io_read_dce_fifo ( 1, &rx_ch ) == 0 )
		   return ( FALSE );

	rx_ch = (word) (rx_ch & 0x00ff);

	switch ( G(v8_ci_seq_state) )
	{
		// look for 1st CI call function TX and RX data
		case V8_CI_SEQ2:
			if (G(S).ModemOptions.V8_Answer == DCE_V8_ANS_ENABLE)
			{
				if ( ( rx_ch & 0x0001 ) && 
					( !( rx_ch & 0x001e ) ) )
				{
					G(rx_ci_octet) = rx_ch;
					G(v8_ci_seq_state) = V8_CI_SEQ3;
					//x_debug_msg ( "dp - go to V8_CI_SEQ3" );
				}
			}
			else
			{
				if ( rx_ch == G(S).ModemOptions.V8_CI_Octet )
				{
					G(v8_ci_seq_state) = V8_CI_SEQ3;
					G(rx_ci_octet) = G(S).ModemOptions.V8_CI_Octet;
					//x_debug_msg ( "dp - go to V8_CI_SEQ3" );
				}
				else
				{
					G(v8_ci_seq_state) = V8_CI_SEQ1;
					//x_debug_msg ( "dp - go to V8_CI_SEQ1" );
				}
			}

			break;

		// look for 2nd synchronization of CI sequence
		case V8_CI_SEQ3:
			if ( rx_ch == 0x00 )
			{
				G(v8_ci_seq_state) = V8_CI_SEQ4;
				//x_debug_msg ( "dp - go to V8_CI_SEQ4" );
			}
			break;

		// look for 2nd CI call function TX and RX data
		case V8_CI_SEQ4:
			G(v8_ci_seq_state) = V8_CI_SEQ1;
			if ( rx_ch == G(rx_ci_octet) )
			{
				x_debug_msg ( "dp - ci seq detected" );
				if ( G(S).ModemOptions.V8_Answer == DCE_V8_ANS_ENABLE ) 
				{
					dp_report_voice_event('X');      // send <DLE>X <CR><LF>
					dp_a8_msg() ;
					msg[0] = 'I' ;					// send +A8I:<ci_octet>
					msg[1] = ':' ;
					msg[2] = decdigit_to_hexchar((byte) ((G(rx_ci_octet) % 256) / 16)) ;
					msg[3] = decdigit_to_hexchar((byte) (G(rx_ci_octet) % 16)) ;
					msg[4] = G(S).ModemOptions.CRChar ;
					msg[5] = G(S).ModemOptions.LFChar ;
					x_send_mail ( AT_IO_DATA, IO_TASK, msg, 6 ) ;
					dp_report_voice_event('.');      // send <DLE>. <CR><LF>
				}                    
				else
				{
					x_send_mail ( DP_RING, AT_TASK, NULL, 0 ) ;
				}
				return ( TRUE ) ;
			}
			break;
		
		default:
		// look for synchronization of CI sequence
		case V8_CI_SEQ1 :
			if ( rx_ch == 0x00 )
			{ 
				G(v8_ci_seq_state) = V8_CI_SEQ2;
				//x_debug_msg ( "dp - go to V8_CI_SEQ2" );
			}
			break;
	}
	return ( FALSE );
}

/*****************************************************************************
	Function : v8_ci_orig
*****************************************************************************/
void v8_ci_orig ( void )
{
	byte count;
	word v8_ci_buf[20];               // V.8 CI tone data buffer
	byte temp, temp1, temp2;
	byte tx_ci_octet;

	dp_modem_idle_cmd () ;                  // put modem into idle

	temp = G(S).ModemOptions.DialLineRate;     // save the orig. value
	temp1 = G(S).ModemOptions.CommStdSetting;  // save the orig. value

	G(S).ModemOptions.DialLineRate = 3;        // force it to V.21 mode
	G(S).ModemOptions.CommStdSetting = 0;

	// set rate to v.21 300 bps Ch 1 - quick startup
	dp_update_modem_options() ;             // force the rate now
	
	G(S).ModemOptions.DialLineRate = temp;     // restore the orig. value
	G(S).ModemOptions.CommStdSetting = temp1;  // restore the orig. value
	
	io_init_dce_tx_fifo () ;         // reset dce transmit fifo
	// set voiceview bit for dsp - quick startup of v.21
	dp_write_dsp_ram ( 0x39, ((word)(dp_read_dsp_ram(0x39) | VV_MODE)) ) ;
	G(x_line_rate) = MR_300;

	dp_modem_command ( STARTUP, ORIGINATE, 0 ) ;
	
	// stuff V.8 CI tone data
	v8_ci_buf[0] = 0xff | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[1] = 0x03 | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[4] = 0xff | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[5] = 0x00 | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[8] = 0x3f | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[9] = 0x80 | HDLC_TX_ANY_CHAR ;  
	v8_ci_buf[12] = 0x0f | HDLC_TX_ANY_CHAR ;  

	tx_ci_octet = G(S).ModemOptions.V8_CI_Octet;
	
	temp2 = tx_ci_octet;
	v8_ci_buf[2] = (word) (( temp2 << 5 ) | 0x08 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[3] = (word) (( temp2 >> 3 ) | 0xe0 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[6] = (word) (( temp2 << 3 ) | 0x02 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[7] = (word) (( temp2 >> 5 ) | 0xf8 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[10] = (word) (( temp2 << 1 ) | 0x00 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[11] = (word) (( temp2 >> 7 ) | 0xfe | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[13] = (word) (( temp2 << 7 ) | 0x20 | HDLC_TX_ANY_CHAR);
	temp2 = tx_ci_octet;
	v8_ci_buf[14] = (word) (( temp2 >> 1 ) | 0x80 | HDLC_TX_ANY_CHAR);

	count = 5;
	while ( count-- )
	{
		 io_write_dce_fifo ( 15, v8_ci_buf ) ;
	}
}

/*****************************************************************************
	Function : dp_detect_v8_tones_cmd
*****************************************************************************/
void dp_detect_v8_tones_cmd ( void )
{
	dp_modem_idle_cmd () ;

	dp_write_dsp_ram (0x26, 40);       /* set threshold to -40 dBm*/
	dp_write_dsp_ram (0x20, F1180C) ;  /* v8 tone ( binary 0 ) 1180 hz  */
	dp_write_dsp_ram (0x21, F980C) ;   /* v8 tone ( binary 1 ) 980 hz  */
	dp_write_dsp_ram (0x1c, F1100C) ; /* 7.2Khz,fax calling tone*/
	dp_write_dsp_ram (0x1d, F1300C) ; /* 7.2Khz,data calling tone*/
	dp_write_dsp_ram (0x1e, F2312_5C7) ; /* 7.2Khz, Radish Start tone*/
	dp_write_dsp_ram (0x1f, F2912_5C7) ;  /* 7.2KHz, Radish Start tone*/
	
	dp_modem_command ( DETECT_TONES, 6, 0 ) ;
				
	G(v8_ci_tone_state) = V8_CI_TONE1;

	x_debug_msg ( "go to dp_v8_tone_detected" );
}

/*****************************************************************************
	Function : dp_v8_tone_detected
*****************************************************************************/
byte dp_v8_tone_detected ( void )
{
	if ( ( G(S).ModemOptions.V8_Answer != DCE_V8_ANS_ENABLE )
#ifdef DSVD
		&& ( G(S).ModemOptions.DsvdVoiceCallFirst == FALSE )
#endif
		)
	{
		return ( FALSE ) ;
	}

	switch ( G(v8_ci_tone_state) )
	{
		// look for 1st binary 0 tone ( 1180 Hz )
		case V8_CI_TONE2:
			if ( dp_read_dsp_ram ( 0x28 ) == 0x0010 )        
				{
					G(ci_tone_timer) = x_current_time();
					G(v8_ci_tone_state) = V8_CI_TONE3;
					//x_debug_msg ( "dp - go to V8_CI_TONE3" );
				}
			else
				if ( x_elapsed_time (G(ci_tone_timer)) > MS100 )
					{
						G(v8_ci_tone_state) = V8_CI_TONE1;
						//x_debug_msg ( "dp - go to V8_CI_TONE1" );
					}
			break;

		// look for binary 1  ( 980 Hz )  again
		case V8_CI_TONE3:
			if ( dp_read_dsp_ram ( 0x28 ) == 0x0020 )
				{
					G(ci_tone_timer) = x_current_time();
					G(v8_ci_tone_state) = V8_CI_TONE4;
					//x_debug_msg ( "dp - go to V8_CI_TONE4" );
				}
			else
				if ( x_elapsed_time (G(ci_tone_timer)) > MS100 )
					{
						G(v8_ci_tone_state) = V8_CI_TONE1;
						//x_debug_msg ( "dp - go to V8_CI_TONE1" );
					}
			break;

		// look for 3rd binary 0 tone ( 1180 Hz )
		case V8_CI_TONE4:
			if ( dp_read_dsp_ram ( 0x28 ) == 0x0010 )        
			{
				G(v8_ci_tone_state) = V8_CI_TONE1;
				x_debug_msg ( "dp - ci tone detected" );
				return ( TRUE ) ;
			}
			else
				if ( x_elapsed_time (G(ci_tone_timer)) > MS100 )
					{
						G(v8_ci_tone_state) = V8_CI_TONE1;
						//x_debug_msg ( "dp - go to V8_CI_TONE1" );
					}
			break;
		
		default:
		// look for binary 1  ( 980 Hz )
		case V8_CI_TONE1 :
			if ( dp_read_dsp_ram ( 0x28 ) == 0x0020 )
			{
				G(v8_ci_tone_state) = V8_CI_TONE2;
				G(ci_tone_timer) = x_current_time();
				//x_debug_msg ( "dp - go to V8_CI_TONE2" );
			}
			break;
	}
	return ( FALSE ) ;
}

/****************************************************************
Routine : dp_detect_cm ( void )
*****************************************************************/
void dp_detect_cm ( void )
{
	byte chMsg[15], *chMsgPtr ;
	word temp, wBuf, wData ;
	byte i ;

	chMsgPtr = &chMsg[0] ;
	dp_a8_msg() ;
	*chMsgPtr++ = 'M' ; 
	*chMsgPtr++ = ':' ; 
	*chMsgPtr++ = ' ' ; 
	// search for CF and modulation  octecs
	for ( wBuf = DP_CM_BUFF_HEAD ; wBuf <= DP_CM_BUFF_TAIL ; wBuf++ )
	{
		wData = dp_read_dsp_ram ( wBuf ) ;
		if ( ( wData & 0x3f ) == 0x0002 )
		{
			if ( G(x_modem_originate) == FALSE ) // if in a answer mode, copy cm tp jm 
			{
				temp = (byte)( (wData>>1 ) & 0x00ff ) ;
				if ( temp != G(S).ModemOptions.V8_CI_Octet )
					x_send_mail ( V42_REMOTE_DISC, DP_TASK, NULL, 0 ) ;
				else
				{
					// copy CM to CJ
					dp_write_dsp_ram(0x0822,
						 (word)((word) (dp_read_dsp_ram(0x0822)&
										0xff8f ) |
								(word) ( (word)( wData & 0x01c0 ) >> 2 )));

					// tell datapump to procede with sending JM
					dp_write_dsp_ram(0x1801, 0x04);
				}
			}

			dp_hex_to_hexascii((char *) chMsgPtr,
							   (byte)( (wData>>1 ) & 0x00ff));

			for ( i = 4; i-- ; )
			{
				wData = (word) ((dp_read_dsp_ram(++wBuf) >> 1) & 0x00ff);
				chMsgPtr += 2 ;
				dp_hex_to_hexascii((char *) chMsgPtr, (byte)wData);
			}
			chMsgPtr += 2 ;
			break;
		}
	}
	*chMsgPtr++ = G(S).ModemOptions.CRChar ;
	*chMsgPtr++ = G(S).ModemOptions.LFChar ;
	x_send_mail ( AT_IO_DATA, IO_TASK, chMsg, (word)(chMsgPtr - chMsg) ) ;
}

/****************************************************************
Routine : dp_v8_originate_msg ( void )
*****************************************************************/
void dp_v8_originate_msg ( void )
{
	dp_a8a_msg ( '1' ) ;
}

/****************************************************************
Routine : dp_v8_orig_no_ans_msg ( void )
*****************************************************************/
void dp_v8_orig_no_ans_msg ( void )
{
	x_debug_msg ( "dpsync - no answer tone" );
	dp_a8a_msg ( '0' ) ;
}

#endif	// V80

#if defined(V8BIS) || defined(V80) || defined(PHASE1_DEBUG)
/********************************************************
dp_hex_to_hexascii
Description : 
	convort 1 byte of hex data to a ascii char
	string pointed by *cBuffPtr.
********************************************************/
void dp_hex_to_hexascii(char *chBuffPtr, byte bHex)
{
	byte c, bDigit ;
	
	bDigit = (byte) (( bHex & 0xf0 ) >> 4);
	for ( c = 2 ; c-- ; )
	{
		if ( bDigit < 0x0a )
			*chBuffPtr = (char)( bDigit + 0x30 ) ;
		else
			*chBuffPtr = (char)( bDigit + 0x37 ) ;
		chBuffPtr++ ;
		bDigit = (byte) (bHex & 0x0f);
	}
}
#endif

#ifdef PHASE1_DEBUG
/****************************************************************
Routine : dp_print_jm_rx ( void )
*****************************************************************/
void dp_print_cmjm(char cj, word start, word end)
{
	byte chMsg[60], *chMsgPtr;
	word wBuf, wData ;

	chMsgPtr = &chMsg[0] ;
	*chMsgPtr++ = cj;
	*chMsgPtr++ = 'M' ; 
	*chMsgPtr++ = ':' ; 
	*chMsgPtr++ = ' ' ; 

	// print all octets
	for (wBuf = start ; wBuf <= end ; wBuf++)
	{
		wData = (dp_read_dsp_ram(wBuf) >> 1 ) & 0x00ff ;
		dp_hex_to_hexascii ( chMsgPtr, (byte)( wData ) ) ;
		chMsgPtr += 2 ;
	}

	*chMsgPtr++ = G(S).ModemOptions.CRChar ;
	*chMsgPtr++ = G(S).ModemOptions.LFChar ;
	*chMsgPtr++ = 0;
	x_send_at_io_data(chMsg);
}

/****************************************************************
Routine : dp_print_jm_rx ( void )
*****************************************************************/
void dp_print_jm_rx(void)
{
	dp_print_cmjm('J', 0xb36, 0xb4a);
}
/****************************************************************
Routine : dp_print_cm_tx ( void )
*****************************************************************/
void dp_print_cm_tx(void)
{
	x_send_at_io_crlf();
	dp_print_cmjm('C', 0xb20, 0xb2e);
}
#endif	//PHASE1_DEBUG
