/*name and version number: @(#)iorad1.c	1.11*/
/*date of get:             09/06/00  16:59:16 */
/*date of delta:           01/05/99  15:04:16 */
//*****************************************************************************
// File :	iorad1.c
// Description :
//	Contains all unbanked routines for the data transmition between
//	DTE and DCE in the RADISH mode.
//
// Functions Contained :
//
//   InitIoRadishState
//   ProcessModeInd(byte *ModeIndType);
//   ReportCap(void);
//   RadishRxHdlcFrame
//   RadishRxFrameType
//   ProcessIFrame
//   RadishDceToDte
//   RcvdEventFromDte
//
//
//
//
// Revision History :
//	Initials	Date		Change
//	gfh	       4/7/95           Initial
//*****************************************************************************
#include "llglob_d.h"

#ifdef RADISH
#include "radish.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "allglobs.h"

#ifdef MODEM_Z80
#define V42bisP1	1024		/* Number of codewords */
#else
#define V42bisP1	2048		/* Need at least 256 for MNP5 */
#endif

//-----------------------------------------------------------------------------
//  function prototypes
//-----------------------------------------------------------------------------
void InitIoRadishState(void);
byte ProcessModeInd(byte *DataSpeed);
void ReportCap(void);
void RadishRxHdlcFrame(void);
byte RadishRxFrameType(void);
byte ProcessIFrame(void);
void RadishDceToDte(void);
byte RcvdEventFromDte(TERMINATION_CHAR event);
//-----------------------------------------------------------------------------
//  private variables
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//   global variables
//-----------------------------------------------------------------------------

extern byte parent[2*V42bisP1];


//-----------------------------------------------------------------------------
//   external functions
//-----------------------------------------------------------------------------
extern void ReportEvent(RADISH_EVENT event);
extern word at_itoa( word num, byte *str, byte format);


//*****************************************************************************
// Routine : InitIoRadishState
// Description :
//      Initialize io radish states.
//
// Parameters in :
//	none
// Parameters out :
//      none
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void InitIoRadishState(void)
{
  switch ( x_radish_state )
  {
     case RADISH_TX_CAP:
         IoRadishState = IO_RADISH_TX_CAP;
         break;

     case RADISH_TX_LONG_CAP:
	IoRadishState = IO_RADISH_TX_LONG_CAP;
	break;

     case RADISH_RX_CAP:
         IoRadishState = IO_RADISH_RX_CAP;
         break;

     case RADISH_TX_MODE_IND:
         IoRadishState = IO_RADISH_TX_MODE_IND;
         break;

     case RADISH_RX_MODE_IND:
         IoRadishState = IO_RADISH_RX_MODE_IND;
         break;

     case RADISH_TX_RR_AND_WAIT_FOR_DISC:
     case RADISH_TX_RR_AND_WAIT_FOR_MODE_IND:
     case RADISH_TX_RR_AND_TX_MODE_IND:
     case RADISH_TX_DISC_AND_SEND_EOT_TO_DTE:
     case RADISH_TX_DISC:
     case RADISH_TX_DISC_ERROR_OUT:
     case RADISH_TX_UA:
     case RADISH_TX_UA_DATA_MODE_RESPONSE:
     case RADISH_TX_RR:
     case RADISH_TX_RNR:
     case RADISH_TX_DISC_AND_GET_OUT:
     case RADISH_TX_DISC_ERROR_OUT_WAIT_EOT:
         IoRadishState = IO_RADISH_TX_RESPONSE;
         break;

     case RADISH_WAIT_FOR_ATSAC_CMD:
         IoRadishState = IO_RADISH_WAIT_FOR_ATSAC_CMD;
         break;

     case RADISH_WAIT_FOR_DISC_FRAME:
         IoRadishState = IO_RADISH_WAIT_FOR_DISC_FRAME;
         break;

     case RADISH_TX_DATA:
         IoRadishState = IO_RADISH_TX_DATA;
         break;

     case RADISH_WAIT_FOR_ACK:
         IoRadishState = IO_RADISH_WAIT_FOR_ACK;
         break;

     case RADISH_RX_RNR_RECOVERY:
         IoRadishState = IO_RADISH_RX_RNR_RECOVERY;
         break;

     case RADISH_RETRANSMIT:
         IoRadishState = IO_RADISH_RETRANSMIT;
         break;

     case RADISH_RX_DATA:
         IoRadishState = IO_RADISH_RX_DATA;
         break;

     case RADISH_WAIT_FOR_DATA_MODE_RESPONSE:
         IoRadishState = IO_RADISH_WAIT_FOR_DATA_MODE_RESPONSE;
         break;

     case RADISH_NULL:
         IoRadishState = IO_RADISH_NULL;
         break;
  }
}






//*****************************************************************************
// Routine : ProcessModeInd
// Description :
//      Checks whether the Mode Indicator values are valid. If they are, then
//      it returns the data mode speed, otherwise it returns FALSE to indicate
//      that that the mode indicator values aren't valid.
//
// Parameters in :
//      none
// Parameters out :
//      *DataSpeed     -  data mode speed
//
// returns:
//      TRUE      -  if the Mode Ind values are valid
//      FALSE     -  if the Mode Ind values aren't valid.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
byte ProcessModeInd(byte *DataSpeed)
{
  byte i;
  //---------------------------------------------------------------------------
  //  VV, Modem and Fax Mode Indicators are expected.
  //---------------------------------------------------------------------------
//  if(RadishRxFrame.len != 2)
//	return(INVALID_MODE_IND);
  for ( i = 1; i < NUM_OF_MODE_INDICATORS; i++)
  {
    if ( (ModeInd[i].byte1 == RadishRxFrame.data[0]) 
	&& (ModeInd[i].byte2 == RadishRxFrame.data[1]) )
    {
	if(ModeInd[i].supported == FALSE)
	{
		if( !(RadishSentFirstBlock||RadishRcvFirstBlock) )
		{
			//need to do this in accordance to 4.2.9.3 of VV 1.11
			if(ModeInd[i].byte1 == MODEM_DMODE_MI_B1)
			{
				if(ModeInd[i].byte2 == FAX_DMODE_MI_B2)
				{
					ReportEvent(EV_SFA);
				}
				else
				{
					ReportEvent(EV_SMD);
				}
			}
			else
			{
				
				ReportEvent(EV_SSV);	
			}
		}

		return(NON_ACTIVE_MODE_IND);
	}
        *DataSpeed = i;
        return (VALID_MODE_IND);
    }
  }
  return (UNSUPPORTED_MODE_IND);
}



//*****************************************************************************
// Routine : ReportCap
// Description :
//      Report remote CAPABILITIES info to the DTE.
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void ReportCap(void)
{
   byte i;
//   byte buff[((SCD_DATA_SIZE)*3)+5];
   byte *BuffPtr;


   BuffPtr = parent;    //use v42bis dictionary
   if(x_modem_originate)
   {
	*BuffPtr++ = S.ModemOptions.CRChar ;
	*BuffPtr++ = S.ModemOptions.LFChar ;
   }
//   ( x_modem_originate ) ? x_strcpy(BuffPtr,"\r\n-SRC:\"") :
   x_strcpy(BuffPtr,"-SRC:\"");
   BuffPtr += x_strlen(BuffPtr);

   for ( i = 0; i < RadishRxFrame.data[3] ; ++i )
   {
     at_itoa((word)RadishRxFrame.data[4+i],BuffPtr,HEX);
     BuffPtr += 2;
     if ( i < RadishRxFrame.data[3]-1 )
         *BuffPtr++ = SPACE;
   }
   *BuffPtr++ = '"';
   *BuffPtr++ = S.ModemOptions.CRChar ;
   *BuffPtr++ = S.ModemOptions.LFChar ;
   *BuffPtr = 0;	//null Terminate
   x_send_mail(AT_IO_DATA,IO_TASK,parent,x_strlen(parent));
}


//*****************************************************************************
// Routine : RadishRxHdlcFrame
// Description :
//      Receive hdlc frame and saving it in RadishRxFrame
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void RadishRxHdlcFrame(void)
{

   word rx_ch ;

   if(RadishRxFrame.status != RADISH_RX_FRAME_STATUS_EMPTY)
   {
   	RadishRxFrame.status = RADISH_RX_FRAME_STATUS_EMPTY ;
   	RadishRxFrame.len = 0 ;
   }
   while ( io_dce_rx_rptr != io_dce_rx_wptr )
   {
	  rx_ch = *io_dce_rx_rptr++ ;
#ifdef DEBUGGING
       //sprintf(szBuffer,"rx_ch=%x",rx_ch);
       //x_debug_msg(szBuffer);
#endif

	  if ( io_dce_rx_rptr >= io_dce_rx_eptr )
		io_dce_rx_rptr = io_dce_rx_sptr;

	  if  ( rx_ch & HDLC_START_OF_FRAME )
	  {
		RadishRxFrame.len = 0;
		RadishRxFrame.data[RadishRxFrame.len++] = (byte) rx_ch;

		if ( rx_ch & HDLC_END_OF_FRAME )
		{
			if ( rx_ch & HDLC_CRC_ERROR )
		        {
				x_debug_msg ( "radish - crc error " );
				RadishRxFrame.status =  RADISH_RX_FRAME_STATUS_ERROR;
				RadishRxFrame.len = 0;
			}
			else
			{
				RadishRxFrame.status = RADISH_RX_FRAME_STATUS_FULL;
			}
			return;
		}
	  }
	  else if ( RadishRxFrame.len > 0 )
	  {
		   if ( RadishRxFrame.len > RADISH_RX_FRAME_SIZE-1 )	//N201 we should have returned by now
									//due to EOF
			{
				RadishRxFrame.status = RADISH_RX_FRAME_STATUS_LONG;
			}
			else
			{
				RadishRxFrame.data[RadishRxFrame.len++] = (byte) rx_ch;
			}

		   if ( rx_ch & HDLC_END_OF_FRAME )
		   {
			if ( rx_ch & HDLC_CRC_ERROR )
		        {
				x_debug_msg ( "radish - crc error " );
				RadishRxFrame.status =  RADISH_RX_FRAME_STATUS_ERROR;
				RadishRxFrame.len = 0;
			}
			else
			{
				if(RadishRxFrame.status == RADISH_RX_FRAME_STATUS_EMPTY)
					RadishRxFrame.status = RADISH_RX_FRAME_STATUS_FULL;
			}
			return;
		   }
	  }
   }

}



//*****************************************************************************
// Routine : RadishRxFrameType
// Description :
//     Check the received frame type and return it
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
byte RadishRxFrameType(void)
{
   RADISH_RX_FRAME *frame ;
   word len ;


   if ( (RadishRxFrame.status != RADISH_RX_FRAME_STATUS_FULL) && 
	(RadishRxFrame.status != RADISH_RX_FRAME_STATUS_LONG) )
	  return ( EMPTY_FRM );

   frame = &RadishRxFrame ;
   len = frame->len ;


   // if address byte is neither 0x01 nor 0x03 then illegal frame.
   if ( ! ( (frame->data[0] == 0x03) || (frame->data[0] == 0x01) ) )
   {
	if( len == 2)
		return(TEST);	//if mode indicator
	x_debug_msg("radish - receive - ADDR ILG FRM ");
	return ( ILGFRM ) ;
   }


   // --------------  I frames   -------------------------

   if ( ! ( ( frame->data[1]) & 0x1 ) )
   {
	// I-frames can only be Commands
	if ( ((frame->data[0] == 0x03) && (!x_modem_originate)) ||
	     ((frame->data[0] == 0x01) && (x_modem_originate)) )
	{
		return ( IFRM ) ;
	}
   }

  //---------------  supervisory or unnumbered frames ------------------
#ifdef DEBUGGING
       sprintf(szBuffer,"addr=%x",frame->data[0]);
       x_debug_msg(szBuffer);
#endif
    switch ( frame->data[1] )
   {

	// Supervisory frames, can be Commands or Responses
	case RR :
	case RNR:
		if ( len != 3 )
		{
			x_debug_msg("IO-RR LEN ILGFRM");
			return ( ILGFRM ) ;
		}

#ifdef DEBUGGING
       sprintf(szBuffer,"nr=%x",frame->data[2]);
       x_debug_msg(szBuffer);
#endif
	
		if( x_radish_state == RADISH_WAIT_FOR_ACK )
		{
			if( (x_modem_originate) && (!(frame->data[0] & CR)) )
				return(ILGFRM);
		}
	    if ((( frame->data[0] & CR ) && ( !x_modem_originate )) ||
		    (!( frame->data[0] & CR ) && ( x_modem_originate)))
			lapm_poll = frame->data[2] & PF;

	    return ( frame->data[1] );

	// Unnumbered frames that can only be Commands
        case (DISC_FRM):
            x_debug_msg("radish - receive - DISC ");
	    if ( (len != 2))
/*
		 || ( x_modem_originate && (frame->data[0] & CR) )
		|| ( !(x_modem_originate) && !(frame->data[0] & CR) ) )
		  return ( ILGFRM ) ;
	    if ( (frame->data[0] == 0x03) || (frame->data[0] == 0x01) )
			return ( frame->data[1] ) ;
	    else
*/
		{
			x_debug_msg("IO- ilgl DISC");
			return ( ILGFRM ) ;
		}
		else
		{
//			return ( frame->data[1] ) ;
			return (DISC_FRM);
		}

	// Unnumbered frames that can only be Responses
        case (UA_FRM):
            x_debug_msg("radish - receive - UA ");
	    if ( len != 2 )
		return ( ILGFRM ) ;

	    if (((frame->data[0] & CR) && (x_modem_originate==FALSE))||
		    (!(frame->data[0] & CR) && (x_modem_originate)))
				return ( ILGFRM ) ;
	    return ( frame->data[1] ) ;

	case UI :
        case (UI | U_PF):
            x_debug_msg("radish - receive - UI ");
 	    return ( UI ) ;

	default :
		if( len == 2)
			return(TEST);	//if mode indicator
            	x_debug_msg("radish - receive - ILGFRM ");
	    	return ( ILGFRM ) ;
   }
}



//*****************************************************************************
// Routine : ProcessIFrame
// Description :
//      Process the i-frame in the dce buffer and verify that it has a valid
//      n(s). If it does then move frame to the dte buffer and return TRUE
//      else return FALSE.
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
byte ProcessIFrame(void)
{
   RADISH_RX_FRAME *ptr;

   ptr = &RadishRxFrame;
#ifdef DEBUGGING
       sprintf(szBuffer,"%d ",ptr->len);
       x_debug_msg(szBuffer);
       sprintf(szBuffer,"lapm_vr=%x ",lapm_vr);
       x_debug_msg(szBuffer);
       sprintf(szBuffer,"ns=%x",ptr->data[1]);
       x_debug_msg(szBuffer);
#endif
		// check for valid length
	if ( (ptr->len >= 3) && (ptr->len <= RADISH_RX_FRAME_SIZE)
		&& (io_get_dte_tx_count() > (RADISH_RX_FRAME_SIZE-3)) )
	{
		lapm_poll = ptr->data[2] & PF ;
	}
	else
	{
		x_debug_msg("IO- incorrect I frm len");
		return(FALSE);
	}

   if ( ptr->status == RADISH_RX_FRAME_STATUS_FULL )
   {
       // if n(s) != v(r) then wait for end of block and tx partial RR
       if ( (byte) (ptr->data[1] >> 1) != lapm_vr )
       {
          ptr->status = RADISH_RX_FRAME_STATUS_EMPTY;
          return (FALSE);
       }


	RadishDceToDte();
   }

   return (TRUE);
}



//*****************************************************************************
// Routine : RadishDceToDte
// Description :
//      Move i-frame from the dce buffer to the dte buffer, check for term
//      character and update v(r);
//
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
void RadishDceToDte( void )
{
   byte RcvdChar;
   byte *wptr, *rptr;
   word len ;
   RADISH_RX_FRAME *ptr;

   ptr = &RadishRxFrame;

   rptr = &ptr->data[3] ;	// point to i-frame data field
   len = ptr->len - 3 ;	        // get only information field length


   //--------------------------------------------------------------------------
   // copy data from receive frame to dte transmit buffer
   //--------------------------------------------------------------------------
   wptr = io_dte_tx_wptr ;	// get dte transmit buffer pointer
   while ( len )
   {

     // read data from the receive frame
     RcvdChar = *rptr++;

#ifdef DEBUGGING
//     sprintf(szBuffer,"RcvdChar = %x",RcvdChar);
//     x_debug_msg(szBuffer);
#endif

     if (radish_last_rx_char == DLE)
     {
       switch ( RcvdChar )
       {
          case CAN:
              Rx_TermChar = DLE_CAN;
              break;

          case ETX:
              Rx_TermChar = DLE_ETX;
              break;

          case ETB:
              Rx_TermChar = DLE_ETB;
              break;

          case EOT:
              Rx_TermChar = DLE_EOT;
              break;

          case ESC:
              Rx_TermChar = DLE_ESC;
              break;

	case DLE:
		Rx_TermChar = DLE_DLE;
		x_debug_msg("IO-got escaped DLE");
		break;

          default:
		x_debug_msg("IO- got illegal DLE sequence");
              break;
       }
     }
	if(Rx_TermChar == DLE_DLE)
	{
		radish_last_rx_char = FALSE;	//don't get fooled on 2nd DLE
		Rx_TermChar = NUL;
	}
	else
	{
		radish_last_rx_char = RcvdChar;
	}
	
	if(!RadishOptions.SequenceResponseControl)
	{
		if( (Rx_TermChar) && (Rx_TermChar != DLE_ESC) )
		{
			RcvdChar = CAN;	//replace illegal termination with <CAN>
			Rx_TermChar = DLE_CAN;
		}
	}

	*wptr++ = RcvdChar;                   // save char in the frame.

     if ( wptr >= io_dte_tx_eptr )
	 wptr = io_dte_tx_sptr;
     --len;


     if ( Rx_TermChar )
         break;

   }
   io_dte_tx_wptr = wptr;	           // save dte transmit buffer pointer


   ptr->status = RADISH_RX_FRAME_STATUS_EMPTY ;
   ptr->len = 0 ;
#ifdef DEBUGGING
     sprintf(szBuffer,"lapm_vr = %x",lapm_vr);
     x_debug_msg(szBuffer);
#endif
   lapm_vr = ( lapm_vr + 1 ) & 127 ;	   // increment ack state variable

}


//*****************************************************************************
// Routine : RcvdEventFromDte
// Description :
//      Checks whether a message event has been received from the
//      DTE.  Events can be <DLE><CAN>, <DLE><EOT>
//
//
// Revision History :
//	Initials	Date		Change
//	  Eli T.       09/30/94         Initial
//*****************************************************************************
byte RcvdEventFromDte(TERMINATION_CHAR event)
{
   byte ch;

   switch ( event )
   {
      case DLE_CAN:
           ch = CAN;
           break;

      case DLE_EOT:
           ch = EOT;
           break;
   }

   while ( io_get_dte_rx_char ( &io_dte_rx_last_ch ) )
   {
        dte_rcv_str[1] = io_dte_rx_last_ch;
#ifdef DEBUGGING
     //sprintf(szBuffer,"EVNTChar = %x",io_dte_rx_last_ch);
     //x_debug_msg(szBuffer);
#endif

        if ((dte_rcv_str[0] == DLE) && (dte_rcv_str[1] == ch))
            return (TRUE);
        /*make sure to escape DLEs in this routine*/
        if ((dte_rcv_str[0] == DLE) && (dte_rcv_str[1] == DLE))
        {
                x_debug_msg("IO-got escaped Event DLE");
                dte_rcv_str[1] = NUL;
        }
        // save received char in dte_rcv_str[0].
        dte_rcv_str[0] = dte_rcv_str[1];
   }
   return (FALSE);
}

#endif

