/*name and version number:@(#)atfax.c	1.116*/
/*date of get: 		  12/15/00 10:10:16*/
/*date of delta:	  11/30/00 22:37:46*/
/****************************************************************
File : atfax.c
Description :
	Contains all the parse and command routines for the FAX
	commands.

Procedures Contained :
	at_get_faxrate
	at_fax
	at_v34fax_msg

Revision History :
	Initials	Date		Change
	J.S.Xu		10/12/92	Initial
	S.J.Busak 01/21/99  Add hooks for Class 2.0 
	J.Gurnavage	05/20/99	Add V.34 Fax Messages
	S.J.Busak 09/13/99  Add Class 2/2.0/2.1 ECM and V.34 FAX
*****************************************************************/

#include "llglob_d.h"
#include "atglob.h"
#include "dpglob.h"
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)  
# include "fax_c2.h"
#endif

#if defined(V34_FAX)
	#include "faxv34.h"
	#define CLASS2_X_QUERY "2.1"
	#define CLASS2_X_RANGE ",2.1"
	#define CLASS2_X_VERSION '1'
#else
	#define CLASS2_X_QUERY "2.0"
	#define CLASS2_X_RANGE ",2.0"
	#define CLASS2_X_VERSION '0'
#endif

#include "allglobs.h"

#if defined(VENUS) || defined( MODEM_ARM)
/****************************************************************
Function : check_rate_change ()
Description :
	This function checks to see if modulations changes from V.17 to
	some non-V.17 modulation.  If so, a flag is cleared, causing the
	fax dsp code to be downloaded.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials		Date			Change
	SJ Busak		01/03/97		Initial
*****************************************************************/

void check_rate_change (void)
{
	if ( (G(last_fax_v17) != NON_V17) && 	// Was last modulaton V.17 AND
		  (G(x_fax_v17) == NON_V17) )	    // Current modulation not V.17?
		G(dp_fax_downloaded) = 0;          // Download FAX to DSP

	G(last_fax_v17) = G(x_fax_v17);           // Save current modulation
}
#endif

/****************************************************************
Routine : at_get_faxrate
Description :
	This routine set the global variable G(x_fax_rate) according to
	the number "num".
Parameters in :
	num
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J. S. Xu	10/22/92	Initial
*****************************************************************/
byte at_get_faxrate(word num)
{
	switch (num)
	{
		case 3:		G(x_fax_rate) = MR_300;	G(x_fax_v17) = NON_V17 ;  break;
		case 24:	G(x_fax_rate) = MR_2400;	G(x_fax_v17) = NON_V17 ;  break;

		case 48:
			G(x_fax_rate) = MR_4800;
			G(x_fax_v17) = NON_V17 ;
			break;

		case 72:	G(x_fax_rate) = MR_7200;	G(x_fax_v17) = NON_V17 ;  break;
		case 73:	G(x_fax_rate) = MR_7200;
					G(x_fax_v17) = V17_LONG_TRAIN ;
					break;
		case 74:	G(x_fax_rate) = MR_7200;
					G(x_fax_v17) = V17_SHORT_TRAIN ;
					break;
		case 96:	G(x_fax_rate) = MR_9600;	G(x_fax_v17) = NON_V17 ;  break;
		case 97:	G(x_fax_rate) = MR_9600;
					G(x_fax_v17) = V17_LONG_TRAIN ;
					break;
		case 98:	G(x_fax_rate) = MR_9600;
					G(x_fax_v17) = V17_SHORT_TRAIN ;
					break;
		case 121:	G(x_fax_rate) = MR_12000;
					G(x_fax_v17) = V17_LONG_TRAIN ;
					break;
		case 122:	G(x_fax_rate) = MR_12000;
					G(x_fax_v17) = V17_SHORT_TRAIN ;
					break;
		case 145:	G(x_fax_rate) = MR_14400;
					G(x_fax_v17) = V17_LONG_TRAIN ;
					break;
		case 146:	G(x_fax_rate) = MR_14400;
					G(x_fax_v17) = V17_SHORT_TRAIN ;
					break;
		default:
			at_cmd_err_ret();
			break;
	}

	if (G(at_result_code) == ERROR)
		return ( FALSE );
	else
		return ( TRUE );
}
/****************************************************************
Routine : at_fax
Description :
	This routine parses the "at+" commands.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J. S. Xu	10/20/92	Initial
*****************************************************************/
void at_fax(void)
{
	byte ch[ATMAX];		// fax command buffer
	byte *fax_cmd_ptr;	// fax command pointer
	byte txchar[AT_MAXMSG];	// message buffer for fax-query response string
	byte more_cmd = 0;
	word len;
	word num;
	byte *ptr ;

#ifdef V34_FAX
	word	chindex;	// index into ch[] array
#endif

#if defined (CLASS2_FAX) || defined (CLASS20_FAX)  
	if ( atfax_c2 () )      // Parse Class-2 & -2.0 AT commands first
		return;				        // Don't parse class-1 AT commands if end of buffer
#endif
	fax_cmd_ptr = ch;
	txchar[0] = *G(at_cmd_ptr)++;
	while ( (txchar[0] != 0) && (txchar[0] != ';') )
	{
		/*
		 * put one fax command to ch
		 */
		*fax_cmd_ptr++ = txchar[0];
		txchar[0] = *G(at_cmd_ptr)++;
	}
	*fax_cmd_ptr = 0;		// terminate ch with NULL

	if (txchar[0] == ';')
		more_cmd = 1;		// not end yet

	/*
	 * AT+FCLASS? AT+FCLASS=? AT+FCLASS=value
	 */
	if ( (ch[0] == 'C') &&
		  (ch[1] == 'L') &&
		  (ch[2] == 'A') &&
		  (ch[3] == 'S') &&
		  (ch[4] == 'S') )
	{
		if ( (ch[5] == '?') && (ch[6] == 0) )
		{
#ifdef RADISH
			if (G(x_modem_mode) == MODEM_RADISH)
				at_output_msg("80",2);
			else 
#endif
			if ((G(x_modem_mode) == MODEM_VOICE)
#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
				|| (G(x_modem_mode) == MODEM_SPEAKER_PHONE)
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
				)
				at_output_msg((const byte *) "8", 1);
			else if ( G(x_modem_mode) == MODEM_FAX )
			{
#ifdef CLASS2_FAX
				if (G(c2p.fclass) == 2)             // Is class 2 active?
					at_output_msg ("2", 1); // Then display a '2'
				else
#endif
#ifdef CLASS20_FAX
				if (G(c2p.fclass) == 0x20)                   // Is Class 2.0/2.1 active?
					at_output_msg (CLASS2_X_QUERY, 3); // Then display "2.0" or "2.1"

				else
#endif
					at_output_msg((const byte *) "1", 1);
			}
			else
				at_output_msg((const byte *) "0", 1);
			G(at_result_code) = OK;
		}
		else if ( (ch[5] == '=') )
		{
			if ( (ch[6] == '?') && (ch[7] == 0) )
			{
				x_strcpy(txchar, (const byte *) "0,1");
				
				#ifdef CLASS2_FAX
					x_strcat(txchar, ",2");
				#endif

				#ifdef CLASS20_FAX
					x_strcat(txchar, CLASS2_X_RANGE);  // Add ",2.0" or ",2.1" to string
				#endif

				#ifdef VOICE
				if ( !(DATAFAXONLY) || ((DATAFAXONLY) && (DATA_FAX_TAM)) )
						x_strcat(txchar, (byte *)",8"); //msm//
				#endif
				#ifdef RADISH
				if ( !(DATAFAXONLY) || ((DATAFAXONLY) && (DATA_FAX_TAM)) )
						x_strcat(txchar, ",80");
				#endif
				

				at_output_msg(txchar, x_strlen(txchar));
				G(at_result_code) = OK;
			}
			else if ( (ch[6] == '0') && (ch[7] == 0) )
			{
#if defined(VOICE)	// VOICE_IDLE task only defined for VOICE
				// send mail first and then switch mode
				x_send_mail (VOICE_IDLE, DP_TASK, NULL, 0);
#endif
				G(x_modem_mode) = MODEM_DATA;
#if defined(V34_FAX)
				G(x_fax_v34mode) = NON_V34;	// jmg 052099
#endif
#ifdef RADISH
				x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_OFF_RADISH);
#endif
	#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
				G(c2p.fclass) = 0;  // Indicate data mode
	#endif
				G(at_result_code) = OK;
			}
			else if ( ((ch[6] == '1') && (ch[7] == 0))    // Class 1?
	#ifdef CLASS2_FAX
						 || ((ch[6] == '2') && (ch[7] == 0))    // Class 2?
	#endif
	#ifdef CLASS20_FAX
						 || ((ch[6] == '2') && (ch[7] == '.') && (ch[8] == CLASS2_X_VERSION) && (ch[9] == 0))  // Class 2.0 or 2.1?
	#endif
							)
			{
				// send mail first and then switch mode
				x_send_mail (VOICE_IDLE, DP_TASK, NULL, 0);
				G(x_modem_mode) = MODEM_FAX ;
#ifdef RADISH
				x_send_mail(RADISH_DP_TASK,DP_TASK,0,RADISH_OFF_RADISH);
#endif
				G(x_fax_state) = FAX_TX_HDLC;	//assume FTH=3
				G(x_fax_rate) = MR_300;
#ifdef CLASS2_FAX
				G(c2p.fclass) = ch[6] - '0';  // Save selected class
#endif
#ifdef CLASS20_FAX
				if (ch[7] == '.')     // Class 2.0 or 2.1 specified?
					G(c2p.fclass) = 0x20;       // Set class to 2.0 (Class 2.1 is stored as 2.0 for use with CLASS_2_OR_20 macro)
#endif
#if defined(CLASS20_FAX) && defined(V34_FAX)
				if (G(c2p.fclass) == 0x20)                  // Class 2.1 set? (0x20 also indicates Class 2.1)
				{
					if( G(S).ModemOptions.V8_CI_Octet != 0xA1 )
						G(S).ModemOptions.V8_CI_Octet = 0x81;

					G(x_fax_v34mode) = V34_SOURCE;           // Default to V.34 modulation
				}
	#ifdef CLASS2_FAX
				else if (G(c2p.fclass) == 2)                // Class 2 interface specified?
					G(x_fax_v34mode) = NON_V34;       // Must be non-V.34 modulation
	#endif
#endif
				G(at_result_code) = OK;
			}
#ifdef VOICE
			else if ( (ch[6] == '8') && (ch[7] == 0) )
			{
				if ((DATAFAXONLY) && !(DATA_FAX_TAM)) //DATAFAXONLY defined in llglob_d.h
				{
					at_cmd_err_ret();
					return;
				}

#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
				if ( G(x_modem_mode) != MODEM_SPEAKER_PHONE )
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
					G(x_modem_mode) = MODEM_VOICE ;
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)
				G(c2p.fclass) = 8;  // Indicate voice mode
#endif
				G(at_result_code) = OK;
				G(S).ModemOptions.HangupControl = 0 ;
			}
#endif
#ifdef RADISH
            else if ( (ch[6] == '8') && (ch[7] == '0') && (ch[8] == 0) )
            {
				if ((DATAFAXONLY) && !(DATA_FAX_TAM)) //DATAFAXONLY defined in llglob_d.h
				{
					at_cmd_err_ret();
					return;
				}
                x_send_mail(RADISH_DP_TASK,DP_TASK,0,SWITCH_TO_RADISH);
#if defined (CLASS2_FAX) || defined (CLASS20_FAX)  
				G(c2p.fclass) = 80; // Indicate Radish mode
#endif
                G(at_result_code) = OK;
            }
#endif
			else
			{
				at_cmd_err_ret();
				return;
			}
		}
		else
		{
			at_cmd_err_ret();
			return;
		}
	}
	/*
	 * AT+FTM=? AT+FRM=? AT+FTH=? AT+FRH=?
	 */
	else if ( ((ch[0] == 'T') && (ch[1] == 'M') &&
					 (ch[2] == '=') && (ch[3] == '?') &&
				(ch[4] == 0)) ||
				  ((ch[0] == 'R') && (ch[1] == 'M') &&
					(ch[2] == '=') && (ch[3] == '?') &&
					(ch[4] == 0)) ||
			  ((ch[0] == 'T') && (ch[1] == 'H') &&
					(ch[2] == '=') && (ch[3] == '?') &&
					(ch[4] == 0)) ||
			  ((ch[0] == 'R') && (ch[1] == 'H') &&
					(ch[2] == '=') && (ch[3] == '?') &&
					(ch[4] == 0)) )
	{
		x_strcpy(txchar, (const byte *) "3,24,48,72,73,74,96,97,98,121,122,145,146");
		//x_strcpy(txchar, "3,24,48,72,96");
		at_output_msg(txchar, x_strlen(txchar));
		G(at_result_code) = OK;
	}

        //----- AT+FMI?, AT+FMM?, AT+FMR? --------
        else if ( ch[0] == 'M')
        {
           //--------  AT+FMR?-------------
           if ( ( (ch[1] == 'R') && (ch[2] == '?') && (ch[3] == 0) ) ||
           		( (ch[1] == 'R') && (ch[2] == 0) ) )
           {
             ptr = (byte *) VERSION_STR ;
			 at_output_msg ( ptr, x_strlen ( ptr ) ) ;
             G(at_result_code) = OK;
           }
           //--------  AT+FM1?-------------
           else if ( ( (ch[1] == 'I') && (ch[2] == '?') && (ch[3] == 0) ) ||
           			( (ch[1] == 'I') && (ch[2] == 0) ) )
           {
#ifdef RADISH
  #ifdef VOICE
             x_strcpy(txchar, "Lucent Data/Fax/Voice/VoiceView");
  #else
             x_strcpy(txchar, "Lucent Data/Fax/VoiceView");
  #endif
#else
  #ifdef VOICE
             x_strcpy(txchar, (const byte *) "Lucent Data/Fax/Voice");
  #else
             x_strcpy(txchar, (const byte *) "Lucent Data/Fax");
  #endif
#endif
             at_output_msg(txchar, x_strlen(txchar));
             G(at_result_code) = OK;
           }

           //------- AT+FMM? --------------
           else if ( ( (ch[1] == 'M') && (ch[2] == '?') && (ch[3] == 0) ) ||
           			( (ch[1] == 'M') && (ch[2] == 0) ) )
           {
#ifdef RADISH
  #ifdef VOICE
             x_strcpy(txchar, "Data/Fax/Voice/VoiceView");
  #else
             x_strcpy(txchar, "Data/Fax/VoiceView");
  #endif
#else
  #ifdef VOICE
             x_strcpy(txchar, (const byte *) "Data/Fax/Voice");
  #else
             x_strcpy(txchar, (const byte *) "Data/Fax");
  #endif
#endif
             at_output_msg(txchar, x_strlen(txchar));
             G(at_result_code) = OK;
           }

           else
           {
             at_cmd_err_ret();
	     return;
           }

        }

	/*
	* AT+FLO=<method>
	*/
	else if ( (ch[0] == 'L') && (ch[1] == 'O') ) 
	{
		if (ch[2] == '=' ) 
		{
			len = at_atoi(&ch[3], &num,DECIMAL);
			if ( (ch[3+len] != 0) || (num > 2) )
			{
				at_cmd_err_ret();
				return;
			}
			G(S).ModemOptions.FlowControl = (byte)num;
		}
		else if( (ch[2] == '?') && (ch[3] == 0) )
		{
			num = (word)G(S).ModemOptions.FlowControl;
			len = at_itoa(num,txchar,DECIMAL);
			at_output_msg (txchar,len);

		}
		G(at_result_code) = OK;
	}

	/*
	* AT+FPR=<method>
	*/
	else if ( (ch[0] == 'P') && (ch[1] == 'R') )
	{
		if(ch[2] == '=' ) 
		{
			len = at_atoi(&ch[3], &G(fprsetting),DECIMAL);
			if (ch[3+len] != 0)
			{
				at_cmd_err_ret();
				return;
			}
		}
		else if( (ch[2] == '?') && (ch[3] == 0) )
		{
			len = at_itoa(G(fprsetting),txchar,DECIMAL);
			at_output_msg ( txchar, len ) ;
		}
		G(at_result_code) = OK;
	}
	/*
	* AT+FAA=<mode>
	*/
	else if ( ( ( G(x_modem_mode) == MODEM_DATA ) || ( G(x_modem_mode) == MODEM_FAX ) )
			&& (ch[0] == 'A') && (ch[1] == 'A') )
	{
		if(ch[2] == '=' ) 
		{
			if( (ch[3] == '?') && (ch[4] == 0) )
			{
				at_output_msg((const byte *) "0,1", 3);
			}
			else
			{
				if( ch[3] == '0')
					G(S).ModemOptions.AdaptiveAnswer = FALSE ; // disabled
				else if( ch[3] == '1')
					G(S).ModemOptions.AdaptiveAnswer = TRUE ; // enabled
				else
				{
					at_cmd_err_ret();
					return;
				}
			}
		}
		else if( (ch[2] == '?') && (ch[3] == 0) )
		{
			len = at_itoa(G(S).ModemOptions.AdaptiveAnswer,txchar,DECIMAL);
			at_output_msg ( txchar, len ) ;
		}
		G(at_result_code) = OK;
	}

#if defined(V34_FAX)	// {	jmg 052099
			// AT+F34=[<maxp>][,<minp>][,<prefc>][,<maxp2>][,<minp2>]
			// maxp  - max primary channel rate
			// minp  - min primary channel rate
			// prefc - preferred control channel rate
			// maxp2 - max duplex primary channel receive rate
			// minp2 - min duplex primary channel receive rate
	else if( ('3' == ch[0]) && ( '4' == ch[1] ) && ( '=' == ch[2] ) )
	{
		G(x_fax_maxp) = 12;	// default to 28.8K
#ifdef CLASS20_FAX
		G(c2p.fdcc.ps.br) = 11;   // Set FDCC (FCC) BR value to 28.8
		G(c2p.fdis.ps.br) = 11;   // Set FDIS (FIS) BR value to 28.8
#endif
		chindex = 3;	// point to start of parameters

			// CM defaults to Calling Terminal Transmits,
			// unless +a8e command already set it to Rcv.
			// Note that V8_CI_Octet is shifted in dpcntlv.c before use.
		if( G(S).ModemOptions.V8_CI_Octet != 0xA1 )
			G(S).ModemOptions.V8_CI_Octet = 0x81;

			// set V.34 Mode to HD Originate.
			// Mode will be changed on Answer side in dpcntlv.c.
		G(x_fax_v34mode) = V34_SOURCE;

		while( ch[chindex] != 0 )
		{
				// Maximum Primary Channel Rate (maxp)
			len = at_atoi( &ch[chindex], &num, DECIMAL);	// get maxp
			chindex += len;

			if( num > 14 )	// range check on maxp
			{
				at_cmd_err_ret();
				return;
			}

			if( len != 0 )	// only change if there was a value spec'd
			{
				G(x_fax_maxp) = num;
#ifdef CLASS20_FAX
				G(c2p.fdcc.ps.br) = num-1;   // Set FDCC (FCC) BR value to specified value
				G(c2p.fdis.ps.br) = num-1;   // Set FDIS (FIS) BR value to specified value
#endif
			}

			if( ch[chindex] == 0 || ch[chindex] != ',' )
				break;		// EOL, quit parsing
			++chindex;		// skip over comma...

				// Minimum Primary Channel Rate (minp)
			len = at_atoi( &ch[chindex], &num, DECIMAL);	// get minp
			chindex += len;

			if( num > 14 )	// range check on minp
			{
				at_cmd_err_ret();
				return;
			}

			if( len != 0 )	// only change if there was a value spec'd
			{
				G(x_fax_minp) = num;
			}

			if( ch[chindex] == 0 || ch[chindex] != ',' )
				break;		// EOL, quit parsing
			++chindex;		// skip over comma...

				// Preferred Control Channel Rate (prefc)
			len = at_atoi( &ch[chindex], &num, DECIMAL);	// get prefc
			chindex += len;

			if( num > 2 )	// range check on prefc
			{
				at_cmd_err_ret();
				return;
			}

			if( len != 0 )	// only change if there was a value spec'd
			{
				G(x_fax_prefc) = num;
			}

			if( ch[chindex] == 0 || ch[chindex] != ',' )
				break;		// EOL, quit parsing
			++chindex;		// skip over comma...

				// Maximum Primary Channel Receive Rate (FullDuplex)(maxp2)
			len = at_atoi( &ch[chindex], &num, DECIMAL);	// get maxp2
			chindex += len;

			if( num > 14 )	// range check on maxp2
			{
				at_cmd_err_ret();
				return;
			}

			if( len != 0 )	// only change if there was a value spec'd
			{
				G(x_fax_maxp2) = num;
			}

			if( ch[chindex] == 0 || ch[chindex] != ',' )
				break;		// EOL, quit parsing
			++chindex;		// skip over comma...

				// Minimum Primary Channel Receive Rate (FullDuplex)(minp2)
			len = at_atoi( &ch[chindex], &num, DECIMAL);	// get minp2
			chindex += len;

			if( num > 14 )	// range check on minp2
			{
				at_cmd_err_ret();
				return;
			}

			if( len != 0 )	// only change if there was a value spec'd
			{
				G(x_fax_minp2) = num;
			}

			break;			// all done

		} // while
		G(at_result_code) = OK;
	}
#endif	// V34_FAX }

	/* MUST BE ONLINE FOR REMAINING FAX AT-COMMANDS */

	else
	{
		if (G(x_modem_state) != MS_ON_DIAL)
		{
			at_cmd_err_ret();
			return;
		}

		/*
		* AT+FTS=<Time> AT+FRS=<Time>
		*/
		else if ( (ch[1] == 'S') && (ch[2] == '=') )
		{
			len = at_atoi(&ch[3], &num,DECIMAL);
			if (ch[3+len] != 0)
			{
				at_cmd_err_ret();
				return;
			}
			if ( ch[0] == 'R' )
			{
				G(x_fax_state) = FAX_RX_START ;
				x_send_mail(FAX_WAIT_SILENCE, DP_TASK, (byte *) &num, len);
				// Monitor the DTE, if any character, send OK to DTE
				x_send_mail ( AT_IO_FAX_STATE, IO_TASK, NULL, 0 ) ;
				G(at_result_code) = NO_MSG ;
			}
			else if ( ch[0] == 'T' )
			{
				G(x_fax_state) = FAX_TX;
				x_send_mail(FAX_WAIT_SILENCE, DP_TASK, (byte *) &num, len);
				G(at_result_code) = NO_MSG ;
			}
			else
			{
				at_cmd_err_ret();
				return;
			}
		}
		/*
		 * AT+FTM=<MOD> AT+FRM=<MOD> AT+FTH=<MOD> AT+FRH=<MOD>
		 */
		else
		{
			len = at_atoi(&ch[3], &num,DECIMAL);
			if (ch[3+len] != 0)
			{
				at_cmd_err_ret();
				return;
			}
			if ( at_get_faxrate(num) == FALSE )
				return;

			if ( (ch[0] == 'T') && (ch[1] == 'M') && (ch[2] == '=') )
			{
#ifdef VENUS
				check_rate_change ();   // Check if change from V.17 to non-V.17
#endif
				G(x_fax_state) = FAX_TX;
				x_send_mail(FAX_STARTUP_TRANSMIT, DP_TASK, NULL, 0);
			}
			else if ( (ch[0] == 'R') && (ch[1] == 'M') && (ch[2] == '=') )
			{
#ifdef VENUS
				check_rate_change ();   // Check if change from V.17 to non-V.17
#endif
				G(x_fax_state) = FAX_RX;
				x_send_mail(FAX_STARTUP_RECEIVE, DP_TASK, NULL, 0);
				x_send_mail ( AT_IO_FAX_STATE, IO_TASK, NULL, 0 ) ;
			}
			else if ( (ch[0] == 'T') && (ch[1] == 'H') && (ch[2] == '=') )
			{
#ifdef VENUS
				if (G(x_fax_rate) != MR_300)  // ECM mode?
					check_rate_change ();       // Check if change from V.17 to non-V.17
#endif
				G(x_fax_state) = FAX_TX_HDLC;
				x_send_mail(FAX_STARTUP_TRANSMIT, DP_TASK, NULL, 0);
			}
			else if ( (ch[0] == 'R') && (ch[1] == 'H') && (ch[2] == '=') )
			{
#ifdef VENUS
				if (G(x_fax_rate) != MR_300)  // ECM mode?
					check_rate_change ();       // Check if change from V.17 to non-V.17
#endif
				G(x_fax_state) = FAX_RX_HDLC;
				x_send_mail(FAX_STARTUP_RECEIVE, DP_TASK, NULL, 0);
				x_send_mail ( AT_IO_FAX_STATE, IO_TASK, NULL, 0 ) ;
			}
			else
			{
				at_cmd_err_ret();
				return;
			}
		}
	}

	if (more_cmd)
		atparse_cmd();
	else
	{
		if ( G(at_result_code) != NO_MSG )
			at_output_msg(NULL, 0);
		G(at_state) = AT_IDLE;
	}
} // at_fax()

#if defined(V34_FAX)
/****************************************************************
Routine : at_v34fax_msg()
Description :
	Send the Primary Channel and Control Channels rates for this call.

Revision History :
	JMG	03/10/99	Initial
*****************************************************************/
void at_v34fax_msg()
{
	byte	msg[14];
	byte	len = 0;

		// read PRate from DSP (what regs????? )
	x_debug_msg ( "atfax-send +F34: msg" );
	msg[len++] = G(S).ModemOptions.CRChar ;
	msg[len++] = G(S).ModemOptions.LFChar ;
	msg[len++] ='+';
	msg[len++] ='F';
	msg[len++] ='3';
	msg[len++] ='4';
	msg[len++] =':';
	len += at_itoa( (getActualPRate() + 1), &msg[len], DECIMAL);
	msg[len++] = ',' ;
	msg[len++] = '1' ;	// only 1200bps for now.
	//len += at_itoa( 1, &msg[len], DECIMAL);	// only 1200bps supported
	msg[len++] = G(S).ModemOptions.CRChar ;
	msg[len++] = G(S).ModemOptions.LFChar ;
	x_send_mail ( AT_IO_DATA, IO_TASK, msg, len ) ;
} // at_v34fax_msg()
#endif
