/*name and version number:@(#)mnp_dce.c	1.58*/
/*date of get: 		  12/15/00 10:10:42*/
/*date of delta:	  11/30/00 16:59:03*/
/****************************************************************
File :	mnp_dce.c
Description :
	Contains dce routines for sending and receiving mnp frames

Procedures Contained :
	mnp_tx_octet_frame
	mnp_tx_hdlc_frame
	mnp_rx_data

Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
//msm// #include "z80glob.h"
#include "lapm.h"
#include "mnp.h"
#include "allglobs.h"

/****************************************************************
Routine : mnp_next_tx_rframep
Description :
	Get next mnp lt frame to read from (for transmitting)
Parameters in :
	none
Parameters out :
	pointer to next lapm transmit frame to read data from if available.
	NULL if no frames available.
Revision History :
	Initials	Date		Change
	MB			07/15/93	Modified for mnp
*****************************************************************/
non_banked
LAPM_FRAME* mnp_next_tx_rframep ( void )
{
	byte i, ns_index ;
	LAPM_FRAME *fptr;

	/* get index of frame ns, based on whether or not using optimization */
	if ( G(mnp_fixed_field_opt_flag) )
		ns_index = 2 ;
	else
		ns_index = 4 ;

	if ( G(mnp_sk) > 0 )
	{
		/* get index of frame to transmit */
		for ( i=0, fptr = LTF ; i < G(mnp_k) ; i++, fptr++ )
		{
			if ( (fptr -> txstatus == FULL) &&
				 (fptr -> data[ns_index] ==
				 ((byte) ((G(mnp_ns)+1) /* % MNP_MOD */ ))) )
			 {
				#if defined(HDLC_FRAMES_BY_REFERENCE)
				if ( fptr -> cnt )
				{
					//----------------------------------------
					// This LT Frame is already on the way!!!
					// A ptr to it has been placed in the DCE
					// TX Ring Buffer by lapm_tx_hdlc_framep().
					// It is up to the DSP ISR (QMP or Mailbox)
					// to clear the cnt field when it is done
					// with this frame.
					//----------------------------------------
					x_debug_msg("mnp TX frame ALREADY Q'ed");
					return NULL;
				}
				// Set flag; will be cleared by DSP ISR.
				fptr -> cnt = 1;
				#endif // HDLC_FRAMES_BY_REFERENCE

				return ( fptr ) ;
			 }
		}
	}
	return (NULL) ;
}

/****************************************************************
Routine : mnp_crc
Description :
	Compute crc using the shift register method 
	Polynomial x(16) + x(15) + x(2) + 1
Parameters in :
	byte data_byte - next byte in data stream for computing crc
	word crc - crc computed on data up to the current point
Parameters out :
	word - updated crc value
Revision History :
	Initials	Date		Change
	MB     		07/15/93	Initial
*****************************************************************/
non_banked word mnp_crc ( byte data_byte, word crc )
{
	byte i, r1 ;

	for ( i = 0 ; i < 8 ; ++i )
	{
		r1 = (byte) (data_byte ^ crc );			/* data_byte ^ crc */
		crc = crc >> 1 ;				/* crc = crc >> 1 */
		data_byte = data_byte >> 1 ;	/* data_byte = data_byte >> 1 */
		if ( r1 & 0x01 )				/* LSB of (data_byte ^ crc) */
			crc = crc ^ 0xa001 ;		/* crc = crc ^ feedback_mask */
	}
	return ( crc ) ;
}

#if defined(MNP_OFRAMES_BY_REFERENCE)
/****************************************************************
Routine : mnp_tx_octet_framep

	Insert an MNP octet data Frame in the DCE TX Ring Buffer by
	REFERENCE. Either a three word data structure is used for
	Venus (16 bit addresses), or a four word structure for CS-4 et al.

	The format of the ring buffer data structure is as follows:
		1st wd:				(   FLAGS  |  count     )
		[       2nd wd ]:	( high word of data ptr ) // Non Z80 only
		2nd [ / 3rd wd ]:	( low word of data ptr  )
		3rd [ / 4th wd ]:	(     Calculated CRC    )

	Note: Byte stuffing of DLE is done by ISR, but CRC calculation
		  is done here.

Parameters in :
	from -	pointer to write data (16 bit / 32 bit)
	count-	count of bytes to write (255 max)
Parameters out :
	none
*****************************************************************/
_Inline
non_banked void mnp_tx_octet_framep ( byte count, byte* from )
{
	STATIC word *wptr, transmit_crc ;

	wptr = G(io_dce_tx_wptr) ;

	*wptr++ = (word)(HDLC_START_OF_FRAME | MNP_OFRAME_PLACEHLDR | count) ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;

#if !defined(MODEM_Z80)
	*wptr++ = (word)((unsigned long)(from)>>16);
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
#endif

	*wptr++ = (word)from ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;

	// calculate crc from frame data
	transmit_crc = 0 ;
	while ( count-- )
	{
		transmit_crc = mnp_crc( *from, transmit_crc ) ;
		++from ;
	}
	transmit_crc = mnp_crc( ETX, transmit_crc ) ;

	*wptr++ = transmit_crc ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;

	_INT_DISABLE();
		G(io_dce_tx_wptr) = wptr ;
		G(lapm_max_iframes)++ ;
	_INT_ENABLE();

	io_start_dce_transmit() ;
}
#endif	// MNP_OFRAMES_BY_REFERENCE

/****************************************************************
Routine : mnp_tx_octet_frame
Description :
	Fills a buffer with an mnp octet frame and writes to tx fifo.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_tx_octet_frame ( void )
{
	LAPM_FRAME *frameptr ;
	byte mnp_data_flag ;
	word transmit_crc ;
	byte frame_len ;
	byte *ptr ;
	word *wptr ;

	// check dsp fifo before sending
	#if defined(MNP_OFRAMES_BY_REFERENCE)
	if ( io_get_dce_tx_count() < LAPM_FRAME_SIZE )
	{
		x_debug_msg("mnp: DCE TX Ring Buffer FULL!!!");
		return ;
	}
	#else
	// *2 for double-DLE's
	if ( io_get_dce_tx_count() < (LAPM_FRAME_SIZE * 2) )
	{
		return ;
	}
	#endif

	frameptr = NULL ;
	mnp_data_flag = FALSE ;

	// determine frame to be sent according to priority
	if (LUF.txstatus == FULL)  //for lr frames
	{
		frameptr = &LUF ;
	}
	else if (LCF.status == FULL) //for other control frames
	{
		frameptr = (void *) &LCF;
	}
	else if ( G(lapm_remote_busy) == FALSE )  // for next DATA frame
	{
		#if defined(MNP_OFRAMES_BY_REFERENCE)
		if ( G(lapm_max_iframes) < MAX_IFRAMEP )
		#endif
		{
			frameptr = mnp_next_tx_rframep() ;
#if defined(HDLC_FRAMES_BY_REFERENCE) && !defined(MNP_OFRAMES_BY_REFERENCE)
			if ( frameptr )
				frameptr -> cnt = 0;
#endif
			mnp_data_flag = TRUE ;
		}
	}

	if ( frameptr == NULL )
		return ;

	#if defined(MNP_OFRAMES_BY_REFERENCE)
	if ( mnp_data_flag == TRUE )
	{
		mnp_tx_octet_framep(frameptr->len, frameptr->data);

		lapm_reset_timer() ;
		G(mnp_sk)-- ;

		if ( G(mnp_fixed_field_opt_flag) )
			G(mnp_ns) = (byte) frameptr->data[2] ;
		else
			G(mnp_ns) = (byte) frameptr->data[4] ;

		return ;
	}
	#endif // MNP_OFRAMES_BY_REFERENCE

	ptr = frameptr->data ; //set ptr to data in LAPM_FRAME structure
	frame_len = frameptr->len ;
	transmit_crc = 0 ;
	wptr = G(io_dce_tx_wptr) ;

	// frame start flag
	*wptr++ = (word) SYNC ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	*wptr++ = (word) DLE ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	*wptr++ = (word) STX ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	
	// frame data
	while ( frame_len-- )
	{
		transmit_crc = mnp_crc ( *ptr, transmit_crc ) ;
		*wptr++ = (word) *ptr ;
		if ( wptr >= G(io_dce_tx_eptr) )
			wptr = G(io_dce_tx_sptr) ;
		if ( *ptr == DLE )
		{
			*wptr++ = (word) DLE ;
			if ( wptr >= G(io_dce_tx_eptr) )
				wptr = G(io_dce_tx_sptr) ;
		}
		++ptr ;
	}
		         
	// end flag + FCS bytes
	*wptr++ = (word) DLE ;		// not included in crc calculations
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	transmit_crc = mnp_crc ( ETX, transmit_crc ) ;
	*wptr++ = (word) ETX ;
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	*wptr++ = ( (byte) transmit_crc ) ;	// LSB  of FCS
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;
	transmit_crc = transmit_crc >> 8 ;
	*wptr++ = ( (byte) transmit_crc ) ;	// MSB of FCS
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr) ;

	// reset the control frame structures, but save all LTs for now
	#if !defined(MNP_OFRAMES_BY_REFERENCE)
	if (mnp_data_flag == FALSE) 
	#endif
	{
		frameptr->txstatus = EMPTY ;
		frameptr->len = 0 ;
	}
	#if !defined(MNP_OFRAMES_BY_REFERENCE)
	else // only reset timer for LT frames.
	{
		lapm_reset_timer() ;
		G(mnp_sk)-- ;

		if ( G(mnp_fixed_field_opt_flag) )
			G(mnp_ns) = (byte) frameptr->data[2] ;
		else
			G(mnp_ns) = (byte) frameptr->data[4] ;
	}
	#endif // !MNP_OFRAMES_BY_REFERENCE

	G(io_dce_tx_wptr) = wptr ;
	io_start_dce_transmit () ;
}

/****************************************************************
Routine : mnp_tx_hdlc_frame
Description :
	transmit mnp HDLC frame to DCE.
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_tx_hdlc_frame ( void )
{
	LAPM_FRAME *lt_frame ;

#if defined(HDLC_FRAMES_BY_REFERENCE)
	if ( io_get_dce_tx_count() < LAPM_FRAME_SIZE )
	{
		x_debug_msg("mnp1: DCE TX Ring Buffer FULL!!!");
		return ;
	}
#else
	if ( io_get_dce_tx_count() < LAPM_FRAME_SIZE )
		return ;
#endif

	if ( LCF.status == FULL )
	{
		io_tx_hdlc_frame ( LCF.len, LCF.data ) ;

		LCF.status = EMPTY ;
		LCF.len = 0 ;
	}
	else if ( G(lapm_remote_busy) == FALSE )
	{
		#if defined(HDLC_FRAMES_BY_REFERENCE)
		if ( G(lapm_max_iframes) < MAX_IFRAMEP )
		#endif
		{
			// transmit lt-frame if present
			lt_frame = mnp_next_tx_rframep() ;
			if ( lt_frame != NULL )
			{
				#if defined(HDLC_FRAMES_BY_REFERENCE)
					lapm_tx_hdlc_framep(lt_frame->len, lt_frame->data);
				#else
					io_tx_hdlc_frame(lt_frame->len, lt_frame->data);
				#endif

				lapm_reset_timer () ;		/* reset timer T401 */

				G(mnp_sk)-- ;

				if ( G(mnp_fixed_field_opt_flag) )
					G(mnp_ns) = (byte) lt_frame->data[2] ;
				else
					G(mnp_ns) = (byte) lt_frame->data[4] ;
			}
		}
	}
}

/****************************************************************
Routine : mnp_rx_data
Description :
	receive data from DCE and process for mnp
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	MB			07/15/93	Initial
*****************************************************************/
non_banked void mnp_rx_data ( void )
{
	if ( (G(mnp_negotiated_mode) == MNP_OCTET_MODE) ||
		 (G(mnp_first_lt_flag) == TRUE) )
		mnp_read_octet_from_dce_buf () ;
	else
		lapm_rx_hdlc_frame () ;
}
