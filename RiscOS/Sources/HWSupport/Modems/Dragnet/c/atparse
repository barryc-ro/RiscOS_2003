/*name and version number:@(#)atparse.c	1.105*/
/*date of get: 		  09/06/00 16:58:47*/
/*date of delta:	  07/06/00 15:33:42*/
/****************************************************************
File : atparse.c
Description :
	Contains all the parse routines for the at task.

Procedures Contained :
	atparse_state
	at_cmd_filter
	atparse_cmd

Revision History :
	Initials        Date            Change
	J.S.Xu          10/07/92        Initial
	R.H.Decker      08/18/95        added at_sync_mode
*****************************************************************/

#include "llglob_d.h"
#include "atglob.h"
#include "iouart_d.h"
#include "ioglob_d.h"
#include "sync.h"
#ifdef KORTEX			
#include "AmUpdate.h"
#endif
#if defined(CLASS2_FAX) || defined(CLASS20_FAX)
	#include "fax_c2.h"
#endif                                          
#include "allglobs.h"                            // MUST BE LAST IN #include LIST!

extern void at_v25ter(void);
extern void at_dash_i3(void);
extern void at_v90();
extern void at_minus_sdr();

/****************************************************************
Routine : atparse_cmd
Description :
	This routine parses the at commands
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials        Date            Change
	J. S. Xu        10/03/92        Initial
*****************************************************************/
void atparse_cmd()
{
	byte ch ;

	G(at_timer) = x_current_time () ;
	switch(*G(at_cmd_ptr)++)
	{
		case 0:
			if ( G(at_result_code) == NO_MSG )
				G(at_result_code) = OK;
			at_output_msg(NULL, 0);
			break;
		case 'A':
			at_a(); break;
		case 'B':
			at_b(); break;
		case 'D':
			at_d(); break;
		case 'E':
			at_e(); break;
		case 'H':
			at_h(); break;
		case 'I':
			at_i(); break;
		case 'L':
			at_l(); break;
		case 'M':
			at_m(); break;
		case 'N':
			at_n(); break;
		case 'O':
			at_o(); break;
		case 'P':
			at_p(); break;
		case 'Q':
			at_q(); break;
		case 'S':
			at_s(); break;
		case 'T':
			at_t(); break;
		case 'V':
			at_v(); break;
		case 'W':
			at_w(); break;
		case 'X':
			at_x(); break;
		case 'Z':
			at_z(); break;
		case 'C':
		case 'F':
			at_f(); break;
		case 'Y':
			at_y () ; break ;
#ifdef KORTEX
		case '*':
			at_star();
			break;
		case '/':
			at_slash();
			break;
		case '|':
			AmAtPipe();
			break;
#endif			
		case AND:
			at_and(); break;
		case '-':
			switch(ch = *G(at_cmd_ptr)++)
			{
			case 'C':
			    at_dash();
			    break ;

#if defined(V25TER) && defined(VPCM_CLIENT)
			case 'V':
				if (*(G(at_cmd_ptr))=='9' && *(G(at_cmd_ptr)+1)=='0')
				{
					G(at_cmd_ptr)+=2;
					at_v90();
					break;
				}
				else
					at_cmd_err_ret();
#endif
#if defined( SDR_RING_DETECT )
			case 'S' :
				at_minus_sdr();
				break;
#endif
			default:
			    at_cmd_err_ret();
			    break;
			}
			break;

		case '+':
			ch = *G(at_cmd_ptr)++ ;

			if ( (ch == 'F')
#if defined(CLASS2_FAX) || defined(CLASS20_FAX)
				 || ( ( (ch == 'G') || (ch == 'I') ) &&
					  (G(c2p.fclass) == 0x20) )
#endif
				 )
				at_fax();
#ifdef VOICE
			else if ( ch == 'V' )
				at_voice();
#endif
			else	
			{	
#if defined (V25TER) || defined (V80)
				at_v25ter();
#else
				at_cmd_err_ret();
#endif	//V25TER || V80
			}
			break;
#ifdef DC0
		case ')':
			at_prn(); break ;
#endif
		case BACK_SLASH:
			at_backslash();
			break;
		case PERCENT:
			at_percent();
			break;
		case '"':
			at_data_compression();
			break;
		case '#':
			at_pound();
			break;
		default :
			at_cmd_err_ret();
			break;
	}
	G(at_state) = AT_IDLE;     // reset G(at_state) at the end of each cmd
}

/****************************************************************
Routine : at_cmd_filter
Description :
	This routine filts out SPACE
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials        Date            Change
	J. S. Xu        10/29/92        Initial
	S. J. Busak     12/09/98        Don't filter FAX strings   
*****************************************************************/
void at_cmd_filter(void)
{
	word tmp_len = 0;
	byte ch;
#if defined(CLASS2_FAX) || defined(CLASS20_FAX)
	byte s = 0;    
#endif 

	G(at_cmd_ptr) = G(at_cmd_buf);
	ch = *G(at_cmd_ptr)++;

	while ( ch != 0 )
	{
#if defined(CLASS2_FAX) || defined(CLASS20_FAX)
		if (ch == '"')	// Quote found?
			s = ~s;		// Toggle flag

		if (s)								// Parsing a string?
			G(at_cmd_buf)[tmp_len++] = ch;	// Don't alter strings

		else
#endif
		if ( ch != ' ' )
		{
			if ( (ch>='a') && (ch<='z') )
				ch = (byte) (ch & 0xDF);
			G(at_cmd_buf)[tmp_len++] = ch;
		}
		ch = *G(at_cmd_ptr)++;
	}
	G(at_cmd_buf)[tmp_len] = 0;
	G(at_cmd_ptr) = G(at_cmd_buf);
}

/****************************************************************
Routine : get_next_char
Description :
	This routine will get the next char in, echo to DTE
	if enabled and convert lowcase char to uppercase.
Parameters in :
	char received from io task ( from dte )
Parameters out :
	none
Revision History :
	Initials        Date            Change
	J. S. Xu        10/03/92        Initial
*****************************************************************/
byte get_next_char(byte ch)
{
	byte tmpch ;

	tmpch = (byte) (ch & 0x7F);	// take out the parity bit
	if ( ! ( G(S).ModemOptions.EchoToDTE ) )
		return(tmpch);          // echo to DTE disabled
	if (((G(at_state) == AT_IDLE) && (tmpch == 'A') || (tmpch == 'a')) ||
	((G(at_state) == AT_LT) &&
		((tmpch == 'T')||(tmpch == 't')||(tmpch == 'A')||
		 (tmpch == 'a')||(tmpch == '/')))
	|| ((G(at_state) == AT_CMD) && (tmpch != G(S).ModemOptions.BSChar)
		 && (G(at_cmd_len) < ATMAX)))
		x_send_mail ( AT_IO_DATA, IO_TASK, &ch, 1 ) ;   // echo the original ch
	return(tmpch);
}

/****************************************************************
Routine : atparse_state
Description :
	This routine looks for the at command prefix "at", and then
	build the at command line for the command parser atparse_cmd.
Parameters in :
	char received from io task ( from dte )
Parameters out :
	none
Revision History :
	Initials        Date            Change
	J. G(S). Xu        10/03/92        Initial
*****************************************************************/
void atparse_state(byte ch)
{
	byte inchar, outchar[3];

	inchar = get_next_char(ch);
	switch (G(at_state))
	{
		case AT_IDLE:           // look for A
			if ( (inchar == 'A') || (inchar == 'a') )
			{
				G(at_char_a) = ch ;        // save the original 'a' char
				G(at_state) = AT_LT;
			}
			break;
		case AT_LT:                     // look for T
			if ( (inchar == 'T') || (inchar == 't') )
			{
				/* 
				 * Determine parity when the MIMIC is set to 8 data bit no
				 * parity, but the application is generating parity
				 */
				if ( (G(S).ModemOptions.Parity==0) &&
					 (G(S).ModemOptions.DataBits==8)
				  && ( (((G(at_char_a)&0x7F)=='A') && (inchar=='T')) ||
				       (((G(at_char_a)&0x7F)=='a') && (inchar=='t')) ) )
				{
					/* switch 'a' and 't' */
					if(((G(at_char_a)&0x7F)=='a') && (inchar=='t'))
					{
						inchar = ch ;
						ch = G(at_char_a) ;
						G(at_char_a) = inchar ;
					}
					if ( (G(at_char_a)&0x80) && (!(ch&0x80)) )
					{
						x_debug_msg("AT - odd parity detected") ;
						G(at_parity) = 1 ; // odd parity
					}
					else if ( (!(G(at_char_a)&0x80)) && (ch&0x80) )
					{
						x_debug_msg("AT - even parity detected") ;
						G(at_parity) = 2 ; // even parity
					}
					else if ( (G(at_char_a)&0x80) && (ch&0x80) )
					{
						x_debug_msg("AT - mark parity detected") ;
						G(at_parity) = 3 ; // mark parity
					}
					else
						G(at_parity) = 0 ; // space or no parity
				}
				else
				{
					G(at_parity) = 0 ; // space or no parity
				}
				// Set mask used in checking SW flow control from DTE.
				G(x_parity_mask) =
					(byte) (((G(S).ModemOptions.DataBits == 7) ||
							 G(at_parity)) ?
							0x7F : 0xFF);

				G(at_state) = AT_CMD;
				G(at_cmd_len) = 0;	// reset G(at_cmd_len) for next command
				G(at_cmd_ptr) = G(at_cmd_buf);
			}
			else if ( inchar == '/')
			{
				/* send one CR */
				x_send_mail(AT_IO_DATA, IO_TASK,
							&(G(S).ModemOptions.CRChar), 1);

				/* repeat the previous command */
				G(at_cmd_ptr) = G(at_cmd_buf);
				G(at_cmd_len) = x_strlen(G(at_cmd_ptr));
				G(at_result_code) = NO_MSG;
				atparse_cmd();                  // process at command
			}
			else if ( (inchar == 'A') || (inchar == 'a') )
			{
				G(at_state) = AT_LT;               // stay in this state
			}
			else
			{
				G(at_state) = AT_IDLE;		// go back to look for A
				outchar[0] = G(S).ModemOptions.BSChar;     // send a backspace
				outchar[1] = ' ';			// send a space
				outchar[2] = G(S).ModemOptions.BSChar;     // send a backspace
				x_send_mail( AT_IO_DATA, IO_TASK, outchar, 3 );
			}
			break;

		case AT_CMD:
			if ( inchar == G(S).ModemOptions.CRChar )
			{
				G(at_cmd_ptr)[ G(at_cmd_len)] = 0;
				//x_debug_msg ( G(at_cmd_buf) ) ;
				G(io_uart_status) |= UART_AT_CMD_RESPONSE;
				G(at_result_code) = NO_MSG;
				at_cmd_filter();        // filt at commands
				atparse_cmd();          // process at commands
			}
			else if ( inchar == G(S).ModemOptions.BSChar )
			{
				if (G(at_cmd_len) > 0)
				{
					G(at_cmd_len)--;
					outchar[0] = G(S).ModemOptions.BSChar;     // send a backspace
					outchar[1] = ' ';               // send a space
					outchar[2] = G(S).ModemOptions.BSChar;     // send a backspace
					x_send_mail( AT_IO_DATA, IO_TASK, outchar, 3 );
				}
			}
			else
			{
				if (G(at_cmd_len) < ATMAX)
				{
					G(at_cmd_ptr)[ G(at_cmd_len)++] = inchar;
				}
				else
				{
					// IF we overflow the input cmd buffer
					// we have probably autobauded on garbage
					// and we need to recover
					at_cmd_err_ret();
					G(at_state) = AT_IDLE;
				}
			}
			break;
	}
}
