/*name and version number:@(#)v42bis.c	1.97*/
/*date of get: 		  12/15/00 10:10:43*/
/*date of delta:	  11/30/00 16:59:54*/
/****************************************************************
File :	v42bis.c
Description :

Procedures Contained :
	v42bis_init_dict
	v42bis_init_encode
	v42bis_init_decode
	v42bis_init_variables
	v42bis_bitpack
	v42bis_bitpack_flush
	v42bis_unpack
	v42bis_unpack_flush
	v42bis_flush
	v42bis_encode 
	v42bis_decode
	v42bis_mem_alloc

Revision History :
	Initials	Date		Change
	J.Xu     	02/19/93	Initial
*****************************************************************/
#if defined(WIN32)
# include <stdlib.h>
#endif // WIN32
#include "llglob_d.h"
#include "ioglob_d.h"
#include "dpglob.h"
#include "lapm.h"
#include "v42bis.h"
#include "allglobs.h"

#if defined(V42BIS_TEST)
void v42bis_display( void )
{
#if defined(MODEM_ARM)
	printf("V42bis Cnt=%x; Delay=%x; bits=%x; Compression is %s\n",
						G(v42bis_EnTest_count),
						G(v42bis_EnTest_delay),
						G(v42bis_EnCompBits),
						G(v42bis_EnTransparent)?"OFF":"ON");
#elif defined(WIN32)
	dword uc_bytes = G(v42bis_EnTotalInput);
	dword c_bytes = G(v42bis_EnTotalOutput);
    int   p;
    int   p1;
    int   p2;
    int   p3;
    ldiv_t x;
    dword n;

	if ( uc_bytes == 0 || c_bytes == 0 ) {
		p = p1 = p2 = p3 = 0;
	}
	else {
		if ( uc_bytes > c_bytes ) {
			n = (uc_bytes - c_bytes) * 100;
			x = ldiv(n, uc_bytes);
			p = x.quot;
			n = x.rem * 100;
			x = ldiv(n, uc_bytes);
			p1 = x.quot;
		}
		else {
			p = 0;
			p1 = 0;
		}

		if ( (p1 / 10) >= 5 ) {
			p1++;
		}

		x = ldiv(uc_bytes, c_bytes);
		p2 = x.quot;
		n = x.rem * 100;
		x = ldiv(n, c_bytes);
		p3 = x.quot;

		if ( (p3 / 10) >= 5 ) {
			p3++;
		}
	}

    printf("V.42bis compression ratio is %d.%02d ", p2, p3);
    printf("  (%d.%02d percent)\n", p, p1);
    printf("%ld uncompressed bytes, %ld compressed bytes\n", uc_bytes,c_bytes);

	G(v42bis_EnTotalInput) = 0;
	G(v42bis_EnTotalOutput) = 0;
#endif
}
#endif // V42BIS_TEST

non_banked static _Inline void
v42bis_write_lapm( byte val )
{
#if defined(V42BIS_TEST)
	v44_decode_test( val );
#else
	*G(lapm_data_ptr)++ = val;  
	G(lapm_iframe_ptr)->len++ ;
#endif
}

void v42bis_toggleECM( BOOL compress )
{
	if ( compress )
	{
		// Currently in transparent mode
		if( G(v42bis_EnTransparent) )
		{
			x_debug_msg("Force ECM");
			G(v42bis_EnTest_count) = 0x7ff0;
		}
		else
		{
			x_debug_msg("ECM already on");
		}
	}
	else
	{
		// Currently in compressed mode
		if( !G(v42bis_EnTransparent) )
		{
			x_debug_msg("Force ETM");
			G(v42bis_EnTest_count) = G(v42bis_EnTest_delay) + 1;
			G(v42bis_EnCompBits)  = 0x7ff0;
		}
		else
		{
			x_debug_msg("ETM already on");
		}
	}
}

/****************************************************************
Routine : v42bis_init_dict
Description :
	Initialize v42bis dictionaries .
Parameters in :
	entry - entry point to the dictionary
Parameters out :
	none
*****************************************************************/
non_banked void v42bis_init_dict( word entry )
{
	word i, j;

	for( i=0; i<G(v42bis_N2); i++ ) /* to mark as empty */
	{
		#if defined(V42BIS_PACKED_STRUCT)
		G(v42bis_tree)[ entry+i ].parent = 0;
		G(v42bis_tree)[ entry+i ].child = 0;
		#else
		G(parent)[ entry+i ] = 0;
		G(child)[ entry+i ]= 0;
		#endif //  V42BIS_PACKED_STRUCT
	}
	j = (word) (entry + v42bis_N6);
	for( i=0; i<v42bis_N4; i++, j++)	/* initialise first N4 entries */
	{
		#if defined(V42BIS_PACKED_STRUCT)
		G(v42bis_tree)[j].child = 0;
		G(v42bis_tree)[j].right = 0;
		G(v42bis_tree)[j].symbol = (byte)i;
		#else
		G(child)[j] = 0;
		G(right)[j] = 0;
		G(symbol)[j] = (byte)i;
		#endif //  V42BIS_PACKED_STRUCT
	}
}

/****************************************************************
Routine : v42bis_init_encode
Description :
	Initialize encoder	
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void v42bis_init_encode ( void )
{
	G(v42bis_EnC1) = v42bis_N5; 
	G(v42bis_EnPreC1) = 0;
	G(v42bis_EnC2) = (byte) (v42bis_N3+1);
	G(v42bis_EnC3) = (word) (v42bis_N4 * 2);
	G(v42bis_EnSptr) = 0 ;
	G(v42bis_EnSlen) = 0 ;
	G(v42bis_EnTest_count) = 0 ;
	G(v42bis_EnTest_delay) = AXF_MIN * v42bis_N3;
	G(v42bis_EnTransparent) = TRUE ;	/* initially in transparent mode */ 
	G(v42bis_EnEscChar) = 0 ;
	G(v42bis_EnDictFull) = FALSE ;		/* initially dictionary empty */
	G(v42bis_EnCompBits) = 0 ;
	G(v42bis_flushed) = FALSE ;
//	G(v42bis_onEdge) = FALSE;		// rwf testing only
	G(v42bis_EnTotalInput) = 0;
	G(v42bis_EnTotalOutput) = 0;
	v42bis_init_dict (0) ;
}

/****************************************************************
Routine : v42bis_init_decode
Description :
	Initialize decode	
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void v42bis_init_decode ( void )
{
	G(v42bis_DeBase) = 0 ;
	if ( G(v42bis_P0) == 0x3 )
		G(v42bis_DeBase) = G(v42bis_N2) ;
  	G(v42bis_DeC1) = (word) (G(v42bis_DeBase) + v42bis_N5);
	G(v42bis_DePreC1) = 0 ;
	G(v42bis_DeC2) = (byte) (v42bis_N3+1);
	G(v42bis_DeSptr) = 0 ;
	G(v42bis_DeSlen) = 0 ;
	G(v42bis_DeTransparent) = TRUE ;
	G(v42bis_DeEscChar) = 0 ;
	G(v42bis_DeEscMode) = FALSE ;
	G(v42bis_DeDictFull) = FALSE ;		/* initially dictionary empty */
	G(v42bis_DeBuff_full) = FALSE ;
	G(v42bis_mode_sw) = FALSE ;
	G(v42bis_DeCptr) = 0 ;

	v42bis_init_dict (G(v42bis_DeBase)) ;
}

/****************************************************************
Routine : v42bis_init_variables
Description :
	init v42bis variables .
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void v42bis_init_variables ( void )
{
	word i ;

	/* Find maximum codeword size needed to represent N2 */
	i = V42bis_MinP1 ;
	G(v42bis_N1) = 9 ;
	while(G(v42bis_N2) > i) {
		i *= 2;
		G(v42bis_N1)++;
	}
	#if defined(MODEM_Z80)
	G(v42bis_N3) = 8;
	G(v42bis_N4) = 256;
	G(v42bis_N6) = 3;
	G(v42bis_N5) = (word) (G(v42bis_N4) + G(v42bis_N6));
	#endif // MODEM_Z80

	G(v42bis_EnBitbuff) = 0 ;
	G(v42bis_EnBitbuff_count) = 0 ;
	G(v42bis_DeBitbuff) = 0 ;
	G(v42bis_DeBitbuff_count) = 0 ;

	/* Initialize encoder */
	v42bis_init_encode () ;

	/* Initialize decoder */
	v42bis_init_decode () ;

	/* init look up table for bit masks */
	G(v42bitmask) [0] = 0x000000FF ;
	G(v42bitmask) [1] = 0x000001FF ;
	G(v42bitmask) [2] = 0x000003FF ;
	G(v42bitmask) [3] = 0x000007FF ;
	G(v42bitmask) [4] = 0x00000FFF ;
	G(v42bitmask) [5] = 0x00001FFF ;
	G(v42bitmask) [6] = 0x00003FFF ;
	G(v42bitmask) [7] = 0x00007FFF ;
}

/****************************************************************
Routine : v42bis_bitpack
Description :
	Pack a codeword of length "G(v42bis_EnC2)" into the byte data output stream.
Parameters in :
	val    - codeword to process
Parameters out :
	none
*****************************************************************/
_Inline static non_banked void
v42bis_bitpack ( word val )
{ 
	G(v42bis_EnBitbuff) = G(v42bis_EnBitbuff) | 
	                     ( (dword) val << G(v42bis_EnBitbuff_count));
	G(v42bis_EnBitbuff_count) = (byte) (G(v42bis_EnBitbuff_count) + G(v42bis_EnC2));

	while (G(v42bis_EnBitbuff_count) >= 8) 
	{
		G(v42bis_EnBitbuff_count) -= 8;
		v42bis_write_lapm( (byte) G(v42bis_EnBitbuff) );
		G(v42bis_EnBitbuff) = G(v42bis_EnBitbuff) >> 8;
	}
}

/****************************************************************
Routine : v42bis_bitpack_flush
Description :
	Pack a codeword of length 0 into the byte data output stream.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
_Inline static non_banked void
v42bis_bitpack_flush ( void )
{
	if (G(v42bis_EnBitbuff_count) == 0)
		return;
	else 
	{
		v42bis_write_lapm( (byte) G(v42bis_EnBitbuff) );
		G(v42bis_EnBitbuff) = G(v42bis_EnBitbuff) >> 8;
		G(v42bis_EnBitbuff_count) = 0 ;
	}
}

/****************************************************************
Routine : v42bis_unpack
Description :
	Unpack a codeword using the current codeword size. 
Parameters in :
	ib - input byte to be processed, and output unpacked codeword
Parameters out :
	TRUE - completed one codeword
	FALSE - incomplete accumulation
*****************************************************************/
_Inline static non_banked byte
v42bis_unpack ( word *ib )
{
	/* insert the new 8 bits into the top of the bit buffer */
	G(v42bis_DeBitbuff) |= (((dword) *ib) << G(v42bis_DeBitbuff_count));
	G(v42bis_DeBitbuff_count) += 8;
	if (G(v42bis_DeBitbuff_count) < G(v42bis_DeC2))
		return ( FALSE ) ;	/* need more input to form a codeword */
	else
	{
		*ib = (word) (G(v42bis_DeBitbuff) & G(v42bitmask)[ G(v42bis_DeC2) - 8]);
		G(v42bis_DeBitbuff) = G(v42bis_DeBitbuff) >> G(v42bis_DeC2);
		G(v42bis_DeBitbuff_count) = (byte) (G(v42bis_DeBitbuff_count) - G(v42bis_DeC2));
		return ( TRUE ) ;
	}
}

/****************************************************************
Routine : v42bis_unpack_flush
Description :
	Unpack a codeword using the current codeword size.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
_Inline static non_banked void
v42bis_unpack_flush( void )
{
	if ( G(v42bis_DeBitbuff_count) > 8 )   /* discard loose bits only */
	{
    	G(v42bis_DeBitbuff) = G(v42bis_DeBitbuff) >> (G(v42bis_DeBitbuff_count)-8);
    	G(v42bis_DeBitbuff_count) = 8;
	}
	else if ( G(v42bis_DeBitbuff_count) < 8 )   /* discard remaining bits */
	{
			G(v42bis_DeBitbuff) = 0;
			G(v42bis_DeBitbuff_count) = 0;
	}
	/* if complete byte leave alone */
} 

/****************************************************************
Routine : v42bis_flush
Description :
	Sends out partially encoded data.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void v42bis_flush ( void )
{
	if( !G(v42bis_EnTransparent) && !G(v42bis_flushed))
	{
		if( G(v42bis_EnSptr) != 0 )
		{		/* send partially matched string */
			if(G(v42bis_EnC2) < G(v42bis_N1))
			{
				while(G(v42bis_EnSptr) >= G(v42bis_EnC3))
				{
					x_debug_msg("v42bis - encoder - STEPUP") ;
					v42bis_bitpack( V42BIS_STEPUP );
					G(v42bis_EnC2) = (byte) (1 + G(v42bis_EnC2));
					G(v42bis_EnC3) = (word) (2 * G(v42bis_EnC3));
				}
			}
			G(v42bis_flushed) = TRUE;
			v42bis_bitpack( G(v42bis_EnSptr) );
			G(v42bis_EnCompBits) += (word) G(v42bis_EnC2);
		}

	 /* send FLUSHED control codeword */
		v42bis_bitpack( V42BIS_FLUSH );

	 /* flush remaining bits from bit buffer */
		v42bis_bitpack_flush();
	}
}

/****************************************************************
Routine : v42bis_encode
Description :

Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/22/93	Initial
	EDS			08/01/94	Pulled outer loop inside to match asm version
*****************************************************************/
non_banked void v42bis_encode ( void ) 
{
	word c_ptr, i_ptr, p ;
	byte inval ;
	byte en_update_dict ;
	register byte *wptr = (byte *) I(io_dte_rx_wptr);
	register byte *rptr = (byte *) I(io_dte_rx_rptr);
	register byte *eptr = (byte *) I(io_dte_rx_eptr);
	register byte maxLen ;
	register BOOL setParity;

#if defined(CS_4)
	maxLen = MAX_QMP_DATA_BYTES < G(lapm_n401)
				? (MAX_QMP_DATA_BYTES-8)
				: G(lapm_n401) - 8 ;
#else
	maxLen = (byte) (G(lapm_n401) - 8);
#endif

	setParity = (byte) (G(S).ModemOptions.Parity
						&& (G(S).ModemOptions.DataBits==7));

	/* Add big outer loop previously in lapm_dte.c.   */
	while ( (G(lapm_iframe_ptr)->len < maxLen) && !(rptr == wptr) )
	{
//		START_TIMERA() ;
		inval = *rptr++;
		if ( rptr >= eptr )
		{
			rptr = (byte *) I(io_dte_rx_sptr) ;
		}

		if ( setParity )
		{
			inval = x_parity( inval ) ;
		}

		G(v42bis_EnTest_count) += v42bis_N3;

		//--------------------------------------------------------------
		// While zero loop allows exit (break) from within nested ifs.
		// This in turn saves code and local variable usage.
		//--------------------------------------------------------------
		do
		{
			if( G(v42bis_EnSptr) == 0 )
			{
				/* a new string */
				G(v42bis_EnSptr) = (word) (inval + v42bis_N6);
				G(v42bis_EnSlen) = 1;
			}
			else
			{
				/* match character */
				G(v42bis_EnSlen)++;
				c_ptr = G(v42bis_EnSptr) ;
				i_ptr = G(v42bis_EnSptr) ;
				G(v42bis_EnSptr) = V42BIS_GET_CHILD( G(v42bis_EnSptr) );
	
				while( G(v42bis_EnSptr) != 0 )
				{
					if( V42BIS_GET_SYMBOL( G(v42bis_EnSptr) ) >= inval )
						break;
					i_ptr = G(v42bis_EnSptr) ;
					G(v42bis_EnSptr) = V42BIS_GET_RIGHT( G(v42bis_EnSptr) );
				}
	
				if ( (G(v42bis_EnSptr) != 0)
					&& ( V42BIS_GET_SYMBOL( G(v42bis_EnSptr) ) == inval) )
				{
					if ( !(G(v42bis_flushed)
							|| (G(v42bis_EnSptr) == G(v42bis_EnPreC1))) )
					{
						// still traversing this input char stream for
						// dictionary building.
						// Send this char, if in transparent mode, and
						// go get next char
						break;
					}
					// either no node traversing in progress
					// or in danger of looping (this char same as last).
					// Don't update dictionary.
					en_update_dict = FALSE ;
				}
				else
				{
					// update dictionary unless string > maximum allowed
					if ( G(v42bis_EnSlen) > G(v42bis_N7) )
						en_update_dict = FALSE ;
					else
						en_update_dict = TRUE ;
				}

				if ( !G(v42bis_flushed) )
				{
					if( !G(v42bis_EnTransparent) )
					{
						if( G(v42bis_EnC2) < G(v42bis_N1) )
						{
							while(c_ptr >= G(v42bis_EnC3))
							{
								x_debug_msg("v42bis - encoder 1 - STEPUP") ;
								v42bis_bitpack( V42BIS_STEPUP );
								G(v42bis_EnC2) += 1;
								G(v42bis_EnC3) *= 2;
							}
						}
						v42bis_bitpack( c_ptr ) ;
					}
					G(v42bis_EnCompBits) += (word) G(v42bis_EnC2);
				}

				// time to check for ECM/ETM mode change ???
				if( G(v42bis_EnTest_count) > G(v42bis_EnTest_delay) )
				{
					#if 0
					if ( ((G(v42bis_EnSptr) == G(v42bis_EnPreC1))
							|| (G(v42bis_EnSlen) > G(v42bis_N7))) )
					{
						if ( !G(v42bis_onEdge) )	// rwf testing only
						{
#if defined(DEBUG_PRINTF)
								PM_PRINTING_ON(1);
							printf("EDGE\n");
								PM_PRINTING_OFF();
#endif // DEBUG_PRINTF
							G(v42bis_onEdge) = TRUE;
						}
					}
					else
					{
						if ( G(v42bis_onEdge) )		// rwf testing only
						{
#if defined(DEBUG_PRINTF)
								PM_PRINTING_ON(1);
							printf("NOT EDGE\n");
								PM_PRINTING_OFF();
#endif // DEBUG_PRINTF
							G(v42bis_onEdge) = FALSE;
						}
					}
					#endif

					// test data compressibility
					// Don't test during edge conditions
					#if 0
					if ( !((G(v42bis_EnSptr) == G(v42bis_EnPreC1))
							|| (G(v42bis_EnSlen) > G(v42bis_N7))) )
					#endif
					{
						G(v42bis_EnTotalInput) += G(v42bis_EnTest_count);

						if( !G(v42bis_EnTransparent) )
						{
							G(v42bis_EnTotalOutput) += G(v42bis_EnCompBits);
							// Currently in compressed mode
							if ( G(v42bis_EnTest_count) < 
								 (G(v42bis_EnCompBits) - AXF_HYST) )
							 {
								//------------------
								// TIME TO EXPAND
								//------------------
#if defined(DEBUG_PRINTF)
								PM_PRINTING_ON(1);
								x_debug_msg("v42bis - encoder - send ETM ") ;
								PM_PRINTING_OFF();
#endif	// DEBUG_PRINTF
	
								// decrease check interval
								G(v42bis_EnTest_delay) = AXF_MIN * v42bis_N3;
								// send ETM
								v42bis_bitpack( V42BIS_ETM );
								// octet align
								v42bis_bitpack_flush();
								// enter transparent mode
								G(v42bis_EnTransparent) = TRUE;
							 }
						}
						else
						{
							G(v42bis_EnTotalOutput) += G(v42bis_EnTest_count);
							// Currently in transparent mode
							if ( G(v42bis_EnTest_count) >
								 (G(v42bis_EnCompBits) + AXF_HYST) )
							{
								//------------------
								// TIME TO COMPRESS
								//------------------
								#if defined(MODEM_ARM)
								PM_PRINTING_ON(1);
								x_debug_msg("v42bis - encoder - send ECM ") ;
								PM_PRINTING_OFF();
								#endif	// MODEM_ARM
		
								// increase check interval
								G(v42bis_EnTest_delay) = AXF_MAX * v42bis_N3;
								// send esc char
								v42bis_write_lapm( G(v42bis_EnEscChar) );
								// send ECM
								v42bis_write_lapm( V42BIS_ECM );

								// enter compression mode
								G(v42bis_EnTransparent) = FALSE;
							}
						}
					}
					// reset counts
					G(v42bis_EnCompBits) = 0;
					G(v42bis_EnTest_count) = 0;
				}

				if( en_update_dict )
				{
					/* character */
					V42BIS_SET_SYMBOL( G(v42bis_EnC1), inval );
					/* parent */
					V42BIS_SET_PARENT( G(v42bis_EnC1), c_ptr );
					/* right hand neighbour */
				//	G(right)[ G(v42bis_EnC1)] = G(v42bis_EnSptr);
					V42BIS_SET_RIGHT( G(v42bis_EnC1), G(v42bis_EnSptr) );
					if( i_ptr == c_ptr )
					{
						V42BIS_SET_CHILD( c_ptr, G(v42bis_EnC1) );
					}
					else
					{
						// not first child
					//	G(right)[i_ptr] = G(v42bis_EnC1);
						V42BIS_SET_RIGHT( i_ptr, G(v42bis_EnC1) );
					}
	
					/* save for use in next match */
					G(v42bis_EnPreC1) = G(v42bis_EnC1);
	
					/* storage recovery */
					if( G(v42bis_EnDictFull) == FALSE )
					{
						// dictionary not yet full
						G(v42bis_EnC1)++;
						if( G(v42bis_EnC1) > (G(v42bis_N2)-1) )
							G(v42bis_EnDictFull) = TRUE;
					}
	
					if( G(v42bis_EnDictFull) )
					{	    /* dictionary is full, delete entry */
						do		/* get a leaf node */
						{
							G(v42bis_EnC1)++ ;
							if( G(v42bis_EnC1) > (G(v42bis_N2)-1) )
								G(v42bis_EnC1) = (word)(v42bis_N4+v42bis_N6);
						} while( V42BIS_GET_CHILD( G(v42bis_EnC1) ) != 0 );

						p = V42BIS_GET_PARENT( G(v42bis_EnC1) );
						if( V42BIS_GET_CHILD(p) == G(v42bis_EnC1) )
						{
							// disconnect C1
						//	V42BIS_SET_CHILD( p, G(right)[G(v42bis_EnC1)] );
							V42BIS_SET_CHILD( p, V42BIS_GET_RIGHT( G(v42bis_EnC1) ) );
						}
						else
						{
							p = V42BIS_GET_CHILD(p);
						//	while( G(right)[p] != G(v42bis_EnC1) )
						//		p = G(right)[p];
						//	G(right)[p] = G(right)[ G(v42bis_EnC1)];
							while( V42BIS_GET_RIGHT(p) != G(v42bis_EnC1) )
								p = V42BIS_GET_RIGHT(p);
							V42BIS_SET_RIGHT( p, V42BIS_GET_RIGHT( G(v42bis_EnC1) ) );
						}
					}
				}
				else
				{
					G(v42bis_EnPreC1) = 0; /* no new entry created */
				}

				// start new string
				G(v42bis_EnSptr) = (word) (inval + v42bis_N6);
				G(v42bis_EnSlen) = 1;
			}
		} while (0);

		/* output character if in transparent mode */
		if( G(v42bis_EnTransparent) )
		{
			v42bis_write_lapm( inval );

		    // check for escape character
			if( inval == G(v42bis_EnEscChar) )
			{
				v42bis_write_lapm( V42BIS_EID );
			}
		}

		/* cycle escape character if in data stream */
		if( inval == G(v42bis_EnEscChar) )
			G(v42bis_EnEscChar) = (byte) ((G(v42bis_EnEscChar) + 51) & 255);

		G(v42bis_flushed) = FALSE ;
//		SNAP_TIMERA( FALSE ) ; CALC_TIMERA();
	}

	I(io_dte_rx_rptr) = rptr;
}

/****************************************************************
Routine : v42bis_decode
Description :
  Decodes a single compressed data byte. The result may be no bytes,
  a single byte (always true in transparent mode), or a number of bytes
  up to the maximum string length negotiated (parameter P2).
Parameters in :
	rptr - pointer to next byte in received LAPM frame
	count - space left in DTE transmit buffer
	len - bytes remaining in received LAPM frame
Parameters out :
	none
Revision History :
	Initials	Date		Change
	J.Xu     	02/22/93	Initial
	EDS			07/29/94	Pulled loop inside to match asm version
*****************************************************************/
non_banked byte v42bis_decode ( byte *rptr, word count, byte len )
{
	word i_ptr, l_ptr, p ;
	byte DeFound, DeToggle ;
	byte DeUpdate_dict ;
	byte firstchar, *sp ;
	byte dfull ;
	word inval;
	word DeLoopCnt ;
	register byte *DeEptr = (byte *) I(io_dte_tx_eptr) ;

#if defined( xxxMODEM_ARM )
	l_ptr = i_ptr = 0 ;
	firstchar = 0 ;
#endif

  /* Add big outer loop previously in lapm_dte.c.  Pardon the indenting. */
  while (len && (count > V42bisP2))
  {
//	  START_TIMERB() ;
	DeFound = FALSE ;
	DeUpdate_dict = TRUE ;
	DeToggle = FALSE;

	/* Get byte to decode, but cast to match existing code. */
	inval = (word) *rptr++;
	len--;

	if ( G(v42bis_DeTransparent) )
	{  
  		/* - transparent mode .... do string match */
		cs_insert_error_tag ( 0x6e00, 0 );
		if (G(v42bis_DeEscMode)) 
		{
			switch ( (byte)inval ) 
			{
				case V42BIS_ECM:		/* enter compression mode */	
					cs_insert_error_tag ( 0x6a00, 0 );
#if defined(DEBUG_PRINTF)
					PM_PRINTING_ON(1);
					x_debug_msg("v42bis - decoder - receive ECM ") ;
					PM_PRINTING_OFF();
#endif	// DEBUG_PRINTF
					DeToggle = TRUE ;
					DeUpdate_dict = FALSE ;
					DeFound = TRUE ;
					if ( G(v42bis_DeSlen) >= G(v42bis_N7))
						G(v42bis_DeBuff_full) = TRUE ;
					else
						G(v42bis_DeBuff_full) = FALSE ;
					G(v42bis_DeCptr) = G(v42bis_DeSptr) ;
					G(v42bis_DeEscMode) = FALSE;
				break;

				case V42BIS_EID:	/* escape occurred in data stream */
					*G(lapm_dte_wptr)++ = G(v42bis_DeEscChar) ;
					if ( G(lapm_dte_wptr) >= DeEptr )
						G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
					count--;
					firstchar = G(v42bis_DeEscChar);
					G(v42bis_DeEscChar) = (byte) ((G(v42bis_DeEscChar)+51) & 255);
					G(v42bis_DeEscMode) = FALSE;
				break;

				case V42BIS_RESET:
					PM_PRINTING_ON(1);
					x_debug_msg("v42bis - decoder - received RESET") ;
					PM_PRINTING_OFF();
					v42bis_init_decode() ;
					cs_insert_error_tag( 0x6c00, 0 );
					continue;				/* Decode next byte */
				default:	
					cs_insert_error_tag( 0x6d00, 0 );
					x_debug_msg("v42bis - invalid command code") ;
					G(lapm_v42b_err) = 1 ;
					DP_DELETE_TASK();
					return ( 0 ) ;			/* discard the whole frame */
			}
		}
		else	/* not escape mode */ 
		{
			firstchar = (byte)(inval & 0xff) ;
			if (firstchar == G(v42bis_DeEscChar)) 
			{
				G(v42bis_DeEscMode) = TRUE;
				continue;				/* Decode next byte */
			}
			*G(lapm_dte_wptr)++ = firstchar ;
			if ( G(lapm_dte_wptr) >= DeEptr )
				G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
			count--;
		}

		if ( !DeFound )
		{
			if ( G(v42bis_DeSptr) == 0 ) 	/* first character of the string */
			{ 
				G(v42bis_DeSptr) = (word) ((G(v42bis_DeBase) + firstchar + v42bis_N6));
				l_ptr = 0;              /* no last string */
				DeFound = TRUE;
				G(v42bis_DeBuff_full) = FALSE;
				G(v42bis_DeSlen) = 1;
			}
 			else 		/* match character */
			{
				G(v42bis_DeSlen)++;
				l_ptr = G(v42bis_DeSptr);	      /* move to next level on tree */
				i_ptr = G(v42bis_DeSptr);
				G(v42bis_DeSptr) = V42BIS_GET_CHILD( G(v42bis_DeSptr) );
				DeLoopCnt = V42bisP1 + 2 ;	// protect against infinite loop
				while ( ( G(v42bis_DeSptr) != 0 ) &&	// search for match
						( --DeLoopCnt ) )
				{
					if ( V42BIS_GET_SYMBOL( G(v42bis_DeSptr) ) >= firstchar )
						break;
					i_ptr = G(v42bis_DeSptr);
				//	G(v42bis_DeSptr) = G(right)[ G(v42bis_DeSptr)];
					G(v42bis_DeSptr) = V42BIS_GET_RIGHT( G(v42bis_DeSptr) );
				}
				if ( DeLoopCnt == 0 )
				{
					G(lapm_v42b_err) = 1 ;
					cs_insert_error_tag ( 0x5f00,0 );
					x_debug_msg("v42bis - string search too long") ;
					return ( 0 ); 		/* discard the whole frame */
				}

				if ( (G(v42bis_DeSptr) != 0) &&
					( V42BIS_GET_SYMBOL( G(v42bis_DeSptr) ) == firstchar) )
					DeFound = TRUE ;

				if ( G(v42bis_mode_sw) == TRUE )
				{
					if ( DeFound == TRUE )
					{
						DeFound = FALSE ;
						DeUpdate_dict = FALSE ;
					}

					// Prevent from putting overlength
					// entry into dictionary. (from ed deng 5/6/99)
					if ( G(v42bis_DeBuff_full) )
					{
						DeUpdate_dict = FALSE ;
					}

					G(v42bis_mode_sw) = FALSE ;
				}
				/* check if match with last created entry */
				if ( DeFound && (G(v42bis_DeSptr) == G(v42bis_DePreC1)) ) 
				{
					DeUpdate_dict = FALSE ;
					DeFound = FALSE;
				}

				if ( !DeFound && (G(v42bis_DeSlen) > G(v42bis_N7)) )
					DeUpdate_dict = FALSE ;
			}
		}
	}
	else	/* - compressed mode, decode string */
	{
		if ( v42bis_unpack( &inval ) == FALSE )   /* incomplete codeword */
			continue;				/* Decode next byte */

		if ( inval < v42bis_N6 )	/*input value is a control codeword */
		{
			DeFound = TRUE;
			switch ( inval ) 
			{
				case V42BIS_ETM:  /* enter tranaparent mode */
					cs_insert_error_tag ( 0x6f00,0 );
#if defined(DEBUG_PRINTF)
					PM_PRINTING_ON(1);
					x_debug_msg("v42bis - decoder - receive ETM") ;
					PM_PRINTING_OFF();
#endif	// DEBUG_PRINTF
					DeToggle = TRUE;
					v42bis_unpack_flush();	/* octet align */
					G(v42bis_mode_sw) = TRUE ;
					break;

				case V42BIS_FLUSH :
					cs_insert_error_tag ( 0x5a00,0 );
					v42bis_unpack_flush();
					break;

				case V42BIS_STEPUP :
					G(v42bis_DeC2)++;
					x_debug_msg("v42bis - decoder - STEPUP") ;
					if (G(v42bis_DeC2) > G(v42bis_N1)) 
					{
						cs_insert_error_tag ( 0x5b00,0);
						x_debug_msg("v42bis - decoder - error,c2>n1") ;
						G(lapm_v42b_err) = 1 ;
						return ( 0 ) ;		/* discard the whole frame */
					}
					break ;
			}
		}
		else		/*input value is a valid codeword*/
		{
			dfull = G(v42bis_DeBuff_full) ;
			l_ptr = G(v42bis_DeCptr);        /* save last codeword ptr*/
			
			#if defined(V42BIS_LARGE_CODEWORD)
			p = G(v42bis_DeCptr) = G(v42bis_DeBase) + inval;	// ??????
			#else
			p = G(v42bis_DeCptr) = (word) (G(v42bis_DeBase) + (inval & 0xfff));
			#endif
			/* 
			 * Check codeword validity....invalid if:-
			 * (i) Corresponds to empty entry 
			 * (ii) Corresponds to value greater than dict. size  
			 */
			if ( inval > G(v42bis_N2)-1) 
			{
				PM_PRINTING_ON(1);
				x_debug_msg("v42bis - decoder - error, inval>MAX") ;
				PM_PRINTING_OFF();
				DP_DELETE_TASK();
				G(lapm_v42b_err) = 1 ;
				cs_insert_error_tag( 0x7c00, 0 );
				return ( 0 ); 		/* discard the whole frame */
			}
		if ( inval >= 259 && V42BIS_GET_PARENT(p) == 0 )
			{
				PM_PRINTING_ON(1);
				x_debug_msg("v42bis - decoder - error, G(parent)=0");
				PM_PRINTING_OFF();
				G(lapm_v42b_err) = 1 ;
				DP_DELETE_TASK();
				cs_insert_error_tag( 0x7d00, 0 );
				return ( 0 ); 		/* discard the whole frame */
			}
      		G(v42bis_DeSlen) = 0;
			sp = &(G(v42bis_DeBuff)[ G(v42bis_N7) - 1]) ;
			do		/* read string into buffer */
			{
				*sp-- = V42BIS_GET_SYMBOL(p);
				G(v42bis_DeSlen)++ ;
				p = V42BIS_GET_PARENT(p);
			} while ( p != 0 && sp >= G(v42bis_DeBuff) ) ;

			G(v42bis_DeBuff_full) = (byte) ( sp < G(v42bis_DeBuff) ) ; 
			sp += 1 ;
			firstchar = *sp ;		/* save 1st character for update */

			do		/* read string from buffer */
			{
				if ( *sp == G(v42bis_DeEscChar) )
					G(v42bis_DeEscChar) = (byte) ((G(v42bis_DeEscChar) + 51) & 255);
				*G(lapm_dte_wptr)++ = *sp++ ;
				if ( G(lapm_dte_wptr) >= DeEptr )
					G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);
				count--;
			} while( sp <= &(G(v42bis_DeBuff)[ G(v42bis_N7)-1]) );

			/* generate update pointers from l_ptr and firstchar */
			if ( !dfull && (l_ptr != 0) )
			{
				G(v42bis_DeSptr) = V42BIS_GET_CHILD(l_ptr);
				i_ptr = l_ptr;
				DeLoopCnt = V42bisP1 + 2 ;	// protect against infinite loop
				while ( (G(v42bis_DeSptr) != 0) && (--DeLoopCnt) )
				{
					if ( V42BIS_GET_SYMBOL( G(v42bis_DeSptr) ) >= firstchar )
						break;
					i_ptr = G(v42bis_DeSptr);
				//	G(v42bis_DeSptr) = G(right)[ G(v42bis_DeSptr)];
					G(v42bis_DeSptr) = V42BIS_GET_RIGHT( G(v42bis_DeSptr) );
				}
				if ( DeLoopCnt == 0 )
				{
					x_debug_msg("v42bis - update dict too long") ;
					G(lapm_v42b_err) = 1 ;
					cs_insert_error_tag( 0x5c00, 0 );
					return ( 0 ); 		/* discard the whole frame */
				}
				if ( (G(v42bis_DeSptr) != 0) &&
					( V42BIS_GET_SYMBOL( G(v42bis_DeSptr) ) == firstchar) )
					DeFound = TRUE ;

				DeUpdate_dict = (byte) (!DeFound);
			}
			else	/* no previous string to append char to */
				DeUpdate_dict = FALSE ;
		}
	}

	if ( !DeFound )	/* end of string match, update & recover storage */
	{
		if ( DeUpdate_dict )
		{
			V42BIS_SET_SYMBOL( G(v42bis_DeC1), firstchar );    /* create new entry */
			V42BIS_SET_PARENT( G(v42bis_DeC1), l_ptr); /* set parent */
		//	G(right)[ G(v42bis_DeC1)] = G(v42bis_DeSptr);
			V42BIS_SET_RIGHT( G(v42bis_DeC1), G(v42bis_DeSptr) );
			if ( i_ptr == l_ptr ) 
			{
				V42BIS_SET_CHILD( l_ptr, G(v42bis_DeC1) );    /* first child */
			}
			else
		//		G(right)[i_ptr] = G(v42bis_DeC1);	/* not first child */
				V42BIS_SET_RIGHT( i_ptr, G(v42bis_DeC1) );	/* not first child */
			G(v42bis_DePreC1) = G(v42bis_DeC1);

			/* storage recovery */
			if ( G(v42bis_DeDictFull) == FALSE ) 
			{
				G(v42bis_DeC1)++;	/* next available entry */
				if ( G(v42bis_DeC1) > (G(v42bis_DeBase)+G(v42bis_N2)-1) )
          			G(v42bis_DeDictFull) = TRUE;
			}
			if ( G(v42bis_DeDictFull) )
			{
				DeLoopCnt = V42bisP1 + 2 ;	// protect against infinite loop
				do 
				{
					G(v42bis_DeC1)++;         /* search for suitable entry */
					if ( G(v42bis_DeC1) > (G(v42bis_DeBase)+G(v42bis_N2)-1) )
						G(v42bis_DeC1) = (word) (G(v42bis_DeBase) + v42bis_N5);
				} while( V42BIS_GET_CHILD( G(v42bis_DeC1) ) != 0 && --DeLoopCnt );
				if ( DeLoopCnt == 0 )
				{
					G(lapm_v42b_err) = 1 ;
					x_debug_msg("v42bis - discard dict too long") ;
					cs_insert_error_tag( 0x5d00,0 );
					return ( 0 ); 		/* discard the whole frame */
				}

				p = V42BIS_GET_PARENT( G(v42bis_DeC1) );
				if ( V42BIS_GET_CHILD(p) == G(v42bis_DeC1) ) 
				{
				//	V42BIS_SET_CHILD(p, G(right)[ G(v42bis_DeC1)] ); 
					V42BIS_SET_CHILD(p, V42BIS_GET_RIGHT( G(v42bis_DeC1) ) ); 
				}
				else
				{
          			p = V42BIS_GET_CHILD(p);
					// protect against infinite loop
					DeLoopCnt = V42bisP1 + 2 ;
          	//		while( (G(right)[p] != G(v42bis_DeC1)) && (--DeLoopCnt) )
          	//			p = G(right)[p];
          			while( ( V42BIS_GET_RIGHT(p) != G(v42bis_DeC1) )
						   && ( --DeLoopCnt ) )
          				p = V42BIS_GET_RIGHT(p);
					if ( DeLoopCnt == 0 )
					{
						G(lapm_v42b_err) = 1 ;
						x_debug_msg("v42bis - update dict too long - 2") ;
						cs_insert_error_tag( 0x5e00,0 );
						return ( 0 ); 		/* discard the whole frame */
					}
				//	G(right)[p] = G(right)[ G(v42bis_DeC1)];
					V42BIS_SET_RIGHT( p, V42BIS_GET_RIGHT( G(v42bis_DeC1) ) );
				}
			}
			V42BIS_SET_PARENT( G(v42bis_DeC1), 0);      /* mark as empty */
		}
		else
			G(v42bis_DePreC1) = 0;         /* no new entry */

		if ( G(v42bis_DeTransparent) ) 
		{
			G(v42bis_DeSptr) = (word) (G(v42bis_DeBase) + firstchar + v42bis_N6);
			G(v42bis_DeSlen) = 1;
		}
	}

	if ( DeToggle )	/* switching compression on/off */
	{
		G(v42bis_DeSptr) = G(v42bis_DeCptr) ;
		G(v42bis_DeTransparent) = (byte) (!G(v42bis_DeTransparent));
	}
//	SNAP_TIMERB( FALSE ) ; CALC_TIMERB();
  }
  return len;
}
