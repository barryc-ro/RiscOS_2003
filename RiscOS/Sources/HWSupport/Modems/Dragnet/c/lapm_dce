/*name and version number:@(#)lapm_dce.c	1.96*/
/*date of get: 		  12/15/00 10:10:39*/
/*date of delta:	  11/30/00 16:58:35*/
/****************************************************************
File :	lapm_dce.c
Description :
	Contains all real time routines in LAPM to transfer data to
	or from DCE.

Procedures Contained :
	lapm_tx_hdlc_frame

Revision History :
	Initials	Date		Change
	J. Xu    	02/09/93	Initial
*****************************************************************/

//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "lapm.h"
#include "ioglob_d.h"
#include "mnp.h"
//msm// #include "z80glob.h"

#ifdef CS_DEBUG
 #include "lapm_dce.h"
#endif

#ifdef CS_LAPM_DEBUG
#define x_debug_msg(x) (ddputs_24l(x))
#endif

#include "allglobs.h"


/****************************************************************
Routine : lapm_above_va
Description :
	Give the count of how many frames 'n' is above lapm_va.

	Take into account the wrapping of sequence numbers after 127.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked byte lapm_above_va(byte n)
{
	if ( n >= G(lapm_va) )
	{
		return (byte)(n - G(lapm_va));
	}
	else
	{
		return (byte) ((n + 128) - G(lapm_va));
	}
}

/****************************************************************
Routine : lapm_next_tx_rframe
Description :
	Get next lapm transmit frame to read from.

	Fill in N(R) from our current lapm_vr.
	Update N(S) (lapm_ns) as appropriate (not when resending
	SREJ'ed frames).

Parameters in :
	none
Parameters out :
	pointer to next lapm transmit frame to read data from if available.
	NULL if no frames available.
*****************************************************************/
_Inline
non_banked LAPM_FRAME* lapm_next_tx_rframe ( void )
{
	byte i;
	LAPM_FRAME *fptr;

	//--------------------------------------------------
	// first see if any frames need to be retransmitted
	// because of selective reject.
	// Return the first one found and let the peer
	// sort them out.
	//--------------------------------------------------
	if ( G(lapm_tx_srej_count) )
	{
		for ( i=0, fptr = G(lapm_prev_ack_ltfp) ; i < G(lapm_k) ; i++ )
		{
			if ( ++fptr >= G(lapm_last_ltfp) ) {
				fptr =  &LTF[0];
			}
			if (fptr -> txstatus == SREJ)
			{
				fptr -> data[2] &= 0x01;
				// attach the receive ack frame number - N(R)
				fptr -> data[2] |= ( G(lapm_vr) << 1 ) ;

				#if defined(HDLC_FRAMES_BY_REFERENCE)
				//------------------------------------------
				// Mark as being Q'ed to TX DCE ring buffer.
				// Note: If set to SREJ, than this buffer
				// cannot already be in TX DCE ring buffer.
				//------------------------------------------
				fptr -> cnt = 1;
				#endif // HDLC_FRAMES_BY_REFERENCE
	
				// since we're resending this guy, he no longer
				// needs the SREJ designation, he can now be treated
				// like any other sent packet
				fptr -> txstatus = FULL;

				G(lapm_tx_srej_count)--;
				#if defined(DEBUG_PRINTF)
				printf("Dec TX SREJ cnt=%d; resend %d\n",
						G(lapm_tx_srej_count), fptr -> data[1]>>1);
				#elif defined(Z80_DEBUG_THIS_FILE)
				x_debug_msg("Dec TX SREJ cnt=");
				dp_puts_dec((word)G(lapm_tx_srej_count));
				x_debug_msg(" resend=");
				dp_puts_dec(fptr -> data[1] >> 1); sendCrLf();
				#endif
	
				return fptr;
			}
		}
	}

	// Check for number of outstanding frames before we
	// look to see if there are new frames to transmit.
	// Can't send more than the window size.
	if (lapm_above_va(G(lapm_ns)) >= LAPM_TX_HI_WATER)
		return NULL;

	/* get index of frame to transmit */
	for ( i=0, fptr=G(lapm_prev_full_ltfp) ; i < G(lapm_k) ; i++ )
	{
		if ( ++fptr >= G(lapm_last_ltfp) ) {
			fptr =  &LTF[0];
		}
		if ( (fptr -> txstatus == FULL) &&
			 ( (fptr -> data[1] >> 1) == G(lapm_ns) ) )
		{
			#if defined(HDLC_FRAMES_BY_REFERENCE)
			if ( fptr -> cnt )
			{
				//----------------------------------------
				// This I Frame is already on the way!!!
				// A ptr to it has been placed in the DCE
				// TX Ring Buffer by lapm_tx_hdlc_framep().
				// It is up to the DSP ISR (QMP or Mailbox)
				// to clear the cnt field when it is done
				// with this frame.
				//----------------------------------------
				return NULL;
			}
			// Set flag; will be cleared by DSP ISR.
			fptr -> cnt = 1;
			#endif // HDLC_FRAMES_BY_REFERENCE

			G(lapm_ns) = (byte) (( G(lapm_ns) + 1 ) & 127);
			// attach the receive ack frame number
			// do not modify poll bit
			fptr -> data[2] &= 0x01 ;
			fptr -> data[2] |= ( G(lapm_vr) << 1 ) ;

			// Start here the next time
			G(lapm_prev_full_ltfp) = fptr;
			return fptr;
		}
	}
	return NULL;
}

/****************************************************************
Routine : lapm_tx_hdlc_frame
Description :
	transmit HDLC frame to DCE.
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
non_banked void lapm_tx_hdlc_frame ( void )
{
#if defined(HDLC_FRAMES_BY_REFERENCE)
	//------------------------------------------
	// io_get_dce_tx_count() returns the number
	// of bytes LEFT in the DCE Ring Buffer
	//------------------------------------------
	if ( io_get_dce_tx_count() < (2 * LAPM_FRAME_SIZE + SIZEOF_IFRAMEP) )
	{
		#if defined(COP_ADV_DEBUG) || defined(MODEM_ARM)
		x_debug_msg("LAPM TX Ring Buffer FULL!!!");
		#endif
		return ;
	}
#else
	//==========================================
	// Let's retire this approach
	//==========================================
	//------------------------------------------
	// if there are already two frames in the
	// output queue - visit later
	//------------------------------------------
	// io_get_dce_queue_count() returns # of
	// bytes USED in TX DCE Ring Buffer
	if ( io_get_dce_queue_count() >= LAPM_FRAME_SIZE )
	{
		#if defined(COP_ADV_DEBUG)
		if ( (G(lapm_state) == LAPM_RX_SABME_CMD)
			|| (G(lapm_state) == LAPM_RX_XID_CMD) )
			x_debug_msg ( "LAPM - tx_hdlc_frame : already 2 frame in queue ");
		#endif
		return ;
	}

	//------------------------------------------
	// check if room in the dce tx buffer for
	// at least one lapm frame
	//------------------------------------------
	if ( io_get_dce_tx_count() < LAPM_FRAME_SIZE )
	{
		#if defined(COP_ADV_DEBUG)
		if ( (G(lapm_state) == LAPM_RX_SABME_CMD)
			|| (G(lapm_state) == LAPM_RX_XID_CMD ) )
			x_debug_msg ( "LAPM - tx_hdlc_frame : atleast 1 lapm frame ");
		#endif
		return ;
	}
#endif	// ! HDLC_FRAMES_BY_REFERENCE

	// check for control frames
	if ( LCF.status == FULL )
	{
		io_tx_hdlc_frame( LCF.len, LCF.data ) ;
		LCF.status = EMPTY ;
		LCF.len = 0 ;

		#if defined(COP_ADV_DEBUG)
		if ( G(lapm_state) != LAPM_CONNECT ) x_debug_msg("TX LCF frame");
		#endif

		//----------------------------------------
		// if this was an SREJ frame, get out!!!
		// Sending an Iframe below can potentially
		// give the other side a bogus value of N(R)
		// (we are manipulating V(R) in order to
		//  send SREJ supervisory frames).
		//----------------------------------------
		if ( LCF.data[1] == SREJ ) {
			x_debug_msg("TX LCF SREJ frame");
			return;
		}
	}

	// check for i-frames
	if ( G(lapm_remote_busy) == FALSE )
	{
		#if defined(HDLC_FRAMES_BY_REFERENCE)
		if ( G(lapm_max_iframes) < MAX_IFRAMEP )
		#endif
		{
			// transmit i-frame if present
			LAPM_FRAME *iframe = lapm_next_tx_rframe() ;
			if ( iframe != NULL )
			{
				//--------------------------------------------
				// put I Frame in DCE TX Ring Buffer
				//--------------------------------------------
				#if defined(HDLC_FRAMES_BY_REFERENCE)
					lapm_tx_hdlc_framep(iframe->len, iframe->data);
				#else
					io_tx_hdlc_frame( iframe->len, iframe->data ) ;
				#endif
	
				lapm_reset_timer () ;		/* reset timer T401 */
	
				//-----------------------------------------------
				// Since we just included N(R) information in the 
				// frame we transmitted, there is no need to send
				// a separate RR or RNR to indicate that a frame 
				// was received.
				//-----------------------------------------------
				G(lapm_rx_iframe) = FALSE;
	
				#if defined(COP_ADV_DEBUG) || defined(MODEM_ARM)
				if ( G(lapm_state) != LAPM_CONNECT ) x_debug_msg("TX Ifrm");
				#endif
			}
		}
	}

	// check for unnumbered frames
	if ( LUF.txstatus == FULL )
	{
		io_tx_hdlc_frame( LUF.len, LUF.data ) ;
		LUF.txstatus = EMPTY ;
		LUF.len = 0 ;

		lapm_reset_timer () ;		/* reset timer T401 */

		#if defined(COP_ADV_DEBUG)
		if ( G(lapm_state) != LAPM_CONNECT ) x_debug_msg("TX LUF frame");
		#endif
	}
}
