/*name and version number:@(#)llmain.c	1.104*/
/*date of get: 		  01/12/01 11:49:17*/
/*date of delta:	  01/11/01 13:14:23*/
/****************************************************************
File :	llmain.c
Description :
	Contains the main entry point to the system.
	Initalize variables.
	Start's up all the tasks.
	Contains the library routine 'send_mail' that is global to the system.
	For Z-80 this file needs to reside in the root bank.

Procedures Contained :
	x_parity
	x_elapsed_time
	x_send_mail
	x_send_cmd_to_all_tasks
	UART_reset
	UART_background
	UART_init

Revision History :
	Initials	Date		Change
	VR      	09/22/92	Initial
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "dpglob.h"
//msm// #include "z80glob.h"
//msm// #include "z80usb.h"
#include "allglobs.h"

/****************************************************************
	Extern Functions
*****************************************************************/

extern void ll_init_modem_variables ( void ) ;
extern void venus_init(void);

#if !defined(CS_MODEM)
extern void at_task ( MODEM_COMMAND cmd, byte *text_ptr, word text_len ) ;
#else
extern void cs_task ( MODEM_COMMAND cmd, byte *text_ptr, word text_len ) ;
#endif
extern void dp_task ( MODEM_COMMAND cmd, byte *text_ptr, word text_len ) ;
extern void io_task ( MODEM_COMMAND cmd, byte *text_ptr, word text_len ) ;

#if defined( MODEM_Z80 )
// ********************************************
// These next variables are used
// for the upload stuck while CTS
// ON workaround implemented in z80_flow_off()
word	io_flow_on_timestamp;
byte	*io_dte_rx_wptr_fix;
BOOL	io_check_flow_off2on_stall;
// ********************************************
#endif	// MODEM_Z80

const byte x_even_parity[] = {
0x00, 0x81, 0x82, 0x03, 0x84, 0x05, 0x06, 0x87,
0x88, 0x09, 0x0a, 0x8b, 0x0c, 0x8d, 0x8e, 0x0f,
0x90, 0x11, 0x12, 0x93, 0x14, 0x95, 0x96, 0x17,
0x18, 0x99, 0x9a, 0x1b, 0x9c, 0x1d, 0x1e, 0x9f,
0xa0, 0x21, 0x22, 0xa3, 0x24, 0xa5, 0xa6, 0x27,
0x28, 0xa9, 0xaa, 0x2b, 0xac, 0x2d, 0x2e, 0xaf,
0x30, 0xb1, 0xb2, 0x33, 0xb4, 0x35, 0x36, 0xb7,
0xb8, 0x39, 0x3a, 0xbb, 0x3c, 0xbd, 0xbe, 0x3f,
0xc0, 0x41, 0x42, 0xc3, 0x44, 0xc5, 0xc6, 0x47,
0x48, 0xc9, 0xca, 0x4b, 0xcc, 0x4d, 0x4e, 0xcf,
0x50, 0xd1, 0xd2, 0x53, 0xd4, 0x55, 0x56, 0xd7,
0xd8, 0x59, 0x5a, 0xdb, 0x5c, 0xdd, 0xde, 0x5f,
0x60, 0xe1, 0xe2, 0x63, 0xe4, 0x65, 0x66, 0xe7,
0xe8, 0x69, 0x6a, 0xeb, 0x6c, 0xed, 0xee, 0x6f,
0xf0, 0x71, 0x72, 0xf3, 0x74, 0xf5, 0xf6, 0x77,
0x78, 0xf9, 0xfa, 0x7b, 0xfc, 0x7d, 0x7e, 0xff
};

const byte x_odd_parity[] = {
0x80, 0x01, 0x02, 0x83, 0x04, 0x85, 0x86, 0x07,
0x08, 0x89, 0x8a, 0x0b, 0x8c, 0x0d, 0x0e, 0x8f,
0x10, 0x91, 0x92, 0x13, 0x94, 0x15, 0x16, 0x97,
0x98, 0x19, 0x1a, 0x9b, 0x1c, 0x9d, 0x9e, 0x1f,
0x20, 0xa1, 0xa2, 0x23, 0xa4, 0x25, 0x26, 0xa7,
0xa8, 0x29, 0x2a, 0xab, 0x2c, 0xad, 0xae, 0x2f,
0xb0, 0x31, 0x32, 0xb3, 0x34, 0xb5, 0xb6, 0x37,
0x38, 0xb9, 0xba, 0x3b, 0xbc, 0x3d, 0x3e, 0xbf,
0x40, 0xc1, 0xc2, 0x43, 0xc4, 0x45, 0x46, 0xc7,
0xc8, 0x49, 0x4a, 0xcb, 0x4c, 0xcd, 0xce, 0x4f,
0xd0, 0x51, 0x52, 0xd3, 0x54, 0xd5, 0xd6, 0x57,
0x58, 0xd9, 0xda, 0x5b, 0xdc, 0x5d, 0x5e, 0xdf,
0xe0, 0x61, 0x62, 0xe3, 0x64, 0xe5, 0xe6, 0x67,
0x68, 0xe9, 0xea, 0x6b, 0xec, 0x6d, 0x6e, 0xef,
0x70, 0xf1, 0xf2, 0x73, 0xf4, 0x75, 0x76, 0xf7,
0xf8, 0x79, 0x7a, 0xfb, 0x7c, 0xfd, 0xfe, 0x7f
};

/****************************************************************
Routine : x_parity
Description :
	Used in V42 & MNP. Add parity bit if enabled to transmit data.
	Only used for 7 data bits + parity bit.
Parameters in :
	transmit 7 bit character
Parameters out :
	transmit 8 bit character with parity
*****************************************************************/
non_banked byte x_parity ( byte tx_char )
{
	tx_char = (byte) (tx_char & 0x7f);
	switch ( G(S).ModemOptions.Parity )
	{
	case 1 :	// odd parity
		return x_odd_parity[tx_char];

	case 2 :	// even parity
		return x_even_parity[tx_char];

	case 3 :	// mark parity
		return (byte) (tx_char | 0x80);

	default :	// space parity
		return tx_char;
	}
}

#if defined( MODEM_Z80 )
/****************************************************************
Routine : x_elapsed_time
Description :
	Used to determine the time elapsed since the timer was started.
Parameters in : timer	- start time
Parameters out : time elapsed in millseconds since start time.
*****************************************************************/
non_banked word x_elapsed_time ( word timer )
{
#if defined( USB_POLLED_MODE )
	byte dp_regbc ;

	//------------------------------------------------
	// for polled mode check if atlas needs attention
	//------------------------------------------------
	if ( dp_regread( 0xd8 ) & BIT6 )
	{
		dp_regbc = dp_regread( 0xbc ) ;

		if ( dp_regbc & BIO_BIT )
		{
			//-------------------------------------
			// process USB interrupt. Since the USB
			// interrupt must be level triggered,
			// clear the interrupt only after the
			// call to the ISR.
			//-------------------------------------
			z80_usbir() ;

			dp_regwrite( 0xbd, dp_regbc ) ;
			dp_regwrite( 0xbd, ~dp_regbc ) ;
		}
	}
#endif

	return ( (word) (x_timer - timer) ) ;
}

#if !defined(DRAGNET)
/****************************************************************
Routine : x_current_time_long
Description : Used to initialize a long timer.
Parameters in : none
Parameters out : the present time.
*****************************************************************/
non_banked dword x_current_time_long ( void )
{
	return ( (dword)x_timer ) ;
}

/****************************************************************
Routine : x_elapsed_time_long
Description :
	Used to determine the time elapsed since the timer was started.
Parameters in : timer	- start time (long)
Parameters out : time elapsed in millseconds since start time.
*****************************************************************/
non_banked dword x_elapsed_time_long ( dword timer )
{
	return ( (dword) (x_timer - (word)timer) ) ;
}
#endif	// !DRAGNET
#endif	// MODEM_Z80

/****************************************************************
Routine : x_send_mail
Description :
	Send mail from one task to another.
*****************************************************************/
non_banked void x_send_mail ( MODEM_COMMAND cmd, MBOX send_to, byte *text_ptr, word text_len )
{
	switch ( send_to )
	{
		case DP_TASK :
			dp_task ( cmd, text_ptr, text_len ) ;
			break ;

		case IO_TASK :
			io_task ( cmd, text_ptr, text_len ) ;
			break ;

      case AT_TASK :
#if !defined(CS_MODEM)
			at_task ( cmd, text_ptr, text_len ) ;
#else
			cs_task ( cmd, text_ptr, text_len ) ;
#endif
         break ;
	}
}

/****************************************************************
Routine : x_send_mail_dp1
Description :
	Quick way to send mail to DP_TASK with only 'cmd'
	as a parameter.  Other things 0.
*****************************************************************/
non_banked void x_send_mail_dp1(MODEM_COMMAND cmd)
{
	dp_task(cmd, NULL, 0);
}

/****************************************************************
Routine : x_send_at_io_data()
Description :
	Send AT_IO_DATA mail assuming datap is a zero-terminated
	string.  Length of data is computed	using x_strlen().
	This is used over and over in the code so we can save some
	space using this function.

	The io task will generally take any characters we give
	it and send them directly to the DTE tx buffer.  Where
	they will then generally go to the DTE.

	mah 8/25/98 - created this function
*****************************************************************/
non_banked void x_send_at_io_data(byte *datap)
{
	while (*datap)
	{
		io_put_dte_tx_char(*datap++);
	}
}

/****************************************************************
Routine : x_send_at_io_crlf()
Description :
	Send a CR/LF pair to the IO DTE tx buffer.  Similar
	to the x_send_at_io_data() function above.

	mah 8/31/98 - created this function
*****************************************************************/
non_banked void x_send_at_io_crlf()
{
	byte msg[4];

	msg[0] = G(S).ModemOptions.CRChar;
	msg[1] = G(S).ModemOptions.LFChar;
	msg[2] = 0;

	x_send_at_io_data(msg);
}

extern void dp_first_init_perseus(void);

/****************************************************************
Routine : UART_init
Description :
	initialize the modem controller code.
	initialize all tasks, all variables etc.
*****************************************************************/
non_banked byte UART_init ( void )
{
#if !defined(SA_DSP_STUBBED_OUT)
	byte modem_initialized ;

	ll_init_modem_variables () ;
#endif
	io_task ( MC_INIT, NULL, 0 ) ;
#if !defined(CS_MODEM)
	at_task ( MC_INIT, NULL, 0 ) ;
#else
	cs_task ( MC_INIT, NULL, 0 ) ;
#endif

#if defined(SA_DSP_STUBBED_OUT)
	x_debug_msg ( "LL - Data pump init stubbed out\r\n" ) ;
#else
	venus_init();

	dp_task ( MC_INIT, &modem_initialized, 1 ) ;

    if( G( dp_daa_is_perseus ))
    {
	    dp_first_init_perseus();// load perseus code and measure line
    }
#endif

	// After everything's said and done we want to make
	// sure that the EIA leads are in their proper places.
	// For example, we want the AT&C0 and AT&S1 options
	// to take effect if they have been stored in the options.
	x_send_mail(MC_OPTION_CHANGE, IO_TASK, NULL, 0);

	// if modem hardware failed to initialize - then return failure
#if defined( SA_DSP_STUBBED_OUT )
	return TRUE ;
#else
	return modem_initialized;
#endif
}

#if defined(MODEM_Z80)	// {
#if !defined(CS_MODEM)	// {
#if !defined(USB_MODEM)	// {
/****************************************************************
	Function : z80_check_stall

	Check to see if the host has stalled with CTS ON.
	If so, assume it is stuck and give it a kick by
	toggling CTS.

	Precondition:
		uart_flow_control == FC_OFF - not backpressuring the
			DTE, (not telling it it can't send us more characters)

*****************************************************************/
non_banked void z80_check_stall(void)
{
# if defined(THUNDER)
	if ( z80_modem_type == USB_INTERFACE )
		return;
# endif

	if ( io_check_flow_off2on_stall &&
		 (MODEM_DATA == G(x_modem_mode)) &&
			 (G(S).ModemOptions.FlowControl == HW_FLOWCTRL) )
	{
		if ( x_elapsed_time(io_flow_on_timestamp) > MS500 )
		{
			io_check_flow_off2on_stall = FALSE;
			if ( io_dte_rx_wptr_fix == I(io_dte_rx_wptr) )
			{
				// It's been 500 ms since we set CTS and the
				// app hasn't sent any data yet.  Assume it is
				// stuck and give it a kick.
				disable_interrupt () ;
					z80_uart_cts_off();
				enable_interrupt () ;
				ddputs_24l("\n*** Toggle CTS ***\r\n");
				x_sleep(MS75);
				z80_uart_cts_on();
			}
		}
	}
}
#endif // } !USB_MODEM

/****************************************************************
	Function : z80_flow_off
	Allow the host to send again.  This function used
	to be duplicated in both z80ser.c and z80main.c
	and is now here.
*****************************************************************/
non_banked void z80_flow_off ( void )
{
#if defined(USB_MODEM) || defined(THUNDER)
	byte ndx ;

# if defined(THUNDER)
	if ( z80_modem_type == USB_INTERFACE )
# endif
	{
		output8( PEND_USB, 1 ) ;
		output8( SBIE_USB, input8( SBIE_USB ) | SBI_RX_2 ) ;
		ndx = input8( EPINDEX_USB ) ;
		output8( EPINDEX_USB, 2 ) ;
		if ( (input8( RXFLG_USB ) & (RX_FIF1|RX_FIF0)) &&
			!(input8( SBI_USB ) & SBI_RX_2) )
		{
			// cause a USB ep2 interrupt
			output8( SBI_USB, input8( SBI_USB ) | SBI_RX_2 ) ;
			lstusbEvent = ~USB_EVENT() ;
			//sendDumbChar( '_' );  // mah 9/10 don't need this debug
		}
		output8( EPINDEX_USB, ndx ) ;
		output8( PEND_USB, 0 ) ;

		// turn off unconditionally for USB MR238
		uart_flow_control = FC_OFF ;
	}
#endif // USB || THUNDER

	if ( G(S).ModemOptions.FlowControl == NO_FLOWCTRL )
	{
		return ;
	}
	uart_flow_control = FC_OFF ;
	if ( G(S).ModemOptions.FlowControl == SW_FLOWCTRL )
	{
		io_put_dte_tx_char ( 0x11 ) ;	// XON host
		sendDumbChar( 'X' ) ;
	}
	else // if ( G(S).ModemOptions.FlowControl == HW_FLOWCTRL )
	{
		z80_uart_cts_on () ;

#if !defined(USB_MODEM) && !defined(THUNDER)
# if defined(THUNDER)
		if ( z80_modem_type == EXT_INTERFACE )
# endif
		{
			// Record current time and dte_rx_wptr for later checking
			io_flow_on_timestamp = x_current_time();
			io_dte_rx_wptr_fix = I(io_dte_rx_wptr);
			io_check_flow_off2on_stall = TRUE;
		}
#endif

//		sendDumbChar( 'C' ) ;
	}
#if defined(UART_DEBUG_PRINT) && (defined(INT_MODEM) || defined(PCMCIA_MODEM))
	if ( dumbPortPresent )
	{
		output8 ( DUMB_MCR, input8 ( DUMB_MCR ) | BIT3 ) ;
	}
#endif
}
#endif // } !CS_MODEM

sfr bank_port=0x39;
/****************************************************************
	Function : strcpy_24
	Parameters in :
		dest	-	destination pointer
		src		-	24-bit source pointer (anywhere in ROM)
*****************************************************************/
non_banked
void strcpy_24 ( byte *dest, long src )
{
	byte i ;
	byte *ptr = (byte *)src;	// get loc in bank
	byte bankvar = bank_port;	// save old bank pointer

	// switch to correct bank
	bank_port = src >> 16;	// switch to correct bank

	// copy string from code bank to ram
	for ( i=0 ; ptr[i] ; i++ )
	{
		dest[i] = ptr[i] ;
	}
	dest[i] = 0 ;

	bank_port = bankvar;		// restore bank pointer
}

#if defined(Z80_DEBUG_PRINT)	// {
/****************************************************************
	Function : ddputs_24_nnl -
		print to debug port the message - no CR/LF appended.
	return last character sent
*****************************************************************/
non_banked byte ddputs_24_nnl(long adr24)
{
	byte *ptr = (byte *) adr24;
	byte bankvar = bank_port;	// save old bank pointer
	byte rv;

	bank_port = adr24 >> 16;	// switch to correct bank

	while (*ptr)
		sendDumbChar(*ptr++);

	rv =*(ptr-1);

	bank_port = bankvar;		// restore bank pointer

	return rv;
}

/****************************************************************
	Function : ddputs_24 - print message, append CR/LF if
		the message doesn't end in an '=' character.
*****************************************************************/
non_banked void ddputs_24(long adr24)
{
	if(ddputs_24_nnl(adr24) != '=')
	{
		sendDumbChar(0x0A); sendDumbChar(0x0D);
	}
}

#if !defined(HOMOL)	// {
/****************************************************************
	Function : ddgets_24 -
*****************************************************************/
non_banked
void ddgets_24 ( long adr24 )
{
	byte *ptr = (byte *)adr24;	// get loc in bank
	byte bankvar = bank_port;	// save old bank pointer
	byte i ;

	// switch to correct bank
	bank_port = adr24 >> 16;	// switch to correct bank

	for ( i=0; i<32; i++ )
	{
		sendHexByte( *ptr++ ) ;		// print loc
	}

	bank_port = bankvar;		// restore bank pointer

	sendDumbChar(0x0A);
	sendDumbChar(0x0D);
}
#endif  // } !defined(HOMOL)
#endif  // } Z80_DEBUG_PRINT

#if defined(ROM_FLASH) && !defined(HOMOL)	// {
/****************************************************************
	Function : z80_sector1 -
*****************************************************************/
non_banked void z80_sector1 ( void )
{
	word data ;
	byte ch ;
	extern word getCheckSum ( void ) ;
	extern word getLastPara ( void ) ;
	extern byte getFirstBank ( void ) ;

#if defined(Z80_DEBUG_PRINT)	// {
	data = getCheckSum () ;
	ddputs_24l("Chksum="); sendHexWord(data);
	sendCrLf();

	data = getLastPara () ;
	ddputs_24l("Lst Para="); sendHexWord(data);
	sendCrLf();

	ch = getFirstBank () ;
	ddputs_24l("First Bank="); sendHexByte(ch);
	sendCrLf();
#endif	// } Z80_DEBUG_PRINT
}
#endif	// } ROM_FLASH && !HOMOL
#endif	// } MODEM_Z80

//oos++
/****************************************************************
Routine : x_strcpy
Description :
	string copy - null terminated source string
Parameters in :
	dest	-	destination pointer
	src		-	source pointer
Parameters out :
	none
*****************************************************************/
non_banked void x_strcpy ( byte *dest, const byte *src )
{
	while ( *src != 0 )
		*dest++ = *src++ ;
	*dest = 0 ;
}

/****************************************************************
Routine : x_strlen
Description :
	string length - null terminated source string
Parameters in :
	src		-	source pointer null terminated
Parameters out :
	len		-	length of string
*****************************************************************/
non_banked word x_strlen ( const byte *src )
{
	word len = 0 ;

	while ( *src++ != 0 )
		++len ;
	return ( len ) ;
}

/****************************************************************
Routine : x_strcat
Description :
	string concatenate - null terminated source string
Parameters in :
	src		-	source/destination ptr
	cat      -  ptr to string to be concatenated
Parameters out :
	none
*****************************************************************/
non_banked void x_strcat ( byte *src, const byte *catstr )
{
	src = src + ( x_strlen ( src ) ) ;

	while ( *catstr != 0 )
		*src++ = *catstr++ ;
	*src = 0 ;
}

//oos--
