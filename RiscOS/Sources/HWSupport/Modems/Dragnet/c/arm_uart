/*name and version number:@(#)arm_uart.c	1.1*/
/*date of get: 		  01/12/01 11:49:20*/
/*date of delta:	  01/12/01 11:25:02*/
/*******************************************************************************
 * Copyright (c) 2000 Vitana Corporation.
 * Copyright (c) 2000 Lucent Technologies Inc.
 * 
 ******************************************************************************/
 

/******************************************************************************
 *
 * File:     $RCSfile$
 *
 * Description: This file contains some simple UART code to be used for
 *              RS-232 polling.
 *              Note: The baud rate is dependent on the CPU clock speed,
 *                    if the system clock changes, then the speed for the UART 
 *                    needs to be recalculated and reconfigured.
 *
 * Revision: $Revision$
 * Date:     $Date$
 * Author:   $Author$
 *
 */

#include "llglob_d.h"
#include "arm_glob.h"
#include "allglobs.h"

/**********************************************************************
 *
 * Name: TUART_Init
 *
 * Description: Initialize our UART output device to a baud of 19200.
 *
 * Arguments: N/A
 *
 * Returns: N/A
 *
 */ 
void TUART_Init(void)
{
	/*
	 * set up baud rate to be 9600 @13MHz 8-N-1
	 *                    or 19200 @26MHz
	 */
	 
    ASCC1_Ptr->ASCC_BAUD_RATE = 80;
    ASCC1_Ptr->ASCC_MODE_CONTROL = ASCC_MODE_CONTROL_SM_17 | ASCC_MODE_CONTROL_8BM ;



#if 0
	/* these values are for for 38400 Baud @26MHz,
	 * this configuration needs to be tested to see if the
	 * RS232 Flash download routines work OK ?
	 */
	ASCC1_Ptr->ASCC_BAUD_RATE = 26;
	ASCC1_Ptr->ASCC_MODE_CONTROL = ASCC_MODE_CONTROL_SM_26 | ASCC_MODE_CONTROL_8BM ;
#endif    
        
    
    ASCC1_Ptr->ASCC_RX_CONTROL = ASCC_RX_CONTROL_FINT_DISABLED | ASCC_RX_CONTROL_PC_NONE;
    ASCC1_Ptr->ASCC_TX_CONTROL = ASCC_TX_CONTROL_FINT_DISABLED | ASCC_TX_CONTROL_PC_NONE;
}



/**********************************************************************
 *
 * Name: TUART_WriteString
 *
 * Description: Write a NULL terminated 'C' type string to our UART
 *              output device.
 *
 * Arguments: N/A
 *
 * Returns: N/A
 *
 */ 
void TUART_WriteString( char *pString )
{
volatile unsigned int accstat;
char *p;


	p = pString;
	
	while( *p != 0 )
	{
		/* get FIFO status */
		accstat = ASCC1_Ptr->ASCC_FIFO_STATUS;
		/* if OK for TX then put char in FIFO */	
		if( (accstat & ASCC_FIFO_STATUS_TFF) == 0 )
		{
			ASCC1_Ptr->ASCC_TXRX_FIFO = (unsigned int)*p;
			++p;
		}
	}
	
}


/**********************************************************************
 *
 * Name: TUART_ReadCharNoWait
 *
 * Description: If a character is in the UART's fifo, then read it,
 *              else return straight away.
 *
 * Arguments: N/A
 *
 * Returns: -1 if no character available or
 *          the character value
 *
 */ 
int TUART_ReadCharNoWait(void)
{
volatile unsigned int accstat;
int retVal;


	/* get FIFO status */
	accstat = ASCC1_Ptr->ASCC_FIFO_STATUS;
	
	/* if the receiver FIFO is not empty */
	if( (accstat & ASCC_FIFO_STATUS_RFE) == 0)
	{
		/* then read a character */
		retVal = ASCC1_Ptr->ASCC_TXRX_FIFO & 0x00FF;
	}
	else
	{
		retVal = -1;
	}


	return retVal;
}


/**********************************************************************
 *
 * Name: TUART_WriteChar
 *
 * Description: Write a char to the UART's tx fifo, if no space is
 *              available, then wait until the fifo is free.
 *
 * Arguments: character to write
 *
 * Returns: N/A
 *
 */ 
void TUART_WriteChar(char c)
{
volatile unsigned int accstat;
	if ( c == '\n' ) {
		TUART_WriteChar( '\r' );
	}

	while(1)
	{
		/* get FIFO status */
		accstat = ASCC1_Ptr->ASCC_FIFO_STATUS;				
		/* if OK for TX then put char in FIFO */	
		if( (accstat & ASCC_FIFO_STATUS_TFF) == 0 )
		{
			ASCC1_Ptr->ASCC_TXRX_FIFO = (unsigned int)c;
			break;
		}
	}
}
