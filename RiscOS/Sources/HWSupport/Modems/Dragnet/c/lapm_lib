/*name and version number:@(#)lapm_lib.c	1.133*/
/*date of get: 		  04/12/01 11:56:34*/
/*date of delta:	  04/06/01 11:15:56*/
/****************************************************************
File :	lapm_lib.c
Description :
	Contains all lapm variable declarations.
	Contains all lapm library functions.
	All the functions in this file are used by both LAPM & MNP -
	they need to be in a common bank

Procedures Contained :
	lapm_reset_timer
	lapm_timer_expired
	lapm_clear_rx_frame
	lapm_put_frame_on_queue
	lapm_rx_hdlc_frame
	lapm_tx_hdlc_framep

Revision History :
	Initials	Date		Change
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
#include "lapm.h"
#if defined(MODEM_Z80)
# include "z80glob.h"
#endif
#include "allglobs.h"

#if defined(Z80_DEBUG_THIS_FILE)
//# define DEBUG_LAPM_PROTOCOL
#endif

#if !defined(CS_4)
/****************************************************************
Routine : lapm_reset_timer
Description :
	reset lapm timer
*****************************************************************/
non_banked void lapm_reset_timer(void)
{
	G(io_timer) = x_current_time();
}

/****************************************************************
Routine : lapm_timer_expired
Description :
	function to check if lapm timer expired
Parameters in :
	the time interval to check
Parameters out :
	TRUE - if timer has expired
	FALSE -	otherwise
*****************************************************************/
non_banked byte lapm_timer_expired(word duration)
{
	if (x_elapsed_time(G(io_timer)) >= duration)
		return TRUE;
	else
		return FALSE;
}
#endif // !CS_4

/****************************************************************
Routine : lapm_clear_rx_frame
Description :
	Initialize lapm receive frame
*****************************************************************/
non_banked void lapm_clear_rx_frame(void)
{
	#if defined(DEBUG_LAPM_PROTOCOL)
	x_debug_msg("lapm_clear_rx_frame()");
	#endif
	LRF.status = EMPTY;
	LRF.len = 0;
}

#if defined(MODEM_ARM) && defined(DEBUG_PRINTF)
// Uncomment to enable LRQ frame cnt audit in next func
//# define LRQ_FRAME_AUDIT
#endif

/****************************************************************
Routine : lapm_put_frame_on_queue
Description :
	Put the lapm receive frame on queue.  (If there is
	no room on the queue, this function will fail.)
*****************************************************************/
non_banked BOOL lapm_put_frame_on_queue(void)
{
	byte i;
	LAPM_RX_FRAME *freep = NULL;
	#if defined(LRQ_FRAME_AUDIT)
	byte cnt = 0;	// this audits the number of frames in LRQ
					// and is used as a sanity chk on LRQ macros
					// Throw away when convinced macros o.k.
	#endif

	for ( i = 0, G(rxFptr) = &LRQ(0);
		 i < NO_OF_LAPM_RECEIVE_FRAMES;
		 ++i, G(rxFptr)++ )
	{
		if ( G(rxFptr) -> rxstatus == EMPTY )
		{
			if ( freep == NULL )
			{
				// save location of 1st empty
				freep = G(rxFptr);
			}
		}
		else
		{
			if ( (G(rxFptr) -> data[1] >> 1) == (LRF.data[1] >> 1) )
			{
				#if defined(MODEM_ARM) && defined(DEBUG_PRINTF)
				printf("lib: ALREADY IN LRQ; ns=%d\n", LRF.data[1]>>1);
				#else
				x_debug_msg("lapm - rx frame ALREADY in LRQ");
				#endif // MODEM_ARM
				return FALSE;
			}
			#if defined(LRQ_FRAME_AUDIT)
			cnt++;
			#endif
		}
	}

	if ( freep != NULL )
	{
		x_memcpy (	(byte *)freep,
					(byte *)&LRF,
					(word)(LRF.len +
							(sizeof(LAPM_RX_FRAME) -
								(LAPM_FRAME_SIZE + 1))) );

		#if defined(LRQ_FRAME_AUDIT)
		printf("lib: %scnt=%d, ns=%d; nr=%d\n",
							LRF.len != SREJ_LEN ? "++":"  ",
							cnt,
							LRF.data[1]>>1,
							LRF.data[2]>>1);
		#endif // LRQ_FRAME_AUDIT

		//x_debug_msg ( "lapm - rx frame on queue" );
		return TRUE;
	}

	x_debug_msg("lapm - rx queue full");

	#if defined(LRQ_FRAME_AUDIT)
	for (i = 0, G(rxFptr) = &LRQ(0);
		 i < NO_OF_LAPM_RECEIVE_FRAMES;
		 ++i, G(rxFptr)++)
	{
		printf("LRQ[%2d]: Len=%d; N(S)=%d; N(R)=%d\n", i,
					G(rxFptr) -> len,
					(G(rxFptr) -> data[1])>>1,
					(G(rxFptr) -> data[2])>>1);
	}
	printf("V(S)=%d;N(S)=%d;V(A)=%d;V(R)=%d\n",
				G(lapm_vs), G(lapm_ns),
				G(lapm_va), G(lapm_vr));
	#endif
	return FALSE;
}

/****************************************************************
Routine : lapm_rx_hdlc_frame
Description :
	receive HDLC frame from DCE.
*****************************************************************/
non_banked void lapm_rx_hdlc_frame(void)
{
	STATIC word rx_ch;

	if ( (LRF.status == FULL) && (LRF.len != 0) )
	{
		//x_debug_msg ( "lapm - previous not processed yet... " );
		return;
	}

	while ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) )
	{
		rx_ch = *G(io_dce_rx_rptr);
		_INT_DISABLE();
		if ( ++G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr);
		_INT_ENABLE();

		if (rx_ch & HDLC_START_OF_FRAME)
		{
			LRF.data[ 0 ] = (byte)rx_ch;
			LRF.len = 1;

			if ( rx_ch & HDLC_END_OF_FRAME )
			{
				if ( rx_ch & HDLC_CRC_ERROR )	
				{
					LRF.len = 0;
				}
				else
				{
					x_debug_msg("lapm - 1 byte frame");
					LRF.status = FULL;
				}
				return;
			}
		}
		else if ( LRF.len > 0 )
		{
			LRF.data[ LRF.len++ ] = (byte)rx_ch;

			if ( rx_ch & HDLC_END_OF_FRAME ) 
			{
				if ( rx_ch & HDLC_CRC_ERROR )	
				{
					LRF.len = 0;

					#if defined(DEBUG_LAPM_PROTOCOL)
					x_debug_msg("lapm - crc error");
					#endif
				}
				else
				{
					LRF.status = FULL;
					return;
				}
			}

			if (LRF.len >= LAPM_FRAME_SIZE)
			{
				if (LAPM_MODE || (LRF.len > MNP_FRAME_SIZE))
				{
					x_debug_msg("rx frame too long");
					LRF.len = 0;
				}
			}
		}
	}
}

/****************************************************************
Routine : lapm_clean_rcv_frame
Description :
	Get rid of unknown dlci valued hdlc frames received.
*****************************************************************/
non_banked void lapm_clean_rcv_frame(void)
{
	if ( (LRF.status == FULL) && ((LRF.data[0] >> 2) != LAPM_DATA_DLCI()) )
	{
		#if defined(DEBUG_LAPM_PROTOCOL)
		x_debug_msg("lapm_clean_rcv_frame()");
		#endif
		LRF.status = EMPTY;
		LRF.len = 0;
	}
}

#if defined(HDLC_FRAMES_BY_REFERENCE)
/****************************************************************
Routine : lapm_tx_hdlc_framep

	Insert an I Frame in the DCE TX Ring Buffer by REFERENCE.
	Either a two word data structure is used for Venus (16 bit
	addresses), or a three word structure for CS-4 et al.

	The format of the ring buffer data structure is as follows:
		1st wd:	 (   FLAGS  |  count     )
		2nd wd:	 ( high word of data ptr )	// Non Z80 only
		3rd wd:	 ( low word of data ptr  )

	Initially, This routine is only used by LAPM, but in
	the future, any protocol which leaves the send buffer
	stationary "long enough" can use this method (e.g. MNP).

Parameters in :
	from -	pointer to write data (16 bit / 32 bit)
	count-	count of bytes to write (255 max)
*****************************************************************/
non_banked void lapm_tx_hdlc_framep ( byte count, byte* from )
{
	STATIC word *wptr;

	wptr = G(io_dce_tx_wptr);

	*wptr++ = (word)(HDLC_START_OF_FRAME | HDLC_IFRAME_PLACEHLDR | count);
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr);

#if !defined(MODEM_Z80)
	*wptr++ = (word)((unsigned long)(from)>>16);
	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr);

	*wptr++ = (word) ((unsigned long) from);
#else
	*wptr++ = (word) from;
#endif

	if ( wptr >= G(io_dce_tx_eptr) )
		wptr = G(io_dce_tx_sptr);

	_INT_DISABLE();
		G(io_dce_tx_wptr) = wptr;
		G(lapm_max_iframes)++;
	_INT_ENABLE();

	io_start_dce_transmit();

	#if defined(DEBUG_LAPM_PROTOCOL)
	x_debug_msg("snd Ns=");
	dp_puts_dec((word)(*(from+1)>>1));
	x_debug_msg("; Nr=");
	dp_puts_dec((word)(*(from+2)>>1)); sendCrLf();
	#endif
}
#endif	// HDLC_FRAMES_BY_REFERENCE
