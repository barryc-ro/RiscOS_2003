/*name and version number:@(#)iodte.c	1.127*/
/*date of get: 		  04/12/01 11:56:30*/
/*date of delta:	  04/10/01 10:25:01*/
/****************************************************************
File :	iodte.c
Description :
	Contains all the functions for the dte interface.

Procedures Contained :
	UART_Flush
	UART_SetRxQue
	UART_SetTxQue
	UART_SetQue
	io_get_dte_rx_char
	io_at_esc_seq_detected
	io_get_dte_tx_count
	io_put_dte_tx_char
	io_write_dte_fifo
	io_get_dte_rx_bytes
*****************************************************************/

#include "llglob_d.h"
#include "ioglob_d.h"
#include "iouart_d.h"

#if defined(Z80_EASCI_RX_DMA)
#include "z80glob.h"
#endif
#include "allglobs.h"


/****************************************************************
Routine : UART_Flush
Description :
	Initialize the read and write DTE pointers for
	either the transmit or receive DTE buffer.
Parameters in :
	queue - specifies the queue to be flushed
		  - 0 = UART transmit queue == modem receive queue
		  - 1 = UART receive queue == modem transmit queue
*****************************************************************/
void UART_Flush(byte queue)
{
	if (queue == 0)
	{
		// modem receive from DTE queue
		I(io_dte_rx_wptr) = I(io_dte_rx_sptr);
		I(io_dte_rx_rptr) = I(io_dte_rx_sptr);
		#if defined(TCP_IP)
		host_rx_wptr = host_rx_sptr;
		host_rx_rptr = host_rx_sptr;
		#endif
		#if defined(Z80_EASCI_RX_DMA)
		z80_flush_rx_dma();
		#endif
	}

	if (queue == 1)
	{
		// modem transmit to DTE queue
		I(io_dte_tx_wptr) = I(io_dte_tx_sptr);
		I(io_dte_tx_rptr) = I(io_dte_tx_sptr);
		#if defined(TCP_IP)
		host_tx_wptr = host_tx_sptr;
		host_tx_rptr = host_tx_sptr;
		#endif
	}
}

/****************************************************************
Routine : UART_SetRxQue
Description :
	Set the UART receive buffer size.

	modem transmit == UART receive
*****************************************************************/
void UART_SetRxQue(word UARTrxSize)
{
#if defined( SA_MULTI_INSTANCE )
	I(io_dte_tx_sptr) = &BGlobArray[ ModemNum ].io_dte_tx_buff[0];
	I(io_dte_tx_eptr) = I(io_dte_tx_sptr) + UARTrxSize;
#else
	io_dte_tx_sptr = io_dte_tx_buff;
	io_dte_tx_eptr = io_dte_tx_buff + UARTrxSize;
	#if defined(TCP_IP)
	host_tx_sptr = host_tx_buff;
	host_tx_eptr = host_tx_buff + HOST_TX_BUFF_SIZE;
	#endif
#endif	// SA_MULTI_INSTANCE

	UART_Flush(1);
}

/****************************************************************
Routine : UART_SetTxQue
Description :
	Set the UART transmit buffer size.
	UART transmit == modem receive
Parameters in :
	txSize - size of txQueue
*****************************************************************/
void UART_SetTxQue(word UARTtxSize)
{
#if defined( SA_MULTI_INSTANCE )
	I(io_dte_rx_sptr) =  &BGlobArray[ ModemNum ].io_dte_rx_buff[0];
	I(io_dte_rx_eptr) = I(io_dte_rx_sptr) + UARTtxSize;
#else
	io_dte_rx_sptr = io_dte_rx_buff;
	io_dte_rx_eptr = io_dte_rx_buff + UARTtxSize;
	#if defined(TCP_IP)
	host_rx_sptr = host_rx_buff;
	host_rx_eptr = host_rx_buff + HOST_RX_BUFF_SIZE;
	#endif
#endif	// SA_MULTI_INSTANCE

	UART_Flush(0);
	G(io_esc_dte_wptr) = (byte *) I(io_dte_rx_wptr);
}

/****************************************************************
Routine : UART_SetQue
Description :
	Set the transmit and receive DTE buffer sizes to their
	defaults.

*****************************************************************/
void UART_SetQue(void)
{
	UART_SetRxQue(IO_DTE_TX_BUFF_SIZE);	// modem transmit -> UART receive
	UART_SetTxQue(IO_DTE_RX_BUFF_SIZE); // UART transmit -> modem receive
}

/****************************************************************
Routine : io_get_dte_rx_char
Description :
	This routine is called to get the next byte from dte receive queue.
Parameters in :
	&rdata_ptr	-	pointer to byte received from the dte
Parameters out :
	TRUE		-	if data is available
	FALSE		-	if no data available
*****************************************************************/
byte io_get_dte_rx_char(byte *rdata_ptr)
{
	if ( !IS_DTE_RX_EMPTY() )
	{
		*rdata_ptr = *I(io_dte_rx_rptr)++;
		DTE_RX_UPDATE();
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

/****************************************************************
Routine : io_at_esc_seq_detected
Description :
	This routine checks for the at escape sequence.
Parameters in :
	none
Parameters out :
	TRUE		-	if "+++" escape sequence is detected with atleast
					1sec guard time
	FALSE		-	if escape not detected
*****************************************************************/
byte io_at_esc_seq_detected (void)
{
	switch ( G(io_at_esc_state) )
	{
		case AT_ESC_INIT_STATE :
			if ( G(S).ModemOptions.EscapeChar <= 127 )
			{
				G(io_esc_dte_wptr) = (byte *) I(io_dte_rx_wptr);
				G(io_at_esc_timer) = x_current_time ();
				G(io_at_esc_state) = AT_ESC_STATE1;
				#if !defined( CS_4 )
				x_debug_msg ( "IO - at escape state1" );
				#endif
			}
			break;

		case AT_ESC_STATE1 :
			// compare dte receive buffer pointers
			if ( I(io_dte_rx_wptr) != G(io_esc_dte_wptr) )
			{
				// check escape character - remove parity bit
				if ((byte) (*G(io_esc_dte_wptr) & 0x7f) ==
					G(S).ModemOptions.EscapeChar)
				{
					if ((x_elapsed_time (G(io_at_esc_timer))) >=
						 (word)(20*(word)G(S).ModemOptions.EscapeGuardTime -
								100))
					{
						G(io_at_esc_state) = AT_ESC_STATE2;
						x_debug_msg ( "IO - at escape state2" );
						G(io_at_esc_timer) = x_current_time ();
						if ( ++G(io_esc_dte_wptr) >= I(io_dte_rx_eptr) )
							G(io_esc_dte_wptr) = (byte *) I(io_dte_rx_sptr);
					}
					else
						G(io_at_esc_state) = AT_ESC_INIT_STATE;
				}
				else
				{
					G(io_esc_dte_wptr) = (byte *) I(io_dte_rx_wptr);
					G(io_at_esc_timer) = x_current_time ();
				}
			}
			break;

		case AT_ESC_STATE2 :
		case AT_ESC_STATE3 :
			if ( I(io_dte_rx_wptr) != G(io_esc_dte_wptr) )
			{
				if ((byte) (*G(io_esc_dte_wptr) & 0x7f) ==
					G(S).ModemOptions.EscapeChar )
				{
					G(io_at_esc_state) =
						(AT_ESC_STATE)((byte)G(io_at_esc_state) + 1);

					x_debug_msg("IO - at escape state 3-4");
					G(io_at_esc_timer) = x_current_time ();
					if ( ++G(io_esc_dte_wptr) >= I(io_dte_rx_eptr) )
						G(io_esc_dte_wptr) = (byte *) I(io_dte_rx_sptr);
				}
				else
					G(io_at_esc_state) = AT_ESC_INIT_STATE;
			}
			else
			{
				if ( (x_elapsed_time (G(io_at_esc_timer))) >=
					 (word)(20*(word)G(S).ModemOptions.EscapeGuardTime + 500) )
				{
					G(io_at_esc_state) = AT_ESC_INIT_STATE;
				}
			}
			break;

		case AT_ESC_STATE4 :
			if ( I(io_dte_rx_wptr) == G(io_esc_dte_wptr) )
			{
				if ( (x_elapsed_time (G(io_at_esc_timer))) >=
		   			(word)((20*(word)G(S).ModemOptions.EscapeGuardTime)-100) )
				{
					G(io_at_esc_state) = AT_ESC_INIT_STATE;
					if ( G(S).ModemOptions.FlowControl == SW_FLOWCTRL )
					{
						UART_Flush(1);	// flush application's receive queue
					}

					x_debug_msg("IO - at escape sequence detected");
					G(io_at_esc_detect) = TRUE;
					x_send_mail(AT_OK, AT_TASK, 0, 0);
					return TRUE;
				}
			}
			else
			{
				G(io_at_esc_state) = AT_ESC_INIT_STATE;
			}
			break;
	}

	return FALSE;
}

/****************************************************************
Routine : io_get_dte_tx_count
Description :
	This routine returns the free bytes available on the dte transmit queue.
Parameters out :
	Number of bytes available on tx queue to be written
*****************************************************************/
word io_get_dte_tx_count (void)
{
	byte *rptr, *wptr;

	rptr = (byte *) I(io_dte_tx_rptr);
	wptr = (byte *) I(io_dte_tx_wptr);
	if ( wptr >= rptr )
		return (word) ((I(io_dte_tx_eptr) - I(io_dte_tx_sptr)) - (wptr - rptr) - 1);
	else
		return (word) ((rptr - wptr) - 1);
}

/****************************************************************
Routine : io_put_dte_tx_char
Description :
	This routine is called to put a byte on the dte transmit queue.
Parameters in :
	tx_byte	-	byte to put on the transmit queue
*****************************************************************/
void io_put_dte_tx_char ( byte tx_byte )
{
	byte *wptr;

	wptr = (byte *) I(io_dte_tx_wptr);
	*wptr++ = tx_byte;
	if ( wptr >= I(io_dte_tx_eptr) )
		wptr = (byte *) I(io_dte_tx_sptr);
	I(io_dte_tx_wptr) = wptr;
}

/****************************************************************
Routine : io_write_dte_fifo
Parameters in :
	from -	pointer to write data 
	count-	count of bytes to write 
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void io_write_dte_fifo ( word count, word* from )
{
	byte *wptr;

	wptr = (byte *) I(io_dte_tx_wptr);
	while ( count-- )
	{
		*wptr++ = (byte) (*from++);
		if ( wptr >= I(io_dte_tx_eptr) )
			wptr = (byte *) I(io_dte_tx_sptr);
	}
	I(io_dte_tx_wptr) = wptr;
}

/****************************************************************
Routine : io_get_dte_rx_bytes
Description :
	Calculates the number of bytes available in the modem's dte
	receive queue.
Parameters in :
	none
Parameters out :
	count -	the number of bytes available to transmit to the line
Revision History :
	Initials	Date		Change
*****************************************************************/
word io_get_dte_rx_bytes (void)
{
	byte *wptr, *rptr;
	word count;

	rptr = (byte *) I(io_dte_rx_rptr);
	wptr = (byte *) I(io_dte_rx_wptr);
	if ( wptr >= rptr )
		count = (word) ( wptr - rptr );
	else
		count = (word) ((I(io_dte_rx_eptr) - rptr) + (wptr - I(io_dte_rx_sptr)));
	return count;
}
