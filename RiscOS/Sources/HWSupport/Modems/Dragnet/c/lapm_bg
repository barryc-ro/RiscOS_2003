/*name and version number:@(#)lapm_bg.c	1.190*/
/*date of get: 		  12/15/00 10:10:19*/
/*date of delta:	  11/30/00 16:58:26*/
/****************************************************************
File :	lapm_bg.c
Description :
	Contains all lapm background functions (lapm states).

Procedures Contained :
	lapm_disconnect
	lapm_background
	lapm_tx_break

Revision History :
	Initials	Date		Change
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#include "ioglob_d.h"
#include "lapm.h"
#include "mnp.h"
#include "v44.h"
#include "v42bis.h"
#include "dpglob.h"
#include "z80glob.h"

#ifdef CS_MODEM
#include "csglob.h"
#endif
#ifdef CS_DEBUG
 #include "lapm_bg.h"
#endif
#include "allglobs.h"

void lapm_setup_ETC_modem_rate(void);
extern byte vpcm_in_retrain_state(void);
extern byte dp_lapm_capable(void);

/****************************************************************
Routine : lapm_abort
Description :
	Any key abort during lapm negotiation
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void lapm_abort ( void )
{
	// support for any key abort during lapm negotiation
	if ( io_get_dte_rx_char ( &G(io_dte_rx_last_ch) ) )
	{
		x_debug_msg("lapm - any key abort");
#if !defined(CS_MODEM)
		G(x_status).ud_TerminationCause = UD_TC_ANY_KEY_ABORT;
#endif
		G(lapm_state) = LAPM_DOWN ;
		x_send_mail ( V42_REMOTE_DISC, DP_TASK, NULL, 0 ) ;
	}
}

/****************************************************************
Routine : lapm_disconnect
Description :
	send lapm disc command to remote
Parameters in :
	none
Parameters out :
	none
Revision History :
	Initials	Date		Change
*****************************************************************/
void lapm_disconnect ( void )
{
	if ( G(lapm_state) == LAPM_CONNECT )
	{
		G(lapm_state) = LAPM_DISC_CMD ;
		// send multiple disconnect commands - make sure it reaches the remote
		lapm_send_control_frame ( DISC, TRUE, TRUE ) ;
		lapm_send_control_frame ( DISC, TRUE, TRUE ) ;
		lapm_send_control_frame ( DISC, TRUE, TRUE ) ;
		lapm_send_control_frame ( DISC, TRUE, TRUE ) ;
		lapm_reset_timer();
	}
}

/****************************************************************
Routine : lapm_background
Description :
	lapm background state process
Parameters in :
	none
Parameters out :
	TRUE - stay in lapm state 
	FALSE - lapm init failed, return to bufferd or mnp mode
Revision History :
	Initials	Date		Change
*****************************************************************/
byte lapm_background ( byte new_state )
{
	byte frame_type ;

	// No lapm activity if not on line!!
	if ( G(dp_line_state) != DP_LINE_CONNECTED )
	{
		lapm_reset_timer() ;
		return (byte) G(lapm_state);
	}
	
// it is hoped that this will eventually go away!!!! rwf 11/23/99
// evaluate dp_line_state var above to do same thing!!!
#ifdef VPCM_CLIENT
	if ( vpcm_in_retrain_state() )
	{
		lapm_reset_timer() ;
		return (byte) G(lapm_state);
	}
#endif	//VPCM_CLIENT

	if ( new_state != LAPM_KEEP_STATE )
		G(lapm_state) = (LAPM_STATE) new_state ;

#ifdef VPCM_SERVER
	if (G(p_lapm_state) != G(lapm_state))
	{
		G(p_lapm_state) = G(lapm_state);
		x_debug_msg("LAPM_STATE="); 
		sendDecByte((byte) G(lapm_state));
		sendCrLf();
#if defined(CS_MODEM)
		if ( G(cs_rmp_level2_debug_on) )
		{
			word temp = 0xcc00 | (word)(G(lapm_state));
			cs_insert_error_tag ( temp , 0 );
		}
#endif
	}
#endif

	switch ( G(lapm_state) )
	{
  		case LAPM_IDLE :
			// nothing to do, just check if any key abort
			lapm_abort();
			break;

		case LAPM_TX_ODP :
			// Originator (usually client) starts here.  We're sending
			// (or about to send) ODP and waiting to receive ADP from
			// the other modem.  Since ADP comes in async mode, that's
			// the mode the DSP is in for now.  If we've seen that the
			// other modem can do LAPM from its V.8 or other startup
			// info, we'll skip ODP/ADP.
			if (YES == dp_lapm_capable() || TRUE == lapm_adp_detected())
			{
				#if defined(Z80_DEBUG_PRINT)
				if (YES == dp_lapm_capable())
					x_debug_msg("skipping ODP/ADP");
				x_debug_msg("LAPM_TX_HDLC_FLAGS");
				#endif // Z80_DEBUG_PRINT
				io_init_dce_tx_fifo();	// init dce transmit fifo
				x_send_mail(DP_HDLC_MODE, DP_TASK, NULL, 0); // switch to HDLC
				lapm_reset_timer();
				G(lapm_state) = LAPM_TX_HDLC_FLAGS;
			}
			else
			{
				// ADP timer expired.  V.42 standard
				// says this timeout should be T400 which
				// is 750 ms 'by default'.  We'll extend it
				// a little.
				if (lapm_timer_expired(SECOND2) == TRUE)
				{
					x_debug_msg("LAPM-no ADP detected");

					if (G(vpcm_datamode) || G(ETC_mode) ||
						G(S).ModemOptions.V42 == V42_LAPM_ONLY)
					{
						// For NOEC.  Could have missed ADP, send
						// xid anyway
						io_init_dce_tx_fifo();	// init dce transmit fifo
						// tell dp to switch to hdlc mode
						x_send_mail ( DP_HDLC_MODE, DP_TASK, NULL, 0 ) ;
						lapm_reset_timer();
						G(lapm_state) = LAPM_TX_HDLC_FLAGS;
					}
					else
					{
						// ODP/ADP fails, goto MNP or whatever
						x_debug_msg("ODP/ADP fails");
						return LAPM_TO_BUFFERED_MODE;
					}
					return (byte) G(lapm_state);
				}
				if (io_dce_tx_fifo_empty())
				{
					x_debug_msg("lapm - lapm_transmit_odp");
					lapm_transmit_odp();
				}
			}
			lapm_abort();
			break ;

		case LAPM_TX_HDLC_FLAGS :
			// Originator - transmit sync mode flags for at least
			// 300ms then send XID.
			if (lapm_timer_expired(MS300) == TRUE)
			{
				x_debug_msg("LAPM - sent xid cmd");
				lapm_send_xid(TRUE);
				lapm_reset_timer();
				G(lapm_retransmit) = 0 ;
				G(lapm_state) = LAPM_TX_XID_CMD ;
			}
			lapm_abort();
			break ;

		case LAPM_TX_XID_CMD :
			// Originator - we have sent XID command and now wait
			// for the XID response.
			lapm_rx_hdlc_frame();
			frame_type = lapm_rx_frame_type();
			if ( frame_type == XID )
			{
				lapm_process_xid();
				x_debug_msg("LAPM_TX_XID_CMD - got XID, send SABME");
				lapm_send_control_frame ( SABME, TRUE, TRUE ) ;
				lapm_reset_timer();
				G(lapm_retransmit) = 0 ;
				G(lapm_state) = LAPM_TX_SABME_CMD ;
			}
			else if ( lapm_timer_expired ( G(lapm_t401) ) == TRUE )
			{
				if (G(ETC_mode) ||
					G(S).ModemOptions.V42 == V42_LAPM_ONLY ||
					YES == dp_lapm_capable()
					)
				{
					if ( G(lapm_retransmit) >= 10 )
					{
						x_debug_msg("LAPM fails-no response to 10 XID's");
						return LAPM_TO_BUFFERED_MODE;
					}
				}
				else if ( G(lapm_retransmit) >= 3 )
				{
					x_debug_msg("LAPM fails-no response to XID");
					return LAPM_TO_BUFFERED_MODE;
				}
				// Send XID again, maybe it got lost and the other
				// modem didn't see it.
				++G(lapm_retransmit) ;
				x_debug_msg("LAPM - retransmit XID cmd");
				lapm_send_xid ( TRUE ) ;	/* set command flag */
				lapm_reset_timer();
			}
			if ( frame_type == IFRM )	/* clear if i-frame */
				lapm_clear_rx_frame();
			lapm_abort();
			break ;

		case LAPM_TX_SABME_CMD :
			// Originator - we have received the XID response and now
			// send SABME to establish the error-corrected connection.
			// We wait for the answerer to send either UA or an IFRAME.
			lapm_rx_hdlc_frame();
			frame_type = lapm_rx_frame_type();
			if ( ( frame_type == UA ) ||
				 ( frame_type == IFRM ) )
			{
				G(lapm_state) = LAPM_PRE_CONNECT;
				x_debug_msg("lapm - got UA/IFRM, go to LAPM_PRE_CONNECT");
			}
			else if ( lapm_timer_expired ( G(lapm_t401) ) == TRUE )
			{
				if (G(lapm_retransmit) >= 3)
				{
					if ( (G(lapm_retransmit) >= 10) ||
						 (!G(ETC_mode) &&
						  ( G(S).ModemOptions.V42 != V42_LAPM_ONLY ) &&
						  YES != dp_lapm_capable()))
					{
						x_debug_msg("LAPM - no response from SABME");
						return LAPM_TO_BUFFERED_MODE;
					}
				}
				x_debug_msg("lapm - resend SABME cmd");
				++G(lapm_retransmit) ;
				lapm_send_control_frame(SABME, TRUE, TRUE);
				lapm_reset_timer();
			}
			lapm_abort();
			break ;

		case LAPM_RX_ODP :
			// Answerer (usually server) starts here.  DP in async
			// mode.  We're looking for ODP from the other modem.
			frame_type = lapm_odp_detected();
			if (G(ETC_mode) ||			// cellular
				'~' == frame_type)		// HDLC flags detected
			{
				// skip ODP detection phase
				x_debug_msg("LAPM - straight to SABME");
				lapm_reset_timer();
				// tell dp to switch to hdlc mode
				x_send_mail ( DP_HDLC_MODE, DP_TASK, NULL, 0 ) ;
				// do not send adp - receive xid and sabme
				G(lapm_state) = LAPM_RX_SABME_CMD ;
				G(lapm_xmit_timer) = 0;
			}
			else if (0x11 == frame_type)		// real ODP detected
			{
				G(lapm_sent_adp_once) = 0;
				x_debug_msg("LAPM - got ODP");
				lapm_transmit_adp();
				lapm_reset_timer();
				G(lapm_state) = LAPM_TX_ADP ;
				G(lapm_detected_odp) = 1 ;
			}
			else if ((V42_MNP_BIT & G(S).ModemOptions.V42) &&
					  ( lapm_mnp_lr_detected () == TRUE ) )
			{
				G(lapm_state) = LAPM_IDLE ;
				G(io_state) = IO_MNP ;
				G(mnp_state) = MNP_ANSW_INITIAL ;
			}
			// if timer expired return to buffered mode - No EC
			else if ( lapm_timer_expired ( SECOND2 ) == TRUE )
			{
				if (YES == dp_lapm_capable())
				{
					// Maybe things got messed up and
					// we didn't see ODP.
					G(lapm_detected_odp) = 0 ;
					lapm_transmit_adp();
					lapm_reset_timer();
					G(lapm_state) = LAPM_TX_ADP;
					x_debug_msg("LAPM - No ODP but LAPM capable");
					G(lapm_sent_adp_once) = 0;
				}
				else
				{
#ifdef CS_MODEM
					disconnect_reason = V42_FAIL;
#endif
					x_debug_msg("LAPM - odp detect timer expired");
					cs_insert_error_tag(0xc600 , 0);
					return LAPM_TO_BUFFERED_MODE;
				}
			}
			lapm_abort();
			break ;

		case LAPM_TX_ADP :
			// Answerer (usually server) sends ADP.  We probably have
			// seen ODP at this point but there is a case above
			// (lapm_deteced_odp==0) where we came here anyway.
			if ( io_dce_tx_fifo_empty()
				|| (lapm_timer_expired( MS200 ) == TRUE) )
			{
				x_debug_msg("LAPM - look for XID");

				// wait for ADP to transmit...
				x_sleep(25);

				// ...and tell dsp to switch to hdlc mode
				_INT_DISABLE();
					io_init_dce_rx_fifo();
				_INT_ENABLE();
				x_send_mail(DP_HDLC_MODE, DP_TASK, NULL, 0);

				G(lapm_state) = LAPM_RX_XID_CMD ;
				G(lapm_xmit_timer) = x_current_time();
			}
			lapm_abort();
			break ;

		case LAPM_RX_XID_CMD :
			// Answerer (usually server) looks for XID or SABME.  The
			// normal thing is for the originator to send XID to
			// negotiate LAPM parameters and optional procedures.  The
			// originator may omit this negotiation phase if the
			// defaults are satisfactory.  Most modems do the XID
			// stuff, however.  At this point the data pump is in HDLC
			// mode.
			lapm_rx_xid_frame() ;
			frame_type = lapm_rx_frame_type();
			if ( frame_type == XID )
			{
				x_debug_msg("LAPM_RX_XID_CMD - got XID");
				// clear transmit fifo - the adp sequence still in fifo
				io_init_dce_tx_fifo();	// init dce transmit fifo
				lapm_process_xid();
				lapm_reset_timer();
				G(lapm_xmit_timer) = 1;	// indicates we saw XID
				G(lapm_state) = LAPM_RX_SABME_CMD;
			}
			else if ( frame_type == SABME )
			{
				x_debug_msg("LAPM_RX_XID_CMD - got SABME"); 
				lapm_send_control_frame ( UA, FALSE, TRUE ) ;
				lapm_reset_timer();
				G(lapm_state) = LAPM_PRE_CONNECT ;
				G(lapm_xmit_timer) = 0;
			}
			else if ( frame_type == IFRM )	/* clear if i-frame */
			{
				x_debug_msg("LAPM_RX_XID_CMD - got I Frame");
				lapm_clear_rx_frame();
			}
			else
			{
				// try to connect for at least 5 seconds
				if ( lapm_timer_expired ( SECOND5 ) == TRUE )
				{
					if ( ( G(vpcm_datamode) )
						&& ( G(lapm_detected_odp) == 1 ) )
					{
						// Since we did detect ODP, we'll wait a while
						// longer for the XID or SABME in the next state.
						io_init_dce_tx_fifo();
						lapm_reset_timer();
						G(lapm_state) = LAPM_RX_SABME_CMD ;
						G(lapm_xmit_timer) = 0;
						x_debug_msg("LAPM_RX_XID_CMD, no XID, wait longer");
					}
					else
					{
						#ifdef CS_MODEM
						disconnect_reason = LAPM_TIMEOUT;
						#endif
						x_debug_msg("LAPM_RX_XID_CMD - Timeout, no XID");
						cs_insert_error_tag ( 0xc300 , 0 );
						return LAPM_TO_BUFFERED_MODE;
					}
				}
				else if ( x_elapsed_time( G(lapm_xmit_timer) ) >= SECOND1 )
				{
					// We haven't seen XID yet.  That's not a good
					// sign.  We'll assume that maybe the originator
					// didn't see our ADP and we'll transmit it again.
					x_debug_msg("LAPM - timeout retx ADP");
					x_send_mail(DP_ASYNC_8BIT_MODE, DP_TASK, NULL, 0);
					G(lapm_state) = LAPM_TX_ADP ;
					lapm_transmit_adp();
					G(lapm_xmit_timer) = x_current_time();
				}
			}
			lapm_abort();
			break ;

		case LAPM_RX_SABME_CMD :
			// Answerer (usually server) looking for SABME from the
			// originator indicating establishment of the error
			// corrected connection.
			lapm_tx_hdlc_frame(); //xmit the xid frame - if fifo was full
			lapm_rx_hdlc_frame();
			frame_type = lapm_rx_frame_type();
			if ( frame_type == SABME )
			{
				x_debug_msg("LAPM_RX_SABME_CMD - got SABME");
				lapm_send_control_frame(UA, FALSE, TRUE);
				lapm_reset_timer();
				#if defined(VENUS_AT_CS) || defined(CS_MODEM)
				dp_lapm_error_check_init();
				#endif
				G(lapm_state) = LAPM_PRE_CONNECT ;
			}
			else if ( frame_type == XID )
			{
				x_debug_msg("LAPM_RX_SABME_CMD - got XID");
				lapm_process_xid();
				lapm_reset_timer();
				G(lapm_xmit_timer) = 1;	// indicates we saw XID
				// Stay in this state for sabme command - if we got an
				// xid in this state then the remote did not receive
				// our previous xid response.
			}
			else if ( frame_type == IFRM )
			{
				// We got an I frame, probably
				// the other modem thinks we're in data mode.
				// We'll throw away this frame so he will
				// retransmit.  On to data mode.
				x_debug_msg("LAPM_RX_SABME_CMD - got IFRAME");
				lapm_clear_rx_frame();
				lapm_reset_timer();
				G(lapm_state) = LAPM_PRE_CONNECT;
			}
			else
			{
				if (lapm_timer_expired(SECOND1) == TRUE)
				{
					lapm_reset_timer();
					G(lapm_retransmit)++;
					if (G(lapm_retransmit) > 5)
					{
						// Wait 5 second timeout for V.34 but extend
						// to 30 seconds for V.90/K56FLEX/ETC mode.
						if ((G(lapm_retransmit) > 30) ||
							(!G(ETC_mode) &&
							 YES != dp_lapm_capable()))
						{
							#ifdef CS_MODEM
							disconnect_reason = LAPM_TIMEOUT;
							#endif
							x_debug_msg("LAPM_RX_SABME_CMD - no SABME");
							cs_insert_error_tag(0xbf00 , 0);
							return LAPM_TO_BUFFERED_MODE;
						}
					}

					// If we've sent an XID response and haven't seen
					// the SABME we'll guess that he missed our
					// response and resend it.
					if (G(lapm_xmit_timer))
					{
						x_debug_msg("LAPM_RX_SABME_CMD - no SABME");
						lapm_send_xid(FALSE);
						if (G(lapm_retransmit) > 2)
						{
							// After 2 seconds we get desperate and
							// assume that he's sent SABME and we've
							// missed it.  We'll send UA and hope he
							// makes it into an established
							// connection.
							lapm_send_control_frame(UA, FALSE, TRUE);
						}
					}
				}
			}
			lapm_abort();
			break ;

		case LAPM_DISC_CMD :
			lapm_rx_hdlc_frame();
			frame_type = lapm_rx_frame_type();
			if ( ( frame_type == UA ) || ( frame_type == DISC ) ||
				( lapm_timer_expired ( G(lapm_t401) ) == TRUE ) ) /*+ #ETC ***/
			{
				/* the remote acknowledged our disc command - or timer
				expired - send cleardown sequence and then send OK */
				G(lapm_state) = LAPM_DOWN ;
				x_send_mail ( V42_LOCAL_DISC, DP_TASK, NULL, 0 ) ;
			}
			if ( G(lapm_receive_frame).status == FULL ) // clear frames
				lapm_clear_rx_frame();
			break ;

		case LAPM_DISC_RSP :
			if ( lapm_timer_expired ( MS100 ) == TRUE )
			{
				/* the remote commanded us to disconnect - send cleardown
				sequence then send NO CARRIER */
				G(lapm_state) = LAPM_DOWN ;
				x_send_mail ( V42_REMOTE_DISC, DP_TASK, NULL, 0 ) ;
			}
			break ;

		case LAPM_DOWN :
			/* do not do anything in this state - wait for response
			from dp task after the clear down sequence - io will receive
			a disconnect from dp task - switch back to io idle state */
			break ;

		case LAPM_PRE_CONNECT :
			// This is a common state for answerer and originator.
			G(lapm_retransmit) = 0;
			G(lapm_state) = LAPM_CONNECT_INIT ;
			lapm_abort();
			break ;

		case LAPM_CONNECT_INIT :
			G(lapm_state) = LAPM_CONNECT ;

#if defined(V44)
			if ( G(v44_P0) )
				G(x_modem_ec) = EC_V42V44 ;
			else
#endif // V44
			if ( G(v42bis_P0) )
				G(x_modem_ec) = EC_V42B ;
			else
				G(x_modem_ec) = EC_V42 ;
			x_debug_msg("LAPM - to connect state");
			x_send_mail ( IO_AT_CONNECT, AT_TASK, NULL, 0 ) ;
			lapm_setup_ETC_modem_rate();
			lapm_abort();
			break ;

		case LAPM_CONNECT :
			while ( TRUE )
			{
				//-----------------------------------------------------
				// First handle the Receive side...
				//-----------------------------------------------------
				// get new receive frame from DCE ring buffer and
				// place it in the lapm_receive_frame (LRF).
				lapm_rx_hdlc_frame();
	
				/* validate new receive frame - set G(lapm_poll) flag -
				also process ack iframe sequence number N(R) */
				frame_type = lapm_rx_frame_type();
				if ( frame_type == ILGFRM )
				{
					break ;
				}

				switch ( frame_type )
				{
					case IFRM :
						if ( G(io_at_esc_detect) == FALSE )
							lapm_process_iframe();
						G(lapm_rx_iframe) = TRUE ;
						lapm_clear_rx_frame();
						break ;

					case RR :
						/* if remote was busy - then continue to transmit */
						if ( G(lapm_remote_busy) == TRUE )
							lapm_reset_timer();	/* reset timer T401 */
						G(lapm_remote_busy) = FALSE ;
						break ;

					case RNR :
						lapm_reset_timer();		/* reset timer T401 */
						G(lapm_remote_busy) = TRUE ;
						// do not retransmit if remote is busy
						G(lapm_retransmit) = 0 ;
						break ;

					case REJ :
						// For a REJ we must retransmit all packets
						// starting with the last unacknowledged packet.
						G(lapm_ns) = G(lapm_va);
						#if defined(VPCM_SERVER)
						if ( G(lapm_srej_negotiated) )
						{
							TX_LAPM_ERRORS++;
						}
						#endif // VPCM_SERVER

						// fall through for more error handling
						// common to REJ/SREJ
					case SREJ:
						// Selective reject received.  It has been
						// taken care of in lapm_rx_frame_type().
						lapm_reset_timer();		/* reset timer T401 */
						G(lapm_remote_busy) = FALSE;
						TX_LAPM_ERRORS++;
						break;

					case XID :
						lapm_process_xid();
						break ;

					case UI :
						lapm_process_break();
						break ;

					case DISC :
						G(lapm_state) = LAPM_DISC_RSP ;
						#ifdef CS_MODEM
						disconnect_reason = LAPMDISC;
						#else
						G(x_status).ud_TerminationCause = UD_TC_RX_DISC_FRAME;
						#endif
						// send multiple ack's to make sure it gets there
						lapm_send_control_frame ( UA, FALSE, TRUE ) ;
						lapm_send_control_frame ( UA, FALSE, TRUE ) ;
						lapm_send_control_frame ( UA, FALSE, TRUE ) ;
						lapm_send_control_frame ( UA, FALSE, TRUE ) ;
						lapm_reset_timer();
						break ;

					case SABME :
						lapm_send_control_frame ( UA, FALSE, TRUE ) ;
						break ;
				}
			}

			//-----------------------------------------------------
			// Then look to the transmit side.
			//-----------------------------------------------------
			if ( G(io_at_esc_detect) == FALSE )
			{
				// process data in receive i-frame's buffer
				lapm_process_iframe();

				// if we haven't tried for a while
				// build new i-frames to transmit
				#if !defined(CS_4)
				if ((x_elapsed_time(G(lapm_xmit_timer))) >= 15)
				#endif // CS_4
				{
					lapm_build_iframe();
					G(lapm_xmit_timer) = x_current_time();
				}
			}
			// transmit any control frame or i-frame (if remote not busy)
			lapm_tx_hdlc_frame();

			// if remote polled (or) i-frames received - send an ack
			if ( G(lapm_poll) ||
				 (G(lapm_rx_iframe) && (io_get_dce_queue_count () == 0)) )
			{
				if ( ( G(lapm_local_busy) ) || ( G(io_at_esc_detect) ) )
					lapm_send_control_frame ( RNR, FALSE, G(lapm_poll) ) ;
				else
					lapm_send_control_frame ( RR, FALSE, G(lapm_poll) ) ;
				G(lapm_poll) = FALSE ;
				G(lapm_rx_iframe) = FALSE ;
			}

			if ( lapm_timer_expired ( G(lapm_t401) ) == TRUE )
			{
				lapm_reset_timer();		/* reset timer T401 */
				G(lapm_rx_iframe) = FALSE ;
				/* if idle, poll the remote for an acknowledgment */
				if ( ( G(lapm_local_busy) ) || ( G(io_at_esc_detect) ) )
					lapm_send_control_frame ( RNR, TRUE, TRUE ) ;
				else
					lapm_send_control_frame ( RR, TRUE, TRUE ) ;
				/* if remote has not acknowledged i-frames then retransmit.
				   if T401 expired - the timer is reset if a i-frame
				   is available to transmit - also the timer is reset
				   if a i-frame is acknowledged N(R) */
				if ( G(lapm_ns) != G(lapm_va) )
				{
					x_debug_msg("LAPM - ack timer expired");
					cs_insert_error_tag(0x7400,0);
					++G(lapm_retransmit) ;
#if !defined(CS_MODEM)
					++G(x_status).ud_RetransmitCount;
#endif
					// if retransmissions exceeded N400 count then disconnect
					if ( G(lapm_retransmit) >= N400 )
					{
#ifdef CS_MODEM
						disconnect_reason = LAPM_RETRY_LIMIT;
#else
						G(x_status).ud_TerminationCause = UD_TC_N400_TIME_OUT;
#endif
						G(lapm_state) = LAPM_DISC_RSP ;
						x_debug_msg("LAPM - Exceeded N400 count, disconnect");
						cs_insert_error_tag(0x7500,0);
					}
					else if ( G(lapm_remote_busy) == FALSE )
					{
						x_debug_msg("LAPM - retransmit");
						cs_insert_error_tag(0x7600,0);
						#if defined(CS_4)
						PM_PRINTING_ON(1);
						printf("Resending %d to %d\n",G(lapm_va),G(lapm_ns));
						PM_PRINTING_OFF();
						#endif
						#if defined(VPCM_SERVER)
							TX_LAPM_ERRORS++;
						#endif // VPCM_SERVER
						G(lapm_ns) = G(lapm_va) ;		// retransmit
						// retrain the dsp if timeout count exceeded
						if ( G(lapm_retransmit) >= N400/2 )
						{
							#ifdef CS_DIGITAL
							if(G(vpcm_datamode))		// if V.90 connection
								x_send_mail(IO_DP_V90_CS_RETRAIN, DP_TASK, NULL, 0);
							else  
							#endif
								x_send_mail(IO_DP_RETRAIN, DP_TASK, NULL, 0);
						}	
					}
				}
			}
			break ;

		case LAPM_TO_BUFFERED_MODE :
		case LAPM_KEEP_STATE :
			// virtual states, nothing to do...
			break;
	}
	return (byte) G(lapm_state);		/* stay in v42 state */
}

extern void UART_stop_break(void);

/****************************************************************
Routine : lapm_tx_break
Description :
	send lapm break command to remote

	Note for Z80 that lapm_send_break() is a non banked function.
*****************************************************************/
void lapm_tx_break ( void )
{
	lapm_send_break(TRUE);	/* set command/response param to true */
	UART_stop_break();
}

/****************************************************************
Routine : lapm_b_tx_hdlc_frame
Description :
	banked version of lapm_tx_hdlc_frame() to be called
	from files outside of BANK2 on Venus

*****************************************************************/
void lapm_b_tx_hdlc_frame(void)
{
	lapm_tx_hdlc_frame();
}
