/*name and version number:@(#)arm_ppi.c	1.1*/
/*date of get: 		  01/12/01 11:49:20*/
/*date of delta:	  01/12/01 11:25:01*/

/*******************************************************************************
 * Copyright (c) 2000 Vitana Corporation.
 * Copyright (c) 2000 Lucent Technologies Inc.
 * 
 ******************************************************************************/
 

/******************************************************************************
 *
 * File:     $RCSfile$
 *
 * Description: This file contains the routines used for handling the PPI
 *              (Parallel Peripheral Interface) with the ARM chip. At this
 *              point in time we have three LEDs configured for output and
 *              one push button switch configured for input.
 *
 * Revision: $Revision$
 * Date:     $Date$
 * Author:   $Author$
 *
 */

#include "llglob_d.h"
#include "arm_glob.h"
#include "allglobs.h"

#define TIMING_DELAY	0x0001ffff


/**********************************************************************
 *
 * Name: PPI_Init
 *
 * Description: Initialize the PPI input & output lines for our current
 *              configuration of 3 output LEDs & one input push-button.
 *
 * Arguments: N/A
 *
 * Returns: N/A
 *
 */ 
void PPI_Init(void)
{

	/*
	 * a 0 means input, 1 means output
	 * so all we need to do is set the LEDs as outputs
	 */
	PPI1_Ptr->PPI_DIR  = PPI_ALL_LEDS;
		
	/*
	 *
	 * The port sense uses 0 as a level-sensitive
	 * or 1 as a transition-detect
	 *
	 * We program our push-button for transition-detect
	 * our JP2 jumper is already configured for Level Detect,
	 * however we put in the code just because we are paranoid
	 */	  
	PPI1_Ptr->PPI_SENSE = REMOTE_PUSH_BUTTON & ~JUMPER_JP2;
	
	
	
	/* high to low polarity */
	PPI1_Ptr->PPI_POLARITY = PPI_ALL_LEDS | REMOTE_PUSH_BUTTON | JUMPER_JP2;	
	
}


/**********************************************************************
 *
 * Name: PPI_SetPA
 *
 * Description: Set one of the PPI output (LED) lines ON.
 *              Note: All LEDs can be set at once.
 *
 * Arguments: mask of PA lines/LEDs  to set
 *
 * Returns: N/A
 *
 */ 
void PPI_SetPA(unsigned int whichLed)
{
	/* quick (in)sanity check */
	if( whichLed & PPI_ALL_LEDS )
	{
		PPI1_Ptr->PPI_SET  = whichLed;
	}
}


/**********************************************************************
 *
 * Name: PPI_ClearPA
 *
 * Description: Clear one (or more) of the PPI output (LED) lines OFF.
 *              Note: All LEDs can be set at once.
 *
 * Arguments: mask of PA lines/LEDs  to set
 *
 * Returns: N/A
 *
 */ 
void PPI_ClearPA(unsigned int whichLed)
{		
	/* quick (in)sanity check */
	if( whichLed & PPI_ALL_LEDS )
	{
		PPI1_Ptr->PPI_CLEAR  = whichLed;
	}
}


/**********************************************************************
 *
 * Name: PPI_ReadDataReg
 *
 * Description: Read the current value of a PPI PA line
 *
 * Arguments: PA line to read
 *
 * Returns: TRUE if ON else FALSE if off
 *
 */ 
BOOL PPI_ReadDataReg(unsigned int whichPA)
{
	if( PPI1_Ptr->PPI_RESERVED1 & whichPA )
		return TRUE;
		
	return FALSE;
}


/**********************************************************************
 *
 * Name: PPI_ClearDataReg
 *
 * Description: Clears the current value of a PPI PA line
 *
 * Arguments: PA line to clear
 *
 * Returns: N/A
 *
 */ 
void PPI_ClearDataReg(unsigned int whichPA)
{
	PPI1_Ptr->PPI_RESERVED1 |= whichPA;
}

