/*name and version number:@(#)vpcmcnst.c	1.23*/
/*date of get: 		  01/10/01 16:57:54*/
/*date of delta:	  01/10/01 10:39:28*/
/***********************************************************************
 * File Name: VpcmCnst.c
 * Function : V.90 Real Time Constellation and Slicer Table Design by
 *			  Optimizing the Multiple Modulus Converter M levels
 *			  Coverd line:
 *			  A/u-law     : A-law and u-law
 *            Digital loss: 0dB , 3dB, 6dB, 3dB PBX, 2dB
 *            RBS         : RBS0, RBSA and RBSB before and after DLoss
 *            Data rate   : 28K to 56K
 *			  Max power   : -0.5dBm to -16dBm with 0.5 dBm step
 *			  compesated  : power compensated and non-compensated
 * Time     : Tuesday, 13:31:43, Feb 17, 1998
 * Author   : Jerry Wang, MT3C-208, (732)957-6155, zhenyuwang@lucent.com
 *          : Jiangtao, Xi, MT2G-233,(732)957-2294,jiangtaoxi@lucent.com
 ***********************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#if defined(VPCM_CLIENT)
#include "Vpcmcnst.h"
#include "lossrbs.h"
#include "allglobs.h"

void vp_GetLrnTblIndex(
	byte aLaw,		// (i), 0=u-law, 1=A-law
	word *lrnTbl,	// (i), learned table in linear
	word *lrnTbli	// (o), learned table in index
	);

byte vp_MaxLevel(void);

void vp_PackBMS(
    byte aLawCS,	// 1=A-law
	byte alawCL,	// 1=A-law
	word *lrnTbl,	// (i), lrnTblLin
	word *lrnTbli,	// (i),	lrnTblInd
	word *tbl,		// (i), Tx constellation table
	word *mLev,		// (i), Mi pattern
	word *TxBM,		// (o), Tx BM
	word *RxBM,		// (o), Rx BM
	word *SlicerTbl	// (o), slicer table
	);

const byte MMCL0[25]={
	6,  7,  8,  8,  9, 11, 12, 13, 15, 16, 18,
	21, 23, 26, 29, 32, 36, 41, 46, 51, 58, 64, 72, 81, 91};
const short int dd11[25]={
	2048, 1024, 1024, 1024, 1024, 1024, 1024, 1024,  512,  512,  512, 512,
	512,  512,  256,  256,  256,  256,  256,  128,  128,  128,   64,  64,  64};
const short int dd23[25]={
	1024, 1024,  512,  512,  512,  512,  512,  512,  256,  256,  256, 256, 
	256,  256,  128,  128,  128,  128,  128,   64,   64,   64,   32,  32,  32};
const short int dd0[25]= {
	2048, 2048, 2048, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 1024, 1024,
	1024, 512, 512, 512, 512, 512,  256,  256,  256,  128,  128,  128, 128};
const short int ptn[6]= {0, 98, 196, 294, 392, 490};

//---------------------------------------------------------------------
// FUNCTION:	vp_VpcmDesFrmConsTbl()
// DESCRIPTION: design 6 different constellation tables per frame
//---------------------------------------------------------------------
byte vp_VpcmDesFrmConsTbl(
	CPCPT_PARA_VALUE *para_value,
	word *lrnTbl,			// (i), learned rx table
	word mse,				// (i), adjusted mse
	byte rbs0Phs,			// (i), for altRBS
	signed char rbs0ep1,	// (i), for altRBS, evenPlus1
	word *txBM,				// (o), Tx constellation tables in bit map format
	word *rxBM,				// (o), Rx constellation tables in bit map format
	word *maxLevel			// (o), max level used in constellation design
	)
{
	byte i, j, j0, pass=0, flag=1, phdone, jn[6], br=0, maxLev, datRate=0;
	int nn1, xtemp, xtemp1, xtemp2;
	short int pn, pt, mdist=0;
	word *pI2LinTbl;
	double p=0, xd, mFrm;
	double maxPow, pm=1.0e+20;
	short int cptTbl[4];
	short int k0, k[6], n, dist, dd, ddm;
	short int numLev, jNumLev, nL, pn0;
	short int datRatesr;
	short int jnnjNumLev, pn0j, pnj;
	int dy, x;

	word t2;

	cptTbl[0] = 0x2f;
	cptTbl[1] = 0x45;
	cptTbl[2] = 0x51;
	cptTbl[3] = 0x57;

	// initial
	maxLev = vp_MaxLevel();
	*maxLevel = (word) maxLev;

	// if cpt, design 8 level constellation table for CPT
	pn0 = rbs0Phs<<7;		//pn0 = 128*rbs0Phs;
	if (para_value->cpt)
	{
		if (para_value->powCmpst)
		{
			for (i=0; i<4; i++)
			{
				x = cptTbl[i];
				dy = 0;
				for (n=0; n<6; n++)
				{
					nn1 = n<<7;
					dd = 0;
					pn = n<<7;					//pn = 128*n;
					if(altRBS[n] == 3)
					{
						for(j=(byte)(x-3); j<120; j++)
						{
							pnj = pn + j;
							pn0j = pn0 + j;
							if( (lrnTbli[pnj]>=x)&&(
								  ((lrnTbli[pnj] == lrnTbli[pnj+1])&&(lrnTbli[pn0j] != lrnTbli[pn0j+1]))||
								  ((lrnTbli[pnj] == lrnTbli[pnj-1])&&(lrnTbli[pn0j] != lrnTbli[pn0j-1]))||
								  ((lrnTbli[pnj-1] == lrnTbli[pnj+1])&&(lrnTbli[pn0j-1] != lrnTbli[pn0j+1]))  )
							  )
							{
								dy += j;
								dd = 1;
								break;
							}
						}
					}
					else
					{
					for (j= (byte) (x-3); j<120; j++)
					{
						if (lrnTbli[nn1+j]>=x)
						{
							dy = (short int) (dy + j);
							dd = 1;
							break;
						}
					}
					}
					if (dd == 0)
						dy += 119;
				}
				x = (short int) (dy / 6);
				if ( (double)dy/6.0 - x >= 0.5 )
					x++;
				cptTbl[i] = x;
			}
		}

		for (i=0; i<6; i++)
		{
			para_value->mLev[i] = 4;
			pn = (short int) (i << 7);
			pt = ptn[i];
			for (j=0; j<4; j++)
			{
				tbl[pt+j] = cptTbl[j];
			}
		}
		vp_PackBMS(para_value->aLaw, para_value->rxAlaw, lrnTbl, lrnTbli, tbl,
				para_value->mLev, txBM, rxBM, para_value->STbl);
		para_value->rate = 17;
		return 1;
	}


	if (para_value->rxAlaw)
	{
		pI2LinTbl = (word *) aI2LinTbl;
		maxPow = PowDev[32+para_value->maxPow];
		ddm = 8;
	}
	else
	{
		pI2LinTbl = (word *) uI2LinTbl;
		maxPow = PowDev[para_value->maxPow];
		ddm = 4;
	}

	if (mse)
	{			// for auto rate design
		dist = mse;
		dd = (short int) (mse >> 1);
		datRate = 1;
		flag = 1;
	}
	else
	{			// fixed rate design
		if(para_value->maxPow == 23)
			dist = dd23[para_value->maxRate+para_value->sr-1];
		else if(para_value->maxPow == 11)
			dist = dd11[para_value->maxRate+para_value->sr-1];
		else
			dist = dd0[para_value->maxRate+para_value->sr-1];
		dd = (short int) (dist >> 1);
		datRate = (byte) para_value->maxRate;
		flag = 11;
	}

	p = 0;
	for (i=0; i<6; i++)
	{
		jn[i] = 0;
		k[i] = 0;
	}

	// design loop, optimal design=1-4 search times; fast-design=1 time search
	k0 = 0;
	j0 = 1;
	xtemp = 1 - para_value->powCmpst;

	t2 = x_current_time();
	pn0 = rbs0Phs<<7;
	while (flag)
	{
		if (flag != 1)
		{
			k0 = 0;
			j0 = 1;
		}
		phdone = 0;
		for (j=j0; j<maxLev; j++)
		{
			if (phdone == 1)
				break;
			for (n=0; n<6; n++)
			{		// search 6 phases
				if (altRBS[n] == 3)
				{
					pn = (short int) (n<<7);	//pn = 128 * n;
					pnj = pn + j;
					if( (j >= 42)&&(lrnTbli[pnj] != lrnTbli[pn+jn[n]])
						         &&(lrnTbli[pnj] == lrnTbli[pnj+1]) )
					{
						pt = (short int) ptn[n];	//pt = 98 * n;
						if (k[n] == 0)
						{
							x = lrnTbli[pn0+j];
							dy = uI2LinTbl[x]<<1;
							//dy -= (int)(2*levelMse[j]*phGain[n]);
							if ( ( levelMse[j] != 0 ) && (para_value->phGain[n] != 0 ) )
							{
								if (para_value->phGain[n] == 1 )
								{
									dy = dy - (int)(levelMse[j]<<1);
								}
								else
								{
									// phGain == 1.5
									dy =
									(dy -
									 (int)((levelMse[j]<<1)+levelMse[j]));
								}
							}
						}
						else
						{
							x = lrnTbli[pn0+j];
							dy = uI2LinTbl[x];
							jnnjNumLev = jn[n] + jNumLev ;
							x = lrnTbli[pn0+jnnjNumLev];
							dy = dy - uI2LinTbl[x];
							//dy -= (int)((levelMse[j] + levelMse[jn[n]+jNumLev])*phGain[n]);
							if ( (levelMse[jnnjNumLev] != 0 ) && (para_value->phGain[n] != 0 ) )
							{
								if (para_value->phGain[n] == 1)
								{
									dy = 
									(dy -
									 (int) (levelMse[j] +
								 		 levelMse[jn[n]+jNumLev]));
								}
								else
								{	// phGain == 1.5
									dy =
									(dy -
									 (int) (levelMse[j] +
									 	(levelMse[j] >> 1) +
							 			 levelMse[jn[n]+jNumLev]
										 +(levelMse[jn[n]+jNumLev] >>1)));
								}
							}
							else
							{
								dy = dy - levelMse[j];
							}
						}
						// find number of levels in a same group
						numLev=0;
						for(nL=j+1; nL<maxLev; nL++)
						{
							if(lrnTbli[pn+j] == lrnTbli[pn+nL])
							{
								numLev++;
							}
							else
							{
								break;
							}
						}
						// if all group levels are same in the RBS0 phase,then skip the group
						pn0j = pn0 + j;
						if(lrnTbli[pn0j] == lrnTbli[pn0j+numLev])
						{
							dy = 0;
						}
					}
					else
					{
						dy = 0;
					}
				}	//end of altRBS
				else
				{
					pn = (short int) (n<<7);
					pt = ptn[n];

					if (k[n] == 0)
					{
						dy = lrnTbl[pn+j]<<1;
						//dy -= (int)(2*levelMse[j]*phGain[n]);
						if (para_value->phGain[n] == 1)
						{
							dy =
								(dy - (int)(levelMse[j] << 1 ));
						}
						else
						{	// phGain == 1.5
							dy =
								(dy - (int)((levelMse[j] << 1 )
											+ levelMse[j]));
						}
					}
					else
					{
						dy = lrnTbl[pn+j] - lrnTbl[pn+jn[n]];
						//dy -= (int)((levelMse[j] + levelMse[jn[n]])*phGain[n]);
						if (para_value->phGain[n] == 1)
						{
							dy = 
								(dy - (levelMse[j] +
										levelMse[jn[n]]));
						}
						else
						{	// phGain == 1.5
							dy =
								(dy - ((levelMse[j] +
										(levelMse[j] >>1) +
										levelMse[jn[n]])
										+(levelMse[jn[n]] >>1) ));
						}
					}
				}	// end of else of altRBS

				if (dy >= dist)
				{	// if min distance is good, take the level
					jn[n] = j;
					jNumLev = numLev;
					tbl[pt+(k[n]++)] = j;

					//x = (para_value->powCmpst)*lrnTbli[pn+j] + (1-(para_value->powCmpst))*j;
					//xd = (double)pI2LinTbl[x];
					//p += xd*xd;
					if ( xtemp == 0 )
						xtemp1 = 0;
					else
						xtemp1 = xtemp * j;

					if ( ( lrnTbli[pn+j] == 0 ) || (para_value->powCmpst == 0))
						xtemp2 = 0 ;
					else
					{
						if ( para_value->powCmpst == 1 )
							xtemp2 = lrnTbli[pn+j] ;
						else
						{
							if ( lrnTbli[pn+j] == 1 )
								xtemp2 = para_value->powCmpst ;
							else
								xtemp2 = para_value->powCmpst*lrnTbli[pn+j] ;
						}
					}
					x = (short int) (xtemp1 + xtemp2);

					if ( pI2LinTbl[x] != 0 )
					{
						xd = (double)pI2LinTbl[x];
						p += xd*xd;
					}
					else
					{
						xd = 0;
						p += 0;
					}


					if (k0 < k[n])
						k0 = k[n];
					if ( k0 > 98)
						break;
					if ( (altRBS[n] == 3)&&(k0 > 49) ) 	//altRBS
						break;
					datRatesr = datRate + para_value->sr - 1;
					if ( k0 >= MMCL0[datRatesr] ) {	// check MMC levels
						xd = 1;
						for (i=0; i<6; i++)
						{
							//xd *= (double)k[i];
							if ( k[i] == 0 )
							{
								xd = 0;
								i = 6;
							}
							else
							{
								xd *= (double)k[i];
							}
						}
						if (xd >= MMCL[datRatesr])
						{
							if (flag == 1)
								j0 = j;
							else
								j0 = 1;

							phdone = 1;
							mFrm = k[0]+k[1]+k[2]+k[3]+k[4]+k[5];
							break;
						}
					}
				}	// end of dy >= dist
			}	// end of n-loop
		}	// end of j-loop

		if (phdone == 0 )
		{
			if((flag==11)&&(dd>ddm)) 
				p = -1;
			else 
				flag++;
		}
		
		// loop for best rate, next search for auto rate
		if (flag == 1)
		{
			if( (p <= maxPow*mFrm)&&(p > 0) )
			{
				pass = 1;
				br = 1;
				for (i=0; i<6; i++)
				{
					para_value->mLev[i] = k[i];
					if ( para_value->mLev[i] > 100 )
					{
						return 0 ;
					}
				}

				vp_PackBMS(para_value->aLaw, para_value->rxAlaw, lrnTbl, lrnTbli,
						tbl, para_value->mLev, txBM, rxBM, para_value->STbl);

				if (datRate < (byte) para_value->maxRate)
				{
					datRate++;
				}
				else
				{
					flag = 10;
				}
			}
			else
			{
				flag = 10;
				if (datRate > 1)
				{
					datRate--;
				}
				else
				{
					flag = 0;
				}
			}
		}
		else if (flag == 2)
		{
			flag = 10;
			if (datRate > 1)
			{
				datRate--;
			}
		}
		
		// found best rate, optimize best rate
		if (flag == 10)
		{
			flag = 11;
			p = 0;
			for (i=0; i<6; i++)
			{
				jn[i] = 0;
				k[i] = 0;
			}
			if (para_value->maxPow == 23)
				dist = dd23[datRate+(para_value->sr)-1];
			else if (para_value->maxPow == 11)
				dist = dd11[datRate+(para_value->sr)-1];
			else
				dist = dd0[datRate+(para_value->sr)-1];
			dd = (short int) (dist>>1);
		}
		else if (flag == 11)
		{
			if( (p <= maxPow*mFrm)&&(p > 0) )
			{
				pass = 1;
				for (i=0; i<6; i++)
				{
					para_value->mLev[i] = k[i];
					if ( para_value->mLev[i] > 100 )
					{
						return 0 ;
					}
				}
				vp_PackBMS(para_value->aLaw, para_value->rxAlaw, lrnTbl, lrnTbli,
						tbl, para_value->mLev, txBM, rxBM, para_value->STbl);

				mdist = dist;
				dist = (short int) (dist + dd);
			}
			else
			{
				dist = (short int) (dist - dd);
			}
			if (dd >= ddm)
			{
				dd = (short int) (dd >> 1);
			}
			else
			{
				if (br && (mse > mdist) )
				{
					dist = mse;
				}
				else
				{
					flag = 0;
				}
			}
			p = 0;
			for (i=0; i<6; i++)
			{
				jn[i] = 0;
				k[i] = 0;
			}
		}
		else if (flag == 12)
		{
			flag = 0;
		}
	}	// end of while-loop

	sendCrLf();
	x_debug_msg("done with while loop time=");
	dp_puts_dec(x_elapsed_time(t2));
	sendCrLf();
	para_value->rate = datRate;

	if (!pass)
	{
		for (i=0; i<6; i++)
			para_value->mLev[i] = 0;
	}

	return pass;
}


void vp_GetLrnTblIndex(
	byte aLaw,		// (i), 0=u-law, 1=A-law
	word *lrnTbl,	// (i), learned table in linear
	word *lrnTbli	// (o), learned table in index
  )
{
	byte i, j;
	int k, pi, jj1;
	word *sTbl;

	if (aLaw)
		sTbl = (word *) aSTbl;
	else
		sTbl = (word *) uSTbl;
	for (i=0; i<6; i++) {
		k=0;
		pi = i<<7;
		for (j=0; j<128; j++)
		{
			jj1 = pi + j ;
			while(lrnTbl[jj1] > sTbl[k])  // if bigger compare to the next one
				k++;
			lrnTbli[jj1]= (word) k;		// if smaller take the index k
		}
	}
}
 
const short int ptn1[6] = {0, 98, 196, 294, 392, 490};
const short int psn[6] = {0, 100, 200, 300, 400, 500};

// pack the data to output format
void vp_PackBMS(
    byte aLawCS,	// 1=A-law
	byte aLawCL,	// 1=A-law
	word *lrnTbl,	// (i), lrnTblLin
	word *lrnTbli,	// (i),	lrnTblInd
	word *tbl,		// (i), Tx constellation table
	word *mLev,		// (i), Mi pattern
	word *TxBM,		// (o), Tx BM
	word *RxBM,		// (o), Rx BM
	word *SlicerTbl	// (o), slicer table
  )
{
	byte i, j, pi, y, z;
	short int pt, ps, pl, x;
	short int jj1, pl1;

	for (i=0; i<6; i++)
	{
		pi = (byte) (i<<3);
		pt = ptn1[i];
		ps = psn[i];
		pl = (short int) (i<<7);
		SlicerTbl[ps] = (word) (mLev[i] - 1);
		x=0;
		for (j=0; j<7; j++)
		{
			y = (SlicerTbl[ps] >> j) && 0x1;
			if(y)
			{
				x = j;
			}
		}
		SlicerTbl[ps+1] = (word) (x + 1);
		ps += 2;
		for (j=0; j<8; j++)
		{
			jj1 = (short int) (pi + j);
			TxBM[jj1] = 0;
			RxBM[jj1] = 0;
		}
		for (j=0; j<mLev[i]; j++)
		{
			x = tbl[pt+j];
			y = (byte) ((x >> 4) & 0x7);
			z = (byte) (x & 0xf);
			TxBM[pi+y] |= 0x1 << z;				// pack bitmap table
			pl1 = (short int) (pl + x);
			SlicerTbl[ps+j] = lrnTbl[pl1];		// pack slicer table
			x = lrnTbli[pl1];

			// ---- add A/u-law converter -----
			if ( (aLawCS==1) && (aLawCL==0) )
			{
				x = (short int) Mu2ATbl[x];
			}
			else if ( (aLawCS==0) && (aLawCL==1) )
			{
				x = (short int) A2MuTbl[x];
			}
			// ---- end -----------------------

			y = (byte) ((x >> 4) & 0x7);
			z = (byte) (x & 0xf);
			RxBM[pi+y] |= 0x1 << z;
		}
	}
}

byte vp_MaxLevel(void)
{
	byte i, maxLev = 119;

	for (i=119; i>1; i--)
	{
		if (levelMse[i] < LEV_CUTOFF_MSE)
		{
			maxLev = i;
			break;
		}
	}

	return (byte) (maxLev + 1);
}

void vp_AltRbsLrnTbli(
	word *lrnTbl,	// (i)
	word *lrnTbli	// (o)
	)
{
	byte i, j;
	short int k, pi;

	for (i=0; i<6; i++)
	{
		if (altRBS[i] == 3)
		{
			k=0;
			pi = (short int) (i<<7);
			for (j=0; j<80; j++)
			{
				//  if bigger compare to the next one
				while(lrnTbl[pi+j] >= uI2LinTbl[k])
					k++;
				lrnTbli[pi+j]=k;	// if smaller take the index k
			}
			for (j=80; j<120; j++)
			{
				// if bigger compare to the next one
				while (lrnTbl[pi+j] >= uSTbl[k])
					k++;
				lrnTbli[pi+j]=k;	// if smaller take the index k
			}
		}
	}
}

#endif	// VPCM_CLIENT
