/*name and version number:@(#)v44.c	1.31*/
/*date of get: 		  05/02/01 16:30:47*/
/*date of delta:	  05/01/01 16:38:18*/
/****************************************************************
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
*                  CONFIDENTIAL INFORMATION                     *
*                  ------------------------                     *
*    This Document contains Confidential Information or         *
*    Trade Secrets, or both, which are the property of Lucent   *
*    Technologies, Inc.  This document may not be  copied,      *
*    reproduced, reduced to any electronic medium or machine    *
*    readable form or otherwise duplicated and the information  *
*    herein may not be used, disseminated or otherwise          *
*    disclosed, except with the prior written consent of Lucent *
*    Technologies, Inc.                                         *
*                                                               *
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
* Copyright (c) 2000 Lucent Technologies, Inc.                  *
* All rights reserved.                                          *
* Use of copyright notice does not imply publication.           *
****************************************************************/

/****************************************************************
File :	v44.c
Description :
	Implements the V.44 encoder and decoder.

PUBLIC (non-static) Procedures Contained :
	v44_init_variables
	v44_encode 
	v44_encode_flush
	v44_encode_dump_dict
	v44_display

Revision History :
	Author		Date		Change
	J. Apgar   	07/10/00	Initial
*****************************************************************/
//#define Z80_DEBUG_THIS_FILE

#if defined(WINMODEM)
# include <stdio.h>
# include <io.h>
# include <fcntl.h>
# pragma warning( push )
# pragma warning( disable : 4761 )
#endif	// WINMODEM


// LOCAL BUILD OPTIONS
//#  define V44_CONTROL_DEBUG	// report FLUSH, STEPUP, RESET, ETM, ECM etc.
//#  define V44_ASSERT		// enable debug build assertions in this file (slow)

#if defined(WINMODEM)
//#  define V44_FLUSH_TEST		// cause encoder to insert a lot of FLUSH cmds
#endif	// WINMODEM

#if defined(WINMODEM) || defined(MODEM_ARM)
//#  define V44_LAPM_DEBUG	// low-level bit packing/unpacking around LAPM buffer
//#  define V44_DTE_DEBUG	// byte-level operations around DTE buffer
//#  define V44_DICTIONARY_AUDIT	// audit encoder dictionary after each node insertion (slow)
//#  define V44_LOOP_COUNT	// count number of memcmp loops in match_right_node_string()
#endif	// WINMODEM || MODEM_ARM

// Uncomment to enable encode-to-decode hairpin loopback
//# define	V44_LOCAL_LOOP


#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "llglob_d.h"

#if defined(V44)

#ifndef CLES_MODEM
#include "z80glob.h"
#else
#define __EXTERN
//#define EXTERN
#endif // CLES_MODEM
#include "ioglob_d.h"
#include "dpglob.h"
#include "lapm.h"
#include "v44.h"
#include "v44local.h"
#include "v42bis.h"
#ifndef CLES_MODEM
#include "allglobs.h"
#endif // CLES_MODEM

#ifdef CLES_MODEM
#pragma intrinsic(memset,memcpy,memcmp)
#define _Inline _inline
#define G(x) x
#define I(x) x
#define STATIC static
#define sendCrLf() ((void)0)
#define sendDecByte( byte ) ((void)0)
#define sendHexByte( byte ) ((void)0)
#define sendHexByte( byte ) ((void)0)
#define sendHexWord( word ) ((void)0)
#define printf (char *) ((void)0)
#endif // CLES_MODEM

#if defined(V44_DICTIONARY_AUDIT)
static void v44_encode_audit_dict( void );
#else
# define v44_encode_audit_dict()
#endif // V44_DICTIONARY_AUDIT 

void
v44_display( void )
{
#ifndef CLES_MODEM

	dword uc_bytes = G(v44_en_input_byte_count);
	dword c_bytes = G(v44_en_output_byte_count);
    int   p;
    int   p1;
    int   p2;
    int   p3;
    ldiv_t x;
    dword n;

	if ( uc_bytes == 0 || c_bytes == 0 ) {
		p = p1 = p2 = p3 = 0;
	}
	else {
		if ( uc_bytes > c_bytes ) {
			n = (uc_bytes - c_bytes) * 100;
			x = ldiv(n, uc_bytes);
			p = (int) x.quot; //msm//
			n = x.rem * 100;
			x = ldiv(n, uc_bytes);
			p1 = (int) x.quot; //msm//
		}
		else {
			p = 0;
			p1 = 0;
		}

		if ( (p1 / 10) >= 5 ) {
			p1++;
		}

		x = ldiv(uc_bytes, c_bytes);
		p2 = (int) x.quot; //msm//
		n = x.rem * 100;
		x = ldiv(n, c_bytes);
		p3 = (int) x.quot; //msm//

		if ( (p3 / 10) >= 5 ) {
			p3++;
		}
	}


#if defined(MODEM_Z80)
    x_debug_msg("V.44 compression ratio=");
	sendDecByte((byte)p2);
	send_debug_char('.');
	sendDecByte((byte)p3);
	send_debug_char(' ');
	send_debug_char('(');
	sendDecByte((byte)p);
	send_debug_char('.');
	sendDecByte((byte)p1);
	send_debug_char('%');
	send_debug_char(')');
	sendCrLf();
#else
    printf("V.44 compression ratio is %d.%02d ", p2, p3);
    printf("  (%d.%02d percent)\n", p, p1);
    printf("%ld uncompressed bytes, %ld compressed bytes\n", uc_bytes,c_bytes);

	printf(" V44 encoder: c1=%d, c2=%d, c3=%d, c4=%d, c5=%d, n2=%d, n7=%d, n8=%d\n",
		   get_node_index( G(v44_en_c1_ptr) ),
		   G(v44_en_c2),
		   G(v44_en_c3),
		   G(v44_en_c4_ptr) - G(v44_en_history),
		   G(v44_en_c5),
		   G(v44_en_n2),
		   G(v44_en_n7),
		   G(v44_en_n8)
		   );

	log_loop_report();

#if 0
	printf(" V44 decoder: c1=%d, c2=%d, c3=%d, c4=%d, c5=%d, n2=%d, n7=%d, n8=%d\n",
		   G(v44_de_c1),
		   G(v44_de_c2),
		   G(v44_de_c3),
		   G(v44_de_c4_ptr) - G(v44_de_history),
		   G(v44_de_c5),
		   G(v44_de_n2),
		   G(v44_de_n7),
		   G(v44_de_n8));
#endif

#endif // !MODEM_Z80

	G(v44_en_input_byte_count) = G(v44_en_output_byte_count) = 0;

#endif // CLES_MODEM
}

// ENCODER FUNCS START HERE

static void
v44_encode_init ( void )
{
	byte len;

	// Set ext_len_field_width based on current value of n7
	if ( G(v44_en_n7) >= V44_MIN_P2 && G(v44_en_n7) <= 46 ) {
		len = 9;
	}
	else if ( G(v44_en_n7) <= 78 ) {
		len = 10;
	}
	else if ( G(v44_en_n7) <= 142 ) {
		len = 11;
	}
	else if ( G(v44_en_n7) <= 255 ) {
		len = 12;
	}
	else {
		// Illegal value of n7
		v44_encode_error(6);
		return;
	}
	G(v44_en_ext_len_field_width) = len + 2;	// includes 2 prefix bits

	G(v44_en_transparent) = FALSE;
	G(v44_en_esc_char) = 0;
	G(v44_en_bitbuff) = 0;
	G(v44_en_bitbuff_count) = 0;
	G(v44_en_test_delay) = V44_AXF_MIN;
	G(v44_en_sent_codeword) = FALSE;
	G(v44_en_input_byte_count) = 0;
	G(v44_en_output_byte_count) = 0;

	// Decrement n2 prior to use, rather than every time through encode loop
	G(v44_en_dict_end_ptr) = get_node_ptr( G(v44_en_n2) - 1 );
	if ( (byte *) G(v44_en_dict_end_ptr) < (byte *) G(v44_en_history) ) {
		// Might not be enough history space to hold full dictionary
		G(v44_en_dict_end_ptr) = (V44_TREE_NODE *) G(v44_en_history);
	}

	// Subtract n7 (max string len) off of hist size (n8) now,
	// rather than every time through encode loop
	G(v44_en_hist_end_ptr) = &G(v44_en_history)[ G(v44_en_n8) - G(v44_en_n7) ];

	v44_encode_dict_init();
}

void
v44_encode_flush ( void )
{
	if ( !G(v44_en_transparent) ) {
		// Finish any encoding in progress
		v44_encode_complete();

		/* send FLUSHED control codeword */
		v44_encode_send_control ( V44_FLUSH );

		/* flush remaining bits from bit buffer */
		v44_encode_bitbuff_flush();
	}
}

#if defined(V44_FLUSH_TEST)
word flush_test;
#endif

void					  
v44_encode ( void ) 
{
#if defined(CS_4)
	byte maxLen = MAX_QMP_DATA_BYTES < G(lapm_n401)
			 ? ( MAX_QMP_DATA_BYTES - 12)
			 : G(lapm_n401) - 12 ;
#else
	byte maxLen = (byte) (G(lapm_n401) - 12);
#endif

	BOOL setParity = (byte) (G(S).ModemOptions.Parity
						&& (G(S).ModemOptions.DataBits==7));

#if defined(V44_FLUSH_TEST)
	if (++flush_test >= 32) {
		x_debug_msg("INSERTING FLUSH");
		flush_test = 0;
		v44_encode_flush();
	}
#endif

	v44_encode_process_bytes( maxLen, setParity);
}

// DECODER FUNCS START HERE

byte
v44_decode ( byte *rptr, word dte_free_count, byte len )
{
#if 0
	x_debug_msg("in decode");
	x_debug_msg(", rptr=");
	sendHexWord( (word) rptr);
	x_debug_msg(", dte_free=");
	sendHexWord( dte_free_count );
	x_debug_msg(", len=");
	sendHexByte( len );
	sendCrLf();
#endif

	if ( dte_free_count <= 2*V44_P2R || len == 0 ) {
		return len;
	}

	G(v44_de_dte_write_count) = 0;
	return v44_decode_process_bytes( rptr, dte_free_count - 2*V44_P2R, len );
}
static void
v44_decode_init ( void )
{
	// Set ext_len_field_width based on current value of n7
	// Number of bits to get next determined by N7T
	// Refer to Table 4/V.44
	if ( G(v44_de_n7) >= V44_MIN_P2 && G(v44_de_n7) <= 46 ) {
		G(v44_de_ext_len_field_width) = 5;
	}
	else if ( G(v44_de_n7) <= 78 ) {
		G(v44_de_ext_len_field_width) = 6;
	}
	else if ( G(v44_de_n7) <= 142 ) {
		G(v44_de_ext_len_field_width) = 7;
	}
	else if ( G(v44_de_n7) <= 255 ) {
		G(v44_de_ext_len_field_width) = 8;
	}
	else {
		// Illegal value of n7
		v44_decode_error(4);
	}

	G(v44_de_state) = TM_ECM;
	G(v44_de_esc_char) = 0;
	G(v44_de_bitbuff) = 0;
	G(v44_de_bitbuff_count) = 0;
	G(v44_de_next_bits_length) = 1;

	v44_decode_dict_init();
}

#if defined(MODEM_Z80) || defined(MODEM_ARM) || defined(V44_TEST)

// Support dynamic dictionary and history sizes only on MODEM_Z80
// This allows tuning to favor either the encoder or decoder,
// depending on where the user wants to spend the limited memory.
// The defaults are sufficient on non-Z80.

static byte
v44_size_check( word de_n2, word en_n8, word de_n8 )
{
	// TRUE (non-zero) => goodness
	// FALSE (zero) => badness
	return ( ( en_n8*sizeof(byte) +		// encoder history (dictionary also uses this area)
			   de_n8*sizeof(byte) +		// decoder history
			   ( sizeof(byte *) + sizeof(byte) ) * de_n2 )	// decoder string table
			 <= V44_MEM_SIZE );
}

byte
v44_set_params( word en_n2, word de_n2, byte en_n7, byte de_n7, word en_n8, word de_n8 )
{
	if ( en_n2 < V44_MIN_P1 ) {
		x_debug_msg("bad P1T, en_n2=");
		sendHexWord( en_n2 );
		sendCrLf();
		return FALSE;
	}
	if ( de_n2 < V44_MIN_P1 ) {
		x_debug_msg("bad P1R, de_n2=");
		sendHexWord( de_n2 );
		sendCrLf();
		return FALSE;
	}
	if ( en_n7 < V44_MIN_P2 || de_n7 < V44_MIN_P2 ) {
		x_debug_msg("illegal P2");
		return FALSE;
	}
	if ( en_n8 < V44_MIN_P3 || de_n8 < V44_MIN_P3 ) {
		x_debug_msg("illegal P3");
		return FALSE;
	}
	if ( v44_size_check( de_n2, en_n8, de_n8 ) ==  FALSE ) {
		x_debug_msg("requested params won't fit");
		return FALSE;
	}
	G(v44_en_n2) = en_n2;
	G(v44_en_n7) = en_n7;
	G(v44_en_n8) = en_n8;
	G(v44_de_n2) = de_n2;
	G(v44_de_n7) = de_n7;
	G(v44_de_n8) = de_n8;

	return TRUE;
}
#endif	// MODEM_Z80 || MODEM_ARM || V44TEST

void
v44_set_default_params()
{
	G(v44_en_n2) = V44_P1T;
	G(v44_en_n7) = V44_P2T;
	G(v44_en_n8) = V44_P3T;
	G(v44_de_n2) = V44_P1R;
	G(v44_de_n7) = V44_P2R;
	G(v44_de_n8) = V44_P3R;
}


#if defined(MODEM_Z80)
extern non_banked word dp_getROMwd( byte, byte * ) ;
void
v44_init_ram_code()
{
	// Copy decoder image from V44_RAM_INIT to V44_RAM_CODE
	// Not needed with PM3, since ROM area is really RAM just run from there
	word i;
	word nwords = ( (word) v44_ram_end - (word) v44_ram_start + 2)
						/ sizeof(word);
	word *ram_ptr = (word *) v44_ram_start;
	long src_adr = address_24_of(v44_ram_init_end);
	byte src_bank = src_adr >> 16;
	byte *src_ptr = (byte *) ( (word) src_adr & 0xf000 );

	x_debug_msg("v44_init_ram: nwords=");
	sendHexWord(nwords);
	x_debug_msg(", src_bank=");
	sendHexByte( src_bank );
	x_debug_msg(", src_ptr=");
	sendHexWord( (word) src_ptr );
	x_debug_msg(", ram start=");
	sendHexWord( (word) v44_ram_start);
	x_debug_msg(", ram end=");
	sendHexWord( (word) v44_ram_end);
	sendCrLf();

	for (i = 0; i < nwords; i++) {
		word tmp = dp_getROMwd( src_bank, src_ptr );
#if 0
		if ( i < 10 ) {
			x_debug_msg("src_ptr=");
			sendHexWord( (word) src_ptr );
			x_debug_msg(", ram_ptr=");
			sendHexWord( (word) ram_ptr );
			x_debug_msg(", tmp=");
			sendHexWord( tmp );
			sendCrLf();
		}
#endif
		*ram_ptr++ = tmp;
		src_ptr += sizeof(word);
	}

	#if 0
	v44_check_ram();
	#endif
}

void
v44_check_ram()
{
	// Copy decoder image from V44_ROM_CODE to V44_RAM_CODE
	word i;
	word nwords = ( (word) v44_ram_end - (word) v44_ram_start)
						/ sizeof(word);
	word *ram_ptr = (word *) v44_ram_start;
	long src_adr = address_24_of(v44_ram_init_end);
	byte src_bank = src_adr >> 16;
	byte *src_ptr = (byte *) ( (word) src_adr & 0xf000 );

	x_debug_msg("v44_check_ram: nwords=");
	sendHexWord(nwords);
	x_debug_msg(", src_bank=");
	sendHexByte( src_bank );
	x_debug_msg(", src_ptr=");
	sendHexWord( (word) src_ptr );
	x_debug_msg(", ram start=");
	sendHexWord( (word) v44_ram_start);
	x_debug_msg(", ram end=");
	sendHexWord( (word) v44_ram_end);
	sendCrLf();

	for (i = 0; i < nwords; i++) {
		word tmp = dp_getROMwd( src_bank, src_ptr );
		if (*ram_ptr != tmp) {
			x_debug_msg("BAD V44 RAM src_ptr=");
			sendHexWord( (word) src_ptr );
			x_debug_msg(", ram_ptr=");
			sendHexWord( (word) ram_ptr );
			x_debug_msg(", tmp=");
			sendHexWord( tmp );
			sendCrLf();
			return;
		}
		ram_ptr++;
		src_ptr += sizeof(word);
	}
}
#endif

void
v44_init_variables ( void )
{
	byte *mem_ptr;
	byte *mem_end;

#if defined(SA_MULTI_INSTANCE)
	// Dynamic memory allocation
	if ( G(v44_en_history) != NULL ) {
		_mem_free( G(v44_en_history) );
	}
	mem_ptr = _mem_alloc( V44_MEM_SIZE );
	if( mem_ptr == NULL ) {
		printf("v44_init_vars: could not alloc, errno=0x%x\n",
			   _task_get_error() );
		_mqx_exit(0);
	}
	mem_end = mem_ptr + V44_MEM_SIZE;
#elif ( defined(WINMODEM) || defined (CLES_MODEM) )
	// Use fixed memory area
	mem_ptr = G(v44_en_mem_area);
	mem_end = mem_ptr + V44_MEM_SIZE;
#elif defined(MODEM_Z80)
	// Init code in RAM
	v44_init_ram_code();

	// Use shared mem area, defined in linker cmd file
	mem_ptr = shared_ram.v44_en_mem_area;
	mem_end = mem_ptr + V44_MEM_SIZE;
#elif defined(MODEM_ARM)
	// Use shared mem area, defined in linker cmd file
	mem_ptr = shared_ram.v44_en_mem_area;
	mem_end = mem_ptr + V44_MEM_SIZE;
#else
# error "Must define one of CS_4, MODEM_ARM, WINMODEM or MODEM_Z80"
#endif

#if defined(Z80_DEBUG_THIS_FILE)
# if defined(MODEM_Z80)
	x_debug_msg("v44_init_vars: mem_ptr=");
	sendHexWord((word)mem_ptr);
	x_debug_msg(", mem_end=");
	sendHexWord((word)mem_end);
	sendCrLf();
# elif defined(DEBUG_PRINTF)
	printf("v44_init_vars: mem_ptr=0x%x, mem_end=0x%x\n", mem_ptr, mem_end);
# endif
#endif
	if ( (mem_ptr + V44_MEM_SIZE) > mem_end ) {
		x_debug_msg("\n\n\tv44_init_vars: WARNING!!! not enough mem\n");
		#if defined(V44_TEST)
		exit(300);
		#elif defined(SA_MULTI_INSTANCE)
		_mqx_exit(0);
		#endif
	}

	memset( mem_ptr, 0, V44_MEM_SIZE );

#if defined(MODEM_Z80) || ( defined(MODEM_ARM) && !defined(CS_4) )
	// allow variable history, dictionary sizes
	G(v44_en_history) = (byte *) mem_ptr;
	mem_ptr += G(v44_en_n8) * sizeof(byte) ;

	G(v44_de_history) = (byte *) mem_ptr;
	mem_ptr += G(v44_de_n8) * sizeof(byte) ;

	#if defined(MODEM_ARM)
	// Align pointer
	while ( (uint_32) mem_ptr % sizeof(byte *) ) {
		mem_ptr++;
	}
	#endif
	G(v44_de_str_end_ptr) = (byte **) mem_ptr;
	mem_ptr += G(v44_de_n2) * sizeof(byte *) ;

	G(v44_de_str_len) = (byte *) mem_ptr;
	mem_ptr += G(v44_de_n2) * sizeof(byte) ;
	assert ( mem_ptr <= mem_end );
#else
	{
		// only static history, dictionary sizes
		V44_DATA *v44_data = (V44_DATA *) mem_ptr;
		G(v44_en_history) = &v44_data->en_history[0];
		G(v44_de_history) = &v44_data->de_history[0];
		G(v44_de_str_end_ptr) = &v44_data->de_str_end_ptr[0];
		G(v44_de_str_len) = &v44_data->de_str_len[0];
	}
#endif

	/* Initialize encoder */
	v44_encode_init () ;

	/* Initialize decoder */
	v44_decode_init () ;

	x_debug_msg("V44_init_vars complete\n");
}


#if defined(V44_DICTIONARY_AUDIT)

static void
v44_encode_audit_node( V44_TREE_NODE *node )
{
	word cw = get_node_index( node );
	byte *hist_ptr = node->hist_ptr;

	if ( get_right( node ) != NULL ) {
		V44_TREE_NODE *right_node = get_right( node );
		byte *right_hist_ptr = right_node->hist_ptr;
		// Make sure not out of order
		if ( node->len <= right_node->len ) {
			int result = memcmp ( hist_ptr, right_hist_ptr, node->len );
			if ( result > 0 ) {
				printf("v44_encode_audit_node: node %d before node %d OUT OF ORDER!!!!\n",
					   cw, get_right( node ) );
				v44_display();
				v44_encode_dump_dict();
				v44_encode_error(2);
			}
		}
		else {
			int result = memcmp ( hist_ptr, right_hist_ptr, right_node->len );
			if ( result >= 0 ) {
				printf("v44_encode_audit_node: node %d before node %d OUT OF ORDER!!!!\n",
					   cw, get_right( node ) );
				v44_display();
				v44_encode_dump_dict();
				v44_encode_error(3);
			}
		}

		// Audit right neighbor
		v44_encode_audit_node( get_right( node ) );
	}

	if ( get_child( node ) != NULL ) {
		// Audit down neighbor
		v44_encode_audit_node( get_child( node ) );
	}
}

static void
v44_encode_audit_dict()
{
	int i;

	// Audit dictionary for out-of-order nodes
	for ( i = 0; i < V44_N4; i++ ) {
		if ( G(v44_en_root)[i] != NULL ) {
			v44_encode_audit_node( G(v44_en_root)[i] );
		}
	}
}
#endif // V44_DICTIONARY_AUDIT

#if defined(WINMODEM)
// Dictionary dump utility
// should work anywhere printf returns the number of bytes printed
// (for the moment sa_printf.c returns void)
static void
v44_encode_dump_seg( V44_TREE_NODE *node, word level, word indent )
{
	word cw = get_node_index( node );
	byte *first_byte = node->hist_ptr;
	byte *last_byte = first_byte + node->len;
	byte *ptr;
	word width = 0;
	int i;
	if ( node == NULL ) {
		return;
	}

	width = printf(" -> (L%d)%d: ", level, cw);

	for ( ptr = first_byte; ptr < last_byte; ptr++ ) {
		width += printf(" %02x", *ptr );
	}
#if 0
	printf("  (");
	for ( ptr = first_byte; ptr < last_byte; ptr++ ) {
		printf("%c", isprint(*ptr) ? *ptr : '.'  );
	}
	printf(") ");
#endif

	// Dump child nodes
	if ( get_child( node ) != NULL ) {
		v44_encode_dump_seg( get_child( node ) , (word) (level + 1), indent + width );
	}

	// Dump side nodes
	if ( get_right( node ) != NULL ) {
		printf("\n");
		for ( i = 0; i < indent ; i++ ) {
			printf(" ");
		}
		v44_encode_dump_seg( get_right( node ) , level, indent );
	}
}
void
v44_encode_dump_dict()
{
	#if defined(SA_MULTI_INSTANCE)
	uint_32 saveFlag = G(InstanceFlag);
	#endif
	int i;

	// Dump the dictionary
	printf("\nV.44 Encoder Dictionary:\n");
	#if defined(SA_MULTI_INSTANCE)
	G(InstanceFlag) = 0;
	#endif
	for ( i = 0; i < V44_N4; i++ ) {
		if ( G(v44_en_root)[i] != NULL ) {
			printf(" R%02x (%c)", i, isprint(i) ? i : '.'  );
			v44_encode_dump_seg( G(v44_en_root)[i], 1, 8);
			printf("\n");
		}
	}
	#if defined(SA_MULTI_INSTANCE)
	G(InstanceFlag) = saveFlag;
	#endif
	printf("\n");
}
#endif // WINMODEM

// UNIT TEST DRIVER CODE STARTS HERE
#if defined V44_TEST
static volatile byte *verify_ptr;
static dword verify_sent_count, verify_recd_count, verify_error_count;

static void
v44_encode_test_write_dte( byte val )
{
	assert ( I(io_dte_rx_wptr) >= &io_dte_rx_buff[0] );
	assert ( I(io_dte_rx_wptr) < &io_dte_rx_buff[IO_DTE_RX_BUFF_SIZE] );
#if defined(V44_DTE_DEBUG)
		printf("v44_encode_test_write_dte: val = 0x%02x (%c)\n",  val, isprint(val) ? val : '.' );
#endif // V44_DTE_DEBUG
	// write a byte into the DTE outbound buffer,
	// will be processed as part of LAPM iframe in v44_encode()
	*I(io_dte_rx_wptr) = val;
	if ( ++I(io_dte_rx_wptr) >= I(io_dte_rx_eptr) ) {
		I(io_dte_rx_wptr) = I(io_dte_rx_sptr);
	}

	verify_sent_count++;
	assert ( I(io_dte_rx_wptr) >= &io_dte_rx_buff[0] );
	assert ( I(io_dte_rx_wptr) < &io_dte_rx_buff[IO_DTE_RX_BUFF_SIZE] );

}

// hook to allow decoder to verify output data
// against the original input

static void
v44_encode_set_verify_start()
{
	verify_ptr = (volatile byte *) I(io_dte_rx_wptr);
}

static byte
v44_encode_get_verify_byte()
{
	byte val = *verify_ptr;
	assert ( verify_ptr >= &io_dte_rx_buff[0] );
	assert ( verify_ptr < &io_dte_rx_buff[IO_DTE_RX_BUFF_SIZE] );

	if ( ++verify_ptr >= I(io_dte_rx_eptr) ) {
		verify_ptr = (volatile byte *) I(io_dte_rx_sptr);
	}

	assert ( verify_ptr >= &io_dte_rx_buff[0] );
	assert ( verify_ptr < &io_dte_rx_buff[IO_DTE_RX_BUFF_SIZE] );
	return val;
}

static void
v44_encode_test_string ( byte *ptr, word len )
{
	int bytes_remaining = (int) len;

	// Run len bytes starting at ptr through the encoder
	while ( bytes_remaining > 0 ) {

		// Send LAPM frame's worth of data into DTE buffer
		byte frame_size = ( len > LAPM_IFRAME_SIZE ) ? LAPM_IFRAME_SIZE : len;
		byte *frame_end = ptr + frame_size;
		byte *frame_ptr;
		for ( frame_ptr = ptr; frame_ptr < frame_end; frame_ptr++) {
			v44_encode_test_write_dte( *frame_ptr );
		}

		// Process the frame
#if defined(V42BIS_TEST)
		v42bis_encode();
#else
		v44_encode();
#endif

		// Advance to start of next frame
		bytes_remaining -= frame_size;
		ptr += frame_size;
	}
#if defined(V44_DTE_DEBUG)
	printf("v44_encode_test_string: encoded %d bytes\n", len);
//	v44_encode_dump_dict();
#endif // V44_DTE_DEBUG

}

static void
v44_decode_dump_string( word cw )
{
	byte *last_byte = G(v44_de_str_end_ptr)[ cw ];
	byte *first_byte = last_byte - G(v44_de_str_len)[ cw ] + 1;
	byte *ptr;
	printf("%02d: ", cw);
	for ( ptr = first_byte; ptr <= last_byte; ptr++ ) {
		printf(" %02x", *ptr );
	}
	printf("  (");
	for ( ptr = first_byte; ptr <= last_byte; ptr++ ) {
		printf("%c", isprint(*ptr) ? *ptr : '.'  );
	}
	printf(")\n");
}

static void
v44_decode_dump_string_list()
{
#if defined(SA_MULTI_INSTANCE)
	uint_32 saveFlag = G(InstanceFlag);
#endif
	word i;

	printf("V.44 Decoder String List:\n");
#if defined(SA_MULTI_INSTANCE)
	G(InstanceFlag) = 0;
#endif
	for ( i = V44_N5; i < G(v44_de_c1); i++ ) {
		// Dump the string segment
		v44_decode_dump_string( i );
	}
#if defined(SA_MULTI_INSTANCE)
	G(InstanceFlag) = saveFlag;
#endif
}

static byte
read_dte_byte()
{
	byte val = *I(io_dte_tx_rptr);
	assert ( I(io_dte_tx_rptr) >= &io_dte_tx_buff[0] );
	assert ( I(io_dte_tx_rptr) < &io_dte_tx_buff[IO_DTE_TX_BUFF_SIZE] );
	if ( ++I(io_dte_tx_rptr) >= I(io_dte_tx_eptr) ) {
		I(io_dte_tx_rptr) = I(io_dte_tx_sptr);
	}
	verify_recd_count++;
	assert ( I(io_dte_tx_rptr) >= &io_dte_tx_buff[0] );
	assert ( I(io_dte_tx_rptr) < &io_dte_tx_buff[IO_DTE_TX_BUFF_SIZE] );
	return val;
}

# if defined(V44_TEST_ENCODE_ONLY) || defined(V44_TEST_DECODE_ONLY)
FILE *out_fp;
# endif

void	// not static, also called from v42bis.c for V42BIS_TEST option
v44_decode_test( byte val )
{
	byte len;
	// Decode loop back unit test driver start here
	// Call by either V44 or V42_BIS with bytes that
	// would have been written to LAPM.

# if defined(V44_TEST_ENCODE_ONLY)
	// Push the byte to local file output instead of decoding
	putc(val, out_fp);
# endif // !V44_TEST_ENCODE_ONLY

	// Take bytes written to LAPM buffer by v44_encode
	// and play back into the decoder
#if defined(V42BIS_TEST)
	len = v42bis_decode( &val, IO_DTE_TX_BUFF_SIZE, 1 );
#else
	len = v44_decode( &val, IO_DTE_TX_BUFF_SIZE, 1 );
#endif
	if ( len > 0 ) {
		printf("v44_decode_test: %d bytes not processed by v44_decode!!!!!\n", len);
	}

	// Check data that shows up in DTE buffer against original input
	while ( I(io_dte_tx_rptr) != G(lapm_dte_wptr) ) {
		byte val = read_dte_byte();
		byte orig = v44_encode_get_verify_byte();
		if ( val != orig  ) {
			printf("\ndecode_test: OUTPUT = 0x%02x DID NOT MATCH INPUT = 0x%02x!!!!!!\n",
				   val, orig );
			v44_display();
			#if defined(V44_DTE_DEBUG)
			v44_encode_dump_dict();
			v44_decode_dump_string_list();
			#endif // V44_DTE_DEBUG
			verify_error_count++;
			exit(99);
		}
		else {
			#if defined(V44_DTE_DEBUG)
			printf("decode_test: found DTE byte 0x%02x (%c)\n", val, isprint(val) ? val : '.' );
			#endif // V44_DTE_DEBUG
		}
	}
}

static char buf[BUFSIZ];
static int fcount = 0;

static void
v44_test_file( char *fname )
{
#if defined( V44_TEST_ENCODE_ONLY ) || defined( V44_TEST_DECODE_ONLY )
	char out_file[FILENAME_MAX];
#endif // ENCODE_ONLY || DECODE_ONLY
	int n;
	int fd = open(fname, O_RDONLY | O_BINARY, 0);
	if ( fd < 0 ) {
		printf("v44_test_file: cannot open %s\n", fname );
		return;
	}
	printf("v44_test_file: reading input from %s\n", fname );

#if defined( V44_TEST_ENCODE_ONLY ) || defined( V44_TEST_DECODE_ONLY )
	strcpy( out_file, fname );
# if defined( V44_TEST_ENCODE_ONLY )
	strcat( out_file, ".z" );
# else
	strcat( out_file, ".d" );
# endif
	out_fp = fopen( out_file, "wb" );
	if ( out_fp == NULL ) {
		printf("v44_test_file: cannot open %s\n", out_file );
		return;
	}
	printf("v44_test_file: writing output to %s\n", out_file );
//	v44_init_variables();
#endif // ENCODE_ONLY || DECODE_ONLY


#if defined( V44_TEST_DECODE_ONLY )
	while ( (n = read( fd, buf, BUFSIZ) ) > 0 ) {
		byte *buf_ptr = buf;
		while ( buf_ptr < &buf[n] ) {
#if defined(V44_DTE_DEBUG)
			printf(">%02x\n", *buf_ptr);
#endif
			v44_decode( buf_ptr++, IO_DTE_TX_BUFF_SIZE, 1 );
			// Pull data out of DTE buffer
			// Write to output file
			while ( I(io_dte_tx_rptr) != G(lapm_dte_wptr) ) {
				byte val = read_dte_byte();
				putc( val, out_fp );
			}
		}
	}

#else	// !DECODE_ONLY (normal operation)

	while ( (n = read( fd, buf, BUFSIZ) ) > 0 ) {
		v44_encode_test_string( (byte *) buf, (word) n );
	}
# if defined(V42BIS_TEST)
//	printf("v44_test_file: fcount = %d\n", fcount++);
	v42bis_flush();
	v42bis_display();
# else
//	printf("v44_test_file: fcount = %d\n", fcount++);
	v44_encode_flush();
	v44_display();
# endif	// V42BIS_TEST

	printf("v44_test: DTE sent %d bytes, DTE rec'd %d bytes, %d errors\n",
		verify_sent_count,
		verify_recd_count,
		verify_error_count );
#endif // !DECODE_ONLY

	printf("v44_test_file: %s complete\n\n", fname);
	close(fd);
#if defined( V44_TEST_ENCODE_ONLY ) || defined( V44_TEST_DECODE_ONLY )
	fflush( out_fp );
	fclose( out_fp );
#endif // ENCODE_ONLY || DECODE_ONLY
}

typedef struct v44_test_params {
	word p1t;	// Number of code words
	word p2t;	// Max string length
	word p3t;	// History size
	word p1r;	// Number of code words
	word p2r;	// Max string length
	word p3r;	// History size
} V44_TEST_PARAMS;

static V44_TEST_PARAMS v44_param_table[] = {
		// P1T, P2T, P3T, P1R, P2R, P3R
		{ 1024,	255, 5*1024, 1024, 255, 4*1024 }, // MODEM_Z80 default settings
		{ 1024,	255, 512, 1962, 255, 5890 }, // MODEM_Z80	optimized for decoder
		{ 2048,	255, 11008, 256, 255, 512 }, // MODEM_Z80	optimized for encoder
		{ 1024,	140, 5*1024, 1024, 140, 4*1024 }, // MODEM_Z80 w/ Conexant
		{ 1024,	142, 5*1024, 1024, 142, 4*1024 }, // MODEM_Z80 w/ Cisco
		{ 2*1024-1, 255, 16*1024-1, 2*1024-1, 255, 16*1024-1 },	// CLES_MODEM
		{ 32*1024-1, 255, 64*1024-1, 32*1024-1, 255, 64*1024-1 }, // WINMODEM
		{ 4*1024-1, 255, 32*1024-1, 4*1024-1, 255, 16*1024-1 }, // CS_4
		{ 0, 0, 0, 0, 0, 0 }
};

void
v44_test( char *listfile )
{
	FILE *fp;
	char fname[FILENAME_MAX];
	V44_TEST_PARAMS *param_ptr = v44_param_table;

	// Get file with list of test files
	printf("Getting file list from %s\n", listfile == NULL ? "STDIN" : listfile );
	fp = ( listfile == NULL ) ? stdin : fopen( listfile, "r" );
	if ( fp == NULL ) {
		printf("v44_test: cannot open %s\n", listfile );
		exit(1);
	}

	for( param_ptr = v44_param_table; param_ptr->p1t != 0; param_ptr++ ) {
		// UNIT TESTING INIT ONLY!!!!!!!!
		// LAPM iframe buffer
		memset( &LTF[0], 0, sizeof(LTF) );
		G(lapm_iframe_ptr) = &LTF [0] ;
		G(lapm_data_ptr) = &(G(lapm_iframe_ptr)->data[3]) ;

		// DTE buffers
		memset ( (void *) io_dte_rx_buff, 0, IO_DTE_RX_BUFF_SIZE );
		I(io_dte_rx_sptr) = io_dte_rx_buff ;
		I(io_dte_rx_eptr) = io_dte_rx_buff + IO_DTE_RX_BUFF_SIZE ;
		I(io_dte_rx_wptr) = I(io_dte_rx_sptr) ;
		I(io_dte_rx_rptr) = I(io_dte_rx_sptr) ;
		memset ( (void *) io_dte_tx_buff, 0, IO_DTE_TX_BUFF_SIZE );
		I(io_dte_tx_sptr) = io_dte_tx_buff ;
		I(io_dte_tx_eptr) = io_dte_tx_buff + IO_DTE_TX_BUFF_SIZE ;
		I(io_dte_tx_wptr) = I(io_dte_tx_sptr) ;
		I(io_dte_tx_rptr) = I(io_dte_tx_sptr) ;

		// LAPM pointer to DTE buffer
		G(lapm_dte_wptr) = (byte *) I(io_dte_tx_wptr) ;	// dte transmit buffer
		v44_encode_set_verify_start();

		// Parameter initialization
		printf("======================================================\n");
		v44_set_params( param_ptr->p1t, param_ptr->p1r, (byte) param_ptr->p2t,
			(byte) param_ptr->p2r, param_ptr->p3t, param_ptr->p3r);

		// Make sure encoder does not use too much history in decoder
		if ( G(v44_en_n8) > G(v44_de_n8) ) {
			// v44_set_max_history( ENCODER, G(v44_de_n8) );
			G(v44_en_n8) = G(v44_de_n8);
		}

		printf("RUNNING PARAMS en_n2=%d, en_n7=%d, en_n8=%d, de_n2=%d, de_n7=%d, de_n8=%d\n", G(v44_en_n2), G(v44_en_n7), G(v44_en_n8), G(v44_de_n2), G(v44_de_n7), G(v44_de_n8));
		v44_init_variables();
	#if defined(V42BIS_TEST)
		G(v42bis_P0) = ENCODER | DECODER ;
		G(v42bis_N2) = V42bisP1 ;
		G(v42bis_N7) = V42bisP2 ;
		G(lapm_n401) = LAPM_IFRAME_SIZE;
		v42bis_init_variables();
	#endif	// V42BIS_TEST


	//	Don't use scanf, it doesn't handle spaces in the file name
	//	while ( fscanf( fp, "%s\n", fname) != EOF ) {
		while ( fgets( fname, sizeof(fname), fp ) != NULL ) {
			//printf("Found file name %s\n", fname);
			// Skip comment lines.....
			if ( fname[0] != '#' ) {
				// Get rid of \n included by fgets
				fname[ strlen(fname) - 1 ] = '\0';
				v44_test_file( fname );
			}
		}
		printf("v44_test: DTE sent %d bytes, DTE rec'd %d bytes, %d errors\n",
			verify_sent_count,
			verify_recd_count,
			verify_error_count );

		// Only once through from stdin, cannot rewind
		if ( fp == stdin ) {
			break;
		}

		// Start at beginning of file list for each set of params
		rewind(fp);
	}

	fclose(fp);
	exit(0);
}

int
main( int argc, char *argv[ ] )
{
	v44_test( argv[1] );
	return 0;

}
byte x_parity ( byte tx_char ) { return 0; }
#if defined(WINMODEM)
void x_debug_msg ( char *msg ) { printf ("%s\n", msg ); }
void sendCrLf() { printf("\n"); }
void sendDecByte( byte val ) { printf ("%d", val); }
void sendHexByte( byte val ) { printf ("%x", val); }
void sendHexWord( word val ) { printf ("%x", val); }
void send_debug_char( byte c ) { printf ("%c", c); }
#endif
#endif // V44_TEST


#if defined(V44_LOCAL_LOOP)
void
v44_decode_test( byte val)
{
	byte len;
	G(lapm_dte_wptr) = (byte *) I(io_dte_tx_wptr) ;	// dte transmit buffer
	len = v44_decode( &val, IO_DTE_TX_BUFF_SIZE, 1 );
	I(io_dte_tx_wptr) = G(lapm_dte_wptr) ;	// save dte transmit buffer pointer
	if ( len > 0 ) {
		#if defined(MODEM_Z80)
		x_debug_msg("bytes not proc'd");
		#else
		printf("v44_decode_test: %d bytes not processed by v44_decode!!!!!\n", len);
		#endif
	}

}
#endif // V44_LOCAL_LOOP

#endif // V44

#if defined(WINMODEM)
# pragma warning( pop )
#endif	// WINMODEM

//msm:begin//
//
// moved code definitions for the silly psuedo inline stuff here
//

#if defined(RISCOS)

byte valid_node_ptr( V44_TREE_NODE *node_ptr )
{
	return ( node_ptr >= ( FIRST_NODE_PTR - V44_P1T + 1 ) &&
			 node_ptr <= FIRST_NODE_PTR );
}

byte valid_cw( word cw )
{
	return ( cw >= V44_N5 && cw < V44_P1T );
}

V44_TREE_NODE *get_child( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	return node_ptr->down;
}

V44_TREE_NODE *get_right( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	return node_ptr->right;
}

void set_child( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	assert ( valid_node_ptr( cw_ptr ) );
	node_ptr->down = cw_ptr;
}

void set_right( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	assert ( valid_node_ptr( cw_ptr ) || cw_ptr == NULL );
	node_ptr->right = cw_ptr;
}

word get_node_index( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );

	// Given a pointer into G(v44_en_tree)[],
	// return the corresponding index (codeword)
	// Assume starting from highest address first
	// but cannot use cw 0 (corresponding to node_ptr == NULL)
	return (FIRST_NODE_PTR - node_ptr) + ( V44_N5 - 1 );
}

V44_TREE_NODE *get_node_ptr( word cw )
{
	assert ( valid_cw( cw ) );

	// Given a codeword (index into G(v44_en_tree)[])
	// return the corresponding node pointer
	// Assume starting from highest address first
	// but cannot use cw 0 (corresponding to node_ptr == NULL)
	return (FIRST_NODE_PTR - cw) + ( V44_N5 - 1 );
}

void v44_encode_write_lapm( byte val )
{
# if defined(V44_LOCAL_LOOP)
	v44_decode_test(val);	// hair pin loop back
# else
	#if defined(V44_LAPM_DEBUG)
	printf("v44_encode: %s: LAPM byte=%02x\n", G(v44_en_transparent) ? "TM" : "CM",
		val );
	#endif // V44_LAPM_DEBUG

	#if defined(V44_TEST)
	// For unit testing purposes,
	// Push the value back into the decoder 
	v44_decode_test( val );
	#else
	// Write val to LAPM buffer
	*G(lapm_data_ptr)++ = val;
	G(lapm_iframe_ptr)->len++ ;
	#endif // V44_TEST
# endif
}

void write_dte_byte( byte val )
{
#if defined(V44_DECODE_DEBUG)
	//printf("write_dte_byte: DTE write %02x (%c)\n", val, isprint(val) ? val : '.' );
#endif // 

	assert ( G(lapm_dte_wptr) >= &io_dte_tx_buff[0] );
	assert ( G(lapm_dte_wptr) < &io_dte_tx_buff[ IO_DTE_TX_BUFF_SIZE ] );

	// Normal operation
	// Write a byte to the DTE ring buffer
	*G(lapm_dte_wptr) = val ;
	if ( ++G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )
		G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);

	assert ( G(lapm_dte_wptr) >= &io_dte_tx_buff[0] );
	assert ( G(lapm_dte_wptr) < &io_dte_tx_buff[ IO_DTE_TX_BUFF_SIZE ] );
}

#endif

//msm:end//
