/*name and version number:@(#)arm_int.c	1.1*/
/*date of get: 		  01/12/01 11:49:19*/
/*date of delta:	  01/12/01 11:24:59*/
 
/*******************************************************************************
 * Copyright (c) 2000 Vitana Corporation.
 * Copyright (c) 2000 Lucent Technologies Inc.
 * 
 ******************************************************************************/
 

/******************************************************************************
 *
 * File:     $RCSfile$
 *
 * Description: This file contains the ARM code that will be called by
 *              the CPU when any of the interrupts happen.                      
 *
 * Revision: $Revision$
 * Date:     $Date$
 * Author:   $Author$
 *
 */

#include "llglob_d.h"
#include "arm_glob.h"
#include "dpglob.h"
#include "allglobs.h"


#if 0
/*
 * pull in our USB Interrupt handler 
 */
#ifndef USBHAND_H
#include "UsbHand.h"
#endif
#endif // 0


#pragma Off(Thumb)

static void arm_irq (void);

/*
 * unused interrupt vector handlers & setup
 */ 
//void cVectorUndefined (void)
void 
_CC(_INTERRUPT) cVectorUndefined (void)
{
	loop:    
	goto loop;
}

//void cVectorSWI (void)
void
_CC(_INTERRUPT) cVectorSWI (void)
{
	loop:    
	goto loop;
}

//void cVectorPrefetch (void)
void 
_CC(_INTERRUPT) cVectorPrefetch (void)
{
	loop:    
	goto loop;
}

//void cVectorAbort (void)
void 
_CC(_INTERRUPT) cVectorAbort (void)
{
	loop:
	goto loop;
}

//void cVectorNone (void)
void 
_CC(_INTERRUPT) cVectorNone (void)
{
	loop:    
	goto loop;
}

//void cVectorFIQ (void)
void 
_CC(_INTERRUPT) cVectorFIQ (void)
{
	loop:    
	goto loop;
}




/*
 * Our USS-820 Interrupt handler 
 */
extern void ThumbCVectorIRQ (void);

//__irq void cVectorIRQ (void)
_CC(_INTERRUPT) cVectorIRQ (void)
{
	arm_irq();
}



/**********************************************************************
 *
 * Name: ThumbCVectorIRQ
 *
 * Description: This function handles all interrupts from coming to the
 *              ARM cpu and invokes the appropriate device interrupt
 *              handler.
 *
 * Arguments: N/A
 *
 * Returns: N/A
 *
 */ 

static void arm_stray_isr( dword who)
{
	printf( "Other Interrupt source???? who=0x%04x\n", who);
}

static PFVD arm_isr_table[] = {
//	ISR func,	IRQ #
	arm_stray_isr,	// 0
	arm_stray_isr,	// 1
	dp_dsp_isr,	// 2
	arm_stray_isr,	// 3
	arm_stray_isr,	// 4
	arm_stray_isr,	// 5
	arm_stray_isr,	// 6
	arm_stray_isr,	// 7
	arm_stray_isr,	// 8
	arm_stray_isr,	// 9
	arm_stray_isr,	// 10
	arm_stray_isr,	// 11
	arm_timer0_isr,	// 12
	arm_stray_isr,	// 13
	arm_stray_isr,	// 14
	arm_stray_isr,	// 15
	arm_stray_isr,	// 16
	arm_stray_isr,	// 17
	arm_stray_isr,	// 18
	arm_stray_isr,	// 19
	arm_stray_isr,	// 20
	arm_stray_isr,	// 21
	arm_stray_isr,	// 22
	arm_stray_isr,	// 23
	arm_stray_isr,	// 24
	arm_stray_isr,	// 25
	arm_stray_isr,	// 26
	arm_stray_isr,	// 27
	arm_stray_isr,	// 28
	arm_stray_isr,	// 29
	arm_stray_isr,	// 30
	arm_stray_isr,	// 31
};

// External interface to query or install irq handler in the table
PFVD
arm_get_isr( dword irq )
{
	return arm_isr_table[ irq ];
}

void
arm_set_isr( dword irq, PFVD isr )
{
	arm_isr_table[ irq ]  = isr;
}


static void
arm_irq (void)
{
	dword iis;

	/*
	 * Check the interrupt source & branch accordingly
	 */
	while ( (iis = ( ( PIC_Ptr->PIC_ISIRQ >> 2) & 0x1f ) ) != 0 ) {
		arm_isr_table[iis]( iis );
		PIC_Ptr->PIC_INT_REQ_SRC_CLEAR = 1 << iis;  // clear the source (irq1)
	}
}

void
arm_irq_disable_all()
{
	// Disable all IRQ sources
    PIC_Ptr->PIC_INT_REQ_ENAB_CLEAR = 0xFFFFFFFF;

	// Disable all priority levels
    PIC_Ptr->PIC_IPE_CLEAR = 0xFFFFFFFF;
}
void
arm_init_usb_irq(void)
{
    /*
     * Set the top priority for our USS820 interrupt
     */
    PIC_Ptr->PIC_IPCR_1 = PIC_IPCR_IRQ1 | PIC_IPCR_TYP_IRQ;

    /*
     * Set external interrupt IRQ1
     */
    PIC_Ptr->PIC_INT_REQ_ENAB_SET = PIC_INT_REQ_ENAB_E1;

	// Enable priority level 1
    PIC_Ptr->PIC_IPE_SET = PIC_IPE_E1;

	// Configure external interrupt pin
    PIC_Ptr->PIC_EXT_INT_1CR = PIC_EXT_INT_ENA_ON |
        PIC_EXT_INT_SEN_LEVEL |
        PIC_EXT_INT_POL_LOW;
}
void
arm_init_dsp_irq(void)
{
    /*
     * Set the priority for DSP interrupt to Priority level 2
     */
    PIC_Ptr->PIC_IPCR_2 = PIC_IPCR_IRQ2 | PIC_IPCR_TYP_IRQ;

    /*
     * Set external interrupt 2
     */
    PIC_Ptr->PIC_INT_REQ_ENAB_SET = PIC_INT_REQ_ENAB_E2;

	// Enable priority level 2
    PIC_Ptr->PIC_IPE_SET = PIC_IPE_E2;

	// Configure external interrupt pin
    PIC_Ptr->PIC_EXT_INT_2CR = PIC_EXT_INT_ENA_ON |
        PIC_EXT_INT_SEN_LEVEL |
        PIC_EXT_INT_POL_LOW;    
}
void
arm_init_timer_irq(void)
{
    /*
     * Set our timer interrupt to priority level 3
     */
    PIC_Ptr->PIC_IPCR_3=PIC_IPCR_IRQ12 | PIC_IPCR_TYP_IRQ;      // set priority 1 to be IRQ13 (RTC)

    /*
     * Enable timer IRQ12
     */
    PIC_Ptr->PIC_INT_REQ_ENAB_SET = PIC_INT_REQ_ENAB_E12;

	// Enable Priority Level 3
    PIC_Ptr->PIC_IPE_SET = PIC_IPE_E3;
}
