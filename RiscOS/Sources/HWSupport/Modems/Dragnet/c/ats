/*name and version number:@(#)ats.c	1.130*/
/*date of get: 		  01/12/01 11:49:12*/
/*date of delta:	  01/11/01 13:13:46*/
/****************************************************************
File : ats.c
Description :
	This file contailns all the S register command codes

Procedures Contained :
	at_s
	at_Srange
	at_getReadOnlySReg
*****************************************************************/
#include "llglob_d.h"
#include "atglob.h"
#if defined(THUNDER)
# include "z80glob.h"
#endif
#include "allglobs.h"

/****************************************************************
Routine : at_Srange
Description :
	Check the value of S registers. If it is within
	the proper range, set the new value.

	This only works for byte values of registers and their values.
*****************************************************************/
void at_Srange(byte reg, byte val)
{
	byte minn, maxx;

	minn = 0;
	maxx = 255;

	switch ( reg )
	{
	case 0:	// AutoAnswer (after this many rings)
		// Auto Answer Ring Number
		minn = G(S).ModemOptions.MinAutoAnsRingCount ;
		maxx = G(S).ModemOptions.MaxAutoAnsRingCount ;
		if ( val == 0 )
			minn = 0 ;
		break ;
	case 1:	// RingCount - # rings detected, read only
		return;
	case 2:	// EscapeChar
	case 3:	// CRChar
	case 4:	// LFChar
		maxx = 127 ;
		break ;
	case 5:	// BSChar
		maxx = 32;
		if (val == 127)	// DEL character
		{
			G(S).ModemOptions.BSChar = 127;
			return;
		}
		break;
	case 6:	// BlindDialPause
		minn = G(S).ModemOptions.MinBlindDialPause ;
		if ( G(S).ModemOptions.MaxBlindDialPause < 66 ) 
			maxx = G(S).ModemOptions.MaxBlindDialPause ;
		else
			maxx = 65 ; 
		break ;
	case 7:	// NoAnsTimeOut
		// Connection Completion Time-Out
		minn = G(S).ModemOptions.MinNoAnsTimeOut;
		maxx = G(S).ModemOptions.MaxNoAnsTimeOut;
		break ;
	case 8:	// DialPauseTime (for "," character, in seconds)
		// Comma Dial Modifier Time
		minn = G(S).ModemOptions.MinDialPauseTime ;
		if ( G(S).ModemOptions.MaxDialPauseTime < 66 )
			maxx = G(S).ModemOptions.MaxDialPauseTime ;
		else
			maxx = 65 ; 
		break ;
	case 10:	// NoCarrierDisc - no carrier disconnect delay (1/10 seconds)
		minn = G(S).ModemOptions.MinNoCarrierDisc ;
		maxx = G(S).ModemOptions.MaxNoCarrierDisc ;
		break;
	case 11:	// DtmfDialSpeed - DTMF dialing speed (milliseconds)
		minn = G(S).ModemOptions.MinDtmfDialSpeed ;
		maxx = G(S).ModemOptions.MaxDtmfDialSpeed ;
		break ;
#if defined(CS_V110)
	case 17:
		maxx = 69;	// max v.110 rate of 56k
		break;
#endif
	case 28:	// bV34Enable - V.34 modulation:  0=disable, 1=enable
		maxx = 1 ;
		break ;
	case 33:	//SynRingFreq - synthetic ring frequency
		maxx = 5;
		break ;
#if defined(THUNDER)
	case 34:	// MimicFIFOrate - set delay rate for MIMIC
		if ( z80_modem_type != EXT_INTERFACE )
			maxx = 1 ;
		break ;
#elif !defined(EXT_MODEM)
	case 34:	// MimicFIFOrate - set delay rate for MIMIC
		maxx = 1 ;
		break ;
#endif
	case 35:	// DataCallingTone
		if ( G(S).ModemOptions.CallingToneFlag == 1 )
		{
			maxx = 1 ;
		}
		else
		{
			// do not update data calling tone if not allowed
			return ;
		}
		break ;
	case 36:	// NegotiationFallback
		maxx = 7 ;
		break ;
	case 37 : // DialLineRate  (V.34 and below)
		maxx = 19;		// max is 33,600 bps for V.34

		// reserved line speeds...
		if ( (val == 1) || (val == 4) )
			return;
		break ;
	case 40:	// ETC
		maxx = 4;
		break ;
	case 42:	// AutoRate
	case 43:	// AutoMode
		maxx = 1 ;
		break;

	case 48:	// FeatureNegotiation
		// LAPM Error Control and Feature Negotiation
		if (7 != val && 128 != val)
			return;

		#define ATNEGEN (G(x_scratch)[0])	// AT feature NEGotiation ENabled

		ATNEGEN = 1;
		if (128 == val)
			ATNEGEN = 0;		// "negotiation disabled" see AT cmd doc

		switch(G(S).ModemOptions.NegotiationFallback)
		{
		case 0:
		case 2:
			if (ATNEGEN)
				G(S).ModemOptions.V42 = V42_LAPM_ONLY;
			else
				return;	// invalid
			break;
		case 1:
		case 3:
			if (ATNEGEN)
				G(S).ModemOptions.V42 = V42_LAPM_BUFFER;
			else
				G(S).ModemOptions.V42 = V42_BUFFER_MODE;
			break;
		case 4:
		case 6:
			if (ATNEGEN)
				G(S).ModemOptions.V42 = V42_LAPM_MNP_DISC;
			else
				G(S).ModemOptions.V42 = V42_MNP_DISC;
			break;
		case 5:
		case 7:
			if (ATNEGEN)
				G(S).ModemOptions.V42 = V42_LAPM_MNP_BUFFER;
			else
				G(S).ModemOptions.V42 = V42_MNP_BUFFER;
			break;
		}
		break;
	case 24:	// Dummy24 - copy of S89
	case 89:	// SleepModeTimer
		maxx = 65 ;

		if ( (val >=1) && (val<=4) )
			val = 5 ;

		break ;
	case 91:	// TransmitLevel
		if ( G(S).ModemOptions.CountryId == JAPAN ) 
		{
			maxx = 15;
			minn = 6;
		}
		else
			return;		// effective only for Japan
		break ;
	}

	if ( val < minn )
		val = minn;		// limit to not below minimum
	if ( val > maxx )
		val = maxx;		// limit to not above maximum

	// Update the S register with user specified value
    if ( ((reg<=43)||(reg==89) || ((reg>=91)&&(reg<=129)))
		 && (reg!=14)
		 && (reg!=22))
	{
		G(S).Reg[reg] = (byte) val;
	}

	if (reg==24)    // S24 also goes to S89
		G(S).ModemOptions.SleepModeTimer = (byte) val;

	if (reg == 91)
	{
		// TransmitLevel - also copy to TxLevel
		G(S).ModemOptions.TxLevel = G(S).Reg[reg] ;
	}

#if defined(VENUS_AT_CS) || defined(CS_MODEM) || defined(VPCM_SERVER)
	if (reg == 108)		// DigitalLoss56K
	{
		if ( G(S).ModemOptions.DigitalLoss56K & 1 )
			x_send_mail ( A_LAW_SELECTED, DP_TASK, 0, 0 ) ;
		else
			x_send_mail ( MU_LAW_SELECTED, DP_TASK, 0, 0 ) ;
	}
#endif	// central site
}

byte at_getReadOnlySReg(byte s_reg);

/****************************************************************
Routine : at_s
Description :
	Deal with setting and retrieving S register values.
	"ATSxxx"

*****************************************************************/
void at_s(void)
{
	word s_regword, s_val;
	byte s_reg, s_valbyte, len, i, txchar[10];

	len = (byte) at_atoi(G(at_cmd_ptr), &s_regword, DECIMAL);
	if (len == 0)
		s_regword = 0 ;
	if (s_regword > 129)
	{
		at_cmd_err_ret();
		return;
	}
	s_reg = (byte) s_regword;
	G(at_cmd_ptr) = G(at_cmd_ptr) + len;

	switch (*G(at_cmd_ptr)++)
	{
	case '?' :
		// User wants to retrieve the value of an S-register...
		if ((s_reg<=43)||
			(s_reg==48)||
			(s_reg==56)||
			((s_reg>=89) && (s_reg<=129)))
		{
			if((s_reg==21) || (s_reg==24))  // read only registers
				s_valbyte = at_getReadOnlySReg(s_reg);
			else
				s_valbyte = G(S).Reg[s_reg]; // normal register read
		}
		else
		{
			s_valbyte = 0;
		}

		// convert value to ASCII
		len = (byte) at_itoa((word) s_valbyte, txchar, DECIMAL);

		// pad with leading '0's
		for (i=0; i < len; i++)
			txchar[3-i-1] = txchar[len-i-1];
		for (i=0; i < (3-len) ; i++)
			txchar[i] = '0';

		if (95 == s_reg)
		{
			// Special case for S95, 16 bit value could be more
			// than 3 ASCII characters.
			len = (byte) at_itoa(G(S).ModemOptions.wHayes95 , txchar, DECIMAL);
			at_output_msg(txchar, len);
		}
		else
			at_output_msg(txchar, 3);	// s-value is 3 chars
		break;

	case '=' :
		// User wants to set the value of an S-register...
		len = (byte) at_atoi(G(at_cmd_ptr), &s_val, DECIMAL);
		if (len)
		{
			G(at_cmd_ptr) += len ;
			if (95 == s_reg)
			{
				// Special case for S95, it's a word, not a byte.
				if (s_val > 4095)
					s_val = 4095;

				// copy the whole 16-bit value for S95
				G(S).ModemOptions.wHayes95 = s_val;
			}
			else
			{
				if (s_val > 255)
					s_val = 255;	// at_Srange only deals with bytes.

				// Validate and set the new register value...
				at_Srange(s_reg, (byte) s_val);
			}
		}
		else
		{
			at_cmd_err_ret();		// tried to set non-value.
			return;
		}
		break;

	default  :
		G(at_cmd_ptr)--;
		break;
	}
	atparse_cmd() ;
}

/****************************************************************
Routine : at_getReadOnlySReg
Description :
	get value for read-only S registers

*****************************************************************/
byte at_getReadOnlySReg(byte s_reg)
{
    byte val = 0;

    switch (s_reg)
    {
	case 21:	// V.24/General Bit Mapped Options
		if (G(S).ModemOptions.CDControl == 1)
			val = 0x20 ; //sets bit 5 of S21
		switch (G(S).ModemOptions.DTRControl)
		{
		case 1:
			val |= 0x08 ; //sets bit 3 of S21
			break;
		case 2:
			val |= 0x10 ; //sets bit 4 of S21
			break;
		case 3:
			val |= 0x18 ; //sets bits 3 and 4 of S21
			break;
		}
		break;
	case 24:	// Timer to Control Sleep Mode - copy from S89
		val = G(S).ModemOptions.SleepModeTimer; // S89
		break;
    }
    return val;
}
