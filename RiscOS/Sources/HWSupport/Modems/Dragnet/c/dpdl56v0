/*name and version number:@(#)dpdl56v0.c	1.16*/
/*date of get: 		  12/15/00 10:10:25*/
/*date of delta:	  11/30/00 16:56:49*/
/****************************************************************
File :  dpdsp56v.c
Description :
	Venus K56 Erom download

Procedures Contained :
		dp_download_K56Erom()

Revision History :
	Initials    Date        Change
		GLIU	3/10/97		created
*****************************************************************/

#include "llglob_d.h"

#if defined(K56FLEX)
#include "dpglob.h"
#include "z80glob.h"
#include "z80flash.h"

#if defined(VENUS_AT_CS) || defined(CS_MODEM)
#include "dp56vd0.h"
#else
#include "dp56ve0.h"
#endif
#include "allglobs.h"

#if defined(COMPRESS_TABLES)
extern const word wK56EROM1[] ;
extern const word wK56EROM2[] ;
#else
extern const word wK56EROM1[ (12*1024)>>1 ] ;
extern const word wK56EROM2[ (8*1024)>>1  ] ;
#endif

void dp_download_K56EROM ( void )
{
    if( !G( dp_daa_is_perseus ))
    {
#if !defined(VENUS_AT_CS) && !defined(CS_MODEM)
	word i;
#endif

#if !defined(VENUS_AT_CS) && !defined(CS_MODEM)
#if defined(EXTRA_REGWRITE_DSP_DEBUGGING)
	byte nowPrinting = G(dp_within_write_ram);
	if (G(dp_print_regwrites))
	{
		DP_WITHIN_WRITE_RAM(1);
	}
#endif
	// Initialize RAM.  This is needed for client. (was 0x1f00 - 0x2800)
	for (i=0x1800; i<0x2800; i++)
	{
		dp_write_dsp_ram(i, 0);
	}
	DP_WITHIN_WRITE_RAM(0);
#endif

	// Download to DSP External RAM
	DOWNLOAD_DSPk56(wK56EROM0, BBR0);
	DOWNLOAD_DSPk56(wK56EROM1, BBR1);
	DOWNLOAD_DSPk56(wK56EROM2, BBR2);

	// Download to DSP Internal RAM
	dp_download_K56VenWk();

	#if defined(CS_4)
	//---------------------------------------
	// For CS-4 Kflex, change ROM callback
	// (e.g. patch the patch)
	//---------------------------------------
	printf("K56 patch at 0xb410=0x66f7\n");
	dp_write_dsp_ram(0xb410, 0x66f7);
	// Download CS-4 workaround for QMP RX driver
	sa_dspInitQMP( K56_MODE );
	#endif

	// This lets the DSP access the RAM
	// with its code and data pointers going
	// to where we have RAM set up.
	DP_WRITE_XYPAGE();
	DP_WRITE_IOC();
    }
}
#endif
