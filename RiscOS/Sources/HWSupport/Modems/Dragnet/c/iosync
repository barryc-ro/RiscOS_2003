/*name and version number:@(#)iosync.c	1.59*/
/*date of get: 		  09/06/00 16:59:16*/
/*date of delta:	  04/04/00 13:52:47*/
/****************************************************************
File :	iosync.c
Description :
	Contains all background functions related to V.80 (V.ib)

Procedures Contained :
	io_sync_power_up_init
	io_sync_init
	io_sync_disconnect
	io_sync_background

Revision History :
	Initials	Date		Change
	A.Cheng 	02/21/96	inital v80 sync background
*****************************************************************/

#include "llglob_d.h"

#ifdef V80

#include "sync.h"
#include "ioglob_d.h"
#include "iouart_d.h"
#include "dpglob.h"
#include "allglobs.h"

/****************************************************************
Routine : io_sync_power_up_init
Description :
	init v.80 variables at power-up, at&f, atz commands
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void io_sync_power_up_init ( void )
{
	G(V80_Options).TransIdle = 0;		// trans idle enable
	G(V80_Options).FrameIdle = 0;		// frame idle disabled
	G(V80_Options).FrameUnder = 99;	// frame underrun disabled
	G(V80_Options).HalfDuplex = 99;	// half duplex mode disabled
	G(V80_Options).CrcType = 0;		// crc generation disabled
	G(V80_Options).NrziEn = 0; 		// nzri encoding disabled
	G(V80_Options).Sync1 = 99;			// synchronization sequence disabled
	G(V80_Options).Sync2 = 99;			// synchronization sequence disabled
	G(V80_Options).Xoff = 1024;		// Xoff default
	G(V80_Options).Xon = 256;			// Xon default

	G(v80_tx_timer) = 0 ;
	G(v80_rx_timer) = 0 ;
	G(v80_retrain) = FALSE ;
}

/****************************************************************
Routine : io_sync_send_EM_flag
Description :
	send EM flag to the DTE
*****************************************************************/
void io_sync_send_EM_flag ( void )
{
	io_put_dte_tx_char ( EM );
	io_put_dte_tx_char ( EM_FLAG );
}

/****************************************************************
Routine : v80_connect_rate_conversion
Description :
*****************************************************************/
byte v80_connect_rate_conversion ( MODEM_LINE_RATE connect_rate )
{
	byte rate;

	switch (connect_rate)
	{
		case MR_1200 :
			rate = P12;
			break;
		case MR_2400 :
			rate = P24;
			break;
		case MR_4800 :
			rate = P48;
			break;
		case MR_7200 :
			rate = P72;
			break;
		case MR_9600 :
			rate = P96;
			break;
		case MR_12000 :
			rate = P120;
			break;
		case MR_14400 :
			rate = P144;
			break;
		case MR_16800 :
			rate = P168;
			break;
		case MR_19200 :
			rate = P192;
			break;
		case MR_21600 :
			rate = P216;
			break;
		case MR_24000 :
			rate = P240;
			break;
		case MR_26400 :
			rate = P264;
			break;
		case MR_28800 :
			rate = P288;
			break;
		case MR_31200 :
			rate = P312;
			break;
		case MR_33600 :
		default :
			rate = P336;
			break;
	}
	return rate;
}

/****************************************************************
Routine : io_sync_send_connect_msg
Description :
	send signaling rate indication to the DTE
*****************************************************************/
void io_sync_send_connect_msg ( void )
{
	byte v80_connect_rx_rate, v80_connect_tx_rate;
	
	if ( (G(io_sync_state) == SYNC_FRAMED ) &&
  		 ( G(V80_Options).CrcType != CRC_ENABLED ) )
	{
		// download patch code
		x_send_mail ( DP_HDLC_MODE_NO_CRC, DP_TASK, NULL, 0 ) ;
	}

	v80_connect_tx_rate = v80_connect_rate_conversion ( G(x_line_rate_tx) );
	v80_connect_rx_rate = v80_connect_rate_conversion ( G(x_line_rate) );
	
	io_put_dte_tx_char ( EM );
	io_put_dte_tx_char ( EM_RATE );
	io_put_dte_tx_char ( v80_connect_tx_rate );
	io_put_dte_tx_char ( v80_connect_rx_rate );
	io_sync_send_EM_flag() ;
}

/****************************************************************
Routine : io_sync_init
Description :
	init v.80 variables at run time
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void io_sync_init ( void )
{
	x_debug_msg ( "IO - io sync init" ) ;

	// use short buffer to minimize latency
	// 84 bytes (10 msec @ 33600)
	G(io_dce_tx_eptr) = G(io_dce_tx_sptr) + 84 ;

	// save the application's dte tx queue before switch to our dte queue
	UART_SetTxQue ( 0, 0 );	//use DTE queue only
	// init local phone to on-hook state
	dp_init_local_phone_onhook () ;

	// initialize state machine and variables
	G(io_sync_em_char) = FALSE ;
	G(io_hunt_for_last_byte) = FALSE ;
	G(v80_max_tx_rate) = 99;
	G(v80_max_rx_rate) = 99;
	G(v80_SOF_flag) = FALSE ;

	if ( G(V80_Options).FrameIdle == FRAME_HDLC_IDLE )
	{
		x_debug_msg ( "IOSYNC - in frame HDLC mode" );
		// it is frame HDLC mode
		x_send_mail ( DP_HDLC_MODE, DP_TASK, NULL, 0 ) ;
		G(io_sync_state) = SYNC_FRAMED ;
		io_sync_send_connect_msg() ;	//send connect speed to DTE
	}
	else
	{
		x_debug_msg ( "IOSYNC - in transparent sync. mode" );
		// it is transparent mark idle mode
		x_send_mail ( DP_SYNC_MODE_MARK, DP_TASK, NULL, 0 ) ;
		G(io_sync_state) = SYNC_TRANSPARENT ;
		io_sync_send_connect_msg() ;	//send connect speed to DTE
	}
	io_init_dce_rx_fifo () ;	// init dce receive  fifo
	G(S).ModemOptions.AutoRate = 1 ;

	G(v80_tx_timer) = 0 ;
	G(v80_rx_timer) = 0 ;
	G(v80_retrain) = FALSE ;
}

/****************************************************************
Routine : io_sync_disconnect
Description :
	send disconnect commands - disconnect state
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void io_sync_disconnect ( void )
{
	// terminate carrier, return to command state
	if ( G(x_dial_residual) != MR_OK )
	{
		io_put_dte_tx_char ( EM );
		io_put_dte_tx_char ( EM_EOF );
		G(v80_retrain) = FALSE ;
		x_debug_msg ( "IOSYNC - io_sync_disconnect " );
	}
	G(S).ModemOptions.AutoRate = 1 ;
	// switch back to the application's dte queue at the end of video
	UART_SetTxQue ( G(old_app_pqTx), G(old_app_cbqTx) ) ;

	// reset video after disconnect anthony
	io_sync_power_up_init () ;
	G(S).ModemOptions.V8_CI_Octet = 0xc1 ;
	G(S).ModemOptions.V42 = V42_LAPM_MNP_BUFFER ;
}

/****************************************************************
Routine : io_sync_on_line 
Description :
	reset escape detect logic 
*****************************************************************/
void io_sync_on_line ( void )
{
	// just reset escape detect boolean in order to return to data state
	G(io_sync_em_char) = FALSE;
	G(io_at_esc_detect) = FALSE;
}

/****************************************************************
Routine : io_sync_retrain_done
Description :
	send signaling rate indication to the DTE
Parameters in :
	none
Parameters out :
	none
*****************************************************************/
void io_sync_retrain_done ( byte retrain_msg )
{
	if ( retrain_msg )
	{
		io_sync_send_connect_msg() ;
		x_debug_msg ( "IOSYNC - done retrain " );
		// if V.80 is in control of rate change - we disable our
		// automatic rate change
		if ( G(v80_max_tx_rate) != 99 )
			G(S).ModemOptions.AutoRate = 0 ;
		else
			G(S).ModemOptions.AutoRate = 1 ;
		G(v80_retrain) = FALSE ;
	}
	else
	{
		io_put_dte_tx_char ( EM );
		io_put_dte_tx_char ( EM_RTN );
		x_debug_msg ( "IOSYNC - start retrain " );
		G(S).ModemOptions.AutoRate = 1 ;
		G(v80_retrain) = TRUE ;
	}
}

/****************************************************************
Routine: get_user_max_rate
Description: get user desired max rate
*****************************************************************/
byte get_user_max_rate ( byte user_rate )
{
	byte desire_rate;
	
	switch ( user_rate )
	{
		case P12 :
			desire_rate = 5 ;
			break;
		case P24 :
			desire_rate = 6 ;
			break;
		case P48 :
			desire_rate = 7 ;
			break;
		case P72 :
			desire_rate = 8 ;
			break;
		case P96 :
			desire_rate = 9 ;
			break;
		case P120 :
			desire_rate = 10 ;
			break;
		case P144 :
			desire_rate = 11 ;
			break;
		case P168 :
			desire_rate = 12 ;
			break;
		case P192 :
			desire_rate = 13 ;
			break;
		case P216 :
			desire_rate = 14 ;
			break;
		case P240 :
			desire_rate = 15 ;
			break;
		case P264 :
			desire_rate = 16 ;
			break;
		case P288 :
			desire_rate = 17 ;
			break;
		case P312 :
			desire_rate = 18 ;
			break;
		case P336 :
			desire_rate = 19 ;
			break;
		default :
			desire_rate = 0;
	}
	return desire_rate;
}

/****************************************************************
Routine: set_s37_reg
Description: setup max retrain rate
*****************************************************************/
void set_s37_reg( void )
{
	byte max_rate;

	if ( G(v80_max_tx_rate) < G(v80_max_rx_rate) )
		max_rate = G(v80_max_tx_rate);
	else
		max_rate = G(v80_max_rx_rate);
			
	if ( max_rate != 0 )
	{
		G(S).ModemOptions.DialLineRate = max_rate ;
		G(S).ModemOptions.AutoRate = 1 ;
	}
}

/****************************************************************
Routine: io_send_dce_last_byte
Description: send dce last byte
*****************************************************************/
void io_send_dce_last_byte ( void )
{
	if ( G(V80_Options).CrcType == CRC_ENABLED )
	{
		*G(io_sync_wptr) =
			(word) (G(io_sync_buffered_byte) | HDLC_END_OF_FRAME);
	}
	else
	{
		*G(io_sync_wptr) = G(io_sync_buffered_byte) ;
	}

	if ( ++G(io_sync_wptr) >= G(io_dce_tx_eptr) )
		G(io_sync_wptr) = G(io_dce_tx_sptr) ;
	--G(io_sync_count) ;

	G(io_hunt_for_last_byte) = FALSE ;
}

/****************************************************************
Routine: io_send_dce_one_byte
Description: send dce one byte
*****************************************************************/
void io_send_dce_one_byte ( byte in_dce )
{
	if ( G(io_sync_state) == SYNC_FRAMED )
	{
		if ( G(io_hunt_for_last_byte) == FALSE )
		{
			G(io_sync_buffered_byte) = (word) (in_dce | HDLC_START_OF_FRAME);
			G(io_hunt_for_last_byte) = TRUE ;
		}
		else
		{
			*G(io_sync_wptr)++ = (word) G(io_sync_buffered_byte) ;
			G(io_sync_buffered_byte) = (word) in_dce ;
			if ( G(io_sync_wptr) >= G(io_dce_tx_eptr) )
				G(io_sync_wptr) = G(io_dce_tx_sptr) ;
			--G(io_sync_count) ;
		}
	}
	else
	{
		*G(io_sync_wptr)++ = (word) in_dce ;
		if ( G(io_sync_wptr) >= G(io_dce_tx_eptr) )
			G(io_sync_wptr) = G(io_dce_tx_sptr) ;
		--G(io_sync_count) ;
	}
}

/****************************************************************
Routine : io_tx_dte_to_dce_sync_data
Description :
	Transmit sync data from the dte queue to the dce fifo.
	First check if space is available to write to the dce fifo.

*****************************************************************/
void io_tx_dte_to_dce_sync_data ( void )
{
	byte dce_byte0, dce_byte1;
	byte rx_char;

	dce_byte0 = dce_byte1 = 0;
	
	G(io_sync_count) = io_get_dce_tx_count () ;
	G(io_sync_wptr) = G(io_dce_tx_wptr) ;

	while ( !IS_DTE_RX_EMPTY() && ( G(io_sync_count) > 6 ) )
	{
		rx_char = *I(io_dte_rx_rptr)++ ;

		DTE_RX_UPDATE() ;
		if ( G(io_sync_em_char) )
		{
			switch ( rx_char )
			{
			case EM:
			case EM_19:
				// got <EM><t1>  0x5C   or  <EM><EM>   0x19 0x19    
				dce_byte0 = EM;
				break ;
			case EM99:
			case EM_99:
				// got <EM><t2>  0x76   or  <EM99><EM99>  0x99 0x99
				dce_byte0 = EM99;
				break ;
			case EM_DC1:
				// got <EM><t3>  0xA0    
				dce_byte0 = DC1;
				break ;
			case EM_DC3:
				// got <EM><t4>  0xA1    
				dce_byte0 = DC3; // tx one DC3
				break ;
			case EM_19_19:
				// got <EM><t5>  0x5D    
				dce_byte1 = dce_byte0 = EM;
				break ;
			case EM_99_99:
				// got <EM><t6>  0x77   
				dce_byte1 = dce_byte0 = EM99;
				break ;
			case EM_DC1_DC1:
				// got <EM><t7>  0xA2    
				dce_byte1 = dce_byte0 = DC1;
				break ;
			case EM_DC3_DC3:
				// got <EM><t8>  0xA3    
				dce_byte1 = dce_byte0 = DC3;
				break ;
			case EM_19_99:
				// got <EM><t9>  0xA4    
				dce_byte0 = EM;
				dce_byte1 = EM99;
				break ;
			case EM_19_DC1:
				// got <EM><t10>  0xA5    
				dce_byte0 = EM;
				dce_byte1 = DC1;
				break ;
			case EM_19_DC3:
				// got <EM><t11>  0xA6    
				dce_byte0 = EM;
				dce_byte1 = DC3;
				break ;
			case EM_99_19:
				// got <EM><t12>  0xA7    
				dce_byte0 = EM99;
				dce_byte1 = EM;
				break ;
			case EM_99_DC1:
				// got <EM><t13>  0xA8    
				dce_byte0 = EM99;
				dce_byte1 = DC1;
				break ;
			case EM_99_DC3:
				// got <EM><t14>  0xA9    
				dce_byte0 = EM99;
				dce_byte1 = DC3;
				break ;
			case EM_DC1_19:
				// got <EM><t15>  0xAA    
				dce_byte0 = DC1;
				dce_byte1 = EM;
				break ;
			case EM_DC1_99:
				// got <EM><t16>  0xAB    
				dce_byte0 = DC1;
				dce_byte1 = EM99;
				break ;
			case EM_DC1_DC3:
				// got <EM><t17>  0xAC    
				dce_byte0 = DC1;
				dce_byte1 = DC3;
				break ;
			case EM_DC3_19:
				// got <EM><t18>  0xAD    
				dce_byte0 = DC3;
				dce_byte1 = EM;
				break ;
			case EM_DC3_99:
				// got <EM><t19>  0xAE    
				dce_byte0 = DC3;
				dce_byte1 = EM99;
				break;
			case EM_DC3_DC1:
				// got <EM><t20>  0xAF    
				dce_byte0 = DC3;
				dce_byte1 = DC1;
				break ;

			case EM_ESC:
				// got <EM><esc>  0xBB - sync escape sequence
				// go to on-line command state
				x_debug_msg ( "IO - sync escape sequence detected" ) ;
				G(io_at_esc_detect) = TRUE ;
				io_put_dte_tx_char ( G(v80_esc_char) );
				io_put_dte_tx_char ( EM_ESC );
				x_send_mail ( AT_OK, AT_TASK, NULL, 0 ) ;
				return ;

			case EM_MARK:
				// got <EM><mark> 0xB0
				// begin transparent sub-mode
				if ( G(io_sync_state) == SYNC_FRAMED )
				{
					G(io_sync_state) = SYNC_TRANSPARENT ;
					// tx mark in idle
					x_send_mail ( DP_SYNC_MODE_MARK, DP_TASK, NULL, 0 );
				}
				break ;

			case EM_FLAG: 
				// got <EM><flag> 0xB1
				// transmit a flag, enter Framed sub-mode
				//x_debug_msg ( "IOSYNC - got <EM><flag> 0xB1" );

				if ( G(io_hunt_for_last_byte) )
				{
					io_send_dce_last_byte () ;
				}

				if ( G(io_sync_state) == SYNC_TRANSPARENT )
				{
					G(io_sync_state) = SYNC_FRAMED ;

					// tx '7E' in idle
					x_send_mail(DP_HDLC_MODE, DP_TASK, NULL, 0);

					if ( G(V80_Options).CrcType != CRC_ENABLED )
					{
						// download patch code
						x_send_mail(DP_HDLC_MODE_NO_CRC, DP_TASK, NULL, 0);
					}
				}
				break ;

			case EM_EOF:
				// got <EM><eof> 0xBA
				// terminate carrier, return to command state
				//x_debug_msg ( "IOSYNC - got <EM><eof> 0xBA" );
				io_put_dte_tx_char ( EM );
				io_put_dte_tx_char ( EM_EOF );
				x_send_mail ( MC_DISCONNECT, DP_TASK, NULL, 0 ) ;
				break ;

			case EM_RRN:
				// got <EM><rrn> 0xBC
				// request rate re-negotiation
				set_s37_reg ();
				x_send_mail ( DSP_FAST_RETRAIN, DP_TASK, NULL, 0 ) ;
				break ;

			case EM_RTN:
				// got <EM><rtn> 0xBD
				// request rate retrain
				set_s37_reg ();
				x_send_mail ( DSP_RETRAIN, DP_TASK, NULL, 0 ) ;
				break ;

			case EM_RATE:
				// got <EM><rate> 0xBE
				G(v80_set_rate_state) = 1;
				break ;

			case EM_ERR:
				// got 0xB2
				// transmit abort
			case EM_HUNT:
				// got 0xB3
				// put receive in hunt condition
			case EM_RESUME:
				// got  0xB7
				// resume after transmit underrun ( abort )
			default:
				if ( G(v80_set_rate_state) == 1 )
				{
					G(v80_max_tx_rate) = get_user_max_rate ( rx_char );
					G(v80_set_rate_state) = 2;
				}
				else if ( G(v80_set_rate_state) == 2 )
				{
					G(v80_set_rate_state) = 0;
					G(v80_max_rx_rate) = get_user_max_rate ( rx_char );
				}
				else
				{
					dce_byte0 = EM;
					dce_byte1 = rx_char;
				}
				break ;
			}

			// Send characters as directed from dce_byte0 and dce_byte1
			if (dce_byte0)
				io_send_dce_one_byte(dce_byte0);
			if (dce_byte1)
				io_send_dce_one_byte(dce_byte1);

			G(io_sync_em_char) = FALSE ;
			if ( G(v80_set_rate_state) )
				G(io_sync_em_char) = TRUE;
		}
		else
		{
			if ( ( rx_char == EM ) || ( rx_char == EM99 ) )
			{
				// got in-band escape character ( EM = 19h )
				G(v80_esc_char) = rx_char ;
				G(io_sync_em_char) = TRUE ;
				//x_debug_msg ( "IOSYNC - got <EM> 0x19" );
			}
			else
			{
				io_send_dce_one_byte ( rx_char ) ; // send rx_char
			}
		}
	}

	if ( G(io_dce_tx_wptr) != G(io_sync_wptr) )
	{
		G(v80_tx_timer) = x_current_time () ;
	}
	else
	{
		if ( x_elapsed_time ( G(v80_tx_timer) ) > SECOND20 )
		{
			G(v80_tx_timer) = x_current_time () ;
			G(dp_dsp_data_in_progress) = FALSE ;
			io_start_dce_transmit () ;
			x_debug_msg ( "IOSYNC - video tx locks up " );
		}
	}

	if ( G(io_dce_tx_wptr) != G(io_sync_wptr) )
	{
		G(io_dce_tx_wptr) = G(io_sync_wptr) ;
		io_start_dce_transmit () ;
	}
}

/****************************************************************
Routine : io_dce_to_dte_sync_data
Description :
	Transmit sync data from the dce fifo to the dte transmit queue.
	First check if space is available to write to the dte transmit queue.

*****************************************************************/
void io_dce_to_dte_sync_data ( void )
{
	word  count ;
	byte  *wptr ;
		
	count = io_get_dte_tx_count () ;
	wptr = (byte *) I(io_dte_tx_wptr) ;
	
	while ( ( count > 4 ) && ( G(io_dce_rx_rptr) != G(io_dce_rx_wptr) ) )
	{
		if  ( ( *G(io_dce_rx_rptr) & HDLC_START_OF_FRAME )  ||
   			  ( G(io_sync_state) != SYNC_FRAMED ) )
		{
			G(v80_SOF_flag) = TRUE ;
		}	

		if ( G(v80_SOF_flag) == TRUE )
		{
			--count ;
			switch ( *G(io_dce_rx_rptr) & 0x00FF )
			{
				case EM :
					//x_debug_msg ( "IOSYNC - got <EM>" );
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					*wptr++ = EM_19 ;
					--count ;
					break ;
				case EM99 :
					//x_debug_msg ( "IOSYNC - got <EM99>" );
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					*wptr++ = EM_99 ;
					--count ;
					break ;
				case DC1 :
					//x_debug_msg ( "IOSYNC - got <DC1>" );
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					*wptr++ = EM_DC1 ;
					--count ;
					break ;
				case DC3 :
					//x_debug_msg ( "IOSYNC - got <DC3>" );
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					*wptr++ = EM_DC3 ;
					--count ;
					break ;
				default:
					*wptr++ = (byte) *G(io_dce_rx_rptr) ;
					break ;
			}
			if ( wptr >= I(io_dte_tx_eptr) )
				wptr = (byte *) I(io_dte_tx_sptr) ;

			if  ( ( *G(io_dce_rx_rptr) & HDLC_END_OF_FRAME ) &&
    			  ( G(io_sync_state) == SYNC_FRAMED ) )
			{
				if ( G(V80_Options).CrcType == CRC_ENABLED )
				{
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					if ( *G(io_dce_rx_rptr) & HDLC_CRC_ERROR )	
					{
						x_debug_msg ( "IOSYNC - crc error " ) ;
						// crc error,  send <EM><err>
						*wptr++ = EM_ERR ;
					}	
					else
					{
						// in framed mode send <EM><flag>
						*wptr++ = EM_FLAG ;
					}
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					count = (word) (count - 2);
					G(v80_SOF_flag) = FALSE ;
				}	
				// crc disabled option - used for H.324
				else if ( !( *G(io_dce_rx_rptr) & HDLC_CRC_ERROR ) )
				{
					*wptr++ = EM ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					*wptr++ = EM_FLAG ;
					if ( wptr >= I(io_dte_tx_eptr) )
						wptr = (byte *) I(io_dte_tx_sptr) ;
					count = (word) (count - 2);
					G(v80_SOF_flag) = FALSE ;
				}
			}
		}
		if ( ++G(io_dce_rx_rptr) >= G(io_dce_rx_eptr) )
			G(io_dce_rx_rptr) = G(io_dce_rx_sptr) ;
	}		

	if ( I(io_dte_tx_wptr) != wptr )
	{
		G(v80_rx_timer) = x_current_time () ;
	}
	else
	{
		if ( x_elapsed_time ( G(v80_rx_timer) ) > SECOND5 )
		{
#if !defined(CS_4)
			//--------------------------------------------------
			// Performing the following function in a DSP polled
			// mode of operation is harmful and should not be
			// attempted.  Even in an interrupt mode there may
			// be a small window where this is not a good idea.
			//--------------------------------------------------
			dp_regread ( 0xb0 ) ;
#endif	// !defined(CS_4)
			G(v80_rx_timer) = x_current_time () ;
			x_debug_msg ( "IOSYNC - video no rx int" );
		}
	}
	I(io_dte_tx_wptr) = wptr ;
}

#ifdef MODEM_Z80
non_banked void z80_uart_cts_on( void );
non_banked void z80_uart_cts_off( void );
/****************************************************************
Routine : io_sync_flow_control
Description : local dte flow control
*****************************************************************/
void io_sync_flow_control ( void )
{
	word v80_rx_count ;
	byte temp;
	
	if ( G(S).ModemOptions.FlowControl != NO_FLOWCTRL )
	{
		v80_rx_count = io_get_dte_rx_bytes () ;

		temp = io_get_dce_tx_count ();

		if ( v80_rx_count >= G(V80_Options).Xoff )
		{
			if ( G(v80_flow_on) == FALSE )
			{
				if ( G(S).ModemOptions.FlowControl == HW_FLOWCTRL )
				{
					z80_uart_cts_off () ;
					x_debug_msg ( "IOSYNC - HW FC turn CTS OFF" );
				}
				else
				{
					io_put_dte_tx_char ( XOFF ) ; 	// XOFF host - 0x13
				}
				G(v80_flow_on) = TRUE ;
			}
		}
		else
		{
			if ( v80_rx_count <= G(V80_Options).Xon )
			{
				if ( G(v80_flow_on) == TRUE )
				{
					if ( G(S).ModemOptions.FlowControl == HW_FLOWCTRL )
					{
						z80_uart_cts_on () ;
						x_debug_msg ( "IOSYNC - HW FC turn CTS ON" );
					}
					else
					{
						io_put_dte_tx_char ( XON ) ;	// XON host - 0x11
						x_debug_msg ( "IOSYNC - SW FC send XON to DTE" );
					}
					G(v80_flow_on) = FALSE ;
				}
			}
		}
	}
}
#endif //MODEM_Z80

/****************************************************************
Routine : io_sync_background
Description :
	sync background state process
Parameters in :
	none
Parameters out :
	TRUE - stay in sync state 
	FALSE - return to command mode
*****************************************************************/
void io_sync_background ( void )
{
	if ( G(io_at_esc_detect) )
	{
		// send dte receive byte to at task
		if ( io_get_dte_rx_char ( &G(io_dte_rx_last_ch) ) )
			x_send_mail ( IO_AT_DATA, AT_TASK, &G(io_dte_rx_last_ch), 1 );
	}
	else
	{
		if ( G(v80_retrain) == FALSE )
		{
			// transmit dce data in fifo to dte
			io_dce_to_dte_sync_data () ;
		}
		else
		{
			// if retrain - throw away the dce tx data
			G(io_dce_tx_wptr) = G(io_dce_tx_rptr) ;
		}
		// transmit dte data in queue to dce
		io_tx_dte_to_dce_sync_data () ;

#ifdef MODEM_Z80
		// if in framed idle sub mode, check for flow control
		io_sync_flow_control () ;
#endif //MODEM_Z80
	}
}
#endif	// V.80 define
