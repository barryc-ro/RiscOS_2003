/*name and version number:@(#)vpgetgn.c	1.34*/
/*date of get: 		  01/10/01 16:57:55*/
/*date of delta:	  01/10/01 10:38:21*/
/****************************************************************
File : vpgetgn.c
Description :
	GetGain and associated functions for V.90/V.92
*****************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#if defined(VPCM_CLIENT)
#include "Vpcmcnst.h"
#include "allglobs.h"
#if defined(WIN32)
#include <stdio.h>
#include <math.h>
#endif

// In the original Jerry code, these constants
// were variables.  It saves code space to make
// them constants.
#define	Q14		(16384L)
#define	Q24		(16777216L)
#define N		36
#define M		8

typedef double DW32;
byte vp_DetAMuMix6dB(word *lrnTbl);
byte altRBS[6];

// **************** constants for korea fix *********************
// lev[] - index level used for A-law det
const byte vp_lev[6]={96, 98, 102, 104, 106, 110};
const int vp_ATbl[6]={8448, 9472, 11520, 12544, 13568, 15616};
const byte vp_Adlt[6]={24, 32, 32, 32, 32, 32};
// **************** (end) constants for korea fix ***************

// A-law slicer table
const short int sLinA[5] = {3840, 3968, 4128, 4352, 4608};

// u0law slicer table for RBSB
const short sLinB[56]={	940,  972, 1020, 1068, 1100, 1148, 1196, 1228, 
				   1276, 1324, 1356, 1404, 1452, 1484, 1532, 1580, 
				   1612, 1660, 1708, 1740, 1788, 1836, 1868, 1932, 
				   2012, 2076, 2172, 2268, 2332, 2428, 2524, 2588, 
				   2684, 2780, 2844, 2940, 3036, 3100, 3196, 3292, 
				   3356, 3452, 3548, 3612, 3708, 3804, 3868, 3996,
				   4157, 4284, 4476, 4668, 4798, 4988, 5180, 5308};

// u-law linear table levels 50 - 85
const short lin[36]={	 1052, 1116,  1180, 1244, 1308,  1372,
				 1436,  1500, 1564, 1628,  1692, 1756, 1820,  1884, 
				 1980,  2108, 2236, 2364,  2492, 2620, 2748,  2876,
				 3004,  3132, 3260, 3388,  3516, 3644, 3772,  3900,
				 4092,  4348, 4604, 4860,  5116, 5372};

// u-law slicer table
const short sLin[64]={
				 412,   444,   476,   508,   540,   572,   604,   636, 
				 668,   700,   732,   764,   796,   828,   860,   900, 
				 956,  1020,  1084,  1148,  1212,  1276,  1340,  1404, 
				1468,  1532,  1596,  1660,  1724,  1788,  1852,  1932, 
				2044,  2172,  2300,  2428,  2556,  2684,  2812,  2940, 
				3068,  3196,  3324,  3452,  3580,  3708,  3836,  3996, 
				4220,  4476,  4732,  4988,  5244,  5500,  5756,  6012, 
				6268,  6524,  6780,  7036,  7292,  7548,  7804,  8124}; 

/****************************************************************************
* NAME		GetGain()
* FUNCTION	based on raw learned table, perform the following jobs:
*			detect client side A-law or u-law codec
*			detect degital loss gain for any 0 dB to -10 dB line
*			detect RBS to compensate learned table
*			detect level noise to compensate constellation design
*			rescale the learned table
****************************************************************************/
byte GetGain				// processing seg 3,4, &5
  (
	word *lrnTbl,
	CPCPT_PARA_VALUE *para_value
  )
{
	byte i, j, k, k1, flag, numAltRbs, rbsB[6];
	short int n, x1, y1, x, y;
	signed char detRbs[6];
	short int a0, max0, max1, max2, c[6];
	short int  digGain, digGainDt, g0, gbuf[28];
	int ii1, ii2, kk1, nkj, nj, ji, m0, m1, m2;

	long  avr, xi[28], x32, y32;
#if defined(MODEM_Z80)
	short int *lrn, *ga, *da, *pass;
#else
	int lrn[96], ga[384], da[384], pass[64];
#endif
	float gain;
	short int digGain0, digGain0Dt, digGain6, digGain6Dt, digGain9, digGain9Dt;

#if !defined(WIN32)
	word t = x_current_time();
#endif

#if defined(MODEM_Z80)
	// this shares the memory used by lrnTbli and tbl
	lrn = (short int *) lrnTbli;
	ga = &lrn[96];
	da = &ga[216];
	pass = &da[216];
#endif

	numAltRbs = 0;
	x_debug_msg("altRBS[6]=");

	// read altRBS from DSP
	for(i=0; i<6; i++)
	{
		// venus shift 5
		altRBS[(i+5)%6] = j = (byte) rram(DP_V90_ADD_RBS + i);

		dp_puts_dec(j);

		if(3 == j)
		{
			numAltRbs++;
		}
	}

	x_debug_msg("numAltRbs=");	dp_puts_dec(numAltRbs);

	if(numAltRbs >= 4)
	{
		x_debug_msg("GetGain() fails.");
		return (FALSE);
	}

	for (i=0; i<6; i++)
	{
		c[i] = 0;
		rbsB[i] = 0;
		detRbs[i] = -1;
	}
	digGain = 0;
	digGainDt = 0;

	//-----------------------------------------------------------------------
	// new A-law detect, cover A-law RBSand A/u-law mixing case

	x = 0;
	for(i=0; i<6; i++)
	{					// 6 phase
		ii1 = i<<7 ;
		ii2 = ii1 + 80 ;
		if(lrnTbl[ii2] <= 0) {
			x_debug_msg("GetGain() fails - illegal level");
			return (FALSE);
		}
		if(altRBS[i] != 3)
		{
			gain = Q14*4224/(float)lrnTbl[ii2];
			for(k=0; k<6; k++)
			{	// 6 levels
				{
					j = (byte) vp_lev[k];
					y32 = (long)(gain*(lrnTbl[ii1+j]>>14));
					y32 -= vp_ATbl[k];
					if(y32 < 0)
						y32 = -y32;

					// check A-law, cof=4, G.711=8 
					if( y32 <= (long) (4L * vp_Adlt[k]))
						x++;
				}
			}
		}
	}

	//----------------------------------------------------------------------
	// end of A-law detection ==============================================

	// we prefer u-law over a-law if they are close ( 25 instead of 20 for X )
	x_debug_msg(" LL-X-A x=");
	sendDecByte((byte) (x >= 25 ? 1 : 0));
	sendDumbChar('/');
	dp_puts_dec((unsigned char) x);

	if( x >= 25)
	{
		// codec is Alaw
		x_debug_msg(" Alaw");

		para_value->rxAlaw = 1 ;
		para_value->pass = 1;
		return (TRUE);
	}
	para_value->rxAlaw = 0;
	x_debug_msg(" ulaw");

	////////////////////////////////////////////////////////////////////////
	// digLoss detection 
	// for u-law, gain detection

	ii1 = 6*N ;
	for(n=0; n<ii1; n++)
	{
		ga[n] = 0;
		da[n] = 0;
	}
	for(i=0; i<N; i++)
	{
		pass[i] = 0;
	}

	for (k=0; k<6; k++) 
	{
		if (altRBS[k] != 3)
		{
			kk1 = (k<<7)+76 ;
			for(i=0; i<M; i++)
			{
				ii1 = kk1 + i ;
#if !defined(MODEM_Z80)
				if (lrnTbl[ii1] <= 0) {
					DP_PUTS("bad value for lrnTbl[");
					dp_puts_dec((word) (ii1));
					DP_PUTS("]");
					para_value->pass = 0;
					return (FALSE);
				}
#endif
				xi[i] = Q24/lrnTbl[ii1];		// get base level, Q24

#if defined(Z80_DEBUG_PRINT)
				if (G(S).ModemOptions.Dummy23)
				{
					DP_PUTS("lrnTbl[");	dp_puts_dec((word) ii1);
					DP_PUTS("]=");		dp_puts_dec(lrnTbl[ii1]);
					sendCrLf();
				}
#endif // Z80_DEBUG_PRINT
			}

			for (j=0; j<N; j++)
			{				// check additional levels
				flag = 0;
				y32 = (lin[j]*xi[0])>>10;		// Q14

				if( (y32 > 5161) && (y32 <= 24576) )
				{		// if dLoss=(-10) - (+3.5) dB
					flag = 1;
					gbuf[0] = (short int) y32;
					avr = gbuf[0];
					g0 = gbuf[0];
					for(i=1; i<M; i++)
					{
						ii1 = avr/i;	// average gain so far

						// If we apply the gain for the first level
						// (g0) to successive lrnTbl[] values, where
						// would we have come from?
						y = (short int) (((long)g0*lrnTbl[kk1+i])>>14);

						// Get k1, the index into lin[] where
						// lin[k1] is close to y.
						k1 = vp_UpLevel(y, lin, (byte) N, 6);

						y = (short int) ((xi[i]*lin[k1])>>10);
						if (k1)
							x = (short int) ((xi[i]*lin[k1-1])>>10);
						else
							x = y;
						x1 = (short int) (x - ii1);

						if(x1 < 0)
							x1 = (short int) -x1;
						y1 = (short int) (y - ii1);
						if(y1 < 0)
							y1 = (short int) -y1;
						if(y1 < x1) {
							x1 = y1;
							x = y;
						}
				
						// As we go on, we expect to be closer and
						// closer to the actual gain, so we have less
						// tolerance in the delta.
						if( i < 6) {			// initial gate
							y = 524;			// 0.032
						}
						else if (i < 15) {		// middle gate
							y = 393;			// 0.024
						}
						else {					// final gate
							y = 262;			// 0.016
						}

						// x1 is delta gain
						// x is the gain
						if (x1 > y) {			// out of search gate
							flag = 0;
							break;
						}
					
						gbuf[i] = x;
						avr += x;
					}
			
					nkj = N*k+j ;
					if (flag)
					{	// got solution
						// since M is defined as constant ( = 8 )
						y = (short int) (avr>>3);
						ga[nkj] = y;			// get gain

						x32 = 0;
						for(i=0; i<M; i++) {
							if( y >= gbuf[i] ) {
								x32 += y - gbuf[i];
							}
							else {
								x32 += gbuf[i] - y;
							}
						}
						x32 = x32>>3;	// since M is defined as constant (=8)
						da[nkj] = x32;		// get delta of the gain (MSE)

						if( y <= 14746 )
						{		//if y<0.9, ie <1 dB
							if(x32 > 82)		// Q14
							{
								ga[nkj] = 0;
								da[nkj] = 0;
							}
							else {
								pass[j]++;
							}
						}
						else
						{					//0dB case
							if(x32 > 115)	// Q14
							{
								ga[nkj] = 0;
								da[nkj] = 0;
							}
							else {
								pass[j]++;
							}
						}
					}
				}
			}
		}
	}

	////////////////////////// processing 0db to 3dB first ///////////////
	digGain0 = digGain0Dt = 0;
	flag = 0;
	digGain = 8192;			// default=0.5
	digGainDt = 32767;
	for (j=0; j<N; j++)
	{
		if( (pass[j] >= (5-numAltRbs))&&
			( (ga[j] > 11469)||(ga[N+j] > 11469) ))
		{
			x32 = 0; 
			y32 = 0;
			for(k=0; k<6; k++)
			{
				if (altRBS[k] != 3)
				{
					nkj = N*k+j ;
					if(ga[nkj])
					{
						x32 += ga[nkj];
						y32 += da[nkj];
					}
				}
			}
			x32 /= pass[j];
			y32 /= pass[j];
			if ( y32 < digGainDt)
			{
				digGain0 = digGain = (short int) x32;
				digGain0Dt = digGainDt = (short int) y32;
				flag = 1;
			}
		}
	}

	if (digGainDt > 66)		// if digGainDt > 0.004, Q14
	{
		flag = 0;
		digGain0 = 0;
		digGain = 0;
		digGainDt = 0;
	}

	sendCrLf();
	x_debug_msg("LL-d0="); dp_puts_dec((word) (digGain0>>4));
	x_debug_msg("LL-d0_Dt="); dp_puts_dec((word) (digGain0Dt>>1));

	/////////////// processing 3db to 6dB next ///////////////
	digGain6 = 0;
	digGain6Dt = 0;
	if( (flag == 0)||((digGain0 >= 14746)&&(digGain0 <= 18022)) )
	{		// 0.9*Q14=14746, 1.1*Q14=18022
		digGain = 8192;
		digGainDt = 32767;
		for(j=0; j<N; j++) {
			nj = N+j ;
			if( (pass[j] >= (5-numAltRbs))&&
				( ((ga[j] > 7373)&&(ga[j] <= 11469)) ||
								  ((ga[nj] > 7373)&&(ga[nj] <= 11469)) ) )
			{
				x32 = 0; 
				y32 = 0;
				for(k=0; k<6; k++)
				{
					if(altRBS[k] != 3)
					{
						nkj = N*k+j ;
						if(ga[nkj]) {
							x32 += ga[nkj];
							y32 += da[nkj];
						}
					}
				}
				x32 /= pass[j];
				y32 /= pass[j];
				if( y32 < digGainDt)
				{
					digGain6 = digGain = (short int) x32;
					digGain6Dt = digGainDt = (short int) y32;
					flag = 1;
				}
			}
		}
	}

	sendCrLf();
	x_debug_msg(" LL-d6="); dp_puts_dec((word) (digGain6>>4));
	x_debug_msg(" LL-d6_Dt="); dp_puts_dec((word) (digGain6Dt>>1));

	// 0.45*Q14=7373, 0.55*Q14=9011
	if( (digGain0 >= 14746) && (digGain0 <= 18022) &&
		(digGain6 >= 7373) && (digGain6 < 9011) )
	{
		// If it could be either 6 dB or 0 dB
		// then we'll make extra effort to
		// distinguish between the two.
		if(vp_DetAMuMix6dB(lrnTbl)) {
			digGain = digGain6;
			digGainDt = digGain6Dt;
		}
		else {
			digGain = digGain0;
			digGainDt = digGain0Dt;
		}
	}
	else {
		if( (digGain0 == 0)&&(digGain6 > 0) ) {
			digGain = digGain6;
			digGainDt = digGain6Dt;
		}
		else if(digGain0 > 0) {
			digGain = digGain0;
			digGainDt = digGain0Dt;
		}
	}

	sendCrLf();
	x_debug_msg(" LL-d1="); dp_puts_dec((word) (digGain>>4));
	x_debug_msg(" LL-d2="); dp_puts_dec((word) (digGainDt>>1));
	sendCrLf();

	//////////////////////// processing 6db to 10dB/13dB last ///////////////
	digGain9 = 8192;
	digGain9Dt = 32767;
	if(flag == 0)
	{
		for(j=0; j<N; j++) {
			if( (pass[j] >= (5-numAltRbs))&&
				( (ga[j] <= 7373) || (ga[N+j] <= 7373) ))
			{
				x32 = 0; 
				y32 = 0;
				for(k=0; k<6; k++)
				{
					if(altRBS[k] != 3)
					{
						nkj = N*k+j ;
						if(ga[nkj]) {
							x32 += ga[nkj];
							y32 += da[nkj];
						}
					}
				}
				x32 /= pass[j];
				y32 /= pass[j];
				if( y32 < digGain9Dt) {
					digGain9 = digGain = (short int) x32;
					digGain9Dt = digGainDt = (short int) y32;
					flag = 1;
				}
			}
		}
	}	

	// if no solution, default to 6db
	if (flag == 0)
	{
		digGain = Q14>>1;		// default=6dB
		digGainDt = 0;
		x_debug_msg(" default to 6 dB ");
	}

	sendCrLf();
	x_debug_msg(" LL-d9="); dp_puts_dec((word) (digGain9>>4));
	x_debug_msg(" LL-d9_Dt="); dp_puts_dec((word) (digGain9Dt>>1));
	x_debug_msg(" LL-dL="); dp_puts_dec((word) (digGain>>4));
	x_debug_msg(" LL-dL_Dt="); dp_puts_dec((word) (digGainDt>>1));
	x_debug_msg(" LL-flag="); dp_puts_dec(flag);
	sendCrLf();

	// Scale the learned levels received so far by the
	// digital loss we've determined.
	for(i=48; i<88; i++) {
		for(j=0; j<6; j++) {
			ji = (j << 7) + i ;
			x = (short int) (((long)digGain * lrnTbl[ji]) >> 14);
			lrnTbl[ji] = x;
		}
	}
	////////////////////////////////////////////////////////////////////////
	// for u-law, detect RBS

	// get levels for detect RBS
	ii1 = -6;
	for(i=76; i<84; i++)
	{
		ii1 = ii1 + 6;
		for(j=0; j<6; j++)
		{
			if(altRBS[j] != 3)
			{
				y = lrnTbl[(j<<7)+i];
				n = vp_UpLevel(y, sLin, 64, 6);
				lrn[ii1+j] = n;
			}
		}
	}

	// check how many phases have same RBS 
	n = 4;
	for(i=0; i<6; i++)
	{
		if(altRBS[i] != 3)
		{
			if(detRbs[i] < 0) {
				n++;
				detRbs[i] = (signed char) n;
				for(j=i; j<6; j++)
				{
					if(altRBS[j] != 3)
					{
						if(detRbs[j] < 0)
						{
							x = 1;
							kk1 = -6;
							for(k=0; k<8; k++)
							{
								kk1 = kk1 + 6;
								if(lrn[kk1+i]!=lrn[kk1+j])
								{
									x = 0;
									break;
								}
							}
							if (x)
							{
								detRbs[j] = (signed char) n;
							}
						}
					}
				}
			}
		}
	}

	// count the number for each different RBS phase
	for(i=0; i<6; i++)
	{
		if(altRBS[i] != 3)
		{
			if(detRbs[i] == 5)
				c[0]++;
			else if(detRbs[i] == 6)
				c[1]++;
			else if(detRbs[i] == 7)
				c[2]++;
			else if(detRbs[i] == 8)
				c[3]++;
			else if(detRbs[i] == 9)
				c[4]++;
			else
				c[5]++;
		}
	}

	// order the different RBS phases by number
	a0 = -1;
	max0 = -1;
	for(i=0; i<6; i++)
	{
		if(c[i] > a0)
		{
			max0 = i;
			a0 = c[i];
		}
	}

	// get RBS type who has most phases
	a0 = -1;
	max1 = -1;
	for(i=0; i<6; i++)
	{
		if( (i != max0) && (c[i] > 0) && (c[i] > a0) )
		{
			max1 = i;
			a0 = c[i];
		}
	}

	// get RBS type who has second most phases
	a0 = -1;
	max2 = -1;
	for(i=0; i<6; i++)
	{
		if( (i != max0) && (i != max1) && (c[i] > 0) && (c[i] > a0) )
		{
			max2 = i;
			a0 = c[i];
		}
	}

	// name the RBS type by number of phases
	m0 = 5 + max0 ;
	m1 = 5 + max1 ;
	m2 = 5 + max2 ;
	for(i=0; i<6; i++)
	{
		if(altRBS[i] != 3)
		{
			if(detRbs[i] == m0) {
				detRbs[i] = 0;
			}
			else if(detRbs[i] == m1) {
				detRbs[i] = 1;
			}
			else if(detRbs[i] == m2) {
				detRbs[i] = 4;
			}
		}
	}

	// detect RBSB
	for(i=78; i<82; i++)
	{
		for(j=0; j<6; j++)
		{
			if(altRBS[j] != 3)
			{
				y = lrnTbl[(j << 7) + i];
				n = vp_UpLevel((short int)y, sLinB, 56, 6);
				if ((n-1) % 3 == 0) {
					rbsB[j]++;
				}
			}
		}
	}

	// name RBSB phase
	for(i=0; i<6; i++)
	{			
		if(rbsB[i] >= 3)
		{
			detRbs[i] = 2;
			break;
		}
		if(altRBS[i] == 3)
		{
			detRbs[i] = 3;
		}
	}

	// count RBS number
	max0 = 0;
	max1 = 0;
	for(i=0; i<6; i++)
	{
		if(altRBS[i] != 3)
		{
			if(detRbs[i] == 0)
				max0++;
			else if(detRbs[i] == 1)
				max1++;
		}
	}
	
	for(i=0; i<6; i++) {
		para_value->rbs[i] = (byte) detRbs[i];
	}
	para_value->digGain = digGain;
	para_value->digGainDt = digGainDt;
	para_value->max0 = max0;
	para_value->max1 = max1;
	para_value->max2 = max2;

	x_debug_msg(" digGain="); dp_puts_dec((word) (digGain>>4));
	x_debug_msg(" digGainDt="); dp_puts_dec((word) (digGainDt>>1));
	DP_PUTS("flag="); dp_puts_dec(flag);
	sendCrLf();
	DP_PUTS("rbs=");
	for (i=0; i<6; i++)
	{
		dp_puts_dec(para_value->rbs[i]);
	}
	sendCrLf();
	para_value->pass = 1;
#if !defined(WIN32)
	DP_PUTS("GetGain()time ");
	dp_puts_dec(x_elapsed_time(t));
	sendCrLf();
#endif
	return TRUE;
}

extern word getaI2LinTbl(word index);

// Second part of getgain() which runs after 
// DSP has finished level learning.
void vp_GetGainPost			// processing seg 0,1,2,6,&7
  (
	word *lrnTbl,
	CPCPT_PARA_VALUE *para_value
  )
{
	byte i, j, k;
	short int x, z;
	short int detRbs[6];
	short int max0, max1, max2;
	short int digGain, digGainDt;
	long  x32, y32, avr;
	int ji;
	long temp;

	for(i=0; i<6; i++) {
		detRbs[i] = para_value->rbs[i];
	}
	para_value->digLossGain = 0.0;
	digGain = para_value->digGain;
	digGainDt = para_value->digGainDt;
	x_debug_msg(" digGain="); dp_puts_dec((word) (digGain>>4));
	x_debug_msg(" digGainDt="); dp_puts_dec((word) (digGainDt>>1));
	max0 = para_value->max0;
	max1 = para_value->max1;
	max2 = para_value->max2;


	///////////////////////////////////////////////////////////////////////
	// for A-law

	// we detected A law codec in GainGain()
	if(para_value->rxAlaw)				// if a-law codec, force RBS0 and 0dB
	{

		// detect A-law RBS	(new for Korea fix - 11/13/98)
		for(i=0; i<6; i++) {
			detRbs[i] = 0;
			para_value->rbs[i] = 1;
			para_value->phGain[i] = 1.5;
		}
		for(j=80; j<90; j++) {

			word ai2linj = getaI2LinTbl(j);

			for(i=0; i<6; i++) {
				ji = ( i<<7 ) + j ;
				if( (lrnTbl[ji] >= ai2linj-128) && 
					(lrnTbl[ji] <  ai2linj+128) ) {
					detRbs[i]++;
				}
			}
		}
		z = 0;
		x_debug_msg("  detRbs[] =");
		for(i=0; i<6; i++) {

			dp_puts_dec(detRbs[i]);

			if(detRbs[i] >= 10) {
				para_value->rbs[i] = 0;
				para_value->phGain[i] = 1.0;
				z++;
			}
		}
		sendCrLf();
		// end of A-law RBS detection

		// similar to uLaw case
		// average phase by same RBS
		temp = (long) (para_value->tblMseFac/6);
		for(i=1; i<120; i++) {
			x32 = 0;
			y32 = 0;
			for(j=0; j<6; j++) {
				if(para_value->rbs[j]) {
					y32 += lrnTbl[(j<<7)+i];
				}
				else {
					x32 += lrnTbl[(j<<7)+i];
				}
			}
			if(z != 0) {
				x32 /= z;
			}
			if(z != 6) {
				y32 /= 6-z;
			}
			avr = 0;
			for(j=0; j<6; j++) {
				ji = ( j<<7 ) + i ;
				if(para_value->rbs[j]) {
					avr += vp_iabs((short int) (lrnTbl[ji] -
											 (short int) y32));
					lrnTbl[ji] = (short int) y32;
				}
				else {
					avr += vp_iabs((short int) (lrnTbl[ji] -
											 (short int) x32));
					lrnTbl[ji] = (short int) x32;
				}
			}
			avr = (long) (temp * avr);
			avr = avr>>1;				// client A-law, half tblMsefac
			levelMse[i] = (word) avr;
		}

		// mse for each level
		// This is the venus version
		lrnTbl[768]=levelMse[0];				// get level MSE
		for(i=0; i<30; i++) {
			k = (byte) (i << 2);
			x = 0;
			for(j=0; j<4; j++) {
				x = (short int) (x + levelMse[k+j]);
			}
			x /= 4;
			for(j=0; j<4; j++) {
				levelMse[k+j] = x;
			}
		}

		sendCrLf();
		x_debug_msg(" LL-m1="); dp_puts_dec(levelMse[28]);
		x_debug_msg("LL-m2=");  dp_puts_dec(levelMse[78]);
		x_debug_msg("LL-m3=");  dp_puts_dec(levelMse[118]); sendCrLf();

		// Even with the korea fix, digital
		// loss is fixed at 0 dB for A law.
		para_value->digLossGain = (float) 1.0;
		para_value->powRatio = Q14>>1;
		para_value->digLoss = 0;
		x_debug_msg("LL-Rbs=");
		for(i=0; i<6; i++)
		{
			dp_puts_dec(para_value->rbs[i]);
		}
		sendCrLf();
		return;
	}  // end of A law processing

	x_debug_msg(" LL-digGain="); dp_puts_dec((word)(digGain>>4));

	// rescale learned table based on digital loss gain
	for(i=1; i<48; i++) {
		for(j=0; j<6; j++) {
			ji = ( j<< 7 ) + i ;
			x = (short int) (((long)digGain*lrnTbl[ji]) >> 14);
			lrnTbl[ji] = x;
		}
	}
	for(i=88; i<120; i++) {
		for(j=0; j<6; j++) {
			ji = ( j<<7 ) + i ;
			x = (short int) (((long)digGain*lrnTbl[ji]) >> 14);
			lrnTbl[ji] = x;
		}
	}


	////////////////////////////////////////////////////////////////////////
	// Output processing

	// use RBS to compensate learned table
	for(i=1; i<120; i++) {
		x32 = 0;
		y32 = 0;
		z = 0;
		max2 = 0;
		for(j=0; j<6; j++) {				// count number of RBS phase
			if(detRbs[j] == 0)
				x32 += lrnTbl[(j<<7)+i];
			else if(detRbs[j] == 1)
				y32 += lrnTbl[(j<<7)+i];
		}
		if(max0 > 1) {						// average same RBS phase
			x32 /= max0;
			for(j=0; j<6; j++) {
				ji = (j<<7) + i ;
				if(detRbs[j] == 0) {
					z = (short int) (z +
									 vp_iabs((short int) (lrnTbl[ji] -
													   (short)x32)));
					lrnTbl[ji] = (short int) x32;
				}
			}
			max2 = (short int) (max2 + max0);
		}
		if(max1 > 1) {						// average same RBS phase
			y32 /= max1;
			for(j=0; j<6; j++) {
				ji = (j<<7) + i ;
				if(detRbs[j] == 1) {
					z = (short int) (z +
									 vp_iabs((short int) (lrnTbl[ji] -
													   (short)y32)));
					lrnTbl[ji] = (short int) y32;
				}
			}
			max2 = (short int) (max2 + max1);
		}
		if( max2 > 1 ) {
			z = (short)((para_value->tblMseFac*z)/max2);
			 levelMse[i] = z;
		}
		else {
			 levelMse[i] = 0;
		}

	}

	if((digGain >> 3) == 0)
	{
		return;
	}

	para_value->powRatio = (short int) (134217728/digGain);

	for(i=0; i<6; i++) {
		para_value->rbs[i] = (byte) detRbs[i];
		if(para_value->rbs[i] == 0)
			para_value->phGain[i] = 1.0;
		else
			para_value->phGain[i] = 1.5;

	}

	para_value->digLossGainDt = digGainDt;		// Q14
	para_value->digLossGain = digGain;		// Q14

	temp = (float)digGain/Q14;
	if (temp >= 0.95)
	{
		para_value->digLoss = 0;
	}
	else
	{
		para_value->digLoss = -1;
	}


	lrnTbl[768]=levelMse[0];				// get level MSE
	for(i=0; i<30; i++) {
		k = (byte) (i << 2);
		x = 0;
		for(j=0; j<4; j++) {
			x = (short int) (x + levelMse[k+j]);
		}
		x /= 4;
		for(j=0; j<4; j++) {
			levelMse[k+j] = x;
		}
	}

	sendCrLf();
	x_debug_msg(" LL-m1="); dp_puts_dec(levelMse[28]);
	x_debug_msg("LL-m2=");  dp_puts_dec(levelMse[78]);
	x_debug_msg("LL-m3=");  dp_puts_dec(levelMse[118]); sendCrLf();
	sendCrLf();

	DP_PUTS("digLossGain=");dp_puts_dec((word)((para_value->digLossGain)>>4));
	DP_PUTS("digLossGainDt=");dp_puts_dec((word)((para_value->digLossGainDt)>>1));
	DP_PUTS("digLoss="); dp_puts_hex(para_value->digLoss);
	DP_PUTS("powRatio="); dp_puts_hex(para_value->powRatio);
	sendCrLf();
	DP_PUTS("rbs=");
	for (i=0; i<6; i++)
	{
		dp_puts_dec(para_value->rbs[i]);
	}
}

// new way, optimized for Z80 (byte parameters)
// this is a search algorithm for digital loss detection
// very similar to binary search
byte vp_UpLevel(
	short int  x,
	const short int *tableArray,	// pointer of table array
	byte tblLen,			// size of table for searching
	byte bitsLen			// number of bits to express the tblLen
	)
{
	byte a1;				// a1 = output
	byte lp, j, k, y;		// local variables

	if (x > tableArray[tblLen-1])
		a1 = tblLen;
	else
	{
		a1 = 0;
		j = tblLen;
		for (lp=0; lp<bitsLen; lp++)
		{
			y = (byte) (j & 0x1);
			j = (byte) (j >> 1);
			k = (byte) (a1 + j);
			y = (byte) (y + k);
			if (x > tableArray[k])
			{
				a1 = y;
			}
		}
	}

	if (a1 >= tblLen)
		a1 = (byte) (tblLen - 1);

	return a1;
}

//=========================================================================
// A/u-law mix case, 0dB/6dB loss detection
const long DetTbl1[6]={11188, 12547, 13906, 15265, 16624, 17983};
#define L		80
#define LL1		88

// Determing 0dB or 6dB if both are detected based on GetGain()
byte vp_DetAMuMix6dB(word *lrnTbl)	// return: 0=0dB, 6=6dB
{
	//---------------------------------------------------------
	// new A-law detect, cover A-law RBSand A/u-law mixing case
	byte i, j, n, x;
	long y32;
	DW32 gain;
	int ii1, ii2;

	x = 0;
	for (i=0; i<6; i++)				// 6 phase
	{
		ii1 = i<<7 ;
		ii2 = ii1 + 78 ;
		if (lrnTbl[ii2] <= 0)
			return 0;	// no learned level here, yikes.

		gain = (10000 << 12) / (DW32)lrnTbl[ii2];

		for (j=L; j<LL1; j=(byte) (j+2))			// 4 levels
		{
			n = (byte) ((j-L)>>1);
			y32 = (long)(gain * (DW32) lrnTbl[ii1+j]) >> 12;

			if (y32 > DetTbl1[n]-170)
				x++;
		}
	}

	return (byte) ((x >= 16) ? 6 : 0);
}


#endif // VPCM_CLIENT
