/*name and version number:@(#)v_utils.c	1.4*/
/*date of get: 		  09/06/00 16:59:34*/
/*date of delta:	  01/12/00 09:27:18*/
/*****************************************************************************
** File        : v_utils.c                                                  *
** Version     : 3.0                                                         *
**---------------------------------------------------------------------------*
** Description :                                                             *
**   This functions in this file are intended to be heavily executed. Recall *
** that making a function non_banked places it in command area 0. This means *
** that there is no need to adjust the memory banking registers so the these *
** routines execute faster.                                                  *
**                                                                           *
**     Function Name    | Access  | Summary                                  *
**  --------------------+---------+----------------------------------------- *
**  interrupt_state     | GLOBAL  | Safe method of Z80 interrupt control     *
**  swap16              | GLOBAL  | Byte-swapping routine for WORDS (2 bytes)*
**  swap32              | GLOBAL  | Byte-swapping code for LWORDS   (4 bytes)*
**                                                                           *
**---------------------------------------------------------------------------*
**                               HISTORY                                     *
** Date            Ver   Dev      Comments                                   *
** 17th Oct  1998  1.0   ELS      Initial Revision                           *
**                                                                           *
**[Release 2]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
** 25th Jan  1999  2.0   RGT  Re-architecting. Removed ftrace(), added in    *
**                            byte-swapping functions for host to network    *
**                            byte order conversions.                        *
**                                                                           *
**[Release 3]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
**  2nd Sep  1999  3.0    JA  CS-4 multi-instance integration                *
**                                                                           *
******************************************************************************/

#include <mqx.h>

#include <v_defs.h>
#include <v_glob.h>
#include <v_utils.h>


/*****************************************************************************
             ###   #      ###   ####    ###   #     ####
            #   #  #     #   #  #   #  #   #  #    #
            #      #     #   #  ####   #####  #     ####  
            #  ##  #     #   #  #   #  #   #  #         #  
            #   #  #     #   #  #   #  #   #  #         #
             ###   #####  ###   ####   #   #  ##### ####
******************************************************************************/
byte IntActive;

byte	traceidx;
word	tracetot;
byte	ofile;
int		oline;


/*****************************************************************************
      ##### #   #  #    #   ####  #####  ###   ###   #    #  ####
      #     #   #  ##   #  #        #     #   #   #  ##   # #
      ####  #   #  # #  #  #        #     #   #   #  # #  #  ####
      #     #   #  #  # #  #        #     #   #   #  #  # #      #
      #     #   #  #   ##  #        #     #   #   #  #   ##      #
      #      ####  #    #   ####    #    ###   ###   #    #  ####
******************************************************************************/


/******************************************************************************
** Function : interrupt_state                                                 *
*******************************************************************************
** Modification History :                                                     *
**                                                                            *
** Date            Ver   Dev  Comments                                        *
** 17th Oct  1998  1.0   ELS  Initial Revision                                *
*******************************************************************************
** Description :                                                              *
**   Provides a means for a C-level program to enable, disable and restore    *
** the previous state of the IFF1 and IFF2 registers (using EI/DI and a       *
** static state variable).                                                    *
**   With this function the user can disable interrupts for a block of code,  *
** then restore the previous interrupt state afterwards:                      *
**                                                                            *
**           ostate = interrupt_state(DI); // ensures interrupts are disabled *
**             .. ATOMIC CODE ..                                               *
**           interrupt_state(ostate);   // restores interrupts to prior state *
**                                                                            *
** NOTES:                                                                     *
**  .1. DO NOT USE enable_interrupt() or disable_interrupt() anywhere in C    *
**  .2. DO NOT CALL interrupt_state() inside an interrupt hander              *
*******************************************************************************
** Arguments :                                                                *
**   ______________________________________________________________________   *
**  | Type     |  arg name  | Description                                  |  *
**  |----------+------------+----------------------------------------------|  *
**  | byte     | state      | 'DI' to disable interrupts, 'EI' to enable   |  *
**   ----------------------------------------------------------------------   *
**                                                                            *
*******************************************************************************/
non_banked byte interrupt_state(byte state)
{
	static	byte EIstate;
	byte	ostate;

	if (IntActive)
		return(DI);

	if (state == EIstate)
		return(state);

	ostate = EIstate;
	if (state == EI) {
		_int_enable();
		EIstate = EI;	
	}
	else {
		_int_disable();
		EIstate = DI;	
	}
	return(ostate);
}

/******************************************************************************
** Function : swap16                                                          *
*******************************************************************************
** Modification History :                                                     *
**                                                                            *
** Date            Ver   Dev  Comments                                        *
** 25th Jan  1999  2.0   RGT  Initial Revision                                *
**                                                                            *
*******************************************************************************
** Description :                                                              *
**                                                                            *
**                                                                            *
*******************************************************************************
** Arguments :                                                                *
**   ______________________________________________________________________   *
**  | Type     |  arg name  | Description                                  |  *
**  |----------+------------+----------------------------------------------|  *
**  | word     | a          | The Word (2 bytes) to swap the byte order of |  *
**   ----------------------------------------------------------------------   *
**                                                                            *
*******************************************************************************/
non_banked word swap16(word a)
{
	byte	  s[2];
	byte	* ptr = (byte *)&a;

	s[1] = ptr[0];
	s[0] = ptr[1];

	return *(word *)&s;
}

/******************************************************************************
** Function : swap32                                                          *
*******************************************************************************
** Modification History :                                                     *
**                                                                            *
** Date            Ver   Dev  Comments                                        *
** 25th Jan  1999  2.0   RGT  Initial Revision                                *
**                                                                            *
*******************************************************************************
** Description :                                                              *
**                                                                            *
**                                                                            *
*******************************************************************************
** Arguments :                                                                *
**   ______________________________________________________________________   *
**  | Type     |  arg name  | Description                                  |  *
**  |----------+------------+----------------------------------------------|  *
**  | byte     | state      | Long word to byte swap                       |  *
**   ----------------------------------------------------------------------   *
**                                                                            *
*******************************************************************************/
non_banked lword swap32(lword a)
{
	byte 	  s[4];
	byte	* ptr = (byte *)&a;

	s[3] = ptr[0];
	s[2] = ptr[1];
	s[1] = ptr[2];
	s[0] = ptr[3];

	return *(lword *)&s;
}


/*********************[ FUNCTION VERSION VERSION TRACKING ]********************

 _____________________________________________________________________________
|                            |            nb_utils.obj  Version               |
|   Function Name            |  2.0 |  2.1 |  2.2 |  2.3 |  2.4 |  2.5 |  2.6 | 
|----------------------------+------+------+------+------+------+------+------|
| interrupt_state            |  1.0 |      |      |      |      |      |      |
|----------------------------+------+------+------+------+------+------+------|
| swap16                     |  2.0 |      |      |      |      |      |      |
|----------------------------+------+------+------+------+------+------+------|
| swap32                     |  2.0 |      |      |      |      |      |      |
 -----------------------------------------------------------------------------

**********************[ FUNCTION VERSION VERSION TRACKING ]********************/

byte
v_get_peer(byte modem)
{
#if !defined(FORUM)
	// pairs
	return (modem & 1) ? (modem - 1) : (modem + 1);

#elif defined(FORUM)
	// talk to self!
	return modem;
#else
	// groups of 8, paired between 2 CS-4's
	byte base = modem & 0xf8;
	byte offset = modem & 0x07;

	if (offset < 4)
	{
		offset += 4;
	}
	else {
		offset -= 4;
	}

	return base | offset;
#endif
}
