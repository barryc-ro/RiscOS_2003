/*name and version number:@(#)cpcptini.c	1.47*/
/*date of get: 		  01/10/01 16:57:55*/
/*date of delta:	  01/10/01 10:42:45*/
/****************************************************************
File : cpcptini.c
Description :
	cp/cpt stuff for V.90/V.92
*****************************************************************/
#define Z80_DEBUG_THIS_FILE

#include "llglob_d.h"
#if defined(VPCM_CLIENT)
#include "Vpcmcnst.h"
#include "allglobs.h"

extern void vp_free_mem(void);

extern void vp_GetLrnTblIndex(
	byte aLaw,		// (i), 0=u-law, 1=A-law
	word *lrnTbl,	// (i), learned table in linear
	word *lrnTbli	// (o), learned table in index
  );

// Alternating robbed bits initialization
extern void vp_AltRbsInit(
	word *lrnTbl,		// (i)
	word *lrnTbli,		// (i)
	byte *rbs,			// (i)
	byte *rbs0Phs,		// (o)
	signed char *rbs0ep1// (o)
	);

extern void vp_AltRbsSlicerTbl(
	word *lrnTbl,			// (i), learned rx table
	byte rbs0Phs,			// (i)
	signed char rbs0ep1,	// (i)	
	word *txBM,				// (i), Rx constellation tables in bit map format
	word *slicerTbl			// (i,o), Slicer tables
	);

extern byte vp_VpcmDesFrmConsTbl(
	CPCPT_PARA_VALUE *para_value,
	word *lrnTbl,			// (i), learned rx table
	word mse,				// (i), measured mse
	byte rbs0Phs,			// (i), for altRBS
	signed char rbs0ep1,	// (i), for altRBS, evenPlus1
	word *txBM,				// (o), Tx constellation tables in bit map format
	word *rxBM,				// (o), Rx constellation tables in bit map format
	word *maxLevel			// (o), max level used in constellation design
	);


/****************************************************************
Routine : vp_cpcptini
Description :
	CP and CPt calculations and download
*****************************************************************/
void vp_cpcptinit (
		word *lrnTbl,
		CPCPT_PARA_VALUE *para_value
		)
{
	word txBM[48], rxBM[48];
	word t = x_current_time();

	// Wait for the DSP to be ready
	while (rram(DP_ADD_HOST) != para_value->ready)
	{
		if (x_elapsed_time(t) > SECOND10)
		{
			x_debug_msg("cpcptinit-timeout error");
			return;
		}
	}

	vp_calculate_tables(lrnTbl, para_value, txBM, rxBM);
	vp_download_tables(para_value, txBM, rxBM);
}

/****************************************************************
Routine : vp_calculate_tables()

	Calculate constellation tables
*****************************************************************/
void vp_calculate_tables(
		word *lrnTbl,
		CPCPT_PARA_VALUE *para_value,
		word *txBM,
		word *rxBM
		)
{
	word maxLev, cnstMse, t = x_current_time();
	byte rbs0Phs, x;
	signed char rbs0ep1;

	word t1;

	para_value->mse = 0;

	// max rate stuff.  At this point we assume
	// that vp_slice() has filled in para_value->maxRate
	if (1 == S.ModemOptions.Rate56K)
	{
		if (para_value->cpt == 0)
		{
			word oldMSE = rram(DP_V90_MSE);

			x_debug_msg(" LL-mse-503="); dp_puts_hex(oldMSE);
			x_debug_msg("LL-mse-04c="); dp_puts_hex(rram(DP_MSE_LOC));
			sendCrLf();

			// only use dsp 8 level mse for the 1st fast rate change
			// if the the aggressive connection enabled ( S17 = 1 )
			if ( ( G(lastRetrain) == 0x2 )
				&& ( G(S).ModemOptions.Aggressive_Connection_Enable == 1)
				&& ( G(x_status).LocalRR == 1 )
				&& ( G(x_status).LocalRetrain == 0 ) )
			{
				//use dsp mse8lev for 1st rate change
				para_value->mse = rram(0x500);
			}
			else
			{
#ifdef LESS_AGGRESSIVE
				// to make loop 5 less aggressive due to too many retrains
				//	after connection that causes login failure
				if ( rram(0x1ffe) && (para_value->rxAlaw == 0) )
				{
					// in loop 5 and ulaw
					word temp = rram(0x500);

					para_value->mse = temp + temp/4;
					x_debug_msg(" in loop 5, mse used here =");
					dp_puts_hex(para_value->mse);
					sendCrLf();
				}
				else
#endif	//LESS_AGGRESSIVE
				{
					para_value->mse = oldMSE;
				}
			}

			// if we're falling forward, try whatever rate
			// the fallforward guy has in mind.
			if (0 == dp_v90_ff.secs)
				para_value->mse = 0;
		}
	}
	else
	{
		// fixed rate
		x = (byte) (S.ModemOptions.Rate56K - 1);
		if (x > 22)
			x = 22;	// can't be higher than 56.0 kbps!

		para_value->maxRate = x;
	}

	Wram(DP_ADD_MAXRATE, para_value->maxRate);

	// read parameters from DSP ram
	para_value->aLaw = (byte) rram(DP_ADD_ALAW);	
	para_value->maxPow = dp_read_dsp_ram(DP_ADD_MAXPOW);
	if(para_value->maxPow < 20 )
		para_value->maxPow = 20;
	para_value->powCmpst = dp_read_dsp_ram(DP_ADD_POWCMPST);
	para_value->sr = (byte) rram(DP_ADD_SR);

	cnstMse = (word)(para_value->mse * para_value->dspMseFac);

	vp_GetLrnTblIndex(para_value->rxAlaw, lrnTbl, lrnTbli);
	sendCrLf();
	x_debug_msg("done with GetLrnTblIndex time=");
	dp_puts_dec(x_elapsed_time(t));
	sendCrLf();

	vp_AltRbsLrnTbli(lrnTbl, lrnTbli);
	x_debug_msg("done with AltRbsLrnTbli time=");
	dp_puts_dec(x_elapsed_time(t));
	sendCrLf();

	vp_AltRbsInit(
		lrnTbl,						// (i), level learning based table
		lrnTbli,					// (i)
		para_value->rbs,
		&rbs0Phs,
		&rbs0ep1
      );

	// calculate CPt constellation and slicer table
	cnstMse = (word)(para_value->mse * para_value->dspMseFac);

	t1 = x_current_time();
	para_value->pass = (byte) vp_VpcmDesFrmConsTbl(
		para_value,
		lrnTbl,			// (i), level learning based table
		cnstMse,		// (i), (scaled) mse
		rbs0Phs,		// (i), for altRBS
		rbs0ep1,		// (i), for altRBS, evenPlus1
		txBM,			// (o), txBM[48], Tx constellation tables in bit map
		rxBM,			// (o), rxBM[48], Rx constellation tables in bit map
		&maxLev
	);
	sendCrLf();
	x_debug_msg("done with VpcmDesFrmConsTbl time=");
	dp_puts_dec(x_elapsed_time(t1));
	sendCrLf();

	if (para_value->pass == FALSE)
	{
		x_debug_msg("vp_VpcmDesFrmConsTbl fails, fallback to v34");
		sendCrLf();
		vp_free_mem();
		dp_56k_fallback();
		return ;
	}
	
	vp_AltRbsSlicerTbl(
		lrnTbl,						// (i), level learning based table
		rbs0Phs,
		rbs0ep1,
		txBM,			// (o), rxBM[48], Rx constellation tables in bit map
		para_value->STbl		// (o), para_value->STbl[600], Slicer tables
    );

	// Initialize CPt header 
	vp_HeaderInit(para_value, txBM, rxBM);

	vp_GetMdist(para_value);

#if defined(Z80_DEBUG_PRINT)
	if (para_value->cpt)
 		DP_PUTS("CPt");
	else
 		DP_PUTS("CP");

	x_debug_msg(" V.9x Constellation calculated");
	
	x_debug_msg("maxLevel="); dp_puts_dec(maxLev);
	para_value->maxLev = maxLev;

	vp_SaveResult(para_value, txBM, rxBM);
#endif

	x_debug_msg("done with vp_calculate_tables time=");
	dp_puts_dec(x_elapsed_time(t));
	sendCrLf();
}

/****************************************************************
Routine : vp_download_tables()

	Download constellation tables to DSP
*****************************************************************/
void vp_download_tables(
		CPCPT_PARA_VALUE *para_value,
		word *txBM,
		word *rxBM
		)
{
	int slicerSize[6];
	int x;
	byte i;
	word t = x_current_time();
	word dsp_addr[6], i100;

    Wram(DP_ADD_RATE,para_value->rate);	// download the best rate
	vp_DownLoad(para_value->Header,DP_ADD_HEADER,7);

	vp_DownLoad(txBM,DP_ADD_TXBM,48);// download the Tx Bit maps
	vp_DownLoad(rxBM,DP_ADD_RXBM,48);// download the Rx Bit maps

	for (i=0; i<6; i++)
	{
		slicerSize[i] = para_value->STbl[100*i] + 3;
	}

	if (para_value->cpt==1)
	{
		// download the Tx Bit maps
		vp_DownLoad(rxBM,(word) (DP_ADD_TXBM+8), 8);

		Wram(DP_ADD_JVAL, para_value->JVAL);
		Wram(DP_ADD_JVAL+1, 19);

		// CPt addresses
		dsp_addr[0] = 0x27ce;	// slicer table 0
		dsp_addr[1] = 0x27d8;	// table 1
		dsp_addr[2] = 0x27e2;	// table 2
		dsp_addr[3] = 0x27ec;	// table 3
		dsp_addr[4] = 0x27f6;	// table 4
		dsp_addr[5] = 0x27c4;	// table 5
	}
	else
	{
		// CP addresses
		dsp_addr[0] = 0x2530;	// table 0
		dsp_addr[1] = 0x2594;	// table 1
		dsp_addr[2] = 0x25f8;	// table 2
		dsp_addr[3] = 0x265c;	// table 3
		dsp_addr[4] = 0x26c0;	// table 4
		dsp_addr[5] = 0x24cc;	// table 5
	}

	for (i=0, i100=0; i<6; i++, i100 += 100)
	{
		// Save robbed bit values.  (we only need to do this for CPt
		// but it doesn't hurt to save it for CP as well.  (This
		// doesn't seem to work. - maybe shifting issue mah 11/17/00)
		Wram(DP_V90_ADD_RBS+i, para_value->rbs[(i+5)%6]);

		vp_DownLoad(para_value->STbl+i100,
					dsp_addr[i],
					para_value->STbl[i100]+3);
	}
	Wram(DP_ADD_JVAL, para_value->JVAL);
	Wram(DP_ADD_JVAL+1, 19);

	vp_DownLoad(para_value->mLev,DP_ADD_MLEV,6); 
    Wram(DP_ADD_MDIST, para_value->mdist/2);		// minimum distance
    Wram(DP_ADD_DIGLOSS, para_value->digLoss);		// digital loss

	x = (int)(para_value->digLossGain);
	Wram(DP_ADD_DIGLOSSGAIN, x);

	x_debug_msg("DIGLOSSGAIN (0x1ffd) dec =");
	dp_puts_dec((word)((x)>>4));
	x_debug_msg(", hex =");
	dp_puts_hex((word)(x));

    Wram(DP_ADD_HOST,0x8001);   // s_ptr_done
	sendCrLf();
	x_debug_msg("Done with vp_download_tables time=");
	dp_puts_dec(x_elapsed_time(t));
	sendCrLf();
}

/****************************************************************
Routine : vp_HeaderInit

	Initialize para_value->Header, the CP/CPt header
*****************************************************************/
void vp_HeaderInit
	(
	CPCPT_PARA_VALUE *para_value,
	word *txBM,
	word *rxBM
	)
{
	byte i;

	if (para_value->cpt)
	{
		if (para_value->sr == 0)
			para_value->Header[0] = 0x0028;
		else if (para_value->sr == 1)
			para_value->Header[0] = 0x0024;
		else if (para_value->sr == 2)
			para_value->Header[0] = 0x0020;
		else
			para_value->Header[0] = 0x001c;
	}
	else 
		para_value->Header[0]= (word) (para_value->rate*4+2);  // CP selected

	// spectral shaping
	if (para_value->sr == 1)
		para_value->Header[0] |= 0x2000;
	else if (para_value->sr == 2)
		para_value->Header[0] |= 0x4000;
	else if (para_value->sr == 3)
		para_value->Header[0] |= 0x6000;

	para_value->Header[1]=0x1ffe;		// only 33600 is not supported
	para_value->Header[2]=para_value->powRatio;
    para_value->Header[3]=0x0040;		//  a1=1 a2=0
    para_value->Header[4]=0x0000;		//  b1=0 b2=0


	if (!para_value->cpt)
	{
		// CP
		para_value->Header[5]=0x3210;		// constel patt 0000  
		para_value->Header[6]=0x0054;		// txBM=rxBM
		para_value->JVAL = 55;
		for (i=0; i<48; i++)
		{
			if (txBM[i] != rxBM[i])
			{
				para_value->Header[6]=0x0154;	// txBM != rxBM
				para_value->JVAL = 103;
				break;
			}
		}
	}
	else
	{
		// CPt
		para_value->Header[5]=0x0000;
		para_value->Header[6]=0x0000;
		para_value->JVAL = 15;
		for (i=0; i<48; i++)
		{
			if (txBM[i] != rxBM[i])
			{
				para_value->Header[6]=0x0100;	// txBM != rxBM
				para_value->JVAL = 23;
				break;
			}
		}
	}
}

/****************************************************************
Routine : vp_GetMdist() - get minimum distance for
		this constellation.
*****************************************************************/
void vp_GetMdist(CPCPT_PARA_VALUE *para_value)
{
	int j, x;
	float y;
	byte i;
	int i100, i1002;

	para_value->rxBMpower = 0;

	para_value->mdist = 0x7fff;

	for (i=0; i<6; i++)
	{
		if (altRBS[i] != 3)
		{
			i100 = 100 * i;
			i1002 = i100 + 2;
			for (j=0; j<para_value->mLev[i]; j++)
			{
				if (j == 0)
					x = 2*para_value->STbl[i1002];
				else
					x = para_value->STbl[i1002+j] -
						para_value->STbl[i100+1+j];
				if (x < para_value->mdist)
					para_value->mdist = (word) x;
				para_value->rxBMpower += ((double)para_value->STbl[i1002+j]*
					(double)para_value->STbl[i1002+j])/64;
			}
		}
	}

	y = 0;
	for (i=0; i<6; i++)
	{
		if (altRBS[i] != 3) 
		{
			y += (float)para_value->mLev[i];
		}
	}
	para_value->rxBMpower = ((para_value->rxBMpower)*4) /(double)(y/16); //msm//
}

#if defined(Z80_DEBUG_PRINT)
/****************************************************************
Routine : vp_SaveResult() - print out debugging info
*****************************************************************/
void vp_SaveResult(
		CPCPT_PARA_VALUE *para_value,
		word *txBM,
		word *rxBM
	)

{
	int i, j;
	byte *rbs=para_value->rbs;
	word *CpHeader=para_value->Header;
	word *mLev=para_value->mLev;
	int i87, i100, i8;

	if (para_value->cpt) { 
		x_debug_msg("V.90 CPt");
	}
	else
	{
		x_debug_msg("V.90 CP");
	}
		
	x_debug_msg("aLaw="); dp_puts_dec(para_value->aLaw);
	x_debug_msg("rxALaw="); dp_puts_dec(para_value->rxAlaw);
	x_debug_msg("testFlag="); dp_puts_dec(para_value->testFlag);
	x_debug_msg("tblMseFac="); dp_puts_dec((word)para_value->tblMseFac); //msm//
	sendCrLf();
	x_debug_msg("dspMseFac="); dp_puts_dec((word)para_value->dspMseFac); //msm//
	x_debug_msg("JVAL="); dp_puts_dec(para_value->JVAL);
	x_debug_msg("powRatio="); dp_puts_hex(para_value->powRatio);
	x_debug_msg("digLoss="); dp_puts_sdec(para_value->digLoss);
	sendCrLf();
	x_debug_msg("dLossGain="); dp_puts_sdec((para_value->digLossGain)>>4);
	x_debug_msg("dLGainDt="); dp_puts_sdec((para_value->digLossGainDt)>>1);
	x_debug_msg("\r\nrbs[6]=");
	for (i=0; i<6; i++)
	{
		dp_puts_dec(rbs[i]);
	}

	x_debug_msg("     altRBS[6]=");
	for (i=0; i<6; i++)
	{
		dp_puts_dec(altRBS[i]);
	}

	sendCrLf();
	x_debug_msg("mse="); dp_puts_dec(para_value->mse);
	x_debug_msg("maxRate="); dp_puts_dec(para_value->maxRate);
	x_debug_msg("maxPow="); dp_puts_dec(para_value->maxPow);
	x_debug_msg("powCmpst="); dp_puts_dec(para_value->powCmpst);
	x_debug_msg("cpt="); dp_puts_dec(para_value->cpt);

	x_debug_msg("\r\nCpHeader  =");
	for (i=0; i<7; i++)
	{
		dp_puts_hex(CpHeader[i]);
	}

	x_debug_msg("\r\nrate(drn) ="); dp_puts_dec(para_value->rate);
	x_debug_msg("sr="); dp_puts_dec(para_value->sr);

	x_debug_msg("mLev[6]=");
	for (i=0; i<6; i++)
	{
		dp_puts_dec(mLev[i]);
	}
	sendCrLf();
	x_debug_msg(" maxLevel="); dp_puts_dec(para_value->maxLev);

	x_debug_msg(" mdist="); dp_puts_dec(para_value->mdist);

	x_debug_msg(" pass="); dp_puts_dec(para_value->pass);
	sendCrLf();

	// print bitmaps
	if (S.ModemOptions.Dummy20 & BIT0)
	{
		x_debug_msg("\r\ntxBM = ");
		for (i=0; i<6; i++) {
			i87 = (i<<3) + 7;
			for (j=0; j<8; j++) {
				dp_puts_hex(txBM[i87-j]);
			}
			sendCrLf();
		}

		x_debug_msg("\r\nrxBM = ");
		for (i=0; i<6; i++) {
			i87 = (i<<3) + 7;
			for (j=0; j<8; j++) {
				dp_puts_hex(rxBM[i87-j]);
			}
			sendCrLf();
		}
	}
	
	// print slicer tables.
	if (!para_value->cpt && (S.ModemOptions.Dummy20 & BIT1))
	{
		x_debug_msg("\r\nslicerTbl= ");
		for (i=0; i<6; i++) {
			i100 = 100 * i;
			for (j=0; j<mLev[i]+2; j++) {
				dp_puts_dec(para_value->STbl[i100+j]);
				if (j%12 == 11)
					sendCrLf();
			}
			sendCrLf();
		}
	}
	// print MSE array
	if (!para_value->cpt && (S.ModemOptions.Dummy20 & BIT2))
	{
		x_debug_msg("\r\nMSE array= ");
		for (i=0; i<15; i++)
		{
			i8 = i<<3;
			for (j=0; j<8; j++)
			{
				dp_puts_dec(levelMse[i8+j]);
			}
			sendCrLf();
		}
	}

	x_debug_msg(" SaveResult done");
}
#endif // Z80_DEBUG_PRINT

/****************************************************************
Routine : vp_AltRbsSlicerTbl
*****************************************************************/
void vp_AltRbsSlicerTbl
  (
	word *lrnTbl,			// (i), learned rx table
	byte rbs0Phs,			// (i)
	signed char rbs0ep1,	// (i)	
	word *txBM,				// (i), Rx constellation tables in bit map format
	word *slicerTbl			// (i,o), Slicer tables
  )
{
	int n=-1; //msm// , ep1=0;
	int x, ps=-1, ls, ar, sPtr, index, lev;
	byte i, j, k;
	int pssPtr, n8, n8i;

	if (rbs0ep1 == -1)
		return;

	ls = rbs0Phs<<7;

	for (n=0; n<6; n++)
	{
		ps = 100 * n ;
		sPtr = 2;
		index = -1;
		n8 = n<<3;
		if (altRBS[n] == 3)
		{
			ar = n<<7;
			slicerTbl[ps] = (word) ((slicerTbl[ps]<<1) + 1);
			slicerTbl[ps+1] += 1;
			for (i=0; i<8; i++)
			{
				n8i = n8 + i;
				for (j=0; j<16; j++)
				{
					pssPtr = ps + sPtr;
					index++;
					lev = (txBM[n8i] >> j) & 0x01;
					if (lev)
					{
						x = lrnTbli[ar+index];
						for (k=index; k>0; k--) {
							if (lrnTbli[ar+k] == x)
								slicerTbl[pssPtr] = lrnTbl[ls+k];
							else
								break;
						}
						sPtr++;
						pssPtr = ps + sPtr;
						for (k=index; k<120; k++)
						{
							if (lrnTbli[ar+k] == x)
								slicerTbl[pssPtr] = lrnTbl[ls+k];
							else
								break;
						}
						sPtr++;
						pssPtr = ps + sPtr;
					}
				}
			}
		}
	}
}

/****************************************************************
Routine : vp_AltRbsInit
*****************************************************************/
void vp_AltRbsInit
  (
	word *lrnTbl,		// (i)
	word *lrnTbli,		// (i)
	byte *rbs,			// (i)
	byte *rbs0Phs,		// (o)
	signed char *rbs0ep1// (o)
  )
{
	byte i, j;
	int ps=-1, lev;
	int k, cnt, pn0, pn3; 
	int psi;

	for (i=0; i<6; i++)
	{
		if (rbs[i] == 0) 
			*rbs0Phs = i;
	}

	// check if false detection for altRBS
	pn0 = (*rbs0Phs)<<7;
	for(i=0; i<6; i++) {
		if(altRBS[i] == 3) {
			cnt=0;
			pn3 = i<<7;
			for(k=80; k<100; k++) {
				if(lrnTbli[pn0+k] == lrnTbli[pn3+k])
				{
					cnt++;
				}
			}

			if(cnt >= 17) {
				altRBS[i] = 2;
				rbs[i] = 0;
			}
			else {
				ps = i<<7;
			}
		}
	}

	if (ps == -1)
	{
		*rbs0ep1 = -1;
		return;
	}

	j = 0;
	for (i=78; i<88; i+=2)
	{
		psi = ps + i;
		lev = vp_iabs((short int) (lrnTbl[psi] - lrnTbl[psi + 1]));
		lev -= vp_iabs((short int) (lrnTbl[psi] - lrnTbl[psi - 1]));
		if (lev < 0)
			j++;
	}

	if (j >= 3)
		*rbs0ep1 = 1;
	else
		*rbs0ep1 = 0;
}

#endif // VPCM_CLIENT
