/*name and version number:@(#)dpfdsp.c	1.60*/
/*date of get: 		  09/11/00 16:48:53*/
/*date of delta:	  09/11/00 13:57:05*/
/****************************************************************
File :	dpfdsp.c
Description :
	Contains all voice - speaker phone functions.

Procedures Contained :
	dp_init_hdsp
	dp_init_fdsp
	dp_start_spkphone
	dp_start_hdsp
	dp_switch_hdsp
	dp_start_fdsp
	dp_switch_fdsp
	dp_mute_fdsp
	dp_stop_fdsp
	dp_spk_echotest
	dp_init_fax_data_detect
	dp_detect_fax_data
	dp_start_hdsp_tone_det
	dp_start_fdsp_tone_det

Revision History :
	Initials	Date		Change
	  AV       	12/04/95	Initial
*****************************************************************/

#include "llglob_d.h"
#include "dpglob.h"
#include "ioglob_d.h" 

#ifdef V8BIS
#include "sync.h"
#endif
#ifdef AM_DEBUG
 #include "amdebug.h"
#endif
#include "allglobs.h"

#ifdef VOICE

extern byte dp_fax_tone_detected ( void );
extern byte dp_data_tone_detected ( void );

#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
/****************************************************************
Routine : dp_read_dtmf_level
Description : Read and save dtmf linear levels required for
			  DTMF dialing in speakerphone mode.
*****************************************************************/
void dp_read_dtmf_level (void)
{
	dp_write_dsp_ram (0x11, G(S).ModemOptions.DtmfLevel) ; // tone1 power 
	dp_write_dsp_ram (0x12, (word)(G(S).ModemOptions.DtmfLevel + G(S).ModemOptions.DtmfToneDiff) ) ;	// tone2 power
	dp_modem_command ( DTMF_DIALING, 0, 0 ) ;
	G(dp_dtmf_high_level) = dp_read_dsp_ram(0x14) ;
	G(dp_dtmf_low_level) = dp_read_dsp_ram(0x15) ;
}

/****************************************************************
Routine : dp_init_hdsp
Description : Initialize speaker phone in HDX mode.
*****************************************************************/
void dp_init_hdsp ( void )
{
	dp_write_dsp_ram ( AECMAX_CNTR_ADDR, 0x21 ) ;
	dp_write_dsp_ram ( AEC_FRAME_LENGTH_ADDR, 0xfffd ) ;
	dp_write_dsp_ram ( MUTE_SWITCH_ADDR, 0x8100 ) ;
	dp_write_dsp_ram ( ASR_ADDR, 0x0800 ) ;
	dp_write_dsp_ram ( AGC_SPKR_GAIN_ADDR, 0x0400 ) ;// AGC nominal gain
	dp_write_dsp_ram ( IDLE_MUTE_ADDR, 0x1000 ) ;	 // idle muting
	dp_write_dsp_ram ( IDLE_SPEED_ADDR, 0x0008 ) ;	//idle speed
	dp_write_dsp_ram ( SPKR_THRESHOLD_ADDR, 0x4000 ) ; //speaker agc threshold
	dp_write_dsp_ram ( 0x747, 0x14 ) ;
	dp_write_dsp_ram ( 0x86c, 0x20 ) ;

	dp_write_dsp_ram ( 0x71e, 0x4000 ) ;
	
	x_debug_msg("HDSP_INIT_V34");

}

/****************************************************************
Routine : dp_init_fdsp
Description : Initialize speaker phone in FDX mode.
*****************************************************************/
void dp_init_fdsp ( void )
{
	dp_write_dsp_ram ( 0x86, 0x00 ) ;	// disable iir
	dp_write_dsp_ram ( SPKR_THRESHOLD_ADDR, 0x9a54 ) ;	//speaker agc threshold
	dp_write_dsp_ram ( 0x86c, 0x20 ) ;
	dp_write_dsp_ram ( AEC_FRAME_LENGTH_ADDR, 0xfff8 ) ; // AEC transfer count  

	x_debug_msg("INIT_FDSP_V34");
}

/****************************************************************
Routine : dp_start_hdsp_tone_det
Description : Initialize speaker phone in fdsp with tone detectors on
*****************************************************************/
void dp_start_hdsp_tone_det(void)
{
	dp_read_dtmf_level () ;
	dp_modem_idle_cmd () ;
	// modem state must be set to off-hook : to allow speaker phone dialing
	// - see atd command
	G(x_modem_state) = MS_OFFHOOK ;
	dp_start_hdsp () ;
	dp_init_fax_data_detect () ;
}
/****************************************************************
Routine : dp_start_fdsp_tone_det
Description : Initialize speaker phone in fdsp with tone detectors on
*****************************************************************/
void dp_start_fdsp_tone_det(void)
{
	dp_modem_idle_cmd () ;
	dp_offhook_cmd () ;
	// modem state must be set to off-hook : to allow speaker phone dialing
	// - see atd command
	G(x_modem_state) = MS_OFFHOOK ;
	dp_start_fdsp () ;
	dp_init_fax_data_detect () ;
}

/****************************************************************
Routine : dp_start_spkphone 
Description : Initialize speaker phone 
*****************************************************************/
void dp_start_spkphone ( byte mode)
{
	G(conv_record) = FALSE ; // Set conversation record off

	// 4/16/99 - mah - removed kortex-specific command here
	// for changing mercury gain.
	// Increase mercury tx gain...
	dp_change_mercury_gain(G(S).ModemOptions.LineGainAMSB,		// CIOCA MSB
						   G(S).ModemOptions.LineGainALSB,		// CIOCA LSB
						   G(S).ModemOptions.FdspLineGainBMSB, // CIOCB MSB
						   G(S).ModemOptions.LineGainBLSB);	// CIOCB LSB

	dp_write_dsp_ram ( 0x86, 0x00 ) ;	// disable iir
	dp_modem_command ( MODEM_IDLE, 0, 0 ) ;
	dp_download_fdsp() ;
	x_output ( IO_SPEAKER_OFF ) ;
	x_output ( IO_EXT_SPEAKER_ON ) ;
	x_output ( IO_AUDIO_CODEC_ON ) ;

	dp_write_dsp_ram ( 0x800, 0x1c ) ;

	if ( mode == 0 ) 		//HDX mode
	{
		dp_apollo_command(FDSP_CMD, 0, 0xe0, 0x10, 0x96, 0xa7, 0x81, 0x04);
		dp_init_hdsp();	
	}
	else					//FDX mode
	{
		dp_apollo_command(FDSP_CMD, 0, 0xe0, 0x10, 0x96, 0xa7, 0xc1, 0x04);
		dp_init_fdsp();	
	}

	dp_write_dsp_ram ( MIC_GAIN_ADDR, G(S).ModemOptions.SpeakerphoneMicGain ) ;

	dp_write_dsp_ram ( AGC_SPKR_GAIN_ADDR, 0x400 ) ;  // AGC nominal spk gain

#ifdef KORTEX
	dp_regandor (0xDA, 0xef, 0x10);	// ICS2 commute en BIOA5 petit bug qui
									//  rend les boutons inaccessibles
#endif
}

/****************************************************************
Routine : dp_start_hdsp
Description : Start speaker phone in HDX mode.
*****************************************************************/
void dp_start_hdsp ( void )
{
	dp_start_spkphone(0) ;

	dp_write_dsp_ram ( 0x85, 0x0905 ) ;		// clear HEC 
	dp_write_dsp_ram ( 0x85, 0x9205 ) ;		

	dp_set_speakerphone_gain () ;

	// Change mic AGC limiting threshold to -12.5 dBm
	dp_write_dsp_ram ( AGC_MIC_GAIN_ADDR, 0x0B6A ) ;

	x_debug_msg("DP - voice start hdsp");
}

/****************************************************************
Routine : dp_switch_hdsp
Description : Swtch speaker phone to HDX mode.
*****************************************************************/
void dp_switch_hdsp ( void )
{
	dp_write_dsp_ram ( 0x86, 0x00 ) ;	// disable iir

	dp_init_hdsp() ;

	dp_write_dsp_ram ( 0x85, 0x0905 ) ;		// clear AEC 
	dp_write_dsp_ram ( 0x85, 0x9205 ) ;		
	dp_write_dsp_ram ( FDSP_CNTRL_ADDR, 0x8104 ) ;		
	dp_write_dsp_ram ( MUTE_SWITCH_ADDR, 0x8020 ) ;		

	dp_set_speakerphone_gain () ;

	if ( G(conv_record) == TRUE ) // conversation record on
		dp_fdsp_record_start ( ) ;

	x_debug_msg ("FDSP - start recording") ;

	x_debug_msg("DP - voice switched to hdsp");
}

/****************************************************************
Routine : dp_start_fdsp
Description : Start speaker phone in FDX mode.
*****************************************************************/
void dp_start_fdsp ( void )
{
	dp_start_spkphone(1) ;
	dp_set_speakerphone_gain () ;

	x_debug_msg("DP - voice start fdsp");
}

/****************************************************************
Routine : dp_switch_fdsp
Description : Swtch speaker phone to FDX mode.
*****************************************************************/
void dp_switch_fdsp ( void )
{

	dp_write_dsp_ram (0x97, 0x0000) ; 	
	dp_init_fdsp() ;
	dp_write_dsp_ram ( 0x85, 0x9f05 ) ;		

	dp_write_dsp_ram ( FDSP_CNTRL_ADDR, 0xc004 ) ;		
	dp_set_speakerphone_gain () ;

	if ( G(conv_record) == TRUE ) // conversation record on
		dp_fdsp_record_start ( ) ;

	x_debug_msg("DP - voice switched to fdsp");
}

/****************************************************************
Routine : dp_mute_fdsp
Description : Mute mic during speaker phone operation.
*****************************************************************/
void dp_mute_fdsp ( byte on_off )
{
	if ( on_off == FDSP_MUTE )
		dp_write_dsp_ram ( MIC_GAIN_ADDR, 0x00 ) ; // mic muted 
	else //(on_off == FDSP_UNMUTE)
	dp_write_dsp_ram ( MIC_GAIN_ADDR, G(S).ModemOptions.SpeakerphoneMicGain );
}

/****************************************************************
Routine : dp_stop_fdsp
Description : stop speaker phone operation.
*****************************************************************/
void dp_stop_fdsp ( void )
{
	// clear the voice bit for speaker phone exit
	dp_modem_command ( MODEM_IDLE, 0, 0 ) ; // exit speaker phone
	x_output ( IO_AUDIO_CODEC_OFF ) ;
	x_debug_msg ("DP - voice fdsp stoped ");
	// Following line is a workaround for v.21 startup problem
	// after speakerphone dsp download.
	dp_modem_command ( 0x27, 0x01, 0 ) ; // disable call progress.

	// Reset mercury tx gain 
	dp_set_mercury_gain();
#ifdef V8BIS
	if ( G(S).ModemOptions.V8bis == V8BIS_DTE_CONTROL )
	{
		// DTE controlled V.8bis negotiation enabled
		v8bis_init () ;
	}
#endif //V8BIS
}

/****************************************************************
Routine : dp_spk_echotest
Description : Adjusts speakerphone parameters 
*****************************************************************/
void dp_spk_echotest ( void )
{
}

/****************************************************************
Routine :  dp_save_aec_coef
Description : Saves speaker phone AEC coefficients to buffer
			  This function is used for temporarily saving
			  aec coeffients
*****************************************************************/
void dp_save_aec_coef( void )
{
	dp_modem_command(FDSP_SAVE_AEC_COEF,0,0);
}	
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM

/****************************************************************
Routine : dp_init_fax_data_detect
Description : Initialize fax & data tone detection 
*****************************************************************/
void dp_init_fax_data_detect ( void )
{
	dp_write_dsp_ram (0x10, 0x32) ; 	/* linear threshold = -43 dB */
	dp_write_dsp_ram (TONE_THRESHOLD_ADDR, 0x32) ; // linear threshold = -43 dB

	dp_write_dsp_ram (RTOTAL_TONE_ADDR, 0xfff9) ;   // look for 8 tones
	dp_write_dsp_ram (0x1c, F1100C8 ) ;     // fax calling tone 
	dp_write_dsp_ram ( 0x1d, F1300C8 ) ;    // data calling tone 
	dp_write_dsp_ram (0x1e, F2312_5C8 ) ; 	// 8Khz, Radish Start tone
	dp_write_dsp_ram ( 0x1f, F2912_5C8 ) ; 	// 8KHz, Radish Start tone
	dp_write_dsp_ram (0x20, F1180C8) ;  // 8Khz, v8 tone ( binary 0 ) 1180 hz 
	dp_write_dsp_ram (0x21, F980C8) ;   // 8Khz, v8 tone ( binary 1 ) 980 hz 

#ifdef V8BIS
	if ( G(V8bis_Options).V8bis_Sig_En == 0 )	// look for initiating tones
	{
		x_debug_msg ( "dpv8bis - setup to detect v8bis init. dual tones" );
		dp_write_dsp_ram (0x22, F_1375_C8) ;  // v8bis dual tone 1375 hz
		dp_write_dsp_ram (0x23, F_2002_C8) ;  // v8bis dual tone 2002 hz
	}
	else
	{
		x_debug_msg ( "dpv8bis - setup to detect v8bis resp. dual tones" );
		dp_write_dsp_ram (0x22, F_1529_C8) ;  // v8bis dual tone 1529 hz
		dp_write_dsp_ram (0x23, F_2225_C8) ;  // v8bis dual tone 2225 hz
	}
#endif	//V8BIS

	G(dp_voice_timer1) = x_current_time () ;
	G(dp_voice_timer2) = x_current_time () ;
	G(dp_fax_tone_on) = 0 ;
	G(dp_fax_tone_off) = 0 ;
	G(dp_data_tone_on) = 0 ;
	G(dp_data_tone_off) = 0 ;
	G(dp_fax_tone_state) = DP_ENERGY_OFF ;
	G(dp_data_tone_state) = DP_ENERGY_OFF ;
}

/****************************************************************
Routine : dp_detect_fax_data
Description : Detect fax and data tones 
*****************************************************************/
void dp_detect_fax_data ( void )
{
	byte dp_event_code[2] ;

	G(dp_reg16) = (byte)  dp_read_dsp_ram ( 0x28 ) ;
	dp_event_code[0] = 0x10 ;	// DLE
	if ( dp_fax_tone_detected () == TRUE )
	{
		x_debug_msg ( "dp - fax calling tone detected" ) ;
		dp_event_code[1] = 0x63 ;		// "c" 
		x_send_mail ( AT_IO_DATA, IO_TASK, dp_event_code, 2 ) ;
	}
	else if ( dp_data_tone_detected () == TRUE )
	{
		x_debug_msg ( "dp - data calling tone detected" ) ;
		dp_event_code[1] = 0x65 ;		// "e"
		x_send_mail ( AT_IO_DATA, IO_TASK, dp_event_code, 2 ) ;
	}
}

#if (DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
/****************************************************************
Routine : dp_set_speakerphone_gain
Description : Set volume gain levels for speaker for speaker phone
*****************************************************************/
void dp_set_speakerphone_gain ( void )
{
	byte i;

	G(dp_spk_volume) =	(word) (G(S).ModemOptions.VoiceVolumeControl << 5 );

	if ( ( ( dp_read_dsp_ram ( FDSP_CNTRL_ADDR ) & 0x4000 ) != 0 ) // in fdsp
		&& ( G(dp_spk_volume) > 0 ) )
	{
		if ( G(dp_spk_volume) < 0x800 )
			G(dp_spk_mute) = (word) (0x4000 - ( G(dp_spk_volume) << 2 ));
		else if ( G(dp_spk_volume) < 0x1000 )
			G(dp_spk_mute) = (word) (0x3000 - ( G(dp_spk_volume) << 1 ));
		else
			G(dp_spk_mute) = (word) (0x1800 - ( G(dp_spk_volume) >> 1 ));

		if ( G(S).ModemOptions.VoiceMicGainControl > 128 ) 
		{
			for ( i=0; (i < ( G(S).ModemOptions.VoiceMicGainControl - 128 )) && (i < 6) ; i++ )
			{
				G(dp_spk_mute) = (word) (G(dp_spk_mute) - ( G(dp_spk_mute) >> 3 ));
			}
		}

		if ( G(dp_spk_volume) < 0x1000 )
			G(dp_max_mute) = (word) (G(dp_spk_mute) << 1) ; 
		else if ( G(dp_spk_volume) < 0x16a7 )
			G(dp_max_mute) = (word) (G(dp_spk_mute) +  (G(dp_spk_mute) >> 1));
		else
			G(dp_max_mute) = G(dp_spk_mute) ; 

		if ( G(dp_max_mute) > 0x4000 ) 
			G(dp_mute_idle) = G(dp_max_mute) ; 
		else
			G(dp_mute_idle) = 0x4000 ; 

		if ( G(dp_spk_volume) >= 0x1fe0 )
			G(dp_spk_mute) = (word) ( G(dp_spk_mute) >> 1 ) ; 

		dp_write_dsp_ram( MIC_MUTE_ADDR, G(dp_spk_mute) ) ;

		dp_write_dsp_ram( FDSP_CNTRL_ADDR, 0xc004 ) ;
		dp_write_dsp_ram( IDLE_MUTE_ADDR, G(dp_mute_idle) ) ;
	}

	G(dp_spk_volume) =	(word) ( 0xe000 | G(dp_spk_volume) ) ; 
	dp_write_dsp_ram( FDSP_SPKR_GAIN_ADDR, G(dp_spk_volume) ) ;
}

/****************************************************************
Routine : dp_cancellation
Description : Check AEC & HEC cancellation 
*****************************************************************/
byte dp_cancellation ( void )
{
	dp_write_dsp_ram ( 0x85, 0x9f05 ) ;
	if ( ( G(S).ModemOptions.RingCount > 0 )       // incoming call
		|| ( dp_read_dsp_ram (0x8c1) > 2 ) ) 
		dp_write_dsp_ram ( 0x8da, 0x400 ) ;

	if ( ( dp_read_dsp_ram ( FDSP_CNTRL_ADDR ) & 0x4000 ) != 0 ) // in fdsp
	{
		dp_write_dsp_ram ( 0x86, (word)(0xffdf & dp_read_dsp_ram (0x86)) ) ;// disable IIRs
		return ( TRUE ) ;
	}

	return ( FALSE ) ;
}

/****************************************************************
Routine : dp_set_spk_mic_gain
Description : set mic gain 
*****************************************************************/
void dp_set_spk_mic_gain ( void )
{
	word micgain, micagc ;
	byte i ;

	micgain = (word) (0x1fff & G(S).ModemOptions.SpeakerphoneMicGain);
	micagc = (word) (0xe000 & G(S).ModemOptions.SpeakerphoneMicGain);
	G(S).ModemOptions.SpeakerphoneMicMute = 0x7fff ;	// 0 db mic mute
	if ( G(S).ModemOptions.VoiceMicGainControl == 0 ) 
		;
	else if ( G(S).ModemOptions.VoiceMicGainControl < 123 ) 
		micgain = (word) ( micgain >> 1 ) ; 
	else if ( G(S).ModemOptions.VoiceMicGainControl < 128 ) 
	{
		for ( i=0; i < ( 128 - G(S).ModemOptions.VoiceMicGainControl ) ; i++ )
			micgain = (word) (micgain - ( micgain >> 3 ));
	}
	else if ( G(S).ModemOptions.VoiceMicGainControl < 134 ) 
	{
		for ( i=0; i < ( G(S).ModemOptions.VoiceMicGainControl - 128 ) ; i++ )
		{
			micgain = (word) (micgain +( micgain >> 3 ));
		}
	}
	else
	{
		micgain = (word) ( micgain << 1 ) ; 
	}

	if ( micgain > 0x0f42 )
		micgain = 0x0f42 ; 

	micgain = (word) (micagc | micgain); 

	dp_write_dsp_ram ( MIC_GAIN_ADDR, micgain ) ;
	dp_set_speakerphone_gain ( ) ;
}

/****************************************************************
Routine : dp_fdsp_record_start
Description : start conversation record 
*****************************************************************/
void dp_fdsp_record_start ( void )
{
	word recordon ;

	x_debug_msg ("FDSP - start recording") ;
	G(conv_record) = TRUE ; // Set conversation record on
	recordon = (word) (dp_read_dsp_ram (0x0871) | 0x0200) ; 
	dp_write_dsp_ram (0x0871, recordon) ; 
}

/****************************************************************
Routine : dp_fdsp_record_stop
Description : stop conversation record 
*****************************************************************/
void dp_fdsp_record_stop ( void )
{
	word recordoff ;

	x_debug_msg ("FDSP - stop recording") ;
	G(conv_record) = FALSE ; // Set conversation record off
	recordoff = (word) (dp_read_dsp_ram (0x0871) & 0xfdff);
	dp_write_dsp_ram (0x0871, recordoff) ; 
}
#endif //(DATA_FAX_TAM!=1)		// speakerphone for data/fax/TAM
#endif	//VOICE
