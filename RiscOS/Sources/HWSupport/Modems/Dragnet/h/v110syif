/*name and version number:@(#)v110syif.h	1.2*/
/*date of get: 		  09/06/00 16:59:37*/
/*date of delta:	  10/21/99 18:53:37*/
/****************************************************************/
/*
(C) Copyright 1991-1998 Link Technology, Inc.  All Rights Reserved Worldwide.

THIS SOFTWARE CONTAINS TRADE SECRETS OF LINK TECHNOLOGY INC.  NO DISCLOSURE,
COPYING OR USE OF WHOLE OR ANY PART THEREOF MAY BE MADE WITHOUT WRITTEN
PERMISSION.

Licensed Material - Program Property of Link Technology, Inc.

THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Link Technology, Inc.
The copyright notice above does not evidence any actual or intended
publication of such source code.
*/
/*
	$Header$

	History:
	$Log$
   
      Rev 1.3   28 Aug 1996 12:14:26   si
   Multiport support with adapter added to some structures
   
      Rev 1.2   06 Feb 1996 15:22:52   si
   Changed copyright date.
   
      Rev 1.1   21 Aug 1990 17:13:34   jar
   initial controlled version
*/
/*************************************************************************
**									**
** name		: v110syif.h						**
** purpose	: System interface definitions				**
**									**
*************************************************************************/

#ifndef __V110_SYIF_H__
#define __V110_SYIF_H__

/*primitive definitions*/
/*  DCE -> Layer 2		:	0x1? */
/*  Layer 2 -> DCE		:	0x2? */
/*  MGMT -> Layer 2		:	0x3? */
/*  Layer 2 -> MGMT		:	0x4? */
/*  Layer 2 -> Layer 1		:	0x5? */
/*  Layer 1 -> Layer 2		:	0x6? */
/*  ? -> MGMT			:	0x7? */
/*  Layer 3 -> DCE		:	0x8? */
/*  DCE -> Layer 3		:	0x9? */
/*  MGMT -> ?			:	0xa? */
/*  Layer 4 -> Layer 3/X.25	:	0xb? */
/*  Layer 3/X.25 -> Layer 4	:	0xc? */
/*  Layer 4 <-> Layer 3/ASI	:	0xd? */

/*DCE -> Layer 2*/
#define DL_ESTABLISH_REQ	0x10	/*establish multiframe*/
#define DL_RELEASE_REQ		0x11	/*release multiframe*/
#define DL_DATA_REQ		0x12	/*transmit I frame data*/
#define DL_UNIT_DATA_REQ	0x13	/*transmit UI frame data*/

/*Layer 2 -> DCE*/
#define DL_ESTABLISH_IND	0x20	/*established multiframe*/
#define DL_RELEASE_IND		0x21	/*released multiframe*/
#define DL_DATA_IND		0x22	/*received I frame data*/
#define DL_UNIT_DATA_IND	0x23	/*received UI frame data*/

/*MGMT -> Layer 2*/
#define MDL_ASSIGN_REQ		0x30	/*assign Layer 2 link*/
#define MDL_REMOVE_REQ		0x31	/*remove Layer 2 link*/
#define MDL_DATA_REQ		0x32	/*transmit I frame data*/
#define MDL_UNIT_DATA_REQ	0x33	/*transmit UI frame data*/
#define MGMT_TIMEOUT_REQ	0x34	/*timeout*/

/*Layer 2 -> MGMT*/
#define MDL_ASSIGN_IND		0x40	/*assigned Layer 2 link*/
#define MDL_REMOVE_IND		0x41	/*removed Layer 2 link*/
#define MDL_DATA_IND		0x42	/*received I frame data*/
#define MDL_UNIT_DATA_IND	0x43	/*received UI frame data*/

/*Layer 2 -> Layer 1*/
#define PH_ACTIVATE_REQ		0x50	/*activate Layer 1*/
#define PH_DEACTIVATE_REQ	0x51	/*deactivate Layer 1*/
#define PH_DATA_REQ		0x52	/*transmit frame*/

/*Layer 1 -> Layer 2*/
#define PH_ACTIVATE_IND		0x60	/*activated Layer 1*/
#define PH_DEACTIVATE_IND	0x61	/*deactivated Layer 1*/
#define PH_DATA_IND		0x62	/*received frame*/
#define PH_DATA_CNF		0x63	/*transmit frame completion*/
#define PH_ERROR_IND		0x64	/*error*/

/*? -> MGMT*/
#define MGMT_ERROR_REQ		0x70	/*error*/

/*MGMT -> ?*/

/*Layer 3 -> DCE*/
#define DCE_EST_REQ		0x80	/*establish link request*/
#define DCE_EST_RSP		0x81	/*establish link response*/
#define DCE_REL_REQ		0x82	/*release link*/
#define DCE_REL_RSP		0x83	/*release link*/
#define DCE_DATA_REQ		0x84	/*acknowledged data request*/
#define DCE_UNIT_DATA_REQ	0x85	/*unacknowledged data request*/
#define DCE_CONFIG_REQ		0x86	/*configure request - used to pass
					  pre-initialized TEI values*/
#define DCE_OOS_REQ		0x87	/*DLC out of service*/
#define DCE_IS_REQ		0x88	/*DLC in service*/
#define DCE_IDLE_REQ		0x89	/*make DLC idle*/

/*DCE -> Layer 3*/
#define DCE_EST_IND		0x90	/*establish link indication*/
#define DCE_EST_CNF		0x91	/*establish link confirm*/
#define DCE_REL_IND		0x92	/*released link*/
#define DCE_REL_CNF		0x93	/*released link*/
#define DCE_DATA_IND		0x94	/*received acknowledged data*/
#define DCE_UNIT_DATA_IND	0x95	/*received unacknowledged data*/

/*Layer 4 -> Layer 3/X.25*/
#define L4L3_N_CONNECT_REQ	0xb0	/*connect request*/
#define L4L3_N_DISCONNECT_REQ	0xb1	/*disconnect request*/
#define L4L3_N_DATA_REQ		0xb2	/*data request*/
#define L4L3_N_EXP_DATA_REQ	0xb3	/*expedited data request*/
#define L4L3_N_RESET_REQ	0xb4	/*reset request*/
#define L4L3_N_CONNECT_RSP	0xb5	/*connect response*/
#define L4L3_N_DISCONNECT_RSP	0xb6	/*disconnect response*/
#define L4L3_N_DATA_RSP		0xb7	/*data response*/
#define L4L3_N_EXP_DATA_RSP	0xb8	/*expedited data response*/
#define L4L3_N_RESET_RSP	0xb9	/*reset response*/

/*Layer 3/X.25 -> Layer 4*/
#define L3L4_N_CONNECT_IND	0xc0	/*connect indication*/
#define L3L4_N_DISCONNECT_IND	0xc1	/*disconnect indication*/
#define L3L4_N_DATA_IND		0xc2	/*data indication*/
#define L3L4_N_EXP_DATA_IND	0xc3	/*expedited data indication*/
#define L3L4_N_RESET_IND	0xc4	/*reset indication*/
#define L3L4_N_CONNECT_CNF	0xc5	/*connect confirm*/
#define L3L4_N_DISCONNECT_CNF	0xc6	/*disconnect confirm*/
#define L3L4_N_DATA_CNF		0xc7	/*data confirm*/
#define L3L4_N_EXP_DATA_CNF	0xc8	/*expedited data confirm*/
#define L3L4_N_RESET_CNF	0xc9	/*reset confirm*/

/*  Layer 4 <-> Layer 3/ASI */
#define L4L3_ASI_CMD_REQ	0xd1	/* ASI Command request */
#define L3L4_ASI_CMD_IND	0xd2	/* ASI Command indication */

/****************************************************************************/

/*DCE/Layer 2 configuration*/
struct preinit_ttys {
	BYTE pi_adapter;		/*adapter #*/
	BYTE pi_tty;			/*pre-initialized TTY*/
	BYTE pi_tei;			/*TEI for TTY*/
	BYTE pi_sapi;			/*SAPI*/
	BYTE pi_chan;			/*channel*/
	BYTE pi_lap;			/*Link Access Protocol*/
};
struct dce_config_s {
	BYTE dc_num_preinit_ttys;	/*number of pre-initialized TTYs -
					the "preinit_ttys" follow this structure*/
};

/*link table configuration - for either LAPD or LAPB links*/
struct link_config_s {
	WORD lc_T2;		/*T2 time DTE may delay before acking
				  the last I-frame; LAPB ONLY*/
	WORD lc_T200;		/*T200 frame rexmt timer second
				  count*/
	WORD lc_T202;		/*T202 time between TEI ID requests
				  second count*/
	WORD lc_T203;		/*T203 max idle time between frame
				  xmts second count*/
	WORD lc_N200;		/*N200 or N2 maximum # frame rexmts count*/
	WORD lc_N201;		/*N201 maximum frame octet count*/
	WORD lc_N202;		/*N202 maximum # rexmts of TEI ID
				  requests*/
	WORD lc_K;		/*maximum # outstanding I frames*/
	WORD lc_mod;		/*sequence number modulo*/
#define MOD_8		8		/*modulo 8*/
#define MOD_128		128		/*modulo 128*/
	WORD lc_lap;		/*Link Access Protocol*/
#define LAP_D		1	/*LAPD*/
#define LAP_B		2	/*LAPB*/
};

/*interface structures*/
struct dlci_s {
	BYTE dlci_sapi;		/*SAPI*/
#define SAPI_CALL_CONTROL	0	/*signaling sapi*/
#define SAPI_PACKET		16	/*packet sapi*/
#define SAPI_MANAGEMENT		63	/*management sapi*/
	BYTE dlci_tei;		/*TEI*/
	BYTE dlci_chan;		/*channel*/
	BYTE dlci_adapter;	/*adapter #*/
};
struct link_id_s {
	BYTE li_sapi;		/*SAPI*/
	BYTE li_chan;		/*channel*/
	BYTE li_lap;		/*Link Access Protocol*/
	int li_tty_id;		/*logical terminal id*/
	BYTE li_adapter;	/*adapter #*/
};

/*DCE common header*/
struct dce_hdr_s {
	BYTE dce_prim;			/*primitive*/
	struct link_id_s dce_link_id;	/*link id*/
};

/*Layer 3 -> DCE interface structures*/
/*DCE_EST_REQ structure*/
struct dce_est_req_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_EST_RSP structure*/
struct dce_est_rsp_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_REL_REQ structure*/
struct dce_rel_req_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_REL_RSP structure*/
struct dce_rel_rsp_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_DATA_REQ structure*/
struct dce_data_req_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
	struct bfr_hdr_s *pdce_data;	/*buffer address*/
};

/*DCE_UNIT_DATA_REQ structure*/
struct dce_unit_data_req_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
	struct bfr_hdr_s *pdce_unit_data; /*buffer address*/
};

/*DCE -> Layer 3 interface structures*/
/*DCE_EST_IND structure*/
struct dce_est_ind_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_EST_CNF structure*/
struct dce_est_cnf_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_REL_IND structure*/
struct dce_rel_ind_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_REL_CNF structure*/
struct dce_rel_cnf_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
};

/*DCE_DATA_IND structure*/
struct dce_data_ind_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
	struct bfr_hdr_s *pdce_data;	/*buffer address*/
};

/*DCE_UNIT_DATA_IND structure*/
struct dce_unit_data_ind_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
	struct bfr_hdr_s *pdce_unit_data; /*buffer address*/
};

/*? -> MGMT interface structures*/
/*MGMT common header*/
struct mgmt_hdr_s {
	BYTE mgmt_prim;		/*primitive*/
	struct dlci_s mgmt_dlci;	/*data link connection id*/
};

/*MGMT_ERROR_REQ*/
struct mgmt_error_req_s {
	struct mgmt_hdr_s mgmt_hdr;	/*mgmt header*/
	BYTE mgmt_layer_id;		/*layer id*/
#define LAYER_ID_1	1		/*Layer 1*/
#define LAYER_ID_2	2		/*Layer 2*/
#define LAYER_ID_3	3		/*Layer 3*/
#define LAYER_ID_4	4		/*Layer 4*/
	BYTE mgmt_error;		/*MGMT error*/
#define MGMT_ERROR_INVALID_REQ		1	/*invalid request*/
#define MGMT_ERROR_TOO_MANY_TTY_REQS	2	/*too many TTY requests*/
#define MGMT_ERROR_NO_BFR		3	/*no buffer*/
#define MGMT_ERROR_N202_REACHED		4	/*N202 count reached*/
#define MGMT_ERROR_BAD_L1_PRIMITIVE	5	/*unknown L1 primitive*/
#define MGMT_ERROR_BAD_L3_PRIMITIVE	6	/*unknown L3 primitive*/
#define MGMT_ERROR_BAD_MGMT_PRIMITIVE	7	/*unknown MGMT primitive*/
#define MGMT_ERROR_TOO_MANY_LINK_REQS	8	/*too many link requests*/
#define MGMT_ERROR_N200_REACHED		9	/*N200 count reached*/
#define MGMT_ERROR_CODE_A		10	/*LAPD, Sup F=1 (S7)*/
#define MGMT_ERROR_CODE_B		11	/*LAPD, DM F=1 (S7-8)*/
#define MGMT_ERROR_CODE_CD		12	/*LAPD, UA F=1 (S4,S7-8)*/
						/*LAPD, UA F=0 (S4-8)*/
#define MGMT_ERROR_CODE_E		13	/*LAPD, DM Resp F=0 (S7-8)*/
#define MGMT_ERROR_CODE_F		14	/*LAPD, SABME (S7-8)*/
#define MGMT_ERROR_CODE_G		15	/*LAPD, SABME (S5)*/
#define MGMT_ERROR_CODE_H		16	/*LAPD, DISC (S6)*/
#define MGMT_ERROR_CODE_I		17	/*LAPD, Stat Enq (S8)*/
#define MGMT_ERROR_CODE_J		18	/*LAPD, NR Err (S7-8)*/
#define MGMT_ERROR_CODE_K		19	/*LAPD, FRMR Resp (S7-8)*/
#define MGMT_ERROR_CODE_L		20	/*LAPD, Bad Frame (S4-8)*/
#define MGMT_ERROR_CODE_M		21	/*LAPD, Bad I Fld (S4-8)*/
#define MGMT_ERROR_CODE_N		22	/*LAPD, Bad Sz (S4-8)*/
#define MGMT_ERROR_CODE_O		23	/*LAPD, N201 Err (S4-8)*/
#define MGMT_ERROR_BAD_L2_PRIMITIVE	24	/*unknown L2 primitive*/
#define MGMT_ERROR_NO_RESOURCE		25	/*out of resource*/
#define MGMT_ERROR_BAD_DP_MSG_LEN	26	/*bad rcvd dual-port length*/
#define MGMT_ERROR_BAD_L3_ID		27	/*bad rcvd Layer 3 id*/
};

/*Layer 2 -> MGMT*/
/*DL common header*/
struct dl_hdr_s {
	BYTE dl_prim;		/*primitive*/
	struct dlci_s dl_dlci;		/*data link connection id*/
};

/*MDL_ASSIGN_IND*/
struct mdl_assign_ind_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
};

/*MDL_REMOVE_IND*/
struct mdl_remove_ind_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
};

/*MDL_DATA_IND*/
struct mdl_data_ind_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
	struct bfr_hdr_s *pmdl_data;	/*buffer address*/
};

/*MDL_UNIT_DATA_IND*/
struct mdl_unit_data_ind_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
	struct bfr_hdr_s *pmdl_unit_data; /*buffer address*/
};

/*MGMT -> Layer 2 interface structures*/
/*MDL_ASSIGN_REQ*/
struct mdl_assign_req_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
};

/*MDL_REMOVE_REQ*/
struct mdl_remove_req_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
};

/*MDL_DATA_REQ*/
struct mdl_data_req_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
	struct bfr_hdr_s *pmdl_data;	/*buffer address*/
};

/*MDL_UNIT_DATA_REQ*/
struct mdl_unit_data_req_s {
	struct dl_hdr_s dl_hdr;		/*mdl header*/
	struct bfr_hdr_s *pmdl_unit_data; /*buffer address*/
};

/*MDL_TIMEOUT_REQ*/
struct mdl_timeout_req_s {
	struct dce_hdr_s dce_hdr;	/*dce header*/
	BYTE *ptimer;			/*address of timer structure -
					  system dependent*/
};

/*MGMT -> ? interface structures*/

/*DCE -> Layer 2 interface structures*/
/*DL_ESTABLISH_REQ*/
struct dl_establish_req_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
};

/*DL_RELEASE_REQ*/
struct dl_release_req_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
};

/*DL_DATA_REQ*/
struct dl_data_req_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
	struct bfr_hdr_s *p_dl_data;	/*buffer address*/
};

/*DL_UNIT_DATA_REQ*/
struct dl_unit_data_req_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
	struct bfr_hdr_s *p_dl_unit_data; /*buffer address*/
};

/*Layer 2 -> DCE*/
/*DL_ESTABLISH_IND*/
struct dl_establish_ind_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
};

/*DL_RELEASE_IND*/
struct dl_release_ind_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
};

/*DL_DATA_IND*/
struct dl_data_ind_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
	struct bfr_hdr_s *p_dl_data;	/*buffer address*/
};

/*DL_UNIT_DATA_IND*/
struct dl_unit_data_ind_s {
	struct dl_hdr_s dl_hdr;		/*data link header*/
	struct bfr_hdr_s *p_dl_unit_data; /*buffer address*/
};

/*Layer 2 -> Layer 1 interface structures*/
/*PH common header*/
struct ph_hdr_s {
	BYTE ph_prim;		/*primitive*/
	struct dlci_s ph_dlci;	/*data link connection id*/
};

/*PH_DATA_REQ*/
struct ph_data_req_s {
	struct ph_hdr_s ph_hdr;		/*ph header*/
	struct bfr_hdr_s *pbfr;		/*buffer address*/
};

/*Layer 1 -> Layer 2 interface structures*/
/*PH_DATA_IND*/
struct ph_data_ind_s {
	struct ph_hdr_s ph_hdr;		/*ph header*/
	struct bfr_hdr_s *pbfr;		/*buffer address*/
};

/*PH_DATA_CNF*/
struct ph_data_cnf_s {
	struct ph_hdr_s ph_hdr;		/*ph header*/
	struct bfr_hdr_s *pbfr;		/*buffer address*/
};

/*PH_ERROR_IND*/
struct ph_error_ind_s {
	struct ph_hdr_s ph_hdr;		/*ph header*/
	WORD error;			/*error status*/
};

/* X.25 interface definitions follow */
/*permanent virtual circuit structure*/
struct x25_pvc_s {
	BYTE lcn;		/*lcn for PVC*/
	BYTE lcgn;		/*lcn group for PVC*/
	BYTE chan;		/*chan for PVC*/
	BYTE l4_nsap;		/*PVC L4 nsap*/
};

/* moved to x25if.h */
/*X.25 general configuration*/
struct x25_config_s {
	struct x25_pvc_s x25_pvcs[MAX_X25_PVCS];	/*permanent VCs*/
};

/*X.25 link table configuration*/
struct x25_link_config_s {
	BYTE x25_lc_K;		/*maximum # outstanding I frames*/
	BYTE x25_lc_mod;	/*sequence number modulo*/
};

/*network service access point*/
struct nsap_s {
	BYTE nsap_prim;			/*network primitive*/
	BYTE nsap_chan;			/*channel*/
	BYTE nsap_l4id;			/*L4 specific nsap id*/
	BYTE nsap_l3id;			/*L3 specific nsap id*/
};

#define MAX_X25_NET_ADDRS	14	/*maximum size of X.25 network address*/

/*L4L3_N_CONNECT_REQ*/
struct n_connect_req_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE calling_addrs_len;			/*calling address length*/
	char *pcalling_addrs;			/*point to calling address*/
	BYTE called_addrs_len;			/*called address length*/
	char *pcalled_addrs;			/*pointer to called address*/
};

/*L4L3_N_DISCONNECT_REQ*/
struct n_disconnect_req_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE cause;				/*cause*/
};

/*L4L3_N_DATA_REQ*/
struct n_data_req_s {
	struct nsap_s nsap;			/*net service access point*/
	struct bfr_hdr_s *pn_data;		/*buffer address*/
};

/*L4L3_N_EXP_DATA_REQ*/
struct n_exp_data_req_s {
	struct nsap_s nsap;			/*net service access point*/
	struct bfr_hdr_s *pn_data;		/*buffer address*/
};

/*L4L3_N_RESET_REQ*/
struct n_reset_req_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE cause;				/*cause*/
	BYTE diag;				/*diagnostic*/
};

/*L4L3_N_CONNECT_RSP*/
struct n_connect_rsp_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L4L3_N_DISCONNECT_RSP*/
struct n_disconnect_rsp_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L4L3_N_DATA_RSP*/
struct n_data_rsp_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L4L3_N_EXP_DATA_RSP*/
struct n_exp_data_rsp_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L4L3_N_RESET_RSP*/
struct n_reset_rsp_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L4L3_N_CONNECT_IND*/
struct n_connect_ind_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE calling_addrs_len;			/*calling address length*/
	char *pcalling_addrs;			/*point to calling address*/
	BYTE called_addrs_len;			/*called address length*/
	char *pcalled_addrs;			/*pointer to called address*/
};

/*L3L4_N_DISCONNECT_IND*/
struct n_disconnect_ind_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE cause;				/*cause*/
	BYTE diag;				/*diagnostic*/
};

/*L3L4_N_DATA_IND*/
struct n_data_ind_s {
	struct nsap_s nsap;			/*net service access point*/
	struct bfr_hdr_s *pn_data;		/*buffer address*/
};

/*L3L4_N_EXP_DATA_IND*/
struct n_exp_data_ind_s {
	struct nsap_s nsap;			/*net service access point*/
	struct bfr_hdr_s *pn_data;		/*buffer address*/
};

/*L3L4_N_RESET_IND*/
struct n_reset_ind_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE cause;				/*cause*/
};

/*L3L4_N_CONNECT_CNF*/
struct n_connect_cnf_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L3L4_N_DISCONNECT_CNF*/
struct n_disconnect_cnf_s {
	struct nsap_s nsap;			/*net service access point*/
	BYTE cause;				/*cause*/
};

/*L3L4_N_DATA_CNF*/
struct n_data_cnf_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L3L4_N_EXP_DATA_CNF*/
struct n_exp_data_cnf_s {
	struct nsap_s nsap;			/*net service access point*/
};

/*L3L4_N_RESET_CNF*/
struct n_reset_cnf_s {
	struct nsap_s nsap;			/*net service access point*/
};

/* L4L3_ASI_CMD_REQ */
/* L3L4_ASI_CMD_IND */
struct ASI_primitive_s {
	BYTE ASI_ae_id;			/* ASI AE id */
/* NOTE: following MUST match the bind ids in asi.h */
#define ASI_BRA_ID		1	/* ASI BRA id */
#define ASI_PRA_ID		2	/* ASI PRA id */
#define ASI_SD_ID		3	/* ASI Switched Digital id */
	BYTE filler0;			/* filler byte */
	struct bfr_hdr_s *pbfr;		/* ASI command buffer address */
};

/*diagnostic codes*/
#define DIAG_NO_INFO		0x00		/*no additional information*/
#define DIAG_BAD_PS		0x01		/*invalid P(S)*/
#define DIAG_BAD_PR		0x02		/*invalid P(R)*/
#define DIAG_PKT_BAD		0x10		/*packet bad*/
#define DIAG_PKT_BAD_R1		0x11		/*packet bad-state r1*/
#define DIAG_PKT_BAD_R2		0x12		/*packet bad-state r2*/
#define DIAG_PKT_BAD_R3		0x13		/*packet bad-state r3*/
#define DIAG_PKT_BAD_P1		0x14		/*packet bad-state p1*/
#define DIAG_PKT_BAD_P2		0x15		/*packet bad-state p2*/
#define DIAG_PKT_BAD_P3		0x16		/*packet bad-state p3*/
#define DIAG_PKT_BAD_P4		0x17		/*packet bad-state p4*/
#define DIAG_PKT_BAD_P5		0x18		/*packet bad-state p5*/
#define DIAG_PKT_BAD_P6		0x19		/*packet bad-state p6*/
#define DIAG_PKT_BAD_P7		0x1a		/*packet bad-state p7*/
#define DIAG_PKT_BAD_D1		0x1b		/*packet bad-state d1*/
#define DIAG_PKT_BAD_D2		0x1c		/*packet bad-state d2*/
#define DIAG_PKT_BAD_D3		0x1d		/*packet bad-state d3*/
#define DIAG_NO_PKT		0x20		/*packet not allowed*/
#define DIAG_NO_PKT_UNIDEN	0x21		/*packet unidentified*/
#define DIAG_NO_PKT_CALL_1WAY	0x22		/*call on 1way lcn*/
#define DIAG_NO_PKT_PVC		0x23		/*invalid pkt on pvc*/
#define DIAG_NO_PKT_UNASS_LCN	0x24		/*pkt on unassigned lcn*/
#define DIAG_NO_PKT_REJ_NOSUB	0x25		/*reject not subscribed*/
#define DIAG_NO_PKT_SHORT	0x26		/*pkt too short*/
#define DIAG_NO_PKT_LONG	0x27		/*pkt too long*/
#define DIAG_NO_PKT_BAD_GFI	0x28		/*bad gfi*/
#define DIAG_NO_PKT_BAD_RST_REJ	0x29		/*bad restart/register*/
#define DIAG_NO_PKT_FAC_INCOM	0x2a		/*packet facility incompatible*/
#define DIAG_NO_PKT_UNAU_INTC	0x2b		/*unauthorized int confirm*/
#define DIAG_NO_PKT_UNAU_INT	0x2c		/*unauthorized int*/
#define DIAG_NO_PKT_UNAU_REJ	0x2d		/*unauthorized reject*/
#define DIAG_TIM		0x30		/*time expired*/
#define DIAG_TIM_IN_CALL	0x31		/*for incoming call*/
#define DIAG_TIM_CLEAR_IND	0x32		/*for clear indication*/
#define DIAG_TIM_RESET_IND	0x33		/*for reset indication*/
#define DIAG_TIM_RSTRT_IND	0x34		/*for restart indication*/
#define DIAG_PROB		0x40		/*CR, CC or REG problem*/
#define DIAG_PROB_FAC_REJ_CODE	0x41		/*bad facility/reg code*/
#define DIAG_PROB_FAC_PAR	0x42		/*bad facility parameter*/
#define DIAG_PROB_CALLED	0x43		/*bad called address*/
#define DIAG_PROB_CALLING	0x44		/*bad calling address*/
#define DIAG_PROB_FAC_REJ_LEN	0x45		/*bad facility/reg length*/
#define DIAG_PROB_IN_BAR	0x46		/*incoming calls barred*/
#define DIAG_PROB_NO_LCN	0x47		/*no lcn available*/
#define DIAG_PROB_CALL_COLL	0x48		/*call collision*/
#define DIAG_PROB_FAC_DUP	0x49		/*duplicate facility req*/
#define DIAG_PROB_ADDR_LEN_N0	0x4a		/*non-0 address len*/
#define DIAG_PROB_FAC_LEN_N0	0x4b		/*non-0 facility len*/
#define DIAG_PROB_FAC_NOT_EXP	0x4c		/*facility not expected*/
#define DIAG_PROB_FAC_BAD	0x4d		/*invalid CCITT facility*/
#define DIAG_MISC		0x50		/*miscellaneous*/
#define DIAG_MISC_CAUSE_BAD	0x51		/*cause code bad*/
#define DIAG_MISC_OCTET_ALIGN	0x52		/*mis-aligned octet*/
#define DIAG_MISC_Q_BAD		0x53		/*inconsistent Q_bit*/
#define DIAG_INT		0x70		/*international problem*/
#define DIAG_INT_REM_NET	0x71		/*remote network problem*/
#define DIAG_INT_PROT		0x72		/*protocol problem*/
#define DIAG_INT_OUT_ORDER	0x73		/*link out of order*/
#define DIAG_INT_BUSY		0x74		/*link busy*/
#define DIAG_INT_TNET_FAC	0x75		/*transit net facility*/
#define DIAG_INT_RNET_FAC	0x76		/*remote net facility*/
#define DIAG_INT_ROUT		0x77		/*routing problem*/
#define DIAG_INT_TROUT		0x78		/*temp. routing problem*/
#define DIAG_INT_BAD_DNIC	0x79		/*bad called DNIC*/
#define DIAG_INT_MAINT		0x7a		/*maintenance action*/

/*clearing causes*/
#define CLEAR_CAUSE_DTE_ORIG	0x00		/*DTE originated*/
#define CLEAR_CAUSE_BUSY	0x01		/*number busy*/
#define CLEAR_CAUSE_OUT_ORDER	0x09		/*out of order*/
#define CLEAR_CAUSE_REM_PROC_ERR 0x11		/*remote procedure error*/
#define CLEAR_CAUSE_NO_REV_CHG	0x19		/*no reverse charging*/
#define CLEAR_CAUSE_INCOMP_DEST	0x21		/*incompatible destination*/
#define CLEAR_CAUSE_NO_FAST_SEL	0x29		/*no fast select*/
#define CLEAR_CAUSE_SHIP_ABS	0x39		/*ship absent*/
#define CLEAR_CAUSE_BAD_FAC	0x03		/*invalid facility*/
#define CLEAR_CAUSE_ACC_BAR	0x0b		/*access barred*/
#define CLEAR_CAUSE_LOC_PROC_ERR 0x13		/*local procedure error*/
#define CLEAR_CAUSE_NET_CONG	0x05		/*network congestion*/
#define CLEAR_CAUSE_RPOA_OUT_ORDER 0x15		/*RPOA out of order*/

/*reset cause*/
#define RST_CAUSE_DTE_ORIG	0x00		/*DTE originated*/
#define RST_CAUSE_OUT_ORDER	0x01		/*out of order*/
#define RST_CAUSE_REM_PROC_ERR	0x03		/*remote procedure error*/
#define RST_CAUSE_LOC_PROC_ERR	0x05		/*local procedure error*/
#define RST_CAUSE_NET_CONG	0x07		/*network congestion*/
#define RST_CAUSE_REM_DTE_UP	0x09		/*remote DTE operational*/
#define RST_CAUSE_NET_UP	0x0f		/*remote network operational*/
#define RST_CAUSE_INCOMP_DEST	0x11		/*incompatible destination*/
#define RST_CAUSE_NET_OUT_ORDER	0x1d		/*network out of order*/

/*restart cause*/
#define RSTRT_CAUSE_LOC_PROC_ERR 0x00		/*local procedure error*/
#define RSTRT_CAUSE_NET_CONG	0x03		/*network congestion*/
#define RSTRT_CAUSE_NET_UP	0x07		/*remote network operational*/
#define RSTRT_CAUSE_REGCAN_CONF	0x7f		/*register/cancel confirm*/

/*register confirm cause*/
#define REG_CAUSE_REGCAN_CONF	0x7f		/*register/cancel confirm*/
#define REG_CAUSE_BAD_FAC	0x03		/*invalid facility*/
#define REG_CAUSE_LOC_PROC_ERR	0x13		/*local procedure error*/
#define REG_CAUSE_NET_CONG	0x05		/*network congestion*/

#endif	// __V110_SYIF_H__
