/*name and version number:@(#)ph_d_par.h	1.1*/
/*date of get: 		  09/08/00 16:24:28*/
/*date of delta:	  09/08/00 15:30:30*/

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_d_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 *  Header implementing the parameters interface of the PHYSICAL layer of
 *  the NETBRICKS packages with an DALLAS DS2154 used for a PRI or
 *  with another USART (managed direcly from SM).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    NETBRICKS                                   		|*/
/*|    PH entity                                        |*/
/*|    Dallas SemiConductor DS21x5y Driver				|*/
/*|                                                     |*/
/*|    Copyright (c) 1998-2000 by NETBRICKS SA			|*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef PH_D_PRI_PAR
#define PH_D_PRI_PAR

/*-------------------------------------------------------------------------*/

					/* ENTITY ID ASSIGNMENTS */

#define ENT_PH_D_PRI_IT             	ENT_PH_D_IT		/* Pseudo entity used for IT send message) */
#define ENT_MPH_D_PRI_IT             	ENT_PH_D_IT		/* Pseudo entity (used for IT send message) */

#undef  ENT_MPH_D_PRI
#define ENT_MPH_D_PRI             	ENT_MPH
#undef  ENT_PH_D_PRI
#define ENT_PH_D_PRI             	ENT_PH_D

/*-------------------------------------------------------------------------*/

					/* COMPILE TIME PARAMETERS */

#define PH_D_PRI_USART					USART_DALLAS	/* USART device :
														USART_DALLAS	Used of Internal USART (DS21554 only)
														USART_EXTERNAL	Used of another USART for the D channel
														USART_NIL		no USART (Line interface only=
													*/

#define PH_D_PRI_MODE					MODE_TIMER		/* Driving mode for E1/T1 Framer and CAS reports :
														- MODE_BG		background loop
														- MODE_TIMER	periodic timer
														- MODE_IT 		Interrupt ISR
													*/

#define PH_D_PRI_PCM_E1					ON			/* E1 supported */
#define PH_D_PRI_PCM_T1					ON			/* T1 supported */
#define PH_D_PRI_CAS					ON			/* fxw OFF CAS or RBS supported */

#define PH_D_PRI_REPORTING_TO_SM 		OFF			/* event reporting to SM : ON or OFF */
#define PH_D_PRI_TX_WATCHDOG_TIMER  	ON      	/* TX software watch dog timer : ON or OFF if OFF possible hardware WD */

#if ASSERT == ON
#   define PH_D_PRI_AUDIT           	ON      	/* PH D PRI audit facility */
#else
#   define PH_D_PRI_AUDIT           	OFF     	/* PH D PRI audit facility */
#endif

#define PH_D_PRI_PREVIOUS_STATE 		OFF			/* Send new or previous state machine to SM (SM_REPORT_IN) */

#define PH_D_PRI_T1_AXRA 				OFF			/* T1 Transmit Automatic Remaote Alarm : ON or OFF */

#define PH_D_PRI_T1_EOC					OFF			/* T1 ESF EOC : ON or OFF */
#define PH_D_PRI_OAM					ON 		/* Operation And Maintenance */

#define	PH_D_PRI_LINK_ID_SA7			OFF			/* Management of Link Identification Procedure using Sa7 : ON or OFF */
#define	MPH_DELAY_SA7_READING			OFF			/* ON/OFF: Enable/Disable Delay between MPH_IDR reception and Sa7 reading */

/*-------------------------------------------------------------------------*/

							/* USER INIT PROCEDURES */

#if 1
/* clock setup per ROME.doc */
#define	Ph_d_pri_init_e1_user(p_dallas) \
	printf("user supplied e1\n");	\
	X_WRITE8(0x3c0, 0x06)
#define	Ph_d_pri_init_t1_user(p_dallas) \
	printf("user supplied t1 0x3c0\n");	\
	X_WRITE8(0x3c0, 0x06);		\
	printf("user supplied Done\n")
#else
#define	Ph_d_pri_init_e1_user(p_dallas)
#define	Ph_d_pri_init_t1_user(p_dallas) 
#endif

/* for slow Xbus speed, drop the access time
   need to disable the ints
 */
#if 0
#define Slow_mode() \
	_int_disable(); \
	sa_setXBUS( 2 )

/* for fast Xbus speed, increase the access time
   need to re-enable the ints
 */
#define Fast_mode() \
	sa_setXBUS( 1 ); \
	_int_enable()
#else
#define Slow_mode() 
#define Fast_mode() 
#endif

/*-------------------------------------------------------------------------*/

						/* B CHANNEL MANAGEMENT */

					/*
						User functions called when the B channel
						management messages are received.
					*/

#define Mph_d_pri_init_rq(p_data)					/* User B channel inialization according to the required service */
#define Mph_d_pri_stop_rq(p_data)					/* User B channel stop of B channel usage */
#define Mph_d_pri_switch_rq(p_data)					/* User B channel switching to the required service */

/*-------------------------------------------------------------------------*/

					/* USART FIFO MANAGEMENT */

#define PH_D_PRI_FIFO_SIZE          	64      	/* FIFO size : 64 */

/*-------------------------------------------------------------------------*/

					/* Signalling Channel Id  (line side) */

#define PH_D_PRI_E1_SIGNALING_CHANI	16       	/* E1 signalling channel Id */
#define PH_D_PRI_T1_SIGNALING_CHANI	24       	/* T1 signalling channel Id */

					/* Number of NA in one configuration message */


#define PH_D_PRI_CONFIG_MX_NA       	2       	/* Number of NA in the configuration message */

					/* CHANI MAX VALUE */

#define PH_PRI_MX_CHANI             	32      	/* Max PRI channel Id 0 to 31 */
#define PH_BRI_MX_CHANI             	2       	/* Max BRI channel */

/*-------------------------------------------------------------------------*/

					/* TIMERS : implicit value */

#define PH_D_PRI_E1_T101_I             	(750 * MILLISECOND) 	/* persistent DI implicite timer value */
#define PH_D_PRI_E1_T102_I             	( 50 * MILLISECOND) /* persistent AI implicite timer value */

#define PH_D_PRI_T1_T101_I             	(2500 * MILLISECOND)/* persistent DI implicite timer value */
#define PH_D_PRI_T1_T102_I             	(250  * MILLISECOND)/* persistent AI implicite timer value */

#define PH_D_PRI_T199_I             	(900 * MILLISECOND) /* Watch dog timer default value */

#if MPH_DELAY_SA7_READING == ON
#	define	MPH_DS2154_SA7_DELAY_TIME		((ulong) (500*M_SCD))	/* Delay between MPH_IDR reception and Sa7 reading (V5-BRICKS only) */
#endif

#define PH_D_PRI_CMD_LOOP_MAX	       	0x0000ffffL			/* Watch dog timer (number of loop) for
															   waiting to execute a new command */

/*-------------------------------------------------------------------------*/

							/* Poll timer value */

#define	PH_D_PRI_POLL_TIMER_VAL         	((ulong) (50*M_SCD))	/* Poll timer value */

			/* Debouncing delays for E1 according to events  */

#define	PH_D_PRI_E1_DELAY_REPORT_OP_FRAMES 	((ulong) (50*M_SCD))
#define	PH_D_PRI_E1_DELAY_REPORT_LFA       	((ulong) (50*M_SCD))
#define	PH_D_PRI_E1_DELAY_REPORT_AIS       	((ulong) (50*M_SCD))
#define	PH_D_PRI_E1_DELAY_REPORT_RAI       	((ulong) (50*M_SCD))
#define	PH_D_PRI_E1_DELAY_REPORT_CRC4      	((ulong) (50*M_SCD))

					/* E1 Remote Alarm delay */

#define	PH_D_PRI_E1_DELAY_FORCING_RA   		((ulong) (400*M_SCD))	/* Delay before forcing Remote Alarm [100ms, 500ms] */

			/* Debouncing delays for T1 according to events  */

#define	PH_D_PRI_T1_DELAY_REPORT_OP_FRAMES	((ulong) (200*M_SCD))
#define	PH_D_PRI_T1_DELAY_REPORT_LOS       	((ulong) (200*M_SCD))
#define	PH_D_PRI_T1_DELAY_REPORT_LFA       	((ulong) (200*M_SCD))
#define	PH_D_PRI_T1_DELAY_REPORT_AIS       	((ulong) (200*M_SCD))
#define	PH_D_PRI_T1_DELAY_REPORT_RAI       	((ulong) (200*M_SCD))
#define	PH_D_PRI_T1_DELAY_REPORT_CRC6      	((ulong) (200*M_SCD))

					/* T1 Remote Alarm ON/OFF delays */

#define	PH_D_PRI_T1_DELAY_XRA_ON      		((ulong) (2500*M_SCD))
#define	PH_D_PRI_T1_DELAY_XRA_OFF     		((ulong) (11000*M_SCD))

					/* E1 CAS debouncing delays according to events */

#define	PH_D_PRI_CAS_DELAY_FORCING_RA   	((ulong) (400*M_SCD))	/* Delay before forcing Remote Alarm [100ms, 500ms] */

#define	PH_D_PRI_CAS_DELAY_REPORT_OP_FRAMES	((ulong) (50*M_SCD))
#define	PH_D_PRI_CAS_DELAY_REPORT_LFA   	((ulong) (50*M_SCD))
#define	PH_D_PRI_CAS_DELAY_REPORT_AIS   	((ulong) (50*M_SCD))
#define	PH_D_PRI_CAS_DELAY_REPORT_RAI   	((ulong) (50*M_SCD))

	/* T1 SET-UP Waiting loop (to be tune for at least 20 microseconds) */

#define	PH_D_PRI_T1_WAIT_SETUP				100

					/* T1 EOC */

#define PH_D_PRI_T1_EOC_BOM_REPEAT			8						/* BOM repetition */

/*-------------------------------------------------------------------------*/

		/* Interrupt management, DS2154 parameters */

#define PH_D_PRI_MEMORY_MAPPED_IO   	ON      		/* Inport outport IO */
#define IT_CONTROLLER               	ITC_68302		/* Interrupt Controller : ITC_8259, ITC_80186, ITC_68302, ITC_68901, ITC_PRIVATE */
#define ITC_BASE_ADD                	0xff00  		/* (for ITC_80186 and ITC_68901 only) It controller registers base address */

		/* These macros manage mask an interrupt level */

#define It_disable_dallas(mask_value) 	It_mask   (dallas_itc_mask, mask_value)
#define It_unmask_dallas() 	    		It_unmask (dallas_itc_mask)
#define It_enable_dallas(mask_value)  	It_ldmask (mask_value)

/*-------------------------------------------------------------------------*/

					/* DISPLAY DS2154 STATUS */

/* 		 byte

			E1		T1

		7	LOS		LOS
		6   AIS		AIS
		5   LFA		LFA
		4   RRA		RRA
		3   SI1     xxx
		2   SI2    	xxx
		1	LMFA    LMFA
		0   xxx     xxx
*/

#define Dallas_e1_display_status(dword)	  		/* Ds2154 display status */
#define Dallas_t1_display_status(dword)	  		/* Ds21x52 display status */

					/* Error event report */

#define Dallas_report_ph_event(p_dallas,event_id)   /* Ds2154 report stable physical event */

/*-------------------------------------------------------------------------*/

				/*-------------------------------------*/
				/* User Read / Write to DALLAS DS21x5y */
				/*-------------------------------------*/

		/*
		 *
		 *	Rd_dallas_b (p_port) :
		 *	--------------------------------------
		 *
		 *	Called by MPH_D_PRI to read a DS2154 register
		 *
		 *	Parameter:
		 *		io_port_t p_port : register address.
		 *
		 *	Return code: uchar (value read)
		 *
		 *	Wr_dallas_b (p_port, byte_val) :
		 *	--------------------------------------
		 *
		 *	Called by MPH_D_PRI to read a DS2154 register
		 *
		 *	Parameter:
		 *		io_port_t p_port : register address.
         *		uchar byte_val   : value to write
		 *
		 *	Return code: void
		 *
         *
		 *	This hook HAS normally NOT to be defined.
		 *  It is provided in case of user DATA or ADDRESS wiring mismatch, ...
		 *
		 *	Example :
		 *
		 *	#	if NEW_FCT_STYLE == ON
		 *			extern uchar	user_rd_dallas_b	(io_port_t p_port);
		 *			extern void		user_wr_dallas_b	(io_port_t p_port, uchar byte_val);
		 *	#	else
		 *			extern uchar	user_rd_dallas_b	();
		 *			extern void		user_wr_dallas_b	();
		 *	#	endif
		 *
		 *	#   define  Rd_dallas_b(p_port)             user_rd_dallas_b(p_port)
		 *	#   define  Wr_dallas_b(p_port,byte_val)	user_wr_dallas_b(p_port,byte_val)
         *
		 */

#endif /* PH_D_PRI_PAR */

/*EOF*/

