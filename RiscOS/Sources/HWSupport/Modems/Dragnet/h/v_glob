/*name and version number:@(#)v_glob.h	1.26*/
/*date of get: 		  09/06/00 16:59:28*/
/*date of delta:	  03/15/00 22:05:02*/
#ifndef _V_GLOB_H
#define _V_GLOB_H


#include "mqx.h"
#include <v_defs.h>
// forward reference for VGLOB helps compiler
		struct voip_globs;
		typedef struct voip_globs VGLOB;

#include <v_stats.h>
#include <v_camil.h>
#include <v_pnet.h>
#include <v_utils.h>
#include <v_xchg.h>
#include <v_hcmd.h>
#include <v_ifp.h>
#include <v_rtp.h>
#include "sa_host.h"
#include "v_tone.h"
#include "llglob_d.h"
#include "sa_glob.h"
#include <dpglob.h>
#include "allglobs.h"

typedef struct voip_globs {
// v_camil.c
	frame_t		rxFramePool[CFG_CAML_RX_LUT_SZ];	// frames from the DSP
	frame_t		txFramePool[CFG_CAML_TX_LUT_SZ]; 	// frames to the DSP
	camilSM_t			camilSM;		// holds driver state information
	byte dsp_ready;

// v_xchg.c
	exchangerSM_t	exchangerSM;		// exchanger state machine
	Boolean			callIsNowActive;	// True when call in progress
	libRetVal		RX_RETVAL;			// libs can't return a value
	libRetVal		TX_RETVAL;			// libs can't return a value
	callConfig_t	config;
	word hiGran;    // high granularity component of jitter measurement clock

// v_hcmd.c
	dtmfQ_t			dtmfQ;					// outgoing DTMF Queue Structure
	Boolean			dtmf_detection_enabled;	// flag to indicate BIT15 0xe6 enabled 

// v_ifp.c
	ifpTxStruct_t	ifpTxInf;	// holds information for IFP transmit section
	ifpRxStruct_t	ifpRxInf;	// holds information for IFP receiver section

// v_rtp.c
	rtpTxStruct_t	rtpTxInf;	// holds information for RTP transmit section
	rtpRxStruct_t	rtpRxInf;	// holds information for RTP receiver section

// v_pnet.c
	packet_t *	rxPacketPool;	// holds pkts headed towards host
	packet_t *	txPacketPool;	// holds pkts headed towards DSP
	mimicSM_t	mimicSM;

// v_task.c
	disp_t			disp;			// hex monitor display
	_queue_id	voip_queue; // input queue (commands, transmit media)
	_pool_id	voip_msg_pool;	// msg pool for input msgs
	INTERNAL_MSG *msg;	// received msg currently being processed
	byte			modem_num;			// modem or dp associated with call
	Boolean			polling_enabled;	// flag to control polling event
	word			data_msg_count;		// debug print counter

// v_tone.c
#if defined(DIAL_TONE_TEST) || defined(PLAY_TONE) || defined(PLAY_TONE_IN_READ)
	TONE_STUFF		tone_stuff;
#endif	// DIAL_TONE_TEST

// sa_main.c
	word dsp_rx_alarm;	// time since last rx interrupt from dp
	word dsp_tx_alarm;	// time since last tx interrupt from dp

// v_stats.c
	word			cycles;			// Used to estimate CPU loading
	pktLosses_t		pktLoss;
	Boolean				dsp_media_stats_printing;	// stats print flag
	U32					media_timer;	// times dur of media stats


	stats_t			stats;	// MUST BE LAST IN VGLOB!!!!!!!!!!!!
} VGLOB;

// GLOBAL DATA
extern VGLOB vglob_array[MAX_DP];

#define V(x) (vglob_ptr->x)


/****************************************************************************
           ####   ####    ###   #####  #   #  ####   #####   ###
           #   #  #   #  #   #    #    #   #  #   #  #      #
           ####   ####   #   #    #     ###   ####   ###     ###
           #      #  #   #   #    #      #    #      #          #
           #      #   #   ###     #      #    #      #####  ####
*****************************************************************************/
// GLOBAL FUNCTION PROTOTYPES

// v_camil.c
non_banked void camil_init         (VGLOB *);

// v_xchg.c
byte send_packet_to_network(VGLOB *, packet_t *, byte);
packet_t *next_rx_media_packet ( VGLOB *vglob_ptr );
void         exchanger_init(VGLOB *            );
void         select_library(VGLOB *, libraryType     );
word           set_buildout(VGLOB *, byte            );
byte            queue_frame(VGLOB *, frame_t *, byte * );
void            config_call(VGLOB *            );
void              set_coder(VGLOB *, codecType       );
Boolean               media_rx(VGLOB *            );
void               media_tx(VGLOB *, packet_t *pkt );
void      init_jitter_clock(VGLOB *            );
void     update_jitter_calc(VGLOB *, word            );

// v_rtp.c
void	rtp_tx(VGLOB *, packet_t *);
void rtp_tx_config(VGLOB *);
void rtp_rx(VGLOB *, frame_t *);
void rtp_rx_config(VGLOB *);
Boolean rtp_process_packet(VGLOB *, packet_t *);

// v_ifp.c
void ifp_tx(VGLOB *, packet_t *);
void ifp_tx_config(VGLOB *);
void ifp_rx(VGLOB *, frame_t *);
void ifp_rx_config(VGLOB *);
Boolean ifp_process_packet(VGLOB *, packet_t *);


// v_test.c
void test_tx(VGLOB *, packet_t *);
void test_tx_config(VGLOB *);
void test_rx(VGLOB *, frame_t *);
void test_rx_config(VGLOB *);

// v_hcmd.c
void host_command_interface_init (VGLOB *);
void dpv_enable_call(VGLOB *vglob_ptr);
void dpv_disable_call(VGLOB *vglob_ptr);
void process_sarm_voip_msg(VGLOB *vglob_ptr, SARM_MSG *msg);
void v_gen_tones( VGLOB *vglob_ptr );

// util.c
void map_init(VGLOB *);

// v_stats.c
non_banked void init_driver_stats(VGLOB *);
non_banked void update_driver_stats(VGLOB *);
non_banked void WARNING(VGLOB *, byte);
non_banked void init_pkt_loss_stats(VGLOB *, word);
non_banked void update_pkt_loss_stats(VGLOB *, word);
void print_stats(VGLOB *vglob_ptr);
void dsp_display_media_stats(U16 int_mask);
void dsp_media_stats_enable(VGLOB *);
void dsp_media_stats_disable(VGLOB *);

// v_pnet.c
void v_media_read_from_host(struct ChannelContext *vars);
void v_media_write_to_host( packet_t *pkt );
uint_32 pnet_init(VGLOB *);

// v_tone.c
#if defined(DIAL_TONE_TEST)
void dsp_recv_tone(VGLOB *vglob_ptr);
#endif	// DIAL_TONE_TEST

// dpcntlv.c
void dpv_init(VGLOB *vglob_ptr);

#endif	// _V_GLOB_H
