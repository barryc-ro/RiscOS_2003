/*name and version number:@(#)v110il.h	1.4*/
/*date of get: 		  09/06/00 16:59:37*/
/*date of delta:	  10/21/99 18:52:39*/
/****************************************************************/
/*
(C) Copyright 1996-1998 Link Technology, Inc.  All Rights Reserved Worldwide.

THIS SOFTWARE CONTAINS TRADE SECRETS OF LINK TECHNOLOGY INC.  NO DISCLOSURE,
COPYING OR USE OF WHOLE OR ANY PART THEREOF MAY BE MADE WITHOUT WRITTEN
PERMISSION.

Licensed Material - Program Property of Link Technology, Inc.

THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Link Technology, Inc.
The copyright notice above does not evidence any actual or intended
publication of such source code.
*/
/*
	$Header$

	History:
	$Log$
*/
/*************************************************************************
**									**
** name		: v110il.h						**
** purpose	: INFOLink protocol software V.110 API (ILV110API)	**
**			Definitions					**
**									**
*************************************************************************/

#ifndef __V110_IL_H__
#define __V110_IL_H__

#ifdef V110TEST
#define ltprintf printf
#endif

#define MAX_V110_CHANNELS		1	/* Maximum # of supported V.110
							channels */
#define V110_FRAME_SIZE_BYTES		10	/* V.110 frame size in bytes */

/* ILV110API status codes */
typedef WORD ILV110STATUS;
#define ILV110STATUS_OK			0	/* Success */
#define ILV110STATUS_BAD_PARAMETER	1	/* Invalid parameter in API call */
#define ILV110STATUS_BAD_STATE		2	/* Invalid state for API call */
#define ILV110STATUS_NO_RESOURCE	3	/* No resource (e.g. no V.110
					buffer space for data/status) */


/* Initialize V.110 protocol for specified channel */
non_banked ILV110STATUS ILV110_Init( LWORD (*EventCallback)(WORD uEvent, BYTE dwMisc) );

/* The EventCallback parameter is an application procedure that will handle
	asynchronous events that can be passed during interrupt or non
	interrupt time.  The EventCallback procedure provides the uChannel
	parameter, which is the affected V.110 channel, and the actual
	event is specified in the uEvent parameter. The dwMisc parameter is
	event specific data.  The events can be any of the following: */

#define ILV110_EVENT_DATA_INDICATION	1	/* New V.110 data/status
						information is available */
#define ILV110_EVENT_IN_SYNC		2	/* V.110 channel is in
						synchronization*/
#define ILV110_EVENT_N_BIT_COUNT_DONE	3	/* N bit count done and 106
						can be turned on */
#define ILV110_EVENT_OUT_OF_SYNC	4	/* V.110 channel has lost
						synchronization*/
#define ILV110_EVENT_DISCO		5	/* V.110 disconnect has
						completed */
#define ILV110_EVENT_ERROR		6	/* Error has occurred that is
						specified in the dwMisc
						parameter or via
						ILV110_GetStatusInfo */
#define ILV110_ERROR_RCV_BFR_ORUN	1	/* Rcv buffer overrun */

#define ILV110_EVENT_RCV_RA1_TRACE	7	/* Trace rcv RA1 data */
#define ILV110_EVENT_RCV_RA2_TRACE	8	/* Trace rcv RA2 data */
#define ILV110_EVENT_XMT_RA1_TRACE	9	/* Trace xmt RA1 data */
#define ILV110_EVENT_XMT_RA2_TRACE	10	/* Trace xmt RA2 data */
#define ILV110_EVENT_RESYNC_IN_PROGRESS	11	/* Resynchronization in progress */
#define ILV110_EVENT_RESYNC_COMPLETE	12	/* Resynchronization complete */
#define ILV110_EVENT_RA2_BIT_SHIFT		13	/* Found RA2 bit shift amount */


/* Terminate V.110 protocol for specified channel */
non_banked ILV110STATUS ILV110_Terminate( void );


/* Open V.110 channel */
non_banked ILV110STATUS ILV110_Open( WORD uRate, WORD uSyncAsync, WORD uDTEDCE, WORD uStopBits, WORD uDataBits, WORD uTimer_T1_Value, WORD uTimer_Resync_Value, WORD uN_Value  );

/* V.110 rate definitions */
#define V110_RATE_56000		1
#define V110_RATE_48000		2
#define V110_RATE_38400		3
#define V110_RATE_28800		4
#define V110_RATE_24000		5
#define V110_RATE_19200		6
#define V110_RATE_14400		7
#define V110_RATE_12000		8
#define V110_RATE_9600		9
#define V110_RATE_7200		10
#define V110_RATE_4800		11
#define V110_RATE_3600		12
#define V110_RATE_2400		13
#define V110_RATE_1200		14
#define V110_RATE_600		15

/* V.110 transfer type definitions */
#define V110_TYPE_SYNC		1
#define V110_TYPE_ASYNC		2

/* V.110 DTE/DCE type definitions */
#define V110_DTE		1
#define V110_DCE		2

#define V110_T1_DEFAULT		GET_REAL_TICKS(10) /* V.110 T1 timer */
#define V110_RESYNC_DEFAULT	GET_REAL_TICKS(3) /* V.110 Resync timer */
#define V110_N_VALUE		24		/* V.110 RTS delay */


/* Open V.110 channel */
non_banked ILV110STATUS ILV110_Close( void );

/* V110Data is the data/status information structure that must contain
	the data/status information.  The format of the data/status 
	information structure is shown in the following C structure: */
typedef struct v110data_tag_s {
#define V110_CIRCUIT_ON		0	/* Circuit is ON */
#define V110_CIRCUIT_OFF	0x80	/* Circuit is OFF */
	BYTE ucCircuit105_RTS;		/* circuit 105 - RTS value */
	BYTE ucCircuit106_CTS;		/* circuit 106 - CTS value */
	BYTE ucCircuit107_DSR;		/* circuit 107 - DSR value */
	BYTE ucCircuit108_DTR;		/* circuit 108 - DTR value */
	BYTE ucCircuit109_RLSD;		/* circuit 109 - RLSD value */
	BYTE ucData;			/* R interface data byte */
} V110DATA_S, *PV110DATA_S;


/* Send V.110 R interface data/status information */
non_banked ILV110STATUS ILV110_DataRequest( void );


/* Process received V.110 data/status information */
non_banked ILV110STATUS ILV110_RcvdRawData( BYTE *pRawData, BYTE ucDataSz );

/* Send raw V.110 data/status information to network */
non_banked ILV110STATUS ILV110_SendRawData( BYTE *pRawData, BYTE ucDataSz );

/* StatusInfo contains relevant information related to the V.110 channel.
	The format of the status information structure is shown in the
	following C structure: */
typedef struct v110status_inf_tag_s {
	WORD uILV110State;			/* V.110 channel state */
	WORD uILError;				/* Last V.110 error */
} V110STATUS_INF_S, *PV110STATUS_INF_S;


/* Retrieve V.110 channel status information */
non_banked ILV110STATUS ILV110_GetStatusInfo( PV110STATUS_INF_S pStatusInfo );

/* Application needs more transmit data to keep the transmitter busy */
non_banked ILV110STATUS ILV110_NeedXmtData( void );


/* V.110 driver trace log defines */
#define V110_LOG_SIZE		(8*1024)	/* Trace log buffer size */
#define V110_LOG_INIT		0x01	/* Init called */
#define V110_LOG_OPEN		0x02	/* Open called */
#define V110_LOG_TERM		0x03	/* Terminate called */
#define V110_LOG_CLOSE		0x04	/* Close called */
#define V110_LOG_DATAREQ	0x05	/* Data Request called */
#define V110_LOG_UNUSED1	0x06	/* Unused */
#define V110_LOG_RCVDRAWDATA	0x07	/* Rcvd Raw Data called */
#define V110_LOG_GETSTATUS	0x08	/* Get Status called */
#define V110_LOG_NEEDXMTDATA	0x09	/* Need Xmt Data called */
#define V110_LOG_IN_SYNC	0x10	/* In synchronization */
#define V110_LOG_OUT_OF_SYNC	0x11	/* Out of synchronization */
#define V110_LOG_SX_BITS_ON	0x12	/* Status bits on */
#define V110_LOG_FOUND_ZERO	0x13	/* Found 0 byte in frame */
#define V110_LOG_DISCO_RCVD	0x14	/* Disconnect sequence rcvd */
#define V110_LOG_T1_TIMEOUT	0x15	/* T1 timeout */
#define V110_LOG_RESYNC_TIMEOUT	0x16	/* Resync timeout */
#define V110_LOG_NEW_STATE	0x17	/* State transition; new state follows */
#define V110_LOG_TEST		0x18	/* Test value; test data follows */

#ifdef V110_LOG_DEBUG
#define V110_LOG(val) {\
	WORD ints_were_on;\
	INTERRUPTS_OFF;	\
	ucV110LogBfr[uV110LogIn] = val;\
	uV110LogIn = (uV110LogIn+1)%(V110_LOG_SIZE);\
	INTERRUPTS_ON;	\
}
#else
#define V110_LOG(val) ;
#endif

#endif // __V110_IL_H__

