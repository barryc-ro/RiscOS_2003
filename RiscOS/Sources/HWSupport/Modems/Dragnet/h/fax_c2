/*name and version number:@(#)fax_c2.h	1.35*/
/*date of get: 		  12/15/00 10:10:34*/
/*date of delta:	  11/30/00 19:26:13*/
/****************************************************************
File : fax_c2.h
Description :
	Contains the definitions for class 2 FAX used by:
		ATFAX.C
		ATFAX_C2.C
		ATMAIN.C
		IOFAX.C
		IOFAX_C2.C
		IOMAIN.C

Revision History :
	Initials        Date            Change
	S.J. Busak		 08/19/96	  Initial version
	S.J. Busak     11/18/98   Add polling
	S.J. Busak     12/11/98   Add Class 2.0

*****************************************************************/
#ifndef __FAX_C2_H__
	#define __FAX_C2_H__  

#ifdef CLASS20_FAX
	#define FNS_BUF 20		// Buffer size for +fns command
	#define FFD_BUF 0			// Buffer size for +ffd command (Set to 0 to disable)
#endif                

#ifdef MODEM_Z80
	#define CALL(f) ((void(*)(void)) ((long)f|((long)z80_current_bank()<<16))) ()	// Banked, indirect call
// #define CALL(f) ((void(non_banked*)(void)) f) ()		                          // Non-banked, indirect call
#else
	#define CALL(f) ((void(*)(void)) f) ()                                        // Controller-less modems
#endif

#if defined (IWF_FAX) || defined (CLASS20_FAX)   
	#define CLASS_2_OR_20 ( (G(c2p.fclass) == 2) || (G(c2p.fclass) == 0x20) )
	#define DLE_SUB 0x1A
	#define DLE_MPS 0x2C
	#define DLE_EOM 0x3B
	#define DLE_EOP 0x2E
#else
	#define CLASS_2_OR_20 (G(c2p.fclass) == 2)
#endif

//#define TEST_V34_FAX_WITH_WINFAX80  // INTERNAL LUCENT USE ONLY!  Uncomment to test V.34 FAX using a Class 2 interface to WinFax 8.0 

// Function prototypes:
// --------------------

void io_fax_c2_init        (void);
byte io_fax_c2_background  (void);
void signal_class2         (void);
byte atfax_c2              (void);
byte process_c2fax_id      (byte, byte);
byte set_c2fax_parm        (byte, byte, byte, byte);
void send_cl2_profile      (void);
void send_cl2_cmd          (byte);
void send_fhng             (void);
byte rev_bits              (byte);

byte chk_mslt              (byte);
byte look_4_cng            (void);
void init_cng_detect       (void);
byte c2_look_4_cng         (void);
void c2_init_cng_detect    (void);  
void chk_rx_qual           (byte);
word page_wd               (void);
void init_qc               (void);
void get_qc_cnts           (word*, word*);
void dp_fax_modem_idle_cmd (void);
byte valid_pid             (void);
void set_t30_bit           (byte);

byte get_rf_vr             (void);
byte cl2_active            (void);
byte write_dce_fifo        (byte);
void setup_hdlc_tx         (void);
void setup_sync_tx         (void);
void setup_hdlc_rx         (void);
void exit_state            (void);
void set_train             (V17_FAX_MODE);
byte read_dte_fifo         (void);
byte check_phcto           (void);

void reset_phcto           (void);
void send_mdm_stat         (byte);
void write_dte_fifo        (byte);
word read_dce_fifo         (void);
void setup_sync_rx         (void);
void load_rsp_stat         (byte, byte);
void load_rsp_fpts         (word*);
void goto_phase_b          (void);
void chk_at_cmd            (void);
byte fax_tx_rdy            (void);

byte dte_at_cmd            (void);
void send_fpts             (void);
byte get_t30_bit           (void);
word ecm_flag_time         (void);
void ecm_hang_up           (void);
byte get_ctc_rate          (void);
void set_rx_dcn            (void);
void set_ctc_rate          (byte);
void set_rx_dcs            (void);
byte cnvt_bit_rate         (word);
byte cnvt_scan_time        (word);
byte smaller               (byte, byte);
void initialize_c2p        (void);

void save_remote_vr        (void);
void save_remote_df        (void);
void negotiate_vr          (void);
void negotiate_df          (void);
void dcs2vr                (void);
void dcs2df                (void);
void send_white_line       (void);
void page_end              (void);

void filter_rx_hdlc        (void);
void pre_scan_tx_data      (void);
byte chk_poll              (byte, byte*);
byte dle_filter            (byte*, byte*);
byte dcs_scan              (void);
void chk_rx_overrun        (void); 

byte io_fax_sync_dte_to_dce (void);   // Located in file: iofax.c
void check_rate_change      (void);   // Located in file: atfax.c
word io_get_dce_tx_count    (void);   // In iofax.c

byte io_fax_hdlc_dce_to_buf (word *, word *);   // In iofax.c
byte io_fax_hdlc_buf_to_dce (word *, word *);   // In iofax.c

void prog_bp_filter         (void);   // In dpmain.c

// Action commands sent from the atfax_c2() function
// -------------------------------------------------

#define DTE_FDR  1
#define DTE_FDT  2
#define DTE_FK   3
#define DTE_FET  4

// Complex variable definitions
// ----------------------------

struct ST30_PARM	/* Structure for T.30 parameters */
{
	byte vr;		/* Vertical resolution */
	byte br;		/* Bit rate            */
	byte wd;		/* Width               */
	byte ln;		/* Length              */
	byte df;		/* Data format         */
	byte ec;		/* Error correction    */
	byte bf;		/* Binary file transfer  */
	byte st;		/* Minimum scan line time  */
#ifdef CLASS20_FAX
	byte jp;    /* JPEG coding */
#endif
};

union UT30_PARM		/* Union for T.30 parameters */
{
#ifdef CLASS20_FAX
	byte pa[9];
#else
	byte pa[8];
#endif
	struct ST30_PARM ps;
};

struct CLASS2_PARM	/* Class 2 parameters */
{
	union UT30_PARM fdcc;
	union UT30_PARM fdis;
	union UT30_PARM fdcs;
	byte flid [20];

	byte fcig [20];    // Polling identification
	byte fnss [20];    // Non-standard frame string
	byte fnss_idx;     // Index into c2s.fnss

	#if defined (IWF_FAX) || defined (CLASS20_FAX)
		byte fpa  [20];    // Selective Polling Address
		byte fpw  [20];    // Password String
		byte fsa  [20];    // Destination Sub-Address
	#endif

	byte ftsi [20];    // DCE access only
	byte fclass;       // Service class
	byte fpts;
	byte fbadmul;
	byte fbadlin;
	byte fphcto;
	byte faxerr;
	byte fminsp;
#ifdef FAX_ECM
	byte fctcrty;
#endif            
	byte fet;
	byte sbf;		// FIE[0], FLPL[0], FSPL[0], FCR[1], FBUG[0], FND[0], FREL[0], Unused[0]
	word dbf;		// FMINSP[00], FBOR[00], FECM[00], FCQ[00], FVRFC[00], FDFFC[00], FLNFC[00], FWDFC[00]

	#if defined (IWF_FAX) || defined (CLASS20_FAX)
		byte db;   // Dummy byte for +FFC
		byte fap;  // 0, 0, 0, 0, 0, <PWD>, <SEP>, <SUB> -- 0: Don't send/Report; 1: Send/Report
		byte fnr;  // 0, 0, 0, 0, <FNF,FNS,FNC>, <FTI,FCI,FPI>, <FCS>, <FIS,FTC> -- 0: Don't report; 1: Report
	#endif

	#ifdef CLASS20_FAX
		byte sbf2;           // 0, 0, 0, 0, 0, 0, FIT.action[0], FPP[0]  // Implement later!!!!!
		byte fit;		         // Inactivity timer
	#endif  // CLASS20_FAX
};

// Masks for c2p.sbf (single bit flags)

//#define       0x80
#define FLPL    0x40
#define FSPL    0x20
#define FCR     0x10
#define FBUG    0x08
#define FND     0x04
#define FREL    0x02
//#define       0x01

// Masks for c2p.dbf (double bit flags)

#define FMINSP 0xC000
#define FBOR   0x3000
#define FECM   0x0C00
#define FCQ    0x0300
#define FVRFC  0x00C0
#define FDFFC  0x0030
#define FLNFC  0x000C
#define FWDFC  0x0003

#if defined(CLASS20_FAX) || defined(IWF_FAX)
	#define FAP_SUB 1
	#define FAP_SEP 2
	#define FAP_PWD 4

	#define FIT     2

	#define FNR_RPR 1
	#define FNR_TPR 2
	#define FNR_IDR 4
	#define FNR_NSR 8
#endif

struct C2_STATE			      // Structure for Class 2 state machine
{
	word timer;		            // State machine timeout timer
	byte rsp_cnt;              // No-response counter
  byte state;              // State variable for T.30 CMD & RSP state machines
	byte tcf_cnt;		         // Number of times TSI/DCS and training were not recognizes
	byte dte_cmd;		         // Command from ATFAX_C2 function
	word t30;			         // Time value for T.30 timer
	word flag;			         // General purpose flags as defined below:
	word t3sec;
	word t200ms;   
};

// Masks for c2s.flag:
#define SPT111				0x8000 // 1 indicates a DCS was received since the lasts PPM (for SPT111 test)
#define TX_EMPTY        0x4000 // Set when sync tx buffer empty
#define RE_TX_2400		0x2000 // Indicate a re-transmission @ 2400
#define FDT_DIS			0x1000 // A +FDT was received for previous DIS
#define RX_PAGE			0x800  // Display CONNECT & Rx page
#define FTT_2400        0X400  // FTT received at 2,400
#define DCS_RECEIVE     0x200  // A DCS response has been received after DIS (Answer)
#define PHASE_C_TIMEOUT 0x100  // A time-out occured during phase C page transmission
#define CARRIER_DET     0x80   // Set by DSP tasks to indicate carrier detected
#define FAX_ACTIVE      0x40   // Indicates FAX is active
#define FTT_SENT        0x20   // Indicate DCS has changed since sent to DTE
#define SEND_FCON       0x10   // Send +FCON to DTE if set
#define TRAIN_GOOD      0x08   // Indicates that a valid TCF was received
#define C2FC_ON         0x04   // Indicates flow control is on
#define PAGE_ON         0x02   // Indicates start of page data
#define AT_ENABLE       0x01   // Enable secondary, AT-Command processor

struct REMOTE_FAX		// Structure for remote FAX T.30 parameters
{
	byte tsi[20];
	union UT30_PARM dis;
	union UT30_PARM dcs;
	word flag;
	byte ppr;
};

// Definitions of flags in rf.flag:
#define CARRIER_GAP    0x400          // High-speed carrier gaps: 0 = no gap; 1 = gap
#define MSLT_15_4      0x200          // Minimum scan time for higher VR values; 0 = T7.7, 1 = 1/2 T7.7
#define T30_BIT        0x100          // X bit in T.30 Commands; Generally, 1:Org, 0:Ans
#define REMOTE_SUB_SEP 0x80           // Remote supports SUB/SEP
#define REMOTE_PWD     0x40           // Remote supports passwords
#define ORG_POLL       0x20           // Polling during an originate call
#define EOL_SENT       0x10           // While waiting for DTE Tx data, an EOL was sent to meet 5 seconds/line requirement
#define END_OF_PAGE    0x08           // The Tx pre-scan task found a DLE-ETX in the buffer
#define REMOTE_POLL    0x04           // Remote FAX wishes to poll
#define RX_OVR_FLOW    0x02           // Indicates Rx overflow occured and a DLE-O was sent to the DTE
#define REMOTE_V17     0x01           // Remote FAX device supports V.17 modulation

struct LINK_LIST
{
	const byte nh;    /* New high value of search range */
										/* New low value of search range = nh + 1 */
	const byte n0;    /* Next branch if zero */
	const byte n1;    /* Next branch if one */
};

struct QC
{
	byte stat;                /* Status byte */
	byte state;               /* Active state of state machine */
	byte acc;                 /* Bits of code word currently being used */
	byte idx;                 /* Index into link lists */
	byte high;                /* High value of search range */
	byte low;                 /* Low value of search range */
	word pel_cnt;             /* Number of PEL on a line */
	word badline;             /* Number of bad lines received */
	byte multline;            /* Current number of consecutive bad lines */
	byte maxmult;             /* Maximum number of consecutive bad lines */
	struct LINK_LIST* ll_ptr; /* Pointer to active link list */
	byte *ref_line;           /* Pointer to reference line (previous complete line) */
	byte *code_line;          /* Pointer to coding line (current line being received) */
	signed int run;           /* Number of pels up to current position */
	word ref_cnt;             /* Number of pels up to current positon on reference line */
};

/*
	Definitions of bits in QC.stat:

  b7: reserved
	b6: reserved
	b5: 0: End of Horizontal mode;  1: Horizontal mode active
	b4: 0: right[] = code line, child [] = ref_line;  1: Vise-versa

	b3: 0: MH encoding;  1: MR encoding  
	b2: 0: No code words since last EOL;  1: Code words rcvd since last EOL
	b1: 0: Previous line was ok;          1: Previous line had a bad PEL count
	b0: 0: Look for white run length;     1: Look for black run length
*/

// Buffer addresses used during processing
// Note: These point into the V.42bis memory area

#define C2_DCE_BUF_START	( V42BIS_MEM_START )
#define C2_DTE_BUF_START	(V42BIS_MEM_START + 4*1024 )
#define IO_FAX_BUF_START	( ( V42BIS_MEM_START + 4*1024 ) )

#endif  // __FAX_C2_H__
