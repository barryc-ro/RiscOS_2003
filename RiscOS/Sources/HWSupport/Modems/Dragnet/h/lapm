/*name and version number:@(#)lapm.h	1.118*/
/*date of get: 		  12/15/00 10:10:37*/
/*date of delta:	  11/30/00 16:58:22*/
/****************************************************************
File :	lapm.h
Description :
	Contains all declarations that are used by V.42/V42bis lapm protocol.

Revision History :
	Initials	Date		Change
	VR     		02/05/93	Initial
*****************************************************************/
#ifndef __LAPM_H__
#define __LAPM_H__

#define EMPTY     	0
#define FULL      	1
#define IN_PROGRESS	2

#define LAPM_DEFAULT_DLCI	0x00
#define INTEL_DSVD_DLCI		0x20
#define INVALID_DLCI		0x80

//---------------------------------------------------
// The following lapm var not needed - not negotiated
// Uncomment the next line if this ever changes.
//---------------------------------------------------
//#define NEED_VARIABLE_DLCI
#if defined(NEED_VARIABLE_DLCI)
# define LAPM_DATA_DLCI() G(lapm_data_dlci)
#else
# define LAPM_DATA_DLCI() LAPM_DEFAULT_DLCI
#endif

#define C_R	 	0x02		/* CR bit in address field */
#define E_A		0x01		/* EA bit in addrerss field */
#define PF		0x01		/* PF bit in Supervisory and I frame */
#define U_PF	0x10		/* PF bit in Unnumbered frame */

#define BRK   	0x40		/* break command */
#define BRKACK	0x60		/* break response */

/* Control field masks for corresponding commands */
#define U_FORMAT	0x03

#define IFRM     	0x00
#define SABME     	0x7f		/* P = 1 */
#define DM       	0x0f
#define DM_F       	0x1f		/* F = 1 */
#define UI      	0x03
#define DISC    	0x53		/* P = 1 */
#define UA      	0x73		/* F = 1 */
#define FRMR     	0x87
#define FRMR_F     	0x97		/* F = 1 */
#define RR       	0x01
#define RNR      	0x05
#define REJ      	0x09
#define SREJ     	0x0d
#define XID      	0xaf
#define TEST      	0xe3
#define EMPTYFRM	0xfe
#define ILGFRM     	0xff

#define SREJ_LEN	2		// dummy len for iframe that has been SREJ'ed

#define LAPM_IFRAME_SIZE	128		// for lapm keep size below 128
// for lapm size = 128 + 3 ; mnp = 256 ; radish = 251 + 3
// mah - for Venus we needed to make this 265 (at least the
// 259 that was there didn't work.  John Carbone's tests failed
// in MNP 4 mode.
//#define LAPM_FRAME_SIZE 	265
#define LAPM_FRAME_SIZE 	(LAPM_IFRAME_SIZE+3)
//#define ALLOC_TX_FRAME_SIZE 	254		// for radish :251 + 3

typedef struct {
	byte	txstatus ;
	byte	len ;
	#if defined(HDLC_FRAMES_BY_REFERENCE)
	//------------------------------------------------------
	// This extra field has two fucntions :
	// 1) for CS-4, holds count for QMP write and aligns
	//    data[] on an even boundary, and
	// 2) for all modems, used as flag to signify when
	//    frame is actually transmitted to DSP.
	//------------------------------------------------------
	#if defined(CS_4)
	word	cnt;
	#else
	byte	cnt;
	#endif
	#endif
	byte	data [ LAPM_FRAME_SIZE ] ;
}	LAPM_FRAME ;

// shorthand for lapm_transmit_frame - extern in allglobs.h
#define LTF		G(lapm_transmit_frame)
#define LTFP	G(lapm_iframe_ptr)
// shorthand for lapm_ui_frame - extern in allglobs.h
#define LUF		G(lapm_ui_frame)

typedef struct {
	byte	rxstatus ;
	word	len ;
	word	rlen ;
	byte	data [LAPM_FRAME_SIZE+1];
}	LAPM_RX_FRAME ;

#if defined(CS_MODEM) && defined(CS_ENABLE_DEBUG_LOGGING)
# define NO_OF_LAPM_RECEIVE_FRAMES              12
#elif !defined(MODEM_Z80)
# define NO_OF_LAPM_RECEIVE_FRAMES              25
#elif defined(MODEM_ARM) && !defined(CS_4)
# define NO_OF_LAPM_RECEIVE_FRAMES              16
#else
# define NO_OF_LAPM_RECEIVE_FRAMES              16
#endif

#define NO_OF_MNP_RECEIVE_FRAMES		(NO_OF_LAPM_RECEIVE_FRAMES/2)
#define MNP_FRAME_SIZE					265

typedef struct {
	byte	status ;
	word	len ;
	word	rlen ;
	byte	data [ MNP_FRAME_SIZE + 1 ] ;
}	MNP_RX_FRAME;

// shorthand for lapm_receive_frame - extern in allglobs.h
#define LRF		G(lapm_receive_frame)

// this lets us make use of the smaller lapm frame
// size to have more frames outstanding
typedef union {
	MNP_RX_FRAME mnp[NO_OF_MNP_RECEIVE_FRAMES];
	LAPM_RX_FRAME lapm[NO_OF_LAPM_RECEIVE_FRAMES];
} IO_RX_QUEUE;

// LRQ - shorthand for the old G(lapm_receive_queue)
#define LRQ(i)	(G(io_rx_queue).lapm[(i)])

// MRQ - shorthand for MNP receive queue
#define MRQ(i)	(G(io_rx_queue).mnp[(i)])

// Are we in LAPM mode or MNP mode
// as far as the io_rx_queue is concerned.
#define LAPM_MODE		(G(io_state) == IO_V42 || G(lapm_state) != LAPM_IDLE)

// Make sure TX_FRAME count is at least as big as
// receive buffer.  lapm_k is negotiated based on
// receive frames.  We don't want lapm_k to index
// into bad space on the TX side.
#define ALLOC_NO_OF_TX_FRAMES			NO_OF_LAPM_RECEIVE_FRAMES
#define NO_OF_LAPM_TRANSMIT_FRAMES		(ALLOC_NO_OF_TX_FRAMES-1)
#define NO_OF_MNP_TRANSMIT_FRAMES		(NO_OF_MNP_RECEIVE_FRAMES-1)

typedef struct {
	byte	status ;
	byte	len ;
	#if defined(HDLC_FRAMES_BY_REFERENCE)
	//-------------------------------------------------
	// This field is needed for MNP compatibility only.
	// See mnp_tx_octet_frame() for details.
	//-------------------------------------------------
	#if defined(CS_4)
	word	filler;
	#else
	byte	filler;
	#endif
	#endif
	byte	data [ 10 ] ;
}	LAPM_CONTROL_FRAME ;
// shorthand for lapm_control_frame - extern in allglobs.h
#define LCF		G(lapm_control_frame)

//--------------------------------------------------------
// For passing I Frames by reference; set the maximum
// number of I Frames allowed in the DCE Transmit Ring
// Buffer, and declare the size of the I Frame pointer
//--------------------------------------------------------
#if defined(HDLC_FRAMES_BY_REFERENCE)
# if defined(MODEM_Z80) || ( defined(MODEM_ARM) && !defined(CS_4) )
#  define MAX_IFRAMEP		2
#  define SIZEOF_IFRAMEP	2
# elif defined(CS_4)
#  define MAX_IFRAMEP		1
#  define SIZEOF_IFRAMEP	3
# else
#  define MAX_IFRAMEP		2
#  define SIZEOF_IFRAMEP	3
# endif
#endif // HDLC_FRAMES_BY_REFERENCE

typedef enum {
	LAPM_IDLE,        	/* lapm idle */
	LAPM_TX_ODP,      	/* transmit ODP */
	LAPM_RX_ODP,      	/* receive ODP */
	LAPM_TX_ADP,      	/* transmit ADP */
	LAPM_TX_HDLC_FLAGS,	/* transmit hdlc flags 0x7e */
	LAPM_TX_SABME_CMD,	/* transmit SABME command */
	LAPM_RX_SABME_CMD,	/* receive SABME command */
	LAPM_TX_SABME_RSP,	/* transmit SABME response (UA) */
	LAPM_TX_XID_CMD, 	/* transmit XID command */
	LAPM_RX_XID_CMD, 	/* receive XID command */
	LAPM_PRE_CONNECT, 	/* dsvd connect state - if dsvd enabled */
	LAPM_DSVD_CONNECT, 	/* wait for dsvd connection */
	LAPM_CONNECT_INIT, 	/* connect message to dte */
	LAPM_CONNECT,   	/* lapm connect state */
	LAPM_DISC_CMD,  	/* lapm disconnect command */
	LAPM_DISC_RSP,   	/* lapm disconnect response */
	LAPM_TX_ODP_DELAY,     	/* DELAY transmit ODP */
	LAPM_DOWN,       	/* lapm in disconnect state */
	LAPM_TO_BUFFERED_MODE, /* virtual state for transition to buffered mode */
	LAPM_KEEP_STATE      /* virtual state for no lapm state transition */
}	LAPM_STATE ;

typedef enum {
	LAPM_E1,
	LAPM_C1,
	LAPM_E2,
	LAPM_C2,
	LAPM_ADP_HDLC_FLAG1,
	LAPM_ADP_HDLC_FLAG2,
	LAPM_ADP_HDLC_FLAG3,
	LAPM_ADP_HDLC_FLAG4
}	LAPM_RX_ADP_STATE ;

typedef enum {
	LAPM_DC1_EVEN,
	LAPM_DC1_ODD,
	LAPM_DC1_EVEN2,
	LAPM_HDLC_FLAG1,
	LAPM_HDLC_FLAG2
}	LAPM_RX_ODP_STATE ;

#define T401	SECOND5			/* Acknowledgement timer */
#define N400	12  			/* Maximum Number of Retransmissions */

#define XIDfid	 0x82		/* Value of the Format Identifier Field */
#define XIDgid	 0x80		/* Value of the Group Identifier */
#define XIDopt	 0x03		/* Paremeter Identification for the HDLC */
				/* optional functions field */
#define XIDtest  0x20		/* Bit encoding for Loop Back Test option */
#define XIDsrej  0x04		/* Bit encoding for Selective Reject option */
#define XIDpv1	0x8a		/* mask for optional functions parameter value */
#define XIDpv2	0x89		/* mask for optional functions parameter value */
#define XIDtn401 0x05		/* Parameter identification for transmit N401 */
#define XIDrn401 0x06		/* Parameter identification for receive N401 */
#define XIDtk	 0x07		/* Parameter identification for transmit K */
#define XIDrk	 0x08		/* Parameter identification for receive K */

#define COMPgid  0xf0		/* Compression group ID */
#define COMPsid  0x00		/* Compression set ID */
#define COMPp0id 0x01		/* Parameter P0 ID */
#define COMPp1id 0x02		/* Parameter P1 ID */
#define COMPp2id 0x03		/* Parameter P2 ID */

#define UDSgid	0xff		// User Data Sub-field group ID
#define V44psid	0x40		// User Data Sub-field group ID
#define COMP_v44_c0id	0x41		// V.44 capability param ID
#define COMP_v44_p0id 0x42		/* V.44 Parameter P0 ID */
#define COMP_v44_p1tid 0x43		/* V.44 Parameter P1T ID */
#define COMP_v44_p1rid 0x44		/* V.44 Parameter P1R ID */
#define COMP_v44_p2tid 0x45		/* V.44 Parameter P2T ID */
#define COMP_v44_p2rid 0x46		/* V.44 Parameter P2R ID */
#define COMP_v44_p3tid 0x47		/* V.44 Parameter P3T ID */
#define COMP_v44_p3rid 0x48		/* V.44 Parameter P3R ID */

/****************************************************************
	Contains Server / Client DEFINES for LAPM
*****************************************************************/
#if defined(VPCM_SERVER)
# define LAPM_TX_HI_WATER (G(lapm_k)-2)
# define LAPM_RX_HI_WATER (G(lapm_k))
# define LAPM_RX_LO_WATER (LAPM_RX_HI_WATER-4)
# define LAPM_DTE_OK_TO_LOOP 1
#else
# define LAPM_TX_HI_WATER (G(lapm_k))
# define LAPM_RX_HI_WATER (G(lapm_k)-2)
# define LAPM_RX_LO_WATER (LAPM_RX_HI_WATER-3)
# define LAPM_DTE_OK_TO_LOOP 0
#endif


/****************************************************************
	Contains all declarations for global lapm functions.
*****************************************************************/
/* lapm_bg.c */
extern byte lapm_background ( byte new_state ) ;
extern void lapm_tx_break ( void ) ;
extern void lapm_b_tx_hdlc_frame(void);
extern void lapm_disconnect ( void ) ;

/* lapm_lbb.c */
extern void lapm_init ( void ) ;
extern void lapm_init_variables(void);
extern void lapm_rx_xid_frame(void);
extern void lapm_clrTXflags ( void ) ;

/* lapm_lib.c - root bank functions common to mnp & lapm */
#if defined(CS_4)
# define lapm_reset_timer() do { G(io_timer) = x_timer; } while(0) 
# define lapm_timer_expired(x) \
	((x_elapsed_time(G(io_timer)) >= (x)) ? TRUE : FALSE)
#else
extern non_banked void lapm_reset_timer ( void ) ;
extern non_banked byte lapm_timer_expired ( word duration ) ;
#endif //!CS_4
extern non_banked void lapm_clear_rx_frame ( void ) ;
extern non_banked BOOL lapm_put_frame_on_queue ( void ) ;
extern non_banked void lapm_clean_rcv_frame ( void ) ;
extern non_banked void lapm_rx_hdlc_frame ( void ) ;
extern non_banked void lapm_tx_hdlc_framep ( byte, byte* ) ;

/* lapm_dce.c */
extern non_banked void lapm_tx_hdlc_frame ( void ) ;
extern non_banked LAPM_FRAME* lapm_next_tx_rframe (void);

/* lapm_dc1.c */
extern void lapm_transmit_odp ( void ) ;
extern void lapm_transmit_adp ( void ) ;
extern byte lapm_odp_detected ( void ) ;
extern byte lapm_adp_detected ( void ) ;
extern byte lapm_mnp_lr_detected ( void ) ;
//extern non_banked byte lapm_hdlc_flags_detected ( void ) ;

/* lapm_dte.c */

/* lapm_ctl.c */
extern non_banked byte lapm_rx_frame_type ( void ) ;
extern non_banked void lapm_send_control_frame ( byte cmd, byte cr, byte pf ) ;
extern non_banked void lapm_process_xid ( void ) ;
extern non_banked byte lapm_process_ack ( byte lapm_nr ) ;

/* lapm_lbb.c */
extern void lapm_process_break ( void ) ;
extern void lapm_send_break ( byte cr ) ;
extern void lapm_send_xid(byte cr);

/* lapm_dte.c */
extern non_banked void lapm_build_iframe ( void ) ;
extern non_banked void lapm_process_iframe ( void ) ;
#endif	// __LAPM_H__
