/*name and version number:@(#)atglob.h	1.99*/
/*date of get: 		  10/31/00 12:00:51*/
/*date of delta:	  10/24/00 14:54:10*/
/****************************************************************
File : atglob.h
Description :
	Contains the global definitions for at task. It should be
	included in every C file in at task.

Revision History :
	Initials        Date            Change
	J.S.Xu          10/07/92        Initial
	R.H.Decker      08/18/95        added at_sync_mode
*****************************************************************/
#ifndef __ATGLOB_H__
#define __ATGLOB_H__

#define ATMAX			60		// maximum characters for at command
//#define AT_MAXMSG		100		// maximum characters for at_output_msg
#define AT_MAXMSG		200		// maximum characters for at_output_msg
#define BACK_SLASH      92      // the back slash key
#define PERCENT         37      // the % key
#define AND             38      // the &

typedef enum {
	AT_IDLE,        // start of the command line, look for A
	AT_LT,          // look for T
	AT_CMD          // at command body
} AT_STATE;

typedef enum {
	OK,                     // 0
	CONNECT,                // 1
	RING,                   // 2
	NO_CARRIER,             // 3
	ERROR,                  // 4
	CONNECT_1200,           // 5
	NO_DIALTONE,            // 6
	BUSY,                   // 7
	NO_ANSWER,              // 8
	CONNECT_75,             // 9
	CONNECT_300,            // 10
	CONNECT_600,            // 11
	CONNECT_2400,           // 12
	CONNECT_4800,           // 13
	CONNECT_7200,           // 14
	CONNECT_9600,           // 15
	CONNECT_12000,          // 16
	CONNECT_14400,          // 17
	CONNECT_16800,          // 18
	CONNECT_19200,          // 19
	CONNECT_21600,          // 20
	CONNECT_24000,          // 21
	CONNECT_26400,          // 22
	CONNECT_28800,          // 23
	CONNECT_31200,          // 24
	CONNECT_33600,          // 25
	CONNECT_38400,          // 26
	CONNECT_57600,          // 27
	CONNECT_115200,         // 28
	CONNECT_230400,		// 29
	FAX_FCERROR,            // 30
	DELAYED,                // 31
	BLACKLISTED,            // 32
	BLACKLIST_FULL,         // 33
	CONNECT_32000,
	CONNECT_34000,
	CONNECT_36000,
	CONNECT_38000,
	CONNECT_40000,
	CONNECT_42000,
	CONNECT_44000,
	CONNECT_46000,
	CONNECT_48000,
	CONNECT_50000,
	CONNECT_52000,
	CONNECT_54000,
	CONNECT_56000,
	CONNECT_58000,
	CONNECT_60000,

	CONNECT_28000,
	CONNECT_29333,
	CONNECT_30666,
	CONNECT_33333,
	CONNECT_34666,
	CONNECT_37333,
	CONNECT_38666,
	CONNECT_41333,
	CONNECT_42666,
	CONNECT_45333,
	CONNECT_46666,
	CONNECT_49333,
	CONNECT_50666,
	CONNECT_53333,
	CONNECT_54666,
	NO_MSG                      // this enum value has to be the last
} AT_RESULT_CODE;               // all possible result codes


/*
 * misc functions
 */
extern word at_atoi(byte *str, word *num, byte format);
extern word at_itoa( word num, byte *str, byte format);
extern void at_output_msg( const byte *msg_ptr, word msg_len);
extern void at_output_msg2(byte *msg_ptr);
extern void at_connect_code(void);
extern void at_cmd_err_ret(void);

extern void atparse_state(byte ch);
extern void atparse_cmd(void);
extern void at_view(void) ;
extern word GetReadOnlySReg(word s_reg, byte* txchar);
extern void at_cmd_filter(void) ;

extern void at_a(void);
extern void at_b(void);
extern void at_d(void);
extern void at_e(void);
extern void at_h(void);
extern void at_i(void);
extern void at_l(void);
extern void at_m(void);
extern void at_n(void);
extern void at_o(void);
extern void at_p(void);
extern void at_q(void);
extern void at_t(void);
extern void at_v(void);
extern void at_w(void);
extern void at_x(void);
extern void at_z(void);
extern void at_and(void);
extern void at_pound(void);
extern void at_dash(void);
extern void at_backslash(void);
extern void at_percent(void);
extern void at_data_compression(void);
extern void at_c ( void ) ;
extern void at_f ( void ) ;
extern void at_and_j ( void ) ;
extern void at_y ( void ) ;
extern void at_star ( void );
extern void at_slash(void);
extern void at_and_k ( void ) ;
extern void at_backslash_k ( void ) ;
extern void at_backslash_q ( void ) ;

// in atcmd1.c
extern void at_and_t (void) ;
extern void at_and_v (void) ;
extern void at_and_and (void) ;
extern void at_percent_t ( void ) ;
extern void at_percent_p ( void ) ;
extern void at_prn ( void ) ;
extern byte decdigit_to_hexchar ( byte decimal ) ;

// in ats.c
extern void at_s(void);

// in atfax.c
extern void at_fax(void);

// in atvoice.c
extern void at_voice(void);

// in atsync.c
extern void at_sync_mode ( void ) ;
extern void at_v8_cmd ( byte *ch ) ;
extern void at_v8_v8bis_cmd ( byte *ch ) ;
extern void at_sync_flow_control ( byte *ch ) ;
extern void at_plus_GMM(void) ;

// index into at_mod_tbl[]
typedef enum {
	AT_MOD_FAIL,		// 0
	AT_MOD_V23C,		// 1
	AT_MOD_V21,			// 2
	AT_MOD_BELL103,		// 3
	AT_MOD_BELL212A,	// 4
	AT_MOD_V22,			// 5
	AT_MOD_V22B,		// 6
	AT_MOD_V32,			// 7
	AT_MOD_V32B,		// 8
	AT_MOD_V34,			// 9
	AT_MOD_K56,			// 10
	AT_MOD_V90,			// 11
	AT_MOD_V92			// 12
} AT_MOD_INDEX;

extern AT_MOD_INDEX at_current_mod(byte *str);
extern void at_output_msg_strstr(char *buf1, char *buf2);
extern void at_output_msg_strdec(char *buf, word dec);
extern word at_atoint ( byte *str, long *num, byte format );
extern BOOL at_SIwithinrange(byte *str, byte *def, short int *num);
extern BOOL at_withinrange(byte *str, byte *def, long *num);
extern byte at_atohex(byte string[], word *num);
extern void at_sync_access_mode (byte *ch) ;
extern void at_modulation ( byte *ch );
extern void at_v25ter_mod_carrier(void);
extern void at_v25ter_asto ( byte *ch );
extern const char at_idstring[];
extern void at_px_strcpy(byte *dest, const byte *src);
extern byte at_check_end_of_parameter(byte *str);
#define V25TER_IDSTRING	(at_idstring)
extern void at_dce_speed_code(MODEM_LINE_RATE line_rate);
extern void at_form_connect_rate(char *msg);
extern void at_v25ter_p(byte *ch);
extern BOOL at_v250_OneByte(byte *str, byte maxVal, byte *val);
extern BOOL at_OneByte(byte **pStr, byte *val);
extern byte *at_cat_num(byte *buf, word num, byte followedBy);

#endif	// __ATGLOB_H__
