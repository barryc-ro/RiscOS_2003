/*name and version number:@(#)v44.h	1.25*/
/*date of get: 		  04/12/01 11:56:24*/
/*date of delta:	  04/10/01 10:25:18*/
/****************************************************************
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
*                  CONFIDENTIAL INFORMATION                     *
*                  ------------------------                     *
*    This Document contains Confidential Information or         *
*    Trade Secrets, or both, which are the property of Lucent   *
*    Technologies, Inc.  This document may not be  copied,      *
*    reproduced, reduced to any electronic medium or machine    *
*    readable form or otherwise duplicated and the information  *
*    herein may not be used, disseminated or otherwise          *
*    disclosed, except with the prior written consent of Lucent *
*    Technologies, Inc.                                         *
*                                                               *
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
* Copyright (c) 2000 Lucent Technologies, Inc.                  *
* All rights reserved.                                          *
* Use of copyright notice does not imply publication.           *
****************************************************************/
/****************************************************************
File :	v44.h
Description :
	Contains all declarations needed by V.44 users.

Revision History :
	Author		Date		Change
	J. Apgar	07/10/00	Initial
*****************************************************************/
#if !defined(__V44_H__) && defined(V44)
#define __V44_H__

#if defined( MODEM_Z80 )

# define V44_P1T	(1024)	// Proposed Number of code words, transmit direction
# define V44_P1R	(1024)	// Proposed Number of code words, receive direction
# define V44_P2T	255   	// Proposed Max string length, transmit direction
# define V44_P2R	255   	// Proposed Max string length, receive direction
# define V44_P3T	(5*1024)		// Proposed Max chars in history, transmit direction
# define V44_P3R	(4*1024)   	// Proposed Max chars in history, receive direction

#elif defined( MODEM_ARM )

# define V44_P1T	(1024)	// Proposed Number of code words, transmit direction
# define V44_P1R	(1024)	// Proposed Number of code words, receive direction
# define V44_P2T	255   	// Proposed Max string length, transmit direction
# define V44_P2R	255   	// Proposed Max string length, receive direction
# define V44_P3T	(11*1024)		// Proposed Max chars in history, transmit direction
# define V44_P3R	(4*1024)   	// Proposed Max chars in history, receive direction

#elif defined( CLES_MODEM )

# define V44_P1T	(2*1024 - 1)	// Proposed Number of code words, transmit direction
# define V44_P1R	(2*1024 - 1)	// Proposed Number of code words, receive direction
# define V44_P2T	255   	// Proposed Max string length, transmit direction
# define V44_P2R	255   	// Proposed Max string length, receive direction
# define V44_P3T	(16*1024 - 1)		// Proposed Max chars in history, transmit direction
# define V44_P3R	(16*1024 - 1)   	// Proposed Max chars in history, receive direction

#elif defined(WINMODEM)

# define V44_P1T	(32*1024 - 1)	// Proposed Number of code words, transmit direction
# define V44_P1R	(32*1024 - 1)	// Proposed Number of code words, receive direction
# define V44_P2T	255   	// Proposed Max string length, transmit direction
# define V44_P2R	255   	// Proposed Max string length, receive direction
# define V44_P3T	(64*1024 - 1)		// Proposed Max chars in history, transmit direction
# define V44_P3R	(64*1024 - 1)   	// Proposed Max chars in history, receive direction

#elif defined(CS_4)

# define V44_P1T	(4*1024 - 1)	// Proposed Number of code words, transmit direction
# define V44_P1R	(4*1024 - 1)	// Proposed Number of code words, receive direction
# define V44_P2T	255   	// Proposed Max string length, transmit direction
# define V44_P2R	255   	// Proposed Max string length, receive direction
# define V44_P3T	(32*1024 - 1)		// Proposed Max chars in history, transmit direction
# define V44_P3R	(16*1024 - 1)   	// Proposed Max chars in history, receive direction

#else
# error "Must define one of CS_4, MODEM_ARM, WINMODEM or MODEM_Z80"
#endif

// Uncomment V44_TEST to turn on unit test driver
# if defined(WINMODEM)
//#  define V44_TEST

// Uncomment V42BIS_TEST to use V.42bis encode/decoder instead of V.44
//# define V42BIS_TEST

// Uncomment V44_TEST_ENCODE_ONLY to get the encode bit stream on stdout
// instead of hair-pinning back into the decoder
//#  define V44_TEST_ENCODE_ONLY

// Uncomment V44_TEST_DECODE_ONLY to decode the input file
// instead of encoding
//#  define V44_TEST_DECODE_ONLY
# endif // WINMODEM

/* request value of negotiation parameters */
#define V44P0	3		/* data compression request, both directions */
#define V44_MIN_P1	 256		/* Minimum value for Parameter P1 */
#define V44_MIN_P2	 31			/* Minimum value for Parameter P2 */
#define V44_MAX_P2	 255		/* Maximum value for Parameter P2 */
#define V44_MIN_P3	 512		/* Minimum value for Parameter P3 */
#define V44_N3 8
#define V44_N4 256
#define V44_N5 4
#define V44_N1R 15	// really this should be a variable, based on negotiated # of codewords

// Memory required by V.44 dictionary and history buffers
// if in one contiguous block
// Note that the encoder history buffer is used by the encoder dictionary
typedef struct {
	byte en_history[V44_P3T];
	byte de_history[V44_P3R];
	byte *de_str_end_ptr[V44_P1R];
	byte de_str_len[V44_P1R];
} V44_DATA;
//# define V44_MEM_SIZE  ( V44_P3T + V44_P3R + ( sizeof(byte *) + sizeof(byte) ) * V44_P1R )
# define V44_MEM_SIZE  (sizeof(V44_DATA))

// Forward declarations needed by allglobs.h
enum V44_ENCODER_STATE {
	STR_ROOT_STATE,	// finding string, at root node
	STR_FIRST_CHAR_STATE,	// found first char of string below root
	STR_FIRST_SEG_CHAR_STATE,	// found first char of segmment
	STR_MIDDLE_SEG_CHAR_STATE,	// found middle char of segment
	STR_EXT_START_STATE,		// extending string, str_ext_len == 0
	STR_EXT_STATE,		// extending string
	STR_NUM_STATES
};

enum V44_DECODER_STATE {
	TM_DATA,	// receiving data
	TM_ESC,		// escape detected
	TM_ECM,		// ECM detected
	CM_ORDINAL_PREFIX,	// ordinal prefix detected
	CM_CW_PREFIX,	// code word prefix detected
	CM_CW_DATA,	// processing codeword C2 bits
	CM_CW_CONTROL_STEPUP,	// processing STEPUP control code based on next prefix
	CM_ORD_OR_STR_EXT_AFTER_CW,	// 0 after processing code word
	CM_STR_EXT_PREFIX,	// string extension prefix detected
	CM_STR_EXT_GREATER_THAN_ONE,	// string ext len >1 detected
	CM_STR_EXT_GREATER_THAN_FOUR,	// string ext len >4 detected
	CM_STR_EXT_BETWEEN_FIVE_AND_TWELVE,	// string ext len >=5 <=12 detected
	CM_STR_EXT_GREATER_THAN_TWELVE,	// string ext len >12 detected
	V44_NUM_DECODER_STATES,

	CM_ORDINAL_DATA = TM_ECM,	// processing ordinal C5 bits
	CM_CW_CONTROL = TM_ECM,	// processing control code C2 bits
	CM_STR_EXT_LENGTH_COMPLETE = TM_ECM	// string extension length completely detected
};

enum V44_DECODER_STRING_STATE {
	V44_RESET_CODE,
	V44_ORDINAL_CODE,
	V44_CODEWORD_CODE,
	V44_STR_EXT_CODE
};

// Data structure used in V44 dictionary management
// Use pointers to child and right neighbors,
// on Zinger these are 16 bits, so it runs *much* better
// than using word index and subscripting.
// Seems about same on Pentium; might run a small bit
// slower on processor with very small dcache.
// Code supports up to 32K-1 code words, 64K-1 history
#if defined(__MET__)
#pragma Pack(1)	// required to run on SA-110
#endif // __MET__
typedef struct v44_tree_node {
	struct v44_tree_node * down; // pointer to left-most child node
	struct v44_tree_node * right;	// pointer to right neighbor
	byte * hist_ptr;	// pointer into history[]
	byte len;	// length of string segment in history[]
} V44_TREE_NODE;
#if defined(__MET__)
#pragma Pack()
#endif // __MET__

#if defined(MODEM_Z80)
// choose one
# define NON_BANKED non_banked
//# define NON_BANKED
#else
# define NON_BANKED
#endif

// Public interface functions
extern void v44_init_variables ( void ) ;
extern void v44_encode_flush( void ) ;
extern void v44_encode ( void );
extern void v44_display( void );
extern byte v44_decode ( byte *, word, byte );
extern void v44_set_default_params( void );
#if defined(MODEM_Z80) || defined(MODEM_ARM)
extern byte v44_set_params( word en_n2, word de_n2, byte en_n7, byte de_n7, word en_n8, word de_n8 );
#endif

// Other internal but non-static functions
extern NON_BANKED void v44_decode_process_control( word val );
extern NON_BANKED V44_TREE_NODE * v44_encode_get_node( byte *hist_ptr, byte length );
extern NON_BANKED byte v44_encode_match_right_node_first_byte( void );
extern NON_BANKED byte v44_encode_match_right_node_string( byte *str, byte len );
extern NON_BANKED void v44_encode_send_control ( word code );
extern NON_BANKED void v44_encode_send_ordinal( byte ordinal );
extern NON_BANKED void v44_encode_send_codeword( V44_TREE_NODE *node );
extern NON_BANKED void v44_encode_send_str_ext( byte ext_len );
extern NON_BANKED void v44_encode_process_root_byte( void );
extern NON_BANKED void v44_encode_process_ext( void );
extern NON_BANKED void v44_encode_insert_root_child( byte root_index );
extern NON_BANKED void v44_encode_insert_child( byte * seg_ptr, byte seg_len );
extern NON_BANKED void v44_encode_error( byte err );
extern NON_BANKED void v44_encode_dict_init ( void );
extern NON_BANKED void v44_encode_bitbuff_flush ( void );
extern NON_BANKED void v44_encode_complete ( void );
extern NON_BANKED void v44_encode_check_compressibility(void);
extern NON_BANKED void v44_encode_process_first_byte(void);
extern NON_BANKED void v44_encode_process_first_seg_byte(void);
extern NON_BANKED void v44_encode_process_middle_seg_byte(void);
extern NON_BANKED void v44_encode_process_ext_start_byte(void);
extern NON_BANKED void v44_encode_process_bytes ( byte maxLen, byte setParity );
extern NON_BANKED void v44_decode_process_codeword( word cw );
extern NON_BANKED void v44_decode_process_ordinal( word val );
extern NON_BANKED void v44_decode_process_string_extension( byte ext_len );
extern NON_BANKED byte v44_decode_process_bytes( byte *rptr, word max_dte_write, byte len );
extern NON_BANKED void v44_decode_process_tm_byte( byte inval );
extern NON_BANKED void v44_decode_process_stepup( byte is_cw_stepup );
extern NON_BANKED void v44_decode_dict_init ( void );
extern NON_BANKED void v44_decode_error( char err );
extern NON_BANKED void v44_encode_pack_bits ( word val, byte bitlen );
extern void v44_decode_dump_string_list ( void );
extern void v44_decode_test( byte val );
#if defined(WINMODEM)
void v44_encode_dump_dict( void );
#else
# define v44_encode_dump_dict()	((void)0)
#endif // WINMODEM
#if defined(V44_TEST)
void v44_test( char *listfile );
#endif // V44_TEST
#if defined(MODEM_Z80)
NON_BANKED void v44_ram_start(void);
NON_BANKED void v44_ram_end(void);
extern NON_BANKED void v44_decode_write_block( byte *val_ptr, byte num_bytes );
void v44_init_ram_code(void);
void v44_check_ram(void);
extern byte v44_ram_init_end[];
#else
# define v44_init_ram_code() ((void)0)
# define v44_check_ram() ((void)0)
#endif

#endif	// __V44_H__
