/*name and version number:@(#)v_stats.h	1.5*/
/*date of get: 		  09/06/00 16:59:31*/
/*date of delta:	  05/22/00 13:50:48*/
/*****************************************************************************
** File        : v_stats.h                                                     *
** Version     : 2.2                                                         *
**---------------------------------------------------------------------------*
** Description :                                                             *
**   Include file for any module wishing to be able to access or control the *
** gathering of QoS related statistics etc.                                  *
**                                                                           *
** NOTE: statistics operations are accessible only via 'C' at present. Do not*
** attempt to include this file in assembler.                                *
**---------------------------------------------------------------------------*
**                               HISTORY                                     *
** Date            Ver   Dev  Comments                                       *
** 14th Oct  1998  1.0   RGT  Initial Revision                               *
**                                                                           *
**[Release 2]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
** 25th Jan  1999  2.0   RGT  Removed all debug functions and debug info,    *
**                            added in driver stats structure that contains  *
**                            better overall system monitoring.              *
**                                                                           *
** 20th Apr  1999  2.1   RGT  Re-write: added in warning logging, better     *
**                            tracking of pkts/frames through the system.    *
**                            Better cpu monitoring, plus rx/tx totals.      *
**                                                                           *
** 5th  May  1999  2.2   RGT  Added warning for maximum jitter being exceeded*
**                            in the RTP library under dynamic buildout in   *
**                            non-silence suppression mode.                  *
**                                                                           *
******************************************************************************/

#if !defined(_STATS_H)
#define _STATS_H

#include <v_defs.h>

/****************************************************************************
          ####   ###   #   #   ###  #####   ###  #   #  #####  ###
         #      #   #  ##  #  #       #    #   # ##  #    #   #
         #      #   #  # # #   ###    #    ##### # # #    #    ###
         #      #   #  #  ##      #   #    #   # #  ##    #       #
          ####   ###   #   #  ####    #    #   # #   #    #   ####
*****************************************************************************/

	/*************************************************
	**           Miscellaneous Constants            **
	**************************************************/
		#define	WARNING_QUEUE_SIZE			30
		#define LOSS_QUEUE_SIZE				20

	/*************************************************
	**     Warning constants for Exchanger Core     **
	**************************************************/
		#define WARN_EXCH_PNET_FAX_TRANS	0x01
		#define WARN_EXCH_PSTN_FAX_TRANS	0x02
		#define WARN_EXCH_PNET_VOICE_TRANS	0x03
		#define WARN_EXCH_PSTN_VOICE_TRANS	0x04
		#define WARN_EXCH_UNKNOWN_PROTOCOL	0x05 
		#define WARN_EXCHG_PASSED_BAD_PKT	0x06
		#define WARN_EXCH_ZERO_MAX_J		0x07
		#define WARN_EXCH_ZERO_MIN_J		0x08
		#define WARN_EXCH_ZERO_FAX_BLDOUT	0x09
		#define WARN_EXCH_ZERO_FAX_PAYLOAD	0x0A
		#define WARN_EXCH_ZERO_INIT_J		0x0B

	/*************************************************
	**       Warning constants for PNET media       **
	**************************************************/
		#define WARN_RCVD_BAD_PKT			0x11
		#define	WARN_PNET_INBUF				0x12
		#define WARN_PNET_OUTBUF			0x13
		#define WARN_PNET_SYNC				0x14

	/*************************************************
	**       Warning constants for PSTN media       **
	**************************************************/
		#define WARN_RCVD_BAD_FRAME			0x21
		#define WARN_PSTN_INBUF				0x22
		#define WARN_PSTN_OUTBUF			0x23
		#define WARN_PSTN_SYNC				0x24
		#define WARN_PSTN_RESYNC			0x25

	/*************************************************
	** Warning constants for Host Command Interface **
	**************************************************/
		#define WARN_HCMD_BAD_INPUT_CMD		0x31
		#define WARN_HCMD_Q2HOST_FAILED		0x32
		#define WARN_HCMD_ACK_TIMEOUT		0x33
		#define WARN_HCMD_RETRY_EXCEED		0x34
		#define WARN_HCMD_CMD2HOST_TRUNC	0x35
		#define WARN_HCMD_BAD_PARAM			0x36

	/*************************************************
	**  Warning constants for DSP Command Interface **
	**************************************************/
		#define WARN_DCMD_NO_ACK			0x41
		#define WARN_DCMD_RETRY_EXCEED		0x42
		#define WARN_DCMD_BAD_CMD			0x43
		#define WARN_DCMD_INBUF				0x44
		#define WARN_DCMD_OUTBUF			0x45
		#define WARN_DCMD_BAD_COMMAND		0x46
		#define WARN_DCMD_PROG_LOGIC_FAIL	0x47

	/*************************************************
	**     Warning constants for IFP/FAX Library    **
	**************************************************/
		#define WARN_IFP_BAD_HEADER			0xA1
		#define WARN_IFP_BAD_FRAME			0xA2
		#define WARN_IFP_PSTN_BAD_SIG_TYPE	0xA3
		#define WARN_IFP_PNET_BAD_SIG_TYPE	0xA4
		#define WARN_IFP_BAD_FRAME_LEN		0xA5
		#define WARN_IFP_BAD_PAYLOAD		0xA6
		#define WARN_IFP_BAD_BUILDOUT		0xA7
		#define WARN_IFP_BAD_FRMS_PER_PKT	0xA8
		#define WARN_IFP_BAD_MAX_PAYLOAD	0xA9


	/*************************************************
	**    Warning constants for RTP/Voice Library   **
	**************************************************/
		#define WARN_RTP_GOT_DEMOD_FRAME	0xB1
		#define WARN_RTP_BAD_CODEC			0xB2
		#define WARN_RTP_BAD_HEADER			0xB3
		#define WARN_RTP_SSRC_CHANGED		0xB4
		#define WARN_RTP_BAD_MAX_JITTER		0xB5
		#define WARN_RTP_BAD_MIN_JITTER		0xB6
		#define WARN_RTP_BAD_FRMS_PER_PKT	0xB7
		#define WARN_RTP_BUILDOUT_RECAL		0xB8
		#define WARN_RTP_MAX_J_EXCEEDED		0xB9
		#define WARN_RTP_BAD_INIT_JITTER	0xBA

/****************************************************************************
            #####  #   #  ####   #####  ####   #####  #####  ###
              #    #   #  #   #  #      #   #  #      #     #
              #     ###   ####   ###    #   #  ###    ###    ###
              #      #    #      #      #   #  #      #         #
              #      #    #      #####  ####   #####  #     ####
*****************************************************************************/

	/*************************************************
	**   Transmit Direction Statistics Structure    **
	**************************************************/
		typedef struct {
			lword	lostPkts;			// pkts lost over IP
			lword	badPkts;			// bad pkts rcvd from 2183
			lword	droppedPkts;		// pkts lost in Z80 'cause no memory
			lword	queuedPkts;			// pkts queued in Z80
			lword	rcvdFrames;			// frames rcvd
			lword	mediaBytes;			// bytes processed
			lword	droppedFrames;		// frames lost in Z80 'cause no memory
			lword	oldFrames;			// frames too old to queue
			lword	duplicateFrames;	// duplicate frames rcvd
			lword	queuedFrames;		// frames queued to PSTN
			lword	erasedFrames;		// erasure frames
			lword	outputFrames;		// frames sent to PSTN
			lword	old_outputFrames;		// frames sent to PSTN
			word	bufferedPkts;		// pkts waiting to be proc'd
			word	pktQueueSize;		// size of Tx pkt queue
			byte	buildout;	
		} transmit_t;

	/*************************************************
	**   Receive  Direction Statistics Structure    **
	**************************************************/
		typedef struct {
			lword	droppedFrames;		// frames lost in Z80 'cause no memory
			lword	rejectedFrames;		// frames rejected 'cause wrong codec
			lword	queuedFrames;		// frames queued for exchanger
			lword	old_queuedFrames;	// Used to detect hung trigger byte
			lword	bufferedFrames;		// frames waiting to be processed
			lword	mediaBytes;			// bytes processed
			lword	droppedPkts;		// pkts lost in Z80 'cause no memory
			lword	silencePkts;		// pkts thrown 'cause all silence
			lword	queuedPkts;			// pkts queued to PNET
			word	frameQueueSize;		// size of Rx Frame queue
			word	pktQueueSize;		// size of pkt queue
			word	bufferedPkts;		// pkts waiting for 2183
			word	maxBufferedPkts;	// max pkts ever waiting for 2183
			word	outputPkts;			// pkts sent to 2183
			word	jitter;				// should be in tx stats but no room!
		} receive_t;


	/*************************************************
	**   Performance Monitoring Stats  Structure    **
	**************************************************/
		typedef struct {
			lword	rxPkts;				// total number of pkts sent to 2183
			lword	txPkts;				// total number of pkts from 2183
			byte	rxPkts_3;
			byte	txPkts_3;
		
			word	lostPkts;			// total number of pkts lost over IP
			word	badPkts;			// total number of bad pkts from 2183
			word	cycles;				// main loop cycles last second
			word	minCycles;			// min cycles in 1 sec since start
			word	maxCycles;			// max cycles in 1 sec since start
		} performance_t;

	/*************************************************
	**        Warnings Collation Structure          **
	**************************************************/
		typedef struct {
			lword	numWarns;			// number of warnings received
			byte	queue[WARNING_QUEUE_SIZE];
		} warnings_t;
	

	/*************************************************
	**  Transient Rx/Tx Stats collation structure   **
	**************************************************/
		typedef struct {
			transmit_t		tx;
			receive_t		rx;
		} stats_t;


	/*************************************************
	**  Statistics Display structure at 0x38040     **
	**************************************************/
		typedef struct {
			performance_t	perf;
			transmit_t		tx;
			receive_t		rx;
			warnings_t		warnings;
		} disp_t;

		typedef struct {
			word			seqNum;
			Boolean			status;
		} pktLossElem_t;

		typedef struct {
			word			hiSeq;
			byte			totalPkts;
			byte			crntLoss;
			byte			maxLoss;
		} pktLosses_t;

#endif	// _STATS_H
