/*name and version number:@(#)allglobs.h	1.224*/
/*date of get: 		  01/10/01 16:58:00*/
/*date of delta:	  01/05/01 10:15:24*/
/************************************************************************
File :	allglobs.h
Description :
	Contains globals/extern definitions for SA and zinger.

Revision History :
	Initials	Date		Change
	RWF			11/12/98	Initial
	JMG			03/15/00	Added Special Dist Ring
*************************************************************************/

#ifndef	__ALLGLOB_H__
#define __ALLGLOB_H__

//------------------------------------------------------------------------
//		Introduce defines, macros, structs and enums needed
//------------------------------------------------------------------------
// In Multi-Instance mode, all types must be known by all files
// because the set of global variables is contained in a single
// structure which must be completely characterized at compile
// time.  Therefore all include files are presented always.
//
// In Single-Instance, or legacy mode, only those varibles used
// by a particular file need be characterized at compile time.
// In this case, only when the variables are created will we
// present all the includes
//
// NOTE: All relevant include files have been given protection
// to prevent them from being included more than once.
//------------------------------------------------------------------------

#if defined(__CREATE_GLOBALS) || defined(SA_MULTI_INSTANCE)
# include "llglob_d.h"
# include "dpglob.h"
# include "ioglob_d.h"
# include "iouart_d.h"
# include "lapm.h"
# include "mnp.h"
# include "sync.h"
//msm// # include "z80glob.h"
# include "v42bis.h"
//msm// # include "v44.h"
# if defined(CLASS2_FAX) || defined(CLASS20_FAX) || defined(IWF_FAX)
#  include "fax_c2.h"
# endif
# if defined(V34_FAX)
#  include "faxv34.h"
# endif	// V34_FAX
# if defined(FAX_ECM)
#  include "fax_ecm.h"
# endif
# if defined(TCP_IP)
#  define TCP_IP_DEBUG_THIS_FILE
#  include "micronet.h"
# endif
# if defined(CS_4)
#  include	<mqx.h>
#  include "sa_host.h"
#  include "sa_glob.h"
#  include "sa_addr.h"
#  include "sa_ctype.h"
# endif // CS_4
# if defined(CS_V110)
#  include "v110sys.h"		// System definitions
#  include "v110syif.h"		// system interface definitions
#  include "v110ltos.h"		// LTOS Exec defines
#  include "v110il.h"		// ILV110API definitions
#  include "v110.h"			// V.110 definitions
#  include "v110cs.h"	
# endif // CS_V110
# if !defined(CS_MODEM) 
#  include "atglob.h"
# endif 
# define __EXTERN
#else
# define __EXTERN extern
# include "v42bis.h"
#endif // __CREATE_GLOBALS || SA_MULTI_INSTANCE

//msm// #include "v44.h"

//=============================================
// Eliminate static variables for CS-4
// (cannot have 32 instances of one varable).
// Also eliminate for ARM-based client, stack works fine
//=============================================
#if defined(CS_4) || defined(MODEM_ARM)
# define STATIC
#else
# define STATIC static
#endif

//================================================================
//		Just one of these
//================================================================
#if defined( __CREATE_GLOBALS )
#  define __1_EXTERN
#else
#  define __1_EXTERN extern
#endif	// __CREATE_GLOBALS 

#  define MAX_COMMANDS	256	

__1_EXTERN  volatile word x_timer;
#if defined(SA_MULTI_INSTANCE)
__1_EXTERN  U32	ModemNum;			// current instance running (0-31)
__1_EXTERN  U32 ModemOffset;		// a global containing current X bus offset
__1_EXTERN	U32 ttlCalls;
__1_EXTERN	U32 sa_overridePrnting;
__1_EXTERN	PRINT_STATE sa_prntState;
__1_EXTERN  U32 sa_modemStateCntr[ MAXMODEMS ];
__1_EXTERN  CALL_TYPE modemCallType[ MAXMODEMS ];
# if defined(SA_LOOPBACK_TEST)
__1_EXTERN	U32 sa_dteloopback_modem;
# endif // SA_LOOPBACK_TEST
# if defined(XBUS_TIMING_DEBUG)
__1_EXTERN  U32 xbusRead;
__1_EXTERN  U32 xbusWrite;
__1_EXTERN  BOOL xbusFlg;
__1_EXTERN  BOOL perfMonitor;
__1_EXTERN  word idle_time;
__1_EXTERN  word idle_time_wdcount1;
__1_EXTERN  word idle_time_wdcount;
__1_EXTERN  U32 idle_time_count;
# endif	//XBUS_TIMING_DEBUG
# if defined(SA_BUFFERED_PRINTING)
__1_EXTERN	byte  saDebug_rx_buff [ SA_DEBUG_RX_BUFF_SIZE ];
__1_EXTERN	byte *saDebug_rx_sptr;
__1_EXTERN	byte *saDebug_rx_eptr;
__1_EXTERN	byte *saDebug_rx_wptr;
__1_EXTERN	byte *saDebug_rx_rptr;
__1_EXTERN	U32   saDebug_rx_cntr;
__1_EXTERN	byte  saDebug_tx_buff [ SA_DEBUG_TX_BUFF_SIZE ];
__1_EXTERN	byte *saDebug_tx_sptr;
__1_EXTERN	byte *saDebug_tx_eptr;
__1_EXTERN	byte *saDebug_tx_wptr;
__1_EXTERN	byte *saDebug_tx_rptr;
__1_EXTERN	U32   saDebug_tx_cntr;
__1_EXTERN	byte  overRide_buff [ OVERRIDE_BUFF_SIZE ];
__1_EXTERN	byte *overRide_sptr;
__1_EXTERN	byte *overRide_eptr;
__1_EXTERN	byte *overRide_wptr;
__1_EXTERN	byte *overRide_rptr;
__1_EXTERN	U32   overRide_cntr;
__1_EXTERN	U32   sa_stopPMdumpCnt;
# endif	// SA_BUFFERED_PRINTING
# if defined(SA_TIMER_DEBUG)
__1_EXTERN  U32	OurTimerModem;
# define SA_NUM_BINS		10
__1_EXTERN  U32	AllTimerModem;
__1_EXTERN  U32 saTimeA, saMaxTimeA, saSumA, saCountsA, saBinA[SA_NUM_BINS];
__1_EXTERN  U32 saTimeB, saMaxTimeB, saSumB, saCountsB;
__1_EXTERN  U32 saTimeC, saMaxTimeC, saSumC, saCountsC;
# endif	// SA_TIMER_DEBUG
# if !defined(MQX)
__1_EXTERN	U32 sa_modemSpread [ 32 ] ;	// time slice monitoring
# endif	// !MQX
# include "dpglob.h"
__1_EXTERN dsp_dbg_t Dsp_Dbg[MAXMODEMS];
#endif	// SA_MULTI_INSTANCE
//
// Just one of these
//----------------------------------------------------------------

//------------------------------------------------------------------------
//			Macros
//------------------------------------------------------------------------
#if defined(SA_MULTI_INSTANCE)
//-------------------------------------------------------
// Macros for global access
//-------------------------------------------------------
# define I(x)			IGlobPtr -> x
# define G(x)			GlobPtr -> x
# define Gprime(m,x)	(InstanceArray[m].globalPtr) -> x
# define Goffset(x)		((U32)&(((GLOBALS *)0)->x))
# define Gval(x)		(*(word *)((U32)GlobPtr + (x)))
//-------------------------------------------------------
// Macro for context switch
// MUST BE CALLED WITH INTERRUPTS DISABLED
//-------------------------------------------------------
# define			SA_SWITCHMODEM(n)				\
 do {												\
   	MODEMINSTANCE *inst = &InstanceArray[ n ];		\
  	GlobPtr     = inst->globalPtr;		\
	IGlobPtr    = inst->iglobalPtr;	\
	ModemOffset = inst->ModemOffset;	\
	ModemNum    = n;	\
 } while(0)
#elif !defined( Z80_ASM )
# define I(x)		x
# define G(x)		x
# define	SA_SWITCHMODEM(n)
#endif

#if defined(SA_MULTI_INSTANCE)
//----------------------------------------------------
//			For CS-4 Multi-Instance
//----------------------------------------------------
//		CREATE A GLOBAL STRUCTURE for CS-4 Variables
//----------------------------------------------------
typedef struct {
#endif	// SA_MULTI_INSTANCE

/****************************************************************
	Allocate global modem variables used by all tasks
*****************************************************************/
#if defined(__LL_GLOB_H__)
__EXTERN MODEM_MODE x_modem_mode;
__EXTERN MODEM_STATE x_modem_state;
__EXTERN MODEM_LINE_RATE x_line_rate;
__EXTERN MODEM_LINE_RATE x_line_rate_tx;
__EXTERN MODEM_LINE_RATE x_fax_rate;
__EXTERN MODEM_DIAL_RESIDUAL x_dial_residual;
__EXTERN MODEM_EC x_modem_ec;
__EXTERN S_REGISTERS S;
__EXTERN V17_FAX_MODE x_fax_v17;
__EXTERN FAX_STATE x_fax_state;
#if defined(CS_MODEM)
__EXTERN CS_RR_RTN cs_rrrtn;
__EXTERN CS_RR_RTN *cs_rr_rtn;
#endif	// CS_MODEM
#endif	// __LL_GLOB_H__

__EXTERN byte x_modem_originate;
__EXTERN byte x_test_mode_on;   // Flag indicating test mode turned on or off
__EXTERN byte x_dma_xfer;
__EXTERN byte x_parity_mask;
__EXTERN word x_minute_timer;
__EXTERN word x_minute_count;
__EXTERN dword x_minute_timer_long;
__EXTERN word uart_rx_count;

// x_scratch[] can be used to make Z80 code faster.
// Don't assume that anything in this array is preserved
// when you call another function.
__EXTERN byte x_scratch[40];

__EXTERN byte ETC_mode;
#if !defined(CS_4)
__EXTERN byte venusDebugToDTE;
# if defined(Z80_DEBUG_PRINT)
__EXTERN byte dumbPortPresent;
# endif	// Z80_DEBUG_PRINT
#endif	// !CS_4
#if defined(CS_MODEM)
__EXTERN word CS_RobBitPattern; // store Robbed Bit Pattern, since CS_MODEM cannot use x_status
#endif

/****************************************************************
Globals used by Zinger (all models - isa, serial, usb)
****************************************************************/
#if defined(MODEM_Z80)
#if defined(__Z80_GLOB_H__)
#if !defined(CS_MODEM)
__EXTERN FLOW_CONTROL uart_flow_control;
#endif
#if defined(EXT_MODEM)
__EXTERN SERIAL_MODEM_STATE z80_modem_state;
#endif	// EXT_MODEM
#endif	// __Z80_GLOB_H__
__EXTERN byte z80_venus2;	// revision register for venus2
__EXTERN byte z80_v92cap;	// V.92 capabilities - EEPROM loc V92_CAPABLE
#if defined(Z80_USE_DPLL)
__EXTERN BOOL z80_use_dpll;
#endif	// Z80_USE_DPLL
#if !defined(EXT_MODEM)
__EXTERN BOOL z80_sw_flow_on;
#endif	// !EXT_MODEM
#endif	// MODEM_Z80

/****************************************************************
	For DAA autodetection
*****************************************************************/
__EXTERN BOOL dp_daa_is_perseus;

/****************************************************************
	global variables used by AT task
****************************************************************/
#if !defined(CS_MODEM)
#if defined(__ATGLOB_H__)
__EXTERN AT_RESULT_CODE at_result_code;
__EXTERN AT_STATE at_state;       // AT command state
__EXTERN byte at_cmd_buf[ATMAX+3];        // AT command buffer
#endif	//__ATGLOB_H__

__EXTERN byte *at_cmd_ptr;        // AT command pointer
__EXTERN word at_cmd_len;         // AT command length
__EXTERN byte at_connect_code_flag;  //AT - is output msg. a CONNECT msg?
__EXTERN byte at_view_more;
__EXTERN byte at_parity;         // a flag indicating parity set by application
__EXTERN byte at_char_a;         // for saving character 'a'
__EXTERN word at_timer;

__EXTERN STATUS x_status;
__EXTERN byte at_currentViewLine;
__EXTERN char *at_printCp;

// atfax.c
__EXTERN word fprsetting;
#if defined(__FAXV34_H__)
			// jmg 022499 - V34 Fax Globals
__EXTERN byte	x_fax_maxp;		// primary channel user spec'd max rate
__EXTERN byte	x_fax_minp;		// primary channel user spec'd min rate
__EXTERN byte	x_fax_prefc;	// control channel preferred rate
__EXTERN byte	x_fax_maxp2;	// pri chan rcv rate max (full duplex)
__EXTERN byte	x_fax_minp2;	// pri chan rcv rate min (full duplex)

__EXTERN byte	x_fax_train;	// training flag (LONG_TRAIN, SHORT_TRAIN, RATE_RENEG)

__EXTERN	FAX_V34_MODE	x_fax_v34mode;
__EXTERN	FAX_V34_CHANNEL	x_fax_v34channel;	// temporary channel indicator

			// fax statics
__EXTERN word	*dte2dce_buf, *dce2dte_buf ;	// V34 Fax Buffers
__EXTERN word	io_hdlc_tx_count, io_hdlc_rx_count;
__EXTERN byte	tx_frame_in_buf, rx_frame_in_buf;
#endif	// V34_FAX

// atfax_c2.c
#ifdef __FAX_C2_H__
	__EXTERN word c2_gpv1;              // Type of operation: store, display value, display range
	__EXTERN byte c2_action_cmd;        // Indicates if an action command was entered
#endif

// atsync.c
#if defined(__SYNC_H__) && defined(V80)
__EXTERN V80_OPTIONS V80_Options;
#endif	// __SYNC_H__

#ifdef V25TER
__EXTERN byte at_v25ter_VpcmOption, at_v25ter_56kRate, at_v25ter_bV34Enable, at_v25ter_AutoRate;
__EXTERN byte at_v25ter_DialLineRate, at_v25ter_AutoMode, at_v25ter_CommStdSetting;
#endif	//V25TER

#ifdef VPCM_CLIENT
__EXTERN byte vp_initial_connect_msg_done;
__EXTERN byte vpcm_bad_mse;
__EXTERN byte vpcm_count_1ff9;
__EXTERN word vpcm_mse_check_timer;
__EXTERN byte vpcm_bad_mse_frame_count;
__EXTERN byte vpcm_getgain_fail;
#endif	//VPCM_CLIENT

#endif //CS_MODEM

/****************************************************************
	global variables used by DP task
*****************************************************************/

#if defined(__DP_GLOB_H__)
__EXTERN DP_STATE dp_state;
#if !defined(CS_4)
__EXTERN DP_STATE p_dp_state;
#endif	// !CS_4
__EXTERN DP_LINE_STATE dp_line_state;
__EXTERN DP_DIALING_STATUS dp_dialing_status;
#if defined(HOMOL)
__EXTERN BLACKLIST_RECORD dp_blacklist[BLACKLIST_SIZE];
#endif	//HOMOL
__EXTERN DP_CADENCE dp_tone_state, dp_answer_state;
__EXTERN DP_CADENCE dp_busy_state, dp_ringback_state;
__EXTERN DP_CADENCE dp_fax_tone_state;
#if defined(VOICE)
__EXTERN DP_CADENCE dp_trouble_state;
__EXTERN DP_CADENCE dp_data_tone_state;
__EXTERN DP_CADENCE dp_dtmf_state;
__EXTERN DP_VOICE_RING_STATE dp_voice_ring_state;
#endif	// VOICE
__EXTERN DP_DIAL_STATE dp_dial_state;
__EXTERN DP_PHONE_STATE dp_local_phone_state;
__EXTERN byte dp_fax_status;  // b7-b2: reserved; b1: 1 = +FRS, 0 = +FTS; b0: 1 = ignore V.21 preamble
#if !defined(CS_MODEM)
__EXTERN byte dialed_number[MAX_DIGITS];		// dial string with modifiers filterd
#endif	// !CS_MODEM
#if defined(V92_MODEM_ON_HOLD)
__EXTERN MH_V92_STATE dp_mh_state;
__EXTERN word dp_mh_T1;
__EXTERN word dp_mh_timer;
#if defined (VPCM_SERVER)
__EXTERN word dp_dsp_sav[14];
#endif	//VPCM_SERVER
#endif	// V92_MODEM_ON_HOLD
#if defined(K56FLEX) || defined(VPCM_CLIENT) || defined(VPCM_SERVER)
__EXTERN DP_56K_STATE dp_56k_state;
#if defined(CS_4)
__EXTERN DP_56K_STATE p_dp_56k_state;
#endif	// CS_4
#endif	// K56FLEX || VPCM_CLIENT || VPCM_SERVER
#if defined(SDR_RING_DETECT)
__EXTERN SDR_State sdr_ring_state;
#endif	// SDR_RING_DETECT
#endif	//__DP_GLOB_H__

#if defined(CS_MODEM) || defined(COPERNICUS) || defined(CS_4)
__EXTERN word cs_p_error_code;						
__EXTERN word cs_misc2_buf_size;					
__EXTERN byte cs_rmp_level2_debug_on;
#endif	// CS_MODEM || COPERNICUS || CS_4

__EXTERN TIME_MIN_SEC  dp_long_timer;       // Timer for s7 
__EXTERN TIME_MIN_SEC  dp_long_timer;       // Timer for s7 
__EXTERN word dp_timer;
__EXTERN volatile word dp_timer1; //msm
#if defined(VPCM_SERVER)
__EXTERN word dp_lapm_tx_timer;
__EXTERN word dp_lapm_rx_timer;
#endif // VPCM_SERVER
__EXTERN word dp_wDspRetrainState;
__EXTERN word ci_timer1;
__EXTERN byte dp_redial, dp_cleardown_wait;
__EXTERN byte dp_dial_string [42];
__EXTERN volatile byte dp_ring_int; //msm
__EXTERN byte dp_calling_tone_disable;
__EXTERN byte dp_threshold; 
__EXTERN byte DpIdleFillChar;   //  idle line (no data) fill character
__EXTERN byte dp_tad_downloaded;
__EXTERN byte dp_fax_downloaded;
__EXTERN byte dp_sleep;
__EXTERN byte dp_fdsp_record;
__EXTERN byte dp_ring_int_count;
#if !defined(CS_MODEM)
__EXTERN BOOL SaveDPState;
#endif // !CS_MODEM
#if defined(COPERNICUS) || defined(CS_MODEM) || defined(SA_DIGITAL)
__EXTERN byte dp_s37_changed;
#endif
#if defined(HOMOL) && (defined(VOICE) || defined(UKCID))
__EXTERN volatile byte dp_polarity_int; //msm
#endif
#if defined(DC0)
__EXTERN byte cell_ring_int;
__EXTERN byte cell_active;
#endif	// DC0
#if defined(KORTEX)
__EXTERN byte kx_ring_state;
#endif

// dpcall.c
#if defined(HOMOL)
__EXTERN TIME_MIN_SEC  dp_time_blacklisted;		// Time blacklisting started
#endif	//HOMOL
__EXTERN word dp_dial_tone_timer, dp_answer_on_timer, dp_answer_off_timer;
__EXTERN word dp_tone_timer, dp_tone_on_time, dp_tone_off_time;
__EXTERN word dp_busy_tone_timer, dp_quiet_answer_timer;
__EXTERN word dp_busy_on_cadence, dp_busy_off_cadence;
__EXTERN word dp_ringback_on_cadence, dp_ringback_off_cadence;
__EXTERN word dp_no_ringback_timer;
__EXTERN word dp_ringback_on_timer;
__EXTERN word dp_ringback_off_timer;
__EXTERN word dp_dial_timer;
__EXTERN word dp_dial_pause;
__EXTERN word dp_bong_tone1_on_time;
__EXTERN word dp_max_pause;
__EXTERN word dp_continous_busy_timer;
__EXTERN word peak_energy;
__EXTERN word peak_busy_energy;
__EXTERN byte *dp_dial_ptr;
__EXTERN byte dp_busy_cycles;
__EXTERN byte dp_ringback_cycles;
__EXTERN byte dp_dialtone_cycles;
__EXTERN byte dp_failures;			// Total number of consecutive failures
#if defined(HOMOL)
__EXTERN byte dp_blacklist_calls;
#endif	// HOMOL

// dpfax.c
#if !defined(CS_MODEM) || defined(CLASS2_FAX) 
__EXTERN V17_FAX_MODE last_fax_v17;
__EXTERN word dp_local_phone_timer;
__EXTERN word fax_cd_threshold;
__EXTERN word fax_mse_thresh;
__EXTERN word v21_valid_timer;
__EXTERN word cd_dropout_timer;
__EXTERN word cd_returned_timer;
__EXTERN word dp_fax_tone_on;
__EXTERN word dp_fax_tone_off;
__EXTERN byte fax_mse_count;
__EXTERN byte cl1_flag;
#endif 

#if defined(SDR_RING_DETECT)
__EXTERN word *sdr_ptr;
__EXTERN word sdr_timer;
__EXTERN byte SDR_Ring_Select;
__EXTERN byte sdr_ring_valid;
#endif

// dpvoice.c
#if defined(VOICE)
__EXTERN word dp_trouble_on_cadence;
__EXTERN word dp_trouble_off_cadence;
__EXTERN word dp_trouble_tone_timer;
__EXTERN word dp_voice_timer1, dp_voice_timer2, dp_voice_timer3;
__EXTERN word dp_data_tone_on, dp_data_tone_off;
__EXTERN word dp_spk_volume;
__EXTERN word dp_spk_mute;
__EXTERN byte dp_dtmf_digit, dp_dtmf_end, dp_dtmf_old;
__EXTERN byte dp_reg20, dp_reg16;
__EXTERN byte dp_vt_cntrl, dp_dialtone_enable;
__EXTERN byte dp_report_ring;
__EXTERN byte voice_ring_count ;
__EXTERN byte dp_synth_ring_state;
__EXTERN byte *dp_ring_ptr;
__EXTERN byte dp_monitor_hec;
__EXTERN byte dp_vsp;
__EXTERN byte dp_busy_cnt, dp_trouble_cnt;
#endif	// VOICE

#if !defined(CS_MODEM) 
// dpfdsp.c
#if defined(VOICE)
__EXTERN word dp_max_mute; 
__EXTERN word dp_mute_idle; 
__EXTERN word dp_dtmf_high_level;
__EXTERN word dp_dtmf_low_level;
__EXTERN byte conv_record;
#endif	// VOICE

// dpvts.c
#if defined(VOICE)
__EXTERN word vts_parsed_number;
__EXTERN word vtsParseMin;
__EXTERN word vtsParseMax;
__EXTERN word vtsFreq[ 2 ];
__EXTERN byte *dp_vts_ptr;
#endif	// VOICE
#endif	//!CS_MODEM

// samdmtsk.c
#if defined(SA_MULTI_INSTANCE)
__EXTERN *	modem_msg_pool;	// msg pool for input msgs 
__EXTERN INTERNAL_MSG *msg; // current msg being processed
__EXTERN U16	modem_queue; // input queue (commands, notification of transmit data)
# if defined(SA_MODEM_DEFERRED_FLUSH)
__EXTERN word dte_flush_timer; // time since last DTE descriptor flush
# endif	// SA_MODEM_DEFERRED_FLUSH
#endif	// SA_MULTI_INSTANCE

// dpcntlv.c
__EXTERN MODEM_LINE_RATE dp_max_line_rate;
__EXTERN word dp_wV32bisRcvRate;
__EXTERN byte dp_bGoodAuto;
__EXTERN byte dp_bFallForward; // 0 - disable ; 1 - enable ; 2 - local fallback;
__EXTERN word dp_wV34Option; // DSP options register 821.
__EXTERN word V34Mode;
__EXTERN byte dp_bV34WkState;
__EXTERN word wSymbolRate;
__EXTERN word dp_cmd_timer;
__EXTERN word dp_frate_timer;
__EXTERN byte dp_count;		// used for answer tone count and MSE count
__EXTERN byte dp_dsp_status;
__EXTERN volatile byte dp_byte_c, dp_byte_d, dp_byte_e, dp_byte_f; //msm
__EXTERN volatile byte dp_dsp_data_in_progress; //msm
__EXTERN byte dp_reg2b, dp_bamil_rbc;
#if defined(CS_4)
__EXTERN word dp_bamil_re6;
__EXTERN byte tbRegB0;
#else
__EXTERN volatile byte dp_bamil_rd7; //msm
#endif	// !CS_4
__EXTERN volatile word dp_bad_crc_count;	// HDLC packets received with bad CRC //msm
#if defined(VENUS_AT_CS) || defined(CS_MODEM)
__EXTERN word dp_lcl_rx_ratechange;
__EXTERN word dp_lcl_tx_ratechange; // local number of tx rate changes
__EXTERN word dp_tx_rateincrease; // number of tx rate increases
#endif	// VENUS_AT_CS || CS_MODEM
__EXTERN word dp_const_timer;
__EXTERN byte dp_first_call;
__EXTERN word dp_trec_timer;
__EXTERN word dp_old_trec_x;
__EXTERN word dp_old_trec_y;
__EXTERN word dp_ram_timer;
__EXTERN word oldSPTR;
__EXTERN byte dp_CallWaitingEnable;	// 0 - ignore
									// 1 - hang up
									// 2 - toggle RI and collect CID info

// dpcmd1.c
#if defined(EXTRA_REGWRITE_DSP_DEBUGGING)
__EXTERN byte dp_within_write_ram, dp_print_regwrites;
#endif	// EXTRA_REGWRITE_DSP_DEBUGGING

// dpsync.c
#if !defined(CS_MODEM)
#if defined(V80)
#if defined(__SYNC_H__)
__EXTERN V8_RX_CI_SEQ_STATE v8_ci_seq_state;
__EXTERN V8_CI_TONE_STATE v8_ci_tone_state;
#endif	// __SYNC_H__
__EXTERN word ci_tone_timer;
__EXTERN word rx_ci_octet;
#endif	// V80
#endif	// !CS_MODEM

// vpcm.c
#if defined (VPCM_CLIENT)
__EXTERN word dp_short_phase2[11];
__EXTERN byte dp_saved_dial_string[42];
__EXTERN word vpcm_remote_info;
#endif	// VPCM_CLIENT
#if defined (VPCM_CLIENT) || defined (VPCM_SERVER)
__EXTERN byte vpcm_remote_qc_parameter;
// vpcm_remote_qc_parameter - parameter field in QCA2d.
//		(V.92 V.8bis response from remote)
//
//		bit 0-1	level of ANSpcm
//		bit 2-4 reserved
//		bit 5   LAPM capable
//		bit 6	QCA identifier
//		bit 7	Digital modem
#endif	// VPCM_CLIENT || VPCM_SERVER

#if defined (VPCM_CLIENT)
__EXTERN word vpcm_v92_control;
// vpcm_v92_control definition - written to 0x1ff2
//		bit 0	- call waiting enable
//		bit 1	- unused
//		bit 2	- "
//		bit 3	- "
//		bit 4	- "
//		bit 5	- PCM upstream
//		bit 6	- short phase 2
//		bit 7	- V.92 enable
//		bit 8	- DSP should try V.8 QC
//		bit 9	- V.8bis QC, controller's part successful
//		bit 10  - indicate V.42 capable in QC1a

__EXTERN word vpcm_v92_status;
// vpcm_v92_status - read from 0x820
//		bit 10  - remote indicated V.42 capable in QCA1d 
//		bit 11	- remote didn't acknowledge QC1a (fallback to CM)
//		bit 12	- QCA1d received from remote
//		bit 13	- remote has V.92 PCM upstream enabled
//		bit 14	- remote has V.92 short phase 2 enabled
//		bit 15	- remote has V.92 capability enabled

__EXTERN byte vpcm_connection_status;
// vpcm_connection_status definition: (bit OR'ing of the following)
//		bit 0 - Normal v.90/v.92 - no QC
//		bit 1 - QC short V.8 - attempted
//		bit 2 - QC received QCA1d - other side has V.8 QC
//		bit 3 - QC V.8bis - attempted
//		bit 4 - QC V.8bis received QCA2d - other side has V.8bis QC


__EXTERN word vpcm_0xcb;		// vpcm tx level in linear
__EXTERN word vpcm_0x82f;		// AGC gain in phase 2
__EXTERN word vpcm_0x820;		// vpcm_v92_status
__EXTERN word vpcm_0x3;			// vpcm tx level in db
#endif //defined (VPCM_CLIENT)

__EXTERN word vpcm_mse_scale;
__EXTERN byte vpcm_datamode;
__EXTERN byte vpcm_download;
__EXTERN byte vpcm_mode;
#if defined(VPCM_SERVER)
__EXTERN word vpcm_rc_timer;
#endif	// VPCM_SERVER
#if defined(CALL_WAITING)
__EXTERN TIME_MIN_SEC vpcm_call_wait_timer_long;
__EXTERN byte vpcm_call_waiting;
#endif
#if defined(CS_CALLBACK)
__EXTERN byte vpcm_camode;
#endif	// CS_CALLBACK

struct dpvcrightStr {
	byte mode;		// what are we displaying (see dptest.c)
	word len;		// number of locs to display
	word start;		// starting DP RAM address
	word current;	// current DP RAM address
};

__EXTERN struct dpvcrightStr dp_vc_right;	// vconstel rightmost window info

// dpv8bis.c
#if defined(V8BIS) || defined(V80) || defined (V92)
#if defined(__SYNC_H__)
__EXTERN V8bis_OPTIONS V8bis_Options;
__EXTERN V8BIS_STATE v8bis_state;
__EXTERN V8BIS_GLOBAL_VARS *v8bis_ptr;
#endif	// __SYNC_H__
#endif	//V8BIS || V80 || V92
#if defined(V8BIS) || defined(V80)
__EXTERN byte *v8bis_msg1;
__EXTERN byte *v8bis_msg2;
#if defined(CS_4)
__EXTERN byte sa_v8bisDnload;
#endif	// CS_4
#endif	// V8BIS || V80

// dpv8bis1.c
#if defined(V8BIS) || defined(V92)
#if defined(__SYNC_H__)
__EXTERN DP_V8BIS_STATE dp_v8bis_state;
#endif	// __SYNC_H__
#endif	// V8BIS || V92
__EXTERN word dp_v8bis_timer;
__EXTERN word dp_v8bis_timer1;
#if defined(V8BIS)
__EXTERN byte spar1_array[5];
__EXTERN byte spar2_array[5];
__EXTERN byte manuf_id_2nd_byte;
__EXTERN byte rx_manuf_id_2nd_byte;
__EXTERN byte k56_version;
__EXTERN byte product_capabilities;
__EXTERN byte k56_version_octet;
__EXTERN byte division_code;
__EXTERN byte cl_msg_mu_law;
__EXTERN byte code_version_no;
__EXTERN byte *dpv8bis1Ptr;
#if defined(V8BIS_DEBUG)
__EXTERN word dp_last_tones;
#endif	// V8BIS_DEBUG
#endif	// V8BIS

// dp56kv.c
#if defined(CS_MODEM) || defined(VENUS_AT_CS)
__EXTERN byte vpcm_retrain_count;
#endif	// CS_MODEM || VENUS_AT_CS
#if defined(PHASE1_DEBUG)
__EXTERN word cjm_state;
#endif // PHASE1_DEBUG
#if defined(LINE_PROBING_RESULTS) && !defined(CS_MODEM)
__EXTERN word signal_dB[LINE_PROBING_SAMPLES];
__EXTERN word noise_dB[LINE_PROBING_SAMPLES];
__EXTERN word SNR_k[LINE_PROBING_SAMPLES];
#endif // LINE_PROBING_RESULTS && !CS_MODEM

// V.90 fall forward info
struct DP_V90_FF {
	byte secs;	// perfect seconds remaining before trying FF.
				// 255 means that we're not doing FF on this connection.

	byte perfection;	// how many seconds constitute perfection
};
__EXTERN struct DP_V90_FF dp_v90_ff;

__EXTERN byte dp_pcm_max_rate; // max rate possible for autorate 
__EXTERN word dp_lastSentTime;
__EXTERN word dp_lastSent, dp_sp_timer, dp_cur_phase;
__EXTERN word dp_tmp2011;
__EXTERN word dp_s_ptr, dp_r_ptr, dp_br_ptr, dp_agc_gain;
__EXTERN word dp_mp, dp_mpp, dp_e_stat;	// mp, mp', and e
__EXTERN word k56_timer;
#if defined(NEW_QMP_AUX_INTFC)
__EXTERN word dp_KfEnable;
#endif //NEW_QMP_AUX_INTFC
#if defined(VPCM_SERVER)
__EXTERN word dp_pcm_min_rate; // min rate possible for autorate
__EXTERN word dp_pcm_lst_rate; // last rate read from dsp
__EXTERN word dp_3a, dp_833, dp_1ff6; // DSP Ram locs for central site
#if defined(NEW_QMP_AUX_INTFC) && defined(SA_QMP_RX_PATCH)
__EXTERN word qmp_v90cntr, qmp_k56cntr, qmp_v34cntr; // error cnt for qmp rcv
#endif 	// NEW_QMP_AUX_INTFC && SA_QMP_RX_PATCH
#endif	// VPCM_SERVER
__EXTERN byte dp_56k_connected, dp_56k_user_retrain;
#if defined(K56FLEX)
__EXTERN byte triedEvenThoughBad;
#endif	// K56FLEX
#if defined(VENUS_AT_CS) || defined(CS_MODEM)
__EXTERN byte fastRateChangeMessagePrinted;
__EXTERN word tx_lapm_errors, tx_lapm_counter, tx_lapm_frames;
__EXTERN byte tx_lapm_retrain;
__EXTERN word old_000c;
__EXTERN byte dp_lapm_re_tx_RR_once;
#endif  // VENUS_AT_CS || CS_MODEM
__EXTERN byte lastRetrain;	// type of retrain is in progress-see retrain_cmd
__EXTERN byte dp_downloadedEROM;

// These globals are used in the lapm error counting
// routines.  They let us fall back to a lower rate
// when there are lots of lapm errors.
__EXTERN word lapm_errors, lapm_counter, lapm_frames;

#if defined(CS_MODEM)
__EXTERN byte k56_ratechange_detected;
#define DPSPTR_BUF_SIZE 400		
#define DPSK_BUF_SIZE 100	
__EXTERN byte cs_last_dp_state;
__EXTERN byte *lpWaveBuffer;
__EXTERN byte cs_remote_rr_rtn;
#if defined(IWF_DATA)
__EXTERN byte cs_2nd_dialtone_detect; 
#endif	// IWF_DATA
__EXTERN byte sa_num_data_to_dte_rx;
__EXTERN byte at_cmd_echo_or_resp;
#if defined(CS_DTMF_DETECTION)		
#define CID_BUF_SIZE 50
__EXTERN byte cs_caller_id_buf[CID_BUF_SIZE]; 
__EXTERN byte *cs_caller_id_ptr;    
#endif	// CS_DTMF_DETECTION
#if defined(CS_ENABLE_DEBUG_LOGGING) && !defined(CS_MODEM)
__EXTERN word cmd_to_host_offset;
__EXTERN word cs_msi_buf[CS_MSI_BUF_SIZE]; 
__EXTERN word cs_lineprob_buf[100];		
__EXTERN word cs_misc_buf[6];
__EXTERN word cs_taps_buf[96];
__EXTERN word cs_mpwords_buf[40];
__EXTERN word cs_dpsk_buf[DPSK_BUF_SIZE];		//Error tags	
__EXTERN word cs_dpsptr_buf[DPSPTR_BUF_SIZE];
__EXTERN byte cs_dpcmd_buf[40];
__EXTERN word *cs_msi_ptr;
__EXTERN word *cs_lineprob_ptr;			
__EXTERN word *cs_dpsk_ptr;		
__EXTERN word *cs_misc_ptr;
__EXTERN word *cs_taps_ptr;
__EXTERN word *cs_mpwords_ptr;
__EXTERN word *cs_dpsptr_ptr;
__EXTERN byte *cs_dpcmd_ptr;
#endif	// CS_ENABLE_DEBUG_LOGGING && !CS_MODEM
__EXTERN byte cs_bad_cmd_byte; 
__EXTERN byte cs_dlbk_test;
__EXTERN word cs_rx_lapm_errors; 
__EXTERN word cs_rx_lapm_frames; 
__EXTERN word cs_tx_lapm_errors; 
__EXTERN word cs_tx_lapm_frames; 
__EXTERN byte TAC_lk_carrier_encountered;
__EXTERN byte TA_A1_1_encountered;
__EXTERN byte o_ph4_MP_encountered;
__EXTERN byte TAC_lk_carrier_count;
__EXTERN byte o_ph4_MP_count;
__EXTERN word cs_msi_timer;
__EXTERN word cs_alive_timer;
__EXTERN byte disconnect_reason;
__EXTERN byte dtmf_mf_mode;
__EXTERN byte b1_b2_mode;
__EXTERN byte cs_config_modulation;
__EXTERN byte min_conn_speed;
__EXTERN byte V34orK56;	// 0:neither; 1:V34; 2:K56
__EXTERN byte v8bisflag;	
__EXTERN byte k56vwk_loaded;	
__EXTERN byte csmain_flag;	// bit 0: io_at_connected: 1 for yes, 0 for no
					// bit 1: has called cs_compose_cmd: 1 for yes, 0 for no
					// 	used to decide if we need to check cs_ack_received()
  					// bit 2: v110 mode: 1 for v110 mode, 0 otherwise // V110

__EXTERN byte mfr2_flag;// bit 0 = 1: detect silence; 0: don't detect silence
						// bit 1 = 1: variable-length tone has been sent
						// bit 2 = 1: SEND_TONE_TILL_ACK cmd is received
	  	// this flag is also used in continuity tone test; jc-9/15/98

__EXTERN byte dp_cs_tone_info[8];// tone,on_duration,off_duration,power1,pwer2,
								// tone_type, tone cycle
								// For detect tone only
				// Note: if we are told to detect silence, dp_cs_tone_info[]
				// won't even get filled
__EXTERN byte dp_cs_tone_info2[8];	// This is for send tone only
__EXTERN byte multitone_info2[12];
		// This is used for storing multiple outgoing digits
		// ~_info2[1] contains the last digit to be dialed, 
		// ~_info2[2] contains the 2nd to the last digit to be dialed, etc
		// there is no digit in multitone_info2[0] !!!

__EXTERN byte cs_tone_on;			// Boolean variable, either TRUE or FALSE
		// It's used to indicate DETECTED tone is ON for MFR2
		// It's used to indicate GENERATED tone is ON for busy or MFR1
__EXTERN byte cs_detected_tone;	// detected tone index
__EXTERN word cs_elapsed_time;
__EXTERN byte sreg_value;	//jim-3/3/98
__EXTERN byte mdm_rdy;
__EXTERN word cs_debug_liv_indx; 		// gita - 5/7/98
__EXTERN word cs_dp_debug_timer;			
__EXTERN word cs_TA_A1_1_timer;
__EXTERN word cstmp80, cstmpcf;
__EXTERN byte cs_dpbuf_wrap;
__EXTERN byte cs_cmdbuf_reset;
#if defined(CS_MODEM_DEBUG)
__EXTERN byte dpram_string[3] ;	// for dsp read/write ram only
#endif
#endif // CS_MODEM

#if defined(CS_V23_MODULATION)
__EXTERN byte cs_atb2_flag;	
__EXTERN byte cs_atb3_flag;	
__EXTERN byte cs_answering_flag; // 0: Originate  1: Answering
#endif	// CS_V23_MODULATION

#if defined(VENUS_AT_CS) || defined(CS_MODEM) || defined(SA_DIGITAL)
__EXTERN byte dp_rx_pwr_lvl_high; 
__EXTERN byte dp_cs_local_retrain_ratechange; 
__EXTERN byte vpcm_ratechange_count; 
__EXTERN byte vpcm_in_retrain_state_detected ;
__EXTERN byte p_lapm_state; 
__EXTERN word p_rx_ch;
#if defined(COP_ADV_DEBUG)
__EXTERN byte p_rx_ch; 
__EXTERN byte p_ram334;
__EXTERN byte p_ram46;
__EXTERN byte p_ram311;
__EXTERN byte p_ram310;
#endif
#if defined(CS_ETC)
__EXTERN byte cell_active; 
__EXTERN byte TxLevel_buf ;
__EXTERN byte etc_bNoAnsTimeOut ;
__EXTERN byte etc_bDataCallingTone ;
__EXTERN byte etc_bETC ;
__EXTERN word etc_wV34Option ;
__EXTERN word etc_wRxSymbol ;
__EXTERN word etc_wMSEScale ;
__EXTERN byte etc_bNoCarrierDisc ;
__EXTERN byte etc_bBusyPassCount ;
__EXTERN byte etc_bV42 ;
#endif	// CS_ETC
#if defined(MTS_DEBUG)
#define COP_DEBUG_BUF_SIZE 100
__EXTERN word cop_debug_buf[COP_DEBUG_BUF_SIZE];
__EXTERN word *cop_debug_ptr;
#endif	// MTS_DEBUG
#if defined(HCF_WORKAROUND)
__EXTERN byte dp_v8bis_rockwell_client;
__EXTERN byte p_rock_client;
#endif	// HCF_WORKAROUND
#if defined(COPERNICUS)
__EXTERN word dp_call_counter;
#endif	// COPERNICUS
#if defined(CS_V110)
// v110cs.c
#if defined(__V110_CS_H__)
__EXTERN V110_STATE v110_state;
__EXTERN struct v110timer v110_Timer;
#endif
#if defined(__V110_IL_H__)
__EXTERN V110DATA_S V110DataTx;
#endif
__EXTERN word v110_uChannelRate;	// V110 channel rate
__EXTERN byte cs_v110_on;	// indicates if v.110 is currently running

__EXTERN byte v110_dce_rx_buf[80];
__EXTERN byte v110_bytes_to_process;
__EXTERN word v110_bytes_to_store;
__EXTERN byte V110IsOpen;	/* V.110 channel is open flag */
__EXTERN byte V110Active;	/* V.110 active flag: declared in l4.c */	
__EXTERN byte v110_Ra2Ra1_ratio;	// = 8 if intermediate rate is 8kbps	
									// = 4 if int. rate is 16kbps	
									// = 2 if int. rate is 32kbps	
									// = 1 if int. rate is 64kbps	
__EXTERN word v110_userRa2_ratio; // ratio of user bytes to rate adapted ra2 bytes	
__EXTERN byte v110_dce_thres;	// threshold on dce_tx que for determining min que level

#ifdef DEBUG_RCV_RA1
#define V110_RCV_LOG_BFR_SZ	320
__EXTERN word *uV110RcvRA1LogBfrIn;		/* Put new rcv data here */
__EXTERN byte ucV110RcvRA1LogBfr[320];		// for [V110_RCV_LOG_BFR_SZ];
__EXTERN byte v110_wrap_around;
#endif

#ifdef DEBUG_RCV_RA2
#define V110_RCV_LOG_BFR_SZ	320
__EXTERN word *uV110RcvRA2LogBfrIn;	/* Put new rcv data here */
__EXTERN byte ucV110RcvRA2LogBfr[320];		// for [V110_RCV_LOG_BFR_SZ];
__EXTERN byte v110_wrap_around;
#endif

#ifdef DEBUG_XMT_RA1
#define V110_XMT_LOG_BFR_SZ	320
__EXTERN word *uV110XmtRA1LogBfrIn;	/* Put new rcv data here */
__EXTERN byte ucV110XmtRA1LogBfr[320];		// for [V110_XMT_LOG_BFR_SZ];
__EXTERN byte v110_wrap_around;
#endif

#ifdef DEBUG_XMT_RA2
#define V110_XMT_LOG_BFR_SZ	320
__EXTERN word *uV110XmtRA2LogBfrIn;	/* Put new rcv data here */
__EXTERN byte ucV110XmtRA2LogBfr[320];		// for [V110_XMT_LOG_BFR_SZ];
__EXTERN byte v110_wrap_around;
#endif

__EXTERN byte v110_send_connect;
__EXTERN byte v110_mul_factor;
__EXTERN byte v110_flow_control;

// v110.c
#if defined(CS_4)
__EXTERN BYTE v110_ucTmpByte;			/* Temporary byte */
__EXTERN BYTE v110_ucBytesDecoded;		/* # RA2 bytes decoded */
__EXTERN BYTE v110_ucLoop1;				/* Loop counter */
__EXTERN BYTE v110_ucLoop2;				/* Loop counter */
__EXTERN BYTE *v110_pRA2Bytes;			/* Bytes to decode pointer */
__EXTERN BYTE v110_ucRA2Bytes2Decode;	/* Bytes to decode pointer */
__EXTERN BOOLEAN v110_bAdjustRA2Pointer;/* Adjust RA2 pointer flag */
__EXTERN BOOLEAN v110_bSyncFound;		/* Synchronization found flag */
__EXTERN BYTE v110_ucDataByte;			/* Data byte being converted */
__EXTERN int v110_iBytesProcessed;		/* # RA2 bytes processed */
__EXTERN BYTE *v110_pRet;				/* Return byte pointer */
__EXTERN BYTE *v110_pRetByte;			/* Serial decode return byte pointer */
__EXTERN BYTE v110_ucBits;				/* Contains bits decoding */
__EXTERN BOOLEAN v110_bInsertedStartBit;/* Inserted start bit flag */
__EXTERN BYTE v110_ucStopBitsInserted;	/* # stop bits inserted */
__EXTERN BOOLEAN v110_bReplicate;		/* Replicate bit flag */
__EXTERN BYTE v110_ucRepCount;			/* Data bit replication count */
__EXTERN BYTE v110_ucRepBit;			/* Replicate this bit */

__EXTERN BYTE v110_ucRA1Byte;			/* RA1 converted byte */ 
__EXTERN word v110_SendRawDataCnt;		// used in SendRawData only

__EXTERN V110CONTROL_S V110Control;
__EXTERN V110DATA_S V110Data;	// V110Data is for Rx

__EXTERN union RCVD_OCTETS	v110_rx_octets;
__EXTERN byte v110_shift_amount;
__EXTERN word v110_uRA1ByteCnt;
__EXTERN byte v110_uRA2BitShiftFound;
__EXTERN byte v110_bPrevSyncFound;
#endif	// CS_4
#endif	// CS_V110
#endif	// VENUS_AT_CS || CS_MODEM || SA_DIGITAL

#if defined( DP_BASHER_TEST )
__EXTERN byte dp_basher_test_enabled;	// basher test currently running
__EXTERN word dp_basher_totErrors;
__EXTERN word dp_basher_errors;
__EXTERN word dp_basher_sendSeq;
__EXTERN word dp_basher_rcvSeq;
__EXTERN word dp_basher_reportTime;
__EXTERN word dp_basher_frameLength;
__EXTERN word dp_basher_framesReceived;
__EXTERN word dp_basher_framesTransmitted;
__EXTERN word dp_basher_totSeconds;
#endif // DP_BASHER_TEST

#if defined(__IO_GLOB_H__)
/****************************************************************
	global variables used by IO task
*****************************************************************/
__EXTERN IO_STATE io_state, io_old_state;
__EXTERN AT_ESC_STATE io_at_esc_state;
__EXTERN word io_dce_tx_buff [ IO_DCE_TX_BUFF_SIZE ];
__EXTERN word io_dce_rx_buff [ IO_DCE_RX_BUFF_SIZE ];
__EXTERN word io_dce_buf [ IO_DCE_BUFF_SIZE ];
__EXTERN struct IO_DUMPRAMSTATE io_dumpRamState;
#if !defined(CS_MODEM) || defined (CLASS2_FAX) 
__EXTERN IO_FAX_STATE io_fax_state;
#endif	// !CS_MODEM || CLASS2_FAX
#if defined(VOICE) || defined(CS_CID_ENABLE)
__EXTERN IO_CID_STATE io_cid_state;
#endif
#if defined(VOICE)
__EXTERN IO_VOICE_STATE io_voice_state;
__EXTERN struct ima_adpcm_state ima_Adpcm_State;
#endif	// VOICE
#endif	// __IO_GLOB_H__

__EXTERN word  io_timer;
__EXTERN word io_dtr_timer;		// allow DTE buff to empty before DTR disc

__EXTERN TIME_MIN_SEC io_dte_inact_timer;
__EXTERN byte *io_dte_rx_old_ptr; 
__EXTERN byte *io_dte_tx_old_ptr; 
__EXTERN byte  io_dte_rx_last_ch;
__EXTERN byte io_at_esc_detect;
__EXTERN byte io_remote_control_mode;
__EXTERN byte io_send_break_to_remote;

__EXTERN byte *io_esc_dte_wptr;		// dte old buffer write pointer
__EXTERN word io_at_esc_timer;
#if defined(V80)
__EXTERN word old_app_cbqTx;
__EXTERN byte *old_app_pqTx;
#endif	// V80

__EXTERN word io_uart_status;
__EXTERN byte io_uart_msr;

__EXTERN word  *io_dce_tx_sptr;		/* buffer start pointer */
__EXTERN word  *io_dce_tx_eptr;		/* buffer end pointer */
__EXTERN word  *io_dce_tx_wptr;		/* buffer write pointer */
__EXTERN word  *io_dce_tx_rptr;		/* buffer read pointer */

__EXTERN word  *io_dce_rx_sptr;		/* buffer start pointer */
__EXTERN word  *io_dce_rx_eptr;		/* buffer end pointer */
__EXTERN word  *io_dce_rx_wptr;		/* buffer write pointer */
__EXTERN word  *io_dce_rx_rptr;		/* buffer read pointer */

__EXTERN word io_break_length;

#if defined(VOICE)
__EXTERN word io_voice_count;	// used in dphdwr16.c
#endif	// VOICE

#if !defined(CS_MODEM) || defined (CLASS2_FAX) 
__EXTERN word  io_hdlc_byte_count;
__EXTERN word *io_fax_buf;
__EXTERN word io_crc;
__EXTERN word *io_dce_tx_rptr_old;
#endif

// iocid.c
#if defined(VOICE) || defined(CS_CID_ENABLE)
__EXTERN word	*io_cid_ptr;
__EXTERN byte	io_cid_msg_len;
__EXTERN byte	io_cid_checksum;
#endif	// VOICE

// iosync.c
#if defined(V80) && !defined(CS_MODEM)
#if defined(__SYNC_H__)
__EXTERN IO_SYNC_STATE io_sync_state;
#endif	//__SYNC_H__
__EXTERN word *io_sync_wptr;
__EXTERN word io_sync_buffered_byte;
__EXTERN word v80_tx_timer;
__EXTERN word v80_rx_timer;
__EXTERN word io_sync_count;
__EXTERN byte io_sync_em_char;
__EXTERN byte io_hunt_for_last_byte;
__EXTERN byte v80_set_rate_state;
__EXTERN byte v80_max_tx_rate;
__EXTERN byte v80_max_rx_rate;
__EXTERN byte v80_esc_char;
__EXTERN byte v80_SOF_flag;
__EXTERN byte v80_flow_on;
__EXTERN byte v80_retrain;
#endif	//V80 && !CS_MODEM

__EXTERN byte lapm_srej_negotiated;		// Negotiated SREJ with other side?
__EXTERN byte lapm_tx_srej_count;		// Up/down counter for SREJed frames
__EXTERN byte lapm_rx_srej_count;		// Up/down counter for SREJed frames
__EXTERN byte lapm_rx_lrq_count;		// Up/down counter for frames on LRQ

// iofax_c2.c
#ifdef __FAX_C2_H__
	__EXTERN struct CLASS2_PARM c2p;   // Class 2/2.0 parameter structure
	__EXTERN struct C2_STATE    c2s;   // Class 2/2.0 state machine structure
	__EXTERN struct REMOTE_FAX  c2rf;	 // Class 2/2.0 Remote fax status structure
	__EXTERN struct QC          c2qc;  // Class 2/2.0 Receive quality checking structure

	__EXTERN const PFV* c2_sequence;  // Pointer to an array of func pointers
	__EXTERN byte c2_sequence_ptr;	   // Points to current location in a sequence

//	__EXTERN byte  fclass;		         // Storage for type of modem service class  (moved into c2p structure)
	__EXTERN byte* c2_dte_msg_buf;     // Buffer for sending messages to the DTE
	__EXTERN byte* c2_ps_rptr;         // Pre-scan read pointer for Tx
	__EXTERN byte  c2_mslt_last;       // Used for DLE filtering while checking MSLT
	__EXTERN byte  c2_fct_accm;        // Accumulate Class 2.0, Phase C time-out time in 65 second increments
	__EXTERN byte  c2_rtc;			   // Number of EOLs found while searching for Return to Control

	__EXTERN word* c2_dce_buf_ptr;     // Pointer to the DCE RX buffer
	__EXTERN word  c2_var1;			   // General purpose variable #1
	__EXTERN word  c2_var2;            // General purpose variable #2
	__EXTERN word  c2_var3;			   // General purpose variable #3
	__EXTERN word  c2_var4;			   // General purpose variable #4
	__EXTERN word  c2_tcf_error_cnt;   // Number of errors allowed in TCF
	__EXTERN word  c2_tcf_zeros_needed;// Number of zeros for a valid TCF
	__EXTERN word  c2_ps_eol;          // Number of EOLs found while pre-scanning DTE Tx data
	__EXTERN word  c2_ovr_cnt;         // Bytes lost during receive due to overrun

	#ifdef __FAX_ECM_H__
		__EXTERN struct ECM_BUF ecm_buf; // Variables to control 16K, fragmented ECM buffer

		__EXTERN byte ecm_ppr_buf[32];   // Storage for partial page response
		__EXTERN byte ecm_fax_hdlc;      // Synchronous mode for Xmit
		__EXTERN byte ecm_state;         // Primary state machine variable
		__EXTERN byte ecm_ss;            // Secondary state machine variable
		__EXTERN byte ecm_fc;            // Frame number for FCD
		__EXTERN byte ecm_bc;            // Block number
		__EXTERN byte ecm_pc;            // Page number
		__EXTERN byte ecm_rsp_cnt;       // Count number of no responses
		__EXTERN byte ecm_ppr_idx;       // Index into ppr_buf []
		__EXTERN byte ecm_ppr_mask;      // Bit mask for testing bits in ppr_idx
		__EXTERN byte ecm_ppr_fc;        // Frame count when resending frames
		__EXTERN byte ecm_ppr_cnt;       // Counts number of consecutive PPR responses received
		__EXTERN byte ecm_rsp_state;     // State variable for response receive
		__EXTERN byte ecm_rsp_seq;       // State variable for DTE response sequence

		__EXTERN word ecm_timer;         // General purpose timer
		__EXTERN word ecm_timer2;        // Secondary general purpose timer
		__EXTERN word ecm_timer_t5;      // Timer T5 called for in specification T.30
		__EXTERN word ecm_stat;          // Various status bits defined for ECM state machine
		#if defined(CS_4) || defined(ECM_64K_BUFF)
			__EXTERN byte *ecm_64k_buf;    // Pointer to 64K ECM buffer
		#endif
	#endif

	#ifdef CS_MODEM
		__EXTERN byte  rsp_len;          // Length of a response
		__EXTERN byte  num_rsp;          // Number of response sub-parameters
		__EXTERN byte* msg_buf;          // Pointer to M->H messages/responses
	#endif
#endif

#if defined(__LAPM_H__)
/****************************************************************
	Allocate global lapm variables
*****************************************************************/
__EXTERN LAPM_FRAME lapm_transmit_frame [ ALLOC_NO_OF_TX_FRAMES ];
__EXTERN LAPM_FRAME *lapm_last_ltfp;
__EXTERN LAPM_FRAME *lapm_prev_empty_ltfp;
__EXTERN LAPM_FRAME *lapm_prev_full_ltfp;
__EXTERN LAPM_FRAME *lapm_prev_ack_ltfp;
//__EXTERN LAPM_RX_FRAME lapm_receive_queue [ NO_OF_LAPM_RECEIVE_FRAMES ];
__EXTERN IO_RX_QUEUE io_rx_queue;
__EXTERN MNP_RX_FRAME lapm_receive_frame;		// (mnp bigger than lapm)
__EXTERN LAPM_RX_FRAME *rxFptr;
__EXTERN MNP_RX_FRAME *rxMNPfptr;
__EXTERN LAPM_CONTROL_FRAME lapm_control_frame;
__EXTERN LAPM_FRAME lapm_ui_frame;

__EXTERN LAPM_FRAME *lapm_iframe_ptr;
__EXTERN LAPM_STATE lapm_state;

__EXTERN LAPM_RX_ADP_STATE lapm_adp_state;
__EXTERN LAPM_RX_ODP_STATE lapm_odp_state;

#if defined(NEED_VARIABLE_DLCI)
__EXTERN byte lapm_data_dlci;
#endif // NEED_VARIABLE_DLCI
__EXTERN byte lapm_vs, lapm_ns, lapm_va, lapm_vr, lapm_pseudo_vr;
__EXTERN byte lapm_k, lapm_n401;
__EXTERN byte lapm_remote_busy, lapm_local_busy, lapm_poll;
#if defined(HDLC_FRAMES_BY_REFERENCE)
__EXTERN volatile byte lapm_max_iframes; //msm
#endif	//HDLC_FRAMES_BY_REFERENCE
__EXTERN byte lapm_retransmit, lapm_reject_sent;
__EXTERN byte lapm_rx_iframe;
__EXTERN byte *lapm_dte_wptr;
__EXTERN byte *lapm_data_ptr;
__EXTERN byte lapm_rx_dte_char;
__EXTERN byte lapm_vrb;
__EXTERN byte lapm_vsb;
__EXTERN byte lapm_v42b_err;
__EXTERN word lapm_t401;
__EXTERN byte lapm_extended_fcs;
__EXTERN word *lapm_odp_rptr;
__EXTERN word lapm_xmit_timer; // time since we last build iframe
__EXTERN word lapm_rcv_timer;  // time since srej session started
__EXTERN byte lapm_sent_adp_once ;
__EXTERN byte lapm_detected_odp;
#if defined(__MNP_H__)
__EXTERN MNP_RX_OCTET_STATE mnp_rx_octet_state;
#endif
#endif	// __LAPM_H__

#if defined(__MNP_H__)
/****************************************************************
	Allocate global MNP variables
*****************************************************************/
__EXTERN MNP_STATE mnp_state;
__EXTERN byte mnp_vs;
__EXTERN byte mnp_ns;
__EXTERN byte mnp_vr;
__EXTERN byte mnp_vsa;
__EXTERN byte mnp_nsa;
__EXTERN byte mnp_vra;
__EXTERN byte mnp_nra;
__EXTERN byte mnp_rk;
__EXTERN byte mnp_nk;
__EXTERN byte mnp_sk;
__EXTERN byte mnp_k;
__EXTERN byte mnp_framing_mode;
__EXTERN word mnp_max_info_octets; //two byte value
__EXTERN byte mnp_negotiated_mode;
__EXTERN byte mnp_data_opt_flag;
__EXTERN byte mnp_stream_opt_flag;
__EXTERN byte mnp_fixed_field_opt_flag;
__EXTERN byte mnp_attention_type;
__EXTERN byte mnp_disconnect_code;
__EXTERN byte mnp_user_disconnect_code;
__EXTERN byte mnp_retransmit;
__EXTERN byte mnp_first_lt_flag;
__EXTERN byte mnp_last_ack;
__EXTERN word mnp_flow_timer;
__EXTERN byte mnp_data_compression;
__EXTERN byte mnp_negotiated_service;
__EXTERN byte mnp_seq_recover_flag;

__EXTERN byte mnp_rx_framing_mode;
__EXTERN word mnp_rx_max_info_octets;
__EXTERN byte mnp_rx_k;
__EXTERN byte mnp_rx_data_opt_flag;
__EXTERN byte mnp_rx_stream_opt_flag;
__EXTERN byte mnp_rx_fixed_field_opt_flag;
__EXTERN byte mnp_rx_disconnect_code; 
__EXTERN byte mnp_rx_user_disconnect_code;
__EXTERN byte mnp_rx_data_compression;

__EXTERN word rx_crc;			//the one sent with the rx frame
__EXTERN word receive_crc;	//the one we compute on the fly
__EXTERN byte last_char, reset_flag;

__EXTERN byte  mnp5_run_length_match_char;	//char tested for repeat
__EXTERN byte  mnp5_run_length_count;
__EXTERN byte  mnp5_run_length_repeat_count;	//# of times char repeated
__EXTERN byte  mnp5_run_length_flag;	//signals char backed up behind a repeat cnt
__EXTERN byte  mnp5_run_length_return; 	// flag returned from run len decode
__EXTERN byte  mnp5_rx_run_length_count;	// !=00, if char is to be repeat count
__EXTERN byte  mnp5_rx_loop_count; 		// run length decode control
__EXTERN byte  mnp5_rx_match_char; 		// char to be tested for repeat char
__EXTERN byte  mnp5_rx_head_hold;
__EXTERN byte  mnp5_rx_head_pos;
__EXTERN byte  mnp5_rx_intoken;			// byte passed to be detokenized
__EXTERN byte  mnp5_rx_body_count;
__EXTERN byte  mnp5_rx_body_max;
__EXTERN byte  mnp5_rx_body_pos;
__EXTERN byte  mnp5_rx_body_hold;
__EXTERN byte  mnp5_rx_save; 			// the decoded char
__EXTERN byte  mnp5_char_hold1;
__EXTERN word  mnp5_div_hold1;
__EXTERN byte  mnp5_char_hold2;

__EXTERN byte  mnp5_tx_token_byte; 		// tokenized input char
__EXTERN byte  mnp5_shift_pos;			// bit position being shifted
__EXTERN byte  mnp5_repeat_character;

__EXTERN byte  mnp5_repeat_count;		// != 00, if char is a repeat count
__EXTERN byte  mnp5_bitpos;				// bit position for compress shift
__EXTERN byte  *mnp5_fptr;
__EXTERN byte  *mnp5_tokptr;
__EXTERN byte  mnp5_token_offset;
__EXTERN byte  mnp5_token_count;			// tokenized counter
__EXTERN word  mnp5_token_hold;			// token holder
__EXTERN byte  mnp5_tok_hdr;				// header of token
__EXTERN byte  mnp5_tok_body;			// body of token
__EXTERN byte  mnp5_tx_inchar; 			// char passed to be tokenized
#endif	// __MNP_H__

#if defined(V44)
// V.44 encoder
__EXTERN byte  v44_P0;	/* 1=encode, 2=decode, 3=both 					*/
#if defined(WINMODEM)
__EXTERN byte v44_en_mem_area[ V44_MEM_SIZE ]; // put data here to avoid malloc/free
#endif // WINMODEM
__EXTERN V44_TREE_NODE *v44_en_root[V44_N4];	// Root node array, holds indices into tree[]
__EXTERN V44_TREE_NODE * v44_en_last_node_ptr;	// Dict node associated with previous inval
__EXTERN V44_TREE_NODE * v44_en_old_last_node_ptr;	// Previous value of last_node_ptr
__EXTERN V44_TREE_NODE * v44_en_last_match_ptr;	// Node associated with last complete match
__EXTERN V44_TREE_NODE * v44_en_c1_ptr;		// pointer to next node in tree[]
__EXTERN V44_TREE_NODE * v44_en_dict_end_ptr;		// pointer to last node allowed after nego
__EXTERN byte *v44_en_history;	// Startup of input history
__EXTERN byte *v44_en_str_cmp_ptr;	// Pointer to current str ext cmp byte in history
__EXTERN byte *v44_en_c4_ptr;		// pointer to next byte of history[]
__EXTERN byte *v44_en_hist_end_ptr;		// pointer to last usable byte of history[]
__EXTERN dword v44_en_input_byte_count;	// no. bytes rec'd from DTE buffer
__EXTERN dword v44_en_output_byte_count;	// no. bytes sent to LAPM buffer
__EXTERN word v44_en_trans_bytes;	/* char count for compression testing */
__EXTERN word v44_en_comp_bytes;	/* compressed bit count */
__EXTERN dword v44_en_bitbuff;		/* bit buffer for encoder */
__EXTERN byte v44_en_bitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte v44_en_inval;	/* current encoder input value */
__EXTERN byte v44_en_c2;	// current codeword size, in bits
__EXTERN byte v44_en_c5;	// current ordinal size in bits
__EXTERN enum V44_ENCODER_STATE v44_en_state;	// encoder state
__EXTERN byte v44_en_transparent;	// compressing or transparent
__EXTERN byte v44_en_seg_len;	// Compare position withing string segement
__EXTERN byte v44_en_sent_codeword;	// Indicates previous code a codeword or not
__EXTERN word v44_en_test_delay;	/* delay for compressibility testing */
__EXTERN word v44_en_n8;	// History size
__EXTERN word v44_en_c3;	// threshold for changing codeword size
__EXTERN word v44_en_n2;	// Number of code words
__EXTERN word v44_en_n7;	// Max string length
__EXTERN word v44_en_str_len;	// Total length of current string
__EXTERN byte v44_en_esc_char;		// Escape character
__EXTERN byte v44_en_ext_len_field_width;	// no. bits in str. ext. fields for extensions >=13

// V.44 decoder
__EXTERN byte *v44_de_history;	// Output history;
__EXTERN byte **v44_de_str_end_ptr;	// ptrs to last char of str in de_history
__EXTERN byte *v44_de_str_len;	// string length
__EXTERN dword v44_de_bitbuff;		/* bit buffer for decoder */
__EXTERN byte  v44_de_bitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte v44_de_next_bits_length;	// length of next bit sequence to be processed in compressed mode
__EXTERN enum V44_DECODER_STATE v44_de_state;	// bit stream synchronization state
__EXTERN enum V44_DECODER_STRING_STATE v44_de_str_state;	// string creation state
__EXTERN byte v44_de_ext_len_field_width;	// no. bits in str. ext. fields for extensions >=13
__EXTERN byte v44_de_esc_char;
__EXTERN word v44_de_last_cw;	// last codeword received
__EXTERN volatile word v44_de_dte_write_count;	// number of bytes written to DTE buff during one v44_decode()
__EXTERN word v44_de_c1;	// next available codeword
__EXTERN word v44_de_c3;	// threshold for changing codeword size
__EXTERN byte *v44_de_c4_ptr;	// current position in history
__EXTERN byte v44_de_c2;	// current codeword size, in bits
__EXTERN byte v44_de_c5;	// current ordinal size in bits
__EXTERN word v44_de_n2;	// Number of code words
__EXTERN word v44_de_n7;	// Max string length
__EXTERN word v44_de_n8;	// History size
#endif	// V44

// v42bis.c
#if defined(__V42BIS_H__)

#if !defined(MODEM_Z80) || !defined(__CREATE_GLOBALS)
/* the tree struct for the encoder and decoder dictionaries */

# if defined(V42BIS_PACKED_STRUCT)
__EXTERN V42BIS_TREE_NODE v42bis_tree[2*V42bisP1];
# else
// Note: the order of symbol, right, child, parent must not change
// Also don't separate them, since the memory is used by others
// who expect one contiguous chunk (e.g. faxecm.c)
__EXTERN byte symbol[2*V42bisP1];
__EXTERN word right[2*V42bisP1];
__EXTERN word child[2*V42bisP1]; 	/* the left most child */
__EXTERN byte parent[2*V42bisP1];	// only hold LSB of codeword,
									// rest in upper nibble of child
# endif	// V42BIS_PACKED_STRUCT

__EXTERN byte  v42bis_P0;	/* 1=encode, 2=decode, 3=both 					*/
__EXTERN byte  v42bis_N1;	/* Maximum codeword size(bits) 					*/
__EXTERN word  v42bis_N2;	/* Total number of codewords (dictionary size)	*/
__EXTERN byte  v42bis_N7;	/* Maximum string length						*/



# if defined(MODEM_Z80)
__EXTERN byte  v42bis_N3;	/* Character size (bits)						*/
__EXTERN word  v42bis_N4;	/* Number of characters in the alphabet			*/
__EXTERN word  v42bis_N5;	/* first dictionary entry						*/
__EXTERN byte  v42bis_N6;	/* Number of control codewords					*/
# endif // MODEM_Z80

/* global variables for encoder */
__EXTERN dword v42bis_EnTotalInput;	// total input bits processed by encoder 
__EXTERN dword v42bis_EnTotalOutput;	// total (compressed/trans) bits generated by encoder 
__EXTERN dword v42bis_EnBitbuff;		/* bit buffer for encoder */
__EXTERN byte  v42bis_EnBitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte  v42bis_EnC2;	/* Curret codeword size for encoder			*/
__EXTERN word  v42bis_EnC1;	/* Next empty dictionary entry for encoder	*/
__EXTERN word  v42bis_EnC3;	/* Threshold for codeword size change for encoder*/
__EXTERN word  v42bis_EnPreC1;	/*The previous C1 for encoder */
__EXTERN word  v42bis_EnSptr; 	/* string pointer for string matching */
__EXTERN word  v42bis_EnTest_count;	/* char count for compression testing */
__EXTERN word  v42bis_EnTest_delay;	/* delay for compression testing */
__EXTERN word  v42bis_EnCompBits;	/* compressed bit count */
__EXTERN byte  v42bis_EnSlen; 	/* string length */
__EXTERN byte  v42bis_EnTransparent;	/* TRUE - transparent mode */
__EXTERN byte  v42bis_EnEscChar;		/* escape character */
__EXTERN byte  v42bis_EnDictFull;	/* dictionary full flag */
__EXTERN byte  v42bis_flushed;		/* flush flag */

/* global variables for decoder */
__EXTERN dword v42bitmask[8];
__EXTERN dword v42bis_DeBitbuff;		/* bit buffer for decoder */
__EXTERN byte  v42bis_DeBitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte  v42bis_DeC2;	/* Curret codeword size for decoder			*/
__EXTERN word  v42bis_DeC1;	/* Next empty dictionary entry for decoder	*/
__EXTERN word  v42bis_DePreC1;	/* The previous C1 for decoder	*/
__EXTERN word  v42bis_DeSptr; 	/* string pointer for string matching */
__EXTERN word  v42bis_DeBase;		/* entry to the decoder dictionary */
__EXTERN word  v42bis_DeCptr;		/* codeword pointer */
__EXTERN byte  v42bis_DeSlen; 	/* string length */
__EXTERN byte  v42bis_DeTransparent;	/* TRUE - transparent mode */
__EXTERN byte  v42bis_DeEscChar;		/* escape character */
__EXTERN byte  v42bis_DeDictFull;	/* dictionary full flag */
__EXTERN byte  v42bis_DeEscMode;		/* esc mode for decoder */
__EXTERN byte  v42bis_DeBuff[V42bisP2];	/* buffer for decoded string */
__EXTERN byte  v42bis_DeBuff_full;/* TRUE - buffer reached max str length */
__EXTERN byte  v42bis_mode_sw;		/* for Hayes compatibility */
#endif // !defined(MODEM_Z80) || !defined(__CREATE_GLOBALS)

#endif	// __V42BIS_H__

#if defined(CS_4)
# if defined(QMP_HIGH_WATER_TEST)
__EXTERN U32 qmpWriteHighWaterMark;
__EXTERN U32 qmpReadHighWaterMark;
# endif	// QMP_HIGH_WATER_TEST
__EXTERN U32 sa_data_polling_enabled ;
__EXTERN U32 mqxTimeDelay ;
__EXTERN U32 lst_mqxTimeDelay ;
__EXTERN U32 sa_aux_processorON;
__EXTERN U32 sa_aux_fsON;
__EXTERN U32 sa_qmp_processorON;
__EXTERN word sa_dpLoopCnt;
__EXTERN word lstSpuriousInt;
__EXTERN word x_datapump;
__EXTERN byte sa_qmpStrtRead;
__EXTERN volatile byte dp_isr_regb0; //msm
__EXTERN word x_spuriousInt;

# if defined(__SA_GLOB_H__)
__EXTERN FLOW_CONTROL uart_flow_control;
__EXTERN END_SIGNAL sa_kill_me;
__EXTERN QMP_RX_DRIVER_MODE sa_whichPatch ;
#  if defined(__mqx_h__)
__EXTERN TIME_STRUCT sa_start_time;
#  endif // __mqx_h__
#  if defined(SA_SEQUENCE_TEST)
__EXTERN SEQUENCE_CHECK tst_sequence;
__EXTERN byte nxtCharNsequence;
__EXTERN byte lst16chars[16], *lstchptr;
__EXTERN byte maxSequenceErrors;
__EXTERN U32 sa_ttlRXchars;
#  endif	// SA_SEQUENCE_TEST
#  if defined(SA_PROCOMM_TEST)
__EXTERN U32 NotFirstTimeTru;
#  endif // SA_PROCOMM_TEST
#  if defined(SA_LOOPBACK_TEST)
__EXTERN LOOPBACKMODE sa_dteloopback_mode;
__EXTERN byte sa_dteloopback_seed;
__EXTERN U32 sa_ttlTXchars;
#  endif // SA_LOOPBACK_TEST
__EXTERN U32 sa_moniterRTS;
__EXTERN U32 brk_from_dte_on;
__EXTERN U32 dtr_from_dte_on;
__EXTERN U32 RXframeSize[ 18 ];
__EXTERN U32 TXframeSize[ 18 ];
__EXTERN U32 RXframeFlags[ 4 ];
__EXTERN U32 EDUPortPresent;
__EXTERN U32 InstanceFlag;
__EXTERN U32 lstPutCntr;
__EXTERN U32 lstGetCntr;
__EXTERN U32 rxError;
__EXTERN U32 rxGood;
__EXTERN U32 time2dump;
__EXTERN U32 txError;
__EXTERN U32 txGood;
#  if defined(SA_DIGITAL) && !defined(FORUM)
__EXTERN T0_FRAMER_STATE sa_framer_state;
__EXTERN word sa_framer_timer;
#  endif	// SA_DIGITAL && !FORUM
# endif	// __SA_GLOB_H__
# if defined(SA_TIMER_DEBUG)
__EXTERN U32 sa_timeA, sa_max_timeA, sa_sumA, sa_countsA;
__EXTERN U32 sa_timeB, sa_max_timeB, sa_sumB, sa_countsB;
__EXTERN U32 sa_timeC, sa_max_timeC, sa_sumC, sa_countsC;
# endif	//SA_TIMER_DEBUG
# if defined(QMP_WRITE_TRACE)
__EXTERN U32 sa_qmpwrite_trace;
# endif	// QMP_WRITE_TRACE
# if defined(QMP_READ_TRACE)
__EXTERN U32 sa_qmpread_trace;
# endif	// QMP_READ_TRACE
# if defined(SA_LAPM_DEBUG)
__EXTERN SA_LAPM_DEBUG_STATE sa_lapm_debug;
__EXTERN byte sa_lastTX_nr;
__EXTERN byte sa_lastRX_nr;
__EXTERN word sa_lapm_debug_timer; // how long to monitor ?
# endif	// SA_LAPM_DEBUG
#endif	// CS_4

/****************************************************************
	Allocate global TCP/IP variables
*****************************************************************/
#if defined(TCP_IP)
#if defined(MICRONET_H_INC)

// currently a #define in micronet.h - needed for flow control???
//__EXTERN byte xmit_busy;

// from mn_calbk.c
__EXTERN byte ip_dest_addr[4] /* = {192,6,94,5} */;
__EXTERN byte ip_src_addr[4]  /* = {192,6,94,2} */;

// from mn_scket.c
__EXTERN SOCKET_INFO_T sock_info[NUM_SOCKETS];
__EXTERN word16 socket_flag;

// from mn_ip.c
__EXTERN byte recv_src_addr[4];
__EXTERN word16 ip_recv_len;
__EXTERN /*static */ word16 ip_id /* = 0 */;

// from mn_ppp.c
__EXTERN PPPSTATUS_T ppp_status;
__EXTERN /* static */ byte do_init;
__EXTERN /* static */ byte ppp_resends;
__EXTERN /* static */ byte ppp_terms;
__EXTERN /* static */ byte ppp_state,  lst_ppp_state;
__EXTERN /* static */ byte recv_state, lst_recv_state;
__EXTERN /* static */ byte ppp_event,  lst_ppp_event;
__EXTERN /* static */ byte next_ppp_event;
__EXTERN /* static */ byte ppp_id;
__EXTERN /* static */ byte ppp_proto_hb;
__EXTERN /* static */ byte ppp_proto_lb;
__EXTERN /* static */ byte ppp_len_hb;
__EXTERN /* static */ byte ppp_len_lb;
__EXTERN /* static */ byte ppp_fcs_hb;
__EXTERN /* static */ byte ppp_fcs_lb;
__EXTERN /* static */ word16 send_fcs;
__EXTERN /* static */ word16 recv_fcs;
__EXTERN /* static */ byte ppp_addr[5];
__EXTERN /* static */ TIMER_INFO_T ppp_timer;
__EXTERN /* static */ byte RejID /* = 1 */;
#endif	// MICRONET_H_INC

#if defined(__IO_GLOB_H__)
// From host
__EXTERN byte *host_rx_sptr;
__EXTERN byte *host_rx_eptr;
__EXTERN byte *host_rx_wptr;
__EXTERN byte *host_rx_rptr;
__EXTERN byte host_rx_buff [ HOST_RX_BUFF_SIZE ];

// To host
__EXTERN byte *host_tx_sptr;
__EXTERN byte *host_tx_eptr;
__EXTERN byte *host_tx_wptr;
__EXTERN byte *host_tx_rptr;
__EXTERN byte host_tx_buff [ HOST_TX_BUFF_SIZE ];
#endif	// __IO_GLOB_H__

__EXTERN BOOL in_tcp_ip_mode;
__EXTERN BOOL in_tcp_ip_stack;	// prevents infinite recursion of modem-tcp/ip
#if defined(Z80_DEBUG_PPP)
__EXTERN BOOL ppp_debug;
__EXTERN byte ppp_rcv_history[PPP_HISTSIZE];
__EXTERN byte ppp_rcv_histndex;
__EXTERN byte ppp_snd_history[PPP_HISTSIZE];
__EXTERN byte ppp_snd_histndex;
#endif	// Z80_DEBUG_PPP

__EXTERN byte lst_io_state;
__EXTERN byte lst_lapm_state;

__EXTERN byte mn_service_mode;	// ACTIVE or PASSIVE
__EXTERN byte mn_service_type;	// TCP or UDP
__EXTERN byte mn_tcp_test;		// Start TCP / IP Test
								// { see testTCP_IP () in mn_test.c }
__EXTERN word ppp_start_timer;

#endif	// TCP_IP

#if defined(SA_MULTI_INSTANCE)
} GLOBALS;
//------------------------------------
// ptr to current Global Structure
//------------------------------------
extern GLOBALS *GlobPtr;

//----------------------------------------------------
//			For CS-4 Multi-Instance
//----------------------------------------------------
// CREATE A GLOBAL STRUCTURE for shared DTE VARIABLES
//----------------------------------------------------
typedef struct {
#endif	// SA_MULTI_INSTANCE

#if defined(__IO_GLOB_H__)

# if defined(CS_4) && defined(SA_ASCEND_HOST)
// From host
__EXTERN byte *io_dte_rx_sptr;
__EXTERN byte *io_dte_rx_eptr;
__EXTERN byte *io_dte_rx_wptr;
__EXTERN byte *io_dte_rx_rptr;
// To host
__EXTERN byte *io_dte_tx_sptr;
__EXTERN byte *io_dte_tx_eptr;
__EXTERN byte *io_dte_tx_wptr;
__EXTERN byte *io_dte_tx_rptr;
# else
// From host
__EXTERN volatile byte *io_dte_rx_sptr;
__EXTERN volatile byte *io_dte_rx_eptr;
__EXTERN volatile byte *io_dte_rx_wptr;
__EXTERN volatile byte *io_dte_rx_rptr;
// To host
__EXTERN volatile byte *io_dte_tx_sptr;
__EXTERN volatile byte *io_dte_tx_eptr;
__EXTERN volatile byte *io_dte_tx_wptr;
__EXTERN volatile byte *io_dte_tx_rptr;
# endif // CS_4 && SA_ASCEND_HOST

#if defined(CS_4)
__EXTERN volatile U32 io_dte_rx_status; // From host
__EXTERN volatile U32 io_dte_tx_status; // To host
__EXTERN volatile U32 filler1;
__EXTERN volatile U32 filler2;
#endif	// CS_4
#endif	// __IO_GLOB_H__

#if defined(SA_MULTI_INSTANCE)
} IGLOBALS;
//-------------------------------------
// ptr to current Global Structure
//-------------------------------------
extern IGLOBALS *IGlobPtr;

//----------------------------------------------------
//			For CS-4 Multi-Instance
//----------------------------------------------------
// CREATE A GLOBAL STRUCTURE for shared DTE BUFFERS
//----------------------------------------------------
typedef struct {
#endif	// SA_MULTI_INSTANCE

#if defined(__IO_GLOB_H__)
# if defined(CS_4) && defined(SA_ASCEND_HOST)
__EXTERN byte io_dte_rx_buff [ IO_DTE_RX_BUFF_SIZE ];
__EXTERN byte io_dte_tx_buff [ IO_DTE_TX_BUFF_SIZE ];
# else
__EXTERN volatile byte io_dte_rx_buff [ IO_DTE_RX_BUFF_SIZE ];
__EXTERN volatile byte io_dte_tx_buff [ IO_DTE_TX_BUFF_SIZE ];
# endif // CS_4 && SA_ASCEND_HOST
#endif	// __IO_GLOB_H__

#if defined(SA_MULTI_INSTANCE)
} BGLOBALS;
//-------------------------------------
// shared DTE Global Structure
//-------------------------------------
extern IGLOBALS *IGlobArray ;
extern BGLOBALS *BGlobArray ;

//----------------------------------------------------
//			For CS-4 Multi-Instance
//----------------------------------------------------
// CREATE A GLOBAL STRUCTURE for context switch
//----------------------------------------------------
typedef struct {

	U32			ModemOffset;
	GLOBALS		*globalPtr;
	IGLOBALS	*iglobalPtr;

} MODEMINSTANCE;
__1_EXTERN MODEMINSTANCE InstanceArray [ LASTMODEM + 1 ];
#endif	// SA_MULTI_INSTANCE
#endif	//	__ALLGLOB_H__
