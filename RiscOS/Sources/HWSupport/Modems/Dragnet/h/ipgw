/*name and version number:@(#)ipgw.h	1.8*/
/*date of get: 		  09/06/00 16:59:00*/
/*date of delta:	  06/01/00 14:58:08*/
/* ********************************************
		File: ipgw.h
		Date: March 17, 1998
		By:   SJ Busak
*********************************************** */

#ifdef DECLARE
	#define DECL
#else
	#define DECL extern
#endif

#define FAST_FCS    /* Un-comment to use table look-up method */

/* -------------------------------------------------- */
/* Declarations of #defines for modem status register */
/* -------------------------------------------------- */

#define CHKSUM_GOOD   0x08
#define BUFFERS_EMPTY 0x01

/* ------------------------------------------------- */
/* Declarations of #defines for host status register */
/* ------------------------------------------------- */

#define RESET_RX   0x04
#define RESET_TX   0x02
#define CBIF_EN    0x01    /* Code byte interface enabled */

/* -------------------------------------------- */
/* Declarations of #defines for SLIP Characters */
/* -------------------------------------------- */

#define END     0xC0
#define ESC     0xDB
#define ESC_END 0xDC
#define ESC_ESC 0xDD

/* ------------------------------------------------ */
/* Declarations of #defines for code byte interface */
/* ------------------------------------------------ */

#define RX_OVERRUN    1
#define RX_TIMEOUT    2
#define TX_TIMEOUT    3
#define LOSS_OF_SYNC  4
#define MODEM_ACK     5
#define MODEM_CMD     6
#define CB_OVRRUN     7
#define TX_SM_ERR     8
#define RX_SM_ERR     9
#define ACK_TIMEOUT   10    // +c-7/09
#define END_OF_FRM    0x80

/* ------------------------------------------- */
/* Declarations for Global-Function Prototypes */
/* ------------------------------------------- */

void ip_init        (void);
void ip_background  (void);
void chk_buffers    (void);

byte ppp_on_off     (byte);
byte load_accm      (byte, byte);
word ip_rx_bytes    (void);
word ip_tx_bytes    (void);

non_banked void load_cbq       (byte);
non_banked void load_scr       (void);
non_banked void cbq_init       (void);

/* -------------------------------------- */
/* Declarations for Structures and Unions */
/* -------------------------------------- */

struct ACCM_MAP
{
	byte flag;
	byte cur_map [4];
	byte new_map [4];
};

struct IP_STAT
{
	byte modem_status;
	byte host_status;
	word rx_size;
   word shr_flg_tmr;    /* Shared-flag timer for PPP  */
	byte status;         /* General IP status (internal use only) */
};

struct DTE_PTR_QUE
{
  byte *ptr[5];     // Array of io_dte_tx_wptr
  byte ip_idx;      // Index to active pointer used by PPP/SLIP
  byte isr_idx;     // Index to active pointer used by RBR ISR
  byte fcs;         // FCS status associated with PPP frames (b0-b4)
  byte cnt;         // Number of active pointers in ptr array
  byte eof;         // End of frame flag for each frame (b0-b4)
};

// -------------------------------- //
// Definition for bits in ip.status //
// -------------------------------- //

#define EOF_EMPTY    0x80        // DIAGNOSTIC FLAG -- Call to end_of_frm when buffer was empty
#define FCS_BAD      0x40        // Rx FCS was bad (Same bit position in code byte)
#define MCR_EN_RBR   0x20        // Have codebyte ISR enable RBR interrupts
#define LOST_SYNC    0x10        // Lost Tx Sync with host
#define RX_OVR       0x08        // Rx Overrun condition detected
#define RX_EOF       0x04			// Received end of frame from remote modem
#define EOF_ACK_WAIT 0x02   		// Wait until host ACKs EOF codebyte
#define SCR_ACK      0x01			// Host ACK to a code byte

/* --------------------------------- */
/* Declarations for Global Variables */
/* --------------------------------- */

DECL struct ACCM_MAP tx_accm;
DECL struct ACCM_MAP rx_accm;
DECL struct IP_STAT  ip;
DECL struct DTE_PTR_QUE dpq;

DECL byte ip_mode;           
DECL byte **isr_dte_rx_wptr;
DECL word isr_dte_rx_sptr;
DECL word isr_dte_rx_eptr;
DECL word isr_rx_full_count;
DECL word isr_rx_empty_count;

DECL byte **isr_dte_tx_rptr;
DECL byte **isr_dte_tx_wptr;
DECL word isr_dte_tx_sptr;
DECL word isr_dte_tx_eptr;

DECL byte *ip_dte_tx_wptr;
DECL byte *ip_dte_tx_rptr;
DECL byte ip_eof_cnt;        // FIFO count used with EOF code byte
DECL byte rx_isr_state;      // State variable for RBR interrupt enable



