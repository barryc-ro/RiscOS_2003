/*name and version number:@(#)dpglob.h	1.476*/
/*date of get: 		  12/15/00 10:10:27*/
/*date of delta:	  11/30/00 16:56:52*/
/****************************************************************
File :  dpglob.h
Description :
	Contains #defines and variables that are global to dp task.

Revision History :
	Initials        Date		Change
*****************************************************************/
#ifndef __DP_GLOB_H__
#define __DP_GLOB_H__

typedef enum {
	DP_INIT,
	DP_IDLE,
	DP_WAIT_FOR_RING,
	DP_RING_INIT,
	DP_ANALOG_LOOPBACK,
	DP_AUTO_ANSWER,
	DP_ANSWERTONE,
	DP_V32_RETRAIN,
	DP_RING_ON,
	DP_RING_OFF,
	DP_DATA_CALL_TONE,	// 10
	DP_NULL,
	DP_WAIT,
	DP_OVERCURRENT,
	DP_FAX_CNG_TONE,
	DP_FAX_WAIT,
	DP_FAX_CED_TONE,
	DP_FAX_CED_TONE_WAIT,
	DP_FAX_ANSWER_TONE,
	DP_FAX_STARTUP_TX,
	DP_FAX_STARTUP_RX,	// 20
	DP_FAX_TRANSMIT_WAIT,
	DP_FAX_RECEIVE,
	DP_FAX_CONTINUE_RX,
	DP_FAX_WAIT_SILENCE_THEN_TX,
	DP_FAX_WAIT_SILENCE_THEN_RX,
	DP_FAX_WAIT_SILENCE,
	DP_CALL_FAILURE,
	DP_GENERATE_TONES,
	DP_SPEAKER_PHONE_HDX,
	DP_SPEAKER_PHONE,  // 30
	DP_SPEAKER_PHONE_WAIT,
	DP_SPEAKER_PHONE_CANCEL,
	DP_SPEAKER_PHONE_TRAIN,
	DP_LOCAL_PHONE_INIT,
	DP_LOCAL_PHONE_DETECT,
	DP_RINGBACK,
	DP_VOICE,
	DP_VOICE_WAVE_END,
	DP_CELL_RING_ON,
	DP_CELL_RING_OFF,      // 40
	DP_RADISH_BG,
	DP_RETRAIN_OVER,
	DP_LOSS_CARRIER,
	DP_V8_TONE_DETECT_INIT_HANDSET,
	DP_V8_TONE_DETECT_HANDSET,
	DP_V8_RX_INIT_HANDSET,
	DP_V8_DETECT_HANDSET,
	DP_V8_RX_INIT_SPKR,
	DP_V8_DETECT_SPKR,
	DP_V8BIS,              // 50
	DP_V8BIS_DCE_HANDSET,
	DP_V8BIS_VOICE_DCE_ORIG,
	DP_V8BIS_DCE_ANS,
	DP_V8BIS_DCE_ORIG,
	DP_V110_START,						// for V110
	DP_V110_DATA,						// for V110
	DP_CS_CALL_PROGRESS,				// for CS_MODEM
	DP_CS_DETECT_TONES,	 			// for CS_MODEM
	DP_CS_GEN_TONE_DET_ACK,			// for CS_MODEM
	DP_CS_GEN_SEQ_TONES,		// 60: for CS_MODEM
	DP_CID_ALERT,
	DP_ISDN_RING_ON,
	DP_ISDN_RING_OFF,
	DP_WAIT_V8_ANSWER,
	DP_V34FAX_STARTCHANNEL,	// start opposite channel - V34 Fax States
	DP_V34FAX_DATAWAIT,		// wait for data mode
	DP_V34FAX_SILENCEWAIT,	// send ones to far end
	DP_V34FAX_DETECT1S,		// count/time 1s from far end
	DP_V34FAX_ANS_WAIT,		// wait for answer tone
	DP_V34FAX_ANS_DELAY,	// delay before sending ANSam
	DP_V34FAX_CMWAIT,		// wait for V8 negotiation start
	DP_V34FAX_V8WAIT,		// wait for V8 CM/JM exchange completion
	DP_V34FAX_PHASE3,		// wait for Phase 3 completion
	DP_V34FAX_TEST_ANSam, // Transmit continous ANSam signal for testing
	DP_WAIT_FOR_CI,
	DP_PERSEUS_NULL,
	DP_56K,
	DP_V8BIS_V92_DCE_ORIG,
	DP_ON_DIAL,
	DP_DISCONNECT,
	DP_V34_RETRAIN,
	DP_TRAINING,
	DP_RETRAIN,
	DP_RETRAIN_START,
	DP_DATA_WAIT,
	DP_ANSWERING,
	DP_CALL_PROGRESS,
	DP_DIAL
}	DP_STATE ;

typedef enum {
	DP_DIAL_START ,
	DP_DIAL_OFFHOOK ,
	DP_LOOPSENSE ,
	DP_DIALTONE ,
	DP_WAIT_DIAL ,          // the 'W' Dial Modifier
	DP_HOOKFLASH_ON ,
	DP_HOOKFLASH_OFF ,
	DP_QUIET_ANSWER ,
	DP_BONG,
	DP_DIAL_DIGIT ,
	DP_DIAL_PAUSE ,
	DP_DIGIT_PAUSE,
	DP_ISDN_CHECK
} DP_DIAL_STATE ;

typedef enum {
	DP_LINE_ON_HOOK,
	DP_LINE_TRAINING,
	DP_LINE_RETRAINING,
	DP_LINE_CONNECTED
} DP_LINE_STATE ;

typedef enum {  
	DIAL_RETURN_OK ,
	DIAL_RETURN_IDLE ,
	DIAL_RETURN_NULL ,
	DIAL_RETURN_FAILURE
} DIAL_RETURN ;

typedef enum {
	SDR_INIT,
	SDR_RING_ON,
	SDR_RING_OFF
} SDR_State;

typedef enum { 
	DP_ENERGY_INIT,
	DP_ENERGY_ON,
	DP_ENERGY_OFF, 
	DP_ENERGY_VALID 
} DP_CADENCE ;

typedef enum {  
	DP_SUCCESS ,
	TROUBLE,
	INEFFECTIVE,
	ERRONEOUS
} CALL_STATUS_CODE ;

#ifdef KORTEX
typedef enum {  
	SUCCES,
	RETARD,
	RAPPEL_AUTORISE,
	BRULE
}STATUS_APPEL;
#endif

typedef enum { 
	DP_PHONE_INIT,
	DP_PHONE_ONHOOK,
	DP_PHONE_OFFHOOK 
} DP_PHONE_STATE ;

typedef enum {  
	DP_INITIAL_DIAL,
	DP_V8_DIAL,
	DP_SUBSEQUENT_DIAL,
	DP_VOICE_DIAL
} DP_DIALING_STATUS ;

typedef enum
{
   TONE_ENERGY_INIT,
   TONE_ENERGY_ON

}TONE_STATE;

typedef enum
{
	WRK_NULL,
	WRK_STARTUP,
	WRK_AC_AGC1,
	WRK_DET_CM,
	WRK_AC_AGC2,
	WRK_V8_ANSW,
	WRK_V8_ANSW1,
	WRK_RETRAIN,
	WRK_AC_MR680_700B,
	WRK_AC_MR864,
	WRK_AC_MR673,
	WRK_AC_MR167_184,
	WRK_AC_MR673_2ND,
	WRK_CLIP_FIX,
	WRK_TAC_PH4_TRN1_FIX,
	WRK_TAC_PH4_TRN3_FIX,
	WRK_CELL_POWER_CNTL,
	WRK_DISABLE_3429SYM
} DP_WRK_STATE;

typedef enum {
	DP_56K_INIT,
	DP_56K_ORIG_BEFORE_EVAL_MSE ,
	DP_56K_ORIG_EVAL_MSE ,
	DP_56K_ORIG_PHASE1 ,
	DP_56K_ORIG_AFTER_TRN1B ,
	DP_56K_ORIG_AFTER_MP ,
	DP_56K_ORIG_AFTER_FAST_RETRAIN ,
	DP_56K_ANS_AFTER_MP ,
	DP_56K_ANS_AFTER_MP_WAIT ,
	DP_56K_ANS_PHASE1 ,
	DP_56K_ANS_PHASE3 ,
	DP_56K_DATA_MODE ,
	VPCM_MONITOR_V8,
	VPCM_DL_ERAM,
	VPCM_WAIT_1,
	VPCM_CK_V8,
	VPCM_CK_V90,
	VPCM_INFO0_ERROR_RECOVERY,
	VPCM_CK_75MS,
	VPCM_WAIT_FOR_PHASE3,
	VPCM_DOWNLOAD_SLICER_TABLE,
	VPCM_WAIT_TO_DOWNLOAD_SLICER,
	VPCM_WAIT_FOR_CONNECT,
	VPCM_WAIT_TO_UPDATE_EQ,
	VPCM_DATA_MODE,
	VPCM_DATA_MODE_1,
	VPCM_RETRAIN,
	VPCM_RATECHANGE,
	VPCM_RETRAIN_WAIT_FOR_CONNECT,
	VPCM_RATECHANGE_WAIT_FOR_CONNECT,
	DP_56K_RETRAIN
}	DP_56K_STATE ;

#if defined(V92_MODEM_ON_HOLD)
#define MH_ENABLED	0x01
#define MH_GRANT	0x02
#define MH_L2PREF	0x04	// switch to L2 if MOH denied
#define MH_L2DEF	0x08	// switch to L2 without MOH_req
#define MH_10s		0x80
#define MH_20s		0x40
#define MH_30s		0xC0
#define MH_40s		0x20
#define MH_1min		0xA0
#define MH_2min		0x60
#define MH_3min		0xE0
#define MH_4min		0x10
#define MH_6min		0x90
#define MH_8min		0x50
#define MH_12min	0xD0
#define MH_16min	0x30
#define MH_nolimit	0xB0
typedef enum {
	MH_NULL,
	MH_I_INIT,
	MH_I_WAIT_FOR_RT,
	MH_I_WAIT_FOR_CLEAR,
	MH_I_RCV_DPSK,
	MH_I_START_ANSam,
	MH_I_IDLE,
	MH_I_RETRAIN_PH1,
	MH_I_RETRAIN_PH2,
#ifdef VPCM_CLIENT
	MH_R_INIT,
	MH_R_RCV_DPSK,
	MH_R_WAIT_FOR_CLEAR,
	MH_R_WAIT_FOR_SILENCE,
	MH_R_IDLE,
	MH_R_RETRAIN_PH1,
	MH_R_RETRAIN_PH2,
	MH_DROP_DATA,
#else
	MH_R_INIT,
	MH_R_RCV_DPSK,
	MH_R_WAIT_FOR_CLEAR,
	MH_R_WAIT_FOR_SILENCE,
	MH_R_SENT_ANSAM,
	MH_R_IDLE,
	MH_R_WAIT_FOR_CM,
	MH_R_RETRAIN_PH1A,
	MH_R_RETRAIN_PH2,
	MH_R_RETRAIN,
	MH_R_DROP_DATA_FROM_ENGINE1,
	MH_R_DROP_DATA_FROM_ENGINE2,
	MH_DROP_DATA,
	MH_R_EXIT,
#endif	//VPCM_CLIENT
	MH_EXIT
} MH_V92_STATE ;
#endif

/* These are the types of atom's that are
 * important while parsing the AT+VTS command.
 */
typedef enum 
{
	ATOM_NUMBER,
	ATOM_ILLEGAL,
	ATOM_DONE,
	ATOM_R_BRAK = ']',
	ATOM_L_BRAK = '[',
	ATOM_R_BRACE = '}',
	ATOM_L_BRACE = '{',
	ATOM_COMMA = ','
} VTS_ATOMS;

/* used in dpvoice
 * 
 */
#if defined( VOICE )
typedef enum 
{
	DP_VOICE_RING_ON,
	DP_VOICE_RING_OFF
} DP_VOICE_RING_STATE ;
#endif	// VOICE

/* used in dpcall
 * 
 */
#if defined(MODEM_Z80)
#define BLACKLIST_SIZE 5		// less to save RAM
#else
#define BLACKLIST_SIZE 24	
#endif
#define MAX_DIGITS 20	
typedef struct {
	byte tel_number[MAX_DIGITS] ;	// dialed number 
	CALL_STATUS_CODE status_code ; 	// call progress status
	byte attempts ;					// number of attempts
	TIME_MIN_SEC time_listed ;		// time when current attempt failed
} BLACKLIST_RECORD ;


#define TAD_IDLE                0x00
#define TAD_LINE_LOOPBACK       0x10
#define TAD_NEAR_LOOPBACK       0x20
#define TAD_NEAR_RECORD         0x30
#define TAD_NEAR_PLAYBACK       0x40
#define TAD_LINE_RECORD         0xa0
#define TAD_LINE_PLAYBACK       0xc0
#define TAD_SCREEN_OUT          0xe0
#define TAD_SCREEN_IN           0xf0
#define TAD_NEAR_FULL_DUPLEX    0x50
#define TAD_LINE_FULL_DUPLEX    0x80
#define FDSP_MUTE               0x00
#define FDSP_UNMUTE             0x01

/******************************************************************
	Modem Commands
*******************************************************************/
#define FAST_RATE_CHANGE        0x02
#define GENERATE_TONES          0x07
#define DETECT_TONES            0x08
#define DETECT_DTMF_TONES       0x09
#define DTMF_DIALING            0x0a
#define PULSE_DIALING           0x0b
#define LL_TEST                 0x0c
#define STARTUP                 0x0e
#define RETRAIN                 0x0f
#define REPORT_VERSION          0x10
#define OFF_HOOK                0x11
#define ON_HOOK                 0x12
#define MODEM_IDLE              0x13
#define CHECK_DSP               0x14
#define GOTO_CMD                0x1b
#define FDSP_CMD                0x20
#define FDSP_SAVE_AEC_COEF      0x1d
#define ORIGINATE               0x01
#define ANSWER                  0x00
#define DSP_VAR_SPEED_CMD       0x20
#define PDM                     0x29

#define V_54_PREP               0x00
#define V_54_ACK                0x01
#define V_54_TERM               0x02

#define BONG_TONES1		0x003	/* 000000000011 binary = 0x003 hex*/
#define BONG_TONES2		0x00c	/* 000000001100 binary = 0x00c hex*/
#define ANSWER_TONES    0x3f0   /* 001111110000 binary = 0x3f0 hex*/
#define ALL_TONES               0x3ff

/******************************************************************
	Modem Speeds
*******************************************************************/
/*
 * C/S RAM Location: 0x080D. V.34 Rate Selection
 */
#define V34_33600               0xbfff          // V34BIS 33600bps and below
#define V34_31200               0x9fff          // V34BIS 31200bps and below
#define V34_28800               0x8fff          // V34 28800bps and below
#define V34_26400               0x87ff          // V34 26400bps and below
#define V34_24000               0x83ff          // V34 24000bps and below
#define V34_21600               0x81ff          // V34 21600bps and below
#define V34_19200               0x80ff          // V34 19200bps and below
#define V34_16800               0x807f          // V34 16800bps and below
#define V34_14400               0x803f          // V34 14400bps and below
#define V34_12000               0x801f          // V34 12000bps and below
#define V34_9600                0x800f          // V34 9600bps and below
#define V34_7200                0x8007          // V34 7200bps and below
#define V34_4800                0x8003          // V34 4800bps and below
#define V34_2400                0x8001          // V34 2400bps

#define V34_33600_ONLY          0x2000          // V34 28800bps 
#define V34_31200_ONLY          0x1000          // V34 28800bps 
#define V34_28800_ONLY          0x0800          // V34 28800bps 
#define V34_26400_ONLY          0x0400          // V34 26400bps 
#define V34_24000_ONLY          0x0200          // V34 24000bps 
#define V34_21600_ONLY          0x0100          // V34 21600bps 
#define V34_19200_ONLY          0x0080          // V34 19200bps 
#define V34_16800_ONLY          0x0040          // V34 16800bps 
#define V34_14400_ONLY          0x0020          // V34 14400bps 
#define V34_12000_ONLY          0x0010          // V34 12000bps 
#define V34_9600_ONLY           0x0008          // V34 9600bps 
#define V34_7200_ONLY           0x0004          // V34 7200bps 
#define V34_4800_ONLY           0x0002          // V34 4800bps 
#define V34_2400_ONLY           0x0001          // V34 2400bps

/*
 * C/S RAM Location: 0x01. V.32 Rate Selection 
 */
#define AUTO_MODE               0xB1            // v22bis/v22, v21, Bell103, v23 1200/75
#define V32_19200               0xfff0          // v32ter 19200bps and below
#define V32_16800               0xbff0          // v32ter 16800bps and below
#define V32_14400               0x9ff0          // v32bis 14400bps and below
#define V32_12000               0x8ff0          // v32bis 12000bps and below
#define V32_9600                0x8bf0          // v32bis 9600bps and below
#define V32_7200                0x8bb0          // v32bis 7200bps and below
#define V32_4800                0x89b0          // v32bis 4800bps
#define V32_9600U               0x88e0          // V32 uncoded 9600bps
#define V32_RETRAIN				0x8880

#define V32_19200_ONLY          0xc990          // v32ter 19200bps only
#define V32_16800_ONLY          0xa990          // v32ter 16800bps only
#define V32_14400_ONLY          0x9990          // v32bis 14400bps only
#define V32_12000_ONLY          0x8d90          // v32bis 12000bps only
#define V32_9600_ONLY           0x89d0          // v32bis 9600bps only
#define V32_7200_ONLY           0x8b90          // v32bis 7200bps only
/*
 * C/S RAM Location: 0x02. Low-Speed Rate Selection
 */
#define V22_2400                0x1             // v22bis 2400bps
#define V22_1200                0x2             // v22 1200bps
#define V22_600                 0x4             // v22 600bps
#define B103_300                0x10            // Bell 103 300bps
#define V21_300                 0x20            // v21 300bps
#define V23_600					0x40            // v23 600/75bps
#define V23_1200                0x80            // v23 1200/75bps

#define FAX_9600                0x100
#define FAX_7200                0x200
#define FAX_4800                0x400
#define FAX_2400                0x800
#define FAX_300                 0x1000

/*
 * C/S RAM Location: 0x0c. V.17 Rate Selection 
 */
#define V17_FAX_7200            0x01
#define V17_FAX_9600            0x02
#define V17_FAX_12000           0x04
#define V17_FAX_14400           0x08
#define V17_FAX_16800           0x10
#define V17_FAX_19200           0x20

/******************************************************************
	Modem Options  
*******************************************************************/
/*
 * C/S RAM Location: 0x39. FAX Options Word     
 */
#define SHORTTRAIN              0x8
/*
 * C/S RAM Location: 0x3d. HDLC Options Control Word
 */
#define HDLC_DATA_MODE          0x140
#define HDLC_CRC_DISABLED       0x141
#define SYNC_DATA_MODE          0x100

#define HDLC_FLAG               0x7e
#define ASYNC_MARK              0xff
#define TRANSP_SYNC             0x00

/******************************************************************
	Tone frequency defines 
*******************************************************************/

/*
 * DTMF tones, fax and data calling tones, 7200samples/sec
 */
#define  F1209S   0x37ac        /* DTMF high frequency 1 */
#define  F1209C   0x1f90
#define  F1336S   0x3ad3        /* DTMF high frequency 2 */
#define  F1336C   0x1936
#define  F1477S   0x3d79        /* DTMF high frequency 3 */
#define  F1477C   0x11cd
#define  F1633S   0x3f52        /* DTMF high frequency 4 */
#define  F1633C   0x94b
#define  F697S    0x2492        /* DTMF low frequency 1  */
#define  F697C    0x3485
#define  F770S    0x27d7        /* DTMF low frequency 2  */
#define  F770C    0x3216
#define  F852S    0x2b51        /* DTMF low frequency 3  */
#define  F852C    0x2f1c
#define  F941S    0x2ed8        /* DTMF low frequency 4  */
#define  F941C    0x2b9b

#define  F1100C    0x24b5       /* 7.2Khz,fax calling tone*/
#define  F1300C    0x1b0c       /* 7.2Khz,data calling tone*/
#define  F2312_5C7 0xe453       /* 7.2Khz, Radish Start tone*/
#define  F2912_5C7 0xcb2e       /* 7.2KHz, Radish Start tone*/
#define  F1180C    0x20f1       /* 7.2k Hz sampling rate, V8 CI tone */
#define  F980C     0x29f9       /* 7.2k Hz sampling rate, V8 CI tone */
//KORTEX<<
//	Pour calculer les valeurs:
//		Il faut travailler en radian
//	Teta = 2*PI*Frequence/7200 Hz
//	FREQUENCEC = 0x(cos(teta) * 13684)
//	FREQUENCES = 0x(sin(teta) * 13684) 

#define	F390C		0x3263
#define	F390S		0x11D7
#define	F450C		0x3B20
#define	F450S		0x187D
#define  F1180_C	0x20F6
#define  F1180_S	0x36DB
//KORTEX>>

/*
 * DTMF tones, fax and data calling tones, 8000samples/sec
 */
#define  F1209S8   0x340a       /* DTMF high frequency 1 */
#define  F1209C8   0x2540
#define  F1336S8   0x377e       /* DTMF high frequency 2 */
#define  F1336C8   0x1fe2
#define  F1477S8   0x3aad       /* DTMF high frequency 3 */
#define  F1477C8   0x198e
#define  F1633S8   0x3d5c       /* DTMF high frequency 4 */
#define  F1633C8   0x1231
#define  F697S8    0x214f       /* DTMF low frequency 1  */
#define  F697C8    0x36a5
#define  F770S8    0x2463       /* DTMF low frequency 2  */
#define  F770C8    0x34a6
#define  F852S8    0x27b3       /* DTMF low frequency 3  */
#define  F852C8    0x3232
#define  F941S8    0x2b1c       /* DTMF low frequency 4  */
#define  F941C8    0x2f4d

#define  F1100S8   0x30aa       /* 8KHz, fax calling tone */
#define  F1100C8   0x2990
#define  F1300S8   0x3691       /* 8KHz, data calling tone */
#define  F1300C8   0x2170
#define  F2312_5C8 0xf074       /* 8Khz, Radish Start tone*/
#define  F2912_5C8 0xd5f6       /* 8KHz, Radish Start tone*/
#define  F1180C8   0x2668       /* 8k Hz sampling rate, V8 CI tone */
#define  F980C8    0x2df2       /* 8k Hz sampling rate, V* CI tone */

/*
 * DTMF tones, fax and data calling tones, 11025samples/sec 
 */
#define  F1209S11   0x28b0      /* DTMF high frequency 1 */
#define  F1209C11   0x3166
#define  F1336S11   0x2c27      /* DTMF high frequency 2 */
#define  F1336C11   0x2e54
#define  F1477S11   0x2fbb      /* DTMF high frequency 3 */
#define  F1477C11   0x2aa2
#define  F1633S11   0x3354      /* DTMF high frequency 4 */
#define  F1633C11   0x263a
#define  F697S11    0x18c2      /* DTMF low frequency 1  */
#define  F697C11    0x3b04
#define  F770S11    0x1b31      /* DTMF low frequency 2  */
#define  F770C11    0x39ef
#define  F852S11    0x1dde      /* DTMF low frequency 3  */
#define  F852C11    0x389a
#define  F941S11    0x20b3      /* DTMF low frequency 4  */
#define  F941C11    0x3703

#define  F1100S11   0x258b      /* 11.025KHz, fax calling tone */
#define  F1100C11   0x33d4
#define  F1300S11   0x2b32      /* 11.025KHz, data calling tone */
#define  F1300C11   0x2f39
#define  F2312_5C11 0x1003      /* 11.025Khz, Radish Start tone*/
#define  F2912_5C11 0xfa4f      /* 11.025KHz, Radish Start tone*/
#define  F1081C11	0x343b		/* French fax calling tone		*/
#define  F1119C11	0x336b		/* French fax calling tone		*/
/*
 * tones from 300 - 3000, 7200samples/sec
 */
#define  F300S    0x1090        /* 300 Hz       */
#define  F300C    0x3dd1
#define  F400S    0x15e3        /* 400 Hz       */
#define  F400C    0x3c23
#define  F500S    0x1b0c        /* 500 Hz       */
#define  F500C    0x3a00
#define  F600S    0x2000        /* 600 Hz       */
#define  F600C    0x376c
#define  F628S    0x2158      // 628 Hz Answer tone
#define  F628C    0x36a1
#define  F700S    0x24b5        /* 700 Hz       */
#define  F700C    0x346c
#define  F800S    0x2923        /* 800 Hz       */
#define  F800C    0x3106
#define  F900S    0x2d41        /* 900 Hz       */
#define  F900C    0x2d41
#define  F1000S   0x3106        /* 1000 Hz      */
#define  F1000C   0x2923
#define  F1100S   0x346c        /* 1100 Hz      */
#define  F1100C   0x24b5
#define  F1200S   0x376c        /* 1200 Hz      */
#define  F1200C   0x1fff
#define  F1300S   0x3a00        /* 1300 Hz      */
#define  F1300C   0x1b0c
#define  F1400S   0x3c23        /* 1400 Hz      */
#define  F1400C   0x15e3
#define  F1500S   0x3dd1        /* 1500 Hz      */
#define  F1500C   0x1090
#define  F1600S   0x3f07        /* 1600 Hz      */
#define  F1600C   0xb1d
#define  F1650S   0x3f75        /* 1650 Hz      */
#define  F1650C   0x851
#define  F1700S   0x3fc1        /* 1700 Hz      */
#define  F1700C   0x593
#define  F1800S   0x4000        /* 1800 Hz      */
#define  F1800C   0x0
#define  F1850S   0x3ff0        /* 1850 Hz      */
#define  F1850C   0xfd2c
#define  F1900S   0x3fc1        /* 1900 Hz      */
#define  F1900C   0xfa6d
#define  F2000S   0x3f07        /* 2000 Hz      */
#define  F2000C   0xf4e3
#define  F2100S   0x3dd1        /* 2100 Hz      */
#define  F2100C   0xef70
#define  F2200S   0x3c23        /* 2200 Hz      */
#define  F2200C   0xea1d
#define  F2300S   0x3a00        /* 2300 Hz      */
#define  F2300C   0xe4f4
#define  F2400S   0x376c        /* 2400 Hz      */
#define  F2400C   0xe000
#define  F2500S   0x346c        /* 2500 Hz      */
#define  F2500C   0xdb4b
#define  F2600S   0x3106        /* 2600 Hz      */
#define  F2600C   0xd6dd
#define  F2700S   0x2d41        /* 2700 Hz      */
#define  F2700C   0xd2bf
#define  F2800S   0x2923        /* 2800 Hz      */
#define  F2800C   0xcefa
#define  F2900S   0x24b5        /* 2900 Hz      */
#define  F2900C   0xcb94
#define  F3000S   0x1fff        /* 3000 Hz      */
#define  F3000C   0xc894

#if defined(CS_MODEM)

// some MultiFreq tones used in tone detections 
#define  F480S   0x1a07
#define  F620S   0x20f6

#define  F540S   0x1d0e
#define  F540C   0x3906
#define  F660S   0x22db
#define  F660C   0x35ac
#define  F780S   0x2846
#define  F780C   0x31bc
#define  F1020S   0x31bc
#define  F1020C   0x2846
#define  F1140S   0x35ac
#define  F1140C   0x22db
#define  F1380S   0x3bbf
#define  F1380C   0x16ef
#define  F1620S   0x3f36
#define  F1620C   0x0a03
#define  F1740S   0x3fe9
#define  F1740C   0x0359
#define  F1860S   0x3fe9
#define  F1860C   0xfca7
#define  F1980S   0x3f36
#define  F1980C   0xf5fd 

#define  F1756S   0x3ff3	// continuity tones; jc-9/15/98
#define  F1756C   0x0274
#define  F1770S   0x3ffa
#define  F1770C   0x01ac
#define  F1780S   0x3ffd
#define  F1780C   0x011d
#define  F1790S   0x3fff
#define  F1790C   0x008f
#define  F1804S   0x4000
#define  F1804C   0xffc6
#define  F1986S   0x3f28
#define  F1986C   0xf5a8
#define  F2010S   0x3eed
#define  F2010C   0xf456
#define  F2020S   0x3ed3
#define  F2020C   0xf3c9
#define  F2034S   0x3eab
#define  F2034C   0xf305
#endif	// CS_MODEM

/*
 * some call progress tones used in tone detections 
 */
#define  F350C    0x3d0a        /* 350 Hz */
#define  F375C    0x3c9b        /* 375 Hz */
#define  F425C    0x3ba6        /* 425 Hz */
#define  F440C    0x3b57        /* 440 Hz */
#define  F480C    0x3a78        /* 480 Hz */
#define  F620C    0x36dc        /* 620 Hz */

/* 
 * some answer tones 
 */
#define  F2060S   0x3e59    /*2060 Hz for answer tone detection from 2050 Hz*/
#define  F2060C   0xf190  
#define  F2130S   0x3d5a    /*2130 Hz for covering 2100Hz tone up to +50 Hz */
#define  F2130C   0xedc8
#define  F2225S   0x3ba6    /*2225 Hz Bell modulation*/
#define  F2225C   0xe8ce
#define  F2250S   0x3b21    /*2250 Hz V.22 modulation*/
#define  F2250C   0xe782

/*****************************************************************************
*       Extern Global Functions
*****************************************************************************/

// defined in dpcmd1.c
extern non_banked void dp_modem_command ( byte command, byte param1, byte param2 ) ;
extern non_banked void dp_modem_command_long ( byte command, byte param1, byte param2, byte param3, byte param4 ) ;
extern non_banked void dp_apollo_command ( byte command, byte p1, byte p2, byte p3, byte p4, byte p5, byte p6, byte p7 ) ;
extern non_banked void dp_write_dsp_ram ( word loc, word value ) ;
extern non_banked word dp_read_dsp_ram ( word loc ) ;
extern void dp_write_dsp_block ( const word *bp, word len ) ;
extern void dp_write_dsp_array ( word loc, const word *bp, byte len ) ;

//-------------------------------------------------------------------
// In CS-4,  the AUX Processor Fast Status Feature updates selected
// DSP RAM locations in real time.
//-------------------------------------------------------------------
#if defined(NEW_QMP_AUX_INTFC)
# define DP_READ_DSP_SPTR() \
		(G(sa_aux_fsON) ? G(dp_s_ptr) : dp_read_dsp_ram(S_PTR))
# define DP_READ_DSP_K56V() \
		(G(sa_aux_fsON) ? G(dp_KfEnable) : dp_read_dsp_ram(K56Version))
# define DP_READ_DSP_3A() \
		(G(sa_aux_fsON) ? G(dp_3a) : dp_read_dsp_ram(0x3a))
# define DP_READ_DSP_833() \
		(G(sa_aux_fsON) ? G(dp_833) : dp_read_dsp_ram(0x833))
# define DP_READ_DSP_1ff6() \
		(G(sa_aux_fsON) ? G(dp_1ff6) : dp_read_dsp_ram(0x1ff6))
# define DSP_IN_RATECHANGE() \
		(G(sa_aux_fsON) ? (G(dp_3a) & 0x6) \
						: (dp_regread(DP_STATUS_REG) & RETRAIN_STATUS))
#else
# define DP_READ_DSP_SPTR() dp_read_dsp_ram(S_PTR)
# define DP_READ_DSP_K56V() dp_read_dsp_ram(K56Version)
# define DP_READ_DSP_3A()	dp_read_dsp_ram(0x3a)
# define DP_READ_DSP_833()	dp_read_dsp_ram(0x833)
# define DP_READ_DSP_1ff6() dp_read_dsp_ram(0x1ff6)
# define DSP_IN_RATECHANGE() (dp_regread(DP_STATUS_REG) & RETRAIN_STATUS)
#endif

#if defined( MODEM_Z80 )
# define DP_CHKDSP()
# define DP_MQX_CHKTIME(x)
# define DP_DELETE_TASK()
# if defined( COMPRESS_TABLES )
#   define DOWNLOAD_DSPk56(x,y)		\
		(dp_download_dspk56_long( address_24_of(x), (byte)y ))
#   define DOWNLOAD_DSP(x) (dp_download_cp_dsp_long( address_24_of(x) ))
#   define DOWNLOAD_DSP_SLOW(x) (dp_download_cp_dsp_slow( address_24_of(x) ))
    extern void dp_download_dsp( const byte *, word ) ;
    extern void dp_download_dspk56_long(long addr24, byte DesBank);
    extern void dp_download_cp_dsp_long(long addr24);
    extern void dp_download_cp_dsp_slow(long addr24);
# else
#   define DOWNLOAD_DSPk56(x,y)						\
		(dp_download_dspk56_long( address_24_of(x),	\
					(word)(sizeof(x)/sizeof(word)),	\
					(byte) y ))
#   define DOWNLOAD_DSP(x)							\
		(dp_download_dsp_long( address_24_of(x),	\
					(word)(sizeof(x)/sizeof(word)) ))
#   define DOWNLOAD_DSP_SLOW(x)							\
		(dp_download_dsp_long( address_24_of(x),	\
					(word)(sizeof(x)/sizeof(word)) ))
    extern non_banked void dp_download_dsp( const byte *, word );
    extern non_banked void dp_download_dsp_long(long addr24, word count);
    extern non_banked void dp_download_dspk56_long(long addr24, word count, byte DesBank);
# endif
  extern non_banked void wait_for_core_read ( void );
  extern non_banked void z80_display_ext_ram ( byte DestBank, byte max, byte *loc );
#elif defined( CS_4 )
# define DP_CHKDSP()
# define DP_DELETE_TASK()							\
  do {												\
	printf( "%s:%d:  ", __FILE__, __LINE__ );		\
	sa_task_destroy( ModemNum, 1 );					\
  } while(0)
# define back2EDU()									\
  do {												\
	printf( "%s:%d:  ", __FILE__, __LINE__ );		\
	_mqx_exit(0);									\
  } while(0)
# define DOWNLOAD_DSP(x)	 						\
  do {												\
	printf( "%s:%d:  ", __FILE__, __LINE__ );		\
	dp_download_dsp( (const byte *)(x),				\
				(word)(sizeof(x)/sizeof(word))) ;	\
  } while(0)
  //--------------------------------------------------
  // args:	x=*srcp, y=dstBank: from legacy z80 world.
  //		For compatibility, we convert z80 bank to
  //		CS-4 OCRAM address.
  //--------------------------------------------------
# define DOWNLOAD_DSPk56(x,y)						\
  do {												\
	word dLoc ;										\
	dLoc = (word)((((U32)(y) * 0x1000 				\
				+ BANKOFFSET) >> 1) - 0x78000);		\
	printf( "%s:%d:  ", __FILE__, __LINE__ ) ;		\
	dp_download_dspk56_long(						\
				(x),								\
				(word)dLoc,							\
				(word)(sizeof(x)/sizeof(word))		\
			);										\
  } while(0)
  extern void _mqx_exit ( unsigned long );
  extern void dp_download_dspk56_long ( const word *, word, word );
  extern void dp_download_dsp ( const byte *, word );
  extern void dp_download_dsp_long ( long, word );
  extern void wait_for_core_read ( void );

  // Voice-related definitions (start)
# include "sa_cdefs.h"
  #define DSP_CODEC_RAM_ADDR 0xBFFF
  //#define DSP_CODEC_RAM_ADDR 0x1FA8
  //#define DSP_CODEC_RAM_ADDR 0x1F9E
  //#define DSP_CODEC_RAM_ADDR 0x2094
    
  // #define DSP_LEVEL 18	// 0 db gain
  #define DSP_LEVEL 20	// 2 db gain
  // #define DSP_LEVEL 22	// 4 db gain
  // Voice-related definitions (end)
    
  #define ENTER() _int_disable()
  #define LEAVE() _int_enable()
    
  #define SLEEP(ms) _time_delay(ms)
    
  #define OFF_HOOK 0x11
  #define ON_HOOK  0x12

  typedef struct __dsp_image_t {
    const word *addr;    /* address of the image as linear array */
    const word size;    /* num of byte of the DSP code pointed by addr */
  } dsp_image_t;

  /*
   * stats for DSP operation
   */
  typedef struct _dsp_dbg_t
  {
    U32 crbank_wait;  /* times to wait */
    U32 crbank_exp;   /* core read bank int is not set before a specific time */
    U32 cwbank_wait;  /* times to wait */
    U32 cwbank_exp;   /* core write bank int is not set before a specific time */
    U32 dnl_code_bad; /* DSP code is bad */
    U32 dnl_ck_fail;      /* check fsize w/r in CS RAM before download */
    U32 dnl_rc_fail;      /* file size download return code incorrect */
    U32 dnl_csum_fail;    /* file checksum not matched after download */
    U32 rom_ver;
    U32 code_size;
  } dsp_dbg_t;

  U32 v_download_dsp(const dsp_image_t images[], U32 num);
  #if defined(DUMP_IMAGE)
    void dp_dump_image(const dsp_image_t images[], U32 num);
  #endif	// DUMP_IMAGE
  void dpv_init_qmp(void);

  U32 dp_read_rom_fw_ver(void);
  void dp_command3(U8 cmd, U8 a1, U8 a2, U8 a3);
  void dp_command1(U8 cmd, U8 a1);
  void dp_dial_dtmf(U8 digits[], U16 len);
  void dp_set_pllc(U16 freq);
  void dp_isr_idle(void);
  void dp_idle(void);
  void dp_enter_voice_mode(U8 vt_ctrl, U8 g729_mode, U8 rx_level, U8 tx_level, U16 fdsp_ctrl);
  void dp_voice_startup(void);
  void dp_gen_tone(U8 digit);
  void dp_isr_init(void);
    
#else
// Generic processor
# define DP_DELETE_TASK()
# define DP_MQX_CHKTIME(x)
#define DSP_POLLED_MODE			// polling DSP rather than using interrupts

#if defined(DSP_POLLED_MODE)
  extern void dp_dsp_polled ( byte dp_isr_regd7 ) ;

 #  define DP_CHKDSP()										\
 do {														\
	byte dp_isr_regd7 ;										\
	dp_isr_regd7 = (byte) (dp_regread( 0xd8 ) & ~G(dp_bamil_rd7)) ;	\
	if ( dp_isr_regd7 )										\
	{														\
		dp_dsp_polled( dp_isr_regd7 ) ;						\
	}														\
 } while(0)
#else
# define DP_CHKDSP()
#endif

#if defined(COMPRESS_TABLES)
# define DOWNLOAD_DSP(x)  dp_download_dsp( (const byte *)x)
# define DOWNLOAD_DSPk56(x,y) dp_download_dspk56((word *)(x), (byte)(y));
# define DOWNLOAD_DSP_SLOW(x)  DOWNLOAD_DSP(x)
  extern void dp_download_dsp( const byte * );
  extern void dp_download_dspk56( word *, byte );
#else
# define DOWNLOAD_DSP(x)	 						\
 do {												\
	dp_download_dsp( (const byte *)x,				\
				(word)(sizeof(x)/sizeof(word))) ;	\
 } while(0)
# define DOWNLOAD_DSPk56(x,y )						\
 do {												\
	dp_download_dspk56_long( (word *) (x),			\
				(word)(sizeof(x)/sizeof(word)), 	\
				(byte) y ) ;						\
 } while(0)
  extern void dp_download_dsp( const byte *, word ) ;
  extern void dp_download_dspk56_long ( word *, word, byte );
#endif // COMPRESS_TABLES
  extern void dp_download_dsp_long( long, word );
  extern void wait_for_core_read( void );
#endif

#if defined(CS_4)
# define CWBANK					BIT0
# define CRBANK					BIT1
# define NCRTB1					BIT8
# define NCWTB1					BIT12
# define NCWTB4					BIT15
# define ALLINTS				0xffff
# define DP_CLR_CORE_INTS(x)	dp_regwrite16(0xe5, (word)(x))
# define DP_IS_CORE_RD_INT(x)	(dp_regread16(0xe5) & (x))
# if defined(SA_QMP_POLLED_MODE)
#  define ISR_REG				0xe5
#  define DP_SET_CORE_INTS(x)	dp_regwrite16(0xe6, ALLINTS)
# else
#  define ISR_REG				0xe6
#  define DP_SET_CORE_INTS(x)	dp_regwrite16(0xe6, (word)(x))
# endif
#else	// !CS_4
# define CWBANK					BIT3
# define CRBANK					BIT4
# define ALLINTS				0xff
# define DP_CLR_CORE_INTS(x)	dp_regwrite(0xd8, x)
# define DP_IS_CORE_RD_INT(x)	(dp_regread(0xd8) & (x))
# define DP_SET_CORE_INTS(x)	dp_regwrite(0xd7, x)
#endif	// !CS_4


extern non_banked void dp_read_constellation ( word *ptrx, word *ptry ) ;
extern non_banked void dp_regandor ( byte reg, byte and_mask, byte or_mask ) ;
extern void dp_set_mercury_gain ( void ) ;
extern void dp_change_mercury_gain ( byte, byte, byte, byte ) ;
extern non_banked word dp_dsp_int_regread ( byte reg ) ;
extern non_banked void dp_dsp_int_regwrite ( byte reg, word value ) ;

//---------------------------------
//		DP_WRITE_XYPAGE() macro
//---------------------------------
#if !defined(CS_MODEM)
# if defined(CS_4)
#  define DP_WRITE_XYPAGE()								\
	do {												\
		printf( "%s:%d: XY()\n\r", __FILE__, __LINE__ );\
		dp_dsp_int_regwrite( 8, 0x0000 );				\
	} while(0)
# else		//	!CS_4
#  define DP_WRITE_XYPAGE() (dp_dsp_int_regwrite(8, 0x03DE))
# endif //	CS_4
#endif //	!CS_MODEM

//---------------------------------
//		DP_WRITE_IOC() macro
//---------------------------------
#if defined(CS_4)
# define DP_WRITE_IOC() 								\
 do {													\
	printf( "%s:%d: IOC()\n\r", __FILE__, __LINE__ );	\
	dp_dsp_int_regwrite( 1, 0x6800 ) ;					\
 } while(0)
#else
# define DP_WRITE_IOC()	(dp_dsp_int_regwrite( 1, 0x6800 ))
#endif // CS_4

#if defined(DRAGNET)
 #undef DP_WRITE_IOC
 #undef DP_WRITE_XYPAGE
 #define DP_WRITE_IOC()
 #define DP_WRITE_XYPAGE()
#endif // DRAGNET

#if defined(EXTRA_REGWRITE_DSP_DEBUGGING)
#define DP_WITHIN_WRITE_RAM(x)  (G( dp_within_write_ram ) = x)
#else
#define DP_WITHIN_WRITE_RAM(x)
#endif

// defined in dpcntlv.c
extern byte dp_dsp_regread ( byte loc ) ;
extern void dp_startup_prime_pump( void ) ;
extern byte dp_init_modem ( void ) ;
extern void dp_sleep_mode (BOOL ) ;
extern void dp_venus_wakeup ( void ) ;
extern void dp_deinit_modem ( void ) ;
extern void dp_update_modem_options ( void ) ;
extern void dp_enable_ring_int ( void ) ;
extern void dp_transmit_level ( byte level ) ;

extern void dp_offhook_cmd ( void ) ;
extern void dp_onhook_cmd ( void ) ;
extern void dp_analog_loopback_cmd ( void ) ;
extern void dp_modem_idle_cmd ( void ) ;
extern void dp_retrain_cmd ( void ) ;
extern void dp_fast_retrain_cmd ( void ) ;
extern void dp_v90_fast_retrain_cmd ( void ) ;
extern void dp_cleardown_cmd ( void ) ;
extern void dp_rem_digital_loop_cmd ( void ) ;
extern void dp_v54_terminate_cmd ( void ) ;
extern void dp_async_8bit_mode ( void ) ;
extern void dp_async_user_mode ( void ) ;
extern void dp_sync_mode ( void ) ;
extern void dp_hdlc_mode ( void ) ;
extern void dp_sync_mode_hdlc ( void ) ;
extern word dp_dsp_version ( void ) ;
extern word dp_dsp_checksum ( void ) ; 
extern void dp_update_rate (void) ;
extern byte dp_init_modem_connection (void) ;
extern byte dp_ring_detected ( void ) ;
extern void dp_originate_cmd ( void ) ;
extern void dp_answer_cmd ( void ) ;
extern byte dp_dial_connect_success ( void ) ;
extern byte dp_line_connect ( void ) ;
extern void dp_rate_change_cmd ( byte bFallback ) ;
extern void dp_init_auto_rate ( byte mode ) ;
extern void dp_auto_rate ( void ) ;
extern void dp_modem_rate ( void ) ;
extern byte dp_carrier_loss ( void ) ;
extern byte dp_retrain ( void ) ;
extern byte dp_v34_workaround ( void ) ;
extern byte dp_tx_fifo_empty ( void ) ;
extern void dp_sync_mode_mark ( void ) ;
extern void dp_hdlc_mode_no_crc ( void ) ;
extern void dp_get_line_rate ( void ) ;
extern void dp_disable_workaround ( void ) ;
extern void dp_disable_33600 ( void ) ;
extern void dp_monitor_frate_timer (void);
extern void dp_echo_constellation (void);
extern void dp_echo_ram(void);
extern void dp_echo_trec(void);
extern void dp_download_monitor_nc_gain ( word vectorf20 ) ;

/* defined in dpcall.c */
extern DIAL_RETURN dp_dial( void ) ;            
extern void dp_detect_tones_cmd ( void ) ;
extern void dp_DTMF_dial_cmd ( byte digit ) ;
extern void dp_pulse_dial_cmd ( byte digit ) ;
extern byte dp_dial_tone_detected ( void ) ;
extern byte dp_answer_tone_detected ( void ) ;
extern byte dp_busy_tone_detected ( void ) ;
extern void dp_ringback_init ( void ) ;
extern byte dp_ringback_detected ( void ) ;
extern byte dp_quiet_answer_detected ( void ) ;
extern void dp_calling_tone_cmd ( void ) ;   
extern void dp_init_blacklist( void ) ;

#ifdef KORTEX
extern void dp_filter_modifiers ( byte *);
extern STATUS_APPEL dp_recherche_liste( byte *);
extern byte dp_check_list( byte *);
extern void dp_update_blacklist( byte *, STATUS_APPEL);
extern void dp_blacklist_periodic( void );
extern void dp_show_blacklist( void ) ;

// La variable kx_ring_state permet de gerer les etats de la detection du ring

// Le bit 6 de la variable de kx_ring_state permet de savoir si le modem a
// pris la ligne ou non. Lorsque ce bit 6 est a 1, le modem a decroche,
// lorsqu'il est a 0, le modem a raccroche.
// Le bit 7 de la variable de kx_ring_state permet de gerer l'alternative A
// Pas de detection de la sonnerie immediate si la cadence d'envoie de la
// sonnerie immediate est inferieure a 4 s.
// Si le bit 7 = 1, la detection est autorisee
#define KX_INIT					0x00
#define KX_WAIT_RING			0x01
#define KX_SONNERIE_IMMEDIATE	0x02
#define KX_VALID_RING_ON		0x04
#define KX_WAIT_RING_OFF		0x08
#define KX_VALID_RING_OFF		0x10
#define KX_DETECT_PARALLEL_PH	0x20
#define KX_OFF_HOOK				0x40
#define KX_MASK					0x1F
#define KX_DETECT_CAR_RING		0x7F
#define KX_NO_CAR_RING			0x80
#else
extern void dp_update_blacklist( byte *num, byte code ) ;
extern void dp_blacklist_periodic ( void ) ;
extern void dp_show_blacklist( void ) ;
#endif		// fin de KORTEX

extern void dp_spkpn_onhook ( void ) ;
extern void dp_spkpn_offhook ( void ) ;
extern void dp_cid_alert_init ( void ) ;
extern byte dp_cid_alert_detect ( void ) ;

/* defined in dpfax.c */
extern void dp_fax_cng_tone_cmd ( void ) ;
extern void dp_fax_ced_tone_cmd ( void ) ;
extern void dp_fax_startup ( byte param2 ) ;
extern byte dp_fax_connect_success ( void ) ;
extern byte dp_fax_carrier_loss ( void ) ;
extern void dp_init_local_phone_state ( void ) ;
extern void dp_init_local_phone_timer ( void ) ;
extern void dp_init_local_phone_onhook ( void ) ;
extern byte dp_local_phone_detect ( void ) ;
extern void dp_report_voice_event ( byte event ) ;

/* defined in dpvoice.c */
extern void dp_tad_idle ( void ) ;
extern void dp_start_tad ( byte vt_cntrl ) ;
extern void dp_stop_tad ( void ) ;
extern void dp_generate_tones ( word tone1, word tone2 ) ;  
extern void dp_generate_dtmf ( byte dtmf_digit ) ; 
extern void dp_set_speakerphone_gain ( void ) ;
extern void dp_set_tad_speaker_gain ( void ) ;
extern void dp_set_tad_mic_gain ( void ) ;
extern byte dp_tones_detected ( void ) ; 
extern void dp_silence_detected ( void ) ; 
extern void dp_cid_cmd ( void ) ;
extern void dp_cid_disable ( void ) ;
extern void dp_voice_ring ( void ) ;
extern void dp_voice_ring_init ( void ) ;
extern void dp_ch_playback ( byte ) ;
extern void dp_vts ( void ) ;
extern void dp_tad_monitor_hec ( void ) ;
extern byte dp_dualport_vc_Tx (void ) ; 
extern byte dp_dualport_vc_Rc ( void ) ;
extern byte dp_dualport_vc_dualplex_Tx_Rx ( void ) ;
extern void dp_stop_flyby ( void ) ;
extern BOOL dp_start_flyby ( byte ) ;

/* defined in dpfdsp.c */
extern void dp_start_fdsp ( void ) ;
extern void dp_mute_fdsp ( byte ) ;
extern void dp_stop_fdsp ( void ) ;
extern void dp_init_fax_data_detect ( void ) ;
extern void dp_detect_fax_data ( void ) ;
extern void dp_start_hdsp ( void ) ;
extern void dp_start_hdsp_tone_det ( void ) ;
extern void dp_start_fdsp_tone_det ( void ) ;
extern void dp_switch_hdsp ( void ) ;
extern void dp_switch_fdsp ( void ) ;
extern void dp_spk_echotest ( void ) ;
extern void dp_save_aec_coef ( void ) ;
extern void dp_load_aec_coef ( void ) ;
extern byte dp_cancellation ( void ) ;
extern void dp_set_spk_mic_gain ( void ) ;
extern void dp_fdsp_record_start ( void ) ;
extern void dp_fdsp_record_stop ( void ) ;

// defined in dpisr.c 
extern non_banked void dp_board_disable ( void ) ;
extern non_banked void dp_board_enable ( void ) ;
extern non_banked void dp_dma_enable ( void ) ;
extern void dp_init_base_address ( void ) ;
extern non_banked void dp_start_transmit ( void ) ;
extern non_banked void dp_regwrite ( byte, byte ) ;
extern non_banked byte dp_regread ( byte ) ;
#if defined(CS_4)
extern void dp_regwrite16 ( byte, word ) ;
extern word dp_regread16 ( byte ) ;
#endif

// defined in dptest.c
extern word dp_test_cmd ( word test_num, dsp_ram *test_data ) ;

/* defined in dpdspinc.c */
extern void dp_download_fdsp ( void ) ;
extern void dp_download_tad ( void ) ;
extern void dp_download_vsp ( void ) ;
extern void dp_download_V32Turbo ( void ) ;
extern void dp_download_V8bis ( void ) ;
extern void dp_download_fax ( void ) ;
extern void dp_download_v17 ( void ) ;
extern void dp_download_radish ( void ) ;
extern void dp_download_K56EROM( void ) ;
extern void dp_download_K56EROM1( void ) ;
extern void dp_download_K56VenWk ( void ) ;

// v8bis defines
extern void	v8bis_single_tone_detect_setup ( void ) ;
extern void v8bis_clear_dsp_ram_from_vcid ( void ) ;
extern void v8bis_handset_dualtones_detection_setup ( void ) ;
extern byte v8bis_handset_dualtones_detect ( void ) ;
extern byte dp_v8bis_voice_originate ( void ) ;
extern byte dp_v8bis_voice_answer ( void ) ;
extern void dp_v8bis_voice_orig_background ( void ) ;
extern void dp_v8bis_voice_ans_background ( void ) ;
extern byte dp_v8bis_ans_background ( void ) ;
extern byte dp_v8bis_ans_background ( void ) ;

// 56K defines - in dp56k.c
extern void dp_56k_init ( void ) ;
extern void dp_56k_background ( void ) ;
extern void dp_56k_idle ( void ) ;
extern void dp_test_56k_ram ( void ) ;
extern void dp_test_56k_rom ( void ) ;
extern byte dp_56k_retrain_cmd ( byte originator) ; // originator:lapm,ato1,ato3
extern BOOL dp_tx_lapm_error_check(void);
extern void dp_lapm_error_check_init(void);
extern BOOL dp_lapm_error_check(void);

// vpcm defines
extern void vpcm_download_client ( void ) ;
extern void vpcm_download_phase1_phase2 ( void ) ;
extern void vpcm_download_phase3_phase4 ( void ) ;
extern void vpcm_startup ( void ) ;
extern void vpcm_download_eram ( void ) ;
extern void vpcm_init ( void ) ;
extern void vpcm_originate_cmd ( void ) ;
extern void vpcm_hangup ( void ) ;
extern void dp_56k_update_connect_status ( void ) ;
extern void vpcm_connect ( void ) ;
extern void vpcm_data_mode ( void ) ;

extern void dp_56k_fallback ( void) ;
extern void dp_56k_retrain ( void) ;
extern void dp_56k_v34_mode ( void) ;
extern void vpcm_retrain_monitor(void);
extern void vpcm_dill_retrain_monitor(void);
extern void dp_56k_adjust_mse(byte v34call);  //ky+ 101398
extern byte vpcm_in_retrain_state(void);

extern void dp_download_PCM_EROM (void) ;
extern void dp_download_PCM_P12 (void) ;
extern void dp_download_PCM_34iram (void) ;

// Are we in the venus base map?  (DSP Map 1a)
#if defined(DRAGNET)
# if !defined(DRAGNET2)
  // For Dragnet (apollo) we use the IOC register to figure out which
  // map we're in.  For Dragnet2, we don't change maps so we don't use
  // this concept.
  #define VENUS_BASE_MAP	(!(dp_dsp_int_regread(1) & 0x0200))
# endif // !DRAGNET2
#else
 // if x-y page register IROM bit is not set.
 #define VENUS_BASE_MAP	(!(dp_dsp_int_regread(8) & 0x0800))
#endif

// dsp defines
#define AP_DPRAM_BAUD			0x0f20
#define AP_DSP_NUL    			0x8ece

#define VF_BAUD                 0x82a
//very fast baud rating. V34 uses this flag to
//exit data mode. Clear this flag before getting into
//Fax and Radish mode.
#define VF_AUTOMODE             0x828
#define DP_CM_BUFF_HEAD			0x0b36
#define DP_CM_BUFF_TAIL			0x0b4a

/****************************************************************
	DSP adresses 
*****************************************************************/
#define S_PTR                   0x0080
#define R_PTR                   0x00cf
#define BR_PTR					0x0F20
#define LINE_PROBE_BIT_MASK		0x1000
#define K56Version				0x1ff1

#define TA_A2_1				0x7735
#define TA_A1_3				0x76cc
#define TA_LP1				0x76EA
#define TC_75ms_2			0x71A1
#define TA_75ms_2			0x756E
#define DSP_o_456ms			0x9b08		// we've gone to V.22/V.22bis
#define DSP_ab256			0x93fc		// we've decided we are not in v90

// DP RAM locations of interest
#define DP_XMIT_LEVEL_LOC	0x0003		// Transmit Level
#define DP_CUR_SPEED_LOC	0x0036		// Current Line Operating Speed
#define DP_RSL_THRESH_LOC	0x0037		// Receiver Signal Threshold Level
#define DP_OPTIONS_LOC		0x0038		// Options Control Word
#define DP_FAX_OPTIONS_LOC	0x0039		// FAX Options Word
#define	DSP_STATUS_RAM		0x003a		// operating status word
#define DP_SIGNAL_LEVEL_LOC	0x004a		// receive signal level
#define DP_MSE_LOC			0x004c		// receive mean squarred error
#define DP_ROUNDTRIPDLY_LOC	0x0054		// Round Trip Delay - milliseconds
#define DP_NEARECHO_LOC		0x0055		// Near Echo Level
#define DP_FARECHO_LOC		0x0056		// Far Echo Level
#define DP_V8_STATUS		0x0800
#define DP_V34_SYM_POW		0x0801		// V.34 Symbol Rate and Power Control
#define MP_tx1				0x080c
#define DP_V34_DATA_RATE	0x080d		// V.34 Data Rate Capability
#define V34_OPTIONS			0x0821
#define DP_V34_SYMBOLRATE	0x0823
#define MSE_SCALE			0x0825		// MSE scale factor
#define STARTUP_PHASE		0x0829
#define DP_SPEED_TX			0x0833  // Transmit Speed
#define DP_SPEED_RX			0x0834	// Receive Speed
#define sq_status			0x0835

#if defined(VPCM_CLIENT)		//	V.90 client defines
#define DP_V90_MSE			0x0503	// joe's mse for V.90
#define V92Status			0x0820
#define DP_ADD_HOST			0x1ff0
#define KfEnable			0x1ff1
#define K56Opt				0x1ff2
#define DP_ADD_MDIST		0x1ff4	// minimum distance
#define DP_ADD_MAXRATE		0x1ff6
#define DP_ADD_DIGLOSS		0x1ff7
#define DP_ADD_DIGLOSSGAIN	0x1ffd
#define DP_ADD_LL_HOST		0x10b4	// LL_host flag
#define	PcmV_Version		0x10b5
#define DP_V90_ADD_RBS		0x10b6	// V.90 RBS info from DSP
#define VPCM_GOTO_ROM_ADRH	0xd0
#define VPCM_GOTO_ROM_ADRL	0xcb
#define GermanyFix			0x1ffc	// 1 means do germany fix dfe coef

#define VPCM_FINAL_CHK_LOC	KfEnable
#define DP_ADD_ALAW			0x10bf
#define DP_ADD_MAXPOW		0x10c1
#define DP_ADD_POWCMPST		0x10c2
#define DP_ADD_HEADER		0x035d	// CP/Header
#define DP_ADD_TXBM			0x0364	// Tx Const	maps
#define DP_ADD_RXBM			0x0394	// Rx Const	maps
#define DP_ADD_JVAL			0x03d8
#define DP_ADD_MLEV			0x1dea	// levels
#define DP_ADD_RATE			0x1df0	// best	rate
#define DP_ADD_SR			0x1e57	// num bits for spectral shaping

#define LEV_CUTOFF_MSE	100
#define DP_LL_HOST_DONE 0x5678	// finished downloading

#if defined(DRAGNET2)
# define DP_ADD_LRNDTBLOUT	0x24cc	// level learning results - (do not write)
#else
# define DP_ADD_LRNDTBLOUT	0x9cf0	// ll results - in ERAM - ok to write
# define LevelMseAddr		0xb9e0
#endif // DRAGNET2
#endif // VPCM_CLIENT

typedef struct {
	word    wPhAddr;        /* physical address */
	word    wFileSize;      /* section size */
	word    wChksum;        /* file checksum */
} DspFileHdr;

/****************************************************************
	DSP version dependent adresses 
*****************************************************************/
// DSP version dependent call progress defines
#define TOTAL_ENERGY_ADDR       0x0354

#define IIR1_THRESHOLD_ADDR     0x760
#define IIR1_ENERGY_ADDR        0x794
#define IIR1_K_ADDR                     0x764
#define IIR1_D11_ADDR           0x765
#define IIR1_D12_ADDR           0x766
#define IIR1_N11_ADDR           0x767
#define IIR1_N12_ADDR           0x768
#define IIR1_N10_ADDR           0x769
#define IIR1_D21_ADDR           0x76a
#define IIR1_D22_ADDR           0x76b
#define IIR1_N21_ADDR           0x76c
#define IIR1_N22_ADDR           0x76d
#define IIR1_N20_ADDR           0x76e
#define IIR1_D31_ADDR           0x76f
#define IIR1_D32_ADDR           0x770
#define IIR1_N31_ADDR           0x771
#define IIR1_N32_ADDR           0x772
#define IIR1_N30_ADDR           0x773
#define IIR2_THRESHOLD_ADDR     0x761
#define IIR2_ENERGY_ADDR        0x796
#define IIR2_K_ADDR				0x774
#define IIR2_D11_ADDR           0x775
#define IIR2_D12_ADDR           0x776
#define IIR2_N11_ADDR           0x777
#define IIR2_N12_ADDR           0x778
#define IIR2_N10_ADDR           0x779
#define IIR2_D21_ADDR           0x77a
#define IIR2_D22_ADDR           0x77b
#define IIR2_N21_ADDR           0x77c
#define IIR2_N22_ADDR           0x77d
#define IIR2_N20_ADDR           0x77e
#define IIR2_D31_ADDR           0x77f
#define IIR2_D32_ADDR           0x780
#define IIR2_N31_ADDR           0x781
#define IIR2_N32_ADDR           0x782
#define IIR2_N30_ADDR           0x783

/****************************************************************
	DSP version dependent speaker phone & TAD addresses 

	HEC = Hybrid Echo Cancellor
	AEC = Acustic Echo Cancellor
	ASR = Acustic System Ratio 
	LSR = Line System Ratio
*****************************************************************/
// speaker phone defines
#define FDSP_CNTRL_ADDR					0x871
#define IN_SP_CTRL_ADDR					0x878
#define MUTE_SWITCH_ADDR				0x87b
#define MIC_THRESHOLD_ADDR				0x87c
#define HDSP_LOSS_ADDR					0x87d
#define AEC_THRESHOLD_ADDR				0x8dd
#define HEC_THRESHOLD_ADDR				0x8bd
#define AEC_FRAME_LENGTH_ADDR			0x86e
#define HEC_FRAME_LENGTH_ADDR			0x870
#define ASR_ADDR						0x87e
#define IDLE_MUTE_ADDR                  0x87f
#define SPKR_THRESHOLD_ADDR             0x880
#define MIC_MUTE_ADDR                   0x881
#define LSR_ADDR						0x882
#define MIC_GAIN_ADDR                   0x885
#define TRAIN_GAIN_ADDR                 0x886
#define FDSP_SPKR_GAIN_ADDR             0x887
#define FDSP_TONE_PWR_ADDR1             0x7fa
#define FDSP_TONE_PWR_ADDR2             0x7fb
#define FDSP_TONE_PWR_ADDR3             0x7fc
#define FDSP_TONE_PWR_ADDR4             0x7fd
#define FDSP_TONE_PWR_ADDR5             0x7fe
#define FDSP_TONE_PWR_ADDR6             0x7ff
#define TRAIN_ERROR_ADDR                0x36a 
#define TRAIN_AEC_INPUT                 0x36c
#define HECF_DB_ADDR                    0x8bf
#define AECF_DB_ADDR                    0x8df
#define AECMAX_CNTR_ADDR                0x8e6
#define IDLE_SPEED_ADDR                 0x723
#define AGC_SPKR_GAIN_ADDR              0x724
#define AGC_MIC_GAIN_ADDR               0x725
#define DBL_TALK_SPK_MUTE_ADDR			0x728
#define A_UPDATEN						0x8d8
#define NUM_TONES_ADDR                  0x96
#define TONE_OFFTIME_ADDR               0x99
#define TONE_ONTIME_ADDR                0x9a
#define TONE_ONFLAG_ADDR                0x8f
#define SPK_ENERGY_ADDR                 0x255
#define MIC_ENERGY_ADDR                 0x257
#define TONE_THRESHOLD_ADDR             0x91
#define RTOTAL_TONE_ADDR                0x95

// TAD defines
#define VOICE_THRU						0x20
#define TAD_MIC_GAIN_ADDR               0x88d
#define TAD_SPKR_GAIN1_ADDR             0x88e
#define TAD_SPKR_GAIN2_ADDR             0x88f
#define ECOEFSI							0x116
#define PRD_IN_PTR						0x325
#define PRD_OUT_PTR						0x326
#define FSK_RXSAM_BIT					0x343
#define SU_FLAG							0xdc
#define HEC_BETA_ADDR					0xb5
#define VRX_FIFO_THLD					0x0e4
#define VRX_TR_CNT						0x0e5
#define TAD_AGC_GN						0x87c	// tad ini gain
#define TAD_AGC_CNTR					0x87e	// tad agc amount
#define TAD_AGC_NOM						0x881	// tad agc nominal gain
#define TAD_AGC_SPD_DEC					0x882	// tad agc fall time
#define TAD_AGC_SPD_INC					0x883	// tad agc rise time
#define TONE11_COS						0xfc0	// tone11 location
#define TONE12_COS						0xfc1	// tone12 location
#define PLAY_REC_FLG					0x0872	// tad play record flag
#define TAD_SPTR						0x0884	// tad state pointer
#define TAD_R0							0xc942	// with IS101 tad

#define LINEAR_RCV_LVL				0x5e
#define LINEAR_RCV_LVL2				0x21e		//fast rx level
#define TONE_DETECT_ENABLE			0xaa
#define DETECTED_TONES				0x28

/****************************************************************
	DSP version dependent FAX addresses
*****************************************************************/
#define FAX_DOUT_FLAG                   0x1ad   // dout_flag in the dsp code

/************************************************
* define dsp status register
************************************************/

/*** PDM status bit defines ****/
#define DP_PDM_STATUS           0x0046	// dsp ram location
#define PDM_HOST_UNDERRUN       0x8000

/*** EIA register bit define ****/
#define DP_EIA_REGISTER         0X16	// bamil register
#define EIA_DP_RR               0x04

/**** V34 status register ****/
#define DP_STATUS_REG           0X32	// bamil register
#define RETRAIN_STATUS          0X10
#define ECHO_CORRELATOR         0X20
#define FALLFORWARD_STATUS      0X40
#define FALLBACK_STATUS         0X80

/******************************************************************
	V.8 options defines  
*******************************************************************/
#define DCE_V8_ORIG_ENABLE		6
#define	DCE_V8_ANS_ENABLE		5

// #defines for cliping dsp workaround
#define TA_INFO1C_RX		0x7866
#define TA_INFO1C_TX		0x74ad
#define DSP_ERROR_RECOVERY	0x254d
#define TC_LP2      		0x7457
#define DROP_10DB_THRESHOLD	0X26
#define TC_B2_3				0x7414

#ifdef CS_ETC
extern void enable_cell_filter ( void );
extern void etc_recall_land_setting ( void );
extern void etc_save_land_setting ( void );
#define DEEMPH_COEFF_0  0X9E
#define DEEMPH_COEFF_1  0X9F
#define DEEMPH_COEFF_2  0XA0
#define DEEMPH_COEFF_3  0XA1
#define DEEMPH_COEFF_4  0XA2
#endif

// some of the registers in Venus are combined in CS4
//	mask	Venus	 CS4
//	----	-----	-----
//	no  	D8		 E5
//	no		B7		 E5
//	yes 	D7		 E6
//	yes 	B6		 E6
// Note that bit definition are different too, see above defines

#define UM_HINT_REG 0xE5        // ummask host int reg
#define M_HINT_REG  0xE6        // mask host int reg
#define UM_NCTB_REG 0xE5        // unmask new core trigger byte int reg
#define M_NCTB_REG  0xE6        // mask new core trigger byte int reg

/* define Core Read Trigger Byte Reg and its mask bit (in 0xB6) */
#define CRTB_REG   0xB0        /* Core Read Trigger Byte Reg    */
#define CRTB_MASK  CRTB0       /* must be the one for CRTB_REG  */

/* define Core Write Trigger Byte Reg and its mask bit (in 0xB6) */
#define CWTB_REG   0xB0       /* Core Write Trigger Byte Reg     */
#define CWTB_MASK  CWTB0      /* must be for the one for CWTB_REG */

// CAMIL dual port mail box for transmit toward DSP
#define TX_MAILBOX_LO  0x80
#define TX_MAILBOX_HI  0x8F

// CAMIL dual port mail box for receive from DSP
#define RX_MAILBOX_LO  0x90
#define RX_MAILBOX_HI  0x9F

// PLL settings used with dp_set_pllc()
#define PLLC92MHz	0x0b2f
#define PLLC87_4MHz	0x0e51
#define PLLC78MHz	0x054f
#define PLLC70MHz	0x0671
#define PLLC60MHz	0x054b

#define PLLC52_6MHz	0x06b2
#define PLLC80MHz	0x052b
#define PLLC90MHz	0x052d
#define PLLC100MHz	0x0654
#define PLLC120MHz	0x050b

#define PERSEUS_BASE		0xd9
#define PERSEUS_INIT		0xf6
#define PERSEUS_ONHOOKDC	0xf7
#define PERSEUS_OFFHOOK		0xf8
#define PERSEUS_ONHOOK		0xf9
#define PERSEUS_RING_EN		0xfa
#define PERSEUS_PULSE_DIAL	0xfb
#define PERSEUS_PSD_EN		0xfc
#define PERSEUS_PSD_DIS		0xfd
#define PERSEUS_CW_EN		0x21

// need to get perseus codec control
// correct for whichever chip we're using.
#if defined(VENUS2)
 #define PERSEUS_CODEC_CONTROL_L	0x24
 #define PERSEUS_CODEC_CONTROL_H	0x25
#endif // VENUS2

#if defined(DRAGNET2)
 #define PERSEUS_CODEC_CONTROL_L	0xAC
 #define PERSEUS_CODEC_CONTROL_H	0xAD
#endif // DRAGNET2

#endif	// __DP_GLOB_H__
