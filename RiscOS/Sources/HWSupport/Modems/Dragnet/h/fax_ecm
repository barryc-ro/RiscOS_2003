/*name and version number:@(#)fax_ecm.h	1.6*/
/*date of get: 		  09/06/00 16:59:24*/
/*date of delta:	  12/06/99 13:08:10*/

#ifndef __FAX_ECM_H__
	#define __FAX_ECM_H__   

// ------------------------------------------------------------------------------------------- //
// T.30 ECM Responses and Commands with Dynamic Bits (Reversed Bit Order, dynamic bit cleared) //
// ------------------------------------------------------------------------------------------- //
//   Format: b7 b6 b5 b4 b3 b2 b1 X
//     X is set to '1' for the Originating modems (generally)
//     X is set to '0' for the Answer modems (generally)

#define PPS          0xBE
#define PPS_NULL     0x00
#define PPS_EOM      0x8F
#define PPS_MPS      0x4F
#define PPS_EOP      0x2F
#define PPS_PRI_EOM  0x9F
#define PPS_PRI_MPS  0x5F
#define PPS_PRI_EOP  0x3F

#define EOR          0xCE
#define EOR_NULL     0x00
#define EOR_EOM      0x8F
#define EOR_MPS      0x4F
#define EOR_EOP      0x2F
#define EOR_PRI_EOM  0x9F
#define EOR_PRI_MPS  0x5F
#define EOR_PRI_EOP  0x3F

#define CTC          0x12
#define RR_FAX       0x6E

// T.30 ECM responses:

#define PPR     0xBC
#define RNR_FAX 0xEC
#define ERR     0x1C
#define CTR     0xC4

#define MCF  0x8C
#define RTP  0xCC
#define RTN  0x4C
#define PIP  0xAC
#define PIN  0x2C

#define DCN  0xFA
#define CRP  0x1A

/* Misc ECM #defines: */

#define FECM1 0x0400
#define FECM2 0x0800

#define ANOTHER_PP 1
#define NEW_PAGE   0

// ------------------- //
// Function Prototypes //
// ------------------- //

byte fax_ecm_tx   (void);             /* Main function for ECM transmission  */
byte fax_ecm_rx   (void);
void ecm_tx_init  (byte);             /* Initialization for ECM transmission */
void ecm_rx_init  (byte);
void ecm_mode     (void);             // Entry point to FAX ECM state machine
byte use_64k_bufr (void);             
void dont_use_64k (void);

struct ECM_BUF
{
	byte*  wptr;     /* Address to write the next byte */
	byte*  rptr;     /* Address to read the next byte */
	byte   idx_wr;   /* Index into table of start and end fragments for writing */
	byte   idx_rd;   /* Index into table of start and end fragments for reading */
	byte** sptr;     /* Pointer to table of starting addresses for each fragment */
	byte** eptr;     /* Pointer to table of ending addresses for each fragment */
	#if defined(CS_4) || defined(ECM_64K_BUFF)
		long count;    /* Number of bytes in the buffer */
		long rd_cnt;   /* Number of bytes to read */
	#else
		word   count;  /* Number of bytes in the buffer */
		word   rd_cnt; /* Number of bytes to read */
	#endif
};
#endif  // __FAX_ECM_H__

