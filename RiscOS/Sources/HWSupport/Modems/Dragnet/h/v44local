
/*name and version number:@(#)v44local.h	1.7*/
/*date of get: 		  01/19/01 14:16:42*/
/*date of delta:	  01/19/01 14:14:52*/
/****************************************************************
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
*                  CONFIDENTIAL INFORMATION                     *
*                  ------------------------                     *
*    This Document contains Confidential Information or         *
*    Trade Secrets, or both, which are the property of Lucent   *
*    Technologies, Inc.  This document may not be  copied,      *
*    reproduced, reduced to any electronic medium or machine    *
*    readable form or otherwise duplicated and the information  *
*    herein may not be used, disseminated or otherwise          *
*    disclosed, except with the prior written consent of Lucent *
*    Technologies, Inc.                                         *
*                                                               *
* NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *** NOTICE *
*                                                               *
* Copyright (c) 2000 Lucent Technologies, Inc.                  *
* All rights reserved.                                          *
* Use of copyright notice does not imply publication.           *
****************************************************************/
/****************************************************************
File :	v44local.h
Description :
	Contains all declarations used by V.44 implementation.

Revision History :
	Author		Date		Change
	J. Apgar	07/10/00	Initial
*****************************************************************/
#ifndef __V44LOCAL_H__
#define __V44LOCAL_H__

#include "v44.h"

//msm:begin//
#if defined (MODEM_Z80)
 // void
#else
 #include <stdio.h>   // needed for printf
#endif
//msm:end//


// Code prefixes
#define V44_CONTROL_CODE_PREFIX	0x01
#define V44_ORDINAL_PREFIX	0x00
#define V44_CODEWORD_PREFIX	0x01
#define V44_STR_EXT_PREFIX	0x01

/* control codewords, used in compressed mode */
// Note that the definition includes the leading prefix bit
#define V44_ETM		((0<<1) | 0x0001)	/* enter transparent mode */
#define V44_FLUSH	((1<<1) | 0x0001)	/* flush buffer */
#define V44_STEPUP	((2<<1) | 0x0001)	/* codeword or ordinal size step up*/
#define V44_RESET	((3<<1) | 0x0001)	/* force dictionary reset */

/* command codes , used in transparent mode */
#define V44_ECM		0	    /* enter compressed mode */
#define V44_EID		1		/* escape character in data */
#define V44_EPM		2		/* enter parameter mode (NOT SUPPORTED) */

// Byte counts used by anti-expansion heuristic
#define V44_AXF_MIN 32		/* min delay between tests */
#define V44_AXF_MAX 256		/* max delay between tests */
#define V44_AXF_HYST 2		/* hysteresis value */

// FIRST_NODE_PTR points to the location at the end of history
// where node index 0 would live.
#if defined(MODEM_Z80)
#if 0
// Fixed history size (faster)
# define FIRST_NODE_PTR	( (V44_TREE_NODE *) ( shared_ram.v44_en_mem_area + V44_P3T - sizeof(V44_TREE_NODE) ) )
#else
// Variable history size (supports V.250 cmds)
# define FIRST_NODE_PTR	( (V44_TREE_NODE *) ( shared_ram.v44_en_mem_area + G(v44_en_n8) - sizeof(V44_TREE_NODE) ) )
#endif
#else

// Need some includes to access allglobs stuff in code below
#include "llglob_d.h"
#ifdef CLES_MODEM
# define __EXTERN
#else
# include "z80glob.h"
# include "allglobs.h"
#endif // CLES_MODEM

#if 0
// Fixed history size (faster)
# define FIRST_NODE_PTR	( (V44_TREE_NODE *) &G(v44_en_history)[ V44_P3T - sizeof(V44_TREE_NODE) ] )
#else
// Variable history size (supports V.250 cmds)
# define FIRST_NODE_PTR	( (V44_TREE_NODE *) &G(v44_en_history)[ G(v44_en_n8) - sizeof(V44_TREE_NODE) ] )
#endif

//msm:begin//
//
//static word get_node_index( V44_TREE_NODE *node_ptr );
//static V44_TREE_NODE * get_node_ptr( word cw );
//
#if defined(RISCOS)
 extern word get_node_index( V44_TREE_NODE *node_ptr );
 extern V44_TREE_NODE * get_node_ptr( word cw );
#else
 static word get_node_index( V44_TREE_NODE *node_ptr );
 static V44_TREE_NODE * get_node_ptr( word cw );
#endif
//msm:end//

#endif

// Assertions -- this could be hoisted to llglob_d
// and used as a general assert macro
#if defined( V44_ASSERT )
#  if defined(SA_MULTI_INSTANCE)
#   define io_dte_tx_buff	BGlobArray[ ModemNum ].io_dte_tx_buff
#   define io_dte_rx_buff	BGlobArray[ ModemNum ].io_dte_rx_buff
#   define assert(x) \
	if (!(x)) {		\
		printf("ASSERT file %s, line %d\n", __FILE__, __LINE__);		\
		_mqx_exit(0);	\
	}
#  elif defined(MODEM_Z80)
#   define assert(x)	\
	if (!(x)) {		\
		x_debug_msg( "ASSERT file=");	\
		x_debug_msg( __FILE__ );	\
		x_debug_msg( "ASSERT hex line=");	\
		sendHexWord( (word) __LINE__ );	\
		sendCrLf();	\
	}
#  else
#   define assert(x)	\
	if (!(x)) {		\
		printf("ASSERT file %s, line %d\n", __FILE__, __LINE__);		\
	}
//#   include <assert.h>
#  endif // SA_MULTI_INSTANCE
# else
#  define assert(x) ((void)0)
#endif // V44_ASSERT

// Useful macros (Z80) or inline funcs (ARM, MSVC)
#if defined(MODEM_Z80) // || defined(SA_MULTI_INSTANCE)

#  define get_child(node_ptr) ((node_ptr)->down)
#  define get_right(node_ptr) ((node_ptr)->right)
#  define set_child(node_ptr,cw_ptr)		\
	do {							\
		(node_ptr)->down = (cw_ptr);		\
	} while(0);
#  define set_right(node_ptr,cw_ptr)				\
	do {										\
		(node_ptr)->right = (cw_ptr);			\
	} while(0);
# define get_node_index(node_ptr) ((FIRST_NODE_PTR - (node_ptr)) + ( V44_N5 - 1 ))
# define get_node_ptr(cw) ( (V44_TREE_NODE *)( FIRST_NODE_PTR + (V44_N5  - 1) ) -  (cw)  )
# define valid_node_ptr(node_ptr) \
	( node_ptr >= ( FIRST_NODE_PTR - V44_P1T + 1 ) && \
			 node_ptr <= FIRST_NODE_PTR )
# define valid_cw(cw) ( cw >= V44_N5 && cw < V44_P1T )
# if defined(V44_LOCAL_LOOP)
#  define v44_encode_write_lapm(val)		v44_decode_test(val)
#  define v44_encode_write_lapm_word(val) \
	do {	\
		v44_decode_test((byte) val);
		v44_decode_test((byte) (val >> 8 ));
	} while (0);	
# else
#  define v44_encode_write_lapm(val)	\
	do {	\
		*G(lapm_data_ptr)++ = (val);	\
		G(lapm_iframe_ptr)->len++ ;	\
	} while (0);	
#  define v44_encode_write_lapm_word(val)	\
	do {	\
		*( (word *) G(lapm_data_ptr) ) = (val);	\
		G(lapm_data_ptr) += 2;	\
		G(lapm_iframe_ptr)->len += 2;	\
	} while (0);	
# endif // V44_LOCAL_LOOP

#define write_dte_byte(val) \
	do {	\
		*G(lapm_dte_wptr) = (val) ;	\
		if ( ++G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )	\
			G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);	\
	} while(0);

//msm:begin//
//
// loose the silly pseudo inline stuff
//
// funcion code definitions moved to v44.c
//

#elif defined (RISCOS)

extern byte valid_node_ptr( V44_TREE_NODE *node_ptr );
extern byte valid_cw( word cw );
extern V44_TREE_NODE *get_child( V44_TREE_NODE *node_ptr );
extern V44_TREE_NODE *get_right( V44_TREE_NODE *node_ptr );
extern void set_child( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr );
extern void set_right( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr );
extern word get_node_index( V44_TREE_NODE *node_ptr );
extern V44_TREE_NODE *get_node_ptr( word cw );
extern void v44_encode_write_lapm( byte val );
extern void write_dte_byte( byte val );

//msm:end//

#else	// everyone else

static _Inline byte
valid_node_ptr( V44_TREE_NODE *node_ptr )
{
	return ( node_ptr >= ( FIRST_NODE_PTR - V44_P1T + 1 ) &&
			 node_ptr <= FIRST_NODE_PTR );
}

static _Inline byte
valid_cw( word cw )
{
	return ( cw >= V44_N5 && cw < V44_P1T );
}

static _Inline V44_TREE_NODE *
get_child( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	return node_ptr->down;
}

static _Inline V44_TREE_NODE *
get_right( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	return node_ptr->right;
}

static _Inline void
set_child( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	assert ( valid_node_ptr( cw_ptr ) );
	node_ptr->down = cw_ptr;
}

static _Inline void
set_right( V44_TREE_NODE *node_ptr, V44_TREE_NODE * cw_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );
	assert ( valid_node_ptr( cw_ptr ) || cw_ptr == NULL );
	node_ptr->right = cw_ptr;
}

static _Inline word
get_node_index( V44_TREE_NODE *node_ptr )
{
	assert ( valid_node_ptr( node_ptr ) );

	// Given a pointer into G(v44_en_tree)[],
	// return the corresponding index (codeword)
	// Assume starting from highest address first
	// but cannot use cw 0 (corresponding to node_ptr == NULL)
	return (FIRST_NODE_PTR - node_ptr) + ( V44_N5 - 1 );
}

static _Inline V44_TREE_NODE *
get_node_ptr( word cw )
{
	assert ( valid_cw( cw ) );

	// Given a codeword (index into G(v44_en_tree)[])
	// return the corresponding node pointer
	// Assume starting from highest address first
	// but cannot use cw 0 (corresponding to node_ptr == NULL)
	return (FIRST_NODE_PTR - cw) + ( V44_N5 - 1 );
}

static _Inline void
v44_encode_write_lapm( byte val )
{
# if defined(V44_LOCAL_LOOP)
	v44_decode_test(val);	// hair pin loop back
# else
	#if defined(V44_LAPM_DEBUG)
	printf("v44_encode: %s: LAPM byte=%02x\n", G(v44_en_transparent) ? "TM" : "CM",
		val );
	#endif // V44_LAPM_DEBUG

	#if defined(V44_TEST)
	// For unit testing purposes,
	// Push the value back into the decoder 
	v44_decode_test( val );
	#else
	// Write val to LAPM buffer
	*G(lapm_data_ptr)++ = val;
	G(lapm_iframe_ptr)->len++ ;
	#endif // V44_TEST
# endif
}

_Inline static void
write_dte_byte( byte val )
{
#if defined(V44_DECODE_DEBUG)
	//printf("write_dte_byte: DTE write %02x (%c)\n", val, isprint(val) ? val : '.' );
#endif // 

	assert ( G(lapm_dte_wptr) >= &io_dte_tx_buff[0] );
	assert ( G(lapm_dte_wptr) < &io_dte_tx_buff[ IO_DTE_TX_BUFF_SIZE ] );

	// Normal operation
	// Write a byte to the DTE ring buffer
	*G(lapm_dte_wptr) = val ;
	if ( ++G(lapm_dte_wptr) >= I(io_dte_tx_eptr) )
		G(lapm_dte_wptr) = (byte *) I(io_dte_tx_sptr);

	assert ( G(lapm_dte_wptr) >= &io_dte_tx_buff[0] );
	assert ( G(lapm_dte_wptr) < &io_dte_tx_buff[ IO_DTE_TX_BUFF_SIZE ] );
}

#endif	// !MODEM_Z80

// Instrumentation support for WINMODEM unit test
#if defined V44_LOOP_COUNT
static dword call_count;
static dword loop_count;
static dword max_loop_count;
# define LOOP_BINS	9
static dword loop_count_bin[LOOP_BINS];

static void
log_loop_init()
{
	loop_count = 0;
}
static void
log_loop_increment()
{
	loop_count++;
}
static void
log_loop_count()
{
	call_count++;
	if (loop_count > max_loop_count) {
		max_loop_count = loop_count;
	}

	if (loop_count < LOOP_BINS-1) {
		loop_count_bin[ loop_count ] ++;
	}
	else {
		loop_count_bin[ LOOP_BINS-1 ] ++;
	}
}
static void
log_loop_report()
{
	int i;
	printf(" V44 encoder: call_count=%d\n", call_count );
	call_count = 0;
	for (i = 0; i < LOOP_BINS; i++) {
		printf("bin[%d] = %d\n", i, loop_count_bin[i] );
		loop_count_bin[i] = 0;
	}
}
#else
# define log_loop_init() ( (void) 0 )
# define log_loop_count() ( (void) 0 )
# define log_loop_increment() ( (void) 0 )
# define log_loop_report() ( (void) 0 )
#endif // V44_LOOP_COUNT

#ifdef CLES_MODEM

#ifndef __EXTERN 
#define __EXTERN extern 
#endif

// V.44 encoder
__EXTERN byte  v44_P0;	/* 1=encode, 2=decode, 3=both 					*/
//__EXTERN byte  v44_P0;	/* 1=encode, 2=decode, 3=both 					*/
#ifdef CLES_MODEM
__EXTERN byte v44_en_mem_area[ V44_MEM_SIZE ]; // put data here to avoid malloc/free
#endif // CLES_MODEM
__EXTERN V44_TREE_NODE *v44_en_root[V44_N4];	// Root node array, holds indices into tree[]
__EXTERN V44_TREE_NODE * v44_en_last_node_ptr;	// Dict node associated with previous inval
__EXTERN V44_TREE_NODE * v44_en_old_last_node_ptr;	// Previous value of last_node_ptr
__EXTERN V44_TREE_NODE * v44_en_last_match_ptr;	// Node associated with last complete match
__EXTERN V44_TREE_NODE * v44_en_c1_ptr;		// pointer to next node in tree[]
__EXTERN V44_TREE_NODE * v44_en_dict_end_ptr;	// pointer to last node allowed after nego
__EXTERN byte *v44_en_history;	// Startup of input history
__EXTERN byte *v44_en_str_cmp_ptr;	// Pointer to current str ext cmp byte in history
__EXTERN byte *v44_en_c4_ptr;		// pointer to next byte of history[]
__EXTERN byte *v44_en_hist_end_ptr;		// pointer to last usable byte of history[]
__EXTERN dword v44_en_input_byte_count;	// no. bytes rec'd from DTE buffer
__EXTERN dword v44_en_output_byte_count;	// no. bytes sent to LAPM buffer
__EXTERN word v44_en_trans_bytes;	/* char count for compression testing */
__EXTERN word v44_en_comp_bytes;	/* compressed bit count */
__EXTERN dword v44_en_bitbuff;		/* bit buffer for encoder */
__EXTERN byte v44_en_bitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte v44_en_inval;	/* current encoder input value */
__EXTERN byte v44_en_c2;	// current codeword size, in bits
__EXTERN byte v44_en_c5;	// current ordinal size in bits
__EXTERN enum V44_ENCODER_STATE v44_en_state;	// encoder state
__EXTERN byte v44_en_transparent;	// compressing or transparent
__EXTERN byte v44_en_seg_len;	// Compare position withing string segement
__EXTERN byte v44_en_sent_codeword;	// Indicates previous code a codeword or not
__EXTERN word v44_en_test_delay;	/* delay for compressibility testing */
__EXTERN word v44_en_n8;	// History size
__EXTERN word v44_en_c3;	// threshold for changing codeword size
__EXTERN word v44_en_n2;	// Number of code words
__EXTERN word v44_en_n7;	// Max string length
__EXTERN word v44_en_str_len;	// Total length of current string
__EXTERN byte v44_en_esc_char;		// Escape character
__EXTERN byte v44_en_ext_len_field_width;	// no. bits in str. ext. fields for extensions >=13

// V.44 decoder
__EXTERN byte *v44_de_history;	// Output history;
__EXTERN byte **v44_de_str_end_ptr;	// ptrs to last char of str in de_history
__EXTERN byte *v44_de_str_len;	// string length
__EXTERN dword v44_de_bitbuff;		/* bit buffer for decoder */
__EXTERN byte  v44_de_bitbuff_count;	/* number of bits in the bit buffer */
__EXTERN byte v44_de_next_bits_length;	// length of next bit sequence to be processed in compressed mode
__EXTERN enum V44_DECODER_STATE v44_de_state;	// bit stream synchronization state
__EXTERN enum V44_DECODER_STRING_STATE v44_de_str_state;	// string creation state
__EXTERN byte v44_de_ext_len_field_width;	// no. bits in str. ext. fields for extensions >=13
__EXTERN byte v44_de_esc_char;
__EXTERN word v44_de_last_cw;	// last codeword received
__EXTERN volatile word v44_de_dte_write_count;	// number of bytes written to DTE buff during one v44_decode()
__EXTERN word v44_de_c1;	// next available codeword
__EXTERN word v44_de_c3;	// threshold for changing codeword size
__EXTERN byte *v44_de_c4_ptr;	// current position in history
__EXTERN byte v44_de_c2;	// current codeword size, in bits
__EXTERN byte v44_de_c5;	// current ordinal size in bits
__EXTERN word v44_de_n2;	// Number of code words
__EXTERN word v44_de_n7;	// Max string length
__EXTERN word v44_de_n8;	// History size

#endif // CLES_MODEM

#endif	// __V44_H__
