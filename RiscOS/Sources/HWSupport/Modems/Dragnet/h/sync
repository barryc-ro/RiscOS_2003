/*name and version number:@(#)sync.h	1.31*/
/*date of get: 		  10/31/00 12:01:15*/
/*date of delta:	  10/27/00 15:38:50*/
//*****************************************************************************
// File :  sync.h
// Description :
//	Contains all declarations that are used by V.80 (V.ib), V.8, V.25 Annex A
//
// Revision History :
//        Initials        Date            Change
//        A.Cheng         2/21/96        Initial
//*****************************************************************************
#ifndef __SYNC_H__
#define __SYNC_H__

#define	 DC1		0x11	// DC1
#define	 DC3		0x13	// DC3
#define  EM99		0x99	// 99h

#define  FRAME_HDLC_IDLE    0   // DCE transmit HDLC flag on idle
#define  TRANS_MARK_IDLE    0   // DCE transmit mark on idle
#define  CRC_ENABLED     	1 	// CRC enabled

//  V.80 EM escape mode command definitions
#define  EM         0x19    // in-band escape character
#define  EM_19      0x5C    // transmit/receive one 19h pattern
#define  EM_99      0x76    // transmit/receive one 99h pattern
#define  EM_DC1     0xA0    // transmit/receive DC1
#define  EM_DC3     0xA1    // transmit/receive DC3
#define  EM_19_19   0x5D    // transmit/receive two 19h pattern
#define  EM_99_99   0x77    // transmit/receive two 99h pattern
#define  EM_DC1_DC1 0xA2    // transmit/receive two DC1 pattern
#define  EM_DC3_DC3 0xA3    // transmit/receive two DC3 pattern
#define  EM_19_99   0xA4    // transmit/receive 19h 99h pattern
#define  EM_19_DC1  0xA5    // transmit/receive 19h DC1 pattern
#define  EM_19_DC3  0xA6    // transmit/receive 19h DC3 pattern
#define  EM_99_19   0xA7    // transmit/receive 99h 19h pattern
#define  EM_99_DC1  0xA8    // transmit/receive 99h DC1 pattern
#define  EM_99_DC3  0xA9    // transmit/receive 99h DC3 pattern
#define  EM_DC1_19  0xAA    // transmit/receive DC1 19h pattern
#define  EM_DC1_99  0xAB    // transmit/receive DC1 99h pattern
#define  EM_DC1_DC3 0xAC    // transmit/receive DC1 DC3 pattern
#define  EM_DC3_19  0xAD    // transmit/receive DC3 19h pattern
#define  EM_DC3_99  0xAE    // transmit/receive DC3 99h pattern
#define  EM_DC3_DC1 0xAF    // transmit/receive DC3 DC1 pattern

#define  EM_MARK    0xB0    // begin transparent sub-mode
#define  EM_FLAG    0xB1    // transmit a flag, enter Framed sub-mode

#define  EM_ERR     0xB2    // transmit abort
#define  EM_HUNT    0xB3    // put receive in hunt condition
#define  EM_RESUME  0xB7    // resume after transmit underrun ( abort )

#define  EM_EOF     0xBA    // terminate carrier, return to command state
#define  EM_ESC     0xBB    // go to on-line command state ( tx only )
#define  EM_RRN     0xBC    // request rate re-negotiation
#define  EM_RTN     0xBD    // request rate retrain
#define	 EM_RATE	0xBE	// set max. tx & rx rate

//   V.80 rate equates for <EM><rate>
#define	 P12		0x20	// 1200 bit/s
#define	 P24		0x21	// 2400 bit/s
#define	 P48		0x22	// 4800 bit/s
#define	 P72		0x23	// 7200 bit/s
#define	 P96		0x24	// 9600 bit/s
#define	 P120		0x25	// 12000 bit/s
#define	 P144		0x26	// 14400 bit/s
#define	 P168		0x27	// 16800 bit/s
#define	 P192		0x28	// 19200 bit/s
#define	 P216		0x29	// 21600 bit/s
#define	 P240		0x2A	// 24000 bit/s
#define	 P264		0x2B	// 26400 bit/s
#define	 P288		0x2C	// 28800 bit/s
#define	 P312		0x2D	// 31200 bit/s
#define	 P336		0x2E	// 33600 bit/s

//-----------------------------------------------------------------------------
//	Sync Mode Options
//-----------------------------------------------------------------------------

typedef struct
{
	byte TransIdle ;
	byte FrameIdle ;
	byte FrameUnder ;
	byte HalfDuplex ;
	byte CrcType ;
	byte NrziEn ;
	byte Sync1 ;
	byte Sync2 ;
	word Xoff ;
	word Xon ;
}	V80_OPTIONS ;

typedef enum {
	V8_CI_TONE1,
	V8_CI_TONE2,
	V8_CI_TONE3,
	V8_CI_TONE4
} V8_CI_TONE_STATE ;

/* used in atsync.c */
#define BADVALUE (-1)
typedef enum {
	NOERROR,
	SYNCERROR
} ERRORCTL;

/* was used in atsync.c (now obsolete) */
typedef enum {
	SYNC_READ,
	SYNC_SYNTAX,
	ACCESS_READ,
	ACCESS_SYNTAX
} SYNCTYPE;

/* used in dpsync.c */
typedef enum {                                
	V8_CI_SEQ1,
	V8_CI_SEQ2,
	V8_CI_SEQ3,
	V8_CI_SEQ4
} V8_RX_CI_SEQ_STATE ;

/* used in iosync.c */
typedef enum {
	SYNC_TRANSPARENT,
	SYNC_FRAMED,
	SYNC_IDLE
} IO_SYNC_STATE ;

/* defined in iosync.c */
extern void io_sync_power_up_init ( void );
extern void io_sync_init ( void );
extern void io_sync_background ( void );
extern void io_sync_disconnect ( void );
extern void io_sync_on_line ( void );
extern void io_sync_retrain_done ( byte retrain_msg );

/* defined in dpsync.c */
extern byte v8_ci_sequence_detected ( void ) ; // V.8 CI seq. detection
extern void v8_ci_orig ( void );               // init. orig. V.8 CI seq.    
extern void v8_ci_ans_init ( void );           // init. ans. V.8 CI seq.
extern void dp_detect_v8_tones_cmd ( void );   // init. V.8 CI tone detection
extern byte dp_v8_tone_detected ( void ) ;     // V.8 CI tone detection
extern void dp_detect_cm ( void );
extern void dp_v8_originate_msg ( void );
extern void dp_v8_orig_no_ans_msg ( void );
extern void dp_hex_to_hexascii ( char *chBuffPtr, byte bHex );


//#ifdef V8BIS

//		V8bis Signal Subparameter	at 7200 samples/sec
#define	 F_MRe_S	0x2266			// MRe 650 Hz
#define	 F_MRe_C	0x35F8
#define	 F_CRe_S	0x15E6			// CRe 400 Hz
#define	 F_CRe_C	0x3C23
#define	 F_MRd_S	0x35FE			// MRd 1150 Hz
#define	 F_MRd_C	0x225E
#define	 F_CRd_S	0x3FC1			// CRd 1900 Hz
#define	 F_CRd_C	0xFA62
#define	 F_ESi_S	0x3051			// ESi 980 Hz
#define	 F_ESi_C	0x29F9
#define	 F_ESr_S	0x3F75			// ESr 1650 Hz
#define	 F_ESr_C	0x0851
#define	 F_1375_S	0x3BA9			// initiating dual tone 1375 + 2002 Hz
#define	 F_1375_C	0x172B
#define	 F_2002_S	0x3F00
#define	 F_2002_C	0xF4BC
#define	 F_1529_S	0x3EAE			// responding dual tone 1529 + 2225 Hz
#define	 F_1529_C	0x0EF6
#define	 F_2225_S	0x3BA1
#define	 F_2225_C	0xE8C3

//		V8bis Signal Subparameter	at 8000 samples/sec
#define	 F_MRe_S8	0x1F49			// MRe 650 Hz
#define	 F_MRe_C8	0x37D5
#define	 F_CRe_S8	0x13C9			// CRe 400 Hz
#define	 F_CRe_C8	0x3CDD
#define	 F_MRd_S8	0x3246			// MRd 1150 Hz
#define	 F_MRd_C8	0x279B
#define	 F_CRd_S8	0x3FCE			// CRd 1900 Hz
#define	 F_CRd_C8	0x04FC
#define	 F_ESi_S8	0x2C8D			// ESi 980 Hz
#define	 F_ESi_C8	0x2DF2
#define	 F_ESr_S8	0x3D9B			// ESr 1650 Hz
#define	 F_ESr_C8	0x1157
#define	 F_1375_S8	0x3875			// initiating dual tone 1375 + 2002 Hz
#define	 F_1375_C8	0x1E25
#define	 F_2002_S8	0x4000
#define	 F_2002_C8	0xFFDD
#define	 F_1529_S8	0x3BAF			// responding dual tone 1529 + 2225 Hz
#define	 F_1529_C8	0x171C
#define	 F_2225_S8	0x3EFF
#define	 F_2225_C8	0xF4B5

#define  V8BIS_DTE_CONTROL	2	 	// enable DTE controlled V.8bis negotiation
#define  V8BIS_DCE_CONTROL	1		// enable DCE controlled V.8bis negotiation
#define	 V8BIS_DISABLE		0		// disable V.8bis negotiation

#define V8BIS_SIG_NONE				0
#define	V8BIS_SIG_INIT_MRe			1
#define	V8BIS_SIG_INIT_MRd			2          
#define	V8BIS_SIG_INIT_CRe_LOW		3
#define	V8BIS_SIG_INIT_CRe_HIGH		4         
#define	V8BIS_SIG_INIT_CRd			5
#define	V8BIS_SIG_INIT_ESi			6
#define	V8BIS_SIG_RESP_MRd_LOW		7
#define	V8BIS_SIG_RESP_MRd_HIGH		8
#define	V8BIS_SIG_RESP_CRd			9
#define	V8BIS_SIG_RESP_ESr			10

#define Lv8b_iir_length		0xba0		// begin address of data ram
#define Lv8b_acc_tones		Lv8b_iir_length+1
#define Lv8b_iir_1375		Lv8b_iir_length+68
#define	Lv8bis_option		Lv8b_iir_length+164
#define	Lv8bis_status		Lv8bis_option+1

#define V8BIS_V21_CMD			0x1b	// to start V.8bis for V.21
#define V8BIS_V21_ADDR_HIGH		0xcd	// high byte of address for new start-up routine
#define	V8BIS_V21_ADDR_LOW		0x14	// low byte	of address for new start-up routine

typedef struct
{
	byte V8bis_Signal ;
	byte V8bis_Sig_En ;
	byte V8bis_Msg_En ;
	byte V8bis_Supp_Delay ;
}	V8bis_OPTIONS ;

typedef struct {
		byte v8bis_detected_single_tone ;
		word v8bis_timer ;
		word v8bis_rx_buf_count ;
		byte v8bis_mode ;
		byte std_info_field_npar2_octet1 ;
		byte std_info_field_npar2_octet2 ;
		byte detected_tone ;
		word dp_timer ;
		word dp_timer1 ;
		byte in_v8bis_mode ;
		byte in_v8bis_dte_cmd_state ;
		byte v8bis_msg1_cnt;
		byte v8bis_msg2_cnt;
}	V8BIS_GLOBAL_VARS ;

typedef enum {
	V8BIS_INIT ,
	V8BIS_HANDSET ,
	V8BIS_SINGLE_TONE_DETECT_INIT ,
	V8BIS_SINGLE_TONE_DETECT ,
	V8BIS_RX_MSG1_INIT ,
	V8BIS_RX_MSG1 ,
	V8BIS_RX_MSG1_CONNECT ,
	V8BIS_RX_MSG2 ,
	V8BIS_TX_INIT ,
	V8BIS_TX_DUAL_TONE_WAIT ,
	V8BIS_TX_SINGLE_TONE_WAIT ,
	V8BIS_TX_MSG_INIT ,
	V8BIS_TX_MSG1 ,
	V8BIS_TX_MSG1_SETUP_WAIT ,
	V8BIS_TX_WAIT_DONE ,
	V8BIS_TX_MSG2_NO_DELAY ,
	V8BIS_TX_MSG2_WAIT ,
	V8BIS_TX_MSG2 ,
	V8BIS_TX_MSG2_DONE_WAIT ,
	V8BIS_XMIT_WAIT_TX_FIFO_EMPTY ,
	V8BIS_XMIT_DONE ,
	V8BIS_WAIT ,
	V8BIS_TONE_WAIT ,
	V8BIS_RX_WAIT ,
	V8BIS_RX_CONNECT ,
	V8BIS_V8_DETECT_HANDSET ,
	V8BIS_DTE_CMD
} V8BIS_STATE ;

typedef enum {
	V8BIS_SEND_MRe ,
	V8BIS_SEND_MRd ,
	V8BIS_SEND_CRe ,
	V8BIS_SEND_CRd ,
	V8BIS_SEND_CL ,
	V8BIS_SEND_CLR ,
	V8BIS_SEND_MS ,
	V8BIS_SEND_CL_MS ,
	V8BIS_SEND_ACK ,
	V8BIS_SEND_NAK_3 ,
	V8BIS_SEND_NAK_4 ,
	V8BIS_SEND_EXIT_CMD ,
	V8BIS_WAIT_FOR_RESPONSE ,
	V8BIS_HS_INIT_WAIT,
	V8BIS_WAIT_TX_FIFO_EMPTY ,
	V8BIS_SEND_CL_WAIT ,
	V8BIS_SEND_MS_WAIT ,
	V8BIS_SEND_CL_MS_WAIT ,
	V8BIS_SEND_ACK_WAIT ,
	V8BIS_SEND_NAK_3_WAIT ,
	V8BIS_SEND_PREV_CMD_WAIT ,
	V8BIS_SEND_CRd_WAIT
} V8BIS_APP_STATE ;

typedef enum {
	// data call first, DCE control, originate background states
	DP_V8BIS_ORIG_INIT ,
	DP_V8BIS_ORIG ,
	DP_V8BIS_ORIG_DETECT_SINGLE_TONE,
	DP_V8BIS_ORIG_CRe_TONE_DET ,
	DP_V8BIS_ORIG_CRd_TX_SETUP ,
	DP_V8BIS_ORIG_TX_CRd_DUALTONE ,
	DP_V8BIS_ORIG_TX_CRd_TONE ,
	DP_V8BIS_ORIG_CL_RX_SETUP ,
	DP_V8BIS_ORIG_WAIT_FOR_CL_DATA_MODE ,
	DP_V8BIS_ORIG_GET_CL ,
	DP_V8BIS_ORIG_RX_CL ,
	DP_V8BIS_ORIG_TX_PREAMBLE_TONE ,
	DP_V8BIS_ORIG_TX_MS ,
	DP_V8BIS_ORIG_WAIT_TX_FIFO_EMPTY ,
	DP_V8BIS_ORIG_WAIT_FOR_ACK_OR_ANS ,
	DP_V8BIS_ORIG_WAIT_FOR_ACK_DATA_MODE ,
	DP_V8BIS_ORIG_GET_ACK ,	
	DP_V8BIS_ORIG_BACK_TO_V34 ,
	DP_V8BIS_ORIG_BACK_TO_V34_1 ,
	DP_V8BIS_ORIG_PHASE1 ,
	DP_V8BIS_ORIG_VPCM_PHASE1 ,

	// data call first, DCE control, answer background states
	DP_V8BIS_ANS_INIT ,
	DP_V8BIS_ANS_WITH_TRANSACTION_5 ,
	DP_V8BIS_ANS_TX_ESi_DUALTONE ,
	DP_V8BIS_ANS_TX_ESi_TONE ,
	DP_V8BIS_ANS_WITH_TRANSACTION_12 ,
	DP_V8BIS_ANS_TX_DUALTONE ,
	DP_V8BIS_ANS_TX_CRe_TONE ,
	DP_V8BIS_ANS_DUALTONE_DET ,
	DP_V8BIS_ANS_CRd_TONE_DET ,
	DP_V8BIS_ANS_CL_TX_SETUP_WAIT ,
	DP_V8BIS_ANS_TX_CL_MSG ,
	DP_V8BIS_ANS_WAIT_FOR_TX_CL_DONE ,
	DP_V8BIS_ANS_WAIT_FOR_MS_DATA_MODE ,
	DP_V8BIS_ANS_GET_MS ,
	DP_V8BIS_ANS_TX_PREAMBLE_TONE ,
	DP_V8BIS_ANS_TX_ACK ,
	DP_V8BIS_ANS_TX_PREAMBLE_FOR_NAK ,
	DP_V8BIS_ANS_TX_NAK ,
	DP_V8BIS_ANS_WAIT_FOR_TX_ACK_DONE ,
	DP_V8BIS_ANS_WAIT_30MS ,
	DP_V8BIS_ANS_WAIT_FOR_TX_NAK_DONE ,
	DP_V8BIS_ANS_WAIT_NAK_30MS ,
	DP_V8BIS_ANS_BACK_TO_V34 ,
	DP_V8BIS_ANS_BACK_TO_V34_1 ,
	DP_V8BIS_ANS_PHASE1 ,
	DP_V8BIS_ANS_VPCM_PHASE1 ,

	DP_V8BIS_IDLE ,
	DP_V8BIS_END ,

#ifdef V92
	// v92 quick connect, originate background states
	DP_V8BIS_V92_ORIG_INIT ,
	DP_V8BIS_V92_ORIG ,
	DP_V8BIS_V92_ORIG_CRe_TONE_DET ,
	DP_V8BIS_V92_ORIG_TX_QC2a_SETUP ,
	DP_V8BIS_V92_ORIG_TX_PREAMBLE_TONE ,
	DP_V8BIS_V92_ORIG_TX_QC2a ,
	DP_V8BIS_V92_ORIG_WAIT_TX_FIFO_EMPTY ,
	DP_V8BIS_V92_ORIG_WAIT_FOR_QCA2d ,
	DP_V8BIS_V92_ORIG_GET_QCA2d ,		
	DP_V8BIS_V92_ORIG_FALLBACK ,
	DP_V8BIS_V92_ORIG_QUICK_CONNECT ,

	// v92 quick connect, answer background states
	DP_V8BIS_V92_ANS_GET_QC2a ,
	DP_V8BIS_V92_ANS_TX_PREAMBLE_TONE ,
	DP_V8BIS_V92_ANS_TX_QCA2d ,
	DP_V8BIS_V92_ANS_WAIT_FOR_TX_QCA2d_DONE ,
	DP_V8BIS_V92_ANS_FALLBACK ,
	DP_V8BIS_V92_ANS_QUICK_CONNECT ,
#endif	//V92

	// voice call first, DCE control, originate background states
	DP_V8BIS_VOICE_ORIG_INIT ,
	DP_V8BIS_VOICE_ORIG ,
	DP_V8BIS_VOICE_ORIG_TX_CRd_DUALTONE ,
	DP_V8BIS_VOICE_ORIG_TX_CRd_TONE ,
	DP_V8BIS_VOICE_ORIG_WAIT_FOR_CL_DATA_MODE ,
	DP_V8BIS_VOICE_ORIG_GET_CL ,
	DP_V8BIS_VOICE_ORIG_RX_CL ,
	DP_V8BIS_VOICE_ORIG_TX_PREAMBLE_TONE ,
	DP_V8BIS_VOICE_ORIG_TX_MS ,
	DP_V8BIS_VOICE_ORIG_WAIT_TX_FIFO_EMPTY ,
	DP_V8BIS_VOICE_ORIG_WAIT_FOR_ACK_DATA_MODE ,
	DP_V8BIS_VOICE_ORIG_GET_ACK ,			
	DP_V8BIS_VOICE_ORIG_PHASE1 ,
	DP_V8BIS_VOICE_ORIG_BACK_TO_V8_PRIME ,

	// voice call first, DCE control, answer background states
	DP_V8BIS_VOICE_ANS_INIT ,
	DP_V8BIS_VOICE_ANS_V8_DETECT ,
	DP_V8BIS_VOICE_ANS ,
	DP_V8BIS_VOICE_ANS_DUALTONE_DET ,
	DP_V8BIS_VOICE_ANS_CRd_TONE_DET ,
	DP_V8BIS_VOICE_ANS_CL_TX_SETUP_WAIT ,
	DP_V8BIS_VOICE_ANS_TX_CL_MSG ,
	DP_V8BIS_VOICE_ANS_WAIT_FOR_TX_CL_DONE ,
	DP_V8BIS_VOICE_ANS_WAIT_FOR_MS_DATA_MODE ,
	DP_V8BIS_VOICE_ANS_GET_MS ,
	DP_V8BIS_VOICE_ANS_TX_PREAMBLE_TONE ,
	DP_V8BIS_VOICE_ANS_TX_ACK ,
	DP_V8BIS_VOICE_ANS_TX_PREAMBLE_FOR_NAK ,
	DP_V8BIS_VOICE_ANS_TX_NAK ,
	DP_V8BIS_VOICE_ANS_WAIT_FOR_TX_ACK_DONE ,
	DP_V8BIS_VOICE_ANS_WAIT_30MS ,
	DP_V8BIS_VOICE_ANS_PHASE1 ,

	DP_V8BIS_VOICE_IDLE ,
	DP_V8BIS_VOICE_END 

}	DP_V8BIS_STATE ;

extern void v8bis_power_up_init ( void );
extern void v8bis_init ( void );
extern byte v8bis_dualtones_detect ( void );
extern void v8bis_rx_reset ( void );
extern void v8bis_new_cmd ( void );
extern void v8bis_reset ( void ) ;
extern void v8bis_app_reset1 ( void ) ;
extern void v8bis_app_reset ( void ) ;
extern void v8bis_clear_dsp_ram ( void ) ;
extern void v8bis_dte_cmd_tones_detection_setup ( void ) ;
extern void v8bis_in_cmd_state ( void ) ;

extern void v8bis_dte_control_background ( void );

extern byte v8bis_app_done ( void );
extern void v8bis_app ( void );
extern byte v8bis_tone_detect ( void );
extern byte v8bis_datacall_dualtones_detect ( void ) ;
extern byte v8bis_rx_response ( void ) ;
extern void v8bis_set_app_done ( void ) ;
extern byte v8bis_app_ans_init ( void ) ;
extern void v8bis_clear_dsp_ram ( void ) ;
extern void v8bis_clear_dsp_ram_from_vcid ( void ) ;
extern byte v8bis_app_orig_init_done ( void ) ;
extern void v8bis_v70_ring_report ( void ) ;

// defined in dpv8bis1.c
extern byte dp_v8bis_originate ( void ) ;
extern byte dp_v8bis_answer ( void ) ;
extern byte dp_v8bis_orig_background ( void ) ;
extern byte dp_v8bis_ans_background ( void ) ;

#ifdef V92
extern byte dp_v8bis_v92_orig_background ( void ) ;
#endif	//V92
#endif	// __SYNC_H__
