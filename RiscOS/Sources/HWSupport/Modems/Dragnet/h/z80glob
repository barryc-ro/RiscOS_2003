/*name and version number:@(#)z80glob.h	1.87*/
/*date of get: 		  01/10/01 16:57:51*/
/*date of delta:	  01/05/01 10:15:55*/
/****************************************************************
File :	z80glob.h
Description :
	Contains #defines and variables that are global to z80 code.

Revision History :
	Initials	Date		Change
	RWF			11/06/95	Initial
	RWF			03/26/96	Made sharable by IAR Assembler
*****************************************************************/
#ifndef __Z80_GLOB_H__
#define __Z80_GLOB_H__

//#define ZMODEM_TEST

#if defined( CS_4 )	// {

  # include "sa_glob.h"

#elif defined( MODEM_ARM )	// } {

  # include "arm_glob.h"

#else	// } {

#if defined(MODEM_Z80) || defined(WIN32)		// Compiler
 #if defined(MODEM_Z80)
  #include "intrz80.h"
 #endif
#else					// Assembler
#ifndef IDSTRING
#define Z80_ASM
#define MODEM_Z80
#include "llglob_d.h"
#endif
#ifndef IO_DCE_TX_BUFF_SIZE
#include "ioglob_d.h"
#endif
//---------------------------------------------------
//; write register parameter 1 to value parameter 2
//; (This destroys the contents of register A.)
//---------------------------------------------------
WRITE_CAMILZ   MACRO
	LD		A, \1
	out0	( 0xC0 ), A
	LD		A, \2
	out0	( 0xC1 ), A
	ENDM
//---------------------------------------------------
//; read register parameter 1 to A register
//; (This destroys the contents of register A.)
//---------------------------------------------------
READ_CAMILZ   MACRO
	LD		A, \1
	out0	( 0xC0 ), A
	in0		A, ( 0xC1 )
	ENDM
#endif

//==========================================================================
//			Bits for Zinger
//==========================================================================
#define		BIT0	(1<<0)
#define		BIT1	(1<<1)
#define		BIT2	(1<<2)
#define		BIT3	(1<<3)
#define		BIT4	(1<<4)
#define		BIT5	(1<<5)
#define		BIT6	(1<<6)
#define		BIT7	(1<<7)

//----------------------------------------------------------
// EASCI/ESCC defs for the Internal BaudRate Generator (BRG)
//----------------------------------------------------------
#ifdef CLOCK_29MHZ
#define	CLOCK_FREQ		(29491200)
#endif

//----------------------------------------------------------
// EASCI clock is not divided by two
// For VENUS, the CLK_MODE is 1.
//----------------------------------------------------------
#define	CLOCK_DIVIDE	(1)
#define	CLOCK_MODE		(1)

#define	BMC_CLOCK		(CLOCK_FREQ/CLOCK_DIVIDE)

#define	BR75_2			(0)									//     75 bps
#define	BR150_2			(0)									//    150 bps
#define	BR300_2			(BMC_CLOCK/(2*CLOCK_MODE*300)-2)	//    300 bps
#define	BR600_2			(BMC_CLOCK/(2*CLOCK_MODE*600)-2)	//    600 bps
#define	BR1200_2		(BMC_CLOCK/(2*CLOCK_MODE*1200)-2)	//   1200 bps
#define	BR2400_2		(BMC_CLOCK/(2*CLOCK_MODE*2400)-2)	//   2400 bps
#define	BR4800_2		(BMC_CLOCK/(2*CLOCK_MODE*4800)-2)	//   4800 bps
#define	BR7200_2		(BMC_CLOCK/(2*CLOCK_MODE*7200)-2)	//   7200 bps
#define	BR9600_2		(BMC_CLOCK/(2*CLOCK_MODE*9600)-2)	//   9600 bps
#define	BR14400_2		(BMC_CLOCK/(2*CLOCK_MODE*14400)-2)	//  14400 bps
#define	BR19200_2		(BMC_CLOCK/(2*CLOCK_MODE*19200)-2)	//  19200 bps
#define	BR38400_2		(BMC_CLOCK/(2*CLOCK_MODE*38400)-2)	//  38400 bps
#define	BR57600_2		(BMC_CLOCK/(2*CLOCK_MODE*57600)-2)	//  57600 bps
#define	BR115200_2		(BMC_CLOCK/(2*CLOCK_MODE*115200)-2) // 115200 bps
#define	BR230400_2		(BMC_CLOCK/(2*CLOCK_MODE*230400)-2) // 230400 bps
//==========================================================================
//			END of Definitions for the BRG
//==========================================================================

//==========================================================================
//			Control registers for VENUS
//==========================================================================
#define		TMDR0L					0x0C	// timer 0 data reg low
#define		TMDR0H					0x0D	// timer 0 data reg low
#define		RLDR0L					0x0E	// timer 0 reload reg low
#define		RLDR0H					0x0F	// timer 0 reload reg high
#define		TCR						0x10	// timer control reg
#define		TMDR1L					0x14	// timer 1 data reg low
#define		TMDR1H					0x15	// timer 1 data reg low
#define		RLDR1L					0x16	// timer 1 reload reg low
#define		RLDR1H					0x17	// timer 1 reload reg high
#define		CMR						0x1E	// Clock Multiplier Register
#define		CCR						0x1F	// CPU Control Register

#define		SAR0L					0x20
#define		SAR0H					0x21
#define		SAR0B					0x22
#define		DAR0L					0x23
#define		DAR0H					0x24
#define		DAR0B					0x25
#define		BCR0L					0x26
#define		BCR0H					0x27

#define		MAR1L					0x28
#define		MAR1H					0x29
#define		MAR1B					0x2a
#define		IAR1L					0x2b
#define		IAR1H					0x2c
#define		IAR1B					0x2d
#define		BCR1L					0x2e
#define		BCR1H					0x2f
#define		DSTAT					0x30
#define		DMODE					0x31

#define		DCR						0x32	// DMA/IO Wait State Gen.
#define		IL						0x33	// Interrupt Vector Low Register
#define		ICR						0x34	// Interrupt Control Register
#define		RCR						0x36	// DRAM Refresh Control Register
#define		REVR					0x36	// VENUS2 Revision Register
#define		CBR						0x38	// Common Base Register
#define		BBR						0x39	// Bank Base Register
#define		CBAR					0x3A	// Common/Bank Area Register
#define		IOCR					0x3F    // I/O Control Register
#define		CZ_ADD					0xC0	// CAMILZ Address register
#define		CZ_DAT					0xC1	// CAMILZ Data register
#define		CKSRC					0xD3

#if defined(CS_MODEM)
#define		DCCON					0xD4	// Clock Divide & Misc Clock Control
#endif

#define		IOBRG					0xD6	// Baud Rate Generator Enable
#define		CDR						0xD7	// Com Decode Register (89)
#define		WSG						0xD8	// Wait State Generator Register
#define		ENHR					0xD9	// z80182/9 Enhancement Register
#define		IEPMUX					0xDF	// Interrupt Edge Register
#define		BRGL					0xE0	// Baud Rate Generator Cnt L
#define		BRGH					0xE1	// Baud Rate Generator Cnt H
#define		BRGX					0xE2	// Baud Rate Generator Cnt X
#define		RAMUBR					0xE6	// RAM Upper Boundary Register
#define		RAMLBR					0xE7	// RAM Lower Boundary Register
#define		ROMBR					0xE8	// ROM Address Boundary Register
#define		SCR						0xEF	// System Configuration Register
#define		IUSIP					0xFE	//

//--------------------------------------------------------------------------
//			Bits for Control register(s)
//--------------------------------------------------------------------------
#define		TCR_TDE0_BIT			(1<<0)
#define		TCR_TDE1_BIT			(1<<1)
#define		TCR_TOC0_BIT			(1<<2)
#define		TCR_TOC1_BIT			(1<<3)

#define		ICR_INT0_BIT			(1<<0)
#define		ICR_INT1_BIT			(1<<1)
#define		ICR_INT2_BIT			(1<<2)

#if defined( EXT_MODEM )	// {
//==========================================================================
//			Control registers for the SERIAL Channel
//==========================================================================
//---------------------------------------------
// EASCI Internal Registers for Channel 0
//---------------------------------------------
#define		ASCI_CTLA0_REG			0x00	// EASCI Cntrl Register A
#define		ASCI_CTLB0_REG			0x02	// EASCI Cntrl Register B
#define		ASCI_STAT0_REG			0x04	// EASCI Status register
#define		ASCI_TX0_REG			0x06	// EASCI Transmit Data register
#define		ASCI_RX0_REG			0x08	// EASCI Receive Data register
#define		ASCI_XCR0_REG			0x12	// EASCI Extension Cntrl register
#define		ASCI_TCLO_REG			0x1A	// EASCI Time Constant (low byte)
#define		ASCI_TCHI_REG			0x1B	// EASCI Time Constant (high byte)
#define		A0INTIN					0xD1	// EASCI Int Enable register
#define		A0NEWCTL				0xD0	// EASCI Int Status & AB register

//---------------------------------------------
// EASCI Exact Count Registers for Venus II
//---------------------------------------------
#define		XACTCNT0L			0x01	// EASCI Count Register 0 (low byte)
#define		XACTCNT0H			0x03	// EASCI Count Register 0 (high byte)
#define		XACTCNT1L			0x05	// EASCI Count Register 1 (low byte)
#define		XACTCNT1H			0x07	// EASCI Count Register 1 (high byte)
#define		XACTCNT2L			0x09	// EASCI Count Register 2 (low byte)
#define		XACTCNT2H			0x0A	// EASCI Count Register 2 (high byte)
#define		XACTCNT3L			0x0B	// EASCI Count Register 3 (low byte)
#define		XACTCNT3H			0x13	// EASCI Count Register 3 (high byte)

//--------------------------------------------------------
// EASCI Control Bits for the various read/write registers
//--------------------------------------------------------
// ASCI Cntrl Register A (ASCI_CTLA0_REG)
#define		MOD_0					(1<<0)	// Mode selection
#define		MOD_1					(1<<1)	// Mode selection
#define		MOD_2					(1<<2)	// Mode selection
#define		ERROR_RESET				(1<<3)	// Error flag reset
#define		ASCI_RTS				(1<<4)	// CTS output to DTE
#define		TX_ENABLE				(1<<5)
#define		RX_ENABLE				(1<<6)

// ASCI Cntrl Register B (ASCI_CTLB0_REG)
#define		ASCI_DR					(1<<3)	// Clk mode select (0=16/1=64)
#define		ASCI_CTS				(1<<5)	// RTS input from DTE
#define		ASCI_ALL_SENT			(1<<6)	// Lst char shifted out to DTE

// ASCI Status Register (ASCI_STAT0_REG)
#define		TX_INT_ENABLE			(1<<0)
#define		TX_REG_EMPTY			(1<<1)
#define		DCD0					(1<<2)
#define		RX_INT_ENABLE			(1<<3)

// ASCI Extension Control Register (ASCI_XCR0_REG)
#define		SEND_BRK				(1<<0)
#define		BRK_DETECT				(1<<1)
#define		BRK_ENABLE				(1<<2)
#define		BRG0_MODE				(1<<3)
#define		X1_BIT_CLK				(1<<4)
#define		CTS0_DISABLE			(1<<5)
#define		DCD0_DISABLE			(1<<6)

// ASCI Interrupt Enable Register (A0INTIN)
#define		RDRF_INT_ENABLE			(1<<6)
#define		BAUD_INT_ENABLE			(1<<5)
#define		ERROR_INT_ENABLE		(1<<4)
#define		DCD_HL_INT_ENABLE		(1<<3)
#define		DCD_LH_INT_ENABLE		(1<<2)
#define		CTS_HL_INT_ENABLE		(1<<1)
#define		CTS_LH_INT_ENABLE		(1<<0)
#define		A0INTIN_VAL				RDRF_INT_ENABLE | ERROR_INT_ENABLE  \
								| DCD_HL_INT_ENABLE | DCD_LH_INT_ENABLE \
								| CTS_HL_INT_ENABLE | CTS_LH_INT_ENABLE

// ASCI Interrupt Status Register (A0NEWCTL)
#define		DCD_HL_INT_RCVD			(1<<7)
#define		DCD_LH_INT_RCVD			(1<<6)
#define		CTS_HL_INT_RCVD			(1<<5)
#define		CTS_LH_INT_RCVD			(1<<4)
#define		BAUD_DETECT				(1<<1)
#define		AUTOBAUD_EN				(1<<0)
//==========================================================================
//					END of EASCI Definitions
//==========================================================================

#else	// } { ISA || PCMCIA

//==========================================================================
//					Internal/PcCard Modem Definitions
//==========================================================================

#if defined( PCMCIA_MODEM )	// {
//==========================================================================
//			Card Information Structure defines
//==========================================================================
#define CISTPL_NULL          0x00	// Null tuple - ignore
#define CISTPL_DEVICE        0x01	// Device Information tuple - Commom mem
#define CISTPL_LONGLINK_CB   0x01	// Longlink to next chain on a
                                    	// CardBus PC Card
#define CISTPL_CONFIG_CB     0x04	// Configuration tuple for a CardBus
                                 	// PC Card Function
                                 	// CardBus PC Card
#define CISTPL_CE_CB         0x05	// Configuration Table-entry for a
                                 	// CardBus PC Card Function
#define CISTPL_BAR           0x07	// Base Address Register definition
                                 	// tuple for a CardBus PC card
#define CISTPL_LONGLINK_MFC  0x06	// LongLink to function specific chain(s)
                                 	// on a multiple function PC Card
#define CISTPL_CHECKSUM      0x10	// Checksum tuple
#define CISTPL_LONGLINK_A    0x11	// Long-link control to Attribute memory
#define CISTPL_LONGLINK_C    0x12	// Long-link control to Common memory
#define CISTPL_LINKTARGET    0x13	// Link-target control tuple
#define CISTPL_NO_LINK       0x14 	// No link tuple
#define CISTPL_VERS_1        0x15	// Product Information tuple
#define CISTPL_ALTSTR        0x16	// Alternate language string tuple
#define CISTPL_DEVICE_A      0x17	// Device Information Tuple - Attribute memory
#define CISTPL_JEDEC_C       0x18	// JEDEC programming info for common memory
#define CISTPL_JEDEC_A       0x19	// JEDEC programming info for attribute memory
#define CISTPL_CONFIG        0x1A	// Configuration Tuple
#define CISTPL_CFTABLE_ENTRY 0x1B	// Configuration Entry Tuple
#define CISTPL_DEVICE_OC     0x1C	// Other operating conditions device
                                 	// information for common memory
#define CISTPL_DEVICE_OA     0x1D	// Other operating conditions device
                                 	// information for attribute memory
#define CISTPL_DEVICEGEO     0x1E	// Device Geometry information for
                                 	// common memory devices
#define CISTPL_DEVICEGEO_A   0x1F	// Device Geometry information for
                                 	// common memory devices
#define CISTPL_MANFID        0x20	// Manufacturer & Card ID Tuple
#define CISTPL_FUNCID        0x21	// Function ID Tuple
#define CISTPL_FUNCE         0x22	// Function Extension Tuple
#define CISTPL_SWIL          0x23	// Software Interleaving
#define CISTPL_VERS_2        0x40	// Level-2 version tuple
#define CISTPL_FORMAT        0x41	// Format tuple
#define CISTPL_GEOMETRY      0x42	// Geometry tuple
#define CISTPL_BYTEORDER     0x43	// Byte order tuple
#define CISTPL_DATE          0x44	// Card initialization date tuple
#define CISTPL_BATTERY       0x45	// Battery replacement date tuple
#define CISTPL_ORG           0x46	// Organization tuple
#define CISTPL_FORMAT_A      0x47	// Data recording format for
                                 	// Attribute Memory
#define CISTPL_SPCL          0x90	// Special purpose tuple
#define CISTPL_END           0xFF	// End-Of-List Tuple

#define DTYPE_SRAM           0x06	// SRAM device type
#define DTYPE_IO             0x0D	// I/O device type
#define DTYPE_ROM            0x01	// ROM device type

#define END_MARK             0xFF	// Table end marker

#if defined( MULTI_FUNCTION )
  #define	TPLLV1_MAJOR	0x05	// PCMCIA Major Version
  #define	TPLLV1_MINOR	0x00	// PCMCIA release PC Card 95
#else
  #define	TPLLV1_MAJOR	0x04	// PCMCIA Major Version
  #define	TPLLV1_MINOR	0x01	// PCMCIA release PC Card 95
#endif							// Multi_function

#define	TPLMID_MANF			0x200	// Manufacturer code assigned by PCMCIA
#define	TPLMID_CARD			0x001	// Manufacturer ID number

//--------------------------------------------------------------------------
//					Function Configutation Register Bits
//--------------------------------------------------------------------------
#define COR_SRESET_BIT		(1<<7)
#define COR_INDEX_BITS		(1<<5|1<<4|1<<3)

#endif	// } PCMCIA_MODEM

#if !defined( USB_MODEM )	// {
//--------------------------------------------------------------------------
//					VENUS uart mimic registers
//--------------------------------------------------------------------------
#define 	MIMIC_FCR				0xE9
#define 	MIMIC_RTTC				0xEA
#define 	MIMIC_TTTC				0xEb
#define 	MIMIC_FSCR				0xEc
#define 	MIMIC_RBR				0xF0
#define 	MIMIC_THR				0xF0
#define 	MIMIC_IER				0xF1
#define 	MIMIC_LCR				0xF3
#define 	MIMIC_MCR				0xF4
#define 	MIMIC_LSR				0xF5
#define 	MIMIC_MSR				0xF6
#define		MIMIC_SCR				0xF7
#define 	MIMIC_DLL				0xF8
#define 	MIMIC_DLM				0xF9
#define 	MIMIC_TTCR				0xFA
#define 	MIMIC_RTCR				0xFB
#define 	MIMIC_IVEC				0xFC
#define 	MIMIC_IE				0xFD
#define 	MIMIC_IUS				0xFE
#define 	MIMIC_MMC				0xFF

//--------------------------------------------------------------------------
//		Mimic Interrupt Enable Bits
//--------------------------------------------------------------------------
#if defined(CS_MODEM)
 #define 	MIMIC_THR_ENABLE		0xE8	//Keep MCR enabled
 #define 	MIMIC_RBR_ENABLE		0x98	//Keep MCR enabled
#else
 #define 	MIMIC_THR_ENABLE		0xE0
 #define 	MIMIC_RBR_ENABLE		0x90
 #define 	MIMIC_DLL_ENABLE		BIT1
#endif

#define 	MIMIC_THR_DISABLE		0x9F
#define		MIMIC_RBR_DISABLE		0xEF
#define 	MIMIC_MCR_ENABLE		BIT3
#define 	MIMIC_LCR_ENABLE		BIT2
#define 	MIMIC_FCR_ENABLE		BIT0

#endif // } !USB_MODEM
#endif // } EXT_MODEM

#if defined(MODEM_Z80)
//==========================================================================
//					CAMILZ Access Defines
//==========================================================================
#define BaseAddress		0xC0
#define BaseAddressData	0xC1
#define BaseAddress2	0xC2
#endif

//==========================================================================
//					Pita Access Defines - (for PCI)
//==========================================================================
#define PitaBaseAddress 0x80
#define PitaBaseAddressData 0x81

#if defined(MODEM_Z80)
//==========================================================================
//					CAMILZ Access MACROS
//==========================================================================
//------------------------------------------------------
//		ISR Write CAMILZ register MACRO
//------------------------------------------------------
#define DP_INT_REGWRITE( reg, value )	\
do										\
{										\
  output8( BaseAddress, (reg) ) ;		\
  output8( BaseAddressData, (value) ) ;	\
} while ( 0 )

//------------------------------------------------------
//		ISR Read CAMILZ register MACROs
//------------------------------------------------------
//	IF ( (reg >= 0x80 && reg <= 0x9f) || (reg >= 0xd0) )
//	 THEN use DP_INT_REGREAD2()
//------------------------------------------------------
#define DP_INT_REGREAD( reg )			\
  (output8( BaseAddress, (reg) ),		\
	input8(  BaseAddressData ) )

#define DP_INT_REGREAD2( reg )			\
  (output8( BaseAddress2, (reg) ),		\
	input8(  BaseAddressData ) )

//---------------------------------------------------
// The first 2 macros do NOT preserve 0xc0
//---------------------------------------------------
#if !defined( Z80_ASM )
#define WRITE_CAMILZ( reg, val )	\
	( output8( 0xc0, (reg) ),  		\
	  output8( 0xc1, (val) ) )

#define READ_CAMILZ( reg )			\
	( output8( 0xc0, (reg)),  		\
	  input8( 0xc1 ) )
#endif // !defined( Z80_ASM )

//--------------------------------------------------------------------------
// Called from task environment with Ints enabled
//--------------------------------------------------------------------------
#define	CAMILZ_REGREAD( reg )		\
	( disable_interrupt(),			\
	output8( 0xc0, (reg)),	  		\
	enable_interrupt(),				\
	input8( 0xc1 ) )

#define	CAMILZ_REGWRITE( reg, val )	\
do {								\
	disable_interrupt(),			\
	output8( 0xc0, (reg) ) ;		\
	enable_interrupt(),				\
	output8( 0xc1, (val) ) ;		\
} while (0)

#endif // MODEM_Z80

//==========================================================================
//					DMA MACROS
//==========================================================================
#if defined( Z80_EASCI_RX_DMA ) && !defined( Z80_ASM )
extern BOOL z80_rx_dma ;
extern byte *z80_dte_rx_wptr ;
//--------------------------------------------------------------------------
// Called with Ints disabled
//--------------------------------------------------------------------------
#define	Z80_Ch0_DMA()							\
do {											\
	if ( z80_rx_dma )							\
	{											\
		if ( !(input8( DSTAT ) & 0x40) )		\
		{										\
			z80_dte_rx_wptr = io_dte_rx_sptr ;	\
			z80_start_rx_dma() ;				\
		}										\
	}											\
} while (0)
#else
#define Z80_Ch0_DMA()
#endif

//-------------------------------------------------------
// Macros for controlling LEDs
//-------------------------------------------------------
#define	GREEN_ON()										\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) | BIT3 ) ;	\
} while(0)

#define	GREEN_OFF()										\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) & ~BIT3 ) ;	\
} while(0)

#define	RED_ON()										\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) | BIT2 ) ;	\
} while(0)

#define	RED_OFF()										\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) & ~BIT2 ) ;	\
} while(0)

#define	TOGGLE_RED()									\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) &  BIT2 ?	\
						input8 ( DUMB_MCR ) & ~BIT2 :	\
						input8 ( DUMB_MCR ) |  BIT2 ) ;	\
} while(0)

#define	TOGGLE_GREEN()									\
do {													\
	output8 ( DUMB_MCR, input8 ( DUMB_MCR ) &  BIT3 ?	\
						input8 ( DUMB_MCR ) & ~BIT3 :	\
						input8 ( DUMB_MCR ) |  BIT3 ) ;	\
} while(0)
//					END MACROS
//==========================================================================

//==========================================================================
//					Z80 Dumb Serial Port Defines
//==========================================================================
#if defined(DUMB_IOCS2) || defined(CS_RMP_DEBUG)
#define DUMB_DATA	0xc8
#else
#define DUMB_DATA	0x80
#endif
#define	DUMB_BRDL	(DUMB_DATA)
#define	DUMB_IER	(DUMB_DATA+1)
#define	DUMB_BRDH	(DUMB_DATA+1)
#define	DUMB_IIR	(DUMB_DATA+2)
#define	DUMB_LCR	(DUMB_DATA+3)
#define	DUMB_MCR	(DUMB_DATA+4)
#define	DUMB_LSR	(DUMB_DATA+5)
#define	DUMB_MSR	(DUMB_DATA+6)
#define	DUMB_SCR	(DUMB_DATA+7)

//==========================================================================
//					Serial EEprom Defines
//==========================================================================
#ifdef THREE_WIRE_EEPROM	// Exel XL93LC66 part for Sinope / Thebe modem
#ifdef PCMCIA
#define EEPROM_CLOCK_BIT		(1<<7)
#else
#define EEPROM_CLOCK_BIT		(1<<0)
#endif
#define EEPROM_CS_BIT			(1<<1)
#define EEPROM_DATA_BIT			(1<<2)
#else
#define EEPROM_DATA_BIT			(1<<0)
#define EEPROM_CLOCK_BIT		(1<<1)
#endif

#if defined( INT_MODEM )
#define ISA_CNTRL_FLAG		(0x55)
#define ISA_PNP_FLAG		(COUNTRY_ID-3)
#define ISA_PNP_CKSUM		(COUNTRY_ID-2)
#define ISA_PNP_LEN			(COUNTRY_ID-1)
#endif

#if !defined( Z80_ASM )	// Compiler only {
//==========================================================================
//			ESCC Variables for the Z80182
//==========================================================================
typedef enum
{
	BR75,				//     75 bps, 0
	BR150,				//    150 bps, 1
	BR300,				//    300 bps, 2
	BR600,				//    600 bps, 3
	BR1200,				//   1200 bps, 4
	BR2400,				//   2400 bps, 5
	BR4800,				//   4800 bps, 6
	BR7200,				//   7200 bps, 7
	BR9600,				//   9600 bps, 8
	BR14400,			//  14400 bps, 9
	BR19200,			//  19200 bps, 10
	BR38400,			//  38400 bps, 11
	BR57600,			//  57600 bps, 12
	BR115200,			// 115200 bps, 13
	BR230400			// 230400 bps, 14
} BAUD_RATE ;

//==========================================================================
//					Plug & Play Variables
//==========================================================================
typedef enum
{
	T0,					// Not actively in COM Enumerator detection sequence
	T1,					// DTR ON; RTS OFF
	T2,					// BOTH DTR & RTS OFF
	T3,					// DTR ON; RTS OFF
	T4					// Sucessful traversal of Enum. Seq, Send ID
} PLUGNPLAY ;

//==========================================================================
//			DMA parameters
//==========================================================================
#define Z80_MAX_HW_DMA			(0x80)
#define Z80_MAX_SW_DMA			(0x08)

#if defined( EXT_MODEM ) // {
//==========================================================================
//			Time Parameters for BREAK
//==========================================================================
# define		BRK_TIME		(300)		// break timer in ms

//==========================================================================
//			Time Parameters for periodic timer
//==========================================================================
//-----------------------------------------------------------------
// Set the time constant for PRT0 (1ms,2ms,4ms,5ms,10ms,..etc)
//-----------------------------------------------------------------
# define	Z80_FAST_TIMER
# if defined( Z80_FAST_TIMER )
#  define PRT0_CNT	(4)
#  define PRT0_TIME	((word)(29491/5))	// 4ms
# else
#  define PRT0_CNT	(20)				// 20ms
#  define PRT0_TIME	((word)(29491))
# endif

//==========================================================================
//			Flow Control Structure
//==========================================================================
typedef enum
{
	FC_OFF,
# if !defined( Z80_EASCI_TX_DMA )
	FC_OFF_TO_ON,	// software flow control only
# endif
	FC_ON
} FLOW_CONTROL;		// DO NOT add any new states without careful review!!!

//==========================================================================
//			Serial Modem State Structure
//==========================================================================
typedef enum
{
	SW_ON_LINE_STATE,
	HW_ON_LINE_STATE,
	WAITING_FOR_ONLINE_STATE,
	INITIAL_STATE
} SERIAL_MODEM_STATE ; // do not reorder - cstrtser.asm depends on this order
#endif	// } EXT_MODEM

#if !defined(CS_MODEM)	// {

# if defined(INT_MODEM) || defined(PCMCIA_MODEM) || defined(USB_MODEM)
typedef enum
{
	FC_OFF,
#  if !defined( Z80_MIMIC_DMA )
	FC_OFF_TO_ON,	// software flow control only
#  endif
	FC_ON
} FLOW_CONTROL;		// DO NOT add any new states without careful review!!!
# endif

extern non_banked void z80_uart_cts_off(void);
extern non_banked void z80_uart_cts_on(void);

// ** llmain.c ********************************
extern non_banked void z80_check_stall(void);
// ********************************************

#endif	// } !CS_MODEM

//==========================================================================
//			Function Prototypes defined in z80 files
//==========================================================================
//----------------------------------------
// functions in z80main.c/z80ser.c
//----------------------------------------
extern non_banked void z80_uart_cd_off ( void ) ;
extern non_banked void z80_uart_cd_on ( void ) ;
extern non_banked void z80_uart_ri_off ( void ) ;
extern non_banked void z80_uart_ri_on ( void ) ;
extern non_banked void z80_uart_dsr_off ( void ) ;
extern non_banked void z80_uart_dsr_on ( void ) ;
extern non_banked void z80_uart_break_on ( void ) ;
extern non_banked void z80_flow_on ( void ) ;
extern non_banked void asci_rx_error ( void ) ;
extern non_banked void asci_ext_int ( void ) ;
extern non_banked void z80_swfc_on ( void ) ;
extern non_banked void z80_swfc_off ( void ) ;
extern non_banked void asci_set_autobaud ( void ) ;
extern non_banked void z80_flow_off ( void ) ;
extern byte z80_PnP_chksum ( void ) ;
extern non_banked void z80_stop_autobaud ( void ) ;
#if defined( PCMCIA_MODEM )
extern word z80_base_adr ( byte ) ;
extern void z80_cis_load ( void ) ;
extern non_banked void Attribute_memory_write ( void ) ;
#endif
#if defined( Z80_EASCI_RX_DMA )
extern non_banked void z80_start_rx_dma ( void ) ;
extern non_banked void z80_stop_rx_dma ( void ) ;
extern non_banked void z80_flush_rx_dma ( void ) ;
#endif
#if defined(EXT_MODEM)
extern non_banked void z80_chk_autobaud ( void ) ;
extern non_banked void z80_start_tx_dma ( void ) ;
extern void z80_chk_isr_chg ( void ) ;
# if defined(Z80_DEBUG_PRINT)
//#  define FRM_HOST_DMA_TEST
//#  define Z80_READ_UART_DEBUG
#  if defined(Z80_READ_UART_DEBUG)
	extern byte dma_test;
	extern void z80_parsechar ( byte ch );
#  endif	// Z80_READ_UART_DEBUG
# endif	// Z80_DEBUG_PRINT
#endif	// EXT_MODEM

//----------------------------------------
// functions in cstartup.asm/cstrtser.asm
//----------------------------------------
#if defined(Z80_DEBUG_PRINT)
extern void fatal_error(char *);
#else
extern non_banked void fatal_error(char *);
#endif
extern non_banked byte ram_test(void);
extern non_banked void prog_timer ( word ) ;
extern non_banked void prog_tcr_reg ( void ) ;
extern non_banked void z80_wait_states ( byte ) ;
extern non_banked void z80_enable_int1 (void) ;
extern non_banked void z80_disable_int1 (void) ;
#if (!defined(EXT_MODEM) && !defined( USB_MODEM )) || defined(PERSEUS)
extern non_banked void Oscr_delay (void) ;
#endif

//----------------------------------------
// functions in z80asm.asm
//----------------------------------------
extern non_banked void z80_jump_abs ( word, byte ) ;
extern non_banked void z80_switch_bank ( byte ) ;
extern non_banked byte z80_current_bank ( void ) ;

//----------------------------------------
// functions in z80dma1.c
//----------------------------------------
extern non_banked void dma_init ( void ) ;
extern non_banked void dma_background ( void ) ;
extern non_banked void z80_dma_readreg ( void ) ;
extern non_banked void dma_interrupt ( void ) ;
extern non_banked void dma_update_reg ( void ) ;

//----------------------------------------
// functions in dpisrv.c
//----------------------------------------
extern non_banked word z80_checksum ( byte ) ;

//----------------------------------------
// functions in z80util.c
//----------------------------------------
extern void easci_baud_rate ( void ) ;
extern word z80_memory ( byte, dsp_ram * ) ;
extern void PnP_identify ( BOOL ) ;
extern void PnP_buildit ( BOOL ) ;
extern void z80_poll_pcmcia ( void ) ;
extern void z80_init_venus2 ( void ) ;
extern void z80_stop_dpll ( void ) ;
extern void z80_start_dpll ( void ) ;

#endif	// } Z80_ASM

#endif	// } MODEM_ARM

#endif	// __Z80_GLOB_H__
