/*name and version number:@(#)v110ltos.h	1.2*/
/*date of get: 		  09/06/00 16:59:37*/
/*date of delta:	  10/21/99 18:52:58*/
/****************************************************************/
/*
(C) Copyright 1991-1998 Link Technology, Inc.  All Rights Reserved Worldwide.

THIS SOFTWARE CONTAINS TRADE SECRETS OF LINK TECHNOLOGY INC.  NO DISCLOSURE,
COPYING OR USE OF WHOLE OR ANY PART THEREOF MAY BE MADE WITHOUT WRITTEN
PERMISSION.

Licensed Material - Program Property of Link Technology, Inc.

THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Link Technology, Inc.
The copyright notice above does not evidence any actual or intended
publication of such source code.
*/
/*
	$Header$

	History:
	$Log$
   
      Rev 1.3   28 Aug 1996 12:13:20   si
   Misc. changes
   
      Rev 1.2   06 Feb 1996 15:25:56   si
   Changed copyright date.
   
      Rev 1.1   21 Aug 1990 17:13:02   jar
   Initial controlled version
*/
/*************************************************************************
**									**
** name		: v110ltos.h						**
** purpose	: LTOS Exec interface definitions 			**
**									**
*************************************************************************/

#ifndef __V110_LTOS_H__
#define __V110_LTOS_H__

/*System process ids*/
#define L2_PROCESS_ID		0		/*Layer 2-LAPD/LAPB*/
#define L2_DASS_PROCESS_ID	1		/*Layer 2-DASS*/
#define L3_Q931_PROCESS_ID	2		/*Layer 3-Q.931 BRI*/
#define L3_PRI_Q931_PROCESS_ID	3		/*Layer 3-Q.931 PRI*/
#define L3_X25_PROCESS_ID	4		/*Layer 3-X.25*/
#define L3_DASS2_PROCESS_ID	5		/*Layer 3-DASS 2*/
#define L3_DPNSS1_PROCESS_ID	6		/*Layer 3-DPNSS 1*/
#define L4_PROCESS_ID		7		/*Layer 4*/
#define L4_X25_PROCESS_ID	8		/*Layer 4-X.25*/
#define MAX_PROCESS_IDS		9
#define L1_PROCESS_ID		127		/*Layer 1 - used for tracking
							owner of buffer*/

extern int current_process;		/* current executing process */

/*System signals*/
#define TIMEOUT_SIGNAL		1	/*Timeout*/
#define L1_TO_L2_SIGNAL		2	/*Layer 1 to Layer 2*/
#define L2_TO_L3_SIGNAL		3	/*Layer 2 to Layer 3*/
#define L3_TO_L2_SIGNAL		4	/*Layer 3 to Layer 2*/
#define NO_BFRS_SIGNAL		5	/*no more buffers*/
#define BFRS_LOW_SIGNAL		6	/*buffer count is below threshold*/
#define BFRS_HI_SIGNAL		7	/*buffer count is above threshold*/
#define ACK_PENDING_SIGNAL	8	/*L2 acknowledgement pending*/
#define L4_TO_L3_Q931_SIGNAL	9	/*Layer 4 to Layer 3-Q.931*/
#define X25_REJ_PENDING_SIGNAL	10	/*X.25 REJect pending*/
#define L4_TO_L3_X25_SIGNAL	11	/*Layer 4 to Layer 3-X.25*/
#define L3_X25_TO_L4_SIGNAL	12	/*Layer 3=X.25 to Layer 4*/
#define X25_ACK_PENDING_SIGNAL	13	/*X.25 acknowledgement pending*/
#define L3_TO_L4_SIGNAL		14	/*Layer 3 to Layer 4*/
#define L4_TO_L3_SIGNAL		15	/*Layer 4 to Layer 3*/
#define L4_READ_DONE_SIGNAL	16	/*Layer 4 read done*/
#define L4_WRITE_DONE_SIGNAL	17	/*Layer 4 write done*/
#define L1_TO_L4_SIGNAL		18	/*Layer 1 to Layer 4*/

#define FLUSH_SIGNAL		255	/*flush signal marker*/

/*event header*/
struct evhdr_s {
	BYTE cnt;		/*number of events*/
	BYTE in;		/*next index to put event in*/
	BYTE out;		/*next index to remove event from*/
};

/*event structure available to process when awakened*/
struct event_s {
	BYTE event;		/*event - any one of the system signals*/
				/*following is event specific context*/
				/* use union to allow for largest context*/
	union event_context_s {
		struct ASI_primitive_s ASI_primitive;
		struct bfr_hdr_s FAR *pbfr;
		struct timer_id_s *ptid;
		struct dce_data_req_s dce_data_req;
		struct dce_data_ind_s dce_data_ind;
		struct dce_unit_data_req_s dce_unit_data_req;
		struct dce_unit_data_ind_s dce_unit_data_ind;
		struct dce_est_req_s dce_est_req;
		struct dce_est_rsp_s dce_est_rsp;
		struct mgmt_error_req_s mgmt_error_req;
		struct mdl_data_ind_s mdl_data_ind;
		struct mdl_unit_data_ind_s mdl_unit_data_ind;
		struct mdl_data_req_s mdl_data_req;
		struct mdl_unit_data_req_s mdl_unit_data_req;
		struct mdl_timeout_req_s mdl_timeout_req;
		struct dl_data_req_s dl_data_req;
		struct dl_unit_data_req_s dl_unit_data_req;
		struct dl_data_ind_s dl_data_ind;
		struct dl_unit_data_ind_s dl_unit_data_ind;
		struct ph_data_req_s ph_data_req;
		struct ph_data_ind_s ph_data_ind;
		struct ph_data_cnf_s ph_data_cnf;
		struct ph_error_ind_s ph_error_ind;
		struct n_connect_req_s n_connect_req;
		struct n_disconnect_req_s n_disconnect_req;
		struct n_data_req_s n_data_req;
		struct n_exp_data_req_s n_exp_data_req;
		struct n_reset_req_s n_reset_req;
		struct n_connect_rsp_s n_connect_rsp;
		struct n_disconnect_rsp_s n_disconnect_rsp;
		struct n_data_rsp_s n_data_rsp;
		struct n_exp_data_rsp_s n_exp_data_rsp;
		struct n_reset_rsp_s n_reset_rsp;
		struct n_connect_ind_s n_connect_ind;
		struct n_disconnect_ind_s n_disconnect_ind;
		struct n_data_ind_s n_data_ind;
		struct n_exp_data_ind_s n_exp_data_ind;
		struct n_reset_ind_s n_reset_ind;
		struct n_connect_cnf_s n_connect_cnf;
		struct n_disconnect_cnf_s n_disconnect_cnf;
		struct n_data_cnf_s n_data_cnf;
		struct n_exp_data_cnf_s n_exp_data_cnf;
		struct n_reset_cnf_s n_reset_cnf;
	} event_context;
};

/*timer related structures*/
struct timer_id_s {
	struct timer_id_s *pnext;	/*next timer id in chain*/
	struct timer_id_s *pprev;	/*previous timer id in chain*/
	BYTE tid_pid;			/*process id who set timer*/
	WORD tid_seconds;		/*timer seconds*/
	BYTE tid_user_tid;		/*user timer id*/
	LWORD tid_misc;			/*miscellaneous user defined data*/
};
struct timer_hdr_s {
	struct timer_id_s *pfirst;	/*first timer id in chain*/
	struct timer_id_s *plast;	/*last timer id in chain*/
	BYTE thdr_cnt;			/*number of timers in chain*/
};

/*LTOS prototypes*/
extern void LTOS_init(void);
extern void LTOS_exit(void);
extern void LTOS_set_timer(struct timer_id_s *ptid);
extern void LTOS_stop_timer(struct timer_id_s *ptid);
extern void LTOS_signal(BYTE pid, BYTE signal, BYTE *pcontext, BYTE context_sz);
extern void LTOS_flush_signals(BYTE pid, BYTE signal, BYTE *pcontext, BYTE context_sz);
extern void LTOS_fatal(BYTE reason, BYTE misc);

/*LTOS Fatal reasons*/
#define FATAL_NO_TIMERS		1	/*no more timers*/
#define FATAL_NO_EVENTS		2	/*no more events*/
#define FATAL_L1_INIT		3	/*Layer 1 initialization*/
#define FATAL_BAD_QUEUE		4	/*bad queue*/
#define FATAL_HEAP_CORRUPTED	5	/*heap corrupted*/
#define FATAL_L4_FAILED		6	/*Layer 4 failed*/

#endif	//  __V110_LTOS_H__
