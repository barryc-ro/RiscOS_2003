/*name and version number:@(#)v_ifp.h	1.6*/
/*date of get: 		  09/06/00 16:59:33*/
/*date of delta:	  05/22/00 13:50:34*/
/*****************************************************************************
** File        : v_ifp.h                                                       *
** Version     : 2.1                                                         *
**---------------------------------------------------------------------------*
** Description :                                                             *
**   Include file for the IFP library - only needs to be included by the     *
** library source file itself.                                               *
**                                                                           *
**---------------------------------------------------------------------------*
**                               HISTORY                                     *
**                                                                           *
**[Release 2]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
** 19th Jan  1999  2.0   RGT  Initial Revision (stubs - negative capability) *
**                                                                           *
** 20th Apr  1999  2.1   RGT  Include file for full blown FAX exchanger      *
**                                                                           *
******************************************************************************/
#if !defined(_IFP_H)
#define _IFP_H

#include <v_xchg.h>


/****************************************************************************
          ####   ###   #   #   ###  #####   ###  #   #  #####  ###
         #      #   #  ##  #  #       #    #   # ##  #    #   #
         #      #   #  # # #   ###    #    ##### # # #    #    ###
         #      #   #  #  ##      #   #    #   # #  ##    #       #
          ####   ###   #   #  ####    #    #   # #   #    #   ####
*****************************************************************************/

	/**************************************************
	** General IFP constants                         **
	***************************************************/
		#define ASSEMBLY_STACK_SIZE 	16
		#define IFP_HDR_LEN				4

	/**************************************************
	** MiBridge Frame Lengths including control word **
	***************************************************/
		#define FRAME_LEN_14_4			60
		#define FRAME_LEN_12			52
		#define FRAME_LEN_9_6			44
		#define FRAME_LEN_7_2			36
		#define FRAME_LEN_4_8			24
		#define FRAME_LEN_2_4			16

	/**************************************************
	**  IFP Exchanger Parameter Limits and Defaults  **
	***************************************************/
		#define IFP_DEFAULT_FRAMES_PER_PKT	5
		#define IFP_MAX_FRAMES_PER_PKT		8

		#define MIN_PAYLOAD				(FRAME_LEN_14_4 + IFP_HDR_LEN)
		#define DEFAULT_MAX_PAYLOAD		(2 * FRAME_LEN_9_6 + IFP_HDR_LEN)

		#define DEFAULT_SLIP_DELAY		8				// 240 msecs
		#define MAX_SLIP_DELAY			40				// 1.2 seconds


/****************************************************************************
                #   #   ###    ####  ####    ###    ###
                ## ##  #   #  #      #   #  #   #  #
                # # #  #####  #      ####   #   #   ###
                #   #  #   #  #      #  #   #   #      #
                #   #  #   #   ####  #   #   ###   ####
*****************************************************************************/

	/*************************************************
	**  MACRO for determining memory availability   **
	**************************************************/
		#define IFP_RX_FREE()			(MAX_PKT_SIZE - V(ifpRxInf).offset)

	/**************************************************
	** MACROS for operating on MiBridge Control Word **
	***************************************************/
		#define MACRO_FAX_SIG_TYPE(a)	((faxSig)(*(lword *)(a) & MAX_WORD))
		#define MACRO_FAX_FRAME_LEN(a)	((byte)((*(lword *)(a)>>16)&MAX_WORD)+4)


/****************************************************************************
            #####  #   #  ####   #####  ####   #####  #####  ###
              #    #   #  #   #  #      #   #  #      #     #
              #     ###   ####   ###    #   #  ###    ###    ###
              #      #    #      #      #   #  #      #         #
              #      #    #      #####  ####   #####  #     ####
*****************************************************************************/

	/*************************************************
	**       MiBridge FAX Frame Signal Types        **
	**************************************************/
		typedef enum {
		    SILENCE = 0x200,   CNG,               CED,
		    V21_FLAGS,         V21_DATA,          V29_9600_DATA,
		    V29_7200_DATA,     V27_4800_DATA,     V27_2400_DATA,
		    V27_ECHO_PROT,     V29_ECHO_PROT,     V17_7200_DATA,
		    V17_9600_DATA,     V17_12K_DATA,      V17_14K4_DATA,
		    V17_ECHO_PROT,     V29_9600_TRAIN,    V29_7200_TRAIN,
		    V27_4800_TRAIN,    V27_2400_TRAIN,    V17_7200_L_TRN,
		    V17_9600_L_TRN,    V17_12K_L_TRN,     V17_14K4_L_TRN,
		    V17_7200_S_TRN,    V17_9600_S_TRN,    V17_12K_S_TRN,
		    V17_14K4_S_TRN,    T30_DCN = 0x21F,   NO_SIGNAL = 0x2FF
		} faxSig;
 

	/*************************************************
	**         IFP Protocol Header Structure        **
	**************************************************/
		typedef struct {
			byte	control;
			word	sequence;
			byte	numFrames;
		} ifpHeader_t;

	/*************************************************
	**      Special Type for Declaring 2D array     **
	**************************************************/
		typedef char (*stkBuffer)[80];

	/*************************************************
	**           IFP Receiver Structure             **
	**************************************************/
		typedef struct {
			frame_t		frmStack[ASSEMBLY_STACK_SIZE];
			packet_t	*pkt;				// Pkt struct for queueing to PNET
			word		sequence;			// Sequence of current packet
			word		lastFrmID;			// ID of prev frame rcvd from DSP
			word		offset;				// data xfer from frm to pkt struct
			word		maxPayload;
			byte		frmsPerPkt;			// MAX # of frames per packet
			byte		frmsIns;			// Holds # frames in crnt pkt
			byte		silenceFrms;		// # sil frames in the crnt packet
			byte		topStack;
		} ifpRxStruct_t;


	/*************************************************
	**          IFP Transmitter Structure           **
	**************************************************/
		typedef struct {
			frame_t		frame;				// passes frms to queueing engine
			byte		buf[100];			// frame extraction buffer
			word		lastFrmID;			// Queue ID of last queued frame
			word		sequence;			// seq # of the rx'd packet
			word		lastSeq;			// Seq # of previous rcvd packet
			word		offset;				// data xfer from pkt to frm struct
			word		txTime;				// relative time between 2 pkts
			faxSig		lastSig;			// the last signal type rcvd
			byte		slipDelay;			// Max allowed jitter comp (frames)
			byte		numFrames;			// holds calcd # frames in rx'd pkt
			Boolean 	initialPkt;			// TRUE for init pkt or codec chng
			Boolean		positiveQueue;		// TRUE if queueing forward in time
			byte		silenceFrms;		// # sil frames in the crnt packet
		} ifpTxStruct_t;
		
#endif	// _IFP_H
