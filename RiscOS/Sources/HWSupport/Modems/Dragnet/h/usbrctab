/*name and version number:@(#)usbrctab.h	1.2*/
/*date of get: 		  09/06/00 16:59:21*/
/*date of delta:	  12/15/98 17:28:21*/
/* usbrctab.h	Sun Jul 20 1997 13:18:55  tmm */

/*

Module:  usbrctab.h

Function:
	Sample header file for use when compiling files produced by
	usbrc.

Version:
	V1.26b	Thu Sep 25 1997 17:21:41 tmm	Edit level 3

Copyright notice:
	This file copyright (C) 1997 by

		Moore Computer Consultants, Inc. ("MCCI")
		3520 Krums Corners Road
		Ithaca, NY  14850

	Distribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions
	are met:

	1. Redistribution of source code must retain the above copyright
	   notice, this list of conditions and the following disclaimer.
	2. MCCI's name may not be used to endorse or promote products
	   derived from this software without specific prior written
	   permission.

Disclaimer:
	THIS FILE IS PROVIDED BY MCCI "AS IS" AND ANY EXPRESS OR
	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	ARE DISCLAIMED.  IN NO EVENT SHALL MCCI BE LIABLE FOR ANY
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
	GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Author:
	Terry Moore, Moore Computer Consultants, Inc.	July 1997

Revision history:
   1.00a  Sun Jul 20 1997 13:18:55  tmm
	Module created.

   1.25b  8/6/1997  tmm
	Don't include stddef.h unless we need null.

   1.26b  9/25/1997  tmm
	Delete the trailing semicolon in the ROOTTAB macro.


*/

#ifndef _USBRCTAB_H_		/* prevent multiple includes */
#define _USBRCTAB_H_

/**** USBRC sometimes emits a bare "NULL", so we need stddef.h ****/
#ifndef USBRCTAB_STDDEF_H
# define USBRCTAB_STDDEF_H	<stddef.h>
#endif

#ifndef NULL
# include USBRCTAB_STDDEF_H
#endif

/****************************************************************************\
|
|	Set defaults for the adjustable parameters.
|
\****************************************************************************/


/* 
|| on some compilers (for tiny machines) you need to specify the
|| storage class.  Here, all we care about is ROM.  By default,
|| we assume that a declaration of const is enough.
*/
#ifndef __USBRCTAB_ROM
# define __USBRCTAB_ROM			/* nothing */
#endif

/*
|| on most compilers, you need to do a lot of "const" decoration if
|| things are really const.  We define it this way to allow it to be
|| overridden if necesary
*/
#ifndef __USBRCTAB_CONST
# define __USBRCTAB_CONST	const
#endif

/*
|| USBRC will generate a table of "other" descriptors.  This is not
|| normally used, so we suppress the generation of the data.
*/
#ifndef __USBRCTAB_WANT_OTHERS
# define __USBRCTAB_WANT_OTHERS 0
#endif

/*
|| sometimes we want pointers, other times we want offsets.  Choose by
|| defining __USBRCTAB_RESPTYPE to 0 for pointers, 1 for uchar, 2 for ushort.
*/
#ifndef __USBRCTAB_RESPTYPE
# define __USBRCTAB_RESPTYPE	0	/* pointers by default. */
#endif

/*
|| Code that uses the tables also wants to use this file, but may
|| not want the namespace polluted by the the generation macros.
|| If __USBRCTAB_TYPESONLY is defined to 1, we'll only define the various
|| structures.
*/ 
#ifndef __USBRCTAB_TYPESONLY
# define __USBRCTAB_TYPESONLY	0	/* everything by default */
#endif

/*
|| If you are using this file from your code, you probably want to do
|| something like this:
||
||	#define	__USBRCTAB_ROM		// whatever is appropriate
||	#define	__USBRCTAB_CONST	// whatever is appropriate
||	#define __USBRCTAB_TYPESONLY	1
||	#include "usbrctab.h"
||
||	typedef struct __USBRCTAB_RESPTR  USBRC_RESPTR;
||	typedef	struct __USBRCTAB_LANGIDPTR USBRC_LANGIDPTR;
||	typedef struct __USBRCTAB_ROOTTABLE USBRC_ROOTTABLE;
||
|| Probably you would put this in your project include file, rather than
|| inserting it into each .c file that needs the resource table; but this
|| is up to you!  Alternately, if you can live with the namespace
|| that is consumed by the USBRC definitions, you can omit TYPESONLY,
|| and use the "-i" switch on usbrc to cause the emitted file to use
|| your project's include file instead of the default.
*/

/****************************************************************************\
|
|	Define macros used for generating the tables.
|
\****************************************************************************/

/*
|| Define the keyword used for creating resource data
*/
#if !__USBRCTAB_TYPESONLY
# define RESCHAR __USBRCTAB_ROM __USBRCTAB_CONST unsigned char
#endif

/*
|| Define the basic resource pointer structure.
*/
struct __USBRCTAB_RESPTR
	{
#if __USBRCTAB_RESPTYPE == 0
	__USBRCTAB_ROM __USBRCTAB_CONST unsigned char	*pDescr;	/* pointer to descriptor */
#elif __USBRCTAB_RESPTYPE == 1
	unsigned char		iDescr;			/* index to descriptor */
#else
	unsigned short		iDescr;			/* index to descriptor */
#endif
	};

/*
|| Declare the macros used by USBRC to create resource tables.
*/ 
#if !__USBRCTAB_TYPESONLY

/* define the macro that creates a resource table */
# define RESPTRS	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_RESPTR

/* define the initializer for a resource table */
# if __USBRCTAB_RESPTYPE == 0
#  define RESPTRVAL(name, offset)		{ (name)+(offset) }
#  define	RESPTR_NULL	((RESCHAR *) 0)
# else
#  define RESPTRVAL(name, offset)	{ (offset) }
#  define RESPTR_NULL		(~0)
# endif /* __USBRCTAB_RESPTYPE */

#endif /* __USBRCTAB_TYPESONLY */


/*
|| Define the structure that holds language mapping information.
*/
struct __USBRCTAB_LANGIDPTR
	{
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_RESPTR *pTable;	/* pointer to table */
	unsigned short	LangId;		/* the language ID */
	unsigned char	NumDescr;	/* number of descriptors */
	};

/*
|| Define the macros used by USBRC to create language mapping tables
*/
#if !__USBRCTAB_TYPESONLY

/* use this macro to declarate a langid table */
# define LANGIDPTRS __USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_LANGIDPTR

/* use this macro to set a value for a language table */
# define LANGPTRVAL(id, n, table) 	{ (table), (id), (n) }

#endif /* !__USBRCTAB_TYPESONLY */

/*
|| Define the structure of the root table
*/
struct __USBRCTAB_ROOTTABLE
	{
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_RESPTR *	pDevTbl;
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_RESPTR *	pConfigTbl;
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_LANGIDPTR * pLangIdTbl;

#if __USBRCTAB_WANT_OTHERS
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_RESPTR *	pOtherTbl;
#endif

	unsigned char				nDevTbl;
	unsigned char				nConfigTbl;
	unsigned char				nLangIdTbl;

#if __USBRCTAB_WANT_OTHERS
	unsigned char				nOtherTbl;
#endif
	};

/*
|| Define the macro used by USBRC to create the root table.
*/

#if !__USBRCTAB_TYPESONLY
# if !__USBRCTAB_WANT_OTHERS
#  define ROOTTABLE(name, dev, ndev, cfg, ncfg, lang, nlang, oth, noth) \
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_ROOTTABLE name = \
		{ \
		(dev), (cfg), (lang), (ndev), (ncfg), (nlang) \
		}
# else /* __USBRCTAB_WANT_OTHERS */
#  define ROOTTABLE(name, dev, ndev, cfg, ncfg, lang, nlang, oth, noth) \
	__USBRCTAB_ROM __USBRCTAB_CONST struct __USBRCTAB_ROOTTABLE name = \
		{ \
		(dev), (cfg), (lang), (oth), (ndev), (ncfg), (nlang), (noth) \
		}
# endif /* __USBRCTAB_WANT_OTHERS */

/* usbrc 1.26b  and later will ask for this */
#define ROOTTABLE_WITH_SEMI(name, dev, ndev, cfg, ncfg, lang, nlang, oth, noth) \
	ROOTTABLE(name, dev, ndev, cfg, ncfg, lang, nlang, oth, noth);

#endif /* !__USBRCTAB_TYPESONLY */

/**** end of usbrctab.h ****/
#endif /* _USBRCTAB_H_ */
