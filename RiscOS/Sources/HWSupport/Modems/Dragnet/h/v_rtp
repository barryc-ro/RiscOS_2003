/*name and version number:@(#)v_rtp.h	1.6*/
/*date of get: 		  09/06/00 16:59:31*/
/*date of delta:	  03/20/00 16:37:15*/
/*****************************************************************************
** File        : v_rtp.h                                                       *
** Version     : 2.2                                                         *
**---------------------------------------------------------------------------*
** Description :                                                             *
**   Include file for the RTP (Voice) exchanger library coded in v_rtp.c.      *
**                                                                           *
**---------------------------------------------------------------------------*
**                               HISTORY                                     *
**                                                                           *
**[Release 2]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
** 25th Jan  1999  2.0   RGT  Initial Revision                               *
**                                                                           *
** 20th Apr  1999  2.1   RGT  Added txTime structure for queueing and jitter *
**                            calculations, removed positiveQueue element.   *
**                            Also added ssrc element to tx struct so that   *
**                            we can detect if the ssrc changes during a call*
**                                                                           *
** 5th  May  1999  2.2   RGT  Added in buildout element to the tx structure. *
**                            Removed jitter Min/Max and lastSeq elements.   *
**                            Finally, added jTimer element for controlling  *
**                            buildout reductions. All these changes were    *
**                            made for the dynamic buildout functionality    *
**                            in non-silence suppression mode.               *
**                                                                           *
******************************************************************************/

#if !defined(_RTP_H)
#define _RTP_H

/****************************************************************************
          ####   ###   #   #   ###  #####   ###  #   #  #####  ###
         #      #   #  ##  #  #       #    #   # ##  #    #   #
         #      #   #  # # #   ###    #    ##### # # #    #    ###
         #      #   #  #  ##      #   #    #   # #  ##    #       #
          ####   ###   #   #  ####    #    #   # #   #    #   ####
*****************************************************************************/

		/***********************************************
		** RTP header Masks and constants              *
		************************************************/
			#define BASIC_RTP_HEADER_LENGTH	12
			#define RTP_OCTET1				0x80
			#define RTP_MASK_MARKER			0x80
			#define RTP_MASK_VERSION		0xC0
			#define RTP_MASK_EXTENSION		0x10
			#define RTP_MASK_CSRCS			0x0F

		/***********************************************
		** RTP Payload type definitions                *
		************************************************/
			#define	PT_PCMU					0
			#define PT_G723					4
			#define PT_PCMA					8
			#define PT_G729					18
			#define PT_PROMPT_START			25
			#define PT_PROMPT_STOP			26

		/***********************************************
		** Compander type constants                    *
		************************************************/
			#define V_U_LAW					0
			#define V_A_LAW					1

		/***********************************************
		** General System Configuration Parameters     *
		************************************************/
			#define VOICE_PROMPT_DELAY		2		// 20 msecs
			#define RTP_MAX_FRAMES_PER_PACKET	CFG_MAX_FRAMES_PER_PACKET
			#define RTP_DEFAULT_FRAMES_PER_PKT	2
			#define MIN_JITTER_DELAY		1
			#define MAX_JITTER_DELAY		(5*RTP_MAX_FRAMES_PER_PACKET)
			#define DEFAULT_JITTER_DELAY	(5*RTP_DEFAULT_FRAMES_PER_PKT)

			// Error checks on settings
			#if (RTP_DEFAULT_FRAMES_PER_PKT	> CFG_MAX_FRAMES_PER_PACKET)
				#error "RTP_DEFAULT_FRAMES_PER_PKT must be <= CFG_MAX_FRAMES_PER_PACKET"
			#endif

			#if ( MAX_JITTER_DELAY >= CFG_CAML_TX_LUT_SZ )
				#error "MAX_JITTER_DELAY must < CFG_CAML_TX_LUT_SZ"
			#endif

/****************************************************************************
                #   #   ###    ####  ####    ###    ###
                ## ##  #   #  #      #   #  #   #  #
                # # #  #####  #      ####   #   #   ###
                #   #  #   #  #      #  #   #   #      #
                #   #  #   #   ####  #   #   ###   ####
*****************************************************************************/

/****************************************************************************
            #####  #   #  ####   #####  ####   #####  #####  ###
              #    #   #  #   #  #      #   #  #      #     #
              #     ###   ####   ###    #   #  ###    ###    ###
              #      #    #      #      #   #  #      #         #
              #      #    #      #####  ####   #####  #     ####
*****************************************************************************/

		/***********************************************
		** RTP Header structure                        *
		************************************************/
			typedef struct {
				byte	vpxcc;		// version, padding, extension, CSRC count
				byte	pt;			// payload type
				word	sequence;	// sequence number
				lword	timestamp;	// timestamp
				lword	ssrc;		// synchronising source
			} rtpHeader_t;

		/***********************************************
		** RTP Receive Library state info structure    *
		************************************************/
			typedef struct {
				lword		syncSrc;			// "Our" Sync src (random)
				lword		timestamp;			// Timestamp of new packet
				word		sequence;			// Sequence of new packet
				word		lastFrmID;			// ID of prev frm from DSP
				byte		frmsPerPkt;			// MAX # frames per packet
				byte		frmsIns;			// # frms inserted in crnt pkt
				byte		compander;			// compander type 
				word		offset;				// data index
				codecType	codec;				// codec type of the frame
				Boolean		sentCNG;			// CNG has been sent
				Boolean		talkSpurt;			// Talk-spurt, set marker
				packet_t	*pkt;				// Pkt struct for queue to PNET
			} rtpRxStruct_t;


		/***********************************************
		** RTP Transmit Library state info structure   *
		************************************************/
			typedef struct {
				byte		buildout;	// The buildout delay in frames
				Boolean		marker;		// Talk spurt indicator
				Boolean		gotCNG;		// CNG frame present in pkt
				Boolean 	initialPkt;	// 1st pkt or VP start/stop
				Boolean		positiveQueue;
				frame_t		frame;		// extracts frames from rx'd pkt
				byte		numFrames;	// calculated # frms in rx'd pkt
				byte		lastPT;		// last payload type received
				word		lastFrmID;	// ID of the last queued frame
				word		sequence;	// Extracted seq # of rx'd pkt
				word		offset;		// data index
				word		txTime;		// transmit time between rcvd pkts
				word		jTimer;		// for dyn bldout in non sil-supp mode
				lword		timestamp;	// Extracted timestamp 
				lword		lastTS;		// Timestamp of last rx'd pkt
				lword		syncSrc;	// Sync source of the sender
			} rtpTxStruct_t;
		

#endif // _RTP_H
