/*name and version number:@(#)radish.h	1.28*/
/*date of get: 		  09/06/00 16:59:22*/
/*date of delta:	  10/25/99 15:01:54*/
//*****************************************************************************
// File :  radish.h
// Description :
//        Contains all declarations that are used by VoiceView protocol.
//
// Revision History :
//        Initials        Date            Change
//        Eli             9/30/94        Initial
//*****************************************************************************
#ifndef __RADISH_H__
#define __RADISH_H__

#if defined( RADISH )
//-----------------------------------------------------------------------------
//  atradish.c
//-----------------------------------------------------------------------------
#define  NUM_RADISH_CMDS                   21
#define  SPACE                            0x20
#define  COMMA                            0x2C
#define  COLON                            0x3A
#define  SLASH                            0x2F

//  RADISH command definitions
#define  AT_SVV                           0
#define  AT_SAC                           1
#define  AT_SIP                           2
#define  AT_SIC                           3
#define  AT_SSQ                           4
#define  AT_SDA                           5
#define  AT_SFX                           6
#define  AT_SRM                           7
#define  AT_SEM                           8
#define  AT_SMT                           9
#define  AT_SQR                           10
#define  AT_SCD                           11
#define  AT_SER                           12
#define  AT_SSP                           13
#define  AT_SSR                           14
#define  AT_SOR                           15
#define  AT_SNO                           16
#define  AT_SDT                           17
#define  AT_STM                           18
#define  AT_STT                           19
#define  AT_SDS                           20
#define  NO_MATCH                         0xFF



// default values for the various parameters.


#define  SNO_DEFAULT_VAL                  5
#define  SNO_RANGE	                  "(0-255)"

#define  SOR_DEFAULT_VAL                  0
#define  SOR_RANGE	                  "(0,1)"

#define  SQR_DEFAULT_VAL                  0
#define  SQR_RANGE 	                  "(0,1)"

#define  SSR_DEFAULT_VAL                  1
#define  SSR_RANGE	                  "(0,1)"

#define  STT_DEFAULT_VAL                  0
#define  STT_RANGE	                  "(0,1)"

#define  SDS_DEFAULT_VAL                  1
#define  SDS_RANGE	                  "(0,1)"

#define  SER_DEFAULT_VAL                  0

#define  BURST_SPEED_DEFAULT              0
#define  RECOVERY_SPEED_DEFAULT           1
#define  PRIORITY_SPEED_DEFAULT           2

#define  SSP_RANGE                        "((0),(1-2),(1-2))"
#define  SDT_RANGE	                  "(000101,991231)"
#define  STM_RANGE	                  "(0000,2359)"


//-----------------------------------------------------------------------------
// Capabilities: upper 2 bits of capability type identifier
//-----------------------------------------------------------------------------
#define  SINGLE_FORMAT        0x0       // single-byte capabilities element
#define  DOUBLE_FORMAT        0x1       // double-byte capabilities element
#define  TRIPLE_FORMAT        0x2       // triple-byte capabilities element
#define  VAR_FORMAT           0x3       // variable-length capabilities element


//-----------------------------------------------------------------------------
// Capabilities: capability type identifier
//-----------------------------------------------------------------------------
#define  MODEM_MODE          0x01    // modem mode supported
#define  FAX_MODE            0x02    // fax mode supported
#define  VOICE_VIEW_MODE     0x04    // VoiceView mode supported
#define  ADSI_SERVER_MODE    0x08    // ADSI server mode supported
#define  ADSI_CPE_MODE       0x09    // ADSI CPE mode supported
#define  PROPRIETARY_MODE    0x3f    // proprietary mode supported
#define  CAP_TYPE            0x3f    // lower 6 bits of first cap element


//-----------------------------------------------------------------------------
// Capabilities: VoiceView data mode options
//-----------------------------------------------------------------------------
#define  DTE_INTRFACE_OPT     1
#define  MSG_STORAGE_OPT      2
#define  V29_4800_OPT         4
#define  V17_7200_OPT         8
#define  V17_9600_OPT         0x10
#define  V17_12000_OPT        0x20
#define  V17_14400_OPT        0x40
#define  VV_RESERVED_OPT      0x80
//-----------------------------------------------------------------------------
// Capabilities: modem data mode options
//-----------------------------------------------------------------------------
#define	RADISH_V32		0x01
#define RADISH_V32BIS		0x02
#define	RADISH_V32TERBO		0x04
#define	RADISH_V34		0x08
#define	RADISH_VFC		0x10

#define  RADISH_VV_MODE_ID		(DOUBLE_FORMAT<<6)|VOICE_VIEW_MODE
#define  RADISH_MODEM_MODE_ID		(DOUBLE_FORMAT<<6)|MODEM_MODE
#define  RADISH_VV_MODE_DFLT		DTE_INTRFACE_OPT //|V17_7200_OPT|V17_9600_OPT|V17_12000_OPT|V17_14400_OPT
#define  RADISH_MODEM_MODE_DFLT		RADISH_V32|RADISH_V32BIS|RADISH_V32TERBO

					//{UI frame type, struct. len., data....data}
					//MUST CHANGE SCD_DEFAULT_LEN ALSO!!!!!!!!!!!!!!!!!!!!!!!!
#ifdef DSVD
#define  SCD_DEFAULT			{0x05,0x07,RADISH_VV_MODE_ID,RADISH_VV_MODE_DFLT,\
					RADISH_MODEM_MODE_ID,RADISH_MODEM_MODE_DFLT,\
					FAX_MODE, 0x50, 0x06, '\0'}	// set DSVD bits
#define  SCD_DEFAULT_LEN		10
#else
#define  SCD_DEFAULT			{0x05,0x05,RADISH_VV_MODE_ID,RADISH_VV_MODE_DFLT,\
					RADISH_MODEM_MODE_ID,RADISH_MODEM_MODE_DFLT,\
					FAX_MODE,'\0'}
#define  SCD_DEFAULT_LEN		8
#endif
#define  SCD_DATA_SIZE                    255   // size in chars of capability data.
typedef struct
{
  char *verbose;          // radish command
  byte  numeric;          // numeric value
} RADISH_CMD;


//-----------------------------------------------------------------------------
// Mode Indicator 1st byte
//-----------------------------------------------------------------------------
#define  V21_300_MI_B1     0x01
#define  VV_MI_B1          0x02
#define  OTHER_MI_B1       0x10
#define  MODEM_DMODE_MI_B1 0x10
#define  FAX_DMODE_MI_B1   MODEM_DMODE_MI_B1

//-----------------------------------------------------------------------------
// Mode Indicator 2nd byte
//-----------------------------------------------------------------------------
#define  V21_300_MI_B2     0x00
#define  V27TER_4800_MI_B2 0x01
#define  V29_9600_MI_B2    0x02
#define  V29_4800_MI_B2    0x03
#define  V17_7200_MI_B2    0x04
#define  V17_9600_MI_B2    0x05
#define  V17_12000_MI_B2   0x06
#define  V17_14400_MI_B2   0x07
#define  FAX_DMODE_MI_B2   0x01
#define  MODEM_DMODE_MI_B2 0x00

#define  MAX_NUM_OF_RETRANS  2
// mah 10/25/99 - changed size of lapm frames
//#define  MAX_NUM_OF_OCTETS   ALLOC_TX_FRAME_SIZE-3       // 254-3
#define  MAX_NUM_OF_OUTSTANDING_I_FRAMES	ALLOC_NO_OF_TX_FRAMES

#define  RR_COUNT_MAX      4          // max num of RR trans in RNR recovery mode.

// macros
//#cf 03-feb-95 start...gfh reversed logic
#define  ConnectPhone()       ( x_output(IO_DV_RLY_OFF) )
#define  DisconnectPhone()    ( x_output(IO_DV_RLY_ON) )
//#cf 03-feb-95 end...gfh reversed logic
#define  ConnectSpeaker()     ( x_output(IO_AUDIO_CODEC_ON) )
#define  DisconnectSpeaker()  ( x_output(IO_AUDIO_CODEC_OFF) )
#define  ActivateCid()        ( x_output(IO_CALLER_ID_ON) )
#define  DeactivateCid()      ( x_output(IO_CALLER_ID_OFF) )


// dpradish
// Radish start tones for 7.2 KHz sampling rate.

#define  CAS_TONE             1
#define  START_TONE           2
#define  START_TONE_DURATION  200      // start tone duration=190ms
#define  START_TONE_LEVEL     13       // start tone level= -13dBm
#define  ANS_TONE_DURATION    3000     // answer tone duration (3 sec)
#define  ANS_TONE_LEVEL       13       // answer tone level is -13 dBm
#define  CAS_TIMEOUT          250
#define  V21_TIMEOUT          405

#define  F2312_5S   0x39b5             // 2312.5 Hz start tone
#define  F2312_5C   0xe451
#define  F2912_5S   0x2423             // 2912.5 Hz start tone
#define  F2912_5C   0xcb2c
#define  F2130_0S   0x3d5d             // 2130 Hz  ADSI CAS tone
#define  F2130_0C   0xedd2
#define  F2750S     0x2b3d             // 2750 Hz  ADSI CAS tone
#define  F2750C     0xd0cf
#define  F628S      0x2158             // 628 Hz Answer tone
#define  F628C      0x36a1


#define  U_PF       0x10               // poll/final bit in Unnumbered frames.
#define  PF         0x01               // poll/final bit in Supervisory and I frames.
#define  CR         0x02               // C/R bit in the address field

#define  EMPTY_FRM  0xFE
#define  DISC_FRM   0x43
#define  UA_FRM     0x63

#define  T200       2000               // 2  seconds
#define  T203       15000              // 15 seconds
#define  T301       2000               // 2  seconds
#define  T303       15000              // 15 seconds
#define  T310       1000               // 1  seconds
#define  N200       MAX_NUM_OF_RETRANS // max number of retransmissions.
// mah 10/25/99 - changed size of lapm frames
//#define  N201       MAX_NUM_OF_OCTETS  // max num of octets in an info field.
#define  K          MAX_NUM_OF_OUTSTANDING_I_FRAMES

// terminating characters
#define  DLE        0x10
#define  CAN        0x18
#define  ETX        0x03
#define  ETB        0x17
#define  EOT        0x04
#define  ESC        0x1B


//-----------------------------------------------------------------------------
//  Error Codes
//-----------------------------------------------------------------------------
// General Error codes
#define  NO_ERROR                            0x00
#define  UNRECOGNIZED_CMD                    0x81
#define  UNSUPPORTED_PARAMETER               0x82
#define  CANT_INIT_DMODE_SWITCH_ONHOOK       0x83
#define  INVALID_CAP_INFO                    0x84
#define  CANT_INIT_CAP_QUERY                 0x85
#define  NO_DATA_AVAIL_FOR_DTE               0x86
#define  CANT_INIT_DMODE_MSG_SYS_ACTIVE      0x87
#define  CANT_INIT_DMODE_CAP_INACTIVE        0x89

// IO Error Codes
#define  SEND_SEQ_ERROR                      0x41
#define  RECEIVE_SEQ_ERROR                   0x42
#define  UNEXPECTED_DISC_RXD                 0x43
#define  MAX_RETRANS_EXCEEDED                0x44
#define  MAX_OCTETS_EXCEEDED                 0x45
#define  MAX_I_FRAMES_EXCEEDED               0x46

// Timing Error Codes
#define  TIMEOUT_VALID_DFRAME                0x23
#define  INACTIVITY_TIMEOUT_IN_AA_STATE      0x24
#define  TIMEOUT_RESP_TO_CAP_QUERY           0x25
#define  TIMEOUT_RESP_TO_CAP_EXCHANGE_REQ    0x26
#define  TIMEOUT_FAR_END_RESP_TO_DMODE_START 0x27
#define  TIMEOUT_FAR_END_REMOVE_FLOW_CTL     0x28
#define  TIMEOUT_DATA_FROM_DTE               0x29
#define  TIMEOUT_IO_TX_FRAME                 0x2A
#define  TIMEOUT_RESP_FROM_DTE_AFTER_EVENT   0x2B

// AT Error Codes
#define  INVALID_TERMINATOR_CHAR             0x11


//-----------------------------------------------------------------------------
// Mode Indicator types
//-----------------------------------------------------------------------------
enum
{
    VV_V21_300,             // 0
    VV_V27TER_4800,         // 1
    VV_V29_9600,            // 2
    VV_V29_4800,            // 3
    VV_V17_7200,            // 4
    VV_V17_9600,            // 5
    VV_V17_12000,           // 6
    VV_V17_14400,           // 7
    VV_MODEM,               // 8
    VV_FAX,                 // 9
    NUM_OF_MODE_INDICATORS
};


// global variables
typedef enum
{
   RADISH_TX_CAP,			//0
   RADISH_RX_CAP,			//1
   RADISH_TX_MODE_IND,			//2
   RADISH_RX_MODE_IND,			//3
   RADISH_TX_DISC,			//4
   RADISH_TX_DISC_ERROR_OUT,		//5
   RADISH_TX_UA,			//6
   RADISH_TX_UA_DATA_MODE_RESPONSE,	//7
   RADISH_TX_RR,			//8
   RADISH_TX_RNR,			//9
   RADISH_TX_DATA,			//A
   RADISH_RETRANSMIT,			//B
   RADISH_RX_DATA,			//C
   RADISH_RX_RNR_RECOVERY,		//D
   RADISH_WAIT_FOR_ACK,			//E
   RADISH_WAIT_FOR_ATSAC_CMD,		//F
   RADISH_WAIT_FOR_DISC_FRAME,		//10
   RADISH_TX_RR_AND_TX_MODE_IND,	//11
   RADISH_TX_RR_AND_WAIT_FOR_DISC,	//12
   RADISH_TX_RR_AND_WAIT_FOR_MODE_IND,	//13
   RADISH_TX_DISC_AND_SEND_EOT_TO_DTE,	//14
   RADISH_WAIT_FOR_DATA_MODE_RESPONSE,	//15
   RADISH_TX_DISC_AND_GET_OUT,		//16
   RADISH_TX_DISC_ERROR_OUT_WAIT_EOT,	//17
   RADISH_TX_LONG_CAP,			//18
   RADISH_NULL,				//19
   RADISH_OFF
}RADISH_STATE;
extern RADISH_STATE x_radish_state;

// VoiceView Transmission Speeds.
typedef struct
{
  word Burst     : 3;
  word Recovery  : 3;
  word Priority  : 3;
}TRANS_SPEED;

typedef struct
{
  byte year;
  byte month;
  byte day;
}DATE;

typedef struct
{
  byte hour;
  byte minute;
}TIME;

typedef struct
{
  byte QueryResponseControl;
//  byte TransactionToneControl;
  byte SequenceResponseControl;
  byte ErrorReport;
  byte SwitchhookStatus;
  byte ScdData[SCD_DATA_SIZE];
  byte ScdModulation;
  TRANS_SPEED TxSpeed;
#ifdef RADISH_MESSAGE
  byte RejectOverflowMessages;
  byte NotificationTimer;
  DATE date;
  TIME time;
#endif
  byte PhoneMuteControl;
}RADISH_OPTIONS;
extern RADISH_OPTIONS RadishOptions;


typedef enum
{
  NUL,
  DLE_CAN,
  DLE_ETX,
  DLE_ETB,
  DLE_EOT,
  DLE_ESC,
  DLE_DLE
}TERMINATION_CHAR;
extern TERMINATION_CHAR Tx_TermChar;
extern TERMINATION_CHAR Rx_TermChar;
extern TERMINATION_CHAR AltLink;


typedef enum
{
	RADISH_STATUS_IDLE,
	RADISH_STATUS_DATA
}RADISH_STATUS;
extern RADISH_STATUS x_radish_status;

typedef enum
{
  VV_FAX_300,
  VV_FAX_4800,
  VV_FAX_9600,
  VV_V17_FAX_7200 = 4,
  VV_V17_FAX_9600,
  VV_V17_FAX_12000,
  VV_V17_FAX_14400
}RADISH_RATE;
extern RADISH_RATE x_radish_rate;


//-----------------------------------------------------------------------------
// VoiceView Events
//-----------------------------------------------------------------------------
typedef enum
{
  EV_CAN,                  // notify host to stop transmitting data
  EV_EOT,                  // response to a DLE_CAN event from the DTE
  EV_SSV,                  // VV data mode start sequence event
  EV_SMD,                  // MODEM data mode start sequence event
  EV_SFA,                  // FAX data mode start sequence event
  EV_SRA,                  // Receive ADSI response event
  EV_SRQ,                  // Receive Capabilities Query event
  EV_SRC,                  // Receive Capabilities Information event
  EV_STO,                  // Talk-off event.
  EV_SVM                   // VV message available. (Used only if message storage
}RADISH_EVENT;             // is implemented)

//-----------------------------------------------------------------------------
// Mode Indicator structure
//-----------------------------------------------------------------------------
typedef struct
{
  byte byte1;        // 1st octet of Mode Indicator
  byte byte2;        // 2nd octet of Mode Indicator
  byte supported;    // indicates whether this mode is supported.
}MODE_INDICATOR_TYPE;
extern MODE_INDICATOR_TYPE ModeInd[NUM_OF_MODE_INDICATORS];


extern byte at_sac_rcvd;
extern byte at_ssq_rcvd;
extern byte at_svv_rcvd;
extern byte at_sda_rcvd;
extern byte at_sfx_rcvd;
extern byte at_sac_executed;
extern byte radish_last_tx_char;
extern byte radish_last_rx_char;
extern byte RadishSentFirstBlock;
extern byte RadishRcvFirstBlock;

extern byte FrameCount;
extern byte RcvFrameCount;
extern byte TransmitBlock;
extern byte RnrRecovery;
extern byte RrCount;
extern byte dte_rcv_str[2];
extern byte retransmit;

extern void InitIoRadishState(void);
extern byte ProcessModeInd(byte *DataSpeed);
extern void ReportCap(void);
extern void RadishRxHdlcFrame(void);
extern byte RadishRxFrameType(void);
extern byte ProcessIFrame(void);
extern byte RcvdEventFromDte(TERMINATION_CHAR event);
extern void SwitchToVoice(void);

#define NUMBER_OF_RADISH_PRG_PARAMS	25
typedef struct
{
	word	ThreshHold1;			//0
	word	ThreshHold2;			//1
	word	ThreshHold3;			//2
	word	ThreshHold4;			//3
	word	ThreshHold5;			//4
	word	ThreshHold6;			//5
	word	Balance;			//6
	word	FilterConstant1;		//7
	word	FilterConstant2;		//8
	word	FilterConstant3;		//9
	word	FilterConstant4;		//A
	word	FilterConstant5;		//B
	word	FilterConstant6;		//C
	word	FilterConstant7;		//D
	word	FilterConstant8;		//E
	word	FilterConstant9;		//F
	word	FilterConstant10;		//10
	word	FilterConstant11;		//11
	word	FilterConstant12;		//12
	word	FilterConstant13;		//13
	word	XmtStartToneDuration;		//14
	word	XmtCASToneDuration;		//15
	word	RcvStartToneDuration;		//16
	word	MaxNoise1;			//17
	word	MaxNoise2;			//18
}RADISH_PROGRAM_PARAMS;

typedef union
{
	RADISH_PROGRAM_PARAMS	RadishProgramParams;
	word	RadishProgramData[NUMBER_OF_RADISH_PRG_PARAMS];
}	RADISH_PROGRAM_STRUCT;

#define  RADISH_RX_FRAME_SIZE   259           // 256+3
typedef enum
{
  RADISH_RX_FRAME_STATUS_EMPTY,
  RADISH_RX_FRAME_STATUS_FULL,
  RADISH_RX_FRAME_STATUS_IN_PROGRESS,
  RADISH_RX_FRAME_STATUS_ERROR,
  RADISH_RX_FRAME_STATUS_LONG
}RADISH_RX_FRAME_STATUS;
typedef struct
{
  RADISH_RX_FRAME_STATUS status ;
  word	len ;
  byte	data [ RADISH_RX_FRAME_SIZE ] ;
}RADISH_RX_FRAME ;
extern RADISH_RX_FRAME RadishRxFrame;

typedef enum
{
   IO_RADISH_TX_CAP,				//0
   IO_RADISH_WAIT_FOR_END_TX_CAP,		//1
   IO_RADISH_RX_CAP,				//2
   IO_RADISH_TX_MODE_IND,			//3
   IO_RADISH_WAIT_FOR_END_TX_MODE_IND,		//4
   IO_RADISH_RX_MODE_IND,			//5
   IO_RADISH_PROCESS_MODE_IND,			//6
   IO_RADISH_TX_RESPONSE,			//7
   IO_RADISH_WAIT_FOR_END_TX_RESPONSE,		//8
   IO_RADISH_TX_DATA,				//9
   IO_RADISH_WAIT_FOR_END_TX_DATA,		//A
   IO_RADISH_RNR_RECOVERY,			//B
   IO_RADISH_RETRANSMIT,			//C
   IO_RADISH_WAIT_FOR_ACK,			//D
   IO_RADISH_RX_DATA,				//E
   IO_RADISH_RX_RNR_RECOVERY,			//F
   IO_RADISH_RX_PROCESS_TERM_CHAR_AND_POLL,	//10
   IO_RADISH_WAIT_FOR_DISC_FRAME,		//11
   IO_RADISH_WAITING_FOR_RESP_FROM_HOST,	//12
   IO_RADISH_WAIT_FOR_SILENCE,			//13
   IO_RADISH_WAIT_FOR_CARRIER_LOSS,		//14
   IO_RADISH_WAIT_FOR_ATSAC_CMD,		//15
   IO_RADISH_ATSAC_CMD_RCVD,			//16
   IO_RADISH_RETURN_TO_VOICE_FROM_DATA_MODE,	//17
   IO_RADISH_UPDATE_RETRANSMIT_VALUE,		//18
   IO_RADISH_ERROR_RETURN_TO_VOICE,		//19
   IO_RADISH_WAIT_FOR_DATA_MODE_RESPONSE,	//1A
   IO_RADISH_DISCONNECT,			//1B
   IO_RADISH_DISC_CAN,				//1C
   IO_RADISH_TX_LONG_CAP,			//1D
   IO_RADISH_NULL				//1E
}IO_RADISH_STATE;
extern IO_RADISH_STATE  IoRadishState;
typedef enum
{
	UNSUPPORTED_MODE_IND,
	VALID_MODE_IND,
	NON_ACTIVE_MODE_IND
}MODE_IND_RESULT;

#endif	// if defined( RADISH )

// VV_MODE is used (for V.80) even when RADISH isn't defined.
// mah - moved here 10/02/98
#define  VV_MODE    0x2000             // set bit 13 in C/S RAM 0x39

#endif	// __RADISH_H__
