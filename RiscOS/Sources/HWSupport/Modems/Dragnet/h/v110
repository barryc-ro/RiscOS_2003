/*name and version number:@(#)v110.h	1.2*/
/*date of get: 		  09/06/00 16:59:36*/
/*date of delta:	  10/21/99 18:52:09*/
/****************************************************************/
/*
(C) Copyright 1996-1998 Link Technology, Inc.  All Rights Reserved Worldwide.

THIS SOFTWARE CONTAINS TRADE SECRETS OF LINK TECHNOLOGY INC.  NO DISCLOSURE,
COPYING OR USE OF WHOLE OR ANY PART THEREOF MAY BE MADE WITHOUT WRITTEN
PERMISSION.

Licensed Material - Program Property of Link Technology, Inc.

THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Link Technology, Inc.
The copyright notice above does not evidence any actual or intended
publication of such source code.
*/
/*
	$Header$

	History:
	$Log$
*/
/*************************************************************************
**									**
** name		: v110.h						**
** purpose	:  V.110 Definitions					**
**									**
*************************************************************************/

#ifndef __V110_H__
#define __V110_H__


/* V110Control is the data structure that contains the V.110 channel
	information and is shown in the following C structure: */
typedef struct v110control_tag_s {
	BOOLEAN bOpen;			/* Open flag */
	WORD uState;			/* Channel state */
#define V110_STATE_UNINITED		0	/* Uninitialized */
#define V110_STATE_IDLE			1	/* Idle */
#define V110_STATE_AWAIT_SYNC		2	/* Awaiting synchronization */
#define V110_STATE_AWAIT_STATUS_BITS	3	/* Awaiting status S/X bits ON */
#define V110_STATE_DATA_XFER		4	/* Data transfer */
#define V110_STATE_RESYNC		5	/* Resynchronizing */
#define V110_STATE_DISCO_PENDING	6	/* Disconnect pending */
	WORD uILLastError;		/* Last V.110 error */
	WORD uChannel;			/* Channel # */
	WORD uRate;			/* Channel rate */
	WORD uRA2Rate;			/* RA2 intermediate rate */
#define V110_RA2_8K		0
#define V110_RA2_16K		1
#define V110_RA2_32K		2
#define V110_RA2_NONE		4
	WORD uEbits;			/* E-bits to use for 19200 and lower */
#define V110_EBITS_600		0x02
#define V110_EBITS_1200		0x04
#define V110_EBITS_2400		0x06
#define V110_EBITS_3600		0x09
#define V110_EBITS_4800		0x0c
#define V110_EBITS_12000	0x08
#define V110_EBITS_NONE		0x0e
	WORD uCbits;			/* C-bits to use for NIC when supported */
	WORD uE7bit;			/* E7 bit to use for 600 MF support */
	WORD uSyncAsync;		/* Sync or async identifier */
	WORD uDTEDCE;			/* DTE or DCE side */
	WORD uStopBits;			/* # stop bits */
	WORD uDataBits;			/* # data bits - currently always 8 */
	WORD uTimer_T1_Value;		/* T1 timer value in ticks */
	WORD uTimer_Resync_Value;	/* Resync timer value in ticks */
	WORD uN_Value;			/* N bit count */
	WORD uNumBytesChecked;		/* # bytes checked while searching for
						framing */
					/* Build V.110 transmit frames here */
	BYTE ucXmtFrameData[V110_FRAME_SIZE_BYTES];
	BYTE ucXmtFrameByteCnt;		/* # bytes of XmtFrameData */
	BYTE ucXmtBitCount;		/* Bit count of current serial byte */
	BYTE ucCurrentXmtByte;		/* Currently constructed xmt byte */
	BYTE ucRcvFrameErrors;		/* Counts rcvd framing errors */
	BYTE ucConsecutiveFrameErrors;	/* Counts consecutive errant frames */
					/* Store V.110 receive frames here */
	BYTE ucRcvFrameData[V110_FRAME_SIZE_BYTES];
	BYTE ucRcvFrameByteCnt;		/* # bytes of RcvFrameData */
#define V110_RA2_MAX_BYTES	8	/* Max # of RA2 bytes per RA1 byte */
					/* Store V.110 RA2 adapted xmt data */
	BYTE ucXmtRA2Data[(V110_FRAME_SIZE_BYTES)*(V110_RA2_MAX_BYTES)];
	BYTE ucXmtS1;			/* S1 bit to xmt */
	BYTE ucXmtX1;			/* X (first) bit to xmt */
	BYTE ucXmtS3;			/* S3 bit to xmt */
	BYTE ucXmtS4;			/* S4 bit to xmt */
	BYTE ucXmtS6;			/* S6 bit to xmt */
	BYTE ucXmtX2;			/* X (second) bit to xmt */
	BYTE ucXmtS8;			/* S8 bit to xmt */
	BYTE ucXmtS9;			/* S9 bit to xmt */
					/* Store rcvd V.110 RA2 data */
	BYTE ucRcvRA2Data[(V110_FRAME_SIZE_BYTES)*(V110_RA2_MAX_BYTES)];
	BYTE ucRcvRA2DataByteCnt;	/* # bytes of ucRcvRA2Data */
					/* RA2 controls */
	BOOLEAN bRcvFrameValid;		/* Valid frame in rcv buffer */
	BOOLEAN bRcvFrameValidCnt;	/* Count of rcvd valid frames for disconnect */
	BYTE ucMask;			/*   RA2 octet mask */
	BYTE ucBitsPerOctet;		/*   # of bits per RA2 octet */
	BYTE ucCycles;			/*   # of RA1 bytes needed per RA2 octet */
/* Last conditions of the following circuits are stored here */
	BYTE ucCircuit105_RTS;		/* Circuit 105 - RTS value */
	BYTE ucCircuit106_CTS;		/* Circuit 106 - CTS value */
	BYTE ucCircuit107_DSR;		/* Circuit 107 - DSR value */
	BYTE ucCircuit108_DTR;		/* Circuit 108 - DTR value */
	BYTE ucCircuit109_RLSD;		/* Circuit 109 - RLSD value */
	BYTE ucNCount;			/* Running N bit count */
} V110CONTROL_S, *PV110CONTROL_S;

#endif	// __V110_H__

