/*name and version number:@(#)z80flash.h	1.17*/
/*date of get: 		  11/01/00 14:11:15*/
/*date of delta:	  10/31/00 16:29:59*/
/*************************************************************************
File :	z80flash.h

Description :
	Contains defines and variables used in ROM resident Flash Loader
	llglod_d.h should always be included before this file.

Revision History :

	Initials	Date		Change
	RWF			04/02/97	Initial - derived from v3.0 flash loader
	RWF			10/18/97	Added USB defines.
	JMG			02/19/99	Added 4Meg LV Part Defines.
**************************************************************************/

#if !defined( ROM_FLASH ) && !defined( USB_MODEM )	// {

//-----------------------------------------------
// These are the Bank Base Registers for the
// banks that we're sending the DSP code to
//-----------------------------------------------
#define BBR0		0xec
#define BBR1		0xef
#define BBR2		0xf2

#define BANKOFFSET	0x4000

//-----------------------------------------------
// Chip Select Register values
//-----------------------------------------------
#define	ROM_BR		0x07f
#define	CBR_REG		0xf0

#else	// } {

//-----------------------------------------------
// These are the Bank Base Registers for the
// banks that we're sending the DSP code to
//-----------------------------------------------
#define BBR0		0xef
#define BBR1		0xf2
#define BBR2		0xf5

#define BANKOFFSET	0x1000

//#define ROM_DEBUG		// FOR DEBUG OF RRFL ROM CODE

//-----------------------------------------------
// Chip Select Register values
//-----------------------------------------------
#if ROM_FLASH == 16
#define		CBR_REG				0x0B0
#define		ROM_BR				0x0B7
#define		RAM_LBR				0x0B8
#define		RAM_UBR				0x0ff
#endif

#if ROM_FLASH == 64
#define		CBR_REG				0x0B0
#define		ROM_BR				0x0B7
#define		RAM_LBR				0x0B8
#define		RAM_UBR				0x0ff
#endif

#define		CR					13
#define		LF					10
#define		FL_BUFFER_SIZE		200

#if !defined( Z80_ASM )		// { Not z80 assembler

#define		AMD29F040			0xA401
#define		AMD29LV040			0x4F01
#define		AT49LV040			0x131F
#define		AMD29F400B			0xAB01
#define		AMD29F002B			0x3401
#define		AMD29F002T			0xB001
#define		AT49F020			0x0B1F
#define		AT49F002T			0x081F
#define		AT49F002			0x071F
#define		SST39VF040			0xD7BF
#define		EN29F040			0x041C

#define		DATA_30				(byte)0x30
#define		DATA_55				(byte)0x55
#define		DATA_80				(byte)0x80
#define		DATA_90				(byte)0x90
#define		DATA_A0				(byte)0xA0
#define		DATA_AA				(byte)0xAA
#define		DATA_F0				(byte)0xF0

#define		ADR_4000			((word)0x4000)
#define		ADR_5555			((word)0x5555)
#define		ADR_AAAA			((word)0x2AAA)

//-----------------------------------------------------
// States for Downloading modem.hex
//-----------------------------------------------------
#define SOFARSOGOOD	0
#define DONE		1
#define RETRY		2
#define REBURN		55

//-----------------------------------------------------
// RRFL Version and Date
//-----------------------------------------------------
#if defined( USB_MODEM )
  #define	FLASH_VERSION			"Flash Ver:4.4"
  #define	FLASH_DATE				"022398"
#else
  #define	FLASH_VERSION			"Flash Ver:4.3"
  #define	FLASH_DATE				"091297"
#endif

#if defined( EXT_MODEM )						// SERIAL - RS232
  #define FL_VERSION_STR		"s" FLASH_DATE
#elif defined( PCMCIA_MODEM )					// PC CARD
  #define FL_VERSION_STR		"p" FLASH_DATE
#elif defined( USB_MODEM )						// USB
  #define FL_VERSION_STR		"u" FLASH_DATE
#else											// ISA
  #if defined( COPERNICUS )
    #define FL_VERSION_STR		"c" FLASH_DATE
  #else
    #define FL_VERSION_STR		"i" FLASH_DATE
  #endif
#endif

typedef enum
{
	NO_CMD,
	AT_CMD,
	ATI_CMD,
	ATI5_CMD,
	ATFL_CMD,
	ATGO_CMD,
	AT_RAMFAIL,
	AT_and_and_F_CMD,
	AT_and_and_Fgo_CMD,
	BAD_CMD
} AT_COMMANDS ;

//=========================================================================
//					Macro(s)
//=========================================================================
//-----------------------------------------------
//		macro for spin wait
//-----------------------------------------------
#define	wait_usec(x)			\
do {							\
	word cnt ;					\
	for ( cnt=x;cnt>0;cnt-- ) ;	\
} while (0)

//-------------------------------------------------
//		defines for debug
//-------------------------------------------------
#define FL_ERASE		// really erase the flash first
						// if this symbol is undefined then
						// this program only verifies the flash
						// it does not erase or program it

#if defined( USB_MODEM )
#define		FL_DEBUG_PRINT	// turn debug printing on
#else
//#define		FL_DEBUG_PRINT	// turn debug printing on
#endif

//-----------------------------------------------------
// debug macros
//-----------------------------------------------------
#if defined( FL_DEBUG_PRINT )

#define debug_put_str(x)	\
do {						\
	fl_debug_flg = TRUE ;	\
	fl_put_str(x) ;			\
	fl_debug_flg = FALSE ;	\
} while (0)

#define debug_put_hex_byte(x) \
do {						\
	fl_debug_flg = TRUE ;	\
	fl_put_hex_byte(x) ;	\
	fl_debug_flg = FALSE ;	\
} while (0)

#define debug_put_hex(x)	\
do {						\
	fl_debug_flg = TRUE ;	\
	fl_put_hex(x) ;			\
	fl_debug_flg = FALSE ;	\
} while (0)

#define debug_put_char(x)	\
do {						\
	fl_debug_flg = TRUE ;	\
	fl_put_char(x) ;		\
	fl_debug_flg = FALSE ;	\
} while (0)

#else

#define debug_put_str(x)
#define debug_put_hex_byte(x)
#define debug_put_hex(x)
#define debug_put_char(x)

#endif

//-----------------------------------------------
//		macros for accessing ROM
//-----------------------------------------------
#define write_byte(a,v)	(*((byte *)a) = v)
#define read_byte(a)	*((byte *)a)
#define read_word(a)	*((word *)a)

//---------------------------------------------------
//		macro for accessing CAMILZ
// WARNING:	no critical region protection for 0xc0
//---------------------------------------------------
#define	DP_REGREAD( reg )			\
	( output8( 0xc0, (reg) ),		\
	  input8( 0xc1 ) )


//=========================================================================
//					Externs
//=========================================================================
extern	BOOL		GotBRGcnt ;		// baudrate value is known
extern	BAUD_RATE	s_62 ;			// this sreg is the baudrate (actually
									// an index into the baudrate table)

//=========================================================================
//					Globals
//=========================================================================
extern	byte	fl_GetID[ FL_BUFFER_SIZE ] ;
extern	byte	fl_in_buffer[ FL_BUFFER_SIZE ] ;
extern	byte	fl_in_ptr ;
extern	byte	fl_out_ptr ;
extern	byte	fl_string[ 3 ] ;
extern	byte	fl_dte_char ;
extern	byte	fl_tmp_ptr ;
extern	byte	fl_num ;
extern	byte	fl_record_type ;
extern	byte	fl_status ;
extern	word	fl_device_type ;
extern	word	fl_logical_addr ;
extern	word	fl_num_bytes ;
extern	byte	fl_chk_sum ;
extern	word	fl_byte_cnt ;
extern	word	fl_addr_in ;
extern	word	fl_strt_para ;
extern	byte	fl_bbr_tbl_ndx ;
extern	byte	fl_sector1_flag ;
extern	BOOL	fl_InCmdMode ;
extern	BOOL	fl_debug_flg ;
extern	word	fl_curpara ;
extern	byte	fl_bbr ;
extern	BOOL	fl_dumbPortPresent ;
extern	BOOL	fl_portInit ;
#if defined( PCMCIA_MODEM )
extern	byte	fl_last_mimic_cor ;
extern	byte	fl_last_mimic_fcsr ;
extern	byte	fl_last_mimic_prr ;
#endif
#if defined( USB_MODEM )
extern	byte	*fl_dte_rx_rptr ;
extern	byte	*fl_dte_rx_wptr ;
extern	byte	*fl_dte_rx_eptr ;
extern	byte	*fl_dte_rx_sptr ;
extern	byte	*fl_dte_tx_rptr ;
extern	byte	*fl_dte_tx_wptr ;
extern	byte	*fl_dte_tx_eptr ;
extern	byte	*fl_dte_tx_sptr ;
extern	byte	fl_dte_tx_buff [ 256 ] ;
extern	byte	fl_dte_rx_buff [ 256 ] ;
#endif

// routines in z80flash.c
extern non_banked void fl_put_str ( char * ) ;
extern non_banked void fl_put_hex_byte ( byte ) ;
extern non_banked void fl_put_hex ( word ) ;
extern non_banked void fl_put_char( byte ) ;

// routines in cstartup.asm
extern non_banked word fl_get_id( void ) ;
extern non_banked void fl_jump_abs ( word ) ;
extern non_banked word fl_getDeviceID ( void ) ;
extern non_banked BOOL fl_EraseFlash ( void ) ;
extern non_banked void fl_UploadWriteByte ( void ) ;
extern non_banked BOOL fl_WriteByte ( void ) ;

// routines in z80asm.asm
extern non_banked word z80_bankcheck( byte, word, word ) ;

// routines in z80usbut.c
#if defined( USB_MODEM )
extern non_banked void fl_usb_periodic ( void ) ;
extern non_banked void fl_usb_init ( BOOL ) ;
extern non_banked void fl_usb_restart ( void ) ;
#endif

#endif		// } ! Z80_ASM
#endif		// } ! ROM_FLASH  && ! USB_MODEM
