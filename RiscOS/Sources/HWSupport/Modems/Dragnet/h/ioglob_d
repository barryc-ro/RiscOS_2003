/*name and version number:@(#)ioglob_d.h	1.184*/
/*date of get: 		  12/15/00 10:10:33*/
/*date of delta:	  11/30/00 16:58:15*/
/****************************************************************
File :	ioglob_d.h
Description :
	Contains #defines that are global to the io task.
	Also contains variables that are global to io task.

Revision History :
	Initials	Date		Change
	rwf      	10/06/95	made dte rx buffer larger for ext modem  
	rwf      	06/27/96	made dte buffers smaller to accomodate v42bis
							in RAM.
	rwf      	01/14/97	for Serial VENUS, High water mark is closer to
							top of buffer (using DMA for sending XOFF).
	rwf      	02/04/97	Made high water mark change for Internal
							VENUS modem also (DMA used for Mimic).
	rwf      	10/01/00	Dual DTE buffer mode for TCP/IP support.
*************************************************************************/
#ifndef __IO_GLOB_H__
#define __IO_GLOB_H__

#if defined( CS_4 )	// {
# include "lapm.h"
# define IO_DCE_TX_BUFF_SIZE  	1024
# define IO_DCE_RX_BUFF_SIZE  	(LAPM_FRAME_SIZE * NO_OF_LAPM_RECEIVE_FRAMES)
# define IO_DTE_TX_BUFF_SIZE  	1024*16
# define IO_DTE_RX_BUFF_SIZE	1024*16
# define IO_DTE_RX_BUFF_FULL  	IO_DTE_RX_BUFF_SIZE - 1024*3
# define IO_DTE_RX_BUFF_EMPTY	IO_DTE_RX_BUFF_FULL - 1024
#else	// } {
# define IO_DCE_TX_BUFF_SIZE  	384
  // use dce receive buffer for voice transmit & receive
# define IO_DCE_RX_BUFF_SIZE  	1664

# if !defined(TCP_IP)	// {
#  if defined(V42BIS_RAM_CODE) && (defined(HOMOL) || defined(VOICE))
#   if defined(PCMCIA_MODEM)
#    define IO_DTE_RX_BUFF_SIZE  	2048
#   else
#    define IO_DTE_RX_BUFF_SIZE  	2448
#   endif
#  else
#   define IO_DTE_RX_BUFF_SIZE  	3072
#  endif
#  define HOST_RX_BUFF_SIZE		IO_DTE_RX_BUFF_SIZE
# else	// } { For TCP/IP two ring buffers are defined
#  define IO_DTE_RX_BUFF_SIZE  	1024
#  define HOST_RX_BUFF_SIZE  	1024 + 128
# endif	// } !TCP_IP

//--------------------------------------------------------------------------
// for external modem need more hysteresis since sw fc must
// be communicated serially. rwf 10/06/95
//--------------------------------------------------------------------------
// The difference between ...BUFF_FULL and the size
// of the buffer ..BUFF_SIZE allows for characters to be streaming
// in from the DTE while processing is going on.  Flow control
// currently is only looked at in main() so there is a bit of a
// problem if the background processing is extensive.
//--------------------------------------------------------------------------
// rwf 01/15/97 - For VENUS, SW Flow Control is now handled by DMA so
// that the buffer need not have a large chunk reserved for streaming in
// of chars while waiting for the host to receive the XOFF char.  It is
// DMAed to the host in real-time (inserted in the outgoing stream to
// the host).
//--------------------------------------------------------------------------
# if !defined(TCP_IP) // {
#  define IO_DTE_RX_BUFF_FULL  	IO_DTE_RX_BUFF_SIZE - 196
#  define IO_DTE_RX_BUFF_EMPTY	IO_DTE_RX_BUFF_FULL - 128

#  if defined(V42BIS_RAM_CODE)
#   define IO_DTE_TX_BUFF_SIZE  	2800
#  else
#   define IO_DTE_TX_BUFF_SIZE  	4096
#  endif
#  define HOST_RX_BUFF_FULL		IO_DTE_RX_BUFF_FULL
#  define HOST_RX_BUFF_EMPTY	IO_DTE_RX_BUFF_EMPTY
# else // } { For TCP/IP two ring buffers are defined
#  define HOST_RX_BUFF_FULL		HOST_RX_BUFF_SIZE - 196
#  define HOST_RX_BUFF_EMPTY	HOST_RX_BUFF_FULL - 128
#  if defined(V42BIS_RAM_CODE)
#   define IO_DTE_TX_BUFF_SIZE  	1024
#   define HOST_TX_BUFF_SIZE  		1024
#  else
#   define IO_DTE_TX_BUFF_SIZE  	2048
#   define HOST_TX_BUFF_SIZE  		2048
#  endif
# endif	// } !TCP_IP
#endif	// } CS_4

#ifndef		Z80_ASM				// { Z80 Compiler Only

# define HDLC_START_OF_FRAME	0x4000
# define HDLC_END_OF_FRAME  	0x8000
# define HDLC_CRC_ERROR  		0x2800
# define HDLC_TX_ANY_CHAR		0x2000
# define HDLC_IFRAME_PLACEHLDR	0x1000	// LAPM/MNP HDLC frames by reference
# define MNP_OFRAME_PLACEHLDR	0x0400	// MNP Octet frames by reference

# define SYNC		0x16
# define DLE 		0x10
# define STX 		0x02
# define ETX 		0x03
# define SUB 		0x1a
# define CAP		0x5e
# ifdef KORTEX
//#define FS		0x1c	// Reset ADPCM  !!! Pb avec BVRP
#  define FS		'R'	// Reset ADPCM
# endif

/* Do not reorder IO_STATE without paying attention
 * to autobauding logic in serial modem.
 * mah - 6/6/96
 */
typedef enum {
	IO_IDLE,			/* io idle - modem idle */
	IO_IDLE_AWAKE,		/* modem awake & idle */
	IO_SLEEP,		/* sleep mode - modem idle */
	IO_SLEEP_BLACKLIST,	/* sleep mode - check blacklist status */
	IO_WAKEUP,  		/* wakeup from sleep state */
	IO_DTE_INACTIVITY,	/* check if DTE/DCE inactivity timer expires */
	IO_CD_ON,			/* turn on cd after the connect msg */

	/* States above this point are the ones where
	 * we're in "command" mode.  We will send the
	 * characters coming from the DTE to the at parser.
	 * In the serial mode we will not start autobauding if
	 * io_state >= IO_ONLINE.
	 */
	IO_ONLINE,			/* io connect - on dial lines */
	IO_DIAL_OR_ANSWER,	/* dialing or answering */
	IO_SYNC,			/* io connect - on dial lines in sync mode */
	IO_FAX,				/* io connect in fax mode	*/
	IO_VOICE,			/* io connect in voice mode */
	IO_V42,				/* io connect in v42 mode	*/
	IO_GMUX,			/* io connect in GMUX mode	*/
	IO_MNP,				/* io connect in MNP mode */
	IO_RETRAINING,		/* connected, data pump retraining */
	IO_ANALOG_LOOPBACK,	/* local analog loopback */
	IO_DCE_LOOPBACK,    /* local dce loopback remote data */
	IO_DTE_LOOPBACK,	/* local dte loopback */
	IO_CID,				/* receive caller id 		*/
	IO_RADISH_BG,     	/* io connect in radish mode */
	IO_DUMP_DSP,     	/* dumping DSP memory */
	IO_V110		  		/* V110 on line */
}	IO_STATE ;

typedef enum {
	IO_FAX_IDLE,
	IO_FAX_RX,
	IO_FAX_RX_END,
	IO_FAX_RX_HDLC_BUF,
	IO_FAX_RX_HDLC_DTE,
	IO_FAX_RX_HDLC_DTE_ERR, 
	IO_FAX_TX,
	IO_FAX_TX_HDLC_BUF,
	IO_FAX_TX_HDLC_DCE,
	IO_FAX_FIFO_EMPTY,
	IO_FAX_RX_START,
	IO_V34FAX_CCSTART,		// V34_FAX
	IO_V34FAX_PRI_DELAY,	// V34 Fax Primary Channel Start-up delay
	IO_V34FAX_PRISTART,
	IO_V34FAX_ONLINE,
	IO_V34FAX_FRAMEWAIT,
	IO_V34FAX_POSTDELAY,
	IO_V34FAX_WAIT
}	IO_FAX_STATE ;

typedef enum {
	IO_VOICE_RX,
	IO_VOICE_RX_END,
	IO_VOICE_TX,
	IO_VOICE_TX_END,
	IO_VOICE_SPKR_RX,
	IO_VOICE_SPKR_RX_END,
	IO_VOICE_TX_DSP,
	IO_VOICE_RX_DSP,
	IO_VOICE_DUALPLEX_TX_RX,
	IO_VOICE_DUALPLEX_TX_RX_DSP,
	IO_VOICE_DUALPLEX_END
}	IO_VOICE_STATE ;

typedef enum {
	AT_ESC_INIT_STATE,
	AT_ESC_STATE1,
	AT_ESC_STATE2,
	AT_ESC_STATE3,
	AT_ESC_STATE4
}	AT_ESC_STATE ;

typedef enum {
#ifndef KORTEX
	IO_CID_HEADER,
	IO_CID_DLE,
#endif	// KORTEX
	IO_CID_TYPE,
	IO_CID_MSG_LENGTH,
	IO_CID_DATA,
	IO_CID_ABORT
}	IO_CID_STATE ;

#define AM_CID_NUMBER_SIZE		20
#define IO_DCE_BUFF_SIZE 		132

//----------------------------------------------------------
//					Macros
//----------------------------------------------------------
#if !defined(TCP_IP)
# define IO_DTE_RX_RPTR (I(io_dte_rx_rptr))
# define IO_DTE_RX_WPTR (I(io_dte_rx_wptr))
# define IO_DTE_RX_SPTR (I(io_dte_rx_sptr))
# define IO_DTE_RX_EPTR (I(io_dte_rx_eptr))
# define IO_DTE_TX_RPTR (I(io_dte_tx_rptr))
# define IO_DTE_TX_WPTR (I(io_dte_tx_wptr))
# define IO_DTE_TX_SPTR (I(io_dte_tx_sptr))
# define IO_DTE_TX_EPTR (I(io_dte_tx_eptr))
#else
# define IO_DTE_RX_RPTR (host_rx_rptr)
# define IO_DTE_RX_WPTR (host_rx_wptr)
# define IO_DTE_RX_SPTR (host_rx_sptr)
# define IO_DTE_RX_EPTR (host_rx_eptr)
# define IO_DTE_TX_RPTR (host_tx_rptr)
# define IO_DTE_TX_WPTR (host_tx_wptr)
# define IO_DTE_TX_SPTR (host_tx_sptr)
# define IO_DTE_TX_EPTR (host_tx_eptr)
#define IS_HOST_RX_EMPTY() (IO_DTE_RX_RPTR == IO_DTE_RX_WPTR)
#endif	// TCP_IP

#define IS_DTE_RX_EMPTY() (I(io_dte_rx_rptr) == I(io_dte_rx_wptr))
#define DTE_RX_UPDATE() 								\
do { 													\
	if ( I(io_dte_rx_rptr) >= I(io_dte_rx_eptr) )		\
	{													\
		I(io_dte_rx_rptr) = I(io_dte_rx_sptr);			\
	}													\
} while (0)

#define DCE_TX_EMPTY() (G(io_dce_tx_rptr) == G(io_dce_tx_wptr))

/* iodte.c */
extern byte io_get_dte_rx_char ( byte *rdata_ptr ) ;
extern byte io_at_esc_seq_detected ( void ) ;
extern word io_get_dte_tx_count ( void ) ;
extern void io_put_dte_tx_char ( byte tx_byte ) ;
extern void io_write_dte_fifo ( word count, word* from ) ;
extern word io_get_dte_rx_bytes ( void ) ;

/* iodte1.c */
extern void UART_dsr_on ( void ) ;
extern void UART_dsr_off ( void ) ;
extern void UART_cts_off ( void ) ;
extern void UART_cts_on ( void ) ;
extern void UART_cd_off ( void ) ;
extern void UART_cd_on ( void ) ;
extern void UART_ri_off ( void ) ;
extern void UART_ri_on ( void ) ;
extern void UART_dte_rx_on ( void ) ;
extern void UART_dte_rx_off ( void ) ;
extern void UART_dte_tx_on ( void ) ;
extern void UART_dte_tx_off ( void ) ;
extern void UART_dce_break_on ( void ) ;
extern void UART_dce_break_off ( void ) ;

/* iodce.c */
extern non_banked void  io_init_dce_tx_fifo ( void ) ;
extern non_banked void  io_init_dce_rx_fifo ( void ) ;
extern non_banked word  io_get_dce_rx_count ( void ) ;
extern non_banked void  io_write_dce_fifo ( byte count, word* from ) ;
extern non_banked byte  io_read_dce_fifo ( byte count, word* to ) ;
extern non_banked word  io_get_dce_tx_count ( void ) ;
extern non_banked word  io_get_dce_queue_count ( void ) ;
extern non_banked byte  io_dce_tx_fifo_empty ( void ) ;
extern non_banked void  io_start_dce_transmit ( void ) ;
extern non_banked void  io_tx_hdlc_frame ( byte count, byte* from ) ;
extern non_banked void  io_tx_hdlc_flags ( byte count ) ;

/* iodata.c */
extern void io_tx_dte_to_dce_data ( void ) ;
extern void io_tx_dce_to_dte_data ( void ) ;
extern void io_dce_to_dte_data ( void ) ;
extern void io_dte_loopback ( void ) ;
extern void io_tx_v54 ( byte data_bit ) ;
extern void io_dce_loopback ( void ) ;
extern byte io_tx_break ( void ) ;

/* iofax.c */
extern void io_fax_init ( FAX_STATE state ) ;
extern byte io_fax_background ( void ) ;
extern void io_fax_disconnect ( void ) ;
extern void io_compute_crc ( byte data_byte ) ;

/* iocid.c */
extern void io_cid_init ( void ) ;
extern byte io_rx_cid ( void ) ;

/* iovoice.c */
extern void io_voice_init ( IO_VOICE_STATE state ) ;
extern byte io_voice_background ( void ) ;


/* IMA ADPCM state structure used by compression and
 * decompression routines.
 */
struct ima_adpcm_state
{
	short	valprev;	/* Previous output value */
	char	index;		/* Index into stepsize table */
};

struct IO_DUMPRAMSTATE
{
	dsp_ram		ram; // ram.loc & ram.val
	word		time;
};

void io_ima_adpcm_coder(word *indata, byte *outdata, int len,
			struct ima_adpcm_state *state);
#ifdef KORTEX	//KX << ADPCM 2&3 bits
void io_ima_adpcm_decoder(byte *indata, word *outdata, int len,
		     struct ima_adpcm_state *state, word wAmResetCompression);
#else			// ADPCM 2&3 bits
void io_ima_adpcm_decoder(byte *indata, word *outdata, int len,
			  struct ima_adpcm_state *state);
#endif			//KX ADPCM 2&3 bits >>

// in ib_cmd.c file
#ifdef	IN_BAND_CMD
extern	void	process_in_band_command ( void );
extern	void	dce_to_dte_in_band_msg(byte *txmsg, byte msg_len);
extern  enum	state_of_ib_cmd in_band_cmd_state ;
extern	byte	in_band_cmd_detected ;
extern	byte	EM_detected ;
#endif	// IN_BAND_CMD

#else							// } { Z80 assembler Only

# if !defined(TCP_IP)
#  define IO_DTE_RX_RPTR io_dte_rx_rptr
#  define IO_DTE_RX_WPTR io_dte_rx_wptr
#  define IO_DTE_RX_SPTR io_dte_rx_sptr
#  define IO_DTE_RX_EPTR io_dte_rx_eptr
#  define IO_DTE_TX_RPTR io_dte_tx_rptr
#  define IO_DTE_TX_WPTR io_dte_tx_wptr
#  define IO_DTE_TX_SPTR io_dte_tx_sptr
#  define IO_DTE_TX_EPTR io_dte_tx_eptr
# else
#  define IO_DTE_RX_RPTR host_rx_rptr
#  define IO_DTE_RX_WPTR host_rx_wptr
#  define IO_DTE_RX_SPTR host_rx_sptr
#  define IO_DTE_RX_EPTR host_rx_eptr
#  define IO_DTE_TX_RPTR host_tx_rptr
#  define IO_DTE_TX_WPTR host_tx_wptr
#  define IO_DTE_TX_SPTR host_tx_sptr
#  define IO_DTE_TX_EPTR host_tx_eptr
# endif	// !TCP_IP

#endif								// } Z80_ASM

#endif	// __IO_GLOB_H__
