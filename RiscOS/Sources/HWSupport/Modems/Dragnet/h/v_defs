/*name and version number:@(#)v_defs.h	1.14*/
/*date of get: 		  12/15/00 10:10:50*/
/*date of delta:	  11/30/00 17:00:08*/
/*****************************************************************************
** File        : v_defs.h                                               *
** Version     : 3.0                                                         *
**---------------------------------------------------------------------------*
** Description :                                                             *
**   This file provides the most fundamental definitions of the types byte   *
** and word. It should be included by ALL source files.                      *
**---------------------------------------------------------------------------*
**                               HISTORY                                     *
** Date            Ver   Dev  Comments                                       *
** 14th Oct  1998  1.0   RGT  Initial Revision                               *
**                                                                           *
** 31st Oct  1998  1.1   RGT  Added in new channelData and delay structures. *
**                            Both used purely for debug purposes at present *
**                                                                           *
**[Release 2]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
** 25th Jan  1999  2.0   RGT  Added in many new types for the new arch, also *
**                            placed frame_t and packet_t (which are really  *
**                            from v_camil.h & v_pnet.h) in so that protocol *
**                            libraries (RTP/IFP) need only include this file*
**                                                                           *
** 16th Feb  1999  2.1   RGT  General tidy-up and addition of DTMF/tone/digit*
**                            type defintion. Also added extra params into   *
**                            the call config structure.                     *
**                                                                           *
** 20th Apr  1999  2.2   RGT  Minor mods to library typedef, addition of a   *
**                            direction element to the call config struct.   *
**                            Addition of ON, OFF, FREE, INGRESS & EGRESS    *
**                            constants.                                     *
**                                                                           *
**[Release 3]----------------------------------------------------------------*
** Date            Ver   Dev  Comments                                       *
**  2   Sep  1999  3.0   JA    CS4 multi-instance integration on SA          *
******************************************************************************/
#ifndef _V_DEFS_H__
	#define _V_DEFS_H__


/****************************************************************************
            #####  #   #  ####   #####  ####   #####  #####  ###
              #    #   #  #   #  #      #   #  #      #     #
              #     ###   ####   ###    #   #  ###    ###    ###
              #      #    #      #      #   #  #      #         #
              #      #    #      #####  ####   #####  #     ####
*****************************************************************************/
	#ifndef ASSEMBLER
		#include <sa_cnfig.h>
		#include <v_config.h>

		#if defined(CS_4)
			// wash away some Z80-specifics
			#define non_banked
			#define output8(x,y)
			#define output(x,y)

			// Uncomment to enable frame pool audit feature
			// #define FRAME_POOL_AUDIT
		#endif	// CS_4

		/*************************************************
		** General type definitions                      *
		**************************************************/
			typedef unsigned char  byte;
			typedef unsigned short word;
			typedef unsigned long  lword;
			typedef enum { False = 0, True = 1 } Boolean;

		/*************************************************
		** Codec type ID Mappings                        *
		**************************************************/
			typedef enum {
				UNINITIALISED = 0x00,
				G711          = 0x11,
				G723          = 0x23,
				G729          = 0x29,   // was 0x22
				G729AB        = 0xff,	// not used (yet)
				DEMOD         = 0xFA,
				ANNOUNCEMENT  = 0xFE
			} codecType;

		/*************************************************
		** Media library ID Mappings                     *
		**************************************************/
			typedef enum {
				V_TEST,
				V_RTP,
				V_IFP
			} libraryType;

		/*************************************************
		** Call configuration Structure Type Definition  *
		**************************************************/
			typedef struct {
				codecType	pnetCodec;
				Boolean	silenceSupp;
				byte	pnetCompander;
				byte	pstnCompander;
				byte	echoCancellor;
				byte	framesPerPkt;
				byte	jitterMin;
				byte	jitterMax;
				byte	jitterInitial;
				byte	dynamicBuildout;
				byte	faxPayloadMax;
				byte	faxBuildOut;
				byte	faxFramesMax;
		//		byte	dspVersion;
			} callConfig_t;

		/*************************************************
		** Frame Structure Type Definition               *
		**************************************************/
			typedef struct {
				#if defined (FRAME_POOL_AUDIT)
					byte		  media[CFG_MAX_FRM_SZ];
					lword	audit1;
					word		  ID;
					lword	audit2;
					codecType	  codec;
					lword	audit3;
					byte		  status;
					lword	audit4;
					byte		  length;
					lword	audit5;
				#else
					byte		  media[CFG_MAX_FRM_SZ];
					codecType	  codec;
					word		  ID;
					byte		  status;
					byte		  length;
				#endif // FRAME_POOL_AUDIT
			} frame_t;

		/*************************************************
		** Packet Structure Type Definition              *
		**************************************************/
			typedef struct {
				// Make sure sizeof(packet_t) is long-word aligned!!!
				byte		  media[CFG_MAX_PKT_SZ];
				word		  length;
				byte		  status;
				byte		  type;
			} packet_t;

		/*************************************************
		** DTMF Digit and Tone ID Mappings               *
		**************************************************/
			typedef enum {
				DTMF_1 = 0,	DTMF_2,		DTMF_3,		DTMF_A,
				DTMF_4,		DTMF_5,		DTMF_6,		DTMF_B,
				DTMF_7,		DTMF_8,		DTMF_9,		DTMF_C,
				DTMF_STAR,	DTMF_0,		DTMF_HASH,	DTMF_D,
				TONE_DIAL,	TONE_RING,	TONE_BUSY,	TONE_WAITING
			} toneDigits;

	#endif

		

/****************************************************************************
          ####   ###   #   #   ###  #####   ###  #   #  #####  ###
         #      #   #  ##  #  #       #    #   # ##  #    #   #
         #      #   #  # # #   ###    #    ##### # # #    #    ###
         #      #   #  #  ##      #   #    #   # #  ##    #       #
          ####   ###   #   #  ####    #    #   # #   #    #   ####
*****************************************************************************/

		/***********************************************************
		** Maximum Values for each basic type defined above        *
		************************************************************/
			#define		MAX_WORD		0xFFFF
			#define		MAX_BYTE		0xFF
			#define		MAX_LONG		(lword)0xFFFFFFFF

		/***********************************************************
		** Generic Constants for Indicating special states         *
		************************************************************/
			#define		V_BUSY			1
			#define		V_READY			0
			#define		V_EMPTY			0x11
			#define		V_FULL			0x7F

		/***********************************************************
		** Frame Sizes for each codec supported in the DSP         *
		** All must be <= to CFG_MAX_FRAME_SZ in v_config.h        *
		************************************************************/
		#if defined(V_5MS_G711)
			#define G711_FRAME_SZ		  40  
		#else
			#define G711_FRAME_SZ		  80  
		#endif
			#define G729_FRAME_SZ		  10 
			#define G723_FRAME_SZ		  10 
			#define FAX_FRAME_SZ		  G711_FRAME_SZ
			#define ANNOUNCEMENT_FRAME_SZ	  G711_FRAME_SZ
	
		/************************
		** Error code constants *
		*************************/
			#define DSP_RX_NOSPACE		0x0001
			#define EXG_RX_NOSPACE		0x0002
	

			#define INGRESS				1
			#define EGRESS				2

/****************************************************************************
                #   #   ###    ####  ####    ###    ###
                ## ##  #   #  #      #   #  #   #  #
                # # #  #####  #      ####   #   #   ###
                #   #  #   #  #      #  #   #   #      #
                #   #  #   #   ####  #   #   ###   ####
*****************************************************************************/
	#ifndef ASSEMBLER
		/*************************************************
		** Host and Network byte-order Conversion macros *
		**************************************************/
			#define ntohs(a)	swap16(a)
			#define ntohl(a)	swap32(a)
			#define htons(a)	swap16(a)
			#define htonl(a)	swap32(a)

		// Timing Relative to system tick
		#define MACRO_GET_TIME()		x_timer
		#define MACRO_ELAPSED_TIME(x)	(word)(x_timer - x)
	#endif


/****************************************************************************
              #####  #   #  #####  #####  ####   #   #   ###
              #       # #     #    #      #   #  ##  #  #
              ###      #      #    ###    ####   # # #   ###
              #       # #     #    #      #  #   #  ##      #
              #####  #   #    #    #####  #   #  #   #  ####
*****************************************************************************/
	#ifndef ASSEMBLER
			extern non_banked lword swap32   (lword     );
			extern non_banked word  swap16   (word      );
			extern non_banked byte  check_val(byte      );
			extern non_banked void  store_val(byte, word);
			extern volatile word x_timer;

		#if defined(CS_4)
			// Prevent MQX from mapping printf to io_printf
			#if defined(printf)
				#undef printf
			#endif
			extern void printf( char *f, ... ) ;
			#if defined(sprintf)
				#undef sprintf
			#endif
			extern void sprintf( char *s, char *f, ... ) ;
		#endif	// CS_4
	#endif

#endif	// _V_DEFS_H__
