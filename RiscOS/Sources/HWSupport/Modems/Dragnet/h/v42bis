/*name and version number:@(#)v42bis.h	1.57*/
/*date of get: 		  09/06/00 16:59:25*/
/*date of delta:	  07/25/00 16:38:57*/
/****************************************************************
File :	v42bis.h
Description :
	Contains all declarations that are used by V42bis.

Revision History :
	Initials	Date		Change
	J.Xu   		02/19/93	Initial
*****************************************************************/
#ifndef __V42BIS_H__
#define __V42BIS_H__

/* request value of negotiation parameters */
#define V42bisP0	3		/* data compression request */

#ifdef MODEM_Z80

# define V42bisP1	1024		/* Number of codewords */

#else	// not Z80

# define V42bisP1	2048		/* Need at least 256 for MNP5 */

// Constants used in encode, decode
# define v42bis_N3 8
# define v42bis_N4 256
# define v42bis_N6 3
# define v42bis_N5 (v42bis_N4 + v42bis_N6)

#endif

// Macros used in V42bis dictionary management
#if defined(V42BIS_PACKED_STRUCT)

// This version uses the packet struct members for each element
# if defined(__MET__)
# pragma Pack(1)
# endif // __MET__
typedef struct v42bis_tree_node {
    word child; // the left most child
    word right;
	#if defined(V42BIS_LARGE_CODEWORD)
		word parent;	// hold entire codeword
	#else
		byte parent;	// only hold LSB of codeword,
	#endif	// V42BIS_LARGE_CODEWORD
    byte symbol;
} V42BIS_TREE_NODE;
# if defined(__MET__)
# pragma Pack()
# endif // __MET__

#  define V42BIS_GET_SYMBOL(n) ( G(v42bis_tree)[ n ].symbol )	// Access symbol element
#  define V42BIS_SET_SYMBOL(n, s )	( G(v42bis_tree)[ n ].symbol = (s) )	// Set symbol element
#  define V42BIS_GET_RIGHT(n) ( G(v42bis_tree)[ n ].right )
#  define V42BIS_SET_RIGHT(n, r )	( G(v42bis_tree)[ n ].right = (r) )

# if defined(V42BIS_LARGE_CODEWORD)

// Relaxed RAM constraint
// 16-bit code word should support P1 up to 32K (RAM permitting)
#  define V42BIS_GET_CHILD(n) ( G(v42bis_tree)[ n ].child )
#  define V42BIS_SET_CHILD(n, c )	( G(v42bis_tree)[ n ].child = (c) )
#  define V42BIS_GET_PARENT(n) ( G(v42bis_tree)[ n ].parent )
#  define V42BIS_SET_PARENT( n, p )	( G(v42bis_tree)[ n ].parent = (p) )

# else

// To save RAM, limit the codeword to 12 bits (2*2048 codewords)
// and pack the high 4 bits of parent[] in the high nibble of child[]
// This allows parent[] to be an array of bytes instead of words,
// a savings of 4K bytes with P1 set to 2048
#  if (V42bisP1 > 2048)
#   error "With V42BIS_LARGE_CODEWORD not defined, V42bisP1 must be 2048 or less"
#  endif
#  define V42BIS_GET_CHILD(n) ( G(v42bis_tree)[n].child & 0x0fff )

#  define V42BIS_SET_CHILD(n, c )					\
	do {											\
		G(v42bis_tree)[n].child &= 0xf000;						\
		G(v42bis_tree)[n].child |= (c);							\
	} while (0);

#  define V42BIS_GET_PARENT(n)						\
	( (word) ( ( (G(v42bis_tree)[n].child & 0xf000) >> 4 ) + G(v42bis_tree)[n].parent) )

#  define V42BIS_SET_PARENT( n, p )					\
	do {											\
		G(v42bis_tree)[n].parent = (byte)((p) & 0x00ff);			\
		G(v42bis_tree)[n].child &= 0x0fff;						\
		G(v42bis_tree)[n].child |= (word) (((p) & 0x0f00 ) << 4);	\
	} while (0);

# endif // V42BIS_LARGE_CODEWORD

// Macro used by non-V42bis code to access memory
# define V42BIS_MEM_START	( (byte *) G(v42bis_tree) )
# define V42BIS_MEM_SIZE	( sizeof (V42BIS_TREE_NODE) * (2*V42bisP1) )

#else
// This version uses separate arrays for each element
#  define V42BIS_GET_SYMBOL(n) ( G(symbol)[ n ] )	// Access symbol element
#  define V42BIS_SET_SYMBOL(n, s )	( G(symbol)[ n ] = (s) )	// Set symbol element
#  define V42BIS_GET_RIGHT(n) ( G(right)[ n ] )
#  define V42BIS_SET_RIGHT(n, r )	( G(right)[ n ] = (r) )

// To save RAM, limit the codeword to 12 bits (2*2048 codewords)
// and pack the high 4 bits of parent[] in the high nibble of child[]
// This allows parent[] to be an array of bytes instead of words,
// a savings of 4K bytes with P1 set to 2048
#  if (V42bisP1 > 2048)
#   error "With V42BIS_LARGE_CODEWORD not defined, V42bisP1 must be 2048 or less"
#  endif
#  define V42BIS_GET_CHILD(n) ( G(child)[n] & 0x0fff )

#  define V42BIS_SET_CHILD(n, c )					\
	do {											\
		G(child)[n] &= 0xf000;						\
		G(child)[n] |= (c);							\
	} while (0);

#  define V42BIS_GET_PARENT(n)						\
	( (word) ( ( (G(child)[n] & 0xf000) >> 4 ) + G(parent)[n]) )

#  define V42BIS_SET_PARENT( n, p )					\
	do {											\
		G(parent)[n] = (byte)((p) & 0x00ff);			\
		G(child)[n] &= 0x0fff;						\
		G(child)[n] |= (word) (((p) & 0x0f00 ) << 4);	\
	} while (0);

// Macro used by non-V42bis code to access memory
# define V42BIS_MEM_START	( G(symbol) )
# define V42BIS_MEM_SIZE	( 6 * ( 2*V42bisP1 ) )

#endif // V42BIS_PACKED_STRUCT

#define V42bisP2	32		/* maximum string length */

#define NO_COMP	0x00	/* no data compression */
#define ENCODER	0x01	/* do encoding */
#define DECODER 0x02	/* do decoding */

#define V42bis_MinP1	 512		/* Minimum value for Parameter P1 */
#define V42bis_MinP2	 6			/* Minimum value for Parameter P2 */
#define V42bis_MaxP2	 250		/* Maximum value for Parameter P2 */

/* control codewords, used in compressed mode */
#define V42BIS_ETM		0	    /* enter transparent mode */
#define V42BIS_FLUSH	1	    /* flush buffer */
#define V42BIS_STEPUP	2	    /* codeword size step up*/

/* command codes , used in transparent mode */
#define V42BIS_ECM		0	    /* enter compressed mode */
#define V42BIS_EID		1		/* escape character in data */
#define V42BIS_RESET	2		/* force dictionary reset */

#define AXF_MIN 64		/* used in anti-expansion function */
#define AXF_MAX 256		/* delay between tests */
#define AXF_HYST 16		/* hysteresis value */

extern non_banked void v42bis_init_variables ( void ) ;
extern non_banked void v42bis_flush( void ) ;
#ifdef V42BIS_RAM_CODE
extern non_banked void v42bis_encodep ( void );
extern non_banked byte v42bis_decodep ( byte *, word, byte );
#else
extern non_banked void v42bis_encode ( void );
extern non_banked byte v42bis_decode ( byte *, word, byte );
#endif

#endif	// __V42BIS_H__
