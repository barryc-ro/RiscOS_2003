#ifndef _riscos_h_
#define _riscos_h_

#include "swis.h"

#define BM_InsertByte      0
#define BM_InsertBlock     1
#define BM_RemoveByte      2
#define BM_RemoveBlock     3
#define BM_ExamineByte     4
#define BM_ExamineBlock    5
#define BM_UsedSpace       6
#define BM_FreeSpace       7
#define BM_PurgeBuffer     8
#define BM_NextFilledBlock 9


/*
 * State information for each stream
 */
typedef struct Stream
{
    unsigned int devicefs_stream;
    unsigned int fileswitch_handle;
    unsigned int buffersize;
    unsigned int bufferthreshold;
    unsigned int buffer;
    unsigned int buffer_privid;
} Stream;

extern void (*BuffManService)(void);
extern void *BuffManWS;
extern Stream InputStream, OutputStream;

extern unsigned int call_buffermanager(_kernel_swi_regs *r, void (*addr)(void), void *pw);
_kernel_oserror *register_with_devicefs(void);
_kernel_oserror *deregister_from_devicefs(void);

void send_riscos_serial_event(void);

#define CallBufMan(r) call_buffermanager(r, BuffManService, BuffManWS)

extern void podule_led_off(void);
extern void podule_led_on(void);

//#define input8(addr) (*(volatile unsigned char *) (addr))
//#define output8(addr,value) (*(volatile unsigned char *) (addr)=(value))
extern void output8(int address, int value);
extern int  input8 (int address);

#endif /* _riscos_h_ */
