;
;
; LCDcontrol
; ----------
;
; Brightness and contrast controls for the LCD.
;


 [ 1=0
;******************************************************************************
;
; In
;   R0  = contrast (0..255)
;   R1  = brightness (0..255)
;
SWIPortable_Contrast
        Entry   "R0-R2"
        MOV     R2, R1
        MOV     R1, R0
        BL      WriteToDigiPot
        EXIT
 ]

;******************************************************************************
;
; HotKey control of LCD contrast
;

LCD_ContrastDown
        Entry   "R1"
        LDRB    R1, ContrastIndex
        SUBS    R1, R1, #1
        BLGE    SetContrast                     ;limit value to 0..ContrastTableMaxIndex
        EXIT


LCD_ContrastUp
        Entry   "R1"
        LDRB    R1, ContrastIndex
        ADDS    R1, R1, #1
        CMP     R1, #ContrastTableMaxIndex
        BLLE    SetContrast                     ;limit value to 0..ContrastTableMaxIndex
        EXIT


;******************************************************************************
;
; HotKey control of LCD brightness
;
LCD_BrightnessDown
        Entry   "R1,R2"
        LDRB    R1, BrightnessIndex1
        SUBS    R1, R1, #1                      ;decrement brightness
        BLGE    SetBrightness_WithLock          ;limit value to 0..BrightnessTableMaxIndex
        EXIT


LCD_BrightnessUp
        Entry   "R1,R2"
        LDRB    R1, BrightnessIndex1
        ADDS    R1, R1, #1                      ;increment brightness
        CMP     R1, #BrightnessTableMaxIndex
        BLLE    SetBrightness_WithLock          ;limit value to 0..BrightnessTableMaxIndex
        EXIT


LCD_DimBrightness
        Entry   "R1,R2"
        LDRB    R2, BrightnessIndex1            ;NB Swap values
        LDRB    R1, BrightnessIndex2            ; (final store of R1 into BrightnessIndex1
        STRB    R2, BrightnessIndex2            ;  performed by subroutine)
        BL      SetBrightness_WithLock          ;In R1=brightness value
        EXIT


;******************************************************************************

BrightnessTable
        DCB     101, 123, 145, 167, 189, 211, 233, 255          ;8 values, max index of 7
BrightnessTableMaxIndex * (. - BrightnessTable - 1)
        ASSERT BrightnessTableMaxIndex = 7

        ASSERT default_LCDBrightness1 <= BrightnessTableMaxIndex
        ASSERT default_LCDBrightness2 <= BrightnessTableMaxIndex


ContrastTable
        DCB     255, 252, 248, 244, 240, 236, 232, 228
        DCB     224, 220, 216, 212, 208, 204, 200, 196
        DCB     192, 188, 184, 180, 176, 172, 168, 164
        DCB     160, 156, 152, 148, 144, 140, 136, 132
        DCB     128, 124, 120, 116, 112, 108, 104, 100
        DCB      96,  92,  88,  84,  80,  76,  72,  68
        DCB      64,  60,  56,  52,  48,  44,  40,  36
        DCB      32,  28,  24,  20,  16,  12,   8,   4          ;64 values, max index of 63
ContrastTableMaxIndex * (. - ContrastTable - 1)
        ASSERT ContrastTableMaxIndex = 63

        ASSERT default_LCDContrast <= ContrastTableMaxIndex

        ALIGN

;******************************************************************************
;
; Compare BrightnessIndex1 with BrightnessIndex2, if lower set BrightnessLock
;
; Entry
;   R1  = brightness index (0..BrightnessTableMaxIndex)
;
SetBrightness_WithLock
        Push    "R2, R3"
        LDRB    R2, BrightnessIndex2
        CMP     R1, R2                          ;If the user has dimmed the display,
        MOVLT   R3, #1                          ; set a lock (=1) to inhibit the screen blanker
        MOVGE   R3, #0                          ; choosing the brighter setting on unblanking
        STRB    R3, BrightnessHold              ; or undimming.
        Pull    "R2, R3"
                                        ;drop into...
;
; Write BrightnessIndex1 and BrightnessIndex2 to CMOS RAM.
; Set LCD to BrightnessIndex1 value.
;
; Entry
;   R1  = brightness index (0..BrightnessTableMaxIndex)
;
SetBrightness
        Entry   "R0, R1, R2"
        ASSERT  BrightnessTableMaxIndex <= 7
        AND     R1, R1, #2_00000111             ;Should already be in range, but make sure
        STRB    R1, BrightnessIndex1            ;Keep a copy

        MOV     R0, #ReadCMOS
        MOV     R1, #BrightnessCMOS
        SWI     XOS_Byte                        ;result in R2.b

        BICVC   R2, R2, #2_00111111             ;clear both brightness values
        LDRVCB  R1, BrightnessIndex2
        ORRVC   R2, R2, R1, LSL #3              ;Pack 'other' into 3..5
        LDRVCB  R1, BrightnessIndex1
        ORRVC   R2, R2, R1                      ; and 'current' into 0..2

        MOVVC   R0, #WriteCMOS
        MOVVC   R1, #BrightnessCMOS
        SWIVC   XOS_Byte

        LDRB    R1, BrightnessIndex1            ;Restore corrupted register
        BL      SendBrightness                  ;In R1=brightness
        EXIT


;******************************************************************************
;
; SetContrast
;
; Write new contrast index to CMOS RAM,
; send value to contrast control pot.
;
; Entry
;   R1  = contrast index (0..ContrastTableMaxIndex)
;
; Exit
;   All registers preserved
;
SetContrast
        Entry   "R0-R2"
        ASSERT  ContrastTableMaxIndex <= 63
        AND     R1, R1, #2_00111111             ;Should already be in range, but make sure
        STRB    R1, ContrastIndex               ;Keep a copy

        MOV     R0, #ReadCMOS
        MOV     R1, #ContrastCMOS
        SWI     XOS_Byte                        ;result in R2.b

        BICVC   R2, R2, #2_00111111             ;clear contrast value
        LDRVCB  R1, ContrastIndex               ;Reload corrupted register
        ORRVC   R2, R2, R1                      ;Pack contrast into 0..2

        MOVVC   R0, #WriteCMOS
        MOVVC   R1, #ContrastCMOS
        SWIVC   XOS_Byte                        ;Write to CMOS RAM, ignore errors

        LDRB    R1, ContrastIndex               ;Reload corrupted register
        BL      SendContrast                    ;Shout down some wet string at the pot.
        EXIT


;******************************************************************************
;
; SendBrightness
;
; Entry
;   R1  = index (0..BrightnessTableMaxIndex)
;
; Exit
;   R0, R1, R2 corrupt
;
SendBrightness
        Entry
        ADR     R2, BrightnessTable
        LDRB    R2, [R2, R1]                    ;map index into value
        LDRB    R1, ContrastValue
        BL      WriteToDigiPot                  ;R1=contrast value (0..255), R2 brightness value (0..255)
        EXIT


;******************************************************************************
;
; SendContrast
;
; Entry
;   R1  = index (0..ContrastTableMaxIndex) to write
;
SendContrast
        Entry
        ADR     R2, ContrastTable
        LDRB    R1, [R2, R1]                    ;map index into value
        LDRB    R2, BrightnessValue
        BL      WriteToDigiPot                  ;R1=contrast value (0..255), R2 brightness value (0..255)
        EXIT


;******************************************************************************
;
; WriteToDigiPot
;
; Entry
;   R1  = contrast value (0..255) to write to digital potentiometer chip
;   R2  = brightness value (0..255) to write to digital potentiometer chip
;
; Exit
;   All registers preserved.
;
; nRST, DQ and CLK lines driving potentiometer chip left high to
; prevent power usage in their pull-up resistors.
;

rLines   RN 0
rOne     RN 1
rCount   RN 2
rData    RN 3
rAddress RN 4
rTmp     RN 5

WriteToDigiPot
        Entry   "rLines, rOne, rCount, rData, rAddress, rTmp"
        STRB    R1, ContrastValue               ;makes it easier for SendBrightness
        STRB    R2, BrightnessValue             ; and SendContrast to call us

        MOV     rData, R1
        ORR     rData, rData, R2, LSL #8

        MOV     rLines, #(line_nRST :OR: line_CLK :OR: line_DQ)
        BL      writedata                       ;all three lines should have been high already
        BL      writedata                       ; some more hold time

;
; Pull nRST low then high just to provide a nice trigger for the logic analyser
;
        BIC     rLines, rLines, #line_nRST      ;take nRST low
        BL      writedata
        BL      writedata                       ; some more hold time

        ORR     rLines, rLines, #line_nRST      ;take nRST high
        BL      writedata
        BL      writedata                       ; some more hold time

      ;;MOV     rCount, #15             ;highest bit number
        MOV     rCount, #16             ;highest bit number ;ie we send a zero stack bit

        MOV     rOne, #1                        ;Kept in a register cos #1, LSL rCount not allowed
20
        TST     rData, rOne, LSL rCount
        BICEQ   rLines, rLines, #line_DQ        ;setup data
        ORRNE   rLines, rLines, #line_DQ        ;
        BIC     rLines, rLines, #line_CLK       ; and take CLK low
        BL      writedata

        ORR     rLines, rLines, #line_CLK       ;hold data and latch it by raising CLK
        BL      writedata

        SUBS    rCount, rCount, #1
        BGE     %BT20                           ;GE: more bits to transfer

        BL      writedata                       ;some more hold time

        ORR     rLines, rLines, #line_DQ        ;take DQ high (CLK already high)
        BIC     rLines, rLines, #line_nRST      ; and nRST low to transfer data to pot
        BL      writedata                       ;
        BL      writedata                       ; some more hold time


        ORR     rLines, rLines, #line_nRST      ;take nRST high
        BL      writedata                       ;
        BL      writedata                       ;some more hold time

        EXIT

;
; We update the soft copy BEFORE writing to the hardware
; incase an interrupt that uses this hardware occurs.
;
writedata
        Entry
 [ SwitchPower
        LDRB    rTmp, SCLatchMC                 ;Set lines to required state
        BIC     rTmp, rTmp, #linemask           ;
        ORR     rTmp, rTmp, rLines              ;
        STRB    rTmp, SCLatchMC                 ; first in soft copy
        LDR     rAddress, =HWLatchMC            ;
        STRB    rTmp, [rAddress]                ; and then the actual port
        STRB    rTmp, [rAddress]                ; (done a few times to slow
        STRB    rTmp, [rAddress]                ;  the transfer time a bit)
 ]
        EXIT

        LTORG

        END
