;
; Hot Keys
; --------
;
; Handles 'hot keys', eg for LCD Brightness/Contrast.
;
; RCManby 6/10/94
;


;******************************************************************************
;
; HotKeyEventHandler
;
; Entry
;   r0 = event number (must be Event_Keyboard)
;   r1 = 0 for key up, 1 for key down
;   r2 = key number
;   r3 = keyboard driver ID
;
;   May be in IRQ mode or SVC mode
;
HotKeyEventHandler
EventVHandler ROUT
        TEQ     r0, #Event_Keyboard             ; only interested in keyboard event
;>>>    TEQEQ   r3, #2                          ; and only if it's on a Perth keyboard
        MOVNES  pc, lr                          ; if not then exit by passing on vector

        TEQ     r1, #0                          ; we want only key up
        TEQNE   r1, #1                          ; or key down
        MOVNES  pc, lr                          ; if not then exit by passing on vector

       ;DREG    R1, "Key up/down (0/1): &",, LongWord
       ;DREG    R2, "Key number: &",, LongWord
       ;DREG    R3, "Keyboard driver ID: &",, LongWord

;>>>We may get lucky with the 'real' keyboard and find all these are
;>>>sequential, in which case a simple low..high range check will do
        TEQ     r2, #HotKey_ContrastDown
        TEQNE   r2, #HotKey_ContrastUp
        TEQNE   r2, #HotKey_BrightnessDown
        TEQNE   r2, #HotKey_BrightnessUp
        TEQNE   r2, #HotKey_Freeze
        TEQNE   r2, #HotKey_MonLCD
        TEQNE   r2, #HotKey_InvertVideo
        TEQNE   r2, #HotKey_AccessLock
        TEQNE   r2, #HotKey_DimBrightness
        MOVNES  pc, lr                          ;NE, not a key we want, so pass along vector
;
; Switch to SVC mode (from IRQ or SVC mode) as all our hot-keys
; require us to issue SWI calls.
;
        Push    "r0-r3,lr"
        MOV     r0, pc
        ORR     r3, r0, #SVC_mode               ; switch to SVC mode
        TEQP    r3, #0
        NOP
        Push    "r0,lr"
;
; NB branch to ExitHandler to exit
;

;>>>We may get lucky with the 'real' keyboard and find all these are
;>>>sequential, in which case a simple low..high range check will do

        TEQ     r1, #0                          ; check for key up
        BEQ     KeyUpHandler

KeyDownHandler
        TEQ     r2, #HotKey_ContrastDown        ;These four keys auto-repeat,
        BEQ     KeyDown_ContrastDown            ;
        TEQ     r2, #HotKey_ContrastUp          ;
        BEQ     KeyDown_ContrastUp              ; so have KeyDown_Xxxx and KeyUp_Xxxx
        TEQ     r2, #HotKey_BrightnessDown      ;
        BEQ     KeyDown_BrightnessDown          ;
        TEQ     r2, #HotKey_BrightnessUp        ;
        BEQ     KeyDown_BrightnessUp            ; routines
        TEQ     r2, #HotKey_MonLCD
        BEQ     Key_MonLCD
        TEQ     r2, #HotKey_InvertVideo
        BEQ     Key_InvertVideo
        TEQ     r2, #HotKey_AccessLock
        BEQ     Key_AccessLock
        TEQ     r2, #HotKey_DimBrightness
        BEQ     Key_DimBrightness

        B       ExitHandler


KeyUpHandler
        TEQ     r2, #HotKey_ContrastDown        ;Terminate auto-repeat
        BEQ     KeyUp_ContrastDown              ;
        TEQ     r2, #HotKey_ContrastUp          ;
        BEQ     KeyUp_ContrastUp                ;
        TEQ     r2, #HotKey_BrightnessDown      ;
        BEQ     KeyUp_BrightnessDown            ;
        TEQ     r2, #HotKey_BrightnessUp        ;
        BEQ     KeyUp_BrightnessUp              ;
        TEQ     r2, #HotKey_Freeze
        BEQ     Key_Freeze
       ;B       ExitHandler


ExitHandler
        Pull    "r0,lr"
        TEQP    r0, #0                          ; restore old processor mode
        NOP
        Pull    "r0-r3,pc",,^


;
; KeyDown for 'Contrast -'
;             'Contrast +'
;             'Brightness -'
;             'Brightness +'
;
; Action the key once, then setup an auto-repeat handler for the key
;
KeyDown_ContrastDown
        ADRL    R0, LCD_ContrastDown
10
        MOV     R1, #AutoRptDelay
        MOV     R2, #AutoRptRate
        BL      PrepareKeyRepeat
        B       ExitHandler

KeyDown_ContrastUp
        ADRL    R0, LCD_ContrastUp
        B       %BT10

KeyDown_BrightnessDown
        ADRL    R0, LCD_BrightnessDown
10
        MOV     R1, #AutoRptDelay
        MOV     R2, #AutoRptRate
        BL      PrepareKeyRepeat
        B       ExitHandler

KeyDown_BrightnessUp
        ADRL    R0, LCD_BrightnessUp
        B       %BT10


;
; KeyUp for 'Contrast -'
;           'Contrast +'
;           'Brightness -'
;           'Brightness +'
;
; Cancel any auto-repeat for the key
;
KeyUp_ContrastDown
        ADRL    R0, LCD_ContrastDown
        BL      EndKeyRepeat
        B       ExitHandler

KeyUp_ContrastUp
        ADRL    R0, LCD_ContrastUp
        BL      EndKeyRepeat
        B       ExitHandler

KeyUp_BrightnessDown
        ADRL    R0, LCD_BrightnessDown
        BL      EndKeyRepeat
        B       ExitHandler

KeyUp_BrightnessUp
        ADRL    R0, LCD_BrightnessUp
        BL      EndKeyRepeat
        B       ExitHandler


;
; Toggle LCD display brightness between the two user setable levels
;
Key_DimBrightness
        BL      LCD_DimBrightness
        B       ExitHandler


;
; Put machine into sleep mode
;
Key_Freeze
        ADR     R0, CB_Freeze                   ;Setup a callback handler to do this
        MOV     R1, R12                         ;
        SWI     XOS_AddCallBack                 ; when its safe

        B       ExitHandler

CB_Freeze
        Entry   "R0"
        SWI     XPortable_Stop                  ;stop the world - I want to get off
        SWIVS   OS_WriteI+7                     ;VS, failed, so beep
        EXITS


;
; toggle display between CRT and LCD
;
Key_MonLCD
 [ 1 = 1
;We only allow a switch to CRT if docking port is connected
        BL      SWIStatus
        TST     R0, #PortableStatus_DocStationConnected
        BICEQ   R0, R0, #PortableStatus_LCDOn   ;EQ no docking station, so force a switch to LCD
        TST     R0, #PortableStatus_LCDOn
 |
        LDRB    R0, DisplayMode
        TEQ     R0, #0
 ]
        ADREQ   R0, CB_SwitchToLCD
        ADRNE   R0, CB_SwitchToCRT
        MOV     R1, R12
        SWI     XOS_AddCallBack

        B       ExitHandler


CB_SwitchToLCD
        Entry   "R0-R9"
        ADR     R0, LCDCommand
        SWI     XOS_CLI

        MOV     R0, #&FF
        STRB    R0, DisplayMode

        EXIT


CB_SwitchToCRT
        Entry   "R0-R9"
        MOV     R0, #0
        STRB    R0, DisplayMode

        ADR     R0, CRTCommand
        SWI     XOS_CLI

        EXIT


LCDCommand
        ;DCB     "Run ADFS::IDEDisc4.$.LCD.BackToLCD", 0
        DCB     "Run Resources:$.Resources.Portable.SelectLCD", 0

CRTCommand
        ;DCB     "Run ADFS::IDEDisc4.$.LCD.BackToMon", 0
        DCB     "Run <PreDesk$Configure>", 0
        ALIGN


;
; Toggle between normal and inverted palettes (LCD only)
;
Key_InvertVideo
        LDRB    R0, PaletteMode
        EOR     R0, R0, #1                      ;Flip normal/inverted bit
        STRB    R0, PaletteMode

        MOV     R4, #paletteV_LCDInvert
        MOV     R9, #PaletteV                   ;Pass normal/invert command to
        SWI     XOS_CallAVector                 ; VDUdrivers along PaletteV.

        B       ExitHandler

;
; Send a service call round to indicate that the 'AccessLock' key has
; been pressed, this should provide enough of a hook for a security
; module (3rd party) to be written.
;
Key_AccessLock
        MOV     R1, #Service_AccessLockKey
        SWI     XOS_ServiceCall
        B       ExitHandler


;
; PrepareKeyRepeat
;
; Entry
;   R0 = address of action routine
;   R1 = delay
;   R2 = rate
;
; Exit
;   Corrupts R0-R2
;
; We call the action routine once as well as setting
; up a 'ticker' for auto-repeating the key.
;
PrepareKeyRepeat
        Push    "LR"
        STR     R1, KeyRepeatDelay              ;Save 'ticker' parameters
        STR     R2, KeyRepeatRate
        STR     R0, KeyRepeatAction

        LDRB    R0, KeyRepeatFlag               ;0=ticker inactive, 1..n=number of keys held down
        TEQ     R0, #0
        ADD     R0, R0, #1                      ;one more key held down
        STRB    R0, KeyRepeatFlag

        MOVEQ   R0, #KeyRepeatTickerRate-1      ;EQ, Must install ticker
        ADREQ   R1, KeyRepeatHandler            ;    address to call
        MOVEQ   R2, R12                         ;    value of R12 to call it with
        SWIEQ   XOS_CallEvery                   ;

        Pull    "LR"                            ;Restore our return address so we can
        LDR     PC, KeyRepeatAction             ; branch directly to the key action routine


;
; EndKeyRepeat
;
; Entry
;   R0 = address of action routine
;
; Exit
;   Corrupts R0-R1
;
EndKeyRepeat
        Entry
        LDR     R1, KeyRepeatAction             ;
        CMP     R1, R0                          ;Clear key repeat action, only if we are the
        MOVEQ   R1, #0                          ; most recent key to be held down
        STREQ   R1, KeyRepeatAction             ;

        LDRB    R0, KeyRepeatFlag               ;
        SUBS    R0, R0, #1                      ;one less key held down
        STRB    R0, KeyRepeatFlag               ;
                                                ;EQ, no keys held down so remove ticker
        ADREQ   R0, KeyRepeatHandler            ;registered call address
        MOVEQ   R1, R12                         ;registered R12 value
        SWIEQ   XOS_RemoveTickerEvent           ;stop further events
        EXITS


;
; KeyRepeatHandler
;
KeyRepeatHandler
        Push    "LR"
        LDR     LR, KeyRepeatAction
        TEQ     LR, #0
        Pull    "PC",EQ,^                       ;EQ, ticked whilst being cancelled, so do nothing

        LDR     LR, KeyRepeatDelay
        SUBS    LR, LR, #1
        STRGE   LR, KeyRepeatDelay

        Pull    "LR"
        MOVGTS  PC, LR
        LDR     PC, KeyRepeatAction


        END
