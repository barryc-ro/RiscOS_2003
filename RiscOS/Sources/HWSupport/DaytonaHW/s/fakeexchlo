; Floating-point bits for fakeexchange

	GBLL	names
names	SETL	{TRUE}


	AREA	|C$$code|, CODE, READONLY


; byte fakeexchangelo_generate_sample (int sfreq, int snum
;                                     , int freq1, int freq2);

	EXPORT	fakeexchangelo_generate_sample

	ROUT
	[ names
01
	DCB	"fakeexchangelo_generate_sample", 0
	ALIGN
02
	DCD	&ff000000 + %02 - %01
	]

fakeexchangelo_generate_sample

	; Takes sample frequency in Hz, and sample number starting from 0,
	; and generates sample, given dialtone frequencies.
	;
	; Inputs:	sfreq
	;		snum
	;		freq1
	;		freq2	(0 if none)
	;
	; Outputs:	nothing
	;
	; Assumes:	not called from places where FP strictly verboten
	;
	; Returns:	sample in range 0x11 to 0xef

	STMFD	r13!, {r14}

	ACSS	f0, #0		; f0 = PI / 2
	FMLS	f0, f0, #4	; f0 = 2 * PI
	FLTS	f1, a2		; f1 = snum
	FMLS	f0, f0, f1	; f0 = 2 * PI * snum
	FLTS	f1, a1		; f1 = sfreq
	FDVS	f0, f0, f1	; f0 = t = 2 * PI * snum / sfreq
	FLTS	f1, a3		; f1 = freq1
	FMLS	f2, f0, f1	; f2 = t * freq1
	SINS	f2, f2		; f2 = sin (t * freq1)
	CMP	a4, #0		; Are there two frequencies?
	BEQ	justonefreq

	FLTS	f1, a4		; f1 = freq2
	FMLS	f3, f0, f1	; f3 = t * freq2
	SINS	f3, f3		; f3 = sin (t * freq2)
	ADFS	f2, f2, f3	; f2 = sin (t * freq1) + sin (t * freq2)
	FDVS	f2, f2, #2	; f2 = 1 / 2           "

justonefreq

	MOV	a1, #&6f	; Amplitude
	FLTS	f0, a1		; f0 = amplitude
	FMLS	f2, f2, f0	; f2 = <sample from -1 to +1> * amplitude
	MOV	a1, #&80	; Phase shift
	FLTS	f0, a1		; f0 = phase shift
	ADFS	f2, f2, f0	; f2 = <sample from -1 to +1> * amplitude + phase shift
	FIX	a1, f2		; Phew!

	CMP	a1, #&10	; Minor paranoia (should never occur)
	MOVEQ	a1, #&11	; We do not want any <DLE>s in our samples!

	LDMFD	r13!, {pc}^

	LTORG


	END
