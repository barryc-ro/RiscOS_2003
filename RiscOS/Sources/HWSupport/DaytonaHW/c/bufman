/* File:    bufman.c
 * Purpose: Buffer manager veneers
 * Author:  Ben Laughton
 * History: 1997-07-21: MGR: created
 *          1997-07-22: BAL: merged into DaytonaHW, changed formatting to be
 *                           consistent with rest of source code.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include "swis.h"

/* DaytonaHW */
#include "bufman.h"




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   buffermanager_put_byte

   Puts a byte into a buffer.

   Inputs
   b           (internal buffer ID)
   c           (byte to put)

   Returns
   number of bytes not put (0 or 1)
-
 */

extern int buffermanager_put_byte (const unsigned int b, const char c)
{
    _kernel_swi_regs r;

    r.r[0] = BufferManager_InsertByte;
    r.r[1] = (int) b;
    r.r[2] = (int) c;
    if (buffermanager_call_service (&r,
                                    buffermanager_service_routine,
                                    buffermanager_service_pw) & _C)
    {
        return 1;
    }
    return 0;
}




/* -----------------------------------------------------------------------------
+
   byffermanager_put_block

   Puts a block of bytes into a buffer.

   Inputs
   b           (internal buffer ID)
   s           (block to put)
   n           (length of block)

   Returns
   number of characters not put
-
 */

extern int buffermanager_put_block (const unsigned int b,
                                    const char *const s,
                                    const int n)
{
    _kernel_swi_regs r;

    r.r[0] = BufferManager_InsertBlock;
    r.r[1] = (int) b;
    r.r[2] = (int) s;
    r.r[3] = n;
    if (buffermanager_call_service (&r,
                                    buffermanager_service_routine,
                                    buffermanager_service_pw) & _C)
    {
        return r.r[3];
    }
    return 0;
}




/* -----------------------------------------------------------------------------
+
   buffermanager_get_byte

   Attempts to get a byte from a buffer.

   Inputs
   b           (internal buffer ID)

   Returns
   character, or -1 if none available (or error)
-
 */

extern int buffermanager_get_byte (const unsigned int b)
{
    _kernel_swi_regs r;

    r.r[0] = BufferManager_RemoveByte;
    r.r[1] = (int) b;
    if (buffermanager_call_service (&r,
                                    buffermanager_service_routine,
                                    buffermanager_service_pw) & _C)
    {
        return -1;
    }
    return r.r[2];
}




/* -----------------------------------------------------------------------------
+
   byffermanager_get_nfree

   Gets the number of free bytes in a buffer.

   Inputs
   b           (internal buffer ID)

   Returns
   number of free bytes
-
 */

extern int buffermanager_get_nfree (const unsigned int b)
{
    _kernel_swi_regs r;

    r.r[0] = BufferManager_ReturnFreeSpace;
    r.r[1] = (int) b;
    buffermanager_call_service (&r,
                                buffermanager_service_routine,
                                buffermanager_service_pw);
    return r.r[2];
}




/* -----------------------------------------------------------------------------
+
   buffermanager_purge

   Purge a buffer.

   Inputs
   b           (internal buffer ID)
-
 */

extern void buffermanager_purge (const unsigned int b)
{
    _kernel_swi_regs r;

    r.r[0] = BufferManager_PurgeBuffer;
    r.r[1] = (int) b;
    buffermanager_call_service (&r,
                                buffermanager_service_routine,
                                buffermanager_service_pw);
}
