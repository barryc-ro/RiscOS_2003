/* File:    faxreceivr.c
 * Purpose: Detect when local fax machine goes off hook
 * Author:  Ben Laughton
 * History: 1997-07-17: BAL: created
 *          1997-07-27: BAL: changed file name from faxoffhook to faxreceivr
 *                           to reflect change from off hook detection to on and
 *                           off hook detection
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdio.h>
#include "swis.h"

/* Toolbox */
#include "wimp.h"

/* Miscellaneous libraries */
#include "callx/callx.h"

/* DaytonaHW */
#include "daytonahw.h"
#include "faxreceivr.h"
#include "global.h"
#include "modulehdr.h"
#include "pio_reg.h"




/* =============================================================================
 * Define contants
 */

#define LocalFaxReceiver_Mask    (0x40)
#define LocalFaxReceiver_OffHook (0x00)
#define LocalFaxReceiver_OnHook  (0x40)




/* =============================================================================
 * Declare global variables
 */

static unsigned int previous_receiver_state;




/* =============================================================================
 * Declare function prototypes
 */

static _kernel_oserror *local_fax_receiver (_kernel_swi_regs *r,
                                            void *pw,
                                            void *handle);




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   local_fax_receiver_initialise

   Initialise the local fax receiver detection
-
 */

extern _kernel_oserror *local_fax_receiver_initialise (void)
{
    _kernel_oserror *e;

    previous_receiver_state = pio_register_read (LocalFaxReceiver_Mask);
    e = local_fax_receiver_control (DaytonaHW_HookControl_Enable);

    return e;
}




/* -----------------------------------------------------------------------------
+
   local_fax_receiver_control

   Enable/disable on/off hook detection.

   Inputs
   new_state

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *local_fax_receiver_control (const int new_state)
{
    _kernel_oserror *e;

    if (new_state == DaytonaHW_HookControl_Enable)
        e = callx_add_callevery (19, local_fax_receiver, NULL);
    else
        e = callx_remove_callevery (local_fax_receiver, NULL);

    return e;
}



/* -----------------------------------------------------------------------------
+
   local_fax_receiver

   Use TaskModule to send a Wimp message if the local fax receiver
   goes on or off hook

   Inputs
   r:  register block
   pw: module's private workspace pointer

   Returns
   NULL
-
 */

static _kernel_oserror *local_fax_receiver (_kernel_swi_regs *r,
                                            void *pw,
                                            void *handle)
{
    unsigned int receiver_state;

    receiver_state = pio_register_read (LocalFaxReceiver_Mask);

    if (receiver_state != previous_receiver_state)
    {
        if ((g_flags & Flags_SuppressWimpMessages) == 0)
        {
            WimpMessage message;

            message.hdr.size = sizeof (message.hdr) + sizeof (int);
            message.hdr.your_ref = 0;
            message.hdr.action_code = Wimp_MDaytonaHW_LocalFaxReceiver;

            if (receiver_state == LocalFaxReceiver_OffHook)
            {
                message.data.words[0] = DaytonaHW_LocalFaxReceiver_OffHook;
    /*             _swix (DaytonaHW_Buzzer, _INR (0, 1), 0, 1); */
            }
            else
            {
                message.data.words[0] = DaytonaHW_LocalFaxReceiver_OnHook;
    /*             _swix (DaytonaHW_Buzzer, _INR (0, 1), 0, 0); */
            }
            _swix (TaskModule_SendMessage, _INR (0, 4),
                   0, &message, 0, 0, 0);
        }

        previous_receiver_state = receiver_state;
    }

    return NULL;

    M_unused (r);
    M_unused (pw);
    M_unused (handle);
}
