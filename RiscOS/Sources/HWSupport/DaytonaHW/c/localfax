/* File:    localfax.c
 * Purpose: Control the local fax machine.
 * Author:  Ben Laughton
 * History:
 *
 * 1997-07-17: BAL
 * Created.
 *
 * 1997-07-27: BAL
 * Changed file name from faxoffhook to faxreceivr to reflect change from off
 * hook detection to on and off hook detection.
 *
 * 1998-03-09: BAL
 * Renamed file from faxreceivr.c to localfax.c and merged with callfax.c.
 * Now kicks off 'fake exchange' automatically when off-hook is detected
 * (unless we are calling the local fax machine).
 *
 * 1998-05-11: BAL
 * Fixed PAN-01849 where a dialtone would not be generated if off-hook occured
 * while fake exchange was being shut down.  Now sets an 'off-hook pending'
 * flag so that a dialtone is generated when we go idle again.  NB. In this
 * situation the delay between off-hook and dialtone is considerable, but
 * there's not a lot that can be done about this (could possibly modify the
 * dialler to allow prevention of DTR reset at end of hangup script, but no
 * time at the moment).
 *
 * local_fax_initialise no longer reads the state of the on/off hook bit - just
 * assumes that we start on-hook.  This fixes the problem where a dialtone
 * would not be generated if you switched the box on with the local fax machine
 * off-hook.
 *
 * Fixed bug where the callevery-callback combination to monitor on/off hook
 * could stall.  If in the callevery routine the kernel needs to grow the
 * system heap to add the callback then it cannot, because interrupts are
 * disabled.  Fix is to ensure that callback_pending flag does not remain set
 * if the call to add it fails.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdio.h>
#include "swis.h"

/* Toolbox */
#include "wimp.h"

/* Miscellaneous libraries */
#include "callx/callx.h"
#include "DebugLib/debuglib.h"

/* DaytonaHW */
#include "daytonahw.h"
#include "fakeexch.h"
#include "global.h"
#include "interrupts.h"
#include "localfax.h"
#include "modulehdr.h"
#include "pio_reg.h"




/* =============================================================================
 * Define contants
 */

#define LocalFaxReceiver_Mask    (0x40)
#define LocalFaxReceiver_OffHook (0x00)
#define LocalFaxReceiver_OnHook  (0x40)

#define LocalFaxRinger_Mask      (0x80)
#define LocalFaxRinger_Active    (0x00)
#define LocalFaxRinger_Inactive  (0x80)





/* =============================================================================
 * Define types
 */

typedef enum
{
    LocalFax_Idle,
    LocalFax_CallingFax,
    LocalFax_DoingFakeExchange,
    LocalFax_StoppingFakeExchange
} local_fax_state_t;



/* =============================================================================
 * Declare global variables
 */

static local_fax_state_t  local_fax_state = LocalFax_Idle;

static unsigned int previous_receiver_state;

static unsigned int local_fax_receiver_callback_pending = 0;

static unsigned int off_hook_pending = 0;

static int ring_pattern[] =
{
    200,    /* ring time in centiseconds */
    400,    /* pause time in centiseconds */
    -1      /* terminator */
};

static int pattern_stage = 0;
static int ring_state = Off;




/* =============================================================================
 * Declare function prototypes
 */

static _kernel_oserror *  local_fax_receiver_callevery (
                              _kernel_swi_regs *  r,
                              void *              pw,
                              void *              handle);

static _kernel_oserror *  local_fax_receiver_callback (
                              _kernel_swi_regs *  r,
                              void *              pw,
                              void *              handle);

static _kernel_oserror *  change_ring_state (_kernel_swi_regs *  r,
                                             void *              pw,
                                             void *              handle);

static void  off_hook (void);

static void  on_hook (void);



/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   read_key

   Routine for using in TEST mode on a RiscPC.  The right CTRL key simulates the
   receiver on the local fax machine.  In the space key in not pressed then
   the receiver is on-hook, otherwise it is off-hook.

   Returns
   LocalFaxReceiver_OffHook: key pressed
   LocalFaxReceiver_OnHook:  key not pressed
-
 */

#ifdef TEST

static unsigned int  read_key (void)
{
    unsigned int  i;

    _swix (OS_Byte, _INR (0, 1) | _OUT (1),
           121,
           0x87,
           &i);
    if (i == 0xff)
    {
        /* key pressed */
        return LocalFaxReceiver_OffHook;
    }

    return LocalFaxReceiver_OnHook;
}

#endif




/* -----------------------------------------------------------------------------
+
   local_fax_initialise

   Initialise the local fax machine contollers.

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *  local_fax_initialise (void)
{
    _kernel_oserror *e = NULL;


    previous_receiver_state = LocalFaxReceiver_OnHook;
#if 0
#ifdef TEST
    previous_receiver_state = read_key ();
#else
    previous_receiver_state = pio_register_read (LocalFaxReceiver_Mask);
#endif
#endif
    e = local_fax_control_receiver_monitoring (DaytonaHW_HookControl_Enable);

    return e;
}




/* -----------------------------------------------------------------------------
+
   local_fax_control_receiver_monitoring.

   Enable/disable on/off hook detection.

   Inputs
   new_state

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *  local_fax_control_receiver_monitoring (
                              const int  new_state)
{
    _kernel_oserror *e;
    _kernel_oserror *e1;

    if (new_state == DaytonaHW_HookControl_Enable)
    {
        e = callx_add_callevery (4,
                                 local_fax_receiver_callevery,
                                 NULL);
    }
    else
    {
        e = callx_remove_callback (local_fax_receiver_callback,
                                   NULL);


        e1 = callx_remove_callevery (local_fax_receiver_callevery,
                                     NULL);

        local_fax_receiver_callback_pending = 0;

        if (e1 && e == NULL)
        {
            e = e1;
        }
    }

    return e;
}




/* -----------------------------------------------------------------------------
+
   local_fax_call_fax_machine

   Call the local fax machine.

   Inputs
   action: new call state (on / off)
   pw:     pointer to module's private workspace

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *  local_fax_call_fax_machine (const int  action,
                                                      void *     pw)
{
    _kernel_oserror *e;

    if (action == DaytonaHW_CallLocalFax_Start)
    {
        if (local_fax_state != LocalFax_Idle)
        {
            return NULL;
        }

        local_fax_state = LocalFax_CallingFax;
        pattern_stage = 0;
        e = change_ring_state (NULL,
                               pw,
                               NULL);
    }
    else
    {
        if (local_fax_state != LocalFax_CallingFax)
        {
            return NULL;
        }

        e = callx_remove_callafter (change_ring_state,
                                    NULL);

        pio_register_write (LocalFaxRinger_Mask,
                            LocalFaxRinger_Inactive);

        ring_state = Off;
        local_fax_state = LocalFax_Idle;
    }

    return e;
}




/* -----------------------------------------------------------------------------
+
   local_fax_go_idle

   Inform local_fax that it is idle again.  Used by other parts of DaytonaHW
   which use the local fax machine in the background (eg. fake exchange).
-
 */

extern void  local_fax_go_idle (void)
{
    local_fax_state = LocalFax_Idle;
}




/* -----------------------------------------------------------------------------
+
   local_fax_receiver_callevery

   Timer entry point for checking on/off hook.  Set a callback to do the real
   work.

   Inputs
   r:      register block
   pw:     module's private workspace pointer
   handle: private handle

   Returns
   NULL
-
 */

/* Disable CSE otherwise the compiler will screw this function up */
/* #pragma -z0 */
/* BAL: 1998-03-30
 * Removed pragma.  Checked compiled code - looks and works fine now.
 */

static _kernel_oserror *  local_fax_receiver_callevery (
                              _kernel_swi_regs *  r,
                              void *              pw,
                              void *              handle)
{
    M_unused (r);
    M_unused (pw);
    M_unused (handle);


    /* Need a flag to only allow this callevery to register one callback.
     * Otherwise, if some SVC code stayed in a loop for a long time
     * (eg. dtr_reset in modem.c) then the calleverys would continue, but
     * callbacks would not, leading to a flood of callbacks when the loop
     * finishes.
     */
    if (local_fax_receiver_callback_pending == 0)
    {
        local_fax_receiver_callback_pending = 1;
        if (callx_add_callback (local_fax_receiver_callback,
                                NULL))
        {
            local_fax_receiver_callback_pending = 0;
        }
    }

    return NULL;
}

/* Reset CSE to its default state */
/* #pragma -z */




/* -----------------------------------------------------------------------------
+
   local_fax_receiver_callback

   Use TaskModule to send a Wimp message if the local fax receiver
   goes on or off hook.

   Inputs
   r:      register block
   pw:     module's private workspace pointer
   handle: private handle

   Returns
   NULL
-
 */

static _kernel_oserror *  local_fax_receiver_callback (
                              _kernel_swi_regs *  r,
                              void *              pw,
                              void *              handle)
{
    unsigned int  receiver_state;

    M_unused (r);
    M_unused (pw);
    M_unused (handle);

#ifdef TEST
    receiver_state = read_key ();
#else
    receiver_state = pio_register_read (LocalFaxReceiver_Mask);
#endif

    if (receiver_state != previous_receiver_state || off_hook_pending)
    {
        if (receiver_state == LocalFaxReceiver_OffHook)
        {
            off_hook ();
        }
        else
        {
            on_hook ();
        }


        /* If there is an off-hook pending then don't send the message until
         * the off-hook actually occurs.
         */
        if (!off_hook_pending && (g_flags & Flags_SuppressWimpMessages) == 0)
        {
            WimpMessage message;

            message.hdr.size        = sizeof (message.hdr) + sizeof (int);
            message.hdr.your_ref    = 0;
            message.hdr.action_code = Wimp_MDaytonaHW_LocalFaxReceiver;

            if (receiver_state == LocalFaxReceiver_OffHook)
            {
                message.data.words[0] = DaytonaHW_LocalFaxReceiver_OffHook;
            }
            else
            {
                message.data.words[0] = DaytonaHW_LocalFaxReceiver_OnHook;
            }

            _swix (TaskModule_SendMessage,
                   _INR (0, 4),

                   0,
                   &message,
                   0,
                   0,
                   0);
        }
        previous_receiver_state = receiver_state;
    }

    local_fax_receiver_callback_pending = 0;

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   off_hook

   Handle the local fax machine going off hook.
-
 */

static void  off_hook (void)
{
    switch (local_fax_state)
    {
        case LocalFax_Idle:
        {
            int  configured;

            local_fax_state  = LocalFax_DoingFakeExchange;
            off_hook_pending = 0;
            if (fake_exchange_start (&configured))
            {
                local_fax_state = LocalFax_Idle;
                if (!configured)
                {
                    off_hook_pending = 1;
                }
            }

            break;
        }

        case LocalFax_StoppingFakeExchange:
            /* It takes time to stop fake exchange, mainly due to a script
             * being executed to return the modem to a known state.  It is
             * possible that if the fax machine is off-hook and the receiver
             * is briefly pressed (say for 0.5s) then when we detect off-hook
             * (when the receiver is released) while the original fake exchange
             * is shutting down.  We need to flag this so that we can start a
             * dialtone when fake exchange has finished.
             *
             * Fixes PAN-01849.
             */
            off_hook_pending = 1;
            break;

        default:
            break;
    }
}




/* -----------------------------------------------------------------------------
+
   on_hook

   Handle the local fax machine going on hook.
-
 */

static void  on_hook (void)
{
    off_hook_pending = 0;

    if (local_fax_state == LocalFax_DoingFakeExchange)
    {
        local_fax_state = LocalFax_StoppingFakeExchange;
        fake_exchange_stop ();
    }
}




/* -----------------------------------------------------------------------------
+
   change_ring_state

   Change the ring state, cycling through the stages of the ring pattern.

   Inputs
   r:  pointer to register block
   pw: pointer to module's private workspace

   Returns
   NULL
-
 */

static _kernel_oserror *change_ring_state (_kernel_swi_regs *r,
                                           void *pw,
                                           void *handle)
{
    _kernel_oserror *e = NULL;

    M_unused (r);
    M_unused (pw);
    M_unused (handle);

    if (ring_state == On)
    {
        ring_state = Off;

        pio_register_write (LocalFaxRinger_Mask,
                            LocalFaxRinger_Inactive);

        /* Fax off hook bit in processor I/O register only valid when ringer
         * is off, so enable fax off hook detection now that the ringer is
         * switched off.
         */
        e = local_fax_control_receiver_monitoring (
                DaytonaHW_HookControl_Enable);
    }

    else
    {
        ring_state = On;

        /* Fax off hook bit in processor I/O register only valid when ringer
         * is off, so disable fax off hook detection before switching the
         * ringer on.
         */
        e = local_fax_control_receiver_monitoring (
                DaytonaHW_HookControl_Disable);
        if (e == NULL)
        {
            pio_register_write (LocalFaxRinger_Mask,
                                LocalFaxRinger_Active);
        }
    }

    if (e == NULL)
    {
        callx_add_callafter (ring_pattern[pattern_stage],
                             change_ring_state,
                             NULL);

        if (ring_pattern[++pattern_stage] == -1)
        {
            pattern_stage = 0;
        }
    }

    return NULL;
}
