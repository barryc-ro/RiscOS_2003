/* File:    buzzer.c
 * Purpose: Control Daytona's buzzer
 * Author:  Ben Laughton
 * History:
 *
 * 1997-07-14: BAL
 * Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

/* Miscellaneous libraries */
#include "callx/callx.h"

/* DaytonaHW */
#include "buzzer.h"
#include "global.h"
#include "interrupts.h"
#include "modulehdr.h"
#include "pio_reg.h"




/* =============================================================================
 * Define constants
 */

#ifdef TEST
#define Buzzer_Mask     (0x10)
#define Buzzer_Active   (0x00)
#define Buzzer_Inactive (0x10)
#else
#define Buzzer_Mask     (0x01)
#define Buzzer_Active   (0x00)
#define Buzzer_Inactive (0x01)
#endif




/* =============================================================================
 * Define global variables
 */

unsigned int  buzzer_state        = Buzzer_Inactive;
static bool   buzzer_stop_pending = FALSE;




/* =============================================================================
 * Declare function prototypes
 */

static _kernel_oserror *  buzzer_stop (_kernel_swi_regs *  r,
                                       void *              pw,
                                       void *              handle);




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   buzzer
-
 */

extern _kernel_oserror *  buzzer (const bool          new_state,
                                  const unsigned int  state_duration)
{
    unsigned int       irqs;
    _kernel_oserror *  e = NULL;


    irqs = irqs_off ();

    if (buzzer_stop_pending)
    {
        e = callx_remove_callafter (buzzer_stop, NULL);
        if (e == NULL)
            buzzer_stop_pending = FALSE;
        else
        {
            irqs_restore (irqs);
            return e;
        }
    }

  #ifdef TEST
    if (new_state == On)
    {
       _swix (OS_Byte, _INR (0, 2), 202, Buzzer_Active, ~Buzzer_Mask);
    }
    else
    {
       _swix (OS_Byte, _INR (0, 2), 202, Buzzer_Inactive, ~Buzzer_Mask);
    }
    _swix (OS_Byte, _IN (0), 118);
  #else
    if (new_state == On)
    {
        buzzer_state = Buzzer_Active;
        pio_register_write (Buzzer_Mask, Buzzer_Active);
    }
    else
    {
        buzzer_state = Buzzer_Inactive;
        pio_register_write (Buzzer_Mask, Buzzer_Inactive);
    }
  #endif

    if (state_duration > 0 && new_state == On)
    {
        e = callx_add_callafter (state_duration, buzzer_stop, NULL);
        if (e == NULL)
        {
           buzzer_stop_pending = TRUE;
        }
    }
    irqs_restore (irqs);

    return e;
}




/* -----------------------------------------------------------------------------
+
   buzzer_stop

   Stop the buzzer after the time specified by the client.
-
 */

static _kernel_oserror *buzzer_stop (_kernel_swi_regs *r,
                                     void *pw,
                                     void *handle)
{
    M_unused (r);
    M_unused (pw);
    M_unused (handle);

  #ifdef TEST
    _swix (OS_Byte, _INR (0, 2), 202, Buzzer_Inactive, ~Buzzer_Mask);
    _swix (OS_Byte, _IN (0), 118);
  #else
    buzzer_state = Buzzer_Inactive;
    pio_register_write (Buzzer_Mask, Buzzer_Inactive);
  #endif

    buzzer_stop_pending = FALSE;
    return NULL;
}




/* -----------------------------------------------------------------------------
+
   buzzer_initialise
-
 */

extern void  buzzer_initialise (void)
{
    buzzer_state = pio_register_read (Buzzer_Mask);
}




/* -----------------------------------------------------------------------------
+
   buzzer_finalise

   Clean up buzzer stuff when the module dies: make sure that the buzzer is off
   and that there are no pending callafers.
-
 */

extern _kernel_oserror *  buzzer_finalise (void)
{
  #ifdef TEST
    _swix (OS_Byte, _INR (0, 2), 202, Buzzer_Inactive, ~Buzzer_Mask);
    _swix (OS_Byte, _IN (0), 118);
  #else
    buzzer_state = Buzzer_Inactive;
    pio_register_write (Buzzer_Mask, Buzzer_Inactive);
  #endif

    return NULL;
}
