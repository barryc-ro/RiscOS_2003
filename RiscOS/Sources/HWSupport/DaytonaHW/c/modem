/* File:    modem.c
 * Purpose: Reset one of the Daytona modems
 * Author:  Ben Laughton
 * History:
 *
 * 1997-07-14: BAL
 * Created.
 *
 * 1998-01-21: BAL
 * Fixed stupid bug in DTR reset where DTR was got getting asserted again
 * after being deasserted for 1 second.  (Thinking about it, this shouldn't
 * make any difference, but modems will be modems and it seems to.)  This
 * wouldn't even be an issue if hardware reset worked :-(.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

/* Miscellaneous */
#include "DebugLib/debuglib.h"

/* DaytonaHW */
#include "daytonahw.h"
#include "global.h"
#include "ioctl.h"
#include "led.h"
#include "modem.h"
#include "pio_reg.h"




/* =============================================================================
 * Define contants
 */

#define ModemReset_Mask     (0x08)
#define ModemReset_Active   (0x00)
#define ModemReset_Inactive (0x08)




/* =============================================================================
 * Declare function prototypes
 */

#if 0
static _kernel_oserror *pio_register_reset (const int modem);
#endif

#if 1
static _kernel_oserror *dtr_reset (const int serial_out);
#endif

static _kernel_oserror* xosargs_ioctl (const int file,
                                       const int group,
                                       const int reason,
                                       const int wr_flags,
                                       const unsigned int data_in,
                                       unsigned int *const data_out);


/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   modem_reset

   Reset one of Daytona's modems.
-
 */

extern _kernel_oserror *modem_reset (const int modem,
                                     const int serial_handle)
{
    _kernel_oserror *e;

    M_unused (modem);

    e = dtr_reset (serial_handle);
    return e;

#if 0
    _kernel_oserror *e_return = NULL;
#endif


    /* This code is now obsolete because hardware modem reset is finally
     * working - yippee!
     */
#if 0
    switch (reason_code)
    {
        case DaytonaHW_ResetModem_PIOReg:
            e = pio_register_reset (serial_port);
            break;

        case DaytonaHW_ResetModem_DTR:
            e = dtr_reset (serial_port);
            break;

        default:
            /* error */
            break;
    }

    return e;
#endif

#if 0
    e_return = pio_register_reset (modem);
    e = xosargs_ioctl (serial_handle,
                       0,
                       IOCtl_reinit,
                       IOCtl_write,
                       0,
                       NULL);
    if (e_return == NULL && e != NULL)
        e_return = e;

    return e_return;
#endif
}




#if 0
/* -----------------------------------------------------------------------------
+
   pio_register_reset

   Reset a modem using the bits in the Processor I/O register.

   Inputs
   modem: modem to reset

   Returns
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *pio_register_reset (const int modem)
{
    unsigned int current_time, end_time;

    pio_register_write (ModemReset_Mask << modem, ModemReset_Active << modem);

    _swix (OS_ReadMonotonicTime, _OUT (0), &end_time);
    end_time += 3;

    do
    {
        _swix (OS_ReadMonotonicTime, _OUT (0), &current_time);
    } while (current_time < end_time);

    pio_register_write (ModemReset_Mask << modem, ModemReset_Inactive << modem);

    _swix (OS_ReadMonotonicTime, _OUT (0), &end_time);
    end_time += 150;

    do
    {
        _swix (OS_ReadMonotonicTime, _OUT (0), &current_time);
    } while (current_time < end_time);

    return NULL;
}
#endif




#if 1
/* -----------------------------------------------------------------------------
+
   dtr_reset

   Reset a modem by dropping DTR for one second

   Inputs
   serial_out: serial output file handle onto modem to be reset

   Returns
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *dtr_reset (const int serial_out)
{
    unsigned int control_lines;
    unsigned int current_time, end_time;
    _kernel_oserror *e, *e1;


#if 0
#ifdef TEST
    _swix (OS_Byte, _INR (0, 2), 202, 0x10, 0xff);
    _swix (OS_Byte, _IN (0), 118);
#else
    led (DaytonaHW_LED_Error, 0, 1, 0);
#endif
#endif

    /* Read current state of control lines */
    e = xosargs_ioctl (serial_out,
                       0,
                       IOCtl_control_lines,
                       IOCtl_read,
                       0,
                       &control_lines);
    if (e != NULL)
        goto error;    /* nasty, but easiest way to clean up */

    /* Pull DTR low for one second to reset modem */
    control_lines &= (~IOCtl_control_line_DTR);
    e = xosargs_ioctl (serial_out,
                       0,
                       IOCtl_control_lines,
                       IOCtl_read | IOCtl_write,
                       control_lines & IOCtl_control_lines_writable,
                       &control_lines);
    if (e != NULL)
       goto error;    /* nasty, but easiest way to clean up */

    e = _swix (OS_ReadMonotonicTime, _OUT (0), &end_time);
    if (e != NULL)
       goto error;    /* nasty, but easiest way to clean up */

    end_time += 105;    /* 1.05 second (+0.05 for safety) */

    while (e = _swix (OS_ReadMonotonicTime, _OUT (0), &current_time),
           current_time < end_time)
    {
        if (e != NULL)
        {
            goto error;
        }
    }

    /* If an error occurs then jump to here to clean up.  If no error occurs
     * then normal execution also 'falls through' to here.
     */
error:
    /* Pull DTR high again (leaving other lines in same state) */
    control_lines |= IOCtl_control_line_DTR;
    e1 = xosargs_ioctl (serial_out,
                        0,
                        IOCtl_control_lines,
                        IOCtl_read | IOCtl_write,
                        control_lines & IOCtl_control_lines_writable,
                        &control_lines);

    if (e == NULL && e1 != NULL)
        e = e1;

#if 0
#ifdef TEST
    _swix (OS_Byte, _INR (0, 2), 202, 0x10, 0xff);
    _swix (OS_Byte, _IN (0), 118);
#else
    led (DaytonaHW_LED_Error, 0, 0, 0);
#endif
#endif

    return e;
}
#endif



/* -----------------------------------------------------------------------------
+
   xosargs_ioctl

   Simplified interface to OS_Args 9 SWI (IOCtl)

   Inputs
   file     : file handle
   group    : IOCtl group
   reason   : IOCtl reason code
   wr_flags : IOCtl read / write as defined in IOCtl.h (can be both)
   data_in  : value to write (ignored if write flag not set)

   Outputs
   data_out : pointer to value read (specify NULL if not interested)

   Returns
   success  : NULL
   failure  : pointer to error block
-
 */

static _kernel_oserror* xosargs_ioctl (const int file,
                                       const int group,
                                       const int reason,
                                       const int wr_flags,
                                       const unsigned int data_in,
                                       unsigned int *const data_out)
{
    _kernel_oserror* e = NULL;
    ioctl_t ioctl;

    ioctl.reason = reason;
    ioctl.group = group;
    ioctl.reserved = 0;
    ioctl.read = (wr_flags & IOCtl_read) ? 1 : 0;
    ioctl.write = (wr_flags & IOCtl_write) ? 1 : 0;
    ioctl.data = data_in;

    e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, file, &ioctl);
    if (e == NULL && data_out != NULL && (wr_flags & IOCtl_read))
        *data_out = ioctl.data;

    return e;
}
