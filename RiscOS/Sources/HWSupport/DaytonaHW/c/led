/* File:    led.c
 * Purpose: Control Daytona LEDs
 * Author:  Ben Laughton
 * History: 1997-08-19: BAL: created
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdlib.h>
#ifdef TEST
  #include "swis.h"
#endif

/* Miscellaneous libraries */
#include "callx/callx.h"

/* DaytonaHW */
#include "error.h"
#include "global.h"
#include "led.h"
#include "pio_reg.h"




/* =============================================================================
 * Define contants
 */

#define NumberLEDs   (3)

#ifdef TEST
  static unsigned int mask[] = {0x10,0x04};
  static unsigned int active[] = {0x00,0x00};
  static unsigned int inactive[] = {0x10,0x04};
#else
  static unsigned int mask[] =
  {
      0x1, 0x1, 0x2
  };

  static unsigned int active[] =
  {
      0x1, 0x1, 0x2
  };

  static unsigned int inactive[] =
  {
      0x0, 0x0, 0x0
  };
#endif

enum
{
    E_LED_Range,
    E_LED_Time,
    E_LED_Mem
};




/* =============================================================================
 * Define types
 */

typedef struct
{
    unsigned int led;
    unsigned int state;
    unsigned int duration;
    unsigned int on_time;
    unsigned int off_time;
} led_t;




/* =============================================================================
 * Declare global variables
 */

static unsigned int *register_address[] =
{
    (unsigned int *) 0x03010e00,
    (unsigned int *) 0x03010e04,
    (unsigned int *) 0    /* 'magic' address - means use PIO register */
};

static led_t *led_status[] =
{
    NULL,
    NULL,
    NULL
};

static _kernel_oserror led_error[] =
{
    {0, "LED out of range"},
    {1, "Bad time value"},
    {2, "Not enough memory to change LED state"}
};




/* =============================================================================
 * Declare function prototypes
 */

static _kernel_oserror *led_toggle (_kernel_swi_regs *r,
                                    void *pw,
                                    void *handle);

static _kernel_oserror *led_stop (_kernel_swi_regs *r,
                                  void *pw,
                                  void *handle);

static void change_led_state (const int led,
                              unsigned int new_state);




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   led

   Contol Daytona's LEDs

   Inputs
   led:      led to change
   duration: time to leave LED in new state for
             0: stay in this state until this routine called again
   on_time:  time to leave LED on
             0: switch LED off
             1: switch LED on
             >1: time to leave LED on for (implies flashing)
   off_time: time to leave LED off for

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *led (const unsigned int led,
                             const unsigned int duration,
                             const unsigned int on_time,
                             const unsigned int off_time)
{
    _kernel_oserror *e = NULL;


    /* Check that LED is within range.  LED numbering starts from 0 */
    if (led >= NumberLEDs)
        return &led_error[E_LED_Range];

    /* If used, check that off time is within range (can't be 0) */
    if (on_time > 1 && off_time == 0)
        return &led_error[E_LED_Time];


    /* If this LED is already doing something then cancel it and start the
     * new operation.
     */
    if (led_status[led] != NULL)
    {
        _kernel_oserror *e2 = NULL;

        /* If the previous state is set to expire after a certain amount of
         * time then cancel the expiry.
         */
        if (led_status[led]->duration > 0)
            e = callx_remove_callafter (led_stop, &led_status[led]);

        /* If the LED was flashing then cancel the state change routine */
        if (led_status[led]->on_time > 0)
            e2 = callx_remove_callafter (led_toggle, &led_status[led]);

        /* Free the LED state information */
        free (led_status[led]);
        led_status[led] = NULL;    /* indicate no previous state for this LED */

        if (e == NULL)
            e = e2;

        M_e_check_return (e);
    }

    /* If LED state is not static then allocate memory to store state */
    if (on_time > 1 || duration > 0)
    {
        led_status[led] = malloc (sizeof (led_t));
        if (led_status[led] == NULL)
            return &led_error[E_LED_Mem];

        led_status[led]->led = led;
        led_status[led]->state = active[led];
        led_status[led]->duration = duration;
        led_status[led]->on_time = on_time;
        led_status[led]->off_time = off_time;
        if (on_time > 1)    /* LED will flash */
        {
            e = callx_add_callafter (on_time, led_toggle, &led_status[led]);
            if (e != NULL)
            {
                free (led_status[led]);
                led_status[led] = NULL;
                return &led_error[E_LED_Mem];
            }
        }

        /* LED will switch off after a time */
        if (duration > 0 && on_time != 0)
        {
            e = callx_add_callafter (duration, led_stop, &led_status[led]);
            if (e != NULL)
            {
                /* If the LED was going to flash then remove the callafter
                 * added to deal with that.
                 */
                if (on_time > 1)
                    callx_remove_callafter (led_toggle, &led_status[led]);
                free (led_status[led]);
                led_status[led] = NULL;
                return &led_error[E_LED_Mem];
            }
        }
    }

    /* Switch LED to new state */
    if (on_time == 0)
        change_led_state (led, inactive[led]);
    else
        change_led_state (led, active[led]);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   led_finalise

   Switch all LEDs off and cancel any pending state changes

   Returns
   success: NULL
   faliure: pointer to error block
-
 */

extern _kernel_oserror *led_finalise (void)
{
    int i;
    _kernel_oserror *e = NULL, *return_e = NULL;


    /* Always try to complete, even if an error occurs.  If multiple errors
     * occur then at the end return the first one.
     */

    for (i = 0; i < NumberLEDs; ++i)
    {
        if (led_status[i] != NULL)
        {
            /* If this LED's state is set to expire after a certain amount of
             * time then cancel the expiry.
             */
            if (led_status[i]->duration > 0)
            {
                e = callx_remove_callafter (led_stop, &led_status[i]);
                if (e != NULL && return_e == NULL)
                    return_e = e;
            }

            /* If this LED is flashing then cancel the state change routine */
            if (led_status[i]->on_time > 0)
            {
                e = callx_remove_callafter (led_toggle, &led_status[i]);
                if (e != NULL && return_e == NULL)
                    return_e = e;
            }

            free (led_status[i]);
            led_status[i] = NULL;

            change_led_state (i, inactive[i]);
        }
    }

    return e;
}




/* -----------------------------------------------------------------------------
+
   led_toggle

   Change the state on the LED when it's flashing

   Inputs
   r:      pointer to register block
   pw:     module's private workspace pointer
   handle: routine's private data pointer

   Returns
   NULL
-
 */

static _kernel_oserror *led_toggle (_kernel_swi_regs *r,
                                    void *pw,
                                    void *handle)
{
    led_t *led_status = *((led_t **) handle);
    led_t **led_status_ptr = (led_t **) handle;

    if (led_status->state == active[led_status->led])
    {
        led_status->state = inactive[led_status->led];
        change_led_state (led_status->led,
                          inactive[led_status->led]);
        callx_add_callafter (led_status->off_time, led_toggle, led_status_ptr);
    }
    else
    {
        led_status->state = active[led_status->led];
        change_led_state (led_status->led,
                          active[led_status->led]);
        callx_add_callafter (led_status->on_time, led_toggle, led_status_ptr);
    }

    return NULL;

    M_unused (r);
    M_unused (pw);
}




/* -----------------------------------------------------------------------------
+
   led_stop

   Switch the LED off when it's been in its current state for the specified
   length of time.

   Inputs
   r:      pointer to register block
   pw:     module's private workspace pointer
   handle: routine's private data pointer

   Returns
   NULL
-
 */

static _kernel_oserror *led_stop (_kernel_swi_regs *r,
                                  void *pw,
                                  void *handle)
{
    led_t *led_status = *((led_t **) handle);
    led_t **led_status_ptr = (led_t **) handle;


    if (register_address[led_status->led] == 0)
        pio_register_write (mask[led_status->led], inactive[led_status->led]);
    else
        *register_address[led_status->led] = inactive[led_status->led];

    /* If LED is flashing then cancel state change routine */
    if (led_status->on_time > 1)
        callx_remove_callafter (led_toggle, led_status_ptr);

    /* Free LED status information */
    free (led_status);
    *led_status_ptr = NULL;

    return NULL;

    M_unused (r);
    M_unused (pw);
}




/* -----------------------------------------------------------------------------
+
   change_led_state

   Change the state of an LED.
-
 */

static void change_led_state (const int led,
                              unsigned int new_state)
{
    if (register_address[led] == 0)    /* use PIO register */
        pio_register_write (mask[led], new_state);
    else
        *register_address[led] = new_state;
}
