; > Doc.Portable

 Title:                         Doc.Portable
 Authors:                       Tim Dobson, Christopher Partington
 Started:                       26-Apr-91
 Last updated:                  13-Apr-92 (TMD)
 Status:                        Preliminary


Documentation of the Portable module
====================================

This module provides support for the Acorn portable machine. These SWIs are
not normally intended to be issued from user programs, they will normally be
issued by other modules in the system.

SWIs provided are as follows:-

 Portable_Speed (&42FC0)
 -----------------------

This SWI controls the processor speed, which is reduced when the system is
idle in order to save power.

 in:    R0 = EOR mask
        R1 = AND mask

new speed = (old speed AND R1) EOR R0

 out:   R0 = old speed
        R1 = new speed

Speed settings currently supported are as follows:-

        0       fast
        1       slow

 Portable_Control (&42FC1)
 -------------------------

This SWI control various power control and miscellaneous bits in the portable machine.

 in:    R0 = EOR mask
        R1 = AND mask

new control = (old control AND R1) EOR R0

 out:   R0 = old control
        R1 = new control

where the bits in control are as follows:-

        Bit     Meaning

        0       Set => power to Econet enabled

        1       Set => power to LCD display enabled

        2       Set => power to external video display enabled

        3       Set => power to serial buffer and oscillator enabled

        4       Set => dual panel mode enabled

        6,5     Video clock control
                  0,0 => External clock input
                  0,1 => Crystal oscillator, divided by 2
                  1,0 => Crystal oscillator
                  1,1 => reserved, do not use

        7       Set => invert video clock

        8       Set => back-light enabled

        9       Clear => 1 extra line on display, Set => 2 extra lines

        10      Clear => 1 DRAM used for dual panel, Set => 2 DRAMs

        11-13   Reserved: these bits must not be modified, nor assumed to read
                 any particular value.

        14      Set => power to FDC oscillator enabled

        15      Reserved: this bit must not be modified, nor assumed to read
                 any particular value

        16      Set => LCD palette set up for inverse video

        17..31  Reserved: these bits must not be modified, nor assumed to
                 read any particular value.

Note that the 82C711 has one oscillator which is used by the serial subunit
and by the FDC. Power to the oscillator is removed only if bits 3 and 14 are
both clear.

On Issue 'A' Perth PCBs the power to the oscillator cannot be removed
because the same oscillator drives other parts of the system (eg IOEB). It
may be possible on later issue PCBs (this has yet to be confirmed).

If this call results in bits 0, 3 or 14 changing (ie power being
removed or applied to the serial buffer/oscillator, Econet or FDC oscillator), then
the following service calls are issued:-

        r1 = Service_Portable (&8A)
        r2 = ServicePortable_PowerDown (0)
        r3 = bit mask of which ports are being powered down, out of the
             subset above (bit set => port is being powered down)

This call is issued before the hardware is powered down, and gives the owner
of the hardware a chance to prevent this.

If a module wishes to prevent its hardware being powered down, it should
clear the appropriate bit or bits in r3. In addition, if the resulting value
in r3 is now zero, the module should claim the service by setting r1 to
zero. (This is to prevent the call being unnecessarily passed round the rest
of the modules). Otherwise the service should be passed on (preserve r1).

After power has been reapplied to any of the above subset of ports, the
following service call is issued:-

        r1 = Service_Portable (&8A)
        r2 = ServicePortable_PowerUp (1)
        r3 = bit mask of which ports have just been powered up, out of the
             subset above (bit set => port has been powered up)

This call should never be claimed.


 Portable_ReadBMUVariable (&42FC2)
 ---------------------------------

This SWI reads Battery Management Unit variables.

 in:    R0 = BMU variable number

 out:   R0 preserved (unless error)
        R1 = value of variable

The BMU variable numbers are:

Variable : Read/Write : Description

   0           R        version number and memory map of BMU microcode
   1           R        nominal battery capacity
   2           R        measured battery capacity
   3           R        used battery capacity
   4           R        usable battery capacity
   5           R        reserved
   6           R/W      charge estimate
   7           R        instantaneous voltage
   8           R        instantaneous current
   9           R        instantaneous temperature
  10           R        flags as follows
                           Bit   Meaning
                           1     Set => lid is open
                           2     Set => threshold 2 reached
                           3     Set => threshold 1 reached
                           4     Set => charging system fault
                           5     Set => charge state is known
                           6     Set => battery present
                           7     Set => charger connected
  11           R        charge rate (bits 4 to 7)

Variable units: to be defined

Reading any variable except the flags (variable 10) will enable IRQs (the
flags are read from a soft copy).


 Portable_WriteBMUVariable (&42FC3)
 ----------------------------------

This SWI writes Battery Management Unit variables.

 in:    R0 = BMU variable number
        R1 = new value of variable

 out:   R0 preserved (unless error)
        R1 preserved

Where the variable numbers are as for Portable_ReadBMUVariable.
Variables not marked with a 'W' should not be written.


 Portable_CommandBMU (&42FC4)
 ----------------------------

This SWI issues a command to the Battery Management Unit. The values of
variables after a command may not change immediately this command is issued.

 in:    R0 = command 
        R1 etc. parameters

 out:   R0 preserved (unless error)
        Other registers preserved

The BMU commands are:

Command : Description
   1      Remove power
   2      Reserved
   3      Reserved
   4      Set autostart (R1 = delay in 256 second units)


 Event_PortableBMU ()
 --------------------

The Portable module will generate this event in response to interrupts from
the BMU. The event routine will be entered with the following parameters:

 in:    R0 = Event_PortableBMU
        R1 = status bits as for variable 10 (above)

 out:   All registers and flags must be preserved

This event should not be claimed.


 LCD drivers
 ===========

The Portable module also provides drivers for the LCD display. The LCD
screen modes are selected by configuring MonitorType to 5, or to Auto when
there is no external monitor plugged in.

(Note: if there is an external monitor plugged in, but the monitor type ID
pins are not connected, this is indistinguishable from having no monitor
plugged in, so the LCD screen modes will be used. In this case, you should
manually configure MonitorType for the type of external monitor fitted).

The screen modes provided by the Portable module are as follows:-

        Mode numbers    Type of mode    X-pixels        Y-pixels

         0 - 15         TV standard     640/320/160     256/250
        25 - 28         VGA             640             480
        41 - 43         EGA             640             352
        44 - 46         CGA             640             200

Note that all modes apart from 25 to 28 use only a subset of the lines on
the LCD display. The aspect ratio of circles etc drawn in these modes will
be wrong.

It is expected that most users will select mode 27 for desktop use. The
other modes are really only provided so that programs which require a
particular screen mode (eg games) will work satisfactorily.

 Colour -> grey-scale mapping
 ----------------------------

The Portable module has to convert the users RGB palette settings into a
grey-scale value in the range 0 to 14 (the LCD panel only supports 15 unique
grey levels). It does this using the following algorithm:-

 Luminance = (4 * Green) + (2 * Red) + Blue

Red, Green and Blue are in the range 0 to 255, so the luminance is in the
range 0 to 1785 (=255*7). It is then mapped down onto the range 0 to 14
using the following table:-

  Luminance        Grey level   What palette reads back for R=G=B

    0 -  118            0               &00
  119 -  237            1               &12
  238 -  356            2               &24
  357 -  475            3               &37
  476 -  594            4               &49
  595 -  713            5               &5B
  714 -  832            6               &6D
  833 -  952            7               &7F
  953 - 1071            8               &92
 1072 - 1190            9               &A4
 1191 - 1309           10               &B6
 1310 - 1428           11               &C8
 1429 - 1547           12               &DB
 1548 - 1666           13               &ED
 1667 - 1785           14               &FF

(The mapping table above is provided for information only, and may be
subject to change in later versions of the Portable module).

In 256-colour modes the colour mapping is partly determined by the hardware,
since the top 4 bits of the pixel value go directly to particular bits of
the three guns, and the LCD ASIC only takes input from VIDC's red output.

Thus the grey level will not in general map correctly from the luminance of
the RGB value which would normally be output.

 Hot keys
 --------

The Portable module recognises a number of FN key combinations, to provide
extra functions:-

 FN-F9 (ie holding down FN and pressing F9) causes the LCD display
grey-scale to be inverted (ie black becomes white and vice versa).

 Pressing FN-F9 again restores the display to its normal state. This key
combination has no effect when a non-LCD screen mode is selected.

 FN-F10 blanks the screen and causes all IDE hard discs to immediately power
down.

 CMOS settings
 -------------

On a CMOS reset (ie Delete, Copy, R or T power-on), the Portable module
stores some values in CMOS RAM which are different from the non-portable
defaults. The changes are as follows:-

        Setting                 Normal default          Portable default
        -------                 --------------          ----------------

        Keyboard delay          32 (centiseconds)       25

        Keyboard repeat         8  (centiseconds)       6

        Screen blank time       Off                     5 minutes

        SoundDefault            1 7 1                   1 6 2

        Beep volume             Quiet                   Loud

        Time before IDE disc    Infinite (never         2 minutes
        spin-down               spin down)

        !BatMgr icon            Off                     On
