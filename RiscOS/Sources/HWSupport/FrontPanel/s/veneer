; > veneer.s
;
;       Veneer for events and vectors.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand


; Explicit imports/exports.
;
        IMPORT  |_Lib$Reloc$Off$DP|

; Macro for defining input veneers.
;
        MACRO
$label  InputVeneer $function
        EXPORT  $label
        IMPORT  $function
$label.Indirect
        DCD     $function
$label  Push    "r10-r12,lr"
        LDR     r11, $label.Indirect
        B       CallC
        MEND


        AREA    |veneer$$code|,REL,CODE,READONLY

veneer_frontpanel_irq           InputVeneer     frontpanel_irq
veneer_frontpanel_callback      InputVeneer     frontpanel_callback
veneer_frontpanel_switchstandby InputVeneer     frontpanel_switchstandby


UserModeCall
;       Get into SVC mode from user mode for C call.
;
        SWI XOS_EnterOS
        B   %FT10

CallC
; In:   r11->routine to call
;       r12->private word
;       registers "r10-r12,lr" stacked
;
        SavePSR r10                     ; save caller's PSR
        TEQNE   r0, r0                  ; ensure at least one flag (Z) is set for next instruction to work
        TEQ     pc, pc                  ; set Z if in a 32-bit mode
        BEQ     CallC32
        TST     r10, #3
        BEQ     UserModeCall            ; If in user mode then we need to call SWI (shouldn't happen often).
        ORR     lr, r10, #SVC_mode      ; If in IRQ mode then switch to SVC mode.
        TEQP    lr, #0                  ; perhaps switch mode
        B       %FT10
CallC32
        MOVS    lr, r10, LSL #28        ; set Z if in USR26 or USR32 mode
        BEQ     UserModeCall
        TEQ     lr, #IRQ26_mode :SHL: 28; in IRQ26/IRQ32 mode?
        EOREQ   lr, r10, #(IRQ32_mode :EOR: SVC32_mode) ; constuct change mask, apply to PSR
        MSREQ   CPSR_c, lr              ; change mode, preserving I and F
10
        Push    "r0-r10,lr"             ; Save regs r0-r9 (for call) + old mode in r10 + SVC_lr
        MOV     r10, r13, LSR #20
        MOV     r10, r10, ASL #20
        LDMIA   r10, {r4,r5}            ; Save old relocation modifiers.
        MOV     r9, r11
        MOV     r1, r12                 ; Pass private word in r1.
        LDR     r12, [r12]              ; Set up our relocation modifiers.
        LDMIB   r12, {r11,r12}
        STMIA   r10, {r11,r12}
        ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E28AA000
        MOV     r11, #0                 ; Halt C backtrace here!

        MOV     r0, sp                  ; Parameter is _kernel_swi_regs *
        MOV     lr, pc                  ; Branch to the code.
        MOV     pc, r9

        ; This is equivalent of 'SUBS r10, r10, #0' + |_Lib$Reloc$Off$DP|
        DCD     |_Lib$Reloc$Off$DP| + &E24AA000
        STMIA   r10, {r4,r5}            ; Restore old relocation modifiers.
        Pull    "r0-r10,lr"             ; Get output registers + old mode in r10 + SVC_lr

        RestPSR r10
        TEQNE   r0, r0                  ; ensure Z set for next instruction
        TEQ     pc, pc
        Pull    "r10-r12,pc",NE,^       ; Return to caller (26-bit exit)
        Pull    "r10-r12,pc"            ; Return to caller (32-bit exit)


        END
