/* > frontpanel.c
 *
 *	  FrontPanel code.
 */

#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "frontpanel.h"
#include "standby.h"
#include "veneer.h"
#include "iomd.h"


static int Flags = 0;


static void
SwitchStandby( void )
{
	/* Get current standby state. */
	int state;
	_kernel_oserror *err = _swix( Standby_State, _IN(0)|_OUT(0), 0, &state );

	/* If we got the current state then set the opposite state. */
	if ( err == NULL )
		_swix( (state & STANDBY_STANDBY) ? Standby_Online : Standby_Standby, _IN(0), 0 );
}


_kernel_oserror *
frontpanel_initialise( void *pw )
{
	/* Claim the interrupt vector. */
	_kernel_oserror *err = _swix( OS_ClaimDeviceVector, _INR(0,2), FRONTPANEL_DEVNO, veneer_frontpanel_irq, pw );

	if ( err == NULL )
	{
		/* If we got the vector then enable the interrupt. */
		int old_irqs = veneer_irqs_off();
		*(char *)IOMD_IRQMSKC |= IOMD_FRONTPANEL_IRQ_BIT;
		veneer_irqs_on( old_irqs );
	}

	return err;
}


void
frontpanel_finalise( void *pw )
{
	/* Disable the interrupt. */
	int old_irqs = veneer_irqs_off();
	*(char *)IOMD_IRQMSKC &= ~IOMD_FRONTPANEL_IRQ_BIT;
	veneer_irqs_on( old_irqs );

	/* Release the interrupt vector. */
	_swix( OS_ReleaseDeviceVector, _INR(0,2),
                FRONTPANEL_DEVNO, veneer_frontpanel_irq, pw );

	/* Remove possible pending callback.
	 */
	if ( Flags & FRONTPANEL_BUSY_FLAG )
		_swix( OS_RemoveTickerEvent, _INR(0,1), veneer_frontpanel_callback, pw );
}


void
frontpanel_irq( _kernel_swi_regs *r, void *pw )
{
	/* Interrupt from front panel button. Set a callback and disable the interrupt.
	 */
	if ( _swix(OS_CallAfter, _INR(0,2), FRONTPANEL_CALLAFTER, veneer_frontpanel_callback, pw) == NULL )
	{
		Flags |= FRONTPANEL_BUSY_FLAG;
		*(char *)IOMD_IRQMSKC &= ~IOMD_FRONTPANEL_IRQ_BIT;
	}

	NOT_USED( r );
}


void
frontpanel_callback( _kernel_swi_regs *r, void *pw )
{
	int old_irqs;

	/* Only handle the real interrupt once.
	 */
	if ( (Flags & FRONTPANEL_HANDLED_FLAG) == 0 )
	{
		SwitchStandby();
		Flags |= FRONTPANEL_HANDLED_FLAG;
	}

	/* If the button is still pressed then keep setting callbacks
	 * until it is released.
	 */
	if ( (*(char *)IOMD_IOLINES & IOMD_FRONTPANEL_IRQ_BIT) == 0 )
	{
		if ( _swix(OS_CallAfter, _INR(0,2), FRONTPANEL_CALLAFTER, veneer_frontpanel_callback, pw) == NULL )
			return;
	}

	/* Button has been released (or callback failed to set) so reset
	 * our flags and enable the interrupt again.
	 */
	Flags &= ~(FRONTPANEL_BUSY_FLAG | FRONTPANEL_HANDLED_FLAG);

	old_irqs = veneer_irqs_off();
	*(char *)IOMD_IRQMSKC |= IOMD_FRONTPANEL_IRQ_BIT;
	veneer_irqs_on( old_irqs );

	NOT_USED( r );
}
