/*	MODULE.C

Project : Falcon II (STBOS 4.3)
Module: STBState

Purpose:


History:

Date      Who     Description of change
===========================================
 ??        ??      File created

20/09/95   RWB     Added STBStateOn command.

12/8/97    CP      Added standard control header

                   Changed behaviour of Standby SWI.  Basically this is to
                   get over a serious bug in the overall operation of the
                   STBOS.  Previously, this module stopped the processor when
                   standby SWI was received, then restarted the code from 0
                   (0 pushed into PC - see s.Reset).  However, during boot,
                   there is a chance that an IRQ is received - and since the
                   DRAM is no longer valid because the processor was stopped,
                   it cannot be handled and the whole thing gets very
                   confused, and locks.  This has been fixed (for now) by
                   making the module simply switch the screen off.

                   Added debug printfs to show visually whether TV was
                   supposed to be 'on' or 'off' instead of actually switching
                   the relays (#define FX to turn these on).

                   Added functions to fade screen in and out (based on Basic
                   proglets screenon and screenoff).

                   Changed the way module handles consecutive standby SWIs
                   (busy day today :-) ).  This allows greater flexibility.

19/1/99    OL      Put outstanding printf in #define.

                   Add new *command 'STBState_Reboot 0|1'. This allows the user
                   to determine if they want the box to reboot on coming out
                   of standby. By default it does not reboot (reboot = 0).

01-Feb-1999  BJGA  v0.07: added issuing of Service_Standby when going into /
                   out of standby mode. Initially for the use of the
                   Macrovision module.
10-Feb-1999 NDT    v0.08: Fixed a bug where Hourglass_Off in standby would
                   turn the green LED on.  The hourglass only works in the
                   ON state now.
08-Mar-1999 OL     Set default reboot state to be TRUE.
03-Mar-2000 SAR    Withdrew the above change to make reboot off the default state.
                   Also changed the *STBStateOn command to do nothing (rather than
                   change screen mode).

***************************************************************************/

#undef FX /* visual TV on/off reports :-) */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#include "kernel.h"
#include "swis.h"
#include "time.h"
#include "Global/Upcall.h"
#include "Global/Services.h"
#include "Global/PaletteV.h"

#include "NVRAM.h"
#include "PortMan.h"

#include "STBstate.h"

#undef DEBUG			/* Debug mode */

#define FALSE	0
#define TRUE	(!FALSE)

#define FLASH_INTERVAL	50	/* Flash the leds every 50 centiseconds */
#define TIMEOUT		30	/* Init state times out to fatal after 30s */
#undef TIMEOUT

#define PaletteV  0x23 /* for OS_CallAVector */

/*
 * Other people's things
 */
#ifndef MPEGVideo_CardControl
  #define MPEGVideo_CardControl	0x49305
  #define TVBits (32+64)
  #define TVBit_RGB (64)
  #define TVBit_TVOn (32)
#endif

#ifndef Sound_SampleRate
#  define Sound_SampleRate 0x40146
#endif

/*
 * CMOS stuff
 */
#define ReadCMOS	0xA1
#define WriteCMOS	0xA2
#define StartCMOS	0x0B
#define STANDBY_BIT	128

/*
 * OS_Byte stuff - This appears not to be defined outside the Kernel?
 */
#define KeyBdDisable 0xC9


/*
 * Bits in IRQA mask
 */
#define TIMER_BITS	(64+32)


/*
 * Types
 */
typedef unsigned char byte;
typedef enum {
  LED_OFF=PORTMAN_FLAG_CLEAR,
  LED_ON=PORTMAN_FLAG_SET,
  LED_FLASH=PORTMAN_FLAG_TOGGLE
} led_t;
typedef enum {
  DOG_ON=PORTMAN_FLAG_CLEAR,
  DOG_OFF=PORTMAN_FLAG_SET
} dog_t;

/*
State info?  As guessed CP 30/7/97.
Based on STBState module functional spec Issue 0.09, 11 Jan 1996
(NFS::spinner.$.Func-Spec.Software.Falcon.State009)

OFF_PT   Off, pass-through
OFF_LP   Off, low power
FATAL    Fatal error
INIT     Establishing session
ON       Online
NONE     help!! Undefined
*/
typedef enum { OFF_PT = 0, OFF_LP = 1,
               FATAL = 2, INIT = 4,
               ON = 6,
               NONE = -1 } state_t;


/*
 * Globals (dontcha love em) (No!  CP, 12/8/97)
 */
volatile byte *susp_reg = (byte *) 0x320001C;	/* Morris SUSPENDMODE register*/
volatile byte *irqmska = (byte *) 0x3200018;	/* Morris IRQA interrupt mask */
volatile byte *stop_reg = (byte *) 0x320002C;	/* Morris STOPMODE register   */
volatile byte *atodicr = (byte *) 0x32000E0;	/* Morris A2D interrupt ctrl  */
volatile byte *vidcr = (byte *) 0x32001E0;	/* Morris video DMA control   */
volatile unsigned *vid_addr = (unsigned *) 0x3500000;	/* VIDC20 space       */
volatile byte *resettype = (byte *) 0x322;	/* ResetType in PublicWS      */

_kernel_oserror *e;
_kernel_swi_regs regs;

byte cmospowerdown;
int red_flash = 0, green_flash = 0;	/* non-zero if led should be flashing */
state_t state = INIT;			/* The state we're in (man)           */
int timer = 0;				/* timeout timer                      */
int busy_level = 0;			/* Nested Busys, 0 = not busy         */
int reboot = FALSE;			/* Reboot on coming out of standby ?  */
static const char tv_var[] = "TVOn";

/* To disable the mouse we set the type to MOUSE_TYPE_NONE and store the old
 * type here. */
#define MOUSE_TYPE_NONE 255
static int mouse_type=MOUSE_TYPE_NONE;


/*
 * Function declarations
 */
extern void do_reset(void);
_kernel_oserror *STBState_swi (int swi_no, _kernel_swi_regs *r, void *pw);
static void show_state(state_t);
static void set_io_port(led_t red, led_t green, dog_t watch);
static void tv_on(void);
static void tv_off(int stop);
static void go_on(void);
static void go_busy(int r0);
static void go_off(void);
static void go_fatal(void);



/******* fadein ************************************************************

Purpose: fades the screen in by changing the gamma correction table.
         Table is set to 0-255

Inputs: none

Outputs: none

***************************************************************************/

void fadein(void)
{
  regs.r[0] = (int)0;
  regs.r[4] = paletteV_BlankScreen; /* reason code */
  regs.r[9] = PaletteV; /* vector */

  _kernel_swi(OS_CallAVector, &regs, &regs);
}

/******* fadeout ***********************************************************

Purpose: fades the screen to black by changing the gamma correction table.
         Table is set to all-0

Inputs: none

Outputs: none

***************************************************************************/

void fadeout(void)
{
  regs.r[0] = (int)1;
  regs.r[4] = paletteV_BlankScreen; /* reason code */
  regs.r[9] = PaletteV; /* vector */

  _kernel_swi(OS_CallAVector, &regs, &regs);
}

/******* show_state ********************************************************

Purpose: Update the LEDs according to the specified state.

Inputs: The state to indicate

Outputs: none

***************************************************************************/

void show_state(state_t new_state)
{
  switch(new_state)
  {
  case INIT:
    set_io_port(LED_ON, LED_FLASH, DOG_ON);
    break;

  case ON:
    if(busy_level)
      set_io_port(LED_OFF, LED_FLASH, DOG_ON);
    else
      set_io_port(LED_OFF, LED_ON, DOG_ON);
    break;

  case FATAL:
    set_io_port(LED_FLASH, LED_OFF, DOG_ON);
    break;

  case OFF_PT: case OFF_LP:
    set_io_port(LED_ON, LED_OFF, DOG_OFF);
    break;

  default: /* Unknown state - make it clear */
    set_io_port(LED_FLASH, LED_ON, DOG_ON);
    break;
  }
}

/*
 * Start here
 */
_kernel_oserror *STBState_init (const char *cmd_tail, int podule_base, void *pw)
{
  /*
   * Setup a callevery function to flash the leds as required
   */
  regs.r[0] = FLASH_INTERVAL;
  regs.r[1] = (int) STBState_callevery_entry ;
  regs.r[2] = (int) pw;
  if ((e = _kernel_swi (OS_CallEvery, &regs, &regs)) != NULL)
    return (e);

  /* Display the INIT state */
  show_state(INIT);

  /* Switch the TV on. */
  tv_on();

  /* Record state of the CMOS Standby bit */
  regs.r[0] = ReadCMOS;
  regs.r[1] = StartCMOS;
  _kernel_swi (OS_Byte, &regs, &regs);
  cmospowerdown = (!(regs.r[2] & STANDBY_BIT));

  /* Set the STBReset$Type environment variable */
  regs.r[0] = (int) "STBReset$Type";
  regs.r[1] = (int) (((*resettype) & 1) ? "PowerOn" : "Standby");
  regs.r[2] = strlen((char*) (regs.r[1]));	/* length */
  regs.r[3] = 0;
  regs.r[4] = 4;				/* LiteralString */
  _kernel_swi (OS_SetVarVal, &regs, &regs);

  return NULL;
}


/*
 * Called by on module death (which shouldn't usually happen)
 */
_kernel_oserror *STBState_final(int fatal, int podule, void *pw)
{
  /*
   * Get off callevery
   */
  regs.r[0] = (int) STBState_callevery_entry;
  regs.r[1] = (int) pw;
  return _kernel_swi (OS_RemoveTickerEvent, &regs, &regs);
}

/*----------------------------------------------------------------------
    Name : STBState_cli_handler

    Description : Handle command line interface to this module.
----------------------------------------------------------------------*/
_kernel_oserror *STBState_cli_handler(const char *arg_string, int arg_count,
                                      int cmd_no, void *pw)
{
  switch(cmd_no)
  {
  case CMD_STBStateOn:
    /* Do the STBState_On call */
    if ((state == INIT) || (state == OFF_PT)) go_on();

//    /* Look at what the configured Wimp mode is */
//    regs.r[0] = 1;
//    _kernel_swi(OS_ReadSysInfo,&regs,&regs);
//
//    /* Change mode to the configured Wimp mode */
//    regs.r[1] = regs.r[0];                    /* Copy wimp mode into r1 for next call */
//    regs.r[0] = 0;
//    _kernel_swi(OS_ScreenMode,&regs,&regs);
    break;

  case CMD_STBState_Reboot:
    reboot = atoi(arg_string);
    if (reboot != 1)
      reboot = 0;
    break;
  }
  return NULL;
}

/*
 * Update the LED and watchdog bits in the IO port
 */
void set_io_port(led_t red, led_t green, dog_t watch)
{
  _kernel_swi_regs regs;

  red_flash=(red==LED_FLASH);
  regs.r[0]=red;
  regs.r[1]=(int)PortMan_LED_Red;
  _kernel_swi(PortMan_AccessBit, &regs, &regs);

  green_flash=(green==LED_FLASH);
  regs.r[0]=green;
  regs.r[1]=(int)PortMan_LED_Green;
  _kernel_swi(PortMan_AccessBit, &regs, &regs);

  regs.r[0]=watch;
  regs.r[1]=(int)PortMan_Watchdog;
  _kernel_swi(PortMan_AccessBit, &regs, &regs);
}


/*
 * Flash the LEDs if they need flashing, and check for timeout if in init state
 *
 * Note that there is currently no state which is displayed with both leds
 * flashing simultaneously. If there were, this code and the code in set_io_port
 * might need to be fixed to ensure that the leds flashed in sync rather than
 * alternately
 */
extern _kernel_oserror *STBState_callevery_handler(_kernel_swi_regs *r, void *pw)
{
  _kernel_swi_regs regs;

  /*
   * Check timeout
   */
#ifdef TIMEOUT
  if ( (++timer >= TIMEOUT * (100 / FLASH_INTERVAL)) && (state == INIT) )
    go_fatal();
  else
#endif

  if (red_flash)
  {
    regs.r[0]=PORTMAN_FLAG_TOGGLE;
    regs.r[1]=(int)PortMan_LED_Red;
    _kernel_swi(PortMan_AccessBit, &regs, &regs);
  }

  if (green_flash)
  {
    regs.r[0]=PORTMAN_FLAG_TOGGLE;
    regs.r[1]=(int)PortMan_LED_Green;
    _kernel_swi(PortMan_AccessBit, &regs, &regs);
  }

  return 0;
}


/*
 * SWI entry
 */
_kernel_oserror *STBState_swi (int swi_no, _kernel_swi_regs *r, void *pw)
{
#ifdef DEBUG
  char dummy;

  printf("STBState SWI %i received\n", swi_no);
  gets(&dummy);
#endif

  switch (STBState_00+swi_no)
  {
  case STBState_On:
    if ((state == INIT) || (state == OFF_PT))
      go_on();
    break;

  case STBState_Off:
    if ((state == INIT) || (state == ON) || (state == OFF_PT))
      go_off();
    break;

  case STBState_Fatal:
    go_fatal();
    break;

  case STBState_Busy:
    go_busy(r->r[0]);
  break;

  case STBState_Standby: /* toggles on/off state */
//  6/8/97:CP
//    Whole chunk of module code disabled because it doesn't work properly.
//    Replaced with code which simply turns screen off, nothing else.
//
//     switch (state)
//     {
//     case OFF_PT: /* if off, turn on */
//       go_on();
//       break;
//
//     case FATAL:
//     case INIT:
//       cmospowerdown = TRUE;
//       go_off();
//
//       /* If this fails the only sensible thing to do is to go off */
//
//       /* note fallthrough */
//     case ON:
// #ifndef DONT_GO_OFF
//       go_off();
// #endif
//
//       break;
//     }
// end QDF

// new functionality :

    if ( (state == ON) || (state == INIT) || (state == FATAL) )
    {
      go_off();
    }

    else
    {
      go_on();
    }


    break;

  case STBState_State:
    r->r[0] = state;
    break;

  case STBState_Control:
    set_io_port((r->r[0] & 1) ? LED_ON : LED_OFF,
                (r->r[0] & 2) ? LED_ON : LED_OFF, DOG_OFF);
    break;

  default: /* This happens if someone calls a SWI that we don't implement */
    return error_BAD_SWI;
    break;
  }
  return NULL;
}


/*
 * Turn the TV display on, either by resetting the MPEGVideo module or by just
 * getting it to twiddle the bits.
 */
void tv_on(void)
{
  static const char tvon_strings [4][5] = { "CVBS", "RGB", "YC", "" };
  unsigned int nvram_value;
  int nvram_error_code;
#ifdef DEBUG
  printf("TV On\n");
#endif
  /* Read the SCART configuration from NVRAM */
  _swix (NVRAM_Read, _INR(0,2)|_OUT(0),
      "SCARTConfiguration", &nvram_value, 0, &nvram_error_code);
  if (nvram_error_code == NVRAM_READ_TAGERR)
  {
    /* If there's no SCARTConfiguration tag, default to old behaviour */
    /* ie. set TVOn to a null string */
    nvram_value = 3;
  }

  /* Set the TVOn environment variable */
  regs.r[0] = (int) tv_var;
  regs.r[1] = (int) tvon_strings [nvram_value];
  regs.r[2] = strlen (tvon_strings [nvram_value]);
  regs.r[3] = 0;
  regs.r[4] = 4;		/* LiteralString */
  _kernel_swi (OS_SetVarVal, &regs, &regs);

  /* Call the MPEGVideo module to turn the display on, ie set TVBits */
  regs.r[0] = 2;		/* reason code */
  if (nvram_value == 1 || nvram_value == 3)
  {
    regs.r[1] = TVBit_TVOn | TVBit_RGB;
  }
  else
  {
    regs.r[1] = TVBit_TVOn;
  }
  regs.r[2] = ~TVBits;
  _kernel_swi (MPEGVideo_CardControl, &regs, &regs);

  /* Reset the MPEG chips */
  regs.r[0] = 3;		/* reason code */
  regs.r[1] = 0;		/* reset */
  _kernel_swi (MPEGVideo_CardControl, &regs, &regs);

   /* Flag that it's OK to play MPEG */
  regs.r[0] = (int) "SetEval STB$StandbyPressed 0" ;
  _kernel_swi(OS_CLI, &regs, &regs);

  /* Send service call to inform other modules that standby state has changed */
  _swix (OS_ServiceCall, _INR(0,1), 0, Service_Standby);
}


/*
 * Turn the TV display off, and optionally tells the MPEGVideo module to stop
 * the MPEG chips.
 */
void tv_off(int stop)
{
#ifdef DEBUG
  printf("TV Off\n");
#else
  /* Unset the TVOn environment variable */
  regs.r[0] = (int) tv_var;
  regs.r[1] = NULL;
  regs.r[2] = -1;		/* unset */
  regs.r[3] = 0;
  regs.r[4] = 4;		/* LiteralString */
  _kernel_swi (OS_SetVarVal, &regs, &regs);

  /* Call the MPEGVideo module to turn the display off */
  regs.r[0] = 2;		/* reason code */
  regs.r[1] = 0;
  regs.r[2] = ~TVBits;
  _kernel_swi (MPEGVideo_CardControl, &regs, &regs);

  if (stop)
  {
    /* Stop the MPEG chips */
    regs.r[0] = 3;		/* reason code */
    regs.r[1] = 1;		/* stop */
    _kernel_swi (MPEGVideo_CardControl, &regs, &regs);
  }

  /* Flag to !MPEG not to flush buffer if stopping and in skip dialogue */
  regs.r[0] = (int) "SetEval STB$StandbyPressed 1" ;
  _kernel_swi(OS_CLI, &regs, &regs);

  /* Send service call to inform other modules that standby state has changed */
  _swix (OS_ServiceCall, _INR(0,1), 1, Service_Standby);
#endif
}


/******* go_on *************************************************************

Purpose: Go to on state:

         Send Upcall_Online

         if(Upcall_Online claimed) or STB initialising
         {
           unblank screen
         }
         else
         {
           OS_Reset
         }


Inputs: none

Outputs: none

***************************************************************************/

void go_on(void)
{
  regs.r[0] = UpCall_Online;
  _kernel_swi(OS_UpCall, &regs, &regs);

  if((reboot == FALSE) ||  (regs.r[0] != UpCall_Online) || (state == INIT))
  {
    /* Upcall claimed - something doesn't want the STB to be reset fully */
#ifdef FX
     printf("<fx:click> TV_ON\n");

     /* Flag that it's OK to play MPEG */
     regs.r[0] = (int) "SetEval STB$StandbyPressed 0" ;
     _kernel_swi(OS_CLI, &regs, &regs);
#else
     tv_on();

     /* fade screen back in */
     fadein();
#endif

    /* Do we know what to set the mouse type to? */
    if(mouse_type != MOUSE_TYPE_NONE)
    {
      /* Check if someone has set the pointer type already. */
      regs.r[0]=0; /* Get current pointer type. */
      e=_kernel_swi(OS_Pointer, &regs, &regs);

      /* If the pointer is currently disabled... */
      if(!e && regs.r[0]==MOUSE_TYPE_NONE)
      {
        regs.r[0]=1; /* Set the current pointer type. */
        regs.r[1]=mouse_type;
        e=_kernel_swi(OS_Pointer, &regs, &regs);
      }
#ifdef DEBUG
      /* We can't do much if OS_Pointer fails.  It might be useful to write
       * a diagnostic in debug mode though.
       */
      if(e)
        printf("Error from OS_Pointer %x: %s\n", e->errnum, e->errmess);
#endif
    }

    regs.r[0]=KeyBdDisable; /* Write keyboard disable flag. */
    regs.r[1]=0; /* Value to write (enable) */
    regs.r[2]=0; /* Bits to preserve */
    e=_kernel_swi(OS_Byte, &regs, &regs);
#ifdef DEBUG
    if(e)
      printf("Error from OS_Byte %x: %s\n", e->errnum, e->errmess);
#endif

     state = ON;
     busy_level = 0;
     show_state(ON);
  }
  else
  {
    /* hard reset */
    _kernel_swi(OS_Reset, &regs, &regs);
  }
}


/*
 * Adjust the busy state
 *
 * r0 holds 0 to go less busy, 1 to go more busy.
 */
void go_busy(int r0)
{
  if (r0)			/* Get busy ? */
  {
    if (!(busy_level++))	/* Change leds if currently not busy */
      show_state(state);
  }
  else				/* Get less busy */
  {
    if (busy_level)		/* Don't want negative busy levels */
      if (!(--busy_level))	/* Change leds if no longer busy */
        show_state(state);
  }
#ifdef DEBUG
  printf("Busy = %d\n", busy_level);
#endif
}


/*
 * Go to Fatal state
 *
 * Could maybe do some powerdown features here, but since we don't know what
 * went wrong, its probably best not do make any assumptions that other bits
 * of the system are working ?
 */
void go_fatal(void)
{
  tv_on();

  state = FATAL;
  show_state(FATAL);
}

/*
 * Go to an off state
  6/8/97:CP:function rewritten to simply switch screen off.  (Kludge to get
  STB to appear to shutdown cleanly).
 */
void go_off(void)
{
   regs.r[0] = UpCall_Standby;
   _kernel_swi (OS_UpCall, &regs, &regs);

   if ( regs.r[0] != 0 ) /* if r.r[0] == 0, UpCall was claimed; don't shut down */
   {
     /* Stop MPEG chips */
#ifdef FX
     printf("<fx:click> TV_OFF\n");

     /* Flag to !MPEG not to flush buffer if stopping and in skip dialogue */
     regs.r[0] = (int) "SetEval STB$StandbyPressed 1" ;
     _kernel_swi(OS_CLI, &regs, &regs);
#else
     fadeout();
     tv_off(TRUE);
#endif

    /* Check if someone has disabled the pointer already. */
    regs.r[0]=0; /* Get current pointer type. */
    e=_kernel_swi(OS_Pointer, &regs, &regs);

    /* If the pointer is not disabled... */
    if(!e && regs.r[0]!=MOUSE_TYPE_NONE)
    {
      /* Store away the current pointer type */
      mouse_type=regs.r[0];
      /* Disable the pointer */
      regs.r[0]=1; /* Set the current pointer type. */
      regs.r[1]=MOUSE_TYPE_NONE;
      e=_kernel_swi(OS_Pointer, &regs, &regs);
    }
#ifdef DEBUG
    /* We can't do much if OS_Pointer fails.  It might be useful to write
     * a diagnostic in debug mode though.
     */
    if(e)
      printf("Error from OS_Pointer %x: %s\n", e->errnum, e->errmess);
#endif

    regs.r[0]=KeyBdDisable; /* Write keyboard disable flag. */
    regs.r[1]=1; /* Value to write (disable) */
    regs.r[2]=0; /*  Bits to preserve. */
    e=_kernel_swi(OS_Byte, &regs, &regs);
#ifdef DEBUG
    if(e)
      printf("Error from OS_Byte %x: %s\n", e->errnum, e->errmess);
#endif
     state = OFF_PT; /* arbitrary state which isn't FATAL, INIT or ON */
     show_state(OFF_PT);
   }
}

// void go_off(void)
// {
//   byte save_atodicr;
//   byte save_vidcr;
//
//   if (state != OFF_PT)
//   {
// /* if not already in PassThrough state, send an upcall_standby (0x0e) to see
//    if anything objects to the STB shutting down */
//
//     regs.r[0] = UpCall_Standby;
//     _kernel_swi (OS_UpCall, &regs, &regs);
//
//     if (regs.r[0] == 0)
//     {
//       return;			/* UpCall was claimed - don't shut down */
//     }
//
//     tv_off(FALSE);
//   }
//
//   if (cmospowerdown)
//   {
//     /*
//      * CMOS says Power Down mode
//      * default for STB
//      */
//     regs.r[1] = Service_PreReset;
//     _kernel_swi (OS_ServiceCall, &regs, &regs);
//
//     set_io_port(LED_ON, LED_OFF, DOG_OFF);
//
//     /* Stop MPEG chips */
//     tv_off(TRUE);
//
//     /* Go into stop mode prior to reset */
//     do_reset();
//     /* Never gets here */
//   }
//   else
//   {
//     /*
//      * CMOS says Pass Through mode
//      */
//
//     clock_t tick;
//     int sound_rate;
//
//     do /* FOREVER! */
//     {
// #ifdef DEBUG
//       printf("%d", state);
// #endif
//       regs.r[0] = state;
//       regs.r[1] = Service_Sleeping;
//       _kernel_swi (OS_ServiceCall, &regs, &regs);
//
//       if (regs.r[1] != Service_Sleeping)
//       {
//         /*
//          * Sleeping claimed -> Pass Through mode
//          *
// 	 * Wake things up if we're in low-power mode
// 	 */
// 	if (state == OFF_LP)
// 	{
// 	  byte block[1];
//
// 	  *atodicr = save_atodicr;
//           *vidcr = save_vidcr;
//
//   	  /* restore sound sample rate */
//           regs.r[0] = 3;
//           regs.r[1] = sound_rate;
//           _kernel_swi (Sound_SampleRate, &regs, &regs);
//
//           /* Reint the joystick module which uses the A2D */
//           regs.r[0] = 3;
//           regs.r[1] = (int) "Joystick";
//           _kernel_swi (OS_Module, &regs, &regs);
//
// #if 0     /* FIXME to support RTC as well as / instead of E2ROM */
//           /* Update the RTC soft copy from the hard copy */
//           /* Read the RTC time. This will fail if no RTC fitted */
//           block[0] = 1;			/* Address to read from */
//           regs.r[0] = 0xA0;		/* Write address */
//           regs.r[1] = (int) block;
//           regs.r[2] = 1;
//           if (! _kernel_swi (IIC_Control, &regs, &regs))
//           {
//             regs.r[0] = 0xA1;		/* Read */
//             regs.r[2] = 6;		/* We want 6 bytes */
//             if (! _kernel_swi (IIC_Control, &regs, &regs))
//             {
//               /* Write RTC time */
//
//               /* Reint the RTCAdjust module which will be sadly confused */
//               regs.r[0] = 3;
//               regs.r[1] = (int) "RTCAdjust";
//              _kernel_swi (OS_Module, &regs, &regs);
//             }
//           }
// #endif
// 	}
//
//         /*
//          * Sleeping claimed -> Pass Through mode
//          */
//         state = OFF_PT;
//
// #ifdef DEBUG
//         printf("PT\n");
// #endif
//
//         /* Get screen mode */
// 	regs.r[0] = 1;
// 	_kernel_swi (OS_ScreenMode, &regs, &regs);
//
//         /* Set screen mode */
// 	regs.r[0] = 0;
// 	_kernel_swi (OS_ScreenMode, &regs, &regs);
//
//         set_io_port(LED_ON, LED_OFF, DOG_OFF);
//         *irqmska |= TIMER_BITS;		/* Restore Timers */
// #ifdef DEBUG
//         printf("STBState_Off returns\n");
// #endif
//         return;
//
//       } /* (regs.r[1] != Service_Sleeping) */
//
//       /*
//        * Sleeping not claimed -> do Low Power stuff if we havn't done it before
//        */
//       if (state != OFF_LP)
//       {
//
// #ifdef DEBUG
//         printf("LP\n");
// #endif
//         state = OFF_LP;
//         set_io_port(LED_ON, LED_OFF, DOG_OFF);
//
//         /* Stop MPEG chips */
//         tv_off(TRUE);
//
//         /* Save the current sound sample rate and set it to some bogus value */
//         regs.r[0] = 1;
//         _kernel_swi (Sound_SampleRate, &regs, &regs);
//         sound_rate = regs.r[1];
//
// 	/* Hack to change sound clock */
//         regs.r[0] = 3;
//         if ((sound_rate == 7) || (sound_rate == 14) || (sound_rate == 20))
//           regs.r[1] = 1;
// 	else
//           regs.r[1] = 7;
//         _kernel_swi (Sound_SampleRate, &regs, &regs);
//
//         save_atodicr = *atodicr;
//         save_vidcr = *vidcr;
//
// #if 1
// 	*atodicr = 0;
// 	*vidcr = 0;
//         *vid_addr = 0xC0000003;	/* Video ereg in PowerDown mode */
//         *vid_addr = 0xD0004000;	/* Video fsynreg */
//         *vid_addr = 0xE0004000;	/* Video conreg */
//         *vid_addr = 0xB1000001;	/* Sound control register */
//         *atodicr = 0;		/* Stop A2D */
// #endif
//       }
//
//       /*
//        * Wait > 1/100s to ensure that external things have seen us go off
//        * (where "external things" is actually the IR micro)
//        */
//       tick = clock()+2;
//       while (clock() <= tick);
//
// #ifdef DEBUG
//       *io_port = '\xfb';	/* Red, Dog off */
// #endif
//
//       /* Mask off Timers 0 and 1 */
//       *irqmska &= ~TIMER_BITS;
//
//       /* Suspend Morris */
//       *susp_reg = 0;		/* Stop all: Fclk, Clk2, Clk8, Ref8 and Clk16 */
//
//       /* Event pin, IRQ or FIQ woke us up */
//
// #ifdef DEBUG
//       *io_port = '\xff';	/* Red + Green, Dog off */
// #endif
//
//       /* Restore Timers */
//       *irqmska |= TIMER_BITS;
//
//       /* Loop and re-issue the Sleeping service */
//     } while (TRUE);
//   }
// }
