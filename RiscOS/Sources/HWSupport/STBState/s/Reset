	GET	Hdr:ListOpts
	GET     Hdr:Macros				; System wide macro definitions
        GET     Hdr:System				; SWIs and hardware specific declarations
        GET     Hdr:ModHand				; Module handler reason codes
        GET     Hdr:Proc                		; ENTRY and EXIT macros
	GET	Hdr:Machine.<Machine>
	$GetCPU
	$GetIO
	$GetMEMC
	$GetMEMM
        GET     Hdr:Services
        GET     Hdr:PublicWS
        GET     Hdr:Sound

        EXPORT  do_reset
        ^       0

        AREA    |ASM$$code|,PIC,CODE,REL

        ALIGN

	GBLL	DEBUG
DEBUG	SETL	{TRUE}


VIDCphys        *       &83400000
PhysSpace	*	&80000000			; Map of MEMC/IOMD physical space (64M/512M in size)
; PhysSpace	*	&94100000			; Hack for softloaded image at 14100000 + phys space
ROM		*	 &3800000			; Start of ROM image

IOMD_ATODICR    *       &E0

; Bits in Morris' 8-bit IO port
RED_BIT		*	2
GREEN_BIT	*	4
DOG_BIT		*	128


; extern void do_reset(void);
do_reset ROUT
	MOV	R0, #1					; Sound system off
	SWI	XSound_Enable

	MOV	R1, #Service_PreReset
	SWI	XOS_ServiceCall

;	SetMode SVC32_mode + I32_bit + F32_bit, r2	; select 32-bit mode w/ IRQs and FIQs disabled

;	ObjAsm can't handle the above, so the SetMode macro from Hdr.Global.CPU.ARM600 is munged below
        MRS     r2, CPSR_all
        BIC     r2, r2, #&1F
        ORR     r2, r2, #(SVC32_mode + I32_bit + F32_bit)
        MSR	CPSR_all, r2

	MOV	R2, #PhysSpace
	SUB	R2, R2, #ROM
        ADD     pc, pc, R2				; jump to this code in physical space
	NOP

	MOV     r2, #(MMUC_P :OR: MMUC_D :OR: MMUC_L)	; turn MMU & cache off, leave us in 32-bit config, late aborts
	SetCop  r2, CR_Control
        SetCop  r0, CR_IDCFlush                 	; flush cache + TLB just in case
        SetCop  r0, CR_TLBFlush                 	; (data written is irrelevant)

	MOV	R0, #IOMD_Base

	MOV	R1, #(:NOT: GREEN_BIT)			; Green on & standby
	STRB	R1, [R0, #IOMD_CLINES]

	MOV	R1, #0
        STRB    R1, [R0, #IOMD_VREFCR]
        STRB    R1, [R0, #IOMD_VIDCR]
        STRB    R1, [R0, #IOMD_SD0CR]
	STRB	R1, [R0, #IOMD_ATODICR]			; Stop A2D

	LDR	R2, =VIDCphys
	LDR	R1, =&C0000003				; Video ereg (DAC off, external LUT)
	STR	R1, [R2]
	LDR	R1, =&D0004000				; Video fsynreg (Vclk off, Pcomp=0)
	STR	R1, [R2]
	LDR	R1, =&E0004001				; Video conreg (PDown, HClk)
	STR	R1, [R2]
	LDR	R1, =&B1000001				; Sound control register off
	STR	R1, [R2]

	MOV	R1, #&ff
	STRB	R1, [R0, #IOMD_STOPMODE]		; Stop Morris

	; Woken up by event from IR micro

	STRB	R1, [R0, #IOMD_CLINES]			; Both LEDs on (R1 is still &ff)

	MOV	PC, #0					; Start of ROM
	NOP

        END
