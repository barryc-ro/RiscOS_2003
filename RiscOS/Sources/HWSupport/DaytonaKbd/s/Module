; File:    Module.s
; Purpose: Module header and entry points for Netfax Daytona keyboard driver
; Author:  Ben Laughton
; History: 14-May-97: BAL: Created



	AREA	|!!!Module$$Header|, CODE, READONLY
	IMPORT	|__RelocCode|		; Link symbol for relocation routine

; -----------------------------------------------------------------------------
; Module workspace

		^ 0, wp
Flags		# 4
KeyFlags	# 32
 [ Test
TestRow		# 32
 ]
workspace_size	* :INDEX: @


; -----------------------------------------------------------------------------
; Module header

	ENTRY

Module_BaseAddr
	DCD	0			; Start code
	DCD	Init	- Module_BaseAddr
	DCD	Die	- Module_BaseAddr
	DCD	0			; Service call handler
	DCD	Title	- Module_BaseAddr
	DCD	Help	- Module_BaseAddr
 [ Test
	DCD	Command	- Module_BaseAddr
 ]
	DCD	0			; Help and command keyword table

; -----------------------------------------------------------------------------
; Title
;
; Module title

Title
	DCB	"DaytonaKeyboard", 0
	ALIGN

; -----------------------------------------------------------------------------
; Help
;
; Module help string

Help
	DCB	"DaytonaKeyboard", 9, "$VString ($Date)", 0
	ALIGN

; -----------------------------------------------------------------------------
; Init
;
; Module initialisation code
;
; On entry
; R10 = pointer to environment string
; R11 = I/O base or instantiation number
; R12 = pointer to private word for this instantiation
; R13 = supervisor stack pointer
;
; On exit
; Must preserve processor mode and interrupt state
; Must preserve R7-R11 and R13
; R0-R6, R12, R14 and flags (except V) can be corrupted

Init
	Entry

	Debug	module, "initialising"
	LDR	r2, [r12]
	CMP	r2, #0			; Do we already have some workspace?
	DebugIf	NE, module, "already got workspace"
	BNE	%FT01			; If so then skip workspace claim

	MOV	r0, #ModHandReason_Claim
	LDR	r3, =workspace_size
	Debug	module, "claiming workspace", r3
	SWI	XOS_Module		; Claim workspace
	EXIT	VS

	STR	r2, [r12]		; Store workspace pointer

01
	MOV	wp, r2

	; Initialise workspace
        MOV	r0, #0
	STR	r0, Flags
 [ Test
	LDR	r0, =&7ff
	ADR	lr, TestRow
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
	STR	r0, [lr], #4
 ]

	BL	ClaimVectors
	BLVC	KeyboardInit

	EXIT

; -----------------------------------------------------------------------------
; Die
;
; Module finalisation code
;
; On entry
; R10 = fatality indication
; R11 = instantiation number
; R12 = pointer to private word for this instantiation
; R13 = supervisor stack pointer
;
; On exit
; Must preserve processor mode and interrupt state
; Must preserve R7-R11 and R13
; R0-R6, R12, R14 and flags can be corrupted

Die
	Entry
	LDR	wp, [r12]
	BL	KeyboardDie
	BLVC	ReleaseVectors
	EXIT

 [ Test
Command
	= "DaytonaKbd_Fake", 0
	ALIGN
	DCD	fake - Module_BaseAddr
	DCD	&00080000
	DCD	0
	DCD	0

	DCD	0

fake
	Entry	"r0"

	LDR	wp, [r12]

	MOV	r5, r1
	Debug	test, "number of arguments:", r5
	MOV	r1, r0
	MOV	r0, #16

	; stop scanning code until we've updated the fake keyboard
        LDR	r3, Flags
	ORR	r3, r3, #f_Scanning
	STR	r3, Flags

	MOV	r3, #0
	ADRL	r4, TestRow

01
        CMP	r3, r5
	BEQ 	%FT02
	SWI	XOS_ReadUnsigned
	STR	r2, [r4], #4
	ADD	r3, r3, #1
	B	%BT01

02
	; reenable the scanning code
	LDR	r3, Flags
	BIC	r3, r3, #f_Scanning
	STR	r3, Flags

	EXIT
 ]

	END
