/******************************************************************************/
/**  File:    MemCtrl.c                                                      **/
/**  	      								     **/
/**  Purpose: RISCOS memory handling code for PCI Manager module	     **/
/**  	      								     **/
/**  Author:  W.Turner                                                       **/
/**  	      								     **/
/**  History: 16-Feb-98 WT  Created                                          **/
/******************************************************************************/

/*--------------------------------------------------------------------
** Included files
*/
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "strings.h"

#include "_Private.h"
#include "Hardware.h"

#include "MemCtrl.h"


/*--------------------------------------------------------------------
** Internal function declarations
*/
int AreaSizeCmp(const void *, const void *);


/*--------------------------------------------------------------------
** Internal variable declarations
*/
typedef struct Area_T
 {
   uint32	size;
   uint8	device;
   uint8	area;
 } Area_T;



/*--------------------------------------------------------------------
** Function Name : Mem_HandleExpansionROMs
**
** Purpose       : Checks PCI ROMs for RISCOS headers & deals with 'em
**
** Returns       : 
**
*/
void
Mem_HandleExpansionROMs
(
  PCIDevice_T	*device_list,
  uint8		num_devices
)
{
  uint8		*romptr;
  uint8		*tmpptr;
  uint32	i, tmpval;
  
  /** Loop through the devices to find the ROM ones **/
  for(i=0; i < num_devices; i++)
  {
    if(device_list[i].ExROM_BAReg != 0)
    {
      romptr = (uint8 *)device_list[i].ExROM_PCIBase;
      for(;;)
      {
        /** Look through the image headers **/
        if(*((uint32 *)romptr) == 0x1aadaa55) /** _KNOW_ this is word-aligned (is on 512b boundary) **/
        {
          /** Is an Acorn ROM image, so deal with it **/
          romptr += 0x30; /** Takes us to start of module 'chain' **/
          tmpval = *(uint32 *)romptr;

	  while(tmpval != 0)
	  {
            _swix(OS_Module, _IN(0)|_IN(1)|_IN(2), 11, (uint32)(romptr+4), tmpval);
	    romptr += (tmpval+4);
            tmpval = *(uint32 *)romptr;
          }
          /* Map it out */
          tmpval = HW_ConfigRead(i, 0x30);
          tmpval = tmpval & 0xfffffffe;
          HW_ConfigWrite(i, 0x30, tmpval);
          return;
        }

        tmpval = (*((uint32 *)romptr)) & 0xffff; /** KNOW THIS TOO **/
        if(tmpval == 0xaa55)
        {
          /** Is a valid ROM image, but not an Acorn one **/
          tmpptr = romptr + ((*((uint32 *)(romptr+0x18))) & 0xffff);
          /** Was this last image, so quit? **/
          if(*(tmpptr+0x15) && 0x80)
          {
            /* Map it out */
            tmpval = HW_ConfigRead(i, 0x30);
            tmpval = tmpval & 0xfffffffe;
            HW_ConfigWrite(i, 0x30, tmpval);
            return; /*yup*/
          }
	  tmpval = *(tmpptr+0x10) | ((*(tmpptr+0x11)) << 8);
	  romptr += tmpval*512;
        }
      }
    }
  }
  return;
}


/*--------------------------------------------------------------------
** Function Name : Mem_MapDevices
**
** Purpose       : Maps the devices into RISCOS logical memory space.
**
** Returns       : 
**
*/
void
Mem_MapDevices
(
  PCIDevice_T	       *device_list,
  uint8			num_devices
)
{
  uint32		mlogbase, ilogbase, physbase, devsize, pciaddr, *dptr, mapsize;
  Area_T	       *io_areas, *mem_areas;
  uint8			dnum, loop, mem_index, io_index;

  /** Allocate memory for the arrays we'll need later **/
  io_areas  = malloc(6*num_devices*sizeof(Area_T)); /* Sufficient for worst-case scenario */
  mem_areas = malloc(7*num_devices*sizeof(Area_T)); /* Sufficient for worst-case scenario */

#ifdef TESTING
  Debug_Message("wK", "Entered Mem_MapDevices\n");
  /* Fake the addresses */
  ilogbase = 0x90000000;
  physbase = 0x40000000;
  devsize  = 0x10000000;
#else
  /** Find out the RiscOS address space allocations before we start **/
  _swix(OS_Memory, _IN(0)|_OUT(0)|_OUT(1)|_OUT(2), 256+11, &ilogbase, &physbase, &devsize);
  Debug_Message("wK","From OS_Memory, we get ilogbase=&%08X, physbase=&%08X, devsize=&%08X\n",ilogbase, physbase, devsize);
#endif
  mlogbase = MEM_ADDR_BASE_LOG;
  
  /**
      We have a list of devices, each of which can contain up to 6 areas.
      Each of these areas may be IO or memory. Need to split them into two
      arrays, and then sort those arrays into descending size order
  **/
  mem_index = 0;
  io_index  = 0;

  for(dnum=0; dnum < num_devices; dnum++)
  {
    dptr=(uint32 *)(&device_list[dnum].BA_Register0); /** Sorry & all that... **/
    for(loop=0;loop < 7; loop++)
    {
      if(*dptr & 1)
      {
        /*IO*/
        io_areas[io_index].size = 1 + ~( (*dptr) & 0xfffffffc);
        io_areas[io_index].device = dnum;
        io_areas[io_index].area = loop;
        io_index++;
      }
      else
      {
        /*Mem*/
        if(*dptr != 0) { /** Make sure there's at least something there.. */
          mem_areas[mem_index].size = 1 + ~( (*dptr) & 0xfffffff0);
          mem_areas[mem_index].device = dnum;
          mem_areas[mem_index].area = loop;
          mem_index++;
          if(*dptr & 4) {
            dptr++; /** 64-bit register, so skip the top 32-bits */
            loop++;
          }
        }
      }
      dptr++; /* Point to the next address range register */
    }
  }


  /** First, sort and allocate the IO areas **/
  #ifdef DEBUG
    Debug_Message("wK", " About to sort IO areas\n");
  #endif
  qsort(io_areas, io_index, sizeof(Area_T), AreaSizeCmp);
  pciaddr = 0;

  /** Now, allocate the space **/
  for(dnum=0; dnum < io_index; dnum++)
  {
    #ifdef DEBUG
      Debug_Message("wK", "  Dev %d, area %d, size &%08X, PCI addr &%08X\n",io_areas[dnum].device, io_areas[dnum].area, io_areas[dnum].size, pciaddr);
    #endif
    if(io_areas[dnum].size < 0x1000)
    {
      mapsize = 0x1000; /** Min mappable size of 4K **/
    }
    else
    {
      mapsize = io_areas[dnum].size;
    }
    _swix(OS_Memory, _IN(0)|_IN(1)|_IN(2)|_IN(3), 11, ilogbase, physbase+pciaddr, mapsize);
    #ifdef DEBUG
      Debug_Message("wK", "  Mapped in at log=&%08X, phys=&%08X, size=&%08X, mapsize=&%08X\n",ilogbase, physbase+pciaddr, io_areas[dnum].size, mapsize);
    #endif
    HW_DeviceIOMapIn(device_list[io_areas[dnum].device].Device, io_areas[dnum].area, io_areas[dnum].size, pciaddr);
    *((&device_list[io_areas[dnum].device].BA_0_PCIBase)+io_areas[dnum].area)=pciaddr;
    ilogbase+=mapsize;
    pciaddr+=mapsize;
  }


  /** Now it's the memory areas' turn **/
  #ifdef DEBUG
    Debug_Message("wK", " About to sort memory areas\n");
  #endif
  qsort(mem_areas, mem_index, sizeof(Area_T), AreaSizeCmp);
  physbase = physbase + IO_ADDR_RANGE + CFG_SPACE_RANGE;
  pciaddr = 0;

  /** Now, allocate the space **/
  for(dnum=0; dnum < mem_index; dnum++)
  {
    #ifdef DEBUG
      Debug_Message("wK", "  Dev %d, area %d, size &%08X, PCI addr &%08X\n",mem_areas[dnum].device, mem_areas[dnum].area, mem_areas[dnum].size, pciaddr);
    #endif
    if(mem_areas[dnum].size < 0x1000)
    {
      mapsize = 0x1000; /** Min mappable size of 4K **/
    }
    else
    {
      mapsize = mem_areas[dnum].size;
    }
    _swix(OS_Memory, _IN(0)|_IN(1)|_IN(2)|_IN(3), 11, mlogbase, physbase+pciaddr, mapsize);
    #ifdef DEBUG
      Debug_Message("wK", "  Mapped in at log=&%08X, phys=&%08X, size=&%08X, mapsize=&%08X\n",mlogbase, physbase+pciaddr, mem_areas[dnum].size, mapsize);
    #endif
    HW_DeviceMemMapIn(device_list[mem_areas[dnum].device].Device, mem_areas[dnum].area, mem_areas[dnum].size, pciaddr);
    *((&device_list[mem_areas[dnum].device].BA_0_PCIBase)+mem_areas[dnum].area)=pciaddr;
    mlogbase+=mapsize;
    pciaddr+=mapsize;
  }
  
  free(mem_areas);
  free(io_areas);
}


/*--------------------------------------------------------------------
** Function Name : AreaSizeCmp
**
** Purpose       : Comparison routine for area quicksort
*/
int
AreaSizeCmp
(
  const void       *AreaA,
  const void       *AreaB
)
{
  /** NOTE: As we want sorted largest->smallest, this routine returns:
      -ve IFF AreaA size > AreaB size
       0  IFF AreaA size = AreaB size
      +ve IFF AreaB size < AreaB size
      ...which may seem anti-sensible at first glance.                 **/
  if( ((Area_T *)AreaA)->size < ((Area_T *)AreaB)->size) return(1);
  if( ((Area_T *)AreaA)->size > ((Area_T *)AreaB)->size) return(-1);
  return(0);
}


/**  End of file. **/
