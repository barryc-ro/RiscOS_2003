/******************************************************************************/
/**  File:    SWIHandler.c                                                   **/
/**  	      								     **/
/**  Purpose: SWI handling code for PCI Manager module			     **/
/**  	      								     **/
/**  Author:  W.Turner                                                       **/
/**  	      								     **/
/**  History: 12-Aug-97 WT  Created                                          **/
/******************************************************************************/

/*--------------------------------------------------------------------
** Included files
*/
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "strings.h"

#include "_Private.h"
#include "Hardware.h"

#ifdef TESTING
  #include "Test.h"
#endif

#include "SWIHandler.h"


/*--------------------------------------------------------------------
** Function Name : PCI_SWIHandler
**
** Purpose       : SWI despatcher for the module
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror *
PCI_SWIHandler
(
  int			swi_number,
  _kernel_swi_regs     *registers,
  void		       *pw
)
{
  _kernel_oserror      *swi_error = NULL;

  switch(swi_number)
  {
    case Swindex_ReturnNumberOfDevices:	swi_error = NULL;
    					registers->r[0] = g_num_of_devices;
					break;

    case Swindex_ReadID:		swi_error = NULL;
					break;

    case Swindex_RegisterDriver:	swi_error = Swi_RegisterDriver(registers);
    					break;

    case Swindex_DeRegisterDriver:	swi_error = Swi_DeRegisterDriver(registers);
    	 				break;
    	 				
    case Swindex_ConfigurationRead:	swi_error = Swi_ConfigurationRead(registers);
    					break;
    	 				
    case Swindex_ConfigurationWrite:	swi_error = Swi_ConfigurationWrite(registers);
    					break;

    case Swindex_AddressMapping:	swi_error = Swi_AddressMapping(registers);
	    	 	        	break;
#ifdef TESTING
    case Swindex_TestMemmap:		Test_SpaceSort();
				    	break;
#endif				    	
    default:	 			/** Bad SWI number **/
	            	     		break;
  }

  return(swi_error);
  
  NOT_USED(pw);
}



/*--------------------------------------------------------------------
** Function Name : Swi_RegisterDriver
**
** Purpose       : Registers a device 
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror *
Swi_RegisterDriver
(
  _kernel_swi_regs     *registers
)
{
  unsigned int		devicenumber = 0;
  unsigned int		search_id, device_id;
  
  registers->r[3] = 0xffffffff; /** Default to not-registered **/
  search_id = registers->r[1] & registers->r[2];
  
  do
  {
    device_id = g_pci_device_data[devicenumber].DevIDVendID;
    if( (search_id == (device_id & registers->r[2])) && (device_id != 0xffffffff) )
    {
      /** We've found the card we're looking for **/
      /** But is it already taken? Check the description **/
      if( g_pci_device_data[devicenumber].Description[0] == 0)
      {
        g_pci_device_data[devicenumber].DriverIdWord = registers->r[4];
        strncpy((char *)g_pci_device_data[devicenumber].Description, (char *)registers->r[5], MAX_DESC_LENGTH);
        if(g_pci_device_data[devicenumber].Description[0] == 0)
        {
          /** No name was supplied, so make up a default string **/
          strcpy((char *)g_pci_device_data[devicenumber].Description, "Unnamed driver\0");
        }
        registers->r[3] = devicenumber;
        break;
      }
    }
    devicenumber++;
  }
  while(devicenumber != g_num_of_devices);

  return(NULL);
}



/*--------------------------------------------------------------------
** Function Name : Swi_DeRegisterDriver
**
** Purpose       : DeRegisters a device 
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror *
Swi_DeRegisterDriver
(
  _kernel_swi_regs     *registers
)
{
  if(registers->r[4] == g_pci_device_data[registers->r[3]].DriverIdWord)
  {
    /** Matched the ident word, so deregister **/
    g_pci_device_data[registers->r[3]].DriverIdWord = 0;
    g_pci_device_data[registers->r[3]].Description[0] = 0;
    registers->r[4] = 0;
  }

  return(NULL);
}



/*--------------------------------------------------------------------
** Function Name : Swi_ConfigurationRead
**
** Purpose       : Allows reading of config space of the specified device
**
** Returns       : R0 - Register value as read
**
*/
_kernel_oserror *
Swi_ConfigurationRead
(
  _kernel_swi_regs     *registers
)
{
  /** First, check that we've been asked about the card by the owner driver **/
  if(registers->r[3] > g_num_of_devices)
  {
    /** Invalid device number, so error out **/
    return(NULL);
  }
  if(g_pci_device_data[registers->r[3]].DriverIdWord != registers->r[4])
  {
    /** Invalid Driver ID, so error out **/
    return(NULL);
  }
  
  /** We have a winner! **/
  #ifdef DEBUG
    Debug_Message("wK","Config read passes validification checks\n");
  #endif
  registers->r[0] = HW_ConfigRead(registers->r[3], registers->r[1]);
  
  return(NULL);
} 



/*--------------------------------------------------------------------
** Function Name : Swi_ConfigurationWrite
**
** Purpose       : Allows writing of config space of the specified device
**
** Returns       : Nothing
**
*/
_kernel_oserror *
Swi_ConfigurationWrite
(
  _kernel_swi_regs     *registers
)
{
  /** First, check that we've been asked about the card by the owner driver **/
  if(registers->r[3] > g_num_of_devices)
  {
    /** Invalid device number, so error out **/
    return(NULL);
  }
  if(g_pci_device_data[registers->r[3]].DriverIdWord != registers->r[4])
  {
    /** Invalid Driver ID, so error out **/
    return(NULL);
  }
  
  /** We have a winner! **/
  #ifdef DEBUG
    Debug_Message("wK","Calling HW_ConfigWrite with &%08X, &%08X, &%08X\n",registers->r[3], registers->r[1], registers->r[0]);
  #endif
  HW_ConfigWrite(registers->r[3], registers->r[1], registers->r[0]);

  return(NULL);
} 



/*--------------------------------------------------------------------
** Function Name : Swi_AddressMapping
**
** Purpose       : Returns the address mapping for a device
**
** Returns       : A block of info. See FSpec 1309,206/FS for details.
**
*/
_kernel_oserror *
Swi_AddressMapping
(
  _kernel_swi_regs     *registers
)
{
  uint8		area;
  uint32	*SizeReg;
  uint32	*BaseReg;
  uint32	*BlockPtr;
  uint32	bufferareas;
  
  /** First, check that we've been asked about the card by the owner driver **/
  if(registers->r[3] > g_num_of_devices)
  {
    /** Invalid device number, so error out **/
    return(NULL);
  }
  if(g_pci_device_data[registers->r[3]].DriverIdWord != registers->r[4])
  {
    /** Invalid Driver ID, so error out **/
    return(NULL);
  }

  /** Right card, right driver. Right, let's go **/
  /** First, what reason code are we? **/
  if(registers->r[0] > 1) return(NULL); /* Invalid reason code */
  
  if(registers->r[0] == 1)
  {
    Swi_AddressMapping_ExpROM(registers);
    return(NULL); /** Finito **/
  }


  bufferareas = registers->r[2] % 4; /** Number of areas we can fit in the buffer **/
  BlockPtr= (uint32 *)registers->r[1];
  SizeReg = &g_pci_device_data[registers->r[3]].BA_Register0;
  BaseReg = &g_pci_device_data[registers->r[3]].BA_0_PCIBase;
  registers->r[2] = 0; /* No areas caught. Yet. */
  registers->r[3] = 0; /* No areas missed. Yet. */

  for(area=0; area<7; area++)
  {
    /** Go through each area in turn, adding blocks if necessary **/
    if(*SizeReg != 0)
    {
      /** There's something in this area, so try and add a block **/
      if(area < bufferareas) /* We have room? */
      {
        /** Blocks 0 and 1 depend on whether IO or Mem or ROM **/
        if((*SizeReg) & 1)
        {
          /* IO */
          BlockPtr[0] = (1<<30) | area;
          BlockPtr[2] = (*BaseReg) + IO_ADDR_BASE_LOG;
        }
        else
        { 
          if(area==6)
          {
            /* ExROM */
            BlockPtr[0] = (uint32)((2u<<30) | (uint32)area);
          }
          else
          {
            /* Mem */
            BlockPtr[0] = area;
          }
          BlockPtr[2] = (*BaseReg) + MEM_ADDR_BASE_LOG;
        }
        BlockPtr[1] = *BaseReg;
        BlockPtr[3] = 1 + ~((*SizeReg) & 0xfffffffc);
        
        BlockPtr += 4; /* Point to the next free block */
        registers->r[2]++; /* Got one! */
      }
      else
      { /** Run out of bufferspace! **/
        registers->r[3]++; /* One more area missed */
      }      
    }
    SizeReg++;
    BaseReg++;
  }
  
  return(NULL);
}



/*--------------------------------------------------------------------
** Function Name : Swi_AddressMapping_ExpROM
**
** Purpose       : Controls the mapping of the Expansion ROM space
**
** Returns       : R1 - state of mapping
**
*/
void
Swi_AddressMapping_ExpROM
(
  _kernel_swi_regs	*registers
)
{
  uint32	tmpval;
  
  if(registers->r[1] & 0x01)
  {
    /** Want to write to the bottom bit **/
    tmpval = HW_ConfigRead(registers->r[3], 0x30);
    tmpval = (tmpval & 0xfffffffe) | (registers->r[1] & 0x01);
    HW_ConfigWrite(registers->r[3], 0x30, tmpval);
  }
  registers->r[1] = (HW_ConfigRead(registers->r[3], 0x30)) & 0x01;
  
  return;
}

/**  End of file. **/
