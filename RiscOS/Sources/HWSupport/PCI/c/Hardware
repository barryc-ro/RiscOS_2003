/******************************************************************************/
/**  File:    Hardware.c						     **/
/**  	      								     **/
/**  Purpose: Code that's specific to the PLX 9080 PCI controller	     **/
/**	      If another controller is used in the future, then this file    **/
/**	      should be the only one that needs changing or preferably       **/
/**	      replacing.						     **/
/**  	      								     **/
/**  Author:  W.Turner                                                       **/
/**  	      								     **/
/**  History: 08-Aug-97 WT  Created                                          **/
/******************************************************************************/

/*--------------------------------------------------------------------
** Included files
*/
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "_Private.h"

#include "Hardware.h" /** Defines the externally visible functions **/


/*--------------------------------------------------------------------
** Hardware-specific definitions, internal function declarations etc
*/


/*--------------------------------------------------------------------
** Hardware-specific macro definitions.
*/
#define		PLX_REG_ORR(reg, value)		*((volatile uint32 *)(PLX_INTERNAL_BASE+reg)) = value    | (*((volatile uint32 *)(PLX_INTERNAL_BASE+reg)))
#define 	PLX_REG_BIC(reg, value)		*((volatile uint32 *)(PLX_INTERNAL_BASE+reg)) = (~value) & (*((volatile uint32 *)(PLX_INTERNAL_BASE+reg)))
#define		PLX_REG_SET(reg, value)		*((volatile uint32 *)(PLX_INTERNAL_BASE+reg)) = value
#define		PLX_REG_READ(reg, value)	value = *((volatile uint32 *)(PLX_INTERNAL_BASE+reg))

#define		PCI_CFG_ORR(reg, value)		*((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg)) = value    | (*((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg)))
#define 	PCI_CFG_BIC(reg, value)		*((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg)) = (~value) & (*((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg)))
#define		PCI_CFG_WRITE(reg, value)	*((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg)) = value
#define		PCI_CFG_READ(reg, value)	value = *((volatile uint32 *)(CFG_SPACE_BASE_LOG+reg))



/*--------------------------------------------------------------------
** Function Name : HW_Present
**
** Purpose       : Determines whether the PCI controller is present
**
** Returns       : TRUE if controller present, FALSE otherwise
**
*/
Boolean_T
HW_Present
(
  void
)
{
  uint32	venddevid;

  /** Make sure we've got the expected hardware. Always a good start... */
  PLX_REG_READ(0x00, venddevid); /* Read the Device/VendorID */
  if( venddevid == 0x908010b5) /* Device/VendorID of internal register */
  {
    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/*--------------------------------------------------------------------
** Function Name : HW_InitialiseHardware
**
** Purpose       : Initialise PLX 9080 hardware, setting up mappings etc
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror
HW_InitialiseHardware
(
  void
)
{
  _kernel_oserror	errblock;

  /* First the initial required setup */
  PLX_REG_ORR(0x04, 0x00000007);	/** Enable mastering, IO and memory cycles**/
  PLX_REG_SET(0x9C, 0xf8000000); 	/** 128MB range **/
  PLX_REG_SET(0xA0, MEM_ADDR_BASE_PHYS);/** Local Bus BAR for Local->PCI Mem **/
  PLX_REG_SET(0xA4, IO_ADDR_BASE_PHYS); /** Local Bus BAR for Local->PCI IO  **/
  PLX_REG_ORR(0xA8, 0x00000003);

  /* Set up pci->local mappings here */
  PLX_REG_SET(0x80, 0x30000000);	/** Map in the bottom 768MB of physical space **/
  PLX_REG_SET(0x84, 0x00000001);	/** Map starting at 0, and enable **/
  PLX_REG_SET(0x18, 0x40000000);	/** Map into PCI space at 1GB **/
  PLX_REG_SET(0x98, 0xf0030003);
  
  /* Map in a 4k page of PCI IO space so we can talk to PCI config regs */
  /* Map it in at the very top of space, well out the way */
  _swix(OS_Memory, _IN(0)|_IN(1)|_IN(2)|_IN(3), 11, CFG_SPACE_BASE_LOG, CFG_SPACE_BASE_PHYS, CFG_SPACE_RANGE);
  
  return(errblock);
}



/*--------------------------------------------------------------------
** Function Name : HW_CountNumberOfDevices
**
** Purpose       : Return the number of PCI devices in the system. This
**		   may simply be hardcoded, or may search for slots in
**		   whatever way is applicable.
**		   Also disables each device it finds from accessing the PCI bus.
**
** Returns       : Number of PCI devices in the system.
**
*/
uint8
HW_CountNumberOfDevices
(
  uint8		*Populated
)
{
  uint8			devices, card;
  uint32		pci_regvalue, temp;
  
  #ifdef TESTING
    return(8);		/* For testing, return a fake value of 8 */
  #endif

  /** Loop round all the slots, finding out how many cards are present **/
  devices = 0;
  for(card = 0; card < MAX_PCI_SLOTS; card++)
  {
    /** Set up the 9080 to do a configuration read of the VendorID of the specified device*/
    PLX_REG_SET(0xAC, 0x80000000 | ((card+11)<<11) ); /* CEn | Bus 0 | Device 'card' | Reg 0 | CfgType0 */
    PCI_CFG_READ(0, pci_regvalue);
    PLX_REG_READ(0x04, temp);

    /** Read vendor ID **/
    if( (temp & 1<<29) != 0 )
    {
      #ifdef DEBUG
//     	Debug_Message("wK","Nothing in slot %d. Resetting PLX9080.\n",card);
      #endif
      PLX_REG_READ(0x04, pci_regvalue); /* The PCI bus MasterAbort'ed, so no device, and de-abort it **/
      pci_regvalue = (pci_regvalue & 0x0000ffff) | (1<<29);
      PLX_REG_SET(0x04, pci_regvalue);
    }
    else
    {
      #ifdef DEBUG
      	Debug_Message("wK","  Found device %d, and this is on card %d\n",devices, card);
      #endif
      Populated[devices] = card; /** we can tell'em what slot we found the device in **/
      devices++;

      /** Now kneecap the device to keep it off our bus **/
      PLX_REG_SET(0xAC, 0x80000000 | ((card+11)<<11) | (1<<2) ); /* CEn | Bus 0 | Device 'card' | Reg 1 | CfgType0 */
      PCI_CFG_WRITE(0, 0x00A0); /* disable accesses, en. stepping/snooping */
      
      #if FALSE
      PLX_REG_SET(0xAC, 0x80000000 | (card<<11) | (3<<2) ); /* CEn | Bus 0 | Device 'card' | Reg 3 | CfgType0 */
      PLX_REG_READ(0x00, pci_regvalue);
      /** If the header type indicates multifunction, read them too **/
      if( (pci_regvalue & (1<<23)) != 0 )
      {
        for(function = 1; function < MAX_PCI_FUNCTIONS; function++)
        {
          /** Set up the 9080 to do a configuration read for a sub-function **/
          
          /** Check the vendor ID **/
        }
      }
      #endif
    }
  }
  return(devices);
}



/*--------------------------------------------------------------------
** Function Name : HW_GetDeviceInfo
**
** Purpose       : Returns a filled in block of data for the given device
**
** Returns       : Filled in block, regardless of device presence.
**		   If device not present, fills with FFs.
**
*/
void
HW_GetDeviceInfo
(
  uint8		devnum,
  PCIDevice_T * devblock
)
{
  uint32	pci_regvalue, temp;

  /** Set up the 9080 to do a configuration read of the VendorID of the specified device*/
  PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) ); /* CEn | Bus 0 | Device 'devnum' | Reg 0 | CfgType0 */
  PCI_CFG_READ(0x00, pci_regvalue);
  PLX_REG_READ(0x04, temp);
    
  /** Read vendor ID **/
  if( (temp & 1<<29) != 0 )
  {
    PLX_REG_SET(0x04, 1<<29); /* The PCI bus MasterAbort'ed, so no device, and de-abort it **/
    #ifdef DEBUG
      Debug_Message("wK","Empty slot %d\n",devnum);
    #endif
    /* set the block to all Fs */
  }
  else
  {
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has Vend/DevID &%08X\n",devnum, pci_regvalue);
    #endif
    devblock->DevIDVendID = pci_regvalue; /** That's the VendorID pair sorted **/
    /** Set up the 9080 to do a configuration read of the VendorID of the specified device*/
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (4<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 4 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register0 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR0\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (5<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 5 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register1 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR1\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (6<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 6 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register2 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR2\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (7<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 7 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register3 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR3\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (8<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 8 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register4 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR4\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (9<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 9 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xffffffff);
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->BA_Register5 = pci_regvalue;
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X memory in PCIBAR5\n",devnum, pci_regvalue);
    #endif
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | (12<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 12 | CfgType0 */
    PCI_CFG_WRITE(0x00, 0xfffffffe);	/* Don't touch bit 0 */
    PCI_CFG_READ(0x00, pci_regvalue);
    devblock->ExROM_BAReg = (pci_regvalue & 0xfffff800); /* Clear out the bottom bits */
    #ifdef DEBUG
      Debug_Message("wK","Not-empty slot %d has &%08X ROM in PCI-ERBAR\n",devnum, pci_regvalue);
    #endif
    /** Set up the other guff in the block **/
    devblock->Description[0] = 0;
    devblock->Device = devnum;
  }

  return;
}



/*--------------------------------------------------------------------
** Function Name : HW_DeviceIOMapIn
**
** Purpose       : Maps the specified device into the PCI IO address space.
**
** Returns       : void
**
*/
void
HW_DeviceIOMapIn
(
  uint8		devnum,
  uint8		area,
  uint32	device_size,
  uint32	pciaddr
)
{
  #ifdef DEBUG
    Debug_Message("wK","IOMapIn of device %d, area %d at &%08X PCI\n",devnum,area,pciaddr);
  #endif
  PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | ((area+4)<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 4+area | CfgType0 */
  PCI_CFG_WRITE(0x00, pciaddr);
  PLX_REG_BIC(0xAC, 0x80000000);
  return;
}



/*--------------------------------------------------------------------
** Function Name : HW_DeviceMemMapIn
**
** Purpose       : Maps the specified device into the PCI memory address space.
**
** Returns       : void
**
*/
void
HW_DeviceMemMapIn
(
  uint8		devnum,
  uint8		area,
  uint32	device_size,
  uint32	pciaddr
)
{
  #ifdef DEBUG
    Debug_Message("wK","MemMapIn of device %d, area %d at &%08X PCI\n",devnum,area,pciaddr);
  #endif

  /* Could actually be an expansion rom */
  if(area==6)
  {
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | ((12)<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 12 | CfgType0 */
    PCI_CFG_WRITE(0x00, pciaddr); /* Map it, but leave it mapped OUT */
    PLX_REG_BIC(0xAC, 0x80000000);
  }
  else
  {
    PLX_REG_SET(0xAC, 0x80000000 | ((devnum+11)<<11) | ((area+4)<<2) ); /* CEn | Bus 0 | Device 'devnum' | Reg 4+area | CfgType0 */
    PCI_CFG_WRITE(0x00, pciaddr);
    PLX_REG_BIC(0xAC, 0x80000000);
  }
  return;
}



/*--------------------------------------------------------------------
** Function Name : HW_ConfigWrite
**
** Purpose       : Writes the value to the config reg of the specified card
**
** Returns       : void
**
*/
void
HW_ConfigWrite
(
  uint32	device_number,
  uint32	register_offset,
  uint32	value
)
{
  uint32	devnum, reg;
  
  devnum = g_pci_device_data[device_number].Device + 11;
  reg    = (register_offset & 0x000000fc); /* reg is the word containing the register */
  
  #ifdef DEBUG
    Debug_Message("wK","About to write &%08X into local reg AC. Card =%d, reg=%d\n",0x80000000 | (devnum<<11) | reg, devnum, reg );
  #endif
  PLX_REG_SET(0xAC, 0x80000000 | (devnum<<11) | reg ); /* CEn | Bus 0 | Device 'devnum' | Reg 'reg' | CfgType0 */
  PCI_CFG_WRITE(0x00, value);
  #ifdef DEBUG
    Debug_Message("wK","To PCI space, we wrote &%08X\n",value );
  #endif
  PLX_REG_BIC(0xAC, 0x80000000);

  return;
}



/*--------------------------------------------------------------------
** Function Name : HW_ConfigRead
**
** Purpose       : Reads the value from the config reg of the specified card
**
** Returns       : Read value
**
*/
uint32
HW_ConfigRead
(
  uint32	device_number,
  uint32	register_offset
)
{
  uint32	pci_regvalue, devnum, reg;
  
  devnum = g_pci_device_data[device_number].Device + 11;
  reg    = (register_offset & 0x000000fc); /* reg is the word containing the register */
  
  #ifdef DEBUG
    Debug_Message("wK","About to write &%08X into local reg AC. Card =%d, reg=%d\n",0x80000000 | (devnum<<11) | reg, devnum, reg );
  #endif
  PLX_REG_SET(0xAC, 0x80000000 | (devnum<<11) | reg ); /* CEn | Bus 0 | Device 'devnum' | Reg 'reg' | CfgType0 */
  PCI_CFG_READ(0x00, pci_regvalue);
  #ifdef DEBUG
    Debug_Message("wK","From PCI space, we read back &%08X\n",pci_regvalue );
  #endif
  PLX_REG_BIC(0xAC, 0x80000000);

  return(pci_regvalue);
}



/*--------------------------------------------------------------------
** Function Name : HW_IRQ_handler
**
** Purpose       : Handles the PLX irq
**
** Returns       : Read value
**
*/
int HW_IRQ_handler
(
  _kernel_swi_regs	*regblock,
  void			*pw
)
{
  uint32	regval;

  /** Simply clear the bus (master/target) abort bit if it's set **/
  PLX_REG_READ(0x04, regval);
  if(regval & 0x20000000)
  {
    /** Bus abort **/
    PLX_REG_SET(0x04, 0x30000000);
  }

  return(0);
}

/**/
/**  End of file. **/
