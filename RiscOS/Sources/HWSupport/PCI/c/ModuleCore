/******************************************************************************/
/**  File:    ModuleCore						     **/
/**  	      								     **/
/**  Purpose: Core module code for the PCIManager module		     **/
/**  	      								     **/
/**  Author:  W.Turner                                                       **/
/**  	      								     **/
/**  History: 08-Aug-97 WT  Created                                          **/
/******************************************************************************/

/*--------------------------------------------------------------------
** Included files
*/
#include <stdio.h>
#include "strings.h"
#include "kernel.h"
#include "swis.h"

#include "_Private.h"
#include "Hardware.h"
#include "MemCtrl.h"

#include "ModuleCore.h"


/*--------------------------------------------------------------------
** Declare global variables
*/
PCIDevice_T	       *g_pci_device_data=0; /** Init as null pointer **/
uint8			g_num_of_devices=0;  /** Init to the 'worst case' **/
uint32			g_workspace_base;


/*--------------------------------------------------------------------
** Function Name : Module_Initialise
**
** Purpose       : Initialises the PCIManager module
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror *
Module_Initialise
(
  char	       *cmd_tail,
  int		podule_base,
  void	       *pw
)
{
  _kernel_oserror       init_error;
  _kernel_oserror      *err_ptr;
  uint32		workspace_size;
  uint8			i;
  uint8			device_list[MAX_PCI_SLOTS];

  #ifdef DEBUG
    Debug_SetVarName("PCIDebug");
    Debug_Message("wK","PCIManager module starting up\n");
  #endif

  /** Cursory check for hardware presence **/
  #ifdef DEBUG
    Debug_Message("wK","Checking for hardware...", g_num_of_devices);
  #endif
  if( !HW_Present() )
  {
    init_error.errnum = ERRNUM_NOHARDWARE;
    strcpy(init_error.errmess, ERRTXT_NOHARDWARE);
    #ifdef DEBUG
      Debug_Message("wK","Not Found\n", g_num_of_devices);
    #endif
    return(&init_error); /** No hardware, so let's not initialise **/
  }
  #ifdef DEBUG
    Debug_Message("wK","Found PLX9080\n", g_num_of_devices);
  #endif

  #ifdef DEBUG
    Debug_Message("wK","Now initialising the chip\n", g_num_of_devices);
  #endif
  /** Now call the chipset-specific initialisation routine **/
  init_error = HW_InitialiseHardware();
  
  
  #ifdef DEBUG
    Debug_Message("wK","How many devices are there?\n");
  #endif
  /** Quickly see how many devices there are **/
  g_num_of_devices = HW_CountNumberOfDevices(device_list);
  #ifdef DEBUG
    Debug_Message("wK","Total of %d\n", g_num_of_devices);
  #endif

  if(g_num_of_devices == 0)
  {
//    init_error.errnum = ERRNUM_NOSLOTS;
//    strcpy(init_error.errmess, ERRTXT_NOSLOTS);
//    #ifdef DEBUG
//      Debug_Message("wK","So we quit\n", g_num_of_devices);
//    #endif
//    return(&init_error); /** No devices, so let's not initialise **/
    return(0);
  }

  /** Claim some RMA workspace **/
  workspace_size = sizeof(PCIDevice_T)*g_num_of_devices;
  #ifdef DEBUG
    Debug_Message("wK","Workspace being claimed is &%08X bytes\n", workspace_size);
  #endif
  err_ptr = _swix(OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, workspace_size, &g_pci_device_data);
  if(err_ptr != NULL) return(err_ptr);
  #ifdef DEBUG
    Debug_Message("wK","Workspace claimed is located at &%08X\n", g_pci_device_data);
  #endif


  /** Find the pertinent details from each device **/
  for(i=0; i < g_num_of_devices; i++)
  {
    #ifdef DEBUG
      Debug_Message("wK","Finding the details for device %d. It's in slot %d, and data goes at &%08X.\n",i,device_list[i],&(g_pci_device_data[i]));
    #endif
    HW_GetDeviceInfo(device_list[i], &(g_pci_device_data[i]) );
  }

  /** Got all the info we need, so sort the memory requirements out **/
  Mem_MapDevices(g_pci_device_data, g_num_of_devices);

  /** Handle any expansion ROMs that may exist **/
//  Mem_HandleExpansionROMs(g_pci_device_data, g_num_of_devices);

  /** Everything's sorted and in place, so it's safe to claim the IRQs from the hardware **/
  HW_Asm_ClaimLSERR();
  
  return(0);

  NOT_USED(podule_base);
  NOT_USED(cmd_tail);
}


/*--------------------------------------------------------------------
** Function Name : Module_Finalise
**
** Purpose       : Finalises the PCIManager module
**
** Returns       : NULL if successful, else pointer to error block
**
*/
_kernel_oserror *
Module_Finalise
(
  int		fatal,
  int		podule_base,
  void	       *pw
)
{
  _kernel_oserror      *fin_error = NULL;
  
  #ifdef DEBUG
    Debug_Message("wK","PCIManager module shutting down\n");
  #endif

  /** Release the dogs^H^H^H^Hinterrupt **/
  HW_Asm_ReleaseLSERR();

  /** Release the workspace, if any **/
  if(g_pci_device_data != 0)
  {
    fin_error = _swix(OS_Module, _IN(0)|_IN(2), 7, g_pci_device_data);
    if(fin_error != NULL) return(fin_error);
  }
  
  return(NULL);
  
  NOT_USED(fatal);
  NOT_USED(pw);
  NOT_USED(podule_base);
}


/**/
/**  End of file. **/
