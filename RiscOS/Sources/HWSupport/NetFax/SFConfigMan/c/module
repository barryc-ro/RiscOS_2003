/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "dayheap.h"
#include "defs.h"
#include "flashlib.h"
#include "header.h"
#include "module.h"
#include "swis.h"

#define Service_ResourceFSStarting 0x60

typedef void (*P_FSStartingFN)(void *r0);

extern void clear_scratch(void);

#ifndef DONT_BUILD_RESOURCES
extern void *resources_base(void);
#endif

/*
 * module housekeeping globals
 */
void   *workspace_pointer = NULL;
#ifdef USE_TINY
static _kernel_oserror *TinyError;
#endif

configitem *tagtable = NULL;

char *fasttable = NULL;
char *freetable, *endtable;

static BOOL pending_save = FALSE;

static char *SkipSpace(char *p)
{
  while (isspace(*p))
    p++;
  return p;
}

/* Command args extraction function
 * Borrowed from KA9Q/!TCPIP package
 * Can be used in two ways:
 * 1. Entered with argv==NULL to count the args only
 *    for eg to determin size of array needed for
 *    arg pointers.
 * 2. Entered with argv pointing to an array of char*
 *    with sufficient entries for number of args present
 * cmd is the command line being processed.
 *
 * Returns number of args present, ignoring tail comments
 * or <0 if a parse error occurs (eg missing quote)
 *
 * No escape sequence processing is done, other than to not count
 * '\"' as a '"', as may need to be handled differently according to
 * usage
 */
static int CommandTokenise(char *line, char *argv[])
{
  int n = 0;
  char *p = line;

  while (*p != '\0')
  {
    p = SkipSpace(p);

/* Non escaped quote? (ie start of token) */
    if (*p == '\"')
    {
      ++p;

      if (argv != NULL)
        argv[n] = p;

  /* scan forward for another non escaped quote */
      while (!(*p == '\"' && *(p - 1) != '\\') && *p != '\0')
        ++p;

  /* Test for missing closing quote, and return a parse error if missing */
      if (*p == '\0')
        return -1;

      if (argv != NULL)  /* Terminate arg if extracting */
        *p = '\0';

      ++p;
      ++n;
      if (*p == ',')
        p++;
    }
    else if (*p != '\0')
    {
  /* Added to allow comments on end of script command to be ignored Tail
     comments may be either C++ style "// ..." or the style commonly used in
     scripts "# ..." and "; ..." */
      if (!strncmp("#", p, 1) || !strncmp(";", p, 1) || !strncmp("//", p, 2))
        break;

      if (argv != NULL)
        argv[n] = p;

      while (!isspace(*p) && *p != '\0' && *p != ',')
        ++p;

      if (argv != NULL && *p != '\0')  /* Terminate arg if extracting */
        *p++ = '\0';

      ++n;
      if (*p == ',')
        p++;
    }
  }
  return n;  /* Number of args found */
}

static char *RipNTrim(char *text)
{
  char *c, *ptr = text;
  int len;

  while (isspace(*ptr))                  /* Leading whitespace */
    ptr++;
  while (c = strchr(ptr, '\n'), c)       /* Trailing LF */
    *c = '\0';
  while (c = strchr(ptr, '\r'), c)       /* Trailing CR */
    *c = '\0';

  len = strlen(ptr);
  while (isspace(ptr[len - 1]))          /* Trailing whitespace */
    ptr[--len] = '\0';

  return(ptr);
}

static void FillIn(fieldtype which, char *locn)
{
  int loop;
  
  for (loop = 0; *tagtable[loop].name; loop++)
  {
    if (tagtable[loop].area == which)
      tagtable[loop].locn = locn;
  }
}

#define MIN_PAGE  3
#define NUM_PAGES 6

static BOOL ReSave(void)
{
  char *buffer, *tp;
  FILE *out;
  flash_page *temp = NULL;
  int loop, ret, tries;

  pending_save = FALSE;

  if (buffer = calloc(NUM_PAGES, sizeof(flash_page)), buffer == NULL)
    return(FALSE);

  if (temp = calloc(1, sizeof(flash_page)), temp == NULL)
    return(FALSE);

  tp = buffer;

  for (loop = 0; *tagtable[loop].name; loop++)
  {
    if (tagtable[loop].area == TypeVary)
    {
      tp[0] = tagtable[loop].order;
      tp[1] = tagtable[loop].len;
      memmove(&tp[2], tagtable[loop].locn, tagtable[loop].len);
      tp += (tagtable[loop].len + 2);
    }
  }
  for (loop = 0; loop < NUM_PAGES; loop++)
  {
    memmove(temp->data.structured.data, buffer + (loop * 256), 256);
    temp->data.structured.header.datatype = loop + MIN_PAGE;
    temp->data.structured.header.nextl    = loop + MIN_PAGE + 1;
    temp->data.structured.header.nexth    =  0;
    temp->data.structured.header.reserved = -1;

    tries = 0;

    while (ret = flashlib_write_page(loop + MIN_PAGE, temp), ret && tries < 5)
      tries++;
  }
  return(TRUE);
}

static void PreLoad(void)
{
  char *buffer, *tp;
  flash_page *temp = NULL;
  int loop;

  if (fasttable == NULL)
  {
    if (fasttable = calloc(1, 8192), fasttable == NULL)
      exit(1);
    freetable = fasttable;
    endtable  = fasttable + 8192;
  }
  
/* flash stuff goes here... */

  if (buffer = calloc(NUM_PAGES, sizeof(flash_page)), buffer == NULL)
    exit(1);

  for (loop = 0; loop < NUM_PAGES; loop++)
  {
    if (flashlib_read_page(loop + MIN_PAGE, &temp))
      memset(temp, '\0', sizeof(flash_page));
    memmove(buffer + (loop * 256), temp->data.structured.data, 256);
  }
  if (temp)
    free(temp);

  tp = buffer;
  while (*tp != 255 && tp < &buffer[NUM_PAGES * sizeof(flash_page)])
  {
    for (loop = 0; *tagtable[loop].name; loop++)
    {
      if (tagtable[loop].area == TypeVary && tagtable[loop].order == tp[0] && tp[1] > 0)
      {
        memmove(freetable, &tp[2], tp[1]);
        tagtable[loop].locn = freetable;
        tagtable[loop].len  = tp[1];
        freetable += tp[1];
        break;
      }
    }
    tp += (tp[1] + 2);
  }
  free(buffer);
  
  for (loop = 0; *tagtable[loop].name; loop++)
  {
    if (tagtable[loop].area == TypeVary)
    {
      if (tagtable[loop].locn == NULL)
      {
        tagtable[loop].locn = freetable;
        freetable += tagtable[loop].len;
      }

      if (strcmp(tagtable[loop].name, "Flags") == 0)
        FillIn(TypeFlag, tagtable[loop].locn);
      else if (strcmp(tagtable[loop].name, "Words") == 0)
        FillIn(TypeWord, tagtable[loop].locn);
      else if (strcmp(tagtable[loop].name, "Quads") == 0)
        FillIn(TypeQuad, tagtable[loop].locn);

    }
  }
}

void ReadFieldNames(void)
{
  char buffer[80];
  char *argv[8], *cp;
  FILE *fin;
  int argc, lines = 0;

  if (fin = fopen("Resources:$.Resources.SFConfigMan.Tags", "r"), fin)
  {
    while (fgets(buffer, 80, fin))
    {
      lines++;
    }
    if (tagtable = calloc(lines, sizeof(configitem)), tagtable == NULL)
    {
      _swix(0x107, 0);
      fclose(fin);
      exit(0);
    }
    fseek(fin, 0, SEEK_SET);

    lines = 0;
    while (fgets(buffer, 80, fin))
    {
      if (*buffer != '#' && strlen(buffer) > 0)
      {
        cp = RipNTrim(buffer);
        if (*cp  == '\0')
          continue;
        argc = CommandTokenise(cp, argv);
        if (argc == 5)
        {
          strncpy(tagtable[lines].name, argv[0], 28);
          tagtable[lines].name[27] = '\0';
          switch (toupper(argv[1][0]))
          {
          case 'F':
            tagtable[lines].area = TypeFlag;
            break;

          case 'W':
            tagtable[lines].area = TypeWord;
            break;

          case 'Q':
            tagtable[lines].area = TypeQuad;
            break;

          case 'V':
            tagtable[lines].area = TypeVary;
            break;
          }
          tagtable[lines].order = atoi(argv[2]);
          tagtable[lines].len   = atoi(argv[3]);
          lines++;
        }
      }
    }
    fclose(fin);
  }
}

static configitem *CheckFieldName(char *name)
{
  int loop = 0;
  
  while (*tagtable[loop].name)
  {
    if (strcmp(name, tagtable[loop].name) == 0)
      return(&tagtable[loop]);
    loop++;
  }
  return(NULL);
}

_kernel_oserror *SFCM_swis(int swi_no, _kernel_swi_regs *r, void *pw)
{
  configitem *which;
  
  switch (swi_no)
  {
  case (SFConfigMan_Read - SFConfigMan_00):
    if (which = CheckFieldName((char *) r->r[0]), which)
    {
      if (r->r[1] == NULL)
      {
        r->r[0] = which->len;
      }
      else if ((r->r[2] == 0 && which->len <= sizeof(int)) || r->r[2] >= which->len)
      {
        switch (which->area)
        {
        case TypeFlag:
          {
            int flags;

            flags = ((int *) (which->locn))[which->order / 32];
            *((int *) r->r[1]) = ((flags >> (which->order % 32)) & 1);
          }
          break;

        case TypeWord:
          *((int *) r->r[1]) = ((int *) which->locn)[which->order];
          break;

        case TypeQuad:
          memcpy((char *) r->r[1], &(which->locn)[(which->order) << 4], which->len);
          break;

        case TypeVary:
          memcpy((char *) r->r[1], which->locn, which->len);
          break;
        }
        r->r[0] = which->len;
      }
      else
      {
        r->r[0] = -4;
      }
    }
    else
    {
      r->r[0] = -1;
    }
    break;

  case (SFConfigMan_Write - SFConfigMan_00):
    if (which = CheckFieldName((char *) r->r[0]), which && strlen((char *) r->r[1]) < 256)
    {
      if (r->r[1] == NULL)
      {
        r->r[0] = -2;
      }
      else
      {
        switch (which->area)
        {
        case TypeFlag:
          {
            int flags, bit, mask;

            flags = ((int *) (which->locn))[which->order / 32];
            bit   = (*(((int *) r->r[1])) & 1) << (which->order % 32);
            mask  = (1) << (which->order % 32);
            flags = (flags & ~mask) | bit;
            ((int *) which->locn)[which->order / 32] = flags;
          }
          r->r[0] = 0;
          break;

        case TypeWord:
          ((int *) which->locn)[which->order] = *((int *) r->r[1]);
          r->r[0] = 0;
          break;

        case TypeQuad:
          if (r->r[2] != 16)
          {
            r->r[0] = -2;
          }
          else
          {
            memcpy(&(which->locn)[(which->order) << 4], (char *) r->r[1], 16);
            r->r[0] = 0;
          }
          break;

        case TypeVary:
          if (which->len < r->r[2])
          {
            which->locn = freetable;
            freetable += r->r[2];
          }
          memcpy(which->locn, (char *) r->r[1], r->r[2]);
          which->len = r->r[2];
          r->r[0] = 0;
          break;
        }
        if (r->r[0] == 0)
        {
          if (pending_save)
            removeticker(SFCM_callafter_entry, workspace_pointer);
          callafter(5, SFCM_callafter_entry, workspace_pointer);
          pending_save = TRUE;
        }
      }
    }
    else
    {
      r->r[0] = -1;
    }
    break;

  case (SFConfigMan_FlashPage - SFConfigMan_00):
    break;

  case (SFConfigMan_Alloc - SFConfigMan_00):
    if (r->r[0])
      r->r[0] = (int) Heap_Alloc(r->r[0]);
    else
      r->r[0] = NULL;
    break;

  case (SFConfigMan_Free - SFConfigMan_00):
    if (r->r[0])
      Heap_Free((void *) r->r[0]);
    r->r[0] = NULL;
    break;
  }
  return(NULL);
}

_kernel_oserror *SFCM_callafter_handler (_kernel_swi_regs *r, void *pw)
{
  if (pw == workspace_pointer)
    callback(SFCM_callback_entry, pw);

  return(NULL);
}

_kernel_oserror *SFCM_callback_handler (_kernel_swi_regs *r, void *pw)
{
  ReSave();
  return(NULL);
}

void SFCM_service(int service, _kernel_swi_regs *r, void *pw)
{
  switch (service)
  {
#ifndef DONT_BUILD_RESOURCES
  case Service_ResourceFSStarting:
    ((P_FSStartingFN)(r->r[2]))(resources_base());
    break;
#endif
  }
}

/* module finalise */
_kernel_oserror *SFCM_modfinal(int fatal, int podule, void *pw)
{
  if (pending_save)
  {
    removeticker(SFCM_callafter_entry, workspace_pointer);
    ReSave();
  }
#ifdef USE_TINY
  if ( TinyError == NULL )
    _swix( TinySupport_Die, 0 );
#endif
#ifndef DONT_BUILD_RESOURCES
  _swix(ResourceFS_DeregisterFiles, _IN(0), resources_base());
#endif
  if (tagtable)
    free(tagtable);
  if (fasttable)
    free(fasttable);

  return NULL;
}

/* module initialise */
_kernel_oserror *SFCM_modinit(char *cmd_tail, int podule_base, void *pw)
{
  _kernel_swi_regs reg;

  workspace_pointer = pw;

#ifdef USE_TINY
  /*
   * try to use TinyStubs if possible.
   */
  reg.r[0] = (int) workspace_pointer;
  TinyError = _kernel_swi(TinySupport_Share, &reg, &reg);
#endif
#ifndef DONT_BUILD_RESOURCES
  _swix(ResourceFS_RegisterFiles, _IN(0), resources_base());
#endif
  Heap_Create();
  ReadFieldNames();
  PreLoad();

  return (NULL);
}
