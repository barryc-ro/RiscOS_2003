#include <stdlib.h>
#include <string.h>

#include "defs.h"
#include "dayheap.h"
#include "swis.h"

#define PAGE_SIZE 4096
#define HEAP_INC  (PAGE_SIZE - 1)

static char *heap_addr;
static int   heap_dyn;
static int   heap_size  = PAGE_SIZE;
static int   heap_count = 0;

static BOOL heap_init = FALSE;

char *CreateDynamic(char *name, int *area, int minsize, int maxsize)
{
  char *pointer, *narea;
  
  *area = -1;

  do
  {
    _swix (OS_DynamicArea, _INR(0, 1) | _OUT(1), 3, *area, area);
    if (*area != -1) 
      _swix (OS_DynamicArea, _INR(0, 1) | _OUT(3) | _OUT(8), 2, *area,
                             &pointer, &narea);
  } while (*area != -1 && strcmp(name, narea) != 0);

  if (*area == -1)
    _swix(OS_DynamicArea, _INR(0, 8) | _OUT(1) | _OUT(3), 0, -1, minsize, -1,
                    128, maxsize, 0, 0, name,
                    area, &pointer);
  return(pointer);
}

static void _Heap_Lose(void)
{
  _swix(OS_DynamicArea, _INR(0, 1), 1, heap_dyn);
}  

_kernel_oserror *Heap_Create(void)
{
  _kernel_oserror *err = NULL;
  
  if (!heap_init)
  {
    heap_addr = CreateDynamic(_HEAPNAME_, &heap_dyn, 4 * 1024, -1);
    heap_init = TRUE;
    atexit(_Heap_Lose);
    err = _swix(OS_Heap, _INR(0, 1) | _IN(3), 0, heap_addr, 4 * 1024);
  }                       
  return(err);
}

void Heap_Free(void *block)
{
#if TRUE
  int heap_lose, heap_end;
#endif                     
  
  if (!heap_init)
    return;
  
  if (_swix(OS_Heap, _INR(0, 2), 3, heap_addr, block) == NULL)
    heap_count--;

#if TRUE
  if (_swix(OS_DynamicArea, _INR(0, 1) | _OUT(2), 2, heap_dyn, &heap_size) == NULL)
  {
    /* No error trap as we only want to shrink by as much as possible,
       not necessarily as much as we say. */                
    _swix(OS_Heap, _INR(0, 1) | _IN(3), 5, heap_addr, -(heap_size - PAGE_SIZE));
    
    /* Shhh!!! Don't tell anyone I'm looking at the heap end directly! */
    heap_end = ((int *) heap_addr)[3];
    heap_lose = heap_size - heap_end;
    if (heap_lose > HEAP_INC)
    {
      _swix(OS_ChangeDynamicArea, _INR(0, 1), heap_dyn, -heap_lose + HEAP_INC);
    }
  }
#endif                     
}

void *Heap_Alloc(int size)
{
  int heap_free, heap_most;
  char *heap_alloc = NULL;

  if (!heap_init)
    return(NULL);
  
  _swix(OS_Heap, _INR(0, 1) | _OUTR(2, 3), 1, heap_addr,
                  &heap_most, &heap_free);

  while (heap_most < size)
  {
    _swix(OS_ChangeDynamicArea, _INR(0, 1), heap_dyn, size - heap_most + HEAP_INC);
    _swix(OS_DynamicArea, _INR(0, 1) | _OUT(2), 2, heap_dyn, &heap_size);
    _swix(OS_Heap, _INR(0, 1) | _IN(3), 5, heap_addr,
             size - heap_most + HEAP_INC);
    _swix(OS_Heap, _INR(0, 1) | _OUTR(2, 3), 1, heap_addr,
             &heap_most, &heap_free);
  }
  _swix(OS_Heap, _INR(0, 1) | _IN(3) | _OUT(2), 2, heap_addr, size,
                  &heap_alloc);
  if (heap_alloc != NULL)
    heap_count++;                  

  return((void *) heap_alloc);

  return(NULL);
}
