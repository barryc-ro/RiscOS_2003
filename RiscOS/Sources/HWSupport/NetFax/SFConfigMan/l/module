     1   
     3   
     4   
     5   
     6   
     7   
     8   
     9   
    10   
    11  
    12  
    17  
    24  
    25  
    26  typedef void (*P_FSStartingFN)(void *r0);
    27  
    28  extern void clear_scratch(void);
    29  
    30  
    31  extern void *resources_base(void);
    32  
    33  
    34   
    36  
    36  
    37  void   *workspace_pointer =  0 ;
    38  
    39  
    40  
    41  
    42  configitem *tagtable =  0 ;
    43  
    44  char *fasttable =  0 ;
    45  char *freetable, *endtable;
    46  
    47  static BOOL pending_save =  0 ;
    48  
    49  static char *SkipSpace(char *p)
    50  {
    51    while ( (__ctype[ *p ] &  1 ) )
    52      p++;
    53    return p;
    54  }
    55  
    56   
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    72  
    73  static int CommandTokenise(char *line, char *argv[])
    74  {
    75    int n = 0;
    76    char *p = line;
    77  
    78    while (*p != '\0')
    79    {
    80      p = SkipSpace(p);
    81  
    82   
    83      if (*p == '\"')
    84      {
    85        ++p;
    86  
    87        if (argv !=  0 )
    88          argv[n] = p;
    89  
    90     
    91        while (!(*p == '\"' && *(p - 1) != '\\') && *p != '\0')
    92          ++p;
    93  
    94     
    95        if (*p == '\0')
    96          return -1;
    97  
    98        if (argv !=  0 )   
    99          *p = '\0';
   100  
   101        ++p;
   102        ++n;
   103        if (*p == ',')
   104          p++;
   105      }
   106      else if (*p != '\0')
   107      {
   108     
   110  
   110  
   111        if (!strncmp("#", p, 1) || !strncmp(";", p, 1) || !strncmp("//", p, 2))
   112          break;
   113  
   114        if (argv !=  0 )
   115          argv[n] = p;
   116  
   117        while (! (__ctype[ *p ] &  1 )  && *p != '\0' && *p != ',')
   118          ++p;
   119  
   120        if (argv !=  0  && *p != '\0')   
   121          *p++ = '\0';
   122  
   123        ++n;
   124        if (*p == ',')
   125          p++;
   126      }
   127    }
   128    return n;   
   129  }
   130  
   131  static char *RipNTrim(char *text)
   132  {
   133    char *c, *ptr = text;
   134    int len;
   135  
   136    while ( (__ctype[ *ptr ] &  1 ) )                   
   137      ptr++;
   138    while (c = strchr(ptr, '\n'), c)        
   139      *c = '\0';
   140    while (c = strchr(ptr, '\r'), c)        
   141      *c = '\0';
   142  
   143    len = strlen(ptr);
   144    while ( (__ctype[ ptr[len - 1] ] &  1 ) )           
   145      ptr[--len] = '\0';
   146  
   147    return(ptr);
   148  }
   149  
   150  static void FillIn(fieldtype which, char *locn)
   151  {
   152    int loop;
   153    
   154    for (loop = 0; *tagtable[loop].name; loop++)
   155    {
   156      if (tagtable[loop].area == which)
   157        tagtable[loop].locn = locn;
   158    }
   159  }
   160  
   161  
   162  
   163  
   164  static BOOL ReSave(void)
   165  {
   166    char *buffer, *tp;
   167    FILE *out;
   168    flash_page *temp =  0 ;
   169    int loop, ret, tries;
   170  
   171    pending_save =  0 ;
   172  
   173    if (buffer = calloc( 6 , sizeof(flash_page)), buffer ==  0 )
   174      return( 0 );
   175  
   176    if (temp = calloc(1, sizeof(flash_page)), temp ==  0 )
   177      return( 0 );
   178  
   179    tp = buffer;
   180  
   181    for (loop = 0; *tagtable[loop].name; loop++)
   182    {
   183      if (tagtable[loop].area == TypeVary)
   184      {
   185        tp[0] = tagtable[loop].order;
   186        tp[1] = tagtable[loop].len;
   187        memmove(&tp[2], tagtable[loop].locn, tagtable[loop].len);
   188        tp += (tagtable[loop].len + 2);
   189      }
   190    }
   191    for (loop = 0; loop <  6 ; loop++)
   192    {
   193      memmove(temp->data.structured.data, buffer + (loop * 256), 256);
   194      temp->data.structured.header.datatype = loop +  3 ;
   195      temp->data.structured.header.nextl    = loop +  3  + 1;
   196      temp->data.structured.header.nexth    =  0;
   197      temp->data.structured.header.reserved = -1;
   198  
   199      tries = 0;
   200      _swix(0x107, 0);
   201  
   202      while (ret = flashlib_write_page(loop +  3 , temp), ret && tries < 5)
   203        tries++;
   204    }
   205    return( (!( 0 )) );
   206  }
+++ Warning: variable 'out' declared but not used
   207  
   208  static void PreLoad(void)
   209  {
   210    char *buffer, *tp;
   211    flash_page *temp =  0 ;
   212    int loop;
   213  
   214    if (fasttable ==  0 )
   215    {
   216      if (fasttable = calloc(1, 8192), fasttable ==  0 )
   217        exit(1);
   218      freetable = fasttable;
   219      endtable  = fasttable + 8192;
   220    }
   221    
   222   
   223  
   224    if (buffer = calloc( 6 , sizeof(flash_page)), buffer ==  0 )
   225      exit(1);
   226  
   227    for (loop = 0; loop <  6 ; loop++)
   228    {
   229      _swix(0x107, 0);
   230      if (flashlib_read_page(loop +  3 , &temp))
   231        memset(temp, '\0', sizeof(flash_page));
   232      memmove(buffer + (loop * 256), temp->data.structured.data, 256);
   233    }
   234    if (temp)
   235      free(temp);
   236  
   237    tp = buffer;
   238    while (*tp != 255 && tp < &buffer[ 6  * sizeof(flash_page)])
   239    {
   240      for (loop = 0; *tagtable[loop].name; loop++)
   241      {
   242        if (tagtable[loop].area == TypeVary && tagtable[loop].order == tp[0] && tp[1] > 0)
   243        {
   244          memmove(freetable, &tp[2], tp[1]);
   245          tagtable[loop].locn = freetable;
   246          tagtable[loop].len  = tp[1];
   247          freetable += tp[1];
   248          break;
   249        }
   250      }
   251      tp += (tp[1] + 2);
   252    }
   253    free(buffer);
   254    
   255    for (loop = 0; *tagtable[loop].name; loop++)
   256    {
   257      if (tagtable[loop].area == TypeVary)
   258      {
   259        if (tagtable[loop].locn ==  0 )
   260        {
   261          tagtable[loop].locn = freetable;
   262          freetable += tagtable[loop].len;
   263        }
   264  
   265        if (strcmp(tagtable[loop].name, "Flags") == 0)
   266          FillIn(TypeFlag, tagtable[loop].locn);
   267        else if (strcmp(tagtable[loop].name, "Words") == 0)
   268          FillIn(TypeWord, tagtable[loop].locn);
   269        else if (strcmp(tagtable[loop].name, "Quads") == 0)
   270          FillIn(TypeQuad, tagtable[loop].locn);
   271  
   272      }
   273    }
   274  }
   275  
   276  void ReadFieldNames(void)
   277  {
   278    char buffer[80];
   279    char *argv[8], *cp;
   280    FILE *fin;
   281    int argc, lines = 0;
   282  
   283    if (fin = fopen("Resources:$.Resources.SFConfigMan.Tags", "r"), fin)
   284    {
   285      while (fgets(buffer, 80, fin))
   286      {
   287        lines++;
   288      }
   289      if (tagtable = calloc(lines, sizeof(configitem)), tagtable ==  0 )
   290      {
   291        _swix(0x107, 0);
   292        fclose(fin);
   293        exit(0);
   294      }
   295      fseek(fin, 0,  0 );
   296  
   297      lines = 0;
   298      while (fgets(buffer, 80, fin))
   299      {
   300        if (*buffer != '#' && strlen(buffer) > 0)
   301        {
   302          cp = RipNTrim(buffer);
   303          if (*cp  == '\0')
   304            continue;
   305          argc = CommandTokenise(cp, argv);
   306          if (argc == 5)
   307          {
   308            strncpy(tagtable[lines].name, argv[0], 28);
   309            tagtable[lines].name[27] = '\0';
   310            switch (toupper(argv[1][0]))
   311            {
   312            case 'F':
   313              tagtable[lines].area = TypeFlag;
   314              break;
   315  
   316            case 'W':
   317              tagtable[lines].area = TypeWord;
   318              break;
   319  
   320            case 'Q':
   321              tagtable[lines].area = TypeQuad;
   322              break;
   323  
   324            case 'V':
   325              tagtable[lines].area = TypeVary;
   326              break;
   327            }
   328            tagtable[lines].order = atoi(argv[2]);
   329            tagtable[lines].len   = atoi(argv[3]);
   330            lines++;
   331          }
   332        }
   333      }
   334      fclose(fin);
   335    }
   336  }
   337  
   338  static configitem *CheckFieldName(char *name)
   339  {
   340    int loop = 0;
   341    
   342    while (*tagtable[loop].name)
   343    {
   344      if (strcmp(name, tagtable[loop].name) == 0)
   345        return(&tagtable[loop]);
   346      loop++;
   347    }
   348    return( 0 );
   349  }
   350  
   351  _kernel_oserror *SFCM_swis(int swi_no, _kernel_swi_regs *r, void *pw)
   352  {
   353    configitem *which;
   354    
   355    switch (swi_no)
   356    {
   357    case ( 0x050a40  -  0x050a40 ):
   358      if (which = CheckFieldName((char *) r->r[0]), which)
   359      {
   360        if (r->r[1] ==  0 )
   361        {
   362          r->r[0] = which->len;
   363        }
   364        else if ((r->r[2] == 0 && which->len <= sizeof(int)) || r->r[2] >= which->len)
   365        {
   366          switch (which->area)
   367          {
   368          case TypeFlag:
   369            {
   370              int flags;
   371  
   372              flags = ((int *) (which->locn))[which->order / 32];
   373              *((int *) r->r[1]) = ((flags >> (which->order % 32)) & 1);
   374            }
   375            break;
   376  
   377          case TypeWord:
   378            *((int *) r->r[1]) = ((int *) which->locn)[which->order];
   379            break;
   380  
   381          case TypeQuad:
   382            memcpy((char *) r->r[1], &(which->locn)[(which->order) << 4], which->len);
   383            break;
   384  
   385          case TypeVary:
   386            memcpy((char *) r->r[1], which->locn, which->len);
   387            break;
   388          }
   389          r->r[0] = which->len;
   390        }
   391        else
   392        {
   393          r->r[0] = -4;
   394        }
   395      }
   396      else
   397      {
   398        r->r[0] = -1;
   399      }
   400      break;
   401  
   402    case ( 0x050a41  -  0x050a40 ):
   403      if (which = CheckFieldName((char *) r->r[0]), which && strlen((char *) r->r[1]) < 256)
   404      {
   405        if (r->r[1] ==  0 )
   406        {
   407          r->r[0] = -2;
   408        }
   409        else
   410        {
   411          switch (which->area)
   412          {
   413          case TypeFlag:
   414            {
   415              int flags, bit, mask;
   416  
   417              flags = ((int *) (which->locn))[which->order / 32];
   418              bit   = (*(((int *) r->r[1])) & 1) << (which->order % 32);
   419              mask  = (1) << (which->order % 32);
   420              flags = (flags & ~mask) | bit;
   421              ((int *) which->locn)[which->order / 32] = flags;
   422            }
   423            r->r[0] = 0;
   424            break;
   425  
   426          case TypeWord:
   427            ((int *) which->locn)[which->order] = *((int *) r->r[1]);
   428            r->r[0] = 0;
   429            break;
   430  
   431          case TypeQuad:
   432            if (r->r[2] != 16)
   433            {
   434              r->r[0] = -2;
   435            }
   436            else
   437            {
   438              memcpy(&(which->locn)[(which->order) << 4], (char *) r->r[1], 16);
   439              r->r[0] = 0;
   440            }
   441            break;
   442  
   443          case TypeVary:
   444            if (which->len < r->r[2])
   445            {
   446              which->locn = freetable;
   447              freetable += r->r[2];
   448            }
   449            memcpy(which->locn, (char *) r->r[1], r->r[2]);
   450            which->len = r->r[2];
   451            r->r[0] = 0;
   452            break;
   453          }
   454          if (r->r[0] == 0)
   455          {
   456            if (pending_save)
   457              removeticker(SFCM_callafter_entry, workspace_pointer);
+++ Warning: inventing 'extern int removeticker();'
   458            callafter(500, SFCM_callafter_entry, workspace_pointer);
+++ Warning: inventing 'extern int callafter();'
   459            pending_save =  (!( 0 )) ;
   460          }
   461        }
   462      }
   463      else
   464      {
   465        r->r[0] = -1;
   466      }
   467      break;
   468  
   469    case ( 0x050a42  -  0x050a40 ):
   470      break;
   471  
   472    case ( 0x050a43  -  0x050a40 ):
   473      if (r->r[0])
   474        r->r[0] = (int) Heap_Alloc(r->r[0]);
   475      else
   476        r->r[0] =  0 ;
   477      break;
   478  
   479    case ( 0x050a44  -  0x050a40 ):
   480      if (r->r[0])
   481        Heap_Free((void *) r->r[0]);
   482      r->r[0] =  0 ;
   483      break;
   484    }
   485    return( 0 );
   486  }
   487  
   488  _kernel_oserror *SFCM_callafter_handler (_kernel_swi_regs *r, void *pw)
   489  {
   490    if (pw == workspace_pointer)
   491      callback(SFCM_callback_entry, pw);
+++ Warning: inventing 'extern int callback();'
   492  
   493    return( 0 );
   494  }
   495  
   496  _kernel_oserror *SFCM_callback_handler (_kernel_swi_regs *r, void *pw)
   497  {
   498    ReSave();
   499    return( 0 );
   500  }
   501  
   502  void SFCM_service(int service, _kernel_swi_regs *r, void *pw)
   503  {
   504    switch (service)
   505    {
   506  
   507    case  0x60 :
   508      ((P_FSStartingFN)(r->r[2]))(resources_base());
+++ Warning: <cast>: cast between function pointer and non-function object
   509      break;
   510  
   511    }
   512  }
   513  
   514   
   515  _kernel_oserror *SFCM_modfinal(int fatal, int podule, void *pw)
   516  {
   517    if (pending_save)
   518    {
   519      removeticker(SFCM_callafter_entry, workspace_pointer);
   520      ReSave();
   521    }
   522  
   523  
   524  
   525  
   526  
   527    _swix( 0x00041B41 ,  (1U << ( 0 )) , resources_base());
   528  
   529    if (tagtable)
   530      free(tagtable);
   531    if (fasttable)
   532      free(fasttable);
   533  
   534    clear_scratch();
   535      
   536    return  0 ;
   537  }
   538  
   539   
   540  _kernel_oserror *SFCM_modinit(char *cmd_tail, int podule_base, void *pw)
   541  {
   542    _kernel_swi_regs reg;
   543  
   544    workspace_pointer = pw;
   545  
   546  
   547  
   549  
   549  
   550  
   551  
   552  
   553  
   554    _swix( 0x00041B40 ,  (1U << ( 0 )) , resources_base());
   555  
   556    Heap_Create();
   557    ReadFieldNames();
   558    PreLoad();
   559  
   560    return ( 0 );
   561  }
+++ Warning: variable 'reg' declared but not used
   562  
