     1  
     5  
     9  
    10  
    11  
    12  static char *heap_addr;
    13  static int   heap_dyn;
    14  static int   heap_size  =  4096 ;
    15  static int   heap_count = 0;
    16  
    17  static BOOL heap_init =  0 ;
    18  
    19  char *CreateDynamic(char *name, int *area, int minsize, int maxsize)
    20  {
    21    char *pointer, *narea;
    22    
    23    *area = -1;
    24  
    25    do
    26    {
    27      _swix ( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (( 1 ) !=  0x10 ? 1U << 31 - ( 1 ): 1U << 21) , 3, *area, area);
    28      if (*area != -1) 
    29        _swix ( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (( 3 ) !=  0x10 ? 1U << 31 - ( 3 ): 1U << 21)  |  (( 8 ) !=  0x10 ? 1U << 31 - ( 8 ): 1U << 21) , 2, *area,
    30                               &pointer, &narea);
    31    } while (*area != -1 && strcmp(name, narea) != 0);
    32  
    33    if (*area == -1)
    34      _swix( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 8 ) + 1)  |  (( 1 ) !=  0x10 ? 1U << 31 - ( 1 ): 1U << 21)  |  (( 3 ) !=  0x10 ? 1U << 31 - ( 3 ): 1U << 21) , 0, -1, minsize, -1,
    35                      128, maxsize, 0, 0, name,
    36                      area, &pointer);
    37    return(pointer);
    38  }
    39  
    40  static void _Heap_Lose(void)
    41  {
    42    _swix( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1) , 1, heap_dyn);
    43  }  
    44  
    45  _kernel_oserror *Heap_Create(void)
    46  {
    47    _kernel_oserror *err =  0 ;
    48    
    49    if (!heap_init)
    50    {
    51      heap_addr = CreateDynamic( "Daytona shared heap" , &heap_dyn, 4 * 1024, -1);
    52      heap_init =  (!( 0 )) ;
    53      atexit(_Heap_Lose);
    54      err = _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (1U << ( 3 )) , 0, heap_addr, 4 * 1024);
    55    }                       
    56    return(err);
    57  }
    58  
    59  void Heap_Free(void *block)
    60  {
    61   (!( 0 )) 
    62  
    62    int heap_lose, heap_end;
    63  
    64    
    65    if (!heap_init)
    66      return;
    67    
    68    if (_swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 2 ) + 1) , 3, heap_addr, block) ==  0 )
    69      heap_count--;
    70  
    71   (!( 0 )) 
    72  
    72    if (_swix( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (( 2 ) !=  0x10 ? 1U << 31 - ( 2 ): 1U << 21) , 2, heap_dyn, &heap_size) ==  0 )
    73    {
    74       
    75                  
    76      _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (1U << ( 3 )) , 5, heap_addr, -(heap_size -  4096 ));
    77      
    78       
    79      heap_end = ((int *) heap_addr)[3];
    80      heap_lose = heap_size - heap_end;
    81      if (heap_lose >  ( 4096  - 1) )
    82      {
    83        _swix( 0x0000002A ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1) , heap_dyn, -heap_lose +  ( 4096  - 1) );
    84      }
    85    }
    86  
    87  }
    88  
    89  void *Heap_Alloc(int size)
    90  {
    91    int heap_free, heap_most;
    92    char *heap_alloc =  0 ;
    93  
    94    if (!heap_init)
    95      return( 0 );
    96    
    97    _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (~0U >> ( 2 ) ^ ~0U >> ( 3 ) + 1) , 1, heap_addr,
    98                    &heap_most, &heap_free);
    99  
   100    while (heap_most < size)
   101    {
   102      _swix( 0x0000002A ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1) , heap_dyn, size - heap_most +  ( 4096  - 1) );
   103      _swix( 0x00000066 ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (( 2 ) !=  0x10 ? 1U << 31 - ( 2 ): 1U << 21) , 2, heap_dyn, &heap_size);
   104      _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (1U << ( 3 )) , 5, heap_addr,
   105               size - heap_most +  ( 4096  - 1) );
   106      _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (~0U >> ( 2 ) ^ ~0U >> ( 3 ) + 1) , 1, heap_addr,
   107               &heap_most, &heap_free);
   108    }
   109    _swix( 0x0000001D ,  (~0 << ( 0 ) ^ ~0 << ( 1 ) + 1)  |  (1U << ( 3 ))  |  (( 2 ) !=  0x10 ? 1U << 31 - ( 2 ): 1U << 21) , 2, heap_addr, size,
   110                    &heap_alloc);
   111    if (heap_alloc !=  0 )
   112      heap_count++;                  
   113  
   114    return((void *) heap_alloc);
   115  
   116    return( 0 );
   117  }
   118  
