/* module.c - RISC OS module related code. */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "flashman.h"
#include "error.h"
#include "debuglib/debuglib.h"

ERROR_STRUCT (BADSWI, "BadSWI");

static _kernel_oserror *TinyError;

/*----------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise (char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *er;

  NOT_USED (cmd_tail);

  /* Initialise Debug Library */
  debug_initialise ("DayFlashMan", "","");
  debug_output_device (DEBUGIT_OUTPUT);
  debug_atexit ();

  er = flashman_initialise (pw, podule_base);

  /* Try to use TinyStubs if possible. */
  if (er == NULL)
    TinyError = _swix (TinySupport_Share, _IN(0), pw);

  return er;
}

/*----------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  NOT_USED (fatal); NOT_USED (podule); NOT_USED (pw);

  if (TinyError == NULL)
    _swix (TinySupport_Die, 0);

  flashman_finalise (pw);

  return NULL;
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *module_swi (int swi_no, _kernel_swi_regs *r, void *pw)
{
  NOT_USED (pw);

  switch (swi_no)
  {
    case 0:
      return flashman_allocate (r);
    case 1:
      return flashman_deallocate (r);
    case 2:
      return flashman_showusage (r);
    case 3:
      return flashman_getusedlist (r);
    case 4:
      return flashman_modifyusedlist (r);
    default:
      return _swix (MessageTrans_ErrorLookup,
                    _IN(0) | _IN(1) | _IN(2) | _IN(3) | _IN(4),
                    ERROR(BADSWI), 0, 0, 0, MODULE_NAME);
  }
}
