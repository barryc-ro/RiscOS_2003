/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "reset.h"


static _kernel_oserror *TinyError;


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *
module_finalise( int fatal, int podule, void *pw )
{
    reset_finalise( pw );

    if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );

    return NULL;

    NOT_USED( fatal );
    NOT_USED( podule );
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
    _kernel_oserror *err = reset_initialise( pw );

    /* Try to use TinyStubs if possible.
     */
    if ( err == NULL ) TinyError = _swix( TinySupport_Share, _IN(0), pw );

    return err;

    NOT_USED( cmd_tail );
    NOT_USED( podule_base );
}
