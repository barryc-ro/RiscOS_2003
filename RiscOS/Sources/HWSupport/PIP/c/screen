/******************************************************************************

      File: screen.c
   Purpose: screen stuff
    Author: A.Pirozek
   History: 02-04-98 - AJP Created

 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "msgs.h"
#include "tl750.h"
#include "screen.h"

#define SCREEN_REDIRECTED 1       /* 0 = no, 1 =yes */
#define SCREEN_RED_METHOD (1<<1)  /* 0 = sots, 1 =memory address altered */
#define SCREEN_ADDRADDR   0x1190

#define SpriteReason_ReadControlBlock      8
#define SpriteReason_InitSprites           9
#define SpriteReason_CreateSprite         15
#define SpriteReason_CheckValid           17
#define SpriteReason_SelectSprite         24
#define SpriteReason_SwitchOutputToSprite 60
#define SpriteReason_ReadSaveAreaSize     62

static uint *volatile spritearea =NULL;
static uint *volatile contextarea=NULL;
static uint screen_addr_old;    /* old screen address */
static int area_number =0;
static int sstate;  /* has the screen been redirected, and how */

typedef struct _page_block
{
  uint page_number;
  uint logical_address;
  uint physical_address;
} page_block;

/******************************************************************************
 make screen memory on tl750 card cacheable
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_enable_cache ( void)
{
  _kernel_swi_regs r;
  _kernel_oserror *e =NULL;
  static page_block *page_table;
  int n;

  page_table =( page_block *)malloc ( 405 * sizeof ( page_block));
  if ( page_table ==NULL)
    return msge_lookup ( ERROR_MALLOC_FAILED);

  screen_start =0xd6000;
  for ( n=0; n<405; n++)
  {
    page_table [ n].page_number      =0;
    page_table [ n].physical_address =0;
    page_table [ n].logical_address  =
                  ( podule_base +mem_swapped +screen_start +( n *4096));
  }

  r.r [ 0] =1<<9|3<<14;
  r.r [ 1] =( int)page_table;
  r.r [ 2] =405;
  r.r [ 2] =1;
  e =_kernel_swi ( OS_Memory, &r, &r);

  free ( page_table);
  return e;
}
/******************************************************************************
 get some dynamic area memory for the screen
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_init ( void)
{
  spritearea =( uint *volatile)(podule_base +mem_swapped);
  sstate =0;
  return NULL;
}

/******************************************************************************
 force a screen redraw if we're in the wimp
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_redraw ( void)
{
  _kernel_swi_regs r;
  _kernel_oserror *e =NULL;

  r.r [ 0] =3;
  e =_kernel_swi ( Wimp_ReadSysInfo, &r, &r);
  if ( e)
    return e;
  if ( r.r [ 0] ==1)
  {
    r.r [ 0] =-1;
    r.r [ 1] =0;
    r.r [ 2] =0;
    r.r [ 3] =2000;
    r.r [ 4] =2000;
    e =_kernel_swi ( Wimp_ForceRedraw, &r, &r);
  }
  return e;
}

/******************************************************************************
 rediredct screen output to tl750 card - using SwitchOutputToSprite
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_start_1 ( void)
{
  _kernel_oserror *e =NULL;
  _kernel_swi_regs r;
  uint *volatile caddr; /* control register */

  caddr =( uint *volatile)( podule_base);
  *caddr=3;

  *(spritearea +0) =0x0012c400;
  *(spritearea +1) =0x1;
  *(spritearea +2) =0x10;
  *(spritearea +3) =0x0012c03c;
  *(spritearea +4) =0x0012c02c;
  *(spritearea +5) =0x65726373;
  *(spritearea +6) =0x6e65;
  *(spritearea +7) =0x0;
  *(spritearea +8) =0x27f;
  *(spritearea +9) =0x1df;
  *(spritearea +10) =0x0;
  *(spritearea +11) =0x1f;
  *(spritearea +12) =0x2c;
  *(spritearea +13) =0x2c;
  *(spritearea +14) =0x301680b5;

  r.r [ 0] =(256 +SpriteReason_ReadSaveAreaSize);
  r.r [ 1] =( uint)spritearea;
  r.r [ 2] =( int)"screen";
  e =_kernel_swi ( OS_SpriteOp, &r, &r);
  if ( e)
    return e;

  contextarea =( uint *) malloc ( r.r [ 3]);
  if ( contextarea ==NULL)
    return msge_lookup ( ERROR_MALLOC_FAILED);
  *contextarea =0;

  /* switch output to sprite */
  r.r [ 0] =(256 +SpriteReason_SwitchOutputToSprite);
  r.r [ 1] =( int)spritearea;
  r.r [ 2] =( int)"screen";
  r.r [ 3] =( int)contextarea;
  e =_kernel_swi ( OS_SpriteOp, &r, &r);
  if ( e)
    return e;

  sstate |=SCREEN_REDIRECTED;
  return screen_redraw ();
}

/******************************************************************************
 stop rediredct screen output to tl750 card - using SwitchOutputToSprite
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_stop_1 ( void)
{
  _kernel_oserror *e =NULL;
  _kernel_swi_regs r;

  /* stop output to sprite */
  r.r [ 0] =(256 +SpriteReason_SwitchOutputToSprite);
  r.r [ 1] =( int)spritearea;
  r.r [ 2] =0;
  r.r [ 3] =( int)contextarea;
  e =_kernel_swi ( OS_SpriteOp, &r, &r);

  if ( contextarea)
  {
    free ( contextarea);
    contextarea =NULL;
  }
  sstate =0;
  return e;
}

/******************************************************************************
 free claimed screen
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_free ( void)
{
  _kernel_swi_regs r;
  _kernel_oserror *e =NULL;

  if ( contextarea)
    free ( contextarea);
  return e;

  if ( area_number !=0)
  {
    /* free sprite header area */
    r.r[ 0] =1;
    r.r[ 1] =area_number;
    e =_kernel_swi ( OS_DynamicArea, &r, &r);
  }

  if ( contextarea)
    free ( contextarea);
  return e;
}

/******************************************************************************
 copy screen to pip memory
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_copy ( void)
{
  _kernel_swi_regs r;
  _kernel_oserror *e =NULL;
  uint *volatile saddr; /* screen address */
  uint *volatile paddr; /* pip memory address */
  uint *volatile caddr; /* control register */
  int n, vvl [ 10];

  vvl [ 0] =148;
  vvl [ 1] =-1;
  r.r [ 0] =( int)&vvl;
  r.r [ 1] =( int)&vvl;
  e =_kernel_swi ( OS_ReadVduVariables, &r, &r);
  if ( e)
    return e;

  caddr =( uint *volatile)( podule_base);
  *caddr =3;

  paddr  =( uint *volatile)( podule_base +mem_swapped +screen_start);
  saddr  =( uint *volatile)( vvl [ 0]);

  for ( n=0; n <=(( 720 *576) -1); n++)
    *( paddr +( uint)( n)) =*( saddr+( uint)( n));
  *caddr =0;
  return e;
}

/******************************************************************************
 rediredct screen output to tl750 card - changing screen address
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_start_2 ( int keepaddr, int redraw)
{
  uint *volatile saddr; /* start of screen address address */
  uint *volatile caddr; /* control registers */

  caddr =( uint *volatile)( podule_base);
  *caddr=3;

  saddr =( uint *)SCREEN_ADDRADDR;
  if ( keepaddr)
    screen_addr_old =*saddr;    /* old screen address */

  *saddr =(podule_base +mem_swapped +screen_start);
  if ( redraw)
    screen_redraw();
  if ( sstate ==0)
  {
    tl750_gfx_alpha_mode ( 1); /* switch to global alpha mode */
    tl750_gfxalpha ( 0x70);    /* set alpha level to nearly on */
  }
  sstate =3;

  return NULL;
}

/******************************************************************************
 stop rediredct screen output to tl750 card - using screen address address
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_stop_2 ( void)
{
  uint *volatile saddr; /* start of screen address address */

  if ( sstate ==0)
    return NULL;

  saddr =( uint *)SCREEN_ADDRADDR;
  *saddr =screen_addr_old;
  sstate =0;
  screen_redraw();

  return NULL;
}

/******************************************************************************
 handle a mode change - rewrite screen address if redirected
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *screen_mode_change ( void)
{
  if ( sstate !=3)
    return NULL;

  return screen_start_2 ( TRUE, TRUE);
}
