/******************************************************************************

      File: swihandler.c
   Purpose: handle swi's
    Author: A.Pirozek
   History: 27-03-98 - AJP Created

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "ctype.h"
#include "module.h"
#include "msgs.h"
#include "tl750.h"
#include "screen.h"
#include "swihandler.h"
#include "misc.h"

#define REASON_MASK     0xff
#define SUB_REASON_MASK 0xffffff00

/******************************************************************************
 reason code 0, program a tl750 register
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_register ( _kernel_swi_regs *r)
{
  if ( r ->r [ 0] & SUB_REASON_MASK)
    return msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);

  return tl750_register ( r ->r [ 1], &r ->r [ 2], &r ->r [ 3]);
}

/******************************************************************************
 reason code 1, select background source
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_bgsource ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  switch (( r ->r [ 0] & SUB_REASON_MASK) >>8)
  {
    /* colour */
    case 0:
      e =tl750_bgsource_colour (( uint) r ->r [ 1]);
      break;

    /* sprite file */
    case 1:
      e =tl750_bgsource_sprite (( char *)r ->r [ 1]);
      break;

    /* video source */
    case 2:
      if ( r ->r [ 1] <0 || r ->r [ 1] >2)
        e =msge_lookup ( ERROR_INVALID_VIDEO_SOURCE);
      else
        e =tl750_bgsource_video ( r ->r [ 1]);
      break;

    default:
      e =msge_lookup ( ERROR_BAD_SUB_REASON_CODE);
      break;
  }
  return e;
}

/******************************************************************************
 reason code 2, store background video source
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_bgsave ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if (( r ->r [ 0] & SUB_REASON_MASK) >>8)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_bgsave ();

  return e;
}

/******************************************************************************
 reason code 3, restore background video source
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_bgrestore ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if (( r ->r [ 0] & SUB_REASON_MASK) >>8)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_bgrestore ();

  return e;
}

/******************************************************************************
 reason code 4, select the source for the PIP window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_pipsource ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  switch (( r ->r [ 0] & SUB_REASON_MASK) >>9)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      if ( r ->r [ 0] & 1<<8)
        e =tl750_pipsource (( r ->r [ 0] & SUB_REASON_MASK) >>9, 1);
      else
        e =tl750_pipsource (( r ->r [ 0] & SUB_REASON_MASK) >>9, 0);
      break;

    default:
      e =msge_lookup ( ERROR_BAD_SUB_REASON_CODE);
      break;
  }
  return e;
}

/******************************************************************************
 reason code 5, store current video source for PIP window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_pipsave ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if (( r ->r [ 0] & SUB_REASON_MASK) >>8)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
   e =tl750_pipsave ();

  return e;
}

/******************************************************************************
 reason code 6, restore pip source
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_piprestore ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if (( r ->r [ 0] & SUB_REASON_MASK) >>8)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_piprestore ();

  return e;
}

/******************************************************************************
 reason code 7, set size of pip window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_pipsize ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;
  int w, h;

  if ( r ->r [ 0] & 0xfffffc00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    tl750_pip_read_size ( &w, &h);
    switch (( r ->r [ 0] & 0x00000100) >> 8)
    {
      case 0:
        w =r ->r [ 1];
        /*e =tl750_pipsize_set_width ( r ->r [ 1]);
        if ( e)
          return e;*/
        break;

      case 1:
        w +=r ->r [ 1];
        /*e =tl750_pipsize_alter_width ( r ->r [ 1]);
        if ( e)
          return e;*/
        break;
    }

    switch (( r ->r [ 0] & 0x00000200) >> 9)
    {
      case 0:
        h =r ->r [ 2];
        /*e =tl750_pipsize_set_height ( r ->r [ 2]);
        if ( e)
          return e;*/
        break;

      case 1:
        h +=r ->r [ 2];
        /*e =tl750_pipsize_alter_height ( r ->r [ 2]);
        if ( e)
          return e;*/
        break;
    }
  }

  tl750_pip_set_size ( w, h);
  return e;
}

/******************************************************************************
 reason code 8, set position of pip window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_pippos ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;
  int x, y;

  if ( r ->r [ 0] & 0xfffffc00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    tl750_pip_read_pos ( &x, &y);
    switch (( r ->r [ 0] & 0x00000100) >> 8)
    {
      case 0:
        x =r ->r [ 1];
        /*e =tl750_pippos_set_x ( r ->r [ 1]);
        if ( e)
          return e;*/
        break;

      case 1:
        x +=r ->r [ 1];
        /*e =tl750_pippos_alter_x ( r ->r [ 1]);
        if ( e)
          return e;*/
        break;
    }

    switch (( r ->r [ 0] & 0x00000200) >> 9)
    {
      case 0:
        y =r ->r [ 2];
        /* e =tl750_pippos_set_y ( r ->r [ 2]);
        if ( e)
          return e;*/
        break;

      case 1:
        y +=r -> r [ 2];
        /*e =tl750_pippos_alter_y ( r ->r [ 2]);
        if ( e)
          return e;*/
        break;
    }
  }
  tl750_pip_set_pos ( x, y);
  return e;
}

/******************************************************************************
 reason code 9, set size of graphics window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxsize ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & 0xfffff800)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    if ( r ->r [ 0] & 0x400)
    {
      if ( r ->r [ 0] & 0xfffffb00)
        e =msge_lookup ( ERROR_INVALID_FLAG_COMBI);
      else
        e =tl750_gfxsize_full_screen ();
    }
    else
    {
      switch (( r ->r [ 0] & 0x00000100) >> 8)
      {
        case 0:
          e =tl750_gfxsize_set_width ( r ->r [ 1]);
          if ( e)
            return e;
          break;

        case 1:
          e =tl750_gfxsize_alter_width ( r ->r [ 2]);
          if ( e)
            return e;
          break;
      }

      switch (( r ->r [ 0] & 0x00000200) >> 9)
      {
        case 0:
          e =tl750_gfxsize_set_height ( r ->r [ 1]);
          if ( e)
            return e;
          break;

        case 1:
          e =tl750_gfxsize_alter_height ( r ->r [ 2]);
          if ( e)
            return e;
          break;
      }
    }
  }

  return e;
}

/******************************************************************************
 reason code 10, set position of sclaed graphic
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxpos ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & 0xfffffc00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    switch (( r ->r [ 0] & 0x00000100) >> 8)
    {
      case 0:
        e =tl750_gfxpos_set_x ( r ->r [ 1]);
        if ( e)
          return e;
        break;

      case 1:
        e =tl750_gfxpos_alter_x ( r ->r [ 1]);
        if ( e)
          return e;
        break;
    }

    switch (( r ->r [ 0] & 0x00000200) >> 9)
    {
      case 0:
        e =tl750_gfxpos_set_y ( r ->r [ 2]);
        if ( e)
          return e;
        break;

      case 1:
        e =tl750_gfxpos_alter_y ( r ->r [ 2]);
        if ( e)
          return e;
        break;
    }
  }

  return e;
}

/******************************************************************************
 reason code 11, set global alpha level
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxalpha ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_gfxalpha ( r ->r [ 1]);
  return e;
}

/******************************************************************************
 reason code 12, fade graphics plane
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxfade ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & 0xfffffe00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_gfxfade ( r ->r [ 0]>>8);

  return e;
}

/******************************************************************************
 reason code 14, mode pip above or below graphics plane
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_piptop ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    e =tl750_piptop ( r ->r [ 1]);

  return e;
}

/******************************************************************************
 reason code 15, switch screen output to tl750 memory (or not)
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_start_screen ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & 0xfffffe00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    switch (( r ->r [ 0] & ( 1<<8)) >>8)
    {
      case 0:
        e =screen_stop_2 ();
        break;

      case 1:
        e =screen_start_2 ( TRUE, TRUE);
        break;

      default:
        e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
        break;
    }
  }

  return e;
}

/******************************************************************************
 reason code 16, switch colour keying on or off
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxkey ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & 0xfffffe00)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    tl750_gfxkey (( r ->r [ 0] & 1<<8)>>8);

  return e;
}

/******************************************************************************
 reason code 17, set minimum and maximum colour key values
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxkey_levels ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    tl750_gfx_colour_keys (( uint) r ->r [ 1],
                           ( uint) r ->r [ 2]);

  return e;
}

/******************************************************************************
 reason code 18, set the alpha mode
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxalpha_mode ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    tl750_gfx_alpha_mode (( r ->r [ 0] & 1<<8)>>8);

  return e;
}

/******************************************************************************
 reason code 19, set the format of the graphics plane
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_gfxset_format ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
    tl750_gfxset_format ( r ->r [ 1]);

  return e;
}

/******************************************************************************
 reason code 20, read position and size of pip window
  parameters: r - registers
     returns:
 ******************************************************************************/
static _kernel_oserror *swi_pip_read_pos ( _kernel_swi_regs *r)
{
  int x, y, w, h;
  _kernel_oserror *e =NULL;

  if ( r ->r [ 0] & SUB_REASON_MASK)
    e =msge_lookup ( ERROR_RESERVED_FLAGS_MUSTB0);
  else
  {
    tl750_pip_read_pos ( &x, &y);
    tl750_pip_read_size ( &w, &h);
    r ->r [ 1] =x;
    r ->r [ 2] =y;
    r ->r [ 3] =w;
    r ->r [ 4] =h;
  }

  return e;
}

/******************************************************************************
 despatch the swi to the appropriate function, depending on the reason code
  parameters: r - registers
     returns:
 ******************************************************************************/
_kernel_oserror *swi_handler ( _kernel_swi_regs *r)
{
  _kernel_oserror *e =NULL;

  switch ( r ->r [ 0] & REASON_MASK)
  {
    case 0:
      e =swi_register ( r);
      break;

    case 1:
      e =swi_bgsource ( r);
      break;

    case 2:
      e =swi_bgsave ( r);
      break;

    case 3:
      e =swi_bgrestore ( r);
      break;

    case 4:
      e =swi_pipsource ( r);
      break;

    case 5:
      e =swi_pipsave ( r);
      break;

    case 6:
      e =swi_piprestore ( r);
      break;

    case 7:
      e =swi_pipsize ( r);
      break;

    case 8:
      e =swi_pippos ( r);
      break;

    case 9:
      e =swi_gfxsize ( r);
      break;

    case 10:
      e =swi_gfxpos ( r);
      break;

    case 11:
      e =swi_gfxalpha ( r);
      break;

    case 12:
      e =swi_gfxfade ( r);
      break;

    case 14:
      e =swi_piptop ( r);
      break;

    case 15:
      e =swi_start_screen ( r);
      break;

    case 16:
      e =swi_gfxkey ( r);
      break;

    case 17:
      e =swi_gfxkey_levels ( r);
      break;

    case 18:
      e =swi_gfxalpha_mode ( r);
      break;

    case 19:
      e =swi_gfxset_format ( r);
      break;

    case 20:
      e =swi_pip_read_pos ( r);
      break;

    default:
      e =msge_lookup ( ERROR_BAD_REASON_CODE);
      break;
  }
  return e;
}
