/******************************************************************************

      File: misc.c
   Purpose: general purpose routines
    Author: A.Pirozek
   History: 25-03-98 - AJP Created

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "misc.h"

extern void Processor_UserMode ( char *sp);
extern void Processor_SVCMode ( char *sp);

/******************************************************************************
 return the length of string which contains a terminating char <32
  parameters: str - string to count
     returns: int - length of str
 ******************************************************************************/
int str_len ( char *str)
{
  int n=0;

  while ( str [ n] >=32)
    n++;

  return n;
}

/******************************************************************************
 return the length of string which is terminated by c or a char <32
  parameters: str - string to count
              c   - terminating char
     returns: int - length of str
 ******************************************************************************/
int str_lenc ( char *str, char c)
{
  int n=0;

  while (( str [ n] >32) && ( str [ n] !=c))
    n++;

  return n;
}

/******************************************************************************
 copy a string which contains a terminating char <32
  parameters: dest - destination string
              src  - string to copy
     returns: char * - pointer to destination string
        note: dest is NULL terminated
 ******************************************************************************/
char *str_cpy ( char *dest, char *src)
{
  int n=0;

  while ( src [ n] >=32)
  {
    dest [ n] =src [ n];
    n++;
  }

  dest [ n] =NULL;
  return dest;
}

/******************************************************************************
 make a copy of a string
  parameters: str - string to copy
     returns: NULL   - malloc failed
              char * - pointer to copy of str
 ******************************************************************************/
char *make_string ( char *str)
{
  char *newstr;

  newstr = ( char *) calloc ( str_len ( str) +1, sizeof ( char));
  if ( newstr ==NULL)
    return NULL;
  str_cpy ( newstr, str);

  return newstr;
}

/******************************************************************************
 make a copy of a const string
  parameters: str - string to copy
     returns: NULL   - malloc failed
              char * - pointer to copy of str
 ******************************************************************************/
char *make_stringc ( const char *str)
{
  char *newstr;

  newstr = ( char *) calloc ( str_len (( char *) str) +1, sizeof ( char));
  if ( newstr ==NULL)
    return NULL;
  str_cpy ( newstr, ( char *) str);

  return newstr;
}

/****************************************************************************
 converts a string to lower case chars
  parameters: str - pointer to string
     returns:
 ****************************************************************************/
char *to_lower ( char *str)
{
  int tmp =0;

  while ( str [ tmp] != NULL)
  {
    str [ tmp] = tolower ( str [ tmp]);
    tmp ++;
  }
  return str;
}

/****************************************************************************
 strip chars from the start of a string
  parameters: str - pointer to string
              c   - char to be stripped
     returns:
 ****************************************************************************/
void strip_lchars ( char *str, char c)
{
  int sstart  =0,
      spstart =0;

  if ( str [ 0] !=c)
    return;

  while (( str [ sstart] == c) && ( str [ sstart] !=NULL))
	sstart ++;

  if ( sstart == str_len ( str))
  {
    str [ 0] =NULL;
    return;
  }

  while ( str [ sstart] != NULL)
  {
    str [ spstart] = str [ sstart];
    spstart ++; sstart ++;
  }
  str [ spstart] =NULL;
}

/*****************************************************************************
 strip spaces from the end of a string
  parameters: str - pointer to string
     returns:
 *****************************************************************************/
void strip_tspaces ( char *str)
{
  int index = str_len ( str) -1;

  while (( str [ index] ==' ') && ( index >0))
    index--;

  str [ ++index] =NULL;
}

/****************************************************************************
 return a sub-string from a string.
 eg. with str ="mary had a little lamb"
     c ' '
     n =2
    would return with sub="had"
  parameters: str - pointer to string containing sub-string
              sub - pointer to string to copy sub-string into
              sep - character containing separator
              n   - the number of the sub-string to be copied (from 1)
     returns: TRUE  - if it worked
              ERROR - if it didn't
 ****************************************************************************/
int sub_stringn ( char *str, char *sub, char sep, int n)
{
  int index         =0,
      findex        =0,
      current_field =0;

  n --;
  while ( current_field !=n    &&
          str [ index]  !=NULL &&
          str [ index]  !='\n')
  {
    if ( str [ index] == sep)
      current_field ++;
    index ++;
  }

  if ( str [ index] ==NULL || str [ index] =='\n')
  {
    sub =NULL;
    return ERROR;
  }

  while ((( str [ index] !=NULL) &&
          ( str [ index] !='\n') &&
          ( str [ index] !=sep)))
  {
    sub [ findex] = str [ index];
    findex ++;
    index ++;
  }
  sub [ findex] =NULL;
  return TRUE;
}

/****************************************************************************
 convert a hex number in a string, into an integer note that the there must
 not be a preceding '0x' or '&'
  parameters: str - pointer to string containing hex number
     returns: int - value of string
 ****************************************************************************/
int hexstr_int ( char *str)
{
  int   value  =0,
        offset = strlen ( str),
        shift  = 0;
  char *hex    = "0123456789abcdef";

  if ( offset <1)
    return 0;

  offset --;
  while (( offset >=0) && ( strchr ( hex, str [ offset]) !=NULL))
  {
    value  += ((strchr ( hex, str [ offset]) - hex) << shift);
    shift  +=4;
    offset --;
  }

  return value;
}

/*****************************************************************************
 check 'str' to make sure it only consists of characters in 'allow'
  parameters: str   - pointer to string where characters are to be tested
              allow - string of characters allowed in str
     returns: TRUE  - if str only consists of characters in allow
              FALSE - if str contains characters not in allow
              ERROR - str contains no characters
 *****************************************************************************/
int validate_chars ( char *str, char *allow)
{
  int index =0;

  if ( strlen ( str) <1)
    return ERROR;

  while (( str [ index] !=NULL) &&  ( strchr ( allow,  str [ index]) !=NULL))
    index ++;

  if ( strchr ( allow,  str [ index]) ==NULL)
    return FALSE;

  return TRUE;
}

/******************************************************************************
 convert a hex or integer string into an integer
  parameters: cmdline - start of -register token
     returns: TRUE  - ok, value contains converted string
              FALSE - invalid hex or int string
 ******************************************************************************/
int ahtoi ( char *str, int *value)
{
  int result;

  if ( str [ 0] =='&')
    result =validate_chars ( str +1, "0123456789abcdef");
  else
    result =validate_chars ( str, "0123456789");
  if ( result !=TRUE)
    return FALSE;
  if ( str [ 0] =='&')
    *value =hexstr_int ( str);
  else
    *value =atoi ( str);

  return TRUE;
}

/****************************************************************************
 read the date and time into a string
  parameters: fs   - format of string
              date - buffer to return date string in
     returns: char * - pointer to date string
 ****************************************************************************/
char *read_date ( char *fs, char *date)
{
  char utc [ 5];
  _kernel_swi_regs in, out;

  utc  [ 0] =3;
  in.r [ 0] = 14;
  in.r [ 1] = ( int) &utc;
  _kernel_swi ( OS_Word, &in, &out);

  in.r [ 0] =-1;
  in.r [ 1] = ( int) &utc;
  in.r [ 2] = ( int) date;
  in.r [ 3] = 50;
  in.r [ 4] = ( int) fs;
  _kernel_swi ( Territory_ConvertDateAndTime, &in, &out);

  return date;
}

/****************************************************************************
 beep
  parameters:
     returns:
 ****************************************************************************/
void beep ( void)
{
  _kernel_swi_regs r;

  r.r [ 0] = 7;
  _kernel_swi ( OS_WriteC, &r, &r);
}

/****************************************************************************
 read the time since the last hard reset
  parameters:
     returns: int - time in centiseconds
 ****************************************************************************/
int cstimer ( void)
{
  _kernel_swi_regs r;

  _kernel_swi ( OS_ReadMonotonicTime, &r, &r);
  return r.r [ 0];
}

/****************************************************************************
 wait cs centi seconds
  parameters: cs - number of centiseconds to wait
     returns:
 ****************************************************************************/
void waitcs ( int cs)
{
  int tnow;

  tnow =cstimer();
  while ( cstimer () <tnow +cs);
}

/****************************************************************************
 convert rgb to yuv
  parameters: rgb - rgb word - rrggbb--
     returns: int - yuv value
 ****************************************************************************/
int rgb2yuv ( uint rgb)
{
  int y, u, v;

  y =(( 0x00004c8b * (( rgb >>24) & 0xff)) +
      ( 0x00009645 * (( rgb >>16) & 0xff)) +
      ( 0x00001d2f * (( rgb >>8)  & 0xff))) >>8;

  u =(( 0xffffda5f * (( rgb >>24) & 0xff)) +
      ( 0xffffb605 * (( rgb >>16) & 0xff)) +
      ( 0x00006f6f * (( rgb >>8)  & 0xff))) >>8;

  v =(( 0x00009d70 * (( rgb >>24) & 0xff)) +
      ( 0xffff7c29 * (( rgb >>16) & 0xff)) +
      ( 0xffffe667 * (( rgb >>8)  & 0xff))) >>8;

  return (( y <<16) | ( u << 8) | v);
}

/****************************************************************************
 convert rgb to yiq
  parameters: rgb - rgb word - rrggbb--
     returns: int - yiq value
 ****************************************************************************/
int rgb2yiq ( uint rgb)
{
  int y, i, q;

  y =(( 0x00004c8b * (( rgb >>24) & 0xff)) +
      ( 0x00009645 * (( rgb >>16) & 0xff)) +
      ( 0x00001d2f * (( rgb >>8)  & 0xff))) >>8;

  i =(( 0x00009893 * (( rgb >>24) & 0xff)) +
      ( 0xffffb9dc * (( rgb >>16) & 0xff)) +
      ( 0xffffad92 * (( rgb >>8)  & 0xff))) >>8;

  q =(( 0x00003604 * (( rgb >>24) & 0xff)) +
      ( 0xffff7a1d * (( rgb >>16) & 0xff)) +
      ( 0xffffb021 * (( rgb >>8)  & 0xff))) >>8;

  return (( y <<16) | ( i << 8) | q);
}

/****************************************************************************
 convert rgb to YCbCr
  parameters: rgb - rgb word - bbggrr--
     returns: int - yiq value
 ****************************************************************************/
void rgb2ycbcr ( uint rgb, uint *ycbcr)
{
  register char *stack;
  stack =( char *)malloc ( 4096);
  Processor_UserMode( stack +4096);

  {
    float y, cb, cr;
    int yi, cbi, cri;
    int red, green, blue;

    red   =( rgb >>8) & 0xff;
    green =( rgb >>16) & 0xff;
    blue  =( rgb >>24) & 0xff;

    y  = ( float) (( 0.299 *( float) red) +( 0.587 *( float) green) +
                   ( 0.114 *( float) blue));

    cb = 128+ ( float)(( -0.1687 *( float) red) +( -0.3313 *( float) green) +
                      ( 0.5 *( float) blue));

    cr = 128+ (float)(( 0.5 *( float) red) +(-0.4187 *( float) green) +
                     (-0.0813 *( float) blue));

    yi  =( int)y;
    cbi =( int)cb;
    cri =( int)cr;

    *ycbcr =((( yi & 0xff)<<16) | (( cbi & 0xff) <<8) | ( cri & 0xff));
  }
  Processor_SVCMode( stack +4096);
  free ( stack);
}
