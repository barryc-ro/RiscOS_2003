/******************************************************************************

      File: tl750.c
   Purpose: tiling routines
    Author: A.Pirozek
   History: 24-04-98 - AJP Created

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "msgs.h"
#include "misc.h"
#include "fileops.h"
#include "tl750.h"
#include "tile.h"

typedef struct _tile
{
  uint  sa;         /* start address of sprite */
  int   xoff,       /* xoffset */
        yoff,       /* yoffset */
        width,      /* width */
        height;     /* height */
} tile;

static tile tile_state;

/******************************************************************************
 convert a 24bit ycbcr word to 32 bits
  parameters: ycbcr - 24 bit ycbcr value
     returns: uint - 32 bit ycbcr
 ******************************************************************************/
static uint ycbcr32bit ( uint ycbcr)
{
  uint ycbcr32;

  ycbcr32 = ( ycbcr & 0x00ff0000)      |
            ( ycbcr & 0x00ff0000) >>16 |
            ( ycbcr & 0x0000ff00) <<16 |
            ( ycbcr & 0x000000ff) <<8;
  return ycbcr32;
}

/******************************************************************************
 tile a sprite which is already in memory
  parameters:
     returns:
 ******************************************************************************/
void tile_tile_previous ( void)
{
  tl750_register_wo ( DISP_BGFX_TILESA, 0x00ffffff, tile_state.sa);
  tl750_register_wo ( DISP_BGFX_TILEOSET, 0xffffffff, 0);
  tl750_register_wo ( DISP_BGFX_TILESIZE, 0xffffffff,
                      ( tile_state.width *2)|(( tile_state.height)*2)<<16);

  tl750_register_wo ( DISP_CONFIG, DISP_CONFIG_BG_VIDEO_ENABLE, 0);
  tl750_register_wo ( DISP_BG_CONFIG,
                      DISP_BG_CONFIG_BG_TILE_ENABLE|1<<4|1<<5,
                      DISP_BG_CONFIG_BG_TILE_ENABLE);
}

/******************************************************************************
 tile a sprite on the background plane
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *tile_tile_sprite ( char *path)
{
  int n, fsize =0, *sprite =NULL;
  _kernel_oserror *e =NULL;
  uint *volatile taddr;
  uint ycbcr;

  if ( fileops_exists ( path) ==FALSE)
    return msge_lookup ( ERROR_FILE_NOT_FOUND);

  e =fileops_filesize ( path, &fsize);
  if ( e)
    return e;

  if ( fsize <1)
    return msge_lookup ( ERROR_SHORT_SPRITE_FILE);

  sprite =( int *) malloc ( fsize +4);
  if ( sprite ==NULL)
    return msge_lookup ( ERROR_MALLOC_FAILED);

  e =fileops_loadfile ( path, ( char *)sprite, fsize);
  if ( e)
  {
    free ( sprite);
    return e;
  }

  if (( sprite [ 13] & 0xf8000000) !=0x30000000)
  {
    free ( sprite);
    return msge_lookup ( ERROR_NOT_24BPP_SPRITE);
  }

  taddr =( uint *)( podule_base +mem_swapped +0x63800);
  for ( n=0; n<=((sprite[7]+1) * (sprite [ 8]+1)) -1; n++)
  {
    rgb2ycbcr ( (*(( sprite +(sprite [ 1] -2))+n))<<8, &ycbcr);
    *(taddr +n) =ycbcr32bit ( ycbcr);
  }
  taddr =( uint *)( podule_base +mem_swapped +0x63800 +
                   ((( sprite [ 7] +1) * (sprite [ 8] +1))*4));
  for ( n=0; n<=((sprite[7]+1) * (sprite [ 8]+1)) -1; n++)
  {
    rgb2ycbcr ( (*(( sprite +(sprite [ 1] -2))+n))<<8, &ycbcr);
    *(taddr +n) =ycbcr32bit ( ycbcr);
  }
  free ( sprite);

  tl750_register_wo ( DISP_BGFX_TILESA, 0x00ffffff, 0x63800);
  tl750_register_wo ( DISP_BGFX_TILEOSET, 0xffffffff, 0);
  tl750_register_wo ( DISP_BGFX_TILESIZE, 0xffffffff,
                      ( sprite [ 7] +1)*2|((sprite [ 8] +1)*2)<<16);

  tl750_register_wo ( DISP_CONFIG, DISP_CONFIG_BG_VIDEO_ENABLE, 0);
  tl750_register_wo ( DISP_BG_CONFIG,
                      DISP_BG_CONFIG_BG_TILE_ENABLE|1<<4|1<<5,
                      DISP_BG_CONFIG_BG_TILE_ENABLE);

  tile_state.sa =( uint)0x63800;
  tile_state.xoff =0;
  tile_state.yoff =0;
  tile_state.width  =( sprite [ 7] +1);
  tile_state.height =( sprite [ 8] +1);
  return e;
}
